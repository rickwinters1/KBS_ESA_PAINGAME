
SD_Test.elf:     file format elf32-littlenios2
SD_Test.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00000244

Program Header:
    LOAD off    0x00001000 vaddr 0x00000000 paddr 0x00000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00000020 paddr 0x00000020 align 2**12
         filesz 0x00020dd8 memsz 0x00020dd8 flags r-x
    LOAD off    0x00021df8 vaddr 0x00020df8 paddr 0x00022cf0 align 2**12
         filesz 0x00001ef8 memsz 0x00001ef8 flags rw-
    LOAD off    0x00024be8 vaddr 0x00024be8 paddr 0x00024be8 align 2**12
         filesz 0x00000000 memsz 0x000039e8 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00000000  00000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000224  00000020  00000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         000204f8  00000244  00000244  00001244  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       000006bc  0002073c  0002073c  0002173c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001ef8  00020df8  00022cf0  00021df8  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          000039e8  00024be8  00024be8  00024be8  2**2
                  ALLOC, SMALL_DATA
  6 .SDRAM        00000000  000285d0  000285d0  00023cf0  2**0
                  CONTENTS
  7 .Flash_flash_data 00000000  0c000000  0c000000  00023cf0  2**0
                  CONTENTS
  8 .comment      00000023  00000000  00000000  00023cf0  2**0
                  CONTENTS, READONLY
  9 .debug_aranges 000011a8  00000000  00000000  00023d18  2**3
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_info   00034955  00000000  00000000  00024ec0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 0000bed1  00000000  00000000  00059815  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   000107a6  00000000  00000000  000656e6  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame  00003fe8  00000000  00000000  00075e8c  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00005e28  00000000  00000000  00079e74  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    0001b332  00000000  00000000  0007fc9c  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_alt_sim_info 00000020  00000000  00000000  0009afd0  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 00001a28  00000000  00000000  0009aff0  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .thread_model 00000006  00000000  00000000  000a29fb  2**0
                  CONTENTS, READONLY
 19 .cpu          00000005  00000000  00000000  000a2a01  2**0
                  CONTENTS, READONLY
 20 .qsys         00000001  00000000  00000000  000a2a06  2**0
                  CONTENTS, READONLY
 21 .simulation_enabled 00000001  00000000  00000000  000a2a07  2**0
                  CONTENTS, READONLY
 22 .sysid_hash   00000004  00000000  00000000  000a2a08  2**0
                  CONTENTS, READONLY
 23 .sysid_base   00000004  00000000  00000000  000a2a0c  2**0
                  CONTENTS, READONLY
 24 .sysid_time   00000004  00000000  00000000  000a2a10  2**0
                  CONTENTS, READONLY
 25 .stderr_dev   00000009  00000000  00000000  000a2a14  2**0
                  CONTENTS, READONLY
 26 .stdin_dev    00000009  00000000  00000000  000a2a1d  2**0
                  CONTENTS, READONLY
 27 .stdout_dev   00000009  00000000  00000000  000a2a26  2**0
                  CONTENTS, READONLY
 28 .sopc_system_name 0000000b  00000000  00000000  000a2a2f  2**0
                  CONTENTS, READONLY
 29 .quartus_project_dir 0000005e  00000000  00000000  000a2a3a  2**0
                  CONTENTS, READONLY
 30 .jdi          0000abc5  00000000  00000000  000a2a98  2**0
                  CONTENTS, READONLY
 31 .sopcinfo     001878b7  00000000  00000000  000ad65d  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00000000 l    d  .entry	00000000 .entry
00000020 l    d  .exceptions	00000000 .exceptions
00000244 l    d  .text	00000000 .text
0002073c l    d  .rodata	00000000 .rodata
00020df8 l    d  .rwdata	00000000 .rwdata
00024be8 l    d  .bss	00000000 .bss
000285d0 l    d  .SDRAM	00000000 .SDRAM
0c000000 l    d  .Flash_flash_data	00000000 .Flash_flash_data
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 C:/Users/rickert/Documents/GitHub/KBS_ESA_PAINGAME/SD_Test_bsp//obj/HAL/src/crt0.o
0000027c l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 hello_ucosii.c
00000000 l    df *ABS*	00000000 malloc.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 sprintf.c
00000000 l    df *ABS*	00000000 strcat.c
00000000 l    df *ABS*	00000000 strcpy.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
00020846 l     O .rodata	00000010 zeroes.4240
00020856 l     O .rodata	00000010 blanks.4239
00000000 l    df *ABS*	00000000 vfprintf.c
00020866 l     O .rodata	00000010 zeroes.4255
000051c0 l     F .text	000000bc __sbprintf
00020876 l     O .rodata	00000010 blanks.4254
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 dtoa.c
000053d0 l     F .text	00000200 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
00006f8c l     F .text	00000008 __fp_lock
00006f94 l     F .text	00000008 __fp_unlock
00006fa8 l     F .text	0000019c __sinit.part.1
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 impure.c
00021200 l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 locale.c
00021644 l     O .rwdata	00000020 lc_ctype_charset
00021624 l     O .rwdata	00000020 lc_message_charset
00021664 l     O .rwdata	00000038 lconv
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mprec.c
000208a8 l     O .rodata	0000000c p05.2710
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 s_fpclassify.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 vfprintf.c
000209cc l     O .rodata	00000010 zeroes.4184
000209dc l     O .rodata	00000010 blanks.4183
00000000 l    df *ABS*	00000000 vfprintf.c
0000ae20 l     F .text	000000fc __sprint_r.part.0
000209fc l     O .rodata	00000010 blanks.4199
000209ec l     O .rodata	00000010 zeroes.4200
0000c228 l     F .text	000000bc __sbprintf
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fputwc.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 wcrtomb.c
00000000 l    df *ABS*	00000000 wctomb_r.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
0000d72c l     F .text	0000006c udivmodsi4
00000000 l    df *ABS*	00000000 adddf3.c
00000000 l    df *ABS*	00000000 divdf3.c
00000000 l    df *ABS*	00000000 eqdf2.c
00000000 l    df *ABS*	00000000 gedf2.c
00000000 l    df *ABS*	00000000 ledf2.c
00000000 l    df *ABS*	00000000 muldf3.c
00000000 l    df *ABS*	00000000 subdf3.c
00000000 l    df *ABS*	00000000 fixdfsi.c
00000000 l    df *ABS*	00000000 floatsidf.c
00000000 l    df *ABS*	00000000 floatunsidf.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 alt_close.c
0000fe58 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
0000ff78 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
0000ffa4 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
000100a4 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
00010198 l     F .text	00000064 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
0001027c l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_read.c
00010474 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
00022c64 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_write.c
000106d0 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_env_lock.c
00022c68 l     O .rwdata	00000004 lockid
00024c14 l     O .bss	00000004 locks
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00022c6c l     O .rwdata	00000004 lockid
00024c1c l     O .bss	00000004 locks
00000000 l    df *ABS*	00000000 os_core.c
00012104 l     F .text	00000044 OS_InitMisc
00012148 l     F .text	00000068 OS_InitRdyList
000122a8 l     F .text	000000e0 OS_InitTCBList
00012028 l     F .text	000000dc OS_InitEventList
000121b0 l     F .text	0000007c OS_InitTaskIdle
0001222c l     F .text	0000007c OS_InitTaskStat
00012508 l     F .text	00000070 OS_SchedNew
00000000 l    df *ABS*	00000000 os_dbg.c
00000000 l    df *ABS*	00000000 os_flag.c
0001430c l     F .text	00000110 OS_FlagTaskRdy
00014064 l     F .text	000001c4 OS_FlagBlock
00000000 l    df *ABS*	00000000 os_mem.c
00000000 l    df *ABS*	00000000 os_q.c
00000000 l    df *ABS*	00000000 os_sem.c
00000000 l    df *ABS*	00000000 os_task.c
00000000 l    df *ABS*	00000000 os_time.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
000187b4 l     F .text	00000038 alt_dev_reg
00021844 l     O .rwdata	0000106c JTAG_UART
000228b0 l     O .rwdata	00000030 AV_Config
000228e0 l     O .rwdata	00000030 Audio_Subsystem_Audio
00022910 l     O .rwdata	0000002c Char_LCD_16x2
0002293c l     O .rwdata	0000002c IrDA
00022968 l     O .rwdata	0000002c Expansion_JP5
00022994 l     O .rwdata	0000002c Green_LEDs
000229c0 l     O .rwdata	0000002c HEX3_HEX0
000229ec l     O .rwdata	0000002c HEX7_HEX4
00022a18 l     O .rwdata	0000002c Pushbuttons
00022a44 l     O .rwdata	0000002c Red_LEDs
00022a70 l     O .rwdata	0000002c Slider_Switches
00022a9c l     O .rwdata	00000038 PS2_Port
00022ad4 l     O .rwdata	00000038 PS2_Port_Dual
00022b0c l     O .rwdata	0000002c Serial_Port
00022b38 l     O .rwdata	00000034 USB
00022b6c l     O .rwdata	00000048 VGA_Subsystem_VGA_Char_Buffer
00022bb4 l     O .rwdata	00000054 VGA_Subsystem_VGA_Pixel_DMA
00022c08 l     O .rwdata	0000002c SD_Card
00000000 l    df *ABS*	00000000 Altera_UP_SD_Card_Avalon_Interface.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
0001d144 l     F .text	000002a8 altera_avalon_jtag_uart_irq
0001d3ec l     F .text	00000110 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
0001dbc4 l     F .text	00000078 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 altera_up_avalon_character_lcd.c
00000000 l    df *ABS*	00000000 altera_up_avalon_irda.c
00000000 l    df *ABS*	00000000 altera_up_avalon_ps2.c
00000000 l    df *ABS*	00000000 altera_up_avalon_rs232.c
00000000 l    df *ABS*	00000000 altera_up_avalon_video_character_buffer_with_dma.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
0001f3a0 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
0001f60c l     F .text	000000c0 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_register.c
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
0001f8f4 l     F .text	00000050 alt_get_errno
0001f944 l     F .text	000000cc alt_file_locked
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 os_cpu_a.o
00000040 l       *ABS*	00000000 OSCtxSw_SWITCH_PC
00000000 l    df *ABS*	00000000 os_cpu_c.c
00000014 l       *ABS*	00000000 OSTCBNext_OFFSET
00000032 l       *ABS*	00000000 OSTCBPrio_OFFSET
00000000 l       *ABS*	00000000 OSTCBStkPtr_OFFSET
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
00024cb4 g     O .bss	00000004 alt_instruction_exception_handler
00024c7c g     O .bss	00000004 aux_status_register
000092e8 g     F .text	00000074 _mprec_log10
00022cba g     O .rwdata	00000002 OSTaskNameSize
000093d4 g     F .text	0000008c __any_on
0000c794 g     F .text	00000054 _isatty_r
000208b4 g     O .rodata	00000028 __mprec_tinytens
000103a0 g     F .text	000000d4 alt_main
00001194 g     F .text	00000090 strcpy
00000f38 g     F .text	000000a8 _puts_r
000284d0 g     O .bss	00000100 alt_irq
0001e760 g     F .text	0000005c alt_up_ps2_disable_read_interrupt
0000c7e8 g     F .text	0000005c _lseek_r
00014b70 g     F .text	000000d0 OS_MemInit
00022cf0 g       *ABS*	00000000 __flash_rwdata_start
00018750 g     F .text	00000064 OSTimeSet
0001dd30 g     F .text	0000003c alt_up_character_lcd_send_cmd
0000e9c0 g     F .text	00000084 .hidden __eqdf2
00018f64 g     F .text	000001ac Check_for_Master_Boot_Record
00010d80 g     F .text	00000610 OSEventPendMulti
000285d0 g       *ABS*	00000000 __alt_heap_start
0001ff50 g     F .text	00000020 OSTaskCreateHook
0001cce4 g     F .text	000001bc alt_up_sd_card_fclose
00000efc g     F .text	0000003c printf
00022c92 g     O .rwdata	00000002 OSMboxEn
000113e4 g     F .text	0000007c OSIntEnter
0000c9f4 g     F .text	0000009c _wcrtomb_r
00009b14 g     F .text	0000005c __sseek
000072dc g     F .text	00000010 __sinit
0001f0e8 g     F .text	00000100 alt_up_char_buffer_string
0000c8a0 g     F .text	00000138 __swbuf_r
0001e580 g     F .text	00000034 read_CE_bit
00022ca2 g     O .rwdata	00000002 OSQEn
00007d88 g     F .text	0000007c _setlocale_r
00007144 g     F .text	00000068 __sfmoreglue
00010a54 g     F .text	000000d0 __malloc_unlock
0001ffac g     F .text	0000001c OSTaskStatHook
0001e904 g     F .text	000000a4 alt_up_ps2_read_data_byte_timeout
0001edf8 g     F .text	00000090 alt_up_rs232_read_fd
00024c24 g     O .bss	00000001 OSLockNesting
00024ca0 g     O .bss	00000004 current_sector_modified
00022ce0 g     O .rwdata	00000002 OSDataSize
00024c25 g     O .bss	00000001 OSRunning
0001f01c g     F .text	000000cc alt_up_char_buffer_draw
00008240 g     F .text	0000015c memmove
0001ffe4 g     F .text	0000001c OSInitHookBegin
00022cd8 g     O .rwdata	00000002 OSTmrSize
000072c4 g     F .text	00000018 _cleanup
000084c0 g     F .text	000000a8 _Balloc
0001b90c g     F .text	000000c4 alt_up_sd_card_is_Present
00018cac g     F .text	0000004c Save_Modified_Sector
00024c28 g     O .bss	00000004 OSIdleCtr
0000ea44 g     F .text	000000e0 .hidden __gtdf2
0001fd04 g     F .text	00000020 altera_nios2_gen2_irq_init
0001fdd0 g       .text	00000000 OSStartTsk
00000000  w      *UND*	00000000 __errno
0001dcbc g     F .text	00000074 get_DDRAM_addr
00012840 g     F .text	000002d4 OS_TCBInit
00000000 g     F .entry	0000001c __reset
00024c98 g     O .bss	00000004 fat_partition_size_in_512_byte_sectors
00022cde g     O .rwdata	00000002 OSTmrWheelTblSize
00000020 g       *ABS*	00000000 __flash_exceptions_start
00022c7e g     O .rwdata	00000002 OSEventSize
00024c2c g     O .bss	00000001 OSPrioHighRdy
0000c73c g     F .text	00000058 _fstat_r
0001ff70 g     F .text	00000020 OSTaskDelHook
00024bf4 g     O .bss	00000004 errno
00009a90 g     F .text	00000008 __seofread
0001fdb0 g       .text	00000000 OSStartHighRdy
00017054 g     F .text	000001ec OSTaskCreateExt
00009de8 g     F .text	00001038 ___svfiprintf_internal_r
00013bb0 g     F .text	00000068 OSFlagPendGetFlagsRdy
00022cbe g     O .rwdata	00000002 OSTaskStatStkSize
00012ca0 g     F .text	00000308 OSFlagAccept
00015244 g     F .text	000000b8 OSQFlush
00014c40 g     F .text	00000140 OSQAccept
00024c0c g     O .bss	00000004 alt_argv
0002ac34 g       *ABS*	00000000 _gp
0001beb8 g     F .text	00000384 alt_up_sd_card_fopen
0001ba3c g     F .text	000000d0 alt_up_sd_card_find_first
00016e98 g     F .text	000001bc OSTaskCreate
00024c8c g     O .bss	00000004 command_argument_register
00016958 g     F .text	00000540 OSTaskChangePrio
00024c20 g     O .bss	00000004 alt_heapsem
00012b14 g     F .text	0000018c OSDebugInit
00017240 g     F .text	000003e0 OSTaskDel
000216c4 g     O .rwdata	00000180 alt_fd_list
00024d44 g     O .bss	00000370 OSFlagTbl
00011e14 g     F .text	000000b4 OS_EventTaskRemove
0001b190 g     F .text	0000012c find_first_empty_record_in_root_directory
0001f54c g     F .text	00000090 alt_find_dev
00008108 g     F .text	00000138 memcpy
00022ca8 g     O .rwdata	00000002 OSRdyTblSize
0001decc g     F .text	00000050 alt_up_character_lcd_write_fd
0001f1e8 g     F .text	0000005c alt_up_char_buffer_clear
00006f9c g     F .text	0000000c _cleanup_r
0000fc80 g     F .text	000000d0 .hidden __floatsidf
0001f6cc g     F .text	00000078 alt_io_redirect
0000eb24 g     F .text	000000e0 .hidden __ltdf2
0002073c g       *ABS*	00000000 __DTOR_END__
0001e44c g     F .text	00000090 alt_up_irda_write_fd
0001ed84 g     F .text	00000074 alt_up_rs232_read_data
00000fe0 g     F .text	00000014 puts
000202f4 g     F .text	0000009c alt_exception_cause_generated_bad_addr
00010b24 g     F .text	00000120 OSEventNameGet
00022c8c g     O .rwdata	00000002 OSFlagMax
0001ada0 g     F .text	000001a4 find_first_empty_cluster
000099c8 g     F .text	00000074 __fpclassifyd
00009244 g     F .text	000000a4 __ratio
0001b84c g     F .text	000000c0 alt_up_sd_card_open_dev
00011460 g     F .text	000000f4 OSIntExit
0000c204 g     F .text	00000024 __vfiprintf_internal
00022cc6 g     O .rwdata	00000002 OSTCBSize
00024c2d g     O .bss	00000001 OSPrioCur
0001e248 g     F .text	00000040 alt_up_irda_get_used_space_in_read_FIFO
0001d650 g     F .text	000002b4 altera_avalon_jtag_uart_read
00000700 g     F .text	00000014 malloc
00000ed0 g     F .text	0000002c _printf_r
0000d848 g     F .text	00000008 .hidden __udivsi3
000100f4 g     F .text	000000a4 isatty
00022cac g     O .rwdata	00000002 OSStkWidth
00020904 g     O .rodata	000000c8 __mprec_tens
00022ca0 g     O .rwdata	00000002 OSPtrSize
00007e04 g     F .text	0000000c __locale_charset
00022c80 g     O .rwdata	00000002 OSEventTblSize
0001e1ec g     F .text	0000005c alt_up_irda_disable_read_interrupt
0001fd24 g       .text	00000000 OSCtxSw
00020268 g     F .text	0000008c alt_icache_flush
00024bf0 g     O .bss	00000004 __malloc_top_pad
00024c30 g     O .bss	00000004 OSTCBList
00024c04 g     O .bss	00000004 alt_fd_list_lock
00022c44 g     O .rwdata	00000004 __mb_cur_max
00007e34 g     F .text	0000000c _localeconv_r
000088cc g     F .text	0000003c __i2b
00007740 g     F .text	000004c0 __sfvwrite_r
0001a0b8 g     F .text	000000b8 get_dir_divider_location
000250b4 g     O .bss	00000c30 OSMemTbl
00024c34 g     O .bss	00000001 OSTickStepState
00000ff4 g     F .text	00000054 _sbrk_r
00019d8c g     F .text	000000c0 filename_to_upper_case
00022ca4 g     O .rwdata	00000002 OSQMax
0001c23c g     F .text	00000084 alt_up_sd_card_set_attributes
00025ce4 g     O .bss	00000800 OSTaskStatStk
000147a0 g     F .text	000000f8 OSMemNameGet
00019110 g     F .text	0000027c Read_File_Record_At_Offset
00022c84 g     O .rwdata	00000002 OSFlagEn
0000c844 g     F .text	0000005c _read_r
00022cca g     O .rwdata	00000002 OSTimeTickHookEn
00015764 g     F .text	00000168 OSQPost
0001441c g     F .text	000000a0 OS_FlagUnlink
00022c5c g     O .rwdata	00000004 alt_max_fd
0001ed00 g     F .text	00000044 alt_up_rs232_check_parity
000123d8 g     F .text	00000064 OS_MemCopy
0001243c g     F .text	000000cc OS_Sched
0001a938 g     F .text	00000468 find_file_in_directory
0000c458 g     F .text	000000f0 _fclose_r
000146b0 g     F .text	000000f0 OSMemGet
00017920 g     F .text	000001c0 OSTaskNameSet
0001e5b4 g     F .text	00000030 read_num_bytes_available
00006f5c g     F .text	00000030 fflush
00024bec g     O .bss	00000004 __malloc_max_sbrked_mem
00024c38 g     O .bss	00000004 OSCtxSwCtr
0001ffc8 g     F .text	0000001c OSTimeTickHook
0001f744 g     F .text	000001b0 alt_irq_register
00022c8e g     O .rwdata	00000002 OSFlagNameSize
0001e51c g     F .text	00000034 read_RI_bit
00011ec8 g     F .text	000000fc OS_EventTaskRemoveMulti
0001b9d0 g     F .text	0000006c alt_up_sd_card_is_FAT16
0000d858 g     F .text	0000089c .hidden __adddf3
00011cc8 g     F .text	0000014c OS_EventTaskWaitMulti
00008fec g     F .text	0000011c __b2d
00022ca6 g     O .rwdata	00000002 OSQSize
0000d19c g     F .text	00000590 .hidden __umoddi3
000102cc g     F .text	000000d4 lseek
00016268 g     F .text	00000268 OSSemPend
00022c3c g     O .rwdata	00000004 _global_impure_ptr
0001a40c g     F .text	0000052c get_home_directory_cluster_for_file
00009460 g     F .text	00000568 _realloc_r
00022c90 g     O .rwdata	00000002 OSLowestPrio
000285d0 g       *ABS*	00000000 __bss_end
00020038 g     F .text	00000020 OSTCBInitHook
00022cd6 g     O .rwdata	00000002 OSTmrCfgTicksPerSec
0001fc00 g     F .text	00000104 alt_tick
00024cb8 g     O .bss	00000064 highscores
0000cbdc g     F .text	000005c0 .hidden __udivdi3
0000c55c g     F .text	00000184 _fputwc_r
00022c78 g     O .rwdata	00000002 OSEventEn
000208dc g     O .rodata	00000028 __mprec_bigtens
000086b0 g     F .text	00000104 __s2b
00022cd2 g     O .rwdata	00000002 OSTmrCfgNameSize
0000fd50 g     F .text	000000a4 .hidden __floatunsidf
00008d94 g     F .text	00000060 __mcmp
00024ca4 g     O .bss	00000004 current_sector_index
0c000000 g       *ABS*	00000000 __alt_mem_Flash_flash_data
0001e618 g     F .text	0000002c read_data_byte
000072fc g     F .text	00000018 __fp_lock_all
00014228 g     F .text	000000e4 OS_FlagInit
0001fb68 g     F .text	00000098 alt_alarm_stop
0001e550 g     F .text	00000030 read_RE_bit
00018e84 g     F .text	000000e0 mark_cluster
00022cb4 g     O .rwdata	00000002 OSTaskIdleStkSize
00024ca8 g     O .bss	00000004 alt_irq_active
00015e50 g     F .text	000000b0 OSSemAccept
000149b0 g     F .text	000000d8 OSMemPut
000144bc g     F .text	000001f4 OSMemCreate
00024c3c g     O .bss	00000004 OSIdleCtrMax
0001e288 g     F .text	0000003c alt_up_irda_get_available_space_in_write_FIFO
000000fc g     F .exceptions	000000d4 alt_irq_handler
0002169c g     O .rwdata	00000028 alt_dev_null
00022cc8 g     O .rwdata	00000002 OSTicksPerSec
0001b2bc g     F .text	00000188 convert_filename_to_name_extension
0001e160 g     F .text	00000034 alt_up_character_lcd_cursor_blink_on
0001fd24 g       .text	00000000 OSIntCtxSw
0001e7bc g     F .text	00000074 alt_up_ps2_write_data_byte
0001f384 g     F .text	0000001c alt_dcache_flush_all
000087b4 g     F .text	00000068 __hi0bits
00024c78 g     O .bss	00000004 is_sd_card_formated_as_FAT16
0000fbf8 g     F .text	00000088 .hidden __fixdfsi
0001af44 g     F .text	0000024c find_first_empty_record_in_a_subdirectory
00024c40 g     O .bss	00000004 OSTCBFreeList
00022cf0 g       *ABS*	00000000 __ram_rwdata_end
000164d0 g     F .text	0000016c OSSemPendAbort
00022c54 g     O .rwdata	00000008 alt_dev_list
00010720 g     F .text	000000f8 write
00024c9c g     O .bss	00000004 device_pointer
00022ccc g     O .rwdata	00000002 OSVersionNbr
00020df8 g       *ABS*	00000000 __ram_rodata_end
0000fff4 g     F .text	000000b0 fstat
0001ee88 g     F .text	00000094 alt_up_rs232_write_fd
00000000 g       *ABS*	00000000 __alt_mem_SDRAM
0000eb24 g     F .text	000000e0 .hidden __ledf2
0000110c g     F .text	00000088 strcat
00022c74 g     O .rwdata	00000004 OSEndiannessTest
00008b04 g     F .text	00000140 __pow5mult
0000af34 g     F .text	000012d0 ___vfiprintf_internal_r
00024c00 g     O .bss	00000004 __nlocale_changed
0000d850 g     F .text	00000008 .hidden __umodsi3
00022c86 g     O .rwdata	00000002 OSFlagGrpSize
000285d0 g       *ABS*	00000000 end
0001eaf8 g     F .text	00000098 alt_up_ps2_write_fd
0001e2c4 g     F .text	00000044 alt_up_irda_check_parity
0001ef5c g     F .text	00000080 alt_up_char_buffer_init
0001d004 g     F .text	00000140 altera_avalon_jtag_uart_init
0001269c g     F .text	000000dc OS_TaskStat
000001d0 g     F .exceptions	00000074 alt_instruction_exception_entry
0002073c g       *ABS*	00000000 __CTOR_LIST__
04000000 g       *ABS*	00000000 __alt_stack_pointer
0001dc3c g     F .text	00000080 alt_avalon_timer_sc_init
0000fdf4 g     F .text	00000064 .hidden __clzsi2
0001d904 g     F .text	000002c0 altera_avalon_jtag_uart_write
000072ec g     F .text	00000004 __sfp_lock_acquire
00008020 g     F .text	000000e8 memchr
00012388 g     F .text	00000050 OS_MemClr
0001dde0 g     F .text	00000078 alt_up_character_lcd_write
0000324c g     F .text	00001f50 ___vfprintf_internal_r
0001fdf4 g     F .text	0000015c OSTaskStkInit
00001048 g     F .text	00000058 _sprintf_r
00007450 g     F .text	000002f0 _free_r
00007e10 g     F .text	00000010 __locale_mb_cur_max
00011a24 g     F .text	00000198 OS_EventTaskRdy
0002056c g     F .text	00000194 __call_exitprocs
00024c44 g     O .bss	00000001 OSCPUUsage
00024bfc g     O .bss	00000004 __mlocale_changed
00022c34 g     O .rwdata	00000004 __malloc_sbrk_base
00000244 g     F .text	0000003c _start
00024cac g     O .bss	00000004 _alt_tick_rate
000152fc g     F .text	000002fc OSQPend
0001824c g     F .text	00000148 OSTimeDly
00000534 g     F .text	00000128 read_file
00008c44 g     F .text	00000150 __lshift
00024cb0 g     O .bss	00000004 _alt_nticks
000104c4 g     F .text	000000fc read
00018820 g     F .text	000003d8 alt_sys_init
0001e018 g     F .text	00000088 alt_up_character_lcd_shift_display
00009c1c g     F .text	000001cc __ssprint_r
00020458 g     F .text	00000114 __register_exitproc
00024c45 g     O .bss	00000001 OSTaskCtr
0001ea18 g     F .text	00000054 alt_up_ps2_clear_fifo
0001ecc4 g     F .text	0000003c alt_up_rs232_get_available_space_in_write_FIFO
00018394 g     F .text	00000168 OSTimeDlyHMSM
00008908 g     F .text	000001fc __multiply
0001e0a0 g     F .text	0000008c alt_up_character_lcd_erase_pos
0001d4fc g     F .text	00000068 altera_avalon_jtag_uart_close
00020df8 g       *ABS*	00000000 __ram_rwdata_start
0002073c g       *ABS*	00000000 __ram_rodata_start
00024d1c g     O .bss	00000028 __malloc_current_mallinfo
00022c7a g     O .rwdata	00000002 OSEventMax
00009108 g     F .text	0000013c __d2b
0001663c g     F .text	00000110 OSSemPost
00024c74 g     O .bss	00000004 initialized
000115dc g     F .text	000000d8 OSSchedUnlock
0001cea0 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
0002016c g     F .text	000000fc alt_get_fd
00024c48 g     O .bss	00000004 OSMemFreeList
00011720 g     F .text	000000ac OSStatInit
00027f68 g     O .bss	00000014 search_data
00013fa0 g     F .text	000000c4 OSFlagQuery
00022cb0 g     O .rwdata	00000002 OSTaskCreateExtEn
0000c340 g     F .text	00000054 _close_r
000203dc g     F .text	0000007c memcmp
00011a08 g     F .text	0000001c OS_Dummy
0001cf60 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
000285d0 g       *ABS*	00000000 __alt_stack_base
0001cfb0 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
0001e194 g     F .text	00000058 alt_up_irda_enable_read_interrupt
0000527c g     F .text	00000154 __swsetup_r
000264e4 g     O .bss	000001e0 OSQTbl
0000e0f4 g     F .text	000008cc .hidden __divdf3
000071ac g     F .text	00000118 __sfp
00027f7c g     O .bss	00000054 boot_sector_data
0000935c g     F .text	00000078 __copybits
00020df8 g     O .rwdata	00000408 __malloc_av_
000072f8 g     F .text	00000004 __sinit_lock_release
00024c4c g     O .bss	00000004 OSTCBHighRdy
0000ec04 g     F .text	00000724 .hidden __muldf3
00009a3c g     F .text	00000054 __sread
00024c50 g     O .bss	00000004 OSQFreeList
0001ec28 g     F .text	0000005c alt_up_rs232_disable_read_interrupt
00020058 g     F .text	00000114 alt_find_file
0001f3f0 g     F .text	000000a4 alt_dev_llist_insert
00010934 g     F .text	00000120 __malloc_lock
00010620 g     F .text	000000b0 sbrk
000012bc g     F .text	00001f90 ___svfprintf_internal_r
00010c44 g     F .text	0000013c OSEventNameSet
00006f00 g     F .text	0000005c _fflush_r
0000c394 g     F .text	000000c4 _calloc_r
00024c54 g     O .bss	00000001 OSRdyGrp
00024be8 g       *ABS*	00000000 __bss_start
0000839c g     F .text	00000124 memset
0000065c g     F .text	000000a4 main
00024c10 g     O .bss	00000004 alt_envp
00024be8 g     O .bss	00000004 __malloc_max_total_mem
0001efdc g     F .text	00000040 alt_up_char_buffer_open_dev
0001cf00 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
0000c9d8 g     F .text	0000001c __swbuf
00000280 g     F .text	000002b4 find_files
00020b28 g     O .rodata	00000100 OSUnMapTbl
0001c2c0 g     F .text	00000088 alt_up_sd_card_get_attributes
00022caa g     O .rwdata	00000002 OSSemEn
00018bf8 g     F .text	000000b4 Write_Sector_Data
0001c6c0 g     F .text	00000624 alt_up_sd_card_write
0001df90 g     F .text	00000088 alt_up_character_lcd_shift_cursor
00013c18 g     F .text	00000388 OSFlagPost
00009b70 g     F .text	00000008 __sclose
04000000 g       *ABS*	00000000 __alt_heap_limit
0000c548 g     F .text	00000014 fclose
00011bbc g     F .text	0000010c OS_EventTaskWait
0001e9a8 g     F .text	00000070 alt_up_ps2_read_data_byte
00012778 g     F .text	000000c8 OS_TaskStatStkChk
00017620 g     F .text	00000158 OSTaskDelReq
000055d0 g     F .text	00001728 _dtoa_r
00000728 g     F .text	000007a8 _malloc_r
0000cb50 g     F .text	00000030 __ascii_wctomb
00022c60 g     O .rwdata	00000004 alt_errno
000116b4 g     F .text	0000006c OSStart
000108d8 g     F .text	0000005c __env_unlock
00007c00 g     F .text	000000c4 _fwalk
00017ae0 g     F .text	000001f8 OSTaskResume
00014a88 g     F .text	000000e8 OSMemQuery
00022cbc g     O .rwdata	00000002 OSTaskStatEn
0001e308 g     F .text	00000040 alt_up_irda_write_data
00022c96 g     O .rwdata	00000002 OSMemMax
000158cc g     F .text	00000170 OSQPostFront
0001eb90 g     F .text	00000040 alt_up_ps2_open_dev
0000d798 g     F .text	00000054 .hidden __divsi3
00024c55 g     O .bss	00000003 OSRdyTbl
00022c70 g     O .rwdata	00000002 OSDebugEn
0001dda0 g     F .text	00000040 alt_up_character_lcd_open_dev
0000732c g     F .text	00000124 _malloc_trim_r
0001e708 g     F .text	00000058 alt_up_ps2_enable_read_interrupt
0002073c g       *ABS*	00000000 __CTOR_END__
00022c88 g     O .rwdata	00000002 OSFlagNodeSize
00024c80 g     O .bss	00000004 status_register
00022cd0 g     O .rwdata	00000002 OSTmrCfgMax
0001dd6c g     F .text	00000034 alt_up_character_lcd_init
00009b78 g     F .text	000000a4 strcmp
00024c88 g     O .bss	00000004 command_register
00014d80 g     F .text	000001fc OSQCreate
00017778 g     F .text	000001a8 OSTaskNameGet
0002073c g       *ABS*	00000000 __flash_rodata_start
00015a3c g     F .text	0000020c OSQPostOpt
000117cc g     F .text	0000021c OSTimeTick
00022cb8 g     O .rwdata	00000002 OSTaskMax
0002073c g       *ABS*	00000000 __DTOR_LIST__
00015f00 g     F .text	00000100 OSSemCreate
00022cdc g     O .rwdata	00000002 OSTmrWheelSize
0001ef1c g     F .text	00000040 alt_up_rs232_open_dev
0000e9c0 g     F .text	00000084 .hidden __nedf2
00022cb2 g     O .rwdata	00000002 OSTaskDelEn
0001674c g     F .text	00000110 OSSemQuery
00014f7c g     F .text	000002c8 OSQDel
000155f8 g     F .text	0000016c OSQPendAbort
000187ec g     F .text	00000034 alt_irq_init
000105c0 g     F .text	00000060 alt_release_fd
00018dd0 g     F .text	000000b4 get_cluster_flag
0001e5e4 g     F .text	00000034 read_data_valid
000010a0 g     F .text	0000006c sprintf
0001e12c g     F .text	00000034 alt_up_character_lcd_cursor_off
00020a0c g     O .rodata	00000100 .hidden __clz_tab
0001938c g     F .text	0000028c Write_File_Record_At_Offset
00024bf8 g     O .bss	00000004 _PathLocale
0001e8a0 g     F .text	00000064 alt_up_ps2_write_data_byte_with_ack
00020390 g     F .text	00000014 atexit
0000c2e4 g     F .text	0000005c _write_r
00011554 g     F .text	00000088 OSSchedLock
00007e40 g     F .text	0000001c setlocale
00012fa8 g     F .text	00000128 OSFlagCreate
00019618 g     F .text	00000688 Check_for_DOS_FAT
0001b444 g     F .text	000002c4 create_file
00022c40 g     O .rwdata	00000004 _impure_ptr
00024c84 g     O .bss	00000004 CSD_register_w0
00024c08 g     O .bss	00000004 alt_argc
00006cf8 g     F .text	00000208 __sflush_r
0001f4f0 g     F .text	0000005c _do_dtors
00007e2c g     F .text	00000008 __locale_cjk_lang
00022c82 g     O .rwdata	00000002 OSEventMultiEn
000130d0 g     F .text	00000270 OSFlagDel
00024c58 g     O .bss	00000004 OSEventFreeList
00000020 g       .exceptions	00000000 alt_irq_entry
00008f8c g     F .text	00000060 __ulp
000135c0 g     F .text	000005f0 OSFlagPend
00022cce g     O .rwdata	00000002 OSTmrEn
00007314 g     F .text	00000018 __fp_unlock_all
00022c4c g     O .rwdata	00000008 alt_fs_list
00019e4c g     F .text	0000026c check_file_name_for_FAT16_compliance
00012578 g     F .text	00000074 OS_StrCopy
00024c90 g     O .bss	00000004 buffer_memory
0001ebd0 g     F .text	00000058 alt_up_rs232_enable_read_interrupt
0001ed44 g     F .text	00000040 alt_up_rs232_write_data
00022c98 g     O .rwdata	00000002 OSMemNameSize
00020000 g     F .text	0000001c OSInitHookEnd
00000020 g       *ABS*	00000000 __ram_exceptions_start
00022cc4 g     O .rwdata	00000002 OSTCBPrioTblMax
00007e5c g     F .text	0000000c localeconv
00022cc0 g     O .rwdata	00000002 OSTaskStatStkChkEn
00022c94 g     O .rwdata	00000002 OSMemEn
00024c94 g     O .bss	00000004 fat_partition_offset_in_512_byte_sectors
00022c9e g     O .rwdata	00000002 OSMutexEn
00022cf0 g       *ABS*	00000000 _edata
000285d0 g       *ABS*	00000000 _end
00027fd0 g     O .bss	00000500 active_files
00024c5c g     O .bss	00000001 OSIntNesting
00000244 g       *ABS*	00000000 __ram_exceptions_end
0001b708 g     F .text	00000144 copy_file_record_name_to_string
0001d564 g     F .text	000000ec altera_avalon_jtag_uart_ioctl
000184fc g     F .text	000001f0 OSTimeDlyResume
00019ca0 g     F .text	000000ec Look_for_FAT16
00013470 g     F .text	00000150 OSFlagNameSet
00017cd8 g     F .text	000001c8 OSTaskStkChk
00022c9a g     O .rwdata	00000002 OSMemSize
00009a98 g     F .text	0000007c __swrite
00022c38 g     O .rwdata	00000004 __malloc_trim_threshold
00007e20 g     F .text	0000000c __locale_msgcharset
00024c60 g     O .bss	00000004 OSTCBCur
000203a4 g     F .text	00000038 exit
0001e348 g     F .text	00000074 alt_up_irda_read_data
0001bb0c g     F .text	000003ac alt_up_sd_card_find_next
00022c9c g     O .rwdata	00000002 OSMemTblSize
00007cc4 g     F .text	000000c4 _fwalk_reent
0001e644 g     F .text	000000c4 alt_up_ps2_init
00008df4 g     F .text	00000198 __mdiff
0000d7ec g     F .text	0000005c .hidden __modsi3
00018cf8 g     F .text	000000d8 Read_Sector_Data
04000000 g       *ABS*	00000000 __alt_data_end
00000020 g     F .exceptions	00000000 alt_exception
000072f0 g     F .text	00000004 __sfp_lock_release
00011390 g     F .text	00000054 OSInit
000180b4 g     F .text	0000012c OSTaskQuery
0001de58 g     F .text	00000074 alt_up_character_lcd_string
00015da4 g     F .text	000000ac OS_QInit
000125ec g     F .text	00000054 OS_StrLen
0001e4dc g     F .text	00000040 alt_up_irda_open_dev
00014898 g     F .text	00000118 OSMemNameSet
00022cb6 g     O .rwdata	00000002 OSTaskProfileEn
00024c64 g     O .bss	00000004 OSTime
000266c4 g     O .bss	00000800 OSTaskIdleStk
00020700 g     F .text	0000003c _exit
0001f244 g     F .text	00000140 alt_alarm_start
00013340 g     F .text	00000130 OSFlagNameGet
000186ec g     F .text	00000064 OSTimeGet
0001c348 g     F .text	00000378 alt_up_sd_card_read
00007e68 g     F .text	000001b8 __smakebuf_r
0001e830 g     F .text	00000070 alt_up_ps2_wait_for_ack
00001224 g     F .text	00000098 strlen
0001ff90 g     F .text	0000001c OSTaskSwHook
0001fa10 g     F .text	00000158 open
00026ec4 g     O .bss	00000b40 OSEventTbl
0000ea44 g     F .text	000000e0 .hidden __gedf2
00027a04 g     O .bss	00000510 OSTCBTbl
0001685c g     F .text	000000fc OSSemSet
00022c48 g     O .rwdata	00000004 __wctomb
0000af1c g     F .text	00000018 __sprint_r
0001f5dc g     F .text	00000030 alt_icache_flush_all
0001df1c g     F .text	00000074 alt_up_character_lcd_set_cursor_pos
00022ce4 g     O .rwdata	00000004 alt_priority_mask
00016000 g     F .text	00000268 OSSemDel
00024c68 g     O .bss	00000004 OSFlagFreeList
00022c7c g     O .rwdata	00000002 OSEventNameSize
0000519c g     F .text	00000024 __vfprintf_internal
00024c6c g     O .bss	00000001 OSStatRdy
00027f14 g     O .bss	00000054 OSTCBPrioTbl
0000cb80 g     F .text	0000005c _wctomb_r
00010818 g     F .text	000000c0 __env_lock
0001ea6c g     F .text	0000008c alt_up_ps2_read_fd
00022cc2 g     O .rwdata	00000002 OSTaskSwHookEn
0000f328 g     F .text	000008d0 .hidden __subdf3
0001e3bc g     F .text	00000090 alt_up_irda_read_fd
0000881c g     F .text	000000b0 __lo0bits
00022ce8 g     O .rwdata	00000008 alt_alarm_list
00022c8a g     O .rwdata	00000002 OSFlagWidth
0001f494 g     F .text	0000005c _do_ctors
0001ec84 g     F .text	00000040 alt_up_rs232_get_used_space_in_read_FIFO
0000ca90 g     F .text	000000c0 wcrtomb
0000fea8 g     F .text	000000d0 close
00024c18 g     O .bss	00000004 alt_envsem
00024c70 g     O .bss	00000004 OSIdleCtrRun
000119e8 g     F .text	00000020 OSVersion
00022cd4 g     O .rwdata	00000002 OSTmrCfgWheelSize
000101fc g     F .text	00000080 alt_load
000181e0 g     F .text	0000006c OS_TaskStkClr
00022cae g     O .rwdata	00000002 OSTaskCreateEn
0001a170 g     F .text	0000029c match_file_record_to_name_ext
00011fc4 g     F .text	00000064 OS_EventWaitListInit
0000c6e0 g     F .text	0000005c fputwc
0002001c g     F .text	0000001c OSTaskIdleHook
00000714 g     F .text	00000014 free
000072f4 g     F .text	00000004 __sinit_lock_acquire
00008590 g     F .text	00000120 __multadd
00017ea0 g     F .text	00000214 OSTaskSuspend
00008568 g     F .text	00000028 _Bfree
00012640 g     F .text	0000005c OS_TaskIdle
00022cda g     O .rwdata	00000002 OSTmrTblSize
00015c48 g     F .text	0000015c OSQQuery



Disassembly of section .entry:

00000000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && (!defined(ALT_SIM_OPTIMIZE) || defined(NIOS2_ECC_PRESENT))
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
   0:	00840014 	movui	r2,4096
#endif

0:
    initi r2
   4:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
   8:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
   c:	00bffd16 	blt	zero,r2,4 <__alt_mem_Flash_flash_data+0xf4000004>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
  10:	00400034 	movhi	at,0
    ori r1, r1, %lo(_start)
  14:	08409114 	ori	at,at,580
    jmp r1
  18:	0800683a 	jmp	at
  1c:	00000000 	call	0 <__reset>

Disassembly of section .exceptions:

00000020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
  20:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
  24:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
  28:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
  2c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
  30:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
  34:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
  38:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
  3c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
  40:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
  44:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
  48:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
  4c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
  50:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
  54:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
  58:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
  5c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
  60:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
  64:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
  68:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
  6c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  70:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
  74:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
  78:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
  7c:	10000326 	beq	r2,zero,8c <OSCtxSw_SWITCH_PC+0x4c>
        beq   r4, zero, .Lnot_irq
  80:	20000226 	beq	r4,zero,8c <OSCtxSw_SWITCH_PC+0x4c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
  84:	00000fc0 	call	fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
  88:	00000706 	br	a8 <OSCtxSw_SWITCH_PC+0x68>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
  8c:	df401215 	stw	ea,72(sp)
        ldhu.n  r2, 0(r4)
        ldhu.n  r3, 2(r4)
        slli.n  r3, r3, 16
        or.n    r2, r2, r3 /* Instruction that caused exception */
#else
        ldw   r2, -4(ea)   /* Instruction that caused exception */
  90:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
  94:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
  98:	00001d00 	call	1d0 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
  9c:	1000021e 	bne	r2,zero,a8 <OSCtxSw_SWITCH_PC+0x68>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
  a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
  a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
  ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
  b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
  b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
  b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
  bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
  c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
  c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
  c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
  cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
  d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
  d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
  d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
  dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
  e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
  e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
  e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
  ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
  f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
  f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
  f8:	ef80083a 	eret

000000fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
  fc:	defff904 	addi	sp,sp,-28
 100:	dfc00615 	stw	ra,24(sp)
 104:	df000515 	stw	fp,20(sp)
 108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
 10c:	00113e40 	call	113e4 <OSIntEnter>
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 110:	0005313a 	rdctl	r2,ipending
 114:	e0bffe15 	stw	r2,-8(fp)

  return active;
 118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 11c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
 120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 124:	00800044 	movi	r2,1
 128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 12c:	e0fffb17 	ldw	r3,-20(fp)
 130:	e0bffc17 	ldw	r2,-16(fp)
 134:	1884703a 	and	r2,r3,r2
 138:	10001526 	beq	r2,zero,190 <alt_irq_handler+0x94>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
 13c:	008000f4 	movhi	r2,3
 140:	10a13404 	addi	r2,r2,-31536
 144:	e0fffd17 	ldw	r3,-12(fp)
 148:	180690fa 	slli	r3,r3,3
 14c:	10c5883a 	add	r2,r2,r3
 150:	10c00017 	ldw	r3,0(r2)
 154:	008000f4 	movhi	r2,3
 158:	10a13404 	addi	r2,r2,-31536
 15c:	e13ffd17 	ldw	r4,-12(fp)
 160:	200890fa 	slli	r4,r4,3
 164:	21000104 	addi	r4,r4,4
 168:	1105883a 	add	r2,r2,r4
 16c:	10800017 	ldw	r2,0(r2)
 170:	1009883a 	mov	r4,r2
 174:	e17ffd17 	ldw	r5,-12(fp)
 178:	183ee83a 	callr	r3
#endif
        break;
 17c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 180:	0005313a 	rdctl	r2,ipending
 184:	e0bfff15 	stw	r2,-4(fp)

  return active;
 188:	e0bfff17 	ldw	r2,-4(fp)
 18c:	00000706 	br	1ac <alt_irq_handler+0xb0>
      }
      mask <<= 1;
 190:	e0bffc17 	ldw	r2,-16(fp)
 194:	1085883a 	add	r2,r2,r2
 198:	e0bffc15 	stw	r2,-16(fp)
      i++;
 19c:	e0bffd17 	ldw	r2,-12(fp)
 1a0:	10800044 	addi	r2,r2,1
 1a4:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
 1a8:	003fe006 	br	12c <__alt_mem_Flash_flash_data+0xf400012c>

    active = alt_irq_pending ();
 1ac:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
 1b0:	e0bffb17 	ldw	r2,-20(fp)
 1b4:	103fda1e 	bne	r2,zero,120 <__alt_mem_Flash_flash_data+0xf4000120>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
 1b8:	00114600 	call	11460 <OSIntExit>
}
 1bc:	e037883a 	mov	sp,fp
 1c0:	dfc00117 	ldw	ra,4(sp)
 1c4:	df000017 	ldw	fp,0(sp)
 1c8:	dec00204 	addi	sp,sp,8
 1cc:	f800283a 	ret

000001d0 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
 1d0:	defffb04 	addi	sp,sp,-20
 1d4:	dfc00415 	stw	ra,16(sp)
 1d8:	df000315 	stw	fp,12(sp)
 1dc:	df000304 	addi	fp,sp,12
 1e0:	e13fff15 	stw	r4,-4(fp)
 * NIOS2_EXCEPTION_CAUSE_NOT_PRESENT. Your handling routine should
 * check the validity of the cause argument before proceeding.
 */
#ifdef NIOS2_HAS_EXTRA_EXCEPTION_INFO
  /* Get exception cause & "badaddr" */
  NIOS2_READ_EXCEPTION(cause);
 1e4:	000531fa 	rdctl	r2,exception
 1e8:	e0bffd15 	stw	r2,-12(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
 1ec:	e0bffd17 	ldw	r2,-12(fp)
 1f0:	10801f0c 	andi	r2,r2,124
 1f4:	1004d0ba 	srli	r2,r2,2
 1f8:	e0bffd15 	stw	r2,-12(fp)
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
 1fc:	0005333a 	rdctl	r2,badaddr
 200:	e0bffe15 	stw	r2,-8(fp)
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
  badaddr = 0;
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
 204:	d0a82017 	ldw	r2,-24448(gp)
 208:	10000726 	beq	r2,zero,228 <alt_instruction_exception_entry+0x58>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
 20c:	d0a82017 	ldw	r2,-24448(gp)
 210:	e0fffd17 	ldw	r3,-12(fp)
 214:	1809883a 	mov	r4,r3
 218:	e17fff17 	ldw	r5,-4(fp)
 21c:	e1bffe17 	ldw	r6,-8(fp)
 220:	103ee83a 	callr	r2
 224:	00000206 	br	230 <alt_instruction_exception_entry+0x60>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
 228:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
 22c:	0005883a 	mov	r2,zero
}
 230:	e037883a 	mov	sp,fp
 234:	dfc00117 	ldw	ra,4(sp)
 238:	df000017 	ldw	fp,0(sp)
 23c:	dec00204 	addi	sp,sp,8
 240:	f800283a 	ret

Disassembly of section .text:

00000244 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
     244:	06c10034 	movhi	sp,1024
    ori sp, sp, %lo(__alt_stack_pointer)
     248:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
     24c:	068000b4 	movhi	gp,2
    ori gp, gp, %lo(_gp)
     250:	d6ab0d14 	ori	gp,gp,44084
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
     254:	008000b4 	movhi	r2,2
    ori r2, r2, %lo(__bss_start)
     258:	1092fa14 	ori	r2,r2,19432

    movhi r3, %hi(__bss_end)
     25c:	00c000b4 	movhi	r3,2
    ori r3, r3, %lo(__bss_end)
     260:	18e17414 	ori	r3,r3,34256

    beq r2, r3, 1f
     264:	10c00326 	beq	r2,r3,274 <_start+0x30>

0:
    stw zero, (r2)
     268:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
     26c:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
     270:	10fffd36 	bltu	r2,r3,268 <__alt_mem_Flash_flash_data+0xf4000268>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
     274:	00101fc0 	call	101fc <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
     278:	00103a00 	call	103a0 <alt_main>

0000027c <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
     27c:	003fff06 	br	27c <__alt_mem_Flash_flash_data+0xf400027c>

00000280 <find_files>:

// find_files will print out the list of files in the current path,
// then recursively call itself on any subdirectories it finds.
// It is limited to directories containing MAX_SUBDIRECTORIES or fewer
// subdirectories and a maximium path length of 104 characters (including /'s)
void find_files (char* path){
     280:	deffb004 	addi	sp,sp,-320
     284:	dfc04f15 	stw	ra,316(sp)
     288:	df004e15 	stw	fp,312(sp)
     28c:	df004e04 	addi	fp,sp,312
     290:	e13fff15 	stw	r4,-4(fp)
	char filepath [90];
	char filename [15];
	char fullpath [104];
	char* folders [MAX_SUBDIRECTORIES];
	int num_dirs = 0;
     294:	e03fb215 	stw	zero,-312(fp)
	short int file;
	short int attributes;
	bool foundAll;

	//copy the path name to local memory
	strcpy (filepath, path);
     298:	e0bfb604 	addi	r2,fp,-296
     29c:	1009883a 	mov	r4,r2
     2a0:	e17fff17 	ldw	r5,-4(fp)
     2a4:	00011940 	call	1194 <strcpy>

	foundAll = (alt_up_sd_card_find_first(filepath,filename) == 0 ? false : true);
     2a8:	e0ffb604 	addi	r3,fp,-296
     2ac:	e0bfcc84 	addi	r2,fp,-206
     2b0:	1809883a 	mov	r4,r3
     2b4:	100b883a 	mov	r5,r2
     2b8:	001ba3c0 	call	1ba3c <alt_up_sd_card_find_first>
     2bc:	10bfffcc 	andi	r2,r2,65535
     2c0:	10a0001c 	xori	r2,r2,32768
     2c4:	10a00004 	addi	r2,r2,-32768
     2c8:	1004c03a 	cmpne	r2,r2,zero
     2cc:	e0bfb305 	stb	r2,-308(fp)

	//output the current directory
	printf("/%s\n",filepath);
     2d0:	e0bfb604 	addi	r2,fp,-296
     2d4:	010000b4 	movhi	r4,2
     2d8:	2101cf04 	addi	r4,r4,1852
     2dc:	100b883a 	mov	r5,r2
     2e0:	0000efc0 	call	efc <printf>

	//loop through the directory tree
	while (!foundAll){
     2e4:	00005306 	br	434 <find_files+0x1b4>
		strcpy (fullpath,filepath);
     2e8:	e0ffd044 	addi	r3,fp,-191
     2ec:	e0bfb604 	addi	r2,fp,-296
     2f0:	1809883a 	mov	r4,r3
     2f4:	100b883a 	mov	r5,r2
     2f8:	00011940 	call	1194 <strcpy>
		//remove the '.' character from the filepath (foo/bar/. -> foo/bar/)
		fullpath [strlen(filepath)-1] = '\0';
     2fc:	e0bfb604 	addi	r2,fp,-296
     300:	1009883a 	mov	r4,r2
     304:	00012240 	call	1224 <strlen>
     308:	10bfffc4 	addi	r2,r2,-1
     30c:	e0ffd044 	addi	r3,fp,-191
     310:	1885883a 	add	r2,r3,r2
     314:	10000005 	stb	zero,0(r2)
		strcat (fullpath,filename);
     318:	e0ffd044 	addi	r3,fp,-191
     31c:	e0bfcc84 	addi	r2,fp,-206
     320:	1809883a 	mov	r4,r3
     324:	100b883a 	mov	r5,r2
     328:	000110c0 	call	110c <strcat>

		file = alt_up_sd_card_fopen (fullpath, false);
     32c:	e0bfd044 	addi	r2,fp,-191
     330:	1009883a 	mov	r4,r2
     334:	000b883a 	mov	r5,zero
     338:	001beb80 	call	1beb8 <alt_up_sd_card_fopen>
     33c:	e0bfb50d 	sth	r2,-300(fp)
		attributes = alt_up_sd_card_get_attributes (file);
     340:	e0bfb50f 	ldh	r2,-300(fp)
     344:	1009883a 	mov	r4,r2
     348:	001c2c00 	call	1c2c0 <alt_up_sd_card_get_attributes>
     34c:	e0bfb58d 	sth	r2,-298(fp)

		if (file != -1)
     350:	e0bfb50f 	ldh	r2,-300(fp)
     354:	10bfffe0 	cmpeqi	r2,r2,-1
     358:	1000031e 	bne	r2,zero,368 <find_files+0xe8>
			alt_up_sd_card_fclose(file);
     35c:	e0bfb50f 	ldh	r2,-300(fp)
     360:	1009883a 	mov	r4,r2
     364:	001cce40 	call	1cce4 <alt_up_sd_card_fclose>

		//print the file name, unless it's a directory or mount point
		if ( (attributes != -1) && !(attributes & 0x0018)){
     368:	e0bfb58f 	ldh	r2,-298(fp)
     36c:	10bfffe0 	cmpeqi	r2,r2,-1
     370:	1000091e 	bne	r2,zero,398 <find_files+0x118>
     374:	e0bfb58b 	ldhu	r2,-298(fp)
     378:	10bfffcc 	andi	r2,r2,65535
     37c:	1080060c 	andi	r2,r2,24
     380:	1000051e 	bne	r2,zero,398 <find_files+0x118>
			printf("/%s\n",fullpath);
     384:	e0bfd044 	addi	r2,fp,-191
     388:	010000b4 	movhi	r4,2
     38c:	2101cf04 	addi	r4,r4,1852
     390:	100b883a 	mov	r5,r2
     394:	0000efc0 	call	efc <printf>
		}

		//if a directory is found, allocate space and save its name for later
		if ((attributes != -1) && (attributes & 0x0010)){
     398:	e0bfb58f 	ldh	r2,-298(fp)
     39c:	10bfffe0 	cmpeqi	r2,r2,-1
     3a0:	10001c1e 	bne	r2,zero,414 <find_files+0x194>
     3a4:	e0bfb58b 	ldhu	r2,-298(fp)
     3a8:	10bfffcc 	andi	r2,r2,65535
     3ac:	1080040c 	andi	r2,r2,16
     3b0:	10001826 	beq	r2,zero,414 <find_files+0x194>
			folders [num_dirs] = malloc (15*sizeof(char));
     3b4:	010003c4 	movi	r4,15
     3b8:	00007000 	call	700 <malloc>
     3bc:	1007883a 	mov	r3,r2
     3c0:	e0bfb217 	ldw	r2,-312(fp)
     3c4:	1085883a 	add	r2,r2,r2
     3c8:	1085883a 	add	r2,r2,r2
     3cc:	e13fb204 	addi	r4,fp,-312
     3d0:	2085883a 	add	r2,r4,r2
     3d4:	10803904 	addi	r2,r2,228
     3d8:	10c00015 	stw	r3,0(r2)
			strcpy(folders[num_dirs],filename);
     3dc:	e0bfb217 	ldw	r2,-312(fp)
     3e0:	1085883a 	add	r2,r2,r2
     3e4:	1085883a 	add	r2,r2,r2
     3e8:	e0ffb204 	addi	r3,fp,-312
     3ec:	1885883a 	add	r2,r3,r2
     3f0:	10803904 	addi	r2,r2,228
     3f4:	10c00017 	ldw	r3,0(r2)
     3f8:	e0bfcc84 	addi	r2,fp,-206
     3fc:	1809883a 	mov	r4,r3
     400:	100b883a 	mov	r5,r2
     404:	00011940 	call	1194 <strcpy>
			num_dirs++;
     408:	e0bfb217 	ldw	r2,-312(fp)
     40c:	10800044 	addi	r2,r2,1
     410:	e0bfb215 	stw	r2,-312(fp)
		}

		foundAll = (alt_up_sd_card_find_next(filename) == 0 ? false : true);
     414:	e0bfcc84 	addi	r2,fp,-206
     418:	1009883a 	mov	r4,r2
     41c:	001bb0c0 	call	1bb0c <alt_up_sd_card_find_next>
     420:	10bfffcc 	andi	r2,r2,65535
     424:	10a0001c 	xori	r2,r2,32768
     428:	10a00004 	addi	r2,r2,-32768
     42c:	1004c03a 	cmpne	r2,r2,zero
     430:	e0bfb305 	stb	r2,-308(fp)

	//output the current directory
	printf("/%s\n",filepath);

	//loop through the directory tree
	while (!foundAll){
     434:	e0bfb303 	ldbu	r2,-308(fp)
     438:	1080005c 	xori	r2,r2,1
     43c:	10803fcc 	andi	r2,r2,255
     440:	103fa91e 	bne	r2,zero,2e8 <__alt_mem_Flash_flash_data+0xf40002e8>
		foundAll = (alt_up_sd_card_find_next(filename) == 0 ? false : true);
	}

	//second loop to open any directories found and call find_files() on them
	int i;
	for (i=0; i<num_dirs; i++){
     444:	e03fb415 	stw	zero,-304(fp)
     448:	00003106 	br	510 <find_files+0x290>

		strcpy (fullpath,filepath);
     44c:	e0ffd044 	addi	r3,fp,-191
     450:	e0bfb604 	addi	r2,fp,-296
     454:	1809883a 	mov	r4,r3
     458:	100b883a 	mov	r5,r2
     45c:	00011940 	call	1194 <strcpy>
		fullpath [strlen(filepath)-1] = '\0';
     460:	e0bfb604 	addi	r2,fp,-296
     464:	1009883a 	mov	r4,r2
     468:	00012240 	call	1224 <strlen>
     46c:	10bfffc4 	addi	r2,r2,-1
     470:	e0ffd044 	addi	r3,fp,-191
     474:	1885883a 	add	r2,r3,r2
     478:	10000005 	stb	zero,0(r2)
		strcat (fullpath,folders[i]);
     47c:	e0bfb417 	ldw	r2,-304(fp)
     480:	1085883a 	add	r2,r2,r2
     484:	1085883a 	add	r2,r2,r2
     488:	e13fb204 	addi	r4,fp,-312
     48c:	2085883a 	add	r2,r4,r2
     490:	10803904 	addi	r2,r2,228
     494:	10800017 	ldw	r2,0(r2)
     498:	e0ffd044 	addi	r3,fp,-191
     49c:	1809883a 	mov	r4,r3
     4a0:	100b883a 	mov	r5,r2
     4a4:	000110c0 	call	110c <strcat>
		strcat (fullpath, "/.");
     4a8:	e0bfd044 	addi	r2,fp,-191
     4ac:	1009883a 	mov	r4,r2
     4b0:	00012240 	call	1224 <strlen>
     4b4:	1007883a 	mov	r3,r2
     4b8:	e0bfd044 	addi	r2,fp,-191
     4bc:	10c5883a 	add	r2,r2,r3
     4c0:	00c00bc4 	movi	r3,47
     4c4:	10c00005 	stb	r3,0(r2)
     4c8:	00c00b84 	movi	r3,46
     4cc:	10c00045 	stb	r3,1(r2)
     4d0:	10000085 	stb	zero,2(r2)
		find_files (fullpath);
     4d4:	e0bfd044 	addi	r2,fp,-191
     4d8:	1009883a 	mov	r4,r2
     4dc:	00002800 	call	280 <find_files>
		free(folders[i]);
     4e0:	e0bfb417 	ldw	r2,-304(fp)
     4e4:	1085883a 	add	r2,r2,r2
     4e8:	1085883a 	add	r2,r2,r2
     4ec:	e0ffb204 	addi	r3,fp,-312
     4f0:	1885883a 	add	r2,r3,r2
     4f4:	10803904 	addi	r2,r2,228
     4f8:	10800017 	ldw	r2,0(r2)
     4fc:	1009883a 	mov	r4,r2
     500:	00007140 	call	714 <free>
		foundAll = (alt_up_sd_card_find_next(filename) == 0 ? false : true);
	}

	//second loop to open any directories found and call find_files() on them
	int i;
	for (i=0; i<num_dirs; i++){
     504:	e0bfb417 	ldw	r2,-304(fp)
     508:	10800044 	addi	r2,r2,1
     50c:	e0bfb415 	stw	r2,-304(fp)
     510:	e0ffb417 	ldw	r3,-304(fp)
     514:	e0bfb217 	ldw	r2,-312(fp)
     518:	18bfcc16 	blt	r3,r2,44c <__alt_mem_Flash_flash_data+0xf400044c>
		strcat (fullpath, "/.");
		find_files (fullpath);
		free(folders[i]);
	}

	return;
     51c:	0001883a 	nop
}
     520:	e037883a 	mov	sp,fp
     524:	dfc00117 	ldw	ra,4(sp)
     528:	df000017 	ldw	fp,0(sp)
     52c:	dec00204 	addi	sp,sp,8
     530:	f800283a 	ret

00000534 <read_file>:
void read_file()
{
     534:	defffa04 	addi	sp,sp,-24
     538:	dfc00515 	stw	ra,20(sp)
     53c:	df000415 	stw	fp,16(sp)
     540:	df000404 	addi	fp,sp,16
	short int Read;
	Read = alt_up_sd_card_fopen("hoi.txt", false);
     544:	010000b4 	movhi	r4,2
     548:	2101d104 	addi	r4,r4,1860
     54c:	000b883a 	mov	r5,zero
     550:	001beb80 	call	1beb8 <alt_up_sd_card_fopen>
     554:	e0bffe8d 	sth	r2,-6(fp)

	int i = 0;
     558:	e03ffc15 	stw	zero,-16(fp)
	int j;



	char buffer[1] = "";
     55c:	e03fff05 	stb	zero,-4(fp)
	char c = 1;
     560:	00800044 	movi	r2,1
     564:	e0bffe05 	stb	r2,-8(fp)

	c = alt_up_sd_card_read(Read);
     568:	e0bffe8f 	ldh	r2,-6(fp)
     56c:	1009883a 	mov	r4,r2
     570:	001c3480 	call	1c348 <alt_up_sd_card_read>
     574:	e0bffe05 	stb	r2,-8(fp)

	while (c != -1){
     578:	00001b06 	br	5e8 <read_file+0xb4>
		if(c == '|'){		//check voor komma
     57c:	e0bffe07 	ldb	r2,-8(fp)
     580:	10801f18 	cmpnei	r2,r2,124
     584:	1000041e 	bne	r2,zero,598 <read_file+0x64>
			i++;
     588:	e0bffc17 	ldw	r2,-16(fp)
     58c:	10800044 	addi	r2,r2,1
     590:	e0bffc15 	stw	r2,-16(fp)
     594:	00001006 	br	5d8 <read_file+0xa4>
		}else{
			sprintf(buffer, "%c", c);
     598:	e0bffe07 	ldb	r2,-8(fp)
     59c:	e0ffff04 	addi	r3,fp,-4
     5a0:	1809883a 	mov	r4,r3
     5a4:	014000b4 	movhi	r5,2
     5a8:	2941d304 	addi	r5,r5,1868
     5ac:	100d883a 	mov	r6,r2
     5b0:	00010a00 	call	10a0 <sprintf>
			strcat(highscores[i], buffer);
     5b4:	e0bffc17 	ldw	r2,-16(fp)
     5b8:	10c00524 	muli	r3,r2,20
     5bc:	008000b4 	movhi	r2,2
     5c0:	10932e04 	addi	r2,r2,19640
     5c4:	1887883a 	add	r3,r3,r2
     5c8:	e0bfff04 	addi	r2,fp,-4
     5cc:	1809883a 	mov	r4,r3
     5d0:	100b883a 	mov	r5,r2
     5d4:	000110c0 	call	110c <strcat>
		}
		c = alt_up_sd_card_read(Read);		//lees volgende char
     5d8:	e0bffe8f 	ldh	r2,-6(fp)
     5dc:	1009883a 	mov	r4,r2
     5e0:	001c3480 	call	1c348 <alt_up_sd_card_read>
     5e4:	e0bffe05 	stb	r2,-8(fp)
	char buffer[1] = "";
	char c = 1;

	c = alt_up_sd_card_read(Read);

	while (c != -1){
     5e8:	e0bffe07 	ldb	r2,-8(fp)
     5ec:	10bfffd8 	cmpnei	r2,r2,-1
     5f0:	103fe21e 	bne	r2,zero,57c <__alt_mem_Flash_flash_data+0xf400057c>
		}
		c = alt_up_sd_card_read(Read);		//lees volgende char
	}


	for(j = 0; j < 5; j++){
     5f4:	e03ffd15 	stw	zero,-12(fp)
     5f8:	00000d06 	br	630 <read_file+0xfc>
		printf("nummer is : %d data :%s\n",j , highscores[j]);
     5fc:	e0bffd17 	ldw	r2,-12(fp)
     600:	10c00524 	muli	r3,r2,20
     604:	008000b4 	movhi	r2,2
     608:	10932e04 	addi	r2,r2,19640
     60c:	1885883a 	add	r2,r3,r2
     610:	010000b4 	movhi	r4,2
     614:	2101d404 	addi	r4,r4,1872
     618:	e17ffd17 	ldw	r5,-12(fp)
     61c:	100d883a 	mov	r6,r2
     620:	0000efc0 	call	efc <printf>
		}
		c = alt_up_sd_card_read(Read);		//lees volgende char
	}


	for(j = 0; j < 5; j++){
     624:	e0bffd17 	ldw	r2,-12(fp)
     628:	10800044 	addi	r2,r2,1
     62c:	e0bffd15 	stw	r2,-12(fp)
     630:	e0bffd17 	ldw	r2,-12(fp)
     634:	10800150 	cmplti	r2,r2,5
     638:	103ff01e 	bne	r2,zero,5fc <__alt_mem_Flash_flash_data+0xf40005fc>
		printf("nummer is : %d data :%s\n",j , highscores[j]);
	}
	alt_up_sd_card_fclose(Read);						//sluit het bestand
     63c:	e0bffe8f 	ldh	r2,-6(fp)
     640:	1009883a 	mov	r4,r2
     644:	001cce40 	call	1cce4 <alt_up_sd_card_fclose>
}
     648:	e037883a 	mov	sp,fp
     64c:	dfc00117 	ldw	ra,4(sp)
     650:	df000017 	ldw	fp,0(sp)
     654:	dec00204 	addi	sp,sp,8
     658:	f800283a 	ret

0000065c <main>:
//	}
//	printf("File is geschreven");
//}


int main (void){
     65c:	defffd04 	addi	sp,sp,-12
     660:	dfc00215 	stw	ra,8(sp)
     664:	df000115 	stw	fp,4(sp)
     668:	df000104 	addi	fp,sp,4

	alt_up_sd_card_dev * sd_card;
	sd_card = alt_up_sd_card_open_dev("/dev/SD_Card");
     66c:	010000b4 	movhi	r4,2
     670:	2101db04 	addi	r4,r4,1900
     674:	001b84c0 	call	1b84c <alt_up_sd_card_open_dev>
     678:	e0bfff15 	stw	r2,-4(fp)

 	 if (sd_card!=NULL){
     67c:	e0bfff17 	ldw	r2,-4(fp)
     680:	10001926 	beq	r2,zero,6e8 <main+0x8c>
		if (alt_up_sd_card_is_Present()){
     684:	001b90c0 	call	1b90c <alt_up_sd_card_is_Present>
     688:	10803fcc 	andi	r2,r2,255
     68c:	10000726 	beq	r2,zero,6ac <main+0x50>
			printf("An SD Card was found!\n");
     690:	010000b4 	movhi	r4,2
     694:	2101df04 	addi	r4,r4,1916
     698:	0000fe00 	call	fe0 <puts>
		else {
			printf("No SD Card Found. \n Exiting the program.");
			return -1;
		}

 		if (alt_up_sd_card_is_FAT16()){
     69c:	001b9d00 	call	1b9d0 <alt_up_sd_card_is_FAT16>
     6a0:	10803fcc 	andi	r2,r2,255
     6a4:	10000b26 	beq	r2,zero,6d4 <main+0x78>
     6a8:	00000506 	br	6c0 <main+0x64>
		if (alt_up_sd_card_is_Present()){
			printf("An SD Card was found!\n");

		}
		else {
			printf("No SD Card Found. \n Exiting the program.");
     6ac:	010000b4 	movhi	r4,2
     6b0:	2101e504 	addi	r4,r4,1940
     6b4:	0000efc0 	call	efc <printf>
			return -1;
     6b8:	00bfffc4 	movi	r2,-1
     6bc:	00000b06 	br	6ec <main+0x90>
		}

 		if (alt_up_sd_card_is_FAT16()){
			printf("FAT-16 partiton found!\n");
     6c0:	010000b4 	movhi	r4,2
     6c4:	2101f004 	addi	r4,r4,1984
     6c8:	0000fe00 	call	fe0 <puts>

		//Call find_files on the root directory

		//find_files (".");

		read_file();
     6cc:	00005340 	call	534 <read_file>
     6d0:	00000506 	br	6e8 <main+0x8c>

 		if (alt_up_sd_card_is_FAT16()){
			printf("FAT-16 partiton found!\n");
		}
		else{
			printf("No FAT-16 partition found - Exiting!\n");
     6d4:	010000b4 	movhi	r4,2
     6d8:	2101f604 	addi	r4,r4,2008
     6dc:	0000fe00 	call	fe0 <puts>
			return -1;
     6e0:	00bfffc4 	movi	r2,-1
     6e4:	00000106 	br	6ec <main+0x90>
		//find_files (".");

		read_file();
	}

	return 0;
     6e8:	0005883a 	mov	r2,zero
}
     6ec:	e037883a 	mov	sp,fp
     6f0:	dfc00117 	ldw	ra,4(sp)
     6f4:	df000017 	ldw	fp,0(sp)
     6f8:	dec00204 	addi	sp,sp,8
     6fc:	f800283a 	ret

00000700 <malloc>:
     700:	008000b4 	movhi	r2,2
     704:	108b1004 	addi	r2,r2,11328
     708:	200b883a 	mov	r5,r4
     70c:	11000017 	ldw	r4,0(r2)
     710:	00007281 	jmpi	728 <_malloc_r>

00000714 <free>:
     714:	008000b4 	movhi	r2,2
     718:	108b1004 	addi	r2,r2,11328
     71c:	200b883a 	mov	r5,r4
     720:	11000017 	ldw	r4,0(r2)
     724:	00074501 	jmpi	7450 <_free_r>

00000728 <_malloc_r>:
     728:	defff504 	addi	sp,sp,-44
     72c:	dc800315 	stw	r18,12(sp)
     730:	dfc00a15 	stw	ra,40(sp)
     734:	df000915 	stw	fp,36(sp)
     738:	ddc00815 	stw	r23,32(sp)
     73c:	dd800715 	stw	r22,28(sp)
     740:	dd400615 	stw	r21,24(sp)
     744:	dd000515 	stw	r20,20(sp)
     748:	dcc00415 	stw	r19,16(sp)
     74c:	dc400215 	stw	r17,8(sp)
     750:	dc000115 	stw	r16,4(sp)
     754:	288002c4 	addi	r2,r5,11
     758:	00c00584 	movi	r3,22
     75c:	2025883a 	mov	r18,r4
     760:	18802a2e 	bgeu	r3,r2,80c <_malloc_r+0xe4>
     764:	047ffe04 	movi	r17,-8
     768:	1462703a 	and	r17,r2,r17
     76c:	88009e16 	blt	r17,zero,9e8 <_malloc_r+0x2c0>
     770:	89409d36 	bltu	r17,r5,9e8 <_malloc_r+0x2c0>
     774:	00109340 	call	10934 <__malloc_lock>
     778:	00807dc4 	movi	r2,503
     77c:	14402736 	bltu	r2,r17,81c <_malloc_r+0xf4>
     780:	8806d0fa 	srli	r3,r17,3
     784:	04c000b4 	movhi	r19,2
     788:	9cc37e04 	addi	r19,r19,3576
     78c:	18c5883a 	add	r2,r3,r3
     790:	1085883a 	add	r2,r2,r2
     794:	1085883a 	add	r2,r2,r2
     798:	9885883a 	add	r2,r19,r2
     79c:	14000317 	ldw	r16,12(r2)
     7a0:	80814a26 	beq	r16,r2,ccc <_malloc_r+0x5a4>
     7a4:	80c00117 	ldw	r3,4(r16)
     7a8:	81000317 	ldw	r4,12(r16)
     7ac:	00bfff04 	movi	r2,-4
     7b0:	1884703a 	and	r2,r3,r2
     7b4:	81400217 	ldw	r5,8(r16)
     7b8:	8085883a 	add	r2,r16,r2
     7bc:	10c00117 	ldw	r3,4(r2)
     7c0:	29000315 	stw	r4,12(r5)
     7c4:	21400215 	stw	r5,8(r4)
     7c8:	18c00054 	ori	r3,r3,1
     7cc:	10c00115 	stw	r3,4(r2)
     7d0:	9009883a 	mov	r4,r18
     7d4:	0010a540 	call	10a54 <__malloc_unlock>
     7d8:	80800204 	addi	r2,r16,8
     7dc:	dfc00a17 	ldw	ra,40(sp)
     7e0:	df000917 	ldw	fp,36(sp)
     7e4:	ddc00817 	ldw	r23,32(sp)
     7e8:	dd800717 	ldw	r22,28(sp)
     7ec:	dd400617 	ldw	r21,24(sp)
     7f0:	dd000517 	ldw	r20,20(sp)
     7f4:	dcc00417 	ldw	r19,16(sp)
     7f8:	dc800317 	ldw	r18,12(sp)
     7fc:	dc400217 	ldw	r17,8(sp)
     800:	dc000117 	ldw	r16,4(sp)
     804:	dec00b04 	addi	sp,sp,44
     808:	f800283a 	ret
     80c:	04400404 	movi	r17,16
     810:	89407536 	bltu	r17,r5,9e8 <_malloc_r+0x2c0>
     814:	00109340 	call	10934 <__malloc_lock>
     818:	003fd906 	br	780 <__alt_mem_Flash_flash_data+0xf4000780>
     81c:	8806d27a 	srli	r3,r17,9
     820:	18007526 	beq	r3,zero,9f8 <_malloc_r+0x2d0>
     824:	00800104 	movi	r2,4
     828:	10c0ef36 	bltu	r2,r3,be8 <_malloc_r+0x4c0>
     82c:	8806d1ba 	srli	r3,r17,6
     830:	19c00e04 	addi	r7,r3,56
     834:	39cb883a 	add	r5,r7,r7
     838:	04c000b4 	movhi	r19,2
     83c:	294b883a 	add	r5,r5,r5
     840:	9cc37e04 	addi	r19,r19,3576
     844:	294b883a 	add	r5,r5,r5
     848:	994b883a 	add	r5,r19,r5
     84c:	2c000317 	ldw	r16,12(r5)
     850:	2c000e26 	beq	r5,r16,88c <_malloc_r+0x164>
     854:	80800117 	ldw	r2,4(r16)
     858:	01bfff04 	movi	r6,-4
     85c:	010003c4 	movi	r4,15
     860:	1184703a 	and	r2,r2,r6
     864:	1447c83a 	sub	r3,r2,r17
     868:	20c00716 	blt	r4,r3,888 <_malloc_r+0x160>
     86c:	1800650e 	bge	r3,zero,a04 <_malloc_r+0x2dc>
     870:	84000317 	ldw	r16,12(r16)
     874:	2c000526 	beq	r5,r16,88c <_malloc_r+0x164>
     878:	80800117 	ldw	r2,4(r16)
     87c:	1184703a 	and	r2,r2,r6
     880:	1447c83a 	sub	r3,r2,r17
     884:	20fff90e 	bge	r4,r3,86c <__alt_mem_Flash_flash_data+0xf400086c>
     888:	39ffffc4 	addi	r7,r7,-1
     88c:	38c00044 	addi	r3,r7,1
     890:	018000b4 	movhi	r6,2
     894:	9c000417 	ldw	r16,16(r19)
     898:	31837e04 	addi	r6,r6,3576
     89c:	32400204 	addi	r9,r6,8
     8a0:	82410326 	beq	r16,r9,cb0 <_malloc_r+0x588>
     8a4:	81000117 	ldw	r4,4(r16)
     8a8:	00bfff04 	movi	r2,-4
     8ac:	208e703a 	and	r7,r4,r2
     8b0:	3c45c83a 	sub	r2,r7,r17
     8b4:	010003c4 	movi	r4,15
     8b8:	2080ee16 	blt	r4,r2,c74 <_malloc_r+0x54c>
     8bc:	32400515 	stw	r9,20(r6)
     8c0:	32400415 	stw	r9,16(r6)
     8c4:	1000510e 	bge	r2,zero,a0c <_malloc_r+0x2e4>
     8c8:	00807fc4 	movi	r2,511
     8cc:	11c0ce36 	bltu	r2,r7,c08 <_malloc_r+0x4e0>
     8d0:	3808d0fa 	srli	r4,r7,3
     8d4:	01c00044 	movi	r7,1
     8d8:	30800117 	ldw	r2,4(r6)
     8dc:	210b883a 	add	r5,r4,r4
     8e0:	294b883a 	add	r5,r5,r5
     8e4:	2009d0ba 	srai	r4,r4,2
     8e8:	294b883a 	add	r5,r5,r5
     8ec:	298b883a 	add	r5,r5,r6
     8f0:	2a000217 	ldw	r8,8(r5)
     8f4:	3908983a 	sll	r4,r7,r4
     8f8:	81400315 	stw	r5,12(r16)
     8fc:	82000215 	stw	r8,8(r16)
     900:	2088b03a 	or	r4,r4,r2
     904:	2c000215 	stw	r16,8(r5)
     908:	31000115 	stw	r4,4(r6)
     90c:	44000315 	stw	r16,12(r8)
     910:	1805d0ba 	srai	r2,r3,2
     914:	01400044 	movi	r5,1
     918:	288a983a 	sll	r5,r5,r2
     91c:	21404336 	bltu	r4,r5,a2c <_malloc_r+0x304>
     920:	2144703a 	and	r2,r4,r5
     924:	10000a1e 	bne	r2,zero,950 <_malloc_r+0x228>
     928:	00bfff04 	movi	r2,-4
     92c:	294b883a 	add	r5,r5,r5
     930:	1886703a 	and	r3,r3,r2
     934:	2144703a 	and	r2,r4,r5
     938:	18c00104 	addi	r3,r3,4
     93c:	1000041e 	bne	r2,zero,950 <_malloc_r+0x228>
     940:	294b883a 	add	r5,r5,r5
     944:	2144703a 	and	r2,r4,r5
     948:	18c00104 	addi	r3,r3,4
     94c:	103ffc26 	beq	r2,zero,940 <__alt_mem_Flash_flash_data+0xf4000940>
     950:	023fff04 	movi	r8,-4
     954:	01c003c4 	movi	r7,15
     958:	18c5883a 	add	r2,r3,r3
     95c:	1085883a 	add	r2,r2,r2
     960:	1085883a 	add	r2,r2,r2
     964:	9895883a 	add	r10,r19,r2
     968:	52c00304 	addi	r11,r10,12
     96c:	1819883a 	mov	r12,r3
     970:	5c000017 	ldw	r16,0(r11)
     974:	59bffd04 	addi	r6,r11,-12
     978:	8180041e 	bne	r16,r6,98c <_malloc_r+0x264>
     97c:	0000ce06 	br	cb8 <_malloc_r+0x590>
     980:	2000d70e 	bge	r4,zero,ce0 <_malloc_r+0x5b8>
     984:	84000317 	ldw	r16,12(r16)
     988:	8180cb26 	beq	r16,r6,cb8 <_malloc_r+0x590>
     98c:	80800117 	ldw	r2,4(r16)
     990:	1204703a 	and	r2,r2,r8
     994:	1449c83a 	sub	r4,r2,r17
     998:	393ff90e 	bge	r7,r4,980 <__alt_mem_Flash_flash_data+0xf4000980>
     99c:	80800317 	ldw	r2,12(r16)
     9a0:	80c00217 	ldw	r3,8(r16)
     9a4:	89400054 	ori	r5,r17,1
     9a8:	81400115 	stw	r5,4(r16)
     9ac:	18800315 	stw	r2,12(r3)
     9b0:	10c00215 	stw	r3,8(r2)
     9b4:	8463883a 	add	r17,r16,r17
     9b8:	9c400515 	stw	r17,20(r19)
     9bc:	9c400415 	stw	r17,16(r19)
     9c0:	20800054 	ori	r2,r4,1
     9c4:	88800115 	stw	r2,4(r17)
     9c8:	8a400315 	stw	r9,12(r17)
     9cc:	8a400215 	stw	r9,8(r17)
     9d0:	8923883a 	add	r17,r17,r4
     9d4:	89000015 	stw	r4,0(r17)
     9d8:	9009883a 	mov	r4,r18
     9dc:	0010a540 	call	10a54 <__malloc_unlock>
     9e0:	80800204 	addi	r2,r16,8
     9e4:	003f7d06 	br	7dc <__alt_mem_Flash_flash_data+0xf40007dc>
     9e8:	00800304 	movi	r2,12
     9ec:	90800015 	stw	r2,0(r18)
     9f0:	0005883a 	mov	r2,zero
     9f4:	003f7906 	br	7dc <__alt_mem_Flash_flash_data+0xf40007dc>
     9f8:	01401f84 	movi	r5,126
     9fc:	01c00fc4 	movi	r7,63
     a00:	003f8d06 	br	838 <__alt_mem_Flash_flash_data+0xf4000838>
     a04:	81000317 	ldw	r4,12(r16)
     a08:	003f6a06 	br	7b4 <__alt_mem_Flash_flash_data+0xf40007b4>
     a0c:	81c5883a 	add	r2,r16,r7
     a10:	10c00117 	ldw	r3,4(r2)
     a14:	9009883a 	mov	r4,r18
     a18:	18c00054 	ori	r3,r3,1
     a1c:	10c00115 	stw	r3,4(r2)
     a20:	0010a540 	call	10a54 <__malloc_unlock>
     a24:	80800204 	addi	r2,r16,8
     a28:	003f6c06 	br	7dc <__alt_mem_Flash_flash_data+0xf40007dc>
     a2c:	9c000217 	ldw	r16,8(r19)
     a30:	00bfff04 	movi	r2,-4
     a34:	85800117 	ldw	r22,4(r16)
     a38:	b0ac703a 	and	r22,r22,r2
     a3c:	b4400336 	bltu	r22,r17,a4c <_malloc_r+0x324>
     a40:	b445c83a 	sub	r2,r22,r17
     a44:	00c003c4 	movi	r3,15
     a48:	18805d16 	blt	r3,r2,bc0 <_malloc_r+0x498>
     a4c:	05c000b4 	movhi	r23,2
     a50:	008000b4 	movhi	r2,2
     a54:	bdcb0d04 	addi	r23,r23,11316
     a58:	1092fc04 	addi	r2,r2,19440
     a5c:	15400017 	ldw	r21,0(r2)
     a60:	b9000017 	ldw	r4,0(r23)
     a64:	00ffffc4 	movi	r3,-1
     a68:	858d883a 	add	r6,r16,r22
     a6c:	8d6b883a 	add	r21,r17,r21
     a70:	20c0e426 	beq	r4,r3,e04 <_malloc_r+0x6dc>
     a74:	ad4403c4 	addi	r21,r21,4111
     a78:	00fc0004 	movi	r3,-4096
     a7c:	a8ea703a 	and	r21,r21,r3
     a80:	9009883a 	mov	r4,r18
     a84:	a80b883a 	mov	r5,r21
     a88:	d9800015 	stw	r6,0(sp)
     a8c:	0000ff40 	call	ff4 <_sbrk_r>
     a90:	00ffffc4 	movi	r3,-1
     a94:	1029883a 	mov	r20,r2
     a98:	d9800017 	ldw	r6,0(sp)
     a9c:	10c0a426 	beq	r2,r3,d30 <_malloc_r+0x608>
     aa0:	1180a236 	bltu	r2,r6,d2c <_malloc_r+0x604>
     aa4:	070000b4 	movhi	fp,2
     aa8:	e7134704 	addi	fp,fp,19740
     aac:	e0c00017 	ldw	r3,0(fp)
     ab0:	a8c7883a 	add	r3,r21,r3
     ab4:	e0c00015 	stw	r3,0(fp)
     ab8:	3500da26 	beq	r6,r20,e24 <_malloc_r+0x6fc>
     abc:	b9000017 	ldw	r4,0(r23)
     ac0:	00bfffc4 	movi	r2,-1
     ac4:	2080e426 	beq	r4,r2,e58 <_malloc_r+0x730>
     ac8:	a185c83a 	sub	r2,r20,r6
     acc:	1885883a 	add	r2,r3,r2
     ad0:	e0800015 	stw	r2,0(fp)
     ad4:	a0c001cc 	andi	r3,r20,7
     ad8:	1800b526 	beq	r3,zero,db0 <_malloc_r+0x688>
     adc:	a0e9c83a 	sub	r20,r20,r3
     ae0:	00840204 	movi	r2,4104
     ae4:	a5000204 	addi	r20,r20,8
     ae8:	10c7c83a 	sub	r3,r2,r3
     aec:	a545883a 	add	r2,r20,r21
     af0:	1083ffcc 	andi	r2,r2,4095
     af4:	18abc83a 	sub	r21,r3,r2
     af8:	9009883a 	mov	r4,r18
     afc:	a80b883a 	mov	r5,r21
     b00:	0000ff40 	call	ff4 <_sbrk_r>
     b04:	00ffffc4 	movi	r3,-1
     b08:	10c0d026 	beq	r2,r3,e4c <_malloc_r+0x724>
     b0c:	1507c83a 	sub	r3,r2,r20
     b10:	a8c7883a 	add	r3,r21,r3
     b14:	18c00054 	ori	r3,r3,1
     b18:	e0800017 	ldw	r2,0(fp)
     b1c:	9d000215 	stw	r20,8(r19)
     b20:	a0c00115 	stw	r3,4(r20)
     b24:	a887883a 	add	r3,r21,r2
     b28:	e0c00015 	stw	r3,0(fp)
     b2c:	84c00e26 	beq	r16,r19,b68 <_malloc_r+0x440>
     b30:	018003c4 	movi	r6,15
     b34:	3580a02e 	bgeu	r6,r22,db8 <_malloc_r+0x690>
     b38:	81400117 	ldw	r5,4(r16)
     b3c:	013ffe04 	movi	r4,-8
     b40:	b0bffd04 	addi	r2,r22,-12
     b44:	1104703a 	and	r2,r2,r4
     b48:	2900004c 	andi	r4,r5,1
     b4c:	1108b03a 	or	r4,r2,r4
     b50:	81000115 	stw	r4,4(r16)
     b54:	01400144 	movi	r5,5
     b58:	8089883a 	add	r4,r16,r2
     b5c:	21400115 	stw	r5,4(r4)
     b60:	21400215 	stw	r5,8(r4)
     b64:	3080c036 	bltu	r6,r2,e68 <_malloc_r+0x740>
     b68:	008000b4 	movhi	r2,2
     b6c:	1092fb04 	addi	r2,r2,19436
     b70:	11000017 	ldw	r4,0(r2)
     b74:	20c0012e 	bgeu	r4,r3,b7c <_malloc_r+0x454>
     b78:	10c00015 	stw	r3,0(r2)
     b7c:	008000b4 	movhi	r2,2
     b80:	1092fa04 	addi	r2,r2,19432
     b84:	11000017 	ldw	r4,0(r2)
     b88:	9c000217 	ldw	r16,8(r19)
     b8c:	20c0012e 	bgeu	r4,r3,b94 <_malloc_r+0x46c>
     b90:	10c00015 	stw	r3,0(r2)
     b94:	80c00117 	ldw	r3,4(r16)
     b98:	00bfff04 	movi	r2,-4
     b9c:	1886703a 	and	r3,r3,r2
     ba0:	1c45c83a 	sub	r2,r3,r17
     ba4:	1c400236 	bltu	r3,r17,bb0 <_malloc_r+0x488>
     ba8:	00c003c4 	movi	r3,15
     bac:	18800416 	blt	r3,r2,bc0 <_malloc_r+0x498>
     bb0:	9009883a 	mov	r4,r18
     bb4:	0010a540 	call	10a54 <__malloc_unlock>
     bb8:	0005883a 	mov	r2,zero
     bbc:	003f0706 	br	7dc <__alt_mem_Flash_flash_data+0xf40007dc>
     bc0:	88c00054 	ori	r3,r17,1
     bc4:	80c00115 	stw	r3,4(r16)
     bc8:	8463883a 	add	r17,r16,r17
     bcc:	10800054 	ori	r2,r2,1
     bd0:	9c400215 	stw	r17,8(r19)
     bd4:	88800115 	stw	r2,4(r17)
     bd8:	9009883a 	mov	r4,r18
     bdc:	0010a540 	call	10a54 <__malloc_unlock>
     be0:	80800204 	addi	r2,r16,8
     be4:	003efd06 	br	7dc <__alt_mem_Flash_flash_data+0xf40007dc>
     be8:	00800504 	movi	r2,20
     bec:	10c0482e 	bgeu	r2,r3,d10 <_malloc_r+0x5e8>
     bf0:	00801504 	movi	r2,84
     bf4:	10c06836 	bltu	r2,r3,d98 <_malloc_r+0x670>
     bf8:	8806d33a 	srli	r3,r17,12
     bfc:	19c01b84 	addi	r7,r3,110
     c00:	39cb883a 	add	r5,r7,r7
     c04:	003f0c06 	br	838 <__alt_mem_Flash_flash_data+0xf4000838>
     c08:	3804d27a 	srli	r2,r7,9
     c0c:	01000104 	movi	r4,4
     c10:	2080422e 	bgeu	r4,r2,d1c <_malloc_r+0x5f4>
     c14:	01000504 	movi	r4,20
     c18:	20807c36 	bltu	r4,r2,e0c <_malloc_r+0x6e4>
     c1c:	110016c4 	addi	r4,r2,91
     c20:	210b883a 	add	r5,r4,r4
     c24:	294b883a 	add	r5,r5,r5
     c28:	294b883a 	add	r5,r5,r5
     c2c:	994b883a 	add	r5,r19,r5
     c30:	28800217 	ldw	r2,8(r5)
     c34:	020000b4 	movhi	r8,2
     c38:	42037e04 	addi	r8,r8,3576
     c3c:	11406326 	beq	r2,r5,dcc <_malloc_r+0x6a4>
     c40:	01bfff04 	movi	r6,-4
     c44:	11000117 	ldw	r4,4(r2)
     c48:	2188703a 	and	r4,r4,r6
     c4c:	3900022e 	bgeu	r7,r4,c58 <_malloc_r+0x530>
     c50:	10800217 	ldw	r2,8(r2)
     c54:	28bffb1e 	bne	r5,r2,c44 <__alt_mem_Flash_flash_data+0xf4000c44>
     c58:	11800317 	ldw	r6,12(r2)
     c5c:	99000117 	ldw	r4,4(r19)
     c60:	81800315 	stw	r6,12(r16)
     c64:	80800215 	stw	r2,8(r16)
     c68:	34000215 	stw	r16,8(r6)
     c6c:	14000315 	stw	r16,12(r2)
     c70:	003f2706 	br	910 <__alt_mem_Flash_flash_data+0xf4000910>
     c74:	88c00054 	ori	r3,r17,1
     c78:	80c00115 	stw	r3,4(r16)
     c7c:	8463883a 	add	r17,r16,r17
     c80:	34400515 	stw	r17,20(r6)
     c84:	34400415 	stw	r17,16(r6)
     c88:	10c00054 	ori	r3,r2,1
     c8c:	8a400315 	stw	r9,12(r17)
     c90:	8a400215 	stw	r9,8(r17)
     c94:	88c00115 	stw	r3,4(r17)
     c98:	88a3883a 	add	r17,r17,r2
     c9c:	88800015 	stw	r2,0(r17)
     ca0:	9009883a 	mov	r4,r18
     ca4:	0010a540 	call	10a54 <__malloc_unlock>
     ca8:	80800204 	addi	r2,r16,8
     cac:	003ecb06 	br	7dc <__alt_mem_Flash_flash_data+0xf40007dc>
     cb0:	31000117 	ldw	r4,4(r6)
     cb4:	003f1606 	br	910 <__alt_mem_Flash_flash_data+0xf4000910>
     cb8:	63000044 	addi	r12,r12,1
     cbc:	608000cc 	andi	r2,r12,3
     cc0:	5ac00204 	addi	r11,r11,8
     cc4:	103f2a1e 	bne	r2,zero,970 <__alt_mem_Flash_flash_data+0xf4000970>
     cc8:	00002106 	br	d50 <_malloc_r+0x628>
     ccc:	80800204 	addi	r2,r16,8
     cd0:	84000517 	ldw	r16,20(r16)
     cd4:	143eb31e 	bne	r2,r16,7a4 <__alt_mem_Flash_flash_data+0xf40007a4>
     cd8:	18c00084 	addi	r3,r3,2
     cdc:	003eec06 	br	890 <__alt_mem_Flash_flash_data+0xf4000890>
     ce0:	8085883a 	add	r2,r16,r2
     ce4:	10c00117 	ldw	r3,4(r2)
     ce8:	81000317 	ldw	r4,12(r16)
     cec:	81400217 	ldw	r5,8(r16)
     cf0:	18c00054 	ori	r3,r3,1
     cf4:	10c00115 	stw	r3,4(r2)
     cf8:	29000315 	stw	r4,12(r5)
     cfc:	21400215 	stw	r5,8(r4)
     d00:	9009883a 	mov	r4,r18
     d04:	0010a540 	call	10a54 <__malloc_unlock>
     d08:	80800204 	addi	r2,r16,8
     d0c:	003eb306 	br	7dc <__alt_mem_Flash_flash_data+0xf40007dc>
     d10:	19c016c4 	addi	r7,r3,91
     d14:	39cb883a 	add	r5,r7,r7
     d18:	003ec706 	br	838 <__alt_mem_Flash_flash_data+0xf4000838>
     d1c:	3804d1ba 	srli	r2,r7,6
     d20:	11000e04 	addi	r4,r2,56
     d24:	210b883a 	add	r5,r4,r4
     d28:	003fbe06 	br	c24 <__alt_mem_Flash_flash_data+0xf4000c24>
     d2c:	84ff5d26 	beq	r16,r19,aa4 <__alt_mem_Flash_flash_data+0xf4000aa4>
     d30:	9c000217 	ldw	r16,8(r19)
     d34:	00bfff04 	movi	r2,-4
     d38:	80c00117 	ldw	r3,4(r16)
     d3c:	1886703a 	and	r3,r3,r2
     d40:	003f9706 	br	ba0 <__alt_mem_Flash_flash_data+0xf4000ba0>
     d44:	52800017 	ldw	r10,0(r10)
     d48:	18ffffc4 	addi	r3,r3,-1
     d4c:	50805c1e 	bne	r10,r2,ec0 <_malloc_r+0x798>
     d50:	190000cc 	andi	r4,r3,3
     d54:	50bffe04 	addi	r2,r10,-8
     d58:	203ffa1e 	bne	r4,zero,d44 <__alt_mem_Flash_flash_data+0xf4000d44>
     d5c:	98800117 	ldw	r2,4(r19)
     d60:	0146303a 	nor	r3,zero,r5
     d64:	1884703a 	and	r2,r3,r2
     d68:	98800115 	stw	r2,4(r19)
     d6c:	294b883a 	add	r5,r5,r5
     d70:	117f2e36 	bltu	r2,r5,a2c <__alt_mem_Flash_flash_data+0xf4000a2c>
     d74:	283f2d26 	beq	r5,zero,a2c <__alt_mem_Flash_flash_data+0xf4000a2c>
     d78:	1146703a 	and	r3,r2,r5
     d7c:	1800521e 	bne	r3,zero,ec8 <_malloc_r+0x7a0>
     d80:	6007883a 	mov	r3,r12
     d84:	294b883a 	add	r5,r5,r5
     d88:	1148703a 	and	r4,r2,r5
     d8c:	18c00104 	addi	r3,r3,4
     d90:	203ffc26 	beq	r4,zero,d84 <__alt_mem_Flash_flash_data+0xf4000d84>
     d94:	003ef006 	br	958 <__alt_mem_Flash_flash_data+0xf4000958>
     d98:	00805504 	movi	r2,340
     d9c:	10c01336 	bltu	r2,r3,dec <_malloc_r+0x6c4>
     da0:	8806d3fa 	srli	r3,r17,15
     da4:	19c01dc4 	addi	r7,r3,119
     da8:	39cb883a 	add	r5,r7,r7
     dac:	003ea206 	br	838 <__alt_mem_Flash_flash_data+0xf4000838>
     db0:	00c40004 	movi	r3,4096
     db4:	003f4d06 	br	aec <__alt_mem_Flash_flash_data+0xf4000aec>
     db8:	00800044 	movi	r2,1
     dbc:	a0800115 	stw	r2,4(r20)
     dc0:	a021883a 	mov	r16,r20
     dc4:	0007883a 	mov	r3,zero
     dc8:	003f7506 	br	ba0 <__alt_mem_Flash_flash_data+0xf4000ba0>
     dcc:	200bd0ba 	srai	r5,r4,2
     dd0:	01800044 	movi	r6,1
     dd4:	41000117 	ldw	r4,4(r8)
     dd8:	314a983a 	sll	r5,r6,r5
     ddc:	100d883a 	mov	r6,r2
     de0:	2908b03a 	or	r4,r5,r4
     de4:	41000115 	stw	r4,4(r8)
     de8:	003f9d06 	br	c60 <__alt_mem_Flash_flash_data+0xf4000c60>
     dec:	00815504 	movi	r2,1364
     df0:	10c01336 	bltu	r2,r3,e40 <_malloc_r+0x718>
     df4:	8806d4ba 	srli	r3,r17,18
     df8:	19c01f04 	addi	r7,r3,124
     dfc:	39cb883a 	add	r5,r7,r7
     e00:	003e8d06 	br	838 <__alt_mem_Flash_flash_data+0xf4000838>
     e04:	ad400404 	addi	r21,r21,16
     e08:	003f1d06 	br	a80 <__alt_mem_Flash_flash_data+0xf4000a80>
     e0c:	01001504 	movi	r4,84
     e10:	20801c36 	bltu	r4,r2,e84 <_malloc_r+0x75c>
     e14:	3804d33a 	srli	r2,r7,12
     e18:	11001b84 	addi	r4,r2,110
     e1c:	210b883a 	add	r5,r4,r4
     e20:	003f8006 	br	c24 <__alt_mem_Flash_flash_data+0xf4000c24>
     e24:	3083ffcc 	andi	r2,r6,4095
     e28:	103f241e 	bne	r2,zero,abc <__alt_mem_Flash_flash_data+0xf4000abc>
     e2c:	99000217 	ldw	r4,8(r19)
     e30:	ad85883a 	add	r2,r21,r22
     e34:	10800054 	ori	r2,r2,1
     e38:	20800115 	stw	r2,4(r4)
     e3c:	003f4a06 	br	b68 <__alt_mem_Flash_flash_data+0xf4000b68>
     e40:	01403f04 	movi	r5,252
     e44:	01c01f84 	movi	r7,126
     e48:	003e7b06 	br	838 <__alt_mem_Flash_flash_data+0xf4000838>
     e4c:	00c00044 	movi	r3,1
     e50:	002b883a 	mov	r21,zero
     e54:	003f3006 	br	b18 <__alt_mem_Flash_flash_data+0xf4000b18>
     e58:	008000b4 	movhi	r2,2
     e5c:	108b0d04 	addi	r2,r2,11316
     e60:	15000015 	stw	r20,0(r2)
     e64:	003f1b06 	br	ad4 <__alt_mem_Flash_flash_data+0xf4000ad4>
     e68:	9009883a 	mov	r4,r18
     e6c:	81400204 	addi	r5,r16,8
     e70:	00074500 	call	7450 <_free_r>
     e74:	008000b4 	movhi	r2,2
     e78:	10934704 	addi	r2,r2,19740
     e7c:	10c00017 	ldw	r3,0(r2)
     e80:	003f3906 	br	b68 <__alt_mem_Flash_flash_data+0xf4000b68>
     e84:	01005504 	movi	r4,340
     e88:	20800436 	bltu	r4,r2,e9c <_malloc_r+0x774>
     e8c:	3804d3fa 	srli	r2,r7,15
     e90:	11001dc4 	addi	r4,r2,119
     e94:	210b883a 	add	r5,r4,r4
     e98:	003f6206 	br	c24 <__alt_mem_Flash_flash_data+0xf4000c24>
     e9c:	01015504 	movi	r4,1364
     ea0:	20800436 	bltu	r4,r2,eb4 <_malloc_r+0x78c>
     ea4:	3804d4ba 	srli	r2,r7,18
     ea8:	11001f04 	addi	r4,r2,124
     eac:	210b883a 	add	r5,r4,r4
     eb0:	003f5c06 	br	c24 <__alt_mem_Flash_flash_data+0xf4000c24>
     eb4:	01403f04 	movi	r5,252
     eb8:	01001f84 	movi	r4,126
     ebc:	003f5906 	br	c24 <__alt_mem_Flash_flash_data+0xf4000c24>
     ec0:	98800117 	ldw	r2,4(r19)
     ec4:	003fa906 	br	d6c <__alt_mem_Flash_flash_data+0xf4000d6c>
     ec8:	6007883a 	mov	r3,r12
     ecc:	003ea206 	br	958 <__alt_mem_Flash_flash_data+0xf4000958>

00000ed0 <_printf_r>:
     ed0:	defffd04 	addi	sp,sp,-12
     ed4:	dfc00015 	stw	ra,0(sp)
     ed8:	d9800115 	stw	r6,4(sp)
     edc:	d9c00215 	stw	r7,8(sp)
     ee0:	280d883a 	mov	r6,r5
     ee4:	21400217 	ldw	r5,8(r4)
     ee8:	d9c00104 	addi	r7,sp,4
     eec:	000324c0 	call	324c <___vfprintf_internal_r>
     ef0:	dfc00017 	ldw	ra,0(sp)
     ef4:	dec00304 	addi	sp,sp,12
     ef8:	f800283a 	ret

00000efc <printf>:
     efc:	defffc04 	addi	sp,sp,-16
     f00:	dfc00015 	stw	ra,0(sp)
     f04:	d9400115 	stw	r5,4(sp)
     f08:	d9800215 	stw	r6,8(sp)
     f0c:	d9c00315 	stw	r7,12(sp)
     f10:	008000b4 	movhi	r2,2
     f14:	108b1004 	addi	r2,r2,11328
     f18:	10800017 	ldw	r2,0(r2)
     f1c:	200b883a 	mov	r5,r4
     f20:	d9800104 	addi	r6,sp,4
     f24:	11000217 	ldw	r4,8(r2)
     f28:	000519c0 	call	519c <__vfprintf_internal>
     f2c:	dfc00017 	ldw	ra,0(sp)
     f30:	dec00404 	addi	sp,sp,16
     f34:	f800283a 	ret

00000f38 <_puts_r>:
     f38:	defff604 	addi	sp,sp,-40
     f3c:	dc000715 	stw	r16,28(sp)
     f40:	2021883a 	mov	r16,r4
     f44:	2809883a 	mov	r4,r5
     f48:	dc400815 	stw	r17,32(sp)
     f4c:	dfc00915 	stw	ra,36(sp)
     f50:	2823883a 	mov	r17,r5
     f54:	00012240 	call	1224 <strlen>
     f58:	81400217 	ldw	r5,8(r16)
     f5c:	11000044 	addi	r4,r2,1
     f60:	d8800115 	stw	r2,4(sp)
     f64:	008000b4 	movhi	r2,2
     f68:	2980030b 	ldhu	r6,12(r5)
     f6c:	10820004 	addi	r2,r2,2048
     f70:	d8800215 	stw	r2,8(sp)
     f74:	00800044 	movi	r2,1
     f78:	d8800315 	stw	r2,12(sp)
     f7c:	00800084 	movi	r2,2
     f80:	d8800515 	stw	r2,20(sp)
     f84:	dc400015 	stw	r17,0(sp)
     f88:	d9000615 	stw	r4,24(sp)
     f8c:	dec00415 	stw	sp,16(sp)
     f90:	3088000c 	andi	r2,r6,8192
     f94:	1000061e 	bne	r2,zero,fb0 <_puts_r+0x78>
     f98:	29001917 	ldw	r4,100(r5)
     f9c:	00b7ffc4 	movi	r2,-8193
     fa0:	31880014 	ori	r6,r6,8192
     fa4:	2084703a 	and	r2,r4,r2
     fa8:	2980030d 	sth	r6,12(r5)
     fac:	28801915 	stw	r2,100(r5)
     fb0:	8009883a 	mov	r4,r16
     fb4:	d9800404 	addi	r6,sp,16
     fb8:	00077400 	call	7740 <__sfvwrite_r>
     fbc:	1000061e 	bne	r2,zero,fd8 <_puts_r+0xa0>
     fc0:	00800284 	movi	r2,10
     fc4:	dfc00917 	ldw	ra,36(sp)
     fc8:	dc400817 	ldw	r17,32(sp)
     fcc:	dc000717 	ldw	r16,28(sp)
     fd0:	dec00a04 	addi	sp,sp,40
     fd4:	f800283a 	ret
     fd8:	00bfffc4 	movi	r2,-1
     fdc:	003ff906 	br	fc4 <__alt_mem_Flash_flash_data+0xf4000fc4>

00000fe0 <puts>:
     fe0:	008000b4 	movhi	r2,2
     fe4:	108b1004 	addi	r2,r2,11328
     fe8:	200b883a 	mov	r5,r4
     fec:	11000017 	ldw	r4,0(r2)
     ff0:	0000f381 	jmpi	f38 <_puts_r>

00000ff4 <_sbrk_r>:
     ff4:	defffd04 	addi	sp,sp,-12
     ff8:	dc000015 	stw	r16,0(sp)
     ffc:	040000b4 	movhi	r16,2
    1000:	dc400115 	stw	r17,4(sp)
    1004:	8412fd04 	addi	r16,r16,19444
    1008:	2023883a 	mov	r17,r4
    100c:	2809883a 	mov	r4,r5
    1010:	dfc00215 	stw	ra,8(sp)
    1014:	80000015 	stw	zero,0(r16)
    1018:	00106200 	call	10620 <sbrk>
    101c:	00ffffc4 	movi	r3,-1
    1020:	10c00526 	beq	r2,r3,1038 <_sbrk_r+0x44>
    1024:	dfc00217 	ldw	ra,8(sp)
    1028:	dc400117 	ldw	r17,4(sp)
    102c:	dc000017 	ldw	r16,0(sp)
    1030:	dec00304 	addi	sp,sp,12
    1034:	f800283a 	ret
    1038:	80c00017 	ldw	r3,0(r16)
    103c:	183ff926 	beq	r3,zero,1024 <__alt_mem_Flash_flash_data+0xf4001024>
    1040:	88c00015 	stw	r3,0(r17)
    1044:	003ff706 	br	1024 <__alt_mem_Flash_flash_data+0xf4001024>

00001048 <_sprintf_r>:
    1048:	deffe404 	addi	sp,sp,-112
    104c:	2807883a 	mov	r3,r5
    1050:	dfc01a15 	stw	ra,104(sp)
    1054:	d9c01b15 	stw	r7,108(sp)
    1058:	00a00034 	movhi	r2,32768
    105c:	10bfffc4 	addi	r2,r2,-1
    1060:	02008204 	movi	r8,520
    1064:	d8800215 	stw	r2,8(sp)
    1068:	d8800515 	stw	r2,20(sp)
    106c:	d80b883a 	mov	r5,sp
    1070:	d9c01b04 	addi	r7,sp,108
    1074:	00bfffc4 	movi	r2,-1
    1078:	d8c00015 	stw	r3,0(sp)
    107c:	d8c00415 	stw	r3,16(sp)
    1080:	da00030d 	sth	r8,12(sp)
    1084:	d880038d 	sth	r2,14(sp)
    1088:	00012bc0 	call	12bc <___svfprintf_internal_r>
    108c:	d8c00017 	ldw	r3,0(sp)
    1090:	18000005 	stb	zero,0(r3)
    1094:	dfc01a17 	ldw	ra,104(sp)
    1098:	dec01c04 	addi	sp,sp,112
    109c:	f800283a 	ret

000010a0 <sprintf>:
    10a0:	deffe304 	addi	sp,sp,-116
    10a4:	2007883a 	mov	r3,r4
    10a8:	dfc01a15 	stw	ra,104(sp)
    10ac:	d9801b15 	stw	r6,108(sp)
    10b0:	d9c01c15 	stw	r7,112(sp)
    10b4:	010000b4 	movhi	r4,2
    10b8:	210b1004 	addi	r4,r4,11328
    10bc:	21000017 	ldw	r4,0(r4)
    10c0:	00a00034 	movhi	r2,32768
    10c4:	10bfffc4 	addi	r2,r2,-1
    10c8:	280d883a 	mov	r6,r5
    10cc:	02008204 	movi	r8,520
    10d0:	d8800215 	stw	r2,8(sp)
    10d4:	d8800515 	stw	r2,20(sp)
    10d8:	d80b883a 	mov	r5,sp
    10dc:	d9c01b04 	addi	r7,sp,108
    10e0:	00bfffc4 	movi	r2,-1
    10e4:	d8c00015 	stw	r3,0(sp)
    10e8:	d8c00415 	stw	r3,16(sp)
    10ec:	da00030d 	sth	r8,12(sp)
    10f0:	d880038d 	sth	r2,14(sp)
    10f4:	00012bc0 	call	12bc <___svfprintf_internal_r>
    10f8:	d8c00017 	ldw	r3,0(sp)
    10fc:	18000005 	stb	zero,0(r3)
    1100:	dfc01a17 	ldw	ra,104(sp)
    1104:	dec01d04 	addi	sp,sp,116
    1108:	f800283a 	ret

0000110c <strcat>:
    110c:	defffe04 	addi	sp,sp,-8
    1110:	dc000015 	stw	r16,0(sp)
    1114:	dfc00115 	stw	ra,4(sp)
    1118:	208000cc 	andi	r2,r4,3
    111c:	2021883a 	mov	r16,r4
    1120:	1000111e 	bne	r2,zero,1168 <strcat+0x5c>
    1124:	20800017 	ldw	r2,0(r4)
    1128:	027fbff4 	movhi	r9,65279
    112c:	4a7fbfc4 	addi	r9,r9,-257
    1130:	0086303a 	nor	r3,zero,r2
    1134:	02202074 	movhi	r8,32897
    1138:	1245883a 	add	r2,r2,r9
    113c:	42202004 	addi	r8,r8,-32640
    1140:	10c4703a 	and	r2,r2,r3
    1144:	1204703a 	and	r2,r2,r8
    1148:	1000071e 	bne	r2,zero,1168 <strcat+0x5c>
    114c:	21000104 	addi	r4,r4,4
    1150:	21800017 	ldw	r6,0(r4)
    1154:	324f883a 	add	r7,r6,r9
    1158:	018c303a 	nor	r6,zero,r6
    115c:	398c703a 	and	r6,r7,r6
    1160:	320c703a 	and	r6,r6,r8
    1164:	303ff926 	beq	r6,zero,114c <__alt_mem_Flash_flash_data+0xf400114c>
    1168:	20800007 	ldb	r2,0(r4)
    116c:	10000326 	beq	r2,zero,117c <strcat+0x70>
    1170:	21000044 	addi	r4,r4,1
    1174:	21800007 	ldb	r6,0(r4)
    1178:	303ffd1e 	bne	r6,zero,1170 <__alt_mem_Flash_flash_data+0xf4001170>
    117c:	00011940 	call	1194 <strcpy>
    1180:	8005883a 	mov	r2,r16
    1184:	dfc00117 	ldw	ra,4(sp)
    1188:	dc000017 	ldw	r16,0(sp)
    118c:	dec00204 	addi	sp,sp,8
    1190:	f800283a 	ret

00001194 <strcpy>:
    1194:	2906b03a 	or	r3,r5,r4
    1198:	18c000cc 	andi	r3,r3,3
    119c:	2005883a 	mov	r2,r4
    11a0:	1800161e 	bne	r3,zero,11fc <strcpy+0x68>
    11a4:	29c00017 	ldw	r7,0(r5)
    11a8:	02ffbff4 	movhi	r11,65279
    11ac:	5affbfc4 	addi	r11,r11,-257
    11b0:	02a02074 	movhi	r10,32897
    11b4:	01c8303a 	nor	r4,zero,r7
    11b8:	3ac7883a 	add	r3,r7,r11
    11bc:	52a02004 	addi	r10,r10,-32640
    11c0:	20c6703a 	and	r3,r4,r3
    11c4:	1a86703a 	and	r3,r3,r10
    11c8:	18000c1e 	bne	r3,zero,11fc <strcpy+0x68>
    11cc:	1011883a 	mov	r8,r2
    11d0:	41c00015 	stw	r7,0(r8)
    11d4:	29400104 	addi	r5,r5,4
    11d8:	29c00017 	ldw	r7,0(r5)
    11dc:	41800104 	addi	r6,r8,4
    11e0:	3011883a 	mov	r8,r6
    11e4:	01d2303a 	nor	r9,zero,r7
    11e8:	3ac7883a 	add	r3,r7,r11
    11ec:	48c6703a 	and	r3,r9,r3
    11f0:	1a86703a 	and	r3,r3,r10
    11f4:	183ff626 	beq	r3,zero,11d0 <__alt_mem_Flash_flash_data+0xf40011d0>
    11f8:	00000106 	br	1200 <strcpy+0x6c>
    11fc:	100d883a 	mov	r6,r2
    1200:	28c00003 	ldbu	r3,0(r5)
    1204:	31800044 	addi	r6,r6,1
    1208:	29400044 	addi	r5,r5,1
    120c:	30ffffc5 	stb	r3,-1(r6)
    1210:	18c03fcc 	andi	r3,r3,255
    1214:	18c0201c 	xori	r3,r3,128
    1218:	18ffe004 	addi	r3,r3,-128
    121c:	183ff81e 	bne	r3,zero,1200 <__alt_mem_Flash_flash_data+0xf4001200>
    1220:	f800283a 	ret

00001224 <strlen>:
    1224:	208000cc 	andi	r2,r4,3
    1228:	10002026 	beq	r2,zero,12ac <strlen+0x88>
    122c:	20800007 	ldb	r2,0(r4)
    1230:	10002026 	beq	r2,zero,12b4 <strlen+0x90>
    1234:	2005883a 	mov	r2,r4
    1238:	00000206 	br	1244 <strlen+0x20>
    123c:	10c00007 	ldb	r3,0(r2)
    1240:	18001826 	beq	r3,zero,12a4 <strlen+0x80>
    1244:	10800044 	addi	r2,r2,1
    1248:	10c000cc 	andi	r3,r2,3
    124c:	183ffb1e 	bne	r3,zero,123c <__alt_mem_Flash_flash_data+0xf400123c>
    1250:	10c00017 	ldw	r3,0(r2)
    1254:	01ffbff4 	movhi	r7,65279
    1258:	39ffbfc4 	addi	r7,r7,-257
    125c:	00ca303a 	nor	r5,zero,r3
    1260:	01a02074 	movhi	r6,32897
    1264:	19c7883a 	add	r3,r3,r7
    1268:	31a02004 	addi	r6,r6,-32640
    126c:	1946703a 	and	r3,r3,r5
    1270:	1986703a 	and	r3,r3,r6
    1274:	1800091e 	bne	r3,zero,129c <strlen+0x78>
    1278:	10800104 	addi	r2,r2,4
    127c:	10c00017 	ldw	r3,0(r2)
    1280:	19cb883a 	add	r5,r3,r7
    1284:	00c6303a 	nor	r3,zero,r3
    1288:	28c6703a 	and	r3,r5,r3
    128c:	1986703a 	and	r3,r3,r6
    1290:	183ff926 	beq	r3,zero,1278 <__alt_mem_Flash_flash_data+0xf4001278>
    1294:	00000106 	br	129c <strlen+0x78>
    1298:	10800044 	addi	r2,r2,1
    129c:	10c00007 	ldb	r3,0(r2)
    12a0:	183ffd1e 	bne	r3,zero,1298 <__alt_mem_Flash_flash_data+0xf4001298>
    12a4:	1105c83a 	sub	r2,r2,r4
    12a8:	f800283a 	ret
    12ac:	2005883a 	mov	r2,r4
    12b0:	003fe706 	br	1250 <__alt_mem_Flash_flash_data+0xf4001250>
    12b4:	0005883a 	mov	r2,zero
    12b8:	f800283a 	ret

000012bc <___svfprintf_internal_r>:
    12bc:	deffb504 	addi	sp,sp,-300
    12c0:	dfc04a15 	stw	ra,296(sp)
    12c4:	ddc04815 	stw	r23,288(sp)
    12c8:	d9002f15 	stw	r4,188(sp)
    12cc:	282f883a 	mov	r23,r5
    12d0:	d9802915 	stw	r6,164(sp)
    12d4:	d9c02d15 	stw	r7,180(sp)
    12d8:	df004915 	stw	fp,292(sp)
    12dc:	dd804715 	stw	r22,284(sp)
    12e0:	dd404615 	stw	r21,280(sp)
    12e4:	dd004515 	stw	r20,276(sp)
    12e8:	dcc04415 	stw	r19,272(sp)
    12ec:	dc804315 	stw	r18,268(sp)
    12f0:	dc404215 	stw	r17,264(sp)
    12f4:	dc004115 	stw	r16,260(sp)
    12f8:	0007e340 	call	7e34 <_localeconv_r>
    12fc:	10800017 	ldw	r2,0(r2)
    1300:	1009883a 	mov	r4,r2
    1304:	d8803515 	stw	r2,212(sp)
    1308:	00012240 	call	1224 <strlen>
    130c:	d8803915 	stw	r2,228(sp)
    1310:	b880030b 	ldhu	r2,12(r23)
    1314:	1080200c 	andi	r2,r2,128
    1318:	10000226 	beq	r2,zero,1324 <___svfprintf_internal_r+0x68>
    131c:	b8800417 	ldw	r2,16(r23)
    1320:	10065f26 	beq	r2,zero,2ca0 <___svfprintf_internal_r+0x19e4>
    1324:	db001dc4 	addi	r12,sp,119
    1328:	dd801e04 	addi	r22,sp,120
    132c:	d8800404 	addi	r2,sp,16
    1330:	050000b4 	movhi	r20,2
    1334:	b317c83a 	sub	r11,r22,r12
    1338:	a5021184 	addi	r20,r20,2118
    133c:	db002815 	stw	r12,160(sp)
    1340:	d8801e15 	stw	r2,120(sp)
    1344:	d8002015 	stw	zero,128(sp)
    1348:	d8001f15 	stw	zero,124(sp)
    134c:	d8003315 	stw	zero,204(sp)
    1350:	d8003715 	stw	zero,220(sp)
    1354:	d8003815 	stw	zero,224(sp)
    1358:	1011883a 	mov	r8,r2
    135c:	d8003b15 	stw	zero,236(sp)
    1360:	d8003a15 	stw	zero,232(sp)
    1364:	d8003015 	stw	zero,192(sp)
    1368:	dac03d15 	stw	r11,244(sp)
    136c:	db002917 	ldw	r12,164(sp)
    1370:	60800007 	ldb	r2,0(r12)
    1374:	1000ab26 	beq	r2,zero,1624 <___svfprintf_internal_r+0x368>
    1378:	00c00944 	movi	r3,37
    137c:	10c0a926 	beq	r2,r3,1624 <___svfprintf_internal_r+0x368>
    1380:	6021883a 	mov	r16,r12
    1384:	00000106 	br	138c <___svfprintf_internal_r+0xd0>
    1388:	10c08426 	beq	r2,r3,159c <___svfprintf_internal_r+0x2e0>
    138c:	84000044 	addi	r16,r16,1
    1390:	80800007 	ldb	r2,0(r16)
    1394:	103ffc1e 	bne	r2,zero,1388 <__alt_mem_Flash_flash_data+0xf4001388>
    1398:	dac02917 	ldw	r11,164(sp)
    139c:	82e3c83a 	sub	r17,r16,r11
    13a0:	88000f26 	beq	r17,zero,13e0 <___svfprintf_internal_r+0x124>
    13a4:	d8c02017 	ldw	r3,128(sp)
    13a8:	d8801f17 	ldw	r2,124(sp)
    13ac:	dac02917 	ldw	r11,164(sp)
    13b0:	1c47883a 	add	r3,r3,r17
    13b4:	10800044 	addi	r2,r2,1
    13b8:	d8c02015 	stw	r3,128(sp)
    13bc:	42c00015 	stw	r11,0(r8)
    13c0:	44400115 	stw	r17,4(r8)
    13c4:	d8801f15 	stw	r2,124(sp)
    13c8:	00c001c4 	movi	r3,7
    13cc:	18807616 	blt	r3,r2,15a8 <___svfprintf_internal_r+0x2ec>
    13d0:	42000204 	addi	r8,r8,8
    13d4:	db003017 	ldw	r12,192(sp)
    13d8:	6459883a 	add	r12,r12,r17
    13dc:	db003015 	stw	r12,192(sp)
    13e0:	80800007 	ldb	r2,0(r16)
    13e4:	10007726 	beq	r2,zero,15c4 <___svfprintf_internal_r+0x308>
    13e8:	80800044 	addi	r2,r16,1
    13ec:	84000047 	ldb	r16,1(r16)
    13f0:	d8002785 	stb	zero,158(sp)
    13f4:	000d883a 	mov	r6,zero
    13f8:	027fffc4 	movi	r9,-1
    13fc:	d8002e15 	stw	zero,184(sp)
    1400:	0023883a 	mov	r17,zero
    1404:	01001604 	movi	r4,88
    1408:	01400244 	movi	r5,9
    140c:	02800a84 	movi	r10,42
    1410:	01c01b04 	movi	r7,108
    1414:	10c00044 	addi	r3,r2,1
    1418:	80bff804 	addi	r2,r16,-32
    141c:	2082e636 	bltu	r4,r2,1fb8 <___svfprintf_internal_r+0xcfc>
    1420:	100490ba 	slli	r2,r2,2
    1424:	02c00034 	movhi	r11,0
    1428:	5ac50e04 	addi	r11,r11,5176
    142c:	12c5883a 	add	r2,r2,r11
    1430:	10800017 	ldw	r2,0(r2)
    1434:	1000683a 	jmp	r2
    1438:	00001d98 	cmpnei	zero,zero,118
    143c:	00001fb8 	rdprs	zero,zero,126
    1440:	00001fb8 	rdprs	zero,zero,126
    1444:	00001db8 	rdprs	zero,zero,118
    1448:	00001fb8 	rdprs	zero,zero,126
    144c:	00001fb8 	rdprs	zero,zero,126
    1450:	00001fb8 	rdprs	zero,zero,126
    1454:	00001fb8 	rdprs	zero,zero,126
    1458:	00001fb8 	rdprs	zero,zero,126
    145c:	00001fb8 	rdprs	zero,zero,126
    1460:	00001dc8 	cmpgei	zero,zero,119
    1464:	00001df4 	movhi	zero,119
    1468:	00001fb8 	rdprs	zero,zero,126
    146c:	0000162c 	andhi	zero,zero,88
    1470:	0000163c 	xorhi	zero,zero,88
    1474:	00001fb8 	rdprs	zero,zero,126
    1478:	0000167c 	xorhi	zero,zero,89
    147c:	00001c5c 	xori	zero,zero,113
    1480:	00001c5c 	xori	zero,zero,113
    1484:	00001c5c 	xori	zero,zero,113
    1488:	00001c5c 	xori	zero,zero,113
    148c:	00001c5c 	xori	zero,zero,113
    1490:	00001c5c 	xori	zero,zero,113
    1494:	00001c5c 	xori	zero,zero,113
    1498:	00001c5c 	xori	zero,zero,113
    149c:	00001c5c 	xori	zero,zero,113
    14a0:	00001fb8 	rdprs	zero,zero,126
    14a4:	00001fb8 	rdprs	zero,zero,126
    14a8:	00001fb8 	rdprs	zero,zero,126
    14ac:	00001fb8 	rdprs	zero,zero,126
    14b0:	00001fb8 	rdprs	zero,zero,126
    14b4:	00001fb8 	rdprs	zero,zero,126
    14b8:	00001fb8 	rdprs	zero,zero,126
    14bc:	00001fb8 	rdprs	zero,zero,126
    14c0:	00001fb8 	rdprs	zero,zero,126
    14c4:	00001fb8 	rdprs	zero,zero,126
    14c8:	0000168c 	andi	zero,zero,90
    14cc:	00001b0c 	andi	zero,zero,108
    14d0:	00001fb8 	rdprs	zero,zero,126
    14d4:	00001b0c 	andi	zero,zero,108
    14d8:	00001fb8 	rdprs	zero,zero,126
    14dc:	00001fb8 	rdprs	zero,zero,126
    14e0:	00001fb8 	rdprs	zero,zero,126
    14e4:	00001fb8 	rdprs	zero,zero,126
    14e8:	00001bb0 	cmpltui	zero,zero,110
    14ec:	00001fb8 	rdprs	zero,zero,126
    14f0:	00001fb8 	rdprs	zero,zero,126
    14f4:	00001f4c 	andi	zero,zero,125
    14f8:	00001fb8 	rdprs	zero,zero,126
    14fc:	00001fb8 	rdprs	zero,zero,126
    1500:	00001fb8 	rdprs	zero,zero,126
    1504:	00001fb8 	rdprs	zero,zero,126
    1508:	00001fb8 	rdprs	zero,zero,126
    150c:	00001bc0 	call	1bc <alt_irq_handler+0xc0>
    1510:	00001fb8 	rdprs	zero,zero,126
    1514:	00001fb8 	rdprs	zero,zero,126
    1518:	00001c00 	call	1c0 <alt_irq_handler+0xc4>
    151c:	00001fb8 	rdprs	zero,zero,126
    1520:	00001fb8 	rdprs	zero,zero,126
    1524:	00001fb8 	rdprs	zero,zero,126
    1528:	00001fb8 	rdprs	zero,zero,126
    152c:	00001fb8 	rdprs	zero,zero,126
    1530:	00001fb8 	rdprs	zero,zero,126
    1534:	00001fb8 	rdprs	zero,zero,126
    1538:	00001fb8 	rdprs	zero,zero,126
    153c:	00001fb8 	rdprs	zero,zero,126
    1540:	00001fb8 	rdprs	zero,zero,126
    1544:	00001ea4 	muli	zero,zero,122
    1548:	00001ee4 	muli	zero,zero,123
    154c:	00001b0c 	andi	zero,zero,108
    1550:	00001b0c 	andi	zero,zero,108
    1554:	00001b0c 	andi	zero,zero,108
    1558:	00001e04 	movi	zero,120
    155c:	00001ee4 	muli	zero,zero,123
    1560:	00001fb8 	rdprs	zero,zero,126
    1564:	00001fb8 	rdprs	zero,zero,126
    1568:	00001e14 	movui	zero,120
    156c:	00001fb8 	rdprs	zero,zero,126
    1570:	00001e28 	cmpgeui	zero,zero,120
    1574:	00001f7c 	xorhi	zero,zero,125
    1578:	00001e5c 	xori	zero,zero,121
    157c:	00001c90 	cmplti	zero,zero,114
    1580:	00001fb8 	rdprs	zero,zero,126
    1584:	00001ca0 	cmpeqi	zero,zero,114
    1588:	00001fb8 	rdprs	zero,zero,126
    158c:	00001d18 	cmpnei	zero,zero,116
    1590:	00001fb8 	rdprs	zero,zero,126
    1594:	00001fb8 	rdprs	zero,zero,126
    1598:	00001d58 	cmpnei	zero,zero,117
    159c:	db002917 	ldw	r12,164(sp)
    15a0:	8323c83a 	sub	r17,r16,r12
    15a4:	003f7e06 	br	13a0 <__alt_mem_Flash_flash_data+0xf40013a0>
    15a8:	d9002f17 	ldw	r4,188(sp)
    15ac:	b80b883a 	mov	r5,r23
    15b0:	b00d883a 	mov	r6,r22
    15b4:	0009c1c0 	call	9c1c <__ssprint_r>
    15b8:	1000081e 	bne	r2,zero,15dc <___svfprintf_internal_r+0x320>
    15bc:	da000404 	addi	r8,sp,16
    15c0:	003f8406 	br	13d4 <__alt_mem_Flash_flash_data+0xf40013d4>
    15c4:	d8802017 	ldw	r2,128(sp)
    15c8:	10000426 	beq	r2,zero,15dc <___svfprintf_internal_r+0x320>
    15cc:	d9002f17 	ldw	r4,188(sp)
    15d0:	b80b883a 	mov	r5,r23
    15d4:	d9801e04 	addi	r6,sp,120
    15d8:	0009c1c0 	call	9c1c <__ssprint_r>
    15dc:	b880030b 	ldhu	r2,12(r23)
    15e0:	1080100c 	andi	r2,r2,64
    15e4:	10000d1e 	bne	r2,zero,161c <___svfprintf_internal_r+0x360>
    15e8:	d8803017 	ldw	r2,192(sp)
    15ec:	dfc04a17 	ldw	ra,296(sp)
    15f0:	df004917 	ldw	fp,292(sp)
    15f4:	ddc04817 	ldw	r23,288(sp)
    15f8:	dd804717 	ldw	r22,284(sp)
    15fc:	dd404617 	ldw	r21,280(sp)
    1600:	dd004517 	ldw	r20,276(sp)
    1604:	dcc04417 	ldw	r19,272(sp)
    1608:	dc804317 	ldw	r18,268(sp)
    160c:	dc404217 	ldw	r17,264(sp)
    1610:	dc004117 	ldw	r16,260(sp)
    1614:	dec04b04 	addi	sp,sp,300
    1618:	f800283a 	ret
    161c:	00bfffc4 	movi	r2,-1
    1620:	003ff206 	br	15ec <__alt_mem_Flash_flash_data+0xf40015ec>
    1624:	dc002917 	ldw	r16,164(sp)
    1628:	003f6d06 	br	13e0 <__alt_mem_Flash_flash_data+0xf40013e0>
    162c:	1805883a 	mov	r2,r3
    1630:	8c400114 	ori	r17,r17,4
    1634:	1c000007 	ldb	r16,0(r3)
    1638:	003f7606 	br	1414 <__alt_mem_Flash_flash_data+0xf4001414>
    163c:	1c000007 	ldb	r16,0(r3)
    1640:	18800044 	addi	r2,r3,1
    1644:	8286e726 	beq	r16,r10,31e4 <___svfprintf_internal_r+0x1f28>
    1648:	82fff404 	addi	r11,r16,-48
    164c:	1007883a 	mov	r3,r2
    1650:	0013883a 	mov	r9,zero
    1654:	2aff7036 	bltu	r5,r11,1418 <__alt_mem_Flash_flash_data+0xf4001418>
    1658:	1c000007 	ldb	r16,0(r3)
    165c:	4a4002a4 	muli	r9,r9,10
    1660:	18c00044 	addi	r3,r3,1
    1664:	5a53883a 	add	r9,r11,r9
    1668:	82fff404 	addi	r11,r16,-48
    166c:	2afffa2e 	bgeu	r5,r11,1658 <__alt_mem_Flash_flash_data+0xf4001658>
    1670:	483f690e 	bge	r9,zero,1418 <__alt_mem_Flash_flash_data+0xf4001418>
    1674:	027fffc4 	movi	r9,-1
    1678:	003f6706 	br	1418 <__alt_mem_Flash_flash_data+0xf4001418>
    167c:	8c402014 	ori	r17,r17,128
    1680:	1805883a 	mov	r2,r3
    1684:	1c000007 	ldb	r16,0(r3)
    1688:	003f6206 	br	1414 <__alt_mem_Flash_flash_data+0xf4001414>
    168c:	8c400414 	ori	r17,r17,16
    1690:	d8c02915 	stw	r3,164(sp)
    1694:	d9802785 	stb	r6,158(sp)
    1698:	8880080c 	andi	r2,r17,32
    169c:	d8c02d17 	ldw	r3,180(sp)
    16a0:	10021526 	beq	r2,zero,1ef8 <___svfprintf_internal_r+0xc3c>
    16a4:	db002d17 	ldw	r12,180(sp)
    16a8:	18800117 	ldw	r2,4(r3)
    16ac:	1cc00017 	ldw	r19,0(r3)
    16b0:	63000204 	addi	r12,r12,8
    16b4:	db002d15 	stw	r12,180(sp)
    16b8:	1039883a 	mov	fp,r2
    16bc:	10021916 	blt	r2,zero,1f24 <___svfprintf_internal_r+0xc68>
    16c0:	dd402783 	ldbu	r21,158(sp)
    16c4:	da403215 	stw	r9,200(sp)
    16c8:	00800044 	movi	r2,1
    16cc:	9f06b03a 	or	r3,r19,fp
    16d0:	48000216 	blt	r9,zero,16dc <___svfprintf_internal_r+0x420>
    16d4:	013fdfc4 	movi	r4,-129
    16d8:	8922703a 	and	r17,r17,r4
    16dc:	1802461e 	bne	r3,zero,1ff8 <___svfprintf_internal_r+0xd3c>
    16e0:	48035426 	beq	r9,zero,2434 <___svfprintf_internal_r+0x1178>
    16e4:	10803fcc 	andi	r2,r2,255
    16e8:	00c00044 	movi	r3,1
    16ec:	10c26726 	beq	r2,r3,208c <___svfprintf_internal_r+0xdd0>
    16f0:	00c00084 	movi	r3,2
    16f4:	10c2ea26 	beq	r2,r3,22a0 <___svfprintf_internal_r+0xfe4>
    16f8:	b007883a 	mov	r3,r22
    16fc:	9808d0fa 	srli	r4,r19,3
    1700:	e00a977a 	slli	r5,fp,29
    1704:	e038d0fa 	srli	fp,fp,3
    1708:	9cc001cc 	andi	r19,r19,7
    170c:	98800c04 	addi	r2,r19,48
    1710:	18ffffc4 	addi	r3,r3,-1
    1714:	2926b03a 	or	r19,r5,r4
    1718:	18800005 	stb	r2,0(r3)
    171c:	9f08b03a 	or	r4,r19,fp
    1720:	203ff61e 	bne	r4,zero,16fc <__alt_mem_Flash_flash_data+0xf40016fc>
    1724:	8900004c 	andi	r4,r17,1
    1728:	d8c03115 	stw	r3,196(sp)
    172c:	2002ea26 	beq	r4,zero,22d8 <___svfprintf_internal_r+0x101c>
    1730:	10803fcc 	andi	r2,r2,255
    1734:	1080201c 	xori	r2,r2,128
    1738:	10bfe004 	addi	r2,r2,-128
    173c:	01000c04 	movi	r4,48
    1740:	11057526 	beq	r2,r4,2d18 <___svfprintf_internal_r+0x1a5c>
    1744:	dac03117 	ldw	r11,196(sp)
    1748:	193fffc5 	stb	r4,-1(r3)
    174c:	5affffc4 	addi	r11,r11,-1
    1750:	dac03115 	stw	r11,196(sp)
    1754:	b2e5c83a 	sub	r18,r22,r11
    1758:	9005883a 	mov	r2,r18
    175c:	9240010e 	bge	r18,r9,1764 <___svfprintf_internal_r+0x4a8>
    1760:	4805883a 	mov	r2,r9
    1764:	d8802a15 	stw	r2,168(sp)
    1768:	d8003415 	stw	zero,208(sp)
    176c:	a8803fcc 	andi	r2,r21,255
    1770:	1080201c 	xori	r2,r2,128
    1774:	10bfe004 	addi	r2,r2,-128
    1778:	10000326 	beq	r2,zero,1788 <___svfprintf_internal_r+0x4cc>
    177c:	d8c02a17 	ldw	r3,168(sp)
    1780:	18c00044 	addi	r3,r3,1
    1784:	d8c02a15 	stw	r3,168(sp)
    1788:	8ac0008c 	andi	r11,r17,2
    178c:	dac02b15 	stw	r11,172(sp)
    1790:	58000326 	beq	r11,zero,17a0 <___svfprintf_internal_r+0x4e4>
    1794:	db002a17 	ldw	r12,168(sp)
    1798:	63000084 	addi	r12,r12,2
    179c:	db002a15 	stw	r12,168(sp)
    17a0:	88c0210c 	andi	r3,r17,132
    17a4:	d8c02c15 	stw	r3,176(sp)
    17a8:	1802111e 	bne	r3,zero,1ff0 <___svfprintf_internal_r+0xd34>
    17ac:	dac02e17 	ldw	r11,184(sp)
    17b0:	db002a17 	ldw	r12,168(sp)
    17b4:	5b39c83a 	sub	fp,r11,r12
    17b8:	07020d0e 	bge	zero,fp,1ff0 <___svfprintf_internal_r+0xd34>
    17bc:	02400404 	movi	r9,16
    17c0:	d8c02017 	ldw	r3,128(sp)
    17c4:	d8801f17 	ldw	r2,124(sp)
    17c8:	4f058c0e 	bge	r9,fp,2dfc <___svfprintf_internal_r+0x1b40>
    17cc:	014000b4 	movhi	r5,2
    17d0:	e009883a 	mov	r4,fp
    17d4:	29421584 	addi	r5,r5,2134
    17d8:	dc003c15 	stw	r16,240(sp)
    17dc:	9039883a 	mov	fp,r18
    17e0:	d9403615 	stw	r5,216(sp)
    17e4:	8825883a 	mov	r18,r17
    17e8:	482b883a 	mov	r21,r9
    17ec:	04c001c4 	movi	r19,7
    17f0:	dc002f17 	ldw	r16,188(sp)
    17f4:	2023883a 	mov	r17,r4
    17f8:	00000306 	br	1808 <___svfprintf_internal_r+0x54c>
    17fc:	8c7ffc04 	addi	r17,r17,-16
    1800:	42000204 	addi	r8,r8,8
    1804:	ac40130e 	bge	r21,r17,1854 <___svfprintf_internal_r+0x598>
    1808:	02c000b4 	movhi	r11,2
    180c:	18c00404 	addi	r3,r3,16
    1810:	10800044 	addi	r2,r2,1
    1814:	5ac21584 	addi	r11,r11,2134
    1818:	42c00015 	stw	r11,0(r8)
    181c:	45400115 	stw	r21,4(r8)
    1820:	d8c02015 	stw	r3,128(sp)
    1824:	d8801f15 	stw	r2,124(sp)
    1828:	98bff40e 	bge	r19,r2,17fc <__alt_mem_Flash_flash_data+0xf40017fc>
    182c:	8009883a 	mov	r4,r16
    1830:	b80b883a 	mov	r5,r23
    1834:	b00d883a 	mov	r6,r22
    1838:	0009c1c0 	call	9c1c <__ssprint_r>
    183c:	103f671e 	bne	r2,zero,15dc <__alt_mem_Flash_flash_data+0xf40015dc>
    1840:	8c7ffc04 	addi	r17,r17,-16
    1844:	d8c02017 	ldw	r3,128(sp)
    1848:	d8801f17 	ldw	r2,124(sp)
    184c:	da000404 	addi	r8,sp,16
    1850:	ac7fed16 	blt	r21,r17,1808 <__alt_mem_Flash_flash_data+0xf4001808>
    1854:	dc003c17 	ldw	r16,240(sp)
    1858:	8809883a 	mov	r4,r17
    185c:	9023883a 	mov	r17,r18
    1860:	e025883a 	mov	r18,fp
    1864:	2039883a 	mov	fp,r4
    1868:	db003617 	ldw	r12,216(sp)
    186c:	e0c7883a 	add	r3,fp,r3
    1870:	10800044 	addi	r2,r2,1
    1874:	43000015 	stw	r12,0(r8)
    1878:	47000115 	stw	fp,4(r8)
    187c:	d8c02015 	stw	r3,128(sp)
    1880:	d8801f15 	stw	r2,124(sp)
    1884:	010001c4 	movi	r4,7
    1888:	20834416 	blt	r4,r2,259c <___svfprintf_internal_r+0x12e0>
    188c:	d8802787 	ldb	r2,158(sp)
    1890:	42000204 	addi	r8,r8,8
    1894:	10000c26 	beq	r2,zero,18c8 <___svfprintf_internal_r+0x60c>
    1898:	d8801f17 	ldw	r2,124(sp)
    189c:	d9002784 	addi	r4,sp,158
    18a0:	18c00044 	addi	r3,r3,1
    18a4:	10800044 	addi	r2,r2,1
    18a8:	41000015 	stw	r4,0(r8)
    18ac:	01000044 	movi	r4,1
    18b0:	41000115 	stw	r4,4(r8)
    18b4:	d8c02015 	stw	r3,128(sp)
    18b8:	d8801f15 	stw	r2,124(sp)
    18bc:	010001c4 	movi	r4,7
    18c0:	2082f616 	blt	r4,r2,249c <___svfprintf_internal_r+0x11e0>
    18c4:	42000204 	addi	r8,r8,8
    18c8:	dac02b17 	ldw	r11,172(sp)
    18cc:	58000c26 	beq	r11,zero,1900 <___svfprintf_internal_r+0x644>
    18d0:	d8801f17 	ldw	r2,124(sp)
    18d4:	d9002704 	addi	r4,sp,156
    18d8:	18c00084 	addi	r3,r3,2
    18dc:	10800044 	addi	r2,r2,1
    18e0:	41000015 	stw	r4,0(r8)
    18e4:	01000084 	movi	r4,2
    18e8:	41000115 	stw	r4,4(r8)
    18ec:	d8c02015 	stw	r3,128(sp)
    18f0:	d8801f15 	stw	r2,124(sp)
    18f4:	010001c4 	movi	r4,7
    18f8:	2082e016 	blt	r4,r2,247c <___svfprintf_internal_r+0x11c0>
    18fc:	42000204 	addi	r8,r8,8
    1900:	db002c17 	ldw	r12,176(sp)
    1904:	00802004 	movi	r2,128
    1908:	60822f26 	beq	r12,r2,21c8 <___svfprintf_internal_r+0xf0c>
    190c:	db003217 	ldw	r12,200(sp)
    1910:	64abc83a 	sub	r21,r12,r18
    1914:	0540310e 	bge	zero,r21,19dc <___svfprintf_internal_r+0x720>
    1918:	07000404 	movi	fp,16
    191c:	d8801f17 	ldw	r2,124(sp)
    1920:	e544270e 	bge	fp,r21,29c0 <___svfprintf_internal_r+0x1704>
    1924:	014000b4 	movhi	r5,2
    1928:	a809883a 	mov	r4,r21
    192c:	29421184 	addi	r5,r5,2118
    1930:	dc002c15 	stw	r16,176(sp)
    1934:	902b883a 	mov	r21,r18
    1938:	d9402b15 	stw	r5,172(sp)
    193c:	8825883a 	mov	r18,r17
    1940:	04c001c4 	movi	r19,7
    1944:	dc002f17 	ldw	r16,188(sp)
    1948:	2023883a 	mov	r17,r4
    194c:	00000306 	br	195c <___svfprintf_internal_r+0x6a0>
    1950:	8c7ffc04 	addi	r17,r17,-16
    1954:	42000204 	addi	r8,r8,8
    1958:	e440110e 	bge	fp,r17,19a0 <___svfprintf_internal_r+0x6e4>
    195c:	18c00404 	addi	r3,r3,16
    1960:	10800044 	addi	r2,r2,1
    1964:	45000015 	stw	r20,0(r8)
    1968:	47000115 	stw	fp,4(r8)
    196c:	d8c02015 	stw	r3,128(sp)
    1970:	d8801f15 	stw	r2,124(sp)
    1974:	98bff60e 	bge	r19,r2,1950 <__alt_mem_Flash_flash_data+0xf4001950>
    1978:	8009883a 	mov	r4,r16
    197c:	b80b883a 	mov	r5,r23
    1980:	b00d883a 	mov	r6,r22
    1984:	0009c1c0 	call	9c1c <__ssprint_r>
    1988:	103f141e 	bne	r2,zero,15dc <__alt_mem_Flash_flash_data+0xf40015dc>
    198c:	8c7ffc04 	addi	r17,r17,-16
    1990:	d8c02017 	ldw	r3,128(sp)
    1994:	d8801f17 	ldw	r2,124(sp)
    1998:	da000404 	addi	r8,sp,16
    199c:	e47fef16 	blt	fp,r17,195c <__alt_mem_Flash_flash_data+0xf400195c>
    19a0:	dc002c17 	ldw	r16,176(sp)
    19a4:	8809883a 	mov	r4,r17
    19a8:	9023883a 	mov	r17,r18
    19ac:	a825883a 	mov	r18,r21
    19b0:	202b883a 	mov	r21,r4
    19b4:	dac02b17 	ldw	r11,172(sp)
    19b8:	1d47883a 	add	r3,r3,r21
    19bc:	10800044 	addi	r2,r2,1
    19c0:	42c00015 	stw	r11,0(r8)
    19c4:	45400115 	stw	r21,4(r8)
    19c8:	d8c02015 	stw	r3,128(sp)
    19cc:	d8801f15 	stw	r2,124(sp)
    19d0:	010001c4 	movi	r4,7
    19d4:	2082a116 	blt	r4,r2,245c <___svfprintf_internal_r+0x11a0>
    19d8:	42000204 	addi	r8,r8,8
    19dc:	8880400c 	andi	r2,r17,256
    19e0:	1001b01e 	bne	r2,zero,20a4 <___svfprintf_internal_r+0xde8>
    19e4:	d8801f17 	ldw	r2,124(sp)
    19e8:	db003117 	ldw	r12,196(sp)
    19ec:	1c87883a 	add	r3,r3,r18
    19f0:	10800044 	addi	r2,r2,1
    19f4:	43000015 	stw	r12,0(r8)
    19f8:	44800115 	stw	r18,4(r8)
    19fc:	d8c02015 	stw	r3,128(sp)
    1a00:	d8801f15 	stw	r2,124(sp)
    1a04:	010001c4 	movi	r4,7
    1a08:	20828216 	blt	r4,r2,2414 <___svfprintf_internal_r+0x1158>
    1a0c:	42000204 	addi	r8,r8,8
    1a10:	8c40010c 	andi	r17,r17,4
    1a14:	88003226 	beq	r17,zero,1ae0 <___svfprintf_internal_r+0x824>
    1a18:	db002e17 	ldw	r12,184(sp)
    1a1c:	dac02a17 	ldw	r11,168(sp)
    1a20:	62e1c83a 	sub	r16,r12,r11
    1a24:	04002e0e 	bge	zero,r16,1ae0 <___svfprintf_internal_r+0x824>
    1a28:	04400404 	movi	r17,16
    1a2c:	d8801f17 	ldw	r2,124(sp)
    1a30:	8c05330e 	bge	r17,r16,2f00 <___svfprintf_internal_r+0x1c44>
    1a34:	010000b4 	movhi	r4,2
    1a38:	21021584 	addi	r4,r4,2134
    1a3c:	d9003615 	stw	r4,216(sp)
    1a40:	048001c4 	movi	r18,7
    1a44:	dcc02f17 	ldw	r19,188(sp)
    1a48:	00000306 	br	1a58 <___svfprintf_internal_r+0x79c>
    1a4c:	843ffc04 	addi	r16,r16,-16
    1a50:	42000204 	addi	r8,r8,8
    1a54:	8c00130e 	bge	r17,r16,1aa4 <___svfprintf_internal_r+0x7e8>
    1a58:	014000b4 	movhi	r5,2
    1a5c:	18c00404 	addi	r3,r3,16
    1a60:	10800044 	addi	r2,r2,1
    1a64:	29421584 	addi	r5,r5,2134
    1a68:	41400015 	stw	r5,0(r8)
    1a6c:	44400115 	stw	r17,4(r8)
    1a70:	d8c02015 	stw	r3,128(sp)
    1a74:	d8801f15 	stw	r2,124(sp)
    1a78:	90bff40e 	bge	r18,r2,1a4c <__alt_mem_Flash_flash_data+0xf4001a4c>
    1a7c:	9809883a 	mov	r4,r19
    1a80:	b80b883a 	mov	r5,r23
    1a84:	b00d883a 	mov	r6,r22
    1a88:	0009c1c0 	call	9c1c <__ssprint_r>
    1a8c:	103ed31e 	bne	r2,zero,15dc <__alt_mem_Flash_flash_data+0xf40015dc>
    1a90:	843ffc04 	addi	r16,r16,-16
    1a94:	d8c02017 	ldw	r3,128(sp)
    1a98:	d8801f17 	ldw	r2,124(sp)
    1a9c:	da000404 	addi	r8,sp,16
    1aa0:	8c3fed16 	blt	r17,r16,1a58 <__alt_mem_Flash_flash_data+0xf4001a58>
    1aa4:	dac03617 	ldw	r11,216(sp)
    1aa8:	1c07883a 	add	r3,r3,r16
    1aac:	10800044 	addi	r2,r2,1
    1ab0:	42c00015 	stw	r11,0(r8)
    1ab4:	44000115 	stw	r16,4(r8)
    1ab8:	d8c02015 	stw	r3,128(sp)
    1abc:	d8801f15 	stw	r2,124(sp)
    1ac0:	010001c4 	movi	r4,7
    1ac4:	2080060e 	bge	r4,r2,1ae0 <___svfprintf_internal_r+0x824>
    1ac8:	d9002f17 	ldw	r4,188(sp)
    1acc:	b80b883a 	mov	r5,r23
    1ad0:	b00d883a 	mov	r6,r22
    1ad4:	0009c1c0 	call	9c1c <__ssprint_r>
    1ad8:	103ec01e 	bne	r2,zero,15dc <__alt_mem_Flash_flash_data+0xf40015dc>
    1adc:	d8c02017 	ldw	r3,128(sp)
    1ae0:	d8802a17 	ldw	r2,168(sp)
    1ae4:	db002e17 	ldw	r12,184(sp)
    1ae8:	1300010e 	bge	r2,r12,1af0 <___svfprintf_internal_r+0x834>
    1aec:	6005883a 	mov	r2,r12
    1af0:	dac03017 	ldw	r11,192(sp)
    1af4:	5897883a 	add	r11,r11,r2
    1af8:	dac03015 	stw	r11,192(sp)
    1afc:	1802331e 	bne	r3,zero,23cc <___svfprintf_internal_r+0x1110>
    1b00:	d8001f15 	stw	zero,124(sp)
    1b04:	da000404 	addi	r8,sp,16
    1b08:	003e1806 	br	136c <__alt_mem_Flash_flash_data+0xf400136c>
    1b0c:	db002d17 	ldw	r12,180(sp)
    1b10:	dac02d17 	ldw	r11,180(sp)
    1b14:	d8c02915 	stw	r3,164(sp)
    1b18:	63000017 	ldw	r12,0(r12)
    1b1c:	5ac00117 	ldw	r11,4(r11)
    1b20:	d9802785 	stb	r6,158(sp)
    1b24:	6009883a 	mov	r4,r12
    1b28:	580b883a 	mov	r5,r11
    1b2c:	db003715 	stw	r12,220(sp)
    1b30:	da004015 	stw	r8,256(sp)
    1b34:	da403f15 	stw	r9,252(sp)
    1b38:	dac03815 	stw	r11,224(sp)
    1b3c:	00099c80 	call	99c8 <__fpclassifyd>
    1b40:	db002d17 	ldw	r12,180(sp)
    1b44:	04800044 	movi	r18,1
    1b48:	da004017 	ldw	r8,256(sp)
    1b4c:	64c00204 	addi	r19,r12,8
    1b50:	da403f17 	ldw	r9,252(sp)
    1b54:	d9003717 	ldw	r4,220(sp)
    1b58:	d9403817 	ldw	r5,224(sp)
    1b5c:	1483561e 	bne	r2,r18,28b8 <___svfprintf_internal_r+0x15fc>
    1b60:	000d883a 	mov	r6,zero
    1b64:	000f883a 	mov	r7,zero
    1b68:	000eb240 	call	eb24 <__ledf2>
    1b6c:	da004017 	ldw	r8,256(sp)
    1b70:	1004ee16 	blt	r2,zero,2f2c <___svfprintf_internal_r+0x1c70>
    1b74:	dd402783 	ldbu	r21,158(sp)
    1b78:	008011c4 	movi	r2,71
    1b7c:	1404440e 	bge	r2,r16,2c90 <___svfprintf_internal_r+0x19d4>
    1b80:	00c000b4 	movhi	r3,2
    1b84:	18c20204 	addi	r3,r3,2056
    1b88:	d8c03115 	stw	r3,196(sp)
    1b8c:	02c000c4 	movi	r11,3
    1b90:	00bfdfc4 	movi	r2,-129
    1b94:	dac02a15 	stw	r11,168(sp)
    1b98:	88a2703a 	and	r17,r17,r2
    1b9c:	dcc02d15 	stw	r19,180(sp)
    1ba0:	5825883a 	mov	r18,r11
    1ba4:	d8003215 	stw	zero,200(sp)
    1ba8:	d8003415 	stw	zero,208(sp)
    1bac:	003eef06 	br	176c <__alt_mem_Flash_flash_data+0xf400176c>
    1bb0:	8c400214 	ori	r17,r17,8
    1bb4:	1805883a 	mov	r2,r3
    1bb8:	1c000007 	ldb	r16,0(r3)
    1bbc:	003e1506 	br	1414 <__alt_mem_Flash_flash_data+0xf4001414>
    1bc0:	8c400414 	ori	r17,r17,16
    1bc4:	d8c02915 	stw	r3,164(sp)
    1bc8:	88c0080c 	andi	r3,r17,32
    1bcc:	d8802d17 	ldw	r2,180(sp)
    1bd0:	18005526 	beq	r3,zero,1d28 <___svfprintf_internal_r+0xa6c>
    1bd4:	dac02d17 	ldw	r11,180(sp)
    1bd8:	14c00017 	ldw	r19,0(r2)
    1bdc:	17000117 	ldw	fp,4(r2)
    1be0:	5ac00204 	addi	r11,r11,8
    1be4:	dac02d15 	stw	r11,180(sp)
    1be8:	00800044 	movi	r2,1
    1bec:	9f06b03a 	or	r3,r19,fp
    1bf0:	d8002785 	stb	zero,158(sp)
    1bf4:	da403215 	stw	r9,200(sp)
    1bf8:	002b883a 	mov	r21,zero
    1bfc:	003eb406 	br	16d0 <__alt_mem_Flash_flash_data+0xf40016d0>
    1c00:	030000b4 	movhi	r12,2
    1c04:	63020504 	addi	r12,r12,2068
    1c08:	d8c02915 	stw	r3,164(sp)
    1c0c:	d9802785 	stb	r6,158(sp)
    1c10:	db003b15 	stw	r12,236(sp)
    1c14:	88c0080c 	andi	r3,r17,32
    1c18:	d8802d17 	ldw	r2,180(sp)
    1c1c:	18005626 	beq	r3,zero,1d78 <___svfprintf_internal_r+0xabc>
    1c20:	dac02d17 	ldw	r11,180(sp)
    1c24:	14c00017 	ldw	r19,0(r2)
    1c28:	17000117 	ldw	fp,4(r2)
    1c2c:	5ac00204 	addi	r11,r11,8
    1c30:	dac02d15 	stw	r11,180(sp)
    1c34:	8880004c 	andi	r2,r17,1
    1c38:	10029326 	beq	r2,zero,2688 <___svfprintf_internal_r+0x13cc>
    1c3c:	9f06b03a 	or	r3,r19,fp
    1c40:	18033526 	beq	r3,zero,2918 <___svfprintf_internal_r+0x165c>
    1c44:	00800c04 	movi	r2,48
    1c48:	d8802705 	stb	r2,156(sp)
    1c4c:	dc002745 	stb	r16,157(sp)
    1c50:	8c400094 	ori	r17,r17,2
    1c54:	00800084 	movi	r2,2
    1c58:	003fe506 	br	1bf0 <__alt_mem_Flash_flash_data+0xf4001bf0>
    1c5c:	1805883a 	mov	r2,r3
    1c60:	d8002e15 	stw	zero,184(sp)
    1c64:	82fff404 	addi	r11,r16,-48
    1c68:	0019883a 	mov	r12,zero
    1c6c:	14000007 	ldb	r16,0(r2)
    1c70:	630002a4 	muli	r12,r12,10
    1c74:	18c00044 	addi	r3,r3,1
    1c78:	1805883a 	mov	r2,r3
    1c7c:	62d9883a 	add	r12,r12,r11
    1c80:	82fff404 	addi	r11,r16,-48
    1c84:	2afff92e 	bgeu	r5,r11,1c6c <__alt_mem_Flash_flash_data+0xf4001c6c>
    1c88:	db002e15 	stw	r12,184(sp)
    1c8c:	003de206 	br	1418 <__alt_mem_Flash_flash_data+0xf4001418>
    1c90:	8c400814 	ori	r17,r17,32
    1c94:	1805883a 	mov	r2,r3
    1c98:	1c000007 	ldb	r16,0(r3)
    1c9c:	003ddd06 	br	1414 <__alt_mem_Flash_flash_data+0xf4001414>
    1ca0:	dac02d17 	ldw	r11,180(sp)
    1ca4:	db002d17 	ldw	r12,180(sp)
    1ca8:	d8c02915 	stw	r3,164(sp)
    1cac:	5ac00017 	ldw	r11,0(r11)
    1cb0:	d8002785 	stb	zero,158(sp)
    1cb4:	64c00104 	addi	r19,r12,4
    1cb8:	dac03115 	stw	r11,196(sp)
    1cbc:	58048126 	beq	r11,zero,2ec4 <___svfprintf_internal_r+0x1c08>
    1cc0:	d9003117 	ldw	r4,196(sp)
    1cc4:	48041716 	blt	r9,zero,2d24 <___svfprintf_internal_r+0x1a68>
    1cc8:	480d883a 	mov	r6,r9
    1ccc:	000b883a 	mov	r5,zero
    1cd0:	da004015 	stw	r8,256(sp)
    1cd4:	da403f15 	stw	r9,252(sp)
    1cd8:	00080200 	call	8020 <memchr>
    1cdc:	da004017 	ldw	r8,256(sp)
    1ce0:	da403f17 	ldw	r9,252(sp)
    1ce4:	1004db26 	beq	r2,zero,3054 <___svfprintf_internal_r+0x1d98>
    1ce8:	d8c03117 	ldw	r3,196(sp)
    1cec:	10e5c83a 	sub	r18,r2,r3
    1cf0:	4c80010e 	bge	r9,r18,1cf8 <___svfprintf_internal_r+0xa3c>
    1cf4:	4825883a 	mov	r18,r9
    1cf8:	9005883a 	mov	r2,r18
    1cfc:	90040e16 	blt	r18,zero,2d38 <___svfprintf_internal_r+0x1a7c>
    1d00:	dd402783 	ldbu	r21,158(sp)
    1d04:	d8802a15 	stw	r2,168(sp)
    1d08:	dcc02d15 	stw	r19,180(sp)
    1d0c:	d8003215 	stw	zero,200(sp)
    1d10:	d8003415 	stw	zero,208(sp)
    1d14:	003e9506 	br	176c <__alt_mem_Flash_flash_data+0xf400176c>
    1d18:	d8c02915 	stw	r3,164(sp)
    1d1c:	88c0080c 	andi	r3,r17,32
    1d20:	d8802d17 	ldw	r2,180(sp)
    1d24:	183fab1e 	bne	r3,zero,1bd4 <__alt_mem_Flash_flash_data+0xf4001bd4>
    1d28:	88c0040c 	andi	r3,r17,16
    1d2c:	1802681e 	bne	r3,zero,26d0 <___svfprintf_internal_r+0x1414>
    1d30:	88c0100c 	andi	r3,r17,64
    1d34:	18026626 	beq	r3,zero,26d0 <___svfprintf_internal_r+0x1414>
    1d38:	dac02d17 	ldw	r11,180(sp)
    1d3c:	14c0000b 	ldhu	r19,0(r2)
    1d40:	0039883a 	mov	fp,zero
    1d44:	5ac00104 	addi	r11,r11,4
    1d48:	dac02d15 	stw	r11,180(sp)
    1d4c:	00800044 	movi	r2,1
    1d50:	9807883a 	mov	r3,r19
    1d54:	003fa606 	br	1bf0 <__alt_mem_Flash_flash_data+0xf4001bf0>
    1d58:	008000b4 	movhi	r2,2
    1d5c:	10820a04 	addi	r2,r2,2088
    1d60:	d8c02915 	stw	r3,164(sp)
    1d64:	d8803b15 	stw	r2,236(sp)
    1d68:	d9802785 	stb	r6,158(sp)
    1d6c:	88c0080c 	andi	r3,r17,32
    1d70:	d8802d17 	ldw	r2,180(sp)
    1d74:	183faa1e 	bne	r3,zero,1c20 <__alt_mem_Flash_flash_data+0xf4001c20>
    1d78:	88c0040c 	andi	r3,r17,16
    1d7c:	1802e826 	beq	r3,zero,2920 <___svfprintf_internal_r+0x1664>
    1d80:	db002d17 	ldw	r12,180(sp)
    1d84:	14c00017 	ldw	r19,0(r2)
    1d88:	0039883a 	mov	fp,zero
    1d8c:	63000104 	addi	r12,r12,4
    1d90:	db002d15 	stw	r12,180(sp)
    1d94:	003fa706 	br	1c34 <__alt_mem_Flash_flash_data+0xf4001c34>
    1d98:	30803fcc 	andi	r2,r6,255
    1d9c:	1080201c 	xori	r2,r2,128
    1da0:	10bfe004 	addi	r2,r2,-128
    1da4:	1002d91e 	bne	r2,zero,290c <___svfprintf_internal_r+0x1650>
    1da8:	1805883a 	mov	r2,r3
    1dac:	01800804 	movi	r6,32
    1db0:	1c000007 	ldb	r16,0(r3)
    1db4:	003d9706 	br	1414 <__alt_mem_Flash_flash_data+0xf4001414>
    1db8:	8c400054 	ori	r17,r17,1
    1dbc:	1805883a 	mov	r2,r3
    1dc0:	1c000007 	ldb	r16,0(r3)
    1dc4:	003d9306 	br	1414 <__alt_mem_Flash_flash_data+0xf4001414>
    1dc8:	dac02d17 	ldw	r11,180(sp)
    1dcc:	db002d17 	ldw	r12,180(sp)
    1dd0:	5ac00017 	ldw	r11,0(r11)
    1dd4:	dac02e15 	stw	r11,184(sp)
    1dd8:	62c00104 	addi	r11,r12,4
    1ddc:	db002e17 	ldw	r12,184(sp)
    1de0:	60033e16 	blt	r12,zero,2adc <___svfprintf_internal_r+0x1820>
    1de4:	dac02d15 	stw	r11,180(sp)
    1de8:	1805883a 	mov	r2,r3
    1dec:	1c000007 	ldb	r16,0(r3)
    1df0:	003d8806 	br	1414 <__alt_mem_Flash_flash_data+0xf4001414>
    1df4:	1805883a 	mov	r2,r3
    1df8:	01800ac4 	movi	r6,43
    1dfc:	1c000007 	ldb	r16,0(r3)
    1e00:	003d8406 	br	1414 <__alt_mem_Flash_flash_data+0xf4001414>
    1e04:	8c401014 	ori	r17,r17,64
    1e08:	1805883a 	mov	r2,r3
    1e0c:	1c000007 	ldb	r16,0(r3)
    1e10:	003d8006 	br	1414 <__alt_mem_Flash_flash_data+0xf4001414>
    1e14:	1c000007 	ldb	r16,0(r3)
    1e18:	81c33626 	beq	r16,r7,2af4 <___svfprintf_internal_r+0x1838>
    1e1c:	8c400414 	ori	r17,r17,16
    1e20:	1805883a 	mov	r2,r3
    1e24:	003d7b06 	br	1414 <__alt_mem_Flash_flash_data+0xf4001414>
    1e28:	d8c02915 	stw	r3,164(sp)
    1e2c:	d9802785 	stb	r6,158(sp)
    1e30:	8880080c 	andi	r2,r17,32
    1e34:	1002c226 	beq	r2,zero,2940 <___svfprintf_internal_r+0x1684>
    1e38:	db002d17 	ldw	r12,180(sp)
    1e3c:	dac03017 	ldw	r11,192(sp)
    1e40:	60800017 	ldw	r2,0(r12)
    1e44:	5807d7fa 	srai	r3,r11,31
    1e48:	63000104 	addi	r12,r12,4
    1e4c:	db002d15 	stw	r12,180(sp)
    1e50:	12c00015 	stw	r11,0(r2)
    1e54:	10c00115 	stw	r3,4(r2)
    1e58:	003d4406 	br	136c <__alt_mem_Flash_flash_data+0xf400136c>
    1e5c:	db002d17 	ldw	r12,180(sp)
    1e60:	00800c04 	movi	r2,48
    1e64:	d8802705 	stb	r2,156(sp)
    1e68:	64c00017 	ldw	r19,0(r12)
    1e6c:	00801e04 	movi	r2,120
    1e70:	d8802745 	stb	r2,157(sp)
    1e74:	008000b4 	movhi	r2,2
    1e78:	10820a04 	addi	r2,r2,2088
    1e7c:	63000104 	addi	r12,r12,4
    1e80:	d8c02915 	stw	r3,164(sp)
    1e84:	d8803b15 	stw	r2,236(sp)
    1e88:	0039883a 	mov	fp,zero
    1e8c:	8c400094 	ori	r17,r17,2
    1e90:	db002d15 	stw	r12,180(sp)
    1e94:	00800084 	movi	r2,2
    1e98:	04001e04 	movi	r16,120
    1e9c:	9807883a 	mov	r3,r19
    1ea0:	003f5306 	br	1bf0 <__alt_mem_Flash_flash_data+0xf4001bf0>
    1ea4:	db002d17 	ldw	r12,180(sp)
    1ea8:	d8c02915 	stw	r3,164(sp)
    1eac:	dac01404 	addi	r11,sp,80
    1eb0:	60800017 	ldw	r2,0(r12)
    1eb4:	00c00044 	movi	r3,1
    1eb8:	63000104 	addi	r12,r12,4
    1ebc:	d8801405 	stb	r2,80(sp)
    1ec0:	d8c02a15 	stw	r3,168(sp)
    1ec4:	d8002785 	stb	zero,158(sp)
    1ec8:	db002d15 	stw	r12,180(sp)
    1ecc:	1825883a 	mov	r18,r3
    1ed0:	d8003215 	stw	zero,200(sp)
    1ed4:	d8003415 	stw	zero,208(sp)
    1ed8:	dac03115 	stw	r11,196(sp)
    1edc:	0005883a 	mov	r2,zero
    1ee0:	003e2906 	br	1788 <__alt_mem_Flash_flash_data+0xf4001788>
    1ee4:	d8c02915 	stw	r3,164(sp)
    1ee8:	d9802785 	stb	r6,158(sp)
    1eec:	8880080c 	andi	r2,r17,32
    1ef0:	d8c02d17 	ldw	r3,180(sp)
    1ef4:	103deb1e 	bne	r2,zero,16a4 <__alt_mem_Flash_flash_data+0xf40016a4>
    1ef8:	8880040c 	andi	r2,r17,16
    1efc:	1001e51e 	bne	r2,zero,2694 <___svfprintf_internal_r+0x13d8>
    1f00:	8880100c 	andi	r2,r17,64
    1f04:	1001e326 	beq	r2,zero,2694 <___svfprintf_internal_r+0x13d8>
    1f08:	1cc0000f 	ldh	r19,0(r3)
    1f0c:	db002d17 	ldw	r12,180(sp)
    1f10:	9839d7fa 	srai	fp,r19,31
    1f14:	63000104 	addi	r12,r12,4
    1f18:	db002d15 	stw	r12,180(sp)
    1f1c:	e005883a 	mov	r2,fp
    1f20:	103de70e 	bge	r2,zero,16c0 <__alt_mem_Flash_flash_data+0xf40016c0>
    1f24:	04e7c83a 	sub	r19,zero,r19
    1f28:	9804c03a 	cmpne	r2,r19,zero
    1f2c:	0739c83a 	sub	fp,zero,fp
    1f30:	e0b9c83a 	sub	fp,fp,r2
    1f34:	05400b44 	movi	r21,45
    1f38:	dd402785 	stb	r21,158(sp)
    1f3c:	da403215 	stw	r9,200(sp)
    1f40:	00800044 	movi	r2,1
    1f44:	9f06b03a 	or	r3,r19,fp
    1f48:	003de106 	br	16d0 <__alt_mem_Flash_flash_data+0xf40016d0>
    1f4c:	8c400414 	ori	r17,r17,16
    1f50:	d8c02915 	stw	r3,164(sp)
    1f54:	8880080c 	andi	r2,r17,32
    1f58:	10000b26 	beq	r2,zero,1f88 <___svfprintf_internal_r+0xccc>
    1f5c:	db002d17 	ldw	r12,180(sp)
    1f60:	0005883a 	mov	r2,zero
    1f64:	64c00017 	ldw	r19,0(r12)
    1f68:	67000117 	ldw	fp,4(r12)
    1f6c:	63000204 	addi	r12,r12,8
    1f70:	db002d15 	stw	r12,180(sp)
    1f74:	9f06b03a 	or	r3,r19,fp
    1f78:	003f1d06 	br	1bf0 <__alt_mem_Flash_flash_data+0xf4001bf0>
    1f7c:	d8c02915 	stw	r3,164(sp)
    1f80:	8880080c 	andi	r2,r17,32
    1f84:	103ff51e 	bne	r2,zero,1f5c <__alt_mem_Flash_flash_data+0xf4001f5c>
    1f88:	8880040c 	andi	r2,r17,16
    1f8c:	1001c81e 	bne	r2,zero,26b0 <___svfprintf_internal_r+0x13f4>
    1f90:	8880100c 	andi	r2,r17,64
    1f94:	1001c626 	beq	r2,zero,26b0 <___svfprintf_internal_r+0x13f4>
    1f98:	db002d17 	ldw	r12,180(sp)
    1f9c:	0039883a 	mov	fp,zero
    1fa0:	0005883a 	mov	r2,zero
    1fa4:	64c0000b 	ldhu	r19,0(r12)
    1fa8:	63000104 	addi	r12,r12,4
    1fac:	db002d15 	stw	r12,180(sp)
    1fb0:	9807883a 	mov	r3,r19
    1fb4:	003f0e06 	br	1bf0 <__alt_mem_Flash_flash_data+0xf4001bf0>
    1fb8:	d8c02915 	stw	r3,164(sp)
    1fbc:	d9802785 	stb	r6,158(sp)
    1fc0:	803d8026 	beq	r16,zero,15c4 <__alt_mem_Flash_flash_data+0xf40015c4>
    1fc4:	02c00044 	movi	r11,1
    1fc8:	db001404 	addi	r12,sp,80
    1fcc:	dac02a15 	stw	r11,168(sp)
    1fd0:	dc001405 	stb	r16,80(sp)
    1fd4:	d8002785 	stb	zero,158(sp)
    1fd8:	5825883a 	mov	r18,r11
    1fdc:	d8003215 	stw	zero,200(sp)
    1fe0:	d8003415 	stw	zero,208(sp)
    1fe4:	db003115 	stw	r12,196(sp)
    1fe8:	0005883a 	mov	r2,zero
    1fec:	003de606 	br	1788 <__alt_mem_Flash_flash_data+0xf4001788>
    1ff0:	d8c02017 	ldw	r3,128(sp)
    1ff4:	003e2706 	br	1894 <__alt_mem_Flash_flash_data+0xf4001894>
    1ff8:	10803fcc 	andi	r2,r2,255
    1ffc:	00c00044 	movi	r3,1
    2000:	10fdbb1e 	bne	r2,r3,16f0 <__alt_mem_Flash_flash_data+0xf40016f0>
    2004:	e000021e 	bne	fp,zero,2010 <___svfprintf_internal_r+0xd54>
    2008:	00800244 	movi	r2,9
    200c:	14c01f2e 	bgeu	r2,r19,208c <___svfprintf_internal_r+0xdd0>
    2010:	dc002a15 	stw	r16,168(sp)
    2014:	dc402b15 	stw	r17,172(sp)
    2018:	9821883a 	mov	r16,r19
    201c:	e023883a 	mov	r17,fp
    2020:	b025883a 	mov	r18,r22
    2024:	4827883a 	mov	r19,r9
    2028:	4039883a 	mov	fp,r8
    202c:	8009883a 	mov	r4,r16
    2030:	880b883a 	mov	r5,r17
    2034:	01800284 	movi	r6,10
    2038:	000f883a 	mov	r7,zero
    203c:	000d19c0 	call	d19c <__umoddi3>
    2040:	10800c04 	addi	r2,r2,48
    2044:	94bfffc4 	addi	r18,r18,-1
    2048:	8009883a 	mov	r4,r16
    204c:	880b883a 	mov	r5,r17
    2050:	01800284 	movi	r6,10
    2054:	000f883a 	mov	r7,zero
    2058:	90800005 	stb	r2,0(r18)
    205c:	000cbdc0 	call	cbdc <__udivdi3>
    2060:	1021883a 	mov	r16,r2
    2064:	10c4b03a 	or	r2,r2,r3
    2068:	1823883a 	mov	r17,r3
    206c:	103fef1e 	bne	r2,zero,202c <__alt_mem_Flash_flash_data+0xf400202c>
    2070:	dc803115 	stw	r18,196(sp)
    2074:	dc002a17 	ldw	r16,168(sp)
    2078:	dc402b17 	ldw	r17,172(sp)
    207c:	9813883a 	mov	r9,r19
    2080:	e011883a 	mov	r8,fp
    2084:	b4a5c83a 	sub	r18,r22,r18
    2088:	003db306 	br	1758 <__alt_mem_Flash_flash_data+0xf4001758>
    208c:	9cc00c04 	addi	r19,r19,48
    2090:	db001dc4 	addi	r12,sp,119
    2094:	dcc01dc5 	stb	r19,119(sp)
    2098:	dc803d17 	ldw	r18,244(sp)
    209c:	db003115 	stw	r12,196(sp)
    20a0:	003dad06 	br	1758 <__alt_mem_Flash_flash_data+0xf4001758>
    20a4:	00801944 	movi	r2,101
    20a8:	14008d0e 	bge	r2,r16,22e0 <___svfprintf_internal_r+0x1024>
    20ac:	d9003717 	ldw	r4,220(sp)
    20b0:	d9403817 	ldw	r5,224(sp)
    20b4:	000d883a 	mov	r6,zero
    20b8:	000f883a 	mov	r7,zero
    20bc:	d8c03e15 	stw	r3,248(sp)
    20c0:	da004015 	stw	r8,256(sp)
    20c4:	000e9c00 	call	e9c0 <__eqdf2>
    20c8:	d8c03e17 	ldw	r3,248(sp)
    20cc:	da004017 	ldw	r8,256(sp)
    20d0:	1000fd1e 	bne	r2,zero,24c8 <___svfprintf_internal_r+0x120c>
    20d4:	d8801f17 	ldw	r2,124(sp)
    20d8:	010000b4 	movhi	r4,2
    20dc:	21021104 	addi	r4,r4,2116
    20e0:	18c00044 	addi	r3,r3,1
    20e4:	10800044 	addi	r2,r2,1
    20e8:	41000015 	stw	r4,0(r8)
    20ec:	01000044 	movi	r4,1
    20f0:	41000115 	stw	r4,4(r8)
    20f4:	d8c02015 	stw	r3,128(sp)
    20f8:	d8801f15 	stw	r2,124(sp)
    20fc:	010001c4 	movi	r4,7
    2100:	20823316 	blt	r4,r2,29d0 <___svfprintf_internal_r+0x1714>
    2104:	42000204 	addi	r8,r8,8
    2108:	d8802617 	ldw	r2,152(sp)
    210c:	dac03317 	ldw	r11,204(sp)
    2110:	12c00216 	blt	r2,r11,211c <___svfprintf_internal_r+0xe60>
    2114:	8880004c 	andi	r2,r17,1
    2118:	103e3d26 	beq	r2,zero,1a10 <__alt_mem_Flash_flash_data+0xf4001a10>
    211c:	db003917 	ldw	r12,228(sp)
    2120:	d8801f17 	ldw	r2,124(sp)
    2124:	dac03517 	ldw	r11,212(sp)
    2128:	1b07883a 	add	r3,r3,r12
    212c:	10800044 	addi	r2,r2,1
    2130:	42c00015 	stw	r11,0(r8)
    2134:	43000115 	stw	r12,4(r8)
    2138:	d8c02015 	stw	r3,128(sp)
    213c:	d8801f15 	stw	r2,124(sp)
    2140:	010001c4 	movi	r4,7
    2144:	20826f16 	blt	r4,r2,2b04 <___svfprintf_internal_r+0x1848>
    2148:	42000204 	addi	r8,r8,8
    214c:	db003317 	ldw	r12,204(sp)
    2150:	643fffc4 	addi	r16,r12,-1
    2154:	043e2e0e 	bge	zero,r16,1a10 <__alt_mem_Flash_flash_data+0xf4001a10>
    2158:	04800404 	movi	r18,16
    215c:	d8801f17 	ldw	r2,124(sp)
    2160:	9400a00e 	bge	r18,r16,23e4 <___svfprintf_internal_r+0x1128>
    2164:	014000b4 	movhi	r5,2
    2168:	29421184 	addi	r5,r5,2118
    216c:	d9402b15 	stw	r5,172(sp)
    2170:	054001c4 	movi	r21,7
    2174:	dcc02f17 	ldw	r19,188(sp)
    2178:	00000306 	br	2188 <___svfprintf_internal_r+0xecc>
    217c:	42000204 	addi	r8,r8,8
    2180:	843ffc04 	addi	r16,r16,-16
    2184:	94009a0e 	bge	r18,r16,23f0 <___svfprintf_internal_r+0x1134>
    2188:	18c00404 	addi	r3,r3,16
    218c:	10800044 	addi	r2,r2,1
    2190:	45000015 	stw	r20,0(r8)
    2194:	44800115 	stw	r18,4(r8)
    2198:	d8c02015 	stw	r3,128(sp)
    219c:	d8801f15 	stw	r2,124(sp)
    21a0:	a8bff60e 	bge	r21,r2,217c <__alt_mem_Flash_flash_data+0xf400217c>
    21a4:	9809883a 	mov	r4,r19
    21a8:	b80b883a 	mov	r5,r23
    21ac:	b00d883a 	mov	r6,r22
    21b0:	0009c1c0 	call	9c1c <__ssprint_r>
    21b4:	103d091e 	bne	r2,zero,15dc <__alt_mem_Flash_flash_data+0xf40015dc>
    21b8:	d8c02017 	ldw	r3,128(sp)
    21bc:	d8801f17 	ldw	r2,124(sp)
    21c0:	da000404 	addi	r8,sp,16
    21c4:	003fee06 	br	2180 <__alt_mem_Flash_flash_data+0xf4002180>
    21c8:	dac02e17 	ldw	r11,184(sp)
    21cc:	db002a17 	ldw	r12,168(sp)
    21d0:	5b2bc83a 	sub	r21,r11,r12
    21d4:	057dcd0e 	bge	zero,r21,190c <__alt_mem_Flash_flash_data+0xf400190c>
    21d8:	07000404 	movi	fp,16
    21dc:	d8801f17 	ldw	r2,124(sp)
    21e0:	e5435d0e 	bge	fp,r21,2f58 <___svfprintf_internal_r+0x1c9c>
    21e4:	014000b4 	movhi	r5,2
    21e8:	a809883a 	mov	r4,r21
    21ec:	29421184 	addi	r5,r5,2118
    21f0:	dc002c15 	stw	r16,176(sp)
    21f4:	902b883a 	mov	r21,r18
    21f8:	d9402b15 	stw	r5,172(sp)
    21fc:	8825883a 	mov	r18,r17
    2200:	04c001c4 	movi	r19,7
    2204:	dc002f17 	ldw	r16,188(sp)
    2208:	2023883a 	mov	r17,r4
    220c:	00000306 	br	221c <___svfprintf_internal_r+0xf60>
    2210:	8c7ffc04 	addi	r17,r17,-16
    2214:	42000204 	addi	r8,r8,8
    2218:	e440110e 	bge	fp,r17,2260 <___svfprintf_internal_r+0xfa4>
    221c:	18c00404 	addi	r3,r3,16
    2220:	10800044 	addi	r2,r2,1
    2224:	45000015 	stw	r20,0(r8)
    2228:	47000115 	stw	fp,4(r8)
    222c:	d8c02015 	stw	r3,128(sp)
    2230:	d8801f15 	stw	r2,124(sp)
    2234:	98bff60e 	bge	r19,r2,2210 <__alt_mem_Flash_flash_data+0xf4002210>
    2238:	8009883a 	mov	r4,r16
    223c:	b80b883a 	mov	r5,r23
    2240:	b00d883a 	mov	r6,r22
    2244:	0009c1c0 	call	9c1c <__ssprint_r>
    2248:	103ce41e 	bne	r2,zero,15dc <__alt_mem_Flash_flash_data+0xf40015dc>
    224c:	8c7ffc04 	addi	r17,r17,-16
    2250:	d8c02017 	ldw	r3,128(sp)
    2254:	d8801f17 	ldw	r2,124(sp)
    2258:	da000404 	addi	r8,sp,16
    225c:	e47fef16 	blt	fp,r17,221c <__alt_mem_Flash_flash_data+0xf400221c>
    2260:	dc002c17 	ldw	r16,176(sp)
    2264:	8809883a 	mov	r4,r17
    2268:	9023883a 	mov	r17,r18
    226c:	a825883a 	mov	r18,r21
    2270:	202b883a 	mov	r21,r4
    2274:	dac02b17 	ldw	r11,172(sp)
    2278:	1d47883a 	add	r3,r3,r21
    227c:	10800044 	addi	r2,r2,1
    2280:	42c00015 	stw	r11,0(r8)
    2284:	45400115 	stw	r21,4(r8)
    2288:	d8c02015 	stw	r3,128(sp)
    228c:	d8801f15 	stw	r2,124(sp)
    2290:	010001c4 	movi	r4,7
    2294:	20818016 	blt	r4,r2,2898 <___svfprintf_internal_r+0x15dc>
    2298:	42000204 	addi	r8,r8,8
    229c:	003d9b06 	br	190c <__alt_mem_Flash_flash_data+0xf400190c>
    22a0:	d9403b17 	ldw	r5,236(sp)
    22a4:	b007883a 	mov	r3,r22
    22a8:	988003cc 	andi	r2,r19,15
    22ac:	e008973a 	slli	r4,fp,28
    22b0:	2885883a 	add	r2,r5,r2
    22b4:	9826d13a 	srli	r19,r19,4
    22b8:	10800003 	ldbu	r2,0(r2)
    22bc:	e038d13a 	srli	fp,fp,4
    22c0:	18ffffc4 	addi	r3,r3,-1
    22c4:	24e6b03a 	or	r19,r4,r19
    22c8:	18800005 	stb	r2,0(r3)
    22cc:	9f04b03a 	or	r2,r19,fp
    22d0:	103ff51e 	bne	r2,zero,22a8 <__alt_mem_Flash_flash_data+0xf40022a8>
    22d4:	d8c03115 	stw	r3,196(sp)
    22d8:	b0e5c83a 	sub	r18,r22,r3
    22dc:	003d1e06 	br	1758 <__alt_mem_Flash_flash_data+0xf4001758>
    22e0:	db003317 	ldw	r12,204(sp)
    22e4:	00800044 	movi	r2,1
    22e8:	18c00044 	addi	r3,r3,1
    22ec:	13014b0e 	bge	r2,r12,281c <___svfprintf_internal_r+0x1560>
    22f0:	dc001f17 	ldw	r16,124(sp)
    22f4:	dac03117 	ldw	r11,196(sp)
    22f8:	00800044 	movi	r2,1
    22fc:	84000044 	addi	r16,r16,1
    2300:	40800115 	stw	r2,4(r8)
    2304:	42c00015 	stw	r11,0(r8)
    2308:	d8c02015 	stw	r3,128(sp)
    230c:	dc001f15 	stw	r16,124(sp)
    2310:	008001c4 	movi	r2,7
    2314:	14014e16 	blt	r2,r16,2850 <___svfprintf_internal_r+0x1594>
    2318:	42000204 	addi	r8,r8,8
    231c:	db003917 	ldw	r12,228(sp)
    2320:	dac03517 	ldw	r11,212(sp)
    2324:	84000044 	addi	r16,r16,1
    2328:	1b07883a 	add	r3,r3,r12
    232c:	42c00015 	stw	r11,0(r8)
    2330:	43000115 	stw	r12,4(r8)
    2334:	d8c02015 	stw	r3,128(sp)
    2338:	dc001f15 	stw	r16,124(sp)
    233c:	008001c4 	movi	r2,7
    2340:	14014c16 	blt	r2,r16,2874 <___svfprintf_internal_r+0x15b8>
    2344:	44800204 	addi	r18,r8,8
    2348:	d9003717 	ldw	r4,220(sp)
    234c:	d9403817 	ldw	r5,224(sp)
    2350:	000d883a 	mov	r6,zero
    2354:	000f883a 	mov	r7,zero
    2358:	d8c03e15 	stw	r3,248(sp)
    235c:	000e9c00 	call	e9c0 <__eqdf2>
    2360:	d8c03e17 	ldw	r3,248(sp)
    2364:	db003317 	ldw	r12,204(sp)
    2368:	10009526 	beq	r2,zero,25c0 <___svfprintf_internal_r+0x1304>
    236c:	dac03117 	ldw	r11,196(sp)
    2370:	60bfffc4 	addi	r2,r12,-1
    2374:	1887883a 	add	r3,r3,r2
    2378:	59000044 	addi	r4,r11,1
    237c:	84000044 	addi	r16,r16,1
    2380:	90800115 	stw	r2,4(r18)
    2384:	91000015 	stw	r4,0(r18)
    2388:	d8c02015 	stw	r3,128(sp)
    238c:	dc001f15 	stw	r16,124(sp)
    2390:	008001c4 	movi	r2,7
    2394:	1400b316 	blt	r2,r16,2664 <___svfprintf_internal_r+0x13a8>
    2398:	94800204 	addi	r18,r18,8
    239c:	dac03a17 	ldw	r11,232(sp)
    23a0:	dd4022c4 	addi	r21,sp,139
    23a4:	84000044 	addi	r16,r16,1
    23a8:	1ac7883a 	add	r3,r3,r11
    23ac:	95400015 	stw	r21,0(r18)
    23b0:	92c00115 	stw	r11,4(r18)
    23b4:	d8c02015 	stw	r3,128(sp)
    23b8:	dc001f15 	stw	r16,124(sp)
    23bc:	008001c4 	movi	r2,7
    23c0:	14001416 	blt	r2,r16,2414 <___svfprintf_internal_r+0x1158>
    23c4:	92000204 	addi	r8,r18,8
    23c8:	003d9106 	br	1a10 <__alt_mem_Flash_flash_data+0xf4001a10>
    23cc:	d9002f17 	ldw	r4,188(sp)
    23d0:	b80b883a 	mov	r5,r23
    23d4:	b00d883a 	mov	r6,r22
    23d8:	0009c1c0 	call	9c1c <__ssprint_r>
    23dc:	103dc826 	beq	r2,zero,1b00 <__alt_mem_Flash_flash_data+0xf4001b00>
    23e0:	003c7e06 	br	15dc <__alt_mem_Flash_flash_data+0xf40015dc>
    23e4:	010000b4 	movhi	r4,2
    23e8:	21021184 	addi	r4,r4,2118
    23ec:	d9002b15 	stw	r4,172(sp)
    23f0:	dac02b17 	ldw	r11,172(sp)
    23f4:	1c07883a 	add	r3,r3,r16
    23f8:	44000115 	stw	r16,4(r8)
    23fc:	42c00015 	stw	r11,0(r8)
    2400:	10800044 	addi	r2,r2,1
    2404:	d8c02015 	stw	r3,128(sp)
    2408:	d8801f15 	stw	r2,124(sp)
    240c:	010001c4 	movi	r4,7
    2410:	20bd7e0e 	bge	r4,r2,1a0c <__alt_mem_Flash_flash_data+0xf4001a0c>
    2414:	d9002f17 	ldw	r4,188(sp)
    2418:	b80b883a 	mov	r5,r23
    241c:	b00d883a 	mov	r6,r22
    2420:	0009c1c0 	call	9c1c <__ssprint_r>
    2424:	103c6d1e 	bne	r2,zero,15dc <__alt_mem_Flash_flash_data+0xf40015dc>
    2428:	d8c02017 	ldw	r3,128(sp)
    242c:	da000404 	addi	r8,sp,16
    2430:	003d7706 	br	1a10 <__alt_mem_Flash_flash_data+0xf4001a10>
    2434:	10803fcc 	andi	r2,r2,255
    2438:	1000201e 	bne	r2,zero,24bc <___svfprintf_internal_r+0x1200>
    243c:	8880004c 	andi	r2,r17,1
    2440:	10001e26 	beq	r2,zero,24bc <___svfprintf_internal_r+0x1200>
    2444:	00800c04 	movi	r2,48
    2448:	d8c01dc4 	addi	r3,sp,119
    244c:	d8801dc5 	stb	r2,119(sp)
    2450:	dc803d17 	ldw	r18,244(sp)
    2454:	d8c03115 	stw	r3,196(sp)
    2458:	003cbf06 	br	1758 <__alt_mem_Flash_flash_data+0xf4001758>
    245c:	d9002f17 	ldw	r4,188(sp)
    2460:	b80b883a 	mov	r5,r23
    2464:	b00d883a 	mov	r6,r22
    2468:	0009c1c0 	call	9c1c <__ssprint_r>
    246c:	103c5b1e 	bne	r2,zero,15dc <__alt_mem_Flash_flash_data+0xf40015dc>
    2470:	d8c02017 	ldw	r3,128(sp)
    2474:	da000404 	addi	r8,sp,16
    2478:	003d5806 	br	19dc <__alt_mem_Flash_flash_data+0xf40019dc>
    247c:	d9002f17 	ldw	r4,188(sp)
    2480:	b80b883a 	mov	r5,r23
    2484:	b00d883a 	mov	r6,r22
    2488:	0009c1c0 	call	9c1c <__ssprint_r>
    248c:	103c531e 	bne	r2,zero,15dc <__alt_mem_Flash_flash_data+0xf40015dc>
    2490:	d8c02017 	ldw	r3,128(sp)
    2494:	da000404 	addi	r8,sp,16
    2498:	003d1906 	br	1900 <__alt_mem_Flash_flash_data+0xf4001900>
    249c:	d9002f17 	ldw	r4,188(sp)
    24a0:	b80b883a 	mov	r5,r23
    24a4:	b00d883a 	mov	r6,r22
    24a8:	0009c1c0 	call	9c1c <__ssprint_r>
    24ac:	103c4b1e 	bne	r2,zero,15dc <__alt_mem_Flash_flash_data+0xf40015dc>
    24b0:	d8c02017 	ldw	r3,128(sp)
    24b4:	da000404 	addi	r8,sp,16
    24b8:	003d0306 	br	18c8 <__alt_mem_Flash_flash_data+0xf40018c8>
    24bc:	0025883a 	mov	r18,zero
    24c0:	dd803115 	stw	r22,196(sp)
    24c4:	003ca406 	br	1758 <__alt_mem_Flash_flash_data+0xf4001758>
    24c8:	dc002617 	ldw	r16,152(sp)
    24cc:	0401480e 	bge	zero,r16,29f0 <___svfprintf_internal_r+0x1734>
    24d0:	db003117 	ldw	r12,196(sp)
    24d4:	dac03317 	ldw	r11,204(sp)
    24d8:	62e1883a 	add	r16,r12,r11
    24dc:	db003417 	ldw	r12,208(sp)
    24e0:	5825883a 	mov	r18,r11
    24e4:	62c0010e 	bge	r12,r11,24ec <___svfprintf_internal_r+0x1230>
    24e8:	6025883a 	mov	r18,r12
    24ec:	04800b0e 	bge	zero,r18,251c <___svfprintf_internal_r+0x1260>
    24f0:	d8801f17 	ldw	r2,124(sp)
    24f4:	dac03117 	ldw	r11,196(sp)
    24f8:	1c87883a 	add	r3,r3,r18
    24fc:	10800044 	addi	r2,r2,1
    2500:	42c00015 	stw	r11,0(r8)
    2504:	44800115 	stw	r18,4(r8)
    2508:	d8c02015 	stw	r3,128(sp)
    250c:	d8801f15 	stw	r2,124(sp)
    2510:	010001c4 	movi	r4,7
    2514:	20823f16 	blt	r4,r2,2e14 <___svfprintf_internal_r+0x1b58>
    2518:	42000204 	addi	r8,r8,8
    251c:	90023b16 	blt	r18,zero,2e0c <___svfprintf_internal_r+0x1b50>
    2520:	db003417 	ldw	r12,208(sp)
    2524:	64a5c83a 	sub	r18,r12,r18
    2528:	0480780e 	bge	zero,r18,270c <___svfprintf_internal_r+0x1450>
    252c:	05400404 	movi	r21,16
    2530:	d8801f17 	ldw	r2,124(sp)
    2534:	ac81140e 	bge	r21,r18,2988 <___svfprintf_internal_r+0x16cc>
    2538:	014000b4 	movhi	r5,2
    253c:	29421184 	addi	r5,r5,2118
    2540:	d9402b15 	stw	r5,172(sp)
    2544:	070001c4 	movi	fp,7
    2548:	dcc02f17 	ldw	r19,188(sp)
    254c:	00000306 	br	255c <___svfprintf_internal_r+0x12a0>
    2550:	42000204 	addi	r8,r8,8
    2554:	94bffc04 	addi	r18,r18,-16
    2558:	ac810e0e 	bge	r21,r18,2994 <___svfprintf_internal_r+0x16d8>
    255c:	18c00404 	addi	r3,r3,16
    2560:	10800044 	addi	r2,r2,1
    2564:	45000015 	stw	r20,0(r8)
    2568:	45400115 	stw	r21,4(r8)
    256c:	d8c02015 	stw	r3,128(sp)
    2570:	d8801f15 	stw	r2,124(sp)
    2574:	e0bff60e 	bge	fp,r2,2550 <__alt_mem_Flash_flash_data+0xf4002550>
    2578:	9809883a 	mov	r4,r19
    257c:	b80b883a 	mov	r5,r23
    2580:	b00d883a 	mov	r6,r22
    2584:	0009c1c0 	call	9c1c <__ssprint_r>
    2588:	103c141e 	bne	r2,zero,15dc <__alt_mem_Flash_flash_data+0xf40015dc>
    258c:	d8c02017 	ldw	r3,128(sp)
    2590:	d8801f17 	ldw	r2,124(sp)
    2594:	da000404 	addi	r8,sp,16
    2598:	003fee06 	br	2554 <__alt_mem_Flash_flash_data+0xf4002554>
    259c:	d9002f17 	ldw	r4,188(sp)
    25a0:	b80b883a 	mov	r5,r23
    25a4:	b00d883a 	mov	r6,r22
    25a8:	0009c1c0 	call	9c1c <__ssprint_r>
    25ac:	103c0b1e 	bne	r2,zero,15dc <__alt_mem_Flash_flash_data+0xf40015dc>
    25b0:	d8c02017 	ldw	r3,128(sp)
    25b4:	d8802787 	ldb	r2,158(sp)
    25b8:	da000404 	addi	r8,sp,16
    25bc:	003cb506 	br	1894 <__alt_mem_Flash_flash_data+0xf4001894>
    25c0:	657fffc4 	addi	r21,r12,-1
    25c4:	057f750e 	bge	zero,r21,239c <__alt_mem_Flash_flash_data+0xf400239c>
    25c8:	07000404 	movi	fp,16
    25cc:	e542ed0e 	bge	fp,r21,3184 <___svfprintf_internal_r+0x1ec8>
    25d0:	010000b4 	movhi	r4,2
    25d4:	21021184 	addi	r4,r4,2118
    25d8:	d9002b15 	stw	r4,172(sp)
    25dc:	01c001c4 	movi	r7,7
    25e0:	dcc02f17 	ldw	r19,188(sp)
    25e4:	00000306 	br	25f4 <___svfprintf_internal_r+0x1338>
    25e8:	ad7ffc04 	addi	r21,r21,-16
    25ec:	94800204 	addi	r18,r18,8
    25f0:	e540130e 	bge	fp,r21,2640 <___svfprintf_internal_r+0x1384>
    25f4:	18c00404 	addi	r3,r3,16
    25f8:	84000044 	addi	r16,r16,1
    25fc:	95000015 	stw	r20,0(r18)
    2600:	97000115 	stw	fp,4(r18)
    2604:	d8c02015 	stw	r3,128(sp)
    2608:	dc001f15 	stw	r16,124(sp)
    260c:	3c3ff60e 	bge	r7,r16,25e8 <__alt_mem_Flash_flash_data+0xf40025e8>
    2610:	9809883a 	mov	r4,r19
    2614:	b80b883a 	mov	r5,r23
    2618:	b00d883a 	mov	r6,r22
    261c:	d9c03e15 	stw	r7,248(sp)
    2620:	0009c1c0 	call	9c1c <__ssprint_r>
    2624:	d9c03e17 	ldw	r7,248(sp)
    2628:	103bec1e 	bne	r2,zero,15dc <__alt_mem_Flash_flash_data+0xf40015dc>
    262c:	ad7ffc04 	addi	r21,r21,-16
    2630:	d8c02017 	ldw	r3,128(sp)
    2634:	dc001f17 	ldw	r16,124(sp)
    2638:	dc800404 	addi	r18,sp,16
    263c:	e57fed16 	blt	fp,r21,25f4 <__alt_mem_Flash_flash_data+0xf40025f4>
    2640:	dac02b17 	ldw	r11,172(sp)
    2644:	1d47883a 	add	r3,r3,r21
    2648:	84000044 	addi	r16,r16,1
    264c:	92c00015 	stw	r11,0(r18)
    2650:	95400115 	stw	r21,4(r18)
    2654:	d8c02015 	stw	r3,128(sp)
    2658:	dc001f15 	stw	r16,124(sp)
    265c:	008001c4 	movi	r2,7
    2660:	143f4d0e 	bge	r2,r16,2398 <__alt_mem_Flash_flash_data+0xf4002398>
    2664:	d9002f17 	ldw	r4,188(sp)
    2668:	b80b883a 	mov	r5,r23
    266c:	b00d883a 	mov	r6,r22
    2670:	0009c1c0 	call	9c1c <__ssprint_r>
    2674:	103bd91e 	bne	r2,zero,15dc <__alt_mem_Flash_flash_data+0xf40015dc>
    2678:	d8c02017 	ldw	r3,128(sp)
    267c:	dc001f17 	ldw	r16,124(sp)
    2680:	dc800404 	addi	r18,sp,16
    2684:	003f4506 	br	239c <__alt_mem_Flash_flash_data+0xf400239c>
    2688:	00800084 	movi	r2,2
    268c:	9f06b03a 	or	r3,r19,fp
    2690:	003d5706 	br	1bf0 <__alt_mem_Flash_flash_data+0xf4001bf0>
    2694:	1cc00017 	ldw	r19,0(r3)
    2698:	dac02d17 	ldw	r11,180(sp)
    269c:	9839d7fa 	srai	fp,r19,31
    26a0:	5ac00104 	addi	r11,r11,4
    26a4:	dac02d15 	stw	r11,180(sp)
    26a8:	e005883a 	mov	r2,fp
    26ac:	003c0306 	br	16bc <__alt_mem_Flash_flash_data+0xf40016bc>
    26b0:	dac02d17 	ldw	r11,180(sp)
    26b4:	0039883a 	mov	fp,zero
    26b8:	0005883a 	mov	r2,zero
    26bc:	5cc00017 	ldw	r19,0(r11)
    26c0:	5ac00104 	addi	r11,r11,4
    26c4:	dac02d15 	stw	r11,180(sp)
    26c8:	9807883a 	mov	r3,r19
    26cc:	003d4806 	br	1bf0 <__alt_mem_Flash_flash_data+0xf4001bf0>
    26d0:	db002d17 	ldw	r12,180(sp)
    26d4:	14c00017 	ldw	r19,0(r2)
    26d8:	0039883a 	mov	fp,zero
    26dc:	63000104 	addi	r12,r12,4
    26e0:	db002d15 	stw	r12,180(sp)
    26e4:	00800044 	movi	r2,1
    26e8:	9807883a 	mov	r3,r19
    26ec:	003d4006 	br	1bf0 <__alt_mem_Flash_flash_data+0xf4001bf0>
    26f0:	d9002f17 	ldw	r4,188(sp)
    26f4:	b80b883a 	mov	r5,r23
    26f8:	b00d883a 	mov	r6,r22
    26fc:	0009c1c0 	call	9c1c <__ssprint_r>
    2700:	103bb61e 	bne	r2,zero,15dc <__alt_mem_Flash_flash_data+0xf40015dc>
    2704:	d8c02017 	ldw	r3,128(sp)
    2708:	da000404 	addi	r8,sp,16
    270c:	db003117 	ldw	r12,196(sp)
    2710:	dac03417 	ldw	r11,208(sp)
    2714:	d8802617 	ldw	r2,152(sp)
    2718:	62e5883a 	add	r18,r12,r11
    271c:	db003317 	ldw	r12,204(sp)
    2720:	13000216 	blt	r2,r12,272c <___svfprintf_internal_r+0x1470>
    2724:	8900004c 	andi	r4,r17,1
    2728:	20000c26 	beq	r4,zero,275c <___svfprintf_internal_r+0x14a0>
    272c:	dac03917 	ldw	r11,228(sp)
    2730:	d9001f17 	ldw	r4,124(sp)
    2734:	db003517 	ldw	r12,212(sp)
    2738:	1ac7883a 	add	r3,r3,r11
    273c:	21000044 	addi	r4,r4,1
    2740:	43000015 	stw	r12,0(r8)
    2744:	42c00115 	stw	r11,4(r8)
    2748:	d8c02015 	stw	r3,128(sp)
    274c:	d9001f15 	stw	r4,124(sp)
    2750:	014001c4 	movi	r5,7
    2754:	2901b716 	blt	r5,r4,2e34 <___svfprintf_internal_r+0x1b78>
    2758:	42000204 	addi	r8,r8,8
    275c:	dac03317 	ldw	r11,204(sp)
    2760:	8489c83a 	sub	r4,r16,r18
    2764:	5885c83a 	sub	r2,r11,r2
    2768:	1021883a 	mov	r16,r2
    276c:	2080010e 	bge	r4,r2,2774 <___svfprintf_internal_r+0x14b8>
    2770:	2021883a 	mov	r16,r4
    2774:	04000a0e 	bge	zero,r16,27a0 <___svfprintf_internal_r+0x14e4>
    2778:	d9001f17 	ldw	r4,124(sp)
    277c:	1c07883a 	add	r3,r3,r16
    2780:	44800015 	stw	r18,0(r8)
    2784:	21000044 	addi	r4,r4,1
    2788:	44000115 	stw	r16,4(r8)
    278c:	d8c02015 	stw	r3,128(sp)
    2790:	d9001f15 	stw	r4,124(sp)
    2794:	014001c4 	movi	r5,7
    2798:	2901bf16 	blt	r5,r4,2e98 <___svfprintf_internal_r+0x1bdc>
    279c:	42000204 	addi	r8,r8,8
    27a0:	8001bb16 	blt	r16,zero,2e90 <___svfprintf_internal_r+0x1bd4>
    27a4:	1421c83a 	sub	r16,r2,r16
    27a8:	043c990e 	bge	zero,r16,1a10 <__alt_mem_Flash_flash_data+0xf4001a10>
    27ac:	04800404 	movi	r18,16
    27b0:	d8801f17 	ldw	r2,124(sp)
    27b4:	943f0b0e 	bge	r18,r16,23e4 <__alt_mem_Flash_flash_data+0xf40023e4>
    27b8:	014000b4 	movhi	r5,2
    27bc:	29421184 	addi	r5,r5,2118
    27c0:	d9402b15 	stw	r5,172(sp)
    27c4:	054001c4 	movi	r21,7
    27c8:	dcc02f17 	ldw	r19,188(sp)
    27cc:	00000306 	br	27dc <___svfprintf_internal_r+0x1520>
    27d0:	42000204 	addi	r8,r8,8
    27d4:	843ffc04 	addi	r16,r16,-16
    27d8:	943f050e 	bge	r18,r16,23f0 <__alt_mem_Flash_flash_data+0xf40023f0>
    27dc:	18c00404 	addi	r3,r3,16
    27e0:	10800044 	addi	r2,r2,1
    27e4:	45000015 	stw	r20,0(r8)
    27e8:	44800115 	stw	r18,4(r8)
    27ec:	d8c02015 	stw	r3,128(sp)
    27f0:	d8801f15 	stw	r2,124(sp)
    27f4:	a8bff60e 	bge	r21,r2,27d0 <__alt_mem_Flash_flash_data+0xf40027d0>
    27f8:	9809883a 	mov	r4,r19
    27fc:	b80b883a 	mov	r5,r23
    2800:	b00d883a 	mov	r6,r22
    2804:	0009c1c0 	call	9c1c <__ssprint_r>
    2808:	103b741e 	bne	r2,zero,15dc <__alt_mem_Flash_flash_data+0xf40015dc>
    280c:	d8c02017 	ldw	r3,128(sp)
    2810:	d8801f17 	ldw	r2,124(sp)
    2814:	da000404 	addi	r8,sp,16
    2818:	003fee06 	br	27d4 <__alt_mem_Flash_flash_data+0xf40027d4>
    281c:	8888703a 	and	r4,r17,r2
    2820:	203eb31e 	bne	r4,zero,22f0 <__alt_mem_Flash_flash_data+0xf40022f0>
    2824:	dc001f17 	ldw	r16,124(sp)
    2828:	db003117 	ldw	r12,196(sp)
    282c:	40800115 	stw	r2,4(r8)
    2830:	84000044 	addi	r16,r16,1
    2834:	43000015 	stw	r12,0(r8)
    2838:	d8c02015 	stw	r3,128(sp)
    283c:	dc001f15 	stw	r16,124(sp)
    2840:	008001c4 	movi	r2,7
    2844:	143f8716 	blt	r2,r16,2664 <__alt_mem_Flash_flash_data+0xf4002664>
    2848:	44800204 	addi	r18,r8,8
    284c:	003ed306 	br	239c <__alt_mem_Flash_flash_data+0xf400239c>
    2850:	d9002f17 	ldw	r4,188(sp)
    2854:	b80b883a 	mov	r5,r23
    2858:	b00d883a 	mov	r6,r22
    285c:	0009c1c0 	call	9c1c <__ssprint_r>
    2860:	103b5e1e 	bne	r2,zero,15dc <__alt_mem_Flash_flash_data+0xf40015dc>
    2864:	d8c02017 	ldw	r3,128(sp)
    2868:	dc001f17 	ldw	r16,124(sp)
    286c:	da000404 	addi	r8,sp,16
    2870:	003eaa06 	br	231c <__alt_mem_Flash_flash_data+0xf400231c>
    2874:	d9002f17 	ldw	r4,188(sp)
    2878:	b80b883a 	mov	r5,r23
    287c:	b00d883a 	mov	r6,r22
    2880:	0009c1c0 	call	9c1c <__ssprint_r>
    2884:	103b551e 	bne	r2,zero,15dc <__alt_mem_Flash_flash_data+0xf40015dc>
    2888:	d8c02017 	ldw	r3,128(sp)
    288c:	dc001f17 	ldw	r16,124(sp)
    2890:	dc800404 	addi	r18,sp,16
    2894:	003eac06 	br	2348 <__alt_mem_Flash_flash_data+0xf4002348>
    2898:	d9002f17 	ldw	r4,188(sp)
    289c:	b80b883a 	mov	r5,r23
    28a0:	b00d883a 	mov	r6,r22
    28a4:	0009c1c0 	call	9c1c <__ssprint_r>
    28a8:	103b4c1e 	bne	r2,zero,15dc <__alt_mem_Flash_flash_data+0xf40015dc>
    28ac:	d8c02017 	ldw	r3,128(sp)
    28b0:	da000404 	addi	r8,sp,16
    28b4:	003c1506 	br	190c <__alt_mem_Flash_flash_data+0xf400190c>
    28b8:	da004015 	stw	r8,256(sp)
    28bc:	da403f15 	stw	r9,252(sp)
    28c0:	00099c80 	call	99c8 <__fpclassifyd>
    28c4:	da004017 	ldw	r8,256(sp)
    28c8:	da403f17 	ldw	r9,252(sp)
    28cc:	1000951e 	bne	r2,zero,2b24 <___svfprintf_internal_r+0x1868>
    28d0:	008011c4 	movi	r2,71
    28d4:	1400fb16 	blt	r2,r16,2cc4 <___svfprintf_internal_r+0x1a08>
    28d8:	030000b4 	movhi	r12,2
    28dc:	63020304 	addi	r12,r12,2060
    28e0:	db003115 	stw	r12,196(sp)
    28e4:	00c000c4 	movi	r3,3
    28e8:	00bfdfc4 	movi	r2,-129
    28ec:	d8c02a15 	stw	r3,168(sp)
    28f0:	88a2703a 	and	r17,r17,r2
    28f4:	dd402783 	ldbu	r21,158(sp)
    28f8:	dcc02d15 	stw	r19,180(sp)
    28fc:	1825883a 	mov	r18,r3
    2900:	d8003215 	stw	zero,200(sp)
    2904:	d8003415 	stw	zero,208(sp)
    2908:	003b9806 	br	176c <__alt_mem_Flash_flash_data+0xf400176c>
    290c:	1c000007 	ldb	r16,0(r3)
    2910:	1805883a 	mov	r2,r3
    2914:	003abf06 	br	1414 <__alt_mem_Flash_flash_data+0xf4001414>
    2918:	00800084 	movi	r2,2
    291c:	003cb406 	br	1bf0 <__alt_mem_Flash_flash_data+0xf4001bf0>
    2920:	88c0100c 	andi	r3,r17,64
    2924:	1800f626 	beq	r3,zero,2d00 <___svfprintf_internal_r+0x1a44>
    2928:	dac02d17 	ldw	r11,180(sp)
    292c:	14c0000b 	ldhu	r19,0(r2)
    2930:	0039883a 	mov	fp,zero
    2934:	5ac00104 	addi	r11,r11,4
    2938:	dac02d15 	stw	r11,180(sp)
    293c:	003cbd06 	br	1c34 <__alt_mem_Flash_flash_data+0xf4001c34>
    2940:	8880040c 	andi	r2,r17,16
    2944:	1000091e 	bne	r2,zero,296c <___svfprintf_internal_r+0x16b0>
    2948:	8c40100c 	andi	r17,r17,64
    294c:	88000726 	beq	r17,zero,296c <___svfprintf_internal_r+0x16b0>
    2950:	db002d17 	ldw	r12,180(sp)
    2954:	dac03017 	ldw	r11,192(sp)
    2958:	60800017 	ldw	r2,0(r12)
    295c:	63000104 	addi	r12,r12,4
    2960:	db002d15 	stw	r12,180(sp)
    2964:	12c0000d 	sth	r11,0(r2)
    2968:	003a8006 	br	136c <__alt_mem_Flash_flash_data+0xf400136c>
    296c:	db002d17 	ldw	r12,180(sp)
    2970:	dac03017 	ldw	r11,192(sp)
    2974:	60800017 	ldw	r2,0(r12)
    2978:	63000104 	addi	r12,r12,4
    297c:	db002d15 	stw	r12,180(sp)
    2980:	12c00015 	stw	r11,0(r2)
    2984:	003a7906 	br	136c <__alt_mem_Flash_flash_data+0xf400136c>
    2988:	010000b4 	movhi	r4,2
    298c:	21021184 	addi	r4,r4,2118
    2990:	d9002b15 	stw	r4,172(sp)
    2994:	dac02b17 	ldw	r11,172(sp)
    2998:	1c87883a 	add	r3,r3,r18
    299c:	10800044 	addi	r2,r2,1
    29a0:	42c00015 	stw	r11,0(r8)
    29a4:	44800115 	stw	r18,4(r8)
    29a8:	d8c02015 	stw	r3,128(sp)
    29ac:	d8801f15 	stw	r2,124(sp)
    29b0:	010001c4 	movi	r4,7
    29b4:	20bf4e16 	blt	r4,r2,26f0 <__alt_mem_Flash_flash_data+0xf40026f0>
    29b8:	42000204 	addi	r8,r8,8
    29bc:	003f5306 	br	270c <__alt_mem_Flash_flash_data+0xf400270c>
    29c0:	010000b4 	movhi	r4,2
    29c4:	21021184 	addi	r4,r4,2118
    29c8:	d9002b15 	stw	r4,172(sp)
    29cc:	003bf906 	br	19b4 <__alt_mem_Flash_flash_data+0xf40019b4>
    29d0:	d9002f17 	ldw	r4,188(sp)
    29d4:	b80b883a 	mov	r5,r23
    29d8:	b00d883a 	mov	r6,r22
    29dc:	0009c1c0 	call	9c1c <__ssprint_r>
    29e0:	103afe1e 	bne	r2,zero,15dc <__alt_mem_Flash_flash_data+0xf40015dc>
    29e4:	d8c02017 	ldw	r3,128(sp)
    29e8:	da000404 	addi	r8,sp,16
    29ec:	003dc606 	br	2108 <__alt_mem_Flash_flash_data+0xf4002108>
    29f0:	d8801f17 	ldw	r2,124(sp)
    29f4:	030000b4 	movhi	r12,2
    29f8:	01000044 	movi	r4,1
    29fc:	18c00044 	addi	r3,r3,1
    2a00:	10800044 	addi	r2,r2,1
    2a04:	63021104 	addi	r12,r12,2116
    2a08:	41000115 	stw	r4,4(r8)
    2a0c:	43000015 	stw	r12,0(r8)
    2a10:	d8c02015 	stw	r3,128(sp)
    2a14:	d8801f15 	stw	r2,124(sp)
    2a18:	010001c4 	movi	r4,7
    2a1c:	2080ad16 	blt	r4,r2,2cd4 <___svfprintf_internal_r+0x1a18>
    2a20:	42000204 	addi	r8,r8,8
    2a24:	8000041e 	bne	r16,zero,2a38 <___svfprintf_internal_r+0x177c>
    2a28:	dac03317 	ldw	r11,204(sp)
    2a2c:	5800021e 	bne	r11,zero,2a38 <___svfprintf_internal_r+0x177c>
    2a30:	8880004c 	andi	r2,r17,1
    2a34:	103bf626 	beq	r2,zero,1a10 <__alt_mem_Flash_flash_data+0xf4001a10>
    2a38:	db003917 	ldw	r12,228(sp)
    2a3c:	d8801f17 	ldw	r2,124(sp)
    2a40:	dac03517 	ldw	r11,212(sp)
    2a44:	1b07883a 	add	r3,r3,r12
    2a48:	10800044 	addi	r2,r2,1
    2a4c:	42c00015 	stw	r11,0(r8)
    2a50:	43000115 	stw	r12,4(r8)
    2a54:	d8c02015 	stw	r3,128(sp)
    2a58:	d8801f15 	stw	r2,124(sp)
    2a5c:	010001c4 	movi	r4,7
    2a60:	20818616 	blt	r4,r2,307c <___svfprintf_internal_r+0x1dc0>
    2a64:	42000204 	addi	r8,r8,8
    2a68:	0421c83a 	sub	r16,zero,r16
    2a6c:	0400bc0e 	bge	zero,r16,2d60 <___svfprintf_internal_r+0x1aa4>
    2a70:	04800404 	movi	r18,16
    2a74:	9400f80e 	bge	r18,r16,2e58 <___svfprintf_internal_r+0x1b9c>
    2a78:	010000b4 	movhi	r4,2
    2a7c:	21021184 	addi	r4,r4,2118
    2a80:	d9002b15 	stw	r4,172(sp)
    2a84:	054001c4 	movi	r21,7
    2a88:	dcc02f17 	ldw	r19,188(sp)
    2a8c:	00000306 	br	2a9c <___svfprintf_internal_r+0x17e0>
    2a90:	42000204 	addi	r8,r8,8
    2a94:	843ffc04 	addi	r16,r16,-16
    2a98:	9400f20e 	bge	r18,r16,2e64 <___svfprintf_internal_r+0x1ba8>
    2a9c:	18c00404 	addi	r3,r3,16
    2aa0:	10800044 	addi	r2,r2,1
    2aa4:	45000015 	stw	r20,0(r8)
    2aa8:	44800115 	stw	r18,4(r8)
    2aac:	d8c02015 	stw	r3,128(sp)
    2ab0:	d8801f15 	stw	r2,124(sp)
    2ab4:	a8bff60e 	bge	r21,r2,2a90 <__alt_mem_Flash_flash_data+0xf4002a90>
    2ab8:	9809883a 	mov	r4,r19
    2abc:	b80b883a 	mov	r5,r23
    2ac0:	b00d883a 	mov	r6,r22
    2ac4:	0009c1c0 	call	9c1c <__ssprint_r>
    2ac8:	103ac41e 	bne	r2,zero,15dc <__alt_mem_Flash_flash_data+0xf40015dc>
    2acc:	d8c02017 	ldw	r3,128(sp)
    2ad0:	d8801f17 	ldw	r2,124(sp)
    2ad4:	da000404 	addi	r8,sp,16
    2ad8:	003fee06 	br	2a94 <__alt_mem_Flash_flash_data+0xf4002a94>
    2adc:	db002e17 	ldw	r12,184(sp)
    2ae0:	1805883a 	mov	r2,r3
    2ae4:	dac02d15 	stw	r11,180(sp)
    2ae8:	0319c83a 	sub	r12,zero,r12
    2aec:	db002e15 	stw	r12,184(sp)
    2af0:	003acf06 	br	1630 <__alt_mem_Flash_flash_data+0xf4001630>
    2af4:	18800044 	addi	r2,r3,1
    2af8:	8c400814 	ori	r17,r17,32
    2afc:	1c000047 	ldb	r16,1(r3)
    2b00:	003a4406 	br	1414 <__alt_mem_Flash_flash_data+0xf4001414>
    2b04:	d9002f17 	ldw	r4,188(sp)
    2b08:	b80b883a 	mov	r5,r23
    2b0c:	b00d883a 	mov	r6,r22
    2b10:	0009c1c0 	call	9c1c <__ssprint_r>
    2b14:	103ab11e 	bne	r2,zero,15dc <__alt_mem_Flash_flash_data+0xf40015dc>
    2b18:	d8c02017 	ldw	r3,128(sp)
    2b1c:	da000404 	addi	r8,sp,16
    2b20:	003d8a06 	br	214c <__alt_mem_Flash_flash_data+0xf400214c>
    2b24:	057ff7c4 	movi	r21,-33
    2b28:	00bfffc4 	movi	r2,-1
    2b2c:	856a703a 	and	r21,r16,r21
    2b30:	48807126 	beq	r9,r2,2cf8 <___svfprintf_internal_r+0x1a3c>
    2b34:	008011c4 	movi	r2,71
    2b38:	a8814d26 	beq	r21,r2,3070 <___svfprintf_internal_r+0x1db4>
    2b3c:	db003817 	ldw	r12,224(sp)
    2b40:	8ac04014 	ori	r11,r17,256
    2b44:	dac02d15 	stw	r11,180(sp)
    2b48:	60015616 	blt	r12,zero,30a4 <___svfprintf_internal_r+0x1de8>
    2b4c:	dc803817 	ldw	r18,224(sp)
    2b50:	d8002a05 	stb	zero,168(sp)
    2b54:	00801984 	movi	r2,102
    2b58:	80808c26 	beq	r16,r2,2d8c <___svfprintf_internal_r+0x1ad0>
    2b5c:	00801184 	movi	r2,70
    2b60:	80808a26 	beq	r16,r2,2d8c <___svfprintf_internal_r+0x1ad0>
    2b64:	00801144 	movi	r2,69
    2b68:	a8815226 	beq	r21,r2,30b4 <___svfprintf_internal_r+0x1df8>
    2b6c:	4839883a 	mov	fp,r9
    2b70:	d8802604 	addi	r2,sp,152
    2b74:	d8800115 	stw	r2,4(sp)
    2b78:	d9002f17 	ldw	r4,188(sp)
    2b7c:	d8802504 	addi	r2,sp,148
    2b80:	d9403717 	ldw	r5,220(sp)
    2b84:	d8800215 	stw	r2,8(sp)
    2b88:	d8802104 	addi	r2,sp,132
    2b8c:	df000015 	stw	fp,0(sp)
    2b90:	d8800315 	stw	r2,12(sp)
    2b94:	900d883a 	mov	r6,r18
    2b98:	01c00084 	movi	r7,2
    2b9c:	da004015 	stw	r8,256(sp)
    2ba0:	da403f15 	stw	r9,252(sp)
    2ba4:	00055d00 	call	55d0 <_dtoa_r>
    2ba8:	d8803115 	stw	r2,196(sp)
    2bac:	008019c4 	movi	r2,103
    2bb0:	da004017 	ldw	r8,256(sp)
    2bb4:	da403f17 	ldw	r9,252(sp)
    2bb8:	80800226 	beq	r16,r2,2bc4 <___svfprintf_internal_r+0x1908>
    2bbc:	008011c4 	movi	r2,71
    2bc0:	8080841e 	bne	r16,r2,2dd4 <___svfprintf_internal_r+0x1b18>
    2bc4:	8880004c 	andi	r2,r17,1
    2bc8:	10014f26 	beq	r2,zero,3108 <___svfprintf_internal_r+0x1e4c>
    2bcc:	db003117 	ldw	r12,196(sp)
    2bd0:	6715883a 	add	r10,r12,fp
    2bd4:	d9003717 	ldw	r4,220(sp)
    2bd8:	900b883a 	mov	r5,r18
    2bdc:	000d883a 	mov	r6,zero
    2be0:	000f883a 	mov	r7,zero
    2be4:	da004015 	stw	r8,256(sp)
    2be8:	da403f15 	stw	r9,252(sp)
    2bec:	da803e15 	stw	r10,248(sp)
    2bf0:	000e9c00 	call	e9c0 <__eqdf2>
    2bf4:	da004017 	ldw	r8,256(sp)
    2bf8:	da403f17 	ldw	r9,252(sp)
    2bfc:	da803e17 	ldw	r10,248(sp)
    2c00:	1000d926 	beq	r2,zero,2f68 <___svfprintf_internal_r+0x1cac>
    2c04:	d8802117 	ldw	r2,132(sp)
    2c08:	1280062e 	bgeu	r2,r10,2c24 <___svfprintf_internal_r+0x1968>
    2c0c:	01000c04 	movi	r4,48
    2c10:	10c00044 	addi	r3,r2,1
    2c14:	d8c02115 	stw	r3,132(sp)
    2c18:	11000005 	stb	r4,0(r2)
    2c1c:	d8802117 	ldw	r2,132(sp)
    2c20:	12bffb36 	bltu	r2,r10,2c10 <__alt_mem_Flash_flash_data+0xf4002c10>
    2c24:	db003117 	ldw	r12,196(sp)
    2c28:	1305c83a 	sub	r2,r2,r12
    2c2c:	d8803315 	stw	r2,204(sp)
    2c30:	008011c4 	movi	r2,71
    2c34:	a880b626 	beq	r21,r2,2f10 <___svfprintf_internal_r+0x1c54>
    2c38:	00801944 	movi	r2,101
    2c3c:	14017c0e 	bge	r2,r16,3230 <___svfprintf_internal_r+0x1f74>
    2c40:	00801984 	movi	r2,102
    2c44:	80812626 	beq	r16,r2,30e0 <___svfprintf_internal_r+0x1e24>
    2c48:	db002617 	ldw	r12,152(sp)
    2c4c:	db003415 	stw	r12,208(sp)
    2c50:	db003417 	ldw	r12,208(sp)
    2c54:	dac03317 	ldw	r11,204(sp)
    2c58:	62c11816 	blt	r12,r11,30bc <___svfprintf_internal_r+0x1e00>
    2c5c:	8c40004c 	andi	r17,r17,1
    2c60:	88013b1e 	bne	r17,zero,3150 <___svfprintf_internal_r+0x1e94>
    2c64:	6005883a 	mov	r2,r12
    2c68:	60012516 	blt	r12,zero,3100 <___svfprintf_internal_r+0x1e44>
    2c6c:	dc803417 	ldw	r18,208(sp)
    2c70:	df002a07 	ldb	fp,168(sp)
    2c74:	e000b01e 	bne	fp,zero,2f38 <___svfprintf_internal_r+0x1c7c>
    2c78:	dc402d17 	ldw	r17,180(sp)
    2c7c:	dd402783 	ldbu	r21,158(sp)
    2c80:	d8802a15 	stw	r2,168(sp)
    2c84:	dcc02d15 	stw	r19,180(sp)
    2c88:	d8003215 	stw	zero,200(sp)
    2c8c:	003ab706 	br	176c <__alt_mem_Flash_flash_data+0xf400176c>
    2c90:	008000b4 	movhi	r2,2
    2c94:	10820104 	addi	r2,r2,2052
    2c98:	d8803115 	stw	r2,196(sp)
    2c9c:	003bbb06 	br	1b8c <__alt_mem_Flash_flash_data+0xf4001b8c>
    2ca0:	d9002f17 	ldw	r4,188(sp)
    2ca4:	04001004 	movi	r16,64
    2ca8:	800b883a 	mov	r5,r16
    2cac:	00007280 	call	728 <_malloc_r>
    2cb0:	b8800015 	stw	r2,0(r23)
    2cb4:	b8800415 	stw	r2,16(r23)
    2cb8:	10015f26 	beq	r2,zero,3238 <___svfprintf_internal_r+0x1f7c>
    2cbc:	bc000515 	stw	r16,20(r23)
    2cc0:	00399806 	br	1324 <__alt_mem_Flash_flash_data+0xf4001324>
    2cc4:	008000b4 	movhi	r2,2
    2cc8:	10820404 	addi	r2,r2,2064
    2ccc:	d8803115 	stw	r2,196(sp)
    2cd0:	003f0406 	br	28e4 <__alt_mem_Flash_flash_data+0xf40028e4>
    2cd4:	d9002f17 	ldw	r4,188(sp)
    2cd8:	b80b883a 	mov	r5,r23
    2cdc:	b00d883a 	mov	r6,r22
    2ce0:	0009c1c0 	call	9c1c <__ssprint_r>
    2ce4:	103a3d1e 	bne	r2,zero,15dc <__alt_mem_Flash_flash_data+0xf40015dc>
    2ce8:	dc002617 	ldw	r16,152(sp)
    2cec:	d8c02017 	ldw	r3,128(sp)
    2cf0:	da000404 	addi	r8,sp,16
    2cf4:	003f4b06 	br	2a24 <__alt_mem_Flash_flash_data+0xf4002a24>
    2cf8:	02400184 	movi	r9,6
    2cfc:	003f8f06 	br	2b3c <__alt_mem_Flash_flash_data+0xf4002b3c>
    2d00:	db002d17 	ldw	r12,180(sp)
    2d04:	14c00017 	ldw	r19,0(r2)
    2d08:	0039883a 	mov	fp,zero
    2d0c:	63000104 	addi	r12,r12,4
    2d10:	db002d15 	stw	r12,180(sp)
    2d14:	003bc706 	br	1c34 <__alt_mem_Flash_flash_data+0xf4001c34>
    2d18:	d8c03117 	ldw	r3,196(sp)
    2d1c:	b0e5c83a 	sub	r18,r22,r3
    2d20:	003a8d06 	br	1758 <__alt_mem_Flash_flash_data+0xf4001758>
    2d24:	da004015 	stw	r8,256(sp)
    2d28:	00012240 	call	1224 <strlen>
    2d2c:	1025883a 	mov	r18,r2
    2d30:	da004017 	ldw	r8,256(sp)
    2d34:	903bf20e 	bge	r18,zero,1d00 <__alt_mem_Flash_flash_data+0xf4001d00>
    2d38:	0005883a 	mov	r2,zero
    2d3c:	003bf006 	br	1d00 <__alt_mem_Flash_flash_data+0xf4001d00>
    2d40:	d9002f17 	ldw	r4,188(sp)
    2d44:	b80b883a 	mov	r5,r23
    2d48:	b00d883a 	mov	r6,r22
    2d4c:	0009c1c0 	call	9c1c <__ssprint_r>
    2d50:	103a221e 	bne	r2,zero,15dc <__alt_mem_Flash_flash_data+0xf40015dc>
    2d54:	d8c02017 	ldw	r3,128(sp)
    2d58:	d8801f17 	ldw	r2,124(sp)
    2d5c:	da000404 	addi	r8,sp,16
    2d60:	db003317 	ldw	r12,204(sp)
    2d64:	dac03117 	ldw	r11,196(sp)
    2d68:	10800044 	addi	r2,r2,1
    2d6c:	1b07883a 	add	r3,r3,r12
    2d70:	42c00015 	stw	r11,0(r8)
    2d74:	43000115 	stw	r12,4(r8)
    2d78:	d8c02015 	stw	r3,128(sp)
    2d7c:	d8801f15 	stw	r2,124(sp)
    2d80:	010001c4 	movi	r4,7
    2d84:	20bb210e 	bge	r4,r2,1a0c <__alt_mem_Flash_flash_data+0xf4001a0c>
    2d88:	003da206 	br	2414 <__alt_mem_Flash_flash_data+0xf4002414>
    2d8c:	d8802604 	addi	r2,sp,152
    2d90:	d8800115 	stw	r2,4(sp)
    2d94:	d9002f17 	ldw	r4,188(sp)
    2d98:	d8802504 	addi	r2,sp,148
    2d9c:	d9403717 	ldw	r5,220(sp)
    2da0:	d8800215 	stw	r2,8(sp)
    2da4:	d8802104 	addi	r2,sp,132
    2da8:	da400015 	stw	r9,0(sp)
    2dac:	d8800315 	stw	r2,12(sp)
    2db0:	900d883a 	mov	r6,r18
    2db4:	01c000c4 	movi	r7,3
    2db8:	da004015 	stw	r8,256(sp)
    2dbc:	da403f15 	stw	r9,252(sp)
    2dc0:	00055d00 	call	55d0 <_dtoa_r>
    2dc4:	da403f17 	ldw	r9,252(sp)
    2dc8:	da004017 	ldw	r8,256(sp)
    2dcc:	d8803115 	stw	r2,196(sp)
    2dd0:	4839883a 	mov	fp,r9
    2dd4:	dac03117 	ldw	r11,196(sp)
    2dd8:	00801184 	movi	r2,70
    2ddc:	5f15883a 	add	r10,r11,fp
    2de0:	a8bf7c1e 	bne	r21,r2,2bd4 <__alt_mem_Flash_flash_data+0xf4002bd4>
    2de4:	59000007 	ldb	r4,0(r11)
    2de8:	00800c04 	movi	r2,48
    2dec:	2080c826 	beq	r4,r2,3110 <___svfprintf_internal_r+0x1e54>
    2df0:	d8c02617 	ldw	r3,152(sp)
    2df4:	50d5883a 	add	r10,r10,r3
    2df8:	003f7606 	br	2bd4 <__alt_mem_Flash_flash_data+0xf4002bd4>
    2dfc:	010000b4 	movhi	r4,2
    2e00:	21021584 	addi	r4,r4,2134
    2e04:	d9003615 	stw	r4,216(sp)
    2e08:	003a9706 	br	1868 <__alt_mem_Flash_flash_data+0xf4001868>
    2e0c:	0025883a 	mov	r18,zero
    2e10:	003dc306 	br	2520 <__alt_mem_Flash_flash_data+0xf4002520>
    2e14:	d9002f17 	ldw	r4,188(sp)
    2e18:	b80b883a 	mov	r5,r23
    2e1c:	b00d883a 	mov	r6,r22
    2e20:	0009c1c0 	call	9c1c <__ssprint_r>
    2e24:	1039ed1e 	bne	r2,zero,15dc <__alt_mem_Flash_flash_data+0xf40015dc>
    2e28:	d8c02017 	ldw	r3,128(sp)
    2e2c:	da000404 	addi	r8,sp,16
    2e30:	003dba06 	br	251c <__alt_mem_Flash_flash_data+0xf400251c>
    2e34:	d9002f17 	ldw	r4,188(sp)
    2e38:	b80b883a 	mov	r5,r23
    2e3c:	b00d883a 	mov	r6,r22
    2e40:	0009c1c0 	call	9c1c <__ssprint_r>
    2e44:	1039e51e 	bne	r2,zero,15dc <__alt_mem_Flash_flash_data+0xf40015dc>
    2e48:	d8802617 	ldw	r2,152(sp)
    2e4c:	d8c02017 	ldw	r3,128(sp)
    2e50:	da000404 	addi	r8,sp,16
    2e54:	003e4106 	br	275c <__alt_mem_Flash_flash_data+0xf400275c>
    2e58:	030000b4 	movhi	r12,2
    2e5c:	63021184 	addi	r12,r12,2118
    2e60:	db002b15 	stw	r12,172(sp)
    2e64:	dac02b17 	ldw	r11,172(sp)
    2e68:	1c07883a 	add	r3,r3,r16
    2e6c:	10800044 	addi	r2,r2,1
    2e70:	42c00015 	stw	r11,0(r8)
    2e74:	44000115 	stw	r16,4(r8)
    2e78:	d8c02015 	stw	r3,128(sp)
    2e7c:	d8801f15 	stw	r2,124(sp)
    2e80:	010001c4 	movi	r4,7
    2e84:	20bfae16 	blt	r4,r2,2d40 <__alt_mem_Flash_flash_data+0xf4002d40>
    2e88:	42000204 	addi	r8,r8,8
    2e8c:	003fb406 	br	2d60 <__alt_mem_Flash_flash_data+0xf4002d60>
    2e90:	0021883a 	mov	r16,zero
    2e94:	003e4306 	br	27a4 <__alt_mem_Flash_flash_data+0xf40027a4>
    2e98:	d9002f17 	ldw	r4,188(sp)
    2e9c:	b80b883a 	mov	r5,r23
    2ea0:	b00d883a 	mov	r6,r22
    2ea4:	0009c1c0 	call	9c1c <__ssprint_r>
    2ea8:	1039cc1e 	bne	r2,zero,15dc <__alt_mem_Flash_flash_data+0xf40015dc>
    2eac:	d8802617 	ldw	r2,152(sp)
    2eb0:	db003317 	ldw	r12,204(sp)
    2eb4:	d8c02017 	ldw	r3,128(sp)
    2eb8:	da000404 	addi	r8,sp,16
    2ebc:	6085c83a 	sub	r2,r12,r2
    2ec0:	003e3706 	br	27a0 <__alt_mem_Flash_flash_data+0xf40027a0>
    2ec4:	00800184 	movi	r2,6
    2ec8:	1240012e 	bgeu	r2,r9,2ed0 <___svfprintf_internal_r+0x1c14>
    2ecc:	1013883a 	mov	r9,r2
    2ed0:	4825883a 	mov	r18,r9
    2ed4:	4805883a 	mov	r2,r9
    2ed8:	4800a216 	blt	r9,zero,3164 <___svfprintf_internal_r+0x1ea8>
    2edc:	d8802a15 	stw	r2,168(sp)
    2ee0:	008000b4 	movhi	r2,2
    2ee4:	10820f04 	addi	r2,r2,2108
    2ee8:	d8803115 	stw	r2,196(sp)
    2eec:	dcc02d15 	stw	r19,180(sp)
    2ef0:	d8003215 	stw	zero,200(sp)
    2ef4:	d8003415 	stw	zero,208(sp)
    2ef8:	0005883a 	mov	r2,zero
    2efc:	003a2206 	br	1788 <__alt_mem_Flash_flash_data+0xf4001788>
    2f00:	030000b4 	movhi	r12,2
    2f04:	63021584 	addi	r12,r12,2134
    2f08:	db003615 	stw	r12,216(sp)
    2f0c:	003ae506 	br	1aa4 <__alt_mem_Flash_flash_data+0xf4001aa4>
    2f10:	d8c02617 	ldw	r3,152(sp)
    2f14:	00bfff44 	movi	r2,-3
    2f18:	18801516 	blt	r3,r2,2f70 <___svfprintf_internal_r+0x1cb4>
    2f1c:	48c01416 	blt	r9,r3,2f70 <___svfprintf_internal_r+0x1cb4>
    2f20:	d8c03415 	stw	r3,208(sp)
    2f24:	040019c4 	movi	r16,103
    2f28:	003f4906 	br	2c50 <__alt_mem_Flash_flash_data+0xf4002c50>
    2f2c:	05400b44 	movi	r21,45
    2f30:	dd402785 	stb	r21,158(sp)
    2f34:	003b1006 	br	1b78 <__alt_mem_Flash_flash_data+0xf4001b78>
    2f38:	00c00b44 	movi	r3,45
    2f3c:	d8802a15 	stw	r2,168(sp)
    2f40:	dc402d17 	ldw	r17,180(sp)
    2f44:	d8c02785 	stb	r3,158(sp)
    2f48:	dcc02d15 	stw	r19,180(sp)
    2f4c:	d8003215 	stw	zero,200(sp)
    2f50:	00800b44 	movi	r2,45
    2f54:	003a0906 	br	177c <__alt_mem_Flash_flash_data+0xf400177c>
    2f58:	010000b4 	movhi	r4,2
    2f5c:	21021184 	addi	r4,r4,2118
    2f60:	d9002b15 	stw	r4,172(sp)
    2f64:	003cc306 	br	2274 <__alt_mem_Flash_flash_data+0xf4002274>
    2f68:	5005883a 	mov	r2,r10
    2f6c:	003f2d06 	br	2c24 <__alt_mem_Flash_flash_data+0xf4002c24>
    2f70:	843fff84 	addi	r16,r16,-2
    2f74:	1f3fffc4 	addi	fp,r3,-1
    2f78:	df002615 	stw	fp,152(sp)
    2f7c:	dc0022c5 	stb	r16,139(sp)
    2f80:	e000a016 	blt	fp,zero,3204 <___svfprintf_internal_r+0x1f48>
    2f84:	00800ac4 	movi	r2,43
    2f88:	d8802305 	stb	r2,140(sp)
    2f8c:	00800244 	movi	r2,9
    2f90:	1700800e 	bge	r2,fp,3194 <___svfprintf_internal_r+0x1ed8>
    2f94:	dd4022c4 	addi	r21,sp,139
    2f98:	dc002b15 	stw	r16,172(sp)
    2f9c:	4025883a 	mov	r18,r8
    2fa0:	a821883a 	mov	r16,r21
    2fa4:	e009883a 	mov	r4,fp
    2fa8:	01400284 	movi	r5,10
    2fac:	000d7ec0 	call	d7ec <__modsi3>
    2fb0:	10800c04 	addi	r2,r2,48
    2fb4:	843fffc4 	addi	r16,r16,-1
    2fb8:	e009883a 	mov	r4,fp
    2fbc:	01400284 	movi	r5,10
    2fc0:	80800005 	stb	r2,0(r16)
    2fc4:	000d7980 	call	d798 <__divsi3>
    2fc8:	1039883a 	mov	fp,r2
    2fcc:	00800244 	movi	r2,9
    2fd0:	173ff416 	blt	r2,fp,2fa4 <__alt_mem_Flash_flash_data+0xf4002fa4>
    2fd4:	9011883a 	mov	r8,r18
    2fd8:	e0800c04 	addi	r2,fp,48
    2fdc:	8025883a 	mov	r18,r16
    2fe0:	913fffc4 	addi	r4,r18,-1
    2fe4:	90bfffc5 	stb	r2,-1(r18)
    2fe8:	dc002b17 	ldw	r16,172(sp)
    2fec:	25408e2e 	bgeu	r4,r21,3228 <___svfprintf_internal_r+0x1f6c>
    2ff0:	d9402384 	addi	r5,sp,142
    2ff4:	2c8bc83a 	sub	r5,r5,r18
    2ff8:	d8c02344 	addi	r3,sp,141
    2ffc:	a94b883a 	add	r5,r21,r5
    3000:	00000106 	br	3008 <___svfprintf_internal_r+0x1d4c>
    3004:	20800003 	ldbu	r2,0(r4)
    3008:	18800005 	stb	r2,0(r3)
    300c:	18c00044 	addi	r3,r3,1
    3010:	21000044 	addi	r4,r4,1
    3014:	197ffb1e 	bne	r3,r5,3004 <__alt_mem_Flash_flash_data+0xf4003004>
    3018:	d8802304 	addi	r2,sp,140
    301c:	1485c83a 	sub	r2,r2,r18
    3020:	d8c02344 	addi	r3,sp,141
    3024:	1885883a 	add	r2,r3,r2
    3028:	dac03317 	ldw	r11,204(sp)
    302c:	156bc83a 	sub	r21,r2,r21
    3030:	dd403a15 	stw	r21,232(sp)
    3034:	00800044 	movi	r2,1
    3038:	5d65883a 	add	r18,r11,r21
    303c:	12c0770e 	bge	r2,r11,321c <___svfprintf_internal_r+0x1f60>
    3040:	94800044 	addi	r18,r18,1
    3044:	9005883a 	mov	r2,r18
    3048:	90007216 	blt	r18,zero,3214 <___svfprintf_internal_r+0x1f58>
    304c:	d8003415 	stw	zero,208(sp)
    3050:	003f0706 	br	2c70 <__alt_mem_Flash_flash_data+0xf4002c70>
    3054:	da402a15 	stw	r9,168(sp)
    3058:	dd402783 	ldbu	r21,158(sp)
    305c:	4825883a 	mov	r18,r9
    3060:	dcc02d15 	stw	r19,180(sp)
    3064:	d8003215 	stw	zero,200(sp)
    3068:	d8003415 	stw	zero,208(sp)
    306c:	0039bf06 	br	176c <__alt_mem_Flash_flash_data+0xf400176c>
    3070:	483eb21e 	bne	r9,zero,2b3c <__alt_mem_Flash_flash_data+0xf4002b3c>
    3074:	9013883a 	mov	r9,r18
    3078:	003eb006 	br	2b3c <__alt_mem_Flash_flash_data+0xf4002b3c>
    307c:	d9002f17 	ldw	r4,188(sp)
    3080:	b80b883a 	mov	r5,r23
    3084:	b00d883a 	mov	r6,r22
    3088:	0009c1c0 	call	9c1c <__ssprint_r>
    308c:	1039531e 	bne	r2,zero,15dc <__alt_mem_Flash_flash_data+0xf40015dc>
    3090:	dc002617 	ldw	r16,152(sp)
    3094:	d8c02017 	ldw	r3,128(sp)
    3098:	d8801f17 	ldw	r2,124(sp)
    309c:	da000404 	addi	r8,sp,16
    30a0:	003e7106 	br	2a68 <__alt_mem_Flash_flash_data+0xf4002a68>
    30a4:	00c00b44 	movi	r3,45
    30a8:	64a0003c 	xorhi	r18,r12,32768
    30ac:	d8c02a05 	stb	r3,168(sp)
    30b0:	003ea806 	br	2b54 <__alt_mem_Flash_flash_data+0xf4002b54>
    30b4:	4f000044 	addi	fp,r9,1
    30b8:	003ead06 	br	2b70 <__alt_mem_Flash_flash_data+0xf4002b70>
    30bc:	d8c03417 	ldw	r3,208(sp)
    30c0:	00c0410e 	bge	zero,r3,31c8 <___svfprintf_internal_r+0x1f0c>
    30c4:	04800044 	movi	r18,1
    30c8:	dac03317 	ldw	r11,204(sp)
    30cc:	92e5883a 	add	r18,r18,r11
    30d0:	9005883a 	mov	r2,r18
    30d4:	903ee60e 	bge	r18,zero,2c70 <__alt_mem_Flash_flash_data+0xf4002c70>
    30d8:	0005883a 	mov	r2,zero
    30dc:	003ee406 	br	2c70 <__alt_mem_Flash_flash_data+0xf4002c70>
    30e0:	d8c02617 	ldw	r3,152(sp)
    30e4:	d8c03415 	stw	r3,208(sp)
    30e8:	00c0310e 	bge	zero,r3,31b0 <___svfprintf_internal_r+0x1ef4>
    30ec:	48001f1e 	bne	r9,zero,316c <___svfprintf_internal_r+0x1eb0>
    30f0:	8c40004c 	andi	r17,r17,1
    30f4:	88001d1e 	bne	r17,zero,316c <___svfprintf_internal_r+0x1eb0>
    30f8:	1805883a 	mov	r2,r3
    30fc:	183edb0e 	bge	r3,zero,2c6c <__alt_mem_Flash_flash_data+0xf4002c6c>
    3100:	0005883a 	mov	r2,zero
    3104:	003ed906 	br	2c6c <__alt_mem_Flash_flash_data+0xf4002c6c>
    3108:	d8802117 	ldw	r2,132(sp)
    310c:	003ec506 	br	2c24 <__alt_mem_Flash_flash_data+0xf4002c24>
    3110:	d9003717 	ldw	r4,220(sp)
    3114:	900b883a 	mov	r5,r18
    3118:	000d883a 	mov	r6,zero
    311c:	000f883a 	mov	r7,zero
    3120:	da004015 	stw	r8,256(sp)
    3124:	da403f15 	stw	r9,252(sp)
    3128:	da803e15 	stw	r10,248(sp)
    312c:	000e9c00 	call	e9c0 <__eqdf2>
    3130:	da004017 	ldw	r8,256(sp)
    3134:	da403f17 	ldw	r9,252(sp)
    3138:	da803e17 	ldw	r10,248(sp)
    313c:	103f2c26 	beq	r2,zero,2df0 <__alt_mem_Flash_flash_data+0xf4002df0>
    3140:	00800044 	movi	r2,1
    3144:	1707c83a 	sub	r3,r2,fp
    3148:	d8c02615 	stw	r3,152(sp)
    314c:	003f2906 	br	2df4 <__alt_mem_Flash_flash_data+0xf4002df4>
    3150:	db003417 	ldw	r12,208(sp)
    3154:	64800044 	addi	r18,r12,1
    3158:	9005883a 	mov	r2,r18
    315c:	903ec40e 	bge	r18,zero,2c70 <__alt_mem_Flash_flash_data+0xf4002c70>
    3160:	003fdd06 	br	30d8 <__alt_mem_Flash_flash_data+0xf40030d8>
    3164:	0005883a 	mov	r2,zero
    3168:	003f5c06 	br	2edc <__alt_mem_Flash_flash_data+0xf4002edc>
    316c:	dac03417 	ldw	r11,208(sp)
    3170:	4a400044 	addi	r9,r9,1
    3174:	5a65883a 	add	r18,r11,r9
    3178:	9005883a 	mov	r2,r18
    317c:	903ebc0e 	bge	r18,zero,2c70 <__alt_mem_Flash_flash_data+0xf4002c70>
    3180:	003fd506 	br	30d8 <__alt_mem_Flash_flash_data+0xf40030d8>
    3184:	008000b4 	movhi	r2,2
    3188:	10821184 	addi	r2,r2,2118
    318c:	d8802b15 	stw	r2,172(sp)
    3190:	003d2b06 	br	2640 <__alt_mem_Flash_flash_data+0xf4002640>
    3194:	00800c04 	movi	r2,48
    3198:	e0c00c04 	addi	r3,fp,48
    319c:	d8802345 	stb	r2,141(sp)
    31a0:	d8c02385 	stb	r3,142(sp)
    31a4:	d88023c4 	addi	r2,sp,143
    31a8:	dd4022c4 	addi	r21,sp,139
    31ac:	003f9e06 	br	3028 <__alt_mem_Flash_flash_data+0xf4003028>
    31b0:	4800081e 	bne	r9,zero,31d4 <___svfprintf_internal_r+0x1f18>
    31b4:	8c40004c 	andi	r17,r17,1
    31b8:	8800061e 	bne	r17,zero,31d4 <___svfprintf_internal_r+0x1f18>
    31bc:	00800044 	movi	r2,1
    31c0:	1025883a 	mov	r18,r2
    31c4:	003eaa06 	br	2c70 <__alt_mem_Flash_flash_data+0xf4002c70>
    31c8:	04800084 	movi	r18,2
    31cc:	90e5c83a 	sub	r18,r18,r3
    31d0:	003fbd06 	br	30c8 <__alt_mem_Flash_flash_data+0xf40030c8>
    31d4:	4c800084 	addi	r18,r9,2
    31d8:	9005883a 	mov	r2,r18
    31dc:	903ea40e 	bge	r18,zero,2c70 <__alt_mem_Flash_flash_data+0xf4002c70>
    31e0:	003fbd06 	br	30d8 <__alt_mem_Flash_flash_data+0xf40030d8>
    31e4:	dac02d17 	ldw	r11,180(sp)
    31e8:	5a400017 	ldw	r9,0(r11)
    31ec:	5ac00104 	addi	r11,r11,4
    31f0:	dac02d15 	stw	r11,180(sp)
    31f4:	483e410e 	bge	r9,zero,2afc <__alt_mem_Flash_flash_data+0xf4002afc>
    31f8:	027fffc4 	movi	r9,-1
    31fc:	1c000047 	ldb	r16,1(r3)
    3200:	00388406 	br	1414 <__alt_mem_Flash_flash_data+0xf4001414>
    3204:	00800b44 	movi	r2,45
    3208:	0739c83a 	sub	fp,zero,fp
    320c:	d8802305 	stb	r2,140(sp)
    3210:	003f5e06 	br	2f8c <__alt_mem_Flash_flash_data+0xf4002f8c>
    3214:	0005883a 	mov	r2,zero
    3218:	003f8c06 	br	304c <__alt_mem_Flash_flash_data+0xf400304c>
    321c:	88a2703a 	and	r17,r17,r2
    3220:	883f8826 	beq	r17,zero,3044 <__alt_mem_Flash_flash_data+0xf4003044>
    3224:	003f8606 	br	3040 <__alt_mem_Flash_flash_data+0xf4003040>
    3228:	d8802344 	addi	r2,sp,141
    322c:	003f7e06 	br	3028 <__alt_mem_Flash_flash_data+0xf4003028>
    3230:	d8c02617 	ldw	r3,152(sp)
    3234:	003f4f06 	br	2f74 <__alt_mem_Flash_flash_data+0xf4002f74>
    3238:	dac02f17 	ldw	r11,188(sp)
    323c:	00800304 	movi	r2,12
    3240:	58800015 	stw	r2,0(r11)
    3244:	00bfffc4 	movi	r2,-1
    3248:	0038e806 	br	15ec <__alt_mem_Flash_flash_data+0xf40015ec>

0000324c <___vfprintf_internal_r>:
    324c:	deffb604 	addi	sp,sp,-296
    3250:	dfc04915 	stw	ra,292(sp)
    3254:	ddc04715 	stw	r23,284(sp)
    3258:	dd804615 	stw	r22,280(sp)
    325c:	282f883a 	mov	r23,r5
    3260:	202d883a 	mov	r22,r4
    3264:	d9802a15 	stw	r6,168(sp)
    3268:	d9c02d15 	stw	r7,180(sp)
    326c:	df004815 	stw	fp,288(sp)
    3270:	dd404515 	stw	r21,276(sp)
    3274:	dd004415 	stw	r20,272(sp)
    3278:	dcc04315 	stw	r19,268(sp)
    327c:	dc804215 	stw	r18,264(sp)
    3280:	dc404115 	stw	r17,260(sp)
    3284:	dc004015 	stw	r16,256(sp)
    3288:	0007e340 	call	7e34 <_localeconv_r>
    328c:	10800017 	ldw	r2,0(r2)
    3290:	1009883a 	mov	r4,r2
    3294:	d8803515 	stw	r2,212(sp)
    3298:	00012240 	call	1224 <strlen>
    329c:	d8803815 	stw	r2,224(sp)
    32a0:	b0000226 	beq	r22,zero,32ac <___vfprintf_internal_r+0x60>
    32a4:	b0800e17 	ldw	r2,56(r22)
    32a8:	1000e126 	beq	r2,zero,3630 <___vfprintf_internal_r+0x3e4>
    32ac:	b880030b 	ldhu	r2,12(r23)
    32b0:	10c8000c 	andi	r3,r2,8192
    32b4:	1800061e 	bne	r3,zero,32d0 <___vfprintf_internal_r+0x84>
    32b8:	b9001917 	ldw	r4,100(r23)
    32bc:	00f7ffc4 	movi	r3,-8193
    32c0:	10880014 	ori	r2,r2,8192
    32c4:	20c6703a 	and	r3,r4,r3
    32c8:	b880030d 	sth	r2,12(r23)
    32cc:	b8c01915 	stw	r3,100(r23)
    32d0:	10c0020c 	andi	r3,r2,8
    32d4:	1800a726 	beq	r3,zero,3574 <___vfprintf_internal_r+0x328>
    32d8:	b8c00417 	ldw	r3,16(r23)
    32dc:	1800a526 	beq	r3,zero,3574 <___vfprintf_internal_r+0x328>
    32e0:	1080068c 	andi	r2,r2,26
    32e4:	00c00284 	movi	r3,10
    32e8:	10c0aa26 	beq	r2,r3,3594 <___vfprintf_internal_r+0x348>
    32ec:	dac01e04 	addi	r11,sp,120
    32f0:	db001dc4 	addi	r12,sp,119
    32f4:	d8800404 	addi	r2,sp,16
    32f8:	050000b4 	movhi	r20,2
    32fc:	dac02815 	stw	r11,160(sp)
    3300:	5b17c83a 	sub	r11,r11,r12
    3304:	a5021984 	addi	r20,r20,2150
    3308:	db002915 	stw	r12,164(sp)
    330c:	d8801e15 	stw	r2,120(sp)
    3310:	d8002015 	stw	zero,128(sp)
    3314:	d8001f15 	stw	zero,124(sp)
    3318:	d8003315 	stw	zero,204(sp)
    331c:	d8003715 	stw	zero,220(sp)
    3320:	d8003915 	stw	zero,228(sp)
    3324:	1011883a 	mov	r8,r2
    3328:	d8003b15 	stw	zero,236(sp)
    332c:	d8003a15 	stw	zero,232(sp)
    3330:	d8002f15 	stw	zero,188(sp)
    3334:	dac03c15 	stw	r11,240(sp)
    3338:	db002a17 	ldw	r12,168(sp)
    333c:	60800007 	ldb	r2,0(r12)
    3340:	1000be26 	beq	r2,zero,363c <___vfprintf_internal_r+0x3f0>
    3344:	00c00944 	movi	r3,37
    3348:	10c0bc26 	beq	r2,r3,363c <___vfprintf_internal_r+0x3f0>
    334c:	6021883a 	mov	r16,r12
    3350:	00000106 	br	3358 <___vfprintf_internal_r+0x10c>
    3354:	10c08426 	beq	r2,r3,3568 <___vfprintf_internal_r+0x31c>
    3358:	84000044 	addi	r16,r16,1
    335c:	80800007 	ldb	r2,0(r16)
    3360:	103ffc1e 	bne	r2,zero,3354 <__alt_mem_Flash_flash_data+0xf4003354>
    3364:	dac02a17 	ldw	r11,168(sp)
    3368:	82e3c83a 	sub	r17,r16,r11
    336c:	88000f26 	beq	r17,zero,33ac <___vfprintf_internal_r+0x160>
    3370:	d8c02017 	ldw	r3,128(sp)
    3374:	d8801f17 	ldw	r2,124(sp)
    3378:	dac02a17 	ldw	r11,168(sp)
    337c:	1c47883a 	add	r3,r3,r17
    3380:	10800044 	addi	r2,r2,1
    3384:	d8c02015 	stw	r3,128(sp)
    3388:	42c00015 	stw	r11,0(r8)
    338c:	44400115 	stw	r17,4(r8)
    3390:	d8801f15 	stw	r2,124(sp)
    3394:	00c001c4 	movi	r3,7
    3398:	18809316 	blt	r3,r2,35e8 <___vfprintf_internal_r+0x39c>
    339c:	42000204 	addi	r8,r8,8
    33a0:	db002f17 	ldw	r12,188(sp)
    33a4:	6459883a 	add	r12,r12,r17
    33a8:	db002f15 	stw	r12,188(sp)
    33ac:	80800007 	ldb	r2,0(r16)
    33b0:	10009426 	beq	r2,zero,3604 <___vfprintf_internal_r+0x3b8>
    33b4:	80800044 	addi	r2,r16,1
    33b8:	84000047 	ldb	r16,1(r16)
    33bc:	d8002785 	stb	zero,158(sp)
    33c0:	000d883a 	mov	r6,zero
    33c4:	027fffc4 	movi	r9,-1
    33c8:	d8002e15 	stw	zero,184(sp)
    33cc:	0023883a 	mov	r17,zero
    33d0:	01001604 	movi	r4,88
    33d4:	01400244 	movi	r5,9
    33d8:	02800a84 	movi	r10,42
    33dc:	01c01b04 	movi	r7,108
    33e0:	10c00044 	addi	r3,r2,1
    33e4:	80bff804 	addi	r2,r16,-32
    33e8:	2082cd36 	bltu	r4,r2,3f20 <___vfprintf_internal_r+0xcd4>
    33ec:	100490ba 	slli	r2,r2,2
    33f0:	02c00034 	movhi	r11,0
    33f4:	5acd0104 	addi	r11,r11,13316
    33f8:	12c5883a 	add	r2,r2,r11
    33fc:	10800017 	ldw	r2,0(r2)
    3400:	1000683a 	jmp	r2
    3404:	00003d38 	rdprs	zero,zero,244
    3408:	00003f20 	cmpeqi	zero,zero,252
    340c:	00003f20 	cmpeqi	zero,zero,252
    3410:	00003e88 	cmpgei	zero,zero,250
    3414:	00003f20 	cmpeqi	zero,zero,252
    3418:	00003f20 	cmpeqi	zero,zero,252
    341c:	00003f20 	cmpeqi	zero,zero,252
    3420:	00003f20 	cmpeqi	zero,zero,252
    3424:	00003f20 	cmpeqi	zero,zero,252
    3428:	00003f20 	cmpeqi	zero,zero,252
    342c:	00003d58 	cmpnei	zero,zero,245
    3430:	00003d84 	movi	zero,246
    3434:	00003f20 	cmpeqi	zero,zero,252
    3438:	00003644 	movi	zero,217
    343c:	00003654 	movui	zero,217
    3440:	00003f20 	cmpeqi	zero,zero,252
    3444:	00003694 	movui	zero,218
    3448:	000036a4 	muli	zero,zero,218
    344c:	000036a4 	muli	zero,zero,218
    3450:	000036a4 	muli	zero,zero,218
    3454:	000036a4 	muli	zero,zero,218
    3458:	000036a4 	muli	zero,zero,218
    345c:	000036a4 	muli	zero,zero,218
    3460:	000036a4 	muli	zero,zero,218
    3464:	000036a4 	muli	zero,zero,218
    3468:	000036a4 	muli	zero,zero,218
    346c:	00003f20 	cmpeqi	zero,zero,252
    3470:	00003f20 	cmpeqi	zero,zero,252
    3474:	00003f20 	cmpeqi	zero,zero,252
    3478:	00003f20 	cmpeqi	zero,zero,252
    347c:	00003f20 	cmpeqi	zero,zero,252
    3480:	00003f20 	cmpeqi	zero,zero,252
    3484:	00003f20 	cmpeqi	zero,zero,252
    3488:	00003f20 	cmpeqi	zero,zero,252
    348c:	00003f20 	cmpeqi	zero,zero,252
    3490:	00003f20 	cmpeqi	zero,zero,252
    3494:	000036d8 	cmpnei	zero,zero,219
    3498:	00003b48 	cmpgei	zero,zero,237
    349c:	00003f20 	cmpeqi	zero,zero,252
    34a0:	00003b48 	cmpgei	zero,zero,237
    34a4:	00003f20 	cmpeqi	zero,zero,252
    34a8:	00003f20 	cmpeqi	zero,zero,252
    34ac:	00003f20 	cmpeqi	zero,zero,252
    34b0:	00003f20 	cmpeqi	zero,zero,252
    34b4:	00003c34 	movhi	zero,240
    34b8:	00003f20 	cmpeqi	zero,zero,252
    34bc:	00003f20 	cmpeqi	zero,zero,252
    34c0:	00003adc 	xori	zero,zero,235
    34c4:	00003f20 	cmpeqi	zero,zero,252
    34c8:	00003f20 	cmpeqi	zero,zero,252
    34cc:	00003f20 	cmpeqi	zero,zero,252
    34d0:	00003f20 	cmpeqi	zero,zero,252
    34d4:	00003f20 	cmpeqi	zero,zero,252
    34d8:	00003b18 	cmpnei	zero,zero,236
    34dc:	00003f20 	cmpeqi	zero,zero,252
    34e0:	00003f20 	cmpeqi	zero,zero,252
    34e4:	00003cdc 	xori	zero,zero,243
    34e8:	00003f20 	cmpeqi	zero,zero,252
    34ec:	00003f20 	cmpeqi	zero,zero,252
    34f0:	00003f20 	cmpeqi	zero,zero,252
    34f4:	00003f20 	cmpeqi	zero,zero,252
    34f8:	00003f20 	cmpeqi	zero,zero,252
    34fc:	00003f20 	cmpeqi	zero,zero,252
    3500:	00003f20 	cmpeqi	zero,zero,252
    3504:	00003f20 	cmpeqi	zero,zero,252
    3508:	00003f20 	cmpeqi	zero,zero,252
    350c:	00003f20 	cmpeqi	zero,zero,252
    3510:	00003d94 	movui	zero,246
    3514:	00003c44 	movi	zero,241
    3518:	00003b48 	cmpgei	zero,zero,237
    351c:	00003b48 	cmpgei	zero,zero,237
    3520:	00003b48 	cmpgei	zero,zero,237
    3524:	00003c84 	movi	zero,242
    3528:	00003c44 	movi	zero,241
    352c:	00003f20 	cmpeqi	zero,zero,252
    3530:	00003f20 	cmpeqi	zero,zero,252
    3534:	00003c94 	movui	zero,242
    3538:	00003f20 	cmpeqi	zero,zero,252
    353c:	00003ca8 	cmpgeui	zero,zero,242
    3540:	00003ee4 	muli	zero,zero,251
    3544:	00003bec 	andhi	zero,zero,239
    3548:	00003e98 	cmpnei	zero,zero,250
    354c:	00003f20 	cmpeqi	zero,zero,252
    3550:	00003dd4 	movui	zero,247
    3554:	00003f20 	cmpeqi	zero,zero,252
    3558:	00003ea8 	cmpgeui	zero,zero,250
    355c:	00003f20 	cmpeqi	zero,zero,252
    3560:	00003f20 	cmpeqi	zero,zero,252
    3564:	00003e48 	cmpgei	zero,zero,249
    3568:	db002a17 	ldw	r12,168(sp)
    356c:	8323c83a 	sub	r17,r16,r12
    3570:	003f7e06 	br	336c <__alt_mem_Flash_flash_data+0xf400336c>
    3574:	b009883a 	mov	r4,r22
    3578:	b80b883a 	mov	r5,r23
    357c:	000527c0 	call	527c <__swsetup_r>
    3580:	10000c1e 	bne	r2,zero,35b4 <___vfprintf_internal_r+0x368>
    3584:	b880030b 	ldhu	r2,12(r23)
    3588:	00c00284 	movi	r3,10
    358c:	1080068c 	andi	r2,r2,26
    3590:	10ff561e 	bne	r2,r3,32ec <__alt_mem_Flash_flash_data+0xf40032ec>
    3594:	b880038f 	ldh	r2,14(r23)
    3598:	103f5416 	blt	r2,zero,32ec <__alt_mem_Flash_flash_data+0xf40032ec>
    359c:	d9802a17 	ldw	r6,168(sp)
    35a0:	d9c02d17 	ldw	r7,180(sp)
    35a4:	b009883a 	mov	r4,r22
    35a8:	b80b883a 	mov	r5,r23
    35ac:	00051c00 	call	51c0 <__sbprintf>
    35b0:	00000106 	br	35b8 <___vfprintf_internal_r+0x36c>
    35b4:	00bfffc4 	movi	r2,-1
    35b8:	dfc04917 	ldw	ra,292(sp)
    35bc:	df004817 	ldw	fp,288(sp)
    35c0:	ddc04717 	ldw	r23,284(sp)
    35c4:	dd804617 	ldw	r22,280(sp)
    35c8:	dd404517 	ldw	r21,276(sp)
    35cc:	dd004417 	ldw	r20,272(sp)
    35d0:	dcc04317 	ldw	r19,268(sp)
    35d4:	dc804217 	ldw	r18,264(sp)
    35d8:	dc404117 	ldw	r17,260(sp)
    35dc:	dc004017 	ldw	r16,256(sp)
    35e0:	dec04a04 	addi	sp,sp,296
    35e4:	f800283a 	ret
    35e8:	b009883a 	mov	r4,r22
    35ec:	b80b883a 	mov	r5,r23
    35f0:	d9801e04 	addi	r6,sp,120
    35f4:	000af1c0 	call	af1c <__sprint_r>
    35f8:	1000081e 	bne	r2,zero,361c <___vfprintf_internal_r+0x3d0>
    35fc:	da000404 	addi	r8,sp,16
    3600:	003f6706 	br	33a0 <__alt_mem_Flash_flash_data+0xf40033a0>
    3604:	d8802017 	ldw	r2,128(sp)
    3608:	10000426 	beq	r2,zero,361c <___vfprintf_internal_r+0x3d0>
    360c:	b009883a 	mov	r4,r22
    3610:	b80b883a 	mov	r5,r23
    3614:	d9801e04 	addi	r6,sp,120
    3618:	000af1c0 	call	af1c <__sprint_r>
    361c:	b880030b 	ldhu	r2,12(r23)
    3620:	1080100c 	andi	r2,r2,64
    3624:	103fe31e 	bne	r2,zero,35b4 <__alt_mem_Flash_flash_data+0xf40035b4>
    3628:	d8802f17 	ldw	r2,188(sp)
    362c:	003fe206 	br	35b8 <__alt_mem_Flash_flash_data+0xf40035b8>
    3630:	b009883a 	mov	r4,r22
    3634:	00072dc0 	call	72dc <__sinit>
    3638:	003f1c06 	br	32ac <__alt_mem_Flash_flash_data+0xf40032ac>
    363c:	dc002a17 	ldw	r16,168(sp)
    3640:	003f5a06 	br	33ac <__alt_mem_Flash_flash_data+0xf40033ac>
    3644:	1805883a 	mov	r2,r3
    3648:	8c400114 	ori	r17,r17,4
    364c:	1c000007 	ldb	r16,0(r3)
    3650:	003f6306 	br	33e0 <__alt_mem_Flash_flash_data+0xf40033e0>
    3654:	1c000007 	ldb	r16,0(r3)
    3658:	18800044 	addi	r2,r3,1
    365c:	8286ad26 	beq	r16,r10,5114 <___vfprintf_internal_r+0x1ec8>
    3660:	82fff404 	addi	r11,r16,-48
    3664:	1007883a 	mov	r3,r2
    3668:	0013883a 	mov	r9,zero
    366c:	2aff5d36 	bltu	r5,r11,33e4 <__alt_mem_Flash_flash_data+0xf40033e4>
    3670:	1c000007 	ldb	r16,0(r3)
    3674:	4a4002a4 	muli	r9,r9,10
    3678:	18c00044 	addi	r3,r3,1
    367c:	5a53883a 	add	r9,r11,r9
    3680:	82fff404 	addi	r11,r16,-48
    3684:	2afffa2e 	bgeu	r5,r11,3670 <__alt_mem_Flash_flash_data+0xf4003670>
    3688:	483f560e 	bge	r9,zero,33e4 <__alt_mem_Flash_flash_data+0xf40033e4>
    368c:	027fffc4 	movi	r9,-1
    3690:	003f5406 	br	33e4 <__alt_mem_Flash_flash_data+0xf40033e4>
    3694:	8c402014 	ori	r17,r17,128
    3698:	1805883a 	mov	r2,r3
    369c:	1c000007 	ldb	r16,0(r3)
    36a0:	003f4f06 	br	33e0 <__alt_mem_Flash_flash_data+0xf40033e0>
    36a4:	1805883a 	mov	r2,r3
    36a8:	d8002e15 	stw	zero,184(sp)
    36ac:	82fff404 	addi	r11,r16,-48
    36b0:	0019883a 	mov	r12,zero
    36b4:	14000007 	ldb	r16,0(r2)
    36b8:	630002a4 	muli	r12,r12,10
    36bc:	18c00044 	addi	r3,r3,1
    36c0:	1805883a 	mov	r2,r3
    36c4:	62d9883a 	add	r12,r12,r11
    36c8:	82fff404 	addi	r11,r16,-48
    36cc:	2afff92e 	bgeu	r5,r11,36b4 <__alt_mem_Flash_flash_data+0xf40036b4>
    36d0:	db002e15 	stw	r12,184(sp)
    36d4:	003f4306 	br	33e4 <__alt_mem_Flash_flash_data+0xf40033e4>
    36d8:	8c400414 	ori	r17,r17,16
    36dc:	d8c02a15 	stw	r3,168(sp)
    36e0:	d9802785 	stb	r6,158(sp)
    36e4:	8880080c 	andi	r2,r17,32
    36e8:	d8c02d17 	ldw	r3,180(sp)
    36ec:	10015a26 	beq	r2,zero,3c58 <___vfprintf_internal_r+0xa0c>
    36f0:	db002d17 	ldw	r12,180(sp)
    36f4:	18800117 	ldw	r2,4(r3)
    36f8:	1cc00017 	ldw	r19,0(r3)
    36fc:	63000204 	addi	r12,r12,8
    3700:	db002d15 	stw	r12,180(sp)
    3704:	1039883a 	mov	fp,r2
    3708:	10044516 	blt	r2,zero,4820 <___vfprintf_internal_r+0x15d4>
    370c:	dd402783 	ldbu	r21,158(sp)
    3710:	da403215 	stw	r9,200(sp)
    3714:	00800044 	movi	r2,1
    3718:	9f06b03a 	or	r3,r19,fp
    371c:	48000216 	blt	r9,zero,3728 <___vfprintf_internal_r+0x4dc>
    3720:	013fdfc4 	movi	r4,-129
    3724:	8922703a 	and	r17,r17,r4
    3728:	1802071e 	bne	r3,zero,3f48 <___vfprintf_internal_r+0xcfc>
    372c:	4802fa26 	beq	r9,zero,4318 <___vfprintf_internal_r+0x10cc>
    3730:	10803fcc 	andi	r2,r2,255
    3734:	00c00044 	movi	r3,1
    3738:	10c22926 	beq	r2,r3,3fe0 <___vfprintf_internal_r+0xd94>
    373c:	00c00084 	movi	r3,2
    3740:	10c31726 	beq	r2,r3,43a0 <___vfprintf_internal_r+0x1154>
    3744:	d8c01e04 	addi	r3,sp,120
    3748:	9808d0fa 	srli	r4,r19,3
    374c:	e00a977a 	slli	r5,fp,29
    3750:	e038d0fa 	srli	fp,fp,3
    3754:	9cc001cc 	andi	r19,r19,7
    3758:	98800c04 	addi	r2,r19,48
    375c:	18ffffc4 	addi	r3,r3,-1
    3760:	2926b03a 	or	r19,r5,r4
    3764:	18800005 	stb	r2,0(r3)
    3768:	9f08b03a 	or	r4,r19,fp
    376c:	203ff61e 	bne	r4,zero,3748 <__alt_mem_Flash_flash_data+0xf4003748>
    3770:	8900004c 	andi	r4,r17,1
    3774:	d8c03115 	stw	r3,196(sp)
    3778:	2003931e 	bne	r4,zero,45c8 <___vfprintf_internal_r+0x137c>
    377c:	dac02817 	ldw	r11,160(sp)
    3780:	58e5c83a 	sub	r18,r11,r3
    3784:	9005883a 	mov	r2,r18
    3788:	9240010e 	bge	r18,r9,3790 <___vfprintf_internal_r+0x544>
    378c:	4805883a 	mov	r2,r9
    3790:	d8802b15 	stw	r2,172(sp)
    3794:	d8003415 	stw	zero,208(sp)
    3798:	a8803fcc 	andi	r2,r21,255
    379c:	1080201c 	xori	r2,r2,128
    37a0:	10bfe004 	addi	r2,r2,-128
    37a4:	10000326 	beq	r2,zero,37b4 <___vfprintf_internal_r+0x568>
    37a8:	db002b17 	ldw	r12,172(sp)
    37ac:	63000044 	addi	r12,r12,1
    37b0:	db002b15 	stw	r12,172(sp)
    37b4:	88c0008c 	andi	r3,r17,2
    37b8:	d8c02c15 	stw	r3,176(sp)
    37bc:	18000326 	beq	r3,zero,37cc <___vfprintf_internal_r+0x580>
    37c0:	dac02b17 	ldw	r11,172(sp)
    37c4:	5ac00084 	addi	r11,r11,2
    37c8:	dac02b15 	stw	r11,172(sp)
    37cc:	8b00210c 	andi	r12,r17,132
    37d0:	db003015 	stw	r12,192(sp)
    37d4:	6001da1e 	bne	r12,zero,3f40 <___vfprintf_internal_r+0xcf4>
    37d8:	dac02e17 	ldw	r11,184(sp)
    37dc:	db002b17 	ldw	r12,172(sp)
    37e0:	5b39c83a 	sub	fp,r11,r12
    37e4:	0701d60e 	bge	zero,fp,3f40 <___vfprintf_internal_r+0xcf4>
    37e8:	02400404 	movi	r9,16
    37ec:	d8c02017 	ldw	r3,128(sp)
    37f0:	d8801f17 	ldw	r2,124(sp)
    37f4:	4f053c0e 	bge	r9,fp,4ce8 <___vfprintf_internal_r+0x1a9c>
    37f8:	014000b4 	movhi	r5,2
    37fc:	29421d84 	addi	r5,r5,2166
    3800:	d9403615 	stw	r5,216(sp)
    3804:	482b883a 	mov	r21,r9
    3808:	04c001c4 	movi	r19,7
    380c:	00000306 	br	381c <___vfprintf_internal_r+0x5d0>
    3810:	e73ffc04 	addi	fp,fp,-16
    3814:	42000204 	addi	r8,r8,8
    3818:	af00130e 	bge	r21,fp,3868 <___vfprintf_internal_r+0x61c>
    381c:	02c000b4 	movhi	r11,2
    3820:	18c00404 	addi	r3,r3,16
    3824:	10800044 	addi	r2,r2,1
    3828:	5ac21d84 	addi	r11,r11,2166
    382c:	42c00015 	stw	r11,0(r8)
    3830:	45400115 	stw	r21,4(r8)
    3834:	d8c02015 	stw	r3,128(sp)
    3838:	d8801f15 	stw	r2,124(sp)
    383c:	98bff40e 	bge	r19,r2,3810 <__alt_mem_Flash_flash_data+0xf4003810>
    3840:	b009883a 	mov	r4,r22
    3844:	b80b883a 	mov	r5,r23
    3848:	d9801e04 	addi	r6,sp,120
    384c:	000af1c0 	call	af1c <__sprint_r>
    3850:	103f721e 	bne	r2,zero,361c <__alt_mem_Flash_flash_data+0xf400361c>
    3854:	e73ffc04 	addi	fp,fp,-16
    3858:	d8c02017 	ldw	r3,128(sp)
    385c:	d8801f17 	ldw	r2,124(sp)
    3860:	da000404 	addi	r8,sp,16
    3864:	af3fed16 	blt	r21,fp,381c <__alt_mem_Flash_flash_data+0xf400381c>
    3868:	db003617 	ldw	r12,216(sp)
    386c:	e0c7883a 	add	r3,fp,r3
    3870:	10800044 	addi	r2,r2,1
    3874:	43000015 	stw	r12,0(r8)
    3878:	47000115 	stw	fp,4(r8)
    387c:	d8c02015 	stw	r3,128(sp)
    3880:	d8801f15 	stw	r2,124(sp)
    3884:	010001c4 	movi	r4,7
    3888:	20830e16 	blt	r4,r2,44c4 <___vfprintf_internal_r+0x1278>
    388c:	d8802787 	ldb	r2,158(sp)
    3890:	42000204 	addi	r8,r8,8
    3894:	10000c26 	beq	r2,zero,38c8 <___vfprintf_internal_r+0x67c>
    3898:	d8801f17 	ldw	r2,124(sp)
    389c:	d9002784 	addi	r4,sp,158
    38a0:	18c00044 	addi	r3,r3,1
    38a4:	10800044 	addi	r2,r2,1
    38a8:	41000015 	stw	r4,0(r8)
    38ac:	01000044 	movi	r4,1
    38b0:	41000115 	stw	r4,4(r8)
    38b4:	d8c02015 	stw	r3,128(sp)
    38b8:	d8801f15 	stw	r2,124(sp)
    38bc:	010001c4 	movi	r4,7
    38c0:	2082a716 	blt	r4,r2,4360 <___vfprintf_internal_r+0x1114>
    38c4:	42000204 	addi	r8,r8,8
    38c8:	dac02c17 	ldw	r11,176(sp)
    38cc:	58000c26 	beq	r11,zero,3900 <___vfprintf_internal_r+0x6b4>
    38d0:	d8801f17 	ldw	r2,124(sp)
    38d4:	d9002704 	addi	r4,sp,156
    38d8:	18c00084 	addi	r3,r3,2
    38dc:	10800044 	addi	r2,r2,1
    38e0:	41000015 	stw	r4,0(r8)
    38e4:	01000084 	movi	r4,2
    38e8:	41000115 	stw	r4,4(r8)
    38ec:	d8c02015 	stw	r3,128(sp)
    38f0:	d8801f15 	stw	r2,124(sp)
    38f4:	010001c4 	movi	r4,7
    38f8:	2082a116 	blt	r4,r2,4380 <___vfprintf_internal_r+0x1134>
    38fc:	42000204 	addi	r8,r8,8
    3900:	db003017 	ldw	r12,192(sp)
    3904:	00802004 	movi	r2,128
    3908:	60820326 	beq	r12,r2,4118 <___vfprintf_internal_r+0xecc>
    390c:	db003217 	ldw	r12,200(sp)
    3910:	64abc83a 	sub	r21,r12,r18
    3914:	0540260e 	bge	zero,r21,39b0 <___vfprintf_internal_r+0x764>
    3918:	07000404 	movi	fp,16
    391c:	d8801f17 	ldw	r2,124(sp)
    3920:	e544570e 	bge	fp,r21,4a80 <___vfprintf_internal_r+0x1834>
    3924:	014000b4 	movhi	r5,2
    3928:	29421984 	addi	r5,r5,2150
    392c:	d9402c15 	stw	r5,176(sp)
    3930:	04c001c4 	movi	r19,7
    3934:	00000306 	br	3944 <___vfprintf_internal_r+0x6f8>
    3938:	ad7ffc04 	addi	r21,r21,-16
    393c:	42000204 	addi	r8,r8,8
    3940:	e540110e 	bge	fp,r21,3988 <___vfprintf_internal_r+0x73c>
    3944:	18c00404 	addi	r3,r3,16
    3948:	10800044 	addi	r2,r2,1
    394c:	45000015 	stw	r20,0(r8)
    3950:	47000115 	stw	fp,4(r8)
    3954:	d8c02015 	stw	r3,128(sp)
    3958:	d8801f15 	stw	r2,124(sp)
    395c:	98bff60e 	bge	r19,r2,3938 <__alt_mem_Flash_flash_data+0xf4003938>
    3960:	b009883a 	mov	r4,r22
    3964:	b80b883a 	mov	r5,r23
    3968:	d9801e04 	addi	r6,sp,120
    396c:	000af1c0 	call	af1c <__sprint_r>
    3970:	103f2a1e 	bne	r2,zero,361c <__alt_mem_Flash_flash_data+0xf400361c>
    3974:	ad7ffc04 	addi	r21,r21,-16
    3978:	d8c02017 	ldw	r3,128(sp)
    397c:	d8801f17 	ldw	r2,124(sp)
    3980:	da000404 	addi	r8,sp,16
    3984:	e57fef16 	blt	fp,r21,3944 <__alt_mem_Flash_flash_data+0xf4003944>
    3988:	dac02c17 	ldw	r11,176(sp)
    398c:	1d47883a 	add	r3,r3,r21
    3990:	10800044 	addi	r2,r2,1
    3994:	42c00015 	stw	r11,0(r8)
    3998:	45400115 	stw	r21,4(r8)
    399c:	d8c02015 	stw	r3,128(sp)
    39a0:	d8801f15 	stw	r2,124(sp)
    39a4:	010001c4 	movi	r4,7
    39a8:	20826516 	blt	r4,r2,4340 <___vfprintf_internal_r+0x10f4>
    39ac:	42000204 	addi	r8,r8,8
    39b0:	8880400c 	andi	r2,r17,256
    39b4:	1001901e 	bne	r2,zero,3ff8 <___vfprintf_internal_r+0xdac>
    39b8:	d8801f17 	ldw	r2,124(sp)
    39bc:	db003117 	ldw	r12,196(sp)
    39c0:	1c87883a 	add	r3,r3,r18
    39c4:	10800044 	addi	r2,r2,1
    39c8:	43000015 	stw	r12,0(r8)
    39cc:	44800115 	stw	r18,4(r8)
    39d0:	d8c02015 	stw	r3,128(sp)
    39d4:	d8801f15 	stw	r2,124(sp)
    39d8:	010001c4 	movi	r4,7
    39dc:	20824016 	blt	r4,r2,42e0 <___vfprintf_internal_r+0x1094>
    39e0:	42000204 	addi	r8,r8,8
    39e4:	8c40010c 	andi	r17,r17,4
    39e8:	88003126 	beq	r17,zero,3ab0 <___vfprintf_internal_r+0x864>
    39ec:	db002e17 	ldw	r12,184(sp)
    39f0:	dac02b17 	ldw	r11,172(sp)
    39f4:	62e1c83a 	sub	r16,r12,r11
    39f8:	04002d0e 	bge	zero,r16,3ab0 <___vfprintf_internal_r+0x864>
    39fc:	04400404 	movi	r17,16
    3a00:	d8801f17 	ldw	r2,124(sp)
    3a04:	8c05150e 	bge	r17,r16,4e5c <___vfprintf_internal_r+0x1c10>
    3a08:	010000b4 	movhi	r4,2
    3a0c:	21021d84 	addi	r4,r4,2166
    3a10:	d9003615 	stw	r4,216(sp)
    3a14:	048001c4 	movi	r18,7
    3a18:	00000306 	br	3a28 <___vfprintf_internal_r+0x7dc>
    3a1c:	843ffc04 	addi	r16,r16,-16
    3a20:	42000204 	addi	r8,r8,8
    3a24:	8c00130e 	bge	r17,r16,3a74 <___vfprintf_internal_r+0x828>
    3a28:	014000b4 	movhi	r5,2
    3a2c:	18c00404 	addi	r3,r3,16
    3a30:	10800044 	addi	r2,r2,1
    3a34:	29421d84 	addi	r5,r5,2166
    3a38:	41400015 	stw	r5,0(r8)
    3a3c:	44400115 	stw	r17,4(r8)
    3a40:	d8c02015 	stw	r3,128(sp)
    3a44:	d8801f15 	stw	r2,124(sp)
    3a48:	90bff40e 	bge	r18,r2,3a1c <__alt_mem_Flash_flash_data+0xf4003a1c>
    3a4c:	b009883a 	mov	r4,r22
    3a50:	b80b883a 	mov	r5,r23
    3a54:	d9801e04 	addi	r6,sp,120
    3a58:	000af1c0 	call	af1c <__sprint_r>
    3a5c:	103eef1e 	bne	r2,zero,361c <__alt_mem_Flash_flash_data+0xf400361c>
    3a60:	843ffc04 	addi	r16,r16,-16
    3a64:	d8c02017 	ldw	r3,128(sp)
    3a68:	d8801f17 	ldw	r2,124(sp)
    3a6c:	da000404 	addi	r8,sp,16
    3a70:	8c3fed16 	blt	r17,r16,3a28 <__alt_mem_Flash_flash_data+0xf4003a28>
    3a74:	dac03617 	ldw	r11,216(sp)
    3a78:	1c07883a 	add	r3,r3,r16
    3a7c:	10800044 	addi	r2,r2,1
    3a80:	42c00015 	stw	r11,0(r8)
    3a84:	44000115 	stw	r16,4(r8)
    3a88:	d8c02015 	stw	r3,128(sp)
    3a8c:	d8801f15 	stw	r2,124(sp)
    3a90:	010001c4 	movi	r4,7
    3a94:	2080060e 	bge	r4,r2,3ab0 <___vfprintf_internal_r+0x864>
    3a98:	b009883a 	mov	r4,r22
    3a9c:	b80b883a 	mov	r5,r23
    3aa0:	d9801e04 	addi	r6,sp,120
    3aa4:	000af1c0 	call	af1c <__sprint_r>
    3aa8:	103edc1e 	bne	r2,zero,361c <__alt_mem_Flash_flash_data+0xf400361c>
    3aac:	d8c02017 	ldw	r3,128(sp)
    3ab0:	d8802b17 	ldw	r2,172(sp)
    3ab4:	db002e17 	ldw	r12,184(sp)
    3ab8:	1300010e 	bge	r2,r12,3ac0 <___vfprintf_internal_r+0x874>
    3abc:	6005883a 	mov	r2,r12
    3ac0:	dac02f17 	ldw	r11,188(sp)
    3ac4:	5897883a 	add	r11,r11,r2
    3ac8:	dac02f15 	stw	r11,188(sp)
    3acc:	18020c1e 	bne	r3,zero,4300 <___vfprintf_internal_r+0x10b4>
    3ad0:	d8001f15 	stw	zero,124(sp)
    3ad4:	da000404 	addi	r8,sp,16
    3ad8:	003e1706 	br	3338 <__alt_mem_Flash_flash_data+0xf4003338>
    3adc:	8c400414 	ori	r17,r17,16
    3ae0:	d8c02a15 	stw	r3,168(sp)
    3ae4:	8880080c 	andi	r2,r17,32
    3ae8:	10010126 	beq	r2,zero,3ef0 <___vfprintf_internal_r+0xca4>
    3aec:	db002d17 	ldw	r12,180(sp)
    3af0:	0005883a 	mov	r2,zero
    3af4:	64c00017 	ldw	r19,0(r12)
    3af8:	67000117 	ldw	fp,4(r12)
    3afc:	63000204 	addi	r12,r12,8
    3b00:	db002d15 	stw	r12,180(sp)
    3b04:	9f06b03a 	or	r3,r19,fp
    3b08:	d8002785 	stb	zero,158(sp)
    3b0c:	da403215 	stw	r9,200(sp)
    3b10:	002b883a 	mov	r21,zero
    3b14:	003f0106 	br	371c <__alt_mem_Flash_flash_data+0xf400371c>
    3b18:	8c400414 	ori	r17,r17,16
    3b1c:	d8c02a15 	stw	r3,168(sp)
    3b20:	8880080c 	andi	r2,r17,32
    3b24:	1000e326 	beq	r2,zero,3eb4 <___vfprintf_internal_r+0xc68>
    3b28:	dac02d17 	ldw	r11,180(sp)
    3b2c:	00800044 	movi	r2,1
    3b30:	5cc00017 	ldw	r19,0(r11)
    3b34:	5f000117 	ldw	fp,4(r11)
    3b38:	5ac00204 	addi	r11,r11,8
    3b3c:	dac02d15 	stw	r11,180(sp)
    3b40:	9f06b03a 	or	r3,r19,fp
    3b44:	003ff006 	br	3b08 <__alt_mem_Flash_flash_data+0xf4003b08>
    3b48:	db002d17 	ldw	r12,180(sp)
    3b4c:	dac02d17 	ldw	r11,180(sp)
    3b50:	d8c02a15 	stw	r3,168(sp)
    3b54:	63000017 	ldw	r12,0(r12)
    3b58:	5ac00117 	ldw	r11,4(r11)
    3b5c:	d9802785 	stb	r6,158(sp)
    3b60:	6009883a 	mov	r4,r12
    3b64:	580b883a 	mov	r5,r11
    3b68:	db003715 	stw	r12,220(sp)
    3b6c:	da003f15 	stw	r8,252(sp)
    3b70:	da403e15 	stw	r9,248(sp)
    3b74:	dac03915 	stw	r11,228(sp)
    3b78:	00099c80 	call	99c8 <__fpclassifyd>
    3b7c:	db002d17 	ldw	r12,180(sp)
    3b80:	04800044 	movi	r18,1
    3b84:	da003f17 	ldw	r8,252(sp)
    3b88:	64c00204 	addi	r19,r12,8
    3b8c:	da403e17 	ldw	r9,248(sp)
    3b90:	d9003717 	ldw	r4,220(sp)
    3b94:	d9403917 	ldw	r5,228(sp)
    3b98:	14832b1e 	bne	r2,r18,4848 <___vfprintf_internal_r+0x15fc>
    3b9c:	000d883a 	mov	r6,zero
    3ba0:	000f883a 	mov	r7,zero
    3ba4:	000eb240 	call	eb24 <__ledf2>
    3ba8:	da003f17 	ldw	r8,252(sp)
    3bac:	1004b716 	blt	r2,zero,4e8c <___vfprintf_internal_r+0x1c40>
    3bb0:	dd402783 	ldbu	r21,158(sp)
    3bb4:	008011c4 	movi	r2,71
    3bb8:	14040e0e 	bge	r2,r16,4bf4 <___vfprintf_internal_r+0x19a8>
    3bbc:	00c000b4 	movhi	r3,2
    3bc0:	18c20204 	addi	r3,r3,2056
    3bc4:	d8c03115 	stw	r3,196(sp)
    3bc8:	02c000c4 	movi	r11,3
    3bcc:	00bfdfc4 	movi	r2,-129
    3bd0:	dac02b15 	stw	r11,172(sp)
    3bd4:	88a2703a 	and	r17,r17,r2
    3bd8:	dcc02d15 	stw	r19,180(sp)
    3bdc:	5825883a 	mov	r18,r11
    3be0:	d8003215 	stw	zero,200(sp)
    3be4:	d8003415 	stw	zero,208(sp)
    3be8:	003eeb06 	br	3798 <__alt_mem_Flash_flash_data+0xf4003798>
    3bec:	db002d17 	ldw	r12,180(sp)
    3bf0:	00800c04 	movi	r2,48
    3bf4:	d8802705 	stb	r2,156(sp)
    3bf8:	64c00017 	ldw	r19,0(r12)
    3bfc:	00801e04 	movi	r2,120
    3c00:	d8802745 	stb	r2,157(sp)
    3c04:	008000b4 	movhi	r2,2
    3c08:	10820a04 	addi	r2,r2,2088
    3c0c:	63000104 	addi	r12,r12,4
    3c10:	d8c02a15 	stw	r3,168(sp)
    3c14:	d8803b15 	stw	r2,236(sp)
    3c18:	0039883a 	mov	fp,zero
    3c1c:	8c400094 	ori	r17,r17,2
    3c20:	db002d15 	stw	r12,180(sp)
    3c24:	00800084 	movi	r2,2
    3c28:	04001e04 	movi	r16,120
    3c2c:	9807883a 	mov	r3,r19
    3c30:	003fb506 	br	3b08 <__alt_mem_Flash_flash_data+0xf4003b08>
    3c34:	8c400214 	ori	r17,r17,8
    3c38:	1805883a 	mov	r2,r3
    3c3c:	1c000007 	ldb	r16,0(r3)
    3c40:	003de706 	br	33e0 <__alt_mem_Flash_flash_data+0xf40033e0>
    3c44:	d8c02a15 	stw	r3,168(sp)
    3c48:	d9802785 	stb	r6,158(sp)
    3c4c:	8880080c 	andi	r2,r17,32
    3c50:	d8c02d17 	ldw	r3,180(sp)
    3c54:	103ea61e 	bne	r2,zero,36f0 <__alt_mem_Flash_flash_data+0xf40036f0>
    3c58:	8880040c 	andi	r2,r17,16
    3c5c:	1002221e 	bne	r2,zero,44e8 <___vfprintf_internal_r+0x129c>
    3c60:	8880100c 	andi	r2,r17,64
    3c64:	10022026 	beq	r2,zero,44e8 <___vfprintf_internal_r+0x129c>
    3c68:	1cc0000f 	ldh	r19,0(r3)
    3c6c:	db002d17 	ldw	r12,180(sp)
    3c70:	9839d7fa 	srai	fp,r19,31
    3c74:	63000104 	addi	r12,r12,4
    3c78:	db002d15 	stw	r12,180(sp)
    3c7c:	e005883a 	mov	r2,fp
    3c80:	003ea106 	br	3708 <__alt_mem_Flash_flash_data+0xf4003708>
    3c84:	8c401014 	ori	r17,r17,64
    3c88:	1805883a 	mov	r2,r3
    3c8c:	1c000007 	ldb	r16,0(r3)
    3c90:	003dd306 	br	33e0 <__alt_mem_Flash_flash_data+0xf40033e0>
    3c94:	1c000007 	ldb	r16,0(r3)
    3c98:	81c3e926 	beq	r16,r7,4c40 <___vfprintf_internal_r+0x19f4>
    3c9c:	8c400414 	ori	r17,r17,16
    3ca0:	1805883a 	mov	r2,r3
    3ca4:	003dce06 	br	33e0 <__alt_mem_Flash_flash_data+0xf40033e0>
    3ca8:	d8c02a15 	stw	r3,168(sp)
    3cac:	d9802785 	stb	r6,158(sp)
    3cb0:	8880080c 	andi	r2,r17,32
    3cb4:	10034726 	beq	r2,zero,49d4 <___vfprintf_internal_r+0x1788>
    3cb8:	db002d17 	ldw	r12,180(sp)
    3cbc:	dac02f17 	ldw	r11,188(sp)
    3cc0:	60800017 	ldw	r2,0(r12)
    3cc4:	5807d7fa 	srai	r3,r11,31
    3cc8:	63000104 	addi	r12,r12,4
    3ccc:	db002d15 	stw	r12,180(sp)
    3cd0:	12c00015 	stw	r11,0(r2)
    3cd4:	10c00115 	stw	r3,4(r2)
    3cd8:	003d9706 	br	3338 <__alt_mem_Flash_flash_data+0xf4003338>
    3cdc:	030000b4 	movhi	r12,2
    3ce0:	63020504 	addi	r12,r12,2068
    3ce4:	d8c02a15 	stw	r3,168(sp)
    3ce8:	d9802785 	stb	r6,158(sp)
    3cec:	db003b15 	stw	r12,236(sp)
    3cf0:	88c0080c 	andi	r3,r17,32
    3cf4:	d8802d17 	ldw	r2,180(sp)
    3cf8:	18005b26 	beq	r3,zero,3e68 <___vfprintf_internal_r+0xc1c>
    3cfc:	dac02d17 	ldw	r11,180(sp)
    3d00:	14c00017 	ldw	r19,0(r2)
    3d04:	17000117 	ldw	fp,4(r2)
    3d08:	5ac00204 	addi	r11,r11,8
    3d0c:	dac02d15 	stw	r11,180(sp)
    3d10:	8880004c 	andi	r2,r17,1
    3d14:	10022926 	beq	r2,zero,45bc <___vfprintf_internal_r+0x1370>
    3d18:	9f06b03a 	or	r3,r19,fp
    3d1c:	18032b26 	beq	r3,zero,49cc <___vfprintf_internal_r+0x1780>
    3d20:	00800c04 	movi	r2,48
    3d24:	d8802705 	stb	r2,156(sp)
    3d28:	dc002745 	stb	r16,157(sp)
    3d2c:	8c400094 	ori	r17,r17,2
    3d30:	00800084 	movi	r2,2
    3d34:	003f7406 	br	3b08 <__alt_mem_Flash_flash_data+0xf4003b08>
    3d38:	30803fcc 	andi	r2,r6,255
    3d3c:	1080201c 	xori	r2,r2,128
    3d40:	10bfe004 	addi	r2,r2,-128
    3d44:	1003351e 	bne	r2,zero,4a1c <___vfprintf_internal_r+0x17d0>
    3d48:	1805883a 	mov	r2,r3
    3d4c:	01800804 	movi	r6,32
    3d50:	1c000007 	ldb	r16,0(r3)
    3d54:	003da206 	br	33e0 <__alt_mem_Flash_flash_data+0xf40033e0>
    3d58:	dac02d17 	ldw	r11,180(sp)
    3d5c:	db002d17 	ldw	r12,180(sp)
    3d60:	5ac00017 	ldw	r11,0(r11)
    3d64:	dac02e15 	stw	r11,184(sp)
    3d68:	62c00104 	addi	r11,r12,4
    3d6c:	db002e17 	ldw	r12,184(sp)
    3d70:	6003ad16 	blt	r12,zero,4c28 <___vfprintf_internal_r+0x19dc>
    3d74:	dac02d15 	stw	r11,180(sp)
    3d78:	1805883a 	mov	r2,r3
    3d7c:	1c000007 	ldb	r16,0(r3)
    3d80:	003d9706 	br	33e0 <__alt_mem_Flash_flash_data+0xf40033e0>
    3d84:	1805883a 	mov	r2,r3
    3d88:	01800ac4 	movi	r6,43
    3d8c:	1c000007 	ldb	r16,0(r3)
    3d90:	003d9306 	br	33e0 <__alt_mem_Flash_flash_data+0xf40033e0>
    3d94:	db002d17 	ldw	r12,180(sp)
    3d98:	d8c02a15 	stw	r3,168(sp)
    3d9c:	00c00044 	movi	r3,1
    3da0:	60800017 	ldw	r2,0(r12)
    3da4:	63000104 	addi	r12,r12,4
    3da8:	d8c02b15 	stw	r3,172(sp)
    3dac:	d8002785 	stb	zero,158(sp)
    3db0:	d8801405 	stb	r2,80(sp)
    3db4:	db002d15 	stw	r12,180(sp)
    3db8:	dac01404 	addi	r11,sp,80
    3dbc:	1825883a 	mov	r18,r3
    3dc0:	d8003215 	stw	zero,200(sp)
    3dc4:	d8003415 	stw	zero,208(sp)
    3dc8:	dac03115 	stw	r11,196(sp)
    3dcc:	0005883a 	mov	r2,zero
    3dd0:	003e7806 	br	37b4 <__alt_mem_Flash_flash_data+0xf40037b4>
    3dd4:	dac02d17 	ldw	r11,180(sp)
    3dd8:	db002d17 	ldw	r12,180(sp)
    3ddc:	d8c02a15 	stw	r3,168(sp)
    3de0:	5ac00017 	ldw	r11,0(r11)
    3de4:	d8002785 	stb	zero,158(sp)
    3de8:	64c00104 	addi	r19,r12,4
    3dec:	dac03115 	stw	r11,196(sp)
    3df0:	5803fe26 	beq	r11,zero,4dec <___vfprintf_internal_r+0x1ba0>
    3df4:	d9003117 	ldw	r4,196(sp)
    3df8:	4803b416 	blt	r9,zero,4ccc <___vfprintf_internal_r+0x1a80>
    3dfc:	480d883a 	mov	r6,r9
    3e00:	000b883a 	mov	r5,zero
    3e04:	da003f15 	stw	r8,252(sp)
    3e08:	da403e15 	stw	r9,248(sp)
    3e0c:	00080200 	call	8020 <memchr>
    3e10:	da003f17 	ldw	r8,252(sp)
    3e14:	da403e17 	ldw	r9,248(sp)
    3e18:	10043026 	beq	r2,zero,4edc <___vfprintf_internal_r+0x1c90>
    3e1c:	d8c03117 	ldw	r3,196(sp)
    3e20:	10e5c83a 	sub	r18,r2,r3
    3e24:	4c836b16 	blt	r9,r18,4bd4 <___vfprintf_internal_r+0x1988>
    3e28:	9005883a 	mov	r2,r18
    3e2c:	9003ac16 	blt	r18,zero,4ce0 <___vfprintf_internal_r+0x1a94>
    3e30:	dd402783 	ldbu	r21,158(sp)
    3e34:	d8802b15 	stw	r2,172(sp)
    3e38:	dcc02d15 	stw	r19,180(sp)
    3e3c:	d8003215 	stw	zero,200(sp)
    3e40:	d8003415 	stw	zero,208(sp)
    3e44:	003e5406 	br	3798 <__alt_mem_Flash_flash_data+0xf4003798>
    3e48:	008000b4 	movhi	r2,2
    3e4c:	10820a04 	addi	r2,r2,2088
    3e50:	d8c02a15 	stw	r3,168(sp)
    3e54:	d8803b15 	stw	r2,236(sp)
    3e58:	d9802785 	stb	r6,158(sp)
    3e5c:	88c0080c 	andi	r3,r17,32
    3e60:	d8802d17 	ldw	r2,180(sp)
    3e64:	183fa51e 	bne	r3,zero,3cfc <__alt_mem_Flash_flash_data+0xf4003cfc>
    3e68:	88c0040c 	andi	r3,r17,16
    3e6c:	1802ee26 	beq	r3,zero,4a28 <___vfprintf_internal_r+0x17dc>
    3e70:	db002d17 	ldw	r12,180(sp)
    3e74:	14c00017 	ldw	r19,0(r2)
    3e78:	0039883a 	mov	fp,zero
    3e7c:	63000104 	addi	r12,r12,4
    3e80:	db002d15 	stw	r12,180(sp)
    3e84:	003fa206 	br	3d10 <__alt_mem_Flash_flash_data+0xf4003d10>
    3e88:	8c400054 	ori	r17,r17,1
    3e8c:	1805883a 	mov	r2,r3
    3e90:	1c000007 	ldb	r16,0(r3)
    3e94:	003d5206 	br	33e0 <__alt_mem_Flash_flash_data+0xf40033e0>
    3e98:	8c400814 	ori	r17,r17,32
    3e9c:	1805883a 	mov	r2,r3
    3ea0:	1c000007 	ldb	r16,0(r3)
    3ea4:	003d4e06 	br	33e0 <__alt_mem_Flash_flash_data+0xf40033e0>
    3ea8:	d8c02a15 	stw	r3,168(sp)
    3eac:	8880080c 	andi	r2,r17,32
    3eb0:	103f1d1e 	bne	r2,zero,3b28 <__alt_mem_Flash_flash_data+0xf4003b28>
    3eb4:	8880040c 	andi	r2,r17,16
    3eb8:	1001b81e 	bne	r2,zero,459c <___vfprintf_internal_r+0x1350>
    3ebc:	8880100c 	andi	r2,r17,64
    3ec0:	1001b626 	beq	r2,zero,459c <___vfprintf_internal_r+0x1350>
    3ec4:	dac02d17 	ldw	r11,180(sp)
    3ec8:	0039883a 	mov	fp,zero
    3ecc:	00800044 	movi	r2,1
    3ed0:	5cc0000b 	ldhu	r19,0(r11)
    3ed4:	5ac00104 	addi	r11,r11,4
    3ed8:	dac02d15 	stw	r11,180(sp)
    3edc:	9807883a 	mov	r3,r19
    3ee0:	003f0906 	br	3b08 <__alt_mem_Flash_flash_data+0xf4003b08>
    3ee4:	d8c02a15 	stw	r3,168(sp)
    3ee8:	8880080c 	andi	r2,r17,32
    3eec:	103eff1e 	bne	r2,zero,3aec <__alt_mem_Flash_flash_data+0xf4003aec>
    3ef0:	8880040c 	andi	r2,r17,16
    3ef4:	1001a11e 	bne	r2,zero,457c <___vfprintf_internal_r+0x1330>
    3ef8:	8880100c 	andi	r2,r17,64
    3efc:	10019f26 	beq	r2,zero,457c <___vfprintf_internal_r+0x1330>
    3f00:	db002d17 	ldw	r12,180(sp)
    3f04:	0039883a 	mov	fp,zero
    3f08:	0005883a 	mov	r2,zero
    3f0c:	64c0000b 	ldhu	r19,0(r12)
    3f10:	63000104 	addi	r12,r12,4
    3f14:	db002d15 	stw	r12,180(sp)
    3f18:	9807883a 	mov	r3,r19
    3f1c:	003efa06 	br	3b08 <__alt_mem_Flash_flash_data+0xf4003b08>
    3f20:	d8c02a15 	stw	r3,168(sp)
    3f24:	d9802785 	stb	r6,158(sp)
    3f28:	803db626 	beq	r16,zero,3604 <__alt_mem_Flash_flash_data+0xf4003604>
    3f2c:	00c00044 	movi	r3,1
    3f30:	d8c02b15 	stw	r3,172(sp)
    3f34:	dc001405 	stb	r16,80(sp)
    3f38:	d8002785 	stb	zero,158(sp)
    3f3c:	003f9e06 	br	3db8 <__alt_mem_Flash_flash_data+0xf4003db8>
    3f40:	d8c02017 	ldw	r3,128(sp)
    3f44:	003e5306 	br	3894 <__alt_mem_Flash_flash_data+0xf4003894>
    3f48:	10803fcc 	andi	r2,r2,255
    3f4c:	00c00044 	movi	r3,1
    3f50:	10fdfa1e 	bne	r2,r3,373c <__alt_mem_Flash_flash_data+0xf400373c>
    3f54:	e000021e 	bne	fp,zero,3f60 <___vfprintf_internal_r+0xd14>
    3f58:	00800244 	movi	r2,9
    3f5c:	14c0202e 	bgeu	r2,r19,3fe0 <___vfprintf_internal_r+0xd94>
    3f60:	dc002b15 	stw	r16,172(sp)
    3f64:	dc402c15 	stw	r17,176(sp)
    3f68:	9821883a 	mov	r16,r19
    3f6c:	e023883a 	mov	r17,fp
    3f70:	dc801e04 	addi	r18,sp,120
    3f74:	4827883a 	mov	r19,r9
    3f78:	4039883a 	mov	fp,r8
    3f7c:	8009883a 	mov	r4,r16
    3f80:	880b883a 	mov	r5,r17
    3f84:	01800284 	movi	r6,10
    3f88:	000f883a 	mov	r7,zero
    3f8c:	000d19c0 	call	d19c <__umoddi3>
    3f90:	10800c04 	addi	r2,r2,48
    3f94:	94bfffc4 	addi	r18,r18,-1
    3f98:	8009883a 	mov	r4,r16
    3f9c:	880b883a 	mov	r5,r17
    3fa0:	01800284 	movi	r6,10
    3fa4:	000f883a 	mov	r7,zero
    3fa8:	90800005 	stb	r2,0(r18)
    3fac:	000cbdc0 	call	cbdc <__udivdi3>
    3fb0:	1021883a 	mov	r16,r2
    3fb4:	10c4b03a 	or	r2,r2,r3
    3fb8:	1823883a 	mov	r17,r3
    3fbc:	103fef1e 	bne	r2,zero,3f7c <__alt_mem_Flash_flash_data+0xf4003f7c>
    3fc0:	dac02817 	ldw	r11,160(sp)
    3fc4:	dc803115 	stw	r18,196(sp)
    3fc8:	dc002b17 	ldw	r16,172(sp)
    3fcc:	dc402c17 	ldw	r17,176(sp)
    3fd0:	9813883a 	mov	r9,r19
    3fd4:	e011883a 	mov	r8,fp
    3fd8:	5ca5c83a 	sub	r18,r11,r18
    3fdc:	003de906 	br	3784 <__alt_mem_Flash_flash_data+0xf4003784>
    3fe0:	9cc00c04 	addi	r19,r19,48
    3fe4:	d8c01dc4 	addi	r3,sp,119
    3fe8:	dcc01dc5 	stb	r19,119(sp)
    3fec:	dc803c17 	ldw	r18,240(sp)
    3ff0:	d8c03115 	stw	r3,196(sp)
    3ff4:	003de306 	br	3784 <__alt_mem_Flash_flash_data+0xf4003784>
    3ff8:	00801944 	movi	r2,101
    3ffc:	1400710e 	bge	r2,r16,41c4 <___vfprintf_internal_r+0xf78>
    4000:	d9003717 	ldw	r4,220(sp)
    4004:	d9403917 	ldw	r5,228(sp)
    4008:	000d883a 	mov	r6,zero
    400c:	000f883a 	mov	r7,zero
    4010:	d8c03d15 	stw	r3,244(sp)
    4014:	da003f15 	stw	r8,252(sp)
    4018:	000e9c00 	call	e9c0 <__eqdf2>
    401c:	d8c03d17 	ldw	r3,244(sp)
    4020:	da003f17 	ldw	r8,252(sp)
    4024:	1000ef1e 	bne	r2,zero,43e4 <___vfprintf_internal_r+0x1198>
    4028:	d8801f17 	ldw	r2,124(sp)
    402c:	010000b4 	movhi	r4,2
    4030:	21021104 	addi	r4,r4,2116
    4034:	18c00044 	addi	r3,r3,1
    4038:	10800044 	addi	r2,r2,1
    403c:	41000015 	stw	r4,0(r8)
    4040:	01000044 	movi	r4,1
    4044:	41000115 	stw	r4,4(r8)
    4048:	d8c02015 	stw	r3,128(sp)
    404c:	d8801f15 	stw	r2,124(sp)
    4050:	010001c4 	movi	r4,7
    4054:	20828e16 	blt	r4,r2,4a90 <___vfprintf_internal_r+0x1844>
    4058:	42000204 	addi	r8,r8,8
    405c:	d8802617 	ldw	r2,152(sp)
    4060:	dac03317 	ldw	r11,204(sp)
    4064:	12c00216 	blt	r2,r11,4070 <___vfprintf_internal_r+0xe24>
    4068:	8880004c 	andi	r2,r17,1
    406c:	103e5d26 	beq	r2,zero,39e4 <__alt_mem_Flash_flash_data+0xf40039e4>
    4070:	db003817 	ldw	r12,224(sp)
    4074:	d8801f17 	ldw	r2,124(sp)
    4078:	dac03517 	ldw	r11,212(sp)
    407c:	1b07883a 	add	r3,r3,r12
    4080:	10800044 	addi	r2,r2,1
    4084:	42c00015 	stw	r11,0(r8)
    4088:	43000115 	stw	r12,4(r8)
    408c:	d8c02015 	stw	r3,128(sp)
    4090:	d8801f15 	stw	r2,124(sp)
    4094:	010001c4 	movi	r4,7
    4098:	2082ed16 	blt	r4,r2,4c50 <___vfprintf_internal_r+0x1a04>
    409c:	42000204 	addi	r8,r8,8
    40a0:	db003317 	ldw	r12,204(sp)
    40a4:	643fffc4 	addi	r16,r12,-1
    40a8:	043e4e0e 	bge	zero,r16,39e4 <__alt_mem_Flash_flash_data+0xf40039e4>
    40ac:	04800404 	movi	r18,16
    40b0:	d8801f17 	ldw	r2,124(sp)
    40b4:	94007e0e 	bge	r18,r16,42b0 <___vfprintf_internal_r+0x1064>
    40b8:	014000b4 	movhi	r5,2
    40bc:	29421984 	addi	r5,r5,2150
    40c0:	d9402c15 	stw	r5,176(sp)
    40c4:	054001c4 	movi	r21,7
    40c8:	00000306 	br	40d8 <___vfprintf_internal_r+0xe8c>
    40cc:	42000204 	addi	r8,r8,8
    40d0:	843ffc04 	addi	r16,r16,-16
    40d4:	9400790e 	bge	r18,r16,42bc <___vfprintf_internal_r+0x1070>
    40d8:	18c00404 	addi	r3,r3,16
    40dc:	10800044 	addi	r2,r2,1
    40e0:	45000015 	stw	r20,0(r8)
    40e4:	44800115 	stw	r18,4(r8)
    40e8:	d8c02015 	stw	r3,128(sp)
    40ec:	d8801f15 	stw	r2,124(sp)
    40f0:	a8bff60e 	bge	r21,r2,40cc <__alt_mem_Flash_flash_data+0xf40040cc>
    40f4:	b009883a 	mov	r4,r22
    40f8:	b80b883a 	mov	r5,r23
    40fc:	d9801e04 	addi	r6,sp,120
    4100:	000af1c0 	call	af1c <__sprint_r>
    4104:	103d451e 	bne	r2,zero,361c <__alt_mem_Flash_flash_data+0xf400361c>
    4108:	d8c02017 	ldw	r3,128(sp)
    410c:	d8801f17 	ldw	r2,124(sp)
    4110:	da000404 	addi	r8,sp,16
    4114:	003fee06 	br	40d0 <__alt_mem_Flash_flash_data+0xf40040d0>
    4118:	dac02e17 	ldw	r11,184(sp)
    411c:	db002b17 	ldw	r12,172(sp)
    4120:	5b2bc83a 	sub	r21,r11,r12
    4124:	057df90e 	bge	zero,r21,390c <__alt_mem_Flash_flash_data+0xf400390c>
    4128:	07000404 	movi	fp,16
    412c:	d8801f17 	ldw	r2,124(sp)
    4130:	e543640e 	bge	fp,r21,4ec4 <___vfprintf_internal_r+0x1c78>
    4134:	014000b4 	movhi	r5,2
    4138:	29421984 	addi	r5,r5,2150
    413c:	d9402c15 	stw	r5,176(sp)
    4140:	04c001c4 	movi	r19,7
    4144:	00000306 	br	4154 <___vfprintf_internal_r+0xf08>
    4148:	ad7ffc04 	addi	r21,r21,-16
    414c:	42000204 	addi	r8,r8,8
    4150:	e540110e 	bge	fp,r21,4198 <___vfprintf_internal_r+0xf4c>
    4154:	18c00404 	addi	r3,r3,16
    4158:	10800044 	addi	r2,r2,1
    415c:	45000015 	stw	r20,0(r8)
    4160:	47000115 	stw	fp,4(r8)
    4164:	d8c02015 	stw	r3,128(sp)
    4168:	d8801f15 	stw	r2,124(sp)
    416c:	98bff60e 	bge	r19,r2,4148 <__alt_mem_Flash_flash_data+0xf4004148>
    4170:	b009883a 	mov	r4,r22
    4174:	b80b883a 	mov	r5,r23
    4178:	d9801e04 	addi	r6,sp,120
    417c:	000af1c0 	call	af1c <__sprint_r>
    4180:	103d261e 	bne	r2,zero,361c <__alt_mem_Flash_flash_data+0xf400361c>
    4184:	ad7ffc04 	addi	r21,r21,-16
    4188:	d8c02017 	ldw	r3,128(sp)
    418c:	d8801f17 	ldw	r2,124(sp)
    4190:	da000404 	addi	r8,sp,16
    4194:	e57fef16 	blt	fp,r21,4154 <__alt_mem_Flash_flash_data+0xf4004154>
    4198:	dac02c17 	ldw	r11,176(sp)
    419c:	1d47883a 	add	r3,r3,r21
    41a0:	10800044 	addi	r2,r2,1
    41a4:	42c00015 	stw	r11,0(r8)
    41a8:	45400115 	stw	r21,4(r8)
    41ac:	d8c02015 	stw	r3,128(sp)
    41b0:	d8801f15 	stw	r2,124(sp)
    41b4:	010001c4 	movi	r4,7
    41b8:	20819116 	blt	r4,r2,4800 <___vfprintf_internal_r+0x15b4>
    41bc:	42000204 	addi	r8,r8,8
    41c0:	003dd206 	br	390c <__alt_mem_Flash_flash_data+0xf400390c>
    41c4:	db003317 	ldw	r12,204(sp)
    41c8:	00800044 	movi	r2,1
    41cc:	18c00044 	addi	r3,r3,1
    41d0:	1301530e 	bge	r2,r12,4720 <___vfprintf_internal_r+0x14d4>
    41d4:	dc001f17 	ldw	r16,124(sp)
    41d8:	dac03117 	ldw	r11,196(sp)
    41dc:	00800044 	movi	r2,1
    41e0:	84000044 	addi	r16,r16,1
    41e4:	40800115 	stw	r2,4(r8)
    41e8:	42c00015 	stw	r11,0(r8)
    41ec:	d8c02015 	stw	r3,128(sp)
    41f0:	dc001f15 	stw	r16,124(sp)
    41f4:	008001c4 	movi	r2,7
    41f8:	14016b16 	blt	r2,r16,47a8 <___vfprintf_internal_r+0x155c>
    41fc:	42000204 	addi	r8,r8,8
    4200:	db003817 	ldw	r12,224(sp)
    4204:	dac03517 	ldw	r11,212(sp)
    4208:	84000044 	addi	r16,r16,1
    420c:	1b07883a 	add	r3,r3,r12
    4210:	42c00015 	stw	r11,0(r8)
    4214:	43000115 	stw	r12,4(r8)
    4218:	d8c02015 	stw	r3,128(sp)
    421c:	dc001f15 	stw	r16,124(sp)
    4220:	008001c4 	movi	r2,7
    4224:	14016916 	blt	r2,r16,47cc <___vfprintf_internal_r+0x1580>
    4228:	44800204 	addi	r18,r8,8
    422c:	d9003717 	ldw	r4,220(sp)
    4230:	d9403917 	ldw	r5,228(sp)
    4234:	000d883a 	mov	r6,zero
    4238:	000f883a 	mov	r7,zero
    423c:	d8c03d15 	stw	r3,244(sp)
    4240:	000e9c00 	call	e9c0 <__eqdf2>
    4244:	d8c03d17 	ldw	r3,244(sp)
    4248:	db003317 	ldw	r12,204(sp)
    424c:	1000ad26 	beq	r2,zero,4504 <___vfprintf_internal_r+0x12b8>
    4250:	dac03117 	ldw	r11,196(sp)
    4254:	60bfffc4 	addi	r2,r12,-1
    4258:	1887883a 	add	r3,r3,r2
    425c:	59000044 	addi	r4,r11,1
    4260:	84000044 	addi	r16,r16,1
    4264:	90800115 	stw	r2,4(r18)
    4268:	91000015 	stw	r4,0(r18)
    426c:	d8c02015 	stw	r3,128(sp)
    4270:	dc001f15 	stw	r16,124(sp)
    4274:	008001c4 	movi	r2,7
    4278:	14014216 	blt	r2,r16,4784 <___vfprintf_internal_r+0x1538>
    427c:	94800204 	addi	r18,r18,8
    4280:	dac03a17 	ldw	r11,232(sp)
    4284:	dd4022c4 	addi	r21,sp,139
    4288:	84000044 	addi	r16,r16,1
    428c:	1ac7883a 	add	r3,r3,r11
    4290:	95400015 	stw	r21,0(r18)
    4294:	92c00115 	stw	r11,4(r18)
    4298:	d8c02015 	stw	r3,128(sp)
    429c:	dc001f15 	stw	r16,124(sp)
    42a0:	008001c4 	movi	r2,7
    42a4:	14000e16 	blt	r2,r16,42e0 <___vfprintf_internal_r+0x1094>
    42a8:	92000204 	addi	r8,r18,8
    42ac:	003dcd06 	br	39e4 <__alt_mem_Flash_flash_data+0xf40039e4>
    42b0:	010000b4 	movhi	r4,2
    42b4:	21021984 	addi	r4,r4,2150
    42b8:	d9002c15 	stw	r4,176(sp)
    42bc:	dac02c17 	ldw	r11,176(sp)
    42c0:	1c07883a 	add	r3,r3,r16
    42c4:	44000115 	stw	r16,4(r8)
    42c8:	42c00015 	stw	r11,0(r8)
    42cc:	10800044 	addi	r2,r2,1
    42d0:	d8c02015 	stw	r3,128(sp)
    42d4:	d8801f15 	stw	r2,124(sp)
    42d8:	010001c4 	movi	r4,7
    42dc:	20bdc00e 	bge	r4,r2,39e0 <__alt_mem_Flash_flash_data+0xf40039e0>
    42e0:	b009883a 	mov	r4,r22
    42e4:	b80b883a 	mov	r5,r23
    42e8:	d9801e04 	addi	r6,sp,120
    42ec:	000af1c0 	call	af1c <__sprint_r>
    42f0:	103cca1e 	bne	r2,zero,361c <__alt_mem_Flash_flash_data+0xf400361c>
    42f4:	d8c02017 	ldw	r3,128(sp)
    42f8:	da000404 	addi	r8,sp,16
    42fc:	003db906 	br	39e4 <__alt_mem_Flash_flash_data+0xf40039e4>
    4300:	b009883a 	mov	r4,r22
    4304:	b80b883a 	mov	r5,r23
    4308:	d9801e04 	addi	r6,sp,120
    430c:	000af1c0 	call	af1c <__sprint_r>
    4310:	103def26 	beq	r2,zero,3ad0 <__alt_mem_Flash_flash_data+0xf4003ad0>
    4314:	003cc106 	br	361c <__alt_mem_Flash_flash_data+0xf400361c>
    4318:	10803fcc 	andi	r2,r2,255
    431c:	1000651e 	bne	r2,zero,44b4 <___vfprintf_internal_r+0x1268>
    4320:	8880004c 	andi	r2,r17,1
    4324:	10013226 	beq	r2,zero,47f0 <___vfprintf_internal_r+0x15a4>
    4328:	00800c04 	movi	r2,48
    432c:	d8c01dc4 	addi	r3,sp,119
    4330:	d8801dc5 	stb	r2,119(sp)
    4334:	dc803c17 	ldw	r18,240(sp)
    4338:	d8c03115 	stw	r3,196(sp)
    433c:	003d1106 	br	3784 <__alt_mem_Flash_flash_data+0xf4003784>
    4340:	b009883a 	mov	r4,r22
    4344:	b80b883a 	mov	r5,r23
    4348:	d9801e04 	addi	r6,sp,120
    434c:	000af1c0 	call	af1c <__sprint_r>
    4350:	103cb21e 	bne	r2,zero,361c <__alt_mem_Flash_flash_data+0xf400361c>
    4354:	d8c02017 	ldw	r3,128(sp)
    4358:	da000404 	addi	r8,sp,16
    435c:	003d9406 	br	39b0 <__alt_mem_Flash_flash_data+0xf40039b0>
    4360:	b009883a 	mov	r4,r22
    4364:	b80b883a 	mov	r5,r23
    4368:	d9801e04 	addi	r6,sp,120
    436c:	000af1c0 	call	af1c <__sprint_r>
    4370:	103caa1e 	bne	r2,zero,361c <__alt_mem_Flash_flash_data+0xf400361c>
    4374:	d8c02017 	ldw	r3,128(sp)
    4378:	da000404 	addi	r8,sp,16
    437c:	003d5206 	br	38c8 <__alt_mem_Flash_flash_data+0xf40038c8>
    4380:	b009883a 	mov	r4,r22
    4384:	b80b883a 	mov	r5,r23
    4388:	d9801e04 	addi	r6,sp,120
    438c:	000af1c0 	call	af1c <__sprint_r>
    4390:	103ca21e 	bne	r2,zero,361c <__alt_mem_Flash_flash_data+0xf400361c>
    4394:	d8c02017 	ldw	r3,128(sp)
    4398:	da000404 	addi	r8,sp,16
    439c:	003d5806 	br	3900 <__alt_mem_Flash_flash_data+0xf4003900>
    43a0:	d9403b17 	ldw	r5,236(sp)
    43a4:	d8c01e04 	addi	r3,sp,120
    43a8:	988003cc 	andi	r2,r19,15
    43ac:	e008973a 	slli	r4,fp,28
    43b0:	2885883a 	add	r2,r5,r2
    43b4:	9826d13a 	srli	r19,r19,4
    43b8:	10800003 	ldbu	r2,0(r2)
    43bc:	e038d13a 	srli	fp,fp,4
    43c0:	18ffffc4 	addi	r3,r3,-1
    43c4:	24e6b03a 	or	r19,r4,r19
    43c8:	18800005 	stb	r2,0(r3)
    43cc:	9f04b03a 	or	r2,r19,fp
    43d0:	103ff51e 	bne	r2,zero,43a8 <__alt_mem_Flash_flash_data+0xf40043a8>
    43d4:	db002817 	ldw	r12,160(sp)
    43d8:	d8c03115 	stw	r3,196(sp)
    43dc:	60e5c83a 	sub	r18,r12,r3
    43e0:	003ce806 	br	3784 <__alt_mem_Flash_flash_data+0xf4003784>
    43e4:	dc002617 	ldw	r16,152(sp)
    43e8:	0401b10e 	bge	zero,r16,4ab0 <___vfprintf_internal_r+0x1864>
    43ec:	db003117 	ldw	r12,196(sp)
    43f0:	dac03317 	ldw	r11,204(sp)
    43f4:	62e1883a 	add	r16,r12,r11
    43f8:	db003417 	ldw	r12,208(sp)
    43fc:	5825883a 	mov	r18,r11
    4400:	62c0010e 	bge	r12,r11,4408 <___vfprintf_internal_r+0x11bc>
    4404:	6025883a 	mov	r18,r12
    4408:	04800b0e 	bge	zero,r18,4438 <___vfprintf_internal_r+0x11ec>
    440c:	d8801f17 	ldw	r2,124(sp)
    4410:	dac03117 	ldw	r11,196(sp)
    4414:	1c87883a 	add	r3,r3,r18
    4418:	10800044 	addi	r2,r2,1
    441c:	42c00015 	stw	r11,0(r8)
    4420:	44800115 	stw	r18,4(r8)
    4424:	d8c02015 	stw	r3,128(sp)
    4428:	d8801f15 	stw	r2,124(sp)
    442c:	010001c4 	movi	r4,7
    4430:	20824f16 	blt	r4,r2,4d70 <___vfprintf_internal_r+0x1b24>
    4434:	42000204 	addi	r8,r8,8
    4438:	90024b16 	blt	r18,zero,4d68 <___vfprintf_internal_r+0x1b1c>
    443c:	db003417 	ldw	r12,208(sp)
    4440:	64a5c83a 	sub	r18,r12,r18
    4444:	0480730e 	bge	zero,r18,4614 <___vfprintf_internal_r+0x13c8>
    4448:	05400404 	movi	r21,16
    444c:	d8801f17 	ldw	r2,124(sp)
    4450:	ac817d0e 	bge	r21,r18,4a48 <___vfprintf_internal_r+0x17fc>
    4454:	014000b4 	movhi	r5,2
    4458:	29421984 	addi	r5,r5,2150
    445c:	d9402c15 	stw	r5,176(sp)
    4460:	070001c4 	movi	fp,7
    4464:	00000306 	br	4474 <___vfprintf_internal_r+0x1228>
    4468:	42000204 	addi	r8,r8,8
    446c:	94bffc04 	addi	r18,r18,-16
    4470:	ac81780e 	bge	r21,r18,4a54 <___vfprintf_internal_r+0x1808>
    4474:	18c00404 	addi	r3,r3,16
    4478:	10800044 	addi	r2,r2,1
    447c:	45000015 	stw	r20,0(r8)
    4480:	45400115 	stw	r21,4(r8)
    4484:	d8c02015 	stw	r3,128(sp)
    4488:	d8801f15 	stw	r2,124(sp)
    448c:	e0bff60e 	bge	fp,r2,4468 <__alt_mem_Flash_flash_data+0xf4004468>
    4490:	b009883a 	mov	r4,r22
    4494:	b80b883a 	mov	r5,r23
    4498:	d9801e04 	addi	r6,sp,120
    449c:	000af1c0 	call	af1c <__sprint_r>
    44a0:	103c5e1e 	bne	r2,zero,361c <__alt_mem_Flash_flash_data+0xf400361c>
    44a4:	d8c02017 	ldw	r3,128(sp)
    44a8:	d8801f17 	ldw	r2,124(sp)
    44ac:	da000404 	addi	r8,sp,16
    44b0:	003fee06 	br	446c <__alt_mem_Flash_flash_data+0xf400446c>
    44b4:	dac01e04 	addi	r11,sp,120
    44b8:	0025883a 	mov	r18,zero
    44bc:	dac03115 	stw	r11,196(sp)
    44c0:	003cb006 	br	3784 <__alt_mem_Flash_flash_data+0xf4003784>
    44c4:	b009883a 	mov	r4,r22
    44c8:	b80b883a 	mov	r5,r23
    44cc:	d9801e04 	addi	r6,sp,120
    44d0:	000af1c0 	call	af1c <__sprint_r>
    44d4:	103c511e 	bne	r2,zero,361c <__alt_mem_Flash_flash_data+0xf400361c>
    44d8:	d8c02017 	ldw	r3,128(sp)
    44dc:	d8802787 	ldb	r2,158(sp)
    44e0:	da000404 	addi	r8,sp,16
    44e4:	003ceb06 	br	3894 <__alt_mem_Flash_flash_data+0xf4003894>
    44e8:	1cc00017 	ldw	r19,0(r3)
    44ec:	dac02d17 	ldw	r11,180(sp)
    44f0:	9839d7fa 	srai	fp,r19,31
    44f4:	5ac00104 	addi	r11,r11,4
    44f8:	dac02d15 	stw	r11,180(sp)
    44fc:	e005883a 	mov	r2,fp
    4500:	003c8106 	br	3708 <__alt_mem_Flash_flash_data+0xf4003708>
    4504:	657fffc4 	addi	r21,r12,-1
    4508:	057f5d0e 	bge	zero,r21,4280 <__alt_mem_Flash_flash_data+0xf4004280>
    450c:	07000404 	movi	fp,16
    4510:	e540900e 	bge	fp,r21,4754 <___vfprintf_internal_r+0x1508>
    4514:	010000b4 	movhi	r4,2
    4518:	21021984 	addi	r4,r4,2150
    451c:	d9002c15 	stw	r4,176(sp)
    4520:	01c001c4 	movi	r7,7
    4524:	00000306 	br	4534 <___vfprintf_internal_r+0x12e8>
    4528:	94800204 	addi	r18,r18,8
    452c:	ad7ffc04 	addi	r21,r21,-16
    4530:	e5408b0e 	bge	fp,r21,4760 <___vfprintf_internal_r+0x1514>
    4534:	18c00404 	addi	r3,r3,16
    4538:	84000044 	addi	r16,r16,1
    453c:	95000015 	stw	r20,0(r18)
    4540:	97000115 	stw	fp,4(r18)
    4544:	d8c02015 	stw	r3,128(sp)
    4548:	dc001f15 	stw	r16,124(sp)
    454c:	3c3ff60e 	bge	r7,r16,4528 <__alt_mem_Flash_flash_data+0xf4004528>
    4550:	b009883a 	mov	r4,r22
    4554:	b80b883a 	mov	r5,r23
    4558:	d9801e04 	addi	r6,sp,120
    455c:	d9c03d15 	stw	r7,244(sp)
    4560:	000af1c0 	call	af1c <__sprint_r>
    4564:	d9c03d17 	ldw	r7,244(sp)
    4568:	103c2c1e 	bne	r2,zero,361c <__alt_mem_Flash_flash_data+0xf400361c>
    456c:	d8c02017 	ldw	r3,128(sp)
    4570:	dc001f17 	ldw	r16,124(sp)
    4574:	dc800404 	addi	r18,sp,16
    4578:	003fec06 	br	452c <__alt_mem_Flash_flash_data+0xf400452c>
    457c:	dac02d17 	ldw	r11,180(sp)
    4580:	0039883a 	mov	fp,zero
    4584:	0005883a 	mov	r2,zero
    4588:	5cc00017 	ldw	r19,0(r11)
    458c:	5ac00104 	addi	r11,r11,4
    4590:	dac02d15 	stw	r11,180(sp)
    4594:	9807883a 	mov	r3,r19
    4598:	003d5b06 	br	3b08 <__alt_mem_Flash_flash_data+0xf4003b08>
    459c:	db002d17 	ldw	r12,180(sp)
    45a0:	0039883a 	mov	fp,zero
    45a4:	00800044 	movi	r2,1
    45a8:	64c00017 	ldw	r19,0(r12)
    45ac:	63000104 	addi	r12,r12,4
    45b0:	db002d15 	stw	r12,180(sp)
    45b4:	9807883a 	mov	r3,r19
    45b8:	003d5306 	br	3b08 <__alt_mem_Flash_flash_data+0xf4003b08>
    45bc:	00800084 	movi	r2,2
    45c0:	9f06b03a 	or	r3,r19,fp
    45c4:	003d5006 	br	3b08 <__alt_mem_Flash_flash_data+0xf4003b08>
    45c8:	10803fcc 	andi	r2,r2,255
    45cc:	1080201c 	xori	r2,r2,128
    45d0:	10bfe004 	addi	r2,r2,-128
    45d4:	01000c04 	movi	r4,48
    45d8:	1101a526 	beq	r2,r4,4c70 <___vfprintf_internal_r+0x1a24>
    45dc:	dac03117 	ldw	r11,196(sp)
    45e0:	db002817 	ldw	r12,160(sp)
    45e4:	193fffc5 	stb	r4,-1(r3)
    45e8:	5affffc4 	addi	r11,r11,-1
    45ec:	dac03115 	stw	r11,196(sp)
    45f0:	62e5c83a 	sub	r18,r12,r11
    45f4:	003c6306 	br	3784 <__alt_mem_Flash_flash_data+0xf4003784>
    45f8:	b009883a 	mov	r4,r22
    45fc:	b80b883a 	mov	r5,r23
    4600:	d9801e04 	addi	r6,sp,120
    4604:	000af1c0 	call	af1c <__sprint_r>
    4608:	103c041e 	bne	r2,zero,361c <__alt_mem_Flash_flash_data+0xf400361c>
    460c:	d8c02017 	ldw	r3,128(sp)
    4610:	da000404 	addi	r8,sp,16
    4614:	db003117 	ldw	r12,196(sp)
    4618:	dac03417 	ldw	r11,208(sp)
    461c:	d8802617 	ldw	r2,152(sp)
    4620:	62e5883a 	add	r18,r12,r11
    4624:	db003317 	ldw	r12,204(sp)
    4628:	13000216 	blt	r2,r12,4634 <___vfprintf_internal_r+0x13e8>
    462c:	8900004c 	andi	r4,r17,1
    4630:	20000c26 	beq	r4,zero,4664 <___vfprintf_internal_r+0x1418>
    4634:	dac03817 	ldw	r11,224(sp)
    4638:	d9001f17 	ldw	r4,124(sp)
    463c:	db003517 	ldw	r12,212(sp)
    4640:	1ac7883a 	add	r3,r3,r11
    4644:	21000044 	addi	r4,r4,1
    4648:	43000015 	stw	r12,0(r8)
    464c:	42c00115 	stw	r11,4(r8)
    4650:	d8c02015 	stw	r3,128(sp)
    4654:	d9001f15 	stw	r4,124(sp)
    4658:	014001c4 	movi	r5,7
    465c:	2901cc16 	blt	r5,r4,4d90 <___vfprintf_internal_r+0x1b44>
    4660:	42000204 	addi	r8,r8,8
    4664:	dac03317 	ldw	r11,204(sp)
    4668:	8489c83a 	sub	r4,r16,r18
    466c:	5885c83a 	sub	r2,r11,r2
    4670:	1021883a 	mov	r16,r2
    4674:	2080010e 	bge	r4,r2,467c <___vfprintf_internal_r+0x1430>
    4678:	2021883a 	mov	r16,r4
    467c:	04000a0e 	bge	zero,r16,46a8 <___vfprintf_internal_r+0x145c>
    4680:	d9001f17 	ldw	r4,124(sp)
    4684:	1c07883a 	add	r3,r3,r16
    4688:	44800015 	stw	r18,0(r8)
    468c:	21000044 	addi	r4,r4,1
    4690:	44000115 	stw	r16,4(r8)
    4694:	d8c02015 	stw	r3,128(sp)
    4698:	d9001f15 	stw	r4,124(sp)
    469c:	014001c4 	movi	r5,7
    46a0:	2901e316 	blt	r5,r4,4e30 <___vfprintf_internal_r+0x1be4>
    46a4:	42000204 	addi	r8,r8,8
    46a8:	8001df16 	blt	r16,zero,4e28 <___vfprintf_internal_r+0x1bdc>
    46ac:	1421c83a 	sub	r16,r2,r16
    46b0:	043ccc0e 	bge	zero,r16,39e4 <__alt_mem_Flash_flash_data+0xf40039e4>
    46b4:	04800404 	movi	r18,16
    46b8:	d8801f17 	ldw	r2,124(sp)
    46bc:	943efc0e 	bge	r18,r16,42b0 <__alt_mem_Flash_flash_data+0xf40042b0>
    46c0:	014000b4 	movhi	r5,2
    46c4:	29421984 	addi	r5,r5,2150
    46c8:	d9402c15 	stw	r5,176(sp)
    46cc:	054001c4 	movi	r21,7
    46d0:	00000306 	br	46e0 <___vfprintf_internal_r+0x1494>
    46d4:	42000204 	addi	r8,r8,8
    46d8:	843ffc04 	addi	r16,r16,-16
    46dc:	943ef70e 	bge	r18,r16,42bc <__alt_mem_Flash_flash_data+0xf40042bc>
    46e0:	18c00404 	addi	r3,r3,16
    46e4:	10800044 	addi	r2,r2,1
    46e8:	45000015 	stw	r20,0(r8)
    46ec:	44800115 	stw	r18,4(r8)
    46f0:	d8c02015 	stw	r3,128(sp)
    46f4:	d8801f15 	stw	r2,124(sp)
    46f8:	a8bff60e 	bge	r21,r2,46d4 <__alt_mem_Flash_flash_data+0xf40046d4>
    46fc:	b009883a 	mov	r4,r22
    4700:	b80b883a 	mov	r5,r23
    4704:	d9801e04 	addi	r6,sp,120
    4708:	000af1c0 	call	af1c <__sprint_r>
    470c:	103bc31e 	bne	r2,zero,361c <__alt_mem_Flash_flash_data+0xf400361c>
    4710:	d8c02017 	ldw	r3,128(sp)
    4714:	d8801f17 	ldw	r2,124(sp)
    4718:	da000404 	addi	r8,sp,16
    471c:	003fee06 	br	46d8 <__alt_mem_Flash_flash_data+0xf40046d8>
    4720:	8888703a 	and	r4,r17,r2
    4724:	203eab1e 	bne	r4,zero,41d4 <__alt_mem_Flash_flash_data+0xf40041d4>
    4728:	dc001f17 	ldw	r16,124(sp)
    472c:	db003117 	ldw	r12,196(sp)
    4730:	40800115 	stw	r2,4(r8)
    4734:	84000044 	addi	r16,r16,1
    4738:	43000015 	stw	r12,0(r8)
    473c:	d8c02015 	stw	r3,128(sp)
    4740:	dc001f15 	stw	r16,124(sp)
    4744:	008001c4 	movi	r2,7
    4748:	14000e16 	blt	r2,r16,4784 <___vfprintf_internal_r+0x1538>
    474c:	44800204 	addi	r18,r8,8
    4750:	003ecb06 	br	4280 <__alt_mem_Flash_flash_data+0xf4004280>
    4754:	008000b4 	movhi	r2,2
    4758:	10821984 	addi	r2,r2,2150
    475c:	d8802c15 	stw	r2,176(sp)
    4760:	dac02c17 	ldw	r11,176(sp)
    4764:	1d47883a 	add	r3,r3,r21
    4768:	84000044 	addi	r16,r16,1
    476c:	92c00015 	stw	r11,0(r18)
    4770:	95400115 	stw	r21,4(r18)
    4774:	d8c02015 	stw	r3,128(sp)
    4778:	dc001f15 	stw	r16,124(sp)
    477c:	008001c4 	movi	r2,7
    4780:	143ebe0e 	bge	r2,r16,427c <__alt_mem_Flash_flash_data+0xf400427c>
    4784:	b009883a 	mov	r4,r22
    4788:	b80b883a 	mov	r5,r23
    478c:	d9801e04 	addi	r6,sp,120
    4790:	000af1c0 	call	af1c <__sprint_r>
    4794:	103ba11e 	bne	r2,zero,361c <__alt_mem_Flash_flash_data+0xf400361c>
    4798:	d8c02017 	ldw	r3,128(sp)
    479c:	dc001f17 	ldw	r16,124(sp)
    47a0:	dc800404 	addi	r18,sp,16
    47a4:	003eb606 	br	4280 <__alt_mem_Flash_flash_data+0xf4004280>
    47a8:	b009883a 	mov	r4,r22
    47ac:	b80b883a 	mov	r5,r23
    47b0:	d9801e04 	addi	r6,sp,120
    47b4:	000af1c0 	call	af1c <__sprint_r>
    47b8:	103b981e 	bne	r2,zero,361c <__alt_mem_Flash_flash_data+0xf400361c>
    47bc:	d8c02017 	ldw	r3,128(sp)
    47c0:	dc001f17 	ldw	r16,124(sp)
    47c4:	da000404 	addi	r8,sp,16
    47c8:	003e8d06 	br	4200 <__alt_mem_Flash_flash_data+0xf4004200>
    47cc:	b009883a 	mov	r4,r22
    47d0:	b80b883a 	mov	r5,r23
    47d4:	d9801e04 	addi	r6,sp,120
    47d8:	000af1c0 	call	af1c <__sprint_r>
    47dc:	103b8f1e 	bne	r2,zero,361c <__alt_mem_Flash_flash_data+0xf400361c>
    47e0:	d8c02017 	ldw	r3,128(sp)
    47e4:	dc001f17 	ldw	r16,124(sp)
    47e8:	dc800404 	addi	r18,sp,16
    47ec:	003e8f06 	br	422c <__alt_mem_Flash_flash_data+0xf400422c>
    47f0:	db001e04 	addi	r12,sp,120
    47f4:	0025883a 	mov	r18,zero
    47f8:	db003115 	stw	r12,196(sp)
    47fc:	003be106 	br	3784 <__alt_mem_Flash_flash_data+0xf4003784>
    4800:	b009883a 	mov	r4,r22
    4804:	b80b883a 	mov	r5,r23
    4808:	d9801e04 	addi	r6,sp,120
    480c:	000af1c0 	call	af1c <__sprint_r>
    4810:	103b821e 	bne	r2,zero,361c <__alt_mem_Flash_flash_data+0xf400361c>
    4814:	d8c02017 	ldw	r3,128(sp)
    4818:	da000404 	addi	r8,sp,16
    481c:	003c3b06 	br	390c <__alt_mem_Flash_flash_data+0xf400390c>
    4820:	04e7c83a 	sub	r19,zero,r19
    4824:	9804c03a 	cmpne	r2,r19,zero
    4828:	0739c83a 	sub	fp,zero,fp
    482c:	e0b9c83a 	sub	fp,fp,r2
    4830:	05400b44 	movi	r21,45
    4834:	dd402785 	stb	r21,158(sp)
    4838:	da403215 	stw	r9,200(sp)
    483c:	00800044 	movi	r2,1
    4840:	9f06b03a 	or	r3,r19,fp
    4844:	003bb506 	br	371c <__alt_mem_Flash_flash_data+0xf400371c>
    4848:	da003f15 	stw	r8,252(sp)
    484c:	da403e15 	stw	r9,248(sp)
    4850:	00099c80 	call	99c8 <__fpclassifyd>
    4854:	da003f17 	ldw	r8,252(sp)
    4858:	da403e17 	ldw	r9,248(sp)
    485c:	1000ce26 	beq	r2,zero,4b98 <___vfprintf_internal_r+0x194c>
    4860:	057ff7c4 	movi	r21,-33
    4864:	00bfffc4 	movi	r2,-1
    4868:	856a703a 	and	r21,r16,r21
    486c:	4881e826 	beq	r9,r2,5010 <___vfprintf_internal_r+0x1dc4>
    4870:	008011c4 	movi	r2,71
    4874:	a881e326 	beq	r21,r2,5004 <___vfprintf_internal_r+0x1db8>
    4878:	db003917 	ldw	r12,228(sp)
    487c:	8ac04014 	ori	r11,r17,256
    4880:	dac02d15 	stw	r11,180(sp)
    4884:	6001ed16 	blt	r12,zero,503c <___vfprintf_internal_r+0x1df0>
    4888:	dc803917 	ldw	r18,228(sp)
    488c:	d8002b05 	stb	zero,172(sp)
    4890:	00801984 	movi	r2,102
    4894:	80811826 	beq	r16,r2,4cf8 <___vfprintf_internal_r+0x1aac>
    4898:	00801184 	movi	r2,70
    489c:	80811626 	beq	r16,r2,4cf8 <___vfprintf_internal_r+0x1aac>
    48a0:	00801144 	movi	r2,69
    48a4:	a881e926 	beq	r21,r2,504c <___vfprintf_internal_r+0x1e00>
    48a8:	4839883a 	mov	fp,r9
    48ac:	d8802604 	addi	r2,sp,152
    48b0:	d8800115 	stw	r2,4(sp)
    48b4:	d9403717 	ldw	r5,220(sp)
    48b8:	d8802504 	addi	r2,sp,148
    48bc:	d8800215 	stw	r2,8(sp)
    48c0:	d8802104 	addi	r2,sp,132
    48c4:	df000015 	stw	fp,0(sp)
    48c8:	d8800315 	stw	r2,12(sp)
    48cc:	b009883a 	mov	r4,r22
    48d0:	900d883a 	mov	r6,r18
    48d4:	01c00084 	movi	r7,2
    48d8:	da003f15 	stw	r8,252(sp)
    48dc:	da403e15 	stw	r9,248(sp)
    48e0:	00055d00 	call	55d0 <_dtoa_r>
    48e4:	d8803115 	stw	r2,196(sp)
    48e8:	008019c4 	movi	r2,103
    48ec:	da003f17 	ldw	r8,252(sp)
    48f0:	da403e17 	ldw	r9,248(sp)
    48f4:	80800226 	beq	r16,r2,4900 <___vfprintf_internal_r+0x16b4>
    48f8:	008011c4 	movi	r2,71
    48fc:	8081101e 	bne	r16,r2,4d40 <___vfprintf_internal_r+0x1af4>
    4900:	8880004c 	andi	r2,r17,1
    4904:	1001dd26 	beq	r2,zero,507c <___vfprintf_internal_r+0x1e30>
    4908:	db003117 	ldw	r12,196(sp)
    490c:	6715883a 	add	r10,r12,fp
    4910:	d9003717 	ldw	r4,220(sp)
    4914:	900b883a 	mov	r5,r18
    4918:	000d883a 	mov	r6,zero
    491c:	000f883a 	mov	r7,zero
    4920:	da003f15 	stw	r8,252(sp)
    4924:	da403e15 	stw	r9,248(sp)
    4928:	da803d15 	stw	r10,244(sp)
    492c:	000e9c00 	call	e9c0 <__eqdf2>
    4930:	da003f17 	ldw	r8,252(sp)
    4934:	da403e17 	ldw	r9,248(sp)
    4938:	da803d17 	ldw	r10,244(sp)
    493c:	10016526 	beq	r2,zero,4ed4 <___vfprintf_internal_r+0x1c88>
    4940:	d8802117 	ldw	r2,132(sp)
    4944:	1280062e 	bgeu	r2,r10,4960 <___vfprintf_internal_r+0x1714>
    4948:	01000c04 	movi	r4,48
    494c:	10c00044 	addi	r3,r2,1
    4950:	d8c02115 	stw	r3,132(sp)
    4954:	11000005 	stb	r4,0(r2)
    4958:	d8802117 	ldw	r2,132(sp)
    495c:	12bffb36 	bltu	r2,r10,494c <__alt_mem_Flash_flash_data+0xf400494c>
    4960:	db003117 	ldw	r12,196(sp)
    4964:	1305c83a 	sub	r2,r2,r12
    4968:	d8803315 	stw	r2,204(sp)
    496c:	008011c4 	movi	r2,71
    4970:	a8814d26 	beq	r21,r2,4ea8 <___vfprintf_internal_r+0x1c5c>
    4974:	00801944 	movi	r2,101
    4978:	1402060e 	bge	r2,r16,5194 <___vfprintf_internal_r+0x1f48>
    497c:	00801984 	movi	r2,102
    4980:	8081b426 	beq	r16,r2,5054 <___vfprintf_internal_r+0x1e08>
    4984:	db002617 	ldw	r12,152(sp)
    4988:	db003415 	stw	r12,208(sp)
    498c:	db003417 	ldw	r12,208(sp)
    4990:	dac03317 	ldw	r11,204(sp)
    4994:	62c1a016 	blt	r12,r11,5018 <___vfprintf_internal_r+0x1dcc>
    4998:	8c40004c 	andi	r17,r17,1
    499c:	8801bf1e 	bne	r17,zero,509c <___vfprintf_internal_r+0x1e50>
    49a0:	6005883a 	mov	r2,r12
    49a4:	6001b316 	blt	r12,zero,5074 <___vfprintf_internal_r+0x1e28>
    49a8:	dc803417 	ldw	r18,208(sp)
    49ac:	df002b07 	ldb	fp,172(sp)
    49b0:	e0012e1e 	bne	fp,zero,4e6c <___vfprintf_internal_r+0x1c20>
    49b4:	dc402d17 	ldw	r17,180(sp)
    49b8:	dd402783 	ldbu	r21,158(sp)
    49bc:	d8802b15 	stw	r2,172(sp)
    49c0:	dcc02d15 	stw	r19,180(sp)
    49c4:	d8003215 	stw	zero,200(sp)
    49c8:	003b7306 	br	3798 <__alt_mem_Flash_flash_data+0xf4003798>
    49cc:	00800084 	movi	r2,2
    49d0:	003c4d06 	br	3b08 <__alt_mem_Flash_flash_data+0xf4003b08>
    49d4:	8880040c 	andi	r2,r17,16
    49d8:	1000091e 	bne	r2,zero,4a00 <___vfprintf_internal_r+0x17b4>
    49dc:	8c40100c 	andi	r17,r17,64
    49e0:	88000726 	beq	r17,zero,4a00 <___vfprintf_internal_r+0x17b4>
    49e4:	db002d17 	ldw	r12,180(sp)
    49e8:	dac02f17 	ldw	r11,188(sp)
    49ec:	60800017 	ldw	r2,0(r12)
    49f0:	63000104 	addi	r12,r12,4
    49f4:	db002d15 	stw	r12,180(sp)
    49f8:	12c0000d 	sth	r11,0(r2)
    49fc:	003a4e06 	br	3338 <__alt_mem_Flash_flash_data+0xf4003338>
    4a00:	db002d17 	ldw	r12,180(sp)
    4a04:	dac02f17 	ldw	r11,188(sp)
    4a08:	60800017 	ldw	r2,0(r12)
    4a0c:	63000104 	addi	r12,r12,4
    4a10:	db002d15 	stw	r12,180(sp)
    4a14:	12c00015 	stw	r11,0(r2)
    4a18:	003a4706 	br	3338 <__alt_mem_Flash_flash_data+0xf4003338>
    4a1c:	1c000007 	ldb	r16,0(r3)
    4a20:	1805883a 	mov	r2,r3
    4a24:	003a6e06 	br	33e0 <__alt_mem_Flash_flash_data+0xf40033e0>
    4a28:	88c0100c 	andi	r3,r17,64
    4a2c:	18006b26 	beq	r3,zero,4bdc <___vfprintf_internal_r+0x1990>
    4a30:	dac02d17 	ldw	r11,180(sp)
    4a34:	14c0000b 	ldhu	r19,0(r2)
    4a38:	0039883a 	mov	fp,zero
    4a3c:	5ac00104 	addi	r11,r11,4
    4a40:	dac02d15 	stw	r11,180(sp)
    4a44:	003cb206 	br	3d10 <__alt_mem_Flash_flash_data+0xf4003d10>
    4a48:	010000b4 	movhi	r4,2
    4a4c:	21021984 	addi	r4,r4,2150
    4a50:	d9002c15 	stw	r4,176(sp)
    4a54:	dac02c17 	ldw	r11,176(sp)
    4a58:	1c87883a 	add	r3,r3,r18
    4a5c:	10800044 	addi	r2,r2,1
    4a60:	42c00015 	stw	r11,0(r8)
    4a64:	44800115 	stw	r18,4(r8)
    4a68:	d8c02015 	stw	r3,128(sp)
    4a6c:	d8801f15 	stw	r2,124(sp)
    4a70:	010001c4 	movi	r4,7
    4a74:	20bee016 	blt	r4,r2,45f8 <__alt_mem_Flash_flash_data+0xf40045f8>
    4a78:	42000204 	addi	r8,r8,8
    4a7c:	003ee506 	br	4614 <__alt_mem_Flash_flash_data+0xf4004614>
    4a80:	010000b4 	movhi	r4,2
    4a84:	21021984 	addi	r4,r4,2150
    4a88:	d9002c15 	stw	r4,176(sp)
    4a8c:	003bbe06 	br	3988 <__alt_mem_Flash_flash_data+0xf4003988>
    4a90:	b009883a 	mov	r4,r22
    4a94:	b80b883a 	mov	r5,r23
    4a98:	d9801e04 	addi	r6,sp,120
    4a9c:	000af1c0 	call	af1c <__sprint_r>
    4aa0:	103ade1e 	bne	r2,zero,361c <__alt_mem_Flash_flash_data+0xf400361c>
    4aa4:	d8c02017 	ldw	r3,128(sp)
    4aa8:	da000404 	addi	r8,sp,16
    4aac:	003d6b06 	br	405c <__alt_mem_Flash_flash_data+0xf400405c>
    4ab0:	d8801f17 	ldw	r2,124(sp)
    4ab4:	030000b4 	movhi	r12,2
    4ab8:	01000044 	movi	r4,1
    4abc:	18c00044 	addi	r3,r3,1
    4ac0:	10800044 	addi	r2,r2,1
    4ac4:	63021104 	addi	r12,r12,2116
    4ac8:	41000115 	stw	r4,4(r8)
    4acc:	43000015 	stw	r12,0(r8)
    4ad0:	d8c02015 	stw	r3,128(sp)
    4ad4:	d8801f15 	stw	r2,124(sp)
    4ad8:	010001c4 	movi	r4,7
    4adc:	20804916 	blt	r4,r2,4c04 <___vfprintf_internal_r+0x19b8>
    4ae0:	42000204 	addi	r8,r8,8
    4ae4:	8000041e 	bne	r16,zero,4af8 <___vfprintf_internal_r+0x18ac>
    4ae8:	dac03317 	ldw	r11,204(sp)
    4aec:	5800021e 	bne	r11,zero,4af8 <___vfprintf_internal_r+0x18ac>
    4af0:	8880004c 	andi	r2,r17,1
    4af4:	103bbb26 	beq	r2,zero,39e4 <__alt_mem_Flash_flash_data+0xf40039e4>
    4af8:	db003817 	ldw	r12,224(sp)
    4afc:	d8801f17 	ldw	r2,124(sp)
    4b00:	dac03517 	ldw	r11,212(sp)
    4b04:	1b07883a 	add	r3,r3,r12
    4b08:	10800044 	addi	r2,r2,1
    4b0c:	42c00015 	stw	r11,0(r8)
    4b10:	43000115 	stw	r12,4(r8)
    4b14:	d8c02015 	stw	r3,128(sp)
    4b18:	d8801f15 	stw	r2,124(sp)
    4b1c:	010001c4 	movi	r4,7
    4b20:	20812e16 	blt	r4,r2,4fdc <___vfprintf_internal_r+0x1d90>
    4b24:	42000204 	addi	r8,r8,8
    4b28:	0421c83a 	sub	r16,zero,r16
    4b2c:	04005c0e 	bge	zero,r16,4ca0 <___vfprintf_internal_r+0x1a54>
    4b30:	04800404 	movi	r18,16
    4b34:	94009f0e 	bge	r18,r16,4db4 <___vfprintf_internal_r+0x1b68>
    4b38:	010000b4 	movhi	r4,2
    4b3c:	21021984 	addi	r4,r4,2150
    4b40:	d9002c15 	stw	r4,176(sp)
    4b44:	054001c4 	movi	r21,7
    4b48:	00000306 	br	4b58 <___vfprintf_internal_r+0x190c>
    4b4c:	42000204 	addi	r8,r8,8
    4b50:	843ffc04 	addi	r16,r16,-16
    4b54:	94009a0e 	bge	r18,r16,4dc0 <___vfprintf_internal_r+0x1b74>
    4b58:	18c00404 	addi	r3,r3,16
    4b5c:	10800044 	addi	r2,r2,1
    4b60:	45000015 	stw	r20,0(r8)
    4b64:	44800115 	stw	r18,4(r8)
    4b68:	d8c02015 	stw	r3,128(sp)
    4b6c:	d8801f15 	stw	r2,124(sp)
    4b70:	a8bff60e 	bge	r21,r2,4b4c <__alt_mem_Flash_flash_data+0xf4004b4c>
    4b74:	b009883a 	mov	r4,r22
    4b78:	b80b883a 	mov	r5,r23
    4b7c:	d9801e04 	addi	r6,sp,120
    4b80:	000af1c0 	call	af1c <__sprint_r>
    4b84:	103aa51e 	bne	r2,zero,361c <__alt_mem_Flash_flash_data+0xf400361c>
    4b88:	d8c02017 	ldw	r3,128(sp)
    4b8c:	d8801f17 	ldw	r2,124(sp)
    4b90:	da000404 	addi	r8,sp,16
    4b94:	003fee06 	br	4b50 <__alt_mem_Flash_flash_data+0xf4004b50>
    4b98:	008011c4 	movi	r2,71
    4b9c:	1400be16 	blt	r2,r16,4e98 <___vfprintf_internal_r+0x1c4c>
    4ba0:	030000b4 	movhi	r12,2
    4ba4:	63020304 	addi	r12,r12,2060
    4ba8:	db003115 	stw	r12,196(sp)
    4bac:	00c000c4 	movi	r3,3
    4bb0:	00bfdfc4 	movi	r2,-129
    4bb4:	d8c02b15 	stw	r3,172(sp)
    4bb8:	88a2703a 	and	r17,r17,r2
    4bbc:	dd402783 	ldbu	r21,158(sp)
    4bc0:	dcc02d15 	stw	r19,180(sp)
    4bc4:	1825883a 	mov	r18,r3
    4bc8:	d8003215 	stw	zero,200(sp)
    4bcc:	d8003415 	stw	zero,208(sp)
    4bd0:	003af106 	br	3798 <__alt_mem_Flash_flash_data+0xf4003798>
    4bd4:	4825883a 	mov	r18,r9
    4bd8:	003c9306 	br	3e28 <__alt_mem_Flash_flash_data+0xf4003e28>
    4bdc:	db002d17 	ldw	r12,180(sp)
    4be0:	14c00017 	ldw	r19,0(r2)
    4be4:	0039883a 	mov	fp,zero
    4be8:	63000104 	addi	r12,r12,4
    4bec:	db002d15 	stw	r12,180(sp)
    4bf0:	003c4706 	br	3d10 <__alt_mem_Flash_flash_data+0xf4003d10>
    4bf4:	008000b4 	movhi	r2,2
    4bf8:	10820104 	addi	r2,r2,2052
    4bfc:	d8803115 	stw	r2,196(sp)
    4c00:	003bf106 	br	3bc8 <__alt_mem_Flash_flash_data+0xf4003bc8>
    4c04:	b009883a 	mov	r4,r22
    4c08:	b80b883a 	mov	r5,r23
    4c0c:	d9801e04 	addi	r6,sp,120
    4c10:	000af1c0 	call	af1c <__sprint_r>
    4c14:	103a811e 	bne	r2,zero,361c <__alt_mem_Flash_flash_data+0xf400361c>
    4c18:	dc002617 	ldw	r16,152(sp)
    4c1c:	d8c02017 	ldw	r3,128(sp)
    4c20:	da000404 	addi	r8,sp,16
    4c24:	003faf06 	br	4ae4 <__alt_mem_Flash_flash_data+0xf4004ae4>
    4c28:	db002e17 	ldw	r12,184(sp)
    4c2c:	1805883a 	mov	r2,r3
    4c30:	dac02d15 	stw	r11,180(sp)
    4c34:	0319c83a 	sub	r12,zero,r12
    4c38:	db002e15 	stw	r12,184(sp)
    4c3c:	003a8206 	br	3648 <__alt_mem_Flash_flash_data+0xf4003648>
    4c40:	18800044 	addi	r2,r3,1
    4c44:	8c400814 	ori	r17,r17,32
    4c48:	1c000047 	ldb	r16,1(r3)
    4c4c:	0039e406 	br	33e0 <__alt_mem_Flash_flash_data+0xf40033e0>
    4c50:	b009883a 	mov	r4,r22
    4c54:	b80b883a 	mov	r5,r23
    4c58:	d9801e04 	addi	r6,sp,120
    4c5c:	000af1c0 	call	af1c <__sprint_r>
    4c60:	103a6e1e 	bne	r2,zero,361c <__alt_mem_Flash_flash_data+0xf400361c>
    4c64:	d8c02017 	ldw	r3,128(sp)
    4c68:	da000404 	addi	r8,sp,16
    4c6c:	003d0c06 	br	40a0 <__alt_mem_Flash_flash_data+0xf40040a0>
    4c70:	db002817 	ldw	r12,160(sp)
    4c74:	d8c03117 	ldw	r3,196(sp)
    4c78:	60e5c83a 	sub	r18,r12,r3
    4c7c:	003ac106 	br	3784 <__alt_mem_Flash_flash_data+0xf4003784>
    4c80:	b009883a 	mov	r4,r22
    4c84:	b80b883a 	mov	r5,r23
    4c88:	d9801e04 	addi	r6,sp,120
    4c8c:	000af1c0 	call	af1c <__sprint_r>
    4c90:	103a621e 	bne	r2,zero,361c <__alt_mem_Flash_flash_data+0xf400361c>
    4c94:	d8c02017 	ldw	r3,128(sp)
    4c98:	d8801f17 	ldw	r2,124(sp)
    4c9c:	da000404 	addi	r8,sp,16
    4ca0:	db003317 	ldw	r12,204(sp)
    4ca4:	dac03117 	ldw	r11,196(sp)
    4ca8:	10800044 	addi	r2,r2,1
    4cac:	1b07883a 	add	r3,r3,r12
    4cb0:	42c00015 	stw	r11,0(r8)
    4cb4:	43000115 	stw	r12,4(r8)
    4cb8:	d8c02015 	stw	r3,128(sp)
    4cbc:	d8801f15 	stw	r2,124(sp)
    4cc0:	010001c4 	movi	r4,7
    4cc4:	20bb460e 	bge	r4,r2,39e0 <__alt_mem_Flash_flash_data+0xf40039e0>
    4cc8:	003d8506 	br	42e0 <__alt_mem_Flash_flash_data+0xf40042e0>
    4ccc:	da003f15 	stw	r8,252(sp)
    4cd0:	00012240 	call	1224 <strlen>
    4cd4:	1025883a 	mov	r18,r2
    4cd8:	da003f17 	ldw	r8,252(sp)
    4cdc:	903c540e 	bge	r18,zero,3e30 <__alt_mem_Flash_flash_data+0xf4003e30>
    4ce0:	0005883a 	mov	r2,zero
    4ce4:	003c5206 	br	3e30 <__alt_mem_Flash_flash_data+0xf4003e30>
    4ce8:	010000b4 	movhi	r4,2
    4cec:	21021d84 	addi	r4,r4,2166
    4cf0:	d9003615 	stw	r4,216(sp)
    4cf4:	003adc06 	br	3868 <__alt_mem_Flash_flash_data+0xf4003868>
    4cf8:	d8802604 	addi	r2,sp,152
    4cfc:	d8800115 	stw	r2,4(sp)
    4d00:	d9403717 	ldw	r5,220(sp)
    4d04:	d8802504 	addi	r2,sp,148
    4d08:	d8800215 	stw	r2,8(sp)
    4d0c:	d8802104 	addi	r2,sp,132
    4d10:	da400015 	stw	r9,0(sp)
    4d14:	d8800315 	stw	r2,12(sp)
    4d18:	b009883a 	mov	r4,r22
    4d1c:	900d883a 	mov	r6,r18
    4d20:	01c000c4 	movi	r7,3
    4d24:	da003f15 	stw	r8,252(sp)
    4d28:	da403e15 	stw	r9,248(sp)
    4d2c:	00055d00 	call	55d0 <_dtoa_r>
    4d30:	da403e17 	ldw	r9,248(sp)
    4d34:	da003f17 	ldw	r8,252(sp)
    4d38:	d8803115 	stw	r2,196(sp)
    4d3c:	4839883a 	mov	fp,r9
    4d40:	dac03117 	ldw	r11,196(sp)
    4d44:	00801184 	movi	r2,70
    4d48:	5f15883a 	add	r10,r11,fp
    4d4c:	a8bef01e 	bne	r21,r2,4910 <__alt_mem_Flash_flash_data+0xf4004910>
    4d50:	59000007 	ldb	r4,0(r11)
    4d54:	00800c04 	movi	r2,48
    4d58:	2080d526 	beq	r4,r2,50b0 <___vfprintf_internal_r+0x1e64>
    4d5c:	d8c02617 	ldw	r3,152(sp)
    4d60:	50d5883a 	add	r10,r10,r3
    4d64:	003eea06 	br	4910 <__alt_mem_Flash_flash_data+0xf4004910>
    4d68:	0025883a 	mov	r18,zero
    4d6c:	003db306 	br	443c <__alt_mem_Flash_flash_data+0xf400443c>
    4d70:	b009883a 	mov	r4,r22
    4d74:	b80b883a 	mov	r5,r23
    4d78:	d9801e04 	addi	r6,sp,120
    4d7c:	000af1c0 	call	af1c <__sprint_r>
    4d80:	103a261e 	bne	r2,zero,361c <__alt_mem_Flash_flash_data+0xf400361c>
    4d84:	d8c02017 	ldw	r3,128(sp)
    4d88:	da000404 	addi	r8,sp,16
    4d8c:	003daa06 	br	4438 <__alt_mem_Flash_flash_data+0xf4004438>
    4d90:	b009883a 	mov	r4,r22
    4d94:	b80b883a 	mov	r5,r23
    4d98:	d9801e04 	addi	r6,sp,120
    4d9c:	000af1c0 	call	af1c <__sprint_r>
    4da0:	103a1e1e 	bne	r2,zero,361c <__alt_mem_Flash_flash_data+0xf400361c>
    4da4:	d8802617 	ldw	r2,152(sp)
    4da8:	d8c02017 	ldw	r3,128(sp)
    4dac:	da000404 	addi	r8,sp,16
    4db0:	003e2c06 	br	4664 <__alt_mem_Flash_flash_data+0xf4004664>
    4db4:	030000b4 	movhi	r12,2
    4db8:	63021984 	addi	r12,r12,2150
    4dbc:	db002c15 	stw	r12,176(sp)
    4dc0:	dac02c17 	ldw	r11,176(sp)
    4dc4:	1c07883a 	add	r3,r3,r16
    4dc8:	10800044 	addi	r2,r2,1
    4dcc:	42c00015 	stw	r11,0(r8)
    4dd0:	44000115 	stw	r16,4(r8)
    4dd4:	d8c02015 	stw	r3,128(sp)
    4dd8:	d8801f15 	stw	r2,124(sp)
    4ddc:	010001c4 	movi	r4,7
    4de0:	20bfa716 	blt	r4,r2,4c80 <__alt_mem_Flash_flash_data+0xf4004c80>
    4de4:	42000204 	addi	r8,r8,8
    4de8:	003fad06 	br	4ca0 <__alt_mem_Flash_flash_data+0xf4004ca0>
    4dec:	00800184 	movi	r2,6
    4df0:	1240012e 	bgeu	r2,r9,4df8 <___vfprintf_internal_r+0x1bac>
    4df4:	1013883a 	mov	r9,r2
    4df8:	4825883a 	mov	r18,r9
    4dfc:	4805883a 	mov	r2,r9
    4e00:	4800c216 	blt	r9,zero,510c <___vfprintf_internal_r+0x1ec0>
    4e04:	d8802b15 	stw	r2,172(sp)
    4e08:	008000b4 	movhi	r2,2
    4e0c:	10820f04 	addi	r2,r2,2108
    4e10:	d8803115 	stw	r2,196(sp)
    4e14:	dcc02d15 	stw	r19,180(sp)
    4e18:	d8003215 	stw	zero,200(sp)
    4e1c:	d8003415 	stw	zero,208(sp)
    4e20:	0005883a 	mov	r2,zero
    4e24:	003a6306 	br	37b4 <__alt_mem_Flash_flash_data+0xf40037b4>
    4e28:	0021883a 	mov	r16,zero
    4e2c:	003e1f06 	br	46ac <__alt_mem_Flash_flash_data+0xf40046ac>
    4e30:	b009883a 	mov	r4,r22
    4e34:	b80b883a 	mov	r5,r23
    4e38:	d9801e04 	addi	r6,sp,120
    4e3c:	000af1c0 	call	af1c <__sprint_r>
    4e40:	1039f61e 	bne	r2,zero,361c <__alt_mem_Flash_flash_data+0xf400361c>
    4e44:	d8802617 	ldw	r2,152(sp)
    4e48:	db003317 	ldw	r12,204(sp)
    4e4c:	d8c02017 	ldw	r3,128(sp)
    4e50:	da000404 	addi	r8,sp,16
    4e54:	6085c83a 	sub	r2,r12,r2
    4e58:	003e1306 	br	46a8 <__alt_mem_Flash_flash_data+0xf40046a8>
    4e5c:	030000b4 	movhi	r12,2
    4e60:	63021d84 	addi	r12,r12,2166
    4e64:	db003615 	stw	r12,216(sp)
    4e68:	003b0206 	br	3a74 <__alt_mem_Flash_flash_data+0xf4003a74>
    4e6c:	00c00b44 	movi	r3,45
    4e70:	d8802b15 	stw	r2,172(sp)
    4e74:	dc402d17 	ldw	r17,180(sp)
    4e78:	d8c02785 	stb	r3,158(sp)
    4e7c:	dcc02d15 	stw	r19,180(sp)
    4e80:	d8003215 	stw	zero,200(sp)
    4e84:	00800b44 	movi	r2,45
    4e88:	003a4706 	br	37a8 <__alt_mem_Flash_flash_data+0xf40037a8>
    4e8c:	05400b44 	movi	r21,45
    4e90:	dd402785 	stb	r21,158(sp)
    4e94:	003b4706 	br	3bb4 <__alt_mem_Flash_flash_data+0xf4003bb4>
    4e98:	008000b4 	movhi	r2,2
    4e9c:	10820404 	addi	r2,r2,2064
    4ea0:	d8803115 	stw	r2,196(sp)
    4ea4:	003f4106 	br	4bac <__alt_mem_Flash_flash_data+0xf4004bac>
    4ea8:	d8c02617 	ldw	r3,152(sp)
    4eac:	00bfff44 	movi	r2,-3
    4eb0:	18801116 	blt	r3,r2,4ef8 <___vfprintf_internal_r+0x1cac>
    4eb4:	48c01016 	blt	r9,r3,4ef8 <___vfprintf_internal_r+0x1cac>
    4eb8:	d8c03415 	stw	r3,208(sp)
    4ebc:	040019c4 	movi	r16,103
    4ec0:	003eb206 	br	498c <__alt_mem_Flash_flash_data+0xf400498c>
    4ec4:	010000b4 	movhi	r4,2
    4ec8:	21021984 	addi	r4,r4,2150
    4ecc:	d9002c15 	stw	r4,176(sp)
    4ed0:	003cb106 	br	4198 <__alt_mem_Flash_flash_data+0xf4004198>
    4ed4:	5005883a 	mov	r2,r10
    4ed8:	003ea106 	br	4960 <__alt_mem_Flash_flash_data+0xf4004960>
    4edc:	da402b15 	stw	r9,172(sp)
    4ee0:	dd402783 	ldbu	r21,158(sp)
    4ee4:	4825883a 	mov	r18,r9
    4ee8:	dcc02d15 	stw	r19,180(sp)
    4eec:	d8003215 	stw	zero,200(sp)
    4ef0:	d8003415 	stw	zero,208(sp)
    4ef4:	003a2806 	br	3798 <__alt_mem_Flash_flash_data+0xf4003798>
    4ef8:	843fff84 	addi	r16,r16,-2
    4efc:	1f3fffc4 	addi	fp,r3,-1
    4f00:	df002615 	stw	fp,152(sp)
    4f04:	dc0022c5 	stb	r16,139(sp)
    4f08:	e0009816 	blt	fp,zero,516c <___vfprintf_internal_r+0x1f20>
    4f0c:	00800ac4 	movi	r2,43
    4f10:	d8802305 	stb	r2,140(sp)
    4f14:	00800244 	movi	r2,9
    4f18:	1700750e 	bge	r2,fp,50f0 <___vfprintf_internal_r+0x1ea4>
    4f1c:	dd4022c4 	addi	r21,sp,139
    4f20:	dc002c15 	stw	r16,176(sp)
    4f24:	4025883a 	mov	r18,r8
    4f28:	a821883a 	mov	r16,r21
    4f2c:	e009883a 	mov	r4,fp
    4f30:	01400284 	movi	r5,10
    4f34:	000d7ec0 	call	d7ec <__modsi3>
    4f38:	10800c04 	addi	r2,r2,48
    4f3c:	843fffc4 	addi	r16,r16,-1
    4f40:	e009883a 	mov	r4,fp
    4f44:	01400284 	movi	r5,10
    4f48:	80800005 	stb	r2,0(r16)
    4f4c:	000d7980 	call	d798 <__divsi3>
    4f50:	1039883a 	mov	fp,r2
    4f54:	00800244 	movi	r2,9
    4f58:	173ff416 	blt	r2,fp,4f2c <__alt_mem_Flash_flash_data+0xf4004f2c>
    4f5c:	9011883a 	mov	r8,r18
    4f60:	e0800c04 	addi	r2,fp,48
    4f64:	8025883a 	mov	r18,r16
    4f68:	913fffc4 	addi	r4,r18,-1
    4f6c:	90bfffc5 	stb	r2,-1(r18)
    4f70:	dc002c17 	ldw	r16,176(sp)
    4f74:	2540852e 	bgeu	r4,r21,518c <___vfprintf_internal_r+0x1f40>
    4f78:	d9402384 	addi	r5,sp,142
    4f7c:	2c8bc83a 	sub	r5,r5,r18
    4f80:	d8c02344 	addi	r3,sp,141
    4f84:	a94b883a 	add	r5,r21,r5
    4f88:	00000106 	br	4f90 <___vfprintf_internal_r+0x1d44>
    4f8c:	20800003 	ldbu	r2,0(r4)
    4f90:	18800005 	stb	r2,0(r3)
    4f94:	18c00044 	addi	r3,r3,1
    4f98:	21000044 	addi	r4,r4,1
    4f9c:	197ffb1e 	bne	r3,r5,4f8c <__alt_mem_Flash_flash_data+0xf4004f8c>
    4fa0:	d8802304 	addi	r2,sp,140
    4fa4:	1485c83a 	sub	r2,r2,r18
    4fa8:	d8c02344 	addi	r3,sp,141
    4fac:	1885883a 	add	r2,r3,r2
    4fb0:	dac03317 	ldw	r11,204(sp)
    4fb4:	156bc83a 	sub	r21,r2,r21
    4fb8:	dd403a15 	stw	r21,232(sp)
    4fbc:	00800044 	movi	r2,1
    4fc0:	5d65883a 	add	r18,r11,r21
    4fc4:	12c0660e 	bge	r2,r11,5160 <___vfprintf_internal_r+0x1f14>
    4fc8:	94800044 	addi	r18,r18,1
    4fcc:	9005883a 	mov	r2,r18
    4fd0:	90006116 	blt	r18,zero,5158 <___vfprintf_internal_r+0x1f0c>
    4fd4:	d8003415 	stw	zero,208(sp)
    4fd8:	003e7406 	br	49ac <__alt_mem_Flash_flash_data+0xf40049ac>
    4fdc:	b009883a 	mov	r4,r22
    4fe0:	b80b883a 	mov	r5,r23
    4fe4:	d9801e04 	addi	r6,sp,120
    4fe8:	000af1c0 	call	af1c <__sprint_r>
    4fec:	10398b1e 	bne	r2,zero,361c <__alt_mem_Flash_flash_data+0xf400361c>
    4ff0:	dc002617 	ldw	r16,152(sp)
    4ff4:	d8c02017 	ldw	r3,128(sp)
    4ff8:	d8801f17 	ldw	r2,124(sp)
    4ffc:	da000404 	addi	r8,sp,16
    5000:	003ec906 	br	4b28 <__alt_mem_Flash_flash_data+0xf4004b28>
    5004:	483e1c1e 	bne	r9,zero,4878 <__alt_mem_Flash_flash_data+0xf4004878>
    5008:	9013883a 	mov	r9,r18
    500c:	003e1a06 	br	4878 <__alt_mem_Flash_flash_data+0xf4004878>
    5010:	02400184 	movi	r9,6
    5014:	003e1806 	br	4878 <__alt_mem_Flash_flash_data+0xf4004878>
    5018:	d8c03417 	ldw	r3,208(sp)
    501c:	00c04b0e 	bge	zero,r3,514c <___vfprintf_internal_r+0x1f00>
    5020:	04800044 	movi	r18,1
    5024:	dac03317 	ldw	r11,204(sp)
    5028:	92e5883a 	add	r18,r18,r11
    502c:	9005883a 	mov	r2,r18
    5030:	903e5e0e 	bge	r18,zero,49ac <__alt_mem_Flash_flash_data+0xf40049ac>
    5034:	0005883a 	mov	r2,zero
    5038:	003e5c06 	br	49ac <__alt_mem_Flash_flash_data+0xf40049ac>
    503c:	00c00b44 	movi	r3,45
    5040:	64a0003c 	xorhi	r18,r12,32768
    5044:	d8c02b05 	stb	r3,172(sp)
    5048:	003e1106 	br	4890 <__alt_mem_Flash_flash_data+0xf4004890>
    504c:	4f000044 	addi	fp,r9,1
    5050:	003e1606 	br	48ac <__alt_mem_Flash_flash_data+0xf40048ac>
    5054:	d8c02617 	ldw	r3,152(sp)
    5058:	d8c03415 	stw	r3,208(sp)
    505c:	00c0350e 	bge	zero,r3,5134 <___vfprintf_internal_r+0x1ee8>
    5060:	4800081e 	bne	r9,zero,5084 <___vfprintf_internal_r+0x1e38>
    5064:	8c40004c 	andi	r17,r17,1
    5068:	8800061e 	bne	r17,zero,5084 <___vfprintf_internal_r+0x1e38>
    506c:	1805883a 	mov	r2,r3
    5070:	183e4d0e 	bge	r3,zero,49a8 <__alt_mem_Flash_flash_data+0xf40049a8>
    5074:	0005883a 	mov	r2,zero
    5078:	003e4b06 	br	49a8 <__alt_mem_Flash_flash_data+0xf40049a8>
    507c:	d8802117 	ldw	r2,132(sp)
    5080:	003e3706 	br	4960 <__alt_mem_Flash_flash_data+0xf4004960>
    5084:	dac03417 	ldw	r11,208(sp)
    5088:	4a400044 	addi	r9,r9,1
    508c:	5a65883a 	add	r18,r11,r9
    5090:	9005883a 	mov	r2,r18
    5094:	903e450e 	bge	r18,zero,49ac <__alt_mem_Flash_flash_data+0xf40049ac>
    5098:	003fe606 	br	5034 <__alt_mem_Flash_flash_data+0xf4005034>
    509c:	db003417 	ldw	r12,208(sp)
    50a0:	64800044 	addi	r18,r12,1
    50a4:	9005883a 	mov	r2,r18
    50a8:	903e400e 	bge	r18,zero,49ac <__alt_mem_Flash_flash_data+0xf40049ac>
    50ac:	003fe106 	br	5034 <__alt_mem_Flash_flash_data+0xf4005034>
    50b0:	d9003717 	ldw	r4,220(sp)
    50b4:	900b883a 	mov	r5,r18
    50b8:	000d883a 	mov	r6,zero
    50bc:	000f883a 	mov	r7,zero
    50c0:	da003f15 	stw	r8,252(sp)
    50c4:	da403e15 	stw	r9,248(sp)
    50c8:	da803d15 	stw	r10,244(sp)
    50cc:	000e9c00 	call	e9c0 <__eqdf2>
    50d0:	da003f17 	ldw	r8,252(sp)
    50d4:	da403e17 	ldw	r9,248(sp)
    50d8:	da803d17 	ldw	r10,244(sp)
    50dc:	103f1f26 	beq	r2,zero,4d5c <__alt_mem_Flash_flash_data+0xf4004d5c>
    50e0:	00800044 	movi	r2,1
    50e4:	1707c83a 	sub	r3,r2,fp
    50e8:	d8c02615 	stw	r3,152(sp)
    50ec:	003f1c06 	br	4d60 <__alt_mem_Flash_flash_data+0xf4004d60>
    50f0:	00800c04 	movi	r2,48
    50f4:	e0c00c04 	addi	r3,fp,48
    50f8:	d8802345 	stb	r2,141(sp)
    50fc:	d8c02385 	stb	r3,142(sp)
    5100:	d88023c4 	addi	r2,sp,143
    5104:	dd4022c4 	addi	r21,sp,139
    5108:	003fa906 	br	4fb0 <__alt_mem_Flash_flash_data+0xf4004fb0>
    510c:	0005883a 	mov	r2,zero
    5110:	003f3c06 	br	4e04 <__alt_mem_Flash_flash_data+0xf4004e04>
    5114:	dac02d17 	ldw	r11,180(sp)
    5118:	5a400017 	ldw	r9,0(r11)
    511c:	5ac00104 	addi	r11,r11,4
    5120:	dac02d15 	stw	r11,180(sp)
    5124:	483ec80e 	bge	r9,zero,4c48 <__alt_mem_Flash_flash_data+0xf4004c48>
    5128:	027fffc4 	movi	r9,-1
    512c:	1c000047 	ldb	r16,1(r3)
    5130:	0038ab06 	br	33e0 <__alt_mem_Flash_flash_data+0xf40033e0>
    5134:	4800111e 	bne	r9,zero,517c <___vfprintf_internal_r+0x1f30>
    5138:	8c40004c 	andi	r17,r17,1
    513c:	88000f1e 	bne	r17,zero,517c <___vfprintf_internal_r+0x1f30>
    5140:	00800044 	movi	r2,1
    5144:	1025883a 	mov	r18,r2
    5148:	003e1806 	br	49ac <__alt_mem_Flash_flash_data+0xf40049ac>
    514c:	04800084 	movi	r18,2
    5150:	90e5c83a 	sub	r18,r18,r3
    5154:	003fb306 	br	5024 <__alt_mem_Flash_flash_data+0xf4005024>
    5158:	0005883a 	mov	r2,zero
    515c:	003f9d06 	br	4fd4 <__alt_mem_Flash_flash_data+0xf4004fd4>
    5160:	88a2703a 	and	r17,r17,r2
    5164:	883f9926 	beq	r17,zero,4fcc <__alt_mem_Flash_flash_data+0xf4004fcc>
    5168:	003f9706 	br	4fc8 <__alt_mem_Flash_flash_data+0xf4004fc8>
    516c:	00800b44 	movi	r2,45
    5170:	0739c83a 	sub	fp,zero,fp
    5174:	d8802305 	stb	r2,140(sp)
    5178:	003f6606 	br	4f14 <__alt_mem_Flash_flash_data+0xf4004f14>
    517c:	4c800084 	addi	r18,r9,2
    5180:	9005883a 	mov	r2,r18
    5184:	903e090e 	bge	r18,zero,49ac <__alt_mem_Flash_flash_data+0xf40049ac>
    5188:	003faa06 	br	5034 <__alt_mem_Flash_flash_data+0xf4005034>
    518c:	d8802344 	addi	r2,sp,141
    5190:	003f8706 	br	4fb0 <__alt_mem_Flash_flash_data+0xf4004fb0>
    5194:	d8c02617 	ldw	r3,152(sp)
    5198:	003f5806 	br	4efc <__alt_mem_Flash_flash_data+0xf4004efc>

0000519c <__vfprintf_internal>:
    519c:	2007883a 	mov	r3,r4
    51a0:	010000b4 	movhi	r4,2
    51a4:	210b1004 	addi	r4,r4,11328
    51a8:	21000017 	ldw	r4,0(r4)
    51ac:	2805883a 	mov	r2,r5
    51b0:	300f883a 	mov	r7,r6
    51b4:	180b883a 	mov	r5,r3
    51b8:	100d883a 	mov	r6,r2
    51bc:	000324c1 	jmpi	324c <___vfprintf_internal_r>

000051c0 <__sbprintf>:
    51c0:	2880030b 	ldhu	r2,12(r5)
    51c4:	2ac01917 	ldw	r11,100(r5)
    51c8:	2a80038b 	ldhu	r10,14(r5)
    51cc:	2a400717 	ldw	r9,28(r5)
    51d0:	2a000917 	ldw	r8,36(r5)
    51d4:	defee204 	addi	sp,sp,-1144
    51d8:	00c10004 	movi	r3,1024
    51dc:	dc011a15 	stw	r16,1128(sp)
    51e0:	10bfff4c 	andi	r2,r2,65533
    51e4:	2821883a 	mov	r16,r5
    51e8:	d8cb883a 	add	r5,sp,r3
    51ec:	dc811c15 	stw	r18,1136(sp)
    51f0:	dc411b15 	stw	r17,1132(sp)
    51f4:	dfc11d15 	stw	ra,1140(sp)
    51f8:	2025883a 	mov	r18,r4
    51fc:	d881030d 	sth	r2,1036(sp)
    5200:	dac11915 	stw	r11,1124(sp)
    5204:	da81038d 	sth	r10,1038(sp)
    5208:	da410715 	stw	r9,1052(sp)
    520c:	da010915 	stw	r8,1060(sp)
    5210:	dec10015 	stw	sp,1024(sp)
    5214:	dec10415 	stw	sp,1040(sp)
    5218:	d8c10215 	stw	r3,1032(sp)
    521c:	d8c10515 	stw	r3,1044(sp)
    5220:	d8010615 	stw	zero,1048(sp)
    5224:	000324c0 	call	324c <___vfprintf_internal_r>
    5228:	1023883a 	mov	r17,r2
    522c:	10000416 	blt	r2,zero,5240 <__sbprintf+0x80>
    5230:	9009883a 	mov	r4,r18
    5234:	d9410004 	addi	r5,sp,1024
    5238:	0006f000 	call	6f00 <_fflush_r>
    523c:	10000d1e 	bne	r2,zero,5274 <__sbprintf+0xb4>
    5240:	d8c1030b 	ldhu	r3,1036(sp)
    5244:	18c0100c 	andi	r3,r3,64
    5248:	18000326 	beq	r3,zero,5258 <__sbprintf+0x98>
    524c:	8080030b 	ldhu	r2,12(r16)
    5250:	10801014 	ori	r2,r2,64
    5254:	8080030d 	sth	r2,12(r16)
    5258:	8805883a 	mov	r2,r17
    525c:	dfc11d17 	ldw	ra,1140(sp)
    5260:	dc811c17 	ldw	r18,1136(sp)
    5264:	dc411b17 	ldw	r17,1132(sp)
    5268:	dc011a17 	ldw	r16,1128(sp)
    526c:	dec11e04 	addi	sp,sp,1144
    5270:	f800283a 	ret
    5274:	047fffc4 	movi	r17,-1
    5278:	003ff106 	br	5240 <__alt_mem_Flash_flash_data+0xf4005240>

0000527c <__swsetup_r>:
    527c:	008000b4 	movhi	r2,2
    5280:	defffd04 	addi	sp,sp,-12
    5284:	108b1004 	addi	r2,r2,11328
    5288:	dc400115 	stw	r17,4(sp)
    528c:	2023883a 	mov	r17,r4
    5290:	11000017 	ldw	r4,0(r2)
    5294:	dc000015 	stw	r16,0(sp)
    5298:	dfc00215 	stw	ra,8(sp)
    529c:	2821883a 	mov	r16,r5
    52a0:	20000226 	beq	r4,zero,52ac <__swsetup_r+0x30>
    52a4:	20c00e17 	ldw	r3,56(r4)
    52a8:	18003126 	beq	r3,zero,5370 <__swsetup_r+0xf4>
    52ac:	8080030b 	ldhu	r2,12(r16)
    52b0:	10c0020c 	andi	r3,r2,8
    52b4:	100d883a 	mov	r6,r2
    52b8:	18000f26 	beq	r3,zero,52f8 <__swsetup_r+0x7c>
    52bc:	80c00417 	ldw	r3,16(r16)
    52c0:	18001526 	beq	r3,zero,5318 <__swsetup_r+0x9c>
    52c4:	1100004c 	andi	r4,r2,1
    52c8:	20001c1e 	bne	r4,zero,533c <__swsetup_r+0xc0>
    52cc:	1080008c 	andi	r2,r2,2
    52d0:	1000291e 	bne	r2,zero,5378 <__swsetup_r+0xfc>
    52d4:	80800517 	ldw	r2,20(r16)
    52d8:	80800215 	stw	r2,8(r16)
    52dc:	18001c26 	beq	r3,zero,5350 <__swsetup_r+0xd4>
    52e0:	0005883a 	mov	r2,zero
    52e4:	dfc00217 	ldw	ra,8(sp)
    52e8:	dc400117 	ldw	r17,4(sp)
    52ec:	dc000017 	ldw	r16,0(sp)
    52f0:	dec00304 	addi	sp,sp,12
    52f4:	f800283a 	ret
    52f8:	3080040c 	andi	r2,r6,16
    52fc:	10002e26 	beq	r2,zero,53b8 <__swsetup_r+0x13c>
    5300:	3080010c 	andi	r2,r6,4
    5304:	10001e1e 	bne	r2,zero,5380 <__swsetup_r+0x104>
    5308:	80c00417 	ldw	r3,16(r16)
    530c:	30800214 	ori	r2,r6,8
    5310:	8080030d 	sth	r2,12(r16)
    5314:	183feb1e 	bne	r3,zero,52c4 <__alt_mem_Flash_flash_data+0xf40052c4>
    5318:	1140a00c 	andi	r5,r2,640
    531c:	01008004 	movi	r4,512
    5320:	293fe826 	beq	r5,r4,52c4 <__alt_mem_Flash_flash_data+0xf40052c4>
    5324:	8809883a 	mov	r4,r17
    5328:	800b883a 	mov	r5,r16
    532c:	0007e680 	call	7e68 <__smakebuf_r>
    5330:	8080030b 	ldhu	r2,12(r16)
    5334:	80c00417 	ldw	r3,16(r16)
    5338:	003fe206 	br	52c4 <__alt_mem_Flash_flash_data+0xf40052c4>
    533c:	80800517 	ldw	r2,20(r16)
    5340:	80000215 	stw	zero,8(r16)
    5344:	0085c83a 	sub	r2,zero,r2
    5348:	80800615 	stw	r2,24(r16)
    534c:	183fe41e 	bne	r3,zero,52e0 <__alt_mem_Flash_flash_data+0xf40052e0>
    5350:	80c0030b 	ldhu	r3,12(r16)
    5354:	0005883a 	mov	r2,zero
    5358:	1900200c 	andi	r4,r3,128
    535c:	203fe126 	beq	r4,zero,52e4 <__alt_mem_Flash_flash_data+0xf40052e4>
    5360:	18c01014 	ori	r3,r3,64
    5364:	80c0030d 	sth	r3,12(r16)
    5368:	00bfffc4 	movi	r2,-1
    536c:	003fdd06 	br	52e4 <__alt_mem_Flash_flash_data+0xf40052e4>
    5370:	00072dc0 	call	72dc <__sinit>
    5374:	003fcd06 	br	52ac <__alt_mem_Flash_flash_data+0xf40052ac>
    5378:	0005883a 	mov	r2,zero
    537c:	003fd606 	br	52d8 <__alt_mem_Flash_flash_data+0xf40052d8>
    5380:	81400c17 	ldw	r5,48(r16)
    5384:	28000626 	beq	r5,zero,53a0 <__swsetup_r+0x124>
    5388:	80801004 	addi	r2,r16,64
    538c:	28800326 	beq	r5,r2,539c <__swsetup_r+0x120>
    5390:	8809883a 	mov	r4,r17
    5394:	00074500 	call	7450 <_free_r>
    5398:	8180030b 	ldhu	r6,12(r16)
    539c:	80000c15 	stw	zero,48(r16)
    53a0:	80c00417 	ldw	r3,16(r16)
    53a4:	00bff6c4 	movi	r2,-37
    53a8:	118c703a 	and	r6,r2,r6
    53ac:	80000115 	stw	zero,4(r16)
    53b0:	80c00015 	stw	r3,0(r16)
    53b4:	003fd506 	br	530c <__alt_mem_Flash_flash_data+0xf400530c>
    53b8:	00800244 	movi	r2,9
    53bc:	88800015 	stw	r2,0(r17)
    53c0:	30801014 	ori	r2,r6,64
    53c4:	8080030d 	sth	r2,12(r16)
    53c8:	00bfffc4 	movi	r2,-1
    53cc:	003fc506 	br	52e4 <__alt_mem_Flash_flash_data+0xf40052e4>

000053d0 <quorem>:
    53d0:	defff704 	addi	sp,sp,-36
    53d4:	dc800215 	stw	r18,8(sp)
    53d8:	20800417 	ldw	r2,16(r4)
    53dc:	2c800417 	ldw	r18,16(r5)
    53e0:	dfc00815 	stw	ra,32(sp)
    53e4:	ddc00715 	stw	r23,28(sp)
    53e8:	dd800615 	stw	r22,24(sp)
    53ec:	dd400515 	stw	r21,20(sp)
    53f0:	dd000415 	stw	r20,16(sp)
    53f4:	dcc00315 	stw	r19,12(sp)
    53f8:	dc400115 	stw	r17,4(sp)
    53fc:	dc000015 	stw	r16,0(sp)
    5400:	14807116 	blt	r2,r18,55c8 <quorem+0x1f8>
    5404:	94bfffc4 	addi	r18,r18,-1
    5408:	94ad883a 	add	r22,r18,r18
    540c:	b5ad883a 	add	r22,r22,r22
    5410:	2c400504 	addi	r17,r5,20
    5414:	8da9883a 	add	r20,r17,r22
    5418:	25400504 	addi	r21,r4,20
    541c:	282f883a 	mov	r23,r5
    5420:	adad883a 	add	r22,r21,r22
    5424:	a1400017 	ldw	r5,0(r20)
    5428:	2021883a 	mov	r16,r4
    542c:	b1000017 	ldw	r4,0(r22)
    5430:	29400044 	addi	r5,r5,1
    5434:	000d8480 	call	d848 <__udivsi3>
    5438:	1027883a 	mov	r19,r2
    543c:	10002c26 	beq	r2,zero,54f0 <quorem+0x120>
    5440:	a813883a 	mov	r9,r21
    5444:	8811883a 	mov	r8,r17
    5448:	0009883a 	mov	r4,zero
    544c:	000d883a 	mov	r6,zero
    5450:	41c00017 	ldw	r7,0(r8)
    5454:	49400017 	ldw	r5,0(r9)
    5458:	42000104 	addi	r8,r8,4
    545c:	38bfffcc 	andi	r2,r7,65535
    5460:	14c5383a 	mul	r2,r2,r19
    5464:	380ed43a 	srli	r7,r7,16
    5468:	28ffffcc 	andi	r3,r5,65535
    546c:	2085883a 	add	r2,r4,r2
    5470:	1008d43a 	srli	r4,r2,16
    5474:	3ccf383a 	mul	r7,r7,r19
    5478:	198d883a 	add	r6,r3,r6
    547c:	10ffffcc 	andi	r3,r2,65535
    5480:	30c7c83a 	sub	r3,r6,r3
    5484:	280ad43a 	srli	r5,r5,16
    5488:	21c9883a 	add	r4,r4,r7
    548c:	180dd43a 	srai	r6,r3,16
    5490:	20bfffcc 	andi	r2,r4,65535
    5494:	288bc83a 	sub	r5,r5,r2
    5498:	298b883a 	add	r5,r5,r6
    549c:	280e943a 	slli	r7,r5,16
    54a0:	18ffffcc 	andi	r3,r3,65535
    54a4:	2008d43a 	srli	r4,r4,16
    54a8:	38ceb03a 	or	r7,r7,r3
    54ac:	49c00015 	stw	r7,0(r9)
    54b0:	280dd43a 	srai	r6,r5,16
    54b4:	4a400104 	addi	r9,r9,4
    54b8:	a23fe52e 	bgeu	r20,r8,5450 <__alt_mem_Flash_flash_data+0xf4005450>
    54bc:	b0800017 	ldw	r2,0(r22)
    54c0:	10000b1e 	bne	r2,zero,54f0 <quorem+0x120>
    54c4:	b0bfff04 	addi	r2,r22,-4
    54c8:	a880082e 	bgeu	r21,r2,54ec <quorem+0x11c>
    54cc:	b0ffff17 	ldw	r3,-4(r22)
    54d0:	18000326 	beq	r3,zero,54e0 <quorem+0x110>
    54d4:	00000506 	br	54ec <quorem+0x11c>
    54d8:	10c00017 	ldw	r3,0(r2)
    54dc:	1800031e 	bne	r3,zero,54ec <quorem+0x11c>
    54e0:	10bfff04 	addi	r2,r2,-4
    54e4:	94bfffc4 	addi	r18,r18,-1
    54e8:	a8bffb36 	bltu	r21,r2,54d8 <__alt_mem_Flash_flash_data+0xf40054d8>
    54ec:	84800415 	stw	r18,16(r16)
    54f0:	8009883a 	mov	r4,r16
    54f4:	b80b883a 	mov	r5,r23
    54f8:	0008d940 	call	8d94 <__mcmp>
    54fc:	10002616 	blt	r2,zero,5598 <quorem+0x1c8>
    5500:	9cc00044 	addi	r19,r19,1
    5504:	a80d883a 	mov	r6,r21
    5508:	000b883a 	mov	r5,zero
    550c:	31000017 	ldw	r4,0(r6)
    5510:	88800017 	ldw	r2,0(r17)
    5514:	31800104 	addi	r6,r6,4
    5518:	20ffffcc 	andi	r3,r4,65535
    551c:	194b883a 	add	r5,r3,r5
    5520:	10ffffcc 	andi	r3,r2,65535
    5524:	28c7c83a 	sub	r3,r5,r3
    5528:	1004d43a 	srli	r2,r2,16
    552c:	2008d43a 	srli	r4,r4,16
    5530:	180bd43a 	srai	r5,r3,16
    5534:	18ffffcc 	andi	r3,r3,65535
    5538:	2089c83a 	sub	r4,r4,r2
    553c:	2149883a 	add	r4,r4,r5
    5540:	2004943a 	slli	r2,r4,16
    5544:	8c400104 	addi	r17,r17,4
    5548:	200bd43a 	srai	r5,r4,16
    554c:	10c6b03a 	or	r3,r2,r3
    5550:	30ffff15 	stw	r3,-4(r6)
    5554:	a47fed2e 	bgeu	r20,r17,550c <__alt_mem_Flash_flash_data+0xf400550c>
    5558:	9485883a 	add	r2,r18,r18
    555c:	1085883a 	add	r2,r2,r2
    5560:	a887883a 	add	r3,r21,r2
    5564:	18800017 	ldw	r2,0(r3)
    5568:	10000b1e 	bne	r2,zero,5598 <quorem+0x1c8>
    556c:	18bfff04 	addi	r2,r3,-4
    5570:	a880082e 	bgeu	r21,r2,5594 <quorem+0x1c4>
    5574:	18ffff17 	ldw	r3,-4(r3)
    5578:	18000326 	beq	r3,zero,5588 <quorem+0x1b8>
    557c:	00000506 	br	5594 <quorem+0x1c4>
    5580:	10c00017 	ldw	r3,0(r2)
    5584:	1800031e 	bne	r3,zero,5594 <quorem+0x1c4>
    5588:	10bfff04 	addi	r2,r2,-4
    558c:	94bfffc4 	addi	r18,r18,-1
    5590:	a8bffb36 	bltu	r21,r2,5580 <__alt_mem_Flash_flash_data+0xf4005580>
    5594:	84800415 	stw	r18,16(r16)
    5598:	9805883a 	mov	r2,r19
    559c:	dfc00817 	ldw	ra,32(sp)
    55a0:	ddc00717 	ldw	r23,28(sp)
    55a4:	dd800617 	ldw	r22,24(sp)
    55a8:	dd400517 	ldw	r21,20(sp)
    55ac:	dd000417 	ldw	r20,16(sp)
    55b0:	dcc00317 	ldw	r19,12(sp)
    55b4:	dc800217 	ldw	r18,8(sp)
    55b8:	dc400117 	ldw	r17,4(sp)
    55bc:	dc000017 	ldw	r16,0(sp)
    55c0:	dec00904 	addi	sp,sp,36
    55c4:	f800283a 	ret
    55c8:	0005883a 	mov	r2,zero
    55cc:	003ff306 	br	559c <__alt_mem_Flash_flash_data+0xf400559c>

000055d0 <_dtoa_r>:
    55d0:	20801017 	ldw	r2,64(r4)
    55d4:	deffde04 	addi	sp,sp,-136
    55d8:	dd401d15 	stw	r21,116(sp)
    55dc:	dcc01b15 	stw	r19,108(sp)
    55e0:	dc801a15 	stw	r18,104(sp)
    55e4:	dc401915 	stw	r17,100(sp)
    55e8:	dc001815 	stw	r16,96(sp)
    55ec:	dfc02115 	stw	ra,132(sp)
    55f0:	df002015 	stw	fp,128(sp)
    55f4:	ddc01f15 	stw	r23,124(sp)
    55f8:	dd801e15 	stw	r22,120(sp)
    55fc:	dd001c15 	stw	r20,112(sp)
    5600:	d9c00315 	stw	r7,12(sp)
    5604:	2021883a 	mov	r16,r4
    5608:	302b883a 	mov	r21,r6
    560c:	2825883a 	mov	r18,r5
    5610:	dc402417 	ldw	r17,144(sp)
    5614:	3027883a 	mov	r19,r6
    5618:	10000826 	beq	r2,zero,563c <_dtoa_r+0x6c>
    561c:	21801117 	ldw	r6,68(r4)
    5620:	00c00044 	movi	r3,1
    5624:	100b883a 	mov	r5,r2
    5628:	1986983a 	sll	r3,r3,r6
    562c:	11800115 	stw	r6,4(r2)
    5630:	10c00215 	stw	r3,8(r2)
    5634:	00085680 	call	8568 <_Bfree>
    5638:	80001015 	stw	zero,64(r16)
    563c:	a8002d16 	blt	r21,zero,56f4 <_dtoa_r+0x124>
    5640:	88000015 	stw	zero,0(r17)
    5644:	a8dffc2c 	andhi	r3,r21,32752
    5648:	009ffc34 	movhi	r2,32752
    564c:	18801b26 	beq	r3,r2,56bc <_dtoa_r+0xec>
    5650:	9009883a 	mov	r4,r18
    5654:	980b883a 	mov	r5,r19
    5658:	000d883a 	mov	r6,zero
    565c:	000f883a 	mov	r7,zero
    5660:	000e9c00 	call	e9c0 <__eqdf2>
    5664:	10002a1e 	bne	r2,zero,5710 <_dtoa_r+0x140>
    5668:	d8c02317 	ldw	r3,140(sp)
    566c:	d9002517 	ldw	r4,148(sp)
    5670:	00800044 	movi	r2,1
    5674:	18800015 	stw	r2,0(r3)
    5678:	2001a226 	beq	r4,zero,5d04 <_dtoa_r+0x734>
    567c:	008000b4 	movhi	r2,2
    5680:	10821144 	addi	r2,r2,2117
    5684:	20800015 	stw	r2,0(r4)
    5688:	10bfffc4 	addi	r2,r2,-1
    568c:	dfc02117 	ldw	ra,132(sp)
    5690:	df002017 	ldw	fp,128(sp)
    5694:	ddc01f17 	ldw	r23,124(sp)
    5698:	dd801e17 	ldw	r22,120(sp)
    569c:	dd401d17 	ldw	r21,116(sp)
    56a0:	dd001c17 	ldw	r20,112(sp)
    56a4:	dcc01b17 	ldw	r19,108(sp)
    56a8:	dc801a17 	ldw	r18,104(sp)
    56ac:	dc401917 	ldw	r17,100(sp)
    56b0:	dc001817 	ldw	r16,96(sp)
    56b4:	dec02204 	addi	sp,sp,136
    56b8:	f800283a 	ret
    56bc:	d8c02317 	ldw	r3,140(sp)
    56c0:	0089c3c4 	movi	r2,9999
    56c4:	18800015 	stw	r2,0(r3)
    56c8:	90017c26 	beq	r18,zero,5cbc <_dtoa_r+0x6ec>
    56cc:	008000b4 	movhi	r2,2
    56d0:	10822504 	addi	r2,r2,2196
    56d4:	d9002517 	ldw	r4,148(sp)
    56d8:	203fec26 	beq	r4,zero,568c <__alt_mem_Flash_flash_data+0xf400568c>
    56dc:	10c000c7 	ldb	r3,3(r2)
    56e0:	18017d1e 	bne	r3,zero,5cd8 <_dtoa_r+0x708>
    56e4:	10c000c4 	addi	r3,r2,3
    56e8:	d9802517 	ldw	r6,148(sp)
    56ec:	30c00015 	stw	r3,0(r6)
    56f0:	003fe606 	br	568c <__alt_mem_Flash_flash_data+0xf400568c>
    56f4:	04e00034 	movhi	r19,32768
    56f8:	9cffffc4 	addi	r19,r19,-1
    56fc:	00800044 	movi	r2,1
    5700:	ace6703a 	and	r19,r21,r19
    5704:	88800015 	stw	r2,0(r17)
    5708:	982b883a 	mov	r21,r19
    570c:	003fcd06 	br	5644 <__alt_mem_Flash_flash_data+0xf4005644>
    5710:	d8800204 	addi	r2,sp,8
    5714:	a822d53a 	srli	r17,r21,20
    5718:	d8800015 	stw	r2,0(sp)
    571c:	8009883a 	mov	r4,r16
    5720:	900b883a 	mov	r5,r18
    5724:	980d883a 	mov	r6,r19
    5728:	d9c00104 	addi	r7,sp,4
    572c:	00091080 	call	9108 <__d2b>
    5730:	1039883a 	mov	fp,r2
    5734:	88016a1e 	bne	r17,zero,5ce0 <_dtoa_r+0x710>
    5738:	dd000217 	ldw	r20,8(sp)
    573c:	dc400117 	ldw	r17,4(sp)
    5740:	00befbc4 	movi	r2,-1041
    5744:	a463883a 	add	r17,r20,r17
    5748:	8882ea16 	blt	r17,r2,62f4 <_dtoa_r+0xd24>
    574c:	00bf0384 	movi	r2,-1010
    5750:	1445c83a 	sub	r2,r2,r17
    5754:	89010484 	addi	r4,r17,1042
    5758:	a8aa983a 	sll	r21,r21,r2
    575c:	9108d83a 	srl	r4,r18,r4
    5760:	a908b03a 	or	r4,r21,r4
    5764:	000fd500 	call	fd50 <__floatunsidf>
    5768:	017f8434 	movhi	r5,65040
    576c:	01800044 	movi	r6,1
    5770:	1009883a 	mov	r4,r2
    5774:	194b883a 	add	r5,r3,r5
    5778:	8c7fffc4 	addi	r17,r17,-1
    577c:	d9800f15 	stw	r6,60(sp)
    5780:	000d883a 	mov	r6,zero
    5784:	01cffe34 	movhi	r7,16376
    5788:	000f3280 	call	f328 <__subdf3>
    578c:	0198dbf4 	movhi	r6,25455
    5790:	01cff4f4 	movhi	r7,16339
    5794:	1009883a 	mov	r4,r2
    5798:	180b883a 	mov	r5,r3
    579c:	3190d844 	addi	r6,r6,17249
    57a0:	39e1e9c4 	addi	r7,r7,-30809
    57a4:	000ec040 	call	ec04 <__muldf3>
    57a8:	01a2d874 	movhi	r6,35681
    57ac:	01cff1f4 	movhi	r7,16327
    57b0:	180b883a 	mov	r5,r3
    57b4:	31b22cc4 	addi	r6,r6,-14157
    57b8:	39e28a04 	addi	r7,r7,-30168
    57bc:	1009883a 	mov	r4,r2
    57c0:	000d8580 	call	d858 <__adddf3>
    57c4:	8809883a 	mov	r4,r17
    57c8:	102d883a 	mov	r22,r2
    57cc:	182b883a 	mov	r21,r3
    57d0:	000fc800 	call	fc80 <__floatsidf>
    57d4:	019427f4 	movhi	r6,20639
    57d8:	01cff4f4 	movhi	r7,16339
    57dc:	1009883a 	mov	r4,r2
    57e0:	180b883a 	mov	r5,r3
    57e4:	319e7ec4 	addi	r6,r6,31227
    57e8:	39d104c4 	addi	r7,r7,17427
    57ec:	000ec040 	call	ec04 <__muldf3>
    57f0:	b009883a 	mov	r4,r22
    57f4:	a80b883a 	mov	r5,r21
    57f8:	100d883a 	mov	r6,r2
    57fc:	180f883a 	mov	r7,r3
    5800:	000d8580 	call	d858 <__adddf3>
    5804:	1009883a 	mov	r4,r2
    5808:	180b883a 	mov	r5,r3
    580c:	102d883a 	mov	r22,r2
    5810:	182b883a 	mov	r21,r3
    5814:	000fbf80 	call	fbf8 <__fixdfsi>
    5818:	b009883a 	mov	r4,r22
    581c:	a80b883a 	mov	r5,r21
    5820:	000d883a 	mov	r6,zero
    5824:	000f883a 	mov	r7,zero
    5828:	d8800515 	stw	r2,20(sp)
    582c:	000eb240 	call	eb24 <__ledf2>
    5830:	10023116 	blt	r2,zero,60f8 <_dtoa_r+0xb28>
    5834:	d8c00517 	ldw	r3,20(sp)
    5838:	00800584 	movi	r2,22
    583c:	10c21f36 	bltu	r2,r3,60bc <_dtoa_r+0xaec>
    5840:	180490fa 	slli	r2,r3,3
    5844:	00c000b4 	movhi	r3,2
    5848:	18c24104 	addi	r3,r3,2308
    584c:	1885883a 	add	r2,r3,r2
    5850:	11000017 	ldw	r4,0(r2)
    5854:	11400117 	ldw	r5,4(r2)
    5858:	900d883a 	mov	r6,r18
    585c:	980f883a 	mov	r7,r19
    5860:	000ea440 	call	ea44 <__gedf2>
    5864:	0082a70e 	bge	zero,r2,6304 <_dtoa_r+0xd34>
    5868:	d9000517 	ldw	r4,20(sp)
    586c:	d8000d15 	stw	zero,52(sp)
    5870:	213fffc4 	addi	r4,r4,-1
    5874:	d9000515 	stw	r4,20(sp)
    5878:	a463c83a 	sub	r17,r20,r17
    587c:	8dbfffc4 	addi	r22,r17,-1
    5880:	b0021916 	blt	r22,zero,60e8 <_dtoa_r+0xb18>
    5884:	d8000815 	stw	zero,32(sp)
    5888:	d8800517 	ldw	r2,20(sp)
    588c:	10020e16 	blt	r2,zero,60c8 <_dtoa_r+0xaf8>
    5890:	b0ad883a 	add	r22,r22,r2
    5894:	d8800a15 	stw	r2,40(sp)
    5898:	d8000915 	stw	zero,36(sp)
    589c:	d8c00317 	ldw	r3,12(sp)
    58a0:	00800244 	movi	r2,9
    58a4:	10c11a36 	bltu	r2,r3,5d10 <_dtoa_r+0x740>
    58a8:	00800144 	movi	r2,5
    58ac:	10c4fc0e 	bge	r2,r3,6ca0 <_dtoa_r+0x16d0>
    58b0:	18ffff04 	addi	r3,r3,-4
    58b4:	d8c00315 	stw	r3,12(sp)
    58b8:	0029883a 	mov	r20,zero
    58bc:	d9800317 	ldw	r6,12(sp)
    58c0:	008000c4 	movi	r2,3
    58c4:	3083bd26 	beq	r6,r2,67bc <_dtoa_r+0x11ec>
    58c8:	1183670e 	bge	r2,r6,6668 <_dtoa_r+0x1098>
    58cc:	d8c00317 	ldw	r3,12(sp)
    58d0:	00800104 	movi	r2,4
    58d4:	1882e726 	beq	r3,r2,6474 <_dtoa_r+0xea4>
    58d8:	00800144 	movi	r2,5
    58dc:	1884f21e 	bne	r3,r2,6ca8 <_dtoa_r+0x16d8>
    58e0:	00800044 	movi	r2,1
    58e4:	d8800b15 	stw	r2,44(sp)
    58e8:	d8c02217 	ldw	r3,136(sp)
    58ec:	d9000517 	ldw	r4,20(sp)
    58f0:	1907883a 	add	r3,r3,r4
    58f4:	19800044 	addi	r6,r3,1
    58f8:	d8c00c15 	stw	r3,48(sp)
    58fc:	d9800615 	stw	r6,24(sp)
    5900:	0183c30e 	bge	zero,r6,6810 <_dtoa_r+0x1240>
    5904:	d9800617 	ldw	r6,24(sp)
    5908:	3023883a 	mov	r17,r6
    590c:	80001115 	stw	zero,68(r16)
    5910:	008005c4 	movi	r2,23
    5914:	1184f62e 	bgeu	r2,r6,6cf0 <_dtoa_r+0x1720>
    5918:	00c00044 	movi	r3,1
    591c:	00800104 	movi	r2,4
    5920:	1085883a 	add	r2,r2,r2
    5924:	11000504 	addi	r4,r2,20
    5928:	180b883a 	mov	r5,r3
    592c:	18c00044 	addi	r3,r3,1
    5930:	313ffb2e 	bgeu	r6,r4,5920 <__alt_mem_Flash_flash_data+0xf4005920>
    5934:	81401115 	stw	r5,68(r16)
    5938:	8009883a 	mov	r4,r16
    593c:	00084c00 	call	84c0 <_Balloc>
    5940:	d8800715 	stw	r2,28(sp)
    5944:	80801015 	stw	r2,64(r16)
    5948:	00800384 	movi	r2,14
    594c:	1440fd36 	bltu	r2,r17,5d44 <_dtoa_r+0x774>
    5950:	a000fc26 	beq	r20,zero,5d44 <_dtoa_r+0x774>
    5954:	d8800517 	ldw	r2,20(sp)
    5958:	0083b90e 	bge	zero,r2,6840 <_dtoa_r+0x1270>
    595c:	d8c00517 	ldw	r3,20(sp)
    5960:	108003cc 	andi	r2,r2,15
    5964:	100490fa 	slli	r2,r2,3
    5968:	182fd13a 	srai	r23,r3,4
    596c:	00c000b4 	movhi	r3,2
    5970:	18c24104 	addi	r3,r3,2308
    5974:	1885883a 	add	r2,r3,r2
    5978:	b8c0040c 	andi	r3,r23,16
    597c:	12c00017 	ldw	r11,0(r2)
    5980:	12800117 	ldw	r10,4(r2)
    5984:	18039726 	beq	r3,zero,67e4 <_dtoa_r+0x1214>
    5988:	008000b4 	movhi	r2,2
    598c:	10823704 	addi	r2,r2,2268
    5990:	11800817 	ldw	r6,32(r2)
    5994:	11c00917 	ldw	r7,36(r2)
    5998:	9009883a 	mov	r4,r18
    599c:	980b883a 	mov	r5,r19
    59a0:	da801615 	stw	r10,88(sp)
    59a4:	dac01515 	stw	r11,84(sp)
    59a8:	000e0f40 	call	e0f4 <__divdf3>
    59ac:	da801617 	ldw	r10,88(sp)
    59b0:	dac01517 	ldw	r11,84(sp)
    59b4:	bdc003cc 	andi	r23,r23,15
    59b8:	044000c4 	movi	r17,3
    59bc:	d8800e15 	stw	r2,56(sp)
    59c0:	182b883a 	mov	r21,r3
    59c4:	b8001126 	beq	r23,zero,5a0c <_dtoa_r+0x43c>
    59c8:	050000b4 	movhi	r20,2
    59cc:	a5023704 	addi	r20,r20,2268
    59d0:	5805883a 	mov	r2,r11
    59d4:	5007883a 	mov	r3,r10
    59d8:	b980004c 	andi	r6,r23,1
    59dc:	1009883a 	mov	r4,r2
    59e0:	b82fd07a 	srai	r23,r23,1
    59e4:	180b883a 	mov	r5,r3
    59e8:	30000426 	beq	r6,zero,59fc <_dtoa_r+0x42c>
    59ec:	a1800017 	ldw	r6,0(r20)
    59f0:	a1c00117 	ldw	r7,4(r20)
    59f4:	8c400044 	addi	r17,r17,1
    59f8:	000ec040 	call	ec04 <__muldf3>
    59fc:	a5000204 	addi	r20,r20,8
    5a00:	b83ff51e 	bne	r23,zero,59d8 <__alt_mem_Flash_flash_data+0xf40059d8>
    5a04:	1017883a 	mov	r11,r2
    5a08:	1815883a 	mov	r10,r3
    5a0c:	d9000e17 	ldw	r4,56(sp)
    5a10:	a80b883a 	mov	r5,r21
    5a14:	580d883a 	mov	r6,r11
    5a18:	500f883a 	mov	r7,r10
    5a1c:	000e0f40 	call	e0f4 <__divdf3>
    5a20:	1029883a 	mov	r20,r2
    5a24:	182b883a 	mov	r21,r3
    5a28:	d9800d17 	ldw	r6,52(sp)
    5a2c:	30000626 	beq	r6,zero,5a48 <_dtoa_r+0x478>
    5a30:	a009883a 	mov	r4,r20
    5a34:	a80b883a 	mov	r5,r21
    5a38:	000d883a 	mov	r6,zero
    5a3c:	01cffc34 	movhi	r7,16368
    5a40:	000eb240 	call	eb24 <__ledf2>
    5a44:	10043216 	blt	r2,zero,6b10 <_dtoa_r+0x1540>
    5a48:	8809883a 	mov	r4,r17
    5a4c:	000fc800 	call	fc80 <__floatsidf>
    5a50:	1009883a 	mov	r4,r2
    5a54:	180b883a 	mov	r5,r3
    5a58:	a00d883a 	mov	r6,r20
    5a5c:	a80f883a 	mov	r7,r21
    5a60:	000ec040 	call	ec04 <__muldf3>
    5a64:	000d883a 	mov	r6,zero
    5a68:	1009883a 	mov	r4,r2
    5a6c:	180b883a 	mov	r5,r3
    5a70:	01d00734 	movhi	r7,16412
    5a74:	000d8580 	call	d858 <__adddf3>
    5a78:	1023883a 	mov	r17,r2
    5a7c:	d9800617 	ldw	r6,24(sp)
    5a80:	00bf3034 	movhi	r2,64704
    5a84:	1885883a 	add	r2,r3,r2
    5a88:	d8800e15 	stw	r2,56(sp)
    5a8c:	30032e26 	beq	r6,zero,6748 <_dtoa_r+0x1178>
    5a90:	d8c00517 	ldw	r3,20(sp)
    5a94:	da800617 	ldw	r10,24(sp)
    5a98:	d8c01215 	stw	r3,72(sp)
    5a9c:	d9000b17 	ldw	r4,44(sp)
    5aa0:	2003b026 	beq	r4,zero,6964 <_dtoa_r+0x1394>
    5aa4:	50bfffc4 	addi	r2,r10,-1
    5aa8:	100490fa 	slli	r2,r2,3
    5aac:	00c000b4 	movhi	r3,2
    5ab0:	18c24104 	addi	r3,r3,2308
    5ab4:	1885883a 	add	r2,r3,r2
    5ab8:	11800017 	ldw	r6,0(r2)
    5abc:	11c00117 	ldw	r7,4(r2)
    5ac0:	d8800717 	ldw	r2,28(sp)
    5ac4:	0009883a 	mov	r4,zero
    5ac8:	014ff834 	movhi	r5,16352
    5acc:	da801615 	stw	r10,88(sp)
    5ad0:	15c00044 	addi	r23,r2,1
    5ad4:	000e0f40 	call	e0f4 <__divdf3>
    5ad8:	d9c00e17 	ldw	r7,56(sp)
    5adc:	880d883a 	mov	r6,r17
    5ae0:	1009883a 	mov	r4,r2
    5ae4:	180b883a 	mov	r5,r3
    5ae8:	000f3280 	call	f328 <__subdf3>
    5aec:	a80b883a 	mov	r5,r21
    5af0:	a009883a 	mov	r4,r20
    5af4:	d8c01015 	stw	r3,64(sp)
    5af8:	d8800e15 	stw	r2,56(sp)
    5afc:	000fbf80 	call	fbf8 <__fixdfsi>
    5b00:	1009883a 	mov	r4,r2
    5b04:	d8801715 	stw	r2,92(sp)
    5b08:	000fc800 	call	fc80 <__floatsidf>
    5b0c:	a009883a 	mov	r4,r20
    5b10:	a80b883a 	mov	r5,r21
    5b14:	100d883a 	mov	r6,r2
    5b18:	180f883a 	mov	r7,r3
    5b1c:	000f3280 	call	f328 <__subdf3>
    5b20:	da001717 	ldw	r8,92(sp)
    5b24:	1829883a 	mov	r20,r3
    5b28:	d8c00717 	ldw	r3,28(sp)
    5b2c:	d9000e17 	ldw	r4,56(sp)
    5b30:	d9401017 	ldw	r5,64(sp)
    5b34:	42000c04 	addi	r8,r8,48
    5b38:	1023883a 	mov	r17,r2
    5b3c:	1a000005 	stb	r8,0(r3)
    5b40:	880d883a 	mov	r6,r17
    5b44:	a00f883a 	mov	r7,r20
    5b48:	402b883a 	mov	r21,r8
    5b4c:	000ea440 	call	ea44 <__gedf2>
    5b50:	00844516 	blt	zero,r2,6c68 <_dtoa_r+0x1698>
    5b54:	0009883a 	mov	r4,zero
    5b58:	014ffc34 	movhi	r5,16368
    5b5c:	880d883a 	mov	r6,r17
    5b60:	a00f883a 	mov	r7,r20
    5b64:	000f3280 	call	f328 <__subdf3>
    5b68:	d9000e17 	ldw	r4,56(sp)
    5b6c:	d9401017 	ldw	r5,64(sp)
    5b70:	100d883a 	mov	r6,r2
    5b74:	180f883a 	mov	r7,r3
    5b78:	000ea440 	call	ea44 <__gedf2>
    5b7c:	da801617 	ldw	r10,88(sp)
    5b80:	00843616 	blt	zero,r2,6c5c <_dtoa_r+0x168c>
    5b84:	00800044 	movi	r2,1
    5b88:	12806e0e 	bge	r2,r10,5d44 <_dtoa_r+0x774>
    5b8c:	d9000717 	ldw	r4,28(sp)
    5b90:	dd801315 	stw	r22,76(sp)
    5b94:	dc001115 	stw	r16,68(sp)
    5b98:	2295883a 	add	r10,r4,r10
    5b9c:	dcc01415 	stw	r19,80(sp)
    5ba0:	502d883a 	mov	r22,r10
    5ba4:	dcc01017 	ldw	r19,64(sp)
    5ba8:	b821883a 	mov	r16,r23
    5bac:	dc801015 	stw	r18,64(sp)
    5bb0:	dc800e17 	ldw	r18,56(sp)
    5bb4:	00000906 	br	5bdc <_dtoa_r+0x60c>
    5bb8:	000f3280 	call	f328 <__subdf3>
    5bbc:	1009883a 	mov	r4,r2
    5bc0:	180b883a 	mov	r5,r3
    5bc4:	900d883a 	mov	r6,r18
    5bc8:	980f883a 	mov	r7,r19
    5bcc:	000eb240 	call	eb24 <__ledf2>
    5bd0:	10040e16 	blt	r2,zero,6c0c <_dtoa_r+0x163c>
    5bd4:	b821883a 	mov	r16,r23
    5bd8:	bd841026 	beq	r23,r22,6c1c <_dtoa_r+0x164c>
    5bdc:	9009883a 	mov	r4,r18
    5be0:	980b883a 	mov	r5,r19
    5be4:	000d883a 	mov	r6,zero
    5be8:	01d00934 	movhi	r7,16420
    5bec:	000ec040 	call	ec04 <__muldf3>
    5bf0:	000d883a 	mov	r6,zero
    5bf4:	01d00934 	movhi	r7,16420
    5bf8:	8809883a 	mov	r4,r17
    5bfc:	a00b883a 	mov	r5,r20
    5c00:	1025883a 	mov	r18,r2
    5c04:	1827883a 	mov	r19,r3
    5c08:	000ec040 	call	ec04 <__muldf3>
    5c0c:	180b883a 	mov	r5,r3
    5c10:	1009883a 	mov	r4,r2
    5c14:	1823883a 	mov	r17,r3
    5c18:	1029883a 	mov	r20,r2
    5c1c:	000fbf80 	call	fbf8 <__fixdfsi>
    5c20:	1009883a 	mov	r4,r2
    5c24:	102b883a 	mov	r21,r2
    5c28:	000fc800 	call	fc80 <__floatsidf>
    5c2c:	a009883a 	mov	r4,r20
    5c30:	880b883a 	mov	r5,r17
    5c34:	100d883a 	mov	r6,r2
    5c38:	180f883a 	mov	r7,r3
    5c3c:	000f3280 	call	f328 <__subdf3>
    5c40:	ad400c04 	addi	r21,r21,48
    5c44:	1009883a 	mov	r4,r2
    5c48:	180b883a 	mov	r5,r3
    5c4c:	900d883a 	mov	r6,r18
    5c50:	980f883a 	mov	r7,r19
    5c54:	85400005 	stb	r21,0(r16)
    5c58:	1023883a 	mov	r17,r2
    5c5c:	1829883a 	mov	r20,r3
    5c60:	000eb240 	call	eb24 <__ledf2>
    5c64:	bdc00044 	addi	r23,r23,1
    5c68:	0009883a 	mov	r4,zero
    5c6c:	014ffc34 	movhi	r5,16368
    5c70:	880d883a 	mov	r6,r17
    5c74:	a00f883a 	mov	r7,r20
    5c78:	103fcf0e 	bge	r2,zero,5bb8 <__alt_mem_Flash_flash_data+0xf4005bb8>
    5c7c:	d9801217 	ldw	r6,72(sp)
    5c80:	dc001117 	ldw	r16,68(sp)
    5c84:	d9800515 	stw	r6,20(sp)
    5c88:	8009883a 	mov	r4,r16
    5c8c:	e00b883a 	mov	r5,fp
    5c90:	00085680 	call	8568 <_Bfree>
    5c94:	d8c00517 	ldw	r3,20(sp)
    5c98:	d9002317 	ldw	r4,140(sp)
    5c9c:	d9802517 	ldw	r6,148(sp)
    5ca0:	b8000005 	stb	zero,0(r23)
    5ca4:	18800044 	addi	r2,r3,1
    5ca8:	20800015 	stw	r2,0(r4)
    5cac:	30027226 	beq	r6,zero,6678 <_dtoa_r+0x10a8>
    5cb0:	35c00015 	stw	r23,0(r6)
    5cb4:	d8800717 	ldw	r2,28(sp)
    5cb8:	003e7406 	br	568c <__alt_mem_Flash_flash_data+0xf400568c>
    5cbc:	00800434 	movhi	r2,16
    5cc0:	10bfffc4 	addi	r2,r2,-1
    5cc4:	a8aa703a 	and	r21,r21,r2
    5cc8:	a83e801e 	bne	r21,zero,56cc <__alt_mem_Flash_flash_data+0xf40056cc>
    5ccc:	008000b4 	movhi	r2,2
    5cd0:	10822204 	addi	r2,r2,2184
    5cd4:	003e7f06 	br	56d4 <__alt_mem_Flash_flash_data+0xf40056d4>
    5cd8:	10c00204 	addi	r3,r2,8
    5cdc:	003e8206 	br	56e8 <__alt_mem_Flash_flash_data+0xf40056e8>
    5ce0:	01400434 	movhi	r5,16
    5ce4:	297fffc4 	addi	r5,r5,-1
    5ce8:	994a703a 	and	r5,r19,r5
    5cec:	9009883a 	mov	r4,r18
    5cf0:	8c7f0044 	addi	r17,r17,-1023
    5cf4:	294ffc34 	orhi	r5,r5,16368
    5cf8:	dd000217 	ldw	r20,8(sp)
    5cfc:	d8000f15 	stw	zero,60(sp)
    5d00:	003e9f06 	br	5780 <__alt_mem_Flash_flash_data+0xf4005780>
    5d04:	008000b4 	movhi	r2,2
    5d08:	10821104 	addi	r2,r2,2116
    5d0c:	003e5f06 	br	568c <__alt_mem_Flash_flash_data+0xf400568c>
    5d10:	80001115 	stw	zero,68(r16)
    5d14:	8009883a 	mov	r4,r16
    5d18:	000b883a 	mov	r5,zero
    5d1c:	00084c00 	call	84c0 <_Balloc>
    5d20:	01bfffc4 	movi	r6,-1
    5d24:	d8800715 	stw	r2,28(sp)
    5d28:	80801015 	stw	r2,64(r16)
    5d2c:	00800044 	movi	r2,1
    5d30:	d9800c15 	stw	r6,48(sp)
    5d34:	d8800b15 	stw	r2,44(sp)
    5d38:	d9800615 	stw	r6,24(sp)
    5d3c:	d8002215 	stw	zero,136(sp)
    5d40:	d8000315 	stw	zero,12(sp)
    5d44:	d8800117 	ldw	r2,4(sp)
    5d48:	10008e16 	blt	r2,zero,5f84 <_dtoa_r+0x9b4>
    5d4c:	d9000517 	ldw	r4,20(sp)
    5d50:	00c00384 	movi	r3,14
    5d54:	19008b16 	blt	r3,r4,5f84 <_dtoa_r+0x9b4>
    5d58:	200490fa 	slli	r2,r4,3
    5d5c:	00c000b4 	movhi	r3,2
    5d60:	d9802217 	ldw	r6,136(sp)
    5d64:	18c24104 	addi	r3,r3,2308
    5d68:	1885883a 	add	r2,r3,r2
    5d6c:	14400017 	ldw	r17,0(r2)
    5d70:	15000117 	ldw	r20,4(r2)
    5d74:	3001c716 	blt	r6,zero,6494 <_dtoa_r+0xec4>
    5d78:	880d883a 	mov	r6,r17
    5d7c:	a00f883a 	mov	r7,r20
    5d80:	9009883a 	mov	r4,r18
    5d84:	980b883a 	mov	r5,r19
    5d88:	000e0f40 	call	e0f4 <__divdf3>
    5d8c:	180b883a 	mov	r5,r3
    5d90:	1009883a 	mov	r4,r2
    5d94:	000fbf80 	call	fbf8 <__fixdfsi>
    5d98:	1009883a 	mov	r4,r2
    5d9c:	102d883a 	mov	r22,r2
    5da0:	000fc800 	call	fc80 <__floatsidf>
    5da4:	1009883a 	mov	r4,r2
    5da8:	180b883a 	mov	r5,r3
    5dac:	880d883a 	mov	r6,r17
    5db0:	a00f883a 	mov	r7,r20
    5db4:	000ec040 	call	ec04 <__muldf3>
    5db8:	9009883a 	mov	r4,r18
    5dbc:	980b883a 	mov	r5,r19
    5dc0:	100d883a 	mov	r6,r2
    5dc4:	180f883a 	mov	r7,r3
    5dc8:	000f3280 	call	f328 <__subdf3>
    5dcc:	d9000717 	ldw	r4,28(sp)
    5dd0:	d9800617 	ldw	r6,24(sp)
    5dd4:	180b883a 	mov	r5,r3
    5dd8:	b0c00c04 	addi	r3,r22,48
    5ddc:	20c00005 	stb	r3,0(r4)
    5de0:	25c00044 	addi	r23,r4,1
    5de4:	01000044 	movi	r4,1
    5de8:	1011883a 	mov	r8,r2
    5dec:	2807883a 	mov	r3,r5
    5df0:	31003d26 	beq	r6,r4,5ee8 <_dtoa_r+0x918>
    5df4:	000d883a 	mov	r6,zero
    5df8:	01d00934 	movhi	r7,16420
    5dfc:	1009883a 	mov	r4,r2
    5e00:	000ec040 	call	ec04 <__muldf3>
    5e04:	1009883a 	mov	r4,r2
    5e08:	180b883a 	mov	r5,r3
    5e0c:	000d883a 	mov	r6,zero
    5e10:	000f883a 	mov	r7,zero
    5e14:	1027883a 	mov	r19,r2
    5e18:	182b883a 	mov	r21,r3
    5e1c:	000e9c00 	call	e9c0 <__eqdf2>
    5e20:	103f9926 	beq	r2,zero,5c88 <__alt_mem_Flash_flash_data+0xf4005c88>
    5e24:	d8c00617 	ldw	r3,24(sp)
    5e28:	d9000717 	ldw	r4,28(sp)
    5e2c:	b825883a 	mov	r18,r23
    5e30:	18bfffc4 	addi	r2,r3,-1
    5e34:	20ad883a 	add	r22,r4,r2
    5e38:	dc000315 	stw	r16,12(sp)
    5e3c:	00000a06 	br	5e68 <_dtoa_r+0x898>
    5e40:	000ec040 	call	ec04 <__muldf3>
    5e44:	1009883a 	mov	r4,r2
    5e48:	180b883a 	mov	r5,r3
    5e4c:	000d883a 	mov	r6,zero
    5e50:	000f883a 	mov	r7,zero
    5e54:	1027883a 	mov	r19,r2
    5e58:	182b883a 	mov	r21,r3
    5e5c:	b825883a 	mov	r18,r23
    5e60:	000e9c00 	call	e9c0 <__eqdf2>
    5e64:	10022626 	beq	r2,zero,6700 <_dtoa_r+0x1130>
    5e68:	880d883a 	mov	r6,r17
    5e6c:	a00f883a 	mov	r7,r20
    5e70:	9809883a 	mov	r4,r19
    5e74:	a80b883a 	mov	r5,r21
    5e78:	000e0f40 	call	e0f4 <__divdf3>
    5e7c:	180b883a 	mov	r5,r3
    5e80:	1009883a 	mov	r4,r2
    5e84:	000fbf80 	call	fbf8 <__fixdfsi>
    5e88:	1009883a 	mov	r4,r2
    5e8c:	1021883a 	mov	r16,r2
    5e90:	000fc800 	call	fc80 <__floatsidf>
    5e94:	1009883a 	mov	r4,r2
    5e98:	180b883a 	mov	r5,r3
    5e9c:	880d883a 	mov	r6,r17
    5ea0:	a00f883a 	mov	r7,r20
    5ea4:	000ec040 	call	ec04 <__muldf3>
    5ea8:	9809883a 	mov	r4,r19
    5eac:	a80b883a 	mov	r5,r21
    5eb0:	100d883a 	mov	r6,r2
    5eb4:	180f883a 	mov	r7,r3
    5eb8:	000f3280 	call	f328 <__subdf3>
    5ebc:	82000c04 	addi	r8,r16,48
    5ec0:	92000005 	stb	r8,0(r18)
    5ec4:	1009883a 	mov	r4,r2
    5ec8:	180b883a 	mov	r5,r3
    5ecc:	000d883a 	mov	r6,zero
    5ed0:	01d00934 	movhi	r7,16420
    5ed4:	1011883a 	mov	r8,r2
    5ed8:	bdc00044 	addi	r23,r23,1
    5edc:	95bfd81e 	bne	r18,r22,5e40 <__alt_mem_Flash_flash_data+0xf4005e40>
    5ee0:	802d883a 	mov	r22,r16
    5ee4:	dc000317 	ldw	r16,12(sp)
    5ee8:	4009883a 	mov	r4,r8
    5eec:	180b883a 	mov	r5,r3
    5ef0:	400d883a 	mov	r6,r8
    5ef4:	180f883a 	mov	r7,r3
    5ef8:	000d8580 	call	d858 <__adddf3>
    5efc:	8809883a 	mov	r4,r17
    5f00:	a00b883a 	mov	r5,r20
    5f04:	100d883a 	mov	r6,r2
    5f08:	180f883a 	mov	r7,r3
    5f0c:	1027883a 	mov	r19,r2
    5f10:	1825883a 	mov	r18,r3
    5f14:	000eb240 	call	eb24 <__ledf2>
    5f18:	10000816 	blt	r2,zero,5f3c <_dtoa_r+0x96c>
    5f1c:	8809883a 	mov	r4,r17
    5f20:	a00b883a 	mov	r5,r20
    5f24:	980d883a 	mov	r6,r19
    5f28:	900f883a 	mov	r7,r18
    5f2c:	000e9c00 	call	e9c0 <__eqdf2>
    5f30:	103f551e 	bne	r2,zero,5c88 <__alt_mem_Flash_flash_data+0xf4005c88>
    5f34:	b580004c 	andi	r22,r22,1
    5f38:	b03f5326 	beq	r22,zero,5c88 <__alt_mem_Flash_flash_data+0xf4005c88>
    5f3c:	bd7fffc3 	ldbu	r21,-1(r23)
    5f40:	b8bfffc4 	addi	r2,r23,-1
    5f44:	1007883a 	mov	r3,r2
    5f48:	01400e44 	movi	r5,57
    5f4c:	d9800717 	ldw	r6,28(sp)
    5f50:	00000506 	br	5f68 <_dtoa_r+0x998>
    5f54:	18ffffc4 	addi	r3,r3,-1
    5f58:	30825e26 	beq	r6,r2,68d4 <_dtoa_r+0x1304>
    5f5c:	1d400003 	ldbu	r21,0(r3)
    5f60:	102f883a 	mov	r23,r2
    5f64:	10bfffc4 	addi	r2,r2,-1
    5f68:	a9003fcc 	andi	r4,r21,255
    5f6c:	2100201c 	xori	r4,r4,128
    5f70:	213fe004 	addi	r4,r4,-128
    5f74:	217ff726 	beq	r4,r5,5f54 <__alt_mem_Flash_flash_data+0xf4005f54>
    5f78:	aa000044 	addi	r8,r21,1
    5f7c:	12000005 	stb	r8,0(r2)
    5f80:	003f4106 	br	5c88 <__alt_mem_Flash_flash_data+0xf4005c88>
    5f84:	d8c00b17 	ldw	r3,44(sp)
    5f88:	18006726 	beq	r3,zero,6128 <_dtoa_r+0xb58>
    5f8c:	d9000317 	ldw	r4,12(sp)
    5f90:	00c00044 	movi	r3,1
    5f94:	19016a0e 	bge	r3,r4,6540 <_dtoa_r+0xf70>
    5f98:	d8800617 	ldw	r2,24(sp)
    5f9c:	d8c00917 	ldw	r3,36(sp)
    5fa0:	157fffc4 	addi	r21,r2,-1
    5fa4:	1d420716 	blt	r3,r21,67c4 <_dtoa_r+0x11f4>
    5fa8:	1d6bc83a 	sub	r21,r3,r21
    5fac:	d8800617 	ldw	r2,24(sp)
    5fb0:	1002c716 	blt	r2,zero,6ad0 <_dtoa_r+0x1500>
    5fb4:	dd000817 	ldw	r20,32(sp)
    5fb8:	d8800617 	ldw	r2,24(sp)
    5fbc:	d9800817 	ldw	r6,32(sp)
    5fc0:	8009883a 	mov	r4,r16
    5fc4:	01400044 	movi	r5,1
    5fc8:	308d883a 	add	r6,r6,r2
    5fcc:	d9800815 	stw	r6,32(sp)
    5fd0:	b0ad883a 	add	r22,r22,r2
    5fd4:	00088cc0 	call	88cc <__i2b>
    5fd8:	1023883a 	mov	r17,r2
    5fdc:	a0000826 	beq	r20,zero,6000 <_dtoa_r+0xa30>
    5fe0:	0580070e 	bge	zero,r22,6000 <_dtoa_r+0xa30>
    5fe4:	b005883a 	mov	r2,r22
    5fe8:	a5812016 	blt	r20,r22,646c <_dtoa_r+0xe9c>
    5fec:	d8c00817 	ldw	r3,32(sp)
    5ff0:	a0a9c83a 	sub	r20,r20,r2
    5ff4:	b0adc83a 	sub	r22,r22,r2
    5ff8:	1887c83a 	sub	r3,r3,r2
    5ffc:	d8c00815 	stw	r3,32(sp)
    6000:	d9000917 	ldw	r4,36(sp)
    6004:	0100140e 	bge	zero,r4,6058 <_dtoa_r+0xa88>
    6008:	d9800b17 	ldw	r6,44(sp)
    600c:	3001e526 	beq	r6,zero,67a4 <_dtoa_r+0x11d4>
    6010:	05400e0e 	bge	zero,r21,604c <_dtoa_r+0xa7c>
    6014:	880b883a 	mov	r5,r17
    6018:	8009883a 	mov	r4,r16
    601c:	a80d883a 	mov	r6,r21
    6020:	0008b040 	call	8b04 <__pow5mult>
    6024:	e00d883a 	mov	r6,fp
    6028:	8009883a 	mov	r4,r16
    602c:	100b883a 	mov	r5,r2
    6030:	1023883a 	mov	r17,r2
    6034:	00089080 	call	8908 <__multiply>
    6038:	102f883a 	mov	r23,r2
    603c:	e00b883a 	mov	r5,fp
    6040:	8009883a 	mov	r4,r16
    6044:	00085680 	call	8568 <_Bfree>
    6048:	b839883a 	mov	fp,r23
    604c:	d8800917 	ldw	r2,36(sp)
    6050:	154dc83a 	sub	r6,r2,r21
    6054:	3001281e 	bne	r6,zero,64f8 <_dtoa_r+0xf28>
    6058:	05c00044 	movi	r23,1
    605c:	8009883a 	mov	r4,r16
    6060:	b80b883a 	mov	r5,r23
    6064:	00088cc0 	call	88cc <__i2b>
    6068:	d8c00a17 	ldw	r3,40(sp)
    606c:	102b883a 	mov	r21,r2
    6070:	00c0310e 	bge	zero,r3,6138 <_dtoa_r+0xb68>
    6074:	8009883a 	mov	r4,r16
    6078:	100b883a 	mov	r5,r2
    607c:	180d883a 	mov	r6,r3
    6080:	0008b040 	call	8b04 <__pow5mult>
    6084:	d9000317 	ldw	r4,12(sp)
    6088:	102b883a 	mov	r21,r2
    608c:	b9011f0e 	bge	r23,r4,650c <_dtoa_r+0xf3c>
    6090:	0027883a 	mov	r19,zero
    6094:	a8800417 	ldw	r2,16(r21)
    6098:	10800104 	addi	r2,r2,4
    609c:	1085883a 	add	r2,r2,r2
    60a0:	1085883a 	add	r2,r2,r2
    60a4:	a885883a 	add	r2,r21,r2
    60a8:	11000017 	ldw	r4,0(r2)
    60ac:	00087b40 	call	87b4 <__hi0bits>
    60b0:	00c00804 	movi	r3,32
    60b4:	1885c83a 	sub	r2,r3,r2
    60b8:	00002506 	br	6150 <_dtoa_r+0xb80>
    60bc:	01800044 	movi	r6,1
    60c0:	d9800d15 	stw	r6,52(sp)
    60c4:	003dec06 	br	5878 <__alt_mem_Flash_flash_data+0xf4005878>
    60c8:	d8c00817 	ldw	r3,32(sp)
    60cc:	d9000517 	ldw	r4,20(sp)
    60d0:	d8000a15 	stw	zero,40(sp)
    60d4:	1907c83a 	sub	r3,r3,r4
    60d8:	010dc83a 	sub	r6,zero,r4
    60dc:	d8c00815 	stw	r3,32(sp)
    60e0:	d9800915 	stw	r6,36(sp)
    60e4:	003ded06 	br	589c <__alt_mem_Flash_flash_data+0xf400589c>
    60e8:	05adc83a 	sub	r22,zero,r22
    60ec:	dd800815 	stw	r22,32(sp)
    60f0:	002d883a 	mov	r22,zero
    60f4:	003de406 	br	5888 <__alt_mem_Flash_flash_data+0xf4005888>
    60f8:	d9000517 	ldw	r4,20(sp)
    60fc:	000fc800 	call	fc80 <__floatsidf>
    6100:	1009883a 	mov	r4,r2
    6104:	180b883a 	mov	r5,r3
    6108:	b00d883a 	mov	r6,r22
    610c:	a80f883a 	mov	r7,r21
    6110:	000e9c00 	call	e9c0 <__eqdf2>
    6114:	103dc726 	beq	r2,zero,5834 <__alt_mem_Flash_flash_data+0xf4005834>
    6118:	d8800517 	ldw	r2,20(sp)
    611c:	10bfffc4 	addi	r2,r2,-1
    6120:	d8800515 	stw	r2,20(sp)
    6124:	003dc306 	br	5834 <__alt_mem_Flash_flash_data+0xf4005834>
    6128:	dd400917 	ldw	r21,36(sp)
    612c:	dd000817 	ldw	r20,32(sp)
    6130:	0023883a 	mov	r17,zero
    6134:	003fa906 	br	5fdc <__alt_mem_Flash_flash_data+0xf4005fdc>
    6138:	d9800317 	ldw	r6,12(sp)
    613c:	b981670e 	bge	r23,r6,66dc <_dtoa_r+0x110c>
    6140:	0027883a 	mov	r19,zero
    6144:	d8c00a17 	ldw	r3,40(sp)
    6148:	183fd21e 	bne	r3,zero,6094 <__alt_mem_Flash_flash_data+0xf4006094>
    614c:	00800044 	movi	r2,1
    6150:	1585883a 	add	r2,r2,r22
    6154:	108007cc 	andi	r2,r2,31
    6158:	10005f26 	beq	r2,zero,62d8 <_dtoa_r+0xd08>
    615c:	00c00804 	movi	r3,32
    6160:	1887c83a 	sub	r3,r3,r2
    6164:	01000104 	movi	r4,4
    6168:	20c2dd0e 	bge	r4,r3,6ce0 <_dtoa_r+0x1710>
    616c:	d9000817 	ldw	r4,32(sp)
    6170:	00c00704 	movi	r3,28
    6174:	1885c83a 	sub	r2,r3,r2
    6178:	2089883a 	add	r4,r4,r2
    617c:	d9000815 	stw	r4,32(sp)
    6180:	a0a9883a 	add	r20,r20,r2
    6184:	b0ad883a 	add	r22,r22,r2
    6188:	d8800817 	ldw	r2,32(sp)
    618c:	0080050e 	bge	zero,r2,61a4 <_dtoa_r+0xbd4>
    6190:	e00b883a 	mov	r5,fp
    6194:	8009883a 	mov	r4,r16
    6198:	100d883a 	mov	r6,r2
    619c:	0008c440 	call	8c44 <__lshift>
    61a0:	1039883a 	mov	fp,r2
    61a4:	0580050e 	bge	zero,r22,61bc <_dtoa_r+0xbec>
    61a8:	a80b883a 	mov	r5,r21
    61ac:	8009883a 	mov	r4,r16
    61b0:	b00d883a 	mov	r6,r22
    61b4:	0008c440 	call	8c44 <__lshift>
    61b8:	102b883a 	mov	r21,r2
    61bc:	d8c00d17 	ldw	r3,52(sp)
    61c0:	1801161e 	bne	r3,zero,661c <_dtoa_r+0x104c>
    61c4:	d8c00617 	ldw	r3,24(sp)
    61c8:	00c12d0e 	bge	zero,r3,6680 <_dtoa_r+0x10b0>
    61cc:	d8c00b17 	ldw	r3,44(sp)
    61d0:	1800571e 	bne	r3,zero,6330 <_dtoa_r+0xd60>
    61d4:	dc800717 	ldw	r18,28(sp)
    61d8:	dcc00617 	ldw	r19,24(sp)
    61dc:	9029883a 	mov	r20,r18
    61e0:	00000206 	br	61ec <_dtoa_r+0xc1c>
    61e4:	00085900 	call	8590 <__multadd>
    61e8:	1039883a 	mov	fp,r2
    61ec:	e009883a 	mov	r4,fp
    61f0:	a80b883a 	mov	r5,r21
    61f4:	00053d00 	call	53d0 <quorem>
    61f8:	10800c04 	addi	r2,r2,48
    61fc:	90800005 	stb	r2,0(r18)
    6200:	94800044 	addi	r18,r18,1
    6204:	9507c83a 	sub	r3,r18,r20
    6208:	8009883a 	mov	r4,r16
    620c:	e00b883a 	mov	r5,fp
    6210:	01800284 	movi	r6,10
    6214:	000f883a 	mov	r7,zero
    6218:	1cfff216 	blt	r3,r19,61e4 <__alt_mem_Flash_flash_data+0xf40061e4>
    621c:	1011883a 	mov	r8,r2
    6220:	d8800617 	ldw	r2,24(sp)
    6224:	00822e0e 	bge	zero,r2,6ae0 <_dtoa_r+0x1510>
    6228:	d9000717 	ldw	r4,28(sp)
    622c:	0025883a 	mov	r18,zero
    6230:	20af883a 	add	r23,r4,r2
    6234:	e00b883a 	mov	r5,fp
    6238:	01800044 	movi	r6,1
    623c:	8009883a 	mov	r4,r16
    6240:	da001715 	stw	r8,92(sp)
    6244:	0008c440 	call	8c44 <__lshift>
    6248:	1009883a 	mov	r4,r2
    624c:	a80b883a 	mov	r5,r21
    6250:	1039883a 	mov	fp,r2
    6254:	0008d940 	call	8d94 <__mcmp>
    6258:	da001717 	ldw	r8,92(sp)
    625c:	00816e0e 	bge	zero,r2,6818 <_dtoa_r+0x1248>
    6260:	b93fffc3 	ldbu	r4,-1(r23)
    6264:	b8bfffc4 	addi	r2,r23,-1
    6268:	1007883a 	mov	r3,r2
    626c:	01800e44 	movi	r6,57
    6270:	d9c00717 	ldw	r7,28(sp)
    6274:	00000506 	br	628c <_dtoa_r+0xcbc>
    6278:	18ffffc4 	addi	r3,r3,-1
    627c:	38811926 	beq	r7,r2,66e4 <_dtoa_r+0x1114>
    6280:	19000003 	ldbu	r4,0(r3)
    6284:	102f883a 	mov	r23,r2
    6288:	10bfffc4 	addi	r2,r2,-1
    628c:	21403fcc 	andi	r5,r4,255
    6290:	2940201c 	xori	r5,r5,128
    6294:	297fe004 	addi	r5,r5,-128
    6298:	29bff726 	beq	r5,r6,6278 <__alt_mem_Flash_flash_data+0xf4006278>
    629c:	21000044 	addi	r4,r4,1
    62a0:	11000005 	stb	r4,0(r2)
    62a4:	8009883a 	mov	r4,r16
    62a8:	a80b883a 	mov	r5,r21
    62ac:	00085680 	call	8568 <_Bfree>
    62b0:	883e7526 	beq	r17,zero,5c88 <__alt_mem_Flash_flash_data+0xf4005c88>
    62b4:	90000426 	beq	r18,zero,62c8 <_dtoa_r+0xcf8>
    62b8:	94400326 	beq	r18,r17,62c8 <_dtoa_r+0xcf8>
    62bc:	8009883a 	mov	r4,r16
    62c0:	900b883a 	mov	r5,r18
    62c4:	00085680 	call	8568 <_Bfree>
    62c8:	8009883a 	mov	r4,r16
    62cc:	880b883a 	mov	r5,r17
    62d0:	00085680 	call	8568 <_Bfree>
    62d4:	003e6c06 	br	5c88 <__alt_mem_Flash_flash_data+0xf4005c88>
    62d8:	00800704 	movi	r2,28
    62dc:	d9800817 	ldw	r6,32(sp)
    62e0:	a0a9883a 	add	r20,r20,r2
    62e4:	b0ad883a 	add	r22,r22,r2
    62e8:	308d883a 	add	r6,r6,r2
    62ec:	d9800815 	stw	r6,32(sp)
    62f0:	003fa506 	br	6188 <__alt_mem_Flash_flash_data+0xf4006188>
    62f4:	013efb84 	movi	r4,-1042
    62f8:	246bc83a 	sub	r21,r4,r17
    62fc:	9548983a 	sll	r4,r18,r21
    6300:	003d1806 	br	5764 <__alt_mem_Flash_flash_data+0xf4005764>
    6304:	d8000d15 	stw	zero,52(sp)
    6308:	003d5b06 	br	5878 <__alt_mem_Flash_flash_data+0xf4005878>
    630c:	880b883a 	mov	r5,r17
    6310:	8009883a 	mov	r4,r16
    6314:	01800284 	movi	r6,10
    6318:	000f883a 	mov	r7,zero
    631c:	00085900 	call	8590 <__multadd>
    6320:	1023883a 	mov	r17,r2
    6324:	d8800c17 	ldw	r2,48(sp)
    6328:	0082550e 	bge	zero,r2,6c80 <_dtoa_r+0x16b0>
    632c:	d8800615 	stw	r2,24(sp)
    6330:	0500050e 	bge	zero,r20,6348 <_dtoa_r+0xd78>
    6334:	880b883a 	mov	r5,r17
    6338:	8009883a 	mov	r4,r16
    633c:	a00d883a 	mov	r6,r20
    6340:	0008c440 	call	8c44 <__lshift>
    6344:	1023883a 	mov	r17,r2
    6348:	98016a1e 	bne	r19,zero,68f4 <_dtoa_r+0x1324>
    634c:	8829883a 	mov	r20,r17
    6350:	d9000617 	ldw	r4,24(sp)
    6354:	dcc00717 	ldw	r19,28(sp)
    6358:	9480004c 	andi	r18,r18,1
    635c:	20bfffc4 	addi	r2,r4,-1
    6360:	9885883a 	add	r2,r19,r2
    6364:	d8800415 	stw	r2,16(sp)
    6368:	dc800615 	stw	r18,24(sp)
    636c:	e009883a 	mov	r4,fp
    6370:	a80b883a 	mov	r5,r21
    6374:	00053d00 	call	53d0 <quorem>
    6378:	e009883a 	mov	r4,fp
    637c:	880b883a 	mov	r5,r17
    6380:	102f883a 	mov	r23,r2
    6384:	0008d940 	call	8d94 <__mcmp>
    6388:	8009883a 	mov	r4,r16
    638c:	a80b883a 	mov	r5,r21
    6390:	a00d883a 	mov	r6,r20
    6394:	102d883a 	mov	r22,r2
    6398:	0008df40 	call	8df4 <__mdiff>
    639c:	1007883a 	mov	r3,r2
    63a0:	10800317 	ldw	r2,12(r2)
    63a4:	bc800c04 	addi	r18,r23,48
    63a8:	1000971e 	bne	r2,zero,6608 <_dtoa_r+0x1038>
    63ac:	180b883a 	mov	r5,r3
    63b0:	e009883a 	mov	r4,fp
    63b4:	d8c01515 	stw	r3,84(sp)
    63b8:	0008d940 	call	8d94 <__mcmp>
    63bc:	d8c01517 	ldw	r3,84(sp)
    63c0:	8009883a 	mov	r4,r16
    63c4:	d8801515 	stw	r2,84(sp)
    63c8:	180b883a 	mov	r5,r3
    63cc:	00085680 	call	8568 <_Bfree>
    63d0:	d8801517 	ldw	r2,84(sp)
    63d4:	1000041e 	bne	r2,zero,63e8 <_dtoa_r+0xe18>
    63d8:	d9800317 	ldw	r6,12(sp)
    63dc:	3000021e 	bne	r6,zero,63e8 <_dtoa_r+0xe18>
    63e0:	d8c00617 	ldw	r3,24(sp)
    63e4:	18007626 	beq	r3,zero,65c0 <_dtoa_r+0xff0>
    63e8:	b0005b16 	blt	r22,zero,6558 <_dtoa_r+0xf88>
    63ec:	b000041e 	bne	r22,zero,6400 <_dtoa_r+0xe30>
    63f0:	d9000317 	ldw	r4,12(sp)
    63f4:	2000021e 	bne	r4,zero,6400 <_dtoa_r+0xe30>
    63f8:	d8c00617 	ldw	r3,24(sp)
    63fc:	18005626 	beq	r3,zero,6558 <_dtoa_r+0xf88>
    6400:	00814d16 	blt	zero,r2,6938 <_dtoa_r+0x1368>
    6404:	d8c00417 	ldw	r3,16(sp)
    6408:	9d800044 	addi	r22,r19,1
    640c:	9c800005 	stb	r18,0(r19)
    6410:	b02f883a 	mov	r23,r22
    6414:	98c14c26 	beq	r19,r3,6948 <_dtoa_r+0x1378>
    6418:	e00b883a 	mov	r5,fp
    641c:	8009883a 	mov	r4,r16
    6420:	01800284 	movi	r6,10
    6424:	000f883a 	mov	r7,zero
    6428:	00085900 	call	8590 <__multadd>
    642c:	1039883a 	mov	fp,r2
    6430:	8d006d26 	beq	r17,r20,65e8 <_dtoa_r+0x1018>
    6434:	880b883a 	mov	r5,r17
    6438:	01800284 	movi	r6,10
    643c:	000f883a 	mov	r7,zero
    6440:	8009883a 	mov	r4,r16
    6444:	00085900 	call	8590 <__multadd>
    6448:	a00b883a 	mov	r5,r20
    644c:	8009883a 	mov	r4,r16
    6450:	01800284 	movi	r6,10
    6454:	000f883a 	mov	r7,zero
    6458:	1023883a 	mov	r17,r2
    645c:	00085900 	call	8590 <__multadd>
    6460:	1029883a 	mov	r20,r2
    6464:	b027883a 	mov	r19,r22
    6468:	003fc006 	br	636c <__alt_mem_Flash_flash_data+0xf400636c>
    646c:	a005883a 	mov	r2,r20
    6470:	003ede06 	br	5fec <__alt_mem_Flash_flash_data+0xf4005fec>
    6474:	01000044 	movi	r4,1
    6478:	d9000b15 	stw	r4,44(sp)
    647c:	d9802217 	ldw	r6,136(sp)
    6480:	0180dc0e 	bge	zero,r6,67f4 <_dtoa_r+0x1224>
    6484:	3023883a 	mov	r17,r6
    6488:	d9800c15 	stw	r6,48(sp)
    648c:	d9800615 	stw	r6,24(sp)
    6490:	003d1e06 	br	590c <__alt_mem_Flash_flash_data+0xf400590c>
    6494:	d8800617 	ldw	r2,24(sp)
    6498:	00be3716 	blt	zero,r2,5d78 <__alt_mem_Flash_flash_data+0xf4005d78>
    649c:	1000be1e 	bne	r2,zero,6798 <_dtoa_r+0x11c8>
    64a0:	8809883a 	mov	r4,r17
    64a4:	a00b883a 	mov	r5,r20
    64a8:	000d883a 	mov	r6,zero
    64ac:	01d00534 	movhi	r7,16404
    64b0:	000ec040 	call	ec04 <__muldf3>
    64b4:	1009883a 	mov	r4,r2
    64b8:	180b883a 	mov	r5,r3
    64bc:	900d883a 	mov	r6,r18
    64c0:	980f883a 	mov	r7,r19
    64c4:	000ea440 	call	ea44 <__gedf2>
    64c8:	002b883a 	mov	r21,zero
    64cc:	0023883a 	mov	r17,zero
    64d0:	10007a16 	blt	r2,zero,66bc <_dtoa_r+0x10ec>
    64d4:	d9002217 	ldw	r4,136(sp)
    64d8:	ddc00717 	ldw	r23,28(sp)
    64dc:	0108303a 	nor	r4,zero,r4
    64e0:	d9000515 	stw	r4,20(sp)
    64e4:	8009883a 	mov	r4,r16
    64e8:	a80b883a 	mov	r5,r21
    64ec:	00085680 	call	8568 <_Bfree>
    64f0:	883f751e 	bne	r17,zero,62c8 <__alt_mem_Flash_flash_data+0xf40062c8>
    64f4:	003de406 	br	5c88 <__alt_mem_Flash_flash_data+0xf4005c88>
    64f8:	e00b883a 	mov	r5,fp
    64fc:	8009883a 	mov	r4,r16
    6500:	0008b040 	call	8b04 <__pow5mult>
    6504:	1039883a 	mov	fp,r2
    6508:	003ed306 	br	6058 <__alt_mem_Flash_flash_data+0xf4006058>
    650c:	903ee01e 	bne	r18,zero,6090 <__alt_mem_Flash_flash_data+0xf4006090>
    6510:	00800434 	movhi	r2,16
    6514:	10bfffc4 	addi	r2,r2,-1
    6518:	9884703a 	and	r2,r19,r2
    651c:	103f081e 	bne	r2,zero,6140 <__alt_mem_Flash_flash_data+0xf4006140>
    6520:	9cdffc2c 	andhi	r19,r19,32752
    6524:	983f0626 	beq	r19,zero,6140 <__alt_mem_Flash_flash_data+0xf4006140>
    6528:	d8800817 	ldw	r2,32(sp)
    652c:	b5800044 	addi	r22,r22,1
    6530:	04c00044 	movi	r19,1
    6534:	10800044 	addi	r2,r2,1
    6538:	d8800815 	stw	r2,32(sp)
    653c:	003f0106 	br	6144 <__alt_mem_Flash_flash_data+0xf4006144>
    6540:	d9800f17 	ldw	r6,60(sp)
    6544:	30016826 	beq	r6,zero,6ae8 <_dtoa_r+0x1518>
    6548:	10810cc4 	addi	r2,r2,1075
    654c:	dd400917 	ldw	r21,36(sp)
    6550:	dd000817 	ldw	r20,32(sp)
    6554:	003e9906 	br	5fbc <__alt_mem_Flash_flash_data+0xf4005fbc>
    6558:	9011883a 	mov	r8,r18
    655c:	4007883a 	mov	r3,r8
    6560:	e02d883a 	mov	r22,fp
    6564:	0080100e 	bge	zero,r2,65a8 <_dtoa_r+0xfd8>
    6568:	01800044 	movi	r6,1
    656c:	8009883a 	mov	r4,r16
    6570:	e00b883a 	mov	r5,fp
    6574:	da001515 	stw	r8,84(sp)
    6578:	da001715 	stw	r8,92(sp)
    657c:	0008c440 	call	8c44 <__lshift>
    6580:	1009883a 	mov	r4,r2
    6584:	a80b883a 	mov	r5,r21
    6588:	102d883a 	mov	r22,r2
    658c:	0008d940 	call	8d94 <__mcmp>
    6590:	d8c01517 	ldw	r3,84(sp)
    6594:	da001717 	ldw	r8,92(sp)
    6598:	0081a50e 	bge	zero,r2,6c30 <_dtoa_r+0x1660>
    659c:	00800e44 	movi	r2,57
    65a0:	40817b26 	beq	r8,r2,6b90 <_dtoa_r+0x15c0>
    65a4:	40c00044 	addi	r3,r8,1
    65a8:	8825883a 	mov	r18,r17
    65ac:	9dc00044 	addi	r23,r19,1
    65b0:	98c00005 	stb	r3,0(r19)
    65b4:	a023883a 	mov	r17,r20
    65b8:	b039883a 	mov	fp,r22
    65bc:	003f3906 	br	62a4 <__alt_mem_Flash_flash_data+0xf40062a4>
    65c0:	00800e44 	movi	r2,57
    65c4:	9011883a 	mov	r8,r18
    65c8:	90817226 	beq	r18,r2,6b94 <_dtoa_r+0x15c4>
    65cc:	0580010e 	bge	zero,r22,65d4 <_dtoa_r+0x1004>
    65d0:	ba000c44 	addi	r8,r23,49
    65d4:	8825883a 	mov	r18,r17
    65d8:	9dc00044 	addi	r23,r19,1
    65dc:	9a000005 	stb	r8,0(r19)
    65e0:	a023883a 	mov	r17,r20
    65e4:	003f2f06 	br	62a4 <__alt_mem_Flash_flash_data+0xf40062a4>
    65e8:	880b883a 	mov	r5,r17
    65ec:	8009883a 	mov	r4,r16
    65f0:	01800284 	movi	r6,10
    65f4:	000f883a 	mov	r7,zero
    65f8:	00085900 	call	8590 <__multadd>
    65fc:	1023883a 	mov	r17,r2
    6600:	1029883a 	mov	r20,r2
    6604:	003f9706 	br	6464 <__alt_mem_Flash_flash_data+0xf4006464>
    6608:	8009883a 	mov	r4,r16
    660c:	180b883a 	mov	r5,r3
    6610:	00085680 	call	8568 <_Bfree>
    6614:	00800044 	movi	r2,1
    6618:	003f7306 	br	63e8 <__alt_mem_Flash_flash_data+0xf40063e8>
    661c:	e009883a 	mov	r4,fp
    6620:	a80b883a 	mov	r5,r21
    6624:	0008d940 	call	8d94 <__mcmp>
    6628:	103ee60e 	bge	r2,zero,61c4 <__alt_mem_Flash_flash_data+0xf40061c4>
    662c:	8009883a 	mov	r4,r16
    6630:	e00b883a 	mov	r5,fp
    6634:	01800284 	movi	r6,10
    6638:	000f883a 	mov	r7,zero
    663c:	00085900 	call	8590 <__multadd>
    6640:	d9000517 	ldw	r4,20(sp)
    6644:	d9800b17 	ldw	r6,44(sp)
    6648:	1039883a 	mov	fp,r2
    664c:	213fffc4 	addi	r4,r4,-1
    6650:	d9000515 	stw	r4,20(sp)
    6654:	303f2d1e 	bne	r6,zero,630c <__alt_mem_Flash_flash_data+0xf400630c>
    6658:	d9000c17 	ldw	r4,48(sp)
    665c:	0101780e 	bge	zero,r4,6c40 <_dtoa_r+0x1670>
    6660:	d9000615 	stw	r4,24(sp)
    6664:	003edb06 	br	61d4 <__alt_mem_Flash_flash_data+0xf40061d4>
    6668:	00800084 	movi	r2,2
    666c:	30818e1e 	bne	r6,r2,6ca8 <_dtoa_r+0x16d8>
    6670:	d8000b15 	stw	zero,44(sp)
    6674:	003f8106 	br	647c <__alt_mem_Flash_flash_data+0xf400647c>
    6678:	d8800717 	ldw	r2,28(sp)
    667c:	003c0306 	br	568c <__alt_mem_Flash_flash_data+0xf400568c>
    6680:	d9000317 	ldw	r4,12(sp)
    6684:	00800084 	movi	r2,2
    6688:	113ed00e 	bge	r2,r4,61cc <__alt_mem_Flash_flash_data+0xf40061cc>
    668c:	d8c00617 	ldw	r3,24(sp)
    6690:	183f901e 	bne	r3,zero,64d4 <__alt_mem_Flash_flash_data+0xf40064d4>
    6694:	a80b883a 	mov	r5,r21
    6698:	8009883a 	mov	r4,r16
    669c:	01800144 	movi	r6,5
    66a0:	000f883a 	mov	r7,zero
    66a4:	00085900 	call	8590 <__multadd>
    66a8:	e009883a 	mov	r4,fp
    66ac:	100b883a 	mov	r5,r2
    66b0:	102b883a 	mov	r21,r2
    66b4:	0008d940 	call	8d94 <__mcmp>
    66b8:	00bf860e 	bge	zero,r2,64d4 <__alt_mem_Flash_flash_data+0xf40064d4>
    66bc:	d9800717 	ldw	r6,28(sp)
    66c0:	00800c44 	movi	r2,49
    66c4:	30800005 	stb	r2,0(r6)
    66c8:	d8800517 	ldw	r2,20(sp)
    66cc:	35c00044 	addi	r23,r6,1
    66d0:	10800044 	addi	r2,r2,1
    66d4:	d8800515 	stw	r2,20(sp)
    66d8:	003f8206 	br	64e4 <__alt_mem_Flash_flash_data+0xf40064e4>
    66dc:	903e981e 	bne	r18,zero,6140 <__alt_mem_Flash_flash_data+0xf4006140>
    66e0:	003f8b06 	br	6510 <__alt_mem_Flash_flash_data+0xf4006510>
    66e4:	d9800517 	ldw	r6,20(sp)
    66e8:	d8c00717 	ldw	r3,28(sp)
    66ec:	00800c44 	movi	r2,49
    66f0:	31800044 	addi	r6,r6,1
    66f4:	d9800515 	stw	r6,20(sp)
    66f8:	18800005 	stb	r2,0(r3)
    66fc:	003ee906 	br	62a4 <__alt_mem_Flash_flash_data+0xf40062a4>
    6700:	dc000317 	ldw	r16,12(sp)
    6704:	003d6006 	br	5c88 <__alt_mem_Flash_flash_data+0xf4005c88>
    6708:	8809883a 	mov	r4,r17
    670c:	000fc800 	call	fc80 <__floatsidf>
    6710:	a009883a 	mov	r4,r20
    6714:	a80b883a 	mov	r5,r21
    6718:	100d883a 	mov	r6,r2
    671c:	180f883a 	mov	r7,r3
    6720:	000ec040 	call	ec04 <__muldf3>
    6724:	1009883a 	mov	r4,r2
    6728:	180b883a 	mov	r5,r3
    672c:	000d883a 	mov	r6,zero
    6730:	01d00734 	movhi	r7,16412
    6734:	000d8580 	call	d858 <__adddf3>
    6738:	1023883a 	mov	r17,r2
    673c:	00bf3034 	movhi	r2,64704
    6740:	1885883a 	add	r2,r3,r2
    6744:	d8800e15 	stw	r2,56(sp)
    6748:	a009883a 	mov	r4,r20
    674c:	a80b883a 	mov	r5,r21
    6750:	000d883a 	mov	r6,zero
    6754:	01d00534 	movhi	r7,16404
    6758:	000f3280 	call	f328 <__subdf3>
    675c:	d9c00e17 	ldw	r7,56(sp)
    6760:	1009883a 	mov	r4,r2
    6764:	180b883a 	mov	r5,r3
    6768:	880d883a 	mov	r6,r17
    676c:	102b883a 	mov	r21,r2
    6770:	1829883a 	mov	r20,r3
    6774:	000ea440 	call	ea44 <__gedf2>
    6778:	00807716 	blt	zero,r2,6958 <_dtoa_r+0x1388>
    677c:	d8800e17 	ldw	r2,56(sp)
    6780:	a809883a 	mov	r4,r21
    6784:	a00b883a 	mov	r5,r20
    6788:	11e0003c 	xorhi	r7,r2,32768
    678c:	880d883a 	mov	r6,r17
    6790:	000eb240 	call	eb24 <__ledf2>
    6794:	103d6b0e 	bge	r2,zero,5d44 <__alt_mem_Flash_flash_data+0xf4005d44>
    6798:	002b883a 	mov	r21,zero
    679c:	0023883a 	mov	r17,zero
    67a0:	003f4c06 	br	64d4 <__alt_mem_Flash_flash_data+0xf40064d4>
    67a4:	d9800917 	ldw	r6,36(sp)
    67a8:	e00b883a 	mov	r5,fp
    67ac:	8009883a 	mov	r4,r16
    67b0:	0008b040 	call	8b04 <__pow5mult>
    67b4:	1039883a 	mov	fp,r2
    67b8:	003e2706 	br	6058 <__alt_mem_Flash_flash_data+0xf4006058>
    67bc:	d8000b15 	stw	zero,44(sp)
    67c0:	003c4906 	br	58e8 <__alt_mem_Flash_flash_data+0xf40058e8>
    67c4:	d9000917 	ldw	r4,36(sp)
    67c8:	d9800a17 	ldw	r6,40(sp)
    67cc:	dd400915 	stw	r21,36(sp)
    67d0:	a905c83a 	sub	r2,r21,r4
    67d4:	308d883a 	add	r6,r6,r2
    67d8:	d9800a15 	stw	r6,40(sp)
    67dc:	002b883a 	mov	r21,zero
    67e0:	003df206 	br	5fac <__alt_mem_Flash_flash_data+0xf4005fac>
    67e4:	dc800e15 	stw	r18,56(sp)
    67e8:	982b883a 	mov	r21,r19
    67ec:	04400084 	movi	r17,2
    67f0:	003c7406 	br	59c4 <__alt_mem_Flash_flash_data+0xf40059c4>
    67f4:	04400044 	movi	r17,1
    67f8:	dc400c15 	stw	r17,48(sp)
    67fc:	dc400615 	stw	r17,24(sp)
    6800:	dc402215 	stw	r17,136(sp)
    6804:	80001115 	stw	zero,68(r16)
    6808:	000b883a 	mov	r5,zero
    680c:	003c4a06 	br	5938 <__alt_mem_Flash_flash_data+0xf4005938>
    6810:	3023883a 	mov	r17,r6
    6814:	003ffb06 	br	6804 <__alt_mem_Flash_flash_data+0xf4006804>
    6818:	1000021e 	bne	r2,zero,6824 <_dtoa_r+0x1254>
    681c:	4200004c 	andi	r8,r8,1
    6820:	403e8f1e 	bne	r8,zero,6260 <__alt_mem_Flash_flash_data+0xf4006260>
    6824:	01000c04 	movi	r4,48
    6828:	00000106 	br	6830 <_dtoa_r+0x1260>
    682c:	102f883a 	mov	r23,r2
    6830:	b8bfffc4 	addi	r2,r23,-1
    6834:	10c00007 	ldb	r3,0(r2)
    6838:	193ffc26 	beq	r3,r4,682c <__alt_mem_Flash_flash_data+0xf400682c>
    683c:	003e9906 	br	62a4 <__alt_mem_Flash_flash_data+0xf40062a4>
    6840:	d9000517 	ldw	r4,20(sp)
    6844:	012fc83a 	sub	r23,zero,r4
    6848:	b800ad26 	beq	r23,zero,6b00 <_dtoa_r+0x1530>
    684c:	b88003cc 	andi	r2,r23,15
    6850:	100490fa 	slli	r2,r2,3
    6854:	00c000b4 	movhi	r3,2
    6858:	18c24104 	addi	r3,r3,2308
    685c:	1885883a 	add	r2,r3,r2
    6860:	11800017 	ldw	r6,0(r2)
    6864:	11c00117 	ldw	r7,4(r2)
    6868:	b82fd13a 	srai	r23,r23,4
    686c:	9009883a 	mov	r4,r18
    6870:	980b883a 	mov	r5,r19
    6874:	000ec040 	call	ec04 <__muldf3>
    6878:	1029883a 	mov	r20,r2
    687c:	182b883a 	mov	r21,r3
    6880:	b800f426 	beq	r23,zero,6c54 <_dtoa_r+0x1684>
    6884:	020000b4 	movhi	r8,2
    6888:	42023704 	addi	r8,r8,2268
    688c:	8029883a 	mov	r20,r16
    6890:	04400084 	movi	r17,2
    6894:	4021883a 	mov	r16,r8
    6898:	b980004c 	andi	r6,r23,1
    689c:	1009883a 	mov	r4,r2
    68a0:	b82fd07a 	srai	r23,r23,1
    68a4:	180b883a 	mov	r5,r3
    68a8:	30000426 	beq	r6,zero,68bc <_dtoa_r+0x12ec>
    68ac:	81800017 	ldw	r6,0(r16)
    68b0:	81c00117 	ldw	r7,4(r16)
    68b4:	8c400044 	addi	r17,r17,1
    68b8:	000ec040 	call	ec04 <__muldf3>
    68bc:	84000204 	addi	r16,r16,8
    68c0:	b83ff51e 	bne	r23,zero,6898 <__alt_mem_Flash_flash_data+0xf4006898>
    68c4:	a021883a 	mov	r16,r20
    68c8:	182b883a 	mov	r21,r3
    68cc:	1029883a 	mov	r20,r2
    68d0:	003c5506 	br	5a28 <__alt_mem_Flash_flash_data+0xf4005a28>
    68d4:	d9800517 	ldw	r6,20(sp)
    68d8:	d9000717 	ldw	r4,28(sp)
    68dc:	00c00c04 	movi	r3,48
    68e0:	31800044 	addi	r6,r6,1
    68e4:	d9800515 	stw	r6,20(sp)
    68e8:	20c00005 	stb	r3,0(r4)
    68ec:	02000c44 	movi	r8,49
    68f0:	003da206 	br	5f7c <__alt_mem_Flash_flash_data+0xf4005f7c>
    68f4:	89400117 	ldw	r5,4(r17)
    68f8:	8009883a 	mov	r4,r16
    68fc:	00084c00 	call	84c0 <_Balloc>
    6900:	89800417 	ldw	r6,16(r17)
    6904:	11000304 	addi	r4,r2,12
    6908:	89400304 	addi	r5,r17,12
    690c:	31800084 	addi	r6,r6,2
    6910:	318d883a 	add	r6,r6,r6
    6914:	318d883a 	add	r6,r6,r6
    6918:	1027883a 	mov	r19,r2
    691c:	00081080 	call	8108 <memcpy>
    6920:	8009883a 	mov	r4,r16
    6924:	980b883a 	mov	r5,r19
    6928:	01800044 	movi	r6,1
    692c:	0008c440 	call	8c44 <__lshift>
    6930:	1029883a 	mov	r20,r2
    6934:	003e8606 	br	6350 <__alt_mem_Flash_flash_data+0xf4006350>
    6938:	00800e44 	movi	r2,57
    693c:	90809526 	beq	r18,r2,6b94 <_dtoa_r+0x15c4>
    6940:	92000044 	addi	r8,r18,1
    6944:	003f2306 	br	65d4 <__alt_mem_Flash_flash_data+0xf40065d4>
    6948:	9011883a 	mov	r8,r18
    694c:	8825883a 	mov	r18,r17
    6950:	a023883a 	mov	r17,r20
    6954:	003e3706 	br	6234 <__alt_mem_Flash_flash_data+0xf4006234>
    6958:	002b883a 	mov	r21,zero
    695c:	0023883a 	mov	r17,zero
    6960:	003f5606 	br	66bc <__alt_mem_Flash_flash_data+0xf40066bc>
    6964:	51bfffc4 	addi	r6,r10,-1
    6968:	300490fa 	slli	r2,r6,3
    696c:	00c000b4 	movhi	r3,2
    6970:	18c24104 	addi	r3,r3,2308
    6974:	1885883a 	add	r2,r3,r2
    6978:	d9c00e17 	ldw	r7,56(sp)
    697c:	11000017 	ldw	r4,0(r2)
    6980:	11400117 	ldw	r5,4(r2)
    6984:	d8800717 	ldw	r2,28(sp)
    6988:	d9801015 	stw	r6,64(sp)
    698c:	880d883a 	mov	r6,r17
    6990:	da801615 	stw	r10,88(sp)
    6994:	15c00044 	addi	r23,r2,1
    6998:	000ec040 	call	ec04 <__muldf3>
    699c:	a80b883a 	mov	r5,r21
    69a0:	a009883a 	mov	r4,r20
    69a4:	d8c01115 	stw	r3,68(sp)
    69a8:	d8800e15 	stw	r2,56(sp)
    69ac:	000fbf80 	call	fbf8 <__fixdfsi>
    69b0:	1009883a 	mov	r4,r2
    69b4:	1023883a 	mov	r17,r2
    69b8:	000fc800 	call	fc80 <__floatsidf>
    69bc:	a009883a 	mov	r4,r20
    69c0:	a80b883a 	mov	r5,r21
    69c4:	100d883a 	mov	r6,r2
    69c8:	180f883a 	mov	r7,r3
    69cc:	000f3280 	call	f328 <__subdf3>
    69d0:	1813883a 	mov	r9,r3
    69d4:	d8c00717 	ldw	r3,28(sp)
    69d8:	8c400c04 	addi	r17,r17,48
    69dc:	1011883a 	mov	r8,r2
    69e0:	1c400005 	stb	r17,0(r3)
    69e4:	da801617 	ldw	r10,88(sp)
    69e8:	00800044 	movi	r2,1
    69ec:	50802326 	beq	r10,r2,6a7c <_dtoa_r+0x14ac>
    69f0:	d8800717 	ldw	r2,28(sp)
    69f4:	b82b883a 	mov	r21,r23
    69f8:	dc001315 	stw	r16,76(sp)
    69fc:	12a9883a 	add	r20,r2,r10
    6a00:	4807883a 	mov	r3,r9
    6a04:	4005883a 	mov	r2,r8
    6a08:	dc801415 	stw	r18,80(sp)
    6a0c:	000d883a 	mov	r6,zero
    6a10:	01d00934 	movhi	r7,16420
    6a14:	1009883a 	mov	r4,r2
    6a18:	180b883a 	mov	r5,r3
    6a1c:	000ec040 	call	ec04 <__muldf3>
    6a20:	180b883a 	mov	r5,r3
    6a24:	1009883a 	mov	r4,r2
    6a28:	1821883a 	mov	r16,r3
    6a2c:	1025883a 	mov	r18,r2
    6a30:	000fbf80 	call	fbf8 <__fixdfsi>
    6a34:	1009883a 	mov	r4,r2
    6a38:	1023883a 	mov	r17,r2
    6a3c:	000fc800 	call	fc80 <__floatsidf>
    6a40:	9009883a 	mov	r4,r18
    6a44:	800b883a 	mov	r5,r16
    6a48:	100d883a 	mov	r6,r2
    6a4c:	180f883a 	mov	r7,r3
    6a50:	8c400c04 	addi	r17,r17,48
    6a54:	000f3280 	call	f328 <__subdf3>
    6a58:	ad400044 	addi	r21,r21,1
    6a5c:	ac7fffc5 	stb	r17,-1(r21)
    6a60:	ad3fea1e 	bne	r21,r20,6a0c <__alt_mem_Flash_flash_data+0xf4006a0c>
    6a64:	1813883a 	mov	r9,r3
    6a68:	d8c01017 	ldw	r3,64(sp)
    6a6c:	dc001317 	ldw	r16,76(sp)
    6a70:	dc801417 	ldw	r18,80(sp)
    6a74:	1011883a 	mov	r8,r2
    6a78:	b8ef883a 	add	r23,r23,r3
    6a7c:	d9000e17 	ldw	r4,56(sp)
    6a80:	d9401117 	ldw	r5,68(sp)
    6a84:	000d883a 	mov	r6,zero
    6a88:	01cff834 	movhi	r7,16352
    6a8c:	da001715 	stw	r8,92(sp)
    6a90:	da401515 	stw	r9,84(sp)
    6a94:	000d8580 	call	d858 <__adddf3>
    6a98:	da001717 	ldw	r8,92(sp)
    6a9c:	da401517 	ldw	r9,84(sp)
    6aa0:	1009883a 	mov	r4,r2
    6aa4:	400d883a 	mov	r6,r8
    6aa8:	480f883a 	mov	r7,r9
    6aac:	180b883a 	mov	r5,r3
    6ab0:	000eb240 	call	eb24 <__ledf2>
    6ab4:	da001717 	ldw	r8,92(sp)
    6ab8:	da401517 	ldw	r9,84(sp)
    6abc:	10003b0e 	bge	r2,zero,6bac <_dtoa_r+0x15dc>
    6ac0:	d9001217 	ldw	r4,72(sp)
    6ac4:	bd7fffc3 	ldbu	r21,-1(r23)
    6ac8:	d9000515 	stw	r4,20(sp)
    6acc:	003d1c06 	br	5f40 <__alt_mem_Flash_flash_data+0xf4005f40>
    6ad0:	d8c00817 	ldw	r3,32(sp)
    6ad4:	18a9c83a 	sub	r20,r3,r2
    6ad8:	0005883a 	mov	r2,zero
    6adc:	003d3706 	br	5fbc <__alt_mem_Flash_flash_data+0xf4005fbc>
    6ae0:	00800044 	movi	r2,1
    6ae4:	003dd006 	br	6228 <__alt_mem_Flash_flash_data+0xf4006228>
    6ae8:	d8c00217 	ldw	r3,8(sp)
    6aec:	00800d84 	movi	r2,54
    6af0:	dd400917 	ldw	r21,36(sp)
    6af4:	10c5c83a 	sub	r2,r2,r3
    6af8:	dd000817 	ldw	r20,32(sp)
    6afc:	003d2f06 	br	5fbc <__alt_mem_Flash_flash_data+0xf4005fbc>
    6b00:	9029883a 	mov	r20,r18
    6b04:	982b883a 	mov	r21,r19
    6b08:	04400084 	movi	r17,2
    6b0c:	003bc606 	br	5a28 <__alt_mem_Flash_flash_data+0xf4005a28>
    6b10:	d8800617 	ldw	r2,24(sp)
    6b14:	103efc26 	beq	r2,zero,6708 <__alt_mem_Flash_flash_data+0xf4006708>
    6b18:	d8c00c17 	ldw	r3,48(sp)
    6b1c:	00fc890e 	bge	zero,r3,5d44 <__alt_mem_Flash_flash_data+0xf4005d44>
    6b20:	a80b883a 	mov	r5,r21
    6b24:	a009883a 	mov	r4,r20
    6b28:	000d883a 	mov	r6,zero
    6b2c:	01d00934 	movhi	r7,16420
    6b30:	000ec040 	call	ec04 <__muldf3>
    6b34:	89000044 	addi	r4,r17,1
    6b38:	1029883a 	mov	r20,r2
    6b3c:	182b883a 	mov	r21,r3
    6b40:	000fc800 	call	fc80 <__floatsidf>
    6b44:	a009883a 	mov	r4,r20
    6b48:	a80b883a 	mov	r5,r21
    6b4c:	100d883a 	mov	r6,r2
    6b50:	180f883a 	mov	r7,r3
    6b54:	000ec040 	call	ec04 <__muldf3>
    6b58:	1009883a 	mov	r4,r2
    6b5c:	180b883a 	mov	r5,r3
    6b60:	000d883a 	mov	r6,zero
    6b64:	01d00734 	movhi	r7,16412
    6b68:	000d8580 	call	d858 <__adddf3>
    6b6c:	d9000517 	ldw	r4,20(sp)
    6b70:	1023883a 	mov	r17,r2
    6b74:	00bf3034 	movhi	r2,64704
    6b78:	213fffc4 	addi	r4,r4,-1
    6b7c:	1885883a 	add	r2,r3,r2
    6b80:	d9001215 	stw	r4,72(sp)
    6b84:	d8800e15 	stw	r2,56(sp)
    6b88:	da800c17 	ldw	r10,48(sp)
    6b8c:	003bc306 	br	5a9c <__alt_mem_Flash_flash_data+0xf4005a9c>
    6b90:	b039883a 	mov	fp,r22
    6b94:	01000e44 	movi	r4,57
    6b98:	8825883a 	mov	r18,r17
    6b9c:	9dc00044 	addi	r23,r19,1
    6ba0:	99000005 	stb	r4,0(r19)
    6ba4:	a023883a 	mov	r17,r20
    6ba8:	003dae06 	br	6264 <__alt_mem_Flash_flash_data+0xf4006264>
    6bac:	d9800e17 	ldw	r6,56(sp)
    6bb0:	d9c01117 	ldw	r7,68(sp)
    6bb4:	0009883a 	mov	r4,zero
    6bb8:	014ff834 	movhi	r5,16352
    6bbc:	da001715 	stw	r8,92(sp)
    6bc0:	da401515 	stw	r9,84(sp)
    6bc4:	000f3280 	call	f328 <__subdf3>
    6bc8:	da001717 	ldw	r8,92(sp)
    6bcc:	da401517 	ldw	r9,84(sp)
    6bd0:	1009883a 	mov	r4,r2
    6bd4:	180b883a 	mov	r5,r3
    6bd8:	400d883a 	mov	r6,r8
    6bdc:	480f883a 	mov	r7,r9
    6be0:	000ea440 	call	ea44 <__gedf2>
    6be4:	00bc570e 	bge	zero,r2,5d44 <__alt_mem_Flash_flash_data+0xf4005d44>
    6be8:	01000c04 	movi	r4,48
    6bec:	00000106 	br	6bf4 <_dtoa_r+0x1624>
    6bf0:	102f883a 	mov	r23,r2
    6bf4:	b8bfffc4 	addi	r2,r23,-1
    6bf8:	10c00007 	ldb	r3,0(r2)
    6bfc:	193ffc26 	beq	r3,r4,6bf0 <__alt_mem_Flash_flash_data+0xf4006bf0>
    6c00:	d9801217 	ldw	r6,72(sp)
    6c04:	d9800515 	stw	r6,20(sp)
    6c08:	003c1f06 	br	5c88 <__alt_mem_Flash_flash_data+0xf4005c88>
    6c0c:	d8801217 	ldw	r2,72(sp)
    6c10:	dc001117 	ldw	r16,68(sp)
    6c14:	d8800515 	stw	r2,20(sp)
    6c18:	003cc906 	br	5f40 <__alt_mem_Flash_flash_data+0xf4005f40>
    6c1c:	dd801317 	ldw	r22,76(sp)
    6c20:	dc001117 	ldw	r16,68(sp)
    6c24:	dcc01417 	ldw	r19,80(sp)
    6c28:	dc801017 	ldw	r18,64(sp)
    6c2c:	003c4506 	br	5d44 <__alt_mem_Flash_flash_data+0xf4005d44>
    6c30:	103e5d1e 	bne	r2,zero,65a8 <__alt_mem_Flash_flash_data+0xf40065a8>
    6c34:	4080004c 	andi	r2,r8,1
    6c38:	103e5b26 	beq	r2,zero,65a8 <__alt_mem_Flash_flash_data+0xf40065a8>
    6c3c:	003e5706 	br	659c <__alt_mem_Flash_flash_data+0xf400659c>
    6c40:	d8c00317 	ldw	r3,12(sp)
    6c44:	00800084 	movi	r2,2
    6c48:	10c00a16 	blt	r2,r3,6c74 <_dtoa_r+0x16a4>
    6c4c:	d9000c17 	ldw	r4,48(sp)
    6c50:	003e8306 	br	6660 <__alt_mem_Flash_flash_data+0xf4006660>
    6c54:	04400084 	movi	r17,2
    6c58:	003b7306 	br	5a28 <__alt_mem_Flash_flash_data+0xf4005a28>
    6c5c:	d9801217 	ldw	r6,72(sp)
    6c60:	d9800515 	stw	r6,20(sp)
    6c64:	003cb606 	br	5f40 <__alt_mem_Flash_flash_data+0xf4005f40>
    6c68:	d9001217 	ldw	r4,72(sp)
    6c6c:	d9000515 	stw	r4,20(sp)
    6c70:	003c0506 	br	5c88 <__alt_mem_Flash_flash_data+0xf4005c88>
    6c74:	d9800c17 	ldw	r6,48(sp)
    6c78:	d9800615 	stw	r6,24(sp)
    6c7c:	003e8306 	br	668c <__alt_mem_Flash_flash_data+0xf400668c>
    6c80:	d9800317 	ldw	r6,12(sp)
    6c84:	00800084 	movi	r2,2
    6c88:	11800216 	blt	r2,r6,6c94 <_dtoa_r+0x16c4>
    6c8c:	d8800c17 	ldw	r2,48(sp)
    6c90:	003da606 	br	632c <__alt_mem_Flash_flash_data+0xf400632c>
    6c94:	d8800c17 	ldw	r2,48(sp)
    6c98:	d8800615 	stw	r2,24(sp)
    6c9c:	003e7b06 	br	668c <__alt_mem_Flash_flash_data+0xf400668c>
    6ca0:	05000044 	movi	r20,1
    6ca4:	003b0506 	br	58bc <__alt_mem_Flash_flash_data+0xf40058bc>
    6ca8:	8009883a 	mov	r4,r16
    6cac:	80001115 	stw	zero,68(r16)
    6cb0:	000b883a 	mov	r5,zero
    6cb4:	00084c00 	call	84c0 <_Balloc>
    6cb8:	d8800715 	stw	r2,28(sp)
    6cbc:	d8c00717 	ldw	r3,28(sp)
    6cc0:	00bfffc4 	movi	r2,-1
    6cc4:	01000044 	movi	r4,1
    6cc8:	d8800c15 	stw	r2,48(sp)
    6ccc:	80c01015 	stw	r3,64(r16)
    6cd0:	d9000b15 	stw	r4,44(sp)
    6cd4:	d8800615 	stw	r2,24(sp)
    6cd8:	d8002215 	stw	zero,136(sp)
    6cdc:	003c1906 	br	5d44 <__alt_mem_Flash_flash_data+0xf4005d44>
    6ce0:	193d2926 	beq	r3,r4,6188 <__alt_mem_Flash_flash_data+0xf4006188>
    6ce4:	00c00f04 	movi	r3,60
    6ce8:	1885c83a 	sub	r2,r3,r2
    6cec:	003d7b06 	br	62dc <__alt_mem_Flash_flash_data+0xf40062dc>
    6cf0:	000b883a 	mov	r5,zero
    6cf4:	003b1006 	br	5938 <__alt_mem_Flash_flash_data+0xf4005938>

00006cf8 <__sflush_r>:
    6cf8:	2880030b 	ldhu	r2,12(r5)
    6cfc:	defffb04 	addi	sp,sp,-20
    6d00:	dcc00315 	stw	r19,12(sp)
    6d04:	dc400115 	stw	r17,4(sp)
    6d08:	dfc00415 	stw	ra,16(sp)
    6d0c:	dc800215 	stw	r18,8(sp)
    6d10:	dc000015 	stw	r16,0(sp)
    6d14:	10c0020c 	andi	r3,r2,8
    6d18:	2823883a 	mov	r17,r5
    6d1c:	2027883a 	mov	r19,r4
    6d20:	1800311e 	bne	r3,zero,6de8 <__sflush_r+0xf0>
    6d24:	28c00117 	ldw	r3,4(r5)
    6d28:	10820014 	ori	r2,r2,2048
    6d2c:	2880030d 	sth	r2,12(r5)
    6d30:	00c04b0e 	bge	zero,r3,6e60 <__sflush_r+0x168>
    6d34:	8a000a17 	ldw	r8,40(r17)
    6d38:	40002326 	beq	r8,zero,6dc8 <__sflush_r+0xd0>
    6d3c:	9c000017 	ldw	r16,0(r19)
    6d40:	10c4000c 	andi	r3,r2,4096
    6d44:	98000015 	stw	zero,0(r19)
    6d48:	18004826 	beq	r3,zero,6e6c <__sflush_r+0x174>
    6d4c:	89801417 	ldw	r6,80(r17)
    6d50:	10c0010c 	andi	r3,r2,4
    6d54:	18000626 	beq	r3,zero,6d70 <__sflush_r+0x78>
    6d58:	88c00117 	ldw	r3,4(r17)
    6d5c:	88800c17 	ldw	r2,48(r17)
    6d60:	30cdc83a 	sub	r6,r6,r3
    6d64:	10000226 	beq	r2,zero,6d70 <__sflush_r+0x78>
    6d68:	88800f17 	ldw	r2,60(r17)
    6d6c:	308dc83a 	sub	r6,r6,r2
    6d70:	89400717 	ldw	r5,28(r17)
    6d74:	9809883a 	mov	r4,r19
    6d78:	000f883a 	mov	r7,zero
    6d7c:	403ee83a 	callr	r8
    6d80:	00ffffc4 	movi	r3,-1
    6d84:	10c04426 	beq	r2,r3,6e98 <__sflush_r+0x1a0>
    6d88:	88c0030b 	ldhu	r3,12(r17)
    6d8c:	89000417 	ldw	r4,16(r17)
    6d90:	88000115 	stw	zero,4(r17)
    6d94:	197dffcc 	andi	r5,r3,63487
    6d98:	8940030d 	sth	r5,12(r17)
    6d9c:	89000015 	stw	r4,0(r17)
    6da0:	18c4000c 	andi	r3,r3,4096
    6da4:	18002c1e 	bne	r3,zero,6e58 <__sflush_r+0x160>
    6da8:	89400c17 	ldw	r5,48(r17)
    6dac:	9c000015 	stw	r16,0(r19)
    6db0:	28000526 	beq	r5,zero,6dc8 <__sflush_r+0xd0>
    6db4:	88801004 	addi	r2,r17,64
    6db8:	28800226 	beq	r5,r2,6dc4 <__sflush_r+0xcc>
    6dbc:	9809883a 	mov	r4,r19
    6dc0:	00074500 	call	7450 <_free_r>
    6dc4:	88000c15 	stw	zero,48(r17)
    6dc8:	0005883a 	mov	r2,zero
    6dcc:	dfc00417 	ldw	ra,16(sp)
    6dd0:	dcc00317 	ldw	r19,12(sp)
    6dd4:	dc800217 	ldw	r18,8(sp)
    6dd8:	dc400117 	ldw	r17,4(sp)
    6ddc:	dc000017 	ldw	r16,0(sp)
    6de0:	dec00504 	addi	sp,sp,20
    6de4:	f800283a 	ret
    6de8:	2c800417 	ldw	r18,16(r5)
    6dec:	903ff626 	beq	r18,zero,6dc8 <__alt_mem_Flash_flash_data+0xf4006dc8>
    6df0:	2c000017 	ldw	r16,0(r5)
    6df4:	108000cc 	andi	r2,r2,3
    6df8:	2c800015 	stw	r18,0(r5)
    6dfc:	84a1c83a 	sub	r16,r16,r18
    6e00:	1000131e 	bne	r2,zero,6e50 <__sflush_r+0x158>
    6e04:	28800517 	ldw	r2,20(r5)
    6e08:	88800215 	stw	r2,8(r17)
    6e0c:	04000316 	blt	zero,r16,6e1c <__sflush_r+0x124>
    6e10:	003fed06 	br	6dc8 <__alt_mem_Flash_flash_data+0xf4006dc8>
    6e14:	90a5883a 	add	r18,r18,r2
    6e18:	043feb0e 	bge	zero,r16,6dc8 <__alt_mem_Flash_flash_data+0xf4006dc8>
    6e1c:	88800917 	ldw	r2,36(r17)
    6e20:	89400717 	ldw	r5,28(r17)
    6e24:	800f883a 	mov	r7,r16
    6e28:	900d883a 	mov	r6,r18
    6e2c:	9809883a 	mov	r4,r19
    6e30:	103ee83a 	callr	r2
    6e34:	80a1c83a 	sub	r16,r16,r2
    6e38:	00bff616 	blt	zero,r2,6e14 <__alt_mem_Flash_flash_data+0xf4006e14>
    6e3c:	88c0030b 	ldhu	r3,12(r17)
    6e40:	00bfffc4 	movi	r2,-1
    6e44:	18c01014 	ori	r3,r3,64
    6e48:	88c0030d 	sth	r3,12(r17)
    6e4c:	003fdf06 	br	6dcc <__alt_mem_Flash_flash_data+0xf4006dcc>
    6e50:	0005883a 	mov	r2,zero
    6e54:	003fec06 	br	6e08 <__alt_mem_Flash_flash_data+0xf4006e08>
    6e58:	88801415 	stw	r2,80(r17)
    6e5c:	003fd206 	br	6da8 <__alt_mem_Flash_flash_data+0xf4006da8>
    6e60:	28c00f17 	ldw	r3,60(r5)
    6e64:	00ffb316 	blt	zero,r3,6d34 <__alt_mem_Flash_flash_data+0xf4006d34>
    6e68:	003fd706 	br	6dc8 <__alt_mem_Flash_flash_data+0xf4006dc8>
    6e6c:	89400717 	ldw	r5,28(r17)
    6e70:	000d883a 	mov	r6,zero
    6e74:	9809883a 	mov	r4,r19
    6e78:	01c00044 	movi	r7,1
    6e7c:	403ee83a 	callr	r8
    6e80:	100d883a 	mov	r6,r2
    6e84:	00bfffc4 	movi	r2,-1
    6e88:	30801426 	beq	r6,r2,6edc <__sflush_r+0x1e4>
    6e8c:	8880030b 	ldhu	r2,12(r17)
    6e90:	8a000a17 	ldw	r8,40(r17)
    6e94:	003fae06 	br	6d50 <__alt_mem_Flash_flash_data+0xf4006d50>
    6e98:	98c00017 	ldw	r3,0(r19)
    6e9c:	183fba26 	beq	r3,zero,6d88 <__alt_mem_Flash_flash_data+0xf4006d88>
    6ea0:	01000744 	movi	r4,29
    6ea4:	19000626 	beq	r3,r4,6ec0 <__sflush_r+0x1c8>
    6ea8:	01000584 	movi	r4,22
    6eac:	19000426 	beq	r3,r4,6ec0 <__sflush_r+0x1c8>
    6eb0:	88c0030b 	ldhu	r3,12(r17)
    6eb4:	18c01014 	ori	r3,r3,64
    6eb8:	88c0030d 	sth	r3,12(r17)
    6ebc:	003fc306 	br	6dcc <__alt_mem_Flash_flash_data+0xf4006dcc>
    6ec0:	8880030b 	ldhu	r2,12(r17)
    6ec4:	88c00417 	ldw	r3,16(r17)
    6ec8:	88000115 	stw	zero,4(r17)
    6ecc:	10bdffcc 	andi	r2,r2,63487
    6ed0:	8880030d 	sth	r2,12(r17)
    6ed4:	88c00015 	stw	r3,0(r17)
    6ed8:	003fb306 	br	6da8 <__alt_mem_Flash_flash_data+0xf4006da8>
    6edc:	98800017 	ldw	r2,0(r19)
    6ee0:	103fea26 	beq	r2,zero,6e8c <__alt_mem_Flash_flash_data+0xf4006e8c>
    6ee4:	00c00744 	movi	r3,29
    6ee8:	10c00226 	beq	r2,r3,6ef4 <__sflush_r+0x1fc>
    6eec:	00c00584 	movi	r3,22
    6ef0:	10ffd21e 	bne	r2,r3,6e3c <__alt_mem_Flash_flash_data+0xf4006e3c>
    6ef4:	9c000015 	stw	r16,0(r19)
    6ef8:	0005883a 	mov	r2,zero
    6efc:	003fb306 	br	6dcc <__alt_mem_Flash_flash_data+0xf4006dcc>

00006f00 <_fflush_r>:
    6f00:	defffd04 	addi	sp,sp,-12
    6f04:	dc000115 	stw	r16,4(sp)
    6f08:	dfc00215 	stw	ra,8(sp)
    6f0c:	2021883a 	mov	r16,r4
    6f10:	20000226 	beq	r4,zero,6f1c <_fflush_r+0x1c>
    6f14:	20800e17 	ldw	r2,56(r4)
    6f18:	10000c26 	beq	r2,zero,6f4c <_fflush_r+0x4c>
    6f1c:	2880030f 	ldh	r2,12(r5)
    6f20:	1000051e 	bne	r2,zero,6f38 <_fflush_r+0x38>
    6f24:	0005883a 	mov	r2,zero
    6f28:	dfc00217 	ldw	ra,8(sp)
    6f2c:	dc000117 	ldw	r16,4(sp)
    6f30:	dec00304 	addi	sp,sp,12
    6f34:	f800283a 	ret
    6f38:	8009883a 	mov	r4,r16
    6f3c:	dfc00217 	ldw	ra,8(sp)
    6f40:	dc000117 	ldw	r16,4(sp)
    6f44:	dec00304 	addi	sp,sp,12
    6f48:	0006cf81 	jmpi	6cf8 <__sflush_r>
    6f4c:	d9400015 	stw	r5,0(sp)
    6f50:	00072dc0 	call	72dc <__sinit>
    6f54:	d9400017 	ldw	r5,0(sp)
    6f58:	003ff006 	br	6f1c <__alt_mem_Flash_flash_data+0xf4006f1c>

00006f5c <fflush>:
    6f5c:	20000526 	beq	r4,zero,6f74 <fflush+0x18>
    6f60:	008000b4 	movhi	r2,2
    6f64:	108b1004 	addi	r2,r2,11328
    6f68:	200b883a 	mov	r5,r4
    6f6c:	11000017 	ldw	r4,0(r2)
    6f70:	0006f001 	jmpi	6f00 <_fflush_r>
    6f74:	008000b4 	movhi	r2,2
    6f78:	108b0f04 	addi	r2,r2,11324
    6f7c:	11000017 	ldw	r4,0(r2)
    6f80:	01400034 	movhi	r5,0
    6f84:	295bc004 	addi	r5,r5,28416
    6f88:	0007cc41 	jmpi	7cc4 <_fwalk_reent>

00006f8c <__fp_lock>:
    6f8c:	0005883a 	mov	r2,zero
    6f90:	f800283a 	ret

00006f94 <__fp_unlock>:
    6f94:	0005883a 	mov	r2,zero
    6f98:	f800283a 	ret

00006f9c <_cleanup_r>:
    6f9c:	01400074 	movhi	r5,1
    6fa0:	29711604 	addi	r5,r5,-15272
    6fa4:	0007cc41 	jmpi	7cc4 <_fwalk_reent>

00006fa8 <__sinit.part.1>:
    6fa8:	defff704 	addi	sp,sp,-36
    6fac:	00c00034 	movhi	r3,0
    6fb0:	dfc00815 	stw	ra,32(sp)
    6fb4:	ddc00715 	stw	r23,28(sp)
    6fb8:	dd800615 	stw	r22,24(sp)
    6fbc:	dd400515 	stw	r21,20(sp)
    6fc0:	dd000415 	stw	r20,16(sp)
    6fc4:	dcc00315 	stw	r19,12(sp)
    6fc8:	dc800215 	stw	r18,8(sp)
    6fcc:	dc400115 	stw	r17,4(sp)
    6fd0:	dc000015 	stw	r16,0(sp)
    6fd4:	18dbe704 	addi	r3,r3,28572
    6fd8:	24000117 	ldw	r16,4(r4)
    6fdc:	20c00f15 	stw	r3,60(r4)
    6fe0:	2080bb04 	addi	r2,r4,748
    6fe4:	00c000c4 	movi	r3,3
    6fe8:	20c0b915 	stw	r3,740(r4)
    6fec:	2080ba15 	stw	r2,744(r4)
    6ff0:	2000b815 	stw	zero,736(r4)
    6ff4:	05c00204 	movi	r23,8
    6ff8:	00800104 	movi	r2,4
    6ffc:	2025883a 	mov	r18,r4
    7000:	b80d883a 	mov	r6,r23
    7004:	81001704 	addi	r4,r16,92
    7008:	000b883a 	mov	r5,zero
    700c:	80000015 	stw	zero,0(r16)
    7010:	80000115 	stw	zero,4(r16)
    7014:	80000215 	stw	zero,8(r16)
    7018:	8080030d 	sth	r2,12(r16)
    701c:	80001915 	stw	zero,100(r16)
    7020:	8000038d 	sth	zero,14(r16)
    7024:	80000415 	stw	zero,16(r16)
    7028:	80000515 	stw	zero,20(r16)
    702c:	80000615 	stw	zero,24(r16)
    7030:	000839c0 	call	839c <memset>
    7034:	05800074 	movhi	r22,1
    7038:	94400217 	ldw	r17,8(r18)
    703c:	05400074 	movhi	r21,1
    7040:	05000074 	movhi	r20,1
    7044:	04c00074 	movhi	r19,1
    7048:	b5a68f04 	addi	r22,r22,-26052
    704c:	ad66a604 	addi	r21,r21,-25960
    7050:	a526c504 	addi	r20,r20,-25836
    7054:	9ce6dc04 	addi	r19,r19,-25744
    7058:	85800815 	stw	r22,32(r16)
    705c:	85400915 	stw	r21,36(r16)
    7060:	85000a15 	stw	r20,40(r16)
    7064:	84c00b15 	stw	r19,44(r16)
    7068:	84000715 	stw	r16,28(r16)
    706c:	00800284 	movi	r2,10
    7070:	8880030d 	sth	r2,12(r17)
    7074:	00800044 	movi	r2,1
    7078:	89001704 	addi	r4,r17,92
    707c:	b80d883a 	mov	r6,r23
    7080:	000b883a 	mov	r5,zero
    7084:	88000015 	stw	zero,0(r17)
    7088:	88000115 	stw	zero,4(r17)
    708c:	88000215 	stw	zero,8(r17)
    7090:	88001915 	stw	zero,100(r17)
    7094:	8880038d 	sth	r2,14(r17)
    7098:	88000415 	stw	zero,16(r17)
    709c:	88000515 	stw	zero,20(r17)
    70a0:	88000615 	stw	zero,24(r17)
    70a4:	000839c0 	call	839c <memset>
    70a8:	94000317 	ldw	r16,12(r18)
    70ac:	00800484 	movi	r2,18
    70b0:	8c400715 	stw	r17,28(r17)
    70b4:	8d800815 	stw	r22,32(r17)
    70b8:	8d400915 	stw	r21,36(r17)
    70bc:	8d000a15 	stw	r20,40(r17)
    70c0:	8cc00b15 	stw	r19,44(r17)
    70c4:	8080030d 	sth	r2,12(r16)
    70c8:	00800084 	movi	r2,2
    70cc:	80000015 	stw	zero,0(r16)
    70d0:	80000115 	stw	zero,4(r16)
    70d4:	80000215 	stw	zero,8(r16)
    70d8:	80001915 	stw	zero,100(r16)
    70dc:	8080038d 	sth	r2,14(r16)
    70e0:	80000415 	stw	zero,16(r16)
    70e4:	80000515 	stw	zero,20(r16)
    70e8:	80000615 	stw	zero,24(r16)
    70ec:	81001704 	addi	r4,r16,92
    70f0:	000b883a 	mov	r5,zero
    70f4:	b80d883a 	mov	r6,r23
    70f8:	000839c0 	call	839c <memset>
    70fc:	00800044 	movi	r2,1
    7100:	84000715 	stw	r16,28(r16)
    7104:	85800815 	stw	r22,32(r16)
    7108:	85400915 	stw	r21,36(r16)
    710c:	85000a15 	stw	r20,40(r16)
    7110:	84c00b15 	stw	r19,44(r16)
    7114:	90800e15 	stw	r2,56(r18)
    7118:	dfc00817 	ldw	ra,32(sp)
    711c:	ddc00717 	ldw	r23,28(sp)
    7120:	dd800617 	ldw	r22,24(sp)
    7124:	dd400517 	ldw	r21,20(sp)
    7128:	dd000417 	ldw	r20,16(sp)
    712c:	dcc00317 	ldw	r19,12(sp)
    7130:	dc800217 	ldw	r18,8(sp)
    7134:	dc400117 	ldw	r17,4(sp)
    7138:	dc000017 	ldw	r16,0(sp)
    713c:	dec00904 	addi	sp,sp,36
    7140:	f800283a 	ret

00007144 <__sfmoreglue>:
    7144:	defffc04 	addi	sp,sp,-16
    7148:	dc400115 	stw	r17,4(sp)
    714c:	2c7fffc4 	addi	r17,r5,-1
    7150:	8c401a24 	muli	r17,r17,104
    7154:	dc800215 	stw	r18,8(sp)
    7158:	2825883a 	mov	r18,r5
    715c:	89401d04 	addi	r5,r17,116
    7160:	dc000015 	stw	r16,0(sp)
    7164:	dfc00315 	stw	ra,12(sp)
    7168:	00007280 	call	728 <_malloc_r>
    716c:	1021883a 	mov	r16,r2
    7170:	10000726 	beq	r2,zero,7190 <__sfmoreglue+0x4c>
    7174:	11000304 	addi	r4,r2,12
    7178:	10000015 	stw	zero,0(r2)
    717c:	14800115 	stw	r18,4(r2)
    7180:	11000215 	stw	r4,8(r2)
    7184:	000b883a 	mov	r5,zero
    7188:	89801a04 	addi	r6,r17,104
    718c:	000839c0 	call	839c <memset>
    7190:	8005883a 	mov	r2,r16
    7194:	dfc00317 	ldw	ra,12(sp)
    7198:	dc800217 	ldw	r18,8(sp)
    719c:	dc400117 	ldw	r17,4(sp)
    71a0:	dc000017 	ldw	r16,0(sp)
    71a4:	dec00404 	addi	sp,sp,16
    71a8:	f800283a 	ret

000071ac <__sfp>:
    71ac:	008000b4 	movhi	r2,2
    71b0:	defffb04 	addi	sp,sp,-20
    71b4:	108b0f04 	addi	r2,r2,11324
    71b8:	dc800215 	stw	r18,8(sp)
    71bc:	14800017 	ldw	r18,0(r2)
    71c0:	dcc00315 	stw	r19,12(sp)
    71c4:	dfc00415 	stw	ra,16(sp)
    71c8:	90800e17 	ldw	r2,56(r18)
    71cc:	dc400115 	stw	r17,4(sp)
    71d0:	dc000015 	stw	r16,0(sp)
    71d4:	2027883a 	mov	r19,r4
    71d8:	1000021e 	bne	r2,zero,71e4 <__sfp+0x38>
    71dc:	9009883a 	mov	r4,r18
    71e0:	0006fa80 	call	6fa8 <__sinit.part.1>
    71e4:	9480b804 	addi	r18,r18,736
    71e8:	047fffc4 	movi	r17,-1
    71ec:	91400117 	ldw	r5,4(r18)
    71f0:	94000217 	ldw	r16,8(r18)
    71f4:	297fffc4 	addi	r5,r5,-1
    71f8:	28000a16 	blt	r5,zero,7224 <__sfp+0x78>
    71fc:	8080030f 	ldh	r2,12(r16)
    7200:	10000c26 	beq	r2,zero,7234 <__sfp+0x88>
    7204:	80c01d04 	addi	r3,r16,116
    7208:	00000206 	br	7214 <__sfp+0x68>
    720c:	18bfe60f 	ldh	r2,-104(r3)
    7210:	10000826 	beq	r2,zero,7234 <__sfp+0x88>
    7214:	297fffc4 	addi	r5,r5,-1
    7218:	1c3ffd04 	addi	r16,r3,-12
    721c:	18c01a04 	addi	r3,r3,104
    7220:	2c7ffa1e 	bne	r5,r17,720c <__alt_mem_Flash_flash_data+0xf400720c>
    7224:	90800017 	ldw	r2,0(r18)
    7228:	10001d26 	beq	r2,zero,72a0 <__sfp+0xf4>
    722c:	1025883a 	mov	r18,r2
    7230:	003fee06 	br	71ec <__alt_mem_Flash_flash_data+0xf40071ec>
    7234:	00bfffc4 	movi	r2,-1
    7238:	8080038d 	sth	r2,14(r16)
    723c:	00800044 	movi	r2,1
    7240:	8080030d 	sth	r2,12(r16)
    7244:	80001915 	stw	zero,100(r16)
    7248:	80000015 	stw	zero,0(r16)
    724c:	80000215 	stw	zero,8(r16)
    7250:	80000115 	stw	zero,4(r16)
    7254:	80000415 	stw	zero,16(r16)
    7258:	80000515 	stw	zero,20(r16)
    725c:	80000615 	stw	zero,24(r16)
    7260:	81001704 	addi	r4,r16,92
    7264:	000b883a 	mov	r5,zero
    7268:	01800204 	movi	r6,8
    726c:	000839c0 	call	839c <memset>
    7270:	8005883a 	mov	r2,r16
    7274:	80000c15 	stw	zero,48(r16)
    7278:	80000d15 	stw	zero,52(r16)
    727c:	80001115 	stw	zero,68(r16)
    7280:	80001215 	stw	zero,72(r16)
    7284:	dfc00417 	ldw	ra,16(sp)
    7288:	dcc00317 	ldw	r19,12(sp)
    728c:	dc800217 	ldw	r18,8(sp)
    7290:	dc400117 	ldw	r17,4(sp)
    7294:	dc000017 	ldw	r16,0(sp)
    7298:	dec00504 	addi	sp,sp,20
    729c:	f800283a 	ret
    72a0:	9809883a 	mov	r4,r19
    72a4:	01400104 	movi	r5,4
    72a8:	00071440 	call	7144 <__sfmoreglue>
    72ac:	90800015 	stw	r2,0(r18)
    72b0:	103fde1e 	bne	r2,zero,722c <__alt_mem_Flash_flash_data+0xf400722c>
    72b4:	00800304 	movi	r2,12
    72b8:	98800015 	stw	r2,0(r19)
    72bc:	0005883a 	mov	r2,zero
    72c0:	003ff006 	br	7284 <__alt_mem_Flash_flash_data+0xf4007284>

000072c4 <_cleanup>:
    72c4:	008000b4 	movhi	r2,2
    72c8:	108b0f04 	addi	r2,r2,11324
    72cc:	11000017 	ldw	r4,0(r2)
    72d0:	01400074 	movhi	r5,1
    72d4:	29711604 	addi	r5,r5,-15272
    72d8:	0007cc41 	jmpi	7cc4 <_fwalk_reent>

000072dc <__sinit>:
    72dc:	20800e17 	ldw	r2,56(r4)
    72e0:	10000126 	beq	r2,zero,72e8 <__sinit+0xc>
    72e4:	f800283a 	ret
    72e8:	0006fa81 	jmpi	6fa8 <__sinit.part.1>

000072ec <__sfp_lock_acquire>:
    72ec:	f800283a 	ret

000072f0 <__sfp_lock_release>:
    72f0:	f800283a 	ret

000072f4 <__sinit_lock_acquire>:
    72f4:	f800283a 	ret

000072f8 <__sinit_lock_release>:
    72f8:	f800283a 	ret

000072fc <__fp_lock_all>:
    72fc:	008000b4 	movhi	r2,2
    7300:	108b1004 	addi	r2,r2,11328
    7304:	11000017 	ldw	r4,0(r2)
    7308:	01400034 	movhi	r5,0
    730c:	295be304 	addi	r5,r5,28556
    7310:	0007c001 	jmpi	7c00 <_fwalk>

00007314 <__fp_unlock_all>:
    7314:	008000b4 	movhi	r2,2
    7318:	108b1004 	addi	r2,r2,11328
    731c:	11000017 	ldw	r4,0(r2)
    7320:	01400034 	movhi	r5,0
    7324:	295be504 	addi	r5,r5,28564
    7328:	0007c001 	jmpi	7c00 <_fwalk>

0000732c <_malloc_trim_r>:
    732c:	defffb04 	addi	sp,sp,-20
    7330:	dcc00315 	stw	r19,12(sp)
    7334:	04c000b4 	movhi	r19,2
    7338:	dc800215 	stw	r18,8(sp)
    733c:	dc400115 	stw	r17,4(sp)
    7340:	dc000015 	stw	r16,0(sp)
    7344:	dfc00415 	stw	ra,16(sp)
    7348:	2821883a 	mov	r16,r5
    734c:	9cc37e04 	addi	r19,r19,3576
    7350:	2025883a 	mov	r18,r4
    7354:	00109340 	call	10934 <__malloc_lock>
    7358:	98800217 	ldw	r2,8(r19)
    735c:	14400117 	ldw	r17,4(r2)
    7360:	00bfff04 	movi	r2,-4
    7364:	88a2703a 	and	r17,r17,r2
    7368:	8c21c83a 	sub	r16,r17,r16
    736c:	8403fbc4 	addi	r16,r16,4079
    7370:	8020d33a 	srli	r16,r16,12
    7374:	0083ffc4 	movi	r2,4095
    7378:	843fffc4 	addi	r16,r16,-1
    737c:	8020933a 	slli	r16,r16,12
    7380:	1400060e 	bge	r2,r16,739c <_malloc_trim_r+0x70>
    7384:	9009883a 	mov	r4,r18
    7388:	000b883a 	mov	r5,zero
    738c:	0000ff40 	call	ff4 <_sbrk_r>
    7390:	98c00217 	ldw	r3,8(r19)
    7394:	1c47883a 	add	r3,r3,r17
    7398:	10c00a26 	beq	r2,r3,73c4 <_malloc_trim_r+0x98>
    739c:	9009883a 	mov	r4,r18
    73a0:	0010a540 	call	10a54 <__malloc_unlock>
    73a4:	0005883a 	mov	r2,zero
    73a8:	dfc00417 	ldw	ra,16(sp)
    73ac:	dcc00317 	ldw	r19,12(sp)
    73b0:	dc800217 	ldw	r18,8(sp)
    73b4:	dc400117 	ldw	r17,4(sp)
    73b8:	dc000017 	ldw	r16,0(sp)
    73bc:	dec00504 	addi	sp,sp,20
    73c0:	f800283a 	ret
    73c4:	9009883a 	mov	r4,r18
    73c8:	040bc83a 	sub	r5,zero,r16
    73cc:	0000ff40 	call	ff4 <_sbrk_r>
    73d0:	00ffffc4 	movi	r3,-1
    73d4:	10c00d26 	beq	r2,r3,740c <_malloc_trim_r+0xe0>
    73d8:	00c000b4 	movhi	r3,2
    73dc:	18d34704 	addi	r3,r3,19740
    73e0:	18800017 	ldw	r2,0(r3)
    73e4:	99000217 	ldw	r4,8(r19)
    73e8:	8c23c83a 	sub	r17,r17,r16
    73ec:	8c400054 	ori	r17,r17,1
    73f0:	1421c83a 	sub	r16,r2,r16
    73f4:	24400115 	stw	r17,4(r4)
    73f8:	9009883a 	mov	r4,r18
    73fc:	1c000015 	stw	r16,0(r3)
    7400:	0010a540 	call	10a54 <__malloc_unlock>
    7404:	00800044 	movi	r2,1
    7408:	003fe706 	br	73a8 <__alt_mem_Flash_flash_data+0xf40073a8>
    740c:	9009883a 	mov	r4,r18
    7410:	000b883a 	mov	r5,zero
    7414:	0000ff40 	call	ff4 <_sbrk_r>
    7418:	99000217 	ldw	r4,8(r19)
    741c:	014003c4 	movi	r5,15
    7420:	1107c83a 	sub	r3,r2,r4
    7424:	28ffdd0e 	bge	r5,r3,739c <__alt_mem_Flash_flash_data+0xf400739c>
    7428:	014000b4 	movhi	r5,2
    742c:	294b0d04 	addi	r5,r5,11316
    7430:	29400017 	ldw	r5,0(r5)
    7434:	18c00054 	ori	r3,r3,1
    7438:	20c00115 	stw	r3,4(r4)
    743c:	00c000b4 	movhi	r3,2
    7440:	1145c83a 	sub	r2,r2,r5
    7444:	18d34704 	addi	r3,r3,19740
    7448:	18800015 	stw	r2,0(r3)
    744c:	003fd306 	br	739c <__alt_mem_Flash_flash_data+0xf400739c>

00007450 <_free_r>:
    7450:	28004c26 	beq	r5,zero,7584 <_free_r+0x134>
    7454:	defffd04 	addi	sp,sp,-12
    7458:	dc400115 	stw	r17,4(sp)
    745c:	dc000015 	stw	r16,0(sp)
    7460:	2023883a 	mov	r17,r4
    7464:	2821883a 	mov	r16,r5
    7468:	dfc00215 	stw	ra,8(sp)
    746c:	00109340 	call	10934 <__malloc_lock>
    7470:	813fff17 	ldw	r4,-4(r16)
    7474:	00bfff84 	movi	r2,-2
    7478:	024000b4 	movhi	r9,2
    747c:	81bffe04 	addi	r6,r16,-8
    7480:	2084703a 	and	r2,r4,r2
    7484:	4a437e04 	addi	r9,r9,3576
    7488:	308b883a 	add	r5,r6,r2
    748c:	2a000117 	ldw	r8,4(r5)
    7490:	49c00217 	ldw	r7,8(r9)
    7494:	00ffff04 	movi	r3,-4
    7498:	40c6703a 	and	r3,r8,r3
    749c:	39405326 	beq	r7,r5,75ec <_free_r+0x19c>
    74a0:	28c00115 	stw	r3,4(r5)
    74a4:	2100004c 	andi	r4,r4,1
    74a8:	2000091e 	bne	r4,zero,74d0 <_free_r+0x80>
    74ac:	81fffe17 	ldw	r7,-8(r16)
    74b0:	4a000204 	addi	r8,r9,8
    74b4:	31cdc83a 	sub	r6,r6,r7
    74b8:	31000217 	ldw	r4,8(r6)
    74bc:	11c5883a 	add	r2,r2,r7
    74c0:	22006126 	beq	r4,r8,7648 <_free_r+0x1f8>
    74c4:	31c00317 	ldw	r7,12(r6)
    74c8:	21c00315 	stw	r7,12(r4)
    74cc:	39000215 	stw	r4,8(r7)
    74d0:	28c9883a 	add	r4,r5,r3
    74d4:	21c00117 	ldw	r7,4(r4)
    74d8:	39c0004c 	andi	r7,r7,1
    74dc:	38000d1e 	bne	r7,zero,7514 <_free_r+0xc4>
    74e0:	29000217 	ldw	r4,8(r5)
    74e4:	10c5883a 	add	r2,r2,r3
    74e8:	00c000b4 	movhi	r3,2
    74ec:	18c38004 	addi	r3,r3,3584
    74f0:	20c07526 	beq	r4,r3,76c8 <_free_r+0x278>
    74f4:	29c00317 	ldw	r7,12(r5)
    74f8:	11400054 	ori	r5,r2,1
    74fc:	3087883a 	add	r3,r6,r2
    7500:	21c00315 	stw	r7,12(r4)
    7504:	39000215 	stw	r4,8(r7)
    7508:	31400115 	stw	r5,4(r6)
    750c:	18800015 	stw	r2,0(r3)
    7510:	00000406 	br	7524 <_free_r+0xd4>
    7514:	10c00054 	ori	r3,r2,1
    7518:	30c00115 	stw	r3,4(r6)
    751c:	3087883a 	add	r3,r6,r2
    7520:	18800015 	stw	r2,0(r3)
    7524:	00c07fc4 	movi	r3,511
    7528:	18801736 	bltu	r3,r2,7588 <_free_r+0x138>
    752c:	1004d0fa 	srli	r2,r2,3
    7530:	01400044 	movi	r5,1
    7534:	49000117 	ldw	r4,4(r9)
    7538:	1087883a 	add	r3,r2,r2
    753c:	18c7883a 	add	r3,r3,r3
    7540:	1005d0ba 	srai	r2,r2,2
    7544:	18c7883a 	add	r3,r3,r3
    7548:	1a47883a 	add	r3,r3,r9
    754c:	19c00217 	ldw	r7,8(r3)
    7550:	2884983a 	sll	r2,r5,r2
    7554:	30c00315 	stw	r3,12(r6)
    7558:	31c00215 	stw	r7,8(r6)
    755c:	1104b03a 	or	r2,r2,r4
    7560:	19800215 	stw	r6,8(r3)
    7564:	48800115 	stw	r2,4(r9)
    7568:	39800315 	stw	r6,12(r7)
    756c:	8809883a 	mov	r4,r17
    7570:	dfc00217 	ldw	ra,8(sp)
    7574:	dc400117 	ldw	r17,4(sp)
    7578:	dc000017 	ldw	r16,0(sp)
    757c:	dec00304 	addi	sp,sp,12
    7580:	0010a541 	jmpi	10a54 <__malloc_unlock>
    7584:	f800283a 	ret
    7588:	1006d27a 	srli	r3,r2,9
    758c:	01000104 	movi	r4,4
    7590:	20c04036 	bltu	r4,r3,7694 <_free_r+0x244>
    7594:	1006d1ba 	srli	r3,r2,6
    7598:	19400e04 	addi	r5,r3,56
    759c:	2947883a 	add	r3,r5,r5
    75a0:	18c7883a 	add	r3,r3,r3
    75a4:	18c7883a 	add	r3,r3,r3
    75a8:	1a49883a 	add	r4,r3,r9
    75ac:	20c00217 	ldw	r3,8(r4)
    75b0:	01c000b4 	movhi	r7,2
    75b4:	39c37e04 	addi	r7,r7,3576
    75b8:	19003b26 	beq	r3,r4,76a8 <_free_r+0x258>
    75bc:	01ffff04 	movi	r7,-4
    75c0:	19400117 	ldw	r5,4(r3)
    75c4:	29ca703a 	and	r5,r5,r7
    75c8:	1140022e 	bgeu	r2,r5,75d4 <_free_r+0x184>
    75cc:	18c00217 	ldw	r3,8(r3)
    75d0:	20fffb1e 	bne	r4,r3,75c0 <__alt_mem_Flash_flash_data+0xf40075c0>
    75d4:	18800317 	ldw	r2,12(r3)
    75d8:	30800315 	stw	r2,12(r6)
    75dc:	30c00215 	stw	r3,8(r6)
    75e0:	11800215 	stw	r6,8(r2)
    75e4:	19800315 	stw	r6,12(r3)
    75e8:	003fe006 	br	756c <__alt_mem_Flash_flash_data+0xf400756c>
    75ec:	2100004c 	andi	r4,r4,1
    75f0:	1885883a 	add	r2,r3,r2
    75f4:	2000071e 	bne	r4,zero,7614 <_free_r+0x1c4>
    75f8:	817ffe17 	ldw	r5,-8(r16)
    75fc:	314dc83a 	sub	r6,r6,r5
    7600:	30c00317 	ldw	r3,12(r6)
    7604:	31000217 	ldw	r4,8(r6)
    7608:	1145883a 	add	r2,r2,r5
    760c:	20c00315 	stw	r3,12(r4)
    7610:	19000215 	stw	r4,8(r3)
    7614:	10c00054 	ori	r3,r2,1
    7618:	30c00115 	stw	r3,4(r6)
    761c:	00c000b4 	movhi	r3,2
    7620:	18cb0e04 	addi	r3,r3,11320
    7624:	18c00017 	ldw	r3,0(r3)
    7628:	49800215 	stw	r6,8(r9)
    762c:	10ffcf36 	bltu	r2,r3,756c <__alt_mem_Flash_flash_data+0xf400756c>
    7630:	008000b4 	movhi	r2,2
    7634:	1092fc04 	addi	r2,r2,19440
    7638:	11400017 	ldw	r5,0(r2)
    763c:	8809883a 	mov	r4,r17
    7640:	000732c0 	call	732c <_malloc_trim_r>
    7644:	003fc906 	br	756c <__alt_mem_Flash_flash_data+0xf400756c>
    7648:	28c9883a 	add	r4,r5,r3
    764c:	21000117 	ldw	r4,4(r4)
    7650:	2100004c 	andi	r4,r4,1
    7654:	20000a1e 	bne	r4,zero,7680 <_free_r+0x230>
    7658:	29000317 	ldw	r4,12(r5)
    765c:	29400217 	ldw	r5,8(r5)
    7660:	10c5883a 	add	r2,r2,r3
    7664:	10c00054 	ori	r3,r2,1
    7668:	29000315 	stw	r4,12(r5)
    766c:	21400215 	stw	r5,8(r4)
    7670:	30c00115 	stw	r3,4(r6)
    7674:	308d883a 	add	r6,r6,r2
    7678:	30800015 	stw	r2,0(r6)
    767c:	003fbb06 	br	756c <__alt_mem_Flash_flash_data+0xf400756c>
    7680:	10c00054 	ori	r3,r2,1
    7684:	30c00115 	stw	r3,4(r6)
    7688:	308d883a 	add	r6,r6,r2
    768c:	30800015 	stw	r2,0(r6)
    7690:	003fb606 	br	756c <__alt_mem_Flash_flash_data+0xf400756c>
    7694:	01000504 	movi	r4,20
    7698:	20c01436 	bltu	r4,r3,76ec <_free_r+0x29c>
    769c:	194016c4 	addi	r5,r3,91
    76a0:	2947883a 	add	r3,r5,r5
    76a4:	003fbe06 	br	75a0 <__alt_mem_Flash_flash_data+0xf40075a0>
    76a8:	280bd0ba 	srai	r5,r5,2
    76ac:	00800044 	movi	r2,1
    76b0:	39000117 	ldw	r4,4(r7)
    76b4:	114a983a 	sll	r5,r2,r5
    76b8:	1805883a 	mov	r2,r3
    76bc:	2908b03a 	or	r4,r5,r4
    76c0:	39000115 	stw	r4,4(r7)
    76c4:	003fc406 	br	75d8 <__alt_mem_Flash_flash_data+0xf40075d8>
    76c8:	49800515 	stw	r6,20(r9)
    76cc:	49800415 	stw	r6,16(r9)
    76d0:	10c00054 	ori	r3,r2,1
    76d4:	31000315 	stw	r4,12(r6)
    76d8:	31000215 	stw	r4,8(r6)
    76dc:	30c00115 	stw	r3,4(r6)
    76e0:	308d883a 	add	r6,r6,r2
    76e4:	30800015 	stw	r2,0(r6)
    76e8:	003fa006 	br	756c <__alt_mem_Flash_flash_data+0xf400756c>
    76ec:	01001504 	movi	r4,84
    76f0:	20c00436 	bltu	r4,r3,7704 <_free_r+0x2b4>
    76f4:	1006d33a 	srli	r3,r2,12
    76f8:	19401b84 	addi	r5,r3,110
    76fc:	2947883a 	add	r3,r5,r5
    7700:	003fa706 	br	75a0 <__alt_mem_Flash_flash_data+0xf40075a0>
    7704:	01005504 	movi	r4,340
    7708:	20c00436 	bltu	r4,r3,771c <_free_r+0x2cc>
    770c:	1006d3fa 	srli	r3,r2,15
    7710:	19401dc4 	addi	r5,r3,119
    7714:	2947883a 	add	r3,r5,r5
    7718:	003fa106 	br	75a0 <__alt_mem_Flash_flash_data+0xf40075a0>
    771c:	01015504 	movi	r4,1364
    7720:	20c00436 	bltu	r4,r3,7734 <_free_r+0x2e4>
    7724:	1006d4ba 	srli	r3,r2,18
    7728:	19401f04 	addi	r5,r3,124
    772c:	2947883a 	add	r3,r5,r5
    7730:	003f9b06 	br	75a0 <__alt_mem_Flash_flash_data+0xf40075a0>
    7734:	00c03f04 	movi	r3,252
    7738:	01401f84 	movi	r5,126
    773c:	003f9806 	br	75a0 <__alt_mem_Flash_flash_data+0xf40075a0>

00007740 <__sfvwrite_r>:
    7740:	30800217 	ldw	r2,8(r6)
    7744:	10006726 	beq	r2,zero,78e4 <__sfvwrite_r+0x1a4>
    7748:	defff404 	addi	sp,sp,-48
    774c:	dd000615 	stw	r20,24(sp)
    7750:	2029883a 	mov	r20,r4
    7754:	2900030b 	ldhu	r4,12(r5)
    7758:	ddc00915 	stw	r23,36(sp)
    775c:	dc000215 	stw	r16,8(sp)
    7760:	dfc00b15 	stw	ra,44(sp)
    7764:	df000a15 	stw	fp,40(sp)
    7768:	dd800815 	stw	r22,32(sp)
    776c:	dd400715 	stw	r21,28(sp)
    7770:	dcc00515 	stw	r19,20(sp)
    7774:	dc800415 	stw	r18,16(sp)
    7778:	dc400315 	stw	r17,12(sp)
    777c:	2080020c 	andi	r2,r4,8
    7780:	2821883a 	mov	r16,r5
    7784:	302f883a 	mov	r23,r6
    7788:	10002726 	beq	r2,zero,7828 <__sfvwrite_r+0xe8>
    778c:	28800417 	ldw	r2,16(r5)
    7790:	10002526 	beq	r2,zero,7828 <__sfvwrite_r+0xe8>
    7794:	2080008c 	andi	r2,r4,2
    7798:	bc400017 	ldw	r17,0(r23)
    779c:	10002a26 	beq	r2,zero,7848 <__sfvwrite_r+0x108>
    77a0:	05600034 	movhi	r21,32768
    77a4:	0027883a 	mov	r19,zero
    77a8:	0025883a 	mov	r18,zero
    77ac:	ad7f0004 	addi	r21,r21,-1024
    77b0:	980d883a 	mov	r6,r19
    77b4:	a009883a 	mov	r4,r20
    77b8:	90004626 	beq	r18,zero,78d4 <__sfvwrite_r+0x194>
    77bc:	900f883a 	mov	r7,r18
    77c0:	81400717 	ldw	r5,28(r16)
    77c4:	ac80022e 	bgeu	r21,r18,77d0 <__sfvwrite_r+0x90>
    77c8:	01e00034 	movhi	r7,32768
    77cc:	39ff0004 	addi	r7,r7,-1024
    77d0:	80800917 	ldw	r2,36(r16)
    77d4:	103ee83a 	callr	r2
    77d8:	0080520e 	bge	zero,r2,7924 <__sfvwrite_r+0x1e4>
    77dc:	b8c00217 	ldw	r3,8(r23)
    77e0:	98a7883a 	add	r19,r19,r2
    77e4:	90a5c83a 	sub	r18,r18,r2
    77e8:	1885c83a 	sub	r2,r3,r2
    77ec:	b8800215 	stw	r2,8(r23)
    77f0:	103fef1e 	bne	r2,zero,77b0 <__alt_mem_Flash_flash_data+0xf40077b0>
    77f4:	0005883a 	mov	r2,zero
    77f8:	dfc00b17 	ldw	ra,44(sp)
    77fc:	df000a17 	ldw	fp,40(sp)
    7800:	ddc00917 	ldw	r23,36(sp)
    7804:	dd800817 	ldw	r22,32(sp)
    7808:	dd400717 	ldw	r21,28(sp)
    780c:	dd000617 	ldw	r20,24(sp)
    7810:	dcc00517 	ldw	r19,20(sp)
    7814:	dc800417 	ldw	r18,16(sp)
    7818:	dc400317 	ldw	r17,12(sp)
    781c:	dc000217 	ldw	r16,8(sp)
    7820:	dec00c04 	addi	sp,sp,48
    7824:	f800283a 	ret
    7828:	a009883a 	mov	r4,r20
    782c:	800b883a 	mov	r5,r16
    7830:	000527c0 	call	527c <__swsetup_r>
    7834:	1000ec1e 	bne	r2,zero,7be8 <__sfvwrite_r+0x4a8>
    7838:	8100030b 	ldhu	r4,12(r16)
    783c:	bc400017 	ldw	r17,0(r23)
    7840:	2080008c 	andi	r2,r4,2
    7844:	103fd61e 	bne	r2,zero,77a0 <__alt_mem_Flash_flash_data+0xf40077a0>
    7848:	2080004c 	andi	r2,r4,1
    784c:	10003a1e 	bne	r2,zero,7938 <__sfvwrite_r+0x1f8>
    7850:	0039883a 	mov	fp,zero
    7854:	0025883a 	mov	r18,zero
    7858:	90001a26 	beq	r18,zero,78c4 <__sfvwrite_r+0x184>
    785c:	2080800c 	andi	r2,r4,512
    7860:	85800217 	ldw	r22,8(r16)
    7864:	10007626 	beq	r2,zero,7a40 <__sfvwrite_r+0x300>
    7868:	b027883a 	mov	r19,r22
    786c:	95809436 	bltu	r18,r22,7ac0 <__sfvwrite_r+0x380>
    7870:	2081200c 	andi	r2,r4,1152
    7874:	10009f1e 	bne	r2,zero,7af4 <__sfvwrite_r+0x3b4>
    7878:	81000017 	ldw	r4,0(r16)
    787c:	e00b883a 	mov	r5,fp
    7880:	980d883a 	mov	r6,r19
    7884:	00082400 	call	8240 <memmove>
    7888:	81000217 	ldw	r4,8(r16)
    788c:	81400017 	ldw	r5,0(r16)
    7890:	9005883a 	mov	r2,r18
    7894:	2587c83a 	sub	r3,r4,r22
    7898:	2ce7883a 	add	r19,r5,r19
    789c:	80c00215 	stw	r3,8(r16)
    78a0:	84c00015 	stw	r19,0(r16)
    78a4:	b8c00217 	ldw	r3,8(r23)
    78a8:	e0b9883a 	add	fp,fp,r2
    78ac:	90a5c83a 	sub	r18,r18,r2
    78b0:	1885c83a 	sub	r2,r3,r2
    78b4:	b8800215 	stw	r2,8(r23)
    78b8:	103fce26 	beq	r2,zero,77f4 <__alt_mem_Flash_flash_data+0xf40077f4>
    78bc:	8100030b 	ldhu	r4,12(r16)
    78c0:	903fe61e 	bne	r18,zero,785c <__alt_mem_Flash_flash_data+0xf400785c>
    78c4:	8f000017 	ldw	fp,0(r17)
    78c8:	8c800117 	ldw	r18,4(r17)
    78cc:	8c400204 	addi	r17,r17,8
    78d0:	003fe106 	br	7858 <__alt_mem_Flash_flash_data+0xf4007858>
    78d4:	8cc00017 	ldw	r19,0(r17)
    78d8:	8c800117 	ldw	r18,4(r17)
    78dc:	8c400204 	addi	r17,r17,8
    78e0:	003fb306 	br	77b0 <__alt_mem_Flash_flash_data+0xf40077b0>
    78e4:	0005883a 	mov	r2,zero
    78e8:	f800283a 	ret
    78ec:	00a00034 	movhi	r2,32768
    78f0:	10bfffc4 	addi	r2,r2,-1
    78f4:	9009883a 	mov	r4,r18
    78f8:	1480012e 	bgeu	r2,r18,7900 <__sfvwrite_r+0x1c0>
    78fc:	1009883a 	mov	r4,r2
    7900:	980b883a 	mov	r5,r19
    7904:	000d7980 	call	d798 <__divsi3>
    7908:	81400717 	ldw	r5,28(r16)
    790c:	80c00917 	ldw	r3,36(r16)
    7910:	988f383a 	mul	r7,r19,r2
    7914:	a009883a 	mov	r4,r20
    7918:	e00d883a 	mov	r6,fp
    791c:	183ee83a 	callr	r3
    7920:	00bfe016 	blt	zero,r2,78a4 <__alt_mem_Flash_flash_data+0xf40078a4>
    7924:	8080030b 	ldhu	r2,12(r16)
    7928:	10801014 	ori	r2,r2,64
    792c:	8080030d 	sth	r2,12(r16)
    7930:	00bfffc4 	movi	r2,-1
    7934:	003fb006 	br	77f8 <__alt_mem_Flash_flash_data+0xf40077f8>
    7938:	0027883a 	mov	r19,zero
    793c:	0011883a 	mov	r8,zero
    7940:	0039883a 	mov	fp,zero
    7944:	0025883a 	mov	r18,zero
    7948:	90001f26 	beq	r18,zero,79c8 <__sfvwrite_r+0x288>
    794c:	40006026 	beq	r8,zero,7ad0 <__sfvwrite_r+0x390>
    7950:	982b883a 	mov	r21,r19
    7954:	94c0012e 	bgeu	r18,r19,795c <__sfvwrite_r+0x21c>
    7958:	902b883a 	mov	r21,r18
    795c:	81000017 	ldw	r4,0(r16)
    7960:	80800417 	ldw	r2,16(r16)
    7964:	a82d883a 	mov	r22,r21
    7968:	81800217 	ldw	r6,8(r16)
    796c:	81c00517 	ldw	r7,20(r16)
    7970:	1100022e 	bgeu	r2,r4,797c <__sfvwrite_r+0x23c>
    7974:	31c7883a 	add	r3,r6,r7
    7978:	1d401816 	blt	r3,r21,79dc <__sfvwrite_r+0x29c>
    797c:	a9c04416 	blt	r21,r7,7a90 <__sfvwrite_r+0x350>
    7980:	80800917 	ldw	r2,36(r16)
    7984:	81400717 	ldw	r5,28(r16)
    7988:	a009883a 	mov	r4,r20
    798c:	da000115 	stw	r8,4(sp)
    7990:	e00d883a 	mov	r6,fp
    7994:	103ee83a 	callr	r2
    7998:	102d883a 	mov	r22,r2
    799c:	da000117 	ldw	r8,4(sp)
    79a0:	00bfe00e 	bge	zero,r2,7924 <__alt_mem_Flash_flash_data+0xf4007924>
    79a4:	9da7c83a 	sub	r19,r19,r22
    79a8:	98001f26 	beq	r19,zero,7a28 <__sfvwrite_r+0x2e8>
    79ac:	b8800217 	ldw	r2,8(r23)
    79b0:	e5b9883a 	add	fp,fp,r22
    79b4:	95a5c83a 	sub	r18,r18,r22
    79b8:	15adc83a 	sub	r22,r2,r22
    79bc:	bd800215 	stw	r22,8(r23)
    79c0:	b03f8c26 	beq	r22,zero,77f4 <__alt_mem_Flash_flash_data+0xf40077f4>
    79c4:	903fe11e 	bne	r18,zero,794c <__alt_mem_Flash_flash_data+0xf400794c>
    79c8:	8f000017 	ldw	fp,0(r17)
    79cc:	8c800117 	ldw	r18,4(r17)
    79d0:	0011883a 	mov	r8,zero
    79d4:	8c400204 	addi	r17,r17,8
    79d8:	003fdb06 	br	7948 <__alt_mem_Flash_flash_data+0xf4007948>
    79dc:	180d883a 	mov	r6,r3
    79e0:	e00b883a 	mov	r5,fp
    79e4:	da000115 	stw	r8,4(sp)
    79e8:	d8c00015 	stw	r3,0(sp)
    79ec:	00082400 	call	8240 <memmove>
    79f0:	d8c00017 	ldw	r3,0(sp)
    79f4:	80800017 	ldw	r2,0(r16)
    79f8:	a009883a 	mov	r4,r20
    79fc:	800b883a 	mov	r5,r16
    7a00:	10c5883a 	add	r2,r2,r3
    7a04:	80800015 	stw	r2,0(r16)
    7a08:	d8c00015 	stw	r3,0(sp)
    7a0c:	0006f000 	call	6f00 <_fflush_r>
    7a10:	d8c00017 	ldw	r3,0(sp)
    7a14:	da000117 	ldw	r8,4(sp)
    7a18:	103fc21e 	bne	r2,zero,7924 <__alt_mem_Flash_flash_data+0xf4007924>
    7a1c:	182d883a 	mov	r22,r3
    7a20:	9da7c83a 	sub	r19,r19,r22
    7a24:	983fe11e 	bne	r19,zero,79ac <__alt_mem_Flash_flash_data+0xf40079ac>
    7a28:	a009883a 	mov	r4,r20
    7a2c:	800b883a 	mov	r5,r16
    7a30:	0006f000 	call	6f00 <_fflush_r>
    7a34:	103fbb1e 	bne	r2,zero,7924 <__alt_mem_Flash_flash_data+0xf4007924>
    7a38:	0011883a 	mov	r8,zero
    7a3c:	003fdb06 	br	79ac <__alt_mem_Flash_flash_data+0xf40079ac>
    7a40:	81000017 	ldw	r4,0(r16)
    7a44:	80800417 	ldw	r2,16(r16)
    7a48:	11000236 	bltu	r2,r4,7a54 <__sfvwrite_r+0x314>
    7a4c:	84c00517 	ldw	r19,20(r16)
    7a50:	94ffa62e 	bgeu	r18,r19,78ec <__alt_mem_Flash_flash_data+0xf40078ec>
    7a54:	9027883a 	mov	r19,r18
    7a58:	b480012e 	bgeu	r22,r18,7a60 <__sfvwrite_r+0x320>
    7a5c:	b027883a 	mov	r19,r22
    7a60:	e00b883a 	mov	r5,fp
    7a64:	980d883a 	mov	r6,r19
    7a68:	00082400 	call	8240 <memmove>
    7a6c:	80800217 	ldw	r2,8(r16)
    7a70:	80c00017 	ldw	r3,0(r16)
    7a74:	14c5c83a 	sub	r2,r2,r19
    7a78:	1cc7883a 	add	r3,r3,r19
    7a7c:	80800215 	stw	r2,8(r16)
    7a80:	80c00015 	stw	r3,0(r16)
    7a84:	10004326 	beq	r2,zero,7b94 <__sfvwrite_r+0x454>
    7a88:	9805883a 	mov	r2,r19
    7a8c:	003f8506 	br	78a4 <__alt_mem_Flash_flash_data+0xf40078a4>
    7a90:	a80d883a 	mov	r6,r21
    7a94:	e00b883a 	mov	r5,fp
    7a98:	da000115 	stw	r8,4(sp)
    7a9c:	00082400 	call	8240 <memmove>
    7aa0:	80800217 	ldw	r2,8(r16)
    7aa4:	80c00017 	ldw	r3,0(r16)
    7aa8:	da000117 	ldw	r8,4(sp)
    7aac:	1545c83a 	sub	r2,r2,r21
    7ab0:	1d6b883a 	add	r21,r3,r21
    7ab4:	80800215 	stw	r2,8(r16)
    7ab8:	85400015 	stw	r21,0(r16)
    7abc:	003fb906 	br	79a4 <__alt_mem_Flash_flash_data+0xf40079a4>
    7ac0:	81000017 	ldw	r4,0(r16)
    7ac4:	902d883a 	mov	r22,r18
    7ac8:	9027883a 	mov	r19,r18
    7acc:	003f6b06 	br	787c <__alt_mem_Flash_flash_data+0xf400787c>
    7ad0:	e009883a 	mov	r4,fp
    7ad4:	01400284 	movi	r5,10
    7ad8:	900d883a 	mov	r6,r18
    7adc:	00080200 	call	8020 <memchr>
    7ae0:	10003e26 	beq	r2,zero,7bdc <__sfvwrite_r+0x49c>
    7ae4:	10800044 	addi	r2,r2,1
    7ae8:	1727c83a 	sub	r19,r2,fp
    7aec:	02000044 	movi	r8,1
    7af0:	003f9706 	br	7950 <__alt_mem_Flash_flash_data+0xf4007950>
    7af4:	80800517 	ldw	r2,20(r16)
    7af8:	81400417 	ldw	r5,16(r16)
    7afc:	80c00017 	ldw	r3,0(r16)
    7b00:	10a7883a 	add	r19,r2,r2
    7b04:	9885883a 	add	r2,r19,r2
    7b08:	1026d7fa 	srli	r19,r2,31
    7b0c:	196bc83a 	sub	r21,r3,r5
    7b10:	a9800044 	addi	r6,r21,1
    7b14:	9885883a 	add	r2,r19,r2
    7b18:	1027d07a 	srai	r19,r2,1
    7b1c:	3485883a 	add	r2,r6,r18
    7b20:	980d883a 	mov	r6,r19
    7b24:	9880022e 	bgeu	r19,r2,7b30 <__sfvwrite_r+0x3f0>
    7b28:	1027883a 	mov	r19,r2
    7b2c:	100d883a 	mov	r6,r2
    7b30:	2101000c 	andi	r4,r4,1024
    7b34:	20001c26 	beq	r4,zero,7ba8 <__sfvwrite_r+0x468>
    7b38:	a009883a 	mov	r4,r20
    7b3c:	300b883a 	mov	r5,r6
    7b40:	00007280 	call	728 <_malloc_r>
    7b44:	102d883a 	mov	r22,r2
    7b48:	10002926 	beq	r2,zero,7bf0 <__sfvwrite_r+0x4b0>
    7b4c:	81400417 	ldw	r5,16(r16)
    7b50:	1009883a 	mov	r4,r2
    7b54:	a80d883a 	mov	r6,r21
    7b58:	00081080 	call	8108 <memcpy>
    7b5c:	8080030b 	ldhu	r2,12(r16)
    7b60:	00fedfc4 	movi	r3,-1153
    7b64:	10c4703a 	and	r2,r2,r3
    7b68:	10802014 	ori	r2,r2,128
    7b6c:	8080030d 	sth	r2,12(r16)
    7b70:	b549883a 	add	r4,r22,r21
    7b74:	9d4bc83a 	sub	r5,r19,r21
    7b78:	85800415 	stw	r22,16(r16)
    7b7c:	84c00515 	stw	r19,20(r16)
    7b80:	81000015 	stw	r4,0(r16)
    7b84:	902d883a 	mov	r22,r18
    7b88:	81400215 	stw	r5,8(r16)
    7b8c:	9027883a 	mov	r19,r18
    7b90:	003f3a06 	br	787c <__alt_mem_Flash_flash_data+0xf400787c>
    7b94:	a009883a 	mov	r4,r20
    7b98:	800b883a 	mov	r5,r16
    7b9c:	0006f000 	call	6f00 <_fflush_r>
    7ba0:	103fb926 	beq	r2,zero,7a88 <__alt_mem_Flash_flash_data+0xf4007a88>
    7ba4:	003f5f06 	br	7924 <__alt_mem_Flash_flash_data+0xf4007924>
    7ba8:	a009883a 	mov	r4,r20
    7bac:	00094600 	call	9460 <_realloc_r>
    7bb0:	102d883a 	mov	r22,r2
    7bb4:	103fee1e 	bne	r2,zero,7b70 <__alt_mem_Flash_flash_data+0xf4007b70>
    7bb8:	81400417 	ldw	r5,16(r16)
    7bbc:	a009883a 	mov	r4,r20
    7bc0:	00074500 	call	7450 <_free_r>
    7bc4:	8080030b 	ldhu	r2,12(r16)
    7bc8:	00ffdfc4 	movi	r3,-129
    7bcc:	1884703a 	and	r2,r3,r2
    7bd0:	00c00304 	movi	r3,12
    7bd4:	a0c00015 	stw	r3,0(r20)
    7bd8:	003f5306 	br	7928 <__alt_mem_Flash_flash_data+0xf4007928>
    7bdc:	94c00044 	addi	r19,r18,1
    7be0:	02000044 	movi	r8,1
    7be4:	003f5a06 	br	7950 <__alt_mem_Flash_flash_data+0xf4007950>
    7be8:	00bfffc4 	movi	r2,-1
    7bec:	003f0206 	br	77f8 <__alt_mem_Flash_flash_data+0xf40077f8>
    7bf0:	00800304 	movi	r2,12
    7bf4:	a0800015 	stw	r2,0(r20)
    7bf8:	8080030b 	ldhu	r2,12(r16)
    7bfc:	003f4a06 	br	7928 <__alt_mem_Flash_flash_data+0xf4007928>

00007c00 <_fwalk>:
    7c00:	defff704 	addi	sp,sp,-36
    7c04:	dd000415 	stw	r20,16(sp)
    7c08:	dfc00815 	stw	ra,32(sp)
    7c0c:	ddc00715 	stw	r23,28(sp)
    7c10:	dd800615 	stw	r22,24(sp)
    7c14:	dd400515 	stw	r21,20(sp)
    7c18:	dcc00315 	stw	r19,12(sp)
    7c1c:	dc800215 	stw	r18,8(sp)
    7c20:	dc400115 	stw	r17,4(sp)
    7c24:	dc000015 	stw	r16,0(sp)
    7c28:	2500b804 	addi	r20,r4,736
    7c2c:	a0002326 	beq	r20,zero,7cbc <_fwalk+0xbc>
    7c30:	282b883a 	mov	r21,r5
    7c34:	002f883a 	mov	r23,zero
    7c38:	05800044 	movi	r22,1
    7c3c:	04ffffc4 	movi	r19,-1
    7c40:	a4400117 	ldw	r17,4(r20)
    7c44:	a4800217 	ldw	r18,8(r20)
    7c48:	8c7fffc4 	addi	r17,r17,-1
    7c4c:	88000d16 	blt	r17,zero,7c84 <_fwalk+0x84>
    7c50:	94000304 	addi	r16,r18,12
    7c54:	94800384 	addi	r18,r18,14
    7c58:	80c0000b 	ldhu	r3,0(r16)
    7c5c:	8c7fffc4 	addi	r17,r17,-1
    7c60:	813ffd04 	addi	r4,r16,-12
    7c64:	b0c0042e 	bgeu	r22,r3,7c78 <_fwalk+0x78>
    7c68:	90c0000f 	ldh	r3,0(r18)
    7c6c:	1cc00226 	beq	r3,r19,7c78 <_fwalk+0x78>
    7c70:	a83ee83a 	callr	r21
    7c74:	b8aeb03a 	or	r23,r23,r2
    7c78:	84001a04 	addi	r16,r16,104
    7c7c:	94801a04 	addi	r18,r18,104
    7c80:	8cfff51e 	bne	r17,r19,7c58 <__alt_mem_Flash_flash_data+0xf4007c58>
    7c84:	a5000017 	ldw	r20,0(r20)
    7c88:	a03fed1e 	bne	r20,zero,7c40 <__alt_mem_Flash_flash_data+0xf4007c40>
    7c8c:	b805883a 	mov	r2,r23
    7c90:	dfc00817 	ldw	ra,32(sp)
    7c94:	ddc00717 	ldw	r23,28(sp)
    7c98:	dd800617 	ldw	r22,24(sp)
    7c9c:	dd400517 	ldw	r21,20(sp)
    7ca0:	dd000417 	ldw	r20,16(sp)
    7ca4:	dcc00317 	ldw	r19,12(sp)
    7ca8:	dc800217 	ldw	r18,8(sp)
    7cac:	dc400117 	ldw	r17,4(sp)
    7cb0:	dc000017 	ldw	r16,0(sp)
    7cb4:	dec00904 	addi	sp,sp,36
    7cb8:	f800283a 	ret
    7cbc:	002f883a 	mov	r23,zero
    7cc0:	003ff206 	br	7c8c <__alt_mem_Flash_flash_data+0xf4007c8c>

00007cc4 <_fwalk_reent>:
    7cc4:	defff704 	addi	sp,sp,-36
    7cc8:	dd400515 	stw	r21,20(sp)
    7ccc:	dfc00815 	stw	ra,32(sp)
    7cd0:	ddc00715 	stw	r23,28(sp)
    7cd4:	dd800615 	stw	r22,24(sp)
    7cd8:	dd000415 	stw	r20,16(sp)
    7cdc:	dcc00315 	stw	r19,12(sp)
    7ce0:	dc800215 	stw	r18,8(sp)
    7ce4:	dc400115 	stw	r17,4(sp)
    7ce8:	dc000015 	stw	r16,0(sp)
    7cec:	2540b804 	addi	r21,r4,736
    7cf0:	a8002326 	beq	r21,zero,7d80 <_fwalk_reent+0xbc>
    7cf4:	2829883a 	mov	r20,r5
    7cf8:	202d883a 	mov	r22,r4
    7cfc:	002f883a 	mov	r23,zero
    7d00:	04c00044 	movi	r19,1
    7d04:	04bfffc4 	movi	r18,-1
    7d08:	ac400117 	ldw	r17,4(r21)
    7d0c:	ac000217 	ldw	r16,8(r21)
    7d10:	8c7fffc4 	addi	r17,r17,-1
    7d14:	88000c16 	blt	r17,zero,7d48 <_fwalk_reent+0x84>
    7d18:	84000304 	addi	r16,r16,12
    7d1c:	80c0000b 	ldhu	r3,0(r16)
    7d20:	8c7fffc4 	addi	r17,r17,-1
    7d24:	817ffd04 	addi	r5,r16,-12
    7d28:	98c0052e 	bgeu	r19,r3,7d40 <_fwalk_reent+0x7c>
    7d2c:	80c0008f 	ldh	r3,2(r16)
    7d30:	b009883a 	mov	r4,r22
    7d34:	1c800226 	beq	r3,r18,7d40 <_fwalk_reent+0x7c>
    7d38:	a03ee83a 	callr	r20
    7d3c:	b8aeb03a 	or	r23,r23,r2
    7d40:	84001a04 	addi	r16,r16,104
    7d44:	8cbff51e 	bne	r17,r18,7d1c <__alt_mem_Flash_flash_data+0xf4007d1c>
    7d48:	ad400017 	ldw	r21,0(r21)
    7d4c:	a83fee1e 	bne	r21,zero,7d08 <__alt_mem_Flash_flash_data+0xf4007d08>
    7d50:	b805883a 	mov	r2,r23
    7d54:	dfc00817 	ldw	ra,32(sp)
    7d58:	ddc00717 	ldw	r23,28(sp)
    7d5c:	dd800617 	ldw	r22,24(sp)
    7d60:	dd400517 	ldw	r21,20(sp)
    7d64:	dd000417 	ldw	r20,16(sp)
    7d68:	dcc00317 	ldw	r19,12(sp)
    7d6c:	dc800217 	ldw	r18,8(sp)
    7d70:	dc400117 	ldw	r17,4(sp)
    7d74:	dc000017 	ldw	r16,0(sp)
    7d78:	dec00904 	addi	sp,sp,36
    7d7c:	f800283a 	ret
    7d80:	002f883a 	mov	r23,zero
    7d84:	003ff206 	br	7d50 <__alt_mem_Flash_flash_data+0xf4007d50>

00007d88 <_setlocale_r>:
    7d88:	30001b26 	beq	r6,zero,7df8 <_setlocale_r+0x70>
    7d8c:	014000b4 	movhi	r5,2
    7d90:	defffe04 	addi	sp,sp,-8
    7d94:	29422704 	addi	r5,r5,2204
    7d98:	3009883a 	mov	r4,r6
    7d9c:	dc000015 	stw	r16,0(sp)
    7da0:	dfc00115 	stw	ra,4(sp)
    7da4:	3021883a 	mov	r16,r6
    7da8:	0009b780 	call	9b78 <strcmp>
    7dac:	1000061e 	bne	r2,zero,7dc8 <_setlocale_r+0x40>
    7db0:	008000b4 	movhi	r2,2
    7db4:	10822604 	addi	r2,r2,2200
    7db8:	dfc00117 	ldw	ra,4(sp)
    7dbc:	dc000017 	ldw	r16,0(sp)
    7dc0:	dec00204 	addi	sp,sp,8
    7dc4:	f800283a 	ret
    7dc8:	014000b4 	movhi	r5,2
    7dcc:	29422604 	addi	r5,r5,2200
    7dd0:	8009883a 	mov	r4,r16
    7dd4:	0009b780 	call	9b78 <strcmp>
    7dd8:	103ff526 	beq	r2,zero,7db0 <__alt_mem_Flash_flash_data+0xf4007db0>
    7ddc:	014000b4 	movhi	r5,2
    7de0:	29420904 	addi	r5,r5,2084
    7de4:	8009883a 	mov	r4,r16
    7de8:	0009b780 	call	9b78 <strcmp>
    7dec:	103ff026 	beq	r2,zero,7db0 <__alt_mem_Flash_flash_data+0xf4007db0>
    7df0:	0005883a 	mov	r2,zero
    7df4:	003ff006 	br	7db8 <__alt_mem_Flash_flash_data+0xf4007db8>
    7df8:	008000b4 	movhi	r2,2
    7dfc:	10822604 	addi	r2,r2,2200
    7e00:	f800283a 	ret

00007e04 <__locale_charset>:
    7e04:	008000b4 	movhi	r2,2
    7e08:	10859104 	addi	r2,r2,5700
    7e0c:	f800283a 	ret

00007e10 <__locale_mb_cur_max>:
    7e10:	008000b4 	movhi	r2,2
    7e14:	108b1104 	addi	r2,r2,11332
    7e18:	10800017 	ldw	r2,0(r2)
    7e1c:	f800283a 	ret

00007e20 <__locale_msgcharset>:
    7e20:	008000b4 	movhi	r2,2
    7e24:	10858904 	addi	r2,r2,5668
    7e28:	f800283a 	ret

00007e2c <__locale_cjk_lang>:
    7e2c:	0005883a 	mov	r2,zero
    7e30:	f800283a 	ret

00007e34 <_localeconv_r>:
    7e34:	008000b4 	movhi	r2,2
    7e38:	10859904 	addi	r2,r2,5732
    7e3c:	f800283a 	ret

00007e40 <setlocale>:
    7e40:	00c000b4 	movhi	r3,2
    7e44:	18cb1004 	addi	r3,r3,11328
    7e48:	2005883a 	mov	r2,r4
    7e4c:	19000017 	ldw	r4,0(r3)
    7e50:	280d883a 	mov	r6,r5
    7e54:	100b883a 	mov	r5,r2
    7e58:	0007d881 	jmpi	7d88 <_setlocale_r>

00007e5c <localeconv>:
    7e5c:	008000b4 	movhi	r2,2
    7e60:	10859904 	addi	r2,r2,5732
    7e64:	f800283a 	ret

00007e68 <__smakebuf_r>:
    7e68:	2880030b 	ldhu	r2,12(r5)
    7e6c:	10c0008c 	andi	r3,r2,2
    7e70:	1800401e 	bne	r3,zero,7f74 <__smakebuf_r+0x10c>
    7e74:	deffec04 	addi	sp,sp,-80
    7e78:	dc000f15 	stw	r16,60(sp)
    7e7c:	2821883a 	mov	r16,r5
    7e80:	2940038f 	ldh	r5,14(r5)
    7e84:	dc401015 	stw	r17,64(sp)
    7e88:	dfc01315 	stw	ra,76(sp)
    7e8c:	dcc01215 	stw	r19,72(sp)
    7e90:	dc801115 	stw	r18,68(sp)
    7e94:	2023883a 	mov	r17,r4
    7e98:	28001b16 	blt	r5,zero,7f08 <__smakebuf_r+0xa0>
    7e9c:	d80d883a 	mov	r6,sp
    7ea0:	000c73c0 	call	c73c <_fstat_r>
    7ea4:	10001716 	blt	r2,zero,7f04 <__smakebuf_r+0x9c>
    7ea8:	d8800117 	ldw	r2,4(sp)
    7eac:	00e00014 	movui	r3,32768
    7eb0:	10bc000c 	andi	r2,r2,61440
    7eb4:	10c03726 	beq	r2,r3,7f94 <__smakebuf_r+0x12c>
    7eb8:	80c0030b 	ldhu	r3,12(r16)
    7ebc:	18c20014 	ori	r3,r3,2048
    7ec0:	80c0030d 	sth	r3,12(r16)
    7ec4:	00c80004 	movi	r3,8192
    7ec8:	10c03c1e 	bne	r2,r3,7fbc <__smakebuf_r+0x154>
    7ecc:	8140038f 	ldh	r5,14(r16)
    7ed0:	8809883a 	mov	r4,r17
    7ed4:	000c7940 	call	c794 <_isatty_r>
    7ed8:	10004e26 	beq	r2,zero,8014 <__smakebuf_r+0x1ac>
    7edc:	8080030b 	ldhu	r2,12(r16)
    7ee0:	04c00044 	movi	r19,1
    7ee4:	80c010c4 	addi	r3,r16,67
    7ee8:	14c4b03a 	or	r2,r2,r19
    7eec:	8080030d 	sth	r2,12(r16)
    7ef0:	80c00015 	stw	r3,0(r16)
    7ef4:	80c00415 	stw	r3,16(r16)
    7ef8:	84c00515 	stw	r19,20(r16)
    7efc:	04810004 	movi	r18,1024
    7f00:	00000706 	br	7f20 <__smakebuf_r+0xb8>
    7f04:	8080030b 	ldhu	r2,12(r16)
    7f08:	10c0200c 	andi	r3,r2,128
    7f0c:	18001f1e 	bne	r3,zero,7f8c <__smakebuf_r+0x124>
    7f10:	04810004 	movi	r18,1024
    7f14:	10820014 	ori	r2,r2,2048
    7f18:	8080030d 	sth	r2,12(r16)
    7f1c:	0027883a 	mov	r19,zero
    7f20:	8809883a 	mov	r4,r17
    7f24:	900b883a 	mov	r5,r18
    7f28:	00007280 	call	728 <_malloc_r>
    7f2c:	10002e26 	beq	r2,zero,7fe8 <__smakebuf_r+0x180>
    7f30:	80c0030b 	ldhu	r3,12(r16)
    7f34:	01000034 	movhi	r4,0
    7f38:	211be704 	addi	r4,r4,28572
    7f3c:	89000f15 	stw	r4,60(r17)
    7f40:	18c02014 	ori	r3,r3,128
    7f44:	80c0030d 	sth	r3,12(r16)
    7f48:	80800015 	stw	r2,0(r16)
    7f4c:	80800415 	stw	r2,16(r16)
    7f50:	84800515 	stw	r18,20(r16)
    7f54:	98001c1e 	bne	r19,zero,7fc8 <__smakebuf_r+0x160>
    7f58:	dfc01317 	ldw	ra,76(sp)
    7f5c:	dcc01217 	ldw	r19,72(sp)
    7f60:	dc801117 	ldw	r18,68(sp)
    7f64:	dc401017 	ldw	r17,64(sp)
    7f68:	dc000f17 	ldw	r16,60(sp)
    7f6c:	dec01404 	addi	sp,sp,80
    7f70:	f800283a 	ret
    7f74:	288010c4 	addi	r2,r5,67
    7f78:	28800015 	stw	r2,0(r5)
    7f7c:	28800415 	stw	r2,16(r5)
    7f80:	00800044 	movi	r2,1
    7f84:	28800515 	stw	r2,20(r5)
    7f88:	f800283a 	ret
    7f8c:	04801004 	movi	r18,64
    7f90:	003fe006 	br	7f14 <__alt_mem_Flash_flash_data+0xf4007f14>
    7f94:	81000a17 	ldw	r4,40(r16)
    7f98:	00c00074 	movhi	r3,1
    7f9c:	18e6c504 	addi	r3,r3,-25836
    7fa0:	20ffc51e 	bne	r4,r3,7eb8 <__alt_mem_Flash_flash_data+0xf4007eb8>
    7fa4:	80c0030b 	ldhu	r3,12(r16)
    7fa8:	01010004 	movi	r4,1024
    7fac:	81001315 	stw	r4,76(r16)
    7fb0:	1906b03a 	or	r3,r3,r4
    7fb4:	80c0030d 	sth	r3,12(r16)
    7fb8:	003fc206 	br	7ec4 <__alt_mem_Flash_flash_data+0xf4007ec4>
    7fbc:	0027883a 	mov	r19,zero
    7fc0:	04810004 	movi	r18,1024
    7fc4:	003fd606 	br	7f20 <__alt_mem_Flash_flash_data+0xf4007f20>
    7fc8:	8140038f 	ldh	r5,14(r16)
    7fcc:	8809883a 	mov	r4,r17
    7fd0:	000c7940 	call	c794 <_isatty_r>
    7fd4:	103fe026 	beq	r2,zero,7f58 <__alt_mem_Flash_flash_data+0xf4007f58>
    7fd8:	8080030b 	ldhu	r2,12(r16)
    7fdc:	10800054 	ori	r2,r2,1
    7fe0:	8080030d 	sth	r2,12(r16)
    7fe4:	003fdc06 	br	7f58 <__alt_mem_Flash_flash_data+0xf4007f58>
    7fe8:	8080030b 	ldhu	r2,12(r16)
    7fec:	10c0800c 	andi	r3,r2,512
    7ff0:	183fd91e 	bne	r3,zero,7f58 <__alt_mem_Flash_flash_data+0xf4007f58>
    7ff4:	10800094 	ori	r2,r2,2
    7ff8:	80c010c4 	addi	r3,r16,67
    7ffc:	8080030d 	sth	r2,12(r16)
    8000:	00800044 	movi	r2,1
    8004:	80c00015 	stw	r3,0(r16)
    8008:	80c00415 	stw	r3,16(r16)
    800c:	80800515 	stw	r2,20(r16)
    8010:	003fd106 	br	7f58 <__alt_mem_Flash_flash_data+0xf4007f58>
    8014:	04c00044 	movi	r19,1
    8018:	04810004 	movi	r18,1024
    801c:	003fc006 	br	7f20 <__alt_mem_Flash_flash_data+0xf4007f20>

00008020 <memchr>:
    8020:	208000cc 	andi	r2,r4,3
    8024:	280f883a 	mov	r7,r5
    8028:	10003526 	beq	r2,zero,8100 <memchr+0xe0>
    802c:	30bfffc4 	addi	r2,r6,-1
    8030:	30001b26 	beq	r6,zero,80a0 <memchr+0x80>
    8034:	21800003 	ldbu	r6,0(r4)
    8038:	28c03fcc 	andi	r3,r5,255
    803c:	30c01a26 	beq	r6,r3,80a8 <memchr+0x88>
    8040:	180d883a 	mov	r6,r3
    8044:	00000406 	br	8058 <memchr+0x38>
    8048:	10001526 	beq	r2,zero,80a0 <memchr+0x80>
    804c:	20c00003 	ldbu	r3,0(r4)
    8050:	10bfffc4 	addi	r2,r2,-1
    8054:	19801426 	beq	r3,r6,80a8 <memchr+0x88>
    8058:	21000044 	addi	r4,r4,1
    805c:	20c000cc 	andi	r3,r4,3
    8060:	183ff91e 	bne	r3,zero,8048 <__alt_mem_Flash_flash_data+0xf4008048>
    8064:	024000c4 	movi	r9,3
    8068:	48801136 	bltu	r9,r2,80b0 <memchr+0x90>
    806c:	10000c26 	beq	r2,zero,80a0 <memchr+0x80>
    8070:	20c00003 	ldbu	r3,0(r4)
    8074:	29403fcc 	andi	r5,r5,255
    8078:	19400b26 	beq	r3,r5,80a8 <memchr+0x88>
    807c:	20c00044 	addi	r3,r4,1
    8080:	2085883a 	add	r2,r4,r2
    8084:	39803fcc 	andi	r6,r7,255
    8088:	00000306 	br	8098 <memchr+0x78>
    808c:	18c00044 	addi	r3,r3,1
    8090:	197fffc3 	ldbu	r5,-1(r3)
    8094:	29800426 	beq	r5,r6,80a8 <memchr+0x88>
    8098:	1809883a 	mov	r4,r3
    809c:	18bffb1e 	bne	r3,r2,808c <__alt_mem_Flash_flash_data+0xf400808c>
    80a0:	0005883a 	mov	r2,zero
    80a4:	f800283a 	ret
    80a8:	2005883a 	mov	r2,r4
    80ac:	f800283a 	ret
    80b0:	28c03fcc 	andi	r3,r5,255
    80b4:	1810923a 	slli	r8,r3,8
    80b8:	02ffbff4 	movhi	r11,65279
    80bc:	02a02074 	movhi	r10,32897
    80c0:	40c6b03a 	or	r3,r8,r3
    80c4:	1810943a 	slli	r8,r3,16
    80c8:	5affbfc4 	addi	r11,r11,-257
    80cc:	52a02004 	addi	r10,r10,-32640
    80d0:	40d0b03a 	or	r8,r8,r3
    80d4:	20c00017 	ldw	r3,0(r4)
    80d8:	40c6f03a 	xor	r3,r8,r3
    80dc:	1acd883a 	add	r6,r3,r11
    80e0:	00c6303a 	nor	r3,zero,r3
    80e4:	30c6703a 	and	r3,r6,r3
    80e8:	1a86703a 	and	r3,r3,r10
    80ec:	183fdf1e 	bne	r3,zero,806c <__alt_mem_Flash_flash_data+0xf400806c>
    80f0:	10bfff04 	addi	r2,r2,-4
    80f4:	21000104 	addi	r4,r4,4
    80f8:	48bff636 	bltu	r9,r2,80d4 <__alt_mem_Flash_flash_data+0xf40080d4>
    80fc:	003fdb06 	br	806c <__alt_mem_Flash_flash_data+0xf400806c>
    8100:	3005883a 	mov	r2,r6
    8104:	003fd706 	br	8064 <__alt_mem_Flash_flash_data+0xf4008064>

00008108 <memcpy>:
    8108:	deffff04 	addi	sp,sp,-4
    810c:	dc000015 	stw	r16,0(sp)
    8110:	00c003c4 	movi	r3,15
    8114:	2005883a 	mov	r2,r4
    8118:	1980432e 	bgeu	r3,r6,8228 <memcpy+0x120>
    811c:	2146b03a 	or	r3,r4,r5
    8120:	18c000cc 	andi	r3,r3,3
    8124:	1800421e 	bne	r3,zero,8230 <memcpy+0x128>
    8128:	343ffc04 	addi	r16,r6,-16
    812c:	8020d13a 	srli	r16,r16,4
    8130:	28c00104 	addi	r3,r5,4
    8134:	23400104 	addi	r13,r4,4
    8138:	801e913a 	slli	r15,r16,4
    813c:	2b000204 	addi	r12,r5,8
    8140:	22c00204 	addi	r11,r4,8
    8144:	7bc00504 	addi	r15,r15,20
    8148:	2a800304 	addi	r10,r5,12
    814c:	22400304 	addi	r9,r4,12
    8150:	2bdf883a 	add	r15,r5,r15
    8154:	2811883a 	mov	r8,r5
    8158:	200f883a 	mov	r7,r4
    815c:	41000017 	ldw	r4,0(r8)
    8160:	39c00404 	addi	r7,r7,16
    8164:	18c00404 	addi	r3,r3,16
    8168:	393ffc15 	stw	r4,-16(r7)
    816c:	1bbffc17 	ldw	r14,-16(r3)
    8170:	6b400404 	addi	r13,r13,16
    8174:	5ac00404 	addi	r11,r11,16
    8178:	6bbffc15 	stw	r14,-16(r13)
    817c:	63800017 	ldw	r14,0(r12)
    8180:	4a400404 	addi	r9,r9,16
    8184:	42000404 	addi	r8,r8,16
    8188:	5bbffc15 	stw	r14,-16(r11)
    818c:	53800017 	ldw	r14,0(r10)
    8190:	63000404 	addi	r12,r12,16
    8194:	52800404 	addi	r10,r10,16
    8198:	4bbffc15 	stw	r14,-16(r9)
    819c:	1bffef1e 	bne	r3,r15,815c <__alt_mem_Flash_flash_data+0xf400815c>
    81a0:	81c00044 	addi	r7,r16,1
    81a4:	380e913a 	slli	r7,r7,4
    81a8:	310003cc 	andi	r4,r6,15
    81ac:	02c000c4 	movi	r11,3
    81b0:	11c7883a 	add	r3,r2,r7
    81b4:	29cb883a 	add	r5,r5,r7
    81b8:	59001f2e 	bgeu	r11,r4,8238 <memcpy+0x130>
    81bc:	1813883a 	mov	r9,r3
    81c0:	2811883a 	mov	r8,r5
    81c4:	200f883a 	mov	r7,r4
    81c8:	42800017 	ldw	r10,0(r8)
    81cc:	4a400104 	addi	r9,r9,4
    81d0:	39ffff04 	addi	r7,r7,-4
    81d4:	4abfff15 	stw	r10,-4(r9)
    81d8:	42000104 	addi	r8,r8,4
    81dc:	59fffa36 	bltu	r11,r7,81c8 <__alt_mem_Flash_flash_data+0xf40081c8>
    81e0:	213fff04 	addi	r4,r4,-4
    81e4:	2008d0ba 	srli	r4,r4,2
    81e8:	318000cc 	andi	r6,r6,3
    81ec:	21000044 	addi	r4,r4,1
    81f0:	2109883a 	add	r4,r4,r4
    81f4:	2109883a 	add	r4,r4,r4
    81f8:	1907883a 	add	r3,r3,r4
    81fc:	290b883a 	add	r5,r5,r4
    8200:	30000626 	beq	r6,zero,821c <memcpy+0x114>
    8204:	198d883a 	add	r6,r3,r6
    8208:	29c00003 	ldbu	r7,0(r5)
    820c:	18c00044 	addi	r3,r3,1
    8210:	29400044 	addi	r5,r5,1
    8214:	19ffffc5 	stb	r7,-1(r3)
    8218:	19bffb1e 	bne	r3,r6,8208 <__alt_mem_Flash_flash_data+0xf4008208>
    821c:	dc000017 	ldw	r16,0(sp)
    8220:	dec00104 	addi	sp,sp,4
    8224:	f800283a 	ret
    8228:	2007883a 	mov	r3,r4
    822c:	003ff406 	br	8200 <__alt_mem_Flash_flash_data+0xf4008200>
    8230:	2007883a 	mov	r3,r4
    8234:	003ff306 	br	8204 <__alt_mem_Flash_flash_data+0xf4008204>
    8238:	200d883a 	mov	r6,r4
    823c:	003ff006 	br	8200 <__alt_mem_Flash_flash_data+0xf4008200>

00008240 <memmove>:
    8240:	2005883a 	mov	r2,r4
    8244:	29000b2e 	bgeu	r5,r4,8274 <memmove+0x34>
    8248:	298f883a 	add	r7,r5,r6
    824c:	21c0092e 	bgeu	r4,r7,8274 <memmove+0x34>
    8250:	2187883a 	add	r3,r4,r6
    8254:	198bc83a 	sub	r5,r3,r6
    8258:	30004b26 	beq	r6,zero,8388 <memmove+0x148>
    825c:	39ffffc4 	addi	r7,r7,-1
    8260:	39000003 	ldbu	r4,0(r7)
    8264:	18ffffc4 	addi	r3,r3,-1
    8268:	19000005 	stb	r4,0(r3)
    826c:	197ffb1e 	bne	r3,r5,825c <__alt_mem_Flash_flash_data+0xf400825c>
    8270:	f800283a 	ret
    8274:	00c003c4 	movi	r3,15
    8278:	1980412e 	bgeu	r3,r6,8380 <memmove+0x140>
    827c:	1146b03a 	or	r3,r2,r5
    8280:	18c000cc 	andi	r3,r3,3
    8284:	1800411e 	bne	r3,zero,838c <memmove+0x14c>
    8288:	33fffc04 	addi	r15,r6,-16
    828c:	781ed13a 	srli	r15,r15,4
    8290:	28c00104 	addi	r3,r5,4
    8294:	13400104 	addi	r13,r2,4
    8298:	781c913a 	slli	r14,r15,4
    829c:	2b000204 	addi	r12,r5,8
    82a0:	12c00204 	addi	r11,r2,8
    82a4:	73800504 	addi	r14,r14,20
    82a8:	2a800304 	addi	r10,r5,12
    82ac:	12400304 	addi	r9,r2,12
    82b0:	2b9d883a 	add	r14,r5,r14
    82b4:	2811883a 	mov	r8,r5
    82b8:	100f883a 	mov	r7,r2
    82bc:	41000017 	ldw	r4,0(r8)
    82c0:	39c00404 	addi	r7,r7,16
    82c4:	18c00404 	addi	r3,r3,16
    82c8:	393ffc15 	stw	r4,-16(r7)
    82cc:	193ffc17 	ldw	r4,-16(r3)
    82d0:	6b400404 	addi	r13,r13,16
    82d4:	5ac00404 	addi	r11,r11,16
    82d8:	693ffc15 	stw	r4,-16(r13)
    82dc:	61000017 	ldw	r4,0(r12)
    82e0:	4a400404 	addi	r9,r9,16
    82e4:	42000404 	addi	r8,r8,16
    82e8:	593ffc15 	stw	r4,-16(r11)
    82ec:	51000017 	ldw	r4,0(r10)
    82f0:	63000404 	addi	r12,r12,16
    82f4:	52800404 	addi	r10,r10,16
    82f8:	493ffc15 	stw	r4,-16(r9)
    82fc:	1bbfef1e 	bne	r3,r14,82bc <__alt_mem_Flash_flash_data+0xf40082bc>
    8300:	79000044 	addi	r4,r15,1
    8304:	2008913a 	slli	r4,r4,4
    8308:	328003cc 	andi	r10,r6,15
    830c:	02c000c4 	movi	r11,3
    8310:	1107883a 	add	r3,r2,r4
    8314:	290b883a 	add	r5,r5,r4
    8318:	5a801e2e 	bgeu	r11,r10,8394 <memmove+0x154>
    831c:	1813883a 	mov	r9,r3
    8320:	2811883a 	mov	r8,r5
    8324:	500f883a 	mov	r7,r10
    8328:	41000017 	ldw	r4,0(r8)
    832c:	4a400104 	addi	r9,r9,4
    8330:	39ffff04 	addi	r7,r7,-4
    8334:	493fff15 	stw	r4,-4(r9)
    8338:	42000104 	addi	r8,r8,4
    833c:	59fffa36 	bltu	r11,r7,8328 <__alt_mem_Flash_flash_data+0xf4008328>
    8340:	513fff04 	addi	r4,r10,-4
    8344:	2008d0ba 	srli	r4,r4,2
    8348:	318000cc 	andi	r6,r6,3
    834c:	21000044 	addi	r4,r4,1
    8350:	2109883a 	add	r4,r4,r4
    8354:	2109883a 	add	r4,r4,r4
    8358:	1907883a 	add	r3,r3,r4
    835c:	290b883a 	add	r5,r5,r4
    8360:	30000926 	beq	r6,zero,8388 <memmove+0x148>
    8364:	198d883a 	add	r6,r3,r6
    8368:	29c00003 	ldbu	r7,0(r5)
    836c:	18c00044 	addi	r3,r3,1
    8370:	29400044 	addi	r5,r5,1
    8374:	19ffffc5 	stb	r7,-1(r3)
    8378:	19bffb1e 	bne	r3,r6,8368 <__alt_mem_Flash_flash_data+0xf4008368>
    837c:	f800283a 	ret
    8380:	1007883a 	mov	r3,r2
    8384:	003ff606 	br	8360 <__alt_mem_Flash_flash_data+0xf4008360>
    8388:	f800283a 	ret
    838c:	1007883a 	mov	r3,r2
    8390:	003ff406 	br	8364 <__alt_mem_Flash_flash_data+0xf4008364>
    8394:	500d883a 	mov	r6,r10
    8398:	003ff106 	br	8360 <__alt_mem_Flash_flash_data+0xf4008360>

0000839c <memset>:
    839c:	20c000cc 	andi	r3,r4,3
    83a0:	2005883a 	mov	r2,r4
    83a4:	18004326 	beq	r3,zero,84b4 <memset+0x118>
    83a8:	31ffffc4 	addi	r7,r6,-1
    83ac:	30004026 	beq	r6,zero,84b0 <memset+0x114>
    83b0:	2813883a 	mov	r9,r5
    83b4:	200d883a 	mov	r6,r4
    83b8:	2007883a 	mov	r3,r4
    83bc:	00000406 	br	83d0 <memset+0x34>
    83c0:	3a3fffc4 	addi	r8,r7,-1
    83c4:	31800044 	addi	r6,r6,1
    83c8:	38003926 	beq	r7,zero,84b0 <memset+0x114>
    83cc:	400f883a 	mov	r7,r8
    83d0:	18c00044 	addi	r3,r3,1
    83d4:	32400005 	stb	r9,0(r6)
    83d8:	1a0000cc 	andi	r8,r3,3
    83dc:	403ff81e 	bne	r8,zero,83c0 <__alt_mem_Flash_flash_data+0xf40083c0>
    83e0:	010000c4 	movi	r4,3
    83e4:	21c02d2e 	bgeu	r4,r7,849c <memset+0x100>
    83e8:	29803fcc 	andi	r6,r5,255
    83ec:	3008923a 	slli	r4,r6,8
    83f0:	218cb03a 	or	r6,r4,r6
    83f4:	3008943a 	slli	r4,r6,16
    83f8:	218cb03a 	or	r6,r4,r6
    83fc:	010003c4 	movi	r4,15
    8400:	21c0182e 	bgeu	r4,r7,8464 <memset+0xc8>
    8404:	3b3ffc04 	addi	r12,r7,-16
    8408:	6018d13a 	srli	r12,r12,4
    840c:	1a000104 	addi	r8,r3,4
    8410:	1ac00204 	addi	r11,r3,8
    8414:	6008913a 	slli	r4,r12,4
    8418:	1a800304 	addi	r10,r3,12
    841c:	1813883a 	mov	r9,r3
    8420:	21000504 	addi	r4,r4,20
    8424:	1909883a 	add	r4,r3,r4
    8428:	49800015 	stw	r6,0(r9)
    842c:	41800015 	stw	r6,0(r8)
    8430:	59800015 	stw	r6,0(r11)
    8434:	51800015 	stw	r6,0(r10)
    8438:	42000404 	addi	r8,r8,16
    843c:	4a400404 	addi	r9,r9,16
    8440:	5ac00404 	addi	r11,r11,16
    8444:	52800404 	addi	r10,r10,16
    8448:	413ff71e 	bne	r8,r4,8428 <__alt_mem_Flash_flash_data+0xf4008428>
    844c:	63000044 	addi	r12,r12,1
    8450:	6018913a 	slli	r12,r12,4
    8454:	39c003cc 	andi	r7,r7,15
    8458:	010000c4 	movi	r4,3
    845c:	1b07883a 	add	r3,r3,r12
    8460:	21c00e2e 	bgeu	r4,r7,849c <memset+0x100>
    8464:	1813883a 	mov	r9,r3
    8468:	3811883a 	mov	r8,r7
    846c:	010000c4 	movi	r4,3
    8470:	49800015 	stw	r6,0(r9)
    8474:	423fff04 	addi	r8,r8,-4
    8478:	4a400104 	addi	r9,r9,4
    847c:	223ffc36 	bltu	r4,r8,8470 <__alt_mem_Flash_flash_data+0xf4008470>
    8480:	393fff04 	addi	r4,r7,-4
    8484:	2008d0ba 	srli	r4,r4,2
    8488:	39c000cc 	andi	r7,r7,3
    848c:	21000044 	addi	r4,r4,1
    8490:	2109883a 	add	r4,r4,r4
    8494:	2109883a 	add	r4,r4,r4
    8498:	1907883a 	add	r3,r3,r4
    849c:	38000426 	beq	r7,zero,84b0 <memset+0x114>
    84a0:	19cf883a 	add	r7,r3,r7
    84a4:	19400005 	stb	r5,0(r3)
    84a8:	18c00044 	addi	r3,r3,1
    84ac:	19fffd1e 	bne	r3,r7,84a4 <__alt_mem_Flash_flash_data+0xf40084a4>
    84b0:	f800283a 	ret
    84b4:	2007883a 	mov	r3,r4
    84b8:	300f883a 	mov	r7,r6
    84bc:	003fc806 	br	83e0 <__alt_mem_Flash_flash_data+0xf40083e0>

000084c0 <_Balloc>:
    84c0:	20801317 	ldw	r2,76(r4)
    84c4:	defffc04 	addi	sp,sp,-16
    84c8:	dc400115 	stw	r17,4(sp)
    84cc:	dc000015 	stw	r16,0(sp)
    84d0:	dfc00315 	stw	ra,12(sp)
    84d4:	dc800215 	stw	r18,8(sp)
    84d8:	2023883a 	mov	r17,r4
    84dc:	2821883a 	mov	r16,r5
    84e0:	10000f26 	beq	r2,zero,8520 <_Balloc+0x60>
    84e4:	8407883a 	add	r3,r16,r16
    84e8:	18c7883a 	add	r3,r3,r3
    84ec:	10c7883a 	add	r3,r2,r3
    84f0:	18800017 	ldw	r2,0(r3)
    84f4:	10001126 	beq	r2,zero,853c <_Balloc+0x7c>
    84f8:	11000017 	ldw	r4,0(r2)
    84fc:	19000015 	stw	r4,0(r3)
    8500:	10000415 	stw	zero,16(r2)
    8504:	10000315 	stw	zero,12(r2)
    8508:	dfc00317 	ldw	ra,12(sp)
    850c:	dc800217 	ldw	r18,8(sp)
    8510:	dc400117 	ldw	r17,4(sp)
    8514:	dc000017 	ldw	r16,0(sp)
    8518:	dec00404 	addi	sp,sp,16
    851c:	f800283a 	ret
    8520:	01400104 	movi	r5,4
    8524:	01800844 	movi	r6,33
    8528:	000c3940 	call	c394 <_calloc_r>
    852c:	88801315 	stw	r2,76(r17)
    8530:	103fec1e 	bne	r2,zero,84e4 <__alt_mem_Flash_flash_data+0xf40084e4>
    8534:	0005883a 	mov	r2,zero
    8538:	003ff306 	br	8508 <__alt_mem_Flash_flash_data+0xf4008508>
    853c:	01400044 	movi	r5,1
    8540:	2c24983a 	sll	r18,r5,r16
    8544:	8809883a 	mov	r4,r17
    8548:	91800144 	addi	r6,r18,5
    854c:	318d883a 	add	r6,r6,r6
    8550:	318d883a 	add	r6,r6,r6
    8554:	000c3940 	call	c394 <_calloc_r>
    8558:	103ff626 	beq	r2,zero,8534 <__alt_mem_Flash_flash_data+0xf4008534>
    855c:	14000115 	stw	r16,4(r2)
    8560:	14800215 	stw	r18,8(r2)
    8564:	003fe606 	br	8500 <__alt_mem_Flash_flash_data+0xf4008500>

00008568 <_Bfree>:
    8568:	28000826 	beq	r5,zero,858c <_Bfree+0x24>
    856c:	28c00117 	ldw	r3,4(r5)
    8570:	20801317 	ldw	r2,76(r4)
    8574:	18c7883a 	add	r3,r3,r3
    8578:	18c7883a 	add	r3,r3,r3
    857c:	10c5883a 	add	r2,r2,r3
    8580:	10c00017 	ldw	r3,0(r2)
    8584:	28c00015 	stw	r3,0(r5)
    8588:	11400015 	stw	r5,0(r2)
    858c:	f800283a 	ret

00008590 <__multadd>:
    8590:	defffa04 	addi	sp,sp,-24
    8594:	dc000115 	stw	r16,4(sp)
    8598:	2c000417 	ldw	r16,16(r5)
    859c:	dc800315 	stw	r18,12(sp)
    85a0:	dc400215 	stw	r17,8(sp)
    85a4:	dfc00515 	stw	ra,20(sp)
    85a8:	dcc00415 	stw	r19,16(sp)
    85ac:	2823883a 	mov	r17,r5
    85b0:	2025883a 	mov	r18,r4
    85b4:	2a400504 	addi	r9,r5,20
    85b8:	0015883a 	mov	r10,zero
    85bc:	4a000017 	ldw	r8,0(r9)
    85c0:	4a400104 	addi	r9,r9,4
    85c4:	52800044 	addi	r10,r10,1
    85c8:	40ffffcc 	andi	r3,r8,65535
    85cc:	1987383a 	mul	r3,r3,r6
    85d0:	4010d43a 	srli	r8,r8,16
    85d4:	19cf883a 	add	r7,r3,r7
    85d8:	4191383a 	mul	r8,r8,r6
    85dc:	3816d43a 	srli	r11,r7,16
    85e0:	38ffffcc 	andi	r3,r7,65535
    85e4:	5a0f883a 	add	r7,r11,r8
    85e8:	3810943a 	slli	r8,r7,16
    85ec:	380ed43a 	srli	r7,r7,16
    85f0:	40c7883a 	add	r3,r8,r3
    85f4:	48ffff15 	stw	r3,-4(r9)
    85f8:	543ff016 	blt	r10,r16,85bc <__alt_mem_Flash_flash_data+0xf40085bc>
    85fc:	38000926 	beq	r7,zero,8624 <__multadd+0x94>
    8600:	88800217 	ldw	r2,8(r17)
    8604:	80800f0e 	bge	r16,r2,8644 <__multadd+0xb4>
    8608:	80800144 	addi	r2,r16,5
    860c:	1085883a 	add	r2,r2,r2
    8610:	1085883a 	add	r2,r2,r2
    8614:	8885883a 	add	r2,r17,r2
    8618:	11c00015 	stw	r7,0(r2)
    861c:	84000044 	addi	r16,r16,1
    8620:	8c000415 	stw	r16,16(r17)
    8624:	8805883a 	mov	r2,r17
    8628:	dfc00517 	ldw	ra,20(sp)
    862c:	dcc00417 	ldw	r19,16(sp)
    8630:	dc800317 	ldw	r18,12(sp)
    8634:	dc400217 	ldw	r17,8(sp)
    8638:	dc000117 	ldw	r16,4(sp)
    863c:	dec00604 	addi	sp,sp,24
    8640:	f800283a 	ret
    8644:	89400117 	ldw	r5,4(r17)
    8648:	9009883a 	mov	r4,r18
    864c:	d9c00015 	stw	r7,0(sp)
    8650:	29400044 	addi	r5,r5,1
    8654:	00084c00 	call	84c0 <_Balloc>
    8658:	89800417 	ldw	r6,16(r17)
    865c:	11000304 	addi	r4,r2,12
    8660:	89400304 	addi	r5,r17,12
    8664:	31800084 	addi	r6,r6,2
    8668:	318d883a 	add	r6,r6,r6
    866c:	318d883a 	add	r6,r6,r6
    8670:	1027883a 	mov	r19,r2
    8674:	00081080 	call	8108 <memcpy>
    8678:	d9c00017 	ldw	r7,0(sp)
    867c:	88000a26 	beq	r17,zero,86a8 <__multadd+0x118>
    8680:	89000117 	ldw	r4,4(r17)
    8684:	90c01317 	ldw	r3,76(r18)
    8688:	2109883a 	add	r4,r4,r4
    868c:	2109883a 	add	r4,r4,r4
    8690:	1907883a 	add	r3,r3,r4
    8694:	18800017 	ldw	r2,0(r3)
    8698:	88800015 	stw	r2,0(r17)
    869c:	1c400015 	stw	r17,0(r3)
    86a0:	9823883a 	mov	r17,r19
    86a4:	003fd806 	br	8608 <__alt_mem_Flash_flash_data+0xf4008608>
    86a8:	9823883a 	mov	r17,r19
    86ac:	003fd606 	br	8608 <__alt_mem_Flash_flash_data+0xf4008608>

000086b0 <__s2b>:
    86b0:	defff904 	addi	sp,sp,-28
    86b4:	dc400115 	stw	r17,4(sp)
    86b8:	dc000015 	stw	r16,0(sp)
    86bc:	2023883a 	mov	r17,r4
    86c0:	2821883a 	mov	r16,r5
    86c4:	39000204 	addi	r4,r7,8
    86c8:	01400244 	movi	r5,9
    86cc:	dcc00315 	stw	r19,12(sp)
    86d0:	dc800215 	stw	r18,8(sp)
    86d4:	dfc00615 	stw	ra,24(sp)
    86d8:	dd400515 	stw	r21,20(sp)
    86dc:	dd000415 	stw	r20,16(sp)
    86e0:	3825883a 	mov	r18,r7
    86e4:	3027883a 	mov	r19,r6
    86e8:	000d7980 	call	d798 <__divsi3>
    86ec:	00c00044 	movi	r3,1
    86f0:	000b883a 	mov	r5,zero
    86f4:	1880030e 	bge	r3,r2,8704 <__s2b+0x54>
    86f8:	18c7883a 	add	r3,r3,r3
    86fc:	29400044 	addi	r5,r5,1
    8700:	18bffd16 	blt	r3,r2,86f8 <__alt_mem_Flash_flash_data+0xf40086f8>
    8704:	8809883a 	mov	r4,r17
    8708:	00084c00 	call	84c0 <_Balloc>
    870c:	d8c00717 	ldw	r3,28(sp)
    8710:	10c00515 	stw	r3,20(r2)
    8714:	00c00044 	movi	r3,1
    8718:	10c00415 	stw	r3,16(r2)
    871c:	00c00244 	movi	r3,9
    8720:	1cc0210e 	bge	r3,r19,87a8 <__s2b+0xf8>
    8724:	80eb883a 	add	r21,r16,r3
    8728:	a829883a 	mov	r20,r21
    872c:	84e1883a 	add	r16,r16,r19
    8730:	a1c00007 	ldb	r7,0(r20)
    8734:	8809883a 	mov	r4,r17
    8738:	a5000044 	addi	r20,r20,1
    873c:	100b883a 	mov	r5,r2
    8740:	01800284 	movi	r6,10
    8744:	39fff404 	addi	r7,r7,-48
    8748:	00085900 	call	8590 <__multadd>
    874c:	a43ff81e 	bne	r20,r16,8730 <__alt_mem_Flash_flash_data+0xf4008730>
    8750:	ace1883a 	add	r16,r21,r19
    8754:	843ffe04 	addi	r16,r16,-8
    8758:	9c800a0e 	bge	r19,r18,8784 <__s2b+0xd4>
    875c:	94e5c83a 	sub	r18,r18,r19
    8760:	84a5883a 	add	r18,r16,r18
    8764:	81c00007 	ldb	r7,0(r16)
    8768:	8809883a 	mov	r4,r17
    876c:	84000044 	addi	r16,r16,1
    8770:	100b883a 	mov	r5,r2
    8774:	01800284 	movi	r6,10
    8778:	39fff404 	addi	r7,r7,-48
    877c:	00085900 	call	8590 <__multadd>
    8780:	84bff81e 	bne	r16,r18,8764 <__alt_mem_Flash_flash_data+0xf4008764>
    8784:	dfc00617 	ldw	ra,24(sp)
    8788:	dd400517 	ldw	r21,20(sp)
    878c:	dd000417 	ldw	r20,16(sp)
    8790:	dcc00317 	ldw	r19,12(sp)
    8794:	dc800217 	ldw	r18,8(sp)
    8798:	dc400117 	ldw	r17,4(sp)
    879c:	dc000017 	ldw	r16,0(sp)
    87a0:	dec00704 	addi	sp,sp,28
    87a4:	f800283a 	ret
    87a8:	84000284 	addi	r16,r16,10
    87ac:	1827883a 	mov	r19,r3
    87b0:	003fe906 	br	8758 <__alt_mem_Flash_flash_data+0xf4008758>

000087b4 <__hi0bits>:
    87b4:	20bfffec 	andhi	r2,r4,65535
    87b8:	1000141e 	bne	r2,zero,880c <__hi0bits+0x58>
    87bc:	2008943a 	slli	r4,r4,16
    87c0:	00800404 	movi	r2,16
    87c4:	20ffc02c 	andhi	r3,r4,65280
    87c8:	1800021e 	bne	r3,zero,87d4 <__hi0bits+0x20>
    87cc:	2008923a 	slli	r4,r4,8
    87d0:	10800204 	addi	r2,r2,8
    87d4:	20fc002c 	andhi	r3,r4,61440
    87d8:	1800021e 	bne	r3,zero,87e4 <__hi0bits+0x30>
    87dc:	2008913a 	slli	r4,r4,4
    87e0:	10800104 	addi	r2,r2,4
    87e4:	20f0002c 	andhi	r3,r4,49152
    87e8:	1800031e 	bne	r3,zero,87f8 <__hi0bits+0x44>
    87ec:	2109883a 	add	r4,r4,r4
    87f0:	10800084 	addi	r2,r2,2
    87f4:	2109883a 	add	r4,r4,r4
    87f8:	20000316 	blt	r4,zero,8808 <__hi0bits+0x54>
    87fc:	2110002c 	andhi	r4,r4,16384
    8800:	2000041e 	bne	r4,zero,8814 <__hi0bits+0x60>
    8804:	00800804 	movi	r2,32
    8808:	f800283a 	ret
    880c:	0005883a 	mov	r2,zero
    8810:	003fec06 	br	87c4 <__alt_mem_Flash_flash_data+0xf40087c4>
    8814:	10800044 	addi	r2,r2,1
    8818:	f800283a 	ret

0000881c <__lo0bits>:
    881c:	20c00017 	ldw	r3,0(r4)
    8820:	188001cc 	andi	r2,r3,7
    8824:	10000826 	beq	r2,zero,8848 <__lo0bits+0x2c>
    8828:	1880004c 	andi	r2,r3,1
    882c:	1000211e 	bne	r2,zero,88b4 <__lo0bits+0x98>
    8830:	1880008c 	andi	r2,r3,2
    8834:	1000211e 	bne	r2,zero,88bc <__lo0bits+0xa0>
    8838:	1806d0ba 	srli	r3,r3,2
    883c:	00800084 	movi	r2,2
    8840:	20c00015 	stw	r3,0(r4)
    8844:	f800283a 	ret
    8848:	18bfffcc 	andi	r2,r3,65535
    884c:	10001326 	beq	r2,zero,889c <__lo0bits+0x80>
    8850:	0005883a 	mov	r2,zero
    8854:	19403fcc 	andi	r5,r3,255
    8858:	2800021e 	bne	r5,zero,8864 <__lo0bits+0x48>
    885c:	1806d23a 	srli	r3,r3,8
    8860:	10800204 	addi	r2,r2,8
    8864:	194003cc 	andi	r5,r3,15
    8868:	2800021e 	bne	r5,zero,8874 <__lo0bits+0x58>
    886c:	1806d13a 	srli	r3,r3,4
    8870:	10800104 	addi	r2,r2,4
    8874:	194000cc 	andi	r5,r3,3
    8878:	2800021e 	bne	r5,zero,8884 <__lo0bits+0x68>
    887c:	1806d0ba 	srli	r3,r3,2
    8880:	10800084 	addi	r2,r2,2
    8884:	1940004c 	andi	r5,r3,1
    8888:	2800081e 	bne	r5,zero,88ac <__lo0bits+0x90>
    888c:	1806d07a 	srli	r3,r3,1
    8890:	1800051e 	bne	r3,zero,88a8 <__lo0bits+0x8c>
    8894:	00800804 	movi	r2,32
    8898:	f800283a 	ret
    889c:	1806d43a 	srli	r3,r3,16
    88a0:	00800404 	movi	r2,16
    88a4:	003feb06 	br	8854 <__alt_mem_Flash_flash_data+0xf4008854>
    88a8:	10800044 	addi	r2,r2,1
    88ac:	20c00015 	stw	r3,0(r4)
    88b0:	f800283a 	ret
    88b4:	0005883a 	mov	r2,zero
    88b8:	f800283a 	ret
    88bc:	1806d07a 	srli	r3,r3,1
    88c0:	00800044 	movi	r2,1
    88c4:	20c00015 	stw	r3,0(r4)
    88c8:	f800283a 	ret

000088cc <__i2b>:
    88cc:	defffd04 	addi	sp,sp,-12
    88d0:	dc000015 	stw	r16,0(sp)
    88d4:	04000044 	movi	r16,1
    88d8:	dc400115 	stw	r17,4(sp)
    88dc:	2823883a 	mov	r17,r5
    88e0:	800b883a 	mov	r5,r16
    88e4:	dfc00215 	stw	ra,8(sp)
    88e8:	00084c00 	call	84c0 <_Balloc>
    88ec:	14400515 	stw	r17,20(r2)
    88f0:	14000415 	stw	r16,16(r2)
    88f4:	dfc00217 	ldw	ra,8(sp)
    88f8:	dc400117 	ldw	r17,4(sp)
    88fc:	dc000017 	ldw	r16,0(sp)
    8900:	dec00304 	addi	sp,sp,12
    8904:	f800283a 	ret

00008908 <__multiply>:
    8908:	defffa04 	addi	sp,sp,-24
    890c:	dcc00315 	stw	r19,12(sp)
    8910:	dc800215 	stw	r18,8(sp)
    8914:	2cc00417 	ldw	r19,16(r5)
    8918:	34800417 	ldw	r18,16(r6)
    891c:	dd000415 	stw	r20,16(sp)
    8920:	dc400115 	stw	r17,4(sp)
    8924:	dfc00515 	stw	ra,20(sp)
    8928:	dc000015 	stw	r16,0(sp)
    892c:	2829883a 	mov	r20,r5
    8930:	3023883a 	mov	r17,r6
    8934:	9c807016 	blt	r19,r18,8af8 <__multiply+0x1f0>
    8938:	9005883a 	mov	r2,r18
    893c:	9825883a 	mov	r18,r19
    8940:	1027883a 	mov	r19,r2
    8944:	a0800217 	ldw	r2,8(r20)
    8948:	94e1883a 	add	r16,r18,r19
    894c:	a1400117 	ldw	r5,4(r20)
    8950:	1400010e 	bge	r2,r16,8958 <__multiply+0x50>
    8954:	29400044 	addi	r5,r5,1
    8958:	00084c00 	call	84c0 <_Balloc>
    895c:	8417883a 	add	r11,r16,r16
    8960:	13000504 	addi	r12,r2,20
    8964:	5ad7883a 	add	r11,r11,r11
    8968:	62d7883a 	add	r11,r12,r11
    896c:	6007883a 	mov	r3,r12
    8970:	62c0032e 	bgeu	r12,r11,8980 <__multiply+0x78>
    8974:	18000015 	stw	zero,0(r3)
    8978:	18c00104 	addi	r3,r3,4
    897c:	1afffd36 	bltu	r3,r11,8974 <__alt_mem_Flash_flash_data+0xf4008974>
    8980:	9ce7883a 	add	r19,r19,r19
    8984:	94a5883a 	add	r18,r18,r18
    8988:	89800504 	addi	r6,r17,20
    898c:	9ce7883a 	add	r19,r19,r19
    8990:	a3800504 	addi	r14,r20,20
    8994:	94a5883a 	add	r18,r18,r18
    8998:	34db883a 	add	r13,r6,r19
    899c:	7495883a 	add	r10,r14,r18
    89a0:	3340422e 	bgeu	r6,r13,8aac <__multiply+0x1a4>
    89a4:	34400017 	ldw	r17,0(r6)
    89a8:	8cbfffcc 	andi	r18,r17,65535
    89ac:	90001b26 	beq	r18,zero,8a1c <__multiply+0x114>
    89b0:	6013883a 	mov	r9,r12
    89b4:	7023883a 	mov	r17,r14
    89b8:	0011883a 	mov	r8,zero
    89bc:	88c00017 	ldw	r3,0(r17)
    89c0:	4bc00017 	ldw	r15,0(r9)
    89c4:	8c400104 	addi	r17,r17,4
    89c8:	19ffffcc 	andi	r7,r3,65535
    89cc:	3c8f383a 	mul	r7,r7,r18
    89d0:	1808d43a 	srli	r4,r3,16
    89d4:	797fffcc 	andi	r5,r15,65535
    89d8:	29cb883a 	add	r5,r5,r7
    89dc:	2a0b883a 	add	r5,r5,r8
    89e0:	2489383a 	mul	r4,r4,r18
    89e4:	7806d43a 	srli	r3,r15,16
    89e8:	2810d43a 	srli	r8,r5,16
    89ec:	297fffcc 	andi	r5,r5,65535
    89f0:	1907883a 	add	r3,r3,r4
    89f4:	1a07883a 	add	r3,r3,r8
    89f8:	1808943a 	slli	r4,r3,16
    89fc:	480f883a 	mov	r7,r9
    8a00:	1810d43a 	srli	r8,r3,16
    8a04:	214ab03a 	or	r5,r4,r5
    8a08:	49400015 	stw	r5,0(r9)
    8a0c:	4a400104 	addi	r9,r9,4
    8a10:	8abfea36 	bltu	r17,r10,89bc <__alt_mem_Flash_flash_data+0xf40089bc>
    8a14:	3a000115 	stw	r8,4(r7)
    8a18:	34400017 	ldw	r17,0(r6)
    8a1c:	8822d43a 	srli	r17,r17,16
    8a20:	88001f26 	beq	r17,zero,8aa0 <__multiply+0x198>
    8a24:	60c00017 	ldw	r3,0(r12)
    8a28:	7013883a 	mov	r9,r14
    8a2c:	601f883a 	mov	r15,r12
    8a30:	1811883a 	mov	r8,r3
    8a34:	6027883a 	mov	r19,r12
    8a38:	000f883a 	mov	r7,zero
    8a3c:	00000106 	br	8a44 <__multiply+0x13c>
    8a40:	9027883a 	mov	r19,r18
    8a44:	4940000b 	ldhu	r5,0(r9)
    8a48:	4010d43a 	srli	r8,r8,16
    8a4c:	193fffcc 	andi	r4,r3,65535
    8a50:	2c4b383a 	mul	r5,r5,r17
    8a54:	7bc00104 	addi	r15,r15,4
    8a58:	4a400104 	addi	r9,r9,4
    8a5c:	2a0b883a 	add	r5,r5,r8
    8a60:	29cb883a 	add	r5,r5,r7
    8a64:	2806943a 	slli	r3,r5,16
    8a68:	9c800104 	addi	r18,r19,4
    8a6c:	280ad43a 	srli	r5,r5,16
    8a70:	1908b03a 	or	r4,r3,r4
    8a74:	793fff15 	stw	r4,-4(r15)
    8a78:	48ffff17 	ldw	r3,-4(r9)
    8a7c:	92000017 	ldw	r8,0(r18)
    8a80:	1806d43a 	srli	r3,r3,16
    8a84:	413fffcc 	andi	r4,r8,65535
    8a88:	1c47383a 	mul	r3,r3,r17
    8a8c:	1907883a 	add	r3,r3,r4
    8a90:	1947883a 	add	r3,r3,r5
    8a94:	180ed43a 	srli	r7,r3,16
    8a98:	4abfe936 	bltu	r9,r10,8a40 <__alt_mem_Flash_flash_data+0xf4008a40>
    8a9c:	98c00115 	stw	r3,4(r19)
    8aa0:	31800104 	addi	r6,r6,4
    8aa4:	63000104 	addi	r12,r12,4
    8aa8:	337fbe36 	bltu	r6,r13,89a4 <__alt_mem_Flash_flash_data+0xf40089a4>
    8aac:	0400090e 	bge	zero,r16,8ad4 <__multiply+0x1cc>
    8ab0:	58ffff17 	ldw	r3,-4(r11)
    8ab4:	5affff04 	addi	r11,r11,-4
    8ab8:	18000326 	beq	r3,zero,8ac8 <__multiply+0x1c0>
    8abc:	00000506 	br	8ad4 <__multiply+0x1cc>
    8ac0:	58c00017 	ldw	r3,0(r11)
    8ac4:	1800031e 	bne	r3,zero,8ad4 <__multiply+0x1cc>
    8ac8:	843fffc4 	addi	r16,r16,-1
    8acc:	5affff04 	addi	r11,r11,-4
    8ad0:	803ffb1e 	bne	r16,zero,8ac0 <__alt_mem_Flash_flash_data+0xf4008ac0>
    8ad4:	14000415 	stw	r16,16(r2)
    8ad8:	dfc00517 	ldw	ra,20(sp)
    8adc:	dd000417 	ldw	r20,16(sp)
    8ae0:	dcc00317 	ldw	r19,12(sp)
    8ae4:	dc800217 	ldw	r18,8(sp)
    8ae8:	dc400117 	ldw	r17,4(sp)
    8aec:	dc000017 	ldw	r16,0(sp)
    8af0:	dec00604 	addi	sp,sp,24
    8af4:	f800283a 	ret
    8af8:	3029883a 	mov	r20,r6
    8afc:	2823883a 	mov	r17,r5
    8b00:	003f9006 	br	8944 <__alt_mem_Flash_flash_data+0xf4008944>

00008b04 <__pow5mult>:
    8b04:	defffa04 	addi	sp,sp,-24
    8b08:	dcc00315 	stw	r19,12(sp)
    8b0c:	dc800215 	stw	r18,8(sp)
    8b10:	dc000015 	stw	r16,0(sp)
    8b14:	dfc00515 	stw	ra,20(sp)
    8b18:	dd000415 	stw	r20,16(sp)
    8b1c:	dc400115 	stw	r17,4(sp)
    8b20:	308000cc 	andi	r2,r6,3
    8b24:	3021883a 	mov	r16,r6
    8b28:	2027883a 	mov	r19,r4
    8b2c:	2825883a 	mov	r18,r5
    8b30:	10002e1e 	bne	r2,zero,8bec <__pow5mult+0xe8>
    8b34:	8021d0ba 	srai	r16,r16,2
    8b38:	80001a26 	beq	r16,zero,8ba4 <__pow5mult+0xa0>
    8b3c:	9c401217 	ldw	r17,72(r19)
    8b40:	8800061e 	bne	r17,zero,8b5c <__pow5mult+0x58>
    8b44:	00003406 	br	8c18 <__pow5mult+0x114>
    8b48:	8021d07a 	srai	r16,r16,1
    8b4c:	80001526 	beq	r16,zero,8ba4 <__pow5mult+0xa0>
    8b50:	88800017 	ldw	r2,0(r17)
    8b54:	10001c26 	beq	r2,zero,8bc8 <__pow5mult+0xc4>
    8b58:	1023883a 	mov	r17,r2
    8b5c:	80c0004c 	andi	r3,r16,1
    8b60:	183ff926 	beq	r3,zero,8b48 <__alt_mem_Flash_flash_data+0xf4008b48>
    8b64:	900b883a 	mov	r5,r18
    8b68:	880d883a 	mov	r6,r17
    8b6c:	9809883a 	mov	r4,r19
    8b70:	00089080 	call	8908 <__multiply>
    8b74:	90001b26 	beq	r18,zero,8be4 <__pow5mult+0xe0>
    8b78:	91c00117 	ldw	r7,4(r18)
    8b7c:	98c01317 	ldw	r3,76(r19)
    8b80:	8021d07a 	srai	r16,r16,1
    8b84:	39cf883a 	add	r7,r7,r7
    8b88:	39cf883a 	add	r7,r7,r7
    8b8c:	19c7883a 	add	r3,r3,r7
    8b90:	19000017 	ldw	r4,0(r3)
    8b94:	91000015 	stw	r4,0(r18)
    8b98:	1c800015 	stw	r18,0(r3)
    8b9c:	1025883a 	mov	r18,r2
    8ba0:	803feb1e 	bne	r16,zero,8b50 <__alt_mem_Flash_flash_data+0xf4008b50>
    8ba4:	9005883a 	mov	r2,r18
    8ba8:	dfc00517 	ldw	ra,20(sp)
    8bac:	dd000417 	ldw	r20,16(sp)
    8bb0:	dcc00317 	ldw	r19,12(sp)
    8bb4:	dc800217 	ldw	r18,8(sp)
    8bb8:	dc400117 	ldw	r17,4(sp)
    8bbc:	dc000017 	ldw	r16,0(sp)
    8bc0:	dec00604 	addi	sp,sp,24
    8bc4:	f800283a 	ret
    8bc8:	9809883a 	mov	r4,r19
    8bcc:	880b883a 	mov	r5,r17
    8bd0:	880d883a 	mov	r6,r17
    8bd4:	00089080 	call	8908 <__multiply>
    8bd8:	88800015 	stw	r2,0(r17)
    8bdc:	10000015 	stw	zero,0(r2)
    8be0:	003fdd06 	br	8b58 <__alt_mem_Flash_flash_data+0xf4008b58>
    8be4:	1025883a 	mov	r18,r2
    8be8:	003fd706 	br	8b48 <__alt_mem_Flash_flash_data+0xf4008b48>
    8bec:	10bfffc4 	addi	r2,r2,-1
    8bf0:	1085883a 	add	r2,r2,r2
    8bf4:	00c000b4 	movhi	r3,2
    8bf8:	18c22a04 	addi	r3,r3,2216
    8bfc:	1085883a 	add	r2,r2,r2
    8c00:	1885883a 	add	r2,r3,r2
    8c04:	11800017 	ldw	r6,0(r2)
    8c08:	000f883a 	mov	r7,zero
    8c0c:	00085900 	call	8590 <__multadd>
    8c10:	1025883a 	mov	r18,r2
    8c14:	003fc706 	br	8b34 <__alt_mem_Flash_flash_data+0xf4008b34>
    8c18:	05000044 	movi	r20,1
    8c1c:	9809883a 	mov	r4,r19
    8c20:	a00b883a 	mov	r5,r20
    8c24:	00084c00 	call	84c0 <_Balloc>
    8c28:	1023883a 	mov	r17,r2
    8c2c:	00809c44 	movi	r2,625
    8c30:	88800515 	stw	r2,20(r17)
    8c34:	8d000415 	stw	r20,16(r17)
    8c38:	9c401215 	stw	r17,72(r19)
    8c3c:	88000015 	stw	zero,0(r17)
    8c40:	003fc606 	br	8b5c <__alt_mem_Flash_flash_data+0xf4008b5c>

00008c44 <__lshift>:
    8c44:	defff904 	addi	sp,sp,-28
    8c48:	dd000415 	stw	r20,16(sp)
    8c4c:	dcc00315 	stw	r19,12(sp)
    8c50:	3029d17a 	srai	r20,r6,5
    8c54:	2cc00417 	ldw	r19,16(r5)
    8c58:	28800217 	ldw	r2,8(r5)
    8c5c:	dd400515 	stw	r21,20(sp)
    8c60:	a4e7883a 	add	r19,r20,r19
    8c64:	dc800215 	stw	r18,8(sp)
    8c68:	dc400115 	stw	r17,4(sp)
    8c6c:	dc000015 	stw	r16,0(sp)
    8c70:	dfc00615 	stw	ra,24(sp)
    8c74:	9c000044 	addi	r16,r19,1
    8c78:	2823883a 	mov	r17,r5
    8c7c:	302b883a 	mov	r21,r6
    8c80:	2025883a 	mov	r18,r4
    8c84:	29400117 	ldw	r5,4(r5)
    8c88:	1400030e 	bge	r2,r16,8c98 <__lshift+0x54>
    8c8c:	1085883a 	add	r2,r2,r2
    8c90:	29400044 	addi	r5,r5,1
    8c94:	143ffd16 	blt	r2,r16,8c8c <__alt_mem_Flash_flash_data+0xf4008c8c>
    8c98:	9009883a 	mov	r4,r18
    8c9c:	00084c00 	call	84c0 <_Balloc>
    8ca0:	11c00504 	addi	r7,r2,20
    8ca4:	0500090e 	bge	zero,r20,8ccc <__lshift+0x88>
    8ca8:	3811883a 	mov	r8,r7
    8cac:	0007883a 	mov	r3,zero
    8cb0:	40000015 	stw	zero,0(r8)
    8cb4:	18c00044 	addi	r3,r3,1
    8cb8:	42000104 	addi	r8,r8,4
    8cbc:	1d3ffc1e 	bne	r3,r20,8cb0 <__alt_mem_Flash_flash_data+0xf4008cb0>
    8cc0:	18c7883a 	add	r3,r3,r3
    8cc4:	18c7883a 	add	r3,r3,r3
    8cc8:	38cf883a 	add	r7,r7,r3
    8ccc:	89000417 	ldw	r4,16(r17)
    8cd0:	88c00504 	addi	r3,r17,20
    8cd4:	a98007cc 	andi	r6,r21,31
    8cd8:	2109883a 	add	r4,r4,r4
    8cdc:	2109883a 	add	r4,r4,r4
    8ce0:	1909883a 	add	r4,r3,r4
    8ce4:	30002326 	beq	r6,zero,8d74 <__lshift+0x130>
    8ce8:	01400804 	movi	r5,32
    8cec:	298bc83a 	sub	r5,r5,r6
    8cf0:	0013883a 	mov	r9,zero
    8cf4:	1a000017 	ldw	r8,0(r3)
    8cf8:	3815883a 	mov	r10,r7
    8cfc:	39c00104 	addi	r7,r7,4
    8d00:	4190983a 	sll	r8,r8,r6
    8d04:	18c00104 	addi	r3,r3,4
    8d08:	4a10b03a 	or	r8,r9,r8
    8d0c:	3a3fff15 	stw	r8,-4(r7)
    8d10:	1a3fff17 	ldw	r8,-4(r3)
    8d14:	4152d83a 	srl	r9,r8,r5
    8d18:	193ff636 	bltu	r3,r4,8cf4 <__alt_mem_Flash_flash_data+0xf4008cf4>
    8d1c:	52400115 	stw	r9,4(r10)
    8d20:	48001a1e 	bne	r9,zero,8d8c <__lshift+0x148>
    8d24:	843fffc4 	addi	r16,r16,-1
    8d28:	14000415 	stw	r16,16(r2)
    8d2c:	88000826 	beq	r17,zero,8d50 <__lshift+0x10c>
    8d30:	89000117 	ldw	r4,4(r17)
    8d34:	90c01317 	ldw	r3,76(r18)
    8d38:	2109883a 	add	r4,r4,r4
    8d3c:	2109883a 	add	r4,r4,r4
    8d40:	1907883a 	add	r3,r3,r4
    8d44:	19000017 	ldw	r4,0(r3)
    8d48:	89000015 	stw	r4,0(r17)
    8d4c:	1c400015 	stw	r17,0(r3)
    8d50:	dfc00617 	ldw	ra,24(sp)
    8d54:	dd400517 	ldw	r21,20(sp)
    8d58:	dd000417 	ldw	r20,16(sp)
    8d5c:	dcc00317 	ldw	r19,12(sp)
    8d60:	dc800217 	ldw	r18,8(sp)
    8d64:	dc400117 	ldw	r17,4(sp)
    8d68:	dc000017 	ldw	r16,0(sp)
    8d6c:	dec00704 	addi	sp,sp,28
    8d70:	f800283a 	ret
    8d74:	19400017 	ldw	r5,0(r3)
    8d78:	39c00104 	addi	r7,r7,4
    8d7c:	18c00104 	addi	r3,r3,4
    8d80:	397fff15 	stw	r5,-4(r7)
    8d84:	193ffb36 	bltu	r3,r4,8d74 <__alt_mem_Flash_flash_data+0xf4008d74>
    8d88:	003fe606 	br	8d24 <__alt_mem_Flash_flash_data+0xf4008d24>
    8d8c:	9c000084 	addi	r16,r19,2
    8d90:	003fe406 	br	8d24 <__alt_mem_Flash_flash_data+0xf4008d24>

00008d94 <__mcmp>:
    8d94:	20800417 	ldw	r2,16(r4)
    8d98:	28c00417 	ldw	r3,16(r5)
    8d9c:	10c5c83a 	sub	r2,r2,r3
    8da0:	1000111e 	bne	r2,zero,8de8 <__mcmp+0x54>
    8da4:	18c7883a 	add	r3,r3,r3
    8da8:	18c7883a 	add	r3,r3,r3
    8dac:	21000504 	addi	r4,r4,20
    8db0:	29400504 	addi	r5,r5,20
    8db4:	20c5883a 	add	r2,r4,r3
    8db8:	28cb883a 	add	r5,r5,r3
    8dbc:	00000106 	br	8dc4 <__mcmp+0x30>
    8dc0:	20800a2e 	bgeu	r4,r2,8dec <__mcmp+0x58>
    8dc4:	10bfff04 	addi	r2,r2,-4
    8dc8:	297fff04 	addi	r5,r5,-4
    8dcc:	11800017 	ldw	r6,0(r2)
    8dd0:	28c00017 	ldw	r3,0(r5)
    8dd4:	30fffa26 	beq	r6,r3,8dc0 <__alt_mem_Flash_flash_data+0xf4008dc0>
    8dd8:	30c00236 	bltu	r6,r3,8de4 <__mcmp+0x50>
    8ddc:	00800044 	movi	r2,1
    8de0:	f800283a 	ret
    8de4:	00bfffc4 	movi	r2,-1
    8de8:	f800283a 	ret
    8dec:	0005883a 	mov	r2,zero
    8df0:	f800283a 	ret

00008df4 <__mdiff>:
    8df4:	defffb04 	addi	sp,sp,-20
    8df8:	dc000015 	stw	r16,0(sp)
    8dfc:	2821883a 	mov	r16,r5
    8e00:	dcc00315 	stw	r19,12(sp)
    8e04:	300b883a 	mov	r5,r6
    8e08:	2027883a 	mov	r19,r4
    8e0c:	8009883a 	mov	r4,r16
    8e10:	dc800215 	stw	r18,8(sp)
    8e14:	dfc00415 	stw	ra,16(sp)
    8e18:	dc400115 	stw	r17,4(sp)
    8e1c:	3025883a 	mov	r18,r6
    8e20:	0008d940 	call	8d94 <__mcmp>
    8e24:	10005226 	beq	r2,zero,8f70 <__mdiff+0x17c>
    8e28:	10004c16 	blt	r2,zero,8f5c <__mdiff+0x168>
    8e2c:	0023883a 	mov	r17,zero
    8e30:	81400117 	ldw	r5,4(r16)
    8e34:	9809883a 	mov	r4,r19
    8e38:	00084c00 	call	84c0 <_Balloc>
    8e3c:	83400417 	ldw	r13,16(r16)
    8e40:	93800417 	ldw	r14,16(r18)
    8e44:	81000504 	addi	r4,r16,20
    8e48:	6b59883a 	add	r12,r13,r13
    8e4c:	739d883a 	add	r14,r14,r14
    8e50:	6319883a 	add	r12,r12,r12
    8e54:	91800504 	addi	r6,r18,20
    8e58:	739d883a 	add	r14,r14,r14
    8e5c:	14400315 	stw	r17,12(r2)
    8e60:	2319883a 	add	r12,r4,r12
    8e64:	339d883a 	add	r14,r6,r14
    8e68:	12400504 	addi	r9,r2,20
    8e6c:	0007883a 	mov	r3,zero
    8e70:	22000017 	ldw	r8,0(r4)
    8e74:	32800017 	ldw	r10,0(r6)
    8e78:	4ac00104 	addi	r11,r9,4
    8e7c:	41ffffcc 	andi	r7,r8,65535
    8e80:	38c7883a 	add	r3,r7,r3
    8e84:	51ffffcc 	andi	r7,r10,65535
    8e88:	19cfc83a 	sub	r7,r3,r7
    8e8c:	4010d43a 	srli	r8,r8,16
    8e90:	5014d43a 	srli	r10,r10,16
    8e94:	3807d43a 	srai	r3,r7,16
    8e98:	39ffffcc 	andi	r7,r7,65535
    8e9c:	4291c83a 	sub	r8,r8,r10
    8ea0:	40c7883a 	add	r3,r8,r3
    8ea4:	1810943a 	slli	r8,r3,16
    8ea8:	31800104 	addi	r6,r6,4
    8eac:	21000104 	addi	r4,r4,4
    8eb0:	41ceb03a 	or	r7,r8,r7
    8eb4:	49c00015 	stw	r7,0(r9)
    8eb8:	1807d43a 	srai	r3,r3,16
    8ebc:	580b883a 	mov	r5,r11
    8ec0:	5813883a 	mov	r9,r11
    8ec4:	33bfea36 	bltu	r6,r14,8e70 <__alt_mem_Flash_flash_data+0xf4008e70>
    8ec8:	2011883a 	mov	r8,r4
    8ecc:	2300152e 	bgeu	r4,r12,8f24 <__mdiff+0x130>
    8ed0:	21400017 	ldw	r5,0(r4)
    8ed4:	4a400104 	addi	r9,r9,4
    8ed8:	21000104 	addi	r4,r4,4
    8edc:	29ffffcc 	andi	r7,r5,65535
    8ee0:	38c7883a 	add	r3,r7,r3
    8ee4:	280ad43a 	srli	r5,r5,16
    8ee8:	180dd43a 	srai	r6,r3,16
    8eec:	19ffffcc 	andi	r7,r3,65535
    8ef0:	3147883a 	add	r3,r6,r5
    8ef4:	180a943a 	slli	r5,r3,16
    8ef8:	1807d43a 	srai	r3,r3,16
    8efc:	29ceb03a 	or	r7,r5,r7
    8f00:	49ffff15 	stw	r7,-4(r9)
    8f04:	233ff236 	bltu	r4,r12,8ed0 <__alt_mem_Flash_flash_data+0xf4008ed0>
    8f08:	0206303a 	nor	r3,zero,r8
    8f0c:	1b07883a 	add	r3,r3,r12
    8f10:	1806d0ba 	srli	r3,r3,2
    8f14:	18c00044 	addi	r3,r3,1
    8f18:	18c7883a 	add	r3,r3,r3
    8f1c:	18c7883a 	add	r3,r3,r3
    8f20:	58cb883a 	add	r5,r11,r3
    8f24:	28ffff04 	addi	r3,r5,-4
    8f28:	3800041e 	bne	r7,zero,8f3c <__mdiff+0x148>
    8f2c:	18ffff04 	addi	r3,r3,-4
    8f30:	19000017 	ldw	r4,0(r3)
    8f34:	6b7fffc4 	addi	r13,r13,-1
    8f38:	203ffc26 	beq	r4,zero,8f2c <__alt_mem_Flash_flash_data+0xf4008f2c>
    8f3c:	13400415 	stw	r13,16(r2)
    8f40:	dfc00417 	ldw	ra,16(sp)
    8f44:	dcc00317 	ldw	r19,12(sp)
    8f48:	dc800217 	ldw	r18,8(sp)
    8f4c:	dc400117 	ldw	r17,4(sp)
    8f50:	dc000017 	ldw	r16,0(sp)
    8f54:	dec00504 	addi	sp,sp,20
    8f58:	f800283a 	ret
    8f5c:	8005883a 	mov	r2,r16
    8f60:	04400044 	movi	r17,1
    8f64:	9021883a 	mov	r16,r18
    8f68:	1025883a 	mov	r18,r2
    8f6c:	003fb006 	br	8e30 <__alt_mem_Flash_flash_data+0xf4008e30>
    8f70:	9809883a 	mov	r4,r19
    8f74:	000b883a 	mov	r5,zero
    8f78:	00084c00 	call	84c0 <_Balloc>
    8f7c:	00c00044 	movi	r3,1
    8f80:	10c00415 	stw	r3,16(r2)
    8f84:	10000515 	stw	zero,20(r2)
    8f88:	003fed06 	br	8f40 <__alt_mem_Flash_flash_data+0xf4008f40>

00008f8c <__ulp>:
    8f8c:	295ffc2c 	andhi	r5,r5,32752
    8f90:	00bf3034 	movhi	r2,64704
    8f94:	2887883a 	add	r3,r5,r2
    8f98:	00c0020e 	bge	zero,r3,8fa4 <__ulp+0x18>
    8f9c:	0005883a 	mov	r2,zero
    8fa0:	f800283a 	ret
    8fa4:	00c7c83a 	sub	r3,zero,r3
    8fa8:	180bd53a 	srai	r5,r3,20
    8fac:	008004c4 	movi	r2,19
    8fb0:	11400a0e 	bge	r2,r5,8fdc <__ulp+0x50>
    8fb4:	00800c84 	movi	r2,50
    8fb8:	0007883a 	mov	r3,zero
    8fbc:	11400516 	blt	r2,r5,8fd4 <__ulp+0x48>
    8fc0:	00800cc4 	movi	r2,51
    8fc4:	114bc83a 	sub	r5,r2,r5
    8fc8:	00800044 	movi	r2,1
    8fcc:	1144983a 	sll	r2,r2,r5
    8fd0:	f800283a 	ret
    8fd4:	00800044 	movi	r2,1
    8fd8:	f800283a 	ret
    8fdc:	00800234 	movhi	r2,8
    8fe0:	1147d83a 	sra	r3,r2,r5
    8fe4:	0005883a 	mov	r2,zero
    8fe8:	f800283a 	ret

00008fec <__b2d>:
    8fec:	defffa04 	addi	sp,sp,-24
    8ff0:	dc000015 	stw	r16,0(sp)
    8ff4:	24000417 	ldw	r16,16(r4)
    8ff8:	dc400115 	stw	r17,4(sp)
    8ffc:	24400504 	addi	r17,r4,20
    9000:	8421883a 	add	r16,r16,r16
    9004:	8421883a 	add	r16,r16,r16
    9008:	8c21883a 	add	r16,r17,r16
    900c:	dc800215 	stw	r18,8(sp)
    9010:	84bfff17 	ldw	r18,-4(r16)
    9014:	dd000415 	stw	r20,16(sp)
    9018:	dcc00315 	stw	r19,12(sp)
    901c:	9009883a 	mov	r4,r18
    9020:	2829883a 	mov	r20,r5
    9024:	dfc00515 	stw	ra,20(sp)
    9028:	00087b40 	call	87b4 <__hi0bits>
    902c:	00c00804 	movi	r3,32
    9030:	1887c83a 	sub	r3,r3,r2
    9034:	a0c00015 	stw	r3,0(r20)
    9038:	00c00284 	movi	r3,10
    903c:	84ffff04 	addi	r19,r16,-4
    9040:	18801216 	blt	r3,r2,908c <__b2d+0xa0>
    9044:	014002c4 	movi	r5,11
    9048:	2889c83a 	sub	r4,r5,r2
    904c:	9106d83a 	srl	r3,r18,r4
    9050:	18cffc34 	orhi	r3,r3,16368
    9054:	8cc0282e 	bgeu	r17,r19,90f8 <__b2d+0x10c>
    9058:	817ffe17 	ldw	r5,-8(r16)
    905c:	290ad83a 	srl	r5,r5,r4
    9060:	10800544 	addi	r2,r2,21
    9064:	9084983a 	sll	r2,r18,r2
    9068:	2884b03a 	or	r2,r5,r2
    906c:	dfc00517 	ldw	ra,20(sp)
    9070:	dd000417 	ldw	r20,16(sp)
    9074:	dcc00317 	ldw	r19,12(sp)
    9078:	dc800217 	ldw	r18,8(sp)
    907c:	dc400117 	ldw	r17,4(sp)
    9080:	dc000017 	ldw	r16,0(sp)
    9084:	dec00604 	addi	sp,sp,24
    9088:	f800283a 	ret
    908c:	113ffd44 	addi	r4,r2,-11
    9090:	8cc00f2e 	bgeu	r17,r19,90d0 <__b2d+0xe4>
    9094:	81bffe04 	addi	r6,r16,-8
    9098:	817ffe17 	ldw	r5,-8(r16)
    909c:	20001326 	beq	r4,zero,90ec <__b2d+0x100>
    90a0:	00c00ac4 	movi	r3,43
    90a4:	1885c83a 	sub	r2,r3,r2
    90a8:	2886d83a 	srl	r3,r5,r2
    90ac:	9124983a 	sll	r18,r18,r4
    90b0:	90e4b03a 	or	r18,r18,r3
    90b4:	90cffc34 	orhi	r3,r18,16368
    90b8:	8980112e 	bgeu	r17,r6,9100 <__b2d+0x114>
    90bc:	81bffd17 	ldw	r6,-12(r16)
    90c0:	308cd83a 	srl	r6,r6,r2
    90c4:	2904983a 	sll	r2,r5,r4
    90c8:	1184b03a 	or	r2,r2,r6
    90cc:	003fe706 	br	906c <__alt_mem_Flash_flash_data+0xf400906c>
    90d0:	20000526 	beq	r4,zero,90e8 <__b2d+0xfc>
    90d4:	9124983a 	sll	r18,r18,r4
    90d8:	000d883a 	mov	r6,zero
    90dc:	000b883a 	mov	r5,zero
    90e0:	90cffc34 	orhi	r3,r18,16368
    90e4:	003ff706 	br	90c4 <__alt_mem_Flash_flash_data+0xf40090c4>
    90e8:	000b883a 	mov	r5,zero
    90ec:	90cffc34 	orhi	r3,r18,16368
    90f0:	2805883a 	mov	r2,r5
    90f4:	003fdd06 	br	906c <__alt_mem_Flash_flash_data+0xf400906c>
    90f8:	000b883a 	mov	r5,zero
    90fc:	003fd806 	br	9060 <__alt_mem_Flash_flash_data+0xf4009060>
    9100:	000d883a 	mov	r6,zero
    9104:	003fef06 	br	90c4 <__alt_mem_Flash_flash_data+0xf40090c4>

00009108 <__d2b>:
    9108:	defff704 	addi	sp,sp,-36
    910c:	dc000215 	stw	r16,8(sp)
    9110:	3021883a 	mov	r16,r6
    9114:	dc400315 	stw	r17,12(sp)
    9118:	8022907a 	slli	r17,r16,1
    911c:	dd400715 	stw	r21,28(sp)
    9120:	282b883a 	mov	r21,r5
    9124:	01400044 	movi	r5,1
    9128:	dd000615 	stw	r20,24(sp)
    912c:	dcc00515 	stw	r19,20(sp)
    9130:	dc800415 	stw	r18,16(sp)
    9134:	dfc00815 	stw	ra,32(sp)
    9138:	3829883a 	mov	r20,r7
    913c:	dc800917 	ldw	r18,36(sp)
    9140:	8822d57a 	srli	r17,r17,21
    9144:	00084c00 	call	84c0 <_Balloc>
    9148:	1027883a 	mov	r19,r2
    914c:	00800434 	movhi	r2,16
    9150:	10bfffc4 	addi	r2,r2,-1
    9154:	808c703a 	and	r6,r16,r2
    9158:	88000126 	beq	r17,zero,9160 <__d2b+0x58>
    915c:	31800434 	orhi	r6,r6,16
    9160:	d9800015 	stw	r6,0(sp)
    9164:	a8001f26 	beq	r21,zero,91e4 <__d2b+0xdc>
    9168:	d9000104 	addi	r4,sp,4
    916c:	dd400115 	stw	r21,4(sp)
    9170:	000881c0 	call	881c <__lo0bits>
    9174:	d8c00017 	ldw	r3,0(sp)
    9178:	1000291e 	bne	r2,zero,9220 <__d2b+0x118>
    917c:	d9000117 	ldw	r4,4(sp)
    9180:	99000515 	stw	r4,20(r19)
    9184:	1820c03a 	cmpne	r16,r3,zero
    9188:	84000044 	addi	r16,r16,1
    918c:	98c00615 	stw	r3,24(r19)
    9190:	9c000415 	stw	r16,16(r19)
    9194:	88001b1e 	bne	r17,zero,9204 <__d2b+0xfc>
    9198:	800690ba 	slli	r3,r16,2
    919c:	10bef384 	addi	r2,r2,-1074
    91a0:	a0800015 	stw	r2,0(r20)
    91a4:	98c5883a 	add	r2,r19,r3
    91a8:	11000417 	ldw	r4,16(r2)
    91ac:	8020917a 	slli	r16,r16,5
    91b0:	00087b40 	call	87b4 <__hi0bits>
    91b4:	8085c83a 	sub	r2,r16,r2
    91b8:	90800015 	stw	r2,0(r18)
    91bc:	9805883a 	mov	r2,r19
    91c0:	dfc00817 	ldw	ra,32(sp)
    91c4:	dd400717 	ldw	r21,28(sp)
    91c8:	dd000617 	ldw	r20,24(sp)
    91cc:	dcc00517 	ldw	r19,20(sp)
    91d0:	dc800417 	ldw	r18,16(sp)
    91d4:	dc400317 	ldw	r17,12(sp)
    91d8:	dc000217 	ldw	r16,8(sp)
    91dc:	dec00904 	addi	sp,sp,36
    91e0:	f800283a 	ret
    91e4:	d809883a 	mov	r4,sp
    91e8:	000881c0 	call	881c <__lo0bits>
    91ec:	d8c00017 	ldw	r3,0(sp)
    91f0:	04000044 	movi	r16,1
    91f4:	9c000415 	stw	r16,16(r19)
    91f8:	98c00515 	stw	r3,20(r19)
    91fc:	10800804 	addi	r2,r2,32
    9200:	883fe526 	beq	r17,zero,9198 <__alt_mem_Flash_flash_data+0xf4009198>
    9204:	8c7ef344 	addi	r17,r17,-1075
    9208:	88a3883a 	add	r17,r17,r2
    920c:	00c00d44 	movi	r3,53
    9210:	a4400015 	stw	r17,0(r20)
    9214:	1885c83a 	sub	r2,r3,r2
    9218:	90800015 	stw	r2,0(r18)
    921c:	003fe706 	br	91bc <__alt_mem_Flash_flash_data+0xf40091bc>
    9220:	01000804 	movi	r4,32
    9224:	2089c83a 	sub	r4,r4,r2
    9228:	1908983a 	sll	r4,r3,r4
    922c:	d9400117 	ldw	r5,4(sp)
    9230:	1886d83a 	srl	r3,r3,r2
    9234:	2148b03a 	or	r4,r4,r5
    9238:	99000515 	stw	r4,20(r19)
    923c:	d8c00015 	stw	r3,0(sp)
    9240:	003fd006 	br	9184 <__alt_mem_Flash_flash_data+0xf4009184>

00009244 <__ratio>:
    9244:	defff904 	addi	sp,sp,-28
    9248:	dc400315 	stw	r17,12(sp)
    924c:	2823883a 	mov	r17,r5
    9250:	d9400104 	addi	r5,sp,4
    9254:	dfc00615 	stw	ra,24(sp)
    9258:	dcc00515 	stw	r19,20(sp)
    925c:	dc800415 	stw	r18,16(sp)
    9260:	2027883a 	mov	r19,r4
    9264:	dc000215 	stw	r16,8(sp)
    9268:	0008fec0 	call	8fec <__b2d>
    926c:	8809883a 	mov	r4,r17
    9270:	d80b883a 	mov	r5,sp
    9274:	1025883a 	mov	r18,r2
    9278:	1821883a 	mov	r16,r3
    927c:	0008fec0 	call	8fec <__b2d>
    9280:	8a400417 	ldw	r9,16(r17)
    9284:	9a000417 	ldw	r8,16(r19)
    9288:	100d883a 	mov	r6,r2
    928c:	d8800017 	ldw	r2,0(sp)
    9290:	4251c83a 	sub	r8,r8,r9
    9294:	4012917a 	slli	r9,r8,5
    9298:	da000117 	ldw	r8,4(sp)
    929c:	4091c83a 	sub	r8,r8,r2
    92a0:	4251883a 	add	r8,r8,r9
    92a4:	02000d0e 	bge	zero,r8,92dc <__ratio+0x98>
    92a8:	4010953a 	slli	r8,r8,20
    92ac:	4421883a 	add	r16,r8,r16
    92b0:	9009883a 	mov	r4,r18
    92b4:	800b883a 	mov	r5,r16
    92b8:	180f883a 	mov	r7,r3
    92bc:	000e0f40 	call	e0f4 <__divdf3>
    92c0:	dfc00617 	ldw	ra,24(sp)
    92c4:	dcc00517 	ldw	r19,20(sp)
    92c8:	dc800417 	ldw	r18,16(sp)
    92cc:	dc400317 	ldw	r17,12(sp)
    92d0:	dc000217 	ldw	r16,8(sp)
    92d4:	dec00704 	addi	sp,sp,28
    92d8:	f800283a 	ret
    92dc:	4010953a 	slli	r8,r8,20
    92e0:	1a07c83a 	sub	r3,r3,r8
    92e4:	003ff206 	br	92b0 <__alt_mem_Flash_flash_data+0xf40092b0>

000092e8 <_mprec_log10>:
    92e8:	defffe04 	addi	sp,sp,-8
    92ec:	dc000015 	stw	r16,0(sp)
    92f0:	dfc00115 	stw	ra,4(sp)
    92f4:	008005c4 	movi	r2,23
    92f8:	2021883a 	mov	r16,r4
    92fc:	11000d0e 	bge	r2,r4,9334 <_mprec_log10+0x4c>
    9300:	0005883a 	mov	r2,zero
    9304:	00cffc34 	movhi	r3,16368
    9308:	843fffc4 	addi	r16,r16,-1
    930c:	1009883a 	mov	r4,r2
    9310:	180b883a 	mov	r5,r3
    9314:	000d883a 	mov	r6,zero
    9318:	01d00934 	movhi	r7,16420
    931c:	000ec040 	call	ec04 <__muldf3>
    9320:	803ff91e 	bne	r16,zero,9308 <__alt_mem_Flash_flash_data+0xf4009308>
    9324:	dfc00117 	ldw	ra,4(sp)
    9328:	dc000017 	ldw	r16,0(sp)
    932c:	dec00204 	addi	sp,sp,8
    9330:	f800283a 	ret
    9334:	202090fa 	slli	r16,r4,3
    9338:	008000b4 	movhi	r2,2
    933c:	10824104 	addi	r2,r2,2308
    9340:	1421883a 	add	r16,r2,r16
    9344:	80800017 	ldw	r2,0(r16)
    9348:	80c00117 	ldw	r3,4(r16)
    934c:	dfc00117 	ldw	ra,4(sp)
    9350:	dc000017 	ldw	r16,0(sp)
    9354:	dec00204 	addi	sp,sp,8
    9358:	f800283a 	ret

0000935c <__copybits>:
    935c:	297fffc4 	addi	r5,r5,-1
    9360:	280fd17a 	srai	r7,r5,5
    9364:	30c00417 	ldw	r3,16(r6)
    9368:	30800504 	addi	r2,r6,20
    936c:	39c00044 	addi	r7,r7,1
    9370:	18c7883a 	add	r3,r3,r3
    9374:	39cf883a 	add	r7,r7,r7
    9378:	18c7883a 	add	r3,r3,r3
    937c:	39cf883a 	add	r7,r7,r7
    9380:	10c7883a 	add	r3,r2,r3
    9384:	21cf883a 	add	r7,r4,r7
    9388:	10c00d2e 	bgeu	r2,r3,93c0 <__copybits+0x64>
    938c:	200b883a 	mov	r5,r4
    9390:	12000017 	ldw	r8,0(r2)
    9394:	29400104 	addi	r5,r5,4
    9398:	10800104 	addi	r2,r2,4
    939c:	2a3fff15 	stw	r8,-4(r5)
    93a0:	10fffb36 	bltu	r2,r3,9390 <__alt_mem_Flash_flash_data+0xf4009390>
    93a4:	1985c83a 	sub	r2,r3,r6
    93a8:	10bffac4 	addi	r2,r2,-21
    93ac:	1004d0ba 	srli	r2,r2,2
    93b0:	10800044 	addi	r2,r2,1
    93b4:	1085883a 	add	r2,r2,r2
    93b8:	1085883a 	add	r2,r2,r2
    93bc:	2089883a 	add	r4,r4,r2
    93c0:	21c0032e 	bgeu	r4,r7,93d0 <__copybits+0x74>
    93c4:	20000015 	stw	zero,0(r4)
    93c8:	21000104 	addi	r4,r4,4
    93cc:	21fffd36 	bltu	r4,r7,93c4 <__alt_mem_Flash_flash_data+0xf40093c4>
    93d0:	f800283a 	ret

000093d4 <__any_on>:
    93d4:	20c00417 	ldw	r3,16(r4)
    93d8:	2805d17a 	srai	r2,r5,5
    93dc:	21000504 	addi	r4,r4,20
    93e0:	18800d0e 	bge	r3,r2,9418 <__any_on+0x44>
    93e4:	18c7883a 	add	r3,r3,r3
    93e8:	18c7883a 	add	r3,r3,r3
    93ec:	20c7883a 	add	r3,r4,r3
    93f0:	20c0192e 	bgeu	r4,r3,9458 <__any_on+0x84>
    93f4:	18bfff17 	ldw	r2,-4(r3)
    93f8:	18ffff04 	addi	r3,r3,-4
    93fc:	1000041e 	bne	r2,zero,9410 <__any_on+0x3c>
    9400:	20c0142e 	bgeu	r4,r3,9454 <__any_on+0x80>
    9404:	18ffff04 	addi	r3,r3,-4
    9408:	19400017 	ldw	r5,0(r3)
    940c:	283ffc26 	beq	r5,zero,9400 <__alt_mem_Flash_flash_data+0xf4009400>
    9410:	00800044 	movi	r2,1
    9414:	f800283a 	ret
    9418:	10c00a0e 	bge	r2,r3,9444 <__any_on+0x70>
    941c:	1085883a 	add	r2,r2,r2
    9420:	1085883a 	add	r2,r2,r2
    9424:	294007cc 	andi	r5,r5,31
    9428:	2087883a 	add	r3,r4,r2
    942c:	283ff026 	beq	r5,zero,93f0 <__alt_mem_Flash_flash_data+0xf40093f0>
    9430:	19800017 	ldw	r6,0(r3)
    9434:	3144d83a 	srl	r2,r6,r5
    9438:	114a983a 	sll	r5,r2,r5
    943c:	29bff41e 	bne	r5,r6,9410 <__alt_mem_Flash_flash_data+0xf4009410>
    9440:	003feb06 	br	93f0 <__alt_mem_Flash_flash_data+0xf40093f0>
    9444:	1085883a 	add	r2,r2,r2
    9448:	1085883a 	add	r2,r2,r2
    944c:	2087883a 	add	r3,r4,r2
    9450:	003fe706 	br	93f0 <__alt_mem_Flash_flash_data+0xf40093f0>
    9454:	f800283a 	ret
    9458:	0005883a 	mov	r2,zero
    945c:	f800283a 	ret

00009460 <_realloc_r>:
    9460:	defff604 	addi	sp,sp,-40
    9464:	dd000415 	stw	r20,16(sp)
    9468:	dc400115 	stw	r17,4(sp)
    946c:	dfc00915 	stw	ra,36(sp)
    9470:	df000815 	stw	fp,32(sp)
    9474:	ddc00715 	stw	r23,28(sp)
    9478:	dd800615 	stw	r22,24(sp)
    947c:	dd400515 	stw	r21,20(sp)
    9480:	dcc00315 	stw	r19,12(sp)
    9484:	dc800215 	stw	r18,8(sp)
    9488:	dc000015 	stw	r16,0(sp)
    948c:	2829883a 	mov	r20,r5
    9490:	3023883a 	mov	r17,r6
    9494:	2800ad26 	beq	r5,zero,974c <_realloc_r+0x2ec>
    9498:	2025883a 	mov	r18,r4
    949c:	00109340 	call	10934 <__malloc_lock>
    94a0:	a0ffff17 	ldw	r3,-4(r20)
    94a4:	043fff04 	movi	r16,-4
    94a8:	890002c4 	addi	r4,r17,11
    94ac:	01c00584 	movi	r7,22
    94b0:	a57ffe04 	addi	r21,r20,-8
    94b4:	1c20703a 	and	r16,r3,r16
    94b8:	39001d2e 	bgeu	r7,r4,9530 <_realloc_r+0xd0>
    94bc:	05bffe04 	movi	r22,-8
    94c0:	25ac703a 	and	r22,r4,r22
    94c4:	b00f883a 	mov	r7,r22
    94c8:	b0006516 	blt	r22,zero,9660 <_realloc_r+0x200>
    94cc:	b4406436 	bltu	r22,r17,9660 <_realloc_r+0x200>
    94d0:	81c01a0e 	bge	r16,r7,953c <_realloc_r+0xdc>
    94d4:	070000b4 	movhi	fp,2
    94d8:	e7037e04 	addi	fp,fp,3576
    94dc:	e1400217 	ldw	r5,8(fp)
    94e0:	ac11883a 	add	r8,r21,r16
    94e4:	2a006226 	beq	r5,r8,9670 <_realloc_r+0x210>
    94e8:	41800117 	ldw	r6,4(r8)
    94ec:	027fff84 	movi	r9,-2
    94f0:	3252703a 	and	r9,r6,r9
    94f4:	4253883a 	add	r9,r8,r9
    94f8:	49000117 	ldw	r4,4(r9)
    94fc:	2100004c 	andi	r4,r4,1
    9500:	2000281e 	bne	r4,zero,95a4 <_realloc_r+0x144>
    9504:	00bfff04 	movi	r2,-4
    9508:	3084703a 	and	r2,r6,r2
    950c:	1409883a 	add	r4,r2,r16
    9510:	21c05e16 	blt	r4,r7,968c <_realloc_r+0x22c>
    9514:	40800317 	ldw	r2,12(r8)
    9518:	41400217 	ldw	r5,8(r8)
    951c:	a023883a 	mov	r17,r20
    9520:	2021883a 	mov	r16,r4
    9524:	28800315 	stw	r2,12(r5)
    9528:	11400215 	stw	r5,8(r2)
    952c:	00000406 	br	9540 <_realloc_r+0xe0>
    9530:	01c00404 	movi	r7,16
    9534:	382d883a 	mov	r22,r7
    9538:	003fe406 	br	94cc <__alt_mem_Flash_flash_data+0xf40094cc>
    953c:	a023883a 	mov	r17,r20
    9540:	858fc83a 	sub	r7,r16,r22
    9544:	008003c4 	movi	r2,15
    9548:	18c0004c 	andi	r3,r3,1
    954c:	11c07236 	bltu	r2,r7,9718 <_realloc_r+0x2b8>
    9550:	1c06b03a 	or	r3,r3,r16
    9554:	a8c00115 	stw	r3,4(r21)
    9558:	ac21883a 	add	r16,r21,r16
    955c:	80800117 	ldw	r2,4(r16)
    9560:	10800054 	ori	r2,r2,1
    9564:	80800115 	stw	r2,4(r16)
    9568:	9009883a 	mov	r4,r18
    956c:	0010a540 	call	10a54 <__malloc_unlock>
    9570:	8805883a 	mov	r2,r17
    9574:	dfc00917 	ldw	ra,36(sp)
    9578:	df000817 	ldw	fp,32(sp)
    957c:	ddc00717 	ldw	r23,28(sp)
    9580:	dd800617 	ldw	r22,24(sp)
    9584:	dd400517 	ldw	r21,20(sp)
    9588:	dd000417 	ldw	r20,16(sp)
    958c:	dcc00317 	ldw	r19,12(sp)
    9590:	dc800217 	ldw	r18,8(sp)
    9594:	dc400117 	ldw	r17,4(sp)
    9598:	dc000017 	ldw	r16,0(sp)
    959c:	dec00a04 	addi	sp,sp,40
    95a0:	f800283a 	ret
    95a4:	18c0004c 	andi	r3,r3,1
    95a8:	1800081e 	bne	r3,zero,95cc <_realloc_r+0x16c>
    95ac:	a4fffe17 	ldw	r19,-8(r20)
    95b0:	00bfff04 	movi	r2,-4
    95b4:	ace7c83a 	sub	r19,r21,r19
    95b8:	98c00117 	ldw	r3,4(r19)
    95bc:	1886703a 	and	r3,r3,r2
    95c0:	98000226 	beq	r19,zero,95cc <_realloc_r+0x16c>
    95c4:	1c2f883a 	add	r23,r3,r16
    95c8:	b9c06d0e 	bge	r23,r7,9780 <_realloc_r+0x320>
    95cc:	880b883a 	mov	r5,r17
    95d0:	9009883a 	mov	r4,r18
    95d4:	00007280 	call	728 <_malloc_r>
    95d8:	1023883a 	mov	r17,r2
    95dc:	1000ef26 	beq	r2,zero,999c <_realloc_r+0x53c>
    95e0:	a0ffff17 	ldw	r3,-4(r20)
    95e4:	113ffe04 	addi	r4,r2,-8
    95e8:	00bfff84 	movi	r2,-2
    95ec:	1884703a 	and	r2,r3,r2
    95f0:	a885883a 	add	r2,r21,r2
    95f4:	2080bf26 	beq	r4,r2,98f4 <_realloc_r+0x494>
    95f8:	81bfff04 	addi	r6,r16,-4
    95fc:	00800904 	movi	r2,36
    9600:	11808936 	bltu	r2,r6,9828 <_realloc_r+0x3c8>
    9604:	00c004c4 	movi	r3,19
    9608:	19806c2e 	bgeu	r3,r6,97bc <_realloc_r+0x35c>
    960c:	a0c00017 	ldw	r3,0(r20)
    9610:	88c00015 	stw	r3,0(r17)
    9614:	a0c00117 	ldw	r3,4(r20)
    9618:	88c00115 	stw	r3,4(r17)
    961c:	00c006c4 	movi	r3,27
    9620:	1980ac36 	bltu	r3,r6,98d4 <_realloc_r+0x474>
    9624:	88800204 	addi	r2,r17,8
    9628:	a0c00204 	addi	r3,r20,8
    962c:	19000017 	ldw	r4,0(r3)
    9630:	11000015 	stw	r4,0(r2)
    9634:	19000117 	ldw	r4,4(r3)
    9638:	11000115 	stw	r4,4(r2)
    963c:	18c00217 	ldw	r3,8(r3)
    9640:	10c00215 	stw	r3,8(r2)
    9644:	a00b883a 	mov	r5,r20
    9648:	9009883a 	mov	r4,r18
    964c:	00074500 	call	7450 <_free_r>
    9650:	9009883a 	mov	r4,r18
    9654:	0010a540 	call	10a54 <__malloc_unlock>
    9658:	8805883a 	mov	r2,r17
    965c:	003fc506 	br	9574 <__alt_mem_Flash_flash_data+0xf4009574>
    9660:	00800304 	movi	r2,12
    9664:	90800015 	stw	r2,0(r18)
    9668:	0005883a 	mov	r2,zero
    966c:	003fc106 	br	9574 <__alt_mem_Flash_flash_data+0xf4009574>
    9670:	29800117 	ldw	r6,4(r5)
    9674:	00bfff04 	movi	r2,-4
    9678:	b1000404 	addi	r4,r22,16
    967c:	3084703a 	and	r2,r6,r2
    9680:	140d883a 	add	r6,r2,r16
    9684:	31005b0e 	bge	r6,r4,97f4 <_realloc_r+0x394>
    9688:	2811883a 	mov	r8,r5
    968c:	18c0004c 	andi	r3,r3,1
    9690:	183fce1e 	bne	r3,zero,95cc <__alt_mem_Flash_flash_data+0xf40095cc>
    9694:	a4fffe17 	ldw	r19,-8(r20)
    9698:	00ffff04 	movi	r3,-4
    969c:	ace7c83a 	sub	r19,r21,r19
    96a0:	99000117 	ldw	r4,4(r19)
    96a4:	20c6703a 	and	r3,r4,r3
    96a8:	403fc526 	beq	r8,zero,95c0 <__alt_mem_Flash_flash_data+0xf40095c0>
    96ac:	1c2f883a 	add	r23,r3,r16
    96b0:	b8af883a 	add	r23,r23,r2
    96b4:	41406026 	beq	r8,r5,9838 <_realloc_r+0x3d8>
    96b8:	b9ffc116 	blt	r23,r7,95c0 <__alt_mem_Flash_flash_data+0xf40095c0>
    96bc:	40c00217 	ldw	r3,8(r8)
    96c0:	40800317 	ldw	r2,12(r8)
    96c4:	81bfff04 	addi	r6,r16,-4
    96c8:	01000904 	movi	r4,36
    96cc:	18800315 	stw	r2,12(r3)
    96d0:	10c00215 	stw	r3,8(r2)
    96d4:	99400217 	ldw	r5,8(r19)
    96d8:	98c00317 	ldw	r3,12(r19)
    96dc:	9c400204 	addi	r17,r19,8
    96e0:	28c00315 	stw	r3,12(r5)
    96e4:	19400215 	stw	r5,8(r3)
    96e8:	21802d36 	bltu	r4,r6,97a0 <_realloc_r+0x340>
    96ec:	008004c4 	movi	r2,19
    96f0:	1180352e 	bgeu	r2,r6,97c8 <_realloc_r+0x368>
    96f4:	a0800017 	ldw	r2,0(r20)
    96f8:	98800215 	stw	r2,8(r19)
    96fc:	a0800117 	ldw	r2,4(r20)
    9700:	98800315 	stw	r2,12(r19)
    9704:	008006c4 	movi	r2,27
    9708:	11808036 	bltu	r2,r6,990c <_realloc_r+0x4ac>
    970c:	98c00404 	addi	r3,r19,16
    9710:	a5000204 	addi	r20,r20,8
    9714:	00002d06 	br	97cc <_realloc_r+0x36c>
    9718:	1d86b03a 	or	r3,r3,r22
    971c:	ad8b883a 	add	r5,r21,r22
    9720:	a8c00115 	stw	r3,4(r21)
    9724:	38800054 	ori	r2,r7,1
    9728:	28800115 	stw	r2,4(r5)
    972c:	29cf883a 	add	r7,r5,r7
    9730:	38800117 	ldw	r2,4(r7)
    9734:	9009883a 	mov	r4,r18
    9738:	29400204 	addi	r5,r5,8
    973c:	10800054 	ori	r2,r2,1
    9740:	38800115 	stw	r2,4(r7)
    9744:	00074500 	call	7450 <_free_r>
    9748:	003f8706 	br	9568 <__alt_mem_Flash_flash_data+0xf4009568>
    974c:	300b883a 	mov	r5,r6
    9750:	dfc00917 	ldw	ra,36(sp)
    9754:	df000817 	ldw	fp,32(sp)
    9758:	ddc00717 	ldw	r23,28(sp)
    975c:	dd800617 	ldw	r22,24(sp)
    9760:	dd400517 	ldw	r21,20(sp)
    9764:	dd000417 	ldw	r20,16(sp)
    9768:	dcc00317 	ldw	r19,12(sp)
    976c:	dc800217 	ldw	r18,8(sp)
    9770:	dc400117 	ldw	r17,4(sp)
    9774:	dc000017 	ldw	r16,0(sp)
    9778:	dec00a04 	addi	sp,sp,40
    977c:	00007281 	jmpi	728 <_malloc_r>
    9780:	98800317 	ldw	r2,12(r19)
    9784:	98c00217 	ldw	r3,8(r19)
    9788:	81bfff04 	addi	r6,r16,-4
    978c:	01000904 	movi	r4,36
    9790:	18800315 	stw	r2,12(r3)
    9794:	10c00215 	stw	r3,8(r2)
    9798:	9c400204 	addi	r17,r19,8
    979c:	21bfd32e 	bgeu	r4,r6,96ec <__alt_mem_Flash_flash_data+0xf40096ec>
    97a0:	8809883a 	mov	r4,r17
    97a4:	a00b883a 	mov	r5,r20
    97a8:	00082400 	call	8240 <memmove>
    97ac:	98c00117 	ldw	r3,4(r19)
    97b0:	b821883a 	mov	r16,r23
    97b4:	982b883a 	mov	r21,r19
    97b8:	003f6106 	br	9540 <__alt_mem_Flash_flash_data+0xf4009540>
    97bc:	8805883a 	mov	r2,r17
    97c0:	a007883a 	mov	r3,r20
    97c4:	003f9906 	br	962c <__alt_mem_Flash_flash_data+0xf400962c>
    97c8:	8807883a 	mov	r3,r17
    97cc:	a0800017 	ldw	r2,0(r20)
    97d0:	b821883a 	mov	r16,r23
    97d4:	982b883a 	mov	r21,r19
    97d8:	18800015 	stw	r2,0(r3)
    97dc:	a0800117 	ldw	r2,4(r20)
    97e0:	18800115 	stw	r2,4(r3)
    97e4:	a0800217 	ldw	r2,8(r20)
    97e8:	18800215 	stw	r2,8(r3)
    97ec:	98c00117 	ldw	r3,4(r19)
    97f0:	003f5306 	br	9540 <__alt_mem_Flash_flash_data+0xf4009540>
    97f4:	adab883a 	add	r21,r21,r22
    97f8:	3585c83a 	sub	r2,r6,r22
    97fc:	e5400215 	stw	r21,8(fp)
    9800:	10800054 	ori	r2,r2,1
    9804:	a8800115 	stw	r2,4(r21)
    9808:	a0bfff17 	ldw	r2,-4(r20)
    980c:	9009883a 	mov	r4,r18
    9810:	1080004c 	andi	r2,r2,1
    9814:	b0acb03a 	or	r22,r22,r2
    9818:	a5bfff15 	stw	r22,-4(r20)
    981c:	0010a540 	call	10a54 <__malloc_unlock>
    9820:	a005883a 	mov	r2,r20
    9824:	003f5306 	br	9574 <__alt_mem_Flash_flash_data+0xf4009574>
    9828:	8809883a 	mov	r4,r17
    982c:	a00b883a 	mov	r5,r20
    9830:	00082400 	call	8240 <memmove>
    9834:	003f8306 	br	9644 <__alt_mem_Flash_flash_data+0xf4009644>
    9838:	b0800404 	addi	r2,r22,16
    983c:	b8bf6016 	blt	r23,r2,95c0 <__alt_mem_Flash_flash_data+0xf40095c0>
    9840:	98800317 	ldw	r2,12(r19)
    9844:	98c00217 	ldw	r3,8(r19)
    9848:	81bfff04 	addi	r6,r16,-4
    984c:	01000904 	movi	r4,36
    9850:	18800315 	stw	r2,12(r3)
    9854:	10c00215 	stw	r3,8(r2)
    9858:	9c400204 	addi	r17,r19,8
    985c:	21804336 	bltu	r4,r6,996c <_realloc_r+0x50c>
    9860:	008004c4 	movi	r2,19
    9864:	11803f2e 	bgeu	r2,r6,9964 <_realloc_r+0x504>
    9868:	a0800017 	ldw	r2,0(r20)
    986c:	98800215 	stw	r2,8(r19)
    9870:	a0800117 	ldw	r2,4(r20)
    9874:	98800315 	stw	r2,12(r19)
    9878:	008006c4 	movi	r2,27
    987c:	11803f36 	bltu	r2,r6,997c <_realloc_r+0x51c>
    9880:	98800404 	addi	r2,r19,16
    9884:	a5000204 	addi	r20,r20,8
    9888:	a0c00017 	ldw	r3,0(r20)
    988c:	10c00015 	stw	r3,0(r2)
    9890:	a0c00117 	ldw	r3,4(r20)
    9894:	10c00115 	stw	r3,4(r2)
    9898:	a0c00217 	ldw	r3,8(r20)
    989c:	10c00215 	stw	r3,8(r2)
    98a0:	9d87883a 	add	r3,r19,r22
    98a4:	bd85c83a 	sub	r2,r23,r22
    98a8:	e0c00215 	stw	r3,8(fp)
    98ac:	10800054 	ori	r2,r2,1
    98b0:	18800115 	stw	r2,4(r3)
    98b4:	98800117 	ldw	r2,4(r19)
    98b8:	9009883a 	mov	r4,r18
    98bc:	1080004c 	andi	r2,r2,1
    98c0:	b0acb03a 	or	r22,r22,r2
    98c4:	9d800115 	stw	r22,4(r19)
    98c8:	0010a540 	call	10a54 <__malloc_unlock>
    98cc:	8805883a 	mov	r2,r17
    98d0:	003f2806 	br	9574 <__alt_mem_Flash_flash_data+0xf4009574>
    98d4:	a0c00217 	ldw	r3,8(r20)
    98d8:	88c00215 	stw	r3,8(r17)
    98dc:	a0c00317 	ldw	r3,12(r20)
    98e0:	88c00315 	stw	r3,12(r17)
    98e4:	30801126 	beq	r6,r2,992c <_realloc_r+0x4cc>
    98e8:	88800404 	addi	r2,r17,16
    98ec:	a0c00404 	addi	r3,r20,16
    98f0:	003f4e06 	br	962c <__alt_mem_Flash_flash_data+0xf400962c>
    98f4:	893fff17 	ldw	r4,-4(r17)
    98f8:	00bfff04 	movi	r2,-4
    98fc:	a023883a 	mov	r17,r20
    9900:	2084703a 	and	r2,r4,r2
    9904:	80a1883a 	add	r16,r16,r2
    9908:	003f0d06 	br	9540 <__alt_mem_Flash_flash_data+0xf4009540>
    990c:	a0800217 	ldw	r2,8(r20)
    9910:	98800415 	stw	r2,16(r19)
    9914:	a0800317 	ldw	r2,12(r20)
    9918:	98800515 	stw	r2,20(r19)
    991c:	31000a26 	beq	r6,r4,9948 <_realloc_r+0x4e8>
    9920:	98c00604 	addi	r3,r19,24
    9924:	a5000404 	addi	r20,r20,16
    9928:	003fa806 	br	97cc <__alt_mem_Flash_flash_data+0xf40097cc>
    992c:	a1000417 	ldw	r4,16(r20)
    9930:	88800604 	addi	r2,r17,24
    9934:	a0c00604 	addi	r3,r20,24
    9938:	89000415 	stw	r4,16(r17)
    993c:	a1000517 	ldw	r4,20(r20)
    9940:	89000515 	stw	r4,20(r17)
    9944:	003f3906 	br	962c <__alt_mem_Flash_flash_data+0xf400962c>
    9948:	a0800417 	ldw	r2,16(r20)
    994c:	a5000604 	addi	r20,r20,24
    9950:	98c00804 	addi	r3,r19,32
    9954:	98800615 	stw	r2,24(r19)
    9958:	a0bfff17 	ldw	r2,-4(r20)
    995c:	98800715 	stw	r2,28(r19)
    9960:	003f9a06 	br	97cc <__alt_mem_Flash_flash_data+0xf40097cc>
    9964:	8805883a 	mov	r2,r17
    9968:	003fc706 	br	9888 <__alt_mem_Flash_flash_data+0xf4009888>
    996c:	8809883a 	mov	r4,r17
    9970:	a00b883a 	mov	r5,r20
    9974:	00082400 	call	8240 <memmove>
    9978:	003fc906 	br	98a0 <__alt_mem_Flash_flash_data+0xf40098a0>
    997c:	a0800217 	ldw	r2,8(r20)
    9980:	98800415 	stw	r2,16(r19)
    9984:	a0800317 	ldw	r2,12(r20)
    9988:	98800515 	stw	r2,20(r19)
    998c:	31000726 	beq	r6,r4,99ac <_realloc_r+0x54c>
    9990:	98800604 	addi	r2,r19,24
    9994:	a5000404 	addi	r20,r20,16
    9998:	003fbb06 	br	9888 <__alt_mem_Flash_flash_data+0xf4009888>
    999c:	9009883a 	mov	r4,r18
    99a0:	0010a540 	call	10a54 <__malloc_unlock>
    99a4:	0005883a 	mov	r2,zero
    99a8:	003ef206 	br	9574 <__alt_mem_Flash_flash_data+0xf4009574>
    99ac:	a0c00417 	ldw	r3,16(r20)
    99b0:	a5000604 	addi	r20,r20,24
    99b4:	98800804 	addi	r2,r19,32
    99b8:	98c00615 	stw	r3,24(r19)
    99bc:	a0ffff17 	ldw	r3,-4(r20)
    99c0:	98c00715 	stw	r3,28(r19)
    99c4:	003fb006 	br	9888 <__alt_mem_Flash_flash_data+0xf4009888>

000099c8 <__fpclassifyd>:
    99c8:	00a00034 	movhi	r2,32768
    99cc:	10bfffc4 	addi	r2,r2,-1
    99d0:	2884703a 	and	r2,r5,r2
    99d4:	10000726 	beq	r2,zero,99f4 <__fpclassifyd+0x2c>
    99d8:	00fffc34 	movhi	r3,65520
    99dc:	019ff834 	movhi	r6,32736
    99e0:	28c7883a 	add	r3,r5,r3
    99e4:	31bfffc4 	addi	r6,r6,-1
    99e8:	30c00536 	bltu	r6,r3,9a00 <__fpclassifyd+0x38>
    99ec:	00800104 	movi	r2,4
    99f0:	f800283a 	ret
    99f4:	2000021e 	bne	r4,zero,9a00 <__fpclassifyd+0x38>
    99f8:	00800084 	movi	r2,2
    99fc:	f800283a 	ret
    9a00:	00dffc34 	movhi	r3,32752
    9a04:	019ff834 	movhi	r6,32736
    9a08:	28cb883a 	add	r5,r5,r3
    9a0c:	31bfffc4 	addi	r6,r6,-1
    9a10:	317ff62e 	bgeu	r6,r5,99ec <__alt_mem_Flash_flash_data+0xf40099ec>
    9a14:	01400434 	movhi	r5,16
    9a18:	297fffc4 	addi	r5,r5,-1
    9a1c:	28800236 	bltu	r5,r2,9a28 <__fpclassifyd+0x60>
    9a20:	008000c4 	movi	r2,3
    9a24:	f800283a 	ret
    9a28:	10c00226 	beq	r2,r3,9a34 <__fpclassifyd+0x6c>
    9a2c:	0005883a 	mov	r2,zero
    9a30:	f800283a 	ret
    9a34:	2005003a 	cmpeq	r2,r4,zero
    9a38:	f800283a 	ret

00009a3c <__sread>:
    9a3c:	defffe04 	addi	sp,sp,-8
    9a40:	dc000015 	stw	r16,0(sp)
    9a44:	2821883a 	mov	r16,r5
    9a48:	2940038f 	ldh	r5,14(r5)
    9a4c:	dfc00115 	stw	ra,4(sp)
    9a50:	000c8440 	call	c844 <_read_r>
    9a54:	10000716 	blt	r2,zero,9a74 <__sread+0x38>
    9a58:	80c01417 	ldw	r3,80(r16)
    9a5c:	1887883a 	add	r3,r3,r2
    9a60:	80c01415 	stw	r3,80(r16)
    9a64:	dfc00117 	ldw	ra,4(sp)
    9a68:	dc000017 	ldw	r16,0(sp)
    9a6c:	dec00204 	addi	sp,sp,8
    9a70:	f800283a 	ret
    9a74:	80c0030b 	ldhu	r3,12(r16)
    9a78:	18fbffcc 	andi	r3,r3,61439
    9a7c:	80c0030d 	sth	r3,12(r16)
    9a80:	dfc00117 	ldw	ra,4(sp)
    9a84:	dc000017 	ldw	r16,0(sp)
    9a88:	dec00204 	addi	sp,sp,8
    9a8c:	f800283a 	ret

00009a90 <__seofread>:
    9a90:	0005883a 	mov	r2,zero
    9a94:	f800283a 	ret

00009a98 <__swrite>:
    9a98:	2880030b 	ldhu	r2,12(r5)
    9a9c:	defffb04 	addi	sp,sp,-20
    9aa0:	dcc00315 	stw	r19,12(sp)
    9aa4:	dc800215 	stw	r18,8(sp)
    9aa8:	dc400115 	stw	r17,4(sp)
    9aac:	dc000015 	stw	r16,0(sp)
    9ab0:	dfc00415 	stw	ra,16(sp)
    9ab4:	10c0400c 	andi	r3,r2,256
    9ab8:	2821883a 	mov	r16,r5
    9abc:	2027883a 	mov	r19,r4
    9ac0:	3025883a 	mov	r18,r6
    9ac4:	3823883a 	mov	r17,r7
    9ac8:	18000526 	beq	r3,zero,9ae0 <__swrite+0x48>
    9acc:	2940038f 	ldh	r5,14(r5)
    9ad0:	000d883a 	mov	r6,zero
    9ad4:	01c00084 	movi	r7,2
    9ad8:	000c7e80 	call	c7e8 <_lseek_r>
    9adc:	8080030b 	ldhu	r2,12(r16)
    9ae0:	8140038f 	ldh	r5,14(r16)
    9ae4:	10bbffcc 	andi	r2,r2,61439
    9ae8:	9809883a 	mov	r4,r19
    9aec:	900d883a 	mov	r6,r18
    9af0:	880f883a 	mov	r7,r17
    9af4:	8080030d 	sth	r2,12(r16)
    9af8:	dfc00417 	ldw	ra,16(sp)
    9afc:	dcc00317 	ldw	r19,12(sp)
    9b00:	dc800217 	ldw	r18,8(sp)
    9b04:	dc400117 	ldw	r17,4(sp)
    9b08:	dc000017 	ldw	r16,0(sp)
    9b0c:	dec00504 	addi	sp,sp,20
    9b10:	000c2e41 	jmpi	c2e4 <_write_r>

00009b14 <__sseek>:
    9b14:	defffe04 	addi	sp,sp,-8
    9b18:	dc000015 	stw	r16,0(sp)
    9b1c:	2821883a 	mov	r16,r5
    9b20:	2940038f 	ldh	r5,14(r5)
    9b24:	dfc00115 	stw	ra,4(sp)
    9b28:	000c7e80 	call	c7e8 <_lseek_r>
    9b2c:	00ffffc4 	movi	r3,-1
    9b30:	10c00826 	beq	r2,r3,9b54 <__sseek+0x40>
    9b34:	80c0030b 	ldhu	r3,12(r16)
    9b38:	80801415 	stw	r2,80(r16)
    9b3c:	18c40014 	ori	r3,r3,4096
    9b40:	80c0030d 	sth	r3,12(r16)
    9b44:	dfc00117 	ldw	ra,4(sp)
    9b48:	dc000017 	ldw	r16,0(sp)
    9b4c:	dec00204 	addi	sp,sp,8
    9b50:	f800283a 	ret
    9b54:	80c0030b 	ldhu	r3,12(r16)
    9b58:	18fbffcc 	andi	r3,r3,61439
    9b5c:	80c0030d 	sth	r3,12(r16)
    9b60:	dfc00117 	ldw	ra,4(sp)
    9b64:	dc000017 	ldw	r16,0(sp)
    9b68:	dec00204 	addi	sp,sp,8
    9b6c:	f800283a 	ret

00009b70 <__sclose>:
    9b70:	2940038f 	ldh	r5,14(r5)
    9b74:	000c3401 	jmpi	c340 <_close_r>

00009b78 <strcmp>:
    9b78:	2144b03a 	or	r2,r4,r5
    9b7c:	108000cc 	andi	r2,r2,3
    9b80:	1000171e 	bne	r2,zero,9be0 <strcmp+0x68>
    9b84:	20800017 	ldw	r2,0(r4)
    9b88:	28c00017 	ldw	r3,0(r5)
    9b8c:	10c0141e 	bne	r2,r3,9be0 <strcmp+0x68>
    9b90:	027fbff4 	movhi	r9,65279
    9b94:	4a7fbfc4 	addi	r9,r9,-257
    9b98:	0086303a 	nor	r3,zero,r2
    9b9c:	02202074 	movhi	r8,32897
    9ba0:	1245883a 	add	r2,r2,r9
    9ba4:	42202004 	addi	r8,r8,-32640
    9ba8:	10c4703a 	and	r2,r2,r3
    9bac:	1204703a 	and	r2,r2,r8
    9bb0:	10000226 	beq	r2,zero,9bbc <strcmp+0x44>
    9bb4:	00001706 	br	9c14 <strcmp+0x9c>
    9bb8:	1000161e 	bne	r2,zero,9c14 <strcmp+0x9c>
    9bbc:	21000104 	addi	r4,r4,4
    9bc0:	20c00017 	ldw	r3,0(r4)
    9bc4:	29400104 	addi	r5,r5,4
    9bc8:	29800017 	ldw	r6,0(r5)
    9bcc:	1a4f883a 	add	r7,r3,r9
    9bd0:	00c4303a 	nor	r2,zero,r3
    9bd4:	3884703a 	and	r2,r7,r2
    9bd8:	1204703a 	and	r2,r2,r8
    9bdc:	19bff626 	beq	r3,r6,9bb8 <__alt_mem_Flash_flash_data+0xf4009bb8>
    9be0:	20800007 	ldb	r2,0(r4)
    9be4:	1000051e 	bne	r2,zero,9bfc <strcmp+0x84>
    9be8:	00000606 	br	9c04 <strcmp+0x8c>
    9bec:	21000044 	addi	r4,r4,1
    9bf0:	20800007 	ldb	r2,0(r4)
    9bf4:	29400044 	addi	r5,r5,1
    9bf8:	10000226 	beq	r2,zero,9c04 <strcmp+0x8c>
    9bfc:	28c00007 	ldb	r3,0(r5)
    9c00:	10fffa26 	beq	r2,r3,9bec <__alt_mem_Flash_flash_data+0xf4009bec>
    9c04:	20800003 	ldbu	r2,0(r4)
    9c08:	28c00003 	ldbu	r3,0(r5)
    9c0c:	10c5c83a 	sub	r2,r2,r3
    9c10:	f800283a 	ret
    9c14:	0005883a 	mov	r2,zero
    9c18:	f800283a 	ret

00009c1c <__ssprint_r>:
    9c1c:	30800217 	ldw	r2,8(r6)
    9c20:	defff604 	addi	sp,sp,-40
    9c24:	ddc00715 	stw	r23,28(sp)
    9c28:	dc800215 	stw	r18,8(sp)
    9c2c:	dfc00915 	stw	ra,36(sp)
    9c30:	df000815 	stw	fp,32(sp)
    9c34:	dd800615 	stw	r22,24(sp)
    9c38:	dd400515 	stw	r21,20(sp)
    9c3c:	dd000415 	stw	r20,16(sp)
    9c40:	dcc00315 	stw	r19,12(sp)
    9c44:	dc400115 	stw	r17,4(sp)
    9c48:	dc000015 	stw	r16,0(sp)
    9c4c:	3025883a 	mov	r18,r6
    9c50:	35c00017 	ldw	r23,0(r6)
    9c54:	10005626 	beq	r2,zero,9db0 <__ssprint_r+0x194>
    9c58:	2027883a 	mov	r19,r4
    9c5c:	28800217 	ldw	r2,8(r5)
    9c60:	29000017 	ldw	r4,0(r5)
    9c64:	2823883a 	mov	r17,r5
    9c68:	0039883a 	mov	fp,zero
    9c6c:	0021883a 	mov	r16,zero
    9c70:	80003926 	beq	r16,zero,9d58 <__ssprint_r+0x13c>
    9c74:	102b883a 	mov	r21,r2
    9c78:	102d883a 	mov	r22,r2
    9c7c:	80803a36 	bltu	r16,r2,9d68 <__ssprint_r+0x14c>
    9c80:	88c0030b 	ldhu	r3,12(r17)
    9c84:	1881200c 	andi	r2,r3,1152
    9c88:	10002626 	beq	r2,zero,9d24 <__ssprint_r+0x108>
    9c8c:	88800517 	ldw	r2,20(r17)
    9c90:	89400417 	ldw	r5,16(r17)
    9c94:	81c00044 	addi	r7,r16,1
    9c98:	108d883a 	add	r6,r2,r2
    9c9c:	3085883a 	add	r2,r6,r2
    9ca0:	100cd7fa 	srli	r6,r2,31
    9ca4:	216dc83a 	sub	r22,r4,r5
    9ca8:	3d89883a 	add	r4,r7,r22
    9cac:	3085883a 	add	r2,r6,r2
    9cb0:	102bd07a 	srai	r21,r2,1
    9cb4:	a80d883a 	mov	r6,r21
    9cb8:	a900022e 	bgeu	r21,r4,9cc4 <__ssprint_r+0xa8>
    9cbc:	202b883a 	mov	r21,r4
    9cc0:	200d883a 	mov	r6,r4
    9cc4:	18c1000c 	andi	r3,r3,1024
    9cc8:	9809883a 	mov	r4,r19
    9ccc:	18002926 	beq	r3,zero,9d74 <__ssprint_r+0x158>
    9cd0:	300b883a 	mov	r5,r6
    9cd4:	00007280 	call	728 <_malloc_r>
    9cd8:	1029883a 	mov	r20,r2
    9cdc:	10002b26 	beq	r2,zero,9d8c <__ssprint_r+0x170>
    9ce0:	89400417 	ldw	r5,16(r17)
    9ce4:	1009883a 	mov	r4,r2
    9ce8:	b00d883a 	mov	r6,r22
    9cec:	00081080 	call	8108 <memcpy>
    9cf0:	8880030b 	ldhu	r2,12(r17)
    9cf4:	00fedfc4 	movi	r3,-1153
    9cf8:	10c4703a 	and	r2,r2,r3
    9cfc:	10802014 	ori	r2,r2,128
    9d00:	8880030d 	sth	r2,12(r17)
    9d04:	a589883a 	add	r4,r20,r22
    9d08:	adadc83a 	sub	r22,r21,r22
    9d0c:	8d400515 	stw	r21,20(r17)
    9d10:	8d800215 	stw	r22,8(r17)
    9d14:	8d000415 	stw	r20,16(r17)
    9d18:	89000015 	stw	r4,0(r17)
    9d1c:	802b883a 	mov	r21,r16
    9d20:	802d883a 	mov	r22,r16
    9d24:	e00b883a 	mov	r5,fp
    9d28:	b00d883a 	mov	r6,r22
    9d2c:	00082400 	call	8240 <memmove>
    9d30:	88800217 	ldw	r2,8(r17)
    9d34:	89000017 	ldw	r4,0(r17)
    9d38:	90c00217 	ldw	r3,8(r18)
    9d3c:	1545c83a 	sub	r2,r2,r21
    9d40:	2589883a 	add	r4,r4,r22
    9d44:	88800215 	stw	r2,8(r17)
    9d48:	89000015 	stw	r4,0(r17)
    9d4c:	1c21c83a 	sub	r16,r3,r16
    9d50:	94000215 	stw	r16,8(r18)
    9d54:	80001626 	beq	r16,zero,9db0 <__ssprint_r+0x194>
    9d58:	bf000017 	ldw	fp,0(r23)
    9d5c:	bc000117 	ldw	r16,4(r23)
    9d60:	bdc00204 	addi	r23,r23,8
    9d64:	003fc206 	br	9c70 <__alt_mem_Flash_flash_data+0xf4009c70>
    9d68:	802b883a 	mov	r21,r16
    9d6c:	802d883a 	mov	r22,r16
    9d70:	003fec06 	br	9d24 <__alt_mem_Flash_flash_data+0xf4009d24>
    9d74:	00094600 	call	9460 <_realloc_r>
    9d78:	1029883a 	mov	r20,r2
    9d7c:	103fe11e 	bne	r2,zero,9d04 <__alt_mem_Flash_flash_data+0xf4009d04>
    9d80:	89400417 	ldw	r5,16(r17)
    9d84:	9809883a 	mov	r4,r19
    9d88:	00074500 	call	7450 <_free_r>
    9d8c:	88c0030b 	ldhu	r3,12(r17)
    9d90:	00800304 	movi	r2,12
    9d94:	98800015 	stw	r2,0(r19)
    9d98:	18c01014 	ori	r3,r3,64
    9d9c:	88c0030d 	sth	r3,12(r17)
    9da0:	00bfffc4 	movi	r2,-1
    9da4:	90000215 	stw	zero,8(r18)
    9da8:	90000115 	stw	zero,4(r18)
    9dac:	00000206 	br	9db8 <__ssprint_r+0x19c>
    9db0:	90000115 	stw	zero,4(r18)
    9db4:	0005883a 	mov	r2,zero
    9db8:	dfc00917 	ldw	ra,36(sp)
    9dbc:	df000817 	ldw	fp,32(sp)
    9dc0:	ddc00717 	ldw	r23,28(sp)
    9dc4:	dd800617 	ldw	r22,24(sp)
    9dc8:	dd400517 	ldw	r21,20(sp)
    9dcc:	dd000417 	ldw	r20,16(sp)
    9dd0:	dcc00317 	ldw	r19,12(sp)
    9dd4:	dc800217 	ldw	r18,8(sp)
    9dd8:	dc400117 	ldw	r17,4(sp)
    9ddc:	dc000017 	ldw	r16,0(sp)
    9de0:	dec00a04 	addi	sp,sp,40
    9de4:	f800283a 	ret

00009de8 <___svfiprintf_internal_r>:
    9de8:	2880030b 	ldhu	r2,12(r5)
    9dec:	deffc904 	addi	sp,sp,-220
    9df0:	dd403215 	stw	r21,200(sp)
    9df4:	dfc03615 	stw	ra,216(sp)
    9df8:	df003515 	stw	fp,212(sp)
    9dfc:	ddc03415 	stw	r23,208(sp)
    9e00:	dd803315 	stw	r22,204(sp)
    9e04:	dd003115 	stw	r20,196(sp)
    9e08:	dcc03015 	stw	r19,192(sp)
    9e0c:	dc802f15 	stw	r18,188(sp)
    9e10:	dc402e15 	stw	r17,184(sp)
    9e14:	dc002d15 	stw	r16,180(sp)
    9e18:	d9402715 	stw	r5,156(sp)
    9e1c:	d9002915 	stw	r4,164(sp)
    9e20:	1080200c 	andi	r2,r2,128
    9e24:	d9c02315 	stw	r7,140(sp)
    9e28:	302b883a 	mov	r21,r6
    9e2c:	10000226 	beq	r2,zero,9e38 <___svfiprintf_internal_r+0x50>
    9e30:	28800417 	ldw	r2,16(r5)
    9e34:	1003ce26 	beq	r2,zero,ad70 <___svfiprintf_internal_r+0xf88>
    9e38:	dac01a04 	addi	r11,sp,104
    9e3c:	da8019c4 	addi	r10,sp,103
    9e40:	dc802917 	ldw	r18,164(sp)
    9e44:	dd002717 	ldw	r20,156(sp)
    9e48:	04c000b4 	movhi	r19,2
    9e4c:	dac01e15 	stw	r11,120(sp)
    9e50:	5a97c83a 	sub	r11,r11,r10
    9e54:	9cc27304 	addi	r19,r19,2508
    9e58:	da801f15 	stw	r10,124(sp)
    9e5c:	dec01a15 	stw	sp,104(sp)
    9e60:	d8001c15 	stw	zero,112(sp)
    9e64:	d8001b15 	stw	zero,108(sp)
    9e68:	d811883a 	mov	r8,sp
    9e6c:	d8002a15 	stw	zero,168(sp)
    9e70:	d8002415 	stw	zero,144(sp)
    9e74:	dac02b15 	stw	r11,172(sp)
    9e78:	a8800007 	ldb	r2,0(r21)
    9e7c:	10026a26 	beq	r2,zero,a828 <___svfiprintf_internal_r+0xa40>
    9e80:	01000944 	movi	r4,37
    9e84:	11026826 	beq	r2,r4,a828 <___svfiprintf_internal_r+0xa40>
    9e88:	a805883a 	mov	r2,r21
    9e8c:	00000106 	br	9e94 <___svfiprintf_internal_r+0xac>
    9e90:	19000326 	beq	r3,r4,9ea0 <___svfiprintf_internal_r+0xb8>
    9e94:	10800044 	addi	r2,r2,1
    9e98:	10c00007 	ldb	r3,0(r2)
    9e9c:	183ffc1e 	bne	r3,zero,9e90 <__alt_mem_Flash_flash_data+0xf4009e90>
    9ea0:	1561c83a 	sub	r16,r2,r21
    9ea4:	102d883a 	mov	r22,r2
    9ea8:	80000e26 	beq	r16,zero,9ee4 <___svfiprintf_internal_r+0xfc>
    9eac:	d8c01c17 	ldw	r3,112(sp)
    9eb0:	d8801b17 	ldw	r2,108(sp)
    9eb4:	45400015 	stw	r21,0(r8)
    9eb8:	1c07883a 	add	r3,r3,r16
    9ebc:	10800044 	addi	r2,r2,1
    9ec0:	d8c01c15 	stw	r3,112(sp)
    9ec4:	44000115 	stw	r16,4(r8)
    9ec8:	d8801b15 	stw	r2,108(sp)
    9ecc:	00c001c4 	movi	r3,7
    9ed0:	1882d816 	blt	r3,r2,aa34 <___svfiprintf_internal_r+0xc4c>
    9ed4:	42000204 	addi	r8,r8,8
    9ed8:	da802417 	ldw	r10,144(sp)
    9edc:	5415883a 	add	r10,r10,r16
    9ee0:	da802415 	stw	r10,144(sp)
    9ee4:	b0800007 	ldb	r2,0(r22)
    9ee8:	10027526 	beq	r2,zero,a8c0 <___svfiprintf_internal_r+0xad8>
    9eec:	b1000047 	ldb	r4,1(r22)
    9ef0:	b5400044 	addi	r21,r22,1
    9ef4:	d8001d85 	stb	zero,118(sp)
    9ef8:	000d883a 	mov	r6,zero
    9efc:	043fffc4 	movi	r16,-1
    9f00:	d8002115 	stw	zero,132(sp)
    9f04:	0023883a 	mov	r17,zero
    9f08:	00c01604 	movi	r3,88
    9f0c:	01400244 	movi	r5,9
    9f10:	02400a84 	movi	r9,42
    9f14:	01c01b04 	movi	r7,108
    9f18:	ad400044 	addi	r21,r21,1
    9f1c:	20bff804 	addi	r2,r4,-32
    9f20:	18819736 	bltu	r3,r2,a580 <___svfiprintf_internal_r+0x798>
    9f24:	100490ba 	slli	r2,r2,2
    9f28:	02c00074 	movhi	r11,1
    9f2c:	5ae7cf04 	addi	r11,r11,-24772
    9f30:	12c5883a 	add	r2,r2,r11
    9f34:	10800017 	ldw	r2,0(r2)
    9f38:	1000683a 	jmp	r2
    9f3c:	0000a478 	rdprs	zero,zero,657
    9f40:	0000a580 	call	a58 <_malloc_r+0x330>
    9f44:	0000a580 	call	a58 <_malloc_r+0x330>
    9f48:	0000a46c 	andhi	zero,zero,657
    9f4c:	0000a580 	call	a58 <_malloc_r+0x330>
    9f50:	0000a580 	call	a58 <_malloc_r+0x330>
    9f54:	0000a580 	call	a58 <_malloc_r+0x330>
    9f58:	0000a580 	call	a58 <_malloc_r+0x330>
    9f5c:	0000a580 	call	a58 <_malloc_r+0x330>
    9f60:	0000a580 	call	a58 <_malloc_r+0x330>
    9f64:	0000a198 	cmpnei	zero,zero,646
    9f68:	0000a5b4 	movhi	zero,662
    9f6c:	0000a580 	call	a58 <_malloc_r+0x330>
    9f70:	0000a1c0 	call	a1c <_malloc_r+0x2f4>
    9f74:	0000a5c0 	call	a5c <_malloc_r+0x334>
    9f78:	0000a580 	call	a58 <_malloc_r+0x330>
    9f7c:	0000a5a8 	cmpgeui	zero,zero,662
    9f80:	0000a548 	cmpgei	zero,zero,661
    9f84:	0000a548 	cmpgei	zero,zero,661
    9f88:	0000a548 	cmpgei	zero,zero,661
    9f8c:	0000a548 	cmpgei	zero,zero,661
    9f90:	0000a548 	cmpgei	zero,zero,661
    9f94:	0000a548 	cmpgei	zero,zero,661
    9f98:	0000a548 	cmpgei	zero,zero,661
    9f9c:	0000a548 	cmpgei	zero,zero,661
    9fa0:	0000a548 	cmpgei	zero,zero,661
    9fa4:	0000a580 	call	a58 <_malloc_r+0x330>
    9fa8:	0000a580 	call	a58 <_malloc_r+0x330>
    9fac:	0000a580 	call	a58 <_malloc_r+0x330>
    9fb0:	0000a580 	call	a58 <_malloc_r+0x330>
    9fb4:	0000a580 	call	a58 <_malloc_r+0x330>
    9fb8:	0000a580 	call	a58 <_malloc_r+0x330>
    9fbc:	0000a580 	call	a58 <_malloc_r+0x330>
    9fc0:	0000a580 	call	a58 <_malloc_r+0x330>
    9fc4:	0000a580 	call	a58 <_malloc_r+0x330>
    9fc8:	0000a580 	call	a58 <_malloc_r+0x330>
    9fcc:	0000a4e0 	cmpeqi	zero,zero,659
    9fd0:	0000a580 	call	a58 <_malloc_r+0x330>
    9fd4:	0000a580 	call	a58 <_malloc_r+0x330>
    9fd8:	0000a580 	call	a58 <_malloc_r+0x330>
    9fdc:	0000a580 	call	a58 <_malloc_r+0x330>
    9fe0:	0000a580 	call	a58 <_malloc_r+0x330>
    9fe4:	0000a580 	call	a58 <_malloc_r+0x330>
    9fe8:	0000a580 	call	a58 <_malloc_r+0x330>
    9fec:	0000a580 	call	a58 <_malloc_r+0x330>
    9ff0:	0000a580 	call	a58 <_malloc_r+0x330>
    9ff4:	0000a580 	call	a58 <_malloc_r+0x330>
    9ff8:	0000a16c 	andhi	zero,zero,645
    9ffc:	0000a580 	call	a58 <_malloc_r+0x330>
    a000:	0000a580 	call	a58 <_malloc_r+0x330>
    a004:	0000a580 	call	a58 <_malloc_r+0x330>
    a008:	0000a580 	call	a58 <_malloc_r+0x330>
    a00c:	0000a580 	call	a58 <_malloc_r+0x330>
    a010:	0000a0a0 	cmpeqi	zero,zero,642
    a014:	0000a580 	call	a58 <_malloc_r+0x330>
    a018:	0000a580 	call	a58 <_malloc_r+0x330>
    a01c:	0000a3cc 	andi	zero,zero,655
    a020:	0000a580 	call	a58 <_malloc_r+0x330>
    a024:	0000a580 	call	a58 <_malloc_r+0x330>
    a028:	0000a580 	call	a58 <_malloc_r+0x330>
    a02c:	0000a580 	call	a58 <_malloc_r+0x330>
    a030:	0000a580 	call	a58 <_malloc_r+0x330>
    a034:	0000a580 	call	a58 <_malloc_r+0x330>
    a038:	0000a580 	call	a58 <_malloc_r+0x330>
    a03c:	0000a580 	call	a58 <_malloc_r+0x330>
    a040:	0000a580 	call	a58 <_malloc_r+0x330>
    a044:	0000a580 	call	a58 <_malloc_r+0x330>
    a048:	0000a2b8 	rdprs	zero,zero,650
    a04c:	0000a278 	rdprs	zero,zero,649
    a050:	0000a580 	call	a58 <_malloc_r+0x330>
    a054:	0000a580 	call	a58 <_malloc_r+0x330>
    a058:	0000a580 	call	a58 <_malloc_r+0x330>
    a05c:	0000a428 	cmpgeui	zero,zero,656
    a060:	0000a278 	rdprs	zero,zero,649
    a064:	0000a580 	call	a58 <_malloc_r+0x330>
    a068:	0000a580 	call	a58 <_malloc_r+0x330>
    a06c:	0000a414 	movui	zero,656
    a070:	0000a580 	call	a58 <_malloc_r+0x330>
    a074:	0000a434 	movhi	zero,656
    a078:	0000a170 	cmpltui	zero,zero,645
    a07c:	0000a234 	movhi	zero,648
    a080:	0000a228 	cmpgeui	zero,zero,648
    a084:	0000a580 	call	a58 <_malloc_r+0x330>
    a088:	0000a1cc 	andi	zero,zero,647
    a08c:	0000a580 	call	a58 <_malloc_r+0x330>
    a090:	0000a0a4 	muli	zero,zero,642
    a094:	0000a580 	call	a58 <_malloc_r+0x330>
    a098:	0000a580 	call	a58 <_malloc_r+0x330>
    a09c:	0000a494 	movui	zero,658
    a0a0:	8c400414 	ori	r17,r17,16
    a0a4:	8880080c 	andi	r2,r17,32
    a0a8:	10029626 	beq	r2,zero,ab04 <___svfiprintf_internal_r+0xd1c>
    a0ac:	da802317 	ldw	r10,140(sp)
    a0b0:	dac02317 	ldw	r11,140(sp)
    a0b4:	00800044 	movi	r2,1
    a0b8:	52400017 	ldw	r9,0(r10)
    a0bc:	52800117 	ldw	r10,4(r10)
    a0c0:	5ac00204 	addi	r11,r11,8
    a0c4:	dac02315 	stw	r11,140(sp)
    a0c8:	4a86b03a 	or	r3,r9,r10
    a0cc:	d8001d85 	stb	zero,118(sp)
    a0d0:	8039883a 	mov	fp,r16
    a0d4:	0017883a 	mov	r11,zero
    a0d8:	80000216 	blt	r16,zero,a0e4 <___svfiprintf_internal_r+0x2fc>
    a0dc:	013fdfc4 	movi	r4,-129
    a0e0:	8922703a 	and	r17,r17,r4
    a0e4:	1801d21e 	bne	r3,zero,a830 <___svfiprintf_internal_r+0xa48>
    a0e8:	80024626 	beq	r16,zero,aa04 <___svfiprintf_internal_r+0xc1c>
    a0ec:	10803fcc 	andi	r2,r2,255
    a0f0:	00c00044 	movi	r3,1
    a0f4:	10c2b426 	beq	r2,r3,abc8 <___svfiprintf_internal_r+0xde0>
    a0f8:	00c00084 	movi	r3,2
    a0fc:	10c25d26 	beq	r2,r3,aa74 <___svfiprintf_internal_r+0xc8c>
    a100:	d8c01a04 	addi	r3,sp,104
    a104:	4808d0fa 	srli	r4,r9,3
    a108:	500a977a 	slli	r5,r10,29
    a10c:	5014d0fa 	srli	r10,r10,3
    a110:	4a4001cc 	andi	r9,r9,7
    a114:	48800c04 	addi	r2,r9,48
    a118:	18ffffc4 	addi	r3,r3,-1
    a11c:	2912b03a 	or	r9,r5,r4
    a120:	18800005 	stb	r2,0(r3)
    a124:	4a88b03a 	or	r4,r9,r10
    a128:	203ff61e 	bne	r4,zero,a104 <__alt_mem_Flash_flash_data+0xf400a104>
    a12c:	8900004c 	andi	r4,r17,1
    a130:	d8c02615 	stw	r3,152(sp)
    a134:	2002961e 	bne	r4,zero,ab90 <___svfiprintf_internal_r+0xda8>
    a138:	da801e17 	ldw	r10,120(sp)
    a13c:	50f9c83a 	sub	fp,r10,r3
    a140:	df002015 	stw	fp,128(sp)
    a144:	e400010e 	bge	fp,r16,a14c <___svfiprintf_internal_r+0x364>
    a148:	dc002015 	stw	r16,128(sp)
    a14c:	5ac03fcc 	andi	r11,r11,255
    a150:	5ac0201c 	xori	r11,r11,128
    a154:	5affe004 	addi	r11,r11,-128
    a158:	58006326 	beq	r11,zero,a2e8 <___svfiprintf_internal_r+0x500>
    a15c:	d8c02017 	ldw	r3,128(sp)
    a160:	18c00044 	addi	r3,r3,1
    a164:	d8c02015 	stw	r3,128(sp)
    a168:	00005f06 	br	a2e8 <___svfiprintf_internal_r+0x500>
    a16c:	8c400414 	ori	r17,r17,16
    a170:	8880080c 	andi	r2,r17,32
    a174:	10027926 	beq	r2,zero,ab5c <___svfiprintf_internal_r+0xd74>
    a178:	dac02317 	ldw	r11,140(sp)
    a17c:	0005883a 	mov	r2,zero
    a180:	5a400017 	ldw	r9,0(r11)
    a184:	5a800117 	ldw	r10,4(r11)
    a188:	5ac00204 	addi	r11,r11,8
    a18c:	dac02315 	stw	r11,140(sp)
    a190:	4a86b03a 	or	r3,r9,r10
    a194:	003fcd06 	br	a0cc <__alt_mem_Flash_flash_data+0xf400a0cc>
    a198:	da802317 	ldw	r10,140(sp)
    a19c:	dac02317 	ldw	r11,140(sp)
    a1a0:	52800017 	ldw	r10,0(r10)
    a1a4:	58800104 	addi	r2,r11,4
    a1a8:	da802115 	stw	r10,132(sp)
    a1ac:	50028c0e 	bge	r10,zero,abe0 <___svfiprintf_internal_r+0xdf8>
    a1b0:	da802117 	ldw	r10,132(sp)
    a1b4:	d8802315 	stw	r2,140(sp)
    a1b8:	0295c83a 	sub	r10,zero,r10
    a1bc:	da802115 	stw	r10,132(sp)
    a1c0:	8c400114 	ori	r17,r17,4
    a1c4:	a9000007 	ldb	r4,0(r21)
    a1c8:	003f5306 	br	9f18 <__alt_mem_Flash_flash_data+0xf4009f18>
    a1cc:	da802317 	ldw	r10,140(sp)
    a1d0:	dac02317 	ldw	r11,140(sp)
    a1d4:	d8001d85 	stb	zero,118(sp)
    a1d8:	52800017 	ldw	r10,0(r10)
    a1dc:	5dc00104 	addi	r23,r11,4
    a1e0:	da802615 	stw	r10,152(sp)
    a1e4:	5002d626 	beq	r10,zero,ad40 <___svfiprintf_internal_r+0xf58>
    a1e8:	d9002617 	ldw	r4,152(sp)
    a1ec:	8002cc16 	blt	r16,zero,ad20 <___svfiprintf_internal_r+0xf38>
    a1f0:	000b883a 	mov	r5,zero
    a1f4:	800d883a 	mov	r6,r16
    a1f8:	da002c15 	stw	r8,176(sp)
    a1fc:	00080200 	call	8020 <memchr>
    a200:	da002c17 	ldw	r8,176(sp)
    a204:	1002f026 	beq	r2,zero,adc8 <___svfiprintf_internal_r+0xfe0>
    a208:	d8c02617 	ldw	r3,152(sp)
    a20c:	10f9c83a 	sub	fp,r2,r3
    a210:	8700010e 	bge	r16,fp,a218 <___svfiprintf_internal_r+0x430>
    a214:	8039883a 	mov	fp,r16
    a218:	dac01d83 	ldbu	r11,118(sp)
    a21c:	ddc02315 	stw	r23,140(sp)
    a220:	0021883a 	mov	r16,zero
    a224:	003fc606 	br	a140 <__alt_mem_Flash_flash_data+0xf400a140>
    a228:	8c400814 	ori	r17,r17,32
    a22c:	a9000007 	ldb	r4,0(r21)
    a230:	003f3906 	br	9f18 <__alt_mem_Flash_flash_data+0xf4009f18>
    a234:	da802317 	ldw	r10,140(sp)
    a238:	00800c04 	movi	r2,48
    a23c:	dac02317 	ldw	r11,140(sp)
    a240:	52400017 	ldw	r9,0(r10)
    a244:	d8801d05 	stb	r2,116(sp)
    a248:	00801e04 	movi	r2,120
    a24c:	d8801d45 	stb	r2,117(sp)
    a250:	008000b4 	movhi	r2,2
    a254:	10820a04 	addi	r2,r2,2088
    a258:	5ac00104 	addi	r11,r11,4
    a25c:	d8802a15 	stw	r2,168(sp)
    a260:	0015883a 	mov	r10,zero
    a264:	8c400094 	ori	r17,r17,2
    a268:	dac02315 	stw	r11,140(sp)
    a26c:	00800084 	movi	r2,2
    a270:	4807883a 	mov	r3,r9
    a274:	003f9506 	br	a0cc <__alt_mem_Flash_flash_data+0xf400a0cc>
    a278:	d9801d85 	stb	r6,118(sp)
    a27c:	8880080c 	andi	r2,r17,32
    a280:	d8c02317 	ldw	r3,140(sp)
    a284:	10009b26 	beq	r2,zero,a4f4 <___svfiprintf_internal_r+0x70c>
    a288:	dac02317 	ldw	r11,140(sp)
    a28c:	18800117 	ldw	r2,4(r3)
    a290:	1a400017 	ldw	r9,0(r3)
    a294:	5ac00204 	addi	r11,r11,8
    a298:	dac02315 	stw	r11,140(sp)
    a29c:	1015883a 	mov	r10,r2
    a2a0:	10009f16 	blt	r2,zero,a520 <___svfiprintf_internal_r+0x738>
    a2a4:	dac01d83 	ldbu	r11,118(sp)
    a2a8:	8039883a 	mov	fp,r16
    a2ac:	00800044 	movi	r2,1
    a2b0:	4a86b03a 	or	r3,r9,r10
    a2b4:	003f8806 	br	a0d8 <__alt_mem_Flash_flash_data+0xf400a0d8>
    a2b8:	dac02317 	ldw	r11,140(sp)
    a2bc:	00c00044 	movi	r3,1
    a2c0:	da801004 	addi	r10,sp,64
    a2c4:	58800017 	ldw	r2,0(r11)
    a2c8:	5ac00104 	addi	r11,r11,4
    a2cc:	d8c02015 	stw	r3,128(sp)
    a2d0:	d8001d85 	stb	zero,118(sp)
    a2d4:	d8801005 	stb	r2,64(sp)
    a2d8:	dac02315 	stw	r11,140(sp)
    a2dc:	1839883a 	mov	fp,r3
    a2e0:	da802615 	stw	r10,152(sp)
    a2e4:	0021883a 	mov	r16,zero
    a2e8:	8a80008c 	andi	r10,r17,2
    a2ec:	da802215 	stw	r10,136(sp)
    a2f0:	50000326 	beq	r10,zero,a300 <___svfiprintf_internal_r+0x518>
    a2f4:	dac02017 	ldw	r11,128(sp)
    a2f8:	5ac00084 	addi	r11,r11,2
    a2fc:	dac02015 	stw	r11,128(sp)
    a300:	88c0210c 	andi	r3,r17,132
    a304:	d8c02515 	stw	r3,148(sp)
    a308:	1800bd1e 	bne	r3,zero,a600 <___svfiprintf_internal_r+0x818>
    a30c:	da802117 	ldw	r10,132(sp)
    a310:	dac02017 	ldw	r11,128(sp)
    a314:	52edc83a 	sub	r22,r10,r11
    a318:	0580b90e 	bge	zero,r22,a600 <___svfiprintf_internal_r+0x818>
    a31c:	02400404 	movi	r9,16
    a320:	d8c01c17 	ldw	r3,112(sp)
    a324:	d8801b17 	ldw	r2,108(sp)
    a328:	4d829b0e 	bge	r9,r22,ad98 <___svfiprintf_internal_r+0xfb0>
    a32c:	014000b4 	movhi	r5,2
    a330:	29427704 	addi	r5,r5,2524
    a334:	d9402815 	stw	r5,160(sp)
    a338:	05c001c4 	movi	r23,7
    a33c:	00000306 	br	a34c <___svfiprintf_internal_r+0x564>
    a340:	b5bffc04 	addi	r22,r22,-16
    a344:	42000204 	addi	r8,r8,8
    a348:	4d80150e 	bge	r9,r22,a3a0 <___svfiprintf_internal_r+0x5b8>
    a34c:	028000b4 	movhi	r10,2
    a350:	18c00404 	addi	r3,r3,16
    a354:	10800044 	addi	r2,r2,1
    a358:	52827704 	addi	r10,r10,2524
    a35c:	42800015 	stw	r10,0(r8)
    a360:	42400115 	stw	r9,4(r8)
    a364:	d8c01c15 	stw	r3,112(sp)
    a368:	d8801b15 	stw	r2,108(sp)
    a36c:	b8bff40e 	bge	r23,r2,a340 <__alt_mem_Flash_flash_data+0xf400a340>
    a370:	9009883a 	mov	r4,r18
    a374:	a00b883a 	mov	r5,r20
    a378:	d9801a04 	addi	r6,sp,104
    a37c:	da402c15 	stw	r9,176(sp)
    a380:	0009c1c0 	call	9c1c <__ssprint_r>
    a384:	da402c17 	ldw	r9,176(sp)
    a388:	1001531e 	bne	r2,zero,a8d8 <___svfiprintf_internal_r+0xaf0>
    a38c:	b5bffc04 	addi	r22,r22,-16
    a390:	d8c01c17 	ldw	r3,112(sp)
    a394:	d8801b17 	ldw	r2,108(sp)
    a398:	d811883a 	mov	r8,sp
    a39c:	4dbfeb16 	blt	r9,r22,a34c <__alt_mem_Flash_flash_data+0xf400a34c>
    a3a0:	dac02817 	ldw	r11,160(sp)
    a3a4:	b0c7883a 	add	r3,r22,r3
    a3a8:	10800044 	addi	r2,r2,1
    a3ac:	42c00015 	stw	r11,0(r8)
    a3b0:	45800115 	stw	r22,4(r8)
    a3b4:	d8c01c15 	stw	r3,112(sp)
    a3b8:	d8801b15 	stw	r2,108(sp)
    a3bc:	010001c4 	movi	r4,7
    a3c0:	2081dd16 	blt	r4,r2,ab38 <___svfiprintf_internal_r+0xd50>
    a3c4:	42000204 	addi	r8,r8,8
    a3c8:	00008f06 	br	a608 <___svfiprintf_internal_r+0x820>
    a3cc:	008000b4 	movhi	r2,2
    a3d0:	10820504 	addi	r2,r2,2068
    a3d4:	d8802a15 	stw	r2,168(sp)
    a3d8:	d9801d85 	stb	r6,118(sp)
    a3dc:	8880080c 	andi	r2,r17,32
    a3e0:	10003226 	beq	r2,zero,a4ac <___svfiprintf_internal_r+0x6c4>
    a3e4:	da802317 	ldw	r10,140(sp)
    a3e8:	dac02317 	ldw	r11,140(sp)
    a3ec:	52400017 	ldw	r9,0(r10)
    a3f0:	52800117 	ldw	r10,4(r10)
    a3f4:	5ac00204 	addi	r11,r11,8
    a3f8:	dac02315 	stw	r11,140(sp)
    a3fc:	8880004c 	andi	r2,r17,1
    a400:	10003426 	beq	r2,zero,a4d4 <___svfiprintf_internal_r+0x6ec>
    a404:	4a86b03a 	or	r3,r9,r10
    a408:	1802231e 	bne	r3,zero,ac98 <___svfiprintf_internal_r+0xeb0>
    a40c:	00800084 	movi	r2,2
    a410:	003f2e06 	br	a0cc <__alt_mem_Flash_flash_data+0xf400a0cc>
    a414:	a9000007 	ldb	r4,0(r21)
    a418:	a805883a 	mov	r2,r21
    a41c:	21c22426 	beq	r4,r7,acb0 <___svfiprintf_internal_r+0xec8>
    a420:	8c400414 	ori	r17,r17,16
    a424:	003ebc06 	br	9f18 <__alt_mem_Flash_flash_data+0xf4009f18>
    a428:	8c401014 	ori	r17,r17,64
    a42c:	a9000007 	ldb	r4,0(r21)
    a430:	003eb906 	br	9f18 <__alt_mem_Flash_flash_data+0xf4009f18>
    a434:	d9801d85 	stb	r6,118(sp)
    a438:	8880080c 	andi	r2,r17,32
    a43c:	10020d1e 	bne	r2,zero,ac74 <___svfiprintf_internal_r+0xe8c>
    a440:	8880040c 	andi	r2,r17,16
    a444:	10021e1e 	bne	r2,zero,acc0 <___svfiprintf_internal_r+0xed8>
    a448:	8c40100c 	andi	r17,r17,64
    a44c:	88021c26 	beq	r17,zero,acc0 <___svfiprintf_internal_r+0xed8>
    a450:	dac02317 	ldw	r11,140(sp)
    a454:	da802417 	ldw	r10,144(sp)
    a458:	58800017 	ldw	r2,0(r11)
    a45c:	5ac00104 	addi	r11,r11,4
    a460:	dac02315 	stw	r11,140(sp)
    a464:	1280000d 	sth	r10,0(r2)
    a468:	003e8306 	br	9e78 <__alt_mem_Flash_flash_data+0xf4009e78>
    a46c:	8c400054 	ori	r17,r17,1
    a470:	a9000007 	ldb	r4,0(r21)
    a474:	003ea806 	br	9f18 <__alt_mem_Flash_flash_data+0xf4009f18>
    a478:	30803fcc 	andi	r2,r6,255
    a47c:	1080201c 	xori	r2,r2,128
    a480:	10bfe004 	addi	r2,r2,-128
    a484:	1001f91e 	bne	r2,zero,ac6c <___svfiprintf_internal_r+0xe84>
    a488:	01800804 	movi	r6,32
    a48c:	a9000007 	ldb	r4,0(r21)
    a490:	003ea106 	br	9f18 <__alt_mem_Flash_flash_data+0xf4009f18>
    a494:	008000b4 	movhi	r2,2
    a498:	10820a04 	addi	r2,r2,2088
    a49c:	d8802a15 	stw	r2,168(sp)
    a4a0:	d9801d85 	stb	r6,118(sp)
    a4a4:	8880080c 	andi	r2,r17,32
    a4a8:	103fce1e 	bne	r2,zero,a3e4 <__alt_mem_Flash_flash_data+0xf400a3e4>
    a4ac:	8880040c 	andi	r2,r17,16
    a4b0:	1001e526 	beq	r2,zero,ac48 <___svfiprintf_internal_r+0xe60>
    a4b4:	da802317 	ldw	r10,140(sp)
    a4b8:	dac02317 	ldw	r11,140(sp)
    a4bc:	52400017 	ldw	r9,0(r10)
    a4c0:	8880004c 	andi	r2,r17,1
    a4c4:	5ac00104 	addi	r11,r11,4
    a4c8:	dac02315 	stw	r11,140(sp)
    a4cc:	0015883a 	mov	r10,zero
    a4d0:	103fcc1e 	bne	r2,zero,a404 <__alt_mem_Flash_flash_data+0xf400a404>
    a4d4:	00800084 	movi	r2,2
    a4d8:	4a86b03a 	or	r3,r9,r10
    a4dc:	003efb06 	br	a0cc <__alt_mem_Flash_flash_data+0xf400a0cc>
    a4e0:	8c400414 	ori	r17,r17,16
    a4e4:	d9801d85 	stb	r6,118(sp)
    a4e8:	8880080c 	andi	r2,r17,32
    a4ec:	d8c02317 	ldw	r3,140(sp)
    a4f0:	103f651e 	bne	r2,zero,a288 <__alt_mem_Flash_flash_data+0xf400a288>
    a4f4:	8880040c 	andi	r2,r17,16
    a4f8:	1001c61e 	bne	r2,zero,ac14 <___svfiprintf_internal_r+0xe2c>
    a4fc:	8880100c 	andi	r2,r17,64
    a500:	1001c426 	beq	r2,zero,ac14 <___svfiprintf_internal_r+0xe2c>
    a504:	1a40000f 	ldh	r9,0(r3)
    a508:	dac02317 	ldw	r11,140(sp)
    a50c:	4815d7fa 	srai	r10,r9,31
    a510:	5ac00104 	addi	r11,r11,4
    a514:	dac02315 	stw	r11,140(sp)
    a518:	5005883a 	mov	r2,r10
    a51c:	103f610e 	bge	r2,zero,a2a4 <__alt_mem_Flash_flash_data+0xf400a2a4>
    a520:	0253c83a 	sub	r9,zero,r9
    a524:	4804c03a 	cmpne	r2,r9,zero
    a528:	0295c83a 	sub	r10,zero,r10
    a52c:	5095c83a 	sub	r10,r10,r2
    a530:	02c00b44 	movi	r11,45
    a534:	dac01d85 	stb	r11,118(sp)
    a538:	8039883a 	mov	fp,r16
    a53c:	00800044 	movi	r2,1
    a540:	4a86b03a 	or	r3,r9,r10
    a544:	003ee406 	br	a0d8 <__alt_mem_Flash_flash_data+0xf400a0d8>
    a548:	a815883a 	mov	r10,r21
    a54c:	d8002115 	stw	zero,132(sp)
    a550:	20bff404 	addi	r2,r4,-48
    a554:	51000007 	ldb	r4,0(r10)
    a558:	da802117 	ldw	r10,132(sp)
    a55c:	ad400044 	addi	r21,r21,1
    a560:	52c002a4 	muli	r11,r10,10
    a564:	a815883a 	mov	r10,r21
    a568:	5885883a 	add	r2,r11,r2
    a56c:	d8802115 	stw	r2,132(sp)
    a570:	20bff404 	addi	r2,r4,-48
    a574:	28bff72e 	bgeu	r5,r2,a554 <__alt_mem_Flash_flash_data+0xf400a554>
    a578:	20bff804 	addi	r2,r4,-32
    a57c:	18be692e 	bgeu	r3,r2,9f24 <__alt_mem_Flash_flash_data+0xf4009f24>
    a580:	d9801d85 	stb	r6,118(sp)
    a584:	2000ce26 	beq	r4,zero,a8c0 <___svfiprintf_internal_r+0xad8>
    a588:	02800044 	movi	r10,1
    a58c:	dac01004 	addi	r11,sp,64
    a590:	da802015 	stw	r10,128(sp)
    a594:	d9001005 	stb	r4,64(sp)
    a598:	d8001d85 	stb	zero,118(sp)
    a59c:	5039883a 	mov	fp,r10
    a5a0:	dac02615 	stw	r11,152(sp)
    a5a4:	003f4f06 	br	a2e4 <__alt_mem_Flash_flash_data+0xf400a2e4>
    a5a8:	8c402014 	ori	r17,r17,128
    a5ac:	a9000007 	ldb	r4,0(r21)
    a5b0:	003e5906 	br	9f18 <__alt_mem_Flash_flash_data+0xf4009f18>
    a5b4:	01800ac4 	movi	r6,43
    a5b8:	a9000007 	ldb	r4,0(r21)
    a5bc:	003e5606 	br	9f18 <__alt_mem_Flash_flash_data+0xf4009f18>
    a5c0:	a9000007 	ldb	r4,0(r21)
    a5c4:	aa800044 	addi	r10,r21,1
    a5c8:	22420626 	beq	r4,r9,ade4 <___svfiprintf_internal_r+0xffc>
    a5cc:	20bff404 	addi	r2,r4,-48
    a5d0:	502b883a 	mov	r21,r10
    a5d4:	0021883a 	mov	r16,zero
    a5d8:	28be5036 	bltu	r5,r2,9f1c <__alt_mem_Flash_flash_data+0xf4009f1c>
    a5dc:	a9000007 	ldb	r4,0(r21)
    a5e0:	840002a4 	muli	r16,r16,10
    a5e4:	ad400044 	addi	r21,r21,1
    a5e8:	1421883a 	add	r16,r2,r16
    a5ec:	20bff404 	addi	r2,r4,-48
    a5f0:	28bffa2e 	bgeu	r5,r2,a5dc <__alt_mem_Flash_flash_data+0xf400a5dc>
    a5f4:	803e490e 	bge	r16,zero,9f1c <__alt_mem_Flash_flash_data+0xf4009f1c>
    a5f8:	043fffc4 	movi	r16,-1
    a5fc:	003e4706 	br	9f1c <__alt_mem_Flash_flash_data+0xf4009f1c>
    a600:	d8c01c17 	ldw	r3,112(sp)
    a604:	d8801b17 	ldw	r2,108(sp)
    a608:	d9001d87 	ldb	r4,118(sp)
    a60c:	20000b26 	beq	r4,zero,a63c <___svfiprintf_internal_r+0x854>
    a610:	d9001d84 	addi	r4,sp,118
    a614:	18c00044 	addi	r3,r3,1
    a618:	10800044 	addi	r2,r2,1
    a61c:	41000015 	stw	r4,0(r8)
    a620:	01000044 	movi	r4,1
    a624:	41000115 	stw	r4,4(r8)
    a628:	d8c01c15 	stw	r3,112(sp)
    a62c:	d8801b15 	stw	r2,108(sp)
    a630:	010001c4 	movi	r4,7
    a634:	20811e16 	blt	r4,r2,aab0 <___svfiprintf_internal_r+0xcc8>
    a638:	42000204 	addi	r8,r8,8
    a63c:	da802217 	ldw	r10,136(sp)
    a640:	50000b26 	beq	r10,zero,a670 <___svfiprintf_internal_r+0x888>
    a644:	d9001d04 	addi	r4,sp,116
    a648:	18c00084 	addi	r3,r3,2
    a64c:	10800044 	addi	r2,r2,1
    a650:	41000015 	stw	r4,0(r8)
    a654:	01000084 	movi	r4,2
    a658:	41000115 	stw	r4,4(r8)
    a65c:	d8c01c15 	stw	r3,112(sp)
    a660:	d8801b15 	stw	r2,108(sp)
    a664:	010001c4 	movi	r4,7
    a668:	20811a16 	blt	r4,r2,aad4 <___svfiprintf_internal_r+0xcec>
    a66c:	42000204 	addi	r8,r8,8
    a670:	dac02517 	ldw	r11,148(sp)
    a674:	01002004 	movi	r4,128
    a678:	5900a826 	beq	r11,r4,a91c <___svfiprintf_internal_r+0xb34>
    a67c:	8721c83a 	sub	r16,r16,fp
    a680:	0400260e 	bge	zero,r16,a71c <___svfiprintf_internal_r+0x934>
    a684:	01c00404 	movi	r7,16
    a688:	3c019d0e 	bge	r7,r16,ad00 <___svfiprintf_internal_r+0xf18>
    a68c:	010000b4 	movhi	r4,2
    a690:	21027304 	addi	r4,r4,2508
    a694:	d9002215 	stw	r4,136(sp)
    a698:	382f883a 	mov	r23,r7
    a69c:	058001c4 	movi	r22,7
    a6a0:	00000306 	br	a6b0 <___svfiprintf_internal_r+0x8c8>
    a6a4:	843ffc04 	addi	r16,r16,-16
    a6a8:	42000204 	addi	r8,r8,8
    a6ac:	bc00110e 	bge	r23,r16,a6f4 <___svfiprintf_internal_r+0x90c>
    a6b0:	18c00404 	addi	r3,r3,16
    a6b4:	10800044 	addi	r2,r2,1
    a6b8:	44c00015 	stw	r19,0(r8)
    a6bc:	45c00115 	stw	r23,4(r8)
    a6c0:	d8c01c15 	stw	r3,112(sp)
    a6c4:	d8801b15 	stw	r2,108(sp)
    a6c8:	b0bff60e 	bge	r22,r2,a6a4 <__alt_mem_Flash_flash_data+0xf400a6a4>
    a6cc:	9009883a 	mov	r4,r18
    a6d0:	a00b883a 	mov	r5,r20
    a6d4:	d9801a04 	addi	r6,sp,104
    a6d8:	0009c1c0 	call	9c1c <__ssprint_r>
    a6dc:	10007e1e 	bne	r2,zero,a8d8 <___svfiprintf_internal_r+0xaf0>
    a6e0:	843ffc04 	addi	r16,r16,-16
    a6e4:	d8c01c17 	ldw	r3,112(sp)
    a6e8:	d8801b17 	ldw	r2,108(sp)
    a6ec:	d811883a 	mov	r8,sp
    a6f0:	bc3fef16 	blt	r23,r16,a6b0 <__alt_mem_Flash_flash_data+0xf400a6b0>
    a6f4:	da802217 	ldw	r10,136(sp)
    a6f8:	1c07883a 	add	r3,r3,r16
    a6fc:	10800044 	addi	r2,r2,1
    a700:	42800015 	stw	r10,0(r8)
    a704:	44000115 	stw	r16,4(r8)
    a708:	d8c01c15 	stw	r3,112(sp)
    a70c:	d8801b15 	stw	r2,108(sp)
    a710:	010001c4 	movi	r4,7
    a714:	2080ce16 	blt	r4,r2,aa50 <___svfiprintf_internal_r+0xc68>
    a718:	42000204 	addi	r8,r8,8
    a71c:	dac02617 	ldw	r11,152(sp)
    a720:	1f07883a 	add	r3,r3,fp
    a724:	10800044 	addi	r2,r2,1
    a728:	42c00015 	stw	r11,0(r8)
    a72c:	47000115 	stw	fp,4(r8)
    a730:	d8c01c15 	stw	r3,112(sp)
    a734:	d8801b15 	stw	r2,108(sp)
    a738:	010001c4 	movi	r4,7
    a73c:	2080a316 	blt	r4,r2,a9cc <___svfiprintf_internal_r+0xbe4>
    a740:	42000204 	addi	r8,r8,8
    a744:	8c40010c 	andi	r17,r17,4
    a748:	88002b26 	beq	r17,zero,a7f8 <___svfiprintf_internal_r+0xa10>
    a74c:	da802117 	ldw	r10,132(sp)
    a750:	dac02017 	ldw	r11,128(sp)
    a754:	52e1c83a 	sub	r16,r10,r11
    a758:	0400270e 	bge	zero,r16,a7f8 <___svfiprintf_internal_r+0xa10>
    a75c:	04400404 	movi	r17,16
    a760:	d8801b17 	ldw	r2,108(sp)
    a764:	8c01900e 	bge	r17,r16,ada8 <___svfiprintf_internal_r+0xfc0>
    a768:	014000b4 	movhi	r5,2
    a76c:	29427704 	addi	r5,r5,2524
    a770:	d9402815 	stw	r5,160(sp)
    a774:	070001c4 	movi	fp,7
    a778:	00000306 	br	a788 <___svfiprintf_internal_r+0x9a0>
    a77c:	843ffc04 	addi	r16,r16,-16
    a780:	42000204 	addi	r8,r8,8
    a784:	8c00130e 	bge	r17,r16,a7d4 <___svfiprintf_internal_r+0x9ec>
    a788:	028000b4 	movhi	r10,2
    a78c:	18c00404 	addi	r3,r3,16
    a790:	10800044 	addi	r2,r2,1
    a794:	52827704 	addi	r10,r10,2524
    a798:	42800015 	stw	r10,0(r8)
    a79c:	44400115 	stw	r17,4(r8)
    a7a0:	d8c01c15 	stw	r3,112(sp)
    a7a4:	d8801b15 	stw	r2,108(sp)
    a7a8:	e0bff40e 	bge	fp,r2,a77c <__alt_mem_Flash_flash_data+0xf400a77c>
    a7ac:	9009883a 	mov	r4,r18
    a7b0:	a00b883a 	mov	r5,r20
    a7b4:	d9801a04 	addi	r6,sp,104
    a7b8:	0009c1c0 	call	9c1c <__ssprint_r>
    a7bc:	1000461e 	bne	r2,zero,a8d8 <___svfiprintf_internal_r+0xaf0>
    a7c0:	843ffc04 	addi	r16,r16,-16
    a7c4:	d8c01c17 	ldw	r3,112(sp)
    a7c8:	d8801b17 	ldw	r2,108(sp)
    a7cc:	d811883a 	mov	r8,sp
    a7d0:	8c3fed16 	blt	r17,r16,a788 <__alt_mem_Flash_flash_data+0xf400a788>
    a7d4:	dac02817 	ldw	r11,160(sp)
    a7d8:	1c07883a 	add	r3,r3,r16
    a7dc:	10800044 	addi	r2,r2,1
    a7e0:	42c00015 	stw	r11,0(r8)
    a7e4:	44000115 	stw	r16,4(r8)
    a7e8:	d8c01c15 	stw	r3,112(sp)
    a7ec:	d8801b15 	stw	r2,108(sp)
    a7f0:	010001c4 	movi	r4,7
    a7f4:	2080fd16 	blt	r4,r2,abec <___svfiprintf_internal_r+0xe04>
    a7f8:	dd802017 	ldw	r22,128(sp)
    a7fc:	da802117 	ldw	r10,132(sp)
    a800:	b280010e 	bge	r22,r10,a808 <___svfiprintf_internal_r+0xa20>
    a804:	502d883a 	mov	r22,r10
    a808:	dac02417 	ldw	r11,144(sp)
    a80c:	5d97883a 	add	r11,r11,r22
    a810:	dac02415 	stw	r11,144(sp)
    a814:	1800751e 	bne	r3,zero,a9ec <___svfiprintf_internal_r+0xc04>
    a818:	a8800007 	ldb	r2,0(r21)
    a81c:	d8001b15 	stw	zero,108(sp)
    a820:	d811883a 	mov	r8,sp
    a824:	103d961e 	bne	r2,zero,9e80 <__alt_mem_Flash_flash_data+0xf4009e80>
    a828:	a82d883a 	mov	r22,r21
    a82c:	003dad06 	br	9ee4 <__alt_mem_Flash_flash_data+0xf4009ee4>
    a830:	10803fcc 	andi	r2,r2,255
    a834:	00c00044 	movi	r3,1
    a838:	10fe2f1e 	bne	r2,r3,a0f8 <__alt_mem_Flash_flash_data+0xf400a0f8>
    a83c:	5000e026 	beq	r10,zero,abc0 <___svfiprintf_internal_r+0xdd8>
    a840:	dc002015 	stw	r16,128(sp)
    a844:	dc402215 	stw	r17,136(sp)
    a848:	dd801a04 	addi	r22,sp,104
    a84c:	402f883a 	mov	r23,r8
    a850:	5839883a 	mov	fp,r11
    a854:	4821883a 	mov	r16,r9
    a858:	5023883a 	mov	r17,r10
    a85c:	8009883a 	mov	r4,r16
    a860:	880b883a 	mov	r5,r17
    a864:	01800284 	movi	r6,10
    a868:	000f883a 	mov	r7,zero
    a86c:	000d19c0 	call	d19c <__umoddi3>
    a870:	10800c04 	addi	r2,r2,48
    a874:	b5bfffc4 	addi	r22,r22,-1
    a878:	8009883a 	mov	r4,r16
    a87c:	880b883a 	mov	r5,r17
    a880:	01800284 	movi	r6,10
    a884:	000f883a 	mov	r7,zero
    a888:	b0800005 	stb	r2,0(r22)
    a88c:	000cbdc0 	call	cbdc <__udivdi3>
    a890:	1021883a 	mov	r16,r2
    a894:	10c4b03a 	or	r2,r2,r3
    a898:	1823883a 	mov	r17,r3
    a89c:	103fef1e 	bne	r2,zero,a85c <__alt_mem_Flash_flash_data+0xf400a85c>
    a8a0:	da801e17 	ldw	r10,120(sp)
    a8a4:	e017883a 	mov	r11,fp
    a8a8:	dc002017 	ldw	r16,128(sp)
    a8ac:	dc402217 	ldw	r17,136(sp)
    a8b0:	b811883a 	mov	r8,r23
    a8b4:	dd802615 	stw	r22,152(sp)
    a8b8:	55b9c83a 	sub	fp,r10,r22
    a8bc:	003e2006 	br	a140 <__alt_mem_Flash_flash_data+0xf400a140>
    a8c0:	d8801c17 	ldw	r2,112(sp)
    a8c4:	10000426 	beq	r2,zero,a8d8 <___svfiprintf_internal_r+0xaf0>
    a8c8:	d9002917 	ldw	r4,164(sp)
    a8cc:	d9402717 	ldw	r5,156(sp)
    a8d0:	d9801a04 	addi	r6,sp,104
    a8d4:	0009c1c0 	call	9c1c <__ssprint_r>
    a8d8:	da802717 	ldw	r10,156(sp)
    a8dc:	5080030b 	ldhu	r2,12(r10)
    a8e0:	1080100c 	andi	r2,r2,64
    a8e4:	1000511e 	bne	r2,zero,aa2c <___svfiprintf_internal_r+0xc44>
    a8e8:	d8802417 	ldw	r2,144(sp)
    a8ec:	dfc03617 	ldw	ra,216(sp)
    a8f0:	df003517 	ldw	fp,212(sp)
    a8f4:	ddc03417 	ldw	r23,208(sp)
    a8f8:	dd803317 	ldw	r22,204(sp)
    a8fc:	dd403217 	ldw	r21,200(sp)
    a900:	dd003117 	ldw	r20,196(sp)
    a904:	dcc03017 	ldw	r19,192(sp)
    a908:	dc802f17 	ldw	r18,188(sp)
    a90c:	dc402e17 	ldw	r17,184(sp)
    a910:	dc002d17 	ldw	r16,180(sp)
    a914:	dec03704 	addi	sp,sp,220
    a918:	f800283a 	ret
    a91c:	da802117 	ldw	r10,132(sp)
    a920:	dac02017 	ldw	r11,128(sp)
    a924:	52edc83a 	sub	r22,r10,r11
    a928:	05bf540e 	bge	zero,r22,a67c <__alt_mem_Flash_flash_data+0xf400a67c>
    a92c:	02400404 	movi	r9,16
    a930:	4d81210e 	bge	r9,r22,adb8 <___svfiprintf_internal_r+0xfd0>
    a934:	014000b4 	movhi	r5,2
    a938:	29427304 	addi	r5,r5,2508
    a93c:	d9402215 	stw	r5,136(sp)
    a940:	05c001c4 	movi	r23,7
    a944:	00000306 	br	a954 <___svfiprintf_internal_r+0xb6c>
    a948:	b5bffc04 	addi	r22,r22,-16
    a94c:	42000204 	addi	r8,r8,8
    a950:	4d80130e 	bge	r9,r22,a9a0 <___svfiprintf_internal_r+0xbb8>
    a954:	18c00404 	addi	r3,r3,16
    a958:	10800044 	addi	r2,r2,1
    a95c:	44c00015 	stw	r19,0(r8)
    a960:	42400115 	stw	r9,4(r8)
    a964:	d8c01c15 	stw	r3,112(sp)
    a968:	d8801b15 	stw	r2,108(sp)
    a96c:	b8bff60e 	bge	r23,r2,a948 <__alt_mem_Flash_flash_data+0xf400a948>
    a970:	9009883a 	mov	r4,r18
    a974:	a00b883a 	mov	r5,r20
    a978:	d9801a04 	addi	r6,sp,104
    a97c:	da402c15 	stw	r9,176(sp)
    a980:	0009c1c0 	call	9c1c <__ssprint_r>
    a984:	da402c17 	ldw	r9,176(sp)
    a988:	103fd31e 	bne	r2,zero,a8d8 <__alt_mem_Flash_flash_data+0xf400a8d8>
    a98c:	b5bffc04 	addi	r22,r22,-16
    a990:	d8c01c17 	ldw	r3,112(sp)
    a994:	d8801b17 	ldw	r2,108(sp)
    a998:	d811883a 	mov	r8,sp
    a99c:	4dbfed16 	blt	r9,r22,a954 <__alt_mem_Flash_flash_data+0xf400a954>
    a9a0:	da802217 	ldw	r10,136(sp)
    a9a4:	1d87883a 	add	r3,r3,r22
    a9a8:	10800044 	addi	r2,r2,1
    a9ac:	42800015 	stw	r10,0(r8)
    a9b0:	45800115 	stw	r22,4(r8)
    a9b4:	d8c01c15 	stw	r3,112(sp)
    a9b8:	d8801b15 	stw	r2,108(sp)
    a9bc:	010001c4 	movi	r4,7
    a9c0:	2080c616 	blt	r4,r2,acdc <___svfiprintf_internal_r+0xef4>
    a9c4:	42000204 	addi	r8,r8,8
    a9c8:	003f2c06 	br	a67c <__alt_mem_Flash_flash_data+0xf400a67c>
    a9cc:	9009883a 	mov	r4,r18
    a9d0:	a00b883a 	mov	r5,r20
    a9d4:	d9801a04 	addi	r6,sp,104
    a9d8:	0009c1c0 	call	9c1c <__ssprint_r>
    a9dc:	103fbe1e 	bne	r2,zero,a8d8 <__alt_mem_Flash_flash_data+0xf400a8d8>
    a9e0:	d8c01c17 	ldw	r3,112(sp)
    a9e4:	d811883a 	mov	r8,sp
    a9e8:	003f5606 	br	a744 <__alt_mem_Flash_flash_data+0xf400a744>
    a9ec:	9009883a 	mov	r4,r18
    a9f0:	a00b883a 	mov	r5,r20
    a9f4:	d9801a04 	addi	r6,sp,104
    a9f8:	0009c1c0 	call	9c1c <__ssprint_r>
    a9fc:	103f8626 	beq	r2,zero,a818 <__alt_mem_Flash_flash_data+0xf400a818>
    aa00:	003fb506 	br	a8d8 <__alt_mem_Flash_flash_data+0xf400a8d8>
    aa04:	10803fcc 	andi	r2,r2,255
    aa08:	10003b1e 	bne	r2,zero,aaf8 <___svfiprintf_internal_r+0xd10>
    aa0c:	8880004c 	andi	r2,r17,1
    aa10:	10007d26 	beq	r2,zero,ac08 <___svfiprintf_internal_r+0xe20>
    aa14:	00800c04 	movi	r2,48
    aa18:	d8c019c4 	addi	r3,sp,103
    aa1c:	d88019c5 	stb	r2,103(sp)
    aa20:	df002b17 	ldw	fp,172(sp)
    aa24:	d8c02615 	stw	r3,152(sp)
    aa28:	003dc506 	br	a140 <__alt_mem_Flash_flash_data+0xf400a140>
    aa2c:	00bfffc4 	movi	r2,-1
    aa30:	003fae06 	br	a8ec <__alt_mem_Flash_flash_data+0xf400a8ec>
    aa34:	9009883a 	mov	r4,r18
    aa38:	a00b883a 	mov	r5,r20
    aa3c:	d9801a04 	addi	r6,sp,104
    aa40:	0009c1c0 	call	9c1c <__ssprint_r>
    aa44:	103fa41e 	bne	r2,zero,a8d8 <__alt_mem_Flash_flash_data+0xf400a8d8>
    aa48:	d811883a 	mov	r8,sp
    aa4c:	003d2206 	br	9ed8 <__alt_mem_Flash_flash_data+0xf4009ed8>
    aa50:	9009883a 	mov	r4,r18
    aa54:	a00b883a 	mov	r5,r20
    aa58:	d9801a04 	addi	r6,sp,104
    aa5c:	0009c1c0 	call	9c1c <__ssprint_r>
    aa60:	103f9d1e 	bne	r2,zero,a8d8 <__alt_mem_Flash_flash_data+0xf400a8d8>
    aa64:	d8c01c17 	ldw	r3,112(sp)
    aa68:	d8801b17 	ldw	r2,108(sp)
    aa6c:	d811883a 	mov	r8,sp
    aa70:	003f2a06 	br	a71c <__alt_mem_Flash_flash_data+0xf400a71c>
    aa74:	d9402a17 	ldw	r5,168(sp)
    aa78:	d8c01a04 	addi	r3,sp,104
    aa7c:	488003cc 	andi	r2,r9,15
    aa80:	5008973a 	slli	r4,r10,28
    aa84:	2885883a 	add	r2,r5,r2
    aa88:	4812d13a 	srli	r9,r9,4
    aa8c:	10800003 	ldbu	r2,0(r2)
    aa90:	5014d13a 	srli	r10,r10,4
    aa94:	18ffffc4 	addi	r3,r3,-1
    aa98:	2252b03a 	or	r9,r4,r9
    aa9c:	18800005 	stb	r2,0(r3)
    aaa0:	4a84b03a 	or	r2,r9,r10
    aaa4:	103ff51e 	bne	r2,zero,aa7c <__alt_mem_Flash_flash_data+0xf400aa7c>
    aaa8:	d8c02615 	stw	r3,152(sp)
    aaac:	003da206 	br	a138 <__alt_mem_Flash_flash_data+0xf400a138>
    aab0:	9009883a 	mov	r4,r18
    aab4:	a00b883a 	mov	r5,r20
    aab8:	d9801a04 	addi	r6,sp,104
    aabc:	0009c1c0 	call	9c1c <__ssprint_r>
    aac0:	103f851e 	bne	r2,zero,a8d8 <__alt_mem_Flash_flash_data+0xf400a8d8>
    aac4:	d8c01c17 	ldw	r3,112(sp)
    aac8:	d8801b17 	ldw	r2,108(sp)
    aacc:	d811883a 	mov	r8,sp
    aad0:	003eda06 	br	a63c <__alt_mem_Flash_flash_data+0xf400a63c>
    aad4:	9009883a 	mov	r4,r18
    aad8:	a00b883a 	mov	r5,r20
    aadc:	d9801a04 	addi	r6,sp,104
    aae0:	0009c1c0 	call	9c1c <__ssprint_r>
    aae4:	103f7c1e 	bne	r2,zero,a8d8 <__alt_mem_Flash_flash_data+0xf400a8d8>
    aae8:	d8c01c17 	ldw	r3,112(sp)
    aaec:	d8801b17 	ldw	r2,108(sp)
    aaf0:	d811883a 	mov	r8,sp
    aaf4:	003ede06 	br	a670 <__alt_mem_Flash_flash_data+0xf400a670>
    aaf8:	da801a04 	addi	r10,sp,104
    aafc:	da802615 	stw	r10,152(sp)
    ab00:	003d8f06 	br	a140 <__alt_mem_Flash_flash_data+0xf400a140>
    ab04:	8880040c 	andi	r2,r17,16
    ab08:	10004c1e 	bne	r2,zero,ac3c <___svfiprintf_internal_r+0xe54>
    ab0c:	8880100c 	andi	r2,r17,64
    ab10:	da802317 	ldw	r10,140(sp)
    ab14:	10004a26 	beq	r2,zero,ac40 <___svfiprintf_internal_r+0xe58>
    ab18:	5240000b 	ldhu	r9,0(r10)
    ab1c:	dac02317 	ldw	r11,140(sp)
    ab20:	0015883a 	mov	r10,zero
    ab24:	00800044 	movi	r2,1
    ab28:	5ac00104 	addi	r11,r11,4
    ab2c:	dac02315 	stw	r11,140(sp)
    ab30:	4807883a 	mov	r3,r9
    ab34:	003d6506 	br	a0cc <__alt_mem_Flash_flash_data+0xf400a0cc>
    ab38:	9009883a 	mov	r4,r18
    ab3c:	a00b883a 	mov	r5,r20
    ab40:	d9801a04 	addi	r6,sp,104
    ab44:	0009c1c0 	call	9c1c <__ssprint_r>
    ab48:	103f631e 	bne	r2,zero,a8d8 <__alt_mem_Flash_flash_data+0xf400a8d8>
    ab4c:	d8c01c17 	ldw	r3,112(sp)
    ab50:	d8801b17 	ldw	r2,108(sp)
    ab54:	d811883a 	mov	r8,sp
    ab58:	003eab06 	br	a608 <__alt_mem_Flash_flash_data+0xf400a608>
    ab5c:	8880040c 	andi	r2,r17,16
    ab60:	1000331e 	bne	r2,zero,ac30 <___svfiprintf_internal_r+0xe48>
    ab64:	8880100c 	andi	r2,r17,64
    ab68:	da802317 	ldw	r10,140(sp)
    ab6c:	10003126 	beq	r2,zero,ac34 <___svfiprintf_internal_r+0xe4c>
    ab70:	5240000b 	ldhu	r9,0(r10)
    ab74:	dac02317 	ldw	r11,140(sp)
    ab78:	0015883a 	mov	r10,zero
    ab7c:	0005883a 	mov	r2,zero
    ab80:	5ac00104 	addi	r11,r11,4
    ab84:	dac02315 	stw	r11,140(sp)
    ab88:	4807883a 	mov	r3,r9
    ab8c:	003d4f06 	br	a0cc <__alt_mem_Flash_flash_data+0xf400a0cc>
    ab90:	10803fcc 	andi	r2,r2,255
    ab94:	1080201c 	xori	r2,r2,128
    ab98:	10bfe004 	addi	r2,r2,-128
    ab9c:	01000c04 	movi	r4,48
    aba0:	11005b26 	beq	r2,r4,ad10 <___svfiprintf_internal_r+0xf28>
    aba4:	da802617 	ldw	r10,152(sp)
    aba8:	d8801e17 	ldw	r2,120(sp)
    abac:	193fffc5 	stb	r4,-1(r3)
    abb0:	52bfffc4 	addi	r10,r10,-1
    abb4:	da802615 	stw	r10,152(sp)
    abb8:	12b9c83a 	sub	fp,r2,r10
    abbc:	003d6006 	br	a140 <__alt_mem_Flash_flash_data+0xf400a140>
    abc0:	00800244 	movi	r2,9
    abc4:	127f1e36 	bltu	r2,r9,a840 <__alt_mem_Flash_flash_data+0xf400a840>
    abc8:	4a400c04 	addi	r9,r9,48
    abcc:	d8c019c4 	addi	r3,sp,103
    abd0:	da4019c5 	stb	r9,103(sp)
    abd4:	df002b17 	ldw	fp,172(sp)
    abd8:	d8c02615 	stw	r3,152(sp)
    abdc:	003d5806 	br	a140 <__alt_mem_Flash_flash_data+0xf400a140>
    abe0:	d8802315 	stw	r2,140(sp)
    abe4:	a9000007 	ldb	r4,0(r21)
    abe8:	003ccb06 	br	9f18 <__alt_mem_Flash_flash_data+0xf4009f18>
    abec:	9009883a 	mov	r4,r18
    abf0:	a00b883a 	mov	r5,r20
    abf4:	d9801a04 	addi	r6,sp,104
    abf8:	0009c1c0 	call	9c1c <__ssprint_r>
    abfc:	103f361e 	bne	r2,zero,a8d8 <__alt_mem_Flash_flash_data+0xf400a8d8>
    ac00:	d8c01c17 	ldw	r3,112(sp)
    ac04:	003efc06 	br	a7f8 <__alt_mem_Flash_flash_data+0xf400a7f8>
    ac08:	d8c01a04 	addi	r3,sp,104
    ac0c:	d8c02615 	stw	r3,152(sp)
    ac10:	003d4b06 	br	a140 <__alt_mem_Flash_flash_data+0xf400a140>
    ac14:	da802317 	ldw	r10,140(sp)
    ac18:	1a400017 	ldw	r9,0(r3)
    ac1c:	52800104 	addi	r10,r10,4
    ac20:	da802315 	stw	r10,140(sp)
    ac24:	4815d7fa 	srai	r10,r9,31
    ac28:	5005883a 	mov	r2,r10
    ac2c:	003d9c06 	br	a2a0 <__alt_mem_Flash_flash_data+0xf400a2a0>
    ac30:	da802317 	ldw	r10,140(sp)
    ac34:	52400017 	ldw	r9,0(r10)
    ac38:	003fce06 	br	ab74 <__alt_mem_Flash_flash_data+0xf400ab74>
    ac3c:	da802317 	ldw	r10,140(sp)
    ac40:	52400017 	ldw	r9,0(r10)
    ac44:	003fb506 	br	ab1c <__alt_mem_Flash_flash_data+0xf400ab1c>
    ac48:	8880100c 	andi	r2,r17,64
    ac4c:	da802317 	ldw	r10,140(sp)
    ac50:	103e1926 	beq	r2,zero,a4b8 <__alt_mem_Flash_flash_data+0xf400a4b8>
    ac54:	dac02317 	ldw	r11,140(sp)
    ac58:	5240000b 	ldhu	r9,0(r10)
    ac5c:	0015883a 	mov	r10,zero
    ac60:	5ac00104 	addi	r11,r11,4
    ac64:	dac02315 	stw	r11,140(sp)
    ac68:	003de406 	br	a3fc <__alt_mem_Flash_flash_data+0xf400a3fc>
    ac6c:	a9000007 	ldb	r4,0(r21)
    ac70:	003ca906 	br	9f18 <__alt_mem_Flash_flash_data+0xf4009f18>
    ac74:	dac02317 	ldw	r11,140(sp)
    ac78:	da802417 	ldw	r10,144(sp)
    ac7c:	58800017 	ldw	r2,0(r11)
    ac80:	5007d7fa 	srai	r3,r10,31
    ac84:	5ac00104 	addi	r11,r11,4
    ac88:	dac02315 	stw	r11,140(sp)
    ac8c:	12800015 	stw	r10,0(r2)
    ac90:	10c00115 	stw	r3,4(r2)
    ac94:	003c7806 	br	9e78 <__alt_mem_Flash_flash_data+0xf4009e78>
    ac98:	00800c04 	movi	r2,48
    ac9c:	d8801d05 	stb	r2,116(sp)
    aca0:	d9001d45 	stb	r4,117(sp)
    aca4:	8c400094 	ori	r17,r17,2
    aca8:	00800084 	movi	r2,2
    acac:	003d0706 	br	a0cc <__alt_mem_Flash_flash_data+0xf400a0cc>
    acb0:	ad400044 	addi	r21,r21,1
    acb4:	8c400814 	ori	r17,r17,32
    acb8:	11000047 	ldb	r4,1(r2)
    acbc:	003c9606 	br	9f18 <__alt_mem_Flash_flash_data+0xf4009f18>
    acc0:	dac02317 	ldw	r11,140(sp)
    acc4:	da802417 	ldw	r10,144(sp)
    acc8:	58800017 	ldw	r2,0(r11)
    accc:	5ac00104 	addi	r11,r11,4
    acd0:	dac02315 	stw	r11,140(sp)
    acd4:	12800015 	stw	r10,0(r2)
    acd8:	003c6706 	br	9e78 <__alt_mem_Flash_flash_data+0xf4009e78>
    acdc:	9009883a 	mov	r4,r18
    ace0:	a00b883a 	mov	r5,r20
    ace4:	d9801a04 	addi	r6,sp,104
    ace8:	0009c1c0 	call	9c1c <__ssprint_r>
    acec:	103efa1e 	bne	r2,zero,a8d8 <__alt_mem_Flash_flash_data+0xf400a8d8>
    acf0:	d8c01c17 	ldw	r3,112(sp)
    acf4:	d8801b17 	ldw	r2,108(sp)
    acf8:	d811883a 	mov	r8,sp
    acfc:	003e5f06 	br	a67c <__alt_mem_Flash_flash_data+0xf400a67c>
    ad00:	02c000b4 	movhi	r11,2
    ad04:	5ac27304 	addi	r11,r11,2508
    ad08:	dac02215 	stw	r11,136(sp)
    ad0c:	003e7906 	br	a6f4 <__alt_mem_Flash_flash_data+0xf400a6f4>
    ad10:	da801e17 	ldw	r10,120(sp)
    ad14:	d8c02617 	ldw	r3,152(sp)
    ad18:	50f9c83a 	sub	fp,r10,r3
    ad1c:	003d0806 	br	a140 <__alt_mem_Flash_flash_data+0xf400a140>
    ad20:	da002c15 	stw	r8,176(sp)
    ad24:	00012240 	call	1224 <strlen>
    ad28:	1039883a 	mov	fp,r2
    ad2c:	dac01d83 	ldbu	r11,118(sp)
    ad30:	ddc02315 	stw	r23,140(sp)
    ad34:	0021883a 	mov	r16,zero
    ad38:	da002c17 	ldw	r8,176(sp)
    ad3c:	003d0006 	br	a140 <__alt_mem_Flash_flash_data+0xf400a140>
    ad40:	00800184 	movi	r2,6
    ad44:	1400012e 	bgeu	r2,r16,ad4c <___svfiprintf_internal_r+0xf64>
    ad48:	1021883a 	mov	r16,r2
    ad4c:	8039883a 	mov	fp,r16
    ad50:	802d883a 	mov	r22,r16
    ad54:	80002116 	blt	r16,zero,addc <___svfiprintf_internal_r+0xff4>
    ad58:	008000b4 	movhi	r2,2
    ad5c:	10820f04 	addi	r2,r2,2108
    ad60:	dd802015 	stw	r22,128(sp)
    ad64:	ddc02315 	stw	r23,140(sp)
    ad68:	d8802615 	stw	r2,152(sp)
    ad6c:	003d5d06 	br	a2e4 <__alt_mem_Flash_flash_data+0xf400a2e4>
    ad70:	04001004 	movi	r16,64
    ad74:	800b883a 	mov	r5,r16
    ad78:	00007280 	call	728 <_malloc_r>
    ad7c:	da802717 	ldw	r10,156(sp)
    ad80:	50800015 	stw	r2,0(r10)
    ad84:	50800415 	stw	r2,16(r10)
    ad88:	10002026 	beq	r2,zero,ae0c <___svfiprintf_internal_r+0x1024>
    ad8c:	da802717 	ldw	r10,156(sp)
    ad90:	54000515 	stw	r16,20(r10)
    ad94:	003c2806 	br	9e38 <__alt_mem_Flash_flash_data+0xf4009e38>
    ad98:	010000b4 	movhi	r4,2
    ad9c:	21027704 	addi	r4,r4,2524
    ada0:	d9002815 	stw	r4,160(sp)
    ada4:	003d7e06 	br	a3a0 <__alt_mem_Flash_flash_data+0xf400a3a0>
    ada8:	010000b4 	movhi	r4,2
    adac:	21027704 	addi	r4,r4,2524
    adb0:	d9002815 	stw	r4,160(sp)
    adb4:	003e8706 	br	a7d4 <__alt_mem_Flash_flash_data+0xf400a7d4>
    adb8:	010000b4 	movhi	r4,2
    adbc:	21027304 	addi	r4,r4,2508
    adc0:	d9002215 	stw	r4,136(sp)
    adc4:	003ef606 	br	a9a0 <__alt_mem_Flash_flash_data+0xf400a9a0>
    adc8:	8039883a 	mov	fp,r16
    adcc:	dac01d83 	ldbu	r11,118(sp)
    add0:	ddc02315 	stw	r23,140(sp)
    add4:	0021883a 	mov	r16,zero
    add8:	003cd906 	br	a140 <__alt_mem_Flash_flash_data+0xf400a140>
    addc:	002d883a 	mov	r22,zero
    ade0:	003fdd06 	br	ad58 <__alt_mem_Flash_flash_data+0xf400ad58>
    ade4:	dac02317 	ldw	r11,140(sp)
    ade8:	a805883a 	mov	r2,r21
    adec:	502b883a 	mov	r21,r10
    adf0:	5c000017 	ldw	r16,0(r11)
    adf4:	59000104 	addi	r4,r11,4
    adf8:	d9002315 	stw	r4,140(sp)
    adfc:	803fae0e 	bge	r16,zero,acb8 <__alt_mem_Flash_flash_data+0xf400acb8>
    ae00:	043fffc4 	movi	r16,-1
    ae04:	11000047 	ldb	r4,1(r2)
    ae08:	003c4306 	br	9f18 <__alt_mem_Flash_flash_data+0xf4009f18>
    ae0c:	dac02917 	ldw	r11,164(sp)
    ae10:	00800304 	movi	r2,12
    ae14:	58800015 	stw	r2,0(r11)
    ae18:	00bfffc4 	movi	r2,-1
    ae1c:	003eb306 	br	a8ec <__alt_mem_Flash_flash_data+0xf400a8ec>

0000ae20 <__sprint_r.part.0>:
    ae20:	28801917 	ldw	r2,100(r5)
    ae24:	defff604 	addi	sp,sp,-40
    ae28:	dd400515 	stw	r21,20(sp)
    ae2c:	dcc00315 	stw	r19,12(sp)
    ae30:	dfc00915 	stw	ra,36(sp)
    ae34:	df000815 	stw	fp,32(sp)
    ae38:	ddc00715 	stw	r23,28(sp)
    ae3c:	dd800615 	stw	r22,24(sp)
    ae40:	dd000415 	stw	r20,16(sp)
    ae44:	dc800215 	stw	r18,8(sp)
    ae48:	dc400115 	stw	r17,4(sp)
    ae4c:	dc000015 	stw	r16,0(sp)
    ae50:	1088000c 	andi	r2,r2,8192
    ae54:	2827883a 	mov	r19,r5
    ae58:	302b883a 	mov	r21,r6
    ae5c:	10002d26 	beq	r2,zero,af14 <__sprint_r.part.0+0xf4>
    ae60:	30800217 	ldw	r2,8(r6)
    ae64:	35800017 	ldw	r22,0(r6)
    ae68:	10002826 	beq	r2,zero,af0c <__sprint_r.part.0+0xec>
    ae6c:	2029883a 	mov	r20,r4
    ae70:	b5c00104 	addi	r23,r22,4
    ae74:	04bfffc4 	movi	r18,-1
    ae78:	bc400017 	ldw	r17,0(r23)
    ae7c:	b4000017 	ldw	r16,0(r22)
    ae80:	0039883a 	mov	fp,zero
    ae84:	8822d0ba 	srli	r17,r17,2
    ae88:	04400316 	blt	zero,r17,ae98 <__sprint_r.part.0+0x78>
    ae8c:	00001806 	br	aef0 <__sprint_r.part.0+0xd0>
    ae90:	84000104 	addi	r16,r16,4
    ae94:	8f001526 	beq	r17,fp,aeec <__sprint_r.part.0+0xcc>
    ae98:	81400017 	ldw	r5,0(r16)
    ae9c:	a009883a 	mov	r4,r20
    aea0:	980d883a 	mov	r6,r19
    aea4:	000c55c0 	call	c55c <_fputwc_r>
    aea8:	e7000044 	addi	fp,fp,1
    aeac:	14bff81e 	bne	r2,r18,ae90 <__alt_mem_Flash_flash_data+0xf400ae90>
    aeb0:	9005883a 	mov	r2,r18
    aeb4:	a8000215 	stw	zero,8(r21)
    aeb8:	a8000115 	stw	zero,4(r21)
    aebc:	dfc00917 	ldw	ra,36(sp)
    aec0:	df000817 	ldw	fp,32(sp)
    aec4:	ddc00717 	ldw	r23,28(sp)
    aec8:	dd800617 	ldw	r22,24(sp)
    aecc:	dd400517 	ldw	r21,20(sp)
    aed0:	dd000417 	ldw	r20,16(sp)
    aed4:	dcc00317 	ldw	r19,12(sp)
    aed8:	dc800217 	ldw	r18,8(sp)
    aedc:	dc400117 	ldw	r17,4(sp)
    aee0:	dc000017 	ldw	r16,0(sp)
    aee4:	dec00a04 	addi	sp,sp,40
    aee8:	f800283a 	ret
    aeec:	a8800217 	ldw	r2,8(r21)
    aef0:	8c63883a 	add	r17,r17,r17
    aef4:	8c63883a 	add	r17,r17,r17
    aef8:	1445c83a 	sub	r2,r2,r17
    aefc:	a8800215 	stw	r2,8(r21)
    af00:	b5800204 	addi	r22,r22,8
    af04:	bdc00204 	addi	r23,r23,8
    af08:	103fdb1e 	bne	r2,zero,ae78 <__alt_mem_Flash_flash_data+0xf400ae78>
    af0c:	0005883a 	mov	r2,zero
    af10:	003fe806 	br	aeb4 <__alt_mem_Flash_flash_data+0xf400aeb4>
    af14:	00077400 	call	7740 <__sfvwrite_r>
    af18:	003fe606 	br	aeb4 <__alt_mem_Flash_flash_data+0xf400aeb4>

0000af1c <__sprint_r>:
    af1c:	30c00217 	ldw	r3,8(r6)
    af20:	18000126 	beq	r3,zero,af28 <__sprint_r+0xc>
    af24:	000ae201 	jmpi	ae20 <__sprint_r.part.0>
    af28:	30000115 	stw	zero,4(r6)
    af2c:	0005883a 	mov	r2,zero
    af30:	f800283a 	ret

0000af34 <___vfiprintf_internal_r>:
    af34:	deffca04 	addi	sp,sp,-216
    af38:	dd803215 	stw	r22,200(sp)
    af3c:	dd403115 	stw	r21,196(sp)
    af40:	dfc03515 	stw	ra,212(sp)
    af44:	df003415 	stw	fp,208(sp)
    af48:	ddc03315 	stw	r23,204(sp)
    af4c:	dd003015 	stw	r20,192(sp)
    af50:	dcc02f15 	stw	r19,188(sp)
    af54:	dc802e15 	stw	r18,184(sp)
    af58:	dc402d15 	stw	r17,180(sp)
    af5c:	dc002c15 	stw	r16,176(sp)
    af60:	d9002015 	stw	r4,128(sp)
    af64:	d9c02215 	stw	r7,136(sp)
    af68:	282b883a 	mov	r21,r5
    af6c:	302d883a 	mov	r22,r6
    af70:	20000226 	beq	r4,zero,af7c <___vfiprintf_internal_r+0x48>
    af74:	20800e17 	ldw	r2,56(r4)
    af78:	1001b126 	beq	r2,zero,b640 <___vfiprintf_internal_r+0x70c>
    af7c:	a880030b 	ldhu	r2,12(r21)
    af80:	10c8000c 	andi	r3,r2,8192
    af84:	1800061e 	bne	r3,zero,afa0 <___vfiprintf_internal_r+0x6c>
    af88:	a9001917 	ldw	r4,100(r21)
    af8c:	00f7ffc4 	movi	r3,-8193
    af90:	10880014 	ori	r2,r2,8192
    af94:	20c6703a 	and	r3,r4,r3
    af98:	a880030d 	sth	r2,12(r21)
    af9c:	a8c01915 	stw	r3,100(r21)
    afa0:	10c0020c 	andi	r3,r2,8
    afa4:	18018926 	beq	r3,zero,b5cc <___vfiprintf_internal_r+0x698>
    afa8:	a8c00417 	ldw	r3,16(r21)
    afac:	18018726 	beq	r3,zero,b5cc <___vfiprintf_internal_r+0x698>
    afb0:	1080068c 	andi	r2,r2,26
    afb4:	00c00284 	movi	r3,10
    afb8:	10c18c26 	beq	r2,r3,b5ec <___vfiprintf_internal_r+0x6b8>
    afbc:	d8801a04 	addi	r2,sp,104
    afc0:	d8c019c4 	addi	r3,sp,103
    afc4:	070000b4 	movhi	fp,2
    afc8:	05c000b4 	movhi	r23,2
    afcc:	10c9c83a 	sub	r4,r2,r3
    afd0:	e7027f04 	addi	fp,fp,2556
    afd4:	bdc27b04 	addi	r23,r23,2540
    afd8:	d8801e15 	stw	r2,120(sp)
    afdc:	d8c01f15 	stw	r3,124(sp)
    afe0:	dec01a15 	stw	sp,104(sp)
    afe4:	d8001c15 	stw	zero,112(sp)
    afe8:	d8001b15 	stw	zero,108(sp)
    afec:	d8002615 	stw	zero,152(sp)
    aff0:	d8002315 	stw	zero,140(sp)
    aff4:	d9002715 	stw	r4,156(sp)
    aff8:	d811883a 	mov	r8,sp
    affc:	dd402115 	stw	r21,132(sp)
    b000:	b021883a 	mov	r16,r22
    b004:	80800007 	ldb	r2,0(r16)
    b008:	10037226 	beq	r2,zero,bdd4 <___vfiprintf_internal_r+0xea0>
    b00c:	01000944 	movi	r4,37
    b010:	11037026 	beq	r2,r4,bdd4 <___vfiprintf_internal_r+0xea0>
    b014:	8005883a 	mov	r2,r16
    b018:	00000106 	br	b020 <___vfiprintf_internal_r+0xec>
    b01c:	19000326 	beq	r3,r4,b02c <___vfiprintf_internal_r+0xf8>
    b020:	10800044 	addi	r2,r2,1
    b024:	10c00007 	ldb	r3,0(r2)
    b028:	183ffc1e 	bne	r3,zero,b01c <__alt_mem_Flash_flash_data+0xf400b01c>
    b02c:	1425c83a 	sub	r18,r2,r16
    b030:	1023883a 	mov	r17,r2
    b034:	90001026 	beq	r18,zero,b078 <___vfiprintf_internal_r+0x144>
    b038:	d8c01c17 	ldw	r3,112(sp)
    b03c:	d8801b17 	ldw	r2,108(sp)
    b040:	44000015 	stw	r16,0(r8)
    b044:	90c7883a 	add	r3,r18,r3
    b048:	10800044 	addi	r2,r2,1
    b04c:	44800115 	stw	r18,4(r8)
    b050:	d8c01c15 	stw	r3,112(sp)
    b054:	d8801b15 	stw	r2,108(sp)
    b058:	010001c4 	movi	r4,7
    b05c:	2080750e 	bge	r4,r2,b234 <___vfiprintf_internal_r+0x300>
    b060:	18036f1e 	bne	r3,zero,be20 <___vfiprintf_internal_r+0xeec>
    b064:	d8802317 	ldw	r2,140(sp)
    b068:	d8001b15 	stw	zero,108(sp)
    b06c:	d811883a 	mov	r8,sp
    b070:	1485883a 	add	r2,r2,r18
    b074:	d8802315 	stw	r2,140(sp)
    b078:	88800007 	ldb	r2,0(r17)
    b07c:	10041026 	beq	r2,zero,c0c0 <___vfiprintf_internal_r+0x118c>
    b080:	88c00047 	ldb	r3,1(r17)
    b084:	88800044 	addi	r2,r17,1
    b088:	d8001d85 	stb	zero,118(sp)
    b08c:	000f883a 	mov	r7,zero
    b090:	027fffc4 	movi	r9,-1
    b094:	0025883a 	mov	r18,zero
    b098:	002b883a 	mov	r21,zero
    b09c:	01401604 	movi	r5,88
    b0a0:	01800244 	movi	r6,9
    b0a4:	03400a84 	movi	r13,42
    b0a8:	03001b04 	movi	r12,108
    b0ac:	14000044 	addi	r16,r2,1
    b0b0:	18bff804 	addi	r2,r3,-32
    b0b4:	28825536 	bltu	r5,r2,ba0c <___vfiprintf_internal_r+0xad8>
    b0b8:	100490ba 	slli	r2,r2,2
    b0bc:	01000074 	movhi	r4,1
    b0c0:	212c3404 	addi	r4,r4,-20272
    b0c4:	1105883a 	add	r2,r2,r4
    b0c8:	10800017 	ldw	r2,0(r2)
    b0cc:	1000683a 	jmp	r2
    b0d0:	0000b7d0 	cmplti	zero,zero,735
    b0d4:	0000ba0c 	andi	zero,zero,744
    b0d8:	0000ba0c 	andi	zero,zero,744
    b0dc:	0000b7f0 	cmpltui	zero,zero,735
    b0e0:	0000ba0c 	andi	zero,zero,744
    b0e4:	0000ba0c 	andi	zero,zero,744
    b0e8:	0000ba0c 	andi	zero,zero,744
    b0ec:	0000ba0c 	andi	zero,zero,744
    b0f0:	0000ba0c 	andi	zero,zero,744
    b0f4:	0000ba0c 	andi	zero,zero,744
    b0f8:	0000b800 	call	b80 <_malloc_r+0x458>
    b0fc:	0000b820 	cmpeqi	zero,zero,736
    b100:	0000ba0c 	andi	zero,zero,744
    b104:	0000b648 	cmpgei	zero,zero,729
    b108:	0000b734 	movhi	zero,732
    b10c:	0000ba0c 	andi	zero,zero,744
    b110:	0000b6b4 	movhi	zero,730
    b114:	0000b6c4 	movi	zero,731
    b118:	0000b6c4 	movi	zero,731
    b11c:	0000b6c4 	movi	zero,731
    b120:	0000b6c4 	movi	zero,731
    b124:	0000b6c4 	movi	zero,731
    b128:	0000b6c4 	movi	zero,731
    b12c:	0000b6c4 	movi	zero,731
    b130:	0000b6c4 	movi	zero,731
    b134:	0000b6c4 	movi	zero,731
    b138:	0000ba0c 	andi	zero,zero,744
    b13c:	0000ba0c 	andi	zero,zero,744
    b140:	0000ba0c 	andi	zero,zero,744
    b144:	0000ba0c 	andi	zero,zero,744
    b148:	0000ba0c 	andi	zero,zero,744
    b14c:	0000ba0c 	andi	zero,zero,744
    b150:	0000ba0c 	andi	zero,zero,744
    b154:	0000ba0c 	andi	zero,zero,744
    b158:	0000ba0c 	andi	zero,zero,744
    b15c:	0000ba0c 	andi	zero,zero,744
    b160:	0000b6f0 	cmpltui	zero,zero,731
    b164:	0000ba0c 	andi	zero,zero,744
    b168:	0000ba0c 	andi	zero,zero,744
    b16c:	0000ba0c 	andi	zero,zero,744
    b170:	0000ba0c 	andi	zero,zero,744
    b174:	0000ba0c 	andi	zero,zero,744
    b178:	0000ba0c 	andi	zero,zero,744
    b17c:	0000ba0c 	andi	zero,zero,744
    b180:	0000ba0c 	andi	zero,zero,744
    b184:	0000ba0c 	andi	zero,zero,744
    b188:	0000ba0c 	andi	zero,zero,744
    b18c:	0000b27c 	xorhi	zero,zero,713
    b190:	0000ba0c 	andi	zero,zero,744
    b194:	0000ba0c 	andi	zero,zero,744
    b198:	0000ba0c 	andi	zero,zero,744
    b19c:	0000ba0c 	andi	zero,zero,744
    b1a0:	0000ba0c 	andi	zero,zero,744
    b1a4:	0000b248 	cmpgei	zero,zero,713
    b1a8:	0000ba0c 	andi	zero,zero,744
    b1ac:	0000ba0c 	andi	zero,zero,744
    b1b0:	0000b890 	cmplti	zero,zero,738
    b1b4:	0000ba0c 	andi	zero,zero,744
    b1b8:	0000ba0c 	andi	zero,zero,744
    b1bc:	0000ba0c 	andi	zero,zero,744
    b1c0:	0000ba0c 	andi	zero,zero,744
    b1c4:	0000ba0c 	andi	zero,zero,744
    b1c8:	0000ba0c 	andi	zero,zero,744
    b1cc:	0000ba0c 	andi	zero,zero,744
    b1d0:	0000ba0c 	andi	zero,zero,744
    b1d4:	0000ba0c 	andi	zero,zero,744
    b1d8:	0000ba0c 	andi	zero,zero,744
    b1dc:	0000b830 	cmpltui	zero,zero,736
    b1e0:	0000b85c 	xori	zero,zero,737
    b1e4:	0000ba0c 	andi	zero,zero,744
    b1e8:	0000ba0c 	andi	zero,zero,744
    b1ec:	0000ba0c 	andi	zero,zero,744
    b1f0:	0000b938 	rdprs	zero,zero,740
    b1f4:	0000b85c 	xori	zero,zero,737
    b1f8:	0000ba0c 	andi	zero,zero,744
    b1fc:	0000ba0c 	andi	zero,zero,744
    b200:	0000b948 	cmpgei	zero,zero,741
    b204:	0000ba0c 	andi	zero,zero,744
    b208:	0000b774 	movhi	zero,733
    b20c:	0000b280 	call	b28 <_malloc_r+0x400>
    b210:	0000b95c 	xori	zero,zero,741
    b214:	0000b99c 	xori	zero,zero,742
    b218:	0000ba0c 	andi	zero,zero,744
    b21c:	0000b8e4 	muli	zero,zero,739
    b220:	0000ba0c 	andi	zero,zero,744
    b224:	0000b24c 	andi	zero,zero,713
    b228:	0000ba0c 	andi	zero,zero,744
    b22c:	0000ba0c 	andi	zero,zero,744
    b230:	0000b9ac 	andhi	zero,zero,742
    b234:	42000204 	addi	r8,r8,8
    b238:	d8802317 	ldw	r2,140(sp)
    b23c:	1485883a 	add	r2,r2,r18
    b240:	d8802315 	stw	r2,140(sp)
    b244:	003f8c06 	br	b078 <__alt_mem_Flash_flash_data+0xf400b078>
    b248:	ad400414 	ori	r21,r21,16
    b24c:	a880080c 	andi	r2,r21,32
    b250:	1001e61e 	bne	r2,zero,b9ec <___vfiprintf_internal_r+0xab8>
    b254:	a880040c 	andi	r2,r21,16
    b258:	10034726 	beq	r2,zero,bf78 <___vfiprintf_internal_r+0x1044>
    b25c:	d8802217 	ldw	r2,136(sp)
    b260:	001b883a 	mov	r13,zero
    b264:	15800017 	ldw	r22,0(r2)
    b268:	10800104 	addi	r2,r2,4
    b26c:	d8802215 	stw	r2,136(sp)
    b270:	b009883a 	mov	r4,r22
    b274:	00800044 	movi	r2,1
    b278:	00000c06 	br	b2ac <___vfiprintf_internal_r+0x378>
    b27c:	ad400414 	ori	r21,r21,16
    b280:	a880080c 	andi	r2,r21,32
    b284:	1001491e 	bne	r2,zero,b7ac <___vfiprintf_internal_r+0x878>
    b288:	a880040c 	andi	r2,r21,16
    b28c:	10032d26 	beq	r2,zero,bf44 <___vfiprintf_internal_r+0x1010>
    b290:	d9002217 	ldw	r4,136(sp)
    b294:	001b883a 	mov	r13,zero
    b298:	0005883a 	mov	r2,zero
    b29c:	25800017 	ldw	r22,0(r4)
    b2a0:	21000104 	addi	r4,r4,4
    b2a4:	d9002215 	stw	r4,136(sp)
    b2a8:	b009883a 	mov	r4,r22
    b2ac:	d8001d85 	stb	zero,118(sp)
    b2b0:	4827883a 	mov	r19,r9
    b2b4:	001d883a 	mov	r14,zero
    b2b8:	48000216 	blt	r9,zero,b2c4 <___vfiprintf_internal_r+0x390>
    b2bc:	00ffdfc4 	movi	r3,-129
    b2c0:	a8ea703a 	and	r21,r21,r3
    b2c4:	2002071e 	bne	r4,zero,bae4 <___vfiprintf_internal_r+0xbb0>
    b2c8:	4802ad26 	beq	r9,zero,bd80 <___vfiprintf_internal_r+0xe4c>
    b2cc:	10803fcc 	andi	r2,r2,255
    b2d0:	00c00044 	movi	r3,1
    b2d4:	10c22b26 	beq	r2,r3,bb84 <___vfiprintf_internal_r+0xc50>
    b2d8:	00c00084 	movi	r3,2
    b2dc:	dd001a04 	addi	r20,sp,104
    b2e0:	10c0dd1e 	bne	r2,r3,b658 <___vfiprintf_internal_r+0x724>
    b2e4:	d9002617 	ldw	r4,152(sp)
    b2e8:	b08003cc 	andi	r2,r22,15
    b2ec:	6806973a 	slli	r3,r13,28
    b2f0:	2085883a 	add	r2,r4,r2
    b2f4:	b02cd13a 	srli	r22,r22,4
    b2f8:	10800003 	ldbu	r2,0(r2)
    b2fc:	681ad13a 	srli	r13,r13,4
    b300:	a53fffc4 	addi	r20,r20,-1
    b304:	1dacb03a 	or	r22,r3,r22
    b308:	a0800005 	stb	r2,0(r20)
    b30c:	b344b03a 	or	r2,r22,r13
    b310:	103ff51e 	bne	r2,zero,b2e8 <__alt_mem_Flash_flash_data+0xf400b2e8>
    b314:	d9001e17 	ldw	r4,120(sp)
    b318:	2527c83a 	sub	r19,r4,r20
    b31c:	9823883a 	mov	r17,r19
    b320:	9a40010e 	bge	r19,r9,b328 <___vfiprintf_internal_r+0x3f4>
    b324:	4823883a 	mov	r17,r9
    b328:	73803fcc 	andi	r14,r14,255
    b32c:	7380201c 	xori	r14,r14,128
    b330:	73bfe004 	addi	r14,r14,-128
    b334:	70000126 	beq	r14,zero,b33c <___vfiprintf_internal_r+0x408>
    b338:	8c400044 	addi	r17,r17,1
    b33c:	ab40008c 	andi	r13,r21,2
    b340:	68000126 	beq	r13,zero,b348 <___vfiprintf_internal_r+0x414>
    b344:	8c400084 	addi	r17,r17,2
    b348:	ad80210c 	andi	r22,r21,132
    b34c:	b001c51e 	bne	r22,zero,ba64 <___vfiprintf_internal_r+0xb30>
    b350:	9447c83a 	sub	r3,r18,r17
    b354:	00c1c30e 	bge	zero,r3,ba64 <___vfiprintf_internal_r+0xb30>
    b358:	01c00404 	movi	r7,16
    b35c:	d8801c17 	ldw	r2,112(sp)
    b360:	38c37b0e 	bge	r7,r3,c150 <___vfiprintf_internal_r+0x121c>
    b364:	010000b4 	movhi	r4,2
    b368:	21027f04 	addi	r4,r4,2556
    b36c:	dc002915 	stw	r16,164(sp)
    b370:	d9801b17 	ldw	r6,108(sp)
    b374:	d9002415 	stw	r4,144(sp)
    b378:	03c001c4 	movi	r15,7
    b37c:	da402515 	stw	r9,148(sp)
    b380:	db402815 	stw	r13,160(sp)
    b384:	1821883a 	mov	r16,r3
    b388:	00000506 	br	b3a0 <___vfiprintf_internal_r+0x46c>
    b38c:	31400084 	addi	r5,r6,2
    b390:	42000204 	addi	r8,r8,8
    b394:	200d883a 	mov	r6,r4
    b398:	843ffc04 	addi	r16,r16,-16
    b39c:	3c000d0e 	bge	r7,r16,b3d4 <___vfiprintf_internal_r+0x4a0>
    b3a0:	10800404 	addi	r2,r2,16
    b3a4:	31000044 	addi	r4,r6,1
    b3a8:	47000015 	stw	fp,0(r8)
    b3ac:	41c00115 	stw	r7,4(r8)
    b3b0:	d8801c15 	stw	r2,112(sp)
    b3b4:	d9001b15 	stw	r4,108(sp)
    b3b8:	793ff40e 	bge	r15,r4,b38c <__alt_mem_Flash_flash_data+0xf400b38c>
    b3bc:	10019b1e 	bne	r2,zero,ba2c <___vfiprintf_internal_r+0xaf8>
    b3c0:	843ffc04 	addi	r16,r16,-16
    b3c4:	000d883a 	mov	r6,zero
    b3c8:	01400044 	movi	r5,1
    b3cc:	d811883a 	mov	r8,sp
    b3d0:	3c3ff316 	blt	r7,r16,b3a0 <__alt_mem_Flash_flash_data+0xf400b3a0>
    b3d4:	8007883a 	mov	r3,r16
    b3d8:	da402517 	ldw	r9,148(sp)
    b3dc:	db402817 	ldw	r13,160(sp)
    b3e0:	dc002917 	ldw	r16,164(sp)
    b3e4:	d9002417 	ldw	r4,144(sp)
    b3e8:	1885883a 	add	r2,r3,r2
    b3ec:	40c00115 	stw	r3,4(r8)
    b3f0:	41000015 	stw	r4,0(r8)
    b3f4:	d8801c15 	stw	r2,112(sp)
    b3f8:	d9401b15 	stw	r5,108(sp)
    b3fc:	00c001c4 	movi	r3,7
    b400:	19426a16 	blt	r3,r5,bdac <___vfiprintf_internal_r+0xe78>
    b404:	d8c01d87 	ldb	r3,118(sp)
    b408:	42000204 	addi	r8,r8,8
    b40c:	29000044 	addi	r4,r5,1
    b410:	1801991e 	bne	r3,zero,ba78 <___vfiprintf_internal_r+0xb44>
    b414:	68000c26 	beq	r13,zero,b448 <___vfiprintf_internal_r+0x514>
    b418:	d8c01d04 	addi	r3,sp,116
    b41c:	10800084 	addi	r2,r2,2
    b420:	40c00015 	stw	r3,0(r8)
    b424:	00c00084 	movi	r3,2
    b428:	40c00115 	stw	r3,4(r8)
    b42c:	d8801c15 	stw	r2,112(sp)
    b430:	d9001b15 	stw	r4,108(sp)
    b434:	00c001c4 	movi	r3,7
    b438:	19024c16 	blt	r3,r4,bd6c <___vfiprintf_internal_r+0xe38>
    b43c:	200b883a 	mov	r5,r4
    b440:	42000204 	addi	r8,r8,8
    b444:	21000044 	addi	r4,r4,1
    b448:	00c02004 	movi	r3,128
    b44c:	b0c20126 	beq	r22,r3,bc54 <___vfiprintf_internal_r+0xd20>
    b450:	4cedc83a 	sub	r22,r9,r19
    b454:	0580230e 	bge	zero,r22,b4e4 <___vfiprintf_internal_r+0x5b0>
    b458:	01c00404 	movi	r7,16
    b45c:	3d83140e 	bge	r7,r22,c0b0 <___vfiprintf_internal_r+0x117c>
    b460:	010000b4 	movhi	r4,2
    b464:	21027b04 	addi	r4,r4,2540
    b468:	d9002415 	stw	r4,144(sp)
    b46c:	034001c4 	movi	r13,7
    b470:	00000506 	br	b488 <___vfiprintf_internal_r+0x554>
    b474:	29000084 	addi	r4,r5,2
    b478:	42000204 	addi	r8,r8,8
    b47c:	180b883a 	mov	r5,r3
    b480:	b5bffc04 	addi	r22,r22,-16
    b484:	3d800d0e 	bge	r7,r22,b4bc <___vfiprintf_internal_r+0x588>
    b488:	10800404 	addi	r2,r2,16
    b48c:	28c00044 	addi	r3,r5,1
    b490:	45c00015 	stw	r23,0(r8)
    b494:	41c00115 	stw	r7,4(r8)
    b498:	d8801c15 	stw	r2,112(sp)
    b49c:	d8c01b15 	stw	r3,108(sp)
    b4a0:	68fff40e 	bge	r13,r3,b474 <__alt_mem_Flash_flash_data+0xf400b474>
    b4a4:	1001811e 	bne	r2,zero,baac <___vfiprintf_internal_r+0xb78>
    b4a8:	b5bffc04 	addi	r22,r22,-16
    b4ac:	01000044 	movi	r4,1
    b4b0:	000b883a 	mov	r5,zero
    b4b4:	d811883a 	mov	r8,sp
    b4b8:	3dbff316 	blt	r7,r22,b488 <__alt_mem_Flash_flash_data+0xf400b488>
    b4bc:	d8c02417 	ldw	r3,144(sp)
    b4c0:	1585883a 	add	r2,r2,r22
    b4c4:	45800115 	stw	r22,4(r8)
    b4c8:	40c00015 	stw	r3,0(r8)
    b4cc:	d8801c15 	stw	r2,112(sp)
    b4d0:	d9001b15 	stw	r4,108(sp)
    b4d4:	00c001c4 	movi	r3,7
    b4d8:	1901d016 	blt	r3,r4,bc1c <___vfiprintf_internal_r+0xce8>
    b4dc:	42000204 	addi	r8,r8,8
    b4e0:	21000044 	addi	r4,r4,1
    b4e4:	14c5883a 	add	r2,r2,r19
    b4e8:	45000015 	stw	r20,0(r8)
    b4ec:	44c00115 	stw	r19,4(r8)
    b4f0:	d8801c15 	stw	r2,112(sp)
    b4f4:	d9001b15 	stw	r4,108(sp)
    b4f8:	00c001c4 	movi	r3,7
    b4fc:	1901cf0e 	bge	r3,r4,bc3c <___vfiprintf_internal_r+0xd08>
    b500:	1002361e 	bne	r2,zero,bddc <___vfiprintf_internal_r+0xea8>
    b504:	d8001b15 	stw	zero,108(sp)
    b508:	aac0010c 	andi	r11,r21,4
    b50c:	58002826 	beq	r11,zero,b5b0 <___vfiprintf_internal_r+0x67c>
    b510:	9467c83a 	sub	r19,r18,r17
    b514:	d811883a 	mov	r8,sp
    b518:	04c3340e 	bge	zero,r19,c1ec <___vfiprintf_internal_r+0x12b8>
    b51c:	01c00404 	movi	r7,16
    b520:	3cc31b0e 	bge	r7,r19,c190 <___vfiprintf_internal_r+0x125c>
    b524:	00c000b4 	movhi	r3,2
    b528:	18c27f04 	addi	r3,r3,2556
    b52c:	d9001b17 	ldw	r4,108(sp)
    b530:	d8c02415 	stw	r3,144(sp)
    b534:	382b883a 	mov	r21,r7
    b538:	050001c4 	movi	r20,7
    b53c:	dd802017 	ldw	r22,128(sp)
    b540:	00000506 	br	b558 <___vfiprintf_internal_r+0x624>
    b544:	21400084 	addi	r5,r4,2
    b548:	42000204 	addi	r8,r8,8
    b54c:	1809883a 	mov	r4,r3
    b550:	9cfffc04 	addi	r19,r19,-16
    b554:	acc00d0e 	bge	r21,r19,b58c <___vfiprintf_internal_r+0x658>
    b558:	10800404 	addi	r2,r2,16
    b55c:	20c00044 	addi	r3,r4,1
    b560:	47000015 	stw	fp,0(r8)
    b564:	45400115 	stw	r21,4(r8)
    b568:	d8801c15 	stw	r2,112(sp)
    b56c:	d8c01b15 	stw	r3,108(sp)
    b570:	a0fff40e 	bge	r20,r3,b544 <__alt_mem_Flash_flash_data+0xf400b544>
    b574:	10019f1e 	bne	r2,zero,bbf4 <___vfiprintf_internal_r+0xcc0>
    b578:	9cfffc04 	addi	r19,r19,-16
    b57c:	01400044 	movi	r5,1
    b580:	0009883a 	mov	r4,zero
    b584:	d811883a 	mov	r8,sp
    b588:	acfff316 	blt	r21,r19,b558 <__alt_mem_Flash_flash_data+0xf400b558>
    b58c:	d8c02417 	ldw	r3,144(sp)
    b590:	14c5883a 	add	r2,r2,r19
    b594:	44c00115 	stw	r19,4(r8)
    b598:	40c00015 	stw	r3,0(r8)
    b59c:	d8801c15 	stw	r2,112(sp)
    b5a0:	d9401b15 	stw	r5,108(sp)
    b5a4:	00c001c4 	movi	r3,7
    b5a8:	1941810e 	bge	r3,r5,bbb0 <___vfiprintf_internal_r+0xc7c>
    b5ac:	10017a1e 	bne	r2,zero,bb98 <___vfiprintf_internal_r+0xc64>
    b5b0:	8c82a416 	blt	r17,r18,c044 <___vfiprintf_internal_r+0x1110>
    b5b4:	d9002317 	ldw	r4,140(sp)
    b5b8:	2449883a 	add	r4,r4,r17
    b5bc:	d9002315 	stw	r4,140(sp)
    b5c0:	d8001b15 	stw	zero,108(sp)
    b5c4:	d811883a 	mov	r8,sp
    b5c8:	003e8e06 	br	b004 <__alt_mem_Flash_flash_data+0xf400b004>
    b5cc:	d9002017 	ldw	r4,128(sp)
    b5d0:	a80b883a 	mov	r5,r21
    b5d4:	000527c0 	call	527c <__swsetup_r>
    b5d8:	10000c1e 	bne	r2,zero,b60c <___vfiprintf_internal_r+0x6d8>
    b5dc:	a880030b 	ldhu	r2,12(r21)
    b5e0:	00c00284 	movi	r3,10
    b5e4:	1080068c 	andi	r2,r2,26
    b5e8:	10fe741e 	bne	r2,r3,afbc <__alt_mem_Flash_flash_data+0xf400afbc>
    b5ec:	a880038f 	ldh	r2,14(r21)
    b5f0:	103e7216 	blt	r2,zero,afbc <__alt_mem_Flash_flash_data+0xf400afbc>
    b5f4:	d9002017 	ldw	r4,128(sp)
    b5f8:	d9c02217 	ldw	r7,136(sp)
    b5fc:	a80b883a 	mov	r5,r21
    b600:	b00d883a 	mov	r6,r22
    b604:	000c2280 	call	c228 <__sbprintf>
    b608:	00000106 	br	b610 <___vfiprintf_internal_r+0x6dc>
    b60c:	00bfffc4 	movi	r2,-1
    b610:	dfc03517 	ldw	ra,212(sp)
    b614:	df003417 	ldw	fp,208(sp)
    b618:	ddc03317 	ldw	r23,204(sp)
    b61c:	dd803217 	ldw	r22,200(sp)
    b620:	dd403117 	ldw	r21,196(sp)
    b624:	dd003017 	ldw	r20,192(sp)
    b628:	dcc02f17 	ldw	r19,188(sp)
    b62c:	dc802e17 	ldw	r18,184(sp)
    b630:	dc402d17 	ldw	r17,180(sp)
    b634:	dc002c17 	ldw	r16,176(sp)
    b638:	dec03604 	addi	sp,sp,216
    b63c:	f800283a 	ret
    b640:	00072dc0 	call	72dc <__sinit>
    b644:	003e4d06 	br	af7c <__alt_mem_Flash_flash_data+0xf400af7c>
    b648:	8005883a 	mov	r2,r16
    b64c:	ad400114 	ori	r21,r21,4
    b650:	80c00007 	ldb	r3,0(r16)
    b654:	003e9506 	br	b0ac <__alt_mem_Flash_flash_data+0xf400b0ac>
    b658:	b006d0fa 	srli	r3,r22,3
    b65c:	6808977a 	slli	r4,r13,29
    b660:	681ad0fa 	srli	r13,r13,3
    b664:	b58001cc 	andi	r22,r22,7
    b668:	b0800c04 	addi	r2,r22,48
    b66c:	a53fffc4 	addi	r20,r20,-1
    b670:	20ecb03a 	or	r22,r4,r3
    b674:	a0800005 	stb	r2,0(r20)
    b678:	b346b03a 	or	r3,r22,r13
    b67c:	183ff61e 	bne	r3,zero,b658 <__alt_mem_Flash_flash_data+0xf400b658>
    b680:	a8c0004c 	andi	r3,r21,1
    b684:	a009883a 	mov	r4,r20
    b688:	18013b26 	beq	r3,zero,bb78 <___vfiprintf_internal_r+0xc44>
    b68c:	10803fcc 	andi	r2,r2,255
    b690:	1080201c 	xori	r2,r2,128
    b694:	10bfe004 	addi	r2,r2,-128
    b698:	00c00c04 	movi	r3,48
    b69c:	10ff1d26 	beq	r2,r3,b314 <__alt_mem_Flash_flash_data+0xf400b314>
    b6a0:	d8801e17 	ldw	r2,120(sp)
    b6a4:	a53fffc4 	addi	r20,r20,-1
    b6a8:	20ffffc5 	stb	r3,-1(r4)
    b6ac:	1527c83a 	sub	r19,r2,r20
    b6b0:	003f1a06 	br	b31c <__alt_mem_Flash_flash_data+0xf400b31c>
    b6b4:	ad402014 	ori	r21,r21,128
    b6b8:	8005883a 	mov	r2,r16
    b6bc:	80c00007 	ldb	r3,0(r16)
    b6c0:	003e7a06 	br	b0ac <__alt_mem_Flash_flash_data+0xf400b0ac>
    b6c4:	8005883a 	mov	r2,r16
    b6c8:	0025883a 	mov	r18,zero
    b6cc:	193ff404 	addi	r4,r3,-48
    b6d0:	10c00007 	ldb	r3,0(r2)
    b6d4:	948002a4 	muli	r18,r18,10
    b6d8:	84000044 	addi	r16,r16,1
    b6dc:	8005883a 	mov	r2,r16
    b6e0:	9125883a 	add	r18,r18,r4
    b6e4:	193ff404 	addi	r4,r3,-48
    b6e8:	313ff92e 	bgeu	r6,r4,b6d0 <__alt_mem_Flash_flash_data+0xf400b6d0>
    b6ec:	003e7006 	br	b0b0 <__alt_mem_Flash_flash_data+0xf400b0b0>
    b6f0:	ad400414 	ori	r21,r21,16
    b6f4:	d9c01d85 	stb	r7,118(sp)
    b6f8:	a880080c 	andi	r2,r21,32
    b6fc:	d8c02217 	ldw	r3,136(sp)
    b700:	10005a26 	beq	r2,zero,b86c <___vfiprintf_internal_r+0x938>
    b704:	d9002217 	ldw	r4,136(sp)
    b708:	18800117 	ldw	r2,4(r3)
    b70c:	1d800017 	ldw	r22,0(r3)
    b710:	21000204 	addi	r4,r4,8
    b714:	d9002215 	stw	r4,136(sp)
    b718:	101b883a 	mov	r13,r2
    b71c:	1001f416 	blt	r2,zero,bef0 <___vfiprintf_internal_r+0xfbc>
    b720:	db801d83 	ldbu	r14,118(sp)
    b724:	4827883a 	mov	r19,r9
    b728:	00800044 	movi	r2,1
    b72c:	b348b03a 	or	r4,r22,r13
    b730:	003ee106 	br	b2b8 <__alt_mem_Flash_flash_data+0xf400b2b8>
    b734:	80c00007 	ldb	r3,0(r16)
    b738:	80800044 	addi	r2,r16,1
    b73c:	1b42a326 	beq	r3,r13,c1cc <___vfiprintf_internal_r+0x1298>
    b740:	193ff404 	addi	r4,r3,-48
    b744:	1021883a 	mov	r16,r2
    b748:	0013883a 	mov	r9,zero
    b74c:	313e5836 	bltu	r6,r4,b0b0 <__alt_mem_Flash_flash_data+0xf400b0b0>
    b750:	80c00007 	ldb	r3,0(r16)
    b754:	4a4002a4 	muli	r9,r9,10
    b758:	84000044 	addi	r16,r16,1
    b75c:	2253883a 	add	r9,r4,r9
    b760:	193ff404 	addi	r4,r3,-48
    b764:	313ffa2e 	bgeu	r6,r4,b750 <__alt_mem_Flash_flash_data+0xf400b750>
    b768:	483e510e 	bge	r9,zero,b0b0 <__alt_mem_Flash_flash_data+0xf400b0b0>
    b76c:	027fffc4 	movi	r9,-1
    b770:	003e4f06 	br	b0b0 <__alt_mem_Flash_flash_data+0xf400b0b0>
    b774:	d9c01d85 	stb	r7,118(sp)
    b778:	a880080c 	andi	r2,r21,32
    b77c:	10020826 	beq	r2,zero,bfa0 <___vfiprintf_internal_r+0x106c>
    b780:	d8c02217 	ldw	r3,136(sp)
    b784:	d9002317 	ldw	r4,140(sp)
    b788:	18800017 	ldw	r2,0(r3)
    b78c:	2007d7fa 	srai	r3,r4,31
    b790:	d9002217 	ldw	r4,136(sp)
    b794:	10c00115 	stw	r3,4(r2)
    b798:	21000104 	addi	r4,r4,4
    b79c:	d9002215 	stw	r4,136(sp)
    b7a0:	d9002317 	ldw	r4,140(sp)
    b7a4:	11000015 	stw	r4,0(r2)
    b7a8:	003e1606 	br	b004 <__alt_mem_Flash_flash_data+0xf400b004>
    b7ac:	d8802217 	ldw	r2,136(sp)
    b7b0:	d8c02217 	ldw	r3,136(sp)
    b7b4:	15800017 	ldw	r22,0(r2)
    b7b8:	13400117 	ldw	r13,4(r2)
    b7bc:	18c00204 	addi	r3,r3,8
    b7c0:	0005883a 	mov	r2,zero
    b7c4:	d8c02215 	stw	r3,136(sp)
    b7c8:	b348b03a 	or	r4,r22,r13
    b7cc:	003eb706 	br	b2ac <__alt_mem_Flash_flash_data+0xf400b2ac>
    b7d0:	38803fcc 	andi	r2,r7,255
    b7d4:	1080201c 	xori	r2,r2,128
    b7d8:	10bfe004 	addi	r2,r2,-128
    b7dc:	1001e31e 	bne	r2,zero,bf6c <___vfiprintf_internal_r+0x1038>
    b7e0:	8005883a 	mov	r2,r16
    b7e4:	01c00804 	movi	r7,32
    b7e8:	80c00007 	ldb	r3,0(r16)
    b7ec:	003e2f06 	br	b0ac <__alt_mem_Flash_flash_data+0xf400b0ac>
    b7f0:	ad400054 	ori	r21,r21,1
    b7f4:	8005883a 	mov	r2,r16
    b7f8:	80c00007 	ldb	r3,0(r16)
    b7fc:	003e2b06 	br	b0ac <__alt_mem_Flash_flash_data+0xf400b0ac>
    b800:	d8c02217 	ldw	r3,136(sp)
    b804:	1c800017 	ldw	r18,0(r3)
    b808:	18c00104 	addi	r3,r3,4
    b80c:	90023816 	blt	r18,zero,c0f0 <___vfiprintf_internal_r+0x11bc>
    b810:	d8c02215 	stw	r3,136(sp)
    b814:	8005883a 	mov	r2,r16
    b818:	80c00007 	ldb	r3,0(r16)
    b81c:	003e2306 	br	b0ac <__alt_mem_Flash_flash_data+0xf400b0ac>
    b820:	8005883a 	mov	r2,r16
    b824:	01c00ac4 	movi	r7,43
    b828:	80c00007 	ldb	r3,0(r16)
    b82c:	003e1f06 	br	b0ac <__alt_mem_Flash_flash_data+0xf400b0ac>
    b830:	d8c02217 	ldw	r3,136(sp)
    b834:	04400044 	movi	r17,1
    b838:	d8001d85 	stb	zero,118(sp)
    b83c:	18800017 	ldw	r2,0(r3)
    b840:	18c00104 	addi	r3,r3,4
    b844:	d8c02215 	stw	r3,136(sp)
    b848:	d8801005 	stb	r2,64(sp)
    b84c:	8827883a 	mov	r19,r17
    b850:	dd001004 	addi	r20,sp,64
    b854:	0013883a 	mov	r9,zero
    b858:	003eb806 	br	b33c <__alt_mem_Flash_flash_data+0xf400b33c>
    b85c:	d9c01d85 	stb	r7,118(sp)
    b860:	a880080c 	andi	r2,r21,32
    b864:	d8c02217 	ldw	r3,136(sp)
    b868:	103fa61e 	bne	r2,zero,b704 <__alt_mem_Flash_flash_data+0xf400b704>
    b86c:	a880040c 	andi	r2,r21,16
    b870:	1001dd26 	beq	r2,zero,bfe8 <___vfiprintf_internal_r+0x10b4>
    b874:	1d800017 	ldw	r22,0(r3)
    b878:	d8802217 	ldw	r2,136(sp)
    b87c:	b01bd7fa 	srai	r13,r22,31
    b880:	10800104 	addi	r2,r2,4
    b884:	d8802215 	stw	r2,136(sp)
    b888:	6805883a 	mov	r2,r13
    b88c:	003fa306 	br	b71c <__alt_mem_Flash_flash_data+0xf400b71c>
    b890:	008000b4 	movhi	r2,2
    b894:	10820504 	addi	r2,r2,2068
    b898:	d8802615 	stw	r2,152(sp)
    b89c:	d9c01d85 	stb	r7,118(sp)
    b8a0:	a880080c 	andi	r2,r21,32
    b8a4:	10004726 	beq	r2,zero,b9c4 <___vfiprintf_internal_r+0xa90>
    b8a8:	d9002217 	ldw	r4,136(sp)
    b8ac:	25800017 	ldw	r22,0(r4)
    b8b0:	23400117 	ldw	r13,4(r4)
    b8b4:	21000204 	addi	r4,r4,8
    b8b8:	d9002215 	stw	r4,136(sp)
    b8bc:	a880004c 	andi	r2,r21,1
    b8c0:	10014e26 	beq	r2,zero,bdfc <___vfiprintf_internal_r+0xec8>
    b8c4:	b348b03a 	or	r4,r22,r13
    b8c8:	20019c26 	beq	r4,zero,bf3c <___vfiprintf_internal_r+0x1008>
    b8cc:	00800c04 	movi	r2,48
    b8d0:	d8801d05 	stb	r2,116(sp)
    b8d4:	d8c01d45 	stb	r3,117(sp)
    b8d8:	ad400094 	ori	r21,r21,2
    b8dc:	00800084 	movi	r2,2
    b8e0:	003e7206 	br	b2ac <__alt_mem_Flash_flash_data+0xf400b2ac>
    b8e4:	d8c02217 	ldw	r3,136(sp)
    b8e8:	d8001d85 	stb	zero,118(sp)
    b8ec:	1d000017 	ldw	r20,0(r3)
    b8f0:	1d800104 	addi	r22,r3,4
    b8f4:	a0021c26 	beq	r20,zero,c168 <___vfiprintf_internal_r+0x1234>
    b8f8:	a009883a 	mov	r4,r20
    b8fc:	48020016 	blt	r9,zero,c100 <___vfiprintf_internal_r+0x11cc>
    b900:	480d883a 	mov	r6,r9
    b904:	000b883a 	mov	r5,zero
    b908:	da002a15 	stw	r8,168(sp)
    b90c:	da402b15 	stw	r9,172(sp)
    b910:	00080200 	call	8020 <memchr>
    b914:	da002a17 	ldw	r8,168(sp)
    b918:	da402b17 	ldw	r9,172(sp)
    b91c:	10022226 	beq	r2,zero,c1a8 <___vfiprintf_internal_r+0x1274>
    b920:	1527c83a 	sub	r19,r2,r20
    b924:	4cc1c916 	blt	r9,r19,c04c <___vfiprintf_internal_r+0x1118>
    b928:	db801d83 	ldbu	r14,118(sp)
    b92c:	dd802215 	stw	r22,136(sp)
    b930:	0013883a 	mov	r9,zero
    b934:	003e7906 	br	b31c <__alt_mem_Flash_flash_data+0xf400b31c>
    b938:	ad401014 	ori	r21,r21,64
    b93c:	8005883a 	mov	r2,r16
    b940:	80c00007 	ldb	r3,0(r16)
    b944:	003dd906 	br	b0ac <__alt_mem_Flash_flash_data+0xf400b0ac>
    b948:	80c00007 	ldb	r3,0(r16)
    b94c:	8005883a 	mov	r2,r16
    b950:	1b01e326 	beq	r3,r12,c0e0 <___vfiprintf_internal_r+0x11ac>
    b954:	ad400414 	ori	r21,r21,16
    b958:	003dd406 	br	b0ac <__alt_mem_Flash_flash_data+0xf400b0ac>
    b95c:	d9002217 	ldw	r4,136(sp)
    b960:	00800c04 	movi	r2,48
    b964:	d8801d05 	stb	r2,116(sp)
    b968:	25800017 	ldw	r22,0(r4)
    b96c:	00801e04 	movi	r2,120
    b970:	d8801d45 	stb	r2,117(sp)
    b974:	008000b4 	movhi	r2,2
    b978:	21000104 	addi	r4,r4,4
    b97c:	10820a04 	addi	r2,r2,2088
    b980:	d9002215 	stw	r4,136(sp)
    b984:	d8802615 	stw	r2,152(sp)
    b988:	001b883a 	mov	r13,zero
    b98c:	ad400094 	ori	r21,r21,2
    b990:	00800084 	movi	r2,2
    b994:	b009883a 	mov	r4,r22
    b998:	003e4406 	br	b2ac <__alt_mem_Flash_flash_data+0xf400b2ac>
    b99c:	ad400814 	ori	r21,r21,32
    b9a0:	8005883a 	mov	r2,r16
    b9a4:	80c00007 	ldb	r3,0(r16)
    b9a8:	003dc006 	br	b0ac <__alt_mem_Flash_flash_data+0xf400b0ac>
    b9ac:	008000b4 	movhi	r2,2
    b9b0:	10820a04 	addi	r2,r2,2088
    b9b4:	d8802615 	stw	r2,152(sp)
    b9b8:	d9c01d85 	stb	r7,118(sp)
    b9bc:	a880080c 	andi	r2,r21,32
    b9c0:	103fb91e 	bne	r2,zero,b8a8 <__alt_mem_Flash_flash_data+0xf400b8a8>
    b9c4:	a880040c 	andi	r2,r21,16
    b9c8:	10010f1e 	bne	r2,zero,be08 <___vfiprintf_internal_r+0xed4>
    b9cc:	a880100c 	andi	r2,r21,64
    b9d0:	10010d26 	beq	r2,zero,be08 <___vfiprintf_internal_r+0xed4>
    b9d4:	d9002217 	ldw	r4,136(sp)
    b9d8:	001b883a 	mov	r13,zero
    b9dc:	2580000b 	ldhu	r22,0(r4)
    b9e0:	21000104 	addi	r4,r4,4
    b9e4:	d9002215 	stw	r4,136(sp)
    b9e8:	003fb406 	br	b8bc <__alt_mem_Flash_flash_data+0xf400b8bc>
    b9ec:	d9002217 	ldw	r4,136(sp)
    b9f0:	00800044 	movi	r2,1
    b9f4:	25800017 	ldw	r22,0(r4)
    b9f8:	23400117 	ldw	r13,4(r4)
    b9fc:	21000204 	addi	r4,r4,8
    ba00:	d9002215 	stw	r4,136(sp)
    ba04:	b348b03a 	or	r4,r22,r13
    ba08:	003e2806 	br	b2ac <__alt_mem_Flash_flash_data+0xf400b2ac>
    ba0c:	d9c01d85 	stb	r7,118(sp)
    ba10:	1801ab26 	beq	r3,zero,c0c0 <___vfiprintf_internal_r+0x118c>
    ba14:	04400044 	movi	r17,1
    ba18:	d8c01005 	stb	r3,64(sp)
    ba1c:	d8001d85 	stb	zero,118(sp)
    ba20:	8827883a 	mov	r19,r17
    ba24:	dd001004 	addi	r20,sp,64
    ba28:	003f8a06 	br	b854 <__alt_mem_Flash_flash_data+0xf400b854>
    ba2c:	d9002017 	ldw	r4,128(sp)
    ba30:	d9402117 	ldw	r5,132(sp)
    ba34:	d9801a04 	addi	r6,sp,104
    ba38:	d9c02b15 	stw	r7,172(sp)
    ba3c:	dbc02a15 	stw	r15,168(sp)
    ba40:	000ae200 	call	ae20 <__sprint_r.part.0>
    ba44:	d9c02b17 	ldw	r7,172(sp)
    ba48:	dbc02a17 	ldw	r15,168(sp)
    ba4c:	1000631e 	bne	r2,zero,bbdc <___vfiprintf_internal_r+0xca8>
    ba50:	d9801b17 	ldw	r6,108(sp)
    ba54:	d8801c17 	ldw	r2,112(sp)
    ba58:	d811883a 	mov	r8,sp
    ba5c:	31400044 	addi	r5,r6,1
    ba60:	003e4d06 	br	b398 <__alt_mem_Flash_flash_data+0xf400b398>
    ba64:	d9401b17 	ldw	r5,108(sp)
    ba68:	d8801c17 	ldw	r2,112(sp)
    ba6c:	29000044 	addi	r4,r5,1
    ba70:	d8c01d87 	ldb	r3,118(sp)
    ba74:	183e6726 	beq	r3,zero,b414 <__alt_mem_Flash_flash_data+0xf400b414>
    ba78:	00c00044 	movi	r3,1
    ba7c:	d9401d84 	addi	r5,sp,118
    ba80:	10c5883a 	add	r2,r2,r3
    ba84:	41400015 	stw	r5,0(r8)
    ba88:	40c00115 	stw	r3,4(r8)
    ba8c:	d8801c15 	stw	r2,112(sp)
    ba90:	d9001b15 	stw	r4,108(sp)
    ba94:	014001c4 	movi	r5,7
    ba98:	2900ab16 	blt	r5,r4,bd48 <___vfiprintf_internal_r+0xe14>
    ba9c:	200b883a 	mov	r5,r4
    baa0:	42000204 	addi	r8,r8,8
    baa4:	21000044 	addi	r4,r4,1
    baa8:	003e5a06 	br	b414 <__alt_mem_Flash_flash_data+0xf400b414>
    baac:	d9002017 	ldw	r4,128(sp)
    bab0:	d9402117 	ldw	r5,132(sp)
    bab4:	d9801a04 	addi	r6,sp,104
    bab8:	d9c02b15 	stw	r7,172(sp)
    babc:	db402a15 	stw	r13,168(sp)
    bac0:	000ae200 	call	ae20 <__sprint_r.part.0>
    bac4:	d9c02b17 	ldw	r7,172(sp)
    bac8:	db402a17 	ldw	r13,168(sp)
    bacc:	1000431e 	bne	r2,zero,bbdc <___vfiprintf_internal_r+0xca8>
    bad0:	d9401b17 	ldw	r5,108(sp)
    bad4:	d8801c17 	ldw	r2,112(sp)
    bad8:	d811883a 	mov	r8,sp
    badc:	29000044 	addi	r4,r5,1
    bae0:	003e6706 	br	b480 <__alt_mem_Flash_flash_data+0xf400b480>
    bae4:	10803fcc 	andi	r2,r2,255
    bae8:	00c00044 	movi	r3,1
    baec:	10fdfa1e 	bne	r2,r3,b2d8 <__alt_mem_Flash_flash_data+0xf400b2d8>
    baf0:	6800021e 	bne	r13,zero,bafc <___vfiprintf_internal_r+0xbc8>
    baf4:	00800244 	movi	r2,9
    baf8:	1580222e 	bgeu	r2,r22,bb84 <___vfiprintf_internal_r+0xc50>
    bafc:	dc802415 	stw	r18,144(sp)
    bb00:	dc002515 	stw	r16,148(sp)
    bb04:	dc401a04 	addi	r17,sp,104
    bb08:	b021883a 	mov	r16,r22
    bb0c:	4827883a 	mov	r19,r9
    bb10:	4029883a 	mov	r20,r8
    bb14:	702d883a 	mov	r22,r14
    bb18:	6825883a 	mov	r18,r13
    bb1c:	8009883a 	mov	r4,r16
    bb20:	900b883a 	mov	r5,r18
    bb24:	01800284 	movi	r6,10
    bb28:	000f883a 	mov	r7,zero
    bb2c:	000d19c0 	call	d19c <__umoddi3>
    bb30:	10800c04 	addi	r2,r2,48
    bb34:	8c7fffc4 	addi	r17,r17,-1
    bb38:	8009883a 	mov	r4,r16
    bb3c:	900b883a 	mov	r5,r18
    bb40:	01800284 	movi	r6,10
    bb44:	000f883a 	mov	r7,zero
    bb48:	88800005 	stb	r2,0(r17)
    bb4c:	000cbdc0 	call	cbdc <__udivdi3>
    bb50:	1021883a 	mov	r16,r2
    bb54:	10c4b03a 	or	r2,r2,r3
    bb58:	1825883a 	mov	r18,r3
    bb5c:	103fef1e 	bne	r2,zero,bb1c <__alt_mem_Flash_flash_data+0xf400bb1c>
    bb60:	dc802417 	ldw	r18,144(sp)
    bb64:	dc002517 	ldw	r16,148(sp)
    bb68:	a011883a 	mov	r8,r20
    bb6c:	9813883a 	mov	r9,r19
    bb70:	b01d883a 	mov	r14,r22
    bb74:	8829883a 	mov	r20,r17
    bb78:	d8c01e17 	ldw	r3,120(sp)
    bb7c:	1d27c83a 	sub	r19,r3,r20
    bb80:	003de606 	br	b31c <__alt_mem_Flash_flash_data+0xf400b31c>
    bb84:	b5800c04 	addi	r22,r22,48
    bb88:	dd8019c5 	stb	r22,103(sp)
    bb8c:	dcc02717 	ldw	r19,156(sp)
    bb90:	dd0019c4 	addi	r20,sp,103
    bb94:	003de106 	br	b31c <__alt_mem_Flash_flash_data+0xf400b31c>
    bb98:	d9002017 	ldw	r4,128(sp)
    bb9c:	d9402117 	ldw	r5,132(sp)
    bba0:	d9801a04 	addi	r6,sp,104
    bba4:	000ae200 	call	ae20 <__sprint_r.part.0>
    bba8:	10000c1e 	bne	r2,zero,bbdc <___vfiprintf_internal_r+0xca8>
    bbac:	d8801c17 	ldw	r2,112(sp)
    bbb0:	8c80010e 	bge	r17,r18,bbb8 <___vfiprintf_internal_r+0xc84>
    bbb4:	9023883a 	mov	r17,r18
    bbb8:	d8c02317 	ldw	r3,140(sp)
    bbbc:	1c47883a 	add	r3,r3,r17
    bbc0:	d8c02315 	stw	r3,140(sp)
    bbc4:	103e7e26 	beq	r2,zero,b5c0 <__alt_mem_Flash_flash_data+0xf400b5c0>
    bbc8:	d9002017 	ldw	r4,128(sp)
    bbcc:	d9402117 	ldw	r5,132(sp)
    bbd0:	d9801a04 	addi	r6,sp,104
    bbd4:	000ae200 	call	ae20 <__sprint_r.part.0>
    bbd8:	103e7926 	beq	r2,zero,b5c0 <__alt_mem_Flash_flash_data+0xf400b5c0>
    bbdc:	dd402117 	ldw	r21,132(sp)
    bbe0:	a880030b 	ldhu	r2,12(r21)
    bbe4:	1080100c 	andi	r2,r2,64
    bbe8:	103e881e 	bne	r2,zero,b60c <__alt_mem_Flash_flash_data+0xf400b60c>
    bbec:	d8802317 	ldw	r2,140(sp)
    bbf0:	003e8706 	br	b610 <__alt_mem_Flash_flash_data+0xf400b610>
    bbf4:	d9402117 	ldw	r5,132(sp)
    bbf8:	b009883a 	mov	r4,r22
    bbfc:	d9801a04 	addi	r6,sp,104
    bc00:	000ae200 	call	ae20 <__sprint_r.part.0>
    bc04:	103ff51e 	bne	r2,zero,bbdc <__alt_mem_Flash_flash_data+0xf400bbdc>
    bc08:	d9001b17 	ldw	r4,108(sp)
    bc0c:	d8801c17 	ldw	r2,112(sp)
    bc10:	d811883a 	mov	r8,sp
    bc14:	21400044 	addi	r5,r4,1
    bc18:	003e4d06 	br	b550 <__alt_mem_Flash_flash_data+0xf400b550>
    bc1c:	1000aa1e 	bne	r2,zero,bec8 <___vfiprintf_internal_r+0xf94>
    bc20:	00c00044 	movi	r3,1
    bc24:	9805883a 	mov	r2,r19
    bc28:	dd000015 	stw	r20,0(sp)
    bc2c:	dcc00115 	stw	r19,4(sp)
    bc30:	dcc01c15 	stw	r19,112(sp)
    bc34:	d8c01b15 	stw	r3,108(sp)
    bc38:	d811883a 	mov	r8,sp
    bc3c:	42000204 	addi	r8,r8,8
    bc40:	aac0010c 	andi	r11,r21,4
    bc44:	583fda26 	beq	r11,zero,bbb0 <__alt_mem_Flash_flash_data+0xf400bbb0>
    bc48:	9467c83a 	sub	r19,r18,r17
    bc4c:	04fe3316 	blt	zero,r19,b51c <__alt_mem_Flash_flash_data+0xf400b51c>
    bc50:	003fd706 	br	bbb0 <__alt_mem_Flash_flash_data+0xf400bbb0>
    bc54:	946dc83a 	sub	r22,r18,r17
    bc58:	05bdfd0e 	bge	zero,r22,b450 <__alt_mem_Flash_flash_data+0xf400b450>
    bc5c:	00c000b4 	movhi	r3,2
    bc60:	18c27b04 	addi	r3,r3,2540
    bc64:	01c00404 	movi	r7,16
    bc68:	d8c02415 	stw	r3,144(sp)
    bc6c:	3d81530e 	bge	r7,r22,c1bc <___vfiprintf_internal_r+0x1288>
    bc70:	8007883a 	mov	r3,r16
    bc74:	034001c4 	movi	r13,7
    bc78:	b021883a 	mov	r16,r22
    bc7c:	da402515 	stw	r9,148(sp)
    bc80:	182d883a 	mov	r22,r3
    bc84:	00000506 	br	bc9c <___vfiprintf_internal_r+0xd68>
    bc88:	29800084 	addi	r6,r5,2
    bc8c:	42000204 	addi	r8,r8,8
    bc90:	180b883a 	mov	r5,r3
    bc94:	843ffc04 	addi	r16,r16,-16
    bc98:	3c000d0e 	bge	r7,r16,bcd0 <___vfiprintf_internal_r+0xd9c>
    bc9c:	10800404 	addi	r2,r2,16
    bca0:	28c00044 	addi	r3,r5,1
    bca4:	45c00015 	stw	r23,0(r8)
    bca8:	41c00115 	stw	r7,4(r8)
    bcac:	d8801c15 	stw	r2,112(sp)
    bcb0:	d8c01b15 	stw	r3,108(sp)
    bcb4:	68fff40e 	bge	r13,r3,bc88 <__alt_mem_Flash_flash_data+0xf400bc88>
    bcb8:	1000151e 	bne	r2,zero,bd10 <___vfiprintf_internal_r+0xddc>
    bcbc:	843ffc04 	addi	r16,r16,-16
    bcc0:	01800044 	movi	r6,1
    bcc4:	000b883a 	mov	r5,zero
    bcc8:	d811883a 	mov	r8,sp
    bccc:	3c3ff316 	blt	r7,r16,bc9c <__alt_mem_Flash_flash_data+0xf400bc9c>
    bcd0:	da402517 	ldw	r9,148(sp)
    bcd4:	b007883a 	mov	r3,r22
    bcd8:	802d883a 	mov	r22,r16
    bcdc:	1821883a 	mov	r16,r3
    bce0:	d8c02417 	ldw	r3,144(sp)
    bce4:	1585883a 	add	r2,r2,r22
    bce8:	45800115 	stw	r22,4(r8)
    bcec:	40c00015 	stw	r3,0(r8)
    bcf0:	d8801c15 	stw	r2,112(sp)
    bcf4:	d9801b15 	stw	r6,108(sp)
    bcf8:	00c001c4 	movi	r3,7
    bcfc:	19806d16 	blt	r3,r6,beb4 <___vfiprintf_internal_r+0xf80>
    bd00:	42000204 	addi	r8,r8,8
    bd04:	31000044 	addi	r4,r6,1
    bd08:	300b883a 	mov	r5,r6
    bd0c:	003dd006 	br	b450 <__alt_mem_Flash_flash_data+0xf400b450>
    bd10:	d9002017 	ldw	r4,128(sp)
    bd14:	d9402117 	ldw	r5,132(sp)
    bd18:	d9801a04 	addi	r6,sp,104
    bd1c:	d9c02b15 	stw	r7,172(sp)
    bd20:	db402a15 	stw	r13,168(sp)
    bd24:	000ae200 	call	ae20 <__sprint_r.part.0>
    bd28:	d9c02b17 	ldw	r7,172(sp)
    bd2c:	db402a17 	ldw	r13,168(sp)
    bd30:	103faa1e 	bne	r2,zero,bbdc <__alt_mem_Flash_flash_data+0xf400bbdc>
    bd34:	d9401b17 	ldw	r5,108(sp)
    bd38:	d8801c17 	ldw	r2,112(sp)
    bd3c:	d811883a 	mov	r8,sp
    bd40:	29800044 	addi	r6,r5,1
    bd44:	003fd306 	br	bc94 <__alt_mem_Flash_flash_data+0xf400bc94>
    bd48:	1000401e 	bne	r2,zero,be4c <___vfiprintf_internal_r+0xf18>
    bd4c:	68003b26 	beq	r13,zero,be3c <___vfiprintf_internal_r+0xf08>
    bd50:	d9001d04 	addi	r4,sp,116
    bd54:	00800084 	movi	r2,2
    bd58:	d9000015 	stw	r4,0(sp)
    bd5c:	d8800115 	stw	r2,4(sp)
    bd60:	1809883a 	mov	r4,r3
    bd64:	d811883a 	mov	r8,sp
    bd68:	003db406 	br	b43c <__alt_mem_Flash_flash_data+0xf400b43c>
    bd6c:	1000451e 	bne	r2,zero,be84 <___vfiprintf_internal_r+0xf50>
    bd70:	01000044 	movi	r4,1
    bd74:	000b883a 	mov	r5,zero
    bd78:	d811883a 	mov	r8,sp
    bd7c:	003db206 	br	b448 <__alt_mem_Flash_flash_data+0xf400b448>
    bd80:	10803fcc 	andi	r2,r2,255
    bd84:	1000071e 	bne	r2,zero,bda4 <___vfiprintf_internal_r+0xe70>
    bd88:	a880004c 	andi	r2,r21,1
    bd8c:	10000526 	beq	r2,zero,bda4 <___vfiprintf_internal_r+0xe70>
    bd90:	00800c04 	movi	r2,48
    bd94:	d88019c5 	stb	r2,103(sp)
    bd98:	dcc02717 	ldw	r19,156(sp)
    bd9c:	dd0019c4 	addi	r20,sp,103
    bda0:	003d5e06 	br	b31c <__alt_mem_Flash_flash_data+0xf400b31c>
    bda4:	dd001a04 	addi	r20,sp,104
    bda8:	003d5c06 	br	b31c <__alt_mem_Flash_flash_data+0xf400b31c>
    bdac:	1000971e 	bne	r2,zero,c00c <___vfiprintf_internal_r+0x10d8>
    bdb0:	d8c01d87 	ldb	r3,118(sp)
    bdb4:	18005826 	beq	r3,zero,bf18 <___vfiprintf_internal_r+0xfe4>
    bdb8:	00800044 	movi	r2,1
    bdbc:	d8c01d84 	addi	r3,sp,118
    bdc0:	1009883a 	mov	r4,r2
    bdc4:	d8c00015 	stw	r3,0(sp)
    bdc8:	d8800115 	stw	r2,4(sp)
    bdcc:	d811883a 	mov	r8,sp
    bdd0:	003f3206 	br	ba9c <__alt_mem_Flash_flash_data+0xf400ba9c>
    bdd4:	8023883a 	mov	r17,r16
    bdd8:	003ca706 	br	b078 <__alt_mem_Flash_flash_data+0xf400b078>
    bddc:	d9002017 	ldw	r4,128(sp)
    bde0:	d9402117 	ldw	r5,132(sp)
    bde4:	d9801a04 	addi	r6,sp,104
    bde8:	000ae200 	call	ae20 <__sprint_r.part.0>
    bdec:	103f7b1e 	bne	r2,zero,bbdc <__alt_mem_Flash_flash_data+0xf400bbdc>
    bdf0:	d8801c17 	ldw	r2,112(sp)
    bdf4:	d811883a 	mov	r8,sp
    bdf8:	003f9106 	br	bc40 <__alt_mem_Flash_flash_data+0xf400bc40>
    bdfc:	00800084 	movi	r2,2
    be00:	b348b03a 	or	r4,r22,r13
    be04:	003d2906 	br	b2ac <__alt_mem_Flash_flash_data+0xf400b2ac>
    be08:	d8802217 	ldw	r2,136(sp)
    be0c:	001b883a 	mov	r13,zero
    be10:	15800017 	ldw	r22,0(r2)
    be14:	10800104 	addi	r2,r2,4
    be18:	d8802215 	stw	r2,136(sp)
    be1c:	003ea706 	br	b8bc <__alt_mem_Flash_flash_data+0xf400b8bc>
    be20:	d9002017 	ldw	r4,128(sp)
    be24:	d9402117 	ldw	r5,132(sp)
    be28:	d9801a04 	addi	r6,sp,104
    be2c:	000ae200 	call	ae20 <__sprint_r.part.0>
    be30:	103f6a1e 	bne	r2,zero,bbdc <__alt_mem_Flash_flash_data+0xf400bbdc>
    be34:	d811883a 	mov	r8,sp
    be38:	003cff06 	br	b238 <__alt_mem_Flash_flash_data+0xf400b238>
    be3c:	000b883a 	mov	r5,zero
    be40:	1809883a 	mov	r4,r3
    be44:	d811883a 	mov	r8,sp
    be48:	003d7f06 	br	b448 <__alt_mem_Flash_flash_data+0xf400b448>
    be4c:	d9002017 	ldw	r4,128(sp)
    be50:	d9402117 	ldw	r5,132(sp)
    be54:	d9801a04 	addi	r6,sp,104
    be58:	da402b15 	stw	r9,172(sp)
    be5c:	db402a15 	stw	r13,168(sp)
    be60:	000ae200 	call	ae20 <__sprint_r.part.0>
    be64:	da402b17 	ldw	r9,172(sp)
    be68:	db402a17 	ldw	r13,168(sp)
    be6c:	103f5b1e 	bne	r2,zero,bbdc <__alt_mem_Flash_flash_data+0xf400bbdc>
    be70:	d9401b17 	ldw	r5,108(sp)
    be74:	d8801c17 	ldw	r2,112(sp)
    be78:	d811883a 	mov	r8,sp
    be7c:	29000044 	addi	r4,r5,1
    be80:	003d6406 	br	b414 <__alt_mem_Flash_flash_data+0xf400b414>
    be84:	d9002017 	ldw	r4,128(sp)
    be88:	d9402117 	ldw	r5,132(sp)
    be8c:	d9801a04 	addi	r6,sp,104
    be90:	da402b15 	stw	r9,172(sp)
    be94:	000ae200 	call	ae20 <__sprint_r.part.0>
    be98:	da402b17 	ldw	r9,172(sp)
    be9c:	103f4f1e 	bne	r2,zero,bbdc <__alt_mem_Flash_flash_data+0xf400bbdc>
    bea0:	d9401b17 	ldw	r5,108(sp)
    bea4:	d8801c17 	ldw	r2,112(sp)
    bea8:	d811883a 	mov	r8,sp
    beac:	29000044 	addi	r4,r5,1
    beb0:	003d6506 	br	b448 <__alt_mem_Flash_flash_data+0xf400b448>
    beb4:	10009a1e 	bne	r2,zero,c120 <___vfiprintf_internal_r+0x11ec>
    beb8:	01000044 	movi	r4,1
    bebc:	000b883a 	mov	r5,zero
    bec0:	d811883a 	mov	r8,sp
    bec4:	003d6206 	br	b450 <__alt_mem_Flash_flash_data+0xf400b450>
    bec8:	d9002017 	ldw	r4,128(sp)
    becc:	d9402117 	ldw	r5,132(sp)
    bed0:	d9801a04 	addi	r6,sp,104
    bed4:	000ae200 	call	ae20 <__sprint_r.part.0>
    bed8:	103f401e 	bne	r2,zero,bbdc <__alt_mem_Flash_flash_data+0xf400bbdc>
    bedc:	d9001b17 	ldw	r4,108(sp)
    bee0:	d8801c17 	ldw	r2,112(sp)
    bee4:	d811883a 	mov	r8,sp
    bee8:	21000044 	addi	r4,r4,1
    beec:	003d7d06 	br	b4e4 <__alt_mem_Flash_flash_data+0xf400b4e4>
    bef0:	05adc83a 	sub	r22,zero,r22
    bef4:	b004c03a 	cmpne	r2,r22,zero
    bef8:	035bc83a 	sub	r13,zero,r13
    befc:	689bc83a 	sub	r13,r13,r2
    bf00:	03800b44 	movi	r14,45
    bf04:	db801d85 	stb	r14,118(sp)
    bf08:	4827883a 	mov	r19,r9
    bf0c:	00800044 	movi	r2,1
    bf10:	b348b03a 	or	r4,r22,r13
    bf14:	003ce806 	br	b2b8 <__alt_mem_Flash_flash_data+0xf400b2b8>
    bf18:	000b883a 	mov	r5,zero
    bf1c:	01000044 	movi	r4,1
    bf20:	d811883a 	mov	r8,sp
    bf24:	683d4826 	beq	r13,zero,b448 <__alt_mem_Flash_flash_data+0xf400b448>
    bf28:	00800084 	movi	r2,2
    bf2c:	d8c01d04 	addi	r3,sp,116
    bf30:	d8c00015 	stw	r3,0(sp)
    bf34:	d8800115 	stw	r2,4(sp)
    bf38:	003d4006 	br	b43c <__alt_mem_Flash_flash_data+0xf400b43c>
    bf3c:	00800084 	movi	r2,2
    bf40:	003cda06 	br	b2ac <__alt_mem_Flash_flash_data+0xf400b2ac>
    bf44:	a880100c 	andi	r2,r21,64
    bf48:	10004226 	beq	r2,zero,c054 <___vfiprintf_internal_r+0x1120>
    bf4c:	d8802217 	ldw	r2,136(sp)
    bf50:	001b883a 	mov	r13,zero
    bf54:	1580000b 	ldhu	r22,0(r2)
    bf58:	10800104 	addi	r2,r2,4
    bf5c:	d8802215 	stw	r2,136(sp)
    bf60:	b009883a 	mov	r4,r22
    bf64:	0005883a 	mov	r2,zero
    bf68:	003cd006 	br	b2ac <__alt_mem_Flash_flash_data+0xf400b2ac>
    bf6c:	80c00007 	ldb	r3,0(r16)
    bf70:	8005883a 	mov	r2,r16
    bf74:	003c4d06 	br	b0ac <__alt_mem_Flash_flash_data+0xf400b0ac>
    bf78:	a880100c 	andi	r2,r21,64
    bf7c:	10004426 	beq	r2,zero,c090 <___vfiprintf_internal_r+0x115c>
    bf80:	d8c02217 	ldw	r3,136(sp)
    bf84:	001b883a 	mov	r13,zero
    bf88:	00800044 	movi	r2,1
    bf8c:	1d80000b 	ldhu	r22,0(r3)
    bf90:	18c00104 	addi	r3,r3,4
    bf94:	d8c02215 	stw	r3,136(sp)
    bf98:	b009883a 	mov	r4,r22
    bf9c:	003cc306 	br	b2ac <__alt_mem_Flash_flash_data+0xf400b2ac>
    bfa0:	a880040c 	andi	r2,r21,16
    bfa4:	1000091e 	bne	r2,zero,bfcc <___vfiprintf_internal_r+0x1098>
    bfa8:	aac0100c 	andi	r11,r21,64
    bfac:	58000726 	beq	r11,zero,bfcc <___vfiprintf_internal_r+0x1098>
    bfb0:	d8c02217 	ldw	r3,136(sp)
    bfb4:	d9002317 	ldw	r4,140(sp)
    bfb8:	18800017 	ldw	r2,0(r3)
    bfbc:	18c00104 	addi	r3,r3,4
    bfc0:	d8c02215 	stw	r3,136(sp)
    bfc4:	1100000d 	sth	r4,0(r2)
    bfc8:	003c0e06 	br	b004 <__alt_mem_Flash_flash_data+0xf400b004>
    bfcc:	d8c02217 	ldw	r3,136(sp)
    bfd0:	d9002317 	ldw	r4,140(sp)
    bfd4:	18800017 	ldw	r2,0(r3)
    bfd8:	18c00104 	addi	r3,r3,4
    bfdc:	d8c02215 	stw	r3,136(sp)
    bfe0:	11000015 	stw	r4,0(r2)
    bfe4:	003c0706 	br	b004 <__alt_mem_Flash_flash_data+0xf400b004>
    bfe8:	a880100c 	andi	r2,r21,64
    bfec:	10002126 	beq	r2,zero,c074 <___vfiprintf_internal_r+0x1140>
    bff0:	1d80000f 	ldh	r22,0(r3)
    bff4:	d8c02217 	ldw	r3,136(sp)
    bff8:	b01bd7fa 	srai	r13,r22,31
    bffc:	18c00104 	addi	r3,r3,4
    c000:	d8c02215 	stw	r3,136(sp)
    c004:	6805883a 	mov	r2,r13
    c008:	003dc406 	br	b71c <__alt_mem_Flash_flash_data+0xf400b71c>
    c00c:	d9002017 	ldw	r4,128(sp)
    c010:	d9402117 	ldw	r5,132(sp)
    c014:	d9801a04 	addi	r6,sp,104
    c018:	da402b15 	stw	r9,172(sp)
    c01c:	db402a15 	stw	r13,168(sp)
    c020:	000ae200 	call	ae20 <__sprint_r.part.0>
    c024:	da402b17 	ldw	r9,172(sp)
    c028:	db402a17 	ldw	r13,168(sp)
    c02c:	103eeb1e 	bne	r2,zero,bbdc <__alt_mem_Flash_flash_data+0xf400bbdc>
    c030:	d9401b17 	ldw	r5,108(sp)
    c034:	d8801c17 	ldw	r2,112(sp)
    c038:	d811883a 	mov	r8,sp
    c03c:	29000044 	addi	r4,r5,1
    c040:	003e8b06 	br	ba70 <__alt_mem_Flash_flash_data+0xf400ba70>
    c044:	9023883a 	mov	r17,r18
    c048:	003d5a06 	br	b5b4 <__alt_mem_Flash_flash_data+0xf400b5b4>
    c04c:	4827883a 	mov	r19,r9
    c050:	003e3506 	br	b928 <__alt_mem_Flash_flash_data+0xf400b928>
    c054:	d8c02217 	ldw	r3,136(sp)
    c058:	001b883a 	mov	r13,zero
    c05c:	0005883a 	mov	r2,zero
    c060:	1d800017 	ldw	r22,0(r3)
    c064:	18c00104 	addi	r3,r3,4
    c068:	d8c02215 	stw	r3,136(sp)
    c06c:	b009883a 	mov	r4,r22
    c070:	003c8e06 	br	b2ac <__alt_mem_Flash_flash_data+0xf400b2ac>
    c074:	1d800017 	ldw	r22,0(r3)
    c078:	d9002217 	ldw	r4,136(sp)
    c07c:	b01bd7fa 	srai	r13,r22,31
    c080:	21000104 	addi	r4,r4,4
    c084:	d9002215 	stw	r4,136(sp)
    c088:	6805883a 	mov	r2,r13
    c08c:	003da306 	br	b71c <__alt_mem_Flash_flash_data+0xf400b71c>
    c090:	d9002217 	ldw	r4,136(sp)
    c094:	001b883a 	mov	r13,zero
    c098:	00800044 	movi	r2,1
    c09c:	25800017 	ldw	r22,0(r4)
    c0a0:	21000104 	addi	r4,r4,4
    c0a4:	d9002215 	stw	r4,136(sp)
    c0a8:	b009883a 	mov	r4,r22
    c0ac:	003c7f06 	br	b2ac <__alt_mem_Flash_flash_data+0xf400b2ac>
    c0b0:	00c000b4 	movhi	r3,2
    c0b4:	18c27b04 	addi	r3,r3,2540
    c0b8:	d8c02415 	stw	r3,144(sp)
    c0bc:	003cff06 	br	b4bc <__alt_mem_Flash_flash_data+0xf400b4bc>
    c0c0:	d8801c17 	ldw	r2,112(sp)
    c0c4:	dd402117 	ldw	r21,132(sp)
    c0c8:	103ec526 	beq	r2,zero,bbe0 <__alt_mem_Flash_flash_data+0xf400bbe0>
    c0cc:	d9002017 	ldw	r4,128(sp)
    c0d0:	a80b883a 	mov	r5,r21
    c0d4:	d9801a04 	addi	r6,sp,104
    c0d8:	000ae200 	call	ae20 <__sprint_r.part.0>
    c0dc:	003ec006 	br	bbe0 <__alt_mem_Flash_flash_data+0xf400bbe0>
    c0e0:	80800044 	addi	r2,r16,1
    c0e4:	ad400814 	ori	r21,r21,32
    c0e8:	80c00047 	ldb	r3,1(r16)
    c0ec:	003bef06 	br	b0ac <__alt_mem_Flash_flash_data+0xf400b0ac>
    c0f0:	04a5c83a 	sub	r18,zero,r18
    c0f4:	8005883a 	mov	r2,r16
    c0f8:	d8c02215 	stw	r3,136(sp)
    c0fc:	003d5306 	br	b64c <__alt_mem_Flash_flash_data+0xf400b64c>
    c100:	da002a15 	stw	r8,168(sp)
    c104:	00012240 	call	1224 <strlen>
    c108:	1027883a 	mov	r19,r2
    c10c:	db801d83 	ldbu	r14,118(sp)
    c110:	dd802215 	stw	r22,136(sp)
    c114:	0013883a 	mov	r9,zero
    c118:	da002a17 	ldw	r8,168(sp)
    c11c:	003c7f06 	br	b31c <__alt_mem_Flash_flash_data+0xf400b31c>
    c120:	d9002017 	ldw	r4,128(sp)
    c124:	d9402117 	ldw	r5,132(sp)
    c128:	d9801a04 	addi	r6,sp,104
    c12c:	da402b15 	stw	r9,172(sp)
    c130:	000ae200 	call	ae20 <__sprint_r.part.0>
    c134:	da402b17 	ldw	r9,172(sp)
    c138:	103ea81e 	bne	r2,zero,bbdc <__alt_mem_Flash_flash_data+0xf400bbdc>
    c13c:	d9401b17 	ldw	r5,108(sp)
    c140:	d8801c17 	ldw	r2,112(sp)
    c144:	d811883a 	mov	r8,sp
    c148:	29000044 	addi	r4,r5,1
    c14c:	003cc006 	br	b450 <__alt_mem_Flash_flash_data+0xf400b450>
    c150:	d9401b17 	ldw	r5,108(sp)
    c154:	010000b4 	movhi	r4,2
    c158:	21027f04 	addi	r4,r4,2556
    c15c:	d9002415 	stw	r4,144(sp)
    c160:	29400044 	addi	r5,r5,1
    c164:	003c9f06 	br	b3e4 <__alt_mem_Flash_flash_data+0xf400b3e4>
    c168:	00800184 	movi	r2,6
    c16c:	1240012e 	bgeu	r2,r9,c174 <___vfiprintf_internal_r+0x1240>
    c170:	1013883a 	mov	r9,r2
    c174:	4827883a 	mov	r19,r9
    c178:	4823883a 	mov	r17,r9
    c17c:	48001116 	blt	r9,zero,c1c4 <___vfiprintf_internal_r+0x1290>
    c180:	050000b4 	movhi	r20,2
    c184:	dd802215 	stw	r22,136(sp)
    c188:	a5020f04 	addi	r20,r20,2108
    c18c:	003db106 	br	b854 <__alt_mem_Flash_flash_data+0xf400b854>
    c190:	d9401b17 	ldw	r5,108(sp)
    c194:	010000b4 	movhi	r4,2
    c198:	21027f04 	addi	r4,r4,2556
    c19c:	d9002415 	stw	r4,144(sp)
    c1a0:	29400044 	addi	r5,r5,1
    c1a4:	003cf906 	br	b58c <__alt_mem_Flash_flash_data+0xf400b58c>
    c1a8:	4827883a 	mov	r19,r9
    c1ac:	db801d83 	ldbu	r14,118(sp)
    c1b0:	dd802215 	stw	r22,136(sp)
    c1b4:	0013883a 	mov	r9,zero
    c1b8:	003c5806 	br	b31c <__alt_mem_Flash_flash_data+0xf400b31c>
    c1bc:	200d883a 	mov	r6,r4
    c1c0:	003ec706 	br	bce0 <__alt_mem_Flash_flash_data+0xf400bce0>
    c1c4:	0023883a 	mov	r17,zero
    c1c8:	003fed06 	br	c180 <__alt_mem_Flash_flash_data+0xf400c180>
    c1cc:	d9002217 	ldw	r4,136(sp)
    c1d0:	22400017 	ldw	r9,0(r4)
    c1d4:	20c00104 	addi	r3,r4,4
    c1d8:	d8c02215 	stw	r3,136(sp)
    c1dc:	483fc20e 	bge	r9,zero,c0e8 <__alt_mem_Flash_flash_data+0xf400c0e8>
    c1e0:	027fffc4 	movi	r9,-1
    c1e4:	80c00047 	ldb	r3,1(r16)
    c1e8:	003bb006 	br	b0ac <__alt_mem_Flash_flash_data+0xf400b0ac>
    c1ec:	8c80010e 	bge	r17,r18,c1f4 <___vfiprintf_internal_r+0x12c0>
    c1f0:	9023883a 	mov	r17,r18
    c1f4:	d8802317 	ldw	r2,140(sp)
    c1f8:	1445883a 	add	r2,r2,r17
    c1fc:	d8802315 	stw	r2,140(sp)
    c200:	003cef06 	br	b5c0 <__alt_mem_Flash_flash_data+0xf400b5c0>

0000c204 <__vfiprintf_internal>:
    c204:	2007883a 	mov	r3,r4
    c208:	010000b4 	movhi	r4,2
    c20c:	210b1004 	addi	r4,r4,11328
    c210:	21000017 	ldw	r4,0(r4)
    c214:	2805883a 	mov	r2,r5
    c218:	300f883a 	mov	r7,r6
    c21c:	180b883a 	mov	r5,r3
    c220:	100d883a 	mov	r6,r2
    c224:	000af341 	jmpi	af34 <___vfiprintf_internal_r>

0000c228 <__sbprintf>:
    c228:	2880030b 	ldhu	r2,12(r5)
    c22c:	2ac01917 	ldw	r11,100(r5)
    c230:	2a80038b 	ldhu	r10,14(r5)
    c234:	2a400717 	ldw	r9,28(r5)
    c238:	2a000917 	ldw	r8,36(r5)
    c23c:	defee204 	addi	sp,sp,-1144
    c240:	00c10004 	movi	r3,1024
    c244:	dc011a15 	stw	r16,1128(sp)
    c248:	10bfff4c 	andi	r2,r2,65533
    c24c:	2821883a 	mov	r16,r5
    c250:	d8cb883a 	add	r5,sp,r3
    c254:	dc811c15 	stw	r18,1136(sp)
    c258:	dc411b15 	stw	r17,1132(sp)
    c25c:	dfc11d15 	stw	ra,1140(sp)
    c260:	2025883a 	mov	r18,r4
    c264:	d881030d 	sth	r2,1036(sp)
    c268:	dac11915 	stw	r11,1124(sp)
    c26c:	da81038d 	sth	r10,1038(sp)
    c270:	da410715 	stw	r9,1052(sp)
    c274:	da010915 	stw	r8,1060(sp)
    c278:	dec10015 	stw	sp,1024(sp)
    c27c:	dec10415 	stw	sp,1040(sp)
    c280:	d8c10215 	stw	r3,1032(sp)
    c284:	d8c10515 	stw	r3,1044(sp)
    c288:	d8010615 	stw	zero,1048(sp)
    c28c:	000af340 	call	af34 <___vfiprintf_internal_r>
    c290:	1023883a 	mov	r17,r2
    c294:	10000416 	blt	r2,zero,c2a8 <__sbprintf+0x80>
    c298:	9009883a 	mov	r4,r18
    c29c:	d9410004 	addi	r5,sp,1024
    c2a0:	0006f000 	call	6f00 <_fflush_r>
    c2a4:	10000d1e 	bne	r2,zero,c2dc <__sbprintf+0xb4>
    c2a8:	d8c1030b 	ldhu	r3,1036(sp)
    c2ac:	18c0100c 	andi	r3,r3,64
    c2b0:	18000326 	beq	r3,zero,c2c0 <__sbprintf+0x98>
    c2b4:	8080030b 	ldhu	r2,12(r16)
    c2b8:	10801014 	ori	r2,r2,64
    c2bc:	8080030d 	sth	r2,12(r16)
    c2c0:	8805883a 	mov	r2,r17
    c2c4:	dfc11d17 	ldw	ra,1140(sp)
    c2c8:	dc811c17 	ldw	r18,1136(sp)
    c2cc:	dc411b17 	ldw	r17,1132(sp)
    c2d0:	dc011a17 	ldw	r16,1128(sp)
    c2d4:	dec11e04 	addi	sp,sp,1144
    c2d8:	f800283a 	ret
    c2dc:	047fffc4 	movi	r17,-1
    c2e0:	003ff106 	br	c2a8 <__alt_mem_Flash_flash_data+0xf400c2a8>

0000c2e4 <_write_r>:
    c2e4:	defffd04 	addi	sp,sp,-12
    c2e8:	dc000015 	stw	r16,0(sp)
    c2ec:	040000b4 	movhi	r16,2
    c2f0:	dc400115 	stw	r17,4(sp)
    c2f4:	8412fd04 	addi	r16,r16,19444
    c2f8:	2023883a 	mov	r17,r4
    c2fc:	2809883a 	mov	r4,r5
    c300:	300b883a 	mov	r5,r6
    c304:	380d883a 	mov	r6,r7
    c308:	dfc00215 	stw	ra,8(sp)
    c30c:	80000015 	stw	zero,0(r16)
    c310:	00107200 	call	10720 <write>
    c314:	00ffffc4 	movi	r3,-1
    c318:	10c00526 	beq	r2,r3,c330 <_write_r+0x4c>
    c31c:	dfc00217 	ldw	ra,8(sp)
    c320:	dc400117 	ldw	r17,4(sp)
    c324:	dc000017 	ldw	r16,0(sp)
    c328:	dec00304 	addi	sp,sp,12
    c32c:	f800283a 	ret
    c330:	80c00017 	ldw	r3,0(r16)
    c334:	183ff926 	beq	r3,zero,c31c <__alt_mem_Flash_flash_data+0xf400c31c>
    c338:	88c00015 	stw	r3,0(r17)
    c33c:	003ff706 	br	c31c <__alt_mem_Flash_flash_data+0xf400c31c>

0000c340 <_close_r>:
    c340:	defffd04 	addi	sp,sp,-12
    c344:	dc000015 	stw	r16,0(sp)
    c348:	040000b4 	movhi	r16,2
    c34c:	dc400115 	stw	r17,4(sp)
    c350:	8412fd04 	addi	r16,r16,19444
    c354:	2023883a 	mov	r17,r4
    c358:	2809883a 	mov	r4,r5
    c35c:	dfc00215 	stw	ra,8(sp)
    c360:	80000015 	stw	zero,0(r16)
    c364:	000fea80 	call	fea8 <close>
    c368:	00ffffc4 	movi	r3,-1
    c36c:	10c00526 	beq	r2,r3,c384 <_close_r+0x44>
    c370:	dfc00217 	ldw	ra,8(sp)
    c374:	dc400117 	ldw	r17,4(sp)
    c378:	dc000017 	ldw	r16,0(sp)
    c37c:	dec00304 	addi	sp,sp,12
    c380:	f800283a 	ret
    c384:	80c00017 	ldw	r3,0(r16)
    c388:	183ff926 	beq	r3,zero,c370 <__alt_mem_Flash_flash_data+0xf400c370>
    c38c:	88c00015 	stw	r3,0(r17)
    c390:	003ff706 	br	c370 <__alt_mem_Flash_flash_data+0xf400c370>

0000c394 <_calloc_r>:
    c394:	298b383a 	mul	r5,r5,r6
    c398:	defffe04 	addi	sp,sp,-8
    c39c:	dc000015 	stw	r16,0(sp)
    c3a0:	dfc00115 	stw	ra,4(sp)
    c3a4:	00007280 	call	728 <_malloc_r>
    c3a8:	1021883a 	mov	r16,r2
    c3ac:	10002826 	beq	r2,zero,c450 <_calloc_r+0xbc>
    c3b0:	11bfff17 	ldw	r6,-4(r2)
    c3b4:	00bfff04 	movi	r2,-4
    c3b8:	00c00904 	movi	r3,36
    c3bc:	308c703a 	and	r6,r6,r2
    c3c0:	308d883a 	add	r6,r6,r2
    c3c4:	19801436 	bltu	r3,r6,c418 <_calloc_r+0x84>
    c3c8:	008004c4 	movi	r2,19
    c3cc:	11800936 	bltu	r2,r6,c3f4 <_calloc_r+0x60>
    c3d0:	8005883a 	mov	r2,r16
    c3d4:	10000015 	stw	zero,0(r2)
    c3d8:	10000115 	stw	zero,4(r2)
    c3dc:	10000215 	stw	zero,8(r2)
    c3e0:	8005883a 	mov	r2,r16
    c3e4:	dfc00117 	ldw	ra,4(sp)
    c3e8:	dc000017 	ldw	r16,0(sp)
    c3ec:	dec00204 	addi	sp,sp,8
    c3f0:	f800283a 	ret
    c3f4:	80000015 	stw	zero,0(r16)
    c3f8:	80000115 	stw	zero,4(r16)
    c3fc:	008006c4 	movi	r2,27
    c400:	11800d2e 	bgeu	r2,r6,c438 <_calloc_r+0xa4>
    c404:	80000215 	stw	zero,8(r16)
    c408:	80000315 	stw	zero,12(r16)
    c40c:	30c00c26 	beq	r6,r3,c440 <_calloc_r+0xac>
    c410:	80800404 	addi	r2,r16,16
    c414:	003fef06 	br	c3d4 <__alt_mem_Flash_flash_data+0xf400c3d4>
    c418:	8009883a 	mov	r4,r16
    c41c:	000b883a 	mov	r5,zero
    c420:	000839c0 	call	839c <memset>
    c424:	8005883a 	mov	r2,r16
    c428:	dfc00117 	ldw	ra,4(sp)
    c42c:	dc000017 	ldw	r16,0(sp)
    c430:	dec00204 	addi	sp,sp,8
    c434:	f800283a 	ret
    c438:	80800204 	addi	r2,r16,8
    c43c:	003fe506 	br	c3d4 <__alt_mem_Flash_flash_data+0xf400c3d4>
    c440:	80000415 	stw	zero,16(r16)
    c444:	80800604 	addi	r2,r16,24
    c448:	80000515 	stw	zero,20(r16)
    c44c:	003fe106 	br	c3d4 <__alt_mem_Flash_flash_data+0xf400c3d4>
    c450:	0005883a 	mov	r2,zero
    c454:	003fe306 	br	c3e4 <__alt_mem_Flash_flash_data+0xf400c3e4>

0000c458 <_fclose_r>:
    c458:	28003926 	beq	r5,zero,c540 <_fclose_r+0xe8>
    c45c:	defffc04 	addi	sp,sp,-16
    c460:	dc400115 	stw	r17,4(sp)
    c464:	dc000015 	stw	r16,0(sp)
    c468:	dfc00315 	stw	ra,12(sp)
    c46c:	dc800215 	stw	r18,8(sp)
    c470:	2023883a 	mov	r17,r4
    c474:	2821883a 	mov	r16,r5
    c478:	20000226 	beq	r4,zero,c484 <_fclose_r+0x2c>
    c47c:	20800e17 	ldw	r2,56(r4)
    c480:	10002726 	beq	r2,zero,c520 <_fclose_r+0xc8>
    c484:	8080030f 	ldh	r2,12(r16)
    c488:	1000071e 	bne	r2,zero,c4a8 <_fclose_r+0x50>
    c48c:	0005883a 	mov	r2,zero
    c490:	dfc00317 	ldw	ra,12(sp)
    c494:	dc800217 	ldw	r18,8(sp)
    c498:	dc400117 	ldw	r17,4(sp)
    c49c:	dc000017 	ldw	r16,0(sp)
    c4a0:	dec00404 	addi	sp,sp,16
    c4a4:	f800283a 	ret
    c4a8:	8809883a 	mov	r4,r17
    c4ac:	800b883a 	mov	r5,r16
    c4b0:	0006cf80 	call	6cf8 <__sflush_r>
    c4b4:	1025883a 	mov	r18,r2
    c4b8:	80800b17 	ldw	r2,44(r16)
    c4bc:	10000426 	beq	r2,zero,c4d0 <_fclose_r+0x78>
    c4c0:	81400717 	ldw	r5,28(r16)
    c4c4:	8809883a 	mov	r4,r17
    c4c8:	103ee83a 	callr	r2
    c4cc:	10001616 	blt	r2,zero,c528 <_fclose_r+0xd0>
    c4d0:	8080030b 	ldhu	r2,12(r16)
    c4d4:	1080200c 	andi	r2,r2,128
    c4d8:	1000151e 	bne	r2,zero,c530 <_fclose_r+0xd8>
    c4dc:	81400c17 	ldw	r5,48(r16)
    c4e0:	28000526 	beq	r5,zero,c4f8 <_fclose_r+0xa0>
    c4e4:	80801004 	addi	r2,r16,64
    c4e8:	28800226 	beq	r5,r2,c4f4 <_fclose_r+0x9c>
    c4ec:	8809883a 	mov	r4,r17
    c4f0:	00074500 	call	7450 <_free_r>
    c4f4:	80000c15 	stw	zero,48(r16)
    c4f8:	81401117 	ldw	r5,68(r16)
    c4fc:	28000326 	beq	r5,zero,c50c <_fclose_r+0xb4>
    c500:	8809883a 	mov	r4,r17
    c504:	00074500 	call	7450 <_free_r>
    c508:	80001115 	stw	zero,68(r16)
    c50c:	00072ec0 	call	72ec <__sfp_lock_acquire>
    c510:	8000030d 	sth	zero,12(r16)
    c514:	00072f00 	call	72f0 <__sfp_lock_release>
    c518:	9005883a 	mov	r2,r18
    c51c:	003fdc06 	br	c490 <__alt_mem_Flash_flash_data+0xf400c490>
    c520:	00072dc0 	call	72dc <__sinit>
    c524:	003fd706 	br	c484 <__alt_mem_Flash_flash_data+0xf400c484>
    c528:	04bfffc4 	movi	r18,-1
    c52c:	003fe806 	br	c4d0 <__alt_mem_Flash_flash_data+0xf400c4d0>
    c530:	81400417 	ldw	r5,16(r16)
    c534:	8809883a 	mov	r4,r17
    c538:	00074500 	call	7450 <_free_r>
    c53c:	003fe706 	br	c4dc <__alt_mem_Flash_flash_data+0xf400c4dc>
    c540:	0005883a 	mov	r2,zero
    c544:	f800283a 	ret

0000c548 <fclose>:
    c548:	008000b4 	movhi	r2,2
    c54c:	108b1004 	addi	r2,r2,11328
    c550:	200b883a 	mov	r5,r4
    c554:	11000017 	ldw	r4,0(r2)
    c558:	000c4581 	jmpi	c458 <_fclose_r>

0000c55c <_fputwc_r>:
    c55c:	3080030b 	ldhu	r2,12(r6)
    c560:	defff804 	addi	sp,sp,-32
    c564:	dcc00415 	stw	r19,16(sp)
    c568:	dc800315 	stw	r18,12(sp)
    c56c:	dc000115 	stw	r16,4(sp)
    c570:	dfc00715 	stw	ra,28(sp)
    c574:	dd400615 	stw	r21,24(sp)
    c578:	dd000515 	stw	r20,20(sp)
    c57c:	dc400215 	stw	r17,8(sp)
    c580:	10c8000c 	andi	r3,r2,8192
    c584:	3021883a 	mov	r16,r6
    c588:	2027883a 	mov	r19,r4
    c58c:	2825883a 	mov	r18,r5
    c590:	1800051e 	bne	r3,zero,c5a8 <_fputwc_r+0x4c>
    c594:	30c01917 	ldw	r3,100(r6)
    c598:	10880014 	ori	r2,r2,8192
    c59c:	3080030d 	sth	r2,12(r6)
    c5a0:	18880014 	ori	r2,r3,8192
    c5a4:	30801915 	stw	r2,100(r6)
    c5a8:	0007e100 	call	7e10 <__locale_mb_cur_max>
    c5ac:	00c00044 	movi	r3,1
    c5b0:	10c03e26 	beq	r2,r3,c6ac <_fputwc_r+0x150>
    c5b4:	9809883a 	mov	r4,r19
    c5b8:	d80b883a 	mov	r5,sp
    c5bc:	900d883a 	mov	r6,r18
    c5c0:	81c01704 	addi	r7,r16,92
    c5c4:	000c9f40 	call	c9f4 <_wcrtomb_r>
    c5c8:	1029883a 	mov	r20,r2
    c5cc:	00bfffc4 	movi	r2,-1
    c5d0:	a0802026 	beq	r20,r2,c654 <_fputwc_r+0xf8>
    c5d4:	d9400003 	ldbu	r5,0(sp)
    c5d8:	a0001c26 	beq	r20,zero,c64c <_fputwc_r+0xf0>
    c5dc:	0023883a 	mov	r17,zero
    c5e0:	05400284 	movi	r21,10
    c5e4:	00000906 	br	c60c <_fputwc_r+0xb0>
    c5e8:	80800017 	ldw	r2,0(r16)
    c5ec:	11400005 	stb	r5,0(r2)
    c5f0:	80c00017 	ldw	r3,0(r16)
    c5f4:	18c00044 	addi	r3,r3,1
    c5f8:	80c00015 	stw	r3,0(r16)
    c5fc:	8c400044 	addi	r17,r17,1
    c600:	dc45883a 	add	r2,sp,r17
    c604:	8d00112e 	bgeu	r17,r20,c64c <_fputwc_r+0xf0>
    c608:	11400003 	ldbu	r5,0(r2)
    c60c:	80c00217 	ldw	r3,8(r16)
    c610:	18ffffc4 	addi	r3,r3,-1
    c614:	80c00215 	stw	r3,8(r16)
    c618:	183ff30e 	bge	r3,zero,c5e8 <__alt_mem_Flash_flash_data+0xf400c5e8>
    c61c:	80800617 	ldw	r2,24(r16)
    c620:	18801916 	blt	r3,r2,c688 <_fputwc_r+0x12c>
    c624:	80800017 	ldw	r2,0(r16)
    c628:	11400005 	stb	r5,0(r2)
    c62c:	80800017 	ldw	r2,0(r16)
    c630:	10c00003 	ldbu	r3,0(r2)
    c634:	10800044 	addi	r2,r2,1
    c638:	1d402326 	beq	r3,r21,c6c8 <_fputwc_r+0x16c>
    c63c:	80800015 	stw	r2,0(r16)
    c640:	8c400044 	addi	r17,r17,1
    c644:	dc45883a 	add	r2,sp,r17
    c648:	8d3fef36 	bltu	r17,r20,c608 <__alt_mem_Flash_flash_data+0xf400c608>
    c64c:	9005883a 	mov	r2,r18
    c650:	00000406 	br	c664 <_fputwc_r+0x108>
    c654:	80c0030b 	ldhu	r3,12(r16)
    c658:	a005883a 	mov	r2,r20
    c65c:	18c01014 	ori	r3,r3,64
    c660:	80c0030d 	sth	r3,12(r16)
    c664:	dfc00717 	ldw	ra,28(sp)
    c668:	dd400617 	ldw	r21,24(sp)
    c66c:	dd000517 	ldw	r20,20(sp)
    c670:	dcc00417 	ldw	r19,16(sp)
    c674:	dc800317 	ldw	r18,12(sp)
    c678:	dc400217 	ldw	r17,8(sp)
    c67c:	dc000117 	ldw	r16,4(sp)
    c680:	dec00804 	addi	sp,sp,32
    c684:	f800283a 	ret
    c688:	9809883a 	mov	r4,r19
    c68c:	29403fcc 	andi	r5,r5,255
    c690:	800d883a 	mov	r6,r16
    c694:	000c8a00 	call	c8a0 <__swbuf_r>
    c698:	10bfffe0 	cmpeqi	r2,r2,-1
    c69c:	10803fcc 	andi	r2,r2,255
    c6a0:	103fd626 	beq	r2,zero,c5fc <__alt_mem_Flash_flash_data+0xf400c5fc>
    c6a4:	00bfffc4 	movi	r2,-1
    c6a8:	003fee06 	br	c664 <__alt_mem_Flash_flash_data+0xf400c664>
    c6ac:	90ffffc4 	addi	r3,r18,-1
    c6b0:	01003f84 	movi	r4,254
    c6b4:	20ffbf36 	bltu	r4,r3,c5b4 <__alt_mem_Flash_flash_data+0xf400c5b4>
    c6b8:	900b883a 	mov	r5,r18
    c6bc:	dc800005 	stb	r18,0(sp)
    c6c0:	1029883a 	mov	r20,r2
    c6c4:	003fc506 	br	c5dc <__alt_mem_Flash_flash_data+0xf400c5dc>
    c6c8:	9809883a 	mov	r4,r19
    c6cc:	a80b883a 	mov	r5,r21
    c6d0:	800d883a 	mov	r6,r16
    c6d4:	000c8a00 	call	c8a0 <__swbuf_r>
    c6d8:	10bfffe0 	cmpeqi	r2,r2,-1
    c6dc:	003fef06 	br	c69c <__alt_mem_Flash_flash_data+0xf400c69c>

0000c6e0 <fputwc>:
    c6e0:	008000b4 	movhi	r2,2
    c6e4:	defffc04 	addi	sp,sp,-16
    c6e8:	108b1004 	addi	r2,r2,11328
    c6ec:	dc000115 	stw	r16,4(sp)
    c6f0:	14000017 	ldw	r16,0(r2)
    c6f4:	dc400215 	stw	r17,8(sp)
    c6f8:	dfc00315 	stw	ra,12(sp)
    c6fc:	2023883a 	mov	r17,r4
    c700:	280d883a 	mov	r6,r5
    c704:	80000626 	beq	r16,zero,c720 <fputwc+0x40>
    c708:	80800e17 	ldw	r2,56(r16)
    c70c:	1000041e 	bne	r2,zero,c720 <fputwc+0x40>
    c710:	8009883a 	mov	r4,r16
    c714:	d9400015 	stw	r5,0(sp)
    c718:	00072dc0 	call	72dc <__sinit>
    c71c:	d9800017 	ldw	r6,0(sp)
    c720:	8009883a 	mov	r4,r16
    c724:	880b883a 	mov	r5,r17
    c728:	dfc00317 	ldw	ra,12(sp)
    c72c:	dc400217 	ldw	r17,8(sp)
    c730:	dc000117 	ldw	r16,4(sp)
    c734:	dec00404 	addi	sp,sp,16
    c738:	000c55c1 	jmpi	c55c <_fputwc_r>

0000c73c <_fstat_r>:
    c73c:	defffd04 	addi	sp,sp,-12
    c740:	dc000015 	stw	r16,0(sp)
    c744:	040000b4 	movhi	r16,2
    c748:	dc400115 	stw	r17,4(sp)
    c74c:	8412fd04 	addi	r16,r16,19444
    c750:	2023883a 	mov	r17,r4
    c754:	2809883a 	mov	r4,r5
    c758:	300b883a 	mov	r5,r6
    c75c:	dfc00215 	stw	ra,8(sp)
    c760:	80000015 	stw	zero,0(r16)
    c764:	000fff40 	call	fff4 <fstat>
    c768:	00ffffc4 	movi	r3,-1
    c76c:	10c00526 	beq	r2,r3,c784 <_fstat_r+0x48>
    c770:	dfc00217 	ldw	ra,8(sp)
    c774:	dc400117 	ldw	r17,4(sp)
    c778:	dc000017 	ldw	r16,0(sp)
    c77c:	dec00304 	addi	sp,sp,12
    c780:	f800283a 	ret
    c784:	80c00017 	ldw	r3,0(r16)
    c788:	183ff926 	beq	r3,zero,c770 <__alt_mem_Flash_flash_data+0xf400c770>
    c78c:	88c00015 	stw	r3,0(r17)
    c790:	003ff706 	br	c770 <__alt_mem_Flash_flash_data+0xf400c770>

0000c794 <_isatty_r>:
    c794:	defffd04 	addi	sp,sp,-12
    c798:	dc000015 	stw	r16,0(sp)
    c79c:	040000b4 	movhi	r16,2
    c7a0:	dc400115 	stw	r17,4(sp)
    c7a4:	8412fd04 	addi	r16,r16,19444
    c7a8:	2023883a 	mov	r17,r4
    c7ac:	2809883a 	mov	r4,r5
    c7b0:	dfc00215 	stw	ra,8(sp)
    c7b4:	80000015 	stw	zero,0(r16)
    c7b8:	00100f40 	call	100f4 <isatty>
    c7bc:	00ffffc4 	movi	r3,-1
    c7c0:	10c00526 	beq	r2,r3,c7d8 <_isatty_r+0x44>
    c7c4:	dfc00217 	ldw	ra,8(sp)
    c7c8:	dc400117 	ldw	r17,4(sp)
    c7cc:	dc000017 	ldw	r16,0(sp)
    c7d0:	dec00304 	addi	sp,sp,12
    c7d4:	f800283a 	ret
    c7d8:	80c00017 	ldw	r3,0(r16)
    c7dc:	183ff926 	beq	r3,zero,c7c4 <__alt_mem_Flash_flash_data+0xf400c7c4>
    c7e0:	88c00015 	stw	r3,0(r17)
    c7e4:	003ff706 	br	c7c4 <__alt_mem_Flash_flash_data+0xf400c7c4>

0000c7e8 <_lseek_r>:
    c7e8:	defffd04 	addi	sp,sp,-12
    c7ec:	dc000015 	stw	r16,0(sp)
    c7f0:	040000b4 	movhi	r16,2
    c7f4:	dc400115 	stw	r17,4(sp)
    c7f8:	8412fd04 	addi	r16,r16,19444
    c7fc:	2023883a 	mov	r17,r4
    c800:	2809883a 	mov	r4,r5
    c804:	300b883a 	mov	r5,r6
    c808:	380d883a 	mov	r6,r7
    c80c:	dfc00215 	stw	ra,8(sp)
    c810:	80000015 	stw	zero,0(r16)
    c814:	00102cc0 	call	102cc <lseek>
    c818:	00ffffc4 	movi	r3,-1
    c81c:	10c00526 	beq	r2,r3,c834 <_lseek_r+0x4c>
    c820:	dfc00217 	ldw	ra,8(sp)
    c824:	dc400117 	ldw	r17,4(sp)
    c828:	dc000017 	ldw	r16,0(sp)
    c82c:	dec00304 	addi	sp,sp,12
    c830:	f800283a 	ret
    c834:	80c00017 	ldw	r3,0(r16)
    c838:	183ff926 	beq	r3,zero,c820 <__alt_mem_Flash_flash_data+0xf400c820>
    c83c:	88c00015 	stw	r3,0(r17)
    c840:	003ff706 	br	c820 <__alt_mem_Flash_flash_data+0xf400c820>

0000c844 <_read_r>:
    c844:	defffd04 	addi	sp,sp,-12
    c848:	dc000015 	stw	r16,0(sp)
    c84c:	040000b4 	movhi	r16,2
    c850:	dc400115 	stw	r17,4(sp)
    c854:	8412fd04 	addi	r16,r16,19444
    c858:	2023883a 	mov	r17,r4
    c85c:	2809883a 	mov	r4,r5
    c860:	300b883a 	mov	r5,r6
    c864:	380d883a 	mov	r6,r7
    c868:	dfc00215 	stw	ra,8(sp)
    c86c:	80000015 	stw	zero,0(r16)
    c870:	00104c40 	call	104c4 <read>
    c874:	00ffffc4 	movi	r3,-1
    c878:	10c00526 	beq	r2,r3,c890 <_read_r+0x4c>
    c87c:	dfc00217 	ldw	ra,8(sp)
    c880:	dc400117 	ldw	r17,4(sp)
    c884:	dc000017 	ldw	r16,0(sp)
    c888:	dec00304 	addi	sp,sp,12
    c88c:	f800283a 	ret
    c890:	80c00017 	ldw	r3,0(r16)
    c894:	183ff926 	beq	r3,zero,c87c <__alt_mem_Flash_flash_data+0xf400c87c>
    c898:	88c00015 	stw	r3,0(r17)
    c89c:	003ff706 	br	c87c <__alt_mem_Flash_flash_data+0xf400c87c>

0000c8a0 <__swbuf_r>:
    c8a0:	defffc04 	addi	sp,sp,-16
    c8a4:	dc800215 	stw	r18,8(sp)
    c8a8:	dc400115 	stw	r17,4(sp)
    c8ac:	dc000015 	stw	r16,0(sp)
    c8b0:	dfc00315 	stw	ra,12(sp)
    c8b4:	2025883a 	mov	r18,r4
    c8b8:	2823883a 	mov	r17,r5
    c8bc:	3021883a 	mov	r16,r6
    c8c0:	20000226 	beq	r4,zero,c8cc <__swbuf_r+0x2c>
    c8c4:	20800e17 	ldw	r2,56(r4)
    c8c8:	10004126 	beq	r2,zero,c9d0 <__swbuf_r+0x130>
    c8cc:	80c00617 	ldw	r3,24(r16)
    c8d0:	8180030b 	ldhu	r6,12(r16)
    c8d4:	80c00215 	stw	r3,8(r16)
    c8d8:	30c0020c 	andi	r3,r6,8
    c8dc:	18003526 	beq	r3,zero,c9b4 <__swbuf_r+0x114>
    c8e0:	80c00417 	ldw	r3,16(r16)
    c8e4:	18003326 	beq	r3,zero,c9b4 <__swbuf_r+0x114>
    c8e8:	3088000c 	andi	r2,r6,8192
    c8ec:	8c403fcc 	andi	r17,r17,255
    c8f0:	10001726 	beq	r2,zero,c950 <__swbuf_r+0xb0>
    c8f4:	80800017 	ldw	r2,0(r16)
    c8f8:	81000517 	ldw	r4,20(r16)
    c8fc:	10c7c83a 	sub	r3,r2,r3
    c900:	19001d0e 	bge	r3,r4,c978 <__swbuf_r+0xd8>
    c904:	18c00044 	addi	r3,r3,1
    c908:	81400217 	ldw	r5,8(r16)
    c90c:	11000044 	addi	r4,r2,1
    c910:	81000015 	stw	r4,0(r16)
    c914:	297fffc4 	addi	r5,r5,-1
    c918:	81400215 	stw	r5,8(r16)
    c91c:	14400005 	stb	r17,0(r2)
    c920:	80800517 	ldw	r2,20(r16)
    c924:	10c01d26 	beq	r2,r3,c99c <__swbuf_r+0xfc>
    c928:	8080030b 	ldhu	r2,12(r16)
    c92c:	1080004c 	andi	r2,r2,1
    c930:	1000181e 	bne	r2,zero,c994 <__swbuf_r+0xf4>
    c934:	8805883a 	mov	r2,r17
    c938:	dfc00317 	ldw	ra,12(sp)
    c93c:	dc800217 	ldw	r18,8(sp)
    c940:	dc400117 	ldw	r17,4(sp)
    c944:	dc000017 	ldw	r16,0(sp)
    c948:	dec00404 	addi	sp,sp,16
    c94c:	f800283a 	ret
    c950:	81001917 	ldw	r4,100(r16)
    c954:	00b7ffc4 	movi	r2,-8193
    c958:	31880014 	ori	r6,r6,8192
    c95c:	2084703a 	and	r2,r4,r2
    c960:	80801915 	stw	r2,100(r16)
    c964:	80800017 	ldw	r2,0(r16)
    c968:	81000517 	ldw	r4,20(r16)
    c96c:	8180030d 	sth	r6,12(r16)
    c970:	10c7c83a 	sub	r3,r2,r3
    c974:	193fe316 	blt	r3,r4,c904 <__alt_mem_Flash_flash_data+0xf400c904>
    c978:	9009883a 	mov	r4,r18
    c97c:	800b883a 	mov	r5,r16
    c980:	0006f000 	call	6f00 <_fflush_r>
    c984:	1000091e 	bne	r2,zero,c9ac <__swbuf_r+0x10c>
    c988:	80800017 	ldw	r2,0(r16)
    c98c:	00c00044 	movi	r3,1
    c990:	003fdd06 	br	c908 <__alt_mem_Flash_flash_data+0xf400c908>
    c994:	00800284 	movi	r2,10
    c998:	88bfe61e 	bne	r17,r2,c934 <__alt_mem_Flash_flash_data+0xf400c934>
    c99c:	9009883a 	mov	r4,r18
    c9a0:	800b883a 	mov	r5,r16
    c9a4:	0006f000 	call	6f00 <_fflush_r>
    c9a8:	103fe226 	beq	r2,zero,c934 <__alt_mem_Flash_flash_data+0xf400c934>
    c9ac:	00bfffc4 	movi	r2,-1
    c9b0:	003fe106 	br	c938 <__alt_mem_Flash_flash_data+0xf400c938>
    c9b4:	9009883a 	mov	r4,r18
    c9b8:	800b883a 	mov	r5,r16
    c9bc:	000527c0 	call	527c <__swsetup_r>
    c9c0:	103ffa1e 	bne	r2,zero,c9ac <__alt_mem_Flash_flash_data+0xf400c9ac>
    c9c4:	8180030b 	ldhu	r6,12(r16)
    c9c8:	80c00417 	ldw	r3,16(r16)
    c9cc:	003fc606 	br	c8e8 <__alt_mem_Flash_flash_data+0xf400c8e8>
    c9d0:	00072dc0 	call	72dc <__sinit>
    c9d4:	003fbd06 	br	c8cc <__alt_mem_Flash_flash_data+0xf400c8cc>

0000c9d8 <__swbuf>:
    c9d8:	00c000b4 	movhi	r3,2
    c9dc:	18cb1004 	addi	r3,r3,11328
    c9e0:	2005883a 	mov	r2,r4
    c9e4:	19000017 	ldw	r4,0(r3)
    c9e8:	280d883a 	mov	r6,r5
    c9ec:	100b883a 	mov	r5,r2
    c9f0:	000c8a01 	jmpi	c8a0 <__swbuf_r>

0000c9f4 <_wcrtomb_r>:
    c9f4:	defff604 	addi	sp,sp,-40
    c9f8:	008000b4 	movhi	r2,2
    c9fc:	dc800815 	stw	r18,32(sp)
    ca00:	dc400715 	stw	r17,28(sp)
    ca04:	dc000615 	stw	r16,24(sp)
    ca08:	108b1204 	addi	r2,r2,11336
    ca0c:	dfc00915 	stw	ra,36(sp)
    ca10:	2021883a 	mov	r16,r4
    ca14:	3823883a 	mov	r17,r7
    ca18:	14800017 	ldw	r18,0(r2)
    ca1c:	28001426 	beq	r5,zero,ca70 <_wcrtomb_r+0x7c>
    ca20:	d9400415 	stw	r5,16(sp)
    ca24:	d9800515 	stw	r6,20(sp)
    ca28:	0007e040 	call	7e04 <__locale_charset>
    ca2c:	d9400417 	ldw	r5,16(sp)
    ca30:	d9800517 	ldw	r6,20(sp)
    ca34:	8009883a 	mov	r4,r16
    ca38:	dc400015 	stw	r17,0(sp)
    ca3c:	100f883a 	mov	r7,r2
    ca40:	903ee83a 	callr	r18
    ca44:	00ffffc4 	movi	r3,-1
    ca48:	10c0031e 	bne	r2,r3,ca58 <_wcrtomb_r+0x64>
    ca4c:	88000015 	stw	zero,0(r17)
    ca50:	00c02284 	movi	r3,138
    ca54:	80c00015 	stw	r3,0(r16)
    ca58:	dfc00917 	ldw	ra,36(sp)
    ca5c:	dc800817 	ldw	r18,32(sp)
    ca60:	dc400717 	ldw	r17,28(sp)
    ca64:	dc000617 	ldw	r16,24(sp)
    ca68:	dec00a04 	addi	sp,sp,40
    ca6c:	f800283a 	ret
    ca70:	0007e040 	call	7e04 <__locale_charset>
    ca74:	8009883a 	mov	r4,r16
    ca78:	dc400015 	stw	r17,0(sp)
    ca7c:	d9400104 	addi	r5,sp,4
    ca80:	000d883a 	mov	r6,zero
    ca84:	100f883a 	mov	r7,r2
    ca88:	903ee83a 	callr	r18
    ca8c:	003fed06 	br	ca44 <__alt_mem_Flash_flash_data+0xf400ca44>

0000ca90 <wcrtomb>:
    ca90:	defff604 	addi	sp,sp,-40
    ca94:	008000b4 	movhi	r2,2
    ca98:	dc800615 	stw	r18,24(sp)
    ca9c:	dc400515 	stw	r17,20(sp)
    caa0:	dc000415 	stw	r16,16(sp)
    caa4:	108b1004 	addi	r2,r2,11328
    caa8:	dfc00915 	stw	ra,36(sp)
    caac:	dd000815 	stw	r20,32(sp)
    cab0:	dcc00715 	stw	r19,28(sp)
    cab4:	2021883a 	mov	r16,r4
    cab8:	3025883a 	mov	r18,r6
    cabc:	14400017 	ldw	r17,0(r2)
    cac0:	20001826 	beq	r4,zero,cb24 <wcrtomb+0x94>
    cac4:	008000b4 	movhi	r2,2
    cac8:	108b1204 	addi	r2,r2,11336
    cacc:	15000017 	ldw	r20,0(r2)
    cad0:	2827883a 	mov	r19,r5
    cad4:	0007e040 	call	7e04 <__locale_charset>
    cad8:	8809883a 	mov	r4,r17
    cadc:	dc800015 	stw	r18,0(sp)
    cae0:	800b883a 	mov	r5,r16
    cae4:	980d883a 	mov	r6,r19
    cae8:	100f883a 	mov	r7,r2
    caec:	a03ee83a 	callr	r20
    caf0:	00ffffc4 	movi	r3,-1
    caf4:	10c0031e 	bne	r2,r3,cb04 <wcrtomb+0x74>
    caf8:	90000015 	stw	zero,0(r18)
    cafc:	00c02284 	movi	r3,138
    cb00:	88c00015 	stw	r3,0(r17)
    cb04:	dfc00917 	ldw	ra,36(sp)
    cb08:	dd000817 	ldw	r20,32(sp)
    cb0c:	dcc00717 	ldw	r19,28(sp)
    cb10:	dc800617 	ldw	r18,24(sp)
    cb14:	dc400517 	ldw	r17,20(sp)
    cb18:	dc000417 	ldw	r16,16(sp)
    cb1c:	dec00a04 	addi	sp,sp,40
    cb20:	f800283a 	ret
    cb24:	008000b4 	movhi	r2,2
    cb28:	108b1204 	addi	r2,r2,11336
    cb2c:	14000017 	ldw	r16,0(r2)
    cb30:	0007e040 	call	7e04 <__locale_charset>
    cb34:	8809883a 	mov	r4,r17
    cb38:	dc800015 	stw	r18,0(sp)
    cb3c:	d9400104 	addi	r5,sp,4
    cb40:	000d883a 	mov	r6,zero
    cb44:	100f883a 	mov	r7,r2
    cb48:	803ee83a 	callr	r16
    cb4c:	003fe806 	br	caf0 <__alt_mem_Flash_flash_data+0xf400caf0>

0000cb50 <__ascii_wctomb>:
    cb50:	28000526 	beq	r5,zero,cb68 <__ascii_wctomb+0x18>
    cb54:	00803fc4 	movi	r2,255
    cb58:	11800536 	bltu	r2,r6,cb70 <__ascii_wctomb+0x20>
    cb5c:	29800005 	stb	r6,0(r5)
    cb60:	00800044 	movi	r2,1
    cb64:	f800283a 	ret
    cb68:	0005883a 	mov	r2,zero
    cb6c:	f800283a 	ret
    cb70:	00802284 	movi	r2,138
    cb74:	20800015 	stw	r2,0(r4)
    cb78:	00bfffc4 	movi	r2,-1
    cb7c:	f800283a 	ret

0000cb80 <_wctomb_r>:
    cb80:	008000b4 	movhi	r2,2
    cb84:	defff904 	addi	sp,sp,-28
    cb88:	108b1204 	addi	r2,r2,11336
    cb8c:	dfc00615 	stw	ra,24(sp)
    cb90:	dc400515 	stw	r17,20(sp)
    cb94:	dc000415 	stw	r16,16(sp)
    cb98:	3823883a 	mov	r17,r7
    cb9c:	14000017 	ldw	r16,0(r2)
    cba0:	d9000115 	stw	r4,4(sp)
    cba4:	d9400215 	stw	r5,8(sp)
    cba8:	d9800315 	stw	r6,12(sp)
    cbac:	0007e040 	call	7e04 <__locale_charset>
    cbb0:	d9000117 	ldw	r4,4(sp)
    cbb4:	d9400217 	ldw	r5,8(sp)
    cbb8:	d9800317 	ldw	r6,12(sp)
    cbbc:	dc400015 	stw	r17,0(sp)
    cbc0:	100f883a 	mov	r7,r2
    cbc4:	803ee83a 	callr	r16
    cbc8:	dfc00617 	ldw	ra,24(sp)
    cbcc:	dc400517 	ldw	r17,20(sp)
    cbd0:	dc000417 	ldw	r16,16(sp)
    cbd4:	dec00704 	addi	sp,sp,28
    cbd8:	f800283a 	ret

0000cbdc <__udivdi3>:
    cbdc:	defff504 	addi	sp,sp,-44
    cbe0:	dcc00415 	stw	r19,16(sp)
    cbe4:	dc000115 	stw	r16,4(sp)
    cbe8:	dfc00a15 	stw	ra,40(sp)
    cbec:	df000915 	stw	fp,36(sp)
    cbf0:	ddc00815 	stw	r23,32(sp)
    cbf4:	dd800715 	stw	r22,28(sp)
    cbf8:	dd400615 	stw	r21,24(sp)
    cbfc:	dd000515 	stw	r20,20(sp)
    cc00:	dc800315 	stw	r18,12(sp)
    cc04:	dc400215 	stw	r17,8(sp)
    cc08:	2027883a 	mov	r19,r4
    cc0c:	2821883a 	mov	r16,r5
    cc10:	3800421e 	bne	r7,zero,cd1c <__udivdi3+0x140>
    cc14:	3025883a 	mov	r18,r6
    cc18:	2023883a 	mov	r17,r4
    cc1c:	2980542e 	bgeu	r5,r6,cd70 <__udivdi3+0x194>
    cc20:	00bfffd4 	movui	r2,65535
    cc24:	282d883a 	mov	r22,r5
    cc28:	1180a836 	bltu	r2,r6,cecc <__udivdi3+0x2f0>
    cc2c:	00803fc4 	movi	r2,255
    cc30:	1181422e 	bgeu	r2,r6,d13c <__udivdi3+0x560>
    cc34:	00800204 	movi	r2,8
    cc38:	1007883a 	mov	r3,r2
    cc3c:	3084d83a 	srl	r2,r6,r2
    cc40:	010000b4 	movhi	r4,2
    cc44:	21028304 	addi	r4,r4,2572
    cc48:	2085883a 	add	r2,r4,r2
    cc4c:	10800003 	ldbu	r2,0(r2)
    cc50:	10c7883a 	add	r3,r2,r3
    cc54:	00800804 	movi	r2,32
    cc58:	10c5c83a 	sub	r2,r2,r3
    cc5c:	10000526 	beq	r2,zero,cc74 <__udivdi3+0x98>
    cc60:	80a0983a 	sll	r16,r16,r2
    cc64:	98c6d83a 	srl	r3,r19,r3
    cc68:	30a4983a 	sll	r18,r6,r2
    cc6c:	98a2983a 	sll	r17,r19,r2
    cc70:	80ecb03a 	or	r22,r16,r3
    cc74:	902ad43a 	srli	r21,r18,16
    cc78:	b009883a 	mov	r4,r22
    cc7c:	953fffcc 	andi	r20,r18,65535
    cc80:	a80b883a 	mov	r5,r21
    cc84:	000d8500 	call	d850 <__umodsi3>
    cc88:	b009883a 	mov	r4,r22
    cc8c:	a80b883a 	mov	r5,r21
    cc90:	1027883a 	mov	r19,r2
    cc94:	000d8480 	call	d848 <__udivsi3>
    cc98:	1021883a 	mov	r16,r2
    cc9c:	8806d43a 	srli	r3,r17,16
    cca0:	9804943a 	slli	r2,r19,16
    cca4:	8527383a 	mul	r19,r16,r20
    cca8:	10c4b03a 	or	r2,r2,r3
    ccac:	14c0052e 	bgeu	r2,r19,ccc4 <__udivdi3+0xe8>
    ccb0:	1485883a 	add	r2,r2,r18
    ccb4:	80ffffc4 	addi	r3,r16,-1
    ccb8:	14800136 	bltu	r2,r18,ccc0 <__udivdi3+0xe4>
    ccbc:	14c13436 	bltu	r2,r19,d190 <__udivdi3+0x5b4>
    ccc0:	1821883a 	mov	r16,r3
    ccc4:	14e7c83a 	sub	r19,r2,r19
    ccc8:	9809883a 	mov	r4,r19
    cccc:	a80b883a 	mov	r5,r21
    ccd0:	000d8500 	call	d850 <__umodsi3>
    ccd4:	102d883a 	mov	r22,r2
    ccd8:	9809883a 	mov	r4,r19
    ccdc:	a80b883a 	mov	r5,r21
    cce0:	000d8480 	call	d848 <__udivsi3>
    cce4:	b02c943a 	slli	r22,r22,16
    cce8:	1529383a 	mul	r20,r2,r20
    ccec:	8c7fffcc 	andi	r17,r17,65535
    ccf0:	b462b03a 	or	r17,r22,r17
    ccf4:	8d00052e 	bgeu	r17,r20,cd0c <__udivdi3+0x130>
    ccf8:	8ca3883a 	add	r17,r17,r18
    ccfc:	10ffffc4 	addi	r3,r2,-1
    cd00:	8c80f636 	bltu	r17,r18,d0dc <__udivdi3+0x500>
    cd04:	8d00f52e 	bgeu	r17,r20,d0dc <__udivdi3+0x500>
    cd08:	10bfff84 	addi	r2,r2,-2
    cd0c:	8020943a 	slli	r16,r16,16
    cd10:	0007883a 	mov	r3,zero
    cd14:	1404b03a 	or	r2,r2,r16
    cd18:	00005b06 	br	ce88 <__udivdi3+0x2ac>
    cd1c:	29c05836 	bltu	r5,r7,ce80 <__udivdi3+0x2a4>
    cd20:	00bfffd4 	movui	r2,65535
    cd24:	11c0642e 	bgeu	r2,r7,ceb8 <__udivdi3+0x2dc>
    cd28:	00804034 	movhi	r2,256
    cd2c:	10bfffc4 	addi	r2,r2,-1
    cd30:	11c0f32e 	bgeu	r2,r7,d100 <__udivdi3+0x524>
    cd34:	00c00604 	movi	r3,24
    cd38:	180b883a 	mov	r5,r3
    cd3c:	38c6d83a 	srl	r3,r7,r3
    cd40:	008000b4 	movhi	r2,2
    cd44:	10828304 	addi	r2,r2,2572
    cd48:	10c7883a 	add	r3,r2,r3
    cd4c:	18c00003 	ldbu	r3,0(r3)
    cd50:	01000804 	movi	r4,32
    cd54:	1947883a 	add	r3,r3,r5
    cd58:	20e5c83a 	sub	r18,r4,r3
    cd5c:	9000661e 	bne	r18,zero,cef8 <__udivdi3+0x31c>
    cd60:	3c00f936 	bltu	r7,r16,d148 <__udivdi3+0x56c>
    cd64:	9985403a 	cmpgeu	r2,r19,r6
    cd68:	0007883a 	mov	r3,zero
    cd6c:	00004606 	br	ce88 <__udivdi3+0x2ac>
    cd70:	3000041e 	bne	r6,zero,cd84 <__udivdi3+0x1a8>
    cd74:	01000044 	movi	r4,1
    cd78:	000b883a 	mov	r5,zero
    cd7c:	000d8480 	call	d848 <__udivsi3>
    cd80:	1025883a 	mov	r18,r2
    cd84:	00bfffd4 	movui	r2,65535
    cd88:	1480562e 	bgeu	r2,r18,cee4 <__udivdi3+0x308>
    cd8c:	00804034 	movhi	r2,256
    cd90:	10bfffc4 	addi	r2,r2,-1
    cd94:	1480e32e 	bgeu	r2,r18,d124 <__udivdi3+0x548>
    cd98:	00800604 	movi	r2,24
    cd9c:	1007883a 	mov	r3,r2
    cda0:	9084d83a 	srl	r2,r18,r2
    cda4:	010000b4 	movhi	r4,2
    cda8:	21028304 	addi	r4,r4,2572
    cdac:	2085883a 	add	r2,r4,r2
    cdb0:	10800003 	ldbu	r2,0(r2)
    cdb4:	10c5883a 	add	r2,r2,r3
    cdb8:	00c00804 	movi	r3,32
    cdbc:	1887c83a 	sub	r3,r3,r2
    cdc0:	1800911e 	bne	r3,zero,d008 <__udivdi3+0x42c>
    cdc4:	9028d43a 	srli	r20,r18,16
    cdc8:	84a1c83a 	sub	r16,r16,r18
    cdcc:	957fffcc 	andi	r21,r18,65535
    cdd0:	00c00044 	movi	r3,1
    cdd4:	8009883a 	mov	r4,r16
    cdd8:	a00b883a 	mov	r5,r20
    cddc:	d8c00015 	stw	r3,0(sp)
    cde0:	000d8500 	call	d850 <__umodsi3>
    cde4:	8009883a 	mov	r4,r16
    cde8:	a00b883a 	mov	r5,r20
    cdec:	1027883a 	mov	r19,r2
    cdf0:	000d8480 	call	d848 <__udivsi3>
    cdf4:	1021883a 	mov	r16,r2
    cdf8:	880cd43a 	srli	r6,r17,16
    cdfc:	9804943a 	slli	r2,r19,16
    ce00:	8567383a 	mul	r19,r16,r21
    ce04:	d8c00017 	ldw	r3,0(sp)
    ce08:	1188b03a 	or	r4,r2,r6
    ce0c:	24c0052e 	bgeu	r4,r19,ce24 <__udivdi3+0x248>
    ce10:	2489883a 	add	r4,r4,r18
    ce14:	80bfffc4 	addi	r2,r16,-1
    ce18:	24800136 	bltu	r4,r18,ce20 <__udivdi3+0x244>
    ce1c:	24c0d936 	bltu	r4,r19,d184 <__udivdi3+0x5a8>
    ce20:	1021883a 	mov	r16,r2
    ce24:	24e7c83a 	sub	r19,r4,r19
    ce28:	9809883a 	mov	r4,r19
    ce2c:	a00b883a 	mov	r5,r20
    ce30:	d8c00015 	stw	r3,0(sp)
    ce34:	000d8500 	call	d850 <__umodsi3>
    ce38:	102d883a 	mov	r22,r2
    ce3c:	9809883a 	mov	r4,r19
    ce40:	a00b883a 	mov	r5,r20
    ce44:	000d8480 	call	d848 <__udivsi3>
    ce48:	b02c943a 	slli	r22,r22,16
    ce4c:	156b383a 	mul	r21,r2,r21
    ce50:	8c7fffcc 	andi	r17,r17,65535
    ce54:	b462b03a 	or	r17,r22,r17
    ce58:	d8c00017 	ldw	r3,0(sp)
    ce5c:	8d40052e 	bgeu	r17,r21,ce74 <__udivdi3+0x298>
    ce60:	8ca3883a 	add	r17,r17,r18
    ce64:	113fffc4 	addi	r4,r2,-1
    ce68:	8c809a36 	bltu	r17,r18,d0d4 <__udivdi3+0x4f8>
    ce6c:	8d40992e 	bgeu	r17,r21,d0d4 <__udivdi3+0x4f8>
    ce70:	10bfff84 	addi	r2,r2,-2
    ce74:	8020943a 	slli	r16,r16,16
    ce78:	1404b03a 	or	r2,r2,r16
    ce7c:	00000206 	br	ce88 <__udivdi3+0x2ac>
    ce80:	0007883a 	mov	r3,zero
    ce84:	0005883a 	mov	r2,zero
    ce88:	dfc00a17 	ldw	ra,40(sp)
    ce8c:	df000917 	ldw	fp,36(sp)
    ce90:	ddc00817 	ldw	r23,32(sp)
    ce94:	dd800717 	ldw	r22,28(sp)
    ce98:	dd400617 	ldw	r21,24(sp)
    ce9c:	dd000517 	ldw	r20,20(sp)
    cea0:	dcc00417 	ldw	r19,16(sp)
    cea4:	dc800317 	ldw	r18,12(sp)
    cea8:	dc400217 	ldw	r17,8(sp)
    ceac:	dc000117 	ldw	r16,4(sp)
    ceb0:	dec00b04 	addi	sp,sp,44
    ceb4:	f800283a 	ret
    ceb8:	00803fc4 	movi	r2,255
    cebc:	11c0932e 	bgeu	r2,r7,d10c <__udivdi3+0x530>
    cec0:	00c00204 	movi	r3,8
    cec4:	180b883a 	mov	r5,r3
    cec8:	003f9c06 	br	cd3c <__alt_mem_Flash_flash_data+0xf400cd3c>
    cecc:	00804034 	movhi	r2,256
    ced0:	10bfffc4 	addi	r2,r2,-1
    ced4:	1180902e 	bgeu	r2,r6,d118 <__udivdi3+0x53c>
    ced8:	00800604 	movi	r2,24
    cedc:	1007883a 	mov	r3,r2
    cee0:	003f5606 	br	cc3c <__alt_mem_Flash_flash_data+0xf400cc3c>
    cee4:	00803fc4 	movi	r2,255
    cee8:	1480912e 	bgeu	r2,r18,d130 <__udivdi3+0x554>
    ceec:	00800204 	movi	r2,8
    cef0:	1007883a 	mov	r3,r2
    cef4:	003faa06 	br	cda0 <__alt_mem_Flash_flash_data+0xf400cda0>
    cef8:	30eed83a 	srl	r23,r6,r3
    cefc:	3c8e983a 	sll	r7,r7,r18
    cf00:	80f8d83a 	srl	fp,r16,r3
    cf04:	98c6d83a 	srl	r3,r19,r3
    cf08:	3deeb03a 	or	r23,r7,r23
    cf0c:	b828d43a 	srli	r20,r23,16
    cf10:	84a0983a 	sll	r16,r16,r18
    cf14:	e009883a 	mov	r4,fp
    cf18:	a00b883a 	mov	r5,r20
    cf1c:	80e2b03a 	or	r17,r16,r3
    cf20:	34aa983a 	sll	r21,r6,r18
    cf24:	000d8500 	call	d850 <__umodsi3>
    cf28:	e009883a 	mov	r4,fp
    cf2c:	a00b883a 	mov	r5,r20
    cf30:	102d883a 	mov	r22,r2
    cf34:	000d8480 	call	d848 <__udivsi3>
    cf38:	1021883a 	mov	r16,r2
    cf3c:	bf3fffcc 	andi	fp,r23,65535
    cf40:	b004943a 	slli	r2,r22,16
    cf44:	8808d43a 	srli	r4,r17,16
    cf48:	872d383a 	mul	r22,r16,fp
    cf4c:	1104b03a 	or	r2,r2,r4
    cf50:	1580042e 	bgeu	r2,r22,cf64 <__udivdi3+0x388>
    cf54:	15c5883a 	add	r2,r2,r23
    cf58:	80ffffc4 	addi	r3,r16,-1
    cf5c:	15c0812e 	bgeu	r2,r23,d164 <__udivdi3+0x588>
    cf60:	1821883a 	mov	r16,r3
    cf64:	15adc83a 	sub	r22,r2,r22
    cf68:	b009883a 	mov	r4,r22
    cf6c:	a00b883a 	mov	r5,r20
    cf70:	000d8500 	call	d850 <__umodsi3>
    cf74:	a00b883a 	mov	r5,r20
    cf78:	b009883a 	mov	r4,r22
    cf7c:	d8800015 	stw	r2,0(sp)
    cf80:	000d8480 	call	d848 <__udivsi3>
    cf84:	d8c00017 	ldw	r3,0(sp)
    cf88:	170b383a 	mul	r5,r2,fp
    cf8c:	8c7fffcc 	andi	r17,r17,65535
    cf90:	1806943a 	slli	r3,r3,16
    cf94:	1c46b03a 	or	r3,r3,r17
    cf98:	1940042e 	bgeu	r3,r5,cfac <__udivdi3+0x3d0>
    cf9c:	1dc7883a 	add	r3,r3,r23
    cfa0:	113fffc4 	addi	r4,r2,-1
    cfa4:	1dc06b2e 	bgeu	r3,r23,d154 <__udivdi3+0x578>
    cfa8:	2005883a 	mov	r2,r4
    cfac:	8020943a 	slli	r16,r16,16
    cfb0:	a9ffffcc 	andi	r7,r21,65535
    cfb4:	a82ad43a 	srli	r21,r21,16
    cfb8:	1404b03a 	or	r2,r2,r16
    cfbc:	113fffcc 	andi	r4,r2,65535
    cfc0:	100cd43a 	srli	r6,r2,16
    cfc4:	21d3383a 	mul	r9,r4,r7
    cfc8:	2549383a 	mul	r4,r4,r21
    cfcc:	31cf383a 	mul	r7,r6,r7
    cfd0:	4810d43a 	srli	r8,r9,16
    cfd4:	1947c83a 	sub	r3,r3,r5
    cfd8:	3909883a 	add	r4,r7,r4
    cfdc:	2209883a 	add	r4,r4,r8
    cfe0:	354d383a 	mul	r6,r6,r21
    cfe4:	21c0022e 	bgeu	r4,r7,cff0 <__udivdi3+0x414>
    cfe8:	01400074 	movhi	r5,1
    cfec:	314d883a 	add	r6,r6,r5
    cff0:	202ad43a 	srli	r21,r4,16
    cff4:	354d883a 	add	r6,r6,r21
    cff8:	19803f36 	bltu	r3,r6,d0f8 <__udivdi3+0x51c>
    cffc:	19803926 	beq	r3,r6,d0e4 <__udivdi3+0x508>
    d000:	0007883a 	mov	r3,zero
    d004:	003fa006 	br	ce88 <__alt_mem_Flash_flash_data+0xf400ce88>
    d008:	90e4983a 	sll	r18,r18,r3
    d00c:	80aad83a 	srl	r21,r16,r2
    d010:	80e0983a 	sll	r16,r16,r3
    d014:	9028d43a 	srli	r20,r18,16
    d018:	9884d83a 	srl	r2,r19,r2
    d01c:	a809883a 	mov	r4,r21
    d020:	a00b883a 	mov	r5,r20
    d024:	80acb03a 	or	r22,r16,r2
    d028:	98e2983a 	sll	r17,r19,r3
    d02c:	000d8500 	call	d850 <__umodsi3>
    d030:	a809883a 	mov	r4,r21
    d034:	a00b883a 	mov	r5,r20
    d038:	1021883a 	mov	r16,r2
    d03c:	000d8480 	call	d848 <__udivsi3>
    d040:	957fffcc 	andi	r21,r18,65535
    d044:	8020943a 	slli	r16,r16,16
    d048:	b00ad43a 	srli	r5,r22,16
    d04c:	1567383a 	mul	r19,r2,r21
    d050:	102f883a 	mov	r23,r2
    d054:	8148b03a 	or	r4,r16,r5
    d058:	24c0062e 	bgeu	r4,r19,d074 <__udivdi3+0x498>
    d05c:	2489883a 	add	r4,r4,r18
    d060:	10bfffc4 	addi	r2,r2,-1
    d064:	24804536 	bltu	r4,r18,d17c <__udivdi3+0x5a0>
    d068:	24c0442e 	bgeu	r4,r19,d17c <__udivdi3+0x5a0>
    d06c:	bdffff84 	addi	r23,r23,-2
    d070:	2489883a 	add	r4,r4,r18
    d074:	24e7c83a 	sub	r19,r4,r19
    d078:	9809883a 	mov	r4,r19
    d07c:	a00b883a 	mov	r5,r20
    d080:	000d8500 	call	d850 <__umodsi3>
    d084:	1021883a 	mov	r16,r2
    d088:	9809883a 	mov	r4,r19
    d08c:	a00b883a 	mov	r5,r20
    d090:	000d8480 	call	d848 <__udivsi3>
    d094:	8020943a 	slli	r16,r16,16
    d098:	1007883a 	mov	r3,r2
    d09c:	1545383a 	mul	r2,r2,r21
    d0a0:	b13fffcc 	andi	r4,r22,65535
    d0a4:	8108b03a 	or	r4,r16,r4
    d0a8:	2080062e 	bgeu	r4,r2,d0c4 <__udivdi3+0x4e8>
    d0ac:	2489883a 	add	r4,r4,r18
    d0b0:	197fffc4 	addi	r5,r3,-1
    d0b4:	24802f36 	bltu	r4,r18,d174 <__udivdi3+0x598>
    d0b8:	20802e2e 	bgeu	r4,r2,d174 <__udivdi3+0x598>
    d0bc:	18ffff84 	addi	r3,r3,-2
    d0c0:	2489883a 	add	r4,r4,r18
    d0c4:	b82e943a 	slli	r23,r23,16
    d0c8:	20a1c83a 	sub	r16,r4,r2
    d0cc:	1dc6b03a 	or	r3,r3,r23
    d0d0:	003f4006 	br	cdd4 <__alt_mem_Flash_flash_data+0xf400cdd4>
    d0d4:	2005883a 	mov	r2,r4
    d0d8:	003f6606 	br	ce74 <__alt_mem_Flash_flash_data+0xf400ce74>
    d0dc:	1805883a 	mov	r2,r3
    d0e0:	003f0a06 	br	cd0c <__alt_mem_Flash_flash_data+0xf400cd0c>
    d0e4:	2006943a 	slli	r3,r4,16
    d0e8:	9c88983a 	sll	r4,r19,r18
    d0ec:	4a7fffcc 	andi	r9,r9,65535
    d0f0:	1a47883a 	add	r3,r3,r9
    d0f4:	20ffc22e 	bgeu	r4,r3,d000 <__alt_mem_Flash_flash_data+0xf400d000>
    d0f8:	10bfffc4 	addi	r2,r2,-1
    d0fc:	003fc006 	br	d000 <__alt_mem_Flash_flash_data+0xf400d000>
    d100:	00c00404 	movi	r3,16
    d104:	180b883a 	mov	r5,r3
    d108:	003f0c06 	br	cd3c <__alt_mem_Flash_flash_data+0xf400cd3c>
    d10c:	0007883a 	mov	r3,zero
    d110:	000b883a 	mov	r5,zero
    d114:	003f0906 	br	cd3c <__alt_mem_Flash_flash_data+0xf400cd3c>
    d118:	00800404 	movi	r2,16
    d11c:	1007883a 	mov	r3,r2
    d120:	003ec606 	br	cc3c <__alt_mem_Flash_flash_data+0xf400cc3c>
    d124:	00800404 	movi	r2,16
    d128:	1007883a 	mov	r3,r2
    d12c:	003f1c06 	br	cda0 <__alt_mem_Flash_flash_data+0xf400cda0>
    d130:	0005883a 	mov	r2,zero
    d134:	0007883a 	mov	r3,zero
    d138:	003f1906 	br	cda0 <__alt_mem_Flash_flash_data+0xf400cda0>
    d13c:	0005883a 	mov	r2,zero
    d140:	0007883a 	mov	r3,zero
    d144:	003ebd06 	br	cc3c <__alt_mem_Flash_flash_data+0xf400cc3c>
    d148:	0007883a 	mov	r3,zero
    d14c:	00800044 	movi	r2,1
    d150:	003f4d06 	br	ce88 <__alt_mem_Flash_flash_data+0xf400ce88>
    d154:	197f942e 	bgeu	r3,r5,cfa8 <__alt_mem_Flash_flash_data+0xf400cfa8>
    d158:	10bfff84 	addi	r2,r2,-2
    d15c:	1dc7883a 	add	r3,r3,r23
    d160:	003f9206 	br	cfac <__alt_mem_Flash_flash_data+0xf400cfac>
    d164:	15bf7e2e 	bgeu	r2,r22,cf60 <__alt_mem_Flash_flash_data+0xf400cf60>
    d168:	843fff84 	addi	r16,r16,-2
    d16c:	15c5883a 	add	r2,r2,r23
    d170:	003f7c06 	br	cf64 <__alt_mem_Flash_flash_data+0xf400cf64>
    d174:	2807883a 	mov	r3,r5
    d178:	003fd206 	br	d0c4 <__alt_mem_Flash_flash_data+0xf400d0c4>
    d17c:	102f883a 	mov	r23,r2
    d180:	003fbc06 	br	d074 <__alt_mem_Flash_flash_data+0xf400d074>
    d184:	843fff84 	addi	r16,r16,-2
    d188:	2489883a 	add	r4,r4,r18
    d18c:	003f2506 	br	ce24 <__alt_mem_Flash_flash_data+0xf400ce24>
    d190:	843fff84 	addi	r16,r16,-2
    d194:	1485883a 	add	r2,r2,r18
    d198:	003eca06 	br	ccc4 <__alt_mem_Flash_flash_data+0xf400ccc4>

0000d19c <__umoddi3>:
    d19c:	defff404 	addi	sp,sp,-48
    d1a0:	ddc00915 	stw	r23,36(sp)
    d1a4:	dc400315 	stw	r17,12(sp)
    d1a8:	dc000215 	stw	r16,8(sp)
    d1ac:	dfc00b15 	stw	ra,44(sp)
    d1b0:	df000a15 	stw	fp,40(sp)
    d1b4:	dd800815 	stw	r22,32(sp)
    d1b8:	dd400715 	stw	r21,28(sp)
    d1bc:	dd000615 	stw	r20,24(sp)
    d1c0:	dcc00515 	stw	r19,20(sp)
    d1c4:	dc800415 	stw	r18,16(sp)
    d1c8:	2021883a 	mov	r16,r4
    d1cc:	2823883a 	mov	r17,r5
    d1d0:	282f883a 	mov	r23,r5
    d1d4:	3800381e 	bne	r7,zero,d2b8 <__umoddi3+0x11c>
    d1d8:	3027883a 	mov	r19,r6
    d1dc:	2029883a 	mov	r20,r4
    d1e0:	29804e2e 	bgeu	r5,r6,d31c <__umoddi3+0x180>
    d1e4:	00bfffd4 	movui	r2,65535
    d1e8:	11809c36 	bltu	r2,r6,d45c <__umoddi3+0x2c0>
    d1ec:	00803fc4 	movi	r2,255
    d1f0:	11813b2e 	bgeu	r2,r6,d6e0 <__umoddi3+0x544>
    d1f4:	01400204 	movi	r5,8
    d1f8:	2805883a 	mov	r2,r5
    d1fc:	314ad83a 	srl	r5,r6,r5
    d200:	00c000b4 	movhi	r3,2
    d204:	18c28304 	addi	r3,r3,2572
    d208:	194b883a 	add	r5,r3,r5
    d20c:	29000003 	ldbu	r4,0(r5)
    d210:	2089883a 	add	r4,r4,r2
    d214:	00800804 	movi	r2,32
    d218:	1105c83a 	sub	r2,r2,r4
    d21c:	1000ec26 	beq	r2,zero,d5d0 <__umoddi3+0x434>
    d220:	88a2983a 	sll	r17,r17,r2
    d224:	8108d83a 	srl	r4,r16,r4
    d228:	30a6983a 	sll	r19,r6,r2
    d22c:	80a8983a 	sll	r20,r16,r2
    d230:	1025883a 	mov	r18,r2
    d234:	892eb03a 	or	r23,r17,r4
    d238:	982cd43a 	srli	r22,r19,16
    d23c:	b809883a 	mov	r4,r23
    d240:	9d7fffcc 	andi	r21,r19,65535
    d244:	b00b883a 	mov	r5,r22
    d248:	000d8500 	call	d850 <__umodsi3>
    d24c:	b809883a 	mov	r4,r23
    d250:	b00b883a 	mov	r5,r22
    d254:	1021883a 	mov	r16,r2
    d258:	000d8480 	call	d848 <__udivsi3>
    d25c:	8020943a 	slli	r16,r16,16
    d260:	a00cd43a 	srli	r6,r20,16
    d264:	1545383a 	mul	r2,r2,r21
    d268:	8188b03a 	or	r4,r16,r6
    d26c:	2080042e 	bgeu	r4,r2,d280 <__umoddi3+0xe4>
    d270:	24c9883a 	add	r4,r4,r19
    d274:	24c00236 	bltu	r4,r19,d280 <__umoddi3+0xe4>
    d278:	2080012e 	bgeu	r4,r2,d280 <__umoddi3+0xe4>
    d27c:	24c9883a 	add	r4,r4,r19
    d280:	20a3c83a 	sub	r17,r4,r2
    d284:	8809883a 	mov	r4,r17
    d288:	b00b883a 	mov	r5,r22
    d28c:	000d8500 	call	d850 <__umodsi3>
    d290:	8809883a 	mov	r4,r17
    d294:	b00b883a 	mov	r5,r22
    d298:	1021883a 	mov	r16,r2
    d29c:	000d8480 	call	d848 <__udivsi3>
    d2a0:	8006943a 	slli	r3,r16,16
    d2a4:	1545383a 	mul	r2,r2,r21
    d2a8:	a13fffcc 	andi	r4,r20,65535
    d2ac:	1906b03a 	or	r3,r3,r4
    d2b0:	1880532e 	bgeu	r3,r2,d400 <__umoddi3+0x264>
    d2b4:	00004e06 	br	d3f0 <__umoddi3+0x254>
    d2b8:	29c05536 	bltu	r5,r7,d410 <__umoddi3+0x274>
    d2bc:	00bfffd4 	movui	r2,65535
    d2c0:	11c0612e 	bgeu	r2,r7,d448 <__umoddi3+0x2ac>
    d2c4:	00804034 	movhi	r2,256
    d2c8:	10bfffc4 	addi	r2,r2,-1
    d2cc:	11c0f82e 	bgeu	r2,r7,d6b0 <__umoddi3+0x514>
    d2d0:	01400604 	movi	r5,24
    d2d4:	282b883a 	mov	r21,r5
    d2d8:	394ad83a 	srl	r5,r7,r5
    d2dc:	00c000b4 	movhi	r3,2
    d2e0:	18c28304 	addi	r3,r3,2572
    d2e4:	194b883a 	add	r5,r3,r5
    d2e8:	28800003 	ldbu	r2,0(r5)
    d2ec:	00c00804 	movi	r3,32
    d2f0:	156b883a 	add	r21,r2,r21
    d2f4:	1d69c83a 	sub	r20,r3,r21
    d2f8:	a000631e 	bne	r20,zero,d488 <__umoddi3+0x2ec>
    d2fc:	3c400136 	bltu	r7,r17,d304 <__umoddi3+0x168>
    d300:	81810436 	bltu	r16,r6,d714 <__umoddi3+0x578>
    d304:	8185c83a 	sub	r2,r16,r6
    d308:	89e3c83a 	sub	r17,r17,r7
    d30c:	8087803a 	cmpltu	r3,r16,r2
    d310:	88efc83a 	sub	r23,r17,r3
    d314:	b807883a 	mov	r3,r23
    d318:	00003f06 	br	d418 <__umoddi3+0x27c>
    d31c:	3000041e 	bne	r6,zero,d330 <__umoddi3+0x194>
    d320:	01000044 	movi	r4,1
    d324:	000b883a 	mov	r5,zero
    d328:	000d8480 	call	d848 <__udivsi3>
    d32c:	1027883a 	mov	r19,r2
    d330:	00bfffd4 	movui	r2,65535
    d334:	14c04f2e 	bgeu	r2,r19,d474 <__umoddi3+0x2d8>
    d338:	00804034 	movhi	r2,256
    d33c:	10bfffc4 	addi	r2,r2,-1
    d340:	14c0e42e 	bgeu	r2,r19,d6d4 <__umoddi3+0x538>
    d344:	00800604 	movi	r2,24
    d348:	1007883a 	mov	r3,r2
    d34c:	9884d83a 	srl	r2,r19,r2
    d350:	010000b4 	movhi	r4,2
    d354:	21028304 	addi	r4,r4,2572
    d358:	2085883a 	add	r2,r4,r2
    d35c:	11000003 	ldbu	r4,0(r2)
    d360:	00800804 	movi	r2,32
    d364:	20c7883a 	add	r3,r4,r3
    d368:	10c5c83a 	sub	r2,r2,r3
    d36c:	10009a1e 	bne	r2,zero,d5d8 <__umoddi3+0x43c>
    d370:	982cd43a 	srli	r22,r19,16
    d374:	8ce3c83a 	sub	r17,r17,r19
    d378:	9c3fffcc 	andi	r16,r19,65535
    d37c:	0025883a 	mov	r18,zero
    d380:	8809883a 	mov	r4,r17
    d384:	b00b883a 	mov	r5,r22
    d388:	000d8500 	call	d850 <__umodsi3>
    d38c:	8809883a 	mov	r4,r17
    d390:	b00b883a 	mov	r5,r22
    d394:	102b883a 	mov	r21,r2
    d398:	000d8480 	call	d848 <__udivsi3>
    d39c:	a806943a 	slli	r3,r21,16
    d3a0:	a008d43a 	srli	r4,r20,16
    d3a4:	1405383a 	mul	r2,r2,r16
    d3a8:	190cb03a 	or	r6,r3,r4
    d3ac:	3080032e 	bgeu	r6,r2,d3bc <__umoddi3+0x220>
    d3b0:	34cd883a 	add	r6,r6,r19
    d3b4:	34c00136 	bltu	r6,r19,d3bc <__umoddi3+0x220>
    d3b8:	3080d436 	bltu	r6,r2,d70c <__umoddi3+0x570>
    d3bc:	30abc83a 	sub	r21,r6,r2
    d3c0:	a809883a 	mov	r4,r21
    d3c4:	b00b883a 	mov	r5,r22
    d3c8:	000d8500 	call	d850 <__umodsi3>
    d3cc:	1023883a 	mov	r17,r2
    d3d0:	a809883a 	mov	r4,r21
    d3d4:	b00b883a 	mov	r5,r22
    d3d8:	000d8480 	call	d848 <__udivsi3>
    d3dc:	8822943a 	slli	r17,r17,16
    d3e0:	1405383a 	mul	r2,r2,r16
    d3e4:	a13fffcc 	andi	r4,r20,65535
    d3e8:	8906b03a 	or	r3,r17,r4
    d3ec:	1880042e 	bgeu	r3,r2,d400 <__umoddi3+0x264>
    d3f0:	1cc7883a 	add	r3,r3,r19
    d3f4:	1cc00236 	bltu	r3,r19,d400 <__umoddi3+0x264>
    d3f8:	1880012e 	bgeu	r3,r2,d400 <__umoddi3+0x264>
    d3fc:	1cc7883a 	add	r3,r3,r19
    d400:	1887c83a 	sub	r3,r3,r2
    d404:	1c84d83a 	srl	r2,r3,r18
    d408:	0007883a 	mov	r3,zero
    d40c:	00000206 	br	d418 <__umoddi3+0x27c>
    d410:	2005883a 	mov	r2,r4
    d414:	2807883a 	mov	r3,r5
    d418:	dfc00b17 	ldw	ra,44(sp)
    d41c:	df000a17 	ldw	fp,40(sp)
    d420:	ddc00917 	ldw	r23,36(sp)
    d424:	dd800817 	ldw	r22,32(sp)
    d428:	dd400717 	ldw	r21,28(sp)
    d42c:	dd000617 	ldw	r20,24(sp)
    d430:	dcc00517 	ldw	r19,20(sp)
    d434:	dc800417 	ldw	r18,16(sp)
    d438:	dc400317 	ldw	r17,12(sp)
    d43c:	dc000217 	ldw	r16,8(sp)
    d440:	dec00c04 	addi	sp,sp,48
    d444:	f800283a 	ret
    d448:	00803fc4 	movi	r2,255
    d44c:	11c0952e 	bgeu	r2,r7,d6a4 <__umoddi3+0x508>
    d450:	01400204 	movi	r5,8
    d454:	282b883a 	mov	r21,r5
    d458:	003f9f06 	br	d2d8 <__alt_mem_Flash_flash_data+0xf400d2d8>
    d45c:	00804034 	movhi	r2,256
    d460:	10bfffc4 	addi	r2,r2,-1
    d464:	1180952e 	bgeu	r2,r6,d6bc <__umoddi3+0x520>
    d468:	01400604 	movi	r5,24
    d46c:	2805883a 	mov	r2,r5
    d470:	003f6206 	br	d1fc <__alt_mem_Flash_flash_data+0xf400d1fc>
    d474:	00803fc4 	movi	r2,255
    d478:	14c0932e 	bgeu	r2,r19,d6c8 <__umoddi3+0x52c>
    d47c:	00800204 	movi	r2,8
    d480:	1007883a 	mov	r3,r2
    d484:	003fb106 	br	d34c <__alt_mem_Flash_flash_data+0xf400d34c>
    d488:	3548d83a 	srl	r4,r6,r21
    d48c:	3d0e983a 	sll	r7,r7,r20
    d490:	8d10983a 	sll	r8,r17,r20
    d494:	8d6cd83a 	srl	r22,r17,r21
    d498:	3922b03a 	or	r17,r7,r4
    d49c:	882ed43a 	srli	r23,r17,16
    d4a0:	8564d83a 	srl	r18,r16,r21
    d4a4:	b009883a 	mov	r4,r22
    d4a8:	b80b883a 	mov	r5,r23
    d4ac:	44a4b03a 	or	r18,r8,r18
    d4b0:	3526983a 	sll	r19,r6,r20
    d4b4:	000d8500 	call	d850 <__umodsi3>
    d4b8:	b009883a 	mov	r4,r22
    d4bc:	b80b883a 	mov	r5,r23
    d4c0:	1039883a 	mov	fp,r2
    d4c4:	000d8480 	call	d848 <__udivsi3>
    d4c8:	102d883a 	mov	r22,r2
    d4cc:	8a3fffcc 	andi	r8,r17,65535
    d4d0:	e004943a 	slli	r2,fp,16
    d4d4:	900cd43a 	srli	r6,r18,16
    d4d8:	b239383a 	mul	fp,r22,r8
    d4dc:	8520983a 	sll	r16,r16,r20
    d4e0:	118ab03a 	or	r5,r2,r6
    d4e4:	2f00042e 	bgeu	r5,fp,d4f8 <__umoddi3+0x35c>
    d4e8:	2c4b883a 	add	r5,r5,r17
    d4ec:	b0bfffc4 	addi	r2,r22,-1
    d4f0:	2c40822e 	bgeu	r5,r17,d6fc <__umoddi3+0x560>
    d4f4:	102d883a 	mov	r22,r2
    d4f8:	2f39c83a 	sub	fp,r5,fp
    d4fc:	e009883a 	mov	r4,fp
    d500:	b80b883a 	mov	r5,r23
    d504:	da000115 	stw	r8,4(sp)
    d508:	000d8500 	call	d850 <__umodsi3>
    d50c:	e009883a 	mov	r4,fp
    d510:	b80b883a 	mov	r5,r23
    d514:	d8800015 	stw	r2,0(sp)
    d518:	000d8480 	call	d848 <__udivsi3>
    d51c:	d9800017 	ldw	r6,0(sp)
    d520:	da000117 	ldw	r8,4(sp)
    d524:	94bfffcc 	andi	r18,r18,65535
    d528:	300c943a 	slli	r6,r6,16
    d52c:	1209383a 	mul	r4,r2,r8
    d530:	3490b03a 	or	r8,r6,r18
    d534:	4100042e 	bgeu	r8,r4,d548 <__umoddi3+0x3ac>
    d538:	4451883a 	add	r8,r8,r17
    d53c:	10ffffc4 	addi	r3,r2,-1
    d540:	44406a2e 	bgeu	r8,r17,d6ec <__umoddi3+0x550>
    d544:	1805883a 	mov	r2,r3
    d548:	b012943a 	slli	r9,r22,16
    d54c:	9abfffcc 	andi	r10,r19,65535
    d550:	980ed43a 	srli	r7,r19,16
    d554:	124ab03a 	or	r5,r2,r9
    d558:	2a7fffcc 	andi	r9,r5,65535
    d55c:	280ad43a 	srli	r5,r5,16
    d560:	4a8d383a 	mul	r6,r9,r10
    d564:	49d3383a 	mul	r9,r9,r7
    d568:	2a95383a 	mul	r10,r5,r10
    d56c:	3004d43a 	srli	r2,r6,16
    d570:	4111c83a 	sub	r8,r8,r4
    d574:	5253883a 	add	r9,r10,r9
    d578:	4893883a 	add	r9,r9,r2
    d57c:	29cb383a 	mul	r5,r5,r7
    d580:	4a80022e 	bgeu	r9,r10,d58c <__umoddi3+0x3f0>
    d584:	00800074 	movhi	r2,1
    d588:	288b883a 	add	r5,r5,r2
    d58c:	4808d43a 	srli	r4,r9,16
    d590:	4812943a 	slli	r9,r9,16
    d594:	31bfffcc 	andi	r6,r6,65535
    d598:	290b883a 	add	r5,r5,r4
    d59c:	498d883a 	add	r6,r9,r6
    d5a0:	41403a36 	bltu	r8,r5,d68c <__umoddi3+0x4f0>
    d5a4:	41405d26 	beq	r8,r5,d71c <__umoddi3+0x580>
    d5a8:	4149c83a 	sub	r4,r8,r5
    d5ac:	300f883a 	mov	r7,r6
    d5b0:	81cfc83a 	sub	r7,r16,r7
    d5b4:	81c7803a 	cmpltu	r3,r16,r7
    d5b8:	20c7c83a 	sub	r3,r4,r3
    d5bc:	1d44983a 	sll	r2,r3,r21
    d5c0:	3d0ed83a 	srl	r7,r7,r20
    d5c4:	1d06d83a 	srl	r3,r3,r20
    d5c8:	11c4b03a 	or	r2,r2,r7
    d5cc:	003f9206 	br	d418 <__alt_mem_Flash_flash_data+0xf400d418>
    d5d0:	0025883a 	mov	r18,zero
    d5d4:	003f1806 	br	d238 <__alt_mem_Flash_flash_data+0xf400d238>
    d5d8:	98a6983a 	sll	r19,r19,r2
    d5dc:	88e8d83a 	srl	r20,r17,r3
    d5e0:	80c6d83a 	srl	r3,r16,r3
    d5e4:	982cd43a 	srli	r22,r19,16
    d5e8:	88a2983a 	sll	r17,r17,r2
    d5ec:	a009883a 	mov	r4,r20
    d5f0:	b00b883a 	mov	r5,r22
    d5f4:	88eab03a 	or	r21,r17,r3
    d5f8:	1025883a 	mov	r18,r2
    d5fc:	000d8500 	call	d850 <__umodsi3>
    d600:	a009883a 	mov	r4,r20
    d604:	b00b883a 	mov	r5,r22
    d608:	1023883a 	mov	r17,r2
    d60c:	000d8480 	call	d848 <__udivsi3>
    d610:	9f3fffcc 	andi	fp,r19,65535
    d614:	8822943a 	slli	r17,r17,16
    d618:	a80ad43a 	srli	r5,r21,16
    d61c:	1705383a 	mul	r2,r2,fp
    d620:	84a8983a 	sll	r20,r16,r18
    d624:	8948b03a 	or	r4,r17,r5
    d628:	2080042e 	bgeu	r4,r2,d63c <__umoddi3+0x4a0>
    d62c:	24c9883a 	add	r4,r4,r19
    d630:	24c00236 	bltu	r4,r19,d63c <__umoddi3+0x4a0>
    d634:	2080012e 	bgeu	r4,r2,d63c <__umoddi3+0x4a0>
    d638:	24c9883a 	add	r4,r4,r19
    d63c:	20afc83a 	sub	r23,r4,r2
    d640:	b809883a 	mov	r4,r23
    d644:	b00b883a 	mov	r5,r22
    d648:	000d8500 	call	d850 <__umodsi3>
    d64c:	1023883a 	mov	r17,r2
    d650:	b809883a 	mov	r4,r23
    d654:	b00b883a 	mov	r5,r22
    d658:	000d8480 	call	d848 <__udivsi3>
    d65c:	8822943a 	slli	r17,r17,16
    d660:	1705383a 	mul	r2,r2,fp
    d664:	a93fffcc 	andi	r4,r21,65535
    d668:	8908b03a 	or	r4,r17,r4
    d66c:	2080042e 	bgeu	r4,r2,d680 <__umoddi3+0x4e4>
    d670:	24c9883a 	add	r4,r4,r19
    d674:	24c00236 	bltu	r4,r19,d680 <__umoddi3+0x4e4>
    d678:	2080012e 	bgeu	r4,r2,d680 <__umoddi3+0x4e4>
    d67c:	24c9883a 	add	r4,r4,r19
    d680:	20a3c83a 	sub	r17,r4,r2
    d684:	e021883a 	mov	r16,fp
    d688:	003f3d06 	br	d380 <__alt_mem_Flash_flash_data+0xf400d380>
    d68c:	34cfc83a 	sub	r7,r6,r19
    d690:	2c4bc83a 	sub	r5,r5,r17
    d694:	31cd803a 	cmpltu	r6,r6,r7
    d698:	298dc83a 	sub	r6,r5,r6
    d69c:	4189c83a 	sub	r4,r8,r6
    d6a0:	003fc306 	br	d5b0 <__alt_mem_Flash_flash_data+0xf400d5b0>
    d6a4:	000b883a 	mov	r5,zero
    d6a8:	002b883a 	mov	r21,zero
    d6ac:	003f0a06 	br	d2d8 <__alt_mem_Flash_flash_data+0xf400d2d8>
    d6b0:	01400404 	movi	r5,16
    d6b4:	282b883a 	mov	r21,r5
    d6b8:	003f0706 	br	d2d8 <__alt_mem_Flash_flash_data+0xf400d2d8>
    d6bc:	01400404 	movi	r5,16
    d6c0:	2805883a 	mov	r2,r5
    d6c4:	003ecd06 	br	d1fc <__alt_mem_Flash_flash_data+0xf400d1fc>
    d6c8:	0005883a 	mov	r2,zero
    d6cc:	0007883a 	mov	r3,zero
    d6d0:	003f1e06 	br	d34c <__alt_mem_Flash_flash_data+0xf400d34c>
    d6d4:	00800404 	movi	r2,16
    d6d8:	1007883a 	mov	r3,r2
    d6dc:	003f1b06 	br	d34c <__alt_mem_Flash_flash_data+0xf400d34c>
    d6e0:	000b883a 	mov	r5,zero
    d6e4:	0005883a 	mov	r2,zero
    d6e8:	003ec406 	br	d1fc <__alt_mem_Flash_flash_data+0xf400d1fc>
    d6ec:	413f952e 	bgeu	r8,r4,d544 <__alt_mem_Flash_flash_data+0xf400d544>
    d6f0:	10bfff84 	addi	r2,r2,-2
    d6f4:	4451883a 	add	r8,r8,r17
    d6f8:	003f9306 	br	d548 <__alt_mem_Flash_flash_data+0xf400d548>
    d6fc:	2f3f7d2e 	bgeu	r5,fp,d4f4 <__alt_mem_Flash_flash_data+0xf400d4f4>
    d700:	b5bfff84 	addi	r22,r22,-2
    d704:	2c4b883a 	add	r5,r5,r17
    d708:	003f7b06 	br	d4f8 <__alt_mem_Flash_flash_data+0xf400d4f8>
    d70c:	34cd883a 	add	r6,r6,r19
    d710:	003f2a06 	br	d3bc <__alt_mem_Flash_flash_data+0xf400d3bc>
    d714:	8005883a 	mov	r2,r16
    d718:	003efe06 	br	d314 <__alt_mem_Flash_flash_data+0xf400d314>
    d71c:	81bfdb36 	bltu	r16,r6,d68c <__alt_mem_Flash_flash_data+0xf400d68c>
    d720:	300f883a 	mov	r7,r6
    d724:	0009883a 	mov	r4,zero
    d728:	003fa106 	br	d5b0 <__alt_mem_Flash_flash_data+0xf400d5b0>

0000d72c <udivmodsi4>:
    d72c:	2900182e 	bgeu	r5,r4,d790 <udivmodsi4+0x64>
    d730:	28001716 	blt	r5,zero,d790 <udivmodsi4+0x64>
    d734:	00800804 	movi	r2,32
    d738:	00c00044 	movi	r3,1
    d73c:	00000206 	br	d748 <udivmodsi4+0x1c>
    d740:	10001126 	beq	r2,zero,d788 <udivmodsi4+0x5c>
    d744:	28000516 	blt	r5,zero,d75c <udivmodsi4+0x30>
    d748:	294b883a 	add	r5,r5,r5
    d74c:	10bfffc4 	addi	r2,r2,-1
    d750:	18c7883a 	add	r3,r3,r3
    d754:	293ffa36 	bltu	r5,r4,d740 <__alt_mem_Flash_flash_data+0xf400d740>
    d758:	18000b26 	beq	r3,zero,d788 <udivmodsi4+0x5c>
    d75c:	0005883a 	mov	r2,zero
    d760:	21400236 	bltu	r4,r5,d76c <udivmodsi4+0x40>
    d764:	2149c83a 	sub	r4,r4,r5
    d768:	10c4b03a 	or	r2,r2,r3
    d76c:	1806d07a 	srli	r3,r3,1
    d770:	280ad07a 	srli	r5,r5,1
    d774:	183ffa1e 	bne	r3,zero,d760 <__alt_mem_Flash_flash_data+0xf400d760>
    d778:	3000011e 	bne	r6,zero,d780 <udivmodsi4+0x54>
    d77c:	f800283a 	ret
    d780:	2005883a 	mov	r2,r4
    d784:	f800283a 	ret
    d788:	0005883a 	mov	r2,zero
    d78c:	003ffa06 	br	d778 <__alt_mem_Flash_flash_data+0xf400d778>
    d790:	00c00044 	movi	r3,1
    d794:	003ff106 	br	d75c <__alt_mem_Flash_flash_data+0xf400d75c>

0000d798 <__divsi3>:
    d798:	defffe04 	addi	sp,sp,-8
    d79c:	dfc00115 	stw	ra,4(sp)
    d7a0:	dc000015 	stw	r16,0(sp)
    d7a4:	20000b16 	blt	r4,zero,d7d4 <__divsi3+0x3c>
    d7a8:	0021883a 	mov	r16,zero
    d7ac:	28000c16 	blt	r5,zero,d7e0 <__divsi3+0x48>
    d7b0:	000d883a 	mov	r6,zero
    d7b4:	000d72c0 	call	d72c <udivmodsi4>
    d7b8:	0407c83a 	sub	r3,zero,r16
    d7bc:	1884f03a 	xor	r2,r3,r2
    d7c0:	1405883a 	add	r2,r2,r16
    d7c4:	dfc00117 	ldw	ra,4(sp)
    d7c8:	dc000017 	ldw	r16,0(sp)
    d7cc:	dec00204 	addi	sp,sp,8
    d7d0:	f800283a 	ret
    d7d4:	0109c83a 	sub	r4,zero,r4
    d7d8:	04000044 	movi	r16,1
    d7dc:	283ff40e 	bge	r5,zero,d7b0 <__alt_mem_Flash_flash_data+0xf400d7b0>
    d7e0:	014bc83a 	sub	r5,zero,r5
    d7e4:	8400005c 	xori	r16,r16,1
    d7e8:	003ff106 	br	d7b0 <__alt_mem_Flash_flash_data+0xf400d7b0>

0000d7ec <__modsi3>:
    d7ec:	defffd04 	addi	sp,sp,-12
    d7f0:	dfc00215 	stw	ra,8(sp)
    d7f4:	dc400115 	stw	r17,4(sp)
    d7f8:	dc000015 	stw	r16,0(sp)
    d7fc:	20000c16 	blt	r4,zero,d830 <__modsi3+0x44>
    d800:	0023883a 	mov	r17,zero
    d804:	0021883a 	mov	r16,zero
    d808:	28000d16 	blt	r5,zero,d840 <__modsi3+0x54>
    d80c:	01800044 	movi	r6,1
    d810:	000d72c0 	call	d72c <udivmodsi4>
    d814:	1404f03a 	xor	r2,r2,r16
    d818:	8885883a 	add	r2,r17,r2
    d81c:	dfc00217 	ldw	ra,8(sp)
    d820:	dc400117 	ldw	r17,4(sp)
    d824:	dc000017 	ldw	r16,0(sp)
    d828:	dec00304 	addi	sp,sp,12
    d82c:	f800283a 	ret
    d830:	0109c83a 	sub	r4,zero,r4
    d834:	04400044 	movi	r17,1
    d838:	043fffc4 	movi	r16,-1
    d83c:	283ff30e 	bge	r5,zero,d80c <__alt_mem_Flash_flash_data+0xf400d80c>
    d840:	014bc83a 	sub	r5,zero,r5
    d844:	003ff106 	br	d80c <__alt_mem_Flash_flash_data+0xf400d80c>

0000d848 <__udivsi3>:
    d848:	000d883a 	mov	r6,zero
    d84c:	000d72c1 	jmpi	d72c <udivmodsi4>

0000d850 <__umodsi3>:
    d850:	01800044 	movi	r6,1
    d854:	000d72c1 	jmpi	d72c <udivmodsi4>

0000d858 <__adddf3>:
    d858:	02000434 	movhi	r8,16
    d85c:	423fffc4 	addi	r8,r8,-1
    d860:	defffb04 	addi	sp,sp,-20
    d864:	2a12703a 	and	r9,r5,r8
    d868:	2806d7fa 	srli	r3,r5,31
    d86c:	3a10703a 	and	r8,r7,r8
    d870:	3804d53a 	srli	r2,r7,20
    d874:	3014d77a 	srli	r10,r6,29
    d878:	dc000015 	stw	r16,0(sp)
    d87c:	481290fa 	slli	r9,r9,3
    d880:	2820d53a 	srli	r16,r5,20
    d884:	401090fa 	slli	r8,r8,3
    d888:	200ad77a 	srli	r5,r4,29
    d88c:	380ed7fa 	srli	r7,r7,31
    d890:	dc800215 	stw	r18,8(sp)
    d894:	dc400115 	stw	r17,4(sp)
    d898:	dfc00415 	stw	ra,16(sp)
    d89c:	dcc00315 	stw	r19,12(sp)
    d8a0:	1c803fcc 	andi	r18,r3,255
    d8a4:	8401ffcc 	andi	r16,r16,2047
    d8a8:	494ab03a 	or	r5,r9,r5
    d8ac:	202290fa 	slli	r17,r4,3
    d8b0:	1081ffcc 	andi	r2,r2,2047
    d8b4:	4290b03a 	or	r8,r8,r10
    d8b8:	300c90fa 	slli	r6,r6,3
    d8bc:	91c07026 	beq	r18,r7,da80 <__adddf3+0x228>
    d8c0:	8087c83a 	sub	r3,r16,r2
    d8c4:	00c0b30e 	bge	zero,r3,db94 <__adddf3+0x33c>
    d8c8:	10002a1e 	bne	r2,zero,d974 <__adddf3+0x11c>
    d8cc:	4184b03a 	or	r2,r8,r6
    d8d0:	1000991e 	bne	r2,zero,db38 <__adddf3+0x2e0>
    d8d4:	888001cc 	andi	r2,r17,7
    d8d8:	10005b26 	beq	r2,zero,da48 <__adddf3+0x1f0>
    d8dc:	88c003cc 	andi	r3,r17,15
    d8e0:	00800104 	movi	r2,4
    d8e4:	18805826 	beq	r3,r2,da48 <__adddf3+0x1f0>
    d8e8:	89800104 	addi	r6,r17,4
    d8ec:	3463803a 	cmpltu	r17,r6,r17
    d8f0:	2c4b883a 	add	r5,r5,r17
    d8f4:	2880202c 	andhi	r2,r5,128
    d8f8:	9007883a 	mov	r3,r18
    d8fc:	3023883a 	mov	r17,r6
    d900:	10005426 	beq	r2,zero,da54 <__adddf3+0x1fc>
    d904:	84000044 	addi	r16,r16,1
    d908:	0081ffc4 	movi	r2,2047
    d90c:	8080c126 	beq	r16,r2,dc14 <__adddf3+0x3bc>
    d910:	013fe034 	movhi	r4,65408
    d914:	213fffc4 	addi	r4,r4,-1
    d918:	290a703a 	and	r5,r5,r4
    d91c:	2804977a 	slli	r2,r5,29
    d920:	280a927a 	slli	r5,r5,9
    d924:	8822d0fa 	srli	r17,r17,3
    d928:	8401ffcc 	andi	r16,r16,2047
    d92c:	2808d33a 	srli	r4,r5,12
    d930:	1444b03a 	or	r2,r2,r17
    d934:	8401ffcc 	andi	r16,r16,2047
    d938:	800a953a 	slli	r5,r16,20
    d93c:	18c03fcc 	andi	r3,r3,255
    d940:	04000434 	movhi	r16,16
    d944:	180697fa 	slli	r3,r3,31
    d948:	843fffc4 	addi	r16,r16,-1
    d94c:	2420703a 	and	r16,r4,r16
    d950:	8160b03a 	or	r16,r16,r5
    d954:	80c6b03a 	or	r3,r16,r3
    d958:	dfc00417 	ldw	ra,16(sp)
    d95c:	dcc00317 	ldw	r19,12(sp)
    d960:	dc800217 	ldw	r18,8(sp)
    d964:	dc400117 	ldw	r17,4(sp)
    d968:	dc000017 	ldw	r16,0(sp)
    d96c:	dec00504 	addi	sp,sp,20
    d970:	f800283a 	ret
    d974:	0081ffc4 	movi	r2,2047
    d978:	80bfd626 	beq	r16,r2,d8d4 <__alt_mem_Flash_flash_data+0xf400d8d4>
    d97c:	42002034 	orhi	r8,r8,128
    d980:	00800e04 	movi	r2,56
    d984:	10c0a616 	blt	r2,r3,dc20 <__adddf3+0x3c8>
    d988:	008007c4 	movi	r2,31
    d98c:	10c0c916 	blt	r2,r3,dcb4 <__adddf3+0x45c>
    d990:	00800804 	movi	r2,32
    d994:	10c5c83a 	sub	r2,r2,r3
    d998:	408e983a 	sll	r7,r8,r2
    d99c:	30c8d83a 	srl	r4,r6,r3
    d9a0:	3084983a 	sll	r2,r6,r2
    d9a4:	40c6d83a 	srl	r3,r8,r3
    d9a8:	390cb03a 	or	r6,r7,r4
    d9ac:	1004c03a 	cmpne	r2,r2,zero
    d9b0:	308cb03a 	or	r6,r6,r2
    d9b4:	898dc83a 	sub	r6,r17,r6
    d9b8:	89a3803a 	cmpltu	r17,r17,r6
    d9bc:	28cbc83a 	sub	r5,r5,r3
    d9c0:	2c4bc83a 	sub	r5,r5,r17
    d9c4:	3023883a 	mov	r17,r6
    d9c8:	2880202c 	andhi	r2,r5,128
    d9cc:	10006d26 	beq	r2,zero,db84 <__adddf3+0x32c>
    d9d0:	04c02034 	movhi	r19,128
    d9d4:	9cffffc4 	addi	r19,r19,-1
    d9d8:	2ce6703a 	and	r19,r5,r19
    d9dc:	98007e26 	beq	r19,zero,dbd8 <__adddf3+0x380>
    d9e0:	9809883a 	mov	r4,r19
    d9e4:	000fdf40 	call	fdf4 <__clzsi2>
    d9e8:	10fffe04 	addi	r3,r2,-8
    d9ec:	010007c4 	movi	r4,31
    d9f0:	20c07f16 	blt	r4,r3,dbf0 <__adddf3+0x398>
    d9f4:	01400a04 	movi	r5,40
    d9f8:	2885c83a 	sub	r2,r5,r2
    d9fc:	888ad83a 	srl	r5,r17,r2
    da00:	98e6983a 	sll	r19,r19,r3
    da04:	88e2983a 	sll	r17,r17,r3
    da08:	2ce6b03a 	or	r19,r5,r19
    da0c:	1c007c16 	blt	r3,r16,dc00 <__adddf3+0x3a8>
    da10:	1c21c83a 	sub	r16,r3,r16
    da14:	81400044 	addi	r5,r16,1
    da18:	00c007c4 	movi	r3,31
    da1c:	19409816 	blt	r3,r5,dc80 <__adddf3+0x428>
    da20:	1c21c83a 	sub	r16,r3,r16
    da24:	8c08983a 	sll	r4,r17,r16
    da28:	8946d83a 	srl	r3,r17,r5
    da2c:	9c20983a 	sll	r16,r19,r16
    da30:	2008c03a 	cmpne	r4,r4,zero
    da34:	994ad83a 	srl	r5,r19,r5
    da38:	1c06b03a 	or	r3,r3,r16
    da3c:	1922b03a 	or	r17,r3,r4
    da40:	0021883a 	mov	r16,zero
    da44:	003fa306 	br	d8d4 <__alt_mem_Flash_flash_data+0xf400d8d4>
    da48:	2880202c 	andhi	r2,r5,128
    da4c:	9007883a 	mov	r3,r18
    da50:	103fac1e 	bne	r2,zero,d904 <__alt_mem_Flash_flash_data+0xf400d904>
    da54:	2804977a 	slli	r2,r5,29
    da58:	8822d0fa 	srli	r17,r17,3
    da5c:	0101ffc4 	movi	r4,2047
    da60:	280ad0fa 	srli	r5,r5,3
    da64:	1444b03a 	or	r2,r2,r17
    da68:	81002c26 	beq	r16,r4,db1c <__adddf3+0x2c4>
    da6c:	8120703a 	and	r16,r16,r4
    da70:	01000434 	movhi	r4,16
    da74:	213fffc4 	addi	r4,r4,-1
    da78:	2908703a 	and	r4,r5,r4
    da7c:	003fad06 	br	d934 <__alt_mem_Flash_flash_data+0xf400d934>
    da80:	8089c83a 	sub	r4,r16,r2
    da84:	01006a0e 	bge	zero,r4,dc30 <__adddf3+0x3d8>
    da88:	10003326 	beq	r2,zero,db58 <__adddf3+0x300>
    da8c:	0081ffc4 	movi	r2,2047
    da90:	80bf9026 	beq	r16,r2,d8d4 <__alt_mem_Flash_flash_data+0xf400d8d4>
    da94:	42002034 	orhi	r8,r8,128
    da98:	00800e04 	movi	r2,56
    da9c:	1100b116 	blt	r2,r4,dd64 <__adddf3+0x50c>
    daa0:	008007c4 	movi	r2,31
    daa4:	1100e216 	blt	r2,r4,de30 <__adddf3+0x5d8>
    daa8:	00800804 	movi	r2,32
    daac:	1105c83a 	sub	r2,r2,r4
    dab0:	4092983a 	sll	r9,r8,r2
    dab4:	310ed83a 	srl	r7,r6,r4
    dab8:	3084983a 	sll	r2,r6,r2
    dabc:	4110d83a 	srl	r8,r8,r4
    dac0:	49ccb03a 	or	r6,r9,r7
    dac4:	1004c03a 	cmpne	r2,r2,zero
    dac8:	308cb03a 	or	r6,r6,r2
    dacc:	344d883a 	add	r6,r6,r17
    dad0:	3463803a 	cmpltu	r17,r6,r17
    dad4:	414b883a 	add	r5,r8,r5
    dad8:	2c4b883a 	add	r5,r5,r17
    dadc:	3023883a 	mov	r17,r6
    dae0:	2880202c 	andhi	r2,r5,128
    dae4:	10002726 	beq	r2,zero,db84 <__adddf3+0x32c>
    dae8:	84000044 	addi	r16,r16,1
    daec:	0081ffc4 	movi	r2,2047
    daf0:	8080ae26 	beq	r16,r2,ddac <__adddf3+0x554>
    daf4:	00bfe034 	movhi	r2,65408
    daf8:	10bfffc4 	addi	r2,r2,-1
    dafc:	288a703a 	and	r5,r5,r2
    db00:	880cd07a 	srli	r6,r17,1
    db04:	280897fa 	slli	r4,r5,31
    db08:	88c0004c 	andi	r3,r17,1
    db0c:	30e2b03a 	or	r17,r6,r3
    db10:	280ad07a 	srli	r5,r5,1
    db14:	8922b03a 	or	r17,r17,r4
    db18:	003f6e06 	br	d8d4 <__alt_mem_Flash_flash_data+0xf400d8d4>
    db1c:	1148b03a 	or	r4,r2,r5
    db20:	20003c26 	beq	r4,zero,dc14 <__adddf3+0x3bc>
    db24:	29000234 	orhi	r4,r5,8
    db28:	01400434 	movhi	r5,16
    db2c:	297fffc4 	addi	r5,r5,-1
    db30:	2148703a 	and	r4,r4,r5
    db34:	003f7f06 	br	d934 <__alt_mem_Flash_flash_data+0xf400d934>
    db38:	18ffffc4 	addi	r3,r3,-1
    db3c:	18004d1e 	bne	r3,zero,dc74 <__adddf3+0x41c>
    db40:	898dc83a 	sub	r6,r17,r6
    db44:	89a3803a 	cmpltu	r17,r17,r6
    db48:	2a0bc83a 	sub	r5,r5,r8
    db4c:	2c4bc83a 	sub	r5,r5,r17
    db50:	3023883a 	mov	r17,r6
    db54:	003f9c06 	br	d9c8 <__alt_mem_Flash_flash_data+0xf400d9c8>
    db58:	4184b03a 	or	r2,r8,r6
    db5c:	103f5d26 	beq	r2,zero,d8d4 <__alt_mem_Flash_flash_data+0xf400d8d4>
    db60:	213fffc4 	addi	r4,r4,-1
    db64:	203fd926 	beq	r4,zero,dacc <__alt_mem_Flash_flash_data+0xf400dacc>
    db68:	0081ffc4 	movi	r2,2047
    db6c:	80bfca1e 	bne	r16,r2,da98 <__alt_mem_Flash_flash_data+0xf400da98>
    db70:	003f5806 	br	d8d4 <__alt_mem_Flash_flash_data+0xf400d8d4>
    db74:	10c8b03a 	or	r4,r2,r3
    db78:	20008b26 	beq	r4,zero,dda8 <__adddf3+0x550>
    db7c:	100b883a 	mov	r5,r2
    db80:	1823883a 	mov	r17,r3
    db84:	888001cc 	andi	r2,r17,7
    db88:	103f541e 	bne	r2,zero,d8dc <__alt_mem_Flash_flash_data+0xf400d8dc>
    db8c:	9007883a 	mov	r3,r18
    db90:	003fb006 	br	da54 <__alt_mem_Flash_flash_data+0xf400da54>
    db94:	1800531e 	bne	r3,zero,dce4 <__adddf3+0x48c>
    db98:	80800044 	addi	r2,r16,1
    db9c:	1081ffcc 	andi	r2,r2,2047
    dba0:	00c00044 	movi	r3,1
    dba4:	1880990e 	bge	r3,r2,de0c <__adddf3+0x5b4>
    dba8:	8985c83a 	sub	r2,r17,r6
    dbac:	8887803a 	cmpltu	r3,r17,r2
    dbb0:	2a27c83a 	sub	r19,r5,r8
    dbb4:	98e7c83a 	sub	r19,r19,r3
    dbb8:	98c0202c 	andhi	r3,r19,128
    dbbc:	18006226 	beq	r3,zero,dd48 <__adddf3+0x4f0>
    dbc0:	3463c83a 	sub	r17,r6,r17
    dbc4:	4151c83a 	sub	r8,r8,r5
    dbc8:	344d803a 	cmpltu	r6,r6,r17
    dbcc:	41a7c83a 	sub	r19,r8,r6
    dbd0:	3825883a 	mov	r18,r7
    dbd4:	983f821e 	bne	r19,zero,d9e0 <__alt_mem_Flash_flash_data+0xf400d9e0>
    dbd8:	8809883a 	mov	r4,r17
    dbdc:	000fdf40 	call	fdf4 <__clzsi2>
    dbe0:	10800804 	addi	r2,r2,32
    dbe4:	10fffe04 	addi	r3,r2,-8
    dbe8:	010007c4 	movi	r4,31
    dbec:	20ff810e 	bge	r4,r3,d9f4 <__alt_mem_Flash_flash_data+0xf400d9f4>
    dbf0:	14fff604 	addi	r19,r2,-40
    dbf4:	8ce6983a 	sll	r19,r17,r19
    dbf8:	0023883a 	mov	r17,zero
    dbfc:	1c3f840e 	bge	r3,r16,da10 <__alt_mem_Flash_flash_data+0xf400da10>
    dc00:	017fe034 	movhi	r5,65408
    dc04:	297fffc4 	addi	r5,r5,-1
    dc08:	80e1c83a 	sub	r16,r16,r3
    dc0c:	994a703a 	and	r5,r19,r5
    dc10:	003f3006 	br	d8d4 <__alt_mem_Flash_flash_data+0xf400d8d4>
    dc14:	0009883a 	mov	r4,zero
    dc18:	0005883a 	mov	r2,zero
    dc1c:	003f4506 	br	d934 <__alt_mem_Flash_flash_data+0xf400d934>
    dc20:	418cb03a 	or	r6,r8,r6
    dc24:	300cc03a 	cmpne	r6,r6,zero
    dc28:	0007883a 	mov	r3,zero
    dc2c:	003f6106 	br	d9b4 <__alt_mem_Flash_flash_data+0xf400d9b4>
    dc30:	2000921e 	bne	r4,zero,de7c <__adddf3+0x624>
    dc34:	80800044 	addi	r2,r16,1
    dc38:	11c1ffcc 	andi	r7,r2,2047
    dc3c:	01000044 	movi	r4,1
    dc40:	21c0610e 	bge	r4,r7,ddc8 <__adddf3+0x570>
    dc44:	0101ffc4 	movi	r4,2047
    dc48:	1100a326 	beq	r2,r4,ded8 <__adddf3+0x680>
    dc4c:	344d883a 	add	r6,r6,r17
    dc50:	3463803a 	cmpltu	r17,r6,r17
    dc54:	414b883a 	add	r5,r8,r5
    dc58:	2c4b883a 	add	r5,r5,r17
    dc5c:	282297fa 	slli	r17,r5,31
    dc60:	300cd07a 	srli	r6,r6,1
    dc64:	280ad07a 	srli	r5,r5,1
    dc68:	1021883a 	mov	r16,r2
    dc6c:	89a2b03a 	or	r17,r17,r6
    dc70:	003f1806 	br	d8d4 <__alt_mem_Flash_flash_data+0xf400d8d4>
    dc74:	0081ffc4 	movi	r2,2047
    dc78:	80bf411e 	bne	r16,r2,d980 <__alt_mem_Flash_flash_data+0xf400d980>
    dc7c:	003f1506 	br	d8d4 <__alt_mem_Flash_flash_data+0xf400d8d4>
    dc80:	80bff844 	addi	r2,r16,-31
    dc84:	00c00804 	movi	r3,32
    dc88:	9884d83a 	srl	r2,r19,r2
    dc8c:	28c04a26 	beq	r5,r3,ddb8 <__adddf3+0x560>
    dc90:	00c00fc4 	movi	r3,63
    dc94:	1c21c83a 	sub	r16,r3,r16
    dc98:	9c26983a 	sll	r19,r19,r16
    dc9c:	9c62b03a 	or	r17,r19,r17
    dca0:	8822c03a 	cmpne	r17,r17,zero
    dca4:	88a2b03a 	or	r17,r17,r2
    dca8:	000b883a 	mov	r5,zero
    dcac:	0021883a 	mov	r16,zero
    dcb0:	003fb406 	br	db84 <__alt_mem_Flash_flash_data+0xf400db84>
    dcb4:	18bff804 	addi	r2,r3,-32
    dcb8:	01000804 	movi	r4,32
    dcbc:	4084d83a 	srl	r2,r8,r2
    dcc0:	19003f26 	beq	r3,r4,ddc0 <__adddf3+0x568>
    dcc4:	01001004 	movi	r4,64
    dcc8:	20c7c83a 	sub	r3,r4,r3
    dccc:	40d0983a 	sll	r8,r8,r3
    dcd0:	418cb03a 	or	r6,r8,r6
    dcd4:	300cc03a 	cmpne	r6,r6,zero
    dcd8:	308cb03a 	or	r6,r6,r2
    dcdc:	0007883a 	mov	r3,zero
    dce0:	003f3406 	br	d9b4 <__alt_mem_Flash_flash_data+0xf400d9b4>
    dce4:	80002326 	beq	r16,zero,dd74 <__adddf3+0x51c>
    dce8:	0101ffc4 	movi	r4,2047
    dcec:	11005e26 	beq	r2,r4,de68 <__adddf3+0x610>
    dcf0:	00c7c83a 	sub	r3,zero,r3
    dcf4:	29402034 	orhi	r5,r5,128
    dcf8:	01000e04 	movi	r4,56
    dcfc:	20c07216 	blt	r4,r3,dec8 <__adddf3+0x670>
    dd00:	010007c4 	movi	r4,31
    dd04:	20c0ce16 	blt	r4,r3,e040 <__adddf3+0x7e8>
    dd08:	01000804 	movi	r4,32
    dd0c:	20c9c83a 	sub	r4,r4,r3
    dd10:	2914983a 	sll	r10,r5,r4
    dd14:	88d2d83a 	srl	r9,r17,r3
    dd18:	8908983a 	sll	r4,r17,r4
    dd1c:	28c6d83a 	srl	r3,r5,r3
    dd20:	5262b03a 	or	r17,r10,r9
    dd24:	2008c03a 	cmpne	r4,r4,zero
    dd28:	8922b03a 	or	r17,r17,r4
    dd2c:	3463c83a 	sub	r17,r6,r17
    dd30:	40c7c83a 	sub	r3,r8,r3
    dd34:	344d803a 	cmpltu	r6,r6,r17
    dd38:	198bc83a 	sub	r5,r3,r6
    dd3c:	1021883a 	mov	r16,r2
    dd40:	3825883a 	mov	r18,r7
    dd44:	003f2006 	br	d9c8 <__alt_mem_Flash_flash_data+0xf400d9c8>
    dd48:	9886b03a 	or	r3,r19,r2
    dd4c:	1800141e 	bne	r3,zero,dda0 <__adddf3+0x548>
    dd50:	0007883a 	mov	r3,zero
    dd54:	000b883a 	mov	r5,zero
    dd58:	0023883a 	mov	r17,zero
    dd5c:	0021883a 	mov	r16,zero
    dd60:	003f3c06 	br	da54 <__alt_mem_Flash_flash_data+0xf400da54>
    dd64:	418cb03a 	or	r6,r8,r6
    dd68:	300cc03a 	cmpne	r6,r6,zero
    dd6c:	0011883a 	mov	r8,zero
    dd70:	003f5606 	br	dacc <__alt_mem_Flash_flash_data+0xf400dacc>
    dd74:	2c48b03a 	or	r4,r5,r17
    dd78:	20003b26 	beq	r4,zero,de68 <__adddf3+0x610>
    dd7c:	00c6303a 	nor	r3,zero,r3
    dd80:	1800371e 	bne	r3,zero,de60 <__adddf3+0x608>
    dd84:	3463c83a 	sub	r17,r6,r17
    dd88:	414bc83a 	sub	r5,r8,r5
    dd8c:	344d803a 	cmpltu	r6,r6,r17
    dd90:	298bc83a 	sub	r5,r5,r6
    dd94:	1021883a 	mov	r16,r2
    dd98:	3825883a 	mov	r18,r7
    dd9c:	003f0a06 	br	d9c8 <__alt_mem_Flash_flash_data+0xf400d9c8>
    dda0:	1023883a 	mov	r17,r2
    dda4:	003f0d06 	br	d9dc <__alt_mem_Flash_flash_data+0xf400d9dc>
    dda8:	0007883a 	mov	r3,zero
    ddac:	000b883a 	mov	r5,zero
    ddb0:	0023883a 	mov	r17,zero
    ddb4:	003f2706 	br	da54 <__alt_mem_Flash_flash_data+0xf400da54>
    ddb8:	0027883a 	mov	r19,zero
    ddbc:	003fb706 	br	dc9c <__alt_mem_Flash_flash_data+0xf400dc9c>
    ddc0:	0011883a 	mov	r8,zero
    ddc4:	003fc206 	br	dcd0 <__alt_mem_Flash_flash_data+0xf400dcd0>
    ddc8:	2c44b03a 	or	r2,r5,r17
    ddcc:	8000871e 	bne	r16,zero,dfec <__adddf3+0x794>
    ddd0:	1000b126 	beq	r2,zero,e098 <__adddf3+0x840>
    ddd4:	4184b03a 	or	r2,r8,r6
    ddd8:	103ebe26 	beq	r2,zero,d8d4 <__alt_mem_Flash_flash_data+0xf400d8d4>
    dddc:	3445883a 	add	r2,r6,r17
    dde0:	1463803a 	cmpltu	r17,r2,r17
    dde4:	414b883a 	add	r5,r8,r5
    dde8:	2c4b883a 	add	r5,r5,r17
    ddec:	28c0202c 	andhi	r3,r5,128
    ddf0:	1023883a 	mov	r17,r2
    ddf4:	183f6326 	beq	r3,zero,db84 <__alt_mem_Flash_flash_data+0xf400db84>
    ddf8:	00bfe034 	movhi	r2,65408
    ddfc:	10bfffc4 	addi	r2,r2,-1
    de00:	2021883a 	mov	r16,r4
    de04:	288a703a 	and	r5,r5,r2
    de08:	003eb206 	br	d8d4 <__alt_mem_Flash_flash_data+0xf400d8d4>
    de0c:	2c44b03a 	or	r2,r5,r17
    de10:	8000251e 	bne	r16,zero,dea8 <__adddf3+0x650>
    de14:	10004b1e 	bne	r2,zero,df44 <__adddf3+0x6ec>
    de18:	4184b03a 	or	r2,r8,r6
    de1c:	103fe226 	beq	r2,zero,dda8 <__alt_mem_Flash_flash_data+0xf400dda8>
    de20:	400b883a 	mov	r5,r8
    de24:	3023883a 	mov	r17,r6
    de28:	3825883a 	mov	r18,r7
    de2c:	003ea906 	br	d8d4 <__alt_mem_Flash_flash_data+0xf400d8d4>
    de30:	20bff804 	addi	r2,r4,-32
    de34:	01c00804 	movi	r7,32
    de38:	4084d83a 	srl	r2,r8,r2
    de3c:	21c07e26 	beq	r4,r7,e038 <__adddf3+0x7e0>
    de40:	01c01004 	movi	r7,64
    de44:	3909c83a 	sub	r4,r7,r4
    de48:	4110983a 	sll	r8,r8,r4
    de4c:	418cb03a 	or	r6,r8,r6
    de50:	300cc03a 	cmpne	r6,r6,zero
    de54:	308cb03a 	or	r6,r6,r2
    de58:	0011883a 	mov	r8,zero
    de5c:	003f1b06 	br	dacc <__alt_mem_Flash_flash_data+0xf400dacc>
    de60:	0101ffc4 	movi	r4,2047
    de64:	113fa41e 	bne	r2,r4,dcf8 <__alt_mem_Flash_flash_data+0xf400dcf8>
    de68:	400b883a 	mov	r5,r8
    de6c:	3023883a 	mov	r17,r6
    de70:	1021883a 	mov	r16,r2
    de74:	3825883a 	mov	r18,r7
    de78:	003e9606 	br	d8d4 <__alt_mem_Flash_flash_data+0xf400d8d4>
    de7c:	80001a1e 	bne	r16,zero,dee8 <__adddf3+0x690>
    de80:	2c4eb03a 	or	r7,r5,r17
    de84:	38005526 	beq	r7,zero,dfdc <__adddf3+0x784>
    de88:	0108303a 	nor	r4,zero,r4
    de8c:	2000511e 	bne	r4,zero,dfd4 <__adddf3+0x77c>
    de90:	89a3883a 	add	r17,r17,r6
    de94:	414b883a 	add	r5,r8,r5
    de98:	898d803a 	cmpltu	r6,r17,r6
    de9c:	298b883a 	add	r5,r5,r6
    dea0:	1021883a 	mov	r16,r2
    dea4:	003f0e06 	br	dae0 <__alt_mem_Flash_flash_data+0xf400dae0>
    dea8:	1000341e 	bne	r2,zero,df7c <__adddf3+0x724>
    deac:	4184b03a 	or	r2,r8,r6
    deb0:	10006f26 	beq	r2,zero,e070 <__adddf3+0x818>
    deb4:	400b883a 	mov	r5,r8
    deb8:	3023883a 	mov	r17,r6
    debc:	3825883a 	mov	r18,r7
    dec0:	0401ffc4 	movi	r16,2047
    dec4:	003e8306 	br	d8d4 <__alt_mem_Flash_flash_data+0xf400d8d4>
    dec8:	2c62b03a 	or	r17,r5,r17
    decc:	8822c03a 	cmpne	r17,r17,zero
    ded0:	0007883a 	mov	r3,zero
    ded4:	003f9506 	br	dd2c <__alt_mem_Flash_flash_data+0xf400dd2c>
    ded8:	1021883a 	mov	r16,r2
    dedc:	000b883a 	mov	r5,zero
    dee0:	0023883a 	mov	r17,zero
    dee4:	003edb06 	br	da54 <__alt_mem_Flash_flash_data+0xf400da54>
    dee8:	01c1ffc4 	movi	r7,2047
    deec:	11c03b26 	beq	r2,r7,dfdc <__adddf3+0x784>
    def0:	0109c83a 	sub	r4,zero,r4
    def4:	29402034 	orhi	r5,r5,128
    def8:	01c00e04 	movi	r7,56
    defc:	39006216 	blt	r7,r4,e088 <__adddf3+0x830>
    df00:	01c007c4 	movi	r7,31
    df04:	39006b16 	blt	r7,r4,e0b4 <__adddf3+0x85c>
    df08:	01c00804 	movi	r7,32
    df0c:	390fc83a 	sub	r7,r7,r4
    df10:	29d4983a 	sll	r10,r5,r7
    df14:	8912d83a 	srl	r9,r17,r4
    df18:	89ce983a 	sll	r7,r17,r7
    df1c:	2908d83a 	srl	r4,r5,r4
    df20:	5262b03a 	or	r17,r10,r9
    df24:	380ac03a 	cmpne	r5,r7,zero
    df28:	8962b03a 	or	r17,r17,r5
    df2c:	89a3883a 	add	r17,r17,r6
    df30:	2211883a 	add	r8,r4,r8
    df34:	898d803a 	cmpltu	r6,r17,r6
    df38:	418b883a 	add	r5,r8,r6
    df3c:	1021883a 	mov	r16,r2
    df40:	003ee706 	br	dae0 <__alt_mem_Flash_flash_data+0xf400dae0>
    df44:	4184b03a 	or	r2,r8,r6
    df48:	103e6226 	beq	r2,zero,d8d4 <__alt_mem_Flash_flash_data+0xf400d8d4>
    df4c:	8987c83a 	sub	r3,r17,r6
    df50:	88c9803a 	cmpltu	r4,r17,r3
    df54:	2a05c83a 	sub	r2,r5,r8
    df58:	1105c83a 	sub	r2,r2,r4
    df5c:	1100202c 	andhi	r4,r2,128
    df60:	203f0426 	beq	r4,zero,db74 <__alt_mem_Flash_flash_data+0xf400db74>
    df64:	3463c83a 	sub	r17,r6,r17
    df68:	414bc83a 	sub	r5,r8,r5
    df6c:	344d803a 	cmpltu	r6,r6,r17
    df70:	298bc83a 	sub	r5,r5,r6
    df74:	3825883a 	mov	r18,r7
    df78:	003e5606 	br	d8d4 <__alt_mem_Flash_flash_data+0xf400d8d4>
    df7c:	4184b03a 	or	r2,r8,r6
    df80:	10002b26 	beq	r2,zero,e030 <__adddf3+0x7d8>
    df84:	2804d0fa 	srli	r2,r5,3
    df88:	8822d0fa 	srli	r17,r17,3
    df8c:	280a977a 	slli	r5,r5,29
    df90:	10c0022c 	andhi	r3,r2,8
    df94:	2c62b03a 	or	r17,r5,r17
    df98:	18000826 	beq	r3,zero,dfbc <__adddf3+0x764>
    df9c:	4008d0fa 	srli	r4,r8,3
    dfa0:	20c0022c 	andhi	r3,r4,8
    dfa4:	1800051e 	bne	r3,zero,dfbc <__adddf3+0x764>
    dfa8:	300cd0fa 	srli	r6,r6,3
    dfac:	4010977a 	slli	r8,r8,29
    dfb0:	2005883a 	mov	r2,r4
    dfb4:	3825883a 	mov	r18,r7
    dfb8:	41a2b03a 	or	r17,r8,r6
    dfbc:	880ad77a 	srli	r5,r17,29
    dfc0:	100490fa 	slli	r2,r2,3
    dfc4:	882290fa 	slli	r17,r17,3
    dfc8:	0401ffc4 	movi	r16,2047
    dfcc:	288ab03a 	or	r5,r5,r2
    dfd0:	003e4006 	br	d8d4 <__alt_mem_Flash_flash_data+0xf400d8d4>
    dfd4:	01c1ffc4 	movi	r7,2047
    dfd8:	11ffc71e 	bne	r2,r7,def8 <__alt_mem_Flash_flash_data+0xf400def8>
    dfdc:	400b883a 	mov	r5,r8
    dfe0:	3023883a 	mov	r17,r6
    dfe4:	1021883a 	mov	r16,r2
    dfe8:	003e3a06 	br	d8d4 <__alt_mem_Flash_flash_data+0xf400d8d4>
    dfec:	10002d26 	beq	r2,zero,e0a4 <__adddf3+0x84c>
    dff0:	4184b03a 	or	r2,r8,r6
    dff4:	10000e26 	beq	r2,zero,e030 <__adddf3+0x7d8>
    dff8:	2804d0fa 	srli	r2,r5,3
    dffc:	8822d0fa 	srli	r17,r17,3
    e000:	280a977a 	slli	r5,r5,29
    e004:	10c0022c 	andhi	r3,r2,8
    e008:	2c62b03a 	or	r17,r5,r17
    e00c:	183feb26 	beq	r3,zero,dfbc <__alt_mem_Flash_flash_data+0xf400dfbc>
    e010:	4008d0fa 	srli	r4,r8,3
    e014:	20c0022c 	andhi	r3,r4,8
    e018:	183fe81e 	bne	r3,zero,dfbc <__alt_mem_Flash_flash_data+0xf400dfbc>
    e01c:	300cd0fa 	srli	r6,r6,3
    e020:	4010977a 	slli	r8,r8,29
    e024:	2005883a 	mov	r2,r4
    e028:	41a2b03a 	or	r17,r8,r6
    e02c:	003fe306 	br	dfbc <__alt_mem_Flash_flash_data+0xf400dfbc>
    e030:	0401ffc4 	movi	r16,2047
    e034:	003e2706 	br	d8d4 <__alt_mem_Flash_flash_data+0xf400d8d4>
    e038:	0011883a 	mov	r8,zero
    e03c:	003f8306 	br	de4c <__alt_mem_Flash_flash_data+0xf400de4c>
    e040:	193ff804 	addi	r4,r3,-32
    e044:	02400804 	movi	r9,32
    e048:	2908d83a 	srl	r4,r5,r4
    e04c:	1a402526 	beq	r3,r9,e0e4 <__adddf3+0x88c>
    e050:	02401004 	movi	r9,64
    e054:	48c7c83a 	sub	r3,r9,r3
    e058:	28ca983a 	sll	r5,r5,r3
    e05c:	2c62b03a 	or	r17,r5,r17
    e060:	8822c03a 	cmpne	r17,r17,zero
    e064:	8922b03a 	or	r17,r17,r4
    e068:	0007883a 	mov	r3,zero
    e06c:	003f2f06 	br	dd2c <__alt_mem_Flash_flash_data+0xf400dd2c>
    e070:	01402034 	movhi	r5,128
    e074:	0007883a 	mov	r3,zero
    e078:	297fffc4 	addi	r5,r5,-1
    e07c:	047ffe04 	movi	r17,-8
    e080:	0401ffc4 	movi	r16,2047
    e084:	003e7306 	br	da54 <__alt_mem_Flash_flash_data+0xf400da54>
    e088:	2c62b03a 	or	r17,r5,r17
    e08c:	8822c03a 	cmpne	r17,r17,zero
    e090:	0009883a 	mov	r4,zero
    e094:	003fa506 	br	df2c <__alt_mem_Flash_flash_data+0xf400df2c>
    e098:	400b883a 	mov	r5,r8
    e09c:	3023883a 	mov	r17,r6
    e0a0:	003e0c06 	br	d8d4 <__alt_mem_Flash_flash_data+0xf400d8d4>
    e0a4:	400b883a 	mov	r5,r8
    e0a8:	3023883a 	mov	r17,r6
    e0ac:	0401ffc4 	movi	r16,2047
    e0b0:	003e0806 	br	d8d4 <__alt_mem_Flash_flash_data+0xf400d8d4>
    e0b4:	21fff804 	addi	r7,r4,-32
    e0b8:	02400804 	movi	r9,32
    e0bc:	29ced83a 	srl	r7,r5,r7
    e0c0:	22400a26 	beq	r4,r9,e0ec <__adddf3+0x894>
    e0c4:	02401004 	movi	r9,64
    e0c8:	4909c83a 	sub	r4,r9,r4
    e0cc:	290a983a 	sll	r5,r5,r4
    e0d0:	2c62b03a 	or	r17,r5,r17
    e0d4:	8822c03a 	cmpne	r17,r17,zero
    e0d8:	89e2b03a 	or	r17,r17,r7
    e0dc:	0009883a 	mov	r4,zero
    e0e0:	003f9206 	br	df2c <__alt_mem_Flash_flash_data+0xf400df2c>
    e0e4:	000b883a 	mov	r5,zero
    e0e8:	003fdc06 	br	e05c <__alt_mem_Flash_flash_data+0xf400e05c>
    e0ec:	000b883a 	mov	r5,zero
    e0f0:	003ff706 	br	e0d0 <__alt_mem_Flash_flash_data+0xf400e0d0>

0000e0f4 <__divdf3>:
    e0f4:	defff204 	addi	sp,sp,-56
    e0f8:	dd000815 	stw	r20,32(sp)
    e0fc:	2828d53a 	srli	r20,r5,20
    e100:	dd800a15 	stw	r22,40(sp)
    e104:	282cd7fa 	srli	r22,r5,31
    e108:	dc000415 	stw	r16,16(sp)
    e10c:	04000434 	movhi	r16,16
    e110:	df000c15 	stw	fp,48(sp)
    e114:	dcc00715 	stw	r19,28(sp)
    e118:	dc800615 	stw	r18,24(sp)
    e11c:	dc400515 	stw	r17,20(sp)
    e120:	843fffc4 	addi	r16,r16,-1
    e124:	dfc00d15 	stw	ra,52(sp)
    e128:	ddc00b15 	stw	r23,44(sp)
    e12c:	dd400915 	stw	r21,36(sp)
    e130:	a501ffcc 	andi	r20,r20,2047
    e134:	2025883a 	mov	r18,r4
    e138:	2027883a 	mov	r19,r4
    e13c:	2c22703a 	and	r17,r5,r16
    e140:	b7003fcc 	andi	fp,r22,255
    e144:	a0005e26 	beq	r20,zero,e2c0 <__divdf3+0x1cc>
    e148:	0081ffc4 	movi	r2,2047
    e14c:	a0803526 	beq	r20,r2,e224 <__divdf3+0x130>
    e150:	8c000434 	orhi	r16,r17,16
    e154:	2004d77a 	srli	r2,r4,29
    e158:	802090fa 	slli	r16,r16,3
    e15c:	202690fa 	slli	r19,r4,3
    e160:	a53f0044 	addi	r20,r20,-1023
    e164:	80a2b03a 	or	r17,r16,r2
    e168:	0025883a 	mov	r18,zero
    e16c:	0011883a 	mov	r8,zero
    e170:	380ad53a 	srli	r5,r7,20
    e174:	382ed7fa 	srli	r23,r7,31
    e178:	04000434 	movhi	r16,16
    e17c:	843fffc4 	addi	r16,r16,-1
    e180:	2941ffcc 	andi	r5,r5,2047
    e184:	302b883a 	mov	r21,r6
    e188:	3c20703a 	and	r16,r7,r16
    e18c:	ba403fcc 	andi	r9,r23,255
    e190:	28006726 	beq	r5,zero,e330 <__divdf3+0x23c>
    e194:	0081ffc4 	movi	r2,2047
    e198:	28805f26 	beq	r5,r2,e318 <__divdf3+0x224>
    e19c:	84000434 	orhi	r16,r16,16
    e1a0:	3004d77a 	srli	r2,r6,29
    e1a4:	802090fa 	slli	r16,r16,3
    e1a8:	302a90fa 	slli	r21,r6,3
    e1ac:	297f0044 	addi	r5,r5,-1023
    e1b0:	80a0b03a 	or	r16,r16,r2
    e1b4:	000f883a 	mov	r7,zero
    e1b8:	3c86b03a 	or	r3,r7,r18
    e1bc:	180690ba 	slli	r3,r3,2
    e1c0:	00800074 	movhi	r2,1
    e1c4:	10b87904 	addi	r2,r2,-7708
    e1c8:	1887883a 	add	r3,r3,r2
    e1cc:	18c00017 	ldw	r3,0(r3)
    e1d0:	b5c8f03a 	xor	r4,r22,r23
    e1d4:	200d883a 	mov	r6,r4
    e1d8:	24803fcc 	andi	r18,r4,255
    e1dc:	a169c83a 	sub	r20,r20,r5
    e1e0:	1800683a 	jmp	r3
    e1e4:	0000e42c 	andhi	zero,zero,912
    e1e8:	0000e25c 	xori	zero,zero,905
    e1ec:	0000e3f0 	cmpltui	zero,zero,911
    e1f0:	0000e240 	call	e24 <_malloc_r+0x6fc>
    e1f4:	0000e3f0 	cmpltui	zero,zero,911
    e1f8:	0000e3c4 	movi	zero,911
    e1fc:	0000e3f0 	cmpltui	zero,zero,911
    e200:	0000e240 	call	e24 <_malloc_r+0x6fc>
    e204:	0000e25c 	xori	zero,zero,905
    e208:	0000e25c 	xori	zero,zero,905
    e20c:	0000e3c4 	movi	zero,911
    e210:	0000e240 	call	e24 <_malloc_r+0x6fc>
    e214:	0000e250 	cmplti	zero,zero,905
    e218:	0000e250 	cmplti	zero,zero,905
    e21c:	0000e250 	cmplti	zero,zero,905
    e220:	0000e400 	call	e40 <_malloc_r+0x718>
    e224:	8904b03a 	or	r2,r17,r4
    e228:	1000631e 	bne	r2,zero,e3b8 <__divdf3+0x2c4>
    e22c:	04800204 	movi	r18,8
    e230:	0023883a 	mov	r17,zero
    e234:	0027883a 	mov	r19,zero
    e238:	02000084 	movi	r8,2
    e23c:	003fcc06 	br	e170 <__alt_mem_Flash_flash_data+0xf400e170>
    e240:	8023883a 	mov	r17,r16
    e244:	a827883a 	mov	r19,r21
    e248:	4839883a 	mov	fp,r9
    e24c:	3811883a 	mov	r8,r7
    e250:	00800084 	movi	r2,2
    e254:	40812a1e 	bne	r8,r2,e700 <__divdf3+0x60c>
    e258:	e025883a 	mov	r18,fp
    e25c:	9180004c 	andi	r6,r18,1
    e260:	0101ffc4 	movi	r4,2047
    e264:	000b883a 	mov	r5,zero
    e268:	0027883a 	mov	r19,zero
    e26c:	2008953a 	slli	r4,r4,20
    e270:	30c03fcc 	andi	r3,r6,255
    e274:	04000434 	movhi	r16,16
    e278:	180697fa 	slli	r3,r3,31
    e27c:	843fffc4 	addi	r16,r16,-1
    e280:	2c20703a 	and	r16,r5,r16
    e284:	8120b03a 	or	r16,r16,r4
    e288:	80c6b03a 	or	r3,r16,r3
    e28c:	9805883a 	mov	r2,r19
    e290:	dfc00d17 	ldw	ra,52(sp)
    e294:	df000c17 	ldw	fp,48(sp)
    e298:	ddc00b17 	ldw	r23,44(sp)
    e29c:	dd800a17 	ldw	r22,40(sp)
    e2a0:	dd400917 	ldw	r21,36(sp)
    e2a4:	dd000817 	ldw	r20,32(sp)
    e2a8:	dcc00717 	ldw	r19,28(sp)
    e2ac:	dc800617 	ldw	r18,24(sp)
    e2b0:	dc400517 	ldw	r17,20(sp)
    e2b4:	dc000417 	ldw	r16,16(sp)
    e2b8:	dec00e04 	addi	sp,sp,56
    e2bc:	f800283a 	ret
    e2c0:	8904b03a 	or	r2,r17,r4
    e2c4:	10003726 	beq	r2,zero,e3a4 <__divdf3+0x2b0>
    e2c8:	88011c26 	beq	r17,zero,e73c <__divdf3+0x648>
    e2cc:	8809883a 	mov	r4,r17
    e2d0:	d9800315 	stw	r6,12(sp)
    e2d4:	d9c00115 	stw	r7,4(sp)
    e2d8:	000fdf40 	call	fdf4 <__clzsi2>
    e2dc:	d9800317 	ldw	r6,12(sp)
    e2e0:	d9c00117 	ldw	r7,4(sp)
    e2e4:	1007883a 	mov	r3,r2
    e2e8:	01000a04 	movi	r4,40
    e2ec:	1cfffe04 	addi	r19,r3,-8
    e2f0:	20c9c83a 	sub	r4,r4,r3
    e2f4:	8cca983a 	sll	r5,r17,r19
    e2f8:	9108d83a 	srl	r4,r18,r4
    e2fc:	94e6983a 	sll	r19,r18,r19
    e300:	2162b03a 	or	r17,r4,r5
    e304:	053f0344 	movi	r20,-1011
    e308:	a0e9c83a 	sub	r20,r20,r3
    e30c:	0025883a 	mov	r18,zero
    e310:	0011883a 	mov	r8,zero
    e314:	003f9606 	br	e170 <__alt_mem_Flash_flash_data+0xf400e170>
    e318:	8184b03a 	or	r2,r16,r6
    e31c:	10001f1e 	bne	r2,zero,e39c <__divdf3+0x2a8>
    e320:	0021883a 	mov	r16,zero
    e324:	002b883a 	mov	r21,zero
    e328:	01c00084 	movi	r7,2
    e32c:	003fa206 	br	e1b8 <__alt_mem_Flash_flash_data+0xf400e1b8>
    e330:	8184b03a 	or	r2,r16,r6
    e334:	10001526 	beq	r2,zero,e38c <__divdf3+0x298>
    e338:	80010c26 	beq	r16,zero,e76c <__divdf3+0x678>
    e33c:	8009883a 	mov	r4,r16
    e340:	d9800315 	stw	r6,12(sp)
    e344:	da000215 	stw	r8,8(sp)
    e348:	da400015 	stw	r9,0(sp)
    e34c:	000fdf40 	call	fdf4 <__clzsi2>
    e350:	d9800317 	ldw	r6,12(sp)
    e354:	da000217 	ldw	r8,8(sp)
    e358:	da400017 	ldw	r9,0(sp)
    e35c:	1007883a 	mov	r3,r2
    e360:	01000a04 	movi	r4,40
    e364:	1d7ffe04 	addi	r21,r3,-8
    e368:	20c9c83a 	sub	r4,r4,r3
    e36c:	8560983a 	sll	r16,r16,r21
    e370:	3108d83a 	srl	r4,r6,r4
    e374:	356a983a 	sll	r21,r6,r21
    e378:	2420b03a 	or	r16,r4,r16
    e37c:	017f0344 	movi	r5,-1011
    e380:	28cbc83a 	sub	r5,r5,r3
    e384:	000f883a 	mov	r7,zero
    e388:	003f8b06 	br	e1b8 <__alt_mem_Flash_flash_data+0xf400e1b8>
    e38c:	0021883a 	mov	r16,zero
    e390:	002b883a 	mov	r21,zero
    e394:	01c00044 	movi	r7,1
    e398:	003f8706 	br	e1b8 <__alt_mem_Flash_flash_data+0xf400e1b8>
    e39c:	01c000c4 	movi	r7,3
    e3a0:	003f8506 	br	e1b8 <__alt_mem_Flash_flash_data+0xf400e1b8>
    e3a4:	04800104 	movi	r18,4
    e3a8:	0023883a 	mov	r17,zero
    e3ac:	0027883a 	mov	r19,zero
    e3b0:	02000044 	movi	r8,1
    e3b4:	003f6e06 	br	e170 <__alt_mem_Flash_flash_data+0xf400e170>
    e3b8:	04800304 	movi	r18,12
    e3bc:	020000c4 	movi	r8,3
    e3c0:	003f6b06 	br	e170 <__alt_mem_Flash_flash_data+0xf400e170>
    e3c4:	01400434 	movhi	r5,16
    e3c8:	000d883a 	mov	r6,zero
    e3cc:	297fffc4 	addi	r5,r5,-1
    e3d0:	04ffffc4 	movi	r19,-1
    e3d4:	0101ffc4 	movi	r4,2047
    e3d8:	003fa406 	br	e26c <__alt_mem_Flash_flash_data+0xf400e26c>
    e3dc:	043f0084 	movi	r16,-1022
    e3e0:	8521c83a 	sub	r16,r16,r20
    e3e4:	00800e04 	movi	r2,56
    e3e8:	1401200e 	bge	r2,r16,e86c <__divdf3+0x778>
    e3ec:	9180004c 	andi	r6,r18,1
    e3f0:	0009883a 	mov	r4,zero
    e3f4:	000b883a 	mov	r5,zero
    e3f8:	0027883a 	mov	r19,zero
    e3fc:	003f9b06 	br	e26c <__alt_mem_Flash_flash_data+0xf400e26c>
    e400:	8880022c 	andhi	r2,r17,8
    e404:	1000c726 	beq	r2,zero,e724 <__divdf3+0x630>
    e408:	8080022c 	andhi	r2,r16,8
    e40c:	1000c51e 	bne	r2,zero,e724 <__divdf3+0x630>
    e410:	00800434 	movhi	r2,16
    e414:	81400234 	orhi	r5,r16,8
    e418:	10bfffc4 	addi	r2,r2,-1
    e41c:	b80d883a 	mov	r6,r23
    e420:	288a703a 	and	r5,r5,r2
    e424:	a827883a 	mov	r19,r21
    e428:	003fea06 	br	e3d4 <__alt_mem_Flash_flash_data+0xf400e3d4>
    e42c:	8440ea36 	bltu	r16,r17,e7d8 <__divdf3+0x6e4>
    e430:	8c00e826 	beq	r17,r16,e7d4 <__divdf3+0x6e0>
    e434:	a53fffc4 	addi	r20,r20,-1
    e438:	882d883a 	mov	r22,r17
    e43c:	000d883a 	mov	r6,zero
    e440:	a804d63a 	srli	r2,r21,24
    e444:	8020923a 	slli	r16,r16,8
    e448:	b009883a 	mov	r4,r22
    e44c:	d9800315 	stw	r6,12(sp)
    e450:	1420b03a 	or	r16,r2,r16
    e454:	802ed43a 	srli	r23,r16,16
    e458:	873fffcc 	andi	fp,r16,65535
    e45c:	a82a923a 	slli	r21,r21,8
    e460:	b80b883a 	mov	r5,r23
    e464:	000d8480 	call	d848 <__udivsi3>
    e468:	b009883a 	mov	r4,r22
    e46c:	b80b883a 	mov	r5,r23
    e470:	1023883a 	mov	r17,r2
    e474:	000d8500 	call	d850 <__umodsi3>
    e478:	1004943a 	slli	r2,r2,16
    e47c:	9808d43a 	srli	r4,r19,16
    e480:	8f2d383a 	mul	r22,r17,fp
    e484:	d9800317 	ldw	r6,12(sp)
    e488:	1106b03a 	or	r3,r2,r4
    e48c:	1d80062e 	bgeu	r3,r22,e4a8 <__divdf3+0x3b4>
    e490:	1c07883a 	add	r3,r3,r16
    e494:	88bfffc4 	addi	r2,r17,-1
    e498:	1c00dc36 	bltu	r3,r16,e80c <__divdf3+0x718>
    e49c:	1d80db2e 	bgeu	r3,r22,e80c <__divdf3+0x718>
    e4a0:	8c7fff84 	addi	r17,r17,-2
    e4a4:	1c07883a 	add	r3,r3,r16
    e4a8:	1dadc83a 	sub	r22,r3,r22
    e4ac:	b009883a 	mov	r4,r22
    e4b0:	b80b883a 	mov	r5,r23
    e4b4:	d9800315 	stw	r6,12(sp)
    e4b8:	000d8480 	call	d848 <__udivsi3>
    e4bc:	b009883a 	mov	r4,r22
    e4c0:	b80b883a 	mov	r5,r23
    e4c4:	d8800015 	stw	r2,0(sp)
    e4c8:	000d8500 	call	d850 <__umodsi3>
    e4cc:	da400017 	ldw	r9,0(sp)
    e4d0:	1004943a 	slli	r2,r2,16
    e4d4:	9cffffcc 	andi	r19,r19,65535
    e4d8:	4f07383a 	mul	r3,r9,fp
    e4dc:	14c8b03a 	or	r4,r2,r19
    e4e0:	d9800317 	ldw	r6,12(sp)
    e4e4:	20c0062e 	bgeu	r4,r3,e500 <__divdf3+0x40c>
    e4e8:	2409883a 	add	r4,r4,r16
    e4ec:	48bfffc4 	addi	r2,r9,-1
    e4f0:	2400c436 	bltu	r4,r16,e804 <__divdf3+0x710>
    e4f4:	20c0c32e 	bgeu	r4,r3,e804 <__divdf3+0x710>
    e4f8:	4a7fff84 	addi	r9,r9,-2
    e4fc:	2409883a 	add	r4,r4,r16
    e500:	8822943a 	slli	r17,r17,16
    e504:	a80ed43a 	srli	r7,r21,16
    e508:	aa3fffcc 	andi	r8,r21,65535
    e50c:	4c62b03a 	or	r17,r9,r17
    e510:	8816d43a 	srli	r11,r17,16
    e514:	897fffcc 	andi	r5,r17,65535
    e518:	2a15383a 	mul	r10,r5,r8
    e51c:	5a19383a 	mul	r12,r11,r8
    e520:	29cb383a 	mul	r5,r5,r7
    e524:	5012d43a 	srli	r9,r10,16
    e528:	20c5c83a 	sub	r2,r4,r3
    e52c:	614b883a 	add	r5,r12,r5
    e530:	2a4b883a 	add	r5,r5,r9
    e534:	59c7383a 	mul	r3,r11,r7
    e538:	2b00022e 	bgeu	r5,r12,e544 <__divdf3+0x450>
    e53c:	01000074 	movhi	r4,1
    e540:	1907883a 	add	r3,r3,r4
    e544:	2808d43a 	srli	r4,r5,16
    e548:	280a943a 	slli	r5,r5,16
    e54c:	54ffffcc 	andi	r19,r10,65535
    e550:	1907883a 	add	r3,r3,r4
    e554:	2ccb883a 	add	r5,r5,r19
    e558:	10c09336 	bltu	r2,r3,e7a8 <__divdf3+0x6b4>
    e55c:	10c0ad26 	beq	r2,r3,e814 <__divdf3+0x720>
    e560:	10c7c83a 	sub	r3,r2,r3
    e564:	3167c83a 	sub	r19,r6,r5
    e568:	34ed803a 	cmpltu	r22,r6,r19
    e56c:	1dadc83a 	sub	r22,r3,r22
    e570:	b400b226 	beq	r22,r16,e83c <__divdf3+0x748>
    e574:	b009883a 	mov	r4,r22
    e578:	b80b883a 	mov	r5,r23
    e57c:	d9c00115 	stw	r7,4(sp)
    e580:	da000215 	stw	r8,8(sp)
    e584:	000d8480 	call	d848 <__udivsi3>
    e588:	b009883a 	mov	r4,r22
    e58c:	b80b883a 	mov	r5,r23
    e590:	d8800315 	stw	r2,12(sp)
    e594:	000d8500 	call	d850 <__umodsi3>
    e598:	d9800317 	ldw	r6,12(sp)
    e59c:	1004943a 	slli	r2,r2,16
    e5a0:	9808d43a 	srli	r4,r19,16
    e5a4:	372d383a 	mul	r22,r6,fp
    e5a8:	d9c00117 	ldw	r7,4(sp)
    e5ac:	1106b03a 	or	r3,r2,r4
    e5b0:	da000217 	ldw	r8,8(sp)
    e5b4:	1d80062e 	bgeu	r3,r22,e5d0 <__divdf3+0x4dc>
    e5b8:	1c07883a 	add	r3,r3,r16
    e5bc:	30bfffc4 	addi	r2,r6,-1
    e5c0:	1c00a036 	bltu	r3,r16,e844 <__divdf3+0x750>
    e5c4:	1d809f2e 	bgeu	r3,r22,e844 <__divdf3+0x750>
    e5c8:	31bfff84 	addi	r6,r6,-2
    e5cc:	1c07883a 	add	r3,r3,r16
    e5d0:	1dadc83a 	sub	r22,r3,r22
    e5d4:	b009883a 	mov	r4,r22
    e5d8:	b80b883a 	mov	r5,r23
    e5dc:	d9800315 	stw	r6,12(sp)
    e5e0:	d9c00115 	stw	r7,4(sp)
    e5e4:	da000215 	stw	r8,8(sp)
    e5e8:	000d8480 	call	d848 <__udivsi3>
    e5ec:	b009883a 	mov	r4,r22
    e5f0:	b80b883a 	mov	r5,r23
    e5f4:	d8800015 	stw	r2,0(sp)
    e5f8:	000d8500 	call	d850 <__umodsi3>
    e5fc:	da400017 	ldw	r9,0(sp)
    e600:	1004943a 	slli	r2,r2,16
    e604:	993fffcc 	andi	r4,r19,65535
    e608:	4f39383a 	mul	fp,r9,fp
    e60c:	1106b03a 	or	r3,r2,r4
    e610:	d9800317 	ldw	r6,12(sp)
    e614:	d9c00117 	ldw	r7,4(sp)
    e618:	da000217 	ldw	r8,8(sp)
    e61c:	1f00062e 	bgeu	r3,fp,e638 <__divdf3+0x544>
    e620:	1c07883a 	add	r3,r3,r16
    e624:	48bfffc4 	addi	r2,r9,-1
    e628:	1c008836 	bltu	r3,r16,e84c <__divdf3+0x758>
    e62c:	1f00872e 	bgeu	r3,fp,e84c <__divdf3+0x758>
    e630:	4a7fff84 	addi	r9,r9,-2
    e634:	1c07883a 	add	r3,r3,r16
    e638:	3008943a 	slli	r4,r6,16
    e63c:	1f07c83a 	sub	r3,r3,fp
    e640:	4926b03a 	or	r19,r9,r4
    e644:	993fffcc 	andi	r4,r19,65535
    e648:	980cd43a 	srli	r6,r19,16
    e64c:	220b383a 	mul	r5,r4,r8
    e650:	21c5383a 	mul	r2,r4,r7
    e654:	3211383a 	mul	r8,r6,r8
    e658:	2808d43a 	srli	r4,r5,16
    e65c:	31cf383a 	mul	r7,r6,r7
    e660:	4085883a 	add	r2,r8,r2
    e664:	1105883a 	add	r2,r2,r4
    e668:	1200022e 	bgeu	r2,r8,e674 <__divdf3+0x580>
    e66c:	01000074 	movhi	r4,1
    e670:	390f883a 	add	r7,r7,r4
    e674:	1008d43a 	srli	r4,r2,16
    e678:	1004943a 	slli	r2,r2,16
    e67c:	297fffcc 	andi	r5,r5,65535
    e680:	390f883a 	add	r7,r7,r4
    e684:	1145883a 	add	r2,r2,r5
    e688:	19c06536 	bltu	r3,r7,e820 <__divdf3+0x72c>
    e68c:	19c09f26 	beq	r3,r7,e90c <__divdf3+0x818>
    e690:	9cc00054 	ori	r19,r19,1
    e694:	a100ffc4 	addi	r4,r20,1023
    e698:	013f500e 	bge	zero,r4,e3dc <__alt_mem_Flash_flash_data+0xf400e3dc>
    e69c:	988001cc 	andi	r2,r19,7
    e6a0:	10000726 	beq	r2,zero,e6c0 <__divdf3+0x5cc>
    e6a4:	98c003cc 	andi	r3,r19,15
    e6a8:	00800104 	movi	r2,4
    e6ac:	18800426 	beq	r3,r2,e6c0 <__divdf3+0x5cc>
    e6b0:	9885883a 	add	r2,r19,r2
    e6b4:	14e1803a 	cmpltu	r16,r2,r19
    e6b8:	8c23883a 	add	r17,r17,r16
    e6bc:	1027883a 	mov	r19,r2
    e6c0:	8880402c 	andhi	r2,r17,256
    e6c4:	10000426 	beq	r2,zero,e6d8 <__divdf3+0x5e4>
    e6c8:	00bfc034 	movhi	r2,65280
    e6cc:	10bfffc4 	addi	r2,r2,-1
    e6d0:	a1010004 	addi	r4,r20,1024
    e6d4:	88a2703a 	and	r17,r17,r2
    e6d8:	0081ff84 	movi	r2,2046
    e6dc:	113edf16 	blt	r2,r4,e25c <__alt_mem_Flash_flash_data+0xf400e25c>
    e6e0:	9826d0fa 	srli	r19,r19,3
    e6e4:	8804977a 	slli	r2,r17,29
    e6e8:	8820927a 	slli	r16,r17,9
    e6ec:	2101ffcc 	andi	r4,r4,2047
    e6f0:	14e6b03a 	or	r19,r2,r19
    e6f4:	800ad33a 	srli	r5,r16,12
    e6f8:	9180004c 	andi	r6,r18,1
    e6fc:	003edb06 	br	e26c <__alt_mem_Flash_flash_data+0xf400e26c>
    e700:	008000c4 	movi	r2,3
    e704:	4080a826 	beq	r8,r2,e9a8 <__divdf3+0x8b4>
    e708:	00800044 	movi	r2,1
    e70c:	4080551e 	bne	r8,r2,e864 <__divdf3+0x770>
    e710:	e00d883a 	mov	r6,fp
    e714:	0009883a 	mov	r4,zero
    e718:	000b883a 	mov	r5,zero
    e71c:	0027883a 	mov	r19,zero
    e720:	003ed206 	br	e26c <__alt_mem_Flash_flash_data+0xf400e26c>
    e724:	00800434 	movhi	r2,16
    e728:	89400234 	orhi	r5,r17,8
    e72c:	10bfffc4 	addi	r2,r2,-1
    e730:	b00d883a 	mov	r6,r22
    e734:	288a703a 	and	r5,r5,r2
    e738:	003f2606 	br	e3d4 <__alt_mem_Flash_flash_data+0xf400e3d4>
    e73c:	d9800315 	stw	r6,12(sp)
    e740:	d9c00115 	stw	r7,4(sp)
    e744:	000fdf40 	call	fdf4 <__clzsi2>
    e748:	10c00804 	addi	r3,r2,32
    e74c:	010009c4 	movi	r4,39
    e750:	d9800317 	ldw	r6,12(sp)
    e754:	d9c00117 	ldw	r7,4(sp)
    e758:	20fee30e 	bge	r4,r3,e2e8 <__alt_mem_Flash_flash_data+0xf400e2e8>
    e75c:	117ffe04 	addi	r5,r2,-8
    e760:	9162983a 	sll	r17,r18,r5
    e764:	0027883a 	mov	r19,zero
    e768:	003ee606 	br	e304 <__alt_mem_Flash_flash_data+0xf400e304>
    e76c:	3009883a 	mov	r4,r6
    e770:	d9800315 	stw	r6,12(sp)
    e774:	da000215 	stw	r8,8(sp)
    e778:	da400015 	stw	r9,0(sp)
    e77c:	000fdf40 	call	fdf4 <__clzsi2>
    e780:	10c00804 	addi	r3,r2,32
    e784:	010009c4 	movi	r4,39
    e788:	d9800317 	ldw	r6,12(sp)
    e78c:	da000217 	ldw	r8,8(sp)
    e790:	da400017 	ldw	r9,0(sp)
    e794:	20fef20e 	bge	r4,r3,e360 <__alt_mem_Flash_flash_data+0xf400e360>
    e798:	10bffe04 	addi	r2,r2,-8
    e79c:	a8a0983a 	sll	r16,r21,r2
    e7a0:	002b883a 	mov	r21,zero
    e7a4:	003ef506 	br	e37c <__alt_mem_Flash_flash_data+0xf400e37c>
    e7a8:	354d883a 	add	r6,r6,r21
    e7ac:	3549803a 	cmpltu	r4,r6,r21
    e7b0:	2409883a 	add	r4,r4,r16
    e7b4:	2089883a 	add	r4,r4,r2
    e7b8:	88bfffc4 	addi	r2,r17,-1
    e7bc:	81000c2e 	bgeu	r16,r4,e7f0 <__divdf3+0x6fc>
    e7c0:	20c04436 	bltu	r4,r3,e8d4 <__divdf3+0x7e0>
    e7c4:	19006f26 	beq	r3,r4,e984 <__divdf3+0x890>
    e7c8:	20c7c83a 	sub	r3,r4,r3
    e7cc:	1023883a 	mov	r17,r2
    e7d0:	003f6406 	br	e564 <__alt_mem_Flash_flash_data+0xf400e564>
    e7d4:	9d7f1736 	bltu	r19,r21,e434 <__alt_mem_Flash_flash_data+0xf400e434>
    e7d8:	9806d07a 	srli	r3,r19,1
    e7dc:	880497fa 	slli	r2,r17,31
    e7e0:	980c97fa 	slli	r6,r19,31
    e7e4:	882cd07a 	srli	r22,r17,1
    e7e8:	18a6b03a 	or	r19,r3,r2
    e7ec:	003f1406 	br	e440 <__alt_mem_Flash_flash_data+0xf400e440>
    e7f0:	243ff51e 	bne	r4,r16,e7c8 <__alt_mem_Flash_flash_data+0xf400e7c8>
    e7f4:	357ff22e 	bgeu	r6,r21,e7c0 <__alt_mem_Flash_flash_data+0xf400e7c0>
    e7f8:	80c7c83a 	sub	r3,r16,r3
    e7fc:	1023883a 	mov	r17,r2
    e800:	003f5806 	br	e564 <__alt_mem_Flash_flash_data+0xf400e564>
    e804:	1013883a 	mov	r9,r2
    e808:	003f3d06 	br	e500 <__alt_mem_Flash_flash_data+0xf400e500>
    e80c:	1023883a 	mov	r17,r2
    e810:	003f2506 	br	e4a8 <__alt_mem_Flash_flash_data+0xf400e4a8>
    e814:	317fe436 	bltu	r6,r5,e7a8 <__alt_mem_Flash_flash_data+0xf400e7a8>
    e818:	0007883a 	mov	r3,zero
    e81c:	003f5106 	br	e564 <__alt_mem_Flash_flash_data+0xf400e564>
    e820:	1c07883a 	add	r3,r3,r16
    e824:	993fffc4 	addi	r4,r19,-1
    e828:	1c000a2e 	bgeu	r3,r16,e854 <__divdf3+0x760>
    e82c:	2027883a 	mov	r19,r4
    e830:	19ff971e 	bne	r3,r7,e690 <__alt_mem_Flash_flash_data+0xf400e690>
    e834:	a8bf961e 	bne	r21,r2,e690 <__alt_mem_Flash_flash_data+0xf400e690>
    e838:	003f9606 	br	e694 <__alt_mem_Flash_flash_data+0xf400e694>
    e83c:	04ffffc4 	movi	r19,-1
    e840:	003f9406 	br	e694 <__alt_mem_Flash_flash_data+0xf400e694>
    e844:	100d883a 	mov	r6,r2
    e848:	003f6106 	br	e5d0 <__alt_mem_Flash_flash_data+0xf400e5d0>
    e84c:	1013883a 	mov	r9,r2
    e850:	003f7906 	br	e638 <__alt_mem_Flash_flash_data+0xf400e638>
    e854:	19c02636 	bltu	r3,r7,e8f0 <__divdf3+0x7fc>
    e858:	38c04d26 	beq	r7,r3,e990 <__divdf3+0x89c>
    e85c:	2027883a 	mov	r19,r4
    e860:	003f8b06 	br	e690 <__alt_mem_Flash_flash_data+0xf400e690>
    e864:	e025883a 	mov	r18,fp
    e868:	003f8a06 	br	e694 <__alt_mem_Flash_flash_data+0xf400e694>
    e86c:	008007c4 	movi	r2,31
    e870:	14002a16 	blt	r2,r16,e91c <__divdf3+0x828>
    e874:	a5010784 	addi	r20,r20,1054
    e878:	8d04983a 	sll	r2,r17,r20
    e87c:	9c06d83a 	srl	r3,r19,r16
    e880:	9d28983a 	sll	r20,r19,r20
    e884:	8c20d83a 	srl	r16,r17,r16
    e888:	1886b03a 	or	r3,r3,r2
    e88c:	a004c03a 	cmpne	r2,r20,zero
    e890:	1884b03a 	or	r2,r3,r2
    e894:	10c001cc 	andi	r3,r2,7
    e898:	18000726 	beq	r3,zero,e8b8 <__divdf3+0x7c4>
    e89c:	110003cc 	andi	r4,r2,15
    e8a0:	00c00104 	movi	r3,4
    e8a4:	20c00426 	beq	r4,r3,e8b8 <__divdf3+0x7c4>
    e8a8:	10c00104 	addi	r3,r2,4
    e8ac:	1885803a 	cmpltu	r2,r3,r2
    e8b0:	80a1883a 	add	r16,r16,r2
    e8b4:	1805883a 	mov	r2,r3
    e8b8:	80c0202c 	andhi	r3,r16,128
    e8bc:	18002d26 	beq	r3,zero,e974 <__divdf3+0x880>
    e8c0:	9180004c 	andi	r6,r18,1
    e8c4:	01000044 	movi	r4,1
    e8c8:	000b883a 	mov	r5,zero
    e8cc:	0027883a 	mov	r19,zero
    e8d0:	003e6606 	br	e26c <__alt_mem_Flash_flash_data+0xf400e26c>
    e8d4:	354d883a 	add	r6,r6,r21
    e8d8:	356d803a 	cmpltu	r22,r6,r21
    e8dc:	b42d883a 	add	r22,r22,r16
    e8e0:	b12d883a 	add	r22,r22,r4
    e8e4:	8c7fff84 	addi	r17,r17,-2
    e8e8:	b0c7c83a 	sub	r3,r22,r3
    e8ec:	003f1d06 	br	e564 <__alt_mem_Flash_flash_data+0xf400e564>
    e8f0:	ad4b883a 	add	r5,r21,r21
    e8f4:	2d6b803a 	cmpltu	r21,r5,r21
    e8f8:	ac2b883a 	add	r21,r21,r16
    e8fc:	1d47883a 	add	r3,r3,r21
    e900:	993fff84 	addi	r4,r19,-2
    e904:	282b883a 	mov	r21,r5
    e908:	003fc806 	br	e82c <__alt_mem_Flash_flash_data+0xf400e82c>
    e90c:	103fc41e 	bne	r2,zero,e820 <__alt_mem_Flash_flash_data+0xf400e820>
    e910:	002b883a 	mov	r21,zero
    e914:	a8bf5e1e 	bne	r21,r2,e690 <__alt_mem_Flash_flash_data+0xf400e690>
    e918:	003f5e06 	br	e694 <__alt_mem_Flash_flash_data+0xf400e694>
    e91c:	00bef884 	movi	r2,-1054
    e920:	1505c83a 	sub	r2,r2,r20
    e924:	00c00804 	movi	r3,32
    e928:	8884d83a 	srl	r2,r17,r2
    e92c:	80c01c26 	beq	r16,r3,e9a0 <__divdf3+0x8ac>
    e930:	a0c10f84 	addi	r3,r20,1086
    e934:	88c6983a 	sll	r3,r17,r3
    e938:	1cc6b03a 	or	r3,r3,r19
    e93c:	1806c03a 	cmpne	r3,r3,zero
    e940:	1884b03a 	or	r2,r3,r2
    e944:	140001cc 	andi	r16,r2,7
    e948:	8000061e 	bne	r16,zero,e964 <__divdf3+0x870>
    e94c:	000b883a 	mov	r5,zero
    e950:	1004d0fa 	srli	r2,r2,3
    e954:	9180004c 	andi	r6,r18,1
    e958:	0009883a 	mov	r4,zero
    e95c:	1426b03a 	or	r19,r2,r16
    e960:	003e4206 	br	e26c <__alt_mem_Flash_flash_data+0xf400e26c>
    e964:	110003cc 	andi	r4,r2,15
    e968:	00c00104 	movi	r3,4
    e96c:	0021883a 	mov	r16,zero
    e970:	20ffcd1e 	bne	r4,r3,e8a8 <__alt_mem_Flash_flash_data+0xf400e8a8>
    e974:	800a927a 	slli	r5,r16,9
    e978:	8020977a 	slli	r16,r16,29
    e97c:	280ad33a 	srli	r5,r5,12
    e980:	003ff306 	br	e950 <__alt_mem_Flash_flash_data+0xf400e950>
    e984:	317fd336 	bltu	r6,r5,e8d4 <__alt_mem_Flash_flash_data+0xf400e8d4>
    e988:	1023883a 	mov	r17,r2
    e98c:	003fa206 	br	e818 <__alt_mem_Flash_flash_data+0xf400e818>
    e990:	a8bfd736 	bltu	r21,r2,e8f0 <__alt_mem_Flash_flash_data+0xf400e8f0>
    e994:	2027883a 	mov	r19,r4
    e998:	a8bf3d1e 	bne	r21,r2,e690 <__alt_mem_Flash_flash_data+0xf400e690>
    e99c:	003f3d06 	br	e694 <__alt_mem_Flash_flash_data+0xf400e694>
    e9a0:	0007883a 	mov	r3,zero
    e9a4:	003fe406 	br	e938 <__alt_mem_Flash_flash_data+0xf400e938>
    e9a8:	00800434 	movhi	r2,16
    e9ac:	89400234 	orhi	r5,r17,8
    e9b0:	10bfffc4 	addi	r2,r2,-1
    e9b4:	e00d883a 	mov	r6,fp
    e9b8:	288a703a 	and	r5,r5,r2
    e9bc:	003e8506 	br	e3d4 <__alt_mem_Flash_flash_data+0xf400e3d4>

0000e9c0 <__eqdf2>:
    e9c0:	2804d53a 	srli	r2,r5,20
    e9c4:	3806d53a 	srli	r3,r7,20
    e9c8:	02000434 	movhi	r8,16
    e9cc:	423fffc4 	addi	r8,r8,-1
    e9d0:	1081ffcc 	andi	r2,r2,2047
    e9d4:	0241ffc4 	movi	r9,2047
    e9d8:	2a14703a 	and	r10,r5,r8
    e9dc:	18c1ffcc 	andi	r3,r3,2047
    e9e0:	3a10703a 	and	r8,r7,r8
    e9e4:	280ad7fa 	srli	r5,r5,31
    e9e8:	380ed7fa 	srli	r7,r7,31
    e9ec:	12400f26 	beq	r2,r9,ea2c <__eqdf2+0x6c>
    e9f0:	0241ffc4 	movi	r9,2047
    e9f4:	1a400326 	beq	r3,r9,ea04 <__eqdf2+0x44>
    e9f8:	10c00526 	beq	r2,r3,ea10 <__eqdf2+0x50>
    e9fc:	00800044 	movi	r2,1
    ea00:	f800283a 	ret
    ea04:	4192b03a 	or	r9,r8,r6
    ea08:	483ffc1e 	bne	r9,zero,e9fc <__alt_mem_Flash_flash_data+0xf400e9fc>
    ea0c:	10fffb1e 	bne	r2,r3,e9fc <__alt_mem_Flash_flash_data+0xf400e9fc>
    ea10:	523ffa1e 	bne	r10,r8,e9fc <__alt_mem_Flash_flash_data+0xf400e9fc>
    ea14:	21bff91e 	bne	r4,r6,e9fc <__alt_mem_Flash_flash_data+0xf400e9fc>
    ea18:	29c00826 	beq	r5,r7,ea3c <__eqdf2+0x7c>
    ea1c:	103ff71e 	bne	r2,zero,e9fc <__alt_mem_Flash_flash_data+0xf400e9fc>
    ea20:	5104b03a 	or	r2,r10,r4
    ea24:	1004c03a 	cmpne	r2,r2,zero
    ea28:	f800283a 	ret
    ea2c:	5112b03a 	or	r9,r10,r4
    ea30:	483fef26 	beq	r9,zero,e9f0 <__alt_mem_Flash_flash_data+0xf400e9f0>
    ea34:	00800044 	movi	r2,1
    ea38:	f800283a 	ret
    ea3c:	0005883a 	mov	r2,zero
    ea40:	f800283a 	ret

0000ea44 <__gedf2>:
    ea44:	2804d53a 	srli	r2,r5,20
    ea48:	3806d53a 	srli	r3,r7,20
    ea4c:	02000434 	movhi	r8,16
    ea50:	423fffc4 	addi	r8,r8,-1
    ea54:	0241ffc4 	movi	r9,2047
    ea58:	1081ffcc 	andi	r2,r2,2047
    ea5c:	2a14703a 	and	r10,r5,r8
    ea60:	1a46703a 	and	r3,r3,r9
    ea64:	3a10703a 	and	r8,r7,r8
    ea68:	280ad7fa 	srli	r5,r5,31
    ea6c:	380ed7fa 	srli	r7,r7,31
    ea70:	12400b26 	beq	r2,r9,eaa0 <__gedf2+0x5c>
    ea74:	1a401626 	beq	r3,r9,ead0 <__gedf2+0x8c>
    ea78:	10000c1e 	bne	r2,zero,eaac <__gedf2+0x68>
    ea7c:	5112b03a 	or	r9,r10,r4
    ea80:	4813003a 	cmpeq	r9,r9,zero
    ea84:	4817883a 	mov	r11,r9
    ea88:	18000c1e 	bne	r3,zero,eabc <__gedf2+0x78>
    ea8c:	4198b03a 	or	r12,r8,r6
    ea90:	60000a1e 	bne	r12,zero,eabc <__gedf2+0x78>
    ea94:	48001326 	beq	r9,zero,eae4 <__gedf2+0xa0>
    ea98:	0005883a 	mov	r2,zero
    ea9c:	f800283a 	ret
    eaa0:	5112b03a 	or	r9,r10,r4
    eaa4:	4800191e 	bne	r9,zero,eb0c <__gedf2+0xc8>
    eaa8:	18800926 	beq	r3,r2,ead0 <__gedf2+0x8c>
    eaac:	18000b1e 	bne	r3,zero,eadc <__gedf2+0x98>
    eab0:	4192b03a 	or	r9,r8,r6
    eab4:	0017883a 	mov	r11,zero
    eab8:	48000a26 	beq	r9,zero,eae4 <__gedf2+0xa0>
    eabc:	39c03fcc 	andi	r7,r7,255
    eac0:	58000726 	beq	r11,zero,eae0 <__gedf2+0x9c>
    eac4:	3800081e 	bne	r7,zero,eae8 <__gedf2+0xa4>
    eac8:	00bfffc4 	movi	r2,-1
    eacc:	f800283a 	ret
    ead0:	4192b03a 	or	r9,r8,r6
    ead4:	48000d1e 	bne	r9,zero,eb0c <__gedf2+0xc8>
    ead8:	103fe826 	beq	r2,zero,ea7c <__alt_mem_Flash_flash_data+0xf400ea7c>
    eadc:	39c03fcc 	andi	r7,r7,255
    eae0:	29c00326 	beq	r5,r7,eaf0 <__gedf2+0xac>
    eae4:	283ff81e 	bne	r5,zero,eac8 <__alt_mem_Flash_flash_data+0xf400eac8>
    eae8:	00800044 	movi	r2,1
    eaec:	f800283a 	ret
    eaf0:	18bffc16 	blt	r3,r2,eae4 <__alt_mem_Flash_flash_data+0xf400eae4>
    eaf4:	10c00316 	blt	r2,r3,eb04 <__gedf2+0xc0>
    eaf8:	42bffa36 	bltu	r8,r10,eae4 <__alt_mem_Flash_flash_data+0xf400eae4>
    eafc:	52000526 	beq	r10,r8,eb14 <__gedf2+0xd0>
    eb00:	523fe52e 	bgeu	r10,r8,ea98 <__alt_mem_Flash_flash_data+0xf400ea98>
    eb04:	283ff026 	beq	r5,zero,eac8 <__alt_mem_Flash_flash_data+0xf400eac8>
    eb08:	003ff706 	br	eae8 <__alt_mem_Flash_flash_data+0xf400eae8>
    eb0c:	00bfff84 	movi	r2,-2
    eb10:	f800283a 	ret
    eb14:	313ff336 	bltu	r6,r4,eae4 <__alt_mem_Flash_flash_data+0xf400eae4>
    eb18:	21bfdf2e 	bgeu	r4,r6,ea98 <__alt_mem_Flash_flash_data+0xf400ea98>
    eb1c:	283fea26 	beq	r5,zero,eac8 <__alt_mem_Flash_flash_data+0xf400eac8>
    eb20:	003ff106 	br	eae8 <__alt_mem_Flash_flash_data+0xf400eae8>

0000eb24 <__ledf2>:
    eb24:	2804d53a 	srli	r2,r5,20
    eb28:	3810d53a 	srli	r8,r7,20
    eb2c:	00c00434 	movhi	r3,16
    eb30:	18ffffc4 	addi	r3,r3,-1
    eb34:	0241ffc4 	movi	r9,2047
    eb38:	1081ffcc 	andi	r2,r2,2047
    eb3c:	28d4703a 	and	r10,r5,r3
    eb40:	4250703a 	and	r8,r8,r9
    eb44:	38c6703a 	and	r3,r7,r3
    eb48:	280ad7fa 	srli	r5,r5,31
    eb4c:	380ed7fa 	srli	r7,r7,31
    eb50:	12400b26 	beq	r2,r9,eb80 <__ledf2+0x5c>
    eb54:	42401926 	beq	r8,r9,ebbc <__ledf2+0x98>
    eb58:	10000c1e 	bne	r2,zero,eb8c <__ledf2+0x68>
    eb5c:	5112b03a 	or	r9,r10,r4
    eb60:	4813003a 	cmpeq	r9,r9,zero
    eb64:	4817883a 	mov	r11,r9
    eb68:	40000f26 	beq	r8,zero,eba8 <__ledf2+0x84>
    eb6c:	39c03fcc 	andi	r7,r7,255
    eb70:	58001826 	beq	r11,zero,ebd4 <__ledf2+0xb0>
    eb74:	38000a1e 	bne	r7,zero,eba0 <__ledf2+0x7c>
    eb78:	00bfffc4 	movi	r2,-1
    eb7c:	f800283a 	ret
    eb80:	5112b03a 	or	r9,r10,r4
    eb84:	48000f1e 	bne	r9,zero,ebc4 <__ledf2+0xa0>
    eb88:	40800c26 	beq	r8,r2,ebbc <__ledf2+0x98>
    eb8c:	4000101e 	bne	r8,zero,ebd0 <__ledf2+0xac>
    eb90:	1992b03a 	or	r9,r3,r6
    eb94:	0017883a 	mov	r11,zero
    eb98:	483ff41e 	bne	r9,zero,eb6c <__alt_mem_Flash_flash_data+0xf400eb6c>
    eb9c:	283ff61e 	bne	r5,zero,eb78 <__alt_mem_Flash_flash_data+0xf400eb78>
    eba0:	00800044 	movi	r2,1
    eba4:	f800283a 	ret
    eba8:	1998b03a 	or	r12,r3,r6
    ebac:	603fef1e 	bne	r12,zero,eb6c <__alt_mem_Flash_flash_data+0xf400eb6c>
    ebb0:	483ffa26 	beq	r9,zero,eb9c <__alt_mem_Flash_flash_data+0xf400eb9c>
    ebb4:	0005883a 	mov	r2,zero
    ebb8:	f800283a 	ret
    ebbc:	1992b03a 	or	r9,r3,r6
    ebc0:	48000226 	beq	r9,zero,ebcc <__ledf2+0xa8>
    ebc4:	00800084 	movi	r2,2
    ebc8:	f800283a 	ret
    ebcc:	103fe326 	beq	r2,zero,eb5c <__alt_mem_Flash_flash_data+0xf400eb5c>
    ebd0:	39c03fcc 	andi	r7,r7,255
    ebd4:	29fff11e 	bne	r5,r7,eb9c <__alt_mem_Flash_flash_data+0xf400eb9c>
    ebd8:	40bff016 	blt	r8,r2,eb9c <__alt_mem_Flash_flash_data+0xf400eb9c>
    ebdc:	12000316 	blt	r2,r8,ebec <__ledf2+0xc8>
    ebe0:	1abfee36 	bltu	r3,r10,eb9c <__alt_mem_Flash_flash_data+0xf400eb9c>
    ebe4:	50c00326 	beq	r10,r3,ebf4 <__ledf2+0xd0>
    ebe8:	50fff22e 	bgeu	r10,r3,ebb4 <__alt_mem_Flash_flash_data+0xf400ebb4>
    ebec:	283fe226 	beq	r5,zero,eb78 <__alt_mem_Flash_flash_data+0xf400eb78>
    ebf0:	003feb06 	br	eba0 <__alt_mem_Flash_flash_data+0xf400eba0>
    ebf4:	313fe936 	bltu	r6,r4,eb9c <__alt_mem_Flash_flash_data+0xf400eb9c>
    ebf8:	21bfee2e 	bgeu	r4,r6,ebb4 <__alt_mem_Flash_flash_data+0xf400ebb4>
    ebfc:	283fde26 	beq	r5,zero,eb78 <__alt_mem_Flash_flash_data+0xf400eb78>
    ec00:	003fe706 	br	eba0 <__alt_mem_Flash_flash_data+0xf400eba0>

0000ec04 <__muldf3>:
    ec04:	defff204 	addi	sp,sp,-56
    ec08:	2804d53a 	srli	r2,r5,20
    ec0c:	dd800a15 	stw	r22,40(sp)
    ec10:	282cd7fa 	srli	r22,r5,31
    ec14:	dc000415 	stw	r16,16(sp)
    ec18:	04000434 	movhi	r16,16
    ec1c:	df000c15 	stw	fp,48(sp)
    ec20:	dd000815 	stw	r20,32(sp)
    ec24:	dcc00715 	stw	r19,28(sp)
    ec28:	dc800615 	stw	r18,24(sp)
    ec2c:	dc400515 	stw	r17,20(sp)
    ec30:	843fffc4 	addi	r16,r16,-1
    ec34:	dfc00d15 	stw	ra,52(sp)
    ec38:	ddc00b15 	stw	r23,44(sp)
    ec3c:	dd400915 	stw	r21,36(sp)
    ec40:	1501ffcc 	andi	r20,r2,2047
    ec44:	2023883a 	mov	r17,r4
    ec48:	2025883a 	mov	r18,r4
    ec4c:	2c20703a 	and	r16,r5,r16
    ec50:	b027883a 	mov	r19,r22
    ec54:	b7003fcc 	andi	fp,r22,255
    ec58:	a0005926 	beq	r20,zero,edc0 <__muldf3+0x1bc>
    ec5c:	0081ffc4 	movi	r2,2047
    ec60:	a0803426 	beq	r20,r2,ed34 <__muldf3+0x130>
    ec64:	84000434 	orhi	r16,r16,16
    ec68:	2004d77a 	srli	r2,r4,29
    ec6c:	802090fa 	slli	r16,r16,3
    ec70:	202490fa 	slli	r18,r4,3
    ec74:	a53f0044 	addi	r20,r20,-1023
    ec78:	80a0b03a 	or	r16,r16,r2
    ec7c:	002b883a 	mov	r21,zero
    ec80:	0015883a 	mov	r10,zero
    ec84:	3812d53a 	srli	r9,r7,20
    ec88:	3806d7fa 	srli	r3,r7,31
    ec8c:	02000434 	movhi	r8,16
    ec90:	423fffc4 	addi	r8,r8,-1
    ec94:	4941ffcc 	andi	r5,r9,2047
    ec98:	302f883a 	mov	r23,r6
    ec9c:	3a22703a 	and	r17,r7,r8
    eca0:	1ac03fcc 	andi	r11,r3,255
    eca4:	28006226 	beq	r5,zero,ee30 <__muldf3+0x22c>
    eca8:	0081ffc4 	movi	r2,2047
    ecac:	28805a26 	beq	r5,r2,ee18 <__muldf3+0x214>
    ecb0:	8a000434 	orhi	r8,r17,16
    ecb4:	3004d77a 	srli	r2,r6,29
    ecb8:	401090fa 	slli	r8,r8,3
    ecbc:	302e90fa 	slli	r23,r6,3
    ecc0:	297f0044 	addi	r5,r5,-1023
    ecc4:	40a2b03a 	or	r17,r8,r2
    ecc8:	0013883a 	mov	r9,zero
    eccc:	4d4cb03a 	or	r6,r9,r21
    ecd0:	300c90ba 	slli	r6,r6,2
    ecd4:	02000074 	movhi	r8,1
    ecd8:	423b3d04 	addi	r8,r8,-4876
    ecdc:	320d883a 	add	r6,r6,r8
    ece0:	31800017 	ldw	r6,0(r6)
    ece4:	a14b883a 	add	r5,r20,r5
    ece8:	1dacf03a 	xor	r22,r3,r22
    ecec:	2b000044 	addi	r12,r5,1
    ecf0:	3000683a 	jmp	r6
    ecf4:	0000ef30 	cmpltui	zero,zero,956
    ecf8:	0000ef1c 	xori	zero,zero,956
    ecfc:	0000ef1c 	xori	zero,zero,956
    ed00:	0000ef08 	cmpgei	zero,zero,956
    ed04:	0000ed50 	cmplti	zero,zero,949
    ed08:	0000ed50 	cmplti	zero,zero,949
    ed0c:	0000eef0 	cmpltui	zero,zero,955
    ed10:	0000ef08 	cmpgei	zero,zero,956
    ed14:	0000ed50 	cmplti	zero,zero,949
    ed18:	0000eef0 	cmpltui	zero,zero,955
    ed1c:	0000ed50 	cmplti	zero,zero,949
    ed20:	0000ef08 	cmpgei	zero,zero,956
    ed24:	0000ed54 	movui	zero,949
    ed28:	0000ed54 	movui	zero,949
    ed2c:	0000ed54 	movui	zero,949
    ed30:	0000f12c 	andhi	zero,zero,964
    ed34:	8104b03a 	or	r2,r16,r4
    ed38:	10006a1e 	bne	r2,zero,eee4 <__muldf3+0x2e0>
    ed3c:	05400204 	movi	r21,8
    ed40:	0021883a 	mov	r16,zero
    ed44:	0025883a 	mov	r18,zero
    ed48:	02800084 	movi	r10,2
    ed4c:	003fcd06 	br	ec84 <__alt_mem_Flash_flash_data+0xf400ec84>
    ed50:	b039883a 	mov	fp,r22
    ed54:	00800084 	movi	r2,2
    ed58:	50804e1e 	bne	r10,r2,ee94 <__muldf3+0x290>
    ed5c:	e4c0004c 	andi	r19,fp,1
    ed60:	0101ffc4 	movi	r4,2047
    ed64:	0021883a 	mov	r16,zero
    ed68:	0025883a 	mov	r18,zero
    ed6c:	2008953a 	slli	r4,r4,20
    ed70:	98c03fcc 	andi	r3,r19,255
    ed74:	01400434 	movhi	r5,16
    ed78:	297fffc4 	addi	r5,r5,-1
    ed7c:	180697fa 	slli	r3,r3,31
    ed80:	8160703a 	and	r16,r16,r5
    ed84:	8120b03a 	or	r16,r16,r4
    ed88:	80c6b03a 	or	r3,r16,r3
    ed8c:	9005883a 	mov	r2,r18
    ed90:	dfc00d17 	ldw	ra,52(sp)
    ed94:	df000c17 	ldw	fp,48(sp)
    ed98:	ddc00b17 	ldw	r23,44(sp)
    ed9c:	dd800a17 	ldw	r22,40(sp)
    eda0:	dd400917 	ldw	r21,36(sp)
    eda4:	dd000817 	ldw	r20,32(sp)
    eda8:	dcc00717 	ldw	r19,28(sp)
    edac:	dc800617 	ldw	r18,24(sp)
    edb0:	dc400517 	ldw	r17,20(sp)
    edb4:	dc000417 	ldw	r16,16(sp)
    edb8:	dec00e04 	addi	sp,sp,56
    edbc:	f800283a 	ret
    edc0:	8104b03a 	or	r2,r16,r4
    edc4:	10004226 	beq	r2,zero,eed0 <__muldf3+0x2cc>
    edc8:	8000f926 	beq	r16,zero,f1b0 <__muldf3+0x5ac>
    edcc:	8009883a 	mov	r4,r16
    edd0:	d9800315 	stw	r6,12(sp)
    edd4:	d9c00015 	stw	r7,0(sp)
    edd8:	000fdf40 	call	fdf4 <__clzsi2>
    eddc:	d9800317 	ldw	r6,12(sp)
    ede0:	d9c00017 	ldw	r7,0(sp)
    ede4:	1007883a 	mov	r3,r2
    ede8:	01000a04 	movi	r4,40
    edec:	18bffe04 	addi	r2,r3,-8
    edf0:	20c9c83a 	sub	r4,r4,r3
    edf4:	80a0983a 	sll	r16,r16,r2
    edf8:	8908d83a 	srl	r4,r17,r4
    edfc:	88a4983a 	sll	r18,r17,r2
    ee00:	2420b03a 	or	r16,r4,r16
    ee04:	017f0344 	movi	r5,-1011
    ee08:	28e9c83a 	sub	r20,r5,r3
    ee0c:	002b883a 	mov	r21,zero
    ee10:	0015883a 	mov	r10,zero
    ee14:	003f9b06 	br	ec84 <__alt_mem_Flash_flash_data+0xf400ec84>
    ee18:	8984b03a 	or	r2,r17,r6
    ee1c:	10002a1e 	bne	r2,zero,eec8 <__muldf3+0x2c4>
    ee20:	0023883a 	mov	r17,zero
    ee24:	002f883a 	mov	r23,zero
    ee28:	02400084 	movi	r9,2
    ee2c:	003fa706 	br	eccc <__alt_mem_Flash_flash_data+0xf400eccc>
    ee30:	8984b03a 	or	r2,r17,r6
    ee34:	10002026 	beq	r2,zero,eeb8 <__muldf3+0x2b4>
    ee38:	8800cc26 	beq	r17,zero,f16c <__muldf3+0x568>
    ee3c:	8809883a 	mov	r4,r17
    ee40:	d8c00215 	stw	r3,8(sp)
    ee44:	d9800315 	stw	r6,12(sp)
    ee48:	da800015 	stw	r10,0(sp)
    ee4c:	dac00115 	stw	r11,4(sp)
    ee50:	000fdf40 	call	fdf4 <__clzsi2>
    ee54:	d8c00217 	ldw	r3,8(sp)
    ee58:	d9800317 	ldw	r6,12(sp)
    ee5c:	da800017 	ldw	r10,0(sp)
    ee60:	dac00117 	ldw	r11,4(sp)
    ee64:	1009883a 	mov	r4,r2
    ee68:	01400a04 	movi	r5,40
    ee6c:	25fffe04 	addi	r23,r4,-8
    ee70:	290bc83a 	sub	r5,r5,r4
    ee74:	8dd0983a 	sll	r8,r17,r23
    ee78:	314ad83a 	srl	r5,r6,r5
    ee7c:	35ee983a 	sll	r23,r6,r23
    ee80:	2a22b03a 	or	r17,r5,r8
    ee84:	017f0344 	movi	r5,-1011
    ee88:	290bc83a 	sub	r5,r5,r4
    ee8c:	0013883a 	mov	r9,zero
    ee90:	003f8e06 	br	eccc <__alt_mem_Flash_flash_data+0xf400eccc>
    ee94:	008000c4 	movi	r2,3
    ee98:	50811d26 	beq	r10,r2,f310 <__muldf3+0x70c>
    ee9c:	00800044 	movi	r2,1
    eea0:	5080e01e 	bne	r10,r2,f224 <__muldf3+0x620>
    eea4:	e0a6703a 	and	r19,fp,r2
    eea8:	0009883a 	mov	r4,zero
    eeac:	0021883a 	mov	r16,zero
    eeb0:	0025883a 	mov	r18,zero
    eeb4:	003fad06 	br	ed6c <__alt_mem_Flash_flash_data+0xf400ed6c>
    eeb8:	0023883a 	mov	r17,zero
    eebc:	002f883a 	mov	r23,zero
    eec0:	02400044 	movi	r9,1
    eec4:	003f8106 	br	eccc <__alt_mem_Flash_flash_data+0xf400eccc>
    eec8:	024000c4 	movi	r9,3
    eecc:	003f7f06 	br	eccc <__alt_mem_Flash_flash_data+0xf400eccc>
    eed0:	05400104 	movi	r21,4
    eed4:	0021883a 	mov	r16,zero
    eed8:	0025883a 	mov	r18,zero
    eedc:	02800044 	movi	r10,1
    eee0:	003f6806 	br	ec84 <__alt_mem_Flash_flash_data+0xf400ec84>
    eee4:	05400304 	movi	r21,12
    eee8:	028000c4 	movi	r10,3
    eeec:	003f6506 	br	ec84 <__alt_mem_Flash_flash_data+0xf400ec84>
    eef0:	04000434 	movhi	r16,16
    eef4:	0027883a 	mov	r19,zero
    eef8:	843fffc4 	addi	r16,r16,-1
    eefc:	04bfffc4 	movi	r18,-1
    ef00:	0101ffc4 	movi	r4,2047
    ef04:	003f9906 	br	ed6c <__alt_mem_Flash_flash_data+0xf400ed6c>
    ef08:	8821883a 	mov	r16,r17
    ef0c:	b825883a 	mov	r18,r23
    ef10:	5839883a 	mov	fp,r11
    ef14:	4815883a 	mov	r10,r9
    ef18:	003f8e06 	br	ed54 <__alt_mem_Flash_flash_data+0xf400ed54>
    ef1c:	8821883a 	mov	r16,r17
    ef20:	b825883a 	mov	r18,r23
    ef24:	b039883a 	mov	fp,r22
    ef28:	4815883a 	mov	r10,r9
    ef2c:	003f8906 	br	ed54 <__alt_mem_Flash_flash_data+0xf400ed54>
    ef30:	b80cd43a 	srli	r6,r23,16
    ef34:	9006d43a 	srli	r3,r18,16
    ef38:	90bfffcc 	andi	r2,r18,65535
    ef3c:	bdffffcc 	andi	r23,r23,65535
    ef40:	b891383a 	mul	r8,r23,r2
    ef44:	b8c9383a 	mul	r4,r23,r3
    ef48:	309b383a 	mul	r13,r6,r2
    ef4c:	400ed43a 	srli	r7,r8,16
    ef50:	30df383a 	mul	r15,r6,r3
    ef54:	235b883a 	add	r13,r4,r13
    ef58:	69db883a 	add	r13,r13,r7
    ef5c:	6900022e 	bgeu	r13,r4,ef68 <__muldf3+0x364>
    ef60:	01000074 	movhi	r4,1
    ef64:	791f883a 	add	r15,r15,r4
    ef68:	8828d43a 	srli	r20,r17,16
    ef6c:	8c7fffcc 	andi	r17,r17,65535
    ef70:	888f383a 	mul	r7,r17,r2
    ef74:	88d3383a 	mul	r9,r17,r3
    ef78:	a0a5383a 	mul	r18,r20,r2
    ef7c:	3816d43a 	srli	r11,r7,16
    ef80:	6814943a 	slli	r10,r13,16
    ef84:	4ca5883a 	add	r18,r9,r18
    ef88:	423fffcc 	andi	r8,r8,65535
    ef8c:	92e5883a 	add	r18,r18,r11
    ef90:	6808d43a 	srli	r4,r13,16
    ef94:	5215883a 	add	r10,r10,r8
    ef98:	a0c7383a 	mul	r3,r20,r3
    ef9c:	9240022e 	bgeu	r18,r9,efa8 <__muldf3+0x3a4>
    efa0:	00800074 	movhi	r2,1
    efa4:	1887883a 	add	r3,r3,r2
    efa8:	802ad43a 	srli	r21,r16,16
    efac:	80bfffcc 	andi	r2,r16,65535
    efb0:	b893383a 	mul	r9,r23,r2
    efb4:	3091383a 	mul	r8,r6,r2
    efb8:	bd6f383a 	mul	r23,r23,r21
    efbc:	9026943a 	slli	r19,r18,16
    efc0:	481ad43a 	srli	r13,r9,16
    efc4:	9024d43a 	srli	r18,r18,16
    efc8:	39ffffcc 	andi	r7,r7,65535
    efcc:	ba11883a 	add	r8,r23,r8
    efd0:	99e7883a 	add	r19,r19,r7
    efd4:	4351883a 	add	r8,r8,r13
    efd8:	1c97883a 	add	r11,r3,r18
    efdc:	354d383a 	mul	r6,r6,r21
    efe0:	9925883a 	add	r18,r19,r4
    efe4:	45c0022e 	bgeu	r8,r23,eff0 <__muldf3+0x3ec>
    efe8:	00c00074 	movhi	r3,1
    efec:	30cd883a 	add	r6,r6,r3
    eff0:	8889383a 	mul	r4,r17,r2
    eff4:	8d63383a 	mul	r17,r17,r21
    eff8:	a085383a 	mul	r2,r20,r2
    effc:	200ed43a 	srli	r7,r4,16
    f000:	401cd43a 	srli	r14,r8,16
    f004:	401a943a 	slli	r13,r8,16
    f008:	8885883a 	add	r2,r17,r2
    f00c:	4a3fffcc 	andi	r8,r9,65535
    f010:	11c5883a 	add	r2,r2,r7
    f014:	339d883a 	add	r14,r6,r14
    f018:	6a11883a 	add	r8,r13,r8
    f01c:	a561383a 	mul	r16,r20,r21
    f020:	1440022e 	bgeu	r2,r17,f02c <__muldf3+0x428>
    f024:	00c00074 	movhi	r3,1
    f028:	80e1883a 	add	r16,r16,r3
    f02c:	1006943a 	slli	r3,r2,16
    f030:	213fffcc 	andi	r4,r4,65535
    f034:	93db883a 	add	r13,r18,r15
    f038:	1909883a 	add	r4,r3,r4
    f03c:	22c7883a 	add	r3,r4,r11
    f040:	6cd3803a 	cmpltu	r9,r13,r19
    f044:	6a09883a 	add	r4,r13,r8
    f048:	1a5b883a 	add	r13,r3,r9
    f04c:	2211803a 	cmpltu	r8,r4,r8
    f050:	734d883a 	add	r6,r14,r13
    f054:	100ed43a 	srli	r7,r2,16
    f058:	6a53803a 	cmpltu	r9,r13,r9
    f05c:	3205883a 	add	r2,r6,r8
    f060:	1ac7803a 	cmpltu	r3,r3,r11
    f064:	1211803a 	cmpltu	r8,r2,r8
    f068:	48c6b03a 	or	r3,r9,r3
    f06c:	338d803a 	cmpltu	r6,r6,r14
    f070:	19c7883a 	add	r3,r3,r7
    f074:	418cb03a 	or	r6,r8,r6
    f078:	1987883a 	add	r3,r3,r6
    f07c:	2024927a 	slli	r18,r4,9
    f080:	1c07883a 	add	r3,r3,r16
    f084:	1806927a 	slli	r3,r3,9
    f088:	1020d5fa 	srli	r16,r2,23
    f08c:	2008d5fa 	srli	r4,r4,23
    f090:	9294b03a 	or	r10,r18,r10
    f094:	1004927a 	slli	r2,r2,9
    f098:	5024c03a 	cmpne	r18,r10,zero
    f09c:	1c20b03a 	or	r16,r3,r16
    f0a0:	9108b03a 	or	r4,r18,r4
    f0a4:	80c0402c 	andhi	r3,r16,256
    f0a8:	20a4b03a 	or	r18,r4,r2
    f0ac:	18000726 	beq	r3,zero,f0cc <__muldf3+0x4c8>
    f0b0:	9006d07a 	srli	r3,r18,1
    f0b4:	800897fa 	slli	r4,r16,31
    f0b8:	9080004c 	andi	r2,r18,1
    f0bc:	8020d07a 	srli	r16,r16,1
    f0c0:	10c4b03a 	or	r2,r2,r3
    f0c4:	1124b03a 	or	r18,r2,r4
    f0c8:	600b883a 	mov	r5,r12
    f0cc:	2900ffc4 	addi	r4,r5,1023
    f0d0:	01004b0e 	bge	zero,r4,f200 <__muldf3+0x5fc>
    f0d4:	908001cc 	andi	r2,r18,7
    f0d8:	10000726 	beq	r2,zero,f0f8 <__muldf3+0x4f4>
    f0dc:	90c003cc 	andi	r3,r18,15
    f0e0:	00800104 	movi	r2,4
    f0e4:	18800426 	beq	r3,r2,f0f8 <__muldf3+0x4f4>
    f0e8:	9087883a 	add	r3,r18,r2
    f0ec:	1c85803a 	cmpltu	r2,r3,r18
    f0f0:	80a1883a 	add	r16,r16,r2
    f0f4:	1825883a 	mov	r18,r3
    f0f8:	8080402c 	andhi	r2,r16,256
    f0fc:	10000426 	beq	r2,zero,f110 <__muldf3+0x50c>
    f100:	00bfc034 	movhi	r2,65280
    f104:	10bfffc4 	addi	r2,r2,-1
    f108:	29010004 	addi	r4,r5,1024
    f10c:	80a0703a 	and	r16,r16,r2
    f110:	0081ff84 	movi	r2,2046
    f114:	1100320e 	bge	r2,r4,f1e0 <__muldf3+0x5dc>
    f118:	b4c0004c 	andi	r19,r22,1
    f11c:	0101ffc4 	movi	r4,2047
    f120:	0021883a 	mov	r16,zero
    f124:	0025883a 	mov	r18,zero
    f128:	003f1006 	br	ed6c <__alt_mem_Flash_flash_data+0xf400ed6c>
    f12c:	8080022c 	andhi	r2,r16,8
    f130:	10000926 	beq	r2,zero,f158 <__muldf3+0x554>
    f134:	8880022c 	andhi	r2,r17,8
    f138:	1000071e 	bne	r2,zero,f158 <__muldf3+0x554>
    f13c:	00800434 	movhi	r2,16
    f140:	8c000234 	orhi	r16,r17,8
    f144:	10bfffc4 	addi	r2,r2,-1
    f148:	1827883a 	mov	r19,r3
    f14c:	80a0703a 	and	r16,r16,r2
    f150:	b825883a 	mov	r18,r23
    f154:	003f6a06 	br	ef00 <__alt_mem_Flash_flash_data+0xf400ef00>
    f158:	00800434 	movhi	r2,16
    f15c:	84000234 	orhi	r16,r16,8
    f160:	10bfffc4 	addi	r2,r2,-1
    f164:	80a0703a 	and	r16,r16,r2
    f168:	003f6506 	br	ef00 <__alt_mem_Flash_flash_data+0xf400ef00>
    f16c:	3009883a 	mov	r4,r6
    f170:	d8c00215 	stw	r3,8(sp)
    f174:	d9800315 	stw	r6,12(sp)
    f178:	da800015 	stw	r10,0(sp)
    f17c:	dac00115 	stw	r11,4(sp)
    f180:	000fdf40 	call	fdf4 <__clzsi2>
    f184:	11000804 	addi	r4,r2,32
    f188:	014009c4 	movi	r5,39
    f18c:	d8c00217 	ldw	r3,8(sp)
    f190:	d9800317 	ldw	r6,12(sp)
    f194:	da800017 	ldw	r10,0(sp)
    f198:	dac00117 	ldw	r11,4(sp)
    f19c:	293f320e 	bge	r5,r4,ee68 <__alt_mem_Flash_flash_data+0xf400ee68>
    f1a0:	10bffe04 	addi	r2,r2,-8
    f1a4:	b8a2983a 	sll	r17,r23,r2
    f1a8:	002f883a 	mov	r23,zero
    f1ac:	003f3506 	br	ee84 <__alt_mem_Flash_flash_data+0xf400ee84>
    f1b0:	d9800315 	stw	r6,12(sp)
    f1b4:	d9c00015 	stw	r7,0(sp)
    f1b8:	000fdf40 	call	fdf4 <__clzsi2>
    f1bc:	10c00804 	addi	r3,r2,32
    f1c0:	010009c4 	movi	r4,39
    f1c4:	d9800317 	ldw	r6,12(sp)
    f1c8:	d9c00017 	ldw	r7,0(sp)
    f1cc:	20ff060e 	bge	r4,r3,ede8 <__alt_mem_Flash_flash_data+0xf400ede8>
    f1d0:	10bffe04 	addi	r2,r2,-8
    f1d4:	88a0983a 	sll	r16,r17,r2
    f1d8:	0025883a 	mov	r18,zero
    f1dc:	003f0906 	br	ee04 <__alt_mem_Flash_flash_data+0xf400ee04>
    f1e0:	9004d0fa 	srli	r2,r18,3
    f1e4:	8024977a 	slli	r18,r16,29
    f1e8:	8020927a 	slli	r16,r16,9
    f1ec:	2101ffcc 	andi	r4,r4,2047
    f1f0:	90a4b03a 	or	r18,r18,r2
    f1f4:	8020d33a 	srli	r16,r16,12
    f1f8:	b4c0004c 	andi	r19,r22,1
    f1fc:	003edb06 	br	ed6c <__alt_mem_Flash_flash_data+0xf400ed6c>
    f200:	00ff0084 	movi	r3,-1022
    f204:	1947c83a 	sub	r3,r3,r5
    f208:	00800e04 	movi	r2,56
    f20c:	10c0080e 	bge	r2,r3,f230 <__muldf3+0x62c>
    f210:	b4c0004c 	andi	r19,r22,1
    f214:	0009883a 	mov	r4,zero
    f218:	0021883a 	mov	r16,zero
    f21c:	0025883a 	mov	r18,zero
    f220:	003ed206 	br	ed6c <__alt_mem_Flash_flash_data+0xf400ed6c>
    f224:	600b883a 	mov	r5,r12
    f228:	e02d883a 	mov	r22,fp
    f22c:	003fa706 	br	f0cc <__alt_mem_Flash_flash_data+0xf400f0cc>
    f230:	008007c4 	movi	r2,31
    f234:	10c01816 	blt	r2,r3,f298 <__muldf3+0x694>
    f238:	29410784 	addi	r5,r5,1054
    f23c:	8144983a 	sll	r2,r16,r5
    f240:	90c8d83a 	srl	r4,r18,r3
    f244:	914a983a 	sll	r5,r18,r5
    f248:	80c6d83a 	srl	r3,r16,r3
    f24c:	2088b03a 	or	r4,r4,r2
    f250:	2804c03a 	cmpne	r2,r5,zero
    f254:	2084b03a 	or	r2,r4,r2
    f258:	110001cc 	andi	r4,r2,7
    f25c:	20000726 	beq	r4,zero,f27c <__muldf3+0x678>
    f260:	114003cc 	andi	r5,r2,15
    f264:	01000104 	movi	r4,4
    f268:	29000426 	beq	r5,r4,f27c <__muldf3+0x678>
    f26c:	11000104 	addi	r4,r2,4
    f270:	2085803a 	cmpltu	r2,r4,r2
    f274:	1887883a 	add	r3,r3,r2
    f278:	2005883a 	mov	r2,r4
    f27c:	1900202c 	andhi	r4,r3,128
    f280:	20001826 	beq	r4,zero,f2e4 <__muldf3+0x6e0>
    f284:	b4c0004c 	andi	r19,r22,1
    f288:	01000044 	movi	r4,1
    f28c:	0021883a 	mov	r16,zero
    f290:	0025883a 	mov	r18,zero
    f294:	003eb506 	br	ed6c <__alt_mem_Flash_flash_data+0xf400ed6c>
    f298:	00bef884 	movi	r2,-1054
    f29c:	1145c83a 	sub	r2,r2,r5
    f2a0:	8088d83a 	srl	r4,r16,r2
    f2a4:	00800804 	movi	r2,32
    f2a8:	18801726 	beq	r3,r2,f308 <__muldf3+0x704>
    f2ac:	28810f84 	addi	r2,r5,1086
    f2b0:	8084983a 	sll	r2,r16,r2
    f2b4:	1484b03a 	or	r2,r2,r18
    f2b8:	1004c03a 	cmpne	r2,r2,zero
    f2bc:	1104b03a 	or	r2,r2,r4
    f2c0:	10c001cc 	andi	r3,r2,7
    f2c4:	18000b1e 	bne	r3,zero,f2f4 <__muldf3+0x6f0>
    f2c8:	0021883a 	mov	r16,zero
    f2cc:	1004d0fa 	srli	r2,r2,3
    f2d0:	b4c0004c 	andi	r19,r22,1
    f2d4:	0009883a 	mov	r4,zero
    f2d8:	10e4b03a 	or	r18,r2,r3
    f2dc:	003ea306 	br	ed6c <__alt_mem_Flash_flash_data+0xf400ed6c>
    f2e0:	0007883a 	mov	r3,zero
    f2e4:	1820927a 	slli	r16,r3,9
    f2e8:	1806977a 	slli	r3,r3,29
    f2ec:	8020d33a 	srli	r16,r16,12
    f2f0:	003ff606 	br	f2cc <__alt_mem_Flash_flash_data+0xf400f2cc>
    f2f4:	110003cc 	andi	r4,r2,15
    f2f8:	00c00104 	movi	r3,4
    f2fc:	20fff826 	beq	r4,r3,f2e0 <__alt_mem_Flash_flash_data+0xf400f2e0>
    f300:	0007883a 	mov	r3,zero
    f304:	003fd906 	br	f26c <__alt_mem_Flash_flash_data+0xf400f26c>
    f308:	0005883a 	mov	r2,zero
    f30c:	003fe906 	br	f2b4 <__alt_mem_Flash_flash_data+0xf400f2b4>
    f310:	00800434 	movhi	r2,16
    f314:	84000234 	orhi	r16,r16,8
    f318:	10bfffc4 	addi	r2,r2,-1
    f31c:	e4c0004c 	andi	r19,fp,1
    f320:	80a0703a 	and	r16,r16,r2
    f324:	003ef606 	br	ef00 <__alt_mem_Flash_flash_data+0xf400ef00>

0000f328 <__subdf3>:
    f328:	00c00434 	movhi	r3,16
    f32c:	18ffffc4 	addi	r3,r3,-1
    f330:	defffb04 	addi	sp,sp,-20
    f334:	28d2703a 	and	r9,r5,r3
    f338:	3814d53a 	srli	r10,r7,20
    f33c:	38c6703a 	and	r3,r7,r3
    f340:	3004d77a 	srli	r2,r6,29
    f344:	dc800215 	stw	r18,8(sp)
    f348:	dc000015 	stw	r16,0(sp)
    f34c:	2824d7fa 	srli	r18,r5,31
    f350:	2820d53a 	srli	r16,r5,20
    f354:	481290fa 	slli	r9,r9,3
    f358:	200ad77a 	srli	r5,r4,29
    f35c:	180690fa 	slli	r3,r3,3
    f360:	dc400115 	stw	r17,4(sp)
    f364:	dfc00415 	stw	ra,16(sp)
    f368:	202290fa 	slli	r17,r4,3
    f36c:	dcc00315 	stw	r19,12(sp)
    f370:	5281ffcc 	andi	r10,r10,2047
    f374:	0101ffc4 	movi	r4,2047
    f378:	9011883a 	mov	r8,r18
    f37c:	8401ffcc 	andi	r16,r16,2047
    f380:	94803fcc 	andi	r18,r18,255
    f384:	494ab03a 	or	r5,r9,r5
    f388:	380ed7fa 	srli	r7,r7,31
    f38c:	1886b03a 	or	r3,r3,r2
    f390:	300c90fa 	slli	r6,r6,3
    f394:	51009026 	beq	r10,r4,f5d8 <__subdf3+0x2b0>
    f398:	39c0005c 	xori	r7,r7,1
    f39c:	8285c83a 	sub	r2,r16,r10
    f3a0:	91c06f26 	beq	r18,r7,f560 <__subdf3+0x238>
    f3a4:	0080b10e 	bge	zero,r2,f66c <__subdf3+0x344>
    f3a8:	50002a1e 	bne	r10,zero,f454 <__subdf3+0x12c>
    f3ac:	1988b03a 	or	r4,r3,r6
    f3b0:	2000941e 	bne	r4,zero,f604 <__subdf3+0x2dc>
    f3b4:	888001cc 	andi	r2,r17,7
    f3b8:	10005b26 	beq	r2,zero,f528 <__subdf3+0x200>
    f3bc:	88c003cc 	andi	r3,r17,15
    f3c0:	00800104 	movi	r2,4
    f3c4:	18805826 	beq	r3,r2,f528 <__subdf3+0x200>
    f3c8:	88c00104 	addi	r3,r17,4
    f3cc:	1c63803a 	cmpltu	r17,r3,r17
    f3d0:	2c4b883a 	add	r5,r5,r17
    f3d4:	2880202c 	andhi	r2,r5,128
    f3d8:	9200004c 	andi	r8,r18,1
    f3dc:	1823883a 	mov	r17,r3
    f3e0:	10005426 	beq	r2,zero,f534 <__subdf3+0x20c>
    f3e4:	84000044 	addi	r16,r16,1
    f3e8:	0081ffc4 	movi	r2,2047
    f3ec:	8080bf26 	beq	r16,r2,f6ec <__subdf3+0x3c4>
    f3f0:	013fe034 	movhi	r4,65408
    f3f4:	213fffc4 	addi	r4,r4,-1
    f3f8:	290a703a 	and	r5,r5,r4
    f3fc:	2804977a 	slli	r2,r5,29
    f400:	280a927a 	slli	r5,r5,9
    f404:	8822d0fa 	srli	r17,r17,3
    f408:	8401ffcc 	andi	r16,r16,2047
    f40c:	2808d33a 	srli	r4,r5,12
    f410:	1444b03a 	or	r2,r2,r17
    f414:	8401ffcc 	andi	r16,r16,2047
    f418:	800a953a 	slli	r5,r16,20
    f41c:	40c03fcc 	andi	r3,r8,255
    f420:	04000434 	movhi	r16,16
    f424:	180697fa 	slli	r3,r3,31
    f428:	843fffc4 	addi	r16,r16,-1
    f42c:	2420703a 	and	r16,r4,r16
    f430:	8160b03a 	or	r16,r16,r5
    f434:	80c6b03a 	or	r3,r16,r3
    f438:	dfc00417 	ldw	ra,16(sp)
    f43c:	dcc00317 	ldw	r19,12(sp)
    f440:	dc800217 	ldw	r18,8(sp)
    f444:	dc400117 	ldw	r17,4(sp)
    f448:	dc000017 	ldw	r16,0(sp)
    f44c:	dec00504 	addi	sp,sp,20
    f450:	f800283a 	ret
    f454:	0101ffc4 	movi	r4,2047
    f458:	813fd626 	beq	r16,r4,f3b4 <__alt_mem_Flash_flash_data+0xf400f3b4>
    f45c:	18c02034 	orhi	r3,r3,128
    f460:	01000e04 	movi	r4,56
    f464:	2080a416 	blt	r4,r2,f6f8 <__subdf3+0x3d0>
    f468:	010007c4 	movi	r4,31
    f46c:	2080c716 	blt	r4,r2,f78c <__subdf3+0x464>
    f470:	01000804 	movi	r4,32
    f474:	2089c83a 	sub	r4,r4,r2
    f478:	1910983a 	sll	r8,r3,r4
    f47c:	308ed83a 	srl	r7,r6,r2
    f480:	3108983a 	sll	r4,r6,r4
    f484:	1884d83a 	srl	r2,r3,r2
    f488:	41ccb03a 	or	r6,r8,r7
    f48c:	2008c03a 	cmpne	r4,r4,zero
    f490:	310cb03a 	or	r6,r6,r4
    f494:	898dc83a 	sub	r6,r17,r6
    f498:	89a3803a 	cmpltu	r17,r17,r6
    f49c:	288bc83a 	sub	r5,r5,r2
    f4a0:	2c4bc83a 	sub	r5,r5,r17
    f4a4:	3023883a 	mov	r17,r6
    f4a8:	2880202c 	andhi	r2,r5,128
    f4ac:	10006b26 	beq	r2,zero,f65c <__subdf3+0x334>
    f4b0:	04c02034 	movhi	r19,128
    f4b4:	9cffffc4 	addi	r19,r19,-1
    f4b8:	2ce6703a 	and	r19,r5,r19
    f4bc:	98007c26 	beq	r19,zero,f6b0 <__subdf3+0x388>
    f4c0:	9809883a 	mov	r4,r19
    f4c4:	000fdf40 	call	fdf4 <__clzsi2>
    f4c8:	10fffe04 	addi	r3,r2,-8
    f4cc:	010007c4 	movi	r4,31
    f4d0:	20c07d16 	blt	r4,r3,f6c8 <__subdf3+0x3a0>
    f4d4:	01400a04 	movi	r5,40
    f4d8:	2885c83a 	sub	r2,r5,r2
    f4dc:	888ad83a 	srl	r5,r17,r2
    f4e0:	98e6983a 	sll	r19,r19,r3
    f4e4:	88e2983a 	sll	r17,r17,r3
    f4e8:	2ce6b03a 	or	r19,r5,r19
    f4ec:	1c007a16 	blt	r3,r16,f6d8 <__subdf3+0x3b0>
    f4f0:	1c21c83a 	sub	r16,r3,r16
    f4f4:	81400044 	addi	r5,r16,1
    f4f8:	00c007c4 	movi	r3,31
    f4fc:	19409616 	blt	r3,r5,f758 <__subdf3+0x430>
    f500:	1c21c83a 	sub	r16,r3,r16
    f504:	8c08983a 	sll	r4,r17,r16
    f508:	8946d83a 	srl	r3,r17,r5
    f50c:	9c20983a 	sll	r16,r19,r16
    f510:	2008c03a 	cmpne	r4,r4,zero
    f514:	994ad83a 	srl	r5,r19,r5
    f518:	1c06b03a 	or	r3,r3,r16
    f51c:	1922b03a 	or	r17,r3,r4
    f520:	0021883a 	mov	r16,zero
    f524:	003fa306 	br	f3b4 <__alt_mem_Flash_flash_data+0xf400f3b4>
    f528:	2880202c 	andhi	r2,r5,128
    f52c:	9200004c 	andi	r8,r18,1
    f530:	103fac1e 	bne	r2,zero,f3e4 <__alt_mem_Flash_flash_data+0xf400f3e4>
    f534:	2804977a 	slli	r2,r5,29
    f538:	8822d0fa 	srli	r17,r17,3
    f53c:	00c1ffc4 	movi	r3,2047
    f540:	280ad0fa 	srli	r5,r5,3
    f544:	1444b03a 	or	r2,r2,r17
    f548:	80c02726 	beq	r16,r3,f5e8 <__subdf3+0x2c0>
    f54c:	01000434 	movhi	r4,16
    f550:	213fffc4 	addi	r4,r4,-1
    f554:	80e0703a 	and	r16,r16,r3
    f558:	2908703a 	and	r4,r5,r4
    f55c:	003fad06 	br	f414 <__alt_mem_Flash_flash_data+0xf400f414>
    f560:	0080690e 	bge	zero,r2,f708 <__subdf3+0x3e0>
    f564:	50002f26 	beq	r10,zero,f624 <__subdf3+0x2fc>
    f568:	0101ffc4 	movi	r4,2047
    f56c:	813f9126 	beq	r16,r4,f3b4 <__alt_mem_Flash_flash_data+0xf400f3b4>
    f570:	18c02034 	orhi	r3,r3,128
    f574:	01000e04 	movi	r4,56
    f578:	2080b00e 	bge	r4,r2,f83c <__subdf3+0x514>
    f57c:	198cb03a 	or	r6,r3,r6
    f580:	300ec03a 	cmpne	r7,r6,zero
    f584:	0005883a 	mov	r2,zero
    f588:	3c4f883a 	add	r7,r7,r17
    f58c:	3c63803a 	cmpltu	r17,r7,r17
    f590:	114b883a 	add	r5,r2,r5
    f594:	2c4b883a 	add	r5,r5,r17
    f598:	3823883a 	mov	r17,r7
    f59c:	2880202c 	andhi	r2,r5,128
    f5a0:	10002e26 	beq	r2,zero,f65c <__subdf3+0x334>
    f5a4:	84000044 	addi	r16,r16,1
    f5a8:	0081ffc4 	movi	r2,2047
    f5ac:	8080de26 	beq	r16,r2,f928 <__subdf3+0x600>
    f5b0:	00bfe034 	movhi	r2,65408
    f5b4:	10bfffc4 	addi	r2,r2,-1
    f5b8:	288a703a 	and	r5,r5,r2
    f5bc:	880cd07a 	srli	r6,r17,1
    f5c0:	280897fa 	slli	r4,r5,31
    f5c4:	88c0004c 	andi	r3,r17,1
    f5c8:	30e2b03a 	or	r17,r6,r3
    f5cc:	280ad07a 	srli	r5,r5,1
    f5d0:	8922b03a 	or	r17,r17,r4
    f5d4:	003f7706 	br	f3b4 <__alt_mem_Flash_flash_data+0xf400f3b4>
    f5d8:	1984b03a 	or	r2,r3,r6
    f5dc:	103f6e26 	beq	r2,zero,f398 <__alt_mem_Flash_flash_data+0xf400f398>
    f5e0:	39c03fcc 	andi	r7,r7,255
    f5e4:	003f6d06 	br	f39c <__alt_mem_Flash_flash_data+0xf400f39c>
    f5e8:	1146b03a 	or	r3,r2,r5
    f5ec:	18003f26 	beq	r3,zero,f6ec <__subdf3+0x3c4>
    f5f0:	00c00434 	movhi	r3,16
    f5f4:	29000234 	orhi	r4,r5,8
    f5f8:	18ffffc4 	addi	r3,r3,-1
    f5fc:	20c8703a 	and	r4,r4,r3
    f600:	003f8406 	br	f414 <__alt_mem_Flash_flash_data+0xf400f414>
    f604:	10bfffc4 	addi	r2,r2,-1
    f608:	1000501e 	bne	r2,zero,f74c <__subdf3+0x424>
    f60c:	898fc83a 	sub	r7,r17,r6
    f610:	89e3803a 	cmpltu	r17,r17,r7
    f614:	28cbc83a 	sub	r5,r5,r3
    f618:	2c4bc83a 	sub	r5,r5,r17
    f61c:	3823883a 	mov	r17,r7
    f620:	003fa106 	br	f4a8 <__alt_mem_Flash_flash_data+0xf400f4a8>
    f624:	1988b03a 	or	r4,r3,r6
    f628:	203f6226 	beq	r4,zero,f3b4 <__alt_mem_Flash_flash_data+0xf400f3b4>
    f62c:	10bfffc4 	addi	r2,r2,-1
    f630:	10009b1e 	bne	r2,zero,f8a0 <__subdf3+0x578>
    f634:	344d883a 	add	r6,r6,r17
    f638:	3463803a 	cmpltu	r17,r6,r17
    f63c:	194b883a 	add	r5,r3,r5
    f640:	2c4b883a 	add	r5,r5,r17
    f644:	3023883a 	mov	r17,r6
    f648:	003fd406 	br	f59c <__alt_mem_Flash_flash_data+0xf400f59c>
    f64c:	1106b03a 	or	r3,r2,r4
    f650:	1800b426 	beq	r3,zero,f924 <__subdf3+0x5fc>
    f654:	100b883a 	mov	r5,r2
    f658:	2023883a 	mov	r17,r4
    f65c:	888001cc 	andi	r2,r17,7
    f660:	103f561e 	bne	r2,zero,f3bc <__alt_mem_Flash_flash_data+0xf400f3bc>
    f664:	9200004c 	andi	r8,r18,1
    f668:	003fb206 	br	f534 <__alt_mem_Flash_flash_data+0xf400f534>
    f66c:	1000531e 	bne	r2,zero,f7bc <__subdf3+0x494>
    f670:	80800044 	addi	r2,r16,1
    f674:	1081ffcc 	andi	r2,r2,2047
    f678:	01000044 	movi	r4,1
    f67c:	2080a00e 	bge	r4,r2,f900 <__subdf3+0x5d8>
    f680:	8985c83a 	sub	r2,r17,r6
    f684:	8889803a 	cmpltu	r4,r17,r2
    f688:	28e7c83a 	sub	r19,r5,r3
    f68c:	9927c83a 	sub	r19,r19,r4
    f690:	9900202c 	andhi	r4,r19,128
    f694:	20006226 	beq	r4,zero,f820 <__subdf3+0x4f8>
    f698:	3463c83a 	sub	r17,r6,r17
    f69c:	194bc83a 	sub	r5,r3,r5
    f6a0:	344d803a 	cmpltu	r6,r6,r17
    f6a4:	29a7c83a 	sub	r19,r5,r6
    f6a8:	3825883a 	mov	r18,r7
    f6ac:	983f841e 	bne	r19,zero,f4c0 <__alt_mem_Flash_flash_data+0xf400f4c0>
    f6b0:	8809883a 	mov	r4,r17
    f6b4:	000fdf40 	call	fdf4 <__clzsi2>
    f6b8:	10800804 	addi	r2,r2,32
    f6bc:	10fffe04 	addi	r3,r2,-8
    f6c0:	010007c4 	movi	r4,31
    f6c4:	20ff830e 	bge	r4,r3,f4d4 <__alt_mem_Flash_flash_data+0xf400f4d4>
    f6c8:	14fff604 	addi	r19,r2,-40
    f6cc:	8ce6983a 	sll	r19,r17,r19
    f6d0:	0023883a 	mov	r17,zero
    f6d4:	1c3f860e 	bge	r3,r16,f4f0 <__alt_mem_Flash_flash_data+0xf400f4f0>
    f6d8:	017fe034 	movhi	r5,65408
    f6dc:	297fffc4 	addi	r5,r5,-1
    f6e0:	80e1c83a 	sub	r16,r16,r3
    f6e4:	994a703a 	and	r5,r19,r5
    f6e8:	003f3206 	br	f3b4 <__alt_mem_Flash_flash_data+0xf400f3b4>
    f6ec:	0009883a 	mov	r4,zero
    f6f0:	0005883a 	mov	r2,zero
    f6f4:	003f4706 	br	f414 <__alt_mem_Flash_flash_data+0xf400f414>
    f6f8:	198cb03a 	or	r6,r3,r6
    f6fc:	300cc03a 	cmpne	r6,r6,zero
    f700:	0005883a 	mov	r2,zero
    f704:	003f6306 	br	f494 <__alt_mem_Flash_flash_data+0xf400f494>
    f708:	10009d1e 	bne	r2,zero,f980 <__subdf3+0x658>
    f70c:	81c00044 	addi	r7,r16,1
    f710:	3881ffcc 	andi	r2,r7,2047
    f714:	02400044 	movi	r9,1
    f718:	4880680e 	bge	r9,r2,f8bc <__subdf3+0x594>
    f71c:	0081ffc4 	movi	r2,2047
    f720:	3880ae26 	beq	r7,r2,f9dc <__subdf3+0x6b4>
    f724:	344d883a 	add	r6,r6,r17
    f728:	3463803a 	cmpltu	r17,r6,r17
    f72c:	194b883a 	add	r5,r3,r5
    f730:	2c4b883a 	add	r5,r5,r17
    f734:	282297fa 	slli	r17,r5,31
    f738:	300cd07a 	srli	r6,r6,1
    f73c:	280ad07a 	srli	r5,r5,1
    f740:	3821883a 	mov	r16,r7
    f744:	89a2b03a 	or	r17,r17,r6
    f748:	003f1a06 	br	f3b4 <__alt_mem_Flash_flash_data+0xf400f3b4>
    f74c:	0101ffc4 	movi	r4,2047
    f750:	813f431e 	bne	r16,r4,f460 <__alt_mem_Flash_flash_data+0xf400f460>
    f754:	003f1706 	br	f3b4 <__alt_mem_Flash_flash_data+0xf400f3b4>
    f758:	80bff844 	addi	r2,r16,-31
    f75c:	00c00804 	movi	r3,32
    f760:	9884d83a 	srl	r2,r19,r2
    f764:	28c05126 	beq	r5,r3,f8ac <__subdf3+0x584>
    f768:	00c00fc4 	movi	r3,63
    f76c:	1c21c83a 	sub	r16,r3,r16
    f770:	9c26983a 	sll	r19,r19,r16
    f774:	9c62b03a 	or	r17,r19,r17
    f778:	8822c03a 	cmpne	r17,r17,zero
    f77c:	88a2b03a 	or	r17,r17,r2
    f780:	000b883a 	mov	r5,zero
    f784:	0021883a 	mov	r16,zero
    f788:	003fb406 	br	f65c <__alt_mem_Flash_flash_data+0xf400f65c>
    f78c:	113ff804 	addi	r4,r2,-32
    f790:	01c00804 	movi	r7,32
    f794:	1908d83a 	srl	r4,r3,r4
    f798:	11c04626 	beq	r2,r7,f8b4 <__subdf3+0x58c>
    f79c:	01c01004 	movi	r7,64
    f7a0:	3885c83a 	sub	r2,r7,r2
    f7a4:	1884983a 	sll	r2,r3,r2
    f7a8:	118cb03a 	or	r6,r2,r6
    f7ac:	300cc03a 	cmpne	r6,r6,zero
    f7b0:	310cb03a 	or	r6,r6,r4
    f7b4:	0005883a 	mov	r2,zero
    f7b8:	003f3606 	br	f494 <__alt_mem_Flash_flash_data+0xf400f494>
    f7bc:	80002b26 	beq	r16,zero,f86c <__subdf3+0x544>
    f7c0:	0101ffc4 	movi	r4,2047
    f7c4:	51006926 	beq	r10,r4,f96c <__subdf3+0x644>
    f7c8:	0085c83a 	sub	r2,zero,r2
    f7cc:	29402034 	orhi	r5,r5,128
    f7d0:	01000e04 	movi	r4,56
    f7d4:	20807d16 	blt	r4,r2,f9cc <__subdf3+0x6a4>
    f7d8:	010007c4 	movi	r4,31
    f7dc:	2080d916 	blt	r4,r2,fb44 <__subdf3+0x81c>
    f7e0:	01000804 	movi	r4,32
    f7e4:	2089c83a 	sub	r4,r4,r2
    f7e8:	2912983a 	sll	r9,r5,r4
    f7ec:	8890d83a 	srl	r8,r17,r2
    f7f0:	8908983a 	sll	r4,r17,r4
    f7f4:	2884d83a 	srl	r2,r5,r2
    f7f8:	4a22b03a 	or	r17,r9,r8
    f7fc:	2008c03a 	cmpne	r4,r4,zero
    f800:	8922b03a 	or	r17,r17,r4
    f804:	3463c83a 	sub	r17,r6,r17
    f808:	1885c83a 	sub	r2,r3,r2
    f80c:	344d803a 	cmpltu	r6,r6,r17
    f810:	118bc83a 	sub	r5,r2,r6
    f814:	5021883a 	mov	r16,r10
    f818:	3825883a 	mov	r18,r7
    f81c:	003f2206 	br	f4a8 <__alt_mem_Flash_flash_data+0xf400f4a8>
    f820:	9886b03a 	or	r3,r19,r2
    f824:	18001c1e 	bne	r3,zero,f898 <__subdf3+0x570>
    f828:	0011883a 	mov	r8,zero
    f82c:	000b883a 	mov	r5,zero
    f830:	0023883a 	mov	r17,zero
    f834:	0021883a 	mov	r16,zero
    f838:	003f3e06 	br	f534 <__alt_mem_Flash_flash_data+0xf400f534>
    f83c:	010007c4 	movi	r4,31
    f840:	20803c16 	blt	r4,r2,f934 <__subdf3+0x60c>
    f844:	01000804 	movi	r4,32
    f848:	2089c83a 	sub	r4,r4,r2
    f84c:	1912983a 	sll	r9,r3,r4
    f850:	308ed83a 	srl	r7,r6,r2
    f854:	3108983a 	sll	r4,r6,r4
    f858:	1884d83a 	srl	r2,r3,r2
    f85c:	49ceb03a 	or	r7,r9,r7
    f860:	2008c03a 	cmpne	r4,r4,zero
    f864:	390eb03a 	or	r7,r7,r4
    f868:	003f4706 	br	f588 <__alt_mem_Flash_flash_data+0xf400f588>
    f86c:	2c48b03a 	or	r4,r5,r17
    f870:	20003e26 	beq	r4,zero,f96c <__subdf3+0x644>
    f874:	0084303a 	nor	r2,zero,r2
    f878:	10003a1e 	bne	r2,zero,f964 <__subdf3+0x63c>
    f87c:	3463c83a 	sub	r17,r6,r17
    f880:	194bc83a 	sub	r5,r3,r5
    f884:	344d803a 	cmpltu	r6,r6,r17
    f888:	298bc83a 	sub	r5,r5,r6
    f88c:	5021883a 	mov	r16,r10
    f890:	3825883a 	mov	r18,r7
    f894:	003f0406 	br	f4a8 <__alt_mem_Flash_flash_data+0xf400f4a8>
    f898:	1023883a 	mov	r17,r2
    f89c:	003f0706 	br	f4bc <__alt_mem_Flash_flash_data+0xf400f4bc>
    f8a0:	0101ffc4 	movi	r4,2047
    f8a4:	813f331e 	bne	r16,r4,f574 <__alt_mem_Flash_flash_data+0xf400f574>
    f8a8:	003ec206 	br	f3b4 <__alt_mem_Flash_flash_data+0xf400f3b4>
    f8ac:	0027883a 	mov	r19,zero
    f8b0:	003fb006 	br	f774 <__alt_mem_Flash_flash_data+0xf400f774>
    f8b4:	0005883a 	mov	r2,zero
    f8b8:	003fbb06 	br	f7a8 <__alt_mem_Flash_flash_data+0xf400f7a8>
    f8bc:	2c44b03a 	or	r2,r5,r17
    f8c0:	80008b1e 	bne	r16,zero,faf0 <__subdf3+0x7c8>
    f8c4:	1000b526 	beq	r2,zero,fb9c <__subdf3+0x874>
    f8c8:	1984b03a 	or	r2,r3,r6
    f8cc:	103eb926 	beq	r2,zero,f3b4 <__alt_mem_Flash_flash_data+0xf400f3b4>
    f8d0:	3449883a 	add	r4,r6,r17
    f8d4:	2463803a 	cmpltu	r17,r4,r17
    f8d8:	194b883a 	add	r5,r3,r5
    f8dc:	2c4b883a 	add	r5,r5,r17
    f8e0:	2880202c 	andhi	r2,r5,128
    f8e4:	2023883a 	mov	r17,r4
    f8e8:	103f5c26 	beq	r2,zero,f65c <__alt_mem_Flash_flash_data+0xf400f65c>
    f8ec:	00bfe034 	movhi	r2,65408
    f8f0:	10bfffc4 	addi	r2,r2,-1
    f8f4:	4821883a 	mov	r16,r9
    f8f8:	288a703a 	and	r5,r5,r2
    f8fc:	003ead06 	br	f3b4 <__alt_mem_Flash_flash_data+0xf400f3b4>
    f900:	2c44b03a 	or	r2,r5,r17
    f904:	8000291e 	bne	r16,zero,f9ac <__subdf3+0x684>
    f908:	10004f1e 	bne	r2,zero,fa48 <__subdf3+0x720>
    f90c:	1984b03a 	or	r2,r3,r6
    f910:	10000426 	beq	r2,zero,f924 <__subdf3+0x5fc>
    f914:	180b883a 	mov	r5,r3
    f918:	3023883a 	mov	r17,r6
    f91c:	3825883a 	mov	r18,r7
    f920:	003ea406 	br	f3b4 <__alt_mem_Flash_flash_data+0xf400f3b4>
    f924:	0011883a 	mov	r8,zero
    f928:	000b883a 	mov	r5,zero
    f92c:	0023883a 	mov	r17,zero
    f930:	003f0006 	br	f534 <__alt_mem_Flash_flash_data+0xf400f534>
    f934:	11fff804 	addi	r7,r2,-32
    f938:	19c8d83a 	srl	r4,r3,r7
    f93c:	01c00804 	movi	r7,32
    f940:	11c07e26 	beq	r2,r7,fb3c <__subdf3+0x814>
    f944:	01c01004 	movi	r7,64
    f948:	3885c83a 	sub	r2,r7,r2
    f94c:	1884983a 	sll	r2,r3,r2
    f950:	118cb03a 	or	r6,r2,r6
    f954:	300ec03a 	cmpne	r7,r6,zero
    f958:	390eb03a 	or	r7,r7,r4
    f95c:	0005883a 	mov	r2,zero
    f960:	003f0906 	br	f588 <__alt_mem_Flash_flash_data+0xf400f588>
    f964:	0101ffc4 	movi	r4,2047
    f968:	513f991e 	bne	r10,r4,f7d0 <__alt_mem_Flash_flash_data+0xf400f7d0>
    f96c:	180b883a 	mov	r5,r3
    f970:	3023883a 	mov	r17,r6
    f974:	5021883a 	mov	r16,r10
    f978:	3825883a 	mov	r18,r7
    f97c:	003e8d06 	br	f3b4 <__alt_mem_Flash_flash_data+0xf400f3b4>
    f980:	80001a1e 	bne	r16,zero,f9ec <__subdf3+0x6c4>
    f984:	2c48b03a 	or	r4,r5,r17
    f988:	20005526 	beq	r4,zero,fae0 <__subdf3+0x7b8>
    f98c:	0084303a 	nor	r2,zero,r2
    f990:	1000511e 	bne	r2,zero,fad8 <__subdf3+0x7b0>
    f994:	89a3883a 	add	r17,r17,r6
    f998:	194b883a 	add	r5,r3,r5
    f99c:	898d803a 	cmpltu	r6,r17,r6
    f9a0:	298b883a 	add	r5,r5,r6
    f9a4:	5021883a 	mov	r16,r10
    f9a8:	003efc06 	br	f59c <__alt_mem_Flash_flash_data+0xf400f59c>
    f9ac:	1000341e 	bne	r2,zero,fa80 <__subdf3+0x758>
    f9b0:	1984b03a 	or	r2,r3,r6
    f9b4:	10006f26 	beq	r2,zero,fb74 <__subdf3+0x84c>
    f9b8:	180b883a 	mov	r5,r3
    f9bc:	3023883a 	mov	r17,r6
    f9c0:	3825883a 	mov	r18,r7
    f9c4:	0401ffc4 	movi	r16,2047
    f9c8:	003e7a06 	br	f3b4 <__alt_mem_Flash_flash_data+0xf400f3b4>
    f9cc:	2c62b03a 	or	r17,r5,r17
    f9d0:	8822c03a 	cmpne	r17,r17,zero
    f9d4:	0005883a 	mov	r2,zero
    f9d8:	003f8a06 	br	f804 <__alt_mem_Flash_flash_data+0xf400f804>
    f9dc:	3821883a 	mov	r16,r7
    f9e0:	000b883a 	mov	r5,zero
    f9e4:	0023883a 	mov	r17,zero
    f9e8:	003ed206 	br	f534 <__alt_mem_Flash_flash_data+0xf400f534>
    f9ec:	0101ffc4 	movi	r4,2047
    f9f0:	51003b26 	beq	r10,r4,fae0 <__subdf3+0x7b8>
    f9f4:	0085c83a 	sub	r2,zero,r2
    f9f8:	29402034 	orhi	r5,r5,128
    f9fc:	01000e04 	movi	r4,56
    fa00:	20806216 	blt	r4,r2,fb8c <__subdf3+0x864>
    fa04:	010007c4 	movi	r4,31
    fa08:	20806b16 	blt	r4,r2,fbb8 <__subdf3+0x890>
    fa0c:	01000804 	movi	r4,32
    fa10:	2089c83a 	sub	r4,r4,r2
    fa14:	2912983a 	sll	r9,r5,r4
    fa18:	888ed83a 	srl	r7,r17,r2
    fa1c:	8908983a 	sll	r4,r17,r4
    fa20:	2884d83a 	srl	r2,r5,r2
    fa24:	49e2b03a 	or	r17,r9,r7
    fa28:	2008c03a 	cmpne	r4,r4,zero
    fa2c:	8922b03a 	or	r17,r17,r4
    fa30:	89a3883a 	add	r17,r17,r6
    fa34:	10c5883a 	add	r2,r2,r3
    fa38:	898d803a 	cmpltu	r6,r17,r6
    fa3c:	118b883a 	add	r5,r2,r6
    fa40:	5021883a 	mov	r16,r10
    fa44:	003ed506 	br	f59c <__alt_mem_Flash_flash_data+0xf400f59c>
    fa48:	1984b03a 	or	r2,r3,r6
    fa4c:	103e5926 	beq	r2,zero,f3b4 <__alt_mem_Flash_flash_data+0xf400f3b4>
    fa50:	8989c83a 	sub	r4,r17,r6
    fa54:	8911803a 	cmpltu	r8,r17,r4
    fa58:	28c5c83a 	sub	r2,r5,r3
    fa5c:	1205c83a 	sub	r2,r2,r8
    fa60:	1200202c 	andhi	r8,r2,128
    fa64:	403ef926 	beq	r8,zero,f64c <__alt_mem_Flash_flash_data+0xf400f64c>
    fa68:	3463c83a 	sub	r17,r6,r17
    fa6c:	194bc83a 	sub	r5,r3,r5
    fa70:	344d803a 	cmpltu	r6,r6,r17
    fa74:	298bc83a 	sub	r5,r5,r6
    fa78:	3825883a 	mov	r18,r7
    fa7c:	003e4d06 	br	f3b4 <__alt_mem_Flash_flash_data+0xf400f3b4>
    fa80:	1984b03a 	or	r2,r3,r6
    fa84:	10002b26 	beq	r2,zero,fb34 <__subdf3+0x80c>
    fa88:	2808d0fa 	srli	r4,r5,3
    fa8c:	8822d0fa 	srli	r17,r17,3
    fa90:	280a977a 	slli	r5,r5,29
    fa94:	2080022c 	andhi	r2,r4,8
    fa98:	2c62b03a 	or	r17,r5,r17
    fa9c:	10000826 	beq	r2,zero,fac0 <__subdf3+0x798>
    faa0:	1810d0fa 	srli	r8,r3,3
    faa4:	4080022c 	andhi	r2,r8,8
    faa8:	1000051e 	bne	r2,zero,fac0 <__subdf3+0x798>
    faac:	300cd0fa 	srli	r6,r6,3
    fab0:	1804977a 	slli	r2,r3,29
    fab4:	4009883a 	mov	r4,r8
    fab8:	3825883a 	mov	r18,r7
    fabc:	11a2b03a 	or	r17,r2,r6
    fac0:	880ad77a 	srli	r5,r17,29
    fac4:	200890fa 	slli	r4,r4,3
    fac8:	882290fa 	slli	r17,r17,3
    facc:	0401ffc4 	movi	r16,2047
    fad0:	290ab03a 	or	r5,r5,r4
    fad4:	003e3706 	br	f3b4 <__alt_mem_Flash_flash_data+0xf400f3b4>
    fad8:	0101ffc4 	movi	r4,2047
    fadc:	513fc71e 	bne	r10,r4,f9fc <__alt_mem_Flash_flash_data+0xf400f9fc>
    fae0:	180b883a 	mov	r5,r3
    fae4:	3023883a 	mov	r17,r6
    fae8:	5021883a 	mov	r16,r10
    faec:	003e3106 	br	f3b4 <__alt_mem_Flash_flash_data+0xf400f3b4>
    faf0:	10002d26 	beq	r2,zero,fba8 <__subdf3+0x880>
    faf4:	1984b03a 	or	r2,r3,r6
    faf8:	10000e26 	beq	r2,zero,fb34 <__subdf3+0x80c>
    fafc:	2808d0fa 	srli	r4,r5,3
    fb00:	8822d0fa 	srli	r17,r17,3
    fb04:	280a977a 	slli	r5,r5,29
    fb08:	2080022c 	andhi	r2,r4,8
    fb0c:	2c62b03a 	or	r17,r5,r17
    fb10:	103feb26 	beq	r2,zero,fac0 <__alt_mem_Flash_flash_data+0xf400fac0>
    fb14:	180ed0fa 	srli	r7,r3,3
    fb18:	3880022c 	andhi	r2,r7,8
    fb1c:	103fe81e 	bne	r2,zero,fac0 <__alt_mem_Flash_flash_data+0xf400fac0>
    fb20:	300cd0fa 	srli	r6,r6,3
    fb24:	1804977a 	slli	r2,r3,29
    fb28:	3809883a 	mov	r4,r7
    fb2c:	11a2b03a 	or	r17,r2,r6
    fb30:	003fe306 	br	fac0 <__alt_mem_Flash_flash_data+0xf400fac0>
    fb34:	0401ffc4 	movi	r16,2047
    fb38:	003e1e06 	br	f3b4 <__alt_mem_Flash_flash_data+0xf400f3b4>
    fb3c:	0005883a 	mov	r2,zero
    fb40:	003f8306 	br	f950 <__alt_mem_Flash_flash_data+0xf400f950>
    fb44:	113ff804 	addi	r4,r2,-32
    fb48:	02000804 	movi	r8,32
    fb4c:	2908d83a 	srl	r4,r5,r4
    fb50:	12002526 	beq	r2,r8,fbe8 <__subdf3+0x8c0>
    fb54:	02001004 	movi	r8,64
    fb58:	4085c83a 	sub	r2,r8,r2
    fb5c:	288a983a 	sll	r5,r5,r2
    fb60:	2c62b03a 	or	r17,r5,r17
    fb64:	8822c03a 	cmpne	r17,r17,zero
    fb68:	8922b03a 	or	r17,r17,r4
    fb6c:	0005883a 	mov	r2,zero
    fb70:	003f2406 	br	f804 <__alt_mem_Flash_flash_data+0xf400f804>
    fb74:	01402034 	movhi	r5,128
    fb78:	0011883a 	mov	r8,zero
    fb7c:	297fffc4 	addi	r5,r5,-1
    fb80:	047ffe04 	movi	r17,-8
    fb84:	0401ffc4 	movi	r16,2047
    fb88:	003e6a06 	br	f534 <__alt_mem_Flash_flash_data+0xf400f534>
    fb8c:	2c62b03a 	or	r17,r5,r17
    fb90:	8822c03a 	cmpne	r17,r17,zero
    fb94:	0005883a 	mov	r2,zero
    fb98:	003fa506 	br	fa30 <__alt_mem_Flash_flash_data+0xf400fa30>
    fb9c:	180b883a 	mov	r5,r3
    fba0:	3023883a 	mov	r17,r6
    fba4:	003e0306 	br	f3b4 <__alt_mem_Flash_flash_data+0xf400f3b4>
    fba8:	180b883a 	mov	r5,r3
    fbac:	3023883a 	mov	r17,r6
    fbb0:	0401ffc4 	movi	r16,2047
    fbb4:	003dff06 	br	f3b4 <__alt_mem_Flash_flash_data+0xf400f3b4>
    fbb8:	113ff804 	addi	r4,r2,-32
    fbbc:	01c00804 	movi	r7,32
    fbc0:	2908d83a 	srl	r4,r5,r4
    fbc4:	11c00a26 	beq	r2,r7,fbf0 <__subdf3+0x8c8>
    fbc8:	01c01004 	movi	r7,64
    fbcc:	3885c83a 	sub	r2,r7,r2
    fbd0:	288a983a 	sll	r5,r5,r2
    fbd4:	2c62b03a 	or	r17,r5,r17
    fbd8:	8822c03a 	cmpne	r17,r17,zero
    fbdc:	8922b03a 	or	r17,r17,r4
    fbe0:	0005883a 	mov	r2,zero
    fbe4:	003f9206 	br	fa30 <__alt_mem_Flash_flash_data+0xf400fa30>
    fbe8:	000b883a 	mov	r5,zero
    fbec:	003fdc06 	br	fb60 <__alt_mem_Flash_flash_data+0xf400fb60>
    fbf0:	000b883a 	mov	r5,zero
    fbf4:	003ff706 	br	fbd4 <__alt_mem_Flash_flash_data+0xf400fbd4>

0000fbf8 <__fixdfsi>:
    fbf8:	2806d53a 	srli	r3,r5,20
    fbfc:	00800434 	movhi	r2,16
    fc00:	10bfffc4 	addi	r2,r2,-1
    fc04:	18c1ffcc 	andi	r3,r3,2047
    fc08:	0180ff84 	movi	r6,1022
    fc0c:	2884703a 	and	r2,r5,r2
    fc10:	280ad7fa 	srli	r5,r5,31
    fc14:	30c0130e 	bge	r6,r3,fc64 <__fixdfsi+0x6c>
    fc18:	01810744 	movi	r6,1053
    fc1c:	30c00d16 	blt	r6,r3,fc54 <__fixdfsi+0x5c>
    fc20:	01810cc4 	movi	r6,1075
    fc24:	30cdc83a 	sub	r6,r6,r3
    fc28:	01c007c4 	movi	r7,31
    fc2c:	10800434 	orhi	r2,r2,16
    fc30:	39800e0e 	bge	r7,r6,fc6c <__fixdfsi+0x74>
    fc34:	010104c4 	movi	r4,1043
    fc38:	20c7c83a 	sub	r3,r4,r3
    fc3c:	10c6d83a 	srl	r3,r2,r3
    fc40:	29403fcc 	andi	r5,r5,255
    fc44:	0145c83a 	sub	r2,zero,r5
    fc48:	1884f03a 	xor	r2,r3,r2
    fc4c:	1145883a 	add	r2,r2,r5
    fc50:	f800283a 	ret
    fc54:	00a00034 	movhi	r2,32768
    fc58:	10bfffc4 	addi	r2,r2,-1
    fc5c:	2885883a 	add	r2,r5,r2
    fc60:	f800283a 	ret
    fc64:	0005883a 	mov	r2,zero
    fc68:	f800283a 	ret
    fc6c:	18fefb44 	addi	r3,r3,-1043
    fc70:	2188d83a 	srl	r4,r4,r6
    fc74:	10c6983a 	sll	r3,r2,r3
    fc78:	20c6b03a 	or	r3,r4,r3
    fc7c:	003ff006 	br	fc40 <__alt_mem_Flash_flash_data+0xf400fc40>

0000fc80 <__floatsidf>:
    fc80:	defffd04 	addi	sp,sp,-12
    fc84:	dc400115 	stw	r17,4(sp)
    fc88:	dfc00215 	stw	ra,8(sp)
    fc8c:	dc000015 	stw	r16,0(sp)
    fc90:	2023883a 	mov	r17,r4
    fc94:	20001426 	beq	r4,zero,fce8 <__floatsidf+0x68>
    fc98:	2020d7fa 	srli	r16,r4,31
    fc9c:	80000126 	beq	r16,zero,fca4 <__floatsidf+0x24>
    fca0:	0123c83a 	sub	r17,zero,r4
    fca4:	8809883a 	mov	r4,r17
    fca8:	000fdf40 	call	fdf4 <__clzsi2>
    fcac:	01410784 	movi	r5,1054
    fcb0:	00c00284 	movi	r3,10
    fcb4:	288bc83a 	sub	r5,r5,r2
    fcb8:	18801c16 	blt	r3,r2,fd2c <__floatsidf+0xac>
    fcbc:	00c002c4 	movi	r3,11
    fcc0:	1887c83a 	sub	r3,r3,r2
    fcc4:	88c8d83a 	srl	r4,r17,r3
    fcc8:	00c00434 	movhi	r3,16
    fccc:	18ffffc4 	addi	r3,r3,-1
    fcd0:	10800544 	addi	r2,r2,21
    fcd4:	20c8703a 	and	r4,r4,r3
    fcd8:	8884983a 	sll	r2,r17,r2
    fcdc:	28c1ffcc 	andi	r3,r5,2047
    fce0:	800d883a 	mov	r6,r16
    fce4:	00000406 	br	fcf8 <__floatsidf+0x78>
    fce8:	000d883a 	mov	r6,zero
    fcec:	0007883a 	mov	r3,zero
    fcf0:	0009883a 	mov	r4,zero
    fcf4:	0005883a 	mov	r2,zero
    fcf8:	180a953a 	slli	r5,r3,20
    fcfc:	31803fcc 	andi	r6,r6,255
    fd00:	00c00434 	movhi	r3,16
    fd04:	300c97fa 	slli	r6,r6,31
    fd08:	18ffffc4 	addi	r3,r3,-1
    fd0c:	20c6703a 	and	r3,r4,r3
    fd10:	1946b03a 	or	r3,r3,r5
    fd14:	1986b03a 	or	r3,r3,r6
    fd18:	dfc00217 	ldw	ra,8(sp)
    fd1c:	dc400117 	ldw	r17,4(sp)
    fd20:	dc000017 	ldw	r16,0(sp)
    fd24:	dec00304 	addi	sp,sp,12
    fd28:	f800283a 	ret
    fd2c:	10fffd44 	addi	r3,r2,-11
    fd30:	88c8983a 	sll	r4,r17,r3
    fd34:	00800434 	movhi	r2,16
    fd38:	10bfffc4 	addi	r2,r2,-1
    fd3c:	2088703a 	and	r4,r4,r2
    fd40:	28c1ffcc 	andi	r3,r5,2047
    fd44:	800d883a 	mov	r6,r16
    fd48:	0005883a 	mov	r2,zero
    fd4c:	003fea06 	br	fcf8 <__alt_mem_Flash_flash_data+0xf400fcf8>

0000fd50 <__floatunsidf>:
    fd50:	defffe04 	addi	sp,sp,-8
    fd54:	dc000015 	stw	r16,0(sp)
    fd58:	dfc00115 	stw	ra,4(sp)
    fd5c:	2021883a 	mov	r16,r4
    fd60:	20001026 	beq	r4,zero,fda4 <__floatunsidf+0x54>
    fd64:	000fdf40 	call	fdf4 <__clzsi2>
    fd68:	01410784 	movi	r5,1054
    fd6c:	100d883a 	mov	r6,r2
    fd70:	288bc83a 	sub	r5,r5,r2
    fd74:	00800284 	movi	r2,10
    fd78:	11801616 	blt	r2,r6,fdd4 <__floatunsidf+0x84>
    fd7c:	008002c4 	movi	r2,11
    fd80:	1185c83a 	sub	r2,r2,r6
    fd84:	8084d83a 	srl	r2,r16,r2
    fd88:	00c00434 	movhi	r3,16
    fd8c:	31c00544 	addi	r7,r6,21
    fd90:	18ffffc4 	addi	r3,r3,-1
    fd94:	81e0983a 	sll	r16,r16,r7
    fd98:	10cc703a 	and	r6,r2,r3
    fd9c:	2941ffcc 	andi	r5,r5,2047
    fda0:	00000206 	br	fdac <__floatunsidf+0x5c>
    fda4:	000b883a 	mov	r5,zero
    fda8:	000d883a 	mov	r6,zero
    fdac:	280a953a 	slli	r5,r5,20
    fdb0:	00c00434 	movhi	r3,16
    fdb4:	18ffffc4 	addi	r3,r3,-1
    fdb8:	30c6703a 	and	r3,r6,r3
    fdbc:	8005883a 	mov	r2,r16
    fdc0:	1946b03a 	or	r3,r3,r5
    fdc4:	dfc00117 	ldw	ra,4(sp)
    fdc8:	dc000017 	ldw	r16,0(sp)
    fdcc:	dec00204 	addi	sp,sp,8
    fdd0:	f800283a 	ret
    fdd4:	31bffd44 	addi	r6,r6,-11
    fdd8:	818c983a 	sll	r6,r16,r6
    fddc:	00800434 	movhi	r2,16
    fde0:	10bfffc4 	addi	r2,r2,-1
    fde4:	2941ffcc 	andi	r5,r5,2047
    fde8:	0021883a 	mov	r16,zero
    fdec:	308c703a 	and	r6,r6,r2
    fdf0:	003fee06 	br	fdac <__alt_mem_Flash_flash_data+0xf400fdac>

0000fdf4 <__clzsi2>:
    fdf4:	00bfffd4 	movui	r2,65535
    fdf8:	11000b36 	bltu	r2,r4,fe28 <__clzsi2+0x34>
    fdfc:	00803fc4 	movi	r2,255
    fe00:	1100122e 	bgeu	r2,r4,fe4c <__clzsi2+0x58>
    fe04:	00c00204 	movi	r3,8
    fe08:	01400604 	movi	r5,24
    fe0c:	20c8d83a 	srl	r4,r4,r3
    fe10:	008000b4 	movhi	r2,2
    fe14:	10828304 	addi	r2,r2,2572
    fe18:	1109883a 	add	r4,r2,r4
    fe1c:	20800003 	ldbu	r2,0(r4)
    fe20:	2885c83a 	sub	r2,r5,r2
    fe24:	f800283a 	ret
    fe28:	00804034 	movhi	r2,256
    fe2c:	10bfffc4 	addi	r2,r2,-1
    fe30:	11000336 	bltu	r2,r4,fe40 <__clzsi2+0x4c>
    fe34:	00c00404 	movi	r3,16
    fe38:	180b883a 	mov	r5,r3
    fe3c:	003ff306 	br	fe0c <__alt_mem_Flash_flash_data+0xf400fe0c>
    fe40:	00c00604 	movi	r3,24
    fe44:	01400204 	movi	r5,8
    fe48:	003ff006 	br	fe0c <__alt_mem_Flash_flash_data+0xf400fe0c>
    fe4c:	0007883a 	mov	r3,zero
    fe50:	01400804 	movi	r5,32
    fe54:	003fed06 	br	fe0c <__alt_mem_Flash_flash_data+0xf400fe0c>

0000fe58 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    fe58:	defffe04 	addi	sp,sp,-8
    fe5c:	dfc00115 	stw	ra,4(sp)
    fe60:	df000015 	stw	fp,0(sp)
    fe64:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    fe68:	008000b4 	movhi	r2,2
    fe6c:	108b1804 	addi	r2,r2,11360
    fe70:	10800017 	ldw	r2,0(r2)
    fe74:	10000526 	beq	r2,zero,fe8c <alt_get_errno+0x34>
    fe78:	008000b4 	movhi	r2,2
    fe7c:	108b1804 	addi	r2,r2,11360
    fe80:	10800017 	ldw	r2,0(r2)
    fe84:	103ee83a 	callr	r2
    fe88:	00000206 	br	fe94 <alt_get_errno+0x3c>
    fe8c:	008000b4 	movhi	r2,2
    fe90:	1092fd04 	addi	r2,r2,19444
}
    fe94:	e037883a 	mov	sp,fp
    fe98:	dfc00117 	ldw	ra,4(sp)
    fe9c:	df000017 	ldw	fp,0(sp)
    fea0:	dec00204 	addi	sp,sp,8
    fea4:	f800283a 	ret

0000fea8 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
    fea8:	defffb04 	addi	sp,sp,-20
    feac:	dfc00415 	stw	ra,16(sp)
    feb0:	df000315 	stw	fp,12(sp)
    feb4:	df000304 	addi	fp,sp,12
    feb8:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
    febc:	e0bfff17 	ldw	r2,-4(fp)
    fec0:	10000616 	blt	r2,zero,fedc <close+0x34>
    fec4:	e0bfff17 	ldw	r2,-4(fp)
    fec8:	10c00324 	muli	r3,r2,12
    fecc:	008000b4 	movhi	r2,2
    fed0:	1085b104 	addi	r2,r2,5828
    fed4:	1885883a 	add	r2,r3,r2
    fed8:	00000106 	br	fee0 <close+0x38>
    fedc:	0005883a 	mov	r2,zero
    fee0:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
    fee4:	e0bffd17 	ldw	r2,-12(fp)
    fee8:	10001926 	beq	r2,zero,ff50 <close+0xa8>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
    feec:	e0bffd17 	ldw	r2,-12(fp)
    fef0:	10800017 	ldw	r2,0(r2)
    fef4:	10800417 	ldw	r2,16(r2)
    fef8:	10000626 	beq	r2,zero,ff14 <close+0x6c>
    fefc:	e0bffd17 	ldw	r2,-12(fp)
    ff00:	10800017 	ldw	r2,0(r2)
    ff04:	10800417 	ldw	r2,16(r2)
    ff08:	e13ffd17 	ldw	r4,-12(fp)
    ff0c:	103ee83a 	callr	r2
    ff10:	00000106 	br	ff18 <close+0x70>
    ff14:	0005883a 	mov	r2,zero
    ff18:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
    ff1c:	e13fff17 	ldw	r4,-4(fp)
    ff20:	00105c00 	call	105c0 <alt_release_fd>
    if (rval < 0)
    ff24:	e0bffe17 	ldw	r2,-8(fp)
    ff28:	1000070e 	bge	r2,zero,ff48 <close+0xa0>
    {
      ALT_ERRNO = -rval;
    ff2c:	000fe580 	call	fe58 <alt_get_errno>
    ff30:	1007883a 	mov	r3,r2
    ff34:	e0bffe17 	ldw	r2,-8(fp)
    ff38:	0085c83a 	sub	r2,zero,r2
    ff3c:	18800015 	stw	r2,0(r3)
      return -1;
    ff40:	00bfffc4 	movi	r2,-1
    ff44:	00000706 	br	ff64 <close+0xbc>
    }
    return 0;
    ff48:	0005883a 	mov	r2,zero
    ff4c:	00000506 	br	ff64 <close+0xbc>
  }
  else
  {
    ALT_ERRNO = EBADFD;
    ff50:	000fe580 	call	fe58 <alt_get_errno>
    ff54:	1007883a 	mov	r3,r2
    ff58:	00801444 	movi	r2,81
    ff5c:	18800015 	stw	r2,0(r3)
    return -1;
    ff60:	00bfffc4 	movi	r2,-1
  }
}
    ff64:	e037883a 	mov	sp,fp
    ff68:	dfc00117 	ldw	ra,4(sp)
    ff6c:	df000017 	ldw	fp,0(sp)
    ff70:	dec00204 	addi	sp,sp,8
    ff74:	f800283a 	ret

0000ff78 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
    ff78:	defffc04 	addi	sp,sp,-16
    ff7c:	df000315 	stw	fp,12(sp)
    ff80:	df000304 	addi	fp,sp,12
    ff84:	e13ffd15 	stw	r4,-12(fp)
    ff88:	e17ffe15 	stw	r5,-8(fp)
    ff8c:	e1bfff15 	stw	r6,-4(fp)
  return len;
    ff90:	e0bfff17 	ldw	r2,-4(fp)
}
    ff94:	e037883a 	mov	sp,fp
    ff98:	df000017 	ldw	fp,0(sp)
    ff9c:	dec00104 	addi	sp,sp,4
    ffa0:	f800283a 	ret

0000ffa4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    ffa4:	defffe04 	addi	sp,sp,-8
    ffa8:	dfc00115 	stw	ra,4(sp)
    ffac:	df000015 	stw	fp,0(sp)
    ffb0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    ffb4:	008000b4 	movhi	r2,2
    ffb8:	108b1804 	addi	r2,r2,11360
    ffbc:	10800017 	ldw	r2,0(r2)
    ffc0:	10000526 	beq	r2,zero,ffd8 <alt_get_errno+0x34>
    ffc4:	008000b4 	movhi	r2,2
    ffc8:	108b1804 	addi	r2,r2,11360
    ffcc:	10800017 	ldw	r2,0(r2)
    ffd0:	103ee83a 	callr	r2
    ffd4:	00000206 	br	ffe0 <alt_get_errno+0x3c>
    ffd8:	008000b4 	movhi	r2,2
    ffdc:	1092fd04 	addi	r2,r2,19444
}
    ffe0:	e037883a 	mov	sp,fp
    ffe4:	dfc00117 	ldw	ra,4(sp)
    ffe8:	df000017 	ldw	fp,0(sp)
    ffec:	dec00204 	addi	sp,sp,8
    fff0:	f800283a 	ret

0000fff4 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
    fff4:	defffb04 	addi	sp,sp,-20
    fff8:	dfc00415 	stw	ra,16(sp)
    fffc:	df000315 	stw	fp,12(sp)
   10000:	df000304 	addi	fp,sp,12
   10004:	e13ffe15 	stw	r4,-8(fp)
   10008:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   1000c:	e0bffe17 	ldw	r2,-8(fp)
   10010:	10000616 	blt	r2,zero,1002c <fstat+0x38>
   10014:	e0bffe17 	ldw	r2,-8(fp)
   10018:	10c00324 	muli	r3,r2,12
   1001c:	008000b4 	movhi	r2,2
   10020:	1085b104 	addi	r2,r2,5828
   10024:	1885883a 	add	r2,r3,r2
   10028:	00000106 	br	10030 <fstat+0x3c>
   1002c:	0005883a 	mov	r2,zero
   10030:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
   10034:	e0bffd17 	ldw	r2,-12(fp)
   10038:	10001026 	beq	r2,zero,1007c <fstat+0x88>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
   1003c:	e0bffd17 	ldw	r2,-12(fp)
   10040:	10800017 	ldw	r2,0(r2)
   10044:	10800817 	ldw	r2,32(r2)
   10048:	10000726 	beq	r2,zero,10068 <fstat+0x74>
    {
      return fd->dev->fstat(fd, st);
   1004c:	e0bffd17 	ldw	r2,-12(fp)
   10050:	10800017 	ldw	r2,0(r2)
   10054:	10800817 	ldw	r2,32(r2)
   10058:	e13ffd17 	ldw	r4,-12(fp)
   1005c:	e17fff17 	ldw	r5,-4(fp)
   10060:	103ee83a 	callr	r2
   10064:	00000a06 	br	10090 <fstat+0x9c>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
   10068:	e0bfff17 	ldw	r2,-4(fp)
   1006c:	00c80004 	movi	r3,8192
   10070:	10c00115 	stw	r3,4(r2)
      return 0;
   10074:	0005883a 	mov	r2,zero
   10078:	00000506 	br	10090 <fstat+0x9c>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
   1007c:	000ffa40 	call	ffa4 <alt_get_errno>
   10080:	1007883a 	mov	r3,r2
   10084:	00801444 	movi	r2,81
   10088:	18800015 	stw	r2,0(r3)
    return -1;
   1008c:	00bfffc4 	movi	r2,-1
  }
}
   10090:	e037883a 	mov	sp,fp
   10094:	dfc00117 	ldw	ra,4(sp)
   10098:	df000017 	ldw	fp,0(sp)
   1009c:	dec00204 	addi	sp,sp,8
   100a0:	f800283a 	ret

000100a4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   100a4:	defffe04 	addi	sp,sp,-8
   100a8:	dfc00115 	stw	ra,4(sp)
   100ac:	df000015 	stw	fp,0(sp)
   100b0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   100b4:	008000b4 	movhi	r2,2
   100b8:	108b1804 	addi	r2,r2,11360
   100bc:	10800017 	ldw	r2,0(r2)
   100c0:	10000526 	beq	r2,zero,100d8 <alt_get_errno+0x34>
   100c4:	008000b4 	movhi	r2,2
   100c8:	108b1804 	addi	r2,r2,11360
   100cc:	10800017 	ldw	r2,0(r2)
   100d0:	103ee83a 	callr	r2
   100d4:	00000206 	br	100e0 <alt_get_errno+0x3c>
   100d8:	008000b4 	movhi	r2,2
   100dc:	1092fd04 	addi	r2,r2,19444
}
   100e0:	e037883a 	mov	sp,fp
   100e4:	dfc00117 	ldw	ra,4(sp)
   100e8:	df000017 	ldw	fp,0(sp)
   100ec:	dec00204 	addi	sp,sp,8
   100f0:	f800283a 	ret

000100f4 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
   100f4:	deffed04 	addi	sp,sp,-76
   100f8:	dfc01215 	stw	ra,72(sp)
   100fc:	df001115 	stw	fp,68(sp)
   10100:	df001104 	addi	fp,sp,68
   10104:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   10108:	e0bfff17 	ldw	r2,-4(fp)
   1010c:	10000616 	blt	r2,zero,10128 <isatty+0x34>
   10110:	e0bfff17 	ldw	r2,-4(fp)
   10114:	10c00324 	muli	r3,r2,12
   10118:	008000b4 	movhi	r2,2
   1011c:	1085b104 	addi	r2,r2,5828
   10120:	1885883a 	add	r2,r3,r2
   10124:	00000106 	br	1012c <isatty+0x38>
   10128:	0005883a 	mov	r2,zero
   1012c:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
   10130:	e0bfef17 	ldw	r2,-68(fp)
   10134:	10000e26 	beq	r2,zero,10170 <isatty+0x7c>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
   10138:	e0bfef17 	ldw	r2,-68(fp)
   1013c:	10800017 	ldw	r2,0(r2)
   10140:	10800817 	ldw	r2,32(r2)
   10144:	1000021e 	bne	r2,zero,10150 <isatty+0x5c>
    {
      return 1;
   10148:	00800044 	movi	r2,1
   1014c:	00000d06 	br	10184 <isatty+0x90>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
   10150:	e0bff004 	addi	r2,fp,-64
   10154:	e13fff17 	ldw	r4,-4(fp)
   10158:	100b883a 	mov	r5,r2
   1015c:	000fff40 	call	fff4 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
   10160:	e0bff117 	ldw	r2,-60(fp)
   10164:	10880020 	cmpeqi	r2,r2,8192
   10168:	10803fcc 	andi	r2,r2,255
   1016c:	00000506 	br	10184 <isatty+0x90>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
   10170:	00100a40 	call	100a4 <alt_get_errno>
   10174:	1007883a 	mov	r3,r2
   10178:	00801444 	movi	r2,81
   1017c:	18800015 	stw	r2,0(r3)
    return 0;
   10180:	0005883a 	mov	r2,zero
  }
}
   10184:	e037883a 	mov	sp,fp
   10188:	dfc00117 	ldw	ra,4(sp)
   1018c:	df000017 	ldw	fp,0(sp)
   10190:	dec00204 	addi	sp,sp,8
   10194:	f800283a 	ret

00010198 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
   10198:	defffc04 	addi	sp,sp,-16
   1019c:	df000315 	stw	fp,12(sp)
   101a0:	df000304 	addi	fp,sp,12
   101a4:	e13ffd15 	stw	r4,-12(fp)
   101a8:	e17ffe15 	stw	r5,-8(fp)
   101ac:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
   101b0:	e0fffe17 	ldw	r3,-8(fp)
   101b4:	e0bffd17 	ldw	r2,-12(fp)
   101b8:	18800c26 	beq	r3,r2,101ec <alt_load_section+0x54>
  {
    while( to != end )
   101bc:	00000806 	br	101e0 <alt_load_section+0x48>
    {
      *to++ = *from++;
   101c0:	e0bffe17 	ldw	r2,-8(fp)
   101c4:	10c00104 	addi	r3,r2,4
   101c8:	e0fffe15 	stw	r3,-8(fp)
   101cc:	e0fffd17 	ldw	r3,-12(fp)
   101d0:	19000104 	addi	r4,r3,4
   101d4:	e13ffd15 	stw	r4,-12(fp)
   101d8:	18c00017 	ldw	r3,0(r3)
   101dc:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
   101e0:	e0fffe17 	ldw	r3,-8(fp)
   101e4:	e0bfff17 	ldw	r2,-4(fp)
   101e8:	18bff51e 	bne	r3,r2,101c0 <__alt_mem_Flash_flash_data+0xf40101c0>
    {
      *to++ = *from++;
    }
  }
}
   101ec:	e037883a 	mov	sp,fp
   101f0:	df000017 	ldw	fp,0(sp)
   101f4:	dec00104 	addi	sp,sp,4
   101f8:	f800283a 	ret

000101fc <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
   101fc:	defffe04 	addi	sp,sp,-8
   10200:	dfc00115 	stw	ra,4(sp)
   10204:	df000015 	stw	fp,0(sp)
   10208:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
   1020c:	010000b4 	movhi	r4,2
   10210:	210b3c04 	addi	r4,r4,11504
   10214:	014000b4 	movhi	r5,2
   10218:	29437e04 	addi	r5,r5,3576
   1021c:	018000b4 	movhi	r6,2
   10220:	318b3c04 	addi	r6,r6,11504
   10224:	00101980 	call	10198 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
   10228:	01000034 	movhi	r4,0
   1022c:	21000804 	addi	r4,r4,32
   10230:	01400034 	movhi	r5,0
   10234:	29400804 	addi	r5,r5,32
   10238:	01800034 	movhi	r6,0
   1023c:	31809104 	addi	r6,r6,580
   10240:	00101980 	call	10198 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
   10244:	010000b4 	movhi	r4,2
   10248:	2101cf04 	addi	r4,r4,1852
   1024c:	014000b4 	movhi	r5,2
   10250:	2941cf04 	addi	r5,r5,1852
   10254:	018000b4 	movhi	r6,2
   10258:	31837e04 	addi	r6,r6,3576
   1025c:	00101980 	call	10198 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
   10260:	001f3840 	call	1f384 <alt_dcache_flush_all>
  alt_icache_flush_all();
   10264:	001f5dc0 	call	1f5dc <alt_icache_flush_all>
}
   10268:	e037883a 	mov	sp,fp
   1026c:	dfc00117 	ldw	ra,4(sp)
   10270:	df000017 	ldw	fp,0(sp)
   10274:	dec00204 	addi	sp,sp,8
   10278:	f800283a 	ret

0001027c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   1027c:	defffe04 	addi	sp,sp,-8
   10280:	dfc00115 	stw	ra,4(sp)
   10284:	df000015 	stw	fp,0(sp)
   10288:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   1028c:	008000b4 	movhi	r2,2
   10290:	108b1804 	addi	r2,r2,11360
   10294:	10800017 	ldw	r2,0(r2)
   10298:	10000526 	beq	r2,zero,102b0 <alt_get_errno+0x34>
   1029c:	008000b4 	movhi	r2,2
   102a0:	108b1804 	addi	r2,r2,11360
   102a4:	10800017 	ldw	r2,0(r2)
   102a8:	103ee83a 	callr	r2
   102ac:	00000206 	br	102b8 <alt_get_errno+0x3c>
   102b0:	008000b4 	movhi	r2,2
   102b4:	1092fd04 	addi	r2,r2,19444
}
   102b8:	e037883a 	mov	sp,fp
   102bc:	dfc00117 	ldw	ra,4(sp)
   102c0:	df000017 	ldw	fp,0(sp)
   102c4:	dec00204 	addi	sp,sp,8
   102c8:	f800283a 	ret

000102cc <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
   102cc:	defff904 	addi	sp,sp,-28
   102d0:	dfc00615 	stw	ra,24(sp)
   102d4:	df000515 	stw	fp,20(sp)
   102d8:	df000504 	addi	fp,sp,20
   102dc:	e13ffd15 	stw	r4,-12(fp)
   102e0:	e17ffe15 	stw	r5,-8(fp)
   102e4:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
   102e8:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   102ec:	e0bffd17 	ldw	r2,-12(fp)
   102f0:	10000616 	blt	r2,zero,1030c <lseek+0x40>
   102f4:	e0bffd17 	ldw	r2,-12(fp)
   102f8:	10c00324 	muli	r3,r2,12
   102fc:	008000b4 	movhi	r2,2
   10300:	1085b104 	addi	r2,r2,5828
   10304:	1885883a 	add	r2,r3,r2
   10308:	00000106 	br	10310 <lseek+0x44>
   1030c:	0005883a 	mov	r2,zero
   10310:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
   10314:	e0bffc17 	ldw	r2,-16(fp)
   10318:	10001026 	beq	r2,zero,1035c <lseek+0x90>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
   1031c:	e0bffc17 	ldw	r2,-16(fp)
   10320:	10800017 	ldw	r2,0(r2)
   10324:	10800717 	ldw	r2,28(r2)
   10328:	10000926 	beq	r2,zero,10350 <lseek+0x84>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
   1032c:	e0bffc17 	ldw	r2,-16(fp)
   10330:	10800017 	ldw	r2,0(r2)
   10334:	10800717 	ldw	r2,28(r2)
   10338:	e13ffc17 	ldw	r4,-16(fp)
   1033c:	e17ffe17 	ldw	r5,-8(fp)
   10340:	e1bfff17 	ldw	r6,-4(fp)
   10344:	103ee83a 	callr	r2
   10348:	e0bffb15 	stw	r2,-20(fp)
   1034c:	00000506 	br	10364 <lseek+0x98>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
   10350:	00bfde84 	movi	r2,-134
   10354:	e0bffb15 	stw	r2,-20(fp)
   10358:	00000206 	br	10364 <lseek+0x98>
    }
  }
  else  
  {
    rc = -EBADFD;
   1035c:	00bfebc4 	movi	r2,-81
   10360:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
   10364:	e0bffb17 	ldw	r2,-20(fp)
   10368:	1000070e 	bge	r2,zero,10388 <lseek+0xbc>
  {
    ALT_ERRNO = -rc;
   1036c:	001027c0 	call	1027c <alt_get_errno>
   10370:	1007883a 	mov	r3,r2
   10374:	e0bffb17 	ldw	r2,-20(fp)
   10378:	0085c83a 	sub	r2,zero,r2
   1037c:	18800015 	stw	r2,0(r3)
    rc = -1;
   10380:	00bfffc4 	movi	r2,-1
   10384:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
   10388:	e0bffb17 	ldw	r2,-20(fp)
}
   1038c:	e037883a 	mov	sp,fp
   10390:	dfc00117 	ldw	ra,4(sp)
   10394:	df000017 	ldw	fp,0(sp)
   10398:	dec00204 	addi	sp,sp,8
   1039c:	f800283a 	ret

000103a0 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
   103a0:	defff904 	addi	sp,sp,-28
   103a4:	dfc00615 	stw	ra,24(sp)
   103a8:	df000515 	stw	fp,20(sp)
   103ac:	df000504 	addi	fp,sp,20
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
   103b0:	0009883a 	mov	r4,zero
   103b4:	00187ec0 	call	187ec <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
   103b8:	00113900 	call	11390 <OSInit>
   103bc:	01000044 	movi	r4,1
   103c0:	0015f000 	call	15f00 <OSSemCreate>
   103c4:	1007883a 	mov	r3,r2
   103c8:	008000b4 	movhi	r2,2
   103cc:	10930604 	addi	r2,r2,19480
   103d0:	10c00015 	stw	r3,0(r2)
   103d4:	01000044 	movi	r4,1
   103d8:	0015f000 	call	15f00 <OSSemCreate>
   103dc:	1007883a 	mov	r3,r2
   103e0:	008000b4 	movhi	r2,2
   103e4:	10930804 	addi	r2,r2,19488
   103e8:	10c00015 	stw	r3,0(r2)
   103ec:	008000b4 	movhi	r2,2
   103f0:	10930104 	addi	r2,r2,19460
   103f4:	e0bffc15 	stw	r2,-16(fp)
   103f8:	00800044 	movi	r2,1
   103fc:	e0bffd0d 	sth	r2,-12(fp)
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sem_create (OS_EVENT** sem, 
              INT16U value)
{
  *sem = OSSemCreate (value);
   10400:	e0bffd0b 	ldhu	r2,-12(fp)
   10404:	1009883a 	mov	r4,r2
   10408:	0015f000 	call	15f00 <OSSemCreate>
   1040c:	1007883a 	mov	r3,r2
   10410:	e0bffc17 	ldw	r2,-16(fp)
   10414:	10c00015 	stw	r3,0(r2)
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
   10418:	00188200 	call	18820 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
   1041c:	010000b4 	movhi	r4,2
   10420:	2102c604 	addi	r4,r4,2840
   10424:	014000b4 	movhi	r5,2
   10428:	2942c604 	addi	r5,r5,2840
   1042c:	018000b4 	movhi	r6,2
   10430:	3182c604 	addi	r6,r6,2840
   10434:	001f6cc0 	call	1f6cc <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
   10438:	001f4940 	call	1f494 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
   1043c:	010000b4 	movhi	r4,2
   10440:	213d3c04 	addi	r4,r4,-2832
   10444:	00203900 	call	20390 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
   10448:	d127f517 	ldw	r4,-24620(gp)
   1044c:	d0e7f617 	ldw	r3,-24616(gp)
   10450:	d0a7f717 	ldw	r2,-24612(gp)
   10454:	180b883a 	mov	r5,r3
   10458:	100d883a 	mov	r6,r2
   1045c:	000065c0 	call	65c <main>
   10460:	e0bffb15 	stw	r2,-20(fp)
  close(STDOUT_FILENO);
   10464:	01000044 	movi	r4,1
   10468:	000fea80 	call	fea8 <close>
  exit (result);
   1046c:	e13ffb17 	ldw	r4,-20(fp)
   10470:	00203a40 	call	203a4 <exit>

00010474 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   10474:	defffe04 	addi	sp,sp,-8
   10478:	dfc00115 	stw	ra,4(sp)
   1047c:	df000015 	stw	fp,0(sp)
   10480:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   10484:	008000b4 	movhi	r2,2
   10488:	108b1804 	addi	r2,r2,11360
   1048c:	10800017 	ldw	r2,0(r2)
   10490:	10000526 	beq	r2,zero,104a8 <alt_get_errno+0x34>
   10494:	008000b4 	movhi	r2,2
   10498:	108b1804 	addi	r2,r2,11360
   1049c:	10800017 	ldw	r2,0(r2)
   104a0:	103ee83a 	callr	r2
   104a4:	00000206 	br	104b0 <alt_get_errno+0x3c>
   104a8:	008000b4 	movhi	r2,2
   104ac:	1092fd04 	addi	r2,r2,19444
}
   104b0:	e037883a 	mov	sp,fp
   104b4:	dfc00117 	ldw	ra,4(sp)
   104b8:	df000017 	ldw	fp,0(sp)
   104bc:	dec00204 	addi	sp,sp,8
   104c0:	f800283a 	ret

000104c4 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
   104c4:	defff904 	addi	sp,sp,-28
   104c8:	dfc00615 	stw	ra,24(sp)
   104cc:	df000515 	stw	fp,20(sp)
   104d0:	df000504 	addi	fp,sp,20
   104d4:	e13ffd15 	stw	r4,-12(fp)
   104d8:	e17ffe15 	stw	r5,-8(fp)
   104dc:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   104e0:	e0bffd17 	ldw	r2,-12(fp)
   104e4:	10000616 	blt	r2,zero,10500 <read+0x3c>
   104e8:	e0bffd17 	ldw	r2,-12(fp)
   104ec:	10c00324 	muli	r3,r2,12
   104f0:	008000b4 	movhi	r2,2
   104f4:	1085b104 	addi	r2,r2,5828
   104f8:	1885883a 	add	r2,r3,r2
   104fc:	00000106 	br	10504 <read+0x40>
   10500:	0005883a 	mov	r2,zero
   10504:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
   10508:	e0bffb17 	ldw	r2,-20(fp)
   1050c:	10002226 	beq	r2,zero,10598 <read+0xd4>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
   10510:	e0bffb17 	ldw	r2,-20(fp)
   10514:	10800217 	ldw	r2,8(r2)
   10518:	108000cc 	andi	r2,r2,3
   1051c:	10800060 	cmpeqi	r2,r2,1
   10520:	1000181e 	bne	r2,zero,10584 <read+0xc0>
        (fd->dev->read))
   10524:	e0bffb17 	ldw	r2,-20(fp)
   10528:	10800017 	ldw	r2,0(r2)
   1052c:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
   10530:	10001426 	beq	r2,zero,10584 <read+0xc0>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
   10534:	e0bffb17 	ldw	r2,-20(fp)
   10538:	10800017 	ldw	r2,0(r2)
   1053c:	10800517 	ldw	r2,20(r2)
   10540:	e0ffff17 	ldw	r3,-4(fp)
   10544:	e13ffb17 	ldw	r4,-20(fp)
   10548:	e17ffe17 	ldw	r5,-8(fp)
   1054c:	180d883a 	mov	r6,r3
   10550:	103ee83a 	callr	r2
   10554:	e0bffc15 	stw	r2,-16(fp)
   10558:	e0bffc17 	ldw	r2,-16(fp)
   1055c:	1000070e 	bge	r2,zero,1057c <read+0xb8>
        {
          ALT_ERRNO = -rval;
   10560:	00104740 	call	10474 <alt_get_errno>
   10564:	1007883a 	mov	r3,r2
   10568:	e0bffc17 	ldw	r2,-16(fp)
   1056c:	0085c83a 	sub	r2,zero,r2
   10570:	18800015 	stw	r2,0(r3)
          return -1;
   10574:	00bfffc4 	movi	r2,-1
   10578:	00000c06 	br	105ac <read+0xe8>
        }
        return rval;
   1057c:	e0bffc17 	ldw	r2,-16(fp)
   10580:	00000a06 	br	105ac <read+0xe8>
      }
      else
      {
        ALT_ERRNO = EACCES;
   10584:	00104740 	call	10474 <alt_get_errno>
   10588:	1007883a 	mov	r3,r2
   1058c:	00800344 	movi	r2,13
   10590:	18800015 	stw	r2,0(r3)
   10594:	00000406 	br	105a8 <read+0xe4>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
   10598:	00104740 	call	10474 <alt_get_errno>
   1059c:	1007883a 	mov	r3,r2
   105a0:	00801444 	movi	r2,81
   105a4:	18800015 	stw	r2,0(r3)
  }
  return -1;
   105a8:	00bfffc4 	movi	r2,-1
}
   105ac:	e037883a 	mov	sp,fp
   105b0:	dfc00117 	ldw	ra,4(sp)
   105b4:	df000017 	ldw	fp,0(sp)
   105b8:	dec00204 	addi	sp,sp,8
   105bc:	f800283a 	ret

000105c0 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
   105c0:	defffe04 	addi	sp,sp,-8
   105c4:	df000115 	stw	fp,4(sp)
   105c8:	df000104 	addi	fp,sp,4
   105cc:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
   105d0:	e0bfff17 	ldw	r2,-4(fp)
   105d4:	108000d0 	cmplti	r2,r2,3
   105d8:	10000d1e 	bne	r2,zero,10610 <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
   105dc:	008000b4 	movhi	r2,2
   105e0:	1085b104 	addi	r2,r2,5828
   105e4:	e0ffff17 	ldw	r3,-4(fp)
   105e8:	18c00324 	muli	r3,r3,12
   105ec:	18c00204 	addi	r3,r3,8
   105f0:	10c5883a 	add	r2,r2,r3
   105f4:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
   105f8:	008000b4 	movhi	r2,2
   105fc:	1085b104 	addi	r2,r2,5828
   10600:	e0ffff17 	ldw	r3,-4(fp)
   10604:	18c00324 	muli	r3,r3,12
   10608:	10c5883a 	add	r2,r2,r3
   1060c:	10000015 	stw	zero,0(r2)
  }
}
   10610:	e037883a 	mov	sp,fp
   10614:	df000017 	ldw	fp,0(sp)
   10618:	dec00104 	addi	sp,sp,4
   1061c:	f800283a 	ret

00010620 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
   10620:	defff904 	addi	sp,sp,-28
   10624:	df000615 	stw	fp,24(sp)
   10628:	df000604 	addi	fp,sp,24
   1062c:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   10630:	0005303a 	rdctl	r2,status
   10634:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   10638:	e0fffc17 	ldw	r3,-16(fp)
   1063c:	00bfff84 	movi	r2,-2
   10640:	1884703a 	and	r2,r3,r2
   10644:	1001703a 	wrctl	status,r2
  
  return context;
   10648:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
   1064c:	e0bffa15 	stw	r2,-24(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
   10650:	d0a00c17 	ldw	r2,-32720(gp)
   10654:	10c000c4 	addi	r3,r2,3
   10658:	00bfff04 	movi	r2,-4
   1065c:	1884703a 	and	r2,r3,r2
   10660:	d0a00c15 	stw	r2,-32720(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
   10664:	d0e00c17 	ldw	r3,-32720(gp)
   10668:	e0bfff17 	ldw	r2,-4(fp)
   1066c:	1887883a 	add	r3,r3,r2
   10670:	00810034 	movhi	r2,1024
   10674:	10800004 	addi	r2,r2,0
   10678:	10c0062e 	bgeu	r2,r3,10694 <sbrk+0x74>
   1067c:	e0bffa17 	ldw	r2,-24(fp)
   10680:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   10684:	e0bffd17 	ldw	r2,-12(fp)
   10688:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
   1068c:	00bfffc4 	movi	r2,-1
   10690:	00000b06 	br	106c0 <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
   10694:	d0a00c17 	ldw	r2,-32720(gp)
   10698:	e0bffb15 	stw	r2,-20(fp)
  heap_end += incr; 
   1069c:	d0e00c17 	ldw	r3,-32720(gp)
   106a0:	e0bfff17 	ldw	r2,-4(fp)
   106a4:	1885883a 	add	r2,r3,r2
   106a8:	d0a00c15 	stw	r2,-32720(gp)
   106ac:	e0bffa17 	ldw	r2,-24(fp)
   106b0:	e0bffe15 	stw	r2,-8(fp)
   106b4:	e0bffe17 	ldw	r2,-8(fp)
   106b8:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
   106bc:	e0bffb17 	ldw	r2,-20(fp)
} 
   106c0:	e037883a 	mov	sp,fp
   106c4:	df000017 	ldw	fp,0(sp)
   106c8:	dec00104 	addi	sp,sp,4
   106cc:	f800283a 	ret

000106d0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   106d0:	defffe04 	addi	sp,sp,-8
   106d4:	dfc00115 	stw	ra,4(sp)
   106d8:	df000015 	stw	fp,0(sp)
   106dc:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   106e0:	008000b4 	movhi	r2,2
   106e4:	108b1804 	addi	r2,r2,11360
   106e8:	10800017 	ldw	r2,0(r2)
   106ec:	10000526 	beq	r2,zero,10704 <alt_get_errno+0x34>
   106f0:	008000b4 	movhi	r2,2
   106f4:	108b1804 	addi	r2,r2,11360
   106f8:	10800017 	ldw	r2,0(r2)
   106fc:	103ee83a 	callr	r2
   10700:	00000206 	br	1070c <alt_get_errno+0x3c>
   10704:	008000b4 	movhi	r2,2
   10708:	1092fd04 	addi	r2,r2,19444
}
   1070c:	e037883a 	mov	sp,fp
   10710:	dfc00117 	ldw	ra,4(sp)
   10714:	df000017 	ldw	fp,0(sp)
   10718:	dec00204 	addi	sp,sp,8
   1071c:	f800283a 	ret

00010720 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
   10720:	defff904 	addi	sp,sp,-28
   10724:	dfc00615 	stw	ra,24(sp)
   10728:	df000515 	stw	fp,20(sp)
   1072c:	df000504 	addi	fp,sp,20
   10730:	e13ffd15 	stw	r4,-12(fp)
   10734:	e17ffe15 	stw	r5,-8(fp)
   10738:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   1073c:	e0bffd17 	ldw	r2,-12(fp)
   10740:	10000616 	blt	r2,zero,1075c <write+0x3c>
   10744:	e0bffd17 	ldw	r2,-12(fp)
   10748:	10c00324 	muli	r3,r2,12
   1074c:	008000b4 	movhi	r2,2
   10750:	1085b104 	addi	r2,r2,5828
   10754:	1885883a 	add	r2,r3,r2
   10758:	00000106 	br	10760 <write+0x40>
   1075c:	0005883a 	mov	r2,zero
   10760:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
   10764:	e0bffb17 	ldw	r2,-20(fp)
   10768:	10002126 	beq	r2,zero,107f0 <write+0xd0>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
   1076c:	e0bffb17 	ldw	r2,-20(fp)
   10770:	10800217 	ldw	r2,8(r2)
   10774:	108000cc 	andi	r2,r2,3
   10778:	10001826 	beq	r2,zero,107dc <write+0xbc>
   1077c:	e0bffb17 	ldw	r2,-20(fp)
   10780:	10800017 	ldw	r2,0(r2)
   10784:	10800617 	ldw	r2,24(r2)
   10788:	10001426 	beq	r2,zero,107dc <write+0xbc>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
   1078c:	e0bffb17 	ldw	r2,-20(fp)
   10790:	10800017 	ldw	r2,0(r2)
   10794:	10800617 	ldw	r2,24(r2)
   10798:	e0ffff17 	ldw	r3,-4(fp)
   1079c:	e13ffb17 	ldw	r4,-20(fp)
   107a0:	e17ffe17 	ldw	r5,-8(fp)
   107a4:	180d883a 	mov	r6,r3
   107a8:	103ee83a 	callr	r2
   107ac:	e0bffc15 	stw	r2,-16(fp)
   107b0:	e0bffc17 	ldw	r2,-16(fp)
   107b4:	1000070e 	bge	r2,zero,107d4 <write+0xb4>
      {
        ALT_ERRNO = -rval;
   107b8:	00106d00 	call	106d0 <alt_get_errno>
   107bc:	1007883a 	mov	r3,r2
   107c0:	e0bffc17 	ldw	r2,-16(fp)
   107c4:	0085c83a 	sub	r2,zero,r2
   107c8:	18800015 	stw	r2,0(r3)
        return -1;
   107cc:	00bfffc4 	movi	r2,-1
   107d0:	00000c06 	br	10804 <write+0xe4>
      }
      return rval;
   107d4:	e0bffc17 	ldw	r2,-16(fp)
   107d8:	00000a06 	br	10804 <write+0xe4>
    }
    else
    {
      ALT_ERRNO = EACCES;
   107dc:	00106d00 	call	106d0 <alt_get_errno>
   107e0:	1007883a 	mov	r3,r2
   107e4:	00800344 	movi	r2,13
   107e8:	18800015 	stw	r2,0(r3)
   107ec:	00000406 	br	10800 <write+0xe0>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
   107f0:	00106d00 	call	106d0 <alt_get_errno>
   107f4:	1007883a 	mov	r3,r2
   107f8:	00801444 	movi	r2,81
   107fc:	18800015 	stw	r2,0(r3)
  }
  return -1;
   10800:	00bfffc4 	movi	r2,-1
}
   10804:	e037883a 	mov	sp,fp
   10808:	dfc00117 	ldw	ra,4(sp)
   1080c:	df000017 	ldw	fp,0(sp)
   10810:	dec00204 	addi	sp,sp,8
   10814:	f800283a 	ret

00010818 <__env_lock>:
/*
 *
 */

void __env_lock ( struct _reent *_r )
{
   10818:	deffdf04 	addi	sp,sp,-132
   1081c:	dfc02015 	stw	ra,128(sp)
   10820:	df001f15 	stw	fp,124(sp)
   10824:	df001f04 	addi	fp,sp,124
   10828:	e13fff15 	stw	r4,-4(fp)
  INT8U err;
  int id;

  /* use our priority as a task id */

  err = OSTaskQuery( OS_PRIO_SELF, &tcb );
   1082c:	e0bfe204 	addi	r2,fp,-120
   10830:	01003fc4 	movi	r4,255
   10834:	100b883a 	mov	r5,r2
   10838:	00180b40 	call	180b4 <OSTaskQuery>
   1083c:	e0bffe85 	stb	r2,-6(fp)
  if (err != OS_NO_ERR)
   10840:	e0bffe83 	ldbu	r2,-6(fp)
   10844:	10803fcc 	andi	r2,r2,255
   10848:	10000126 	beq	r2,zero,10850 <__env_lock+0x38>
    return;
   1084c:	00001d06 	br	108c4 <__env_lock+0xac>

  id = tcb.OSTCBPrio;
   10850:	e0bfee83 	ldbu	r2,-70(fp)
   10854:	10803fcc 	andi	r2,r2,255
   10858:	e0bfe115 	stw	r2,-124(fp)
   
  /* see if we own the environment already */

  OSSemQuery( alt_envsem, &semdata );
   1085c:	d0e7f917 	ldw	r3,-24604(gp)
   10860:	e0bffd04 	addi	r2,fp,-12
   10864:	1809883a 	mov	r4,r3
   10868:	100b883a 	mov	r5,r2
   1086c:	001674c0 	call	1674c <OSSemQuery>
  if( semdata.OSEventGrp && id == lockid ) 
   10870:	e0bffe43 	ldbu	r2,-7(fp)
   10874:	10803fcc 	andi	r2,r2,255
   10878:	10000726 	beq	r2,zero,10898 <__env_lock+0x80>
   1087c:	d0a00d17 	ldw	r2,-32716(gp)
   10880:	e0ffe117 	ldw	r3,-124(fp)
   10884:	1880041e 	bne	r3,r2,10898 <__env_lock+0x80>
  {
    /* we do; just count the recursion */

    locks++;
   10888:	d0a7f817 	ldw	r2,-24608(gp)
   1088c:	10800044 	addi	r2,r2,1
   10890:	d0a7f815 	stw	r2,-24608(gp)
   10894:	00000a06 	br	108c0 <__env_lock+0xa8>
  }
  else 
  {
    /* wait on the other task to yield, then claim ownership */

    OSSemPend( alt_envsem, 0, &err );
   10898:	d0e7f917 	ldw	r3,-24604(gp)
   1089c:	e0bffe84 	addi	r2,fp,-6
   108a0:	1809883a 	mov	r4,r3
   108a4:	000b883a 	mov	r5,zero
   108a8:	100d883a 	mov	r6,r2
   108ac:	00162680 	call	16268 <OSSemPend>
    locks  = 1;
   108b0:	00800044 	movi	r2,1
   108b4:	d0a7f815 	stw	r2,-24608(gp)
    lockid = id;
   108b8:	e0bfe117 	ldw	r2,-124(fp)
   108bc:	d0a00d15 	stw	r2,-32716(gp)
  }

#endif /* OS_THREAD_SAFE_NEWLIB */
  return;
   108c0:	0001883a 	nop
}
   108c4:	e037883a 	mov	sp,fp
   108c8:	dfc00117 	ldw	ra,4(sp)
   108cc:	df000017 	ldw	fp,0(sp)
   108d0:	dec00204 	addi	sp,sp,8
   108d4:	f800283a 	ret

000108d8 <__env_unlock>:
/*
 *
 */

void __env_unlock ( struct _reent *_r )
{
   108d8:	defffd04 	addi	sp,sp,-12
   108dc:	dfc00215 	stw	ra,8(sp)
   108e0:	df000115 	stw	fp,4(sp)
   108e4:	df000104 	addi	fp,sp,4
   108e8:	e13fff15 	stw	r4,-4(fp)
#if OS_THREAD_SAFE_NEWLIB
  if (locks == 0)
   108ec:	d0a7f817 	ldw	r2,-24608(gp)
   108f0:	1000011e 	bne	r2,zero,108f8 <__env_unlock+0x20>
    return;
   108f4:	00000a06 	br	10920 <__env_unlock+0x48>
   /* 
    * release the environment once the number of locks == the number 
    * of unlocks 
    */

  if( (--locks) == 0 ) 
   108f8:	d0a7f817 	ldw	r2,-24608(gp)
   108fc:	10bfffc4 	addi	r2,r2,-1
   10900:	d0a7f815 	stw	r2,-24608(gp)
   10904:	d0a7f817 	ldw	r2,-24608(gp)
   10908:	1000051e 	bne	r2,zero,10920 <__env_unlock+0x48>
  {
    lockid = -1;
   1090c:	00bfffc4 	movi	r2,-1
   10910:	d0a00d15 	stw	r2,-32716(gp)
    OSSemPost( alt_envsem );
   10914:	d0a7f917 	ldw	r2,-24604(gp)
   10918:	1009883a 	mov	r4,r2
   1091c:	001663c0 	call	1663c <OSSemPost>
  }
#endif /* OS_THREAD_SAFE_NEWLIB */
}
   10920:	e037883a 	mov	sp,fp
   10924:	dfc00117 	ldw	ra,4(sp)
   10928:	df000017 	ldw	fp,0(sp)
   1092c:	dec00204 	addi	sp,sp,8
   10930:	f800283a 	ret

00010934 <__malloc_lock>:
/*
 *
 */

void __malloc_lock ( struct _reent *_r )
{
   10934:	deffdb04 	addi	sp,sp,-148
   10938:	dfc02415 	stw	ra,144(sp)
   1093c:	df002315 	stw	fp,140(sp)
   10940:	df002304 	addi	fp,sp,140
   10944:	e13fff15 	stw	r4,-4(fp)
  OS_TCB tcb;
  OS_SEM_DATA semdata;
  INT8U err;
  int id;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   10948:	e03fdd15 	stw	zero,-140(fp)
#endif  
  
  if (OSRunning != OS_TRUE)
   1094c:	008000b4 	movhi	r2,2
   10950:	10930944 	addi	r2,r2,19493
   10954:	10800003 	ldbu	r2,0(r2)
   10958:	10803fcc 	andi	r2,r2,255
   1095c:	10800060 	cmpeqi	r2,r2,1
   10960:	1000011e 	bne	r2,zero,10968 <__malloc_lock+0x34>
      return;
   10964:	00003606 	br	10a40 <__malloc_lock+0x10c>

  /* use our priority as a task id */

  err = OSTaskQuery( OS_PRIO_SELF, &tcb );
   10968:	e0bfe204 	addi	r2,fp,-120
   1096c:	01003fc4 	movi	r4,255
   10970:	100b883a 	mov	r5,r2
   10974:	00180b40 	call	180b4 <OSTaskQuery>
   10978:	e0bffe85 	stb	r2,-6(fp)
  if (err != OS_NO_ERR)
   1097c:	e0bffe83 	ldbu	r2,-6(fp)
   10980:	10803fcc 	andi	r2,r2,255
   10984:	10000126 	beq	r2,zero,1098c <__malloc_lock+0x58>
    return;
   10988:	00002d06 	br	10a40 <__malloc_lock+0x10c>

  id = tcb.OSTCBPrio;
   1098c:	e0bfee83 	ldbu	r2,-70(fp)
   10990:	10803fcc 	andi	r2,r2,255
   10994:	e0bfde15 	stw	r2,-136(fp)
   
  /* see if we own the heap already */

  OSSemQuery( alt_heapsem, &semdata );
   10998:	d0e7fb17 	ldw	r3,-24596(gp)
   1099c:	e0bffd04 	addi	r2,fp,-12
   109a0:	1809883a 	mov	r4,r3
   109a4:	100b883a 	mov	r5,r2
   109a8:	001674c0 	call	1674c <OSSemQuery>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   109ac:	0005303a 	rdctl	r2,status
   109b0:	e0bfdf15 	stw	r2,-132(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   109b4:	e0ffdf17 	ldw	r3,-132(fp)
   109b8:	00bfff84 	movi	r2,-2
   109bc:	1884703a 	and	r2,r3,r2
   109c0:	1001703a 	wrctl	status,r2
  
  return context;
   109c4:	e0bfdf17 	ldw	r2,-132(fp)
  
  OS_ENTER_CRITICAL();
   109c8:	e0bfdd15 	stw	r2,-140(fp)

  if( !semdata.OSCnt && id == lockid ) 
   109cc:	e0bffd0b 	ldhu	r2,-12(fp)
   109d0:	10bfffcc 	andi	r2,r2,65535
   109d4:	10000b1e 	bne	r2,zero,10a04 <__malloc_lock+0xd0>
   109d8:	d0a00e17 	ldw	r2,-32712(gp)
   109dc:	e0ffde17 	ldw	r3,-136(fp)
   109e0:	1880081e 	bne	r3,r2,10a04 <__malloc_lock+0xd0>
  {
    /* we do; just count the recursion */
    locks++;
   109e4:	d0a7fa17 	ldw	r2,-24600(gp)
   109e8:	10800044 	addi	r2,r2,1
   109ec:	d0a7fa15 	stw	r2,-24600(gp)
   109f0:	e0bfdd17 	ldw	r2,-140(fp)
   109f4:	e0bfe015 	stw	r2,-128(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   109f8:	e0bfe017 	ldw	r2,-128(fp)
   109fc:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
   10a00:	00000e06 	br	10a3c <__malloc_lock+0x108>
   10a04:	e0bfdd17 	ldw	r2,-140(fp)
   10a08:	e0bfe115 	stw	r2,-124(fp)
   10a0c:	e0bfe117 	ldw	r2,-124(fp)
   10a10:	1001703a 	wrctl	status,r2
  else 
  {
    /* wait on the other task to yield the heap, then claim ownership of it */
    OS_EXIT_CRITICAL();

    OSSemPend( alt_heapsem, 0, &err );
   10a14:	d0e7fb17 	ldw	r3,-24596(gp)
   10a18:	e0bffe84 	addi	r2,fp,-6
   10a1c:	1809883a 	mov	r4,r3
   10a20:	000b883a 	mov	r5,zero
   10a24:	100d883a 	mov	r6,r2
   10a28:	00162680 	call	16268 <OSSemPend>
    locks  = 1;
   10a2c:	00800044 	movi	r2,1
   10a30:	d0a7fa15 	stw	r2,-24600(gp)
    lockid = id;
   10a34:	e0bfde17 	ldw	r2,-136(fp)
   10a38:	d0a00e15 	stw	r2,-32712(gp)
  }

#endif /* OS_THREAD_SAFE_NEWLIB */
  return;
   10a3c:	0001883a 	nop
}
   10a40:	e037883a 	mov	sp,fp
   10a44:	dfc00117 	ldw	ra,4(sp)
   10a48:	df000017 	ldw	fp,0(sp)
   10a4c:	dec00204 	addi	sp,sp,8
   10a50:	f800283a 	ret

00010a54 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
   10a54:	defff804 	addi	sp,sp,-32
   10a58:	dfc00715 	stw	ra,28(sp)
   10a5c:	df000615 	stw	fp,24(sp)
   10a60:	df000604 	addi	fp,sp,24
   10a64:	e13fff15 	stw	r4,-4(fp)
#if OS_THREAD_SAFE_NEWLIB

#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   10a68:	e03ffa15 	stw	zero,-24(fp)
#endif 

  if (OSRunning != OS_TRUE)
   10a6c:	008000b4 	movhi	r2,2
   10a70:	10930944 	addi	r2,r2,19493
   10a74:	10800003 	ldbu	r2,0(r2)
   10a78:	10803fcc 	andi	r2,r2,255
   10a7c:	10800060 	cmpeqi	r2,r2,1
   10a80:	1000011e 	bne	r2,zero,10a88 <__malloc_unlock+0x34>
      return;
   10a84:	00002206 	br	10b10 <__malloc_unlock+0xbc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   10a88:	0005303a 	rdctl	r2,status
   10a8c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   10a90:	e0fffb17 	ldw	r3,-20(fp)
   10a94:	00bfff84 	movi	r2,-2
   10a98:	1884703a 	and	r2,r3,r2
   10a9c:	1001703a 	wrctl	status,r2
  
  return context;
   10aa0:	e0bffb17 	ldw	r2,-20(fp)

  OS_ENTER_CRITICAL();
   10aa4:	e0bffa15 	stw	r2,-24(fp)
  if (locks == 0)
   10aa8:	d0a7fa17 	ldw	r2,-24600(gp)
   10aac:	1000051e 	bne	r2,zero,10ac4 <__malloc_unlock+0x70>
   10ab0:	e0bffa17 	ldw	r2,-24(fp)
   10ab4:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   10ab8:	e0bffc17 	ldw	r2,-16(fp)
   10abc:	1001703a 	wrctl	status,r2
  {
      OS_EXIT_CRITICAL();
      return;
   10ac0:	00001306 	br	10b10 <__malloc_unlock+0xbc>
  }

  /* release the heap once the number of locks == the number of unlocks */
  if( (--locks) == 0 ) 
   10ac4:	d0a7fa17 	ldw	r2,-24600(gp)
   10ac8:	10bfffc4 	addi	r2,r2,-1
   10acc:	d0a7fa15 	stw	r2,-24600(gp)
   10ad0:	d0a7fa17 	ldw	r2,-24600(gp)
   10ad4:	10000a1e 	bne	r2,zero,10b00 <__malloc_unlock+0xac>
  {
    lockid = -1;
   10ad8:	00bfffc4 	movi	r2,-1
   10adc:	d0a00e15 	stw	r2,-32712(gp)
   10ae0:	e0bffa17 	ldw	r2,-24(fp)
   10ae4:	e0bffd15 	stw	r2,-12(fp)
   10ae8:	e0bffd17 	ldw	r2,-12(fp)
   10aec:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    OSSemPost( alt_heapsem );
   10af0:	d0a7fb17 	ldw	r2,-24596(gp)
   10af4:	1009883a 	mov	r4,r2
   10af8:	001663c0 	call	1663c <OSSemPost>
   10afc:	00000406 	br	10b10 <__malloc_unlock+0xbc>
   10b00:	e0bffa17 	ldw	r2,-24(fp)
   10b04:	e0bffe15 	stw	r2,-8(fp)
   10b08:	e0bffe17 	ldw	r2,-8(fp)
   10b0c:	1001703a 	wrctl	status,r2
  {
      OS_EXIT_CRITICAL();
  }
  
#endif /* OS_THREAD_SAFE_NEWLIB */
}
   10b10:	e037883a 	mov	sp,fp
   10b14:	dfc00117 	ldw	ra,4(sp)
   10b18:	df000017 	ldw	fp,0(sp)
   10b1c:	dec00204 	addi	sp,sp,8
   10b20:	f800283a 	ret

00010b24 <OSEventNameGet>:
*********************************************************************************************************
*/

#if (OS_EVENT_EN) && (OS_EVENT_NAME_SIZE > 1)
INT8U  OSEventNameGet (OS_EVENT *pevent, INT8U *pname, INT8U *perr)
{
   10b24:	defff704 	addi	sp,sp,-36
   10b28:	dfc00815 	stw	ra,32(sp)
   10b2c:	df000715 	stw	fp,28(sp)
   10b30:	df000704 	addi	fp,sp,28
   10b34:	e13ffd15 	stw	r4,-12(fp)
   10b38:	e17ffe15 	stw	r5,-8(fp)
   10b3c:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   10b40:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
   10b44:	e0bfff17 	ldw	r2,-4(fp)
   10b48:	1000021e 	bne	r2,zero,10b54 <OSEventNameGet+0x30>
        return (0);
   10b4c:	0005883a 	mov	r2,zero
   10b50:	00003706 	br	10c30 <OSEventNameGet+0x10c>
    }
    if (pevent == (OS_EVENT *)0) {               /* Is 'pevent' a NULL pointer?                        */
   10b54:	e0bffd17 	ldw	r2,-12(fp)
   10b58:	1000051e 	bne	r2,zero,10b70 <OSEventNameGet+0x4c>
        *perr = OS_ERR_PEVENT_NULL;
   10b5c:	e0bfff17 	ldw	r2,-4(fp)
   10b60:	00c00104 	movi	r3,4
   10b64:	10c00005 	stb	r3,0(r2)
        return (0);
   10b68:	0005883a 	mov	r2,zero
   10b6c:	00003006 	br	10c30 <OSEventNameGet+0x10c>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
   10b70:	e0bffe17 	ldw	r2,-8(fp)
   10b74:	1000051e 	bne	r2,zero,10b8c <OSEventNameGet+0x68>
        *perr = OS_ERR_PNAME_NULL;
   10b78:	e0bfff17 	ldw	r2,-4(fp)
   10b7c:	00c00304 	movi	r3,12
   10b80:	10c00005 	stb	r3,0(r2)
        return (0);
   10b84:	0005883a 	mov	r2,zero
   10b88:	00002906 	br	10c30 <OSEventNameGet+0x10c>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
   10b8c:	d0a80a03 	ldbu	r2,-24536(gp)
   10b90:	10803fcc 	andi	r2,r2,255
   10b94:	10000526 	beq	r2,zero,10bac <OSEventNameGet+0x88>
        *perr  = OS_ERR_NAME_GET_ISR;
   10b98:	e0bfff17 	ldw	r2,-4(fp)
   10b9c:	00c00444 	movi	r3,17
   10ba0:	10c00005 	stb	r3,0(r2)
        return (0);
   10ba4:	0005883a 	mov	r2,zero
   10ba8:	00002106 	br	10c30 <OSEventNameGet+0x10c>
    }
    switch (pevent->OSEventType) {
   10bac:	e0bffd17 	ldw	r2,-12(fp)
   10bb0:	10800003 	ldbu	r2,0(r2)
   10bb4:	10803fcc 	andi	r2,r2,255
   10bb8:	10bfffc4 	addi	r2,r2,-1
   10bbc:	10800128 	cmpgeui	r2,r2,4
   10bc0:	10000526 	beq	r2,zero,10bd8 <OSEventNameGet+0xb4>
        case OS_EVENT_TYPE_MBOX:
        case OS_EVENT_TYPE_Q:
             break;

        default:
             *perr = OS_ERR_EVENT_TYPE;
   10bc4:	e0bfff17 	ldw	r2,-4(fp)
   10bc8:	00c00044 	movi	r3,1
   10bcc:	10c00005 	stb	r3,0(r2)
             return (0);
   10bd0:	0005883a 	mov	r2,zero
   10bd4:	00001606 	br	10c30 <OSEventNameGet+0x10c>
    switch (pevent->OSEventType) {
        case OS_EVENT_TYPE_SEM:
        case OS_EVENT_TYPE_MUTEX:
        case OS_EVENT_TYPE_MBOX:
        case OS_EVENT_TYPE_Q:
             break;
   10bd8:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   10bdc:	0005303a 	rdctl	r2,status
   10be0:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   10be4:	e0fffb17 	ldw	r3,-20(fp)
   10be8:	00bfff84 	movi	r2,-2
   10bec:	1884703a 	and	r2,r3,r2
   10bf0:	1001703a 	wrctl	status,r2
  
  return context;
   10bf4:	e0bffb17 	ldw	r2,-20(fp)

        default:
             *perr = OS_ERR_EVENT_TYPE;
             return (0);
    }
    OS_ENTER_CRITICAL();
   10bf8:	e0bff915 	stw	r2,-28(fp)
    len   = OS_StrCopy(pname, pevent->OSEventName);   /* Copy name from OS_EVENT                       */
   10bfc:	e0bffd17 	ldw	r2,-12(fp)
   10c00:	10800384 	addi	r2,r2,14
   10c04:	e13ffe17 	ldw	r4,-8(fp)
   10c08:	100b883a 	mov	r5,r2
   10c0c:	00125780 	call	12578 <OS_StrCopy>
   10c10:	e0bffa05 	stb	r2,-24(fp)
   10c14:	e0bff917 	ldw	r2,-28(fp)
   10c18:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   10c1c:	e0bffc17 	ldw	r2,-16(fp)
   10c20:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
   10c24:	e0bfff17 	ldw	r2,-4(fp)
   10c28:	10000005 	stb	zero,0(r2)
    return (len);
   10c2c:	e0bffa03 	ldbu	r2,-24(fp)
}
   10c30:	e037883a 	mov	sp,fp
   10c34:	dfc00117 	ldw	ra,4(sp)
   10c38:	df000017 	ldw	fp,0(sp)
   10c3c:	dec00204 	addi	sp,sp,8
   10c40:	f800283a 	ret

00010c44 <OSEventNameSet>:
*********************************************************************************************************
*/

#if (OS_EVENT_EN) && (OS_EVENT_NAME_SIZE > 1)
void  OSEventNameSet (OS_EVENT *pevent, INT8U *pname, INT8U *perr)
{
   10c44:	defff604 	addi	sp,sp,-40
   10c48:	dfc00915 	stw	ra,36(sp)
   10c4c:	df000815 	stw	fp,32(sp)
   10c50:	df000804 	addi	fp,sp,32
   10c54:	e13ffd15 	stw	r4,-12(fp)
   10c58:	e17ffe15 	stw	r5,-8(fp)
   10c5c:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   10c60:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
   10c64:	e0bfff17 	ldw	r2,-4(fp)
   10c68:	1000011e 	bne	r2,zero,10c70 <OSEventNameSet+0x2c>
        return;
   10c6c:	00003f06 	br	10d6c <OSEventNameSet+0x128>
    }
    if (pevent == (OS_EVENT *)0) {               /* Is 'pevent' a NULL pointer?                        */
   10c70:	e0bffd17 	ldw	r2,-12(fp)
   10c74:	1000041e 	bne	r2,zero,10c88 <OSEventNameSet+0x44>
        *perr = OS_ERR_PEVENT_NULL;
   10c78:	e0bfff17 	ldw	r2,-4(fp)
   10c7c:	00c00104 	movi	r3,4
   10c80:	10c00005 	stb	r3,0(r2)
        return;
   10c84:	00003906 	br	10d6c <OSEventNameSet+0x128>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
   10c88:	e0bffe17 	ldw	r2,-8(fp)
   10c8c:	1000041e 	bne	r2,zero,10ca0 <OSEventNameSet+0x5c>
        *perr = OS_ERR_PNAME_NULL;
   10c90:	e0bfff17 	ldw	r2,-4(fp)
   10c94:	00c00304 	movi	r3,12
   10c98:	10c00005 	stb	r3,0(r2)
        return;
   10c9c:	00003306 	br	10d6c <OSEventNameSet+0x128>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
   10ca0:	d0a80a03 	ldbu	r2,-24536(gp)
   10ca4:	10803fcc 	andi	r2,r2,255
   10ca8:	10000426 	beq	r2,zero,10cbc <OSEventNameSet+0x78>
        *perr = OS_ERR_NAME_SET_ISR;
   10cac:	e0bfff17 	ldw	r2,-4(fp)
   10cb0:	00c00484 	movi	r3,18
   10cb4:	10c00005 	stb	r3,0(r2)
        return;
   10cb8:	00002c06 	br	10d6c <OSEventNameSet+0x128>
    }
    switch (pevent->OSEventType) {
   10cbc:	e0bffd17 	ldw	r2,-12(fp)
   10cc0:	10800003 	ldbu	r2,0(r2)
   10cc4:	10803fcc 	andi	r2,r2,255
   10cc8:	10bfffc4 	addi	r2,r2,-1
   10ccc:	10800128 	cmpgeui	r2,r2,4
   10cd0:	10000426 	beq	r2,zero,10ce4 <OSEventNameSet+0xa0>
        case OS_EVENT_TYPE_MBOX:
        case OS_EVENT_TYPE_Q:
             break;

        default:
             *perr = OS_ERR_EVENT_TYPE;
   10cd4:	e0bfff17 	ldw	r2,-4(fp)
   10cd8:	00c00044 	movi	r3,1
   10cdc:	10c00005 	stb	r3,0(r2)
             return;
   10ce0:	00002206 	br	10d6c <OSEventNameSet+0x128>
    switch (pevent->OSEventType) {
        case OS_EVENT_TYPE_SEM:
        case OS_EVENT_TYPE_MUTEX:
        case OS_EVENT_TYPE_MBOX:
        case OS_EVENT_TYPE_Q:
             break;
   10ce4:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   10ce8:	0005303a 	rdctl	r2,status
   10cec:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   10cf0:	e0fffa17 	ldw	r3,-24(fp)
   10cf4:	00bfff84 	movi	r2,-2
   10cf8:	1884703a 	and	r2,r3,r2
   10cfc:	1001703a 	wrctl	status,r2
  
  return context;
   10d00:	e0bffa17 	ldw	r2,-24(fp)

        default:
             *perr = OS_ERR_EVENT_TYPE;
             return;
    }
    OS_ENTER_CRITICAL();
   10d04:	e0bff815 	stw	r2,-32(fp)
    len = OS_StrLen(pname);                           /* Can we fit the string in the storage area?    */
   10d08:	e13ffe17 	ldw	r4,-8(fp)
   10d0c:	00125ec0 	call	125ec <OS_StrLen>
   10d10:	e0bff905 	stb	r2,-28(fp)
    if (len > (OS_EVENT_NAME_SIZE - 1)) {             /* No                                            */
   10d14:	e0bff903 	ldbu	r2,-28(fp)
   10d18:	10800830 	cmpltui	r2,r2,32
   10d1c:	1000081e 	bne	r2,zero,10d40 <OSEventNameSet+0xfc>
   10d20:	e0bff817 	ldw	r2,-32(fp)
   10d24:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   10d28:	e0bffb17 	ldw	r2,-20(fp)
   10d2c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_EVENT_NAME_TOO_LONG;
   10d30:	e0bfff17 	ldw	r2,-4(fp)
   10d34:	00c002c4 	movi	r3,11
   10d38:	10c00005 	stb	r3,0(r2)
        return;
   10d3c:	00000b06 	br	10d6c <OSEventNameSet+0x128>
    }
    (void)OS_StrCopy(pevent->OSEventName, pname);     /* Yes, copy name to the event control block     */
   10d40:	e0bffd17 	ldw	r2,-12(fp)
   10d44:	10800384 	addi	r2,r2,14
   10d48:	1009883a 	mov	r4,r2
   10d4c:	e17ffe17 	ldw	r5,-8(fp)
   10d50:	00125780 	call	12578 <OS_StrCopy>
   10d54:	e0bff817 	ldw	r2,-32(fp)
   10d58:	e0bffc15 	stw	r2,-16(fp)
   10d5c:	e0bffc17 	ldw	r2,-16(fp)
   10d60:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
   10d64:	e0bfff17 	ldw	r2,-4(fp)
   10d68:	10000005 	stb	zero,0(r2)
}
   10d6c:	e037883a 	mov	sp,fp
   10d70:	dfc00117 	ldw	ra,4(sp)
   10d74:	df000017 	ldw	fp,0(sp)
   10d78:	dec00204 	addi	sp,sp,8
   10d7c:	f800283a 	ret

00010d80 <OSEventPendMulti>:
*********************************************************************************************************
*/
/*$PAGE*/
#if ((OS_EVENT_EN) && (OS_EVENT_MULTI_EN > 0))
INT16U  OSEventPendMulti (OS_EVENT **pevents_pend, OS_EVENT **pevents_rdy, void **pmsgs_rdy, INT16U timeout, INT8U *perr)
{
   10d80:	deffed04 	addi	sp,sp,-76
   10d84:	dfc01215 	stw	ra,72(sp)
   10d88:	df001115 	stw	fp,68(sp)
   10d8c:	df001104 	addi	fp,sp,68
   10d90:	e13ffc15 	stw	r4,-16(fp)
   10d94:	e17ffd15 	stw	r5,-12(fp)
   10d98:	e1bffe15 	stw	r6,-8(fp)
   10d9c:	3805883a 	mov	r2,r7
   10da0:	e0bfff0d 	sth	r2,-4(fp)
#endif
    BOOLEAN     events_rdy;
    INT16U      events_rdy_nbr;
    INT8U       events_stat;
#if (OS_CRITICAL_METHOD == 3)                           /* Allocate storage for CPU status register    */
    OS_CPU_SR   cpu_sr = 0;
   10da4:	e03ff315 	stw	zero,-52(fp)
#endif



#if (OS_ARG_CHK_EN > 0)
    if (perr == (INT8U *)0) {                           /* Validate 'perr'                             */
   10da8:	e0800217 	ldw	r2,8(fp)
   10dac:	1000021e 	bne	r2,zero,10db8 <OSEventPendMulti+0x38>
        return (0);
   10db0:	0005883a 	mov	r2,zero
   10db4:	00017106 	br	1137c <OSEventPendMulti+0x5fc>
    }
    if (pevents_pend == (OS_EVENT **)0) {               /* Validate 'pevents_pend'                     */
   10db8:	e0bffc17 	ldw	r2,-16(fp)
   10dbc:	1000051e 	bne	r2,zero,10dd4 <OSEventPendMulti+0x54>
       *perr =  OS_ERR_PEVENT_NULL;
   10dc0:	e0800217 	ldw	r2,8(fp)
   10dc4:	00c00104 	movi	r3,4
   10dc8:	10c00005 	stb	r3,0(r2)
        return (0);
   10dcc:	0005883a 	mov	r2,zero
   10dd0:	00016a06 	br	1137c <OSEventPendMulti+0x5fc>
    }
    if (pevents_rdy  == (OS_EVENT **)0) {               /* Validate 'pevents_rdy'                      */
   10dd4:	e0bffd17 	ldw	r2,-12(fp)
   10dd8:	1000051e 	bne	r2,zero,10df0 <OSEventPendMulti+0x70>
       *perr =  OS_ERR_PEVENT_NULL;
   10ddc:	e0800217 	ldw	r2,8(fp)
   10de0:	00c00104 	movi	r3,4
   10de4:	10c00005 	stb	r3,0(r2)
        return (0);
   10de8:	0005883a 	mov	r2,zero
   10dec:	00016306 	br	1137c <OSEventPendMulti+0x5fc>
    }
    if (pmsgs_rdy == (void **)0) {                      /* Validate 'pmsgs_rdy'                        */
   10df0:	e0bffe17 	ldw	r2,-8(fp)
   10df4:	1000051e 	bne	r2,zero,10e0c <OSEventPendMulti+0x8c>
       *perr =  OS_ERR_PEVENT_NULL;
   10df8:	e0800217 	ldw	r2,8(fp)
   10dfc:	00c00104 	movi	r3,4
   10e00:	10c00005 	stb	r3,0(r2)
        return (0);
   10e04:	0005883a 	mov	r2,zero
   10e08:	00015c06 	br	1137c <OSEventPendMulti+0x5fc>
    }
#endif

   *pevents_rdy = (OS_EVENT *)0;                        /* Init array to NULL in case of errors        */
   10e0c:	e0bffd17 	ldw	r2,-12(fp)
   10e10:	10000015 	stw	zero,0(r2)

    pevents     =  pevents_pend;
   10e14:	e0bffc17 	ldw	r2,-16(fp)
   10e18:	e0bfef15 	stw	r2,-68(fp)
    pevent      = *pevents;
   10e1c:	e0bfef17 	ldw	r2,-68(fp)
   10e20:	10800017 	ldw	r2,0(r2)
   10e24:	e0bff015 	stw	r2,-64(fp)
    while  (pevent != (OS_EVENT *)0) {
   10e28:	00001906 	br	10e90 <OSEventPendMulti+0x110>
        switch (pevent->OSEventType) {                  /* Validate event block types                  */
   10e2c:	e0bff017 	ldw	r2,-64(fp)
   10e30:	10800003 	ldbu	r2,0(r2)
   10e34:	10803fcc 	andi	r2,r2,255
   10e38:	10c000a0 	cmpeqi	r3,r2,2
   10e3c:	1800091e 	bne	r3,zero,10e64 <OSEventPendMulti+0xe4>
   10e40:	10c000e0 	cmpeqi	r3,r2,3
   10e44:	1800091e 	bne	r3,zero,10e6c <OSEventPendMulti+0xec>
   10e48:	10800060 	cmpeqi	r2,r2,1
   10e4c:	1000091e 	bne	r2,zero,10e74 <OSEventPendMulti+0xf4>
#endif

            case OS_EVENT_TYPE_MUTEX:                                            
            case OS_EVENT_TYPE_FLAG:
            default:           
                *perr = OS_ERR_EVENT_TYPE;
   10e50:	e0800217 	ldw	r2,8(fp)
   10e54:	00c00044 	movi	r3,1
   10e58:	10c00005 	stb	r3,0(r2)
                 return (0);
   10e5c:	0005883a 	mov	r2,zero
   10e60:	00014606 	br	1137c <OSEventPendMulti+0x5fc>
            case OS_EVENT_TYPE_MBOX:
                 break;
#endif
#if ((OS_Q_EN   > 0) && (OS_MAX_QS > 0))
            case OS_EVENT_TYPE_Q:
                 break;
   10e64:	0001883a 	nop
   10e68:	00000306 	br	10e78 <OSEventPendMulti+0xf8>
    pevent      = *pevents;
    while  (pevent != (OS_EVENT *)0) {
        switch (pevent->OSEventType) {                  /* Validate event block types                  */
#if (OS_SEM_EN  > 0)
            case OS_EVENT_TYPE_SEM:
                 break;
   10e6c:	0001883a 	nop
   10e70:	00000106 	br	10e78 <OSEventPendMulti+0xf8>
#endif
#if (OS_MBOX_EN > 0)
            case OS_EVENT_TYPE_MBOX:
                 break;
   10e74:	0001883a 	nop
            case OS_EVENT_TYPE_FLAG:
            default:           
                *perr = OS_ERR_EVENT_TYPE;
                 return (0);
        }
        pevents++;
   10e78:	e0bfef17 	ldw	r2,-68(fp)
   10e7c:	10800104 	addi	r2,r2,4
   10e80:	e0bfef15 	stw	r2,-68(fp)
        pevent = *pevents;
   10e84:	e0bfef17 	ldw	r2,-68(fp)
   10e88:	10800017 	ldw	r2,0(r2)
   10e8c:	e0bff015 	stw	r2,-64(fp)

   *pevents_rdy = (OS_EVENT *)0;                        /* Init array to NULL in case of errors        */

    pevents     =  pevents_pend;
    pevent      = *pevents;
    while  (pevent != (OS_EVENT *)0) {
   10e90:	e0bff017 	ldw	r2,-64(fp)
   10e94:	103fe51e 	bne	r2,zero,10e2c <__alt_mem_Flash_flash_data+0xf4010e2c>
        }
        pevents++;
        pevent = *pevents;
    }

    if (OSIntNesting  > 0) {                            /* See if called from ISR ...                  */
   10e98:	d0a80a03 	ldbu	r2,-24536(gp)
   10e9c:	10803fcc 	andi	r2,r2,255
   10ea0:	10000526 	beq	r2,zero,10eb8 <OSEventPendMulti+0x138>
       *perr =  OS_ERR_PEND_ISR;                        /* ... can't PEND from an ISR                  */
   10ea4:	e0800217 	ldw	r2,8(fp)
   10ea8:	00c00084 	movi	r3,2
   10eac:	10c00005 	stb	r3,0(r2)
        return (0);
   10eb0:	0005883a 	mov	r2,zero
   10eb4:	00013106 	br	1137c <OSEventPendMulti+0x5fc>
    }
    if (OSLockNesting > 0) {                            /* See if called with scheduler locked ...     */
   10eb8:	d0a7fc03 	ldbu	r2,-24592(gp)
   10ebc:	10803fcc 	andi	r2,r2,255
   10ec0:	10000526 	beq	r2,zero,10ed8 <OSEventPendMulti+0x158>
       *perr =  OS_ERR_PEND_LOCKED;                     /* ... can't PEND when locked                  */
   10ec4:	e0800217 	ldw	r2,8(fp)
   10ec8:	00c00344 	movi	r3,13
   10ecc:	10c00005 	stb	r3,0(r2)
        return (0);
   10ed0:	0005883a 	mov	r2,zero
   10ed4:	00012906 	br	1137c <OSEventPendMulti+0x5fc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   10ed8:	0005303a 	rdctl	r2,status
   10edc:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   10ee0:	e0fff517 	ldw	r3,-44(fp)
   10ee4:	00bfff84 	movi	r2,-2
   10ee8:	1884703a 	and	r2,r3,r2
   10eec:	1001703a 	wrctl	status,r2
  
  return context;
   10ef0:	e0bff517 	ldw	r2,-44(fp)
    }

/*$PAGE*/
    OS_ENTER_CRITICAL();
   10ef4:	e0bff315 	stw	r2,-52(fp)
    events_rdy     =  OS_FALSE;
   10ef8:	e03ff105 	stb	zero,-60(fp)
    events_rdy_nbr =  0;
   10efc:	e03ff18d 	sth	zero,-58(fp)
    events_stat    =  OS_STAT_RDY;
   10f00:	e03ff205 	stb	zero,-56(fp)
    pevents        =  pevents_pend;
   10f04:	e0bffc17 	ldw	r2,-16(fp)
   10f08:	e0bfef15 	stw	r2,-68(fp)
    pevent         = *pevents;
   10f0c:	e0bfef17 	ldw	r2,-68(fp)
   10f10:	10800017 	ldw	r2,0(r2)
   10f14:	e0bff015 	stw	r2,-64(fp)
    while (pevent != (OS_EVENT *)0) {                   /* See if any events already available         */
   10f18:	00008106 	br	11120 <OSEventPendMulti+0x3a0>
        switch (pevent->OSEventType) {
   10f1c:	e0bff017 	ldw	r2,-64(fp)
   10f20:	10800003 	ldbu	r2,0(r2)
   10f24:	10803fcc 	andi	r2,r2,255
   10f28:	10c000a0 	cmpeqi	r3,r2,2
   10f2c:	18003c1e 	bne	r3,zero,11020 <OSEventPendMulti+0x2a0>
   10f30:	10c000e0 	cmpeqi	r3,r2,3
   10f34:	1800031e 	bne	r3,zero,10f44 <OSEventPendMulti+0x1c4>
   10f38:	10800060 	cmpeqi	r2,r2,1
   10f3c:	10001e1e 	bne	r2,zero,10fb8 <OSEventPendMulti+0x238>
   10f40:	00006606 	br	110dc <OSEventPendMulti+0x35c>
#if (OS_SEM_EN > 0)
            case OS_EVENT_TYPE_SEM:
                 if (pevent->OSEventCnt > 0) {          /* If semaphore count > 0, resource available; */
   10f44:	e0bff017 	ldw	r2,-64(fp)
   10f48:	1080020b 	ldhu	r2,8(r2)
   10f4c:	10bfffcc 	andi	r2,r2,65535
   10f50:	10001526 	beq	r2,zero,10fa8 <OSEventPendMulti+0x228>
                     pevent->OSEventCnt--;              /* ... decrement semaphore,                ... */
   10f54:	e0bff017 	ldw	r2,-64(fp)
   10f58:	1080020b 	ldhu	r2,8(r2)
   10f5c:	10bfffc4 	addi	r2,r2,-1
   10f60:	1007883a 	mov	r3,r2
   10f64:	e0bff017 	ldw	r2,-64(fp)
   10f68:	10c0020d 	sth	r3,8(r2)
                    *pevents_rdy++ =  pevent;           /* ... and return available semaphore event    */
   10f6c:	e0bffd17 	ldw	r2,-12(fp)
   10f70:	10c00104 	addi	r3,r2,4
   10f74:	e0fffd15 	stw	r3,-12(fp)
   10f78:	e0fff017 	ldw	r3,-64(fp)
   10f7c:	10c00015 	stw	r3,0(r2)
                      events_rdy   =  OS_TRUE;
   10f80:	00800044 	movi	r2,1
   10f84:	e0bff105 	stb	r2,-60(fp)
                    *pmsgs_rdy++   = (void *)0;         /* NO message returned  for semaphores         */
   10f88:	e0bffe17 	ldw	r2,-8(fp)
   10f8c:	10c00104 	addi	r3,r2,4
   10f90:	e0fffe15 	stw	r3,-8(fp)
   10f94:	10000015 	stw	zero,0(r2)
                      events_rdy_nbr++;
   10f98:	e0bff18b 	ldhu	r2,-58(fp)
   10f9c:	10800044 	addi	r2,r2,1
   10fa0:	e0bff18d 	sth	r2,-58(fp)

                 } else {
                      events_stat |=  OS_STAT_SEM;      /* Configure multi-pend for semaphore events   */
                 }
                 break;
   10fa4:	00005806 	br	11108 <OSEventPendMulti+0x388>
                      events_rdy   =  OS_TRUE;
                    *pmsgs_rdy++   = (void *)0;         /* NO message returned  for semaphores         */
                      events_rdy_nbr++;

                 } else {
                      events_stat |=  OS_STAT_SEM;      /* Configure multi-pend for semaphore events   */
   10fa8:	e0bff203 	ldbu	r2,-56(fp)
   10fac:	10800054 	ori	r2,r2,1
   10fb0:	e0bff205 	stb	r2,-56(fp)
                 }
                 break;
   10fb4:	00005406 	br	11108 <OSEventPendMulti+0x388>
#endif

#if (OS_MBOX_EN > 0)
            case OS_EVENT_TYPE_MBOX:
                 if (pevent->OSEventPtr != (void *)0) { /* If mailbox NOT empty;                   ... */
   10fb8:	e0bff017 	ldw	r2,-64(fp)
   10fbc:	10800117 	ldw	r2,4(r2)
   10fc0:	10001326 	beq	r2,zero,11010 <OSEventPendMulti+0x290>
                                                        /* ... return available message,           ... */
                    *pmsgs_rdy++         = (void *)pevent->OSEventPtr;
   10fc4:	e0bffe17 	ldw	r2,-8(fp)
   10fc8:	10c00104 	addi	r3,r2,4
   10fcc:	e0fffe15 	stw	r3,-8(fp)
   10fd0:	e0fff017 	ldw	r3,-64(fp)
   10fd4:	18c00117 	ldw	r3,4(r3)
   10fd8:	10c00015 	stw	r3,0(r2)
                     pevent->OSEventPtr  = (void *)0;
   10fdc:	e0bff017 	ldw	r2,-64(fp)
   10fe0:	10000115 	stw	zero,4(r2)
                    *pevents_rdy++       =  pevent;     /* ... and return available mailbox event      */
   10fe4:	e0bffd17 	ldw	r2,-12(fp)
   10fe8:	10c00104 	addi	r3,r2,4
   10fec:	e0fffd15 	stw	r3,-12(fp)
   10ff0:	e0fff017 	ldw	r3,-64(fp)
   10ff4:	10c00015 	stw	r3,0(r2)
                      events_rdy         =  OS_TRUE;
   10ff8:	00800044 	movi	r2,1
   10ffc:	e0bff105 	stb	r2,-60(fp)
                      events_rdy_nbr++;
   11000:	e0bff18b 	ldhu	r2,-58(fp)
   11004:	10800044 	addi	r2,r2,1
   11008:	e0bff18d 	sth	r2,-58(fp)

                 } else {
                      events_stat |= OS_STAT_MBOX;      /* Configure multi-pend for mailbox events     */
                 }
                 break;
   1100c:	00003e06 	br	11108 <OSEventPendMulti+0x388>
                    *pevents_rdy++       =  pevent;     /* ... and return available mailbox event      */
                      events_rdy         =  OS_TRUE;
                      events_rdy_nbr++;

                 } else {
                      events_stat |= OS_STAT_MBOX;      /* Configure multi-pend for mailbox events     */
   11010:	e0bff203 	ldbu	r2,-56(fp)
   11014:	10800094 	ori	r2,r2,2
   11018:	e0bff205 	stb	r2,-56(fp)
                 }
                 break;
   1101c:	00003a06 	br	11108 <OSEventPendMulti+0x388>
#endif

#if ((OS_Q_EN > 0) && (OS_MAX_QS > 0))
            case OS_EVENT_TYPE_Q:
                 pq = (OS_Q *)pevent->OSEventPtr;
   11020:	e0bff017 	ldw	r2,-64(fp)
   11024:	10800117 	ldw	r2,4(r2)
   11028:	e0bff415 	stw	r2,-48(fp)
                 if (pq->OSQEntries > 0) {              /* If queue NOT empty;                     ... */
   1102c:	e0bff417 	ldw	r2,-48(fp)
   11030:	1080058b 	ldhu	r2,22(r2)
   11034:	10bfffcc 	andi	r2,r2,65535
   11038:	10002426 	beq	r2,zero,110cc <OSEventPendMulti+0x34c>
                                                        /* ... return available message,           ... */
                    *pmsgs_rdy++ = (void *)*pq->OSQOut++;
   1103c:	e0bffe17 	ldw	r2,-8(fp)
   11040:	10c00104 	addi	r3,r2,4
   11044:	e0fffe15 	stw	r3,-8(fp)
   11048:	e0fff417 	ldw	r3,-48(fp)
   1104c:	18c00417 	ldw	r3,16(r3)
   11050:	19400104 	addi	r5,r3,4
   11054:	e13ff417 	ldw	r4,-48(fp)
   11058:	21400415 	stw	r5,16(r4)
   1105c:	18c00017 	ldw	r3,0(r3)
   11060:	10c00015 	stw	r3,0(r2)
                     if (pq->OSQOut == pq->OSQEnd) {    /* If OUT ptr at queue end, ...                */
   11064:	e0bff417 	ldw	r2,-48(fp)
   11068:	10c00417 	ldw	r3,16(r2)
   1106c:	e0bff417 	ldw	r2,-48(fp)
   11070:	10800217 	ldw	r2,8(r2)
   11074:	1880041e 	bne	r3,r2,11088 <OSEventPendMulti+0x308>
                         pq->OSQOut  = pq->OSQStart;    /* ... wrap   to queue start                   */
   11078:	e0bff417 	ldw	r2,-48(fp)
   1107c:	10c00117 	ldw	r3,4(r2)
   11080:	e0bff417 	ldw	r2,-48(fp)
   11084:	10c00415 	stw	r3,16(r2)
                     }
                     pq->OSQEntries--;                  /* Update number of queue entries              */
   11088:	e0bff417 	ldw	r2,-48(fp)
   1108c:	1080058b 	ldhu	r2,22(r2)
   11090:	10bfffc4 	addi	r2,r2,-1
   11094:	1007883a 	mov	r3,r2
   11098:	e0bff417 	ldw	r2,-48(fp)
   1109c:	10c0058d 	sth	r3,22(r2)
                    *pevents_rdy++ = pevent;            /* ... and return available queue event        */
   110a0:	e0bffd17 	ldw	r2,-12(fp)
   110a4:	10c00104 	addi	r3,r2,4
   110a8:	e0fffd15 	stw	r3,-12(fp)
   110ac:	e0fff017 	ldw	r3,-64(fp)
   110b0:	10c00015 	stw	r3,0(r2)
                      events_rdy   = OS_TRUE;
   110b4:	00800044 	movi	r2,1
   110b8:	e0bff105 	stb	r2,-60(fp)
                      events_rdy_nbr++;
   110bc:	e0bff18b 	ldhu	r2,-58(fp)
   110c0:	10800044 	addi	r2,r2,1
   110c4:	e0bff18d 	sth	r2,-58(fp)

                 } else {
                      events_stat |= OS_STAT_Q;         /* Configure multi-pend for queue events       */
                 }
                 break;
   110c8:	00000f06 	br	11108 <OSEventPendMulti+0x388>
                    *pevents_rdy++ = pevent;            /* ... and return available queue event        */
                      events_rdy   = OS_TRUE;
                      events_rdy_nbr++;

                 } else {
                      events_stat |= OS_STAT_Q;         /* Configure multi-pend for queue events       */
   110cc:	e0bff203 	ldbu	r2,-56(fp)
   110d0:	10800114 	ori	r2,r2,4
   110d4:	e0bff205 	stb	r2,-56(fp)
                 }
                 break;
   110d8:	00000b06 	br	11108 <OSEventPendMulti+0x388>
   110dc:	e0bff317 	ldw	r2,-52(fp)
   110e0:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   110e4:	e0bff617 	ldw	r2,-40(fp)
   110e8:	1001703a 	wrctl	status,r2

            case OS_EVENT_TYPE_MUTEX:                                            
            case OS_EVENT_TYPE_FLAG:
            default:           
                 OS_EXIT_CRITICAL();
                *pevents_rdy = (OS_EVENT *)0;           /* NULL terminate return event array           */
   110ec:	e0bffd17 	ldw	r2,-12(fp)
   110f0:	10000015 	stw	zero,0(r2)
                *perr        =  OS_ERR_EVENT_TYPE;
   110f4:	e0800217 	ldw	r2,8(fp)
   110f8:	00c00044 	movi	r3,1
   110fc:	10c00005 	stb	r3,0(r2)
                 return (events_rdy_nbr);
   11100:	e0bff18b 	ldhu	r2,-58(fp)
   11104:	00009d06 	br	1137c <OSEventPendMulti+0x5fc>
        }
        pevents++;
   11108:	e0bfef17 	ldw	r2,-68(fp)
   1110c:	10800104 	addi	r2,r2,4
   11110:	e0bfef15 	stw	r2,-68(fp)
        pevent = *pevents;
   11114:	e0bfef17 	ldw	r2,-68(fp)
   11118:	10800017 	ldw	r2,0(r2)
   1111c:	e0bff015 	stw	r2,-64(fp)
    events_rdy     =  OS_FALSE;
    events_rdy_nbr =  0;
    events_stat    =  OS_STAT_RDY;
    pevents        =  pevents_pend;
    pevent         = *pevents;
    while (pevent != (OS_EVENT *)0) {                   /* See if any events already available         */
   11120:	e0bff017 	ldw	r2,-64(fp)
   11124:	103f7d1e 	bne	r2,zero,10f1c <__alt_mem_Flash_flash_data+0xf4010f1c>
        }
        pevents++;
        pevent = *pevents;
    }

    if ( events_rdy == OS_TRUE) {                       /* Return any events already available         */
   11128:	e0bff103 	ldbu	r2,-60(fp)
   1112c:	10800058 	cmpnei	r2,r2,1
   11130:	10000a1e 	bne	r2,zero,1115c <OSEventPendMulti+0x3dc>
       *pevents_rdy = (OS_EVENT *)0;                    /* NULL terminate return event array           */
   11134:	e0bffd17 	ldw	r2,-12(fp)
   11138:	10000015 	stw	zero,0(r2)
   1113c:	e0bff317 	ldw	r2,-52(fp)
   11140:	e0bff715 	stw	r2,-36(fp)
   11144:	e0bff717 	ldw	r2,-36(fp)
   11148:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
       *perr        =  OS_ERR_NONE;
   1114c:	e0800217 	ldw	r2,8(fp)
   11150:	10000005 	stb	zero,0(r2)
        return (events_rdy_nbr);
   11154:	e0bff18b 	ldhu	r2,-58(fp)
   11158:	00008806 	br	1137c <OSEventPendMulti+0x5fc>
    }
/*$PAGE*/
                                                        /* Otherwise, must wait until any event occurs */
    OSTCBCur->OSTCBStat     |= events_stat  |           /* Resource not available, ...                 */
   1115c:	d0a80b17 	ldw	r2,-24532(gp)
   11160:	d0e80b17 	ldw	r3,-24532(gp)
   11164:	19000c03 	ldbu	r4,48(r3)
   11168:	e0fff203 	ldbu	r3,-56(fp)
   1116c:	20c6b03a 	or	r3,r4,r3
   11170:	1809883a 	mov	r4,r3
   11174:	00ffe004 	movi	r3,-128
   11178:	20c6b03a 	or	r3,r4,r3
   1117c:	10c00c05 	stb	r3,48(r2)
                               OS_STAT_MULTI;           /* ... pend on multiple events                 */
    OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
   11180:	d0a80b17 	ldw	r2,-24532(gp)
   11184:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBDly       = timeout;                 /* Store pend timeout in TCB                   */
   11188:	d0a80b17 	ldw	r2,-24532(gp)
   1118c:	e0ffff0b 	ldhu	r3,-4(fp)
   11190:	10c00b8d 	sth	r3,46(r2)
    OS_EventTaskWaitMulti(pevents_pend);                /* Suspend task until events or timeout occurs */
   11194:	e13ffc17 	ldw	r4,-16(fp)
   11198:	0011cc80 	call	11cc8 <OS_EventTaskWaitMulti>
   1119c:	e0bff317 	ldw	r2,-52(fp)
   111a0:	e0bff815 	stw	r2,-32(fp)
   111a4:	e0bff817 	ldw	r2,-32(fp)
   111a8:	1001703a 	wrctl	status,r2

    OS_EXIT_CRITICAL();
    OS_Sched();                                         /* Find next highest priority task ready       */
   111ac:	001243c0 	call	1243c <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   111b0:	0005303a 	rdctl	r2,status
   111b4:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   111b8:	e0fff917 	ldw	r3,-28(fp)
   111bc:	00bfff84 	movi	r2,-2
   111c0:	1884703a 	and	r2,r3,r2
   111c4:	1001703a 	wrctl	status,r2
  
  return context;
   111c8:	e0bff917 	ldw	r2,-28(fp)
    OS_ENTER_CRITICAL();
   111cc:	e0bff315 	stw	r2,-52(fp)

    switch (OSTCBCur->OSTCBStatPend) {                  /* Handle event posted, aborted, or timed-out  */
   111d0:	d0a80b17 	ldw	r2,-24532(gp)
   111d4:	10800c43 	ldbu	r2,49(r2)
   111d8:	10803fcc 	andi	r2,r2,255
   111dc:	10000226 	beq	r2,zero,111e8 <OSEventPendMulti+0x468>
   111e0:	108000a0 	cmpeqi	r2,r2,2
   111e4:	10001826 	beq	r2,zero,11248 <OSEventPendMulti+0x4c8>
        case OS_STAT_PEND_OK:
        case OS_STAT_PEND_ABORT:
             pevent = OSTCBCur->OSTCBEventPtr;
   111e8:	d0a80b17 	ldw	r2,-24532(gp)
   111ec:	10800717 	ldw	r2,28(r2)
   111f0:	e0bff015 	stw	r2,-64(fp)
             if (pevent != (OS_EVENT *)0) {             /* If task event ptr != NULL, ...              */
   111f4:	e0bff017 	ldw	r2,-64(fp)
   111f8:	10000b26 	beq	r2,zero,11228 <OSEventPendMulti+0x4a8>
                *pevents_rdy++ =  pevent;               /* ... return available event ...              */
   111fc:	e0bffd17 	ldw	r2,-12(fp)
   11200:	10c00104 	addi	r3,r2,4
   11204:	e0fffd15 	stw	r3,-12(fp)
   11208:	e0fff017 	ldw	r3,-64(fp)
   1120c:	10c00015 	stw	r3,0(r2)
                *pevents_rdy   = (OS_EVENT *)0;         /* ... & NULL terminate return event array     */
   11210:	e0bffd17 	ldw	r2,-12(fp)
   11214:	10000015 	stw	zero,0(r2)
                  events_rdy_nbr++;
   11218:	e0bff18b 	ldhu	r2,-58(fp)
   1121c:	10800044 	addi	r2,r2,1
   11220:	e0bff18d 	sth	r2,-58(fp)

             } else {                                   /* Else NO event available, handle as timeout  */
                 OSTCBCur->OSTCBStatPend = OS_STAT_PEND_TO;
                 OS_EventTaskRemoveMulti(OSTCBCur, pevents_pend);
             }
			 break;
   11224:	00000d06 	br	1125c <OSEventPendMulti+0x4dc>
                *pevents_rdy++ =  pevent;               /* ... return available event ...              */
                *pevents_rdy   = (OS_EVENT *)0;         /* ... & NULL terminate return event array     */
                  events_rdy_nbr++;

             } else {                                   /* Else NO event available, handle as timeout  */
                 OSTCBCur->OSTCBStatPend = OS_STAT_PEND_TO;
   11228:	d0a80b17 	ldw	r2,-24532(gp)
   1122c:	00c00044 	movi	r3,1
   11230:	10c00c45 	stb	r3,49(r2)
                 OS_EventTaskRemoveMulti(OSTCBCur, pevents_pend);
   11234:	d0a80b17 	ldw	r2,-24532(gp)
   11238:	1009883a 	mov	r4,r2
   1123c:	e17ffc17 	ldw	r5,-16(fp)
   11240:	0011ec80 	call	11ec8 <OS_EventTaskRemoveMulti>
             }
			 break;
   11244:	00000506 	br	1125c <OSEventPendMulti+0x4dc>

        case OS_STAT_PEND_TO:
        default:                                        /* ... remove task from events' wait lists     */
             OS_EventTaskRemoveMulti(OSTCBCur, pevents_pend);
   11248:	d0a80b17 	ldw	r2,-24532(gp)
   1124c:	1009883a 	mov	r4,r2
   11250:	e17ffc17 	ldw	r5,-16(fp)
   11254:	0011ec80 	call	11ec8 <OS_EventTaskRemoveMulti>
             break;
   11258:	0001883a 	nop
    }

    switch (OSTCBCur->OSTCBStatPend) {
   1125c:	d0a80b17 	ldw	r2,-24532(gp)
   11260:	10800c43 	ldbu	r2,49(r2)
   11264:	10803fcc 	andi	r2,r2,255
   11268:	10000326 	beq	r2,zero,11278 <OSEventPendMulti+0x4f8>
   1126c:	108000a0 	cmpeqi	r2,r2,2
   11270:	1000231e 	bne	r2,zero,11300 <OSEventPendMulti+0x580>
   11274:	00002a06 	br	11320 <OSEventPendMulti+0x5a0>
        case OS_STAT_PEND_OK:
             switch (pevent->OSEventType) {             /* Return event's message                      */
   11278:	e0bff017 	ldw	r2,-64(fp)
   1127c:	10800003 	ldbu	r2,0(r2)
   11280:	10803fcc 	andi	r2,r2,255
   11284:	0080100e 	bge	zero,r2,112c8 <OSEventPendMulti+0x548>
   11288:	10c000d0 	cmplti	r3,r2,3
   1128c:	1800071e 	bne	r3,zero,112ac <OSEventPendMulti+0x52c>
   11290:	108000e0 	cmpeqi	r2,r2,3
   11294:	10000c26 	beq	r2,zero,112c8 <OSEventPendMulti+0x548>
#if (OS_SEM_EN > 0)
                 case OS_EVENT_TYPE_SEM:
                     *pmsgs_rdy++ = (void *)0;          /* NO message returned for semaphores          */
   11298:	e0bffe17 	ldw	r2,-8(fp)
   1129c:	10c00104 	addi	r3,r2,4
   112a0:	e0fffe15 	stw	r3,-8(fp)
   112a4:	10000015 	stw	zero,0(r2)
                      break;
   112a8:	00001206 	br	112f4 <OSEventPendMulti+0x574>

#if ((OS_MBOX_EN > 0) ||                 \
    ((OS_Q_EN    > 0) && (OS_MAX_QS > 0)))
                 case OS_EVENT_TYPE_MBOX:
                 case OS_EVENT_TYPE_Q:
                     *pmsgs_rdy++ = (void *)OSTCBCur->OSTCBMsg;     /* Return received message         */
   112ac:	e0bffe17 	ldw	r2,-8(fp)
   112b0:	10c00104 	addi	r3,r2,4
   112b4:	e0fffe15 	stw	r3,-8(fp)
   112b8:	d0e80b17 	ldw	r3,-24532(gp)
   112bc:	18c00917 	ldw	r3,36(r3)
   112c0:	10c00015 	stw	r3,0(r2)
                      break;
   112c4:	00000b06 	br	112f4 <OSEventPendMulti+0x574>
   112c8:	e0bff317 	ldw	r2,-52(fp)
   112cc:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   112d0:	e0bffa17 	ldw	r2,-24(fp)
   112d4:	1001703a 	wrctl	status,r2

                 case OS_EVENT_TYPE_MUTEX:                                       
                 case OS_EVENT_TYPE_FLAG:
                 default:           
                      OS_EXIT_CRITICAL();
                     *pevents_rdy = (OS_EVENT *)0;      /* NULL terminate return event array           */
   112d8:	e0bffd17 	ldw	r2,-12(fp)
   112dc:	10000015 	stw	zero,0(r2)
                     *perr        =  OS_ERR_EVENT_TYPE;
   112e0:	e0800217 	ldw	r2,8(fp)
   112e4:	00c00044 	movi	r3,1
   112e8:	10c00005 	stb	r3,0(r2)
                      return (events_rdy_nbr);
   112ec:	e0bff18b 	ldhu	r2,-58(fp)
   112f0:	00002206 	br	1137c <OSEventPendMulti+0x5fc>
             }
            *perr = OS_ERR_NONE;
   112f4:	e0800217 	ldw	r2,8(fp)
   112f8:	10000005 	stb	zero,0(r2)
             break;
   112fc:	00001006 	br	11340 <OSEventPendMulti+0x5c0>

        case OS_STAT_PEND_ABORT:
            *pmsgs_rdy++ = (void *)0;                   /* NO message returned for abort               */
   11300:	e0bffe17 	ldw	r2,-8(fp)
   11304:	10c00104 	addi	r3,r2,4
   11308:	e0fffe15 	stw	r3,-8(fp)
   1130c:	10000015 	stw	zero,0(r2)
            *perr        =  OS_ERR_PEND_ABORT;          /* Indicate that event  aborted                */
   11310:	e0800217 	ldw	r2,8(fp)
   11314:	00c00384 	movi	r3,14
   11318:	10c00005 	stb	r3,0(r2)
             break;
   1131c:	00000806 	br	11340 <OSEventPendMulti+0x5c0>
                                                        
        case OS_STAT_PEND_TO:                                                
        default:        
            *pmsgs_rdy++ = (void *)0;                   /* NO message returned for timeout             */
   11320:	e0bffe17 	ldw	r2,-8(fp)
   11324:	10c00104 	addi	r3,r2,4
   11328:	e0fffe15 	stw	r3,-8(fp)
   1132c:	10000015 	stw	zero,0(r2)
            *perr        =  OS_ERR_TIMEOUT;             /* Indicate that events timed out              */
   11330:	e0800217 	ldw	r2,8(fp)
   11334:	00c00284 	movi	r3,10
   11338:	10c00005 	stb	r3,0(r2)
             break;
   1133c:	0001883a 	nop
    }

    OSTCBCur->OSTCBStat          =  OS_STAT_RDY;        /* Set   task  status to ready                 */
   11340:	d0a80b17 	ldw	r2,-24532(gp)
   11344:	10000c05 	stb	zero,48(r2)
    OSTCBCur->OSTCBStatPend      =  OS_STAT_PEND_OK;    /* Clear pend  status                          */
   11348:	d0a80b17 	ldw	r2,-24532(gp)
   1134c:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;      /* Clear event pointers                        */
   11350:	d0a80b17 	ldw	r2,-24532(gp)
   11354:	10000715 	stw	zero,28(r2)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
   11358:	d0a80b17 	ldw	r2,-24532(gp)
   1135c:	10000815 	stw	zero,32(r2)
    OSTCBCur->OSTCBMsg           = (void      *)0;      /* Clear task  message                         */
   11360:	d0a80b17 	ldw	r2,-24532(gp)
   11364:	10000915 	stw	zero,36(r2)
   11368:	e0bff317 	ldw	r2,-52(fp)
   1136c:	e0bffb15 	stw	r2,-20(fp)
   11370:	e0bffb17 	ldw	r2,-20(fp)
   11374:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();

    return (events_rdy_nbr);
   11378:	e0bff18b 	ldhu	r2,-58(fp)
}
   1137c:	e037883a 	mov	sp,fp
   11380:	dfc00117 	ldw	ra,4(sp)
   11384:	df000017 	ldw	fp,0(sp)
   11388:	dec00204 	addi	sp,sp,8
   1138c:	f800283a 	ret

00011390 <OSInit>:
* Returns    : none
*********************************************************************************************************
*/

void  OSInit (void)
{
   11390:	defffe04 	addi	sp,sp,-8
   11394:	dfc00115 	stw	ra,4(sp)
   11398:	df000015 	stw	fp,0(sp)
   1139c:	d839883a 	mov	fp,sp
    OSInitHookBegin();                                           /* Call port specific initialization code   */
   113a0:	001ffe40 	call	1ffe4 <OSInitHookBegin>

    OS_InitMisc();                                               /* Initialize miscellaneous variables       */
   113a4:	00121040 	call	12104 <OS_InitMisc>

    OS_InitRdyList();                                            /* Initialize the Ready List                */
   113a8:	00121480 	call	12148 <OS_InitRdyList>

    OS_InitTCBList();                                            /* Initialize the free list of OS_TCBs      */
   113ac:	00122a80 	call	122a8 <OS_InitTCBList>

    OS_InitEventList();                                          /* Initialize the free list of OS_EVENTs    */
   113b0:	00120280 	call	12028 <OS_InitEventList>

#if (OS_FLAG_EN > 0) && (OS_MAX_FLAGS > 0)
    OS_FlagInit();                                               /* Initialize the event flag structures     */
   113b4:	00142280 	call	14228 <OS_FlagInit>
#endif

#if (OS_MEM_EN > 0) && (OS_MAX_MEM_PART > 0)
    OS_MemInit();                                                /* Initialize the memory manager            */
   113b8:	0014b700 	call	14b70 <OS_MemInit>
#endif

#if (OS_Q_EN > 0) && (OS_MAX_QS > 0)
    OS_QInit();                                                  /* Initialize the message queue structures  */
   113bc:	0015da40 	call	15da4 <OS_QInit>
#endif

    OS_InitTaskIdle();                                           /* Create the Idle Task                     */
   113c0:	00121b00 	call	121b0 <OS_InitTaskIdle>
#if OS_TASK_STAT_EN > 0
    OS_InitTaskStat();                                           /* Create the Statistic Task                */
   113c4:	001222c0 	call	1222c <OS_InitTaskStat>

#if OS_TMR_EN > 0
    OSTmr_Init();                                                /* Initialize the Timer Manager             */
#endif

    OSInitHookEnd();                                             /* Call port specific init. code            */
   113c8:	00200000 	call	20000 <OSInitHookEnd>

#if OS_DEBUG_EN > 0
    OSDebugInit();
   113cc:	0012b140 	call	12b14 <OSDebugInit>
#endif
}
   113d0:	e037883a 	mov	sp,fp
   113d4:	dfc00117 	ldw	ra,4(sp)
   113d8:	df000017 	ldw	fp,0(sp)
   113dc:	dec00204 	addi	sp,sp,8
   113e0:	f800283a 	ret

000113e4 <OSIntEnter>:
*              5) You are allowed to nest interrupts up to 255 levels deep.
*********************************************************************************************************
*/

void  OSIntEnter (void)
{
   113e4:	defffc04 	addi	sp,sp,-16
   113e8:	df000315 	stw	fp,12(sp)
   113ec:	df000304 	addi	fp,sp,12
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
   113f0:	e03ffd15 	stw	zero,-12(fp)
#endif

    if (OSRunning == OS_TRUE) {
   113f4:	d0a7fc43 	ldbu	r2,-24591(gp)
   113f8:	10803fcc 	andi	r2,r2,255
   113fc:	10800058 	cmpnei	r2,r2,1
   11400:	1000131e 	bne	r2,zero,11450 <OSIntEnter+0x6c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   11404:	0005303a 	rdctl	r2,status
   11408:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1140c:	e0fffe17 	ldw	r3,-8(fp)
   11410:	00bfff84 	movi	r2,-2
   11414:	1884703a 	and	r2,r3,r2
   11418:	1001703a 	wrctl	status,r2
  
  return context;
   1141c:	e0bffe17 	ldw	r2,-8(fp)
        OS_ENTER_CRITICAL();
   11420:	e0bffd15 	stw	r2,-12(fp)
        if (OSIntNesting < 255u) {
   11424:	d0a80a03 	ldbu	r2,-24536(gp)
   11428:	10803fcc 	andi	r2,r2,255
   1142c:	10803fe0 	cmpeqi	r2,r2,255
   11430:	1000031e 	bne	r2,zero,11440 <OSIntEnter+0x5c>
            OSIntNesting++;                      /* Increment ISR nesting level                        */
   11434:	d0a80a03 	ldbu	r2,-24536(gp)
   11438:	10800044 	addi	r2,r2,1
   1143c:	d0a80a05 	stb	r2,-24536(gp)
   11440:	e0bffd17 	ldw	r2,-12(fp)
   11444:	e0bfff15 	stw	r2,-4(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   11448:	e0bfff17 	ldw	r2,-4(fp)
   1144c:	1001703a 	wrctl	status,r2
        }
        OS_EXIT_CRITICAL();
    }
}
   11450:	e037883a 	mov	sp,fp
   11454:	df000017 	ldw	fp,0(sp)
   11458:	dec00104 	addi	sp,sp,4
   1145c:	f800283a 	ret

00011460 <OSIntExit>:
*              2) Rescheduling is prevented when the scheduler is locked (see OS_SchedLock())
*********************************************************************************************************
*/

void  OSIntExit (void)
{
   11460:	defffb04 	addi	sp,sp,-20
   11464:	dfc00415 	stw	ra,16(sp)
   11468:	df000315 	stw	fp,12(sp)
   1146c:	df000304 	addi	fp,sp,12
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
   11470:	e03ffd15 	stw	zero,-12(fp)
#endif



    if (OSRunning == OS_TRUE) {
   11474:	d0a7fc43 	ldbu	r2,-24591(gp)
   11478:	10803fcc 	andi	r2,r2,255
   1147c:	10800058 	cmpnei	r2,r2,1
   11480:	10002f1e 	bne	r2,zero,11540 <OSIntExit+0xe0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   11484:	0005303a 	rdctl	r2,status
   11488:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1148c:	e0fffe17 	ldw	r3,-8(fp)
   11490:	00bfff84 	movi	r2,-2
   11494:	1884703a 	and	r2,r3,r2
   11498:	1001703a 	wrctl	status,r2
  
  return context;
   1149c:	e0bffe17 	ldw	r2,-8(fp)
        OS_ENTER_CRITICAL();
   114a0:	e0bffd15 	stw	r2,-12(fp)
        if (OSIntNesting > 0) {                            /* Prevent OSIntNesting from wrapping       */
   114a4:	d0a80a03 	ldbu	r2,-24536(gp)
   114a8:	10803fcc 	andi	r2,r2,255
   114ac:	10000326 	beq	r2,zero,114bc <OSIntExit+0x5c>
            OSIntNesting--;
   114b0:	d0a80a03 	ldbu	r2,-24536(gp)
   114b4:	10bfffc4 	addi	r2,r2,-1
   114b8:	d0a80a05 	stb	r2,-24536(gp)
        }
        if (OSIntNesting == 0) {                           /* Reschedule only if all ISRs complete ... */
   114bc:	d0a80a03 	ldbu	r2,-24536(gp)
   114c0:	10803fcc 	andi	r2,r2,255
   114c4:	10001a1e 	bne	r2,zero,11530 <OSIntExit+0xd0>
            if (OSLockNesting == 0) {                      /* ... and not locked.                      */
   114c8:	d0a7fc03 	ldbu	r2,-24592(gp)
   114cc:	10803fcc 	andi	r2,r2,255
   114d0:	1000171e 	bne	r2,zero,11530 <OSIntExit+0xd0>
                OS_SchedNew();
   114d4:	00125080 	call	12508 <OS_SchedNew>
                if (OSPrioHighRdy != OSPrioCur) {          /* No Ctx Sw if current task is highest rdy */
   114d8:	d0e7fe03 	ldbu	r3,-24584(gp)
   114dc:	d0a7fe43 	ldbu	r2,-24583(gp)
   114e0:	18c03fcc 	andi	r3,r3,255
   114e4:	10803fcc 	andi	r2,r2,255
   114e8:	18801126 	beq	r3,r2,11530 <OSIntExit+0xd0>
                    OSTCBHighRdy  = OSTCBPrioTbl[OSPrioHighRdy];
   114ec:	d0a7fe03 	ldbu	r2,-24584(gp)
   114f0:	10c03fcc 	andi	r3,r2,255
   114f4:	008000b4 	movhi	r2,2
   114f8:	109fc504 	addi	r2,r2,32532
   114fc:	18c7883a 	add	r3,r3,r3
   11500:	18c7883a 	add	r3,r3,r3
   11504:	10c5883a 	add	r2,r2,r3
   11508:	10800017 	ldw	r2,0(r2)
   1150c:	d0a80615 	stw	r2,-24552(gp)
#if OS_TASK_PROFILE_EN > 0
                    OSTCBHighRdy->OSTCBCtxSwCtr++;         /* Inc. # of context switches to this task  */
   11510:	d0a80617 	ldw	r2,-24552(gp)
   11514:	10c00e17 	ldw	r3,56(r2)
   11518:	18c00044 	addi	r3,r3,1
   1151c:	10c00e15 	stw	r3,56(r2)
#endif
                    OSCtxSwCtr++;                          /* Keep track of the number of ctx switches */
   11520:	d0a80117 	ldw	r2,-24572(gp)
   11524:	10800044 	addi	r2,r2,1
   11528:	d0a80115 	stw	r2,-24572(gp)
                    OSIntCtxSw();                          /* Perform interrupt level ctx switch       */
   1152c:	001fd240 	call	1fd24 <OSCtxSw>
   11530:	e0bffd17 	ldw	r2,-12(fp)
   11534:	e0bfff15 	stw	r2,-4(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   11538:	e0bfff17 	ldw	r2,-4(fp)
   1153c:	1001703a 	wrctl	status,r2
                }
            }
        }
        OS_EXIT_CRITICAL();
    }
}
   11540:	e037883a 	mov	sp,fp
   11544:	dfc00117 	ldw	ra,4(sp)
   11548:	df000017 	ldw	fp,0(sp)
   1154c:	dec00204 	addi	sp,sp,8
   11550:	f800283a 	ret

00011554 <OSSchedLock>:
*********************************************************************************************************
*/

#if OS_SCHED_LOCK_EN > 0
void  OSSchedLock (void)
{
   11554:	defffc04 	addi	sp,sp,-16
   11558:	df000315 	stw	fp,12(sp)
   1155c:	df000304 	addi	fp,sp,12
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   11560:	e03ffd15 	stw	zero,-12(fp)
#endif



    if (OSRunning == OS_TRUE) {                  /* Make sure multitasking is running                  */
   11564:	d0a7fc43 	ldbu	r2,-24591(gp)
   11568:	10803fcc 	andi	r2,r2,255
   1156c:	10800058 	cmpnei	r2,r2,1
   11570:	1000161e 	bne	r2,zero,115cc <OSSchedLock+0x78>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   11574:	0005303a 	rdctl	r2,status
   11578:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1157c:	e0fffe17 	ldw	r3,-8(fp)
   11580:	00bfff84 	movi	r2,-2
   11584:	1884703a 	and	r2,r3,r2
   11588:	1001703a 	wrctl	status,r2
  
  return context;
   1158c:	e0bffe17 	ldw	r2,-8(fp)
        OS_ENTER_CRITICAL();
   11590:	e0bffd15 	stw	r2,-12(fp)
        if (OSIntNesting == 0) {                 /* Can't call from an ISR                             */
   11594:	d0a80a03 	ldbu	r2,-24536(gp)
   11598:	10803fcc 	andi	r2,r2,255
   1159c:	1000071e 	bne	r2,zero,115bc <OSSchedLock+0x68>
            if (OSLockNesting < 255u) {          /* Prevent OSLockNesting from wrapping back to 0      */
   115a0:	d0a7fc03 	ldbu	r2,-24592(gp)
   115a4:	10803fcc 	andi	r2,r2,255
   115a8:	10803fe0 	cmpeqi	r2,r2,255
   115ac:	1000031e 	bne	r2,zero,115bc <OSSchedLock+0x68>
                OSLockNesting++;                 /* Increment lock nesting level                       */
   115b0:	d0a7fc03 	ldbu	r2,-24592(gp)
   115b4:	10800044 	addi	r2,r2,1
   115b8:	d0a7fc05 	stb	r2,-24592(gp)
   115bc:	e0bffd17 	ldw	r2,-12(fp)
   115c0:	e0bfff15 	stw	r2,-4(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   115c4:	e0bfff17 	ldw	r2,-4(fp)
   115c8:	1001703a 	wrctl	status,r2
            }
        }
        OS_EXIT_CRITICAL();
    }
}
   115cc:	e037883a 	mov	sp,fp
   115d0:	df000017 	ldw	fp,0(sp)
   115d4:	dec00104 	addi	sp,sp,4
   115d8:	f800283a 	ret

000115dc <OSSchedUnlock>:
*********************************************************************************************************
*/

#if OS_SCHED_LOCK_EN > 0
void  OSSchedUnlock (void)
{
   115dc:	defff804 	addi	sp,sp,-32
   115e0:	dfc00715 	stw	ra,28(sp)
   115e4:	df000615 	stw	fp,24(sp)
   115e8:	df000604 	addi	fp,sp,24
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
   115ec:	e03ffa15 	stw	zero,-24(fp)
#endif



    if (OSRunning == OS_TRUE) {                            /* Make sure multitasking is running        */
   115f0:	d0a7fc43 	ldbu	r2,-24591(gp)
   115f4:	10803fcc 	andi	r2,r2,255
   115f8:	10800058 	cmpnei	r2,r2,1
   115fc:	1000281e 	bne	r2,zero,116a0 <OSSchedUnlock+0xc4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   11600:	0005303a 	rdctl	r2,status
   11604:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   11608:	e0fffb17 	ldw	r3,-20(fp)
   1160c:	00bfff84 	movi	r2,-2
   11610:	1884703a 	and	r2,r3,r2
   11614:	1001703a 	wrctl	status,r2
  
  return context;
   11618:	e0bffb17 	ldw	r2,-20(fp)
        OS_ENTER_CRITICAL();
   1161c:	e0bffa15 	stw	r2,-24(fp)
        if (OSLockNesting > 0) {                           /* Do not decrement if already 0            */
   11620:	d0a7fc03 	ldbu	r2,-24592(gp)
   11624:	10803fcc 	andi	r2,r2,255
   11628:	10001926 	beq	r2,zero,11690 <OSSchedUnlock+0xb4>
            OSLockNesting--;                               /* Decrement lock nesting level             */
   1162c:	d0a7fc03 	ldbu	r2,-24592(gp)
   11630:	10bfffc4 	addi	r2,r2,-1
   11634:	d0a7fc05 	stb	r2,-24592(gp)
            if (OSLockNesting == 0) {                      /* See if scheduler is enabled and ...      */
   11638:	d0a7fc03 	ldbu	r2,-24592(gp)
   1163c:	10803fcc 	andi	r2,r2,255
   11640:	10000e1e 	bne	r2,zero,1167c <OSSchedUnlock+0xa0>
                if (OSIntNesting == 0) {                   /* ... not in an ISR                        */
   11644:	d0a80a03 	ldbu	r2,-24536(gp)
   11648:	10803fcc 	andi	r2,r2,255
   1164c:	1000061e 	bne	r2,zero,11668 <OSSchedUnlock+0x8c>
   11650:	e0bffa17 	ldw	r2,-24(fp)
   11654:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   11658:	e0bffc17 	ldw	r2,-16(fp)
   1165c:	1001703a 	wrctl	status,r2
                    OS_EXIT_CRITICAL();
                    OS_Sched();                            /* See if a HPT is ready                    */
   11660:	001243c0 	call	1243c <OS_Sched>
   11664:	00000e06 	br	116a0 <OSSchedUnlock+0xc4>
   11668:	e0bffa17 	ldw	r2,-24(fp)
   1166c:	e0bffd15 	stw	r2,-12(fp)
   11670:	e0bffd17 	ldw	r2,-12(fp)
   11674:	1001703a 	wrctl	status,r2
   11678:	00000906 	br	116a0 <OSSchedUnlock+0xc4>
   1167c:	e0bffa17 	ldw	r2,-24(fp)
   11680:	e0bffe15 	stw	r2,-8(fp)
   11684:	e0bffe17 	ldw	r2,-8(fp)
   11688:	1001703a 	wrctl	status,r2
   1168c:	00000406 	br	116a0 <OSSchedUnlock+0xc4>
   11690:	e0bffa17 	ldw	r2,-24(fp)
   11694:	e0bfff15 	stw	r2,-4(fp)
   11698:	e0bfff17 	ldw	r2,-4(fp)
   1169c:	1001703a 	wrctl	status,r2
            }
        } else {
            OS_EXIT_CRITICAL();
        }
    }
}
   116a0:	e037883a 	mov	sp,fp
   116a4:	dfc00117 	ldw	ra,4(sp)
   116a8:	df000017 	ldw	fp,0(sp)
   116ac:	dec00204 	addi	sp,sp,8
   116b0:	f800283a 	ret

000116b4 <OSStart>:
*                 d_ Execute the task.
*********************************************************************************************************
*/

void  OSStart (void)
{
   116b4:	defffe04 	addi	sp,sp,-8
   116b8:	dfc00115 	stw	ra,4(sp)
   116bc:	df000015 	stw	fp,0(sp)
   116c0:	d839883a 	mov	fp,sp
    if (OSRunning == OS_FALSE) {
   116c4:	d0a7fc43 	ldbu	r2,-24591(gp)
   116c8:	10803fcc 	andi	r2,r2,255
   116cc:	10000f1e 	bne	r2,zero,1170c <OSStart+0x58>
        OS_SchedNew();                               /* Find highest priority's task priority number   */
   116d0:	00125080 	call	12508 <OS_SchedNew>
        OSPrioCur     = OSPrioHighRdy;
   116d4:	d0a7fe03 	ldbu	r2,-24584(gp)
   116d8:	d0a7fe45 	stb	r2,-24583(gp)
        OSTCBHighRdy  = OSTCBPrioTbl[OSPrioHighRdy]; /* Point to highest priority task ready to run    */
   116dc:	d0a7fe03 	ldbu	r2,-24584(gp)
   116e0:	10c03fcc 	andi	r3,r2,255
   116e4:	008000b4 	movhi	r2,2
   116e8:	109fc504 	addi	r2,r2,32532
   116ec:	18c7883a 	add	r3,r3,r3
   116f0:	18c7883a 	add	r3,r3,r3
   116f4:	10c5883a 	add	r2,r2,r3
   116f8:	10800017 	ldw	r2,0(r2)
   116fc:	d0a80615 	stw	r2,-24552(gp)
        OSTCBCur      = OSTCBHighRdy;
   11700:	d0a80617 	ldw	r2,-24552(gp)
   11704:	d0a80b15 	stw	r2,-24532(gp)
        OSStartHighRdy();                            /* Execute target specific code to start task     */
   11708:	001fdb00 	call	1fdb0 <OSStartHighRdy>
    }
}
   1170c:	e037883a 	mov	sp,fp
   11710:	dfc00117 	ldw	ra,4(sp)
   11714:	df000017 	ldw	fp,0(sp)
   11718:	dec00204 	addi	sp,sp,8
   1171c:	f800283a 	ret

00011720 <OSStatInit>:
*********************************************************************************************************
*/

#if OS_TASK_STAT_EN > 0
void  OSStatInit (void)
{
   11720:	defff904 	addi	sp,sp,-28
   11724:	dfc00615 	stw	ra,24(sp)
   11728:	df000515 	stw	fp,20(sp)
   1172c:	df000504 	addi	fp,sp,20
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   11730:	e03ffb15 	stw	zero,-20(fp)
#endif



    OSTimeDly(2);                                /* Synchronize with clock tick                        */
   11734:	01000084 	movi	r4,2
   11738:	001824c0 	call	1824c <OSTimeDly>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1173c:	0005303a 	rdctl	r2,status
   11740:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   11744:	e0fffc17 	ldw	r3,-16(fp)
   11748:	00bfff84 	movi	r2,-2
   1174c:	1884703a 	and	r2,r3,r2
   11750:	1001703a 	wrctl	status,r2
  
  return context;
   11754:	e0bffc17 	ldw	r2,-16(fp)
    OS_ENTER_CRITICAL();
   11758:	e0bffb15 	stw	r2,-20(fp)
    OSIdleCtr    = 0L;                           /* Clear idle counter                                 */
   1175c:	d027fd15 	stw	zero,-24588(gp)
   11760:	e0bffb17 	ldw	r2,-20(fp)
   11764:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   11768:	e0bffd17 	ldw	r2,-12(fp)
   1176c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    OSTimeDly(OS_TICKS_PER_SEC / 10);            /* Determine MAX. idle counter value for 1/10 second  */
   11770:	0009883a 	mov	r4,zero
   11774:	001824c0 	call	1824c <OSTimeDly>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   11778:	0005303a 	rdctl	r2,status
   1177c:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   11780:	e0fffe17 	ldw	r3,-8(fp)
   11784:	00bfff84 	movi	r2,-2
   11788:	1884703a 	and	r2,r3,r2
   1178c:	1001703a 	wrctl	status,r2
  
  return context;
   11790:	e0bffe17 	ldw	r2,-8(fp)
    OS_ENTER_CRITICAL();
   11794:	e0bffb15 	stw	r2,-20(fp)
    OSIdleCtrMax = OSIdleCtr;                    /* Store maximum idle counter count in 1/10 second    */
   11798:	d0a7fd17 	ldw	r2,-24588(gp)
   1179c:	d0a80215 	stw	r2,-24568(gp)
    OSStatRdy    = OS_TRUE;
   117a0:	00800044 	movi	r2,1
   117a4:	d0a80e05 	stb	r2,-24520(gp)
   117a8:	e0bffb17 	ldw	r2,-20(fp)
   117ac:	e0bfff15 	stw	r2,-4(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   117b0:	e0bfff17 	ldw	r2,-4(fp)
   117b4:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
}
   117b8:	e037883a 	mov	sp,fp
   117bc:	dfc00117 	ldw	ra,4(sp)
   117c0:	df000017 	ldw	fp,0(sp)
   117c4:	dec00204 	addi	sp,sp,8
   117c8:	f800283a 	ret

000117cc <OSTimeTick>:
* Returns    : none
*********************************************************************************************************
*/

void  OSTimeTick (void)
{
   117cc:	defff704 	addi	sp,sp,-36
   117d0:	dfc00815 	stw	ra,32(sp)
   117d4:	df000715 	stw	fp,28(sp)
   117d8:	df000704 	addi	fp,sp,28
    OS_TCB    *ptcb;
#if OS_TICK_STEP_EN > 0
    BOOLEAN    step;
#endif
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
   117dc:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_TIME_TICK_HOOK_EN > 0
    OSTimeTickHook();                                      /* Call user definable hook                     */
   117e0:	001ffc80 	call	1ffc8 <OSTimeTickHook>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   117e4:	0005303a 	rdctl	r2,status
   117e8:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   117ec:	e0fffc17 	ldw	r3,-16(fp)
   117f0:	00bfff84 	movi	r2,-2
   117f4:	1884703a 	and	r2,r3,r2
   117f8:	1001703a 	wrctl	status,r2
  
  return context;
   117fc:	e0bffc17 	ldw	r2,-16(fp)
#endif
#if OS_TIME_GET_SET_EN > 0
    OS_ENTER_CRITICAL();                                   /* Update the 32-bit tick counter               */
   11800:	e0bffb15 	stw	r2,-20(fp)
    OSTime++;
   11804:	d0a80c17 	ldw	r2,-24528(gp)
   11808:	10800044 	addi	r2,r2,1
   1180c:	d0a80c15 	stw	r2,-24528(gp)
   11810:	e0bffb17 	ldw	r2,-20(fp)
   11814:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   11818:	e0bffd17 	ldw	r2,-12(fp)
   1181c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
#endif
    if (OSRunning == OS_TRUE) {
   11820:	d0a7fc43 	ldbu	r2,-24591(gp)
   11824:	10803fcc 	andi	r2,r2,255
   11828:	10800058 	cmpnei	r2,r2,1
   1182c:	1000691e 	bne	r2,zero,119d4 <OSTimeTick+0x208>
#if OS_TICK_STEP_EN > 0
        switch (OSTickStepState) {                         /* Determine whether we need to process a tick  */
   11830:	d0a80003 	ldbu	r2,-24576(gp)
   11834:	10803fcc 	andi	r2,r2,255
   11838:	10c00060 	cmpeqi	r3,r2,1
   1183c:	1800061e 	bne	r3,zero,11858 <OSTimeTick+0x8c>
   11840:	10c000a0 	cmpeqi	r3,r2,2
   11844:	1800061e 	bne	r3,zero,11860 <OSTimeTick+0x94>
   11848:	10000a1e 	bne	r2,zero,11874 <OSTimeTick+0xa8>
            case OS_TICK_STEP_DIS:                         /* Yes, stepping is disabled                    */
                 step = OS_TRUE;
   1184c:	00800044 	movi	r2,1
   11850:	e0bffa05 	stb	r2,-24(fp)
                 break;
   11854:	00000b06 	br	11884 <OSTimeTick+0xb8>

            case OS_TICK_STEP_WAIT:                        /* No,  waiting for uC/OS-View to set ...       */
                 step = OS_FALSE;                          /*      .. OSTickStepState to OS_TICK_STEP_ONCE */
   11858:	e03ffa05 	stb	zero,-24(fp)
                 break;
   1185c:	00000906 	br	11884 <OSTimeTick+0xb8>

            case OS_TICK_STEP_ONCE:                        /* Yes, process tick once and wait for next ... */
                 step            = OS_TRUE;                /*      ... step command from uC/OS-View        */
   11860:	00800044 	movi	r2,1
   11864:	e0bffa05 	stb	r2,-24(fp)
                 OSTickStepState = OS_TICK_STEP_WAIT;
   11868:	00800044 	movi	r2,1
   1186c:	d0a80005 	stb	r2,-24576(gp)
                 break;
   11870:	00000406 	br	11884 <OSTimeTick+0xb8>

            default:                                       /* Invalid case, correct situation              */
                 step            = OS_TRUE;
   11874:	00800044 	movi	r2,1
   11878:	e0bffa05 	stb	r2,-24(fp)
                 OSTickStepState = OS_TICK_STEP_DIS;
   1187c:	d0280005 	stb	zero,-24576(gp)
                 break;
   11880:	0001883a 	nop
        }
        if (step == OS_FALSE) {                            /* Return if waiting for step command           */
   11884:	e0bffa03 	ldbu	r2,-24(fp)
   11888:	1000011e 	bne	r2,zero,11890 <OSTimeTick+0xc4>
            return;
   1188c:	00005106 	br	119d4 <OSTimeTick+0x208>
        }
#endif
        ptcb = OSTCBList;                                  /* Point at first TCB in TCB list               */
   11890:	d0a7ff17 	ldw	r2,-24580(gp)
   11894:	e0bff915 	stw	r2,-28(fp)
        while (ptcb->OSTCBPrio != OS_TASK_IDLE_PRIO) {     /* Go through all TCBs in TCB list              */
   11898:	00004906 	br	119c0 <OSTimeTick+0x1f4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1189c:	0005303a 	rdctl	r2,status
   118a0:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   118a4:	e0fffe17 	ldw	r3,-8(fp)
   118a8:	00bfff84 	movi	r2,-2
   118ac:	1884703a 	and	r2,r3,r2
   118b0:	1001703a 	wrctl	status,r2
  
  return context;
   118b4:	e0bffe17 	ldw	r2,-8(fp)
            OS_ENTER_CRITICAL();
   118b8:	e0bffb15 	stw	r2,-20(fp)
            if (ptcb->OSTCBDly != 0) {                     /* No, Delayed or waiting for event with TO     */
   118bc:	e0bff917 	ldw	r2,-28(fp)
   118c0:	10800b8b 	ldhu	r2,46(r2)
   118c4:	10bfffcc 	andi	r2,r2,65535
   118c8:	10003626 	beq	r2,zero,119a4 <OSTimeTick+0x1d8>
                if (--ptcb->OSTCBDly == 0) {               /* Decrement nbr of ticks to end of delay       */
   118cc:	e0bff917 	ldw	r2,-28(fp)
   118d0:	10800b8b 	ldhu	r2,46(r2)
   118d4:	10bfffc4 	addi	r2,r2,-1
   118d8:	1007883a 	mov	r3,r2
   118dc:	e0bff917 	ldw	r2,-28(fp)
   118e0:	10c00b8d 	sth	r3,46(r2)
   118e4:	e0bff917 	ldw	r2,-28(fp)
   118e8:	10800b8b 	ldhu	r2,46(r2)
   118ec:	10bfffcc 	andi	r2,r2,65535
   118f0:	10002c1e 	bne	r2,zero,119a4 <OSTimeTick+0x1d8>
                                                           /* Check for timeout                            */
                    if ((ptcb->OSTCBStat & OS_STAT_PEND_ANY) != OS_STAT_RDY) {
   118f4:	e0bff917 	ldw	r2,-28(fp)
   118f8:	10800c03 	ldbu	r2,48(r2)
   118fc:	10803fcc 	andi	r2,r2,255
   11900:	10800dcc 	andi	r2,r2,55
   11904:	10000b26 	beq	r2,zero,11934 <OSTimeTick+0x168>
                        ptcb->OSTCBStat  &= ~(INT8U)OS_STAT_PEND_ANY;          /* Yes, Clear status flag   */
   11908:	e0bff917 	ldw	r2,-28(fp)
   1190c:	10c00c03 	ldbu	r3,48(r2)
   11910:	00bff204 	movi	r2,-56
   11914:	1884703a 	and	r2,r3,r2
   11918:	1007883a 	mov	r3,r2
   1191c:	e0bff917 	ldw	r2,-28(fp)
   11920:	10c00c05 	stb	r3,48(r2)
                        ptcb->OSTCBStatPend = OS_STAT_PEND_TO;                 /* Indicate PEND timeout    */
   11924:	e0bff917 	ldw	r2,-28(fp)
   11928:	00c00044 	movi	r3,1
   1192c:	10c00c45 	stb	r3,49(r2)
   11930:	00000206 	br	1193c <OSTimeTick+0x170>
                    } else {
                        ptcb->OSTCBStatPend = OS_STAT_PEND_OK;
   11934:	e0bff917 	ldw	r2,-28(fp)
   11938:	10000c45 	stb	zero,49(r2)
                    }

                    if ((ptcb->OSTCBStat & OS_STAT_SUSPEND) == OS_STAT_RDY) {  /* Is task suspended?       */
   1193c:	e0bff917 	ldw	r2,-28(fp)
   11940:	10800c03 	ldbu	r2,48(r2)
   11944:	10803fcc 	andi	r2,r2,255
   11948:	1080020c 	andi	r2,r2,8
   1194c:	1000151e 	bne	r2,zero,119a4 <OSTimeTick+0x1d8>
                        OSRdyGrp               |= ptcb->OSTCBBitY;             /* No,  Make ready          */
   11950:	e0bff917 	ldw	r2,-28(fp)
   11954:	10c00d83 	ldbu	r3,54(r2)
   11958:	d0a80803 	ldbu	r2,-24544(gp)
   1195c:	1884b03a 	or	r2,r3,r2
   11960:	d0a80805 	stb	r2,-24544(gp)
                        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
   11964:	e0bff917 	ldw	r2,-28(fp)
   11968:	10800d03 	ldbu	r2,52(r2)
   1196c:	10c03fcc 	andi	r3,r2,255
   11970:	e0bff917 	ldw	r2,-28(fp)
   11974:	10800d03 	ldbu	r2,52(r2)
   11978:	11003fcc 	andi	r4,r2,255
   1197c:	d0a80844 	addi	r2,gp,-24543
   11980:	2085883a 	add	r2,r4,r2
   11984:	11000003 	ldbu	r4,0(r2)
   11988:	e0bff917 	ldw	r2,-28(fp)
   1198c:	10800d43 	ldbu	r2,53(r2)
   11990:	2084b03a 	or	r2,r4,r2
   11994:	1009883a 	mov	r4,r2
   11998:	d0a80844 	addi	r2,gp,-24543
   1199c:	1885883a 	add	r2,r3,r2
   119a0:	11000005 	stb	r4,0(r2)
                    }
                }
            }
            ptcb = ptcb->OSTCBNext;                        /* Point at next TCB in TCB list                */
   119a4:	e0bff917 	ldw	r2,-28(fp)
   119a8:	10800517 	ldw	r2,20(r2)
   119ac:	e0bff915 	stw	r2,-28(fp)
   119b0:	e0bffb17 	ldw	r2,-20(fp)
   119b4:	e0bfff15 	stw	r2,-4(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   119b8:	e0bfff17 	ldw	r2,-4(fp)
   119bc:	1001703a 	wrctl	status,r2
        if (step == OS_FALSE) {                            /* Return if waiting for step command           */
            return;
        }
#endif
        ptcb = OSTCBList;                                  /* Point at first TCB in TCB list               */
        while (ptcb->OSTCBPrio != OS_TASK_IDLE_PRIO) {     /* Go through all TCBs in TCB list              */
   119c0:	e0bff917 	ldw	r2,-28(fp)
   119c4:	10800c83 	ldbu	r2,50(r2)
   119c8:	10803fcc 	andi	r2,r2,255
   119cc:	10800518 	cmpnei	r2,r2,20
   119d0:	103fb21e 	bne	r2,zero,1189c <__alt_mem_Flash_flash_data+0xf401189c>
            }
            ptcb = ptcb->OSTCBNext;                        /* Point at next TCB in TCB list                */
            OS_EXIT_CRITICAL();
        }
    }
}
   119d4:	e037883a 	mov	sp,fp
   119d8:	dfc00117 	ldw	ra,4(sp)
   119dc:	df000017 	ldw	fp,0(sp)
   119e0:	dec00204 	addi	sp,sp,8
   119e4:	f800283a 	ret

000119e8 <OSVersion>:
* Returns    : the version number of uC/OS-II multiplied by 100.
*********************************************************************************************************
*/

INT16U  OSVersion (void)
{
   119e8:	deffff04 	addi	sp,sp,-4
   119ec:	df000015 	stw	fp,0(sp)
   119f0:	d839883a 	mov	fp,sp
    return (OS_VERSION);
   119f4:	00804784 	movi	r2,286
}
   119f8:	e037883a 	mov	sp,fp
   119fc:	df000017 	ldw	fp,0(sp)
   11a00:	dec00104 	addi	sp,sp,4
   11a04:	f800283a 	ret

00011a08 <OS_Dummy>:
*********************************************************************************************************
*/

#if OS_TASK_DEL_EN > 0
void  OS_Dummy (void)
{
   11a08:	deffff04 	addi	sp,sp,-4
   11a0c:	df000015 	stw	fp,0(sp)
   11a10:	d839883a 	mov	fp,sp
}
   11a14:	e037883a 	mov	sp,fp
   11a18:	df000017 	ldw	fp,0(sp)
   11a1c:	dec00104 	addi	sp,sp,4
   11a20:	f800283a 	ret

00011a24 <OS_EventTaskRdy>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
INT8U  OS_EventTaskRdy (OS_EVENT *pevent, void *pmsg, INT8U msk, INT8U pend_stat)
{
   11a24:	defff804 	addi	sp,sp,-32
   11a28:	dfc00715 	stw	ra,28(sp)
   11a2c:	df000615 	stw	fp,24(sp)
   11a30:	df000604 	addi	fp,sp,24
   11a34:	e13ffc15 	stw	r4,-16(fp)
   11a38:	e17ffd15 	stw	r5,-12(fp)
   11a3c:	3007883a 	mov	r3,r6
   11a40:	3805883a 	mov	r2,r7
   11a44:	e0fffe05 	stb	r3,-8(fp)
   11a48:	e0bfff05 	stb	r2,-4(fp)
    INT16U  *ptbl;
#endif


#if OS_LOWEST_PRIO <= 63
    y    = OSUnMapTbl[pevent->OSEventGrp];              /* Find HPT waiting for message                */
   11a4c:	e0bffc17 	ldw	r2,-16(fp)
   11a50:	10800283 	ldbu	r2,10(r2)
   11a54:	10c03fcc 	andi	r3,r2,255
   11a58:	008000b4 	movhi	r2,2
   11a5c:	1082ca04 	addi	r2,r2,2856
   11a60:	10c5883a 	add	r2,r2,r3
   11a64:	10800003 	ldbu	r2,0(r2)
   11a68:	e0bffa05 	stb	r2,-24(fp)
    x    = OSUnMapTbl[pevent->OSEventTbl[y]];
   11a6c:	e0bffa03 	ldbu	r2,-24(fp)
   11a70:	e0fffc17 	ldw	r3,-16(fp)
   11a74:	1885883a 	add	r2,r3,r2
   11a78:	10800204 	addi	r2,r2,8
   11a7c:	108000c3 	ldbu	r2,3(r2)
   11a80:	10c03fcc 	andi	r3,r2,255
   11a84:	008000b4 	movhi	r2,2
   11a88:	1082ca04 	addi	r2,r2,2856
   11a8c:	10c5883a 	add	r2,r2,r3
   11a90:	10800003 	ldbu	r2,0(r2)
   11a94:	e0bffa45 	stb	r2,-23(fp)
    prio = (INT8U)((y << 3) + x);                       /* Find priority of task getting the msg       */
   11a98:	e0bffa03 	ldbu	r2,-24(fp)
   11a9c:	100490fa 	slli	r2,r2,3
   11aa0:	1007883a 	mov	r3,r2
   11aa4:	e0bffa43 	ldbu	r2,-23(fp)
   11aa8:	1885883a 	add	r2,r3,r2
   11aac:	e0bffa85 	stb	r2,-22(fp)
        x = OSUnMapTbl[(*ptbl >> 8) & 0xFF] + 8;
    }
    prio = (INT8U)((y << 4) + x);                       /* Find priority of task getting the msg       */
#endif

    ptcb                  =  OSTCBPrioTbl[prio];        /* Point to this task's OS_TCB                 */
   11ab0:	e0fffa83 	ldbu	r3,-22(fp)
   11ab4:	008000b4 	movhi	r2,2
   11ab8:	109fc504 	addi	r2,r2,32532
   11abc:	18c7883a 	add	r3,r3,r3
   11ac0:	18c7883a 	add	r3,r3,r3
   11ac4:	10c5883a 	add	r2,r2,r3
   11ac8:	10800017 	ldw	r2,0(r2)
   11acc:	e0bffb15 	stw	r2,-20(fp)
    ptcb->OSTCBDly        =  0;                         /* Prevent OSTimeTick() from readying task     */
   11ad0:	e0bffb17 	ldw	r2,-20(fp)
   11ad4:	10000b8d 	sth	zero,46(r2)
#if ((OS_Q_EN > 0) && (OS_MAX_QS > 0)) || (OS_MBOX_EN > 0)
    ptcb->OSTCBMsg        =  pmsg;                      /* Send message directly to waiting task       */
   11ad8:	e0bffb17 	ldw	r2,-20(fp)
   11adc:	e0fffd17 	ldw	r3,-12(fp)
   11ae0:	10c00915 	stw	r3,36(r2)
#else
    pmsg                  =  pmsg;                      /* Prevent compiler warning if not used        */
#endif
    ptcb->OSTCBStat      &= ~msk;                       /* Clear bit associated with event type        */
   11ae4:	e0bffb17 	ldw	r2,-20(fp)
   11ae8:	10800c03 	ldbu	r2,48(r2)
   11aec:	1007883a 	mov	r3,r2
   11af0:	e0bffe03 	ldbu	r2,-8(fp)
   11af4:	0084303a 	nor	r2,zero,r2
   11af8:	1884703a 	and	r2,r3,r2
   11afc:	1007883a 	mov	r3,r2
   11b00:	e0bffb17 	ldw	r2,-20(fp)
   11b04:	10c00c05 	stb	r3,48(r2)
    ptcb->OSTCBStatPend   =  pend_stat;                 /* Set pend status of post or abort            */
   11b08:	e0bffb17 	ldw	r2,-20(fp)
   11b0c:	e0ffff03 	ldbu	r3,-4(fp)
   11b10:	10c00c45 	stb	r3,49(r2)
                                                        /* See if task is ready (could be susp'd)      */
    if ((ptcb->OSTCBStat &   OS_STAT_SUSPEND) == OS_STAT_RDY) {
   11b14:	e0bffb17 	ldw	r2,-20(fp)
   11b18:	10800c03 	ldbu	r2,48(r2)
   11b1c:	10803fcc 	andi	r2,r2,255
   11b20:	1080020c 	andi	r2,r2,8
   11b24:	1000111e 	bne	r2,zero,11b6c <OS_EventTaskRdy+0x148>
        OSRdyGrp         |=  ptcb->OSTCBBitY;           /* Put task in the ready to run list           */
   11b28:	e0bffb17 	ldw	r2,-20(fp)
   11b2c:	10c00d83 	ldbu	r3,54(r2)
   11b30:	d0a80803 	ldbu	r2,-24544(gp)
   11b34:	1884b03a 	or	r2,r3,r2
   11b38:	d0a80805 	stb	r2,-24544(gp)
        OSRdyTbl[y]      |=  ptcb->OSTCBBitX;
   11b3c:	e0fffa03 	ldbu	r3,-24(fp)
   11b40:	e13ffa03 	ldbu	r4,-24(fp)
   11b44:	d0a80844 	addi	r2,gp,-24543
   11b48:	2085883a 	add	r2,r4,r2
   11b4c:	11000003 	ldbu	r4,0(r2)
   11b50:	e0bffb17 	ldw	r2,-20(fp)
   11b54:	10800d43 	ldbu	r2,53(r2)
   11b58:	2084b03a 	or	r2,r4,r2
   11b5c:	1009883a 	mov	r4,r2
   11b60:	d0a80844 	addi	r2,gp,-24543
   11b64:	1885883a 	add	r2,r3,r2
   11b68:	11000005 	stb	r4,0(r2)
    }

    OS_EventTaskRemove(ptcb, pevent);                   /* Remove this task from event   wait list     */
   11b6c:	e13ffb17 	ldw	r4,-20(fp)
   11b70:	e17ffc17 	ldw	r5,-16(fp)
   11b74:	0011e140 	call	11e14 <OS_EventTaskRemove>
#if (OS_EVENT_MULTI_EN > 0)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {   /* Remove this task from events' wait lists    */
   11b78:	e0bffb17 	ldw	r2,-20(fp)
   11b7c:	10800817 	ldw	r2,32(r2)
   11b80:	10000826 	beq	r2,zero,11ba4 <OS_EventTaskRdy+0x180>
        OS_EventTaskRemoveMulti(ptcb, ptcb->OSTCBEventMultiPtr);
   11b84:	e0bffb17 	ldw	r2,-20(fp)
   11b88:	10800817 	ldw	r2,32(r2)
   11b8c:	e13ffb17 	ldw	r4,-20(fp)
   11b90:	100b883a 	mov	r5,r2
   11b94:	0011ec80 	call	11ec8 <OS_EventTaskRemoveMulti>
        ptcb->OSTCBEventPtr       = (OS_EVENT  *)pevent;/* Return event as first multi-pend event ready*/
   11b98:	e0bffb17 	ldw	r2,-20(fp)
   11b9c:	e0fffc17 	ldw	r3,-16(fp)
   11ba0:	10c00715 	stw	r3,28(r2)
    }
#endif

    return (prio);
   11ba4:	e0bffa83 	ldbu	r2,-22(fp)
}
   11ba8:	e037883a 	mov	sp,fp
   11bac:	dfc00117 	ldw	ra,4(sp)
   11bb0:	df000017 	ldw	fp,0(sp)
   11bb4:	dec00204 	addi	sp,sp,8
   11bb8:	f800283a 	ret

00011bbc <OS_EventTaskWait>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
void  OS_EventTaskWait (OS_EVENT *pevent)
{
   11bbc:	defffd04 	addi	sp,sp,-12
   11bc0:	df000215 	stw	fp,8(sp)
   11bc4:	df000204 	addi	fp,sp,8
   11bc8:	e13fff15 	stw	r4,-4(fp)
    INT8U  y;


    OSTCBCur->OSTCBEventPtr               = pevent;                 /* Store ptr to ECB in TCB         */
   11bcc:	d0a80b17 	ldw	r2,-24532(gp)
   11bd0:	e0ffff17 	ldw	r3,-4(fp)
   11bd4:	10c00715 	stw	r3,28(r2)

    pevent->OSEventTbl[OSTCBCur->OSTCBY] |= OSTCBCur->OSTCBBitX;    /* Put task in waiting list        */
   11bd8:	d0a80b17 	ldw	r2,-24532(gp)
   11bdc:	10800d03 	ldbu	r2,52(r2)
   11be0:	10803fcc 	andi	r2,r2,255
   11be4:	d0e80b17 	ldw	r3,-24532(gp)
   11be8:	18c00d03 	ldbu	r3,52(r3)
   11bec:	18c03fcc 	andi	r3,r3,255
   11bf0:	e13fff17 	ldw	r4,-4(fp)
   11bf4:	20c7883a 	add	r3,r4,r3
   11bf8:	18c00204 	addi	r3,r3,8
   11bfc:	190000c3 	ldbu	r4,3(r3)
   11c00:	d0e80b17 	ldw	r3,-24532(gp)
   11c04:	18c00d43 	ldbu	r3,53(r3)
   11c08:	20c6b03a 	or	r3,r4,r3
   11c0c:	1809883a 	mov	r4,r3
   11c10:	e0ffff17 	ldw	r3,-4(fp)
   11c14:	1885883a 	add	r2,r3,r2
   11c18:	10800204 	addi	r2,r2,8
   11c1c:	110000c5 	stb	r4,3(r2)
    pevent->OSEventGrp                   |= OSTCBCur->OSTCBBitY;
   11c20:	e0bfff17 	ldw	r2,-4(fp)
   11c24:	10c00283 	ldbu	r3,10(r2)
   11c28:	d0a80b17 	ldw	r2,-24532(gp)
   11c2c:	10800d83 	ldbu	r2,54(r2)
   11c30:	1884b03a 	or	r2,r3,r2
   11c34:	1007883a 	mov	r3,r2
   11c38:	e0bfff17 	ldw	r2,-4(fp)
   11c3c:	10c00285 	stb	r3,10(r2)

    y             =  OSTCBCur->OSTCBY;            /* Task no longer ready                              */
   11c40:	d0a80b17 	ldw	r2,-24532(gp)
   11c44:	10800d03 	ldbu	r2,52(r2)
   11c48:	e0bffe05 	stb	r2,-8(fp)
    OSRdyTbl[y]  &= ~OSTCBCur->OSTCBBitX;
   11c4c:	e0fffe03 	ldbu	r3,-8(fp)
   11c50:	e13ffe03 	ldbu	r4,-8(fp)
   11c54:	d0a80844 	addi	r2,gp,-24543
   11c58:	2085883a 	add	r2,r4,r2
   11c5c:	10800003 	ldbu	r2,0(r2)
   11c60:	1009883a 	mov	r4,r2
   11c64:	d0a80b17 	ldw	r2,-24532(gp)
   11c68:	10800d43 	ldbu	r2,53(r2)
   11c6c:	0084303a 	nor	r2,zero,r2
   11c70:	2084703a 	and	r2,r4,r2
   11c74:	1009883a 	mov	r4,r2
   11c78:	d0a80844 	addi	r2,gp,-24543
   11c7c:	1885883a 	add	r2,r3,r2
   11c80:	11000005 	stb	r4,0(r2)
    if (OSRdyTbl[y] == 0) {
   11c84:	e0fffe03 	ldbu	r3,-8(fp)
   11c88:	d0a80844 	addi	r2,gp,-24543
   11c8c:	1885883a 	add	r2,r3,r2
   11c90:	10800003 	ldbu	r2,0(r2)
   11c94:	10803fcc 	andi	r2,r2,255
   11c98:	1000071e 	bne	r2,zero,11cb8 <OS_EventTaskWait+0xfc>
        OSRdyGrp &= ~OSTCBCur->OSTCBBitY;         /* Clear event grp bit if this was only task pending */
   11c9c:	d0a80b17 	ldw	r2,-24532(gp)
   11ca0:	10800d83 	ldbu	r2,54(r2)
   11ca4:	0084303a 	nor	r2,zero,r2
   11ca8:	1007883a 	mov	r3,r2
   11cac:	d0a80803 	ldbu	r2,-24544(gp)
   11cb0:	1884703a 	and	r2,r3,r2
   11cb4:	d0a80805 	stb	r2,-24544(gp)
    }
}
   11cb8:	e037883a 	mov	sp,fp
   11cbc:	df000017 	ldw	fp,0(sp)
   11cc0:	dec00104 	addi	sp,sp,4
   11cc4:	f800283a 	ret

00011cc8 <OS_EventTaskWaitMulti>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if ((OS_EVENT_EN) && (OS_EVENT_MULTI_EN > 0))
void  OS_EventTaskWaitMulti (OS_EVENT **pevents_wait)
{
   11cc8:	defffb04 	addi	sp,sp,-20
   11ccc:	df000415 	stw	fp,16(sp)
   11cd0:	df000404 	addi	fp,sp,16
   11cd4:	e13fff15 	stw	r4,-4(fp)
    OS_EVENT **pevents;
    OS_EVENT  *pevent;
    INT8U      y;


    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;
   11cd8:	d0a80b17 	ldw	r2,-24532(gp)
   11cdc:	10000715 	stw	zero,28(r2)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)pevents_wait;       /* Store ptr to ECBs in TCB        */
   11ce0:	d0a80b17 	ldw	r2,-24532(gp)
   11ce4:	e0ffff17 	ldw	r3,-4(fp)
   11ce8:	10c00815 	stw	r3,32(r2)

    pevents =  pevents_wait;
   11cec:	e0bfff17 	ldw	r2,-4(fp)
   11cf0:	e0bffc15 	stw	r2,-16(fp)
    pevent  = *pevents;
   11cf4:	e0bffc17 	ldw	r2,-16(fp)
   11cf8:	10800017 	ldw	r2,0(r2)
   11cfc:	e0bffd15 	stw	r2,-12(fp)
    while (pevent != (OS_EVENT *)0) {                               /* Put task in waiting lists       */
   11d00:	00002006 	br	11d84 <OS_EventTaskWaitMulti+0xbc>
        pevent->OSEventTbl[OSTCBCur->OSTCBY] |= OSTCBCur->OSTCBBitX;
   11d04:	d0a80b17 	ldw	r2,-24532(gp)
   11d08:	10800d03 	ldbu	r2,52(r2)
   11d0c:	10803fcc 	andi	r2,r2,255
   11d10:	d0e80b17 	ldw	r3,-24532(gp)
   11d14:	18c00d03 	ldbu	r3,52(r3)
   11d18:	18c03fcc 	andi	r3,r3,255
   11d1c:	e13ffd17 	ldw	r4,-12(fp)
   11d20:	20c7883a 	add	r3,r4,r3
   11d24:	18c00204 	addi	r3,r3,8
   11d28:	190000c3 	ldbu	r4,3(r3)
   11d2c:	d0e80b17 	ldw	r3,-24532(gp)
   11d30:	18c00d43 	ldbu	r3,53(r3)
   11d34:	20c6b03a 	or	r3,r4,r3
   11d38:	1809883a 	mov	r4,r3
   11d3c:	e0fffd17 	ldw	r3,-12(fp)
   11d40:	1885883a 	add	r2,r3,r2
   11d44:	10800204 	addi	r2,r2,8
   11d48:	110000c5 	stb	r4,3(r2)
        pevent->OSEventGrp                   |= OSTCBCur->OSTCBBitY;
   11d4c:	e0bffd17 	ldw	r2,-12(fp)
   11d50:	10c00283 	ldbu	r3,10(r2)
   11d54:	d0a80b17 	ldw	r2,-24532(gp)
   11d58:	10800d83 	ldbu	r2,54(r2)
   11d5c:	1884b03a 	or	r2,r3,r2
   11d60:	1007883a 	mov	r3,r2
   11d64:	e0bffd17 	ldw	r2,-12(fp)
   11d68:	10c00285 	stb	r3,10(r2)
        pevents++;
   11d6c:	e0bffc17 	ldw	r2,-16(fp)
   11d70:	10800104 	addi	r2,r2,4
   11d74:	e0bffc15 	stw	r2,-16(fp)
        pevent = *pevents;
   11d78:	e0bffc17 	ldw	r2,-16(fp)
   11d7c:	10800017 	ldw	r2,0(r2)
   11d80:	e0bffd15 	stw	r2,-12(fp)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)pevents_wait;       /* Store ptr to ECBs in TCB        */

    pevents =  pevents_wait;
    pevent  = *pevents;
    while (pevent != (OS_EVENT *)0) {                               /* Put task in waiting lists       */
   11d84:	e0bffd17 	ldw	r2,-12(fp)
   11d88:	103fde1e 	bne	r2,zero,11d04 <__alt_mem_Flash_flash_data+0xf4011d04>
        pevent->OSEventGrp                   |= OSTCBCur->OSTCBBitY;
        pevents++;
        pevent = *pevents;
    }

    y             =  OSTCBCur->OSTCBY;            /* Task no longer ready                              */
   11d8c:	d0a80b17 	ldw	r2,-24532(gp)
   11d90:	10800d03 	ldbu	r2,52(r2)
   11d94:	e0bffe05 	stb	r2,-8(fp)
    OSRdyTbl[y]  &= ~OSTCBCur->OSTCBBitX;
   11d98:	e0fffe03 	ldbu	r3,-8(fp)
   11d9c:	e13ffe03 	ldbu	r4,-8(fp)
   11da0:	d0a80844 	addi	r2,gp,-24543
   11da4:	2085883a 	add	r2,r4,r2
   11da8:	10800003 	ldbu	r2,0(r2)
   11dac:	1009883a 	mov	r4,r2
   11db0:	d0a80b17 	ldw	r2,-24532(gp)
   11db4:	10800d43 	ldbu	r2,53(r2)
   11db8:	0084303a 	nor	r2,zero,r2
   11dbc:	2084703a 	and	r2,r4,r2
   11dc0:	1009883a 	mov	r4,r2
   11dc4:	d0a80844 	addi	r2,gp,-24543
   11dc8:	1885883a 	add	r2,r3,r2
   11dcc:	11000005 	stb	r4,0(r2)
    if (OSRdyTbl[y] == 0) {
   11dd0:	e0fffe03 	ldbu	r3,-8(fp)
   11dd4:	d0a80844 	addi	r2,gp,-24543
   11dd8:	1885883a 	add	r2,r3,r2
   11ddc:	10800003 	ldbu	r2,0(r2)
   11de0:	10803fcc 	andi	r2,r2,255
   11de4:	1000071e 	bne	r2,zero,11e04 <OS_EventTaskWaitMulti+0x13c>
        OSRdyGrp &= ~OSTCBCur->OSTCBBitY;         /* Clear event grp bit if this was only task pending */
   11de8:	d0a80b17 	ldw	r2,-24532(gp)
   11dec:	10800d83 	ldbu	r2,54(r2)
   11df0:	0084303a 	nor	r2,zero,r2
   11df4:	1007883a 	mov	r3,r2
   11df8:	d0a80803 	ldbu	r2,-24544(gp)
   11dfc:	1884703a 	and	r2,r3,r2
   11e00:	d0a80805 	stb	r2,-24544(gp)
    }
}
   11e04:	e037883a 	mov	sp,fp
   11e08:	df000017 	ldw	fp,0(sp)
   11e0c:	dec00104 	addi	sp,sp,4
   11e10:	f800283a 	ret

00011e14 <OS_EventTaskRemove>:
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
void  OS_EventTaskRemove (OS_TCB   *ptcb,
                          OS_EVENT *pevent)
{
   11e14:	defffc04 	addi	sp,sp,-16
   11e18:	df000315 	stw	fp,12(sp)
   11e1c:	df000304 	addi	fp,sp,12
   11e20:	e13ffe15 	stw	r4,-8(fp)
   11e24:	e17fff15 	stw	r5,-4(fp)
    INT8U  y;


    y                       =  ptcb->OSTCBY;
   11e28:	e0bffe17 	ldw	r2,-8(fp)
   11e2c:	10800d03 	ldbu	r2,52(r2)
   11e30:	e0bffd05 	stb	r2,-12(fp)
    pevent->OSEventTbl[y]  &= ~ptcb->OSTCBBitX;         /* Remove task from wait list                  */
   11e34:	e0bffd03 	ldbu	r2,-12(fp)
   11e38:	e0fffd03 	ldbu	r3,-12(fp)
   11e3c:	e13fff17 	ldw	r4,-4(fp)
   11e40:	20c7883a 	add	r3,r4,r3
   11e44:	18c00204 	addi	r3,r3,8
   11e48:	18c000c3 	ldbu	r3,3(r3)
   11e4c:	1809883a 	mov	r4,r3
   11e50:	e0fffe17 	ldw	r3,-8(fp)
   11e54:	18c00d43 	ldbu	r3,53(r3)
   11e58:	00c6303a 	nor	r3,zero,r3
   11e5c:	20c6703a 	and	r3,r4,r3
   11e60:	1809883a 	mov	r4,r3
   11e64:	e0ffff17 	ldw	r3,-4(fp)
   11e68:	1885883a 	add	r2,r3,r2
   11e6c:	10800204 	addi	r2,r2,8
   11e70:	110000c5 	stb	r4,3(r2)
    if (pevent->OSEventTbl[y] == 0) {
   11e74:	e0bffd03 	ldbu	r2,-12(fp)
   11e78:	e0ffff17 	ldw	r3,-4(fp)
   11e7c:	1885883a 	add	r2,r3,r2
   11e80:	10800204 	addi	r2,r2,8
   11e84:	108000c3 	ldbu	r2,3(r2)
   11e88:	10803fcc 	andi	r2,r2,255
   11e8c:	10000a1e 	bne	r2,zero,11eb8 <OS_EventTaskRemove+0xa4>
        pevent->OSEventGrp &= ~ptcb->OSTCBBitY;
   11e90:	e0bfff17 	ldw	r2,-4(fp)
   11e94:	10800283 	ldbu	r2,10(r2)
   11e98:	1007883a 	mov	r3,r2
   11e9c:	e0bffe17 	ldw	r2,-8(fp)
   11ea0:	10800d83 	ldbu	r2,54(r2)
   11ea4:	0084303a 	nor	r2,zero,r2
   11ea8:	1884703a 	and	r2,r3,r2
   11eac:	1007883a 	mov	r3,r2
   11eb0:	e0bfff17 	ldw	r2,-4(fp)
   11eb4:	10c00285 	stb	r3,10(r2)
    }
}
   11eb8:	e037883a 	mov	sp,fp
   11ebc:	df000017 	ldw	fp,0(sp)
   11ec0:	dec00104 	addi	sp,sp,4
   11ec4:	f800283a 	ret

00011ec8 <OS_EventTaskRemoveMulti>:
*********************************************************************************************************
*/
#if ((OS_EVENT_EN) && (OS_EVENT_MULTI_EN > 0))
void  OS_EventTaskRemoveMulti (OS_TCB    *ptcb,
                               OS_EVENT **pevents_multi)
{
   11ec8:	defffa04 	addi	sp,sp,-24
   11ecc:	df000515 	stw	fp,20(sp)
   11ed0:	df000504 	addi	fp,sp,20
   11ed4:	e13ffe15 	stw	r4,-8(fp)
   11ed8:	e17fff15 	stw	r5,-4(fp)
    INT16U     bity;
    INT16U     bitx;
#endif


    y       =  ptcb->OSTCBY;
   11edc:	e0bffe17 	ldw	r2,-8(fp)
   11ee0:	10800d03 	ldbu	r2,52(r2)
   11ee4:	e0bffd05 	stb	r2,-12(fp)
    bity    =  ptcb->OSTCBBitY;
   11ee8:	e0bffe17 	ldw	r2,-8(fp)
   11eec:	10800d83 	ldbu	r2,54(r2)
   11ef0:	e0bffd45 	stb	r2,-11(fp)
    bitx    =  ptcb->OSTCBBitX;
   11ef4:	e0bffe17 	ldw	r2,-8(fp)
   11ef8:	10800d43 	ldbu	r2,53(r2)
   11efc:	e0bffd85 	stb	r2,-10(fp)
    pevents =  pevents_multi;
   11f00:	e0bfff17 	ldw	r2,-4(fp)
   11f04:	e0bffb15 	stw	r2,-20(fp)
    pevent  = *pevents;
   11f08:	e0bffb17 	ldw	r2,-20(fp)
   11f0c:	10800017 	ldw	r2,0(r2)
   11f10:	e0bffc15 	stw	r2,-16(fp)
    while (pevent != (OS_EVENT *)0) {                   /* Remove task from all events' wait lists     */
   11f14:	00002506 	br	11fac <OS_EventTaskRemoveMulti+0xe4>
        pevent->OSEventTbl[y]  &= ~bitx;
   11f18:	e0bffd03 	ldbu	r2,-12(fp)
   11f1c:	e0fffd03 	ldbu	r3,-12(fp)
   11f20:	e13ffc17 	ldw	r4,-16(fp)
   11f24:	20c7883a 	add	r3,r4,r3
   11f28:	18c00204 	addi	r3,r3,8
   11f2c:	18c000c3 	ldbu	r3,3(r3)
   11f30:	1809883a 	mov	r4,r3
   11f34:	e0fffd83 	ldbu	r3,-10(fp)
   11f38:	00c6303a 	nor	r3,zero,r3
   11f3c:	20c6703a 	and	r3,r4,r3
   11f40:	1809883a 	mov	r4,r3
   11f44:	e0fffc17 	ldw	r3,-16(fp)
   11f48:	1885883a 	add	r2,r3,r2
   11f4c:	10800204 	addi	r2,r2,8
   11f50:	110000c5 	stb	r4,3(r2)
        if (pevent->OSEventTbl[y] == 0) {
   11f54:	e0bffd03 	ldbu	r2,-12(fp)
   11f58:	e0fffc17 	ldw	r3,-16(fp)
   11f5c:	1885883a 	add	r2,r3,r2
   11f60:	10800204 	addi	r2,r2,8
   11f64:	108000c3 	ldbu	r2,3(r2)
   11f68:	10803fcc 	andi	r2,r2,255
   11f6c:	1000091e 	bne	r2,zero,11f94 <OS_EventTaskRemoveMulti+0xcc>
            pevent->OSEventGrp &= ~bity;
   11f70:	e0bffc17 	ldw	r2,-16(fp)
   11f74:	10800283 	ldbu	r2,10(r2)
   11f78:	1007883a 	mov	r3,r2
   11f7c:	e0bffd43 	ldbu	r2,-11(fp)
   11f80:	0084303a 	nor	r2,zero,r2
   11f84:	1884703a 	and	r2,r3,r2
   11f88:	1007883a 	mov	r3,r2
   11f8c:	e0bffc17 	ldw	r2,-16(fp)
   11f90:	10c00285 	stb	r3,10(r2)
        }
        pevents++;
   11f94:	e0bffb17 	ldw	r2,-20(fp)
   11f98:	10800104 	addi	r2,r2,4
   11f9c:	e0bffb15 	stw	r2,-20(fp)
        pevent = *pevents;
   11fa0:	e0bffb17 	ldw	r2,-20(fp)
   11fa4:	10800017 	ldw	r2,0(r2)
   11fa8:	e0bffc15 	stw	r2,-16(fp)
    y       =  ptcb->OSTCBY;
    bity    =  ptcb->OSTCBBitY;
    bitx    =  ptcb->OSTCBBitX;
    pevents =  pevents_multi;
    pevent  = *pevents;
    while (pevent != (OS_EVENT *)0) {                   /* Remove task from all events' wait lists     */
   11fac:	e0bffc17 	ldw	r2,-16(fp)
   11fb0:	103fd91e 	bne	r2,zero,11f18 <__alt_mem_Flash_flash_data+0xf4011f18>
            pevent->OSEventGrp &= ~bity;
        }
        pevents++;
        pevent = *pevents;
    }
}
   11fb4:	e037883a 	mov	sp,fp
   11fb8:	df000017 	ldw	fp,0(sp)
   11fbc:	dec00104 	addi	sp,sp,4
   11fc0:	f800283a 	ret

00011fc4 <OS_EventWaitListInit>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
void  OS_EventWaitListInit (OS_EVENT *pevent)
{
   11fc4:	defffc04 	addi	sp,sp,-16
   11fc8:	df000315 	stw	fp,12(sp)
   11fcc:	df000304 	addi	fp,sp,12
   11fd0:	e13fff15 	stw	r4,-4(fp)
    INT16U *ptbl;
#endif
    INT8U   i;


    pevent->OSEventGrp = 0;                      /* No task waiting on event                           */
   11fd4:	e0bfff17 	ldw	r2,-4(fp)
   11fd8:	10000285 	stb	zero,10(r2)
    ptbl               = &pevent->OSEventTbl[0];
   11fdc:	e0bfff17 	ldw	r2,-4(fp)
   11fe0:	108002c4 	addi	r2,r2,11
   11fe4:	e0bffd15 	stw	r2,-12(fp)

    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
   11fe8:	e03ffe05 	stb	zero,-8(fp)
   11fec:	00000706 	br	1200c <OS_EventWaitListInit+0x48>
        *ptbl++ = 0;
   11ff0:	e0bffd17 	ldw	r2,-12(fp)
   11ff4:	10c00044 	addi	r3,r2,1
   11ff8:	e0fffd15 	stw	r3,-12(fp)
   11ffc:	10000005 	stb	zero,0(r2)


    pevent->OSEventGrp = 0;                      /* No task waiting on event                           */
    ptbl               = &pevent->OSEventTbl[0];

    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
   12000:	e0bffe03 	ldbu	r2,-8(fp)
   12004:	10800044 	addi	r2,r2,1
   12008:	e0bffe05 	stb	r2,-8(fp)
   1200c:	e0bffe03 	ldbu	r2,-8(fp)
   12010:	108000f0 	cmpltui	r2,r2,3
   12014:	103ff61e 	bne	r2,zero,11ff0 <__alt_mem_Flash_flash_data+0xf4011ff0>
        *ptbl++ = 0;
    }
}
   12018:	e037883a 	mov	sp,fp
   1201c:	df000017 	ldw	fp,0(sp)
   12020:	dec00104 	addi	sp,sp,4
   12024:	f800283a 	ret

00012028 <OS_InitEventList>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitEventList (void)
{
   12028:	defffb04 	addi	sp,sp,-20
   1202c:	dfc00415 	stw	ra,16(sp)
   12030:	df000315 	stw	fp,12(sp)
   12034:	df000304 	addi	fp,sp,12
    INT16U     i;
    OS_EVENT  *pevent1;
    OS_EVENT  *pevent2;


    OS_MemClr((INT8U *)&OSEventTbl[0], sizeof(OSEventTbl)); /* Clear the event table                   */
   12038:	010000b4 	movhi	r4,2
   1203c:	211bb104 	addi	r4,r4,28356
   12040:	0142d004 	movi	r5,2880
   12044:	00123880 	call	12388 <OS_MemClr>
    pevent1 = &OSEventTbl[0];
   12048:	008000b4 	movhi	r2,2
   1204c:	109bb104 	addi	r2,r2,28356
   12050:	e0bffe15 	stw	r2,-8(fp)
    pevent2 = &OSEventTbl[1];
   12054:	008000b4 	movhi	r2,2
   12058:	109bbd04 	addi	r2,r2,28404
   1205c:	e0bfff15 	stw	r2,-4(fp)
    for (i = 0; i < (OS_MAX_EVENTS - 1); i++) {             /* Init. list of free EVENT control blocks */
   12060:	e03ffd0d 	sth	zero,-12(fp)
   12064:	00001306 	br	120b4 <OS_InitEventList+0x8c>
        pevent1->OSEventType    = OS_EVENT_TYPE_UNUSED;
   12068:	e0bffe17 	ldw	r2,-8(fp)
   1206c:	10000005 	stb	zero,0(r2)
        pevent1->OSEventPtr     = pevent2;
   12070:	e0bffe17 	ldw	r2,-8(fp)
   12074:	e0ffff17 	ldw	r3,-4(fp)
   12078:	10c00115 	stw	r3,4(r2)
#if OS_EVENT_NAME_SIZE > 1
        pevent1->OSEventName[0] = '?';                      /* Unknown name                            */
   1207c:	e0bffe17 	ldw	r2,-8(fp)
   12080:	00c00fc4 	movi	r3,63
   12084:	10c00385 	stb	r3,14(r2)
        pevent1->OSEventName[1] = OS_ASCII_NUL;
   12088:	e0bffe17 	ldw	r2,-8(fp)
   1208c:	100003c5 	stb	zero,15(r2)
#endif
        pevent1++;
   12090:	e0bffe17 	ldw	r2,-8(fp)
   12094:	10800c04 	addi	r2,r2,48
   12098:	e0bffe15 	stw	r2,-8(fp)
        pevent2++;
   1209c:	e0bfff17 	ldw	r2,-4(fp)
   120a0:	10800c04 	addi	r2,r2,48
   120a4:	e0bfff15 	stw	r2,-4(fp)


    OS_MemClr((INT8U *)&OSEventTbl[0], sizeof(OSEventTbl)); /* Clear the event table                   */
    pevent1 = &OSEventTbl[0];
    pevent2 = &OSEventTbl[1];
    for (i = 0; i < (OS_MAX_EVENTS - 1); i++) {             /* Init. list of free EVENT control blocks */
   120a8:	e0bffd0b 	ldhu	r2,-12(fp)
   120ac:	10800044 	addi	r2,r2,1
   120b0:	e0bffd0d 	sth	r2,-12(fp)
   120b4:	e0bffd0b 	ldhu	r2,-12(fp)
   120b8:	10800ef0 	cmpltui	r2,r2,59
   120bc:	103fea1e 	bne	r2,zero,12068 <__alt_mem_Flash_flash_data+0xf4012068>
        pevent1->OSEventName[1] = OS_ASCII_NUL;
#endif
        pevent1++;
        pevent2++;
    }
    pevent1->OSEventType            = OS_EVENT_TYPE_UNUSED;
   120c0:	e0bffe17 	ldw	r2,-8(fp)
   120c4:	10000005 	stb	zero,0(r2)
    pevent1->OSEventPtr             = (OS_EVENT *)0;
   120c8:	e0bffe17 	ldw	r2,-8(fp)
   120cc:	10000115 	stw	zero,4(r2)
#if OS_EVENT_NAME_SIZE > 1
    pevent1->OSEventName[0]         = '?';
   120d0:	e0bffe17 	ldw	r2,-8(fp)
   120d4:	00c00fc4 	movi	r3,63
   120d8:	10c00385 	stb	r3,14(r2)
    pevent1->OSEventName[1]         = OS_ASCII_NUL;
   120dc:	e0bffe17 	ldw	r2,-8(fp)
   120e0:	100003c5 	stb	zero,15(r2)
#endif
    OSEventFreeList                 = &OSEventTbl[0];
   120e4:	008000b4 	movhi	r2,2
   120e8:	109bb104 	addi	r2,r2,28356
   120ec:	d0a80915 	stw	r2,-24540(gp)
    OSEventFreeList->OSEventName[0] = '?';                  /* Unknown name                            */
    OSEventFreeList->OSEventName[1] = OS_ASCII_NUL;
#endif
#endif
#endif
}
   120f0:	e037883a 	mov	sp,fp
   120f4:	dfc00117 	ldw	ra,4(sp)
   120f8:	df000017 	ldw	fp,0(sp)
   120fc:	dec00204 	addi	sp,sp,8
   12100:	f800283a 	ret

00012104 <OS_InitMisc>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitMisc (void)
{
   12104:	deffff04 	addi	sp,sp,-4
   12108:	df000015 	stw	fp,0(sp)
   1210c:	d839883a 	mov	fp,sp
#if OS_TIME_GET_SET_EN > 0
    OSTime        = 0L;                                    /* Clear the 32-bit system clock            */
   12110:	d0280c15 	stw	zero,-24528(gp)
#endif

    OSIntNesting  = 0;                                     /* Clear the interrupt nesting counter      */
   12114:	d0280a05 	stb	zero,-24536(gp)
    OSLockNesting = 0;                                     /* Clear the scheduling lock counter        */
   12118:	d027fc05 	stb	zero,-24592(gp)

    OSTaskCtr     = 0;                                     /* Clear the number of tasks                */
   1211c:	d0280445 	stb	zero,-24559(gp)

    OSRunning     = OS_FALSE;                              /* Indicate that multitasking not started   */
   12120:	d027fc45 	stb	zero,-24591(gp)

    OSCtxSwCtr    = 0;                                     /* Clear the context switch counter         */
   12124:	d0280115 	stw	zero,-24572(gp)
    OSIdleCtr     = 0L;                                    /* Clear the 32-bit idle counter            */
   12128:	d027fd15 	stw	zero,-24588(gp)

#if OS_TASK_STAT_EN > 0
    OSIdleCtrRun  = 0L;
   1212c:	d0280f15 	stw	zero,-24516(gp)
    OSIdleCtrMax  = 0L;
   12130:	d0280215 	stw	zero,-24568(gp)
    OSStatRdy     = OS_FALSE;                              /* Statistic task is not ready              */
   12134:	d0280e05 	stb	zero,-24520(gp)
#endif
}
   12138:	e037883a 	mov	sp,fp
   1213c:	df000017 	ldw	fp,0(sp)
   12140:	dec00104 	addi	sp,sp,4
   12144:	f800283a 	ret

00012148 <OS_InitRdyList>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitRdyList (void)
{
   12148:	defffd04 	addi	sp,sp,-12
   1214c:	df000215 	stw	fp,8(sp)
   12150:	df000204 	addi	fp,sp,8
#else
    INT16U  *prdytbl;
#endif


    OSRdyGrp      = 0;                                     /* Clear the ready list                     */
   12154:	d0280805 	stb	zero,-24544(gp)
    prdytbl       = &OSRdyTbl[0];
   12158:	d0a80844 	addi	r2,gp,-24543
   1215c:	e0bfff15 	stw	r2,-4(fp)
    for (i = 0; i < OS_RDY_TBL_SIZE; i++) {
   12160:	e03ffe05 	stb	zero,-8(fp)
   12164:	00000706 	br	12184 <OS_InitRdyList+0x3c>
        *prdytbl++ = 0;
   12168:	e0bfff17 	ldw	r2,-4(fp)
   1216c:	10c00044 	addi	r3,r2,1
   12170:	e0ffff15 	stw	r3,-4(fp)
   12174:	10000005 	stb	zero,0(r2)
#endif


    OSRdyGrp      = 0;                                     /* Clear the ready list                     */
    prdytbl       = &OSRdyTbl[0];
    for (i = 0; i < OS_RDY_TBL_SIZE; i++) {
   12178:	e0bffe03 	ldbu	r2,-8(fp)
   1217c:	10800044 	addi	r2,r2,1
   12180:	e0bffe05 	stb	r2,-8(fp)
   12184:	e0bffe03 	ldbu	r2,-8(fp)
   12188:	108000f0 	cmpltui	r2,r2,3
   1218c:	103ff61e 	bne	r2,zero,12168 <__alt_mem_Flash_flash_data+0xf4012168>
        *prdytbl++ = 0;
    }

    OSPrioCur     = 0;
   12190:	d027fe45 	stb	zero,-24583(gp)
    OSPrioHighRdy = 0;
   12194:	d027fe05 	stb	zero,-24584(gp)

    OSTCBHighRdy  = (OS_TCB *)0;
   12198:	d0280615 	stw	zero,-24552(gp)
    OSTCBCur      = (OS_TCB *)0;
   1219c:	d0280b15 	stw	zero,-24532(gp)
}
   121a0:	e037883a 	mov	sp,fp
   121a4:	df000017 	ldw	fp,0(sp)
   121a8:	dec00104 	addi	sp,sp,4
   121ac:	f800283a 	ret

000121b0 <OS_InitTaskIdle>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitTaskIdle (void)
{
   121b0:	defff804 	addi	sp,sp,-32
   121b4:	dfc00715 	stw	ra,28(sp)
   121b8:	df000615 	stw	fp,24(sp)
   121bc:	df000604 	addi	fp,sp,24
#endif


#if OS_TASK_CREATE_EXT_EN > 0
    #if OS_STK_GROWTH == 1
    (void)OSTaskCreateExt(OS_TaskIdle,
   121c0:	00bfffd4 	movui	r2,65535
   121c4:	d8800015 	stw	r2,0(sp)
   121c8:	008000b4 	movhi	r2,2
   121cc:	1099b104 	addi	r2,r2,26308
   121d0:	d8800115 	stw	r2,4(sp)
   121d4:	00808004 	movi	r2,512
   121d8:	d8800215 	stw	r2,8(sp)
   121dc:	d8000315 	stw	zero,12(sp)
   121e0:	008000c4 	movi	r2,3
   121e4:	d8800415 	stw	r2,16(sp)
   121e8:	01000074 	movhi	r4,1
   121ec:	21099004 	addi	r4,r4,9792
   121f0:	000b883a 	mov	r5,zero
   121f4:	018000b4 	movhi	r6,2
   121f8:	319bb004 	addi	r6,r6,28352
   121fc:	01c00504 	movi	r7,20
   12200:	00170540 	call	17054 <OSTaskCreateExt>
                       OS_TASK_IDLE_PRIO);
    #endif
#endif

#if OS_TASK_NAME_SIZE > 14
    OSTaskNameSet(OS_TASK_IDLE_PRIO, (INT8U *)"uC/OS-II Idle", &err);
   12204:	01000504 	movi	r4,20
   12208:	014000b4 	movhi	r5,2
   1220c:	29430a04 	addi	r5,r5,3112
   12210:	e1bfff04 	addi	r6,fp,-4
   12214:	00179200 	call	17920 <OSTaskNameSet>
#else
#if OS_TASK_NAME_SIZE > 7
    OSTaskNameSet(OS_TASK_IDLE_PRIO, (INT8U *)"OS-Idle", &err);
#endif
#endif
}
   12218:	e037883a 	mov	sp,fp
   1221c:	dfc00117 	ldw	ra,4(sp)
   12220:	df000017 	ldw	fp,0(sp)
   12224:	dec00204 	addi	sp,sp,8
   12228:	f800283a 	ret

0001222c <OS_InitTaskStat>:
*********************************************************************************************************
*/

#if OS_TASK_STAT_EN > 0
static  void  OS_InitTaskStat (void)
{
   1222c:	defff804 	addi	sp,sp,-32
   12230:	dfc00715 	stw	ra,28(sp)
   12234:	df000615 	stw	fp,24(sp)
   12238:	df000604 	addi	fp,sp,24
#endif


#if OS_TASK_CREATE_EXT_EN > 0
    #if OS_STK_GROWTH == 1
    (void)OSTaskCreateExt(OS_TaskStat,
   1223c:	00bfff94 	movui	r2,65534
   12240:	d8800015 	stw	r2,0(sp)
   12244:	008000b4 	movhi	r2,2
   12248:	10973904 	addi	r2,r2,23780
   1224c:	d8800115 	stw	r2,4(sp)
   12250:	00808004 	movi	r2,512
   12254:	d8800215 	stw	r2,8(sp)
   12258:	d8000315 	stw	zero,12(sp)
   1225c:	008000c4 	movi	r2,3
   12260:	d8800415 	stw	r2,16(sp)
   12264:	01000074 	movhi	r4,1
   12268:	2109a704 	addi	r4,r4,9884
   1226c:	000b883a 	mov	r5,zero
   12270:	018000b4 	movhi	r6,2
   12274:	31993804 	addi	r6,r6,25824
   12278:	01c004c4 	movi	r7,19
   1227c:	00170540 	call	17054 <OSTaskCreateExt>
                       OS_TASK_STAT_PRIO);                             /* One higher than the idle task  */
    #endif
#endif

#if OS_TASK_NAME_SIZE > 14
    OSTaskNameSet(OS_TASK_STAT_PRIO, (INT8U *)"uC/OS-II Stat", &err);
   12280:	010004c4 	movi	r4,19
   12284:	014000b4 	movhi	r5,2
   12288:	29430e04 	addi	r5,r5,3128
   1228c:	e1bfff04 	addi	r6,fp,-4
   12290:	00179200 	call	17920 <OSTaskNameSet>
#else
#if OS_TASK_NAME_SIZE > 7
    OSTaskNameSet(OS_TASK_STAT_PRIO, (INT8U *)"OS-Stat", &err);
#endif
#endif
}
   12294:	e037883a 	mov	sp,fp
   12298:	dfc00117 	ldw	ra,4(sp)
   1229c:	df000017 	ldw	fp,0(sp)
   122a0:	dec00204 	addi	sp,sp,8
   122a4:	f800283a 	ret

000122a8 <OS_InitTCBList>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitTCBList (void)
{
   122a8:	defffb04 	addi	sp,sp,-20
   122ac:	dfc00415 	stw	ra,16(sp)
   122b0:	df000315 	stw	fp,12(sp)
   122b4:	df000304 	addi	fp,sp,12
    INT8U    i;
    OS_TCB  *ptcb1;
    OS_TCB  *ptcb2;


    OS_MemClr((INT8U *)&OSTCBTbl[0],     sizeof(OSTCBTbl));      /* Clear all the TCBs                 */
   122b8:	010000b4 	movhi	r4,2
   122bc:	211e8104 	addi	r4,r4,31236
   122c0:	01414404 	movi	r5,1296
   122c4:	00123880 	call	12388 <OS_MemClr>
    OS_MemClr((INT8U *)&OSTCBPrioTbl[0], sizeof(OSTCBPrioTbl));  /* Clear the priority table           */
   122c8:	010000b4 	movhi	r4,2
   122cc:	211fc504 	addi	r4,r4,32532
   122d0:	01401504 	movi	r5,84
   122d4:	00123880 	call	12388 <OS_MemClr>
    ptcb1 = &OSTCBTbl[0];
   122d8:	008000b4 	movhi	r2,2
   122dc:	109e8104 	addi	r2,r2,31236
   122e0:	e0bffe15 	stw	r2,-8(fp)
    ptcb2 = &OSTCBTbl[1];
   122e4:	008000b4 	movhi	r2,2
   122e8:	109e9c04 	addi	r2,r2,31344
   122ec:	e0bfff15 	stw	r2,-4(fp)
    for (i = 0; i < (OS_MAX_TASKS + OS_N_SYS_TASKS - 1); i++) {  /* Init. list of free TCBs            */
   122f0:	e03ffd05 	stb	zero,-12(fp)
   122f4:	00001106 	br	1233c <OS_InitTCBList+0x94>
        ptcb1->OSTCBNext = ptcb2;
   122f8:	e0bffe17 	ldw	r2,-8(fp)
   122fc:	e0ffff17 	ldw	r3,-4(fp)
   12300:	10c00515 	stw	r3,20(r2)
#if OS_TASK_NAME_SIZE > 1
        ptcb1->OSTCBTaskName[0] = '?';                           /* Unknown name                       */
   12304:	e0bffe17 	ldw	r2,-8(fp)
   12308:	00c00fc4 	movi	r3,63
   1230c:	10c01305 	stb	r3,76(r2)
        ptcb1->OSTCBTaskName[1] = OS_ASCII_NUL;
   12310:	e0bffe17 	ldw	r2,-8(fp)
   12314:	10001345 	stb	zero,77(r2)
#endif
        ptcb1++;
   12318:	e0bffe17 	ldw	r2,-8(fp)
   1231c:	10801b04 	addi	r2,r2,108
   12320:	e0bffe15 	stw	r2,-8(fp)
        ptcb2++;
   12324:	e0bfff17 	ldw	r2,-4(fp)
   12328:	10801b04 	addi	r2,r2,108
   1232c:	e0bfff15 	stw	r2,-4(fp)

    OS_MemClr((INT8U *)&OSTCBTbl[0],     sizeof(OSTCBTbl));      /* Clear all the TCBs                 */
    OS_MemClr((INT8U *)&OSTCBPrioTbl[0], sizeof(OSTCBPrioTbl));  /* Clear the priority table           */
    ptcb1 = &OSTCBTbl[0];
    ptcb2 = &OSTCBTbl[1];
    for (i = 0; i < (OS_MAX_TASKS + OS_N_SYS_TASKS - 1); i++) {  /* Init. list of free TCBs            */
   12330:	e0bffd03 	ldbu	r2,-12(fp)
   12334:	10800044 	addi	r2,r2,1
   12338:	e0bffd05 	stb	r2,-12(fp)
   1233c:	e0bffd03 	ldbu	r2,-12(fp)
   12340:	108002f0 	cmpltui	r2,r2,11
   12344:	103fec1e 	bne	r2,zero,122f8 <__alt_mem_Flash_flash_data+0xf40122f8>
        ptcb1->OSTCBTaskName[1] = OS_ASCII_NUL;
#endif
        ptcb1++;
        ptcb2++;
    }
    ptcb1->OSTCBNext = (OS_TCB *)0;                              /* Last OS_TCB                        */
   12348:	e0bffe17 	ldw	r2,-8(fp)
   1234c:	10000515 	stw	zero,20(r2)
#if OS_TASK_NAME_SIZE > 1
    ptcb1->OSTCBTaskName[0] = '?';                               /* Unknown name                       */
   12350:	e0bffe17 	ldw	r2,-8(fp)
   12354:	00c00fc4 	movi	r3,63
   12358:	10c01305 	stb	r3,76(r2)
    ptcb1->OSTCBTaskName[1] = OS_ASCII_NUL;
   1235c:	e0bffe17 	ldw	r2,-8(fp)
   12360:	10001345 	stb	zero,77(r2)
#endif
    OSTCBList               = (OS_TCB *)0;                       /* TCB lists initializations          */
   12364:	d027ff15 	stw	zero,-24580(gp)
    OSTCBFreeList           = &OSTCBTbl[0];
   12368:	008000b4 	movhi	r2,2
   1236c:	109e8104 	addi	r2,r2,31236
   12370:	d0a80315 	stw	r2,-24564(gp)
}
   12374:	e037883a 	mov	sp,fp
   12378:	dfc00117 	ldw	ra,4(sp)
   1237c:	df000017 	ldw	fp,0(sp)
   12380:	dec00204 	addi	sp,sp,8
   12384:	f800283a 	ret

00012388 <OS_MemClr>:
*                 of the alignment of the destination.
*********************************************************************************************************
*/

void  OS_MemClr (INT8U *pdest, INT16U size)
{
   12388:	defffd04 	addi	sp,sp,-12
   1238c:	df000215 	stw	fp,8(sp)
   12390:	df000204 	addi	fp,sp,8
   12394:	e13ffe15 	stw	r4,-8(fp)
   12398:	2805883a 	mov	r2,r5
   1239c:	e0bfff0d 	sth	r2,-4(fp)
    while (size > 0) {
   123a0:	00000706 	br	123c0 <OS_MemClr+0x38>
        *pdest++ = (INT8U)0;
   123a4:	e0bffe17 	ldw	r2,-8(fp)
   123a8:	10c00044 	addi	r3,r2,1
   123ac:	e0fffe15 	stw	r3,-8(fp)
   123b0:	10000005 	stb	zero,0(r2)
        size--;
   123b4:	e0bfff0b 	ldhu	r2,-4(fp)
   123b8:	10bfffc4 	addi	r2,r2,-1
   123bc:	e0bfff0d 	sth	r2,-4(fp)
*********************************************************************************************************
*/

void  OS_MemClr (INT8U *pdest, INT16U size)
{
    while (size > 0) {
   123c0:	e0bfff0b 	ldhu	r2,-4(fp)
   123c4:	103ff71e 	bne	r2,zero,123a4 <__alt_mem_Flash_flash_data+0xf40123a4>
        *pdest++ = (INT8U)0;
        size--;
    }
}
   123c8:	e037883a 	mov	sp,fp
   123cc:	df000017 	ldw	fp,0(sp)
   123d0:	dec00104 	addi	sp,sp,4
   123d4:	f800283a 	ret

000123d8 <OS_MemCopy>:
*                 of the alignment of the source and destination.
*********************************************************************************************************
*/

void  OS_MemCopy (INT8U *pdest, INT8U *psrc, INT16U size)
{
   123d8:	defffc04 	addi	sp,sp,-16
   123dc:	df000315 	stw	fp,12(sp)
   123e0:	df000304 	addi	fp,sp,12
   123e4:	e13ffd15 	stw	r4,-12(fp)
   123e8:	e17ffe15 	stw	r5,-8(fp)
   123ec:	3005883a 	mov	r2,r6
   123f0:	e0bfff0d 	sth	r2,-4(fp)
    while (size > 0) {
   123f4:	00000b06 	br	12424 <OS_MemCopy+0x4c>
        *pdest++ = *psrc++;
   123f8:	e0bffd17 	ldw	r2,-12(fp)
   123fc:	10c00044 	addi	r3,r2,1
   12400:	e0fffd15 	stw	r3,-12(fp)
   12404:	e0fffe17 	ldw	r3,-8(fp)
   12408:	19000044 	addi	r4,r3,1
   1240c:	e13ffe15 	stw	r4,-8(fp)
   12410:	18c00003 	ldbu	r3,0(r3)
   12414:	10c00005 	stb	r3,0(r2)
        size--;
   12418:	e0bfff0b 	ldhu	r2,-4(fp)
   1241c:	10bfffc4 	addi	r2,r2,-1
   12420:	e0bfff0d 	sth	r2,-4(fp)
*********************************************************************************************************
*/

void  OS_MemCopy (INT8U *pdest, INT8U *psrc, INT16U size)
{
    while (size > 0) {
   12424:	e0bfff0b 	ldhu	r2,-4(fp)
   12428:	103ff31e 	bne	r2,zero,123f8 <__alt_mem_Flash_flash_data+0xf40123f8>
        *pdest++ = *psrc++;
        size--;
    }
}
   1242c:	e037883a 	mov	sp,fp
   12430:	df000017 	ldw	fp,0(sp)
   12434:	dec00104 	addi	sp,sp,4
   12438:	f800283a 	ret

0001243c <OS_Sched>:
*              2) Rescheduling is prevented when the scheduler is locked (see OS_SchedLock())
*********************************************************************************************************
*/

void  OS_Sched (void)
{
   1243c:	defffb04 	addi	sp,sp,-20
   12440:	dfc00415 	stw	ra,16(sp)
   12444:	df000315 	stw	fp,12(sp)
   12448:	df000304 	addi	fp,sp,12
#if OS_CRITICAL_METHOD == 3                            /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
   1244c:	e03ffd15 	stw	zero,-12(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   12450:	0005303a 	rdctl	r2,status
   12454:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   12458:	e0fffe17 	ldw	r3,-8(fp)
   1245c:	00bfff84 	movi	r2,-2
   12460:	1884703a 	and	r2,r3,r2
   12464:	1001703a 	wrctl	status,r2
  
  return context;
   12468:	e0bffe17 	ldw	r2,-8(fp)
#endif



    OS_ENTER_CRITICAL();
   1246c:	e0bffd15 	stw	r2,-12(fp)
    if (OSIntNesting == 0) {                           /* Schedule only if all ISRs done and ...       */
   12470:	d0a80a03 	ldbu	r2,-24536(gp)
   12474:	10803fcc 	andi	r2,r2,255
   12478:	10001a1e 	bne	r2,zero,124e4 <OS_Sched+0xa8>
        if (OSLockNesting == 0) {                      /* ... scheduler is not locked                  */
   1247c:	d0a7fc03 	ldbu	r2,-24592(gp)
   12480:	10803fcc 	andi	r2,r2,255
   12484:	1000171e 	bne	r2,zero,124e4 <OS_Sched+0xa8>
            OS_SchedNew();
   12488:	00125080 	call	12508 <OS_SchedNew>
            if (OSPrioHighRdy != OSPrioCur) {          /* No Ctx Sw if current task is highest rdy     */
   1248c:	d0e7fe03 	ldbu	r3,-24584(gp)
   12490:	d0a7fe43 	ldbu	r2,-24583(gp)
   12494:	18c03fcc 	andi	r3,r3,255
   12498:	10803fcc 	andi	r2,r2,255
   1249c:	18801126 	beq	r3,r2,124e4 <OS_Sched+0xa8>
                OSTCBHighRdy = OSTCBPrioTbl[OSPrioHighRdy];
   124a0:	d0a7fe03 	ldbu	r2,-24584(gp)
   124a4:	10c03fcc 	andi	r3,r2,255
   124a8:	008000b4 	movhi	r2,2
   124ac:	109fc504 	addi	r2,r2,32532
   124b0:	18c7883a 	add	r3,r3,r3
   124b4:	18c7883a 	add	r3,r3,r3
   124b8:	10c5883a 	add	r2,r2,r3
   124bc:	10800017 	ldw	r2,0(r2)
   124c0:	d0a80615 	stw	r2,-24552(gp)
#if OS_TASK_PROFILE_EN > 0
                OSTCBHighRdy->OSTCBCtxSwCtr++;         /* Inc. # of context switches to this task      */
   124c4:	d0a80617 	ldw	r2,-24552(gp)
   124c8:	10c00e17 	ldw	r3,56(r2)
   124cc:	18c00044 	addi	r3,r3,1
   124d0:	10c00e15 	stw	r3,56(r2)
#endif
                OSCtxSwCtr++;                          /* Increment context switch counter             */
   124d4:	d0a80117 	ldw	r2,-24572(gp)
   124d8:	10800044 	addi	r2,r2,1
   124dc:	d0a80115 	stw	r2,-24572(gp)
                OS_TASK_SW();                          /* Perform a context switch                     */
   124e0:	001fd240 	call	1fd24 <OSCtxSw>
   124e4:	e0bffd17 	ldw	r2,-12(fp)
   124e8:	e0bfff15 	stw	r2,-4(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   124ec:	e0bfff17 	ldw	r2,-4(fp)
   124f0:	1001703a 	wrctl	status,r2
            }
        }
    }
    OS_EXIT_CRITICAL();
}
   124f4:	e037883a 	mov	sp,fp
   124f8:	dfc00117 	ldw	ra,4(sp)
   124fc:	df000017 	ldw	fp,0(sp)
   12500:	dec00204 	addi	sp,sp,8
   12504:	f800283a 	ret

00012508 <OS_SchedNew>:
*              2) Interrupts are assumed to be disabled when this function is called.
*********************************************************************************************************
*/

static  void  OS_SchedNew (void)
{
   12508:	defffe04 	addi	sp,sp,-8
   1250c:	df000115 	stw	fp,4(sp)
   12510:	df000104 	addi	fp,sp,4
#if OS_LOWEST_PRIO <= 63                         /* See if we support up to 64 tasks                   */
    INT8U   y;


    y             = OSUnMapTbl[OSRdyGrp];
   12514:	d0a80803 	ldbu	r2,-24544(gp)
   12518:	10c03fcc 	andi	r3,r2,255
   1251c:	008000b4 	movhi	r2,2
   12520:	1082ca04 	addi	r2,r2,2856
   12524:	10c5883a 	add	r2,r2,r3
   12528:	10800003 	ldbu	r2,0(r2)
   1252c:	e0bfff05 	stb	r2,-4(fp)
    OSPrioHighRdy = (INT8U)((y << 3) + OSUnMapTbl[OSRdyTbl[y]]);
   12530:	e0bfff03 	ldbu	r2,-4(fp)
   12534:	100490fa 	slli	r2,r2,3
   12538:	1009883a 	mov	r4,r2
   1253c:	e0ffff03 	ldbu	r3,-4(fp)
   12540:	d0a80844 	addi	r2,gp,-24543
   12544:	1885883a 	add	r2,r3,r2
   12548:	10800003 	ldbu	r2,0(r2)
   1254c:	10c03fcc 	andi	r3,r2,255
   12550:	008000b4 	movhi	r2,2
   12554:	1082ca04 	addi	r2,r2,2856
   12558:	10c5883a 	add	r2,r2,r3
   1255c:	10800003 	ldbu	r2,0(r2)
   12560:	2085883a 	add	r2,r4,r2
   12564:	d0a7fe05 	stb	r2,-24584(gp)
        OSPrioHighRdy = (INT8U)((y << 4) + OSUnMapTbl[(*ptbl & 0xFF)]);
    } else {
        OSPrioHighRdy = (INT8U)((y << 4) + OSUnMapTbl[(*ptbl >> 8) & 0xFF] + 8);
    }
#endif
}
   12568:	e037883a 	mov	sp,fp
   1256c:	df000017 	ldw	fp,0(sp)
   12570:	dec00104 	addi	sp,sp,4
   12574:	f800283a 	ret

00012578 <OS_StrCopy>:
*********************************************************************************************************
*/

#if (OS_EVENT_NAME_SIZE > 1) || (OS_FLAG_NAME_SIZE > 1) || (OS_MEM_NAME_SIZE > 1) || (OS_TASK_NAME_SIZE > 1) || (OS_TMR_CFG_NAME_SIZE > 1)
INT8U  OS_StrCopy (INT8U *pdest, INT8U *psrc)
{
   12578:	defffc04 	addi	sp,sp,-16
   1257c:	df000315 	stw	fp,12(sp)
   12580:	df000304 	addi	fp,sp,12
   12584:	e13ffe15 	stw	r4,-8(fp)
   12588:	e17fff15 	stw	r5,-4(fp)
    INT8U  len;


    len = 0;
   1258c:	e03ffd05 	stb	zero,-12(fp)
    while (*psrc != OS_ASCII_NUL) {
   12590:	00000b06 	br	125c0 <OS_StrCopy+0x48>
        *pdest++ = *psrc++;
   12594:	e0bffe17 	ldw	r2,-8(fp)
   12598:	10c00044 	addi	r3,r2,1
   1259c:	e0fffe15 	stw	r3,-8(fp)
   125a0:	e0ffff17 	ldw	r3,-4(fp)
   125a4:	19000044 	addi	r4,r3,1
   125a8:	e13fff15 	stw	r4,-4(fp)
   125ac:	18c00003 	ldbu	r3,0(r3)
   125b0:	10c00005 	stb	r3,0(r2)
        len++;
   125b4:	e0bffd03 	ldbu	r2,-12(fp)
   125b8:	10800044 	addi	r2,r2,1
   125bc:	e0bffd05 	stb	r2,-12(fp)
{
    INT8U  len;


    len = 0;
    while (*psrc != OS_ASCII_NUL) {
   125c0:	e0bfff17 	ldw	r2,-4(fp)
   125c4:	10800003 	ldbu	r2,0(r2)
   125c8:	10803fcc 	andi	r2,r2,255
   125cc:	103ff11e 	bne	r2,zero,12594 <__alt_mem_Flash_flash_data+0xf4012594>
        *pdest++ = *psrc++;
        len++;
    }
    *pdest = OS_ASCII_NUL;
   125d0:	e0bffe17 	ldw	r2,-8(fp)
   125d4:	10000005 	stb	zero,0(r2)
    return (len);
   125d8:	e0bffd03 	ldbu	r2,-12(fp)
}
   125dc:	e037883a 	mov	sp,fp
   125e0:	df000017 	ldw	fp,0(sp)
   125e4:	dec00104 	addi	sp,sp,4
   125e8:	f800283a 	ret

000125ec <OS_StrLen>:
*********************************************************************************************************
*/

#if (OS_EVENT_NAME_SIZE > 1) || (OS_FLAG_NAME_SIZE > 1) || (OS_MEM_NAME_SIZE > 1) || (OS_TASK_NAME_SIZE > 1) || (OS_TMR_CFG_NAME_SIZE > 1)
INT8U  OS_StrLen (INT8U *psrc)
{
   125ec:	defffd04 	addi	sp,sp,-12
   125f0:	df000215 	stw	fp,8(sp)
   125f4:	df000204 	addi	fp,sp,8
   125f8:	e13fff15 	stw	r4,-4(fp)
    INT8U  len;


    len = 0;
   125fc:	e03ffe05 	stb	zero,-8(fp)
    while (*psrc != OS_ASCII_NUL) {
   12600:	00000606 	br	1261c <OS_StrLen+0x30>
        psrc++;
   12604:	e0bfff17 	ldw	r2,-4(fp)
   12608:	10800044 	addi	r2,r2,1
   1260c:	e0bfff15 	stw	r2,-4(fp)
        len++;
   12610:	e0bffe03 	ldbu	r2,-8(fp)
   12614:	10800044 	addi	r2,r2,1
   12618:	e0bffe05 	stb	r2,-8(fp)
{
    INT8U  len;


    len = 0;
    while (*psrc != OS_ASCII_NUL) {
   1261c:	e0bfff17 	ldw	r2,-4(fp)
   12620:	10800003 	ldbu	r2,0(r2)
   12624:	10803fcc 	andi	r2,r2,255
   12628:	103ff61e 	bne	r2,zero,12604 <__alt_mem_Flash_flash_data+0xf4012604>
        psrc++;
        len++;
    }
    return (len);
   1262c:	e0bffe03 	ldbu	r2,-8(fp)
}
   12630:	e037883a 	mov	sp,fp
   12634:	df000017 	ldw	fp,0(sp)
   12638:	dec00104 	addi	sp,sp,4
   1263c:	f800283a 	ret

00012640 <OS_TaskIdle>:
*                 power.
*********************************************************************************************************
*/

void  OS_TaskIdle (void *p_arg)
{
   12640:	defffa04 	addi	sp,sp,-24
   12644:	dfc00515 	stw	ra,20(sp)
   12648:	df000415 	stw	fp,16(sp)
   1264c:	df000404 	addi	fp,sp,16
   12650:	e13fff15 	stw	r4,-4(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   12654:	e03ffc15 	stw	zero,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   12658:	0005303a 	rdctl	r2,status
   1265c:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   12660:	e0fffd17 	ldw	r3,-12(fp)
   12664:	00bfff84 	movi	r2,-2
   12668:	1884703a 	and	r2,r3,r2
   1266c:	1001703a 	wrctl	status,r2
  
  return context;
   12670:	e0bffd17 	ldw	r2,-12(fp)



    (void)p_arg;                                 /* Prevent compiler warning for not using 'p_arg'     */
    for (;;) {
        OS_ENTER_CRITICAL();
   12674:	e0bffc15 	stw	r2,-16(fp)
        OSIdleCtr++;
   12678:	d0a7fd17 	ldw	r2,-24588(gp)
   1267c:	10800044 	addi	r2,r2,1
   12680:	d0a7fd15 	stw	r2,-24588(gp)
   12684:	e0bffc17 	ldw	r2,-16(fp)
   12688:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1268c:	e0bffe17 	ldw	r2,-8(fp)
   12690:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OSTaskIdleHook();                        /* Call user definable HOOK                           */
   12694:	002001c0 	call	2001c <OSTaskIdleHook>
    }
   12698:	003fef06 	br	12658 <__alt_mem_Flash_flash_data+0xf4012658>

0001269c <OS_TaskStat>:
*********************************************************************************************************
*/

#if OS_TASK_STAT_EN > 0
void  OS_TaskStat (void *p_arg)
{
   1269c:	defff804 	addi	sp,sp,-32
   126a0:	dfc00715 	stw	ra,28(sp)
   126a4:	df000615 	stw	fp,24(sp)
   126a8:	dc400515 	stw	r17,20(sp)
   126ac:	dc000415 	stw	r16,16(sp)
   126b0:	df000604 	addi	fp,sp,24
   126b4:	e13ffd15 	stw	r4,-12(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   126b8:	e03ffa15 	stw	zero,-24(fp)
#endif



    (void)p_arg;                                 /* Prevent compiler warning for not using 'p_arg'     */
    while (OSStatRdy == OS_FALSE) {
   126bc:	00000206 	br	126c8 <OS_TaskStat+0x2c>
        OSTimeDly(2 * OS_TICKS_PER_SEC / 10);    /* Wait until statistic task is ready                 */
   126c0:	01000044 	movi	r4,1
   126c4:	001824c0 	call	1824c <OSTimeDly>
#endif



    (void)p_arg;                                 /* Prevent compiler warning for not using 'p_arg'     */
    while (OSStatRdy == OS_FALSE) {
   126c8:	d0a80e03 	ldbu	r2,-24520(gp)
   126cc:	10803fcc 	andi	r2,r2,255
   126d0:	103ffb26 	beq	r2,zero,126c0 <__alt_mem_Flash_flash_data+0xf40126c0>
        OSTimeDly(2 * OS_TICKS_PER_SEC / 10);    /* Wait until statistic task is ready                 */
    }
    OSIdleCtrMax /= 100L;
   126d4:	d0e80217 	ldw	r3,-24568(gp)
   126d8:	00947b34 	movhi	r2,20972
   126dc:	10a147c4 	addi	r2,r2,-31457
   126e0:	1888383a 	mulxuu	r4,r3,r2
   126e4:	1885383a 	mul	r2,r3,r2
   126e8:	1021883a 	mov	r16,r2
   126ec:	2023883a 	mov	r17,r4
   126f0:	8804d17a 	srli	r2,r17,5
   126f4:	d0a80215 	stw	r2,-24568(gp)
    if (OSIdleCtrMax == 0L) {
   126f8:	d0a80217 	ldw	r2,-24568(gp)
   126fc:	1000031e 	bne	r2,zero,1270c <OS_TaskStat+0x70>
        OSCPUUsage = 0;
   12700:	d0280405 	stb	zero,-24560(gp)
        (void)OSTaskSuspend(OS_PRIO_SELF);
   12704:	01003fc4 	movi	r4,255
   12708:	0017ea00 	call	17ea0 <OSTaskSuspend>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1270c:	0005303a 	rdctl	r2,status
   12710:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   12714:	e0fffb17 	ldw	r3,-20(fp)
   12718:	00bfff84 	movi	r2,-2
   1271c:	1884703a 	and	r2,r3,r2
   12720:	1001703a 	wrctl	status,r2
  
  return context;
   12724:	e0bffb17 	ldw	r2,-20(fp)
    }
    for (;;) {
        OS_ENTER_CRITICAL();
   12728:	e0bffa15 	stw	r2,-24(fp)
        OSIdleCtrRun = OSIdleCtr;                /* Obtain the of the idle counter for the past second */
   1272c:	d0a7fd17 	ldw	r2,-24588(gp)
   12730:	d0a80f15 	stw	r2,-24516(gp)
        OSIdleCtr    = 0L;                       /* Reset the idle counter for the next second         */
   12734:	d027fd15 	stw	zero,-24588(gp)
   12738:	e0bffa17 	ldw	r2,-24(fp)
   1273c:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   12740:	e0bffc17 	ldw	r2,-16(fp)
   12744:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OSCPUUsage   = (INT8U)(100L - OSIdleCtrRun / OSIdleCtrMax);
   12748:	d0e80f17 	ldw	r3,-24516(gp)
   1274c:	d0a80217 	ldw	r2,-24568(gp)
   12750:	1885203a 	divu	r2,r3,r2
   12754:	1007883a 	mov	r3,r2
   12758:	00801904 	movi	r2,100
   1275c:	10c5c83a 	sub	r2,r2,r3
   12760:	d0a80405 	stb	r2,-24560(gp)
        OSTaskStatHook();                        /* Invoke user definable hook                         */
   12764:	001ffac0 	call	1ffac <OSTaskStatHook>
#if (OS_TASK_STAT_STK_CHK_EN > 0) && (OS_TASK_CREATE_EXT_EN > 0)
        OS_TaskStatStkChk();                     /* Check the stacks for each task                     */
   12768:	00127780 	call	12778 <OS_TaskStatStkChk>
#endif
        OSTimeDly(OS_TICKS_PER_SEC / 10);        /* Accumulate OSIdleCtr for the next 1/10 second      */
   1276c:	0009883a 	mov	r4,zero
   12770:	001824c0 	call	1824c <OSTimeDly>
    }
   12774:	003fe506 	br	1270c <__alt_mem_Flash_flash_data+0xf401270c>

00012778 <OS_TaskStatStkChk>:
*********************************************************************************************************
*/

#if (OS_TASK_STAT_STK_CHK_EN > 0) && (OS_TASK_CREATE_EXT_EN > 0)
void  OS_TaskStatStkChk (void)
{
   12778:	defffa04 	addi	sp,sp,-24
   1277c:	dfc00515 	stw	ra,20(sp)
   12780:	df000415 	stw	fp,16(sp)
   12784:	df000404 	addi	fp,sp,16
    OS_STK_DATA  stk_data;
    INT8U        err;
    INT8U        prio;


    for (prio = 0; prio <= OS_TASK_IDLE_PRIO; prio++) {
   12788:	e03ffc05 	stb	zero,-16(fp)
   1278c:	00002406 	br	12820 <OS_TaskStatStkChk+0xa8>
        err = OSTaskStkChk(prio, &stk_data);
   12790:	e0fffc03 	ldbu	r3,-16(fp)
   12794:	e0bffe04 	addi	r2,fp,-8
   12798:	1809883a 	mov	r4,r3
   1279c:	100b883a 	mov	r5,r2
   127a0:	0017cd80 	call	17cd8 <OSTaskStkChk>
   127a4:	e0bffc45 	stb	r2,-15(fp)
        if (err == OS_ERR_NONE) {
   127a8:	e0bffc43 	ldbu	r2,-15(fp)
   127ac:	1000191e 	bne	r2,zero,12814 <OS_TaskStatStkChk+0x9c>
            ptcb = OSTCBPrioTbl[prio];
   127b0:	e0fffc03 	ldbu	r3,-16(fp)
   127b4:	008000b4 	movhi	r2,2
   127b8:	109fc504 	addi	r2,r2,32532
   127bc:	18c7883a 	add	r3,r3,r3
   127c0:	18c7883a 	add	r3,r3,r3
   127c4:	10c5883a 	add	r2,r2,r3
   127c8:	10800017 	ldw	r2,0(r2)
   127cc:	e0bffd15 	stw	r2,-12(fp)
            if (ptcb != (OS_TCB *)0) {                               /* Make sure task 'ptcb' is ...   */
   127d0:	e0bffd17 	ldw	r2,-12(fp)
   127d4:	10000f26 	beq	r2,zero,12814 <OS_TaskStatStkChk+0x9c>
                if (ptcb != OS_TCB_RESERVED) {                       /* ... still valid.               */
   127d8:	e0bffd17 	ldw	r2,-12(fp)
   127dc:	10800060 	cmpeqi	r2,r2,1
   127e0:	10000c1e 	bne	r2,zero,12814 <OS_TaskStatStkChk+0x9c>
#if OS_TASK_PROFILE_EN > 0
                    #if OS_STK_GROWTH == 1
                    ptcb->OSTCBStkBase = ptcb->OSTCBStkBottom + ptcb->OSTCBStkSize;
   127e4:	e0bffd17 	ldw	r2,-12(fp)
   127e8:	10c00217 	ldw	r3,8(r2)
   127ec:	e0bffd17 	ldw	r2,-12(fp)
   127f0:	10800317 	ldw	r2,12(r2)
   127f4:	1085883a 	add	r2,r2,r2
   127f8:	1085883a 	add	r2,r2,r2
   127fc:	1887883a 	add	r3,r3,r2
   12800:	e0bffd17 	ldw	r2,-12(fp)
   12804:	10c01115 	stw	r3,68(r2)
                    #else
                    ptcb->OSTCBStkBase = ptcb->OSTCBStkBottom - ptcb->OSTCBStkSize;
                    #endif
                    ptcb->OSTCBStkUsed = stk_data.OSUsed;            /* Store the number of bytes used */
   12808:	e0ffff17 	ldw	r3,-4(fp)
   1280c:	e0bffd17 	ldw	r2,-12(fp)
   12810:	10c01215 	stw	r3,72(r2)
    OS_STK_DATA  stk_data;
    INT8U        err;
    INT8U        prio;


    for (prio = 0; prio <= OS_TASK_IDLE_PRIO; prio++) {
   12814:	e0bffc03 	ldbu	r2,-16(fp)
   12818:	10800044 	addi	r2,r2,1
   1281c:	e0bffc05 	stb	r2,-16(fp)
   12820:	e0bffc03 	ldbu	r2,-16(fp)
   12824:	10800570 	cmpltui	r2,r2,21
   12828:	103fd91e 	bne	r2,zero,12790 <__alt_mem_Flash_flash_data+0xf4012790>
#endif
                }
            }
        }
    }
}
   1282c:	e037883a 	mov	sp,fp
   12830:	dfc00117 	ldw	ra,4(sp)
   12834:	df000017 	ldw	fp,0(sp)
   12838:	dec00204 	addi	sp,sp,8
   1283c:	f800283a 	ret

00012840 <OS_TCBInit>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

INT8U  OS_TCBInit (INT8U prio, OS_STK *ptos, OS_STK *pbos, INT16U id, INT32U stk_size, void *pext, INT16U opt)
{
   12840:	defff204 	addi	sp,sp,-56
   12844:	dfc00d15 	stw	ra,52(sp)
   12848:	df000c15 	stw	fp,48(sp)
   1284c:	df000c04 	addi	fp,sp,48
   12850:	e17ffc15 	stw	r5,-16(fp)
   12854:	e1bffd15 	stw	r6,-12(fp)
   12858:	3807883a 	mov	r3,r7
   1285c:	e0800417 	ldw	r2,16(fp)
   12860:	e13ffb05 	stb	r4,-20(fp)
   12864:	e0fffe0d 	sth	r3,-8(fp)
   12868:	e0bfff0d 	sth	r2,-4(fp)
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
   1286c:	e03ff415 	stw	zero,-48(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   12870:	0005303a 	rdctl	r2,status
   12874:	e0bff615 	stw	r2,-40(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   12878:	e0fff617 	ldw	r3,-40(fp)
   1287c:	00bfff84 	movi	r2,-2
   12880:	1884703a 	and	r2,r3,r2
   12884:	1001703a 	wrctl	status,r2
  
  return context;
   12888:	e0bff617 	ldw	r2,-40(fp)
#endif



    OS_ENTER_CRITICAL();
   1288c:	e0bff415 	stw	r2,-48(fp)
    ptcb = OSTCBFreeList;                                  /* Get a free TCB from the free TCB list    */
   12890:	d0a80317 	ldw	r2,-24564(gp)
   12894:	e0bff515 	stw	r2,-44(fp)
    if (ptcb != (OS_TCB *)0) {
   12898:	e0bff517 	ldw	r2,-44(fp)
   1289c:	10009326 	beq	r2,zero,12aec <OS_TCBInit+0x2ac>
        OSTCBFreeList            = ptcb->OSTCBNext;        /* Update pointer to free TCB list          */
   128a0:	e0bff517 	ldw	r2,-44(fp)
   128a4:	10800517 	ldw	r2,20(r2)
   128a8:	d0a80315 	stw	r2,-24564(gp)
   128ac:	e0bff417 	ldw	r2,-48(fp)
   128b0:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   128b4:	e0bff717 	ldw	r2,-36(fp)
   128b8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        ptcb->OSTCBStkPtr        = ptos;                   /* Load Stack pointer in TCB                */
   128bc:	e0bff517 	ldw	r2,-44(fp)
   128c0:	e0fffc17 	ldw	r3,-16(fp)
   128c4:	10c00015 	stw	r3,0(r2)
        ptcb->OSTCBPrio          = prio;                   /* Load task priority into TCB              */
   128c8:	e0bff517 	ldw	r2,-44(fp)
   128cc:	e0fffb03 	ldbu	r3,-20(fp)
   128d0:	10c00c85 	stb	r3,50(r2)
        ptcb->OSTCBStat          = OS_STAT_RDY;            /* Task is ready to run                     */
   128d4:	e0bff517 	ldw	r2,-44(fp)
   128d8:	10000c05 	stb	zero,48(r2)
        ptcb->OSTCBStatPend      = OS_STAT_PEND_OK;        /* Clear pend status                        */
   128dc:	e0bff517 	ldw	r2,-44(fp)
   128e0:	10000c45 	stb	zero,49(r2)
        ptcb->OSTCBDly           = 0;                      /* Task is not delayed                      */
   128e4:	e0bff517 	ldw	r2,-44(fp)
   128e8:	10000b8d 	sth	zero,46(r2)

#if OS_TASK_CREATE_EXT_EN > 0
        ptcb->OSTCBExtPtr        = pext;                   /* Store pointer to TCB extension           */
   128ec:	e0bff517 	ldw	r2,-44(fp)
   128f0:	e0c00317 	ldw	r3,12(fp)
   128f4:	10c00115 	stw	r3,4(r2)
        ptcb->OSTCBStkSize       = stk_size;               /* Store stack size                         */
   128f8:	e0bff517 	ldw	r2,-44(fp)
   128fc:	e0c00217 	ldw	r3,8(fp)
   12900:	10c00315 	stw	r3,12(r2)
        ptcb->OSTCBStkBottom     = pbos;                   /* Store pointer to bottom of stack         */
   12904:	e0bff517 	ldw	r2,-44(fp)
   12908:	e0fffd17 	ldw	r3,-12(fp)
   1290c:	10c00215 	stw	r3,8(r2)
        ptcb->OSTCBOpt           = opt;                    /* Store task options                       */
   12910:	e0bff517 	ldw	r2,-44(fp)
   12914:	e0ffff0b 	ldhu	r3,-4(fp)
   12918:	10c0040d 	sth	r3,16(r2)
        ptcb->OSTCBId            = id;                     /* Store task ID                            */
   1291c:	e0bff517 	ldw	r2,-44(fp)
   12920:	e0fffe0b 	ldhu	r3,-8(fp)
   12924:	10c0048d 	sth	r3,18(r2)
        opt                      = opt;
        id                       = id;
#endif

#if OS_TASK_DEL_EN > 0
        ptcb->OSTCBDelReq        = OS_ERR_NONE;
   12928:	e0bff517 	ldw	r2,-44(fp)
   1292c:	10000dc5 	stb	zero,55(r2)
#endif

#if OS_LOWEST_PRIO <= 63
        ptcb->OSTCBY             = (INT8U)(prio >> 3);          /* Pre-compute X, Y, BitX and BitY     */
   12930:	e0bffb03 	ldbu	r2,-20(fp)
   12934:	1004d0fa 	srli	r2,r2,3
   12938:	1007883a 	mov	r3,r2
   1293c:	e0bff517 	ldw	r2,-44(fp)
   12940:	10c00d05 	stb	r3,52(r2)
        ptcb->OSTCBX             = (INT8U)(prio & 0x07);
   12944:	e0bffb03 	ldbu	r2,-20(fp)
   12948:	108001cc 	andi	r2,r2,7
   1294c:	1007883a 	mov	r3,r2
   12950:	e0bff517 	ldw	r2,-44(fp)
   12954:	10c00cc5 	stb	r3,51(r2)
        ptcb->OSTCBBitY          = (INT8U)(1 << ptcb->OSTCBY);
   12958:	e0bff517 	ldw	r2,-44(fp)
   1295c:	10800d03 	ldbu	r2,52(r2)
   12960:	10803fcc 	andi	r2,r2,255
   12964:	00c00044 	movi	r3,1
   12968:	1884983a 	sll	r2,r3,r2
   1296c:	1007883a 	mov	r3,r2
   12970:	e0bff517 	ldw	r2,-44(fp)
   12974:	10c00d85 	stb	r3,54(r2)
        ptcb->OSTCBBitX          = (INT8U)(1 << ptcb->OSTCBX);
   12978:	e0bff517 	ldw	r2,-44(fp)
   1297c:	10800cc3 	ldbu	r2,51(r2)
   12980:	10803fcc 	andi	r2,r2,255
   12984:	00c00044 	movi	r3,1
   12988:	1884983a 	sll	r2,r3,r2
   1298c:	1007883a 	mov	r3,r2
   12990:	e0bff517 	ldw	r2,-44(fp)
   12994:	10c00d45 	stb	r3,53(r2)
        ptcb->OSTCBBitY          = (INT16U)(1 << ptcb->OSTCBY);
        ptcb->OSTCBBitX          = (INT16U)(1 << ptcb->OSTCBX);
#endif

#if (OS_EVENT_EN)
        ptcb->OSTCBEventPtr      = (OS_EVENT  *)0;         /* Task is not pending on an  event         */
   12998:	e0bff517 	ldw	r2,-44(fp)
   1299c:	10000715 	stw	zero,28(r2)
#if (OS_EVENT_MULTI_EN > 0)
        ptcb->OSTCBEventMultiPtr = (OS_EVENT **)0;         /* Task is not pending on any events        */
   129a0:	e0bff517 	ldw	r2,-44(fp)
   129a4:	10000815 	stw	zero,32(r2)
#endif
#endif

#if (OS_FLAG_EN > 0) && (OS_MAX_FLAGS > 0) && (OS_TASK_DEL_EN > 0)
        ptcb->OSTCBFlagNode  = (OS_FLAG_NODE *)0;          /* Task is not pending on an event flag     */
   129a8:	e0bff517 	ldw	r2,-44(fp)
   129ac:	10000a15 	stw	zero,40(r2)
#endif

#if (OS_MBOX_EN > 0) || ((OS_Q_EN > 0) && (OS_MAX_QS > 0))
        ptcb->OSTCBMsg       = (void *)0;                  /* No message received                      */
   129b0:	e0bff517 	ldw	r2,-44(fp)
   129b4:	10000915 	stw	zero,36(r2)
#endif

#if OS_TASK_PROFILE_EN > 0
        ptcb->OSTCBCtxSwCtr    = 0L;                       /* Initialize profiling variables           */
   129b8:	e0bff517 	ldw	r2,-44(fp)
   129bc:	10000e15 	stw	zero,56(r2)
        ptcb->OSTCBCyclesStart = 0L;
   129c0:	e0bff517 	ldw	r2,-44(fp)
   129c4:	10001015 	stw	zero,64(r2)
        ptcb->OSTCBCyclesTot   = 0L;
   129c8:	e0bff517 	ldw	r2,-44(fp)
   129cc:	10000f15 	stw	zero,60(r2)
        ptcb->OSTCBStkBase     = (OS_STK *)0;
   129d0:	e0bff517 	ldw	r2,-44(fp)
   129d4:	10001115 	stw	zero,68(r2)
        ptcb->OSTCBStkUsed     = 0L;
   129d8:	e0bff517 	ldw	r2,-44(fp)
   129dc:	10001215 	stw	zero,72(r2)
#endif

#if OS_TASK_NAME_SIZE > 1
        ptcb->OSTCBTaskName[0] = '?';                      /* Unknown name at task creation            */
   129e0:	e0bff517 	ldw	r2,-44(fp)
   129e4:	00c00fc4 	movi	r3,63
   129e8:	10c01305 	stb	r3,76(r2)
        ptcb->OSTCBTaskName[1] = OS_ASCII_NUL;
   129ec:	e0bff517 	ldw	r2,-44(fp)
   129f0:	10001345 	stb	zero,77(r2)
#endif

        OSTCBInitHook(ptcb);
   129f4:	e13ff517 	ldw	r4,-44(fp)
   129f8:	00200380 	call	20038 <OSTCBInitHook>

        OSTaskCreateHook(ptcb);                            /* Call user defined hook                   */
   129fc:	e13ff517 	ldw	r4,-44(fp)
   12a00:	001ff500 	call	1ff50 <OSTaskCreateHook>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   12a04:	0005303a 	rdctl	r2,status
   12a08:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   12a0c:	e0fff817 	ldw	r3,-32(fp)
   12a10:	00bfff84 	movi	r2,-2
   12a14:	1884703a 	and	r2,r3,r2
   12a18:	1001703a 	wrctl	status,r2
  
  return context;
   12a1c:	e0bff817 	ldw	r2,-32(fp)

        OS_ENTER_CRITICAL();
   12a20:	e0bff415 	stw	r2,-48(fp)
        OSTCBPrioTbl[prio] = ptcb;
   12a24:	e0fffb03 	ldbu	r3,-20(fp)
   12a28:	008000b4 	movhi	r2,2
   12a2c:	109fc504 	addi	r2,r2,32532
   12a30:	18c7883a 	add	r3,r3,r3
   12a34:	18c7883a 	add	r3,r3,r3
   12a38:	10c5883a 	add	r2,r2,r3
   12a3c:	e0fff517 	ldw	r3,-44(fp)
   12a40:	10c00015 	stw	r3,0(r2)
        ptcb->OSTCBNext    = OSTCBList;                    /* Link into TCB chain                      */
   12a44:	d0e7ff17 	ldw	r3,-24580(gp)
   12a48:	e0bff517 	ldw	r2,-44(fp)
   12a4c:	10c00515 	stw	r3,20(r2)
        ptcb->OSTCBPrev    = (OS_TCB *)0;
   12a50:	e0bff517 	ldw	r2,-44(fp)
   12a54:	10000615 	stw	zero,24(r2)
        if (OSTCBList != (OS_TCB *)0) {
   12a58:	d0a7ff17 	ldw	r2,-24580(gp)
   12a5c:	10000326 	beq	r2,zero,12a6c <OS_TCBInit+0x22c>
            OSTCBList->OSTCBPrev = ptcb;
   12a60:	d0a7ff17 	ldw	r2,-24580(gp)
   12a64:	e0fff517 	ldw	r3,-44(fp)
   12a68:	10c00615 	stw	r3,24(r2)
        }
        OSTCBList               = ptcb;
   12a6c:	e0bff517 	ldw	r2,-44(fp)
   12a70:	d0a7ff15 	stw	r2,-24580(gp)
        OSRdyGrp               |= ptcb->OSTCBBitY;         /* Make task ready to run                   */
   12a74:	e0bff517 	ldw	r2,-44(fp)
   12a78:	10c00d83 	ldbu	r3,54(r2)
   12a7c:	d0a80803 	ldbu	r2,-24544(gp)
   12a80:	1884b03a 	or	r2,r3,r2
   12a84:	d0a80805 	stb	r2,-24544(gp)
        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
   12a88:	e0bff517 	ldw	r2,-44(fp)
   12a8c:	10800d03 	ldbu	r2,52(r2)
   12a90:	10c03fcc 	andi	r3,r2,255
   12a94:	e0bff517 	ldw	r2,-44(fp)
   12a98:	10800d03 	ldbu	r2,52(r2)
   12a9c:	11003fcc 	andi	r4,r2,255
   12aa0:	d0a80844 	addi	r2,gp,-24543
   12aa4:	2085883a 	add	r2,r4,r2
   12aa8:	11000003 	ldbu	r4,0(r2)
   12aac:	e0bff517 	ldw	r2,-44(fp)
   12ab0:	10800d43 	ldbu	r2,53(r2)
   12ab4:	2084b03a 	or	r2,r4,r2
   12ab8:	1009883a 	mov	r4,r2
   12abc:	d0a80844 	addi	r2,gp,-24543
   12ac0:	1885883a 	add	r2,r3,r2
   12ac4:	11000005 	stb	r4,0(r2)
        OSTaskCtr++;                                       /* Increment the #tasks counter             */
   12ac8:	d0a80443 	ldbu	r2,-24559(gp)
   12acc:	10800044 	addi	r2,r2,1
   12ad0:	d0a80445 	stb	r2,-24559(gp)
   12ad4:	e0bff417 	ldw	r2,-48(fp)
   12ad8:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   12adc:	e0bff917 	ldw	r2,-28(fp)
   12ae0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_NONE);
   12ae4:	0005883a 	mov	r2,zero
   12ae8:	00000506 	br	12b00 <OS_TCBInit+0x2c0>
   12aec:	e0bff417 	ldw	r2,-48(fp)
   12af0:	e0bffa15 	stw	r2,-24(fp)
   12af4:	e0bffa17 	ldw	r2,-24(fp)
   12af8:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_TASK_NO_MORE_TCB);
   12afc:	00801084 	movi	r2,66
}
   12b00:	e037883a 	mov	sp,fp
   12b04:	dfc00117 	ldw	ra,4(sp)
   12b08:	df000017 	ldw	fp,0(sp)
   12b0c:	dec00204 	addi	sp,sp,8
   12b10:	f800283a 	ret

00012b14 <OSDebugInit>:
*********************************************************************************************************
*/

#if OS_DEBUG_EN > 0
void  OSDebugInit (void)
{
   12b14:	defffe04 	addi	sp,sp,-8
   12b18:	df000115 	stw	fp,4(sp)
   12b1c:	df000104 	addi	fp,sp,4
    void  *ptemp;

    
    ptemp = (void *)&OSDebugEn;
   12b20:	d0a00f04 	addi	r2,gp,-32708
   12b24:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSEndiannessTest;
   12b28:	d0a01004 	addi	r2,gp,-32704
   12b2c:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSEventMax;
   12b30:	d0a01184 	addi	r2,gp,-32698
   12b34:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventNameSize;
   12b38:	d0a01204 	addi	r2,gp,-32696
   12b3c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventEn;
   12b40:	d0a01104 	addi	r2,gp,-32700
   12b44:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventSize;
   12b48:	d0a01284 	addi	r2,gp,-32694
   12b4c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventTblSize;
   12b50:	d0a01304 	addi	r2,gp,-32692
   12b54:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventMultiEn;
   12b58:	d0a01384 	addi	r2,gp,-32690
   12b5c:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSFlagEn;
   12b60:	d0a01404 	addi	r2,gp,-32688
   12b64:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagGrpSize;
   12b68:	d0a01484 	addi	r2,gp,-32686
   12b6c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagNodeSize;
   12b70:	d0a01504 	addi	r2,gp,-32684
   12b74:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagWidth;
   12b78:	d0a01584 	addi	r2,gp,-32682
   12b7c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagMax;
   12b80:	d0a01604 	addi	r2,gp,-32680
   12b84:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagNameSize;
   12b88:	d0a01684 	addi	r2,gp,-32678
   12b8c:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSLowestPrio;
   12b90:	d0a01704 	addi	r2,gp,-32676
   12b94:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSMboxEn;
   12b98:	d0a01784 	addi	r2,gp,-32674
   12b9c:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSMemEn;
   12ba0:	d0a01804 	addi	r2,gp,-32672
   12ba4:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSMemMax;
   12ba8:	d0a01884 	addi	r2,gp,-32670
   12bac:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSMemNameSize;
   12bb0:	d0a01904 	addi	r2,gp,-32668
   12bb4:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSMemSize;
   12bb8:	d0a01984 	addi	r2,gp,-32666
   12bbc:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSMemTblSize;
   12bc0:	d0a01a04 	addi	r2,gp,-32664
   12bc4:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSMutexEn;
   12bc8:	d0a01a84 	addi	r2,gp,-32662
   12bcc:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSPtrSize;
   12bd0:	d0a01b04 	addi	r2,gp,-32660
   12bd4:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSQEn;
   12bd8:	d0a01b84 	addi	r2,gp,-32658
   12bdc:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSQMax;
   12be0:	d0a01c04 	addi	r2,gp,-32656
   12be4:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSQSize;
   12be8:	d0a01c84 	addi	r2,gp,-32654
   12bec:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSRdyTblSize;
   12bf0:	d0a01d04 	addi	r2,gp,-32652
   12bf4:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSSemEn;
   12bf8:	d0a01d84 	addi	r2,gp,-32650
   12bfc:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSStkWidth;
   12c00:	d0a01e04 	addi	r2,gp,-32648
   12c04:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSTaskCreateEn;
   12c08:	d0a01e84 	addi	r2,gp,-32646
   12c0c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskCreateExtEn;
   12c10:	d0a01f04 	addi	r2,gp,-32644
   12c14:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskDelEn;
   12c18:	d0a01f84 	addi	r2,gp,-32642
   12c1c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskIdleStkSize;
   12c20:	d0a02004 	addi	r2,gp,-32640
   12c24:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskProfileEn;
   12c28:	d0a02084 	addi	r2,gp,-32638
   12c2c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskMax;
   12c30:	d0a02104 	addi	r2,gp,-32636
   12c34:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskNameSize;
   12c38:	d0a02184 	addi	r2,gp,-32634
   12c3c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskStatEn;
   12c40:	d0a02204 	addi	r2,gp,-32632
   12c44:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskStatStkSize;
   12c48:	d0a02284 	addi	r2,gp,-32630
   12c4c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskStatStkChkEn;
   12c50:	d0a02304 	addi	r2,gp,-32628
   12c54:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskSwHookEn;
   12c58:	d0a02384 	addi	r2,gp,-32626
   12c5c:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSTCBPrioTblMax;
   12c60:	d0a02404 	addi	r2,gp,-32624
   12c64:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTCBSize;
   12c68:	d0a02484 	addi	r2,gp,-32622
   12c6c:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSTicksPerSec;
   12c70:	d0a02504 	addi	r2,gp,-32620
   12c74:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTimeTickHookEn;
   12c78:	d0a02584 	addi	r2,gp,-32618
   12c7c:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSTmrWheelSize;
    ptemp = (void *)&OSTmrWheelTblSize;
#endif

    ptemp = (void *)&OSVersionNbr;
   12c80:	d0a02604 	addi	r2,gp,-32616
   12c84:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSDataSize;
   12c88:	d0a02b04 	addi	r2,gp,-32596
   12c8c:	e0bfff15 	stw	r2,-4(fp)

    ptemp = ptemp;                             /* Prevent compiler warning for 'ptemp' not being used! */
}
   12c90:	e037883a 	mov	sp,fp
   12c94:	df000017 	ldw	fp,0(sp)
   12c98:	dec00104 	addi	sp,sp,4
   12c9c:	f800283a 	ret

00012ca0 <OSFlagAccept>:
*********************************************************************************************************
*/

#if OS_FLAG_ACCEPT_EN > 0
OS_FLAGS  OSFlagAccept (OS_FLAG_GRP *pgrp, OS_FLAGS flags, INT8U wait_type, INT8U *perr)
{
   12ca0:	defff204 	addi	sp,sp,-56
   12ca4:	df000d15 	stw	fp,52(sp)
   12ca8:	df000d04 	addi	fp,sp,52
   12cac:	e13ffc15 	stw	r4,-16(fp)
   12cb0:	2807883a 	mov	r3,r5
   12cb4:	3005883a 	mov	r2,r6
   12cb8:	e1ffff15 	stw	r7,-4(fp)
   12cbc:	e0fffd0d 	sth	r3,-12(fp)
   12cc0:	e0bffe05 	stb	r2,-8(fp)
    OS_FLAGS      flags_rdy;
    INT8U         result;
    BOOLEAN       consume;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR     cpu_sr = 0;
   12cc4:	e03ff415 	stw	zero,-48(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
   12cc8:	e0bfff17 	ldw	r2,-4(fp)
   12ccc:	1000021e 	bne	r2,zero,12cd8 <OSFlagAccept+0x38>
        return ((OS_FLAGS)0);
   12cd0:	0005883a 	mov	r2,zero
   12cd4:	0000b006 	br	12f98 <OSFlagAccept+0x2f8>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {                        /* Validate 'pgrp'                          */
   12cd8:	e0bffc17 	ldw	r2,-16(fp)
   12cdc:	1000051e 	bne	r2,zero,12cf4 <OSFlagAccept+0x54>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
   12ce0:	e0bfff17 	ldw	r2,-4(fp)
   12ce4:	00c01b84 	movi	r3,110
   12ce8:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
   12cec:	0005883a 	mov	r2,zero
   12cf0:	0000a906 	br	12f98 <OSFlagAccept+0x2f8>
    }
#endif
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {          /* Validate event block type                */
   12cf4:	e0bffc17 	ldw	r2,-16(fp)
   12cf8:	10800003 	ldbu	r2,0(r2)
   12cfc:	10803fcc 	andi	r2,r2,255
   12d00:	10800160 	cmpeqi	r2,r2,5
   12d04:	1000051e 	bne	r2,zero,12d1c <OSFlagAccept+0x7c>
        *perr = OS_ERR_EVENT_TYPE;
   12d08:	e0bfff17 	ldw	r2,-4(fp)
   12d0c:	00c00044 	movi	r3,1
   12d10:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
   12d14:	0005883a 	mov	r2,zero
   12d18:	00009f06 	br	12f98 <OSFlagAccept+0x2f8>
    }
    result = (INT8U)(wait_type & OS_FLAG_CONSUME);
   12d1c:	e0fffe03 	ldbu	r3,-8(fp)
   12d20:	00bfe004 	movi	r2,-128
   12d24:	1884703a 	and	r2,r3,r2
   12d28:	e0bff505 	stb	r2,-44(fp)
    if (result != (INT8U)0) {                              /* See if we need to consume the flags      */
   12d2c:	e0bff503 	ldbu	r2,-44(fp)
   12d30:	10000626 	beq	r2,zero,12d4c <OSFlagAccept+0xac>
        wait_type &= ~OS_FLAG_CONSUME;
   12d34:	e0bffe03 	ldbu	r2,-8(fp)
   12d38:	10801fcc 	andi	r2,r2,127
   12d3c:	e0bffe05 	stb	r2,-8(fp)
        consume    = OS_TRUE;
   12d40:	00800044 	movi	r2,1
   12d44:	e0bff385 	stb	r2,-50(fp)
   12d48:	00000106 	br	12d50 <OSFlagAccept+0xb0>
    } else {
        consume    = OS_FALSE;
   12d4c:	e03ff385 	stb	zero,-50(fp)
    }
/*$PAGE*/
    *perr = OS_ERR_NONE;                                   /* Assume NO error until proven otherwise.  */
   12d50:	e0bfff17 	ldw	r2,-4(fp)
   12d54:	10000005 	stb	zero,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   12d58:	0005303a 	rdctl	r2,status
   12d5c:	e0bff615 	stw	r2,-40(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   12d60:	e0fff617 	ldw	r3,-40(fp)
   12d64:	00bfff84 	movi	r2,-2
   12d68:	1884703a 	and	r2,r3,r2
   12d6c:	1001703a 	wrctl	status,r2
  
  return context;
   12d70:	e0bff617 	ldw	r2,-40(fp)
    OS_ENTER_CRITICAL();
   12d74:	e0bff415 	stw	r2,-48(fp)
    switch (wait_type) {
   12d78:	e0bffe03 	ldbu	r2,-8(fp)
   12d7c:	10c00060 	cmpeqi	r3,r2,1
   12d80:	18005f1e 	bne	r3,zero,12f00 <OSFlagAccept+0x260>
   12d84:	10c00088 	cmpgei	r3,r2,2
   12d88:	1800021e 	bne	r3,zero,12d94 <OSFlagAccept+0xf4>
   12d8c:	10003f26 	beq	r2,zero,12e8c <OSFlagAccept+0x1ec>
   12d90:	00007706 	br	12f70 <OSFlagAccept+0x2d0>
   12d94:	10c000a0 	cmpeqi	r3,r2,2
   12d98:	1800031e 	bne	r3,zero,12da8 <OSFlagAccept+0x108>
   12d9c:	108000e0 	cmpeqi	r2,r2,3
   12da0:	10001e1e 	bne	r2,zero,12e1c <OSFlagAccept+0x17c>
   12da4:	00007206 	br	12f70 <OSFlagAccept+0x2d0>
        case OS_FLAG_WAIT_SET_ALL:                         /* See if all required flags are set        */
             flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);     /* Extract only the bits we want   */
   12da8:	e0bffc17 	ldw	r2,-16(fp)
   12dac:	10c0020b 	ldhu	r3,8(r2)
   12db0:	e0bffd0b 	ldhu	r2,-12(fp)
   12db4:	1884703a 	and	r2,r3,r2
   12db8:	e0bff30d 	sth	r2,-52(fp)
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
   12dbc:	e0fff30b 	ldhu	r3,-52(fp)
   12dc0:	e0bffd0b 	ldhu	r2,-12(fp)
   12dc4:	18800d1e 	bne	r3,r2,12dfc <OSFlagAccept+0x15c>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
   12dc8:	e0bff383 	ldbu	r2,-50(fp)
   12dcc:	10800058 	cmpnei	r2,r2,1
   12dd0:	10000d1e 	bne	r2,zero,12e08 <OSFlagAccept+0x168>
                     pgrp->OSFlagFlags &= ~flags_rdy;      /* Clear ONLY the flags that we wanted      */
   12dd4:	e0bffc17 	ldw	r2,-16(fp)
   12dd8:	1080020b 	ldhu	r2,8(r2)
   12ddc:	1007883a 	mov	r3,r2
   12de0:	e0bff30b 	ldhu	r2,-52(fp)
   12de4:	0084303a 	nor	r2,zero,r2
   12de8:	1884703a 	and	r2,r3,r2
   12dec:	1007883a 	mov	r3,r2
   12df0:	e0bffc17 	ldw	r2,-16(fp)
   12df4:	10c0020d 	sth	r3,8(r2)
   12df8:	00000306 	br	12e08 <OSFlagAccept+0x168>
                 }
             } else {
                 *perr = OS_ERR_FLAG_NOT_RDY;
   12dfc:	e0bfff17 	ldw	r2,-4(fp)
   12e00:	00c01c04 	movi	r3,112
   12e04:	10c00005 	stb	r3,0(r2)
   12e08:	e0bff417 	ldw	r2,-48(fp)
   12e0c:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   12e10:	e0bff717 	ldw	r2,-36(fp)
   12e14:	1001703a 	wrctl	status,r2
             }
             OS_EXIT_CRITICAL();
             break;
   12e18:	00005e06 	br	12f94 <OSFlagAccept+0x2f4>

        case OS_FLAG_WAIT_SET_ANY:
             flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);     /* Extract only the bits we want   */
   12e1c:	e0bffc17 	ldw	r2,-16(fp)
   12e20:	10c0020b 	ldhu	r3,8(r2)
   12e24:	e0bffd0b 	ldhu	r2,-12(fp)
   12e28:	1884703a 	and	r2,r3,r2
   12e2c:	e0bff30d 	sth	r2,-52(fp)
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag set                      */
   12e30:	e0bff30b 	ldhu	r2,-52(fp)
   12e34:	10000d26 	beq	r2,zero,12e6c <OSFlagAccept+0x1cc>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
   12e38:	e0bff383 	ldbu	r2,-50(fp)
   12e3c:	10800058 	cmpnei	r2,r2,1
   12e40:	10000d1e 	bne	r2,zero,12e78 <OSFlagAccept+0x1d8>
                     pgrp->OSFlagFlags &= ~flags_rdy;      /* Clear ONLY the flags that we got         */
   12e44:	e0bffc17 	ldw	r2,-16(fp)
   12e48:	1080020b 	ldhu	r2,8(r2)
   12e4c:	1007883a 	mov	r3,r2
   12e50:	e0bff30b 	ldhu	r2,-52(fp)
   12e54:	0084303a 	nor	r2,zero,r2
   12e58:	1884703a 	and	r2,r3,r2
   12e5c:	1007883a 	mov	r3,r2
   12e60:	e0bffc17 	ldw	r2,-16(fp)
   12e64:	10c0020d 	sth	r3,8(r2)
   12e68:	00000306 	br	12e78 <OSFlagAccept+0x1d8>
                 }
             } else {
                 *perr = OS_ERR_FLAG_NOT_RDY;
   12e6c:	e0bfff17 	ldw	r2,-4(fp)
   12e70:	00c01c04 	movi	r3,112
   12e74:	10c00005 	stb	r3,0(r2)
   12e78:	e0bff417 	ldw	r2,-48(fp)
   12e7c:	e0bff815 	stw	r2,-32(fp)
   12e80:	e0bff817 	ldw	r2,-32(fp)
   12e84:	1001703a 	wrctl	status,r2
             }
             OS_EXIT_CRITICAL();
             break;
   12e88:	00004206 	br	12f94 <OSFlagAccept+0x2f4>

#if OS_FLAG_WAIT_CLR_EN > 0
        case OS_FLAG_WAIT_CLR_ALL:                         /* See if all required flags are cleared    */
             flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags);  /* Extract only the bits we want     */
   12e8c:	e0bffc17 	ldw	r2,-16(fp)
   12e90:	1080020b 	ldhu	r2,8(r2)
   12e94:	0084303a 	nor	r2,zero,r2
   12e98:	1007883a 	mov	r3,r2
   12e9c:	e0bffd0b 	ldhu	r2,-12(fp)
   12ea0:	1884703a 	and	r2,r3,r2
   12ea4:	e0bff30d 	sth	r2,-52(fp)
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
   12ea8:	e0fff30b 	ldhu	r3,-52(fp)
   12eac:	e0bffd0b 	ldhu	r2,-12(fp)
   12eb0:	18800b1e 	bne	r3,r2,12ee0 <OSFlagAccept+0x240>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
   12eb4:	e0bff383 	ldbu	r2,-50(fp)
   12eb8:	10800058 	cmpnei	r2,r2,1
   12ebc:	10000b1e 	bne	r2,zero,12eec <OSFlagAccept+0x24c>
                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we wanted        */
   12ec0:	e0bffc17 	ldw	r2,-16(fp)
   12ec4:	10c0020b 	ldhu	r3,8(r2)
   12ec8:	e0bff30b 	ldhu	r2,-52(fp)
   12ecc:	1884b03a 	or	r2,r3,r2
   12ed0:	1007883a 	mov	r3,r2
   12ed4:	e0bffc17 	ldw	r2,-16(fp)
   12ed8:	10c0020d 	sth	r3,8(r2)
   12edc:	00000306 	br	12eec <OSFlagAccept+0x24c>
                 }
             } else {
                 *perr = OS_ERR_FLAG_NOT_RDY;
   12ee0:	e0bfff17 	ldw	r2,-4(fp)
   12ee4:	00c01c04 	movi	r3,112
   12ee8:	10c00005 	stb	r3,0(r2)
   12eec:	e0bff417 	ldw	r2,-48(fp)
   12ef0:	e0bff915 	stw	r2,-28(fp)
   12ef4:	e0bff917 	ldw	r2,-28(fp)
   12ef8:	1001703a 	wrctl	status,r2
             }
             OS_EXIT_CRITICAL();
             break;
   12efc:	00002506 	br	12f94 <OSFlagAccept+0x2f4>

        case OS_FLAG_WAIT_CLR_ANY:
             flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags); /* Extract only the bits we want      */
   12f00:	e0bffc17 	ldw	r2,-16(fp)
   12f04:	1080020b 	ldhu	r2,8(r2)
   12f08:	0084303a 	nor	r2,zero,r2
   12f0c:	1007883a 	mov	r3,r2
   12f10:	e0bffd0b 	ldhu	r2,-12(fp)
   12f14:	1884703a 	and	r2,r3,r2
   12f18:	e0bff30d 	sth	r2,-52(fp)
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag cleared                  */
   12f1c:	e0bff30b 	ldhu	r2,-52(fp)
   12f20:	10000b26 	beq	r2,zero,12f50 <OSFlagAccept+0x2b0>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
   12f24:	e0bff383 	ldbu	r2,-50(fp)
   12f28:	10800058 	cmpnei	r2,r2,1
   12f2c:	10000b1e 	bne	r2,zero,12f5c <OSFlagAccept+0x2bc>
                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we got           */
   12f30:	e0bffc17 	ldw	r2,-16(fp)
   12f34:	10c0020b 	ldhu	r3,8(r2)
   12f38:	e0bff30b 	ldhu	r2,-52(fp)
   12f3c:	1884b03a 	or	r2,r3,r2
   12f40:	1007883a 	mov	r3,r2
   12f44:	e0bffc17 	ldw	r2,-16(fp)
   12f48:	10c0020d 	sth	r3,8(r2)
   12f4c:	00000306 	br	12f5c <OSFlagAccept+0x2bc>
                 }
             } else {
                 *perr = OS_ERR_FLAG_NOT_RDY;
   12f50:	e0bfff17 	ldw	r2,-4(fp)
   12f54:	00c01c04 	movi	r3,112
   12f58:	10c00005 	stb	r3,0(r2)
   12f5c:	e0bff417 	ldw	r2,-48(fp)
   12f60:	e0bffa15 	stw	r2,-24(fp)
   12f64:	e0bffa17 	ldw	r2,-24(fp)
   12f68:	1001703a 	wrctl	status,r2
             }
             OS_EXIT_CRITICAL();
             break;
   12f6c:	00000906 	br	12f94 <OSFlagAccept+0x2f4>
   12f70:	e0bff417 	ldw	r2,-48(fp)
   12f74:	e0bffb15 	stw	r2,-20(fp)
   12f78:	e0bffb17 	ldw	r2,-20(fp)
   12f7c:	1001703a 	wrctl	status,r2
#endif

        default:
             OS_EXIT_CRITICAL();
             flags_rdy = (OS_FLAGS)0;
   12f80:	e03ff30d 	sth	zero,-52(fp)
             *perr     = OS_ERR_FLAG_WAIT_TYPE;
   12f84:	e0bfff17 	ldw	r2,-4(fp)
   12f88:	00c01bc4 	movi	r3,111
   12f8c:	10c00005 	stb	r3,0(r2)
             break;
   12f90:	0001883a 	nop
    }
    return (flags_rdy);
   12f94:	e0bff30b 	ldhu	r2,-52(fp)
}
   12f98:	e037883a 	mov	sp,fp
   12f9c:	df000017 	ldw	fp,0(sp)
   12fa0:	dec00104 	addi	sp,sp,4
   12fa4:	f800283a 	ret

00012fa8 <OSFlagCreate>:
* Called from: Task ONLY
*********************************************************************************************************
*/

OS_FLAG_GRP  *OSFlagCreate (OS_FLAGS flags, INT8U *perr)
{
   12fa8:	defff804 	addi	sp,sp,-32
   12fac:	df000715 	stw	fp,28(sp)
   12fb0:	df000704 	addi	fp,sp,28
   12fb4:	2005883a 	mov	r2,r4
   12fb8:	e17fff15 	stw	r5,-4(fp)
   12fbc:	e0bffe0d 	sth	r2,-8(fp)
    OS_FLAG_GRP *pgrp;
#if OS_CRITICAL_METHOD == 3                         /* Allocate storage for CPU status register        */
    OS_CPU_SR    cpu_sr = 0;
   12fc0:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                       /* Validate 'perr'                                 */
   12fc4:	e0bfff17 	ldw	r2,-4(fp)
   12fc8:	1000021e 	bne	r2,zero,12fd4 <OSFlagCreate+0x2c>
        return ((OS_FLAG_GRP *)0);
   12fcc:	0005883a 	mov	r2,zero
   12fd0:	00003b06 	br	130c0 <OSFlagCreate+0x118>
    }
#endif
    if (OSIntNesting > 0) {                         /* See if called from ISR ...                      */
   12fd4:	008000b4 	movhi	r2,2
   12fd8:	10931704 	addi	r2,r2,19548
   12fdc:	10800003 	ldbu	r2,0(r2)
   12fe0:	10803fcc 	andi	r2,r2,255
   12fe4:	10000526 	beq	r2,zero,12ffc <OSFlagCreate+0x54>
        *perr = OS_ERR_CREATE_ISR;                  /* ... can't CREATE from an ISR                    */
   12fe8:	e0bfff17 	ldw	r2,-4(fp)
   12fec:	00c00404 	movi	r3,16
   12ff0:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAG_GRP *)0);
   12ff4:	0005883a 	mov	r2,zero
   12ff8:	00003106 	br	130c0 <OSFlagCreate+0x118>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   12ffc:	0005303a 	rdctl	r2,status
   13000:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   13004:	e0fffb17 	ldw	r3,-20(fp)
   13008:	00bfff84 	movi	r2,-2
   1300c:	1884703a 	and	r2,r3,r2
   13010:	1001703a 	wrctl	status,r2
  
  return context;
   13014:	e0bffb17 	ldw	r2,-20(fp)
    }
    OS_ENTER_CRITICAL();
   13018:	e0bff915 	stw	r2,-28(fp)
    pgrp = OSFlagFreeList;                          /* Get next free event flag                        */
   1301c:	008000b4 	movhi	r2,2
   13020:	10931a04 	addi	r2,r2,19560
   13024:	10800017 	ldw	r2,0(r2)
   13028:	e0bffa15 	stw	r2,-24(fp)
    if (pgrp != (OS_FLAG_GRP *)0) {                 /* See if we have event flag groups available      */
   1302c:	e0bffa17 	ldw	r2,-24(fp)
   13030:	10001b26 	beq	r2,zero,130a0 <OSFlagCreate+0xf8>
                                                    /* Adjust free list                                */
        OSFlagFreeList       = (OS_FLAG_GRP *)OSFlagFreeList->OSFlagWaitList;
   13034:	008000b4 	movhi	r2,2
   13038:	10931a04 	addi	r2,r2,19560
   1303c:	10800017 	ldw	r2,0(r2)
   13040:	10c00117 	ldw	r3,4(r2)
   13044:	008000b4 	movhi	r2,2
   13048:	10931a04 	addi	r2,r2,19560
   1304c:	10c00015 	stw	r3,0(r2)
        pgrp->OSFlagType     = OS_EVENT_TYPE_FLAG;  /* Set to event flag group type                    */
   13050:	e0bffa17 	ldw	r2,-24(fp)
   13054:	00c00144 	movi	r3,5
   13058:	10c00005 	stb	r3,0(r2)
        pgrp->OSFlagFlags    = flags;               /* Set to desired initial value                    */
   1305c:	e0bffa17 	ldw	r2,-24(fp)
   13060:	e0fffe0b 	ldhu	r3,-8(fp)
   13064:	10c0020d 	sth	r3,8(r2)
        pgrp->OSFlagWaitList = (void *)0;           /* Clear list of tasks waiting on flags            */
   13068:	e0bffa17 	ldw	r2,-24(fp)
   1306c:	10000115 	stw	zero,4(r2)
#if OS_FLAG_NAME_SIZE > 1
        pgrp->OSFlagName[0]  = '?';
   13070:	e0bffa17 	ldw	r2,-24(fp)
   13074:	00c00fc4 	movi	r3,63
   13078:	10c00285 	stb	r3,10(r2)
        pgrp->OSFlagName[1]  = OS_ASCII_NUL;
   1307c:	e0bffa17 	ldw	r2,-24(fp)
   13080:	100002c5 	stb	zero,11(r2)
   13084:	e0bff917 	ldw	r2,-28(fp)
   13088:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1308c:	e0bffc17 	ldw	r2,-16(fp)
   13090:	1001703a 	wrctl	status,r2
#endif
        OS_EXIT_CRITICAL();
        *perr                = OS_ERR_NONE;
   13094:	e0bfff17 	ldw	r2,-4(fp)
   13098:	10000005 	stb	zero,0(r2)
   1309c:	00000706 	br	130bc <OSFlagCreate+0x114>
   130a0:	e0bff917 	ldw	r2,-28(fp)
   130a4:	e0bffd15 	stw	r2,-12(fp)
   130a8:	e0bffd17 	ldw	r2,-12(fp)
   130ac:	1001703a 	wrctl	status,r2
    } else {
        OS_EXIT_CRITICAL();
        *perr                = OS_ERR_FLAG_GRP_DEPLETED;
   130b0:	e0bfff17 	ldw	r2,-4(fp)
   130b4:	00c01c84 	movi	r3,114
   130b8:	10c00005 	stb	r3,0(r2)
    }
    return (pgrp);                                  /* Return pointer to event flag group              */
   130bc:	e0bffa17 	ldw	r2,-24(fp)
}
   130c0:	e037883a 	mov	sp,fp
   130c4:	df000017 	ldw	fp,0(sp)
   130c8:	dec00104 	addi	sp,sp,4
   130cc:	f800283a 	ret

000130d0 <OSFlagDel>:
*********************************************************************************************************
*/

#if OS_FLAG_DEL_EN > 0
OS_FLAG_GRP  *OSFlagDel (OS_FLAG_GRP *pgrp, INT8U opt, INT8U *perr)
{
   130d0:	defff204 	addi	sp,sp,-56
   130d4:	dfc00d15 	stw	ra,52(sp)
   130d8:	df000c15 	stw	fp,48(sp)
   130dc:	df000c04 	addi	fp,sp,48
   130e0:	e13ffd15 	stw	r4,-12(fp)
   130e4:	2805883a 	mov	r2,r5
   130e8:	e1bfff15 	stw	r6,-4(fp)
   130ec:	e0bffe05 	stb	r2,-8(fp)
    BOOLEAN       tasks_waiting;
    OS_FLAG_NODE *pnode;
    OS_FLAG_GRP  *pgrp_return;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR     cpu_sr = 0;
   130f0:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
   130f4:	e0bfff17 	ldw	r2,-4(fp)
   130f8:	1000021e 	bne	r2,zero,13104 <OSFlagDel+0x34>
        return (pgrp);
   130fc:	e0bffd17 	ldw	r2,-12(fp)
   13100:	00008a06 	br	1332c <OSFlagDel+0x25c>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {                        /* Validate 'pgrp'                          */
   13104:	e0bffd17 	ldw	r2,-12(fp)
   13108:	1000051e 	bne	r2,zero,13120 <OSFlagDel+0x50>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
   1310c:	e0bfff17 	ldw	r2,-4(fp)
   13110:	00c01b84 	movi	r3,110
   13114:	10c00005 	stb	r3,0(r2)
        return (pgrp);
   13118:	e0bffd17 	ldw	r2,-12(fp)
   1311c:	00008306 	br	1332c <OSFlagDel+0x25c>
    }
#endif
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
   13120:	008000b4 	movhi	r2,2
   13124:	10931704 	addi	r2,r2,19548
   13128:	10800003 	ldbu	r2,0(r2)
   1312c:	10803fcc 	andi	r2,r2,255
   13130:	10000526 	beq	r2,zero,13148 <OSFlagDel+0x78>
        *perr = OS_ERR_DEL_ISR;                            /* ... can't DELETE from an ISR             */
   13134:	e0bfff17 	ldw	r2,-4(fp)
   13138:	00c003c4 	movi	r3,15
   1313c:	10c00005 	stb	r3,0(r2)
        return (pgrp);
   13140:	e0bffd17 	ldw	r2,-12(fp)
   13144:	00007906 	br	1332c <OSFlagDel+0x25c>
    }
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {          /* Validate event group type                */
   13148:	e0bffd17 	ldw	r2,-12(fp)
   1314c:	10800003 	ldbu	r2,0(r2)
   13150:	10803fcc 	andi	r2,r2,255
   13154:	10800160 	cmpeqi	r2,r2,5
   13158:	1000051e 	bne	r2,zero,13170 <OSFlagDel+0xa0>
        *perr = OS_ERR_EVENT_TYPE;
   1315c:	e0bfff17 	ldw	r2,-4(fp)
   13160:	00c00044 	movi	r3,1
   13164:	10c00005 	stb	r3,0(r2)
        return (pgrp);
   13168:	e0bffd17 	ldw	r2,-12(fp)
   1316c:	00006f06 	br	1332c <OSFlagDel+0x25c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   13170:	0005303a 	rdctl	r2,status
   13174:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   13178:	e0fff817 	ldw	r3,-32(fp)
   1317c:	00bfff84 	movi	r2,-2
   13180:	1884703a 	and	r2,r3,r2
   13184:	1001703a 	wrctl	status,r2
  
  return context;
   13188:	e0bff817 	ldw	r2,-32(fp)
    }
    OS_ENTER_CRITICAL();
   1318c:	e0bff715 	stw	r2,-36(fp)
    if (pgrp->OSFlagWaitList != (void *)0) {               /* See if any tasks waiting on event flags  */
   13190:	e0bffd17 	ldw	r2,-12(fp)
   13194:	10800117 	ldw	r2,4(r2)
   13198:	10000326 	beq	r2,zero,131a8 <OSFlagDel+0xd8>
        tasks_waiting = OS_TRUE;                           /* Yes                                      */
   1319c:	00800044 	movi	r2,1
   131a0:	e0bff405 	stb	r2,-48(fp)
   131a4:	00000106 	br	131ac <OSFlagDel+0xdc>
    } else {
        tasks_waiting = OS_FALSE;                          /* No                                       */
   131a8:	e03ff405 	stb	zero,-48(fp)
    }
    switch (opt) {
   131ac:	e0bffe03 	ldbu	r2,-8(fp)
   131b0:	10000326 	beq	r2,zero,131c0 <OSFlagDel+0xf0>
   131b4:	10800060 	cmpeqi	r2,r2,1
   131b8:	1000271e 	bne	r2,zero,13258 <OSFlagDel+0x188>
   131bc:	00005006 	br	13300 <OSFlagDel+0x230>
        case OS_DEL_NO_PEND:                               /* Delete group if no task waiting          */
             if (tasks_waiting == OS_FALSE) {
   131c0:	e0bff403 	ldbu	r2,-48(fp)
   131c4:	10001a1e 	bne	r2,zero,13230 <OSFlagDel+0x160>
#if OS_FLAG_NAME_SIZE > 1
                 pgrp->OSFlagName[0]  = '?';               /* Unknown name                             */
   131c8:	e0bffd17 	ldw	r2,-12(fp)
   131cc:	00c00fc4 	movi	r3,63
   131d0:	10c00285 	stb	r3,10(r2)
                 pgrp->OSFlagName[1]  = OS_ASCII_NUL;
   131d4:	e0bffd17 	ldw	r2,-12(fp)
   131d8:	100002c5 	stb	zero,11(r2)
#endif
                 pgrp->OSFlagType     = OS_EVENT_TYPE_UNUSED;
   131dc:	e0bffd17 	ldw	r2,-12(fp)
   131e0:	10000005 	stb	zero,0(r2)
                 pgrp->OSFlagWaitList = (void *)OSFlagFreeList; /* Return group to free list           */
   131e4:	008000b4 	movhi	r2,2
   131e8:	10931a04 	addi	r2,r2,19560
   131ec:	10c00017 	ldw	r3,0(r2)
   131f0:	e0bffd17 	ldw	r2,-12(fp)
   131f4:	10c00115 	stw	r3,4(r2)
                 pgrp->OSFlagFlags    = (OS_FLAGS)0;
   131f8:	e0bffd17 	ldw	r2,-12(fp)
   131fc:	1000020d 	sth	zero,8(r2)
                 OSFlagFreeList       = pgrp;
   13200:	008000b4 	movhi	r2,2
   13204:	10931a04 	addi	r2,r2,19560
   13208:	e0fffd17 	ldw	r3,-12(fp)
   1320c:	10c00015 	stw	r3,0(r2)
   13210:	e0bff717 	ldw	r2,-36(fp)
   13214:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   13218:	e0bff917 	ldw	r2,-28(fp)
   1321c:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                = OS_ERR_NONE;
   13220:	e0bfff17 	ldw	r2,-4(fp)
   13224:	10000005 	stb	zero,0(r2)
                 pgrp_return          = (OS_FLAG_GRP *)0;  /* Event Flag Group has been deleted        */
   13228:	e03ff615 	stw	zero,-40(fp)
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                = OS_ERR_TASK_WAITING;
                 pgrp_return          = pgrp;
             }
             break;
   1322c:	00003e06 	br	13328 <OSFlagDel+0x258>
   13230:	e0bff717 	ldw	r2,-36(fp)
   13234:	e0bffa15 	stw	r2,-24(fp)
   13238:	e0bffa17 	ldw	r2,-24(fp)
   1323c:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                = OS_ERR_NONE;
                 pgrp_return          = (OS_FLAG_GRP *)0;  /* Event Flag Group has been deleted        */
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                = OS_ERR_TASK_WAITING;
   13240:	e0bfff17 	ldw	r2,-4(fp)
   13244:	00c01244 	movi	r3,73
   13248:	10c00005 	stb	r3,0(r2)
                 pgrp_return          = pgrp;
   1324c:	e0bffd17 	ldw	r2,-12(fp)
   13250:	e0bff615 	stw	r2,-40(fp)
             }
             break;
   13254:	00003406 	br	13328 <OSFlagDel+0x258>

        case OS_DEL_ALWAYS:                                /* Always delete the event flag group       */
             pnode = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
   13258:	e0bffd17 	ldw	r2,-12(fp)
   1325c:	10800117 	ldw	r2,4(r2)
   13260:	e0bff515 	stw	r2,-44(fp)
             while (pnode != (OS_FLAG_NODE *)0) {          /* Ready ALL tasks waiting for flags        */
   13264:	00000606 	br	13280 <OSFlagDel+0x1b0>
                 (void)OS_FlagTaskRdy(pnode, (OS_FLAGS)0);
   13268:	e13ff517 	ldw	r4,-44(fp)
   1326c:	000b883a 	mov	r5,zero
   13270:	001430c0 	call	1430c <OS_FlagTaskRdy>
                 pnode = (OS_FLAG_NODE *)pnode->OSFlagNodeNext;
   13274:	e0bff517 	ldw	r2,-44(fp)
   13278:	10800017 	ldw	r2,0(r2)
   1327c:	e0bff515 	stw	r2,-44(fp)
             }
             break;

        case OS_DEL_ALWAYS:                                /* Always delete the event flag group       */
             pnode = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
             while (pnode != (OS_FLAG_NODE *)0) {          /* Ready ALL tasks waiting for flags        */
   13280:	e0bff517 	ldw	r2,-44(fp)
   13284:	103ff81e 	bne	r2,zero,13268 <__alt_mem_Flash_flash_data+0xf4013268>
                 (void)OS_FlagTaskRdy(pnode, (OS_FLAGS)0);
                 pnode = (OS_FLAG_NODE *)pnode->OSFlagNodeNext;
             }
#if OS_FLAG_NAME_SIZE > 1
             pgrp->OSFlagName[0]  = '?';                   /* Unknown name                             */
   13288:	e0bffd17 	ldw	r2,-12(fp)
   1328c:	00c00fc4 	movi	r3,63
   13290:	10c00285 	stb	r3,10(r2)
             pgrp->OSFlagName[1]  = OS_ASCII_NUL;
   13294:	e0bffd17 	ldw	r2,-12(fp)
   13298:	100002c5 	stb	zero,11(r2)
#endif
             pgrp->OSFlagType     = OS_EVENT_TYPE_UNUSED;
   1329c:	e0bffd17 	ldw	r2,-12(fp)
   132a0:	10000005 	stb	zero,0(r2)
             pgrp->OSFlagWaitList = (void *)OSFlagFreeList;/* Return group to free list                */
   132a4:	008000b4 	movhi	r2,2
   132a8:	10931a04 	addi	r2,r2,19560
   132ac:	10c00017 	ldw	r3,0(r2)
   132b0:	e0bffd17 	ldw	r2,-12(fp)
   132b4:	10c00115 	stw	r3,4(r2)
             pgrp->OSFlagFlags    = (OS_FLAGS)0;
   132b8:	e0bffd17 	ldw	r2,-12(fp)
   132bc:	1000020d 	sth	zero,8(r2)
             OSFlagFreeList       = pgrp;
   132c0:	008000b4 	movhi	r2,2
   132c4:	10931a04 	addi	r2,r2,19560
   132c8:	e0fffd17 	ldw	r3,-12(fp)
   132cc:	10c00015 	stw	r3,0(r2)
   132d0:	e0bff717 	ldw	r2,-36(fp)
   132d4:	e0bffb15 	stw	r2,-20(fp)
   132d8:	e0bffb17 	ldw	r2,-20(fp)
   132dc:	1001703a 	wrctl	status,r2
             OS_EXIT_CRITICAL();
             if (tasks_waiting == OS_TRUE) {               /* Reschedule only if task(s) were waiting  */
   132e0:	e0bff403 	ldbu	r2,-48(fp)
   132e4:	10800058 	cmpnei	r2,r2,1
   132e8:	1000011e 	bne	r2,zero,132f0 <OSFlagDel+0x220>
                 OS_Sched();                               /* Find highest priority task ready to run  */
   132ec:	001243c0 	call	1243c <OS_Sched>
             }
             *perr = OS_ERR_NONE;
   132f0:	e0bfff17 	ldw	r2,-4(fp)
   132f4:	10000005 	stb	zero,0(r2)
             pgrp_return          = (OS_FLAG_GRP *)0;      /* Event Flag Group has been deleted        */
   132f8:	e03ff615 	stw	zero,-40(fp)
             break;
   132fc:	00000a06 	br	13328 <OSFlagDel+0x258>
   13300:	e0bff717 	ldw	r2,-36(fp)
   13304:	e0bffc15 	stw	r2,-16(fp)
   13308:	e0bffc17 	ldw	r2,-16(fp)
   1330c:	1001703a 	wrctl	status,r2

        default:
             OS_EXIT_CRITICAL();
             *perr                = OS_ERR_INVALID_OPT;
   13310:	e0bfff17 	ldw	r2,-4(fp)
   13314:	00c001c4 	movi	r3,7
   13318:	10c00005 	stb	r3,0(r2)
             pgrp_return          = pgrp;
   1331c:	e0bffd17 	ldw	r2,-12(fp)
   13320:	e0bff615 	stw	r2,-40(fp)
             break;
   13324:	0001883a 	nop
    }
    return (pgrp_return);
   13328:	e0bff617 	ldw	r2,-40(fp)
}
   1332c:	e037883a 	mov	sp,fp
   13330:	dfc00117 	ldw	ra,4(sp)
   13334:	df000017 	ldw	fp,0(sp)
   13338:	dec00204 	addi	sp,sp,8
   1333c:	f800283a 	ret

00013340 <OSFlagNameGet>:
*********************************************************************************************************
*/

#if OS_FLAG_NAME_SIZE > 1
INT8U  OSFlagNameGet (OS_FLAG_GRP *pgrp, INT8U *pname, INT8U *perr)
{
   13340:	defff604 	addi	sp,sp,-40
   13344:	dfc00915 	stw	ra,36(sp)
   13348:	df000815 	stw	fp,32(sp)
   1334c:	df000804 	addi	fp,sp,32
   13350:	e13ffd15 	stw	r4,-12(fp)
   13354:	e17ffe15 	stw	r5,-8(fp)
   13358:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   1335c:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
   13360:	e0bfff17 	ldw	r2,-4(fp)
   13364:	1000021e 	bne	r2,zero,13370 <OSFlagNameGet+0x30>
        return (0);
   13368:	0005883a 	mov	r2,zero
   1336c:	00003b06 	br	1345c <OSFlagNameGet+0x11c>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {              /* Is 'pgrp' a NULL pointer?                          */
   13370:	e0bffd17 	ldw	r2,-12(fp)
   13374:	1000051e 	bne	r2,zero,1338c <OSFlagNameGet+0x4c>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
   13378:	e0bfff17 	ldw	r2,-4(fp)
   1337c:	00c01b84 	movi	r3,110
   13380:	10c00005 	stb	r3,0(r2)
        return (0);
   13384:	0005883a 	mov	r2,zero
   13388:	00003406 	br	1345c <OSFlagNameGet+0x11c>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
   1338c:	e0bffe17 	ldw	r2,-8(fp)
   13390:	1000051e 	bne	r2,zero,133a8 <OSFlagNameGet+0x68>
        *perr = OS_ERR_PNAME_NULL;
   13394:	e0bfff17 	ldw	r2,-4(fp)
   13398:	00c00304 	movi	r3,12
   1339c:	10c00005 	stb	r3,0(r2)
        return (0);
   133a0:	0005883a 	mov	r2,zero
   133a4:	00002d06 	br	1345c <OSFlagNameGet+0x11c>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
   133a8:	008000b4 	movhi	r2,2
   133ac:	10931704 	addi	r2,r2,19548
   133b0:	10800003 	ldbu	r2,0(r2)
   133b4:	10803fcc 	andi	r2,r2,255
   133b8:	10000526 	beq	r2,zero,133d0 <OSFlagNameGet+0x90>
        *perr = OS_ERR_NAME_GET_ISR;
   133bc:	e0bfff17 	ldw	r2,-4(fp)
   133c0:	00c00444 	movi	r3,17
   133c4:	10c00005 	stb	r3,0(r2)
        return (0);
   133c8:	0005883a 	mov	r2,zero
   133cc:	00002306 	br	1345c <OSFlagNameGet+0x11c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   133d0:	0005303a 	rdctl	r2,status
   133d4:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   133d8:	e0fffa17 	ldw	r3,-24(fp)
   133dc:	00bfff84 	movi	r2,-2
   133e0:	1884703a 	and	r2,r3,r2
   133e4:	1001703a 	wrctl	status,r2
  
  return context;
   133e8:	e0bffa17 	ldw	r2,-24(fp)
    }
    OS_ENTER_CRITICAL();
   133ec:	e0bff815 	stw	r2,-32(fp)
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {
   133f0:	e0bffd17 	ldw	r2,-12(fp)
   133f4:	10800003 	ldbu	r2,0(r2)
   133f8:	10803fcc 	andi	r2,r2,255
   133fc:	10800160 	cmpeqi	r2,r2,5
   13400:	1000091e 	bne	r2,zero,13428 <OSFlagNameGet+0xe8>
   13404:	e0bff817 	ldw	r2,-32(fp)
   13408:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1340c:	e0bffb17 	ldw	r2,-20(fp)
   13410:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_EVENT_TYPE;
   13414:	e0bfff17 	ldw	r2,-4(fp)
   13418:	00c00044 	movi	r3,1
   1341c:	10c00005 	stb	r3,0(r2)
        return (0);
   13420:	0005883a 	mov	r2,zero
   13424:	00000d06 	br	1345c <OSFlagNameGet+0x11c>
    }
    len   = OS_StrCopy(pname, pgrp->OSFlagName); /* Copy name from OS_FLAG_GRP                         */
   13428:	e0bffd17 	ldw	r2,-12(fp)
   1342c:	10800284 	addi	r2,r2,10
   13430:	e13ffe17 	ldw	r4,-8(fp)
   13434:	100b883a 	mov	r5,r2
   13438:	00125780 	call	12578 <OS_StrCopy>
   1343c:	e0bff905 	stb	r2,-28(fp)
   13440:	e0bff817 	ldw	r2,-32(fp)
   13444:	e0bffc15 	stw	r2,-16(fp)
   13448:	e0bffc17 	ldw	r2,-16(fp)
   1344c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
   13450:	e0bfff17 	ldw	r2,-4(fp)
   13454:	10000005 	stb	zero,0(r2)
    return (len);
   13458:	e0bff903 	ldbu	r2,-28(fp)
}
   1345c:	e037883a 	mov	sp,fp
   13460:	dfc00117 	ldw	ra,4(sp)
   13464:	df000017 	ldw	fp,0(sp)
   13468:	dec00204 	addi	sp,sp,8
   1346c:	f800283a 	ret

00013470 <OSFlagNameSet>:
*********************************************************************************************************
*/

#if OS_FLAG_NAME_SIZE > 1
void  OSFlagNameSet (OS_FLAG_GRP *pgrp, INT8U *pname, INT8U *perr)
{
   13470:	defff504 	addi	sp,sp,-44
   13474:	dfc00a15 	stw	ra,40(sp)
   13478:	df000915 	stw	fp,36(sp)
   1347c:	df000904 	addi	fp,sp,36
   13480:	e13ffd15 	stw	r4,-12(fp)
   13484:	e17ffe15 	stw	r5,-8(fp)
   13488:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   1348c:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
   13490:	e0bfff17 	ldw	r2,-4(fp)
   13494:	1000011e 	bne	r2,zero,1349c <OSFlagNameSet+0x2c>
        return;
   13498:	00004406 	br	135ac <OSFlagNameSet+0x13c>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {              /* Is 'pgrp' a NULL pointer?                          */
   1349c:	e0bffd17 	ldw	r2,-12(fp)
   134a0:	1000041e 	bne	r2,zero,134b4 <OSFlagNameSet+0x44>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
   134a4:	e0bfff17 	ldw	r2,-4(fp)
   134a8:	00c01b84 	movi	r3,110
   134ac:	10c00005 	stb	r3,0(r2)
        return;
   134b0:	00003e06 	br	135ac <OSFlagNameSet+0x13c>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
   134b4:	e0bffe17 	ldw	r2,-8(fp)
   134b8:	1000041e 	bne	r2,zero,134cc <OSFlagNameSet+0x5c>
        *perr = OS_ERR_PNAME_NULL;
   134bc:	e0bfff17 	ldw	r2,-4(fp)
   134c0:	00c00304 	movi	r3,12
   134c4:	10c00005 	stb	r3,0(r2)
        return;
   134c8:	00003806 	br	135ac <OSFlagNameSet+0x13c>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
   134cc:	008000b4 	movhi	r2,2
   134d0:	10931704 	addi	r2,r2,19548
   134d4:	10800003 	ldbu	r2,0(r2)
   134d8:	10803fcc 	andi	r2,r2,255
   134dc:	10000426 	beq	r2,zero,134f0 <OSFlagNameSet+0x80>
        *perr = OS_ERR_NAME_SET_ISR;
   134e0:	e0bfff17 	ldw	r2,-4(fp)
   134e4:	00c00484 	movi	r3,18
   134e8:	10c00005 	stb	r3,0(r2)
        return;
   134ec:	00002f06 	br	135ac <OSFlagNameSet+0x13c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   134f0:	0005303a 	rdctl	r2,status
   134f4:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   134f8:	e0fff917 	ldw	r3,-28(fp)
   134fc:	00bfff84 	movi	r2,-2
   13500:	1884703a 	and	r2,r3,r2
   13504:	1001703a 	wrctl	status,r2
  
  return context;
   13508:	e0bff917 	ldw	r2,-28(fp)
    }
    OS_ENTER_CRITICAL();
   1350c:	e0bff715 	stw	r2,-36(fp)
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {
   13510:	e0bffd17 	ldw	r2,-12(fp)
   13514:	10800003 	ldbu	r2,0(r2)
   13518:	10803fcc 	andi	r2,r2,255
   1351c:	10800160 	cmpeqi	r2,r2,5
   13520:	1000081e 	bne	r2,zero,13544 <OSFlagNameSet+0xd4>
   13524:	e0bff717 	ldw	r2,-36(fp)
   13528:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1352c:	e0bffa17 	ldw	r2,-24(fp)
   13530:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_EVENT_TYPE;
   13534:	e0bfff17 	ldw	r2,-4(fp)
   13538:	00c00044 	movi	r3,1
   1353c:	10c00005 	stb	r3,0(r2)
        return;
   13540:	00001a06 	br	135ac <OSFlagNameSet+0x13c>
    }
    len = OS_StrLen(pname);                      /* Can we fit the string in the storage area?         */
   13544:	e13ffe17 	ldw	r4,-8(fp)
   13548:	00125ec0 	call	125ec <OS_StrLen>
   1354c:	e0bff805 	stb	r2,-32(fp)
    if (len > (OS_FLAG_NAME_SIZE - 1)) {         /* No                                                 */
   13550:	e0bff803 	ldbu	r2,-32(fp)
   13554:	10800830 	cmpltui	r2,r2,32
   13558:	1000081e 	bne	r2,zero,1357c <OSFlagNameSet+0x10c>
   1355c:	e0bff717 	ldw	r2,-36(fp)
   13560:	e0bffb15 	stw	r2,-20(fp)
   13564:	e0bffb17 	ldw	r2,-20(fp)
   13568:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_FLAG_NAME_TOO_LONG;
   1356c:	e0bfff17 	ldw	r2,-4(fp)
   13570:	00c01cc4 	movi	r3,115
   13574:	10c00005 	stb	r3,0(r2)
        return;
   13578:	00000c06 	br	135ac <OSFlagNameSet+0x13c>
    }
    (void)OS_StrCopy(pgrp->OSFlagName, pname);   /* Yes, copy name from OS_FLAG_GRP                    */
   1357c:	e0bffd17 	ldw	r2,-12(fp)
   13580:	10800284 	addi	r2,r2,10
   13584:	1009883a 	mov	r4,r2
   13588:	e17ffe17 	ldw	r5,-8(fp)
   1358c:	00125780 	call	12578 <OS_StrCopy>
   13590:	e0bff717 	ldw	r2,-36(fp)
   13594:	e0bffc15 	stw	r2,-16(fp)
   13598:	e0bffc17 	ldw	r2,-16(fp)
   1359c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
   135a0:	e0bfff17 	ldw	r2,-4(fp)
   135a4:	10000005 	stb	zero,0(r2)
    return;
   135a8:	0001883a 	nop
}
   135ac:	e037883a 	mov	sp,fp
   135b0:	dfc00117 	ldw	ra,4(sp)
   135b4:	df000017 	ldw	fp,0(sp)
   135b8:	dec00204 	addi	sp,sp,8
   135bc:	f800283a 	ret

000135c0 <OSFlagPend>:
*                 event flags.
*********************************************************************************************************
*/

OS_FLAGS  OSFlagPend (OS_FLAG_GRP *pgrp, OS_FLAGS flags, INT8U wait_type, INT16U timeout, INT8U *perr)
{
   135c0:	deffe204 	addi	sp,sp,-120
   135c4:	dfc01d15 	stw	ra,116(sp)
   135c8:	df001c15 	stw	fp,112(sp)
   135cc:	df001c04 	addi	fp,sp,112
   135d0:	e13ffc15 	stw	r4,-16(fp)
   135d4:	2809883a 	mov	r4,r5
   135d8:	3007883a 	mov	r3,r6
   135dc:	3805883a 	mov	r2,r7
   135e0:	e13ffd0d 	sth	r4,-12(fp)
   135e4:	e0fffe05 	stb	r3,-8(fp)
   135e8:	e0bfff0d 	sth	r2,-4(fp)
    OS_FLAGS      flags_rdy;
    INT8U         result;
    INT8U         pend_stat;
    BOOLEAN       consume;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR     cpu_sr = 0;
   135ec:	e03fe615 	stw	zero,-104(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
   135f0:	e0800217 	ldw	r2,8(fp)
   135f4:	1000021e 	bne	r2,zero,13600 <OSFlagPend+0x40>
        return ((OS_FLAGS)0);
   135f8:	0005883a 	mov	r2,zero
   135fc:	00016706 	br	13b9c <OSFlagPend+0x5dc>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {                        /* Validate 'pgrp'                          */
   13600:	e0bffc17 	ldw	r2,-16(fp)
   13604:	1000051e 	bne	r2,zero,1361c <OSFlagPend+0x5c>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
   13608:	e0800217 	ldw	r2,8(fp)
   1360c:	00c01b84 	movi	r3,110
   13610:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
   13614:	0005883a 	mov	r2,zero
   13618:	00016006 	br	13b9c <OSFlagPend+0x5dc>
    }
#endif
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
   1361c:	008000b4 	movhi	r2,2
   13620:	10931704 	addi	r2,r2,19548
   13624:	10800003 	ldbu	r2,0(r2)
   13628:	10803fcc 	andi	r2,r2,255
   1362c:	10000526 	beq	r2,zero,13644 <OSFlagPend+0x84>
        *perr = OS_ERR_PEND_ISR;                           /* ... can't PEND from an ISR               */
   13630:	e0800217 	ldw	r2,8(fp)
   13634:	00c00084 	movi	r3,2
   13638:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
   1363c:	0005883a 	mov	r2,zero
   13640:	00015606 	br	13b9c <OSFlagPend+0x5dc>
    }
    if (OSLockNesting > 0) {                               /* See if called with scheduler locked ...  */
   13644:	008000b4 	movhi	r2,2
   13648:	10930904 	addi	r2,r2,19492
   1364c:	10800003 	ldbu	r2,0(r2)
   13650:	10803fcc 	andi	r2,r2,255
   13654:	10000526 	beq	r2,zero,1366c <OSFlagPend+0xac>
        *perr = OS_ERR_PEND_LOCKED;                        /* ... can't PEND when locked               */
   13658:	e0800217 	ldw	r2,8(fp)
   1365c:	00c00344 	movi	r3,13
   13660:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
   13664:	0005883a 	mov	r2,zero
   13668:	00014c06 	br	13b9c <OSFlagPend+0x5dc>
    }
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {          /* Validate event block type                */
   1366c:	e0bffc17 	ldw	r2,-16(fp)
   13670:	10800003 	ldbu	r2,0(r2)
   13674:	10803fcc 	andi	r2,r2,255
   13678:	10800160 	cmpeqi	r2,r2,5
   1367c:	1000051e 	bne	r2,zero,13694 <OSFlagPend+0xd4>
        *perr = OS_ERR_EVENT_TYPE;
   13680:	e0800217 	ldw	r2,8(fp)
   13684:	00c00044 	movi	r3,1
   13688:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
   1368c:	0005883a 	mov	r2,zero
   13690:	00014206 	br	13b9c <OSFlagPend+0x5dc>
    }
    result = (INT8U)(wait_type & OS_FLAG_CONSUME);
   13694:	e0fffe03 	ldbu	r3,-8(fp)
   13698:	00bfe004 	movi	r2,-128
   1369c:	1884703a 	and	r2,r3,r2
   136a0:	e0bfe705 	stb	r2,-100(fp)
    if (result != (INT8U)0) {                             /* See if we need to consume the flags      */
   136a4:	e0bfe703 	ldbu	r2,-100(fp)
   136a8:	10000626 	beq	r2,zero,136c4 <OSFlagPend+0x104>
        wait_type &= ~(INT8U)OS_FLAG_CONSUME;
   136ac:	e0bffe03 	ldbu	r2,-8(fp)
   136b0:	10801fcc 	andi	r2,r2,127
   136b4:	e0bffe05 	stb	r2,-8(fp)
        consume    = OS_TRUE;
   136b8:	00800044 	movi	r2,1
   136bc:	e0bfe505 	stb	r2,-108(fp)
   136c0:	00000106 	br	136c8 <OSFlagPend+0x108>
    } else {
        consume    = OS_FALSE;
   136c4:	e03fe505 	stb	zero,-108(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   136c8:	0005303a 	rdctl	r2,status
   136cc:	e0bfe915 	stw	r2,-92(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   136d0:	e0ffe917 	ldw	r3,-92(fp)
   136d4:	00bfff84 	movi	r2,-2
   136d8:	1884703a 	and	r2,r3,r2
   136dc:	1001703a 	wrctl	status,r2
  
  return context;
   136e0:	e0bfe917 	ldw	r2,-92(fp)
    }
/*$PAGE*/
    OS_ENTER_CRITICAL();
   136e4:	e0bfe615 	stw	r2,-104(fp)
    switch (wait_type) {
   136e8:	e0bffe03 	ldbu	r2,-8(fp)
   136ec:	10c00060 	cmpeqi	r3,r2,1
   136f0:	1800921e 	bne	r3,zero,1393c <OSFlagPend+0x37c>
   136f4:	10c00088 	cmpgei	r3,r2,2
   136f8:	1800021e 	bne	r3,zero,13704 <OSFlagPend+0x144>
   136fc:	10006126 	beq	r2,zero,13884 <OSFlagPend+0x2c4>
   13700:	0000bb06 	br	139f0 <OSFlagPend+0x430>
   13704:	10c000a0 	cmpeqi	r3,r2,2
   13708:	1800031e 	bne	r3,zero,13718 <OSFlagPend+0x158>
   1370c:	108000e0 	cmpeqi	r2,r2,3
   13710:	10002f1e 	bne	r2,zero,137d0 <OSFlagPend+0x210>
   13714:	0000b606 	br	139f0 <OSFlagPend+0x430>
        case OS_FLAG_WAIT_SET_ALL:                         /* See if all required flags are set        */
             flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);   /* Extract only the bits we want     */
   13718:	e0bffc17 	ldw	r2,-16(fp)
   1371c:	10c0020b 	ldhu	r3,8(r2)
   13720:	e0bffd0b 	ldhu	r2,-12(fp)
   13724:	1884703a 	and	r2,r3,r2
   13728:	e0bfe78d 	sth	r2,-98(fp)
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
   1372c:	e0ffe78b 	ldhu	r3,-98(fp)
   13730:	e0bffd0b 	ldhu	r2,-12(fp)
   13734:	1880191e 	bne	r3,r2,1379c <OSFlagPend+0x1dc>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
   13738:	e0bfe503 	ldbu	r2,-108(fp)
   1373c:	10800058 	cmpnei	r2,r2,1
   13740:	1000091e 	bne	r2,zero,13768 <OSFlagPend+0x1a8>
                     pgrp->OSFlagFlags &= ~flags_rdy;      /* Clear ONLY the flags that we wanted      */
   13744:	e0bffc17 	ldw	r2,-16(fp)
   13748:	1080020b 	ldhu	r2,8(r2)
   1374c:	1007883a 	mov	r3,r2
   13750:	e0bfe78b 	ldhu	r2,-98(fp)
   13754:	0084303a 	nor	r2,zero,r2
   13758:	1884703a 	and	r2,r3,r2
   1375c:	1007883a 	mov	r3,r2
   13760:	e0bffc17 	ldw	r2,-16(fp)
   13764:	10c0020d 	sth	r3,8(r2)
                 }
                 OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
   13768:	008000b4 	movhi	r2,2
   1376c:	10931804 	addi	r2,r2,19552
   13770:	10800017 	ldw	r2,0(r2)
   13774:	e0ffe78b 	ldhu	r3,-98(fp)
   13778:	10c00b0d 	sth	r3,44(r2)
   1377c:	e0bfe617 	ldw	r2,-104(fp)
   13780:	e0bfea15 	stw	r2,-88(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   13784:	e0bfea17 	ldw	r2,-88(fp)
   13788:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
                 *perr                   = OS_ERR_NONE;
   1378c:	e0800217 	ldw	r2,8(fp)
   13790:	10000005 	stb	zero,0(r2)
                 return (flags_rdy);
   13794:	e0bfe78b 	ldhu	r2,-98(fp)
   13798:	00010006 	br	13b9c <OSFlagPend+0x5dc>
             } else {                                      /* Block task until events occur or timeout */
                 OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
   1379c:	e1bffd0b 	ldhu	r6,-12(fp)
   137a0:	e0fffe03 	ldbu	r3,-8(fp)
   137a4:	e0bfff0b 	ldhu	r2,-4(fp)
   137a8:	e17ff704 	addi	r5,fp,-36
   137ac:	d8800015 	stw	r2,0(sp)
   137b0:	e13ffc17 	ldw	r4,-16(fp)
   137b4:	180f883a 	mov	r7,r3
   137b8:	00140640 	call	14064 <OS_FlagBlock>
   137bc:	e0bfe617 	ldw	r2,-104(fp)
   137c0:	e0bfeb15 	stw	r2,-84(fp)
   137c4:	e0bfeb17 	ldw	r2,-84(fp)
   137c8:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
             }
             break;
   137cc:	00009206 	br	13a18 <OSFlagPend+0x458>

        case OS_FLAG_WAIT_SET_ANY:
             flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);    /* Extract only the bits we want    */
   137d0:	e0bffc17 	ldw	r2,-16(fp)
   137d4:	10c0020b 	ldhu	r3,8(r2)
   137d8:	e0bffd0b 	ldhu	r2,-12(fp)
   137dc:	1884703a 	and	r2,r3,r2
   137e0:	e0bfe78d 	sth	r2,-98(fp)
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag set                      */
   137e4:	e0bfe78b 	ldhu	r2,-98(fp)
   137e8:	10001926 	beq	r2,zero,13850 <OSFlagPend+0x290>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
   137ec:	e0bfe503 	ldbu	r2,-108(fp)
   137f0:	10800058 	cmpnei	r2,r2,1
   137f4:	1000091e 	bne	r2,zero,1381c <OSFlagPend+0x25c>
                     pgrp->OSFlagFlags &= ~flags_rdy;      /* Clear ONLY the flags that we got         */
   137f8:	e0bffc17 	ldw	r2,-16(fp)
   137fc:	1080020b 	ldhu	r2,8(r2)
   13800:	1007883a 	mov	r3,r2
   13804:	e0bfe78b 	ldhu	r2,-98(fp)
   13808:	0084303a 	nor	r2,zero,r2
   1380c:	1884703a 	and	r2,r3,r2
   13810:	1007883a 	mov	r3,r2
   13814:	e0bffc17 	ldw	r2,-16(fp)
   13818:	10c0020d 	sth	r3,8(r2)
                 }
                 OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
   1381c:	008000b4 	movhi	r2,2
   13820:	10931804 	addi	r2,r2,19552
   13824:	10800017 	ldw	r2,0(r2)
   13828:	e0ffe78b 	ldhu	r3,-98(fp)
   1382c:	10c00b0d 	sth	r3,44(r2)
   13830:	e0bfe617 	ldw	r2,-104(fp)
   13834:	e0bfec15 	stw	r2,-80(fp)
   13838:	e0bfec17 	ldw	r2,-80(fp)
   1383c:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
                 *perr                   = OS_ERR_NONE;
   13840:	e0800217 	ldw	r2,8(fp)
   13844:	10000005 	stb	zero,0(r2)
                 return (flags_rdy);
   13848:	e0bfe78b 	ldhu	r2,-98(fp)
   1384c:	0000d306 	br	13b9c <OSFlagPend+0x5dc>
             } else {                                      /* Block task until events occur or timeout */
                 OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
   13850:	e1bffd0b 	ldhu	r6,-12(fp)
   13854:	e0fffe03 	ldbu	r3,-8(fp)
   13858:	e0bfff0b 	ldhu	r2,-4(fp)
   1385c:	e17ff704 	addi	r5,fp,-36
   13860:	d8800015 	stw	r2,0(sp)
   13864:	e13ffc17 	ldw	r4,-16(fp)
   13868:	180f883a 	mov	r7,r3
   1386c:	00140640 	call	14064 <OS_FlagBlock>
   13870:	e0bfe617 	ldw	r2,-104(fp)
   13874:	e0bfed15 	stw	r2,-76(fp)
   13878:	e0bfed17 	ldw	r2,-76(fp)
   1387c:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
             }
             break;
   13880:	00006506 	br	13a18 <OSFlagPend+0x458>

#if OS_FLAG_WAIT_CLR_EN > 0
        case OS_FLAG_WAIT_CLR_ALL:                         /* See if all required flags are cleared    */
             flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags);  /* Extract only the bits we want     */
   13884:	e0bffc17 	ldw	r2,-16(fp)
   13888:	1080020b 	ldhu	r2,8(r2)
   1388c:	0084303a 	nor	r2,zero,r2
   13890:	1007883a 	mov	r3,r2
   13894:	e0bffd0b 	ldhu	r2,-12(fp)
   13898:	1884703a 	and	r2,r3,r2
   1389c:	e0bfe78d 	sth	r2,-98(fp)
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
   138a0:	e0ffe78b 	ldhu	r3,-98(fp)
   138a4:	e0bffd0b 	ldhu	r2,-12(fp)
   138a8:	1880171e 	bne	r3,r2,13908 <OSFlagPend+0x348>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
   138ac:	e0bfe503 	ldbu	r2,-108(fp)
   138b0:	10800058 	cmpnei	r2,r2,1
   138b4:	1000071e 	bne	r2,zero,138d4 <OSFlagPend+0x314>
                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we wanted        */
   138b8:	e0bffc17 	ldw	r2,-16(fp)
   138bc:	10c0020b 	ldhu	r3,8(r2)
   138c0:	e0bfe78b 	ldhu	r2,-98(fp)
   138c4:	1884b03a 	or	r2,r3,r2
   138c8:	1007883a 	mov	r3,r2
   138cc:	e0bffc17 	ldw	r2,-16(fp)
   138d0:	10c0020d 	sth	r3,8(r2)
                 }
                 OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
   138d4:	008000b4 	movhi	r2,2
   138d8:	10931804 	addi	r2,r2,19552
   138dc:	10800017 	ldw	r2,0(r2)
   138e0:	e0ffe78b 	ldhu	r3,-98(fp)
   138e4:	10c00b0d 	sth	r3,44(r2)
   138e8:	e0bfe617 	ldw	r2,-104(fp)
   138ec:	e0bfee15 	stw	r2,-72(fp)
   138f0:	e0bfee17 	ldw	r2,-72(fp)
   138f4:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
                 *perr                   = OS_ERR_NONE;
   138f8:	e0800217 	ldw	r2,8(fp)
   138fc:	10000005 	stb	zero,0(r2)
                 return (flags_rdy);
   13900:	e0bfe78b 	ldhu	r2,-98(fp)
   13904:	0000a506 	br	13b9c <OSFlagPend+0x5dc>
             } else {                                      /* Block task until events occur or timeout */
                 OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
   13908:	e1bffd0b 	ldhu	r6,-12(fp)
   1390c:	e0fffe03 	ldbu	r3,-8(fp)
   13910:	e0bfff0b 	ldhu	r2,-4(fp)
   13914:	e17ff704 	addi	r5,fp,-36
   13918:	d8800015 	stw	r2,0(sp)
   1391c:	e13ffc17 	ldw	r4,-16(fp)
   13920:	180f883a 	mov	r7,r3
   13924:	00140640 	call	14064 <OS_FlagBlock>
   13928:	e0bfe617 	ldw	r2,-104(fp)
   1392c:	e0bfef15 	stw	r2,-68(fp)
   13930:	e0bfef17 	ldw	r2,-68(fp)
   13934:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
             }
             break;
   13938:	00003706 	br	13a18 <OSFlagPend+0x458>

        case OS_FLAG_WAIT_CLR_ANY:
             flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags); /* Extract only the bits we want      */
   1393c:	e0bffc17 	ldw	r2,-16(fp)
   13940:	1080020b 	ldhu	r2,8(r2)
   13944:	0084303a 	nor	r2,zero,r2
   13948:	1007883a 	mov	r3,r2
   1394c:	e0bffd0b 	ldhu	r2,-12(fp)
   13950:	1884703a 	and	r2,r3,r2
   13954:	e0bfe78d 	sth	r2,-98(fp)
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag cleared                  */
   13958:	e0bfe78b 	ldhu	r2,-98(fp)
   1395c:	10001726 	beq	r2,zero,139bc <OSFlagPend+0x3fc>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
   13960:	e0bfe503 	ldbu	r2,-108(fp)
   13964:	10800058 	cmpnei	r2,r2,1
   13968:	1000071e 	bne	r2,zero,13988 <OSFlagPend+0x3c8>
                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we got           */
   1396c:	e0bffc17 	ldw	r2,-16(fp)
   13970:	10c0020b 	ldhu	r3,8(r2)
   13974:	e0bfe78b 	ldhu	r2,-98(fp)
   13978:	1884b03a 	or	r2,r3,r2
   1397c:	1007883a 	mov	r3,r2
   13980:	e0bffc17 	ldw	r2,-16(fp)
   13984:	10c0020d 	sth	r3,8(r2)
                 }
                 OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
   13988:	008000b4 	movhi	r2,2
   1398c:	10931804 	addi	r2,r2,19552
   13990:	10800017 	ldw	r2,0(r2)
   13994:	e0ffe78b 	ldhu	r3,-98(fp)
   13998:	10c00b0d 	sth	r3,44(r2)
   1399c:	e0bfe617 	ldw	r2,-104(fp)
   139a0:	e0bff015 	stw	r2,-64(fp)
   139a4:	e0bff017 	ldw	r2,-64(fp)
   139a8:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
                 *perr                   = OS_ERR_NONE;
   139ac:	e0800217 	ldw	r2,8(fp)
   139b0:	10000005 	stb	zero,0(r2)
                 return (flags_rdy);
   139b4:	e0bfe78b 	ldhu	r2,-98(fp)
   139b8:	00007806 	br	13b9c <OSFlagPend+0x5dc>
             } else {                                      /* Block task until events occur or timeout */
                 OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
   139bc:	e1bffd0b 	ldhu	r6,-12(fp)
   139c0:	e0fffe03 	ldbu	r3,-8(fp)
   139c4:	e0bfff0b 	ldhu	r2,-4(fp)
   139c8:	e17ff704 	addi	r5,fp,-36
   139cc:	d8800015 	stw	r2,0(sp)
   139d0:	e13ffc17 	ldw	r4,-16(fp)
   139d4:	180f883a 	mov	r7,r3
   139d8:	00140640 	call	14064 <OS_FlagBlock>
   139dc:	e0bfe617 	ldw	r2,-104(fp)
   139e0:	e0bff115 	stw	r2,-60(fp)
   139e4:	e0bff117 	ldw	r2,-60(fp)
   139e8:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
             }
             break;
   139ec:	00000a06 	br	13a18 <OSFlagPend+0x458>
   139f0:	e0bfe617 	ldw	r2,-104(fp)
   139f4:	e0bff215 	stw	r2,-56(fp)
   139f8:	e0bff217 	ldw	r2,-56(fp)
   139fc:	1001703a 	wrctl	status,r2
#endif

        default:
             OS_EXIT_CRITICAL();
             flags_rdy = (OS_FLAGS)0;
   13a00:	e03fe78d 	sth	zero,-98(fp)
             *perr      = OS_ERR_FLAG_WAIT_TYPE;
   13a04:	e0800217 	ldw	r2,8(fp)
   13a08:	00c01bc4 	movi	r3,111
   13a0c:	10c00005 	stb	r3,0(r2)
             return (flags_rdy);
   13a10:	e0bfe78b 	ldhu	r2,-98(fp)
   13a14:	00006106 	br	13b9c <OSFlagPend+0x5dc>
    }
/*$PAGE*/
    OS_Sched();                                            /* Find next HPT ready to run               */
   13a18:	001243c0 	call	1243c <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   13a1c:	0005303a 	rdctl	r2,status
   13a20:	e0bff315 	stw	r2,-52(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   13a24:	e0fff317 	ldw	r3,-52(fp)
   13a28:	00bfff84 	movi	r2,-2
   13a2c:	1884703a 	and	r2,r3,r2
   13a30:	1001703a 	wrctl	status,r2
  
  return context;
   13a34:	e0bff317 	ldw	r2,-52(fp)
    OS_ENTER_CRITICAL();
   13a38:	e0bfe615 	stw	r2,-104(fp)
    if (OSTCBCur->OSTCBStatPend != OS_STAT_PEND_OK) {      /* Have we timed-out or aborted?            */
   13a3c:	008000b4 	movhi	r2,2
   13a40:	10931804 	addi	r2,r2,19552
   13a44:	10800017 	ldw	r2,0(r2)
   13a48:	10800c43 	ldbu	r2,49(r2)
   13a4c:	10803fcc 	andi	r2,r2,255
   13a50:	10002226 	beq	r2,zero,13adc <OSFlagPend+0x51c>
        pend_stat                = OSTCBCur->OSTCBStatPend;
   13a54:	008000b4 	movhi	r2,2
   13a58:	10931804 	addi	r2,r2,19552
   13a5c:	10800017 	ldw	r2,0(r2)
   13a60:	10800c43 	ldbu	r2,49(r2)
   13a64:	e0bfe805 	stb	r2,-96(fp)
        OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
   13a68:	008000b4 	movhi	r2,2
   13a6c:	10931804 	addi	r2,r2,19552
   13a70:	10800017 	ldw	r2,0(r2)
   13a74:	10000c45 	stb	zero,49(r2)
        OS_FlagUnlink(&node);
   13a78:	e0bff704 	addi	r2,fp,-36
   13a7c:	1009883a 	mov	r4,r2
   13a80:	001441c0 	call	1441c <OS_FlagUnlink>
        OSTCBCur->OSTCBStat      = OS_STAT_RDY;            /* Yes, make task ready-to-run              */
   13a84:	008000b4 	movhi	r2,2
   13a88:	10931804 	addi	r2,r2,19552
   13a8c:	10800017 	ldw	r2,0(r2)
   13a90:	10000c05 	stb	zero,48(r2)
   13a94:	e0bfe617 	ldw	r2,-104(fp)
   13a98:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   13a9c:	e0bff417 	ldw	r2,-48(fp)
   13aa0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        flags_rdy                = (OS_FLAGS)0;
   13aa4:	e03fe78d 	sth	zero,-98(fp)
        switch (pend_stat) {
   13aa8:	e0bfe803 	ldbu	r2,-96(fp)
   13aac:	108000a0 	cmpeqi	r2,r2,2
   13ab0:	10000426 	beq	r2,zero,13ac4 <OSFlagPend+0x504>
            case OS_STAT_PEND_ABORT:
                 *perr = OS_ERR_PEND_ABORT;                 /* Indicate that we aborted   waiting       */
   13ab4:	e0800217 	ldw	r2,8(fp)
   13ab8:	00c00384 	movi	r3,14
   13abc:	10c00005 	stb	r3,0(r2)
                 break;
   13ac0:	00000406 	br	13ad4 <OSFlagPend+0x514>

            case OS_STAT_PEND_TO:
            default:
                 *perr = OS_ERR_TIMEOUT;                    /* Indicate that we timed-out waiting       */
   13ac4:	e0800217 	ldw	r2,8(fp)
   13ac8:	00c00284 	movi	r3,10
   13acc:	10c00005 	stb	r3,0(r2)
                 break;
   13ad0:	0001883a 	nop
        }
        return (flags_rdy);
   13ad4:	e0bfe78b 	ldhu	r2,-98(fp)
   13ad8:	00003006 	br	13b9c <OSFlagPend+0x5dc>
    }
    flags_rdy = OSTCBCur->OSTCBFlagsRdy;
   13adc:	008000b4 	movhi	r2,2
   13ae0:	10931804 	addi	r2,r2,19552
   13ae4:	10800017 	ldw	r2,0(r2)
   13ae8:	10800b0b 	ldhu	r2,44(r2)
   13aec:	e0bfe78d 	sth	r2,-98(fp)
    if (consume == OS_TRUE) {                              /* See if we need to consume the flags      */
   13af0:	e0bfe503 	ldbu	r2,-108(fp)
   13af4:	10800058 	cmpnei	r2,r2,1
   13af8:	1000211e 	bne	r2,zero,13b80 <OSFlagPend+0x5c0>
        switch (wait_type) {
   13afc:	e0bffe03 	ldbu	r2,-8(fp)
   13b00:	10001616 	blt	r2,zero,13b5c <OSFlagPend+0x59c>
   13b04:	10c00090 	cmplti	r3,r2,2
   13b08:	18000c1e 	bne	r3,zero,13b3c <OSFlagPend+0x57c>
   13b0c:	10800108 	cmpgei	r2,r2,4
   13b10:	1000121e 	bne	r2,zero,13b5c <OSFlagPend+0x59c>
            case OS_FLAG_WAIT_SET_ALL:
            case OS_FLAG_WAIT_SET_ANY:                     /* Clear ONLY the flags we got              */
                 pgrp->OSFlagFlags &= ~flags_rdy;
   13b14:	e0bffc17 	ldw	r2,-16(fp)
   13b18:	1080020b 	ldhu	r2,8(r2)
   13b1c:	1007883a 	mov	r3,r2
   13b20:	e0bfe78b 	ldhu	r2,-98(fp)
   13b24:	0084303a 	nor	r2,zero,r2
   13b28:	1884703a 	and	r2,r3,r2
   13b2c:	1007883a 	mov	r3,r2
   13b30:	e0bffc17 	ldw	r2,-16(fp)
   13b34:	10c0020d 	sth	r3,8(r2)
                 break;
   13b38:	00001106 	br	13b80 <OSFlagPend+0x5c0>

#if OS_FLAG_WAIT_CLR_EN > 0
            case OS_FLAG_WAIT_CLR_ALL:
            case OS_FLAG_WAIT_CLR_ANY:                     /* Set   ONLY the flags we got              */
                 pgrp->OSFlagFlags |=  flags_rdy;
   13b3c:	e0bffc17 	ldw	r2,-16(fp)
   13b40:	10c0020b 	ldhu	r3,8(r2)
   13b44:	e0bfe78b 	ldhu	r2,-98(fp)
   13b48:	1884b03a 	or	r2,r3,r2
   13b4c:	1007883a 	mov	r3,r2
   13b50:	e0bffc17 	ldw	r2,-16(fp)
   13b54:	10c0020d 	sth	r3,8(r2)
                 break;
   13b58:	00000906 	br	13b80 <OSFlagPend+0x5c0>
   13b5c:	e0bfe617 	ldw	r2,-104(fp)
   13b60:	e0bff515 	stw	r2,-44(fp)
   13b64:	e0bff517 	ldw	r2,-44(fp)
   13b68:	1001703a 	wrctl	status,r2
#endif
            default:
                 OS_EXIT_CRITICAL();
                 *perr = OS_ERR_FLAG_WAIT_TYPE;
   13b6c:	e0800217 	ldw	r2,8(fp)
   13b70:	00c01bc4 	movi	r3,111
   13b74:	10c00005 	stb	r3,0(r2)
                 return ((OS_FLAGS)0);
   13b78:	0005883a 	mov	r2,zero
   13b7c:	00000706 	br	13b9c <OSFlagPend+0x5dc>
   13b80:	e0bfe617 	ldw	r2,-104(fp)
   13b84:	e0bff615 	stw	r2,-40(fp)
   13b88:	e0bff617 	ldw	r2,-40(fp)
   13b8c:	1001703a 	wrctl	status,r2
        }
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;                                   /* Event(s) must have occurred              */
   13b90:	e0800217 	ldw	r2,8(fp)
   13b94:	10000005 	stb	zero,0(r2)
    return (flags_rdy);
   13b98:	e0bfe78b 	ldhu	r2,-98(fp)
}
   13b9c:	e037883a 	mov	sp,fp
   13ba0:	dfc00117 	ldw	ra,4(sp)
   13ba4:	df000017 	ldw	fp,0(sp)
   13ba8:	dec00204 	addi	sp,sp,8
   13bac:	f800283a 	ret

00013bb0 <OSFlagPendGetFlagsRdy>:
* Called from: Task ONLY
*********************************************************************************************************
*/

OS_FLAGS  OSFlagPendGetFlagsRdy (void)
{
   13bb0:	defffb04 	addi	sp,sp,-20
   13bb4:	df000415 	stw	fp,16(sp)
   13bb8:	df000404 	addi	fp,sp,16
    OS_FLAGS      flags;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR     cpu_sr = 0;
   13bbc:	e03ffc15 	stw	zero,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   13bc0:	0005303a 	rdctl	r2,status
   13bc4:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   13bc8:	e0fffe17 	ldw	r3,-8(fp)
   13bcc:	00bfff84 	movi	r2,-2
   13bd0:	1884703a 	and	r2,r3,r2
   13bd4:	1001703a 	wrctl	status,r2
  
  return context;
   13bd8:	e0bffe17 	ldw	r2,-8(fp)
#endif



    OS_ENTER_CRITICAL();
   13bdc:	e0bffc15 	stw	r2,-16(fp)
    flags = OSTCBCur->OSTCBFlagsRdy;
   13be0:	008000b4 	movhi	r2,2
   13be4:	10931804 	addi	r2,r2,19552
   13be8:	10800017 	ldw	r2,0(r2)
   13bec:	10800b0b 	ldhu	r2,44(r2)
   13bf0:	e0bffd0d 	sth	r2,-12(fp)
   13bf4:	e0bffc17 	ldw	r2,-16(fp)
   13bf8:	e0bfff15 	stw	r2,-4(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   13bfc:	e0bfff17 	ldw	r2,-4(fp)
   13c00:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (flags);
   13c04:	e0bffd0b 	ldhu	r2,-12(fp)
}
   13c08:	e037883a 	mov	sp,fp
   13c0c:	df000017 	ldw	fp,0(sp)
   13c10:	dec00104 	addi	sp,sp,4
   13c14:	f800283a 	ret

00013c18 <OSFlagPost>:
*              2) The amount of time interrupts are DISABLED depends on the number of tasks waiting on
*                 the event flag group.
*********************************************************************************************************
*/
OS_FLAGS  OSFlagPost (OS_FLAG_GRP *pgrp, OS_FLAGS flags, INT8U opt, INT8U *perr)
{
   13c18:	deffef04 	addi	sp,sp,-68
   13c1c:	dfc01015 	stw	ra,64(sp)
   13c20:	df000f15 	stw	fp,60(sp)
   13c24:	df000f04 	addi	fp,sp,60
   13c28:	e13ffc15 	stw	r4,-16(fp)
   13c2c:	2807883a 	mov	r3,r5
   13c30:	3005883a 	mov	r2,r6
   13c34:	e1ffff15 	stw	r7,-4(fp)
   13c38:	e0fffd0d 	sth	r3,-12(fp)
   13c3c:	e0bffe05 	stb	r2,-8(fp)
    BOOLEAN       sched;
    OS_FLAGS      flags_cur;
    OS_FLAGS      flags_rdy;
    BOOLEAN       rdy;
#if OS_CRITICAL_METHOD == 3                          /* Allocate storage for CPU status register       */
    OS_CPU_SR     cpu_sr = 0;
   13c40:	e03ff315 	stw	zero,-52(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                        /* Validate 'perr'                                */
   13c44:	e0bfff17 	ldw	r2,-4(fp)
   13c48:	1000021e 	bne	r2,zero,13c54 <OSFlagPost+0x3c>
        return ((OS_FLAGS)0);
   13c4c:	0005883a 	mov	r2,zero
   13c50:	0000ce06 	br	13f8c <OSFlagPost+0x374>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {                  /* Validate 'pgrp'                                */
   13c54:	e0bffc17 	ldw	r2,-16(fp)
   13c58:	1000051e 	bne	r2,zero,13c70 <OSFlagPost+0x58>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
   13c5c:	e0bfff17 	ldw	r2,-4(fp)
   13c60:	00c01b84 	movi	r3,110
   13c64:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
   13c68:	0005883a 	mov	r2,zero
   13c6c:	0000c706 	br	13f8c <OSFlagPost+0x374>
    }
#endif
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {    /* Make sure we are pointing to an event flag grp */
   13c70:	e0bffc17 	ldw	r2,-16(fp)
   13c74:	10800003 	ldbu	r2,0(r2)
   13c78:	10803fcc 	andi	r2,r2,255
   13c7c:	10800160 	cmpeqi	r2,r2,5
   13c80:	1000051e 	bne	r2,zero,13c98 <OSFlagPost+0x80>
        *perr = OS_ERR_EVENT_TYPE;
   13c84:	e0bfff17 	ldw	r2,-4(fp)
   13c88:	00c00044 	movi	r3,1
   13c8c:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
   13c90:	0005883a 	mov	r2,zero
   13c94:	0000bd06 	br	13f8c <OSFlagPost+0x374>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   13c98:	0005303a 	rdctl	r2,status
   13c9c:	e0bff615 	stw	r2,-40(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   13ca0:	e0fff617 	ldw	r3,-40(fp)
   13ca4:	00bfff84 	movi	r2,-2
   13ca8:	1884703a 	and	r2,r3,r2
   13cac:	1001703a 	wrctl	status,r2
  
  return context;
   13cb0:	e0bff617 	ldw	r2,-40(fp)
    }
/*$PAGE*/
    OS_ENTER_CRITICAL();
   13cb4:	e0bff315 	stw	r2,-52(fp)
    switch (opt) {
   13cb8:	e0bffe03 	ldbu	r2,-8(fp)
   13cbc:	10000326 	beq	r2,zero,13ccc <OSFlagPost+0xb4>
   13cc0:	10800060 	cmpeqi	r2,r2,1
   13cc4:	10000b1e 	bne	r2,zero,13cf4 <OSFlagPost+0xdc>
   13cc8:	00001206 	br	13d14 <OSFlagPost+0xfc>
        case OS_FLAG_CLR:
             pgrp->OSFlagFlags &= ~flags;            /* Clear the flags specified in the group         */
   13ccc:	e0bffc17 	ldw	r2,-16(fp)
   13cd0:	1080020b 	ldhu	r2,8(r2)
   13cd4:	1007883a 	mov	r3,r2
   13cd8:	e0bffd0b 	ldhu	r2,-12(fp)
   13cdc:	0084303a 	nor	r2,zero,r2
   13ce0:	1884703a 	and	r2,r3,r2
   13ce4:	1007883a 	mov	r3,r2
   13ce8:	e0bffc17 	ldw	r2,-16(fp)
   13cec:	10c0020d 	sth	r3,8(r2)
             break;
   13cf0:	00001106 	br	13d38 <OSFlagPost+0x120>

        case OS_FLAG_SET:
             pgrp->OSFlagFlags |=  flags;            /* Set   the flags specified in the group         */
   13cf4:	e0bffc17 	ldw	r2,-16(fp)
   13cf8:	10c0020b 	ldhu	r3,8(r2)
   13cfc:	e0bffd0b 	ldhu	r2,-12(fp)
   13d00:	1884b03a 	or	r2,r3,r2
   13d04:	1007883a 	mov	r3,r2
   13d08:	e0bffc17 	ldw	r2,-16(fp)
   13d0c:	10c0020d 	sth	r3,8(r2)
             break;
   13d10:	00000906 	br	13d38 <OSFlagPost+0x120>
   13d14:	e0bff317 	ldw	r2,-52(fp)
   13d18:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   13d1c:	e0bff717 	ldw	r2,-36(fp)
   13d20:	1001703a 	wrctl	status,r2

        default:
             OS_EXIT_CRITICAL();                     /* INVALID option                                 */
             *perr = OS_ERR_FLAG_INVALID_OPT;
   13d24:	e0bfff17 	ldw	r2,-4(fp)
   13d28:	00c01c44 	movi	r3,113
   13d2c:	10c00005 	stb	r3,0(r2)
             return ((OS_FLAGS)0);
   13d30:	0005883a 	mov	r2,zero
   13d34:	00009506 	br	13f8c <OSFlagPost+0x374>
    }
    sched = OS_FALSE;                                /* Indicate that we don't need rescheduling       */
   13d38:	e03ff205 	stb	zero,-56(fp)
    pnode = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
   13d3c:	e0bffc17 	ldw	r2,-16(fp)
   13d40:	10800117 	ldw	r2,4(r2)
   13d44:	e0bff115 	stw	r2,-60(fp)
    while (pnode != (OS_FLAG_NODE *)0) {             /* Go through all tasks waiting on event flag(s)  */
   13d48:	00007406 	br	13f1c <OSFlagPost+0x304>
        switch (pnode->OSFlagNodeWaitType) {
   13d4c:	e0bff117 	ldw	r2,-60(fp)
   13d50:	10800483 	ldbu	r2,18(r2)
   13d54:	10803fcc 	andi	r2,r2,255
   13d58:	10c00060 	cmpeqi	r3,r2,1
   13d5c:	18004d1e 	bne	r3,zero,13e94 <OSFlagPost+0x27c>
   13d60:	10c00088 	cmpgei	r3,r2,2
   13d64:	1800021e 	bne	r3,zero,13d70 <OSFlagPost+0x158>
   13d68:	10003126 	beq	r2,zero,13e30 <OSFlagPost+0x218>
   13d6c:	00005f06 	br	13eec <OSFlagPost+0x2d4>
   13d70:	10c000a0 	cmpeqi	r3,r2,2
   13d74:	1800031e 	bne	r3,zero,13d84 <OSFlagPost+0x16c>
   13d78:	108000e0 	cmpeqi	r2,r2,3
   13d7c:	1000181e 	bne	r2,zero,13de0 <OSFlagPost+0x1c8>
   13d80:	00005a06 	br	13eec <OSFlagPost+0x2d4>
            case OS_FLAG_WAIT_SET_ALL:               /* See if all req. flags are set for current node */
                 flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
   13d84:	e0bffc17 	ldw	r2,-16(fp)
   13d88:	10c0020b 	ldhu	r3,8(r2)
   13d8c:	e0bff117 	ldw	r2,-60(fp)
   13d90:	1080040b 	ldhu	r2,16(r2)
   13d94:	1884703a 	and	r2,r3,r2
   13d98:	e0bff40d 	sth	r2,-48(fp)
                 if (flags_rdy == pnode->OSFlagNodeFlags) {
   13d9c:	e0bff117 	ldw	r2,-60(fp)
   13da0:	1080040b 	ldhu	r2,16(r2)
   13da4:	10ffffcc 	andi	r3,r2,65535
   13da8:	e0bff40b 	ldhu	r2,-48(fp)
   13dac:	18800b1e 	bne	r3,r2,13ddc <OSFlagPost+0x1c4>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
   13db0:	e0bff40b 	ldhu	r2,-48(fp)
   13db4:	e13ff117 	ldw	r4,-60(fp)
   13db8:	100b883a 	mov	r5,r2
   13dbc:	001430c0 	call	1430c <OS_FlagTaskRdy>
   13dc0:	e0bff485 	stb	r2,-46(fp)
                     if (rdy == OS_TRUE) {
   13dc4:	e0bff483 	ldbu	r2,-46(fp)
   13dc8:	10800058 	cmpnei	r2,r2,1
   13dcc:	1000031e 	bne	r2,zero,13ddc <OSFlagPost+0x1c4>
                         sched = OS_TRUE;                     /* When done we will reschedule          */
   13dd0:	00800044 	movi	r2,1
   13dd4:	e0bff205 	stb	r2,-56(fp)
                     }
                 }
                 break;
   13dd8:	00004d06 	br	13f10 <OSFlagPost+0x2f8>
   13ddc:	00004c06 	br	13f10 <OSFlagPost+0x2f8>

            case OS_FLAG_WAIT_SET_ANY:               /* See if any flag set                            */
                 flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
   13de0:	e0bffc17 	ldw	r2,-16(fp)
   13de4:	10c0020b 	ldhu	r3,8(r2)
   13de8:	e0bff117 	ldw	r2,-60(fp)
   13dec:	1080040b 	ldhu	r2,16(r2)
   13df0:	1884703a 	and	r2,r3,r2
   13df4:	e0bff40d 	sth	r2,-48(fp)
                 if (flags_rdy != (OS_FLAGS)0) {
   13df8:	e0bff40b 	ldhu	r2,-48(fp)
   13dfc:	10000b26 	beq	r2,zero,13e2c <OSFlagPost+0x214>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
   13e00:	e0bff40b 	ldhu	r2,-48(fp)
   13e04:	e13ff117 	ldw	r4,-60(fp)
   13e08:	100b883a 	mov	r5,r2
   13e0c:	001430c0 	call	1430c <OS_FlagTaskRdy>
   13e10:	e0bff485 	stb	r2,-46(fp)
                     if (rdy == OS_TRUE) {
   13e14:	e0bff483 	ldbu	r2,-46(fp)
   13e18:	10800058 	cmpnei	r2,r2,1
   13e1c:	1000031e 	bne	r2,zero,13e2c <OSFlagPost+0x214>
                         sched = OS_TRUE;                     /* When done we will reschedule          */
   13e20:	00800044 	movi	r2,1
   13e24:	e0bff205 	stb	r2,-56(fp)
                     }
                 }
                 break;
   13e28:	00003906 	br	13f10 <OSFlagPost+0x2f8>
   13e2c:	00003806 	br	13f10 <OSFlagPost+0x2f8>

#if OS_FLAG_WAIT_CLR_EN > 0
            case OS_FLAG_WAIT_CLR_ALL:               /* See if all req. flags are set for current node */
                 flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
   13e30:	e0bffc17 	ldw	r2,-16(fp)
   13e34:	1080020b 	ldhu	r2,8(r2)
   13e38:	0084303a 	nor	r2,zero,r2
   13e3c:	1007883a 	mov	r3,r2
   13e40:	e0bff117 	ldw	r2,-60(fp)
   13e44:	1080040b 	ldhu	r2,16(r2)
   13e48:	1884703a 	and	r2,r3,r2
   13e4c:	e0bff40d 	sth	r2,-48(fp)
                 if (flags_rdy == pnode->OSFlagNodeFlags) {
   13e50:	e0bff117 	ldw	r2,-60(fp)
   13e54:	1080040b 	ldhu	r2,16(r2)
   13e58:	10ffffcc 	andi	r3,r2,65535
   13e5c:	e0bff40b 	ldhu	r2,-48(fp)
   13e60:	18800b1e 	bne	r3,r2,13e90 <OSFlagPost+0x278>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
   13e64:	e0bff40b 	ldhu	r2,-48(fp)
   13e68:	e13ff117 	ldw	r4,-60(fp)
   13e6c:	100b883a 	mov	r5,r2
   13e70:	001430c0 	call	1430c <OS_FlagTaskRdy>
   13e74:	e0bff485 	stb	r2,-46(fp)
                     if (rdy == OS_TRUE) {
   13e78:	e0bff483 	ldbu	r2,-46(fp)
   13e7c:	10800058 	cmpnei	r2,r2,1
   13e80:	1000031e 	bne	r2,zero,13e90 <OSFlagPost+0x278>
                         sched = OS_TRUE;                     /* When done we will reschedule          */
   13e84:	00800044 	movi	r2,1
   13e88:	e0bff205 	stb	r2,-56(fp)
                     }
                 }
                 break;
   13e8c:	00002006 	br	13f10 <OSFlagPost+0x2f8>
   13e90:	00001f06 	br	13f10 <OSFlagPost+0x2f8>

            case OS_FLAG_WAIT_CLR_ANY:               /* See if any flag set                            */
                 flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
   13e94:	e0bffc17 	ldw	r2,-16(fp)
   13e98:	1080020b 	ldhu	r2,8(r2)
   13e9c:	0084303a 	nor	r2,zero,r2
   13ea0:	1007883a 	mov	r3,r2
   13ea4:	e0bff117 	ldw	r2,-60(fp)
   13ea8:	1080040b 	ldhu	r2,16(r2)
   13eac:	1884703a 	and	r2,r3,r2
   13eb0:	e0bff40d 	sth	r2,-48(fp)
                 if (flags_rdy != (OS_FLAGS)0) {
   13eb4:	e0bff40b 	ldhu	r2,-48(fp)
   13eb8:	10000b26 	beq	r2,zero,13ee8 <OSFlagPost+0x2d0>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
   13ebc:	e0bff40b 	ldhu	r2,-48(fp)
   13ec0:	e13ff117 	ldw	r4,-60(fp)
   13ec4:	100b883a 	mov	r5,r2
   13ec8:	001430c0 	call	1430c <OS_FlagTaskRdy>
   13ecc:	e0bff485 	stb	r2,-46(fp)
                     if (rdy == OS_TRUE) {
   13ed0:	e0bff483 	ldbu	r2,-46(fp)
   13ed4:	10800058 	cmpnei	r2,r2,1
   13ed8:	1000031e 	bne	r2,zero,13ee8 <OSFlagPost+0x2d0>
                         sched = OS_TRUE;                     /* When done we will reschedule          */
   13edc:	00800044 	movi	r2,1
   13ee0:	e0bff205 	stb	r2,-56(fp)
                     }
                 }
                 break;
   13ee4:	00000a06 	br	13f10 <OSFlagPost+0x2f8>
   13ee8:	00000906 	br	13f10 <OSFlagPost+0x2f8>
   13eec:	e0bff317 	ldw	r2,-52(fp)
   13ef0:	e0bff815 	stw	r2,-32(fp)
   13ef4:	e0bff817 	ldw	r2,-32(fp)
   13ef8:	1001703a 	wrctl	status,r2
#endif
            default:
                 OS_EXIT_CRITICAL();
                 *perr = OS_ERR_FLAG_WAIT_TYPE;
   13efc:	e0bfff17 	ldw	r2,-4(fp)
   13f00:	00c01bc4 	movi	r3,111
   13f04:	10c00005 	stb	r3,0(r2)
                 return ((OS_FLAGS)0);
   13f08:	0005883a 	mov	r2,zero
   13f0c:	00001f06 	br	13f8c <OSFlagPost+0x374>
        }
        pnode = (OS_FLAG_NODE *)pnode->OSFlagNodeNext; /* Point to next task waiting for event flag(s) */
   13f10:	e0bff117 	ldw	r2,-60(fp)
   13f14:	10800017 	ldw	r2,0(r2)
   13f18:	e0bff115 	stw	r2,-60(fp)
             *perr = OS_ERR_FLAG_INVALID_OPT;
             return ((OS_FLAGS)0);
    }
    sched = OS_FALSE;                                /* Indicate that we don't need rescheduling       */
    pnode = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
    while (pnode != (OS_FLAG_NODE *)0) {             /* Go through all tasks waiting on event flag(s)  */
   13f1c:	e0bff117 	ldw	r2,-60(fp)
   13f20:	103f8a1e 	bne	r2,zero,13d4c <__alt_mem_Flash_flash_data+0xf4013d4c>
   13f24:	e0bff317 	ldw	r2,-52(fp)
   13f28:	e0bff915 	stw	r2,-28(fp)
   13f2c:	e0bff917 	ldw	r2,-28(fp)
   13f30:	1001703a 	wrctl	status,r2
                 return ((OS_FLAGS)0);
        }
        pnode = (OS_FLAG_NODE *)pnode->OSFlagNodeNext; /* Point to next task waiting for event flag(s) */
    }
    OS_EXIT_CRITICAL();
    if (sched == OS_TRUE) {
   13f34:	e0bff203 	ldbu	r2,-56(fp)
   13f38:	10800058 	cmpnei	r2,r2,1
   13f3c:	1000011e 	bne	r2,zero,13f44 <OSFlagPost+0x32c>
        OS_Sched();
   13f40:	001243c0 	call	1243c <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   13f44:	0005303a 	rdctl	r2,status
   13f48:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   13f4c:	e0fffa17 	ldw	r3,-24(fp)
   13f50:	00bfff84 	movi	r2,-2
   13f54:	1884703a 	and	r2,r3,r2
   13f58:	1001703a 	wrctl	status,r2
  
  return context;
   13f5c:	e0bffa17 	ldw	r2,-24(fp)
    }
    OS_ENTER_CRITICAL();
   13f60:	e0bff315 	stw	r2,-52(fp)
    flags_cur = pgrp->OSFlagFlags;
   13f64:	e0bffc17 	ldw	r2,-16(fp)
   13f68:	1080020b 	ldhu	r2,8(r2)
   13f6c:	e0bff50d 	sth	r2,-44(fp)
   13f70:	e0bff317 	ldw	r2,-52(fp)
   13f74:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   13f78:	e0bffb17 	ldw	r2,-20(fp)
   13f7c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr     = OS_ERR_NONE;
   13f80:	e0bfff17 	ldw	r2,-4(fp)
   13f84:	10000005 	stb	zero,0(r2)
    return (flags_cur);
   13f88:	e0bff50b 	ldhu	r2,-44(fp)
}
   13f8c:	e037883a 	mov	sp,fp
   13f90:	dfc00117 	ldw	ra,4(sp)
   13f94:	df000017 	ldw	fp,0(sp)
   13f98:	dec00204 	addi	sp,sp,8
   13f9c:	f800283a 	ret

00013fa0 <OSFlagQuery>:
*********************************************************************************************************
*/

#if OS_FLAG_QUERY_EN > 0
OS_FLAGS  OSFlagQuery (OS_FLAG_GRP *pgrp, INT8U *perr)
{
   13fa0:	defff904 	addi	sp,sp,-28
   13fa4:	df000615 	stw	fp,24(sp)
   13fa8:	df000604 	addi	fp,sp,24
   13fac:	e13ffe15 	stw	r4,-8(fp)
   13fb0:	e17fff15 	stw	r5,-4(fp)
    OS_FLAGS   flags;
#if OS_CRITICAL_METHOD == 3                       /* Allocate storage for CPU status register          */
    OS_CPU_SR  cpu_sr = 0;
   13fb4:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                     /* Validate 'perr'                                   */
   13fb8:	e0bfff17 	ldw	r2,-4(fp)
   13fbc:	1000021e 	bne	r2,zero,13fc8 <OSFlagQuery+0x28>
        return ((OS_FLAGS)0);
   13fc0:	0005883a 	mov	r2,zero
   13fc4:	00002306 	br	14054 <OSFlagQuery+0xb4>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {               /* Validate 'pgrp'                                   */
   13fc8:	e0bffe17 	ldw	r2,-8(fp)
   13fcc:	1000051e 	bne	r2,zero,13fe4 <OSFlagQuery+0x44>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
   13fd0:	e0bfff17 	ldw	r2,-4(fp)
   13fd4:	00c01b84 	movi	r3,110
   13fd8:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
   13fdc:	0005883a 	mov	r2,zero
   13fe0:	00001c06 	br	14054 <OSFlagQuery+0xb4>
    }
#endif
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) { /* Validate event block type                         */
   13fe4:	e0bffe17 	ldw	r2,-8(fp)
   13fe8:	10800003 	ldbu	r2,0(r2)
   13fec:	10803fcc 	andi	r2,r2,255
   13ff0:	10800160 	cmpeqi	r2,r2,5
   13ff4:	1000051e 	bne	r2,zero,1400c <OSFlagQuery+0x6c>
        *perr = OS_ERR_EVENT_TYPE;
   13ff8:	e0bfff17 	ldw	r2,-4(fp)
   13ffc:	00c00044 	movi	r3,1
   14000:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
   14004:	0005883a 	mov	r2,zero
   14008:	00001206 	br	14054 <OSFlagQuery+0xb4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1400c:	0005303a 	rdctl	r2,status
   14010:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   14014:	e0fffc17 	ldw	r3,-16(fp)
   14018:	00bfff84 	movi	r2,-2
   1401c:	1884703a 	and	r2,r3,r2
   14020:	1001703a 	wrctl	status,r2
  
  return context;
   14024:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
   14028:	e0bffa15 	stw	r2,-24(fp)
    flags = pgrp->OSFlagFlags;
   1402c:	e0bffe17 	ldw	r2,-8(fp)
   14030:	1080020b 	ldhu	r2,8(r2)
   14034:	e0bffb0d 	sth	r2,-20(fp)
   14038:	e0bffa17 	ldw	r2,-24(fp)
   1403c:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   14040:	e0bffd17 	ldw	r2,-12(fp)
   14044:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
   14048:	e0bfff17 	ldw	r2,-4(fp)
   1404c:	10000005 	stb	zero,0(r2)
    return (flags);                               /* Return the current value of the event flags       */
   14050:	e0bffb0b 	ldhu	r2,-20(fp)
}
   14054:	e037883a 	mov	sp,fp
   14058:	df000017 	ldw	fp,0(sp)
   1405c:	dec00104 	addi	sp,sp,4
   14060:	f800283a 	ret

00014064 <OS_FlagBlock>:
* Note(s)    : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

static  void  OS_FlagBlock (OS_FLAG_GRP *pgrp, OS_FLAG_NODE *pnode, OS_FLAGS flags, INT8U wait_type, INT16U timeout)
{
   14064:	defff804 	addi	sp,sp,-32
   14068:	df000715 	stw	fp,28(sp)
   1406c:	df000704 	addi	fp,sp,28
   14070:	e13ffb15 	stw	r4,-20(fp)
   14074:	e17ffc15 	stw	r5,-16(fp)
   14078:	3009883a 	mov	r4,r6
   1407c:	3807883a 	mov	r3,r7
   14080:	e0800117 	ldw	r2,4(fp)
   14084:	e13ffd0d 	sth	r4,-12(fp)
   14088:	e0fffe05 	stb	r3,-8(fp)
   1408c:	e0bfff0d 	sth	r2,-4(fp)
    OS_FLAG_NODE  *pnode_next;
    INT8U          y;


    OSTCBCur->OSTCBStat      |= OS_STAT_FLAG;
   14090:	008000b4 	movhi	r2,2
   14094:	10931804 	addi	r2,r2,19552
   14098:	10c00017 	ldw	r3,0(r2)
   1409c:	008000b4 	movhi	r2,2
   140a0:	10931804 	addi	r2,r2,19552
   140a4:	10800017 	ldw	r2,0(r2)
   140a8:	10800c03 	ldbu	r2,48(r2)
   140ac:	10800814 	ori	r2,r2,32
   140b0:	18800c05 	stb	r2,48(r3)
    OSTCBCur->OSTCBStatPend   = OS_STAT_PEND_OK;
   140b4:	008000b4 	movhi	r2,2
   140b8:	10931804 	addi	r2,r2,19552
   140bc:	10800017 	ldw	r2,0(r2)
   140c0:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBDly        = timeout;              /* Store timeout in task's TCB                   */
   140c4:	008000b4 	movhi	r2,2
   140c8:	10931804 	addi	r2,r2,19552
   140cc:	10800017 	ldw	r2,0(r2)
   140d0:	e0ffff0b 	ldhu	r3,-4(fp)
   140d4:	10c00b8d 	sth	r3,46(r2)
#if OS_TASK_DEL_EN > 0
    OSTCBCur->OSTCBFlagNode   = pnode;                /* TCB to link to node                           */
   140d8:	008000b4 	movhi	r2,2
   140dc:	10931804 	addi	r2,r2,19552
   140e0:	10800017 	ldw	r2,0(r2)
   140e4:	e0fffc17 	ldw	r3,-16(fp)
   140e8:	10c00a15 	stw	r3,40(r2)
#endif
    pnode->OSFlagNodeFlags    = flags;                /* Save the flags that we need to wait for       */
   140ec:	e0bffc17 	ldw	r2,-16(fp)
   140f0:	e0fffd0b 	ldhu	r3,-12(fp)
   140f4:	10c0040d 	sth	r3,16(r2)
    pnode->OSFlagNodeWaitType = wait_type;            /* Save the type of wait we are doing            */
   140f8:	e0bffc17 	ldw	r2,-16(fp)
   140fc:	e0fffe03 	ldbu	r3,-8(fp)
   14100:	10c00485 	stb	r3,18(r2)
    pnode->OSFlagNodeTCB      = (void *)OSTCBCur;     /* Link to task's TCB                            */
   14104:	008000b4 	movhi	r2,2
   14108:	10931804 	addi	r2,r2,19552
   1410c:	10c00017 	ldw	r3,0(r2)
   14110:	e0bffc17 	ldw	r2,-16(fp)
   14114:	10c00215 	stw	r3,8(r2)
    pnode->OSFlagNodeNext     = pgrp->OSFlagWaitList; /* Add node at beginning of event flag wait list */
   14118:	e0bffb17 	ldw	r2,-20(fp)
   1411c:	10c00117 	ldw	r3,4(r2)
   14120:	e0bffc17 	ldw	r2,-16(fp)
   14124:	10c00015 	stw	r3,0(r2)
    pnode->OSFlagNodePrev     = (void *)0;
   14128:	e0bffc17 	ldw	r2,-16(fp)
   1412c:	10000115 	stw	zero,4(r2)
    pnode->OSFlagNodeFlagGrp  = (void *)pgrp;         /* Link to Event Flag Group                      */
   14130:	e0bffc17 	ldw	r2,-16(fp)
   14134:	e0fffb17 	ldw	r3,-20(fp)
   14138:	10c00315 	stw	r3,12(r2)
    pnode_next                = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
   1413c:	e0bffb17 	ldw	r2,-20(fp)
   14140:	10800117 	ldw	r2,4(r2)
   14144:	e0bff915 	stw	r2,-28(fp)
    if (pnode_next != (void *)0) {                    /* Is this the first NODE to insert?             */
   14148:	e0bff917 	ldw	r2,-28(fp)
   1414c:	10000326 	beq	r2,zero,1415c <OS_FlagBlock+0xf8>
        pnode_next->OSFlagNodePrev = pnode;           /* No, link in doubly linked list                */
   14150:	e0bff917 	ldw	r2,-28(fp)
   14154:	e0fffc17 	ldw	r3,-16(fp)
   14158:	10c00115 	stw	r3,4(r2)
    }
    pgrp->OSFlagWaitList = (void *)pnode;
   1415c:	e0bffb17 	ldw	r2,-20(fp)
   14160:	e0fffc17 	ldw	r3,-16(fp)
   14164:	10c00115 	stw	r3,4(r2)

    y            =  OSTCBCur->OSTCBY;                 /* Suspend current task until flag(s) received   */
   14168:	008000b4 	movhi	r2,2
   1416c:	10931804 	addi	r2,r2,19552
   14170:	10800017 	ldw	r2,0(r2)
   14174:	10800d03 	ldbu	r2,52(r2)
   14178:	e0bffa05 	stb	r2,-24(fp)
    OSRdyTbl[y] &= ~OSTCBCur->OSTCBBitX;
   1417c:	e0fffa03 	ldbu	r3,-24(fp)
   14180:	e13ffa03 	ldbu	r4,-24(fp)
   14184:	008000b4 	movhi	r2,2
   14188:	10931544 	addi	r2,r2,19541
   1418c:	1105883a 	add	r2,r2,r4
   14190:	10800003 	ldbu	r2,0(r2)
   14194:	1009883a 	mov	r4,r2
   14198:	008000b4 	movhi	r2,2
   1419c:	10931804 	addi	r2,r2,19552
   141a0:	10800017 	ldw	r2,0(r2)
   141a4:	10800d43 	ldbu	r2,53(r2)
   141a8:	0084303a 	nor	r2,zero,r2
   141ac:	2084703a 	and	r2,r4,r2
   141b0:	1009883a 	mov	r4,r2
   141b4:	008000b4 	movhi	r2,2
   141b8:	10931544 	addi	r2,r2,19541
   141bc:	10c5883a 	add	r2,r2,r3
   141c0:	11000005 	stb	r4,0(r2)
    if (OSRdyTbl[y] == 0x00) {
   141c4:	e0fffa03 	ldbu	r3,-24(fp)
   141c8:	008000b4 	movhi	r2,2
   141cc:	10931544 	addi	r2,r2,19541
   141d0:	10c5883a 	add	r2,r2,r3
   141d4:	10800003 	ldbu	r2,0(r2)
   141d8:	10803fcc 	andi	r2,r2,255
   141dc:	10000e1e 	bne	r2,zero,14218 <OS_FlagBlock+0x1b4>
        OSRdyGrp &= ~OSTCBCur->OSTCBBitY;
   141e0:	008000b4 	movhi	r2,2
   141e4:	10931804 	addi	r2,r2,19552
   141e8:	10800017 	ldw	r2,0(r2)
   141ec:	10800d83 	ldbu	r2,54(r2)
   141f0:	0084303a 	nor	r2,zero,r2
   141f4:	1007883a 	mov	r3,r2
   141f8:	008000b4 	movhi	r2,2
   141fc:	10931504 	addi	r2,r2,19540
   14200:	10800003 	ldbu	r2,0(r2)
   14204:	1884703a 	and	r2,r3,r2
   14208:	1007883a 	mov	r3,r2
   1420c:	008000b4 	movhi	r2,2
   14210:	10931504 	addi	r2,r2,19540
   14214:	10c00005 	stb	r3,0(r2)
    }
}
   14218:	e037883a 	mov	sp,fp
   1421c:	df000017 	ldw	fp,0(sp)
   14220:	dec00104 	addi	sp,sp,4
   14224:	f800283a 	ret

00014228 <OS_FlagInit>:
* WARNING    : You MUST NOT call this function from your code.  This is an INTERNAL function to uC/OS-II.
*********************************************************************************************************
*/

void  OS_FlagInit (void)
{
   14228:	defffb04 	addi	sp,sp,-20
   1422c:	dfc00415 	stw	ra,16(sp)
   14230:	df000315 	stw	fp,12(sp)
   14234:	df000304 	addi	fp,sp,12
    INT16U       i;
    OS_FLAG_GRP *pgrp1;
    OS_FLAG_GRP *pgrp2;


    OS_MemClr((INT8U *)&OSFlagTbl[0], sizeof(OSFlagTbl));           /* Clear the flag group table      */
   14238:	010000b4 	movhi	r4,2
   1423c:	21135104 	addi	r4,r4,19780
   14240:	0140dc04 	movi	r5,880
   14244:	00123880 	call	12388 <OS_MemClr>
    pgrp1 = &OSFlagTbl[0];
   14248:	008000b4 	movhi	r2,2
   1424c:	10935104 	addi	r2,r2,19780
   14250:	e0bffe15 	stw	r2,-8(fp)
    pgrp2 = &OSFlagTbl[1];
   14254:	008000b4 	movhi	r2,2
   14258:	10935c04 	addi	r2,r2,19824
   1425c:	e0bfff15 	stw	r2,-4(fp)
    for (i = 0; i < (OS_MAX_FLAGS - 1); i++) {                      /* Init. list of free EVENT FLAGS  */
   14260:	e03ffd0d 	sth	zero,-12(fp)
   14264:	00001306 	br	142b4 <OS_FlagInit+0x8c>
        pgrp1->OSFlagType     = OS_EVENT_TYPE_UNUSED;
   14268:	e0bffe17 	ldw	r2,-8(fp)
   1426c:	10000005 	stb	zero,0(r2)
        pgrp1->OSFlagWaitList = (void *)pgrp2;
   14270:	e0bffe17 	ldw	r2,-8(fp)
   14274:	e0ffff17 	ldw	r3,-4(fp)
   14278:	10c00115 	stw	r3,4(r2)
#if OS_FLAG_NAME_SIZE > 1
        pgrp1->OSFlagName[0]  = '?';                                /* Unknown name                    */
   1427c:	e0bffe17 	ldw	r2,-8(fp)
   14280:	00c00fc4 	movi	r3,63
   14284:	10c00285 	stb	r3,10(r2)
        pgrp1->OSFlagName[1]  = OS_ASCII_NUL;
   14288:	e0bffe17 	ldw	r2,-8(fp)
   1428c:	100002c5 	stb	zero,11(r2)
#endif
        pgrp1++;
   14290:	e0bffe17 	ldw	r2,-8(fp)
   14294:	10800b04 	addi	r2,r2,44
   14298:	e0bffe15 	stw	r2,-8(fp)
        pgrp2++;
   1429c:	e0bfff17 	ldw	r2,-4(fp)
   142a0:	10800b04 	addi	r2,r2,44
   142a4:	e0bfff15 	stw	r2,-4(fp)


    OS_MemClr((INT8U *)&OSFlagTbl[0], sizeof(OSFlagTbl));           /* Clear the flag group table      */
    pgrp1 = &OSFlagTbl[0];
    pgrp2 = &OSFlagTbl[1];
    for (i = 0; i < (OS_MAX_FLAGS - 1); i++) {                      /* Init. list of free EVENT FLAGS  */
   142a8:	e0bffd0b 	ldhu	r2,-12(fp)
   142ac:	10800044 	addi	r2,r2,1
   142b0:	e0bffd0d 	sth	r2,-12(fp)
   142b4:	e0bffd0b 	ldhu	r2,-12(fp)
   142b8:	108004f0 	cmpltui	r2,r2,19
   142bc:	103fea1e 	bne	r2,zero,14268 <__alt_mem_Flash_flash_data+0xf4014268>
        pgrp1->OSFlagName[1]  = OS_ASCII_NUL;
#endif
        pgrp1++;
        pgrp2++;
    }
    pgrp1->OSFlagType     = OS_EVENT_TYPE_UNUSED;
   142c0:	e0bffe17 	ldw	r2,-8(fp)
   142c4:	10000005 	stb	zero,0(r2)
    pgrp1->OSFlagWaitList = (void *)0;
   142c8:	e0bffe17 	ldw	r2,-8(fp)
   142cc:	10000115 	stw	zero,4(r2)
#if OS_FLAG_NAME_SIZE > 1
    pgrp1->OSFlagName[0]  = '?';                                    /* Unknown name                    */
   142d0:	e0bffe17 	ldw	r2,-8(fp)
   142d4:	00c00fc4 	movi	r3,63
   142d8:	10c00285 	stb	r3,10(r2)
    pgrp1->OSFlagName[1]  = OS_ASCII_NUL;
   142dc:	e0bffe17 	ldw	r2,-8(fp)
   142e0:	100002c5 	stb	zero,11(r2)
#endif
    OSFlagFreeList        = &OSFlagTbl[0];
   142e4:	008000b4 	movhi	r2,2
   142e8:	10931a04 	addi	r2,r2,19560
   142ec:	00c000b4 	movhi	r3,2
   142f0:	18d35104 	addi	r3,r3,19780
   142f4:	10c00015 	stw	r3,0(r2)
#endif
}
   142f8:	e037883a 	mov	sp,fp
   142fc:	dfc00117 	ldw	ra,4(sp)
   14300:	df000017 	ldw	fp,0(sp)
   14304:	dec00204 	addi	sp,sp,8
   14308:	f800283a 	ret

0001430c <OS_FlagTaskRdy>:
*              2) This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

static  BOOLEAN  OS_FlagTaskRdy (OS_FLAG_NODE *pnode, OS_FLAGS flags_rdy)
{
   1430c:	defffa04 	addi	sp,sp,-24
   14310:	dfc00515 	stw	ra,20(sp)
   14314:	df000415 	stw	fp,16(sp)
   14318:	df000404 	addi	fp,sp,16
   1431c:	e13ffe15 	stw	r4,-8(fp)
   14320:	2805883a 	mov	r2,r5
   14324:	e0bfff0d 	sth	r2,-4(fp)
    OS_TCB   *ptcb;
    BOOLEAN   sched;


    ptcb                 = (OS_TCB *)pnode->OSFlagNodeTCB; /* Point to TCB of waiting task             */
   14328:	e0bffe17 	ldw	r2,-8(fp)
   1432c:	10800217 	ldw	r2,8(r2)
   14330:	e0bffd15 	stw	r2,-12(fp)
    ptcb->OSTCBDly       = 0;
   14334:	e0bffd17 	ldw	r2,-12(fp)
   14338:	10000b8d 	sth	zero,46(r2)
    ptcb->OSTCBFlagsRdy  = flags_rdy;
   1433c:	e0bffd17 	ldw	r2,-12(fp)
   14340:	e0ffff0b 	ldhu	r3,-4(fp)
   14344:	10c00b0d 	sth	r3,44(r2)
    ptcb->OSTCBStat     &= ~(INT8U)OS_STAT_FLAG;
   14348:	e0bffd17 	ldw	r2,-12(fp)
   1434c:	10c00c03 	ldbu	r3,48(r2)
   14350:	00bff7c4 	movi	r2,-33
   14354:	1884703a 	and	r2,r3,r2
   14358:	1007883a 	mov	r3,r2
   1435c:	e0bffd17 	ldw	r2,-12(fp)
   14360:	10c00c05 	stb	r3,48(r2)
    ptcb->OSTCBStatPend  = OS_STAT_PEND_OK;
   14364:	e0bffd17 	ldw	r2,-12(fp)
   14368:	10000c45 	stb	zero,49(r2)
    if (ptcb->OSTCBStat == OS_STAT_RDY) {                  /* Task now ready?                          */
   1436c:	e0bffd17 	ldw	r2,-12(fp)
   14370:	10800c03 	ldbu	r2,48(r2)
   14374:	10803fcc 	andi	r2,r2,255
   14378:	10001f1e 	bne	r2,zero,143f8 <OS_FlagTaskRdy+0xec>
        OSRdyGrp               |= ptcb->OSTCBBitY;         /* Put task into ready list                 */
   1437c:	e0bffd17 	ldw	r2,-12(fp)
   14380:	10c00d83 	ldbu	r3,54(r2)
   14384:	008000b4 	movhi	r2,2
   14388:	10931504 	addi	r2,r2,19540
   1438c:	10800003 	ldbu	r2,0(r2)
   14390:	1884b03a 	or	r2,r3,r2
   14394:	1007883a 	mov	r3,r2
   14398:	008000b4 	movhi	r2,2
   1439c:	10931504 	addi	r2,r2,19540
   143a0:	10c00005 	stb	r3,0(r2)
        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
   143a4:	e0bffd17 	ldw	r2,-12(fp)
   143a8:	10800d03 	ldbu	r2,52(r2)
   143ac:	10c03fcc 	andi	r3,r2,255
   143b0:	e0bffd17 	ldw	r2,-12(fp)
   143b4:	10800d03 	ldbu	r2,52(r2)
   143b8:	11003fcc 	andi	r4,r2,255
   143bc:	008000b4 	movhi	r2,2
   143c0:	10931544 	addi	r2,r2,19541
   143c4:	1105883a 	add	r2,r2,r4
   143c8:	11000003 	ldbu	r4,0(r2)
   143cc:	e0bffd17 	ldw	r2,-12(fp)
   143d0:	10800d43 	ldbu	r2,53(r2)
   143d4:	2084b03a 	or	r2,r4,r2
   143d8:	1009883a 	mov	r4,r2
   143dc:	008000b4 	movhi	r2,2
   143e0:	10931544 	addi	r2,r2,19541
   143e4:	10c5883a 	add	r2,r2,r3
   143e8:	11000005 	stb	r4,0(r2)
        sched                   = OS_TRUE;
   143ec:	00800044 	movi	r2,1
   143f0:	e0bffc05 	stb	r2,-16(fp)
   143f4:	00000106 	br	143fc <OS_FlagTaskRdy+0xf0>
    } else {
        sched                   = OS_FALSE;
   143f8:	e03ffc05 	stb	zero,-16(fp)
    }
    OS_FlagUnlink(pnode);
   143fc:	e13ffe17 	ldw	r4,-8(fp)
   14400:	001441c0 	call	1441c <OS_FlagUnlink>
    return (sched);
   14404:	e0bffc03 	ldbu	r2,-16(fp)
}
   14408:	e037883a 	mov	sp,fp
   1440c:	dfc00117 	ldw	ra,4(sp)
   14410:	df000017 	ldw	fp,0(sp)
   14414:	dec00204 	addi	sp,sp,8
   14418:	f800283a 	ret

0001441c <OS_FlagUnlink>:
*              2) This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

void  OS_FlagUnlink (OS_FLAG_NODE *pnode)
{
   1441c:	defffa04 	addi	sp,sp,-24
   14420:	df000515 	stw	fp,20(sp)
   14424:	df000504 	addi	fp,sp,20
   14428:	e13fff15 	stw	r4,-4(fp)
    OS_FLAG_GRP  *pgrp;
    OS_FLAG_NODE *pnode_prev;
    OS_FLAG_NODE *pnode_next;


    pnode_prev = (OS_FLAG_NODE *)pnode->OSFlagNodePrev;
   1442c:	e0bfff17 	ldw	r2,-4(fp)
   14430:	10800117 	ldw	r2,4(r2)
   14434:	e0bffb15 	stw	r2,-20(fp)
    pnode_next = (OS_FLAG_NODE *)pnode->OSFlagNodeNext;
   14438:	e0bfff17 	ldw	r2,-4(fp)
   1443c:	10800017 	ldw	r2,0(r2)
   14440:	e0bffc15 	stw	r2,-16(fp)
    if (pnode_prev == (OS_FLAG_NODE *)0) {                      /* Is it first node in wait list?      */
   14444:	e0bffb17 	ldw	r2,-20(fp)
   14448:	10000b1e 	bne	r2,zero,14478 <OS_FlagUnlink+0x5c>
        pgrp                 = (OS_FLAG_GRP *)pnode->OSFlagNodeFlagGrp;
   1444c:	e0bfff17 	ldw	r2,-4(fp)
   14450:	10800317 	ldw	r2,12(r2)
   14454:	e0bffd15 	stw	r2,-12(fp)
        pgrp->OSFlagWaitList = (void *)pnode_next;              /*      Update list for new 1st node   */
   14458:	e0bffd17 	ldw	r2,-12(fp)
   1445c:	e0fffc17 	ldw	r3,-16(fp)
   14460:	10c00115 	stw	r3,4(r2)
        if (pnode_next != (OS_FLAG_NODE *)0) {
   14464:	e0bffc17 	ldw	r2,-16(fp)
   14468:	10000b26 	beq	r2,zero,14498 <OS_FlagUnlink+0x7c>
            pnode_next->OSFlagNodePrev = (OS_FLAG_NODE *)0;     /*      Link new 1st node PREV to NULL */
   1446c:	e0bffc17 	ldw	r2,-16(fp)
   14470:	10000115 	stw	zero,4(r2)
   14474:	00000806 	br	14498 <OS_FlagUnlink+0x7c>
        }
    } else {                                                    /* No,  A node somewhere in the list   */
        pnode_prev->OSFlagNodeNext = pnode_next;                /*      Link around the node to unlink */
   14478:	e0bffb17 	ldw	r2,-20(fp)
   1447c:	e0fffc17 	ldw	r3,-16(fp)
   14480:	10c00015 	stw	r3,0(r2)
        if (pnode_next != (OS_FLAG_NODE *)0) {                  /*      Was this the LAST node?        */
   14484:	e0bffc17 	ldw	r2,-16(fp)
   14488:	10000326 	beq	r2,zero,14498 <OS_FlagUnlink+0x7c>
            pnode_next->OSFlagNodePrev = pnode_prev;            /*      No, Link around current node   */
   1448c:	e0bffc17 	ldw	r2,-16(fp)
   14490:	e0fffb17 	ldw	r3,-20(fp)
   14494:	10c00115 	stw	r3,4(r2)
        }
    }
#if OS_TASK_DEL_EN > 0
    ptcb                = (OS_TCB *)pnode->OSFlagNodeTCB;
   14498:	e0bfff17 	ldw	r2,-4(fp)
   1449c:	10800217 	ldw	r2,8(r2)
   144a0:	e0bffe15 	stw	r2,-8(fp)
    ptcb->OSTCBFlagNode = (OS_FLAG_NODE *)0;
   144a4:	e0bffe17 	ldw	r2,-8(fp)
   144a8:	10000a15 	stw	zero,40(r2)
#endif
}
   144ac:	e037883a 	mov	sp,fp
   144b0:	df000017 	ldw	fp,0(sp)
   144b4:	dec00104 	addi	sp,sp,4
   144b8:	f800283a 	ret

000144bc <OSMemCreate>:
*                              free partition is available.
*********************************************************************************************************
*/

OS_MEM  *OSMemCreate (void *addr, INT32U nblks, INT32U blksize, INT8U *perr)
{
   144bc:	defff404 	addi	sp,sp,-48
   144c0:	df000b15 	stw	fp,44(sp)
   144c4:	df000b04 	addi	fp,sp,44
   144c8:	e13ffc15 	stw	r4,-16(fp)
   144cc:	e17ffd15 	stw	r5,-12(fp)
   144d0:	e1bffe15 	stw	r6,-8(fp)
   144d4:	e1ffff15 	stw	r7,-4(fp)
    OS_MEM    *pmem;
    INT8U     *pblk;
    void     **plink;
    INT32U     i;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   144d8:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0              
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
   144dc:	e0bfff17 	ldw	r2,-4(fp)
   144e0:	1000021e 	bne	r2,zero,144ec <OSMemCreate+0x30>
        return ((OS_MEM *)0);
   144e4:	0005883a 	mov	r2,zero
   144e8:	00006d06 	br	146a0 <OSMemCreate+0x1e4>
    }
    if (addr == (void *)0) {                          /* Must pass a valid address for the memory part.*/
   144ec:	e0bffc17 	ldw	r2,-16(fp)
   144f0:	1000051e 	bne	r2,zero,14508 <OSMemCreate+0x4c>
        *perr = OS_ERR_MEM_INVALID_ADDR;
   144f4:	e0bfff17 	ldw	r2,-4(fp)
   144f8:	00c01884 	movi	r3,98
   144fc:	10c00005 	stb	r3,0(r2)
        return ((OS_MEM *)0);
   14500:	0005883a 	mov	r2,zero
   14504:	00006606 	br	146a0 <OSMemCreate+0x1e4>
    }
    if (((INT32U)addr & (sizeof(void *) - 1)) != 0){  /* Must be pointer size aligned                  */
   14508:	e0bffc17 	ldw	r2,-16(fp)
   1450c:	108000cc 	andi	r2,r2,3
   14510:	10000526 	beq	r2,zero,14528 <OSMemCreate+0x6c>
        *perr = OS_ERR_MEM_INVALID_ADDR;
   14514:	e0bfff17 	ldw	r2,-4(fp)
   14518:	00c01884 	movi	r3,98
   1451c:	10c00005 	stb	r3,0(r2)
        return ((OS_MEM *)0);
   14520:	0005883a 	mov	r2,zero
   14524:	00005e06 	br	146a0 <OSMemCreate+0x1e4>
    }
    if (nblks < 2) {                                  /* Must have at least 2 blocks per partition     */
   14528:	e0bffd17 	ldw	r2,-12(fp)
   1452c:	108000a8 	cmpgeui	r2,r2,2
   14530:	1000051e 	bne	r2,zero,14548 <OSMemCreate+0x8c>
        *perr = OS_ERR_MEM_INVALID_BLKS;
   14534:	e0bfff17 	ldw	r2,-4(fp)
   14538:	00c016c4 	movi	r3,91
   1453c:	10c00005 	stb	r3,0(r2)
        return ((OS_MEM *)0);
   14540:	0005883a 	mov	r2,zero
   14544:	00005606 	br	146a0 <OSMemCreate+0x1e4>
    }
    if (blksize < sizeof(void *)) {                   /* Must contain space for at least a pointer     */
   14548:	e0bffe17 	ldw	r2,-8(fp)
   1454c:	10800128 	cmpgeui	r2,r2,4
   14550:	1000051e 	bne	r2,zero,14568 <OSMemCreate+0xac>
        *perr = OS_ERR_MEM_INVALID_SIZE;
   14554:	e0bfff17 	ldw	r2,-4(fp)
   14558:	00c01704 	movi	r3,92
   1455c:	10c00005 	stb	r3,0(r2)
        return ((OS_MEM *)0);
   14560:	0005883a 	mov	r2,zero
   14564:	00004e06 	br	146a0 <OSMemCreate+0x1e4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   14568:	0005303a 	rdctl	r2,status
   1456c:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   14570:	e0fffa17 	ldw	r3,-24(fp)
   14574:	00bfff84 	movi	r2,-2
   14578:	1884703a 	and	r2,r3,r2
   1457c:	1001703a 	wrctl	status,r2
  
  return context;
   14580:	e0bffa17 	ldw	r2,-24(fp)
    }
#endif
    OS_ENTER_CRITICAL();
   14584:	e0bff815 	stw	r2,-32(fp)
    pmem = OSMemFreeList;                             /* Get next free memory partition                */
   14588:	008000b4 	movhi	r2,2
   1458c:	10931204 	addi	r2,r2,19528
   14590:	10800017 	ldw	r2,0(r2)
   14594:	e0bff915 	stw	r2,-28(fp)
    if (OSMemFreeList != (OS_MEM *)0) {               /* See if pool of free partitions was empty      */
   14598:	008000b4 	movhi	r2,2
   1459c:	10931204 	addi	r2,r2,19528
   145a0:	10800017 	ldw	r2,0(r2)
   145a4:	10000726 	beq	r2,zero,145c4 <OSMemCreate+0x108>
        OSMemFreeList = (OS_MEM *)OSMemFreeList->OSMemFreeList;
   145a8:	008000b4 	movhi	r2,2
   145ac:	10931204 	addi	r2,r2,19528
   145b0:	10800017 	ldw	r2,0(r2)
   145b4:	10c00117 	ldw	r3,4(r2)
   145b8:	008000b4 	movhi	r2,2
   145bc:	10931204 	addi	r2,r2,19528
   145c0:	10c00015 	stw	r3,0(r2)
   145c4:	e0bff817 	ldw	r2,-32(fp)
   145c8:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   145cc:	e0bffb17 	ldw	r2,-20(fp)
   145d0:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    if (pmem == (OS_MEM *)0) {                        /* See if we have a memory partition             */
   145d4:	e0bff917 	ldw	r2,-28(fp)
   145d8:	1000051e 	bne	r2,zero,145f0 <OSMemCreate+0x134>
        *perr = OS_ERR_MEM_INVALID_PART;
   145dc:	e0bfff17 	ldw	r2,-4(fp)
   145e0:	00c01684 	movi	r3,90
   145e4:	10c00005 	stb	r3,0(r2)
        return ((OS_MEM *)0);
   145e8:	0005883a 	mov	r2,zero
   145ec:	00002c06 	br	146a0 <OSMemCreate+0x1e4>
    }
    plink = (void **)addr;                            /* Create linked list of free memory blocks      */
   145f0:	e0bffc17 	ldw	r2,-16(fp)
   145f4:	e0bff615 	stw	r2,-40(fp)
    pblk  = (INT8U *)((INT32U)addr + blksize);
   145f8:	e0fffc17 	ldw	r3,-16(fp)
   145fc:	e0bffe17 	ldw	r2,-8(fp)
   14600:	1885883a 	add	r2,r3,r2
   14604:	e0bff515 	stw	r2,-44(fp)
    for (i = 0; i < (nblks - 1); i++) {
   14608:	e03ff715 	stw	zero,-36(fp)
   1460c:	00000c06 	br	14640 <OSMemCreate+0x184>
       *plink = (void *)pblk;                         /* Save pointer to NEXT block in CURRENT block   */
   14610:	e0bff617 	ldw	r2,-40(fp)
   14614:	e0fff517 	ldw	r3,-44(fp)
   14618:	10c00015 	stw	r3,0(r2)
        plink = (void **)pblk;                        /* Position to  NEXT      block                  */
   1461c:	e0bff517 	ldw	r2,-44(fp)
   14620:	e0bff615 	stw	r2,-40(fp)
        pblk  = (INT8U *)((INT32U)pblk + blksize);    /* Point to the FOLLOWING block                  */
   14624:	e0fff517 	ldw	r3,-44(fp)
   14628:	e0bffe17 	ldw	r2,-8(fp)
   1462c:	1885883a 	add	r2,r3,r2
   14630:	e0bff515 	stw	r2,-44(fp)
        *perr = OS_ERR_MEM_INVALID_PART;
        return ((OS_MEM *)0);
    }
    plink = (void **)addr;                            /* Create linked list of free memory blocks      */
    pblk  = (INT8U *)((INT32U)addr + blksize);
    for (i = 0; i < (nblks - 1); i++) {
   14634:	e0bff717 	ldw	r2,-36(fp)
   14638:	10800044 	addi	r2,r2,1
   1463c:	e0bff715 	stw	r2,-36(fp)
   14640:	e0bffd17 	ldw	r2,-12(fp)
   14644:	10bfffc4 	addi	r2,r2,-1
   14648:	e0fff717 	ldw	r3,-36(fp)
   1464c:	18bff036 	bltu	r3,r2,14610 <__alt_mem_Flash_flash_data+0xf4014610>
       *plink = (void *)pblk;                         /* Save pointer to NEXT block in CURRENT block   */
        plink = (void **)pblk;                        /* Position to  NEXT      block                  */
        pblk  = (INT8U *)((INT32U)pblk + blksize);    /* Point to the FOLLOWING block                  */
    }
    *plink              = (void *)0;                  /* Last memory block points to NULL              */
   14650:	e0bff617 	ldw	r2,-40(fp)
   14654:	10000015 	stw	zero,0(r2)
    pmem->OSMemAddr     = addr;                       /* Store start address of memory partition       */
   14658:	e0bff917 	ldw	r2,-28(fp)
   1465c:	e0fffc17 	ldw	r3,-16(fp)
   14660:	10c00015 	stw	r3,0(r2)
    pmem->OSMemFreeList = addr;                       /* Initialize pointer to pool of free blocks     */
   14664:	e0bff917 	ldw	r2,-28(fp)
   14668:	e0fffc17 	ldw	r3,-16(fp)
   1466c:	10c00115 	stw	r3,4(r2)
    pmem->OSMemNFree    = nblks;                      /* Store number of free blocks in MCB            */
   14670:	e0bff917 	ldw	r2,-28(fp)
   14674:	e0fffd17 	ldw	r3,-12(fp)
   14678:	10c00415 	stw	r3,16(r2)
    pmem->OSMemNBlks    = nblks;
   1467c:	e0bff917 	ldw	r2,-28(fp)
   14680:	e0fffd17 	ldw	r3,-12(fp)
   14684:	10c00315 	stw	r3,12(r2)
    pmem->OSMemBlkSize  = blksize;                    /* Store block size of each memory blocks        */
   14688:	e0bff917 	ldw	r2,-28(fp)
   1468c:	e0fffe17 	ldw	r3,-8(fp)
   14690:	10c00215 	stw	r3,8(r2)
    *perr               = OS_ERR_NONE;
   14694:	e0bfff17 	ldw	r2,-4(fp)
   14698:	10000005 	stb	zero,0(r2)
    return (pmem);
   1469c:	e0bff917 	ldw	r2,-28(fp)
}
   146a0:	e037883a 	mov	sp,fp
   146a4:	df000017 	ldw	fp,0(sp)
   146a8:	dec00104 	addi	sp,sp,4
   146ac:	f800283a 	ret

000146b0 <OSMemGet>:
*               A pointer to NULL if an error is detected
*********************************************************************************************************
*/

void  *OSMemGet (OS_MEM *pmem, INT8U *perr)
{
   146b0:	defff804 	addi	sp,sp,-32
   146b4:	df000715 	stw	fp,28(sp)
   146b8:	df000704 	addi	fp,sp,28
   146bc:	e13ffe15 	stw	r4,-8(fp)
   146c0:	e17fff15 	stw	r5,-4(fp)
    void      *pblk;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   146c4:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
   146c8:	e0bfff17 	ldw	r2,-4(fp)
   146cc:	1000021e 	bne	r2,zero,146d8 <OSMemGet+0x28>
        return ((void *)0);
   146d0:	0005883a 	mov	r2,zero
   146d4:	00002e06 	br	14790 <OSMemGet+0xe0>
    }
    if (pmem == (OS_MEM *)0) {                        /* Must point to a valid memory partition        */
   146d8:	e0bffe17 	ldw	r2,-8(fp)
   146dc:	1000051e 	bne	r2,zero,146f4 <OSMemGet+0x44>
        *perr = OS_ERR_MEM_INVALID_PMEM;
   146e0:	e0bfff17 	ldw	r2,-4(fp)
   146e4:	00c01804 	movi	r3,96
   146e8:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
   146ec:	0005883a 	mov	r2,zero
   146f0:	00002706 	br	14790 <OSMemGet+0xe0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   146f4:	0005303a 	rdctl	r2,status
   146f8:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   146fc:	e0fffb17 	ldw	r3,-20(fp)
   14700:	00bfff84 	movi	r2,-2
   14704:	1884703a 	and	r2,r3,r2
   14708:	1001703a 	wrctl	status,r2
  
  return context;
   1470c:	e0bffb17 	ldw	r2,-20(fp)
    }
#endif
    OS_ENTER_CRITICAL();
   14710:	e0bff915 	stw	r2,-28(fp)
    if (pmem->OSMemNFree > 0) {                       /* See if there are any free memory blocks       */
   14714:	e0bffe17 	ldw	r2,-8(fp)
   14718:	10800417 	ldw	r2,16(r2)
   1471c:	10001426 	beq	r2,zero,14770 <OSMemGet+0xc0>
        pblk                = pmem->OSMemFreeList;    /* Yes, point to next free memory block          */
   14720:	e0bffe17 	ldw	r2,-8(fp)
   14724:	10800117 	ldw	r2,4(r2)
   14728:	e0bffa15 	stw	r2,-24(fp)
        pmem->OSMemFreeList = *(void **)pblk;         /*      Adjust pointer to new free list          */
   1472c:	e0bffa17 	ldw	r2,-24(fp)
   14730:	10c00017 	ldw	r3,0(r2)
   14734:	e0bffe17 	ldw	r2,-8(fp)
   14738:	10c00115 	stw	r3,4(r2)
        pmem->OSMemNFree--;                           /*      One less memory block in this partition  */
   1473c:	e0bffe17 	ldw	r2,-8(fp)
   14740:	10800417 	ldw	r2,16(r2)
   14744:	10ffffc4 	addi	r3,r2,-1
   14748:	e0bffe17 	ldw	r2,-8(fp)
   1474c:	10c00415 	stw	r3,16(r2)
   14750:	e0bff917 	ldw	r2,-28(fp)
   14754:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   14758:	e0bffc17 	ldw	r2,-16(fp)
   1475c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_NONE;                          /*      No error                                 */
   14760:	e0bfff17 	ldw	r2,-4(fp)
   14764:	10000005 	stb	zero,0(r2)
        return (pblk);                                /*      Return memory block to caller            */
   14768:	e0bffa17 	ldw	r2,-24(fp)
   1476c:	00000806 	br	14790 <OSMemGet+0xe0>
   14770:	e0bff917 	ldw	r2,-28(fp)
   14774:	e0bffd15 	stw	r2,-12(fp)
   14778:	e0bffd17 	ldw	r2,-12(fp)
   1477c:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_MEM_NO_FREE_BLKS;                  /* No,  Notify caller of empty memory partition  */
   14780:	e0bfff17 	ldw	r2,-4(fp)
   14784:	00c01744 	movi	r3,93
   14788:	10c00005 	stb	r3,0(r2)
    return ((void *)0);                               /*      Return NULL pointer to caller            */
   1478c:	0005883a 	mov	r2,zero
}
   14790:	e037883a 	mov	sp,fp
   14794:	df000017 	ldw	fp,0(sp)
   14798:	dec00104 	addi	sp,sp,4
   1479c:	f800283a 	ret

000147a0 <OSMemNameGet>:
*********************************************************************************************************
*/

#if OS_MEM_NAME_SIZE > 1
INT8U  OSMemNameGet (OS_MEM *pmem, INT8U *pname, INT8U *perr)
{
   147a0:	defff704 	addi	sp,sp,-36
   147a4:	dfc00815 	stw	ra,32(sp)
   147a8:	df000715 	stw	fp,28(sp)
   147ac:	df000704 	addi	fp,sp,28
   147b0:	e13ffd15 	stw	r4,-12(fp)
   147b4:	e17ffe15 	stw	r5,-8(fp)
   147b8:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   147bc:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
   147c0:	e0bfff17 	ldw	r2,-4(fp)
   147c4:	1000021e 	bne	r2,zero,147d0 <OSMemNameGet+0x30>
        return (0);
   147c8:	0005883a 	mov	r2,zero
   147cc:	00002d06 	br	14884 <OSMemNameGet+0xe4>
    }
    if (pmem == (OS_MEM *)0) {                   /* Is 'pmem' a NULL pointer?                          */
   147d0:	e0bffd17 	ldw	r2,-12(fp)
   147d4:	1000051e 	bne	r2,zero,147ec <OSMemNameGet+0x4c>
        *perr = OS_ERR_MEM_INVALID_PMEM;
   147d8:	e0bfff17 	ldw	r2,-4(fp)
   147dc:	00c01804 	movi	r3,96
   147e0:	10c00005 	stb	r3,0(r2)
        return (0);
   147e4:	0005883a 	mov	r2,zero
   147e8:	00002606 	br	14884 <OSMemNameGet+0xe4>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
   147ec:	e0bffe17 	ldw	r2,-8(fp)
   147f0:	1000051e 	bne	r2,zero,14808 <OSMemNameGet+0x68>
        *perr = OS_ERR_PNAME_NULL;
   147f4:	e0bfff17 	ldw	r2,-4(fp)
   147f8:	00c00304 	movi	r3,12
   147fc:	10c00005 	stb	r3,0(r2)
        return (0);
   14800:	0005883a 	mov	r2,zero
   14804:	00001f06 	br	14884 <OSMemNameGet+0xe4>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
   14808:	008000b4 	movhi	r2,2
   1480c:	10931704 	addi	r2,r2,19548
   14810:	10800003 	ldbu	r2,0(r2)
   14814:	10803fcc 	andi	r2,r2,255
   14818:	10000526 	beq	r2,zero,14830 <OSMemNameGet+0x90>
        *perr = OS_ERR_NAME_GET_ISR;
   1481c:	e0bfff17 	ldw	r2,-4(fp)
   14820:	00c00444 	movi	r3,17
   14824:	10c00005 	stb	r3,0(r2)
        return (0);
   14828:	0005883a 	mov	r2,zero
   1482c:	00001506 	br	14884 <OSMemNameGet+0xe4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   14830:	0005303a 	rdctl	r2,status
   14834:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   14838:	e0fffb17 	ldw	r3,-20(fp)
   1483c:	00bfff84 	movi	r2,-2
   14840:	1884703a 	and	r2,r3,r2
   14844:	1001703a 	wrctl	status,r2
  
  return context;
   14848:	e0bffb17 	ldw	r2,-20(fp)
    }
    OS_ENTER_CRITICAL();
   1484c:	e0bff915 	stw	r2,-28(fp)
    len   = OS_StrCopy(pname, pmem->OSMemName);  /* Copy name from OS_MEM                              */
   14850:	e0bffd17 	ldw	r2,-12(fp)
   14854:	10800504 	addi	r2,r2,20
   14858:	e13ffe17 	ldw	r4,-8(fp)
   1485c:	100b883a 	mov	r5,r2
   14860:	00125780 	call	12578 <OS_StrCopy>
   14864:	e0bffa05 	stb	r2,-24(fp)
   14868:	e0bff917 	ldw	r2,-28(fp)
   1486c:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   14870:	e0bffc17 	ldw	r2,-16(fp)
   14874:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
   14878:	e0bfff17 	ldw	r2,-4(fp)
   1487c:	10000005 	stb	zero,0(r2)
    return (len);
   14880:	e0bffa03 	ldbu	r2,-24(fp)
}
   14884:	e037883a 	mov	sp,fp
   14888:	dfc00117 	ldw	ra,4(sp)
   1488c:	df000017 	ldw	fp,0(sp)
   14890:	dec00204 	addi	sp,sp,8
   14894:	f800283a 	ret

00014898 <OSMemNameSet>:
*********************************************************************************************************
*/

#if OS_MEM_NAME_SIZE > 1
void  OSMemNameSet (OS_MEM *pmem, INT8U *pname, INT8U *perr)
{
   14898:	defff604 	addi	sp,sp,-40
   1489c:	dfc00915 	stw	ra,36(sp)
   148a0:	df000815 	stw	fp,32(sp)
   148a4:	df000804 	addi	fp,sp,32
   148a8:	e13ffd15 	stw	r4,-12(fp)
   148ac:	e17ffe15 	stw	r5,-8(fp)
   148b0:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   148b4:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
   148b8:	e0bfff17 	ldw	r2,-4(fp)
   148bc:	1000011e 	bne	r2,zero,148c4 <OSMemNameSet+0x2c>
        return;
   148c0:	00003606 	br	1499c <OSMemNameSet+0x104>
    }
    if (pmem == (OS_MEM *)0) {                   /* Is 'pmem' a NULL pointer?                          */
   148c4:	e0bffd17 	ldw	r2,-12(fp)
   148c8:	1000041e 	bne	r2,zero,148dc <OSMemNameSet+0x44>
        *perr = OS_ERR_MEM_INVALID_PMEM;
   148cc:	e0bfff17 	ldw	r2,-4(fp)
   148d0:	00c01804 	movi	r3,96
   148d4:	10c00005 	stb	r3,0(r2)
        return;
   148d8:	00003006 	br	1499c <OSMemNameSet+0x104>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
   148dc:	e0bffe17 	ldw	r2,-8(fp)
   148e0:	1000041e 	bne	r2,zero,148f4 <OSMemNameSet+0x5c>
        *perr = OS_ERR_PNAME_NULL;
   148e4:	e0bfff17 	ldw	r2,-4(fp)
   148e8:	00c00304 	movi	r3,12
   148ec:	10c00005 	stb	r3,0(r2)
        return;
   148f0:	00002a06 	br	1499c <OSMemNameSet+0x104>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
   148f4:	008000b4 	movhi	r2,2
   148f8:	10931704 	addi	r2,r2,19548
   148fc:	10800003 	ldbu	r2,0(r2)
   14900:	10803fcc 	andi	r2,r2,255
   14904:	10000426 	beq	r2,zero,14918 <OSMemNameSet+0x80>
        *perr = OS_ERR_NAME_SET_ISR;
   14908:	e0bfff17 	ldw	r2,-4(fp)
   1490c:	00c00484 	movi	r3,18
   14910:	10c00005 	stb	r3,0(r2)
        return;
   14914:	00002106 	br	1499c <OSMemNameSet+0x104>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   14918:	0005303a 	rdctl	r2,status
   1491c:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   14920:	e0fffa17 	ldw	r3,-24(fp)
   14924:	00bfff84 	movi	r2,-2
   14928:	1884703a 	and	r2,r3,r2
   1492c:	1001703a 	wrctl	status,r2
  
  return context;
   14930:	e0bffa17 	ldw	r2,-24(fp)
    }
    OS_ENTER_CRITICAL();
   14934:	e0bff815 	stw	r2,-32(fp)
    len = OS_StrLen(pname);                      /* Can we fit the string in the storage area?         */
   14938:	e13ffe17 	ldw	r4,-8(fp)
   1493c:	00125ec0 	call	125ec <OS_StrLen>
   14940:	e0bff905 	stb	r2,-28(fp)
    if (len > (OS_MEM_NAME_SIZE - 1)) {          /* No                                                 */
   14944:	e0bff903 	ldbu	r2,-28(fp)
   14948:	10800830 	cmpltui	r2,r2,32
   1494c:	1000081e 	bne	r2,zero,14970 <OSMemNameSet+0xd8>
   14950:	e0bff817 	ldw	r2,-32(fp)
   14954:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   14958:	e0bffb17 	ldw	r2,-20(fp)
   1495c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_MEM_NAME_TOO_LONG;
   14960:	e0bfff17 	ldw	r2,-4(fp)
   14964:	00c018c4 	movi	r3,99
   14968:	10c00005 	stb	r3,0(r2)
        return;
   1496c:	00000b06 	br	1499c <OSMemNameSet+0x104>
    }
    (void)OS_StrCopy(pmem->OSMemName, pname);    /* Yes, copy name to the memory partition header      */
   14970:	e0bffd17 	ldw	r2,-12(fp)
   14974:	10800504 	addi	r2,r2,20
   14978:	1009883a 	mov	r4,r2
   1497c:	e17ffe17 	ldw	r5,-8(fp)
   14980:	00125780 	call	12578 <OS_StrCopy>
   14984:	e0bff817 	ldw	r2,-32(fp)
   14988:	e0bffc15 	stw	r2,-16(fp)
   1498c:	e0bffc17 	ldw	r2,-16(fp)
   14990:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
   14994:	e0bfff17 	ldw	r2,-4(fp)
   14998:	10000005 	stb	zero,0(r2)
}
   1499c:	e037883a 	mov	sp,fp
   149a0:	dfc00117 	ldw	ra,4(sp)
   149a4:	df000017 	ldw	fp,0(sp)
   149a8:	dec00204 	addi	sp,sp,8
   149ac:	f800283a 	ret

000149b0 <OSMemPut>:
*               OS_ERR_MEM_INVALID_PBLK  if you passed a NULL pointer for the block to release.
*********************************************************************************************************
*/

INT8U  OSMemPut (OS_MEM *pmem, void *pblk)
{
   149b0:	defff904 	addi	sp,sp,-28
   149b4:	df000615 	stw	fp,24(sp)
   149b8:	df000604 	addi	fp,sp,24
   149bc:	e13ffe15 	stw	r4,-8(fp)
   149c0:	e17fff15 	stw	r5,-4(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   149c4:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pmem == (OS_MEM *)0) {                   /* Must point to a valid memory partition             */
   149c8:	e0bffe17 	ldw	r2,-8(fp)
   149cc:	1000021e 	bne	r2,zero,149d8 <OSMemPut+0x28>
        return (OS_ERR_MEM_INVALID_PMEM);
   149d0:	00801804 	movi	r2,96
   149d4:	00002806 	br	14a78 <OSMemPut+0xc8>
    }
    if (pblk == (void *)0) {                     /* Must release a valid block                         */
   149d8:	e0bfff17 	ldw	r2,-4(fp)
   149dc:	1000021e 	bne	r2,zero,149e8 <OSMemPut+0x38>
        return (OS_ERR_MEM_INVALID_PBLK);
   149e0:	008017c4 	movi	r2,95
   149e4:	00002406 	br	14a78 <OSMemPut+0xc8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   149e8:	0005303a 	rdctl	r2,status
   149ec:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   149f0:	e0fffb17 	ldw	r3,-20(fp)
   149f4:	00bfff84 	movi	r2,-2
   149f8:	1884703a 	and	r2,r3,r2
   149fc:	1001703a 	wrctl	status,r2
  
  return context;
   14a00:	e0bffb17 	ldw	r2,-20(fp)
    }
#endif
    OS_ENTER_CRITICAL();
   14a04:	e0bffa15 	stw	r2,-24(fp)
    if (pmem->OSMemNFree >= pmem->OSMemNBlks) {  /* Make sure all blocks not already returned          */
   14a08:	e0bffe17 	ldw	r2,-8(fp)
   14a0c:	10c00417 	ldw	r3,16(r2)
   14a10:	e0bffe17 	ldw	r2,-8(fp)
   14a14:	10800317 	ldw	r2,12(r2)
   14a18:	18800636 	bltu	r3,r2,14a34 <OSMemPut+0x84>
   14a1c:	e0bffa17 	ldw	r2,-24(fp)
   14a20:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   14a24:	e0bffc17 	ldw	r2,-16(fp)
   14a28:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_MEM_FULL);
   14a2c:	00801784 	movi	r2,94
   14a30:	00001106 	br	14a78 <OSMemPut+0xc8>
    }
    *(void **)pblk      = pmem->OSMemFreeList;   /* Insert released block into free block list         */
   14a34:	e0bffe17 	ldw	r2,-8(fp)
   14a38:	10c00117 	ldw	r3,4(r2)
   14a3c:	e0bfff17 	ldw	r2,-4(fp)
   14a40:	10c00015 	stw	r3,0(r2)
    pmem->OSMemFreeList = pblk;
   14a44:	e0bffe17 	ldw	r2,-8(fp)
   14a48:	e0ffff17 	ldw	r3,-4(fp)
   14a4c:	10c00115 	stw	r3,4(r2)
    pmem->OSMemNFree++;                          /* One more memory block in this partition            */
   14a50:	e0bffe17 	ldw	r2,-8(fp)
   14a54:	10800417 	ldw	r2,16(r2)
   14a58:	10c00044 	addi	r3,r2,1
   14a5c:	e0bffe17 	ldw	r2,-8(fp)
   14a60:	10c00415 	stw	r3,16(r2)
   14a64:	e0bffa17 	ldw	r2,-24(fp)
   14a68:	e0bffd15 	stw	r2,-12(fp)
   14a6c:	e0bffd17 	ldw	r2,-12(fp)
   14a70:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);                        /* Notify caller that memory block was released       */
   14a74:	0005883a 	mov	r2,zero
}
   14a78:	e037883a 	mov	sp,fp
   14a7c:	df000017 	ldw	fp,0(sp)
   14a80:	dec00104 	addi	sp,sp,4
   14a84:	f800283a 	ret

00014a88 <OSMemQuery>:
*********************************************************************************************************
*/

#if OS_MEM_QUERY_EN > 0
INT8U  OSMemQuery (OS_MEM *pmem, OS_MEM_DATA *p_mem_data)
{
   14a88:	defffa04 	addi	sp,sp,-24
   14a8c:	df000515 	stw	fp,20(sp)
   14a90:	df000504 	addi	fp,sp,20
   14a94:	e13ffe15 	stw	r4,-8(fp)
   14a98:	e17fff15 	stw	r5,-4(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   14a9c:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pmem == (OS_MEM *)0) {                   /* Must point to a valid memory partition             */
   14aa0:	e0bffe17 	ldw	r2,-8(fp)
   14aa4:	1000021e 	bne	r2,zero,14ab0 <OSMemQuery+0x28>
        return (OS_ERR_MEM_INVALID_PMEM);
   14aa8:	00801804 	movi	r2,96
   14aac:	00002c06 	br	14b60 <OSMemQuery+0xd8>
    }
    if (p_mem_data == (OS_MEM_DATA *)0) {        /* Must release a valid storage area for the data     */
   14ab0:	e0bfff17 	ldw	r2,-4(fp)
   14ab4:	1000021e 	bne	r2,zero,14ac0 <OSMemQuery+0x38>
        return (OS_ERR_MEM_INVALID_PDATA);
   14ab8:	00801844 	movi	r2,97
   14abc:	00002806 	br	14b60 <OSMemQuery+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   14ac0:	0005303a 	rdctl	r2,status
   14ac4:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   14ac8:	e0fffc17 	ldw	r3,-16(fp)
   14acc:	00bfff84 	movi	r2,-2
   14ad0:	1884703a 	and	r2,r3,r2
   14ad4:	1001703a 	wrctl	status,r2
  
  return context;
   14ad8:	e0bffc17 	ldw	r2,-16(fp)
    }
#endif
    OS_ENTER_CRITICAL();
   14adc:	e0bffb15 	stw	r2,-20(fp)
    p_mem_data->OSAddr     = pmem->OSMemAddr;
   14ae0:	e0bffe17 	ldw	r2,-8(fp)
   14ae4:	10c00017 	ldw	r3,0(r2)
   14ae8:	e0bfff17 	ldw	r2,-4(fp)
   14aec:	10c00015 	stw	r3,0(r2)
    p_mem_data->OSFreeList = pmem->OSMemFreeList;
   14af0:	e0bffe17 	ldw	r2,-8(fp)
   14af4:	10c00117 	ldw	r3,4(r2)
   14af8:	e0bfff17 	ldw	r2,-4(fp)
   14afc:	10c00115 	stw	r3,4(r2)
    p_mem_data->OSBlkSize  = pmem->OSMemBlkSize;
   14b00:	e0bffe17 	ldw	r2,-8(fp)
   14b04:	10c00217 	ldw	r3,8(r2)
   14b08:	e0bfff17 	ldw	r2,-4(fp)
   14b0c:	10c00215 	stw	r3,8(r2)
    p_mem_data->OSNBlks    = pmem->OSMemNBlks;
   14b10:	e0bffe17 	ldw	r2,-8(fp)
   14b14:	10c00317 	ldw	r3,12(r2)
   14b18:	e0bfff17 	ldw	r2,-4(fp)
   14b1c:	10c00315 	stw	r3,12(r2)
    p_mem_data->OSNFree    = pmem->OSMemNFree;
   14b20:	e0bffe17 	ldw	r2,-8(fp)
   14b24:	10c00417 	ldw	r3,16(r2)
   14b28:	e0bfff17 	ldw	r2,-4(fp)
   14b2c:	10c00415 	stw	r3,16(r2)
   14b30:	e0bffb17 	ldw	r2,-20(fp)
   14b34:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   14b38:	e0bffd17 	ldw	r2,-12(fp)
   14b3c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    p_mem_data->OSNUsed    = p_mem_data->OSNBlks - p_mem_data->OSNFree;
   14b40:	e0bfff17 	ldw	r2,-4(fp)
   14b44:	10c00317 	ldw	r3,12(r2)
   14b48:	e0bfff17 	ldw	r2,-4(fp)
   14b4c:	10800417 	ldw	r2,16(r2)
   14b50:	1887c83a 	sub	r3,r3,r2
   14b54:	e0bfff17 	ldw	r2,-4(fp)
   14b58:	10c00515 	stw	r3,20(r2)
    return (OS_ERR_NONE);
   14b5c:	0005883a 	mov	r2,zero
}
   14b60:	e037883a 	mov	sp,fp
   14b64:	df000017 	ldw	fp,0(sp)
   14b68:	dec00104 	addi	sp,sp,4
   14b6c:	f800283a 	ret

00014b70 <OS_MemInit>:
* Note(s)    : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

void  OS_MemInit (void)
{
   14b70:	defffc04 	addi	sp,sp,-16
   14b74:	dfc00315 	stw	ra,12(sp)
   14b78:	df000215 	stw	fp,8(sp)
   14b7c:	df000204 	addi	fp,sp,8
#if OS_MAX_MEM_PART >= 2
    OS_MEM  *pmem;
    INT16U   i;


    OS_MemClr((INT8U *)&OSMemTbl[0], sizeof(OSMemTbl));   /* Clear the memory partition table          */
   14b80:	010000b4 	movhi	r4,2
   14b84:	21142d04 	addi	r4,r4,20660
   14b88:	01430c04 	movi	r5,3120
   14b8c:	00123880 	call	12388 <OS_MemClr>
    pmem = &OSMemTbl[0];                                  /* Point to memory control block (MCB)       */
   14b90:	008000b4 	movhi	r2,2
   14b94:	10942d04 	addi	r2,r2,20660
   14b98:	e0bffe15 	stw	r2,-8(fp)
    for (i = 0; i < (OS_MAX_MEM_PART - 1); i++) {         /* Init. list of free memory partitions      */
   14b9c:	e03fff0d 	sth	zero,-4(fp)
   14ba0:	00001306 	br	14bf0 <OS_MemInit+0x80>
        pmem->OSMemFreeList = (void *)&OSMemTbl[i+1];     /* Chain list of free partitions             */
   14ba4:	e0bfff0b 	ldhu	r2,-4(fp)
   14ba8:	10800044 	addi	r2,r2,1
   14bac:	10c00d24 	muli	r3,r2,52
   14bb0:	008000b4 	movhi	r2,2
   14bb4:	10942d04 	addi	r2,r2,20660
   14bb8:	1887883a 	add	r3,r3,r2
   14bbc:	e0bffe17 	ldw	r2,-8(fp)
   14bc0:	10c00115 	stw	r3,4(r2)
#if OS_MEM_NAME_SIZE > 1
        pmem->OSMemName[0]  = '?';                        /* Unknown name                              */
   14bc4:	e0bffe17 	ldw	r2,-8(fp)
   14bc8:	00c00fc4 	movi	r3,63
   14bcc:	10c00505 	stb	r3,20(r2)
        pmem->OSMemName[1]  = OS_ASCII_NUL;
   14bd0:	e0bffe17 	ldw	r2,-8(fp)
   14bd4:	10000545 	stb	zero,21(r2)
#endif
        pmem++;
   14bd8:	e0bffe17 	ldw	r2,-8(fp)
   14bdc:	10800d04 	addi	r2,r2,52
   14be0:	e0bffe15 	stw	r2,-8(fp)
    INT16U   i;


    OS_MemClr((INT8U *)&OSMemTbl[0], sizeof(OSMemTbl));   /* Clear the memory partition table          */
    pmem = &OSMemTbl[0];                                  /* Point to memory control block (MCB)       */
    for (i = 0; i < (OS_MAX_MEM_PART - 1); i++) {         /* Init. list of free memory partitions      */
   14be4:	e0bfff0b 	ldhu	r2,-4(fp)
   14be8:	10800044 	addi	r2,r2,1
   14bec:	e0bfff0d 	sth	r2,-4(fp)
   14bf0:	e0bfff0b 	ldhu	r2,-4(fp)
   14bf4:	10800ef0 	cmpltui	r2,r2,59
   14bf8:	103fea1e 	bne	r2,zero,14ba4 <__alt_mem_Flash_flash_data+0xf4014ba4>
        pmem->OSMemName[0]  = '?';                        /* Unknown name                              */
        pmem->OSMemName[1]  = OS_ASCII_NUL;
#endif
        pmem++;
    }
    pmem->OSMemFreeList = (void *)0;                      /* Initialize last node                      */
   14bfc:	e0bffe17 	ldw	r2,-8(fp)
   14c00:	10000115 	stw	zero,4(r2)
#if OS_MEM_NAME_SIZE > 1
    pmem->OSMemName[0]  = '?';                            /* Unknown name                              */
   14c04:	e0bffe17 	ldw	r2,-8(fp)
   14c08:	00c00fc4 	movi	r3,63
   14c0c:	10c00505 	stb	r3,20(r2)
    pmem->OSMemName[1]  = OS_ASCII_NUL;
   14c10:	e0bffe17 	ldw	r2,-8(fp)
   14c14:	10000545 	stb	zero,21(r2)
#endif

    OSMemFreeList       = &OSMemTbl[0];                   /* Point to beginning of free list           */
   14c18:	008000b4 	movhi	r2,2
   14c1c:	10931204 	addi	r2,r2,19528
   14c20:	00c000b4 	movhi	r3,2
   14c24:	18d42d04 	addi	r3,r3,20660
   14c28:	10c00015 	stw	r3,0(r2)
#endif
}
   14c2c:	e037883a 	mov	sp,fp
   14c30:	dfc00117 	ldw	ra,4(sp)
   14c34:	df000017 	ldw	fp,0(sp)
   14c38:	dec00204 	addi	sp,sp,8
   14c3c:	f800283a 	ret

00014c40 <OSQAccept>:
*********************************************************************************************************
*/

#if OS_Q_ACCEPT_EN > 0
void  *OSQAccept (OS_EVENT *pevent, INT8U *perr)
{
   14c40:	defff804 	addi	sp,sp,-32
   14c44:	df000715 	stw	fp,28(sp)
   14c48:	df000704 	addi	fp,sp,28
   14c4c:	e13ffe15 	stw	r4,-8(fp)
   14c50:	e17fff15 	stw	r5,-4(fp)
    void      *pmsg;
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   14c54:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
   14c58:	e0bfff17 	ldw	r2,-4(fp)
   14c5c:	1000021e 	bne	r2,zero,14c68 <OSQAccept+0x28>
        return ((void *)0);
   14c60:	0005883a 	mov	r2,zero
   14c64:	00004206 	br	14d70 <OSQAccept+0x130>
    }
    if (pevent == (OS_EVENT *)0) {               /* Validate 'pevent'                                  */
   14c68:	e0bffe17 	ldw	r2,-8(fp)
   14c6c:	1000051e 	bne	r2,zero,14c84 <OSQAccept+0x44>
        *perr = OS_ERR_PEVENT_NULL;
   14c70:	e0bfff17 	ldw	r2,-4(fp)
   14c74:	00c00104 	movi	r3,4
   14c78:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
   14c7c:	0005883a 	mov	r2,zero
   14c80:	00003b06 	br	14d70 <OSQAccept+0x130>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {/* Validate event block type                          */
   14c84:	e0bffe17 	ldw	r2,-8(fp)
   14c88:	10800003 	ldbu	r2,0(r2)
   14c8c:	10803fcc 	andi	r2,r2,255
   14c90:	108000a0 	cmpeqi	r2,r2,2
   14c94:	1000051e 	bne	r2,zero,14cac <OSQAccept+0x6c>
        *perr = OS_ERR_EVENT_TYPE;
   14c98:	e0bfff17 	ldw	r2,-4(fp)
   14c9c:	00c00044 	movi	r3,1
   14ca0:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
   14ca4:	0005883a 	mov	r2,zero
   14ca8:	00003106 	br	14d70 <OSQAccept+0x130>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   14cac:	0005303a 	rdctl	r2,status
   14cb0:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   14cb4:	e0fffc17 	ldw	r3,-16(fp)
   14cb8:	00bfff84 	movi	r2,-2
   14cbc:	1884703a 	and	r2,r3,r2
   14cc0:	1001703a 	wrctl	status,r2
  
  return context;
   14cc4:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
   14cc8:	e0bffa15 	stw	r2,-24(fp)
    pq = (OS_Q *)pevent->OSEventPtr;             /* Point at queue control block                       */
   14ccc:	e0bffe17 	ldw	r2,-8(fp)
   14cd0:	10800117 	ldw	r2,4(r2)
   14cd4:	e0bffb15 	stw	r2,-20(fp)
    if (pq->OSQEntries > 0) {                    /* See if any messages in the queue                   */
   14cd8:	e0bffb17 	ldw	r2,-20(fp)
   14cdc:	1080058b 	ldhu	r2,22(r2)
   14ce0:	10bfffcc 	andi	r2,r2,65535
   14ce4:	10001926 	beq	r2,zero,14d4c <OSQAccept+0x10c>
        pmsg = *pq->OSQOut++;                    /* Yes, extract oldest message from the queue         */
   14ce8:	e0bffb17 	ldw	r2,-20(fp)
   14cec:	10800417 	ldw	r2,16(r2)
   14cf0:	11000104 	addi	r4,r2,4
   14cf4:	e0fffb17 	ldw	r3,-20(fp)
   14cf8:	19000415 	stw	r4,16(r3)
   14cfc:	10800017 	ldw	r2,0(r2)
   14d00:	e0bff915 	stw	r2,-28(fp)
        pq->OSQEntries--;                        /* Update the number of entries in the queue          */
   14d04:	e0bffb17 	ldw	r2,-20(fp)
   14d08:	1080058b 	ldhu	r2,22(r2)
   14d0c:	10bfffc4 	addi	r2,r2,-1
   14d10:	1007883a 	mov	r3,r2
   14d14:	e0bffb17 	ldw	r2,-20(fp)
   14d18:	10c0058d 	sth	r3,22(r2)
        if (pq->OSQOut == pq->OSQEnd) {          /* Wrap OUT pointer if we are at the end of the queue */
   14d1c:	e0bffb17 	ldw	r2,-20(fp)
   14d20:	10c00417 	ldw	r3,16(r2)
   14d24:	e0bffb17 	ldw	r2,-20(fp)
   14d28:	10800217 	ldw	r2,8(r2)
   14d2c:	1880041e 	bne	r3,r2,14d40 <OSQAccept+0x100>
            pq->OSQOut = pq->OSQStart;
   14d30:	e0bffb17 	ldw	r2,-20(fp)
   14d34:	10c00117 	ldw	r3,4(r2)
   14d38:	e0bffb17 	ldw	r2,-20(fp)
   14d3c:	10c00415 	stw	r3,16(r2)
        }
        *perr = OS_ERR_NONE;
   14d40:	e0bfff17 	ldw	r2,-4(fp)
   14d44:	10000005 	stb	zero,0(r2)
   14d48:	00000406 	br	14d5c <OSQAccept+0x11c>
    } else {
        *perr = OS_ERR_Q_EMPTY;
   14d4c:	e0bfff17 	ldw	r2,-4(fp)
   14d50:	00c007c4 	movi	r3,31
   14d54:	10c00005 	stb	r3,0(r2)
        pmsg  = (void *)0;                       /* Queue is empty                                     */
   14d58:	e03ff915 	stw	zero,-28(fp)
   14d5c:	e0bffa17 	ldw	r2,-24(fp)
   14d60:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   14d64:	e0bffd17 	ldw	r2,-12(fp)
   14d68:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (pmsg);                               /* Return message received (or NULL)                  */
   14d6c:	e0bff917 	ldw	r2,-28(fp)
}
   14d70:	e037883a 	mov	sp,fp
   14d74:	df000017 	ldw	fp,0(sp)
   14d78:	dec00104 	addi	sp,sp,4
   14d7c:	f800283a 	ret

00014d80 <OSQCreate>:
*              == (OS_EVENT *)0  if no event control blocks were available or an error was detected
*********************************************************************************************************
*/

OS_EVENT  *OSQCreate (void **start, INT16U size)
{
   14d80:	defff404 	addi	sp,sp,-48
   14d84:	dfc00b15 	stw	ra,44(sp)
   14d88:	df000a15 	stw	fp,40(sp)
   14d8c:	df000a04 	addi	fp,sp,40
   14d90:	e13ffe15 	stw	r4,-8(fp)
   14d94:	2805883a 	mov	r2,r5
   14d98:	e0bfff0d 	sth	r2,-4(fp)
    OS_EVENT  *pevent;
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   14d9c:	e03ff715 	stw	zero,-36(fp)
#endif



    if (OSIntNesting > 0) {                      /* See if called from ISR ...                         */
   14da0:	008000b4 	movhi	r2,2
   14da4:	10931704 	addi	r2,r2,19548
   14da8:	10800003 	ldbu	r2,0(r2)
   14dac:	10803fcc 	andi	r2,r2,255
   14db0:	10000226 	beq	r2,zero,14dbc <OSQCreate+0x3c>
        return ((OS_EVENT *)0);                  /* ... can't CREATE from an ISR                       */
   14db4:	0005883a 	mov	r2,zero
   14db8:	00006b06 	br	14f68 <OSQCreate+0x1e8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   14dbc:	0005303a 	rdctl	r2,status
   14dc0:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   14dc4:	e0fff917 	ldw	r3,-28(fp)
   14dc8:	00bfff84 	movi	r2,-2
   14dcc:	1884703a 	and	r2,r3,r2
   14dd0:	1001703a 	wrctl	status,r2
  
  return context;
   14dd4:	e0bff917 	ldw	r2,-28(fp)
    }
    OS_ENTER_CRITICAL();
   14dd8:	e0bff715 	stw	r2,-36(fp)
    pevent = OSEventFreeList;                    /* Get next free event control block                  */
   14ddc:	008000b4 	movhi	r2,2
   14de0:	10931604 	addi	r2,r2,19544
   14de4:	10800017 	ldw	r2,0(r2)
   14de8:	e0bff615 	stw	r2,-40(fp)
    if (OSEventFreeList != (OS_EVENT *)0) {      /* See if pool of free ECB pool was empty             */
   14dec:	008000b4 	movhi	r2,2
   14df0:	10931604 	addi	r2,r2,19544
   14df4:	10800017 	ldw	r2,0(r2)
   14df8:	10000726 	beq	r2,zero,14e18 <OSQCreate+0x98>
        OSEventFreeList = (OS_EVENT *)OSEventFreeList->OSEventPtr;
   14dfc:	008000b4 	movhi	r2,2
   14e00:	10931604 	addi	r2,r2,19544
   14e04:	10800017 	ldw	r2,0(r2)
   14e08:	10c00117 	ldw	r3,4(r2)
   14e0c:	008000b4 	movhi	r2,2
   14e10:	10931604 	addi	r2,r2,19544
   14e14:	10c00015 	stw	r3,0(r2)
   14e18:	e0bff717 	ldw	r2,-36(fp)
   14e1c:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   14e20:	e0bffa17 	ldw	r2,-24(fp)
   14e24:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    if (pevent != (OS_EVENT *)0) {               /* See if we have an event control block              */
   14e28:	e0bff617 	ldw	r2,-40(fp)
   14e2c:	10004d26 	beq	r2,zero,14f64 <OSQCreate+0x1e4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   14e30:	0005303a 	rdctl	r2,status
   14e34:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   14e38:	e0fffb17 	ldw	r3,-20(fp)
   14e3c:	00bfff84 	movi	r2,-2
   14e40:	1884703a 	and	r2,r3,r2
   14e44:	1001703a 	wrctl	status,r2
  
  return context;
   14e48:	e0bffb17 	ldw	r2,-20(fp)
        OS_ENTER_CRITICAL();
   14e4c:	e0bff715 	stw	r2,-36(fp)
        pq = OSQFreeList;                        /* Get a free queue control block                     */
   14e50:	008000b4 	movhi	r2,2
   14e54:	10931404 	addi	r2,r2,19536
   14e58:	10800017 	ldw	r2,0(r2)
   14e5c:	e0bff815 	stw	r2,-32(fp)
        if (pq != (OS_Q *)0) {                   /* Were we able to get a queue control block ?        */
   14e60:	e0bff817 	ldw	r2,-32(fp)
   14e64:	10003126 	beq	r2,zero,14f2c <OSQCreate+0x1ac>
            OSQFreeList            = OSQFreeList->OSQPtr; /* Yes, Adjust free list pointer to next free*/
   14e68:	008000b4 	movhi	r2,2
   14e6c:	10931404 	addi	r2,r2,19536
   14e70:	10800017 	ldw	r2,0(r2)
   14e74:	10c00017 	ldw	r3,0(r2)
   14e78:	008000b4 	movhi	r2,2
   14e7c:	10931404 	addi	r2,r2,19536
   14e80:	10c00015 	stw	r3,0(r2)
   14e84:	e0bff717 	ldw	r2,-36(fp)
   14e88:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   14e8c:	e0bffc17 	ldw	r2,-16(fp)
   14e90:	1001703a 	wrctl	status,r2
            OS_EXIT_CRITICAL();
            pq->OSQStart           = start;               /*      Initialize the queue                 */
   14e94:	e0bff817 	ldw	r2,-32(fp)
   14e98:	e0fffe17 	ldw	r3,-8(fp)
   14e9c:	10c00115 	stw	r3,4(r2)
            pq->OSQEnd             = &start[size];
   14ea0:	e0bfff0b 	ldhu	r2,-4(fp)
   14ea4:	1085883a 	add	r2,r2,r2
   14ea8:	1085883a 	add	r2,r2,r2
   14eac:	1007883a 	mov	r3,r2
   14eb0:	e0bffe17 	ldw	r2,-8(fp)
   14eb4:	10c7883a 	add	r3,r2,r3
   14eb8:	e0bff817 	ldw	r2,-32(fp)
   14ebc:	10c00215 	stw	r3,8(r2)
            pq->OSQIn              = start;
   14ec0:	e0bff817 	ldw	r2,-32(fp)
   14ec4:	e0fffe17 	ldw	r3,-8(fp)
   14ec8:	10c00315 	stw	r3,12(r2)
            pq->OSQOut             = start;
   14ecc:	e0bff817 	ldw	r2,-32(fp)
   14ed0:	e0fffe17 	ldw	r3,-8(fp)
   14ed4:	10c00415 	stw	r3,16(r2)
            pq->OSQSize            = size;
   14ed8:	e0bff817 	ldw	r2,-32(fp)
   14edc:	e0ffff0b 	ldhu	r3,-4(fp)
   14ee0:	10c0050d 	sth	r3,20(r2)
            pq->OSQEntries         = 0;
   14ee4:	e0bff817 	ldw	r2,-32(fp)
   14ee8:	1000058d 	sth	zero,22(r2)
            pevent->OSEventType    = OS_EVENT_TYPE_Q;
   14eec:	e0bff617 	ldw	r2,-40(fp)
   14ef0:	00c00084 	movi	r3,2
   14ef4:	10c00005 	stb	r3,0(r2)
            pevent->OSEventCnt     = 0;
   14ef8:	e0bff617 	ldw	r2,-40(fp)
   14efc:	1000020d 	sth	zero,8(r2)
            pevent->OSEventPtr     = pq;
   14f00:	e0bff617 	ldw	r2,-40(fp)
   14f04:	e0fff817 	ldw	r3,-32(fp)
   14f08:	10c00115 	stw	r3,4(r2)
#if OS_EVENT_NAME_SIZE > 1
            pevent->OSEventName[0] = '?';                  /* Unknown name                             */
   14f0c:	e0bff617 	ldw	r2,-40(fp)
   14f10:	00c00fc4 	movi	r3,63
   14f14:	10c00385 	stb	r3,14(r2)
            pevent->OSEventName[1] = OS_ASCII_NUL;
   14f18:	e0bff617 	ldw	r2,-40(fp)
   14f1c:	100003c5 	stb	zero,15(r2)
#endif
            OS_EventWaitListInit(pevent);                 /*      Initalize the wait list              */
   14f20:	e13ff617 	ldw	r4,-40(fp)
   14f24:	0011fc40 	call	11fc4 <OS_EventWaitListInit>
   14f28:	00000e06 	br	14f64 <OSQCreate+0x1e4>
        } else {
            pevent->OSEventPtr = (void *)OSEventFreeList; /* No,  Return event control block on error  */
   14f2c:	008000b4 	movhi	r2,2
   14f30:	10931604 	addi	r2,r2,19544
   14f34:	10c00017 	ldw	r3,0(r2)
   14f38:	e0bff617 	ldw	r2,-40(fp)
   14f3c:	10c00115 	stw	r3,4(r2)
            OSEventFreeList    = pevent;
   14f40:	008000b4 	movhi	r2,2
   14f44:	10931604 	addi	r2,r2,19544
   14f48:	e0fff617 	ldw	r3,-40(fp)
   14f4c:	10c00015 	stw	r3,0(r2)
   14f50:	e0bff717 	ldw	r2,-36(fp)
   14f54:	e0bffd15 	stw	r2,-12(fp)
   14f58:	e0bffd17 	ldw	r2,-12(fp)
   14f5c:	1001703a 	wrctl	status,r2
            OS_EXIT_CRITICAL();
            pevent = (OS_EVENT *)0;
   14f60:	e03ff615 	stw	zero,-40(fp)
        }
    }
    return (pevent);
   14f64:	e0bff617 	ldw	r2,-40(fp)
}
   14f68:	e037883a 	mov	sp,fp
   14f6c:	dfc00117 	ldw	ra,4(sp)
   14f70:	df000017 	ldw	fp,0(sp)
   14f74:	dec00204 	addi	sp,sp,8
   14f78:	f800283a 	ret

00014f7c <OSQDel>:
*********************************************************************************************************
*/

#if OS_Q_DEL_EN > 0
OS_EVENT  *OSQDel (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
   14f7c:	defff204 	addi	sp,sp,-56
   14f80:	dfc00d15 	stw	ra,52(sp)
   14f84:	df000c15 	stw	fp,48(sp)
   14f88:	df000c04 	addi	fp,sp,48
   14f8c:	e13ffd15 	stw	r4,-12(fp)
   14f90:	2805883a 	mov	r2,r5
   14f94:	e1bfff15 	stw	r6,-4(fp)
   14f98:	e0bffe05 	stb	r2,-8(fp)
    BOOLEAN    tasks_waiting;
    OS_EVENT  *pevent_return;
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
   14f9c:	e03ff615 	stw	zero,-40(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
   14fa0:	e0bfff17 	ldw	r2,-4(fp)
   14fa4:	1000021e 	bne	r2,zero,14fb0 <OSQDel+0x34>
        return (pevent);
   14fa8:	e0bffd17 	ldw	r2,-12(fp)
   14fac:	0000a006 	br	15230 <OSQDel+0x2b4>
    }
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
   14fb0:	e0bffd17 	ldw	r2,-12(fp)
   14fb4:	1000051e 	bne	r2,zero,14fcc <OSQDel+0x50>
        *perr = OS_ERR_PEVENT_NULL;
   14fb8:	e0bfff17 	ldw	r2,-4(fp)
   14fbc:	00c00104 	movi	r3,4
   14fc0:	10c00005 	stb	r3,0(r2)
        return (pevent);
   14fc4:	e0bffd17 	ldw	r2,-12(fp)
   14fc8:	00009906 	br	15230 <OSQDel+0x2b4>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {          /* Validate event block type                */
   14fcc:	e0bffd17 	ldw	r2,-12(fp)
   14fd0:	10800003 	ldbu	r2,0(r2)
   14fd4:	10803fcc 	andi	r2,r2,255
   14fd8:	108000a0 	cmpeqi	r2,r2,2
   14fdc:	1000051e 	bne	r2,zero,14ff4 <OSQDel+0x78>
        *perr = OS_ERR_EVENT_TYPE;
   14fe0:	e0bfff17 	ldw	r2,-4(fp)
   14fe4:	00c00044 	movi	r3,1
   14fe8:	10c00005 	stb	r3,0(r2)
        return (pevent);
   14fec:	e0bffd17 	ldw	r2,-12(fp)
   14ff0:	00008f06 	br	15230 <OSQDel+0x2b4>
    }
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
   14ff4:	008000b4 	movhi	r2,2
   14ff8:	10931704 	addi	r2,r2,19548
   14ffc:	10800003 	ldbu	r2,0(r2)
   15000:	10803fcc 	andi	r2,r2,255
   15004:	10000526 	beq	r2,zero,1501c <OSQDel+0xa0>
        *perr = OS_ERR_DEL_ISR;                            /* ... can't DELETE from an ISR             */
   15008:	e0bfff17 	ldw	r2,-4(fp)
   1500c:	00c003c4 	movi	r3,15
   15010:	10c00005 	stb	r3,0(r2)
        return (pevent);
   15014:	e0bffd17 	ldw	r2,-12(fp)
   15018:	00008506 	br	15230 <OSQDel+0x2b4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1501c:	0005303a 	rdctl	r2,status
   15020:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   15024:	e0fff817 	ldw	r3,-32(fp)
   15028:	00bfff84 	movi	r2,-2
   1502c:	1884703a 	and	r2,r3,r2
   15030:	1001703a 	wrctl	status,r2
  
  return context;
   15034:	e0bff817 	ldw	r2,-32(fp)
    }
    OS_ENTER_CRITICAL();
   15038:	e0bff615 	stw	r2,-40(fp)
    if (pevent->OSEventGrp != 0) {                         /* See if any tasks waiting on queue        */
   1503c:	e0bffd17 	ldw	r2,-12(fp)
   15040:	10800283 	ldbu	r2,10(r2)
   15044:	10803fcc 	andi	r2,r2,255
   15048:	10000326 	beq	r2,zero,15058 <OSQDel+0xdc>
        tasks_waiting = OS_TRUE;                           /* Yes                                      */
   1504c:	00800044 	movi	r2,1
   15050:	e0bff405 	stb	r2,-48(fp)
   15054:	00000106 	br	1505c <OSQDel+0xe0>
    } else {
        tasks_waiting = OS_FALSE;                          /* No                                       */
   15058:	e03ff405 	stb	zero,-48(fp)
    }
    switch (opt) {
   1505c:	e0bffe03 	ldbu	r2,-8(fp)
   15060:	10000326 	beq	r2,zero,15070 <OSQDel+0xf4>
   15064:	10800060 	cmpeqi	r2,r2,1
   15068:	1000381e 	bne	r2,zero,1514c <OSQDel+0x1d0>
   1506c:	00006506 	br	15204 <OSQDel+0x288>
        case OS_DEL_NO_PEND:                               /* Delete queue only if no task waiting     */
             if (tasks_waiting == OS_FALSE) {
   15070:	e0bff403 	ldbu	r2,-48(fp)
   15074:	1000261e 	bne	r2,zero,15110 <OSQDel+0x194>
#if OS_EVENT_NAME_SIZE > 1
                 pevent->OSEventName[0] = '?';             /* Unknown name                             */
   15078:	e0bffd17 	ldw	r2,-12(fp)
   1507c:	00c00fc4 	movi	r3,63
   15080:	10c00385 	stb	r3,14(r2)
                 pevent->OSEventName[1] = OS_ASCII_NUL;
   15084:	e0bffd17 	ldw	r2,-12(fp)
   15088:	100003c5 	stb	zero,15(r2)
#endif
                 pq                     = (OS_Q *)pevent->OSEventPtr;  /* Return OS_Q to free list     */
   1508c:	e0bffd17 	ldw	r2,-12(fp)
   15090:	10800117 	ldw	r2,4(r2)
   15094:	e0bff715 	stw	r2,-36(fp)
                 pq->OSQPtr             = OSQFreeList;
   15098:	008000b4 	movhi	r2,2
   1509c:	10931404 	addi	r2,r2,19536
   150a0:	10c00017 	ldw	r3,0(r2)
   150a4:	e0bff717 	ldw	r2,-36(fp)
   150a8:	10c00015 	stw	r3,0(r2)
                 OSQFreeList            = pq;
   150ac:	008000b4 	movhi	r2,2
   150b0:	10931404 	addi	r2,r2,19536
   150b4:	e0fff717 	ldw	r3,-36(fp)
   150b8:	10c00015 	stw	r3,0(r2)
                 pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
   150bc:	e0bffd17 	ldw	r2,-12(fp)
   150c0:	10000005 	stb	zero,0(r2)
                 pevent->OSEventPtr     = OSEventFreeList; /* Return Event Control Block to free list  */
   150c4:	008000b4 	movhi	r2,2
   150c8:	10931604 	addi	r2,r2,19544
   150cc:	10c00017 	ldw	r3,0(r2)
   150d0:	e0bffd17 	ldw	r2,-12(fp)
   150d4:	10c00115 	stw	r3,4(r2)
                 pevent->OSEventCnt     = 0;
   150d8:	e0bffd17 	ldw	r2,-12(fp)
   150dc:	1000020d 	sth	zero,8(r2)
                 OSEventFreeList        = pevent;          /* Get next free event control block        */
   150e0:	008000b4 	movhi	r2,2
   150e4:	10931604 	addi	r2,r2,19544
   150e8:	e0fffd17 	ldw	r3,-12(fp)
   150ec:	10c00015 	stw	r3,0(r2)
   150f0:	e0bff617 	ldw	r2,-40(fp)
   150f4:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   150f8:	e0bff917 	ldw	r2,-28(fp)
   150fc:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_NONE;
   15100:	e0bfff17 	ldw	r2,-4(fp)
   15104:	10000005 	stb	zero,0(r2)
                 pevent_return          = (OS_EVENT *)0;   /* Queue has been deleted                   */
   15108:	e03ff515 	stw	zero,-44(fp)
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_TASK_WAITING;
                 pevent_return          = pevent;
             }
             break;
   1510c:	00004706 	br	1522c <OSQDel+0x2b0>
   15110:	e0bff617 	ldw	r2,-40(fp)
   15114:	e0bffa15 	stw	r2,-24(fp)
   15118:	e0bffa17 	ldw	r2,-24(fp)
   1511c:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_NONE;
                 pevent_return          = (OS_EVENT *)0;   /* Queue has been deleted                   */
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_TASK_WAITING;
   15120:	e0bfff17 	ldw	r2,-4(fp)
   15124:	00c01244 	movi	r3,73
   15128:	10c00005 	stb	r3,0(r2)
                 pevent_return          = pevent;
   1512c:	e0bffd17 	ldw	r2,-12(fp)
   15130:	e0bff515 	stw	r2,-44(fp)
             }
             break;
   15134:	00003d06 	br	1522c <OSQDel+0x2b0>

        case OS_DEL_ALWAYS:                                /* Always delete the queue                  */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for queue        */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_OK);
   15138:	e13ffd17 	ldw	r4,-12(fp)
   1513c:	000b883a 	mov	r5,zero
   15140:	01800104 	movi	r6,4
   15144:	000f883a 	mov	r7,zero
   15148:	0011a240 	call	11a24 <OS_EventTaskRdy>
                 pevent_return          = pevent;
             }
             break;

        case OS_DEL_ALWAYS:                                /* Always delete the queue                  */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for queue        */
   1514c:	e0bffd17 	ldw	r2,-12(fp)
   15150:	10800283 	ldbu	r2,10(r2)
   15154:	10803fcc 	andi	r2,r2,255
   15158:	103ff71e 	bne	r2,zero,15138 <__alt_mem_Flash_flash_data+0xf4015138>
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_OK);
             }
#if OS_EVENT_NAME_SIZE > 1
             pevent->OSEventName[0] = '?';                 /* Unknown name                             */
   1515c:	e0bffd17 	ldw	r2,-12(fp)
   15160:	00c00fc4 	movi	r3,63
   15164:	10c00385 	stb	r3,14(r2)
             pevent->OSEventName[1] = OS_ASCII_NUL;
   15168:	e0bffd17 	ldw	r2,-12(fp)
   1516c:	100003c5 	stb	zero,15(r2)
#endif
             pq                     = (OS_Q *)pevent->OSEventPtr;   /* Return OS_Q to free list        */
   15170:	e0bffd17 	ldw	r2,-12(fp)
   15174:	10800117 	ldw	r2,4(r2)
   15178:	e0bff715 	stw	r2,-36(fp)
             pq->OSQPtr             = OSQFreeList;
   1517c:	008000b4 	movhi	r2,2
   15180:	10931404 	addi	r2,r2,19536
   15184:	10c00017 	ldw	r3,0(r2)
   15188:	e0bff717 	ldw	r2,-36(fp)
   1518c:	10c00015 	stw	r3,0(r2)
             OSQFreeList            = pq;
   15190:	008000b4 	movhi	r2,2
   15194:	10931404 	addi	r2,r2,19536
   15198:	e0fff717 	ldw	r3,-36(fp)
   1519c:	10c00015 	stw	r3,0(r2)
             pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
   151a0:	e0bffd17 	ldw	r2,-12(fp)
   151a4:	10000005 	stb	zero,0(r2)
             pevent->OSEventPtr     = OSEventFreeList;     /* Return Event Control Block to free list  */
   151a8:	008000b4 	movhi	r2,2
   151ac:	10931604 	addi	r2,r2,19544
   151b0:	10c00017 	ldw	r3,0(r2)
   151b4:	e0bffd17 	ldw	r2,-12(fp)
   151b8:	10c00115 	stw	r3,4(r2)
             pevent->OSEventCnt     = 0;
   151bc:	e0bffd17 	ldw	r2,-12(fp)
   151c0:	1000020d 	sth	zero,8(r2)
             OSEventFreeList        = pevent;              /* Get next free event control block        */
   151c4:	008000b4 	movhi	r2,2
   151c8:	10931604 	addi	r2,r2,19544
   151cc:	e0fffd17 	ldw	r3,-12(fp)
   151d0:	10c00015 	stw	r3,0(r2)
   151d4:	e0bff617 	ldw	r2,-40(fp)
   151d8:	e0bffb15 	stw	r2,-20(fp)
   151dc:	e0bffb17 	ldw	r2,-20(fp)
   151e0:	1001703a 	wrctl	status,r2
             OS_EXIT_CRITICAL();
             if (tasks_waiting == OS_TRUE) {               /* Reschedule only if task(s) were waiting  */
   151e4:	e0bff403 	ldbu	r2,-48(fp)
   151e8:	10800058 	cmpnei	r2,r2,1
   151ec:	1000011e 	bne	r2,zero,151f4 <OSQDel+0x278>
                 OS_Sched();                               /* Find highest priority task ready to run  */
   151f0:	001243c0 	call	1243c <OS_Sched>
             }
             *perr                  = OS_ERR_NONE;
   151f4:	e0bfff17 	ldw	r2,-4(fp)
   151f8:	10000005 	stb	zero,0(r2)
             pevent_return          = (OS_EVENT *)0;       /* Queue has been deleted                   */
   151fc:	e03ff515 	stw	zero,-44(fp)
             break;
   15200:	00000a06 	br	1522c <OSQDel+0x2b0>
   15204:	e0bff617 	ldw	r2,-40(fp)
   15208:	e0bffc15 	stw	r2,-16(fp)
   1520c:	e0bffc17 	ldw	r2,-16(fp)
   15210:	1001703a 	wrctl	status,r2

        default:
             OS_EXIT_CRITICAL();
             *perr                  = OS_ERR_INVALID_OPT;
   15214:	e0bfff17 	ldw	r2,-4(fp)
   15218:	00c001c4 	movi	r3,7
   1521c:	10c00005 	stb	r3,0(r2)
             pevent_return          = pevent;
   15220:	e0bffd17 	ldw	r2,-12(fp)
   15224:	e0bff515 	stw	r2,-44(fp)
             break;
   15228:	0001883a 	nop
    }
    return (pevent_return);
   1522c:	e0bff517 	ldw	r2,-44(fp)
}
   15230:	e037883a 	mov	sp,fp
   15234:	dfc00117 	ldw	ra,4(sp)
   15238:	df000017 	ldw	fp,0(sp)
   1523c:	dec00204 	addi	sp,sp,8
   15240:	f800283a 	ret

00015244 <OSQFlush>:
*********************************************************************************************************
*/

#if OS_Q_FLUSH_EN > 0
INT8U  OSQFlush (OS_EVENT *pevent)
{
   15244:	defffa04 	addi	sp,sp,-24
   15248:	df000515 	stw	fp,20(sp)
   1524c:	df000504 	addi	fp,sp,20
   15250:	e13fff15 	stw	r4,-4(fp)
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   15254:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
   15258:	e0bfff17 	ldw	r2,-4(fp)
   1525c:	1000021e 	bne	r2,zero,15268 <OSQFlush+0x24>
        return (OS_ERR_PEVENT_NULL);
   15260:	00800104 	movi	r2,4
   15264:	00002106 	br	152ec <OSQFlush+0xa8>
    }
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {     /* Validate event block type                     */
   15268:	e0bfff17 	ldw	r2,-4(fp)
   1526c:	10800003 	ldbu	r2,0(r2)
   15270:	10803fcc 	andi	r2,r2,255
   15274:	108000a0 	cmpeqi	r2,r2,2
   15278:	1000021e 	bne	r2,zero,15284 <OSQFlush+0x40>
        return (OS_ERR_EVENT_TYPE);
   1527c:	00800044 	movi	r2,1
   15280:	00001a06 	br	152ec <OSQFlush+0xa8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   15284:	0005303a 	rdctl	r2,status
   15288:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1528c:	e0fffd17 	ldw	r3,-12(fp)
   15290:	00bfff84 	movi	r2,-2
   15294:	1884703a 	and	r2,r3,r2
   15298:	1001703a 	wrctl	status,r2
  
  return context;
   1529c:	e0bffd17 	ldw	r2,-12(fp)
    }
#endif
    OS_ENTER_CRITICAL();
   152a0:	e0bffb15 	stw	r2,-20(fp)
    pq             = (OS_Q *)pevent->OSEventPtr;      /* Point to queue storage structure              */
   152a4:	e0bfff17 	ldw	r2,-4(fp)
   152a8:	10800117 	ldw	r2,4(r2)
   152ac:	e0bffc15 	stw	r2,-16(fp)
    pq->OSQIn      = pq->OSQStart;
   152b0:	e0bffc17 	ldw	r2,-16(fp)
   152b4:	10c00117 	ldw	r3,4(r2)
   152b8:	e0bffc17 	ldw	r2,-16(fp)
   152bc:	10c00315 	stw	r3,12(r2)
    pq->OSQOut     = pq->OSQStart;
   152c0:	e0bffc17 	ldw	r2,-16(fp)
   152c4:	10c00117 	ldw	r3,4(r2)
   152c8:	e0bffc17 	ldw	r2,-16(fp)
   152cc:	10c00415 	stw	r3,16(r2)
    pq->OSQEntries = 0;
   152d0:	e0bffc17 	ldw	r2,-16(fp)
   152d4:	1000058d 	sth	zero,22(r2)
   152d8:	e0bffb17 	ldw	r2,-20(fp)
   152dc:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   152e0:	e0bffe17 	ldw	r2,-8(fp)
   152e4:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
   152e8:	0005883a 	mov	r2,zero
}
   152ec:	e037883a 	mov	sp,fp
   152f0:	df000017 	ldw	fp,0(sp)
   152f4:	dec00104 	addi	sp,sp,4
   152f8:	f800283a 	ret

000152fc <OSQPend>:
* Note(s)    : As of V2.60, this function allows you to receive NULL pointer messages.
*********************************************************************************************************
*/

void  *OSQPend (OS_EVENT *pevent, INT16U timeout, INT8U *perr)
{
   152fc:	defff304 	addi	sp,sp,-52
   15300:	dfc00c15 	stw	ra,48(sp)
   15304:	df000b15 	stw	fp,44(sp)
   15308:	df000b04 	addi	fp,sp,44
   1530c:	e13ffd15 	stw	r4,-12(fp)
   15310:	2805883a 	mov	r2,r5
   15314:	e1bfff15 	stw	r6,-4(fp)
   15318:	e0bffe0d 	sth	r2,-8(fp)
    void      *pmsg;
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   1531c:	e03ff615 	stw	zero,-40(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
   15320:	e0bfff17 	ldw	r2,-4(fp)
   15324:	1000021e 	bne	r2,zero,15330 <OSQPend+0x34>
        return ((void *)0);
   15328:	0005883a 	mov	r2,zero
   1532c:	0000ad06 	br	155e4 <OSQPend+0x2e8>
    }
    if (pevent == (OS_EVENT *)0) {               /* Validate 'pevent'                                  */
   15330:	e0bffd17 	ldw	r2,-12(fp)
   15334:	1000051e 	bne	r2,zero,1534c <OSQPend+0x50>
        *perr = OS_ERR_PEVENT_NULL;
   15338:	e0bfff17 	ldw	r2,-4(fp)
   1533c:	00c00104 	movi	r3,4
   15340:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
   15344:	0005883a 	mov	r2,zero
   15348:	0000a606 	br	155e4 <OSQPend+0x2e8>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {/* Validate event block type                          */
   1534c:	e0bffd17 	ldw	r2,-12(fp)
   15350:	10800003 	ldbu	r2,0(r2)
   15354:	10803fcc 	andi	r2,r2,255
   15358:	108000a0 	cmpeqi	r2,r2,2
   1535c:	1000051e 	bne	r2,zero,15374 <OSQPend+0x78>
        *perr = OS_ERR_EVENT_TYPE;
   15360:	e0bfff17 	ldw	r2,-4(fp)
   15364:	00c00044 	movi	r3,1
   15368:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
   1536c:	0005883a 	mov	r2,zero
   15370:	00009c06 	br	155e4 <OSQPend+0x2e8>
    }
    if (OSIntNesting > 0) {                      /* See if called from ISR ...                         */
   15374:	008000b4 	movhi	r2,2
   15378:	10931704 	addi	r2,r2,19548
   1537c:	10800003 	ldbu	r2,0(r2)
   15380:	10803fcc 	andi	r2,r2,255
   15384:	10000526 	beq	r2,zero,1539c <OSQPend+0xa0>
        *perr = OS_ERR_PEND_ISR;                 /* ... can't PEND from an ISR                         */
   15388:	e0bfff17 	ldw	r2,-4(fp)
   1538c:	00c00084 	movi	r3,2
   15390:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
   15394:	0005883a 	mov	r2,zero
   15398:	00009206 	br	155e4 <OSQPend+0x2e8>
    }
    if (OSLockNesting > 0) {                     /* See if called with scheduler locked ...            */
   1539c:	008000b4 	movhi	r2,2
   153a0:	10930904 	addi	r2,r2,19492
   153a4:	10800003 	ldbu	r2,0(r2)
   153a8:	10803fcc 	andi	r2,r2,255
   153ac:	10000526 	beq	r2,zero,153c4 <OSQPend+0xc8>
        *perr = OS_ERR_PEND_LOCKED;              /* ... can't PEND when locked                         */
   153b0:	e0bfff17 	ldw	r2,-4(fp)
   153b4:	00c00344 	movi	r3,13
   153b8:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
   153bc:	0005883a 	mov	r2,zero
   153c0:	00008806 	br	155e4 <OSQPend+0x2e8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   153c4:	0005303a 	rdctl	r2,status
   153c8:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   153cc:	e0fff817 	ldw	r3,-32(fp)
   153d0:	00bfff84 	movi	r2,-2
   153d4:	1884703a 	and	r2,r3,r2
   153d8:	1001703a 	wrctl	status,r2
  
  return context;
   153dc:	e0bff817 	ldw	r2,-32(fp)
    }
    OS_ENTER_CRITICAL();
   153e0:	e0bff615 	stw	r2,-40(fp)
    pq = (OS_Q *)pevent->OSEventPtr;             /* Point at queue control block                       */
   153e4:	e0bffd17 	ldw	r2,-12(fp)
   153e8:	10800117 	ldw	r2,4(r2)
   153ec:	e0bff715 	stw	r2,-36(fp)
    if (pq->OSQEntries > 0) {                    /* See if any messages in the queue                   */
   153f0:	e0bff717 	ldw	r2,-36(fp)
   153f4:	1080058b 	ldhu	r2,22(r2)
   153f8:	10bfffcc 	andi	r2,r2,65535
   153fc:	10001e26 	beq	r2,zero,15478 <OSQPend+0x17c>
        pmsg = *pq->OSQOut++;                    /* Yes, extract oldest message from the queue         */
   15400:	e0bff717 	ldw	r2,-36(fp)
   15404:	10800417 	ldw	r2,16(r2)
   15408:	11000104 	addi	r4,r2,4
   1540c:	e0fff717 	ldw	r3,-36(fp)
   15410:	19000415 	stw	r4,16(r3)
   15414:	10800017 	ldw	r2,0(r2)
   15418:	e0bff515 	stw	r2,-44(fp)
        pq->OSQEntries--;                        /* Update the number of entries in the queue          */
   1541c:	e0bff717 	ldw	r2,-36(fp)
   15420:	1080058b 	ldhu	r2,22(r2)
   15424:	10bfffc4 	addi	r2,r2,-1
   15428:	1007883a 	mov	r3,r2
   1542c:	e0bff717 	ldw	r2,-36(fp)
   15430:	10c0058d 	sth	r3,22(r2)
        if (pq->OSQOut == pq->OSQEnd) {          /* Wrap OUT pointer if we are at the end of the queue */
   15434:	e0bff717 	ldw	r2,-36(fp)
   15438:	10c00417 	ldw	r3,16(r2)
   1543c:	e0bff717 	ldw	r2,-36(fp)
   15440:	10800217 	ldw	r2,8(r2)
   15444:	1880041e 	bne	r3,r2,15458 <OSQPend+0x15c>
            pq->OSQOut = pq->OSQStart;
   15448:	e0bff717 	ldw	r2,-36(fp)
   1544c:	10c00117 	ldw	r3,4(r2)
   15450:	e0bff717 	ldw	r2,-36(fp)
   15454:	10c00415 	stw	r3,16(r2)
   15458:	e0bff617 	ldw	r2,-40(fp)
   1545c:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   15460:	e0bff917 	ldw	r2,-28(fp)
   15464:	1001703a 	wrctl	status,r2
        }
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_NONE;
   15468:	e0bfff17 	ldw	r2,-4(fp)
   1546c:	10000005 	stb	zero,0(r2)
        return (pmsg);                           /* Return message received                            */
   15470:	e0bff517 	ldw	r2,-44(fp)
   15474:	00005b06 	br	155e4 <OSQPend+0x2e8>
    }
    OSTCBCur->OSTCBStat     |= OS_STAT_Q;        /* Task will have to pend for a message to be posted  */
   15478:	008000b4 	movhi	r2,2
   1547c:	10931804 	addi	r2,r2,19552
   15480:	10c00017 	ldw	r3,0(r2)
   15484:	008000b4 	movhi	r2,2
   15488:	10931804 	addi	r2,r2,19552
   1548c:	10800017 	ldw	r2,0(r2)
   15490:	10800c03 	ldbu	r2,48(r2)
   15494:	10800114 	ori	r2,r2,4
   15498:	18800c05 	stb	r2,48(r3)
    OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
   1549c:	008000b4 	movhi	r2,2
   154a0:	10931804 	addi	r2,r2,19552
   154a4:	10800017 	ldw	r2,0(r2)
   154a8:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBDly       = timeout;          /* Load timeout into TCB                              */
   154ac:	008000b4 	movhi	r2,2
   154b0:	10931804 	addi	r2,r2,19552
   154b4:	10800017 	ldw	r2,0(r2)
   154b8:	e0fffe0b 	ldhu	r3,-8(fp)
   154bc:	10c00b8d 	sth	r3,46(r2)
    OS_EventTaskWait(pevent);                    /* Suspend task until event or timeout occurs         */
   154c0:	e13ffd17 	ldw	r4,-12(fp)
   154c4:	0011bbc0 	call	11bbc <OS_EventTaskWait>
   154c8:	e0bff617 	ldw	r2,-40(fp)
   154cc:	e0bffa15 	stw	r2,-24(fp)
   154d0:	e0bffa17 	ldw	r2,-24(fp)
   154d4:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    OS_Sched();                                  /* Find next highest priority task ready to run       */
   154d8:	001243c0 	call	1243c <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   154dc:	0005303a 	rdctl	r2,status
   154e0:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   154e4:	e0fffb17 	ldw	r3,-20(fp)
   154e8:	00bfff84 	movi	r2,-2
   154ec:	1884703a 	and	r2,r3,r2
   154f0:	1001703a 	wrctl	status,r2
  
  return context;
   154f4:	e0bffb17 	ldw	r2,-20(fp)
    OS_ENTER_CRITICAL();
   154f8:	e0bff615 	stw	r2,-40(fp)
    switch (OSTCBCur->OSTCBStatPend) {                /* See if we timed-out or aborted                */
   154fc:	008000b4 	movhi	r2,2
   15500:	10931804 	addi	r2,r2,19552
   15504:	10800017 	ldw	r2,0(r2)
   15508:	10800c43 	ldbu	r2,49(r2)
   1550c:	10803fcc 	andi	r2,r2,255
   15510:	10000326 	beq	r2,zero,15520 <OSQPend+0x224>
   15514:	108000a0 	cmpeqi	r2,r2,2
   15518:	1000091e 	bne	r2,zero,15540 <OSQPend+0x244>
   1551c:	00000d06 	br	15554 <OSQPend+0x258>
        case OS_STAT_PEND_OK:                         /* Extract message from TCB (Put there by QPost) */
             pmsg =  OSTCBCur->OSTCBMsg;
   15520:	008000b4 	movhi	r2,2
   15524:	10931804 	addi	r2,r2,19552
   15528:	10800017 	ldw	r2,0(r2)
   1552c:	10800917 	ldw	r2,36(r2)
   15530:	e0bff515 	stw	r2,-44(fp)
            *perr =  OS_ERR_NONE;
   15534:	e0bfff17 	ldw	r2,-4(fp)
   15538:	10000005 	stb	zero,0(r2)
             break;
   1553c:	00001006 	br	15580 <OSQPend+0x284>

        case OS_STAT_PEND_ABORT:
             pmsg = (void *)0;
   15540:	e03ff515 	stw	zero,-44(fp)
            *perr =  OS_ERR_PEND_ABORT;               /* Indicate that we aborted                      */
   15544:	e0bfff17 	ldw	r2,-4(fp)
   15548:	00c00384 	movi	r3,14
   1554c:	10c00005 	stb	r3,0(r2)
             break;
   15550:	00000b06 	br	15580 <OSQPend+0x284>

        case OS_STAT_PEND_TO:
        default:
             OS_EventTaskRemove(OSTCBCur, pevent);
   15554:	008000b4 	movhi	r2,2
   15558:	10931804 	addi	r2,r2,19552
   1555c:	10800017 	ldw	r2,0(r2)
   15560:	1009883a 	mov	r4,r2
   15564:	e17ffd17 	ldw	r5,-12(fp)
   15568:	0011e140 	call	11e14 <OS_EventTaskRemove>
             pmsg = (void *)0;
   1556c:	e03ff515 	stw	zero,-44(fp)
            *perr =  OS_ERR_TIMEOUT;                  /* Indicate that we didn't get event within TO   */
   15570:	e0bfff17 	ldw	r2,-4(fp)
   15574:	00c00284 	movi	r3,10
   15578:	10c00005 	stb	r3,0(r2)
             break;
   1557c:	0001883a 	nop
    }
    OSTCBCur->OSTCBStat          =  OS_STAT_RDY;      /* Set   task  status to ready                   */
   15580:	008000b4 	movhi	r2,2
   15584:	10931804 	addi	r2,r2,19552
   15588:	10800017 	ldw	r2,0(r2)
   1558c:	10000c05 	stb	zero,48(r2)
    OSTCBCur->OSTCBStatPend      =  OS_STAT_PEND_OK;  /* Clear pend  status                            */
   15590:	008000b4 	movhi	r2,2
   15594:	10931804 	addi	r2,r2,19552
   15598:	10800017 	ldw	r2,0(r2)
   1559c:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;    /* Clear event pointers                          */
   155a0:	008000b4 	movhi	r2,2
   155a4:	10931804 	addi	r2,r2,19552
   155a8:	10800017 	ldw	r2,0(r2)
   155ac:	10000715 	stw	zero,28(r2)
#if (OS_EVENT_MULTI_EN > 0)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
   155b0:	008000b4 	movhi	r2,2
   155b4:	10931804 	addi	r2,r2,19552
   155b8:	10800017 	ldw	r2,0(r2)
   155bc:	10000815 	stw	zero,32(r2)
#endif
    OSTCBCur->OSTCBMsg           = (void      *)0;    /* Clear  received message                       */
   155c0:	008000b4 	movhi	r2,2
   155c4:	10931804 	addi	r2,r2,19552
   155c8:	10800017 	ldw	r2,0(r2)
   155cc:	10000915 	stw	zero,36(r2)
   155d0:	e0bff617 	ldw	r2,-40(fp)
   155d4:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   155d8:	e0bffc17 	ldw	r2,-16(fp)
   155dc:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (pmsg);                                    /* Return received message                       */
   155e0:	e0bff517 	ldw	r2,-44(fp)
}
   155e4:	e037883a 	mov	sp,fp
   155e8:	dfc00117 	ldw	ra,4(sp)
   155ec:	df000017 	ldw	fp,0(sp)
   155f0:	dec00204 	addi	sp,sp,8
   155f4:	f800283a 	ret

000155f8 <OSQPendAbort>:
*********************************************************************************************************
*/

#if OS_Q_PEND_ABORT_EN > 0
INT8U  OSQPendAbort (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
   155f8:	defff604 	addi	sp,sp,-40
   155fc:	dfc00915 	stw	ra,36(sp)
   15600:	df000815 	stw	fp,32(sp)
   15604:	df000804 	addi	fp,sp,32
   15608:	e13ffd15 	stw	r4,-12(fp)
   1560c:	2805883a 	mov	r2,r5
   15610:	e1bfff15 	stw	r6,-4(fp)
   15614:	e0bffe05 	stb	r2,-8(fp)
    INT8U      nbr_tasks;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
   15618:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
   1561c:	e0bfff17 	ldw	r2,-4(fp)
   15620:	1000021e 	bne	r2,zero,1562c <OSQPendAbort+0x34>
        return (0);
   15624:	0005883a 	mov	r2,zero
   15628:	00004906 	br	15750 <OSQPendAbort+0x158>
    }
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
   1562c:	e0bffd17 	ldw	r2,-12(fp)
   15630:	1000051e 	bne	r2,zero,15648 <OSQPendAbort+0x50>
        *perr = OS_ERR_PEVENT_NULL;
   15634:	e0bfff17 	ldw	r2,-4(fp)
   15638:	00c00104 	movi	r3,4
   1563c:	10c00005 	stb	r3,0(r2)
        return (0);
   15640:	0005883a 	mov	r2,zero
   15644:	00004206 	br	15750 <OSQPendAbort+0x158>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {          /* Validate event block type                */
   15648:	e0bffd17 	ldw	r2,-12(fp)
   1564c:	10800003 	ldbu	r2,0(r2)
   15650:	10803fcc 	andi	r2,r2,255
   15654:	108000a0 	cmpeqi	r2,r2,2
   15658:	1000051e 	bne	r2,zero,15670 <OSQPendAbort+0x78>
        *perr = OS_ERR_EVENT_TYPE;
   1565c:	e0bfff17 	ldw	r2,-4(fp)
   15660:	00c00044 	movi	r3,1
   15664:	10c00005 	stb	r3,0(r2)
        return (0);
   15668:	0005883a 	mov	r2,zero
   1566c:	00003806 	br	15750 <OSQPendAbort+0x158>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   15670:	0005303a 	rdctl	r2,status
   15674:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   15678:	e0fffa17 	ldw	r3,-24(fp)
   1567c:	00bfff84 	movi	r2,-2
   15680:	1884703a 	and	r2,r3,r2
   15684:	1001703a 	wrctl	status,r2
  
  return context;
   15688:	e0bffa17 	ldw	r2,-24(fp)
    }
    OS_ENTER_CRITICAL();
   1568c:	e0bff915 	stw	r2,-28(fp)
    if (pevent->OSEventGrp != 0) {                         /* See if any task waiting on queue?        */
   15690:	e0bffd17 	ldw	r2,-12(fp)
   15694:	10800283 	ldbu	r2,10(r2)
   15698:	10803fcc 	andi	r2,r2,255
   1569c:	10002526 	beq	r2,zero,15734 <OSQPendAbort+0x13c>
        nbr_tasks = 0;
   156a0:	e03ff805 	stb	zero,-32(fp)
        switch (opt) {
   156a4:	e0bffe03 	ldbu	r2,-8(fp)
   156a8:	10800060 	cmpeqi	r2,r2,1
   156ac:	10000e26 	beq	r2,zero,156e8 <OSQPendAbort+0xf0>
            case OS_PEND_OPT_BROADCAST:                    /* Do we need to abort ALL waiting tasks?   */
                 while (pevent->OSEventGrp != 0) {         /* Yes, ready ALL tasks waiting on queue    */
   156b0:	00000806 	br	156d4 <OSQPendAbort+0xdc>
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_ABORT);
   156b4:	e13ffd17 	ldw	r4,-12(fp)
   156b8:	000b883a 	mov	r5,zero
   156bc:	01800104 	movi	r6,4
   156c0:	01c00084 	movi	r7,2
   156c4:	0011a240 	call	11a24 <OS_EventTaskRdy>
                     nbr_tasks++;
   156c8:	e0bff803 	ldbu	r2,-32(fp)
   156cc:	10800044 	addi	r2,r2,1
   156d0:	e0bff805 	stb	r2,-32(fp)
    OS_ENTER_CRITICAL();
    if (pevent->OSEventGrp != 0) {                         /* See if any task waiting on queue?        */
        nbr_tasks = 0;
        switch (opt) {
            case OS_PEND_OPT_BROADCAST:                    /* Do we need to abort ALL waiting tasks?   */
                 while (pevent->OSEventGrp != 0) {         /* Yes, ready ALL tasks waiting on queue    */
   156d4:	e0bffd17 	ldw	r2,-12(fp)
   156d8:	10800283 	ldbu	r2,10(r2)
   156dc:	10803fcc 	andi	r2,r2,255
   156e0:	103ff41e 	bne	r2,zero,156b4 <__alt_mem_Flash_flash_data+0xf40156b4>
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_ABORT);
                     nbr_tasks++;
                 }
                 break;
   156e4:	00000906 	br	1570c <OSQPendAbort+0x114>
               
            case OS_PEND_OPT_NONE:
            default:                                       /* No,  ready HPT       waiting on queue    */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_ABORT);
   156e8:	e13ffd17 	ldw	r4,-12(fp)
   156ec:	000b883a 	mov	r5,zero
   156f0:	01800104 	movi	r6,4
   156f4:	01c00084 	movi	r7,2
   156f8:	0011a240 	call	11a24 <OS_EventTaskRdy>
                 nbr_tasks++;
   156fc:	e0bff803 	ldbu	r2,-32(fp)
   15700:	10800044 	addi	r2,r2,1
   15704:	e0bff805 	stb	r2,-32(fp)
                 break;
   15708:	0001883a 	nop
   1570c:	e0bff917 	ldw	r2,-28(fp)
   15710:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   15714:	e0bffb17 	ldw	r2,-20(fp)
   15718:	1001703a 	wrctl	status,r2
        }
        OS_EXIT_CRITICAL();
        OS_Sched();                                        /* Find HPT ready to run                    */
   1571c:	001243c0 	call	1243c <OS_Sched>
        *perr = OS_ERR_PEND_ABORT;
   15720:	e0bfff17 	ldw	r2,-4(fp)
   15724:	00c00384 	movi	r3,14
   15728:	10c00005 	stb	r3,0(r2)
        return (nbr_tasks);
   1572c:	e0bff803 	ldbu	r2,-32(fp)
   15730:	00000706 	br	15750 <OSQPendAbort+0x158>
   15734:	e0bff917 	ldw	r2,-28(fp)
   15738:	e0bffc15 	stw	r2,-16(fp)
   1573c:	e0bffc17 	ldw	r2,-16(fp)
   15740:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
   15744:	e0bfff17 	ldw	r2,-4(fp)
   15748:	10000005 	stb	zero,0(r2)
    return (0);                                            /* No tasks waiting on queue                */
   1574c:	0005883a 	mov	r2,zero
}
   15750:	e037883a 	mov	sp,fp
   15754:	dfc00117 	ldw	ra,4(sp)
   15758:	df000017 	ldw	fp,0(sp)
   1575c:	dec00204 	addi	sp,sp,8
   15760:	f800283a 	ret

00015764 <OSQPost>:
*********************************************************************************************************
*/

#if OS_Q_POST_EN > 0
INT8U  OSQPost (OS_EVENT *pevent, void *pmsg)
{
   15764:	defff604 	addi	sp,sp,-40
   15768:	dfc00915 	stw	ra,36(sp)
   1576c:	df000815 	stw	fp,32(sp)
   15770:	df000804 	addi	fp,sp,32
   15774:	e13ffe15 	stw	r4,-8(fp)
   15778:	e17fff15 	stw	r5,-4(fp)
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                            /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
   1577c:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                     /* Validate 'pevent'                            */
   15780:	e0bffe17 	ldw	r2,-8(fp)
   15784:	1000021e 	bne	r2,zero,15790 <OSQPost+0x2c>
        return (OS_ERR_PEVENT_NULL);
   15788:	00800104 	movi	r2,4
   1578c:	00004a06 	br	158b8 <OSQPost+0x154>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {      /* Validate event block type                    */
   15790:	e0bffe17 	ldw	r2,-8(fp)
   15794:	10800003 	ldbu	r2,0(r2)
   15798:	10803fcc 	andi	r2,r2,255
   1579c:	108000a0 	cmpeqi	r2,r2,2
   157a0:	1000021e 	bne	r2,zero,157ac <OSQPost+0x48>
        return (OS_ERR_EVENT_TYPE);
   157a4:	00800044 	movi	r2,1
   157a8:	00004306 	br	158b8 <OSQPost+0x154>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   157ac:	0005303a 	rdctl	r2,status
   157b0:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   157b4:	e0fffa17 	ldw	r3,-24(fp)
   157b8:	00bfff84 	movi	r2,-2
   157bc:	1884703a 	and	r2,r3,r2
   157c0:	1001703a 	wrctl	status,r2
  
  return context;
   157c4:	e0bffa17 	ldw	r2,-24(fp)
    }
    OS_ENTER_CRITICAL();
   157c8:	e0bff815 	stw	r2,-32(fp)
    if (pevent->OSEventGrp != 0) {                     /* See if any task pending on queue             */
   157cc:	e0bffe17 	ldw	r2,-8(fp)
   157d0:	10800283 	ldbu	r2,10(r2)
   157d4:	10803fcc 	andi	r2,r2,255
   157d8:	10000c26 	beq	r2,zero,1580c <OSQPost+0xa8>
                                                       /* Ready highest priority task waiting on event */
        (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
   157dc:	e13ffe17 	ldw	r4,-8(fp)
   157e0:	e17fff17 	ldw	r5,-4(fp)
   157e4:	01800104 	movi	r6,4
   157e8:	000f883a 	mov	r7,zero
   157ec:	0011a240 	call	11a24 <OS_EventTaskRdy>
   157f0:	e0bff817 	ldw	r2,-32(fp)
   157f4:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   157f8:	e0bffb17 	ldw	r2,-20(fp)
   157fc:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                                    /* Find highest priority task ready to run      */
   15800:	001243c0 	call	1243c <OS_Sched>
        return (OS_ERR_NONE);
   15804:	0005883a 	mov	r2,zero
   15808:	00002b06 	br	158b8 <OSQPost+0x154>
    }
    pq = (OS_Q *)pevent->OSEventPtr;                   /* Point to queue control block                 */
   1580c:	e0bffe17 	ldw	r2,-8(fp)
   15810:	10800117 	ldw	r2,4(r2)
   15814:	e0bff915 	stw	r2,-28(fp)
    if (pq->OSQEntries >= pq->OSQSize) {               /* Make sure queue is not full                  */
   15818:	e0bff917 	ldw	r2,-28(fp)
   1581c:	10c0058b 	ldhu	r3,22(r2)
   15820:	e0bff917 	ldw	r2,-28(fp)
   15824:	1080050b 	ldhu	r2,20(r2)
   15828:	18ffffcc 	andi	r3,r3,65535
   1582c:	10bfffcc 	andi	r2,r2,65535
   15830:	18800636 	bltu	r3,r2,1584c <OSQPost+0xe8>
   15834:	e0bff817 	ldw	r2,-32(fp)
   15838:	e0bffc15 	stw	r2,-16(fp)
   1583c:	e0bffc17 	ldw	r2,-16(fp)
   15840:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_Q_FULL);
   15844:	00800784 	movi	r2,30
   15848:	00001b06 	br	158b8 <OSQPost+0x154>
    }
    *pq->OSQIn++ = pmsg;                               /* Insert message into queue                    */
   1584c:	e0bff917 	ldw	r2,-28(fp)
   15850:	10800317 	ldw	r2,12(r2)
   15854:	11000104 	addi	r4,r2,4
   15858:	e0fff917 	ldw	r3,-28(fp)
   1585c:	19000315 	stw	r4,12(r3)
   15860:	e0ffff17 	ldw	r3,-4(fp)
   15864:	10c00015 	stw	r3,0(r2)
    pq->OSQEntries++;                                  /* Update the nbr of entries in the queue       */
   15868:	e0bff917 	ldw	r2,-28(fp)
   1586c:	1080058b 	ldhu	r2,22(r2)
   15870:	10800044 	addi	r2,r2,1
   15874:	1007883a 	mov	r3,r2
   15878:	e0bff917 	ldw	r2,-28(fp)
   1587c:	10c0058d 	sth	r3,22(r2)
    if (pq->OSQIn == pq->OSQEnd) {                     /* Wrap IN ptr if we are at end of queue        */
   15880:	e0bff917 	ldw	r2,-28(fp)
   15884:	10c00317 	ldw	r3,12(r2)
   15888:	e0bff917 	ldw	r2,-28(fp)
   1588c:	10800217 	ldw	r2,8(r2)
   15890:	1880041e 	bne	r3,r2,158a4 <OSQPost+0x140>
        pq->OSQIn = pq->OSQStart;
   15894:	e0bff917 	ldw	r2,-28(fp)
   15898:	10c00117 	ldw	r3,4(r2)
   1589c:	e0bff917 	ldw	r2,-28(fp)
   158a0:	10c00315 	stw	r3,12(r2)
   158a4:	e0bff817 	ldw	r2,-32(fp)
   158a8:	e0bffd15 	stw	r2,-12(fp)
   158ac:	e0bffd17 	ldw	r2,-12(fp)
   158b0:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
   158b4:	0005883a 	mov	r2,zero
}
   158b8:	e037883a 	mov	sp,fp
   158bc:	dfc00117 	ldw	ra,4(sp)
   158c0:	df000017 	ldw	fp,0(sp)
   158c4:	dec00204 	addi	sp,sp,8
   158c8:	f800283a 	ret

000158cc <OSQPostFront>:
*********************************************************************************************************
*/

#if OS_Q_POST_FRONT_EN > 0
INT8U  OSQPostFront (OS_EVENT *pevent, void *pmsg)
{
   158cc:	defff604 	addi	sp,sp,-40
   158d0:	dfc00915 	stw	ra,36(sp)
   158d4:	df000815 	stw	fp,32(sp)
   158d8:	df000804 	addi	fp,sp,32
   158dc:	e13ffe15 	stw	r4,-8(fp)
   158e0:	e17fff15 	stw	r5,-4(fp)
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   158e4:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
   158e8:	e0bffe17 	ldw	r2,-8(fp)
   158ec:	1000021e 	bne	r2,zero,158f8 <OSQPostFront+0x2c>
        return (OS_ERR_PEVENT_NULL);
   158f0:	00800104 	movi	r2,4
   158f4:	00004c06 	br	15a28 <OSQPostFront+0x15c>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {     /* Validate event block type                     */
   158f8:	e0bffe17 	ldw	r2,-8(fp)
   158fc:	10800003 	ldbu	r2,0(r2)
   15900:	10803fcc 	andi	r2,r2,255
   15904:	108000a0 	cmpeqi	r2,r2,2
   15908:	1000021e 	bne	r2,zero,15914 <OSQPostFront+0x48>
        return (OS_ERR_EVENT_TYPE);
   1590c:	00800044 	movi	r2,1
   15910:	00004506 	br	15a28 <OSQPostFront+0x15c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   15914:	0005303a 	rdctl	r2,status
   15918:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1591c:	e0fffa17 	ldw	r3,-24(fp)
   15920:	00bfff84 	movi	r2,-2
   15924:	1884703a 	and	r2,r3,r2
   15928:	1001703a 	wrctl	status,r2
  
  return context;
   1592c:	e0bffa17 	ldw	r2,-24(fp)
    }
    OS_ENTER_CRITICAL();
   15930:	e0bff815 	stw	r2,-32(fp)
    if (pevent->OSEventGrp != 0) {                    /* See if any task pending on queue              */
   15934:	e0bffe17 	ldw	r2,-8(fp)
   15938:	10800283 	ldbu	r2,10(r2)
   1593c:	10803fcc 	andi	r2,r2,255
   15940:	10000c26 	beq	r2,zero,15974 <OSQPostFront+0xa8>
                                                      /* Ready highest priority task waiting on event  */
        (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
   15944:	e13ffe17 	ldw	r4,-8(fp)
   15948:	e17fff17 	ldw	r5,-4(fp)
   1594c:	01800104 	movi	r6,4
   15950:	000f883a 	mov	r7,zero
   15954:	0011a240 	call	11a24 <OS_EventTaskRdy>
   15958:	e0bff817 	ldw	r2,-32(fp)
   1595c:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   15960:	e0bffb17 	ldw	r2,-20(fp)
   15964:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                                   /* Find highest priority task ready to run       */
   15968:	001243c0 	call	1243c <OS_Sched>
        return (OS_ERR_NONE);
   1596c:	0005883a 	mov	r2,zero
   15970:	00002d06 	br	15a28 <OSQPostFront+0x15c>
    }
    pq = (OS_Q *)pevent->OSEventPtr;                  /* Point to queue control block                  */
   15974:	e0bffe17 	ldw	r2,-8(fp)
   15978:	10800117 	ldw	r2,4(r2)
   1597c:	e0bff915 	stw	r2,-28(fp)
    if (pq->OSQEntries >= pq->OSQSize) {              /* Make sure queue is not full                   */
   15980:	e0bff917 	ldw	r2,-28(fp)
   15984:	10c0058b 	ldhu	r3,22(r2)
   15988:	e0bff917 	ldw	r2,-28(fp)
   1598c:	1080050b 	ldhu	r2,20(r2)
   15990:	18ffffcc 	andi	r3,r3,65535
   15994:	10bfffcc 	andi	r2,r2,65535
   15998:	18800636 	bltu	r3,r2,159b4 <OSQPostFront+0xe8>
   1599c:	e0bff817 	ldw	r2,-32(fp)
   159a0:	e0bffc15 	stw	r2,-16(fp)
   159a4:	e0bffc17 	ldw	r2,-16(fp)
   159a8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_Q_FULL);
   159ac:	00800784 	movi	r2,30
   159b0:	00001d06 	br	15a28 <OSQPostFront+0x15c>
    }
    if (pq->OSQOut == pq->OSQStart) {                 /* Wrap OUT ptr if we are at the 1st queue entry */
   159b4:	e0bff917 	ldw	r2,-28(fp)
   159b8:	10c00417 	ldw	r3,16(r2)
   159bc:	e0bff917 	ldw	r2,-28(fp)
   159c0:	10800117 	ldw	r2,4(r2)
   159c4:	1880041e 	bne	r3,r2,159d8 <OSQPostFront+0x10c>
        pq->OSQOut = pq->OSQEnd;
   159c8:	e0bff917 	ldw	r2,-28(fp)
   159cc:	10c00217 	ldw	r3,8(r2)
   159d0:	e0bff917 	ldw	r2,-28(fp)
   159d4:	10c00415 	stw	r3,16(r2)
    }
    pq->OSQOut--;
   159d8:	e0bff917 	ldw	r2,-28(fp)
   159dc:	10800417 	ldw	r2,16(r2)
   159e0:	10ffff04 	addi	r3,r2,-4
   159e4:	e0bff917 	ldw	r2,-28(fp)
   159e8:	10c00415 	stw	r3,16(r2)
    *pq->OSQOut = pmsg;                               /* Insert message into queue                     */
   159ec:	e0bff917 	ldw	r2,-28(fp)
   159f0:	10800417 	ldw	r2,16(r2)
   159f4:	e0ffff17 	ldw	r3,-4(fp)
   159f8:	10c00015 	stw	r3,0(r2)
    pq->OSQEntries++;                                 /* Update the nbr of entries in the queue        */
   159fc:	e0bff917 	ldw	r2,-28(fp)
   15a00:	1080058b 	ldhu	r2,22(r2)
   15a04:	10800044 	addi	r2,r2,1
   15a08:	1007883a 	mov	r3,r2
   15a0c:	e0bff917 	ldw	r2,-28(fp)
   15a10:	10c0058d 	sth	r3,22(r2)
   15a14:	e0bff817 	ldw	r2,-32(fp)
   15a18:	e0bffd15 	stw	r2,-12(fp)
   15a1c:	e0bffd17 	ldw	r2,-12(fp)
   15a20:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
   15a24:	0005883a 	mov	r2,zero
}
   15a28:	e037883a 	mov	sp,fp
   15a2c:	dfc00117 	ldw	ra,4(sp)
   15a30:	df000017 	ldw	fp,0(sp)
   15a34:	dec00204 	addi	sp,sp,8
   15a38:	f800283a 	ret

00015a3c <OSQPostOpt>:
*********************************************************************************************************
*/

#if OS_Q_POST_OPT_EN > 0
INT8U  OSQPostOpt (OS_EVENT *pevent, void *pmsg, INT8U opt)
{
   15a3c:	defff504 	addi	sp,sp,-44
   15a40:	dfc00a15 	stw	ra,40(sp)
   15a44:	df000915 	stw	fp,36(sp)
   15a48:	df000904 	addi	fp,sp,36
   15a4c:	e13ffd15 	stw	r4,-12(fp)
   15a50:	e17ffe15 	stw	r5,-8(fp)
   15a54:	3005883a 	mov	r2,r6
   15a58:	e0bfff05 	stb	r2,-4(fp)
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   15a5c:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
   15a60:	e0bffd17 	ldw	r2,-12(fp)
   15a64:	1000021e 	bne	r2,zero,15a70 <OSQPostOpt+0x34>
        return (OS_ERR_PEVENT_NULL);
   15a68:	00800104 	movi	r2,4
   15a6c:	00007106 	br	15c34 <OSQPostOpt+0x1f8>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {     /* Validate event block type                     */
   15a70:	e0bffd17 	ldw	r2,-12(fp)
   15a74:	10800003 	ldbu	r2,0(r2)
   15a78:	10803fcc 	andi	r2,r2,255
   15a7c:	108000a0 	cmpeqi	r2,r2,2
   15a80:	1000021e 	bne	r2,zero,15a8c <OSQPostOpt+0x50>
        return (OS_ERR_EVENT_TYPE);
   15a84:	00800044 	movi	r2,1
   15a88:	00006a06 	br	15c34 <OSQPostOpt+0x1f8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   15a8c:	0005303a 	rdctl	r2,status
   15a90:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   15a94:	e0fff917 	ldw	r3,-28(fp)
   15a98:	00bfff84 	movi	r2,-2
   15a9c:	1884703a 	and	r2,r3,r2
   15aa0:	1001703a 	wrctl	status,r2
  
  return context;
   15aa4:	e0bff917 	ldw	r2,-28(fp)
    }
    OS_ENTER_CRITICAL();
   15aa8:	e0bff715 	stw	r2,-36(fp)
    if (pevent->OSEventGrp != 0x00) {                 /* See if any task pending on queue              */
   15aac:	e0bffd17 	ldw	r2,-12(fp)
   15ab0:	10800283 	ldbu	r2,10(r2)
   15ab4:	10803fcc 	andi	r2,r2,255
   15ab8:	10001d26 	beq	r2,zero,15b30 <OSQPostOpt+0xf4>
        if ((opt & OS_POST_OPT_BROADCAST) != 0x00) {  /* Do we need to post msg to ALL waiting tasks ? */
   15abc:	e0bfff03 	ldbu	r2,-4(fp)
   15ac0:	1080004c 	andi	r2,r2,1
   15ac4:	10000b26 	beq	r2,zero,15af4 <OSQPostOpt+0xb8>
            while (pevent->OSEventGrp != 0) {         /* Yes, Post to ALL tasks waiting on queue       */
   15ac8:	00000506 	br	15ae0 <OSQPostOpt+0xa4>
                (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
   15acc:	e13ffd17 	ldw	r4,-12(fp)
   15ad0:	e17ffe17 	ldw	r5,-8(fp)
   15ad4:	01800104 	movi	r6,4
   15ad8:	000f883a 	mov	r7,zero
   15adc:	0011a240 	call	11a24 <OS_EventTaskRdy>
        return (OS_ERR_EVENT_TYPE);
    }
    OS_ENTER_CRITICAL();
    if (pevent->OSEventGrp != 0x00) {                 /* See if any task pending on queue              */
        if ((opt & OS_POST_OPT_BROADCAST) != 0x00) {  /* Do we need to post msg to ALL waiting tasks ? */
            while (pevent->OSEventGrp != 0) {         /* Yes, Post to ALL tasks waiting on queue       */
   15ae0:	e0bffd17 	ldw	r2,-12(fp)
   15ae4:	10800283 	ldbu	r2,10(r2)
   15ae8:	10803fcc 	andi	r2,r2,255
   15aec:	103ff71e 	bne	r2,zero,15acc <__alt_mem_Flash_flash_data+0xf4015acc>
   15af0:	00000506 	br	15b08 <OSQPostOpt+0xcc>
                (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
            }
        } else {                                      /* No,  Post to HPT waiting on queue             */
            (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
   15af4:	e13ffd17 	ldw	r4,-12(fp)
   15af8:	e17ffe17 	ldw	r5,-8(fp)
   15afc:	01800104 	movi	r6,4
   15b00:	000f883a 	mov	r7,zero
   15b04:	0011a240 	call	11a24 <OS_EventTaskRdy>
   15b08:	e0bff717 	ldw	r2,-36(fp)
   15b0c:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   15b10:	e0bffa17 	ldw	r2,-24(fp)
   15b14:	1001703a 	wrctl	status,r2
        }
        OS_EXIT_CRITICAL();
        if ((opt & OS_POST_OPT_NO_SCHED) == 0) {	  /* See if scheduler needs to be invoked          */
   15b18:	e0bfff03 	ldbu	r2,-4(fp)
   15b1c:	1080010c 	andi	r2,r2,4
   15b20:	1000011e 	bne	r2,zero,15b28 <OSQPostOpt+0xec>
            OS_Sched();                               /* Find highest priority task ready to run       */
   15b24:	001243c0 	call	1243c <OS_Sched>
        }
        return (OS_ERR_NONE);
   15b28:	0005883a 	mov	r2,zero
   15b2c:	00004106 	br	15c34 <OSQPostOpt+0x1f8>
    }
    pq = (OS_Q *)pevent->OSEventPtr;                  /* Point to queue control block                  */
   15b30:	e0bffd17 	ldw	r2,-12(fp)
   15b34:	10800117 	ldw	r2,4(r2)
   15b38:	e0bff815 	stw	r2,-32(fp)
    if (pq->OSQEntries >= pq->OSQSize) {              /* Make sure queue is not full                   */
   15b3c:	e0bff817 	ldw	r2,-32(fp)
   15b40:	10c0058b 	ldhu	r3,22(r2)
   15b44:	e0bff817 	ldw	r2,-32(fp)
   15b48:	1080050b 	ldhu	r2,20(r2)
   15b4c:	18ffffcc 	andi	r3,r3,65535
   15b50:	10bfffcc 	andi	r2,r2,65535
   15b54:	18800636 	bltu	r3,r2,15b70 <OSQPostOpt+0x134>
   15b58:	e0bff717 	ldw	r2,-36(fp)
   15b5c:	e0bffb15 	stw	r2,-20(fp)
   15b60:	e0bffb17 	ldw	r2,-20(fp)
   15b64:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_Q_FULL);
   15b68:	00800784 	movi	r2,30
   15b6c:	00003106 	br	15c34 <OSQPostOpt+0x1f8>
    }
    if ((opt & OS_POST_OPT_FRONT) != 0x00) {          /* Do we post to the FRONT of the queue?         */
   15b70:	e0bfff03 	ldbu	r2,-4(fp)
   15b74:	1080008c 	andi	r2,r2,2
   15b78:	10001326 	beq	r2,zero,15bc8 <OSQPostOpt+0x18c>
        if (pq->OSQOut == pq->OSQStart) {             /* Yes, Post as LIFO, Wrap OUT pointer if we ... */
   15b7c:	e0bff817 	ldw	r2,-32(fp)
   15b80:	10c00417 	ldw	r3,16(r2)
   15b84:	e0bff817 	ldw	r2,-32(fp)
   15b88:	10800117 	ldw	r2,4(r2)
   15b8c:	1880041e 	bne	r3,r2,15ba0 <OSQPostOpt+0x164>
            pq->OSQOut = pq->OSQEnd;                  /*      ... are at the 1st queue entry           */
   15b90:	e0bff817 	ldw	r2,-32(fp)
   15b94:	10c00217 	ldw	r3,8(r2)
   15b98:	e0bff817 	ldw	r2,-32(fp)
   15b9c:	10c00415 	stw	r3,16(r2)
        }
        pq->OSQOut--;
   15ba0:	e0bff817 	ldw	r2,-32(fp)
   15ba4:	10800417 	ldw	r2,16(r2)
   15ba8:	10ffff04 	addi	r3,r2,-4
   15bac:	e0bff817 	ldw	r2,-32(fp)
   15bb0:	10c00415 	stw	r3,16(r2)
        *pq->OSQOut = pmsg;                           /*      Insert message into queue                */
   15bb4:	e0bff817 	ldw	r2,-32(fp)
   15bb8:	10800417 	ldw	r2,16(r2)
   15bbc:	e0fffe17 	ldw	r3,-8(fp)
   15bc0:	10c00015 	stw	r3,0(r2)
   15bc4:	00001006 	br	15c08 <OSQPostOpt+0x1cc>
    } else {                                          /* No,  Post as FIFO                             */
        *pq->OSQIn++ = pmsg;                          /*      Insert message into queue                */
   15bc8:	e0bff817 	ldw	r2,-32(fp)
   15bcc:	10800317 	ldw	r2,12(r2)
   15bd0:	11000104 	addi	r4,r2,4
   15bd4:	e0fff817 	ldw	r3,-32(fp)
   15bd8:	19000315 	stw	r4,12(r3)
   15bdc:	e0fffe17 	ldw	r3,-8(fp)
   15be0:	10c00015 	stw	r3,0(r2)
        if (pq->OSQIn == pq->OSQEnd) {                /*      Wrap IN ptr if we are at end of queue    */
   15be4:	e0bff817 	ldw	r2,-32(fp)
   15be8:	10c00317 	ldw	r3,12(r2)
   15bec:	e0bff817 	ldw	r2,-32(fp)
   15bf0:	10800217 	ldw	r2,8(r2)
   15bf4:	1880041e 	bne	r3,r2,15c08 <OSQPostOpt+0x1cc>
            pq->OSQIn = pq->OSQStart;
   15bf8:	e0bff817 	ldw	r2,-32(fp)
   15bfc:	10c00117 	ldw	r3,4(r2)
   15c00:	e0bff817 	ldw	r2,-32(fp)
   15c04:	10c00315 	stw	r3,12(r2)
        }
    }
    pq->OSQEntries++;                                 /* Update the nbr of entries in the queue        */
   15c08:	e0bff817 	ldw	r2,-32(fp)
   15c0c:	1080058b 	ldhu	r2,22(r2)
   15c10:	10800044 	addi	r2,r2,1
   15c14:	1007883a 	mov	r3,r2
   15c18:	e0bff817 	ldw	r2,-32(fp)
   15c1c:	10c0058d 	sth	r3,22(r2)
   15c20:	e0bff717 	ldw	r2,-36(fp)
   15c24:	e0bffc15 	stw	r2,-16(fp)
   15c28:	e0bffc17 	ldw	r2,-16(fp)
   15c2c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
   15c30:	0005883a 	mov	r2,zero
}
   15c34:	e037883a 	mov	sp,fp
   15c38:	dfc00117 	ldw	ra,4(sp)
   15c3c:	df000017 	ldw	fp,0(sp)
   15c40:	dec00204 	addi	sp,sp,8
   15c44:	f800283a 	ret

00015c48 <OSQQuery>:
*********************************************************************************************************
*/

#if OS_Q_QUERY_EN > 0
INT8U  OSQQuery (OS_EVENT *pevent, OS_Q_DATA *p_q_data)
{
   15c48:	defff604 	addi	sp,sp,-40
   15c4c:	df000915 	stw	fp,36(sp)
   15c50:	df000904 	addi	fp,sp,36
   15c54:	e13ffe15 	stw	r4,-8(fp)
   15c58:	e17fff15 	stw	r5,-4(fp)
#else
    INT16U    *psrc;
    INT16U    *pdest;
#endif
#if OS_CRITICAL_METHOD == 3                            /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
   15c5c:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                     /* Validate 'pevent'                            */
   15c60:	e0bffe17 	ldw	r2,-8(fp)
   15c64:	1000021e 	bne	r2,zero,15c70 <OSQQuery+0x28>
        return (OS_ERR_PEVENT_NULL);
   15c68:	00800104 	movi	r2,4
   15c6c:	00004906 	br	15d94 <OSQQuery+0x14c>
    }
    if (p_q_data == (OS_Q_DATA *)0) {                  /* Validate 'p_q_data'                          */
   15c70:	e0bfff17 	ldw	r2,-4(fp)
   15c74:	1000021e 	bne	r2,zero,15c80 <OSQQuery+0x38>
        return (OS_ERR_PDATA_NULL);
   15c78:	00800244 	movi	r2,9
   15c7c:	00004506 	br	15d94 <OSQQuery+0x14c>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {      /* Validate event block type                    */
   15c80:	e0bffe17 	ldw	r2,-8(fp)
   15c84:	10800003 	ldbu	r2,0(r2)
   15c88:	10803fcc 	andi	r2,r2,255
   15c8c:	108000a0 	cmpeqi	r2,r2,2
   15c90:	1000021e 	bne	r2,zero,15c9c <OSQQuery+0x54>
        return (OS_ERR_EVENT_TYPE);
   15c94:	00800044 	movi	r2,1
   15c98:	00003e06 	br	15d94 <OSQQuery+0x14c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   15c9c:	0005303a 	rdctl	r2,status
   15ca0:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   15ca4:	e0fffc17 	ldw	r3,-16(fp)
   15ca8:	00bfff84 	movi	r2,-2
   15cac:	1884703a 	and	r2,r3,r2
   15cb0:	1001703a 	wrctl	status,r2
  
  return context;
   15cb4:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
   15cb8:	e0bffa15 	stw	r2,-24(fp)
    p_q_data->OSEventGrp = pevent->OSEventGrp;         /* Copy message queue wait list                 */
   15cbc:	e0bffe17 	ldw	r2,-8(fp)
   15cc0:	10c00283 	ldbu	r3,10(r2)
   15cc4:	e0bfff17 	ldw	r2,-4(fp)
   15cc8:	10c002c5 	stb	r3,11(r2)
    psrc                 = &pevent->OSEventTbl[0];
   15ccc:	e0bffe17 	ldw	r2,-8(fp)
   15cd0:	108002c4 	addi	r2,r2,11
   15cd4:	e0bff815 	stw	r2,-32(fp)
    pdest                = &p_q_data->OSEventTbl[0];
   15cd8:	e0bfff17 	ldw	r2,-4(fp)
   15cdc:	10800204 	addi	r2,r2,8
   15ce0:	e0bff915 	stw	r2,-28(fp)
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
   15ce4:	e03ff705 	stb	zero,-36(fp)
   15ce8:	00000b06 	br	15d18 <OSQQuery+0xd0>
        *pdest++ = *psrc++;
   15cec:	e0bff917 	ldw	r2,-28(fp)
   15cf0:	10c00044 	addi	r3,r2,1
   15cf4:	e0fff915 	stw	r3,-28(fp)
   15cf8:	e0fff817 	ldw	r3,-32(fp)
   15cfc:	19000044 	addi	r4,r3,1
   15d00:	e13ff815 	stw	r4,-32(fp)
   15d04:	18c00003 	ldbu	r3,0(r3)
   15d08:	10c00005 	stb	r3,0(r2)
    }
    OS_ENTER_CRITICAL();
    p_q_data->OSEventGrp = pevent->OSEventGrp;         /* Copy message queue wait list                 */
    psrc                 = &pevent->OSEventTbl[0];
    pdest                = &p_q_data->OSEventTbl[0];
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
   15d0c:	e0bff703 	ldbu	r2,-36(fp)
   15d10:	10800044 	addi	r2,r2,1
   15d14:	e0bff705 	stb	r2,-36(fp)
   15d18:	e0bff703 	ldbu	r2,-36(fp)
   15d1c:	108000f0 	cmpltui	r2,r2,3
   15d20:	103ff21e 	bne	r2,zero,15cec <__alt_mem_Flash_flash_data+0xf4015cec>
        *pdest++ = *psrc++;
    }
    pq = (OS_Q *)pevent->OSEventPtr;
   15d24:	e0bffe17 	ldw	r2,-8(fp)
   15d28:	10800117 	ldw	r2,4(r2)
   15d2c:	e0bffb15 	stw	r2,-20(fp)
    if (pq->OSQEntries > 0) {
   15d30:	e0bffb17 	ldw	r2,-20(fp)
   15d34:	1080058b 	ldhu	r2,22(r2)
   15d38:	10bfffcc 	andi	r2,r2,65535
   15d3c:	10000626 	beq	r2,zero,15d58 <OSQQuery+0x110>
        p_q_data->OSMsg = *pq->OSQOut;                 /* Get next message to return if available      */
   15d40:	e0bffb17 	ldw	r2,-20(fp)
   15d44:	10800417 	ldw	r2,16(r2)
   15d48:	10c00017 	ldw	r3,0(r2)
   15d4c:	e0bfff17 	ldw	r2,-4(fp)
   15d50:	10c00015 	stw	r3,0(r2)
   15d54:	00000206 	br	15d60 <OSQQuery+0x118>
    } else {
        p_q_data->OSMsg = (void *)0;
   15d58:	e0bfff17 	ldw	r2,-4(fp)
   15d5c:	10000015 	stw	zero,0(r2)
    }
    p_q_data->OSNMsgs = pq->OSQEntries;
   15d60:	e0bffb17 	ldw	r2,-20(fp)
   15d64:	10c0058b 	ldhu	r3,22(r2)
   15d68:	e0bfff17 	ldw	r2,-4(fp)
   15d6c:	10c0010d 	sth	r3,4(r2)
    p_q_data->OSQSize = pq->OSQSize;
   15d70:	e0bffb17 	ldw	r2,-20(fp)
   15d74:	10c0050b 	ldhu	r3,20(r2)
   15d78:	e0bfff17 	ldw	r2,-4(fp)
   15d7c:	10c0018d 	sth	r3,6(r2)
   15d80:	e0bffa17 	ldw	r2,-24(fp)
   15d84:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   15d88:	e0bffd17 	ldw	r2,-12(fp)
   15d8c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
   15d90:	0005883a 	mov	r2,zero
}
   15d94:	e037883a 	mov	sp,fp
   15d98:	df000017 	ldw	fp,0(sp)
   15d9c:	dec00104 	addi	sp,sp,4
   15da0:	f800283a 	ret

00015da4 <OS_QInit>:
* Note(s)    : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

void  OS_QInit (void)
{
   15da4:	defffb04 	addi	sp,sp,-20
   15da8:	dfc00415 	stw	ra,16(sp)
   15dac:	df000315 	stw	fp,12(sp)
   15db0:	df000304 	addi	fp,sp,12
    OS_Q   *pq1;
    OS_Q   *pq2;



    OS_MemClr((INT8U *)&OSQTbl[0], sizeof(OSQTbl));  /* Clear the queue table                          */
   15db4:	010000b4 	movhi	r4,2
   15db8:	21193904 	addi	r4,r4,25828
   15dbc:	01407804 	movi	r5,480
   15dc0:	00123880 	call	12388 <OS_MemClr>
    pq1 = &OSQTbl[0];
   15dc4:	008000b4 	movhi	r2,2
   15dc8:	10993904 	addi	r2,r2,25828
   15dcc:	e0bffe15 	stw	r2,-8(fp)
    pq2 = &OSQTbl[1];
   15dd0:	008000b4 	movhi	r2,2
   15dd4:	10993f04 	addi	r2,r2,25852
   15dd8:	e0bfff15 	stw	r2,-4(fp)
    for (i = 0; i < (OS_MAX_QS - 1); i++) {          /* Init. list of free QUEUE control blocks        */
   15ddc:	e03ffd0d 	sth	zero,-12(fp)
   15de0:	00000c06 	br	15e14 <OS_QInit+0x70>
        pq1->OSQPtr = pq2;
   15de4:	e0bffe17 	ldw	r2,-8(fp)
   15de8:	e0ffff17 	ldw	r3,-4(fp)
   15dec:	10c00015 	stw	r3,0(r2)
        pq1++;
   15df0:	e0bffe17 	ldw	r2,-8(fp)
   15df4:	10800604 	addi	r2,r2,24
   15df8:	e0bffe15 	stw	r2,-8(fp)
        pq2++;
   15dfc:	e0bfff17 	ldw	r2,-4(fp)
   15e00:	10800604 	addi	r2,r2,24
   15e04:	e0bfff15 	stw	r2,-4(fp)


    OS_MemClr((INT8U *)&OSQTbl[0], sizeof(OSQTbl));  /* Clear the queue table                          */
    pq1 = &OSQTbl[0];
    pq2 = &OSQTbl[1];
    for (i = 0; i < (OS_MAX_QS - 1); i++) {          /* Init. list of free QUEUE control blocks        */
   15e08:	e0bffd0b 	ldhu	r2,-12(fp)
   15e0c:	10800044 	addi	r2,r2,1
   15e10:	e0bffd0d 	sth	r2,-12(fp)
   15e14:	e0bffd0b 	ldhu	r2,-12(fp)
   15e18:	108004f0 	cmpltui	r2,r2,19
   15e1c:	103ff11e 	bne	r2,zero,15de4 <__alt_mem_Flash_flash_data+0xf4015de4>
        pq1->OSQPtr = pq2;
        pq1++;
        pq2++;
    }
    pq1->OSQPtr = (OS_Q *)0;
   15e20:	e0bffe17 	ldw	r2,-8(fp)
   15e24:	10000015 	stw	zero,0(r2)
    OSQFreeList = &OSQTbl[0];
   15e28:	008000b4 	movhi	r2,2
   15e2c:	10931404 	addi	r2,r2,19536
   15e30:	00c000b4 	movhi	r3,2
   15e34:	18d93904 	addi	r3,r3,25828
   15e38:	10c00015 	stw	r3,0(r2)
#endif
}
   15e3c:	e037883a 	mov	sp,fp
   15e40:	dfc00117 	ldw	ra,4(sp)
   15e44:	df000017 	ldw	fp,0(sp)
   15e48:	dec00204 	addi	sp,sp,8
   15e4c:	f800283a 	ret

00015e50 <OSSemAccept>:
*********************************************************************************************************
*/

#if OS_SEM_ACCEPT_EN > 0
INT16U  OSSemAccept (OS_EVENT *pevent)
{
   15e50:	defffa04 	addi	sp,sp,-24
   15e54:	df000515 	stw	fp,20(sp)
   15e58:	df000504 	addi	fp,sp,20
   15e5c:	e13fff15 	stw	r4,-4(fp)
    INT16U     cnt;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   15e60:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
   15e64:	e0bfff17 	ldw	r2,-4(fp)
   15e68:	1000021e 	bne	r2,zero,15e74 <OSSemAccept+0x24>
        return (0);
   15e6c:	0005883a 	mov	r2,zero
   15e70:	00001f06 	br	15ef0 <OSSemAccept+0xa0>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
   15e74:	e0bfff17 	ldw	r2,-4(fp)
   15e78:	10800003 	ldbu	r2,0(r2)
   15e7c:	10803fcc 	andi	r2,r2,255
   15e80:	108000e0 	cmpeqi	r2,r2,3
   15e84:	1000021e 	bne	r2,zero,15e90 <OSSemAccept+0x40>
        return (0);
   15e88:	0005883a 	mov	r2,zero
   15e8c:	00001806 	br	15ef0 <OSSemAccept+0xa0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   15e90:	0005303a 	rdctl	r2,status
   15e94:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   15e98:	e0fffd17 	ldw	r3,-12(fp)
   15e9c:	00bfff84 	movi	r2,-2
   15ea0:	1884703a 	and	r2,r3,r2
   15ea4:	1001703a 	wrctl	status,r2
  
  return context;
   15ea8:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
   15eac:	e0bffb15 	stw	r2,-20(fp)
    cnt = pevent->OSEventCnt;
   15eb0:	e0bfff17 	ldw	r2,-4(fp)
   15eb4:	1080020b 	ldhu	r2,8(r2)
   15eb8:	e0bffc0d 	sth	r2,-16(fp)
    if (cnt > 0) {                                    /* See if resource is available                  */
   15ebc:	e0bffc0b 	ldhu	r2,-16(fp)
   15ec0:	10000626 	beq	r2,zero,15edc <OSSemAccept+0x8c>
        pevent->OSEventCnt--;                         /* Yes, decrement semaphore and notify caller    */
   15ec4:	e0bfff17 	ldw	r2,-4(fp)
   15ec8:	1080020b 	ldhu	r2,8(r2)
   15ecc:	10bfffc4 	addi	r2,r2,-1
   15ed0:	1007883a 	mov	r3,r2
   15ed4:	e0bfff17 	ldw	r2,-4(fp)
   15ed8:	10c0020d 	sth	r3,8(r2)
   15edc:	e0bffb17 	ldw	r2,-20(fp)
   15ee0:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   15ee4:	e0bffe17 	ldw	r2,-8(fp)
   15ee8:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (cnt);                                     /* Return semaphore count                        */
   15eec:	e0bffc0b 	ldhu	r2,-16(fp)
}
   15ef0:	e037883a 	mov	sp,fp
   15ef4:	df000017 	ldw	fp,0(sp)
   15ef8:	dec00104 	addi	sp,sp,4
   15efc:	f800283a 	ret

00015f00 <OSSemCreate>:
*              == (void *)0  if no event control blocks were available
*********************************************************************************************************
*/

OS_EVENT  *OSSemCreate (INT16U cnt)
{
   15f00:	defff904 	addi	sp,sp,-28
   15f04:	dfc00615 	stw	ra,24(sp)
   15f08:	df000515 	stw	fp,20(sp)
   15f0c:	df000504 	addi	fp,sp,20
   15f10:	2005883a 	mov	r2,r4
   15f14:	e0bfff0d 	sth	r2,-4(fp)
    OS_EVENT  *pevent;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
   15f18:	e03ffb15 	stw	zero,-20(fp)
#endif



    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
   15f1c:	008000b4 	movhi	r2,2
   15f20:	10931704 	addi	r2,r2,19548
   15f24:	10800003 	ldbu	r2,0(r2)
   15f28:	10803fcc 	andi	r2,r2,255
   15f2c:	10000226 	beq	r2,zero,15f38 <OSSemCreate+0x38>
        return ((OS_EVENT *)0);                            /* ... can't CREATE from an ISR             */
   15f30:	0005883a 	mov	r2,zero
   15f34:	00002d06 	br	15fec <OSSemCreate+0xec>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   15f38:	0005303a 	rdctl	r2,status
   15f3c:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   15f40:	e0fffd17 	ldw	r3,-12(fp)
   15f44:	00bfff84 	movi	r2,-2
   15f48:	1884703a 	and	r2,r3,r2
   15f4c:	1001703a 	wrctl	status,r2
  
  return context;
   15f50:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
   15f54:	e0bffb15 	stw	r2,-20(fp)
    pevent = OSEventFreeList;                              /* Get next free event control block        */
   15f58:	008000b4 	movhi	r2,2
   15f5c:	10931604 	addi	r2,r2,19544
   15f60:	10800017 	ldw	r2,0(r2)
   15f64:	e0bffc15 	stw	r2,-16(fp)
    if (OSEventFreeList != (OS_EVENT *)0) {                /* See if pool of free ECB pool was empty   */
   15f68:	008000b4 	movhi	r2,2
   15f6c:	10931604 	addi	r2,r2,19544
   15f70:	10800017 	ldw	r2,0(r2)
   15f74:	10000726 	beq	r2,zero,15f94 <OSSemCreate+0x94>
        OSEventFreeList = (OS_EVENT *)OSEventFreeList->OSEventPtr;
   15f78:	008000b4 	movhi	r2,2
   15f7c:	10931604 	addi	r2,r2,19544
   15f80:	10800017 	ldw	r2,0(r2)
   15f84:	10c00117 	ldw	r3,4(r2)
   15f88:	008000b4 	movhi	r2,2
   15f8c:	10931604 	addi	r2,r2,19544
   15f90:	10c00015 	stw	r3,0(r2)
   15f94:	e0bffb17 	ldw	r2,-20(fp)
   15f98:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   15f9c:	e0bffe17 	ldw	r2,-8(fp)
   15fa0:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    if (pevent != (OS_EVENT *)0) {                         /* Get an event control block               */
   15fa4:	e0bffc17 	ldw	r2,-16(fp)
   15fa8:	10000f26 	beq	r2,zero,15fe8 <OSSemCreate+0xe8>
        pevent->OSEventType    = OS_EVENT_TYPE_SEM;
   15fac:	e0bffc17 	ldw	r2,-16(fp)
   15fb0:	00c000c4 	movi	r3,3
   15fb4:	10c00005 	stb	r3,0(r2)
        pevent->OSEventCnt     = cnt;                      /* Set semaphore value                      */
   15fb8:	e0bffc17 	ldw	r2,-16(fp)
   15fbc:	e0ffff0b 	ldhu	r3,-4(fp)
   15fc0:	10c0020d 	sth	r3,8(r2)
        pevent->OSEventPtr     = (void *)0;                /* Unlink from ECB free list                */
   15fc4:	e0bffc17 	ldw	r2,-16(fp)
   15fc8:	10000115 	stw	zero,4(r2)
#if OS_EVENT_NAME_SIZE > 1
        pevent->OSEventName[0] = '?';                      /* Unknown name                             */
   15fcc:	e0bffc17 	ldw	r2,-16(fp)
   15fd0:	00c00fc4 	movi	r3,63
   15fd4:	10c00385 	stb	r3,14(r2)
        pevent->OSEventName[1] = OS_ASCII_NUL;
   15fd8:	e0bffc17 	ldw	r2,-16(fp)
   15fdc:	100003c5 	stb	zero,15(r2)
#endif
        OS_EventWaitListInit(pevent);                      /* Initialize to 'nobody waiting' on sem.   */
   15fe0:	e13ffc17 	ldw	r4,-16(fp)
   15fe4:	0011fc40 	call	11fc4 <OS_EventWaitListInit>
    }
    return (pevent);
   15fe8:	e0bffc17 	ldw	r2,-16(fp)
}
   15fec:	e037883a 	mov	sp,fp
   15ff0:	dfc00117 	ldw	ra,4(sp)
   15ff4:	df000017 	ldw	fp,0(sp)
   15ff8:	dec00204 	addi	sp,sp,8
   15ffc:	f800283a 	ret

00016000 <OSSemDel>:
*********************************************************************************************************
*/

#if OS_SEM_DEL_EN > 0
OS_EVENT  *OSSemDel (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
   16000:	defff304 	addi	sp,sp,-52
   16004:	dfc00c15 	stw	ra,48(sp)
   16008:	df000b15 	stw	fp,44(sp)
   1600c:	df000b04 	addi	fp,sp,44
   16010:	e13ffd15 	stw	r4,-12(fp)
   16014:	2805883a 	mov	r2,r5
   16018:	e1bfff15 	stw	r6,-4(fp)
   1601c:	e0bffe05 	stb	r2,-8(fp)
    BOOLEAN    tasks_waiting;
    OS_EVENT  *pevent_return;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
   16020:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
   16024:	e0bfff17 	ldw	r2,-4(fp)
   16028:	1000021e 	bne	r2,zero,16034 <OSSemDel+0x34>
        return (pevent);
   1602c:	e0bffd17 	ldw	r2,-12(fp)
   16030:	00008806 	br	16254 <OSSemDel+0x254>
    }
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
   16034:	e0bffd17 	ldw	r2,-12(fp)
   16038:	1000051e 	bne	r2,zero,16050 <OSSemDel+0x50>
        *perr = OS_ERR_PEVENT_NULL;
   1603c:	e0bfff17 	ldw	r2,-4(fp)
   16040:	00c00104 	movi	r3,4
   16044:	10c00005 	stb	r3,0(r2)
        return (pevent);
   16048:	e0bffd17 	ldw	r2,-12(fp)
   1604c:	00008106 	br	16254 <OSSemDel+0x254>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {        /* Validate event block type                */
   16050:	e0bffd17 	ldw	r2,-12(fp)
   16054:	10800003 	ldbu	r2,0(r2)
   16058:	10803fcc 	andi	r2,r2,255
   1605c:	108000e0 	cmpeqi	r2,r2,3
   16060:	1000051e 	bne	r2,zero,16078 <OSSemDel+0x78>
        *perr = OS_ERR_EVENT_TYPE;
   16064:	e0bfff17 	ldw	r2,-4(fp)
   16068:	00c00044 	movi	r3,1
   1606c:	10c00005 	stb	r3,0(r2)
        return (pevent);
   16070:	e0bffd17 	ldw	r2,-12(fp)
   16074:	00007706 	br	16254 <OSSemDel+0x254>
    }
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
   16078:	008000b4 	movhi	r2,2
   1607c:	10931704 	addi	r2,r2,19548
   16080:	10800003 	ldbu	r2,0(r2)
   16084:	10803fcc 	andi	r2,r2,255
   16088:	10000526 	beq	r2,zero,160a0 <OSSemDel+0xa0>
        *perr = OS_ERR_DEL_ISR;                             /* ... can't DELETE from an ISR             */
   1608c:	e0bfff17 	ldw	r2,-4(fp)
   16090:	00c003c4 	movi	r3,15
   16094:	10c00005 	stb	r3,0(r2)
        return (pevent);
   16098:	e0bffd17 	ldw	r2,-12(fp)
   1609c:	00006d06 	br	16254 <OSSemDel+0x254>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   160a0:	0005303a 	rdctl	r2,status
   160a4:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   160a8:	e0fff817 	ldw	r3,-32(fp)
   160ac:	00bfff84 	movi	r2,-2
   160b0:	1884703a 	and	r2,r3,r2
   160b4:	1001703a 	wrctl	status,r2
  
  return context;
   160b8:	e0bff817 	ldw	r2,-32(fp)
    }
    OS_ENTER_CRITICAL();
   160bc:	e0bff715 	stw	r2,-36(fp)
    if (pevent->OSEventGrp != 0) {                         /* See if any tasks waiting on semaphore    */
   160c0:	e0bffd17 	ldw	r2,-12(fp)
   160c4:	10800283 	ldbu	r2,10(r2)
   160c8:	10803fcc 	andi	r2,r2,255
   160cc:	10000326 	beq	r2,zero,160dc <OSSemDel+0xdc>
        tasks_waiting = OS_TRUE;                           /* Yes                                      */
   160d0:	00800044 	movi	r2,1
   160d4:	e0bff505 	stb	r2,-44(fp)
   160d8:	00000106 	br	160e0 <OSSemDel+0xe0>
    } else {
        tasks_waiting = OS_FALSE;                          /* No                                       */
   160dc:	e03ff505 	stb	zero,-44(fp)
    }
    switch (opt) {
   160e0:	e0bffe03 	ldbu	r2,-8(fp)
   160e4:	10000326 	beq	r2,zero,160f4 <OSSemDel+0xf4>
   160e8:	10800060 	cmpeqi	r2,r2,1
   160ec:	10002c1e 	bne	r2,zero,161a0 <OSSemDel+0x1a0>
   160f0:	00004d06 	br	16228 <OSSemDel+0x228>
        case OS_DEL_NO_PEND:                               /* Delete semaphore only if no task waiting */
             if (tasks_waiting == OS_FALSE) {
   160f4:	e0bff503 	ldbu	r2,-44(fp)
   160f8:	10001a1e 	bne	r2,zero,16164 <OSSemDel+0x164>
#if OS_EVENT_NAME_SIZE > 1
                 pevent->OSEventName[0] = '?';             /* Unknown name                             */
   160fc:	e0bffd17 	ldw	r2,-12(fp)
   16100:	00c00fc4 	movi	r3,63
   16104:	10c00385 	stb	r3,14(r2)
                 pevent->OSEventName[1] = OS_ASCII_NUL;
   16108:	e0bffd17 	ldw	r2,-12(fp)
   1610c:	100003c5 	stb	zero,15(r2)
#endif
                 pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
   16110:	e0bffd17 	ldw	r2,-12(fp)
   16114:	10000005 	stb	zero,0(r2)
                 pevent->OSEventPtr     = OSEventFreeList; /* Return Event Control Block to free list  */
   16118:	008000b4 	movhi	r2,2
   1611c:	10931604 	addi	r2,r2,19544
   16120:	10c00017 	ldw	r3,0(r2)
   16124:	e0bffd17 	ldw	r2,-12(fp)
   16128:	10c00115 	stw	r3,4(r2)
                 pevent->OSEventCnt     = 0;
   1612c:	e0bffd17 	ldw	r2,-12(fp)
   16130:	1000020d 	sth	zero,8(r2)
                 OSEventFreeList        = pevent;          /* Get next free event control block        */
   16134:	008000b4 	movhi	r2,2
   16138:	10931604 	addi	r2,r2,19544
   1613c:	e0fffd17 	ldw	r3,-12(fp)
   16140:	10c00015 	stw	r3,0(r2)
   16144:	e0bff717 	ldw	r2,-36(fp)
   16148:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1614c:	e0bff917 	ldw	r2,-28(fp)
   16150:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_NONE;
   16154:	e0bfff17 	ldw	r2,-4(fp)
   16158:	10000005 	stb	zero,0(r2)
                 pevent_return          = (OS_EVENT *)0;   /* Semaphore has been deleted               */
   1615c:	e03ff615 	stw	zero,-40(fp)
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_TASK_WAITING;
                 pevent_return          = pevent;
             }
             break;
   16160:	00003b06 	br	16250 <OSSemDel+0x250>
   16164:	e0bff717 	ldw	r2,-36(fp)
   16168:	e0bffa15 	stw	r2,-24(fp)
   1616c:	e0bffa17 	ldw	r2,-24(fp)
   16170:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_NONE;
                 pevent_return          = (OS_EVENT *)0;   /* Semaphore has been deleted               */
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_TASK_WAITING;
   16174:	e0bfff17 	ldw	r2,-4(fp)
   16178:	00c01244 	movi	r3,73
   1617c:	10c00005 	stb	r3,0(r2)
                 pevent_return          = pevent;
   16180:	e0bffd17 	ldw	r2,-12(fp)
   16184:	e0bff615 	stw	r2,-40(fp)
             }
             break;
   16188:	00003106 	br	16250 <OSSemDel+0x250>

        case OS_DEL_ALWAYS:                                /* Always delete the semaphore              */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for semaphore    */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_OK);
   1618c:	e13ffd17 	ldw	r4,-12(fp)
   16190:	000b883a 	mov	r5,zero
   16194:	01800044 	movi	r6,1
   16198:	000f883a 	mov	r7,zero
   1619c:	0011a240 	call	11a24 <OS_EventTaskRdy>
                 pevent_return          = pevent;
             }
             break;

        case OS_DEL_ALWAYS:                                /* Always delete the semaphore              */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for semaphore    */
   161a0:	e0bffd17 	ldw	r2,-12(fp)
   161a4:	10800283 	ldbu	r2,10(r2)
   161a8:	10803fcc 	andi	r2,r2,255
   161ac:	103ff71e 	bne	r2,zero,1618c <__alt_mem_Flash_flash_data+0xf401618c>
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_OK);
             }
#if OS_EVENT_NAME_SIZE > 1
             pevent->OSEventName[0] = '?';                 /* Unknown name                             */
   161b0:	e0bffd17 	ldw	r2,-12(fp)
   161b4:	00c00fc4 	movi	r3,63
   161b8:	10c00385 	stb	r3,14(r2)
             pevent->OSEventName[1] = OS_ASCII_NUL;
   161bc:	e0bffd17 	ldw	r2,-12(fp)
   161c0:	100003c5 	stb	zero,15(r2)
#endif
             pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
   161c4:	e0bffd17 	ldw	r2,-12(fp)
   161c8:	10000005 	stb	zero,0(r2)
             pevent->OSEventPtr     = OSEventFreeList;     /* Return Event Control Block to free list  */
   161cc:	008000b4 	movhi	r2,2
   161d0:	10931604 	addi	r2,r2,19544
   161d4:	10c00017 	ldw	r3,0(r2)
   161d8:	e0bffd17 	ldw	r2,-12(fp)
   161dc:	10c00115 	stw	r3,4(r2)
             pevent->OSEventCnt     = 0;
   161e0:	e0bffd17 	ldw	r2,-12(fp)
   161e4:	1000020d 	sth	zero,8(r2)
             OSEventFreeList        = pevent;              /* Get next free event control block        */
   161e8:	008000b4 	movhi	r2,2
   161ec:	10931604 	addi	r2,r2,19544
   161f0:	e0fffd17 	ldw	r3,-12(fp)
   161f4:	10c00015 	stw	r3,0(r2)
   161f8:	e0bff717 	ldw	r2,-36(fp)
   161fc:	e0bffb15 	stw	r2,-20(fp)
   16200:	e0bffb17 	ldw	r2,-20(fp)
   16204:	1001703a 	wrctl	status,r2
             OS_EXIT_CRITICAL();
             if (tasks_waiting == OS_TRUE) {               /* Reschedule only if task(s) were waiting  */
   16208:	e0bff503 	ldbu	r2,-44(fp)
   1620c:	10800058 	cmpnei	r2,r2,1
   16210:	1000011e 	bne	r2,zero,16218 <OSSemDel+0x218>
                 OS_Sched();                               /* Find highest priority task ready to run  */
   16214:	001243c0 	call	1243c <OS_Sched>
             }
             *perr                  = OS_ERR_NONE;
   16218:	e0bfff17 	ldw	r2,-4(fp)
   1621c:	10000005 	stb	zero,0(r2)
             pevent_return          = (OS_EVENT *)0;       /* Semaphore has been deleted               */
   16220:	e03ff615 	stw	zero,-40(fp)
             break;
   16224:	00000a06 	br	16250 <OSSemDel+0x250>
   16228:	e0bff717 	ldw	r2,-36(fp)
   1622c:	e0bffc15 	stw	r2,-16(fp)
   16230:	e0bffc17 	ldw	r2,-16(fp)
   16234:	1001703a 	wrctl	status,r2

        default:
             OS_EXIT_CRITICAL();
             *perr                  = OS_ERR_INVALID_OPT;
   16238:	e0bfff17 	ldw	r2,-4(fp)
   1623c:	00c001c4 	movi	r3,7
   16240:	10c00005 	stb	r3,0(r2)
             pevent_return          = pevent;
   16244:	e0bffd17 	ldw	r2,-12(fp)
   16248:	e0bff615 	stw	r2,-40(fp)
             break;
   1624c:	0001883a 	nop
    }
    return (pevent_return);
   16250:	e0bff617 	ldw	r2,-40(fp)
}
   16254:	e037883a 	mov	sp,fp
   16258:	dfc00117 	ldw	ra,4(sp)
   1625c:	df000017 	ldw	fp,0(sp)
   16260:	dec00204 	addi	sp,sp,8
   16264:	f800283a 	ret

00016268 <OSSemPend>:
* Returns    : none
*********************************************************************************************************
*/
/*$PAGE*/
void  OSSemPend (OS_EVENT *pevent, INT16U timeout, INT8U *perr)
{
   16268:	defff504 	addi	sp,sp,-44
   1626c:	dfc00a15 	stw	ra,40(sp)
   16270:	df000915 	stw	fp,36(sp)
   16274:	df000904 	addi	fp,sp,36
   16278:	e13ffd15 	stw	r4,-12(fp)
   1627c:	2805883a 	mov	r2,r5
   16280:	e1bfff15 	stw	r6,-4(fp)
   16284:	e0bffe0d 	sth	r2,-8(fp)
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   16288:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
   1628c:	e0bfff17 	ldw	r2,-4(fp)
   16290:	1000011e 	bne	r2,zero,16298 <OSSemPend+0x30>
        return;
   16294:	00008906 	br	164bc <OSSemPend+0x254>
    }
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
   16298:	e0bffd17 	ldw	r2,-12(fp)
   1629c:	1000041e 	bne	r2,zero,162b0 <OSSemPend+0x48>
        *perr = OS_ERR_PEVENT_NULL;
   162a0:	e0bfff17 	ldw	r2,-4(fp)
   162a4:	00c00104 	movi	r3,4
   162a8:	10c00005 	stb	r3,0(r2)
        return;
   162ac:	00008306 	br	164bc <OSSemPend+0x254>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
   162b0:	e0bffd17 	ldw	r2,-12(fp)
   162b4:	10800003 	ldbu	r2,0(r2)
   162b8:	10803fcc 	andi	r2,r2,255
   162bc:	108000e0 	cmpeqi	r2,r2,3
   162c0:	1000041e 	bne	r2,zero,162d4 <OSSemPend+0x6c>
        *perr = OS_ERR_EVENT_TYPE;
   162c4:	e0bfff17 	ldw	r2,-4(fp)
   162c8:	00c00044 	movi	r3,1
   162cc:	10c00005 	stb	r3,0(r2)
        return;
   162d0:	00007a06 	br	164bc <OSSemPend+0x254>
    }
    if (OSIntNesting > 0) {                           /* See if called from ISR ...                    */
   162d4:	008000b4 	movhi	r2,2
   162d8:	10931704 	addi	r2,r2,19548
   162dc:	10800003 	ldbu	r2,0(r2)
   162e0:	10803fcc 	andi	r2,r2,255
   162e4:	10000426 	beq	r2,zero,162f8 <OSSemPend+0x90>
        *perr = OS_ERR_PEND_ISR;                      /* ... can't PEND from an ISR                    */
   162e8:	e0bfff17 	ldw	r2,-4(fp)
   162ec:	00c00084 	movi	r3,2
   162f0:	10c00005 	stb	r3,0(r2)
        return;
   162f4:	00007106 	br	164bc <OSSemPend+0x254>
    }
    if (OSLockNesting > 0) {                          /* See if called with scheduler locked ...       */
   162f8:	008000b4 	movhi	r2,2
   162fc:	10930904 	addi	r2,r2,19492
   16300:	10800003 	ldbu	r2,0(r2)
   16304:	10803fcc 	andi	r2,r2,255
   16308:	10000426 	beq	r2,zero,1631c <OSSemPend+0xb4>
        *perr = OS_ERR_PEND_LOCKED;                   /* ... can't PEND when locked                    */
   1630c:	e0bfff17 	ldw	r2,-4(fp)
   16310:	00c00344 	movi	r3,13
   16314:	10c00005 	stb	r3,0(r2)
        return;
   16318:	00006806 	br	164bc <OSSemPend+0x254>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1631c:	0005303a 	rdctl	r2,status
   16320:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   16324:	e0fff817 	ldw	r3,-32(fp)
   16328:	00bfff84 	movi	r2,-2
   1632c:	1884703a 	and	r2,r3,r2
   16330:	1001703a 	wrctl	status,r2
  
  return context;
   16334:	e0bff817 	ldw	r2,-32(fp)
    }
    OS_ENTER_CRITICAL();
   16338:	e0bff715 	stw	r2,-36(fp)
    if (pevent->OSEventCnt > 0) {                     /* If sem. is positive, resource available ...   */
   1633c:	e0bffd17 	ldw	r2,-12(fp)
   16340:	1080020b 	ldhu	r2,8(r2)
   16344:	10bfffcc 	andi	r2,r2,65535
   16348:	10000d26 	beq	r2,zero,16380 <OSSemPend+0x118>
        pevent->OSEventCnt--;                         /* ... decrement semaphore only if positive.     */
   1634c:	e0bffd17 	ldw	r2,-12(fp)
   16350:	1080020b 	ldhu	r2,8(r2)
   16354:	10bfffc4 	addi	r2,r2,-1
   16358:	1007883a 	mov	r3,r2
   1635c:	e0bffd17 	ldw	r2,-12(fp)
   16360:	10c0020d 	sth	r3,8(r2)
   16364:	e0bff717 	ldw	r2,-36(fp)
   16368:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1636c:	e0bff917 	ldw	r2,-28(fp)
   16370:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_NONE;
   16374:	e0bfff17 	ldw	r2,-4(fp)
   16378:	10000005 	stb	zero,0(r2)
        return;
   1637c:	00004f06 	br	164bc <OSSemPend+0x254>
    }
                                                      /* Otherwise, must wait until event occurs       */
    OSTCBCur->OSTCBStat     |= OS_STAT_SEM;           /* Resource not available, pend on semaphore     */
   16380:	008000b4 	movhi	r2,2
   16384:	10931804 	addi	r2,r2,19552
   16388:	10c00017 	ldw	r3,0(r2)
   1638c:	008000b4 	movhi	r2,2
   16390:	10931804 	addi	r2,r2,19552
   16394:	10800017 	ldw	r2,0(r2)
   16398:	10800c03 	ldbu	r2,48(r2)
   1639c:	10800054 	ori	r2,r2,1
   163a0:	18800c05 	stb	r2,48(r3)
    OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
   163a4:	008000b4 	movhi	r2,2
   163a8:	10931804 	addi	r2,r2,19552
   163ac:	10800017 	ldw	r2,0(r2)
   163b0:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBDly       = timeout;               /* Store pend timeout in TCB                     */
   163b4:	008000b4 	movhi	r2,2
   163b8:	10931804 	addi	r2,r2,19552
   163bc:	10800017 	ldw	r2,0(r2)
   163c0:	e0fffe0b 	ldhu	r3,-8(fp)
   163c4:	10c00b8d 	sth	r3,46(r2)
    OS_EventTaskWait(pevent);                         /* Suspend task until event or timeout occurs    */
   163c8:	e13ffd17 	ldw	r4,-12(fp)
   163cc:	0011bbc0 	call	11bbc <OS_EventTaskWait>
   163d0:	e0bff717 	ldw	r2,-36(fp)
   163d4:	e0bffa15 	stw	r2,-24(fp)
   163d8:	e0bffa17 	ldw	r2,-24(fp)
   163dc:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    OS_Sched();                                       /* Find next highest priority task ready         */
   163e0:	001243c0 	call	1243c <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   163e4:	0005303a 	rdctl	r2,status
   163e8:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   163ec:	e0fffb17 	ldw	r3,-20(fp)
   163f0:	00bfff84 	movi	r2,-2
   163f4:	1884703a 	and	r2,r3,r2
   163f8:	1001703a 	wrctl	status,r2
  
  return context;
   163fc:	e0bffb17 	ldw	r2,-20(fp)
    OS_ENTER_CRITICAL();
   16400:	e0bff715 	stw	r2,-36(fp)
    switch (OSTCBCur->OSTCBStatPend) {                /* See if we timed-out or aborted                */
   16404:	008000b4 	movhi	r2,2
   16408:	10931804 	addi	r2,r2,19552
   1640c:	10800017 	ldw	r2,0(r2)
   16410:	10800c43 	ldbu	r2,49(r2)
   16414:	10803fcc 	andi	r2,r2,255
   16418:	10000326 	beq	r2,zero,16428 <OSSemPend+0x1c0>
   1641c:	108000a0 	cmpeqi	r2,r2,2
   16420:	1000041e 	bne	r2,zero,16434 <OSSemPend+0x1cc>
   16424:	00000706 	br	16444 <OSSemPend+0x1dc>
        case OS_STAT_PEND_OK:
             *perr = OS_ERR_NONE;
   16428:	e0bfff17 	ldw	r2,-4(fp)
   1642c:	10000005 	stb	zero,0(r2)
             break;
   16430:	00000e06 	br	1646c <OSSemPend+0x204>

        case OS_STAT_PEND_ABORT:
             *perr = OS_ERR_PEND_ABORT;               /* Indicate that we aborted                      */
   16434:	e0bfff17 	ldw	r2,-4(fp)
   16438:	00c00384 	movi	r3,14
   1643c:	10c00005 	stb	r3,0(r2)
             break;
   16440:	00000a06 	br	1646c <OSSemPend+0x204>

        case OS_STAT_PEND_TO:
        default:        
             OS_EventTaskRemove(OSTCBCur, pevent);
   16444:	008000b4 	movhi	r2,2
   16448:	10931804 	addi	r2,r2,19552
   1644c:	10800017 	ldw	r2,0(r2)
   16450:	1009883a 	mov	r4,r2
   16454:	e17ffd17 	ldw	r5,-12(fp)
   16458:	0011e140 	call	11e14 <OS_EventTaskRemove>
             *perr = OS_ERR_TIMEOUT;                  /* Indicate that we didn't get event within TO   */
   1645c:	e0bfff17 	ldw	r2,-4(fp)
   16460:	00c00284 	movi	r3,10
   16464:	10c00005 	stb	r3,0(r2)
             break;
   16468:	0001883a 	nop
    }
    OSTCBCur->OSTCBStat          =  OS_STAT_RDY;      /* Set   task  status to ready                   */
   1646c:	008000b4 	movhi	r2,2
   16470:	10931804 	addi	r2,r2,19552
   16474:	10800017 	ldw	r2,0(r2)
   16478:	10000c05 	stb	zero,48(r2)
    OSTCBCur->OSTCBStatPend      =  OS_STAT_PEND_OK;  /* Clear pend  status                            */
   1647c:	008000b4 	movhi	r2,2
   16480:	10931804 	addi	r2,r2,19552
   16484:	10800017 	ldw	r2,0(r2)
   16488:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;    /* Clear event pointers                          */
   1648c:	008000b4 	movhi	r2,2
   16490:	10931804 	addi	r2,r2,19552
   16494:	10800017 	ldw	r2,0(r2)
   16498:	10000715 	stw	zero,28(r2)
#if (OS_EVENT_MULTI_EN > 0)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
   1649c:	008000b4 	movhi	r2,2
   164a0:	10931804 	addi	r2,r2,19552
   164a4:	10800017 	ldw	r2,0(r2)
   164a8:	10000815 	stw	zero,32(r2)
   164ac:	e0bff717 	ldw	r2,-36(fp)
   164b0:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   164b4:	e0bffc17 	ldw	r2,-16(fp)
   164b8:	1001703a 	wrctl	status,r2
#endif
    OS_EXIT_CRITICAL();
}
   164bc:	e037883a 	mov	sp,fp
   164c0:	dfc00117 	ldw	ra,4(sp)
   164c4:	df000017 	ldw	fp,0(sp)
   164c8:	dec00204 	addi	sp,sp,8
   164cc:	f800283a 	ret

000164d0 <OSSemPendAbort>:
*********************************************************************************************************
*/

#if OS_SEM_PEND_ABORT_EN > 0
INT8U  OSSemPendAbort (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
   164d0:	defff604 	addi	sp,sp,-40
   164d4:	dfc00915 	stw	ra,36(sp)
   164d8:	df000815 	stw	fp,32(sp)
   164dc:	df000804 	addi	fp,sp,32
   164e0:	e13ffd15 	stw	r4,-12(fp)
   164e4:	2805883a 	mov	r2,r5
   164e8:	e1bfff15 	stw	r6,-4(fp)
   164ec:	e0bffe05 	stb	r2,-8(fp)
    INT8U      nbr_tasks;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   164f0:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
   164f4:	e0bfff17 	ldw	r2,-4(fp)
   164f8:	1000021e 	bne	r2,zero,16504 <OSSemPendAbort+0x34>
        return (0);
   164fc:	0005883a 	mov	r2,zero
   16500:	00004906 	br	16628 <OSSemPendAbort+0x158>
    }
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
   16504:	e0bffd17 	ldw	r2,-12(fp)
   16508:	1000051e 	bne	r2,zero,16520 <OSSemPendAbort+0x50>
        *perr = OS_ERR_PEVENT_NULL;
   1650c:	e0bfff17 	ldw	r2,-4(fp)
   16510:	00c00104 	movi	r3,4
   16514:	10c00005 	stb	r3,0(r2)
        return (0);
   16518:	0005883a 	mov	r2,zero
   1651c:	00004206 	br	16628 <OSSemPendAbort+0x158>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
   16520:	e0bffd17 	ldw	r2,-12(fp)
   16524:	10800003 	ldbu	r2,0(r2)
   16528:	10803fcc 	andi	r2,r2,255
   1652c:	108000e0 	cmpeqi	r2,r2,3
   16530:	1000051e 	bne	r2,zero,16548 <OSSemPendAbort+0x78>
        *perr = OS_ERR_EVENT_TYPE;
   16534:	e0bfff17 	ldw	r2,-4(fp)
   16538:	00c00044 	movi	r3,1
   1653c:	10c00005 	stb	r3,0(r2)
        return (0);
   16540:	0005883a 	mov	r2,zero
   16544:	00003806 	br	16628 <OSSemPendAbort+0x158>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   16548:	0005303a 	rdctl	r2,status
   1654c:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   16550:	e0fffa17 	ldw	r3,-24(fp)
   16554:	00bfff84 	movi	r2,-2
   16558:	1884703a 	and	r2,r3,r2
   1655c:	1001703a 	wrctl	status,r2
  
  return context;
   16560:	e0bffa17 	ldw	r2,-24(fp)
    }
    OS_ENTER_CRITICAL();
   16564:	e0bff915 	stw	r2,-28(fp)
    if (pevent->OSEventGrp != 0) {                    /* See if any task waiting on semaphore?         */
   16568:	e0bffd17 	ldw	r2,-12(fp)
   1656c:	10800283 	ldbu	r2,10(r2)
   16570:	10803fcc 	andi	r2,r2,255
   16574:	10002526 	beq	r2,zero,1660c <OSSemPendAbort+0x13c>
        nbr_tasks = 0;
   16578:	e03ff805 	stb	zero,-32(fp)
        switch (opt) {
   1657c:	e0bffe03 	ldbu	r2,-8(fp)
   16580:	10800060 	cmpeqi	r2,r2,1
   16584:	10000e26 	beq	r2,zero,165c0 <OSSemPendAbort+0xf0>
            case OS_PEND_OPT_BROADCAST:               /* Do we need to abort ALL waiting tasks?        */
                 while (pevent->OSEventGrp != 0) {    /* Yes, ready ALL tasks waiting on semaphore     */
   16588:	00000806 	br	165ac <OSSemPendAbort+0xdc>
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_ABORT);
   1658c:	e13ffd17 	ldw	r4,-12(fp)
   16590:	000b883a 	mov	r5,zero
   16594:	01800044 	movi	r6,1
   16598:	01c00084 	movi	r7,2
   1659c:	0011a240 	call	11a24 <OS_EventTaskRdy>
                     nbr_tasks++;
   165a0:	e0bff803 	ldbu	r2,-32(fp)
   165a4:	10800044 	addi	r2,r2,1
   165a8:	e0bff805 	stb	r2,-32(fp)
    OS_ENTER_CRITICAL();
    if (pevent->OSEventGrp != 0) {                    /* See if any task waiting on semaphore?         */
        nbr_tasks = 0;
        switch (opt) {
            case OS_PEND_OPT_BROADCAST:               /* Do we need to abort ALL waiting tasks?        */
                 while (pevent->OSEventGrp != 0) {    /* Yes, ready ALL tasks waiting on semaphore     */
   165ac:	e0bffd17 	ldw	r2,-12(fp)
   165b0:	10800283 	ldbu	r2,10(r2)
   165b4:	10803fcc 	andi	r2,r2,255
   165b8:	103ff41e 	bne	r2,zero,1658c <__alt_mem_Flash_flash_data+0xf401658c>
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_ABORT);
                     nbr_tasks++;
                 }
                 break;
   165bc:	00000906 	br	165e4 <OSSemPendAbort+0x114>
                 
            case OS_PEND_OPT_NONE:
            default:                                  /* No,  ready HPT       waiting on semaphore     */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_ABORT);
   165c0:	e13ffd17 	ldw	r4,-12(fp)
   165c4:	000b883a 	mov	r5,zero
   165c8:	01800044 	movi	r6,1
   165cc:	01c00084 	movi	r7,2
   165d0:	0011a240 	call	11a24 <OS_EventTaskRdy>
                 nbr_tasks++;
   165d4:	e0bff803 	ldbu	r2,-32(fp)
   165d8:	10800044 	addi	r2,r2,1
   165dc:	e0bff805 	stb	r2,-32(fp)
                 break;
   165e0:	0001883a 	nop
   165e4:	e0bff917 	ldw	r2,-28(fp)
   165e8:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   165ec:	e0bffb17 	ldw	r2,-20(fp)
   165f0:	1001703a 	wrctl	status,r2
        }
        OS_EXIT_CRITICAL();
        OS_Sched();                                   /* Find HPT ready to run                         */
   165f4:	001243c0 	call	1243c <OS_Sched>
        *perr = OS_ERR_PEND_ABORT;
   165f8:	e0bfff17 	ldw	r2,-4(fp)
   165fc:	00c00384 	movi	r3,14
   16600:	10c00005 	stb	r3,0(r2)
        return (nbr_tasks);
   16604:	e0bff803 	ldbu	r2,-32(fp)
   16608:	00000706 	br	16628 <OSSemPendAbort+0x158>
   1660c:	e0bff917 	ldw	r2,-28(fp)
   16610:	e0bffc15 	stw	r2,-16(fp)
   16614:	e0bffc17 	ldw	r2,-16(fp)
   16618:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
   1661c:	e0bfff17 	ldw	r2,-4(fp)
   16620:	10000005 	stb	zero,0(r2)
    return (0);                                       /* No tasks waiting on semaphore                 */
   16624:	0005883a 	mov	r2,zero
}
   16628:	e037883a 	mov	sp,fp
   1662c:	dfc00117 	ldw	ra,4(sp)
   16630:	df000017 	ldw	fp,0(sp)
   16634:	dec00204 	addi	sp,sp,8
   16638:	f800283a 	ret

0001663c <OSSemPost>:
*              OS_ERR_PEVENT_NULL  If 'pevent' is a NULL pointer.
*********************************************************************************************************
*/

INT8U  OSSemPost (OS_EVENT *pevent)
{
   1663c:	defff804 	addi	sp,sp,-32
   16640:	dfc00715 	stw	ra,28(sp)
   16644:	df000615 	stw	fp,24(sp)
   16648:	df000604 	addi	fp,sp,24
   1664c:	e13fff15 	stw	r4,-4(fp)
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   16650:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
   16654:	e0bfff17 	ldw	r2,-4(fp)
   16658:	1000021e 	bne	r2,zero,16664 <OSSemPost+0x28>
        return (OS_ERR_PEVENT_NULL);
   1665c:	00800104 	movi	r2,4
   16660:	00003506 	br	16738 <OSSemPost+0xfc>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
   16664:	e0bfff17 	ldw	r2,-4(fp)
   16668:	10800003 	ldbu	r2,0(r2)
   1666c:	10803fcc 	andi	r2,r2,255
   16670:	108000e0 	cmpeqi	r2,r2,3
   16674:	1000021e 	bne	r2,zero,16680 <OSSemPost+0x44>
        return (OS_ERR_EVENT_TYPE);
   16678:	00800044 	movi	r2,1
   1667c:	00002e06 	br	16738 <OSSemPost+0xfc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   16680:	0005303a 	rdctl	r2,status
   16684:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   16688:	e0fffb17 	ldw	r3,-20(fp)
   1668c:	00bfff84 	movi	r2,-2
   16690:	1884703a 	and	r2,r3,r2
   16694:	1001703a 	wrctl	status,r2
  
  return context;
   16698:	e0bffb17 	ldw	r2,-20(fp)
    }
    OS_ENTER_CRITICAL();
   1669c:	e0bffa15 	stw	r2,-24(fp)
    if (pevent->OSEventGrp != 0) {                    /* See if any task waiting for semaphore         */
   166a0:	e0bfff17 	ldw	r2,-4(fp)
   166a4:	10800283 	ldbu	r2,10(r2)
   166a8:	10803fcc 	andi	r2,r2,255
   166ac:	10000c26 	beq	r2,zero,166e0 <OSSemPost+0xa4>
                                                      /* Ready HPT waiting on event                    */
        (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_OK);
   166b0:	e13fff17 	ldw	r4,-4(fp)
   166b4:	000b883a 	mov	r5,zero
   166b8:	01800044 	movi	r6,1
   166bc:	000f883a 	mov	r7,zero
   166c0:	0011a240 	call	11a24 <OS_EventTaskRdy>
   166c4:	e0bffa17 	ldw	r2,-24(fp)
   166c8:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   166cc:	e0bffc17 	ldw	r2,-16(fp)
   166d0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                                   /* Find HPT ready to run                         */
   166d4:	001243c0 	call	1243c <OS_Sched>
        return (OS_ERR_NONE);
   166d8:	0005883a 	mov	r2,zero
   166dc:	00001606 	br	16738 <OSSemPost+0xfc>
    }
    if (pevent->OSEventCnt < 65535u) {                /* Make sure semaphore will not overflow         */
   166e0:	e0bfff17 	ldw	r2,-4(fp)
   166e4:	1080020b 	ldhu	r2,8(r2)
   166e8:	10ffffcc 	andi	r3,r2,65535
   166ec:	00bfffd4 	movui	r2,65535
   166f0:	18800c26 	beq	r3,r2,16724 <OSSemPost+0xe8>
        pevent->OSEventCnt++;                         /* Increment semaphore count to register event   */
   166f4:	e0bfff17 	ldw	r2,-4(fp)
   166f8:	1080020b 	ldhu	r2,8(r2)
   166fc:	10800044 	addi	r2,r2,1
   16700:	1007883a 	mov	r3,r2
   16704:	e0bfff17 	ldw	r2,-4(fp)
   16708:	10c0020d 	sth	r3,8(r2)
   1670c:	e0bffa17 	ldw	r2,-24(fp)
   16710:	e0bffd15 	stw	r2,-12(fp)
   16714:	e0bffd17 	ldw	r2,-12(fp)
   16718:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_NONE);
   1671c:	0005883a 	mov	r2,zero
   16720:	00000506 	br	16738 <OSSemPost+0xfc>
   16724:	e0bffa17 	ldw	r2,-24(fp)
   16728:	e0bffe15 	stw	r2,-8(fp)
   1672c:	e0bffe17 	ldw	r2,-8(fp)
   16730:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();                               /* Semaphore value has reached its maximum       */
    return (OS_ERR_SEM_OVF);
   16734:	00800c84 	movi	r2,50
}
   16738:	e037883a 	mov	sp,fp
   1673c:	dfc00117 	ldw	ra,4(sp)
   16740:	df000017 	ldw	fp,0(sp)
   16744:	dec00204 	addi	sp,sp,8
   16748:	f800283a 	ret

0001674c <OSSemQuery>:
*********************************************************************************************************
*/

#if OS_SEM_QUERY_EN > 0
INT8U  OSSemQuery (OS_EVENT *pevent, OS_SEM_DATA *p_sem_data)
{
   1674c:	defff704 	addi	sp,sp,-36
   16750:	df000815 	stw	fp,32(sp)
   16754:	df000804 	addi	fp,sp,32
   16758:	e13ffe15 	stw	r4,-8(fp)
   1675c:	e17fff15 	stw	r5,-4(fp)
    INT16U    *psrc;
    INT16U    *pdest;
#endif
    INT8U      i;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
   16760:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
   16764:	e0bffe17 	ldw	r2,-8(fp)
   16768:	1000021e 	bne	r2,zero,16774 <OSSemQuery+0x28>
        return (OS_ERR_PEVENT_NULL);
   1676c:	00800104 	movi	r2,4
   16770:	00003606 	br	1684c <OSSemQuery+0x100>
    }
    if (p_sem_data == (OS_SEM_DATA *)0) {                  /* Validate 'p_sem_data'                    */
   16774:	e0bfff17 	ldw	r2,-4(fp)
   16778:	1000021e 	bne	r2,zero,16784 <OSSemQuery+0x38>
        return (OS_ERR_PDATA_NULL);
   1677c:	00800244 	movi	r2,9
   16780:	00003206 	br	1684c <OSSemQuery+0x100>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {        /* Validate event block type                */
   16784:	e0bffe17 	ldw	r2,-8(fp)
   16788:	10800003 	ldbu	r2,0(r2)
   1678c:	10803fcc 	andi	r2,r2,255
   16790:	108000e0 	cmpeqi	r2,r2,3
   16794:	1000021e 	bne	r2,zero,167a0 <OSSemQuery+0x54>
        return (OS_ERR_EVENT_TYPE);
   16798:	00800044 	movi	r2,1
   1679c:	00002b06 	br	1684c <OSSemQuery+0x100>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   167a0:	0005303a 	rdctl	r2,status
   167a4:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   167a8:	e0fffc17 	ldw	r3,-16(fp)
   167ac:	00bfff84 	movi	r2,-2
   167b0:	1884703a 	and	r2,r3,r2
   167b4:	1001703a 	wrctl	status,r2
  
  return context;
   167b8:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
   167bc:	e0bffb15 	stw	r2,-20(fp)
    p_sem_data->OSEventGrp = pevent->OSEventGrp;           /* Copy message mailbox wait list           */
   167c0:	e0bffe17 	ldw	r2,-8(fp)
   167c4:	10c00283 	ldbu	r3,10(r2)
   167c8:	e0bfff17 	ldw	r2,-4(fp)
   167cc:	10c00145 	stb	r3,5(r2)
    psrc                   = &pevent->OSEventTbl[0];
   167d0:	e0bffe17 	ldw	r2,-8(fp)
   167d4:	108002c4 	addi	r2,r2,11
   167d8:	e0bff815 	stw	r2,-32(fp)
    pdest                  = &p_sem_data->OSEventTbl[0];
   167dc:	e0bfff17 	ldw	r2,-4(fp)
   167e0:	10800084 	addi	r2,r2,2
   167e4:	e0bff915 	stw	r2,-28(fp)
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
   167e8:	e03ffa05 	stb	zero,-24(fp)
   167ec:	00000b06 	br	1681c <OSSemQuery+0xd0>
        *pdest++ = *psrc++;
   167f0:	e0bff917 	ldw	r2,-28(fp)
   167f4:	10c00044 	addi	r3,r2,1
   167f8:	e0fff915 	stw	r3,-28(fp)
   167fc:	e0fff817 	ldw	r3,-32(fp)
   16800:	19000044 	addi	r4,r3,1
   16804:	e13ff815 	stw	r4,-32(fp)
   16808:	18c00003 	ldbu	r3,0(r3)
   1680c:	10c00005 	stb	r3,0(r2)
    }
    OS_ENTER_CRITICAL();
    p_sem_data->OSEventGrp = pevent->OSEventGrp;           /* Copy message mailbox wait list           */
    psrc                   = &pevent->OSEventTbl[0];
    pdest                  = &p_sem_data->OSEventTbl[0];
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
   16810:	e0bffa03 	ldbu	r2,-24(fp)
   16814:	10800044 	addi	r2,r2,1
   16818:	e0bffa05 	stb	r2,-24(fp)
   1681c:	e0bffa03 	ldbu	r2,-24(fp)
   16820:	108000f0 	cmpltui	r2,r2,3
   16824:	103ff21e 	bne	r2,zero,167f0 <__alt_mem_Flash_flash_data+0xf40167f0>
        *pdest++ = *psrc++;
    }
    p_sem_data->OSCnt = pevent->OSEventCnt;                /* Get semaphore count                      */
   16828:	e0bffe17 	ldw	r2,-8(fp)
   1682c:	10c0020b 	ldhu	r3,8(r2)
   16830:	e0bfff17 	ldw	r2,-4(fp)
   16834:	10c0000d 	sth	r3,0(r2)
   16838:	e0bffb17 	ldw	r2,-20(fp)
   1683c:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   16840:	e0bffd17 	ldw	r2,-12(fp)
   16844:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
   16848:	0005883a 	mov	r2,zero
}
   1684c:	e037883a 	mov	sp,fp
   16850:	df000017 	ldw	fp,0(sp)
   16854:	dec00104 	addi	sp,sp,4
   16858:	f800283a 	ret

0001685c <OSSemSet>:
*********************************************************************************************************
*/

#if OS_SEM_SET_EN > 0
void  OSSemSet (OS_EVENT *pevent, INT16U cnt, INT8U *perr)
{
   1685c:	defff904 	addi	sp,sp,-28
   16860:	df000615 	stw	fp,24(sp)
   16864:	df000604 	addi	fp,sp,24
   16868:	e13ffd15 	stw	r4,-12(fp)
   1686c:	2805883a 	mov	r2,r5
   16870:	e1bfff15 	stw	r6,-4(fp)
   16874:	e0bffe0d 	sth	r2,-8(fp)
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   16878:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
   1687c:	e0bfff17 	ldw	r2,-4(fp)
   16880:	1000011e 	bne	r2,zero,16888 <OSSemSet+0x2c>
        return;
   16884:	00003006 	br	16948 <OSSemSet+0xec>
    }
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
   16888:	e0bffd17 	ldw	r2,-12(fp)
   1688c:	1000041e 	bne	r2,zero,168a0 <OSSemSet+0x44>
        *perr = OS_ERR_PEVENT_NULL;
   16890:	e0bfff17 	ldw	r2,-4(fp)
   16894:	00c00104 	movi	r3,4
   16898:	10c00005 	stb	r3,0(r2)
        return;
   1689c:	00002a06 	br	16948 <OSSemSet+0xec>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
   168a0:	e0bffd17 	ldw	r2,-12(fp)
   168a4:	10800003 	ldbu	r2,0(r2)
   168a8:	10803fcc 	andi	r2,r2,255
   168ac:	108000e0 	cmpeqi	r2,r2,3
   168b0:	1000041e 	bne	r2,zero,168c4 <OSSemSet+0x68>
        *perr = OS_ERR_EVENT_TYPE;
   168b4:	e0bfff17 	ldw	r2,-4(fp)
   168b8:	00c00044 	movi	r3,1
   168bc:	10c00005 	stb	r3,0(r2)
        return;
   168c0:	00002106 	br	16948 <OSSemSet+0xec>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   168c4:	0005303a 	rdctl	r2,status
   168c8:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   168cc:	e0fffb17 	ldw	r3,-20(fp)
   168d0:	00bfff84 	movi	r2,-2
   168d4:	1884703a 	and	r2,r3,r2
   168d8:	1001703a 	wrctl	status,r2
  
  return context;
   168dc:	e0bffb17 	ldw	r2,-20(fp)
    }
    OS_ENTER_CRITICAL();
   168e0:	e0bffa15 	stw	r2,-24(fp)
    *perr = OS_ERR_NONE;
   168e4:	e0bfff17 	ldw	r2,-4(fp)
   168e8:	10000005 	stb	zero,0(r2)
    if (pevent->OSEventCnt > 0) {                     /* See if semaphore already has a count          */
   168ec:	e0bffd17 	ldw	r2,-12(fp)
   168f0:	1080020b 	ldhu	r2,8(r2)
   168f4:	10bfffcc 	andi	r2,r2,65535
   168f8:	10000426 	beq	r2,zero,1690c <OSSemSet+0xb0>
        pevent->OSEventCnt = cnt;                     /* Yes, set it to the new value specified.       */
   168fc:	e0bffd17 	ldw	r2,-12(fp)
   16900:	e0fffe0b 	ldhu	r3,-8(fp)
   16904:	10c0020d 	sth	r3,8(r2)
   16908:	00000b06 	br	16938 <OSSemSet+0xdc>
    } else {                                          /* No                                            */
        if (pevent->OSEventGrp == 0) {                /*      See if task(s) waiting?                  */
   1690c:	e0bffd17 	ldw	r2,-12(fp)
   16910:	10800283 	ldbu	r2,10(r2)
   16914:	10803fcc 	andi	r2,r2,255
   16918:	1000041e 	bne	r2,zero,1692c <OSSemSet+0xd0>
            pevent->OSEventCnt = cnt;                 /*      No, OK to set the value                  */
   1691c:	e0bffd17 	ldw	r2,-12(fp)
   16920:	e0fffe0b 	ldhu	r3,-8(fp)
   16924:	10c0020d 	sth	r3,8(r2)
   16928:	00000306 	br	16938 <OSSemSet+0xdc>
        } else {
            *perr              = OS_ERR_TASK_WAITING;
   1692c:	e0bfff17 	ldw	r2,-4(fp)
   16930:	00c01244 	movi	r3,73
   16934:	10c00005 	stb	r3,0(r2)
   16938:	e0bffa17 	ldw	r2,-24(fp)
   1693c:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   16940:	e0bffc17 	ldw	r2,-16(fp)
   16944:	1001703a 	wrctl	status,r2
        }
    }
    OS_EXIT_CRITICAL();
}
   16948:	e037883a 	mov	sp,fp
   1694c:	df000017 	ldw	fp,0(sp)
   16950:	dec00104 	addi	sp,sp,4
   16954:	f800283a 	ret

00016958 <OSTaskChangePrio>:
*********************************************************************************************************
*/

#if OS_TASK_CHANGE_PRIO_EN > 0
INT8U  OSTaskChangePrio (INT8U oldprio, INT8U newprio)
{
   16958:	defff104 	addi	sp,sp,-60
   1695c:	dfc00e15 	stw	ra,56(sp)
   16960:	df000d15 	stw	fp,52(sp)
   16964:	df000d04 	addi	fp,sp,52
   16968:	2007883a 	mov	r3,r4
   1696c:	2805883a 	mov	r2,r5
   16970:	e0fffe05 	stb	r3,-8(fp)
   16974:	e0bfff05 	stb	r2,-4(fp)
    INT16U     bitx_new;
    INT16U     bity_old;
    INT16U     bitx_old;
#endif
#if OS_CRITICAL_METHOD == 3
    OS_CPU_SR  cpu_sr = 0;                                  /* Storage for CPU status register         */
   16978:	e03ff515 	stw	zero,-44(fp)
#endif


/*$PAGE*/
#if OS_ARG_CHK_EN > 0
    if (oldprio >= OS_LOWEST_PRIO) {
   1697c:	e0bffe03 	ldbu	r2,-8(fp)
   16980:	10800530 	cmpltui	r2,r2,20
   16984:	1000051e 	bne	r2,zero,1699c <OSTaskChangePrio+0x44>
        if (oldprio != OS_PRIO_SELF) {
   16988:	e0bffe03 	ldbu	r2,-8(fp)
   1698c:	10803fe0 	cmpeqi	r2,r2,255
   16990:	1000021e 	bne	r2,zero,1699c <OSTaskChangePrio+0x44>
            return (OS_ERR_PRIO_INVALID);
   16994:	00800a84 	movi	r2,42
   16998:	00013a06 	br	16e84 <OSTaskChangePrio+0x52c>
        }
    }
    if (newprio >= OS_LOWEST_PRIO) {
   1699c:	e0bfff03 	ldbu	r2,-4(fp)
   169a0:	10800530 	cmpltui	r2,r2,20
   169a4:	1000021e 	bne	r2,zero,169b0 <OSTaskChangePrio+0x58>
        return (OS_ERR_PRIO_INVALID);
   169a8:	00800a84 	movi	r2,42
   169ac:	00013506 	br	16e84 <OSTaskChangePrio+0x52c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   169b0:	0005303a 	rdctl	r2,status
   169b4:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   169b8:	e0fff917 	ldw	r3,-28(fp)
   169bc:	00bfff84 	movi	r2,-2
   169c0:	1884703a 	and	r2,r3,r2
   169c4:	1001703a 	wrctl	status,r2
  
  return context;
   169c8:	e0bff917 	ldw	r2,-28(fp)
    }
#endif
    OS_ENTER_CRITICAL();
   169cc:	e0bff515 	stw	r2,-44(fp)
    if (OSTCBPrioTbl[newprio] != (OS_TCB *)0) {             /* New priority must not already exist     */
   169d0:	e0ffff03 	ldbu	r3,-4(fp)
   169d4:	008000b4 	movhi	r2,2
   169d8:	109fc504 	addi	r2,r2,32532
   169dc:	18c7883a 	add	r3,r3,r3
   169e0:	18c7883a 	add	r3,r3,r3
   169e4:	10c5883a 	add	r2,r2,r3
   169e8:	10800017 	ldw	r2,0(r2)
   169ec:	10000626 	beq	r2,zero,16a08 <OSTaskChangePrio+0xb0>
   169f0:	e0bff517 	ldw	r2,-44(fp)
   169f4:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   169f8:	e0bffa17 	ldw	r2,-24(fp)
   169fc:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_PRIO_EXIST);
   16a00:	00800a04 	movi	r2,40
   16a04:	00011f06 	br	16e84 <OSTaskChangePrio+0x52c>
    }
    if (oldprio == OS_PRIO_SELF) {                          /* See if changing self                    */
   16a08:	e0bffe03 	ldbu	r2,-8(fp)
   16a0c:	10803fd8 	cmpnei	r2,r2,255
   16a10:	1000051e 	bne	r2,zero,16a28 <OSTaskChangePrio+0xd0>
        oldprio = OSTCBCur->OSTCBPrio;                      /* Yes, get priority                       */
   16a14:	008000b4 	movhi	r2,2
   16a18:	10931804 	addi	r2,r2,19552
   16a1c:	10800017 	ldw	r2,0(r2)
   16a20:	10800c83 	ldbu	r2,50(r2)
   16a24:	e0bffe05 	stb	r2,-8(fp)
    }
    ptcb = OSTCBPrioTbl[oldprio];
   16a28:	e0fffe03 	ldbu	r3,-8(fp)
   16a2c:	008000b4 	movhi	r2,2
   16a30:	109fc504 	addi	r2,r2,32532
   16a34:	18c7883a 	add	r3,r3,r3
   16a38:	18c7883a 	add	r3,r3,r3
   16a3c:	10c5883a 	add	r2,r2,r3
   16a40:	10800017 	ldw	r2,0(r2)
   16a44:	e0bff615 	stw	r2,-40(fp)
    if (ptcb == (OS_TCB *)0) {                              /* Does task to change exist?              */
   16a48:	e0bff617 	ldw	r2,-40(fp)
   16a4c:	1000061e 	bne	r2,zero,16a68 <OSTaskChangePrio+0x110>
   16a50:	e0bff517 	ldw	r2,-44(fp)
   16a54:	e0bffb15 	stw	r2,-20(fp)
   16a58:	e0bffb17 	ldw	r2,-20(fp)
   16a5c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                                 /* No, can't change its priority!          */
        return (OS_ERR_PRIO);
   16a60:	00800a44 	movi	r2,41
   16a64:	00010706 	br	16e84 <OSTaskChangePrio+0x52c>
    }
    if (ptcb == OS_TCB_RESERVED) {                          /* Is task assigned to Mutex               */
   16a68:	e0bff617 	ldw	r2,-40(fp)
   16a6c:	10800058 	cmpnei	r2,r2,1
   16a70:	1000061e 	bne	r2,zero,16a8c <OSTaskChangePrio+0x134>
   16a74:	e0bff517 	ldw	r2,-44(fp)
   16a78:	e0bffc15 	stw	r2,-16(fp)
   16a7c:	e0bffc17 	ldw	r2,-16(fp)
   16a80:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                                 /* No, can't change its priority!          */
        return (OS_ERR_TASK_NOT_EXIST);
   16a84:	008010c4 	movi	r2,67
   16a88:	0000fe06 	br	16e84 <OSTaskChangePrio+0x52c>
    }
#if OS_LOWEST_PRIO <= 63
    y_new                 = (INT8U)(newprio >> 3);          /* Yes, compute new TCB fields             */
   16a8c:	e0bfff03 	ldbu	r2,-4(fp)
   16a90:	1004d0fa 	srli	r2,r2,3
   16a94:	e0bff705 	stb	r2,-36(fp)
    x_new                 = (INT8U)(newprio & 0x07);
   16a98:	e0bfff03 	ldbu	r2,-4(fp)
   16a9c:	108001cc 	andi	r2,r2,7
   16aa0:	e0bff745 	stb	r2,-35(fp)
    bity_new              = (INT8U)(1 << y_new);
   16aa4:	e0bff703 	ldbu	r2,-36(fp)
   16aa8:	00c00044 	movi	r3,1
   16aac:	1884983a 	sll	r2,r3,r2
   16ab0:	e0bff785 	stb	r2,-34(fp)
    bitx_new              = (INT8U)(1 << x_new);
   16ab4:	e0bff743 	ldbu	r2,-35(fp)
   16ab8:	00c00044 	movi	r3,1
   16abc:	1884983a 	sll	r2,r3,r2
   16ac0:	e0bff7c5 	stb	r2,-33(fp)
    x_new                 = (INT8U)( newprio & 0x0F);
    bity_new              = (INT16U)(1 << y_new);
    bitx_new              = (INT16U)(1 << x_new);
#endif

    OSTCBPrioTbl[oldprio] = (OS_TCB *)0;                    /* Remove TCB from old priority            */
   16ac4:	e0fffe03 	ldbu	r3,-8(fp)
   16ac8:	008000b4 	movhi	r2,2
   16acc:	109fc504 	addi	r2,r2,32532
   16ad0:	18c7883a 	add	r3,r3,r3
   16ad4:	18c7883a 	add	r3,r3,r3
   16ad8:	10c5883a 	add	r2,r2,r3
   16adc:	10000015 	stw	zero,0(r2)
    OSTCBPrioTbl[newprio] =  ptcb;                          /* Place pointer to TCB @ new priority     */
   16ae0:	e0ffff03 	ldbu	r3,-4(fp)
   16ae4:	008000b4 	movhi	r2,2
   16ae8:	109fc504 	addi	r2,r2,32532
   16aec:	18c7883a 	add	r3,r3,r3
   16af0:	18c7883a 	add	r3,r3,r3
   16af4:	10c5883a 	add	r2,r2,r3
   16af8:	e0fff617 	ldw	r3,-40(fp)
   16afc:	10c00015 	stw	r3,0(r2)
    y_old                 =  ptcb->OSTCBY;
   16b00:	e0bff617 	ldw	r2,-40(fp)
   16b04:	10800d03 	ldbu	r2,52(r2)
   16b08:	e0bff805 	stb	r2,-32(fp)
    bity_old              =  ptcb->OSTCBBitY;
   16b0c:	e0bff617 	ldw	r2,-40(fp)
   16b10:	10800d83 	ldbu	r2,54(r2)
   16b14:	e0bff845 	stb	r2,-31(fp)
    bitx_old              =  ptcb->OSTCBBitX;
   16b18:	e0bff617 	ldw	r2,-40(fp)
   16b1c:	10800d43 	ldbu	r2,53(r2)
   16b20:	e0bff885 	stb	r2,-30(fp)
    if ((OSRdyTbl[y_old] &   bitx_old) != 0) {              /* If task is ready make it not            */
   16b24:	e0fff803 	ldbu	r3,-32(fp)
   16b28:	008000b4 	movhi	r2,2
   16b2c:	10931544 	addi	r2,r2,19541
   16b30:	10c5883a 	add	r2,r2,r3
   16b34:	10c00003 	ldbu	r3,0(r2)
   16b38:	e0bff883 	ldbu	r2,-30(fp)
   16b3c:	1884703a 	and	r2,r3,r2
   16b40:	10803fcc 	andi	r2,r2,255
   16b44:	10003726 	beq	r2,zero,16c24 <OSTaskChangePrio+0x2cc>
         OSRdyTbl[y_old] &= ~bitx_old;
   16b48:	e0fff803 	ldbu	r3,-32(fp)
   16b4c:	e13ff803 	ldbu	r4,-32(fp)
   16b50:	008000b4 	movhi	r2,2
   16b54:	10931544 	addi	r2,r2,19541
   16b58:	1105883a 	add	r2,r2,r4
   16b5c:	10800003 	ldbu	r2,0(r2)
   16b60:	1009883a 	mov	r4,r2
   16b64:	e0bff883 	ldbu	r2,-30(fp)
   16b68:	0084303a 	nor	r2,zero,r2
   16b6c:	2084703a 	and	r2,r4,r2
   16b70:	1009883a 	mov	r4,r2
   16b74:	008000b4 	movhi	r2,2
   16b78:	10931544 	addi	r2,r2,19541
   16b7c:	10c5883a 	add	r2,r2,r3
   16b80:	11000005 	stb	r4,0(r2)
         if (OSRdyTbl[y_old] == 0) {
   16b84:	e0fff803 	ldbu	r3,-32(fp)
   16b88:	008000b4 	movhi	r2,2
   16b8c:	10931544 	addi	r2,r2,19541
   16b90:	10c5883a 	add	r2,r2,r3
   16b94:	10800003 	ldbu	r2,0(r2)
   16b98:	10803fcc 	andi	r2,r2,255
   16b9c:	10000b1e 	bne	r2,zero,16bcc <OSTaskChangePrio+0x274>
             OSRdyGrp &= ~bity_old;
   16ba0:	e0bff843 	ldbu	r2,-31(fp)
   16ba4:	0084303a 	nor	r2,zero,r2
   16ba8:	1007883a 	mov	r3,r2
   16bac:	008000b4 	movhi	r2,2
   16bb0:	10931504 	addi	r2,r2,19540
   16bb4:	10800003 	ldbu	r2,0(r2)
   16bb8:	1884703a 	and	r2,r3,r2
   16bbc:	1007883a 	mov	r3,r2
   16bc0:	008000b4 	movhi	r2,2
   16bc4:	10931504 	addi	r2,r2,19540
   16bc8:	10c00005 	stb	r3,0(r2)
         }
         OSRdyGrp        |= bity_new;                       /* Make new priority ready to run          */
   16bcc:	008000b4 	movhi	r2,2
   16bd0:	10931504 	addi	r2,r2,19540
   16bd4:	10c00003 	ldbu	r3,0(r2)
   16bd8:	e0bff783 	ldbu	r2,-34(fp)
   16bdc:	1884b03a 	or	r2,r3,r2
   16be0:	1007883a 	mov	r3,r2
   16be4:	008000b4 	movhi	r2,2
   16be8:	10931504 	addi	r2,r2,19540
   16bec:	10c00005 	stb	r3,0(r2)
         OSRdyTbl[y_new] |= bitx_new;
   16bf0:	e0fff703 	ldbu	r3,-36(fp)
   16bf4:	e13ff703 	ldbu	r4,-36(fp)
   16bf8:	008000b4 	movhi	r2,2
   16bfc:	10931544 	addi	r2,r2,19541
   16c00:	1105883a 	add	r2,r2,r4
   16c04:	11000003 	ldbu	r4,0(r2)
   16c08:	e0bff7c3 	ldbu	r2,-33(fp)
   16c0c:	2084b03a 	or	r2,r4,r2
   16c10:	1009883a 	mov	r4,r2
   16c14:	008000b4 	movhi	r2,2
   16c18:	10931544 	addi	r2,r2,19541
   16c1c:	10c5883a 	add	r2,r2,r3
   16c20:	11000005 	stb	r4,0(r2)
    }

#if (OS_EVENT_EN)
    pevent = ptcb->OSTCBEventPtr;
   16c24:	e0bff617 	ldw	r2,-40(fp)
   16c28:	10800717 	ldw	r2,28(r2)
   16c2c:	e0bff315 	stw	r2,-52(fp)
    if (pevent != (OS_EVENT *)0) {
   16c30:	e0bff317 	ldw	r2,-52(fp)
   16c34:	10003326 	beq	r2,zero,16d04 <OSTaskChangePrio+0x3ac>
        pevent->OSEventTbl[y_old] &= ~bitx_old;             /* Remove old task prio from wait list     */
   16c38:	e0bff803 	ldbu	r2,-32(fp)
   16c3c:	e0fff803 	ldbu	r3,-32(fp)
   16c40:	e13ff317 	ldw	r4,-52(fp)
   16c44:	20c7883a 	add	r3,r4,r3
   16c48:	18c00204 	addi	r3,r3,8
   16c4c:	18c000c3 	ldbu	r3,3(r3)
   16c50:	1809883a 	mov	r4,r3
   16c54:	e0fff883 	ldbu	r3,-30(fp)
   16c58:	00c6303a 	nor	r3,zero,r3
   16c5c:	20c6703a 	and	r3,r4,r3
   16c60:	1809883a 	mov	r4,r3
   16c64:	e0fff317 	ldw	r3,-52(fp)
   16c68:	1885883a 	add	r2,r3,r2
   16c6c:	10800204 	addi	r2,r2,8
   16c70:	110000c5 	stb	r4,3(r2)
        if (pevent->OSEventTbl[y_old] == 0) {
   16c74:	e0bff803 	ldbu	r2,-32(fp)
   16c78:	e0fff317 	ldw	r3,-52(fp)
   16c7c:	1885883a 	add	r2,r3,r2
   16c80:	10800204 	addi	r2,r2,8
   16c84:	108000c3 	ldbu	r2,3(r2)
   16c88:	10803fcc 	andi	r2,r2,255
   16c8c:	1000091e 	bne	r2,zero,16cb4 <OSTaskChangePrio+0x35c>
            pevent->OSEventGrp    &= ~bity_old;
   16c90:	e0bff317 	ldw	r2,-52(fp)
   16c94:	10800283 	ldbu	r2,10(r2)
   16c98:	1007883a 	mov	r3,r2
   16c9c:	e0bff843 	ldbu	r2,-31(fp)
   16ca0:	0084303a 	nor	r2,zero,r2
   16ca4:	1884703a 	and	r2,r3,r2
   16ca8:	1007883a 	mov	r3,r2
   16cac:	e0bff317 	ldw	r2,-52(fp)
   16cb0:	10c00285 	stb	r3,10(r2)
        }
        pevent->OSEventGrp        |= bity_new;              /* Add    new task prio to   wait list     */
   16cb4:	e0bff317 	ldw	r2,-52(fp)
   16cb8:	10c00283 	ldbu	r3,10(r2)
   16cbc:	e0bff783 	ldbu	r2,-34(fp)
   16cc0:	1884b03a 	or	r2,r3,r2
   16cc4:	1007883a 	mov	r3,r2
   16cc8:	e0bff317 	ldw	r2,-52(fp)
   16ccc:	10c00285 	stb	r3,10(r2)
        pevent->OSEventTbl[y_new] |= bitx_new;
   16cd0:	e0bff703 	ldbu	r2,-36(fp)
   16cd4:	e0fff703 	ldbu	r3,-36(fp)
   16cd8:	e13ff317 	ldw	r4,-52(fp)
   16cdc:	20c7883a 	add	r3,r4,r3
   16ce0:	18c00204 	addi	r3,r3,8
   16ce4:	190000c3 	ldbu	r4,3(r3)
   16ce8:	e0fff7c3 	ldbu	r3,-33(fp)
   16cec:	20c6b03a 	or	r3,r4,r3
   16cf0:	1809883a 	mov	r4,r3
   16cf4:	e0fff317 	ldw	r3,-52(fp)
   16cf8:	1885883a 	add	r2,r3,r2
   16cfc:	10800204 	addi	r2,r2,8
   16d00:	110000c5 	stb	r4,3(r2)
    }
#if (OS_EVENT_MULTI_EN > 0)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {
   16d04:	e0bff617 	ldw	r2,-40(fp)
   16d08:	10800817 	ldw	r2,32(r2)
   16d0c:	10004226 	beq	r2,zero,16e18 <OSTaskChangePrio+0x4c0>
        pevents =  ptcb->OSTCBEventMultiPtr;
   16d10:	e0bff617 	ldw	r2,-40(fp)
   16d14:	10800817 	ldw	r2,32(r2)
   16d18:	e0bff415 	stw	r2,-48(fp)
        pevent  = *pevents;
   16d1c:	e0bff417 	ldw	r2,-48(fp)
   16d20:	10800017 	ldw	r2,0(r2)
   16d24:	e0bff315 	stw	r2,-52(fp)
        while (pevent != (OS_EVENT *)0) {
   16d28:	00003906 	br	16e10 <OSTaskChangePrio+0x4b8>
            pevent->OSEventTbl[y_old] &= ~bitx_old;         /* Remove old task prio from wait lists    */
   16d2c:	e0bff803 	ldbu	r2,-32(fp)
   16d30:	e0fff803 	ldbu	r3,-32(fp)
   16d34:	e13ff317 	ldw	r4,-52(fp)
   16d38:	20c7883a 	add	r3,r4,r3
   16d3c:	18c00204 	addi	r3,r3,8
   16d40:	18c000c3 	ldbu	r3,3(r3)
   16d44:	1809883a 	mov	r4,r3
   16d48:	e0fff883 	ldbu	r3,-30(fp)
   16d4c:	00c6303a 	nor	r3,zero,r3
   16d50:	20c6703a 	and	r3,r4,r3
   16d54:	1809883a 	mov	r4,r3
   16d58:	e0fff317 	ldw	r3,-52(fp)
   16d5c:	1885883a 	add	r2,r3,r2
   16d60:	10800204 	addi	r2,r2,8
   16d64:	110000c5 	stb	r4,3(r2)
            if (pevent->OSEventTbl[y_old] == 0) {
   16d68:	e0bff803 	ldbu	r2,-32(fp)
   16d6c:	e0fff317 	ldw	r3,-52(fp)
   16d70:	1885883a 	add	r2,r3,r2
   16d74:	10800204 	addi	r2,r2,8
   16d78:	108000c3 	ldbu	r2,3(r2)
   16d7c:	10803fcc 	andi	r2,r2,255
   16d80:	1000091e 	bne	r2,zero,16da8 <OSTaskChangePrio+0x450>
                pevent->OSEventGrp    &= ~bity_old;
   16d84:	e0bff317 	ldw	r2,-52(fp)
   16d88:	10800283 	ldbu	r2,10(r2)
   16d8c:	1007883a 	mov	r3,r2
   16d90:	e0bff843 	ldbu	r2,-31(fp)
   16d94:	0084303a 	nor	r2,zero,r2
   16d98:	1884703a 	and	r2,r3,r2
   16d9c:	1007883a 	mov	r3,r2
   16da0:	e0bff317 	ldw	r2,-52(fp)
   16da4:	10c00285 	stb	r3,10(r2)
            }
            pevent->OSEventGrp        |= bity_new;          /* Add    new task prio to   wait lists    */
   16da8:	e0bff317 	ldw	r2,-52(fp)
   16dac:	10c00283 	ldbu	r3,10(r2)
   16db0:	e0bff783 	ldbu	r2,-34(fp)
   16db4:	1884b03a 	or	r2,r3,r2
   16db8:	1007883a 	mov	r3,r2
   16dbc:	e0bff317 	ldw	r2,-52(fp)
   16dc0:	10c00285 	stb	r3,10(r2)
            pevent->OSEventTbl[y_new] |= bitx_new;
   16dc4:	e0bff703 	ldbu	r2,-36(fp)
   16dc8:	e0fff703 	ldbu	r3,-36(fp)
   16dcc:	e13ff317 	ldw	r4,-52(fp)
   16dd0:	20c7883a 	add	r3,r4,r3
   16dd4:	18c00204 	addi	r3,r3,8
   16dd8:	190000c3 	ldbu	r4,3(r3)
   16ddc:	e0fff7c3 	ldbu	r3,-33(fp)
   16de0:	20c6b03a 	or	r3,r4,r3
   16de4:	1809883a 	mov	r4,r3
   16de8:	e0fff317 	ldw	r3,-52(fp)
   16dec:	1885883a 	add	r2,r3,r2
   16df0:	10800204 	addi	r2,r2,8
   16df4:	110000c5 	stb	r4,3(r2)
            pevents++;
   16df8:	e0bff417 	ldw	r2,-48(fp)
   16dfc:	10800104 	addi	r2,r2,4
   16e00:	e0bff415 	stw	r2,-48(fp)
            pevent                     = *pevents;
   16e04:	e0bff417 	ldw	r2,-48(fp)
   16e08:	10800017 	ldw	r2,0(r2)
   16e0c:	e0bff315 	stw	r2,-52(fp)
    }
#if (OS_EVENT_MULTI_EN > 0)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {
        pevents =  ptcb->OSTCBEventMultiPtr;
        pevent  = *pevents;
        while (pevent != (OS_EVENT *)0) {
   16e10:	e0bff317 	ldw	r2,-52(fp)
   16e14:	103fc51e 	bne	r2,zero,16d2c <__alt_mem_Flash_flash_data+0xf4016d2c>
        }
    }
#endif
#endif

    ptcb->OSTCBPrio = newprio;                              /* Set new task priority                   */
   16e18:	e0bff617 	ldw	r2,-40(fp)
   16e1c:	e0ffff03 	ldbu	r3,-4(fp)
   16e20:	10c00c85 	stb	r3,50(r2)
    ptcb->OSTCBY    = y_new;
   16e24:	e0bff617 	ldw	r2,-40(fp)
   16e28:	e0fff703 	ldbu	r3,-36(fp)
   16e2c:	10c00d05 	stb	r3,52(r2)
    ptcb->OSTCBX    = x_new;
   16e30:	e0bff617 	ldw	r2,-40(fp)
   16e34:	e0fff743 	ldbu	r3,-35(fp)
   16e38:	10c00cc5 	stb	r3,51(r2)
    ptcb->OSTCBBitY = bity_new;
   16e3c:	e0bff617 	ldw	r2,-40(fp)
   16e40:	e0fff783 	ldbu	r3,-34(fp)
   16e44:	10c00d85 	stb	r3,54(r2)
    ptcb->OSTCBBitX = bitx_new;
   16e48:	e0bff617 	ldw	r2,-40(fp)
   16e4c:	e0fff7c3 	ldbu	r3,-33(fp)
   16e50:	10c00d45 	stb	r3,53(r2)
   16e54:	e0bff517 	ldw	r2,-44(fp)
   16e58:	e0bffd15 	stw	r2,-12(fp)
   16e5c:	e0bffd17 	ldw	r2,-12(fp)
   16e60:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    if (OSRunning == OS_TRUE) {
   16e64:	008000b4 	movhi	r2,2
   16e68:	10930944 	addi	r2,r2,19493
   16e6c:	10800003 	ldbu	r2,0(r2)
   16e70:	10803fcc 	andi	r2,r2,255
   16e74:	10800058 	cmpnei	r2,r2,1
   16e78:	1000011e 	bne	r2,zero,16e80 <OSTaskChangePrio+0x528>
        OS_Sched();                                         /* Find new highest priority task          */
   16e7c:	001243c0 	call	1243c <OS_Sched>
    }
    return (OS_ERR_NONE);
   16e80:	0005883a 	mov	r2,zero
}
   16e84:	e037883a 	mov	sp,fp
   16e88:	dfc00117 	ldw	ra,4(sp)
   16e8c:	df000017 	ldw	fp,0(sp)
   16e90:	dec00204 	addi	sp,sp,8
   16e94:	f800283a 	ret

00016e98 <OSTaskCreate>:
*********************************************************************************************************
*/

#if OS_TASK_CREATE_EN > 0
INT8U  OSTaskCreate (void (*task)(void *p_arg), void *p_arg, OS_STK *ptos, INT8U prio)
{
   16e98:	deffee04 	addi	sp,sp,-72
   16e9c:	dfc01115 	stw	ra,68(sp)
   16ea0:	df001015 	stw	fp,64(sp)
   16ea4:	df001004 	addi	fp,sp,64
   16ea8:	e13ffc15 	stw	r4,-16(fp)
   16eac:	e17ffd15 	stw	r5,-12(fp)
   16eb0:	e1bffe15 	stw	r6,-8(fp)
   16eb4:	3805883a 	mov	r2,r7
   16eb8:	e0bfff05 	stb	r2,-4(fp)
    OS_STK    *psp;
    INT8U      err;
#if OS_CRITICAL_METHOD == 3                  /* Allocate storage for CPU status register               */
    OS_CPU_SR  cpu_sr = 0;
   16ebc:	e03ff315 	stw	zero,-52(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio > OS_LOWEST_PRIO) {             /* Make sure priority is within allowable range           */
   16ec0:	e0bfff03 	ldbu	r2,-4(fp)
   16ec4:	10800570 	cmpltui	r2,r2,21
   16ec8:	1000021e 	bne	r2,zero,16ed4 <OSTaskCreate+0x3c>
        return (OS_ERR_PRIO_INVALID);
   16ecc:	00800a84 	movi	r2,42
   16ed0:	00005b06 	br	17040 <OSTaskCreate+0x1a8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   16ed4:	0005303a 	rdctl	r2,status
   16ed8:	e0bff615 	stw	r2,-40(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   16edc:	e0fff617 	ldw	r3,-40(fp)
   16ee0:	00bfff84 	movi	r2,-2
   16ee4:	1884703a 	and	r2,r3,r2
   16ee8:	1001703a 	wrctl	status,r2
  
  return context;
   16eec:	e0bff617 	ldw	r2,-40(fp)
    }
#endif
    OS_ENTER_CRITICAL();
   16ef0:	e0bff315 	stw	r2,-52(fp)
    if (OSIntNesting > 0) {                  /* Make sure we don't create the task from within an ISR  */
   16ef4:	008000b4 	movhi	r2,2
   16ef8:	10931704 	addi	r2,r2,19548
   16efc:	10800003 	ldbu	r2,0(r2)
   16f00:	10803fcc 	andi	r2,r2,255
   16f04:	10000626 	beq	r2,zero,16f20 <OSTaskCreate+0x88>
   16f08:	e0bff317 	ldw	r2,-52(fp)
   16f0c:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   16f10:	e0bff717 	ldw	r2,-36(fp)
   16f14:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_CREATE_ISR);
   16f18:	00800f04 	movi	r2,60
   16f1c:	00004806 	br	17040 <OSTaskCreate+0x1a8>
    }
    if (OSTCBPrioTbl[prio] == (OS_TCB *)0) { /* Make sure task doesn't already exist at this priority  */
   16f20:	e0ffff03 	ldbu	r3,-4(fp)
   16f24:	008000b4 	movhi	r2,2
   16f28:	109fc504 	addi	r2,r2,32532
   16f2c:	18c7883a 	add	r3,r3,r3
   16f30:	18c7883a 	add	r3,r3,r3
   16f34:	10c5883a 	add	r2,r2,r3
   16f38:	10800017 	ldw	r2,0(r2)
   16f3c:	10003b1e 	bne	r2,zero,1702c <OSTaskCreate+0x194>
        OSTCBPrioTbl[prio] = OS_TCB_RESERVED;/* Reserve the priority to prevent others from doing ...  */
   16f40:	e0ffff03 	ldbu	r3,-4(fp)
   16f44:	008000b4 	movhi	r2,2
   16f48:	109fc504 	addi	r2,r2,32532
   16f4c:	18c7883a 	add	r3,r3,r3
   16f50:	18c7883a 	add	r3,r3,r3
   16f54:	10c5883a 	add	r2,r2,r3
   16f58:	00c00044 	movi	r3,1
   16f5c:	10c00015 	stw	r3,0(r2)
   16f60:	e0bff317 	ldw	r2,-52(fp)
   16f64:	e0bff815 	stw	r2,-32(fp)
   16f68:	e0bff817 	ldw	r2,-32(fp)
   16f6c:	1001703a 	wrctl	status,r2
                                             /* ... the same thing until task is created.              */
        OS_EXIT_CRITICAL();
        psp = OSTaskStkInit(task, p_arg, ptos, 0);              /* Initialize the task's stack         */
   16f70:	e13ffc17 	ldw	r4,-16(fp)
   16f74:	e17ffd17 	ldw	r5,-12(fp)
   16f78:	e1bffe17 	ldw	r6,-8(fp)
   16f7c:	000f883a 	mov	r7,zero
   16f80:	001fdf40 	call	1fdf4 <OSTaskStkInit>
   16f84:	e0bff415 	stw	r2,-48(fp)
        err = OS_TCBInit(prio, psp, (OS_STK *)0, 0, 0, (void *)0, 0);
   16f88:	e0bfff03 	ldbu	r2,-4(fp)
   16f8c:	d8000015 	stw	zero,0(sp)
   16f90:	d8000115 	stw	zero,4(sp)
   16f94:	d8000215 	stw	zero,8(sp)
   16f98:	1009883a 	mov	r4,r2
   16f9c:	e17ff417 	ldw	r5,-48(fp)
   16fa0:	000d883a 	mov	r6,zero
   16fa4:	000f883a 	mov	r7,zero
   16fa8:	00128400 	call	12840 <OS_TCBInit>
   16fac:	e0bff505 	stb	r2,-44(fp)
        if (err == OS_ERR_NONE) {
   16fb0:	e0bff503 	ldbu	r2,-44(fp)
   16fb4:	1000081e 	bne	r2,zero,16fd8 <OSTaskCreate+0x140>
            if (OSRunning == OS_TRUE) {      /* Find highest priority task if multitasking has started */
   16fb8:	008000b4 	movhi	r2,2
   16fbc:	10930944 	addi	r2,r2,19493
   16fc0:	10800003 	ldbu	r2,0(r2)
   16fc4:	10803fcc 	andi	r2,r2,255
   16fc8:	10800058 	cmpnei	r2,r2,1
   16fcc:	1000151e 	bne	r2,zero,17024 <OSTaskCreate+0x18c>
                OS_Sched();
   16fd0:	001243c0 	call	1243c <OS_Sched>
   16fd4:	00001306 	br	17024 <OSTaskCreate+0x18c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   16fd8:	0005303a 	rdctl	r2,status
   16fdc:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   16fe0:	e0fff917 	ldw	r3,-28(fp)
   16fe4:	00bfff84 	movi	r2,-2
   16fe8:	1884703a 	and	r2,r3,r2
   16fec:	1001703a 	wrctl	status,r2
  
  return context;
   16ff0:	e0bff917 	ldw	r2,-28(fp)
            }
        } else {
            OS_ENTER_CRITICAL();
   16ff4:	e0bff315 	stw	r2,-52(fp)
            OSTCBPrioTbl[prio] = (OS_TCB *)0;/* Make this priority available to others                 */
   16ff8:	e0ffff03 	ldbu	r3,-4(fp)
   16ffc:	008000b4 	movhi	r2,2
   17000:	109fc504 	addi	r2,r2,32532
   17004:	18c7883a 	add	r3,r3,r3
   17008:	18c7883a 	add	r3,r3,r3
   1700c:	10c5883a 	add	r2,r2,r3
   17010:	10000015 	stw	zero,0(r2)
   17014:	e0bff317 	ldw	r2,-52(fp)
   17018:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1701c:	e0bffa17 	ldw	r2,-24(fp)
   17020:	1001703a 	wrctl	status,r2
            OS_EXIT_CRITICAL();
        }
        return (err);
   17024:	e0bff503 	ldbu	r2,-44(fp)
   17028:	00000506 	br	17040 <OSTaskCreate+0x1a8>
   1702c:	e0bff317 	ldw	r2,-52(fp)
   17030:	e0bffb15 	stw	r2,-20(fp)
   17034:	e0bffb17 	ldw	r2,-20(fp)
   17038:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_PRIO_EXIST);
   1703c:	00800a04 	movi	r2,40
}
   17040:	e037883a 	mov	sp,fp
   17044:	dfc00117 	ldw	ra,4(sp)
   17048:	df000017 	ldw	fp,0(sp)
   1704c:	dec00204 	addi	sp,sp,8
   17050:	f800283a 	ret

00017054 <OSTaskCreateExt>:
                        INT16U   id,
                        OS_STK  *pbos,
                        INT32U   stk_size,
                        void    *pext,
                        INT16U   opt)
{
   17054:	deffec04 	addi	sp,sp,-80
   17058:	dfc01315 	stw	ra,76(sp)
   1705c:	df001215 	stw	fp,72(sp)
   17060:	df001204 	addi	fp,sp,72
   17064:	e13ffa15 	stw	r4,-24(fp)
   17068:	e17ffb15 	stw	r5,-20(fp)
   1706c:	e1bffc15 	stw	r6,-16(fp)
   17070:	3809883a 	mov	r4,r7
   17074:	e0c00217 	ldw	r3,8(fp)
   17078:	e0800617 	ldw	r2,24(fp)
   1707c:	e13ffd05 	stb	r4,-12(fp)
   17080:	e0fffe0d 	sth	r3,-8(fp)
   17084:	e0bfff0d 	sth	r2,-4(fp)
    OS_STK    *psp;
    INT8U      err;
#if OS_CRITICAL_METHOD == 3                  /* Allocate storage for CPU status register               */
    OS_CPU_SR  cpu_sr = 0;
   17088:	e03ff115 	stw	zero,-60(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio > OS_LOWEST_PRIO) {             /* Make sure priority is within allowable range           */
   1708c:	e0bffd03 	ldbu	r2,-12(fp)
   17090:	10800570 	cmpltui	r2,r2,21
   17094:	1000021e 	bne	r2,zero,170a0 <OSTaskCreateExt+0x4c>
        return (OS_ERR_PRIO_INVALID);
   17098:	00800a84 	movi	r2,42
   1709c:	00006306 	br	1722c <OSTaskCreateExt+0x1d8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   170a0:	0005303a 	rdctl	r2,status
   170a4:	e0bff415 	stw	r2,-48(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   170a8:	e0fff417 	ldw	r3,-48(fp)
   170ac:	00bfff84 	movi	r2,-2
   170b0:	1884703a 	and	r2,r3,r2
   170b4:	1001703a 	wrctl	status,r2
  
  return context;
   170b8:	e0bff417 	ldw	r2,-48(fp)
    }
#endif
    OS_ENTER_CRITICAL();
   170bc:	e0bff115 	stw	r2,-60(fp)
    if (OSIntNesting > 0) {                  /* Make sure we don't create the task from within an ISR  */
   170c0:	008000b4 	movhi	r2,2
   170c4:	10931704 	addi	r2,r2,19548
   170c8:	10800003 	ldbu	r2,0(r2)
   170cc:	10803fcc 	andi	r2,r2,255
   170d0:	10000626 	beq	r2,zero,170ec <OSTaskCreateExt+0x98>
   170d4:	e0bff117 	ldw	r2,-60(fp)
   170d8:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   170dc:	e0bff517 	ldw	r2,-44(fp)
   170e0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_CREATE_ISR);
   170e4:	00800f04 	movi	r2,60
   170e8:	00005006 	br	1722c <OSTaskCreateExt+0x1d8>
    }
    if (OSTCBPrioTbl[prio] == (OS_TCB *)0) { /* Make sure task doesn't already exist at this priority  */
   170ec:	e0fffd03 	ldbu	r3,-12(fp)
   170f0:	008000b4 	movhi	r2,2
   170f4:	109fc504 	addi	r2,r2,32532
   170f8:	18c7883a 	add	r3,r3,r3
   170fc:	18c7883a 	add	r3,r3,r3
   17100:	10c5883a 	add	r2,r2,r3
   17104:	10800017 	ldw	r2,0(r2)
   17108:	1000431e 	bne	r2,zero,17218 <OSTaskCreateExt+0x1c4>
        OSTCBPrioTbl[prio] = OS_TCB_RESERVED;/* Reserve the priority to prevent others from doing ...  */
   1710c:	e0fffd03 	ldbu	r3,-12(fp)
   17110:	008000b4 	movhi	r2,2
   17114:	109fc504 	addi	r2,r2,32532
   17118:	18c7883a 	add	r3,r3,r3
   1711c:	18c7883a 	add	r3,r3,r3
   17120:	10c5883a 	add	r2,r2,r3
   17124:	00c00044 	movi	r3,1
   17128:	10c00015 	stw	r3,0(r2)
   1712c:	e0bff117 	ldw	r2,-60(fp)
   17130:	e0bff615 	stw	r2,-40(fp)
   17134:	e0bff617 	ldw	r2,-40(fp)
   17138:	1001703a 	wrctl	status,r2
                                             /* ... the same thing until task is created.              */
        OS_EXIT_CRITICAL();

#if (OS_TASK_STAT_STK_CHK_EN > 0)
        OS_TaskStkClr(pbos, stk_size, opt);                    /* Clear the task stack (if needed)     */
   1713c:	e0bfff0b 	ldhu	r2,-4(fp)
   17140:	e1000317 	ldw	r4,12(fp)
   17144:	e1400417 	ldw	r5,16(fp)
   17148:	100d883a 	mov	r6,r2
   1714c:	00181e00 	call	181e0 <OS_TaskStkClr>
#endif

        psp = OSTaskStkInit(task, p_arg, ptos, opt);           /* Initialize the task's stack          */
   17150:	e0bfff0b 	ldhu	r2,-4(fp)
   17154:	e13ffa17 	ldw	r4,-24(fp)
   17158:	e17ffb17 	ldw	r5,-20(fp)
   1715c:	e1bffc17 	ldw	r6,-16(fp)
   17160:	100f883a 	mov	r7,r2
   17164:	001fdf40 	call	1fdf4 <OSTaskStkInit>
   17168:	e0bff215 	stw	r2,-56(fp)
        err = OS_TCBInit(prio, psp, pbos, id, stk_size, pext, opt);
   1716c:	e13ffd03 	ldbu	r4,-12(fp)
   17170:	e1fffe0b 	ldhu	r7,-8(fp)
   17174:	e0bfff0b 	ldhu	r2,-4(fp)
   17178:	e0c00417 	ldw	r3,16(fp)
   1717c:	d8c00015 	stw	r3,0(sp)
   17180:	e0c00517 	ldw	r3,20(fp)
   17184:	d8c00115 	stw	r3,4(sp)
   17188:	d8800215 	stw	r2,8(sp)
   1718c:	e17ff217 	ldw	r5,-56(fp)
   17190:	e1800317 	ldw	r6,12(fp)
   17194:	00128400 	call	12840 <OS_TCBInit>
   17198:	e0bff305 	stb	r2,-52(fp)
        if (err == OS_ERR_NONE) {
   1719c:	e0bff303 	ldbu	r2,-52(fp)
   171a0:	1000081e 	bne	r2,zero,171c4 <OSTaskCreateExt+0x170>
            if (OSRunning == OS_TRUE) {                        /* Find HPT if multitasking has started */
   171a4:	008000b4 	movhi	r2,2
   171a8:	10930944 	addi	r2,r2,19493
   171ac:	10800003 	ldbu	r2,0(r2)
   171b0:	10803fcc 	andi	r2,r2,255
   171b4:	10800058 	cmpnei	r2,r2,1
   171b8:	1000151e 	bne	r2,zero,17210 <OSTaskCreateExt+0x1bc>
                OS_Sched();
   171bc:	001243c0 	call	1243c <OS_Sched>
   171c0:	00001306 	br	17210 <OSTaskCreateExt+0x1bc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   171c4:	0005303a 	rdctl	r2,status
   171c8:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   171cc:	e0fff717 	ldw	r3,-36(fp)
   171d0:	00bfff84 	movi	r2,-2
   171d4:	1884703a 	and	r2,r3,r2
   171d8:	1001703a 	wrctl	status,r2
  
  return context;
   171dc:	e0bff717 	ldw	r2,-36(fp)
            }
        } else {
            OS_ENTER_CRITICAL();
   171e0:	e0bff115 	stw	r2,-60(fp)
            OSTCBPrioTbl[prio] = (OS_TCB *)0;                  /* Make this priority avail. to others  */
   171e4:	e0fffd03 	ldbu	r3,-12(fp)
   171e8:	008000b4 	movhi	r2,2
   171ec:	109fc504 	addi	r2,r2,32532
   171f0:	18c7883a 	add	r3,r3,r3
   171f4:	18c7883a 	add	r3,r3,r3
   171f8:	10c5883a 	add	r2,r2,r3
   171fc:	10000015 	stw	zero,0(r2)
   17200:	e0bff117 	ldw	r2,-60(fp)
   17204:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   17208:	e0bff817 	ldw	r2,-32(fp)
   1720c:	1001703a 	wrctl	status,r2
            OS_EXIT_CRITICAL();
        }
        return (err);
   17210:	e0bff303 	ldbu	r2,-52(fp)
   17214:	00000506 	br	1722c <OSTaskCreateExt+0x1d8>
   17218:	e0bff117 	ldw	r2,-60(fp)
   1721c:	e0bff915 	stw	r2,-28(fp)
   17220:	e0bff917 	ldw	r2,-28(fp)
   17224:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_PRIO_EXIST);
   17228:	00800a04 	movi	r2,40
}
   1722c:	e037883a 	mov	sp,fp
   17230:	dfc00117 	ldw	ra,4(sp)
   17234:	df000017 	ldw	fp,0(sp)
   17238:	dec00204 	addi	sp,sp,8
   1723c:	f800283a 	ret

00017240 <OSTaskDel>:
*********************************************************************************************************
*/

#if OS_TASK_DEL_EN > 0
INT8U  OSTaskDel (INT8U prio)
{
   17240:	defff404 	addi	sp,sp,-48
   17244:	dfc00b15 	stw	ra,44(sp)
   17248:	df000a15 	stw	fp,40(sp)
   1724c:	df000a04 	addi	fp,sp,40
   17250:	2005883a 	mov	r2,r4
   17254:	e0bfff05 	stb	r2,-4(fp)
#if (OS_FLAG_EN > 0) && (OS_MAX_FLAGS > 0)
    OS_FLAG_NODE *pnode;
#endif
    OS_TCB       *ptcb;
#if OS_CRITICAL_METHOD == 3                             /* Allocate storage for CPU status register    */
    OS_CPU_SR     cpu_sr = 0;
   17258:	e03ff615 	stw	zero,-40(fp)
#endif



    if (OSIntNesting > 0) {                             /* See if trying to delete from ISR            */
   1725c:	008000b4 	movhi	r2,2
   17260:	10931704 	addi	r2,r2,19548
   17264:	10800003 	ldbu	r2,0(r2)
   17268:	10803fcc 	andi	r2,r2,255
   1726c:	10000226 	beq	r2,zero,17278 <OSTaskDel+0x38>
        return (OS_ERR_TASK_DEL_ISR);
   17270:	00801004 	movi	r2,64
   17274:	0000e506 	br	1760c <OSTaskDel+0x3cc>
    }
    if (prio == OS_TASK_IDLE_PRIO) {                    /* Not allowed to delete idle task             */
   17278:	e0bfff03 	ldbu	r2,-4(fp)
   1727c:	10800518 	cmpnei	r2,r2,20
   17280:	1000021e 	bne	r2,zero,1728c <OSTaskDel+0x4c>
        return (OS_ERR_TASK_DEL_IDLE);
   17284:	00800f84 	movi	r2,62
   17288:	0000e006 	br	1760c <OSTaskDel+0x3cc>
    }
#if OS_ARG_CHK_EN > 0
    if (prio >= OS_LOWEST_PRIO) {                       /* Task priority valid ?                       */
   1728c:	e0bfff03 	ldbu	r2,-4(fp)
   17290:	10800530 	cmpltui	r2,r2,20
   17294:	1000051e 	bne	r2,zero,172ac <OSTaskDel+0x6c>
        if (prio != OS_PRIO_SELF) {
   17298:	e0bfff03 	ldbu	r2,-4(fp)
   1729c:	10803fe0 	cmpeqi	r2,r2,255
   172a0:	1000021e 	bne	r2,zero,172ac <OSTaskDel+0x6c>
            return (OS_ERR_PRIO_INVALID);
   172a4:	00800a84 	movi	r2,42
   172a8:	0000d806 	br	1760c <OSTaskDel+0x3cc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   172ac:	0005303a 	rdctl	r2,status
   172b0:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   172b4:	e0fff917 	ldw	r3,-28(fp)
   172b8:	00bfff84 	movi	r2,-2
   172bc:	1884703a 	and	r2,r3,r2
   172c0:	1001703a 	wrctl	status,r2
  
  return context;
   172c4:	e0bff917 	ldw	r2,-28(fp)
        }
    }
#endif

/*$PAGE*/
    OS_ENTER_CRITICAL();
   172c8:	e0bff615 	stw	r2,-40(fp)
    if (prio == OS_PRIO_SELF) {                         /* See if requesting to delete self            */
   172cc:	e0bfff03 	ldbu	r2,-4(fp)
   172d0:	10803fd8 	cmpnei	r2,r2,255
   172d4:	1000051e 	bne	r2,zero,172ec <OSTaskDel+0xac>
        prio = OSTCBCur->OSTCBPrio;                     /* Set priority to delete to current           */
   172d8:	008000b4 	movhi	r2,2
   172dc:	10931804 	addi	r2,r2,19552
   172e0:	10800017 	ldw	r2,0(r2)
   172e4:	10800c83 	ldbu	r2,50(r2)
   172e8:	e0bfff05 	stb	r2,-4(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
   172ec:	e0ffff03 	ldbu	r3,-4(fp)
   172f0:	008000b4 	movhi	r2,2
   172f4:	109fc504 	addi	r2,r2,32532
   172f8:	18c7883a 	add	r3,r3,r3
   172fc:	18c7883a 	add	r3,r3,r3
   17300:	10c5883a 	add	r2,r2,r3
   17304:	10800017 	ldw	r2,0(r2)
   17308:	e0bff715 	stw	r2,-36(fp)
    if (ptcb == (OS_TCB *)0) {                          /* Task to delete must exist                   */
   1730c:	e0bff717 	ldw	r2,-36(fp)
   17310:	1000061e 	bne	r2,zero,1732c <OSTaskDel+0xec>
   17314:	e0bff617 	ldw	r2,-40(fp)
   17318:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1731c:	e0bffa17 	ldw	r2,-24(fp)
   17320:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
   17324:	008010c4 	movi	r2,67
   17328:	0000b806 	br	1760c <OSTaskDel+0x3cc>
    }
    if (ptcb == OS_TCB_RESERVED) {                      /* Must not be assigned to Mutex               */
   1732c:	e0bff717 	ldw	r2,-36(fp)
   17330:	10800058 	cmpnei	r2,r2,1
   17334:	1000061e 	bne	r2,zero,17350 <OSTaskDel+0x110>
   17338:	e0bff617 	ldw	r2,-40(fp)
   1733c:	e0bffb15 	stw	r2,-20(fp)
   17340:	e0bffb17 	ldw	r2,-20(fp)
   17344:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_DEL);
   17348:	00800f44 	movi	r2,61
   1734c:	0000af06 	br	1760c <OSTaskDel+0x3cc>
    }

    OSRdyTbl[ptcb->OSTCBY] &= ~ptcb->OSTCBBitX;
   17350:	e0bff717 	ldw	r2,-36(fp)
   17354:	10800d03 	ldbu	r2,52(r2)
   17358:	10c03fcc 	andi	r3,r2,255
   1735c:	e0bff717 	ldw	r2,-36(fp)
   17360:	10800d03 	ldbu	r2,52(r2)
   17364:	11003fcc 	andi	r4,r2,255
   17368:	008000b4 	movhi	r2,2
   1736c:	10931544 	addi	r2,r2,19541
   17370:	1105883a 	add	r2,r2,r4
   17374:	10800003 	ldbu	r2,0(r2)
   17378:	1009883a 	mov	r4,r2
   1737c:	e0bff717 	ldw	r2,-36(fp)
   17380:	10800d43 	ldbu	r2,53(r2)
   17384:	0084303a 	nor	r2,zero,r2
   17388:	2084703a 	and	r2,r4,r2
   1738c:	1009883a 	mov	r4,r2
   17390:	008000b4 	movhi	r2,2
   17394:	10931544 	addi	r2,r2,19541
   17398:	10c5883a 	add	r2,r2,r3
   1739c:	11000005 	stb	r4,0(r2)
    if (OSRdyTbl[ptcb->OSTCBY] == 0) {                  /* Make task not ready                         */
   173a0:	e0bff717 	ldw	r2,-36(fp)
   173a4:	10800d03 	ldbu	r2,52(r2)
   173a8:	10c03fcc 	andi	r3,r2,255
   173ac:	008000b4 	movhi	r2,2
   173b0:	10931544 	addi	r2,r2,19541
   173b4:	10c5883a 	add	r2,r2,r3
   173b8:	10800003 	ldbu	r2,0(r2)
   173bc:	10803fcc 	andi	r2,r2,255
   173c0:	10000c1e 	bne	r2,zero,173f4 <OSTaskDel+0x1b4>
        OSRdyGrp           &= ~ptcb->OSTCBBitY;
   173c4:	e0bff717 	ldw	r2,-36(fp)
   173c8:	10800d83 	ldbu	r2,54(r2)
   173cc:	0084303a 	nor	r2,zero,r2
   173d0:	1007883a 	mov	r3,r2
   173d4:	008000b4 	movhi	r2,2
   173d8:	10931504 	addi	r2,r2,19540
   173dc:	10800003 	ldbu	r2,0(r2)
   173e0:	1884703a 	and	r2,r3,r2
   173e4:	1007883a 	mov	r3,r2
   173e8:	008000b4 	movhi	r2,2
   173ec:	10931504 	addi	r2,r2,19540
   173f0:	10c00005 	stb	r3,0(r2)
    }
    
#if (OS_EVENT_EN)
    if (ptcb->OSTCBEventPtr != (OS_EVENT *)0) {
   173f4:	e0bff717 	ldw	r2,-36(fp)
   173f8:	10800717 	ldw	r2,28(r2)
   173fc:	10000526 	beq	r2,zero,17414 <OSTaskDel+0x1d4>
        OS_EventTaskRemove(ptcb, ptcb->OSTCBEventPtr);  /* Remove this task from any event   wait list */
   17400:	e0bff717 	ldw	r2,-36(fp)
   17404:	10800717 	ldw	r2,28(r2)
   17408:	e13ff717 	ldw	r4,-36(fp)
   1740c:	100b883a 	mov	r5,r2
   17410:	0011e140 	call	11e14 <OS_EventTaskRemove>
    }
#if (OS_EVENT_MULTI_EN > 0)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {   /* Remove this task from any events' wait lists*/
   17414:	e0bff717 	ldw	r2,-36(fp)
   17418:	10800817 	ldw	r2,32(r2)
   1741c:	10000526 	beq	r2,zero,17434 <OSTaskDel+0x1f4>
        OS_EventTaskRemoveMulti(ptcb, ptcb->OSTCBEventMultiPtr);
   17420:	e0bff717 	ldw	r2,-36(fp)
   17424:	10800817 	ldw	r2,32(r2)
   17428:	e13ff717 	ldw	r4,-36(fp)
   1742c:	100b883a 	mov	r5,r2
   17430:	0011ec80 	call	11ec8 <OS_EventTaskRemoveMulti>
    }
#endif
#endif

#if (OS_FLAG_EN > 0) && (OS_MAX_FLAGS > 0)
    pnode = ptcb->OSTCBFlagNode;
   17434:	e0bff717 	ldw	r2,-36(fp)
   17438:	10800a17 	ldw	r2,40(r2)
   1743c:	e0bff815 	stw	r2,-32(fp)
    if (pnode != (OS_FLAG_NODE *)0) {                   /* If task is waiting on event flag            */
   17440:	e0bff817 	ldw	r2,-32(fp)
   17444:	10000226 	beq	r2,zero,17450 <OSTaskDel+0x210>
        OS_FlagUnlink(pnode);                           /* Remove from wait list                       */
   17448:	e13ff817 	ldw	r4,-32(fp)
   1744c:	001441c0 	call	1441c <OS_FlagUnlink>
    }
#endif

    ptcb->OSTCBDly      = 0;                            /* Prevent OSTimeTick() from updating          */
   17450:	e0bff717 	ldw	r2,-36(fp)
   17454:	10000b8d 	sth	zero,46(r2)
    ptcb->OSTCBStat     = OS_STAT_RDY;                  /* Prevent task from being resumed             */
   17458:	e0bff717 	ldw	r2,-36(fp)
   1745c:	10000c05 	stb	zero,48(r2)
    ptcb->OSTCBStatPend = OS_STAT_PEND_OK;
   17460:	e0bff717 	ldw	r2,-36(fp)
   17464:	10000c45 	stb	zero,49(r2)
    if (OSLockNesting < 255u) {                         /* Make sure we don't context switch           */
   17468:	008000b4 	movhi	r2,2
   1746c:	10930904 	addi	r2,r2,19492
   17470:	10800003 	ldbu	r2,0(r2)
   17474:	10803fcc 	andi	r2,r2,255
   17478:	10803fe0 	cmpeqi	r2,r2,255
   1747c:	1000081e 	bne	r2,zero,174a0 <OSTaskDel+0x260>
        OSLockNesting++;
   17480:	008000b4 	movhi	r2,2
   17484:	10930904 	addi	r2,r2,19492
   17488:	10800003 	ldbu	r2,0(r2)
   1748c:	10800044 	addi	r2,r2,1
   17490:	1007883a 	mov	r3,r2
   17494:	008000b4 	movhi	r2,2
   17498:	10930904 	addi	r2,r2,19492
   1749c:	10c00005 	stb	r3,0(r2)
   174a0:	e0bff617 	ldw	r2,-40(fp)
   174a4:	e0bffc15 	stw	r2,-16(fp)
   174a8:	e0bffc17 	ldw	r2,-16(fp)
   174ac:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();                                 /* Enabling INT. ignores next instruc.         */
    OS_Dummy();                                         /* ... Dummy ensures that INTs will be         */
   174b0:	0011a080 	call	11a08 <OS_Dummy>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   174b4:	0005303a 	rdctl	r2,status
   174b8:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   174bc:	e0fffd17 	ldw	r3,-12(fp)
   174c0:	00bfff84 	movi	r2,-2
   174c4:	1884703a 	and	r2,r3,r2
   174c8:	1001703a 	wrctl	status,r2
  
  return context;
   174cc:	e0bffd17 	ldw	r2,-12(fp)
    OS_ENTER_CRITICAL();                                /* ... disabled HERE!                          */
   174d0:	e0bff615 	stw	r2,-40(fp)
    if (OSLockNesting > 0) {                            /* Remove context switch lock                  */
   174d4:	008000b4 	movhi	r2,2
   174d8:	10930904 	addi	r2,r2,19492
   174dc:	10800003 	ldbu	r2,0(r2)
   174e0:	10803fcc 	andi	r2,r2,255
   174e4:	10000826 	beq	r2,zero,17508 <OSTaskDel+0x2c8>
        OSLockNesting--;
   174e8:	008000b4 	movhi	r2,2
   174ec:	10930904 	addi	r2,r2,19492
   174f0:	10800003 	ldbu	r2,0(r2)
   174f4:	10bfffc4 	addi	r2,r2,-1
   174f8:	1007883a 	mov	r3,r2
   174fc:	008000b4 	movhi	r2,2
   17500:	10930904 	addi	r2,r2,19492
   17504:	10c00005 	stb	r3,0(r2)
    }
    OSTaskDelHook(ptcb);                                /* Call user defined hook                      */
   17508:	e13ff717 	ldw	r4,-36(fp)
   1750c:	001ff700 	call	1ff70 <OSTaskDelHook>
    OSTaskCtr--;                                        /* One less task being managed                 */
   17510:	008000b4 	movhi	r2,2
   17514:	10931144 	addi	r2,r2,19525
   17518:	10800003 	ldbu	r2,0(r2)
   1751c:	10bfffc4 	addi	r2,r2,-1
   17520:	1007883a 	mov	r3,r2
   17524:	008000b4 	movhi	r2,2
   17528:	10931144 	addi	r2,r2,19525
   1752c:	10c00005 	stb	r3,0(r2)
    OSTCBPrioTbl[prio] = (OS_TCB *)0;                   /* Clear old priority entry                    */
   17530:	e0ffff03 	ldbu	r3,-4(fp)
   17534:	008000b4 	movhi	r2,2
   17538:	109fc504 	addi	r2,r2,32532
   1753c:	18c7883a 	add	r3,r3,r3
   17540:	18c7883a 	add	r3,r3,r3
   17544:	10c5883a 	add	r2,r2,r3
   17548:	10000015 	stw	zero,0(r2)
    if (ptcb->OSTCBPrev == (OS_TCB *)0) {               /* Remove from TCB chain                       */
   1754c:	e0bff717 	ldw	r2,-36(fp)
   17550:	10800617 	ldw	r2,24(r2)
   17554:	1000091e 	bne	r2,zero,1757c <OSTaskDel+0x33c>
        ptcb->OSTCBNext->OSTCBPrev = (OS_TCB *)0;
   17558:	e0bff717 	ldw	r2,-36(fp)
   1755c:	10800517 	ldw	r2,20(r2)
   17560:	10000615 	stw	zero,24(r2)
        OSTCBList                  = ptcb->OSTCBNext;
   17564:	e0bff717 	ldw	r2,-36(fp)
   17568:	10c00517 	ldw	r3,20(r2)
   1756c:	008000b4 	movhi	r2,2
   17570:	10930c04 	addi	r2,r2,19504
   17574:	10c00015 	stw	r3,0(r2)
   17578:	00000a06 	br	175a4 <OSTaskDel+0x364>
    } else {
        ptcb->OSTCBPrev->OSTCBNext = ptcb->OSTCBNext;
   1757c:	e0bff717 	ldw	r2,-36(fp)
   17580:	10800617 	ldw	r2,24(r2)
   17584:	e0fff717 	ldw	r3,-36(fp)
   17588:	18c00517 	ldw	r3,20(r3)
   1758c:	10c00515 	stw	r3,20(r2)
        ptcb->OSTCBNext->OSTCBPrev = ptcb->OSTCBPrev;
   17590:	e0bff717 	ldw	r2,-36(fp)
   17594:	10800517 	ldw	r2,20(r2)
   17598:	e0fff717 	ldw	r3,-36(fp)
   1759c:	18c00617 	ldw	r3,24(r3)
   175a0:	10c00615 	stw	r3,24(r2)
    }
    ptcb->OSTCBNext   = OSTCBFreeList;                  /* Return TCB to free TCB list                 */
   175a4:	008000b4 	movhi	r2,2
   175a8:	10931004 	addi	r2,r2,19520
   175ac:	10c00017 	ldw	r3,0(r2)
   175b0:	e0bff717 	ldw	r2,-36(fp)
   175b4:	10c00515 	stw	r3,20(r2)
    OSTCBFreeList     = ptcb;
   175b8:	008000b4 	movhi	r2,2
   175bc:	10931004 	addi	r2,r2,19520
   175c0:	e0fff717 	ldw	r3,-36(fp)
   175c4:	10c00015 	stw	r3,0(r2)
#if OS_TASK_NAME_SIZE > 1
    ptcb->OSTCBTaskName[0] = '?';                       /* Unknown name                                */
   175c8:	e0bff717 	ldw	r2,-36(fp)
   175cc:	00c00fc4 	movi	r3,63
   175d0:	10c01305 	stb	r3,76(r2)
    ptcb->OSTCBTaskName[1] = OS_ASCII_NUL;
   175d4:	e0bff717 	ldw	r2,-36(fp)
   175d8:	10001345 	stb	zero,77(r2)
   175dc:	e0bff617 	ldw	r2,-40(fp)
   175e0:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   175e4:	e0bffe17 	ldw	r2,-8(fp)
   175e8:	1001703a 	wrctl	status,r2
#endif
    OS_EXIT_CRITICAL();
    if (OSRunning == OS_TRUE) {
   175ec:	008000b4 	movhi	r2,2
   175f0:	10930944 	addi	r2,r2,19493
   175f4:	10800003 	ldbu	r2,0(r2)
   175f8:	10803fcc 	andi	r2,r2,255
   175fc:	10800058 	cmpnei	r2,r2,1
   17600:	1000011e 	bne	r2,zero,17608 <OSTaskDel+0x3c8>
        OS_Sched();                                     /* Find new highest priority task              */
   17604:	001243c0 	call	1243c <OS_Sched>
    }
    return (OS_ERR_NONE);
   17608:	0005883a 	mov	r2,zero
}
   1760c:	e037883a 	mov	sp,fp
   17610:	dfc00117 	ldw	ra,4(sp)
   17614:	df000017 	ldw	fp,0(sp)
   17618:	dec00204 	addi	sp,sp,8
   1761c:	f800283a 	ret

00017620 <OSTaskDelReq>:
*********************************************************************************************************
*/
/*$PAGE*/
#if OS_TASK_DEL_EN > 0
INT8U  OSTaskDelReq (INT8U prio)
{
   17620:	defff504 	addi	sp,sp,-44
   17624:	df000a15 	stw	fp,40(sp)
   17628:	df000a04 	addi	fp,sp,40
   1762c:	2005883a 	mov	r2,r4
   17630:	e0bfff05 	stb	r2,-4(fp)
    INT8U      stat;
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   17634:	e03ff615 	stw	zero,-40(fp)
#endif



    if (prio == OS_TASK_IDLE_PRIO) {                            /* Not allowed to delete idle task     */
   17638:	e0bfff03 	ldbu	r2,-4(fp)
   1763c:	10800518 	cmpnei	r2,r2,20
   17640:	1000021e 	bne	r2,zero,1764c <OSTaskDelReq+0x2c>
        return (OS_ERR_TASK_DEL_IDLE);
   17644:	00800f84 	movi	r2,62
   17648:	00004706 	br	17768 <OSTaskDelReq+0x148>
    }
#if OS_ARG_CHK_EN > 0
    if (prio >= OS_LOWEST_PRIO) {                               /* Task priority valid ?               */
   1764c:	e0bfff03 	ldbu	r2,-4(fp)
   17650:	10800530 	cmpltui	r2,r2,20
   17654:	1000051e 	bne	r2,zero,1766c <OSTaskDelReq+0x4c>
        if (prio != OS_PRIO_SELF) {
   17658:	e0bfff03 	ldbu	r2,-4(fp)
   1765c:	10803fe0 	cmpeqi	r2,r2,255
   17660:	1000021e 	bne	r2,zero,1766c <OSTaskDelReq+0x4c>
            return (OS_ERR_PRIO_INVALID);
   17664:	00800a84 	movi	r2,42
   17668:	00003f06 	br	17768 <OSTaskDelReq+0x148>
        }
    }
#endif
    if (prio == OS_PRIO_SELF) {                                 /* See if a task is requesting to ...  */
   1766c:	e0bfff03 	ldbu	r2,-4(fp)
   17670:	10803fd8 	cmpnei	r2,r2,255
   17674:	1000131e 	bne	r2,zero,176c4 <OSTaskDelReq+0xa4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   17678:	0005303a 	rdctl	r2,status
   1767c:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   17680:	e0fff917 	ldw	r3,-28(fp)
   17684:	00bfff84 	movi	r2,-2
   17688:	1884703a 	and	r2,r3,r2
   1768c:	1001703a 	wrctl	status,r2
  
  return context;
   17690:	e0bff917 	ldw	r2,-28(fp)
        OS_ENTER_CRITICAL();                                    /* ... this task to delete itself      */
   17694:	e0bff615 	stw	r2,-40(fp)
        stat = OSTCBCur->OSTCBDelReq;                           /* Return request status to caller     */
   17698:	008000b4 	movhi	r2,2
   1769c:	10931804 	addi	r2,r2,19552
   176a0:	10800017 	ldw	r2,0(r2)
   176a4:	10800dc3 	ldbu	r2,55(r2)
   176a8:	e0bff705 	stb	r2,-36(fp)
   176ac:	e0bff617 	ldw	r2,-40(fp)
   176b0:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   176b4:	e0bffa17 	ldw	r2,-24(fp)
   176b8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (stat);
   176bc:	e0bff703 	ldbu	r2,-36(fp)
   176c0:	00002906 	br	17768 <OSTaskDelReq+0x148>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   176c4:	0005303a 	rdctl	r2,status
   176c8:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   176cc:	e0fffb17 	ldw	r3,-20(fp)
   176d0:	00bfff84 	movi	r2,-2
   176d4:	1884703a 	and	r2,r3,r2
   176d8:	1001703a 	wrctl	status,r2
  
  return context;
   176dc:	e0bffb17 	ldw	r2,-20(fp)
    }
    OS_ENTER_CRITICAL();
   176e0:	e0bff615 	stw	r2,-40(fp)
    ptcb = OSTCBPrioTbl[prio];
   176e4:	e0ffff03 	ldbu	r3,-4(fp)
   176e8:	008000b4 	movhi	r2,2
   176ec:	109fc504 	addi	r2,r2,32532
   176f0:	18c7883a 	add	r3,r3,r3
   176f4:	18c7883a 	add	r3,r3,r3
   176f8:	10c5883a 	add	r2,r2,r3
   176fc:	10800017 	ldw	r2,0(r2)
   17700:	e0bff815 	stw	r2,-32(fp)
    if (ptcb == (OS_TCB *)0) {                                  /* Task to delete must exist           */
   17704:	e0bff817 	ldw	r2,-32(fp)
   17708:	1000061e 	bne	r2,zero,17724 <OSTaskDelReq+0x104>
   1770c:	e0bff617 	ldw	r2,-40(fp)
   17710:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   17714:	e0bffc17 	ldw	r2,-16(fp)
   17718:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);                         /* Task must already be deleted        */
   1771c:	008010c4 	movi	r2,67
   17720:	00001106 	br	17768 <OSTaskDelReq+0x148>
    }
    if (ptcb == OS_TCB_RESERVED) {                              /* Must NOT be assigned to a Mutex     */
   17724:	e0bff817 	ldw	r2,-32(fp)
   17728:	10800058 	cmpnei	r2,r2,1
   1772c:	1000061e 	bne	r2,zero,17748 <OSTaskDelReq+0x128>
   17730:	e0bff617 	ldw	r2,-40(fp)
   17734:	e0bffd15 	stw	r2,-12(fp)
   17738:	e0bffd17 	ldw	r2,-12(fp)
   1773c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_DEL);
   17740:	00800f44 	movi	r2,61
   17744:	00000806 	br	17768 <OSTaskDelReq+0x148>
    }
    ptcb->OSTCBDelReq = OS_ERR_TASK_DEL_REQ;                    /* Set flag indicating task to be DEL. */
   17748:	e0bff817 	ldw	r2,-32(fp)
   1774c:	00c00fc4 	movi	r3,63
   17750:	10c00dc5 	stb	r3,55(r2)
   17754:	e0bff617 	ldw	r2,-40(fp)
   17758:	e0bffe15 	stw	r2,-8(fp)
   1775c:	e0bffe17 	ldw	r2,-8(fp)
   17760:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
   17764:	0005883a 	mov	r2,zero
}
   17768:	e037883a 	mov	sp,fp
   1776c:	df000017 	ldw	fp,0(sp)
   17770:	dec00104 	addi	sp,sp,4
   17774:	f800283a 	ret

00017778 <OSTaskNameGet>:
*********************************************************************************************************
*/

#if OS_TASK_NAME_SIZE > 1
INT8U  OSTaskNameGet (INT8U prio, INT8U *pname, INT8U *perr)
{
   17778:	defff404 	addi	sp,sp,-48
   1777c:	dfc00b15 	stw	ra,44(sp)
   17780:	df000a15 	stw	fp,40(sp)
   17784:	df000a04 	addi	fp,sp,40
   17788:	2005883a 	mov	r2,r4
   1778c:	e17ffe15 	stw	r5,-8(fp)
   17790:	e1bfff15 	stw	r6,-4(fp)
   17794:	e0bffd05 	stb	r2,-12(fp)
    OS_TCB    *ptcb;
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                              /* Allocate storage for CPU status register   */
    OS_CPU_SR  cpu_sr = 0;
   17798:	e03ff615 	stw	zero,-40(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                            /* Validate 'perr'                            */
   1779c:	e0bfff17 	ldw	r2,-4(fp)
   177a0:	1000021e 	bne	r2,zero,177ac <OSTaskNameGet+0x34>
        return (0);
   177a4:	0005883a 	mov	r2,zero
   177a8:	00005806 	br	1790c <OSTaskNameGet+0x194>
    }
    if (prio > OS_LOWEST_PRIO) {                         /* Task priority valid ?                      */
   177ac:	e0bffd03 	ldbu	r2,-12(fp)
   177b0:	10800570 	cmpltui	r2,r2,21
   177b4:	1000081e 	bne	r2,zero,177d8 <OSTaskNameGet+0x60>
        if (prio != OS_PRIO_SELF) {
   177b8:	e0bffd03 	ldbu	r2,-12(fp)
   177bc:	10803fe0 	cmpeqi	r2,r2,255
   177c0:	1000051e 	bne	r2,zero,177d8 <OSTaskNameGet+0x60>
            *perr = OS_ERR_PRIO_INVALID;                 /* No                                         */
   177c4:	e0bfff17 	ldw	r2,-4(fp)
   177c8:	00c00a84 	movi	r3,42
   177cc:	10c00005 	stb	r3,0(r2)
            return (0);
   177d0:	0005883a 	mov	r2,zero
   177d4:	00004d06 	br	1790c <OSTaskNameGet+0x194>
        }
    }
    if (pname == (INT8U *)0) {                           /* Is 'pname' a NULL pointer?                 */
   177d8:	e0bffe17 	ldw	r2,-8(fp)
   177dc:	1000051e 	bne	r2,zero,177f4 <OSTaskNameGet+0x7c>
        *perr = OS_ERR_PNAME_NULL;                       /* Yes                                        */
   177e0:	e0bfff17 	ldw	r2,-4(fp)
   177e4:	00c00304 	movi	r3,12
   177e8:	10c00005 	stb	r3,0(r2)
        return (0);
   177ec:	0005883a 	mov	r2,zero
   177f0:	00004606 	br	1790c <OSTaskNameGet+0x194>
    }
#endif
    if (OSIntNesting > 0) {                              /* See if trying to call from an ISR          */
   177f4:	008000b4 	movhi	r2,2
   177f8:	10931704 	addi	r2,r2,19548
   177fc:	10800003 	ldbu	r2,0(r2)
   17800:	10803fcc 	andi	r2,r2,255
   17804:	10000526 	beq	r2,zero,1781c <OSTaskNameGet+0xa4>
        *perr = OS_ERR_NAME_GET_ISR;
   17808:	e0bfff17 	ldw	r2,-4(fp)
   1780c:	00c00444 	movi	r3,17
   17810:	10c00005 	stb	r3,0(r2)
        return (0);
   17814:	0005883a 	mov	r2,zero
   17818:	00003c06 	br	1790c <OSTaskNameGet+0x194>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1781c:	0005303a 	rdctl	r2,status
   17820:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   17824:	e0fff917 	ldw	r3,-28(fp)
   17828:	00bfff84 	movi	r2,-2
   1782c:	1884703a 	and	r2,r3,r2
   17830:	1001703a 	wrctl	status,r2
  
  return context;
   17834:	e0bff917 	ldw	r2,-28(fp)
    }
    OS_ENTER_CRITICAL();
   17838:	e0bff615 	stw	r2,-40(fp)
    if (prio == OS_PRIO_SELF) {                          /* See if caller desires it's own name        */
   1783c:	e0bffd03 	ldbu	r2,-12(fp)
   17840:	10803fd8 	cmpnei	r2,r2,255
   17844:	1000051e 	bne	r2,zero,1785c <OSTaskNameGet+0xe4>
        prio = OSTCBCur->OSTCBPrio;
   17848:	008000b4 	movhi	r2,2
   1784c:	10931804 	addi	r2,r2,19552
   17850:	10800017 	ldw	r2,0(r2)
   17854:	10800c83 	ldbu	r2,50(r2)
   17858:	e0bffd05 	stb	r2,-12(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
   1785c:	e0fffd03 	ldbu	r3,-12(fp)
   17860:	008000b4 	movhi	r2,2
   17864:	109fc504 	addi	r2,r2,32532
   17868:	18c7883a 	add	r3,r3,r3
   1786c:	18c7883a 	add	r3,r3,r3
   17870:	10c5883a 	add	r2,r2,r3
   17874:	10800017 	ldw	r2,0(r2)
   17878:	e0bff715 	stw	r2,-36(fp)
    if (ptcb == (OS_TCB *)0) {                           /* Does task exist?                           */
   1787c:	e0bff717 	ldw	r2,-36(fp)
   17880:	1000091e 	bne	r2,zero,178a8 <OSTaskNameGet+0x130>
   17884:	e0bff617 	ldw	r2,-40(fp)
   17888:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1788c:	e0bffa17 	ldw	r2,-24(fp)
   17890:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                              /* No                                         */
        *perr = OS_ERR_TASK_NOT_EXIST;
   17894:	e0bfff17 	ldw	r2,-4(fp)
   17898:	00c010c4 	movi	r3,67
   1789c:	10c00005 	stb	r3,0(r2)
        return (0);
   178a0:	0005883a 	mov	r2,zero
   178a4:	00001906 	br	1790c <OSTaskNameGet+0x194>
    }
    if (ptcb == OS_TCB_RESERVED) {                       /* Task assigned to a Mutex?                  */
   178a8:	e0bff717 	ldw	r2,-36(fp)
   178ac:	10800058 	cmpnei	r2,r2,1
   178b0:	1000091e 	bne	r2,zero,178d8 <OSTaskNameGet+0x160>
   178b4:	e0bff617 	ldw	r2,-40(fp)
   178b8:	e0bffb15 	stw	r2,-20(fp)
   178bc:	e0bffb17 	ldw	r2,-20(fp)
   178c0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                              /* Yes                                        */
        *perr = OS_ERR_TASK_NOT_EXIST;
   178c4:	e0bfff17 	ldw	r2,-4(fp)
   178c8:	00c010c4 	movi	r3,67
   178cc:	10c00005 	stb	r3,0(r2)
        return (0);
   178d0:	0005883a 	mov	r2,zero
   178d4:	00000d06 	br	1790c <OSTaskNameGet+0x194>
    }
    len   = OS_StrCopy(pname, ptcb->OSTCBTaskName);      /* Yes, copy name from TCB                    */
   178d8:	e0bff717 	ldw	r2,-36(fp)
   178dc:	10801304 	addi	r2,r2,76
   178e0:	e13ffe17 	ldw	r4,-8(fp)
   178e4:	100b883a 	mov	r5,r2
   178e8:	00125780 	call	12578 <OS_StrCopy>
   178ec:	e0bff805 	stb	r2,-32(fp)
   178f0:	e0bff617 	ldw	r2,-40(fp)
   178f4:	e0bffc15 	stw	r2,-16(fp)
   178f8:	e0bffc17 	ldw	r2,-16(fp)
   178fc:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
   17900:	e0bfff17 	ldw	r2,-4(fp)
   17904:	10000005 	stb	zero,0(r2)
    return (len);
   17908:	e0bff803 	ldbu	r2,-32(fp)
}
   1790c:	e037883a 	mov	sp,fp
   17910:	dfc00117 	ldw	ra,4(sp)
   17914:	df000017 	ldw	fp,0(sp)
   17918:	dec00204 	addi	sp,sp,8
   1791c:	f800283a 	ret

00017920 <OSTaskNameSet>:
* Returns    : None
*********************************************************************************************************
*/
#if OS_TASK_NAME_SIZE > 1
void  OSTaskNameSet (INT8U prio, INT8U *pname, INT8U *perr)
{
   17920:	defff304 	addi	sp,sp,-52
   17924:	dfc00c15 	stw	ra,48(sp)
   17928:	df000b15 	stw	fp,44(sp)
   1792c:	df000b04 	addi	fp,sp,44
   17930:	2005883a 	mov	r2,r4
   17934:	e17ffe15 	stw	r5,-8(fp)
   17938:	e1bfff15 	stw	r6,-4(fp)
   1793c:	e0bffd05 	stb	r2,-12(fp)
    INT8U      len;
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                          /* Allocate storage for CPU status register       */
    OS_CPU_SR  cpu_sr = 0;
   17940:	e03ff515 	stw	zero,-44(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                        /* Validate 'perr'                                */
   17944:	e0bfff17 	ldw	r2,-4(fp)
   17948:	1000011e 	bne	r2,zero,17950 <OSTaskNameSet+0x30>
        return;
   1794c:	00005f06 	br	17acc <OSTaskNameSet+0x1ac>
    }
    if (prio > OS_LOWEST_PRIO) {                     /* Task priority valid ?                          */
   17950:	e0bffd03 	ldbu	r2,-12(fp)
   17954:	10800570 	cmpltui	r2,r2,21
   17958:	1000071e 	bne	r2,zero,17978 <OSTaskNameSet+0x58>
        if (prio != OS_PRIO_SELF) {
   1795c:	e0bffd03 	ldbu	r2,-12(fp)
   17960:	10803fe0 	cmpeqi	r2,r2,255
   17964:	1000041e 	bne	r2,zero,17978 <OSTaskNameSet+0x58>
            *perr = OS_ERR_PRIO_INVALID;             /* No                                             */
   17968:	e0bfff17 	ldw	r2,-4(fp)
   1796c:	00c00a84 	movi	r3,42
   17970:	10c00005 	stb	r3,0(r2)
            return;
   17974:	00005506 	br	17acc <OSTaskNameSet+0x1ac>
        }
    }
    if (pname == (INT8U *)0) {                       /* Is 'pname' a NULL pointer?                     */
   17978:	e0bffe17 	ldw	r2,-8(fp)
   1797c:	1000041e 	bne	r2,zero,17990 <OSTaskNameSet+0x70>
        *perr = OS_ERR_PNAME_NULL;                   /* Yes                                            */
   17980:	e0bfff17 	ldw	r2,-4(fp)
   17984:	00c00304 	movi	r3,12
   17988:	10c00005 	stb	r3,0(r2)
        return;
   1798c:	00004f06 	br	17acc <OSTaskNameSet+0x1ac>
    }
#endif
    if (OSIntNesting > 0) {                          /* See if trying to call from an ISR              */
   17990:	008000b4 	movhi	r2,2
   17994:	10931704 	addi	r2,r2,19548
   17998:	10800003 	ldbu	r2,0(r2)
   1799c:	10803fcc 	andi	r2,r2,255
   179a0:	10000426 	beq	r2,zero,179b4 <OSTaskNameSet+0x94>
        *perr = OS_ERR_NAME_SET_ISR;
   179a4:	e0bfff17 	ldw	r2,-4(fp)
   179a8:	00c00484 	movi	r3,18
   179ac:	10c00005 	stb	r3,0(r2)
        return;
   179b0:	00004606 	br	17acc <OSTaskNameSet+0x1ac>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   179b4:	0005303a 	rdctl	r2,status
   179b8:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   179bc:	e0fff817 	ldw	r3,-32(fp)
   179c0:	00bfff84 	movi	r2,-2
   179c4:	1884703a 	and	r2,r3,r2
   179c8:	1001703a 	wrctl	status,r2
  
  return context;
   179cc:	e0bff817 	ldw	r2,-32(fp)
    }
    OS_ENTER_CRITICAL();
   179d0:	e0bff515 	stw	r2,-44(fp)
    if (prio == OS_PRIO_SELF) {                      /* See if caller desires to set it's own name     */
   179d4:	e0bffd03 	ldbu	r2,-12(fp)
   179d8:	10803fd8 	cmpnei	r2,r2,255
   179dc:	1000051e 	bne	r2,zero,179f4 <OSTaskNameSet+0xd4>
        prio = OSTCBCur->OSTCBPrio;
   179e0:	008000b4 	movhi	r2,2
   179e4:	10931804 	addi	r2,r2,19552
   179e8:	10800017 	ldw	r2,0(r2)
   179ec:	10800c83 	ldbu	r2,50(r2)
   179f0:	e0bffd05 	stb	r2,-12(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
   179f4:	e0fffd03 	ldbu	r3,-12(fp)
   179f8:	008000b4 	movhi	r2,2
   179fc:	109fc504 	addi	r2,r2,32532
   17a00:	18c7883a 	add	r3,r3,r3
   17a04:	18c7883a 	add	r3,r3,r3
   17a08:	10c5883a 	add	r2,r2,r3
   17a0c:	10800017 	ldw	r2,0(r2)
   17a10:	e0bff615 	stw	r2,-40(fp)
    if (ptcb == (OS_TCB *)0) {                       /* Does task exist?                               */
   17a14:	e0bff617 	ldw	r2,-40(fp)
   17a18:	1000081e 	bne	r2,zero,17a3c <OSTaskNameSet+0x11c>
   17a1c:	e0bff517 	ldw	r2,-44(fp)
   17a20:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   17a24:	e0bff917 	ldw	r2,-28(fp)
   17a28:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                          /* No                                             */
        *perr = OS_ERR_TASK_NOT_EXIST;
   17a2c:	e0bfff17 	ldw	r2,-4(fp)
   17a30:	00c010c4 	movi	r3,67
   17a34:	10c00005 	stb	r3,0(r2)
        return;
   17a38:	00002406 	br	17acc <OSTaskNameSet+0x1ac>
    }
    if (ptcb == OS_TCB_RESERVED) {                   /* Task assigned to a Mutex?                      */
   17a3c:	e0bff617 	ldw	r2,-40(fp)
   17a40:	10800058 	cmpnei	r2,r2,1
   17a44:	1000081e 	bne	r2,zero,17a68 <OSTaskNameSet+0x148>
   17a48:	e0bff517 	ldw	r2,-44(fp)
   17a4c:	e0bffa15 	stw	r2,-24(fp)
   17a50:	e0bffa17 	ldw	r2,-24(fp)
   17a54:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                          /* Yes                                            */
        *perr = OS_ERR_TASK_NOT_EXIST;
   17a58:	e0bfff17 	ldw	r2,-4(fp)
   17a5c:	00c010c4 	movi	r3,67
   17a60:	10c00005 	stb	r3,0(r2)
        return;
   17a64:	00001906 	br	17acc <OSTaskNameSet+0x1ac>
    }
    len = OS_StrLen(pname);                          /* Yes, Can we fit the string in the TCB?         */
   17a68:	e13ffe17 	ldw	r4,-8(fp)
   17a6c:	00125ec0 	call	125ec <OS_StrLen>
   17a70:	e0bff705 	stb	r2,-36(fp)
    if (len > (OS_TASK_NAME_SIZE - 1)) {             /*      No                                        */
   17a74:	e0bff703 	ldbu	r2,-36(fp)
   17a78:	10800830 	cmpltui	r2,r2,32
   17a7c:	1000081e 	bne	r2,zero,17aa0 <OSTaskNameSet+0x180>
   17a80:	e0bff517 	ldw	r2,-44(fp)
   17a84:	e0bffb15 	stw	r2,-20(fp)
   17a88:	e0bffb17 	ldw	r2,-20(fp)
   17a8c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_TASK_NAME_TOO_LONG;
   17a90:	e0bfff17 	ldw	r2,-4(fp)
   17a94:	00c01044 	movi	r3,65
   17a98:	10c00005 	stb	r3,0(r2)
        return;
   17a9c:	00000b06 	br	17acc <OSTaskNameSet+0x1ac>
    }
    (void)OS_StrCopy(ptcb->OSTCBTaskName, pname);    /*      Yes, copy to TCB                          */
   17aa0:	e0bff617 	ldw	r2,-40(fp)
   17aa4:	10801304 	addi	r2,r2,76
   17aa8:	1009883a 	mov	r4,r2
   17aac:	e17ffe17 	ldw	r5,-8(fp)
   17ab0:	00125780 	call	12578 <OS_StrCopy>
   17ab4:	e0bff517 	ldw	r2,-44(fp)
   17ab8:	e0bffc15 	stw	r2,-16(fp)
   17abc:	e0bffc17 	ldw	r2,-16(fp)
   17ac0:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
   17ac4:	e0bfff17 	ldw	r2,-4(fp)
   17ac8:	10000005 	stb	zero,0(r2)
}
   17acc:	e037883a 	mov	sp,fp
   17ad0:	dfc00117 	ldw	ra,4(sp)
   17ad4:	df000017 	ldw	fp,0(sp)
   17ad8:	dec00204 	addi	sp,sp,8
   17adc:	f800283a 	ret

00017ae0 <OSTaskResume>:
*********************************************************************************************************
*/

#if OS_TASK_SUSPEND_EN > 0
INT8U  OSTaskResume (INT8U prio)
{
   17ae0:	defff404 	addi	sp,sp,-48
   17ae4:	dfc00b15 	stw	ra,44(sp)
   17ae8:	df000a15 	stw	fp,40(sp)
   17aec:	df000a04 	addi	fp,sp,40
   17af0:	2005883a 	mov	r2,r4
   17af4:	e0bfff05 	stb	r2,-4(fp)
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                                   /* Storage for CPU status register       */
    OS_CPU_SR  cpu_sr = 0;
   17af8:	e03ff615 	stw	zero,-40(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio >= OS_LOWEST_PRIO) {                             /* Make sure task priority is valid      */
   17afc:	e0bfff03 	ldbu	r2,-4(fp)
   17b00:	10800530 	cmpltui	r2,r2,20
   17b04:	1000021e 	bne	r2,zero,17b10 <OSTaskResume+0x30>
        return (OS_ERR_PRIO_INVALID);
   17b08:	00800a84 	movi	r2,42
   17b0c:	00006d06 	br	17cc4 <OSTaskResume+0x1e4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   17b10:	0005303a 	rdctl	r2,status
   17b14:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   17b18:	e0fff817 	ldw	r3,-32(fp)
   17b1c:	00bfff84 	movi	r2,-2
   17b20:	1884703a 	and	r2,r3,r2
   17b24:	1001703a 	wrctl	status,r2
  
  return context;
   17b28:	e0bff817 	ldw	r2,-32(fp)
    }
#endif
    OS_ENTER_CRITICAL();
   17b2c:	e0bff615 	stw	r2,-40(fp)
    ptcb = OSTCBPrioTbl[prio];
   17b30:	e0ffff03 	ldbu	r3,-4(fp)
   17b34:	008000b4 	movhi	r2,2
   17b38:	109fc504 	addi	r2,r2,32532
   17b3c:	18c7883a 	add	r3,r3,r3
   17b40:	18c7883a 	add	r3,r3,r3
   17b44:	10c5883a 	add	r2,r2,r3
   17b48:	10800017 	ldw	r2,0(r2)
   17b4c:	e0bff715 	stw	r2,-36(fp)
    if (ptcb == (OS_TCB *)0) {                                /* Task to suspend must exist            */
   17b50:	e0bff717 	ldw	r2,-36(fp)
   17b54:	1000061e 	bne	r2,zero,17b70 <OSTaskResume+0x90>
   17b58:	e0bff617 	ldw	r2,-40(fp)
   17b5c:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   17b60:	e0bff917 	ldw	r2,-28(fp)
   17b64:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_RESUME_PRIO);
   17b68:	00801184 	movi	r2,70
   17b6c:	00005506 	br	17cc4 <OSTaskResume+0x1e4>
    }
    if (ptcb == OS_TCB_RESERVED) {                            /* See if assigned to Mutex              */
   17b70:	e0bff717 	ldw	r2,-36(fp)
   17b74:	10800058 	cmpnei	r2,r2,1
   17b78:	1000061e 	bne	r2,zero,17b94 <OSTaskResume+0xb4>
   17b7c:	e0bff617 	ldw	r2,-40(fp)
   17b80:	e0bffa15 	stw	r2,-24(fp)
   17b84:	e0bffa17 	ldw	r2,-24(fp)
   17b88:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
   17b8c:	008010c4 	movi	r2,67
   17b90:	00004c06 	br	17cc4 <OSTaskResume+0x1e4>
    }
    if ((ptcb->OSTCBStat & OS_STAT_SUSPEND) != OS_STAT_RDY) { /* Task must be suspended                */
   17b94:	e0bff717 	ldw	r2,-36(fp)
   17b98:	10800c03 	ldbu	r2,48(r2)
   17b9c:	10803fcc 	andi	r2,r2,255
   17ba0:	1080020c 	andi	r2,r2,8
   17ba4:	10004226 	beq	r2,zero,17cb0 <OSTaskResume+0x1d0>
        ptcb->OSTCBStat &= ~(INT8U)OS_STAT_SUSPEND;           /* Remove suspension                     */
   17ba8:	e0bff717 	ldw	r2,-36(fp)
   17bac:	10c00c03 	ldbu	r3,48(r2)
   17bb0:	00bffdc4 	movi	r2,-9
   17bb4:	1884703a 	and	r2,r3,r2
   17bb8:	1007883a 	mov	r3,r2
   17bbc:	e0bff717 	ldw	r2,-36(fp)
   17bc0:	10c00c05 	stb	r3,48(r2)
        if (ptcb->OSTCBStat == OS_STAT_RDY) {                 /* See if task is now ready              */
   17bc4:	e0bff717 	ldw	r2,-36(fp)
   17bc8:	10800c03 	ldbu	r2,48(r2)
   17bcc:	10803fcc 	andi	r2,r2,255
   17bd0:	1000311e 	bne	r2,zero,17c98 <OSTaskResume+0x1b8>
            if (ptcb->OSTCBDly == 0) {
   17bd4:	e0bff717 	ldw	r2,-36(fp)
   17bd8:	10800b8b 	ldhu	r2,46(r2)
   17bdc:	10bfffcc 	andi	r2,r2,65535
   17be0:	1000281e 	bne	r2,zero,17c84 <OSTaskResume+0x1a4>
                OSRdyGrp               |= ptcb->OSTCBBitY;    /* Yes, Make task ready to run           */
   17be4:	e0bff717 	ldw	r2,-36(fp)
   17be8:	10c00d83 	ldbu	r3,54(r2)
   17bec:	008000b4 	movhi	r2,2
   17bf0:	10931504 	addi	r2,r2,19540
   17bf4:	10800003 	ldbu	r2,0(r2)
   17bf8:	1884b03a 	or	r2,r3,r2
   17bfc:	1007883a 	mov	r3,r2
   17c00:	008000b4 	movhi	r2,2
   17c04:	10931504 	addi	r2,r2,19540
   17c08:	10c00005 	stb	r3,0(r2)
                OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
   17c0c:	e0bff717 	ldw	r2,-36(fp)
   17c10:	10800d03 	ldbu	r2,52(r2)
   17c14:	10c03fcc 	andi	r3,r2,255
   17c18:	e0bff717 	ldw	r2,-36(fp)
   17c1c:	10800d03 	ldbu	r2,52(r2)
   17c20:	11003fcc 	andi	r4,r2,255
   17c24:	008000b4 	movhi	r2,2
   17c28:	10931544 	addi	r2,r2,19541
   17c2c:	1105883a 	add	r2,r2,r4
   17c30:	11000003 	ldbu	r4,0(r2)
   17c34:	e0bff717 	ldw	r2,-36(fp)
   17c38:	10800d43 	ldbu	r2,53(r2)
   17c3c:	2084b03a 	or	r2,r4,r2
   17c40:	1009883a 	mov	r4,r2
   17c44:	008000b4 	movhi	r2,2
   17c48:	10931544 	addi	r2,r2,19541
   17c4c:	10c5883a 	add	r2,r2,r3
   17c50:	11000005 	stb	r4,0(r2)
   17c54:	e0bff617 	ldw	r2,-40(fp)
   17c58:	e0bffb15 	stw	r2,-20(fp)
   17c5c:	e0bffb17 	ldw	r2,-20(fp)
   17c60:	1001703a 	wrctl	status,r2
                OS_EXIT_CRITICAL();
                if (OSRunning == OS_TRUE) {
   17c64:	008000b4 	movhi	r2,2
   17c68:	10930944 	addi	r2,r2,19493
   17c6c:	10800003 	ldbu	r2,0(r2)
   17c70:	10803fcc 	andi	r2,r2,255
   17c74:	10800058 	cmpnei	r2,r2,1
   17c78:	10000b1e 	bne	r2,zero,17ca8 <OSTaskResume+0x1c8>
                    OS_Sched();                               /* Find new highest priority task        */
   17c7c:	001243c0 	call	1243c <OS_Sched>
   17c80:	00000906 	br	17ca8 <OSTaskResume+0x1c8>
   17c84:	e0bff617 	ldw	r2,-40(fp)
   17c88:	e0bffc15 	stw	r2,-16(fp)
   17c8c:	e0bffc17 	ldw	r2,-16(fp)
   17c90:	1001703a 	wrctl	status,r2
   17c94:	00000406 	br	17ca8 <OSTaskResume+0x1c8>
   17c98:	e0bff617 	ldw	r2,-40(fp)
   17c9c:	e0bffd15 	stw	r2,-12(fp)
   17ca0:	e0bffd17 	ldw	r2,-12(fp)
   17ca4:	1001703a 	wrctl	status,r2
                OS_EXIT_CRITICAL();
            }
        } else {                                              /* Must be pending on event              */
            OS_EXIT_CRITICAL();
        }
        return (OS_ERR_NONE);
   17ca8:	0005883a 	mov	r2,zero
   17cac:	00000506 	br	17cc4 <OSTaskResume+0x1e4>
   17cb0:	e0bff617 	ldw	r2,-40(fp)
   17cb4:	e0bffe15 	stw	r2,-8(fp)
   17cb8:	e0bffe17 	ldw	r2,-8(fp)
   17cbc:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_TASK_NOT_SUSPENDED);
   17cc0:	00801104 	movi	r2,68
}
   17cc4:	e037883a 	mov	sp,fp
   17cc8:	dfc00117 	ldw	ra,4(sp)
   17ccc:	df000017 	ldw	fp,0(sp)
   17cd0:	dec00204 	addi	sp,sp,8
   17cd4:	f800283a 	ret

00017cd8 <OSTaskStkChk>:
*              OS_ERR_PDATA_NULL      if 'p_stk_data' is a NULL pointer
*********************************************************************************************************
*/
#if (OS_TASK_STAT_STK_CHK_EN > 0) && (OS_TASK_CREATE_EXT_EN > 0)
INT8U  OSTaskStkChk (INT8U prio, OS_STK_DATA *p_stk_data)
{
   17cd8:	defff304 	addi	sp,sp,-52
   17cdc:	df000c15 	stw	fp,48(sp)
   17ce0:	df000c04 	addi	fp,sp,48
   17ce4:	2005883a 	mov	r2,r4
   17ce8:	e17fff15 	stw	r5,-4(fp)
   17cec:	e0bffe05 	stb	r2,-8(fp)
    OS_TCB    *ptcb;
    OS_STK    *pchk;
    INT32U     nfree;
    INT32U     size;
#if OS_CRITICAL_METHOD == 3                            /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
   17cf0:	e03ff615 	stw	zero,-40(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio > OS_LOWEST_PRIO) {                       /* Make sure task priority is valid             */
   17cf4:	e0bffe03 	ldbu	r2,-8(fp)
   17cf8:	10800570 	cmpltui	r2,r2,21
   17cfc:	1000051e 	bne	r2,zero,17d14 <OSTaskStkChk+0x3c>
        if (prio != OS_PRIO_SELF) {
   17d00:	e0bffe03 	ldbu	r2,-8(fp)
   17d04:	10803fe0 	cmpeqi	r2,r2,255
   17d08:	1000021e 	bne	r2,zero,17d14 <OSTaskStkChk+0x3c>
            return (OS_ERR_PRIO_INVALID);
   17d0c:	00800a84 	movi	r2,42
   17d10:	00005f06 	br	17e90 <OSTaskStkChk+0x1b8>
        }
    }
    if (p_stk_data == (OS_STK_DATA *)0) {              /* Validate 'p_stk_data'                        */
   17d14:	e0bfff17 	ldw	r2,-4(fp)
   17d18:	1000021e 	bne	r2,zero,17d24 <OSTaskStkChk+0x4c>
        return (OS_ERR_PDATA_NULL);
   17d1c:	00800244 	movi	r2,9
   17d20:	00005b06 	br	17e90 <OSTaskStkChk+0x1b8>
    }
#endif
    p_stk_data->OSFree = 0;                            /* Assume failure, set to 0 size                */
   17d24:	e0bfff17 	ldw	r2,-4(fp)
   17d28:	10000015 	stw	zero,0(r2)
    p_stk_data->OSUsed = 0;
   17d2c:	e0bfff17 	ldw	r2,-4(fp)
   17d30:	10000115 	stw	zero,4(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   17d34:	0005303a 	rdctl	r2,status
   17d38:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   17d3c:	e0fff917 	ldw	r3,-28(fp)
   17d40:	00bfff84 	movi	r2,-2
   17d44:	1884703a 	and	r2,r3,r2
   17d48:	1001703a 	wrctl	status,r2
  
  return context;
   17d4c:	e0bff917 	ldw	r2,-28(fp)
    OS_ENTER_CRITICAL();
   17d50:	e0bff615 	stw	r2,-40(fp)
    if (prio == OS_PRIO_SELF) {                        /* See if check for SELF                        */
   17d54:	e0bffe03 	ldbu	r2,-8(fp)
   17d58:	10803fd8 	cmpnei	r2,r2,255
   17d5c:	1000051e 	bne	r2,zero,17d74 <OSTaskStkChk+0x9c>
        prio = OSTCBCur->OSTCBPrio;
   17d60:	008000b4 	movhi	r2,2
   17d64:	10931804 	addi	r2,r2,19552
   17d68:	10800017 	ldw	r2,0(r2)
   17d6c:	10800c83 	ldbu	r2,50(r2)
   17d70:	e0bffe05 	stb	r2,-8(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
   17d74:	e0fffe03 	ldbu	r3,-8(fp)
   17d78:	008000b4 	movhi	r2,2
   17d7c:	109fc504 	addi	r2,r2,32532
   17d80:	18c7883a 	add	r3,r3,r3
   17d84:	18c7883a 	add	r3,r3,r3
   17d88:	10c5883a 	add	r2,r2,r3
   17d8c:	10800017 	ldw	r2,0(r2)
   17d90:	e0bff715 	stw	r2,-36(fp)
    if (ptcb == (OS_TCB *)0) {                         /* Make sure task exist                         */
   17d94:	e0bff717 	ldw	r2,-36(fp)
   17d98:	1000061e 	bne	r2,zero,17db4 <OSTaskStkChk+0xdc>
   17d9c:	e0bff617 	ldw	r2,-40(fp)
   17da0:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   17da4:	e0bffa17 	ldw	r2,-24(fp)
   17da8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
   17dac:	008010c4 	movi	r2,67
   17db0:	00003706 	br	17e90 <OSTaskStkChk+0x1b8>
    }
    if (ptcb == OS_TCB_RESERVED) {
   17db4:	e0bff717 	ldw	r2,-36(fp)
   17db8:	10800058 	cmpnei	r2,r2,1
   17dbc:	1000061e 	bne	r2,zero,17dd8 <OSTaskStkChk+0x100>
   17dc0:	e0bff617 	ldw	r2,-40(fp)
   17dc4:	e0bffb15 	stw	r2,-20(fp)
   17dc8:	e0bffb17 	ldw	r2,-20(fp)
   17dcc:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
   17dd0:	008010c4 	movi	r2,67
   17dd4:	00002e06 	br	17e90 <OSTaskStkChk+0x1b8>
    }
    if ((ptcb->OSTCBOpt & OS_TASK_OPT_STK_CHK) == 0) { /* Make sure stack checking option is set       */
   17dd8:	e0bff717 	ldw	r2,-36(fp)
   17ddc:	1080040b 	ldhu	r2,16(r2)
   17de0:	10bfffcc 	andi	r2,r2,65535
   17de4:	1080004c 	andi	r2,r2,1
   17de8:	1000061e 	bne	r2,zero,17e04 <OSTaskStkChk+0x12c>
   17dec:	e0bff617 	ldw	r2,-40(fp)
   17df0:	e0bffc15 	stw	r2,-16(fp)
   17df4:	e0bffc17 	ldw	r2,-16(fp)
   17df8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_OPT);
   17dfc:	00801144 	movi	r2,69
   17e00:	00002306 	br	17e90 <OSTaskStkChk+0x1b8>
    }
    nfree = 0;
   17e04:	e03ff515 	stw	zero,-44(fp)
    size  = ptcb->OSTCBStkSize;
   17e08:	e0bff717 	ldw	r2,-36(fp)
   17e0c:	10800317 	ldw	r2,12(r2)
   17e10:	e0bff815 	stw	r2,-32(fp)
    pchk  = ptcb->OSTCBStkBottom;
   17e14:	e0bff717 	ldw	r2,-36(fp)
   17e18:	10800217 	ldw	r2,8(r2)
   17e1c:	e0bff415 	stw	r2,-48(fp)
   17e20:	e0bff617 	ldw	r2,-40(fp)
   17e24:	e0bffd15 	stw	r2,-12(fp)
   17e28:	e0bffd17 	ldw	r2,-12(fp)
   17e2c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
#if OS_STK_GROWTH == 1
    while (*pchk++ == (OS_STK)0) {                    /* Compute the number of zero entries on the stk */
   17e30:	00000306 	br	17e40 <OSTaskStkChk+0x168>
        nfree++;
   17e34:	e0bff517 	ldw	r2,-44(fp)
   17e38:	10800044 	addi	r2,r2,1
   17e3c:	e0bff515 	stw	r2,-44(fp)
    nfree = 0;
    size  = ptcb->OSTCBStkSize;
    pchk  = ptcb->OSTCBStkBottom;
    OS_EXIT_CRITICAL();
#if OS_STK_GROWTH == 1
    while (*pchk++ == (OS_STK)0) {                    /* Compute the number of zero entries on the stk */
   17e40:	e0bff417 	ldw	r2,-48(fp)
   17e44:	10c00104 	addi	r3,r2,4
   17e48:	e0fff415 	stw	r3,-48(fp)
   17e4c:	10800017 	ldw	r2,0(r2)
   17e50:	103ff826 	beq	r2,zero,17e34 <__alt_mem_Flash_flash_data+0xf4017e34>
#else
    while (*pchk-- == (OS_STK)0) {
        nfree++;
    }
#endif
    p_stk_data->OSFree = nfree * sizeof(OS_STK);          /* Compute number of free bytes on the stack */
   17e54:	e0bff517 	ldw	r2,-44(fp)
   17e58:	1085883a 	add	r2,r2,r2
   17e5c:	1085883a 	add	r2,r2,r2
   17e60:	1007883a 	mov	r3,r2
   17e64:	e0bfff17 	ldw	r2,-4(fp)
   17e68:	10c00015 	stw	r3,0(r2)
    p_stk_data->OSUsed = (size - nfree) * sizeof(OS_STK); /* Compute number of bytes used on the stack */
   17e6c:	e0fff817 	ldw	r3,-32(fp)
   17e70:	e0bff517 	ldw	r2,-44(fp)
   17e74:	1885c83a 	sub	r2,r3,r2
   17e78:	1085883a 	add	r2,r2,r2
   17e7c:	1085883a 	add	r2,r2,r2
   17e80:	1007883a 	mov	r3,r2
   17e84:	e0bfff17 	ldw	r2,-4(fp)
   17e88:	10c00115 	stw	r3,4(r2)
    return (OS_ERR_NONE);
   17e8c:	0005883a 	mov	r2,zero
}
   17e90:	e037883a 	mov	sp,fp
   17e94:	df000017 	ldw	fp,0(sp)
   17e98:	dec00104 	addi	sp,sp,4
   17e9c:	f800283a 	ret

00017ea0 <OSTaskSuspend>:
*********************************************************************************************************
*/

#if OS_TASK_SUSPEND_EN > 0
INT8U  OSTaskSuspend (INT8U prio)
{
   17ea0:	defff504 	addi	sp,sp,-44
   17ea4:	dfc00a15 	stw	ra,40(sp)
   17ea8:	df000915 	stw	fp,36(sp)
   17eac:	df000904 	addi	fp,sp,36
   17eb0:	2005883a 	mov	r2,r4
   17eb4:	e0bfff05 	stb	r2,-4(fp)
    BOOLEAN    self;
    OS_TCB    *ptcb;
    INT8U      y;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   17eb8:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio == OS_TASK_IDLE_PRIO) {                            /* Not allowed to suspend idle task    */
   17ebc:	e0bfff03 	ldbu	r2,-4(fp)
   17ec0:	10800518 	cmpnei	r2,r2,20
   17ec4:	1000021e 	bne	r2,zero,17ed0 <OSTaskSuspend+0x30>
        return (OS_ERR_TASK_SUSPEND_IDLE);
   17ec8:	008011c4 	movi	r2,71
   17ecc:	00007406 	br	180a0 <OSTaskSuspend+0x200>
    }
    if (prio >= OS_LOWEST_PRIO) {                               /* Task priority valid ?               */
   17ed0:	e0bfff03 	ldbu	r2,-4(fp)
   17ed4:	10800530 	cmpltui	r2,r2,20
   17ed8:	1000051e 	bne	r2,zero,17ef0 <OSTaskSuspend+0x50>
        if (prio != OS_PRIO_SELF) {
   17edc:	e0bfff03 	ldbu	r2,-4(fp)
   17ee0:	10803fe0 	cmpeqi	r2,r2,255
   17ee4:	1000021e 	bne	r2,zero,17ef0 <OSTaskSuspend+0x50>
            return (OS_ERR_PRIO_INVALID);
   17ee8:	00800a84 	movi	r2,42
   17eec:	00006c06 	br	180a0 <OSTaskSuspend+0x200>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   17ef0:	0005303a 	rdctl	r2,status
   17ef4:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   17ef8:	e0fffb17 	ldw	r3,-20(fp)
   17efc:	00bfff84 	movi	r2,-2
   17f00:	1884703a 	and	r2,r3,r2
   17f04:	1001703a 	wrctl	status,r2
  
  return context;
   17f08:	e0bffb17 	ldw	r2,-20(fp)
        }
    }
#endif
    OS_ENTER_CRITICAL();
   17f0c:	e0bff815 	stw	r2,-32(fp)
    if (prio == OS_PRIO_SELF) {                                 /* See if suspend SELF                 */
   17f10:	e0bfff03 	ldbu	r2,-4(fp)
   17f14:	10803fd8 	cmpnei	r2,r2,255
   17f18:	1000081e 	bne	r2,zero,17f3c <OSTaskSuspend+0x9c>
        prio = OSTCBCur->OSTCBPrio;
   17f1c:	008000b4 	movhi	r2,2
   17f20:	10931804 	addi	r2,r2,19552
   17f24:	10800017 	ldw	r2,0(r2)
   17f28:	10800c83 	ldbu	r2,50(r2)
   17f2c:	e0bfff05 	stb	r2,-4(fp)
        self = OS_TRUE;
   17f30:	00800044 	movi	r2,1
   17f34:	e0bff705 	stb	r2,-36(fp)
   17f38:	00000b06 	br	17f68 <OSTaskSuspend+0xc8>
    } else if (prio == OSTCBCur->OSTCBPrio) {                   /* See if suspending self              */
   17f3c:	008000b4 	movhi	r2,2
   17f40:	10931804 	addi	r2,r2,19552
   17f44:	10800017 	ldw	r2,0(r2)
   17f48:	10800c83 	ldbu	r2,50(r2)
   17f4c:	10c03fcc 	andi	r3,r2,255
   17f50:	e0bfff03 	ldbu	r2,-4(fp)
   17f54:	1880031e 	bne	r3,r2,17f64 <OSTaskSuspend+0xc4>
        self = OS_TRUE;
   17f58:	00800044 	movi	r2,1
   17f5c:	e0bff705 	stb	r2,-36(fp)
   17f60:	00000106 	br	17f68 <OSTaskSuspend+0xc8>
    } else {
        self = OS_FALSE;                                        /* No suspending another task          */
   17f64:	e03ff705 	stb	zero,-36(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
   17f68:	e0ffff03 	ldbu	r3,-4(fp)
   17f6c:	008000b4 	movhi	r2,2
   17f70:	109fc504 	addi	r2,r2,32532
   17f74:	18c7883a 	add	r3,r3,r3
   17f78:	18c7883a 	add	r3,r3,r3
   17f7c:	10c5883a 	add	r2,r2,r3
   17f80:	10800017 	ldw	r2,0(r2)
   17f84:	e0bff915 	stw	r2,-28(fp)
    if (ptcb == (OS_TCB *)0) {                                  /* Task to suspend must exist          */
   17f88:	e0bff917 	ldw	r2,-28(fp)
   17f8c:	1000061e 	bne	r2,zero,17fa8 <OSTaskSuspend+0x108>
   17f90:	e0bff817 	ldw	r2,-32(fp)
   17f94:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   17f98:	e0bffc17 	ldw	r2,-16(fp)
   17f9c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_SUSPEND_PRIO);
   17fa0:	00801204 	movi	r2,72
   17fa4:	00003e06 	br	180a0 <OSTaskSuspend+0x200>
    }
    if (ptcb == OS_TCB_RESERVED) {                              /* See if assigned to Mutex            */
   17fa8:	e0bff917 	ldw	r2,-28(fp)
   17fac:	10800058 	cmpnei	r2,r2,1
   17fb0:	1000061e 	bne	r2,zero,17fcc <OSTaskSuspend+0x12c>
   17fb4:	e0bff817 	ldw	r2,-32(fp)
   17fb8:	e0bffd15 	stw	r2,-12(fp)
   17fbc:	e0bffd17 	ldw	r2,-12(fp)
   17fc0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
   17fc4:	008010c4 	movi	r2,67
   17fc8:	00003506 	br	180a0 <OSTaskSuspend+0x200>
    }
    y            = ptcb->OSTCBY;
   17fcc:	e0bff917 	ldw	r2,-28(fp)
   17fd0:	10800d03 	ldbu	r2,52(r2)
   17fd4:	e0bffa05 	stb	r2,-24(fp)
    OSRdyTbl[y] &= ~ptcb->OSTCBBitX;                            /* Make task not ready                 */
   17fd8:	e0fffa03 	ldbu	r3,-24(fp)
   17fdc:	e13ffa03 	ldbu	r4,-24(fp)
   17fe0:	008000b4 	movhi	r2,2
   17fe4:	10931544 	addi	r2,r2,19541
   17fe8:	1105883a 	add	r2,r2,r4
   17fec:	10800003 	ldbu	r2,0(r2)
   17ff0:	1009883a 	mov	r4,r2
   17ff4:	e0bff917 	ldw	r2,-28(fp)
   17ff8:	10800d43 	ldbu	r2,53(r2)
   17ffc:	0084303a 	nor	r2,zero,r2
   18000:	2084703a 	and	r2,r4,r2
   18004:	1009883a 	mov	r4,r2
   18008:	008000b4 	movhi	r2,2
   1800c:	10931544 	addi	r2,r2,19541
   18010:	10c5883a 	add	r2,r2,r3
   18014:	11000005 	stb	r4,0(r2)
    if (OSRdyTbl[y] == 0) {
   18018:	e0fffa03 	ldbu	r3,-24(fp)
   1801c:	008000b4 	movhi	r2,2
   18020:	10931544 	addi	r2,r2,19541
   18024:	10c5883a 	add	r2,r2,r3
   18028:	10800003 	ldbu	r2,0(r2)
   1802c:	10803fcc 	andi	r2,r2,255
   18030:	10000c1e 	bne	r2,zero,18064 <OSTaskSuspend+0x1c4>
        OSRdyGrp &= ~ptcb->OSTCBBitY;
   18034:	e0bff917 	ldw	r2,-28(fp)
   18038:	10800d83 	ldbu	r2,54(r2)
   1803c:	0084303a 	nor	r2,zero,r2
   18040:	1007883a 	mov	r3,r2
   18044:	008000b4 	movhi	r2,2
   18048:	10931504 	addi	r2,r2,19540
   1804c:	10800003 	ldbu	r2,0(r2)
   18050:	1884703a 	and	r2,r3,r2
   18054:	1007883a 	mov	r3,r2
   18058:	008000b4 	movhi	r2,2
   1805c:	10931504 	addi	r2,r2,19540
   18060:	10c00005 	stb	r3,0(r2)
    }
    ptcb->OSTCBStat |= OS_STAT_SUSPEND;                         /* Status of task is 'SUSPENDED'       */
   18064:	e0bff917 	ldw	r2,-28(fp)
   18068:	10800c03 	ldbu	r2,48(r2)
   1806c:	10800214 	ori	r2,r2,8
   18070:	1007883a 	mov	r3,r2
   18074:	e0bff917 	ldw	r2,-28(fp)
   18078:	10c00c05 	stb	r3,48(r2)
   1807c:	e0bff817 	ldw	r2,-32(fp)
   18080:	e0bffe15 	stw	r2,-8(fp)
   18084:	e0bffe17 	ldw	r2,-8(fp)
   18088:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    if (self == OS_TRUE) {                                      /* Context switch only if SELF         */
   1808c:	e0bff703 	ldbu	r2,-36(fp)
   18090:	10800058 	cmpnei	r2,r2,1
   18094:	1000011e 	bne	r2,zero,1809c <OSTaskSuspend+0x1fc>
        OS_Sched();                                             /* Find new highest priority task      */
   18098:	001243c0 	call	1243c <OS_Sched>
    }
    return (OS_ERR_NONE);
   1809c:	0005883a 	mov	r2,zero
}
   180a0:	e037883a 	mov	sp,fp
   180a4:	dfc00117 	ldw	ra,4(sp)
   180a8:	df000017 	ldw	fp,0(sp)
   180ac:	dec00204 	addi	sp,sp,8
   180b0:	f800283a 	ret

000180b4 <OSTaskQuery>:
*********************************************************************************************************
*/

#if OS_TASK_QUERY_EN > 0
INT8U  OSTaskQuery (INT8U prio, OS_TCB *p_task_data)
{
   180b4:	defff604 	addi	sp,sp,-40
   180b8:	dfc00915 	stw	ra,36(sp)
   180bc:	df000815 	stw	fp,32(sp)
   180c0:	df000804 	addi	fp,sp,32
   180c4:	2005883a 	mov	r2,r4
   180c8:	e17fff15 	stw	r5,-4(fp)
   180cc:	e0bffe05 	stb	r2,-8(fp)
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   180d0:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio > OS_LOWEST_PRIO) {                 /* Task priority valid ?                              */
   180d4:	e0bffe03 	ldbu	r2,-8(fp)
   180d8:	10800570 	cmpltui	r2,r2,21
   180dc:	1000051e 	bne	r2,zero,180f4 <OSTaskQuery+0x40>
        if (prio != OS_PRIO_SELF) {
   180e0:	e0bffe03 	ldbu	r2,-8(fp)
   180e4:	10803fe0 	cmpeqi	r2,r2,255
   180e8:	1000021e 	bne	r2,zero,180f4 <OSTaskQuery+0x40>
            return (OS_ERR_PRIO_INVALID);
   180ec:	00800a84 	movi	r2,42
   180f0:	00003606 	br	181cc <OSTaskQuery+0x118>
        }
    }
    if (p_task_data == (OS_TCB *)0) {            /* Validate 'p_task_data'                             */
   180f4:	e0bfff17 	ldw	r2,-4(fp)
   180f8:	1000021e 	bne	r2,zero,18104 <OSTaskQuery+0x50>
        return (OS_ERR_PDATA_NULL);
   180fc:	00800244 	movi	r2,9
   18100:	00003206 	br	181cc <OSTaskQuery+0x118>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   18104:	0005303a 	rdctl	r2,status
   18108:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1810c:	e0fffa17 	ldw	r3,-24(fp)
   18110:	00bfff84 	movi	r2,-2
   18114:	1884703a 	and	r2,r3,r2
   18118:	1001703a 	wrctl	status,r2
  
  return context;
   1811c:	e0bffa17 	ldw	r2,-24(fp)
    }
#endif
    OS_ENTER_CRITICAL();
   18120:	e0bff815 	stw	r2,-32(fp)
    if (prio == OS_PRIO_SELF) {                  /* See if suspend SELF                                */
   18124:	e0bffe03 	ldbu	r2,-8(fp)
   18128:	10803fd8 	cmpnei	r2,r2,255
   1812c:	1000051e 	bne	r2,zero,18144 <OSTaskQuery+0x90>
        prio = OSTCBCur->OSTCBPrio;
   18130:	008000b4 	movhi	r2,2
   18134:	10931804 	addi	r2,r2,19552
   18138:	10800017 	ldw	r2,0(r2)
   1813c:	10800c83 	ldbu	r2,50(r2)
   18140:	e0bffe05 	stb	r2,-8(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
   18144:	e0fffe03 	ldbu	r3,-8(fp)
   18148:	008000b4 	movhi	r2,2
   1814c:	109fc504 	addi	r2,r2,32532
   18150:	18c7883a 	add	r3,r3,r3
   18154:	18c7883a 	add	r3,r3,r3
   18158:	10c5883a 	add	r2,r2,r3
   1815c:	10800017 	ldw	r2,0(r2)
   18160:	e0bff915 	stw	r2,-28(fp)
    if (ptcb == (OS_TCB *)0) {                   /* Task to query must exist                           */
   18164:	e0bff917 	ldw	r2,-28(fp)
   18168:	1000061e 	bne	r2,zero,18184 <OSTaskQuery+0xd0>
   1816c:	e0bff817 	ldw	r2,-32(fp)
   18170:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   18174:	e0bffb17 	ldw	r2,-20(fp)
   18178:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_PRIO);
   1817c:	00800a44 	movi	r2,41
   18180:	00001206 	br	181cc <OSTaskQuery+0x118>
    }
    if (ptcb == OS_TCB_RESERVED) {               /* Task to query must not be assigned to a Mutex      */
   18184:	e0bff917 	ldw	r2,-28(fp)
   18188:	10800058 	cmpnei	r2,r2,1
   1818c:	1000061e 	bne	r2,zero,181a8 <OSTaskQuery+0xf4>
   18190:	e0bff817 	ldw	r2,-32(fp)
   18194:	e0bffc15 	stw	r2,-16(fp)
   18198:	e0bffc17 	ldw	r2,-16(fp)
   1819c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
   181a0:	008010c4 	movi	r2,67
   181a4:	00000906 	br	181cc <OSTaskQuery+0x118>
    }
                                                 /* Copy TCB into user storage area                    */
    OS_MemCopy((INT8U *)p_task_data, (INT8U *)ptcb, sizeof(OS_TCB));
   181a8:	e13fff17 	ldw	r4,-4(fp)
   181ac:	e17ff917 	ldw	r5,-28(fp)
   181b0:	01801b04 	movi	r6,108
   181b4:	00123d80 	call	123d8 <OS_MemCopy>
   181b8:	e0bff817 	ldw	r2,-32(fp)
   181bc:	e0bffd15 	stw	r2,-12(fp)
   181c0:	e0bffd17 	ldw	r2,-12(fp)
   181c4:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
   181c8:	0005883a 	mov	r2,zero
}
   181cc:	e037883a 	mov	sp,fp
   181d0:	dfc00117 	ldw	ra,4(sp)
   181d4:	df000017 	ldw	fp,0(sp)
   181d8:	dec00204 	addi	sp,sp,8
   181dc:	f800283a 	ret

000181e0 <OS_TaskStkClr>:
* Returns    : none
*********************************************************************************************************
*/
#if (OS_TASK_STAT_STK_CHK_EN > 0) && (OS_TASK_CREATE_EXT_EN > 0)
void  OS_TaskStkClr (OS_STK *pbos, INT32U size, INT16U opt)
{
   181e0:	defffc04 	addi	sp,sp,-16
   181e4:	df000315 	stw	fp,12(sp)
   181e8:	df000304 	addi	fp,sp,12
   181ec:	e13ffd15 	stw	r4,-12(fp)
   181f0:	e17ffe15 	stw	r5,-8(fp)
   181f4:	3005883a 	mov	r2,r6
   181f8:	e0bfff0d 	sth	r2,-4(fp)
    if ((opt & OS_TASK_OPT_STK_CHK) != 0x0000) {       /* See if stack checking has been enabled       */
   181fc:	e0bfff0b 	ldhu	r2,-4(fp)
   18200:	1080004c 	andi	r2,r2,1
   18204:	10000d26 	beq	r2,zero,1823c <OS_TaskStkClr+0x5c>
        if ((opt & OS_TASK_OPT_STK_CLR) != 0x0000) {   /* See if stack needs to be cleared             */
   18208:	e0bfff0b 	ldhu	r2,-4(fp)
   1820c:	1080008c 	andi	r2,r2,2
   18210:	10000a26 	beq	r2,zero,1823c <OS_TaskStkClr+0x5c>
#if OS_STK_GROWTH == 1
            while (size > 0) {                         /* Stack grows from HIGH to LOW memory          */
   18214:	00000706 	br	18234 <OS_TaskStkClr+0x54>
                size--;
   18218:	e0bffe17 	ldw	r2,-8(fp)
   1821c:	10bfffc4 	addi	r2,r2,-1
   18220:	e0bffe15 	stw	r2,-8(fp)
                *pbos++ = (OS_STK)0;                   /* Clear from bottom of stack and up!           */
   18224:	e0bffd17 	ldw	r2,-12(fp)
   18228:	10c00104 	addi	r3,r2,4
   1822c:	e0fffd15 	stw	r3,-12(fp)
   18230:	10000015 	stw	zero,0(r2)
void  OS_TaskStkClr (OS_STK *pbos, INT32U size, INT16U opt)
{
    if ((opt & OS_TASK_OPT_STK_CHK) != 0x0000) {       /* See if stack checking has been enabled       */
        if ((opt & OS_TASK_OPT_STK_CLR) != 0x0000) {   /* See if stack needs to be cleared             */
#if OS_STK_GROWTH == 1
            while (size > 0) {                         /* Stack grows from HIGH to LOW memory          */
   18234:	e0bffe17 	ldw	r2,-8(fp)
   18238:	103ff71e 	bne	r2,zero,18218 <__alt_mem_Flash_flash_data+0xf4018218>
                *pbos-- = (OS_STK)0;                   /* Clear from bottom of stack and down          */
            }
#endif
        }
    }
}
   1823c:	e037883a 	mov	sp,fp
   18240:	df000017 	ldw	fp,0(sp)
   18244:	dec00104 	addi	sp,sp,4
   18248:	f800283a 	ret

0001824c <OSTimeDly>:
* Returns    : none
*********************************************************************************************************
*/

void  OSTimeDly (INT16U ticks)
{
   1824c:	defff904 	addi	sp,sp,-28
   18250:	dfc00615 	stw	ra,24(sp)
   18254:	df000515 	stw	fp,20(sp)
   18258:	df000504 	addi	fp,sp,20
   1825c:	2005883a 	mov	r2,r4
   18260:	e0bfff0d 	sth	r2,-4(fp)
    INT8U      y;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   18264:	e03ffb15 	stw	zero,-20(fp)
#endif



    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
   18268:	008000b4 	movhi	r2,2
   1826c:	10931704 	addi	r2,r2,19548
   18270:	10800003 	ldbu	r2,0(r2)
   18274:	10803fcc 	andi	r2,r2,255
   18278:	10000126 	beq	r2,zero,18280 <OSTimeDly+0x34>
        return;
   1827c:	00004006 	br	18380 <OSTimeDly+0x134>
    }
    if (ticks > 0) {                             /* 0 means no delay!                                  */
   18280:	e0bfff0b 	ldhu	r2,-4(fp)
   18284:	10003e26 	beq	r2,zero,18380 <OSTimeDly+0x134>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   18288:	0005303a 	rdctl	r2,status
   1828c:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   18290:	e0fffd17 	ldw	r3,-12(fp)
   18294:	00bfff84 	movi	r2,-2
   18298:	1884703a 	and	r2,r3,r2
   1829c:	1001703a 	wrctl	status,r2
  
  return context;
   182a0:	e0bffd17 	ldw	r2,-12(fp)
        OS_ENTER_CRITICAL();
   182a4:	e0bffb15 	stw	r2,-20(fp)
        y            =  OSTCBCur->OSTCBY;        /* Delay current task                                 */
   182a8:	008000b4 	movhi	r2,2
   182ac:	10931804 	addi	r2,r2,19552
   182b0:	10800017 	ldw	r2,0(r2)
   182b4:	10800d03 	ldbu	r2,52(r2)
   182b8:	e0bffc05 	stb	r2,-16(fp)
        OSRdyTbl[y] &= ~OSTCBCur->OSTCBBitX;
   182bc:	e0fffc03 	ldbu	r3,-16(fp)
   182c0:	e13ffc03 	ldbu	r4,-16(fp)
   182c4:	008000b4 	movhi	r2,2
   182c8:	10931544 	addi	r2,r2,19541
   182cc:	1105883a 	add	r2,r2,r4
   182d0:	10800003 	ldbu	r2,0(r2)
   182d4:	1009883a 	mov	r4,r2
   182d8:	008000b4 	movhi	r2,2
   182dc:	10931804 	addi	r2,r2,19552
   182e0:	10800017 	ldw	r2,0(r2)
   182e4:	10800d43 	ldbu	r2,53(r2)
   182e8:	0084303a 	nor	r2,zero,r2
   182ec:	2084703a 	and	r2,r4,r2
   182f0:	1009883a 	mov	r4,r2
   182f4:	008000b4 	movhi	r2,2
   182f8:	10931544 	addi	r2,r2,19541
   182fc:	10c5883a 	add	r2,r2,r3
   18300:	11000005 	stb	r4,0(r2)
        if (OSRdyTbl[y] == 0) {
   18304:	e0fffc03 	ldbu	r3,-16(fp)
   18308:	008000b4 	movhi	r2,2
   1830c:	10931544 	addi	r2,r2,19541
   18310:	10c5883a 	add	r2,r2,r3
   18314:	10800003 	ldbu	r2,0(r2)
   18318:	10803fcc 	andi	r2,r2,255
   1831c:	10000e1e 	bne	r2,zero,18358 <OSTimeDly+0x10c>
            OSRdyGrp &= ~OSTCBCur->OSTCBBitY;
   18320:	008000b4 	movhi	r2,2
   18324:	10931804 	addi	r2,r2,19552
   18328:	10800017 	ldw	r2,0(r2)
   1832c:	10800d83 	ldbu	r2,54(r2)
   18330:	0084303a 	nor	r2,zero,r2
   18334:	1007883a 	mov	r3,r2
   18338:	008000b4 	movhi	r2,2
   1833c:	10931504 	addi	r2,r2,19540
   18340:	10800003 	ldbu	r2,0(r2)
   18344:	1884703a 	and	r2,r3,r2
   18348:	1007883a 	mov	r3,r2
   1834c:	008000b4 	movhi	r2,2
   18350:	10931504 	addi	r2,r2,19540
   18354:	10c00005 	stb	r3,0(r2)
        }
        OSTCBCur->OSTCBDly = ticks;              /* Load ticks in TCB                                  */
   18358:	008000b4 	movhi	r2,2
   1835c:	10931804 	addi	r2,r2,19552
   18360:	10800017 	ldw	r2,0(r2)
   18364:	e0ffff0b 	ldhu	r3,-4(fp)
   18368:	10c00b8d 	sth	r3,46(r2)
   1836c:	e0bffb17 	ldw	r2,-20(fp)
   18370:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   18374:	e0bffe17 	ldw	r2,-8(fp)
   18378:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                              /* Find next task to run!                             */
   1837c:	001243c0 	call	1243c <OS_Sched>
    }
}
   18380:	e037883a 	mov	sp,fp
   18384:	dfc00117 	ldw	ra,4(sp)
   18388:	df000017 	ldw	fp,0(sp)
   1838c:	dec00204 	addi	sp,sp,8
   18390:	f800283a 	ret

00018394 <OSTimeDlyHMSM>:
*********************************************************************************************************
*/

#if OS_TIME_DLY_HMSM_EN > 0
INT8U  OSTimeDlyHMSM (INT8U hours, INT8U minutes, INT8U seconds, INT16U ms)
{
   18394:	defff804 	addi	sp,sp,-32
   18398:	dfc00715 	stw	ra,28(sp)
   1839c:	df000615 	stw	fp,24(sp)
   183a0:	df000604 	addi	fp,sp,24
   183a4:	2015883a 	mov	r10,r4
   183a8:	2809883a 	mov	r4,r5
   183ac:	3007883a 	mov	r3,r6
   183b0:	3805883a 	mov	r2,r7
   183b4:	e2bffc05 	stb	r10,-16(fp)
   183b8:	e13ffd05 	stb	r4,-12(fp)
   183bc:	e0fffe05 	stb	r3,-8(fp)
   183c0:	e0bfff0d 	sth	r2,-4(fp)
    INT32U ticks;
    INT16U loops;


    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
   183c4:	008000b4 	movhi	r2,2
   183c8:	10931704 	addi	r2,r2,19548
   183cc:	10800003 	ldbu	r2,0(r2)
   183d0:	10803fcc 	andi	r2,r2,255
   183d4:	10000226 	beq	r2,zero,183e0 <OSTimeDlyHMSM+0x4c>
        return (OS_ERR_TIME_DLY_ISR);
   183d8:	00801544 	movi	r2,85
   183dc:	00004206 	br	184e8 <OSTimeDlyHMSM+0x154>
    }
#if OS_ARG_CHK_EN > 0
    if (hours == 0) {
   183e0:	e0bffc03 	ldbu	r2,-16(fp)
   183e4:	1000081e 	bne	r2,zero,18408 <OSTimeDlyHMSM+0x74>
        if (minutes == 0) {
   183e8:	e0bffd03 	ldbu	r2,-12(fp)
   183ec:	1000061e 	bne	r2,zero,18408 <OSTimeDlyHMSM+0x74>
            if (seconds == 0) {
   183f0:	e0bffe03 	ldbu	r2,-8(fp)
   183f4:	1000041e 	bne	r2,zero,18408 <OSTimeDlyHMSM+0x74>
                if (ms == 0) {
   183f8:	e0bfff0b 	ldhu	r2,-4(fp)
   183fc:	1000021e 	bne	r2,zero,18408 <OSTimeDlyHMSM+0x74>
                    return (OS_ERR_TIME_ZERO_DLY);
   18400:	00801504 	movi	r2,84
   18404:	00003806 	br	184e8 <OSTimeDlyHMSM+0x154>
                }
            }
        }
    }
    if (minutes > 59) {
   18408:	e0bffd03 	ldbu	r2,-12(fp)
   1840c:	10800f30 	cmpltui	r2,r2,60
   18410:	1000021e 	bne	r2,zero,1841c <OSTimeDlyHMSM+0x88>
        return (OS_ERR_TIME_INVALID_MINUTES);    /* Validate arguments to be within range              */
   18414:	00801444 	movi	r2,81
   18418:	00003306 	br	184e8 <OSTimeDlyHMSM+0x154>
    }
    if (seconds > 59) {
   1841c:	e0bffe03 	ldbu	r2,-8(fp)
   18420:	10800f30 	cmpltui	r2,r2,60
   18424:	1000021e 	bne	r2,zero,18430 <OSTimeDlyHMSM+0x9c>
        return (OS_ERR_TIME_INVALID_SECONDS);
   18428:	00801484 	movi	r2,82
   1842c:	00002e06 	br	184e8 <OSTimeDlyHMSM+0x154>
    }
    if (ms > 999) {
   18430:	e0bfff0b 	ldhu	r2,-4(fp)
   18434:	1080fa30 	cmpltui	r2,r2,1000
   18438:	1000021e 	bne	r2,zero,18444 <OSTimeDlyHMSM+0xb0>
        return (OS_ERR_TIME_INVALID_MS);
   1843c:	008014c4 	movi	r2,83
   18440:	00002906 	br	184e8 <OSTimeDlyHMSM+0x154>
    }
#endif
                                                 /* Compute the total number of clock ticks required.. */
                                                 /* .. (rounded to the nearest tick)                   */
    ticks = ((INT32U)hours * 3600L + (INT32U)minutes * 60L + (INT32U)seconds) * OS_TICKS_PER_SEC
   18444:	e0bffc03 	ldbu	r2,-16(fp)
   18448:	10c38424 	muli	r3,r2,3600
   1844c:	e0bffd03 	ldbu	r2,-12(fp)
   18450:	10800f24 	muli	r2,r2,60
   18454:	1887883a 	add	r3,r3,r2
   18458:	e0bffe03 	ldbu	r2,-8(fp)
   1845c:	1885883a 	add	r2,r3,r2
   18460:	100890fa 	slli	r4,r2,3
          + OS_TICKS_PER_SEC * ((INT32U)ms + 500L / OS_TICKS_PER_SEC) / 1000L;
   18464:	e0bfff0b 	ldhu	r2,-4(fp)
   18468:	10800f84 	addi	r2,r2,62
   1846c:	100690fa 	slli	r3,r2,3
   18470:	008418b4 	movhi	r2,4194
   18474:	109374c4 	addi	r2,r2,19923
   18478:	188a383a 	mulxuu	r5,r3,r2
   1847c:	1885383a 	mul	r2,r3,r2
   18480:	1011883a 	mov	r8,r2
   18484:	2813883a 	mov	r9,r5
   18488:	4804d1ba 	srli	r2,r9,6
        return (OS_ERR_TIME_INVALID_MS);
    }
#endif
                                                 /* Compute the total number of clock ticks required.. */
                                                 /* .. (rounded to the nearest tick)                   */
    ticks = ((INT32U)hours * 3600L + (INT32U)minutes * 60L + (INT32U)seconds) * OS_TICKS_PER_SEC
   1848c:	2085883a 	add	r2,r4,r2
   18490:	e0bffb15 	stw	r2,-20(fp)
          + OS_TICKS_PER_SEC * ((INT32U)ms + 500L / OS_TICKS_PER_SEC) / 1000L;
    loops = (INT16U)(ticks >> 16);               /* Compute the integral number of 65536 tick delays   */
   18494:	e0bffb17 	ldw	r2,-20(fp)
   18498:	1004d43a 	srli	r2,r2,16
   1849c:	e0bffa0d 	sth	r2,-24(fp)
    ticks = ticks & 0xFFFFL;                     /* Obtain  the fractional number of ticks             */
   184a0:	e0bffb17 	ldw	r2,-20(fp)
   184a4:	10bfffcc 	andi	r2,r2,65535
   184a8:	e0bffb15 	stw	r2,-20(fp)
    OSTimeDly((INT16U)ticks);
   184ac:	e0bffb17 	ldw	r2,-20(fp)
   184b0:	10bfffcc 	andi	r2,r2,65535
   184b4:	1009883a 	mov	r4,r2
   184b8:	001824c0 	call	1824c <OSTimeDly>
    while (loops > 0) {
   184bc:	00000706 	br	184dc <OSTimeDlyHMSM+0x148>
        OSTimeDly((INT16U)32768u);
   184c0:	01200014 	movui	r4,32768
   184c4:	001824c0 	call	1824c <OSTimeDly>
        OSTimeDly((INT16U)32768u);
   184c8:	01200014 	movui	r4,32768
   184cc:	001824c0 	call	1824c <OSTimeDly>
        loops--;
   184d0:	e0bffa0b 	ldhu	r2,-24(fp)
   184d4:	10bfffc4 	addi	r2,r2,-1
   184d8:	e0bffa0d 	sth	r2,-24(fp)
    ticks = ((INT32U)hours * 3600L + (INT32U)minutes * 60L + (INT32U)seconds) * OS_TICKS_PER_SEC
          + OS_TICKS_PER_SEC * ((INT32U)ms + 500L / OS_TICKS_PER_SEC) / 1000L;
    loops = (INT16U)(ticks >> 16);               /* Compute the integral number of 65536 tick delays   */
    ticks = ticks & 0xFFFFL;                     /* Obtain  the fractional number of ticks             */
    OSTimeDly((INT16U)ticks);
    while (loops > 0) {
   184dc:	e0bffa0b 	ldhu	r2,-24(fp)
   184e0:	103ff71e 	bne	r2,zero,184c0 <__alt_mem_Flash_flash_data+0xf40184c0>
        OSTimeDly((INT16U)32768u);
        OSTimeDly((INT16U)32768u);
        loops--;
    }
    return (OS_ERR_NONE);
   184e4:	0005883a 	mov	r2,zero
}
   184e8:	e037883a 	mov	sp,fp
   184ec:	dfc00117 	ldw	ra,4(sp)
   184f0:	df000017 	ldw	fp,0(sp)
   184f4:	dec00204 	addi	sp,sp,8
   184f8:	f800283a 	ret

000184fc <OSTimeDlyResume>:
*********************************************************************************************************
*/

#if OS_TIME_DLY_RESUME_EN > 0
INT8U  OSTimeDlyResume (INT8U prio)
{
   184fc:	defff504 	addi	sp,sp,-44
   18500:	dfc00a15 	stw	ra,40(sp)
   18504:	df000915 	stw	fp,36(sp)
   18508:	df000904 	addi	fp,sp,36
   1850c:	2005883a 	mov	r2,r4
   18510:	e0bfff05 	stb	r2,-4(fp)
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                                    /* Storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   18514:	e03ff715 	stw	zero,-36(fp)
#endif



    if (prio >= OS_LOWEST_PRIO) {
   18518:	e0bfff03 	ldbu	r2,-4(fp)
   1851c:	10800530 	cmpltui	r2,r2,20
   18520:	1000021e 	bne	r2,zero,1852c <OSTimeDlyResume+0x30>
        return (OS_ERR_PRIO_INVALID);
   18524:	00800a84 	movi	r2,42
   18528:	00006b06 	br	186d8 <OSTimeDlyResume+0x1dc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1852c:	0005303a 	rdctl	r2,status
   18530:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   18534:	e0fff917 	ldw	r3,-28(fp)
   18538:	00bfff84 	movi	r2,-2
   1853c:	1884703a 	and	r2,r3,r2
   18540:	1001703a 	wrctl	status,r2
  
  return context;
   18544:	e0bff917 	ldw	r2,-28(fp)
    }
    OS_ENTER_CRITICAL();
   18548:	e0bff715 	stw	r2,-36(fp)
    ptcb = OSTCBPrioTbl[prio];                                 /* Make sure that task exist            */
   1854c:	e0ffff03 	ldbu	r3,-4(fp)
   18550:	008000b4 	movhi	r2,2
   18554:	109fc504 	addi	r2,r2,32532
   18558:	18c7883a 	add	r3,r3,r3
   1855c:	18c7883a 	add	r3,r3,r3
   18560:	10c5883a 	add	r2,r2,r3
   18564:	10800017 	ldw	r2,0(r2)
   18568:	e0bff815 	stw	r2,-32(fp)
    if (ptcb == (OS_TCB *)0) {
   1856c:	e0bff817 	ldw	r2,-32(fp)
   18570:	1000061e 	bne	r2,zero,1858c <OSTimeDlyResume+0x90>
   18574:	e0bff717 	ldw	r2,-36(fp)
   18578:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1857c:	e0bffa17 	ldw	r2,-24(fp)
   18580:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);                        /* The task does not exist              */
   18584:	008010c4 	movi	r2,67
   18588:	00005306 	br	186d8 <OSTimeDlyResume+0x1dc>
    }
    if (ptcb == OS_TCB_RESERVED) {
   1858c:	e0bff817 	ldw	r2,-32(fp)
   18590:	10800058 	cmpnei	r2,r2,1
   18594:	1000061e 	bne	r2,zero,185b0 <OSTimeDlyResume+0xb4>
   18598:	e0bff717 	ldw	r2,-36(fp)
   1859c:	e0bffb15 	stw	r2,-20(fp)
   185a0:	e0bffb17 	ldw	r2,-20(fp)
   185a4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);                        /* The task does not exist              */
   185a8:	008010c4 	movi	r2,67
   185ac:	00004a06 	br	186d8 <OSTimeDlyResume+0x1dc>
    }
    if (ptcb->OSTCBDly == 0) {                                 /* See if task is delayed               */
   185b0:	e0bff817 	ldw	r2,-32(fp)
   185b4:	10800b8b 	ldhu	r2,46(r2)
   185b8:	10bfffcc 	andi	r2,r2,65535
   185bc:	1000061e 	bne	r2,zero,185d8 <OSTimeDlyResume+0xdc>
   185c0:	e0bff717 	ldw	r2,-36(fp)
   185c4:	e0bffc15 	stw	r2,-16(fp)
   185c8:	e0bffc17 	ldw	r2,-16(fp)
   185cc:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TIME_NOT_DLY);                          /* Indicate that task was not delayed   */
   185d0:	00801404 	movi	r2,80
   185d4:	00004006 	br	186d8 <OSTimeDlyResume+0x1dc>
    }

    ptcb->OSTCBDly = 0;                                        /* Clear the time delay                 */
   185d8:	e0bff817 	ldw	r2,-32(fp)
   185dc:	10000b8d 	sth	zero,46(r2)
    if ((ptcb->OSTCBStat & OS_STAT_PEND_ANY) != OS_STAT_RDY) {
   185e0:	e0bff817 	ldw	r2,-32(fp)
   185e4:	10800c03 	ldbu	r2,48(r2)
   185e8:	10803fcc 	andi	r2,r2,255
   185ec:	10800dcc 	andi	r2,r2,55
   185f0:	10000b26 	beq	r2,zero,18620 <OSTimeDlyResume+0x124>
        ptcb->OSTCBStat     &= ~OS_STAT_PEND_ANY;              /* Yes, Clear status flag               */
   185f4:	e0bff817 	ldw	r2,-32(fp)
   185f8:	10c00c03 	ldbu	r3,48(r2)
   185fc:	00bff204 	movi	r2,-56
   18600:	1884703a 	and	r2,r3,r2
   18604:	1007883a 	mov	r3,r2
   18608:	e0bff817 	ldw	r2,-32(fp)
   1860c:	10c00c05 	stb	r3,48(r2)
        ptcb->OSTCBStatPend  =  OS_STAT_PEND_TO;               /* Indicate PEND timeout                */
   18610:	e0bff817 	ldw	r2,-32(fp)
   18614:	00c00044 	movi	r3,1
   18618:	10c00c45 	stb	r3,49(r2)
   1861c:	00000206 	br	18628 <OSTimeDlyResume+0x12c>
    } else {
        ptcb->OSTCBStatPend  =  OS_STAT_PEND_OK;
   18620:	e0bff817 	ldw	r2,-32(fp)
   18624:	10000c45 	stb	zero,49(r2)
    }
    if ((ptcb->OSTCBStat & OS_STAT_SUSPEND) == OS_STAT_RDY) {  /* Is task suspended?                   */
   18628:	e0bff817 	ldw	r2,-32(fp)
   1862c:	10800c03 	ldbu	r2,48(r2)
   18630:	10803fcc 	andi	r2,r2,255
   18634:	1080020c 	andi	r2,r2,8
   18638:	1000221e 	bne	r2,zero,186c4 <OSTimeDlyResume+0x1c8>
        OSRdyGrp               |= ptcb->OSTCBBitY;             /* No,  Make ready                      */
   1863c:	e0bff817 	ldw	r2,-32(fp)
   18640:	10c00d83 	ldbu	r3,54(r2)
   18644:	008000b4 	movhi	r2,2
   18648:	10931504 	addi	r2,r2,19540
   1864c:	10800003 	ldbu	r2,0(r2)
   18650:	1884b03a 	or	r2,r3,r2
   18654:	1007883a 	mov	r3,r2
   18658:	008000b4 	movhi	r2,2
   1865c:	10931504 	addi	r2,r2,19540
   18660:	10c00005 	stb	r3,0(r2)
        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
   18664:	e0bff817 	ldw	r2,-32(fp)
   18668:	10800d03 	ldbu	r2,52(r2)
   1866c:	10c03fcc 	andi	r3,r2,255
   18670:	e0bff817 	ldw	r2,-32(fp)
   18674:	10800d03 	ldbu	r2,52(r2)
   18678:	11003fcc 	andi	r4,r2,255
   1867c:	008000b4 	movhi	r2,2
   18680:	10931544 	addi	r2,r2,19541
   18684:	1105883a 	add	r2,r2,r4
   18688:	11000003 	ldbu	r4,0(r2)
   1868c:	e0bff817 	ldw	r2,-32(fp)
   18690:	10800d43 	ldbu	r2,53(r2)
   18694:	2084b03a 	or	r2,r4,r2
   18698:	1009883a 	mov	r4,r2
   1869c:	008000b4 	movhi	r2,2
   186a0:	10931544 	addi	r2,r2,19541
   186a4:	10c5883a 	add	r2,r2,r3
   186a8:	11000005 	stb	r4,0(r2)
   186ac:	e0bff717 	ldw	r2,-36(fp)
   186b0:	e0bffd15 	stw	r2,-12(fp)
   186b4:	e0bffd17 	ldw	r2,-12(fp)
   186b8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                                            /* See if this is new highest priority  */
   186bc:	001243c0 	call	1243c <OS_Sched>
   186c0:	00000406 	br	186d4 <OSTimeDlyResume+0x1d8>
   186c4:	e0bff717 	ldw	r2,-36(fp)
   186c8:	e0bffe15 	stw	r2,-8(fp)
   186cc:	e0bffe17 	ldw	r2,-8(fp)
   186d0:	1001703a 	wrctl	status,r2
    } else {
        OS_EXIT_CRITICAL();                                    /* Task may be suspended                */
    }
    return (OS_ERR_NONE);
   186d4:	0005883a 	mov	r2,zero
}
   186d8:	e037883a 	mov	sp,fp
   186dc:	dfc00117 	ldw	ra,4(sp)
   186e0:	df000017 	ldw	fp,0(sp)
   186e4:	dec00204 	addi	sp,sp,8
   186e8:	f800283a 	ret

000186ec <OSTimeGet>:
*********************************************************************************************************
*/

#if OS_TIME_GET_SET_EN > 0
INT32U  OSTimeGet (void)
{
   186ec:	defffb04 	addi	sp,sp,-20
   186f0:	df000415 	stw	fp,16(sp)
   186f4:	df000404 	addi	fp,sp,16
    INT32U     ticks;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   186f8:	e03ffc15 	stw	zero,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   186fc:	0005303a 	rdctl	r2,status
   18700:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   18704:	e0fffe17 	ldw	r3,-8(fp)
   18708:	00bfff84 	movi	r2,-2
   1870c:	1884703a 	and	r2,r3,r2
   18710:	1001703a 	wrctl	status,r2
  
  return context;
   18714:	e0bffe17 	ldw	r2,-8(fp)
#endif



    OS_ENTER_CRITICAL();
   18718:	e0bffc15 	stw	r2,-16(fp)
    ticks = OSTime;
   1871c:	008000b4 	movhi	r2,2
   18720:	10931904 	addi	r2,r2,19556
   18724:	10800017 	ldw	r2,0(r2)
   18728:	e0bffd15 	stw	r2,-12(fp)
   1872c:	e0bffc17 	ldw	r2,-16(fp)
   18730:	e0bfff15 	stw	r2,-4(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   18734:	e0bfff17 	ldw	r2,-4(fp)
   18738:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (ticks);
   1873c:	e0bffd17 	ldw	r2,-12(fp)
}
   18740:	e037883a 	mov	sp,fp
   18744:	df000017 	ldw	fp,0(sp)
   18748:	dec00104 	addi	sp,sp,4
   1874c:	f800283a 	ret

00018750 <OSTimeSet>:
*********************************************************************************************************
*/

#if OS_TIME_GET_SET_EN > 0
void  OSTimeSet (INT32U ticks)
{
   18750:	defffb04 	addi	sp,sp,-20
   18754:	df000415 	stw	fp,16(sp)
   18758:	df000404 	addi	fp,sp,16
   1875c:	e13fff15 	stw	r4,-4(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   18760:	e03ffc15 	stw	zero,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   18764:	0005303a 	rdctl	r2,status
   18768:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1876c:	e0fffd17 	ldw	r3,-12(fp)
   18770:	00bfff84 	movi	r2,-2
   18774:	1884703a 	and	r2,r3,r2
   18778:	1001703a 	wrctl	status,r2
  
  return context;
   1877c:	e0bffd17 	ldw	r2,-12(fp)
#endif



    OS_ENTER_CRITICAL();
   18780:	e0bffc15 	stw	r2,-16(fp)
    OSTime = ticks;
   18784:	008000b4 	movhi	r2,2
   18788:	10931904 	addi	r2,r2,19556
   1878c:	e0ffff17 	ldw	r3,-4(fp)
   18790:	10c00015 	stw	r3,0(r2)
   18794:	e0bffc17 	ldw	r2,-16(fp)
   18798:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1879c:	e0bffe17 	ldw	r2,-8(fp)
   187a0:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
}
   187a4:	e037883a 	mov	sp,fp
   187a8:	df000017 	ldw	fp,0(sp)
   187ac:	dec00104 	addi	sp,sp,4
   187b0:	f800283a 	ret

000187b4 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
   187b4:	defffd04 	addi	sp,sp,-12
   187b8:	dfc00215 	stw	ra,8(sp)
   187bc:	df000115 	stw	fp,4(sp)
   187c0:	df000104 	addi	fp,sp,4
   187c4:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
   187c8:	e13fff17 	ldw	r4,-4(fp)
   187cc:	014000b4 	movhi	r5,2
   187d0:	294b1504 	addi	r5,r5,11348
   187d4:	001f3f00 	call	1f3f0 <alt_dev_llist_insert>
}
   187d8:	e037883a 	mov	sp,fp
   187dc:	dfc00117 	ldw	ra,4(sp)
   187e0:	df000017 	ldw	fp,0(sp)
   187e4:	dec00204 	addi	sp,sp,8
   187e8:	f800283a 	ret

000187ec <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
   187ec:	defffd04 	addi	sp,sp,-12
   187f0:	dfc00215 	stw	ra,8(sp)
   187f4:	df000115 	stw	fp,4(sp)
   187f8:	df000104 	addi	fp,sp,4
   187fc:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2, Nios2);
   18800:	001fd040 	call	1fd04 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
   18804:	00800044 	movi	r2,1
   18808:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
   1880c:	e037883a 	mov	sp,fp
   18810:	dfc00117 	ldw	ra,4(sp)
   18814:	df000017 	ldw	fp,0(sp)
   18818:	dec00204 	addi	sp,sp,8
   1881c:	f800283a 	ret

00018820 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
   18820:	defffd04 	addi	sp,sp,-12
   18824:	dfc00215 	stw	ra,8(sp)
   18828:	df000115 	stw	fp,4(sp)
   1882c:	df000104 	addi	fp,sp,4
    ALTERA_AVALON_TIMER_INIT ( INTERVAL_TIMER, Interval_Timer);
   18830:	01040034 	movhi	r4,4096
   18834:	21080004 	addi	r4,r4,8192
   18838:	000b883a 	mov	r5,zero
   1883c:	000d883a 	mov	r6,zero
   18840:	01c00204 	movi	r7,8
   18844:	001dc3c0 	call	1dc3c <alt_avalon_timer_sc_init>
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, JTAG_UART);
   18848:	010000b4 	movhi	r4,2
   1884c:	21061b04 	addi	r4,r4,6252
   18850:	000b883a 	mov	r5,zero
   18854:	01800204 	movi	r6,8
   18858:	001d0040 	call	1d004 <altera_avalon_jtag_uart_init>
   1885c:	010000b4 	movhi	r4,2
   18860:	21061104 	addi	r4,r4,6212
   18864:	00187b40 	call	187b4 <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID, SysID);
   18868:	0001883a 	nop
    ALTERA_UP_AVALON_AUDIO_AND_VIDEO_CONFIG_INIT ( AV_CONFIG, AV_Config);
   1886c:	010000b4 	movhi	r4,2
   18870:	210a2c04 	addi	r4,r4,10416
   18874:	00187b40 	call	187b4 <alt_dev_reg>
    ALTERA_UP_AVALON_AUDIO_INIT ( AUDIO_SUBSYSTEM_AUDIO, Audio_Subsystem_Audio);
   18878:	010000b4 	movhi	r4,2
   1887c:	210a3804 	addi	r4,r4,10464
   18880:	00187b40 	call	187b4 <alt_dev_reg>
    ALTERA_UP_AVALON_CHARACTER_LCD_INIT ( CHAR_LCD_16X2, Char_LCD_16x2);
   18884:	010000b4 	movhi	r4,2
   18888:	210a4404 	addi	r4,r4,10512
   1888c:	001dd6c0 	call	1dd6c <alt_up_character_lcd_init>
   18890:	010000b4 	movhi	r4,2
   18894:	210a4404 	addi	r4,r4,10512
   18898:	00187b40 	call	187b4 <alt_dev_reg>
    ALTERA_UP_AVALON_IRDA_INIT ( IRDA, IrDA);
   1889c:	010000b4 	movhi	r4,2
   188a0:	210a4f04 	addi	r4,r4,10556
   188a4:	00187b40 	call	187b4 <alt_dev_reg>
    ALTERA_UP_AVALON_PARALLEL_PORT_INIT ( EXPANSION_JP5, Expansion_JP5);
   188a8:	010000b4 	movhi	r4,2
   188ac:	210a5a04 	addi	r4,r4,10600
   188b0:	00187b40 	call	187b4 <alt_dev_reg>
    ALTERA_UP_AVALON_PARALLEL_PORT_INIT ( GREEN_LEDS, Green_LEDs);
   188b4:	010000b4 	movhi	r4,2
   188b8:	210a6504 	addi	r4,r4,10644
   188bc:	00187b40 	call	187b4 <alt_dev_reg>
    ALTERA_UP_AVALON_PARALLEL_PORT_INIT ( HEX3_HEX0, HEX3_HEX0);
   188c0:	010000b4 	movhi	r4,2
   188c4:	210a7004 	addi	r4,r4,10688
   188c8:	00187b40 	call	187b4 <alt_dev_reg>
    ALTERA_UP_AVALON_PARALLEL_PORT_INIT ( HEX7_HEX4, HEX7_HEX4);
   188cc:	010000b4 	movhi	r4,2
   188d0:	210a7b04 	addi	r4,r4,10732
   188d4:	00187b40 	call	187b4 <alt_dev_reg>
    ALTERA_UP_AVALON_PARALLEL_PORT_INIT ( PUSHBUTTONS, Pushbuttons);
   188d8:	010000b4 	movhi	r4,2
   188dc:	210a8604 	addi	r4,r4,10776
   188e0:	00187b40 	call	187b4 <alt_dev_reg>
    ALTERA_UP_AVALON_PARALLEL_PORT_INIT ( RED_LEDS, Red_LEDs);
   188e4:	010000b4 	movhi	r4,2
   188e8:	210a9104 	addi	r4,r4,10820
   188ec:	00187b40 	call	187b4 <alt_dev_reg>
    ALTERA_UP_AVALON_PARALLEL_PORT_INIT ( SLIDER_SWITCHES, Slider_Switches);
   188f0:	010000b4 	movhi	r4,2
   188f4:	210a9c04 	addi	r4,r4,10864
   188f8:	00187b40 	call	187b4 <alt_dev_reg>
    ALTERA_UP_AVALON_PS2_INIT ( PS2_PORT, PS2_Port);
   188fc:	010000b4 	movhi	r4,2
   18900:	210aa704 	addi	r4,r4,10908
   18904:	001e6440 	call	1e644 <alt_up_ps2_init>
   18908:	010000b4 	movhi	r4,2
   1890c:	210aa704 	addi	r4,r4,10908
   18910:	00187b40 	call	187b4 <alt_dev_reg>
    ALTERA_UP_AVALON_PS2_INIT ( PS2_PORT_DUAL, PS2_Port_Dual);
   18914:	010000b4 	movhi	r4,2
   18918:	210ab504 	addi	r4,r4,10964
   1891c:	001e6440 	call	1e644 <alt_up_ps2_init>
   18920:	010000b4 	movhi	r4,2
   18924:	210ab504 	addi	r4,r4,10964
   18928:	00187b40 	call	187b4 <alt_dev_reg>
    ALTERA_UP_AVALON_RS232_INIT ( SERIAL_PORT, Serial_Port);
   1892c:	010000b4 	movhi	r4,2
   18930:	210ac304 	addi	r4,r4,11020
   18934:	00187b40 	call	187b4 <alt_dev_reg>
    ALTERA_UP_AVALON_USB_INIT ( USB, USB);
   18938:	010000b4 	movhi	r4,2
   1893c:	210ace04 	addi	r4,r4,11064
   18940:	00187b40 	call	187b4 <alt_dev_reg>
    ALTERA_UP_AVALON_VIDEO_CHARACTER_BUFFER_WITH_DMA_INIT ( VGA_SUBSYSTEM_VGA_CHAR_BUFFER, VGA_Subsystem_VGA_Char_Buffer);
   18944:	008000b4 	movhi	r2,2
   18948:	108adb04 	addi	r2,r2,11116
   1894c:	10800a17 	ldw	r2,40(r2)
   18950:	10800104 	addi	r2,r2,4
   18954:	10800017 	ldw	r2,0(r2)
   18958:	10ffffcc 	andi	r3,r2,65535
   1895c:	008000b4 	movhi	r2,2
   18960:	108adb04 	addi	r2,r2,11116
   18964:	10c00c15 	stw	r3,48(r2)
   18968:	008000b4 	movhi	r2,2
   1896c:	108adb04 	addi	r2,r2,11116
   18970:	10800a17 	ldw	r2,40(r2)
   18974:	10800104 	addi	r2,r2,4
   18978:	10800017 	ldw	r2,0(r2)
   1897c:	1006d43a 	srli	r3,r2,16
   18980:	008000b4 	movhi	r2,2
   18984:	108adb04 	addi	r2,r2,11116
   18988:	10c00d15 	stw	r3,52(r2)
   1898c:	008000b4 	movhi	r2,2
   18990:	108adb04 	addi	r2,r2,11116
   18994:	10800c17 	ldw	r2,48(r2)
   18998:	10801068 	cmpgeui	r2,r2,65
   1899c:	1000081e 	bne	r2,zero,189c0 <alt_sys_init+0x1a0>
   189a0:	008000b4 	movhi	r2,2
   189a4:	108adb04 	addi	r2,r2,11116
   189a8:	00c00fc4 	movi	r3,63
   189ac:	10c00f15 	stw	r3,60(r2)
   189b0:	008000b4 	movhi	r2,2
   189b4:	108adb04 	addi	r2,r2,11116
   189b8:	00c00184 	movi	r3,6
   189bc:	10c01015 	stw	r3,64(r2)
   189c0:	008000b4 	movhi	r2,2
   189c4:	108adb04 	addi	r2,r2,11116
   189c8:	10800d17 	ldw	r2,52(r2)
   189cc:	10800868 	cmpgeui	r2,r2,33
   189d0:	1000041e 	bne	r2,zero,189e4 <alt_sys_init+0x1c4>
   189d4:	008000b4 	movhi	r2,2
   189d8:	108adb04 	addi	r2,r2,11116
   189dc:	00c007c4 	movi	r3,31
   189e0:	10c01115 	stw	r3,68(r2)
   189e4:	010000b4 	movhi	r4,2
   189e8:	210adb04 	addi	r4,r4,11116
   189ec:	001ef5c0 	call	1ef5c <alt_up_char_buffer_init>
   189f0:	010000b4 	movhi	r4,2
   189f4:	210adb04 	addi	r4,r4,11116
   189f8:	00187b40 	call	187b4 <alt_dev_reg>
    ALTERA_UP_AVALON_VIDEO_PIXEL_BUFFER_DMA_INIT ( VGA_SUBSYSTEM_VGA_PIXEL_DMA, VGA_Subsystem_VGA_Pixel_DMA);
   189fc:	008000b4 	movhi	r2,2
   18a00:	108aed04 	addi	r2,r2,11188
   18a04:	10800a17 	ldw	r2,40(r2)
   18a08:	10800017 	ldw	r2,0(r2)
   18a0c:	1007883a 	mov	r3,r2
   18a10:	008000b4 	movhi	r2,2
   18a14:	108aed04 	addi	r2,r2,11188
   18a18:	10c00b15 	stw	r3,44(r2)
   18a1c:	008000b4 	movhi	r2,2
   18a20:	108aed04 	addi	r2,r2,11188
   18a24:	10800a17 	ldw	r2,40(r2)
   18a28:	10800104 	addi	r2,r2,4
   18a2c:	10800017 	ldw	r2,0(r2)
   18a30:	1007883a 	mov	r3,r2
   18a34:	008000b4 	movhi	r2,2
   18a38:	108aed04 	addi	r2,r2,11188
   18a3c:	10c00c15 	stw	r3,48(r2)
   18a40:	008000b4 	movhi	r2,2
   18a44:	108aed04 	addi	r2,r2,11188
   18a48:	10800a17 	ldw	r2,40(r2)
   18a4c:	10800204 	addi	r2,r2,8
   18a50:	10800017 	ldw	r2,0(r2)
   18a54:	10ffffcc 	andi	r3,r2,65535
   18a58:	008000b4 	movhi	r2,2
   18a5c:	108aed04 	addi	r2,r2,11188
   18a60:	10c00f15 	stw	r3,60(r2)
   18a64:	008000b4 	movhi	r2,2
   18a68:	108aed04 	addi	r2,r2,11188
   18a6c:	10800a17 	ldw	r2,40(r2)
   18a70:	10800204 	addi	r2,r2,8
   18a74:	10800017 	ldw	r2,0(r2)
   18a78:	1006d43a 	srli	r3,r2,16
   18a7c:	008000b4 	movhi	r2,2
   18a80:	108aed04 	addi	r2,r2,11188
   18a84:	10c01015 	stw	r3,64(r2)
   18a88:	008000b4 	movhi	r2,2
   18a8c:	108aed04 	addi	r2,r2,11188
   18a90:	10800a17 	ldw	r2,40(r2)
   18a94:	10800304 	addi	r2,r2,12
   18a98:	10800017 	ldw	r2,0(r2)
   18a9c:	1005d07a 	srai	r2,r2,1
   18aa0:	10c0004c 	andi	r3,r2,1
   18aa4:	008000b4 	movhi	r2,2
   18aa8:	108aed04 	addi	r2,r2,11188
   18aac:	10c00d15 	stw	r3,52(r2)
   18ab0:	008000b4 	movhi	r2,2
   18ab4:	108aed04 	addi	r2,r2,11188
   18ab8:	10800a17 	ldw	r2,40(r2)
   18abc:	10800304 	addi	r2,r2,12
   18ac0:	10800017 	ldw	r2,0(r2)
   18ac4:	1005d13a 	srai	r2,r2,4
   18ac8:	10c003cc 	andi	r3,r2,15
   18acc:	008000b4 	movhi	r2,2
   18ad0:	108aed04 	addi	r2,r2,11188
   18ad4:	10c00e15 	stw	r3,56(r2)
   18ad8:	008000b4 	movhi	r2,2
   18adc:	108aed04 	addi	r2,r2,11188
   18ae0:	10800a17 	ldw	r2,40(r2)
   18ae4:	10800304 	addi	r2,r2,12
   18ae8:	10800017 	ldw	r2,0(r2)
   18aec:	1005d43a 	srai	r2,r2,16
   18af0:	e0bfff05 	stb	r2,-4(fp)
   18af4:	008000b4 	movhi	r2,2
   18af8:	108aed04 	addi	r2,r2,11188
   18afc:	10800a17 	ldw	r2,40(r2)
   18b00:	10800304 	addi	r2,r2,12
   18b04:	10800017 	ldw	r2,0(r2)
   18b08:	1004d63a 	srli	r2,r2,24
   18b0c:	e0bfff45 	stb	r2,-3(fp)
   18b10:	008000b4 	movhi	r2,2
   18b14:	108aed04 	addi	r2,r2,11188
   18b18:	10800e17 	ldw	r2,56(r2)
   18b1c:	10800058 	cmpnei	r2,r2,1
   18b20:	1000041e 	bne	r2,zero,18b34 <alt_sys_init+0x314>
   18b24:	008000b4 	movhi	r2,2
   18b28:	108aed04 	addi	r2,r2,11188
   18b2c:	10001115 	stw	zero,68(r2)
   18b30:	00000e06 	br	18b6c <alt_sys_init+0x34c>
   18b34:	008000b4 	movhi	r2,2
   18b38:	108aed04 	addi	r2,r2,11188
   18b3c:	10800e17 	ldw	r2,56(r2)
   18b40:	10800098 	cmpnei	r2,r2,2
   18b44:	1000051e 	bne	r2,zero,18b5c <alt_sys_init+0x33c>
   18b48:	008000b4 	movhi	r2,2
   18b4c:	108aed04 	addi	r2,r2,11188
   18b50:	00c00044 	movi	r3,1
   18b54:	10c01115 	stw	r3,68(r2)
   18b58:	00000406 	br	18b6c <alt_sys_init+0x34c>
   18b5c:	008000b4 	movhi	r2,2
   18b60:	108aed04 	addi	r2,r2,11188
   18b64:	00c00084 	movi	r3,2
   18b68:	10c01115 	stw	r3,68(r2)
   18b6c:	e0bfff03 	ldbu	r2,-4(fp)
   18b70:	00c00804 	movi	r3,32
   18b74:	1885c83a 	sub	r2,r3,r2
   18b78:	00ffffc4 	movi	r3,-1
   18b7c:	1886d83a 	srl	r3,r3,r2
   18b80:	008000b4 	movhi	r2,2
   18b84:	108aed04 	addi	r2,r2,11188
   18b88:	10c01215 	stw	r3,72(r2)
   18b8c:	e0ffff03 	ldbu	r3,-4(fp)
   18b90:	008000b4 	movhi	r2,2
   18b94:	108aed04 	addi	r2,r2,11188
   18b98:	10801117 	ldw	r2,68(r2)
   18b9c:	1887883a 	add	r3,r3,r2
   18ba0:	008000b4 	movhi	r2,2
   18ba4:	108aed04 	addi	r2,r2,11188
   18ba8:	10c01315 	stw	r3,76(r2)
   18bac:	e0bfff43 	ldbu	r2,-3(fp)
   18bb0:	00c00804 	movi	r3,32
   18bb4:	1885c83a 	sub	r2,r3,r2
   18bb8:	00ffffc4 	movi	r3,-1
   18bbc:	1886d83a 	srl	r3,r3,r2
   18bc0:	008000b4 	movhi	r2,2
   18bc4:	108aed04 	addi	r2,r2,11188
   18bc8:	10c01415 	stw	r3,80(r2)
   18bcc:	010000b4 	movhi	r4,2
   18bd0:	210aed04 	addi	r4,r4,11188
   18bd4:	00187b40 	call	187b4 <alt_dev_reg>
    ALTERA_UP_SD_CARD_AVALON_INTERFACE_INIT ( SD_CARD, SD_Card);
   18bd8:	010000b4 	movhi	r4,2
   18bdc:	210b0204 	addi	r4,r4,11272
   18be0:	00187b40 	call	187b4 <alt_dev_reg>
}
   18be4:	e037883a 	mov	sp,fp
   18be8:	dfc00117 	ldw	ra,4(sp)
   18bec:	df000017 	ldw	fp,0(sp)
   18bf0:	dec00204 	addi	sp,sp,8
   18bf4:	f800283a 	ret

00018bf8 <Write_Sector_Data>:
///////////////////////////////////////////////////////////////////////////

        
bool Write_Sector_Data(int sector_index, int partition_offset)
// This function writes a sector at the specified address on the SD Card.
{
   18bf8:	defffa04 	addi	sp,sp,-24
   18bfc:	dfc00515 	stw	ra,20(sp)
   18c00:	df000415 	stw	fp,16(sp)
   18c04:	df000404 	addi	fp,sp,16
   18c08:	e13ffe15 	stw	r4,-8(fp)
   18c0c:	e17fff15 	stw	r5,-4(fp)
    bool result = false;
   18c10:	e03ffc15 	stw	zero,-16(fp)
    
    if (alt_up_sd_card_is_Present())
   18c14:	001b90c0 	call	1b90c <alt_up_sd_card_is_Present>
   18c18:	10001e26 	beq	r2,zero,18c94 <Write_Sector_Data+0x9c>
    {
        short int reg_state = 0xff;
   18c1c:	00803fc4 	movi	r2,255
   18c20:	e0bffd0d 	sth	r2,-12(fp)

		/* Multiply sector offset by sector size to get the address. Sector size is 512. Also,
         * the SD card reads data in 512 byte chunks, so the address must be a multiple of 512. */
        IOWR_32DIRECT(command_argument_register, 0, (sector_index + partition_offset)*512);
   18c24:	d0a81617 	ldw	r2,-24488(gp)
   18c28:	e13ffe17 	ldw	r4,-8(fp)
   18c2c:	e0ffff17 	ldw	r3,-4(fp)
   18c30:	20c7883a 	add	r3,r4,r3
   18c34:	1806927a 	slli	r3,r3,9
   18c38:	10c00035 	stwio	r3,0(r2)
        IOWR_16DIRECT(command_register, 0, CMD_WRITE_BLOCK);
   18c3c:	d0a81517 	ldw	r2,-24492(gp)
   18c40:	00c00604 	movi	r3,24
   18c44:	10c0002d 	sthio	r3,0(r2)
        do {
            reg_state = (short int) IORD_16DIRECT(aux_status_register,0);
   18c48:	d0a81217 	ldw	r2,-24504(gp)
   18c4c:	1080002b 	ldhuio	r2,0(r2)
   18c50:	10bfffcc 	andi	r2,r2,65535
   18c54:	e0bffd0d 	sth	r2,-12(fp)
        } while ((reg_state & 0x04)!=0);
   18c58:	e0bffd0b 	ldhu	r2,-12(fp)
   18c5c:	10bfffcc 	andi	r2,r2,65535
   18c60:	1080010c 	andi	r2,r2,4
   18c64:	103ff81e 	bne	r2,zero,18c48 <__alt_mem_Flash_flash_data+0xf4018c48>
        // Make sure the request did not time out.
        if ((reg_state & 0x10) == 0)
   18c68:	e0bffd0b 	ldhu	r2,-12(fp)
   18c6c:	10bfffcc 	andi	r2,r2,65535
   18c70:	1080040c 	andi	r2,r2,16
   18c74:	1000071e 	bne	r2,zero,18c94 <Write_Sector_Data+0x9c>
        {
            result = true;
   18c78:	00800044 	movi	r2,1
   18c7c:	e0bffc15 	stw	r2,-16(fp)
            current_sector_modified = false;
   18c80:	d0281b15 	stw	zero,-24468(gp)
            current_sector_index = sector_index+partition_offset;
   18c84:	e0fffe17 	ldw	r3,-8(fp)
   18c88:	e0bfff17 	ldw	r2,-4(fp)
   18c8c:	1885883a 	add	r2,r3,r2
   18c90:	d0a81c15 	stw	r2,-24464(gp)
        }
    }
    return result;
   18c94:	e0bffc17 	ldw	r2,-16(fp)
}
   18c98:	e037883a 	mov	sp,fp
   18c9c:	dfc00117 	ldw	ra,4(sp)
   18ca0:	df000017 	ldw	fp,0(sp)
   18ca4:	dec00204 	addi	sp,sp,8
   18ca8:	f800283a 	ret

00018cac <Save_Modified_Sector>:


bool Save_Modified_Sector()
// If the sector has been modified, then save it to the SD Card.
{
   18cac:	defffd04 	addi	sp,sp,-12
   18cb0:	dfc00215 	stw	ra,8(sp)
   18cb4:	df000115 	stw	fp,4(sp)
   18cb8:	df000104 	addi	fp,sp,4
    bool result = true;
   18cbc:	00800044 	movi	r2,1
   18cc0:	e0bfff15 	stw	r2,-4(fp)
    if (current_sector_modified)
   18cc4:	d0a81b17 	ldw	r2,-24468(gp)
   18cc8:	10000526 	beq	r2,zero,18ce0 <Save_Modified_Sector+0x34>
    {
        result = Write_Sector_Data(current_sector_index, 0);
   18ccc:	d0a81c17 	ldw	r2,-24464(gp)
   18cd0:	1009883a 	mov	r4,r2
   18cd4:	000b883a 	mov	r5,zero
   18cd8:	0018bf80 	call	18bf8 <Write_Sector_Data>
   18cdc:	e0bfff15 	stw	r2,-4(fp)
    }
    return result;
   18ce0:	e0bfff17 	ldw	r2,-4(fp)
}
   18ce4:	e037883a 	mov	sp,fp
   18ce8:	dfc00117 	ldw	ra,4(sp)
   18cec:	df000017 	ldw	fp,0(sp)
   18cf0:	dec00204 	addi	sp,sp,8
   18cf4:	f800283a 	ret

00018cf8 <Read_Sector_Data>:


bool Read_Sector_Data(int sector_index, int partition_offset)
// This function reads a sector at the specified address on the SD Card.
{
   18cf8:	defffa04 	addi	sp,sp,-24
   18cfc:	dfc00515 	stw	ra,20(sp)
   18d00:	df000415 	stw	fp,16(sp)
   18d04:	df000404 	addi	fp,sp,16
   18d08:	e13ffe15 	stw	r4,-8(fp)
   18d0c:	e17fff15 	stw	r5,-4(fp)
	bool result = false;
   18d10:	e03ffc15 	stw	zero,-16(fp)
    
	if (alt_up_sd_card_is_Present())
   18d14:	001b90c0 	call	1b90c <alt_up_sd_card_is_Present>
   18d18:	10002726 	beq	r2,zero,18db8 <Read_Sector_Data+0xc0>
	{
		short int reg_state = 0xff;
   18d1c:	00803fc4 	movi	r2,255
   18d20:	e0bffd0d 	sth	r2,-12(fp)
        
        /* Write data to the SD card if the current buffer is out of date. */
        if (current_sector_modified)
   18d24:	d0a81b17 	ldw	r2,-24468(gp)
   18d28:	10000726 	beq	r2,zero,18d48 <Read_Sector_Data+0x50>
        {
            if (Write_Sector_Data(current_sector_index, 0) == false)
   18d2c:	d0a81c17 	ldw	r2,-24464(gp)
   18d30:	1009883a 	mov	r4,r2
   18d34:	000b883a 	mov	r5,zero
   18d38:	0018bf80 	call	18bf8 <Write_Sector_Data>
   18d3c:	1000021e 	bne	r2,zero,18d48 <Read_Sector_Data+0x50>
            {
                return false;
   18d40:	0005883a 	mov	r2,zero
   18d44:	00001d06 	br	18dbc <Read_Sector_Data+0xc4>
            }
        }
		/* Multiply sector offset by sector size to get the address. Sector size is 512. Also,
		 * the SD card reads data in 512 byte chunks, so the address must be a multiple of 512. */
        IOWR_32DIRECT(command_argument_register, 0, (sector_index + partition_offset)*512);
   18d48:	d0a81617 	ldw	r2,-24488(gp)
   18d4c:	e13ffe17 	ldw	r4,-8(fp)
   18d50:	e0ffff17 	ldw	r3,-4(fp)
   18d54:	20c7883a 	add	r3,r4,r3
   18d58:	1806927a 	slli	r3,r3,9
   18d5c:	10c00035 	stwio	r3,0(r2)
        IOWR_16DIRECT(command_register, 0, CMD_READ_BLOCK);
   18d60:	d0a81517 	ldw	r2,-24492(gp)
   18d64:	00c00444 	movi	r3,17
   18d68:	10c0002d 	sthio	r3,0(r2)
		do {
			reg_state = (short int) IORD_16DIRECT(aux_status_register,0);
   18d6c:	d0a81217 	ldw	r2,-24504(gp)
   18d70:	1080002b 	ldhuio	r2,0(r2)
   18d74:	10bfffcc 	andi	r2,r2,65535
   18d78:	e0bffd0d 	sth	r2,-12(fp)
		} while ((reg_state & 0x04)!=0);
   18d7c:	e0bffd0b 	ldhu	r2,-12(fp)
   18d80:	10bfffcc 	andi	r2,r2,65535
   18d84:	1080010c 	andi	r2,r2,4
   18d88:	103ff81e 	bne	r2,zero,18d6c <__alt_mem_Flash_flash_data+0xf4018d6c>
		// Make sure the request did not time out.
		if ((reg_state & 0x10) == 0)
   18d8c:	e0bffd0b 	ldhu	r2,-12(fp)
   18d90:	10bfffcc 	andi	r2,r2,65535
   18d94:	1080040c 	andi	r2,r2,16
   18d98:	1000071e 	bne	r2,zero,18db8 <Read_Sector_Data+0xc0>
		{
			result = true;
   18d9c:	00800044 	movi	r2,1
   18da0:	e0bffc15 	stw	r2,-16(fp)
            current_sector_modified = false;
   18da4:	d0281b15 	stw	zero,-24468(gp)
            current_sector_index = sector_index+partition_offset;
   18da8:	e0fffe17 	ldw	r3,-8(fp)
   18dac:	e0bfff17 	ldw	r2,-4(fp)
   18db0:	1885883a 	add	r2,r3,r2
   18db4:	d0a81c15 	stw	r2,-24464(gp)
		}
	}
	return result;
   18db8:	e0bffc17 	ldw	r2,-16(fp)
}
   18dbc:	e037883a 	mov	sp,fp
   18dc0:	dfc00117 	ldw	ra,4(sp)
   18dc4:	df000017 	ldw	fp,0(sp)
   18dc8:	dec00204 	addi	sp,sp,8
   18dcc:	f800283a 	ret

00018dd0 <get_cluster_flag>:


bool get_cluster_flag(unsigned int cluster_index, unsigned short int *flag)
// Read a cluster flag.
{
   18dd0:	defffb04 	addi	sp,sp,-20
   18dd4:	dfc00415 	stw	ra,16(sp)
   18dd8:	df000315 	stw	fp,12(sp)
   18ddc:	df000304 	addi	fp,sp,12
   18de0:	e13ffe15 	stw	r4,-8(fp)
   18de4:	e17fff15 	stw	r5,-4(fp)
    unsigned int sector_index = (cluster_index / 256) + fat_partition_offset_in_512_byte_sectors;
   18de8:	e0bffe17 	ldw	r2,-8(fp)
   18dec:	1004d23a 	srli	r2,r2,8
   18df0:	d0e81817 	ldw	r3,-24480(gp)
   18df4:	10c5883a 	add	r2,r2,r3
   18df8:	e0bffd15 	stw	r2,-12(fp)
    
    sector_index  = sector_index + boot_sector_data.first_fat_sector_offset;
   18dfc:	008000b4 	movhi	r2,2
   18e00:	109fdf04 	addi	r2,r2,32636
   18e04:	10801117 	ldw	r2,68(r2)
   18e08:	e0fffd17 	ldw	r3,-12(fp)
   18e0c:	1885883a 	add	r2,r3,r2
   18e10:	e0bffd15 	stw	r2,-12(fp)
     
    if (sector_index != current_sector_index)
   18e14:	d0a81c17 	ldw	r2,-24464(gp)
   18e18:	e0fffd17 	ldw	r3,-12(fp)
   18e1c:	18800726 	beq	r3,r2,18e3c <get_cluster_flag+0x6c>
    {
        if (Read_Sector_Data(sector_index, 0) == false)
   18e20:	e0bffd17 	ldw	r2,-12(fp)
   18e24:	1009883a 	mov	r4,r2
   18e28:	000b883a 	mov	r5,zero
   18e2c:	0018cf80 	call	18cf8 <Read_Sector_Data>
   18e30:	1000021e 	bne	r2,zero,18e3c <get_cluster_flag+0x6c>
        {
            return false;
   18e34:	0005883a 	mov	r2,zero
   18e38:	00000d06 	br	18e70 <get_cluster_flag+0xa0>
        }
    }
    *flag = (unsigned short int) IORD_16DIRECT(device_pointer->base, 2*(cluster_index % 256));
   18e3c:	e0bffe17 	ldw	r2,-8(fp)
   18e40:	10803fcc 	andi	r2,r2,255
   18e44:	1085883a 	add	r2,r2,r2
   18e48:	1007883a 	mov	r3,r2
   18e4c:	d0a81a17 	ldw	r2,-24472(gp)
   18e50:	10800a17 	ldw	r2,40(r2)
   18e54:	1885883a 	add	r2,r3,r2
   18e58:	1080002b 	ldhuio	r2,0(r2)
   18e5c:	10bfffcc 	andi	r2,r2,65535
   18e60:	1007883a 	mov	r3,r2
   18e64:	e0bfff17 	ldw	r2,-4(fp)
   18e68:	10c0000d 	sth	r3,0(r2)
    return true;
   18e6c:	00800044 	movi	r2,1
}
   18e70:	e037883a 	mov	sp,fp
   18e74:	dfc00117 	ldw	ra,4(sp)
   18e78:	df000017 	ldw	fp,0(sp)
   18e7c:	dec00204 	addi	sp,sp,8
   18e80:	f800283a 	ret

00018e84 <mark_cluster>:


bool mark_cluster(unsigned int cluster_index, short int flag, bool first_fat)
// Place a marker on the specified cluster in a given FAT.
{
   18e84:	defffa04 	addi	sp,sp,-24
   18e88:	dfc00515 	stw	ra,20(sp)
   18e8c:	df000415 	stw	fp,16(sp)
   18e90:	df000404 	addi	fp,sp,16
   18e94:	e13ffd15 	stw	r4,-12(fp)
   18e98:	2805883a 	mov	r2,r5
   18e9c:	e1bfff15 	stw	r6,-4(fp)
   18ea0:	e0bffe0d 	sth	r2,-8(fp)
    unsigned int sector_index = (cluster_index / 256) +  fat_partition_offset_in_512_byte_sectors;
   18ea4:	e0bffd17 	ldw	r2,-12(fp)
   18ea8:	1004d23a 	srli	r2,r2,8
   18eac:	d0e81817 	ldw	r3,-24480(gp)
   18eb0:	10c5883a 	add	r2,r2,r3
   18eb4:	e0bffc15 	stw	r2,-16(fp)
    
    if (first_fat)
   18eb8:	e0bfff17 	ldw	r2,-4(fp)
   18ebc:	10000726 	beq	r2,zero,18edc <mark_cluster+0x58>
    {
        sector_index  = sector_index + boot_sector_data.first_fat_sector_offset;
   18ec0:	008000b4 	movhi	r2,2
   18ec4:	109fdf04 	addi	r2,r2,32636
   18ec8:	10801117 	ldw	r2,68(r2)
   18ecc:	e0fffc17 	ldw	r3,-16(fp)
   18ed0:	1885883a 	add	r2,r3,r2
   18ed4:	e0bffc15 	stw	r2,-16(fp)
   18ed8:	00000606 	br	18ef4 <mark_cluster+0x70>
    }
    else
    {
        sector_index  = sector_index + boot_sector_data.second_fat_sector_offset;
   18edc:	008000b4 	movhi	r2,2
   18ee0:	109fdf04 	addi	r2,r2,32636
   18ee4:	10801217 	ldw	r2,72(r2)
   18ee8:	e0fffc17 	ldw	r3,-16(fp)
   18eec:	1885883a 	add	r2,r3,r2
   18ef0:	e0bffc15 	stw	r2,-16(fp)
    }
     
    if (sector_index != current_sector_index)
   18ef4:	d0a81c17 	ldw	r2,-24464(gp)
   18ef8:	e0fffc17 	ldw	r3,-16(fp)
   18efc:	18800726 	beq	r3,r2,18f1c <mark_cluster+0x98>
    {
        if (Read_Sector_Data(sector_index, 0) == false)
   18f00:	e0bffc17 	ldw	r2,-16(fp)
   18f04:	1009883a 	mov	r4,r2
   18f08:	000b883a 	mov	r5,zero
   18f0c:	0018cf80 	call	18cf8 <Read_Sector_Data>
   18f10:	1000021e 	bne	r2,zero,18f1c <mark_cluster+0x98>
        {
            return false;
   18f14:	0005883a 	mov	r2,zero
   18f18:	00000d06 	br	18f50 <mark_cluster+0xcc>
        }
    }
    IOWR_16DIRECT(device_pointer->base, 2*(cluster_index % 256), flag);
   18f1c:	e0bffd17 	ldw	r2,-12(fp)
   18f20:	10803fcc 	andi	r2,r2,255
   18f24:	1085883a 	add	r2,r2,r2
   18f28:	1007883a 	mov	r3,r2
   18f2c:	d0a81a17 	ldw	r2,-24472(gp)
   18f30:	10800a17 	ldw	r2,40(r2)
   18f34:	1885883a 	add	r2,r3,r2
   18f38:	1007883a 	mov	r3,r2
   18f3c:	e0bffe0f 	ldh	r2,-8(fp)
   18f40:	1880002d 	sthio	r2,0(r3)
    current_sector_modified = true;
   18f44:	00800044 	movi	r2,1
   18f48:	d0a81b15 	stw	r2,-24468(gp)
    return true;
   18f4c:	00800044 	movi	r2,1
}
   18f50:	e037883a 	mov	sp,fp
   18f54:	dfc00117 	ldw	ra,4(sp)
   18f58:	df000017 	ldw	fp,0(sp)
   18f5c:	dec00204 	addi	sp,sp,8
   18f60:	f800283a 	ret

00018f64 <Check_for_Master_Boot_Record>:

bool Check_for_Master_Boot_Record(void)
// This function reads the first 512 bytes on the SD Card. This data should
// contain the Master Boot Record. If it does, then print
// relevant information and return true. Otherwise, return false. 
{
   18f64:	defff704 	addi	sp,sp,-36
   18f68:	dfc00815 	stw	ra,32(sp)
   18f6c:	df000715 	stw	fp,28(sp)
   18f70:	df000704 	addi	fp,sp,28
	bool result = false;
   18f74:	e03ff915 	stw	zero,-28(fp)
	int index;
	int end, offset, partition_size;

	/* Load the first 512 bytes of data from SD card. */
	if (Read_Sector_Data(0, 0))
   18f78:	0009883a 	mov	r4,zero
   18f7c:	000b883a 	mov	r5,zero
   18f80:	0018cf80 	call	18cf8 <Read_Sector_Data>
   18f84:	10005c26 	beq	r2,zero,190f8 <Check_for_Master_Boot_Record+0x194>
	{
		end =  (short int) IORD_16DIRECT(device_pointer->base,0x1fe);
   18f88:	d0a81a17 	ldw	r2,-24472(gp)
   18f8c:	10800a17 	ldw	r2,40(r2)
   18f90:	10807f84 	addi	r2,r2,510
   18f94:	1080002b 	ldhuio	r2,0(r2)
   18f98:	10bfffcc 	andi	r2,r2,65535
   18f9c:	10bfffcc 	andi	r2,r2,65535
   18fa0:	10a0001c 	xori	r2,r2,32768
   18fa4:	10a00004 	addi	r2,r2,-32768
   18fa8:	e0bffb15 	stw	r2,-20(fp)

		// Check if the end of the sector contains an end string 0xaa55.
		if ((end & 0x0000ffff) == 0x0000aa55)
   18fac:	e0bffb17 	ldw	r2,-20(fp)
   18fb0:	10ffffcc 	andi	r3,r2,65535
   18fb4:	00aa9554 	movui	r2,43605
   18fb8:	18804f1e 	bne	r3,r2,190f8 <Check_for_Master_Boot_Record+0x194>
		{
			// Check four partition entries and see if any are valid
			for (index = 0; index < 4; index++)
   18fbc:	e03ffa15 	stw	zero,-24(fp)
   18fc0:	00004a06 	br	190ec <Check_for_Master_Boot_Record+0x188>
			{
				int partition_data_offset = (index * 16) + 0x01be;
   18fc4:	e0bffa17 	ldw	r2,-24(fp)
   18fc8:	1004913a 	slli	r2,r2,4
   18fcc:	10806f84 	addi	r2,r2,446
   18fd0:	e0bffc15 	stw	r2,-16(fp)
				char type;
		        
				// Read Partition type
				type = (unsigned char) IORD_8DIRECT(device_pointer->base,partition_data_offset + 0x04);
   18fd4:	d0a81a17 	ldw	r2,-24472(gp)
   18fd8:	10c00a17 	ldw	r3,40(r2)
   18fdc:	e0bffc17 	ldw	r2,-16(fp)
   18fe0:	1885883a 	add	r2,r3,r2
   18fe4:	10800104 	addi	r2,r2,4
   18fe8:	10800023 	ldbuio	r2,0(r2)
   18fec:	10803fcc 	andi	r2,r2,255
   18ff0:	e0bffd05 	stb	r2,-12(fp)

				// Check if this is an FAT parition
				if ((type == 1) || (type == 4) || (type == 6) || (type == 14))
   18ff4:	e0bffd07 	ldb	r2,-12(fp)
   18ff8:	10800060 	cmpeqi	r2,r2,1
   18ffc:	1000091e 	bne	r2,zero,19024 <Check_for_Master_Boot_Record+0xc0>
   19000:	e0bffd07 	ldb	r2,-12(fp)
   19004:	10800120 	cmpeqi	r2,r2,4
   19008:	1000061e 	bne	r2,zero,19024 <Check_for_Master_Boot_Record+0xc0>
   1900c:	e0bffd07 	ldb	r2,-12(fp)
   19010:	108001a0 	cmpeqi	r2,r2,6
   19014:	1000031e 	bne	r2,zero,19024 <Check_for_Master_Boot_Record+0xc0>
   19018:	e0bffd07 	ldb	r2,-12(fp)
   1901c:	10800398 	cmpnei	r2,r2,14
   19020:	10002f1e 	bne	r2,zero,190e0 <Check_for_Master_Boot_Record+0x17c>
				{
					// Get partition offset and size.
					offset = (((unsigned short int) IORD_16DIRECT(device_pointer->base,partition_data_offset + 0x0A)) << 16) | ((unsigned short int) IORD_16DIRECT(device_pointer->base,partition_data_offset + 0x08));
   19024:	d0a81a17 	ldw	r2,-24472(gp)
   19028:	10c00a17 	ldw	r3,40(r2)
   1902c:	e0bffc17 	ldw	r2,-16(fp)
   19030:	1885883a 	add	r2,r3,r2
   19034:	10800284 	addi	r2,r2,10
   19038:	1080002b 	ldhuio	r2,0(r2)
   1903c:	10bfffcc 	andi	r2,r2,65535
   19040:	10bfffcc 	andi	r2,r2,65535
   19044:	1006943a 	slli	r3,r2,16
   19048:	d0a81a17 	ldw	r2,-24472(gp)
   1904c:	11000a17 	ldw	r4,40(r2)
   19050:	e0bffc17 	ldw	r2,-16(fp)
   19054:	2085883a 	add	r2,r4,r2
   19058:	10800204 	addi	r2,r2,8
   1905c:	1080002b 	ldhuio	r2,0(r2)
   19060:	10bfffcc 	andi	r2,r2,65535
   19064:	10bfffcc 	andi	r2,r2,65535
   19068:	1884b03a 	or	r2,r3,r2
   1906c:	e0bffe15 	stw	r2,-8(fp)
					partition_size = (((unsigned short int) IORD_16DIRECT(device_pointer->base,partition_data_offset + 0x0E)) << 16) | ((unsigned short int) IORD_16DIRECT(device_pointer->base,partition_data_offset + 0x0C));
   19070:	d0a81a17 	ldw	r2,-24472(gp)
   19074:	10c00a17 	ldw	r3,40(r2)
   19078:	e0bffc17 	ldw	r2,-16(fp)
   1907c:	1885883a 	add	r2,r3,r2
   19080:	10800384 	addi	r2,r2,14
   19084:	1080002b 	ldhuio	r2,0(r2)
   19088:	10bfffcc 	andi	r2,r2,65535
   1908c:	10bfffcc 	andi	r2,r2,65535
   19090:	1006943a 	slli	r3,r2,16
   19094:	d0a81a17 	ldw	r2,-24472(gp)
   19098:	11000a17 	ldw	r4,40(r2)
   1909c:	e0bffc17 	ldw	r2,-16(fp)
   190a0:	2085883a 	add	r2,r4,r2
   190a4:	10800304 	addi	r2,r2,12
   190a8:	1080002b 	ldhuio	r2,0(r2)
   190ac:	10bfffcc 	andi	r2,r2,65535
   190b0:	10bfffcc 	andi	r2,r2,65535
   190b4:	1884b03a 	or	r2,r3,r2
   190b8:	e0bfff15 	stw	r2,-4(fp)
		            
					// Check if the partition is valid
					if (partition_size > 0)
   190bc:	e0bfff17 	ldw	r2,-4(fp)
   190c0:	0080070e 	bge	zero,r2,190e0 <Check_for_Master_Boot_Record+0x17c>
					{
						result = true;
   190c4:	00800044 	movi	r2,1
   190c8:	e0bff915 	stw	r2,-28(fp)
						fat_partition_size_in_512_byte_sectors = partition_size;
   190cc:	e0bfff17 	ldw	r2,-4(fp)
   190d0:	d0a81915 	stw	r2,-24476(gp)
						fat_partition_offset_in_512_byte_sectors = offset;
   190d4:	e0bffe17 	ldw	r2,-8(fp)
   190d8:	d0a81815 	stw	r2,-24480(gp)
						break;
   190dc:	00000606 	br	190f8 <Check_for_Master_Boot_Record+0x194>

		// Check if the end of the sector contains an end string 0xaa55.
		if ((end & 0x0000ffff) == 0x0000aa55)
		{
			// Check four partition entries and see if any are valid
			for (index = 0; index < 4; index++)
   190e0:	e0bffa17 	ldw	r2,-24(fp)
   190e4:	10800044 	addi	r2,r2,1
   190e8:	e0bffa15 	stw	r2,-24(fp)
   190ec:	e0bffa17 	ldw	r2,-24(fp)
   190f0:	10800110 	cmplti	r2,r2,4
   190f4:	103fb31e 	bne	r2,zero,18fc4 <__alt_mem_Flash_flash_data+0xf4018fc4>
				}
			}
		}
	}

	return result;
   190f8:	e0bff917 	ldw	r2,-28(fp)
}
   190fc:	e037883a 	mov	sp,fp
   19100:	dfc00117 	ldw	ra,4(sp)
   19104:	df000017 	ldw	fp,0(sp)
   19108:	dec00204 	addi	sp,sp,8
   1910c:	f800283a 	ret

00019110 <Read_File_Record_At_Offset>:


bool Read_File_Record_At_Offset(int offset, t_file_record *record, unsigned int cluster_index, unsigned int sector_in_cluster)
// This function reads a file record
{
   19110:	defff804 	addi	sp,sp,-32
   19114:	dfc00715 	stw	ra,28(sp)
   19118:	df000615 	stw	fp,24(sp)
   1911c:	df000604 	addi	fp,sp,24
   19120:	e13ffc15 	stw	r4,-16(fp)
   19124:	e17ffd15 	stw	r5,-12(fp)
   19128:	e1bffe15 	stw	r6,-8(fp)
   1912c:	e1ffff15 	stw	r7,-4(fp)
	bool result = false;
   19130:	e03ffa15 	stw	zero,-24(fp)
	if (((offset & 0x01f) == 0) && (alt_up_sd_card_is_Present()) && (is_sd_card_formated_as_FAT16))
   19134:	e0bffc17 	ldw	r2,-16(fp)
   19138:	108007cc 	andi	r2,r2,31
   1913c:	10008d1e 	bne	r2,zero,19374 <Read_File_Record_At_Offset+0x264>
   19140:	001b90c0 	call	1b90c <alt_up_sd_card_is_Present>
   19144:	10008b26 	beq	r2,zero,19374 <Read_File_Record_At_Offset+0x264>
   19148:	d0a81117 	ldw	r2,-24508(gp)
   1914c:	10008926 	beq	r2,zero,19374 <Read_File_Record_At_Offset+0x264>
	{
		int counter;

		for (counter = 0; counter < 8; counter++)
   19150:	e03ffb15 	stw	zero,-20(fp)
   19154:	00001106 	br	1919c <Read_File_Record_At_Offset+0x8c>
		{
			record->name[counter] = (char) IORD_8DIRECT(device_pointer->base, offset+counter);
   19158:	e0fffc17 	ldw	r3,-16(fp)
   1915c:	e0bffb17 	ldw	r2,-20(fp)
   19160:	1885883a 	add	r2,r3,r2
   19164:	1007883a 	mov	r3,r2
   19168:	d0a81a17 	ldw	r2,-24472(gp)
   1916c:	10800a17 	ldw	r2,40(r2)
   19170:	1885883a 	add	r2,r3,r2
   19174:	10800023 	ldbuio	r2,0(r2)
   19178:	10803fcc 	andi	r2,r2,255
   1917c:	1009883a 	mov	r4,r2
   19180:	e0fffd17 	ldw	r3,-12(fp)
   19184:	e0bffb17 	ldw	r2,-20(fp)
   19188:	1885883a 	add	r2,r3,r2
   1918c:	11000005 	stb	r4,0(r2)
	bool result = false;
	if (((offset & 0x01f) == 0) && (alt_up_sd_card_is_Present()) && (is_sd_card_formated_as_FAT16))
	{
		int counter;

		for (counter = 0; counter < 8; counter++)
   19190:	e0bffb17 	ldw	r2,-20(fp)
   19194:	10800044 	addi	r2,r2,1
   19198:	e0bffb15 	stw	r2,-20(fp)
   1919c:	e0bffb17 	ldw	r2,-20(fp)
   191a0:	10800210 	cmplti	r2,r2,8
   191a4:	103fec1e 	bne	r2,zero,19158 <__alt_mem_Flash_flash_data+0xf4019158>
		{
			record->name[counter] = (char) IORD_8DIRECT(device_pointer->base, offset+counter);
		}        
		for (counter = 0; counter < 3; counter++)
   191a8:	e03ffb15 	stw	zero,-20(fp)
   191ac:	00001306 	br	191fc <Read_File_Record_At_Offset+0xec>
		{
			record->extension[counter] = (char) IORD_8DIRECT(device_pointer->base, offset+counter+8);
   191b0:	e0fffc17 	ldw	r3,-16(fp)
   191b4:	e0bffb17 	ldw	r2,-20(fp)
   191b8:	1885883a 	add	r2,r3,r2
   191bc:	1007883a 	mov	r3,r2
   191c0:	d0a81a17 	ldw	r2,-24472(gp)
   191c4:	10800a17 	ldw	r2,40(r2)
   191c8:	1885883a 	add	r2,r3,r2
   191cc:	10800204 	addi	r2,r2,8
   191d0:	10800023 	ldbuio	r2,0(r2)
   191d4:	10803fcc 	andi	r2,r2,255
   191d8:	1009883a 	mov	r4,r2
   191dc:	e0fffd17 	ldw	r3,-12(fp)
   191e0:	e0bffb17 	ldw	r2,-20(fp)
   191e4:	1885883a 	add	r2,r3,r2
   191e8:	10800204 	addi	r2,r2,8
   191ec:	11000005 	stb	r4,0(r2)

		for (counter = 0; counter < 8; counter++)
		{
			record->name[counter] = (char) IORD_8DIRECT(device_pointer->base, offset+counter);
		}        
		for (counter = 0; counter < 3; counter++)
   191f0:	e0bffb17 	ldw	r2,-20(fp)
   191f4:	10800044 	addi	r2,r2,1
   191f8:	e0bffb15 	stw	r2,-20(fp)
   191fc:	e0bffb17 	ldw	r2,-20(fp)
   19200:	108000d0 	cmplti	r2,r2,3
   19204:	103fea1e 	bne	r2,zero,191b0 <__alt_mem_Flash_flash_data+0xf40191b0>
		{
			record->extension[counter] = (char) IORD_8DIRECT(device_pointer->base, offset+counter+8);
		}        
		record->attributes          =   (char) IORD_8DIRECT(device_pointer->base, offset+11);
   19208:	d0a81a17 	ldw	r2,-24472(gp)
   1920c:	10c00a17 	ldw	r3,40(r2)
   19210:	e0bffc17 	ldw	r2,-16(fp)
   19214:	1885883a 	add	r2,r3,r2
   19218:	108002c4 	addi	r2,r2,11
   1921c:	10800023 	ldbuio	r2,0(r2)
   19220:	10803fcc 	andi	r2,r2,255
   19224:	1007883a 	mov	r3,r2
   19228:	e0bffd17 	ldw	r2,-12(fp)
   1922c:	10c002c5 	stb	r3,11(r2)
		/* Ignore reserved bytes at locations 12 and 13. */
		record->create_time         =   (unsigned short int) IORD_16DIRECT(device_pointer->base, offset+14);
   19230:	d0a81a17 	ldw	r2,-24472(gp)
   19234:	10c00a17 	ldw	r3,40(r2)
   19238:	e0bffc17 	ldw	r2,-16(fp)
   1923c:	1885883a 	add	r2,r3,r2
   19240:	10800384 	addi	r2,r2,14
   19244:	1080002b 	ldhuio	r2,0(r2)
   19248:	10bfffcc 	andi	r2,r2,65535
   1924c:	1007883a 	mov	r3,r2
   19250:	e0bffd17 	ldw	r2,-12(fp)
   19254:	10c0030d 	sth	r3,12(r2)
		record->create_date         =   (unsigned short int) IORD_16DIRECT(device_pointer->base, offset+16);
   19258:	d0a81a17 	ldw	r2,-24472(gp)
   1925c:	10c00a17 	ldw	r3,40(r2)
   19260:	e0bffc17 	ldw	r2,-16(fp)
   19264:	1885883a 	add	r2,r3,r2
   19268:	10800404 	addi	r2,r2,16
   1926c:	1080002b 	ldhuio	r2,0(r2)
   19270:	10bfffcc 	andi	r2,r2,65535
   19274:	1007883a 	mov	r3,r2
   19278:	e0bffd17 	ldw	r2,-12(fp)
   1927c:	10c0038d 	sth	r3,14(r2)
		record->last_access_date    =   (unsigned short int) IORD_16DIRECT(device_pointer->base, offset+18);
   19280:	d0a81a17 	ldw	r2,-24472(gp)
   19284:	10c00a17 	ldw	r3,40(r2)
   19288:	e0bffc17 	ldw	r2,-16(fp)
   1928c:	1885883a 	add	r2,r3,r2
   19290:	10800484 	addi	r2,r2,18
   19294:	1080002b 	ldhuio	r2,0(r2)
   19298:	10bfffcc 	andi	r2,r2,65535
   1929c:	1007883a 	mov	r3,r2
   192a0:	e0bffd17 	ldw	r2,-12(fp)
   192a4:	10c0040d 	sth	r3,16(r2)
		/* Ignore reserved bytes at locations 20 and 21. */
		record->last_modified_time  =	(unsigned short int) IORD_16DIRECT(device_pointer->base, offset+22);
   192a8:	d0a81a17 	ldw	r2,-24472(gp)
   192ac:	10c00a17 	ldw	r3,40(r2)
   192b0:	e0bffc17 	ldw	r2,-16(fp)
   192b4:	1885883a 	add	r2,r3,r2
   192b8:	10800584 	addi	r2,r2,22
   192bc:	1080002b 	ldhuio	r2,0(r2)
   192c0:	10bfffcc 	andi	r2,r2,65535
   192c4:	1007883a 	mov	r3,r2
   192c8:	e0bffd17 	ldw	r2,-12(fp)
   192cc:	10c0048d 	sth	r3,18(r2)
		record->last_modified_date  =	(unsigned short int) IORD_16DIRECT(device_pointer->base, offset+24);
   192d0:	d0a81a17 	ldw	r2,-24472(gp)
   192d4:	10c00a17 	ldw	r3,40(r2)
   192d8:	e0bffc17 	ldw	r2,-16(fp)
   192dc:	1885883a 	add	r2,r3,r2
   192e0:	10800604 	addi	r2,r2,24
   192e4:	1080002b 	ldhuio	r2,0(r2)
   192e8:	10bfffcc 	andi	r2,r2,65535
   192ec:	1007883a 	mov	r3,r2
   192f0:	e0bffd17 	ldw	r2,-12(fp)
   192f4:	10c0050d 	sth	r3,20(r2)
		record->start_cluster_index =	(unsigned short int) IORD_16DIRECT(device_pointer->base, offset+26);
   192f8:	d0a81a17 	ldw	r2,-24472(gp)
   192fc:	10c00a17 	ldw	r3,40(r2)
   19300:	e0bffc17 	ldw	r2,-16(fp)
   19304:	1885883a 	add	r2,r3,r2
   19308:	10800684 	addi	r2,r2,26
   1930c:	1080002b 	ldhuio	r2,0(r2)
   19310:	10bfffcc 	andi	r2,r2,65535
   19314:	1007883a 	mov	r3,r2
   19318:	e0bffd17 	ldw	r2,-12(fp)
   1931c:	10c0058d 	sth	r3,22(r2)
		record->file_size_in_bytes  =	(unsigned int) IORD_32DIRECT(device_pointer->base, offset+28);
   19320:	d0a81a17 	ldw	r2,-24472(gp)
   19324:	10c00a17 	ldw	r3,40(r2)
   19328:	e0bffc17 	ldw	r2,-16(fp)
   1932c:	1885883a 	add	r2,r3,r2
   19330:	10800704 	addi	r2,r2,28
   19334:	10800037 	ldwio	r2,0(r2)
   19338:	1007883a 	mov	r3,r2
   1933c:	e0bffd17 	ldw	r2,-12(fp)
   19340:	10c00615 	stw	r3,24(r2)
		record->file_record_cluster = cluster_index;
   19344:	e0bffd17 	ldw	r2,-12(fp)
   19348:	e0fffe17 	ldw	r3,-8(fp)
   1934c:	10c00a15 	stw	r3,40(r2)
		record->file_record_sector_in_cluster = sector_in_cluster;
   19350:	e0bffd17 	ldw	r2,-12(fp)
   19354:	e0ffff17 	ldw	r3,-4(fp)
   19358:	10c00b15 	stw	r3,44(r2)
		record->file_record_offset = offset;
   1935c:	e0bffc17 	ldw	r2,-16(fp)
   19360:	1007883a 	mov	r3,r2
   19364:	e0bffd17 	ldw	r2,-12(fp)
   19368:	10c00c0d 	sth	r3,48(r2)
		result = true;
   1936c:	00800044 	movi	r2,1
   19370:	e0bffa15 	stw	r2,-24(fp)
	}
	return result;
   19374:	e0bffa17 	ldw	r2,-24(fp)
}
   19378:	e037883a 	mov	sp,fp
   1937c:	dfc00117 	ldw	ra,4(sp)
   19380:	df000017 	ldw	fp,0(sp)
   19384:	dec00204 	addi	sp,sp,8
   19388:	f800283a 	ret

0001938c <Write_File_Record_At_Offset>:


bool Write_File_Record_At_Offset(int offset, t_file_record *record)
// This function writes a file record at a given offset. The offset is given in bytes.
{
   1938c:	defff904 	addi	sp,sp,-28
   19390:	dfc00615 	stw	ra,24(sp)
   19394:	df000515 	stw	fp,20(sp)
   19398:	df000504 	addi	fp,sp,20
   1939c:	e13ffe15 	stw	r4,-8(fp)
   193a0:	e17fff15 	stw	r5,-4(fp)
    bool result = false;
   193a4:	e03ffb15 	stw	zero,-20(fp)
    if (((offset & 0x01f) == 0) && (alt_up_sd_card_is_Present()) && (is_sd_card_formated_as_FAT16))
   193a8:	e0bffe17 	ldw	r2,-8(fp)
   193ac:	108007cc 	andi	r2,r2,31
   193b0:	1000931e 	bne	r2,zero,19600 <Write_File_Record_At_Offset+0x274>
   193b4:	001b90c0 	call	1b90c <alt_up_sd_card_is_Present>
   193b8:	10009126 	beq	r2,zero,19600 <Write_File_Record_At_Offset+0x274>
   193bc:	d0a81117 	ldw	r2,-24508(gp)
   193c0:	10008f26 	beq	r2,zero,19600 <Write_File_Record_At_Offset+0x274>
    {
        int counter;

        for (counter = 0; counter < 8; counter=counter+2)
   193c4:	e03ffc15 	stw	zero,-16(fp)
   193c8:	00001f06 	br	19448 <Write_File_Record_At_Offset+0xbc>
        {
            short int two_chars = (short int) record->name[counter+1];
   193cc:	e0bffc17 	ldw	r2,-16(fp)
   193d0:	10800044 	addi	r2,r2,1
   193d4:	e0ffff17 	ldw	r3,-4(fp)
   193d8:	1885883a 	add	r2,r3,r2
   193dc:	10800003 	ldbu	r2,0(r2)
   193e0:	10803fcc 	andi	r2,r2,255
   193e4:	e0bffd0d 	sth	r2,-12(fp)
            two_chars = two_chars << 8;
   193e8:	e0bffd0f 	ldh	r2,-12(fp)
   193ec:	1004923a 	slli	r2,r2,8
   193f0:	e0bffd0d 	sth	r2,-12(fp)
            two_chars = two_chars | record->name[counter];
   193f4:	e0ffff17 	ldw	r3,-4(fp)
   193f8:	e0bffc17 	ldw	r2,-16(fp)
   193fc:	1885883a 	add	r2,r3,r2
   19400:	10800003 	ldbu	r2,0(r2)
   19404:	10c03fcc 	andi	r3,r2,255
   19408:	e0bffd0b 	ldhu	r2,-12(fp)
   1940c:	1884b03a 	or	r2,r3,r2
   19410:	e0bffd0d 	sth	r2,-12(fp)
            IOWR_16DIRECT(device_pointer->base, offset+counter, two_chars);
   19414:	e0fffe17 	ldw	r3,-8(fp)
   19418:	e0bffc17 	ldw	r2,-16(fp)
   1941c:	1885883a 	add	r2,r3,r2
   19420:	1007883a 	mov	r3,r2
   19424:	d0a81a17 	ldw	r2,-24472(gp)
   19428:	10800a17 	ldw	r2,40(r2)
   1942c:	1885883a 	add	r2,r3,r2
   19430:	1007883a 	mov	r3,r2
   19434:	e0bffd0f 	ldh	r2,-12(fp)
   19438:	1880002d 	sthio	r2,0(r3)
    bool result = false;
    if (((offset & 0x01f) == 0) && (alt_up_sd_card_is_Present()) && (is_sd_card_formated_as_FAT16))
    {
        int counter;

        for (counter = 0; counter < 8; counter=counter+2)
   1943c:	e0bffc17 	ldw	r2,-16(fp)
   19440:	10800084 	addi	r2,r2,2
   19444:	e0bffc15 	stw	r2,-16(fp)
   19448:	e0bffc17 	ldw	r2,-16(fp)
   1944c:	10800210 	cmplti	r2,r2,8
   19450:	103fde1e 	bne	r2,zero,193cc <__alt_mem_Flash_flash_data+0xf40193cc>
            short int two_chars = (short int) record->name[counter+1];
            two_chars = two_chars << 8;
            two_chars = two_chars | record->name[counter];
            IOWR_16DIRECT(device_pointer->base, offset+counter, two_chars);
        }        
        for (counter = 0; counter < 3; counter++)
   19454:	e03ffc15 	stw	zero,-16(fp)
   19458:	00001306 	br	194a8 <Write_File_Record_At_Offset+0x11c>
        {
            IOWR_8DIRECT(device_pointer->base, offset+counter+8, record->extension[counter]);
   1945c:	e0fffe17 	ldw	r3,-8(fp)
   19460:	e0bffc17 	ldw	r2,-16(fp)
   19464:	1885883a 	add	r2,r3,r2
   19468:	1007883a 	mov	r3,r2
   1946c:	d0a81a17 	ldw	r2,-24472(gp)
   19470:	10800a17 	ldw	r2,40(r2)
   19474:	1885883a 	add	r2,r3,r2
   19478:	10800204 	addi	r2,r2,8
   1947c:	1009883a 	mov	r4,r2
   19480:	e0ffff17 	ldw	r3,-4(fp)
   19484:	e0bffc17 	ldw	r2,-16(fp)
   19488:	1885883a 	add	r2,r3,r2
   1948c:	10800204 	addi	r2,r2,8
   19490:	10800003 	ldbu	r2,0(r2)
   19494:	10803fcc 	andi	r2,r2,255
   19498:	20800025 	stbio	r2,0(r4)
            short int two_chars = (short int) record->name[counter+1];
            two_chars = two_chars << 8;
            two_chars = two_chars | record->name[counter];
            IOWR_16DIRECT(device_pointer->base, offset+counter, two_chars);
        }        
        for (counter = 0; counter < 3; counter++)
   1949c:	e0bffc17 	ldw	r2,-16(fp)
   194a0:	10800044 	addi	r2,r2,1
   194a4:	e0bffc15 	stw	r2,-16(fp)
   194a8:	e0bffc17 	ldw	r2,-16(fp)
   194ac:	108000d0 	cmplti	r2,r2,3
   194b0:	103fea1e 	bne	r2,zero,1945c <__alt_mem_Flash_flash_data+0xf401945c>
        {
            IOWR_8DIRECT(device_pointer->base, offset+counter+8, record->extension[counter]);
        }        
        IOWR_8DIRECT(device_pointer->base, offset+11, record->attributes);
   194b4:	d0a81a17 	ldw	r2,-24472(gp)
   194b8:	10c00a17 	ldw	r3,40(r2)
   194bc:	e0bffe17 	ldw	r2,-8(fp)
   194c0:	1885883a 	add	r2,r3,r2
   194c4:	108002c4 	addi	r2,r2,11
   194c8:	1007883a 	mov	r3,r2
   194cc:	e0bfff17 	ldw	r2,-4(fp)
   194d0:	108002c3 	ldbu	r2,11(r2)
   194d4:	10803fcc 	andi	r2,r2,255
   194d8:	18800025 	stbio	r2,0(r3)
        /* Ignore reserved bytes at locations 12 and 13. */
        IOWR_16DIRECT(device_pointer->base, offset+14, record->create_time);
   194dc:	d0a81a17 	ldw	r2,-24472(gp)
   194e0:	10c00a17 	ldw	r3,40(r2)
   194e4:	e0bffe17 	ldw	r2,-8(fp)
   194e8:	1885883a 	add	r2,r3,r2
   194ec:	10800384 	addi	r2,r2,14
   194f0:	1007883a 	mov	r3,r2
   194f4:	e0bfff17 	ldw	r2,-4(fp)
   194f8:	1080030b 	ldhu	r2,12(r2)
   194fc:	10bfffcc 	andi	r2,r2,65535
   19500:	1880002d 	sthio	r2,0(r3)
        IOWR_16DIRECT(device_pointer->base, offset+16, record->create_date);
   19504:	d0a81a17 	ldw	r2,-24472(gp)
   19508:	10c00a17 	ldw	r3,40(r2)
   1950c:	e0bffe17 	ldw	r2,-8(fp)
   19510:	1885883a 	add	r2,r3,r2
   19514:	10800404 	addi	r2,r2,16
   19518:	1007883a 	mov	r3,r2
   1951c:	e0bfff17 	ldw	r2,-4(fp)
   19520:	1080038b 	ldhu	r2,14(r2)
   19524:	10bfffcc 	andi	r2,r2,65535
   19528:	1880002d 	sthio	r2,0(r3)
        IOWR_16DIRECT(device_pointer->base, offset+18, record->last_access_date);
   1952c:	d0a81a17 	ldw	r2,-24472(gp)
   19530:	10c00a17 	ldw	r3,40(r2)
   19534:	e0bffe17 	ldw	r2,-8(fp)
   19538:	1885883a 	add	r2,r3,r2
   1953c:	10800484 	addi	r2,r2,18
   19540:	1007883a 	mov	r3,r2
   19544:	e0bfff17 	ldw	r2,-4(fp)
   19548:	1080040b 	ldhu	r2,16(r2)
   1954c:	10bfffcc 	andi	r2,r2,65535
   19550:	1880002d 	sthio	r2,0(r3)
        /* Ignore reserved bytes at locations 20 and 21. */
        IOWR_16DIRECT(device_pointer->base, offset+22, record->last_modified_time);
   19554:	d0a81a17 	ldw	r2,-24472(gp)
   19558:	10c00a17 	ldw	r3,40(r2)
   1955c:	e0bffe17 	ldw	r2,-8(fp)
   19560:	1885883a 	add	r2,r3,r2
   19564:	10800584 	addi	r2,r2,22
   19568:	1007883a 	mov	r3,r2
   1956c:	e0bfff17 	ldw	r2,-4(fp)
   19570:	1080048b 	ldhu	r2,18(r2)
   19574:	10bfffcc 	andi	r2,r2,65535
   19578:	1880002d 	sthio	r2,0(r3)
        IOWR_16DIRECT(device_pointer->base, offset+24, record->last_modified_date);
   1957c:	d0a81a17 	ldw	r2,-24472(gp)
   19580:	10c00a17 	ldw	r3,40(r2)
   19584:	e0bffe17 	ldw	r2,-8(fp)
   19588:	1885883a 	add	r2,r3,r2
   1958c:	10800604 	addi	r2,r2,24
   19590:	1007883a 	mov	r3,r2
   19594:	e0bfff17 	ldw	r2,-4(fp)
   19598:	1080050b 	ldhu	r2,20(r2)
   1959c:	10bfffcc 	andi	r2,r2,65535
   195a0:	1880002d 	sthio	r2,0(r3)
        IOWR_16DIRECT(device_pointer->base, offset+26, record->start_cluster_index);
   195a4:	d0a81a17 	ldw	r2,-24472(gp)
   195a8:	10c00a17 	ldw	r3,40(r2)
   195ac:	e0bffe17 	ldw	r2,-8(fp)
   195b0:	1885883a 	add	r2,r3,r2
   195b4:	10800684 	addi	r2,r2,26
   195b8:	1007883a 	mov	r3,r2
   195bc:	e0bfff17 	ldw	r2,-4(fp)
   195c0:	1080058b 	ldhu	r2,22(r2)
   195c4:	10bfffcc 	andi	r2,r2,65535
   195c8:	1880002d 	sthio	r2,0(r3)
        IOWR_32DIRECT(device_pointer->base, offset+28, record->file_size_in_bytes);
   195cc:	d0a81a17 	ldw	r2,-24472(gp)
   195d0:	10c00a17 	ldw	r3,40(r2)
   195d4:	e0bffe17 	ldw	r2,-8(fp)
   195d8:	1885883a 	add	r2,r3,r2
   195dc:	10800704 	addi	r2,r2,28
   195e0:	1007883a 	mov	r3,r2
   195e4:	e0bfff17 	ldw	r2,-4(fp)
   195e8:	10800617 	ldw	r2,24(r2)
   195ec:	18800035 	stwio	r2,0(r3)
        current_sector_modified = true;                  
   195f0:	00800044 	movi	r2,1
   195f4:	d0a81b15 	stw	r2,-24468(gp)
        result = true;
   195f8:	00800044 	movi	r2,1
   195fc:	e0bffb15 	stw	r2,-20(fp)
    }
    return result;
   19600:	e0bffb17 	ldw	r2,-20(fp)
}
   19604:	e037883a 	mov	sp,fp
   19608:	dfc00117 	ldw	ra,4(sp)
   1960c:	df000017 	ldw	fp,0(sp)
   19610:	dec00204 	addi	sp,sp,8
   19614:	f800283a 	ret

00019618 <Check_for_DOS_FAT>:
// This function reads the boot sector for the FAT file system on the SD Card.
// The offset_address should point to the sector on the card where the boot sector is located.
// The sector number is specified either in the master Boot Record, or is 0 by default for a purely FAT
// based file system. If the specified sector contains a FAT boot sector, then this function prints the
// relevant information and returns 1. Otherwise, it returns 0. 
{
   19618:	defff904 	addi	sp,sp,-28
   1961c:	dfc00615 	stw	ra,24(sp)
   19620:	df000515 	stw	fp,20(sp)
   19624:	df000504 	addi	fp,sp,20
   19628:	e13fff15 	stw	r4,-4(fp)
	bool result = false;
   1962c:	e03ffb15 	stw	zero,-20(fp)
	int counter = 0;
   19630:	e03ffc15 	stw	zero,-16(fp)
	short int end;

	result = Read_Sector_Data(0, FAT_partition_start_sector);
   19634:	0009883a 	mov	r4,zero
   19638:	e17fff17 	ldw	r5,-4(fp)
   1963c:	0018cf80 	call	18cf8 <Read_Sector_Data>
   19640:	e0bffb15 	stw	r2,-20(fp)
	end =  (short int) IORD_16DIRECT(device_pointer->base, 0x1fe);
   19644:	d0a81a17 	ldw	r2,-24472(gp)
   19648:	10800a17 	ldw	r2,40(r2)
   1964c:	10807f84 	addi	r2,r2,510
   19650:	1080002b 	ldhuio	r2,0(r2)
   19654:	10bfffcc 	andi	r2,r2,65535
   19658:	e0bffe0d 	sth	r2,-8(fp)
	if (((end & 0x0000ffff) == 0x0000aa55) && (result))
   1965c:	e0bffe0f 	ldh	r2,-8(fp)
   19660:	10ffffcc 	andi	r3,r2,65535
   19664:	00aa9554 	movui	r2,43605
   19668:	1881861e 	bne	r3,r2,19c84 <Check_for_DOS_FAT+0x66c>
   1966c:	e0bffb17 	ldw	r2,-20(fp)
   19670:	10018426 	beq	r2,zero,19c84 <Check_for_DOS_FAT+0x66c>
	{
		int num_clusters = 0;
   19674:	e03ffd15 	stw	zero,-12(fp)

		boot_sector_data.jump_instruction[0] = (char) IORD_8DIRECT(device_pointer->base, 0);
   19678:	d0a81a17 	ldw	r2,-24472(gp)
   1967c:	10800a17 	ldw	r2,40(r2)
   19680:	10800023 	ldbuio	r2,0(r2)
   19684:	10803fcc 	andi	r2,r2,255
   19688:	1007883a 	mov	r3,r2
   1968c:	008000b4 	movhi	r2,2
   19690:	109fdf04 	addi	r2,r2,32636
   19694:	10c00005 	stb	r3,0(r2)
		boot_sector_data.jump_instruction[1] = (char) IORD_8DIRECT(device_pointer->base, 1);
   19698:	d0a81a17 	ldw	r2,-24472(gp)
   1969c:	10800a17 	ldw	r2,40(r2)
   196a0:	10800044 	addi	r2,r2,1
   196a4:	10800023 	ldbuio	r2,0(r2)
   196a8:	10803fcc 	andi	r2,r2,255
   196ac:	1007883a 	mov	r3,r2
   196b0:	008000b4 	movhi	r2,2
   196b4:	109fdf04 	addi	r2,r2,32636
   196b8:	10c00045 	stb	r3,1(r2)
		boot_sector_data.jump_instruction[2] = (char) IORD_8DIRECT(device_pointer->base, 2);
   196bc:	d0a81a17 	ldw	r2,-24472(gp)
   196c0:	10800a17 	ldw	r2,40(r2)
   196c4:	10800084 	addi	r2,r2,2
   196c8:	10800023 	ldbuio	r2,0(r2)
   196cc:	10803fcc 	andi	r2,r2,255
   196d0:	1007883a 	mov	r3,r2
   196d4:	008000b4 	movhi	r2,2
   196d8:	109fdf04 	addi	r2,r2,32636
   196dc:	10c00085 	stb	r3,2(r2)
		for (counter = 0; counter < 8; counter++)
   196e0:	e03ffc15 	stw	zero,-16(fp)
   196e4:	00001006 	br	19728 <Check_for_DOS_FAT+0x110>
		{
			boot_sector_data.OEM_name[counter] = (char) IORD_8DIRECT(device_pointer->base, 3+counter);
   196e8:	d0a81a17 	ldw	r2,-24472(gp)
   196ec:	10c00a17 	ldw	r3,40(r2)
   196f0:	e0bffc17 	ldw	r2,-16(fp)
   196f4:	1885883a 	add	r2,r3,r2
   196f8:	108000c4 	addi	r2,r2,3
   196fc:	10800023 	ldbuio	r2,0(r2)
   19700:	10803fcc 	andi	r2,r2,255
   19704:	1009883a 	mov	r4,r2
   19708:	008000b4 	movhi	r2,2
   1970c:	109fdf04 	addi	r2,r2,32636
   19710:	e0fffc17 	ldw	r3,-16(fp)
   19714:	10c5883a 	add	r2,r2,r3
   19718:	110000c5 	stb	r4,3(r2)
		int num_clusters = 0;

		boot_sector_data.jump_instruction[0] = (char) IORD_8DIRECT(device_pointer->base, 0);
		boot_sector_data.jump_instruction[1] = (char) IORD_8DIRECT(device_pointer->base, 1);
		boot_sector_data.jump_instruction[2] = (char) IORD_8DIRECT(device_pointer->base, 2);
		for (counter = 0; counter < 8; counter++)
   1971c:	e0bffc17 	ldw	r2,-16(fp)
   19720:	10800044 	addi	r2,r2,1
   19724:	e0bffc15 	stw	r2,-16(fp)
   19728:	e0bffc17 	ldw	r2,-16(fp)
   1972c:	10800210 	cmplti	r2,r2,8
   19730:	103fed1e 	bne	r2,zero,196e8 <__alt_mem_Flash_flash_data+0xf40196e8>
		{
			boot_sector_data.OEM_name[counter] = (char) IORD_8DIRECT(device_pointer->base, 3+counter);
		}
		boot_sector_data.sector_size_in_bytes = (((unsigned char) IORD_8DIRECT(device_pointer->base, 12)) << 8 ) | ((char) IORD_8DIRECT(device_pointer->base, 11));
   19734:	d0a81a17 	ldw	r2,-24472(gp)
   19738:	10800a17 	ldw	r2,40(r2)
   1973c:	10800304 	addi	r2,r2,12
   19740:	10800023 	ldbuio	r2,0(r2)
   19744:	10803fcc 	andi	r2,r2,255
   19748:	10803fcc 	andi	r2,r2,255
   1974c:	1004923a 	slli	r2,r2,8
   19750:	1007883a 	mov	r3,r2
   19754:	d0a81a17 	ldw	r2,-24472(gp)
   19758:	10800a17 	ldw	r2,40(r2)
   1975c:	108002c4 	addi	r2,r2,11
   19760:	10800023 	ldbuio	r2,0(r2)
   19764:	10803fcc 	andi	r2,r2,255
   19768:	10803fcc 	andi	r2,r2,255
   1976c:	1080201c 	xori	r2,r2,128
   19770:	10bfe004 	addi	r2,r2,-128
   19774:	1884b03a 	or	r2,r3,r2
   19778:	1007883a 	mov	r3,r2
   1977c:	008000b4 	movhi	r2,2
   19780:	109fdf04 	addi	r2,r2,32636
   19784:	10c0030d 	sth	r3,12(r2)
		boot_sector_data.sectors_per_cluster = ((unsigned char) IORD_8DIRECT(device_pointer->base, 13));
   19788:	d0a81a17 	ldw	r2,-24472(gp)
   1978c:	10800a17 	ldw	r2,40(r2)
   19790:	10800344 	addi	r2,r2,13
   19794:	10800023 	ldbuio	r2,0(r2)
   19798:	10803fcc 	andi	r2,r2,255
   1979c:	1007883a 	mov	r3,r2
   197a0:	008000b4 	movhi	r2,2
   197a4:	109fdf04 	addi	r2,r2,32636
   197a8:	10c00385 	stb	r3,14(r2)
		boot_sector_data.reserved_sectors = ((unsigned short int) IORD_16DIRECT(device_pointer->base, 14));
   197ac:	d0a81a17 	ldw	r2,-24472(gp)
   197b0:	10800a17 	ldw	r2,40(r2)
   197b4:	10800384 	addi	r2,r2,14
   197b8:	1080002b 	ldhuio	r2,0(r2)
   197bc:	10bfffcc 	andi	r2,r2,65535
   197c0:	1007883a 	mov	r3,r2
   197c4:	008000b4 	movhi	r2,2
   197c8:	109fdf04 	addi	r2,r2,32636
   197cc:	10c0040d 	sth	r3,16(r2)
		boot_sector_data.number_of_FATs = ((unsigned char) IORD_8DIRECT(device_pointer->base, 16));
   197d0:	d0a81a17 	ldw	r2,-24472(gp)
   197d4:	10800a17 	ldw	r2,40(r2)
   197d8:	10800404 	addi	r2,r2,16
   197dc:	10800023 	ldbuio	r2,0(r2)
   197e0:	10803fcc 	andi	r2,r2,255
   197e4:	1007883a 	mov	r3,r2
   197e8:	008000b4 	movhi	r2,2
   197ec:	109fdf04 	addi	r2,r2,32636
   197f0:	10c00485 	stb	r3,18(r2)
		boot_sector_data.max_number_of_dir_entires = (((unsigned short int)(((unsigned char) IORD_8DIRECT(device_pointer->base, 18)))) << 8 ) | ((unsigned char) IORD_8DIRECT(device_pointer->base, 17));
   197f4:	d0a81a17 	ldw	r2,-24472(gp)
   197f8:	10800a17 	ldw	r2,40(r2)
   197fc:	10800484 	addi	r2,r2,18
   19800:	10800023 	ldbuio	r2,0(r2)
   19804:	10803fcc 	andi	r2,r2,255
   19808:	10803fcc 	andi	r2,r2,255
   1980c:	1004923a 	slli	r2,r2,8
   19810:	1007883a 	mov	r3,r2
   19814:	d0a81a17 	ldw	r2,-24472(gp)
   19818:	10800a17 	ldw	r2,40(r2)
   1981c:	10800444 	addi	r2,r2,17
   19820:	10800023 	ldbuio	r2,0(r2)
   19824:	10803fcc 	andi	r2,r2,255
   19828:	10803fcc 	andi	r2,r2,255
   1982c:	1884b03a 	or	r2,r3,r2
   19830:	1007883a 	mov	r3,r2
   19834:	008000b4 	movhi	r2,2
   19838:	109fdf04 	addi	r2,r2,32636
   1983c:	10c0050d 	sth	r3,20(r2)
		boot_sector_data.number_of_sectors_in_partition = (((unsigned short int)(((unsigned char) IORD_8DIRECT(device_pointer->base, 20)))) << 8 ) | ((unsigned char) IORD_8DIRECT(device_pointer->base, 19));
   19840:	d0a81a17 	ldw	r2,-24472(gp)
   19844:	10800a17 	ldw	r2,40(r2)
   19848:	10800504 	addi	r2,r2,20
   1984c:	10800023 	ldbuio	r2,0(r2)
   19850:	10803fcc 	andi	r2,r2,255
   19854:	10803fcc 	andi	r2,r2,255
   19858:	1004923a 	slli	r2,r2,8
   1985c:	1007883a 	mov	r3,r2
   19860:	d0a81a17 	ldw	r2,-24472(gp)
   19864:	10800a17 	ldw	r2,40(r2)
   19868:	108004c4 	addi	r2,r2,19
   1986c:	10800023 	ldbuio	r2,0(r2)
   19870:	10803fcc 	andi	r2,r2,255
   19874:	10803fcc 	andi	r2,r2,255
   19878:	1884b03a 	or	r2,r3,r2
   1987c:	1007883a 	mov	r3,r2
   19880:	008000b4 	movhi	r2,2
   19884:	109fdf04 	addi	r2,r2,32636
   19888:	10c0058d 	sth	r3,22(r2)
		boot_sector_data.media_descriptor = ((unsigned char) IORD_8DIRECT(device_pointer->base, 21));
   1988c:	d0a81a17 	ldw	r2,-24472(gp)
   19890:	10800a17 	ldw	r2,40(r2)
   19894:	10800544 	addi	r2,r2,21
   19898:	10800023 	ldbuio	r2,0(r2)
   1989c:	10803fcc 	andi	r2,r2,255
   198a0:	1007883a 	mov	r3,r2
   198a4:	008000b4 	movhi	r2,2
   198a8:	109fdf04 	addi	r2,r2,32636
   198ac:	10c00605 	stb	r3,24(r2)
		boot_sector_data.number_of_sectors_per_table = ((unsigned short int) IORD_16DIRECT(device_pointer->base, 22));
   198b0:	d0a81a17 	ldw	r2,-24472(gp)
   198b4:	10800a17 	ldw	r2,40(r2)
   198b8:	10800584 	addi	r2,r2,22
   198bc:	1080002b 	ldhuio	r2,0(r2)
   198c0:	10bfffcc 	andi	r2,r2,65535
   198c4:	1007883a 	mov	r3,r2
   198c8:	008000b4 	movhi	r2,2
   198cc:	109fdf04 	addi	r2,r2,32636
   198d0:	10c0068d 	sth	r3,26(r2)
		boot_sector_data.number_of_sectors_per_track = ((unsigned short int) IORD_16DIRECT(device_pointer->base, 24));
   198d4:	d0a81a17 	ldw	r2,-24472(gp)
   198d8:	10800a17 	ldw	r2,40(r2)
   198dc:	10800604 	addi	r2,r2,24
   198e0:	1080002b 	ldhuio	r2,0(r2)
   198e4:	10bfffcc 	andi	r2,r2,65535
   198e8:	1007883a 	mov	r3,r2
   198ec:	008000b4 	movhi	r2,2
   198f0:	109fdf04 	addi	r2,r2,32636
   198f4:	10c0070d 	sth	r3,28(r2)
		boot_sector_data.number_of_heads = ((unsigned short int) IORD_16DIRECT(device_pointer->base, 26));
   198f8:	d0a81a17 	ldw	r2,-24472(gp)
   198fc:	10800a17 	ldw	r2,40(r2)
   19900:	10800684 	addi	r2,r2,26
   19904:	1080002b 	ldhuio	r2,0(r2)
   19908:	10bfffcc 	andi	r2,r2,65535
   1990c:	1007883a 	mov	r3,r2
   19910:	008000b4 	movhi	r2,2
   19914:	109fdf04 	addi	r2,r2,32636
   19918:	10c0078d 	sth	r3,30(r2)
		boot_sector_data.number_of_hidden_sectors = ((unsigned int) IORD_32DIRECT(device_pointer->base, 28));
   1991c:	d0a81a17 	ldw	r2,-24472(gp)
   19920:	10800a17 	ldw	r2,40(r2)
   19924:	10800704 	addi	r2,r2,28
   19928:	10800037 	ldwio	r2,0(r2)
   1992c:	1007883a 	mov	r3,r2
   19930:	008000b4 	movhi	r2,2
   19934:	109fdf04 	addi	r2,r2,32636
   19938:	10c00815 	stw	r3,32(r2)
		boot_sector_data.total_sector_count_if_above_32MB = ((unsigned int) IORD_32DIRECT(device_pointer->base, 32));
   1993c:	d0a81a17 	ldw	r2,-24472(gp)
   19940:	10800a17 	ldw	r2,40(r2)
   19944:	10800804 	addi	r2,r2,32
   19948:	10800037 	ldwio	r2,0(r2)
   1994c:	1007883a 	mov	r3,r2
   19950:	008000b4 	movhi	r2,2
   19954:	109fdf04 	addi	r2,r2,32636
   19958:	10c00915 	stw	r3,36(r2)
		boot_sector_data.drive_number = ((unsigned char) IORD_8DIRECT(device_pointer->base, 36));
   1995c:	d0a81a17 	ldw	r2,-24472(gp)
   19960:	10800a17 	ldw	r2,40(r2)
   19964:	10800904 	addi	r2,r2,36
   19968:	10800023 	ldbuio	r2,0(r2)
   1996c:	10803fcc 	andi	r2,r2,255
   19970:	1007883a 	mov	r3,r2
   19974:	008000b4 	movhi	r2,2
   19978:	109fdf04 	addi	r2,r2,32636
   1997c:	10c00a05 	stb	r3,40(r2)
		boot_sector_data.current_head = ((unsigned char) IORD_8DIRECT(device_pointer->base, 37));
   19980:	d0a81a17 	ldw	r2,-24472(gp)
   19984:	10800a17 	ldw	r2,40(r2)
   19988:	10800944 	addi	r2,r2,37
   1998c:	10800023 	ldbuio	r2,0(r2)
   19990:	10803fcc 	andi	r2,r2,255
   19994:	1007883a 	mov	r3,r2
   19998:	008000b4 	movhi	r2,2
   1999c:	109fdf04 	addi	r2,r2,32636
   199a0:	10c00a45 	stb	r3,41(r2)
		boot_sector_data.boot_signature = ((unsigned char) IORD_8DIRECT(device_pointer->base, 38));
   199a4:	d0a81a17 	ldw	r2,-24472(gp)
   199a8:	10800a17 	ldw	r2,40(r2)
   199ac:	10800984 	addi	r2,r2,38
   199b0:	10800023 	ldbuio	r2,0(r2)
   199b4:	10803fcc 	andi	r2,r2,255
   199b8:	1007883a 	mov	r3,r2
   199bc:	008000b4 	movhi	r2,2
   199c0:	109fdf04 	addi	r2,r2,32636
   199c4:	10c00a85 	stb	r3,42(r2)
		boot_sector_data.first_fat_sector_offset = boot_sector_data.reserved_sectors;
   199c8:	008000b4 	movhi	r2,2
   199cc:	109fdf04 	addi	r2,r2,32636
   199d0:	1080040b 	ldhu	r2,16(r2)
   199d4:	10ffffcc 	andi	r3,r2,65535
   199d8:	008000b4 	movhi	r2,2
   199dc:	109fdf04 	addi	r2,r2,32636
   199e0:	10c01115 	stw	r3,68(r2)
		boot_sector_data.second_fat_sector_offset = boot_sector_data.first_fat_sector_offset + boot_sector_data.number_of_sectors_per_table;
   199e4:	008000b4 	movhi	r2,2
   199e8:	109fdf04 	addi	r2,r2,32636
   199ec:	10c01117 	ldw	r3,68(r2)
   199f0:	008000b4 	movhi	r2,2
   199f4:	109fdf04 	addi	r2,r2,32636
   199f8:	1080068b 	ldhu	r2,26(r2)
   199fc:	10bfffcc 	andi	r2,r2,65535
   19a00:	1887883a 	add	r3,r3,r2
   19a04:	008000b4 	movhi	r2,2
   19a08:	109fdf04 	addi	r2,r2,32636
   19a0c:	10c01215 	stw	r3,72(r2)
		boot_sector_data.root_directory_sector_offset = boot_sector_data.second_fat_sector_offset + boot_sector_data.number_of_sectors_per_table; 
   19a10:	008000b4 	movhi	r2,2
   19a14:	109fdf04 	addi	r2,r2,32636
   19a18:	10c01217 	ldw	r3,72(r2)
   19a1c:	008000b4 	movhi	r2,2
   19a20:	109fdf04 	addi	r2,r2,32636
   19a24:	1080068b 	ldhu	r2,26(r2)
   19a28:	10bfffcc 	andi	r2,r2,65535
   19a2c:	1887883a 	add	r3,r3,r2
   19a30:	008000b4 	movhi	r2,2
   19a34:	109fdf04 	addi	r2,r2,32636
   19a38:	10c01315 	stw	r3,76(r2)
		boot_sector_data.data_sector_offset = boot_sector_data.root_directory_sector_offset + (32*boot_sector_data.max_number_of_dir_entires / boot_sector_data.sector_size_in_bytes);    
   19a3c:	008000b4 	movhi	r2,2
   19a40:	109fdf04 	addi	r2,r2,32636
   19a44:	10c01317 	ldw	r3,76(r2)
   19a48:	008000b4 	movhi	r2,2
   19a4c:	109fdf04 	addi	r2,r2,32636
   19a50:	1080050b 	ldhu	r2,20(r2)
   19a54:	10bfffcc 	andi	r2,r2,65535
   19a58:	1008917a 	slli	r4,r2,5
   19a5c:	008000b4 	movhi	r2,2
   19a60:	109fdf04 	addi	r2,r2,32636
   19a64:	1080030b 	ldhu	r2,12(r2)
   19a68:	10bfffcc 	andi	r2,r2,65535
   19a6c:	2085283a 	div	r2,r4,r2
   19a70:	1887883a 	add	r3,r3,r2
   19a74:	008000b4 	movhi	r2,2
   19a78:	109fdf04 	addi	r2,r2,32636
   19a7c:	10c01415 	stw	r3,80(r2)
	    
		if (boot_sector_data.number_of_sectors_in_partition > 0)
   19a80:	008000b4 	movhi	r2,2
   19a84:	109fdf04 	addi	r2,r2,32636
   19a88:	1080058b 	ldhu	r2,22(r2)
   19a8c:	10bfffcc 	andi	r2,r2,65535
   19a90:	10000b26 	beq	r2,zero,19ac0 <Check_for_DOS_FAT+0x4a8>
		{
			num_clusters = (boot_sector_data.number_of_sectors_in_partition / boot_sector_data.sectors_per_cluster);
   19a94:	008000b4 	movhi	r2,2
   19a98:	109fdf04 	addi	r2,r2,32636
   19a9c:	1080058b 	ldhu	r2,22(r2)
   19aa0:	10ffffcc 	andi	r3,r2,65535
   19aa4:	008000b4 	movhi	r2,2
   19aa8:	109fdf04 	addi	r2,r2,32636
   19aac:	10800383 	ldbu	r2,14(r2)
   19ab0:	10803fcc 	andi	r2,r2,255
   19ab4:	1885283a 	div	r2,r3,r2
   19ab8:	e0bffd15 	stw	r2,-12(fp)
   19abc:	00000906 	br	19ae4 <Check_for_DOS_FAT+0x4cc>
		}
		else
		{
			num_clusters = (boot_sector_data.total_sector_count_if_above_32MB / boot_sector_data.sectors_per_cluster);
   19ac0:	008000b4 	movhi	r2,2
   19ac4:	109fdf04 	addi	r2,r2,32636
   19ac8:	10c00917 	ldw	r3,36(r2)
   19acc:	008000b4 	movhi	r2,2
   19ad0:	109fdf04 	addi	r2,r2,32636
   19ad4:	10800383 	ldbu	r2,14(r2)
   19ad8:	10803fcc 	andi	r2,r2,255
   19adc:	1885203a 	divu	r2,r3,r2
   19ae0:	e0bffd15 	stw	r2,-12(fp)
		}
		if (num_clusters < 4087)
   19ae4:	e0bffd17 	ldw	r2,-12(fp)
   19ae8:	1083fdc8 	cmpgei	r2,r2,4087
   19aec:	1000051e 	bne	r2,zero,19b04 <Check_for_DOS_FAT+0x4ec>
		{
			boot_sector_data.bits_for_cluster_index = 12;
   19af0:	008000b4 	movhi	r2,2
   19af4:	109fdf04 	addi	r2,r2,32636
   19af8:	00c00304 	movi	r3,12
   19afc:	10c01085 	stb	r3,66(r2)
   19b00:	00000c06 	br	19b34 <Check_for_DOS_FAT+0x51c>
		}
		else if (num_clusters <= 65517)
   19b04:	e0bffd17 	ldw	r2,-12(fp)
   19b08:	00fffb54 	movui	r3,65517
   19b0c:	18800516 	blt	r3,r2,19b24 <Check_for_DOS_FAT+0x50c>
		{
			boot_sector_data.bits_for_cluster_index = 16;
   19b10:	008000b4 	movhi	r2,2
   19b14:	109fdf04 	addi	r2,r2,32636
   19b18:	00c00404 	movi	r3,16
   19b1c:	10c01085 	stb	r3,66(r2)
   19b20:	00000406 	br	19b34 <Check_for_DOS_FAT+0x51c>
		}
		else
		{
			boot_sector_data.bits_for_cluster_index = 32;
   19b24:	008000b4 	movhi	r2,2
   19b28:	109fdf04 	addi	r2,r2,32636
   19b2c:	00c00804 	movi	r3,32
   19b30:	10c01085 	stb	r3,66(r2)
		}
	    
		for (counter = 0; counter < 4; counter++)
   19b34:	e03ffc15 	stw	zero,-16(fp)
   19b38:	00001106 	br	19b80 <Check_for_DOS_FAT+0x568>
		{
			boot_sector_data.volume_id[counter] = ((char) IORD_8DIRECT(device_pointer->base, 39+counter));
   19b3c:	d0a81a17 	ldw	r2,-24472(gp)
   19b40:	10c00a17 	ldw	r3,40(r2)
   19b44:	e0bffc17 	ldw	r2,-16(fp)
   19b48:	1885883a 	add	r2,r3,r2
   19b4c:	108009c4 	addi	r2,r2,39
   19b50:	10800023 	ldbuio	r2,0(r2)
   19b54:	10803fcc 	andi	r2,r2,255
   19b58:	1009883a 	mov	r4,r2
   19b5c:	008000b4 	movhi	r2,2
   19b60:	109fdf04 	addi	r2,r2,32636
   19b64:	e0fffc17 	ldw	r3,-16(fp)
   19b68:	10c5883a 	add	r2,r2,r3
   19b6c:	10800a04 	addi	r2,r2,40
   19b70:	110000c5 	stb	r4,3(r2)
		else
		{
			boot_sector_data.bits_for_cluster_index = 32;
		}
	    
		for (counter = 0; counter < 4; counter++)
   19b74:	e0bffc17 	ldw	r2,-16(fp)
   19b78:	10800044 	addi	r2,r2,1
   19b7c:	e0bffc15 	stw	r2,-16(fp)
   19b80:	e0bffc17 	ldw	r2,-16(fp)
   19b84:	10800110 	cmplti	r2,r2,4
   19b88:	103fec1e 	bne	r2,zero,19b3c <__alt_mem_Flash_flash_data+0xf4019b3c>
		{
			boot_sector_data.volume_id[counter] = ((char) IORD_8DIRECT(device_pointer->base, 39+counter));
		}    
		for (counter = 0; counter < 11; counter++)
   19b8c:	e03ffc15 	stw	zero,-16(fp)
   19b90:	00001106 	br	19bd8 <Check_for_DOS_FAT+0x5c0>
		{
			boot_sector_data.volume_label[counter] = ((char) IORD_8DIRECT(device_pointer->base, 43+counter));
   19b94:	d0a81a17 	ldw	r2,-24472(gp)
   19b98:	10c00a17 	ldw	r3,40(r2)
   19b9c:	e0bffc17 	ldw	r2,-16(fp)
   19ba0:	1885883a 	add	r2,r3,r2
   19ba4:	10800ac4 	addi	r2,r2,43
   19ba8:	10800023 	ldbuio	r2,0(r2)
   19bac:	10803fcc 	andi	r2,r2,255
   19bb0:	1009883a 	mov	r4,r2
   19bb4:	008000b4 	movhi	r2,2
   19bb8:	109fdf04 	addi	r2,r2,32636
   19bbc:	e0fffc17 	ldw	r3,-16(fp)
   19bc0:	10c5883a 	add	r2,r2,r3
   19bc4:	10800b04 	addi	r2,r2,44
   19bc8:	110000c5 	stb	r4,3(r2)
	    
		for (counter = 0; counter < 4; counter++)
		{
			boot_sector_data.volume_id[counter] = ((char) IORD_8DIRECT(device_pointer->base, 39+counter));
		}    
		for (counter = 0; counter < 11; counter++)
   19bcc:	e0bffc17 	ldw	r2,-16(fp)
   19bd0:	10800044 	addi	r2,r2,1
   19bd4:	e0bffc15 	stw	r2,-16(fp)
   19bd8:	e0bffc17 	ldw	r2,-16(fp)
   19bdc:	108002d0 	cmplti	r2,r2,11
   19be0:	103fec1e 	bne	r2,zero,19b94 <__alt_mem_Flash_flash_data+0xf4019b94>
		{
			boot_sector_data.volume_label[counter] = ((char) IORD_8DIRECT(device_pointer->base, 43+counter));
		}    
		for (counter = 0; counter < 8; counter++)
   19be4:	e03ffc15 	stw	zero,-16(fp)
   19be8:	00001106 	br	19c30 <Check_for_DOS_FAT+0x618>
		{
			boot_sector_data.file_system_type[counter] = ((char) IORD_8DIRECT(device_pointer->base, 54+counter));
   19bec:	d0a81a17 	ldw	r2,-24472(gp)
   19bf0:	10c00a17 	ldw	r3,40(r2)
   19bf4:	e0bffc17 	ldw	r2,-16(fp)
   19bf8:	1885883a 	add	r2,r3,r2
   19bfc:	10800d84 	addi	r2,r2,54
   19c00:	10800023 	ldbuio	r2,0(r2)
   19c04:	10803fcc 	andi	r2,r2,255
   19c08:	1009883a 	mov	r4,r2
   19c0c:	008000b4 	movhi	r2,2
   19c10:	109fdf04 	addi	r2,r2,32636
   19c14:	e0fffc17 	ldw	r3,-16(fp)
   19c18:	10c5883a 	add	r2,r2,r3
   19c1c:	10800e04 	addi	r2,r2,56
   19c20:	11000085 	stb	r4,2(r2)
		}    
		for (counter = 0; counter < 11; counter++)
		{
			boot_sector_data.volume_label[counter] = ((char) IORD_8DIRECT(device_pointer->base, 43+counter));
		}    
		for (counter = 0; counter < 8; counter++)
   19c24:	e0bffc17 	ldw	r2,-16(fp)
   19c28:	10800044 	addi	r2,r2,1
   19c2c:	e0bffc15 	stw	r2,-16(fp)
   19c30:	e0bffc17 	ldw	r2,-16(fp)
   19c34:	10800210 	cmplti	r2,r2,8
   19c38:	103fec1e 	bne	r2,zero,19bec <__alt_mem_Flash_flash_data+0xf4019bec>
		{
			boot_sector_data.file_system_type[counter] = ((char) IORD_8DIRECT(device_pointer->base, 54+counter));
		}    
		// Clear file records
		for (counter = 0; counter < MAX_FILES_OPENED; counter++)
   19c3c:	e03ffc15 	stw	zero,-16(fp)
   19c40:	00000a06 	br	19c6c <Check_for_DOS_FAT+0x654>
		{
			active_files[counter].in_use = false;
   19c44:	008000b4 	movhi	r2,2
   19c48:	109ff404 	addi	r2,r2,32720
   19c4c:	e0fffc17 	ldw	r3,-16(fp)
   19c50:	180691ba 	slli	r3,r3,6
   19c54:	18c00f04 	addi	r3,r3,60
   19c58:	10c5883a 	add	r2,r2,r3
   19c5c:	10000015 	stw	zero,0(r2)
		for (counter = 0; counter < 8; counter++)
		{
			boot_sector_data.file_system_type[counter] = ((char) IORD_8DIRECT(device_pointer->base, 54+counter));
		}    
		// Clear file records
		for (counter = 0; counter < MAX_FILES_OPENED; counter++)
   19c60:	e0bffc17 	ldw	r2,-16(fp)
   19c64:	10800044 	addi	r2,r2,1
   19c68:	e0bffc15 	stw	r2,-16(fp)
   19c6c:	e0bffc17 	ldw	r2,-16(fp)
   19c70:	10800510 	cmplti	r2,r2,20
   19c74:	103ff31e 	bne	r2,zero,19c44 <__alt_mem_Flash_flash_data+0xf4019c44>
		{
			active_files[counter].in_use = false;
		}
		result = true;
   19c78:	00800044 	movi	r2,1
   19c7c:	e0bffb15 	stw	r2,-20(fp)
	short int end;

	result = Read_Sector_Data(0, FAT_partition_start_sector);
	end =  (short int) IORD_16DIRECT(device_pointer->base, 0x1fe);
	if (((end & 0x0000ffff) == 0x0000aa55) && (result))
	{
   19c80:	00000106 	br	19c88 <Check_for_DOS_FAT+0x670>
		}
		result = true;
	}
    else
    {
        result = false;
   19c84:	e03ffb15 	stw	zero,-20(fp)
    }
	return result;
   19c88:	e0bffb17 	ldw	r2,-20(fp)
}
   19c8c:	e037883a 	mov	sp,fp
   19c90:	dfc00117 	ldw	ra,4(sp)
   19c94:	df000017 	ldw	fp,0(sp)
   19c98:	dec00204 	addi	sp,sp,8
   19c9c:	f800283a 	ret

00019ca0 <Look_for_FAT16>:


bool Look_for_FAT16(void)
// Read the SD card to determine if it contains a FAT16 partition.
{
   19ca0:	defffc04 	addi	sp,sp,-16
   19ca4:	dfc00315 	stw	ra,12(sp)
   19ca8:	df000215 	stw	fp,8(sp)
   19cac:	df000204 	addi	fp,sp,8
	bool result = false;
   19cb0:	e03ffe15 	stw	zero,-8(fp)

	if (alt_up_sd_card_is_Present())
   19cb4:	001b90c0 	call	1b90c <alt_up_sd_card_is_Present>
   19cb8:	10002e26 	beq	r2,zero,19d74 <Look_for_FAT16+0xd4>
	{
		short int csd_file_format = *CSD_register_w0;
   19cbc:	d0a81417 	ldw	r2,-24496(gp)
   19cc0:	1080000b 	ldhu	r2,0(r2)
   19cc4:	e0bfff0d 	sth	r2,-4(fp)
        
		fat_partition_offset_in_512_byte_sectors = 0;
   19cc8:	d0281815 	stw	zero,-24480(gp)
		fat_partition_size_in_512_byte_sectors = 0;              
   19ccc:	d0281915 	stw	zero,-24476(gp)

		if (((csd_file_format & 0x8000) == 0) && ((csd_file_format & 0x0c00) != 0x0c00))
   19cd0:	e0bfff0f 	ldh	r2,-4(fp)
   19cd4:	10002716 	blt	r2,zero,19d74 <Look_for_FAT16+0xd4>
   19cd8:	e0bfff0b 	ldhu	r2,-4(fp)
   19cdc:	10bfffcc 	andi	r2,r2,65535
   19ce0:	1083000c 	andi	r2,r2,3072
   19ce4:	10830020 	cmpeqi	r2,r2,3072
   19ce8:	1000221e 	bne	r2,zero,19d74 <Look_for_FAT16+0xd4>
		{
			if ((csd_file_format & 0x0c00) == 0x0400)
   19cec:	e0bfff0b 	ldhu	r2,-4(fp)
   19cf0:	10bfffcc 	andi	r2,r2,65535
   19cf4:	1083000c 	andi	r2,r2,3072
   19cf8:	10810018 	cmpnei	r2,r2,1024
   19cfc:	1000031e 	bne	r2,zero,19d0c <Look_for_FAT16+0x6c>
			{
				/* SD Card contains files stored in a DOS FAT (floppy like) file format, without a partition table */
				result = Check_for_DOS_FAT(0);
   19d00:	0009883a 	mov	r4,zero
   19d04:	00196180 	call	19618 <Check_for_DOS_FAT>
   19d08:	e0bffe15 	stw	r2,-8(fp)
			}
			if ((csd_file_format & 0x0c00) == 0x0000)
   19d0c:	e0bfff0b 	ldhu	r2,-4(fp)
   19d10:	10bfffcc 	andi	r2,r2,65535
   19d14:	1083000c 	andi	r2,r2,3072
   19d18:	1000061e 	bne	r2,zero,19d34 <Look_for_FAT16+0x94>
			{
				/* SD Card contains files stored in a Hard disk-like file format that contains a partition table */
				if (Check_for_Master_Boot_Record())
   19d1c:	0018f640 	call	18f64 <Check_for_Master_Boot_Record>
   19d20:	10000426 	beq	r2,zero,19d34 <Look_for_FAT16+0x94>
				{
					result = Check_for_DOS_FAT(fat_partition_offset_in_512_byte_sectors);
   19d24:	d0a81817 	ldw	r2,-24480(gp)
   19d28:	1009883a 	mov	r4,r2
   19d2c:	00196180 	call	19618 <Check_for_DOS_FAT>
   19d30:	e0bffe15 	stw	r2,-8(fp)
				}                        
			}
			if (result == true)
   19d34:	e0bffe17 	ldw	r2,-8(fp)
   19d38:	10800058 	cmpnei	r2,r2,1
   19d3c:	10000d1e 	bne	r2,zero,19d74 <Look_for_FAT16+0xd4>
			{
				// Accept only FAT16, not FAT12.
				if (boot_sector_data.bits_for_cluster_index != 16)
   19d40:	008000b4 	movhi	r2,2
   19d44:	109fdf04 	addi	r2,r2,32636
   19d48:	10801083 	ldbu	r2,66(r2)
   19d4c:	10803fcc 	andi	r2,r2,255
   19d50:	10800420 	cmpeqi	r2,r2,16
   19d54:	1000021e 	bne	r2,zero,19d60 <Look_for_FAT16+0xc0>
				{
					result = false;
   19d58:	e03ffe15 	stw	zero,-8(fp)
   19d5c:	00000506 	br	19d74 <Look_for_FAT16+0xd4>
				}
				else
				{
					fat_partition_size_in_512_byte_sectors = boot_sector_data.number_of_sectors_in_partition;
   19d60:	008000b4 	movhi	r2,2
   19d64:	109fdf04 	addi	r2,r2,32636
   19d68:	1080058b 	ldhu	r2,22(r2)
   19d6c:	10bfffcc 	andi	r2,r2,65535
   19d70:	d0a81915 	stw	r2,-24476(gp)
				}
			}
		}
	}
	return result;
   19d74:	e0bffe17 	ldw	r2,-8(fp)
}
   19d78:	e037883a 	mov	sp,fp
   19d7c:	dfc00117 	ldw	ra,4(sp)
   19d80:	df000017 	ldw	fp,0(sp)
   19d84:	dec00204 	addi	sp,sp,8
   19d88:	f800283a 	ret

00019d8c <filename_to_upper_case>:
 

void filename_to_upper_case(char *file_name)
// Change file name to upper case.
{
   19d8c:	defffb04 	addi	sp,sp,-20
   19d90:	dfc00415 	stw	ra,16(sp)
   19d94:	df000315 	stw	fp,12(sp)
   19d98:	df000304 	addi	fp,sp,12
   19d9c:	e13fff15 	stw	r4,-4(fp)
    int index;
    int length = strlen(file_name);
   19da0:	e13fff17 	ldw	r4,-4(fp)
   19da4:	00012240 	call	1224 <strlen>
   19da8:	e0bffe15 	stw	r2,-8(fp)
    
    for (index = 0; index < length; index++)
   19dac:	e03ffd15 	stw	zero,-12(fp)
   19db0:	00001e06 	br	19e2c <filename_to_upper_case+0xa0>
    {
        if ((file_name[index] >= 'a') && (file_name[index] <= 'z'))
   19db4:	e0bffd17 	ldw	r2,-12(fp)
   19db8:	e0ffff17 	ldw	r3,-4(fp)
   19dbc:	1885883a 	add	r2,r3,r2
   19dc0:	10800003 	ldbu	r2,0(r2)
   19dc4:	10803fcc 	andi	r2,r2,255
   19dc8:	1080201c 	xori	r2,r2,128
   19dcc:	10bfe004 	addi	r2,r2,-128
   19dd0:	10801850 	cmplti	r2,r2,97
   19dd4:	1000121e 	bne	r2,zero,19e20 <filename_to_upper_case+0x94>
   19dd8:	e0bffd17 	ldw	r2,-12(fp)
   19ddc:	e0ffff17 	ldw	r3,-4(fp)
   19de0:	1885883a 	add	r2,r3,r2
   19de4:	10800003 	ldbu	r2,0(r2)
   19de8:	10803fcc 	andi	r2,r2,255
   19dec:	1080201c 	xori	r2,r2,128
   19df0:	10bfe004 	addi	r2,r2,-128
   19df4:	10801ec8 	cmpgei	r2,r2,123
   19df8:	1000091e 	bne	r2,zero,19e20 <filename_to_upper_case+0x94>
        {
            file_name[index] = (file_name[index] - 'a') + 'A';
   19dfc:	e0bffd17 	ldw	r2,-12(fp)
   19e00:	e0ffff17 	ldw	r3,-4(fp)
   19e04:	1885883a 	add	r2,r3,r2
   19e08:	e0fffd17 	ldw	r3,-12(fp)
   19e0c:	e13fff17 	ldw	r4,-4(fp)
   19e10:	20c7883a 	add	r3,r4,r3
   19e14:	18c00003 	ldbu	r3,0(r3)
   19e18:	18fff804 	addi	r3,r3,-32
   19e1c:	10c00005 	stb	r3,0(r2)
// Change file name to upper case.
{
    int index;
    int length = strlen(file_name);
    
    for (index = 0; index < length; index++)
   19e20:	e0bffd17 	ldw	r2,-12(fp)
   19e24:	10800044 	addi	r2,r2,1
   19e28:	e0bffd15 	stw	r2,-12(fp)
   19e2c:	e0fffd17 	ldw	r3,-12(fp)
   19e30:	e0bffe17 	ldw	r2,-8(fp)
   19e34:	18bfdf16 	blt	r3,r2,19db4 <__alt_mem_Flash_flash_data+0xf4019db4>
        if ((file_name[index] >= 'a') && (file_name[index] <= 'z'))
        {
            file_name[index] = (file_name[index] - 'a') + 'A';
        }
    }
}
   19e38:	e037883a 	mov	sp,fp
   19e3c:	dfc00117 	ldw	ra,4(sp)
   19e40:	df000017 	ldw	fp,0(sp)
   19e44:	dec00204 	addi	sp,sp,8
   19e48:	f800283a 	ret

00019e4c <check_file_name_for_FAT16_compliance>:


bool check_file_name_for_FAT16_compliance(char *file_name)
// Check if the file complies with FAT16 naming convention.
{
   19e4c:	defff804 	addi	sp,sp,-32
   19e50:	dfc00715 	stw	ra,28(sp)
   19e54:	df000615 	stw	fp,24(sp)
   19e58:	df000604 	addi	fp,sp,24
   19e5c:	e13fff15 	stw	r4,-4(fp)
    int length = strlen(file_name);
   19e60:	e13fff17 	ldw	r4,-4(fp)
   19e64:	00012240 	call	1224 <strlen>
   19e68:	e0bffe15 	stw	r2,-8(fp)
    int index;
    int last_dir_break_position = -1;
   19e6c:	00bfffc4 	movi	r2,-1
   19e70:	e0bffb15 	stw	r2,-20(fp)
    int last_period = -1;
   19e74:	00bfffc4 	movi	r2,-1
   19e78:	e0bffc15 	stw	r2,-16(fp)
    bool result = true;
   19e7c:	00800044 	movi	r2,1
   19e80:	e0bffd15 	stw	r2,-12(fp)
    
    for(index = 0; index < length; index++)
   19e84:	e03ffa15 	stw	zero,-24(fp)
   19e88:	00006d06 	br	1a040 <check_file_name_for_FAT16_compliance+0x1f4>
    {
        if ((file_name[index] == ' ') ||
   19e8c:	e0bffa17 	ldw	r2,-24(fp)
   19e90:	e0ffff17 	ldw	r3,-4(fp)
   19e94:	1885883a 	add	r2,r3,r2
   19e98:	10800003 	ldbu	r2,0(r2)
   19e9c:	10803fcc 	andi	r2,r2,255
   19ea0:	1080201c 	xori	r2,r2,128
   19ea4:	10bfe004 	addi	r2,r2,-128
   19ea8:	10800820 	cmpeqi	r2,r2,32
   19eac:	10003e1e 	bne	r2,zero,19fa8 <check_file_name_for_FAT16_compliance+0x15c>
            ((last_dir_break_position == (index - 1)) && ((file_name[index] == '\\') || (file_name[index] == '/'))) ||
   19eb0:	e0bffa17 	ldw	r2,-24(fp)
   19eb4:	10ffffc4 	addi	r3,r2,-1
    int last_period = -1;
    bool result = true;
    
    for(index = 0; index < length; index++)
    {
        if ((file_name[index] == ' ') ||
   19eb8:	e0bffb17 	ldw	r2,-20(fp)
   19ebc:	1880121e 	bne	r3,r2,19f08 <check_file_name_for_FAT16_compliance+0xbc>
            ((last_dir_break_position == (index - 1)) && ((file_name[index] == '\\') || (file_name[index] == '/'))) ||
   19ec0:	e0bffa17 	ldw	r2,-24(fp)
   19ec4:	e0ffff17 	ldw	r3,-4(fp)
   19ec8:	1885883a 	add	r2,r3,r2
   19ecc:	10800003 	ldbu	r2,0(r2)
   19ed0:	10803fcc 	andi	r2,r2,255
   19ed4:	1080201c 	xori	r2,r2,128
   19ed8:	10bfe004 	addi	r2,r2,-128
   19edc:	10801720 	cmpeqi	r2,r2,92
   19ee0:	1000311e 	bne	r2,zero,19fa8 <check_file_name_for_FAT16_compliance+0x15c>
   19ee4:	e0bffa17 	ldw	r2,-24(fp)
   19ee8:	e0ffff17 	ldw	r3,-4(fp)
   19eec:	1885883a 	add	r2,r3,r2
   19ef0:	10800003 	ldbu	r2,0(r2)
   19ef4:	10803fcc 	andi	r2,r2,255
   19ef8:	1080201c 	xori	r2,r2,128
   19efc:	10bfe004 	addi	r2,r2,-128
   19f00:	10800be0 	cmpeqi	r2,r2,47
   19f04:	1000281e 	bne	r2,zero,19fa8 <check_file_name_for_FAT16_compliance+0x15c>
            ((index - last_period == 9) && (file_name[index] != '.')) ||
   19f08:	e0fffa17 	ldw	r3,-24(fp)
   19f0c:	e0bffc17 	ldw	r2,-16(fp)
   19f10:	1885c83a 	sub	r2,r3,r2
    bool result = true;
    
    for(index = 0; index < length; index++)
    {
        if ((file_name[index] == ' ') ||
            ((last_dir_break_position == (index - 1)) && ((file_name[index] == '\\') || (file_name[index] == '/'))) ||
   19f14:	10800258 	cmpnei	r2,r2,9
   19f18:	1000091e 	bne	r2,zero,19f40 <check_file_name_for_FAT16_compliance+0xf4>
            ((index - last_period == 9) && (file_name[index] != '.')) ||
   19f1c:	e0bffa17 	ldw	r2,-24(fp)
   19f20:	e0ffff17 	ldw	r3,-4(fp)
   19f24:	1885883a 	add	r2,r3,r2
   19f28:	10800003 	ldbu	r2,0(r2)
   19f2c:	10803fcc 	andi	r2,r2,255
   19f30:	1080201c 	xori	r2,r2,128
   19f34:	10bfe004 	addi	r2,r2,-128
   19f38:	10800b98 	cmpnei	r2,r2,46
   19f3c:	10001a1e 	bne	r2,zero,19fa8 <check_file_name_for_FAT16_compliance+0x15c>
   19f40:	e0fffb17 	ldw	r3,-20(fp)
   19f44:	e0bffc17 	ldw	r2,-16(fp)
   19f48:	18801926 	beq	r3,r2,19fb0 <check_file_name_for_FAT16_compliance+0x164>
            ((last_dir_break_position != last_period) && (index - last_period > 3) &&
   19f4c:	e0fffa17 	ldw	r3,-24(fp)
   19f50:	e0bffc17 	ldw	r2,-16(fp)
   19f54:	1885c83a 	sub	r2,r3,r2
   19f58:	10800110 	cmplti	r2,r2,4
   19f5c:	1000141e 	bne	r2,zero,19fb0 <check_file_name_for_FAT16_compliance+0x164>
             (file_name[index] != '\\') && (file_name[index] != '/'))
   19f60:	e0bffa17 	ldw	r2,-24(fp)
   19f64:	e0ffff17 	ldw	r3,-4(fp)
   19f68:	1885883a 	add	r2,r3,r2
   19f6c:	10800003 	ldbu	r2,0(r2)
    for(index = 0; index < length; index++)
    {
        if ((file_name[index] == ' ') ||
            ((last_dir_break_position == (index - 1)) && ((file_name[index] == '\\') || (file_name[index] == '/'))) ||
            ((index - last_period == 9) && (file_name[index] != '.')) ||
            ((last_dir_break_position != last_period) && (index - last_period > 3) &&
   19f70:	10803fcc 	andi	r2,r2,255
   19f74:	1080201c 	xori	r2,r2,128
   19f78:	10bfe004 	addi	r2,r2,-128
   19f7c:	10801720 	cmpeqi	r2,r2,92
   19f80:	10000b1e 	bne	r2,zero,19fb0 <check_file_name_for_FAT16_compliance+0x164>
             (file_name[index] != '\\') && (file_name[index] != '/'))
   19f84:	e0bffa17 	ldw	r2,-24(fp)
   19f88:	e0ffff17 	ldw	r3,-4(fp)
   19f8c:	1885883a 	add	r2,r3,r2
   19f90:	10800003 	ldbu	r2,0(r2)
   19f94:	10803fcc 	andi	r2,r2,255
   19f98:	1080201c 	xori	r2,r2,128
   19f9c:	10bfe004 	addi	r2,r2,-128
   19fa0:	10800be0 	cmpeqi	r2,r2,47
   19fa4:	1000021e 	bne	r2,zero,19fb0 <check_file_name_for_FAT16_compliance+0x164>
           )
        {
            result = false;
   19fa8:	e03ffd15 	stw	zero,-12(fp)
            break;
   19fac:	00002706 	br	1a04c <check_file_name_for_FAT16_compliance+0x200>
        }
        if ((file_name[index] == '\\') || (file_name[index] == '/'))
   19fb0:	e0bffa17 	ldw	r2,-24(fp)
   19fb4:	e0ffff17 	ldw	r3,-4(fp)
   19fb8:	1885883a 	add	r2,r3,r2
   19fbc:	10800003 	ldbu	r2,0(r2)
   19fc0:	10803fcc 	andi	r2,r2,255
   19fc4:	1080201c 	xori	r2,r2,128
   19fc8:	10bfe004 	addi	r2,r2,-128
   19fcc:	10801720 	cmpeqi	r2,r2,92
   19fd0:	1000091e 	bne	r2,zero,19ff8 <check_file_name_for_FAT16_compliance+0x1ac>
   19fd4:	e0bffa17 	ldw	r2,-24(fp)
   19fd8:	e0ffff17 	ldw	r3,-4(fp)
   19fdc:	1885883a 	add	r2,r3,r2
   19fe0:	10800003 	ldbu	r2,0(r2)
   19fe4:	10803fcc 	andi	r2,r2,255
   19fe8:	1080201c 	xori	r2,r2,128
   19fec:	10bfe004 	addi	r2,r2,-128
   19ff0:	10800bd8 	cmpnei	r2,r2,47
   19ff4:	1000041e 	bne	r2,zero,1a008 <check_file_name_for_FAT16_compliance+0x1bc>
        {
            last_period = index;
   19ff8:	e0bffa17 	ldw	r2,-24(fp)
   19ffc:	e0bffc15 	stw	r2,-16(fp)
            last_dir_break_position = index;
   1a000:	e0bffa17 	ldw	r2,-24(fp)
   1a004:	e0bffb15 	stw	r2,-20(fp)
        }
        if (file_name[index] == '.')
   1a008:	e0bffa17 	ldw	r2,-24(fp)
   1a00c:	e0ffff17 	ldw	r3,-4(fp)
   1a010:	1885883a 	add	r2,r3,r2
   1a014:	10800003 	ldbu	r2,0(r2)
   1a018:	10803fcc 	andi	r2,r2,255
   1a01c:	1080201c 	xori	r2,r2,128
   1a020:	10bfe004 	addi	r2,r2,-128
   1a024:	10800b98 	cmpnei	r2,r2,46
   1a028:	1000021e 	bne	r2,zero,1a034 <check_file_name_for_FAT16_compliance+0x1e8>
        {
            last_period = index;
   1a02c:	e0bffa17 	ldw	r2,-24(fp)
   1a030:	e0bffc15 	stw	r2,-16(fp)
    int index;
    int last_dir_break_position = -1;
    int last_period = -1;
    bool result = true;
    
    for(index = 0; index < length; index++)
   1a034:	e0bffa17 	ldw	r2,-24(fp)
   1a038:	10800044 	addi	r2,r2,1
   1a03c:	e0bffa15 	stw	r2,-24(fp)
   1a040:	e0fffa17 	ldw	r3,-24(fp)
   1a044:	e0bffe17 	ldw	r2,-8(fp)
   1a048:	18bf9016 	blt	r3,r2,19e8c <__alt_mem_Flash_flash_data+0xf4019e8c>
        if (file_name[index] == '.')
        {
            last_period = index;
        }
    }
    if ((file_name[length-1] == '\\') || (file_name[length-1] == '/'))
   1a04c:	e0bffe17 	ldw	r2,-8(fp)
   1a050:	10bfffc4 	addi	r2,r2,-1
   1a054:	e0ffff17 	ldw	r3,-4(fp)
   1a058:	1885883a 	add	r2,r3,r2
   1a05c:	10800003 	ldbu	r2,0(r2)
   1a060:	10803fcc 	andi	r2,r2,255
   1a064:	1080201c 	xori	r2,r2,128
   1a068:	10bfe004 	addi	r2,r2,-128
   1a06c:	10801720 	cmpeqi	r2,r2,92
   1a070:	10000a1e 	bne	r2,zero,1a09c <check_file_name_for_FAT16_compliance+0x250>
   1a074:	e0bffe17 	ldw	r2,-8(fp)
   1a078:	10bfffc4 	addi	r2,r2,-1
   1a07c:	e0ffff17 	ldw	r3,-4(fp)
   1a080:	1885883a 	add	r2,r3,r2
   1a084:	10800003 	ldbu	r2,0(r2)
   1a088:	10803fcc 	andi	r2,r2,255
   1a08c:	1080201c 	xori	r2,r2,128
   1a090:	10bfe004 	addi	r2,r2,-128
   1a094:	10800bd8 	cmpnei	r2,r2,47
   1a098:	1000011e 	bne	r2,zero,1a0a0 <check_file_name_for_FAT16_compliance+0x254>
    {
        result = false;
   1a09c:	e03ffd15 	stw	zero,-12(fp)
    }
    return result;
   1a0a0:	e0bffd17 	ldw	r2,-12(fp)
}
   1a0a4:	e037883a 	mov	sp,fp
   1a0a8:	dfc00117 	ldw	ra,4(sp)
   1a0ac:	df000017 	ldw	fp,0(sp)
   1a0b0:	dec00204 	addi	sp,sp,8
   1a0b4:	f800283a 	ret

0001a0b8 <get_dir_divider_location>:


int get_dir_divider_location(char *name)
// Find a directory divider location.
{
   1a0b8:	defffb04 	addi	sp,sp,-20
   1a0bc:	dfc00415 	stw	ra,16(sp)
   1a0c0:	df000315 	stw	fp,12(sp)
   1a0c4:	df000304 	addi	fp,sp,12
   1a0c8:	e13fff15 	stw	r4,-4(fp)
    int index = 0;
   1a0cc:	e03ffd15 	stw	zero,-12(fp)
    int length = strlen(name);
   1a0d0:	e13fff17 	ldw	r4,-4(fp)
   1a0d4:	00012240 	call	1224 <strlen>
   1a0d8:	e0bffe15 	stw	r2,-8(fp)
    
    for(index = 0; index < length; index++)
   1a0dc:	e03ffd15 	stw	zero,-12(fp)
   1a0e0:	00001506 	br	1a138 <get_dir_divider_location+0x80>
    {
        if ((name[index] == '\\') || (name[index] == '/'))
   1a0e4:	e0bffd17 	ldw	r2,-12(fp)
   1a0e8:	e0ffff17 	ldw	r3,-4(fp)
   1a0ec:	1885883a 	add	r2,r3,r2
   1a0f0:	10800003 	ldbu	r2,0(r2)
   1a0f4:	10803fcc 	andi	r2,r2,255
   1a0f8:	1080201c 	xori	r2,r2,128
   1a0fc:	10bfe004 	addi	r2,r2,-128
   1a100:	10801720 	cmpeqi	r2,r2,92
   1a104:	10000f1e 	bne	r2,zero,1a144 <get_dir_divider_location+0x8c>
   1a108:	e0bffd17 	ldw	r2,-12(fp)
   1a10c:	e0ffff17 	ldw	r3,-4(fp)
   1a110:	1885883a 	add	r2,r3,r2
   1a114:	10800003 	ldbu	r2,0(r2)
   1a118:	10803fcc 	andi	r2,r2,255
   1a11c:	1080201c 	xori	r2,r2,128
   1a120:	10bfe004 	addi	r2,r2,-128
   1a124:	10800be0 	cmpeqi	r2,r2,47
   1a128:	1000061e 	bne	r2,zero,1a144 <get_dir_divider_location+0x8c>
// Find a directory divider location.
{
    int index = 0;
    int length = strlen(name);
    
    for(index = 0; index < length; index++)
   1a12c:	e0bffd17 	ldw	r2,-12(fp)
   1a130:	10800044 	addi	r2,r2,1
   1a134:	e0bffd15 	stw	r2,-12(fp)
   1a138:	e0fffd17 	ldw	r3,-12(fp)
   1a13c:	e0bffe17 	ldw	r2,-8(fp)
   1a140:	18bfe816 	blt	r3,r2,1a0e4 <__alt_mem_Flash_flash_data+0xf401a0e4>
        {
            break;
        }
    }
    
    if (index == length)
   1a144:	e0fffd17 	ldw	r3,-12(fp)
   1a148:	e0bffe17 	ldw	r2,-8(fp)
   1a14c:	1880021e 	bne	r3,r2,1a158 <get_dir_divider_location+0xa0>
    {
        index = -1;
   1a150:	00bfffc4 	movi	r2,-1
   1a154:	e0bffd15 	stw	r2,-12(fp)
    }
    
    return index;
   1a158:	e0bffd17 	ldw	r2,-12(fp)
}
   1a15c:	e037883a 	mov	sp,fp
   1a160:	dfc00117 	ldw	ra,4(sp)
   1a164:	df000017 	ldw	fp,0(sp)
   1a168:	dec00204 	addi	sp,sp,8
   1a16c:	f800283a 	ret

0001a170 <match_file_record_to_name_ext>:


bool match_file_record_to_name_ext(t_file_record *file_record, char *name, char *extension)
/* See if the given name and extension match the file record. Return true if this is so, false otherwise. */
{
   1a170:	defffa04 	addi	sp,sp,-24
   1a174:	df000515 	stw	fp,20(sp)
   1a178:	df000504 	addi	fp,sp,20
   1a17c:	e13ffd15 	stw	r4,-12(fp)
   1a180:	e17ffe15 	stw	r5,-8(fp)
   1a184:	e1bfff15 	stw	r6,-4(fp)
    bool match = true;
   1a188:	00800044 	movi	r2,1
   1a18c:	e0bffb15 	stw	r2,-20(fp)
	int index;

    for (index = 0; index < 8; index++)
   1a190:	e03ffc15 	stw	zero,-16(fp)
   1a194:	00004606 	br	1a2b0 <match_file_record_to_name_ext+0x140>
    {
        if (CHAR_TO_UPPER(file_record->name[index]) != CHAR_TO_UPPER(name[index]))
   1a198:	e0fffd17 	ldw	r3,-12(fp)
   1a19c:	e0bffc17 	ldw	r2,-16(fp)
   1a1a0:	1885883a 	add	r2,r3,r2
   1a1a4:	10800003 	ldbu	r2,0(r2)
   1a1a8:	10803fcc 	andi	r2,r2,255
   1a1ac:	10801870 	cmpltui	r2,r2,97
   1a1b0:	1000101e 	bne	r2,zero,1a1f4 <match_file_record_to_name_ext+0x84>
   1a1b4:	e0fffd17 	ldw	r3,-12(fp)
   1a1b8:	e0bffc17 	ldw	r2,-16(fp)
   1a1bc:	1885883a 	add	r2,r3,r2
   1a1c0:	10800003 	ldbu	r2,0(r2)
   1a1c4:	10803fcc 	andi	r2,r2,255
   1a1c8:	10801ee8 	cmpgeui	r2,r2,123
   1a1cc:	1000091e 	bne	r2,zero,1a1f4 <match_file_record_to_name_ext+0x84>
   1a1d0:	e0fffd17 	ldw	r3,-12(fp)
   1a1d4:	e0bffc17 	ldw	r2,-16(fp)
   1a1d8:	1885883a 	add	r2,r3,r2
   1a1dc:	10800003 	ldbu	r2,0(r2)
   1a1e0:	10bff804 	addi	r2,r2,-32
   1a1e4:	10c03fcc 	andi	r3,r2,255
   1a1e8:	18c0201c 	xori	r3,r3,128
   1a1ec:	18ffe004 	addi	r3,r3,-128
   1a1f0:	00000706 	br	1a210 <match_file_record_to_name_ext+0xa0>
   1a1f4:	e0fffd17 	ldw	r3,-12(fp)
   1a1f8:	e0bffc17 	ldw	r2,-16(fp)
   1a1fc:	1885883a 	add	r2,r3,r2
   1a200:	10800003 	ldbu	r2,0(r2)
   1a204:	10c03fcc 	andi	r3,r2,255
   1a208:	18c0201c 	xori	r3,r3,128
   1a20c:	18ffe004 	addi	r3,r3,-128
   1a210:	e0bffc17 	ldw	r2,-16(fp)
   1a214:	e13ffe17 	ldw	r4,-8(fp)
   1a218:	2085883a 	add	r2,r4,r2
   1a21c:	10800003 	ldbu	r2,0(r2)
   1a220:	10803fcc 	andi	r2,r2,255
   1a224:	1080201c 	xori	r2,r2,128
   1a228:	10bfe004 	addi	r2,r2,-128
   1a22c:	10801850 	cmplti	r2,r2,97
   1a230:	1000121e 	bne	r2,zero,1a27c <match_file_record_to_name_ext+0x10c>
   1a234:	e0bffc17 	ldw	r2,-16(fp)
   1a238:	e13ffe17 	ldw	r4,-8(fp)
   1a23c:	2085883a 	add	r2,r4,r2
   1a240:	10800003 	ldbu	r2,0(r2)
   1a244:	10803fcc 	andi	r2,r2,255
   1a248:	1080201c 	xori	r2,r2,128
   1a24c:	10bfe004 	addi	r2,r2,-128
   1a250:	10801ec8 	cmpgei	r2,r2,123
   1a254:	1000091e 	bne	r2,zero,1a27c <match_file_record_to_name_ext+0x10c>
   1a258:	e0bffc17 	ldw	r2,-16(fp)
   1a25c:	e13ffe17 	ldw	r4,-8(fp)
   1a260:	2085883a 	add	r2,r4,r2
   1a264:	10800003 	ldbu	r2,0(r2)
   1a268:	10bff804 	addi	r2,r2,-32
   1a26c:	10803fcc 	andi	r2,r2,255
   1a270:	1080201c 	xori	r2,r2,128
   1a274:	10bfe004 	addi	r2,r2,-128
   1a278:	00000706 	br	1a298 <match_file_record_to_name_ext+0x128>
   1a27c:	e0bffc17 	ldw	r2,-16(fp)
   1a280:	e13ffe17 	ldw	r4,-8(fp)
   1a284:	2085883a 	add	r2,r4,r2
   1a288:	10800003 	ldbu	r2,0(r2)
   1a28c:	10803fcc 	andi	r2,r2,255
   1a290:	1080201c 	xori	r2,r2,128
   1a294:	10bfe004 	addi	r2,r2,-128
   1a298:	18800226 	beq	r3,r2,1a2a4 <match_file_record_to_name_ext+0x134>
        {
            match = false;
   1a29c:	e03ffb15 	stw	zero,-20(fp)
			break;
   1a2a0:	00000606 	br	1a2bc <match_file_record_to_name_ext+0x14c>
/* See if the given name and extension match the file record. Return true if this is so, false otherwise. */
{
    bool match = true;
	int index;

    for (index = 0; index < 8; index++)
   1a2a4:	e0bffc17 	ldw	r2,-16(fp)
   1a2a8:	10800044 	addi	r2,r2,1
   1a2ac:	e0bffc15 	stw	r2,-16(fp)
   1a2b0:	e0bffc17 	ldw	r2,-16(fp)
   1a2b4:	10800210 	cmplti	r2,r2,8
   1a2b8:	103fb71e 	bne	r2,zero,1a198 <__alt_mem_Flash_flash_data+0xf401a198>
        {
            match = false;
			break;
        }
    }
    for (index = 0; index < 3; index++)
   1a2bc:	e03ffc15 	stw	zero,-16(fp)
   1a2c0:	00004a06 	br	1a3ec <match_file_record_to_name_ext+0x27c>
    {
        if (CHAR_TO_UPPER(file_record->extension[index]) != CHAR_TO_UPPER(extension[index]))
   1a2c4:	e0fffd17 	ldw	r3,-12(fp)
   1a2c8:	e0bffc17 	ldw	r2,-16(fp)
   1a2cc:	1885883a 	add	r2,r3,r2
   1a2d0:	10800204 	addi	r2,r2,8
   1a2d4:	10800003 	ldbu	r2,0(r2)
   1a2d8:	10803fcc 	andi	r2,r2,255
   1a2dc:	10801870 	cmpltui	r2,r2,97
   1a2e0:	1000121e 	bne	r2,zero,1a32c <match_file_record_to_name_ext+0x1bc>
   1a2e4:	e0fffd17 	ldw	r3,-12(fp)
   1a2e8:	e0bffc17 	ldw	r2,-16(fp)
   1a2ec:	1885883a 	add	r2,r3,r2
   1a2f0:	10800204 	addi	r2,r2,8
   1a2f4:	10800003 	ldbu	r2,0(r2)
   1a2f8:	10803fcc 	andi	r2,r2,255
   1a2fc:	10801ee8 	cmpgeui	r2,r2,123
   1a300:	10000a1e 	bne	r2,zero,1a32c <match_file_record_to_name_ext+0x1bc>
   1a304:	e0fffd17 	ldw	r3,-12(fp)
   1a308:	e0bffc17 	ldw	r2,-16(fp)
   1a30c:	1885883a 	add	r2,r3,r2
   1a310:	10800204 	addi	r2,r2,8
   1a314:	10800003 	ldbu	r2,0(r2)
   1a318:	10bff804 	addi	r2,r2,-32
   1a31c:	10c03fcc 	andi	r3,r2,255
   1a320:	18c0201c 	xori	r3,r3,128
   1a324:	18ffe004 	addi	r3,r3,-128
   1a328:	00000806 	br	1a34c <match_file_record_to_name_ext+0x1dc>
   1a32c:	e0fffd17 	ldw	r3,-12(fp)
   1a330:	e0bffc17 	ldw	r2,-16(fp)
   1a334:	1885883a 	add	r2,r3,r2
   1a338:	10800204 	addi	r2,r2,8
   1a33c:	10800003 	ldbu	r2,0(r2)
   1a340:	10c03fcc 	andi	r3,r2,255
   1a344:	18c0201c 	xori	r3,r3,128
   1a348:	18ffe004 	addi	r3,r3,-128
   1a34c:	e0bffc17 	ldw	r2,-16(fp)
   1a350:	e13fff17 	ldw	r4,-4(fp)
   1a354:	2085883a 	add	r2,r4,r2
   1a358:	10800003 	ldbu	r2,0(r2)
   1a35c:	10803fcc 	andi	r2,r2,255
   1a360:	1080201c 	xori	r2,r2,128
   1a364:	10bfe004 	addi	r2,r2,-128
   1a368:	10801850 	cmplti	r2,r2,97
   1a36c:	1000121e 	bne	r2,zero,1a3b8 <match_file_record_to_name_ext+0x248>
   1a370:	e0bffc17 	ldw	r2,-16(fp)
   1a374:	e13fff17 	ldw	r4,-4(fp)
   1a378:	2085883a 	add	r2,r4,r2
   1a37c:	10800003 	ldbu	r2,0(r2)
   1a380:	10803fcc 	andi	r2,r2,255
   1a384:	1080201c 	xori	r2,r2,128
   1a388:	10bfe004 	addi	r2,r2,-128
   1a38c:	10801ec8 	cmpgei	r2,r2,123
   1a390:	1000091e 	bne	r2,zero,1a3b8 <match_file_record_to_name_ext+0x248>
   1a394:	e0bffc17 	ldw	r2,-16(fp)
   1a398:	e13fff17 	ldw	r4,-4(fp)
   1a39c:	2085883a 	add	r2,r4,r2
   1a3a0:	10800003 	ldbu	r2,0(r2)
   1a3a4:	10bff804 	addi	r2,r2,-32
   1a3a8:	10803fcc 	andi	r2,r2,255
   1a3ac:	1080201c 	xori	r2,r2,128
   1a3b0:	10bfe004 	addi	r2,r2,-128
   1a3b4:	00000706 	br	1a3d4 <match_file_record_to_name_ext+0x264>
   1a3b8:	e0bffc17 	ldw	r2,-16(fp)
   1a3bc:	e13fff17 	ldw	r4,-4(fp)
   1a3c0:	2085883a 	add	r2,r4,r2
   1a3c4:	10800003 	ldbu	r2,0(r2)
   1a3c8:	10803fcc 	andi	r2,r2,255
   1a3cc:	1080201c 	xori	r2,r2,128
   1a3d0:	10bfe004 	addi	r2,r2,-128
   1a3d4:	18800226 	beq	r3,r2,1a3e0 <match_file_record_to_name_ext+0x270>
        {
            match = false;
   1a3d8:	e03ffb15 	stw	zero,-20(fp)
			break;
   1a3dc:	00000606 	br	1a3f8 <match_file_record_to_name_ext+0x288>
        {
            match = false;
			break;
        }
    }
    for (index = 0; index < 3; index++)
   1a3e0:	e0bffc17 	ldw	r2,-16(fp)
   1a3e4:	10800044 	addi	r2,r2,1
   1a3e8:	e0bffc15 	stw	r2,-16(fp)
   1a3ec:	e0bffc17 	ldw	r2,-16(fp)
   1a3f0:	108000d0 	cmplti	r2,r2,3
   1a3f4:	103fb31e 	bne	r2,zero,1a2c4 <__alt_mem_Flash_flash_data+0xf401a2c4>
        {
            match = false;
			break;
        }
    }
	return match;
   1a3f8:	e0bffb17 	ldw	r2,-20(fp)
}
   1a3fc:	e037883a 	mov	sp,fp
   1a400:	df000017 	ldw	fp,0(sp)
   1a404:	dec00104 	addi	sp,sp,4
   1a408:	f800283a 	ret

0001a40c <get_home_directory_cluster_for_file>:


bool get_home_directory_cluster_for_file(char *file_name, int *home_directory_cluster, t_file_record *file_record)
// Scan the directories in given in the file name and find the root directory for the file.
{
   1a40c:	deffe704 	addi	sp,sp,-100
   1a410:	dfc01815 	stw	ra,96(sp)
   1a414:	df001715 	stw	fp,92(sp)
   1a418:	df001704 	addi	fp,sp,92
   1a41c:	e13ffd15 	stw	r4,-12(fp)
   1a420:	e17ffe15 	stw	r5,-8(fp)
   1a424:	e1bfff15 	stw	r6,-4(fp)
    bool result = false;
   1a428:	e03fe915 	stw	zero,-92(fp)
    int home_dir_cluster = 0;
   1a42c:	e03fea15 	stw	zero,-88(fp)
    int location, index;
    int start_location = 0;
   1a430:	e03fed15 	stw	zero,-76(fp)
    
    /* Get Next Directory. */
    location = get_dir_divider_location( file_name );
   1a434:	e13ffd17 	ldw	r4,-12(fp)
   1a438:	001a0b80 	call	1a0b8 <get_dir_divider_location>
   1a43c:	e0bfeb15 	stw	r2,-84(fp)
    while (location > 0)
   1a440:	00012c06 	br	1a8f4 <get_home_directory_cluster_for_file+0x4e8>
    {
        char name[8] = { ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ' };
   1a444:	00800804 	movi	r2,32
   1a448:	e0bff905 	stb	r2,-28(fp)
   1a44c:	00800804 	movi	r2,32
   1a450:	e0bff945 	stb	r2,-27(fp)
   1a454:	00800804 	movi	r2,32
   1a458:	e0bff985 	stb	r2,-26(fp)
   1a45c:	00800804 	movi	r2,32
   1a460:	e0bff9c5 	stb	r2,-25(fp)
   1a464:	00800804 	movi	r2,32
   1a468:	e0bffa05 	stb	r2,-24(fp)
   1a46c:	00800804 	movi	r2,32
   1a470:	e0bffa45 	stb	r2,-23(fp)
   1a474:	00800804 	movi	r2,32
   1a478:	e0bffa85 	stb	r2,-22(fp)
   1a47c:	00800804 	movi	r2,32
   1a480:	e0bffac5 	stb	r2,-21(fp)
        char extension[3] = { ' ', ' ', ' ' };
   1a484:	00800804 	movi	r2,32
   1a488:	e0bffb05 	stb	r2,-20(fp)
   1a48c:	00800804 	movi	r2,32
   1a490:	e0bffb45 	stb	r2,-19(fp)
   1a494:	00800804 	movi	r2,32
   1a498:	e0bffb85 	stb	r2,-18(fp)
        int ext_index = -1;
   1a49c:	00bfffc4 	movi	r2,-1
   1a4a0:	e0bfee15 	stw	r2,-72(fp)
        int new_cluster = home_dir_cluster;
   1a4a4:	e0bfea17 	ldw	r2,-88(fp)
   1a4a8:	e0bfef15 	stw	r2,-68(fp)
        
        // Get the name of the directory in name/extension format.
        for (index = 0; index < location; index++)
   1a4ac:	e03fec15 	stw	zero,-80(fp)
   1a4b0:	00002d06 	br	1a568 <get_home_directory_cluster_for_file+0x15c>
        {
            if (file_name[index+start_location] == '.')
   1a4b4:	e0ffec17 	ldw	r3,-80(fp)
   1a4b8:	e0bfed17 	ldw	r2,-76(fp)
   1a4bc:	1885883a 	add	r2,r3,r2
   1a4c0:	1007883a 	mov	r3,r2
   1a4c4:	e0bffd17 	ldw	r2,-12(fp)
   1a4c8:	10c5883a 	add	r2,r2,r3
   1a4cc:	10800003 	ldbu	r2,0(r2)
   1a4d0:	10803fcc 	andi	r2,r2,255
   1a4d4:	1080201c 	xori	r2,r2,128
   1a4d8:	10bfe004 	addi	r2,r2,-128
   1a4dc:	10800b98 	cmpnei	r2,r2,46
   1a4e0:	1000031e 	bne	r2,zero,1a4f0 <get_home_directory_cluster_for_file+0xe4>
            {
                ext_index = index;
   1a4e4:	e0bfec17 	ldw	r2,-80(fp)
   1a4e8:	e0bfee15 	stw	r2,-72(fp)
   1a4ec:	00001b06 	br	1a55c <get_home_directory_cluster_for_file+0x150>
            }
            else if (ext_index < 0)
   1a4f0:	e0bfee17 	ldw	r2,-72(fp)
   1a4f4:	10000c0e 	bge	r2,zero,1a528 <get_home_directory_cluster_for_file+0x11c>
            {
                name[index] = file_name[index+start_location];
   1a4f8:	e0ffec17 	ldw	r3,-80(fp)
   1a4fc:	e0bfed17 	ldw	r2,-76(fp)
   1a500:	1885883a 	add	r2,r3,r2
   1a504:	1007883a 	mov	r3,r2
   1a508:	e0bffd17 	ldw	r2,-12(fp)
   1a50c:	10c5883a 	add	r2,r2,r3
   1a510:	10c00003 	ldbu	r3,0(r2)
   1a514:	e13ff904 	addi	r4,fp,-28
   1a518:	e0bfec17 	ldw	r2,-80(fp)
   1a51c:	2085883a 	add	r2,r4,r2
   1a520:	10c00005 	stb	r3,0(r2)
   1a524:	00000d06 	br	1a55c <get_home_directory_cluster_for_file+0x150>
            }
            else
            {
                extension[index-ext_index] = file_name[index+start_location];
   1a528:	e0ffec17 	ldw	r3,-80(fp)
   1a52c:	e0bfee17 	ldw	r2,-72(fp)
   1a530:	1885c83a 	sub	r2,r3,r2
   1a534:	e13fec17 	ldw	r4,-80(fp)
   1a538:	e0ffed17 	ldw	r3,-76(fp)
   1a53c:	20c7883a 	add	r3,r4,r3
   1a540:	1809883a 	mov	r4,r3
   1a544:	e0fffd17 	ldw	r3,-12(fp)
   1a548:	1907883a 	add	r3,r3,r4
   1a54c:	18c00003 	ldbu	r3,0(r3)
   1a550:	e13ffb04 	addi	r4,fp,-20
   1a554:	2085883a 	add	r2,r4,r2
   1a558:	10c00005 	stb	r3,0(r2)
        char extension[3] = { ' ', ' ', ' ' };
        int ext_index = -1;
        int new_cluster = home_dir_cluster;
        
        // Get the name of the directory in name/extension format.
        for (index = 0; index < location; index++)
   1a55c:	e0bfec17 	ldw	r2,-80(fp)
   1a560:	10800044 	addi	r2,r2,1
   1a564:	e0bfec15 	stw	r2,-80(fp)
   1a568:	e0ffec17 	ldw	r3,-80(fp)
   1a56c:	e0bfeb17 	ldw	r2,-84(fp)
   1a570:	18bfd016 	blt	r3,r2,1a4b4 <__alt_mem_Flash_flash_data+0xf401a4b4>
            {
                extension[index-ext_index] = file_name[index+start_location];
            }
        }
        
        if (home_dir_cluster == 0)
   1a574:	e0bfea17 	ldw	r2,-88(fp)
   1a578:	10005b1e 	bne	r2,zero,1a6e8 <get_home_directory_cluster_for_file+0x2dc>
        {
            /* We are in the root directory. Scan the directory (of predefined size) and see if you can find the specified file. */
            int max_root_dir_sectors = ((32*boot_sector_data.max_number_of_dir_entires) / boot_sector_data.sector_size_in_bytes);
   1a57c:	008000b4 	movhi	r2,2
   1a580:	109fdf04 	addi	r2,r2,32636
   1a584:	1080050b 	ldhu	r2,20(r2)
   1a588:	10bfffcc 	andi	r2,r2,65535
   1a58c:	1006917a 	slli	r3,r2,5
   1a590:	008000b4 	movhi	r2,2
   1a594:	109fdf04 	addi	r2,r2,32636
   1a598:	1080030b 	ldhu	r2,12(r2)
   1a59c:	10bfffcc 	andi	r2,r2,65535
   1a5a0:	1885283a 	div	r2,r3,r2
   1a5a4:	e0bff715 	stw	r2,-36(fp)
            int sector_index;
            
            for (sector_index = 0; sector_index < max_root_dir_sectors; sector_index++)
   1a5a8:	e03ff015 	stw	zero,-64(fp)
   1a5ac:	00003e06 	br	1a6a8 <get_home_directory_cluster_for_file+0x29c>
            {
                if (Read_Sector_Data(sector_index+boot_sector_data.root_directory_sector_offset, fat_partition_offset_in_512_byte_sectors))
   1a5b0:	008000b4 	movhi	r2,2
   1a5b4:	109fdf04 	addi	r2,r2,32636
   1a5b8:	10c01317 	ldw	r3,76(r2)
   1a5bc:	e0bff017 	ldw	r2,-64(fp)
   1a5c0:	1885883a 	add	r2,r3,r2
   1a5c4:	1007883a 	mov	r3,r2
   1a5c8:	d0a81817 	ldw	r2,-24480(gp)
   1a5cc:	1809883a 	mov	r4,r3
   1a5d0:	100b883a 	mov	r5,r2
   1a5d4:	0018cf80 	call	18cf8 <Read_Sector_Data>
   1a5d8:	10002e26 	beq	r2,zero,1a694 <get_home_directory_cluster_for_file+0x288>
                {
                    int file_counter;
                    
                    for (file_counter = 0; file_counter < 16; file_counter++)
   1a5dc:	e03ff115 	stw	zero,-60(fp)
   1a5e0:	00002506 	br	1a678 <get_home_directory_cluster_for_file+0x26c>
                    {
                       
                        // Read file record.
                        Read_File_Record_At_Offset(file_counter*32, file_record, 0, sector_index);
   1a5e4:	e0bff117 	ldw	r2,-60(fp)
   1a5e8:	1006917a 	slli	r3,r2,5
   1a5ec:	e0bff017 	ldw	r2,-64(fp)
   1a5f0:	1809883a 	mov	r4,r3
   1a5f4:	e17fff17 	ldw	r5,-4(fp)
   1a5f8:	000d883a 	mov	r6,zero
   1a5fc:	100f883a 	mov	r7,r2
   1a600:	00191100 	call	19110 <Read_File_Record_At_Offset>
                        if ((file_record->name[0] != 0xe5) && (file_record->name[0] != 0x00))
   1a604:	e0bfff17 	ldw	r2,-4(fp)
   1a608:	10800003 	ldbu	r2,0(r2)
   1a60c:	10803fcc 	andi	r2,r2,255
   1a610:	10803960 	cmpeqi	r2,r2,229
   1a614:	1000151e 	bne	r2,zero,1a66c <get_home_directory_cluster_for_file+0x260>
   1a618:	e0bfff17 	ldw	r2,-4(fp)
   1a61c:	10800003 	ldbu	r2,0(r2)
   1a620:	10803fcc 	andi	r2,r2,255
   1a624:	10001126 	beq	r2,zero,1a66c <get_home_directory_cluster_for_file+0x260>
                        {
                            bool match = match_file_record_to_name_ext(file_record, name, extension);
   1a628:	e0fff904 	addi	r3,fp,-28
   1a62c:	e0bffb04 	addi	r2,fp,-20
   1a630:	e13fff17 	ldw	r4,-4(fp)
   1a634:	180b883a 	mov	r5,r3
   1a638:	100d883a 	mov	r6,r2
   1a63c:	001a1700 	call	1a170 <match_file_record_to_name_ext>
   1a640:	e0bff815 	stw	r2,-32(fp)
                            if (match)
   1a644:	e0bff817 	ldw	r2,-32(fp)
   1a648:	10000826 	beq	r2,zero,1a66c <get_home_directory_cluster_for_file+0x260>
                            {
                                new_cluster = file_record->start_cluster_index;
   1a64c:	e0bfff17 	ldw	r2,-4(fp)
   1a650:	1080058b 	ldhu	r2,22(r2)
   1a654:	10bfffcc 	andi	r2,r2,65535
   1a658:	e0bfef15 	stw	r2,-68(fp)
                                file_record->file_record_cluster = 1; // Home directory is a subdirectory in the root directory.
   1a65c:	e0bfff17 	ldw	r2,-4(fp)
   1a660:	00c00044 	movi	r3,1
   1a664:	10c00a15 	stw	r3,40(r2)
                                break;
   1a668:	00000606 	br	1a684 <get_home_directory_cluster_for_file+0x278>
            {
                if (Read_Sector_Data(sector_index+boot_sector_data.root_directory_sector_offset, fat_partition_offset_in_512_byte_sectors))
                {
                    int file_counter;
                    
                    for (file_counter = 0; file_counter < 16; file_counter++)
   1a66c:	e0bff117 	ldw	r2,-60(fp)
   1a670:	10800044 	addi	r2,r2,1
   1a674:	e0bff115 	stw	r2,-60(fp)
   1a678:	e0bff117 	ldw	r2,-60(fp)
   1a67c:	10800410 	cmplti	r2,r2,16
   1a680:	103fd81e 	bne	r2,zero,1a5e4 <__alt_mem_Flash_flash_data+0xf401a5e4>
                }
                else
                {
                    break;
                }
                if (new_cluster != home_dir_cluster)
   1a684:	e0ffef17 	ldw	r3,-68(fp)
   1a688:	e0bfea17 	ldw	r2,-88(fp)
   1a68c:	18800326 	beq	r3,r2,1a69c <get_home_directory_cluster_for_file+0x290>
   1a690:	00000106 	br	1a698 <get_home_directory_cluster_for_file+0x28c>
                        }
                    }
                }
                else
                {
                    break;
   1a694:	00000706 	br	1a6b4 <get_home_directory_cluster_for_file+0x2a8>
                }
                if (new_cluster != home_dir_cluster)
                {
                    break;
   1a698:	00000606 	br	1a6b4 <get_home_directory_cluster_for_file+0x2a8>
        {
            /* We are in the root directory. Scan the directory (of predefined size) and see if you can find the specified file. */
            int max_root_dir_sectors = ((32*boot_sector_data.max_number_of_dir_entires) / boot_sector_data.sector_size_in_bytes);
            int sector_index;
            
            for (sector_index = 0; sector_index < max_root_dir_sectors; sector_index++)
   1a69c:	e0bff017 	ldw	r2,-64(fp)
   1a6a0:	10800044 	addi	r2,r2,1
   1a6a4:	e0bff015 	stw	r2,-64(fp)
   1a6a8:	e0fff017 	ldw	r3,-64(fp)
   1a6ac:	e0bff717 	ldw	r2,-36(fp)
   1a6b0:	18bfbf16 	blt	r3,r2,1a5b0 <__alt_mem_Flash_flash_data+0xf401a5b0>
                if (new_cluster != home_dir_cluster)
                {
                    break;
                }
            }
            if (new_cluster != home_dir_cluster)
   1a6b4:	e0ffef17 	ldw	r3,-68(fp)
   1a6b8:	e0bfea17 	ldw	r2,-88(fp)
   1a6bc:	18800826 	beq	r3,r2,1a6e0 <get_home_directory_cluster_for_file+0x2d4>
            {
                // A valid directory is found, so go to it.
                home_dir_cluster = new_cluster;
   1a6c0:	e0bfef17 	ldw	r2,-68(fp)
   1a6c4:	e0bfea15 	stw	r2,-88(fp)
                start_location = start_location+location+1;
   1a6c8:	e0ffed17 	ldw	r3,-76(fp)
   1a6cc:	e0bfeb17 	ldw	r2,-84(fp)
   1a6d0:	1885883a 	add	r2,r3,r2
   1a6d4:	10800044 	addi	r2,r2,1
   1a6d8:	e0bfed15 	stw	r2,-76(fp)
   1a6dc:	00007b06 	br	1a8cc <get_home_directory_cluster_for_file+0x4c0>
            }
            else
            {
                // Directory path is invalid. 
                return false;
   1a6e0:	0005883a 	mov	r2,zero
   1a6e4:	00008f06 	br	1a924 <get_home_directory_cluster_for_file+0x518>
            }
        } else {
            // This is a subdirectory that can have any number of elements. So scan through it as though it was a file
            // and see if you can find the directory of interest.
            int cluster = home_dir_cluster;
   1a6e8:	e0bfea17 	ldw	r2,-88(fp)
   1a6ec:	e0bff415 	stw	r2,-48(fp)
            
            do {
                int start_sector = ( cluster - 2 ) * ( boot_sector_data.sectors_per_cluster ) + boot_sector_data.data_sector_offset;
   1a6f0:	e0bff417 	ldw	r2,-48(fp)
   1a6f4:	10ffff84 	addi	r3,r2,-2
   1a6f8:	008000b4 	movhi	r2,2
   1a6fc:	109fdf04 	addi	r2,r2,32636
   1a700:	10800383 	ldbu	r2,14(r2)
   1a704:	10803fcc 	andi	r2,r2,255
   1a708:	1885383a 	mul	r2,r3,r2
   1a70c:	1007883a 	mov	r3,r2
   1a710:	008000b4 	movhi	r2,2
   1a714:	109fdf04 	addi	r2,r2,32636
   1a718:	10801417 	ldw	r2,80(r2)
   1a71c:	1885883a 	add	r2,r3,r2
   1a720:	e0bff515 	stw	r2,-44(fp)
                int sector_index;
                
                for (sector_index = 0; sector_index < boot_sector_data.sectors_per_cluster; sector_index++)
   1a724:	e03ff215 	stw	zero,-56(fp)
   1a728:	00003806 	br	1a80c <get_home_directory_cluster_for_file+0x400>
                {
                    if (Read_Sector_Data(sector_index + start_sector, fat_partition_offset_in_512_byte_sectors))
   1a72c:	e0fff217 	ldw	r3,-56(fp)
   1a730:	e0bff517 	ldw	r2,-44(fp)
   1a734:	1887883a 	add	r3,r3,r2
   1a738:	d0a81817 	ldw	r2,-24480(gp)
   1a73c:	1809883a 	mov	r4,r3
   1a740:	100b883a 	mov	r5,r2
   1a744:	0018cf80 	call	18cf8 <Read_Sector_Data>
   1a748:	10002b26 	beq	r2,zero,1a7f8 <get_home_directory_cluster_for_file+0x3ec>
                    {
                        int file_counter;
                        
                        for (file_counter = 0; file_counter < 16; file_counter++)
   1a74c:	e03ff315 	stw	zero,-52(fp)
   1a750:	00002206 	br	1a7dc <get_home_directory_cluster_for_file+0x3d0>
                        {                         
                            // Read file record.
                            Read_File_Record_At_Offset(file_counter*32, file_record, cluster, sector_index);
   1a754:	e0bff317 	ldw	r2,-52(fp)
   1a758:	1008917a 	slli	r4,r2,5
   1a75c:	e0fff417 	ldw	r3,-48(fp)
   1a760:	e0bff217 	ldw	r2,-56(fp)
   1a764:	e17fff17 	ldw	r5,-4(fp)
   1a768:	180d883a 	mov	r6,r3
   1a76c:	100f883a 	mov	r7,r2
   1a770:	00191100 	call	19110 <Read_File_Record_At_Offset>
                            if ((file_record->name[0] != 0xe5) && (file_record->name[0] != 0x00))
   1a774:	e0bfff17 	ldw	r2,-4(fp)
   1a778:	10800003 	ldbu	r2,0(r2)
   1a77c:	10803fcc 	andi	r2,r2,255
   1a780:	10803960 	cmpeqi	r2,r2,229
   1a784:	1000121e 	bne	r2,zero,1a7d0 <get_home_directory_cluster_for_file+0x3c4>
   1a788:	e0bfff17 	ldw	r2,-4(fp)
   1a78c:	10800003 	ldbu	r2,0(r2)
   1a790:	10803fcc 	andi	r2,r2,255
   1a794:	10000e26 	beq	r2,zero,1a7d0 <get_home_directory_cluster_for_file+0x3c4>
                            {
								bool match = match_file_record_to_name_ext(file_record, name, extension);
   1a798:	e0fff904 	addi	r3,fp,-28
   1a79c:	e0bffb04 	addi	r2,fp,-20
   1a7a0:	e13fff17 	ldw	r4,-4(fp)
   1a7a4:	180b883a 	mov	r5,r3
   1a7a8:	100d883a 	mov	r6,r2
   1a7ac:	001a1700 	call	1a170 <match_file_record_to_name_ext>
   1a7b0:	e0bff615 	stw	r2,-40(fp)
                                if (match)
   1a7b4:	e0bff617 	ldw	r2,-40(fp)
   1a7b8:	10000526 	beq	r2,zero,1a7d0 <get_home_directory_cluster_for_file+0x3c4>
                                {
                                    new_cluster = file_record->start_cluster_index;                                   
   1a7bc:	e0bfff17 	ldw	r2,-4(fp)
   1a7c0:	1080058b 	ldhu	r2,22(r2)
   1a7c4:	10bfffcc 	andi	r2,r2,65535
   1a7c8:	e0bfef15 	stw	r2,-68(fp)
                                    break;
   1a7cc:	00000606 	br	1a7e8 <get_home_directory_cluster_for_file+0x3dc>
                {
                    if (Read_Sector_Data(sector_index + start_sector, fat_partition_offset_in_512_byte_sectors))
                    {
                        int file_counter;
                        
                        for (file_counter = 0; file_counter < 16; file_counter++)
   1a7d0:	e0bff317 	ldw	r2,-52(fp)
   1a7d4:	10800044 	addi	r2,r2,1
   1a7d8:	e0bff315 	stw	r2,-52(fp)
   1a7dc:	e0bff317 	ldw	r2,-52(fp)
   1a7e0:	10800410 	cmplti	r2,r2,16
   1a7e4:	103fdb1e 	bne	r2,zero,1a754 <__alt_mem_Flash_flash_data+0xf401a754>
                    }
                    else
                    {
                        break;
                    }
                    if (new_cluster != home_dir_cluster)
   1a7e8:	e0ffef17 	ldw	r3,-68(fp)
   1a7ec:	e0bfea17 	ldw	r2,-88(fp)
   1a7f0:	18800326 	beq	r3,r2,1a800 <get_home_directory_cluster_for_file+0x3f4>
   1a7f4:	00000106 	br	1a7fc <get_home_directory_cluster_for_file+0x3f0>
                            }
                        }
                    }
                    else
                    {
                        break;
   1a7f8:	00000a06 	br	1a824 <get_home_directory_cluster_for_file+0x418>
                    }
                    if (new_cluster != home_dir_cluster)
                    {
                        break;
   1a7fc:	00000906 	br	1a824 <get_home_directory_cluster_for_file+0x418>
            
            do {
                int start_sector = ( cluster - 2 ) * ( boot_sector_data.sectors_per_cluster ) + boot_sector_data.data_sector_offset;
                int sector_index;
                
                for (sector_index = 0; sector_index < boot_sector_data.sectors_per_cluster; sector_index++)
   1a800:	e0bff217 	ldw	r2,-56(fp)
   1a804:	10800044 	addi	r2,r2,1
   1a808:	e0bff215 	stw	r2,-56(fp)
   1a80c:	008000b4 	movhi	r2,2
   1a810:	109fdf04 	addi	r2,r2,32636
   1a814:	10800383 	ldbu	r2,14(r2)
   1a818:	10803fcc 	andi	r2,r2,255
   1a81c:	e0fff217 	ldw	r3,-56(fp)
   1a820:	18bfc216 	blt	r3,r2,1a72c <__alt_mem_Flash_flash_data+0xf401a72c>
                        break;
                    }
                }
                // If this is the end of the cluster and the directory has not been found, then see if there is another cluster
                // that holds data for the current directory.
                if (new_cluster == home_dir_cluster)
   1a824:	e0ffef17 	ldw	r3,-68(fp)
   1a828:	e0bfea17 	ldw	r2,-88(fp)
   1a82c:	1880141e 	bne	r3,r2,1a880 <get_home_directory_cluster_for_file+0x474>
                {
					unsigned short int next_cluster;

					if (get_cluster_flag(new_cluster, &next_cluster))
   1a830:	e0ffef17 	ldw	r3,-68(fp)
   1a834:	e0bffc04 	addi	r2,fp,-16
   1a838:	1809883a 	mov	r4,r3
   1a83c:	100b883a 	mov	r5,r2
   1a840:	0018dd00 	call	18dd0 <get_cluster_flag>
   1a844:	10000c26 	beq	r2,zero,1a878 <get_home_directory_cluster_for_file+0x46c>
					{
						// The directory needs to be expanded to store more files.
						if ((next_cluster & 0x0000fff8) == 0x0000fff8)
   1a848:	e0bffc0b 	ldhu	r2,-16(fp)
   1a84c:	10bfffcc 	andi	r2,r2,65535
   1a850:	10fffe0c 	andi	r3,r2,65528
   1a854:	00bffe14 	movui	r2,65528
   1a858:	1880021e 	bne	r3,r2,1a864 <get_home_directory_cluster_for_file+0x458>
						{
							return false;
   1a85c:	0005883a 	mov	r2,zero
   1a860:	00003006 	br	1a924 <get_home_directory_cluster_for_file+0x518>
						}
						new_cluster = (next_cluster & 0x0000fff8);
   1a864:	e0bffc0b 	ldhu	r2,-16(fp)
   1a868:	10bfffcc 	andi	r2,r2,65535
   1a86c:	10bffe0c 	andi	r2,r2,65528
   1a870:	e0bfef15 	stw	r2,-68(fp)
   1a874:	00000206 	br	1a880 <get_home_directory_cluster_for_file+0x474>
					}
					else
					{
						// Directory path is invalid.                 
						return false;
   1a878:	0005883a 	mov	r2,zero
   1a87c:	00002906 	br	1a924 <get_home_directory_cluster_for_file+0x518>
					}
                }              
            } while ((cluster < 0x0000fff8) && (new_cluster == home_dir_cluster));
   1a880:	e0bff417 	ldw	r2,-48(fp)
   1a884:	00fffdd4 	movui	r3,65527
   1a888:	18800316 	blt	r3,r2,1a898 <get_home_directory_cluster_for_file+0x48c>
   1a88c:	e0ffef17 	ldw	r3,-68(fp)
   1a890:	e0bfea17 	ldw	r2,-88(fp)
   1a894:	18bf9626 	beq	r3,r2,1a6f0 <__alt_mem_Flash_flash_data+0xf401a6f0>
            if (new_cluster != home_dir_cluster)
   1a898:	e0ffef17 	ldw	r3,-68(fp)
   1a89c:	e0bfea17 	ldw	r2,-88(fp)
   1a8a0:	18800826 	beq	r3,r2,1a8c4 <get_home_directory_cluster_for_file+0x4b8>
            {
                // A valid directory is found, so go to it.
                home_dir_cluster = new_cluster;
   1a8a4:	e0bfef17 	ldw	r2,-68(fp)
   1a8a8:	e0bfea15 	stw	r2,-88(fp)
                start_location = start_location+location+1;
   1a8ac:	e0ffed17 	ldw	r3,-76(fp)
   1a8b0:	e0bfeb17 	ldw	r2,-84(fp)
   1a8b4:	1885883a 	add	r2,r3,r2
   1a8b8:	10800044 	addi	r2,r2,1
   1a8bc:	e0bfed15 	stw	r2,-76(fp)
   1a8c0:	00000206 	br	1a8cc <get_home_directory_cluster_for_file+0x4c0>
            }
            else
            {
                // Directory path is invalid. 
                return false;
   1a8c4:	0005883a 	mov	r2,zero
   1a8c8:	00001606 	br	1a924 <get_home_directory_cluster_for_file+0x518>
            }            
        }
        location = get_dir_divider_location(&(file_name[start_location]));
   1a8cc:	e0bfed17 	ldw	r2,-76(fp)
   1a8d0:	e0fffd17 	ldw	r3,-12(fp)
   1a8d4:	1885883a 	add	r2,r3,r2
   1a8d8:	1009883a 	mov	r4,r2
   1a8dc:	001a0b80 	call	1a0b8 <get_dir_divider_location>
   1a8e0:	e0bfeb15 	stw	r2,-84(fp)
        if (location < 0)
   1a8e4:	e0bfeb17 	ldw	r2,-84(fp)
   1a8e8:	1000020e 	bge	r2,zero,1a8f4 <get_home_directory_cluster_for_file+0x4e8>
        {
            // Directory has been located.
            result = true;
   1a8ec:	00800044 	movi	r2,1
   1a8f0:	e0bfe915 	stw	r2,-92(fp)
    int location, index;
    int start_location = 0;
    
    /* Get Next Directory. */
    location = get_dir_divider_location( file_name );
    while (location > 0)
   1a8f4:	e0bfeb17 	ldw	r2,-84(fp)
   1a8f8:	00bed216 	blt	zero,r2,1a444 <__alt_mem_Flash_flash_data+0xf401a444>
            // Directory has been located.
            result = true;
        }
    }
    
    *home_directory_cluster = home_dir_cluster;
   1a8fc:	e0bffe17 	ldw	r2,-8(fp)
   1a900:	e0ffea17 	ldw	r3,-88(fp)
   1a904:	10c00015 	stw	r3,0(r2)
    if (home_dir_cluster == 0)
   1a908:	e0bfea17 	ldw	r2,-88(fp)
   1a90c:	1000041e 	bne	r2,zero,1a920 <get_home_directory_cluster_for_file+0x514>
    {
        file_record->file_record_cluster = 0; // Home directory is the root directory.
   1a910:	e0bfff17 	ldw	r2,-4(fp)
   1a914:	10000a15 	stw	zero,40(r2)
		result = true;
   1a918:	00800044 	movi	r2,1
   1a91c:	e0bfe915 	stw	r2,-92(fp)
    }
    return result;
   1a920:	e0bfe917 	ldw	r2,-92(fp)
}
   1a924:	e037883a 	mov	sp,fp
   1a928:	dfc00117 	ldw	ra,4(sp)
   1a92c:	df000017 	ldw	fp,0(sp)
   1a930:	dec00204 	addi	sp,sp,8
   1a934:	f800283a 	ret

0001a938 <find_file_in_directory>:


bool find_file_in_directory(int directory_start_cluster, char *file_name, t_file_record *file_record)
// Given a cluster and a file name, check if the file already exists. Return the file record if the file is found.
{
   1a938:	deffe804 	addi	sp,sp,-96
   1a93c:	dfc01715 	stw	ra,92(sp)
   1a940:	df001615 	stw	fp,88(sp)
   1a944:	df001604 	addi	fp,sp,88
   1a948:	e13ffd15 	stw	r4,-12(fp)
   1a94c:	e17ffe15 	stw	r5,-8(fp)
   1a950:	e1bfff15 	stw	r6,-4(fp)
    int location = get_dir_divider_location( file_name );
   1a954:	e13ffe17 	ldw	r4,-8(fp)
   1a958:	001a0b80 	call	1a0b8 <get_dir_divider_location>
   1a95c:	e0bfea15 	stw	r2,-88(fp)
    int last_dir_separator = 0;
   1a960:	e03feb15 	stw	zero,-84(fp)
    char name[8] = { ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ' };
   1a964:	00800804 	movi	r2,32
   1a968:	e0bff905 	stb	r2,-28(fp)
   1a96c:	00800804 	movi	r2,32
   1a970:	e0bff945 	stb	r2,-27(fp)
   1a974:	00800804 	movi	r2,32
   1a978:	e0bff985 	stb	r2,-26(fp)
   1a97c:	00800804 	movi	r2,32
   1a980:	e0bff9c5 	stb	r2,-25(fp)
   1a984:	00800804 	movi	r2,32
   1a988:	e0bffa05 	stb	r2,-24(fp)
   1a98c:	00800804 	movi	r2,32
   1a990:	e0bffa45 	stb	r2,-23(fp)
   1a994:	00800804 	movi	r2,32
   1a998:	e0bffa85 	stb	r2,-22(fp)
   1a99c:	00800804 	movi	r2,32
   1a9a0:	e0bffac5 	stb	r2,-21(fp)
    char extension[3] = { ' ', ' ', ' ' };
   1a9a4:	00800804 	movi	r2,32
   1a9a8:	e0bffb05 	stb	r2,-20(fp)
   1a9ac:	00800804 	movi	r2,32
   1a9b0:	e0bffb45 	stb	r2,-19(fp)
   1a9b4:	00800804 	movi	r2,32
   1a9b8:	e0bffb85 	stb	r2,-18(fp)
    int ext_index = -1;
   1a9bc:	00bfffc4 	movi	r2,-1
   1a9c0:	e0bfec15 	stw	r2,-80(fp)
    int cluster = directory_start_cluster;
   1a9c4:	e0bffd17 	ldw	r2,-12(fp)
   1a9c8:	e0bfed15 	stw	r2,-76(fp)
    int index;
	int length = strlen(file_name);
   1a9cc:	e13ffe17 	ldw	r4,-8(fp)
   1a9d0:	00012240 	call	1224 <strlen>
   1a9d4:	e0bff415 	stw	r2,-48(fp)
    bool result = false;
   1a9d8:	e03fef15 	stw	zero,-68(fp)
    
    // Skip through all directory separators.
    while (location > 0)
   1a9dc:	00000b06 	br	1aa0c <find_file_in_directory+0xd4>
    {
        last_dir_separator = last_dir_separator+location+1;
   1a9e0:	e0ffeb17 	ldw	r3,-84(fp)
   1a9e4:	e0bfea17 	ldw	r2,-88(fp)
   1a9e8:	1885883a 	add	r2,r3,r2
   1a9ec:	10800044 	addi	r2,r2,1
   1a9f0:	e0bfeb15 	stw	r2,-84(fp)
        location = get_dir_divider_location( &(file_name[last_dir_separator]) );
   1a9f4:	e0bfeb17 	ldw	r2,-84(fp)
   1a9f8:	e0fffe17 	ldw	r3,-8(fp)
   1a9fc:	1885883a 	add	r2,r3,r2
   1aa00:	1009883a 	mov	r4,r2
   1aa04:	001a0b80 	call	1a0b8 <get_dir_divider_location>
   1aa08:	e0bfea15 	stw	r2,-88(fp)
    int index;
	int length = strlen(file_name);
    bool result = false;
    
    // Skip through all directory separators.
    while (location > 0)
   1aa0c:	e0bfea17 	ldw	r2,-88(fp)
   1aa10:	00bff316 	blt	zero,r2,1a9e0 <__alt_mem_Flash_flash_data+0xf401a9e0>
        last_dir_separator = last_dir_separator+location+1;
        location = get_dir_divider_location( &(file_name[last_dir_separator]) );
    }
        
    // Get the name of the file in name/extension format.
    for (index = last_dir_separator; index < length; index++)
   1aa14:	e0bfeb17 	ldw	r2,-84(fp)
   1aa18:	e0bfee15 	stw	r2,-72(fp)
   1aa1c:	00002706 	br	1aabc <find_file_in_directory+0x184>
    {
        if (file_name[index] == '.')
   1aa20:	e0bfee17 	ldw	r2,-72(fp)
   1aa24:	e0fffe17 	ldw	r3,-8(fp)
   1aa28:	1885883a 	add	r2,r3,r2
   1aa2c:	10800003 	ldbu	r2,0(r2)
   1aa30:	10803fcc 	andi	r2,r2,255
   1aa34:	1080201c 	xori	r2,r2,128
   1aa38:	10bfe004 	addi	r2,r2,-128
   1aa3c:	10800b98 	cmpnei	r2,r2,46
   1aa40:	1000031e 	bne	r2,zero,1aa50 <find_file_in_directory+0x118>
        {
            ext_index = index;
   1aa44:	e0bfee17 	ldw	r2,-72(fp)
   1aa48:	e0bfec15 	stw	r2,-80(fp)
   1aa4c:	00001806 	br	1aab0 <find_file_in_directory+0x178>
        }
        else if (ext_index < 0)
   1aa50:	e0bfec17 	ldw	r2,-80(fp)
   1aa54:	10000b0e 	bge	r2,zero,1aa84 <find_file_in_directory+0x14c>
        {
            name[index-last_dir_separator] = file_name[index];
   1aa58:	e0ffee17 	ldw	r3,-72(fp)
   1aa5c:	e0bfeb17 	ldw	r2,-84(fp)
   1aa60:	1885c83a 	sub	r2,r3,r2
   1aa64:	e0ffee17 	ldw	r3,-72(fp)
   1aa68:	e13ffe17 	ldw	r4,-8(fp)
   1aa6c:	20c7883a 	add	r3,r4,r3
   1aa70:	18c00003 	ldbu	r3,0(r3)
   1aa74:	e13ff904 	addi	r4,fp,-28
   1aa78:	2085883a 	add	r2,r4,r2
   1aa7c:	10c00005 	stb	r3,0(r2)
   1aa80:	00000b06 	br	1aab0 <find_file_in_directory+0x178>
        }
        else
        {
            extension[index-ext_index-1] = file_name[index];
   1aa84:	e0ffee17 	ldw	r3,-72(fp)
   1aa88:	e0bfec17 	ldw	r2,-80(fp)
   1aa8c:	1885c83a 	sub	r2,r3,r2
   1aa90:	10bfffc4 	addi	r2,r2,-1
   1aa94:	e0ffee17 	ldw	r3,-72(fp)
   1aa98:	e13ffe17 	ldw	r4,-8(fp)
   1aa9c:	20c7883a 	add	r3,r4,r3
   1aaa0:	18c00003 	ldbu	r3,0(r3)
   1aaa4:	e13ffb04 	addi	r4,fp,-20
   1aaa8:	2085883a 	add	r2,r4,r2
   1aaac:	10c00005 	stb	r3,0(r2)
        last_dir_separator = last_dir_separator+location+1;
        location = get_dir_divider_location( &(file_name[last_dir_separator]) );
    }
        
    // Get the name of the file in name/extension format.
    for (index = last_dir_separator; index < length; index++)
   1aab0:	e0bfee17 	ldw	r2,-72(fp)
   1aab4:	10800044 	addi	r2,r2,1
   1aab8:	e0bfee15 	stw	r2,-72(fp)
   1aabc:	e0ffee17 	ldw	r3,-72(fp)
   1aac0:	e0bff417 	ldw	r2,-48(fp)
   1aac4:	18bfd616 	blt	r3,r2,1aa20 <__alt_mem_Flash_flash_data+0xf401aa20>
            extension[index-ext_index-1] = file_name[index];
        }
    }

    // Look for the file.
    if (directory_start_cluster == 0)
   1aac8:	e0bffd17 	ldw	r2,-12(fp)
   1aacc:	1000491e 	bne	r2,zero,1abf4 <find_file_in_directory+0x2bc>
    {
        /* We are in the root directory. Scan the directory (of predefined size) and see if you can find the specified file. */
        int max_root_dir_sectors = ((32*boot_sector_data.max_number_of_dir_entires) / boot_sector_data.sector_size_in_bytes);
   1aad0:	008000b4 	movhi	r2,2
   1aad4:	109fdf04 	addi	r2,r2,32636
   1aad8:	1080050b 	ldhu	r2,20(r2)
   1aadc:	10bfffcc 	andi	r2,r2,65535
   1aae0:	1006917a 	slli	r3,r2,5
   1aae4:	008000b4 	movhi	r2,2
   1aae8:	109fdf04 	addi	r2,r2,32636
   1aaec:	1080030b 	ldhu	r2,12(r2)
   1aaf0:	10bfffcc 	andi	r2,r2,65535
   1aaf4:	1885283a 	div	r2,r3,r2
   1aaf8:	e0bff715 	stw	r2,-36(fp)
        int sector_index;
        
        for (sector_index = 0; sector_index < max_root_dir_sectors; sector_index++)
   1aafc:	e03ff015 	stw	zero,-64(fp)
   1ab00:	00003806 	br	1abe4 <find_file_in_directory+0x2ac>
        {
            if (Read_Sector_Data(   sector_index + boot_sector_data.root_directory_sector_offset,
   1ab04:	008000b4 	movhi	r2,2
   1ab08:	109fdf04 	addi	r2,r2,32636
   1ab0c:	10c01317 	ldw	r3,76(r2)
   1ab10:	e0bff017 	ldw	r2,-64(fp)
   1ab14:	1885883a 	add	r2,r3,r2
   1ab18:	1007883a 	mov	r3,r2
   1ab1c:	d0a81817 	ldw	r2,-24480(gp)
   1ab20:	1809883a 	mov	r4,r3
   1ab24:	100b883a 	mov	r5,r2
   1ab28:	0018cf80 	call	18cf8 <Read_Sector_Data>
   1ab2c:	10002826 	beq	r2,zero,1abd0 <find_file_in_directory+0x298>
                                    fat_partition_offset_in_512_byte_sectors))
            {
                int file_counter;
                
                for (file_counter = 0; file_counter < 16; file_counter++)
   1ab30:	e03ff115 	stw	zero,-60(fp)
   1ab34:	00002006 	br	1abb8 <find_file_in_directory+0x280>
                {
                    // Read file record.
                    Read_File_Record_At_Offset(file_counter*32, file_record, 0, sector_index);
   1ab38:	e0bff117 	ldw	r2,-60(fp)
   1ab3c:	1006917a 	slli	r3,r2,5
   1ab40:	e0bff017 	ldw	r2,-64(fp)
   1ab44:	1809883a 	mov	r4,r3
   1ab48:	e17fff17 	ldw	r5,-4(fp)
   1ab4c:	000d883a 	mov	r6,zero
   1ab50:	100f883a 	mov	r7,r2
   1ab54:	00191100 	call	19110 <Read_File_Record_At_Offset>
                    if ((file_record->name[0] != 0xe5) && (file_record->name[0] != 0x00))
   1ab58:	e0bfff17 	ldw	r2,-4(fp)
   1ab5c:	10800003 	ldbu	r2,0(r2)
   1ab60:	10803fcc 	andi	r2,r2,255
   1ab64:	10803960 	cmpeqi	r2,r2,229
   1ab68:	1000101e 	bne	r2,zero,1abac <find_file_in_directory+0x274>
   1ab6c:	e0bfff17 	ldw	r2,-4(fp)
   1ab70:	10800003 	ldbu	r2,0(r2)
   1ab74:	10803fcc 	andi	r2,r2,255
   1ab78:	10000c26 	beq	r2,zero,1abac <find_file_in_directory+0x274>
                    {
                        bool match = match_file_record_to_name_ext(file_record, name, extension);
   1ab7c:	e0fff904 	addi	r3,fp,-28
   1ab80:	e0bffb04 	addi	r2,fp,-20
   1ab84:	e13fff17 	ldw	r4,-4(fp)
   1ab88:	180b883a 	mov	r5,r3
   1ab8c:	100d883a 	mov	r6,r2
   1ab90:	001a1700 	call	1a170 <match_file_record_to_name_ext>
   1ab94:	e0bff815 	stw	r2,-32(fp)

                        if (match)
   1ab98:	e0bff817 	ldw	r2,-32(fp)
   1ab9c:	10000326 	beq	r2,zero,1abac <find_file_in_directory+0x274>
                        {
                            result = true;
   1aba0:	00800044 	movi	r2,1
   1aba4:	e0bfef15 	stw	r2,-68(fp)
                            break;
   1aba8:	00000606 	br	1abc4 <find_file_in_directory+0x28c>
            if (Read_Sector_Data(   sector_index + boot_sector_data.root_directory_sector_offset,
                                    fat_partition_offset_in_512_byte_sectors))
            {
                int file_counter;
                
                for (file_counter = 0; file_counter < 16; file_counter++)
   1abac:	e0bff117 	ldw	r2,-60(fp)
   1abb0:	10800044 	addi	r2,r2,1
   1abb4:	e0bff115 	stw	r2,-60(fp)
   1abb8:	e0bff117 	ldw	r2,-60(fp)
   1abbc:	10800410 	cmplti	r2,r2,16
   1abc0:	103fdd1e 	bne	r2,zero,1ab38 <__alt_mem_Flash_flash_data+0xf401ab38>
            }
            else
            {
                break;
            }
            if (result)
   1abc4:	e0bfef17 	ldw	r2,-68(fp)
   1abc8:	10000326 	beq	r2,zero,1abd8 <find_file_in_directory+0x2a0>
   1abcc:	00000106 	br	1abd4 <find_file_in_directory+0x29c>
                    }
                }
            }
            else
            {
                break;
   1abd0:	00000706 	br	1abf0 <find_file_in_directory+0x2b8>
            }
            if (result)
            {
                break;
   1abd4:	00000606 	br	1abf0 <find_file_in_directory+0x2b8>
    {
        /* We are in the root directory. Scan the directory (of predefined size) and see if you can find the specified file. */
        int max_root_dir_sectors = ((32*boot_sector_data.max_number_of_dir_entires) / boot_sector_data.sector_size_in_bytes);
        int sector_index;
        
        for (sector_index = 0; sector_index < max_root_dir_sectors; sector_index++)
   1abd8:	e0bff017 	ldw	r2,-64(fp)
   1abdc:	10800044 	addi	r2,r2,1
   1abe0:	e0bff015 	stw	r2,-64(fp)
   1abe4:	e0fff017 	ldw	r3,-64(fp)
   1abe8:	e0bff717 	ldw	r2,-36(fp)
   1abec:	18bfc516 	blt	r3,r2,1ab04 <__alt_mem_Flash_flash_data+0xf401ab04>
   1abf0:	00006506 	br	1ad88 <find_file_in_directory+0x450>
        }
    }
    else
    {          
        do {
            int start_sector = ( cluster - 2 ) * ( boot_sector_data.sectors_per_cluster ) + boot_sector_data.data_sector_offset;
   1abf4:	e0bfed17 	ldw	r2,-76(fp)
   1abf8:	10ffff84 	addi	r3,r2,-2
   1abfc:	008000b4 	movhi	r2,2
   1ac00:	109fdf04 	addi	r2,r2,32636
   1ac04:	10800383 	ldbu	r2,14(r2)
   1ac08:	10803fcc 	andi	r2,r2,255
   1ac0c:	1885383a 	mul	r2,r3,r2
   1ac10:	1007883a 	mov	r3,r2
   1ac14:	008000b4 	movhi	r2,2
   1ac18:	109fdf04 	addi	r2,r2,32636
   1ac1c:	10801417 	ldw	r2,80(r2)
   1ac20:	1885883a 	add	r2,r3,r2
   1ac24:	e0bff515 	stw	r2,-44(fp)
            int sector_index;
            
            for (sector_index = 0; sector_index < boot_sector_data.sectors_per_cluster; sector_index++)
   1ac28:	e03ff215 	stw	zero,-56(fp)
   1ac2c:	00003506 	br	1ad04 <find_file_in_directory+0x3cc>
            {
                if (Read_Sector_Data(sector_index + start_sector, fat_partition_offset_in_512_byte_sectors))
   1ac30:	e0fff217 	ldw	r3,-56(fp)
   1ac34:	e0bff517 	ldw	r2,-44(fp)
   1ac38:	1887883a 	add	r3,r3,r2
   1ac3c:	d0a81817 	ldw	r2,-24480(gp)
   1ac40:	1809883a 	mov	r4,r3
   1ac44:	100b883a 	mov	r5,r2
   1ac48:	0018cf80 	call	18cf8 <Read_Sector_Data>
   1ac4c:	10002826 	beq	r2,zero,1acf0 <find_file_in_directory+0x3b8>
                {
                    int file_counter;
                    
                    for (file_counter = 0; file_counter < 16; file_counter++)
   1ac50:	e03ff315 	stw	zero,-52(fp)
   1ac54:	00002006 	br	1acd8 <find_file_in_directory+0x3a0>
                    {
                        // Read file record.
                        Read_File_Record_At_Offset(file_counter*32, file_record, cluster, sector_index);
   1ac58:	e0bff317 	ldw	r2,-52(fp)
   1ac5c:	1008917a 	slli	r4,r2,5
   1ac60:	e0ffed17 	ldw	r3,-76(fp)
   1ac64:	e0bff217 	ldw	r2,-56(fp)
   1ac68:	e17fff17 	ldw	r5,-4(fp)
   1ac6c:	180d883a 	mov	r6,r3
   1ac70:	100f883a 	mov	r7,r2
   1ac74:	00191100 	call	19110 <Read_File_Record_At_Offset>
                        if ((file_record->name[0] != 0xe5) && (file_record->name[0] != 0x00))
   1ac78:	e0bfff17 	ldw	r2,-4(fp)
   1ac7c:	10800003 	ldbu	r2,0(r2)
   1ac80:	10803fcc 	andi	r2,r2,255
   1ac84:	10803960 	cmpeqi	r2,r2,229
   1ac88:	1000101e 	bne	r2,zero,1accc <find_file_in_directory+0x394>
   1ac8c:	e0bfff17 	ldw	r2,-4(fp)
   1ac90:	10800003 	ldbu	r2,0(r2)
   1ac94:	10803fcc 	andi	r2,r2,255
   1ac98:	10000c26 	beq	r2,zero,1accc <find_file_in_directory+0x394>
                        {
                            bool match = match_file_record_to_name_ext(file_record, name, extension);
   1ac9c:	e0fff904 	addi	r3,fp,-28
   1aca0:	e0bffb04 	addi	r2,fp,-20
   1aca4:	e13fff17 	ldw	r4,-4(fp)
   1aca8:	180b883a 	mov	r5,r3
   1acac:	100d883a 	mov	r6,r2
   1acb0:	001a1700 	call	1a170 <match_file_record_to_name_ext>
   1acb4:	e0bff615 	stw	r2,-40(fp)

                            if (match)
   1acb8:	e0bff617 	ldw	r2,-40(fp)
   1acbc:	10000326 	beq	r2,zero,1accc <find_file_in_directory+0x394>
                            {                               
                                result = true;
   1acc0:	00800044 	movi	r2,1
   1acc4:	e0bfef15 	stw	r2,-68(fp)
                                break;
   1acc8:	00000606 	br	1ace4 <find_file_in_directory+0x3ac>
            {
                if (Read_Sector_Data(sector_index + start_sector, fat_partition_offset_in_512_byte_sectors))
                {
                    int file_counter;
                    
                    for (file_counter = 0; file_counter < 16; file_counter++)
   1accc:	e0bff317 	ldw	r2,-52(fp)
   1acd0:	10800044 	addi	r2,r2,1
   1acd4:	e0bff315 	stw	r2,-52(fp)
   1acd8:	e0bff317 	ldw	r2,-52(fp)
   1acdc:	10800410 	cmplti	r2,r2,16
   1ace0:	103fdd1e 	bne	r2,zero,1ac58 <__alt_mem_Flash_flash_data+0xf401ac58>
                }
                else
                {
                    break;
                }
                if (result)
   1ace4:	e0bfef17 	ldw	r2,-68(fp)
   1ace8:	10000326 	beq	r2,zero,1acf8 <find_file_in_directory+0x3c0>
   1acec:	00000106 	br	1acf4 <find_file_in_directory+0x3bc>
                        }
                    }
                }
                else
                {
                    break;
   1acf0:	00000a06 	br	1ad1c <find_file_in_directory+0x3e4>
                }
                if (result)
                {
                    break;
   1acf4:	00000906 	br	1ad1c <find_file_in_directory+0x3e4>
    {          
        do {
            int start_sector = ( cluster - 2 ) * ( boot_sector_data.sectors_per_cluster ) + boot_sector_data.data_sector_offset;
            int sector_index;
            
            for (sector_index = 0; sector_index < boot_sector_data.sectors_per_cluster; sector_index++)
   1acf8:	e0bff217 	ldw	r2,-56(fp)
   1acfc:	10800044 	addi	r2,r2,1
   1ad00:	e0bff215 	stw	r2,-56(fp)
   1ad04:	008000b4 	movhi	r2,2
   1ad08:	109fdf04 	addi	r2,r2,32636
   1ad0c:	10800383 	ldbu	r2,14(r2)
   1ad10:	10803fcc 	andi	r2,r2,255
   1ad14:	e0fff217 	ldw	r3,-56(fp)
   1ad18:	18bfc516 	blt	r3,r2,1ac30 <__alt_mem_Flash_flash_data+0xf401ac30>
                    break;
                }
            }
            // If this is the end of the cluster and the file has not been found, then see if there is another cluster
            // that holds data for the current directory.
            if (result == false)
   1ad1c:	e0bfef17 	ldw	r2,-68(fp)
   1ad20:	1000141e 	bne	r2,zero,1ad74 <find_file_in_directory+0x43c>
            {
				unsigned short int new_cluster;

				if (get_cluster_flag(cluster, &new_cluster))
   1ad24:	e0ffed17 	ldw	r3,-76(fp)
   1ad28:	e0bffc04 	addi	r2,fp,-16
   1ad2c:	1809883a 	mov	r4,r3
   1ad30:	100b883a 	mov	r5,r2
   1ad34:	0018dd00 	call	18dd0 <get_cluster_flag>
   1ad38:	10000c26 	beq	r2,zero,1ad6c <find_file_in_directory+0x434>
				{
					// The directory needs to be expanded to store more files.
					if ((new_cluster & 0x0000fff8) == 0x0000fff8)
   1ad3c:	e0bffc0b 	ldhu	r2,-16(fp)
   1ad40:	10bfffcc 	andi	r2,r2,65535
   1ad44:	10fffe0c 	andi	r3,r2,65528
   1ad48:	00bffe14 	movui	r2,65528
   1ad4c:	1880021e 	bne	r3,r2,1ad58 <find_file_in_directory+0x420>
					{
						return false;
   1ad50:	0005883a 	mov	r2,zero
   1ad54:	00000d06 	br	1ad8c <find_file_in_directory+0x454>
					}
					cluster = (new_cluster & 0x0000fff8);
   1ad58:	e0bffc0b 	ldhu	r2,-16(fp)
   1ad5c:	10bfffcc 	andi	r2,r2,65535
   1ad60:	10bffe0c 	andi	r2,r2,65528
   1ad64:	e0bfed15 	stw	r2,-76(fp)
   1ad68:	00000206 	br	1ad74 <find_file_in_directory+0x43c>
				}
				else
                {
                    // Directory path is invalid.                 
                    return false;
   1ad6c:	0005883a 	mov	r2,zero
   1ad70:	00000606 	br	1ad8c <find_file_in_directory+0x454>
                }
            }              
        } while ((cluster < 0x0000fff8) && (result == false));
   1ad74:	e0bfed17 	ldw	r2,-76(fp)
   1ad78:	00fffdd4 	movui	r3,65527
   1ad7c:	18800216 	blt	r3,r2,1ad88 <find_file_in_directory+0x450>
   1ad80:	e0bfef17 	ldw	r2,-68(fp)
   1ad84:	103f9b26 	beq	r2,zero,1abf4 <__alt_mem_Flash_flash_data+0xf401abf4>
    }
    
    return result;   
   1ad88:	e0bfef17 	ldw	r2,-68(fp)
}
   1ad8c:	e037883a 	mov	sp,fp
   1ad90:	dfc00117 	ldw	ra,4(sp)
   1ad94:	df000017 	ldw	fp,0(sp)
   1ad98:	dec00204 	addi	sp,sp,8
   1ad9c:	f800283a 	ret

0001ada0 <find_first_empty_cluster>:


bool find_first_empty_cluster(unsigned int *cluster_number)
// Find the first empty cluster. It will be marked by a 0 entry in the File Allocation Table.
{
   1ada0:	defff504 	addi	sp,sp,-44
   1ada4:	dfc00a15 	stw	ra,40(sp)
   1ada8:	df000915 	stw	fp,36(sp)
   1adac:	df000904 	addi	fp,sp,36
   1adb0:	e13fff15 	stw	r4,-4(fp)
    unsigned int sector = boot_sector_data.first_fat_sector_offset;
   1adb4:	008000b4 	movhi	r2,2
   1adb8:	109fdf04 	addi	r2,r2,32636
   1adbc:	10801117 	ldw	r2,68(r2)
   1adc0:	e0bff715 	stw	r2,-36(fp)
    unsigned int cluster_index = 2;
   1adc4:	00800084 	movi	r2,2
   1adc8:	e0bff815 	stw	r2,-32(fp)
    short int cluster = -1;
   1adcc:	00bfffc4 	movi	r2,-1
   1add0:	e0bff90d 	sth	r2,-28(fp)
    bool result = false;
   1add4:	e03ffa15 	stw	zero,-24(fp)
	unsigned max_cluster_index = 0;
   1add8:	e03ffb15 	stw	zero,-20(fp)
	unsigned int non_data_sectors = boot_sector_data.data_sector_offset;
   1addc:	008000b4 	movhi	r2,2
   1ade0:	109fdf04 	addi	r2,r2,32636
   1ade4:	10801417 	ldw	r2,80(r2)
   1ade8:	e0bffc15 	stw	r2,-16(fp)
	unsigned int less_than_32 = boot_sector_data.number_of_sectors_in_partition;
   1adec:	008000b4 	movhi	r2,2
   1adf0:	109fdf04 	addi	r2,r2,32636
   1adf4:	1080058b 	ldhu	r2,22(r2)
   1adf8:	10bfffcc 	andi	r2,r2,65535
   1adfc:	e0bffd15 	stw	r2,-12(fp)
	unsigned int greater_than_32 = boot_sector_data.total_sector_count_if_above_32MB;
   1ae00:	008000b4 	movhi	r2,2
   1ae04:	109fdf04 	addi	r2,r2,32636
   1ae08:	10800917 	ldw	r2,36(r2)
   1ae0c:	e0bffe15 	stw	r2,-8(fp)

	if (less_than_32 > greater_than_32)
   1ae10:	e0bffd17 	ldw	r2,-12(fp)
   1ae14:	e0fffe17 	ldw	r3,-8(fp)
   1ae18:	18800b2e 	bgeu	r3,r2,1ae48 <find_first_empty_cluster+0xa8>
	{
		max_cluster_index = ((less_than_32 - non_data_sectors) / boot_sector_data.sectors_per_cluster) + 1;
   1ae1c:	e0fffd17 	ldw	r3,-12(fp)
   1ae20:	e0bffc17 	ldw	r2,-16(fp)
   1ae24:	1887c83a 	sub	r3,r3,r2
   1ae28:	008000b4 	movhi	r2,2
   1ae2c:	109fdf04 	addi	r2,r2,32636
   1ae30:	10800383 	ldbu	r2,14(r2)
   1ae34:	10803fcc 	andi	r2,r2,255
   1ae38:	1885203a 	divu	r2,r3,r2
   1ae3c:	10800044 	addi	r2,r2,1
   1ae40:	e0bffb15 	stw	r2,-20(fp)
   1ae44:	00000a06 	br	1ae70 <find_first_empty_cluster+0xd0>
	}
	else
	{
		max_cluster_index = ((greater_than_32 - non_data_sectors) / boot_sector_data.sectors_per_cluster) + 1;
   1ae48:	e0fffe17 	ldw	r3,-8(fp)
   1ae4c:	e0bffc17 	ldw	r2,-16(fp)
   1ae50:	1887c83a 	sub	r3,r3,r2
   1ae54:	008000b4 	movhi	r2,2
   1ae58:	109fdf04 	addi	r2,r2,32636
   1ae5c:	10800383 	ldbu	r2,14(r2)
   1ae60:	10803fcc 	andi	r2,r2,255
   1ae64:	1885203a 	divu	r2,r3,r2
   1ae68:	10800044 	addi	r2,r2,1
   1ae6c:	e0bffb15 	stw	r2,-20(fp)
	}
    // Find an empty cluster for the file.
    while (sector != boot_sector_data.second_fat_sector_offset)
   1ae70:	00001f06 	br	1aef0 <find_first_empty_cluster+0x150>
    {
        if (Read_Sector_Data( sector, fat_partition_offset_in_512_byte_sectors))
   1ae74:	e0fff717 	ldw	r3,-36(fp)
   1ae78:	d0a81817 	ldw	r2,-24480(gp)
   1ae7c:	1809883a 	mov	r4,r3
   1ae80:	100b883a 	mov	r5,r2
   1ae84:	0018cf80 	call	18cf8 <Read_Sector_Data>
   1ae88:	10001326 	beq	r2,zero,1aed8 <find_first_empty_cluster+0x138>
        {
            do {
                cluster = ((unsigned short int) IORD_16DIRECT(device_pointer->base, 2*(cluster_index % 256)));
   1ae8c:	e0bff817 	ldw	r2,-32(fp)
   1ae90:	10803fcc 	andi	r2,r2,255
   1ae94:	1085883a 	add	r2,r2,r2
   1ae98:	1007883a 	mov	r3,r2
   1ae9c:	d0a81a17 	ldw	r2,-24472(gp)
   1aea0:	10800a17 	ldw	r2,40(r2)
   1aea4:	1885883a 	add	r2,r3,r2
   1aea8:	1080002b 	ldhuio	r2,0(r2)
   1aeac:	10bfffcc 	andi	r2,r2,65535
   1aeb0:	e0bff90d 	sth	r2,-28(fp)
                if (cluster == 0)
   1aeb4:	e0bff90f 	ldh	r2,-28(fp)
   1aeb8:	1000011e 	bne	r2,zero,1aec0 <find_first_empty_cluster+0x120>
                {
                    // Free cluster found.
                    break;
   1aebc:	00000606 	br	1aed8 <find_first_empty_cluster+0x138>
                }
                else
                {
                    cluster_index++;
   1aec0:	e0bff817 	ldw	r2,-32(fp)
   1aec4:	10800044 	addi	r2,r2,1
   1aec8:	e0bff815 	stw	r2,-32(fp)
                } 
            } while ((cluster_index % 256) != 0);
   1aecc:	e0bff817 	ldw	r2,-32(fp)
   1aed0:	10803fcc 	andi	r2,r2,255
   1aed4:	103fed1e 	bne	r2,zero,1ae8c <__alt_mem_Flash_flash_data+0xf401ae8c>
        }
        if (cluster == 0)
   1aed8:	e0bff90f 	ldh	r2,-28(fp)
   1aedc:	1000011e 	bne	r2,zero,1aee4 <find_first_empty_cluster+0x144>
        {
            break;
   1aee0:	00000806 	br	1af04 <find_first_empty_cluster+0x164>
        }
        sector++;
   1aee4:	e0bff717 	ldw	r2,-36(fp)
   1aee8:	10800044 	addi	r2,r2,1
   1aeec:	e0bff715 	stw	r2,-36(fp)
	else
	{
		max_cluster_index = ((greater_than_32 - non_data_sectors) / boot_sector_data.sectors_per_cluster) + 1;
	}
    // Find an empty cluster for the file.
    while (sector != boot_sector_data.second_fat_sector_offset)
   1aef0:	008000b4 	movhi	r2,2
   1aef4:	109fdf04 	addi	r2,r2,32636
   1aef8:	10c01217 	ldw	r3,72(r2)
   1aefc:	e0bff717 	ldw	r2,-36(fp)
   1af00:	18bfdc1e 	bne	r3,r2,1ae74 <__alt_mem_Flash_flash_data+0xf401ae74>
        {
            break;
        }
        sector++;
    }
    if ((cluster == 0) && (cluster <= max_cluster_index))
   1af04:	e0bff90f 	ldh	r2,-28(fp)
   1af08:	1000081e 	bne	r2,zero,1af2c <find_first_empty_cluster+0x18c>
   1af0c:	e0bff90f 	ldh	r2,-28(fp)
   1af10:	e0fffb17 	ldw	r3,-20(fp)
   1af14:	18800536 	bltu	r3,r2,1af2c <find_first_empty_cluster+0x18c>
    {
        *cluster_number = cluster_index;
   1af18:	e0bfff17 	ldw	r2,-4(fp)
   1af1c:	e0fff817 	ldw	r3,-32(fp)
   1af20:	10c00015 	stw	r3,0(r2)
		result = true;
   1af24:	00800044 	movi	r2,1
   1af28:	e0bffa15 	stw	r2,-24(fp)
    }
    return result;
   1af2c:	e0bffa17 	ldw	r2,-24(fp)
}
   1af30:	e037883a 	mov	sp,fp
   1af34:	dfc00117 	ldw	ra,4(sp)
   1af38:	df000017 	ldw	fp,0(sp)
   1af3c:	dec00204 	addi	sp,sp,8
   1af40:	f800283a 	ret

0001af44 <find_first_empty_record_in_a_subdirectory>:


int find_first_empty_record_in_a_subdirectory(int start_cluster_index)
// Search for a free spot in a subdirectory. Return an encoded location for the file record.
{
   1af44:	defff604 	addi	sp,sp,-40
   1af48:	dfc00915 	stw	ra,36(sp)
   1af4c:	df000815 	stw	fp,32(sp)
   1af50:	df000804 	addi	fp,sp,32
   1af54:	e13fff15 	stw	r4,-4(fp)
    int result = -1;
   1af58:	00bfffc4 	movi	r2,-1
   1af5c:	e0bff815 	stw	r2,-32(fp)
    int cluster = start_cluster_index;
   1af60:	e0bfff17 	ldw	r2,-4(fp)
   1af64:	e0bff915 	stw	r2,-28(fp)
    do {
        int start_sector = ( cluster - 2 ) * ( boot_sector_data.sectors_per_cluster ) + boot_sector_data.data_sector_offset;
   1af68:	e0bff917 	ldw	r2,-28(fp)
   1af6c:	10ffff84 	addi	r3,r2,-2
   1af70:	008000b4 	movhi	r2,2
   1af74:	109fdf04 	addi	r2,r2,32636
   1af78:	10800383 	ldbu	r2,14(r2)
   1af7c:	10803fcc 	andi	r2,r2,255
   1af80:	1885383a 	mul	r2,r3,r2
   1af84:	1007883a 	mov	r3,r2
   1af88:	008000b4 	movhi	r2,2
   1af8c:	109fdf04 	addi	r2,r2,32636
   1af90:	10801417 	ldw	r2,80(r2)
   1af94:	1885883a 	add	r2,r3,r2
   1af98:	e0bffc15 	stw	r2,-16(fp)
        int sector_index;
        
        for (sector_index = 0; sector_index < boot_sector_data.sectors_per_cluster; sector_index++)
   1af9c:	e03ffa15 	stw	zero,-24(fp)
   1afa0:	00002e06 	br	1b05c <find_first_empty_record_in_a_subdirectory+0x118>
        {
            if (Read_Sector_Data(sector_index + start_sector, fat_partition_offset_in_512_byte_sectors))
   1afa4:	e0fffa17 	ldw	r3,-24(fp)
   1afa8:	e0bffc17 	ldw	r2,-16(fp)
   1afac:	1887883a 	add	r3,r3,r2
   1afb0:	d0a81817 	ldw	r2,-24480(gp)
   1afb4:	1809883a 	mov	r4,r3
   1afb8:	100b883a 	mov	r5,r2
   1afbc:	0018cf80 	call	18cf8 <Read_Sector_Data>
   1afc0:	10002226 	beq	r2,zero,1b04c <find_first_empty_record_in_a_subdirectory+0x108>
            {
                int file_counter;
                
                for (file_counter = 0; file_counter < 16; file_counter++)
   1afc4:	e03ffb15 	stw	zero,-20(fp)
   1afc8:	00001c06 	br	1b03c <find_first_empty_record_in_a_subdirectory+0xf8>
                {
                    unsigned short int leading_char;
                    
                    // Read file record.
                    leading_char = ((unsigned char) IORD_8DIRECT(device_pointer->base, file_counter*32));
   1afcc:	e0bffb17 	ldw	r2,-20(fp)
   1afd0:	1004917a 	slli	r2,r2,5
   1afd4:	1007883a 	mov	r3,r2
   1afd8:	d0a81a17 	ldw	r2,-24472(gp)
   1afdc:	10800a17 	ldw	r2,40(r2)
   1afe0:	1885883a 	add	r2,r3,r2
   1afe4:	10800023 	ldbuio	r2,0(r2)
   1afe8:	10803fcc 	andi	r2,r2,255
   1afec:	10803fcc 	andi	r2,r2,255
   1aff0:	e0bffd0d 	sth	r2,-12(fp)
                    if ((leading_char == 0x00e5) || (leading_char == 0))
   1aff4:	e0bffd0b 	ldhu	r2,-12(fp)
   1aff8:	10803960 	cmpeqi	r2,r2,229
   1affc:	1000021e 	bne	r2,zero,1b008 <find_first_empty_record_in_a_subdirectory+0xc4>
   1b000:	e0bffd0b 	ldhu	r2,-12(fp)
   1b004:	10000a1e 	bne	r2,zero,1b030 <find_first_empty_record_in_a_subdirectory+0xec>
                    {
                        result = (cluster) | ((sector_index*16 + file_counter) << 16);
   1b008:	e0bffa17 	ldw	r2,-24(fp)
   1b00c:	1006913a 	slli	r3,r2,4
   1b010:	e0bffb17 	ldw	r2,-20(fp)
   1b014:	1885883a 	add	r2,r3,r2
   1b018:	1006943a 	slli	r3,r2,16
   1b01c:	e0bff917 	ldw	r2,-28(fp)
   1b020:	1884b03a 	or	r2,r3,r2
   1b024:	e0bff815 	stw	r2,-32(fp)
                        return result;
   1b028:	e0bff817 	ldw	r2,-32(fp)
   1b02c:	00005306 	br	1b17c <find_first_empty_record_in_a_subdirectory+0x238>
        {
            if (Read_Sector_Data(sector_index + start_sector, fat_partition_offset_in_512_byte_sectors))
            {
                int file_counter;
                
                for (file_counter = 0; file_counter < 16; file_counter++)
   1b030:	e0bffb17 	ldw	r2,-20(fp)
   1b034:	10800044 	addi	r2,r2,1
   1b038:	e0bffb15 	stw	r2,-20(fp)
   1b03c:	e0bffb17 	ldw	r2,-20(fp)
   1b040:	10800410 	cmplti	r2,r2,16
   1b044:	103fe11e 	bne	r2,zero,1afcc <__alt_mem_Flash_flash_data+0xf401afcc>
   1b048:	00000106 	br	1b050 <find_first_empty_record_in_a_subdirectory+0x10c>
                    }
                }
            }
            else
            {
                break;
   1b04c:	00000906 	br	1b074 <find_first_empty_record_in_a_subdirectory+0x130>
    int cluster = start_cluster_index;
    do {
        int start_sector = ( cluster - 2 ) * ( boot_sector_data.sectors_per_cluster ) + boot_sector_data.data_sector_offset;
        int sector_index;
        
        for (sector_index = 0; sector_index < boot_sector_data.sectors_per_cluster; sector_index++)
   1b050:	e0bffa17 	ldw	r2,-24(fp)
   1b054:	10800044 	addi	r2,r2,1
   1b058:	e0bffa15 	stw	r2,-24(fp)
   1b05c:	008000b4 	movhi	r2,2
   1b060:	109fdf04 	addi	r2,r2,32636
   1b064:	10800383 	ldbu	r2,14(r2)
   1b068:	10803fcc 	andi	r2,r2,255
   1b06c:	e0fffa17 	ldw	r3,-24(fp)
   1b070:	18bfcc16 	blt	r3,r2,1afa4 <__alt_mem_Flash_flash_data+0xf401afa4>
                break;
            }
        }
        // If this is the end of the cluster and the file has not been found, then see if there is another cluster
        // that holds data for the current directory.
        if (result < 0)
   1b074:	e0bff817 	ldw	r2,-32(fp)
   1b078:	1000390e 	bge	r2,zero,1b160 <find_first_empty_record_in_a_subdirectory+0x21c>
        {
			unsigned short int new_cluster;
			if (get_cluster_flag(cluster, &new_cluster))
   1b07c:	e0fff917 	ldw	r3,-28(fp)
   1b080:	e0bffd84 	addi	r2,fp,-10
   1b084:	1809883a 	mov	r4,r3
   1b088:	100b883a 	mov	r5,r2
   1b08c:	0018dd00 	call	18dd0 <get_cluster_flag>
   1b090:	10003126 	beq	r2,zero,1b158 <find_first_empty_record_in_a_subdirectory+0x214>
			{
                // The directory needs to be expanded to store more files.
				if ((new_cluster & 0x0000fff8) == 0x0000fff8)
   1b094:	e0bffd8b 	ldhu	r2,-10(fp)
   1b098:	10bfffcc 	andi	r2,r2,65535
   1b09c:	10fffe0c 	andi	r3,r2,65528
   1b0a0:	00bffe14 	movui	r2,65528
   1b0a4:	18802e1e 	bne	r3,r2,1b160 <find_first_empty_record_in_a_subdirectory+0x21c>
				{
					unsigned int new_dir_cluster; 
					if (find_first_empty_cluster(&new_dir_cluster))
   1b0a8:	e0bffe04 	addi	r2,fp,-8
   1b0ac:	1009883a 	mov	r4,r2
   1b0b0:	001ada00 	call	1ada0 <find_first_empty_cluster>
   1b0b4:	10002326 	beq	r2,zero,1b144 <find_first_empty_record_in_a_subdirectory+0x200>
					{
						// Add the new cluster to the linked list of the given directory.
						if (mark_cluster(cluster, ((short int) (new_dir_cluster)), true) &&
   1b0b8:	e0fff917 	ldw	r3,-28(fp)
   1b0bc:	e0bffe17 	ldw	r2,-8(fp)
   1b0c0:	10bfffcc 	andi	r2,r2,65535
   1b0c4:	10a0001c 	xori	r2,r2,32768
   1b0c8:	10a00004 	addi	r2,r2,-32768
   1b0cc:	1809883a 	mov	r4,r3
   1b0d0:	100b883a 	mov	r5,r2
   1b0d4:	01800044 	movi	r6,1
   1b0d8:	0018e840 	call	18e84 <mark_cluster>
   1b0dc:	10001926 	beq	r2,zero,1b144 <find_first_empty_record_in_a_subdirectory+0x200>
   1b0e0:	e0bffe17 	ldw	r2,-8(fp)
							mark_cluster(new_dir_cluster, ((short int) (0xffff)), true) &&
   1b0e4:	1009883a 	mov	r4,r2
   1b0e8:	017fffc4 	movi	r5,-1
   1b0ec:	01800044 	movi	r6,1
   1b0f0:	0018e840 	call	18e84 <mark_cluster>
				{
					unsigned int new_dir_cluster; 
					if (find_first_empty_cluster(&new_dir_cluster))
					{
						// Add the new cluster to the linked list of the given directory.
						if (mark_cluster(cluster, ((short int) (new_dir_cluster)), true) &&
   1b0f4:	10001326 	beq	r2,zero,1b144 <find_first_empty_record_in_a_subdirectory+0x200>
							mark_cluster(new_dir_cluster, ((short int) (0xffff)), true) &&
							mark_cluster(cluster, ((short int) (new_dir_cluster)), false) &&
   1b0f8:	e0fff917 	ldw	r3,-28(fp)
   1b0fc:	e0bffe17 	ldw	r2,-8(fp)
   1b100:	10bfffcc 	andi	r2,r2,65535
   1b104:	10a0001c 	xori	r2,r2,32768
   1b108:	10a00004 	addi	r2,r2,-32768
   1b10c:	1809883a 	mov	r4,r3
   1b110:	100b883a 	mov	r5,r2
   1b114:	000d883a 	mov	r6,zero
   1b118:	0018e840 	call	18e84 <mark_cluster>
					unsigned int new_dir_cluster; 
					if (find_first_empty_cluster(&new_dir_cluster))
					{
						// Add the new cluster to the linked list of the given directory.
						if (mark_cluster(cluster, ((short int) (new_dir_cluster)), true) &&
							mark_cluster(new_dir_cluster, ((short int) (0xffff)), true) &&
   1b11c:	10000926 	beq	r2,zero,1b144 <find_first_empty_record_in_a_subdirectory+0x200>
							mark_cluster(cluster, ((short int) (new_dir_cluster)), false) &&
   1b120:	e0bffe17 	ldw	r2,-8(fp)
							mark_cluster(new_dir_cluster, ((short int) (0xffff)), false))
   1b124:	1009883a 	mov	r4,r2
   1b128:	017fffc4 	movi	r5,-1
   1b12c:	000d883a 	mov	r6,zero
   1b130:	0018e840 	call	18e84 <mark_cluster>
					if (find_first_empty_cluster(&new_dir_cluster))
					{
						// Add the new cluster to the linked list of the given directory.
						if (mark_cluster(cluster, ((short int) (new_dir_cluster)), true) &&
							mark_cluster(new_dir_cluster, ((short int) (0xffff)), true) &&
							mark_cluster(cluster, ((short int) (new_dir_cluster)), false) &&
   1b134:	10000326 	beq	r2,zero,1b144 <find_first_empty_record_in_a_subdirectory+0x200>
							mark_cluster(new_dir_cluster, ((short int) (0xffff)), false))
						{
							Save_Modified_Sector();
   1b138:	0018cac0 	call	18cac <Save_Modified_Sector>
							// The new file will begin at the first entry of the directory.
							result = new_dir_cluster;                           
   1b13c:	e0bffe17 	ldw	r2,-8(fp)
   1b140:	e0bff815 	stw	r2,-32(fp)
						}
					}
					cluster = (new_cluster & 0x0000fff8);
   1b144:	e0bffd8b 	ldhu	r2,-10(fp)
   1b148:	10bfffcc 	andi	r2,r2,65535
   1b14c:	10bffe0c 	andi	r2,r2,65528
   1b150:	e0bff915 	stw	r2,-28(fp)
   1b154:	00000206 	br	1b160 <find_first_empty_record_in_a_subdirectory+0x21c>
				}
			}
			else
			{
				// Error encountered.                 
				result = -1;
   1b158:	00bfffc4 	movi	r2,-1
   1b15c:	e0bff815 	stw	r2,-32(fp)
			}
        }              
    } while ((cluster < 0x0000fff8) && (result == -1)); 
   1b160:	e0bff917 	ldw	r2,-28(fp)
   1b164:	00fffdd4 	movui	r3,65527
   1b168:	18800316 	blt	r3,r2,1b178 <find_first_empty_record_in_a_subdirectory+0x234>
   1b16c:	e0bff817 	ldw	r2,-32(fp)
   1b170:	10bfffe0 	cmpeqi	r2,r2,-1
   1b174:	103f7c1e 	bne	r2,zero,1af68 <__alt_mem_Flash_flash_data+0xf401af68>
    return result; 
   1b178:	e0bff817 	ldw	r2,-32(fp)
}
   1b17c:	e037883a 	mov	sp,fp
   1b180:	dfc00117 	ldw	ra,4(sp)
   1b184:	df000017 	ldw	fp,0(sp)
   1b188:	dec00204 	addi	sp,sp,8
   1b18c:	f800283a 	ret

0001b190 <find_first_empty_record_in_root_directory>:


int find_first_empty_record_in_root_directory()
// Find a first unused record location to use. Return -1 if none is found.
{
   1b190:	defff904 	addi	sp,sp,-28
   1b194:	dfc00615 	stw	ra,24(sp)
   1b198:	df000515 	stw	fp,20(sp)
   1b19c:	df000504 	addi	fp,sp,20
    int max_root_dir_sectors = ((32*boot_sector_data.max_number_of_dir_entires) / boot_sector_data.sector_size_in_bytes);
   1b1a0:	008000b4 	movhi	r2,2
   1b1a4:	109fdf04 	addi	r2,r2,32636
   1b1a8:	1080050b 	ldhu	r2,20(r2)
   1b1ac:	10bfffcc 	andi	r2,r2,65535
   1b1b0:	1006917a 	slli	r3,r2,5
   1b1b4:	008000b4 	movhi	r2,2
   1b1b8:	109fdf04 	addi	r2,r2,32636
   1b1bc:	1080030b 	ldhu	r2,12(r2)
   1b1c0:	10bfffcc 	andi	r2,r2,65535
   1b1c4:	1885283a 	div	r2,r3,r2
   1b1c8:	e0bffd15 	stw	r2,-12(fp)
    int sector_index;
    int result = -1;
   1b1cc:	00bfffc4 	movi	r2,-1
   1b1d0:	e0bffe15 	stw	r2,-8(fp)
    
    for (sector_index = 0; sector_index < max_root_dir_sectors; sector_index++)
   1b1d4:	e03ffb15 	stw	zero,-20(fp)
   1b1d8:	00002f06 	br	1b298 <find_first_empty_record_in_root_directory+0x108>
    {
        if (Read_Sector_Data(   sector_index + boot_sector_data.root_directory_sector_offset,
   1b1dc:	008000b4 	movhi	r2,2
   1b1e0:	109fdf04 	addi	r2,r2,32636
   1b1e4:	10c01317 	ldw	r3,76(r2)
   1b1e8:	e0bffb17 	ldw	r2,-20(fp)
   1b1ec:	1885883a 	add	r2,r3,r2
   1b1f0:	1007883a 	mov	r3,r2
   1b1f4:	d0a81817 	ldw	r2,-24480(gp)
   1b1f8:	1809883a 	mov	r4,r3
   1b1fc:	100b883a 	mov	r5,r2
   1b200:	0018cf80 	call	18cf8 <Read_Sector_Data>
   1b204:	10002026 	beq	r2,zero,1b288 <find_first_empty_record_in_root_directory+0xf8>
                                fat_partition_offset_in_512_byte_sectors))
        {
            int file_counter;
            
            for (file_counter = 0; file_counter < 16; file_counter++)
   1b208:	e03ffc15 	stw	zero,-16(fp)
   1b20c:	00001a06 	br	1b278 <find_first_empty_record_in_root_directory+0xe8>
            {
                unsigned short int leading_char;
                
                // Read first character of the file record.
                leading_char = ((unsigned char) IORD_8DIRECT(device_pointer->base, file_counter*32));
   1b210:	e0bffc17 	ldw	r2,-16(fp)
   1b214:	1004917a 	slli	r2,r2,5
   1b218:	1007883a 	mov	r3,r2
   1b21c:	d0a81a17 	ldw	r2,-24472(gp)
   1b220:	10800a17 	ldw	r2,40(r2)
   1b224:	1885883a 	add	r2,r3,r2
   1b228:	10800023 	ldbuio	r2,0(r2)
   1b22c:	10803fcc 	andi	r2,r2,255
   1b230:	10803fcc 	andi	r2,r2,255
   1b234:	e0bfff0d 	sth	r2,-4(fp)
                if ((leading_char == 0x00e5) || (leading_char == 0))
   1b238:	e0bfff0b 	ldhu	r2,-4(fp)
   1b23c:	10803960 	cmpeqi	r2,r2,229
   1b240:	1000021e 	bne	r2,zero,1b24c <find_first_empty_record_in_root_directory+0xbc>
   1b244:	e0bfff0b 	ldhu	r2,-4(fp)
   1b248:	1000081e 	bne	r2,zero,1b26c <find_first_empty_record_in_root_directory+0xdc>
                {
                    result = (sector_index*16 + file_counter) << 16;
   1b24c:	e0bffb17 	ldw	r2,-20(fp)
   1b250:	1006913a 	slli	r3,r2,4
   1b254:	e0bffc17 	ldw	r2,-16(fp)
   1b258:	1885883a 	add	r2,r3,r2
   1b25c:	1004943a 	slli	r2,r2,16
   1b260:	e0bffe15 	stw	r2,-8(fp)
                    return result;
   1b264:	e0bffe17 	ldw	r2,-8(fp)
   1b268:	00000f06 	br	1b2a8 <find_first_empty_record_in_root_directory+0x118>
        if (Read_Sector_Data(   sector_index + boot_sector_data.root_directory_sector_offset,
                                fat_partition_offset_in_512_byte_sectors))
        {
            int file_counter;
            
            for (file_counter = 0; file_counter < 16; file_counter++)
   1b26c:	e0bffc17 	ldw	r2,-16(fp)
   1b270:	10800044 	addi	r2,r2,1
   1b274:	e0bffc15 	stw	r2,-16(fp)
   1b278:	e0bffc17 	ldw	r2,-16(fp)
   1b27c:	10800410 	cmplti	r2,r2,16
   1b280:	103fe31e 	bne	r2,zero,1b210 <__alt_mem_Flash_flash_data+0xf401b210>
   1b284:	00000106 	br	1b28c <find_first_empty_record_in_root_directory+0xfc>
                }
            }
        }
        else
        {
            break;
   1b288:	00000606 	br	1b2a4 <find_first_empty_record_in_root_directory+0x114>
{
    int max_root_dir_sectors = ((32*boot_sector_data.max_number_of_dir_entires) / boot_sector_data.sector_size_in_bytes);
    int sector_index;
    int result = -1;
    
    for (sector_index = 0; sector_index < max_root_dir_sectors; sector_index++)
   1b28c:	e0bffb17 	ldw	r2,-20(fp)
   1b290:	10800044 	addi	r2,r2,1
   1b294:	e0bffb15 	stw	r2,-20(fp)
   1b298:	e0fffb17 	ldw	r3,-20(fp)
   1b29c:	e0bffd17 	ldw	r2,-12(fp)
   1b2a0:	18bfce16 	blt	r3,r2,1b1dc <__alt_mem_Flash_flash_data+0xf401b1dc>
        else
        {
            break;
        }
    }
    return result;
   1b2a4:	e0bffe17 	ldw	r2,-8(fp)
}
   1b2a8:	e037883a 	mov	sp,fp
   1b2ac:	dfc00117 	ldw	ra,4(sp)
   1b2b0:	df000017 	ldw	fp,0(sp)
   1b2b4:	dec00204 	addi	sp,sp,8
   1b2b8:	f800283a 	ret

0001b2bc <convert_filename_to_name_extension>:

void convert_filename_to_name_extension(char *filename, char *name, char *extension)
// This function converts the file name into a name . extension format.
{
   1b2bc:	defffa04 	addi	sp,sp,-24
   1b2c0:	df000515 	stw	fp,20(sp)
   1b2c4:	df000504 	addi	fp,sp,20
   1b2c8:	e13ffd15 	stw	r4,-12(fp)
   1b2cc:	e17ffe15 	stw	r5,-8(fp)
   1b2d0:	e1bfff15 	stw	r6,-4(fp)
    int counter;
    int local = 0;
   1b2d4:	e03ffc15 	stw	zero,-16(fp)
    
    for(counter = 0; counter < 8; counter++)
   1b2d8:	e03ffb15 	stw	zero,-20(fp)
   1b2dc:	00002506 	br	1b374 <convert_filename_to_name_extension+0xb8>
    {
        if (filename[local] != '.')
   1b2e0:	e0bffc17 	ldw	r2,-16(fp)
   1b2e4:	e0fffd17 	ldw	r3,-12(fp)
   1b2e8:	1885883a 	add	r2,r3,r2
   1b2ec:	10800003 	ldbu	r2,0(r2)
   1b2f0:	10803fcc 	andi	r2,r2,255
   1b2f4:	1080201c 	xori	r2,r2,128
   1b2f8:	10bfe004 	addi	r2,r2,-128
   1b2fc:	10800ba0 	cmpeqi	r2,r2,46
   1b300:	1000141e 	bne	r2,zero,1b354 <convert_filename_to_name_extension+0x98>
        {
            name[counter] = filename[local];
   1b304:	e0bffb17 	ldw	r2,-20(fp)
   1b308:	e0fffe17 	ldw	r3,-8(fp)
   1b30c:	1885883a 	add	r2,r3,r2
   1b310:	e0fffc17 	ldw	r3,-16(fp)
   1b314:	e13ffd17 	ldw	r4,-12(fp)
   1b318:	20c7883a 	add	r3,r4,r3
   1b31c:	18c00003 	ldbu	r3,0(r3)
   1b320:	10c00005 	stb	r3,0(r2)
            if (filename[local] != 0) local++;
   1b324:	e0bffc17 	ldw	r2,-16(fp)
   1b328:	e0fffd17 	ldw	r3,-12(fp)
   1b32c:	1885883a 	add	r2,r3,r2
   1b330:	10800003 	ldbu	r2,0(r2)
   1b334:	10803fcc 	andi	r2,r2,255
   1b338:	1080201c 	xori	r2,r2,128
   1b33c:	10bfe004 	addi	r2,r2,-128
   1b340:	10000926 	beq	r2,zero,1b368 <convert_filename_to_name_extension+0xac>
   1b344:	e0bffc17 	ldw	r2,-16(fp)
   1b348:	10800044 	addi	r2,r2,1
   1b34c:	e0bffc15 	stw	r2,-16(fp)
   1b350:	00000506 	br	1b368 <convert_filename_to_name_extension+0xac>
        }
        else
        {
            name[counter] = ' ';
   1b354:	e0bffb17 	ldw	r2,-20(fp)
   1b358:	e0fffe17 	ldw	r3,-8(fp)
   1b35c:	1885883a 	add	r2,r3,r2
   1b360:	00c00804 	movi	r3,32
   1b364:	10c00005 	stb	r3,0(r2)
// This function converts the file name into a name . extension format.
{
    int counter;
    int local = 0;
    
    for(counter = 0; counter < 8; counter++)
   1b368:	e0bffb17 	ldw	r2,-20(fp)
   1b36c:	10800044 	addi	r2,r2,1
   1b370:	e0bffb15 	stw	r2,-20(fp)
   1b374:	e0bffb17 	ldw	r2,-20(fp)
   1b378:	10800210 	cmplti	r2,r2,8
   1b37c:	103fd81e 	bne	r2,zero,1b2e0 <__alt_mem_Flash_flash_data+0xf401b2e0>
        else
        {
            name[counter] = ' ';
        }
    }
    if (filename[local] == '.') local++;
   1b380:	e0bffc17 	ldw	r2,-16(fp)
   1b384:	e0fffd17 	ldw	r3,-12(fp)
   1b388:	1885883a 	add	r2,r3,r2
   1b38c:	10800003 	ldbu	r2,0(r2)
   1b390:	10803fcc 	andi	r2,r2,255
   1b394:	1080201c 	xori	r2,r2,128
   1b398:	10bfe004 	addi	r2,r2,-128
   1b39c:	10800b98 	cmpnei	r2,r2,46
   1b3a0:	1000031e 	bne	r2,zero,1b3b0 <convert_filename_to_name_extension+0xf4>
   1b3a4:	e0bffc17 	ldw	r2,-16(fp)
   1b3a8:	10800044 	addi	r2,r2,1
   1b3ac:	e0bffc15 	stw	r2,-16(fp)
    for(counter = 0; counter < 3; counter++)
   1b3b0:	e03ffb15 	stw	zero,-20(fp)
   1b3b4:	00001c06 	br	1b428 <convert_filename_to_name_extension+0x16c>
    {
        if (filename[local] != 0)
   1b3b8:	e0bffc17 	ldw	r2,-16(fp)
   1b3bc:	e0fffd17 	ldw	r3,-12(fp)
   1b3c0:	1885883a 	add	r2,r3,r2
   1b3c4:	10800003 	ldbu	r2,0(r2)
   1b3c8:	10803fcc 	andi	r2,r2,255
   1b3cc:	1080201c 	xori	r2,r2,128
   1b3d0:	10bfe004 	addi	r2,r2,-128
   1b3d4:	10000c26 	beq	r2,zero,1b408 <convert_filename_to_name_extension+0x14c>
        {
            extension[counter] = filename[local];
   1b3d8:	e0bffb17 	ldw	r2,-20(fp)
   1b3dc:	e0ffff17 	ldw	r3,-4(fp)
   1b3e0:	1885883a 	add	r2,r3,r2
   1b3e4:	e0fffc17 	ldw	r3,-16(fp)
   1b3e8:	e13ffd17 	ldw	r4,-12(fp)
   1b3ec:	20c7883a 	add	r3,r4,r3
   1b3f0:	18c00003 	ldbu	r3,0(r3)
   1b3f4:	10c00005 	stb	r3,0(r2)
            local++;
   1b3f8:	e0bffc17 	ldw	r2,-16(fp)
   1b3fc:	10800044 	addi	r2,r2,1
   1b400:	e0bffc15 	stw	r2,-16(fp)
   1b404:	00000506 	br	1b41c <convert_filename_to_name_extension+0x160>
        }
        else
        {
            extension[counter] = ' ';
   1b408:	e0bffb17 	ldw	r2,-20(fp)
   1b40c:	e0ffff17 	ldw	r3,-4(fp)
   1b410:	1885883a 	add	r2,r3,r2
   1b414:	00c00804 	movi	r3,32
   1b418:	10c00005 	stb	r3,0(r2)
        {
            name[counter] = ' ';
        }
    }
    if (filename[local] == '.') local++;
    for(counter = 0; counter < 3; counter++)
   1b41c:	e0bffb17 	ldw	r2,-20(fp)
   1b420:	10800044 	addi	r2,r2,1
   1b424:	e0bffb15 	stw	r2,-20(fp)
   1b428:	e0bffb17 	ldw	r2,-20(fp)
   1b42c:	108000d0 	cmplti	r2,r2,3
   1b430:	103fe11e 	bne	r2,zero,1b3b8 <__alt_mem_Flash_flash_data+0xf401b3b8>
        {
            extension[counter] = ' ';
        }
    }

}
   1b434:	e037883a 	mov	sp,fp
   1b438:	df000017 	ldw	fp,0(sp)
   1b43c:	dec00104 	addi	sp,sp,4
   1b440:	f800283a 	ret

0001b444 <create_file>:

bool create_file(char *name, t_file_record *file_record, t_file_record *home_dir)
// Create a file in a given directory. Expand the directory if needed.
{
   1b444:	defff504 	addi	sp,sp,-44
   1b448:	dfc00a15 	stw	ra,40(sp)
   1b44c:	df000915 	stw	fp,36(sp)
   1b450:	df000904 	addi	fp,sp,36
   1b454:	e13ffd15 	stw	r4,-12(fp)
   1b458:	e17ffe15 	stw	r5,-8(fp)
   1b45c:	e1bfff15 	stw	r6,-4(fp)
    unsigned int cluster_number;
    bool result = false;
   1b460:	e03ff715 	stw	zero,-36(fp)
    
    if (find_first_empty_cluster(&cluster_number))
   1b464:	e0bffc04 	addi	r2,fp,-16
   1b468:	1009883a 	mov	r4,r2
   1b46c:	001ada00 	call	1ada0 <find_first_empty_cluster>
   1b470:	10009f26 	beq	r2,zero,1b6f0 <create_file+0x2ac>
    {
        int record_index;
        
        if (home_dir->file_record_cluster == 0)
   1b474:	e0bfff17 	ldw	r2,-4(fp)
   1b478:	10800a17 	ldw	r2,40(r2)
   1b47c:	1000031e 	bne	r2,zero,1b48c <create_file+0x48>
        {
            // Put a file in the root directory.
            record_index = find_first_empty_record_in_root_directory();
   1b480:	001b1900 	call	1b190 <find_first_empty_record_in_root_directory>
   1b484:	e0bff815 	stw	r2,-32(fp)
   1b488:	00000606 	br	1b4a4 <create_file+0x60>
        }
        else
        {
            // Put a file in a subdirectory.
            record_index = find_first_empty_record_in_a_subdirectory(home_dir->start_cluster_index);           
   1b48c:	e0bfff17 	ldw	r2,-4(fp)
   1b490:	1080058b 	ldhu	r2,22(r2)
   1b494:	10bfffcc 	andi	r2,r2,65535
   1b498:	1009883a 	mov	r4,r2
   1b49c:	001af440 	call	1af44 <find_first_empty_record_in_a_subdirectory>
   1b4a0:	e0bff815 	stw	r2,-32(fp)
        }
        if (record_index >= 0)
   1b4a4:	e0bff817 	ldw	r2,-32(fp)
   1b4a8:	10009116 	blt	r2,zero,1b6f0 <create_file+0x2ac>
        {   
            unsigned int file_record_sector;
            int location = get_dir_divider_location( name );
   1b4ac:	e13ffd17 	ldw	r4,-12(fp)
   1b4b0:	001a0b80 	call	1a0b8 <get_dir_divider_location>
   1b4b4:	e0bff915 	stw	r2,-28(fp)
            int last_dir_separator = 0;
   1b4b8:	e03ffa15 	stw	zero,-24(fp)

            // Skip through all directory separators.
            while (location > 0)
   1b4bc:	00000b06 	br	1b4ec <create_file+0xa8>
            {
                last_dir_separator = last_dir_separator+location+1;
   1b4c0:	e0fffa17 	ldw	r3,-24(fp)
   1b4c4:	e0bff917 	ldw	r2,-28(fp)
   1b4c8:	1885883a 	add	r2,r3,r2
   1b4cc:	10800044 	addi	r2,r2,1
   1b4d0:	e0bffa15 	stw	r2,-24(fp)
                location = get_dir_divider_location( &(name[last_dir_separator]) );
   1b4d4:	e0bffa17 	ldw	r2,-24(fp)
   1b4d8:	e0fffd17 	ldw	r3,-12(fp)
   1b4dc:	1885883a 	add	r2,r3,r2
   1b4e0:	1009883a 	mov	r4,r2
   1b4e4:	001a0b80 	call	1a0b8 <get_dir_divider_location>
   1b4e8:	e0bff915 	stw	r2,-28(fp)
            unsigned int file_record_sector;
            int location = get_dir_divider_location( name );
            int last_dir_separator = 0;

            // Skip through all directory separators.
            while (location > 0)
   1b4ec:	e0bff917 	ldw	r2,-28(fp)
   1b4f0:	00bff316 	blt	zero,r2,1b4c0 <__alt_mem_Flash_flash_data+0xf401b4c0>
            {
                last_dir_separator = last_dir_separator+location+1;
                location = get_dir_divider_location( &(name[last_dir_separator]) );
            }
            
            convert_filename_to_name_extension(&(name[last_dir_separator]), (char *)file_record->name, (char *)file_record->extension);
   1b4f4:	e0bffa17 	ldw	r2,-24(fp)
   1b4f8:	e0fffd17 	ldw	r3,-12(fp)
   1b4fc:	1889883a 	add	r4,r3,r2
   1b500:	e0fffe17 	ldw	r3,-8(fp)
   1b504:	e0bffe17 	ldw	r2,-8(fp)
   1b508:	10800204 	addi	r2,r2,8
   1b50c:	180b883a 	mov	r5,r3
   1b510:	100d883a 	mov	r6,r2
   1b514:	001b2bc0 	call	1b2bc <convert_filename_to_name_extension>
                         
            file_record->attributes = 0;
   1b518:	e0bffe17 	ldw	r2,-8(fp)
   1b51c:	100002c5 	stb	zero,11(r2)
            file_record->create_time = 0;
   1b520:	e0bffe17 	ldw	r2,-8(fp)
   1b524:	1000030d 	sth	zero,12(r2)
            file_record->create_date = 0;
   1b528:	e0bffe17 	ldw	r2,-8(fp)
   1b52c:	1000038d 	sth	zero,14(r2)
            file_record->last_access_date = 0;
   1b530:	e0bffe17 	ldw	r2,-8(fp)
   1b534:	1000040d 	sth	zero,16(r2)
            file_record->last_modified_time = 0;
   1b538:	e0bffe17 	ldw	r2,-8(fp)
   1b53c:	1000048d 	sth	zero,18(r2)
            file_record->last_modified_date = 0;
   1b540:	e0bffe17 	ldw	r2,-8(fp)
   1b544:	1000050d 	sth	zero,20(r2)
            file_record->start_cluster_index = cluster_number;
   1b548:	e0bffc17 	ldw	r2,-16(fp)
   1b54c:	1007883a 	mov	r3,r2
   1b550:	e0bffe17 	ldw	r2,-8(fp)
   1b554:	10c0058d 	sth	r3,22(r2)
            file_record->file_size_in_bytes = 0;
   1b558:	e0bffe17 	ldw	r2,-8(fp)
   1b55c:	10000615 	stw	zero,24(r2)
            file_record->current_cluster_index = cluster_number;
   1b560:	e0fffc17 	ldw	r3,-16(fp)
   1b564:	e0bffe17 	ldw	r2,-8(fp)
   1b568:	10c00715 	stw	r3,28(r2)
            file_record->current_sector_in_cluster = 0;
   1b56c:	e0bffe17 	ldw	r2,-8(fp)
   1b570:	10000815 	stw	zero,32(r2)
            file_record->current_byte_position = 0;
   1b574:	e0bffe17 	ldw	r2,-8(fp)
   1b578:	10000915 	stw	zero,36(r2)
            file_record->file_record_cluster = record_index & 0x0000ffff;
   1b57c:	e0bff817 	ldw	r2,-32(fp)
   1b580:	10ffffcc 	andi	r3,r2,65535
   1b584:	e0bffe17 	ldw	r2,-8(fp)
   1b588:	10c00a15 	stw	r3,40(r2)
            file_record->file_record_sector_in_cluster = ((record_index >> 16) & 0x0000ffff) / 16;
   1b58c:	e0bff817 	ldw	r2,-32(fp)
   1b590:	1004d43a 	srli	r2,r2,16
   1b594:	1000010e 	bge	r2,zero,1b59c <create_file+0x158>
   1b598:	108003c4 	addi	r2,r2,15
   1b59c:	1005d13a 	srai	r2,r2,4
   1b5a0:	1007883a 	mov	r3,r2
   1b5a4:	e0bffe17 	ldw	r2,-8(fp)
   1b5a8:	10c00b15 	stw	r3,44(r2)
            file_record->file_record_offset = (((record_index >> 16) & 0x0000ffff) % 16)*32;   
   1b5ac:	e0bff817 	ldw	r2,-32(fp)
   1b5b0:	1004d43a 	srli	r2,r2,16
   1b5b4:	1007883a 	mov	r3,r2
   1b5b8:	00a00034 	movhi	r2,32768
   1b5bc:	108003c4 	addi	r2,r2,15
   1b5c0:	1884703a 	and	r2,r3,r2
   1b5c4:	1000040e 	bge	r2,zero,1b5d8 <create_file+0x194>
   1b5c8:	10bfffc4 	addi	r2,r2,-1
   1b5cc:	00fffc04 	movi	r3,-16
   1b5d0:	10c4b03a 	or	r2,r2,r3
   1b5d4:	10800044 	addi	r2,r2,1
   1b5d8:	1004917a 	slli	r2,r2,5
   1b5dc:	1007883a 	mov	r3,r2
   1b5e0:	e0bffe17 	ldw	r2,-8(fp)
   1b5e4:	10c00c0d 	sth	r3,48(r2)
            file_record->home_directory_cluster = home_dir->start_cluster_index;
   1b5e8:	e0bfff17 	ldw	r2,-4(fp)
   1b5ec:	1080058b 	ldhu	r2,22(r2)
   1b5f0:	10ffffcc 	andi	r3,r2,65535
   1b5f4:	e0bffe17 	ldw	r2,-8(fp)
   1b5f8:	10c00d15 	stw	r3,52(r2)
            file_record->in_use = true;
   1b5fc:	e0bffe17 	ldw	r2,-8(fp)
   1b600:	00c00044 	movi	r3,1
   1b604:	10c00f15 	stw	r3,60(r2)
            file_record->modified = true;
   1b608:	e0bffe17 	ldw	r2,-8(fp)
   1b60c:	00c00044 	movi	r3,1
   1b610:	10c00e15 	stw	r3,56(r2)
            // Now write the record at the specified location.
            file_record_sector = (file_record->file_record_cluster == 0) ? 
   1b614:	e0bffe17 	ldw	r2,-8(fp)
   1b618:	10800a17 	ldw	r2,40(r2)
                                    (boot_sector_data.root_directory_sector_offset + file_record->file_record_sector_in_cluster):  
   1b61c:	1000071e 	bne	r2,zero,1b63c <create_file+0x1f8>
   1b620:	008000b4 	movhi	r2,2
   1b624:	109fdf04 	addi	r2,r2,32636
   1b628:	10c01317 	ldw	r3,76(r2)
   1b62c:	e0bffe17 	ldw	r2,-8(fp)
   1b630:	10800b17 	ldw	r2,44(r2)
   1b634:	1885883a 	add	r2,r3,r2
   1b638:	00000f06 	br	1b678 <create_file+0x234>
                                    (boot_sector_data.data_sector_offset + (file_record->file_record_cluster-2)*boot_sector_data.sectors_per_cluster +
   1b63c:	008000b4 	movhi	r2,2
   1b640:	109fdf04 	addi	r2,r2,32636
   1b644:	10c01417 	ldw	r3,80(r2)
   1b648:	e0bffe17 	ldw	r2,-8(fp)
   1b64c:	10800a17 	ldw	r2,40(r2)
   1b650:	113fff84 	addi	r4,r2,-2
   1b654:	008000b4 	movhi	r2,2
   1b658:	109fdf04 	addi	r2,r2,32636
   1b65c:	10800383 	ldbu	r2,14(r2)
   1b660:	10803fcc 	andi	r2,r2,255
   1b664:	2085383a 	mul	r2,r4,r2
   1b668:	1887883a 	add	r3,r3,r2
                                     file_record->file_record_sector_in_cluster);
   1b66c:	e0bffe17 	ldw	r2,-8(fp)
   1b670:	10800b17 	ldw	r2,44(r2)
            file_record->home_directory_cluster = home_dir->start_cluster_index;
            file_record->in_use = true;
            file_record->modified = true;
            // Now write the record at the specified location.
            file_record_sector = (file_record->file_record_cluster == 0) ? 
                                    (boot_sector_data.root_directory_sector_offset + file_record->file_record_sector_in_cluster):  
   1b674:	1885883a 	add	r2,r3,r2
            file_record->file_record_offset = (((record_index >> 16) & 0x0000ffff) % 16)*32;   
            file_record->home_directory_cluster = home_dir->start_cluster_index;
            file_record->in_use = true;
            file_record->modified = true;
            // Now write the record at the specified location.
            file_record_sector = (file_record->file_record_cluster == 0) ? 
   1b678:	e0bffb15 	stw	r2,-20(fp)
                                    (boot_sector_data.root_directory_sector_offset + file_record->file_record_sector_in_cluster):  
                                    (boot_sector_data.data_sector_offset + (file_record->file_record_cluster-2)*boot_sector_data.sectors_per_cluster +
                                     file_record->file_record_sector_in_cluster);

			if (Read_Sector_Data(file_record_sector, fat_partition_offset_in_512_byte_sectors))
   1b67c:	e0fffb17 	ldw	r3,-20(fp)
   1b680:	d0a81817 	ldw	r2,-24480(gp)
   1b684:	1809883a 	mov	r4,r3
   1b688:	100b883a 	mov	r5,r2
   1b68c:	0018cf80 	call	18cf8 <Read_Sector_Data>
   1b690:	10001726 	beq	r2,zero,1b6f0 <create_file+0x2ac>
            {
                if (Write_File_Record_At_Offset(file_record->file_record_offset, file_record))
   1b694:	e0bffe17 	ldw	r2,-8(fp)
   1b698:	10800c0b 	ldhu	r2,48(r2)
   1b69c:	10bfffcc 	andi	r2,r2,65535
   1b6a0:	10a0001c 	xori	r2,r2,32768
   1b6a4:	10a00004 	addi	r2,r2,-32768
   1b6a8:	1009883a 	mov	r4,r2
   1b6ac:	e17ffe17 	ldw	r5,-8(fp)
   1b6b0:	001938c0 	call	1938c <Write_File_Record_At_Offset>
   1b6b4:	10000e26 	beq	r2,zero,1b6f0 <create_file+0x2ac>
                {
                    Save_Modified_Sector();
   1b6b8:	0018cac0 	call	18cac <Save_Modified_Sector>
                    // Mark the first cluster of the file as the last cluster at first.
                    mark_cluster(cluster_number, ((short int) (0xffff)), true);
   1b6bc:	e0bffc17 	ldw	r2,-16(fp)
   1b6c0:	1009883a 	mov	r4,r2
   1b6c4:	017fffc4 	movi	r5,-1
   1b6c8:	01800044 	movi	r6,1
   1b6cc:	0018e840 	call	18e84 <mark_cluster>
                    if (mark_cluster(cluster_number, ((short int) (0xffff)), false))
   1b6d0:	e0bffc17 	ldw	r2,-16(fp)
   1b6d4:	1009883a 	mov	r4,r2
   1b6d8:	017fffc4 	movi	r5,-1
   1b6dc:	000d883a 	mov	r6,zero
   1b6e0:	0018e840 	call	18e84 <mark_cluster>
   1b6e4:	10000226 	beq	r2,zero,1b6f0 <create_file+0x2ac>
                    {
                        result = true;
   1b6e8:	00800044 	movi	r2,1
   1b6ec:	e0bff715 	stw	r2,-36(fp)
                }
            }
        }

    }
    return result;           
   1b6f0:	e0bff717 	ldw	r2,-36(fp)
}
   1b6f4:	e037883a 	mov	sp,fp
   1b6f8:	dfc00117 	ldw	ra,4(sp)
   1b6fc:	df000017 	ldw	fp,0(sp)
   1b700:	dec00204 	addi	sp,sp,8
   1b704:	f800283a 	ret

0001b708 <copy_file_record_name_to_string>:


void copy_file_record_name_to_string(t_file_record *file_record, char *file_name)
/* Copy a file name from the file record to a given string */
{
   1b708:	defffb04 	addi	sp,sp,-20
   1b70c:	df000415 	stw	fp,16(sp)
   1b710:	df000404 	addi	fp,sp,16
   1b714:	e13ffe15 	stw	r4,-8(fp)
   1b718:	e17fff15 	stw	r5,-4(fp)
	int index;
	int flength = 0;
   1b71c:	e03ffd15 	stw	zero,-12(fp)

	/* Copy file name.*/
	for (index = 0; index < 8; index++)
   1b720:	e03ffc15 	stw	zero,-16(fp)
   1b724:	00001506 	br	1b77c <copy_file_record_name_to_string+0x74>
	{
		if (file_record->name[index] != ' ')
   1b728:	e0fffe17 	ldw	r3,-8(fp)
   1b72c:	e0bffc17 	ldw	r2,-16(fp)
   1b730:	1885883a 	add	r2,r3,r2
   1b734:	10800003 	ldbu	r2,0(r2)
   1b738:	10803fcc 	andi	r2,r2,255
   1b73c:	10800820 	cmpeqi	r2,r2,32
   1b740:	10000b1e 	bne	r2,zero,1b770 <copy_file_record_name_to_string+0x68>
		{
			file_name[flength] = file_record->name[index];
   1b744:	e0bffd17 	ldw	r2,-12(fp)
   1b748:	e0ffff17 	ldw	r3,-4(fp)
   1b74c:	1885883a 	add	r2,r3,r2
   1b750:	e13ffe17 	ldw	r4,-8(fp)
   1b754:	e0fffc17 	ldw	r3,-16(fp)
   1b758:	20c7883a 	add	r3,r4,r3
   1b75c:	18c00003 	ldbu	r3,0(r3)
   1b760:	10c00005 	stb	r3,0(r2)
			flength = flength + 1;
   1b764:	e0bffd17 	ldw	r2,-12(fp)
   1b768:	10800044 	addi	r2,r2,1
   1b76c:	e0bffd15 	stw	r2,-12(fp)
{
	int index;
	int flength = 0;

	/* Copy file name.*/
	for (index = 0; index < 8; index++)
   1b770:	e0bffc17 	ldw	r2,-16(fp)
   1b774:	10800044 	addi	r2,r2,1
   1b778:	e0bffc15 	stw	r2,-16(fp)
   1b77c:	e0bffc17 	ldw	r2,-16(fp)
   1b780:	10800210 	cmplti	r2,r2,8
   1b784:	103fe81e 	bne	r2,zero,1b728 <__alt_mem_Flash_flash_data+0xf401b728>
		{
			file_name[flength] = file_record->name[index];
			flength = flength + 1;
		}
	}
	if (file_record->extension[0] != ' ')
   1b788:	e0bffe17 	ldw	r2,-8(fp)
   1b78c:	10800203 	ldbu	r2,8(r2)
   1b790:	10803fcc 	andi	r2,r2,255
   1b794:	10800820 	cmpeqi	r2,r2,32
   1b798:	1000241e 	bne	r2,zero,1b82c <copy_file_record_name_to_string+0x124>
	{
		file_name[flength] = '.';
   1b79c:	e0bffd17 	ldw	r2,-12(fp)
   1b7a0:	e0ffff17 	ldw	r3,-4(fp)
   1b7a4:	1885883a 	add	r2,r3,r2
   1b7a8:	00c00b84 	movi	r3,46
   1b7ac:	10c00005 	stb	r3,0(r2)
		flength = flength + 1;
   1b7b0:	e0bffd17 	ldw	r2,-12(fp)
   1b7b4:	10800044 	addi	r2,r2,1
   1b7b8:	e0bffd15 	stw	r2,-12(fp)
		for (index = 0; index < 3; index++)
   1b7bc:	e03ffc15 	stw	zero,-16(fp)
   1b7c0:	00001706 	br	1b820 <copy_file_record_name_to_string+0x118>
		{
			if (file_record->extension[index] != ' ')
   1b7c4:	e0fffe17 	ldw	r3,-8(fp)
   1b7c8:	e0bffc17 	ldw	r2,-16(fp)
   1b7cc:	1885883a 	add	r2,r3,r2
   1b7d0:	10800204 	addi	r2,r2,8
   1b7d4:	10800003 	ldbu	r2,0(r2)
   1b7d8:	10803fcc 	andi	r2,r2,255
   1b7dc:	10800820 	cmpeqi	r2,r2,32
   1b7e0:	10000c1e 	bne	r2,zero,1b814 <copy_file_record_name_to_string+0x10c>
			{
				file_name[flength] = file_record->extension[index];
   1b7e4:	e0bffd17 	ldw	r2,-12(fp)
   1b7e8:	e0ffff17 	ldw	r3,-4(fp)
   1b7ec:	1885883a 	add	r2,r3,r2
   1b7f0:	e13ffe17 	ldw	r4,-8(fp)
   1b7f4:	e0fffc17 	ldw	r3,-16(fp)
   1b7f8:	20c7883a 	add	r3,r4,r3
   1b7fc:	18c00204 	addi	r3,r3,8
   1b800:	18c00003 	ldbu	r3,0(r3)
   1b804:	10c00005 	stb	r3,0(r2)
				flength = flength + 1;
   1b808:	e0bffd17 	ldw	r2,-12(fp)
   1b80c:	10800044 	addi	r2,r2,1
   1b810:	e0bffd15 	stw	r2,-12(fp)
	}
	if (file_record->extension[0] != ' ')
	{
		file_name[flength] = '.';
		flength = flength + 1;
		for (index = 0; index < 3; index++)
   1b814:	e0bffc17 	ldw	r2,-16(fp)
   1b818:	10800044 	addi	r2,r2,1
   1b81c:	e0bffc15 	stw	r2,-16(fp)
   1b820:	e0bffc17 	ldw	r2,-16(fp)
   1b824:	108000d0 	cmplti	r2,r2,3
   1b828:	103fe61e 	bne	r2,zero,1b7c4 <__alt_mem_Flash_flash_data+0xf401b7c4>
				file_name[flength] = file_record->extension[index];
				flength = flength + 1;
			}
		}
	}
	file_name[flength] = 0;
   1b82c:	e0bffd17 	ldw	r2,-12(fp)
   1b830:	e0ffff17 	ldw	r3,-4(fp)
   1b834:	1885883a 	add	r2,r3,r2
   1b838:	10000005 	stb	zero,0(r2)
}
   1b83c:	e037883a 	mov	sp,fp
   1b840:	df000017 	ldw	fp,0(sp)
   1b844:	dec00104 	addi	sp,sp,4
   1b848:	f800283a 	ret

0001b84c <alt_up_sd_card_open_dev>:
// Direct functions
///////////////////////////////////////////////////////////////////////////


alt_up_sd_card_dev* alt_up_sd_card_open_dev(const char* name)
{
   1b84c:	defffc04 	addi	sp,sp,-16
   1b850:	dfc00315 	stw	ra,12(sp)
   1b854:	df000215 	stw	fp,8(sp)
   1b858:	df000204 	addi	fp,sp,8
   1b85c:	e13fff15 	stw	r4,-4(fp)
	// find the device from the device list 
	// (see altera_hal/HAL/inc/priv/alt_file.h 
	// and altera_hal/HAL/src/alt_find_dev.c 
	// for details)
	alt_up_sd_card_dev *dev = (alt_up_sd_card_dev *) alt_find_dev(name, &alt_dev_list);
   1b860:	e13fff17 	ldw	r4,-4(fp)
   1b864:	014000b4 	movhi	r5,2
   1b868:	294b1504 	addi	r5,r5,11348
   1b86c:	001f54c0 	call	1f54c <alt_find_dev>
   1b870:	e0bffe15 	stw	r2,-8(fp)

	if (dev != NULL)
   1b874:	e0bffe17 	ldw	r2,-8(fp)
   1b878:	10001e26 	beq	r2,zero,1b8f4 <alt_up_sd_card_open_dev+0xa8>
	{
		aux_status_register = ((short int *) SD_CARD_AUX_STATUS(dev->base));
   1b87c:	e0bffe17 	ldw	r2,-8(fp)
   1b880:	10800a17 	ldw	r2,40(r2)
   1b884:	10808d04 	addi	r2,r2,564
   1b888:	d0a81215 	stw	r2,-24504(gp)
		status_register = ((int *) SD_CARD_STATUS(dev->base));
   1b88c:	e0bffe17 	ldw	r2,-8(fp)
   1b890:	10800a17 	ldw	r2,40(r2)
   1b894:	10808904 	addi	r2,r2,548
   1b898:	d0a81315 	stw	r2,-24500(gp)
		CSD_register_w0 = ((short int *) SD_CARD_CSD(dev->base, 0));
   1b89c:	e0bffe17 	ldw	r2,-8(fp)
   1b8a0:	10800a17 	ldw	r2,40(r2)
   1b8a4:	10808404 	addi	r2,r2,528
   1b8a8:	d0a81415 	stw	r2,-24496(gp)
		command_register = ((short int *) SD_CARD_COMMAND(dev->base));
   1b8ac:	e0bffe17 	ldw	r2,-8(fp)
   1b8b0:	10800a17 	ldw	r2,40(r2)
   1b8b4:	10808c04 	addi	r2,r2,560
   1b8b8:	d0a81515 	stw	r2,-24492(gp)
		command_argument_register = ((int *) SD_CARD_ARGUMENT(dev->base));
   1b8bc:	e0bffe17 	ldw	r2,-8(fp)
   1b8c0:	10800a17 	ldw	r2,40(r2)
   1b8c4:	10808b04 	addi	r2,r2,556
   1b8c8:	d0a81615 	stw	r2,-24488(gp)
		buffer_memory = (char *) SD_CARD_BUFFER(dev->base, 0);
   1b8cc:	e0bffe17 	ldw	r2,-8(fp)
   1b8d0:	10800a17 	ldw	r2,40(r2)
   1b8d4:	d0a81715 	stw	r2,-24484(gp)
		device_pointer = dev;
   1b8d8:	e0bffe17 	ldw	r2,-8(fp)
   1b8dc:	d0a81a15 	stw	r2,-24472(gp)
		initialized = false;
   1b8e0:	d0281015 	stw	zero,-24512(gp)
		is_sd_card_formated_as_FAT16 = false;
   1b8e4:	d0281115 	stw	zero,-24508(gp)
		search_data.valid = false;
   1b8e8:	008000b4 	movhi	r2,2
   1b8ec:	109fda04 	addi	r2,r2,32616
   1b8f0:	10000415 	stw	zero,16(r2)
	}
	return dev;
   1b8f4:	e0bffe17 	ldw	r2,-8(fp)
}
   1b8f8:	e037883a 	mov	sp,fp
   1b8fc:	dfc00117 	ldw	ra,4(sp)
   1b900:	df000017 	ldw	fp,0(sp)
   1b904:	dec00204 	addi	sp,sp,8
   1b908:	f800283a 	ret

0001b90c <alt_up_sd_card_is_Present>:


bool alt_up_sd_card_is_Present(void)
// Check if there is an SD Card insterted into the SD Card socket.
{
   1b90c:	defffd04 	addi	sp,sp,-12
   1b910:	df000215 	stw	fp,8(sp)
   1b914:	df000204 	addi	fp,sp,8
    bool result = false;
   1b918:	e03ffe15 	stw	zero,-8(fp)

    if ((device_pointer != NULL) && ((IORD_16DIRECT(aux_status_register,0) & 0x02) != 0))
   1b91c:	d0a81a17 	ldw	r2,-24472(gp)
   1b920:	10000826 	beq	r2,zero,1b944 <alt_up_sd_card_is_Present+0x38>
   1b924:	d0a81217 	ldw	r2,-24504(gp)
   1b928:	1080002b 	ldhuio	r2,0(r2)
   1b92c:	10bfffcc 	andi	r2,r2,65535
   1b930:	1080008c 	andi	r2,r2,2
   1b934:	10000326 	beq	r2,zero,1b944 <alt_up_sd_card_is_Present+0x38>
    {
        result = true;
   1b938:	00800044 	movi	r2,1
   1b93c:	e0bffe15 	stw	r2,-8(fp)
   1b940:	00001e06 	br	1b9bc <alt_up_sd_card_is_Present+0xb0>
    }
	else if (initialized == true)
   1b944:	d0a81017 	ldw	r2,-24512(gp)
   1b948:	10800058 	cmpnei	r2,r2,1
   1b94c:	10001b1e 	bne	r2,zero,1b9bc <alt_up_sd_card_is_Present+0xb0>
	{
		int index;

		initialized = false;
   1b950:	d0281015 	stw	zero,-24512(gp)
		search_data.valid = false;
   1b954:	008000b4 	movhi	r2,2
   1b958:	109fda04 	addi	r2,r2,32616
   1b95c:	10000415 	stw	zero,16(r2)
		is_sd_card_formated_as_FAT16 = false;
   1b960:	d0281115 	stw	zero,-24508(gp)

		for(index = 0; index < MAX_FILES_OPENED; index++)
   1b964:	e03fff15 	stw	zero,-4(fp)
   1b968:	00001106 	br	1b9b0 <alt_up_sd_card_is_Present+0xa4>
		{
			active_files[index].in_use = false;
   1b96c:	008000b4 	movhi	r2,2
   1b970:	109ff404 	addi	r2,r2,32720
   1b974:	e0ffff17 	ldw	r3,-4(fp)
   1b978:	180691ba 	slli	r3,r3,6
   1b97c:	18c00f04 	addi	r3,r3,60
   1b980:	10c5883a 	add	r2,r2,r3
   1b984:	10000015 	stw	zero,0(r2)
			active_files[index].modified = false;
   1b988:	008000b4 	movhi	r2,2
   1b98c:	109ff404 	addi	r2,r2,32720
   1b990:	e0ffff17 	ldw	r3,-4(fp)
   1b994:	180691ba 	slli	r3,r3,6
   1b998:	18c00e04 	addi	r3,r3,56
   1b99c:	10c5883a 	add	r2,r2,r3
   1b9a0:	10000015 	stw	zero,0(r2)

		initialized = false;
		search_data.valid = false;
		is_sd_card_formated_as_FAT16 = false;

		for(index = 0; index < MAX_FILES_OPENED; index++)
   1b9a4:	e0bfff17 	ldw	r2,-4(fp)
   1b9a8:	10800044 	addi	r2,r2,1
   1b9ac:	e0bfff15 	stw	r2,-4(fp)
   1b9b0:	e0bfff17 	ldw	r2,-4(fp)
   1b9b4:	10800510 	cmplti	r2,r2,20
   1b9b8:	103fec1e 	bne	r2,zero,1b96c <__alt_mem_Flash_flash_data+0xf401b96c>
		{
			active_files[index].in_use = false;
			active_files[index].modified = false;
		}
	}
    return result;
   1b9bc:	e0bffe17 	ldw	r2,-8(fp)
}
   1b9c0:	e037883a 	mov	sp,fp
   1b9c4:	df000017 	ldw	fp,0(sp)
   1b9c8:	dec00104 	addi	sp,sp,4
   1b9cc:	f800283a 	ret

0001b9d0 <alt_up_sd_card_is_FAT16>:
/* This function reads the SD card data in an effort to determine if the card is formated as a FAT16
 * volume. Please note that FAT12 has a similar format, but will not be supported by this driver.
 * If the card contains a FAT16 volume, the local data structures will be initialized to allow reading and writing
 * to the SD card as though it was a hard drive.
 */
{
   1b9d0:	defffd04 	addi	sp,sp,-12
   1b9d4:	dfc00215 	stw	ra,8(sp)
   1b9d8:	df000115 	stw	fp,4(sp)
   1b9dc:	df000104 	addi	fp,sp,4
	bool result = false;
   1b9e0:	e03fff15 	stw	zero,-4(fp)

	if (alt_up_sd_card_is_Present())
   1b9e4:	001b90c0 	call	1b90c <alt_up_sd_card_is_Present>
   1b9e8:	10000c26 	beq	r2,zero,1ba1c <alt_up_sd_card_is_FAT16+0x4c>
	{
		// Check if an SD Card is in the SD Card slot.
		if (initialized == false)
   1b9ec:	d0a81017 	ldw	r2,-24512(gp)
   1b9f0:	1000071e 	bne	r2,zero,1ba10 <alt_up_sd_card_is_FAT16+0x40>
		{
			// Now determine if the card is formatted as FAT 16.
			is_sd_card_formated_as_FAT16 = Look_for_FAT16();
   1b9f4:	0019ca00 	call	19ca0 <Look_for_FAT16>
   1b9f8:	d0a81115 	stw	r2,-24508(gp)
			initialized = is_sd_card_formated_as_FAT16;
   1b9fc:	d0a81117 	ldw	r2,-24508(gp)
   1ba00:	d0a81015 	stw	r2,-24512(gp)
			search_data.valid = false;
   1ba04:	008000b4 	movhi	r2,2
   1ba08:	109fda04 	addi	r2,r2,32616
   1ba0c:	10000415 	stw	zero,16(r2)
		}
		result = is_sd_card_formated_as_FAT16;
   1ba10:	d0a81117 	ldw	r2,-24508(gp)
   1ba14:	e0bfff15 	stw	r2,-4(fp)
   1ba18:	00000206 	br	1ba24 <alt_up_sd_card_is_FAT16+0x54>
	}
	else
	{
		// If not then you may as well not open the device.
		initialized = false;
   1ba1c:	d0281015 	stw	zero,-24512(gp)
		is_sd_card_formated_as_FAT16 = false;
   1ba20:	d0281115 	stw	zero,-24508(gp)
	}

	return result;
   1ba24:	e0bfff17 	ldw	r2,-4(fp)
}
   1ba28:	e037883a 	mov	sp,fp
   1ba2c:	dfc00117 	ldw	ra,4(sp)
   1ba30:	df000017 	ldw	fp,0(sp)
   1ba34:	dec00204 	addi	sp,sp,8
   1ba38:	f800283a 	ret

0001ba3c <alt_up_sd_card_find_first>:
 * "first/sub/." - look through a directory named "sub", that is located within the subdirectory named "first". "first" is located in the root directory.
 * Invalid examples include:
 * "/.", "/////." - this is not the root directory.
 * "/first/." - the first character may not be a '/'.
 */
{
   1ba3c:	deffea04 	addi	sp,sp,-88
   1ba40:	dfc01515 	stw	ra,84(sp)
   1ba44:	df001415 	stw	fp,80(sp)
   1ba48:	df001404 	addi	fp,sp,80
   1ba4c:	e13ffe15 	stw	r4,-8(fp)
   1ba50:	e17fff15 	stw	r5,-4(fp)
	short int result = 2;
   1ba54:	00800084 	movi	r2,2
   1ba58:	e0bfec0d 	sth	r2,-80(fp)
	if ((alt_up_sd_card_is_Present()) && (is_sd_card_formated_as_FAT16))
   1ba5c:	001b90c0 	call	1b90c <alt_up_sd_card_is_Present>
   1ba60:	10002426 	beq	r2,zero,1baf4 <alt_up_sd_card_find_first+0xb8>
   1ba64:	d0a81117 	ldw	r2,-24508(gp)
   1ba68:	10002226 	beq	r2,zero,1baf4 <alt_up_sd_card_find_first+0xb8>
	{
		int home_directory_cluster;
		t_file_record file_record;

		if (get_home_directory_cluster_for_file(directory_to_search_through, &home_directory_cluster, &file_record))
   1ba6c:	e0ffed04 	addi	r3,fp,-76
   1ba70:	e0bfee04 	addi	r2,fp,-72
   1ba74:	e13ffe17 	ldw	r4,-8(fp)
   1ba78:	180b883a 	mov	r5,r3
   1ba7c:	100d883a 	mov	r6,r2
   1ba80:	001a40c0 	call	1a40c <get_home_directory_cluster_for_file>
   1ba84:	10001926 	beq	r2,zero,1baec <alt_up_sd_card_find_first+0xb0>
		{
			search_data.directory_root_cluster = home_directory_cluster;
   1ba88:	e0bfed17 	ldw	r2,-76(fp)
   1ba8c:	1007883a 	mov	r3,r2
   1ba90:	008000b4 	movhi	r2,2
   1ba94:	109fda04 	addi	r2,r2,32616
   1ba98:	10c00015 	stw	r3,0(r2)
			search_data.current_cluster_index = home_directory_cluster;
   1ba9c:	e0bfed17 	ldw	r2,-76(fp)
   1baa0:	1007883a 	mov	r3,r2
   1baa4:	008000b4 	movhi	r2,2
   1baa8:	109fda04 	addi	r2,r2,32616
   1baac:	10c00115 	stw	r3,4(r2)
			search_data.current_sector_in_cluster = 0;
   1bab0:	008000b4 	movhi	r2,2
   1bab4:	109fda04 	addi	r2,r2,32616
   1bab8:	10000215 	stw	zero,8(r2)
			search_data.file_index_in_sector = -1;
   1babc:	008000b4 	movhi	r2,2
   1bac0:	109fda04 	addi	r2,r2,32616
   1bac4:	00ffffc4 	movi	r3,-1
   1bac8:	10c0030d 	sth	r3,12(r2)
			search_data.valid = true;
   1bacc:	008000b4 	movhi	r2,2
   1bad0:	109fda04 	addi	r2,r2,32616
   1bad4:	00c00044 	movi	r3,1
   1bad8:	10c00415 	stw	r3,16(r2)
			result = alt_up_sd_card_find_next(file_name);
   1badc:	e13fff17 	ldw	r4,-4(fp)
   1bae0:	001bb0c0 	call	1bb0c <alt_up_sd_card_find_next>
   1bae4:	e0bfec0d 	sth	r2,-80(fp)
   1bae8:	00000206 	br	1baf4 <alt_up_sd_card_find_first+0xb8>
		}
		else
		{
			result = 1;
   1baec:	00800044 	movi	r2,1
   1baf0:	e0bfec0d 	sth	r2,-80(fp)
		}
	}
	return result;
   1baf4:	e0bfec0b 	ldhu	r2,-80(fp)
}
   1baf8:	e037883a 	mov	sp,fp
   1bafc:	dfc00117 	ldw	ra,4(sp)
   1bb00:	df000017 	ldw	fp,0(sp)
   1bb04:	dec00204 	addi	sp,sp,8
   1bb08:	f800283a 	ret

0001bb0c <alt_up_sd_card_find_next>:
 *		-1 - end of directory.
 *		0 - success
 *		2 - No card or incorrect card format.
 *		3 - find_first has not been called successfully.
 */
{
   1bb0c:	deffe404 	addi	sp,sp,-112
   1bb10:	dfc01b15 	stw	ra,108(sp)
   1bb14:	df001a15 	stw	fp,104(sp)
   1bb18:	df001a04 	addi	fp,sp,104
   1bb1c:	e13fff15 	stw	r4,-4(fp)
	short int result = 2;
   1bb20:	00800084 	movi	r2,2
   1bb24:	e0bfe60d 	sth	r2,-104(fp)
	if ((alt_up_sd_card_is_Present()) && (is_sd_card_formated_as_FAT16))
   1bb28:	001b90c0 	call	1b90c <alt_up_sd_card_is_Present>
   1bb2c:	1000dc26 	beq	r2,zero,1bea0 <alt_up_sd_card_find_next+0x394>
   1bb30:	d0a81117 	ldw	r2,-24508(gp)
   1bb34:	1000da26 	beq	r2,zero,1bea0 <alt_up_sd_card_find_next+0x394>
	{
		if (search_data.valid)
   1bb38:	008000b4 	movhi	r2,2
   1bb3c:	109fda04 	addi	r2,r2,32616
   1bb40:	10800417 	ldw	r2,16(r2)
   1bb44:	1000d426 	beq	r2,zero,1be98 <alt_up_sd_card_find_next+0x38c>
		{
			t_file_record file_record;
			int cluster = search_data.current_cluster_index;
   1bb48:	008000b4 	movhi	r2,2
   1bb4c:	109fda04 	addi	r2,r2,32616
   1bb50:	10800117 	ldw	r2,4(r2)
   1bb54:	e0bfe715 	stw	r2,-100(fp)

			if (cluster == 0)
   1bb58:	e0bfe717 	ldw	r2,-100(fp)
   1bb5c:	1000551e 	bne	r2,zero,1bcb4 <alt_up_sd_card_find_next+0x1a8>
			{
				// Searching through the root directory
				int max_root_dir_sectors = ((32*boot_sector_data.max_number_of_dir_entires) / boot_sector_data.sector_size_in_bytes);
   1bb60:	008000b4 	movhi	r2,2
   1bb64:	109fdf04 	addi	r2,r2,32636
   1bb68:	1080050b 	ldhu	r2,20(r2)
   1bb6c:	10bfffcc 	andi	r2,r2,65535
   1bb70:	1006917a 	slli	r3,r2,5
   1bb74:	008000b4 	movhi	r2,2
   1bb78:	109fdf04 	addi	r2,r2,32636
   1bb7c:	1080030b 	ldhu	r2,12(r2)
   1bb80:	10bfffcc 	andi	r2,r2,65535
   1bb84:	1885283a 	div	r2,r3,r2
   1bb88:	e0bfec15 	stw	r2,-80(fp)
				int sector_index = search_data.current_sector_in_cluster;
   1bb8c:	008000b4 	movhi	r2,2
   1bb90:	109fda04 	addi	r2,r2,32616
   1bb94:	10800217 	ldw	r2,8(r2)
   1bb98:	e0bfe815 	stw	r2,-96(fp)
				int file_counter = search_data.file_index_in_sector+1;
   1bb9c:	008000b4 	movhi	r2,2
   1bba0:	109fda04 	addi	r2,r2,32616
   1bba4:	1080030b 	ldhu	r2,12(r2)
   1bba8:	10bfffcc 	andi	r2,r2,65535
   1bbac:	10a0001c 	xori	r2,r2,32768
   1bbb0:	10a00004 	addi	r2,r2,-32768
   1bbb4:	10800044 	addi	r2,r2,1
   1bbb8:	e0bfe915 	stw	r2,-92(fp)
    
				for (; sector_index < max_root_dir_sectors; sector_index++)
   1bbbc:	00003706 	br	1bc9c <alt_up_sd_card_find_next+0x190>
				{
					if (Read_Sector_Data(   sector_index + boot_sector_data.root_directory_sector_offset,
   1bbc0:	008000b4 	movhi	r2,2
   1bbc4:	109fdf04 	addi	r2,r2,32636
   1bbc8:	10c01317 	ldw	r3,76(r2)
   1bbcc:	e0bfe817 	ldw	r2,-96(fp)
   1bbd0:	1885883a 	add	r2,r3,r2
   1bbd4:	1007883a 	mov	r3,r2
   1bbd8:	d0a81817 	ldw	r2,-24480(gp)
   1bbdc:	1809883a 	mov	r4,r3
   1bbe0:	100b883a 	mov	r5,r2
   1bbe4:	0018cf80 	call	18cf8 <Read_Sector_Data>
   1bbe8:	10002826 	beq	r2,zero,1bc8c <alt_up_sd_card_find_next+0x180>
											fat_partition_offset_in_512_byte_sectors))
					{
						for (; file_counter < 16; file_counter++)
   1bbec:	00002206 	br	1bc78 <alt_up_sd_card_find_next+0x16c>
						{
							if (Read_File_Record_At_Offset(file_counter*32, &file_record, 0, sector_index))
   1bbf0:	e0bfe917 	ldw	r2,-92(fp)
   1bbf4:	1008917a 	slli	r4,r2,5
   1bbf8:	e0bfe817 	ldw	r2,-96(fp)
   1bbfc:	e0ffef04 	addi	r3,fp,-68
   1bc00:	180b883a 	mov	r5,r3
   1bc04:	000d883a 	mov	r6,zero
   1bc08:	100f883a 	mov	r7,r2
   1bc0c:	00191100 	call	19110 <Read_File_Record_At_Offset>
   1bc10:	10001626 	beq	r2,zero,1bc6c <alt_up_sd_card_find_next+0x160>
							{
								if ((file_record.name[0] != 0) && (file_record.name[0] != 0xe5))
   1bc14:	e0bfef03 	ldbu	r2,-68(fp)
   1bc18:	10803fcc 	andi	r2,r2,255
   1bc1c:	10001326 	beq	r2,zero,1bc6c <alt_up_sd_card_find_next+0x160>
   1bc20:	e0bfef03 	ldbu	r2,-68(fp)
   1bc24:	10803fcc 	andi	r2,r2,255
   1bc28:	10803960 	cmpeqi	r2,r2,229
   1bc2c:	10000f1e 	bne	r2,zero,1bc6c <alt_up_sd_card_find_next+0x160>
								{
									/* Update search structure. */
									search_data.file_index_in_sector = file_counter;
   1bc30:	e0bfe917 	ldw	r2,-92(fp)
   1bc34:	1007883a 	mov	r3,r2
   1bc38:	008000b4 	movhi	r2,2
   1bc3c:	109fda04 	addi	r2,r2,32616
   1bc40:	10c0030d 	sth	r3,12(r2)
									search_data.current_sector_in_cluster = sector_index;
   1bc44:	e0ffe817 	ldw	r3,-96(fp)
   1bc48:	008000b4 	movhi	r2,2
   1bc4c:	109fda04 	addi	r2,r2,32616
   1bc50:	10c00215 	stw	r3,8(r2)

									/* Copy file name.*/
									copy_file_record_name_to_string(&file_record, file_name);
   1bc54:	e0bfef04 	addi	r2,fp,-68
   1bc58:	1009883a 	mov	r4,r2
   1bc5c:	e17fff17 	ldw	r5,-4(fp)
   1bc60:	001b7080 	call	1b708 <copy_file_record_name_to_string>
									return 0;
   1bc64:	0005883a 	mov	r2,zero
   1bc68:	00008e06 	br	1bea4 <alt_up_sd_card_find_next+0x398>
				for (; sector_index < max_root_dir_sectors; sector_index++)
				{
					if (Read_Sector_Data(   sector_index + boot_sector_data.root_directory_sector_offset,
											fat_partition_offset_in_512_byte_sectors))
					{
						for (; file_counter < 16; file_counter++)
   1bc6c:	e0bfe917 	ldw	r2,-92(fp)
   1bc70:	10800044 	addi	r2,r2,1
   1bc74:	e0bfe915 	stw	r2,-92(fp)
   1bc78:	e0bfe917 	ldw	r2,-92(fp)
   1bc7c:	10800410 	cmplti	r2,r2,16
   1bc80:	103fdb1e 	bne	r2,zero,1bbf0 <__alt_mem_Flash_flash_data+0xf401bbf0>
									copy_file_record_name_to_string(&file_record, file_name);
									return 0;
								}
							}
						}
						file_counter = 0;
   1bc84:	e03fe915 	stw	zero,-92(fp)
   1bc88:	00000106 	br	1bc90 <alt_up_sd_card_find_next+0x184>
					}
					else
					{
						break;
   1bc8c:	00000606 	br	1bca8 <alt_up_sd_card_find_next+0x19c>
				// Searching through the root directory
				int max_root_dir_sectors = ((32*boot_sector_data.max_number_of_dir_entires) / boot_sector_data.sector_size_in_bytes);
				int sector_index = search_data.current_sector_in_cluster;
				int file_counter = search_data.file_index_in_sector+1;
    
				for (; sector_index < max_root_dir_sectors; sector_index++)
   1bc90:	e0bfe817 	ldw	r2,-96(fp)
   1bc94:	10800044 	addi	r2,r2,1
   1bc98:	e0bfe815 	stw	r2,-96(fp)
   1bc9c:	e0ffe817 	ldw	r3,-96(fp)
   1bca0:	e0bfec17 	ldw	r2,-80(fp)
   1bca4:	18bfc616 	blt	r3,r2,1bbc0 <__alt_mem_Flash_flash_data+0xf401bbc0>
					else
					{
						break;
					}
				}
				result = -1;
   1bca8:	00bfffc4 	movi	r2,-1
   1bcac:	e0bfe60d 	sth	r2,-104(fp)
   1bcb0:	00007806 	br	1be94 <alt_up_sd_card_find_next+0x388>
			}
			else
			{
				int file_counter = search_data.file_index_in_sector+1;
   1bcb4:	008000b4 	movhi	r2,2
   1bcb8:	109fda04 	addi	r2,r2,32616
   1bcbc:	1080030b 	ldhu	r2,12(r2)
   1bcc0:	10bfffcc 	andi	r2,r2,65535
   1bcc4:	10a0001c 	xori	r2,r2,32768
   1bcc8:	10a00004 	addi	r2,r2,-32768
   1bccc:	10800044 	addi	r2,r2,1
   1bcd0:	e0bfea15 	stw	r2,-88(fp)
				do 
				{
					int start_sector = ( cluster - 2 ) * ( boot_sector_data.sectors_per_cluster ) + boot_sector_data.data_sector_offset;
   1bcd4:	e0bfe717 	ldw	r2,-100(fp)
   1bcd8:	10ffff84 	addi	r3,r2,-2
   1bcdc:	008000b4 	movhi	r2,2
   1bce0:	109fdf04 	addi	r2,r2,32636
   1bce4:	10800383 	ldbu	r2,14(r2)
   1bce8:	10803fcc 	andi	r2,r2,255
   1bcec:	1885383a 	mul	r2,r3,r2
   1bcf0:	1007883a 	mov	r3,r2
   1bcf4:	008000b4 	movhi	r2,2
   1bcf8:	109fdf04 	addi	r2,r2,32636
   1bcfc:	10801417 	ldw	r2,80(r2)
   1bd00:	1885883a 	add	r2,r3,r2
   1bd04:	e0bfed15 	stw	r2,-76(fp)
					int sector_index = search_data.current_sector_in_cluster;
   1bd08:	008000b4 	movhi	r2,2
   1bd0c:	109fda04 	addi	r2,r2,32616
   1bd10:	10800217 	ldw	r2,8(r2)
   1bd14:	e0bfeb15 	stw	r2,-84(fp)
			        
					for (; sector_index < boot_sector_data.sectors_per_cluster; sector_index++)
   1bd18:	00003806 	br	1bdfc <alt_up_sd_card_find_next+0x2f0>
					{
						if (Read_Sector_Data(sector_index + start_sector, fat_partition_offset_in_512_byte_sectors))
   1bd1c:	e0ffeb17 	ldw	r3,-84(fp)
   1bd20:	e0bfed17 	ldw	r2,-76(fp)
   1bd24:	1887883a 	add	r3,r3,r2
   1bd28:	d0a81817 	ldw	r2,-24480(gp)
   1bd2c:	1809883a 	mov	r4,r3
   1bd30:	100b883a 	mov	r5,r2
   1bd34:	0018cf80 	call	18cf8 <Read_Sector_Data>
   1bd38:	10002c26 	beq	r2,zero,1bdec <alt_up_sd_card_find_next+0x2e0>
						{        
							for (; file_counter < 16; file_counter++)
   1bd3c:	00002606 	br	1bdd8 <alt_up_sd_card_find_next+0x2cc>
							{
								if (Read_File_Record_At_Offset(file_counter*32, &file_record, cluster, sector_index))
   1bd40:	e0bfea17 	ldw	r2,-88(fp)
   1bd44:	1008917a 	slli	r4,r2,5
   1bd48:	e0ffe717 	ldw	r3,-100(fp)
   1bd4c:	e0bfeb17 	ldw	r2,-84(fp)
   1bd50:	e17fef04 	addi	r5,fp,-68
   1bd54:	180d883a 	mov	r6,r3
   1bd58:	100f883a 	mov	r7,r2
   1bd5c:	00191100 	call	19110 <Read_File_Record_At_Offset>
   1bd60:	10001a26 	beq	r2,zero,1bdcc <alt_up_sd_card_find_next+0x2c0>
								{
									if ((file_record.name[0] != 0) && (file_record.name[0] != 0xe5))
   1bd64:	e0bfef03 	ldbu	r2,-68(fp)
   1bd68:	10803fcc 	andi	r2,r2,255
   1bd6c:	10001726 	beq	r2,zero,1bdcc <alt_up_sd_card_find_next+0x2c0>
   1bd70:	e0bfef03 	ldbu	r2,-68(fp)
   1bd74:	10803fcc 	andi	r2,r2,255
   1bd78:	10803960 	cmpeqi	r2,r2,229
   1bd7c:	1000131e 	bne	r2,zero,1bdcc <alt_up_sd_card_find_next+0x2c0>
									{
										/* Update search structure. */
										search_data.current_cluster_index = cluster;
   1bd80:	e0ffe717 	ldw	r3,-100(fp)
   1bd84:	008000b4 	movhi	r2,2
   1bd88:	109fda04 	addi	r2,r2,32616
   1bd8c:	10c00115 	stw	r3,4(r2)
										search_data.file_index_in_sector = file_counter;
   1bd90:	e0bfea17 	ldw	r2,-88(fp)
   1bd94:	1007883a 	mov	r3,r2
   1bd98:	008000b4 	movhi	r2,2
   1bd9c:	109fda04 	addi	r2,r2,32616
   1bda0:	10c0030d 	sth	r3,12(r2)
										search_data.current_sector_in_cluster = sector_index;
   1bda4:	e0ffeb17 	ldw	r3,-84(fp)
   1bda8:	008000b4 	movhi	r2,2
   1bdac:	109fda04 	addi	r2,r2,32616
   1bdb0:	10c00215 	stw	r3,8(r2)

										/* Copy file name.*/
										copy_file_record_name_to_string(&file_record, file_name);
   1bdb4:	e0bfef04 	addi	r2,fp,-68
   1bdb8:	1009883a 	mov	r4,r2
   1bdbc:	e17fff17 	ldw	r5,-4(fp)
   1bdc0:	001b7080 	call	1b708 <copy_file_record_name_to_string>
										return 0;
   1bdc4:	0005883a 	mov	r2,zero
   1bdc8:	00003606 	br	1bea4 <alt_up_sd_card_find_next+0x398>
			        
					for (; sector_index < boot_sector_data.sectors_per_cluster; sector_index++)
					{
						if (Read_Sector_Data(sector_index + start_sector, fat_partition_offset_in_512_byte_sectors))
						{        
							for (; file_counter < 16; file_counter++)
   1bdcc:	e0bfea17 	ldw	r2,-88(fp)
   1bdd0:	10800044 	addi	r2,r2,1
   1bdd4:	e0bfea15 	stw	r2,-88(fp)
   1bdd8:	e0bfea17 	ldw	r2,-88(fp)
   1bddc:	10800410 	cmplti	r2,r2,16
   1bde0:	103fd71e 	bne	r2,zero,1bd40 <__alt_mem_Flash_flash_data+0xf401bd40>
										copy_file_record_name_to_string(&file_record, file_name);
										return 0;
									}
								}
							}
							file_counter = 0;
   1bde4:	e03fea15 	stw	zero,-88(fp)
   1bde8:	00000106 	br	1bdf0 <alt_up_sd_card_find_next+0x2e4>
						}
						else
						{
							break;
   1bdec:	00000906 	br	1be14 <alt_up_sd_card_find_next+0x308>
				do 
				{
					int start_sector = ( cluster - 2 ) * ( boot_sector_data.sectors_per_cluster ) + boot_sector_data.data_sector_offset;
					int sector_index = search_data.current_sector_in_cluster;
			        
					for (; sector_index < boot_sector_data.sectors_per_cluster; sector_index++)
   1bdf0:	e0bfeb17 	ldw	r2,-84(fp)
   1bdf4:	10800044 	addi	r2,r2,1
   1bdf8:	e0bfeb15 	stw	r2,-84(fp)
   1bdfc:	008000b4 	movhi	r2,2
   1be00:	109fdf04 	addi	r2,r2,32636
   1be04:	10800383 	ldbu	r2,14(r2)
   1be08:	10803fcc 	andi	r2,r2,255
   1be0c:	e0ffeb17 	ldw	r3,-84(fp)
   1be10:	18bfc216 	blt	r3,r2,1bd1c <__alt_mem_Flash_flash_data+0xf401bd1c>
							break;
						}
					}
					// If this is the end of the cluster and the file has not been found, then see if there is another cluster
					// that holds data for the current directory.
					if (sector_index >= boot_sector_data.sectors_per_cluster)
   1be14:	008000b4 	movhi	r2,2
   1be18:	109fdf04 	addi	r2,r2,32636
   1be1c:	10800383 	ldbu	r2,14(r2)
   1be20:	10803fcc 	andi	r2,r2,255
   1be24:	e0ffeb17 	ldw	r3,-84(fp)
   1be28:	18801716 	blt	r3,r2,1be88 <alt_up_sd_card_find_next+0x37c>
					{
						unsigned short int new_cluster;

						if (get_cluster_flag(cluster, &new_cluster))
   1be2c:	e0ffe717 	ldw	r3,-100(fp)
   1be30:	e0bfee04 	addi	r2,fp,-72
   1be34:	1809883a 	mov	r4,r3
   1be38:	100b883a 	mov	r5,r2
   1be3c:	0018dd00 	call	18dd0 <get_cluster_flag>
   1be40:	10000f26 	beq	r2,zero,1be80 <alt_up_sd_card_find_next+0x374>
						{
							if ((new_cluster & 0x0000fff8) == 0x0000fff8)
   1be44:	e0bfee0b 	ldhu	r2,-72(fp)
   1be48:	10bfffcc 	andi	r2,r2,65535
   1be4c:	10fffe0c 	andi	r3,r2,65528
   1be50:	00bffe14 	movui	r2,65528
   1be54:	1880051e 	bne	r3,r2,1be6c <alt_up_sd_card_find_next+0x360>
							{
								result = -1;
   1be58:	00bfffc4 	movi	r2,-1
   1be5c:	e0bfe60d 	sth	r2,-104(fp)
								search_data.valid = false;
   1be60:	008000b4 	movhi	r2,2
   1be64:	109fda04 	addi	r2,r2,32616
   1be68:	10000415 	stw	zero,16(r2)
							}
							cluster = ((new_cluster) & 0x0000fff8);
   1be6c:	e0bfee0b 	ldhu	r2,-72(fp)
   1be70:	10bfffcc 	andi	r2,r2,65535
   1be74:	10bffe0c 	andi	r2,r2,65528
   1be78:	e0bfe715 	stw	r2,-100(fp)
   1be7c:	00000206 	br	1be88 <alt_up_sd_card_find_next+0x37c>
						}
						else
						{
							// Error encountered.                 
							result = -1;
   1be80:	00bfffc4 	movi	r2,-1
   1be84:	e0bfe60d 	sth	r2,-104(fp)
						}
					}              
				} while (cluster < 0x0000fff8);
   1be88:	e0bfe717 	ldw	r2,-100(fp)
   1be8c:	00fffdd4 	movui	r3,65527
   1be90:	18bf900e 	bge	r3,r2,1bcd4 <__alt_mem_Flash_flash_data+0xf401bcd4>
   1be94:	00000206 	br	1bea0 <alt_up_sd_card_find_next+0x394>
			}
		}
		else
		{
			// Call Find_First first.
			result = 3;
   1be98:	008000c4 	movi	r2,3
   1be9c:	e0bfe60d 	sth	r2,-104(fp)
		}
	}
	return result;
   1bea0:	e0bfe60b 	ldhu	r2,-104(fp)
}
   1bea4:	e037883a 	mov	sp,fp
   1bea8:	dfc00117 	ldw	ra,4(sp)
   1beac:	df000017 	ldw	fp,0(sp)
   1beb0:	dec00204 	addi	sp,sp,8
   1beb4:	f800283a 	ret

0001beb8 <alt_up_sd_card_fopen>:
 *      create - a flag set to true to create a file if it does not already exist
 * Output:
 *      An index to the file record assigned to the specified file. -1 is returned if the file could not be opened.
 *		Return -2 if the specified file has already been opened previously.
 */
{
   1beb8:	deffe904 	addi	sp,sp,-92
   1bebc:	dfc01615 	stw	ra,88(sp)
   1bec0:	df001515 	stw	fp,84(sp)
   1bec4:	df001504 	addi	fp,sp,84
   1bec8:	e13ffe15 	stw	r4,-8(fp)
   1becc:	e17fff15 	stw	r5,-4(fp)
	short int file_record_index = -1;
   1bed0:	00bfffc4 	movi	r2,-1
   1bed4:	e0bfeb0d 	sth	r2,-84(fp)

	if ((alt_up_sd_card_is_Present()) && (is_sd_card_formated_as_FAT16))
   1bed8:	001b90c0 	call	1b90c <alt_up_sd_card_is_Present>
   1bedc:	1000d126 	beq	r2,zero,1c224 <alt_up_sd_card_fopen+0x36c>
   1bee0:	d0a81117 	ldw	r2,-24508(gp)
   1bee4:	1000cf26 	beq	r2,zero,1c224 <alt_up_sd_card_fopen+0x36c>
	{
        unsigned int home_directory_cluster = 0;
   1bee8:	e03fed15 	stw	zero,-76(fp)
         * Rules:
         *  - no spaces
         *  - at most 12 chatacters per name, with a period in 9th position.
         *  - a / or a \ every at most 12 characters.
         */
        filename_to_upper_case(name);
   1beec:	e13ffe17 	ldw	r4,-8(fp)
   1bef0:	0019d8c0 	call	19d8c <filename_to_upper_case>
        if (check_file_name_for_FAT16_compliance(name))
   1bef4:	e13ffe17 	ldw	r4,-8(fp)
   1bef8:	0019e4c0 	call	19e4c <check_file_name_for_FAT16_compliance>
   1befc:	1000c926 	beq	r2,zero,1c224 <alt_up_sd_card_fopen+0x36c>
        {
			int index;

            /* Get home directory cluster location for the specified file. 0 means root directory. */
            if (!get_home_directory_cluster_for_file(name, (int *) &home_directory_cluster, &home_dir))
   1bf00:	e0ffed04 	addi	r3,fp,-76
   1bf04:	e0bfee04 	addi	r2,fp,-72
   1bf08:	e13ffe17 	ldw	r4,-8(fp)
   1bf0c:	180b883a 	mov	r5,r3
   1bf10:	100d883a 	mov	r6,r2
   1bf14:	001a40c0 	call	1a40c <get_home_directory_cluster_for_file>
   1bf18:	1000021e 	bne	r2,zero,1bf24 <alt_up_sd_card_fopen+0x6c>
            {
                return file_record_index;
   1bf1c:	e0bfeb0b 	ldhu	r2,-84(fp)
   1bf20:	0000c106 	br	1c228 <alt_up_sd_card_fopen+0x370>
            }
            
    		/* Find a free file slot to store file specs in. */
    		for (index = 0; index < MAX_FILES_OPENED; index++)
   1bf24:	e03fec15 	stw	zero,-80(fp)
   1bf28:	00000e06 	br	1bf64 <alt_up_sd_card_fopen+0xac>
    		{
    			if (active_files[index].in_use == false)
   1bf2c:	008000b4 	movhi	r2,2
   1bf30:	109ff404 	addi	r2,r2,32720
   1bf34:	e0ffec17 	ldw	r3,-80(fp)
   1bf38:	180691ba 	slli	r3,r3,6
   1bf3c:	18c00f04 	addi	r3,r3,60
   1bf40:	10c5883a 	add	r2,r2,r3
   1bf44:	10800017 	ldw	r2,0(r2)
   1bf48:	1000031e 	bne	r2,zero,1bf58 <alt_up_sd_card_fopen+0xa0>
    			{
    				file_record_index = index;
   1bf4c:	e0bfec17 	ldw	r2,-80(fp)
   1bf50:	e0bfeb0d 	sth	r2,-84(fp)
    				break;
   1bf54:	00000606 	br	1bf70 <alt_up_sd_card_fopen+0xb8>
            {
                return file_record_index;
            }
            
    		/* Find a free file slot to store file specs in. */
    		for (index = 0; index < MAX_FILES_OPENED; index++)
   1bf58:	e0bfec17 	ldw	r2,-80(fp)
   1bf5c:	10800044 	addi	r2,r2,1
   1bf60:	e0bfec15 	stw	r2,-80(fp)
   1bf64:	e0bfec17 	ldw	r2,-80(fp)
   1bf68:	10800510 	cmplti	r2,r2,20
   1bf6c:	103fef1e 	bne	r2,zero,1bf2c <__alt_mem_Flash_flash_data+0xf401bf2c>
    			{
    				file_record_index = index;
    				break;
    			}
    		}
    		if (file_record_index >= 0)
   1bf70:	e0bfeb0f 	ldh	r2,-84(fp)
   1bf74:	1000ab16 	blt	r2,zero,1c224 <alt_up_sd_card_fopen+0x36c>
    		{
    			/* If file record is found, then look for the specified file. If the create flag is set to true 
    			 * and the file is not found, then it should be created in the current directory. 
    			 */
                
                if (find_file_in_directory(home_directory_cluster, name, &(active_files[file_record_index])))
   1bf78:	e0bfed17 	ldw	r2,-76(fp)
   1bf7c:	1009883a 	mov	r4,r2
   1bf80:	e0bfeb0f 	ldh	r2,-84(fp)
   1bf84:	100691ba 	slli	r3,r2,6
   1bf88:	008000b4 	movhi	r2,2
   1bf8c:	109ff404 	addi	r2,r2,32720
   1bf90:	1885883a 	add	r2,r3,r2
   1bf94:	e17ffe17 	ldw	r5,-8(fp)
   1bf98:	100d883a 	mov	r6,r2
   1bf9c:	001a9380 	call	1a938 <find_file_in_directory>
   1bfa0:	10007c26 	beq	r2,zero,1c194 <alt_up_sd_card_fopen+0x2dc>
                {
                    if (create)
   1bfa4:	e0bfff17 	ldw	r2,-4(fp)
   1bfa8:	10000226 	beq	r2,zero,1bfb4 <alt_up_sd_card_fopen+0xfc>
                    {
                        /* Do not allow overwriting existing files for now. */
                        return -1;
   1bfac:	00bfffc4 	movi	r2,-1
   1bfb0:	00009d06 	br	1c228 <alt_up_sd_card_fopen+0x370>
                    }
                    active_files[file_record_index].current_cluster_index = active_files[file_record_index].start_cluster_index;
   1bfb4:	e13feb0f 	ldh	r4,-84(fp)
   1bfb8:	e0ffeb0f 	ldh	r3,-84(fp)
   1bfbc:	008000b4 	movhi	r2,2
   1bfc0:	109ff404 	addi	r2,r2,32720
   1bfc4:	180691ba 	slli	r3,r3,6
   1bfc8:	18c00504 	addi	r3,r3,20
   1bfcc:	10c5883a 	add	r2,r2,r3
   1bfd0:	1080008b 	ldhu	r2,2(r2)
   1bfd4:	10ffffcc 	andi	r3,r2,65535
   1bfd8:	008000b4 	movhi	r2,2
   1bfdc:	109ff404 	addi	r2,r2,32720
   1bfe0:	200891ba 	slli	r4,r4,6
   1bfe4:	21000704 	addi	r4,r4,28
   1bfe8:	1105883a 	add	r2,r2,r4
   1bfec:	10c00015 	stw	r3,0(r2)
                    active_files[file_record_index].current_sector_in_cluster = 0;
   1bff0:	e0ffeb0f 	ldh	r3,-84(fp)
   1bff4:	008000b4 	movhi	r2,2
   1bff8:	109ff404 	addi	r2,r2,32720
   1bffc:	180691ba 	slli	r3,r3,6
   1c000:	18c00804 	addi	r3,r3,32
   1c004:	10c5883a 	add	r2,r2,r3
   1c008:	10000015 	stw	zero,0(r2)
                    active_files[file_record_index].current_byte_position = 0;
   1c00c:	e0ffeb0f 	ldh	r3,-84(fp)
   1c010:	008000b4 	movhi	r2,2
   1c014:	109ff404 	addi	r2,r2,32720
   1c018:	180691ba 	slli	r3,r3,6
   1c01c:	18c00904 	addi	r3,r3,36
   1c020:	10c5883a 	add	r2,r2,r3
   1c024:	10000015 	stw	zero,0(r2)
                    active_files[file_record_index].in_use = true;
   1c028:	e0ffeb0f 	ldh	r3,-84(fp)
   1c02c:	008000b4 	movhi	r2,2
   1c030:	109ff404 	addi	r2,r2,32720
   1c034:	180691ba 	slli	r3,r3,6
   1c038:	18c00f04 	addi	r3,r3,60
   1c03c:	10c5883a 	add	r2,r2,r3
   1c040:	00c00044 	movi	r3,1
   1c044:	10c00015 	stw	r3,0(r2)
    				active_files[file_record_index].modified = false;
   1c048:	e0ffeb0f 	ldh	r3,-84(fp)
   1c04c:	008000b4 	movhi	r2,2
   1c050:	109ff404 	addi	r2,r2,32720
   1c054:	180691ba 	slli	r3,r3,6
   1c058:	18c00e04 	addi	r3,r3,56
   1c05c:	10c5883a 	add	r2,r2,r3
   1c060:	10000015 	stw	zero,0(r2)

					/* Check if the file has already been opened. */
					for (index = 0; index < MAX_FILES_OPENED; index++)
   1c064:	e03fec15 	stw	zero,-80(fp)
   1c068:	00004606 	br	1c184 <alt_up_sd_card_fopen+0x2cc>
					{
						if ((file_record_index != index) && (active_files[index].in_use == true))
   1c06c:	e0ffeb0f 	ldh	r3,-84(fp)
   1c070:	e0bfec17 	ldw	r2,-80(fp)
   1c074:	18804026 	beq	r3,r2,1c178 <alt_up_sd_card_fopen+0x2c0>
   1c078:	008000b4 	movhi	r2,2
   1c07c:	109ff404 	addi	r2,r2,32720
   1c080:	e0ffec17 	ldw	r3,-80(fp)
   1c084:	180691ba 	slli	r3,r3,6
   1c088:	18c00f04 	addi	r3,r3,60
   1c08c:	10c5883a 	add	r2,r2,r3
   1c090:	10800017 	ldw	r2,0(r2)
   1c094:	10800058 	cmpnei	r2,r2,1
   1c098:	1000371e 	bne	r2,zero,1c178 <alt_up_sd_card_fopen+0x2c0>
						{
							if ((active_files[file_record_index].file_record_cluster == active_files[index].file_record_cluster) &&
   1c09c:	e0ffeb0f 	ldh	r3,-84(fp)
   1c0a0:	008000b4 	movhi	r2,2
   1c0a4:	109ff404 	addi	r2,r2,32720
   1c0a8:	180691ba 	slli	r3,r3,6
   1c0ac:	18c00a04 	addi	r3,r3,40
   1c0b0:	10c5883a 	add	r2,r2,r3
   1c0b4:	10c00017 	ldw	r3,0(r2)
   1c0b8:	008000b4 	movhi	r2,2
   1c0bc:	109ff404 	addi	r2,r2,32720
   1c0c0:	e13fec17 	ldw	r4,-80(fp)
   1c0c4:	200891ba 	slli	r4,r4,6
   1c0c8:	21000a04 	addi	r4,r4,40
   1c0cc:	1105883a 	add	r2,r2,r4
   1c0d0:	10800017 	ldw	r2,0(r2)
   1c0d4:	1880281e 	bne	r3,r2,1c178 <alt_up_sd_card_fopen+0x2c0>
								(active_files[file_record_index].file_record_sector_in_cluster == active_files[index].file_record_sector_in_cluster) &&
   1c0d8:	e0ffeb0f 	ldh	r3,-84(fp)
   1c0dc:	008000b4 	movhi	r2,2
   1c0e0:	109ff404 	addi	r2,r2,32720
   1c0e4:	180691ba 	slli	r3,r3,6
   1c0e8:	18c00b04 	addi	r3,r3,44
   1c0ec:	10c5883a 	add	r2,r2,r3
   1c0f0:	10c00017 	ldw	r3,0(r2)
   1c0f4:	008000b4 	movhi	r2,2
   1c0f8:	109ff404 	addi	r2,r2,32720
   1c0fc:	e13fec17 	ldw	r4,-80(fp)
   1c100:	200891ba 	slli	r4,r4,6
   1c104:	21000b04 	addi	r4,r4,44
   1c108:	1105883a 	add	r2,r2,r4
   1c10c:	10800017 	ldw	r2,0(r2)
					/* Check if the file has already been opened. */
					for (index = 0; index < MAX_FILES_OPENED; index++)
					{
						if ((file_record_index != index) && (active_files[index].in_use == true))
						{
							if ((active_files[file_record_index].file_record_cluster == active_files[index].file_record_cluster) &&
   1c110:	1880191e 	bne	r3,r2,1c178 <alt_up_sd_card_fopen+0x2c0>
								(active_files[file_record_index].file_record_sector_in_cluster == active_files[index].file_record_sector_in_cluster) &&
								(active_files[file_record_index].file_record_offset == active_files[index].file_record_offset))
   1c114:	e0ffeb0f 	ldh	r3,-84(fp)
   1c118:	008000b4 	movhi	r2,2
   1c11c:	109ff404 	addi	r2,r2,32720
   1c120:	180691ba 	slli	r3,r3,6
   1c124:	18c00c04 	addi	r3,r3,48
   1c128:	10c5883a 	add	r2,r2,r3
   1c12c:	1100000b 	ldhu	r4,0(r2)
   1c130:	008000b4 	movhi	r2,2
   1c134:	109ff404 	addi	r2,r2,32720
   1c138:	e0ffec17 	ldw	r3,-80(fp)
   1c13c:	180691ba 	slli	r3,r3,6
   1c140:	18c00c04 	addi	r3,r3,48
   1c144:	10c5883a 	add	r2,r2,r3
   1c148:	1080000b 	ldhu	r2,0(r2)
					for (index = 0; index < MAX_FILES_OPENED; index++)
					{
						if ((file_record_index != index) && (active_files[index].in_use == true))
						{
							if ((active_files[file_record_index].file_record_cluster == active_files[index].file_record_cluster) &&
								(active_files[file_record_index].file_record_sector_in_cluster == active_files[index].file_record_sector_in_cluster) &&
   1c14c:	20ffffcc 	andi	r3,r4,65535
   1c150:	18e0001c 	xori	r3,r3,32768
   1c154:	18e00004 	addi	r3,r3,-32768
   1c158:	10bfffcc 	andi	r2,r2,65535
   1c15c:	10a0001c 	xori	r2,r2,32768
   1c160:	10a00004 	addi	r2,r2,-32768
   1c164:	1880041e 	bne	r3,r2,1c178 <alt_up_sd_card_fopen+0x2c0>
								(active_files[file_record_index].file_record_offset == active_files[index].file_record_offset))
							{
								// file already in use.
								file_record_index = -2;
   1c168:	00bfff84 	movi	r2,-2
   1c16c:	e0bfeb0d 	sth	r2,-84(fp)
								break;
   1c170:	0001883a 	nop
   1c174:	00002b06 	br	1c224 <alt_up_sd_card_fopen+0x36c>
                    active_files[file_record_index].current_byte_position = 0;
                    active_files[file_record_index].in_use = true;
    				active_files[file_record_index].modified = false;

					/* Check if the file has already been opened. */
					for (index = 0; index < MAX_FILES_OPENED; index++)
   1c178:	e0bfec17 	ldw	r2,-80(fp)
   1c17c:	10800044 	addi	r2,r2,1
   1c180:	e0bfec15 	stw	r2,-80(fp)
   1c184:	e0bfec17 	ldw	r2,-80(fp)
   1c188:	10800510 	cmplti	r2,r2,20
   1c18c:	103fb71e 	bne	r2,zero,1c06c <__alt_mem_Flash_flash_data+0xf401c06c>
   1c190:	00002406 	br	1c224 <alt_up_sd_card_fopen+0x36c>
							}
						}
					}

                }
                else if (create)
   1c194:	e0bfff17 	ldw	r2,-4(fp)
   1c198:	10001f26 	beq	r2,zero,1c218 <alt_up_sd_card_fopen+0x360>
                {
                    /* Create file if needed. */
                    if (create_file(name, &(active_files[file_record_index]), &home_dir))
   1c19c:	e0bfeb0f 	ldh	r2,-84(fp)
   1c1a0:	100691ba 	slli	r3,r2,6
   1c1a4:	008000b4 	movhi	r2,2
   1c1a8:	109ff404 	addi	r2,r2,32720
   1c1ac:	1887883a 	add	r3,r3,r2
   1c1b0:	e0bfee04 	addi	r2,fp,-72
   1c1b4:	e13ffe17 	ldw	r4,-8(fp)
   1c1b8:	180b883a 	mov	r5,r3
   1c1bc:	100d883a 	mov	r6,r2
   1c1c0:	001b4440 	call	1b444 <create_file>
   1c1c4:	10001126 	beq	r2,zero,1c20c <alt_up_sd_card_fopen+0x354>
                    {
                        active_files[file_record_index].in_use = true;
   1c1c8:	e0ffeb0f 	ldh	r3,-84(fp)
   1c1cc:	008000b4 	movhi	r2,2
   1c1d0:	109ff404 	addi	r2,r2,32720
   1c1d4:	180691ba 	slli	r3,r3,6
   1c1d8:	18c00f04 	addi	r3,r3,60
   1c1dc:	10c5883a 	add	r2,r2,r3
   1c1e0:	00c00044 	movi	r3,1
   1c1e4:	10c00015 	stw	r3,0(r2)
    					active_files[file_record_index].modified = true;
   1c1e8:	e0ffeb0f 	ldh	r3,-84(fp)
   1c1ec:	008000b4 	movhi	r2,2
   1c1f0:	109ff404 	addi	r2,r2,32720
   1c1f4:	180691ba 	slli	r3,r3,6
   1c1f8:	18c00e04 	addi	r3,r3,56
   1c1fc:	10c5883a 	add	r2,r2,r3
   1c200:	00c00044 	movi	r3,1
   1c204:	10c00015 	stw	r3,0(r2)
   1c208:	00000606 	br	1c224 <alt_up_sd_card_fopen+0x36c>
                    }
                    else
                    {
                        /* If file creation fails then return an invalid file handle. */
                        file_record_index = -1;
   1c20c:	00bfffc4 	movi	r2,-1
   1c210:	e0bfeb0d 	sth	r2,-84(fp)
   1c214:	00000306 	br	1c224 <alt_up_sd_card_fopen+0x36c>
                    }                
                }
                else
                {
                    /* Otherwise the file could not be opened.*/
                    file_record_index = -1;
   1c218:	00bfffc4 	movi	r2,-1
   1c21c:	e0bfeb0d 	sth	r2,-84(fp)
   1c220:	00000006 	br	1c224 <alt_up_sd_card_fopen+0x36c>
                }
    		}
        }
	}

	return file_record_index;
   1c224:	e0bfeb0b 	ldhu	r2,-84(fp)
}
   1c228:	e037883a 	mov	sp,fp
   1c22c:	dfc00117 	ldw	ra,4(sp)
   1c230:	df000017 	ldw	fp,0(sp)
   1c234:	dec00204 	addi	sp,sp,8
   1c238:	f800283a 	ret

0001c23c <alt_up_sd_card_set_attributes>:


void alt_up_sd_card_set_attributes(short int file_handle, short int attributes)
/* Return file attributes, or -1 if the file_handle is invalid.
 */
{
   1c23c:	defffd04 	addi	sp,sp,-12
   1c240:	df000215 	stw	fp,8(sp)
   1c244:	df000204 	addi	fp,sp,8
   1c248:	2007883a 	mov	r3,r4
   1c24c:	2805883a 	mov	r2,r5
   1c250:	e0fffe0d 	sth	r3,-8(fp)
   1c254:	e0bfff0d 	sth	r2,-4(fp)
    if ((file_handle >= 0) && (file_handle < MAX_FILES_OPENED))
   1c258:	e0bffe0f 	ldh	r2,-8(fp)
   1c25c:	10001416 	blt	r2,zero,1c2b0 <alt_up_sd_card_set_attributes+0x74>
   1c260:	e0bffe0f 	ldh	r2,-8(fp)
   1c264:	10800508 	cmpgei	r2,r2,20
   1c268:	1000111e 	bne	r2,zero,1c2b0 <alt_up_sd_card_set_attributes+0x74>
    {
        if (active_files[file_handle].in_use)
   1c26c:	e0fffe0f 	ldh	r3,-8(fp)
   1c270:	008000b4 	movhi	r2,2
   1c274:	109ff404 	addi	r2,r2,32720
   1c278:	180691ba 	slli	r3,r3,6
   1c27c:	18c00f04 	addi	r3,r3,60
   1c280:	10c5883a 	add	r2,r2,r3
   1c284:	10800017 	ldw	r2,0(r2)
   1c288:	10000926 	beq	r2,zero,1c2b0 <alt_up_sd_card_set_attributes+0x74>
        {
            active_files[file_handle].attributes = ((char)(attributes & 0x00ff));
   1c28c:	e0fffe0f 	ldh	r3,-8(fp)
   1c290:	e0bfff0b 	ldhu	r2,-4(fp)
   1c294:	1009883a 	mov	r4,r2
   1c298:	008000b4 	movhi	r2,2
   1c29c:	109ff404 	addi	r2,r2,32720
   1c2a0:	180691ba 	slli	r3,r3,6
   1c2a4:	18c00204 	addi	r3,r3,8
   1c2a8:	10c5883a 	add	r2,r2,r3
   1c2ac:	110000c5 	stb	r4,3(r2)
        }
    }
}
   1c2b0:	e037883a 	mov	sp,fp
   1c2b4:	df000017 	ldw	fp,0(sp)
   1c2b8:	dec00104 	addi	sp,sp,4
   1c2bc:	f800283a 	ret

0001c2c0 <alt_up_sd_card_get_attributes>:


short int alt_up_sd_card_get_attributes(short int file_handle)
/* Return file attributes, or -1 if the file_handle is invalid.
 */
{
   1c2c0:	defffd04 	addi	sp,sp,-12
   1c2c4:	df000215 	stw	fp,8(sp)
   1c2c8:	df000204 	addi	fp,sp,8
   1c2cc:	2005883a 	mov	r2,r4
   1c2d0:	e0bfff0d 	sth	r2,-4(fp)
	short int result = -1;
   1c2d4:	00bfffc4 	movi	r2,-1
   1c2d8:	e0bffe0d 	sth	r2,-8(fp)
    if ((file_handle >= 0) && (file_handle < MAX_FILES_OPENED))
   1c2dc:	e0bfff0f 	ldh	r2,-4(fp)
   1c2e0:	10001416 	blt	r2,zero,1c334 <alt_up_sd_card_get_attributes+0x74>
   1c2e4:	e0bfff0f 	ldh	r2,-4(fp)
   1c2e8:	10800508 	cmpgei	r2,r2,20
   1c2ec:	1000111e 	bne	r2,zero,1c334 <alt_up_sd_card_get_attributes+0x74>
    {
        if (active_files[file_handle].in_use)
   1c2f0:	e0ffff0f 	ldh	r3,-4(fp)
   1c2f4:	008000b4 	movhi	r2,2
   1c2f8:	109ff404 	addi	r2,r2,32720
   1c2fc:	180691ba 	slli	r3,r3,6
   1c300:	18c00f04 	addi	r3,r3,60
   1c304:	10c5883a 	add	r2,r2,r3
   1c308:	10800017 	ldw	r2,0(r2)
   1c30c:	10000926 	beq	r2,zero,1c334 <alt_up_sd_card_get_attributes+0x74>
		{
			result = ((active_files[file_handle].attributes) & 0x00ff);
   1c310:	e0ffff0f 	ldh	r3,-4(fp)
   1c314:	008000b4 	movhi	r2,2
   1c318:	109ff404 	addi	r2,r2,32720
   1c31c:	180691ba 	slli	r3,r3,6
   1c320:	18c00204 	addi	r3,r3,8
   1c324:	10c5883a 	add	r2,r2,r3
   1c328:	108000c3 	ldbu	r2,3(r2)
   1c32c:	10803fcc 	andi	r2,r2,255
   1c330:	e0bffe0d 	sth	r2,-8(fp)
		}
	}
	return result;
   1c334:	e0bffe0b 	ldhu	r2,-8(fp)
}
   1c338:	e037883a 	mov	sp,fp
   1c33c:	df000017 	ldw	fp,0(sp)
   1c340:	dec00104 	addi	sp,sp,4
   1c344:	f800283a 	ret

0001c348 <alt_up_sd_card_read>:

short int alt_up_sd_card_read(short int file_handle)
/* Read a single character from a given file. Return -1 if at the end of a file. Any other negative number
 * means that the file could not be read. A number between 0 and 255 is an ASCII character read from the SD Card. */
{
   1c348:	defffa04 	addi	sp,sp,-24
   1c34c:	dfc00515 	stw	ra,20(sp)
   1c350:	df000415 	stw	fp,16(sp)
   1c354:	df000404 	addi	fp,sp,16
   1c358:	2005883a 	mov	r2,r4
   1c35c:	e0bfff0d 	sth	r2,-4(fp)
    short int ch = -1;
   1c360:	00bfffc4 	movi	r2,-1
   1c364:	e0bffc0d 	sth	r2,-16(fp)
    
    if ((file_handle >= 0) && (file_handle < MAX_FILES_OPENED))
   1c368:	e0bfff0f 	ldh	r2,-4(fp)
   1c36c:	1000ce16 	blt	r2,zero,1c6a8 <alt_up_sd_card_read+0x360>
   1c370:	e0bfff0f 	ldh	r2,-4(fp)
   1c374:	10800508 	cmpgei	r2,r2,20
   1c378:	1000cb1e 	bne	r2,zero,1c6a8 <alt_up_sd_card_read+0x360>
    {
        if (active_files[file_handle].in_use)
   1c37c:	e0ffff0f 	ldh	r3,-4(fp)
   1c380:	008000b4 	movhi	r2,2
   1c384:	109ff404 	addi	r2,r2,32720
   1c388:	180691ba 	slli	r3,r3,6
   1c38c:	18c00f04 	addi	r3,r3,60
   1c390:	10c5883a 	add	r2,r2,r3
   1c394:	10800017 	ldw	r2,0(r2)
   1c398:	1000c326 	beq	r2,zero,1c6a8 <alt_up_sd_card_read+0x360>
        {
            if (active_files[file_handle].current_byte_position < active_files[file_handle].file_size_in_bytes)
   1c39c:	e0ffff0f 	ldh	r3,-4(fp)
   1c3a0:	008000b4 	movhi	r2,2
   1c3a4:	109ff404 	addi	r2,r2,32720
   1c3a8:	180691ba 	slli	r3,r3,6
   1c3ac:	18c00904 	addi	r3,r3,36
   1c3b0:	10c5883a 	add	r2,r2,r3
   1c3b4:	10c00017 	ldw	r3,0(r2)
   1c3b8:	e13fff0f 	ldh	r4,-4(fp)
   1c3bc:	008000b4 	movhi	r2,2
   1c3c0:	109ff404 	addi	r2,r2,32720
   1c3c4:	200891ba 	slli	r4,r4,6
   1c3c8:	21000604 	addi	r4,r4,24
   1c3cc:	1105883a 	add	r2,r2,r4
   1c3d0:	10800017 	ldw	r2,0(r2)
   1c3d4:	1880b42e 	bgeu	r3,r2,1c6a8 <alt_up_sd_card_read+0x360>
            {
                int data_sector = boot_sector_data.data_sector_offset + (active_files[file_handle].current_cluster_index - 2)*boot_sector_data.sectors_per_cluster +
   1c3d8:	008000b4 	movhi	r2,2
   1c3dc:	109fdf04 	addi	r2,r2,32636
   1c3e0:	10c01417 	ldw	r3,80(r2)
   1c3e4:	e13fff0f 	ldh	r4,-4(fp)
   1c3e8:	008000b4 	movhi	r2,2
   1c3ec:	109ff404 	addi	r2,r2,32720
   1c3f0:	200891ba 	slli	r4,r4,6
   1c3f4:	21000704 	addi	r4,r4,28
   1c3f8:	1105883a 	add	r2,r2,r4
   1c3fc:	10800017 	ldw	r2,0(r2)
   1c400:	113fff84 	addi	r4,r2,-2
   1c404:	008000b4 	movhi	r2,2
   1c408:	109fdf04 	addi	r2,r2,32636
   1c40c:	10800383 	ldbu	r2,14(r2)
   1c410:	10803fcc 	andi	r2,r2,255
   1c414:	2085383a 	mul	r2,r4,r2
   1c418:	1887883a 	add	r3,r3,r2
                                  active_files[file_handle].current_sector_in_cluster;
   1c41c:	e13fff0f 	ldh	r4,-4(fp)
   1c420:	008000b4 	movhi	r2,2
   1c424:	109ff404 	addi	r2,r2,32720
   1c428:	200891ba 	slli	r4,r4,6
   1c42c:	21000804 	addi	r4,r4,32
   1c430:	1105883a 	add	r2,r2,r4
   1c434:	10800017 	ldw	r2,0(r2)
    {
        if (active_files[file_handle].in_use)
        {
            if (active_files[file_handle].current_byte_position < active_files[file_handle].file_size_in_bytes)
            {
                int data_sector = boot_sector_data.data_sector_offset + (active_files[file_handle].current_cluster_index - 2)*boot_sector_data.sectors_per_cluster +
   1c438:	1885883a 	add	r2,r3,r2
   1c43c:	e0bffd15 	stw	r2,-12(fp)
                                  active_files[file_handle].current_sector_in_cluster;
                
                if ((active_files[file_handle].current_byte_position > 0) && ((active_files[file_handle].current_byte_position % 512) == 0))
   1c440:	e0ffff0f 	ldh	r3,-4(fp)
   1c444:	008000b4 	movhi	r2,2
   1c448:	109ff404 	addi	r2,r2,32720
   1c44c:	180691ba 	slli	r3,r3,6
   1c450:	18c00904 	addi	r3,r3,36
   1c454:	10c5883a 	add	r2,r2,r3
   1c458:	10800017 	ldw	r2,0(r2)
   1c45c:	10006826 	beq	r2,zero,1c600 <alt_up_sd_card_read+0x2b8>
   1c460:	e0ffff0f 	ldh	r3,-4(fp)
   1c464:	008000b4 	movhi	r2,2
   1c468:	109ff404 	addi	r2,r2,32720
   1c46c:	180691ba 	slli	r3,r3,6
   1c470:	18c00904 	addi	r3,r3,36
   1c474:	10c5883a 	add	r2,r2,r3
   1c478:	10800017 	ldw	r2,0(r2)
   1c47c:	10807fcc 	andi	r2,r2,511
   1c480:	10005f1e 	bne	r2,zero,1c600 <alt_up_sd_card_read+0x2b8>
                {
                    // Read in a new sector of data.
                    if (active_files[file_handle].current_sector_in_cluster == boot_sector_data.sectors_per_cluster - 1)
   1c484:	e0ffff0f 	ldh	r3,-4(fp)
   1c488:	008000b4 	movhi	r2,2
   1c48c:	109ff404 	addi	r2,r2,32720
   1c490:	180691ba 	slli	r3,r3,6
   1c494:	18c00804 	addi	r3,r3,32
   1c498:	10c5883a 	add	r2,r2,r3
   1c49c:	10c00017 	ldw	r3,0(r2)
   1c4a0:	008000b4 	movhi	r2,2
   1c4a4:	109fdf04 	addi	r2,r2,32636
   1c4a8:	10800383 	ldbu	r2,14(r2)
   1c4ac:	10803fcc 	andi	r2,r2,255
   1c4b0:	10bfffc4 	addi	r2,r2,-1
   1c4b4:	1880401e 	bne	r3,r2,1c5b8 <alt_up_sd_card_read+0x270>
                    {
                        // Go to the next cluster.
                        unsigned short int next_cluster;
                        if (get_cluster_flag(active_files[file_handle].current_cluster_index, &next_cluster))
   1c4b8:	e0ffff0f 	ldh	r3,-4(fp)
   1c4bc:	008000b4 	movhi	r2,2
   1c4c0:	109ff404 	addi	r2,r2,32720
   1c4c4:	180691ba 	slli	r3,r3,6
   1c4c8:	18c00704 	addi	r3,r3,28
   1c4cc:	10c5883a 	add	r2,r2,r3
   1c4d0:	10c00017 	ldw	r3,0(r2)
   1c4d4:	e0bffe04 	addi	r2,fp,-8
   1c4d8:	1809883a 	mov	r4,r3
   1c4dc:	100b883a 	mov	r5,r2
   1c4e0:	0018dd00 	call	18dd0 <get_cluster_flag>
   1c4e4:	10003226 	beq	r2,zero,1c5b0 <alt_up_sd_card_read+0x268>
                        {
                            if ((next_cluster & 0x0000fff8) == 0x0000fff8)
   1c4e8:	e0bffe0b 	ldhu	r2,-8(fp)
   1c4ec:	10bfffcc 	andi	r2,r2,65535
   1c4f0:	10fffe0c 	andi	r3,r2,65528
   1c4f4:	00bffe14 	movui	r2,65528
   1c4f8:	1880021e 	bne	r3,r2,1c504 <alt_up_sd_card_read+0x1bc>
                            {
                                /* End of file */
                                return -1;
   1c4fc:	00bfffc4 	movi	r2,-1
   1c500:	00006a06 	br	1c6ac <alt_up_sd_card_read+0x364>
                            } 
                            else
                            {
                                active_files[file_handle].current_cluster_index = next_cluster;
   1c504:	e13fff0f 	ldh	r4,-4(fp)
   1c508:	e0bffe0b 	ldhu	r2,-8(fp)
   1c50c:	10ffffcc 	andi	r3,r2,65535
   1c510:	008000b4 	movhi	r2,2
   1c514:	109ff404 	addi	r2,r2,32720
   1c518:	200891ba 	slli	r4,r4,6
   1c51c:	21000704 	addi	r4,r4,28
   1c520:	1105883a 	add	r2,r2,r4
   1c524:	10c00015 	stw	r3,0(r2)
								active_files[file_handle].current_sector_in_cluster = 0;
   1c528:	e0ffff0f 	ldh	r3,-4(fp)
   1c52c:	008000b4 	movhi	r2,2
   1c530:	109ff404 	addi	r2,r2,32720
   1c534:	180691ba 	slli	r3,r3,6
   1c538:	18c00804 	addi	r3,r3,32
   1c53c:	10c5883a 	add	r2,r2,r3
   1c540:	10000015 	stw	zero,0(r2)
                                data_sector = boot_sector_data.data_sector_offset + (active_files[file_handle].current_cluster_index - 2)*boot_sector_data.sectors_per_cluster +
   1c544:	008000b4 	movhi	r2,2
   1c548:	109fdf04 	addi	r2,r2,32636
   1c54c:	10c01417 	ldw	r3,80(r2)
   1c550:	e13fff0f 	ldh	r4,-4(fp)
   1c554:	008000b4 	movhi	r2,2
   1c558:	109ff404 	addi	r2,r2,32720
   1c55c:	200891ba 	slli	r4,r4,6
   1c560:	21000704 	addi	r4,r4,28
   1c564:	1105883a 	add	r2,r2,r4
   1c568:	10800017 	ldw	r2,0(r2)
   1c56c:	113fff84 	addi	r4,r2,-2
   1c570:	008000b4 	movhi	r2,2
   1c574:	109fdf04 	addi	r2,r2,32636
   1c578:	10800383 	ldbu	r2,14(r2)
   1c57c:	10803fcc 	andi	r2,r2,255
   1c580:	2085383a 	mul	r2,r4,r2
   1c584:	1887883a 	add	r3,r3,r2
                                  active_files[file_handle].current_sector_in_cluster;                                
   1c588:	e13fff0f 	ldh	r4,-4(fp)
   1c58c:	008000b4 	movhi	r2,2
   1c590:	109ff404 	addi	r2,r2,32720
   1c594:	200891ba 	slli	r4,r4,6
   1c598:	21000804 	addi	r4,r4,32
   1c59c:	1105883a 	add	r2,r2,r4
   1c5a0:	10800017 	ldw	r2,0(r2)
                            } 
                            else
                            {
                                active_files[file_handle].current_cluster_index = next_cluster;
								active_files[file_handle].current_sector_in_cluster = 0;
                                data_sector = boot_sector_data.data_sector_offset + (active_files[file_handle].current_cluster_index - 2)*boot_sector_data.sectors_per_cluster +
   1c5a4:	1885883a 	add	r2,r3,r2
   1c5a8:	e0bffd15 	stw	r2,-12(fp)
   1c5ac:	00001406 	br	1c600 <alt_up_sd_card_read+0x2b8>
                                  active_files[file_handle].current_sector_in_cluster;                                
                            }
                        }
                        else
                        {
                            return -2;
   1c5b0:	00bfff84 	movi	r2,-2
   1c5b4:	00003d06 	br	1c6ac <alt_up_sd_card_read+0x364>
                        }
                    }
                    else
                    {
                        active_files[file_handle].current_sector_in_cluster = active_files[file_handle].current_sector_in_cluster + 1;
   1c5b8:	e13fff0f 	ldh	r4,-4(fp)
   1c5bc:	e0ffff0f 	ldh	r3,-4(fp)
   1c5c0:	008000b4 	movhi	r2,2
   1c5c4:	109ff404 	addi	r2,r2,32720
   1c5c8:	180691ba 	slli	r3,r3,6
   1c5cc:	18c00804 	addi	r3,r3,32
   1c5d0:	10c5883a 	add	r2,r2,r3
   1c5d4:	10800017 	ldw	r2,0(r2)
   1c5d8:	10c00044 	addi	r3,r2,1
   1c5dc:	008000b4 	movhi	r2,2
   1c5e0:	109ff404 	addi	r2,r2,32720
   1c5e4:	200891ba 	slli	r4,r4,6
   1c5e8:	21000804 	addi	r4,r4,32
   1c5ec:	1105883a 	add	r2,r2,r4
   1c5f0:	10c00015 	stw	r3,0(r2)
                        data_sector = data_sector + 1;
   1c5f4:	e0bffd17 	ldw	r2,-12(fp)
   1c5f8:	10800044 	addi	r2,r2,1
   1c5fc:	e0bffd15 	stw	r2,-12(fp)
                    }
                }
                // Reading te first byte of the file.
                if (current_sector_index != (data_sector + fat_partition_offset_in_512_byte_sectors))
   1c600:	d0e81817 	ldw	r3,-24480(gp)
   1c604:	e0bffd17 	ldw	r2,-12(fp)
   1c608:	1885883a 	add	r2,r3,r2
   1c60c:	1007883a 	mov	r3,r2
   1c610:	d0a81c17 	ldw	r2,-24464(gp)
   1c614:	18800726 	beq	r3,r2,1c634 <alt_up_sd_card_read+0x2ec>
                {
                    if (!Read_Sector_Data(data_sector, fat_partition_offset_in_512_byte_sectors))
   1c618:	d0a81817 	ldw	r2,-24480(gp)
   1c61c:	e13ffd17 	ldw	r4,-12(fp)
   1c620:	100b883a 	mov	r5,r2
   1c624:	0018cf80 	call	18cf8 <Read_Sector_Data>
   1c628:	1000021e 	bne	r2,zero,1c634 <alt_up_sd_card_read+0x2ec>
                    {
						return -2;
   1c62c:	00bfff84 	movi	r2,-2
   1c630:	00001e06 	br	1c6ac <alt_up_sd_card_read+0x364>
                    }
                }

                ch = (unsigned char) IORD_8DIRECT(buffer_memory, (active_files[file_handle].current_byte_position % 512));
   1c634:	d0e81717 	ldw	r3,-24484(gp)
   1c638:	e13fff0f 	ldh	r4,-4(fp)
   1c63c:	008000b4 	movhi	r2,2
   1c640:	109ff404 	addi	r2,r2,32720
   1c644:	200891ba 	slli	r4,r4,6
   1c648:	21000904 	addi	r4,r4,36
   1c64c:	1105883a 	add	r2,r2,r4
   1c650:	10800017 	ldw	r2,0(r2)
   1c654:	10807fcc 	andi	r2,r2,511
   1c658:	1885883a 	add	r2,r3,r2
   1c65c:	10800023 	ldbuio	r2,0(r2)
   1c660:	10803fcc 	andi	r2,r2,255
   1c664:	10803fcc 	andi	r2,r2,255
   1c668:	e0bffc0d 	sth	r2,-16(fp)
                active_files[file_handle].current_byte_position = active_files[file_handle].current_byte_position + 1;
   1c66c:	e13fff0f 	ldh	r4,-4(fp)
   1c670:	e0ffff0f 	ldh	r3,-4(fp)
   1c674:	008000b4 	movhi	r2,2
   1c678:	109ff404 	addi	r2,r2,32720
   1c67c:	180691ba 	slli	r3,r3,6
   1c680:	18c00904 	addi	r3,r3,36
   1c684:	10c5883a 	add	r2,r2,r3
   1c688:	10800017 	ldw	r2,0(r2)
   1c68c:	10c00044 	addi	r3,r2,1
   1c690:	008000b4 	movhi	r2,2
   1c694:	109ff404 	addi	r2,r2,32720
   1c698:	200891ba 	slli	r4,r4,6
   1c69c:	21000904 	addi	r4,r4,36
   1c6a0:	1105883a 	add	r2,r2,r4
   1c6a4:	10c00015 	stw	r3,0(r2)
            }
        }
    }
    
    return ch;
   1c6a8:	e0bffc0b 	ldhu	r2,-16(fp)
}
   1c6ac:	e037883a 	mov	sp,fp
   1c6b0:	dfc00117 	ldw	ra,4(sp)
   1c6b4:	df000017 	ldw	fp,0(sp)
   1c6b8:	dec00204 	addi	sp,sp,8
   1c6bc:	f800283a 	ret

0001c6c0 <alt_up_sd_card_write>:


bool alt_up_sd_card_write(short int file_handle, char byte_of_data)
/* Write a single character to a given file. Return true if successful, and false otherwise. */
{
   1c6c0:	defff804 	addi	sp,sp,-32
   1c6c4:	dfc00715 	stw	ra,28(sp)
   1c6c8:	df000615 	stw	fp,24(sp)
   1c6cc:	df000604 	addi	fp,sp,24
   1c6d0:	2007883a 	mov	r3,r4
   1c6d4:	2805883a 	mov	r2,r5
   1c6d8:	e0fffe0d 	sth	r3,-8(fp)
   1c6dc:	e0bfff05 	stb	r2,-4(fp)
    bool result = false;
   1c6e0:	e03ffa15 	stw	zero,-24(fp)
    
    if ((file_handle >= 0) && (file_handle < MAX_FILES_OPENED))
   1c6e4:	e0bffe0f 	ldh	r2,-8(fp)
   1c6e8:	10017816 	blt	r2,zero,1cccc <alt_up_sd_card_write+0x60c>
   1c6ec:	e0bffe0f 	ldh	r2,-8(fp)
   1c6f0:	10800508 	cmpgei	r2,r2,20
   1c6f4:	1001751e 	bne	r2,zero,1cccc <alt_up_sd_card_write+0x60c>
    {
        if (active_files[file_handle].in_use)
   1c6f8:	e0fffe0f 	ldh	r3,-8(fp)
   1c6fc:	008000b4 	movhi	r2,2
   1c700:	109ff404 	addi	r2,r2,32720
   1c704:	180691ba 	slli	r3,r3,6
   1c708:	18c00f04 	addi	r3,r3,60
   1c70c:	10c5883a 	add	r2,r2,r3
   1c710:	10800017 	ldw	r2,0(r2)
   1c714:	10016d26 	beq	r2,zero,1cccc <alt_up_sd_card_write+0x60c>
        {
            int data_sector = boot_sector_data.data_sector_offset + (active_files[file_handle].current_cluster_index - 2)*boot_sector_data.sectors_per_cluster +
   1c718:	008000b4 	movhi	r2,2
   1c71c:	109fdf04 	addi	r2,r2,32636
   1c720:	10c01417 	ldw	r3,80(r2)
   1c724:	e13ffe0f 	ldh	r4,-8(fp)
   1c728:	008000b4 	movhi	r2,2
   1c72c:	109ff404 	addi	r2,r2,32720
   1c730:	200891ba 	slli	r4,r4,6
   1c734:	21000704 	addi	r4,r4,28
   1c738:	1105883a 	add	r2,r2,r4
   1c73c:	10800017 	ldw	r2,0(r2)
   1c740:	113fff84 	addi	r4,r2,-2
   1c744:	008000b4 	movhi	r2,2
   1c748:	109fdf04 	addi	r2,r2,32636
   1c74c:	10800383 	ldbu	r2,14(r2)
   1c750:	10803fcc 	andi	r2,r2,255
   1c754:	2085383a 	mul	r2,r4,r2
   1c758:	1887883a 	add	r3,r3,r2
                              active_files[file_handle].current_sector_in_cluster;
   1c75c:	e13ffe0f 	ldh	r4,-8(fp)
   1c760:	008000b4 	movhi	r2,2
   1c764:	109ff404 	addi	r2,r2,32720
   1c768:	200891ba 	slli	r4,r4,6
   1c76c:	21000804 	addi	r4,r4,32
   1c770:	1105883a 	add	r2,r2,r4
   1c774:	10800017 	ldw	r2,0(r2)
    
    if ((file_handle >= 0) && (file_handle < MAX_FILES_OPENED))
    {
        if (active_files[file_handle].in_use)
        {
            int data_sector = boot_sector_data.data_sector_offset + (active_files[file_handle].current_cluster_index - 2)*boot_sector_data.sectors_per_cluster +
   1c778:	1885883a 	add	r2,r3,r2
   1c77c:	e0bffb15 	stw	r2,-20(fp)
                              active_files[file_handle].current_sector_in_cluster;
			short int buffer_offset = active_files[file_handle].current_byte_position % boot_sector_data.sector_size_in_bytes;
   1c780:	e0fffe0f 	ldh	r3,-8(fp)
   1c784:	008000b4 	movhi	r2,2
   1c788:	109ff404 	addi	r2,r2,32720
   1c78c:	180691ba 	slli	r3,r3,6
   1c790:	18c00904 	addi	r3,r3,36
   1c794:	10c5883a 	add	r2,r2,r3
   1c798:	10c00017 	ldw	r3,0(r2)
   1c79c:	008000b4 	movhi	r2,2
   1c7a0:	109fdf04 	addi	r2,r2,32636
   1c7a4:	1080030b 	ldhu	r2,12(r2)
   1c7a8:	10bfffcc 	andi	r2,r2,65535
   1c7ac:	1889203a 	divu	r4,r3,r2
   1c7b0:	2085383a 	mul	r2,r4,r2
   1c7b4:	1885c83a 	sub	r2,r3,r2
   1c7b8:	e0bffc0d 	sth	r2,-16(fp)

			if (active_files[file_handle].current_byte_position < active_files[file_handle].file_size_in_bytes)
   1c7bc:	e0fffe0f 	ldh	r3,-8(fp)
   1c7c0:	008000b4 	movhi	r2,2
   1c7c4:	109ff404 	addi	r2,r2,32720
   1c7c8:	180691ba 	slli	r3,r3,6
   1c7cc:	18c00904 	addi	r3,r3,36
   1c7d0:	10c5883a 	add	r2,r2,r3
   1c7d4:	10c00017 	ldw	r3,0(r2)
   1c7d8:	e13ffe0f 	ldh	r4,-8(fp)
   1c7dc:	008000b4 	movhi	r2,2
   1c7e0:	109ff404 	addi	r2,r2,32720
   1c7e4:	200891ba 	slli	r4,r4,6
   1c7e8:	21000604 	addi	r4,r4,24
   1c7ec:	1105883a 	add	r2,r2,r4
   1c7f0:	10800017 	ldw	r2,0(r2)
   1c7f4:	1880682e 	bgeu	r3,r2,1c998 <alt_up_sd_card_write+0x2d8>
            {
                if ((active_files[file_handle].current_byte_position > 0) && (buffer_offset == 0))
   1c7f8:	e0fffe0f 	ldh	r3,-8(fp)
   1c7fc:	008000b4 	movhi	r2,2
   1c800:	109ff404 	addi	r2,r2,32720
   1c804:	180691ba 	slli	r3,r3,6
   1c808:	18c00904 	addi	r3,r3,36
   1c80c:	10c5883a 	add	r2,r2,r3
   1c810:	10800017 	ldw	r2,0(r2)
   1c814:	1000e226 	beq	r2,zero,1cba0 <alt_up_sd_card_write+0x4e0>
   1c818:	e0bffc0f 	ldh	r2,-16(fp)
   1c81c:	1000e01e 	bne	r2,zero,1cba0 <alt_up_sd_card_write+0x4e0>
                {
                    // Read in a new sector of data.
                    if (active_files[file_handle].current_sector_in_cluster == boot_sector_data.sectors_per_cluster - 1)
   1c820:	e0fffe0f 	ldh	r3,-8(fp)
   1c824:	008000b4 	movhi	r2,2
   1c828:	109ff404 	addi	r2,r2,32720
   1c82c:	180691ba 	slli	r3,r3,6
   1c830:	18c00804 	addi	r3,r3,32
   1c834:	10c5883a 	add	r2,r2,r3
   1c838:	10c00017 	ldw	r3,0(r2)
   1c83c:	008000b4 	movhi	r2,2
   1c840:	109fdf04 	addi	r2,r2,32636
   1c844:	10800383 	ldbu	r2,14(r2)
   1c848:	10803fcc 	andi	r2,r2,255
   1c84c:	10bfffc4 	addi	r2,r2,-1
   1c850:	18803e1e 	bne	r3,r2,1c94c <alt_up_sd_card_write+0x28c>
                    {
                        // Go to the next cluster.
                        unsigned short int next_cluster;
                        if (get_cluster_flag(active_files[file_handle].current_cluster_index, &next_cluster))
   1c854:	e0fffe0f 	ldh	r3,-8(fp)
   1c858:	008000b4 	movhi	r2,2
   1c85c:	109ff404 	addi	r2,r2,32720
   1c860:	180691ba 	slli	r3,r3,6
   1c864:	18c00704 	addi	r3,r3,28
   1c868:	10c5883a 	add	r2,r2,r3
   1c86c:	10c00017 	ldw	r3,0(r2)
   1c870:	e0bffc84 	addi	r2,fp,-14
   1c874:	1809883a 	mov	r4,r3
   1c878:	100b883a 	mov	r5,r2
   1c87c:	0018dd00 	call	18dd0 <get_cluster_flag>
   1c880:	10003026 	beq	r2,zero,1c944 <alt_up_sd_card_write+0x284>
                        {
                            if (next_cluster < 0x0000fff8)
   1c884:	e0bffc8b 	ldhu	r2,-14(fp)
   1c888:	10bfffcc 	andi	r2,r2,65535
   1c88c:	10bffe28 	cmpgeui	r2,r2,65528
   1c890:	10002b1e 	bne	r2,zero,1c940 <alt_up_sd_card_write+0x280>
                            {
                                active_files[file_handle].current_cluster_index = next_cluster;
   1c894:	e13ffe0f 	ldh	r4,-8(fp)
   1c898:	e0bffc8b 	ldhu	r2,-14(fp)
   1c89c:	10ffffcc 	andi	r3,r2,65535
   1c8a0:	008000b4 	movhi	r2,2
   1c8a4:	109ff404 	addi	r2,r2,32720
   1c8a8:	200891ba 	slli	r4,r4,6
   1c8ac:	21000704 	addi	r4,r4,28
   1c8b0:	1105883a 	add	r2,r2,r4
   1c8b4:	10c00015 	stw	r3,0(r2)
								active_files[file_handle].current_sector_in_cluster = 0;
   1c8b8:	e0fffe0f 	ldh	r3,-8(fp)
   1c8bc:	008000b4 	movhi	r2,2
   1c8c0:	109ff404 	addi	r2,r2,32720
   1c8c4:	180691ba 	slli	r3,r3,6
   1c8c8:	18c00804 	addi	r3,r3,32
   1c8cc:	10c5883a 	add	r2,r2,r3
   1c8d0:	10000015 	stw	zero,0(r2)
                                data_sector = boot_sector_data.data_sector_offset + (active_files[file_handle].current_cluster_index - 2)*boot_sector_data.sectors_per_cluster +
   1c8d4:	008000b4 	movhi	r2,2
   1c8d8:	109fdf04 	addi	r2,r2,32636
   1c8dc:	10c01417 	ldw	r3,80(r2)
   1c8e0:	e13ffe0f 	ldh	r4,-8(fp)
   1c8e4:	008000b4 	movhi	r2,2
   1c8e8:	109ff404 	addi	r2,r2,32720
   1c8ec:	200891ba 	slli	r4,r4,6
   1c8f0:	21000704 	addi	r4,r4,28
   1c8f4:	1105883a 	add	r2,r2,r4
   1c8f8:	10800017 	ldw	r2,0(r2)
   1c8fc:	113fff84 	addi	r4,r2,-2
   1c900:	008000b4 	movhi	r2,2
   1c904:	109fdf04 	addi	r2,r2,32636
   1c908:	10800383 	ldbu	r2,14(r2)
   1c90c:	10803fcc 	andi	r2,r2,255
   1c910:	2085383a 	mul	r2,r4,r2
   1c914:	1887883a 	add	r3,r3,r2
                                  active_files[file_handle].current_sector_in_cluster;                                
   1c918:	e13ffe0f 	ldh	r4,-8(fp)
   1c91c:	008000b4 	movhi	r2,2
   1c920:	109ff404 	addi	r2,r2,32720
   1c924:	200891ba 	slli	r4,r4,6
   1c928:	21000804 	addi	r4,r4,32
   1c92c:	1105883a 	add	r2,r2,r4
   1c930:	10800017 	ldw	r2,0(r2)
                        {
                            if (next_cluster < 0x0000fff8)
                            {
                                active_files[file_handle].current_cluster_index = next_cluster;
								active_files[file_handle].current_sector_in_cluster = 0;
                                data_sector = boot_sector_data.data_sector_offset + (active_files[file_handle].current_cluster_index - 2)*boot_sector_data.sectors_per_cluster +
   1c934:	1885883a 	add	r2,r3,r2
   1c938:	e0bffb15 	stw	r2,-20(fp)
   1c93c:	00009806 	br	1cba0 <alt_up_sd_card_write+0x4e0>
   1c940:	00009706 	br	1cba0 <alt_up_sd_card_write+0x4e0>
                                  active_files[file_handle].current_sector_in_cluster;                                
                            }
                        }
                        else
                        {
                            return false;
   1c944:	0005883a 	mov	r2,zero
   1c948:	0000e106 	br	1ccd0 <alt_up_sd_card_write+0x610>
                        }
                    }
                    else
                    {
                        active_files[file_handle].current_sector_in_cluster = active_files[file_handle].current_sector_in_cluster + 1;
   1c94c:	e13ffe0f 	ldh	r4,-8(fp)
   1c950:	e0fffe0f 	ldh	r3,-8(fp)
   1c954:	008000b4 	movhi	r2,2
   1c958:	109ff404 	addi	r2,r2,32720
   1c95c:	180691ba 	slli	r3,r3,6
   1c960:	18c00804 	addi	r3,r3,32
   1c964:	10c5883a 	add	r2,r2,r3
   1c968:	10800017 	ldw	r2,0(r2)
   1c96c:	10c00044 	addi	r3,r2,1
   1c970:	008000b4 	movhi	r2,2
   1c974:	109ff404 	addi	r2,r2,32720
   1c978:	200891ba 	slli	r4,r4,6
   1c97c:	21000804 	addi	r4,r4,32
   1c980:	1105883a 	add	r2,r2,r4
   1c984:	10c00015 	stw	r3,0(r2)
                        data_sector = data_sector + 1;
   1c988:	e0bffb17 	ldw	r2,-20(fp)
   1c98c:	10800044 	addi	r2,r2,1
   1c990:	e0bffb15 	stw	r2,-20(fp)
   1c994:	00008206 	br	1cba0 <alt_up_sd_card_write+0x4e0>
                }
            }
			else
			{
				/* You are adding data to the end of the file, so increment its size and look for an additional data cluster if needed. */
				if ((active_files[file_handle].current_byte_position > 0) && (buffer_offset == 0))
   1c998:	e0fffe0f 	ldh	r3,-8(fp)
   1c99c:	008000b4 	movhi	r2,2
   1c9a0:	109ff404 	addi	r2,r2,32720
   1c9a4:	180691ba 	slli	r3,r3,6
   1c9a8:	18c00904 	addi	r3,r3,36
   1c9ac:	10c5883a 	add	r2,r2,r3
   1c9b0:	10800017 	ldw	r2,0(r2)
   1c9b4:	10007a26 	beq	r2,zero,1cba0 <alt_up_sd_card_write+0x4e0>
   1c9b8:	e0bffc0f 	ldh	r2,-16(fp)
   1c9bc:	1000781e 	bne	r2,zero,1cba0 <alt_up_sd_card_write+0x4e0>
				{
					if (active_files[file_handle].current_sector_in_cluster == boot_sector_data.sectors_per_cluster - 1)
   1c9c0:	e0fffe0f 	ldh	r3,-8(fp)
   1c9c4:	008000b4 	movhi	r2,2
   1c9c8:	109ff404 	addi	r2,r2,32720
   1c9cc:	180691ba 	slli	r3,r3,6
   1c9d0:	18c00804 	addi	r3,r3,32
   1c9d4:	10c5883a 	add	r2,r2,r3
   1c9d8:	10c00017 	ldw	r3,0(r2)
   1c9dc:	008000b4 	movhi	r2,2
   1c9e0:	109fdf04 	addi	r2,r2,32636
   1c9e4:	10800383 	ldbu	r2,14(r2)
   1c9e8:	10803fcc 	andi	r2,r2,255
   1c9ec:	10bfffc4 	addi	r2,r2,-1
   1c9f0:	18803e1e 	bne	r3,r2,1caec <alt_up_sd_card_write+0x42c>
					{
						/* Find a new cluster if possible. */
						unsigned int cluster_number;

						if (find_first_empty_cluster(&cluster_number))
   1c9f4:	e0bffd04 	addi	r2,fp,-12
   1c9f8:	1009883a 	mov	r4,r2
   1c9fc:	001ada00 	call	1ada0 <find_first_empty_cluster>
   1ca00:	10003826 	beq	r2,zero,1cae4 <alt_up_sd_card_write+0x424>
						{
							// mark clusters in both File Allocation Tables.
							mark_cluster(active_files[file_handle].current_cluster_index, ((unsigned short int) (cluster_number & 0x0000ffff)), true);
   1ca04:	e0fffe0f 	ldh	r3,-8(fp)
   1ca08:	008000b4 	movhi	r2,2
   1ca0c:	109ff404 	addi	r2,r2,32720
   1ca10:	180691ba 	slli	r3,r3,6
   1ca14:	18c00704 	addi	r3,r3,28
   1ca18:	10c5883a 	add	r2,r2,r3
   1ca1c:	10c00017 	ldw	r3,0(r2)
   1ca20:	e0bffd17 	ldw	r2,-12(fp)
   1ca24:	10bfffcc 	andi	r2,r2,65535
   1ca28:	10a0001c 	xori	r2,r2,32768
   1ca2c:	10a00004 	addi	r2,r2,-32768
   1ca30:	1809883a 	mov	r4,r3
   1ca34:	100b883a 	mov	r5,r2
   1ca38:	01800044 	movi	r6,1
   1ca3c:	0018e840 	call	18e84 <mark_cluster>
							mark_cluster(cluster_number, 0xffff, true);
   1ca40:	e0bffd17 	ldw	r2,-12(fp)
   1ca44:	1009883a 	mov	r4,r2
   1ca48:	017fffc4 	movi	r5,-1
   1ca4c:	01800044 	movi	r6,1
   1ca50:	0018e840 	call	18e84 <mark_cluster>
							mark_cluster(active_files[file_handle].current_cluster_index, ((unsigned short int) (cluster_number & 0x0000ffff)), false);
   1ca54:	e0fffe0f 	ldh	r3,-8(fp)
   1ca58:	008000b4 	movhi	r2,2
   1ca5c:	109ff404 	addi	r2,r2,32720
   1ca60:	180691ba 	slli	r3,r3,6
   1ca64:	18c00704 	addi	r3,r3,28
   1ca68:	10c5883a 	add	r2,r2,r3
   1ca6c:	10c00017 	ldw	r3,0(r2)
   1ca70:	e0bffd17 	ldw	r2,-12(fp)
   1ca74:	10bfffcc 	andi	r2,r2,65535
   1ca78:	10a0001c 	xori	r2,r2,32768
   1ca7c:	10a00004 	addi	r2,r2,-32768
   1ca80:	1809883a 	mov	r4,r3
   1ca84:	100b883a 	mov	r5,r2
   1ca88:	000d883a 	mov	r6,zero
   1ca8c:	0018e840 	call	18e84 <mark_cluster>
							mark_cluster(cluster_number, 0xffff, false);
   1ca90:	e0bffd17 	ldw	r2,-12(fp)
   1ca94:	1009883a 	mov	r4,r2
   1ca98:	017fffc4 	movi	r5,-1
   1ca9c:	000d883a 	mov	r6,zero
   1caa0:	0018e840 	call	18e84 <mark_cluster>
							// Change cluster index and sector index to compute a new data sector.
							active_files[file_handle].current_cluster_index = cluster_number;
   1caa4:	e13ffe0f 	ldh	r4,-8(fp)
   1caa8:	e0fffd17 	ldw	r3,-12(fp)
   1caac:	008000b4 	movhi	r2,2
   1cab0:	109ff404 	addi	r2,r2,32720
   1cab4:	200891ba 	slli	r4,r4,6
   1cab8:	21000704 	addi	r4,r4,28
   1cabc:	1105883a 	add	r2,r2,r4
   1cac0:	10c00015 	stw	r3,0(r2)
							active_files[file_handle].current_sector_in_cluster = 0;
   1cac4:	e0fffe0f 	ldh	r3,-8(fp)
   1cac8:	008000b4 	movhi	r2,2
   1cacc:	109ff404 	addi	r2,r2,32720
   1cad0:	180691ba 	slli	r3,r3,6
   1cad4:	18c00804 	addi	r3,r3,32
   1cad8:	10c5883a 	add	r2,r2,r3
   1cadc:	10000015 	stw	zero,0(r2)
   1cae0:	00001506 	br	1cb38 <alt_up_sd_card_write+0x478>
						}
						else
						{
							return false;
   1cae4:	0005883a 	mov	r2,zero
   1cae8:	00007906 	br	1ccd0 <alt_up_sd_card_write+0x610>
						}
					}
					else
					{
						/* Read the next sector in the cluster and modify it. We only need to change the data_sector value. The actual read happens a few lines below. */
						active_files[file_handle].current_sector_in_cluster = active_files[file_handle].current_byte_position / boot_sector_data.sector_size_in_bytes;
   1caec:	e13ffe0f 	ldh	r4,-8(fp)
   1caf0:	e0fffe0f 	ldh	r3,-8(fp)
   1caf4:	008000b4 	movhi	r2,2
   1caf8:	109ff404 	addi	r2,r2,32720
   1cafc:	180691ba 	slli	r3,r3,6
   1cb00:	18c00904 	addi	r3,r3,36
   1cb04:	10c5883a 	add	r2,r2,r3
   1cb08:	10c00017 	ldw	r3,0(r2)
   1cb0c:	008000b4 	movhi	r2,2
   1cb10:	109fdf04 	addi	r2,r2,32636
   1cb14:	1080030b 	ldhu	r2,12(r2)
   1cb18:	10bfffcc 	andi	r2,r2,65535
   1cb1c:	1887203a 	divu	r3,r3,r2
   1cb20:	008000b4 	movhi	r2,2
   1cb24:	109ff404 	addi	r2,r2,32720
   1cb28:	200891ba 	slli	r4,r4,6
   1cb2c:	21000804 	addi	r4,r4,32
   1cb30:	1105883a 	add	r2,r2,r4
   1cb34:	10c00015 	stw	r3,0(r2)
					}
					data_sector = boot_sector_data.data_sector_offset + (active_files[file_handle].current_cluster_index - 2)*boot_sector_data.sectors_per_cluster +
   1cb38:	008000b4 	movhi	r2,2
   1cb3c:	109fdf04 	addi	r2,r2,32636
   1cb40:	10c01417 	ldw	r3,80(r2)
   1cb44:	e13ffe0f 	ldh	r4,-8(fp)
   1cb48:	008000b4 	movhi	r2,2
   1cb4c:	109ff404 	addi	r2,r2,32720
   1cb50:	200891ba 	slli	r4,r4,6
   1cb54:	21000704 	addi	r4,r4,28
   1cb58:	1105883a 	add	r2,r2,r4
   1cb5c:	10800017 	ldw	r2,0(r2)
   1cb60:	113fff84 	addi	r4,r2,-2
   1cb64:	008000b4 	movhi	r2,2
   1cb68:	109fdf04 	addi	r2,r2,32636
   1cb6c:	10800383 	ldbu	r2,14(r2)
   1cb70:	10803fcc 	andi	r2,r2,255
   1cb74:	2085383a 	mul	r2,r4,r2
   1cb78:	1887883a 	add	r3,r3,r2
                          active_files[file_handle].current_sector_in_cluster;
   1cb7c:	e13ffe0f 	ldh	r4,-8(fp)
   1cb80:	008000b4 	movhi	r2,2
   1cb84:	109ff404 	addi	r2,r2,32720
   1cb88:	200891ba 	slli	r4,r4,6
   1cb8c:	21000804 	addi	r4,r4,32
   1cb90:	1105883a 	add	r2,r2,r4
   1cb94:	10800017 	ldw	r2,0(r2)
					else
					{
						/* Read the next sector in the cluster and modify it. We only need to change the data_sector value. The actual read happens a few lines below. */
						active_files[file_handle].current_sector_in_cluster = active_files[file_handle].current_byte_position / boot_sector_data.sector_size_in_bytes;
					}
					data_sector = boot_sector_data.data_sector_offset + (active_files[file_handle].current_cluster_index - 2)*boot_sector_data.sectors_per_cluster +
   1cb98:	1885883a 	add	r2,r3,r2
   1cb9c:	e0bffb15 	stw	r2,-20(fp)
                          active_files[file_handle].current_sector_in_cluster;
				}
			}
            // Reading a data sector into the buffer. Note that changes to the most recently modified sector will be saved before
			// a new sector is read from the SD Card.
            if (current_sector_index != data_sector + fat_partition_offset_in_512_byte_sectors)
   1cba0:	d0e81817 	ldw	r3,-24480(gp)
   1cba4:	e0bffb17 	ldw	r2,-20(fp)
   1cba8:	1885883a 	add	r2,r3,r2
   1cbac:	1007883a 	mov	r3,r2
   1cbb0:	d0a81c17 	ldw	r2,-24464(gp)
   1cbb4:	18800726 	beq	r3,r2,1cbd4 <alt_up_sd_card_write+0x514>
            {
                if (!Read_Sector_Data(data_sector, fat_partition_offset_in_512_byte_sectors))
   1cbb8:	d0a81817 	ldw	r2,-24480(gp)
   1cbbc:	e13ffb17 	ldw	r4,-20(fp)
   1cbc0:	100b883a 	mov	r5,r2
   1cbc4:	0018cf80 	call	18cf8 <Read_Sector_Data>
   1cbc8:	1000021e 	bne	r2,zero,1cbd4 <alt_up_sd_card_write+0x514>
                {
					return false;
   1cbcc:	0005883a 	mov	r2,zero
   1cbd0:	00003f06 	br	1ccd0 <alt_up_sd_card_write+0x610>
                }
            }
            // Write a byte of data to the buffer.
			IOWR_8DIRECT(buffer_memory, buffer_offset, byte_of_data);
   1cbd4:	d0e81717 	ldw	r3,-24484(gp)
   1cbd8:	e0bffc0f 	ldh	r2,-16(fp)
   1cbdc:	1885883a 	add	r2,r3,r2
   1cbe0:	e0ffff07 	ldb	r3,-4(fp)
   1cbe4:	10c00025 	stbio	r3,0(r2)
			active_files[file_handle].current_byte_position = active_files[file_handle].current_byte_position + 1;
   1cbe8:	e13ffe0f 	ldh	r4,-8(fp)
   1cbec:	e0fffe0f 	ldh	r3,-8(fp)
   1cbf0:	008000b4 	movhi	r2,2
   1cbf4:	109ff404 	addi	r2,r2,32720
   1cbf8:	180691ba 	slli	r3,r3,6
   1cbfc:	18c00904 	addi	r3,r3,36
   1cc00:	10c5883a 	add	r2,r2,r3
   1cc04:	10800017 	ldw	r2,0(r2)
   1cc08:	10c00044 	addi	r3,r2,1
   1cc0c:	008000b4 	movhi	r2,2
   1cc10:	109ff404 	addi	r2,r2,32720
   1cc14:	200891ba 	slli	r4,r4,6
   1cc18:	21000904 	addi	r4,r4,36
   1cc1c:	1105883a 	add	r2,r2,r4
   1cc20:	10c00015 	stw	r3,0(r2)

			// Modify the file record only when necessary.
			if (active_files[file_handle].current_byte_position >= active_files[file_handle].file_size_in_bytes)
   1cc24:	e0fffe0f 	ldh	r3,-8(fp)
   1cc28:	008000b4 	movhi	r2,2
   1cc2c:	109ff404 	addi	r2,r2,32720
   1cc30:	180691ba 	slli	r3,r3,6
   1cc34:	18c00904 	addi	r3,r3,36
   1cc38:	10c5883a 	add	r2,r2,r3
   1cc3c:	10c00017 	ldw	r3,0(r2)
   1cc40:	e13ffe0f 	ldh	r4,-8(fp)
   1cc44:	008000b4 	movhi	r2,2
   1cc48:	109ff404 	addi	r2,r2,32720
   1cc4c:	200891ba 	slli	r4,r4,6
   1cc50:	21000604 	addi	r4,r4,24
   1cc54:	1105883a 	add	r2,r2,r4
   1cc58:	10800017 	ldw	r2,0(r2)
   1cc5c:	18801736 	bltu	r3,r2,1ccbc <alt_up_sd_card_write+0x5fc>
			{
				active_files[file_handle].file_size_in_bytes = active_files[file_handle].file_size_in_bytes + 1;
   1cc60:	e13ffe0f 	ldh	r4,-8(fp)
   1cc64:	e0fffe0f 	ldh	r3,-8(fp)
   1cc68:	008000b4 	movhi	r2,2
   1cc6c:	109ff404 	addi	r2,r2,32720
   1cc70:	180691ba 	slli	r3,r3,6
   1cc74:	18c00604 	addi	r3,r3,24
   1cc78:	10c5883a 	add	r2,r2,r3
   1cc7c:	10800017 	ldw	r2,0(r2)
   1cc80:	10c00044 	addi	r3,r2,1
   1cc84:	008000b4 	movhi	r2,2
   1cc88:	109ff404 	addi	r2,r2,32720
   1cc8c:	200891ba 	slli	r4,r4,6
   1cc90:	21000604 	addi	r4,r4,24
   1cc94:	1105883a 	add	r2,r2,r4
   1cc98:	10c00015 	stw	r3,0(r2)
				active_files[file_handle].modified = true;
   1cc9c:	e0fffe0f 	ldh	r3,-8(fp)
   1cca0:	008000b4 	movhi	r2,2
   1cca4:	109ff404 	addi	r2,r2,32720
   1cca8:	180691ba 	slli	r3,r3,6
   1ccac:	18c00e04 	addi	r3,r3,56
   1ccb0:	10c5883a 	add	r2,r2,r3
   1ccb4:	00c00044 	movi	r3,1
   1ccb8:	10c00015 	stw	r3,0(r2)
			}
            // Invaldiate the buffer to ensure that the buffer contents are written to the SD card whe nthe file is closed.
            current_sector_modified = true;
   1ccbc:	00800044 	movi	r2,1
   1ccc0:	d0a81b15 	stw	r2,-24468(gp)
			result = true;
   1ccc4:	00800044 	movi	r2,1
   1ccc8:	e0bffa15 	stw	r2,-24(fp)
		}
    }
    
    return result;
   1cccc:	e0bffa17 	ldw	r2,-24(fp)
}
   1ccd0:	e037883a 	mov	sp,fp
   1ccd4:	dfc00117 	ldw	ra,4(sp)
   1ccd8:	df000017 	ldw	fp,0(sp)
   1ccdc:	dec00204 	addi	sp,sp,8
   1cce0:	f800283a 	ret

0001cce4 <alt_up_sd_card_fclose>:


bool alt_up_sd_card_fclose(short int file_handle)
// This function closes an opened file and saves data to SD Card if necessary.
{
   1cce4:	defffb04 	addi	sp,sp,-20
   1cce8:	dfc00415 	stw	ra,16(sp)
   1ccec:	df000315 	stw	fp,12(sp)
   1ccf0:	df000304 	addi	fp,sp,12
   1ccf4:	2005883a 	mov	r2,r4
   1ccf8:	e0bfff0d 	sth	r2,-4(fp)
    bool result = false;
   1ccfc:	e03ffd15 	stw	zero,-12(fp)
    if ((alt_up_sd_card_is_Present()) && (is_sd_card_formated_as_FAT16))
   1cd00:	001b90c0 	call	1b90c <alt_up_sd_card_is_Present>
   1cd04:	10006026 	beq	r2,zero,1ce88 <alt_up_sd_card_fclose+0x1a4>
   1cd08:	d0a81117 	ldw	r2,-24508(gp)
   1cd0c:	10005e26 	beq	r2,zero,1ce88 <alt_up_sd_card_fclose+0x1a4>
    {
        if (active_files[file_handle].in_use) 
   1cd10:	e0ffff0f 	ldh	r3,-4(fp)
   1cd14:	008000b4 	movhi	r2,2
   1cd18:	109ff404 	addi	r2,r2,32720
   1cd1c:	180691ba 	slli	r3,r3,6
   1cd20:	18c00f04 	addi	r3,r3,60
   1cd24:	10c5883a 	add	r2,r2,r3
   1cd28:	10800017 	ldw	r2,0(r2)
   1cd2c:	10005626 	beq	r2,zero,1ce88 <alt_up_sd_card_fclose+0x1a4>
        {
			if (active_files[file_handle].modified)
   1cd30:	e0ffff0f 	ldh	r3,-4(fp)
   1cd34:	008000b4 	movhi	r2,2
   1cd38:	109ff404 	addi	r2,r2,32720
   1cd3c:	180691ba 	slli	r3,r3,6
   1cd40:	18c00e04 	addi	r3,r3,56
   1cd44:	10c5883a 	add	r2,r2,r3
   1cd48:	10800017 	ldw	r2,0(r2)
   1cd4c:	10004526 	beq	r2,zero,1ce64 <alt_up_sd_card_fclose+0x180>
			{
				unsigned int record_sector = active_files[file_handle].file_record_sector_in_cluster;
   1cd50:	e0ffff0f 	ldh	r3,-4(fp)
   1cd54:	008000b4 	movhi	r2,2
   1cd58:	109ff404 	addi	r2,r2,32720
   1cd5c:	180691ba 	slli	r3,r3,6
   1cd60:	18c00b04 	addi	r3,r3,44
   1cd64:	10c5883a 	add	r2,r2,r3
   1cd68:	10800017 	ldw	r2,0(r2)
   1cd6c:	e0bffe15 	stw	r2,-8(fp)
				if (active_files[file_handle].file_record_cluster == 0)
   1cd70:	e0ffff0f 	ldh	r3,-4(fp)
   1cd74:	008000b4 	movhi	r2,2
   1cd78:	109ff404 	addi	r2,r2,32720
   1cd7c:	180691ba 	slli	r3,r3,6
   1cd80:	18c00a04 	addi	r3,r3,40
   1cd84:	10c5883a 	add	r2,r2,r3
   1cd88:	10800017 	ldw	r2,0(r2)
   1cd8c:	1000071e 	bne	r2,zero,1cdac <alt_up_sd_card_fclose+0xc8>
				{
					record_sector = record_sector + boot_sector_data.root_directory_sector_offset;
   1cd90:	008000b4 	movhi	r2,2
   1cd94:	109fdf04 	addi	r2,r2,32636
   1cd98:	10801317 	ldw	r2,76(r2)
   1cd9c:	e0fffe17 	ldw	r3,-8(fp)
   1cda0:	1885883a 	add	r2,r3,r2
   1cda4:	e0bffe15 	stw	r2,-8(fp)
   1cda8:	00001406 	br	1cdfc <alt_up_sd_card_fclose+0x118>
				}
				else
				{
					record_sector = record_sector + boot_sector_data.data_sector_offset + 
   1cdac:	008000b4 	movhi	r2,2
   1cdb0:	109fdf04 	addi	r2,r2,32636
   1cdb4:	10c01417 	ldw	r3,80(r2)
   1cdb8:	e0bffe17 	ldw	r2,-8(fp)
   1cdbc:	1887883a 	add	r3,r3,r2
									(active_files[file_handle].file_record_cluster - 2)*boot_sector_data.sectors_per_cluster;
   1cdc0:	e13fff0f 	ldh	r4,-4(fp)
   1cdc4:	008000b4 	movhi	r2,2
   1cdc8:	109ff404 	addi	r2,r2,32720
   1cdcc:	200891ba 	slli	r4,r4,6
   1cdd0:	21000a04 	addi	r4,r4,40
   1cdd4:	1105883a 	add	r2,r2,r4
   1cdd8:	10800017 	ldw	r2,0(r2)
   1cddc:	113fff84 	addi	r4,r2,-2
   1cde0:	008000b4 	movhi	r2,2
   1cde4:	109fdf04 	addi	r2,r2,32636
   1cde8:	10800383 	ldbu	r2,14(r2)
   1cdec:	10803fcc 	andi	r2,r2,255
   1cdf0:	2085383a 	mul	r2,r4,r2
				{
					record_sector = record_sector + boot_sector_data.root_directory_sector_offset;
				}
				else
				{
					record_sector = record_sector + boot_sector_data.data_sector_offset + 
   1cdf4:	1885883a 	add	r2,r3,r2
   1cdf8:	e0bffe15 	stw	r2,-8(fp)
									(active_files[file_handle].file_record_cluster - 2)*boot_sector_data.sectors_per_cluster;
				}
				if (Read_Sector_Data(record_sector, fat_partition_offset_in_512_byte_sectors))
   1cdfc:	e0fffe17 	ldw	r3,-8(fp)
   1ce00:	d0a81817 	ldw	r2,-24480(gp)
   1ce04:	1809883a 	mov	r4,r3
   1ce08:	100b883a 	mov	r5,r2
   1ce0c:	0018cf80 	call	18cf8 <Read_Sector_Data>
   1ce10:	10001426 	beq	r2,zero,1ce64 <alt_up_sd_card_fclose+0x180>
				{
					if (Write_File_Record_At_Offset(active_files[file_handle].file_record_offset, &(active_files[file_handle])))
   1ce14:	e0ffff0f 	ldh	r3,-4(fp)
   1ce18:	008000b4 	movhi	r2,2
   1ce1c:	109ff404 	addi	r2,r2,32720
   1ce20:	180691ba 	slli	r3,r3,6
   1ce24:	18c00c04 	addi	r3,r3,48
   1ce28:	10c5883a 	add	r2,r2,r3
   1ce2c:	1080000b 	ldhu	r2,0(r2)
   1ce30:	113fffcc 	andi	r4,r2,65535
   1ce34:	2120001c 	xori	r4,r4,32768
   1ce38:	21200004 	addi	r4,r4,-32768
   1ce3c:	e0bfff0f 	ldh	r2,-4(fp)
   1ce40:	100691ba 	slli	r3,r2,6
   1ce44:	008000b4 	movhi	r2,2
   1ce48:	109ff404 	addi	r2,r2,32720
   1ce4c:	1885883a 	add	r2,r3,r2
   1ce50:	100b883a 	mov	r5,r2
   1ce54:	001938c0 	call	1938c <Write_File_Record_At_Offset>
   1ce58:	10000226 	beq	r2,zero,1ce64 <alt_up_sd_card_fclose+0x180>
					{
						// Make sure that the Data has been saved to the SD Card.
						result = Save_Modified_Sector();
   1ce5c:	0018cac0 	call	18cac <Save_Modified_Sector>
   1ce60:	e0bffd15 	stw	r2,-12(fp)
					}
				}
			}
			active_files[file_handle].in_use = false;
   1ce64:	e0ffff0f 	ldh	r3,-4(fp)
   1ce68:	008000b4 	movhi	r2,2
   1ce6c:	109ff404 	addi	r2,r2,32720
   1ce70:	180691ba 	slli	r3,r3,6
   1ce74:	18c00f04 	addi	r3,r3,60
   1ce78:	10c5883a 	add	r2,r2,r3
   1ce7c:	10000015 	stw	zero,0(r2)
			result = true;
   1ce80:	00800044 	movi	r2,1
   1ce84:	e0bffd15 	stw	r2,-12(fp)
        }
    }
    
    return result;
   1ce88:	e0bffd17 	ldw	r2,-12(fp)
}
   1ce8c:	e037883a 	mov	sp,fp
   1ce90:	dfc00117 	ldw	ra,4(sp)
   1ce94:	df000017 	ldw	fp,0(sp)
   1ce98:	dec00204 	addi	sp,sp,8
   1ce9c:	f800283a 	ret

0001cea0 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
   1cea0:	defffa04 	addi	sp,sp,-24
   1cea4:	dfc00515 	stw	ra,20(sp)
   1cea8:	df000415 	stw	fp,16(sp)
   1ceac:	df000404 	addi	fp,sp,16
   1ceb0:	e13ffd15 	stw	r4,-12(fp)
   1ceb4:	e17ffe15 	stw	r5,-8(fp)
   1ceb8:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   1cebc:	e0bffd17 	ldw	r2,-12(fp)
   1cec0:	10800017 	ldw	r2,0(r2)
   1cec4:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
   1cec8:	e0bffc17 	ldw	r2,-16(fp)
   1cecc:	10c00a04 	addi	r3,r2,40
   1ced0:	e0bffd17 	ldw	r2,-12(fp)
   1ced4:	10800217 	ldw	r2,8(r2)
   1ced8:	1809883a 	mov	r4,r3
   1cedc:	e17ffe17 	ldw	r5,-8(fp)
   1cee0:	e1bfff17 	ldw	r6,-4(fp)
   1cee4:	100f883a 	mov	r7,r2
   1cee8:	001d6500 	call	1d650 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
   1ceec:	e037883a 	mov	sp,fp
   1cef0:	dfc00117 	ldw	ra,4(sp)
   1cef4:	df000017 	ldw	fp,0(sp)
   1cef8:	dec00204 	addi	sp,sp,8
   1cefc:	f800283a 	ret

0001cf00 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
   1cf00:	defffa04 	addi	sp,sp,-24
   1cf04:	dfc00515 	stw	ra,20(sp)
   1cf08:	df000415 	stw	fp,16(sp)
   1cf0c:	df000404 	addi	fp,sp,16
   1cf10:	e13ffd15 	stw	r4,-12(fp)
   1cf14:	e17ffe15 	stw	r5,-8(fp)
   1cf18:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   1cf1c:	e0bffd17 	ldw	r2,-12(fp)
   1cf20:	10800017 	ldw	r2,0(r2)
   1cf24:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
   1cf28:	e0bffc17 	ldw	r2,-16(fp)
   1cf2c:	10c00a04 	addi	r3,r2,40
   1cf30:	e0bffd17 	ldw	r2,-12(fp)
   1cf34:	10800217 	ldw	r2,8(r2)
   1cf38:	1809883a 	mov	r4,r3
   1cf3c:	e17ffe17 	ldw	r5,-8(fp)
   1cf40:	e1bfff17 	ldw	r6,-4(fp)
   1cf44:	100f883a 	mov	r7,r2
   1cf48:	001d9040 	call	1d904 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
   1cf4c:	e037883a 	mov	sp,fp
   1cf50:	dfc00117 	ldw	ra,4(sp)
   1cf54:	df000017 	ldw	fp,0(sp)
   1cf58:	dec00204 	addi	sp,sp,8
   1cf5c:	f800283a 	ret

0001cf60 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
   1cf60:	defffc04 	addi	sp,sp,-16
   1cf64:	dfc00315 	stw	ra,12(sp)
   1cf68:	df000215 	stw	fp,8(sp)
   1cf6c:	df000204 	addi	fp,sp,8
   1cf70:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   1cf74:	e0bfff17 	ldw	r2,-4(fp)
   1cf78:	10800017 	ldw	r2,0(r2)
   1cf7c:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
   1cf80:	e0bffe17 	ldw	r2,-8(fp)
   1cf84:	10c00a04 	addi	r3,r2,40
   1cf88:	e0bfff17 	ldw	r2,-4(fp)
   1cf8c:	10800217 	ldw	r2,8(r2)
   1cf90:	1809883a 	mov	r4,r3
   1cf94:	100b883a 	mov	r5,r2
   1cf98:	001d4fc0 	call	1d4fc <altera_avalon_jtag_uart_close>
}
   1cf9c:	e037883a 	mov	sp,fp
   1cfa0:	dfc00117 	ldw	ra,4(sp)
   1cfa4:	df000017 	ldw	fp,0(sp)
   1cfa8:	dec00204 	addi	sp,sp,8
   1cfac:	f800283a 	ret

0001cfb0 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
   1cfb0:	defffa04 	addi	sp,sp,-24
   1cfb4:	dfc00515 	stw	ra,20(sp)
   1cfb8:	df000415 	stw	fp,16(sp)
   1cfbc:	df000404 	addi	fp,sp,16
   1cfc0:	e13ffd15 	stw	r4,-12(fp)
   1cfc4:	e17ffe15 	stw	r5,-8(fp)
   1cfc8:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
   1cfcc:	e0bffd17 	ldw	r2,-12(fp)
   1cfd0:	10800017 	ldw	r2,0(r2)
   1cfd4:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
   1cfd8:	e0bffc17 	ldw	r2,-16(fp)
   1cfdc:	10800a04 	addi	r2,r2,40
   1cfe0:	1009883a 	mov	r4,r2
   1cfe4:	e17ffe17 	ldw	r5,-8(fp)
   1cfe8:	e1bfff17 	ldw	r6,-4(fp)
   1cfec:	001d5640 	call	1d564 <altera_avalon_jtag_uart_ioctl>
}
   1cff0:	e037883a 	mov	sp,fp
   1cff4:	dfc00117 	ldw	ra,4(sp)
   1cff8:	df000017 	ldw	fp,0(sp)
   1cffc:	dec00204 	addi	sp,sp,8
   1d000:	f800283a 	ret

0001d004 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
   1d004:	defff104 	addi	sp,sp,-60
   1d008:	dfc00e15 	stw	ra,56(sp)
   1d00c:	df000d15 	stw	fp,52(sp)
   1d010:	df000d04 	addi	fp,sp,52
   1d014:	e13ff915 	stw	r4,-28(fp)
   1d018:	e17ffa15 	stw	r5,-24(fp)
   1d01c:	e1bffb15 	stw	r6,-20(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
   1d020:	e0bff917 	ldw	r2,-28(fp)
   1d024:	10800c04 	addi	r2,r2,48
   1d028:	e0bff315 	stw	r2,-52(fp)
   1d02c:	e03ff40d 	sth	zero,-48(fp)

static ALT_INLINE int ALT_ALWAYS_INLINE alt_flag_create (OS_FLAG_GRP** pgroup, 
               OS_FLAGS flags)
{
  INT8U err;
  *pgroup = OSFlagCreate (flags, &err);
   1d030:	e0fff40b 	ldhu	r3,-48(fp)
   1d034:	e0bff884 	addi	r2,fp,-30
   1d038:	1809883a 	mov	r4,r3
   1d03c:	100b883a 	mov	r5,r2
   1d040:	0012fa80 	call	12fa8 <OSFlagCreate>
   1d044:	1007883a 	mov	r3,r2
   1d048:	e0bff317 	ldw	r2,-52(fp)
   1d04c:	10c00015 	stw	r3,0(r2)
  ALT_SEM_CREATE(&sp->read_lock, 1);
   1d050:	e0bff917 	ldw	r2,-28(fp)
   1d054:	10800a04 	addi	r2,r2,40
   1d058:	e0bff515 	stw	r2,-44(fp)
   1d05c:	00800044 	movi	r2,1
   1d060:	e0bff60d 	sth	r2,-40(fp)
   1d064:	e0bff60b 	ldhu	r2,-40(fp)
   1d068:	1009883a 	mov	r4,r2
   1d06c:	0015f000 	call	15f00 <OSSemCreate>
   1d070:	1007883a 	mov	r3,r2
   1d074:	e0bff517 	ldw	r2,-44(fp)
   1d078:	10c00015 	stw	r3,0(r2)
  ALT_SEM_CREATE(&sp->write_lock, 1);
   1d07c:	e0bff917 	ldw	r2,-28(fp)
   1d080:	10800b04 	addi	r2,r2,44
   1d084:	e0bff715 	stw	r2,-36(fp)
   1d088:	00800044 	movi	r2,1
   1d08c:	e0bff80d 	sth	r2,-32(fp)
   1d090:	e0bff80b 	ldhu	r2,-32(fp)
   1d094:	1009883a 	mov	r4,r2
   1d098:	0015f000 	call	15f00 <OSSemCreate>
   1d09c:	1007883a 	mov	r3,r2
   1d0a0:	e0bff717 	ldw	r2,-36(fp)
   1d0a4:	10c00015 	stw	r3,0(r2)

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   1d0a8:	e0bff917 	ldw	r2,-28(fp)
   1d0ac:	00c00044 	movi	r3,1
   1d0b0:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
   1d0b4:	e0bff917 	ldw	r2,-28(fp)
   1d0b8:	10800017 	ldw	r2,0(r2)
   1d0bc:	10800104 	addi	r2,r2,4
   1d0c0:	1007883a 	mov	r3,r2
   1d0c4:	e0bff917 	ldw	r2,-28(fp)
   1d0c8:	10800817 	ldw	r2,32(r2)
   1d0cc:	18800035 	stwio	r2,0(r3)
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
                      sp, NULL);
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
   1d0d0:	e0bffb17 	ldw	r2,-20(fp)
   1d0d4:	1009883a 	mov	r4,r2
   1d0d8:	e17ff917 	ldw	r5,-28(fp)
   1d0dc:	018000b4 	movhi	r6,2
   1d0e0:	31b45104 	addi	r6,r6,-11964
   1d0e4:	001f7440 	call	1f744 <alt_irq_register>
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
   1d0e8:	e0bff917 	ldw	r2,-28(fp)
   1d0ec:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
   1d0f0:	e0bff917 	ldw	r2,-28(fp)
   1d0f4:	10c00204 	addi	r3,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
   1d0f8:	008000b4 	movhi	r2,2
   1d0fc:	10932b04 	addi	r2,r2,19628
   1d100:	10800017 	ldw	r2,0(r2)
   1d104:	1809883a 	mov	r4,r3
   1d108:	100b883a 	mov	r5,r2
   1d10c:	018000b4 	movhi	r6,2
   1d110:	31b4fb04 	addi	r6,r6,-11284
   1d114:	e1fff917 	ldw	r7,-28(fp)
   1d118:	001f2440 	call	1f244 <alt_alarm_start>
   1d11c:	1000040e 	bge	r2,zero,1d130 <altera_avalon_jtag_uart_init+0x12c>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
   1d120:	e0fff917 	ldw	r3,-28(fp)
   1d124:	00a00034 	movhi	r2,32768
   1d128:	10bfffc4 	addi	r2,r2,-1
   1d12c:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
   1d130:	e037883a 	mov	sp,fp
   1d134:	dfc00117 	ldw	ra,4(sp)
   1d138:	df000017 	ldw	fp,0(sp)
   1d13c:	dec00204 	addi	sp,sp,8
   1d140:	f800283a 	ret

0001d144 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
   1d144:	defff104 	addi	sp,sp,-60
   1d148:	dfc00e15 	stw	ra,56(sp)
   1d14c:	df000d15 	stw	fp,52(sp)
   1d150:	df000d04 	addi	fp,sp,52
   1d154:	e13ffe15 	stw	r4,-8(fp)
   1d158:	e17fff15 	stw	r5,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
   1d15c:	e0bffe17 	ldw	r2,-8(fp)
   1d160:	e0bff515 	stw	r2,-44(fp)
  unsigned int base = sp->base;
   1d164:	e0bff517 	ldw	r2,-44(fp)
   1d168:	10800017 	ldw	r2,0(r2)
   1d16c:	e0bff615 	stw	r2,-40(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   1d170:	e0bff617 	ldw	r2,-40(fp)
   1d174:	10800104 	addi	r2,r2,4
   1d178:	10800037 	ldwio	r2,0(r2)
   1d17c:	e0bff715 	stw	r2,-36(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
   1d180:	e0bff717 	ldw	r2,-36(fp)
   1d184:	1080c00c 	andi	r2,r2,768
   1d188:	1000011e 	bne	r2,zero,1d190 <altera_avalon_jtag_uart_irq+0x4c>
      break;
   1d18c:	00009206 	br	1d3d8 <altera_avalon_jtag_uart_irq+0x294>

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
   1d190:	e0bff717 	ldw	r2,-36(fp)
   1d194:	1080400c 	andi	r2,r2,256
   1d198:	10004726 	beq	r2,zero,1d2b8 <altera_avalon_jtag_uart_irq+0x174>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
   1d19c:	00800074 	movhi	r2,1
   1d1a0:	e0bff315 	stw	r2,-52(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   1d1a4:	e0bff517 	ldw	r2,-44(fp)
   1d1a8:	10800d17 	ldw	r2,52(r2)
   1d1ac:	10800044 	addi	r2,r2,1
   1d1b0:	1081ffcc 	andi	r2,r2,2047
   1d1b4:	e0bff815 	stw	r2,-32(fp)
        if (next == sp->rx_out)
   1d1b8:	e0bff517 	ldw	r2,-44(fp)
   1d1bc:	10c00e17 	ldw	r3,56(r2)
   1d1c0:	e0bff817 	ldw	r2,-32(fp)
   1d1c4:	1880011e 	bne	r3,r2,1d1cc <altera_avalon_jtag_uart_irq+0x88>
          break;
   1d1c8:	00002906 	br	1d270 <altera_avalon_jtag_uart_irq+0x12c>

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
   1d1cc:	e0bff617 	ldw	r2,-40(fp)
   1d1d0:	10800037 	ldwio	r2,0(r2)
   1d1d4:	e0bff315 	stw	r2,-52(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
   1d1d8:	e0bff317 	ldw	r2,-52(fp)
   1d1dc:	10a0000c 	andi	r2,r2,32768
   1d1e0:	1000011e 	bne	r2,zero,1d1e8 <altera_avalon_jtag_uart_irq+0xa4>
          break;
   1d1e4:	00002206 	br	1d270 <altera_avalon_jtag_uart_irq+0x12c>

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
   1d1e8:	e0bff517 	ldw	r2,-44(fp)
   1d1ec:	10800d17 	ldw	r2,52(r2)
   1d1f0:	e0fff317 	ldw	r3,-52(fp)
   1d1f4:	1809883a 	mov	r4,r3
   1d1f8:	e0fff517 	ldw	r3,-44(fp)
   1d1fc:	1885883a 	add	r2,r3,r2
   1d200:	10801104 	addi	r2,r2,68
   1d204:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   1d208:	e0bff517 	ldw	r2,-44(fp)
   1d20c:	10800d17 	ldw	r2,52(r2)
   1d210:	10800044 	addi	r2,r2,1
   1d214:	10c1ffcc 	andi	r3,r2,2047
   1d218:	e0bff517 	ldw	r2,-44(fp)
   1d21c:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
   1d220:	e0bff517 	ldw	r2,-44(fp)
   1d224:	10800c17 	ldw	r2,48(r2)
   1d228:	e0bff915 	stw	r2,-28(fp)
   1d22c:	00800044 	movi	r2,1
   1d230:	e0bffa0d 	sth	r2,-24(fp)
   1d234:	00800044 	movi	r2,1
   1d238:	e0bffa85 	stb	r2,-22(fp)
                   OS_FLAGS     flags, 
                   INT8U        opt)
{
  INT8U err;

  if (OSRunning)
   1d23c:	008000b4 	movhi	r2,2
   1d240:	10930944 	addi	r2,r2,19493
   1d244:	10800003 	ldbu	r2,0(r2)
   1d248:	10803fcc 	andi	r2,r2,255
   1d24c:	103fd526 	beq	r2,zero,1d1a4 <__alt_mem_Flash_flash_data+0xf401d1a4>
  {
    OSFlagPost (group, flags, opt, &err);
   1d250:	e17ffa0b 	ldhu	r5,-24(fp)
   1d254:	e0fffa83 	ldbu	r3,-22(fp)
   1d258:	e0bffcc4 	addi	r2,fp,-13
   1d25c:	e13ff917 	ldw	r4,-28(fp)
   1d260:	180d883a 	mov	r6,r3
   1d264:	100f883a 	mov	r7,r2
   1d268:	0013c180 	call	13c18 <OSFlagPost>
      }
   1d26c:	003fcd06 	br	1d1a4 <__alt_mem_Flash_flash_data+0xf401d1a4>

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
   1d270:	e0bff317 	ldw	r2,-52(fp)
   1d274:	10bfffec 	andhi	r2,r2,65535
   1d278:	10000f26 	beq	r2,zero,1d2b8 <altera_avalon_jtag_uart_irq+0x174>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   1d27c:	e0bff517 	ldw	r2,-44(fp)
   1d280:	10c00817 	ldw	r3,32(r2)
   1d284:	00bfff84 	movi	r2,-2
   1d288:	1886703a 	and	r3,r3,r2
   1d28c:	e0bff517 	ldw	r2,-44(fp)
   1d290:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
   1d294:	e0bff617 	ldw	r2,-40(fp)
   1d298:	10800104 	addi	r2,r2,4
   1d29c:	1007883a 	mov	r3,r2
   1d2a0:	e0bff517 	ldw	r2,-44(fp)
   1d2a4:	10800817 	ldw	r2,32(r2)
   1d2a8:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   1d2ac:	e0bff617 	ldw	r2,-40(fp)
   1d2b0:	10800104 	addi	r2,r2,4
   1d2b4:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
   1d2b8:	e0bff717 	ldw	r2,-36(fp)
   1d2bc:	1080800c 	andi	r2,r2,512
   1d2c0:	10004426 	beq	r2,zero,1d3d4 <altera_avalon_jtag_uart_irq+0x290>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
   1d2c4:	e0bff717 	ldw	r2,-36(fp)
   1d2c8:	1004d43a 	srli	r2,r2,16
   1d2cc:	e0bff415 	stw	r2,-48(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
   1d2d0:	00002706 	br	1d370 <altera_avalon_jtag_uart_irq+0x22c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
   1d2d4:	e0bff617 	ldw	r2,-40(fp)
   1d2d8:	e0fff517 	ldw	r3,-44(fp)
   1d2dc:	18c01017 	ldw	r3,64(r3)
   1d2e0:	e13ff517 	ldw	r4,-44(fp)
   1d2e4:	20c7883a 	add	r3,r4,r3
   1d2e8:	18c21104 	addi	r3,r3,2116
   1d2ec:	18c00003 	ldbu	r3,0(r3)
   1d2f0:	18c03fcc 	andi	r3,r3,255
   1d2f4:	18c0201c 	xori	r3,r3,128
   1d2f8:	18ffe004 	addi	r3,r3,-128
   1d2fc:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   1d300:	e0bff517 	ldw	r2,-44(fp)
   1d304:	10801017 	ldw	r2,64(r2)
   1d308:	10800044 	addi	r2,r2,1
   1d30c:	10c1ffcc 	andi	r3,r2,2047
   1d310:	e0bff517 	ldw	r2,-44(fp)
   1d314:	10c01015 	stw	r3,64(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);
   1d318:	e0bff517 	ldw	r2,-44(fp)
   1d31c:	10800c17 	ldw	r2,48(r2)
   1d320:	e0bffb15 	stw	r2,-20(fp)
   1d324:	00800084 	movi	r2,2
   1d328:	e0bffc0d 	sth	r2,-16(fp)
   1d32c:	00800044 	movi	r2,1
   1d330:	e0bffc85 	stb	r2,-14(fp)
                   OS_FLAGS     flags, 
                   INT8U        opt)
{
  INT8U err;

  if (OSRunning)
   1d334:	008000b4 	movhi	r2,2
   1d338:	10930944 	addi	r2,r2,19493
   1d33c:	10800003 	ldbu	r2,0(r2)
   1d340:	10803fcc 	andi	r2,r2,255
   1d344:	10000726 	beq	r2,zero,1d364 <altera_avalon_jtag_uart_irq+0x220>
  {
    OSFlagPost (group, flags, opt, &err);
   1d348:	e17ffc0b 	ldhu	r5,-16(fp)
   1d34c:	e0fffc83 	ldbu	r3,-14(fp)
   1d350:	e0bffd04 	addi	r2,fp,-12
   1d354:	e13ffb17 	ldw	r4,-20(fp)
   1d358:	180d883a 	mov	r6,r3
   1d35c:	100f883a 	mov	r7,r2
   1d360:	0013c180 	call	13c18 <OSFlagPost>

        space--;
   1d364:	e0bff417 	ldw	r2,-48(fp)
   1d368:	10bfffc4 	addi	r2,r2,-1
   1d36c:	e0bff415 	stw	r2,-48(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
   1d370:	e0bff417 	ldw	r2,-48(fp)
   1d374:	10000526 	beq	r2,zero,1d38c <altera_avalon_jtag_uart_irq+0x248>
   1d378:	e0bff517 	ldw	r2,-44(fp)
   1d37c:	10c01017 	ldw	r3,64(r2)
   1d380:	e0bff517 	ldw	r2,-44(fp)
   1d384:	10800f17 	ldw	r2,60(r2)
   1d388:	18bfd21e 	bne	r3,r2,1d2d4 <__alt_mem_Flash_flash_data+0xf401d2d4>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
   1d38c:	e0bff417 	ldw	r2,-48(fp)
   1d390:	10001026 	beq	r2,zero,1d3d4 <altera_avalon_jtag_uart_irq+0x290>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   1d394:	e0bff517 	ldw	r2,-44(fp)
   1d398:	10c00817 	ldw	r3,32(r2)
   1d39c:	00bfff44 	movi	r2,-3
   1d3a0:	1886703a 	and	r3,r3,r2
   1d3a4:	e0bff517 	ldw	r2,-44(fp)
   1d3a8:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   1d3ac:	e0bff517 	ldw	r2,-44(fp)
   1d3b0:	10800017 	ldw	r2,0(r2)
   1d3b4:	10800104 	addi	r2,r2,4
   1d3b8:	1007883a 	mov	r3,r2
   1d3bc:	e0bff517 	ldw	r2,-44(fp)
   1d3c0:	10800817 	ldw	r2,32(r2)
   1d3c4:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   1d3c8:	e0bff617 	ldw	r2,-40(fp)
   1d3cc:	10800104 	addi	r2,r2,4
   1d3d0:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
   1d3d4:	003f6606 	br	1d170 <__alt_mem_Flash_flash_data+0xf401d170>
}
   1d3d8:	e037883a 	mov	sp,fp
   1d3dc:	dfc00117 	ldw	ra,4(sp)
   1d3e0:	df000017 	ldw	fp,0(sp)
   1d3e4:	dec00204 	addi	sp,sp,8
   1d3e8:	f800283a 	ret

0001d3ec <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
   1d3ec:	defff904 	addi	sp,sp,-28
   1d3f0:	dfc00615 	stw	ra,24(sp)
   1d3f4:	df000515 	stw	fp,20(sp)
   1d3f8:	df000504 	addi	fp,sp,20
   1d3fc:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
   1d400:	e0bfff17 	ldw	r2,-4(fp)
   1d404:	e0bffb15 	stw	r2,-20(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
   1d408:	e0bffb17 	ldw	r2,-20(fp)
   1d40c:	10800017 	ldw	r2,0(r2)
   1d410:	10800104 	addi	r2,r2,4
   1d414:	10800037 	ldwio	r2,0(r2)
   1d418:	e0bffc15 	stw	r2,-16(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
   1d41c:	e0bffc17 	ldw	r2,-16(fp)
   1d420:	1081000c 	andi	r2,r2,1024
   1d424:	10000b26 	beq	r2,zero,1d454 <altera_avalon_jtag_uart_timeout+0x68>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
   1d428:	e0bffb17 	ldw	r2,-20(fp)
   1d42c:	10800017 	ldw	r2,0(r2)
   1d430:	10800104 	addi	r2,r2,4
   1d434:	1007883a 	mov	r3,r2
   1d438:	e0bffb17 	ldw	r2,-20(fp)
   1d43c:	10800817 	ldw	r2,32(r2)
   1d440:	10810014 	ori	r2,r2,1024
   1d444:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
   1d448:	e0bffb17 	ldw	r2,-20(fp)
   1d44c:	10000915 	stw	zero,36(r2)
   1d450:	00002206 	br	1d4dc <altera_avalon_jtag_uart_timeout+0xf0>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
   1d454:	e0bffb17 	ldw	r2,-20(fp)
   1d458:	10c00917 	ldw	r3,36(r2)
   1d45c:	00a00034 	movhi	r2,32768
   1d460:	10bfff04 	addi	r2,r2,-4
   1d464:	10c01d36 	bltu	r2,r3,1d4dc <altera_avalon_jtag_uart_timeout+0xf0>
    sp->host_inactive++;
   1d468:	e0bffb17 	ldw	r2,-20(fp)
   1d46c:	10800917 	ldw	r2,36(r2)
   1d470:	10c00044 	addi	r3,r2,1
   1d474:	e0bffb17 	ldw	r2,-20(fp)
   1d478:	10c00915 	stw	r3,36(r2)
    
    if (sp->host_inactive >= sp->timeout) {
   1d47c:	e0bffb17 	ldw	r2,-20(fp)
   1d480:	10c00917 	ldw	r3,36(r2)
   1d484:	e0bffb17 	ldw	r2,-20(fp)
   1d488:	10800117 	ldw	r2,4(r2)
   1d48c:	18801336 	bltu	r3,r2,1d4dc <altera_avalon_jtag_uart_timeout+0xf0>
      /* Post an event to indicate host is inactive (for jtag_uart_read */
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
   1d490:	e0bffb17 	ldw	r2,-20(fp)
   1d494:	10800c17 	ldw	r2,48(r2)
   1d498:	e0bffd15 	stw	r2,-12(fp)
   1d49c:	00800104 	movi	r2,4
   1d4a0:	e0bffe0d 	sth	r2,-8(fp)
   1d4a4:	00800044 	movi	r2,1
   1d4a8:	e0bffe85 	stb	r2,-6(fp)
                   OS_FLAGS     flags, 
                   INT8U        opt)
{
  INT8U err;

  if (OSRunning)
   1d4ac:	008000b4 	movhi	r2,2
   1d4b0:	10930944 	addi	r2,r2,19493
   1d4b4:	10800003 	ldbu	r2,0(r2)
   1d4b8:	10803fcc 	andi	r2,r2,255
   1d4bc:	10000726 	beq	r2,zero,1d4dc <altera_avalon_jtag_uart_timeout+0xf0>
  {
    OSFlagPost (group, flags, opt, &err);
   1d4c0:	e17ffe0b 	ldhu	r5,-8(fp)
   1d4c4:	e0fffe83 	ldbu	r3,-6(fp)
   1d4c8:	e0bffec4 	addi	r2,fp,-5
   1d4cc:	e13ffd17 	ldw	r4,-12(fp)
   1d4d0:	180d883a 	mov	r6,r3
   1d4d4:	100f883a 	mov	r7,r2
   1d4d8:	0013c180 	call	13c18 <OSFlagPost>
   1d4dc:	008000b4 	movhi	r2,2
   1d4e0:	10932b04 	addi	r2,r2,19628
   1d4e4:	10800017 	ldw	r2,0(r2)
    }
  }

  return alt_ticks_per_second();
}
   1d4e8:	e037883a 	mov	sp,fp
   1d4ec:	dfc00117 	ldw	ra,4(sp)
   1d4f0:	df000017 	ldw	fp,0(sp)
   1d4f4:	dec00204 	addi	sp,sp,8
   1d4f8:	f800283a 	ret

0001d4fc <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
   1d4fc:	defffd04 	addi	sp,sp,-12
   1d500:	df000215 	stw	fp,8(sp)
   1d504:	df000204 	addi	fp,sp,8
   1d508:	e13ffe15 	stw	r4,-8(fp)
   1d50c:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   1d510:	00000506 	br	1d528 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
   1d514:	e0bfff17 	ldw	r2,-4(fp)
   1d518:	1090000c 	andi	r2,r2,16384
   1d51c:	10000226 	beq	r2,zero,1d528 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
   1d520:	00bffd44 	movi	r2,-11
   1d524:	00000b06 	br	1d554 <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   1d528:	e0bffe17 	ldw	r2,-8(fp)
   1d52c:	10c01017 	ldw	r3,64(r2)
   1d530:	e0bffe17 	ldw	r2,-8(fp)
   1d534:	10800f17 	ldw	r2,60(r2)
   1d538:	18800526 	beq	r3,r2,1d550 <altera_avalon_jtag_uart_close+0x54>
   1d53c:	e0bffe17 	ldw	r2,-8(fp)
   1d540:	10c00917 	ldw	r3,36(r2)
   1d544:	e0bffe17 	ldw	r2,-8(fp)
   1d548:	10800117 	ldw	r2,4(r2)
   1d54c:	18bff136 	bltu	r3,r2,1d514 <__alt_mem_Flash_flash_data+0xf401d514>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
   1d550:	0005883a 	mov	r2,zero
}
   1d554:	e037883a 	mov	sp,fp
   1d558:	df000017 	ldw	fp,0(sp)
   1d55c:	dec00104 	addi	sp,sp,4
   1d560:	f800283a 	ret

0001d564 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
   1d564:	defffa04 	addi	sp,sp,-24
   1d568:	df000515 	stw	fp,20(sp)
   1d56c:	df000504 	addi	fp,sp,20
   1d570:	e13ffd15 	stw	r4,-12(fp)
   1d574:	e17ffe15 	stw	r5,-8(fp)
   1d578:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
   1d57c:	00bff9c4 	movi	r2,-25
   1d580:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
   1d584:	e0bffe17 	ldw	r2,-8(fp)
   1d588:	10da8060 	cmpeqi	r3,r2,27137
   1d58c:	1800031e 	bne	r3,zero,1d59c <altera_avalon_jtag_uart_ioctl+0x38>
   1d590:	109a80a0 	cmpeqi	r2,r2,27138
   1d594:	1000191e 	bne	r2,zero,1d5fc <altera_avalon_jtag_uart_ioctl+0x98>
      rc = 0;
    }
    break;

  default:
    break;
   1d598:	00002806 	br	1d63c <altera_avalon_jtag_uart_ioctl+0xd8>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
   1d59c:	e0bffd17 	ldw	r2,-12(fp)
   1d5a0:	10c00117 	ldw	r3,4(r2)
   1d5a4:	00a00034 	movhi	r2,32768
   1d5a8:	10bfffc4 	addi	r2,r2,-1
   1d5ac:	18801226 	beq	r3,r2,1d5f8 <altera_avalon_jtag_uart_ioctl+0x94>
    {
      int timeout = *((int *)arg);
   1d5b0:	e0bfff17 	ldw	r2,-4(fp)
   1d5b4:	10800017 	ldw	r2,0(r2)
   1d5b8:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
   1d5bc:	e0bffc17 	ldw	r2,-16(fp)
   1d5c0:	10800090 	cmplti	r2,r2,2
   1d5c4:	1000061e 	bne	r2,zero,1d5e0 <altera_avalon_jtag_uart_ioctl+0x7c>
   1d5c8:	e0fffc17 	ldw	r3,-16(fp)
   1d5cc:	00a00034 	movhi	r2,32768
   1d5d0:	10bfffc4 	addi	r2,r2,-1
   1d5d4:	18800226 	beq	r3,r2,1d5e0 <altera_avalon_jtag_uart_ioctl+0x7c>
   1d5d8:	e0bffc17 	ldw	r2,-16(fp)
   1d5dc:	00000206 	br	1d5e8 <altera_avalon_jtag_uart_ioctl+0x84>
   1d5e0:	00a00034 	movhi	r2,32768
   1d5e4:	10bfff84 	addi	r2,r2,-2
   1d5e8:	e0fffd17 	ldw	r3,-12(fp)
   1d5ec:	18800115 	stw	r2,4(r3)
      rc = 0;
   1d5f0:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
   1d5f4:	00001106 	br	1d63c <altera_avalon_jtag_uart_ioctl+0xd8>
   1d5f8:	00001006 	br	1d63c <altera_avalon_jtag_uart_ioctl+0xd8>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
   1d5fc:	e0bffd17 	ldw	r2,-12(fp)
   1d600:	10c00117 	ldw	r3,4(r2)
   1d604:	00a00034 	movhi	r2,32768
   1d608:	10bfffc4 	addi	r2,r2,-1
   1d60c:	18800a26 	beq	r3,r2,1d638 <altera_avalon_jtag_uart_ioctl+0xd4>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
   1d610:	e0bffd17 	ldw	r2,-12(fp)
   1d614:	10c00917 	ldw	r3,36(r2)
   1d618:	e0bffd17 	ldw	r2,-12(fp)
   1d61c:	10800117 	ldw	r2,4(r2)
   1d620:	1885803a 	cmpltu	r2,r3,r2
   1d624:	10c03fcc 	andi	r3,r2,255
   1d628:	e0bfff17 	ldw	r2,-4(fp)
   1d62c:	10c00015 	stw	r3,0(r2)
      rc = 0;
   1d630:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
   1d634:	00000006 	br	1d638 <altera_avalon_jtag_uart_ioctl+0xd4>
   1d638:	0001883a 	nop

  default:
    break;
  }

  return rc;
   1d63c:	e0bffb17 	ldw	r2,-20(fp)
}
   1d640:	e037883a 	mov	sp,fp
   1d644:	df000017 	ldw	fp,0(sp)
   1d648:	dec00104 	addi	sp,sp,4
   1d64c:	f800283a 	ret

0001d650 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
   1d650:	deffec04 	addi	sp,sp,-80
   1d654:	dfc01315 	stw	ra,76(sp)
   1d658:	df001215 	stw	fp,72(sp)
   1d65c:	df001204 	addi	fp,sp,72
   1d660:	e13ffc15 	stw	r4,-16(fp)
   1d664:	e17ffd15 	stw	r5,-12(fp)
   1d668:	e1bffe15 	stw	r6,-8(fp)
   1d66c:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
   1d670:	e0bffd17 	ldw	r2,-12(fp)
   1d674:	e0bfef15 	stw	r2,-68(fp)

  /*
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);
   1d678:	e0bffc17 	ldw	r2,-16(fp)
   1d67c:	10800a17 	ldw	r2,40(r2)
   1d680:	e0bff415 	stw	r2,-48(fp)
   1d684:	e03ff50d 	sth	zero,-44(fp)

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sem_pend (OS_EVENT* sem, 
                  INT16U timeout)
{
  INT8U err;
  OSSemPend (sem, timeout, &err);
   1d688:	e0fff50b 	ldhu	r3,-44(fp)
   1d68c:	e0bffb04 	addi	r2,fp,-20
   1d690:	e13ff417 	ldw	r4,-48(fp)
   1d694:	180b883a 	mov	r5,r3
   1d698:	100d883a 	mov	r6,r2
   1d69c:	00162680 	call	16268 <OSSemPend>

  while (space > 0)
   1d6a0:	00006506 	br	1d838 <altera_avalon_jtag_uart_read+0x1e8>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
   1d6a4:	e0bffc17 	ldw	r2,-16(fp)
   1d6a8:	10800d17 	ldw	r2,52(r2)
   1d6ac:	e0bff115 	stw	r2,-60(fp)
      out = sp->rx_out;
   1d6b0:	e0bffc17 	ldw	r2,-16(fp)
   1d6b4:	10800e17 	ldw	r2,56(r2)
   1d6b8:	e0bff215 	stw	r2,-56(fp)

      if (in >= out)
   1d6bc:	e0fff117 	ldw	r3,-60(fp)
   1d6c0:	e0bff217 	ldw	r2,-56(fp)
   1d6c4:	18800536 	bltu	r3,r2,1d6dc <altera_avalon_jtag_uart_read+0x8c>
        n = in - out;
   1d6c8:	e0fff117 	ldw	r3,-60(fp)
   1d6cc:	e0bff217 	ldw	r2,-56(fp)
   1d6d0:	1885c83a 	sub	r2,r3,r2
   1d6d4:	e0bff015 	stw	r2,-64(fp)
   1d6d8:	00000406 	br	1d6ec <altera_avalon_jtag_uart_read+0x9c>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
   1d6dc:	00c20004 	movi	r3,2048
   1d6e0:	e0bff217 	ldw	r2,-56(fp)
   1d6e4:	1885c83a 	sub	r2,r3,r2
   1d6e8:	e0bff015 	stw	r2,-64(fp)

      if (n == 0)
   1d6ec:	e0bff017 	ldw	r2,-64(fp)
   1d6f0:	1000011e 	bne	r2,zero,1d6f8 <altera_avalon_jtag_uart_read+0xa8>
        break; /* No more data available */
   1d6f4:	00001d06 	br	1d76c <altera_avalon_jtag_uart_read+0x11c>

      if (n > space)
   1d6f8:	e0fffe17 	ldw	r3,-8(fp)
   1d6fc:	e0bff017 	ldw	r2,-64(fp)
   1d700:	1880022e 	bgeu	r3,r2,1d70c <altera_avalon_jtag_uart_read+0xbc>
        n = space;
   1d704:	e0bffe17 	ldw	r2,-8(fp)
   1d708:	e0bff015 	stw	r2,-64(fp)

      memcpy(ptr, sp->rx_buf + out, n);
   1d70c:	e0bff217 	ldw	r2,-56(fp)
   1d710:	10801104 	addi	r2,r2,68
   1d714:	e0fffc17 	ldw	r3,-16(fp)
   1d718:	1885883a 	add	r2,r3,r2
   1d71c:	e13fef17 	ldw	r4,-68(fp)
   1d720:	100b883a 	mov	r5,r2
   1d724:	e1bff017 	ldw	r6,-64(fp)
   1d728:	00081080 	call	8108 <memcpy>
      ptr   += n;
   1d72c:	e0ffef17 	ldw	r3,-68(fp)
   1d730:	e0bff017 	ldw	r2,-64(fp)
   1d734:	1885883a 	add	r2,r3,r2
   1d738:	e0bfef15 	stw	r2,-68(fp)
      space -= n;
   1d73c:	e0fffe17 	ldw	r3,-8(fp)
   1d740:	e0bff017 	ldw	r2,-64(fp)
   1d744:	1885c83a 	sub	r2,r3,r2
   1d748:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   1d74c:	e0fff217 	ldw	r3,-56(fp)
   1d750:	e0bff017 	ldw	r2,-64(fp)
   1d754:	1885883a 	add	r2,r3,r2
   1d758:	10c1ffcc 	andi	r3,r2,2047
   1d75c:	e0bffc17 	ldw	r2,-16(fp)
   1d760:	10c00e15 	stw	r3,56(r2)
    }
    while (space > 0);
   1d764:	e0bffe17 	ldw	r2,-8(fp)
   1d768:	00bfce16 	blt	zero,r2,1d6a4 <__alt_mem_Flash_flash_data+0xf401d6a4>

    /* If we read any data then return it */
    if (ptr != buffer)
   1d76c:	e0ffef17 	ldw	r3,-68(fp)
   1d770:	e0bffd17 	ldw	r2,-12(fp)
   1d774:	18800126 	beq	r3,r2,1d77c <altera_avalon_jtag_uart_read+0x12c>
      break;
   1d778:	00003106 	br	1d840 <altera_avalon_jtag_uart_read+0x1f0>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
   1d77c:	e0bfff17 	ldw	r2,-4(fp)
   1d780:	1090000c 	andi	r2,r2,16384
   1d784:	10000126 	beq	r2,zero,1d78c <altera_avalon_jtag_uart_read+0x13c>
      break;
   1d788:	00002d06 	br	1d840 <altera_avalon_jtag_uart_read+0x1f0>

#ifdef __ucosii__
    /* OS Present: Pend on a flag if the OS is running, otherwise spin */
    if(OSRunning == OS_TRUE) {
   1d78c:	008000b4 	movhi	r2,2
   1d790:	10930944 	addi	r2,r2,19493
   1d794:	10800003 	ldbu	r2,0(r2)
   1d798:	10803fcc 	andi	r2,r2,255
   1d79c:	10800058 	cmpnei	r2,r2,1
   1d7a0:	1000161e 	bne	r2,zero,1d7fc <altera_avalon_jtag_uart_read+0x1ac>
       * When running in a multi-threaded mode, we pend on the read event
       * flag set and timeout event flag set in the isr. This avoids wasting CPU
       * cycles waiting in this thread, when we could be doing something more
       * profitable elsewhere.
       */
      ALT_FLAG_PEND (sp->events,
   1d7a4:	e0bffc17 	ldw	r2,-16(fp)
   1d7a8:	10800c17 	ldw	r2,48(r2)
   1d7ac:	e0bff615 	stw	r2,-40(fp)
   1d7b0:	00800144 	movi	r2,5
   1d7b4:	e0bff70d 	sth	r2,-36(fp)
   1d7b8:	00bfe0c4 	movi	r2,-125
   1d7bc:	e0bff785 	stb	r2,-34(fp)
   1d7c0:	e03ff80d 	sth	zero,-32(fp)
                   OS_FLAGS flags, 
                   INT8U wait_type, 
                   INT16U timeout)
{
  INT8U err;
  if (OSRunning)
   1d7c4:	008000b4 	movhi	r2,2
   1d7c8:	10930944 	addi	r2,r2,19493
   1d7cc:	10800003 	ldbu	r2,0(r2)
   1d7d0:	10803fcc 	andi	r2,r2,255
   1d7d4:	10001326 	beq	r2,zero,1d824 <altera_avalon_jtag_uart_read+0x1d4>
  {
    OSFlagPend (group, flags, wait_type, timeout, &err);
   1d7d8:	e17ff70b 	ldhu	r5,-36(fp)
   1d7dc:	e1bff783 	ldbu	r6,-34(fp)
   1d7e0:	e0fff80b 	ldhu	r3,-32(fp)
   1d7e4:	e0bffb44 	addi	r2,fp,-19
   1d7e8:	d8800015 	stw	r2,0(sp)
   1d7ec:	e13ff617 	ldw	r4,-40(fp)
   1d7f0:	180f883a 	mov	r7,r3
   1d7f4:	00135c00 	call	135c0 <OSFlagPend>
   1d7f8:	00000a06 	br	1d824 <altera_avalon_jtag_uart_read+0x1d4>
                     OS_FLAG_WAIT_SET_ANY + OS_FLAG_CONSUME,
                     0);
    }
    else {
      /* Spin until more data arrives or until host disconnects */
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
   1d7fc:	0001883a 	nop
   1d800:	e0bffc17 	ldw	r2,-16(fp)
   1d804:	10c00d17 	ldw	r3,52(r2)
   1d808:	e0bff117 	ldw	r2,-60(fp)
   1d80c:	1880051e 	bne	r3,r2,1d824 <altera_avalon_jtag_uart_read+0x1d4>
   1d810:	e0bffc17 	ldw	r2,-16(fp)
   1d814:	10c00917 	ldw	r3,36(r2)
   1d818:	e0bffc17 	ldw	r2,-16(fp)
   1d81c:	10800117 	ldw	r2,4(r2)
   1d820:	18bff736 	bltu	r3,r2,1d800 <__alt_mem_Flash_flash_data+0xf401d800>
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
   1d824:	e0bffc17 	ldw	r2,-16(fp)
   1d828:	10c00d17 	ldw	r3,52(r2)
   1d82c:	e0bff117 	ldw	r2,-60(fp)
   1d830:	1880011e 	bne	r3,r2,1d838 <altera_avalon_jtag_uart_read+0x1e8>
      break;
   1d834:	00000206 	br	1d840 <altera_avalon_jtag_uart_read+0x1f0>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   1d838:	e0bffe17 	ldw	r2,-8(fp)
   1d83c:	00bf9916 	blt	zero,r2,1d6a4 <__alt_mem_Flash_flash_data+0xf401d6a4>
  /*
   * Now that access to the circular buffer is complete, release the read
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);
   1d840:	e0bffc17 	ldw	r2,-16(fp)
   1d844:	10800a17 	ldw	r2,40(r2)
   1d848:	1009883a 	mov	r4,r2
   1d84c:	001663c0 	call	1663c <OSSemPost>

  if (ptr != buffer)
   1d850:	e0ffef17 	ldw	r3,-68(fp)
   1d854:	e0bffd17 	ldw	r2,-12(fp)
   1d858:	18801826 	beq	r3,r2,1d8bc <altera_avalon_jtag_uart_read+0x26c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1d85c:	0005303a 	rdctl	r2,status
   1d860:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1d864:	e0fff917 	ldw	r3,-28(fp)
   1d868:	00bfff84 	movi	r2,-2
   1d86c:	1884703a 	and	r2,r3,r2
   1d870:	1001703a 	wrctl	status,r2
  
  return context;
   1d874:	e0bff917 	ldw	r2,-28(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
   1d878:	e0bff315 	stw	r2,-52(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   1d87c:	e0bffc17 	ldw	r2,-16(fp)
   1d880:	10800817 	ldw	r2,32(r2)
   1d884:	10c00054 	ori	r3,r2,1
   1d888:	e0bffc17 	ldw	r2,-16(fp)
   1d88c:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   1d890:	e0bffc17 	ldw	r2,-16(fp)
   1d894:	10800017 	ldw	r2,0(r2)
   1d898:	10800104 	addi	r2,r2,4
   1d89c:	1007883a 	mov	r3,r2
   1d8a0:	e0bffc17 	ldw	r2,-16(fp)
   1d8a4:	10800817 	ldw	r2,32(r2)
   1d8a8:	18800035 	stwio	r2,0(r3)
   1d8ac:	e0bff317 	ldw	r2,-52(fp)
   1d8b0:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1d8b4:	e0bffa17 	ldw	r2,-24(fp)
   1d8b8:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
   1d8bc:	e0ffef17 	ldw	r3,-68(fp)
   1d8c0:	e0bffd17 	ldw	r2,-12(fp)
   1d8c4:	18800426 	beq	r3,r2,1d8d8 <altera_avalon_jtag_uart_read+0x288>
    return ptr - buffer;
   1d8c8:	e0ffef17 	ldw	r3,-68(fp)
   1d8cc:	e0bffd17 	ldw	r2,-12(fp)
   1d8d0:	1885c83a 	sub	r2,r3,r2
   1d8d4:	00000606 	br	1d8f0 <altera_avalon_jtag_uart_read+0x2a0>
  else if (flags & O_NONBLOCK)
   1d8d8:	e0bfff17 	ldw	r2,-4(fp)
   1d8dc:	1090000c 	andi	r2,r2,16384
   1d8e0:	10000226 	beq	r2,zero,1d8ec <altera_avalon_jtag_uart_read+0x29c>
    return -EWOULDBLOCK;
   1d8e4:	00bffd44 	movi	r2,-11
   1d8e8:	00000106 	br	1d8f0 <altera_avalon_jtag_uart_read+0x2a0>
  else
    return -EIO;
   1d8ec:	00bffec4 	movi	r2,-5
}
   1d8f0:	e037883a 	mov	sp,fp
   1d8f4:	dfc00117 	ldw	ra,4(sp)
   1d8f8:	df000017 	ldw	fp,0(sp)
   1d8fc:	dec00204 	addi	sp,sp,8
   1d900:	f800283a 	ret

0001d904 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
   1d904:	deffed04 	addi	sp,sp,-76
   1d908:	dfc01215 	stw	ra,72(sp)
   1d90c:	df001115 	stw	fp,68(sp)
   1d910:	df001104 	addi	fp,sp,68
   1d914:	e13ffc15 	stw	r4,-16(fp)
   1d918:	e17ffd15 	stw	r5,-12(fp)
   1d91c:	e1bffe15 	stw	r6,-8(fp)
   1d920:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
   1d924:	e03ff015 	stw	zero,-64(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
   1d928:	e0bffd17 	ldw	r2,-12(fp)
   1d92c:	e0bff215 	stw	r2,-56(fp)

  /*
   * When running in a multi threaded environment, obtain the "write_lock"
   * semaphore. This ensures that writing to the device is thread-safe.
   */
  ALT_SEM_PEND (sp->write_lock, 0);
   1d930:	e0bffc17 	ldw	r2,-16(fp)
   1d934:	10800b17 	ldw	r2,44(r2)
   1d938:	e0bff515 	stw	r2,-44(fp)
   1d93c:	e03ff60d 	sth	zero,-40(fp)
   1d940:	e0fff60b 	ldhu	r3,-40(fp)
   1d944:	e0bffbc4 	addi	r2,fp,-17
   1d948:	e13ff517 	ldw	r4,-44(fp)
   1d94c:	180b883a 	mov	r5,r3
   1d950:	100d883a 	mov	r6,r2
   1d954:	00162680 	call	16268 <OSSemPend>

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   1d958:	00003806 	br	1da3c <altera_avalon_jtag_uart_write+0x138>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
   1d95c:	e0bffc17 	ldw	r2,-16(fp)
   1d960:	10800f17 	ldw	r2,60(r2)
   1d964:	e0bff315 	stw	r2,-52(fp)
      out = sp->tx_out;
   1d968:	e0bffc17 	ldw	r2,-16(fp)
   1d96c:	10801017 	ldw	r2,64(r2)
   1d970:	e0bff015 	stw	r2,-64(fp)

      if (in < out)
   1d974:	e0fff317 	ldw	r3,-52(fp)
   1d978:	e0bff017 	ldw	r2,-64(fp)
   1d97c:	1880062e 	bgeu	r3,r2,1d998 <altera_avalon_jtag_uart_write+0x94>
        n = out - 1 - in;
   1d980:	e0fff017 	ldw	r3,-64(fp)
   1d984:	e0bff317 	ldw	r2,-52(fp)
   1d988:	1885c83a 	sub	r2,r3,r2
   1d98c:	10bfffc4 	addi	r2,r2,-1
   1d990:	e0bff115 	stw	r2,-60(fp)
   1d994:	00000b06 	br	1d9c4 <altera_avalon_jtag_uart_write+0xc0>
      else if (out > 0)
   1d998:	e0bff017 	ldw	r2,-64(fp)
   1d99c:	10000526 	beq	r2,zero,1d9b4 <altera_avalon_jtag_uart_write+0xb0>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
   1d9a0:	00c20004 	movi	r3,2048
   1d9a4:	e0bff317 	ldw	r2,-52(fp)
   1d9a8:	1885c83a 	sub	r2,r3,r2
   1d9ac:	e0bff115 	stw	r2,-60(fp)
   1d9b0:	00000406 	br	1d9c4 <altera_avalon_jtag_uart_write+0xc0>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
   1d9b4:	00c1ffc4 	movi	r3,2047
   1d9b8:	e0bff317 	ldw	r2,-52(fp)
   1d9bc:	1885c83a 	sub	r2,r3,r2
   1d9c0:	e0bff115 	stw	r2,-60(fp)

      if (n == 0)
   1d9c4:	e0bff117 	ldw	r2,-60(fp)
   1d9c8:	1000011e 	bne	r2,zero,1d9d0 <altera_avalon_jtag_uart_write+0xcc>
        break;
   1d9cc:	00001d06 	br	1da44 <altera_avalon_jtag_uart_write+0x140>

      if (n > count)
   1d9d0:	e0fffe17 	ldw	r3,-8(fp)
   1d9d4:	e0bff117 	ldw	r2,-60(fp)
   1d9d8:	1880022e 	bgeu	r3,r2,1d9e4 <altera_avalon_jtag_uart_write+0xe0>
        n = count;
   1d9dc:	e0bffe17 	ldw	r2,-8(fp)
   1d9e0:	e0bff115 	stw	r2,-60(fp)

      memcpy(sp->tx_buf + in, ptr, n);
   1d9e4:	e0bff317 	ldw	r2,-52(fp)
   1d9e8:	10821104 	addi	r2,r2,2116
   1d9ec:	e0fffc17 	ldw	r3,-16(fp)
   1d9f0:	1885883a 	add	r2,r3,r2
   1d9f4:	1009883a 	mov	r4,r2
   1d9f8:	e17ffd17 	ldw	r5,-12(fp)
   1d9fc:	e1bff117 	ldw	r6,-60(fp)
   1da00:	00081080 	call	8108 <memcpy>
      ptr   += n;
   1da04:	e0fffd17 	ldw	r3,-12(fp)
   1da08:	e0bff117 	ldw	r2,-60(fp)
   1da0c:	1885883a 	add	r2,r3,r2
   1da10:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
   1da14:	e0fffe17 	ldw	r3,-8(fp)
   1da18:	e0bff117 	ldw	r2,-60(fp)
   1da1c:	1885c83a 	sub	r2,r3,r2
   1da20:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   1da24:	e0fff317 	ldw	r3,-52(fp)
   1da28:	e0bff117 	ldw	r2,-60(fp)
   1da2c:	1885883a 	add	r2,r3,r2
   1da30:	10c1ffcc 	andi	r3,r2,2047
   1da34:	e0bffc17 	ldw	r2,-16(fp)
   1da38:	10c00f15 	stw	r3,60(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   1da3c:	e0bffe17 	ldw	r2,-8(fp)
   1da40:	00bfc616 	blt	zero,r2,1d95c <__alt_mem_Flash_flash_data+0xf401d95c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1da44:	0005303a 	rdctl	r2,status
   1da48:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1da4c:	e0fff717 	ldw	r3,-36(fp)
   1da50:	00bfff84 	movi	r2,-2
   1da54:	1884703a 	and	r2,r3,r2
   1da58:	1001703a 	wrctl	status,r2
  
  return context;
   1da5c:	e0bff717 	ldw	r2,-36(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
   1da60:	e0bff415 	stw	r2,-48(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   1da64:	e0bffc17 	ldw	r2,-16(fp)
   1da68:	10800817 	ldw	r2,32(r2)
   1da6c:	10c00094 	ori	r3,r2,2
   1da70:	e0bffc17 	ldw	r2,-16(fp)
   1da74:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   1da78:	e0bffc17 	ldw	r2,-16(fp)
   1da7c:	10800017 	ldw	r2,0(r2)
   1da80:	10800104 	addi	r2,r2,4
   1da84:	1007883a 	mov	r3,r2
   1da88:	e0bffc17 	ldw	r2,-16(fp)
   1da8c:	10800817 	ldw	r2,32(r2)
   1da90:	18800035 	stwio	r2,0(r3)
   1da94:	e0bff417 	ldw	r2,-48(fp)
   1da98:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1da9c:	e0bff817 	ldw	r2,-32(fp)
   1daa0:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
   1daa4:	e0bffe17 	ldw	r2,-8(fp)
   1daa8:	00802e0e 	bge	zero,r2,1db64 <altera_avalon_jtag_uart_write+0x260>
    {
      if (flags & O_NONBLOCK)
   1daac:	e0bfff17 	ldw	r2,-4(fp)
   1dab0:	1090000c 	andi	r2,r2,16384
   1dab4:	10000126 	beq	r2,zero,1dabc <altera_avalon_jtag_uart_write+0x1b8>
        break;
   1dab8:	00002c06 	br	1db6c <altera_avalon_jtag_uart_write+0x268>

#ifdef __ucosii__
      /* OS Present: Pend on a flag if the OS is running, otherwise spin */
      if(OSRunning == OS_TRUE) {
   1dabc:	008000b4 	movhi	r2,2
   1dac0:	10930944 	addi	r2,r2,19493
   1dac4:	10800003 	ldbu	r2,0(r2)
   1dac8:	10803fcc 	andi	r2,r2,255
   1dacc:	10800058 	cmpnei	r2,r2,1
   1dad0:	1000161e 	bne	r2,zero,1db2c <altera_avalon_jtag_uart_write+0x228>
         * more profitable elsewhere.
         */
#ifdef ALTERA_AVALON_JTAG_UART_IGNORE_FIFO_FULL_ERROR
        if(!sp->host_inactive)
#endif
        ALT_FLAG_PEND (sp->events,
   1dad4:	e0bffc17 	ldw	r2,-16(fp)
   1dad8:	10800c17 	ldw	r2,48(r2)
   1dadc:	e0bff915 	stw	r2,-28(fp)
   1dae0:	00800184 	movi	r2,6
   1dae4:	e0bffa0d 	sth	r2,-24(fp)
   1dae8:	00bfe0c4 	movi	r2,-125
   1daec:	e0bffa85 	stb	r2,-22(fp)
   1daf0:	e03ffb0d 	sth	zero,-20(fp)
                   OS_FLAGS flags, 
                   INT8U wait_type, 
                   INT16U timeout)
{
  INT8U err;
  if (OSRunning)
   1daf4:	008000b4 	movhi	r2,2
   1daf8:	10930944 	addi	r2,r2,19493
   1dafc:	10800003 	ldbu	r2,0(r2)
   1db00:	10803fcc 	andi	r2,r2,255
   1db04:	10001326 	beq	r2,zero,1db54 <altera_avalon_jtag_uart_write+0x250>
  {
    OSFlagPend (group, flags, wait_type, timeout, &err);
   1db08:	e17ffa0b 	ldhu	r5,-24(fp)
   1db0c:	e1bffa83 	ldbu	r6,-22(fp)
   1db10:	e0fffb0b 	ldhu	r3,-20(fp)
   1db14:	e0bffb84 	addi	r2,fp,-18
   1db18:	d8800015 	stw	r2,0(sp)
   1db1c:	e13ff917 	ldw	r4,-28(fp)
   1db20:	180f883a 	mov	r7,r3
   1db24:	00135c00 	call	135c0 <OSFlagPend>
   1db28:	00000a06 	br	1db54 <altera_avalon_jtag_uart_write+0x250>
        /*
         * OS not running: Wait for data to be removed from buffer.
         * Once the interrupt routine has removed some data then we
         * will be able to insert some more.
         */
        while (out == sp->tx_out && sp->host_inactive < sp->timeout)
   1db2c:	0001883a 	nop
   1db30:	e0bffc17 	ldw	r2,-16(fp)
   1db34:	10c01017 	ldw	r3,64(r2)
   1db38:	e0bff017 	ldw	r2,-64(fp)
   1db3c:	1880051e 	bne	r3,r2,1db54 <altera_avalon_jtag_uart_write+0x250>
   1db40:	e0bffc17 	ldw	r2,-16(fp)
   1db44:	10c00917 	ldw	r3,36(r2)
   1db48:	e0bffc17 	ldw	r2,-16(fp)
   1db4c:	10800117 	ldw	r2,4(r2)
   1db50:	18bff736 	bltu	r3,r2,1db30 <__alt_mem_Flash_flash_data+0xf401db30>
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
   1db54:	e0bffc17 	ldw	r2,-16(fp)
   1db58:	10800917 	ldw	r2,36(r2)
   1db5c:	10000126 	beq	r2,zero,1db64 <altera_avalon_jtag_uart_write+0x260>
         break;
   1db60:	00000206 	br	1db6c <altera_avalon_jtag_uart_write+0x268>
    }
  }
  while (count > 0);
   1db64:	e0bffe17 	ldw	r2,-8(fp)
   1db68:	00bf7b16 	blt	zero,r2,1d958 <__alt_mem_Flash_flash_data+0xf401d958>

  /*
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);
   1db6c:	e0bffc17 	ldw	r2,-16(fp)
   1db70:	10800b17 	ldw	r2,44(r2)
   1db74:	1009883a 	mov	r4,r2
   1db78:	001663c0 	call	1663c <OSSemPost>

  if (ptr != start)
   1db7c:	e0fffd17 	ldw	r3,-12(fp)
   1db80:	e0bff217 	ldw	r2,-56(fp)
   1db84:	18800426 	beq	r3,r2,1db98 <altera_avalon_jtag_uart_write+0x294>
    return ptr - start;
   1db88:	e0fffd17 	ldw	r3,-12(fp)
   1db8c:	e0bff217 	ldw	r2,-56(fp)
   1db90:	1885c83a 	sub	r2,r3,r2
   1db94:	00000606 	br	1dbb0 <altera_avalon_jtag_uart_write+0x2ac>
  else if (flags & O_NONBLOCK)
   1db98:	e0bfff17 	ldw	r2,-4(fp)
   1db9c:	1090000c 	andi	r2,r2,16384
   1dba0:	10000226 	beq	r2,zero,1dbac <altera_avalon_jtag_uart_write+0x2a8>
    return -EWOULDBLOCK;
   1dba4:	00bffd44 	movi	r2,-11
   1dba8:	00000106 	br	1dbb0 <altera_avalon_jtag_uart_write+0x2ac>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
   1dbac:	00bffec4 	movi	r2,-5
}
   1dbb0:	e037883a 	mov	sp,fp
   1dbb4:	dfc00117 	ldw	ra,4(sp)
   1dbb8:	df000017 	ldw	fp,0(sp)
   1dbbc:	dec00204 	addi	sp,sp,8
   1dbc0:	f800283a 	ret

0001dbc4 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
   1dbc4:	defff904 	addi	sp,sp,-28
   1dbc8:	dfc00615 	stw	ra,24(sp)
   1dbcc:	df000515 	stw	fp,20(sp)
   1dbd0:	df000504 	addi	fp,sp,20
   1dbd4:	e13ffe15 	stw	r4,-8(fp)
   1dbd8:	e17fff15 	stw	r5,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
   1dbdc:	0007883a 	mov	r3,zero
   1dbe0:	e0bffe17 	ldw	r2,-8(fp)
   1dbe4:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
   1dbe8:	e0bffe17 	ldw	r2,-8(fp)
   1dbec:	10800104 	addi	r2,r2,4
   1dbf0:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1dbf4:	0005303a 	rdctl	r2,status
   1dbf8:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1dbfc:	e0fffc17 	ldw	r3,-16(fp)
   1dc00:	00bfff84 	movi	r2,-2
   1dc04:	1884703a 	and	r2,r3,r2
   1dc08:	1001703a 	wrctl	status,r2
  
  return context;
   1dc0c:	e0bffc17 	ldw	r2,-16(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
   1dc10:	e0bffb15 	stw	r2,-20(fp)
  alt_tick ();
   1dc14:	001fc000 	call	1fc00 <alt_tick>
   1dc18:	e0bffb17 	ldw	r2,-20(fp)
   1dc1c:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1dc20:	e0bffd17 	ldw	r2,-12(fp)
   1dc24:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
   1dc28:	e037883a 	mov	sp,fp
   1dc2c:	dfc00117 	ldw	ra,4(sp)
   1dc30:	df000017 	ldw	fp,0(sp)
   1dc34:	dec00204 	addi	sp,sp,8
   1dc38:	f800283a 	ret

0001dc3c <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
   1dc3c:	defff904 	addi	sp,sp,-28
   1dc40:	dfc00615 	stw	ra,24(sp)
   1dc44:	df000515 	stw	fp,20(sp)
   1dc48:	df000504 	addi	fp,sp,20
   1dc4c:	e13ffc15 	stw	r4,-16(fp)
   1dc50:	e17ffd15 	stw	r5,-12(fp)
   1dc54:	e1bffe15 	stw	r6,-8(fp)
   1dc58:	e1ffff15 	stw	r7,-4(fp)
   1dc5c:	e0bfff17 	ldw	r2,-4(fp)
   1dc60:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
   1dc64:	008000b4 	movhi	r2,2
   1dc68:	10932b04 	addi	r2,r2,19628
   1dc6c:	10800017 	ldw	r2,0(r2)
   1dc70:	1000041e 	bne	r2,zero,1dc84 <alt_avalon_timer_sc_init+0x48>
  {
    _alt_tick_rate = nticks;
   1dc74:	008000b4 	movhi	r2,2
   1dc78:	10932b04 	addi	r2,r2,19628
   1dc7c:	e0fffb17 	ldw	r3,-20(fp)
   1dc80:	10c00015 	stw	r3,0(r2)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
   1dc84:	e0bffc17 	ldw	r2,-16(fp)
   1dc88:	10800104 	addi	r2,r2,4
   1dc8c:	00c001c4 	movi	r3,7
   1dc90:	10c00035 	stwio	r3,0(r2)
  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
   1dc94:	e13ffe17 	ldw	r4,-8(fp)
   1dc98:	e17ffc17 	ldw	r5,-16(fp)
   1dc9c:	018000b4 	movhi	r6,2
   1dca0:	31b6f104 	addi	r6,r6,-9276
   1dca4:	001f7440 	call	1f744 <alt_irq_register>
#endif  
}
   1dca8:	e037883a 	mov	sp,fp
   1dcac:	dfc00117 	ldw	ra,4(sp)
   1dcb0:	df000017 	ldw	fp,0(sp)
   1dcb4:	dec00204 	addi	sp,sp,8
   1dcb8:	f800283a 	ret

0001dcbc <get_DDRAM_addr>:
 * @sa the datasheet for the LCD Display Controller on the DE2 Board
 * @note the function requires that the input are in the valid range
 *
 **/
unsigned char get_DDRAM_addr(unsigned x_pos, unsigned y_pos)
{
   1dcbc:	defffc04 	addi	sp,sp,-16
   1dcc0:	df000315 	stw	fp,12(sp)
   1dcc4:	df000304 	addi	fp,sp,12
   1dcc8:	e13ffe15 	stw	r4,-8(fp)
   1dccc:	e17fff15 	stw	r5,-4(fp)
	//assume valid inputs
	unsigned char addr = 0x00000000;
   1dcd0:	e03ffd05 	stb	zero,-12(fp)
	if (y_pos == 0)
   1dcd4:	e0bfff17 	ldw	r2,-4(fp)
   1dcd8:	1000061e 	bne	r2,zero,1dcf4 <get_DDRAM_addr+0x38>
	{
		addr |= x_pos;
   1dcdc:	e0bffe17 	ldw	r2,-8(fp)
   1dce0:	1007883a 	mov	r3,r2
   1dce4:	e0bffd03 	ldbu	r2,-12(fp)
   1dce8:	1884b03a 	or	r2,r3,r2
   1dcec:	e0bffd05 	stb	r2,-12(fp)
   1dcf0:	00000806 	br	1dd14 <get_DDRAM_addr+0x58>
	}
	else
	{
		addr |= x_pos;
   1dcf4:	e0bffe17 	ldw	r2,-8(fp)
   1dcf8:	1007883a 	mov	r3,r2
   1dcfc:	e0bffd03 	ldbu	r2,-12(fp)
   1dd00:	1884b03a 	or	r2,r3,r2
   1dd04:	e0bffd05 	stb	r2,-12(fp)
		addr |= 0x00000040;
   1dd08:	e0bffd03 	ldbu	r2,-12(fp)
   1dd0c:	10801014 	ori	r2,r2,64
   1dd10:	e0bffd05 	stb	r2,-12(fp)
	}
	// b_7 is always 1 for DDRAM address, see datasheet
	return (addr | 0x00000080);
   1dd14:	e0fffd03 	ldbu	r3,-12(fp)
   1dd18:	00bfe004 	movi	r2,-128
   1dd1c:	1884b03a 	or	r2,r3,r2
}
   1dd20:	e037883a 	mov	sp,fp
   1dd24:	df000017 	ldw	fp,0(sp)
   1dd28:	dec00104 	addi	sp,sp,4
   1dd2c:	f800283a 	ret

0001dd30 <alt_up_character_lcd_send_cmd>:
 * @param cmd -- the command bits 
 *
 * @return nothing
 **/
void alt_up_character_lcd_send_cmd(alt_up_character_lcd_dev *lcd, unsigned char cmd)
{
   1dd30:	defffd04 	addi	sp,sp,-12
   1dd34:	df000215 	stw	fp,8(sp)
   1dd38:	df000204 	addi	fp,sp,8
   1dd3c:	e13ffe15 	stw	r4,-8(fp)
   1dd40:	2805883a 	mov	r2,r5
   1dd44:	e0bfff05 	stb	r2,-4(fp)
 	// NOTE: We use the term Instruction Register and Control Register interchangeably
	IOWR_ALT_UP_CHARACTER_LCD_COMMAND(lcd->base, cmd);
   1dd48:	e0bffe17 	ldw	r2,-8(fp)
   1dd4c:	10800a17 	ldw	r2,40(r2)
   1dd50:	1007883a 	mov	r3,r2
   1dd54:	e0bfff03 	ldbu	r2,-4(fp)
   1dd58:	18800025 	stbio	r2,0(r3)
}
   1dd5c:	e037883a 	mov	sp,fp
   1dd60:	df000017 	ldw	fp,0(sp)
   1dd64:	dec00104 	addi	sp,sp,4
   1dd68:	f800283a 	ret

0001dd6c <alt_up_character_lcd_init>:
 * file for a detailed description of each function
 */
////////////////////////////////////////////////////////////////////////////

void alt_up_character_lcd_init(alt_up_character_lcd_dev *lcd)
{
   1dd6c:	defffe04 	addi	sp,sp,-8
   1dd70:	df000115 	stw	fp,4(sp)
   1dd74:	df000104 	addi	fp,sp,4
   1dd78:	e13fff15 	stw	r4,-4(fp)
	IOWR_ALT_UP_CHARACTER_LCD_COMMAND(lcd->base, ALT_UP_CHARACTER_LCD_COMM_CLEAR_DISPLAY);
   1dd7c:	e0bfff17 	ldw	r2,-4(fp)
   1dd80:	10800a17 	ldw	r2,40(r2)
   1dd84:	1007883a 	mov	r3,r2
   1dd88:	00800044 	movi	r2,1
   1dd8c:	18800025 	stbio	r2,0(r3)
	// register the device 
	// see "Developing Device Drivers for the HAL" in "Nios II Software Developer's Handbook"
}
   1dd90:	e037883a 	mov	sp,fp
   1dd94:	df000017 	ldw	fp,0(sp)
   1dd98:	dec00104 	addi	sp,sp,4
   1dd9c:	f800283a 	ret

0001dda0 <alt_up_character_lcd_open_dev>:

alt_up_character_lcd_dev* alt_up_character_lcd_open_dev(const char* name)
{
   1dda0:	defffc04 	addi	sp,sp,-16
   1dda4:	dfc00315 	stw	ra,12(sp)
   1dda8:	df000215 	stw	fp,8(sp)
   1ddac:	df000204 	addi	fp,sp,8
   1ddb0:	e13fff15 	stw	r4,-4(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_character_lcd_dev *dev = (alt_up_character_lcd_dev*)alt_find_dev(name, &alt_dev_list);
   1ddb4:	e13fff17 	ldw	r4,-4(fp)
   1ddb8:	014000b4 	movhi	r5,2
   1ddbc:	294b1504 	addi	r5,r5,11348
   1ddc0:	001f54c0 	call	1f54c <alt_find_dev>
   1ddc4:	e0bffe15 	stw	r2,-8(fp)

  return dev;
   1ddc8:	e0bffe17 	ldw	r2,-8(fp)
}
   1ddcc:	e037883a 	mov	sp,fp
   1ddd0:	dfc00117 	ldw	ra,4(sp)
   1ddd4:	df000017 	ldw	fp,0(sp)
   1ddd8:	dec00204 	addi	sp,sp,8
   1dddc:	f800283a 	ret

0001dde0 <alt_up_character_lcd_write>:

void alt_up_character_lcd_write(alt_up_character_lcd_dev *dev, const char *ptr, unsigned int len)
{
   1dde0:	defffb04 	addi	sp,sp,-20
   1dde4:	df000415 	stw	fp,16(sp)
   1dde8:	df000404 	addi	fp,sp,16
   1ddec:	e13ffd15 	stw	r4,-12(fp)
   1ddf0:	e17ffe15 	stw	r5,-8(fp)
   1ddf4:	e1bfff15 	stw	r6,-4(fp)
	unsigned int i;
	for (i = 0; i < len; i++)
   1ddf8:	e03ffc15 	stw	zero,-16(fp)
   1ddfc:	00000f06 	br	1de3c <alt_up_character_lcd_write+0x5c>
	{
		IOWR_ALT_UP_CHARACTER_LCD_DATA(dev->base, *(ptr+i));
   1de00:	e0bffd17 	ldw	r2,-12(fp)
   1de04:	10800a17 	ldw	r2,40(r2)
   1de08:	10800044 	addi	r2,r2,1
   1de0c:	1009883a 	mov	r4,r2
   1de10:	e0fffe17 	ldw	r3,-8(fp)
   1de14:	e0bffc17 	ldw	r2,-16(fp)
   1de18:	1885883a 	add	r2,r3,r2
   1de1c:	10800003 	ldbu	r2,0(r2)
   1de20:	10803fcc 	andi	r2,r2,255
   1de24:	1080201c 	xori	r2,r2,128
   1de28:	10bfe004 	addi	r2,r2,-128
   1de2c:	20800025 	stbio	r2,0(r4)
}

void alt_up_character_lcd_write(alt_up_character_lcd_dev *dev, const char *ptr, unsigned int len)
{
	unsigned int i;
	for (i = 0; i < len; i++)
   1de30:	e0bffc17 	ldw	r2,-16(fp)
   1de34:	10800044 	addi	r2,r2,1
   1de38:	e0bffc15 	stw	r2,-16(fp)
   1de3c:	e0fffc17 	ldw	r3,-16(fp)
   1de40:	e0bfff17 	ldw	r2,-4(fp)
   1de44:	18bfee36 	bltu	r3,r2,1de00 <__alt_mem_Flash_flash_data+0xf401de00>
	{
		IOWR_ALT_UP_CHARACTER_LCD_DATA(dev->base, *(ptr+i));
	}
}
   1de48:	e037883a 	mov	sp,fp
   1de4c:	df000017 	ldw	fp,0(sp)
   1de50:	dec00104 	addi	sp,sp,4
   1de54:	f800283a 	ret

0001de58 <alt_up_character_lcd_string>:

void alt_up_character_lcd_string(alt_up_character_lcd_dev *dev, const char *ptr)
{
   1de58:	defffd04 	addi	sp,sp,-12
   1de5c:	df000215 	stw	fp,8(sp)
   1de60:	df000204 	addi	fp,sp,8
   1de64:	e13ffe15 	stw	r4,-8(fp)
   1de68:	e17fff15 	stw	r5,-4(fp)
	while ( *ptr )
   1de6c:	00000d06 	br	1dea4 <alt_up_character_lcd_string+0x4c>
	{
		IOWR_ALT_UP_CHARACTER_LCD_DATA(dev->base, *(ptr));
   1de70:	e0bffe17 	ldw	r2,-8(fp)
   1de74:	10800a17 	ldw	r2,40(r2)
   1de78:	10800044 	addi	r2,r2,1
   1de7c:	1007883a 	mov	r3,r2
   1de80:	e0bfff17 	ldw	r2,-4(fp)
   1de84:	10800003 	ldbu	r2,0(r2)
   1de88:	10803fcc 	andi	r2,r2,255
   1de8c:	1080201c 	xori	r2,r2,128
   1de90:	10bfe004 	addi	r2,r2,-128
   1de94:	18800025 	stbio	r2,0(r3)
		++ptr;
   1de98:	e0bfff17 	ldw	r2,-4(fp)
   1de9c:	10800044 	addi	r2,r2,1
   1dea0:	e0bfff15 	stw	r2,-4(fp)
	}
}

void alt_up_character_lcd_string(alt_up_character_lcd_dev *dev, const char *ptr)
{
	while ( *ptr )
   1dea4:	e0bfff17 	ldw	r2,-4(fp)
   1dea8:	10800003 	ldbu	r2,0(r2)
   1deac:	10803fcc 	andi	r2,r2,255
   1deb0:	1080201c 	xori	r2,r2,128
   1deb4:	10bfe004 	addi	r2,r2,-128
   1deb8:	103fed1e 	bne	r2,zero,1de70 <__alt_mem_Flash_flash_data+0xf401de70>
	{
		IOWR_ALT_UP_CHARACTER_LCD_DATA(dev->base, *(ptr));
		++ptr;
	}
}
   1debc:	e037883a 	mov	sp,fp
   1dec0:	df000017 	ldw	fp,0(sp)
   1dec4:	dec00104 	addi	sp,sp,4
   1dec8:	f800283a 	ret

0001decc <alt_up_character_lcd_write_fd>:

// this function isn't used, and is included for future upgrades
int alt_up_character_lcd_write_fd(alt_fd *fd, const char *ptr, int len)
{
   1decc:	defffb04 	addi	sp,sp,-20
   1ded0:	dfc00415 	stw	ra,16(sp)
   1ded4:	df000315 	stw	fp,12(sp)
   1ded8:	df000304 	addi	fp,sp,12
   1dedc:	e13ffd15 	stw	r4,-12(fp)
   1dee0:	e17ffe15 	stw	r5,-8(fp)
   1dee4:	e1bfff15 	stw	r6,-4(fp)
	alt_up_character_lcd_write( (alt_up_character_lcd_dev *) fd->dev, ptr, (unsigned int) len);
   1dee8:	e0bffd17 	ldw	r2,-12(fp)
   1deec:	10c00017 	ldw	r3,0(r2)
   1def0:	e0bfff17 	ldw	r2,-4(fp)
   1def4:	1809883a 	mov	r4,r3
   1def8:	e17ffe17 	ldw	r5,-8(fp)
   1defc:	100d883a 	mov	r6,r2
   1df00:	001dde00 	call	1dde0 <alt_up_character_lcd_write>
	return 0;
   1df04:	0005883a 	mov	r2,zero
}
   1df08:	e037883a 	mov	sp,fp
   1df0c:	dfc00117 	ldw	ra,4(sp)
   1df10:	df000017 	ldw	fp,0(sp)
   1df14:	dec00204 	addi	sp,sp,8
   1df18:	f800283a 	ret

0001df1c <alt_up_character_lcd_set_cursor_pos>:

int alt_up_character_lcd_set_cursor_pos(alt_up_character_lcd_dev *lcd, unsigned x_pos, 
	 unsigned y_pos)
{
   1df1c:	defffa04 	addi	sp,sp,-24
   1df20:	dfc00515 	stw	ra,20(sp)
   1df24:	df000415 	stw	fp,16(sp)
   1df28:	df000404 	addi	fp,sp,16
   1df2c:	e13ffd15 	stw	r4,-12(fp)
   1df30:	e17ffe15 	stw	r5,-8(fp)
   1df34:	e1bfff15 	stw	r6,-4(fp)
	//boundary check
	if (x_pos > 39 || y_pos > 1 )
   1df38:	e0bffe17 	ldw	r2,-8(fp)
   1df3c:	10800a28 	cmpgeui	r2,r2,40
   1df40:	1000031e 	bne	r2,zero,1df50 <alt_up_character_lcd_set_cursor_pos+0x34>
   1df44:	e0bfff17 	ldw	r2,-4(fp)
   1df48:	108000b0 	cmpltui	r2,r2,2
   1df4c:	1000021e 	bne	r2,zero,1df58 <alt_up_character_lcd_set_cursor_pos+0x3c>
		// invalid argument
		return -1;
   1df50:	00bfffc4 	movi	r2,-1
   1df54:	00000906 	br	1df7c <alt_up_character_lcd_set_cursor_pos+0x60>
	// calculate address
	unsigned char addr = get_DDRAM_addr(x_pos, y_pos);
   1df58:	e13ffe17 	ldw	r4,-8(fp)
   1df5c:	e17fff17 	ldw	r5,-4(fp)
   1df60:	001dcbc0 	call	1dcbc <get_DDRAM_addr>
   1df64:	e0bffc05 	stb	r2,-16(fp)
	// set the cursor
	alt_up_character_lcd_send_cmd(lcd, addr);
   1df68:	e0bffc03 	ldbu	r2,-16(fp)
   1df6c:	e13ffd17 	ldw	r4,-12(fp)
   1df70:	100b883a 	mov	r5,r2
   1df74:	001dd300 	call	1dd30 <alt_up_character_lcd_send_cmd>
	return 0;
   1df78:	0005883a 	mov	r2,zero
}
   1df7c:	e037883a 	mov	sp,fp
   1df80:	dfc00117 	ldw	ra,4(sp)
   1df84:	df000017 	ldw	fp,0(sp)
   1df88:	dec00204 	addi	sp,sp,8
   1df8c:	f800283a 	ret

0001df90 <alt_up_character_lcd_shift_cursor>:

void alt_up_character_lcd_shift_cursor(alt_up_character_lcd_dev *lcd, int x_right_shift_offset)
{
   1df90:	defffb04 	addi	sp,sp,-20
   1df94:	dfc00415 	stw	ra,16(sp)
   1df98:	df000315 	stw	fp,12(sp)
   1df9c:	df000304 	addi	fp,sp,12
   1dfa0:	e13ffe15 	stw	r4,-8(fp)
   1dfa4:	e17fff15 	stw	r5,-4(fp)
	if (x_right_shift_offset == 0) 
   1dfa8:	e0bfff17 	ldw	r2,-4(fp)
   1dfac:	1000011e 	bne	r2,zero,1dfb4 <alt_up_character_lcd_shift_cursor+0x24>
		// don't ask me to do nothing 
		return;
   1dfb0:	00001406 	br	1e004 <alt_up_character_lcd_shift_cursor+0x74>

	// see shift right or left
	unsigned char shift_cmd = (x_right_shift_offset > 0) ? 
   1dfb4:	e0bfff17 	ldw	r2,-4(fp)
   1dfb8:	0080020e 	bge	zero,r2,1dfc4 <alt_up_character_lcd_shift_cursor+0x34>
   1dfbc:	00800504 	movi	r2,20
   1dfc0:	00000106 	br	1dfc8 <alt_up_character_lcd_shift_cursor+0x38>
   1dfc4:	00800404 	movi	r2,16
   1dfc8:	e0bffd45 	stb	r2,-11(fp)
		ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_LEFT;
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
   1dfcc:	e0bfff17 	ldw	r2,-4(fp)
   1dfd0:	1000010e 	bge	r2,zero,1dfd8 <alt_up_character_lcd_shift_cursor+0x48>
   1dfd4:	0085c83a 	sub	r2,zero,r2
   1dfd8:	e0bffd05 	stb	r2,-12(fp)
		-x_right_shift_offset;
	// do the shift
	while (num_offset-- > 0)
   1dfdc:	00000406 	br	1dff0 <alt_up_character_lcd_shift_cursor+0x60>
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
   1dfe0:	e0bffd43 	ldbu	r2,-11(fp)
   1dfe4:	e13ffe17 	ldw	r4,-8(fp)
   1dfe8:	100b883a 	mov	r5,r2
   1dfec:	001dd300 	call	1dd30 <alt_up_character_lcd_send_cmd>
		ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_LEFT;
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
		-x_right_shift_offset;
	// do the shift
	while (num_offset-- > 0)
   1dff0:	e0bffd03 	ldbu	r2,-12(fp)
   1dff4:	10ffffc4 	addi	r3,r2,-1
   1dff8:	e0fffd05 	stb	r3,-12(fp)
   1dffc:	10803fcc 	andi	r2,r2,255
   1e000:	103ff71e 	bne	r2,zero,1dfe0 <__alt_mem_Flash_flash_data+0xf401dfe0>
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
}
   1e004:	e037883a 	mov	sp,fp
   1e008:	dfc00117 	ldw	ra,4(sp)
   1e00c:	df000017 	ldw	fp,0(sp)
   1e010:	dec00204 	addi	sp,sp,8
   1e014:	f800283a 	ret

0001e018 <alt_up_character_lcd_shift_display>:

void alt_up_character_lcd_shift_display(alt_up_character_lcd_dev *lcd, int x_right_shift_offset)
{
   1e018:	defffb04 	addi	sp,sp,-20
   1e01c:	dfc00415 	stw	ra,16(sp)
   1e020:	df000315 	stw	fp,12(sp)
   1e024:	df000304 	addi	fp,sp,12
   1e028:	e13ffe15 	stw	r4,-8(fp)
   1e02c:	e17fff15 	stw	r5,-4(fp)
	if (x_right_shift_offset == 0) 
   1e030:	e0bfff17 	ldw	r2,-4(fp)
   1e034:	1000011e 	bne	r2,zero,1e03c <alt_up_character_lcd_shift_display+0x24>
		// don't ask me to do nothing 
		return;
   1e038:	00001406 	br	1e08c <alt_up_character_lcd_shift_display+0x74>

	// see shift right or left
	unsigned char shift_cmd = (x_right_shift_offset > 0) ? 
   1e03c:	e0bfff17 	ldw	r2,-4(fp)
   1e040:	0080020e 	bge	zero,r2,1e04c <alt_up_character_lcd_shift_display+0x34>
   1e044:	00800704 	movi	r2,28
   1e048:	00000106 	br	1e050 <alt_up_character_lcd_shift_display+0x38>
   1e04c:	00800604 	movi	r2,24
   1e050:	e0bffd45 	stb	r2,-11(fp)
		ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_LEFT;
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
   1e054:	e0bfff17 	ldw	r2,-4(fp)
   1e058:	1000010e 	bge	r2,zero,1e060 <alt_up_character_lcd_shift_display+0x48>
   1e05c:	0085c83a 	sub	r2,zero,r2
   1e060:	e0bffd05 	stb	r2,-12(fp)
		-x_right_shift_offset;
	// do the shift
	while (num_offset-- > 0)
   1e064:	00000406 	br	1e078 <alt_up_character_lcd_shift_display+0x60>
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
   1e068:	e0bffd43 	ldbu	r2,-11(fp)
   1e06c:	e13ffe17 	ldw	r4,-8(fp)
   1e070:	100b883a 	mov	r5,r2
   1e074:	001dd300 	call	1dd30 <alt_up_character_lcd_send_cmd>
		ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_LEFT;
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
		-x_right_shift_offset;
	// do the shift
	while (num_offset-- > 0)
   1e078:	e0bffd03 	ldbu	r2,-12(fp)
   1e07c:	10ffffc4 	addi	r3,r2,-1
   1e080:	e0fffd05 	stb	r3,-12(fp)
   1e084:	10803fcc 	andi	r2,r2,255
   1e088:	103ff71e 	bne	r2,zero,1e068 <__alt_mem_Flash_flash_data+0xf401e068>
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
}
   1e08c:	e037883a 	mov	sp,fp
   1e090:	dfc00117 	ldw	ra,4(sp)
   1e094:	df000017 	ldw	fp,0(sp)
   1e098:	dec00204 	addi	sp,sp,8
   1e09c:	f800283a 	ret

0001e0a0 <alt_up_character_lcd_erase_pos>:

int alt_up_character_lcd_erase_pos(alt_up_character_lcd_dev *lcd, unsigned x_pos, unsigned y_pos)
{
   1e0a0:	defffa04 	addi	sp,sp,-24
   1e0a4:	dfc00515 	stw	ra,20(sp)
   1e0a8:	df000415 	stw	fp,16(sp)
   1e0ac:	df000404 	addi	fp,sp,16
   1e0b0:	e13ffd15 	stw	r4,-12(fp)
   1e0b4:	e17ffe15 	stw	r5,-8(fp)
   1e0b8:	e1bfff15 	stw	r6,-4(fp)
	// boundary check
	if (x_pos > 39 || y_pos > 1 )
   1e0bc:	e0bffe17 	ldw	r2,-8(fp)
   1e0c0:	10800a28 	cmpgeui	r2,r2,40
   1e0c4:	1000031e 	bne	r2,zero,1e0d4 <alt_up_character_lcd_erase_pos+0x34>
   1e0c8:	e0bfff17 	ldw	r2,-4(fp)
   1e0cc:	108000b0 	cmpltui	r2,r2,2
   1e0d0:	1000021e 	bne	r2,zero,1e0dc <alt_up_character_lcd_erase_pos+0x3c>
		return -1;
   1e0d4:	00bfffc4 	movi	r2,-1
   1e0d8:	00000f06 	br	1e118 <alt_up_character_lcd_erase_pos+0x78>

	// get address
	unsigned char addr = get_DDRAM_addr(x_pos, y_pos);
   1e0dc:	e13ffe17 	ldw	r4,-8(fp)
   1e0e0:	e17fff17 	ldw	r5,-4(fp)
   1e0e4:	001dcbc0 	call	1dcbc <get_DDRAM_addr>
   1e0e8:	e0bffc05 	stb	r2,-16(fp)
	// set cursor to dest point
	alt_up_character_lcd_send_cmd(lcd, addr);
   1e0ec:	e0bffc03 	ldbu	r2,-16(fp)
   1e0f0:	e13ffd17 	ldw	r4,-12(fp)
   1e0f4:	100b883a 	mov	r5,r2
   1e0f8:	001dd300 	call	1dd30 <alt_up_character_lcd_send_cmd>
	//send an empty char as erase (refer to the Character Generator ROM part of the Datasheet)
	IOWR_ALT_UP_CHARACTER_LCD_DATA(lcd->base, (0x00000002) );
   1e0fc:	e0bffd17 	ldw	r2,-12(fp)
   1e100:	10800a17 	ldw	r2,40(r2)
   1e104:	10800044 	addi	r2,r2,1
   1e108:	1007883a 	mov	r3,r2
   1e10c:	00800084 	movi	r2,2
   1e110:	18800025 	stbio	r2,0(r3)
	return 0;
   1e114:	0005883a 	mov	r2,zero
}
   1e118:	e037883a 	mov	sp,fp
   1e11c:	dfc00117 	ldw	ra,4(sp)
   1e120:	df000017 	ldw	fp,0(sp)
   1e124:	dec00204 	addi	sp,sp,8
   1e128:	f800283a 	ret

0001e12c <alt_up_character_lcd_cursor_off>:

void alt_up_character_lcd_cursor_off(alt_up_character_lcd_dev *lcd)
{
   1e12c:	defffd04 	addi	sp,sp,-12
   1e130:	dfc00215 	stw	ra,8(sp)
   1e134:	df000115 	stw	fp,4(sp)
   1e138:	df000104 	addi	fp,sp,4
   1e13c:	e13fff15 	stw	r4,-4(fp)
	alt_up_character_lcd_send_cmd(lcd, ALT_UP_CHARACTER_LCD_COMM_CURSOR_OFF);
   1e140:	e13fff17 	ldw	r4,-4(fp)
   1e144:	01400304 	movi	r5,12
   1e148:	001dd300 	call	1dd30 <alt_up_character_lcd_send_cmd>
}
   1e14c:	e037883a 	mov	sp,fp
   1e150:	dfc00117 	ldw	ra,4(sp)
   1e154:	df000017 	ldw	fp,0(sp)
   1e158:	dec00204 	addi	sp,sp,8
   1e15c:	f800283a 	ret

0001e160 <alt_up_character_lcd_cursor_blink_on>:

void alt_up_character_lcd_cursor_blink_on(alt_up_character_lcd_dev *lcd)
{
   1e160:	defffd04 	addi	sp,sp,-12
   1e164:	dfc00215 	stw	ra,8(sp)
   1e168:	df000115 	stw	fp,4(sp)
   1e16c:	df000104 	addi	fp,sp,4
   1e170:	e13fff15 	stw	r4,-4(fp)
	alt_up_character_lcd_send_cmd(lcd, ALT_UP_CHARACTER_LCD_COMM_CURSOR_BLINK_ON);
   1e174:	e13fff17 	ldw	r4,-4(fp)
   1e178:	014003c4 	movi	r5,15
   1e17c:	001dd300 	call	1dd30 <alt_up_character_lcd_send_cmd>
}
   1e180:	e037883a 	mov	sp,fp
   1e184:	dfc00117 	ldw	ra,4(sp)
   1e188:	df000017 	ldw	fp,0(sp)
   1e18c:	dec00204 	addi	sp,sp,8
   1e190:	f800283a 	ret

0001e194 <alt_up_irda_enable_read_interrupt>:
#include "altera_up_avalon_irda.h"
#include "altera_up_avalon_irda_regs.h"


void alt_up_irda_enable_read_interrupt(alt_up_irda_dev *irda)
{
   1e194:	defffd04 	addi	sp,sp,-12
   1e198:	df000215 	stw	fp,8(sp)
   1e19c:	df000204 	addi	fp,sp,8
   1e1a0:	e13fff15 	stw	r4,-4(fp)
	alt_u32 ctrl_reg;
	ctrl_reg = IORD_ALT_UP_IRDA_CONTROL(irda->base); 
   1e1a4:	e0bfff17 	ldw	r2,-4(fp)
   1e1a8:	10800a17 	ldw	r2,40(r2)
   1e1ac:	10800104 	addi	r2,r2,4
   1e1b0:	10800037 	ldwio	r2,0(r2)
   1e1b4:	e0bffe15 	stw	r2,-8(fp)
	// set RE to 1 while maintaining other bits the same
	ctrl_reg |= ALT_UP_IRDA_CONTROL_RE_MSK;
   1e1b8:	e0bffe17 	ldw	r2,-8(fp)
   1e1bc:	10800054 	ori	r2,r2,1
   1e1c0:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_IRDA_CONTROL(irda->base, ctrl_reg);
   1e1c4:	e0bfff17 	ldw	r2,-4(fp)
   1e1c8:	10800a17 	ldw	r2,40(r2)
   1e1cc:	10800104 	addi	r2,r2,4
   1e1d0:	1007883a 	mov	r3,r2
   1e1d4:	e0bffe17 	ldw	r2,-8(fp)
   1e1d8:	18800035 	stwio	r2,0(r3)
}
   1e1dc:	e037883a 	mov	sp,fp
   1e1e0:	df000017 	ldw	fp,0(sp)
   1e1e4:	dec00104 	addi	sp,sp,4
   1e1e8:	f800283a 	ret

0001e1ec <alt_up_irda_disable_read_interrupt>:

void alt_up_irda_disable_read_interrupt(alt_up_irda_dev *irda)
{
   1e1ec:	defffd04 	addi	sp,sp,-12
   1e1f0:	df000215 	stw	fp,8(sp)
   1e1f4:	df000204 	addi	fp,sp,8
   1e1f8:	e13fff15 	stw	r4,-4(fp)
	alt_u32 ctrl_reg;
	ctrl_reg = IORD_ALT_UP_IRDA_CONTROL(irda->base); 
   1e1fc:	e0bfff17 	ldw	r2,-4(fp)
   1e200:	10800a17 	ldw	r2,40(r2)
   1e204:	10800104 	addi	r2,r2,4
   1e208:	10800037 	ldwio	r2,0(r2)
   1e20c:	e0bffe15 	stw	r2,-8(fp)
	// set RE to 0 while maintaining other bits the same
	ctrl_reg &= ~ALT_UP_IRDA_CONTROL_RE_MSK;
   1e210:	e0fffe17 	ldw	r3,-8(fp)
   1e214:	00bfff84 	movi	r2,-2
   1e218:	1884703a 	and	r2,r3,r2
   1e21c:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_IRDA_CONTROL(irda->base, ctrl_reg);
   1e220:	e0bfff17 	ldw	r2,-4(fp)
   1e224:	10800a17 	ldw	r2,40(r2)
   1e228:	10800104 	addi	r2,r2,4
   1e22c:	1007883a 	mov	r3,r2
   1e230:	e0bffe17 	ldw	r2,-8(fp)
   1e234:	18800035 	stwio	r2,0(r3)
}
   1e238:	e037883a 	mov	sp,fp
   1e23c:	df000017 	ldw	fp,0(sp)
   1e240:	dec00104 	addi	sp,sp,4
   1e244:	f800283a 	ret

0001e248 <alt_up_irda_get_used_space_in_read_FIFO>:

unsigned alt_up_irda_get_used_space_in_read_FIFO(alt_up_irda_dev *irda)
{
   1e248:	defffd04 	addi	sp,sp,-12
   1e24c:	df000215 	stw	fp,8(sp)
   1e250:	df000204 	addi	fp,sp,8
   1e254:	e13fff15 	stw	r4,-4(fp)
	alt_u16 ravail = 0;
   1e258:	e03ffe0d 	sth	zero,-8(fp)
	// we can only read the 16 bits for RAVAIL --- a read of DATA will discard the data
//	ravail = IORD_16DIRECT(IOADDR_ALT_UP_IRDA_DATA(irda->base), 2); 
//	return ravail;
	ravail = IORD_ALT_UP_IRDA_RAVAIL(irda->base); 
   1e25c:	e0bfff17 	ldw	r2,-4(fp)
   1e260:	10800a17 	ldw	r2,40(r2)
   1e264:	10800084 	addi	r2,r2,2
   1e268:	1080002b 	ldhuio	r2,0(r2)
   1e26c:	10bfffcc 	andi	r2,r2,65535
   1e270:	e0bffe0d 	sth	r2,-8(fp)
	return (ravail & ALT_UP_IRDA_RAVAIL_MSK) >> ALT_UP_IRDA_RAVAIL_OFST;
   1e274:	e0bffe0b 	ldhu	r2,-8(fp)
}
   1e278:	e037883a 	mov	sp,fp
   1e27c:	df000017 	ldw	fp,0(sp)
   1e280:	dec00104 	addi	sp,sp,4
   1e284:	f800283a 	ret

0001e288 <alt_up_irda_get_available_space_in_write_FIFO>:

unsigned alt_up_irda_get_available_space_in_write_FIFO(alt_up_irda_dev *irda)
{
   1e288:	defffd04 	addi	sp,sp,-12
   1e28c:	df000215 	stw	fp,8(sp)
   1e290:	df000204 	addi	fp,sp,8
   1e294:	e13fff15 	stw	r4,-4(fp)
	alt_u32 ctrl_reg;
	ctrl_reg = IORD_ALT_UP_IRDA_CONTROL(irda->base); 
   1e298:	e0bfff17 	ldw	r2,-4(fp)
   1e29c:	10800a17 	ldw	r2,40(r2)
   1e2a0:	10800104 	addi	r2,r2,4
   1e2a4:	10800037 	ldwio	r2,0(r2)
   1e2a8:	e0bffe15 	stw	r2,-8(fp)
	return (ctrl_reg & ALT_UP_IRDA_CONTROL_WSPACE_MSK) >> ALT_UP_IRDA_CONTROL_WSPACE_OFST;
   1e2ac:	e0bffe17 	ldw	r2,-8(fp)
   1e2b0:	1004d43a 	srli	r2,r2,16
}
   1e2b4:	e037883a 	mov	sp,fp
   1e2b8:	df000017 	ldw	fp,0(sp)
   1e2bc:	dec00104 	addi	sp,sp,4
   1e2c0:	f800283a 	ret

0001e2c4 <alt_up_irda_check_parity>:

int alt_up_irda_check_parity(alt_u32 data_reg)
{
   1e2c4:	defffd04 	addi	sp,sp,-12
   1e2c8:	df000215 	stw	fp,8(sp)
   1e2cc:	df000204 	addi	fp,sp,8
   1e2d0:	e13fff15 	stw	r4,-4(fp)
	unsigned parity_error = (data_reg & ALT_UP_IRDA_DATA_PE_MSK) >> ALT_UP_IRDA_DATA_PE_OFST;
   1e2d4:	e0bfff17 	ldw	r2,-4(fp)
   1e2d8:	1080800c 	andi	r2,r2,512
   1e2dc:	1004d27a 	srli	r2,r2,9
   1e2e0:	e0bffe15 	stw	r2,-8(fp)
	return (parity_error ? -1 : 0);
   1e2e4:	e0bffe17 	ldw	r2,-8(fp)
   1e2e8:	10000226 	beq	r2,zero,1e2f4 <alt_up_irda_check_parity+0x30>
   1e2ec:	00bfffc4 	movi	r2,-1
   1e2f0:	00000106 	br	1e2f8 <alt_up_irda_check_parity+0x34>
   1e2f4:	0005883a 	mov	r2,zero
}
   1e2f8:	e037883a 	mov	sp,fp
   1e2fc:	df000017 	ldw	fp,0(sp)
   1e300:	dec00104 	addi	sp,sp,4
   1e304:	f800283a 	ret

0001e308 <alt_up_irda_write_data>:

int alt_up_irda_write_data(alt_up_irda_dev *irda, alt_u8 data)
{
   1e308:	defffd04 	addi	sp,sp,-12
   1e30c:	df000215 	stw	fp,8(sp)
   1e310:	df000204 	addi	fp,sp,8
   1e314:	e13ffe15 	stw	r4,-8(fp)
   1e318:	2805883a 	mov	r2,r5
   1e31c:	e0bfff05 	stb	r2,-4(fp)
	data_reg = IORD_ALT_UP_IRDA_DATA(irda->base);
    */

	// we can write directly without thinking about other bit fields for this
	// case ONLY, because only DATA field of the data register is writable
	IOWR_ALT_UP_IRDA_DATA(irda->base, (data>>ALT_UP_IRDA_DATA_DATA_OFST) & ALT_UP_IRDA_DATA_DATA_MSK);
   1e320:	e0bffe17 	ldw	r2,-8(fp)
   1e324:	10800a17 	ldw	r2,40(r2)
   1e328:	1007883a 	mov	r3,r2
   1e32c:	e0bfff03 	ldbu	r2,-4(fp)
   1e330:	18800035 	stwio	r2,0(r3)
	return 0;
   1e334:	0005883a 	mov	r2,zero
}
   1e338:	e037883a 	mov	sp,fp
   1e33c:	df000017 	ldw	fp,0(sp)
   1e340:	dec00104 	addi	sp,sp,4
   1e344:	f800283a 	ret

0001e348 <alt_up_irda_read_data>:

int alt_up_irda_read_data(alt_up_irda_dev *irda, alt_u8 *data, alt_u8 *parity_error)
{
   1e348:	defffa04 	addi	sp,sp,-24
   1e34c:	dfc00515 	stw	ra,20(sp)
   1e350:	df000415 	stw	fp,16(sp)
   1e354:	df000404 	addi	fp,sp,16
   1e358:	e13ffd15 	stw	r4,-12(fp)
   1e35c:	e17ffe15 	stw	r5,-8(fp)
   1e360:	e1bfff15 	stw	r6,-4(fp)
	alt_u32 data_reg;
	data_reg = IORD_ALT_UP_IRDA_DATA(irda->base);
   1e364:	e0bffd17 	ldw	r2,-12(fp)
   1e368:	10800a17 	ldw	r2,40(r2)
   1e36c:	10800037 	ldwio	r2,0(r2)
   1e370:	e0bffc15 	stw	r2,-16(fp)
	*data = (data_reg & ALT_UP_IRDA_DATA_DATA_MSK) >> ALT_UP_IRDA_DATA_DATA_OFST;
   1e374:	e0bffc17 	ldw	r2,-16(fp)
   1e378:	1007883a 	mov	r3,r2
   1e37c:	e0bffe17 	ldw	r2,-8(fp)
   1e380:	10c00005 	stb	r3,0(r2)
	*parity_error = alt_up_irda_check_parity(data_reg);
   1e384:	e13ffc17 	ldw	r4,-16(fp)
   1e388:	001e2c40 	call	1e2c4 <alt_up_irda_check_parity>
   1e38c:	1007883a 	mov	r3,r2
   1e390:	e0bfff17 	ldw	r2,-4(fp)
   1e394:	10c00005 	stb	r3,0(r2)
	return (((data_reg & ALT_UP_IRDA_DATA_RVALID_MSK) >> ALT_UP_IRDA_DATA_RVALID_OFST) - 1);
   1e398:	e0bffc17 	ldw	r2,-16(fp)
   1e39c:	10a0000c 	andi	r2,r2,32768
   1e3a0:	1004d3fa 	srli	r2,r2,15
   1e3a4:	10bfffc4 	addi	r2,r2,-1
}
   1e3a8:	e037883a 	mov	sp,fp
   1e3ac:	dfc00117 	ldw	ra,4(sp)
   1e3b0:	df000017 	ldw	fp,0(sp)
   1e3b4:	dec00204 	addi	sp,sp,8
   1e3b8:	f800283a 	ret

0001e3bc <alt_up_irda_read_fd>:

int alt_up_irda_read_fd (alt_fd* fd, char* ptr, int len)
{
   1e3bc:	defff804 	addi	sp,sp,-32
   1e3c0:	dfc00715 	stw	ra,28(sp)
   1e3c4:	df000615 	stw	fp,24(sp)
   1e3c8:	df000604 	addi	fp,sp,24
   1e3cc:	e13ffd15 	stw	r4,-12(fp)
   1e3d0:	e17ffe15 	stw	r5,-8(fp)
   1e3d4:	e1bfff15 	stw	r6,-4(fp)
	alt_up_irda_dev *irda = (alt_up_irda_dev*)fd->dev;
   1e3d8:	e0bffd17 	ldw	r2,-12(fp)
   1e3dc:	10800017 	ldw	r2,0(r2)
   1e3e0:	e0bffb15 	stw	r2,-20(fp)
	int count = 0;
   1e3e4:	e03ffa15 	stw	zero,-24(fp)
	alt_u8 parity_error;
	while(len--)
   1e3e8:	00000e06 	br	1e424 <alt_up_irda_read_fd+0x68>
	{
		if (alt_up_irda_read_data(irda, (alt_u8 *)ptr++, &parity_error)==0)
   1e3ec:	e0bffe17 	ldw	r2,-8(fp)
   1e3f0:	10c00044 	addi	r3,r2,1
   1e3f4:	e0fffe15 	stw	r3,-8(fp)
   1e3f8:	e0fffc04 	addi	r3,fp,-16
   1e3fc:	e13ffb17 	ldw	r4,-20(fp)
   1e400:	100b883a 	mov	r5,r2
   1e404:	180d883a 	mov	r6,r3
   1e408:	001e3480 	call	1e348 <alt_up_irda_read_data>
   1e40c:	1000041e 	bne	r2,zero,1e420 <alt_up_irda_read_fd+0x64>
			count++;
   1e410:	e0bffa17 	ldw	r2,-24(fp)
   1e414:	10800044 	addi	r2,r2,1
   1e418:	e0bffa15 	stw	r2,-24(fp)
   1e41c:	00000106 	br	1e424 <alt_up_irda_read_fd+0x68>
		else
			break;
   1e420:	00000406 	br	1e434 <alt_up_irda_read_fd+0x78>
int alt_up_irda_read_fd (alt_fd* fd, char* ptr, int len)
{
	alt_up_irda_dev *irda = (alt_up_irda_dev*)fd->dev;
	int count = 0;
	alt_u8 parity_error;
	while(len--)
   1e424:	e0bfff17 	ldw	r2,-4(fp)
   1e428:	10ffffc4 	addi	r3,r2,-1
   1e42c:	e0ffff15 	stw	r3,-4(fp)
   1e430:	103fee1e 	bne	r2,zero,1e3ec <__alt_mem_Flash_flash_data+0xf401e3ec>
		if (alt_up_irda_read_data(irda, (alt_u8 *)ptr++, &parity_error)==0)
			count++;
		else
			break;
	}
	return count;
   1e434:	e0bffa17 	ldw	r2,-24(fp)
}
   1e438:	e037883a 	mov	sp,fp
   1e43c:	dfc00117 	ldw	ra,4(sp)
   1e440:	df000017 	ldw	fp,0(sp)
   1e444:	dec00204 	addi	sp,sp,8
   1e448:	f800283a 	ret

0001e44c <alt_up_irda_write_fd>:

int alt_up_irda_write_fd (alt_fd* fd, const char* ptr, int len)
{
   1e44c:	defff904 	addi	sp,sp,-28
   1e450:	dfc00615 	stw	ra,24(sp)
   1e454:	df000515 	stw	fp,20(sp)
   1e458:	df000504 	addi	fp,sp,20
   1e45c:	e13ffd15 	stw	r4,-12(fp)
   1e460:	e17ffe15 	stw	r5,-8(fp)
   1e464:	e1bfff15 	stw	r6,-4(fp)
	alt_up_irda_dev *irda = (alt_up_irda_dev*)fd->dev;
   1e468:	e0bffd17 	ldw	r2,-12(fp)
   1e46c:	10800017 	ldw	r2,0(r2)
   1e470:	e0bffc15 	stw	r2,-16(fp)
	int count = 0;
   1e474:	e03ffb15 	stw	zero,-20(fp)
	while(len--)
   1e478:	00000e06 	br	1e4b4 <alt_up_irda_write_fd+0x68>
	{
		if (alt_up_irda_write_data(irda, (alt_u8) *ptr++)==0)
   1e47c:	e0bffe17 	ldw	r2,-8(fp)
   1e480:	10c00044 	addi	r3,r2,1
   1e484:	e0fffe15 	stw	r3,-8(fp)
   1e488:	10800003 	ldbu	r2,0(r2)
   1e48c:	10803fcc 	andi	r2,r2,255
   1e490:	e13ffc17 	ldw	r4,-16(fp)
   1e494:	100b883a 	mov	r5,r2
   1e498:	001e3080 	call	1e308 <alt_up_irda_write_data>
   1e49c:	1000041e 	bne	r2,zero,1e4b0 <alt_up_irda_write_fd+0x64>
			count++;
   1e4a0:	e0bffb17 	ldw	r2,-20(fp)
   1e4a4:	10800044 	addi	r2,r2,1
   1e4a8:	e0bffb15 	stw	r2,-20(fp)
   1e4ac:	00000106 	br	1e4b4 <alt_up_irda_write_fd+0x68>
		else
			break;
   1e4b0:	00000406 	br	1e4c4 <alt_up_irda_write_fd+0x78>

int alt_up_irda_write_fd (alt_fd* fd, const char* ptr, int len)
{
	alt_up_irda_dev *irda = (alt_up_irda_dev*)fd->dev;
	int count = 0;
	while(len--)
   1e4b4:	e0bfff17 	ldw	r2,-4(fp)
   1e4b8:	10ffffc4 	addi	r3,r2,-1
   1e4bc:	e0ffff15 	stw	r3,-4(fp)
   1e4c0:	103fee1e 	bne	r2,zero,1e47c <__alt_mem_Flash_flash_data+0xf401e47c>
		if (alt_up_irda_write_data(irda, (alt_u8) *ptr++)==0)
			count++;
		else
			break;
	}
	return count;
   1e4c4:	e0bffb17 	ldw	r2,-20(fp)
}
   1e4c8:	e037883a 	mov	sp,fp
   1e4cc:	dfc00117 	ldw	ra,4(sp)
   1e4d0:	df000017 	ldw	fp,0(sp)
   1e4d4:	dec00204 	addi	sp,sp,8
   1e4d8:	f800283a 	ret

0001e4dc <alt_up_irda_open_dev>:

alt_up_irda_dev* alt_up_irda_open_dev(const char* name)
{
   1e4dc:	defffc04 	addi	sp,sp,-16
   1e4e0:	dfc00315 	stw	ra,12(sp)
   1e4e4:	df000215 	stw	fp,8(sp)
   1e4e8:	df000204 	addi	fp,sp,8
   1e4ec:	e13fff15 	stw	r4,-4(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_irda_dev *dev = (alt_up_irda_dev*)alt_find_dev(name, &alt_dev_list);
   1e4f0:	e13fff17 	ldw	r4,-4(fp)
   1e4f4:	014000b4 	movhi	r5,2
   1e4f8:	294b1504 	addi	r5,r5,11348
   1e4fc:	001f54c0 	call	1f54c <alt_find_dev>
   1e500:	e0bffe15 	stw	r2,-8(fp)

  return dev;
   1e504:	e0bffe17 	ldw	r2,-8(fp)
}
   1e508:	e037883a 	mov	sp,fp
   1e50c:	dfc00117 	ldw	ra,4(sp)
   1e510:	df000017 	ldw	fp,0(sp)
   1e514:	dec00204 	addi	sp,sp,8
   1e518:	f800283a 	ret

0001e51c <read_RI_bit>:


//////////////////////////////////////////////////////////////////////////////////////////////
// Internal Functions
alt_u8 read_RI_bit(alt_u32 ctrl_reg)
{
   1e51c:	defffd04 	addi	sp,sp,-12
   1e520:	df000215 	stw	fp,8(sp)
   1e524:	df000204 	addi	fp,sp,8
   1e528:	e13fff15 	stw	r4,-4(fp)
	alt_u8 ri = (alt_u8) ((ctrl_reg & ALT_UP_PS2_PORT_CTRL_REG_RI_MSK) >> ALT_UP_PS2_PORT_CTRL_REG_RI_OFST);
   1e52c:	e0bfff17 	ldw	r2,-4(fp)
   1e530:	1080400c 	andi	r2,r2,256
   1e534:	1004d23a 	srli	r2,r2,8
   1e538:	e0bffe05 	stb	r2,-8(fp)
	return ri;
   1e53c:	e0bffe03 	ldbu	r2,-8(fp)
}
   1e540:	e037883a 	mov	sp,fp
   1e544:	df000017 	ldw	fp,0(sp)
   1e548:	dec00104 	addi	sp,sp,4
   1e54c:	f800283a 	ret

0001e550 <read_RE_bit>:

alt_u8 read_RE_bit(alt_u32 ctrl_reg)
{
   1e550:	defffd04 	addi	sp,sp,-12
   1e554:	df000215 	stw	fp,8(sp)
   1e558:	df000204 	addi	fp,sp,8
   1e55c:	e13fff15 	stw	r4,-4(fp)
	alt_u8 re = (alt_u8) ((ctrl_reg & ALT_UP_PS2_PORT_CTRL_REG_RE_MSK) >> ALT_UP_PS2_PORT_CTRL_REG_RE_OFST);
   1e560:	e0bfff17 	ldw	r2,-4(fp)
   1e564:	1080004c 	andi	r2,r2,1
   1e568:	e0bffe05 	stb	r2,-8(fp)
	return re;
   1e56c:	e0bffe03 	ldbu	r2,-8(fp)
}
   1e570:	e037883a 	mov	sp,fp
   1e574:	df000017 	ldw	fp,0(sp)
   1e578:	dec00104 	addi	sp,sp,4
   1e57c:	f800283a 	ret

0001e580 <read_CE_bit>:

alt_u8 read_CE_bit(alt_u32 ctrl_reg)
{
   1e580:	defffd04 	addi	sp,sp,-12
   1e584:	df000215 	stw	fp,8(sp)
   1e588:	df000204 	addi	fp,sp,8
   1e58c:	e13fff15 	stw	r4,-4(fp)
	alt_u8 re = (alt_u8) ((ctrl_reg & ALT_UP_PS2_PORT_CTRL_REG_CE_MSK) >> ALT_UP_PS2_PORT_CTRL_REG_CE_OFST);
   1e590:	e0bfff17 	ldw	r2,-4(fp)
   1e594:	1081000c 	andi	r2,r2,1024
   1e598:	1004d2ba 	srli	r2,r2,10
   1e59c:	e0bffe05 	stb	r2,-8(fp)
	return re;
   1e5a0:	e0bffe03 	ldbu	r2,-8(fp)
}
   1e5a4:	e037883a 	mov	sp,fp
   1e5a8:	df000017 	ldw	fp,0(sp)
   1e5ac:	dec00104 	addi	sp,sp,4
   1e5b0:	f800283a 	ret

0001e5b4 <read_num_bytes_available>:

alt_u16 read_num_bytes_available(alt_u32 data_reg)
{
   1e5b4:	defffd04 	addi	sp,sp,-12
   1e5b8:	df000215 	stw	fp,8(sp)
   1e5bc:	df000204 	addi	fp,sp,8
   1e5c0:	e13fff15 	stw	r4,-4(fp)
	alt_u16 ravail = (alt_u16)((data_reg & ALT_UP_PS2_PORT_DATA_REG_RAVAIL_MSK ) >> ALT_UP_PS2_PORT_DATA_REG_RAVAIL_OFST);
   1e5c4:	e0bfff17 	ldw	r2,-4(fp)
   1e5c8:	1004d43a 	srli	r2,r2,16
   1e5cc:	e0bffe0d 	sth	r2,-8(fp)
	return ravail;
   1e5d0:	e0bffe0b 	ldhu	r2,-8(fp)
}
   1e5d4:	e037883a 	mov	sp,fp
   1e5d8:	df000017 	ldw	fp,0(sp)
   1e5dc:	dec00104 	addi	sp,sp,4
   1e5e0:	f800283a 	ret

0001e5e4 <read_data_valid>:

alt_u8 read_data_valid(alt_u32 data_reg)
{
   1e5e4:	defffd04 	addi	sp,sp,-12
   1e5e8:	df000215 	stw	fp,8(sp)
   1e5ec:	df000204 	addi	fp,sp,8
   1e5f0:	e13fff15 	stw	r4,-4(fp)
	alt_u8 rvalid = (alt_u8)((data_reg & ALT_UP_PS2_PORT_DATA_REG_RVALID_MSK ) >> ALT_UP_PS2_PORT_DATA_REG_RVALID_OFST);
   1e5f4:	e0bfff17 	ldw	r2,-4(fp)
   1e5f8:	10a0000c 	andi	r2,r2,32768
   1e5fc:	1004d3fa 	srli	r2,r2,15
   1e600:	e0bffe05 	stb	r2,-8(fp)
	return rvalid;
   1e604:	e0bffe03 	ldbu	r2,-8(fp)
}
   1e608:	e037883a 	mov	sp,fp
   1e60c:	df000017 	ldw	fp,0(sp)
   1e610:	dec00104 	addi	sp,sp,4
   1e614:	f800283a 	ret

0001e618 <read_data_byte>:

alt_u8 read_data_byte(alt_u32 data_reg)
{
   1e618:	defffd04 	addi	sp,sp,-12
   1e61c:	df000215 	stw	fp,8(sp)
   1e620:	df000204 	addi	fp,sp,8
   1e624:	e13fff15 	stw	r4,-4(fp)
	alt_u8 data = (alt_u8) ( (data_reg & ALT_UP_PS2_PORT_DATA_REG_DATA_MSK) >> ALT_UP_PS2_PORT_DATA_REG_DATA_OFST) ;
   1e628:	e0bfff17 	ldw	r2,-4(fp)
   1e62c:	e0bffe05 	stb	r2,-8(fp)
	return data;
   1e630:	e0bffe03 	ldbu	r2,-8(fp)
}
   1e634:	e037883a 	mov	sp,fp
   1e638:	df000017 	ldw	fp,0(sp)
   1e63c:	dec00104 	addi	sp,sp,4
   1e640:	f800283a 	ret

0001e644 <alt_up_ps2_init>:

//////////////////////////////////////////////////////////////////////////////////////////////
// HAL Functions
void alt_up_ps2_init(alt_up_ps2_dev *ps2)
{
   1e644:	defffb04 	addi	sp,sp,-20
   1e648:	dfc00415 	stw	ra,16(sp)
   1e64c:	df000315 	stw	fp,12(sp)
   1e650:	df000304 	addi	fp,sp,12
   1e654:	e13fff15 	stw	r4,-4(fp)
	// initialize the device
	unsigned char byte;
	//send the reset request, wait for ACK
	int status = alt_up_ps2_write_data_byte_with_ack(ps2, 0xff);
   1e658:	e13fff17 	ldw	r4,-4(fp)
   1e65c:	01403fc4 	movi	r5,255
   1e660:	001e8a00 	call	1e8a0 <alt_up_ps2_write_data_byte_with_ack>
   1e664:	e0bffd15 	stw	r2,-12(fp)
	if (status == 0)
   1e668:	e0bffd17 	ldw	r2,-12(fp)
   1e66c:	1000211e 	bne	r2,zero,1e6f4 <alt_up_ps2_init+0xb0>
	{
		// reset succeed, now try to get the BAT result, AA means passed
		status = alt_up_ps2_read_data_byte_timeout(ps2, &byte);
   1e670:	e0bffe04 	addi	r2,fp,-8
   1e674:	e13fff17 	ldw	r4,-4(fp)
   1e678:	100b883a 	mov	r5,r2
   1e67c:	001e9040 	call	1e904 <alt_up_ps2_read_data_byte_timeout>
   1e680:	e0bffd15 	stw	r2,-12(fp)
		if (status == 0 && byte == 0xAA)
   1e684:	e0bffd17 	ldw	r2,-12(fp)
   1e688:	10001a1e 	bne	r2,zero,1e6f4 <alt_up_ps2_init+0xb0>
   1e68c:	e0bffe03 	ldbu	r2,-8(fp)
   1e690:	10803fcc 	andi	r2,r2,255
   1e694:	10802a98 	cmpnei	r2,r2,170
   1e698:	1000161e 	bne	r2,zero,1e6f4 <alt_up_ps2_init+0xb0>
		{
			//get the 2nd byte
			status = alt_up_ps2_read_data_byte_timeout(ps2, &byte);
   1e69c:	e0bffe04 	addi	r2,fp,-8
   1e6a0:	e13fff17 	ldw	r4,-4(fp)
   1e6a4:	100b883a 	mov	r5,r2
   1e6a8:	001e9040 	call	1e904 <alt_up_ps2_read_data_byte_timeout>
   1e6ac:	e0bffd15 	stw	r2,-12(fp)
			if (status == -ETIMEDOUT)
   1e6b0:	e0bffd17 	ldw	r2,-12(fp)
   1e6b4:	10bfe318 	cmpnei	r2,r2,-116
   1e6b8:	1000041e 	bne	r2,zero,1e6cc <alt_up_ps2_init+0x88>
			{
				//for keyboard, only 2 bytes are sent(ACK, PASS/FAIL), so timeout
				ps2->device_type = PS2_KEYBOARD;
   1e6bc:	e0bfff17 	ldw	r2,-4(fp)
   1e6c0:	00c00044 	movi	r3,1
   1e6c4:	10c00d15 	stw	r3,52(r2)
   1e6c8:	00000a06 	br	1e6f4 <alt_up_ps2_init+0xb0>
			}
			else if (status == 0 && byte == 0x00)
   1e6cc:	e0bffd17 	ldw	r2,-12(fp)
   1e6d0:	1000081e 	bne	r2,zero,1e6f4 <alt_up_ps2_init+0xb0>
   1e6d4:	e0bffe03 	ldbu	r2,-8(fp)
   1e6d8:	10803fcc 	andi	r2,r2,255
   1e6dc:	1000051e 	bne	r2,zero,1e6f4 <alt_up_ps2_init+0xb0>
			{
				//for mouse, it will sent out 0x00 after sending out ACK and PASS/FAIL.
				ps2->device_type = PS2_MOUSE;
   1e6e0:	e0bfff17 	ldw	r2,-4(fp)
   1e6e4:	10000d15 	stw	zero,52(r2)
				(void) alt_up_ps2_write_data_byte (ps2, 0xf4); // enable data from mouse
   1e6e8:	e13fff17 	ldw	r4,-4(fp)
   1e6ec:	01403d04 	movi	r5,244
   1e6f0:	001e7bc0 	call	1e7bc <alt_up_ps2_write_data_byte>
			}
		}
	}
}
   1e6f4:	e037883a 	mov	sp,fp
   1e6f8:	dfc00117 	ldw	ra,4(sp)
   1e6fc:	df000017 	ldw	fp,0(sp)
   1e700:	dec00204 	addi	sp,sp,8
   1e704:	f800283a 	ret

0001e708 <alt_up_ps2_enable_read_interrupt>:

void alt_up_ps2_enable_read_interrupt(alt_up_ps2_dev *ps2)
{
   1e708:	defffd04 	addi	sp,sp,-12
   1e70c:	df000215 	stw	fp,8(sp)
   1e710:	df000204 	addi	fp,sp,8
   1e714:	e13fff15 	stw	r4,-4(fp)
	unsigned int ctrl_reg;
	ctrl_reg = IORD_ALT_UP_PS2_PORT_CTRL_REG(ps2->base); 
   1e718:	e0bfff17 	ldw	r2,-4(fp)
   1e71c:	10800a17 	ldw	r2,40(r2)
   1e720:	10800104 	addi	r2,r2,4
   1e724:	10800037 	ldwio	r2,0(r2)
   1e728:	e0bffe15 	stw	r2,-8(fp)
	// set RE to 1 while maintaining other bits the same
	ctrl_reg |= ALT_UP_PS2_PORT_CTRL_REG_RE_MSK;
   1e72c:	e0bffe17 	ldw	r2,-8(fp)
   1e730:	10800054 	ori	r2,r2,1
   1e734:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_PS2_PORT_CTRL_REG(ps2->base, ctrl_reg);
   1e738:	e0bfff17 	ldw	r2,-4(fp)
   1e73c:	10800a17 	ldw	r2,40(r2)
   1e740:	10800104 	addi	r2,r2,4
   1e744:	1007883a 	mov	r3,r2
   1e748:	e0bffe17 	ldw	r2,-8(fp)
   1e74c:	18800035 	stwio	r2,0(r3)
}
   1e750:	e037883a 	mov	sp,fp
   1e754:	df000017 	ldw	fp,0(sp)
   1e758:	dec00104 	addi	sp,sp,4
   1e75c:	f800283a 	ret

0001e760 <alt_up_ps2_disable_read_interrupt>:

void alt_up_ps2_disable_read_interrupt(alt_up_ps2_dev *ps2)
{
   1e760:	defffd04 	addi	sp,sp,-12
   1e764:	df000215 	stw	fp,8(sp)
   1e768:	df000204 	addi	fp,sp,8
   1e76c:	e13fff15 	stw	r4,-4(fp)
	unsigned int ctrl_reg;
	ctrl_reg = IORD_ALT_UP_PS2_PORT_CTRL_REG(ps2->base); 
   1e770:	e0bfff17 	ldw	r2,-4(fp)
   1e774:	10800a17 	ldw	r2,40(r2)
   1e778:	10800104 	addi	r2,r2,4
   1e77c:	10800037 	ldwio	r2,0(r2)
   1e780:	e0bffe15 	stw	r2,-8(fp)
	// set RE to 0 while maintaining other bits the same
	ctrl_reg &= ~ALT_UP_PS2_PORT_CTRL_REG_RE_MSK;
   1e784:	e0fffe17 	ldw	r3,-8(fp)
   1e788:	00bfff84 	movi	r2,-2
   1e78c:	1884703a 	and	r2,r3,r2
   1e790:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_PS2_PORT_CTRL_REG(ps2->base, ctrl_reg);
   1e794:	e0bfff17 	ldw	r2,-4(fp)
   1e798:	10800a17 	ldw	r2,40(r2)
   1e79c:	10800104 	addi	r2,r2,4
   1e7a0:	1007883a 	mov	r3,r2
   1e7a4:	e0bffe17 	ldw	r2,-8(fp)
   1e7a8:	18800035 	stwio	r2,0(r3)
}
   1e7ac:	e037883a 	mov	sp,fp
   1e7b0:	df000017 	ldw	fp,0(sp)
   1e7b4:	dec00104 	addi	sp,sp,4
   1e7b8:	f800283a 	ret

0001e7bc <alt_up_ps2_write_data_byte>:

int alt_up_ps2_write_data_byte(alt_up_ps2_dev *ps2, unsigned char byte)
{
   1e7bc:	defffb04 	addi	sp,sp,-20
   1e7c0:	dfc00415 	stw	ra,16(sp)
   1e7c4:	df000315 	stw	fp,12(sp)
   1e7c8:	df000304 	addi	fp,sp,12
   1e7cc:	e13ffe15 	stw	r4,-8(fp)
   1e7d0:	2805883a 	mov	r2,r5
   1e7d4:	e0bfff05 	stb	r2,-4(fp)
	//note: data are only located at the lower 8 bits
	//note: the software send command to the PS2 peripheral through the data
	//		register rather than the control register
	IOWR_ALT_UP_PS2_PORT_DATA(ps2->base, byte);
   1e7d8:	e0bffe17 	ldw	r2,-8(fp)
   1e7dc:	10800a17 	ldw	r2,40(r2)
   1e7e0:	1007883a 	mov	r3,r2
   1e7e4:	e0bfff03 	ldbu	r2,-4(fp)
   1e7e8:	18800025 	stbio	r2,0(r3)
	alt_u32 ctrl_reg = IORD_ALT_UP_PS2_PORT_CTRL_REG(ps2->base);
   1e7ec:	e0bffe17 	ldw	r2,-8(fp)
   1e7f0:	10800a17 	ldw	r2,40(r2)
   1e7f4:	10800104 	addi	r2,r2,4
   1e7f8:	10800037 	ldwio	r2,0(r2)
   1e7fc:	e0bffd15 	stw	r2,-12(fp)
	if (read_CE_bit(ctrl_reg))
   1e800:	e13ffd17 	ldw	r4,-12(fp)
   1e804:	001e5800 	call	1e580 <read_CE_bit>
   1e808:	10803fcc 	andi	r2,r2,255
   1e80c:	10000226 	beq	r2,zero,1e818 <alt_up_ps2_write_data_byte+0x5c>
	{
		//CE bit is set --> error occurs on sending commands
		return -EIO;
   1e810:	00bffec4 	movi	r2,-5
   1e814:	00000106 	br	1e81c <alt_up_ps2_write_data_byte+0x60>
	}
	return 0;
   1e818:	0005883a 	mov	r2,zero
}
   1e81c:	e037883a 	mov	sp,fp
   1e820:	dfc00117 	ldw	ra,4(sp)
   1e824:	df000017 	ldw	fp,0(sp)
   1e828:	dec00204 	addi	sp,sp,8
   1e82c:	f800283a 	ret

0001e830 <alt_up_ps2_wait_for_ack>:

int alt_up_ps2_wait_for_ack(alt_up_ps2_dev *ps2)
{
   1e830:	defffc04 	addi	sp,sp,-16
   1e834:	dfc00315 	stw	ra,12(sp)
   1e838:	df000215 	stw	fp,8(sp)
   1e83c:	df000204 	addi	fp,sp,8
   1e840:	e13fff15 	stw	r4,-4(fp)
	unsigned char data = 0;
   1e844:	e03ffe45 	stb	zero,-7(fp)
	unsigned char status = 0;
   1e848:	e03ffe05 	stb	zero,-8(fp)
	do
	{
		status = alt_up_ps2_read_data_byte_timeout(ps2, &data); 
   1e84c:	e0bffe44 	addi	r2,fp,-7
   1e850:	e13fff17 	ldw	r4,-4(fp)
   1e854:	100b883a 	mov	r5,r2
   1e858:	001e9040 	call	1e904 <alt_up_ps2_read_data_byte_timeout>
   1e85c:	e0bffe05 	stb	r2,-8(fp)
		if ( status == 0)
   1e860:	e0bffe03 	ldbu	r2,-8(fp)
   1e864:	1000061e 	bne	r2,zero,1e880 <alt_up_ps2_wait_for_ack+0x50>
		{
			if (data == PS2_ACK)
   1e868:	e0bffe43 	ldbu	r2,-7(fp)
   1e86c:	10803fcc 	andi	r2,r2,255
   1e870:	10803e98 	cmpnei	r2,r2,250
   1e874:	1000041e 	bne	r2,zero,1e888 <alt_up_ps2_wait_for_ack+0x58>
				return 0;
   1e878:	0005883a 	mov	r2,zero
   1e87c:	00000306 	br	1e88c <alt_up_ps2_wait_for_ack+0x5c>
		}
		else 
		{
			return status;
   1e880:	e0bffe03 	ldbu	r2,-8(fp)
   1e884:	00000106 	br	1e88c <alt_up_ps2_wait_for_ack+0x5c>
		}
	} while(1);
   1e888:	003ff006 	br	1e84c <__alt_mem_Flash_flash_data+0xf401e84c>
	return -ETIMEDOUT;
}
   1e88c:	e037883a 	mov	sp,fp
   1e890:	dfc00117 	ldw	ra,4(sp)
   1e894:	df000017 	ldw	fp,0(sp)
   1e898:	dec00204 	addi	sp,sp,8
   1e89c:	f800283a 	ret

0001e8a0 <alt_up_ps2_write_data_byte_with_ack>:

int alt_up_ps2_write_data_byte_with_ack(alt_up_ps2_dev *ps2, unsigned char byte)
{
   1e8a0:	defffa04 	addi	sp,sp,-24
   1e8a4:	dfc00515 	stw	ra,20(sp)
   1e8a8:	df000415 	stw	fp,16(sp)
   1e8ac:	df000404 	addi	fp,sp,16
   1e8b0:	e13ffe15 	stw	r4,-8(fp)
   1e8b4:	2805883a 	mov	r2,r5
   1e8b8:	e0bfff05 	stb	r2,-4(fp)
	int send_status = alt_up_ps2_write_data_byte(ps2, byte);
   1e8bc:	e0bfff03 	ldbu	r2,-4(fp)
   1e8c0:	e13ffe17 	ldw	r4,-8(fp)
   1e8c4:	100b883a 	mov	r5,r2
   1e8c8:	001e7bc0 	call	1e7bc <alt_up_ps2_write_data_byte>
   1e8cc:	e0bffc15 	stw	r2,-16(fp)
	if ( send_status != 0)
   1e8d0:	e0bffc17 	ldw	r2,-16(fp)
   1e8d4:	10000226 	beq	r2,zero,1e8e0 <alt_up_ps2_write_data_byte_with_ack+0x40>
		// return on sending error
		return send_status;
   1e8d8:	e0bffc17 	ldw	r2,-16(fp)
   1e8dc:	00000406 	br	1e8f0 <alt_up_ps2_write_data_byte_with_ack+0x50>

	int ack_status = alt_up_ps2_wait_for_ack(ps2);
   1e8e0:	e13ffe17 	ldw	r4,-8(fp)
   1e8e4:	001e8300 	call	1e830 <alt_up_ps2_wait_for_ack>
   1e8e8:	e0bffd15 	stw	r2,-12(fp)
	return ack_status;
   1e8ec:	e0bffd17 	ldw	r2,-12(fp)
}
   1e8f0:	e037883a 	mov	sp,fp
   1e8f4:	dfc00117 	ldw	ra,4(sp)
   1e8f8:	df000017 	ldw	fp,0(sp)
   1e8fc:	dec00204 	addi	sp,sp,8
   1e900:	f800283a 	ret

0001e904 <alt_up_ps2_read_data_byte_timeout>:

int alt_up_ps2_read_data_byte_timeout(alt_up_ps2_dev *ps2, unsigned char *byte)
{
   1e904:	defffa04 	addi	sp,sp,-24
   1e908:	dfc00515 	stw	ra,20(sp)
   1e90c:	df000415 	stw	fp,16(sp)
   1e910:	df000404 	addi	fp,sp,16
   1e914:	e13ffe15 	stw	r4,-8(fp)
   1e918:	e17fff15 	stw	r5,-4(fp)
	unsigned int data_reg = 0; 
   1e91c:	e03ffd15 	stw	zero,-12(fp)
	unsigned int count = 0;
   1e920:	e03ffc15 	stw	zero,-16(fp)
	do {
		count++;
   1e924:	e0bffc17 	ldw	r2,-16(fp)
   1e928:	10800044 	addi	r2,r2,1
   1e92c:	e0bffc15 	stw	r2,-16(fp)
		data_reg = IORD_ALT_UP_PS2_PORT_DATA_REG(ps2->base);
   1e930:	e0bffe17 	ldw	r2,-8(fp)
   1e934:	10800a17 	ldw	r2,40(r2)
   1e938:	10800037 	ldwio	r2,0(r2)
   1e93c:	e0bffd15 	stw	r2,-12(fp)
		if (read_data_valid(data_reg))
   1e940:	e13ffd17 	ldw	r4,-12(fp)
   1e944:	001e5e40 	call	1e5e4 <read_data_valid>
   1e948:	10803fcc 	andi	r2,r2,255
   1e94c:	10000726 	beq	r2,zero,1e96c <alt_up_ps2_read_data_byte_timeout+0x68>
		{
			*byte = read_data_byte(data_reg);
   1e950:	e13ffd17 	ldw	r4,-12(fp)
   1e954:	001e6180 	call	1e618 <read_data_byte>
   1e958:	1007883a 	mov	r3,r2
   1e95c:	e0bfff17 	ldw	r2,-4(fp)
   1e960:	10c00005 	stb	r3,0(r2)
			return 0;
   1e964:	0005883a 	mov	r2,zero
   1e968:	00000a06 	br	1e994 <alt_up_ps2_read_data_byte_timeout+0x90>
		}
		//timeout = 0 means to disable the timeout
		if ( ps2->timeout != 0 && count > ps2->timeout)
   1e96c:	e0bffe17 	ldw	r2,-8(fp)
   1e970:	10800c17 	ldw	r2,48(r2)
   1e974:	10000626 	beq	r2,zero,1e990 <alt_up_ps2_read_data_byte_timeout+0x8c>
   1e978:	e0bffe17 	ldw	r2,-8(fp)
   1e97c:	10c00c17 	ldw	r3,48(r2)
   1e980:	e0bffc17 	ldw	r2,-16(fp)
   1e984:	1880022e 	bgeu	r3,r2,1e990 <alt_up_ps2_read_data_byte_timeout+0x8c>
		{
			return -ETIMEDOUT;
   1e988:	00bfe304 	movi	r2,-116
   1e98c:	00000106 	br	1e994 <alt_up_ps2_read_data_byte_timeout+0x90>
		}
	} while (1);
   1e990:	003fe406 	br	1e924 <__alt_mem_Flash_flash_data+0xf401e924>
}
   1e994:	e037883a 	mov	sp,fp
   1e998:	dfc00117 	ldw	ra,4(sp)
   1e99c:	df000017 	ldw	fp,0(sp)
   1e9a0:	dec00204 	addi	sp,sp,8
   1e9a4:	f800283a 	ret

0001e9a8 <alt_up_ps2_read_data_byte>:

int alt_up_ps2_read_data_byte(alt_up_ps2_dev *ps2, unsigned char *byte)
{
   1e9a8:	defffb04 	addi	sp,sp,-20
   1e9ac:	dfc00415 	stw	ra,16(sp)
   1e9b0:	df000315 	stw	fp,12(sp)
   1e9b4:	df000304 	addi	fp,sp,12
   1e9b8:	e13ffe15 	stw	r4,-8(fp)
   1e9bc:	e17fff15 	stw	r5,-4(fp)
	unsigned int data_reg = 0; 
   1e9c0:	e03ffd15 	stw	zero,-12(fp)
	data_reg = IORD_ALT_UP_PS2_PORT_DATA_REG(ps2->base);
   1e9c4:	e0bffe17 	ldw	r2,-8(fp)
   1e9c8:	10800a17 	ldw	r2,40(r2)
   1e9cc:	10800037 	ldwio	r2,0(r2)
   1e9d0:	e0bffd15 	stw	r2,-12(fp)
	if (read_data_valid(data_reg))
   1e9d4:	e13ffd17 	ldw	r4,-12(fp)
   1e9d8:	001e5e40 	call	1e5e4 <read_data_valid>
   1e9dc:	10803fcc 	andi	r2,r2,255
   1e9e0:	10000726 	beq	r2,zero,1ea00 <alt_up_ps2_read_data_byte+0x58>
	{
		*byte = read_data_byte(data_reg);
   1e9e4:	e13ffd17 	ldw	r4,-12(fp)
   1e9e8:	001e6180 	call	1e618 <read_data_byte>
   1e9ec:	1007883a 	mov	r3,r2
   1e9f0:	e0bfff17 	ldw	r2,-4(fp)
   1e9f4:	10c00005 	stb	r3,0(r2)
		return 0;
   1e9f8:	0005883a 	mov	r2,zero
   1e9fc:	00000106 	br	1ea04 <alt_up_ps2_read_data_byte+0x5c>
	}
	return -1;
   1ea00:	00bfffc4 	movi	r2,-1
}
   1ea04:	e037883a 	mov	sp,fp
   1ea08:	dfc00117 	ldw	ra,4(sp)
   1ea0c:	df000017 	ldw	fp,0(sp)
   1ea10:	dec00204 	addi	sp,sp,8
   1ea14:	f800283a 	ret

0001ea18 <alt_up_ps2_clear_fifo>:

void alt_up_ps2_clear_fifo(alt_up_ps2_dev *ps2)
{
   1ea18:	defffb04 	addi	sp,sp,-20
   1ea1c:	dfc00415 	stw	ra,16(sp)
   1ea20:	df000315 	stw	fp,12(sp)
   1ea24:	df000304 	addi	fp,sp,12
   1ea28:	e13fff15 	stw	r4,-4(fp)
	// The DATA byte of the data register will be automatically cleared after a read
	// So we simply keep reading it until there are no available bytes
	alt_u16 num = 0;
   1ea2c:	e03ffd0d 	sth	zero,-12(fp)
	unsigned int data_reg = 0;
   1ea30:	e03ffe15 	stw	zero,-8(fp)
	do
	{
		// read the data register (the DATA byte is cleared)
		data_reg = IORD_ALT_UP_PS2_PORT_DATA_REG(ps2->base);
   1ea34:	e0bfff17 	ldw	r2,-4(fp)
   1ea38:	10800a17 	ldw	r2,40(r2)
   1ea3c:	10800037 	ldwio	r2,0(r2)
   1ea40:	e0bffe15 	stw	r2,-8(fp)
		// get the number of available bytes from the RAVAIL part of data register
		num = read_num_bytes_available(data_reg);
   1ea44:	e13ffe17 	ldw	r4,-8(fp)
   1ea48:	001e5b40 	call	1e5b4 <read_num_bytes_available>
   1ea4c:	e0bffd0d 	sth	r2,-12(fp)
	} while (num > 0);
   1ea50:	e0bffd0b 	ldhu	r2,-12(fp)
   1ea54:	103ff71e 	bne	r2,zero,1ea34 <__alt_mem_Flash_flash_data+0xf401ea34>
}
   1ea58:	e037883a 	mov	sp,fp
   1ea5c:	dfc00117 	ldw	ra,4(sp)
   1ea60:	df000017 	ldw	fp,0(sp)
   1ea64:	dec00204 	addi	sp,sp,8
   1ea68:	f800283a 	ret

0001ea6c <alt_up_ps2_read_fd>:

//////////////////////////////////////////////////////////////
// FD Functions
int alt_up_ps2_read_fd (alt_fd* fd, char* ptr, int len)
{
   1ea6c:	defff804 	addi	sp,sp,-32
   1ea70:	dfc00715 	stw	ra,28(sp)
   1ea74:	df000615 	stw	fp,24(sp)
   1ea78:	df000604 	addi	fp,sp,24
   1ea7c:	e13ffd15 	stw	r4,-12(fp)
   1ea80:	e17ffe15 	stw	r5,-8(fp)
   1ea84:	e1bfff15 	stw	r6,-4(fp)
	alt_up_ps2_dev *ps2 = (alt_up_ps2_dev*) fd->dev;
   1ea88:	e0bffd17 	ldw	r2,-12(fp)
   1ea8c:	10800017 	ldw	r2,0(r2)
   1ea90:	e0bffa15 	stw	r2,-24(fp)
	int status = 0;
   1ea94:	e03ffb15 	stw	zero,-20(fp)
	int count = 0;
   1ea98:	e03ffc15 	stw	zero,-16(fp)
	while (count < len);
   1ea9c:	e0fffc17 	ldw	r3,-16(fp)
   1eaa0:	e0bfff17 	ldw	r2,-4(fp)
   1eaa4:	18bffd16 	blt	r3,r2,1ea9c <__alt_mem_Flash_flash_data+0xf401ea9c>
	{
		status = alt_up_ps2_read_data_byte_timeout(ps2, (unsigned char *)ptr++);
   1eaa8:	e0bffe17 	ldw	r2,-8(fp)
   1eaac:	10c00044 	addi	r3,r2,1
   1eab0:	e0fffe15 	stw	r3,-8(fp)
   1eab4:	e13ffa17 	ldw	r4,-24(fp)
   1eab8:	100b883a 	mov	r5,r2
   1eabc:	001e9040 	call	1e904 <alt_up_ps2_read_data_byte_timeout>
   1eac0:	e0bffb15 	stw	r2,-20(fp)
		if (status!=0)
   1eac4:	e0bffb17 	ldw	r2,-20(fp)
   1eac8:	10000226 	beq	r2,zero,1ead4 <alt_up_ps2_read_fd+0x68>
			return count;
   1eacc:	e0bffc17 	ldw	r2,-16(fp)
   1ead0:	00000406 	br	1eae4 <alt_up_ps2_read_fd+0x78>
		count++;
   1ead4:	e0bffc17 	ldw	r2,-16(fp)
   1ead8:	10800044 	addi	r2,r2,1
   1eadc:	e0bffc15 	stw	r2,-16(fp)
	} 
	return count;
   1eae0:	e0bffc17 	ldw	r2,-16(fp)
}
   1eae4:	e037883a 	mov	sp,fp
   1eae8:	dfc00117 	ldw	ra,4(sp)
   1eaec:	df000017 	ldw	fp,0(sp)
   1eaf0:	dec00204 	addi	sp,sp,8
   1eaf4:	f800283a 	ret

0001eaf8 <alt_up_ps2_write_fd>:

int alt_up_ps2_write_fd (alt_fd* fd, const char* ptr, int len)
{
   1eaf8:	defff804 	addi	sp,sp,-32
   1eafc:	dfc00715 	stw	ra,28(sp)
   1eb00:	df000615 	stw	fp,24(sp)
   1eb04:	df000604 	addi	fp,sp,24
   1eb08:	e13ffd15 	stw	r4,-12(fp)
   1eb0c:	e17ffe15 	stw	r5,-8(fp)
   1eb10:	e1bfff15 	stw	r6,-4(fp)
	alt_up_ps2_dev *ps2 = (alt_up_ps2_dev*) fd->dev;
   1eb14:	e0bffd17 	ldw	r2,-12(fp)
   1eb18:	10800017 	ldw	r2,0(r2)
   1eb1c:	e0bffb15 	stw	r2,-20(fp)
	int status = 0;
   1eb20:	e03ffc15 	stw	zero,-16(fp)
	int count = 0;
   1eb24:	e03ffa15 	stw	zero,-24(fp)
	while (count < len)
   1eb28:	00001006 	br	1eb6c <alt_up_ps2_write_fd+0x74>
	{
		status = alt_up_ps2_write_data_byte(ps2, *(ptr++) );
   1eb2c:	e0bffe17 	ldw	r2,-8(fp)
   1eb30:	10c00044 	addi	r3,r2,1
   1eb34:	e0fffe15 	stw	r3,-8(fp)
   1eb38:	10800003 	ldbu	r2,0(r2)
   1eb3c:	10803fcc 	andi	r2,r2,255
   1eb40:	e13ffb17 	ldw	r4,-20(fp)
   1eb44:	100b883a 	mov	r5,r2
   1eb48:	001e7bc0 	call	1e7bc <alt_up_ps2_write_data_byte>
   1eb4c:	e0bffc15 	stw	r2,-16(fp)
		if (status!=0)
   1eb50:	e0bffc17 	ldw	r2,-16(fp)
   1eb54:	10000226 	beq	r2,zero,1eb60 <alt_up_ps2_write_fd+0x68>
			return count;
   1eb58:	e0bffa17 	ldw	r2,-24(fp)
   1eb5c:	00000706 	br	1eb7c <alt_up_ps2_write_fd+0x84>
		count++;
   1eb60:	e0bffa17 	ldw	r2,-24(fp)
   1eb64:	10800044 	addi	r2,r2,1
   1eb68:	e0bffa15 	stw	r2,-24(fp)
int alt_up_ps2_write_fd (alt_fd* fd, const char* ptr, int len)
{
	alt_up_ps2_dev *ps2 = (alt_up_ps2_dev*) fd->dev;
	int status = 0;
	int count = 0;
	while (count < len)
   1eb6c:	e0fffa17 	ldw	r3,-24(fp)
   1eb70:	e0bfff17 	ldw	r2,-4(fp)
   1eb74:	18bfed16 	blt	r3,r2,1eb2c <__alt_mem_Flash_flash_data+0xf401eb2c>
		status = alt_up_ps2_write_data_byte(ps2, *(ptr++) );
		if (status!=0)
			return count;
		count++;
	}
	return count;
   1eb78:	e0bffa17 	ldw	r2,-24(fp)
}
   1eb7c:	e037883a 	mov	sp,fp
   1eb80:	dfc00117 	ldw	ra,4(sp)
   1eb84:	df000017 	ldw	fp,0(sp)
   1eb88:	dec00204 	addi	sp,sp,8
   1eb8c:	f800283a 	ret

0001eb90 <alt_up_ps2_open_dev>:

alt_up_ps2_dev* alt_up_ps2_open_dev(const char* name)
{
   1eb90:	defffc04 	addi	sp,sp,-16
   1eb94:	dfc00315 	stw	ra,12(sp)
   1eb98:	df000215 	stw	fp,8(sp)
   1eb9c:	df000204 	addi	fp,sp,8
   1eba0:	e13fff15 	stw	r4,-4(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_ps2_dev *dev = (alt_up_ps2_dev*)alt_find_dev(name, &alt_dev_list);
   1eba4:	e13fff17 	ldw	r4,-4(fp)
   1eba8:	014000b4 	movhi	r5,2
   1ebac:	294b1504 	addi	r5,r5,11348
   1ebb0:	001f54c0 	call	1f54c <alt_find_dev>
   1ebb4:	e0bffe15 	stw	r2,-8(fp)

  return dev;
   1ebb8:	e0bffe17 	ldw	r2,-8(fp)
}
   1ebbc:	e037883a 	mov	sp,fp
   1ebc0:	dfc00117 	ldw	ra,4(sp)
   1ebc4:	df000017 	ldw	fp,0(sp)
   1ebc8:	dec00204 	addi	sp,sp,8
   1ebcc:	f800283a 	ret

0001ebd0 <alt_up_rs232_enable_read_interrupt>:
#include "altera_up_avalon_rs232.h"
#include "altera_up_avalon_rs232_regs.h"


void alt_up_rs232_enable_read_interrupt(alt_up_rs232_dev *rs232)
{
   1ebd0:	defffd04 	addi	sp,sp,-12
   1ebd4:	df000215 	stw	fp,8(sp)
   1ebd8:	df000204 	addi	fp,sp,8
   1ebdc:	e13fff15 	stw	r4,-4(fp)
	alt_u32 ctrl_reg;
	ctrl_reg = IORD_ALT_UP_RS232_CONTROL(rs232->base); 
   1ebe0:	e0bfff17 	ldw	r2,-4(fp)
   1ebe4:	10800a17 	ldw	r2,40(r2)
   1ebe8:	10800104 	addi	r2,r2,4
   1ebec:	10800037 	ldwio	r2,0(r2)
   1ebf0:	e0bffe15 	stw	r2,-8(fp)
	// set RE to 1 while maintaining other bits the same
	ctrl_reg |= ALT_UP_RS232_CONTROL_RE_MSK;
   1ebf4:	e0bffe17 	ldw	r2,-8(fp)
   1ebf8:	10800054 	ori	r2,r2,1
   1ebfc:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_RS232_CONTROL(rs232->base, ctrl_reg);
   1ec00:	e0bfff17 	ldw	r2,-4(fp)
   1ec04:	10800a17 	ldw	r2,40(r2)
   1ec08:	10800104 	addi	r2,r2,4
   1ec0c:	1007883a 	mov	r3,r2
   1ec10:	e0bffe17 	ldw	r2,-8(fp)
   1ec14:	18800035 	stwio	r2,0(r3)
}
   1ec18:	e037883a 	mov	sp,fp
   1ec1c:	df000017 	ldw	fp,0(sp)
   1ec20:	dec00104 	addi	sp,sp,4
   1ec24:	f800283a 	ret

0001ec28 <alt_up_rs232_disable_read_interrupt>:

void alt_up_rs232_disable_read_interrupt(alt_up_rs232_dev *rs232)
{
   1ec28:	defffd04 	addi	sp,sp,-12
   1ec2c:	df000215 	stw	fp,8(sp)
   1ec30:	df000204 	addi	fp,sp,8
   1ec34:	e13fff15 	stw	r4,-4(fp)
	alt_u32 ctrl_reg;
	ctrl_reg = IORD_ALT_UP_RS232_CONTROL(rs232->base); 
   1ec38:	e0bfff17 	ldw	r2,-4(fp)
   1ec3c:	10800a17 	ldw	r2,40(r2)
   1ec40:	10800104 	addi	r2,r2,4
   1ec44:	10800037 	ldwio	r2,0(r2)
   1ec48:	e0bffe15 	stw	r2,-8(fp)
	// set RE to 0 while maintaining other bits the same
	ctrl_reg &= ~ALT_UP_RS232_CONTROL_RE_MSK;
   1ec4c:	e0fffe17 	ldw	r3,-8(fp)
   1ec50:	00bfff84 	movi	r2,-2
   1ec54:	1884703a 	and	r2,r3,r2
   1ec58:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_RS232_CONTROL(rs232->base, ctrl_reg);
   1ec5c:	e0bfff17 	ldw	r2,-4(fp)
   1ec60:	10800a17 	ldw	r2,40(r2)
   1ec64:	10800104 	addi	r2,r2,4
   1ec68:	1007883a 	mov	r3,r2
   1ec6c:	e0bffe17 	ldw	r2,-8(fp)
   1ec70:	18800035 	stwio	r2,0(r3)
}
   1ec74:	e037883a 	mov	sp,fp
   1ec78:	df000017 	ldw	fp,0(sp)
   1ec7c:	dec00104 	addi	sp,sp,4
   1ec80:	f800283a 	ret

0001ec84 <alt_up_rs232_get_used_space_in_read_FIFO>:

unsigned alt_up_rs232_get_used_space_in_read_FIFO(alt_up_rs232_dev *rs232)
{
   1ec84:	defffd04 	addi	sp,sp,-12
   1ec88:	df000215 	stw	fp,8(sp)
   1ec8c:	df000204 	addi	fp,sp,8
   1ec90:	e13fff15 	stw	r4,-4(fp)
	alt_u16 ravail = 0;
   1ec94:	e03ffe0d 	sth	zero,-8(fp)
	// we can only read the 16 bits for RAVAIL --- a read of DATA will discard the data
//	ravail = IORD_16DIRECT(IOADDR_ALT_UP_RS232_DATA(rs232->base), 2); 
	ravail = IORD_ALT_UP_RS232_RAVAIL(rs232->base); 
   1ec98:	e0bfff17 	ldw	r2,-4(fp)
   1ec9c:	10800a17 	ldw	r2,40(r2)
   1eca0:	10800084 	addi	r2,r2,2
   1eca4:	1080002b 	ldhuio	r2,0(r2)
   1eca8:	10bfffcc 	andi	r2,r2,65535
   1ecac:	e0bffe0d 	sth	r2,-8(fp)
//	return ravail;
	return (ravail & ALT_UP_RS232_RAVAIL_MSK) >> ALT_UP_RS232_RAVAIL_OFST;
   1ecb0:	e0bffe0b 	ldhu	r2,-8(fp)
}
   1ecb4:	e037883a 	mov	sp,fp
   1ecb8:	df000017 	ldw	fp,0(sp)
   1ecbc:	dec00104 	addi	sp,sp,4
   1ecc0:	f800283a 	ret

0001ecc4 <alt_up_rs232_get_available_space_in_write_FIFO>:

unsigned alt_up_rs232_get_available_space_in_write_FIFO(alt_up_rs232_dev *rs232)
{
   1ecc4:	defffd04 	addi	sp,sp,-12
   1ecc8:	df000215 	stw	fp,8(sp)
   1eccc:	df000204 	addi	fp,sp,8
   1ecd0:	e13fff15 	stw	r4,-4(fp)
	alt_u32 ctrl_reg;
	ctrl_reg = IORD_ALT_UP_RS232_CONTROL(rs232->base); 
   1ecd4:	e0bfff17 	ldw	r2,-4(fp)
   1ecd8:	10800a17 	ldw	r2,40(r2)
   1ecdc:	10800104 	addi	r2,r2,4
   1ece0:	10800037 	ldwio	r2,0(r2)
   1ece4:	e0bffe15 	stw	r2,-8(fp)
	return (ctrl_reg & ALT_UP_RS232_CONTROL_WSPACE_MSK) >> ALT_UP_RS232_CONTROL_WSPACE_OFST;
   1ece8:	e0bffe17 	ldw	r2,-8(fp)
   1ecec:	1004d43a 	srli	r2,r2,16
}
   1ecf0:	e037883a 	mov	sp,fp
   1ecf4:	df000017 	ldw	fp,0(sp)
   1ecf8:	dec00104 	addi	sp,sp,4
   1ecfc:	f800283a 	ret

0001ed00 <alt_up_rs232_check_parity>:

int alt_up_rs232_check_parity(alt_u32 data_reg)
{
   1ed00:	defffd04 	addi	sp,sp,-12
   1ed04:	df000215 	stw	fp,8(sp)
   1ed08:	df000204 	addi	fp,sp,8
   1ed0c:	e13fff15 	stw	r4,-4(fp)
	unsigned parity_error = (data_reg & ALT_UP_RS232_DATA_PE_MSK) >> ALT_UP_RS232_DATA_PE_OFST;
   1ed10:	e0bfff17 	ldw	r2,-4(fp)
   1ed14:	1080800c 	andi	r2,r2,512
   1ed18:	1004d27a 	srli	r2,r2,9
   1ed1c:	e0bffe15 	stw	r2,-8(fp)
	return (parity_error ? -1 : 0);
   1ed20:	e0bffe17 	ldw	r2,-8(fp)
   1ed24:	10000226 	beq	r2,zero,1ed30 <alt_up_rs232_check_parity+0x30>
   1ed28:	00bfffc4 	movi	r2,-1
   1ed2c:	00000106 	br	1ed34 <alt_up_rs232_check_parity+0x34>
   1ed30:	0005883a 	mov	r2,zero
}
   1ed34:	e037883a 	mov	sp,fp
   1ed38:	df000017 	ldw	fp,0(sp)
   1ed3c:	dec00104 	addi	sp,sp,4
   1ed40:	f800283a 	ret

0001ed44 <alt_up_rs232_write_data>:

int alt_up_rs232_write_data(alt_up_rs232_dev *rs232, alt_u8 data)
{
   1ed44:	defffd04 	addi	sp,sp,-12
   1ed48:	df000215 	stw	fp,8(sp)
   1ed4c:	df000204 	addi	fp,sp,8
   1ed50:	e13ffe15 	stw	r4,-8(fp)
   1ed54:	2805883a 	mov	r2,r5
   1ed58:	e0bfff05 	stb	r2,-4(fp)
	/*alt_u32 data_reg;
	data_reg = IORD_ALT_UP_RS232_DATA(rs232->base);*/
    
	// we can write directly without thinking about other bit fields for this
	// case ONLY, because only DATA field of the data register is writable
	IOWR_ALT_UP_RS232_DATA(rs232->base, (data>>ALT_UP_RS232_DATA_DATA_OFST) & ALT_UP_RS232_DATA_DATA_MSK);
   1ed5c:	e0bffe17 	ldw	r2,-8(fp)
   1ed60:	10800a17 	ldw	r2,40(r2)
   1ed64:	1007883a 	mov	r3,r2
   1ed68:	e0bfff03 	ldbu	r2,-4(fp)
   1ed6c:	18800035 	stwio	r2,0(r3)
	return 0;
   1ed70:	0005883a 	mov	r2,zero
}
   1ed74:	e037883a 	mov	sp,fp
   1ed78:	df000017 	ldw	fp,0(sp)
   1ed7c:	dec00104 	addi	sp,sp,4
   1ed80:	f800283a 	ret

0001ed84 <alt_up_rs232_read_data>:

int alt_up_rs232_read_data(alt_up_rs232_dev *rs232, alt_u8 *data, alt_u8 *parity_error)
{
   1ed84:	defffa04 	addi	sp,sp,-24
   1ed88:	dfc00515 	stw	ra,20(sp)
   1ed8c:	df000415 	stw	fp,16(sp)
   1ed90:	df000404 	addi	fp,sp,16
   1ed94:	e13ffd15 	stw	r4,-12(fp)
   1ed98:	e17ffe15 	stw	r5,-8(fp)
   1ed9c:	e1bfff15 	stw	r6,-4(fp)
	alt_u32 data_reg;
	data_reg = IORD_ALT_UP_RS232_DATA(rs232->base);
   1eda0:	e0bffd17 	ldw	r2,-12(fp)
   1eda4:	10800a17 	ldw	r2,40(r2)
   1eda8:	10800037 	ldwio	r2,0(r2)
   1edac:	e0bffc15 	stw	r2,-16(fp)
	*data = (data_reg & ALT_UP_RS232_DATA_DATA_MSK) >> ALT_UP_RS232_DATA_DATA_OFST;
   1edb0:	e0bffc17 	ldw	r2,-16(fp)
   1edb4:	1007883a 	mov	r3,r2
   1edb8:	e0bffe17 	ldw	r2,-8(fp)
   1edbc:	10c00005 	stb	r3,0(r2)
	*parity_error = alt_up_rs232_check_parity(data_reg);
   1edc0:	e13ffc17 	ldw	r4,-16(fp)
   1edc4:	001ed000 	call	1ed00 <alt_up_rs232_check_parity>
   1edc8:	1007883a 	mov	r3,r2
   1edcc:	e0bfff17 	ldw	r2,-4(fp)
   1edd0:	10c00005 	stb	r3,0(r2)
	return (((data_reg & ALT_UP_RS232_DATA_RVALID_MSK) >> ALT_UP_RS232_DATA_RVALID_OFST) - 1);
   1edd4:	e0bffc17 	ldw	r2,-16(fp)
   1edd8:	10a0000c 	andi	r2,r2,32768
   1eddc:	1004d3fa 	srli	r2,r2,15
   1ede0:	10bfffc4 	addi	r2,r2,-1
}
   1ede4:	e037883a 	mov	sp,fp
   1ede8:	dfc00117 	ldw	ra,4(sp)
   1edec:	df000017 	ldw	fp,0(sp)
   1edf0:	dec00204 	addi	sp,sp,8
   1edf4:	f800283a 	ret

0001edf8 <alt_up_rs232_read_fd>:

int alt_up_rs232_read_fd (alt_fd* fd, char* ptr, int len)
{
   1edf8:	defff804 	addi	sp,sp,-32
   1edfc:	dfc00715 	stw	ra,28(sp)
   1ee00:	df000615 	stw	fp,24(sp)
   1ee04:	df000604 	addi	fp,sp,24
   1ee08:	e13ffd15 	stw	r4,-12(fp)
   1ee0c:	e17ffe15 	stw	r5,-8(fp)
   1ee10:	e1bfff15 	stw	r6,-4(fp)
	alt_up_rs232_dev *rs232 = (alt_up_rs232_dev*)fd->dev;
   1ee14:	e0bffd17 	ldw	r2,-12(fp)
   1ee18:	10800017 	ldw	r2,0(r2)
   1ee1c:	e0bffb15 	stw	r2,-20(fp)
	int count = 0;
   1ee20:	e03ffa15 	stw	zero,-24(fp)
	alt_u8 parity_error;
	while(len--)
   1ee24:	00000e06 	br	1ee60 <alt_up_rs232_read_fd+0x68>
	{
		if (alt_up_rs232_read_data(rs232, (alt_u8 *)ptr++, &parity_error)==0)
   1ee28:	e0bffe17 	ldw	r2,-8(fp)
   1ee2c:	10c00044 	addi	r3,r2,1
   1ee30:	e0fffe15 	stw	r3,-8(fp)
   1ee34:	e0fffc04 	addi	r3,fp,-16
   1ee38:	e13ffb17 	ldw	r4,-20(fp)
   1ee3c:	100b883a 	mov	r5,r2
   1ee40:	180d883a 	mov	r6,r3
   1ee44:	001ed840 	call	1ed84 <alt_up_rs232_read_data>
   1ee48:	1000041e 	bne	r2,zero,1ee5c <alt_up_rs232_read_fd+0x64>
			count++;
   1ee4c:	e0bffa17 	ldw	r2,-24(fp)
   1ee50:	10800044 	addi	r2,r2,1
   1ee54:	e0bffa15 	stw	r2,-24(fp)
   1ee58:	00000106 	br	1ee60 <alt_up_rs232_read_fd+0x68>
		else
			break;
   1ee5c:	00000406 	br	1ee70 <alt_up_rs232_read_fd+0x78>
int alt_up_rs232_read_fd (alt_fd* fd, char* ptr, int len)
{
	alt_up_rs232_dev *rs232 = (alt_up_rs232_dev*)fd->dev;
	int count = 0;
	alt_u8 parity_error;
	while(len--)
   1ee60:	e0bfff17 	ldw	r2,-4(fp)
   1ee64:	10ffffc4 	addi	r3,r2,-1
   1ee68:	e0ffff15 	stw	r3,-4(fp)
   1ee6c:	103fee1e 	bne	r2,zero,1ee28 <__alt_mem_Flash_flash_data+0xf401ee28>
		if (alt_up_rs232_read_data(rs232, (alt_u8 *)ptr++, &parity_error)==0)
			count++;
		else
			break;
	}
	return count;
   1ee70:	e0bffa17 	ldw	r2,-24(fp)
}
   1ee74:	e037883a 	mov	sp,fp
   1ee78:	dfc00117 	ldw	ra,4(sp)
   1ee7c:	df000017 	ldw	fp,0(sp)
   1ee80:	dec00204 	addi	sp,sp,8
   1ee84:	f800283a 	ret

0001ee88 <alt_up_rs232_write_fd>:

int alt_up_rs232_write_fd (alt_fd* fd, const char* ptr, int len)
{
   1ee88:	defff904 	addi	sp,sp,-28
   1ee8c:	dfc00615 	stw	ra,24(sp)
   1ee90:	df000515 	stw	fp,20(sp)
   1ee94:	df000504 	addi	fp,sp,20
   1ee98:	e13ffd15 	stw	r4,-12(fp)
   1ee9c:	e17ffe15 	stw	r5,-8(fp)
   1eea0:	e1bfff15 	stw	r6,-4(fp)
	alt_up_rs232_dev *rs232 = (alt_up_rs232_dev*)fd->dev;
   1eea4:	e0bffd17 	ldw	r2,-12(fp)
   1eea8:	10800017 	ldw	r2,0(r2)
   1eeac:	e0bffc15 	stw	r2,-16(fp)
	int count = 0;
   1eeb0:	e03ffb15 	stw	zero,-20(fp)
	while(len--)
   1eeb4:	00000f06 	br	1eef4 <alt_up_rs232_write_fd+0x6c>
	{
		if (alt_up_rs232_write_data(rs232, *ptr)==0)
   1eeb8:	e0bffe17 	ldw	r2,-8(fp)
   1eebc:	10800003 	ldbu	r2,0(r2)
   1eec0:	10803fcc 	andi	r2,r2,255
   1eec4:	e13ffc17 	ldw	r4,-16(fp)
   1eec8:	100b883a 	mov	r5,r2
   1eecc:	001ed440 	call	1ed44 <alt_up_rs232_write_data>
   1eed0:	1000071e 	bne	r2,zero,1eef0 <alt_up_rs232_write_fd+0x68>
		{
			count++;
   1eed4:	e0bffb17 	ldw	r2,-20(fp)
   1eed8:	10800044 	addi	r2,r2,1
   1eedc:	e0bffb15 	stw	r2,-20(fp)
			ptr++;
   1eee0:	e0bffe17 	ldw	r2,-8(fp)
   1eee4:	10800044 	addi	r2,r2,1
   1eee8:	e0bffe15 	stw	r2,-8(fp)
   1eeec:	00000106 	br	1eef4 <alt_up_rs232_write_fd+0x6c>
		}
		else
			break;
   1eef0:	00000406 	br	1ef04 <alt_up_rs232_write_fd+0x7c>

int alt_up_rs232_write_fd (alt_fd* fd, const char* ptr, int len)
{
	alt_up_rs232_dev *rs232 = (alt_up_rs232_dev*)fd->dev;
	int count = 0;
	while(len--)
   1eef4:	e0bfff17 	ldw	r2,-4(fp)
   1eef8:	10ffffc4 	addi	r3,r2,-1
   1eefc:	e0ffff15 	stw	r3,-4(fp)
   1ef00:	103fed1e 	bne	r2,zero,1eeb8 <__alt_mem_Flash_flash_data+0xf401eeb8>
			ptr++;
		}
		else
			break;
	}
	return count;
   1ef04:	e0bffb17 	ldw	r2,-20(fp)
}
   1ef08:	e037883a 	mov	sp,fp
   1ef0c:	dfc00117 	ldw	ra,4(sp)
   1ef10:	df000017 	ldw	fp,0(sp)
   1ef14:	dec00204 	addi	sp,sp,8
   1ef18:	f800283a 	ret

0001ef1c <alt_up_rs232_open_dev>:

alt_up_rs232_dev* alt_up_rs232_open_dev(const char* name)
{
   1ef1c:	defffc04 	addi	sp,sp,-16
   1ef20:	dfc00315 	stw	ra,12(sp)
   1ef24:	df000215 	stw	fp,8(sp)
   1ef28:	df000204 	addi	fp,sp,8
   1ef2c:	e13fff15 	stw	r4,-4(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_rs232_dev *dev = (alt_up_rs232_dev*)alt_find_dev(name, &alt_dev_list);
   1ef30:	e13fff17 	ldw	r4,-4(fp)
   1ef34:	014000b4 	movhi	r5,2
   1ef38:	294b1504 	addi	r5,r5,11348
   1ef3c:	001f54c0 	call	1f54c <alt_find_dev>
   1ef40:	e0bffe15 	stw	r2,-8(fp)

  return dev;
   1ef44:	e0bffe17 	ldw	r2,-8(fp)
}
   1ef48:	e037883a 	mov	sp,fp
   1ef4c:	dfc00117 	ldw	ra,4(sp)
   1ef50:	df000017 	ldw	fp,0(sp)
   1ef54:	dec00204 	addi	sp,sp,8
   1ef58:	f800283a 	ret

0001ef5c <alt_up_char_buffer_init>:
#include <priv/alt_file.h>

#include "altera_up_avalon_video_character_buffer_with_dma.h"
#include "altera_up_avalon_video_character_buffer_with_dma_regs.h"

void alt_up_char_buffer_init(alt_up_char_buffer_dev *char_buffer) {
   1ef5c:	defffc04 	addi	sp,sp,-16
   1ef60:	dfc00315 	stw	ra,12(sp)
   1ef64:	df000215 	stw	fp,8(sp)
   1ef68:	df000204 	addi	fp,sp,8
   1ef6c:	e13fff15 	stw	r4,-4(fp)
	char * name;
	name = (char *) char_buffer->dev.name;
   1ef70:	e0bfff17 	ldw	r2,-4(fp)
   1ef74:	10800217 	ldw	r2,8(r2)
   1ef78:	e0bffe15 	stw	r2,-8(fp)

	for ( ; (*name) != '\0'; name++) {
   1ef7c:	00000b06 	br	1efac <alt_up_char_buffer_init+0x50>
		if (strcmp(name, "_avalon_char_buffer_slave") == 0) {
   1ef80:	e13ffe17 	ldw	r4,-8(fp)
   1ef84:	014000b4 	movhi	r5,2
   1ef88:	29437604 	addi	r5,r5,3544
   1ef8c:	0009b780 	call	9b78 <strcmp>
   1ef90:	1000031e 	bne	r2,zero,1efa0 <alt_up_char_buffer_init+0x44>
			(*name) = '\0';
   1ef94:	e0bffe17 	ldw	r2,-8(fp)
   1ef98:	10000005 	stb	zero,0(r2)
			break;
   1ef9c:	00000906 	br	1efc4 <alt_up_char_buffer_init+0x68>

void alt_up_char_buffer_init(alt_up_char_buffer_dev *char_buffer) {
	char * name;
	name = (char *) char_buffer->dev.name;

	for ( ; (*name) != '\0'; name++) {
   1efa0:	e0bffe17 	ldw	r2,-8(fp)
   1efa4:	10800044 	addi	r2,r2,1
   1efa8:	e0bffe15 	stw	r2,-8(fp)
   1efac:	e0bffe17 	ldw	r2,-8(fp)
   1efb0:	10800003 	ldbu	r2,0(r2)
   1efb4:	10803fcc 	andi	r2,r2,255
   1efb8:	1080201c 	xori	r2,r2,128
   1efbc:	10bfe004 	addi	r2,r2,-128
   1efc0:	103fef1e 	bne	r2,zero,1ef80 <__alt_mem_Flash_flash_data+0xf401ef80>
			(*name) = '\0';
			break;
		}
	}
	
	return;
   1efc4:	0001883a 	nop
}
   1efc8:	e037883a 	mov	sp,fp
   1efcc:	dfc00117 	ldw	ra,4(sp)
   1efd0:	df000017 	ldw	fp,0(sp)
   1efd4:	dec00204 	addi	sp,sp,8
   1efd8:	f800283a 	ret

0001efdc <alt_up_char_buffer_open_dev>:

alt_up_char_buffer_dev* alt_up_char_buffer_open_dev(const char* name) {
   1efdc:	defffc04 	addi	sp,sp,-16
   1efe0:	dfc00315 	stw	ra,12(sp)
   1efe4:	df000215 	stw	fp,8(sp)
   1efe8:	df000204 	addi	fp,sp,8
   1efec:	e13fff15 	stw	r4,-4(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_char_buffer_dev *dev = (alt_up_char_buffer_dev *)alt_find_dev(name, &alt_dev_list);
   1eff0:	e13fff17 	ldw	r4,-4(fp)
   1eff4:	014000b4 	movhi	r5,2
   1eff8:	294b1504 	addi	r5,r5,11348
   1effc:	001f54c0 	call	1f54c <alt_find_dev>
   1f000:	e0bffe15 	stw	r2,-8(fp)

  return dev;
   1f004:	e0bffe17 	ldw	r2,-8(fp)
}
   1f008:	e037883a 	mov	sp,fp
   1f00c:	dfc00117 	ldw	ra,4(sp)
   1f010:	df000017 	ldw	fp,0(sp)
   1f014:	dec00204 	addi	sp,sp,8
   1f018:	f800283a 	ret

0001f01c <alt_up_char_buffer_draw>:

int alt_up_char_buffer_draw(alt_up_char_buffer_dev *char_buffer, unsigned char ch, 
	unsigned int x, unsigned int y) {
   1f01c:	defffa04 	addi	sp,sp,-24
   1f020:	df000515 	stw	fp,20(sp)
   1f024:	df000504 	addi	fp,sp,20
   1f028:	e13ffc15 	stw	r4,-16(fp)
   1f02c:	2805883a 	mov	r2,r5
   1f030:	e1bffe15 	stw	r6,-8(fp)
   1f034:	e1ffff15 	stw	r7,-4(fp)
   1f038:	e0bffd05 	stb	r2,-12(fp)
	// boundary check
	if (x >= char_buffer->x_resolution || y >= char_buffer->y_resolution )
   1f03c:	e0bffc17 	ldw	r2,-16(fp)
   1f040:	10800c17 	ldw	r2,48(r2)
   1f044:	e0fffe17 	ldw	r3,-8(fp)
   1f048:	1880042e 	bgeu	r3,r2,1f05c <alt_up_char_buffer_draw+0x40>
   1f04c:	e0bffc17 	ldw	r2,-16(fp)
   1f050:	10800d17 	ldw	r2,52(r2)
   1f054:	e0ffff17 	ldw	r3,-4(fp)
   1f058:	18800236 	bltu	r3,r2,1f064 <alt_up_char_buffer_draw+0x48>
		return -1;
   1f05c:	00bfffc4 	movi	r2,-1
   1f060:	00001d06 	br	1f0d8 <alt_up_char_buffer_draw+0xbc>
	
	unsigned int addr = 0;
   1f064:	e03ffb15 	stw	zero,-20(fp)
	addr |= ((x & char_buffer->x_coord_mask) << char_buffer->x_coord_offset);
   1f068:	e0bffc17 	ldw	r2,-16(fp)
   1f06c:	10c00f17 	ldw	r3,60(r2)
   1f070:	e0bffe17 	ldw	r2,-8(fp)
   1f074:	1884703a 	and	r2,r3,r2
   1f078:	e0fffc17 	ldw	r3,-16(fp)
   1f07c:	18c00e17 	ldw	r3,56(r3)
   1f080:	10c4983a 	sll	r2,r2,r3
   1f084:	e0fffb17 	ldw	r3,-20(fp)
   1f088:	1884b03a 	or	r2,r3,r2
   1f08c:	e0bffb15 	stw	r2,-20(fp)
	addr |= ((y & char_buffer->y_coord_mask) << char_buffer->y_coord_offset);
   1f090:	e0bffc17 	ldw	r2,-16(fp)
   1f094:	10c01117 	ldw	r3,68(r2)
   1f098:	e0bfff17 	ldw	r2,-4(fp)
   1f09c:	1884703a 	and	r2,r3,r2
   1f0a0:	e0fffc17 	ldw	r3,-16(fp)
   1f0a4:	18c01017 	ldw	r3,64(r3)
   1f0a8:	10c4983a 	sll	r2,r2,r3
   1f0ac:	e0fffb17 	ldw	r3,-20(fp)
   1f0b0:	1884b03a 	or	r2,r3,r2
   1f0b4:	e0bffb15 	stw	r2,-20(fp)
	IOWR_8DIRECT(char_buffer->buffer_base, addr, ch);
   1f0b8:	e0bffc17 	ldw	r2,-16(fp)
   1f0bc:	10c00b17 	ldw	r3,44(r2)
   1f0c0:	e0bffb17 	ldw	r2,-20(fp)
   1f0c4:	1885883a 	add	r2,r3,r2
   1f0c8:	1007883a 	mov	r3,r2
   1f0cc:	e0bffd03 	ldbu	r2,-12(fp)
   1f0d0:	18800025 	stbio	r2,0(r3)

	return 0;
   1f0d4:	0005883a 	mov	r2,zero
}
   1f0d8:	e037883a 	mov	sp,fp
   1f0dc:	df000017 	ldw	fp,0(sp)
   1f0e0:	dec00104 	addi	sp,sp,4
   1f0e4:	f800283a 	ret

0001f0e8 <alt_up_char_buffer_string>:

int alt_up_char_buffer_string(alt_up_char_buffer_dev *char_buffer, const char *ptr, 
	unsigned int x, unsigned int y) {
   1f0e8:	defffa04 	addi	sp,sp,-24
   1f0ec:	df000515 	stw	fp,20(sp)
   1f0f0:	df000504 	addi	fp,sp,20
   1f0f4:	e13ffc15 	stw	r4,-16(fp)
   1f0f8:	e17ffd15 	stw	r5,-12(fp)
   1f0fc:	e1bffe15 	stw	r6,-8(fp)
   1f100:	e1ffff15 	stw	r7,-4(fp)
	// boundary check
	if (x >= char_buffer->x_resolution || y >= char_buffer->y_resolution )
   1f104:	e0bffc17 	ldw	r2,-16(fp)
   1f108:	10800c17 	ldw	r2,48(r2)
   1f10c:	e0fffe17 	ldw	r3,-8(fp)
   1f110:	1880042e 	bgeu	r3,r2,1f124 <alt_up_char_buffer_string+0x3c>
   1f114:	e0bffc17 	ldw	r2,-16(fp)
   1f118:	10800d17 	ldw	r2,52(r2)
   1f11c:	e0ffff17 	ldw	r3,-4(fp)
   1f120:	18800236 	bltu	r3,r2,1f12c <alt_up_char_buffer_string+0x44>
		return -1;
   1f124:	00bfffc4 	movi	r2,-1
   1f128:	00002b06 	br	1f1d8 <alt_up_char_buffer_string+0xf0>
	
	unsigned int offset = 0;
   1f12c:	e03ffb15 	stw	zero,-20(fp)
	offset = (y << char_buffer->y_coord_offset) + x;
   1f130:	e0bffc17 	ldw	r2,-16(fp)
   1f134:	10801017 	ldw	r2,64(r2)
   1f138:	1007883a 	mov	r3,r2
   1f13c:	e0bfff17 	ldw	r2,-4(fp)
   1f140:	10c6983a 	sll	r3,r2,r3
   1f144:	e0bffe17 	ldw	r2,-8(fp)
   1f148:	1885883a 	add	r2,r3,r2
   1f14c:	e0bffb15 	stw	r2,-20(fp)

	while ( *ptr )
   1f150:	00001a06 	br	1f1bc <alt_up_char_buffer_string+0xd4>
	{
		IOWR_8DIRECT(char_buffer->buffer_base, offset, *ptr);
   1f154:	e0bffc17 	ldw	r2,-16(fp)
   1f158:	10c00b17 	ldw	r3,44(r2)
   1f15c:	e0bffb17 	ldw	r2,-20(fp)
   1f160:	1885883a 	add	r2,r3,r2
   1f164:	1007883a 	mov	r3,r2
   1f168:	e0bffd17 	ldw	r2,-12(fp)
   1f16c:	10800003 	ldbu	r2,0(r2)
   1f170:	10803fcc 	andi	r2,r2,255
   1f174:	1080201c 	xori	r2,r2,128
   1f178:	10bfe004 	addi	r2,r2,-128
   1f17c:	18800025 	stbio	r2,0(r3)
		++ptr;
   1f180:	e0bffd17 	ldw	r2,-12(fp)
   1f184:	10800044 	addi	r2,r2,1
   1f188:	e0bffd15 	stw	r2,-12(fp)
		if (++x >= char_buffer->x_resolution)
   1f18c:	e0bffe17 	ldw	r2,-8(fp)
   1f190:	10800044 	addi	r2,r2,1
   1f194:	e0bffe15 	stw	r2,-8(fp)
   1f198:	e0bffc17 	ldw	r2,-16(fp)
   1f19c:	10800c17 	ldw	r2,48(r2)
   1f1a0:	e0fffe17 	ldw	r3,-8(fp)
   1f1a4:	18800236 	bltu	r3,r2,1f1b0 <alt_up_char_buffer_string+0xc8>
			return -1;
   1f1a8:	00bfffc4 	movi	r2,-1
   1f1ac:	00000a06 	br	1f1d8 <alt_up_char_buffer_string+0xf0>
		++offset;
   1f1b0:	e0bffb17 	ldw	r2,-20(fp)
   1f1b4:	10800044 	addi	r2,r2,1
   1f1b8:	e0bffb15 	stw	r2,-20(fp)
		return -1;
	
	unsigned int offset = 0;
	offset = (y << char_buffer->y_coord_offset) + x;

	while ( *ptr )
   1f1bc:	e0bffd17 	ldw	r2,-12(fp)
   1f1c0:	10800003 	ldbu	r2,0(r2)
   1f1c4:	10803fcc 	andi	r2,r2,255
   1f1c8:	1080201c 	xori	r2,r2,128
   1f1cc:	10bfe004 	addi	r2,r2,-128
   1f1d0:	103fe01e 	bne	r2,zero,1f154 <__alt_mem_Flash_flash_data+0xf401f154>
		++ptr;
		if (++x >= char_buffer->x_resolution)
			return -1;
		++offset;
	}
	return 0;
   1f1d4:	0005883a 	mov	r2,zero
}
   1f1d8:	e037883a 	mov	sp,fp
   1f1dc:	df000017 	ldw	fp,0(sp)
   1f1e0:	dec00104 	addi	sp,sp,4
   1f1e4:	f800283a 	ret

0001f1e8 <alt_up_char_buffer_clear>:

int alt_up_char_buffer_clear(alt_up_char_buffer_dev *char_buffer) {
   1f1e8:	defffe04 	addi	sp,sp,-8
   1f1ec:	df000115 	stw	fp,4(sp)
   1f1f0:	df000104 	addi	fp,sp,4
   1f1f4:	e13fff15 	stw	r4,-4(fp)
	IOWR_ALT_UP_CHAR_BUFFER_CLR_SCRN(char_buffer->ctrl_reg_base, 1);
   1f1f8:	e0bfff17 	ldw	r2,-4(fp)
   1f1fc:	10800a17 	ldw	r2,40(r2)
   1f200:	10800084 	addi	r2,r2,2
   1f204:	1007883a 	mov	r3,r2
   1f208:	00800044 	movi	r2,1
   1f20c:	18800025 	stbio	r2,0(r3)
	while ((IORD_ALT_UP_CHAR_BUFFER_CLR_SCRN(char_buffer->ctrl_reg_base) & ALT_UP_CHAR_BUFFER_CLR_SCRN_MSK) >> ALT_UP_CHAR_BUFFER_CLR_SCRN_OFST);
   1f210:	0001883a 	nop
   1f214:	e0bfff17 	ldw	r2,-4(fp)
   1f218:	10800a17 	ldw	r2,40(r2)
   1f21c:	10800084 	addi	r2,r2,2
   1f220:	10800023 	ldbuio	r2,0(r2)
   1f224:	10803fcc 	andi	r2,r2,255
   1f228:	1080004c 	andi	r2,r2,1
   1f22c:	103ff91e 	bne	r2,zero,1f214 <__alt_mem_Flash_flash_data+0xf401f214>
	return 0;
   1f230:	0005883a 	mov	r2,zero
}
   1f234:	e037883a 	mov	sp,fp
   1f238:	df000017 	ldw	fp,0(sp)
   1f23c:	dec00104 	addi	sp,sp,4
   1f240:	f800283a 	ret

0001f244 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
   1f244:	defff504 	addi	sp,sp,-44
   1f248:	df000a15 	stw	fp,40(sp)
   1f24c:	df000a04 	addi	fp,sp,40
   1f250:	e13ffc15 	stw	r4,-16(fp)
   1f254:	e17ffd15 	stw	r5,-12(fp)
   1f258:	e1bffe15 	stw	r6,-8(fp)
   1f25c:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
   1f260:	e03ff615 	stw	zero,-40(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
   1f264:	008000b4 	movhi	r2,2
   1f268:	10932b04 	addi	r2,r2,19628
   1f26c:	10800017 	ldw	r2,0(r2)
  
  if (alt_ticks_per_second ())
   1f270:	10003f26 	beq	r2,zero,1f370 <alt_alarm_start+0x12c>
  {
    if (alarm)
   1f274:	e0bffc17 	ldw	r2,-16(fp)
   1f278:	10003b26 	beq	r2,zero,1f368 <alt_alarm_start+0x124>
    {
      alarm->callback = callback;
   1f27c:	e0bffc17 	ldw	r2,-16(fp)
   1f280:	e0fffe17 	ldw	r3,-8(fp)
   1f284:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
   1f288:	e0bffc17 	ldw	r2,-16(fp)
   1f28c:	e0ffff17 	ldw	r3,-4(fp)
   1f290:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1f294:	0005303a 	rdctl	r2,status
   1f298:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1f29c:	e0fff817 	ldw	r3,-32(fp)
   1f2a0:	00bfff84 	movi	r2,-2
   1f2a4:	1884703a 	and	r2,r3,r2
   1f2a8:	1001703a 	wrctl	status,r2
  
  return context;
   1f2ac:	e0bff817 	ldw	r2,-32(fp)
 
      irq_context = alt_irq_disable_all ();
   1f2b0:	e0bff715 	stw	r2,-36(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
   1f2b4:	008000b4 	movhi	r2,2
   1f2b8:	10932c04 	addi	r2,r2,19632
   1f2bc:	10800017 	ldw	r2,0(r2)
      
      current_nticks = alt_nticks();
   1f2c0:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
   1f2c4:	e0fffd17 	ldw	r3,-12(fp)
   1f2c8:	e0bff617 	ldw	r2,-40(fp)
   1f2cc:	1885883a 	add	r2,r3,r2
   1f2d0:	10c00044 	addi	r3,r2,1
   1f2d4:	e0bffc17 	ldw	r2,-16(fp)
   1f2d8:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
   1f2dc:	e0bffc17 	ldw	r2,-16(fp)
   1f2e0:	10c00217 	ldw	r3,8(r2)
   1f2e4:	e0bff617 	ldw	r2,-40(fp)
   1f2e8:	1880042e 	bgeu	r3,r2,1f2fc <alt_alarm_start+0xb8>
      {
        alarm->rollover = 1;
   1f2ec:	e0bffc17 	ldw	r2,-16(fp)
   1f2f0:	00c00044 	movi	r3,1
   1f2f4:	10c00405 	stb	r3,16(r2)
   1f2f8:	00000206 	br	1f304 <alt_alarm_start+0xc0>
      }
      else
      {
        alarm->rollover = 0;
   1f2fc:	e0bffc17 	ldw	r2,-16(fp)
   1f300:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
   1f304:	e0fffc17 	ldw	r3,-16(fp)
   1f308:	008000b4 	movhi	r2,2
   1f30c:	108b3a04 	addi	r2,r2,11496
   1f310:	e0bff915 	stw	r2,-28(fp)
   1f314:	e0fffa15 	stw	r3,-24(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   1f318:	e0bffa17 	ldw	r2,-24(fp)
   1f31c:	e0fff917 	ldw	r3,-28(fp)
   1f320:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   1f324:	e0bff917 	ldw	r2,-28(fp)
   1f328:	10c00017 	ldw	r3,0(r2)
   1f32c:	e0bffa17 	ldw	r2,-24(fp)
   1f330:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   1f334:	e0bff917 	ldw	r2,-28(fp)
   1f338:	10800017 	ldw	r2,0(r2)
   1f33c:	e0fffa17 	ldw	r3,-24(fp)
   1f340:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   1f344:	e0bff917 	ldw	r2,-28(fp)
   1f348:	e0fffa17 	ldw	r3,-24(fp)
   1f34c:	10c00015 	stw	r3,0(r2)
   1f350:	e0bff717 	ldw	r2,-36(fp)
   1f354:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1f358:	e0bffb17 	ldw	r2,-20(fp)
   1f35c:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
   1f360:	0005883a 	mov	r2,zero
   1f364:	00000306 	br	1f374 <alt_alarm_start+0x130>
    }
    else
    {
      return -EINVAL;
   1f368:	00bffa84 	movi	r2,-22
   1f36c:	00000106 	br	1f374 <alt_alarm_start+0x130>
    }
  }
  else
  {
    return -ENOTSUP;
   1f370:	00bfde84 	movi	r2,-134
  }
}
   1f374:	e037883a 	mov	sp,fp
   1f378:	df000017 	ldw	fp,0(sp)
   1f37c:	dec00104 	addi	sp,sp,4
   1f380:	f800283a 	ret

0001f384 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
   1f384:	deffff04 	addi	sp,sp,-4
   1f388:	df000015 	stw	fp,0(sp)
   1f38c:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
   1f390:	e037883a 	mov	sp,fp
   1f394:	df000017 	ldw	fp,0(sp)
   1f398:	dec00104 	addi	sp,sp,4
   1f39c:	f800283a 	ret

0001f3a0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   1f3a0:	defffe04 	addi	sp,sp,-8
   1f3a4:	dfc00115 	stw	ra,4(sp)
   1f3a8:	df000015 	stw	fp,0(sp)
   1f3ac:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   1f3b0:	008000b4 	movhi	r2,2
   1f3b4:	108b1804 	addi	r2,r2,11360
   1f3b8:	10800017 	ldw	r2,0(r2)
   1f3bc:	10000526 	beq	r2,zero,1f3d4 <alt_get_errno+0x34>
   1f3c0:	008000b4 	movhi	r2,2
   1f3c4:	108b1804 	addi	r2,r2,11360
   1f3c8:	10800017 	ldw	r2,0(r2)
   1f3cc:	103ee83a 	callr	r2
   1f3d0:	00000206 	br	1f3dc <alt_get_errno+0x3c>
   1f3d4:	008000b4 	movhi	r2,2
   1f3d8:	1092fd04 	addi	r2,r2,19444
}
   1f3dc:	e037883a 	mov	sp,fp
   1f3e0:	dfc00117 	ldw	ra,4(sp)
   1f3e4:	df000017 	ldw	fp,0(sp)
   1f3e8:	dec00204 	addi	sp,sp,8
   1f3ec:	f800283a 	ret

0001f3f0 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
   1f3f0:	defffa04 	addi	sp,sp,-24
   1f3f4:	dfc00515 	stw	ra,20(sp)
   1f3f8:	df000415 	stw	fp,16(sp)
   1f3fc:	df000404 	addi	fp,sp,16
   1f400:	e13ffe15 	stw	r4,-8(fp)
   1f404:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
   1f408:	e0bffe17 	ldw	r2,-8(fp)
   1f40c:	10000326 	beq	r2,zero,1f41c <alt_dev_llist_insert+0x2c>
   1f410:	e0bffe17 	ldw	r2,-8(fp)
   1f414:	10800217 	ldw	r2,8(r2)
   1f418:	1000061e 	bne	r2,zero,1f434 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
   1f41c:	001f3a00 	call	1f3a0 <alt_get_errno>
   1f420:	1007883a 	mov	r3,r2
   1f424:	00800584 	movi	r2,22
   1f428:	18800015 	stw	r2,0(r3)
    return -EINVAL;
   1f42c:	00bffa84 	movi	r2,-22
   1f430:	00001306 	br	1f480 <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
   1f434:	e0bffe17 	ldw	r2,-8(fp)
   1f438:	e0ffff17 	ldw	r3,-4(fp)
   1f43c:	e0fffc15 	stw	r3,-16(fp)
   1f440:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   1f444:	e0bffd17 	ldw	r2,-12(fp)
   1f448:	e0fffc17 	ldw	r3,-16(fp)
   1f44c:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   1f450:	e0bffc17 	ldw	r2,-16(fp)
   1f454:	10c00017 	ldw	r3,0(r2)
   1f458:	e0bffd17 	ldw	r2,-12(fp)
   1f45c:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   1f460:	e0bffc17 	ldw	r2,-16(fp)
   1f464:	10800017 	ldw	r2,0(r2)
   1f468:	e0fffd17 	ldw	r3,-12(fp)
   1f46c:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   1f470:	e0bffc17 	ldw	r2,-16(fp)
   1f474:	e0fffd17 	ldw	r3,-12(fp)
   1f478:	10c00015 	stw	r3,0(r2)

  return 0;  
   1f47c:	0005883a 	mov	r2,zero
}
   1f480:	e037883a 	mov	sp,fp
   1f484:	dfc00117 	ldw	ra,4(sp)
   1f488:	df000017 	ldw	fp,0(sp)
   1f48c:	dec00204 	addi	sp,sp,8
   1f490:	f800283a 	ret

0001f494 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
   1f494:	defffd04 	addi	sp,sp,-12
   1f498:	dfc00215 	stw	ra,8(sp)
   1f49c:	df000115 	stw	fp,4(sp)
   1f4a0:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   1f4a4:	008000b4 	movhi	r2,2
   1f4a8:	1081ce04 	addi	r2,r2,1848
   1f4ac:	e0bfff15 	stw	r2,-4(fp)
   1f4b0:	00000606 	br	1f4cc <_do_ctors+0x38>
        (*ctor) (); 
   1f4b4:	e0bfff17 	ldw	r2,-4(fp)
   1f4b8:	10800017 	ldw	r2,0(r2)
   1f4bc:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   1f4c0:	e0bfff17 	ldw	r2,-4(fp)
   1f4c4:	10bfff04 	addi	r2,r2,-4
   1f4c8:	e0bfff15 	stw	r2,-4(fp)
   1f4cc:	e0ffff17 	ldw	r3,-4(fp)
   1f4d0:	008000b4 	movhi	r2,2
   1f4d4:	1081cf04 	addi	r2,r2,1852
   1f4d8:	18bff62e 	bgeu	r3,r2,1f4b4 <__alt_mem_Flash_flash_data+0xf401f4b4>
        (*ctor) (); 
}
   1f4dc:	e037883a 	mov	sp,fp
   1f4e0:	dfc00117 	ldw	ra,4(sp)
   1f4e4:	df000017 	ldw	fp,0(sp)
   1f4e8:	dec00204 	addi	sp,sp,8
   1f4ec:	f800283a 	ret

0001f4f0 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
   1f4f0:	defffd04 	addi	sp,sp,-12
   1f4f4:	dfc00215 	stw	ra,8(sp)
   1f4f8:	df000115 	stw	fp,4(sp)
   1f4fc:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   1f500:	008000b4 	movhi	r2,2
   1f504:	1081ce04 	addi	r2,r2,1848
   1f508:	e0bfff15 	stw	r2,-4(fp)
   1f50c:	00000606 	br	1f528 <_do_dtors+0x38>
        (*dtor) (); 
   1f510:	e0bfff17 	ldw	r2,-4(fp)
   1f514:	10800017 	ldw	r2,0(r2)
   1f518:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   1f51c:	e0bfff17 	ldw	r2,-4(fp)
   1f520:	10bfff04 	addi	r2,r2,-4
   1f524:	e0bfff15 	stw	r2,-4(fp)
   1f528:	e0ffff17 	ldw	r3,-4(fp)
   1f52c:	008000b4 	movhi	r2,2
   1f530:	1081cf04 	addi	r2,r2,1852
   1f534:	18bff62e 	bgeu	r3,r2,1f510 <__alt_mem_Flash_flash_data+0xf401f510>
        (*dtor) (); 
}
   1f538:	e037883a 	mov	sp,fp
   1f53c:	dfc00117 	ldw	ra,4(sp)
   1f540:	df000017 	ldw	fp,0(sp)
   1f544:	dec00204 	addi	sp,sp,8
   1f548:	f800283a 	ret

0001f54c <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
   1f54c:	defffa04 	addi	sp,sp,-24
   1f550:	dfc00515 	stw	ra,20(sp)
   1f554:	df000415 	stw	fp,16(sp)
   1f558:	df000404 	addi	fp,sp,16
   1f55c:	e13ffe15 	stw	r4,-8(fp)
   1f560:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
   1f564:	e0bfff17 	ldw	r2,-4(fp)
   1f568:	10800017 	ldw	r2,0(r2)
   1f56c:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
   1f570:	e13ffe17 	ldw	r4,-8(fp)
   1f574:	00012240 	call	1224 <strlen>
   1f578:	10800044 	addi	r2,r2,1
   1f57c:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   1f580:	00000d06 	br	1f5b8 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
   1f584:	e0bffc17 	ldw	r2,-16(fp)
   1f588:	10c00217 	ldw	r3,8(r2)
   1f58c:	e0bffd17 	ldw	r2,-12(fp)
   1f590:	1809883a 	mov	r4,r3
   1f594:	e17ffe17 	ldw	r5,-8(fp)
   1f598:	100d883a 	mov	r6,r2
   1f59c:	00203dc0 	call	203dc <memcmp>
   1f5a0:	1000021e 	bne	r2,zero,1f5ac <alt_find_dev+0x60>
    {
      /* match found */

      return next;
   1f5a4:	e0bffc17 	ldw	r2,-16(fp)
   1f5a8:	00000706 	br	1f5c8 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
   1f5ac:	e0bffc17 	ldw	r2,-16(fp)
   1f5b0:	10800017 	ldw	r2,0(r2)
   1f5b4:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   1f5b8:	e0fffc17 	ldw	r3,-16(fp)
   1f5bc:	e0bfff17 	ldw	r2,-4(fp)
   1f5c0:	18bff01e 	bne	r3,r2,1f584 <__alt_mem_Flash_flash_data+0xf401f584>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
   1f5c4:	0005883a 	mov	r2,zero
}
   1f5c8:	e037883a 	mov	sp,fp
   1f5cc:	dfc00117 	ldw	ra,4(sp)
   1f5d0:	df000017 	ldw	fp,0(sp)
   1f5d4:	dec00204 	addi	sp,sp,8
   1f5d8:	f800283a 	ret

0001f5dc <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
   1f5dc:	defffe04 	addi	sp,sp,-8
   1f5e0:	dfc00115 	stw	ra,4(sp)
   1f5e4:	df000015 	stw	fp,0(sp)
   1f5e8:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
   1f5ec:	0009883a 	mov	r4,zero
   1f5f0:	01440004 	movi	r5,4096
   1f5f4:	00202680 	call	20268 <alt_icache_flush>
#endif
}
   1f5f8:	e037883a 	mov	sp,fp
   1f5fc:	dfc00117 	ldw	ra,4(sp)
   1f600:	df000017 	ldw	fp,0(sp)
   1f604:	dec00204 	addi	sp,sp,8
   1f608:	f800283a 	ret

0001f60c <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
   1f60c:	defff904 	addi	sp,sp,-28
   1f610:	dfc00615 	stw	ra,24(sp)
   1f614:	df000515 	stw	fp,20(sp)
   1f618:	df000504 	addi	fp,sp,20
   1f61c:	e13ffc15 	stw	r4,-16(fp)
   1f620:	e17ffd15 	stw	r5,-12(fp)
   1f624:	e1bffe15 	stw	r6,-8(fp)
   1f628:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
   1f62c:	e13ffd17 	ldw	r4,-12(fp)
   1f630:	e17ffe17 	ldw	r5,-8(fp)
   1f634:	e1bfff17 	ldw	r6,-4(fp)
   1f638:	001fa100 	call	1fa10 <open>
   1f63c:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
   1f640:	e0bffb17 	ldw	r2,-20(fp)
   1f644:	10001c16 	blt	r2,zero,1f6b8 <alt_open_fd+0xac>
  {
    fd->dev      = alt_fd_list[old].dev;
   1f648:	008000b4 	movhi	r2,2
   1f64c:	1085b104 	addi	r2,r2,5828
   1f650:	e0fffb17 	ldw	r3,-20(fp)
   1f654:	18c00324 	muli	r3,r3,12
   1f658:	10c5883a 	add	r2,r2,r3
   1f65c:	10c00017 	ldw	r3,0(r2)
   1f660:	e0bffc17 	ldw	r2,-16(fp)
   1f664:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
   1f668:	008000b4 	movhi	r2,2
   1f66c:	1085b104 	addi	r2,r2,5828
   1f670:	e0fffb17 	ldw	r3,-20(fp)
   1f674:	18c00324 	muli	r3,r3,12
   1f678:	18c00104 	addi	r3,r3,4
   1f67c:	10c5883a 	add	r2,r2,r3
   1f680:	10c00017 	ldw	r3,0(r2)
   1f684:	e0bffc17 	ldw	r2,-16(fp)
   1f688:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
   1f68c:	008000b4 	movhi	r2,2
   1f690:	1085b104 	addi	r2,r2,5828
   1f694:	e0fffb17 	ldw	r3,-20(fp)
   1f698:	18c00324 	muli	r3,r3,12
   1f69c:	18c00204 	addi	r3,r3,8
   1f6a0:	10c5883a 	add	r2,r2,r3
   1f6a4:	10c00017 	ldw	r3,0(r2)
   1f6a8:	e0bffc17 	ldw	r2,-16(fp)
   1f6ac:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
   1f6b0:	e13ffb17 	ldw	r4,-20(fp)
   1f6b4:	00105c00 	call	105c0 <alt_release_fd>
  }
} 
   1f6b8:	e037883a 	mov	sp,fp
   1f6bc:	dfc00117 	ldw	ra,4(sp)
   1f6c0:	df000017 	ldw	fp,0(sp)
   1f6c4:	dec00204 	addi	sp,sp,8
   1f6c8:	f800283a 	ret

0001f6cc <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
   1f6cc:	defffb04 	addi	sp,sp,-20
   1f6d0:	dfc00415 	stw	ra,16(sp)
   1f6d4:	df000315 	stw	fp,12(sp)
   1f6d8:	df000304 	addi	fp,sp,12
   1f6dc:	e13ffd15 	stw	r4,-12(fp)
   1f6e0:	e17ffe15 	stw	r5,-8(fp)
   1f6e4:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
   1f6e8:	010000b4 	movhi	r4,2
   1f6ec:	2105b404 	addi	r4,r4,5840
   1f6f0:	e17ffd17 	ldw	r5,-12(fp)
   1f6f4:	01800044 	movi	r6,1
   1f6f8:	01c07fc4 	movi	r7,511
   1f6fc:	001f60c0 	call	1f60c <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
   1f700:	010000b4 	movhi	r4,2
   1f704:	2105b104 	addi	r4,r4,5828
   1f708:	e17ffe17 	ldw	r5,-8(fp)
   1f70c:	000d883a 	mov	r6,zero
   1f710:	01c07fc4 	movi	r7,511
   1f714:	001f60c0 	call	1f60c <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
   1f718:	010000b4 	movhi	r4,2
   1f71c:	2105b704 	addi	r4,r4,5852
   1f720:	e17fff17 	ldw	r5,-4(fp)
   1f724:	01800044 	movi	r6,1
   1f728:	01c07fc4 	movi	r7,511
   1f72c:	001f60c0 	call	1f60c <alt_open_fd>
}  
   1f730:	e037883a 	mov	sp,fp
   1f734:	dfc00117 	ldw	ra,4(sp)
   1f738:	df000017 	ldw	fp,0(sp)
   1f73c:	dec00204 	addi	sp,sp,8
   1f740:	f800283a 	ret

0001f744 <alt_irq_register>:
 */
 
int alt_irq_register (alt_u32 id, 
                      void* context, 
                      alt_isr_func handler)
{
   1f744:	defff004 	addi	sp,sp,-64
   1f748:	df000f15 	stw	fp,60(sp)
   1f74c:	df000f04 	addi	fp,sp,60
   1f750:	e13ffd15 	stw	r4,-12(fp)
   1f754:	e17ffe15 	stw	r5,-8(fp)
   1f758:	e1bfff15 	stw	r6,-4(fp)
  int rc = -EINVAL;  
   1f75c:	00bffa84 	movi	r2,-22
   1f760:	e0bff115 	stw	r2,-60(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
   1f764:	e0bffd17 	ldw	r2,-12(fp)
   1f768:	10800828 	cmpgeui	r2,r2,32
   1f76c:	10005c1e 	bne	r2,zero,1f8e0 <alt_irq_register+0x19c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1f770:	0005303a 	rdctl	r2,status
   1f774:	e0bff315 	stw	r2,-52(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1f778:	e0fff317 	ldw	r3,-52(fp)
   1f77c:	00bfff84 	movi	r2,-2
   1f780:	1884703a 	and	r2,r3,r2
   1f784:	1001703a 	wrctl	status,r2
  
  return context;
   1f788:	e0bff317 	ldw	r2,-52(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all ();
   1f78c:	e0bff215 	stw	r2,-56(fp)

    alt_irq[id].handler = handler;
   1f790:	008000f4 	movhi	r2,3
   1f794:	10a13404 	addi	r2,r2,-31536
   1f798:	e0fffd17 	ldw	r3,-12(fp)
   1f79c:	180690fa 	slli	r3,r3,3
   1f7a0:	10c5883a 	add	r2,r2,r3
   1f7a4:	e0ffff17 	ldw	r3,-4(fp)
   1f7a8:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = context;
   1f7ac:	008000f4 	movhi	r2,3
   1f7b0:	10a13404 	addi	r2,r2,-31536
   1f7b4:	e0fffd17 	ldw	r3,-12(fp)
   1f7b8:	180690fa 	slli	r3,r3,3
   1f7bc:	18c00104 	addi	r3,r3,4
   1f7c0:	10c5883a 	add	r2,r2,r3
   1f7c4:	e0fffe17 	ldw	r3,-8(fp)
   1f7c8:	10c00015 	stw	r3,0(r2)

    rc = (handler) ? alt_irq_enable (id): alt_irq_disable (id);
   1f7cc:	e0bfff17 	ldw	r2,-4(fp)
   1f7d0:	10001f26 	beq	r2,zero,1f850 <alt_irq_register+0x10c>
   1f7d4:	e0bffd17 	ldw	r2,-12(fp)
   1f7d8:	e0bff415 	stw	r2,-48(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1f7dc:	0005303a 	rdctl	r2,status
   1f7e0:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1f7e4:	e0fff517 	ldw	r3,-44(fp)
   1f7e8:	00bfff84 	movi	r2,-2
   1f7ec:	1884703a 	and	r2,r3,r2
   1f7f0:	1001703a 	wrctl	status,r2
  
  return context;
   1f7f4:	e0bff517 	ldw	r2,-44(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   1f7f8:	e0bff615 	stw	r2,-40(fp)

  alt_irq_active |= (1 << id);
   1f7fc:	e0bff417 	ldw	r2,-48(fp)
   1f800:	00c00044 	movi	r3,1
   1f804:	1884983a 	sll	r2,r3,r2
   1f808:	1007883a 	mov	r3,r2
   1f80c:	008000b4 	movhi	r2,2
   1f810:	10932a04 	addi	r2,r2,19624
   1f814:	10800017 	ldw	r2,0(r2)
   1f818:	1886b03a 	or	r3,r3,r2
   1f81c:	008000b4 	movhi	r2,2
   1f820:	10932a04 	addi	r2,r2,19624
   1f824:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   1f828:	008000b4 	movhi	r2,2
   1f82c:	10932a04 	addi	r2,r2,19624
   1f830:	10800017 	ldw	r2,0(r2)
   1f834:	100170fa 	wrctl	ienable,r2
   1f838:	e0bff617 	ldw	r2,-40(fp)
   1f83c:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1f840:	e0bff717 	ldw	r2,-36(fp)
   1f844:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   1f848:	0005883a 	mov	r2,zero
   1f84c:	00001f06 	br	1f8cc <alt_irq_register+0x188>
   1f850:	e0bffd17 	ldw	r2,-12(fp)
   1f854:	e0bff815 	stw	r2,-32(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1f858:	0005303a 	rdctl	r2,status
   1f85c:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1f860:	e0fff917 	ldw	r3,-28(fp)
   1f864:	00bfff84 	movi	r2,-2
   1f868:	1884703a 	and	r2,r3,r2
   1f86c:	1001703a 	wrctl	status,r2
  
  return context;
   1f870:	e0bff917 	ldw	r2,-28(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   1f874:	e0bffa15 	stw	r2,-24(fp)

  alt_irq_active &= ~(1 << id);
   1f878:	e0bff817 	ldw	r2,-32(fp)
   1f87c:	00c00044 	movi	r3,1
   1f880:	1884983a 	sll	r2,r3,r2
   1f884:	0084303a 	nor	r2,zero,r2
   1f888:	1007883a 	mov	r3,r2
   1f88c:	008000b4 	movhi	r2,2
   1f890:	10932a04 	addi	r2,r2,19624
   1f894:	10800017 	ldw	r2,0(r2)
   1f898:	1886703a 	and	r3,r3,r2
   1f89c:	008000b4 	movhi	r2,2
   1f8a0:	10932a04 	addi	r2,r2,19624
   1f8a4:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   1f8a8:	008000b4 	movhi	r2,2
   1f8ac:	10932a04 	addi	r2,r2,19624
   1f8b0:	10800017 	ldw	r2,0(r2)
   1f8b4:	100170fa 	wrctl	ienable,r2
   1f8b8:	e0bffa17 	ldw	r2,-24(fp)
   1f8bc:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1f8c0:	e0bffb17 	ldw	r2,-20(fp)
   1f8c4:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   1f8c8:	0005883a 	mov	r2,zero
   1f8cc:	e0bff115 	stw	r2,-60(fp)
   1f8d0:	e0bff217 	ldw	r2,-56(fp)
   1f8d4:	e0bffc15 	stw	r2,-16(fp)
   1f8d8:	e0bffc17 	ldw	r2,-16(fp)
   1f8dc:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }
  return rc; 
   1f8e0:	e0bff117 	ldw	r2,-60(fp)
}
   1f8e4:	e037883a 	mov	sp,fp
   1f8e8:	df000017 	ldw	fp,0(sp)
   1f8ec:	dec00104 	addi	sp,sp,4
   1f8f0:	f800283a 	ret

0001f8f4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   1f8f4:	defffe04 	addi	sp,sp,-8
   1f8f8:	dfc00115 	stw	ra,4(sp)
   1f8fc:	df000015 	stw	fp,0(sp)
   1f900:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   1f904:	008000b4 	movhi	r2,2
   1f908:	108b1804 	addi	r2,r2,11360
   1f90c:	10800017 	ldw	r2,0(r2)
   1f910:	10000526 	beq	r2,zero,1f928 <alt_get_errno+0x34>
   1f914:	008000b4 	movhi	r2,2
   1f918:	108b1804 	addi	r2,r2,11360
   1f91c:	10800017 	ldw	r2,0(r2)
   1f920:	103ee83a 	callr	r2
   1f924:	00000206 	br	1f930 <alt_get_errno+0x3c>
   1f928:	008000b4 	movhi	r2,2
   1f92c:	1092fd04 	addi	r2,r2,19444
}
   1f930:	e037883a 	mov	sp,fp
   1f934:	dfc00117 	ldw	ra,4(sp)
   1f938:	df000017 	ldw	fp,0(sp)
   1f93c:	dec00204 	addi	sp,sp,8
   1f940:	f800283a 	ret

0001f944 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
   1f944:	defffd04 	addi	sp,sp,-12
   1f948:	df000215 	stw	fp,8(sp)
   1f94c:	df000204 	addi	fp,sp,8
   1f950:	e13fff15 	stw	r4,-4(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
   1f954:	e0bfff17 	ldw	r2,-4(fp)
   1f958:	10800217 	ldw	r2,8(r2)
   1f95c:	10d00034 	orhi	r3,r2,16384
   1f960:	e0bfff17 	ldw	r2,-4(fp)
   1f964:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   1f968:	e03ffe15 	stw	zero,-8(fp)
   1f96c:	00001d06 	br	1f9e4 <alt_file_locked+0xa0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   1f970:	008000b4 	movhi	r2,2
   1f974:	1085b104 	addi	r2,r2,5828
   1f978:	e0fffe17 	ldw	r3,-8(fp)
   1f97c:	18c00324 	muli	r3,r3,12
   1f980:	10c5883a 	add	r2,r2,r3
   1f984:	10c00017 	ldw	r3,0(r2)
   1f988:	e0bfff17 	ldw	r2,-4(fp)
   1f98c:	10800017 	ldw	r2,0(r2)
   1f990:	1880111e 	bne	r3,r2,1f9d8 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   1f994:	008000b4 	movhi	r2,2
   1f998:	1085b104 	addi	r2,r2,5828
   1f99c:	e0fffe17 	ldw	r3,-8(fp)
   1f9a0:	18c00324 	muli	r3,r3,12
   1f9a4:	18c00204 	addi	r3,r3,8
   1f9a8:	10c5883a 	add	r2,r2,r3
   1f9ac:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   1f9b0:	1000090e 	bge	r2,zero,1f9d8 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
   1f9b4:	e0bffe17 	ldw	r2,-8(fp)
   1f9b8:	10c00324 	muli	r3,r2,12
   1f9bc:	008000b4 	movhi	r2,2
   1f9c0:	1085b104 	addi	r2,r2,5828
   1f9c4:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   1f9c8:	e0bfff17 	ldw	r2,-4(fp)
   1f9cc:	18800226 	beq	r3,r2,1f9d8 <alt_file_locked+0x94>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
   1f9d0:	00bffcc4 	movi	r2,-13
   1f9d4:	00000a06 	br	1fa00 <alt_file_locked+0xbc>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   1f9d8:	e0bffe17 	ldw	r2,-8(fp)
   1f9dc:	10800044 	addi	r2,r2,1
   1f9e0:	e0bffe15 	stw	r2,-8(fp)
   1f9e4:	008000b4 	movhi	r2,2
   1f9e8:	108b1704 	addi	r2,r2,11356
   1f9ec:	10800017 	ldw	r2,0(r2)
   1f9f0:	1007883a 	mov	r3,r2
   1f9f4:	e0bffe17 	ldw	r2,-8(fp)
   1f9f8:	18bfdd2e 	bgeu	r3,r2,1f970 <__alt_mem_Flash_flash_data+0xf401f970>
    }
  }
  
  /* The device is not locked */
 
  return 0;
   1f9fc:	0005883a 	mov	r2,zero
}
   1fa00:	e037883a 	mov	sp,fp
   1fa04:	df000017 	ldw	fp,0(sp)
   1fa08:	dec00104 	addi	sp,sp,4
   1fa0c:	f800283a 	ret

0001fa10 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
   1fa10:	defff604 	addi	sp,sp,-40
   1fa14:	dfc00915 	stw	ra,36(sp)
   1fa18:	df000815 	stw	fp,32(sp)
   1fa1c:	df000804 	addi	fp,sp,32
   1fa20:	e13ffd15 	stw	r4,-12(fp)
   1fa24:	e17ffe15 	stw	r5,-8(fp)
   1fa28:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
   1fa2c:	00bfffc4 	movi	r2,-1
   1fa30:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
   1fa34:	00bffb44 	movi	r2,-19
   1fa38:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
   1fa3c:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
   1fa40:	e13ffd17 	ldw	r4,-12(fp)
   1fa44:	014000b4 	movhi	r5,2
   1fa48:	294b1504 	addi	r5,r5,11348
   1fa4c:	001f54c0 	call	1f54c <alt_find_dev>
   1fa50:	e0bff815 	stw	r2,-32(fp)
   1fa54:	e0bff817 	ldw	r2,-32(fp)
   1fa58:	1000051e 	bne	r2,zero,1fa70 <open+0x60>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
   1fa5c:	e13ffd17 	ldw	r4,-12(fp)
   1fa60:	00200580 	call	20058 <alt_find_file>
   1fa64:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
   1fa68:	00800044 	movi	r2,1
   1fa6c:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
   1fa70:	e0bff817 	ldw	r2,-32(fp)
   1fa74:	10002926 	beq	r2,zero,1fb1c <open+0x10c>
  {
    if ((index = alt_get_fd (dev)) < 0)
   1fa78:	e13ff817 	ldw	r4,-32(fp)
   1fa7c:	002016c0 	call	2016c <alt_get_fd>
   1fa80:	e0bff915 	stw	r2,-28(fp)
   1fa84:	e0bff917 	ldw	r2,-28(fp)
   1fa88:	1000030e 	bge	r2,zero,1fa98 <open+0x88>
    {
      status = index;
   1fa8c:	e0bff917 	ldw	r2,-28(fp)
   1fa90:	e0bffa15 	stw	r2,-24(fp)
   1fa94:	00002306 	br	1fb24 <open+0x114>
    }
    else
    {
      fd = &alt_fd_list[index];
   1fa98:	e0bff917 	ldw	r2,-28(fp)
   1fa9c:	10c00324 	muli	r3,r2,12
   1faa0:	008000b4 	movhi	r2,2
   1faa4:	1085b104 	addi	r2,r2,5828
   1faa8:	1885883a 	add	r2,r3,r2
   1faac:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
   1fab0:	e0fffe17 	ldw	r3,-8(fp)
   1fab4:	00900034 	movhi	r2,16384
   1fab8:	10bfffc4 	addi	r2,r2,-1
   1fabc:	1886703a 	and	r3,r3,r2
   1fac0:	e0bffc17 	ldw	r2,-16(fp)
   1fac4:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
   1fac8:	e0bffb17 	ldw	r2,-20(fp)
   1facc:	1000051e 	bne	r2,zero,1fae4 <open+0xd4>
   1fad0:	e13ffc17 	ldw	r4,-16(fp)
   1fad4:	001f9440 	call	1f944 <alt_file_locked>
   1fad8:	e0bffa15 	stw	r2,-24(fp)
   1fadc:	e0bffa17 	ldw	r2,-24(fp)
   1fae0:	10001016 	blt	r2,zero,1fb24 <open+0x114>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
   1fae4:	e0bff817 	ldw	r2,-32(fp)
   1fae8:	10800317 	ldw	r2,12(r2)
   1faec:	10000826 	beq	r2,zero,1fb10 <open+0x100>
   1faf0:	e0bff817 	ldw	r2,-32(fp)
   1faf4:	10800317 	ldw	r2,12(r2)
   1faf8:	e13ffc17 	ldw	r4,-16(fp)
   1fafc:	e17ffd17 	ldw	r5,-12(fp)
   1fb00:	e1bffe17 	ldw	r6,-8(fp)
   1fb04:	e1ffff17 	ldw	r7,-4(fp)
   1fb08:	103ee83a 	callr	r2
   1fb0c:	00000106 	br	1fb14 <open+0x104>
   1fb10:	0005883a 	mov	r2,zero
   1fb14:	e0bffa15 	stw	r2,-24(fp)
   1fb18:	00000206 	br	1fb24 <open+0x114>
      }
    }
  }
  else
  {
    status = -ENODEV;
   1fb1c:	00bffb44 	movi	r2,-19
   1fb20:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
   1fb24:	e0bffa17 	ldw	r2,-24(fp)
   1fb28:	1000090e 	bge	r2,zero,1fb50 <open+0x140>
  {
    alt_release_fd (index);  
   1fb2c:	e13ff917 	ldw	r4,-28(fp)
   1fb30:	00105c00 	call	105c0 <alt_release_fd>
    ALT_ERRNO = -status;
   1fb34:	001f8f40 	call	1f8f4 <alt_get_errno>
   1fb38:	1007883a 	mov	r3,r2
   1fb3c:	e0bffa17 	ldw	r2,-24(fp)
   1fb40:	0085c83a 	sub	r2,zero,r2
   1fb44:	18800015 	stw	r2,0(r3)
    return -1;
   1fb48:	00bfffc4 	movi	r2,-1
   1fb4c:	00000106 	br	1fb54 <open+0x144>
  }
  
  /* return the reference upon success */

  return index;
   1fb50:	e0bff917 	ldw	r2,-28(fp)
}
   1fb54:	e037883a 	mov	sp,fp
   1fb58:	dfc00117 	ldw	ra,4(sp)
   1fb5c:	df000017 	ldw	fp,0(sp)
   1fb60:	dec00204 	addi	sp,sp,8
   1fb64:	f800283a 	ret

0001fb68 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
   1fb68:	defffa04 	addi	sp,sp,-24
   1fb6c:	df000515 	stw	fp,20(sp)
   1fb70:	df000504 	addi	fp,sp,20
   1fb74:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1fb78:	0005303a 	rdctl	r2,status
   1fb7c:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1fb80:	e0fffc17 	ldw	r3,-16(fp)
   1fb84:	00bfff84 	movi	r2,-2
   1fb88:	1884703a 	and	r2,r3,r2
   1fb8c:	1001703a 	wrctl	status,r2
  
  return context;
   1fb90:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
   1fb94:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
   1fb98:	e0bfff17 	ldw	r2,-4(fp)
   1fb9c:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
   1fba0:	e0bffd17 	ldw	r2,-12(fp)
   1fba4:	10800017 	ldw	r2,0(r2)
   1fba8:	e0fffd17 	ldw	r3,-12(fp)
   1fbac:	18c00117 	ldw	r3,4(r3)
   1fbb0:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
   1fbb4:	e0bffd17 	ldw	r2,-12(fp)
   1fbb8:	10800117 	ldw	r2,4(r2)
   1fbbc:	e0fffd17 	ldw	r3,-12(fp)
   1fbc0:	18c00017 	ldw	r3,0(r3)
   1fbc4:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
   1fbc8:	e0bffd17 	ldw	r2,-12(fp)
   1fbcc:	e0fffd17 	ldw	r3,-12(fp)
   1fbd0:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
   1fbd4:	e0bffd17 	ldw	r2,-12(fp)
   1fbd8:	e0fffd17 	ldw	r3,-12(fp)
   1fbdc:	10c00015 	stw	r3,0(r2)
   1fbe0:	e0bffb17 	ldw	r2,-20(fp)
   1fbe4:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1fbe8:	e0bffe17 	ldw	r2,-8(fp)
   1fbec:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
   1fbf0:	e037883a 	mov	sp,fp
   1fbf4:	df000017 	ldw	fp,0(sp)
   1fbf8:	dec00104 	addi	sp,sp,4
   1fbfc:	f800283a 	ret

0001fc00 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
   1fc00:	defffb04 	addi	sp,sp,-20
   1fc04:	dfc00415 	stw	ra,16(sp)
   1fc08:	df000315 	stw	fp,12(sp)
   1fc0c:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
   1fc10:	d0a02d17 	ldw	r2,-32588(gp)
   1fc14:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
   1fc18:	d0a81f17 	ldw	r2,-24452(gp)
   1fc1c:	10800044 	addi	r2,r2,1
   1fc20:	d0a81f15 	stw	r2,-24452(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   1fc24:	00002e06 	br	1fce0 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
   1fc28:	e0bffd17 	ldw	r2,-12(fp)
   1fc2c:	10800017 	ldw	r2,0(r2)
   1fc30:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
   1fc34:	e0bffd17 	ldw	r2,-12(fp)
   1fc38:	10800403 	ldbu	r2,16(r2)
   1fc3c:	10803fcc 	andi	r2,r2,255
   1fc40:	10000426 	beq	r2,zero,1fc54 <alt_tick+0x54>
   1fc44:	d0a81f17 	ldw	r2,-24452(gp)
   1fc48:	1000021e 	bne	r2,zero,1fc54 <alt_tick+0x54>
    {
      alarm->rollover = 0;
   1fc4c:	e0bffd17 	ldw	r2,-12(fp)
   1fc50:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
   1fc54:	e0bffd17 	ldw	r2,-12(fp)
   1fc58:	10800217 	ldw	r2,8(r2)
   1fc5c:	d0e81f17 	ldw	r3,-24452(gp)
   1fc60:	18801d36 	bltu	r3,r2,1fcd8 <alt_tick+0xd8>
   1fc64:	e0bffd17 	ldw	r2,-12(fp)
   1fc68:	10800403 	ldbu	r2,16(r2)
   1fc6c:	10803fcc 	andi	r2,r2,255
   1fc70:	1000191e 	bne	r2,zero,1fcd8 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
   1fc74:	e0bffd17 	ldw	r2,-12(fp)
   1fc78:	10800317 	ldw	r2,12(r2)
   1fc7c:	e0fffd17 	ldw	r3,-12(fp)
   1fc80:	18c00517 	ldw	r3,20(r3)
   1fc84:	1809883a 	mov	r4,r3
   1fc88:	103ee83a 	callr	r2
   1fc8c:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
   1fc90:	e0bfff17 	ldw	r2,-4(fp)
   1fc94:	1000031e 	bne	r2,zero,1fca4 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
   1fc98:	e13ffd17 	ldw	r4,-12(fp)
   1fc9c:	001fb680 	call	1fb68 <alt_alarm_stop>
   1fca0:	00000d06 	br	1fcd8 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
   1fca4:	e0bffd17 	ldw	r2,-12(fp)
   1fca8:	10c00217 	ldw	r3,8(r2)
   1fcac:	e0bfff17 	ldw	r2,-4(fp)
   1fcb0:	1887883a 	add	r3,r3,r2
   1fcb4:	e0bffd17 	ldw	r2,-12(fp)
   1fcb8:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
   1fcbc:	e0bffd17 	ldw	r2,-12(fp)
   1fcc0:	10c00217 	ldw	r3,8(r2)
   1fcc4:	d0a81f17 	ldw	r2,-24452(gp)
   1fcc8:	1880032e 	bgeu	r3,r2,1fcd8 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
   1fccc:	e0bffd17 	ldw	r2,-12(fp)
   1fcd0:	00c00044 	movi	r3,1
   1fcd4:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
   1fcd8:	e0bffe17 	ldw	r2,-8(fp)
   1fcdc:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   1fce0:	e0fffd17 	ldw	r3,-12(fp)
   1fce4:	d0a02d04 	addi	r2,gp,-32588
   1fce8:	18bfcf1e 	bne	r3,r2,1fc28 <__alt_mem_Flash_flash_data+0xf401fc28>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
   1fcec:	00117cc0 	call	117cc <OSTimeTick>
}
   1fcf0:	e037883a 	mov	sp,fp
   1fcf4:	dfc00117 	ldw	ra,4(sp)
   1fcf8:	df000017 	ldw	fp,0(sp)
   1fcfc:	dec00204 	addi	sp,sp,8
   1fd00:	f800283a 	ret

0001fd04 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
   1fd04:	deffff04 	addi	sp,sp,-4
   1fd08:	df000015 	stw	fp,0(sp)
   1fd0c:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
   1fd10:	000170fa 	wrctl	ienable,zero
}
   1fd14:	e037883a 	mov	sp,fp
   1fd18:	df000017 	ldw	fp,0(sp)
   1fd1c:	dec00104 	addi	sp,sp,4
   1fd20:	f800283a 	ret

0001fd24 <OSCtxSw>:

      /* 
       * Save the remaining registers to the stack. 
       */

      addi sp, sp, -44
   1fd24:	defff504 	addi	sp,sp,-44
      bltu  sp, et, .Lstack_overflow

#endif

#if OS_THREAD_SAFE_NEWLIB
      ldw r3, %gprel(_impure_ptr)(gp)   /* load the pointer */
   1fd28:	d0e00317 	ldw	r3,-32756(gp)
#endif /* OS_THREAD_SAFE_NEWLIB */

      ldw r4, %gprel(OSTCBCur)(gp)
   1fd2c:	d1280b17 	ldw	r4,-24532(gp)

      stw ra,  0(sp)
   1fd30:	dfc00015 	stw	ra,0(sp)
      stw fp,  4(sp)
   1fd34:	df000115 	stw	fp,4(sp)
      stw r23, 8(sp)
   1fd38:	ddc00215 	stw	r23,8(sp)
      stw r22, 12(sp)
   1fd3c:	dd800315 	stw	r22,12(sp)
      stw r21, 16(sp)
   1fd40:	dd400415 	stw	r21,16(sp)
      stw r20, 20(sp)
   1fd44:	dd000515 	stw	r20,20(sp)
      stw r19, 24(sp)
   1fd48:	dcc00615 	stw	r19,24(sp)
      stw r18, 28(sp)
   1fd4c:	dc800715 	stw	r18,28(sp)
      stw r17, 32(sp)
   1fd50:	dc400815 	stw	r17,32(sp)
      stw r16, 36(sp)
   1fd54:	dc000915 	stw	r16,36(sp)
       * store the current value of _impure_ptr so it can be restored
       * later; _impure_ptr is asigned on a per task basis. It is used
       * by Newlib to achieve reentrancy.	
       */

      stw r3, 40(sp)                  /* save the impure pointer */
   1fd58:	d8c00a15 	stw	r3,40(sp)
      /* 
       * Save the current tasks stack pointer into the current tasks OS_TCB.
       * i.e. OSTCBCur->OSTCBStkPtr = sp;
       */

      stw sp, (r4)                  /* save the stack pointer (OSTCBStkPtr */
   1fd5c:	26c00015 	stw	sp,0(r4)

      /*
       * Call the user definable OSTaskSWHook()
       */

      call OSTaskSwHook
   1fd60:	001ff900 	call	1ff90 <OSTaskSwHook>
      /*
       * OSTCBCur = OSTCBHighRdy; 
       * OSPrioCur = OSPrioHighRdy; 
       */

      ldw r4, %gprel(OSTCBHighRdy)(gp)
   1fd64:	d1280617 	ldw	r4,-24552(gp)
      ldb r5, %gprel(OSPrioHighRdy)(gp)
   1fd68:	d167fe07 	ldb	r5,-24584(gp)

      stw r4, %gprel(OSTCBCur)(gp)     /* set the current task to be the new task */
   1fd6c:	d1280b15 	stw	r4,-24532(gp)
      stb r5, %gprel(OSPrioCur)(gp)    /* store the new task's priority as the current */
   1fd70:	d167fe45 	stb	r5,-24583(gp)

      /*
       * Set the stack pointer to point to the new task's stack
       */

      ldw sp, (r4) /* the stack pointer is the first entry in the OS_TCB structure */
   1fd74:	26c00017 	ldw	sp,0(r4)
      /*
       * restore the value of _impure_ptr ; _impure_ptr is asigned on a 
       * per task basis. It is used by Newlib to achieve reentrancy.	
       */

      ldw r3, 40(sp)                  /* load the new impure pointer */
   1fd78:	d8c00a17 	ldw	r3,40(sp)

      /*
       * Restore the saved registers for the new task.
       */

      ldw ra,  0(sp)
   1fd7c:	dfc00017 	ldw	ra,0(sp)
      ldw fp,  4(sp)
   1fd80:	df000117 	ldw	fp,4(sp)
      ldw r23, 8(sp)
   1fd84:	ddc00217 	ldw	r23,8(sp)
      ldw r22, 12(sp)
   1fd88:	dd800317 	ldw	r22,12(sp)
      ldw r21, 16(sp)
   1fd8c:	dd400417 	ldw	r21,16(sp)
      ldw r20, 20(sp)
   1fd90:	dd000517 	ldw	r20,20(sp)
      ldw r19, 24(sp)
   1fd94:	dcc00617 	ldw	r19,24(sp)
      ldw r18, 28(sp)
   1fd98:	dc800717 	ldw	r18,28(sp)
      ldw r17, 32(sp)
   1fd9c:	dc400817 	ldw	r17,32(sp)
      ldw r16, 36(sp)
   1fda0:	dc000917 	ldw	r16,36(sp)

#if OS_THREAD_SAFE_NEWLIB

      stw r3, %gprel(_impure_ptr)(gp) /* update _impure_ptr */
   1fda4:	d0e00315 	stw	r3,-32756(gp)

      stw et, %gprel(alt_stack_limit_value)(gp)

#endif

      addi sp, sp, 44
   1fda8:	dec00b04 	addi	sp,sp,44

      /*
       * resume execution of the new task.
       */

      ret
   1fdac:	f800283a 	ret

0001fdb0 <OSStartHighRdy>:

      /*
       * disable interrupts so that the scheduler doesn't run while
       * we're initialising this task.
       */  
      rdctl r18, status
   1fdb0:	0025303a 	rdctl	r18,status
      subi  r17, zero, 2   /* r17 = 0xfffffffe */
   1fdb4:	047fff84 	movi	r17,-2
      and   r18, r18, r17
   1fdb8:	9464703a 	and	r18,r18,r17
      wrctl status, r18
   1fdbc:	9001703a 	wrctl	status,r18

      /*
       * Call the user definable OSTaskSWHook()
       */

      call OSTaskSwHook
   1fdc0:	001ff900 	call	1ff90 <OSTaskSwHook>

      /* 
       * set OSRunning = TRUE.
       */

      movi r18, 1                    /* set r18 to the value 'TRUE' */
   1fdc4:	04800044 	movi	r18,1
      stb r18, %gprel(OSRunning)(gp) /* save this to OSRunning */
   1fdc8:	d4a7fc45 	stb	r18,-24591(gp)

      /*
       * start execution of the new task.
       */

      br 9b
   1fdcc:	003fe506 	br	1fd64 <__alt_mem_Flash_flash_data+0xf401fd64>

0001fdd0 <OSStartTsk>:

OSStartTsk:
      /* This instruction is never executed.  Its here to make the
       * backtrace work right 
       */
      movi sp, 0
   1fdd0:	06c00004 	movi	sp,0

      /* Enable interrupts */
      rdctl r2, status
   1fdd4:	0005303a 	rdctl	r2,status
      ori   r2, r2, 0x1
   1fdd8:	10800054 	ori	r2,r2,1
      wrctl status, r2
   1fddc:	1001703a 	wrctl	status,r2

      ldw r2, 4(sp)
   1fde0:	d8800117 	ldw	r2,4(sp)
      ldw r4, 0(sp)
   1fde4:	d9000017 	ldw	r4,0(sp)

      addi sp, sp, 8
   1fde8:	dec00204 	addi	sp,sp,8

      callr r2
   1fdec:	103ee83a 	callr	r2

      nop
   1fdf0:	0001883a 	nop

0001fdf4 <OSTaskStkInit>:
 *              been placed on the stack in the proper order.
 *
 ***********************************************************************************************/

OS_STK *OSTaskStkInit(void (*task)(void *pd), void *pdata, OS_STK *pstk, INT16U opt)
{
   1fdf4:	defff704 	addi	sp,sp,-36
   1fdf8:	dfc00815 	stw	ra,32(sp)
   1fdfc:	df000715 	stw	fp,28(sp)
   1fe00:	df000704 	addi	fp,sp,28
   1fe04:	e13ffc15 	stw	r4,-16(fp)
   1fe08:	e17ffd15 	stw	r5,-12(fp)
   1fe0c:	e1bffe15 	stw	r6,-8(fp)
   1fe10:	3805883a 	mov	r2,r7
   1fe14:	e0bfff0d 	sth	r2,-4(fp)
    * create and initialise the impure pointer used for Newlib thread local storage.
    * This is only done if the C library is being used in a thread safe mode. Otherwise
    * a single reent structure is used for all threads, which saves memory.
    */

   local_impure_ptr = (struct _reent*)((((INT32U)(pstk)) & ~0x3) - sizeof(struct _reent));
   1fe18:	e0fffe17 	ldw	r3,-8(fp)
   1fe1c:	00bfff04 	movi	r2,-4
   1fe20:	1884703a 	and	r2,r3,r2
   1fe24:	10bef704 	addi	r2,r2,-1060
   1fe28:	e0bff915 	stw	r2,-28(fp)

   _REENT_INIT_PTR (local_impure_ptr);
   1fe2c:	e13ff917 	ldw	r4,-28(fp)
   1fe30:	000b883a 	mov	r5,zero
   1fe34:	01810904 	movi	r6,1060
   1fe38:	000839c0 	call	839c <memset>
   1fe3c:	e0bff917 	ldw	r2,-28(fp)
   1fe40:	10c0bb04 	addi	r3,r2,748
   1fe44:	e0bff917 	ldw	r2,-28(fp)
   1fe48:	10c00115 	stw	r3,4(r2)
   1fe4c:	e0bff917 	ldw	r2,-28(fp)
   1fe50:	10c0d504 	addi	r3,r2,852
   1fe54:	e0bff917 	ldw	r2,-28(fp)
   1fe58:	10c00215 	stw	r3,8(r2)
   1fe5c:	e0bff917 	ldw	r2,-28(fp)
   1fe60:	10c0ef04 	addi	r3,r2,956
   1fe64:	e0bff917 	ldw	r2,-28(fp)
   1fe68:	10c00315 	stw	r3,12(r2)
   1fe6c:	e0fff917 	ldw	r3,-28(fp)
   1fe70:	008000b4 	movhi	r2,2
   1fe74:	10837d04 	addi	r2,r2,3572
   1fe78:	18800d15 	stw	r2,52(r3)
   1fe7c:	e0bff917 	ldw	r2,-28(fp)
   1fe80:	00c00044 	movi	r3,1
   1fe84:	10c02915 	stw	r3,164(r2)
   1fe88:	10002a15 	stw	zero,168(r2)
   1fe8c:	e0bff917 	ldw	r2,-28(fp)
   1fe90:	00ccc384 	movi	r3,13070
   1fe94:	10c02b0d 	sth	r3,172(r2)
   1fe98:	e0bff917 	ldw	r2,-28(fp)
   1fe9c:	00eaf344 	movi	r3,-21555
   1fea0:	10c02b8d 	sth	r3,174(r2)
   1fea4:	e0bff917 	ldw	r2,-28(fp)
   1fea8:	00c48d04 	movi	r3,4660
   1feac:	10c02c0d 	sth	r3,176(r2)
   1feb0:	e0bff917 	ldw	r2,-28(fp)
   1feb4:	00f99b44 	movi	r3,-6547
   1feb8:	10c02c8d 	sth	r3,178(r2)
   1febc:	e0bff917 	ldw	r2,-28(fp)
   1fec0:	00f7bb04 	movi	r3,-8468
   1fec4:	10c02d0d 	sth	r3,180(r2)
   1fec8:	e0bff917 	ldw	r2,-28(fp)
   1fecc:	00c00144 	movi	r3,5
   1fed0:	10c02d8d 	sth	r3,182(r2)
   1fed4:	e0bff917 	ldw	r2,-28(fp)
   1fed8:	00c002c4 	movi	r3,11
   1fedc:	10c02e0d 	sth	r3,184(r2)
   /* 
    * create a stack frame at the top of the stack (leaving space for the 
    * reentrant data structure).
    */

   frame_pointer = (INT32U*) local_impure_ptr;
   1fee0:	e0bff917 	ldw	r2,-28(fp)
   1fee4:	e0bffa15 	stw	r2,-24(fp)
#else
   frame_pointer =   (INT32U*) (((INT32U)(pstk)) & ~0x3);
#endif /* OS_THREAD_SAFE_NEWLIB */
   stk = frame_pointer - 13;
   1fee8:	e0bffa17 	ldw	r2,-24(fp)
   1feec:	10bff304 	addi	r2,r2,-52
   1fef0:	e0bffb15 	stw	r2,-20(fp)

   /* Now fill the stack frame. */

   stk[12] = (INT32U)task;            /* task address (ra) */
   1fef4:	e0bffb17 	ldw	r2,-20(fp)
   1fef8:	10800c04 	addi	r2,r2,48
   1fefc:	e0fffc17 	ldw	r3,-16(fp)
   1ff00:	10c00015 	stw	r3,0(r2)
   stk[11] = (INT32U) pdata;          /* first register argument (r4) */
   1ff04:	e0bffb17 	ldw	r2,-20(fp)
   1ff08:	10800b04 	addi	r2,r2,44
   1ff0c:	e0fffd17 	ldw	r3,-12(fp)
   1ff10:	10c00015 	stw	r3,0(r2)

#if OS_THREAD_SAFE_NEWLIB
   stk[10] = (INT32U) local_impure_ptr; /* value of _impure_ptr for this thread */
   1ff14:	e0bffb17 	ldw	r2,-20(fp)
   1ff18:	10800a04 	addi	r2,r2,40
   1ff1c:	e0fff917 	ldw	r3,-28(fp)
   1ff20:	10c00015 	stw	r3,0(r2)
#endif /* OS_THREAD_SAFE_NEWLIB */
   stk[0]  = ((INT32U)&OSStartTsk) + 4;/* exception return address (ea) */  
   1ff24:	008000b4 	movhi	r2,2
   1ff28:	10bf7404 	addi	r2,r2,-560
   1ff2c:	10c00104 	addi	r3,r2,4
   1ff30:	e0bffb17 	ldw	r2,-20(fp)
   1ff34:	10c00015 	stw	r3,0(r2)
    */
   __asm__ (".set OSTCBNext_OFFSET,%0" :: "i" (offsetof(OS_TCB, OSTCBNext)));
   __asm__ (".set OSTCBPrio_OFFSET,%0" :: "i" (offsetof(OS_TCB, OSTCBPrio)));
   __asm__ (".set OSTCBStkPtr_OFFSET,%0" :: "i" (offsetof(OS_TCB, OSTCBStkPtr)));
  
   return((OS_STK *)stk);
   1ff38:	e0bffb17 	ldw	r2,-20(fp)
}
   1ff3c:	e037883a 	mov	sp,fp
   1ff40:	dfc00117 	ldw	ra,4(sp)
   1ff44:	df000017 	ldw	fp,0(sp)
   1ff48:	dec00204 	addi	sp,sp,8
   1ff4c:	f800283a 	ret

0001ff50 <OSTaskCreateHook>:
*
* Note(s)    : 1) Interrupts are disabled during this call.
*********************************************************************************************************
*/
void OSTaskCreateHook (OS_TCB *ptcb)
{
   1ff50:	defffe04 	addi	sp,sp,-8
   1ff54:	df000115 	stw	fp,4(sp)
   1ff58:	df000104 	addi	fp,sp,4
   1ff5c:	e13fff15 	stw	r4,-4(fp)
    ptcb = ptcb;                       /* Prevent compiler warning */
}
   1ff60:	e037883a 	mov	sp,fp
   1ff64:	df000017 	ldw	fp,0(sp)
   1ff68:	dec00104 	addi	sp,sp,4
   1ff6c:	f800283a 	ret

0001ff70 <OSTaskDelHook>:
*
* Note(s)    : 1) Interrupts are disabled during this call.
*********************************************************************************************************
*/
void OSTaskDelHook (OS_TCB *ptcb)
{
   1ff70:	defffe04 	addi	sp,sp,-8
   1ff74:	df000115 	stw	fp,4(sp)
   1ff78:	df000104 	addi	fp,sp,4
   1ff7c:	e13fff15 	stw	r4,-4(fp)
    ptcb = ptcb;                       /* Prevent compiler warning                                     */
}
   1ff80:	e037883a 	mov	sp,fp
   1ff84:	df000017 	ldw	fp,0(sp)
   1ff88:	dec00104 	addi	sp,sp,4
   1ff8c:	f800283a 	ret

0001ff90 <OSTaskSwHook>:
*                 will be 'switched in' (i.e. the highest priority task) and, 'OSTCBCur' points to the
*                 task being switched out (i.e. the preempted task).
*********************************************************************************************************
*/
void OSTaskSwHook (void)
{
   1ff90:	deffff04 	addi	sp,sp,-4
   1ff94:	df000015 	stw	fp,0(sp)
   1ff98:	d839883a 	mov	fp,sp
}
   1ff9c:	e037883a 	mov	sp,fp
   1ffa0:	df000017 	ldw	fp,0(sp)
   1ffa4:	dec00104 	addi	sp,sp,4
   1ffa8:	f800283a 	ret

0001ffac <OSTaskStatHook>:
*
* Arguments  : none
*********************************************************************************************************
*/
void OSTaskStatHook (void)
{
   1ffac:	deffff04 	addi	sp,sp,-4
   1ffb0:	df000015 	stw	fp,0(sp)
   1ffb4:	d839883a 	mov	fp,sp
}
   1ffb8:	e037883a 	mov	sp,fp
   1ffbc:	df000017 	ldw	fp,0(sp)
   1ffc0:	dec00104 	addi	sp,sp,4
   1ffc4:	f800283a 	ret

0001ffc8 <OSTimeTickHook>:
#ifdef ALT_INICHE
void cticks_hook(void);
#endif

void OSTimeTickHook (void)
{
   1ffc8:	deffff04 	addi	sp,sp,-4
   1ffcc:	df000015 	stw	fp,0(sp)
   1ffd0:	d839883a 	mov	fp,sp
    
#ifdef ALT_INICHE
    /* Service the Interniche timer */
    cticks_hook();
#endif
}
   1ffd4:	e037883a 	mov	sp,fp
   1ffd8:	df000017 	ldw	fp,0(sp)
   1ffdc:	dec00104 	addi	sp,sp,4
   1ffe0:	f800283a 	ret

0001ffe4 <OSInitHookBegin>:

void OSInitHookBegin(void)
{
   1ffe4:	deffff04 	addi	sp,sp,-4
   1ffe8:	df000015 	stw	fp,0(sp)
   1ffec:	d839883a 	mov	fp,sp
#if OS_TMR_EN > 0
    OSTmrCtr = 0;
#endif
}
   1fff0:	e037883a 	mov	sp,fp
   1fff4:	df000017 	ldw	fp,0(sp)
   1fff8:	dec00104 	addi	sp,sp,4
   1fffc:	f800283a 	ret

00020000 <OSInitHookEnd>:

void OSInitHookEnd(void)
{
   20000:	deffff04 	addi	sp,sp,-4
   20004:	df000015 	stw	fp,0(sp)
   20008:	d839883a 	mov	fp,sp
}
   2000c:	e037883a 	mov	sp,fp
   20010:	df000017 	ldw	fp,0(sp)
   20014:	dec00104 	addi	sp,sp,4
   20018:	f800283a 	ret

0002001c <OSTaskIdleHook>:

void OSTaskIdleHook(void)
{
   2001c:	deffff04 	addi	sp,sp,-4
   20020:	df000015 	stw	fp,0(sp)
   20024:	d839883a 	mov	fp,sp
}
   20028:	e037883a 	mov	sp,fp
   2002c:	df000017 	ldw	fp,0(sp)
   20030:	dec00104 	addi	sp,sp,4
   20034:	f800283a 	ret

00020038 <OSTCBInitHook>:

void OSTCBInitHook(OS_TCB *ptcb)
{
   20038:	defffe04 	addi	sp,sp,-8
   2003c:	df000115 	stw	fp,4(sp)
   20040:	df000104 	addi	fp,sp,4
   20044:	e13fff15 	stw	r4,-4(fp)
}
   20048:	e037883a 	mov	sp,fp
   2004c:	df000017 	ldw	fp,0(sp)
   20050:	dec00104 	addi	sp,sp,4
   20054:	f800283a 	ret

00020058 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
   20058:	defffb04 	addi	sp,sp,-20
   2005c:	dfc00415 	stw	ra,16(sp)
   20060:	df000315 	stw	fp,12(sp)
   20064:	df000304 	addi	fp,sp,12
   20068:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
   2006c:	008000b4 	movhi	r2,2
   20070:	108b1304 	addi	r2,r2,11340
   20074:	10800017 	ldw	r2,0(r2)
   20078:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   2007c:	00003106 	br	20144 <alt_find_file+0xec>
  {
    len = strlen(next->name);
   20080:	e0bffd17 	ldw	r2,-12(fp)
   20084:	10800217 	ldw	r2,8(r2)
   20088:	1009883a 	mov	r4,r2
   2008c:	00012240 	call	1224 <strlen>
   20090:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
   20094:	e0bffd17 	ldw	r2,-12(fp)
   20098:	10c00217 	ldw	r3,8(r2)
   2009c:	e0bffe17 	ldw	r2,-8(fp)
   200a0:	10bfffc4 	addi	r2,r2,-1
   200a4:	1885883a 	add	r2,r3,r2
   200a8:	10800003 	ldbu	r2,0(r2)
   200ac:	10803fcc 	andi	r2,r2,255
   200b0:	1080201c 	xori	r2,r2,128
   200b4:	10bfe004 	addi	r2,r2,-128
   200b8:	10800bd8 	cmpnei	r2,r2,47
   200bc:	1000031e 	bne	r2,zero,200cc <alt_find_file+0x74>
    {
      len -= 1;
   200c0:	e0bffe17 	ldw	r2,-8(fp)
   200c4:	10bfffc4 	addi	r2,r2,-1
   200c8:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   200cc:	e0bffe17 	ldw	r2,-8(fp)
   200d0:	e0ffff17 	ldw	r3,-4(fp)
   200d4:	1885883a 	add	r2,r3,r2
   200d8:	10800003 	ldbu	r2,0(r2)
   200dc:	10803fcc 	andi	r2,r2,255
   200e0:	1080201c 	xori	r2,r2,128
   200e4:	10bfe004 	addi	r2,r2,-128
   200e8:	10800be0 	cmpeqi	r2,r2,47
   200ec:	1000081e 	bne	r2,zero,20110 <alt_find_file+0xb8>
   200f0:	e0bffe17 	ldw	r2,-8(fp)
   200f4:	e0ffff17 	ldw	r3,-4(fp)
   200f8:	1885883a 	add	r2,r3,r2
   200fc:	10800003 	ldbu	r2,0(r2)
   20100:	10803fcc 	andi	r2,r2,255
   20104:	1080201c 	xori	r2,r2,128
   20108:	10bfe004 	addi	r2,r2,-128
   2010c:	10000a1e 	bne	r2,zero,20138 <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
   20110:	e0bffd17 	ldw	r2,-12(fp)
   20114:	10c00217 	ldw	r3,8(r2)
   20118:	e0bffe17 	ldw	r2,-8(fp)
   2011c:	1809883a 	mov	r4,r3
   20120:	e17fff17 	ldw	r5,-4(fp)
   20124:	100d883a 	mov	r6,r2
   20128:	00203dc0 	call	203dc <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   2012c:	1000021e 	bne	r2,zero,20138 <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
   20130:	e0bffd17 	ldw	r2,-12(fp)
   20134:	00000806 	br	20158 <alt_find_file+0x100>
    }
    next = (alt_dev*) next->llist.next;
   20138:	e0bffd17 	ldw	r2,-12(fp)
   2013c:	10800017 	ldw	r2,0(r2)
   20140:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   20144:	e0fffd17 	ldw	r3,-12(fp)
   20148:	008000b4 	movhi	r2,2
   2014c:	108b1304 	addi	r2,r2,11340
   20150:	18bfcb1e 	bne	r3,r2,20080 <__alt_mem_Flash_flash_data+0xf4020080>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
   20154:	0005883a 	mov	r2,zero
}
   20158:	e037883a 	mov	sp,fp
   2015c:	dfc00117 	ldw	ra,4(sp)
   20160:	df000017 	ldw	fp,0(sp)
   20164:	dec00204 	addi	sp,sp,8
   20168:	f800283a 	ret

0002016c <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
   2016c:	defff904 	addi	sp,sp,-28
   20170:	dfc00615 	stw	ra,24(sp)
   20174:	df000515 	stw	fp,20(sp)
   20178:	df000504 	addi	fp,sp,20
   2017c:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
   20180:	00bffa04 	movi	r2,-24
   20184:	e0bffc15 	stw	r2,-16(fp)
  /* 
   * Take the alt_fd_list_lock semaphore in order to avoid races when 
   * accessing the file descriptor pool.
   */
  
  ALT_SEM_PEND(alt_fd_list_lock, 0);
   20188:	008000b4 	movhi	r2,2
   2018c:	10930104 	addi	r2,r2,19460
   20190:	10800017 	ldw	r2,0(r2)
   20194:	e0bffd15 	stw	r2,-12(fp)
   20198:	e03ffe0d 	sth	zero,-8(fp)
   2019c:	e0fffe0b 	ldhu	r3,-8(fp)
   201a0:	e0bffe84 	addi	r2,fp,-6
   201a4:	e13ffd17 	ldw	r4,-12(fp)
   201a8:	180b883a 	mov	r5,r3
   201ac:	100d883a 	mov	r6,r2
   201b0:	00162680 	call	16268 <OSSemPend>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   201b4:	e03ffb15 	stw	zero,-20(fp)
   201b8:	00001d06 	br	20230 <alt_get_fd+0xc4>
  {
    if (!alt_fd_list[i].dev)
   201bc:	008000b4 	movhi	r2,2
   201c0:	1085b104 	addi	r2,r2,5828
   201c4:	e0fffb17 	ldw	r3,-20(fp)
   201c8:	18c00324 	muli	r3,r3,12
   201cc:	10c5883a 	add	r2,r2,r3
   201d0:	10800017 	ldw	r2,0(r2)
   201d4:	1000131e 	bne	r2,zero,20224 <alt_get_fd+0xb8>
    {
      alt_fd_list[i].dev = dev;
   201d8:	008000b4 	movhi	r2,2
   201dc:	1085b104 	addi	r2,r2,5828
   201e0:	e0fffb17 	ldw	r3,-20(fp)
   201e4:	18c00324 	muli	r3,r3,12
   201e8:	10c5883a 	add	r2,r2,r3
   201ec:	e0ffff17 	ldw	r3,-4(fp)
   201f0:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
   201f4:	008000b4 	movhi	r2,2
   201f8:	108b1704 	addi	r2,r2,11356
   201fc:	10c00017 	ldw	r3,0(r2)
   20200:	e0bffb17 	ldw	r2,-20(fp)
   20204:	1880040e 	bge	r3,r2,20218 <alt_get_fd+0xac>
      {
        alt_max_fd = i;
   20208:	008000b4 	movhi	r2,2
   2020c:	108b1704 	addi	r2,r2,11356
   20210:	e0fffb17 	ldw	r3,-20(fp)
   20214:	10c00015 	stw	r3,0(r2)
      }
      rc = i;
   20218:	e0bffb17 	ldw	r2,-20(fp)
   2021c:	e0bffc15 	stw	r2,-16(fp)
      goto alt_get_fd_exit;
   20220:	00000606 	br	2023c <alt_get_fd+0xd0>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   20224:	e0bffb17 	ldw	r2,-20(fp)
   20228:	10800044 	addi	r2,r2,1
   2022c:	e0bffb15 	stw	r2,-20(fp)
   20230:	e0bffb17 	ldw	r2,-20(fp)
   20234:	10800810 	cmplti	r2,r2,32
   20238:	103fe01e 	bne	r2,zero,201bc <__alt_mem_Flash_flash_data+0xf40201bc>
  /*
   * Release the alt_fd_list_lock semaphore now that we are done with the
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);
   2023c:	008000b4 	movhi	r2,2
   20240:	10930104 	addi	r2,r2,19460
   20244:	10800017 	ldw	r2,0(r2)
   20248:	1009883a 	mov	r4,r2
   2024c:	001663c0 	call	1663c <OSSemPost>

  return rc;
   20250:	e0bffc17 	ldw	r2,-16(fp)
}
   20254:	e037883a 	mov	sp,fp
   20258:	dfc00117 	ldw	ra,4(sp)
   2025c:	df000017 	ldw	fp,0(sp)
   20260:	dec00204 	addi	sp,sp,8
   20264:	f800283a 	ret

00020268 <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
   20268:	defffb04 	addi	sp,sp,-20
   2026c:	df000415 	stw	fp,16(sp)
   20270:	df000404 	addi	fp,sp,16
   20274:	e13ffe15 	stw	r4,-8(fp)
   20278:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
   2027c:	e0bfff17 	ldw	r2,-4(fp)
   20280:	10840070 	cmpltui	r2,r2,4097
   20284:	1000021e 	bne	r2,zero,20290 <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
   20288:	00840004 	movi	r2,4096
   2028c:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
   20290:	e0fffe17 	ldw	r3,-8(fp)
   20294:	e0bfff17 	ldw	r2,-4(fp)
   20298:	1885883a 	add	r2,r3,r2
   2029c:	e0bffd15 	stw	r2,-12(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
   202a0:	e0bffe17 	ldw	r2,-8(fp)
   202a4:	e0bffc15 	stw	r2,-16(fp)
   202a8:	00000506 	br	202c0 <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
   202ac:	e0bffc17 	ldw	r2,-16(fp)
   202b0:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
   202b4:	e0bffc17 	ldw	r2,-16(fp)
   202b8:	10800804 	addi	r2,r2,32
   202bc:	e0bffc15 	stw	r2,-16(fp)
   202c0:	e0fffc17 	ldw	r3,-16(fp)
   202c4:	e0bffd17 	ldw	r2,-12(fp)
   202c8:	18bff836 	bltu	r3,r2,202ac <__alt_mem_Flash_flash_data+0xf40202ac>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
   202cc:	e0bffe17 	ldw	r2,-8(fp)
   202d0:	108007cc 	andi	r2,r2,31
   202d4:	10000226 	beq	r2,zero,202e0 <alt_icache_flush+0x78>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
   202d8:	e0bffc17 	ldw	r2,-16(fp)
   202dc:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
   202e0:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
   202e4:	e037883a 	mov	sp,fp
   202e8:	df000017 	ldw	fp,0(sp)
   202ec:	dec00104 	addi	sp,sp,4
   202f0:	f800283a 	ret

000202f4 <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
   202f4:	defffe04 	addi	sp,sp,-8
   202f8:	df000115 	stw	fp,4(sp)
   202fc:	df000104 	addi	fp,sp,4
   20300:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
   20304:	e0bfff17 	ldw	r2,-4(fp)
   20308:	10bffe84 	addi	r2,r2,-6
   2030c:	10c00428 	cmpgeui	r3,r2,16
   20310:	18001a1e 	bne	r3,zero,2037c <alt_exception_cause_generated_bad_addr+0x88>
   20314:	100690ba 	slli	r3,r2,2
   20318:	008000b4 	movhi	r2,2
   2031c:	1080cb04 	addi	r2,r2,812
   20320:	1885883a 	add	r2,r3,r2
   20324:	10800017 	ldw	r2,0(r2)
   20328:	1000683a 	jmp	r2
   2032c:	0002036c 	andhi	zero,zero,2061
   20330:	0002036c 	andhi	zero,zero,2061
   20334:	0002037c 	xorhi	zero,zero,2061
   20338:	0002037c 	xorhi	zero,zero,2061
   2033c:	0002037c 	xorhi	zero,zero,2061
   20340:	0002036c 	andhi	zero,zero,2061
   20344:	00020374 	movhi	zero,2061
   20348:	0002037c 	xorhi	zero,zero,2061
   2034c:	0002036c 	andhi	zero,zero,2061
   20350:	0002036c 	andhi	zero,zero,2061
   20354:	0002037c 	xorhi	zero,zero,2061
   20358:	0002036c 	andhi	zero,zero,2061
   2035c:	00020374 	movhi	zero,2061
   20360:	0002037c 	xorhi	zero,zero,2061
   20364:	0002037c 	xorhi	zero,zero,2061
   20368:	0002036c 	andhi	zero,zero,2061
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
   2036c:	00800044 	movi	r2,1
   20370:	00000306 	br	20380 <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
   20374:	0005883a 	mov	r2,zero
   20378:	00000106 	br	20380 <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
   2037c:	0005883a 	mov	r2,zero
  }
}
   20380:	e037883a 	mov	sp,fp
   20384:	df000017 	ldw	fp,0(sp)
   20388:	dec00104 	addi	sp,sp,4
   2038c:	f800283a 	ret

00020390 <atexit>:
   20390:	200b883a 	mov	r5,r4
   20394:	000d883a 	mov	r6,zero
   20398:	0009883a 	mov	r4,zero
   2039c:	000f883a 	mov	r7,zero
   203a0:	00204581 	jmpi	20458 <__register_exitproc>

000203a4 <exit>:
   203a4:	defffe04 	addi	sp,sp,-8
   203a8:	000b883a 	mov	r5,zero
   203ac:	dc000015 	stw	r16,0(sp)
   203b0:	dfc00115 	stw	ra,4(sp)
   203b4:	2021883a 	mov	r16,r4
   203b8:	002056c0 	call	2056c <__call_exitprocs>
   203bc:	008000b4 	movhi	r2,2
   203c0:	108b0f04 	addi	r2,r2,11324
   203c4:	11000017 	ldw	r4,0(r2)
   203c8:	20800f17 	ldw	r2,60(r4)
   203cc:	10000126 	beq	r2,zero,203d4 <exit+0x30>
   203d0:	103ee83a 	callr	r2
   203d4:	8009883a 	mov	r4,r16
   203d8:	00207000 	call	20700 <_exit>

000203dc <memcmp>:
   203dc:	01c000c4 	movi	r7,3
   203e0:	3980192e 	bgeu	r7,r6,20448 <memcmp+0x6c>
   203e4:	2144b03a 	or	r2,r4,r5
   203e8:	11c4703a 	and	r2,r2,r7
   203ec:	10000f26 	beq	r2,zero,2042c <memcmp+0x50>
   203f0:	20800003 	ldbu	r2,0(r4)
   203f4:	28c00003 	ldbu	r3,0(r5)
   203f8:	10c0151e 	bne	r2,r3,20450 <memcmp+0x74>
   203fc:	31bfff84 	addi	r6,r6,-2
   20400:	01ffffc4 	movi	r7,-1
   20404:	00000406 	br	20418 <memcmp+0x3c>
   20408:	20800003 	ldbu	r2,0(r4)
   2040c:	28c00003 	ldbu	r3,0(r5)
   20410:	31bfffc4 	addi	r6,r6,-1
   20414:	10c00e1e 	bne	r2,r3,20450 <memcmp+0x74>
   20418:	21000044 	addi	r4,r4,1
   2041c:	29400044 	addi	r5,r5,1
   20420:	31fff91e 	bne	r6,r7,20408 <__alt_mem_Flash_flash_data+0xf4020408>
   20424:	0005883a 	mov	r2,zero
   20428:	f800283a 	ret
   2042c:	20c00017 	ldw	r3,0(r4)
   20430:	28800017 	ldw	r2,0(r5)
   20434:	1880041e 	bne	r3,r2,20448 <memcmp+0x6c>
   20438:	31bfff04 	addi	r6,r6,-4
   2043c:	21000104 	addi	r4,r4,4
   20440:	29400104 	addi	r5,r5,4
   20444:	39bff936 	bltu	r7,r6,2042c <__alt_mem_Flash_flash_data+0xf402042c>
   20448:	303fe91e 	bne	r6,zero,203f0 <__alt_mem_Flash_flash_data+0xf40203f0>
   2044c:	003ff506 	br	20424 <__alt_mem_Flash_flash_data+0xf4020424>
   20450:	10c5c83a 	sub	r2,r2,r3
   20454:	f800283a 	ret

00020458 <__register_exitproc>:
   20458:	008000b4 	movhi	r2,2
   2045c:	defffa04 	addi	sp,sp,-24
   20460:	108b0f04 	addi	r2,r2,11324
   20464:	dc000315 	stw	r16,12(sp)
   20468:	14000017 	ldw	r16,0(r2)
   2046c:	dc400415 	stw	r17,16(sp)
   20470:	dfc00515 	stw	ra,20(sp)
   20474:	80805217 	ldw	r2,328(r16)
   20478:	2023883a 	mov	r17,r4
   2047c:	10003626 	beq	r2,zero,20558 <__register_exitproc+0x100>
   20480:	10c00117 	ldw	r3,4(r2)
   20484:	010007c4 	movi	r4,31
   20488:	20c00e16 	blt	r4,r3,204c4 <__register_exitproc+0x6c>
   2048c:	1a400044 	addi	r9,r3,1
   20490:	8800211e 	bne	r17,zero,20518 <__register_exitproc+0xc0>
   20494:	18c00084 	addi	r3,r3,2
   20498:	18c7883a 	add	r3,r3,r3
   2049c:	18c7883a 	add	r3,r3,r3
   204a0:	12400115 	stw	r9,4(r2)
   204a4:	10c7883a 	add	r3,r2,r3
   204a8:	19400015 	stw	r5,0(r3)
   204ac:	0005883a 	mov	r2,zero
   204b0:	dfc00517 	ldw	ra,20(sp)
   204b4:	dc400417 	ldw	r17,16(sp)
   204b8:	dc000317 	ldw	r16,12(sp)
   204bc:	dec00604 	addi	sp,sp,24
   204c0:	f800283a 	ret
   204c4:	00800034 	movhi	r2,0
   204c8:	1081c004 	addi	r2,r2,1792
   204cc:	10002526 	beq	r2,zero,20564 <__register_exitproc+0x10c>
   204d0:	01006404 	movi	r4,400
   204d4:	d9400015 	stw	r5,0(sp)
   204d8:	d9800115 	stw	r6,4(sp)
   204dc:	d9c00215 	stw	r7,8(sp)
   204e0:	00007000 	call	700 <malloc>
   204e4:	d9400017 	ldw	r5,0(sp)
   204e8:	d9800117 	ldw	r6,4(sp)
   204ec:	d9c00217 	ldw	r7,8(sp)
   204f0:	10001c26 	beq	r2,zero,20564 <__register_exitproc+0x10c>
   204f4:	80c05217 	ldw	r3,328(r16)
   204f8:	10000115 	stw	zero,4(r2)
   204fc:	02400044 	movi	r9,1
   20500:	10c00015 	stw	r3,0(r2)
   20504:	80805215 	stw	r2,328(r16)
   20508:	10006215 	stw	zero,392(r2)
   2050c:	10006315 	stw	zero,396(r2)
   20510:	0007883a 	mov	r3,zero
   20514:	883fdf26 	beq	r17,zero,20494 <__alt_mem_Flash_flash_data+0xf4020494>
   20518:	18d1883a 	add	r8,r3,r3
   2051c:	4211883a 	add	r8,r8,r8
   20520:	1211883a 	add	r8,r2,r8
   20524:	41802215 	stw	r6,136(r8)
   20528:	01000044 	movi	r4,1
   2052c:	11806217 	ldw	r6,392(r2)
   20530:	20c8983a 	sll	r4,r4,r3
   20534:	310cb03a 	or	r6,r6,r4
   20538:	11806215 	stw	r6,392(r2)
   2053c:	41c04215 	stw	r7,264(r8)
   20540:	01800084 	movi	r6,2
   20544:	89bfd31e 	bne	r17,r6,20494 <__alt_mem_Flash_flash_data+0xf4020494>
   20548:	11806317 	ldw	r6,396(r2)
   2054c:	3108b03a 	or	r4,r6,r4
   20550:	11006315 	stw	r4,396(r2)
   20554:	003fcf06 	br	20494 <__alt_mem_Flash_flash_data+0xf4020494>
   20558:	80805304 	addi	r2,r16,332
   2055c:	80805215 	stw	r2,328(r16)
   20560:	003fc706 	br	20480 <__alt_mem_Flash_flash_data+0xf4020480>
   20564:	00bfffc4 	movi	r2,-1
   20568:	003fd106 	br	204b0 <__alt_mem_Flash_flash_data+0xf40204b0>

0002056c <__call_exitprocs>:
   2056c:	008000b4 	movhi	r2,2
   20570:	108b0f04 	addi	r2,r2,11324
   20574:	10800017 	ldw	r2,0(r2)
   20578:	defff404 	addi	sp,sp,-48
   2057c:	dd800815 	stw	r22,32(sp)
   20580:	d8800015 	stw	r2,0(sp)
   20584:	10805204 	addi	r2,r2,328
   20588:	dd000615 	stw	r20,24(sp)
   2058c:	dc800415 	stw	r18,16(sp)
   20590:	dfc00b15 	stw	ra,44(sp)
   20594:	df000a15 	stw	fp,40(sp)
   20598:	ddc00915 	stw	r23,36(sp)
   2059c:	dd400715 	stw	r21,28(sp)
   205a0:	dcc00515 	stw	r19,20(sp)
   205a4:	dc400315 	stw	r17,12(sp)
   205a8:	dc000215 	stw	r16,8(sp)
   205ac:	2025883a 	mov	r18,r4
   205b0:	2829883a 	mov	r20,r5
   205b4:	d8800115 	stw	r2,4(sp)
   205b8:	05bfffc4 	movi	r22,-1
   205bc:	d8800017 	ldw	r2,0(sp)
   205c0:	14c05217 	ldw	r19,328(r2)
   205c4:	98001d26 	beq	r19,zero,2063c <__call_exitprocs+0xd0>
   205c8:	dd400117 	ldw	r21,4(sp)
   205cc:	98800117 	ldw	r2,4(r19)
   205d0:	173fffc4 	addi	fp,r2,-1
   205d4:	e0000d16 	blt	fp,zero,2060c <__call_exitprocs+0xa0>
   205d8:	14000044 	addi	r16,r2,1
   205dc:	8421883a 	add	r16,r16,r16
   205e0:	8421883a 	add	r16,r16,r16
   205e4:	84402004 	addi	r17,r16,128
   205e8:	9c63883a 	add	r17,r19,r17
   205ec:	9c21883a 	add	r16,r19,r16
   205f0:	a0001e26 	beq	r20,zero,2066c <__call_exitprocs+0x100>
   205f4:	80804017 	ldw	r2,256(r16)
   205f8:	15001c26 	beq	r2,r20,2066c <__call_exitprocs+0x100>
   205fc:	e73fffc4 	addi	fp,fp,-1
   20600:	843fff04 	addi	r16,r16,-4
   20604:	8c7fff04 	addi	r17,r17,-4
   20608:	e5bff91e 	bne	fp,r22,205f0 <__alt_mem_Flash_flash_data+0xf40205f0>
   2060c:	00800034 	movhi	r2,0
   20610:	1081c504 	addi	r2,r2,1812
   20614:	10000926 	beq	r2,zero,2063c <__call_exitprocs+0xd0>
   20618:	98800117 	ldw	r2,4(r19)
   2061c:	1000311e 	bne	r2,zero,206e4 <__call_exitprocs+0x178>
   20620:	98800017 	ldw	r2,0(r19)
   20624:	10003426 	beq	r2,zero,206f8 <__call_exitprocs+0x18c>
   20628:	9809883a 	mov	r4,r19
   2062c:	a8800015 	stw	r2,0(r21)
   20630:	00007140 	call	714 <free>
   20634:	acc00017 	ldw	r19,0(r21)
   20638:	983fe41e 	bne	r19,zero,205cc <__alt_mem_Flash_flash_data+0xf40205cc>
   2063c:	dfc00b17 	ldw	ra,44(sp)
   20640:	df000a17 	ldw	fp,40(sp)
   20644:	ddc00917 	ldw	r23,36(sp)
   20648:	dd800817 	ldw	r22,32(sp)
   2064c:	dd400717 	ldw	r21,28(sp)
   20650:	dd000617 	ldw	r20,24(sp)
   20654:	dcc00517 	ldw	r19,20(sp)
   20658:	dc800417 	ldw	r18,16(sp)
   2065c:	dc400317 	ldw	r17,12(sp)
   20660:	dc000217 	ldw	r16,8(sp)
   20664:	dec00c04 	addi	sp,sp,48
   20668:	f800283a 	ret
   2066c:	98800117 	ldw	r2,4(r19)
   20670:	80c00017 	ldw	r3,0(r16)
   20674:	10bfffc4 	addi	r2,r2,-1
   20678:	17001526 	beq	r2,fp,206d0 <__call_exitprocs+0x164>
   2067c:	80000015 	stw	zero,0(r16)
   20680:	183fde26 	beq	r3,zero,205fc <__alt_mem_Flash_flash_data+0xf40205fc>
   20684:	00800044 	movi	r2,1
   20688:	1708983a 	sll	r4,r2,fp
   2068c:	98806217 	ldw	r2,392(r19)
   20690:	9dc00117 	ldw	r23,4(r19)
   20694:	2084703a 	and	r2,r4,r2
   20698:	1000061e 	bne	r2,zero,206b4 <__call_exitprocs+0x148>
   2069c:	183ee83a 	callr	r3
   206a0:	98800117 	ldw	r2,4(r19)
   206a4:	15ffc51e 	bne	r2,r23,205bc <__alt_mem_Flash_flash_data+0xf40205bc>
   206a8:	a8800017 	ldw	r2,0(r21)
   206ac:	14ffd326 	beq	r2,r19,205fc <__alt_mem_Flash_flash_data+0xf40205fc>
   206b0:	003fc206 	br	205bc <__alt_mem_Flash_flash_data+0xf40205bc>
   206b4:	98806317 	ldw	r2,396(r19)
   206b8:	2084703a 	and	r2,r4,r2
   206bc:	1000061e 	bne	r2,zero,206d8 <__call_exitprocs+0x16c>
   206c0:	89400017 	ldw	r5,0(r17)
   206c4:	9009883a 	mov	r4,r18
   206c8:	183ee83a 	callr	r3
   206cc:	003ff406 	br	206a0 <__alt_mem_Flash_flash_data+0xf40206a0>
   206d0:	9f000115 	stw	fp,4(r19)
   206d4:	003fea06 	br	20680 <__alt_mem_Flash_flash_data+0xf4020680>
   206d8:	89000017 	ldw	r4,0(r17)
   206dc:	183ee83a 	callr	r3
   206e0:	003fef06 	br	206a0 <__alt_mem_Flash_flash_data+0xf40206a0>
   206e4:	98800017 	ldw	r2,0(r19)
   206e8:	982b883a 	mov	r21,r19
   206ec:	1027883a 	mov	r19,r2
   206f0:	983fb61e 	bne	r19,zero,205cc <__alt_mem_Flash_flash_data+0xf40205cc>
   206f4:	003fd106 	br	2063c <__alt_mem_Flash_flash_data+0xf402063c>
   206f8:	0005883a 	mov	r2,zero
   206fc:	003ffa06 	br	206e8 <__alt_mem_Flash_flash_data+0xf40206e8>

00020700 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
   20700:	defffd04 	addi	sp,sp,-12
   20704:	df000215 	stw	fp,8(sp)
   20708:	df000204 	addi	fp,sp,8
   2070c:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
   20710:	008000b4 	movhi	r2,2
   20714:	10930944 	addi	r2,r2,19493
   20718:	10000005 	stb	zero,0(r2)
   2071c:	e0bfff17 	ldw	r2,-4(fp)
   20720:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
   20724:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
   20728:	10000226 	beq	r2,zero,20734 <_exit+0x34>
    ALT_SIM_FAIL();
   2072c:	002af070 	cmpltui	zero,zero,43969
   20730:	00000106 	br	20738 <_exit+0x38>
  } else {
    ALT_SIM_PASS();
   20734:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
   20738:	003fff06 	br	20738 <__alt_mem_Flash_flash_data+0xf4020738>
