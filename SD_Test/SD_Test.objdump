
SD_Test.elf:     file format elf32-littlenios2
SD_Test.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00000244

Program Header:
    LOAD off    0x00001000 vaddr 0x00000000 paddr 0x00000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00000020 paddr 0x00000020 align 2**12
         filesz 0x000213b8 memsz 0x000213b8 flags r-x
    LOAD off    0x000223d8 vaddr 0x000213d8 paddr 0x000232d0 align 2**12
         filesz 0x00001ef8 memsz 0x00001ef8 flags rw-
    LOAD off    0x000251c8 vaddr 0x000251c8 paddr 0x000251c8 align 2**12
         filesz 0x00000000 memsz 0x000039e8 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00000000  00000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000224  00000020  00000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00020a6c  00000244  00000244  00001244  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000728  00020cb0  00020cb0  00021cb0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001ef8  000213d8  000232d0  000223d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          000039e8  000251c8  000251c8  000251c8  2**2
                  ALLOC, SMALL_DATA
  6 .SDRAM        00000000  00028bb0  00028bb0  000242d0  2**0
                  CONTENTS
  7 .Flash_flash_data 00000000  0c000000  0c000000  000242d0  2**0
                  CONTENTS
  8 .comment      00000023  00000000  00000000  000242d0  2**0
                  CONTENTS, READONLY
  9 .debug_aranges 000011f0  00000000  00000000  000242f8  2**3
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_info   000354f2  00000000  00000000  000254e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 0000c1c2  00000000  00000000  0005a9da  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   00010be9  00000000  00000000  00066b9c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame  000040d0  00000000  00000000  00077788  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00005ef3  00000000  00000000  0007b858  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    0001b65a  00000000  00000000  0008174b  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_alt_sim_info 00000020  00000000  00000000  0009cda8  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 00001a98  00000000  00000000  0009cdc8  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .thread_model 00000006  00000000  00000000  000a491e  2**0
                  CONTENTS, READONLY
 19 .cpu          00000005  00000000  00000000  000a4924  2**0
                  CONTENTS, READONLY
 20 .qsys         00000001  00000000  00000000  000a4929  2**0
                  CONTENTS, READONLY
 21 .simulation_enabled 00000001  00000000  00000000  000a492a  2**0
                  CONTENTS, READONLY
 22 .sysid_hash   00000004  00000000  00000000  000a492b  2**0
                  CONTENTS, READONLY
 23 .sysid_base   00000004  00000000  00000000  000a492f  2**0
                  CONTENTS, READONLY
 24 .sysid_time   00000004  00000000  00000000  000a4933  2**0
                  CONTENTS, READONLY
 25 .stderr_dev   00000009  00000000  00000000  000a4937  2**0
                  CONTENTS, READONLY
 26 .stdin_dev    00000009  00000000  00000000  000a4940  2**0
                  CONTENTS, READONLY
 27 .stdout_dev   00000009  00000000  00000000  000a4949  2**0
                  CONTENTS, READONLY
 28 .sopc_system_name 0000000b  00000000  00000000  000a4952  2**0
                  CONTENTS, READONLY
 29 .quartus_project_dir 0000005e  00000000  00000000  000a495d  2**0
                  CONTENTS, READONLY
 30 .jdi          0000abc5  00000000  00000000  000a49bb  2**0
                  CONTENTS, READONLY
 31 .sopcinfo     001878b7  00000000  00000000  000af580  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00000000 l    d  .entry	00000000 .entry
00000020 l    d  .exceptions	00000000 .exceptions
00000244 l    d  .text	00000000 .text
00020cb0 l    d  .rodata	00000000 .rodata
000213d8 l    d  .rwdata	00000000 .rwdata
000251c8 l    d  .bss	00000000 .bss
00028bb0 l    d  .SDRAM	00000000 .SDRAM
0c000000 l    d  .Flash_flash_data	00000000 .Flash_flash_data
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 C:/Users/rickert/Documents/GitHub/KBS_ESA_PAINGAME/SD_Test_bsp//obj/HAL/src/crt0.o
0000027c l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 hello_ucosii.c
00000000 l    df *ABS*	00000000 bzero.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 putchar.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 sprintf.c
00000000 l    df *ABS*	00000000 strcat.c
00000000 l    df *ABS*	00000000 strcpy.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
00020e26 l     O .rodata	00000010 zeroes.4240
00020e36 l     O .rodata	00000010 blanks.4239
00000000 l    df *ABS*	00000000 vfprintf.c
00020e46 l     O .rodata	00000010 zeroes.4255
00004df4 l     F .text	000000bc __sbprintf
00020e56 l     O .rodata	00000010 blanks.4254
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 dtoa.c
00005004 l     F .text	00000200 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
00006bc0 l     F .text	00000008 __fp_lock
00006bc8 l     F .text	00000008 __fp_unlock
00006bdc l     F .text	0000019c __sinit.part.1
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 impure.c
000213d8 l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 locale.c
0002181c l     O .rwdata	00000020 lc_ctype_charset
000217fc l     O .rwdata	00000020 lc_message_charset
0002183c l     O .rwdata	00000038 lconv
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 mprec.c
00020e88 l     O .rodata	0000000c p05.2710
00000000 l    df *ABS*	00000000 putc.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 s_fpclassify.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 vfprintf.c
00020fac l     O .rodata	00000010 zeroes.4184
00020fbc l     O .rodata	00000010 blanks.4183
00000000 l    df *ABS*	00000000 vfprintf.c
0000b298 l     F .text	000000fc __sprint_r.part.0
00020fdc l     O .rodata	00000010 blanks.4199
00020fcc l     O .rodata	00000010 zeroes.4200
0000c6a0 l     F .text	000000bc __sbprintf
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fputwc.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 wcrtomb.c
00000000 l    df *ABS*	00000000 wctomb_r.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
0000dba4 l     F .text	0000006c udivmodsi4
00000000 l    df *ABS*	00000000 adddf3.c
00000000 l    df *ABS*	00000000 divdf3.c
00000000 l    df *ABS*	00000000 eqdf2.c
00000000 l    df *ABS*	00000000 gedf2.c
00000000 l    df *ABS*	00000000 ledf2.c
00000000 l    df *ABS*	00000000 muldf3.c
00000000 l    df *ABS*	00000000 subdf3.c
00000000 l    df *ABS*	00000000 fixdfsi.c
00000000 l    df *ABS*	00000000 floatsidf.c
00000000 l    df *ABS*	00000000 floatunsidf.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 alt_close.c
000102d0 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
000103f0 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
0001041c l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
0001051c l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
00010610 l     F .text	00000064 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
000106f4 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_read.c
000108ec l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
00023244 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_write.c
00010b48 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_env_lock.c
00023248 l     O .rwdata	00000004 lockid
000251f4 l     O .bss	00000004 locks
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
0002324c l     O .rwdata	00000004 lockid
000251fc l     O .bss	00000004 locks
00000000 l    df *ABS*	00000000 os_core.c
0001257c l     F .text	00000044 OS_InitMisc
000125c0 l     F .text	00000068 OS_InitRdyList
00012720 l     F .text	000000e0 OS_InitTCBList
000124a0 l     F .text	000000dc OS_InitEventList
00012628 l     F .text	0000007c OS_InitTaskIdle
000126a4 l     F .text	0000007c OS_InitTaskStat
00012980 l     F .text	00000070 OS_SchedNew
00000000 l    df *ABS*	00000000 os_dbg.c
00000000 l    df *ABS*	00000000 os_flag.c
00014784 l     F .text	00000110 OS_FlagTaskRdy
000144dc l     F .text	000001c4 OS_FlagBlock
00000000 l    df *ABS*	00000000 os_mem.c
00000000 l    df *ABS*	00000000 os_q.c
00000000 l    df *ABS*	00000000 os_sem.c
00000000 l    df *ABS*	00000000 os_task.c
00000000 l    df *ABS*	00000000 os_time.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
00018c2c l     F .text	00000038 alt_dev_reg
00021e24 l     O .rwdata	0000106c JTAG_UART
00022e90 l     O .rwdata	00000030 AV_Config
00022ec0 l     O .rwdata	00000030 Audio_Subsystem_Audio
00022ef0 l     O .rwdata	0000002c Char_LCD_16x2
00022f1c l     O .rwdata	0000002c IrDA
00022f48 l     O .rwdata	0000002c Expansion_JP5
00022f74 l     O .rwdata	0000002c Green_LEDs
00022fa0 l     O .rwdata	0000002c HEX3_HEX0
00022fcc l     O .rwdata	0000002c HEX7_HEX4
00022ff8 l     O .rwdata	0000002c Pushbuttons
00023024 l     O .rwdata	0000002c Red_LEDs
00023050 l     O .rwdata	0000002c Slider_Switches
0002307c l     O .rwdata	00000038 PS2_Port
000230b4 l     O .rwdata	00000038 PS2_Port_Dual
000230ec l     O .rwdata	0000002c Serial_Port
00023118 l     O .rwdata	00000034 USB
0002314c l     O .rwdata	00000048 VGA_Subsystem_VGA_Char_Buffer
00023194 l     O .rwdata	00000054 VGA_Subsystem_VGA_Pixel_DMA
000231e8 l     O .rwdata	0000002c SD_Card
00000000 l    df *ABS*	00000000 Altera_UP_SD_Card_Avalon_Interface.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
0001d6b8 l     F .text	000002a8 altera_avalon_jtag_uart_irq
0001d960 l     F .text	00000110 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
0001e138 l     F .text	00000078 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 altera_up_avalon_character_lcd.c
00000000 l    df *ABS*	00000000 altera_up_avalon_irda.c
00000000 l    df *ABS*	00000000 altera_up_avalon_ps2.c
00000000 l    df *ABS*	00000000 altera_up_avalon_rs232.c
00000000 l    df *ABS*	00000000 altera_up_avalon_video_character_buffer_with_dma.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
0001f914 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
0001fb80 l     F .text	000000c0 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_register.c
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
0001fe68 l     F .text	00000050 alt_get_errno
0001feb8 l     F .text	000000cc alt_file_locked
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 os_cpu_a.o
00000040 l       *ABS*	00000000 OSCtxSw_SWITCH_PC
00000000 l    df *ABS*	00000000 os_cpu_c.c
00000014 l       *ABS*	00000000 OSTCBNext_OFFSET
00000032 l       *ABS*	00000000 OSTCBPrio_OFFSET
00000000 l       *ABS*	00000000 OSTCBStkPtr_OFFSET
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
00025294 g     O .bss	00000004 alt_instruction_exception_handler
0002525c g     O .bss	00000004 aux_status_register
00000ba8 g     F .text	00000018 putchar
000095a0 g     F .text	00000074 _mprec_log10
0002329a g     O .rwdata	00000002 OSTaskNameSize
0000968c g     F .text	0000008c __any_on
0000cd60 g     F .text	00000054 _isatty_r
00020e94 g     O .rodata	00000028 __mprec_tinytens
00010818 g     F .text	000000d4 alt_main
00000dc8 g     F .text	00000090 strcpy
00000bc0 g     F .text	000000a8 _puts_r
00028ab0 g     O .bss	00000100 alt_irq
0001ecd4 g     F .text	0000005c alt_up_ps2_disable_read_interrupt
0000cdb4 g     F .text	0000005c _lseek_r
00014fe8 g     F .text	000000d0 OS_MemInit
000232d0 g       *ABS*	00000000 __flash_rwdata_start
00018bc8 g     F .text	00000064 OSTimeSet
0001e2a4 g     F .text	0000003c alt_up_character_lcd_send_cmd
0000ee38 g     F .text	00000084 .hidden __eqdf2
000193dc g     F .text	000001ac Check_for_Master_Boot_Record
000111f8 g     F .text	00000610 OSEventPendMulti
00028bb0 g       *ABS*	00000000 __alt_heap_start
000204c4 g     F .text	00000020 OSTaskCreateHook
0001d258 g     F .text	000001bc alt_up_sd_card_fclose
00000b64 g     F .text	0000003c printf
00023272 g     O .rwdata	00000002 OSMboxEn
0001185c g     F .text	0000007c OSIntEnter
0000ce6c g     F .text	0000009c _wcrtomb_r
00009f8c g     F .text	0000005c __sseek
00006f10 g     F .text	00000010 __sinit
0001f65c g     F .text	00000100 alt_up_char_buffer_string
0000c75c g     F .text	00000138 __swbuf_r
0001eaf4 g     F .text	00000034 read_CE_bit
00023282 g     O .rwdata	00000002 OSQEn
000079bc g     F .text	0000007c _setlocale_r
00006d78 g     F .text	00000068 __sfmoreglue
00010ecc g     F .text	000000d0 __malloc_unlock
00020520 g     F .text	0000001c OSTaskStatHook
0001ee78 g     F .text	000000a4 alt_up_ps2_read_data_byte_timeout
0001f36c g     F .text	00000090 alt_up_rs232_read_fd
00025204 g     O .bss	00000001 OSLockNesting
00025280 g     O .bss	00000004 current_sector_modified
000232c0 g     O .rwdata	00000002 OSDataSize
00025205 g     O .bss	00000001 OSRunning
0001f590 g     F .text	000000cc alt_up_char_buffer_draw
0000861c g     F .text	0000015c memmove
00020558 g     F .text	0000001c OSInitHookBegin
000232b8 g     O .rwdata	00000002 OSTmrSize
00006ef8 g     F .text	00000018 _cleanup
00008778 g     F .text	000000a8 _Balloc
0001bd84 g     F .text	000000c4 alt_up_sd_card_is_Present
00019124 g     F .text	0000004c Save_Modified_Sector
00025208 g     O .bss	00000004 OSIdleCtr
0000eebc g     F .text	000000e0 .hidden __gtdf2
00020278 g     F .text	00000020 altera_nios2_gen2_irq_init
00020344 g       .text	00000000 OSStartTsk
00000000  w      *UND*	00000000 __errno
0001e230 g     F .text	00000074 get_DDRAM_addr
00012cb8 g     F .text	000002d4 OS_TCBInit
00000000 g     F .entry	0000001c __reset
00025278 g     O .bss	00000004 fat_partition_size_in_512_byte_sectors
000232be g     O .rwdata	00000002 OSTmrWheelTblSize
00000020 g       *ABS*	00000000 __flash_exceptions_start
0002325e g     O .rwdata	00000002 OSEventSize
0002520c g     O .bss	00000001 OSPrioHighRdy
0000cd08 g     F .text	00000058 _fstat_r
000204e4 g     F .text	00000020 OSTaskDelHook
000251e0 g     O .bss	00000004 errno
00009f08 g     F .text	00000008 __seofread
00020324 g       .text	00000000 OSStartHighRdy
000174cc g     F .text	000001ec OSTaskCreateExt
0000a260 g     F .text	00001038 ___svfiprintf_internal_r
00014028 g     F .text	00000068 OSFlagPendGetFlagsRdy
0002329e g     O .rwdata	00000002 OSTaskStatStkSize
00013118 g     F .text	00000308 OSFlagAccept
000156bc g     F .text	000000b8 OSQFlush
000150b8 g     F .text	00000140 OSQAccept
000251ec g     O .bss	00000004 alt_argv
0002b214 g       *ABS*	00000000 _gp
0001c330 g     F .text	00000384 alt_up_sd_card_fopen
0001beb4 g     F .text	000000d0 alt_up_sd_card_find_first
00017310 g     F .text	000001bc OSTaskCreate
0002526c g     O .bss	00000004 command_argument_register
00016dd0 g     F .text	00000540 OSTaskChangePrio
00025200 g     O .bss	00000004 alt_heapsem
00012f8c g     F .text	0000018c OSDebugInit
000176b8 g     F .text	000003e0 OSTaskDel
00021ca4 g     O .rwdata	00000180 alt_fd_list
00025324 g     O .bss	00000370 OSFlagTbl
00000ba0 g     F .text	00000008 _putchar_r
0001228c g     F .text	000000b4 OS_EventTaskRemove
0001b608 g     F .text	0000012c find_first_empty_record_in_root_directory
0001fac0 g     F .text	00000090 alt_find_dev
000084e4 g     F .text	00000138 memcpy
00023288 g     O .rwdata	00000002 OSRdyTblSize
0001e440 g     F .text	00000050 alt_up_character_lcd_write_fd
0001f75c g     F .text	0000005c alt_up_char_buffer_clear
00006bd0 g     F .text	0000000c _cleanup_r
000100f8 g     F .text	000000d0 .hidden __floatsidf
0001fc40 g     F .text	00000078 alt_io_redirect
0000ef9c g     F .text	000000e0 .hidden __ltdf2
00020cb0 g       *ABS*	00000000 __DTOR_END__
0001e9c0 g     F .text	00000090 alt_up_irda_write_fd
0001f2f8 g     F .text	00000074 alt_up_rs232_read_data
00000c68 g     F .text	00000014 puts
00020868 g     F .text	0000009c alt_exception_cause_generated_bad_addr
00010f9c g     F .text	00000120 OSEventNameGet
0002326c g     O .rwdata	00000002 OSFlagMax
0001b218 g     F .text	000001a4 find_first_empty_cluster
00009dec g     F .text	00000074 __fpclassifyd
000094fc g     F .text	000000a4 __ratio
0001bcc4 g     F .text	000000c0 alt_up_sd_card_open_dev
000118d8 g     F .text	000000f4 OSIntExit
0000c67c g     F .text	00000024 __vfiprintf_internal
000232a6 g     O .rwdata	00000002 OSTCBSize
0002520d g     O .bss	00000001 OSPrioCur
0001e7bc g     F .text	00000040 alt_up_irda_get_used_space_in_read_FIFO
0001dbc4 g     F .text	000002b4 altera_avalon_jtag_uart_read
00000000  w      *UND*	00000000 malloc
00000b38 g     F .text	0000002c _printf_r
0000dcc0 g     F .text	00000008 .hidden __udivsi3
0001056c g     F .text	000000a4 isatty
0002328c g     O .rwdata	00000002 OSStkWidth
00020ee4 g     O .rodata	000000c8 __mprec_tens
00023280 g     O .rwdata	00000002 OSPtrSize
00007a38 g     F .text	0000000c __locale_charset
00023260 g     O .rwdata	00000002 OSEventTblSize
0001e760 g     F .text	0000005c alt_up_irda_disable_read_interrupt
00020298 g       .text	00000000 OSCtxSw
000207dc g     F .text	0000008c alt_icache_flush
000251dc g     O .bss	00000004 __malloc_top_pad
00025210 g     O .bss	00000004 OSTCBList
000251e4 g     O .bss	00000004 alt_fd_list_lock
0002321c g     O .rwdata	00000004 __mb_cur_max
00007a68 g     F .text	0000000c _localeconv_r
00008b84 g     F .text	0000003c __i2b
00007374 g     F .text	000004c0 __sfvwrite_r
0001a530 g     F .text	000000b8 get_dir_divider_location
00025694 g     O .bss	00000c30 OSMemTbl
00025214 g     O .bss	00000001 OSTickStepState
00009e60 g     F .text	00000054 _sbrk_r
0001a204 g     F .text	000000c0 filename_to_upper_case
00023284 g     O .rwdata	00000002 OSQMax
0001c6b4 g     F .text	00000084 alt_up_sd_card_set_attributes
000262c4 g     O .bss	00000800 OSTaskStatStk
00014c18 g     F .text	000000f8 OSMemNameGet
00019588 g     F .text	0000027c Read_File_Record_At_Offset
00023264 g     O .rwdata	00000002 OSFlagEn
0000ce10 g     F .text	0000005c _read_r
000232aa g     O .rwdata	00000002 OSTimeTickHookEn
00015bdc g     F .text	00000168 OSQPost
00014894 g     F .text	000000a0 OS_FlagUnlink
0002323c g     O .rwdata	00000004 alt_max_fd
0001f274 g     F .text	00000044 alt_up_rs232_check_parity
00012850 g     F .text	00000064 OS_MemCopy
000128b4 g     F .text	000000cc OS_Sched
0001adb0 g     F .text	00000468 find_file_in_directory
0000ca24 g     F .text	000000f0 _fclose_r
00014b28 g     F .text	000000f0 OSMemGet
00017d98 g     F .text	000001c0 OSTaskNameSet
0001eb28 g     F .text	00000030 read_num_bytes_available
00006b90 g     F .text	00000030 fflush
000251d8 g     O .bss	00000004 __malloc_max_sbrked_mem
00025218 g     O .bss	00000004 OSCtxSwCtr
0002053c g     F .text	0000001c OSTimeTickHook
0001fcb8 g     F .text	000001b0 alt_irq_register
0002326e g     O .rwdata	00000002 OSFlagNameSize
0001ea90 g     F .text	00000034 read_RI_bit
00000854 g     F .text	00000080 schuifScores
00012340 g     F .text	000000fc OS_EventTaskRemoveMulti
0001be48 g     F .text	0000006c alt_up_sd_card_is_FAT16
0000dcd0 g     F .text	0000089c .hidden __adddf3
00012140 g     F .text	0000014c OS_EventTaskWaitMulti
000092a4 g     F .text	0000011c __b2d
00023286 g     O .rwdata	00000002 OSQSize
0000d614 g     F .text	00000590 .hidden __umoddi3
00010744 g     F .text	000000d4 lseek
000166e0 g     F .text	00000268 OSSemPend
00023214 g     O .rwdata	00000004 _global_impure_ptr
0001a884 g     F .text	0000052c get_home_directory_cluster_for_file
00009884 g     F .text	00000568 _realloc_r
00023270 g     O .rwdata	00000002 OSLowestPrio
00028bb0 g       *ABS*	00000000 __bss_end
000205ac g     F .text	00000020 OSTCBInitHook
000232b6 g     O .rwdata	00000002 OSTmrCfgTicksPerSec
00020174 g     F .text	00000104 alt_tick
000009fc g     F .text	00000018 bzero
00025298 g     O .bss	00000064 highscores
0000d054 g     F .text	000005c0 .hidden __udivdi3
0000cb28 g     F .text	00000184 _fputwc_r
00023258 g     O .rwdata	00000002 OSEventEn
00020ebc g     O .rodata	00000028 __mprec_bigtens
00008968 g     F .text	00000104 __s2b
000232b2 g     O .rwdata	00000002 OSTmrCfgNameSize
000101c8 g     F .text	000000a4 .hidden __floatunsidf
0000904c g     F .text	00000060 __mcmp
00025284 g     O .bss	00000004 current_sector_index
0c000000 g       *ABS*	00000000 __alt_mem_Flash_flash_data
0001eb8c g     F .text	0000002c read_data_byte
00006f30 g     F .text	00000018 __fp_lock_all
000146a0 g     F .text	000000e4 OS_FlagInit
000200dc g     F .text	00000098 alt_alarm_stop
0001eac4 g     F .text	00000030 read_RE_bit
000192fc g     F .text	000000e0 mark_cluster
00023294 g     O .rwdata	00000002 OSTaskIdleStkSize
00025288 g     O .bss	00000004 alt_irq_active
000162c8 g     F .text	000000b0 OSSemAccept
00014e28 g     F .text	000000d8 OSMemPut
00014934 g     F .text	000001f4 OSMemCreate
0002521c g     O .bss	00000004 OSIdleCtrMax
0001e7fc g     F .text	0000003c alt_up_irda_get_available_space_in_write_FIFO
000000fc g     F .exceptions	000000d4 alt_irq_handler
00021c7c g     O .rwdata	00000028 alt_dev_null
000232a8 g     O .rwdata	00000002 OSTicksPerSec
0001b734 g     F .text	00000188 convert_filename_to_name_extension
0001e6d4 g     F .text	00000034 alt_up_character_lcd_cursor_blink_on
00020298 g       .text	00000000 OSIntCtxSw
0001ed30 g     F .text	00000074 alt_up_ps2_write_data_byte
0001f8f8 g     F .text	0000001c alt_dcache_flush_all
00008a6c g     F .text	00000068 __hi0bits
00025258 g     O .bss	00000004 is_sd_card_formated_as_FAT16
00010070 g     F .text	00000088 .hidden __fixdfsi
0001b3bc g     F .text	0000024c find_first_empty_record_in_a_subdirectory
00025220 g     O .bss	00000004 OSTCBFreeList
000232d0 g       *ABS*	00000000 __ram_rwdata_end
00016948 g     F .text	0000016c OSSemPendAbort
00023234 g     O .rwdata	00000008 alt_dev_list
00010b98 g     F .text	000000f8 write
00009718 g     F .text	000000a0 _putc_r
0002527c g     O .bss	00000004 device_pointer
000232ac g     O .rwdata	00000002 OSVersionNbr
000213d8 g       *ABS*	00000000 __ram_rodata_end
0001046c g     F .text	000000b0 fstat
0001f3fc g     F .text	00000094 alt_up_rs232_write_fd
00000000 g       *ABS*	00000000 __alt_mem_SDRAM
0000ef9c g     F .text	000000e0 .hidden __ledf2
00000d40 g     F .text	00000088 strcat
00023254 g     O .rwdata	00000004 OSEndiannessTest
00008dbc g     F .text	00000140 __pow5mult
0000b3ac g     F .text	000012d0 ___vfiprintf_internal_r
000251d0 g     O .bss	00000004 __nlocale_changed
0000dcc8 g     F .text	00000008 .hidden __umodsi3
00023266 g     O .rwdata	00000002 OSFlagGrpSize
000004ac g     F .text	000003a8 sorteer
00028bb0 g       *ABS*	00000000 end
0001f06c g     F .text	00000098 alt_up_ps2_write_fd
0001e838 g     F .text	00000044 alt_up_irda_check_parity
0001f4d0 g     F .text	00000080 alt_up_char_buffer_init
0001d578 g     F .text	00000140 altera_avalon_jtag_uart_init
00012b14 g     F .text	000000dc OS_TaskStat
000001d0 g     F .exceptions	00000074 alt_instruction_exception_entry
00020cb0 g       *ABS*	00000000 __CTOR_LIST__
04000000 g       *ABS*	00000000 __alt_stack_pointer
0001e1b0 g     F .text	00000080 alt_avalon_timer_sc_init
0001026c g     F .text	00000064 .hidden __clzsi2
0001de78 g     F .text	000002c0 altera_avalon_jtag_uart_write
00006f20 g     F .text	00000004 __sfp_lock_acquire
000083fc g     F .text	000000e8 memchr
00012800 g     F .text	00000050 OS_MemClr
0001e354 g     F .text	00000078 alt_up_character_lcd_write
00002e80 g     F .text	00001f50 ___vfprintf_internal_r
00020368 g     F .text	0000015c OSTaskStkInit
00000c7c g     F .text	00000058 _sprintf_r
00007084 g     F .text	000002f0 _free_r
00007a44 g     F .text	00000010 __locale_mb_cur_max
00011e9c g     F .text	00000198 OS_EventTaskRdy
00020ae0 g     F .text	00000194 __call_exitprocs
00025224 g     O .bss	00000001 OSCPUUsage
000251cc g     O .bss	00000004 __mlocale_changed
00023220 g     O .rwdata	00000004 __malloc_sbrk_base
00000244 g     F .text	0000003c _start
0002528c g     O .bss	00000004 _alt_tick_rate
00015774 g     F .text	000002fc OSQPend
000186c4 g     F .text	00000148 OSTimeDly
00000280 g     F .text	0000013c read_file
00008efc g     F .text	00000150 __lshift
00025290 g     O .bss	00000004 _alt_nticks
0001093c g     F .text	000000fc read
00018c98 g     F .text	000003d8 alt_sys_init
0001e58c g     F .text	00000088 alt_up_character_lcd_shift_display
0000a094 g     F .text	000001cc __ssprint_r
000209cc g     F .text	00000114 __register_exitproc
00025225 g     O .bss	00000001 OSTaskCtr
0001ef8c g     F .text	00000054 alt_up_ps2_clear_fifo
0001f238 g     F .text	0000003c alt_up_rs232_get_available_space_in_write_FIFO
0001880c g     F .text	00000168 OSTimeDlyHMSM
00008bc0 g     F .text	000001fc __multiply
0001e614 g     F .text	0000008c alt_up_character_lcd_erase_pos
0001da70 g     F .text	00000068 altera_avalon_jtag_uart_close
000213d8 g       *ABS*	00000000 __ram_rwdata_start
00020cb0 g       *ABS*	00000000 __ram_rodata_start
000252fc g     O .bss	00000028 __malloc_current_mallinfo
0002325a g     O .rwdata	00000002 OSEventMax
000093c0 g     F .text	0000013c __d2b
00016ab4 g     F .text	00000110 OSSemPost
00025254 g     O .bss	00000004 initialized
00011a54 g     F .text	000000d8 OSSchedUnlock
0001d414 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
000206e0 g     F .text	000000fc alt_get_fd
00025228 g     O .bss	00000004 OSMemFreeList
00011b98 g     F .text	000000ac OSStatInit
00028548 g     O .bss	00000014 search_data
00014418 g     F .text	000000c4 OSFlagQuery
00023290 g     O .rwdata	00000002 OSTaskCreateExtEn
0000c90c g     F .text	00000054 _close_r
00020950 g     F .text	0000007c memcmp
00011e80 g     F .text	0000001c OS_Dummy
0001d4d4 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
00028bb0 g       *ABS*	00000000 __alt_stack_base
0001d524 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
0001e708 g     F .text	00000058 alt_up_irda_enable_read_interrupt
00004eb0 g     F .text	00000154 __swsetup_r
00026ac4 g     O .bss	000001e0 OSQTbl
0000e56c g     F .text	000008cc .hidden __divdf3
00006de0 g     F .text	00000118 __sfp
0002855c g     O .bss	00000054 boot_sector_data
00009614 g     F .text	00000078 __copybits
00021874 g     O .rwdata	00000408 __malloc_av_
00006f2c g     F .text	00000004 __sinit_lock_release
0002522c g     O .bss	00000004 OSTCBHighRdy
0000f07c g     F .text	00000724 .hidden __muldf3
00009eb4 g     F .text	00000054 __sread
00025230 g     O .bss	00000004 OSQFreeList
0001f19c g     F .text	0000005c alt_up_rs232_disable_read_interrupt
000205cc g     F .text	00000114 alt_find_file
0001f964 g     F .text	000000a4 alt_dev_llist_insert
00010dac g     F .text	00000120 __malloc_lock
00010a98 g     F .text	000000b0 sbrk
00000ef0 g     F .text	00001f90 ___svfprintf_internal_r
000110bc g     F .text	0000013c OSEventNameSet
00006b34 g     F .text	0000005c _fflush_r
0000c960 g     F .text	000000c4 _calloc_r
00025234 g     O .bss	00000001 OSRdyGrp
000251c8 g       *ABS*	00000000 __bss_start
00000a14 g     F .text	00000124 memset
000008d4 g     F .text	00000128 main
000251f0 g     O .bss	00000004 alt_envp
000251d4 g     O .bss	00000004 __malloc_max_total_mem
0001f550 g     F .text	00000040 alt_up_char_buffer_open_dev
0001d474 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
0000c894 g     F .text	0000001c __swbuf
00021108 g     O .rodata	00000100 OSUnMapTbl
0001c738 g     F .text	00000088 alt_up_sd_card_get_attributes
0002328a g     O .rwdata	00000002 OSSemEn
00019070 g     F .text	000000b4 Write_Sector_Data
0001cb38 g     F .text	00000720 alt_up_sd_card_write
0001e504 g     F .text	00000088 alt_up_character_lcd_shift_cursor
00014090 g     F .text	00000388 OSFlagPost
00009fe8 g     F .text	00000008 __sclose
04000000 g       *ABS*	00000000 __alt_heap_limit
0000cb14 g     F .text	00000014 fclose
00012034 g     F .text	0000010c OS_EventTaskWait
0001ef1c g     F .text	00000070 alt_up_ps2_read_data_byte
00012bf0 g     F .text	000000c8 OS_TaskStatStkChk
00017a98 g     F .text	00000158 OSTaskDelReq
00005204 g     F .text	00001728 _dtoa_r
00007c54 g     F .text	000007a8 _malloc_r
0000cfc8 g     F .text	00000030 __ascii_wctomb
00023240 g     O .rwdata	00000004 alt_errno
00011b2c g     F .text	0000006c OSStart
00010d50 g     F .text	0000005c __env_unlock
00007834 g     F .text	000000c4 _fwalk
00017f58 g     F .text	000001f8 OSTaskResume
00014f00 g     F .text	000000e8 OSMemQuery
0002329c g     O .rwdata	00000002 OSTaskStatEn
0001e87c g     F .text	00000040 alt_up_irda_write_data
00023276 g     O .rwdata	00000002 OSMemMax
00015d44 g     F .text	00000170 OSQPostFront
0001f104 g     F .text	00000040 alt_up_ps2_open_dev
000097b8 g     F .text	000000cc putc
0000dc10 g     F .text	00000054 .hidden __divsi3
00025235 g     O .bss	00000003 OSRdyTbl
00023250 g     O .rwdata	00000002 OSDebugEn
0001e314 g     F .text	00000040 alt_up_character_lcd_open_dev
00006f60 g     F .text	00000124 _malloc_trim_r
0001ec7c g     F .text	00000058 alt_up_ps2_enable_read_interrupt
00020cb0 g       *ABS*	00000000 __CTOR_END__
000003bc g     F .text	000000f0 write_file
00023268 g     O .rwdata	00000002 OSFlagNodeSize
00025260 g     O .bss	00000004 status_register
000232b0 g     O .rwdata	00000002 OSTmrCfgMax
0001e2e0 g     F .text	00000034 alt_up_character_lcd_init
00009ff0 g     F .text	000000a4 strcmp
00025268 g     O .bss	00000004 command_register
000151f8 g     F .text	000001fc OSQCreate
00017bf0 g     F .text	000001a8 OSTaskNameGet
00020cb0 g       *ABS*	00000000 __flash_rodata_start
00015eb4 g     F .text	0000020c OSQPostOpt
00011c44 g     F .text	0000021c OSTimeTick
00023298 g     O .rwdata	00000002 OSTaskMax
00020cb0 g       *ABS*	00000000 __DTOR_LIST__
00016378 g     F .text	00000100 OSSemCreate
000232bc g     O .rwdata	00000002 OSTmrWheelSize
0001f490 g     F .text	00000040 alt_up_rs232_open_dev
0000ee38 g     F .text	00000084 .hidden __nedf2
00023292 g     O .rwdata	00000002 OSTaskDelEn
00016bc4 g     F .text	00000110 OSSemQuery
000153f4 g     F .text	000002c8 OSQDel
00015a70 g     F .text	0000016c OSQPendAbort
00018c64 g     F .text	00000034 alt_irq_init
00010a38 g     F .text	00000060 alt_release_fd
00019248 g     F .text	000000b4 get_cluster_flag
0001eb58 g     F .text	00000034 read_data_valid
00000cd4 g     F .text	0000006c sprintf
0001e6a0 g     F .text	00000034 alt_up_character_lcd_cursor_off
00020fec g     O .rodata	00000100 .hidden __clz_tab
00019804 g     F .text	0000028c Write_File_Record_At_Offset
000251c8 g     O .bss	00000004 _PathLocale
0001ee14 g     F .text	00000064 alt_up_ps2_write_data_byte_with_ack
00020904 g     F .text	00000014 atexit
0000c8b0 g     F .text	0000005c _write_r
000119cc g     F .text	00000088 OSSchedLock
00007a74 g     F .text	0000001c setlocale
00013420 g     F .text	00000128 OSFlagCreate
00019a90 g     F .text	00000688 Check_for_DOS_FAT
0001b8bc g     F .text	000002c4 create_file
00023218 g     O .rwdata	00000004 _impure_ptr
00025264 g     O .bss	00000004 CSD_register_w0
000251e8 g     O .bss	00000004 alt_argc
0000692c g     F .text	00000208 __sflush_r
0001fa64 g     F .text	0000005c _do_dtors
00007a60 g     F .text	00000008 __locale_cjk_lang
00023262 g     O .rwdata	00000002 OSEventMultiEn
00013548 g     F .text	00000270 OSFlagDel
00025238 g     O .bss	00000004 OSEventFreeList
00000020 g       .exceptions	00000000 alt_irq_entry
00009244 g     F .text	00000060 __ulp
00013a38 g     F .text	000005f0 OSFlagPend
000232ae g     O .rwdata	00000002 OSTmrEn
00006f48 g     F .text	00000018 __fp_unlock_all
0002322c g     O .rwdata	00000008 alt_fs_list
0001a2c4 g     F .text	0000026c check_file_name_for_FAT16_compliance
000129f0 g     F .text	00000074 OS_StrCopy
00025270 g     O .bss	00000004 buffer_memory
0001f144 g     F .text	00000058 alt_up_rs232_enable_read_interrupt
0001f2b8 g     F .text	00000040 alt_up_rs232_write_data
00023278 g     O .rwdata	00000002 OSMemNameSize
00020574 g     F .text	0000001c OSInitHookEnd
00000020 g       *ABS*	00000000 __ram_exceptions_start
000232a4 g     O .rwdata	00000002 OSTCBPrioTblMax
00007a90 g     F .text	0000000c localeconv
000232a0 g     O .rwdata	00000002 OSTaskStatStkChkEn
00023274 g     O .rwdata	00000002 OSMemEn
00025274 g     O .bss	00000004 fat_partition_offset_in_512_byte_sectors
0002327e g     O .rwdata	00000002 OSMutexEn
000232d0 g       *ABS*	00000000 _edata
00028bb0 g       *ABS*	00000000 _end
000285b0 g     O .bss	00000500 active_files
0002523c g     O .bss	00000001 OSIntNesting
00000244 g       *ABS*	00000000 __ram_exceptions_end
0001bb80 g     F .text	00000144 copy_file_record_name_to_string
0001dad8 g     F .text	000000ec altera_avalon_jtag_uart_ioctl
00018974 g     F .text	000001f0 OSTimeDlyResume
0001a118 g     F .text	000000ec Look_for_FAT16
000138e8 g     F .text	00000150 OSFlagNameSet
00018150 g     F .text	000001c8 OSTaskStkChk
0002327a g     O .rwdata	00000002 OSMemSize
00009f10 g     F .text	0000007c __swrite
00023224 g     O .rwdata	00000004 __malloc_trim_threshold
00007a54 g     F .text	0000000c __locale_msgcharset
00025240 g     O .bss	00000004 OSTCBCur
00020918 g     F .text	00000038 exit
0001e8bc g     F .text	00000074 alt_up_irda_read_data
0001bf84 g     F .text	000003ac alt_up_sd_card_find_next
0002327c g     O .rwdata	00000002 OSMemTblSize
000078f8 g     F .text	000000c4 _fwalk_reent
0001ebb8 g     F .text	000000c4 alt_up_ps2_init
000090ac g     F .text	00000198 __mdiff
0000dc64 g     F .text	0000005c .hidden __modsi3
00019170 g     F .text	000000d8 Read_Sector_Data
04000000 g       *ABS*	00000000 __alt_data_end
00000020 g     F .exceptions	00000000 alt_exception
00006f24 g     F .text	00000004 __sfp_lock_release
00011808 g     F .text	00000054 OSInit
0001852c g     F .text	0000012c OSTaskQuery
0001e3cc g     F .text	00000074 alt_up_character_lcd_string
0001621c g     F .text	000000ac OS_QInit
00012a64 g     F .text	00000054 OS_StrLen
0001ea50 g     F .text	00000040 alt_up_irda_open_dev
00014d10 g     F .text	00000118 OSMemNameSet
00023296 g     O .rwdata	00000002 OSTaskProfileEn
00025244 g     O .bss	00000004 OSTime
00026ca4 g     O .bss	00000800 OSTaskIdleStk
00020c74 g     F .text	0000003c _exit
0001f7b8 g     F .text	00000140 alt_alarm_start
000137b8 g     F .text	00000130 OSFlagNameGet
00018b64 g     F .text	00000064 OSTimeGet
0001c7c0 g     F .text	00000378 alt_up_sd_card_read
00007a9c g     F .text	000001b8 __smakebuf_r
0001eda4 g     F .text	00000070 alt_up_ps2_wait_for_ack
00000e58 g     F .text	00000098 strlen
00020504 g     F .text	0000001c OSTaskSwHook
0001ff84 g     F .text	00000158 open
000274a4 g     O .bss	00000b40 OSEventTbl
0000eebc g     F .text	000000e0 .hidden __gedf2
00027fe4 g     O .bss	00000510 OSTCBTbl
00016cd4 g     F .text	000000fc OSSemSet
00023228 g     O .rwdata	00000004 __wctomb
0000b394 g     F .text	00000018 __sprint_r
0001fb50 g     F .text	00000030 alt_icache_flush_all
0001e490 g     F .text	00000074 alt_up_character_lcd_set_cursor_pos
000232c4 g     O .rwdata	00000004 alt_priority_mask
00016478 g     F .text	00000268 OSSemDel
00025248 g     O .bss	00000004 OSFlagFreeList
0002325c g     O .rwdata	00000002 OSEventNameSize
00004dd0 g     F .text	00000024 __vfprintf_internal
0002524c g     O .bss	00000001 OSStatRdy
000284f4 g     O .bss	00000054 OSTCBPrioTbl
0000cff8 g     F .text	0000005c _wctomb_r
00010c90 g     F .text	000000c0 __env_lock
0001efe0 g     F .text	0000008c alt_up_ps2_read_fd
000232a2 g     O .rwdata	00000002 OSTaskSwHookEn
0000f7a0 g     F .text	000008d0 .hidden __subdf3
0001e930 g     F .text	00000090 alt_up_irda_read_fd
00008ad4 g     F .text	000000b0 __lo0bits
000232c8 g     O .rwdata	00000008 alt_alarm_list
0002326a g     O .rwdata	00000002 OSFlagWidth
0001fa08 g     F .text	0000005c _do_ctors
0001f1f8 g     F .text	00000040 alt_up_rs232_get_used_space_in_read_FIFO
0000cf08 g     F .text	000000c0 wcrtomb
00010320 g     F .text	000000d0 close
000251f8 g     O .bss	00000004 alt_envsem
00025250 g     O .bss	00000004 OSIdleCtrRun
00011e60 g     F .text	00000020 OSVersion
000232b4 g     O .rwdata	00000002 OSTmrCfgWheelSize
00010674 g     F .text	00000080 alt_load
00018658 g     F .text	0000006c OS_TaskStkClr
0002328e g     O .rwdata	00000002 OSTaskCreateEn
0001a5e8 g     F .text	0000029c match_file_record_to_name_ext
0001243c g     F .text	00000064 OS_EventWaitListInit
0000ccac g     F .text	0000005c fputwc
00020590 g     F .text	0000001c OSTaskIdleHook
00000000  w      *UND*	00000000 free
00006f28 g     F .text	00000004 __sinit_lock_acquire
00008848 g     F .text	00000120 __multadd
00018318 g     F .text	00000214 OSTaskSuspend
00008820 g     F .text	00000028 _Bfree
00012ab8 g     F .text	0000005c OS_TaskIdle
000232ba g     O .rwdata	00000002 OSTmrTblSize
000160c0 g     F .text	0000015c OSQQuery



Disassembly of section .entry:

00000000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && (!defined(ALT_SIM_OPTIMIZE) || defined(NIOS2_ECC_PRESENT))
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
   0:	00840014 	movui	r2,4096
#endif

0:
    initi r2
   4:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
   8:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
   c:	00bffd16 	blt	zero,r2,4 <__alt_mem_Flash_flash_data+0xf4000004>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
  10:	00400034 	movhi	at,0
    ori r1, r1, %lo(_start)
  14:	08409114 	ori	at,at,580
    jmp r1
  18:	0800683a 	jmp	at
  1c:	00000000 	call	0 <__reset>

Disassembly of section .exceptions:

00000020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
  20:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
  24:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
  28:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
  2c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
  30:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
  34:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
  38:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
  3c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
  40:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
  44:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
  48:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
  4c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
  50:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
  54:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
  58:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
  5c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
  60:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
  64:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
  68:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
  6c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  70:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
  74:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
  78:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
  7c:	10000326 	beq	r2,zero,8c <OSCtxSw_SWITCH_PC+0x4c>
        beq   r4, zero, .Lnot_irq
  80:	20000226 	beq	r4,zero,8c <OSCtxSw_SWITCH_PC+0x4c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
  84:	00000fc0 	call	fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
  88:	00000706 	br	a8 <OSCtxSw_SWITCH_PC+0x68>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
  8c:	df401215 	stw	ea,72(sp)
        ldhu.n  r2, 0(r4)
        ldhu.n  r3, 2(r4)
        slli.n  r3, r3, 16
        or.n    r2, r2, r3 /* Instruction that caused exception */
#else
        ldw   r2, -4(ea)   /* Instruction that caused exception */
  90:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
  94:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
  98:	00001d00 	call	1d0 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
  9c:	1000021e 	bne	r2,zero,a8 <OSCtxSw_SWITCH_PC+0x68>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
  a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
  a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
  ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
  b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
  b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
  b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
  bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
  c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
  c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
  c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
  cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
  d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
  d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
  d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
  dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
  e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
  e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
  e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
  ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
  f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
  f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
  f8:	ef80083a 	eret

000000fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
  fc:	defff904 	addi	sp,sp,-28
 100:	dfc00615 	stw	ra,24(sp)
 104:	df000515 	stw	fp,20(sp)
 108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
 10c:	001185c0 	call	1185c <OSIntEnter>
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 110:	0005313a 	rdctl	r2,ipending
 114:	e0bffe15 	stw	r2,-8(fp)

  return active;
 118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 11c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
 120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 124:	00800044 	movi	r2,1
 128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 12c:	e0fffb17 	ldw	r3,-20(fp)
 130:	e0bffc17 	ldw	r2,-16(fp)
 134:	1884703a 	and	r2,r3,r2
 138:	10001526 	beq	r2,zero,190 <alt_irq_handler+0x94>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
 13c:	008000f4 	movhi	r2,3
 140:	10a2ac04 	addi	r2,r2,-30032
 144:	e0fffd17 	ldw	r3,-12(fp)
 148:	180690fa 	slli	r3,r3,3
 14c:	10c5883a 	add	r2,r2,r3
 150:	10c00017 	ldw	r3,0(r2)
 154:	008000f4 	movhi	r2,3
 158:	10a2ac04 	addi	r2,r2,-30032
 15c:	e13ffd17 	ldw	r4,-12(fp)
 160:	200890fa 	slli	r4,r4,3
 164:	21000104 	addi	r4,r4,4
 168:	1105883a 	add	r2,r2,r4
 16c:	10800017 	ldw	r2,0(r2)
 170:	1009883a 	mov	r4,r2
 174:	e17ffd17 	ldw	r5,-12(fp)
 178:	183ee83a 	callr	r3
#endif
        break;
 17c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 180:	0005313a 	rdctl	r2,ipending
 184:	e0bfff15 	stw	r2,-4(fp)

  return active;
 188:	e0bfff17 	ldw	r2,-4(fp)
 18c:	00000706 	br	1ac <alt_irq_handler+0xb0>
      }
      mask <<= 1;
 190:	e0bffc17 	ldw	r2,-16(fp)
 194:	1085883a 	add	r2,r2,r2
 198:	e0bffc15 	stw	r2,-16(fp)
      i++;
 19c:	e0bffd17 	ldw	r2,-12(fp)
 1a0:	10800044 	addi	r2,r2,1
 1a4:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
 1a8:	003fe006 	br	12c <__alt_mem_Flash_flash_data+0xf400012c>

    active = alt_irq_pending ();
 1ac:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
 1b0:	e0bffb17 	ldw	r2,-20(fp)
 1b4:	103fda1e 	bne	r2,zero,120 <__alt_mem_Flash_flash_data+0xf4000120>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
 1b8:	00118d80 	call	118d8 <OSIntExit>
}
 1bc:	e037883a 	mov	sp,fp
 1c0:	dfc00117 	ldw	ra,4(sp)
 1c4:	df000017 	ldw	fp,0(sp)
 1c8:	dec00204 	addi	sp,sp,8
 1cc:	f800283a 	ret

000001d0 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
 1d0:	defffb04 	addi	sp,sp,-20
 1d4:	dfc00415 	stw	ra,16(sp)
 1d8:	df000315 	stw	fp,12(sp)
 1dc:	df000304 	addi	fp,sp,12
 1e0:	e13fff15 	stw	r4,-4(fp)
 * NIOS2_EXCEPTION_CAUSE_NOT_PRESENT. Your handling routine should
 * check the validity of the cause argument before proceeding.
 */
#ifdef NIOS2_HAS_EXTRA_EXCEPTION_INFO
  /* Get exception cause & "badaddr" */
  NIOS2_READ_EXCEPTION(cause);
 1e4:	000531fa 	rdctl	r2,exception
 1e8:	e0bffd15 	stw	r2,-12(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
 1ec:	e0bffd17 	ldw	r2,-12(fp)
 1f0:	10801f0c 	andi	r2,r2,124
 1f4:	1004d0ba 	srli	r2,r2,2
 1f8:	e0bffd15 	stw	r2,-12(fp)
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
 1fc:	0005333a 	rdctl	r2,badaddr
 200:	e0bffe15 	stw	r2,-8(fp)
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
  badaddr = 0;
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
 204:	d0a82017 	ldw	r2,-24448(gp)
 208:	10000726 	beq	r2,zero,228 <alt_instruction_exception_entry+0x58>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
 20c:	d0a82017 	ldw	r2,-24448(gp)
 210:	e0fffd17 	ldw	r3,-12(fp)
 214:	1809883a 	mov	r4,r3
 218:	e17fff17 	ldw	r5,-4(fp)
 21c:	e1bffe17 	ldw	r6,-8(fp)
 220:	103ee83a 	callr	r2
 224:	00000206 	br	230 <alt_instruction_exception_entry+0x60>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
 228:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
 22c:	0005883a 	mov	r2,zero
}
 230:	e037883a 	mov	sp,fp
 234:	dfc00117 	ldw	ra,4(sp)
 238:	df000017 	ldw	fp,0(sp)
 23c:	dec00204 	addi	sp,sp,8
 240:	f800283a 	ret

Disassembly of section .text:

00000244 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
     244:	06c10034 	movhi	sp,1024
    ori sp, sp, %lo(__alt_stack_pointer)
     248:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
     24c:	068000b4 	movhi	gp,2
    ori gp, gp, %lo(_gp)
     250:	d6ac8514 	ori	gp,gp,45588
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
     254:	008000b4 	movhi	r2,2
    ori r2, r2, %lo(__bss_start)
     258:	10947214 	ori	r2,r2,20936

    movhi r3, %hi(__bss_end)
     25c:	00c000b4 	movhi	r3,2
    ori r3, r3, %lo(__bss_end)
     260:	18e2ec14 	ori	r3,r3,35760

    beq r2, r3, 1f
     264:	10c00326 	beq	r2,r3,274 <_start+0x30>

0:
    stw zero, (r2)
     268:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
     26c:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
     270:	10fffd36 	bltu	r2,r3,268 <__alt_mem_Flash_flash_data+0xf4000268>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
     274:	00106740 	call	10674 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
     278:	00108180 	call	10818 <alt_main>

0000027c <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
     27c:	003fff06 	br	27c <__alt_mem_Flash_flash_data+0xf400027c>

00000280 <read_file>:
			{""},
			{""},
};

void read_file()
{
     280:	defff804 	addi	sp,sp,-32
     284:	dfc00715 	stw	ra,28(sp)
     288:	df000615 	stw	fp,24(sp)
     28c:	df000604 	addi	fp,sp,24
	short int Read;
	Read = alt_up_sd_card_fopen("hoi.txt", false);
     290:	010000b4 	movhi	r4,2
     294:	21032c04 	addi	r4,r4,3248
     298:	000b883a 	mov	r5,zero
     29c:	001c3300 	call	1c330 <alt_up_sd_card_fopen>
     2a0:	e0bffd0d 	sth	r2,-12(fp)

	bzero(highscores, 200);
     2a4:	010000b4 	movhi	r4,2
     2a8:	2114a604 	addi	r4,r4,21144
     2ac:	01403204 	movi	r5,200
     2b0:	00009fc0 	call	9fc <bzero>

	int i = 0;
     2b4:	e03ffa15 	stw	zero,-24(fp)
	int k = 0;
     2b8:	e03ffe15 	stw	zero,-8(fp)

	char buffer[1] = "";
     2bc:	e03fff05 	stb	zero,-4(fp)
	short int c = 1;
     2c0:	00800044 	movi	r2,1
     2c4:	e0bffb0d 	sth	r2,-20(fp)

	c = alt_up_sd_card_read(Read);
     2c8:	e0bffd0f 	ldh	r2,-12(fp)
     2cc:	1009883a 	mov	r4,r2
     2d0:	001c7c00 	call	1c7c0 <alt_up_sd_card_read>
     2d4:	e0bffb0d 	sth	r2,-20(fp)

	while (c != -1){
     2d8:	00001b06 	br	348 <read_file+0xc8>
		if(c == '|'){		//check voor komma
     2dc:	e0bffb0f 	ldh	r2,-20(fp)
     2e0:	10801f18 	cmpnei	r2,r2,124
     2e4:	1000041e 	bne	r2,zero,2f8 <read_file+0x78>
			i++;
     2e8:	e0bffa17 	ldw	r2,-24(fp)
     2ec:	10800044 	addi	r2,r2,1
     2f0:	e0bffa15 	stw	r2,-24(fp)
     2f4:	00001006 	br	338 <read_file+0xb8>
		}else{
			sprintf(buffer, "%c", c);
     2f8:	e0bffb0f 	ldh	r2,-20(fp)
     2fc:	e0ffff04 	addi	r3,fp,-4
     300:	1809883a 	mov	r4,r3
     304:	014000b4 	movhi	r5,2
     308:	29432e04 	addi	r5,r5,3256
     30c:	100d883a 	mov	r6,r2
     310:	0000cd40 	call	cd4 <sprintf>
			strcat(highscores[i], buffer);
     314:	e0bffa17 	ldw	r2,-24(fp)
     318:	10c00524 	muli	r3,r2,20
     31c:	008000b4 	movhi	r2,2
     320:	1094a604 	addi	r2,r2,21144
     324:	1887883a 	add	r3,r3,r2
     328:	e0bfff04 	addi	r2,fp,-4
     32c:	1809883a 	mov	r4,r3
     330:	100b883a 	mov	r5,r2
     334:	0000d400 	call	d40 <strcat>
		}
		c = alt_up_sd_card_read(Read);		//lees volgende char
     338:	e0bffd0f 	ldh	r2,-12(fp)
     33c:	1009883a 	mov	r4,r2
     340:	001c7c00 	call	1c7c0 <alt_up_sd_card_read>
     344:	e0bffb0d 	sth	r2,-20(fp)
	char buffer[1] = "";
	short int c = 1;

	c = alt_up_sd_card_read(Read);

	while (c != -1){
     348:	e0bffb0f 	ldh	r2,-20(fp)
     34c:	10bfffd8 	cmpnei	r2,r2,-1
     350:	103fe21e 	bne	r2,zero,2dc <__alt_mem_Flash_flash_data+0xf40002dc>
		}
		c = alt_up_sd_card_read(Read);		//lees volgende char
	}

	int j;
	for(j = 0; j < 5; j++){
     354:	e03ffc15 	stw	zero,-16(fp)
     358:	00000d06 	br	390 <read_file+0x110>
		printf("Number is : %d data :%s\n",j , highscores[j]);
     35c:	e0bffc17 	ldw	r2,-16(fp)
     360:	10c00524 	muli	r3,r2,20
     364:	008000b4 	movhi	r2,2
     368:	1094a604 	addi	r2,r2,21144
     36c:	1885883a 	add	r2,r3,r2
     370:	010000b4 	movhi	r4,2
     374:	21032f04 	addi	r4,r4,3260
     378:	e17ffc17 	ldw	r5,-16(fp)
     37c:	100d883a 	mov	r6,r2
     380:	0000b640 	call	b64 <printf>
		}
		c = alt_up_sd_card_read(Read);		//lees volgende char
	}

	int j;
	for(j = 0; j < 5; j++){
     384:	e0bffc17 	ldw	r2,-16(fp)
     388:	10800044 	addi	r2,r2,1
     38c:	e0bffc15 	stw	r2,-16(fp)
     390:	e0bffc17 	ldw	r2,-16(fp)
     394:	10800150 	cmplti	r2,r2,5
     398:	103ff01e 	bne	r2,zero,35c <__alt_mem_Flash_flash_data+0xf400035c>
		printf("Number is : %d data :%s\n",j , highscores[j]);
	}

	alt_up_sd_card_fclose(Read);						//sluit het bestand
     39c:	e0bffd0f 	ldh	r2,-12(fp)
     3a0:	1009883a 	mov	r4,r2
     3a4:	001d2580 	call	1d258 <alt_up_sd_card_fclose>
}
     3a8:	e037883a 	mov	sp,fp
     3ac:	dfc00117 	ldw	ra,4(sp)
     3b0:	df000017 	ldw	fp,0(sp)
     3b4:	dec00204 	addi	sp,sp,8
     3b8:	f800283a 	ret

000003bc <write_file>:

void write_file(char input[]){
     3bc:	defffb04 	addi	sp,sp,-20
     3c0:	dfc00415 	stw	ra,16(sp)
     3c4:	df000315 	stw	fp,12(sp)
     3c8:	df000304 	addi	fp,sp,12
     3cc:	e13fff15 	stw	r4,-4(fp)
	short int Write;
	Write = alt_up_sd_card_fopen("hoi.txt", false);
     3d0:	010000b4 	movhi	r4,2
     3d4:	21032c04 	addi	r4,r4,3248
     3d8:	000b883a 	mov	r5,zero
     3dc:	001c3300 	call	1c330 <alt_up_sd_card_fopen>
     3e0:	e0bffe0d 	sth	r2,-8(fp)
	int i = 0;
     3e4:	e03ffd15 	stw	zero,-12(fp)
	bool writing;
	if(Write < 0){
     3e8:	e0bffe0f 	ldh	r2,-8(fp)
     3ec:	1000040e 	bge	r2,zero,400 <write_file+0x44>
		printf("Can't open\n");
     3f0:	010000b4 	movhi	r4,2
     3f4:	21033604 	addi	r4,r4,3288
     3f8:	0000c680 	call	c68 <puts>
     3fc:	00002606 	br	498 <write_file+0xdc>
	}else{
		while(input[i] != '\0'){
     400:	00001706 	br	460 <write_file+0xa4>
			writing = alt_up_sd_card_write(Write, input[i]);
     404:	e13ffe0f 	ldh	r4,-8(fp)
     408:	e0bffd17 	ldw	r2,-12(fp)
     40c:	e0ffff17 	ldw	r3,-4(fp)
     410:	1885883a 	add	r2,r3,r2
     414:	10800003 	ldbu	r2,0(r2)
     418:	10803fcc 	andi	r2,r2,255
     41c:	1080201c 	xori	r2,r2,128
     420:	10bfe004 	addi	r2,r2,-128
     424:	100b883a 	mov	r5,r2
     428:	001cb380 	call	1cb38 <alt_up_sd_card_write>
     42c:	e0bffe85 	stb	r2,-6(fp)
			printf("%c", input[i]);
     430:	e0bffd17 	ldw	r2,-12(fp)
     434:	e0ffff17 	ldw	r3,-4(fp)
     438:	1885883a 	add	r2,r3,r2
     43c:	10800003 	ldbu	r2,0(r2)
     440:	10803fcc 	andi	r2,r2,255
     444:	1080201c 	xori	r2,r2,128
     448:	10bfe004 	addi	r2,r2,-128
     44c:	1009883a 	mov	r4,r2
     450:	0000ba80 	call	ba8 <putchar>
			i++;
     454:	e0bffd17 	ldw	r2,-12(fp)
     458:	10800044 	addi	r2,r2,1
     45c:	e0bffd15 	stw	r2,-12(fp)
	int i = 0;
	bool writing;
	if(Write < 0){
		printf("Can't open\n");
	}else{
		while(input[i] != '\0'){
     460:	e0bffd17 	ldw	r2,-12(fp)
     464:	e0ffff17 	ldw	r3,-4(fp)
     468:	1885883a 	add	r2,r3,r2
     46c:	10800003 	ldbu	r2,0(r2)
     470:	10803fcc 	andi	r2,r2,255
     474:	1080201c 	xori	r2,r2,128
     478:	10bfe004 	addi	r2,r2,-128
     47c:	103fe11e 	bne	r2,zero,404 <__alt_mem_Flash_flash_data+0xf4000404>
			writing = alt_up_sd_card_write(Write, input[i]);
			printf("%c", input[i]);
			i++;
		}
		alt_up_sd_card_fclose(Write);
     480:	e0bffe0f 	ldh	r2,-8(fp)
     484:	1009883a 	mov	r4,r2
     488:	001d2580 	call	1d258 <alt_up_sd_card_fclose>
		printf("\nFile is geschreven\n");
     48c:	010000b4 	movhi	r4,2
     490:	21033904 	addi	r4,r4,3300
     494:	0000c680 	call	c68 <puts>
	}

}
     498:	e037883a 	mov	sp,fp
     49c:	dfc00117 	ldw	ra,4(sp)
     4a0:	df000017 	ldw	fp,0(sp)
     4a4:	dec00204 	addi	sp,sp,8
     4a8:	f800283a 	ret

000004ac <sorteer>:

void sorteer(){
     4ac:	deffe004 	addi	sp,sp,-128
     4b0:	dfc01f15 	stw	ra,124(sp)
     4b4:	df001e15 	stw	fp,120(sp)
     4b8:	dc001d15 	stw	r16,116(sp)
     4bc:	df001e04 	addi	fp,sp,120
	int score3 = 86;
     4c0:	00801584 	movi	r2,86
     4c4:	e0bfe715 	stw	r2,-100(fp)
	int i, j, k, l, o;
	int hoogste;

	char letter1, letter2, letter3;
	char letters[4] = {'B','A','C'};
     4c8:	e03fe915 	stw	zero,-92(fp)
     4cc:	00801084 	movi	r2,66
     4d0:	e0bfe905 	stb	r2,-92(fp)
     4d4:	00801044 	movi	r2,65
     4d8:	e0bfe945 	stb	r2,-91(fp)
     4dc:	008010c4 	movi	r2,67
     4e0:	e0bfe985 	stb	r2,-90(fp)
	char cijfers[4];

	if(score3 < 100){
     4e4:	e0bfe717 	ldw	r2,-100(fp)
     4e8:	10801908 	cmpgei	r2,r2,100
     4ec:	10000c1e 	bne	r2,zero,520 <sorteer+0x74>
		cijfers[0] = 0;
     4f0:	e03fea05 	stb	zero,-88(fp)
		cijfers[1] = score3 / 10;
     4f4:	e0ffe717 	ldw	r3,-100(fp)
     4f8:	00800284 	movi	r2,10
     4fc:	1885283a 	div	r2,r3,r2
     500:	e0bfea45 	stb	r2,-87(fp)
		cijfers[2] = score3 %10;
     504:	e0bfe717 	ldw	r2,-100(fp)
     508:	00c00284 	movi	r3,10
     50c:	10c7283a 	div	r3,r2,r3
     510:	18c002a4 	muli	r3,r3,10
     514:	10c5c83a 	sub	r2,r2,r3
     518:	e0bfea85 	stb	r2,-86(fp)
     51c:	00001d06 	br	594 <sorteer+0xe8>
	}else if(score3 < 10){
     520:	e0bfe717 	ldw	r2,-100(fp)
     524:	10800288 	cmpgei	r2,r2,10
     528:	1000051e 	bne	r2,zero,540 <sorteer+0x94>
		cijfers[0] = 0;
     52c:	e03fea05 	stb	zero,-88(fp)
		cijfers[1] = 0;
     530:	e03fea45 	stb	zero,-87(fp)
		cijfers[2] = score3;
     534:	e0bfe717 	ldw	r2,-100(fp)
     538:	e0bfea85 	stb	r2,-86(fp)
     53c:	00001506 	br	594 <sorteer+0xe8>
	}else if(score3 > 100){
     540:	e0bfe717 	ldw	r2,-100(fp)
     544:	10801950 	cmplti	r2,r2,101
     548:	1000121e 	bne	r2,zero,594 <sorteer+0xe8>
		cijfers[0] = score3 /100;
     54c:	e0ffe717 	ldw	r3,-100(fp)
     550:	00801904 	movi	r2,100
     554:	1885283a 	div	r2,r3,r2
     558:	e0bfea05 	stb	r2,-88(fp)
		cijfers[1] = score3 /10 %10;
     55c:	e0ffe717 	ldw	r3,-100(fp)
     560:	00800284 	movi	r2,10
     564:	1885283a 	div	r2,r3,r2
     568:	00c00284 	movi	r3,10
     56c:	10c7283a 	div	r3,r2,r3
     570:	18c002a4 	muli	r3,r3,10
     574:	10c5c83a 	sub	r2,r2,r3
     578:	e0bfea45 	stb	r2,-87(fp)
		cijfers[2] = score3 %10;
     57c:	e0bfe717 	ldw	r2,-100(fp)
     580:	00c00284 	movi	r3,10
     584:	10c7283a 	div	r3,r2,r3
     588:	18c002a4 	muli	r3,r3,10
     58c:	10c5c83a 	sub	r2,r2,r3
     590:	e0bfea85 	stb	r2,-86(fp)
	}


	char buffer[30] = "";
     594:	e03feb15 	stw	zero,-84(fp)
     598:	e03fec15 	stw	zero,-80(fp)
     59c:	e03fed15 	stw	zero,-76(fp)
     5a0:	e03fee15 	stw	zero,-72(fp)
     5a4:	e03fef15 	stw	zero,-68(fp)
     5a8:	e03ff015 	stw	zero,-64(fp)
     5ac:	e03ff115 	stw	zero,-60(fp)
     5b0:	e03ff20d 	sth	zero,-56(fp)
	char input[50] = "";
     5b4:	e03ff28d 	sth	zero,-54(fp)
     5b8:	e03ff30d 	sth	zero,-52(fp)
     5bc:	e0fff384 	addi	r3,fp,-50
     5c0:	00800b84 	movi	r2,46
     5c4:	1809883a 	mov	r4,r3
     5c8:	000b883a 	mov	r5,zero
     5cc:	100d883a 	mov	r6,r2
     5d0:	0000a140 	call	a14 <memset>

	for(i = 0; i < 5; i++){
     5d4:	e03fe215 	stw	zero,-120(fp)
     5d8:	00009406 	br	82c <sorteer+0x380>
		hoogste = ((highscores[i][4] - '0') *100) +
     5dc:	008000b4 	movhi	r2,2
     5e0:	1094a604 	addi	r2,r2,21144
     5e4:	e0ffe217 	ldw	r3,-120(fp)
     5e8:	18c00524 	muli	r3,r3,20
     5ec:	18c00104 	addi	r3,r3,4
     5f0:	10c5883a 	add	r2,r2,r3
     5f4:	10800003 	ldbu	r2,0(r2)
     5f8:	10803fcc 	andi	r2,r2,255
     5fc:	1080201c 	xori	r2,r2,128
     600:	10bfe004 	addi	r2,r2,-128
     604:	10bff404 	addi	r2,r2,-48
     608:	10c01924 	muli	r3,r2,100
				   ((highscores[i][5] - '0') *10) +
     60c:	008000b4 	movhi	r2,2
     610:	1094a604 	addi	r2,r2,21144
     614:	e13fe217 	ldw	r4,-120(fp)
     618:	21000524 	muli	r4,r4,20
     61c:	21000144 	addi	r4,r4,5
     620:	1105883a 	add	r2,r2,r4
     624:	10800003 	ldbu	r2,0(r2)
     628:	10803fcc 	andi	r2,r2,255
     62c:	1080201c 	xori	r2,r2,128
     630:	10bfe004 	addi	r2,r2,-128
     634:	10bff404 	addi	r2,r2,-48
     638:	108002a4 	muli	r2,r2,10

	char buffer[30] = "";
	char input[50] = "";

	for(i = 0; i < 5; i++){
		hoogste = ((highscores[i][4] - '0') *100) +
     63c:	1887883a 	add	r3,r3,r2
				   ((highscores[i][5] - '0') *10) +
				   (highscores[i][6] - '0');
     640:	008000b4 	movhi	r2,2
     644:	1094a604 	addi	r2,r2,21144
     648:	e13fe217 	ldw	r4,-120(fp)
     64c:	21000524 	muli	r4,r4,20
     650:	21000184 	addi	r4,r4,6
     654:	1105883a 	add	r2,r2,r4
     658:	10800003 	ldbu	r2,0(r2)
     65c:	10803fcc 	andi	r2,r2,255
     660:	1080201c 	xori	r2,r2,128
     664:	10bfe004 	addi	r2,r2,-128
     668:	10bff404 	addi	r2,r2,-48

	char buffer[30] = "";
	char input[50] = "";

	for(i = 0; i < 5; i++){
		hoogste = ((highscores[i][4] - '0') *100) +
     66c:	1885883a 	add	r2,r3,r2
     670:	e0bfe815 	stw	r2,-96(fp)
				   ((highscores[i][5] - '0') *10) +
				   (highscores[i][6] - '0');
		if(hoogste < score3){
     674:	e0ffe817 	ldw	r3,-96(fp)
     678:	e0bfe717 	ldw	r2,-100(fp)
     67c:	1880650e 	bge	r3,r2,814 <sorteer+0x368>

			schuifScores(i);
     680:	e13fe217 	ldw	r4,-120(fp)
     684:	00008540 	call	854 <schuifScores>
			printf("score = hoger dan %de score\n", i);
     688:	010000b4 	movhi	r4,2
     68c:	21033e04 	addi	r4,r4,3320
     690:	e17fe217 	ldw	r5,-120(fp)
     694:	0000b640 	call	b64 <printf>
			for(j = 0; j < 3; j++){
     698:	e03fe315 	stw	zero,-116(fp)
     69c:	00000b06 	br	6cc <sorteer+0x220>
				buffer[j] = letters[j];
     6a0:	e0ffe904 	addi	r3,fp,-92
     6a4:	e0bfe317 	ldw	r2,-116(fp)
     6a8:	1885883a 	add	r2,r3,r2
     6ac:	10c00003 	ldbu	r3,0(r2)
     6b0:	e13feb04 	addi	r4,fp,-84
     6b4:	e0bfe317 	ldw	r2,-116(fp)
     6b8:	2085883a 	add	r2,r4,r2
     6bc:	10c00005 	stb	r3,0(r2)
				   (highscores[i][6] - '0');
		if(hoogste < score3){

			schuifScores(i);
			printf("score = hoger dan %de score\n", i);
			for(j = 0; j < 3; j++){
     6c0:	e0bfe317 	ldw	r2,-116(fp)
     6c4:	10800044 	addi	r2,r2,1
     6c8:	e0bfe315 	stw	r2,-116(fp)
     6cc:	e0bfe317 	ldw	r2,-116(fp)
     6d0:	108000d0 	cmplti	r2,r2,3
     6d4:	103ff21e 	bne	r2,zero,6a0 <__alt_mem_Flash_flash_data+0xf40006a0>
				buffer[j] = letters[j];
			}
			buffer[3] = ' ';
     6d8:	00800804 	movi	r2,32
     6dc:	e0bfebc5 	stb	r2,-81(fp)
			for(k = 4; k < 7; k++){
     6e0:	00800104 	movi	r2,4
     6e4:	e0bfe415 	stw	r2,-112(fp)
     6e8:	00000e06 	br	724 <sorteer+0x278>
				buffer[k] = cijfers[k - 4] + '0';
     6ec:	e0bfe417 	ldw	r2,-112(fp)
     6f0:	10bfff04 	addi	r2,r2,-4
     6f4:	e0ffea04 	addi	r3,fp,-88
     6f8:	1885883a 	add	r2,r3,r2
     6fc:	10800003 	ldbu	r2,0(r2)
     700:	10800c04 	addi	r2,r2,48
     704:	1009883a 	mov	r4,r2
     708:	e0ffeb04 	addi	r3,fp,-84
     70c:	e0bfe417 	ldw	r2,-112(fp)
     710:	1885883a 	add	r2,r3,r2
     714:	11000005 	stb	r4,0(r2)
			printf("score = hoger dan %de score\n", i);
			for(j = 0; j < 3; j++){
				buffer[j] = letters[j];
			}
			buffer[3] = ' ';
			for(k = 4; k < 7; k++){
     718:	e0bfe417 	ldw	r2,-112(fp)
     71c:	10800044 	addi	r2,r2,1
     720:	e0bfe415 	stw	r2,-112(fp)
     724:	e0bfe417 	ldw	r2,-112(fp)
     728:	108001d0 	cmplti	r2,r2,7
     72c:	103fef1e 	bne	r2,zero,6ec <__alt_mem_Flash_flash_data+0xf40006ec>
				buffer[k] = cijfers[k - 4] + '0';
			}

			for(l = 0; l < 8; l++){
     730:	e03fe515 	stw	zero,-108(fp)
     734:	00000f06 	br	774 <sorteer+0x2c8>
				highscores[i][l] = buffer[l];
     738:	e0ffeb04 	addi	r3,fp,-84
     73c:	e0bfe517 	ldw	r2,-108(fp)
     740:	1885883a 	add	r2,r3,r2
     744:	10c00003 	ldbu	r3,0(r2)
     748:	008000b4 	movhi	r2,2
     74c:	1094a604 	addi	r2,r2,21144
     750:	e13fe217 	ldw	r4,-120(fp)
     754:	21400524 	muli	r5,r4,20
     758:	e13fe517 	ldw	r4,-108(fp)
     75c:	2909883a 	add	r4,r5,r4
     760:	1105883a 	add	r2,r2,r4
     764:	10c00005 	stb	r3,0(r2)
			buffer[3] = ' ';
			for(k = 4; k < 7; k++){
				buffer[k] = cijfers[k - 4] + '0';
			}

			for(l = 0; l < 8; l++){
     768:	e0bfe517 	ldw	r2,-108(fp)
     76c:	10800044 	addi	r2,r2,1
     770:	e0bfe515 	stw	r2,-108(fp)
     774:	e0bfe517 	ldw	r2,-108(fp)
     778:	10800210 	cmplti	r2,r2,8
     77c:	103fee1e 	bne	r2,zero,738 <__alt_mem_Flash_flash_data+0xf4000738>
				highscores[i][l] = buffer[l];
			}

			for(o = 0; o <5; o++){
     780:	e03fe615 	stw	zero,-104(fp)
     784:	00001706 	br	7e4 <sorteer+0x338>
				strcat(highscores[o], "|");
     788:	e0bfe617 	ldw	r2,-104(fp)
     78c:	10c00524 	muli	r3,r2,20
     790:	008000b4 	movhi	r2,2
     794:	1094a604 	addi	r2,r2,21144
     798:	18a1883a 	add	r16,r3,r2
     79c:	8009883a 	mov	r4,r16
     7a0:	0000e580 	call	e58 <strlen>
     7a4:	8085883a 	add	r2,r16,r2
     7a8:	00c01f04 	movi	r3,124
     7ac:	10c00005 	stb	r3,0(r2)
     7b0:	10000045 	stb	zero,1(r2)
				strcat(input, highscores[o]);
     7b4:	e0bfe617 	ldw	r2,-104(fp)
     7b8:	10c00524 	muli	r3,r2,20
     7bc:	008000b4 	movhi	r2,2
     7c0:	1094a604 	addi	r2,r2,21144
     7c4:	1885883a 	add	r2,r3,r2
     7c8:	e0fff284 	addi	r3,fp,-54
     7cc:	1809883a 	mov	r4,r3
     7d0:	100b883a 	mov	r5,r2
     7d4:	0000d400 	call	d40 <strcat>

			for(l = 0; l < 8; l++){
				highscores[i][l] = buffer[l];
			}

			for(o = 0; o <5; o++){
     7d8:	e0bfe617 	ldw	r2,-104(fp)
     7dc:	10800044 	addi	r2,r2,1
     7e0:	e0bfe615 	stw	r2,-104(fp)
     7e4:	e0bfe617 	ldw	r2,-104(fp)
     7e8:	10800150 	cmplti	r2,r2,5
     7ec:	103fe61e 	bne	r2,zero,788 <__alt_mem_Flash_flash_data+0xf4000788>
				strcat(highscores[o], "|");
				strcat(input, highscores[o]);
			}

			printf("%s\nde uiteindelijke string!\n", input);
     7f0:	e0bff284 	addi	r2,fp,-54
     7f4:	010000b4 	movhi	r4,2
     7f8:	21034604 	addi	r4,r4,3352
     7fc:	100b883a 	mov	r5,r2
     800:	0000b640 	call	b64 <printf>
			//[i] = buffer;

			write_file(input);
     804:	e0bff284 	addi	r2,fp,-54
     808:	1009883a 	mov	r4,r2
     80c:	00003bc0 	call	3bc <write_file>
			break;
     810:	00000906 	br	838 <sorteer+0x38c>
		}

		else{
			printf("score is niet hoger\n");
     814:	010000b4 	movhi	r4,2
     818:	21034e04 	addi	r4,r4,3384
     81c:	0000c680 	call	c68 <puts>


	char buffer[30] = "";
	char input[50] = "";

	for(i = 0; i < 5; i++){
     820:	e0bfe217 	ldw	r2,-120(fp)
     824:	10800044 	addi	r2,r2,1
     828:	e0bfe215 	stw	r2,-120(fp)
     82c:	e0bfe217 	ldw	r2,-120(fp)
     830:	10800150 	cmplti	r2,r2,5
     834:	103f691e 	bne	r2,zero,5dc <__alt_mem_Flash_flash_data+0xf40005dc>
			printf("score is niet hoger\n");
		}


	}
	read_file();
     838:	00002800 	call	280 <read_file>

}
     83c:	e6ffff04 	addi	sp,fp,-4
     840:	dfc00217 	ldw	ra,8(sp)
     844:	df000117 	ldw	fp,4(sp)
     848:	dc000017 	ldw	r16,0(sp)
     84c:	dec00304 	addi	sp,sp,12
     850:	f800283a 	ret

00000854 <schuifScores>:

void schuifScores(int nummer){
     854:	defffc04 	addi	sp,sp,-16
     858:	dfc00315 	stw	ra,12(sp)
     85c:	df000215 	stw	fp,8(sp)
     860:	df000204 	addi	fp,sp,8
     864:	e13fff15 	stw	r4,-4(fp)
	int i;

	for(i = 5; i > nummer; i--){
     868:	00800144 	movi	r2,5
     86c:	e0bffe15 	stw	r2,-8(fp)
     870:	00001006 	br	8b4 <schuifScores+0x60>
		strcpy(highscores[i], highscores[i-1]);
     874:	e0bffe17 	ldw	r2,-8(fp)
     878:	10c00524 	muli	r3,r2,20
     87c:	008000b4 	movhi	r2,2
     880:	1094a604 	addi	r2,r2,21144
     884:	1889883a 	add	r4,r3,r2
     888:	e0bffe17 	ldw	r2,-8(fp)
     88c:	10bfffc4 	addi	r2,r2,-1
     890:	10c00524 	muli	r3,r2,20
     894:	008000b4 	movhi	r2,2
     898:	1094a604 	addi	r2,r2,21144
     89c:	1885883a 	add	r2,r3,r2
     8a0:	100b883a 	mov	r5,r2
     8a4:	0000dc80 	call	dc8 <strcpy>
}

void schuifScores(int nummer){
	int i;

	for(i = 5; i > nummer; i--){
     8a8:	e0bffe17 	ldw	r2,-8(fp)
     8ac:	10bfffc4 	addi	r2,r2,-1
     8b0:	e0bffe15 	stw	r2,-8(fp)
     8b4:	e0bffe17 	ldw	r2,-8(fp)
     8b8:	e0ffff17 	ldw	r3,-4(fp)
     8bc:	18bfed16 	blt	r3,r2,874 <__alt_mem_Flash_flash_data+0xf4000874>
		strcpy(highscores[i], highscores[i-1]);
	}

}
     8c0:	e037883a 	mov	sp,fp
     8c4:	dfc00117 	ldw	ra,4(sp)
     8c8:	df000017 	ldw	fp,0(sp)
     8cc:	dec00204 	addi	sp,sp,8
     8d0:	f800283a 	ret

000008d4 <main>:


int main (void){
     8d4:	defff004 	addi	sp,sp,-64
     8d8:	dfc00f15 	stw	ra,60(sp)
     8dc:	df000e15 	stw	fp,56(sp)
     8e0:	df000e04 	addi	fp,sp,56

	alt_up_sd_card_dev * sd_card;
	sd_card = alt_up_sd_card_open_dev("/dev/SD_Card");
     8e4:	010000b4 	movhi	r4,2
     8e8:	21035304 	addi	r4,r4,3404
     8ec:	001bcc40 	call	1bcc4 <alt_up_sd_card_open_dev>
     8f0:	e0bff215 	stw	r2,-56(fp)

 	 if (sd_card!=NULL){
     8f4:	e0bff217 	ldw	r2,-56(fp)
     8f8:	10003a26 	beq	r2,zero,9e4 <main+0x110>
		if (alt_up_sd_card_is_Present()){
     8fc:	001bd840 	call	1bd84 <alt_up_sd_card_is_Present>
     900:	10803fcc 	andi	r2,r2,255
     904:	10000726 	beq	r2,zero,924 <main+0x50>
			printf("An SD Card was found!\n");
     908:	010000b4 	movhi	r4,2
     90c:	21035704 	addi	r4,r4,3420
     910:	0000c680 	call	c68 <puts>
		else {
			printf("No SD Card Found. \n Exiting the program.");
			return -1;
		}

 		if (alt_up_sd_card_is_FAT16()){
     914:	001be480 	call	1be48 <alt_up_sd_card_is_FAT16>
     918:	10803fcc 	andi	r2,r2,255
     91c:	10002c26 	beq	r2,zero,9d0 <main+0xfc>
     920:	00000506 	br	938 <main+0x64>
		if (alt_up_sd_card_is_Present()){
			printf("An SD Card was found!\n");

		}
		else {
			printf("No SD Card Found. \n Exiting the program.");
     924:	010000b4 	movhi	r4,2
     928:	21035d04 	addi	r4,r4,3444
     92c:	0000b640 	call	b64 <printf>
			return -1;
     930:	00bfffc4 	movi	r2,-1
     934:	00002c06 	br	9e8 <main+0x114>
		}

 		if (alt_up_sd_card_is_FAT16()){
			printf("FAT-16 partiton found!\n");
     938:	010000b4 	movhi	r4,2
     93c:	21036804 	addi	r4,r4,3488
     940:	0000c680 	call	c68 <puts>
			return -1;
		}


 		char input[50];
 		strcpy(input, "HOI 125|MIK 100|GAY 075|PIT 002|KUT 001|");
     944:	e0bff304 	addi	r2,fp,-52
     948:	00c81274 	movhi	r3,8265
     94c:	18d3d204 	addi	r3,r3,20296
     950:	10c00015 	stw	r3,0(r2)
     954:	00df0d74 	movhi	r3,31797
     958:	18cc8c44 	addi	r3,r3,12849
     95c:	10c00115 	stw	r3,4(r2)
     960:	00c812f4 	movhi	r3,8267
     964:	18d25344 	addi	r3,r3,18765
     968:	10c00215 	stw	r3,8(r2)
     96c:	00df0c34 	movhi	r3,31792
     970:	18cc0c44 	addi	r3,r3,12337
     974:	10c00315 	stw	r3,12(r2)
     978:	00c81674 	movhi	r3,8281
     97c:	18d051c4 	addi	r3,r3,16711
     980:	10c00415 	stw	r3,16(r2)
     984:	00df0d74 	movhi	r3,31797
     988:	18cdcc04 	addi	r3,r3,14128
     98c:	10c00515 	stw	r3,20(r2)
     990:	00c81534 	movhi	r3,8276
     994:	18d25404 	addi	r3,r3,18768
     998:	10c00615 	stw	r3,24(r2)
     99c:	00df0cb4 	movhi	r3,31794
     9a0:	18cc0c04 	addi	r3,r3,12336
     9a4:	10c00715 	stw	r3,28(r2)
     9a8:	00c81534 	movhi	r3,8276
     9ac:	18d552c4 	addi	r3,r3,21835
     9b0:	10c00815 	stw	r3,32(r2)
     9b4:	00df0c74 	movhi	r3,31793
     9b8:	18cc0c04 	addi	r3,r3,12336
     9bc:	10c00915 	stw	r3,36(r2)
     9c0:	10000a05 	stb	zero,40(r2)

// 		read_file();
//
 		//write_file(input);

 		read_file();
     9c4:	00002800 	call	280 <read_file>

 		sorteer();
     9c8:	00004ac0 	call	4ac <sorteer>
     9cc:	00000506 	br	9e4 <main+0x110>

 		if (alt_up_sd_card_is_FAT16()){
			printf("FAT-16 partiton found!\n");
		}
		else{
			printf("No FAT-16 partition found - Exiting!\n");
     9d0:	010000b4 	movhi	r4,2
     9d4:	21036e04 	addi	r4,r4,3512
     9d8:	0000c680 	call	c68 <puts>
			return -1;
     9dc:	00bfffc4 	movi	r2,-1
     9e0:	00000106 	br	9e8 <main+0x114>
 		read_file();

 		sorteer();
	}

	return 0;
     9e4:	0005883a 	mov	r2,zero
}
     9e8:	e037883a 	mov	sp,fp
     9ec:	dfc00117 	ldw	ra,4(sp)
     9f0:	df000017 	ldw	fp,0(sp)
     9f4:	dec00204 	addi	sp,sp,8
     9f8:	f800283a 	ret

000009fc <bzero>:
     9fc:	28000426 	beq	r5,zero,a10 <bzero+0x14>
     a00:	214b883a 	add	r5,r4,r5
     a04:	20000005 	stb	zero,0(r4)
     a08:	21000044 	addi	r4,r4,1
     a0c:	217ffd1e 	bne	r4,r5,a04 <__alt_mem_Flash_flash_data+0xf4000a04>
     a10:	f800283a 	ret

00000a14 <memset>:
     a14:	20c000cc 	andi	r3,r4,3
     a18:	2005883a 	mov	r2,r4
     a1c:	18004326 	beq	r3,zero,b2c <memset+0x118>
     a20:	31ffffc4 	addi	r7,r6,-1
     a24:	30004026 	beq	r6,zero,b28 <memset+0x114>
     a28:	2813883a 	mov	r9,r5
     a2c:	200d883a 	mov	r6,r4
     a30:	2007883a 	mov	r3,r4
     a34:	00000406 	br	a48 <memset+0x34>
     a38:	3a3fffc4 	addi	r8,r7,-1
     a3c:	31800044 	addi	r6,r6,1
     a40:	38003926 	beq	r7,zero,b28 <memset+0x114>
     a44:	400f883a 	mov	r7,r8
     a48:	18c00044 	addi	r3,r3,1
     a4c:	32400005 	stb	r9,0(r6)
     a50:	1a0000cc 	andi	r8,r3,3
     a54:	403ff81e 	bne	r8,zero,a38 <__alt_mem_Flash_flash_data+0xf4000a38>
     a58:	010000c4 	movi	r4,3
     a5c:	21c02d2e 	bgeu	r4,r7,b14 <memset+0x100>
     a60:	29803fcc 	andi	r6,r5,255
     a64:	3008923a 	slli	r4,r6,8
     a68:	218cb03a 	or	r6,r4,r6
     a6c:	3008943a 	slli	r4,r6,16
     a70:	218cb03a 	or	r6,r4,r6
     a74:	010003c4 	movi	r4,15
     a78:	21c0182e 	bgeu	r4,r7,adc <memset+0xc8>
     a7c:	3b3ffc04 	addi	r12,r7,-16
     a80:	6018d13a 	srli	r12,r12,4
     a84:	1a000104 	addi	r8,r3,4
     a88:	1ac00204 	addi	r11,r3,8
     a8c:	6008913a 	slli	r4,r12,4
     a90:	1a800304 	addi	r10,r3,12
     a94:	1813883a 	mov	r9,r3
     a98:	21000504 	addi	r4,r4,20
     a9c:	1909883a 	add	r4,r3,r4
     aa0:	49800015 	stw	r6,0(r9)
     aa4:	41800015 	stw	r6,0(r8)
     aa8:	59800015 	stw	r6,0(r11)
     aac:	51800015 	stw	r6,0(r10)
     ab0:	42000404 	addi	r8,r8,16
     ab4:	4a400404 	addi	r9,r9,16
     ab8:	5ac00404 	addi	r11,r11,16
     abc:	52800404 	addi	r10,r10,16
     ac0:	413ff71e 	bne	r8,r4,aa0 <__alt_mem_Flash_flash_data+0xf4000aa0>
     ac4:	63000044 	addi	r12,r12,1
     ac8:	6018913a 	slli	r12,r12,4
     acc:	39c003cc 	andi	r7,r7,15
     ad0:	010000c4 	movi	r4,3
     ad4:	1b07883a 	add	r3,r3,r12
     ad8:	21c00e2e 	bgeu	r4,r7,b14 <memset+0x100>
     adc:	1813883a 	mov	r9,r3
     ae0:	3811883a 	mov	r8,r7
     ae4:	010000c4 	movi	r4,3
     ae8:	49800015 	stw	r6,0(r9)
     aec:	423fff04 	addi	r8,r8,-4
     af0:	4a400104 	addi	r9,r9,4
     af4:	223ffc36 	bltu	r4,r8,ae8 <__alt_mem_Flash_flash_data+0xf4000ae8>
     af8:	393fff04 	addi	r4,r7,-4
     afc:	2008d0ba 	srli	r4,r4,2
     b00:	39c000cc 	andi	r7,r7,3
     b04:	21000044 	addi	r4,r4,1
     b08:	2109883a 	add	r4,r4,r4
     b0c:	2109883a 	add	r4,r4,r4
     b10:	1907883a 	add	r3,r3,r4
     b14:	38000426 	beq	r7,zero,b28 <memset+0x114>
     b18:	19cf883a 	add	r7,r3,r7
     b1c:	19400005 	stb	r5,0(r3)
     b20:	18c00044 	addi	r3,r3,1
     b24:	19fffd1e 	bne	r3,r7,b1c <__alt_mem_Flash_flash_data+0xf4000b1c>
     b28:	f800283a 	ret
     b2c:	2007883a 	mov	r3,r4
     b30:	300f883a 	mov	r7,r6
     b34:	003fc806 	br	a58 <__alt_mem_Flash_flash_data+0xf4000a58>

00000b38 <_printf_r>:
     b38:	defffd04 	addi	sp,sp,-12
     b3c:	dfc00015 	stw	ra,0(sp)
     b40:	d9800115 	stw	r6,4(sp)
     b44:	d9c00215 	stw	r7,8(sp)
     b48:	280d883a 	mov	r6,r5
     b4c:	21400217 	ldw	r5,8(r4)
     b50:	d9c00104 	addi	r7,sp,4
     b54:	0002e800 	call	2e80 <___vfprintf_internal_r>
     b58:	dfc00017 	ldw	ra,0(sp)
     b5c:	dec00304 	addi	sp,sp,12
     b60:	f800283a 	ret

00000b64 <printf>:
     b64:	defffc04 	addi	sp,sp,-16
     b68:	dfc00015 	stw	ra,0(sp)
     b6c:	d9400115 	stw	r5,4(sp)
     b70:	d9800215 	stw	r6,8(sp)
     b74:	d9c00315 	stw	r7,12(sp)
     b78:	008000b4 	movhi	r2,2
     b7c:	108c8604 	addi	r2,r2,12824
     b80:	10800017 	ldw	r2,0(r2)
     b84:	200b883a 	mov	r5,r4
     b88:	d9800104 	addi	r6,sp,4
     b8c:	11000217 	ldw	r4,8(r2)
     b90:	0004dd00 	call	4dd0 <__vfprintf_internal>
     b94:	dfc00017 	ldw	ra,0(sp)
     b98:	dec00404 	addi	sp,sp,16
     b9c:	f800283a 	ret

00000ba0 <_putchar_r>:
     ba0:	21800217 	ldw	r6,8(r4)
     ba4:	00097181 	jmpi	9718 <_putc_r>

00000ba8 <putchar>:
     ba8:	008000b4 	movhi	r2,2
     bac:	108c8604 	addi	r2,r2,12824
     bb0:	200b883a 	mov	r5,r4
     bb4:	11000017 	ldw	r4,0(r2)
     bb8:	21800217 	ldw	r6,8(r4)
     bbc:	00097181 	jmpi	9718 <_putc_r>

00000bc0 <_puts_r>:
     bc0:	defff604 	addi	sp,sp,-40
     bc4:	dc000715 	stw	r16,28(sp)
     bc8:	2021883a 	mov	r16,r4
     bcc:	2809883a 	mov	r4,r5
     bd0:	dc400815 	stw	r17,32(sp)
     bd4:	dfc00915 	stw	ra,36(sp)
     bd8:	2823883a 	mov	r17,r5
     bdc:	0000e580 	call	e58 <strlen>
     be0:	81400217 	ldw	r5,8(r16)
     be4:	11000044 	addi	r4,r2,1
     be8:	d8800115 	stw	r2,4(sp)
     bec:	008000b4 	movhi	r2,2
     bf0:	2980030b 	ldhu	r6,12(r5)
     bf4:	10837804 	addi	r2,r2,3552
     bf8:	d8800215 	stw	r2,8(sp)
     bfc:	00800044 	movi	r2,1
     c00:	d8800315 	stw	r2,12(sp)
     c04:	00800084 	movi	r2,2
     c08:	d8800515 	stw	r2,20(sp)
     c0c:	dc400015 	stw	r17,0(sp)
     c10:	d9000615 	stw	r4,24(sp)
     c14:	dec00415 	stw	sp,16(sp)
     c18:	3088000c 	andi	r2,r6,8192
     c1c:	1000061e 	bne	r2,zero,c38 <_puts_r+0x78>
     c20:	29001917 	ldw	r4,100(r5)
     c24:	00b7ffc4 	movi	r2,-8193
     c28:	31880014 	ori	r6,r6,8192
     c2c:	2084703a 	and	r2,r4,r2
     c30:	2980030d 	sth	r6,12(r5)
     c34:	28801915 	stw	r2,100(r5)
     c38:	8009883a 	mov	r4,r16
     c3c:	d9800404 	addi	r6,sp,16
     c40:	00073740 	call	7374 <__sfvwrite_r>
     c44:	1000061e 	bne	r2,zero,c60 <_puts_r+0xa0>
     c48:	00800284 	movi	r2,10
     c4c:	dfc00917 	ldw	ra,36(sp)
     c50:	dc400817 	ldw	r17,32(sp)
     c54:	dc000717 	ldw	r16,28(sp)
     c58:	dec00a04 	addi	sp,sp,40
     c5c:	f800283a 	ret
     c60:	00bfffc4 	movi	r2,-1
     c64:	003ff906 	br	c4c <__alt_mem_Flash_flash_data+0xf4000c4c>

00000c68 <puts>:
     c68:	008000b4 	movhi	r2,2
     c6c:	108c8604 	addi	r2,r2,12824
     c70:	200b883a 	mov	r5,r4
     c74:	11000017 	ldw	r4,0(r2)
     c78:	0000bc01 	jmpi	bc0 <_puts_r>

00000c7c <_sprintf_r>:
     c7c:	deffe404 	addi	sp,sp,-112
     c80:	2807883a 	mov	r3,r5
     c84:	dfc01a15 	stw	ra,104(sp)
     c88:	d9c01b15 	stw	r7,108(sp)
     c8c:	00a00034 	movhi	r2,32768
     c90:	10bfffc4 	addi	r2,r2,-1
     c94:	02008204 	movi	r8,520
     c98:	d8800215 	stw	r2,8(sp)
     c9c:	d8800515 	stw	r2,20(sp)
     ca0:	d80b883a 	mov	r5,sp
     ca4:	d9c01b04 	addi	r7,sp,108
     ca8:	00bfffc4 	movi	r2,-1
     cac:	d8c00015 	stw	r3,0(sp)
     cb0:	d8c00415 	stw	r3,16(sp)
     cb4:	da00030d 	sth	r8,12(sp)
     cb8:	d880038d 	sth	r2,14(sp)
     cbc:	0000ef00 	call	ef0 <___svfprintf_internal_r>
     cc0:	d8c00017 	ldw	r3,0(sp)
     cc4:	18000005 	stb	zero,0(r3)
     cc8:	dfc01a17 	ldw	ra,104(sp)
     ccc:	dec01c04 	addi	sp,sp,112
     cd0:	f800283a 	ret

00000cd4 <sprintf>:
     cd4:	deffe304 	addi	sp,sp,-116
     cd8:	2007883a 	mov	r3,r4
     cdc:	dfc01a15 	stw	ra,104(sp)
     ce0:	d9801b15 	stw	r6,108(sp)
     ce4:	d9c01c15 	stw	r7,112(sp)
     ce8:	010000b4 	movhi	r4,2
     cec:	210c8604 	addi	r4,r4,12824
     cf0:	21000017 	ldw	r4,0(r4)
     cf4:	00a00034 	movhi	r2,32768
     cf8:	10bfffc4 	addi	r2,r2,-1
     cfc:	280d883a 	mov	r6,r5
     d00:	02008204 	movi	r8,520
     d04:	d8800215 	stw	r2,8(sp)
     d08:	d8800515 	stw	r2,20(sp)
     d0c:	d80b883a 	mov	r5,sp
     d10:	d9c01b04 	addi	r7,sp,108
     d14:	00bfffc4 	movi	r2,-1
     d18:	d8c00015 	stw	r3,0(sp)
     d1c:	d8c00415 	stw	r3,16(sp)
     d20:	da00030d 	sth	r8,12(sp)
     d24:	d880038d 	sth	r2,14(sp)
     d28:	0000ef00 	call	ef0 <___svfprintf_internal_r>
     d2c:	d8c00017 	ldw	r3,0(sp)
     d30:	18000005 	stb	zero,0(r3)
     d34:	dfc01a17 	ldw	ra,104(sp)
     d38:	dec01d04 	addi	sp,sp,116
     d3c:	f800283a 	ret

00000d40 <strcat>:
     d40:	defffe04 	addi	sp,sp,-8
     d44:	dc000015 	stw	r16,0(sp)
     d48:	dfc00115 	stw	ra,4(sp)
     d4c:	208000cc 	andi	r2,r4,3
     d50:	2021883a 	mov	r16,r4
     d54:	1000111e 	bne	r2,zero,d9c <strcat+0x5c>
     d58:	20800017 	ldw	r2,0(r4)
     d5c:	027fbff4 	movhi	r9,65279
     d60:	4a7fbfc4 	addi	r9,r9,-257
     d64:	0086303a 	nor	r3,zero,r2
     d68:	02202074 	movhi	r8,32897
     d6c:	1245883a 	add	r2,r2,r9
     d70:	42202004 	addi	r8,r8,-32640
     d74:	10c4703a 	and	r2,r2,r3
     d78:	1204703a 	and	r2,r2,r8
     d7c:	1000071e 	bne	r2,zero,d9c <strcat+0x5c>
     d80:	21000104 	addi	r4,r4,4
     d84:	21800017 	ldw	r6,0(r4)
     d88:	324f883a 	add	r7,r6,r9
     d8c:	018c303a 	nor	r6,zero,r6
     d90:	398c703a 	and	r6,r7,r6
     d94:	320c703a 	and	r6,r6,r8
     d98:	303ff926 	beq	r6,zero,d80 <__alt_mem_Flash_flash_data+0xf4000d80>
     d9c:	20800007 	ldb	r2,0(r4)
     da0:	10000326 	beq	r2,zero,db0 <strcat+0x70>
     da4:	21000044 	addi	r4,r4,1
     da8:	21800007 	ldb	r6,0(r4)
     dac:	303ffd1e 	bne	r6,zero,da4 <__alt_mem_Flash_flash_data+0xf4000da4>
     db0:	0000dc80 	call	dc8 <strcpy>
     db4:	8005883a 	mov	r2,r16
     db8:	dfc00117 	ldw	ra,4(sp)
     dbc:	dc000017 	ldw	r16,0(sp)
     dc0:	dec00204 	addi	sp,sp,8
     dc4:	f800283a 	ret

00000dc8 <strcpy>:
     dc8:	2906b03a 	or	r3,r5,r4
     dcc:	18c000cc 	andi	r3,r3,3
     dd0:	2005883a 	mov	r2,r4
     dd4:	1800161e 	bne	r3,zero,e30 <strcpy+0x68>
     dd8:	29c00017 	ldw	r7,0(r5)
     ddc:	02ffbff4 	movhi	r11,65279
     de0:	5affbfc4 	addi	r11,r11,-257
     de4:	02a02074 	movhi	r10,32897
     de8:	01c8303a 	nor	r4,zero,r7
     dec:	3ac7883a 	add	r3,r7,r11
     df0:	52a02004 	addi	r10,r10,-32640
     df4:	20c6703a 	and	r3,r4,r3
     df8:	1a86703a 	and	r3,r3,r10
     dfc:	18000c1e 	bne	r3,zero,e30 <strcpy+0x68>
     e00:	1011883a 	mov	r8,r2
     e04:	41c00015 	stw	r7,0(r8)
     e08:	29400104 	addi	r5,r5,4
     e0c:	29c00017 	ldw	r7,0(r5)
     e10:	41800104 	addi	r6,r8,4
     e14:	3011883a 	mov	r8,r6
     e18:	01d2303a 	nor	r9,zero,r7
     e1c:	3ac7883a 	add	r3,r7,r11
     e20:	48c6703a 	and	r3,r9,r3
     e24:	1a86703a 	and	r3,r3,r10
     e28:	183ff626 	beq	r3,zero,e04 <__alt_mem_Flash_flash_data+0xf4000e04>
     e2c:	00000106 	br	e34 <strcpy+0x6c>
     e30:	100d883a 	mov	r6,r2
     e34:	28c00003 	ldbu	r3,0(r5)
     e38:	31800044 	addi	r6,r6,1
     e3c:	29400044 	addi	r5,r5,1
     e40:	30ffffc5 	stb	r3,-1(r6)
     e44:	18c03fcc 	andi	r3,r3,255
     e48:	18c0201c 	xori	r3,r3,128
     e4c:	18ffe004 	addi	r3,r3,-128
     e50:	183ff81e 	bne	r3,zero,e34 <__alt_mem_Flash_flash_data+0xf4000e34>
     e54:	f800283a 	ret

00000e58 <strlen>:
     e58:	208000cc 	andi	r2,r4,3
     e5c:	10002026 	beq	r2,zero,ee0 <strlen+0x88>
     e60:	20800007 	ldb	r2,0(r4)
     e64:	10002026 	beq	r2,zero,ee8 <strlen+0x90>
     e68:	2005883a 	mov	r2,r4
     e6c:	00000206 	br	e78 <strlen+0x20>
     e70:	10c00007 	ldb	r3,0(r2)
     e74:	18001826 	beq	r3,zero,ed8 <strlen+0x80>
     e78:	10800044 	addi	r2,r2,1
     e7c:	10c000cc 	andi	r3,r2,3
     e80:	183ffb1e 	bne	r3,zero,e70 <__alt_mem_Flash_flash_data+0xf4000e70>
     e84:	10c00017 	ldw	r3,0(r2)
     e88:	01ffbff4 	movhi	r7,65279
     e8c:	39ffbfc4 	addi	r7,r7,-257
     e90:	00ca303a 	nor	r5,zero,r3
     e94:	01a02074 	movhi	r6,32897
     e98:	19c7883a 	add	r3,r3,r7
     e9c:	31a02004 	addi	r6,r6,-32640
     ea0:	1946703a 	and	r3,r3,r5
     ea4:	1986703a 	and	r3,r3,r6
     ea8:	1800091e 	bne	r3,zero,ed0 <strlen+0x78>
     eac:	10800104 	addi	r2,r2,4
     eb0:	10c00017 	ldw	r3,0(r2)
     eb4:	19cb883a 	add	r5,r3,r7
     eb8:	00c6303a 	nor	r3,zero,r3
     ebc:	28c6703a 	and	r3,r5,r3
     ec0:	1986703a 	and	r3,r3,r6
     ec4:	183ff926 	beq	r3,zero,eac <__alt_mem_Flash_flash_data+0xf4000eac>
     ec8:	00000106 	br	ed0 <strlen+0x78>
     ecc:	10800044 	addi	r2,r2,1
     ed0:	10c00007 	ldb	r3,0(r2)
     ed4:	183ffd1e 	bne	r3,zero,ecc <__alt_mem_Flash_flash_data+0xf4000ecc>
     ed8:	1105c83a 	sub	r2,r2,r4
     edc:	f800283a 	ret
     ee0:	2005883a 	mov	r2,r4
     ee4:	003fe706 	br	e84 <__alt_mem_Flash_flash_data+0xf4000e84>
     ee8:	0005883a 	mov	r2,zero
     eec:	f800283a 	ret

00000ef0 <___svfprintf_internal_r>:
     ef0:	deffb504 	addi	sp,sp,-300
     ef4:	dfc04a15 	stw	ra,296(sp)
     ef8:	ddc04815 	stw	r23,288(sp)
     efc:	d9002f15 	stw	r4,188(sp)
     f00:	282f883a 	mov	r23,r5
     f04:	d9802915 	stw	r6,164(sp)
     f08:	d9c02d15 	stw	r7,180(sp)
     f0c:	df004915 	stw	fp,292(sp)
     f10:	dd804715 	stw	r22,284(sp)
     f14:	dd404615 	stw	r21,280(sp)
     f18:	dd004515 	stw	r20,276(sp)
     f1c:	dcc04415 	stw	r19,272(sp)
     f20:	dc804315 	stw	r18,268(sp)
     f24:	dc404215 	stw	r17,264(sp)
     f28:	dc004115 	stw	r16,260(sp)
     f2c:	0007a680 	call	7a68 <_localeconv_r>
     f30:	10800017 	ldw	r2,0(r2)
     f34:	1009883a 	mov	r4,r2
     f38:	d8803515 	stw	r2,212(sp)
     f3c:	0000e580 	call	e58 <strlen>
     f40:	d8803915 	stw	r2,228(sp)
     f44:	b880030b 	ldhu	r2,12(r23)
     f48:	1080200c 	andi	r2,r2,128
     f4c:	10000226 	beq	r2,zero,f58 <___svfprintf_internal_r+0x68>
     f50:	b8800417 	ldw	r2,16(r23)
     f54:	10065f26 	beq	r2,zero,28d4 <___svfprintf_internal_r+0x19e4>
     f58:	db001dc4 	addi	r12,sp,119
     f5c:	dd801e04 	addi	r22,sp,120
     f60:	d8800404 	addi	r2,sp,16
     f64:	050000b4 	movhi	r20,2
     f68:	b317c83a 	sub	r11,r22,r12
     f6c:	a5038984 	addi	r20,r20,3622
     f70:	db002815 	stw	r12,160(sp)
     f74:	d8801e15 	stw	r2,120(sp)
     f78:	d8002015 	stw	zero,128(sp)
     f7c:	d8001f15 	stw	zero,124(sp)
     f80:	d8003315 	stw	zero,204(sp)
     f84:	d8003715 	stw	zero,220(sp)
     f88:	d8003815 	stw	zero,224(sp)
     f8c:	1011883a 	mov	r8,r2
     f90:	d8003b15 	stw	zero,236(sp)
     f94:	d8003a15 	stw	zero,232(sp)
     f98:	d8003015 	stw	zero,192(sp)
     f9c:	dac03d15 	stw	r11,244(sp)
     fa0:	db002917 	ldw	r12,164(sp)
     fa4:	60800007 	ldb	r2,0(r12)
     fa8:	1000ab26 	beq	r2,zero,1258 <___svfprintf_internal_r+0x368>
     fac:	00c00944 	movi	r3,37
     fb0:	10c0a926 	beq	r2,r3,1258 <___svfprintf_internal_r+0x368>
     fb4:	6021883a 	mov	r16,r12
     fb8:	00000106 	br	fc0 <___svfprintf_internal_r+0xd0>
     fbc:	10c08426 	beq	r2,r3,11d0 <___svfprintf_internal_r+0x2e0>
     fc0:	84000044 	addi	r16,r16,1
     fc4:	80800007 	ldb	r2,0(r16)
     fc8:	103ffc1e 	bne	r2,zero,fbc <__alt_mem_Flash_flash_data+0xf4000fbc>
     fcc:	dac02917 	ldw	r11,164(sp)
     fd0:	82e3c83a 	sub	r17,r16,r11
     fd4:	88000f26 	beq	r17,zero,1014 <___svfprintf_internal_r+0x124>
     fd8:	d8c02017 	ldw	r3,128(sp)
     fdc:	d8801f17 	ldw	r2,124(sp)
     fe0:	dac02917 	ldw	r11,164(sp)
     fe4:	1c47883a 	add	r3,r3,r17
     fe8:	10800044 	addi	r2,r2,1
     fec:	d8c02015 	stw	r3,128(sp)
     ff0:	42c00015 	stw	r11,0(r8)
     ff4:	44400115 	stw	r17,4(r8)
     ff8:	d8801f15 	stw	r2,124(sp)
     ffc:	00c001c4 	movi	r3,7
    1000:	18807616 	blt	r3,r2,11dc <___svfprintf_internal_r+0x2ec>
    1004:	42000204 	addi	r8,r8,8
    1008:	db003017 	ldw	r12,192(sp)
    100c:	6459883a 	add	r12,r12,r17
    1010:	db003015 	stw	r12,192(sp)
    1014:	80800007 	ldb	r2,0(r16)
    1018:	10007726 	beq	r2,zero,11f8 <___svfprintf_internal_r+0x308>
    101c:	80800044 	addi	r2,r16,1
    1020:	84000047 	ldb	r16,1(r16)
    1024:	d8002785 	stb	zero,158(sp)
    1028:	000d883a 	mov	r6,zero
    102c:	027fffc4 	movi	r9,-1
    1030:	d8002e15 	stw	zero,184(sp)
    1034:	0023883a 	mov	r17,zero
    1038:	01001604 	movi	r4,88
    103c:	01400244 	movi	r5,9
    1040:	02800a84 	movi	r10,42
    1044:	01c01b04 	movi	r7,108
    1048:	10c00044 	addi	r3,r2,1
    104c:	80bff804 	addi	r2,r16,-32
    1050:	2082e636 	bltu	r4,r2,1bec <___svfprintf_internal_r+0xcfc>
    1054:	100490ba 	slli	r2,r2,2
    1058:	02c00034 	movhi	r11,0
    105c:	5ac41b04 	addi	r11,r11,4204
    1060:	12c5883a 	add	r2,r2,r11
    1064:	10800017 	ldw	r2,0(r2)
    1068:	1000683a 	jmp	r2
    106c:	000019cc 	andi	zero,zero,103
    1070:	00001bec 	andhi	zero,zero,111
    1074:	00001bec 	andhi	zero,zero,111
    1078:	000019ec 	andhi	zero,zero,103
    107c:	00001bec 	andhi	zero,zero,111
    1080:	00001bec 	andhi	zero,zero,111
    1084:	00001bec 	andhi	zero,zero,111
    1088:	00001bec 	andhi	zero,zero,111
    108c:	00001bec 	andhi	zero,zero,111
    1090:	00001bec 	andhi	zero,zero,111
    1094:	000019fc 	xorhi	zero,zero,103
    1098:	00001a28 	cmpgeui	zero,zero,104
    109c:	00001bec 	andhi	zero,zero,111
    10a0:	00001260 	cmpeqi	zero,zero,73
    10a4:	00001270 	cmpltui	zero,zero,73
    10a8:	00001bec 	andhi	zero,zero,111
    10ac:	000012b0 	cmpltui	zero,zero,74
    10b0:	00001890 	cmplti	zero,zero,98
    10b4:	00001890 	cmplti	zero,zero,98
    10b8:	00001890 	cmplti	zero,zero,98
    10bc:	00001890 	cmplti	zero,zero,98
    10c0:	00001890 	cmplti	zero,zero,98
    10c4:	00001890 	cmplti	zero,zero,98
    10c8:	00001890 	cmplti	zero,zero,98
    10cc:	00001890 	cmplti	zero,zero,98
    10d0:	00001890 	cmplti	zero,zero,98
    10d4:	00001bec 	andhi	zero,zero,111
    10d8:	00001bec 	andhi	zero,zero,111
    10dc:	00001bec 	andhi	zero,zero,111
    10e0:	00001bec 	andhi	zero,zero,111
    10e4:	00001bec 	andhi	zero,zero,111
    10e8:	00001bec 	andhi	zero,zero,111
    10ec:	00001bec 	andhi	zero,zero,111
    10f0:	00001bec 	andhi	zero,zero,111
    10f4:	00001bec 	andhi	zero,zero,111
    10f8:	00001bec 	andhi	zero,zero,111
    10fc:	000012c0 	call	12c <alt_irq_handler+0x30>
    1100:	00001740 	call	174 <alt_irq_handler+0x78>
    1104:	00001bec 	andhi	zero,zero,111
    1108:	00001740 	call	174 <alt_irq_handler+0x78>
    110c:	00001bec 	andhi	zero,zero,111
    1110:	00001bec 	andhi	zero,zero,111
    1114:	00001bec 	andhi	zero,zero,111
    1118:	00001bec 	andhi	zero,zero,111
    111c:	000017e4 	muli	zero,zero,95
    1120:	00001bec 	andhi	zero,zero,111
    1124:	00001bec 	andhi	zero,zero,111
    1128:	00001b80 	call	1b8 <alt_irq_handler+0xbc>
    112c:	00001bec 	andhi	zero,zero,111
    1130:	00001bec 	andhi	zero,zero,111
    1134:	00001bec 	andhi	zero,zero,111
    1138:	00001bec 	andhi	zero,zero,111
    113c:	00001bec 	andhi	zero,zero,111
    1140:	000017f4 	movhi	zero,95
    1144:	00001bec 	andhi	zero,zero,111
    1148:	00001bec 	andhi	zero,zero,111
    114c:	00001834 	movhi	zero,96
    1150:	00001bec 	andhi	zero,zero,111
    1154:	00001bec 	andhi	zero,zero,111
    1158:	00001bec 	andhi	zero,zero,111
    115c:	00001bec 	andhi	zero,zero,111
    1160:	00001bec 	andhi	zero,zero,111
    1164:	00001bec 	andhi	zero,zero,111
    1168:	00001bec 	andhi	zero,zero,111
    116c:	00001bec 	andhi	zero,zero,111
    1170:	00001bec 	andhi	zero,zero,111
    1174:	00001bec 	andhi	zero,zero,111
    1178:	00001ad8 	cmpnei	zero,zero,107
    117c:	00001b18 	cmpnei	zero,zero,108
    1180:	00001740 	call	174 <alt_irq_handler+0x78>
    1184:	00001740 	call	174 <alt_irq_handler+0x78>
    1188:	00001740 	call	174 <alt_irq_handler+0x78>
    118c:	00001a38 	rdprs	zero,zero,104
    1190:	00001b18 	cmpnei	zero,zero,108
    1194:	00001bec 	andhi	zero,zero,111
    1198:	00001bec 	andhi	zero,zero,111
    119c:	00001a48 	cmpgei	zero,zero,105
    11a0:	00001bec 	andhi	zero,zero,111
    11a4:	00001a5c 	xori	zero,zero,105
    11a8:	00001bb0 	cmpltui	zero,zero,110
    11ac:	00001a90 	cmplti	zero,zero,106
    11b0:	000018c4 	movi	zero,99
    11b4:	00001bec 	andhi	zero,zero,111
    11b8:	000018d4 	movui	zero,99
    11bc:	00001bec 	andhi	zero,zero,111
    11c0:	0000194c 	andi	zero,zero,101
    11c4:	00001bec 	andhi	zero,zero,111
    11c8:	00001bec 	andhi	zero,zero,111
    11cc:	0000198c 	andi	zero,zero,102
    11d0:	db002917 	ldw	r12,164(sp)
    11d4:	8323c83a 	sub	r17,r16,r12
    11d8:	003f7e06 	br	fd4 <__alt_mem_Flash_flash_data+0xf4000fd4>
    11dc:	d9002f17 	ldw	r4,188(sp)
    11e0:	b80b883a 	mov	r5,r23
    11e4:	b00d883a 	mov	r6,r22
    11e8:	000a0940 	call	a094 <__ssprint_r>
    11ec:	1000081e 	bne	r2,zero,1210 <___svfprintf_internal_r+0x320>
    11f0:	da000404 	addi	r8,sp,16
    11f4:	003f8406 	br	1008 <__alt_mem_Flash_flash_data+0xf4001008>
    11f8:	d8802017 	ldw	r2,128(sp)
    11fc:	10000426 	beq	r2,zero,1210 <___svfprintf_internal_r+0x320>
    1200:	d9002f17 	ldw	r4,188(sp)
    1204:	b80b883a 	mov	r5,r23
    1208:	d9801e04 	addi	r6,sp,120
    120c:	000a0940 	call	a094 <__ssprint_r>
    1210:	b880030b 	ldhu	r2,12(r23)
    1214:	1080100c 	andi	r2,r2,64
    1218:	10000d1e 	bne	r2,zero,1250 <___svfprintf_internal_r+0x360>
    121c:	d8803017 	ldw	r2,192(sp)
    1220:	dfc04a17 	ldw	ra,296(sp)
    1224:	df004917 	ldw	fp,292(sp)
    1228:	ddc04817 	ldw	r23,288(sp)
    122c:	dd804717 	ldw	r22,284(sp)
    1230:	dd404617 	ldw	r21,280(sp)
    1234:	dd004517 	ldw	r20,276(sp)
    1238:	dcc04417 	ldw	r19,272(sp)
    123c:	dc804317 	ldw	r18,268(sp)
    1240:	dc404217 	ldw	r17,264(sp)
    1244:	dc004117 	ldw	r16,260(sp)
    1248:	dec04b04 	addi	sp,sp,300
    124c:	f800283a 	ret
    1250:	00bfffc4 	movi	r2,-1
    1254:	003ff206 	br	1220 <__alt_mem_Flash_flash_data+0xf4001220>
    1258:	dc002917 	ldw	r16,164(sp)
    125c:	003f6d06 	br	1014 <__alt_mem_Flash_flash_data+0xf4001014>
    1260:	1805883a 	mov	r2,r3
    1264:	8c400114 	ori	r17,r17,4
    1268:	1c000007 	ldb	r16,0(r3)
    126c:	003f7606 	br	1048 <__alt_mem_Flash_flash_data+0xf4001048>
    1270:	1c000007 	ldb	r16,0(r3)
    1274:	18800044 	addi	r2,r3,1
    1278:	8286e726 	beq	r16,r10,2e18 <___svfprintf_internal_r+0x1f28>
    127c:	82fff404 	addi	r11,r16,-48
    1280:	1007883a 	mov	r3,r2
    1284:	0013883a 	mov	r9,zero
    1288:	2aff7036 	bltu	r5,r11,104c <__alt_mem_Flash_flash_data+0xf400104c>
    128c:	1c000007 	ldb	r16,0(r3)
    1290:	4a4002a4 	muli	r9,r9,10
    1294:	18c00044 	addi	r3,r3,1
    1298:	5a53883a 	add	r9,r11,r9
    129c:	82fff404 	addi	r11,r16,-48
    12a0:	2afffa2e 	bgeu	r5,r11,128c <__alt_mem_Flash_flash_data+0xf400128c>
    12a4:	483f690e 	bge	r9,zero,104c <__alt_mem_Flash_flash_data+0xf400104c>
    12a8:	027fffc4 	movi	r9,-1
    12ac:	003f6706 	br	104c <__alt_mem_Flash_flash_data+0xf400104c>
    12b0:	8c402014 	ori	r17,r17,128
    12b4:	1805883a 	mov	r2,r3
    12b8:	1c000007 	ldb	r16,0(r3)
    12bc:	003f6206 	br	1048 <__alt_mem_Flash_flash_data+0xf4001048>
    12c0:	8c400414 	ori	r17,r17,16
    12c4:	d8c02915 	stw	r3,164(sp)
    12c8:	d9802785 	stb	r6,158(sp)
    12cc:	8880080c 	andi	r2,r17,32
    12d0:	d8c02d17 	ldw	r3,180(sp)
    12d4:	10021526 	beq	r2,zero,1b2c <___svfprintf_internal_r+0xc3c>
    12d8:	db002d17 	ldw	r12,180(sp)
    12dc:	18800117 	ldw	r2,4(r3)
    12e0:	1cc00017 	ldw	r19,0(r3)
    12e4:	63000204 	addi	r12,r12,8
    12e8:	db002d15 	stw	r12,180(sp)
    12ec:	1039883a 	mov	fp,r2
    12f0:	10021916 	blt	r2,zero,1b58 <___svfprintf_internal_r+0xc68>
    12f4:	dd402783 	ldbu	r21,158(sp)
    12f8:	da403215 	stw	r9,200(sp)
    12fc:	00800044 	movi	r2,1
    1300:	9f06b03a 	or	r3,r19,fp
    1304:	48000216 	blt	r9,zero,1310 <___svfprintf_internal_r+0x420>
    1308:	013fdfc4 	movi	r4,-129
    130c:	8922703a 	and	r17,r17,r4
    1310:	1802461e 	bne	r3,zero,1c2c <___svfprintf_internal_r+0xd3c>
    1314:	48035426 	beq	r9,zero,2068 <___svfprintf_internal_r+0x1178>
    1318:	10803fcc 	andi	r2,r2,255
    131c:	00c00044 	movi	r3,1
    1320:	10c26726 	beq	r2,r3,1cc0 <___svfprintf_internal_r+0xdd0>
    1324:	00c00084 	movi	r3,2
    1328:	10c2ea26 	beq	r2,r3,1ed4 <___svfprintf_internal_r+0xfe4>
    132c:	b007883a 	mov	r3,r22
    1330:	9808d0fa 	srli	r4,r19,3
    1334:	e00a977a 	slli	r5,fp,29
    1338:	e038d0fa 	srli	fp,fp,3
    133c:	9cc001cc 	andi	r19,r19,7
    1340:	98800c04 	addi	r2,r19,48
    1344:	18ffffc4 	addi	r3,r3,-1
    1348:	2926b03a 	or	r19,r5,r4
    134c:	18800005 	stb	r2,0(r3)
    1350:	9f08b03a 	or	r4,r19,fp
    1354:	203ff61e 	bne	r4,zero,1330 <__alt_mem_Flash_flash_data+0xf4001330>
    1358:	8900004c 	andi	r4,r17,1
    135c:	d8c03115 	stw	r3,196(sp)
    1360:	2002ea26 	beq	r4,zero,1f0c <___svfprintf_internal_r+0x101c>
    1364:	10803fcc 	andi	r2,r2,255
    1368:	1080201c 	xori	r2,r2,128
    136c:	10bfe004 	addi	r2,r2,-128
    1370:	01000c04 	movi	r4,48
    1374:	11057526 	beq	r2,r4,294c <___svfprintf_internal_r+0x1a5c>
    1378:	dac03117 	ldw	r11,196(sp)
    137c:	193fffc5 	stb	r4,-1(r3)
    1380:	5affffc4 	addi	r11,r11,-1
    1384:	dac03115 	stw	r11,196(sp)
    1388:	b2e5c83a 	sub	r18,r22,r11
    138c:	9005883a 	mov	r2,r18
    1390:	9240010e 	bge	r18,r9,1398 <___svfprintf_internal_r+0x4a8>
    1394:	4805883a 	mov	r2,r9
    1398:	d8802a15 	stw	r2,168(sp)
    139c:	d8003415 	stw	zero,208(sp)
    13a0:	a8803fcc 	andi	r2,r21,255
    13a4:	1080201c 	xori	r2,r2,128
    13a8:	10bfe004 	addi	r2,r2,-128
    13ac:	10000326 	beq	r2,zero,13bc <___svfprintf_internal_r+0x4cc>
    13b0:	d8c02a17 	ldw	r3,168(sp)
    13b4:	18c00044 	addi	r3,r3,1
    13b8:	d8c02a15 	stw	r3,168(sp)
    13bc:	8ac0008c 	andi	r11,r17,2
    13c0:	dac02b15 	stw	r11,172(sp)
    13c4:	58000326 	beq	r11,zero,13d4 <___svfprintf_internal_r+0x4e4>
    13c8:	db002a17 	ldw	r12,168(sp)
    13cc:	63000084 	addi	r12,r12,2
    13d0:	db002a15 	stw	r12,168(sp)
    13d4:	88c0210c 	andi	r3,r17,132
    13d8:	d8c02c15 	stw	r3,176(sp)
    13dc:	1802111e 	bne	r3,zero,1c24 <___svfprintf_internal_r+0xd34>
    13e0:	dac02e17 	ldw	r11,184(sp)
    13e4:	db002a17 	ldw	r12,168(sp)
    13e8:	5b39c83a 	sub	fp,r11,r12
    13ec:	07020d0e 	bge	zero,fp,1c24 <___svfprintf_internal_r+0xd34>
    13f0:	02400404 	movi	r9,16
    13f4:	d8c02017 	ldw	r3,128(sp)
    13f8:	d8801f17 	ldw	r2,124(sp)
    13fc:	4f058c0e 	bge	r9,fp,2a30 <___svfprintf_internal_r+0x1b40>
    1400:	014000b4 	movhi	r5,2
    1404:	e009883a 	mov	r4,fp
    1408:	29438d84 	addi	r5,r5,3638
    140c:	dc003c15 	stw	r16,240(sp)
    1410:	9039883a 	mov	fp,r18
    1414:	d9403615 	stw	r5,216(sp)
    1418:	8825883a 	mov	r18,r17
    141c:	482b883a 	mov	r21,r9
    1420:	04c001c4 	movi	r19,7
    1424:	dc002f17 	ldw	r16,188(sp)
    1428:	2023883a 	mov	r17,r4
    142c:	00000306 	br	143c <___svfprintf_internal_r+0x54c>
    1430:	8c7ffc04 	addi	r17,r17,-16
    1434:	42000204 	addi	r8,r8,8
    1438:	ac40130e 	bge	r21,r17,1488 <___svfprintf_internal_r+0x598>
    143c:	02c000b4 	movhi	r11,2
    1440:	18c00404 	addi	r3,r3,16
    1444:	10800044 	addi	r2,r2,1
    1448:	5ac38d84 	addi	r11,r11,3638
    144c:	42c00015 	stw	r11,0(r8)
    1450:	45400115 	stw	r21,4(r8)
    1454:	d8c02015 	stw	r3,128(sp)
    1458:	d8801f15 	stw	r2,124(sp)
    145c:	98bff40e 	bge	r19,r2,1430 <__alt_mem_Flash_flash_data+0xf4001430>
    1460:	8009883a 	mov	r4,r16
    1464:	b80b883a 	mov	r5,r23
    1468:	b00d883a 	mov	r6,r22
    146c:	000a0940 	call	a094 <__ssprint_r>
    1470:	103f671e 	bne	r2,zero,1210 <__alt_mem_Flash_flash_data+0xf4001210>
    1474:	8c7ffc04 	addi	r17,r17,-16
    1478:	d8c02017 	ldw	r3,128(sp)
    147c:	d8801f17 	ldw	r2,124(sp)
    1480:	da000404 	addi	r8,sp,16
    1484:	ac7fed16 	blt	r21,r17,143c <__alt_mem_Flash_flash_data+0xf400143c>
    1488:	dc003c17 	ldw	r16,240(sp)
    148c:	8809883a 	mov	r4,r17
    1490:	9023883a 	mov	r17,r18
    1494:	e025883a 	mov	r18,fp
    1498:	2039883a 	mov	fp,r4
    149c:	db003617 	ldw	r12,216(sp)
    14a0:	e0c7883a 	add	r3,fp,r3
    14a4:	10800044 	addi	r2,r2,1
    14a8:	43000015 	stw	r12,0(r8)
    14ac:	47000115 	stw	fp,4(r8)
    14b0:	d8c02015 	stw	r3,128(sp)
    14b4:	d8801f15 	stw	r2,124(sp)
    14b8:	010001c4 	movi	r4,7
    14bc:	20834416 	blt	r4,r2,21d0 <___svfprintf_internal_r+0x12e0>
    14c0:	d8802787 	ldb	r2,158(sp)
    14c4:	42000204 	addi	r8,r8,8
    14c8:	10000c26 	beq	r2,zero,14fc <___svfprintf_internal_r+0x60c>
    14cc:	d8801f17 	ldw	r2,124(sp)
    14d0:	d9002784 	addi	r4,sp,158
    14d4:	18c00044 	addi	r3,r3,1
    14d8:	10800044 	addi	r2,r2,1
    14dc:	41000015 	stw	r4,0(r8)
    14e0:	01000044 	movi	r4,1
    14e4:	41000115 	stw	r4,4(r8)
    14e8:	d8c02015 	stw	r3,128(sp)
    14ec:	d8801f15 	stw	r2,124(sp)
    14f0:	010001c4 	movi	r4,7
    14f4:	2082f616 	blt	r4,r2,20d0 <___svfprintf_internal_r+0x11e0>
    14f8:	42000204 	addi	r8,r8,8
    14fc:	dac02b17 	ldw	r11,172(sp)
    1500:	58000c26 	beq	r11,zero,1534 <___svfprintf_internal_r+0x644>
    1504:	d8801f17 	ldw	r2,124(sp)
    1508:	d9002704 	addi	r4,sp,156
    150c:	18c00084 	addi	r3,r3,2
    1510:	10800044 	addi	r2,r2,1
    1514:	41000015 	stw	r4,0(r8)
    1518:	01000084 	movi	r4,2
    151c:	41000115 	stw	r4,4(r8)
    1520:	d8c02015 	stw	r3,128(sp)
    1524:	d8801f15 	stw	r2,124(sp)
    1528:	010001c4 	movi	r4,7
    152c:	2082e016 	blt	r4,r2,20b0 <___svfprintf_internal_r+0x11c0>
    1530:	42000204 	addi	r8,r8,8
    1534:	db002c17 	ldw	r12,176(sp)
    1538:	00802004 	movi	r2,128
    153c:	60822f26 	beq	r12,r2,1dfc <___svfprintf_internal_r+0xf0c>
    1540:	db003217 	ldw	r12,200(sp)
    1544:	64abc83a 	sub	r21,r12,r18
    1548:	0540310e 	bge	zero,r21,1610 <___svfprintf_internal_r+0x720>
    154c:	07000404 	movi	fp,16
    1550:	d8801f17 	ldw	r2,124(sp)
    1554:	e544270e 	bge	fp,r21,25f4 <___svfprintf_internal_r+0x1704>
    1558:	014000b4 	movhi	r5,2
    155c:	a809883a 	mov	r4,r21
    1560:	29438984 	addi	r5,r5,3622
    1564:	dc002c15 	stw	r16,176(sp)
    1568:	902b883a 	mov	r21,r18
    156c:	d9402b15 	stw	r5,172(sp)
    1570:	8825883a 	mov	r18,r17
    1574:	04c001c4 	movi	r19,7
    1578:	dc002f17 	ldw	r16,188(sp)
    157c:	2023883a 	mov	r17,r4
    1580:	00000306 	br	1590 <___svfprintf_internal_r+0x6a0>
    1584:	8c7ffc04 	addi	r17,r17,-16
    1588:	42000204 	addi	r8,r8,8
    158c:	e440110e 	bge	fp,r17,15d4 <___svfprintf_internal_r+0x6e4>
    1590:	18c00404 	addi	r3,r3,16
    1594:	10800044 	addi	r2,r2,1
    1598:	45000015 	stw	r20,0(r8)
    159c:	47000115 	stw	fp,4(r8)
    15a0:	d8c02015 	stw	r3,128(sp)
    15a4:	d8801f15 	stw	r2,124(sp)
    15a8:	98bff60e 	bge	r19,r2,1584 <__alt_mem_Flash_flash_data+0xf4001584>
    15ac:	8009883a 	mov	r4,r16
    15b0:	b80b883a 	mov	r5,r23
    15b4:	b00d883a 	mov	r6,r22
    15b8:	000a0940 	call	a094 <__ssprint_r>
    15bc:	103f141e 	bne	r2,zero,1210 <__alt_mem_Flash_flash_data+0xf4001210>
    15c0:	8c7ffc04 	addi	r17,r17,-16
    15c4:	d8c02017 	ldw	r3,128(sp)
    15c8:	d8801f17 	ldw	r2,124(sp)
    15cc:	da000404 	addi	r8,sp,16
    15d0:	e47fef16 	blt	fp,r17,1590 <__alt_mem_Flash_flash_data+0xf4001590>
    15d4:	dc002c17 	ldw	r16,176(sp)
    15d8:	8809883a 	mov	r4,r17
    15dc:	9023883a 	mov	r17,r18
    15e0:	a825883a 	mov	r18,r21
    15e4:	202b883a 	mov	r21,r4
    15e8:	dac02b17 	ldw	r11,172(sp)
    15ec:	1d47883a 	add	r3,r3,r21
    15f0:	10800044 	addi	r2,r2,1
    15f4:	42c00015 	stw	r11,0(r8)
    15f8:	45400115 	stw	r21,4(r8)
    15fc:	d8c02015 	stw	r3,128(sp)
    1600:	d8801f15 	stw	r2,124(sp)
    1604:	010001c4 	movi	r4,7
    1608:	2082a116 	blt	r4,r2,2090 <___svfprintf_internal_r+0x11a0>
    160c:	42000204 	addi	r8,r8,8
    1610:	8880400c 	andi	r2,r17,256
    1614:	1001b01e 	bne	r2,zero,1cd8 <___svfprintf_internal_r+0xde8>
    1618:	d8801f17 	ldw	r2,124(sp)
    161c:	db003117 	ldw	r12,196(sp)
    1620:	1c87883a 	add	r3,r3,r18
    1624:	10800044 	addi	r2,r2,1
    1628:	43000015 	stw	r12,0(r8)
    162c:	44800115 	stw	r18,4(r8)
    1630:	d8c02015 	stw	r3,128(sp)
    1634:	d8801f15 	stw	r2,124(sp)
    1638:	010001c4 	movi	r4,7
    163c:	20828216 	blt	r4,r2,2048 <___svfprintf_internal_r+0x1158>
    1640:	42000204 	addi	r8,r8,8
    1644:	8c40010c 	andi	r17,r17,4
    1648:	88003226 	beq	r17,zero,1714 <___svfprintf_internal_r+0x824>
    164c:	db002e17 	ldw	r12,184(sp)
    1650:	dac02a17 	ldw	r11,168(sp)
    1654:	62e1c83a 	sub	r16,r12,r11
    1658:	04002e0e 	bge	zero,r16,1714 <___svfprintf_internal_r+0x824>
    165c:	04400404 	movi	r17,16
    1660:	d8801f17 	ldw	r2,124(sp)
    1664:	8c05330e 	bge	r17,r16,2b34 <___svfprintf_internal_r+0x1c44>
    1668:	010000b4 	movhi	r4,2
    166c:	21038d84 	addi	r4,r4,3638
    1670:	d9003615 	stw	r4,216(sp)
    1674:	048001c4 	movi	r18,7
    1678:	dcc02f17 	ldw	r19,188(sp)
    167c:	00000306 	br	168c <___svfprintf_internal_r+0x79c>
    1680:	843ffc04 	addi	r16,r16,-16
    1684:	42000204 	addi	r8,r8,8
    1688:	8c00130e 	bge	r17,r16,16d8 <___svfprintf_internal_r+0x7e8>
    168c:	014000b4 	movhi	r5,2
    1690:	18c00404 	addi	r3,r3,16
    1694:	10800044 	addi	r2,r2,1
    1698:	29438d84 	addi	r5,r5,3638
    169c:	41400015 	stw	r5,0(r8)
    16a0:	44400115 	stw	r17,4(r8)
    16a4:	d8c02015 	stw	r3,128(sp)
    16a8:	d8801f15 	stw	r2,124(sp)
    16ac:	90bff40e 	bge	r18,r2,1680 <__alt_mem_Flash_flash_data+0xf4001680>
    16b0:	9809883a 	mov	r4,r19
    16b4:	b80b883a 	mov	r5,r23
    16b8:	b00d883a 	mov	r6,r22
    16bc:	000a0940 	call	a094 <__ssprint_r>
    16c0:	103ed31e 	bne	r2,zero,1210 <__alt_mem_Flash_flash_data+0xf4001210>
    16c4:	843ffc04 	addi	r16,r16,-16
    16c8:	d8c02017 	ldw	r3,128(sp)
    16cc:	d8801f17 	ldw	r2,124(sp)
    16d0:	da000404 	addi	r8,sp,16
    16d4:	8c3fed16 	blt	r17,r16,168c <__alt_mem_Flash_flash_data+0xf400168c>
    16d8:	dac03617 	ldw	r11,216(sp)
    16dc:	1c07883a 	add	r3,r3,r16
    16e0:	10800044 	addi	r2,r2,1
    16e4:	42c00015 	stw	r11,0(r8)
    16e8:	44000115 	stw	r16,4(r8)
    16ec:	d8c02015 	stw	r3,128(sp)
    16f0:	d8801f15 	stw	r2,124(sp)
    16f4:	010001c4 	movi	r4,7
    16f8:	2080060e 	bge	r4,r2,1714 <___svfprintf_internal_r+0x824>
    16fc:	d9002f17 	ldw	r4,188(sp)
    1700:	b80b883a 	mov	r5,r23
    1704:	b00d883a 	mov	r6,r22
    1708:	000a0940 	call	a094 <__ssprint_r>
    170c:	103ec01e 	bne	r2,zero,1210 <__alt_mem_Flash_flash_data+0xf4001210>
    1710:	d8c02017 	ldw	r3,128(sp)
    1714:	d8802a17 	ldw	r2,168(sp)
    1718:	db002e17 	ldw	r12,184(sp)
    171c:	1300010e 	bge	r2,r12,1724 <___svfprintf_internal_r+0x834>
    1720:	6005883a 	mov	r2,r12
    1724:	dac03017 	ldw	r11,192(sp)
    1728:	5897883a 	add	r11,r11,r2
    172c:	dac03015 	stw	r11,192(sp)
    1730:	1802331e 	bne	r3,zero,2000 <___svfprintf_internal_r+0x1110>
    1734:	d8001f15 	stw	zero,124(sp)
    1738:	da000404 	addi	r8,sp,16
    173c:	003e1806 	br	fa0 <__alt_mem_Flash_flash_data+0xf4000fa0>
    1740:	db002d17 	ldw	r12,180(sp)
    1744:	dac02d17 	ldw	r11,180(sp)
    1748:	d8c02915 	stw	r3,164(sp)
    174c:	63000017 	ldw	r12,0(r12)
    1750:	5ac00117 	ldw	r11,4(r11)
    1754:	d9802785 	stb	r6,158(sp)
    1758:	6009883a 	mov	r4,r12
    175c:	580b883a 	mov	r5,r11
    1760:	db003715 	stw	r12,220(sp)
    1764:	da004015 	stw	r8,256(sp)
    1768:	da403f15 	stw	r9,252(sp)
    176c:	dac03815 	stw	r11,224(sp)
    1770:	0009dec0 	call	9dec <__fpclassifyd>
    1774:	db002d17 	ldw	r12,180(sp)
    1778:	04800044 	movi	r18,1
    177c:	da004017 	ldw	r8,256(sp)
    1780:	64c00204 	addi	r19,r12,8
    1784:	da403f17 	ldw	r9,252(sp)
    1788:	d9003717 	ldw	r4,220(sp)
    178c:	d9403817 	ldw	r5,224(sp)
    1790:	1483561e 	bne	r2,r18,24ec <___svfprintf_internal_r+0x15fc>
    1794:	000d883a 	mov	r6,zero
    1798:	000f883a 	mov	r7,zero
    179c:	000ef9c0 	call	ef9c <__ledf2>
    17a0:	da004017 	ldw	r8,256(sp)
    17a4:	1004ee16 	blt	r2,zero,2b60 <___svfprintf_internal_r+0x1c70>
    17a8:	dd402783 	ldbu	r21,158(sp)
    17ac:	008011c4 	movi	r2,71
    17b0:	1404440e 	bge	r2,r16,28c4 <___svfprintf_internal_r+0x19d4>
    17b4:	00c000b4 	movhi	r3,2
    17b8:	18c37a04 	addi	r3,r3,3560
    17bc:	d8c03115 	stw	r3,196(sp)
    17c0:	02c000c4 	movi	r11,3
    17c4:	00bfdfc4 	movi	r2,-129
    17c8:	dac02a15 	stw	r11,168(sp)
    17cc:	88a2703a 	and	r17,r17,r2
    17d0:	dcc02d15 	stw	r19,180(sp)
    17d4:	5825883a 	mov	r18,r11
    17d8:	d8003215 	stw	zero,200(sp)
    17dc:	d8003415 	stw	zero,208(sp)
    17e0:	003eef06 	br	13a0 <__alt_mem_Flash_flash_data+0xf40013a0>
    17e4:	8c400214 	ori	r17,r17,8
    17e8:	1805883a 	mov	r2,r3
    17ec:	1c000007 	ldb	r16,0(r3)
    17f0:	003e1506 	br	1048 <__alt_mem_Flash_flash_data+0xf4001048>
    17f4:	8c400414 	ori	r17,r17,16
    17f8:	d8c02915 	stw	r3,164(sp)
    17fc:	88c0080c 	andi	r3,r17,32
    1800:	d8802d17 	ldw	r2,180(sp)
    1804:	18005526 	beq	r3,zero,195c <___svfprintf_internal_r+0xa6c>
    1808:	dac02d17 	ldw	r11,180(sp)
    180c:	14c00017 	ldw	r19,0(r2)
    1810:	17000117 	ldw	fp,4(r2)
    1814:	5ac00204 	addi	r11,r11,8
    1818:	dac02d15 	stw	r11,180(sp)
    181c:	00800044 	movi	r2,1
    1820:	9f06b03a 	or	r3,r19,fp
    1824:	d8002785 	stb	zero,158(sp)
    1828:	da403215 	stw	r9,200(sp)
    182c:	002b883a 	mov	r21,zero
    1830:	003eb406 	br	1304 <__alt_mem_Flash_flash_data+0xf4001304>
    1834:	030000b4 	movhi	r12,2
    1838:	63037d04 	addi	r12,r12,3572
    183c:	d8c02915 	stw	r3,164(sp)
    1840:	d9802785 	stb	r6,158(sp)
    1844:	db003b15 	stw	r12,236(sp)
    1848:	88c0080c 	andi	r3,r17,32
    184c:	d8802d17 	ldw	r2,180(sp)
    1850:	18005626 	beq	r3,zero,19ac <___svfprintf_internal_r+0xabc>
    1854:	dac02d17 	ldw	r11,180(sp)
    1858:	14c00017 	ldw	r19,0(r2)
    185c:	17000117 	ldw	fp,4(r2)
    1860:	5ac00204 	addi	r11,r11,8
    1864:	dac02d15 	stw	r11,180(sp)
    1868:	8880004c 	andi	r2,r17,1
    186c:	10029326 	beq	r2,zero,22bc <___svfprintf_internal_r+0x13cc>
    1870:	9f06b03a 	or	r3,r19,fp
    1874:	18033526 	beq	r3,zero,254c <___svfprintf_internal_r+0x165c>
    1878:	00800c04 	movi	r2,48
    187c:	d8802705 	stb	r2,156(sp)
    1880:	dc002745 	stb	r16,157(sp)
    1884:	8c400094 	ori	r17,r17,2
    1888:	00800084 	movi	r2,2
    188c:	003fe506 	br	1824 <__alt_mem_Flash_flash_data+0xf4001824>
    1890:	1805883a 	mov	r2,r3
    1894:	d8002e15 	stw	zero,184(sp)
    1898:	82fff404 	addi	r11,r16,-48
    189c:	0019883a 	mov	r12,zero
    18a0:	14000007 	ldb	r16,0(r2)
    18a4:	630002a4 	muli	r12,r12,10
    18a8:	18c00044 	addi	r3,r3,1
    18ac:	1805883a 	mov	r2,r3
    18b0:	62d9883a 	add	r12,r12,r11
    18b4:	82fff404 	addi	r11,r16,-48
    18b8:	2afff92e 	bgeu	r5,r11,18a0 <__alt_mem_Flash_flash_data+0xf40018a0>
    18bc:	db002e15 	stw	r12,184(sp)
    18c0:	003de206 	br	104c <__alt_mem_Flash_flash_data+0xf400104c>
    18c4:	8c400814 	ori	r17,r17,32
    18c8:	1805883a 	mov	r2,r3
    18cc:	1c000007 	ldb	r16,0(r3)
    18d0:	003ddd06 	br	1048 <__alt_mem_Flash_flash_data+0xf4001048>
    18d4:	dac02d17 	ldw	r11,180(sp)
    18d8:	db002d17 	ldw	r12,180(sp)
    18dc:	d8c02915 	stw	r3,164(sp)
    18e0:	5ac00017 	ldw	r11,0(r11)
    18e4:	d8002785 	stb	zero,158(sp)
    18e8:	64c00104 	addi	r19,r12,4
    18ec:	dac03115 	stw	r11,196(sp)
    18f0:	58048126 	beq	r11,zero,2af8 <___svfprintf_internal_r+0x1c08>
    18f4:	d9003117 	ldw	r4,196(sp)
    18f8:	48041716 	blt	r9,zero,2958 <___svfprintf_internal_r+0x1a68>
    18fc:	480d883a 	mov	r6,r9
    1900:	000b883a 	mov	r5,zero
    1904:	da004015 	stw	r8,256(sp)
    1908:	da403f15 	stw	r9,252(sp)
    190c:	00083fc0 	call	83fc <memchr>
    1910:	da004017 	ldw	r8,256(sp)
    1914:	da403f17 	ldw	r9,252(sp)
    1918:	1004db26 	beq	r2,zero,2c88 <___svfprintf_internal_r+0x1d98>
    191c:	d8c03117 	ldw	r3,196(sp)
    1920:	10e5c83a 	sub	r18,r2,r3
    1924:	4c80010e 	bge	r9,r18,192c <___svfprintf_internal_r+0xa3c>
    1928:	4825883a 	mov	r18,r9
    192c:	9005883a 	mov	r2,r18
    1930:	90040e16 	blt	r18,zero,296c <___svfprintf_internal_r+0x1a7c>
    1934:	dd402783 	ldbu	r21,158(sp)
    1938:	d8802a15 	stw	r2,168(sp)
    193c:	dcc02d15 	stw	r19,180(sp)
    1940:	d8003215 	stw	zero,200(sp)
    1944:	d8003415 	stw	zero,208(sp)
    1948:	003e9506 	br	13a0 <__alt_mem_Flash_flash_data+0xf40013a0>
    194c:	d8c02915 	stw	r3,164(sp)
    1950:	88c0080c 	andi	r3,r17,32
    1954:	d8802d17 	ldw	r2,180(sp)
    1958:	183fab1e 	bne	r3,zero,1808 <__alt_mem_Flash_flash_data+0xf4001808>
    195c:	88c0040c 	andi	r3,r17,16
    1960:	1802681e 	bne	r3,zero,2304 <___svfprintf_internal_r+0x1414>
    1964:	88c0100c 	andi	r3,r17,64
    1968:	18026626 	beq	r3,zero,2304 <___svfprintf_internal_r+0x1414>
    196c:	dac02d17 	ldw	r11,180(sp)
    1970:	14c0000b 	ldhu	r19,0(r2)
    1974:	0039883a 	mov	fp,zero
    1978:	5ac00104 	addi	r11,r11,4
    197c:	dac02d15 	stw	r11,180(sp)
    1980:	00800044 	movi	r2,1
    1984:	9807883a 	mov	r3,r19
    1988:	003fa606 	br	1824 <__alt_mem_Flash_flash_data+0xf4001824>
    198c:	008000b4 	movhi	r2,2
    1990:	10838204 	addi	r2,r2,3592
    1994:	d8c02915 	stw	r3,164(sp)
    1998:	d8803b15 	stw	r2,236(sp)
    199c:	d9802785 	stb	r6,158(sp)
    19a0:	88c0080c 	andi	r3,r17,32
    19a4:	d8802d17 	ldw	r2,180(sp)
    19a8:	183faa1e 	bne	r3,zero,1854 <__alt_mem_Flash_flash_data+0xf4001854>
    19ac:	88c0040c 	andi	r3,r17,16
    19b0:	1802e826 	beq	r3,zero,2554 <___svfprintf_internal_r+0x1664>
    19b4:	db002d17 	ldw	r12,180(sp)
    19b8:	14c00017 	ldw	r19,0(r2)
    19bc:	0039883a 	mov	fp,zero
    19c0:	63000104 	addi	r12,r12,4
    19c4:	db002d15 	stw	r12,180(sp)
    19c8:	003fa706 	br	1868 <__alt_mem_Flash_flash_data+0xf4001868>
    19cc:	30803fcc 	andi	r2,r6,255
    19d0:	1080201c 	xori	r2,r2,128
    19d4:	10bfe004 	addi	r2,r2,-128
    19d8:	1002d91e 	bne	r2,zero,2540 <___svfprintf_internal_r+0x1650>
    19dc:	1805883a 	mov	r2,r3
    19e0:	01800804 	movi	r6,32
    19e4:	1c000007 	ldb	r16,0(r3)
    19e8:	003d9706 	br	1048 <__alt_mem_Flash_flash_data+0xf4001048>
    19ec:	8c400054 	ori	r17,r17,1
    19f0:	1805883a 	mov	r2,r3
    19f4:	1c000007 	ldb	r16,0(r3)
    19f8:	003d9306 	br	1048 <__alt_mem_Flash_flash_data+0xf4001048>
    19fc:	dac02d17 	ldw	r11,180(sp)
    1a00:	db002d17 	ldw	r12,180(sp)
    1a04:	5ac00017 	ldw	r11,0(r11)
    1a08:	dac02e15 	stw	r11,184(sp)
    1a0c:	62c00104 	addi	r11,r12,4
    1a10:	db002e17 	ldw	r12,184(sp)
    1a14:	60033e16 	blt	r12,zero,2710 <___svfprintf_internal_r+0x1820>
    1a18:	dac02d15 	stw	r11,180(sp)
    1a1c:	1805883a 	mov	r2,r3
    1a20:	1c000007 	ldb	r16,0(r3)
    1a24:	003d8806 	br	1048 <__alt_mem_Flash_flash_data+0xf4001048>
    1a28:	1805883a 	mov	r2,r3
    1a2c:	01800ac4 	movi	r6,43
    1a30:	1c000007 	ldb	r16,0(r3)
    1a34:	003d8406 	br	1048 <__alt_mem_Flash_flash_data+0xf4001048>
    1a38:	8c401014 	ori	r17,r17,64
    1a3c:	1805883a 	mov	r2,r3
    1a40:	1c000007 	ldb	r16,0(r3)
    1a44:	003d8006 	br	1048 <__alt_mem_Flash_flash_data+0xf4001048>
    1a48:	1c000007 	ldb	r16,0(r3)
    1a4c:	81c33626 	beq	r16,r7,2728 <___svfprintf_internal_r+0x1838>
    1a50:	8c400414 	ori	r17,r17,16
    1a54:	1805883a 	mov	r2,r3
    1a58:	003d7b06 	br	1048 <__alt_mem_Flash_flash_data+0xf4001048>
    1a5c:	d8c02915 	stw	r3,164(sp)
    1a60:	d9802785 	stb	r6,158(sp)
    1a64:	8880080c 	andi	r2,r17,32
    1a68:	1002c226 	beq	r2,zero,2574 <___svfprintf_internal_r+0x1684>
    1a6c:	db002d17 	ldw	r12,180(sp)
    1a70:	dac03017 	ldw	r11,192(sp)
    1a74:	60800017 	ldw	r2,0(r12)
    1a78:	5807d7fa 	srai	r3,r11,31
    1a7c:	63000104 	addi	r12,r12,4
    1a80:	db002d15 	stw	r12,180(sp)
    1a84:	12c00015 	stw	r11,0(r2)
    1a88:	10c00115 	stw	r3,4(r2)
    1a8c:	003d4406 	br	fa0 <__alt_mem_Flash_flash_data+0xf4000fa0>
    1a90:	db002d17 	ldw	r12,180(sp)
    1a94:	00800c04 	movi	r2,48
    1a98:	d8802705 	stb	r2,156(sp)
    1a9c:	64c00017 	ldw	r19,0(r12)
    1aa0:	00801e04 	movi	r2,120
    1aa4:	d8802745 	stb	r2,157(sp)
    1aa8:	008000b4 	movhi	r2,2
    1aac:	10838204 	addi	r2,r2,3592
    1ab0:	63000104 	addi	r12,r12,4
    1ab4:	d8c02915 	stw	r3,164(sp)
    1ab8:	d8803b15 	stw	r2,236(sp)
    1abc:	0039883a 	mov	fp,zero
    1ac0:	8c400094 	ori	r17,r17,2
    1ac4:	db002d15 	stw	r12,180(sp)
    1ac8:	00800084 	movi	r2,2
    1acc:	04001e04 	movi	r16,120
    1ad0:	9807883a 	mov	r3,r19
    1ad4:	003f5306 	br	1824 <__alt_mem_Flash_flash_data+0xf4001824>
    1ad8:	db002d17 	ldw	r12,180(sp)
    1adc:	d8c02915 	stw	r3,164(sp)
    1ae0:	dac01404 	addi	r11,sp,80
    1ae4:	60800017 	ldw	r2,0(r12)
    1ae8:	00c00044 	movi	r3,1
    1aec:	63000104 	addi	r12,r12,4
    1af0:	d8801405 	stb	r2,80(sp)
    1af4:	d8c02a15 	stw	r3,168(sp)
    1af8:	d8002785 	stb	zero,158(sp)
    1afc:	db002d15 	stw	r12,180(sp)
    1b00:	1825883a 	mov	r18,r3
    1b04:	d8003215 	stw	zero,200(sp)
    1b08:	d8003415 	stw	zero,208(sp)
    1b0c:	dac03115 	stw	r11,196(sp)
    1b10:	0005883a 	mov	r2,zero
    1b14:	003e2906 	br	13bc <__alt_mem_Flash_flash_data+0xf40013bc>
    1b18:	d8c02915 	stw	r3,164(sp)
    1b1c:	d9802785 	stb	r6,158(sp)
    1b20:	8880080c 	andi	r2,r17,32
    1b24:	d8c02d17 	ldw	r3,180(sp)
    1b28:	103deb1e 	bne	r2,zero,12d8 <__alt_mem_Flash_flash_data+0xf40012d8>
    1b2c:	8880040c 	andi	r2,r17,16
    1b30:	1001e51e 	bne	r2,zero,22c8 <___svfprintf_internal_r+0x13d8>
    1b34:	8880100c 	andi	r2,r17,64
    1b38:	1001e326 	beq	r2,zero,22c8 <___svfprintf_internal_r+0x13d8>
    1b3c:	1cc0000f 	ldh	r19,0(r3)
    1b40:	db002d17 	ldw	r12,180(sp)
    1b44:	9839d7fa 	srai	fp,r19,31
    1b48:	63000104 	addi	r12,r12,4
    1b4c:	db002d15 	stw	r12,180(sp)
    1b50:	e005883a 	mov	r2,fp
    1b54:	103de70e 	bge	r2,zero,12f4 <__alt_mem_Flash_flash_data+0xf40012f4>
    1b58:	04e7c83a 	sub	r19,zero,r19
    1b5c:	9804c03a 	cmpne	r2,r19,zero
    1b60:	0739c83a 	sub	fp,zero,fp
    1b64:	e0b9c83a 	sub	fp,fp,r2
    1b68:	05400b44 	movi	r21,45
    1b6c:	dd402785 	stb	r21,158(sp)
    1b70:	da403215 	stw	r9,200(sp)
    1b74:	00800044 	movi	r2,1
    1b78:	9f06b03a 	or	r3,r19,fp
    1b7c:	003de106 	br	1304 <__alt_mem_Flash_flash_data+0xf4001304>
    1b80:	8c400414 	ori	r17,r17,16
    1b84:	d8c02915 	stw	r3,164(sp)
    1b88:	8880080c 	andi	r2,r17,32
    1b8c:	10000b26 	beq	r2,zero,1bbc <___svfprintf_internal_r+0xccc>
    1b90:	db002d17 	ldw	r12,180(sp)
    1b94:	0005883a 	mov	r2,zero
    1b98:	64c00017 	ldw	r19,0(r12)
    1b9c:	67000117 	ldw	fp,4(r12)
    1ba0:	63000204 	addi	r12,r12,8
    1ba4:	db002d15 	stw	r12,180(sp)
    1ba8:	9f06b03a 	or	r3,r19,fp
    1bac:	003f1d06 	br	1824 <__alt_mem_Flash_flash_data+0xf4001824>
    1bb0:	d8c02915 	stw	r3,164(sp)
    1bb4:	8880080c 	andi	r2,r17,32
    1bb8:	103ff51e 	bne	r2,zero,1b90 <__alt_mem_Flash_flash_data+0xf4001b90>
    1bbc:	8880040c 	andi	r2,r17,16
    1bc0:	1001c81e 	bne	r2,zero,22e4 <___svfprintf_internal_r+0x13f4>
    1bc4:	8880100c 	andi	r2,r17,64
    1bc8:	1001c626 	beq	r2,zero,22e4 <___svfprintf_internal_r+0x13f4>
    1bcc:	db002d17 	ldw	r12,180(sp)
    1bd0:	0039883a 	mov	fp,zero
    1bd4:	0005883a 	mov	r2,zero
    1bd8:	64c0000b 	ldhu	r19,0(r12)
    1bdc:	63000104 	addi	r12,r12,4
    1be0:	db002d15 	stw	r12,180(sp)
    1be4:	9807883a 	mov	r3,r19
    1be8:	003f0e06 	br	1824 <__alt_mem_Flash_flash_data+0xf4001824>
    1bec:	d8c02915 	stw	r3,164(sp)
    1bf0:	d9802785 	stb	r6,158(sp)
    1bf4:	803d8026 	beq	r16,zero,11f8 <__alt_mem_Flash_flash_data+0xf40011f8>
    1bf8:	02c00044 	movi	r11,1
    1bfc:	db001404 	addi	r12,sp,80
    1c00:	dac02a15 	stw	r11,168(sp)
    1c04:	dc001405 	stb	r16,80(sp)
    1c08:	d8002785 	stb	zero,158(sp)
    1c0c:	5825883a 	mov	r18,r11
    1c10:	d8003215 	stw	zero,200(sp)
    1c14:	d8003415 	stw	zero,208(sp)
    1c18:	db003115 	stw	r12,196(sp)
    1c1c:	0005883a 	mov	r2,zero
    1c20:	003de606 	br	13bc <__alt_mem_Flash_flash_data+0xf40013bc>
    1c24:	d8c02017 	ldw	r3,128(sp)
    1c28:	003e2706 	br	14c8 <__alt_mem_Flash_flash_data+0xf40014c8>
    1c2c:	10803fcc 	andi	r2,r2,255
    1c30:	00c00044 	movi	r3,1
    1c34:	10fdbb1e 	bne	r2,r3,1324 <__alt_mem_Flash_flash_data+0xf4001324>
    1c38:	e000021e 	bne	fp,zero,1c44 <___svfprintf_internal_r+0xd54>
    1c3c:	00800244 	movi	r2,9
    1c40:	14c01f2e 	bgeu	r2,r19,1cc0 <___svfprintf_internal_r+0xdd0>
    1c44:	dc002a15 	stw	r16,168(sp)
    1c48:	dc402b15 	stw	r17,172(sp)
    1c4c:	9821883a 	mov	r16,r19
    1c50:	e023883a 	mov	r17,fp
    1c54:	b025883a 	mov	r18,r22
    1c58:	4827883a 	mov	r19,r9
    1c5c:	4039883a 	mov	fp,r8
    1c60:	8009883a 	mov	r4,r16
    1c64:	880b883a 	mov	r5,r17
    1c68:	01800284 	movi	r6,10
    1c6c:	000f883a 	mov	r7,zero
    1c70:	000d6140 	call	d614 <__umoddi3>
    1c74:	10800c04 	addi	r2,r2,48
    1c78:	94bfffc4 	addi	r18,r18,-1
    1c7c:	8009883a 	mov	r4,r16
    1c80:	880b883a 	mov	r5,r17
    1c84:	01800284 	movi	r6,10
    1c88:	000f883a 	mov	r7,zero
    1c8c:	90800005 	stb	r2,0(r18)
    1c90:	000d0540 	call	d054 <__udivdi3>
    1c94:	1021883a 	mov	r16,r2
    1c98:	10c4b03a 	or	r2,r2,r3
    1c9c:	1823883a 	mov	r17,r3
    1ca0:	103fef1e 	bne	r2,zero,1c60 <__alt_mem_Flash_flash_data+0xf4001c60>
    1ca4:	dc803115 	stw	r18,196(sp)
    1ca8:	dc002a17 	ldw	r16,168(sp)
    1cac:	dc402b17 	ldw	r17,172(sp)
    1cb0:	9813883a 	mov	r9,r19
    1cb4:	e011883a 	mov	r8,fp
    1cb8:	b4a5c83a 	sub	r18,r22,r18
    1cbc:	003db306 	br	138c <__alt_mem_Flash_flash_data+0xf400138c>
    1cc0:	9cc00c04 	addi	r19,r19,48
    1cc4:	db001dc4 	addi	r12,sp,119
    1cc8:	dcc01dc5 	stb	r19,119(sp)
    1ccc:	dc803d17 	ldw	r18,244(sp)
    1cd0:	db003115 	stw	r12,196(sp)
    1cd4:	003dad06 	br	138c <__alt_mem_Flash_flash_data+0xf400138c>
    1cd8:	00801944 	movi	r2,101
    1cdc:	14008d0e 	bge	r2,r16,1f14 <___svfprintf_internal_r+0x1024>
    1ce0:	d9003717 	ldw	r4,220(sp)
    1ce4:	d9403817 	ldw	r5,224(sp)
    1ce8:	000d883a 	mov	r6,zero
    1cec:	000f883a 	mov	r7,zero
    1cf0:	d8c03e15 	stw	r3,248(sp)
    1cf4:	da004015 	stw	r8,256(sp)
    1cf8:	000ee380 	call	ee38 <__eqdf2>
    1cfc:	d8c03e17 	ldw	r3,248(sp)
    1d00:	da004017 	ldw	r8,256(sp)
    1d04:	1000fd1e 	bne	r2,zero,20fc <___svfprintf_internal_r+0x120c>
    1d08:	d8801f17 	ldw	r2,124(sp)
    1d0c:	010000b4 	movhi	r4,2
    1d10:	21038904 	addi	r4,r4,3620
    1d14:	18c00044 	addi	r3,r3,1
    1d18:	10800044 	addi	r2,r2,1
    1d1c:	41000015 	stw	r4,0(r8)
    1d20:	01000044 	movi	r4,1
    1d24:	41000115 	stw	r4,4(r8)
    1d28:	d8c02015 	stw	r3,128(sp)
    1d2c:	d8801f15 	stw	r2,124(sp)
    1d30:	010001c4 	movi	r4,7
    1d34:	20823316 	blt	r4,r2,2604 <___svfprintf_internal_r+0x1714>
    1d38:	42000204 	addi	r8,r8,8
    1d3c:	d8802617 	ldw	r2,152(sp)
    1d40:	dac03317 	ldw	r11,204(sp)
    1d44:	12c00216 	blt	r2,r11,1d50 <___svfprintf_internal_r+0xe60>
    1d48:	8880004c 	andi	r2,r17,1
    1d4c:	103e3d26 	beq	r2,zero,1644 <__alt_mem_Flash_flash_data+0xf4001644>
    1d50:	db003917 	ldw	r12,228(sp)
    1d54:	d8801f17 	ldw	r2,124(sp)
    1d58:	dac03517 	ldw	r11,212(sp)
    1d5c:	1b07883a 	add	r3,r3,r12
    1d60:	10800044 	addi	r2,r2,1
    1d64:	42c00015 	stw	r11,0(r8)
    1d68:	43000115 	stw	r12,4(r8)
    1d6c:	d8c02015 	stw	r3,128(sp)
    1d70:	d8801f15 	stw	r2,124(sp)
    1d74:	010001c4 	movi	r4,7
    1d78:	20826f16 	blt	r4,r2,2738 <___svfprintf_internal_r+0x1848>
    1d7c:	42000204 	addi	r8,r8,8
    1d80:	db003317 	ldw	r12,204(sp)
    1d84:	643fffc4 	addi	r16,r12,-1
    1d88:	043e2e0e 	bge	zero,r16,1644 <__alt_mem_Flash_flash_data+0xf4001644>
    1d8c:	04800404 	movi	r18,16
    1d90:	d8801f17 	ldw	r2,124(sp)
    1d94:	9400a00e 	bge	r18,r16,2018 <___svfprintf_internal_r+0x1128>
    1d98:	014000b4 	movhi	r5,2
    1d9c:	29438984 	addi	r5,r5,3622
    1da0:	d9402b15 	stw	r5,172(sp)
    1da4:	054001c4 	movi	r21,7
    1da8:	dcc02f17 	ldw	r19,188(sp)
    1dac:	00000306 	br	1dbc <___svfprintf_internal_r+0xecc>
    1db0:	42000204 	addi	r8,r8,8
    1db4:	843ffc04 	addi	r16,r16,-16
    1db8:	94009a0e 	bge	r18,r16,2024 <___svfprintf_internal_r+0x1134>
    1dbc:	18c00404 	addi	r3,r3,16
    1dc0:	10800044 	addi	r2,r2,1
    1dc4:	45000015 	stw	r20,0(r8)
    1dc8:	44800115 	stw	r18,4(r8)
    1dcc:	d8c02015 	stw	r3,128(sp)
    1dd0:	d8801f15 	stw	r2,124(sp)
    1dd4:	a8bff60e 	bge	r21,r2,1db0 <__alt_mem_Flash_flash_data+0xf4001db0>
    1dd8:	9809883a 	mov	r4,r19
    1ddc:	b80b883a 	mov	r5,r23
    1de0:	b00d883a 	mov	r6,r22
    1de4:	000a0940 	call	a094 <__ssprint_r>
    1de8:	103d091e 	bne	r2,zero,1210 <__alt_mem_Flash_flash_data+0xf4001210>
    1dec:	d8c02017 	ldw	r3,128(sp)
    1df0:	d8801f17 	ldw	r2,124(sp)
    1df4:	da000404 	addi	r8,sp,16
    1df8:	003fee06 	br	1db4 <__alt_mem_Flash_flash_data+0xf4001db4>
    1dfc:	dac02e17 	ldw	r11,184(sp)
    1e00:	db002a17 	ldw	r12,168(sp)
    1e04:	5b2bc83a 	sub	r21,r11,r12
    1e08:	057dcd0e 	bge	zero,r21,1540 <__alt_mem_Flash_flash_data+0xf4001540>
    1e0c:	07000404 	movi	fp,16
    1e10:	d8801f17 	ldw	r2,124(sp)
    1e14:	e5435d0e 	bge	fp,r21,2b8c <___svfprintf_internal_r+0x1c9c>
    1e18:	014000b4 	movhi	r5,2
    1e1c:	a809883a 	mov	r4,r21
    1e20:	29438984 	addi	r5,r5,3622
    1e24:	dc002c15 	stw	r16,176(sp)
    1e28:	902b883a 	mov	r21,r18
    1e2c:	d9402b15 	stw	r5,172(sp)
    1e30:	8825883a 	mov	r18,r17
    1e34:	04c001c4 	movi	r19,7
    1e38:	dc002f17 	ldw	r16,188(sp)
    1e3c:	2023883a 	mov	r17,r4
    1e40:	00000306 	br	1e50 <___svfprintf_internal_r+0xf60>
    1e44:	8c7ffc04 	addi	r17,r17,-16
    1e48:	42000204 	addi	r8,r8,8
    1e4c:	e440110e 	bge	fp,r17,1e94 <___svfprintf_internal_r+0xfa4>
    1e50:	18c00404 	addi	r3,r3,16
    1e54:	10800044 	addi	r2,r2,1
    1e58:	45000015 	stw	r20,0(r8)
    1e5c:	47000115 	stw	fp,4(r8)
    1e60:	d8c02015 	stw	r3,128(sp)
    1e64:	d8801f15 	stw	r2,124(sp)
    1e68:	98bff60e 	bge	r19,r2,1e44 <__alt_mem_Flash_flash_data+0xf4001e44>
    1e6c:	8009883a 	mov	r4,r16
    1e70:	b80b883a 	mov	r5,r23
    1e74:	b00d883a 	mov	r6,r22
    1e78:	000a0940 	call	a094 <__ssprint_r>
    1e7c:	103ce41e 	bne	r2,zero,1210 <__alt_mem_Flash_flash_data+0xf4001210>
    1e80:	8c7ffc04 	addi	r17,r17,-16
    1e84:	d8c02017 	ldw	r3,128(sp)
    1e88:	d8801f17 	ldw	r2,124(sp)
    1e8c:	da000404 	addi	r8,sp,16
    1e90:	e47fef16 	blt	fp,r17,1e50 <__alt_mem_Flash_flash_data+0xf4001e50>
    1e94:	dc002c17 	ldw	r16,176(sp)
    1e98:	8809883a 	mov	r4,r17
    1e9c:	9023883a 	mov	r17,r18
    1ea0:	a825883a 	mov	r18,r21
    1ea4:	202b883a 	mov	r21,r4
    1ea8:	dac02b17 	ldw	r11,172(sp)
    1eac:	1d47883a 	add	r3,r3,r21
    1eb0:	10800044 	addi	r2,r2,1
    1eb4:	42c00015 	stw	r11,0(r8)
    1eb8:	45400115 	stw	r21,4(r8)
    1ebc:	d8c02015 	stw	r3,128(sp)
    1ec0:	d8801f15 	stw	r2,124(sp)
    1ec4:	010001c4 	movi	r4,7
    1ec8:	20818016 	blt	r4,r2,24cc <___svfprintf_internal_r+0x15dc>
    1ecc:	42000204 	addi	r8,r8,8
    1ed0:	003d9b06 	br	1540 <__alt_mem_Flash_flash_data+0xf4001540>
    1ed4:	d9403b17 	ldw	r5,236(sp)
    1ed8:	b007883a 	mov	r3,r22
    1edc:	988003cc 	andi	r2,r19,15
    1ee0:	e008973a 	slli	r4,fp,28
    1ee4:	2885883a 	add	r2,r5,r2
    1ee8:	9826d13a 	srli	r19,r19,4
    1eec:	10800003 	ldbu	r2,0(r2)
    1ef0:	e038d13a 	srli	fp,fp,4
    1ef4:	18ffffc4 	addi	r3,r3,-1
    1ef8:	24e6b03a 	or	r19,r4,r19
    1efc:	18800005 	stb	r2,0(r3)
    1f00:	9f04b03a 	or	r2,r19,fp
    1f04:	103ff51e 	bne	r2,zero,1edc <__alt_mem_Flash_flash_data+0xf4001edc>
    1f08:	d8c03115 	stw	r3,196(sp)
    1f0c:	b0e5c83a 	sub	r18,r22,r3
    1f10:	003d1e06 	br	138c <__alt_mem_Flash_flash_data+0xf400138c>
    1f14:	db003317 	ldw	r12,204(sp)
    1f18:	00800044 	movi	r2,1
    1f1c:	18c00044 	addi	r3,r3,1
    1f20:	13014b0e 	bge	r2,r12,2450 <___svfprintf_internal_r+0x1560>
    1f24:	dc001f17 	ldw	r16,124(sp)
    1f28:	dac03117 	ldw	r11,196(sp)
    1f2c:	00800044 	movi	r2,1
    1f30:	84000044 	addi	r16,r16,1
    1f34:	40800115 	stw	r2,4(r8)
    1f38:	42c00015 	stw	r11,0(r8)
    1f3c:	d8c02015 	stw	r3,128(sp)
    1f40:	dc001f15 	stw	r16,124(sp)
    1f44:	008001c4 	movi	r2,7
    1f48:	14014e16 	blt	r2,r16,2484 <___svfprintf_internal_r+0x1594>
    1f4c:	42000204 	addi	r8,r8,8
    1f50:	db003917 	ldw	r12,228(sp)
    1f54:	dac03517 	ldw	r11,212(sp)
    1f58:	84000044 	addi	r16,r16,1
    1f5c:	1b07883a 	add	r3,r3,r12
    1f60:	42c00015 	stw	r11,0(r8)
    1f64:	43000115 	stw	r12,4(r8)
    1f68:	d8c02015 	stw	r3,128(sp)
    1f6c:	dc001f15 	stw	r16,124(sp)
    1f70:	008001c4 	movi	r2,7
    1f74:	14014c16 	blt	r2,r16,24a8 <___svfprintf_internal_r+0x15b8>
    1f78:	44800204 	addi	r18,r8,8
    1f7c:	d9003717 	ldw	r4,220(sp)
    1f80:	d9403817 	ldw	r5,224(sp)
    1f84:	000d883a 	mov	r6,zero
    1f88:	000f883a 	mov	r7,zero
    1f8c:	d8c03e15 	stw	r3,248(sp)
    1f90:	000ee380 	call	ee38 <__eqdf2>
    1f94:	d8c03e17 	ldw	r3,248(sp)
    1f98:	db003317 	ldw	r12,204(sp)
    1f9c:	10009526 	beq	r2,zero,21f4 <___svfprintf_internal_r+0x1304>
    1fa0:	dac03117 	ldw	r11,196(sp)
    1fa4:	60bfffc4 	addi	r2,r12,-1
    1fa8:	1887883a 	add	r3,r3,r2
    1fac:	59000044 	addi	r4,r11,1
    1fb0:	84000044 	addi	r16,r16,1
    1fb4:	90800115 	stw	r2,4(r18)
    1fb8:	91000015 	stw	r4,0(r18)
    1fbc:	d8c02015 	stw	r3,128(sp)
    1fc0:	dc001f15 	stw	r16,124(sp)
    1fc4:	008001c4 	movi	r2,7
    1fc8:	1400b316 	blt	r2,r16,2298 <___svfprintf_internal_r+0x13a8>
    1fcc:	94800204 	addi	r18,r18,8
    1fd0:	dac03a17 	ldw	r11,232(sp)
    1fd4:	dd4022c4 	addi	r21,sp,139
    1fd8:	84000044 	addi	r16,r16,1
    1fdc:	1ac7883a 	add	r3,r3,r11
    1fe0:	95400015 	stw	r21,0(r18)
    1fe4:	92c00115 	stw	r11,4(r18)
    1fe8:	d8c02015 	stw	r3,128(sp)
    1fec:	dc001f15 	stw	r16,124(sp)
    1ff0:	008001c4 	movi	r2,7
    1ff4:	14001416 	blt	r2,r16,2048 <___svfprintf_internal_r+0x1158>
    1ff8:	92000204 	addi	r8,r18,8
    1ffc:	003d9106 	br	1644 <__alt_mem_Flash_flash_data+0xf4001644>
    2000:	d9002f17 	ldw	r4,188(sp)
    2004:	b80b883a 	mov	r5,r23
    2008:	b00d883a 	mov	r6,r22
    200c:	000a0940 	call	a094 <__ssprint_r>
    2010:	103dc826 	beq	r2,zero,1734 <__alt_mem_Flash_flash_data+0xf4001734>
    2014:	003c7e06 	br	1210 <__alt_mem_Flash_flash_data+0xf4001210>
    2018:	010000b4 	movhi	r4,2
    201c:	21038984 	addi	r4,r4,3622
    2020:	d9002b15 	stw	r4,172(sp)
    2024:	dac02b17 	ldw	r11,172(sp)
    2028:	1c07883a 	add	r3,r3,r16
    202c:	44000115 	stw	r16,4(r8)
    2030:	42c00015 	stw	r11,0(r8)
    2034:	10800044 	addi	r2,r2,1
    2038:	d8c02015 	stw	r3,128(sp)
    203c:	d8801f15 	stw	r2,124(sp)
    2040:	010001c4 	movi	r4,7
    2044:	20bd7e0e 	bge	r4,r2,1640 <__alt_mem_Flash_flash_data+0xf4001640>
    2048:	d9002f17 	ldw	r4,188(sp)
    204c:	b80b883a 	mov	r5,r23
    2050:	b00d883a 	mov	r6,r22
    2054:	000a0940 	call	a094 <__ssprint_r>
    2058:	103c6d1e 	bne	r2,zero,1210 <__alt_mem_Flash_flash_data+0xf4001210>
    205c:	d8c02017 	ldw	r3,128(sp)
    2060:	da000404 	addi	r8,sp,16
    2064:	003d7706 	br	1644 <__alt_mem_Flash_flash_data+0xf4001644>
    2068:	10803fcc 	andi	r2,r2,255
    206c:	1000201e 	bne	r2,zero,20f0 <___svfprintf_internal_r+0x1200>
    2070:	8880004c 	andi	r2,r17,1
    2074:	10001e26 	beq	r2,zero,20f0 <___svfprintf_internal_r+0x1200>
    2078:	00800c04 	movi	r2,48
    207c:	d8c01dc4 	addi	r3,sp,119
    2080:	d8801dc5 	stb	r2,119(sp)
    2084:	dc803d17 	ldw	r18,244(sp)
    2088:	d8c03115 	stw	r3,196(sp)
    208c:	003cbf06 	br	138c <__alt_mem_Flash_flash_data+0xf400138c>
    2090:	d9002f17 	ldw	r4,188(sp)
    2094:	b80b883a 	mov	r5,r23
    2098:	b00d883a 	mov	r6,r22
    209c:	000a0940 	call	a094 <__ssprint_r>
    20a0:	103c5b1e 	bne	r2,zero,1210 <__alt_mem_Flash_flash_data+0xf4001210>
    20a4:	d8c02017 	ldw	r3,128(sp)
    20a8:	da000404 	addi	r8,sp,16
    20ac:	003d5806 	br	1610 <__alt_mem_Flash_flash_data+0xf4001610>
    20b0:	d9002f17 	ldw	r4,188(sp)
    20b4:	b80b883a 	mov	r5,r23
    20b8:	b00d883a 	mov	r6,r22
    20bc:	000a0940 	call	a094 <__ssprint_r>
    20c0:	103c531e 	bne	r2,zero,1210 <__alt_mem_Flash_flash_data+0xf4001210>
    20c4:	d8c02017 	ldw	r3,128(sp)
    20c8:	da000404 	addi	r8,sp,16
    20cc:	003d1906 	br	1534 <__alt_mem_Flash_flash_data+0xf4001534>
    20d0:	d9002f17 	ldw	r4,188(sp)
    20d4:	b80b883a 	mov	r5,r23
    20d8:	b00d883a 	mov	r6,r22
    20dc:	000a0940 	call	a094 <__ssprint_r>
    20e0:	103c4b1e 	bne	r2,zero,1210 <__alt_mem_Flash_flash_data+0xf4001210>
    20e4:	d8c02017 	ldw	r3,128(sp)
    20e8:	da000404 	addi	r8,sp,16
    20ec:	003d0306 	br	14fc <__alt_mem_Flash_flash_data+0xf40014fc>
    20f0:	0025883a 	mov	r18,zero
    20f4:	dd803115 	stw	r22,196(sp)
    20f8:	003ca406 	br	138c <__alt_mem_Flash_flash_data+0xf400138c>
    20fc:	dc002617 	ldw	r16,152(sp)
    2100:	0401480e 	bge	zero,r16,2624 <___svfprintf_internal_r+0x1734>
    2104:	db003117 	ldw	r12,196(sp)
    2108:	dac03317 	ldw	r11,204(sp)
    210c:	62e1883a 	add	r16,r12,r11
    2110:	db003417 	ldw	r12,208(sp)
    2114:	5825883a 	mov	r18,r11
    2118:	62c0010e 	bge	r12,r11,2120 <___svfprintf_internal_r+0x1230>
    211c:	6025883a 	mov	r18,r12
    2120:	04800b0e 	bge	zero,r18,2150 <___svfprintf_internal_r+0x1260>
    2124:	d8801f17 	ldw	r2,124(sp)
    2128:	dac03117 	ldw	r11,196(sp)
    212c:	1c87883a 	add	r3,r3,r18
    2130:	10800044 	addi	r2,r2,1
    2134:	42c00015 	stw	r11,0(r8)
    2138:	44800115 	stw	r18,4(r8)
    213c:	d8c02015 	stw	r3,128(sp)
    2140:	d8801f15 	stw	r2,124(sp)
    2144:	010001c4 	movi	r4,7
    2148:	20823f16 	blt	r4,r2,2a48 <___svfprintf_internal_r+0x1b58>
    214c:	42000204 	addi	r8,r8,8
    2150:	90023b16 	blt	r18,zero,2a40 <___svfprintf_internal_r+0x1b50>
    2154:	db003417 	ldw	r12,208(sp)
    2158:	64a5c83a 	sub	r18,r12,r18
    215c:	0480780e 	bge	zero,r18,2340 <___svfprintf_internal_r+0x1450>
    2160:	05400404 	movi	r21,16
    2164:	d8801f17 	ldw	r2,124(sp)
    2168:	ac81140e 	bge	r21,r18,25bc <___svfprintf_internal_r+0x16cc>
    216c:	014000b4 	movhi	r5,2
    2170:	29438984 	addi	r5,r5,3622
    2174:	d9402b15 	stw	r5,172(sp)
    2178:	070001c4 	movi	fp,7
    217c:	dcc02f17 	ldw	r19,188(sp)
    2180:	00000306 	br	2190 <___svfprintf_internal_r+0x12a0>
    2184:	42000204 	addi	r8,r8,8
    2188:	94bffc04 	addi	r18,r18,-16
    218c:	ac810e0e 	bge	r21,r18,25c8 <___svfprintf_internal_r+0x16d8>
    2190:	18c00404 	addi	r3,r3,16
    2194:	10800044 	addi	r2,r2,1
    2198:	45000015 	stw	r20,0(r8)
    219c:	45400115 	stw	r21,4(r8)
    21a0:	d8c02015 	stw	r3,128(sp)
    21a4:	d8801f15 	stw	r2,124(sp)
    21a8:	e0bff60e 	bge	fp,r2,2184 <__alt_mem_Flash_flash_data+0xf4002184>
    21ac:	9809883a 	mov	r4,r19
    21b0:	b80b883a 	mov	r5,r23
    21b4:	b00d883a 	mov	r6,r22
    21b8:	000a0940 	call	a094 <__ssprint_r>
    21bc:	103c141e 	bne	r2,zero,1210 <__alt_mem_Flash_flash_data+0xf4001210>
    21c0:	d8c02017 	ldw	r3,128(sp)
    21c4:	d8801f17 	ldw	r2,124(sp)
    21c8:	da000404 	addi	r8,sp,16
    21cc:	003fee06 	br	2188 <__alt_mem_Flash_flash_data+0xf4002188>
    21d0:	d9002f17 	ldw	r4,188(sp)
    21d4:	b80b883a 	mov	r5,r23
    21d8:	b00d883a 	mov	r6,r22
    21dc:	000a0940 	call	a094 <__ssprint_r>
    21e0:	103c0b1e 	bne	r2,zero,1210 <__alt_mem_Flash_flash_data+0xf4001210>
    21e4:	d8c02017 	ldw	r3,128(sp)
    21e8:	d8802787 	ldb	r2,158(sp)
    21ec:	da000404 	addi	r8,sp,16
    21f0:	003cb506 	br	14c8 <__alt_mem_Flash_flash_data+0xf40014c8>
    21f4:	657fffc4 	addi	r21,r12,-1
    21f8:	057f750e 	bge	zero,r21,1fd0 <__alt_mem_Flash_flash_data+0xf4001fd0>
    21fc:	07000404 	movi	fp,16
    2200:	e542ed0e 	bge	fp,r21,2db8 <___svfprintf_internal_r+0x1ec8>
    2204:	010000b4 	movhi	r4,2
    2208:	21038984 	addi	r4,r4,3622
    220c:	d9002b15 	stw	r4,172(sp)
    2210:	01c001c4 	movi	r7,7
    2214:	dcc02f17 	ldw	r19,188(sp)
    2218:	00000306 	br	2228 <___svfprintf_internal_r+0x1338>
    221c:	ad7ffc04 	addi	r21,r21,-16
    2220:	94800204 	addi	r18,r18,8
    2224:	e540130e 	bge	fp,r21,2274 <___svfprintf_internal_r+0x1384>
    2228:	18c00404 	addi	r3,r3,16
    222c:	84000044 	addi	r16,r16,1
    2230:	95000015 	stw	r20,0(r18)
    2234:	97000115 	stw	fp,4(r18)
    2238:	d8c02015 	stw	r3,128(sp)
    223c:	dc001f15 	stw	r16,124(sp)
    2240:	3c3ff60e 	bge	r7,r16,221c <__alt_mem_Flash_flash_data+0xf400221c>
    2244:	9809883a 	mov	r4,r19
    2248:	b80b883a 	mov	r5,r23
    224c:	b00d883a 	mov	r6,r22
    2250:	d9c03e15 	stw	r7,248(sp)
    2254:	000a0940 	call	a094 <__ssprint_r>
    2258:	d9c03e17 	ldw	r7,248(sp)
    225c:	103bec1e 	bne	r2,zero,1210 <__alt_mem_Flash_flash_data+0xf4001210>
    2260:	ad7ffc04 	addi	r21,r21,-16
    2264:	d8c02017 	ldw	r3,128(sp)
    2268:	dc001f17 	ldw	r16,124(sp)
    226c:	dc800404 	addi	r18,sp,16
    2270:	e57fed16 	blt	fp,r21,2228 <__alt_mem_Flash_flash_data+0xf4002228>
    2274:	dac02b17 	ldw	r11,172(sp)
    2278:	1d47883a 	add	r3,r3,r21
    227c:	84000044 	addi	r16,r16,1
    2280:	92c00015 	stw	r11,0(r18)
    2284:	95400115 	stw	r21,4(r18)
    2288:	d8c02015 	stw	r3,128(sp)
    228c:	dc001f15 	stw	r16,124(sp)
    2290:	008001c4 	movi	r2,7
    2294:	143f4d0e 	bge	r2,r16,1fcc <__alt_mem_Flash_flash_data+0xf4001fcc>
    2298:	d9002f17 	ldw	r4,188(sp)
    229c:	b80b883a 	mov	r5,r23
    22a0:	b00d883a 	mov	r6,r22
    22a4:	000a0940 	call	a094 <__ssprint_r>
    22a8:	103bd91e 	bne	r2,zero,1210 <__alt_mem_Flash_flash_data+0xf4001210>
    22ac:	d8c02017 	ldw	r3,128(sp)
    22b0:	dc001f17 	ldw	r16,124(sp)
    22b4:	dc800404 	addi	r18,sp,16
    22b8:	003f4506 	br	1fd0 <__alt_mem_Flash_flash_data+0xf4001fd0>
    22bc:	00800084 	movi	r2,2
    22c0:	9f06b03a 	or	r3,r19,fp
    22c4:	003d5706 	br	1824 <__alt_mem_Flash_flash_data+0xf4001824>
    22c8:	1cc00017 	ldw	r19,0(r3)
    22cc:	dac02d17 	ldw	r11,180(sp)
    22d0:	9839d7fa 	srai	fp,r19,31
    22d4:	5ac00104 	addi	r11,r11,4
    22d8:	dac02d15 	stw	r11,180(sp)
    22dc:	e005883a 	mov	r2,fp
    22e0:	003c0306 	br	12f0 <__alt_mem_Flash_flash_data+0xf40012f0>
    22e4:	dac02d17 	ldw	r11,180(sp)
    22e8:	0039883a 	mov	fp,zero
    22ec:	0005883a 	mov	r2,zero
    22f0:	5cc00017 	ldw	r19,0(r11)
    22f4:	5ac00104 	addi	r11,r11,4
    22f8:	dac02d15 	stw	r11,180(sp)
    22fc:	9807883a 	mov	r3,r19
    2300:	003d4806 	br	1824 <__alt_mem_Flash_flash_data+0xf4001824>
    2304:	db002d17 	ldw	r12,180(sp)
    2308:	14c00017 	ldw	r19,0(r2)
    230c:	0039883a 	mov	fp,zero
    2310:	63000104 	addi	r12,r12,4
    2314:	db002d15 	stw	r12,180(sp)
    2318:	00800044 	movi	r2,1
    231c:	9807883a 	mov	r3,r19
    2320:	003d4006 	br	1824 <__alt_mem_Flash_flash_data+0xf4001824>
    2324:	d9002f17 	ldw	r4,188(sp)
    2328:	b80b883a 	mov	r5,r23
    232c:	b00d883a 	mov	r6,r22
    2330:	000a0940 	call	a094 <__ssprint_r>
    2334:	103bb61e 	bne	r2,zero,1210 <__alt_mem_Flash_flash_data+0xf4001210>
    2338:	d8c02017 	ldw	r3,128(sp)
    233c:	da000404 	addi	r8,sp,16
    2340:	db003117 	ldw	r12,196(sp)
    2344:	dac03417 	ldw	r11,208(sp)
    2348:	d8802617 	ldw	r2,152(sp)
    234c:	62e5883a 	add	r18,r12,r11
    2350:	db003317 	ldw	r12,204(sp)
    2354:	13000216 	blt	r2,r12,2360 <___svfprintf_internal_r+0x1470>
    2358:	8900004c 	andi	r4,r17,1
    235c:	20000c26 	beq	r4,zero,2390 <___svfprintf_internal_r+0x14a0>
    2360:	dac03917 	ldw	r11,228(sp)
    2364:	d9001f17 	ldw	r4,124(sp)
    2368:	db003517 	ldw	r12,212(sp)
    236c:	1ac7883a 	add	r3,r3,r11
    2370:	21000044 	addi	r4,r4,1
    2374:	43000015 	stw	r12,0(r8)
    2378:	42c00115 	stw	r11,4(r8)
    237c:	d8c02015 	stw	r3,128(sp)
    2380:	d9001f15 	stw	r4,124(sp)
    2384:	014001c4 	movi	r5,7
    2388:	2901b716 	blt	r5,r4,2a68 <___svfprintf_internal_r+0x1b78>
    238c:	42000204 	addi	r8,r8,8
    2390:	dac03317 	ldw	r11,204(sp)
    2394:	8489c83a 	sub	r4,r16,r18
    2398:	5885c83a 	sub	r2,r11,r2
    239c:	1021883a 	mov	r16,r2
    23a0:	2080010e 	bge	r4,r2,23a8 <___svfprintf_internal_r+0x14b8>
    23a4:	2021883a 	mov	r16,r4
    23a8:	04000a0e 	bge	zero,r16,23d4 <___svfprintf_internal_r+0x14e4>
    23ac:	d9001f17 	ldw	r4,124(sp)
    23b0:	1c07883a 	add	r3,r3,r16
    23b4:	44800015 	stw	r18,0(r8)
    23b8:	21000044 	addi	r4,r4,1
    23bc:	44000115 	stw	r16,4(r8)
    23c0:	d8c02015 	stw	r3,128(sp)
    23c4:	d9001f15 	stw	r4,124(sp)
    23c8:	014001c4 	movi	r5,7
    23cc:	2901bf16 	blt	r5,r4,2acc <___svfprintf_internal_r+0x1bdc>
    23d0:	42000204 	addi	r8,r8,8
    23d4:	8001bb16 	blt	r16,zero,2ac4 <___svfprintf_internal_r+0x1bd4>
    23d8:	1421c83a 	sub	r16,r2,r16
    23dc:	043c990e 	bge	zero,r16,1644 <__alt_mem_Flash_flash_data+0xf4001644>
    23e0:	04800404 	movi	r18,16
    23e4:	d8801f17 	ldw	r2,124(sp)
    23e8:	943f0b0e 	bge	r18,r16,2018 <__alt_mem_Flash_flash_data+0xf4002018>
    23ec:	014000b4 	movhi	r5,2
    23f0:	29438984 	addi	r5,r5,3622
    23f4:	d9402b15 	stw	r5,172(sp)
    23f8:	054001c4 	movi	r21,7
    23fc:	dcc02f17 	ldw	r19,188(sp)
    2400:	00000306 	br	2410 <___svfprintf_internal_r+0x1520>
    2404:	42000204 	addi	r8,r8,8
    2408:	843ffc04 	addi	r16,r16,-16
    240c:	943f050e 	bge	r18,r16,2024 <__alt_mem_Flash_flash_data+0xf4002024>
    2410:	18c00404 	addi	r3,r3,16
    2414:	10800044 	addi	r2,r2,1
    2418:	45000015 	stw	r20,0(r8)
    241c:	44800115 	stw	r18,4(r8)
    2420:	d8c02015 	stw	r3,128(sp)
    2424:	d8801f15 	stw	r2,124(sp)
    2428:	a8bff60e 	bge	r21,r2,2404 <__alt_mem_Flash_flash_data+0xf4002404>
    242c:	9809883a 	mov	r4,r19
    2430:	b80b883a 	mov	r5,r23
    2434:	b00d883a 	mov	r6,r22
    2438:	000a0940 	call	a094 <__ssprint_r>
    243c:	103b741e 	bne	r2,zero,1210 <__alt_mem_Flash_flash_data+0xf4001210>
    2440:	d8c02017 	ldw	r3,128(sp)
    2444:	d8801f17 	ldw	r2,124(sp)
    2448:	da000404 	addi	r8,sp,16
    244c:	003fee06 	br	2408 <__alt_mem_Flash_flash_data+0xf4002408>
    2450:	8888703a 	and	r4,r17,r2
    2454:	203eb31e 	bne	r4,zero,1f24 <__alt_mem_Flash_flash_data+0xf4001f24>
    2458:	dc001f17 	ldw	r16,124(sp)
    245c:	db003117 	ldw	r12,196(sp)
    2460:	40800115 	stw	r2,4(r8)
    2464:	84000044 	addi	r16,r16,1
    2468:	43000015 	stw	r12,0(r8)
    246c:	d8c02015 	stw	r3,128(sp)
    2470:	dc001f15 	stw	r16,124(sp)
    2474:	008001c4 	movi	r2,7
    2478:	143f8716 	blt	r2,r16,2298 <__alt_mem_Flash_flash_data+0xf4002298>
    247c:	44800204 	addi	r18,r8,8
    2480:	003ed306 	br	1fd0 <__alt_mem_Flash_flash_data+0xf4001fd0>
    2484:	d9002f17 	ldw	r4,188(sp)
    2488:	b80b883a 	mov	r5,r23
    248c:	b00d883a 	mov	r6,r22
    2490:	000a0940 	call	a094 <__ssprint_r>
    2494:	103b5e1e 	bne	r2,zero,1210 <__alt_mem_Flash_flash_data+0xf4001210>
    2498:	d8c02017 	ldw	r3,128(sp)
    249c:	dc001f17 	ldw	r16,124(sp)
    24a0:	da000404 	addi	r8,sp,16
    24a4:	003eaa06 	br	1f50 <__alt_mem_Flash_flash_data+0xf4001f50>
    24a8:	d9002f17 	ldw	r4,188(sp)
    24ac:	b80b883a 	mov	r5,r23
    24b0:	b00d883a 	mov	r6,r22
    24b4:	000a0940 	call	a094 <__ssprint_r>
    24b8:	103b551e 	bne	r2,zero,1210 <__alt_mem_Flash_flash_data+0xf4001210>
    24bc:	d8c02017 	ldw	r3,128(sp)
    24c0:	dc001f17 	ldw	r16,124(sp)
    24c4:	dc800404 	addi	r18,sp,16
    24c8:	003eac06 	br	1f7c <__alt_mem_Flash_flash_data+0xf4001f7c>
    24cc:	d9002f17 	ldw	r4,188(sp)
    24d0:	b80b883a 	mov	r5,r23
    24d4:	b00d883a 	mov	r6,r22
    24d8:	000a0940 	call	a094 <__ssprint_r>
    24dc:	103b4c1e 	bne	r2,zero,1210 <__alt_mem_Flash_flash_data+0xf4001210>
    24e0:	d8c02017 	ldw	r3,128(sp)
    24e4:	da000404 	addi	r8,sp,16
    24e8:	003c1506 	br	1540 <__alt_mem_Flash_flash_data+0xf4001540>
    24ec:	da004015 	stw	r8,256(sp)
    24f0:	da403f15 	stw	r9,252(sp)
    24f4:	0009dec0 	call	9dec <__fpclassifyd>
    24f8:	da004017 	ldw	r8,256(sp)
    24fc:	da403f17 	ldw	r9,252(sp)
    2500:	1000951e 	bne	r2,zero,2758 <___svfprintf_internal_r+0x1868>
    2504:	008011c4 	movi	r2,71
    2508:	1400fb16 	blt	r2,r16,28f8 <___svfprintf_internal_r+0x1a08>
    250c:	030000b4 	movhi	r12,2
    2510:	63037b04 	addi	r12,r12,3564
    2514:	db003115 	stw	r12,196(sp)
    2518:	00c000c4 	movi	r3,3
    251c:	00bfdfc4 	movi	r2,-129
    2520:	d8c02a15 	stw	r3,168(sp)
    2524:	88a2703a 	and	r17,r17,r2
    2528:	dd402783 	ldbu	r21,158(sp)
    252c:	dcc02d15 	stw	r19,180(sp)
    2530:	1825883a 	mov	r18,r3
    2534:	d8003215 	stw	zero,200(sp)
    2538:	d8003415 	stw	zero,208(sp)
    253c:	003b9806 	br	13a0 <__alt_mem_Flash_flash_data+0xf40013a0>
    2540:	1c000007 	ldb	r16,0(r3)
    2544:	1805883a 	mov	r2,r3
    2548:	003abf06 	br	1048 <__alt_mem_Flash_flash_data+0xf4001048>
    254c:	00800084 	movi	r2,2
    2550:	003cb406 	br	1824 <__alt_mem_Flash_flash_data+0xf4001824>
    2554:	88c0100c 	andi	r3,r17,64
    2558:	1800f626 	beq	r3,zero,2934 <___svfprintf_internal_r+0x1a44>
    255c:	dac02d17 	ldw	r11,180(sp)
    2560:	14c0000b 	ldhu	r19,0(r2)
    2564:	0039883a 	mov	fp,zero
    2568:	5ac00104 	addi	r11,r11,4
    256c:	dac02d15 	stw	r11,180(sp)
    2570:	003cbd06 	br	1868 <__alt_mem_Flash_flash_data+0xf4001868>
    2574:	8880040c 	andi	r2,r17,16
    2578:	1000091e 	bne	r2,zero,25a0 <___svfprintf_internal_r+0x16b0>
    257c:	8c40100c 	andi	r17,r17,64
    2580:	88000726 	beq	r17,zero,25a0 <___svfprintf_internal_r+0x16b0>
    2584:	db002d17 	ldw	r12,180(sp)
    2588:	dac03017 	ldw	r11,192(sp)
    258c:	60800017 	ldw	r2,0(r12)
    2590:	63000104 	addi	r12,r12,4
    2594:	db002d15 	stw	r12,180(sp)
    2598:	12c0000d 	sth	r11,0(r2)
    259c:	003a8006 	br	fa0 <__alt_mem_Flash_flash_data+0xf4000fa0>
    25a0:	db002d17 	ldw	r12,180(sp)
    25a4:	dac03017 	ldw	r11,192(sp)
    25a8:	60800017 	ldw	r2,0(r12)
    25ac:	63000104 	addi	r12,r12,4
    25b0:	db002d15 	stw	r12,180(sp)
    25b4:	12c00015 	stw	r11,0(r2)
    25b8:	003a7906 	br	fa0 <__alt_mem_Flash_flash_data+0xf4000fa0>
    25bc:	010000b4 	movhi	r4,2
    25c0:	21038984 	addi	r4,r4,3622
    25c4:	d9002b15 	stw	r4,172(sp)
    25c8:	dac02b17 	ldw	r11,172(sp)
    25cc:	1c87883a 	add	r3,r3,r18
    25d0:	10800044 	addi	r2,r2,1
    25d4:	42c00015 	stw	r11,0(r8)
    25d8:	44800115 	stw	r18,4(r8)
    25dc:	d8c02015 	stw	r3,128(sp)
    25e0:	d8801f15 	stw	r2,124(sp)
    25e4:	010001c4 	movi	r4,7
    25e8:	20bf4e16 	blt	r4,r2,2324 <__alt_mem_Flash_flash_data+0xf4002324>
    25ec:	42000204 	addi	r8,r8,8
    25f0:	003f5306 	br	2340 <__alt_mem_Flash_flash_data+0xf4002340>
    25f4:	010000b4 	movhi	r4,2
    25f8:	21038984 	addi	r4,r4,3622
    25fc:	d9002b15 	stw	r4,172(sp)
    2600:	003bf906 	br	15e8 <__alt_mem_Flash_flash_data+0xf40015e8>
    2604:	d9002f17 	ldw	r4,188(sp)
    2608:	b80b883a 	mov	r5,r23
    260c:	b00d883a 	mov	r6,r22
    2610:	000a0940 	call	a094 <__ssprint_r>
    2614:	103afe1e 	bne	r2,zero,1210 <__alt_mem_Flash_flash_data+0xf4001210>
    2618:	d8c02017 	ldw	r3,128(sp)
    261c:	da000404 	addi	r8,sp,16
    2620:	003dc606 	br	1d3c <__alt_mem_Flash_flash_data+0xf4001d3c>
    2624:	d8801f17 	ldw	r2,124(sp)
    2628:	030000b4 	movhi	r12,2
    262c:	01000044 	movi	r4,1
    2630:	18c00044 	addi	r3,r3,1
    2634:	10800044 	addi	r2,r2,1
    2638:	63038904 	addi	r12,r12,3620
    263c:	41000115 	stw	r4,4(r8)
    2640:	43000015 	stw	r12,0(r8)
    2644:	d8c02015 	stw	r3,128(sp)
    2648:	d8801f15 	stw	r2,124(sp)
    264c:	010001c4 	movi	r4,7
    2650:	2080ad16 	blt	r4,r2,2908 <___svfprintf_internal_r+0x1a18>
    2654:	42000204 	addi	r8,r8,8
    2658:	8000041e 	bne	r16,zero,266c <___svfprintf_internal_r+0x177c>
    265c:	dac03317 	ldw	r11,204(sp)
    2660:	5800021e 	bne	r11,zero,266c <___svfprintf_internal_r+0x177c>
    2664:	8880004c 	andi	r2,r17,1
    2668:	103bf626 	beq	r2,zero,1644 <__alt_mem_Flash_flash_data+0xf4001644>
    266c:	db003917 	ldw	r12,228(sp)
    2670:	d8801f17 	ldw	r2,124(sp)
    2674:	dac03517 	ldw	r11,212(sp)
    2678:	1b07883a 	add	r3,r3,r12
    267c:	10800044 	addi	r2,r2,1
    2680:	42c00015 	stw	r11,0(r8)
    2684:	43000115 	stw	r12,4(r8)
    2688:	d8c02015 	stw	r3,128(sp)
    268c:	d8801f15 	stw	r2,124(sp)
    2690:	010001c4 	movi	r4,7
    2694:	20818616 	blt	r4,r2,2cb0 <___svfprintf_internal_r+0x1dc0>
    2698:	42000204 	addi	r8,r8,8
    269c:	0421c83a 	sub	r16,zero,r16
    26a0:	0400bc0e 	bge	zero,r16,2994 <___svfprintf_internal_r+0x1aa4>
    26a4:	04800404 	movi	r18,16
    26a8:	9400f80e 	bge	r18,r16,2a8c <___svfprintf_internal_r+0x1b9c>
    26ac:	010000b4 	movhi	r4,2
    26b0:	21038984 	addi	r4,r4,3622
    26b4:	d9002b15 	stw	r4,172(sp)
    26b8:	054001c4 	movi	r21,7
    26bc:	dcc02f17 	ldw	r19,188(sp)
    26c0:	00000306 	br	26d0 <___svfprintf_internal_r+0x17e0>
    26c4:	42000204 	addi	r8,r8,8
    26c8:	843ffc04 	addi	r16,r16,-16
    26cc:	9400f20e 	bge	r18,r16,2a98 <___svfprintf_internal_r+0x1ba8>
    26d0:	18c00404 	addi	r3,r3,16
    26d4:	10800044 	addi	r2,r2,1
    26d8:	45000015 	stw	r20,0(r8)
    26dc:	44800115 	stw	r18,4(r8)
    26e0:	d8c02015 	stw	r3,128(sp)
    26e4:	d8801f15 	stw	r2,124(sp)
    26e8:	a8bff60e 	bge	r21,r2,26c4 <__alt_mem_Flash_flash_data+0xf40026c4>
    26ec:	9809883a 	mov	r4,r19
    26f0:	b80b883a 	mov	r5,r23
    26f4:	b00d883a 	mov	r6,r22
    26f8:	000a0940 	call	a094 <__ssprint_r>
    26fc:	103ac41e 	bne	r2,zero,1210 <__alt_mem_Flash_flash_data+0xf4001210>
    2700:	d8c02017 	ldw	r3,128(sp)
    2704:	d8801f17 	ldw	r2,124(sp)
    2708:	da000404 	addi	r8,sp,16
    270c:	003fee06 	br	26c8 <__alt_mem_Flash_flash_data+0xf40026c8>
    2710:	db002e17 	ldw	r12,184(sp)
    2714:	1805883a 	mov	r2,r3
    2718:	dac02d15 	stw	r11,180(sp)
    271c:	0319c83a 	sub	r12,zero,r12
    2720:	db002e15 	stw	r12,184(sp)
    2724:	003acf06 	br	1264 <__alt_mem_Flash_flash_data+0xf4001264>
    2728:	18800044 	addi	r2,r3,1
    272c:	8c400814 	ori	r17,r17,32
    2730:	1c000047 	ldb	r16,1(r3)
    2734:	003a4406 	br	1048 <__alt_mem_Flash_flash_data+0xf4001048>
    2738:	d9002f17 	ldw	r4,188(sp)
    273c:	b80b883a 	mov	r5,r23
    2740:	b00d883a 	mov	r6,r22
    2744:	000a0940 	call	a094 <__ssprint_r>
    2748:	103ab11e 	bne	r2,zero,1210 <__alt_mem_Flash_flash_data+0xf4001210>
    274c:	d8c02017 	ldw	r3,128(sp)
    2750:	da000404 	addi	r8,sp,16
    2754:	003d8a06 	br	1d80 <__alt_mem_Flash_flash_data+0xf4001d80>
    2758:	057ff7c4 	movi	r21,-33
    275c:	00bfffc4 	movi	r2,-1
    2760:	856a703a 	and	r21,r16,r21
    2764:	48807126 	beq	r9,r2,292c <___svfprintf_internal_r+0x1a3c>
    2768:	008011c4 	movi	r2,71
    276c:	a8814d26 	beq	r21,r2,2ca4 <___svfprintf_internal_r+0x1db4>
    2770:	db003817 	ldw	r12,224(sp)
    2774:	8ac04014 	ori	r11,r17,256
    2778:	dac02d15 	stw	r11,180(sp)
    277c:	60015616 	blt	r12,zero,2cd8 <___svfprintf_internal_r+0x1de8>
    2780:	dc803817 	ldw	r18,224(sp)
    2784:	d8002a05 	stb	zero,168(sp)
    2788:	00801984 	movi	r2,102
    278c:	80808c26 	beq	r16,r2,29c0 <___svfprintf_internal_r+0x1ad0>
    2790:	00801184 	movi	r2,70
    2794:	80808a26 	beq	r16,r2,29c0 <___svfprintf_internal_r+0x1ad0>
    2798:	00801144 	movi	r2,69
    279c:	a8815226 	beq	r21,r2,2ce8 <___svfprintf_internal_r+0x1df8>
    27a0:	4839883a 	mov	fp,r9
    27a4:	d8802604 	addi	r2,sp,152
    27a8:	d8800115 	stw	r2,4(sp)
    27ac:	d9002f17 	ldw	r4,188(sp)
    27b0:	d8802504 	addi	r2,sp,148
    27b4:	d9403717 	ldw	r5,220(sp)
    27b8:	d8800215 	stw	r2,8(sp)
    27bc:	d8802104 	addi	r2,sp,132
    27c0:	df000015 	stw	fp,0(sp)
    27c4:	d8800315 	stw	r2,12(sp)
    27c8:	900d883a 	mov	r6,r18
    27cc:	01c00084 	movi	r7,2
    27d0:	da004015 	stw	r8,256(sp)
    27d4:	da403f15 	stw	r9,252(sp)
    27d8:	00052040 	call	5204 <_dtoa_r>
    27dc:	d8803115 	stw	r2,196(sp)
    27e0:	008019c4 	movi	r2,103
    27e4:	da004017 	ldw	r8,256(sp)
    27e8:	da403f17 	ldw	r9,252(sp)
    27ec:	80800226 	beq	r16,r2,27f8 <___svfprintf_internal_r+0x1908>
    27f0:	008011c4 	movi	r2,71
    27f4:	8080841e 	bne	r16,r2,2a08 <___svfprintf_internal_r+0x1b18>
    27f8:	8880004c 	andi	r2,r17,1
    27fc:	10014f26 	beq	r2,zero,2d3c <___svfprintf_internal_r+0x1e4c>
    2800:	db003117 	ldw	r12,196(sp)
    2804:	6715883a 	add	r10,r12,fp
    2808:	d9003717 	ldw	r4,220(sp)
    280c:	900b883a 	mov	r5,r18
    2810:	000d883a 	mov	r6,zero
    2814:	000f883a 	mov	r7,zero
    2818:	da004015 	stw	r8,256(sp)
    281c:	da403f15 	stw	r9,252(sp)
    2820:	da803e15 	stw	r10,248(sp)
    2824:	000ee380 	call	ee38 <__eqdf2>
    2828:	da004017 	ldw	r8,256(sp)
    282c:	da403f17 	ldw	r9,252(sp)
    2830:	da803e17 	ldw	r10,248(sp)
    2834:	1000d926 	beq	r2,zero,2b9c <___svfprintf_internal_r+0x1cac>
    2838:	d8802117 	ldw	r2,132(sp)
    283c:	1280062e 	bgeu	r2,r10,2858 <___svfprintf_internal_r+0x1968>
    2840:	01000c04 	movi	r4,48
    2844:	10c00044 	addi	r3,r2,1
    2848:	d8c02115 	stw	r3,132(sp)
    284c:	11000005 	stb	r4,0(r2)
    2850:	d8802117 	ldw	r2,132(sp)
    2854:	12bffb36 	bltu	r2,r10,2844 <__alt_mem_Flash_flash_data+0xf4002844>
    2858:	db003117 	ldw	r12,196(sp)
    285c:	1305c83a 	sub	r2,r2,r12
    2860:	d8803315 	stw	r2,204(sp)
    2864:	008011c4 	movi	r2,71
    2868:	a880b626 	beq	r21,r2,2b44 <___svfprintf_internal_r+0x1c54>
    286c:	00801944 	movi	r2,101
    2870:	14017c0e 	bge	r2,r16,2e64 <___svfprintf_internal_r+0x1f74>
    2874:	00801984 	movi	r2,102
    2878:	80812626 	beq	r16,r2,2d14 <___svfprintf_internal_r+0x1e24>
    287c:	db002617 	ldw	r12,152(sp)
    2880:	db003415 	stw	r12,208(sp)
    2884:	db003417 	ldw	r12,208(sp)
    2888:	dac03317 	ldw	r11,204(sp)
    288c:	62c11816 	blt	r12,r11,2cf0 <___svfprintf_internal_r+0x1e00>
    2890:	8c40004c 	andi	r17,r17,1
    2894:	88013b1e 	bne	r17,zero,2d84 <___svfprintf_internal_r+0x1e94>
    2898:	6005883a 	mov	r2,r12
    289c:	60012516 	blt	r12,zero,2d34 <___svfprintf_internal_r+0x1e44>
    28a0:	dc803417 	ldw	r18,208(sp)
    28a4:	df002a07 	ldb	fp,168(sp)
    28a8:	e000b01e 	bne	fp,zero,2b6c <___svfprintf_internal_r+0x1c7c>
    28ac:	dc402d17 	ldw	r17,180(sp)
    28b0:	dd402783 	ldbu	r21,158(sp)
    28b4:	d8802a15 	stw	r2,168(sp)
    28b8:	dcc02d15 	stw	r19,180(sp)
    28bc:	d8003215 	stw	zero,200(sp)
    28c0:	003ab706 	br	13a0 <__alt_mem_Flash_flash_data+0xf40013a0>
    28c4:	008000b4 	movhi	r2,2
    28c8:	10837904 	addi	r2,r2,3556
    28cc:	d8803115 	stw	r2,196(sp)
    28d0:	003bbb06 	br	17c0 <__alt_mem_Flash_flash_data+0xf40017c0>
    28d4:	d9002f17 	ldw	r4,188(sp)
    28d8:	04001004 	movi	r16,64
    28dc:	800b883a 	mov	r5,r16
    28e0:	0007c540 	call	7c54 <_malloc_r>
    28e4:	b8800015 	stw	r2,0(r23)
    28e8:	b8800415 	stw	r2,16(r23)
    28ec:	10015f26 	beq	r2,zero,2e6c <___svfprintf_internal_r+0x1f7c>
    28f0:	bc000515 	stw	r16,20(r23)
    28f4:	00399806 	br	f58 <__alt_mem_Flash_flash_data+0xf4000f58>
    28f8:	008000b4 	movhi	r2,2
    28fc:	10837c04 	addi	r2,r2,3568
    2900:	d8803115 	stw	r2,196(sp)
    2904:	003f0406 	br	2518 <__alt_mem_Flash_flash_data+0xf4002518>
    2908:	d9002f17 	ldw	r4,188(sp)
    290c:	b80b883a 	mov	r5,r23
    2910:	b00d883a 	mov	r6,r22
    2914:	000a0940 	call	a094 <__ssprint_r>
    2918:	103a3d1e 	bne	r2,zero,1210 <__alt_mem_Flash_flash_data+0xf4001210>
    291c:	dc002617 	ldw	r16,152(sp)
    2920:	d8c02017 	ldw	r3,128(sp)
    2924:	da000404 	addi	r8,sp,16
    2928:	003f4b06 	br	2658 <__alt_mem_Flash_flash_data+0xf4002658>
    292c:	02400184 	movi	r9,6
    2930:	003f8f06 	br	2770 <__alt_mem_Flash_flash_data+0xf4002770>
    2934:	db002d17 	ldw	r12,180(sp)
    2938:	14c00017 	ldw	r19,0(r2)
    293c:	0039883a 	mov	fp,zero
    2940:	63000104 	addi	r12,r12,4
    2944:	db002d15 	stw	r12,180(sp)
    2948:	003bc706 	br	1868 <__alt_mem_Flash_flash_data+0xf4001868>
    294c:	d8c03117 	ldw	r3,196(sp)
    2950:	b0e5c83a 	sub	r18,r22,r3
    2954:	003a8d06 	br	138c <__alt_mem_Flash_flash_data+0xf400138c>
    2958:	da004015 	stw	r8,256(sp)
    295c:	0000e580 	call	e58 <strlen>
    2960:	1025883a 	mov	r18,r2
    2964:	da004017 	ldw	r8,256(sp)
    2968:	903bf20e 	bge	r18,zero,1934 <__alt_mem_Flash_flash_data+0xf4001934>
    296c:	0005883a 	mov	r2,zero
    2970:	003bf006 	br	1934 <__alt_mem_Flash_flash_data+0xf4001934>
    2974:	d9002f17 	ldw	r4,188(sp)
    2978:	b80b883a 	mov	r5,r23
    297c:	b00d883a 	mov	r6,r22
    2980:	000a0940 	call	a094 <__ssprint_r>
    2984:	103a221e 	bne	r2,zero,1210 <__alt_mem_Flash_flash_data+0xf4001210>
    2988:	d8c02017 	ldw	r3,128(sp)
    298c:	d8801f17 	ldw	r2,124(sp)
    2990:	da000404 	addi	r8,sp,16
    2994:	db003317 	ldw	r12,204(sp)
    2998:	dac03117 	ldw	r11,196(sp)
    299c:	10800044 	addi	r2,r2,1
    29a0:	1b07883a 	add	r3,r3,r12
    29a4:	42c00015 	stw	r11,0(r8)
    29a8:	43000115 	stw	r12,4(r8)
    29ac:	d8c02015 	stw	r3,128(sp)
    29b0:	d8801f15 	stw	r2,124(sp)
    29b4:	010001c4 	movi	r4,7
    29b8:	20bb210e 	bge	r4,r2,1640 <__alt_mem_Flash_flash_data+0xf4001640>
    29bc:	003da206 	br	2048 <__alt_mem_Flash_flash_data+0xf4002048>
    29c0:	d8802604 	addi	r2,sp,152
    29c4:	d8800115 	stw	r2,4(sp)
    29c8:	d9002f17 	ldw	r4,188(sp)
    29cc:	d8802504 	addi	r2,sp,148
    29d0:	d9403717 	ldw	r5,220(sp)
    29d4:	d8800215 	stw	r2,8(sp)
    29d8:	d8802104 	addi	r2,sp,132
    29dc:	da400015 	stw	r9,0(sp)
    29e0:	d8800315 	stw	r2,12(sp)
    29e4:	900d883a 	mov	r6,r18
    29e8:	01c000c4 	movi	r7,3
    29ec:	da004015 	stw	r8,256(sp)
    29f0:	da403f15 	stw	r9,252(sp)
    29f4:	00052040 	call	5204 <_dtoa_r>
    29f8:	da403f17 	ldw	r9,252(sp)
    29fc:	da004017 	ldw	r8,256(sp)
    2a00:	d8803115 	stw	r2,196(sp)
    2a04:	4839883a 	mov	fp,r9
    2a08:	dac03117 	ldw	r11,196(sp)
    2a0c:	00801184 	movi	r2,70
    2a10:	5f15883a 	add	r10,r11,fp
    2a14:	a8bf7c1e 	bne	r21,r2,2808 <__alt_mem_Flash_flash_data+0xf4002808>
    2a18:	59000007 	ldb	r4,0(r11)
    2a1c:	00800c04 	movi	r2,48
    2a20:	2080c826 	beq	r4,r2,2d44 <___svfprintf_internal_r+0x1e54>
    2a24:	d8c02617 	ldw	r3,152(sp)
    2a28:	50d5883a 	add	r10,r10,r3
    2a2c:	003f7606 	br	2808 <__alt_mem_Flash_flash_data+0xf4002808>
    2a30:	010000b4 	movhi	r4,2
    2a34:	21038d84 	addi	r4,r4,3638
    2a38:	d9003615 	stw	r4,216(sp)
    2a3c:	003a9706 	br	149c <__alt_mem_Flash_flash_data+0xf400149c>
    2a40:	0025883a 	mov	r18,zero
    2a44:	003dc306 	br	2154 <__alt_mem_Flash_flash_data+0xf4002154>
    2a48:	d9002f17 	ldw	r4,188(sp)
    2a4c:	b80b883a 	mov	r5,r23
    2a50:	b00d883a 	mov	r6,r22
    2a54:	000a0940 	call	a094 <__ssprint_r>
    2a58:	1039ed1e 	bne	r2,zero,1210 <__alt_mem_Flash_flash_data+0xf4001210>
    2a5c:	d8c02017 	ldw	r3,128(sp)
    2a60:	da000404 	addi	r8,sp,16
    2a64:	003dba06 	br	2150 <__alt_mem_Flash_flash_data+0xf4002150>
    2a68:	d9002f17 	ldw	r4,188(sp)
    2a6c:	b80b883a 	mov	r5,r23
    2a70:	b00d883a 	mov	r6,r22
    2a74:	000a0940 	call	a094 <__ssprint_r>
    2a78:	1039e51e 	bne	r2,zero,1210 <__alt_mem_Flash_flash_data+0xf4001210>
    2a7c:	d8802617 	ldw	r2,152(sp)
    2a80:	d8c02017 	ldw	r3,128(sp)
    2a84:	da000404 	addi	r8,sp,16
    2a88:	003e4106 	br	2390 <__alt_mem_Flash_flash_data+0xf4002390>
    2a8c:	030000b4 	movhi	r12,2
    2a90:	63038984 	addi	r12,r12,3622
    2a94:	db002b15 	stw	r12,172(sp)
    2a98:	dac02b17 	ldw	r11,172(sp)
    2a9c:	1c07883a 	add	r3,r3,r16
    2aa0:	10800044 	addi	r2,r2,1
    2aa4:	42c00015 	stw	r11,0(r8)
    2aa8:	44000115 	stw	r16,4(r8)
    2aac:	d8c02015 	stw	r3,128(sp)
    2ab0:	d8801f15 	stw	r2,124(sp)
    2ab4:	010001c4 	movi	r4,7
    2ab8:	20bfae16 	blt	r4,r2,2974 <__alt_mem_Flash_flash_data+0xf4002974>
    2abc:	42000204 	addi	r8,r8,8
    2ac0:	003fb406 	br	2994 <__alt_mem_Flash_flash_data+0xf4002994>
    2ac4:	0021883a 	mov	r16,zero
    2ac8:	003e4306 	br	23d8 <__alt_mem_Flash_flash_data+0xf40023d8>
    2acc:	d9002f17 	ldw	r4,188(sp)
    2ad0:	b80b883a 	mov	r5,r23
    2ad4:	b00d883a 	mov	r6,r22
    2ad8:	000a0940 	call	a094 <__ssprint_r>
    2adc:	1039cc1e 	bne	r2,zero,1210 <__alt_mem_Flash_flash_data+0xf4001210>
    2ae0:	d8802617 	ldw	r2,152(sp)
    2ae4:	db003317 	ldw	r12,204(sp)
    2ae8:	d8c02017 	ldw	r3,128(sp)
    2aec:	da000404 	addi	r8,sp,16
    2af0:	6085c83a 	sub	r2,r12,r2
    2af4:	003e3706 	br	23d4 <__alt_mem_Flash_flash_data+0xf40023d4>
    2af8:	00800184 	movi	r2,6
    2afc:	1240012e 	bgeu	r2,r9,2b04 <___svfprintf_internal_r+0x1c14>
    2b00:	1013883a 	mov	r9,r2
    2b04:	4825883a 	mov	r18,r9
    2b08:	4805883a 	mov	r2,r9
    2b0c:	4800a216 	blt	r9,zero,2d98 <___svfprintf_internal_r+0x1ea8>
    2b10:	d8802a15 	stw	r2,168(sp)
    2b14:	008000b4 	movhi	r2,2
    2b18:	10838704 	addi	r2,r2,3612
    2b1c:	d8803115 	stw	r2,196(sp)
    2b20:	dcc02d15 	stw	r19,180(sp)
    2b24:	d8003215 	stw	zero,200(sp)
    2b28:	d8003415 	stw	zero,208(sp)
    2b2c:	0005883a 	mov	r2,zero
    2b30:	003a2206 	br	13bc <__alt_mem_Flash_flash_data+0xf40013bc>
    2b34:	030000b4 	movhi	r12,2
    2b38:	63038d84 	addi	r12,r12,3638
    2b3c:	db003615 	stw	r12,216(sp)
    2b40:	003ae506 	br	16d8 <__alt_mem_Flash_flash_data+0xf40016d8>
    2b44:	d8c02617 	ldw	r3,152(sp)
    2b48:	00bfff44 	movi	r2,-3
    2b4c:	18801516 	blt	r3,r2,2ba4 <___svfprintf_internal_r+0x1cb4>
    2b50:	48c01416 	blt	r9,r3,2ba4 <___svfprintf_internal_r+0x1cb4>
    2b54:	d8c03415 	stw	r3,208(sp)
    2b58:	040019c4 	movi	r16,103
    2b5c:	003f4906 	br	2884 <__alt_mem_Flash_flash_data+0xf4002884>
    2b60:	05400b44 	movi	r21,45
    2b64:	dd402785 	stb	r21,158(sp)
    2b68:	003b1006 	br	17ac <__alt_mem_Flash_flash_data+0xf40017ac>
    2b6c:	00c00b44 	movi	r3,45
    2b70:	d8802a15 	stw	r2,168(sp)
    2b74:	dc402d17 	ldw	r17,180(sp)
    2b78:	d8c02785 	stb	r3,158(sp)
    2b7c:	dcc02d15 	stw	r19,180(sp)
    2b80:	d8003215 	stw	zero,200(sp)
    2b84:	00800b44 	movi	r2,45
    2b88:	003a0906 	br	13b0 <__alt_mem_Flash_flash_data+0xf40013b0>
    2b8c:	010000b4 	movhi	r4,2
    2b90:	21038984 	addi	r4,r4,3622
    2b94:	d9002b15 	stw	r4,172(sp)
    2b98:	003cc306 	br	1ea8 <__alt_mem_Flash_flash_data+0xf4001ea8>
    2b9c:	5005883a 	mov	r2,r10
    2ba0:	003f2d06 	br	2858 <__alt_mem_Flash_flash_data+0xf4002858>
    2ba4:	843fff84 	addi	r16,r16,-2
    2ba8:	1f3fffc4 	addi	fp,r3,-1
    2bac:	df002615 	stw	fp,152(sp)
    2bb0:	dc0022c5 	stb	r16,139(sp)
    2bb4:	e000a016 	blt	fp,zero,2e38 <___svfprintf_internal_r+0x1f48>
    2bb8:	00800ac4 	movi	r2,43
    2bbc:	d8802305 	stb	r2,140(sp)
    2bc0:	00800244 	movi	r2,9
    2bc4:	1700800e 	bge	r2,fp,2dc8 <___svfprintf_internal_r+0x1ed8>
    2bc8:	dd4022c4 	addi	r21,sp,139
    2bcc:	dc002b15 	stw	r16,172(sp)
    2bd0:	4025883a 	mov	r18,r8
    2bd4:	a821883a 	mov	r16,r21
    2bd8:	e009883a 	mov	r4,fp
    2bdc:	01400284 	movi	r5,10
    2be0:	000dc640 	call	dc64 <__modsi3>
    2be4:	10800c04 	addi	r2,r2,48
    2be8:	843fffc4 	addi	r16,r16,-1
    2bec:	e009883a 	mov	r4,fp
    2bf0:	01400284 	movi	r5,10
    2bf4:	80800005 	stb	r2,0(r16)
    2bf8:	000dc100 	call	dc10 <__divsi3>
    2bfc:	1039883a 	mov	fp,r2
    2c00:	00800244 	movi	r2,9
    2c04:	173ff416 	blt	r2,fp,2bd8 <__alt_mem_Flash_flash_data+0xf4002bd8>
    2c08:	9011883a 	mov	r8,r18
    2c0c:	e0800c04 	addi	r2,fp,48
    2c10:	8025883a 	mov	r18,r16
    2c14:	913fffc4 	addi	r4,r18,-1
    2c18:	90bfffc5 	stb	r2,-1(r18)
    2c1c:	dc002b17 	ldw	r16,172(sp)
    2c20:	25408e2e 	bgeu	r4,r21,2e5c <___svfprintf_internal_r+0x1f6c>
    2c24:	d9402384 	addi	r5,sp,142
    2c28:	2c8bc83a 	sub	r5,r5,r18
    2c2c:	d8c02344 	addi	r3,sp,141
    2c30:	a94b883a 	add	r5,r21,r5
    2c34:	00000106 	br	2c3c <___svfprintf_internal_r+0x1d4c>
    2c38:	20800003 	ldbu	r2,0(r4)
    2c3c:	18800005 	stb	r2,0(r3)
    2c40:	18c00044 	addi	r3,r3,1
    2c44:	21000044 	addi	r4,r4,1
    2c48:	197ffb1e 	bne	r3,r5,2c38 <__alt_mem_Flash_flash_data+0xf4002c38>
    2c4c:	d8802304 	addi	r2,sp,140
    2c50:	1485c83a 	sub	r2,r2,r18
    2c54:	d8c02344 	addi	r3,sp,141
    2c58:	1885883a 	add	r2,r3,r2
    2c5c:	dac03317 	ldw	r11,204(sp)
    2c60:	156bc83a 	sub	r21,r2,r21
    2c64:	dd403a15 	stw	r21,232(sp)
    2c68:	00800044 	movi	r2,1
    2c6c:	5d65883a 	add	r18,r11,r21
    2c70:	12c0770e 	bge	r2,r11,2e50 <___svfprintf_internal_r+0x1f60>
    2c74:	94800044 	addi	r18,r18,1
    2c78:	9005883a 	mov	r2,r18
    2c7c:	90007216 	blt	r18,zero,2e48 <___svfprintf_internal_r+0x1f58>
    2c80:	d8003415 	stw	zero,208(sp)
    2c84:	003f0706 	br	28a4 <__alt_mem_Flash_flash_data+0xf40028a4>
    2c88:	da402a15 	stw	r9,168(sp)
    2c8c:	dd402783 	ldbu	r21,158(sp)
    2c90:	4825883a 	mov	r18,r9
    2c94:	dcc02d15 	stw	r19,180(sp)
    2c98:	d8003215 	stw	zero,200(sp)
    2c9c:	d8003415 	stw	zero,208(sp)
    2ca0:	0039bf06 	br	13a0 <__alt_mem_Flash_flash_data+0xf40013a0>
    2ca4:	483eb21e 	bne	r9,zero,2770 <__alt_mem_Flash_flash_data+0xf4002770>
    2ca8:	9013883a 	mov	r9,r18
    2cac:	003eb006 	br	2770 <__alt_mem_Flash_flash_data+0xf4002770>
    2cb0:	d9002f17 	ldw	r4,188(sp)
    2cb4:	b80b883a 	mov	r5,r23
    2cb8:	b00d883a 	mov	r6,r22
    2cbc:	000a0940 	call	a094 <__ssprint_r>
    2cc0:	1039531e 	bne	r2,zero,1210 <__alt_mem_Flash_flash_data+0xf4001210>
    2cc4:	dc002617 	ldw	r16,152(sp)
    2cc8:	d8c02017 	ldw	r3,128(sp)
    2ccc:	d8801f17 	ldw	r2,124(sp)
    2cd0:	da000404 	addi	r8,sp,16
    2cd4:	003e7106 	br	269c <__alt_mem_Flash_flash_data+0xf400269c>
    2cd8:	00c00b44 	movi	r3,45
    2cdc:	64a0003c 	xorhi	r18,r12,32768
    2ce0:	d8c02a05 	stb	r3,168(sp)
    2ce4:	003ea806 	br	2788 <__alt_mem_Flash_flash_data+0xf4002788>
    2ce8:	4f000044 	addi	fp,r9,1
    2cec:	003ead06 	br	27a4 <__alt_mem_Flash_flash_data+0xf40027a4>
    2cf0:	d8c03417 	ldw	r3,208(sp)
    2cf4:	00c0410e 	bge	zero,r3,2dfc <___svfprintf_internal_r+0x1f0c>
    2cf8:	04800044 	movi	r18,1
    2cfc:	dac03317 	ldw	r11,204(sp)
    2d00:	92e5883a 	add	r18,r18,r11
    2d04:	9005883a 	mov	r2,r18
    2d08:	903ee60e 	bge	r18,zero,28a4 <__alt_mem_Flash_flash_data+0xf40028a4>
    2d0c:	0005883a 	mov	r2,zero
    2d10:	003ee406 	br	28a4 <__alt_mem_Flash_flash_data+0xf40028a4>
    2d14:	d8c02617 	ldw	r3,152(sp)
    2d18:	d8c03415 	stw	r3,208(sp)
    2d1c:	00c0310e 	bge	zero,r3,2de4 <___svfprintf_internal_r+0x1ef4>
    2d20:	48001f1e 	bne	r9,zero,2da0 <___svfprintf_internal_r+0x1eb0>
    2d24:	8c40004c 	andi	r17,r17,1
    2d28:	88001d1e 	bne	r17,zero,2da0 <___svfprintf_internal_r+0x1eb0>
    2d2c:	1805883a 	mov	r2,r3
    2d30:	183edb0e 	bge	r3,zero,28a0 <__alt_mem_Flash_flash_data+0xf40028a0>
    2d34:	0005883a 	mov	r2,zero
    2d38:	003ed906 	br	28a0 <__alt_mem_Flash_flash_data+0xf40028a0>
    2d3c:	d8802117 	ldw	r2,132(sp)
    2d40:	003ec506 	br	2858 <__alt_mem_Flash_flash_data+0xf4002858>
    2d44:	d9003717 	ldw	r4,220(sp)
    2d48:	900b883a 	mov	r5,r18
    2d4c:	000d883a 	mov	r6,zero
    2d50:	000f883a 	mov	r7,zero
    2d54:	da004015 	stw	r8,256(sp)
    2d58:	da403f15 	stw	r9,252(sp)
    2d5c:	da803e15 	stw	r10,248(sp)
    2d60:	000ee380 	call	ee38 <__eqdf2>
    2d64:	da004017 	ldw	r8,256(sp)
    2d68:	da403f17 	ldw	r9,252(sp)
    2d6c:	da803e17 	ldw	r10,248(sp)
    2d70:	103f2c26 	beq	r2,zero,2a24 <__alt_mem_Flash_flash_data+0xf4002a24>
    2d74:	00800044 	movi	r2,1
    2d78:	1707c83a 	sub	r3,r2,fp
    2d7c:	d8c02615 	stw	r3,152(sp)
    2d80:	003f2906 	br	2a28 <__alt_mem_Flash_flash_data+0xf4002a28>
    2d84:	db003417 	ldw	r12,208(sp)
    2d88:	64800044 	addi	r18,r12,1
    2d8c:	9005883a 	mov	r2,r18
    2d90:	903ec40e 	bge	r18,zero,28a4 <__alt_mem_Flash_flash_data+0xf40028a4>
    2d94:	003fdd06 	br	2d0c <__alt_mem_Flash_flash_data+0xf4002d0c>
    2d98:	0005883a 	mov	r2,zero
    2d9c:	003f5c06 	br	2b10 <__alt_mem_Flash_flash_data+0xf4002b10>
    2da0:	dac03417 	ldw	r11,208(sp)
    2da4:	4a400044 	addi	r9,r9,1
    2da8:	5a65883a 	add	r18,r11,r9
    2dac:	9005883a 	mov	r2,r18
    2db0:	903ebc0e 	bge	r18,zero,28a4 <__alt_mem_Flash_flash_data+0xf40028a4>
    2db4:	003fd506 	br	2d0c <__alt_mem_Flash_flash_data+0xf4002d0c>
    2db8:	008000b4 	movhi	r2,2
    2dbc:	10838984 	addi	r2,r2,3622
    2dc0:	d8802b15 	stw	r2,172(sp)
    2dc4:	003d2b06 	br	2274 <__alt_mem_Flash_flash_data+0xf4002274>
    2dc8:	00800c04 	movi	r2,48
    2dcc:	e0c00c04 	addi	r3,fp,48
    2dd0:	d8802345 	stb	r2,141(sp)
    2dd4:	d8c02385 	stb	r3,142(sp)
    2dd8:	d88023c4 	addi	r2,sp,143
    2ddc:	dd4022c4 	addi	r21,sp,139
    2de0:	003f9e06 	br	2c5c <__alt_mem_Flash_flash_data+0xf4002c5c>
    2de4:	4800081e 	bne	r9,zero,2e08 <___svfprintf_internal_r+0x1f18>
    2de8:	8c40004c 	andi	r17,r17,1
    2dec:	8800061e 	bne	r17,zero,2e08 <___svfprintf_internal_r+0x1f18>
    2df0:	00800044 	movi	r2,1
    2df4:	1025883a 	mov	r18,r2
    2df8:	003eaa06 	br	28a4 <__alt_mem_Flash_flash_data+0xf40028a4>
    2dfc:	04800084 	movi	r18,2
    2e00:	90e5c83a 	sub	r18,r18,r3
    2e04:	003fbd06 	br	2cfc <__alt_mem_Flash_flash_data+0xf4002cfc>
    2e08:	4c800084 	addi	r18,r9,2
    2e0c:	9005883a 	mov	r2,r18
    2e10:	903ea40e 	bge	r18,zero,28a4 <__alt_mem_Flash_flash_data+0xf40028a4>
    2e14:	003fbd06 	br	2d0c <__alt_mem_Flash_flash_data+0xf4002d0c>
    2e18:	dac02d17 	ldw	r11,180(sp)
    2e1c:	5a400017 	ldw	r9,0(r11)
    2e20:	5ac00104 	addi	r11,r11,4
    2e24:	dac02d15 	stw	r11,180(sp)
    2e28:	483e410e 	bge	r9,zero,2730 <__alt_mem_Flash_flash_data+0xf4002730>
    2e2c:	027fffc4 	movi	r9,-1
    2e30:	1c000047 	ldb	r16,1(r3)
    2e34:	00388406 	br	1048 <__alt_mem_Flash_flash_data+0xf4001048>
    2e38:	00800b44 	movi	r2,45
    2e3c:	0739c83a 	sub	fp,zero,fp
    2e40:	d8802305 	stb	r2,140(sp)
    2e44:	003f5e06 	br	2bc0 <__alt_mem_Flash_flash_data+0xf4002bc0>
    2e48:	0005883a 	mov	r2,zero
    2e4c:	003f8c06 	br	2c80 <__alt_mem_Flash_flash_data+0xf4002c80>
    2e50:	88a2703a 	and	r17,r17,r2
    2e54:	883f8826 	beq	r17,zero,2c78 <__alt_mem_Flash_flash_data+0xf4002c78>
    2e58:	003f8606 	br	2c74 <__alt_mem_Flash_flash_data+0xf4002c74>
    2e5c:	d8802344 	addi	r2,sp,141
    2e60:	003f7e06 	br	2c5c <__alt_mem_Flash_flash_data+0xf4002c5c>
    2e64:	d8c02617 	ldw	r3,152(sp)
    2e68:	003f4f06 	br	2ba8 <__alt_mem_Flash_flash_data+0xf4002ba8>
    2e6c:	dac02f17 	ldw	r11,188(sp)
    2e70:	00800304 	movi	r2,12
    2e74:	58800015 	stw	r2,0(r11)
    2e78:	00bfffc4 	movi	r2,-1
    2e7c:	0038e806 	br	1220 <__alt_mem_Flash_flash_data+0xf4001220>

00002e80 <___vfprintf_internal_r>:
    2e80:	deffb604 	addi	sp,sp,-296
    2e84:	dfc04915 	stw	ra,292(sp)
    2e88:	ddc04715 	stw	r23,284(sp)
    2e8c:	dd804615 	stw	r22,280(sp)
    2e90:	282f883a 	mov	r23,r5
    2e94:	202d883a 	mov	r22,r4
    2e98:	d9802a15 	stw	r6,168(sp)
    2e9c:	d9c02d15 	stw	r7,180(sp)
    2ea0:	df004815 	stw	fp,288(sp)
    2ea4:	dd404515 	stw	r21,276(sp)
    2ea8:	dd004415 	stw	r20,272(sp)
    2eac:	dcc04315 	stw	r19,268(sp)
    2eb0:	dc804215 	stw	r18,264(sp)
    2eb4:	dc404115 	stw	r17,260(sp)
    2eb8:	dc004015 	stw	r16,256(sp)
    2ebc:	0007a680 	call	7a68 <_localeconv_r>
    2ec0:	10800017 	ldw	r2,0(r2)
    2ec4:	1009883a 	mov	r4,r2
    2ec8:	d8803515 	stw	r2,212(sp)
    2ecc:	0000e580 	call	e58 <strlen>
    2ed0:	d8803815 	stw	r2,224(sp)
    2ed4:	b0000226 	beq	r22,zero,2ee0 <___vfprintf_internal_r+0x60>
    2ed8:	b0800e17 	ldw	r2,56(r22)
    2edc:	1000e126 	beq	r2,zero,3264 <___vfprintf_internal_r+0x3e4>
    2ee0:	b880030b 	ldhu	r2,12(r23)
    2ee4:	10c8000c 	andi	r3,r2,8192
    2ee8:	1800061e 	bne	r3,zero,2f04 <___vfprintf_internal_r+0x84>
    2eec:	b9001917 	ldw	r4,100(r23)
    2ef0:	00f7ffc4 	movi	r3,-8193
    2ef4:	10880014 	ori	r2,r2,8192
    2ef8:	20c6703a 	and	r3,r4,r3
    2efc:	b880030d 	sth	r2,12(r23)
    2f00:	b8c01915 	stw	r3,100(r23)
    2f04:	10c0020c 	andi	r3,r2,8
    2f08:	1800a726 	beq	r3,zero,31a8 <___vfprintf_internal_r+0x328>
    2f0c:	b8c00417 	ldw	r3,16(r23)
    2f10:	1800a526 	beq	r3,zero,31a8 <___vfprintf_internal_r+0x328>
    2f14:	1080068c 	andi	r2,r2,26
    2f18:	00c00284 	movi	r3,10
    2f1c:	10c0aa26 	beq	r2,r3,31c8 <___vfprintf_internal_r+0x348>
    2f20:	dac01e04 	addi	r11,sp,120
    2f24:	db001dc4 	addi	r12,sp,119
    2f28:	d8800404 	addi	r2,sp,16
    2f2c:	050000b4 	movhi	r20,2
    2f30:	dac02815 	stw	r11,160(sp)
    2f34:	5b17c83a 	sub	r11,r11,r12
    2f38:	a5039184 	addi	r20,r20,3654
    2f3c:	db002915 	stw	r12,164(sp)
    2f40:	d8801e15 	stw	r2,120(sp)
    2f44:	d8002015 	stw	zero,128(sp)
    2f48:	d8001f15 	stw	zero,124(sp)
    2f4c:	d8003315 	stw	zero,204(sp)
    2f50:	d8003715 	stw	zero,220(sp)
    2f54:	d8003915 	stw	zero,228(sp)
    2f58:	1011883a 	mov	r8,r2
    2f5c:	d8003b15 	stw	zero,236(sp)
    2f60:	d8003a15 	stw	zero,232(sp)
    2f64:	d8002f15 	stw	zero,188(sp)
    2f68:	dac03c15 	stw	r11,240(sp)
    2f6c:	db002a17 	ldw	r12,168(sp)
    2f70:	60800007 	ldb	r2,0(r12)
    2f74:	1000be26 	beq	r2,zero,3270 <___vfprintf_internal_r+0x3f0>
    2f78:	00c00944 	movi	r3,37
    2f7c:	10c0bc26 	beq	r2,r3,3270 <___vfprintf_internal_r+0x3f0>
    2f80:	6021883a 	mov	r16,r12
    2f84:	00000106 	br	2f8c <___vfprintf_internal_r+0x10c>
    2f88:	10c08426 	beq	r2,r3,319c <___vfprintf_internal_r+0x31c>
    2f8c:	84000044 	addi	r16,r16,1
    2f90:	80800007 	ldb	r2,0(r16)
    2f94:	103ffc1e 	bne	r2,zero,2f88 <__alt_mem_Flash_flash_data+0xf4002f88>
    2f98:	dac02a17 	ldw	r11,168(sp)
    2f9c:	82e3c83a 	sub	r17,r16,r11
    2fa0:	88000f26 	beq	r17,zero,2fe0 <___vfprintf_internal_r+0x160>
    2fa4:	d8c02017 	ldw	r3,128(sp)
    2fa8:	d8801f17 	ldw	r2,124(sp)
    2fac:	dac02a17 	ldw	r11,168(sp)
    2fb0:	1c47883a 	add	r3,r3,r17
    2fb4:	10800044 	addi	r2,r2,1
    2fb8:	d8c02015 	stw	r3,128(sp)
    2fbc:	42c00015 	stw	r11,0(r8)
    2fc0:	44400115 	stw	r17,4(r8)
    2fc4:	d8801f15 	stw	r2,124(sp)
    2fc8:	00c001c4 	movi	r3,7
    2fcc:	18809316 	blt	r3,r2,321c <___vfprintf_internal_r+0x39c>
    2fd0:	42000204 	addi	r8,r8,8
    2fd4:	db002f17 	ldw	r12,188(sp)
    2fd8:	6459883a 	add	r12,r12,r17
    2fdc:	db002f15 	stw	r12,188(sp)
    2fe0:	80800007 	ldb	r2,0(r16)
    2fe4:	10009426 	beq	r2,zero,3238 <___vfprintf_internal_r+0x3b8>
    2fe8:	80800044 	addi	r2,r16,1
    2fec:	84000047 	ldb	r16,1(r16)
    2ff0:	d8002785 	stb	zero,158(sp)
    2ff4:	000d883a 	mov	r6,zero
    2ff8:	027fffc4 	movi	r9,-1
    2ffc:	d8002e15 	stw	zero,184(sp)
    3000:	0023883a 	mov	r17,zero
    3004:	01001604 	movi	r4,88
    3008:	01400244 	movi	r5,9
    300c:	02800a84 	movi	r10,42
    3010:	01c01b04 	movi	r7,108
    3014:	10c00044 	addi	r3,r2,1
    3018:	80bff804 	addi	r2,r16,-32
    301c:	2082cd36 	bltu	r4,r2,3b54 <___vfprintf_internal_r+0xcd4>
    3020:	100490ba 	slli	r2,r2,2
    3024:	02c00034 	movhi	r11,0
    3028:	5acc0e04 	addi	r11,r11,12344
    302c:	12c5883a 	add	r2,r2,r11
    3030:	10800017 	ldw	r2,0(r2)
    3034:	1000683a 	jmp	r2
    3038:	0000396c 	andhi	zero,zero,229
    303c:	00003b54 	movui	zero,237
    3040:	00003b54 	movui	zero,237
    3044:	00003abc 	xorhi	zero,zero,234
    3048:	00003b54 	movui	zero,237
    304c:	00003b54 	movui	zero,237
    3050:	00003b54 	movui	zero,237
    3054:	00003b54 	movui	zero,237
    3058:	00003b54 	movui	zero,237
    305c:	00003b54 	movui	zero,237
    3060:	0000398c 	andi	zero,zero,230
    3064:	000039b8 	rdprs	zero,zero,230
    3068:	00003b54 	movui	zero,237
    306c:	00003278 	rdprs	zero,zero,201
    3070:	00003288 	cmpgei	zero,zero,202
    3074:	00003b54 	movui	zero,237
    3078:	000032c8 	cmpgei	zero,zero,203
    307c:	000032d8 	cmpnei	zero,zero,203
    3080:	000032d8 	cmpnei	zero,zero,203
    3084:	000032d8 	cmpnei	zero,zero,203
    3088:	000032d8 	cmpnei	zero,zero,203
    308c:	000032d8 	cmpnei	zero,zero,203
    3090:	000032d8 	cmpnei	zero,zero,203
    3094:	000032d8 	cmpnei	zero,zero,203
    3098:	000032d8 	cmpnei	zero,zero,203
    309c:	000032d8 	cmpnei	zero,zero,203
    30a0:	00003b54 	movui	zero,237
    30a4:	00003b54 	movui	zero,237
    30a8:	00003b54 	movui	zero,237
    30ac:	00003b54 	movui	zero,237
    30b0:	00003b54 	movui	zero,237
    30b4:	00003b54 	movui	zero,237
    30b8:	00003b54 	movui	zero,237
    30bc:	00003b54 	movui	zero,237
    30c0:	00003b54 	movui	zero,237
    30c4:	00003b54 	movui	zero,237
    30c8:	0000330c 	andi	zero,zero,204
    30cc:	0000377c 	xorhi	zero,zero,221
    30d0:	00003b54 	movui	zero,237
    30d4:	0000377c 	xorhi	zero,zero,221
    30d8:	00003b54 	movui	zero,237
    30dc:	00003b54 	movui	zero,237
    30e0:	00003b54 	movui	zero,237
    30e4:	00003b54 	movui	zero,237
    30e8:	00003868 	cmpgeui	zero,zero,225
    30ec:	00003b54 	movui	zero,237
    30f0:	00003b54 	movui	zero,237
    30f4:	00003710 	cmplti	zero,zero,220
    30f8:	00003b54 	movui	zero,237
    30fc:	00003b54 	movui	zero,237
    3100:	00003b54 	movui	zero,237
    3104:	00003b54 	movui	zero,237
    3108:	00003b54 	movui	zero,237
    310c:	0000374c 	andi	zero,zero,221
    3110:	00003b54 	movui	zero,237
    3114:	00003b54 	movui	zero,237
    3118:	00003910 	cmplti	zero,zero,228
    311c:	00003b54 	movui	zero,237
    3120:	00003b54 	movui	zero,237
    3124:	00003b54 	movui	zero,237
    3128:	00003b54 	movui	zero,237
    312c:	00003b54 	movui	zero,237
    3130:	00003b54 	movui	zero,237
    3134:	00003b54 	movui	zero,237
    3138:	00003b54 	movui	zero,237
    313c:	00003b54 	movui	zero,237
    3140:	00003b54 	movui	zero,237
    3144:	000039c8 	cmpgei	zero,zero,231
    3148:	00003878 	rdprs	zero,zero,225
    314c:	0000377c 	xorhi	zero,zero,221
    3150:	0000377c 	xorhi	zero,zero,221
    3154:	0000377c 	xorhi	zero,zero,221
    3158:	000038b8 	rdprs	zero,zero,226
    315c:	00003878 	rdprs	zero,zero,225
    3160:	00003b54 	movui	zero,237
    3164:	00003b54 	movui	zero,237
    3168:	000038c8 	cmpgei	zero,zero,227
    316c:	00003b54 	movui	zero,237
    3170:	000038dc 	xori	zero,zero,227
    3174:	00003b18 	cmpnei	zero,zero,236
    3178:	00003820 	cmpeqi	zero,zero,224
    317c:	00003acc 	andi	zero,zero,235
    3180:	00003b54 	movui	zero,237
    3184:	00003a08 	cmpgei	zero,zero,232
    3188:	00003b54 	movui	zero,237
    318c:	00003adc 	xori	zero,zero,235
    3190:	00003b54 	movui	zero,237
    3194:	00003b54 	movui	zero,237
    3198:	00003a7c 	xorhi	zero,zero,233
    319c:	db002a17 	ldw	r12,168(sp)
    31a0:	8323c83a 	sub	r17,r16,r12
    31a4:	003f7e06 	br	2fa0 <__alt_mem_Flash_flash_data+0xf4002fa0>
    31a8:	b009883a 	mov	r4,r22
    31ac:	b80b883a 	mov	r5,r23
    31b0:	0004eb00 	call	4eb0 <__swsetup_r>
    31b4:	10000c1e 	bne	r2,zero,31e8 <___vfprintf_internal_r+0x368>
    31b8:	b880030b 	ldhu	r2,12(r23)
    31bc:	00c00284 	movi	r3,10
    31c0:	1080068c 	andi	r2,r2,26
    31c4:	10ff561e 	bne	r2,r3,2f20 <__alt_mem_Flash_flash_data+0xf4002f20>
    31c8:	b880038f 	ldh	r2,14(r23)
    31cc:	103f5416 	blt	r2,zero,2f20 <__alt_mem_Flash_flash_data+0xf4002f20>
    31d0:	d9802a17 	ldw	r6,168(sp)
    31d4:	d9c02d17 	ldw	r7,180(sp)
    31d8:	b009883a 	mov	r4,r22
    31dc:	b80b883a 	mov	r5,r23
    31e0:	0004df40 	call	4df4 <__sbprintf>
    31e4:	00000106 	br	31ec <___vfprintf_internal_r+0x36c>
    31e8:	00bfffc4 	movi	r2,-1
    31ec:	dfc04917 	ldw	ra,292(sp)
    31f0:	df004817 	ldw	fp,288(sp)
    31f4:	ddc04717 	ldw	r23,284(sp)
    31f8:	dd804617 	ldw	r22,280(sp)
    31fc:	dd404517 	ldw	r21,276(sp)
    3200:	dd004417 	ldw	r20,272(sp)
    3204:	dcc04317 	ldw	r19,268(sp)
    3208:	dc804217 	ldw	r18,264(sp)
    320c:	dc404117 	ldw	r17,260(sp)
    3210:	dc004017 	ldw	r16,256(sp)
    3214:	dec04a04 	addi	sp,sp,296
    3218:	f800283a 	ret
    321c:	b009883a 	mov	r4,r22
    3220:	b80b883a 	mov	r5,r23
    3224:	d9801e04 	addi	r6,sp,120
    3228:	000b3940 	call	b394 <__sprint_r>
    322c:	1000081e 	bne	r2,zero,3250 <___vfprintf_internal_r+0x3d0>
    3230:	da000404 	addi	r8,sp,16
    3234:	003f6706 	br	2fd4 <__alt_mem_Flash_flash_data+0xf4002fd4>
    3238:	d8802017 	ldw	r2,128(sp)
    323c:	10000426 	beq	r2,zero,3250 <___vfprintf_internal_r+0x3d0>
    3240:	b009883a 	mov	r4,r22
    3244:	b80b883a 	mov	r5,r23
    3248:	d9801e04 	addi	r6,sp,120
    324c:	000b3940 	call	b394 <__sprint_r>
    3250:	b880030b 	ldhu	r2,12(r23)
    3254:	1080100c 	andi	r2,r2,64
    3258:	103fe31e 	bne	r2,zero,31e8 <__alt_mem_Flash_flash_data+0xf40031e8>
    325c:	d8802f17 	ldw	r2,188(sp)
    3260:	003fe206 	br	31ec <__alt_mem_Flash_flash_data+0xf40031ec>
    3264:	b009883a 	mov	r4,r22
    3268:	0006f100 	call	6f10 <__sinit>
    326c:	003f1c06 	br	2ee0 <__alt_mem_Flash_flash_data+0xf4002ee0>
    3270:	dc002a17 	ldw	r16,168(sp)
    3274:	003f5a06 	br	2fe0 <__alt_mem_Flash_flash_data+0xf4002fe0>
    3278:	1805883a 	mov	r2,r3
    327c:	8c400114 	ori	r17,r17,4
    3280:	1c000007 	ldb	r16,0(r3)
    3284:	003f6306 	br	3014 <__alt_mem_Flash_flash_data+0xf4003014>
    3288:	1c000007 	ldb	r16,0(r3)
    328c:	18800044 	addi	r2,r3,1
    3290:	8286ad26 	beq	r16,r10,4d48 <___vfprintf_internal_r+0x1ec8>
    3294:	82fff404 	addi	r11,r16,-48
    3298:	1007883a 	mov	r3,r2
    329c:	0013883a 	mov	r9,zero
    32a0:	2aff5d36 	bltu	r5,r11,3018 <__alt_mem_Flash_flash_data+0xf4003018>
    32a4:	1c000007 	ldb	r16,0(r3)
    32a8:	4a4002a4 	muli	r9,r9,10
    32ac:	18c00044 	addi	r3,r3,1
    32b0:	5a53883a 	add	r9,r11,r9
    32b4:	82fff404 	addi	r11,r16,-48
    32b8:	2afffa2e 	bgeu	r5,r11,32a4 <__alt_mem_Flash_flash_data+0xf40032a4>
    32bc:	483f560e 	bge	r9,zero,3018 <__alt_mem_Flash_flash_data+0xf4003018>
    32c0:	027fffc4 	movi	r9,-1
    32c4:	003f5406 	br	3018 <__alt_mem_Flash_flash_data+0xf4003018>
    32c8:	8c402014 	ori	r17,r17,128
    32cc:	1805883a 	mov	r2,r3
    32d0:	1c000007 	ldb	r16,0(r3)
    32d4:	003f4f06 	br	3014 <__alt_mem_Flash_flash_data+0xf4003014>
    32d8:	1805883a 	mov	r2,r3
    32dc:	d8002e15 	stw	zero,184(sp)
    32e0:	82fff404 	addi	r11,r16,-48
    32e4:	0019883a 	mov	r12,zero
    32e8:	14000007 	ldb	r16,0(r2)
    32ec:	630002a4 	muli	r12,r12,10
    32f0:	18c00044 	addi	r3,r3,1
    32f4:	1805883a 	mov	r2,r3
    32f8:	62d9883a 	add	r12,r12,r11
    32fc:	82fff404 	addi	r11,r16,-48
    3300:	2afff92e 	bgeu	r5,r11,32e8 <__alt_mem_Flash_flash_data+0xf40032e8>
    3304:	db002e15 	stw	r12,184(sp)
    3308:	003f4306 	br	3018 <__alt_mem_Flash_flash_data+0xf4003018>
    330c:	8c400414 	ori	r17,r17,16
    3310:	d8c02a15 	stw	r3,168(sp)
    3314:	d9802785 	stb	r6,158(sp)
    3318:	8880080c 	andi	r2,r17,32
    331c:	d8c02d17 	ldw	r3,180(sp)
    3320:	10015a26 	beq	r2,zero,388c <___vfprintf_internal_r+0xa0c>
    3324:	db002d17 	ldw	r12,180(sp)
    3328:	18800117 	ldw	r2,4(r3)
    332c:	1cc00017 	ldw	r19,0(r3)
    3330:	63000204 	addi	r12,r12,8
    3334:	db002d15 	stw	r12,180(sp)
    3338:	1039883a 	mov	fp,r2
    333c:	10044516 	blt	r2,zero,4454 <___vfprintf_internal_r+0x15d4>
    3340:	dd402783 	ldbu	r21,158(sp)
    3344:	da403215 	stw	r9,200(sp)
    3348:	00800044 	movi	r2,1
    334c:	9f06b03a 	or	r3,r19,fp
    3350:	48000216 	blt	r9,zero,335c <___vfprintf_internal_r+0x4dc>
    3354:	013fdfc4 	movi	r4,-129
    3358:	8922703a 	and	r17,r17,r4
    335c:	1802071e 	bne	r3,zero,3b7c <___vfprintf_internal_r+0xcfc>
    3360:	4802fa26 	beq	r9,zero,3f4c <___vfprintf_internal_r+0x10cc>
    3364:	10803fcc 	andi	r2,r2,255
    3368:	00c00044 	movi	r3,1
    336c:	10c22926 	beq	r2,r3,3c14 <___vfprintf_internal_r+0xd94>
    3370:	00c00084 	movi	r3,2
    3374:	10c31726 	beq	r2,r3,3fd4 <___vfprintf_internal_r+0x1154>
    3378:	d8c01e04 	addi	r3,sp,120
    337c:	9808d0fa 	srli	r4,r19,3
    3380:	e00a977a 	slli	r5,fp,29
    3384:	e038d0fa 	srli	fp,fp,3
    3388:	9cc001cc 	andi	r19,r19,7
    338c:	98800c04 	addi	r2,r19,48
    3390:	18ffffc4 	addi	r3,r3,-1
    3394:	2926b03a 	or	r19,r5,r4
    3398:	18800005 	stb	r2,0(r3)
    339c:	9f08b03a 	or	r4,r19,fp
    33a0:	203ff61e 	bne	r4,zero,337c <__alt_mem_Flash_flash_data+0xf400337c>
    33a4:	8900004c 	andi	r4,r17,1
    33a8:	d8c03115 	stw	r3,196(sp)
    33ac:	2003931e 	bne	r4,zero,41fc <___vfprintf_internal_r+0x137c>
    33b0:	dac02817 	ldw	r11,160(sp)
    33b4:	58e5c83a 	sub	r18,r11,r3
    33b8:	9005883a 	mov	r2,r18
    33bc:	9240010e 	bge	r18,r9,33c4 <___vfprintf_internal_r+0x544>
    33c0:	4805883a 	mov	r2,r9
    33c4:	d8802b15 	stw	r2,172(sp)
    33c8:	d8003415 	stw	zero,208(sp)
    33cc:	a8803fcc 	andi	r2,r21,255
    33d0:	1080201c 	xori	r2,r2,128
    33d4:	10bfe004 	addi	r2,r2,-128
    33d8:	10000326 	beq	r2,zero,33e8 <___vfprintf_internal_r+0x568>
    33dc:	db002b17 	ldw	r12,172(sp)
    33e0:	63000044 	addi	r12,r12,1
    33e4:	db002b15 	stw	r12,172(sp)
    33e8:	88c0008c 	andi	r3,r17,2
    33ec:	d8c02c15 	stw	r3,176(sp)
    33f0:	18000326 	beq	r3,zero,3400 <___vfprintf_internal_r+0x580>
    33f4:	dac02b17 	ldw	r11,172(sp)
    33f8:	5ac00084 	addi	r11,r11,2
    33fc:	dac02b15 	stw	r11,172(sp)
    3400:	8b00210c 	andi	r12,r17,132
    3404:	db003015 	stw	r12,192(sp)
    3408:	6001da1e 	bne	r12,zero,3b74 <___vfprintf_internal_r+0xcf4>
    340c:	dac02e17 	ldw	r11,184(sp)
    3410:	db002b17 	ldw	r12,172(sp)
    3414:	5b39c83a 	sub	fp,r11,r12
    3418:	0701d60e 	bge	zero,fp,3b74 <___vfprintf_internal_r+0xcf4>
    341c:	02400404 	movi	r9,16
    3420:	d8c02017 	ldw	r3,128(sp)
    3424:	d8801f17 	ldw	r2,124(sp)
    3428:	4f053c0e 	bge	r9,fp,491c <___vfprintf_internal_r+0x1a9c>
    342c:	014000b4 	movhi	r5,2
    3430:	29439584 	addi	r5,r5,3670
    3434:	d9403615 	stw	r5,216(sp)
    3438:	482b883a 	mov	r21,r9
    343c:	04c001c4 	movi	r19,7
    3440:	00000306 	br	3450 <___vfprintf_internal_r+0x5d0>
    3444:	e73ffc04 	addi	fp,fp,-16
    3448:	42000204 	addi	r8,r8,8
    344c:	af00130e 	bge	r21,fp,349c <___vfprintf_internal_r+0x61c>
    3450:	02c000b4 	movhi	r11,2
    3454:	18c00404 	addi	r3,r3,16
    3458:	10800044 	addi	r2,r2,1
    345c:	5ac39584 	addi	r11,r11,3670
    3460:	42c00015 	stw	r11,0(r8)
    3464:	45400115 	stw	r21,4(r8)
    3468:	d8c02015 	stw	r3,128(sp)
    346c:	d8801f15 	stw	r2,124(sp)
    3470:	98bff40e 	bge	r19,r2,3444 <__alt_mem_Flash_flash_data+0xf4003444>
    3474:	b009883a 	mov	r4,r22
    3478:	b80b883a 	mov	r5,r23
    347c:	d9801e04 	addi	r6,sp,120
    3480:	000b3940 	call	b394 <__sprint_r>
    3484:	103f721e 	bne	r2,zero,3250 <__alt_mem_Flash_flash_data+0xf4003250>
    3488:	e73ffc04 	addi	fp,fp,-16
    348c:	d8c02017 	ldw	r3,128(sp)
    3490:	d8801f17 	ldw	r2,124(sp)
    3494:	da000404 	addi	r8,sp,16
    3498:	af3fed16 	blt	r21,fp,3450 <__alt_mem_Flash_flash_data+0xf4003450>
    349c:	db003617 	ldw	r12,216(sp)
    34a0:	e0c7883a 	add	r3,fp,r3
    34a4:	10800044 	addi	r2,r2,1
    34a8:	43000015 	stw	r12,0(r8)
    34ac:	47000115 	stw	fp,4(r8)
    34b0:	d8c02015 	stw	r3,128(sp)
    34b4:	d8801f15 	stw	r2,124(sp)
    34b8:	010001c4 	movi	r4,7
    34bc:	20830e16 	blt	r4,r2,40f8 <___vfprintf_internal_r+0x1278>
    34c0:	d8802787 	ldb	r2,158(sp)
    34c4:	42000204 	addi	r8,r8,8
    34c8:	10000c26 	beq	r2,zero,34fc <___vfprintf_internal_r+0x67c>
    34cc:	d8801f17 	ldw	r2,124(sp)
    34d0:	d9002784 	addi	r4,sp,158
    34d4:	18c00044 	addi	r3,r3,1
    34d8:	10800044 	addi	r2,r2,1
    34dc:	41000015 	stw	r4,0(r8)
    34e0:	01000044 	movi	r4,1
    34e4:	41000115 	stw	r4,4(r8)
    34e8:	d8c02015 	stw	r3,128(sp)
    34ec:	d8801f15 	stw	r2,124(sp)
    34f0:	010001c4 	movi	r4,7
    34f4:	2082a716 	blt	r4,r2,3f94 <___vfprintf_internal_r+0x1114>
    34f8:	42000204 	addi	r8,r8,8
    34fc:	dac02c17 	ldw	r11,176(sp)
    3500:	58000c26 	beq	r11,zero,3534 <___vfprintf_internal_r+0x6b4>
    3504:	d8801f17 	ldw	r2,124(sp)
    3508:	d9002704 	addi	r4,sp,156
    350c:	18c00084 	addi	r3,r3,2
    3510:	10800044 	addi	r2,r2,1
    3514:	41000015 	stw	r4,0(r8)
    3518:	01000084 	movi	r4,2
    351c:	41000115 	stw	r4,4(r8)
    3520:	d8c02015 	stw	r3,128(sp)
    3524:	d8801f15 	stw	r2,124(sp)
    3528:	010001c4 	movi	r4,7
    352c:	2082a116 	blt	r4,r2,3fb4 <___vfprintf_internal_r+0x1134>
    3530:	42000204 	addi	r8,r8,8
    3534:	db003017 	ldw	r12,192(sp)
    3538:	00802004 	movi	r2,128
    353c:	60820326 	beq	r12,r2,3d4c <___vfprintf_internal_r+0xecc>
    3540:	db003217 	ldw	r12,200(sp)
    3544:	64abc83a 	sub	r21,r12,r18
    3548:	0540260e 	bge	zero,r21,35e4 <___vfprintf_internal_r+0x764>
    354c:	07000404 	movi	fp,16
    3550:	d8801f17 	ldw	r2,124(sp)
    3554:	e544570e 	bge	fp,r21,46b4 <___vfprintf_internal_r+0x1834>
    3558:	014000b4 	movhi	r5,2
    355c:	29439184 	addi	r5,r5,3654
    3560:	d9402c15 	stw	r5,176(sp)
    3564:	04c001c4 	movi	r19,7
    3568:	00000306 	br	3578 <___vfprintf_internal_r+0x6f8>
    356c:	ad7ffc04 	addi	r21,r21,-16
    3570:	42000204 	addi	r8,r8,8
    3574:	e540110e 	bge	fp,r21,35bc <___vfprintf_internal_r+0x73c>
    3578:	18c00404 	addi	r3,r3,16
    357c:	10800044 	addi	r2,r2,1
    3580:	45000015 	stw	r20,0(r8)
    3584:	47000115 	stw	fp,4(r8)
    3588:	d8c02015 	stw	r3,128(sp)
    358c:	d8801f15 	stw	r2,124(sp)
    3590:	98bff60e 	bge	r19,r2,356c <__alt_mem_Flash_flash_data+0xf400356c>
    3594:	b009883a 	mov	r4,r22
    3598:	b80b883a 	mov	r5,r23
    359c:	d9801e04 	addi	r6,sp,120
    35a0:	000b3940 	call	b394 <__sprint_r>
    35a4:	103f2a1e 	bne	r2,zero,3250 <__alt_mem_Flash_flash_data+0xf4003250>
    35a8:	ad7ffc04 	addi	r21,r21,-16
    35ac:	d8c02017 	ldw	r3,128(sp)
    35b0:	d8801f17 	ldw	r2,124(sp)
    35b4:	da000404 	addi	r8,sp,16
    35b8:	e57fef16 	blt	fp,r21,3578 <__alt_mem_Flash_flash_data+0xf4003578>
    35bc:	dac02c17 	ldw	r11,176(sp)
    35c0:	1d47883a 	add	r3,r3,r21
    35c4:	10800044 	addi	r2,r2,1
    35c8:	42c00015 	stw	r11,0(r8)
    35cc:	45400115 	stw	r21,4(r8)
    35d0:	d8c02015 	stw	r3,128(sp)
    35d4:	d8801f15 	stw	r2,124(sp)
    35d8:	010001c4 	movi	r4,7
    35dc:	20826516 	blt	r4,r2,3f74 <___vfprintf_internal_r+0x10f4>
    35e0:	42000204 	addi	r8,r8,8
    35e4:	8880400c 	andi	r2,r17,256
    35e8:	1001901e 	bne	r2,zero,3c2c <___vfprintf_internal_r+0xdac>
    35ec:	d8801f17 	ldw	r2,124(sp)
    35f0:	db003117 	ldw	r12,196(sp)
    35f4:	1c87883a 	add	r3,r3,r18
    35f8:	10800044 	addi	r2,r2,1
    35fc:	43000015 	stw	r12,0(r8)
    3600:	44800115 	stw	r18,4(r8)
    3604:	d8c02015 	stw	r3,128(sp)
    3608:	d8801f15 	stw	r2,124(sp)
    360c:	010001c4 	movi	r4,7
    3610:	20824016 	blt	r4,r2,3f14 <___vfprintf_internal_r+0x1094>
    3614:	42000204 	addi	r8,r8,8
    3618:	8c40010c 	andi	r17,r17,4
    361c:	88003126 	beq	r17,zero,36e4 <___vfprintf_internal_r+0x864>
    3620:	db002e17 	ldw	r12,184(sp)
    3624:	dac02b17 	ldw	r11,172(sp)
    3628:	62e1c83a 	sub	r16,r12,r11
    362c:	04002d0e 	bge	zero,r16,36e4 <___vfprintf_internal_r+0x864>
    3630:	04400404 	movi	r17,16
    3634:	d8801f17 	ldw	r2,124(sp)
    3638:	8c05150e 	bge	r17,r16,4a90 <___vfprintf_internal_r+0x1c10>
    363c:	010000b4 	movhi	r4,2
    3640:	21039584 	addi	r4,r4,3670
    3644:	d9003615 	stw	r4,216(sp)
    3648:	048001c4 	movi	r18,7
    364c:	00000306 	br	365c <___vfprintf_internal_r+0x7dc>
    3650:	843ffc04 	addi	r16,r16,-16
    3654:	42000204 	addi	r8,r8,8
    3658:	8c00130e 	bge	r17,r16,36a8 <___vfprintf_internal_r+0x828>
    365c:	014000b4 	movhi	r5,2
    3660:	18c00404 	addi	r3,r3,16
    3664:	10800044 	addi	r2,r2,1
    3668:	29439584 	addi	r5,r5,3670
    366c:	41400015 	stw	r5,0(r8)
    3670:	44400115 	stw	r17,4(r8)
    3674:	d8c02015 	stw	r3,128(sp)
    3678:	d8801f15 	stw	r2,124(sp)
    367c:	90bff40e 	bge	r18,r2,3650 <__alt_mem_Flash_flash_data+0xf4003650>
    3680:	b009883a 	mov	r4,r22
    3684:	b80b883a 	mov	r5,r23
    3688:	d9801e04 	addi	r6,sp,120
    368c:	000b3940 	call	b394 <__sprint_r>
    3690:	103eef1e 	bne	r2,zero,3250 <__alt_mem_Flash_flash_data+0xf4003250>
    3694:	843ffc04 	addi	r16,r16,-16
    3698:	d8c02017 	ldw	r3,128(sp)
    369c:	d8801f17 	ldw	r2,124(sp)
    36a0:	da000404 	addi	r8,sp,16
    36a4:	8c3fed16 	blt	r17,r16,365c <__alt_mem_Flash_flash_data+0xf400365c>
    36a8:	dac03617 	ldw	r11,216(sp)
    36ac:	1c07883a 	add	r3,r3,r16
    36b0:	10800044 	addi	r2,r2,1
    36b4:	42c00015 	stw	r11,0(r8)
    36b8:	44000115 	stw	r16,4(r8)
    36bc:	d8c02015 	stw	r3,128(sp)
    36c0:	d8801f15 	stw	r2,124(sp)
    36c4:	010001c4 	movi	r4,7
    36c8:	2080060e 	bge	r4,r2,36e4 <___vfprintf_internal_r+0x864>
    36cc:	b009883a 	mov	r4,r22
    36d0:	b80b883a 	mov	r5,r23
    36d4:	d9801e04 	addi	r6,sp,120
    36d8:	000b3940 	call	b394 <__sprint_r>
    36dc:	103edc1e 	bne	r2,zero,3250 <__alt_mem_Flash_flash_data+0xf4003250>
    36e0:	d8c02017 	ldw	r3,128(sp)
    36e4:	d8802b17 	ldw	r2,172(sp)
    36e8:	db002e17 	ldw	r12,184(sp)
    36ec:	1300010e 	bge	r2,r12,36f4 <___vfprintf_internal_r+0x874>
    36f0:	6005883a 	mov	r2,r12
    36f4:	dac02f17 	ldw	r11,188(sp)
    36f8:	5897883a 	add	r11,r11,r2
    36fc:	dac02f15 	stw	r11,188(sp)
    3700:	18020c1e 	bne	r3,zero,3f34 <___vfprintf_internal_r+0x10b4>
    3704:	d8001f15 	stw	zero,124(sp)
    3708:	da000404 	addi	r8,sp,16
    370c:	003e1706 	br	2f6c <__alt_mem_Flash_flash_data+0xf4002f6c>
    3710:	8c400414 	ori	r17,r17,16
    3714:	d8c02a15 	stw	r3,168(sp)
    3718:	8880080c 	andi	r2,r17,32
    371c:	10010126 	beq	r2,zero,3b24 <___vfprintf_internal_r+0xca4>
    3720:	db002d17 	ldw	r12,180(sp)
    3724:	0005883a 	mov	r2,zero
    3728:	64c00017 	ldw	r19,0(r12)
    372c:	67000117 	ldw	fp,4(r12)
    3730:	63000204 	addi	r12,r12,8
    3734:	db002d15 	stw	r12,180(sp)
    3738:	9f06b03a 	or	r3,r19,fp
    373c:	d8002785 	stb	zero,158(sp)
    3740:	da403215 	stw	r9,200(sp)
    3744:	002b883a 	mov	r21,zero
    3748:	003f0106 	br	3350 <__alt_mem_Flash_flash_data+0xf4003350>
    374c:	8c400414 	ori	r17,r17,16
    3750:	d8c02a15 	stw	r3,168(sp)
    3754:	8880080c 	andi	r2,r17,32
    3758:	1000e326 	beq	r2,zero,3ae8 <___vfprintf_internal_r+0xc68>
    375c:	dac02d17 	ldw	r11,180(sp)
    3760:	00800044 	movi	r2,1
    3764:	5cc00017 	ldw	r19,0(r11)
    3768:	5f000117 	ldw	fp,4(r11)
    376c:	5ac00204 	addi	r11,r11,8
    3770:	dac02d15 	stw	r11,180(sp)
    3774:	9f06b03a 	or	r3,r19,fp
    3778:	003ff006 	br	373c <__alt_mem_Flash_flash_data+0xf400373c>
    377c:	db002d17 	ldw	r12,180(sp)
    3780:	dac02d17 	ldw	r11,180(sp)
    3784:	d8c02a15 	stw	r3,168(sp)
    3788:	63000017 	ldw	r12,0(r12)
    378c:	5ac00117 	ldw	r11,4(r11)
    3790:	d9802785 	stb	r6,158(sp)
    3794:	6009883a 	mov	r4,r12
    3798:	580b883a 	mov	r5,r11
    379c:	db003715 	stw	r12,220(sp)
    37a0:	da003f15 	stw	r8,252(sp)
    37a4:	da403e15 	stw	r9,248(sp)
    37a8:	dac03915 	stw	r11,228(sp)
    37ac:	0009dec0 	call	9dec <__fpclassifyd>
    37b0:	db002d17 	ldw	r12,180(sp)
    37b4:	04800044 	movi	r18,1
    37b8:	da003f17 	ldw	r8,252(sp)
    37bc:	64c00204 	addi	r19,r12,8
    37c0:	da403e17 	ldw	r9,248(sp)
    37c4:	d9003717 	ldw	r4,220(sp)
    37c8:	d9403917 	ldw	r5,228(sp)
    37cc:	14832b1e 	bne	r2,r18,447c <___vfprintf_internal_r+0x15fc>
    37d0:	000d883a 	mov	r6,zero
    37d4:	000f883a 	mov	r7,zero
    37d8:	000ef9c0 	call	ef9c <__ledf2>
    37dc:	da003f17 	ldw	r8,252(sp)
    37e0:	1004b716 	blt	r2,zero,4ac0 <___vfprintf_internal_r+0x1c40>
    37e4:	dd402783 	ldbu	r21,158(sp)
    37e8:	008011c4 	movi	r2,71
    37ec:	14040e0e 	bge	r2,r16,4828 <___vfprintf_internal_r+0x19a8>
    37f0:	00c000b4 	movhi	r3,2
    37f4:	18c37a04 	addi	r3,r3,3560
    37f8:	d8c03115 	stw	r3,196(sp)
    37fc:	02c000c4 	movi	r11,3
    3800:	00bfdfc4 	movi	r2,-129
    3804:	dac02b15 	stw	r11,172(sp)
    3808:	88a2703a 	and	r17,r17,r2
    380c:	dcc02d15 	stw	r19,180(sp)
    3810:	5825883a 	mov	r18,r11
    3814:	d8003215 	stw	zero,200(sp)
    3818:	d8003415 	stw	zero,208(sp)
    381c:	003eeb06 	br	33cc <__alt_mem_Flash_flash_data+0xf40033cc>
    3820:	db002d17 	ldw	r12,180(sp)
    3824:	00800c04 	movi	r2,48
    3828:	d8802705 	stb	r2,156(sp)
    382c:	64c00017 	ldw	r19,0(r12)
    3830:	00801e04 	movi	r2,120
    3834:	d8802745 	stb	r2,157(sp)
    3838:	008000b4 	movhi	r2,2
    383c:	10838204 	addi	r2,r2,3592
    3840:	63000104 	addi	r12,r12,4
    3844:	d8c02a15 	stw	r3,168(sp)
    3848:	d8803b15 	stw	r2,236(sp)
    384c:	0039883a 	mov	fp,zero
    3850:	8c400094 	ori	r17,r17,2
    3854:	db002d15 	stw	r12,180(sp)
    3858:	00800084 	movi	r2,2
    385c:	04001e04 	movi	r16,120
    3860:	9807883a 	mov	r3,r19
    3864:	003fb506 	br	373c <__alt_mem_Flash_flash_data+0xf400373c>
    3868:	8c400214 	ori	r17,r17,8
    386c:	1805883a 	mov	r2,r3
    3870:	1c000007 	ldb	r16,0(r3)
    3874:	003de706 	br	3014 <__alt_mem_Flash_flash_data+0xf4003014>
    3878:	d8c02a15 	stw	r3,168(sp)
    387c:	d9802785 	stb	r6,158(sp)
    3880:	8880080c 	andi	r2,r17,32
    3884:	d8c02d17 	ldw	r3,180(sp)
    3888:	103ea61e 	bne	r2,zero,3324 <__alt_mem_Flash_flash_data+0xf4003324>
    388c:	8880040c 	andi	r2,r17,16
    3890:	1002221e 	bne	r2,zero,411c <___vfprintf_internal_r+0x129c>
    3894:	8880100c 	andi	r2,r17,64
    3898:	10022026 	beq	r2,zero,411c <___vfprintf_internal_r+0x129c>
    389c:	1cc0000f 	ldh	r19,0(r3)
    38a0:	db002d17 	ldw	r12,180(sp)
    38a4:	9839d7fa 	srai	fp,r19,31
    38a8:	63000104 	addi	r12,r12,4
    38ac:	db002d15 	stw	r12,180(sp)
    38b0:	e005883a 	mov	r2,fp
    38b4:	003ea106 	br	333c <__alt_mem_Flash_flash_data+0xf400333c>
    38b8:	8c401014 	ori	r17,r17,64
    38bc:	1805883a 	mov	r2,r3
    38c0:	1c000007 	ldb	r16,0(r3)
    38c4:	003dd306 	br	3014 <__alt_mem_Flash_flash_data+0xf4003014>
    38c8:	1c000007 	ldb	r16,0(r3)
    38cc:	81c3e926 	beq	r16,r7,4874 <___vfprintf_internal_r+0x19f4>
    38d0:	8c400414 	ori	r17,r17,16
    38d4:	1805883a 	mov	r2,r3
    38d8:	003dce06 	br	3014 <__alt_mem_Flash_flash_data+0xf4003014>
    38dc:	d8c02a15 	stw	r3,168(sp)
    38e0:	d9802785 	stb	r6,158(sp)
    38e4:	8880080c 	andi	r2,r17,32
    38e8:	10034726 	beq	r2,zero,4608 <___vfprintf_internal_r+0x1788>
    38ec:	db002d17 	ldw	r12,180(sp)
    38f0:	dac02f17 	ldw	r11,188(sp)
    38f4:	60800017 	ldw	r2,0(r12)
    38f8:	5807d7fa 	srai	r3,r11,31
    38fc:	63000104 	addi	r12,r12,4
    3900:	db002d15 	stw	r12,180(sp)
    3904:	12c00015 	stw	r11,0(r2)
    3908:	10c00115 	stw	r3,4(r2)
    390c:	003d9706 	br	2f6c <__alt_mem_Flash_flash_data+0xf4002f6c>
    3910:	030000b4 	movhi	r12,2
    3914:	63037d04 	addi	r12,r12,3572
    3918:	d8c02a15 	stw	r3,168(sp)
    391c:	d9802785 	stb	r6,158(sp)
    3920:	db003b15 	stw	r12,236(sp)
    3924:	88c0080c 	andi	r3,r17,32
    3928:	d8802d17 	ldw	r2,180(sp)
    392c:	18005b26 	beq	r3,zero,3a9c <___vfprintf_internal_r+0xc1c>
    3930:	dac02d17 	ldw	r11,180(sp)
    3934:	14c00017 	ldw	r19,0(r2)
    3938:	17000117 	ldw	fp,4(r2)
    393c:	5ac00204 	addi	r11,r11,8
    3940:	dac02d15 	stw	r11,180(sp)
    3944:	8880004c 	andi	r2,r17,1
    3948:	10022926 	beq	r2,zero,41f0 <___vfprintf_internal_r+0x1370>
    394c:	9f06b03a 	or	r3,r19,fp
    3950:	18032b26 	beq	r3,zero,4600 <___vfprintf_internal_r+0x1780>
    3954:	00800c04 	movi	r2,48
    3958:	d8802705 	stb	r2,156(sp)
    395c:	dc002745 	stb	r16,157(sp)
    3960:	8c400094 	ori	r17,r17,2
    3964:	00800084 	movi	r2,2
    3968:	003f7406 	br	373c <__alt_mem_Flash_flash_data+0xf400373c>
    396c:	30803fcc 	andi	r2,r6,255
    3970:	1080201c 	xori	r2,r2,128
    3974:	10bfe004 	addi	r2,r2,-128
    3978:	1003351e 	bne	r2,zero,4650 <___vfprintf_internal_r+0x17d0>
    397c:	1805883a 	mov	r2,r3
    3980:	01800804 	movi	r6,32
    3984:	1c000007 	ldb	r16,0(r3)
    3988:	003da206 	br	3014 <__alt_mem_Flash_flash_data+0xf4003014>
    398c:	dac02d17 	ldw	r11,180(sp)
    3990:	db002d17 	ldw	r12,180(sp)
    3994:	5ac00017 	ldw	r11,0(r11)
    3998:	dac02e15 	stw	r11,184(sp)
    399c:	62c00104 	addi	r11,r12,4
    39a0:	db002e17 	ldw	r12,184(sp)
    39a4:	6003ad16 	blt	r12,zero,485c <___vfprintf_internal_r+0x19dc>
    39a8:	dac02d15 	stw	r11,180(sp)
    39ac:	1805883a 	mov	r2,r3
    39b0:	1c000007 	ldb	r16,0(r3)
    39b4:	003d9706 	br	3014 <__alt_mem_Flash_flash_data+0xf4003014>
    39b8:	1805883a 	mov	r2,r3
    39bc:	01800ac4 	movi	r6,43
    39c0:	1c000007 	ldb	r16,0(r3)
    39c4:	003d9306 	br	3014 <__alt_mem_Flash_flash_data+0xf4003014>
    39c8:	db002d17 	ldw	r12,180(sp)
    39cc:	d8c02a15 	stw	r3,168(sp)
    39d0:	00c00044 	movi	r3,1
    39d4:	60800017 	ldw	r2,0(r12)
    39d8:	63000104 	addi	r12,r12,4
    39dc:	d8c02b15 	stw	r3,172(sp)
    39e0:	d8002785 	stb	zero,158(sp)
    39e4:	d8801405 	stb	r2,80(sp)
    39e8:	db002d15 	stw	r12,180(sp)
    39ec:	dac01404 	addi	r11,sp,80
    39f0:	1825883a 	mov	r18,r3
    39f4:	d8003215 	stw	zero,200(sp)
    39f8:	d8003415 	stw	zero,208(sp)
    39fc:	dac03115 	stw	r11,196(sp)
    3a00:	0005883a 	mov	r2,zero
    3a04:	003e7806 	br	33e8 <__alt_mem_Flash_flash_data+0xf40033e8>
    3a08:	dac02d17 	ldw	r11,180(sp)
    3a0c:	db002d17 	ldw	r12,180(sp)
    3a10:	d8c02a15 	stw	r3,168(sp)
    3a14:	5ac00017 	ldw	r11,0(r11)
    3a18:	d8002785 	stb	zero,158(sp)
    3a1c:	64c00104 	addi	r19,r12,4
    3a20:	dac03115 	stw	r11,196(sp)
    3a24:	5803fe26 	beq	r11,zero,4a20 <___vfprintf_internal_r+0x1ba0>
    3a28:	d9003117 	ldw	r4,196(sp)
    3a2c:	4803b416 	blt	r9,zero,4900 <___vfprintf_internal_r+0x1a80>
    3a30:	480d883a 	mov	r6,r9
    3a34:	000b883a 	mov	r5,zero
    3a38:	da003f15 	stw	r8,252(sp)
    3a3c:	da403e15 	stw	r9,248(sp)
    3a40:	00083fc0 	call	83fc <memchr>
    3a44:	da003f17 	ldw	r8,252(sp)
    3a48:	da403e17 	ldw	r9,248(sp)
    3a4c:	10043026 	beq	r2,zero,4b10 <___vfprintf_internal_r+0x1c90>
    3a50:	d8c03117 	ldw	r3,196(sp)
    3a54:	10e5c83a 	sub	r18,r2,r3
    3a58:	4c836b16 	blt	r9,r18,4808 <___vfprintf_internal_r+0x1988>
    3a5c:	9005883a 	mov	r2,r18
    3a60:	9003ac16 	blt	r18,zero,4914 <___vfprintf_internal_r+0x1a94>
    3a64:	dd402783 	ldbu	r21,158(sp)
    3a68:	d8802b15 	stw	r2,172(sp)
    3a6c:	dcc02d15 	stw	r19,180(sp)
    3a70:	d8003215 	stw	zero,200(sp)
    3a74:	d8003415 	stw	zero,208(sp)
    3a78:	003e5406 	br	33cc <__alt_mem_Flash_flash_data+0xf40033cc>
    3a7c:	008000b4 	movhi	r2,2
    3a80:	10838204 	addi	r2,r2,3592
    3a84:	d8c02a15 	stw	r3,168(sp)
    3a88:	d8803b15 	stw	r2,236(sp)
    3a8c:	d9802785 	stb	r6,158(sp)
    3a90:	88c0080c 	andi	r3,r17,32
    3a94:	d8802d17 	ldw	r2,180(sp)
    3a98:	183fa51e 	bne	r3,zero,3930 <__alt_mem_Flash_flash_data+0xf4003930>
    3a9c:	88c0040c 	andi	r3,r17,16
    3aa0:	1802ee26 	beq	r3,zero,465c <___vfprintf_internal_r+0x17dc>
    3aa4:	db002d17 	ldw	r12,180(sp)
    3aa8:	14c00017 	ldw	r19,0(r2)
    3aac:	0039883a 	mov	fp,zero
    3ab0:	63000104 	addi	r12,r12,4
    3ab4:	db002d15 	stw	r12,180(sp)
    3ab8:	003fa206 	br	3944 <__alt_mem_Flash_flash_data+0xf4003944>
    3abc:	8c400054 	ori	r17,r17,1
    3ac0:	1805883a 	mov	r2,r3
    3ac4:	1c000007 	ldb	r16,0(r3)
    3ac8:	003d5206 	br	3014 <__alt_mem_Flash_flash_data+0xf4003014>
    3acc:	8c400814 	ori	r17,r17,32
    3ad0:	1805883a 	mov	r2,r3
    3ad4:	1c000007 	ldb	r16,0(r3)
    3ad8:	003d4e06 	br	3014 <__alt_mem_Flash_flash_data+0xf4003014>
    3adc:	d8c02a15 	stw	r3,168(sp)
    3ae0:	8880080c 	andi	r2,r17,32
    3ae4:	103f1d1e 	bne	r2,zero,375c <__alt_mem_Flash_flash_data+0xf400375c>
    3ae8:	8880040c 	andi	r2,r17,16
    3aec:	1001b81e 	bne	r2,zero,41d0 <___vfprintf_internal_r+0x1350>
    3af0:	8880100c 	andi	r2,r17,64
    3af4:	1001b626 	beq	r2,zero,41d0 <___vfprintf_internal_r+0x1350>
    3af8:	dac02d17 	ldw	r11,180(sp)
    3afc:	0039883a 	mov	fp,zero
    3b00:	00800044 	movi	r2,1
    3b04:	5cc0000b 	ldhu	r19,0(r11)
    3b08:	5ac00104 	addi	r11,r11,4
    3b0c:	dac02d15 	stw	r11,180(sp)
    3b10:	9807883a 	mov	r3,r19
    3b14:	003f0906 	br	373c <__alt_mem_Flash_flash_data+0xf400373c>
    3b18:	d8c02a15 	stw	r3,168(sp)
    3b1c:	8880080c 	andi	r2,r17,32
    3b20:	103eff1e 	bne	r2,zero,3720 <__alt_mem_Flash_flash_data+0xf4003720>
    3b24:	8880040c 	andi	r2,r17,16
    3b28:	1001a11e 	bne	r2,zero,41b0 <___vfprintf_internal_r+0x1330>
    3b2c:	8880100c 	andi	r2,r17,64
    3b30:	10019f26 	beq	r2,zero,41b0 <___vfprintf_internal_r+0x1330>
    3b34:	db002d17 	ldw	r12,180(sp)
    3b38:	0039883a 	mov	fp,zero
    3b3c:	0005883a 	mov	r2,zero
    3b40:	64c0000b 	ldhu	r19,0(r12)
    3b44:	63000104 	addi	r12,r12,4
    3b48:	db002d15 	stw	r12,180(sp)
    3b4c:	9807883a 	mov	r3,r19
    3b50:	003efa06 	br	373c <__alt_mem_Flash_flash_data+0xf400373c>
    3b54:	d8c02a15 	stw	r3,168(sp)
    3b58:	d9802785 	stb	r6,158(sp)
    3b5c:	803db626 	beq	r16,zero,3238 <__alt_mem_Flash_flash_data+0xf4003238>
    3b60:	00c00044 	movi	r3,1
    3b64:	d8c02b15 	stw	r3,172(sp)
    3b68:	dc001405 	stb	r16,80(sp)
    3b6c:	d8002785 	stb	zero,158(sp)
    3b70:	003f9e06 	br	39ec <__alt_mem_Flash_flash_data+0xf40039ec>
    3b74:	d8c02017 	ldw	r3,128(sp)
    3b78:	003e5306 	br	34c8 <__alt_mem_Flash_flash_data+0xf40034c8>
    3b7c:	10803fcc 	andi	r2,r2,255
    3b80:	00c00044 	movi	r3,1
    3b84:	10fdfa1e 	bne	r2,r3,3370 <__alt_mem_Flash_flash_data+0xf4003370>
    3b88:	e000021e 	bne	fp,zero,3b94 <___vfprintf_internal_r+0xd14>
    3b8c:	00800244 	movi	r2,9
    3b90:	14c0202e 	bgeu	r2,r19,3c14 <___vfprintf_internal_r+0xd94>
    3b94:	dc002b15 	stw	r16,172(sp)
    3b98:	dc402c15 	stw	r17,176(sp)
    3b9c:	9821883a 	mov	r16,r19
    3ba0:	e023883a 	mov	r17,fp
    3ba4:	dc801e04 	addi	r18,sp,120
    3ba8:	4827883a 	mov	r19,r9
    3bac:	4039883a 	mov	fp,r8
    3bb0:	8009883a 	mov	r4,r16
    3bb4:	880b883a 	mov	r5,r17
    3bb8:	01800284 	movi	r6,10
    3bbc:	000f883a 	mov	r7,zero
    3bc0:	000d6140 	call	d614 <__umoddi3>
    3bc4:	10800c04 	addi	r2,r2,48
    3bc8:	94bfffc4 	addi	r18,r18,-1
    3bcc:	8009883a 	mov	r4,r16
    3bd0:	880b883a 	mov	r5,r17
    3bd4:	01800284 	movi	r6,10
    3bd8:	000f883a 	mov	r7,zero
    3bdc:	90800005 	stb	r2,0(r18)
    3be0:	000d0540 	call	d054 <__udivdi3>
    3be4:	1021883a 	mov	r16,r2
    3be8:	10c4b03a 	or	r2,r2,r3
    3bec:	1823883a 	mov	r17,r3
    3bf0:	103fef1e 	bne	r2,zero,3bb0 <__alt_mem_Flash_flash_data+0xf4003bb0>
    3bf4:	dac02817 	ldw	r11,160(sp)
    3bf8:	dc803115 	stw	r18,196(sp)
    3bfc:	dc002b17 	ldw	r16,172(sp)
    3c00:	dc402c17 	ldw	r17,176(sp)
    3c04:	9813883a 	mov	r9,r19
    3c08:	e011883a 	mov	r8,fp
    3c0c:	5ca5c83a 	sub	r18,r11,r18
    3c10:	003de906 	br	33b8 <__alt_mem_Flash_flash_data+0xf40033b8>
    3c14:	9cc00c04 	addi	r19,r19,48
    3c18:	d8c01dc4 	addi	r3,sp,119
    3c1c:	dcc01dc5 	stb	r19,119(sp)
    3c20:	dc803c17 	ldw	r18,240(sp)
    3c24:	d8c03115 	stw	r3,196(sp)
    3c28:	003de306 	br	33b8 <__alt_mem_Flash_flash_data+0xf40033b8>
    3c2c:	00801944 	movi	r2,101
    3c30:	1400710e 	bge	r2,r16,3df8 <___vfprintf_internal_r+0xf78>
    3c34:	d9003717 	ldw	r4,220(sp)
    3c38:	d9403917 	ldw	r5,228(sp)
    3c3c:	000d883a 	mov	r6,zero
    3c40:	000f883a 	mov	r7,zero
    3c44:	d8c03d15 	stw	r3,244(sp)
    3c48:	da003f15 	stw	r8,252(sp)
    3c4c:	000ee380 	call	ee38 <__eqdf2>
    3c50:	d8c03d17 	ldw	r3,244(sp)
    3c54:	da003f17 	ldw	r8,252(sp)
    3c58:	1000ef1e 	bne	r2,zero,4018 <___vfprintf_internal_r+0x1198>
    3c5c:	d8801f17 	ldw	r2,124(sp)
    3c60:	010000b4 	movhi	r4,2
    3c64:	21038904 	addi	r4,r4,3620
    3c68:	18c00044 	addi	r3,r3,1
    3c6c:	10800044 	addi	r2,r2,1
    3c70:	41000015 	stw	r4,0(r8)
    3c74:	01000044 	movi	r4,1
    3c78:	41000115 	stw	r4,4(r8)
    3c7c:	d8c02015 	stw	r3,128(sp)
    3c80:	d8801f15 	stw	r2,124(sp)
    3c84:	010001c4 	movi	r4,7
    3c88:	20828e16 	blt	r4,r2,46c4 <___vfprintf_internal_r+0x1844>
    3c8c:	42000204 	addi	r8,r8,8
    3c90:	d8802617 	ldw	r2,152(sp)
    3c94:	dac03317 	ldw	r11,204(sp)
    3c98:	12c00216 	blt	r2,r11,3ca4 <___vfprintf_internal_r+0xe24>
    3c9c:	8880004c 	andi	r2,r17,1
    3ca0:	103e5d26 	beq	r2,zero,3618 <__alt_mem_Flash_flash_data+0xf4003618>
    3ca4:	db003817 	ldw	r12,224(sp)
    3ca8:	d8801f17 	ldw	r2,124(sp)
    3cac:	dac03517 	ldw	r11,212(sp)
    3cb0:	1b07883a 	add	r3,r3,r12
    3cb4:	10800044 	addi	r2,r2,1
    3cb8:	42c00015 	stw	r11,0(r8)
    3cbc:	43000115 	stw	r12,4(r8)
    3cc0:	d8c02015 	stw	r3,128(sp)
    3cc4:	d8801f15 	stw	r2,124(sp)
    3cc8:	010001c4 	movi	r4,7
    3ccc:	2082ed16 	blt	r4,r2,4884 <___vfprintf_internal_r+0x1a04>
    3cd0:	42000204 	addi	r8,r8,8
    3cd4:	db003317 	ldw	r12,204(sp)
    3cd8:	643fffc4 	addi	r16,r12,-1
    3cdc:	043e4e0e 	bge	zero,r16,3618 <__alt_mem_Flash_flash_data+0xf4003618>
    3ce0:	04800404 	movi	r18,16
    3ce4:	d8801f17 	ldw	r2,124(sp)
    3ce8:	94007e0e 	bge	r18,r16,3ee4 <___vfprintf_internal_r+0x1064>
    3cec:	014000b4 	movhi	r5,2
    3cf0:	29439184 	addi	r5,r5,3654
    3cf4:	d9402c15 	stw	r5,176(sp)
    3cf8:	054001c4 	movi	r21,7
    3cfc:	00000306 	br	3d0c <___vfprintf_internal_r+0xe8c>
    3d00:	42000204 	addi	r8,r8,8
    3d04:	843ffc04 	addi	r16,r16,-16
    3d08:	9400790e 	bge	r18,r16,3ef0 <___vfprintf_internal_r+0x1070>
    3d0c:	18c00404 	addi	r3,r3,16
    3d10:	10800044 	addi	r2,r2,1
    3d14:	45000015 	stw	r20,0(r8)
    3d18:	44800115 	stw	r18,4(r8)
    3d1c:	d8c02015 	stw	r3,128(sp)
    3d20:	d8801f15 	stw	r2,124(sp)
    3d24:	a8bff60e 	bge	r21,r2,3d00 <__alt_mem_Flash_flash_data+0xf4003d00>
    3d28:	b009883a 	mov	r4,r22
    3d2c:	b80b883a 	mov	r5,r23
    3d30:	d9801e04 	addi	r6,sp,120
    3d34:	000b3940 	call	b394 <__sprint_r>
    3d38:	103d451e 	bne	r2,zero,3250 <__alt_mem_Flash_flash_data+0xf4003250>
    3d3c:	d8c02017 	ldw	r3,128(sp)
    3d40:	d8801f17 	ldw	r2,124(sp)
    3d44:	da000404 	addi	r8,sp,16
    3d48:	003fee06 	br	3d04 <__alt_mem_Flash_flash_data+0xf4003d04>
    3d4c:	dac02e17 	ldw	r11,184(sp)
    3d50:	db002b17 	ldw	r12,172(sp)
    3d54:	5b2bc83a 	sub	r21,r11,r12
    3d58:	057df90e 	bge	zero,r21,3540 <__alt_mem_Flash_flash_data+0xf4003540>
    3d5c:	07000404 	movi	fp,16
    3d60:	d8801f17 	ldw	r2,124(sp)
    3d64:	e543640e 	bge	fp,r21,4af8 <___vfprintf_internal_r+0x1c78>
    3d68:	014000b4 	movhi	r5,2
    3d6c:	29439184 	addi	r5,r5,3654
    3d70:	d9402c15 	stw	r5,176(sp)
    3d74:	04c001c4 	movi	r19,7
    3d78:	00000306 	br	3d88 <___vfprintf_internal_r+0xf08>
    3d7c:	ad7ffc04 	addi	r21,r21,-16
    3d80:	42000204 	addi	r8,r8,8
    3d84:	e540110e 	bge	fp,r21,3dcc <___vfprintf_internal_r+0xf4c>
    3d88:	18c00404 	addi	r3,r3,16
    3d8c:	10800044 	addi	r2,r2,1
    3d90:	45000015 	stw	r20,0(r8)
    3d94:	47000115 	stw	fp,4(r8)
    3d98:	d8c02015 	stw	r3,128(sp)
    3d9c:	d8801f15 	stw	r2,124(sp)
    3da0:	98bff60e 	bge	r19,r2,3d7c <__alt_mem_Flash_flash_data+0xf4003d7c>
    3da4:	b009883a 	mov	r4,r22
    3da8:	b80b883a 	mov	r5,r23
    3dac:	d9801e04 	addi	r6,sp,120
    3db0:	000b3940 	call	b394 <__sprint_r>
    3db4:	103d261e 	bne	r2,zero,3250 <__alt_mem_Flash_flash_data+0xf4003250>
    3db8:	ad7ffc04 	addi	r21,r21,-16
    3dbc:	d8c02017 	ldw	r3,128(sp)
    3dc0:	d8801f17 	ldw	r2,124(sp)
    3dc4:	da000404 	addi	r8,sp,16
    3dc8:	e57fef16 	blt	fp,r21,3d88 <__alt_mem_Flash_flash_data+0xf4003d88>
    3dcc:	dac02c17 	ldw	r11,176(sp)
    3dd0:	1d47883a 	add	r3,r3,r21
    3dd4:	10800044 	addi	r2,r2,1
    3dd8:	42c00015 	stw	r11,0(r8)
    3ddc:	45400115 	stw	r21,4(r8)
    3de0:	d8c02015 	stw	r3,128(sp)
    3de4:	d8801f15 	stw	r2,124(sp)
    3de8:	010001c4 	movi	r4,7
    3dec:	20819116 	blt	r4,r2,4434 <___vfprintf_internal_r+0x15b4>
    3df0:	42000204 	addi	r8,r8,8
    3df4:	003dd206 	br	3540 <__alt_mem_Flash_flash_data+0xf4003540>
    3df8:	db003317 	ldw	r12,204(sp)
    3dfc:	00800044 	movi	r2,1
    3e00:	18c00044 	addi	r3,r3,1
    3e04:	1301530e 	bge	r2,r12,4354 <___vfprintf_internal_r+0x14d4>
    3e08:	dc001f17 	ldw	r16,124(sp)
    3e0c:	dac03117 	ldw	r11,196(sp)
    3e10:	00800044 	movi	r2,1
    3e14:	84000044 	addi	r16,r16,1
    3e18:	40800115 	stw	r2,4(r8)
    3e1c:	42c00015 	stw	r11,0(r8)
    3e20:	d8c02015 	stw	r3,128(sp)
    3e24:	dc001f15 	stw	r16,124(sp)
    3e28:	008001c4 	movi	r2,7
    3e2c:	14016b16 	blt	r2,r16,43dc <___vfprintf_internal_r+0x155c>
    3e30:	42000204 	addi	r8,r8,8
    3e34:	db003817 	ldw	r12,224(sp)
    3e38:	dac03517 	ldw	r11,212(sp)
    3e3c:	84000044 	addi	r16,r16,1
    3e40:	1b07883a 	add	r3,r3,r12
    3e44:	42c00015 	stw	r11,0(r8)
    3e48:	43000115 	stw	r12,4(r8)
    3e4c:	d8c02015 	stw	r3,128(sp)
    3e50:	dc001f15 	stw	r16,124(sp)
    3e54:	008001c4 	movi	r2,7
    3e58:	14016916 	blt	r2,r16,4400 <___vfprintf_internal_r+0x1580>
    3e5c:	44800204 	addi	r18,r8,8
    3e60:	d9003717 	ldw	r4,220(sp)
    3e64:	d9403917 	ldw	r5,228(sp)
    3e68:	000d883a 	mov	r6,zero
    3e6c:	000f883a 	mov	r7,zero
    3e70:	d8c03d15 	stw	r3,244(sp)
    3e74:	000ee380 	call	ee38 <__eqdf2>
    3e78:	d8c03d17 	ldw	r3,244(sp)
    3e7c:	db003317 	ldw	r12,204(sp)
    3e80:	1000ad26 	beq	r2,zero,4138 <___vfprintf_internal_r+0x12b8>
    3e84:	dac03117 	ldw	r11,196(sp)
    3e88:	60bfffc4 	addi	r2,r12,-1
    3e8c:	1887883a 	add	r3,r3,r2
    3e90:	59000044 	addi	r4,r11,1
    3e94:	84000044 	addi	r16,r16,1
    3e98:	90800115 	stw	r2,4(r18)
    3e9c:	91000015 	stw	r4,0(r18)
    3ea0:	d8c02015 	stw	r3,128(sp)
    3ea4:	dc001f15 	stw	r16,124(sp)
    3ea8:	008001c4 	movi	r2,7
    3eac:	14014216 	blt	r2,r16,43b8 <___vfprintf_internal_r+0x1538>
    3eb0:	94800204 	addi	r18,r18,8
    3eb4:	dac03a17 	ldw	r11,232(sp)
    3eb8:	dd4022c4 	addi	r21,sp,139
    3ebc:	84000044 	addi	r16,r16,1
    3ec0:	1ac7883a 	add	r3,r3,r11
    3ec4:	95400015 	stw	r21,0(r18)
    3ec8:	92c00115 	stw	r11,4(r18)
    3ecc:	d8c02015 	stw	r3,128(sp)
    3ed0:	dc001f15 	stw	r16,124(sp)
    3ed4:	008001c4 	movi	r2,7
    3ed8:	14000e16 	blt	r2,r16,3f14 <___vfprintf_internal_r+0x1094>
    3edc:	92000204 	addi	r8,r18,8
    3ee0:	003dcd06 	br	3618 <__alt_mem_Flash_flash_data+0xf4003618>
    3ee4:	010000b4 	movhi	r4,2
    3ee8:	21039184 	addi	r4,r4,3654
    3eec:	d9002c15 	stw	r4,176(sp)
    3ef0:	dac02c17 	ldw	r11,176(sp)
    3ef4:	1c07883a 	add	r3,r3,r16
    3ef8:	44000115 	stw	r16,4(r8)
    3efc:	42c00015 	stw	r11,0(r8)
    3f00:	10800044 	addi	r2,r2,1
    3f04:	d8c02015 	stw	r3,128(sp)
    3f08:	d8801f15 	stw	r2,124(sp)
    3f0c:	010001c4 	movi	r4,7
    3f10:	20bdc00e 	bge	r4,r2,3614 <__alt_mem_Flash_flash_data+0xf4003614>
    3f14:	b009883a 	mov	r4,r22
    3f18:	b80b883a 	mov	r5,r23
    3f1c:	d9801e04 	addi	r6,sp,120
    3f20:	000b3940 	call	b394 <__sprint_r>
    3f24:	103cca1e 	bne	r2,zero,3250 <__alt_mem_Flash_flash_data+0xf4003250>
    3f28:	d8c02017 	ldw	r3,128(sp)
    3f2c:	da000404 	addi	r8,sp,16
    3f30:	003db906 	br	3618 <__alt_mem_Flash_flash_data+0xf4003618>
    3f34:	b009883a 	mov	r4,r22
    3f38:	b80b883a 	mov	r5,r23
    3f3c:	d9801e04 	addi	r6,sp,120
    3f40:	000b3940 	call	b394 <__sprint_r>
    3f44:	103def26 	beq	r2,zero,3704 <__alt_mem_Flash_flash_data+0xf4003704>
    3f48:	003cc106 	br	3250 <__alt_mem_Flash_flash_data+0xf4003250>
    3f4c:	10803fcc 	andi	r2,r2,255
    3f50:	1000651e 	bne	r2,zero,40e8 <___vfprintf_internal_r+0x1268>
    3f54:	8880004c 	andi	r2,r17,1
    3f58:	10013226 	beq	r2,zero,4424 <___vfprintf_internal_r+0x15a4>
    3f5c:	00800c04 	movi	r2,48
    3f60:	d8c01dc4 	addi	r3,sp,119
    3f64:	d8801dc5 	stb	r2,119(sp)
    3f68:	dc803c17 	ldw	r18,240(sp)
    3f6c:	d8c03115 	stw	r3,196(sp)
    3f70:	003d1106 	br	33b8 <__alt_mem_Flash_flash_data+0xf40033b8>
    3f74:	b009883a 	mov	r4,r22
    3f78:	b80b883a 	mov	r5,r23
    3f7c:	d9801e04 	addi	r6,sp,120
    3f80:	000b3940 	call	b394 <__sprint_r>
    3f84:	103cb21e 	bne	r2,zero,3250 <__alt_mem_Flash_flash_data+0xf4003250>
    3f88:	d8c02017 	ldw	r3,128(sp)
    3f8c:	da000404 	addi	r8,sp,16
    3f90:	003d9406 	br	35e4 <__alt_mem_Flash_flash_data+0xf40035e4>
    3f94:	b009883a 	mov	r4,r22
    3f98:	b80b883a 	mov	r5,r23
    3f9c:	d9801e04 	addi	r6,sp,120
    3fa0:	000b3940 	call	b394 <__sprint_r>
    3fa4:	103caa1e 	bne	r2,zero,3250 <__alt_mem_Flash_flash_data+0xf4003250>
    3fa8:	d8c02017 	ldw	r3,128(sp)
    3fac:	da000404 	addi	r8,sp,16
    3fb0:	003d5206 	br	34fc <__alt_mem_Flash_flash_data+0xf40034fc>
    3fb4:	b009883a 	mov	r4,r22
    3fb8:	b80b883a 	mov	r5,r23
    3fbc:	d9801e04 	addi	r6,sp,120
    3fc0:	000b3940 	call	b394 <__sprint_r>
    3fc4:	103ca21e 	bne	r2,zero,3250 <__alt_mem_Flash_flash_data+0xf4003250>
    3fc8:	d8c02017 	ldw	r3,128(sp)
    3fcc:	da000404 	addi	r8,sp,16
    3fd0:	003d5806 	br	3534 <__alt_mem_Flash_flash_data+0xf4003534>
    3fd4:	d9403b17 	ldw	r5,236(sp)
    3fd8:	d8c01e04 	addi	r3,sp,120
    3fdc:	988003cc 	andi	r2,r19,15
    3fe0:	e008973a 	slli	r4,fp,28
    3fe4:	2885883a 	add	r2,r5,r2
    3fe8:	9826d13a 	srli	r19,r19,4
    3fec:	10800003 	ldbu	r2,0(r2)
    3ff0:	e038d13a 	srli	fp,fp,4
    3ff4:	18ffffc4 	addi	r3,r3,-1
    3ff8:	24e6b03a 	or	r19,r4,r19
    3ffc:	18800005 	stb	r2,0(r3)
    4000:	9f04b03a 	or	r2,r19,fp
    4004:	103ff51e 	bne	r2,zero,3fdc <__alt_mem_Flash_flash_data+0xf4003fdc>
    4008:	db002817 	ldw	r12,160(sp)
    400c:	d8c03115 	stw	r3,196(sp)
    4010:	60e5c83a 	sub	r18,r12,r3
    4014:	003ce806 	br	33b8 <__alt_mem_Flash_flash_data+0xf40033b8>
    4018:	dc002617 	ldw	r16,152(sp)
    401c:	0401b10e 	bge	zero,r16,46e4 <___vfprintf_internal_r+0x1864>
    4020:	db003117 	ldw	r12,196(sp)
    4024:	dac03317 	ldw	r11,204(sp)
    4028:	62e1883a 	add	r16,r12,r11
    402c:	db003417 	ldw	r12,208(sp)
    4030:	5825883a 	mov	r18,r11
    4034:	62c0010e 	bge	r12,r11,403c <___vfprintf_internal_r+0x11bc>
    4038:	6025883a 	mov	r18,r12
    403c:	04800b0e 	bge	zero,r18,406c <___vfprintf_internal_r+0x11ec>
    4040:	d8801f17 	ldw	r2,124(sp)
    4044:	dac03117 	ldw	r11,196(sp)
    4048:	1c87883a 	add	r3,r3,r18
    404c:	10800044 	addi	r2,r2,1
    4050:	42c00015 	stw	r11,0(r8)
    4054:	44800115 	stw	r18,4(r8)
    4058:	d8c02015 	stw	r3,128(sp)
    405c:	d8801f15 	stw	r2,124(sp)
    4060:	010001c4 	movi	r4,7
    4064:	20824f16 	blt	r4,r2,49a4 <___vfprintf_internal_r+0x1b24>
    4068:	42000204 	addi	r8,r8,8
    406c:	90024b16 	blt	r18,zero,499c <___vfprintf_internal_r+0x1b1c>
    4070:	db003417 	ldw	r12,208(sp)
    4074:	64a5c83a 	sub	r18,r12,r18
    4078:	0480730e 	bge	zero,r18,4248 <___vfprintf_internal_r+0x13c8>
    407c:	05400404 	movi	r21,16
    4080:	d8801f17 	ldw	r2,124(sp)
    4084:	ac817d0e 	bge	r21,r18,467c <___vfprintf_internal_r+0x17fc>
    4088:	014000b4 	movhi	r5,2
    408c:	29439184 	addi	r5,r5,3654
    4090:	d9402c15 	stw	r5,176(sp)
    4094:	070001c4 	movi	fp,7
    4098:	00000306 	br	40a8 <___vfprintf_internal_r+0x1228>
    409c:	42000204 	addi	r8,r8,8
    40a0:	94bffc04 	addi	r18,r18,-16
    40a4:	ac81780e 	bge	r21,r18,4688 <___vfprintf_internal_r+0x1808>
    40a8:	18c00404 	addi	r3,r3,16
    40ac:	10800044 	addi	r2,r2,1
    40b0:	45000015 	stw	r20,0(r8)
    40b4:	45400115 	stw	r21,4(r8)
    40b8:	d8c02015 	stw	r3,128(sp)
    40bc:	d8801f15 	stw	r2,124(sp)
    40c0:	e0bff60e 	bge	fp,r2,409c <__alt_mem_Flash_flash_data+0xf400409c>
    40c4:	b009883a 	mov	r4,r22
    40c8:	b80b883a 	mov	r5,r23
    40cc:	d9801e04 	addi	r6,sp,120
    40d0:	000b3940 	call	b394 <__sprint_r>
    40d4:	103c5e1e 	bne	r2,zero,3250 <__alt_mem_Flash_flash_data+0xf4003250>
    40d8:	d8c02017 	ldw	r3,128(sp)
    40dc:	d8801f17 	ldw	r2,124(sp)
    40e0:	da000404 	addi	r8,sp,16
    40e4:	003fee06 	br	40a0 <__alt_mem_Flash_flash_data+0xf40040a0>
    40e8:	dac01e04 	addi	r11,sp,120
    40ec:	0025883a 	mov	r18,zero
    40f0:	dac03115 	stw	r11,196(sp)
    40f4:	003cb006 	br	33b8 <__alt_mem_Flash_flash_data+0xf40033b8>
    40f8:	b009883a 	mov	r4,r22
    40fc:	b80b883a 	mov	r5,r23
    4100:	d9801e04 	addi	r6,sp,120
    4104:	000b3940 	call	b394 <__sprint_r>
    4108:	103c511e 	bne	r2,zero,3250 <__alt_mem_Flash_flash_data+0xf4003250>
    410c:	d8c02017 	ldw	r3,128(sp)
    4110:	d8802787 	ldb	r2,158(sp)
    4114:	da000404 	addi	r8,sp,16
    4118:	003ceb06 	br	34c8 <__alt_mem_Flash_flash_data+0xf40034c8>
    411c:	1cc00017 	ldw	r19,0(r3)
    4120:	dac02d17 	ldw	r11,180(sp)
    4124:	9839d7fa 	srai	fp,r19,31
    4128:	5ac00104 	addi	r11,r11,4
    412c:	dac02d15 	stw	r11,180(sp)
    4130:	e005883a 	mov	r2,fp
    4134:	003c8106 	br	333c <__alt_mem_Flash_flash_data+0xf400333c>
    4138:	657fffc4 	addi	r21,r12,-1
    413c:	057f5d0e 	bge	zero,r21,3eb4 <__alt_mem_Flash_flash_data+0xf4003eb4>
    4140:	07000404 	movi	fp,16
    4144:	e540900e 	bge	fp,r21,4388 <___vfprintf_internal_r+0x1508>
    4148:	010000b4 	movhi	r4,2
    414c:	21039184 	addi	r4,r4,3654
    4150:	d9002c15 	stw	r4,176(sp)
    4154:	01c001c4 	movi	r7,7
    4158:	00000306 	br	4168 <___vfprintf_internal_r+0x12e8>
    415c:	94800204 	addi	r18,r18,8
    4160:	ad7ffc04 	addi	r21,r21,-16
    4164:	e5408b0e 	bge	fp,r21,4394 <___vfprintf_internal_r+0x1514>
    4168:	18c00404 	addi	r3,r3,16
    416c:	84000044 	addi	r16,r16,1
    4170:	95000015 	stw	r20,0(r18)
    4174:	97000115 	stw	fp,4(r18)
    4178:	d8c02015 	stw	r3,128(sp)
    417c:	dc001f15 	stw	r16,124(sp)
    4180:	3c3ff60e 	bge	r7,r16,415c <__alt_mem_Flash_flash_data+0xf400415c>
    4184:	b009883a 	mov	r4,r22
    4188:	b80b883a 	mov	r5,r23
    418c:	d9801e04 	addi	r6,sp,120
    4190:	d9c03d15 	stw	r7,244(sp)
    4194:	000b3940 	call	b394 <__sprint_r>
    4198:	d9c03d17 	ldw	r7,244(sp)
    419c:	103c2c1e 	bne	r2,zero,3250 <__alt_mem_Flash_flash_data+0xf4003250>
    41a0:	d8c02017 	ldw	r3,128(sp)
    41a4:	dc001f17 	ldw	r16,124(sp)
    41a8:	dc800404 	addi	r18,sp,16
    41ac:	003fec06 	br	4160 <__alt_mem_Flash_flash_data+0xf4004160>
    41b0:	dac02d17 	ldw	r11,180(sp)
    41b4:	0039883a 	mov	fp,zero
    41b8:	0005883a 	mov	r2,zero
    41bc:	5cc00017 	ldw	r19,0(r11)
    41c0:	5ac00104 	addi	r11,r11,4
    41c4:	dac02d15 	stw	r11,180(sp)
    41c8:	9807883a 	mov	r3,r19
    41cc:	003d5b06 	br	373c <__alt_mem_Flash_flash_data+0xf400373c>
    41d0:	db002d17 	ldw	r12,180(sp)
    41d4:	0039883a 	mov	fp,zero
    41d8:	00800044 	movi	r2,1
    41dc:	64c00017 	ldw	r19,0(r12)
    41e0:	63000104 	addi	r12,r12,4
    41e4:	db002d15 	stw	r12,180(sp)
    41e8:	9807883a 	mov	r3,r19
    41ec:	003d5306 	br	373c <__alt_mem_Flash_flash_data+0xf400373c>
    41f0:	00800084 	movi	r2,2
    41f4:	9f06b03a 	or	r3,r19,fp
    41f8:	003d5006 	br	373c <__alt_mem_Flash_flash_data+0xf400373c>
    41fc:	10803fcc 	andi	r2,r2,255
    4200:	1080201c 	xori	r2,r2,128
    4204:	10bfe004 	addi	r2,r2,-128
    4208:	01000c04 	movi	r4,48
    420c:	1101a526 	beq	r2,r4,48a4 <___vfprintf_internal_r+0x1a24>
    4210:	dac03117 	ldw	r11,196(sp)
    4214:	db002817 	ldw	r12,160(sp)
    4218:	193fffc5 	stb	r4,-1(r3)
    421c:	5affffc4 	addi	r11,r11,-1
    4220:	dac03115 	stw	r11,196(sp)
    4224:	62e5c83a 	sub	r18,r12,r11
    4228:	003c6306 	br	33b8 <__alt_mem_Flash_flash_data+0xf40033b8>
    422c:	b009883a 	mov	r4,r22
    4230:	b80b883a 	mov	r5,r23
    4234:	d9801e04 	addi	r6,sp,120
    4238:	000b3940 	call	b394 <__sprint_r>
    423c:	103c041e 	bne	r2,zero,3250 <__alt_mem_Flash_flash_data+0xf4003250>
    4240:	d8c02017 	ldw	r3,128(sp)
    4244:	da000404 	addi	r8,sp,16
    4248:	db003117 	ldw	r12,196(sp)
    424c:	dac03417 	ldw	r11,208(sp)
    4250:	d8802617 	ldw	r2,152(sp)
    4254:	62e5883a 	add	r18,r12,r11
    4258:	db003317 	ldw	r12,204(sp)
    425c:	13000216 	blt	r2,r12,4268 <___vfprintf_internal_r+0x13e8>
    4260:	8900004c 	andi	r4,r17,1
    4264:	20000c26 	beq	r4,zero,4298 <___vfprintf_internal_r+0x1418>
    4268:	dac03817 	ldw	r11,224(sp)
    426c:	d9001f17 	ldw	r4,124(sp)
    4270:	db003517 	ldw	r12,212(sp)
    4274:	1ac7883a 	add	r3,r3,r11
    4278:	21000044 	addi	r4,r4,1
    427c:	43000015 	stw	r12,0(r8)
    4280:	42c00115 	stw	r11,4(r8)
    4284:	d8c02015 	stw	r3,128(sp)
    4288:	d9001f15 	stw	r4,124(sp)
    428c:	014001c4 	movi	r5,7
    4290:	2901cc16 	blt	r5,r4,49c4 <___vfprintf_internal_r+0x1b44>
    4294:	42000204 	addi	r8,r8,8
    4298:	dac03317 	ldw	r11,204(sp)
    429c:	8489c83a 	sub	r4,r16,r18
    42a0:	5885c83a 	sub	r2,r11,r2
    42a4:	1021883a 	mov	r16,r2
    42a8:	2080010e 	bge	r4,r2,42b0 <___vfprintf_internal_r+0x1430>
    42ac:	2021883a 	mov	r16,r4
    42b0:	04000a0e 	bge	zero,r16,42dc <___vfprintf_internal_r+0x145c>
    42b4:	d9001f17 	ldw	r4,124(sp)
    42b8:	1c07883a 	add	r3,r3,r16
    42bc:	44800015 	stw	r18,0(r8)
    42c0:	21000044 	addi	r4,r4,1
    42c4:	44000115 	stw	r16,4(r8)
    42c8:	d8c02015 	stw	r3,128(sp)
    42cc:	d9001f15 	stw	r4,124(sp)
    42d0:	014001c4 	movi	r5,7
    42d4:	2901e316 	blt	r5,r4,4a64 <___vfprintf_internal_r+0x1be4>
    42d8:	42000204 	addi	r8,r8,8
    42dc:	8001df16 	blt	r16,zero,4a5c <___vfprintf_internal_r+0x1bdc>
    42e0:	1421c83a 	sub	r16,r2,r16
    42e4:	043ccc0e 	bge	zero,r16,3618 <__alt_mem_Flash_flash_data+0xf4003618>
    42e8:	04800404 	movi	r18,16
    42ec:	d8801f17 	ldw	r2,124(sp)
    42f0:	943efc0e 	bge	r18,r16,3ee4 <__alt_mem_Flash_flash_data+0xf4003ee4>
    42f4:	014000b4 	movhi	r5,2
    42f8:	29439184 	addi	r5,r5,3654
    42fc:	d9402c15 	stw	r5,176(sp)
    4300:	054001c4 	movi	r21,7
    4304:	00000306 	br	4314 <___vfprintf_internal_r+0x1494>
    4308:	42000204 	addi	r8,r8,8
    430c:	843ffc04 	addi	r16,r16,-16
    4310:	943ef70e 	bge	r18,r16,3ef0 <__alt_mem_Flash_flash_data+0xf4003ef0>
    4314:	18c00404 	addi	r3,r3,16
    4318:	10800044 	addi	r2,r2,1
    431c:	45000015 	stw	r20,0(r8)
    4320:	44800115 	stw	r18,4(r8)
    4324:	d8c02015 	stw	r3,128(sp)
    4328:	d8801f15 	stw	r2,124(sp)
    432c:	a8bff60e 	bge	r21,r2,4308 <__alt_mem_Flash_flash_data+0xf4004308>
    4330:	b009883a 	mov	r4,r22
    4334:	b80b883a 	mov	r5,r23
    4338:	d9801e04 	addi	r6,sp,120
    433c:	000b3940 	call	b394 <__sprint_r>
    4340:	103bc31e 	bne	r2,zero,3250 <__alt_mem_Flash_flash_data+0xf4003250>
    4344:	d8c02017 	ldw	r3,128(sp)
    4348:	d8801f17 	ldw	r2,124(sp)
    434c:	da000404 	addi	r8,sp,16
    4350:	003fee06 	br	430c <__alt_mem_Flash_flash_data+0xf400430c>
    4354:	8888703a 	and	r4,r17,r2
    4358:	203eab1e 	bne	r4,zero,3e08 <__alt_mem_Flash_flash_data+0xf4003e08>
    435c:	dc001f17 	ldw	r16,124(sp)
    4360:	db003117 	ldw	r12,196(sp)
    4364:	40800115 	stw	r2,4(r8)
    4368:	84000044 	addi	r16,r16,1
    436c:	43000015 	stw	r12,0(r8)
    4370:	d8c02015 	stw	r3,128(sp)
    4374:	dc001f15 	stw	r16,124(sp)
    4378:	008001c4 	movi	r2,7
    437c:	14000e16 	blt	r2,r16,43b8 <___vfprintf_internal_r+0x1538>
    4380:	44800204 	addi	r18,r8,8
    4384:	003ecb06 	br	3eb4 <__alt_mem_Flash_flash_data+0xf4003eb4>
    4388:	008000b4 	movhi	r2,2
    438c:	10839184 	addi	r2,r2,3654
    4390:	d8802c15 	stw	r2,176(sp)
    4394:	dac02c17 	ldw	r11,176(sp)
    4398:	1d47883a 	add	r3,r3,r21
    439c:	84000044 	addi	r16,r16,1
    43a0:	92c00015 	stw	r11,0(r18)
    43a4:	95400115 	stw	r21,4(r18)
    43a8:	d8c02015 	stw	r3,128(sp)
    43ac:	dc001f15 	stw	r16,124(sp)
    43b0:	008001c4 	movi	r2,7
    43b4:	143ebe0e 	bge	r2,r16,3eb0 <__alt_mem_Flash_flash_data+0xf4003eb0>
    43b8:	b009883a 	mov	r4,r22
    43bc:	b80b883a 	mov	r5,r23
    43c0:	d9801e04 	addi	r6,sp,120
    43c4:	000b3940 	call	b394 <__sprint_r>
    43c8:	103ba11e 	bne	r2,zero,3250 <__alt_mem_Flash_flash_data+0xf4003250>
    43cc:	d8c02017 	ldw	r3,128(sp)
    43d0:	dc001f17 	ldw	r16,124(sp)
    43d4:	dc800404 	addi	r18,sp,16
    43d8:	003eb606 	br	3eb4 <__alt_mem_Flash_flash_data+0xf4003eb4>
    43dc:	b009883a 	mov	r4,r22
    43e0:	b80b883a 	mov	r5,r23
    43e4:	d9801e04 	addi	r6,sp,120
    43e8:	000b3940 	call	b394 <__sprint_r>
    43ec:	103b981e 	bne	r2,zero,3250 <__alt_mem_Flash_flash_data+0xf4003250>
    43f0:	d8c02017 	ldw	r3,128(sp)
    43f4:	dc001f17 	ldw	r16,124(sp)
    43f8:	da000404 	addi	r8,sp,16
    43fc:	003e8d06 	br	3e34 <__alt_mem_Flash_flash_data+0xf4003e34>
    4400:	b009883a 	mov	r4,r22
    4404:	b80b883a 	mov	r5,r23
    4408:	d9801e04 	addi	r6,sp,120
    440c:	000b3940 	call	b394 <__sprint_r>
    4410:	103b8f1e 	bne	r2,zero,3250 <__alt_mem_Flash_flash_data+0xf4003250>
    4414:	d8c02017 	ldw	r3,128(sp)
    4418:	dc001f17 	ldw	r16,124(sp)
    441c:	dc800404 	addi	r18,sp,16
    4420:	003e8f06 	br	3e60 <__alt_mem_Flash_flash_data+0xf4003e60>
    4424:	db001e04 	addi	r12,sp,120
    4428:	0025883a 	mov	r18,zero
    442c:	db003115 	stw	r12,196(sp)
    4430:	003be106 	br	33b8 <__alt_mem_Flash_flash_data+0xf40033b8>
    4434:	b009883a 	mov	r4,r22
    4438:	b80b883a 	mov	r5,r23
    443c:	d9801e04 	addi	r6,sp,120
    4440:	000b3940 	call	b394 <__sprint_r>
    4444:	103b821e 	bne	r2,zero,3250 <__alt_mem_Flash_flash_data+0xf4003250>
    4448:	d8c02017 	ldw	r3,128(sp)
    444c:	da000404 	addi	r8,sp,16
    4450:	003c3b06 	br	3540 <__alt_mem_Flash_flash_data+0xf4003540>
    4454:	04e7c83a 	sub	r19,zero,r19
    4458:	9804c03a 	cmpne	r2,r19,zero
    445c:	0739c83a 	sub	fp,zero,fp
    4460:	e0b9c83a 	sub	fp,fp,r2
    4464:	05400b44 	movi	r21,45
    4468:	dd402785 	stb	r21,158(sp)
    446c:	da403215 	stw	r9,200(sp)
    4470:	00800044 	movi	r2,1
    4474:	9f06b03a 	or	r3,r19,fp
    4478:	003bb506 	br	3350 <__alt_mem_Flash_flash_data+0xf4003350>
    447c:	da003f15 	stw	r8,252(sp)
    4480:	da403e15 	stw	r9,248(sp)
    4484:	0009dec0 	call	9dec <__fpclassifyd>
    4488:	da003f17 	ldw	r8,252(sp)
    448c:	da403e17 	ldw	r9,248(sp)
    4490:	1000ce26 	beq	r2,zero,47cc <___vfprintf_internal_r+0x194c>
    4494:	057ff7c4 	movi	r21,-33
    4498:	00bfffc4 	movi	r2,-1
    449c:	856a703a 	and	r21,r16,r21
    44a0:	4881e826 	beq	r9,r2,4c44 <___vfprintf_internal_r+0x1dc4>
    44a4:	008011c4 	movi	r2,71
    44a8:	a881e326 	beq	r21,r2,4c38 <___vfprintf_internal_r+0x1db8>
    44ac:	db003917 	ldw	r12,228(sp)
    44b0:	8ac04014 	ori	r11,r17,256
    44b4:	dac02d15 	stw	r11,180(sp)
    44b8:	6001ed16 	blt	r12,zero,4c70 <___vfprintf_internal_r+0x1df0>
    44bc:	dc803917 	ldw	r18,228(sp)
    44c0:	d8002b05 	stb	zero,172(sp)
    44c4:	00801984 	movi	r2,102
    44c8:	80811826 	beq	r16,r2,492c <___vfprintf_internal_r+0x1aac>
    44cc:	00801184 	movi	r2,70
    44d0:	80811626 	beq	r16,r2,492c <___vfprintf_internal_r+0x1aac>
    44d4:	00801144 	movi	r2,69
    44d8:	a881e926 	beq	r21,r2,4c80 <___vfprintf_internal_r+0x1e00>
    44dc:	4839883a 	mov	fp,r9
    44e0:	d8802604 	addi	r2,sp,152
    44e4:	d8800115 	stw	r2,4(sp)
    44e8:	d9403717 	ldw	r5,220(sp)
    44ec:	d8802504 	addi	r2,sp,148
    44f0:	d8800215 	stw	r2,8(sp)
    44f4:	d8802104 	addi	r2,sp,132
    44f8:	df000015 	stw	fp,0(sp)
    44fc:	d8800315 	stw	r2,12(sp)
    4500:	b009883a 	mov	r4,r22
    4504:	900d883a 	mov	r6,r18
    4508:	01c00084 	movi	r7,2
    450c:	da003f15 	stw	r8,252(sp)
    4510:	da403e15 	stw	r9,248(sp)
    4514:	00052040 	call	5204 <_dtoa_r>
    4518:	d8803115 	stw	r2,196(sp)
    451c:	008019c4 	movi	r2,103
    4520:	da003f17 	ldw	r8,252(sp)
    4524:	da403e17 	ldw	r9,248(sp)
    4528:	80800226 	beq	r16,r2,4534 <___vfprintf_internal_r+0x16b4>
    452c:	008011c4 	movi	r2,71
    4530:	8081101e 	bne	r16,r2,4974 <___vfprintf_internal_r+0x1af4>
    4534:	8880004c 	andi	r2,r17,1
    4538:	1001dd26 	beq	r2,zero,4cb0 <___vfprintf_internal_r+0x1e30>
    453c:	db003117 	ldw	r12,196(sp)
    4540:	6715883a 	add	r10,r12,fp
    4544:	d9003717 	ldw	r4,220(sp)
    4548:	900b883a 	mov	r5,r18
    454c:	000d883a 	mov	r6,zero
    4550:	000f883a 	mov	r7,zero
    4554:	da003f15 	stw	r8,252(sp)
    4558:	da403e15 	stw	r9,248(sp)
    455c:	da803d15 	stw	r10,244(sp)
    4560:	000ee380 	call	ee38 <__eqdf2>
    4564:	da003f17 	ldw	r8,252(sp)
    4568:	da403e17 	ldw	r9,248(sp)
    456c:	da803d17 	ldw	r10,244(sp)
    4570:	10016526 	beq	r2,zero,4b08 <___vfprintf_internal_r+0x1c88>
    4574:	d8802117 	ldw	r2,132(sp)
    4578:	1280062e 	bgeu	r2,r10,4594 <___vfprintf_internal_r+0x1714>
    457c:	01000c04 	movi	r4,48
    4580:	10c00044 	addi	r3,r2,1
    4584:	d8c02115 	stw	r3,132(sp)
    4588:	11000005 	stb	r4,0(r2)
    458c:	d8802117 	ldw	r2,132(sp)
    4590:	12bffb36 	bltu	r2,r10,4580 <__alt_mem_Flash_flash_data+0xf4004580>
    4594:	db003117 	ldw	r12,196(sp)
    4598:	1305c83a 	sub	r2,r2,r12
    459c:	d8803315 	stw	r2,204(sp)
    45a0:	008011c4 	movi	r2,71
    45a4:	a8814d26 	beq	r21,r2,4adc <___vfprintf_internal_r+0x1c5c>
    45a8:	00801944 	movi	r2,101
    45ac:	1402060e 	bge	r2,r16,4dc8 <___vfprintf_internal_r+0x1f48>
    45b0:	00801984 	movi	r2,102
    45b4:	8081b426 	beq	r16,r2,4c88 <___vfprintf_internal_r+0x1e08>
    45b8:	db002617 	ldw	r12,152(sp)
    45bc:	db003415 	stw	r12,208(sp)
    45c0:	db003417 	ldw	r12,208(sp)
    45c4:	dac03317 	ldw	r11,204(sp)
    45c8:	62c1a016 	blt	r12,r11,4c4c <___vfprintf_internal_r+0x1dcc>
    45cc:	8c40004c 	andi	r17,r17,1
    45d0:	8801bf1e 	bne	r17,zero,4cd0 <___vfprintf_internal_r+0x1e50>
    45d4:	6005883a 	mov	r2,r12
    45d8:	6001b316 	blt	r12,zero,4ca8 <___vfprintf_internal_r+0x1e28>
    45dc:	dc803417 	ldw	r18,208(sp)
    45e0:	df002b07 	ldb	fp,172(sp)
    45e4:	e0012e1e 	bne	fp,zero,4aa0 <___vfprintf_internal_r+0x1c20>
    45e8:	dc402d17 	ldw	r17,180(sp)
    45ec:	dd402783 	ldbu	r21,158(sp)
    45f0:	d8802b15 	stw	r2,172(sp)
    45f4:	dcc02d15 	stw	r19,180(sp)
    45f8:	d8003215 	stw	zero,200(sp)
    45fc:	003b7306 	br	33cc <__alt_mem_Flash_flash_data+0xf40033cc>
    4600:	00800084 	movi	r2,2
    4604:	003c4d06 	br	373c <__alt_mem_Flash_flash_data+0xf400373c>
    4608:	8880040c 	andi	r2,r17,16
    460c:	1000091e 	bne	r2,zero,4634 <___vfprintf_internal_r+0x17b4>
    4610:	8c40100c 	andi	r17,r17,64
    4614:	88000726 	beq	r17,zero,4634 <___vfprintf_internal_r+0x17b4>
    4618:	db002d17 	ldw	r12,180(sp)
    461c:	dac02f17 	ldw	r11,188(sp)
    4620:	60800017 	ldw	r2,0(r12)
    4624:	63000104 	addi	r12,r12,4
    4628:	db002d15 	stw	r12,180(sp)
    462c:	12c0000d 	sth	r11,0(r2)
    4630:	003a4e06 	br	2f6c <__alt_mem_Flash_flash_data+0xf4002f6c>
    4634:	db002d17 	ldw	r12,180(sp)
    4638:	dac02f17 	ldw	r11,188(sp)
    463c:	60800017 	ldw	r2,0(r12)
    4640:	63000104 	addi	r12,r12,4
    4644:	db002d15 	stw	r12,180(sp)
    4648:	12c00015 	stw	r11,0(r2)
    464c:	003a4706 	br	2f6c <__alt_mem_Flash_flash_data+0xf4002f6c>
    4650:	1c000007 	ldb	r16,0(r3)
    4654:	1805883a 	mov	r2,r3
    4658:	003a6e06 	br	3014 <__alt_mem_Flash_flash_data+0xf4003014>
    465c:	88c0100c 	andi	r3,r17,64
    4660:	18006b26 	beq	r3,zero,4810 <___vfprintf_internal_r+0x1990>
    4664:	dac02d17 	ldw	r11,180(sp)
    4668:	14c0000b 	ldhu	r19,0(r2)
    466c:	0039883a 	mov	fp,zero
    4670:	5ac00104 	addi	r11,r11,4
    4674:	dac02d15 	stw	r11,180(sp)
    4678:	003cb206 	br	3944 <__alt_mem_Flash_flash_data+0xf4003944>
    467c:	010000b4 	movhi	r4,2
    4680:	21039184 	addi	r4,r4,3654
    4684:	d9002c15 	stw	r4,176(sp)
    4688:	dac02c17 	ldw	r11,176(sp)
    468c:	1c87883a 	add	r3,r3,r18
    4690:	10800044 	addi	r2,r2,1
    4694:	42c00015 	stw	r11,0(r8)
    4698:	44800115 	stw	r18,4(r8)
    469c:	d8c02015 	stw	r3,128(sp)
    46a0:	d8801f15 	stw	r2,124(sp)
    46a4:	010001c4 	movi	r4,7
    46a8:	20bee016 	blt	r4,r2,422c <__alt_mem_Flash_flash_data+0xf400422c>
    46ac:	42000204 	addi	r8,r8,8
    46b0:	003ee506 	br	4248 <__alt_mem_Flash_flash_data+0xf4004248>
    46b4:	010000b4 	movhi	r4,2
    46b8:	21039184 	addi	r4,r4,3654
    46bc:	d9002c15 	stw	r4,176(sp)
    46c0:	003bbe06 	br	35bc <__alt_mem_Flash_flash_data+0xf40035bc>
    46c4:	b009883a 	mov	r4,r22
    46c8:	b80b883a 	mov	r5,r23
    46cc:	d9801e04 	addi	r6,sp,120
    46d0:	000b3940 	call	b394 <__sprint_r>
    46d4:	103ade1e 	bne	r2,zero,3250 <__alt_mem_Flash_flash_data+0xf4003250>
    46d8:	d8c02017 	ldw	r3,128(sp)
    46dc:	da000404 	addi	r8,sp,16
    46e0:	003d6b06 	br	3c90 <__alt_mem_Flash_flash_data+0xf4003c90>
    46e4:	d8801f17 	ldw	r2,124(sp)
    46e8:	030000b4 	movhi	r12,2
    46ec:	01000044 	movi	r4,1
    46f0:	18c00044 	addi	r3,r3,1
    46f4:	10800044 	addi	r2,r2,1
    46f8:	63038904 	addi	r12,r12,3620
    46fc:	41000115 	stw	r4,4(r8)
    4700:	43000015 	stw	r12,0(r8)
    4704:	d8c02015 	stw	r3,128(sp)
    4708:	d8801f15 	stw	r2,124(sp)
    470c:	010001c4 	movi	r4,7
    4710:	20804916 	blt	r4,r2,4838 <___vfprintf_internal_r+0x19b8>
    4714:	42000204 	addi	r8,r8,8
    4718:	8000041e 	bne	r16,zero,472c <___vfprintf_internal_r+0x18ac>
    471c:	dac03317 	ldw	r11,204(sp)
    4720:	5800021e 	bne	r11,zero,472c <___vfprintf_internal_r+0x18ac>
    4724:	8880004c 	andi	r2,r17,1
    4728:	103bbb26 	beq	r2,zero,3618 <__alt_mem_Flash_flash_data+0xf4003618>
    472c:	db003817 	ldw	r12,224(sp)
    4730:	d8801f17 	ldw	r2,124(sp)
    4734:	dac03517 	ldw	r11,212(sp)
    4738:	1b07883a 	add	r3,r3,r12
    473c:	10800044 	addi	r2,r2,1
    4740:	42c00015 	stw	r11,0(r8)
    4744:	43000115 	stw	r12,4(r8)
    4748:	d8c02015 	stw	r3,128(sp)
    474c:	d8801f15 	stw	r2,124(sp)
    4750:	010001c4 	movi	r4,7
    4754:	20812e16 	blt	r4,r2,4c10 <___vfprintf_internal_r+0x1d90>
    4758:	42000204 	addi	r8,r8,8
    475c:	0421c83a 	sub	r16,zero,r16
    4760:	04005c0e 	bge	zero,r16,48d4 <___vfprintf_internal_r+0x1a54>
    4764:	04800404 	movi	r18,16
    4768:	94009f0e 	bge	r18,r16,49e8 <___vfprintf_internal_r+0x1b68>
    476c:	010000b4 	movhi	r4,2
    4770:	21039184 	addi	r4,r4,3654
    4774:	d9002c15 	stw	r4,176(sp)
    4778:	054001c4 	movi	r21,7
    477c:	00000306 	br	478c <___vfprintf_internal_r+0x190c>
    4780:	42000204 	addi	r8,r8,8
    4784:	843ffc04 	addi	r16,r16,-16
    4788:	94009a0e 	bge	r18,r16,49f4 <___vfprintf_internal_r+0x1b74>
    478c:	18c00404 	addi	r3,r3,16
    4790:	10800044 	addi	r2,r2,1
    4794:	45000015 	stw	r20,0(r8)
    4798:	44800115 	stw	r18,4(r8)
    479c:	d8c02015 	stw	r3,128(sp)
    47a0:	d8801f15 	stw	r2,124(sp)
    47a4:	a8bff60e 	bge	r21,r2,4780 <__alt_mem_Flash_flash_data+0xf4004780>
    47a8:	b009883a 	mov	r4,r22
    47ac:	b80b883a 	mov	r5,r23
    47b0:	d9801e04 	addi	r6,sp,120
    47b4:	000b3940 	call	b394 <__sprint_r>
    47b8:	103aa51e 	bne	r2,zero,3250 <__alt_mem_Flash_flash_data+0xf4003250>
    47bc:	d8c02017 	ldw	r3,128(sp)
    47c0:	d8801f17 	ldw	r2,124(sp)
    47c4:	da000404 	addi	r8,sp,16
    47c8:	003fee06 	br	4784 <__alt_mem_Flash_flash_data+0xf4004784>
    47cc:	008011c4 	movi	r2,71
    47d0:	1400be16 	blt	r2,r16,4acc <___vfprintf_internal_r+0x1c4c>
    47d4:	030000b4 	movhi	r12,2
    47d8:	63037b04 	addi	r12,r12,3564
    47dc:	db003115 	stw	r12,196(sp)
    47e0:	00c000c4 	movi	r3,3
    47e4:	00bfdfc4 	movi	r2,-129
    47e8:	d8c02b15 	stw	r3,172(sp)
    47ec:	88a2703a 	and	r17,r17,r2
    47f0:	dd402783 	ldbu	r21,158(sp)
    47f4:	dcc02d15 	stw	r19,180(sp)
    47f8:	1825883a 	mov	r18,r3
    47fc:	d8003215 	stw	zero,200(sp)
    4800:	d8003415 	stw	zero,208(sp)
    4804:	003af106 	br	33cc <__alt_mem_Flash_flash_data+0xf40033cc>
    4808:	4825883a 	mov	r18,r9
    480c:	003c9306 	br	3a5c <__alt_mem_Flash_flash_data+0xf4003a5c>
    4810:	db002d17 	ldw	r12,180(sp)
    4814:	14c00017 	ldw	r19,0(r2)
    4818:	0039883a 	mov	fp,zero
    481c:	63000104 	addi	r12,r12,4
    4820:	db002d15 	stw	r12,180(sp)
    4824:	003c4706 	br	3944 <__alt_mem_Flash_flash_data+0xf4003944>
    4828:	008000b4 	movhi	r2,2
    482c:	10837904 	addi	r2,r2,3556
    4830:	d8803115 	stw	r2,196(sp)
    4834:	003bf106 	br	37fc <__alt_mem_Flash_flash_data+0xf40037fc>
    4838:	b009883a 	mov	r4,r22
    483c:	b80b883a 	mov	r5,r23
    4840:	d9801e04 	addi	r6,sp,120
    4844:	000b3940 	call	b394 <__sprint_r>
    4848:	103a811e 	bne	r2,zero,3250 <__alt_mem_Flash_flash_data+0xf4003250>
    484c:	dc002617 	ldw	r16,152(sp)
    4850:	d8c02017 	ldw	r3,128(sp)
    4854:	da000404 	addi	r8,sp,16
    4858:	003faf06 	br	4718 <__alt_mem_Flash_flash_data+0xf4004718>
    485c:	db002e17 	ldw	r12,184(sp)
    4860:	1805883a 	mov	r2,r3
    4864:	dac02d15 	stw	r11,180(sp)
    4868:	0319c83a 	sub	r12,zero,r12
    486c:	db002e15 	stw	r12,184(sp)
    4870:	003a8206 	br	327c <__alt_mem_Flash_flash_data+0xf400327c>
    4874:	18800044 	addi	r2,r3,1
    4878:	8c400814 	ori	r17,r17,32
    487c:	1c000047 	ldb	r16,1(r3)
    4880:	0039e406 	br	3014 <__alt_mem_Flash_flash_data+0xf4003014>
    4884:	b009883a 	mov	r4,r22
    4888:	b80b883a 	mov	r5,r23
    488c:	d9801e04 	addi	r6,sp,120
    4890:	000b3940 	call	b394 <__sprint_r>
    4894:	103a6e1e 	bne	r2,zero,3250 <__alt_mem_Flash_flash_data+0xf4003250>
    4898:	d8c02017 	ldw	r3,128(sp)
    489c:	da000404 	addi	r8,sp,16
    48a0:	003d0c06 	br	3cd4 <__alt_mem_Flash_flash_data+0xf4003cd4>
    48a4:	db002817 	ldw	r12,160(sp)
    48a8:	d8c03117 	ldw	r3,196(sp)
    48ac:	60e5c83a 	sub	r18,r12,r3
    48b0:	003ac106 	br	33b8 <__alt_mem_Flash_flash_data+0xf40033b8>
    48b4:	b009883a 	mov	r4,r22
    48b8:	b80b883a 	mov	r5,r23
    48bc:	d9801e04 	addi	r6,sp,120
    48c0:	000b3940 	call	b394 <__sprint_r>
    48c4:	103a621e 	bne	r2,zero,3250 <__alt_mem_Flash_flash_data+0xf4003250>
    48c8:	d8c02017 	ldw	r3,128(sp)
    48cc:	d8801f17 	ldw	r2,124(sp)
    48d0:	da000404 	addi	r8,sp,16
    48d4:	db003317 	ldw	r12,204(sp)
    48d8:	dac03117 	ldw	r11,196(sp)
    48dc:	10800044 	addi	r2,r2,1
    48e0:	1b07883a 	add	r3,r3,r12
    48e4:	42c00015 	stw	r11,0(r8)
    48e8:	43000115 	stw	r12,4(r8)
    48ec:	d8c02015 	stw	r3,128(sp)
    48f0:	d8801f15 	stw	r2,124(sp)
    48f4:	010001c4 	movi	r4,7
    48f8:	20bb460e 	bge	r4,r2,3614 <__alt_mem_Flash_flash_data+0xf4003614>
    48fc:	003d8506 	br	3f14 <__alt_mem_Flash_flash_data+0xf4003f14>
    4900:	da003f15 	stw	r8,252(sp)
    4904:	0000e580 	call	e58 <strlen>
    4908:	1025883a 	mov	r18,r2
    490c:	da003f17 	ldw	r8,252(sp)
    4910:	903c540e 	bge	r18,zero,3a64 <__alt_mem_Flash_flash_data+0xf4003a64>
    4914:	0005883a 	mov	r2,zero
    4918:	003c5206 	br	3a64 <__alt_mem_Flash_flash_data+0xf4003a64>
    491c:	010000b4 	movhi	r4,2
    4920:	21039584 	addi	r4,r4,3670
    4924:	d9003615 	stw	r4,216(sp)
    4928:	003adc06 	br	349c <__alt_mem_Flash_flash_data+0xf400349c>
    492c:	d8802604 	addi	r2,sp,152
    4930:	d8800115 	stw	r2,4(sp)
    4934:	d9403717 	ldw	r5,220(sp)
    4938:	d8802504 	addi	r2,sp,148
    493c:	d8800215 	stw	r2,8(sp)
    4940:	d8802104 	addi	r2,sp,132
    4944:	da400015 	stw	r9,0(sp)
    4948:	d8800315 	stw	r2,12(sp)
    494c:	b009883a 	mov	r4,r22
    4950:	900d883a 	mov	r6,r18
    4954:	01c000c4 	movi	r7,3
    4958:	da003f15 	stw	r8,252(sp)
    495c:	da403e15 	stw	r9,248(sp)
    4960:	00052040 	call	5204 <_dtoa_r>
    4964:	da403e17 	ldw	r9,248(sp)
    4968:	da003f17 	ldw	r8,252(sp)
    496c:	d8803115 	stw	r2,196(sp)
    4970:	4839883a 	mov	fp,r9
    4974:	dac03117 	ldw	r11,196(sp)
    4978:	00801184 	movi	r2,70
    497c:	5f15883a 	add	r10,r11,fp
    4980:	a8bef01e 	bne	r21,r2,4544 <__alt_mem_Flash_flash_data+0xf4004544>
    4984:	59000007 	ldb	r4,0(r11)
    4988:	00800c04 	movi	r2,48
    498c:	2080d526 	beq	r4,r2,4ce4 <___vfprintf_internal_r+0x1e64>
    4990:	d8c02617 	ldw	r3,152(sp)
    4994:	50d5883a 	add	r10,r10,r3
    4998:	003eea06 	br	4544 <__alt_mem_Flash_flash_data+0xf4004544>
    499c:	0025883a 	mov	r18,zero
    49a0:	003db306 	br	4070 <__alt_mem_Flash_flash_data+0xf4004070>
    49a4:	b009883a 	mov	r4,r22
    49a8:	b80b883a 	mov	r5,r23
    49ac:	d9801e04 	addi	r6,sp,120
    49b0:	000b3940 	call	b394 <__sprint_r>
    49b4:	103a261e 	bne	r2,zero,3250 <__alt_mem_Flash_flash_data+0xf4003250>
    49b8:	d8c02017 	ldw	r3,128(sp)
    49bc:	da000404 	addi	r8,sp,16
    49c0:	003daa06 	br	406c <__alt_mem_Flash_flash_data+0xf400406c>
    49c4:	b009883a 	mov	r4,r22
    49c8:	b80b883a 	mov	r5,r23
    49cc:	d9801e04 	addi	r6,sp,120
    49d0:	000b3940 	call	b394 <__sprint_r>
    49d4:	103a1e1e 	bne	r2,zero,3250 <__alt_mem_Flash_flash_data+0xf4003250>
    49d8:	d8802617 	ldw	r2,152(sp)
    49dc:	d8c02017 	ldw	r3,128(sp)
    49e0:	da000404 	addi	r8,sp,16
    49e4:	003e2c06 	br	4298 <__alt_mem_Flash_flash_data+0xf4004298>
    49e8:	030000b4 	movhi	r12,2
    49ec:	63039184 	addi	r12,r12,3654
    49f0:	db002c15 	stw	r12,176(sp)
    49f4:	dac02c17 	ldw	r11,176(sp)
    49f8:	1c07883a 	add	r3,r3,r16
    49fc:	10800044 	addi	r2,r2,1
    4a00:	42c00015 	stw	r11,0(r8)
    4a04:	44000115 	stw	r16,4(r8)
    4a08:	d8c02015 	stw	r3,128(sp)
    4a0c:	d8801f15 	stw	r2,124(sp)
    4a10:	010001c4 	movi	r4,7
    4a14:	20bfa716 	blt	r4,r2,48b4 <__alt_mem_Flash_flash_data+0xf40048b4>
    4a18:	42000204 	addi	r8,r8,8
    4a1c:	003fad06 	br	48d4 <__alt_mem_Flash_flash_data+0xf40048d4>
    4a20:	00800184 	movi	r2,6
    4a24:	1240012e 	bgeu	r2,r9,4a2c <___vfprintf_internal_r+0x1bac>
    4a28:	1013883a 	mov	r9,r2
    4a2c:	4825883a 	mov	r18,r9
    4a30:	4805883a 	mov	r2,r9
    4a34:	4800c216 	blt	r9,zero,4d40 <___vfprintf_internal_r+0x1ec0>
    4a38:	d8802b15 	stw	r2,172(sp)
    4a3c:	008000b4 	movhi	r2,2
    4a40:	10838704 	addi	r2,r2,3612
    4a44:	d8803115 	stw	r2,196(sp)
    4a48:	dcc02d15 	stw	r19,180(sp)
    4a4c:	d8003215 	stw	zero,200(sp)
    4a50:	d8003415 	stw	zero,208(sp)
    4a54:	0005883a 	mov	r2,zero
    4a58:	003a6306 	br	33e8 <__alt_mem_Flash_flash_data+0xf40033e8>
    4a5c:	0021883a 	mov	r16,zero
    4a60:	003e1f06 	br	42e0 <__alt_mem_Flash_flash_data+0xf40042e0>
    4a64:	b009883a 	mov	r4,r22
    4a68:	b80b883a 	mov	r5,r23
    4a6c:	d9801e04 	addi	r6,sp,120
    4a70:	000b3940 	call	b394 <__sprint_r>
    4a74:	1039f61e 	bne	r2,zero,3250 <__alt_mem_Flash_flash_data+0xf4003250>
    4a78:	d8802617 	ldw	r2,152(sp)
    4a7c:	db003317 	ldw	r12,204(sp)
    4a80:	d8c02017 	ldw	r3,128(sp)
    4a84:	da000404 	addi	r8,sp,16
    4a88:	6085c83a 	sub	r2,r12,r2
    4a8c:	003e1306 	br	42dc <__alt_mem_Flash_flash_data+0xf40042dc>
    4a90:	030000b4 	movhi	r12,2
    4a94:	63039584 	addi	r12,r12,3670
    4a98:	db003615 	stw	r12,216(sp)
    4a9c:	003b0206 	br	36a8 <__alt_mem_Flash_flash_data+0xf40036a8>
    4aa0:	00c00b44 	movi	r3,45
    4aa4:	d8802b15 	stw	r2,172(sp)
    4aa8:	dc402d17 	ldw	r17,180(sp)
    4aac:	d8c02785 	stb	r3,158(sp)
    4ab0:	dcc02d15 	stw	r19,180(sp)
    4ab4:	d8003215 	stw	zero,200(sp)
    4ab8:	00800b44 	movi	r2,45
    4abc:	003a4706 	br	33dc <__alt_mem_Flash_flash_data+0xf40033dc>
    4ac0:	05400b44 	movi	r21,45
    4ac4:	dd402785 	stb	r21,158(sp)
    4ac8:	003b4706 	br	37e8 <__alt_mem_Flash_flash_data+0xf40037e8>
    4acc:	008000b4 	movhi	r2,2
    4ad0:	10837c04 	addi	r2,r2,3568
    4ad4:	d8803115 	stw	r2,196(sp)
    4ad8:	003f4106 	br	47e0 <__alt_mem_Flash_flash_data+0xf40047e0>
    4adc:	d8c02617 	ldw	r3,152(sp)
    4ae0:	00bfff44 	movi	r2,-3
    4ae4:	18801116 	blt	r3,r2,4b2c <___vfprintf_internal_r+0x1cac>
    4ae8:	48c01016 	blt	r9,r3,4b2c <___vfprintf_internal_r+0x1cac>
    4aec:	d8c03415 	stw	r3,208(sp)
    4af0:	040019c4 	movi	r16,103
    4af4:	003eb206 	br	45c0 <__alt_mem_Flash_flash_data+0xf40045c0>
    4af8:	010000b4 	movhi	r4,2
    4afc:	21039184 	addi	r4,r4,3654
    4b00:	d9002c15 	stw	r4,176(sp)
    4b04:	003cb106 	br	3dcc <__alt_mem_Flash_flash_data+0xf4003dcc>
    4b08:	5005883a 	mov	r2,r10
    4b0c:	003ea106 	br	4594 <__alt_mem_Flash_flash_data+0xf4004594>
    4b10:	da402b15 	stw	r9,172(sp)
    4b14:	dd402783 	ldbu	r21,158(sp)
    4b18:	4825883a 	mov	r18,r9
    4b1c:	dcc02d15 	stw	r19,180(sp)
    4b20:	d8003215 	stw	zero,200(sp)
    4b24:	d8003415 	stw	zero,208(sp)
    4b28:	003a2806 	br	33cc <__alt_mem_Flash_flash_data+0xf40033cc>
    4b2c:	843fff84 	addi	r16,r16,-2
    4b30:	1f3fffc4 	addi	fp,r3,-1
    4b34:	df002615 	stw	fp,152(sp)
    4b38:	dc0022c5 	stb	r16,139(sp)
    4b3c:	e0009816 	blt	fp,zero,4da0 <___vfprintf_internal_r+0x1f20>
    4b40:	00800ac4 	movi	r2,43
    4b44:	d8802305 	stb	r2,140(sp)
    4b48:	00800244 	movi	r2,9
    4b4c:	1700750e 	bge	r2,fp,4d24 <___vfprintf_internal_r+0x1ea4>
    4b50:	dd4022c4 	addi	r21,sp,139
    4b54:	dc002c15 	stw	r16,176(sp)
    4b58:	4025883a 	mov	r18,r8
    4b5c:	a821883a 	mov	r16,r21
    4b60:	e009883a 	mov	r4,fp
    4b64:	01400284 	movi	r5,10
    4b68:	000dc640 	call	dc64 <__modsi3>
    4b6c:	10800c04 	addi	r2,r2,48
    4b70:	843fffc4 	addi	r16,r16,-1
    4b74:	e009883a 	mov	r4,fp
    4b78:	01400284 	movi	r5,10
    4b7c:	80800005 	stb	r2,0(r16)
    4b80:	000dc100 	call	dc10 <__divsi3>
    4b84:	1039883a 	mov	fp,r2
    4b88:	00800244 	movi	r2,9
    4b8c:	173ff416 	blt	r2,fp,4b60 <__alt_mem_Flash_flash_data+0xf4004b60>
    4b90:	9011883a 	mov	r8,r18
    4b94:	e0800c04 	addi	r2,fp,48
    4b98:	8025883a 	mov	r18,r16
    4b9c:	913fffc4 	addi	r4,r18,-1
    4ba0:	90bfffc5 	stb	r2,-1(r18)
    4ba4:	dc002c17 	ldw	r16,176(sp)
    4ba8:	2540852e 	bgeu	r4,r21,4dc0 <___vfprintf_internal_r+0x1f40>
    4bac:	d9402384 	addi	r5,sp,142
    4bb0:	2c8bc83a 	sub	r5,r5,r18
    4bb4:	d8c02344 	addi	r3,sp,141
    4bb8:	a94b883a 	add	r5,r21,r5
    4bbc:	00000106 	br	4bc4 <___vfprintf_internal_r+0x1d44>
    4bc0:	20800003 	ldbu	r2,0(r4)
    4bc4:	18800005 	stb	r2,0(r3)
    4bc8:	18c00044 	addi	r3,r3,1
    4bcc:	21000044 	addi	r4,r4,1
    4bd0:	197ffb1e 	bne	r3,r5,4bc0 <__alt_mem_Flash_flash_data+0xf4004bc0>
    4bd4:	d8802304 	addi	r2,sp,140
    4bd8:	1485c83a 	sub	r2,r2,r18
    4bdc:	d8c02344 	addi	r3,sp,141
    4be0:	1885883a 	add	r2,r3,r2
    4be4:	dac03317 	ldw	r11,204(sp)
    4be8:	156bc83a 	sub	r21,r2,r21
    4bec:	dd403a15 	stw	r21,232(sp)
    4bf0:	00800044 	movi	r2,1
    4bf4:	5d65883a 	add	r18,r11,r21
    4bf8:	12c0660e 	bge	r2,r11,4d94 <___vfprintf_internal_r+0x1f14>
    4bfc:	94800044 	addi	r18,r18,1
    4c00:	9005883a 	mov	r2,r18
    4c04:	90006116 	blt	r18,zero,4d8c <___vfprintf_internal_r+0x1f0c>
    4c08:	d8003415 	stw	zero,208(sp)
    4c0c:	003e7406 	br	45e0 <__alt_mem_Flash_flash_data+0xf40045e0>
    4c10:	b009883a 	mov	r4,r22
    4c14:	b80b883a 	mov	r5,r23
    4c18:	d9801e04 	addi	r6,sp,120
    4c1c:	000b3940 	call	b394 <__sprint_r>
    4c20:	10398b1e 	bne	r2,zero,3250 <__alt_mem_Flash_flash_data+0xf4003250>
    4c24:	dc002617 	ldw	r16,152(sp)
    4c28:	d8c02017 	ldw	r3,128(sp)
    4c2c:	d8801f17 	ldw	r2,124(sp)
    4c30:	da000404 	addi	r8,sp,16
    4c34:	003ec906 	br	475c <__alt_mem_Flash_flash_data+0xf400475c>
    4c38:	483e1c1e 	bne	r9,zero,44ac <__alt_mem_Flash_flash_data+0xf40044ac>
    4c3c:	9013883a 	mov	r9,r18
    4c40:	003e1a06 	br	44ac <__alt_mem_Flash_flash_data+0xf40044ac>
    4c44:	02400184 	movi	r9,6
    4c48:	003e1806 	br	44ac <__alt_mem_Flash_flash_data+0xf40044ac>
    4c4c:	d8c03417 	ldw	r3,208(sp)
    4c50:	00c04b0e 	bge	zero,r3,4d80 <___vfprintf_internal_r+0x1f00>
    4c54:	04800044 	movi	r18,1
    4c58:	dac03317 	ldw	r11,204(sp)
    4c5c:	92e5883a 	add	r18,r18,r11
    4c60:	9005883a 	mov	r2,r18
    4c64:	903e5e0e 	bge	r18,zero,45e0 <__alt_mem_Flash_flash_data+0xf40045e0>
    4c68:	0005883a 	mov	r2,zero
    4c6c:	003e5c06 	br	45e0 <__alt_mem_Flash_flash_data+0xf40045e0>
    4c70:	00c00b44 	movi	r3,45
    4c74:	64a0003c 	xorhi	r18,r12,32768
    4c78:	d8c02b05 	stb	r3,172(sp)
    4c7c:	003e1106 	br	44c4 <__alt_mem_Flash_flash_data+0xf40044c4>
    4c80:	4f000044 	addi	fp,r9,1
    4c84:	003e1606 	br	44e0 <__alt_mem_Flash_flash_data+0xf40044e0>
    4c88:	d8c02617 	ldw	r3,152(sp)
    4c8c:	d8c03415 	stw	r3,208(sp)
    4c90:	00c0350e 	bge	zero,r3,4d68 <___vfprintf_internal_r+0x1ee8>
    4c94:	4800081e 	bne	r9,zero,4cb8 <___vfprintf_internal_r+0x1e38>
    4c98:	8c40004c 	andi	r17,r17,1
    4c9c:	8800061e 	bne	r17,zero,4cb8 <___vfprintf_internal_r+0x1e38>
    4ca0:	1805883a 	mov	r2,r3
    4ca4:	183e4d0e 	bge	r3,zero,45dc <__alt_mem_Flash_flash_data+0xf40045dc>
    4ca8:	0005883a 	mov	r2,zero
    4cac:	003e4b06 	br	45dc <__alt_mem_Flash_flash_data+0xf40045dc>
    4cb0:	d8802117 	ldw	r2,132(sp)
    4cb4:	003e3706 	br	4594 <__alt_mem_Flash_flash_data+0xf4004594>
    4cb8:	dac03417 	ldw	r11,208(sp)
    4cbc:	4a400044 	addi	r9,r9,1
    4cc0:	5a65883a 	add	r18,r11,r9
    4cc4:	9005883a 	mov	r2,r18
    4cc8:	903e450e 	bge	r18,zero,45e0 <__alt_mem_Flash_flash_data+0xf40045e0>
    4ccc:	003fe606 	br	4c68 <__alt_mem_Flash_flash_data+0xf4004c68>
    4cd0:	db003417 	ldw	r12,208(sp)
    4cd4:	64800044 	addi	r18,r12,1
    4cd8:	9005883a 	mov	r2,r18
    4cdc:	903e400e 	bge	r18,zero,45e0 <__alt_mem_Flash_flash_data+0xf40045e0>
    4ce0:	003fe106 	br	4c68 <__alt_mem_Flash_flash_data+0xf4004c68>
    4ce4:	d9003717 	ldw	r4,220(sp)
    4ce8:	900b883a 	mov	r5,r18
    4cec:	000d883a 	mov	r6,zero
    4cf0:	000f883a 	mov	r7,zero
    4cf4:	da003f15 	stw	r8,252(sp)
    4cf8:	da403e15 	stw	r9,248(sp)
    4cfc:	da803d15 	stw	r10,244(sp)
    4d00:	000ee380 	call	ee38 <__eqdf2>
    4d04:	da003f17 	ldw	r8,252(sp)
    4d08:	da403e17 	ldw	r9,248(sp)
    4d0c:	da803d17 	ldw	r10,244(sp)
    4d10:	103f1f26 	beq	r2,zero,4990 <__alt_mem_Flash_flash_data+0xf4004990>
    4d14:	00800044 	movi	r2,1
    4d18:	1707c83a 	sub	r3,r2,fp
    4d1c:	d8c02615 	stw	r3,152(sp)
    4d20:	003f1c06 	br	4994 <__alt_mem_Flash_flash_data+0xf4004994>
    4d24:	00800c04 	movi	r2,48
    4d28:	e0c00c04 	addi	r3,fp,48
    4d2c:	d8802345 	stb	r2,141(sp)
    4d30:	d8c02385 	stb	r3,142(sp)
    4d34:	d88023c4 	addi	r2,sp,143
    4d38:	dd4022c4 	addi	r21,sp,139
    4d3c:	003fa906 	br	4be4 <__alt_mem_Flash_flash_data+0xf4004be4>
    4d40:	0005883a 	mov	r2,zero
    4d44:	003f3c06 	br	4a38 <__alt_mem_Flash_flash_data+0xf4004a38>
    4d48:	dac02d17 	ldw	r11,180(sp)
    4d4c:	5a400017 	ldw	r9,0(r11)
    4d50:	5ac00104 	addi	r11,r11,4
    4d54:	dac02d15 	stw	r11,180(sp)
    4d58:	483ec80e 	bge	r9,zero,487c <__alt_mem_Flash_flash_data+0xf400487c>
    4d5c:	027fffc4 	movi	r9,-1
    4d60:	1c000047 	ldb	r16,1(r3)
    4d64:	0038ab06 	br	3014 <__alt_mem_Flash_flash_data+0xf4003014>
    4d68:	4800111e 	bne	r9,zero,4db0 <___vfprintf_internal_r+0x1f30>
    4d6c:	8c40004c 	andi	r17,r17,1
    4d70:	88000f1e 	bne	r17,zero,4db0 <___vfprintf_internal_r+0x1f30>
    4d74:	00800044 	movi	r2,1
    4d78:	1025883a 	mov	r18,r2
    4d7c:	003e1806 	br	45e0 <__alt_mem_Flash_flash_data+0xf40045e0>
    4d80:	04800084 	movi	r18,2
    4d84:	90e5c83a 	sub	r18,r18,r3
    4d88:	003fb306 	br	4c58 <__alt_mem_Flash_flash_data+0xf4004c58>
    4d8c:	0005883a 	mov	r2,zero
    4d90:	003f9d06 	br	4c08 <__alt_mem_Flash_flash_data+0xf4004c08>
    4d94:	88a2703a 	and	r17,r17,r2
    4d98:	883f9926 	beq	r17,zero,4c00 <__alt_mem_Flash_flash_data+0xf4004c00>
    4d9c:	003f9706 	br	4bfc <__alt_mem_Flash_flash_data+0xf4004bfc>
    4da0:	00800b44 	movi	r2,45
    4da4:	0739c83a 	sub	fp,zero,fp
    4da8:	d8802305 	stb	r2,140(sp)
    4dac:	003f6606 	br	4b48 <__alt_mem_Flash_flash_data+0xf4004b48>
    4db0:	4c800084 	addi	r18,r9,2
    4db4:	9005883a 	mov	r2,r18
    4db8:	903e090e 	bge	r18,zero,45e0 <__alt_mem_Flash_flash_data+0xf40045e0>
    4dbc:	003faa06 	br	4c68 <__alt_mem_Flash_flash_data+0xf4004c68>
    4dc0:	d8802344 	addi	r2,sp,141
    4dc4:	003f8706 	br	4be4 <__alt_mem_Flash_flash_data+0xf4004be4>
    4dc8:	d8c02617 	ldw	r3,152(sp)
    4dcc:	003f5806 	br	4b30 <__alt_mem_Flash_flash_data+0xf4004b30>

00004dd0 <__vfprintf_internal>:
    4dd0:	2007883a 	mov	r3,r4
    4dd4:	010000b4 	movhi	r4,2
    4dd8:	210c8604 	addi	r4,r4,12824
    4ddc:	21000017 	ldw	r4,0(r4)
    4de0:	2805883a 	mov	r2,r5
    4de4:	300f883a 	mov	r7,r6
    4de8:	180b883a 	mov	r5,r3
    4dec:	100d883a 	mov	r6,r2
    4df0:	0002e801 	jmpi	2e80 <___vfprintf_internal_r>

00004df4 <__sbprintf>:
    4df4:	2880030b 	ldhu	r2,12(r5)
    4df8:	2ac01917 	ldw	r11,100(r5)
    4dfc:	2a80038b 	ldhu	r10,14(r5)
    4e00:	2a400717 	ldw	r9,28(r5)
    4e04:	2a000917 	ldw	r8,36(r5)
    4e08:	defee204 	addi	sp,sp,-1144
    4e0c:	00c10004 	movi	r3,1024
    4e10:	dc011a15 	stw	r16,1128(sp)
    4e14:	10bfff4c 	andi	r2,r2,65533
    4e18:	2821883a 	mov	r16,r5
    4e1c:	d8cb883a 	add	r5,sp,r3
    4e20:	dc811c15 	stw	r18,1136(sp)
    4e24:	dc411b15 	stw	r17,1132(sp)
    4e28:	dfc11d15 	stw	ra,1140(sp)
    4e2c:	2025883a 	mov	r18,r4
    4e30:	d881030d 	sth	r2,1036(sp)
    4e34:	dac11915 	stw	r11,1124(sp)
    4e38:	da81038d 	sth	r10,1038(sp)
    4e3c:	da410715 	stw	r9,1052(sp)
    4e40:	da010915 	stw	r8,1060(sp)
    4e44:	dec10015 	stw	sp,1024(sp)
    4e48:	dec10415 	stw	sp,1040(sp)
    4e4c:	d8c10215 	stw	r3,1032(sp)
    4e50:	d8c10515 	stw	r3,1044(sp)
    4e54:	d8010615 	stw	zero,1048(sp)
    4e58:	0002e800 	call	2e80 <___vfprintf_internal_r>
    4e5c:	1023883a 	mov	r17,r2
    4e60:	10000416 	blt	r2,zero,4e74 <__sbprintf+0x80>
    4e64:	9009883a 	mov	r4,r18
    4e68:	d9410004 	addi	r5,sp,1024
    4e6c:	0006b340 	call	6b34 <_fflush_r>
    4e70:	10000d1e 	bne	r2,zero,4ea8 <__sbprintf+0xb4>
    4e74:	d8c1030b 	ldhu	r3,1036(sp)
    4e78:	18c0100c 	andi	r3,r3,64
    4e7c:	18000326 	beq	r3,zero,4e8c <__sbprintf+0x98>
    4e80:	8080030b 	ldhu	r2,12(r16)
    4e84:	10801014 	ori	r2,r2,64
    4e88:	8080030d 	sth	r2,12(r16)
    4e8c:	8805883a 	mov	r2,r17
    4e90:	dfc11d17 	ldw	ra,1140(sp)
    4e94:	dc811c17 	ldw	r18,1136(sp)
    4e98:	dc411b17 	ldw	r17,1132(sp)
    4e9c:	dc011a17 	ldw	r16,1128(sp)
    4ea0:	dec11e04 	addi	sp,sp,1144
    4ea4:	f800283a 	ret
    4ea8:	047fffc4 	movi	r17,-1
    4eac:	003ff106 	br	4e74 <__alt_mem_Flash_flash_data+0xf4004e74>

00004eb0 <__swsetup_r>:
    4eb0:	008000b4 	movhi	r2,2
    4eb4:	defffd04 	addi	sp,sp,-12
    4eb8:	108c8604 	addi	r2,r2,12824
    4ebc:	dc400115 	stw	r17,4(sp)
    4ec0:	2023883a 	mov	r17,r4
    4ec4:	11000017 	ldw	r4,0(r2)
    4ec8:	dc000015 	stw	r16,0(sp)
    4ecc:	dfc00215 	stw	ra,8(sp)
    4ed0:	2821883a 	mov	r16,r5
    4ed4:	20000226 	beq	r4,zero,4ee0 <__swsetup_r+0x30>
    4ed8:	20c00e17 	ldw	r3,56(r4)
    4edc:	18003126 	beq	r3,zero,4fa4 <__swsetup_r+0xf4>
    4ee0:	8080030b 	ldhu	r2,12(r16)
    4ee4:	10c0020c 	andi	r3,r2,8
    4ee8:	100d883a 	mov	r6,r2
    4eec:	18000f26 	beq	r3,zero,4f2c <__swsetup_r+0x7c>
    4ef0:	80c00417 	ldw	r3,16(r16)
    4ef4:	18001526 	beq	r3,zero,4f4c <__swsetup_r+0x9c>
    4ef8:	1100004c 	andi	r4,r2,1
    4efc:	20001c1e 	bne	r4,zero,4f70 <__swsetup_r+0xc0>
    4f00:	1080008c 	andi	r2,r2,2
    4f04:	1000291e 	bne	r2,zero,4fac <__swsetup_r+0xfc>
    4f08:	80800517 	ldw	r2,20(r16)
    4f0c:	80800215 	stw	r2,8(r16)
    4f10:	18001c26 	beq	r3,zero,4f84 <__swsetup_r+0xd4>
    4f14:	0005883a 	mov	r2,zero
    4f18:	dfc00217 	ldw	ra,8(sp)
    4f1c:	dc400117 	ldw	r17,4(sp)
    4f20:	dc000017 	ldw	r16,0(sp)
    4f24:	dec00304 	addi	sp,sp,12
    4f28:	f800283a 	ret
    4f2c:	3080040c 	andi	r2,r6,16
    4f30:	10002e26 	beq	r2,zero,4fec <__swsetup_r+0x13c>
    4f34:	3080010c 	andi	r2,r6,4
    4f38:	10001e1e 	bne	r2,zero,4fb4 <__swsetup_r+0x104>
    4f3c:	80c00417 	ldw	r3,16(r16)
    4f40:	30800214 	ori	r2,r6,8
    4f44:	8080030d 	sth	r2,12(r16)
    4f48:	183feb1e 	bne	r3,zero,4ef8 <__alt_mem_Flash_flash_data+0xf4004ef8>
    4f4c:	1140a00c 	andi	r5,r2,640
    4f50:	01008004 	movi	r4,512
    4f54:	293fe826 	beq	r5,r4,4ef8 <__alt_mem_Flash_flash_data+0xf4004ef8>
    4f58:	8809883a 	mov	r4,r17
    4f5c:	800b883a 	mov	r5,r16
    4f60:	0007a9c0 	call	7a9c <__smakebuf_r>
    4f64:	8080030b 	ldhu	r2,12(r16)
    4f68:	80c00417 	ldw	r3,16(r16)
    4f6c:	003fe206 	br	4ef8 <__alt_mem_Flash_flash_data+0xf4004ef8>
    4f70:	80800517 	ldw	r2,20(r16)
    4f74:	80000215 	stw	zero,8(r16)
    4f78:	0085c83a 	sub	r2,zero,r2
    4f7c:	80800615 	stw	r2,24(r16)
    4f80:	183fe41e 	bne	r3,zero,4f14 <__alt_mem_Flash_flash_data+0xf4004f14>
    4f84:	80c0030b 	ldhu	r3,12(r16)
    4f88:	0005883a 	mov	r2,zero
    4f8c:	1900200c 	andi	r4,r3,128
    4f90:	203fe126 	beq	r4,zero,4f18 <__alt_mem_Flash_flash_data+0xf4004f18>
    4f94:	18c01014 	ori	r3,r3,64
    4f98:	80c0030d 	sth	r3,12(r16)
    4f9c:	00bfffc4 	movi	r2,-1
    4fa0:	003fdd06 	br	4f18 <__alt_mem_Flash_flash_data+0xf4004f18>
    4fa4:	0006f100 	call	6f10 <__sinit>
    4fa8:	003fcd06 	br	4ee0 <__alt_mem_Flash_flash_data+0xf4004ee0>
    4fac:	0005883a 	mov	r2,zero
    4fb0:	003fd606 	br	4f0c <__alt_mem_Flash_flash_data+0xf4004f0c>
    4fb4:	81400c17 	ldw	r5,48(r16)
    4fb8:	28000626 	beq	r5,zero,4fd4 <__swsetup_r+0x124>
    4fbc:	80801004 	addi	r2,r16,64
    4fc0:	28800326 	beq	r5,r2,4fd0 <__swsetup_r+0x120>
    4fc4:	8809883a 	mov	r4,r17
    4fc8:	00070840 	call	7084 <_free_r>
    4fcc:	8180030b 	ldhu	r6,12(r16)
    4fd0:	80000c15 	stw	zero,48(r16)
    4fd4:	80c00417 	ldw	r3,16(r16)
    4fd8:	00bff6c4 	movi	r2,-37
    4fdc:	118c703a 	and	r6,r2,r6
    4fe0:	80000115 	stw	zero,4(r16)
    4fe4:	80c00015 	stw	r3,0(r16)
    4fe8:	003fd506 	br	4f40 <__alt_mem_Flash_flash_data+0xf4004f40>
    4fec:	00800244 	movi	r2,9
    4ff0:	88800015 	stw	r2,0(r17)
    4ff4:	30801014 	ori	r2,r6,64
    4ff8:	8080030d 	sth	r2,12(r16)
    4ffc:	00bfffc4 	movi	r2,-1
    5000:	003fc506 	br	4f18 <__alt_mem_Flash_flash_data+0xf4004f18>

00005004 <quorem>:
    5004:	defff704 	addi	sp,sp,-36
    5008:	dc800215 	stw	r18,8(sp)
    500c:	20800417 	ldw	r2,16(r4)
    5010:	2c800417 	ldw	r18,16(r5)
    5014:	dfc00815 	stw	ra,32(sp)
    5018:	ddc00715 	stw	r23,28(sp)
    501c:	dd800615 	stw	r22,24(sp)
    5020:	dd400515 	stw	r21,20(sp)
    5024:	dd000415 	stw	r20,16(sp)
    5028:	dcc00315 	stw	r19,12(sp)
    502c:	dc400115 	stw	r17,4(sp)
    5030:	dc000015 	stw	r16,0(sp)
    5034:	14807116 	blt	r2,r18,51fc <quorem+0x1f8>
    5038:	94bfffc4 	addi	r18,r18,-1
    503c:	94ad883a 	add	r22,r18,r18
    5040:	b5ad883a 	add	r22,r22,r22
    5044:	2c400504 	addi	r17,r5,20
    5048:	8da9883a 	add	r20,r17,r22
    504c:	25400504 	addi	r21,r4,20
    5050:	282f883a 	mov	r23,r5
    5054:	adad883a 	add	r22,r21,r22
    5058:	a1400017 	ldw	r5,0(r20)
    505c:	2021883a 	mov	r16,r4
    5060:	b1000017 	ldw	r4,0(r22)
    5064:	29400044 	addi	r5,r5,1
    5068:	000dcc00 	call	dcc0 <__udivsi3>
    506c:	1027883a 	mov	r19,r2
    5070:	10002c26 	beq	r2,zero,5124 <quorem+0x120>
    5074:	a813883a 	mov	r9,r21
    5078:	8811883a 	mov	r8,r17
    507c:	0009883a 	mov	r4,zero
    5080:	000d883a 	mov	r6,zero
    5084:	41c00017 	ldw	r7,0(r8)
    5088:	49400017 	ldw	r5,0(r9)
    508c:	42000104 	addi	r8,r8,4
    5090:	38bfffcc 	andi	r2,r7,65535
    5094:	14c5383a 	mul	r2,r2,r19
    5098:	380ed43a 	srli	r7,r7,16
    509c:	28ffffcc 	andi	r3,r5,65535
    50a0:	2085883a 	add	r2,r4,r2
    50a4:	1008d43a 	srli	r4,r2,16
    50a8:	3ccf383a 	mul	r7,r7,r19
    50ac:	198d883a 	add	r6,r3,r6
    50b0:	10ffffcc 	andi	r3,r2,65535
    50b4:	30c7c83a 	sub	r3,r6,r3
    50b8:	280ad43a 	srli	r5,r5,16
    50bc:	21c9883a 	add	r4,r4,r7
    50c0:	180dd43a 	srai	r6,r3,16
    50c4:	20bfffcc 	andi	r2,r4,65535
    50c8:	288bc83a 	sub	r5,r5,r2
    50cc:	298b883a 	add	r5,r5,r6
    50d0:	280e943a 	slli	r7,r5,16
    50d4:	18ffffcc 	andi	r3,r3,65535
    50d8:	2008d43a 	srli	r4,r4,16
    50dc:	38ceb03a 	or	r7,r7,r3
    50e0:	49c00015 	stw	r7,0(r9)
    50e4:	280dd43a 	srai	r6,r5,16
    50e8:	4a400104 	addi	r9,r9,4
    50ec:	a23fe52e 	bgeu	r20,r8,5084 <__alt_mem_Flash_flash_data+0xf4005084>
    50f0:	b0800017 	ldw	r2,0(r22)
    50f4:	10000b1e 	bne	r2,zero,5124 <quorem+0x120>
    50f8:	b0bfff04 	addi	r2,r22,-4
    50fc:	a880082e 	bgeu	r21,r2,5120 <quorem+0x11c>
    5100:	b0ffff17 	ldw	r3,-4(r22)
    5104:	18000326 	beq	r3,zero,5114 <quorem+0x110>
    5108:	00000506 	br	5120 <quorem+0x11c>
    510c:	10c00017 	ldw	r3,0(r2)
    5110:	1800031e 	bne	r3,zero,5120 <quorem+0x11c>
    5114:	10bfff04 	addi	r2,r2,-4
    5118:	94bfffc4 	addi	r18,r18,-1
    511c:	a8bffb36 	bltu	r21,r2,510c <__alt_mem_Flash_flash_data+0xf400510c>
    5120:	84800415 	stw	r18,16(r16)
    5124:	8009883a 	mov	r4,r16
    5128:	b80b883a 	mov	r5,r23
    512c:	000904c0 	call	904c <__mcmp>
    5130:	10002616 	blt	r2,zero,51cc <quorem+0x1c8>
    5134:	9cc00044 	addi	r19,r19,1
    5138:	a80d883a 	mov	r6,r21
    513c:	000b883a 	mov	r5,zero
    5140:	31000017 	ldw	r4,0(r6)
    5144:	88800017 	ldw	r2,0(r17)
    5148:	31800104 	addi	r6,r6,4
    514c:	20ffffcc 	andi	r3,r4,65535
    5150:	194b883a 	add	r5,r3,r5
    5154:	10ffffcc 	andi	r3,r2,65535
    5158:	28c7c83a 	sub	r3,r5,r3
    515c:	1004d43a 	srli	r2,r2,16
    5160:	2008d43a 	srli	r4,r4,16
    5164:	180bd43a 	srai	r5,r3,16
    5168:	18ffffcc 	andi	r3,r3,65535
    516c:	2089c83a 	sub	r4,r4,r2
    5170:	2149883a 	add	r4,r4,r5
    5174:	2004943a 	slli	r2,r4,16
    5178:	8c400104 	addi	r17,r17,4
    517c:	200bd43a 	srai	r5,r4,16
    5180:	10c6b03a 	or	r3,r2,r3
    5184:	30ffff15 	stw	r3,-4(r6)
    5188:	a47fed2e 	bgeu	r20,r17,5140 <__alt_mem_Flash_flash_data+0xf4005140>
    518c:	9485883a 	add	r2,r18,r18
    5190:	1085883a 	add	r2,r2,r2
    5194:	a887883a 	add	r3,r21,r2
    5198:	18800017 	ldw	r2,0(r3)
    519c:	10000b1e 	bne	r2,zero,51cc <quorem+0x1c8>
    51a0:	18bfff04 	addi	r2,r3,-4
    51a4:	a880082e 	bgeu	r21,r2,51c8 <quorem+0x1c4>
    51a8:	18ffff17 	ldw	r3,-4(r3)
    51ac:	18000326 	beq	r3,zero,51bc <quorem+0x1b8>
    51b0:	00000506 	br	51c8 <quorem+0x1c4>
    51b4:	10c00017 	ldw	r3,0(r2)
    51b8:	1800031e 	bne	r3,zero,51c8 <quorem+0x1c4>
    51bc:	10bfff04 	addi	r2,r2,-4
    51c0:	94bfffc4 	addi	r18,r18,-1
    51c4:	a8bffb36 	bltu	r21,r2,51b4 <__alt_mem_Flash_flash_data+0xf40051b4>
    51c8:	84800415 	stw	r18,16(r16)
    51cc:	9805883a 	mov	r2,r19
    51d0:	dfc00817 	ldw	ra,32(sp)
    51d4:	ddc00717 	ldw	r23,28(sp)
    51d8:	dd800617 	ldw	r22,24(sp)
    51dc:	dd400517 	ldw	r21,20(sp)
    51e0:	dd000417 	ldw	r20,16(sp)
    51e4:	dcc00317 	ldw	r19,12(sp)
    51e8:	dc800217 	ldw	r18,8(sp)
    51ec:	dc400117 	ldw	r17,4(sp)
    51f0:	dc000017 	ldw	r16,0(sp)
    51f4:	dec00904 	addi	sp,sp,36
    51f8:	f800283a 	ret
    51fc:	0005883a 	mov	r2,zero
    5200:	003ff306 	br	51d0 <__alt_mem_Flash_flash_data+0xf40051d0>

00005204 <_dtoa_r>:
    5204:	20801017 	ldw	r2,64(r4)
    5208:	deffde04 	addi	sp,sp,-136
    520c:	dd401d15 	stw	r21,116(sp)
    5210:	dcc01b15 	stw	r19,108(sp)
    5214:	dc801a15 	stw	r18,104(sp)
    5218:	dc401915 	stw	r17,100(sp)
    521c:	dc001815 	stw	r16,96(sp)
    5220:	dfc02115 	stw	ra,132(sp)
    5224:	df002015 	stw	fp,128(sp)
    5228:	ddc01f15 	stw	r23,124(sp)
    522c:	dd801e15 	stw	r22,120(sp)
    5230:	dd001c15 	stw	r20,112(sp)
    5234:	d9c00315 	stw	r7,12(sp)
    5238:	2021883a 	mov	r16,r4
    523c:	302b883a 	mov	r21,r6
    5240:	2825883a 	mov	r18,r5
    5244:	dc402417 	ldw	r17,144(sp)
    5248:	3027883a 	mov	r19,r6
    524c:	10000826 	beq	r2,zero,5270 <_dtoa_r+0x6c>
    5250:	21801117 	ldw	r6,68(r4)
    5254:	00c00044 	movi	r3,1
    5258:	100b883a 	mov	r5,r2
    525c:	1986983a 	sll	r3,r3,r6
    5260:	11800115 	stw	r6,4(r2)
    5264:	10c00215 	stw	r3,8(r2)
    5268:	00088200 	call	8820 <_Bfree>
    526c:	80001015 	stw	zero,64(r16)
    5270:	a8002d16 	blt	r21,zero,5328 <_dtoa_r+0x124>
    5274:	88000015 	stw	zero,0(r17)
    5278:	a8dffc2c 	andhi	r3,r21,32752
    527c:	009ffc34 	movhi	r2,32752
    5280:	18801b26 	beq	r3,r2,52f0 <_dtoa_r+0xec>
    5284:	9009883a 	mov	r4,r18
    5288:	980b883a 	mov	r5,r19
    528c:	000d883a 	mov	r6,zero
    5290:	000f883a 	mov	r7,zero
    5294:	000ee380 	call	ee38 <__eqdf2>
    5298:	10002a1e 	bne	r2,zero,5344 <_dtoa_r+0x140>
    529c:	d8c02317 	ldw	r3,140(sp)
    52a0:	d9002517 	ldw	r4,148(sp)
    52a4:	00800044 	movi	r2,1
    52a8:	18800015 	stw	r2,0(r3)
    52ac:	2001a226 	beq	r4,zero,5938 <_dtoa_r+0x734>
    52b0:	008000b4 	movhi	r2,2
    52b4:	10838944 	addi	r2,r2,3621
    52b8:	20800015 	stw	r2,0(r4)
    52bc:	10bfffc4 	addi	r2,r2,-1
    52c0:	dfc02117 	ldw	ra,132(sp)
    52c4:	df002017 	ldw	fp,128(sp)
    52c8:	ddc01f17 	ldw	r23,124(sp)
    52cc:	dd801e17 	ldw	r22,120(sp)
    52d0:	dd401d17 	ldw	r21,116(sp)
    52d4:	dd001c17 	ldw	r20,112(sp)
    52d8:	dcc01b17 	ldw	r19,108(sp)
    52dc:	dc801a17 	ldw	r18,104(sp)
    52e0:	dc401917 	ldw	r17,100(sp)
    52e4:	dc001817 	ldw	r16,96(sp)
    52e8:	dec02204 	addi	sp,sp,136
    52ec:	f800283a 	ret
    52f0:	d8c02317 	ldw	r3,140(sp)
    52f4:	0089c3c4 	movi	r2,9999
    52f8:	18800015 	stw	r2,0(r3)
    52fc:	90017c26 	beq	r18,zero,58f0 <_dtoa_r+0x6ec>
    5300:	008000b4 	movhi	r2,2
    5304:	10839d04 	addi	r2,r2,3700
    5308:	d9002517 	ldw	r4,148(sp)
    530c:	203fec26 	beq	r4,zero,52c0 <__alt_mem_Flash_flash_data+0xf40052c0>
    5310:	10c000c7 	ldb	r3,3(r2)
    5314:	18017d1e 	bne	r3,zero,590c <_dtoa_r+0x708>
    5318:	10c000c4 	addi	r3,r2,3
    531c:	d9802517 	ldw	r6,148(sp)
    5320:	30c00015 	stw	r3,0(r6)
    5324:	003fe606 	br	52c0 <__alt_mem_Flash_flash_data+0xf40052c0>
    5328:	04e00034 	movhi	r19,32768
    532c:	9cffffc4 	addi	r19,r19,-1
    5330:	00800044 	movi	r2,1
    5334:	ace6703a 	and	r19,r21,r19
    5338:	88800015 	stw	r2,0(r17)
    533c:	982b883a 	mov	r21,r19
    5340:	003fcd06 	br	5278 <__alt_mem_Flash_flash_data+0xf4005278>
    5344:	d8800204 	addi	r2,sp,8
    5348:	a822d53a 	srli	r17,r21,20
    534c:	d8800015 	stw	r2,0(sp)
    5350:	8009883a 	mov	r4,r16
    5354:	900b883a 	mov	r5,r18
    5358:	980d883a 	mov	r6,r19
    535c:	d9c00104 	addi	r7,sp,4
    5360:	00093c00 	call	93c0 <__d2b>
    5364:	1039883a 	mov	fp,r2
    5368:	88016a1e 	bne	r17,zero,5914 <_dtoa_r+0x710>
    536c:	dd000217 	ldw	r20,8(sp)
    5370:	dc400117 	ldw	r17,4(sp)
    5374:	00befbc4 	movi	r2,-1041
    5378:	a463883a 	add	r17,r20,r17
    537c:	8882ea16 	blt	r17,r2,5f28 <_dtoa_r+0xd24>
    5380:	00bf0384 	movi	r2,-1010
    5384:	1445c83a 	sub	r2,r2,r17
    5388:	89010484 	addi	r4,r17,1042
    538c:	a8aa983a 	sll	r21,r21,r2
    5390:	9108d83a 	srl	r4,r18,r4
    5394:	a908b03a 	or	r4,r21,r4
    5398:	00101c80 	call	101c8 <__floatunsidf>
    539c:	017f8434 	movhi	r5,65040
    53a0:	01800044 	movi	r6,1
    53a4:	1009883a 	mov	r4,r2
    53a8:	194b883a 	add	r5,r3,r5
    53ac:	8c7fffc4 	addi	r17,r17,-1
    53b0:	d9800f15 	stw	r6,60(sp)
    53b4:	000d883a 	mov	r6,zero
    53b8:	01cffe34 	movhi	r7,16376
    53bc:	000f7a00 	call	f7a0 <__subdf3>
    53c0:	0198dbf4 	movhi	r6,25455
    53c4:	01cff4f4 	movhi	r7,16339
    53c8:	1009883a 	mov	r4,r2
    53cc:	180b883a 	mov	r5,r3
    53d0:	3190d844 	addi	r6,r6,17249
    53d4:	39e1e9c4 	addi	r7,r7,-30809
    53d8:	000f07c0 	call	f07c <__muldf3>
    53dc:	01a2d874 	movhi	r6,35681
    53e0:	01cff1f4 	movhi	r7,16327
    53e4:	180b883a 	mov	r5,r3
    53e8:	31b22cc4 	addi	r6,r6,-14157
    53ec:	39e28a04 	addi	r7,r7,-30168
    53f0:	1009883a 	mov	r4,r2
    53f4:	000dcd00 	call	dcd0 <__adddf3>
    53f8:	8809883a 	mov	r4,r17
    53fc:	102d883a 	mov	r22,r2
    5400:	182b883a 	mov	r21,r3
    5404:	00100f80 	call	100f8 <__floatsidf>
    5408:	019427f4 	movhi	r6,20639
    540c:	01cff4f4 	movhi	r7,16339
    5410:	1009883a 	mov	r4,r2
    5414:	180b883a 	mov	r5,r3
    5418:	319e7ec4 	addi	r6,r6,31227
    541c:	39d104c4 	addi	r7,r7,17427
    5420:	000f07c0 	call	f07c <__muldf3>
    5424:	b009883a 	mov	r4,r22
    5428:	a80b883a 	mov	r5,r21
    542c:	100d883a 	mov	r6,r2
    5430:	180f883a 	mov	r7,r3
    5434:	000dcd00 	call	dcd0 <__adddf3>
    5438:	1009883a 	mov	r4,r2
    543c:	180b883a 	mov	r5,r3
    5440:	102d883a 	mov	r22,r2
    5444:	182b883a 	mov	r21,r3
    5448:	00100700 	call	10070 <__fixdfsi>
    544c:	b009883a 	mov	r4,r22
    5450:	a80b883a 	mov	r5,r21
    5454:	000d883a 	mov	r6,zero
    5458:	000f883a 	mov	r7,zero
    545c:	d8800515 	stw	r2,20(sp)
    5460:	000ef9c0 	call	ef9c <__ledf2>
    5464:	10023116 	blt	r2,zero,5d2c <_dtoa_r+0xb28>
    5468:	d8c00517 	ldw	r3,20(sp)
    546c:	00800584 	movi	r2,22
    5470:	10c21f36 	bltu	r2,r3,5cf0 <_dtoa_r+0xaec>
    5474:	180490fa 	slli	r2,r3,3
    5478:	00c000b4 	movhi	r3,2
    547c:	18c3b904 	addi	r3,r3,3812
    5480:	1885883a 	add	r2,r3,r2
    5484:	11000017 	ldw	r4,0(r2)
    5488:	11400117 	ldw	r5,4(r2)
    548c:	900d883a 	mov	r6,r18
    5490:	980f883a 	mov	r7,r19
    5494:	000eebc0 	call	eebc <__gedf2>
    5498:	0082a70e 	bge	zero,r2,5f38 <_dtoa_r+0xd34>
    549c:	d9000517 	ldw	r4,20(sp)
    54a0:	d8000d15 	stw	zero,52(sp)
    54a4:	213fffc4 	addi	r4,r4,-1
    54a8:	d9000515 	stw	r4,20(sp)
    54ac:	a463c83a 	sub	r17,r20,r17
    54b0:	8dbfffc4 	addi	r22,r17,-1
    54b4:	b0021916 	blt	r22,zero,5d1c <_dtoa_r+0xb18>
    54b8:	d8000815 	stw	zero,32(sp)
    54bc:	d8800517 	ldw	r2,20(sp)
    54c0:	10020e16 	blt	r2,zero,5cfc <_dtoa_r+0xaf8>
    54c4:	b0ad883a 	add	r22,r22,r2
    54c8:	d8800a15 	stw	r2,40(sp)
    54cc:	d8000915 	stw	zero,36(sp)
    54d0:	d8c00317 	ldw	r3,12(sp)
    54d4:	00800244 	movi	r2,9
    54d8:	10c11a36 	bltu	r2,r3,5944 <_dtoa_r+0x740>
    54dc:	00800144 	movi	r2,5
    54e0:	10c4fc0e 	bge	r2,r3,68d4 <_dtoa_r+0x16d0>
    54e4:	18ffff04 	addi	r3,r3,-4
    54e8:	d8c00315 	stw	r3,12(sp)
    54ec:	0029883a 	mov	r20,zero
    54f0:	d9800317 	ldw	r6,12(sp)
    54f4:	008000c4 	movi	r2,3
    54f8:	3083bd26 	beq	r6,r2,63f0 <_dtoa_r+0x11ec>
    54fc:	1183670e 	bge	r2,r6,629c <_dtoa_r+0x1098>
    5500:	d8c00317 	ldw	r3,12(sp)
    5504:	00800104 	movi	r2,4
    5508:	1882e726 	beq	r3,r2,60a8 <_dtoa_r+0xea4>
    550c:	00800144 	movi	r2,5
    5510:	1884f21e 	bne	r3,r2,68dc <_dtoa_r+0x16d8>
    5514:	00800044 	movi	r2,1
    5518:	d8800b15 	stw	r2,44(sp)
    551c:	d8c02217 	ldw	r3,136(sp)
    5520:	d9000517 	ldw	r4,20(sp)
    5524:	1907883a 	add	r3,r3,r4
    5528:	19800044 	addi	r6,r3,1
    552c:	d8c00c15 	stw	r3,48(sp)
    5530:	d9800615 	stw	r6,24(sp)
    5534:	0183c30e 	bge	zero,r6,6444 <_dtoa_r+0x1240>
    5538:	d9800617 	ldw	r6,24(sp)
    553c:	3023883a 	mov	r17,r6
    5540:	80001115 	stw	zero,68(r16)
    5544:	008005c4 	movi	r2,23
    5548:	1184f62e 	bgeu	r2,r6,6924 <_dtoa_r+0x1720>
    554c:	00c00044 	movi	r3,1
    5550:	00800104 	movi	r2,4
    5554:	1085883a 	add	r2,r2,r2
    5558:	11000504 	addi	r4,r2,20
    555c:	180b883a 	mov	r5,r3
    5560:	18c00044 	addi	r3,r3,1
    5564:	313ffb2e 	bgeu	r6,r4,5554 <__alt_mem_Flash_flash_data+0xf4005554>
    5568:	81401115 	stw	r5,68(r16)
    556c:	8009883a 	mov	r4,r16
    5570:	00087780 	call	8778 <_Balloc>
    5574:	d8800715 	stw	r2,28(sp)
    5578:	80801015 	stw	r2,64(r16)
    557c:	00800384 	movi	r2,14
    5580:	1440fd36 	bltu	r2,r17,5978 <_dtoa_r+0x774>
    5584:	a000fc26 	beq	r20,zero,5978 <_dtoa_r+0x774>
    5588:	d8800517 	ldw	r2,20(sp)
    558c:	0083b90e 	bge	zero,r2,6474 <_dtoa_r+0x1270>
    5590:	d8c00517 	ldw	r3,20(sp)
    5594:	108003cc 	andi	r2,r2,15
    5598:	100490fa 	slli	r2,r2,3
    559c:	182fd13a 	srai	r23,r3,4
    55a0:	00c000b4 	movhi	r3,2
    55a4:	18c3b904 	addi	r3,r3,3812
    55a8:	1885883a 	add	r2,r3,r2
    55ac:	b8c0040c 	andi	r3,r23,16
    55b0:	12c00017 	ldw	r11,0(r2)
    55b4:	12800117 	ldw	r10,4(r2)
    55b8:	18039726 	beq	r3,zero,6418 <_dtoa_r+0x1214>
    55bc:	008000b4 	movhi	r2,2
    55c0:	1083af04 	addi	r2,r2,3772
    55c4:	11800817 	ldw	r6,32(r2)
    55c8:	11c00917 	ldw	r7,36(r2)
    55cc:	9009883a 	mov	r4,r18
    55d0:	980b883a 	mov	r5,r19
    55d4:	da801615 	stw	r10,88(sp)
    55d8:	dac01515 	stw	r11,84(sp)
    55dc:	000e56c0 	call	e56c <__divdf3>
    55e0:	da801617 	ldw	r10,88(sp)
    55e4:	dac01517 	ldw	r11,84(sp)
    55e8:	bdc003cc 	andi	r23,r23,15
    55ec:	044000c4 	movi	r17,3
    55f0:	d8800e15 	stw	r2,56(sp)
    55f4:	182b883a 	mov	r21,r3
    55f8:	b8001126 	beq	r23,zero,5640 <_dtoa_r+0x43c>
    55fc:	050000b4 	movhi	r20,2
    5600:	a503af04 	addi	r20,r20,3772
    5604:	5805883a 	mov	r2,r11
    5608:	5007883a 	mov	r3,r10
    560c:	b980004c 	andi	r6,r23,1
    5610:	1009883a 	mov	r4,r2
    5614:	b82fd07a 	srai	r23,r23,1
    5618:	180b883a 	mov	r5,r3
    561c:	30000426 	beq	r6,zero,5630 <_dtoa_r+0x42c>
    5620:	a1800017 	ldw	r6,0(r20)
    5624:	a1c00117 	ldw	r7,4(r20)
    5628:	8c400044 	addi	r17,r17,1
    562c:	000f07c0 	call	f07c <__muldf3>
    5630:	a5000204 	addi	r20,r20,8
    5634:	b83ff51e 	bne	r23,zero,560c <__alt_mem_Flash_flash_data+0xf400560c>
    5638:	1017883a 	mov	r11,r2
    563c:	1815883a 	mov	r10,r3
    5640:	d9000e17 	ldw	r4,56(sp)
    5644:	a80b883a 	mov	r5,r21
    5648:	580d883a 	mov	r6,r11
    564c:	500f883a 	mov	r7,r10
    5650:	000e56c0 	call	e56c <__divdf3>
    5654:	1029883a 	mov	r20,r2
    5658:	182b883a 	mov	r21,r3
    565c:	d9800d17 	ldw	r6,52(sp)
    5660:	30000626 	beq	r6,zero,567c <_dtoa_r+0x478>
    5664:	a009883a 	mov	r4,r20
    5668:	a80b883a 	mov	r5,r21
    566c:	000d883a 	mov	r6,zero
    5670:	01cffc34 	movhi	r7,16368
    5674:	000ef9c0 	call	ef9c <__ledf2>
    5678:	10043216 	blt	r2,zero,6744 <_dtoa_r+0x1540>
    567c:	8809883a 	mov	r4,r17
    5680:	00100f80 	call	100f8 <__floatsidf>
    5684:	1009883a 	mov	r4,r2
    5688:	180b883a 	mov	r5,r3
    568c:	a00d883a 	mov	r6,r20
    5690:	a80f883a 	mov	r7,r21
    5694:	000f07c0 	call	f07c <__muldf3>
    5698:	000d883a 	mov	r6,zero
    569c:	1009883a 	mov	r4,r2
    56a0:	180b883a 	mov	r5,r3
    56a4:	01d00734 	movhi	r7,16412
    56a8:	000dcd00 	call	dcd0 <__adddf3>
    56ac:	1023883a 	mov	r17,r2
    56b0:	d9800617 	ldw	r6,24(sp)
    56b4:	00bf3034 	movhi	r2,64704
    56b8:	1885883a 	add	r2,r3,r2
    56bc:	d8800e15 	stw	r2,56(sp)
    56c0:	30032e26 	beq	r6,zero,637c <_dtoa_r+0x1178>
    56c4:	d8c00517 	ldw	r3,20(sp)
    56c8:	da800617 	ldw	r10,24(sp)
    56cc:	d8c01215 	stw	r3,72(sp)
    56d0:	d9000b17 	ldw	r4,44(sp)
    56d4:	2003b026 	beq	r4,zero,6598 <_dtoa_r+0x1394>
    56d8:	50bfffc4 	addi	r2,r10,-1
    56dc:	100490fa 	slli	r2,r2,3
    56e0:	00c000b4 	movhi	r3,2
    56e4:	18c3b904 	addi	r3,r3,3812
    56e8:	1885883a 	add	r2,r3,r2
    56ec:	11800017 	ldw	r6,0(r2)
    56f0:	11c00117 	ldw	r7,4(r2)
    56f4:	d8800717 	ldw	r2,28(sp)
    56f8:	0009883a 	mov	r4,zero
    56fc:	014ff834 	movhi	r5,16352
    5700:	da801615 	stw	r10,88(sp)
    5704:	15c00044 	addi	r23,r2,1
    5708:	000e56c0 	call	e56c <__divdf3>
    570c:	d9c00e17 	ldw	r7,56(sp)
    5710:	880d883a 	mov	r6,r17
    5714:	1009883a 	mov	r4,r2
    5718:	180b883a 	mov	r5,r3
    571c:	000f7a00 	call	f7a0 <__subdf3>
    5720:	a80b883a 	mov	r5,r21
    5724:	a009883a 	mov	r4,r20
    5728:	d8c01015 	stw	r3,64(sp)
    572c:	d8800e15 	stw	r2,56(sp)
    5730:	00100700 	call	10070 <__fixdfsi>
    5734:	1009883a 	mov	r4,r2
    5738:	d8801715 	stw	r2,92(sp)
    573c:	00100f80 	call	100f8 <__floatsidf>
    5740:	a009883a 	mov	r4,r20
    5744:	a80b883a 	mov	r5,r21
    5748:	100d883a 	mov	r6,r2
    574c:	180f883a 	mov	r7,r3
    5750:	000f7a00 	call	f7a0 <__subdf3>
    5754:	da001717 	ldw	r8,92(sp)
    5758:	1829883a 	mov	r20,r3
    575c:	d8c00717 	ldw	r3,28(sp)
    5760:	d9000e17 	ldw	r4,56(sp)
    5764:	d9401017 	ldw	r5,64(sp)
    5768:	42000c04 	addi	r8,r8,48
    576c:	1023883a 	mov	r17,r2
    5770:	1a000005 	stb	r8,0(r3)
    5774:	880d883a 	mov	r6,r17
    5778:	a00f883a 	mov	r7,r20
    577c:	402b883a 	mov	r21,r8
    5780:	000eebc0 	call	eebc <__gedf2>
    5784:	00844516 	blt	zero,r2,689c <_dtoa_r+0x1698>
    5788:	0009883a 	mov	r4,zero
    578c:	014ffc34 	movhi	r5,16368
    5790:	880d883a 	mov	r6,r17
    5794:	a00f883a 	mov	r7,r20
    5798:	000f7a00 	call	f7a0 <__subdf3>
    579c:	d9000e17 	ldw	r4,56(sp)
    57a0:	d9401017 	ldw	r5,64(sp)
    57a4:	100d883a 	mov	r6,r2
    57a8:	180f883a 	mov	r7,r3
    57ac:	000eebc0 	call	eebc <__gedf2>
    57b0:	da801617 	ldw	r10,88(sp)
    57b4:	00843616 	blt	zero,r2,6890 <_dtoa_r+0x168c>
    57b8:	00800044 	movi	r2,1
    57bc:	12806e0e 	bge	r2,r10,5978 <_dtoa_r+0x774>
    57c0:	d9000717 	ldw	r4,28(sp)
    57c4:	dd801315 	stw	r22,76(sp)
    57c8:	dc001115 	stw	r16,68(sp)
    57cc:	2295883a 	add	r10,r4,r10
    57d0:	dcc01415 	stw	r19,80(sp)
    57d4:	502d883a 	mov	r22,r10
    57d8:	dcc01017 	ldw	r19,64(sp)
    57dc:	b821883a 	mov	r16,r23
    57e0:	dc801015 	stw	r18,64(sp)
    57e4:	dc800e17 	ldw	r18,56(sp)
    57e8:	00000906 	br	5810 <_dtoa_r+0x60c>
    57ec:	000f7a00 	call	f7a0 <__subdf3>
    57f0:	1009883a 	mov	r4,r2
    57f4:	180b883a 	mov	r5,r3
    57f8:	900d883a 	mov	r6,r18
    57fc:	980f883a 	mov	r7,r19
    5800:	000ef9c0 	call	ef9c <__ledf2>
    5804:	10040e16 	blt	r2,zero,6840 <_dtoa_r+0x163c>
    5808:	b821883a 	mov	r16,r23
    580c:	bd841026 	beq	r23,r22,6850 <_dtoa_r+0x164c>
    5810:	9009883a 	mov	r4,r18
    5814:	980b883a 	mov	r5,r19
    5818:	000d883a 	mov	r6,zero
    581c:	01d00934 	movhi	r7,16420
    5820:	000f07c0 	call	f07c <__muldf3>
    5824:	000d883a 	mov	r6,zero
    5828:	01d00934 	movhi	r7,16420
    582c:	8809883a 	mov	r4,r17
    5830:	a00b883a 	mov	r5,r20
    5834:	1025883a 	mov	r18,r2
    5838:	1827883a 	mov	r19,r3
    583c:	000f07c0 	call	f07c <__muldf3>
    5840:	180b883a 	mov	r5,r3
    5844:	1009883a 	mov	r4,r2
    5848:	1823883a 	mov	r17,r3
    584c:	1029883a 	mov	r20,r2
    5850:	00100700 	call	10070 <__fixdfsi>
    5854:	1009883a 	mov	r4,r2
    5858:	102b883a 	mov	r21,r2
    585c:	00100f80 	call	100f8 <__floatsidf>
    5860:	a009883a 	mov	r4,r20
    5864:	880b883a 	mov	r5,r17
    5868:	100d883a 	mov	r6,r2
    586c:	180f883a 	mov	r7,r3
    5870:	000f7a00 	call	f7a0 <__subdf3>
    5874:	ad400c04 	addi	r21,r21,48
    5878:	1009883a 	mov	r4,r2
    587c:	180b883a 	mov	r5,r3
    5880:	900d883a 	mov	r6,r18
    5884:	980f883a 	mov	r7,r19
    5888:	85400005 	stb	r21,0(r16)
    588c:	1023883a 	mov	r17,r2
    5890:	1829883a 	mov	r20,r3
    5894:	000ef9c0 	call	ef9c <__ledf2>
    5898:	bdc00044 	addi	r23,r23,1
    589c:	0009883a 	mov	r4,zero
    58a0:	014ffc34 	movhi	r5,16368
    58a4:	880d883a 	mov	r6,r17
    58a8:	a00f883a 	mov	r7,r20
    58ac:	103fcf0e 	bge	r2,zero,57ec <__alt_mem_Flash_flash_data+0xf40057ec>
    58b0:	d9801217 	ldw	r6,72(sp)
    58b4:	dc001117 	ldw	r16,68(sp)
    58b8:	d9800515 	stw	r6,20(sp)
    58bc:	8009883a 	mov	r4,r16
    58c0:	e00b883a 	mov	r5,fp
    58c4:	00088200 	call	8820 <_Bfree>
    58c8:	d8c00517 	ldw	r3,20(sp)
    58cc:	d9002317 	ldw	r4,140(sp)
    58d0:	d9802517 	ldw	r6,148(sp)
    58d4:	b8000005 	stb	zero,0(r23)
    58d8:	18800044 	addi	r2,r3,1
    58dc:	20800015 	stw	r2,0(r4)
    58e0:	30027226 	beq	r6,zero,62ac <_dtoa_r+0x10a8>
    58e4:	35c00015 	stw	r23,0(r6)
    58e8:	d8800717 	ldw	r2,28(sp)
    58ec:	003e7406 	br	52c0 <__alt_mem_Flash_flash_data+0xf40052c0>
    58f0:	00800434 	movhi	r2,16
    58f4:	10bfffc4 	addi	r2,r2,-1
    58f8:	a8aa703a 	and	r21,r21,r2
    58fc:	a83e801e 	bne	r21,zero,5300 <__alt_mem_Flash_flash_data+0xf4005300>
    5900:	008000b4 	movhi	r2,2
    5904:	10839a04 	addi	r2,r2,3688
    5908:	003e7f06 	br	5308 <__alt_mem_Flash_flash_data+0xf4005308>
    590c:	10c00204 	addi	r3,r2,8
    5910:	003e8206 	br	531c <__alt_mem_Flash_flash_data+0xf400531c>
    5914:	01400434 	movhi	r5,16
    5918:	297fffc4 	addi	r5,r5,-1
    591c:	994a703a 	and	r5,r19,r5
    5920:	9009883a 	mov	r4,r18
    5924:	8c7f0044 	addi	r17,r17,-1023
    5928:	294ffc34 	orhi	r5,r5,16368
    592c:	dd000217 	ldw	r20,8(sp)
    5930:	d8000f15 	stw	zero,60(sp)
    5934:	003e9f06 	br	53b4 <__alt_mem_Flash_flash_data+0xf40053b4>
    5938:	008000b4 	movhi	r2,2
    593c:	10838904 	addi	r2,r2,3620
    5940:	003e5f06 	br	52c0 <__alt_mem_Flash_flash_data+0xf40052c0>
    5944:	80001115 	stw	zero,68(r16)
    5948:	8009883a 	mov	r4,r16
    594c:	000b883a 	mov	r5,zero
    5950:	00087780 	call	8778 <_Balloc>
    5954:	01bfffc4 	movi	r6,-1
    5958:	d8800715 	stw	r2,28(sp)
    595c:	80801015 	stw	r2,64(r16)
    5960:	00800044 	movi	r2,1
    5964:	d9800c15 	stw	r6,48(sp)
    5968:	d8800b15 	stw	r2,44(sp)
    596c:	d9800615 	stw	r6,24(sp)
    5970:	d8002215 	stw	zero,136(sp)
    5974:	d8000315 	stw	zero,12(sp)
    5978:	d8800117 	ldw	r2,4(sp)
    597c:	10008e16 	blt	r2,zero,5bb8 <_dtoa_r+0x9b4>
    5980:	d9000517 	ldw	r4,20(sp)
    5984:	00c00384 	movi	r3,14
    5988:	19008b16 	blt	r3,r4,5bb8 <_dtoa_r+0x9b4>
    598c:	200490fa 	slli	r2,r4,3
    5990:	00c000b4 	movhi	r3,2
    5994:	d9802217 	ldw	r6,136(sp)
    5998:	18c3b904 	addi	r3,r3,3812
    599c:	1885883a 	add	r2,r3,r2
    59a0:	14400017 	ldw	r17,0(r2)
    59a4:	15000117 	ldw	r20,4(r2)
    59a8:	3001c716 	blt	r6,zero,60c8 <_dtoa_r+0xec4>
    59ac:	880d883a 	mov	r6,r17
    59b0:	a00f883a 	mov	r7,r20
    59b4:	9009883a 	mov	r4,r18
    59b8:	980b883a 	mov	r5,r19
    59bc:	000e56c0 	call	e56c <__divdf3>
    59c0:	180b883a 	mov	r5,r3
    59c4:	1009883a 	mov	r4,r2
    59c8:	00100700 	call	10070 <__fixdfsi>
    59cc:	1009883a 	mov	r4,r2
    59d0:	102d883a 	mov	r22,r2
    59d4:	00100f80 	call	100f8 <__floatsidf>
    59d8:	1009883a 	mov	r4,r2
    59dc:	180b883a 	mov	r5,r3
    59e0:	880d883a 	mov	r6,r17
    59e4:	a00f883a 	mov	r7,r20
    59e8:	000f07c0 	call	f07c <__muldf3>
    59ec:	9009883a 	mov	r4,r18
    59f0:	980b883a 	mov	r5,r19
    59f4:	100d883a 	mov	r6,r2
    59f8:	180f883a 	mov	r7,r3
    59fc:	000f7a00 	call	f7a0 <__subdf3>
    5a00:	d9000717 	ldw	r4,28(sp)
    5a04:	d9800617 	ldw	r6,24(sp)
    5a08:	180b883a 	mov	r5,r3
    5a0c:	b0c00c04 	addi	r3,r22,48
    5a10:	20c00005 	stb	r3,0(r4)
    5a14:	25c00044 	addi	r23,r4,1
    5a18:	01000044 	movi	r4,1
    5a1c:	1011883a 	mov	r8,r2
    5a20:	2807883a 	mov	r3,r5
    5a24:	31003d26 	beq	r6,r4,5b1c <_dtoa_r+0x918>
    5a28:	000d883a 	mov	r6,zero
    5a2c:	01d00934 	movhi	r7,16420
    5a30:	1009883a 	mov	r4,r2
    5a34:	000f07c0 	call	f07c <__muldf3>
    5a38:	1009883a 	mov	r4,r2
    5a3c:	180b883a 	mov	r5,r3
    5a40:	000d883a 	mov	r6,zero
    5a44:	000f883a 	mov	r7,zero
    5a48:	1027883a 	mov	r19,r2
    5a4c:	182b883a 	mov	r21,r3
    5a50:	000ee380 	call	ee38 <__eqdf2>
    5a54:	103f9926 	beq	r2,zero,58bc <__alt_mem_Flash_flash_data+0xf40058bc>
    5a58:	d8c00617 	ldw	r3,24(sp)
    5a5c:	d9000717 	ldw	r4,28(sp)
    5a60:	b825883a 	mov	r18,r23
    5a64:	18bfffc4 	addi	r2,r3,-1
    5a68:	20ad883a 	add	r22,r4,r2
    5a6c:	dc000315 	stw	r16,12(sp)
    5a70:	00000a06 	br	5a9c <_dtoa_r+0x898>
    5a74:	000f07c0 	call	f07c <__muldf3>
    5a78:	1009883a 	mov	r4,r2
    5a7c:	180b883a 	mov	r5,r3
    5a80:	000d883a 	mov	r6,zero
    5a84:	000f883a 	mov	r7,zero
    5a88:	1027883a 	mov	r19,r2
    5a8c:	182b883a 	mov	r21,r3
    5a90:	b825883a 	mov	r18,r23
    5a94:	000ee380 	call	ee38 <__eqdf2>
    5a98:	10022626 	beq	r2,zero,6334 <_dtoa_r+0x1130>
    5a9c:	880d883a 	mov	r6,r17
    5aa0:	a00f883a 	mov	r7,r20
    5aa4:	9809883a 	mov	r4,r19
    5aa8:	a80b883a 	mov	r5,r21
    5aac:	000e56c0 	call	e56c <__divdf3>
    5ab0:	180b883a 	mov	r5,r3
    5ab4:	1009883a 	mov	r4,r2
    5ab8:	00100700 	call	10070 <__fixdfsi>
    5abc:	1009883a 	mov	r4,r2
    5ac0:	1021883a 	mov	r16,r2
    5ac4:	00100f80 	call	100f8 <__floatsidf>
    5ac8:	1009883a 	mov	r4,r2
    5acc:	180b883a 	mov	r5,r3
    5ad0:	880d883a 	mov	r6,r17
    5ad4:	a00f883a 	mov	r7,r20
    5ad8:	000f07c0 	call	f07c <__muldf3>
    5adc:	9809883a 	mov	r4,r19
    5ae0:	a80b883a 	mov	r5,r21
    5ae4:	100d883a 	mov	r6,r2
    5ae8:	180f883a 	mov	r7,r3
    5aec:	000f7a00 	call	f7a0 <__subdf3>
    5af0:	82000c04 	addi	r8,r16,48
    5af4:	92000005 	stb	r8,0(r18)
    5af8:	1009883a 	mov	r4,r2
    5afc:	180b883a 	mov	r5,r3
    5b00:	000d883a 	mov	r6,zero
    5b04:	01d00934 	movhi	r7,16420
    5b08:	1011883a 	mov	r8,r2
    5b0c:	bdc00044 	addi	r23,r23,1
    5b10:	95bfd81e 	bne	r18,r22,5a74 <__alt_mem_Flash_flash_data+0xf4005a74>
    5b14:	802d883a 	mov	r22,r16
    5b18:	dc000317 	ldw	r16,12(sp)
    5b1c:	4009883a 	mov	r4,r8
    5b20:	180b883a 	mov	r5,r3
    5b24:	400d883a 	mov	r6,r8
    5b28:	180f883a 	mov	r7,r3
    5b2c:	000dcd00 	call	dcd0 <__adddf3>
    5b30:	8809883a 	mov	r4,r17
    5b34:	a00b883a 	mov	r5,r20
    5b38:	100d883a 	mov	r6,r2
    5b3c:	180f883a 	mov	r7,r3
    5b40:	1027883a 	mov	r19,r2
    5b44:	1825883a 	mov	r18,r3
    5b48:	000ef9c0 	call	ef9c <__ledf2>
    5b4c:	10000816 	blt	r2,zero,5b70 <_dtoa_r+0x96c>
    5b50:	8809883a 	mov	r4,r17
    5b54:	a00b883a 	mov	r5,r20
    5b58:	980d883a 	mov	r6,r19
    5b5c:	900f883a 	mov	r7,r18
    5b60:	000ee380 	call	ee38 <__eqdf2>
    5b64:	103f551e 	bne	r2,zero,58bc <__alt_mem_Flash_flash_data+0xf40058bc>
    5b68:	b580004c 	andi	r22,r22,1
    5b6c:	b03f5326 	beq	r22,zero,58bc <__alt_mem_Flash_flash_data+0xf40058bc>
    5b70:	bd7fffc3 	ldbu	r21,-1(r23)
    5b74:	b8bfffc4 	addi	r2,r23,-1
    5b78:	1007883a 	mov	r3,r2
    5b7c:	01400e44 	movi	r5,57
    5b80:	d9800717 	ldw	r6,28(sp)
    5b84:	00000506 	br	5b9c <_dtoa_r+0x998>
    5b88:	18ffffc4 	addi	r3,r3,-1
    5b8c:	30825e26 	beq	r6,r2,6508 <_dtoa_r+0x1304>
    5b90:	1d400003 	ldbu	r21,0(r3)
    5b94:	102f883a 	mov	r23,r2
    5b98:	10bfffc4 	addi	r2,r2,-1
    5b9c:	a9003fcc 	andi	r4,r21,255
    5ba0:	2100201c 	xori	r4,r4,128
    5ba4:	213fe004 	addi	r4,r4,-128
    5ba8:	217ff726 	beq	r4,r5,5b88 <__alt_mem_Flash_flash_data+0xf4005b88>
    5bac:	aa000044 	addi	r8,r21,1
    5bb0:	12000005 	stb	r8,0(r2)
    5bb4:	003f4106 	br	58bc <__alt_mem_Flash_flash_data+0xf40058bc>
    5bb8:	d8c00b17 	ldw	r3,44(sp)
    5bbc:	18006726 	beq	r3,zero,5d5c <_dtoa_r+0xb58>
    5bc0:	d9000317 	ldw	r4,12(sp)
    5bc4:	00c00044 	movi	r3,1
    5bc8:	19016a0e 	bge	r3,r4,6174 <_dtoa_r+0xf70>
    5bcc:	d8800617 	ldw	r2,24(sp)
    5bd0:	d8c00917 	ldw	r3,36(sp)
    5bd4:	157fffc4 	addi	r21,r2,-1
    5bd8:	1d420716 	blt	r3,r21,63f8 <_dtoa_r+0x11f4>
    5bdc:	1d6bc83a 	sub	r21,r3,r21
    5be0:	d8800617 	ldw	r2,24(sp)
    5be4:	1002c716 	blt	r2,zero,6704 <_dtoa_r+0x1500>
    5be8:	dd000817 	ldw	r20,32(sp)
    5bec:	d8800617 	ldw	r2,24(sp)
    5bf0:	d9800817 	ldw	r6,32(sp)
    5bf4:	8009883a 	mov	r4,r16
    5bf8:	01400044 	movi	r5,1
    5bfc:	308d883a 	add	r6,r6,r2
    5c00:	d9800815 	stw	r6,32(sp)
    5c04:	b0ad883a 	add	r22,r22,r2
    5c08:	0008b840 	call	8b84 <__i2b>
    5c0c:	1023883a 	mov	r17,r2
    5c10:	a0000826 	beq	r20,zero,5c34 <_dtoa_r+0xa30>
    5c14:	0580070e 	bge	zero,r22,5c34 <_dtoa_r+0xa30>
    5c18:	b005883a 	mov	r2,r22
    5c1c:	a5812016 	blt	r20,r22,60a0 <_dtoa_r+0xe9c>
    5c20:	d8c00817 	ldw	r3,32(sp)
    5c24:	a0a9c83a 	sub	r20,r20,r2
    5c28:	b0adc83a 	sub	r22,r22,r2
    5c2c:	1887c83a 	sub	r3,r3,r2
    5c30:	d8c00815 	stw	r3,32(sp)
    5c34:	d9000917 	ldw	r4,36(sp)
    5c38:	0100140e 	bge	zero,r4,5c8c <_dtoa_r+0xa88>
    5c3c:	d9800b17 	ldw	r6,44(sp)
    5c40:	3001e526 	beq	r6,zero,63d8 <_dtoa_r+0x11d4>
    5c44:	05400e0e 	bge	zero,r21,5c80 <_dtoa_r+0xa7c>
    5c48:	880b883a 	mov	r5,r17
    5c4c:	8009883a 	mov	r4,r16
    5c50:	a80d883a 	mov	r6,r21
    5c54:	0008dbc0 	call	8dbc <__pow5mult>
    5c58:	e00d883a 	mov	r6,fp
    5c5c:	8009883a 	mov	r4,r16
    5c60:	100b883a 	mov	r5,r2
    5c64:	1023883a 	mov	r17,r2
    5c68:	0008bc00 	call	8bc0 <__multiply>
    5c6c:	102f883a 	mov	r23,r2
    5c70:	e00b883a 	mov	r5,fp
    5c74:	8009883a 	mov	r4,r16
    5c78:	00088200 	call	8820 <_Bfree>
    5c7c:	b839883a 	mov	fp,r23
    5c80:	d8800917 	ldw	r2,36(sp)
    5c84:	154dc83a 	sub	r6,r2,r21
    5c88:	3001281e 	bne	r6,zero,612c <_dtoa_r+0xf28>
    5c8c:	05c00044 	movi	r23,1
    5c90:	8009883a 	mov	r4,r16
    5c94:	b80b883a 	mov	r5,r23
    5c98:	0008b840 	call	8b84 <__i2b>
    5c9c:	d8c00a17 	ldw	r3,40(sp)
    5ca0:	102b883a 	mov	r21,r2
    5ca4:	00c0310e 	bge	zero,r3,5d6c <_dtoa_r+0xb68>
    5ca8:	8009883a 	mov	r4,r16
    5cac:	100b883a 	mov	r5,r2
    5cb0:	180d883a 	mov	r6,r3
    5cb4:	0008dbc0 	call	8dbc <__pow5mult>
    5cb8:	d9000317 	ldw	r4,12(sp)
    5cbc:	102b883a 	mov	r21,r2
    5cc0:	b9011f0e 	bge	r23,r4,6140 <_dtoa_r+0xf3c>
    5cc4:	0027883a 	mov	r19,zero
    5cc8:	a8800417 	ldw	r2,16(r21)
    5ccc:	10800104 	addi	r2,r2,4
    5cd0:	1085883a 	add	r2,r2,r2
    5cd4:	1085883a 	add	r2,r2,r2
    5cd8:	a885883a 	add	r2,r21,r2
    5cdc:	11000017 	ldw	r4,0(r2)
    5ce0:	0008a6c0 	call	8a6c <__hi0bits>
    5ce4:	00c00804 	movi	r3,32
    5ce8:	1885c83a 	sub	r2,r3,r2
    5cec:	00002506 	br	5d84 <_dtoa_r+0xb80>
    5cf0:	01800044 	movi	r6,1
    5cf4:	d9800d15 	stw	r6,52(sp)
    5cf8:	003dec06 	br	54ac <__alt_mem_Flash_flash_data+0xf40054ac>
    5cfc:	d8c00817 	ldw	r3,32(sp)
    5d00:	d9000517 	ldw	r4,20(sp)
    5d04:	d8000a15 	stw	zero,40(sp)
    5d08:	1907c83a 	sub	r3,r3,r4
    5d0c:	010dc83a 	sub	r6,zero,r4
    5d10:	d8c00815 	stw	r3,32(sp)
    5d14:	d9800915 	stw	r6,36(sp)
    5d18:	003ded06 	br	54d0 <__alt_mem_Flash_flash_data+0xf40054d0>
    5d1c:	05adc83a 	sub	r22,zero,r22
    5d20:	dd800815 	stw	r22,32(sp)
    5d24:	002d883a 	mov	r22,zero
    5d28:	003de406 	br	54bc <__alt_mem_Flash_flash_data+0xf40054bc>
    5d2c:	d9000517 	ldw	r4,20(sp)
    5d30:	00100f80 	call	100f8 <__floatsidf>
    5d34:	1009883a 	mov	r4,r2
    5d38:	180b883a 	mov	r5,r3
    5d3c:	b00d883a 	mov	r6,r22
    5d40:	a80f883a 	mov	r7,r21
    5d44:	000ee380 	call	ee38 <__eqdf2>
    5d48:	103dc726 	beq	r2,zero,5468 <__alt_mem_Flash_flash_data+0xf4005468>
    5d4c:	d8800517 	ldw	r2,20(sp)
    5d50:	10bfffc4 	addi	r2,r2,-1
    5d54:	d8800515 	stw	r2,20(sp)
    5d58:	003dc306 	br	5468 <__alt_mem_Flash_flash_data+0xf4005468>
    5d5c:	dd400917 	ldw	r21,36(sp)
    5d60:	dd000817 	ldw	r20,32(sp)
    5d64:	0023883a 	mov	r17,zero
    5d68:	003fa906 	br	5c10 <__alt_mem_Flash_flash_data+0xf4005c10>
    5d6c:	d9800317 	ldw	r6,12(sp)
    5d70:	b981670e 	bge	r23,r6,6310 <_dtoa_r+0x110c>
    5d74:	0027883a 	mov	r19,zero
    5d78:	d8c00a17 	ldw	r3,40(sp)
    5d7c:	183fd21e 	bne	r3,zero,5cc8 <__alt_mem_Flash_flash_data+0xf4005cc8>
    5d80:	00800044 	movi	r2,1
    5d84:	1585883a 	add	r2,r2,r22
    5d88:	108007cc 	andi	r2,r2,31
    5d8c:	10005f26 	beq	r2,zero,5f0c <_dtoa_r+0xd08>
    5d90:	00c00804 	movi	r3,32
    5d94:	1887c83a 	sub	r3,r3,r2
    5d98:	01000104 	movi	r4,4
    5d9c:	20c2dd0e 	bge	r4,r3,6914 <_dtoa_r+0x1710>
    5da0:	d9000817 	ldw	r4,32(sp)
    5da4:	00c00704 	movi	r3,28
    5da8:	1885c83a 	sub	r2,r3,r2
    5dac:	2089883a 	add	r4,r4,r2
    5db0:	d9000815 	stw	r4,32(sp)
    5db4:	a0a9883a 	add	r20,r20,r2
    5db8:	b0ad883a 	add	r22,r22,r2
    5dbc:	d8800817 	ldw	r2,32(sp)
    5dc0:	0080050e 	bge	zero,r2,5dd8 <_dtoa_r+0xbd4>
    5dc4:	e00b883a 	mov	r5,fp
    5dc8:	8009883a 	mov	r4,r16
    5dcc:	100d883a 	mov	r6,r2
    5dd0:	0008efc0 	call	8efc <__lshift>
    5dd4:	1039883a 	mov	fp,r2
    5dd8:	0580050e 	bge	zero,r22,5df0 <_dtoa_r+0xbec>
    5ddc:	a80b883a 	mov	r5,r21
    5de0:	8009883a 	mov	r4,r16
    5de4:	b00d883a 	mov	r6,r22
    5de8:	0008efc0 	call	8efc <__lshift>
    5dec:	102b883a 	mov	r21,r2
    5df0:	d8c00d17 	ldw	r3,52(sp)
    5df4:	1801161e 	bne	r3,zero,6250 <_dtoa_r+0x104c>
    5df8:	d8c00617 	ldw	r3,24(sp)
    5dfc:	00c12d0e 	bge	zero,r3,62b4 <_dtoa_r+0x10b0>
    5e00:	d8c00b17 	ldw	r3,44(sp)
    5e04:	1800571e 	bne	r3,zero,5f64 <_dtoa_r+0xd60>
    5e08:	dc800717 	ldw	r18,28(sp)
    5e0c:	dcc00617 	ldw	r19,24(sp)
    5e10:	9029883a 	mov	r20,r18
    5e14:	00000206 	br	5e20 <_dtoa_r+0xc1c>
    5e18:	00088480 	call	8848 <__multadd>
    5e1c:	1039883a 	mov	fp,r2
    5e20:	e009883a 	mov	r4,fp
    5e24:	a80b883a 	mov	r5,r21
    5e28:	00050040 	call	5004 <quorem>
    5e2c:	10800c04 	addi	r2,r2,48
    5e30:	90800005 	stb	r2,0(r18)
    5e34:	94800044 	addi	r18,r18,1
    5e38:	9507c83a 	sub	r3,r18,r20
    5e3c:	8009883a 	mov	r4,r16
    5e40:	e00b883a 	mov	r5,fp
    5e44:	01800284 	movi	r6,10
    5e48:	000f883a 	mov	r7,zero
    5e4c:	1cfff216 	blt	r3,r19,5e18 <__alt_mem_Flash_flash_data+0xf4005e18>
    5e50:	1011883a 	mov	r8,r2
    5e54:	d8800617 	ldw	r2,24(sp)
    5e58:	00822e0e 	bge	zero,r2,6714 <_dtoa_r+0x1510>
    5e5c:	d9000717 	ldw	r4,28(sp)
    5e60:	0025883a 	mov	r18,zero
    5e64:	20af883a 	add	r23,r4,r2
    5e68:	e00b883a 	mov	r5,fp
    5e6c:	01800044 	movi	r6,1
    5e70:	8009883a 	mov	r4,r16
    5e74:	da001715 	stw	r8,92(sp)
    5e78:	0008efc0 	call	8efc <__lshift>
    5e7c:	1009883a 	mov	r4,r2
    5e80:	a80b883a 	mov	r5,r21
    5e84:	1039883a 	mov	fp,r2
    5e88:	000904c0 	call	904c <__mcmp>
    5e8c:	da001717 	ldw	r8,92(sp)
    5e90:	00816e0e 	bge	zero,r2,644c <_dtoa_r+0x1248>
    5e94:	b93fffc3 	ldbu	r4,-1(r23)
    5e98:	b8bfffc4 	addi	r2,r23,-1
    5e9c:	1007883a 	mov	r3,r2
    5ea0:	01800e44 	movi	r6,57
    5ea4:	d9c00717 	ldw	r7,28(sp)
    5ea8:	00000506 	br	5ec0 <_dtoa_r+0xcbc>
    5eac:	18ffffc4 	addi	r3,r3,-1
    5eb0:	38811926 	beq	r7,r2,6318 <_dtoa_r+0x1114>
    5eb4:	19000003 	ldbu	r4,0(r3)
    5eb8:	102f883a 	mov	r23,r2
    5ebc:	10bfffc4 	addi	r2,r2,-1
    5ec0:	21403fcc 	andi	r5,r4,255
    5ec4:	2940201c 	xori	r5,r5,128
    5ec8:	297fe004 	addi	r5,r5,-128
    5ecc:	29bff726 	beq	r5,r6,5eac <__alt_mem_Flash_flash_data+0xf4005eac>
    5ed0:	21000044 	addi	r4,r4,1
    5ed4:	11000005 	stb	r4,0(r2)
    5ed8:	8009883a 	mov	r4,r16
    5edc:	a80b883a 	mov	r5,r21
    5ee0:	00088200 	call	8820 <_Bfree>
    5ee4:	883e7526 	beq	r17,zero,58bc <__alt_mem_Flash_flash_data+0xf40058bc>
    5ee8:	90000426 	beq	r18,zero,5efc <_dtoa_r+0xcf8>
    5eec:	94400326 	beq	r18,r17,5efc <_dtoa_r+0xcf8>
    5ef0:	8009883a 	mov	r4,r16
    5ef4:	900b883a 	mov	r5,r18
    5ef8:	00088200 	call	8820 <_Bfree>
    5efc:	8009883a 	mov	r4,r16
    5f00:	880b883a 	mov	r5,r17
    5f04:	00088200 	call	8820 <_Bfree>
    5f08:	003e6c06 	br	58bc <__alt_mem_Flash_flash_data+0xf40058bc>
    5f0c:	00800704 	movi	r2,28
    5f10:	d9800817 	ldw	r6,32(sp)
    5f14:	a0a9883a 	add	r20,r20,r2
    5f18:	b0ad883a 	add	r22,r22,r2
    5f1c:	308d883a 	add	r6,r6,r2
    5f20:	d9800815 	stw	r6,32(sp)
    5f24:	003fa506 	br	5dbc <__alt_mem_Flash_flash_data+0xf4005dbc>
    5f28:	013efb84 	movi	r4,-1042
    5f2c:	246bc83a 	sub	r21,r4,r17
    5f30:	9548983a 	sll	r4,r18,r21
    5f34:	003d1806 	br	5398 <__alt_mem_Flash_flash_data+0xf4005398>
    5f38:	d8000d15 	stw	zero,52(sp)
    5f3c:	003d5b06 	br	54ac <__alt_mem_Flash_flash_data+0xf40054ac>
    5f40:	880b883a 	mov	r5,r17
    5f44:	8009883a 	mov	r4,r16
    5f48:	01800284 	movi	r6,10
    5f4c:	000f883a 	mov	r7,zero
    5f50:	00088480 	call	8848 <__multadd>
    5f54:	1023883a 	mov	r17,r2
    5f58:	d8800c17 	ldw	r2,48(sp)
    5f5c:	0082550e 	bge	zero,r2,68b4 <_dtoa_r+0x16b0>
    5f60:	d8800615 	stw	r2,24(sp)
    5f64:	0500050e 	bge	zero,r20,5f7c <_dtoa_r+0xd78>
    5f68:	880b883a 	mov	r5,r17
    5f6c:	8009883a 	mov	r4,r16
    5f70:	a00d883a 	mov	r6,r20
    5f74:	0008efc0 	call	8efc <__lshift>
    5f78:	1023883a 	mov	r17,r2
    5f7c:	98016a1e 	bne	r19,zero,6528 <_dtoa_r+0x1324>
    5f80:	8829883a 	mov	r20,r17
    5f84:	d9000617 	ldw	r4,24(sp)
    5f88:	dcc00717 	ldw	r19,28(sp)
    5f8c:	9480004c 	andi	r18,r18,1
    5f90:	20bfffc4 	addi	r2,r4,-1
    5f94:	9885883a 	add	r2,r19,r2
    5f98:	d8800415 	stw	r2,16(sp)
    5f9c:	dc800615 	stw	r18,24(sp)
    5fa0:	e009883a 	mov	r4,fp
    5fa4:	a80b883a 	mov	r5,r21
    5fa8:	00050040 	call	5004 <quorem>
    5fac:	e009883a 	mov	r4,fp
    5fb0:	880b883a 	mov	r5,r17
    5fb4:	102f883a 	mov	r23,r2
    5fb8:	000904c0 	call	904c <__mcmp>
    5fbc:	8009883a 	mov	r4,r16
    5fc0:	a80b883a 	mov	r5,r21
    5fc4:	a00d883a 	mov	r6,r20
    5fc8:	102d883a 	mov	r22,r2
    5fcc:	00090ac0 	call	90ac <__mdiff>
    5fd0:	1007883a 	mov	r3,r2
    5fd4:	10800317 	ldw	r2,12(r2)
    5fd8:	bc800c04 	addi	r18,r23,48
    5fdc:	1000971e 	bne	r2,zero,623c <_dtoa_r+0x1038>
    5fe0:	180b883a 	mov	r5,r3
    5fe4:	e009883a 	mov	r4,fp
    5fe8:	d8c01515 	stw	r3,84(sp)
    5fec:	000904c0 	call	904c <__mcmp>
    5ff0:	d8c01517 	ldw	r3,84(sp)
    5ff4:	8009883a 	mov	r4,r16
    5ff8:	d8801515 	stw	r2,84(sp)
    5ffc:	180b883a 	mov	r5,r3
    6000:	00088200 	call	8820 <_Bfree>
    6004:	d8801517 	ldw	r2,84(sp)
    6008:	1000041e 	bne	r2,zero,601c <_dtoa_r+0xe18>
    600c:	d9800317 	ldw	r6,12(sp)
    6010:	3000021e 	bne	r6,zero,601c <_dtoa_r+0xe18>
    6014:	d8c00617 	ldw	r3,24(sp)
    6018:	18007626 	beq	r3,zero,61f4 <_dtoa_r+0xff0>
    601c:	b0005b16 	blt	r22,zero,618c <_dtoa_r+0xf88>
    6020:	b000041e 	bne	r22,zero,6034 <_dtoa_r+0xe30>
    6024:	d9000317 	ldw	r4,12(sp)
    6028:	2000021e 	bne	r4,zero,6034 <_dtoa_r+0xe30>
    602c:	d8c00617 	ldw	r3,24(sp)
    6030:	18005626 	beq	r3,zero,618c <_dtoa_r+0xf88>
    6034:	00814d16 	blt	zero,r2,656c <_dtoa_r+0x1368>
    6038:	d8c00417 	ldw	r3,16(sp)
    603c:	9d800044 	addi	r22,r19,1
    6040:	9c800005 	stb	r18,0(r19)
    6044:	b02f883a 	mov	r23,r22
    6048:	98c14c26 	beq	r19,r3,657c <_dtoa_r+0x1378>
    604c:	e00b883a 	mov	r5,fp
    6050:	8009883a 	mov	r4,r16
    6054:	01800284 	movi	r6,10
    6058:	000f883a 	mov	r7,zero
    605c:	00088480 	call	8848 <__multadd>
    6060:	1039883a 	mov	fp,r2
    6064:	8d006d26 	beq	r17,r20,621c <_dtoa_r+0x1018>
    6068:	880b883a 	mov	r5,r17
    606c:	01800284 	movi	r6,10
    6070:	000f883a 	mov	r7,zero
    6074:	8009883a 	mov	r4,r16
    6078:	00088480 	call	8848 <__multadd>
    607c:	a00b883a 	mov	r5,r20
    6080:	8009883a 	mov	r4,r16
    6084:	01800284 	movi	r6,10
    6088:	000f883a 	mov	r7,zero
    608c:	1023883a 	mov	r17,r2
    6090:	00088480 	call	8848 <__multadd>
    6094:	1029883a 	mov	r20,r2
    6098:	b027883a 	mov	r19,r22
    609c:	003fc006 	br	5fa0 <__alt_mem_Flash_flash_data+0xf4005fa0>
    60a0:	a005883a 	mov	r2,r20
    60a4:	003ede06 	br	5c20 <__alt_mem_Flash_flash_data+0xf4005c20>
    60a8:	01000044 	movi	r4,1
    60ac:	d9000b15 	stw	r4,44(sp)
    60b0:	d9802217 	ldw	r6,136(sp)
    60b4:	0180dc0e 	bge	zero,r6,6428 <_dtoa_r+0x1224>
    60b8:	3023883a 	mov	r17,r6
    60bc:	d9800c15 	stw	r6,48(sp)
    60c0:	d9800615 	stw	r6,24(sp)
    60c4:	003d1e06 	br	5540 <__alt_mem_Flash_flash_data+0xf4005540>
    60c8:	d8800617 	ldw	r2,24(sp)
    60cc:	00be3716 	blt	zero,r2,59ac <__alt_mem_Flash_flash_data+0xf40059ac>
    60d0:	1000be1e 	bne	r2,zero,63cc <_dtoa_r+0x11c8>
    60d4:	8809883a 	mov	r4,r17
    60d8:	a00b883a 	mov	r5,r20
    60dc:	000d883a 	mov	r6,zero
    60e0:	01d00534 	movhi	r7,16404
    60e4:	000f07c0 	call	f07c <__muldf3>
    60e8:	1009883a 	mov	r4,r2
    60ec:	180b883a 	mov	r5,r3
    60f0:	900d883a 	mov	r6,r18
    60f4:	980f883a 	mov	r7,r19
    60f8:	000eebc0 	call	eebc <__gedf2>
    60fc:	002b883a 	mov	r21,zero
    6100:	0023883a 	mov	r17,zero
    6104:	10007a16 	blt	r2,zero,62f0 <_dtoa_r+0x10ec>
    6108:	d9002217 	ldw	r4,136(sp)
    610c:	ddc00717 	ldw	r23,28(sp)
    6110:	0108303a 	nor	r4,zero,r4
    6114:	d9000515 	stw	r4,20(sp)
    6118:	8009883a 	mov	r4,r16
    611c:	a80b883a 	mov	r5,r21
    6120:	00088200 	call	8820 <_Bfree>
    6124:	883f751e 	bne	r17,zero,5efc <__alt_mem_Flash_flash_data+0xf4005efc>
    6128:	003de406 	br	58bc <__alt_mem_Flash_flash_data+0xf40058bc>
    612c:	e00b883a 	mov	r5,fp
    6130:	8009883a 	mov	r4,r16
    6134:	0008dbc0 	call	8dbc <__pow5mult>
    6138:	1039883a 	mov	fp,r2
    613c:	003ed306 	br	5c8c <__alt_mem_Flash_flash_data+0xf4005c8c>
    6140:	903ee01e 	bne	r18,zero,5cc4 <__alt_mem_Flash_flash_data+0xf4005cc4>
    6144:	00800434 	movhi	r2,16
    6148:	10bfffc4 	addi	r2,r2,-1
    614c:	9884703a 	and	r2,r19,r2
    6150:	103f081e 	bne	r2,zero,5d74 <__alt_mem_Flash_flash_data+0xf4005d74>
    6154:	9cdffc2c 	andhi	r19,r19,32752
    6158:	983f0626 	beq	r19,zero,5d74 <__alt_mem_Flash_flash_data+0xf4005d74>
    615c:	d8800817 	ldw	r2,32(sp)
    6160:	b5800044 	addi	r22,r22,1
    6164:	04c00044 	movi	r19,1
    6168:	10800044 	addi	r2,r2,1
    616c:	d8800815 	stw	r2,32(sp)
    6170:	003f0106 	br	5d78 <__alt_mem_Flash_flash_data+0xf4005d78>
    6174:	d9800f17 	ldw	r6,60(sp)
    6178:	30016826 	beq	r6,zero,671c <_dtoa_r+0x1518>
    617c:	10810cc4 	addi	r2,r2,1075
    6180:	dd400917 	ldw	r21,36(sp)
    6184:	dd000817 	ldw	r20,32(sp)
    6188:	003e9906 	br	5bf0 <__alt_mem_Flash_flash_data+0xf4005bf0>
    618c:	9011883a 	mov	r8,r18
    6190:	4007883a 	mov	r3,r8
    6194:	e02d883a 	mov	r22,fp
    6198:	0080100e 	bge	zero,r2,61dc <_dtoa_r+0xfd8>
    619c:	01800044 	movi	r6,1
    61a0:	8009883a 	mov	r4,r16
    61a4:	e00b883a 	mov	r5,fp
    61a8:	da001515 	stw	r8,84(sp)
    61ac:	da001715 	stw	r8,92(sp)
    61b0:	0008efc0 	call	8efc <__lshift>
    61b4:	1009883a 	mov	r4,r2
    61b8:	a80b883a 	mov	r5,r21
    61bc:	102d883a 	mov	r22,r2
    61c0:	000904c0 	call	904c <__mcmp>
    61c4:	d8c01517 	ldw	r3,84(sp)
    61c8:	da001717 	ldw	r8,92(sp)
    61cc:	0081a50e 	bge	zero,r2,6864 <_dtoa_r+0x1660>
    61d0:	00800e44 	movi	r2,57
    61d4:	40817b26 	beq	r8,r2,67c4 <_dtoa_r+0x15c0>
    61d8:	40c00044 	addi	r3,r8,1
    61dc:	8825883a 	mov	r18,r17
    61e0:	9dc00044 	addi	r23,r19,1
    61e4:	98c00005 	stb	r3,0(r19)
    61e8:	a023883a 	mov	r17,r20
    61ec:	b039883a 	mov	fp,r22
    61f0:	003f3906 	br	5ed8 <__alt_mem_Flash_flash_data+0xf4005ed8>
    61f4:	00800e44 	movi	r2,57
    61f8:	9011883a 	mov	r8,r18
    61fc:	90817226 	beq	r18,r2,67c8 <_dtoa_r+0x15c4>
    6200:	0580010e 	bge	zero,r22,6208 <_dtoa_r+0x1004>
    6204:	ba000c44 	addi	r8,r23,49
    6208:	8825883a 	mov	r18,r17
    620c:	9dc00044 	addi	r23,r19,1
    6210:	9a000005 	stb	r8,0(r19)
    6214:	a023883a 	mov	r17,r20
    6218:	003f2f06 	br	5ed8 <__alt_mem_Flash_flash_data+0xf4005ed8>
    621c:	880b883a 	mov	r5,r17
    6220:	8009883a 	mov	r4,r16
    6224:	01800284 	movi	r6,10
    6228:	000f883a 	mov	r7,zero
    622c:	00088480 	call	8848 <__multadd>
    6230:	1023883a 	mov	r17,r2
    6234:	1029883a 	mov	r20,r2
    6238:	003f9706 	br	6098 <__alt_mem_Flash_flash_data+0xf4006098>
    623c:	8009883a 	mov	r4,r16
    6240:	180b883a 	mov	r5,r3
    6244:	00088200 	call	8820 <_Bfree>
    6248:	00800044 	movi	r2,1
    624c:	003f7306 	br	601c <__alt_mem_Flash_flash_data+0xf400601c>
    6250:	e009883a 	mov	r4,fp
    6254:	a80b883a 	mov	r5,r21
    6258:	000904c0 	call	904c <__mcmp>
    625c:	103ee60e 	bge	r2,zero,5df8 <__alt_mem_Flash_flash_data+0xf4005df8>
    6260:	8009883a 	mov	r4,r16
    6264:	e00b883a 	mov	r5,fp
    6268:	01800284 	movi	r6,10
    626c:	000f883a 	mov	r7,zero
    6270:	00088480 	call	8848 <__multadd>
    6274:	d9000517 	ldw	r4,20(sp)
    6278:	d9800b17 	ldw	r6,44(sp)
    627c:	1039883a 	mov	fp,r2
    6280:	213fffc4 	addi	r4,r4,-1
    6284:	d9000515 	stw	r4,20(sp)
    6288:	303f2d1e 	bne	r6,zero,5f40 <__alt_mem_Flash_flash_data+0xf4005f40>
    628c:	d9000c17 	ldw	r4,48(sp)
    6290:	0101780e 	bge	zero,r4,6874 <_dtoa_r+0x1670>
    6294:	d9000615 	stw	r4,24(sp)
    6298:	003edb06 	br	5e08 <__alt_mem_Flash_flash_data+0xf4005e08>
    629c:	00800084 	movi	r2,2
    62a0:	30818e1e 	bne	r6,r2,68dc <_dtoa_r+0x16d8>
    62a4:	d8000b15 	stw	zero,44(sp)
    62a8:	003f8106 	br	60b0 <__alt_mem_Flash_flash_data+0xf40060b0>
    62ac:	d8800717 	ldw	r2,28(sp)
    62b0:	003c0306 	br	52c0 <__alt_mem_Flash_flash_data+0xf40052c0>
    62b4:	d9000317 	ldw	r4,12(sp)
    62b8:	00800084 	movi	r2,2
    62bc:	113ed00e 	bge	r2,r4,5e00 <__alt_mem_Flash_flash_data+0xf4005e00>
    62c0:	d8c00617 	ldw	r3,24(sp)
    62c4:	183f901e 	bne	r3,zero,6108 <__alt_mem_Flash_flash_data+0xf4006108>
    62c8:	a80b883a 	mov	r5,r21
    62cc:	8009883a 	mov	r4,r16
    62d0:	01800144 	movi	r6,5
    62d4:	000f883a 	mov	r7,zero
    62d8:	00088480 	call	8848 <__multadd>
    62dc:	e009883a 	mov	r4,fp
    62e0:	100b883a 	mov	r5,r2
    62e4:	102b883a 	mov	r21,r2
    62e8:	000904c0 	call	904c <__mcmp>
    62ec:	00bf860e 	bge	zero,r2,6108 <__alt_mem_Flash_flash_data+0xf4006108>
    62f0:	d9800717 	ldw	r6,28(sp)
    62f4:	00800c44 	movi	r2,49
    62f8:	30800005 	stb	r2,0(r6)
    62fc:	d8800517 	ldw	r2,20(sp)
    6300:	35c00044 	addi	r23,r6,1
    6304:	10800044 	addi	r2,r2,1
    6308:	d8800515 	stw	r2,20(sp)
    630c:	003f8206 	br	6118 <__alt_mem_Flash_flash_data+0xf4006118>
    6310:	903e981e 	bne	r18,zero,5d74 <__alt_mem_Flash_flash_data+0xf4005d74>
    6314:	003f8b06 	br	6144 <__alt_mem_Flash_flash_data+0xf4006144>
    6318:	d9800517 	ldw	r6,20(sp)
    631c:	d8c00717 	ldw	r3,28(sp)
    6320:	00800c44 	movi	r2,49
    6324:	31800044 	addi	r6,r6,1
    6328:	d9800515 	stw	r6,20(sp)
    632c:	18800005 	stb	r2,0(r3)
    6330:	003ee906 	br	5ed8 <__alt_mem_Flash_flash_data+0xf4005ed8>
    6334:	dc000317 	ldw	r16,12(sp)
    6338:	003d6006 	br	58bc <__alt_mem_Flash_flash_data+0xf40058bc>
    633c:	8809883a 	mov	r4,r17
    6340:	00100f80 	call	100f8 <__floatsidf>
    6344:	a009883a 	mov	r4,r20
    6348:	a80b883a 	mov	r5,r21
    634c:	100d883a 	mov	r6,r2
    6350:	180f883a 	mov	r7,r3
    6354:	000f07c0 	call	f07c <__muldf3>
    6358:	1009883a 	mov	r4,r2
    635c:	180b883a 	mov	r5,r3
    6360:	000d883a 	mov	r6,zero
    6364:	01d00734 	movhi	r7,16412
    6368:	000dcd00 	call	dcd0 <__adddf3>
    636c:	1023883a 	mov	r17,r2
    6370:	00bf3034 	movhi	r2,64704
    6374:	1885883a 	add	r2,r3,r2
    6378:	d8800e15 	stw	r2,56(sp)
    637c:	a009883a 	mov	r4,r20
    6380:	a80b883a 	mov	r5,r21
    6384:	000d883a 	mov	r6,zero
    6388:	01d00534 	movhi	r7,16404
    638c:	000f7a00 	call	f7a0 <__subdf3>
    6390:	d9c00e17 	ldw	r7,56(sp)
    6394:	1009883a 	mov	r4,r2
    6398:	180b883a 	mov	r5,r3
    639c:	880d883a 	mov	r6,r17
    63a0:	102b883a 	mov	r21,r2
    63a4:	1829883a 	mov	r20,r3
    63a8:	000eebc0 	call	eebc <__gedf2>
    63ac:	00807716 	blt	zero,r2,658c <_dtoa_r+0x1388>
    63b0:	d8800e17 	ldw	r2,56(sp)
    63b4:	a809883a 	mov	r4,r21
    63b8:	a00b883a 	mov	r5,r20
    63bc:	11e0003c 	xorhi	r7,r2,32768
    63c0:	880d883a 	mov	r6,r17
    63c4:	000ef9c0 	call	ef9c <__ledf2>
    63c8:	103d6b0e 	bge	r2,zero,5978 <__alt_mem_Flash_flash_data+0xf4005978>
    63cc:	002b883a 	mov	r21,zero
    63d0:	0023883a 	mov	r17,zero
    63d4:	003f4c06 	br	6108 <__alt_mem_Flash_flash_data+0xf4006108>
    63d8:	d9800917 	ldw	r6,36(sp)
    63dc:	e00b883a 	mov	r5,fp
    63e0:	8009883a 	mov	r4,r16
    63e4:	0008dbc0 	call	8dbc <__pow5mult>
    63e8:	1039883a 	mov	fp,r2
    63ec:	003e2706 	br	5c8c <__alt_mem_Flash_flash_data+0xf4005c8c>
    63f0:	d8000b15 	stw	zero,44(sp)
    63f4:	003c4906 	br	551c <__alt_mem_Flash_flash_data+0xf400551c>
    63f8:	d9000917 	ldw	r4,36(sp)
    63fc:	d9800a17 	ldw	r6,40(sp)
    6400:	dd400915 	stw	r21,36(sp)
    6404:	a905c83a 	sub	r2,r21,r4
    6408:	308d883a 	add	r6,r6,r2
    640c:	d9800a15 	stw	r6,40(sp)
    6410:	002b883a 	mov	r21,zero
    6414:	003df206 	br	5be0 <__alt_mem_Flash_flash_data+0xf4005be0>
    6418:	dc800e15 	stw	r18,56(sp)
    641c:	982b883a 	mov	r21,r19
    6420:	04400084 	movi	r17,2
    6424:	003c7406 	br	55f8 <__alt_mem_Flash_flash_data+0xf40055f8>
    6428:	04400044 	movi	r17,1
    642c:	dc400c15 	stw	r17,48(sp)
    6430:	dc400615 	stw	r17,24(sp)
    6434:	dc402215 	stw	r17,136(sp)
    6438:	80001115 	stw	zero,68(r16)
    643c:	000b883a 	mov	r5,zero
    6440:	003c4a06 	br	556c <__alt_mem_Flash_flash_data+0xf400556c>
    6444:	3023883a 	mov	r17,r6
    6448:	003ffb06 	br	6438 <__alt_mem_Flash_flash_data+0xf4006438>
    644c:	1000021e 	bne	r2,zero,6458 <_dtoa_r+0x1254>
    6450:	4200004c 	andi	r8,r8,1
    6454:	403e8f1e 	bne	r8,zero,5e94 <__alt_mem_Flash_flash_data+0xf4005e94>
    6458:	01000c04 	movi	r4,48
    645c:	00000106 	br	6464 <_dtoa_r+0x1260>
    6460:	102f883a 	mov	r23,r2
    6464:	b8bfffc4 	addi	r2,r23,-1
    6468:	10c00007 	ldb	r3,0(r2)
    646c:	193ffc26 	beq	r3,r4,6460 <__alt_mem_Flash_flash_data+0xf4006460>
    6470:	003e9906 	br	5ed8 <__alt_mem_Flash_flash_data+0xf4005ed8>
    6474:	d9000517 	ldw	r4,20(sp)
    6478:	012fc83a 	sub	r23,zero,r4
    647c:	b800ad26 	beq	r23,zero,6734 <_dtoa_r+0x1530>
    6480:	b88003cc 	andi	r2,r23,15
    6484:	100490fa 	slli	r2,r2,3
    6488:	00c000b4 	movhi	r3,2
    648c:	18c3b904 	addi	r3,r3,3812
    6490:	1885883a 	add	r2,r3,r2
    6494:	11800017 	ldw	r6,0(r2)
    6498:	11c00117 	ldw	r7,4(r2)
    649c:	b82fd13a 	srai	r23,r23,4
    64a0:	9009883a 	mov	r4,r18
    64a4:	980b883a 	mov	r5,r19
    64a8:	000f07c0 	call	f07c <__muldf3>
    64ac:	1029883a 	mov	r20,r2
    64b0:	182b883a 	mov	r21,r3
    64b4:	b800f426 	beq	r23,zero,6888 <_dtoa_r+0x1684>
    64b8:	020000b4 	movhi	r8,2
    64bc:	4203af04 	addi	r8,r8,3772
    64c0:	8029883a 	mov	r20,r16
    64c4:	04400084 	movi	r17,2
    64c8:	4021883a 	mov	r16,r8
    64cc:	b980004c 	andi	r6,r23,1
    64d0:	1009883a 	mov	r4,r2
    64d4:	b82fd07a 	srai	r23,r23,1
    64d8:	180b883a 	mov	r5,r3
    64dc:	30000426 	beq	r6,zero,64f0 <_dtoa_r+0x12ec>
    64e0:	81800017 	ldw	r6,0(r16)
    64e4:	81c00117 	ldw	r7,4(r16)
    64e8:	8c400044 	addi	r17,r17,1
    64ec:	000f07c0 	call	f07c <__muldf3>
    64f0:	84000204 	addi	r16,r16,8
    64f4:	b83ff51e 	bne	r23,zero,64cc <__alt_mem_Flash_flash_data+0xf40064cc>
    64f8:	a021883a 	mov	r16,r20
    64fc:	182b883a 	mov	r21,r3
    6500:	1029883a 	mov	r20,r2
    6504:	003c5506 	br	565c <__alt_mem_Flash_flash_data+0xf400565c>
    6508:	d9800517 	ldw	r6,20(sp)
    650c:	d9000717 	ldw	r4,28(sp)
    6510:	00c00c04 	movi	r3,48
    6514:	31800044 	addi	r6,r6,1
    6518:	d9800515 	stw	r6,20(sp)
    651c:	20c00005 	stb	r3,0(r4)
    6520:	02000c44 	movi	r8,49
    6524:	003da206 	br	5bb0 <__alt_mem_Flash_flash_data+0xf4005bb0>
    6528:	89400117 	ldw	r5,4(r17)
    652c:	8009883a 	mov	r4,r16
    6530:	00087780 	call	8778 <_Balloc>
    6534:	89800417 	ldw	r6,16(r17)
    6538:	11000304 	addi	r4,r2,12
    653c:	89400304 	addi	r5,r17,12
    6540:	31800084 	addi	r6,r6,2
    6544:	318d883a 	add	r6,r6,r6
    6548:	318d883a 	add	r6,r6,r6
    654c:	1027883a 	mov	r19,r2
    6550:	00084e40 	call	84e4 <memcpy>
    6554:	8009883a 	mov	r4,r16
    6558:	980b883a 	mov	r5,r19
    655c:	01800044 	movi	r6,1
    6560:	0008efc0 	call	8efc <__lshift>
    6564:	1029883a 	mov	r20,r2
    6568:	003e8606 	br	5f84 <__alt_mem_Flash_flash_data+0xf4005f84>
    656c:	00800e44 	movi	r2,57
    6570:	90809526 	beq	r18,r2,67c8 <_dtoa_r+0x15c4>
    6574:	92000044 	addi	r8,r18,1
    6578:	003f2306 	br	6208 <__alt_mem_Flash_flash_data+0xf4006208>
    657c:	9011883a 	mov	r8,r18
    6580:	8825883a 	mov	r18,r17
    6584:	a023883a 	mov	r17,r20
    6588:	003e3706 	br	5e68 <__alt_mem_Flash_flash_data+0xf4005e68>
    658c:	002b883a 	mov	r21,zero
    6590:	0023883a 	mov	r17,zero
    6594:	003f5606 	br	62f0 <__alt_mem_Flash_flash_data+0xf40062f0>
    6598:	51bfffc4 	addi	r6,r10,-1
    659c:	300490fa 	slli	r2,r6,3
    65a0:	00c000b4 	movhi	r3,2
    65a4:	18c3b904 	addi	r3,r3,3812
    65a8:	1885883a 	add	r2,r3,r2
    65ac:	d9c00e17 	ldw	r7,56(sp)
    65b0:	11000017 	ldw	r4,0(r2)
    65b4:	11400117 	ldw	r5,4(r2)
    65b8:	d8800717 	ldw	r2,28(sp)
    65bc:	d9801015 	stw	r6,64(sp)
    65c0:	880d883a 	mov	r6,r17
    65c4:	da801615 	stw	r10,88(sp)
    65c8:	15c00044 	addi	r23,r2,1
    65cc:	000f07c0 	call	f07c <__muldf3>
    65d0:	a80b883a 	mov	r5,r21
    65d4:	a009883a 	mov	r4,r20
    65d8:	d8c01115 	stw	r3,68(sp)
    65dc:	d8800e15 	stw	r2,56(sp)
    65e0:	00100700 	call	10070 <__fixdfsi>
    65e4:	1009883a 	mov	r4,r2
    65e8:	1023883a 	mov	r17,r2
    65ec:	00100f80 	call	100f8 <__floatsidf>
    65f0:	a009883a 	mov	r4,r20
    65f4:	a80b883a 	mov	r5,r21
    65f8:	100d883a 	mov	r6,r2
    65fc:	180f883a 	mov	r7,r3
    6600:	000f7a00 	call	f7a0 <__subdf3>
    6604:	1813883a 	mov	r9,r3
    6608:	d8c00717 	ldw	r3,28(sp)
    660c:	8c400c04 	addi	r17,r17,48
    6610:	1011883a 	mov	r8,r2
    6614:	1c400005 	stb	r17,0(r3)
    6618:	da801617 	ldw	r10,88(sp)
    661c:	00800044 	movi	r2,1
    6620:	50802326 	beq	r10,r2,66b0 <_dtoa_r+0x14ac>
    6624:	d8800717 	ldw	r2,28(sp)
    6628:	b82b883a 	mov	r21,r23
    662c:	dc001315 	stw	r16,76(sp)
    6630:	12a9883a 	add	r20,r2,r10
    6634:	4807883a 	mov	r3,r9
    6638:	4005883a 	mov	r2,r8
    663c:	dc801415 	stw	r18,80(sp)
    6640:	000d883a 	mov	r6,zero
    6644:	01d00934 	movhi	r7,16420
    6648:	1009883a 	mov	r4,r2
    664c:	180b883a 	mov	r5,r3
    6650:	000f07c0 	call	f07c <__muldf3>
    6654:	180b883a 	mov	r5,r3
    6658:	1009883a 	mov	r4,r2
    665c:	1821883a 	mov	r16,r3
    6660:	1025883a 	mov	r18,r2
    6664:	00100700 	call	10070 <__fixdfsi>
    6668:	1009883a 	mov	r4,r2
    666c:	1023883a 	mov	r17,r2
    6670:	00100f80 	call	100f8 <__floatsidf>
    6674:	9009883a 	mov	r4,r18
    6678:	800b883a 	mov	r5,r16
    667c:	100d883a 	mov	r6,r2
    6680:	180f883a 	mov	r7,r3
    6684:	8c400c04 	addi	r17,r17,48
    6688:	000f7a00 	call	f7a0 <__subdf3>
    668c:	ad400044 	addi	r21,r21,1
    6690:	ac7fffc5 	stb	r17,-1(r21)
    6694:	ad3fea1e 	bne	r21,r20,6640 <__alt_mem_Flash_flash_data+0xf4006640>
    6698:	1813883a 	mov	r9,r3
    669c:	d8c01017 	ldw	r3,64(sp)
    66a0:	dc001317 	ldw	r16,76(sp)
    66a4:	dc801417 	ldw	r18,80(sp)
    66a8:	1011883a 	mov	r8,r2
    66ac:	b8ef883a 	add	r23,r23,r3
    66b0:	d9000e17 	ldw	r4,56(sp)
    66b4:	d9401117 	ldw	r5,68(sp)
    66b8:	000d883a 	mov	r6,zero
    66bc:	01cff834 	movhi	r7,16352
    66c0:	da001715 	stw	r8,92(sp)
    66c4:	da401515 	stw	r9,84(sp)
    66c8:	000dcd00 	call	dcd0 <__adddf3>
    66cc:	da001717 	ldw	r8,92(sp)
    66d0:	da401517 	ldw	r9,84(sp)
    66d4:	1009883a 	mov	r4,r2
    66d8:	400d883a 	mov	r6,r8
    66dc:	480f883a 	mov	r7,r9
    66e0:	180b883a 	mov	r5,r3
    66e4:	000ef9c0 	call	ef9c <__ledf2>
    66e8:	da001717 	ldw	r8,92(sp)
    66ec:	da401517 	ldw	r9,84(sp)
    66f0:	10003b0e 	bge	r2,zero,67e0 <_dtoa_r+0x15dc>
    66f4:	d9001217 	ldw	r4,72(sp)
    66f8:	bd7fffc3 	ldbu	r21,-1(r23)
    66fc:	d9000515 	stw	r4,20(sp)
    6700:	003d1c06 	br	5b74 <__alt_mem_Flash_flash_data+0xf4005b74>
    6704:	d8c00817 	ldw	r3,32(sp)
    6708:	18a9c83a 	sub	r20,r3,r2
    670c:	0005883a 	mov	r2,zero
    6710:	003d3706 	br	5bf0 <__alt_mem_Flash_flash_data+0xf4005bf0>
    6714:	00800044 	movi	r2,1
    6718:	003dd006 	br	5e5c <__alt_mem_Flash_flash_data+0xf4005e5c>
    671c:	d8c00217 	ldw	r3,8(sp)
    6720:	00800d84 	movi	r2,54
    6724:	dd400917 	ldw	r21,36(sp)
    6728:	10c5c83a 	sub	r2,r2,r3
    672c:	dd000817 	ldw	r20,32(sp)
    6730:	003d2f06 	br	5bf0 <__alt_mem_Flash_flash_data+0xf4005bf0>
    6734:	9029883a 	mov	r20,r18
    6738:	982b883a 	mov	r21,r19
    673c:	04400084 	movi	r17,2
    6740:	003bc606 	br	565c <__alt_mem_Flash_flash_data+0xf400565c>
    6744:	d8800617 	ldw	r2,24(sp)
    6748:	103efc26 	beq	r2,zero,633c <__alt_mem_Flash_flash_data+0xf400633c>
    674c:	d8c00c17 	ldw	r3,48(sp)
    6750:	00fc890e 	bge	zero,r3,5978 <__alt_mem_Flash_flash_data+0xf4005978>
    6754:	a80b883a 	mov	r5,r21
    6758:	a009883a 	mov	r4,r20
    675c:	000d883a 	mov	r6,zero
    6760:	01d00934 	movhi	r7,16420
    6764:	000f07c0 	call	f07c <__muldf3>
    6768:	89000044 	addi	r4,r17,1
    676c:	1029883a 	mov	r20,r2
    6770:	182b883a 	mov	r21,r3
    6774:	00100f80 	call	100f8 <__floatsidf>
    6778:	a009883a 	mov	r4,r20
    677c:	a80b883a 	mov	r5,r21
    6780:	100d883a 	mov	r6,r2
    6784:	180f883a 	mov	r7,r3
    6788:	000f07c0 	call	f07c <__muldf3>
    678c:	1009883a 	mov	r4,r2
    6790:	180b883a 	mov	r5,r3
    6794:	000d883a 	mov	r6,zero
    6798:	01d00734 	movhi	r7,16412
    679c:	000dcd00 	call	dcd0 <__adddf3>
    67a0:	d9000517 	ldw	r4,20(sp)
    67a4:	1023883a 	mov	r17,r2
    67a8:	00bf3034 	movhi	r2,64704
    67ac:	213fffc4 	addi	r4,r4,-1
    67b0:	1885883a 	add	r2,r3,r2
    67b4:	d9001215 	stw	r4,72(sp)
    67b8:	d8800e15 	stw	r2,56(sp)
    67bc:	da800c17 	ldw	r10,48(sp)
    67c0:	003bc306 	br	56d0 <__alt_mem_Flash_flash_data+0xf40056d0>
    67c4:	b039883a 	mov	fp,r22
    67c8:	01000e44 	movi	r4,57
    67cc:	8825883a 	mov	r18,r17
    67d0:	9dc00044 	addi	r23,r19,1
    67d4:	99000005 	stb	r4,0(r19)
    67d8:	a023883a 	mov	r17,r20
    67dc:	003dae06 	br	5e98 <__alt_mem_Flash_flash_data+0xf4005e98>
    67e0:	d9800e17 	ldw	r6,56(sp)
    67e4:	d9c01117 	ldw	r7,68(sp)
    67e8:	0009883a 	mov	r4,zero
    67ec:	014ff834 	movhi	r5,16352
    67f0:	da001715 	stw	r8,92(sp)
    67f4:	da401515 	stw	r9,84(sp)
    67f8:	000f7a00 	call	f7a0 <__subdf3>
    67fc:	da001717 	ldw	r8,92(sp)
    6800:	da401517 	ldw	r9,84(sp)
    6804:	1009883a 	mov	r4,r2
    6808:	180b883a 	mov	r5,r3
    680c:	400d883a 	mov	r6,r8
    6810:	480f883a 	mov	r7,r9
    6814:	000eebc0 	call	eebc <__gedf2>
    6818:	00bc570e 	bge	zero,r2,5978 <__alt_mem_Flash_flash_data+0xf4005978>
    681c:	01000c04 	movi	r4,48
    6820:	00000106 	br	6828 <_dtoa_r+0x1624>
    6824:	102f883a 	mov	r23,r2
    6828:	b8bfffc4 	addi	r2,r23,-1
    682c:	10c00007 	ldb	r3,0(r2)
    6830:	193ffc26 	beq	r3,r4,6824 <__alt_mem_Flash_flash_data+0xf4006824>
    6834:	d9801217 	ldw	r6,72(sp)
    6838:	d9800515 	stw	r6,20(sp)
    683c:	003c1f06 	br	58bc <__alt_mem_Flash_flash_data+0xf40058bc>
    6840:	d8801217 	ldw	r2,72(sp)
    6844:	dc001117 	ldw	r16,68(sp)
    6848:	d8800515 	stw	r2,20(sp)
    684c:	003cc906 	br	5b74 <__alt_mem_Flash_flash_data+0xf4005b74>
    6850:	dd801317 	ldw	r22,76(sp)
    6854:	dc001117 	ldw	r16,68(sp)
    6858:	dcc01417 	ldw	r19,80(sp)
    685c:	dc801017 	ldw	r18,64(sp)
    6860:	003c4506 	br	5978 <__alt_mem_Flash_flash_data+0xf4005978>
    6864:	103e5d1e 	bne	r2,zero,61dc <__alt_mem_Flash_flash_data+0xf40061dc>
    6868:	4080004c 	andi	r2,r8,1
    686c:	103e5b26 	beq	r2,zero,61dc <__alt_mem_Flash_flash_data+0xf40061dc>
    6870:	003e5706 	br	61d0 <__alt_mem_Flash_flash_data+0xf40061d0>
    6874:	d8c00317 	ldw	r3,12(sp)
    6878:	00800084 	movi	r2,2
    687c:	10c00a16 	blt	r2,r3,68a8 <_dtoa_r+0x16a4>
    6880:	d9000c17 	ldw	r4,48(sp)
    6884:	003e8306 	br	6294 <__alt_mem_Flash_flash_data+0xf4006294>
    6888:	04400084 	movi	r17,2
    688c:	003b7306 	br	565c <__alt_mem_Flash_flash_data+0xf400565c>
    6890:	d9801217 	ldw	r6,72(sp)
    6894:	d9800515 	stw	r6,20(sp)
    6898:	003cb606 	br	5b74 <__alt_mem_Flash_flash_data+0xf4005b74>
    689c:	d9001217 	ldw	r4,72(sp)
    68a0:	d9000515 	stw	r4,20(sp)
    68a4:	003c0506 	br	58bc <__alt_mem_Flash_flash_data+0xf40058bc>
    68a8:	d9800c17 	ldw	r6,48(sp)
    68ac:	d9800615 	stw	r6,24(sp)
    68b0:	003e8306 	br	62c0 <__alt_mem_Flash_flash_data+0xf40062c0>
    68b4:	d9800317 	ldw	r6,12(sp)
    68b8:	00800084 	movi	r2,2
    68bc:	11800216 	blt	r2,r6,68c8 <_dtoa_r+0x16c4>
    68c0:	d8800c17 	ldw	r2,48(sp)
    68c4:	003da606 	br	5f60 <__alt_mem_Flash_flash_data+0xf4005f60>
    68c8:	d8800c17 	ldw	r2,48(sp)
    68cc:	d8800615 	stw	r2,24(sp)
    68d0:	003e7b06 	br	62c0 <__alt_mem_Flash_flash_data+0xf40062c0>
    68d4:	05000044 	movi	r20,1
    68d8:	003b0506 	br	54f0 <__alt_mem_Flash_flash_data+0xf40054f0>
    68dc:	8009883a 	mov	r4,r16
    68e0:	80001115 	stw	zero,68(r16)
    68e4:	000b883a 	mov	r5,zero
    68e8:	00087780 	call	8778 <_Balloc>
    68ec:	d8800715 	stw	r2,28(sp)
    68f0:	d8c00717 	ldw	r3,28(sp)
    68f4:	00bfffc4 	movi	r2,-1
    68f8:	01000044 	movi	r4,1
    68fc:	d8800c15 	stw	r2,48(sp)
    6900:	80c01015 	stw	r3,64(r16)
    6904:	d9000b15 	stw	r4,44(sp)
    6908:	d8800615 	stw	r2,24(sp)
    690c:	d8002215 	stw	zero,136(sp)
    6910:	003c1906 	br	5978 <__alt_mem_Flash_flash_data+0xf4005978>
    6914:	193d2926 	beq	r3,r4,5dbc <__alt_mem_Flash_flash_data+0xf4005dbc>
    6918:	00c00f04 	movi	r3,60
    691c:	1885c83a 	sub	r2,r3,r2
    6920:	003d7b06 	br	5f10 <__alt_mem_Flash_flash_data+0xf4005f10>
    6924:	000b883a 	mov	r5,zero
    6928:	003b1006 	br	556c <__alt_mem_Flash_flash_data+0xf400556c>

0000692c <__sflush_r>:
    692c:	2880030b 	ldhu	r2,12(r5)
    6930:	defffb04 	addi	sp,sp,-20
    6934:	dcc00315 	stw	r19,12(sp)
    6938:	dc400115 	stw	r17,4(sp)
    693c:	dfc00415 	stw	ra,16(sp)
    6940:	dc800215 	stw	r18,8(sp)
    6944:	dc000015 	stw	r16,0(sp)
    6948:	10c0020c 	andi	r3,r2,8
    694c:	2823883a 	mov	r17,r5
    6950:	2027883a 	mov	r19,r4
    6954:	1800311e 	bne	r3,zero,6a1c <__sflush_r+0xf0>
    6958:	28c00117 	ldw	r3,4(r5)
    695c:	10820014 	ori	r2,r2,2048
    6960:	2880030d 	sth	r2,12(r5)
    6964:	00c04b0e 	bge	zero,r3,6a94 <__sflush_r+0x168>
    6968:	8a000a17 	ldw	r8,40(r17)
    696c:	40002326 	beq	r8,zero,69fc <__sflush_r+0xd0>
    6970:	9c000017 	ldw	r16,0(r19)
    6974:	10c4000c 	andi	r3,r2,4096
    6978:	98000015 	stw	zero,0(r19)
    697c:	18004826 	beq	r3,zero,6aa0 <__sflush_r+0x174>
    6980:	89801417 	ldw	r6,80(r17)
    6984:	10c0010c 	andi	r3,r2,4
    6988:	18000626 	beq	r3,zero,69a4 <__sflush_r+0x78>
    698c:	88c00117 	ldw	r3,4(r17)
    6990:	88800c17 	ldw	r2,48(r17)
    6994:	30cdc83a 	sub	r6,r6,r3
    6998:	10000226 	beq	r2,zero,69a4 <__sflush_r+0x78>
    699c:	88800f17 	ldw	r2,60(r17)
    69a0:	308dc83a 	sub	r6,r6,r2
    69a4:	89400717 	ldw	r5,28(r17)
    69a8:	9809883a 	mov	r4,r19
    69ac:	000f883a 	mov	r7,zero
    69b0:	403ee83a 	callr	r8
    69b4:	00ffffc4 	movi	r3,-1
    69b8:	10c04426 	beq	r2,r3,6acc <__sflush_r+0x1a0>
    69bc:	88c0030b 	ldhu	r3,12(r17)
    69c0:	89000417 	ldw	r4,16(r17)
    69c4:	88000115 	stw	zero,4(r17)
    69c8:	197dffcc 	andi	r5,r3,63487
    69cc:	8940030d 	sth	r5,12(r17)
    69d0:	89000015 	stw	r4,0(r17)
    69d4:	18c4000c 	andi	r3,r3,4096
    69d8:	18002c1e 	bne	r3,zero,6a8c <__sflush_r+0x160>
    69dc:	89400c17 	ldw	r5,48(r17)
    69e0:	9c000015 	stw	r16,0(r19)
    69e4:	28000526 	beq	r5,zero,69fc <__sflush_r+0xd0>
    69e8:	88801004 	addi	r2,r17,64
    69ec:	28800226 	beq	r5,r2,69f8 <__sflush_r+0xcc>
    69f0:	9809883a 	mov	r4,r19
    69f4:	00070840 	call	7084 <_free_r>
    69f8:	88000c15 	stw	zero,48(r17)
    69fc:	0005883a 	mov	r2,zero
    6a00:	dfc00417 	ldw	ra,16(sp)
    6a04:	dcc00317 	ldw	r19,12(sp)
    6a08:	dc800217 	ldw	r18,8(sp)
    6a0c:	dc400117 	ldw	r17,4(sp)
    6a10:	dc000017 	ldw	r16,0(sp)
    6a14:	dec00504 	addi	sp,sp,20
    6a18:	f800283a 	ret
    6a1c:	2c800417 	ldw	r18,16(r5)
    6a20:	903ff626 	beq	r18,zero,69fc <__alt_mem_Flash_flash_data+0xf40069fc>
    6a24:	2c000017 	ldw	r16,0(r5)
    6a28:	108000cc 	andi	r2,r2,3
    6a2c:	2c800015 	stw	r18,0(r5)
    6a30:	84a1c83a 	sub	r16,r16,r18
    6a34:	1000131e 	bne	r2,zero,6a84 <__sflush_r+0x158>
    6a38:	28800517 	ldw	r2,20(r5)
    6a3c:	88800215 	stw	r2,8(r17)
    6a40:	04000316 	blt	zero,r16,6a50 <__sflush_r+0x124>
    6a44:	003fed06 	br	69fc <__alt_mem_Flash_flash_data+0xf40069fc>
    6a48:	90a5883a 	add	r18,r18,r2
    6a4c:	043feb0e 	bge	zero,r16,69fc <__alt_mem_Flash_flash_data+0xf40069fc>
    6a50:	88800917 	ldw	r2,36(r17)
    6a54:	89400717 	ldw	r5,28(r17)
    6a58:	800f883a 	mov	r7,r16
    6a5c:	900d883a 	mov	r6,r18
    6a60:	9809883a 	mov	r4,r19
    6a64:	103ee83a 	callr	r2
    6a68:	80a1c83a 	sub	r16,r16,r2
    6a6c:	00bff616 	blt	zero,r2,6a48 <__alt_mem_Flash_flash_data+0xf4006a48>
    6a70:	88c0030b 	ldhu	r3,12(r17)
    6a74:	00bfffc4 	movi	r2,-1
    6a78:	18c01014 	ori	r3,r3,64
    6a7c:	88c0030d 	sth	r3,12(r17)
    6a80:	003fdf06 	br	6a00 <__alt_mem_Flash_flash_data+0xf4006a00>
    6a84:	0005883a 	mov	r2,zero
    6a88:	003fec06 	br	6a3c <__alt_mem_Flash_flash_data+0xf4006a3c>
    6a8c:	88801415 	stw	r2,80(r17)
    6a90:	003fd206 	br	69dc <__alt_mem_Flash_flash_data+0xf40069dc>
    6a94:	28c00f17 	ldw	r3,60(r5)
    6a98:	00ffb316 	blt	zero,r3,6968 <__alt_mem_Flash_flash_data+0xf4006968>
    6a9c:	003fd706 	br	69fc <__alt_mem_Flash_flash_data+0xf40069fc>
    6aa0:	89400717 	ldw	r5,28(r17)
    6aa4:	000d883a 	mov	r6,zero
    6aa8:	9809883a 	mov	r4,r19
    6aac:	01c00044 	movi	r7,1
    6ab0:	403ee83a 	callr	r8
    6ab4:	100d883a 	mov	r6,r2
    6ab8:	00bfffc4 	movi	r2,-1
    6abc:	30801426 	beq	r6,r2,6b10 <__sflush_r+0x1e4>
    6ac0:	8880030b 	ldhu	r2,12(r17)
    6ac4:	8a000a17 	ldw	r8,40(r17)
    6ac8:	003fae06 	br	6984 <__alt_mem_Flash_flash_data+0xf4006984>
    6acc:	98c00017 	ldw	r3,0(r19)
    6ad0:	183fba26 	beq	r3,zero,69bc <__alt_mem_Flash_flash_data+0xf40069bc>
    6ad4:	01000744 	movi	r4,29
    6ad8:	19000626 	beq	r3,r4,6af4 <__sflush_r+0x1c8>
    6adc:	01000584 	movi	r4,22
    6ae0:	19000426 	beq	r3,r4,6af4 <__sflush_r+0x1c8>
    6ae4:	88c0030b 	ldhu	r3,12(r17)
    6ae8:	18c01014 	ori	r3,r3,64
    6aec:	88c0030d 	sth	r3,12(r17)
    6af0:	003fc306 	br	6a00 <__alt_mem_Flash_flash_data+0xf4006a00>
    6af4:	8880030b 	ldhu	r2,12(r17)
    6af8:	88c00417 	ldw	r3,16(r17)
    6afc:	88000115 	stw	zero,4(r17)
    6b00:	10bdffcc 	andi	r2,r2,63487
    6b04:	8880030d 	sth	r2,12(r17)
    6b08:	88c00015 	stw	r3,0(r17)
    6b0c:	003fb306 	br	69dc <__alt_mem_Flash_flash_data+0xf40069dc>
    6b10:	98800017 	ldw	r2,0(r19)
    6b14:	103fea26 	beq	r2,zero,6ac0 <__alt_mem_Flash_flash_data+0xf4006ac0>
    6b18:	00c00744 	movi	r3,29
    6b1c:	10c00226 	beq	r2,r3,6b28 <__sflush_r+0x1fc>
    6b20:	00c00584 	movi	r3,22
    6b24:	10ffd21e 	bne	r2,r3,6a70 <__alt_mem_Flash_flash_data+0xf4006a70>
    6b28:	9c000015 	stw	r16,0(r19)
    6b2c:	0005883a 	mov	r2,zero
    6b30:	003fb306 	br	6a00 <__alt_mem_Flash_flash_data+0xf4006a00>

00006b34 <_fflush_r>:
    6b34:	defffd04 	addi	sp,sp,-12
    6b38:	dc000115 	stw	r16,4(sp)
    6b3c:	dfc00215 	stw	ra,8(sp)
    6b40:	2021883a 	mov	r16,r4
    6b44:	20000226 	beq	r4,zero,6b50 <_fflush_r+0x1c>
    6b48:	20800e17 	ldw	r2,56(r4)
    6b4c:	10000c26 	beq	r2,zero,6b80 <_fflush_r+0x4c>
    6b50:	2880030f 	ldh	r2,12(r5)
    6b54:	1000051e 	bne	r2,zero,6b6c <_fflush_r+0x38>
    6b58:	0005883a 	mov	r2,zero
    6b5c:	dfc00217 	ldw	ra,8(sp)
    6b60:	dc000117 	ldw	r16,4(sp)
    6b64:	dec00304 	addi	sp,sp,12
    6b68:	f800283a 	ret
    6b6c:	8009883a 	mov	r4,r16
    6b70:	dfc00217 	ldw	ra,8(sp)
    6b74:	dc000117 	ldw	r16,4(sp)
    6b78:	dec00304 	addi	sp,sp,12
    6b7c:	000692c1 	jmpi	692c <__sflush_r>
    6b80:	d9400015 	stw	r5,0(sp)
    6b84:	0006f100 	call	6f10 <__sinit>
    6b88:	d9400017 	ldw	r5,0(sp)
    6b8c:	003ff006 	br	6b50 <__alt_mem_Flash_flash_data+0xf4006b50>

00006b90 <fflush>:
    6b90:	20000526 	beq	r4,zero,6ba8 <fflush+0x18>
    6b94:	008000b4 	movhi	r2,2
    6b98:	108c8604 	addi	r2,r2,12824
    6b9c:	200b883a 	mov	r5,r4
    6ba0:	11000017 	ldw	r4,0(r2)
    6ba4:	0006b341 	jmpi	6b34 <_fflush_r>
    6ba8:	008000b4 	movhi	r2,2
    6bac:	108c8504 	addi	r2,r2,12820
    6bb0:	11000017 	ldw	r4,0(r2)
    6bb4:	01400034 	movhi	r5,0
    6bb8:	295acd04 	addi	r5,r5,27444
    6bbc:	00078f81 	jmpi	78f8 <_fwalk_reent>

00006bc0 <__fp_lock>:
    6bc0:	0005883a 	mov	r2,zero
    6bc4:	f800283a 	ret

00006bc8 <__fp_unlock>:
    6bc8:	0005883a 	mov	r2,zero
    6bcc:	f800283a 	ret

00006bd0 <_cleanup_r>:
    6bd0:	01400074 	movhi	r5,1
    6bd4:	29728904 	addi	r5,r5,-13788
    6bd8:	00078f81 	jmpi	78f8 <_fwalk_reent>

00006bdc <__sinit.part.1>:
    6bdc:	defff704 	addi	sp,sp,-36
    6be0:	00c00034 	movhi	r3,0
    6be4:	dfc00815 	stw	ra,32(sp)
    6be8:	ddc00715 	stw	r23,28(sp)
    6bec:	dd800615 	stw	r22,24(sp)
    6bf0:	dd400515 	stw	r21,20(sp)
    6bf4:	dd000415 	stw	r20,16(sp)
    6bf8:	dcc00315 	stw	r19,12(sp)
    6bfc:	dc800215 	stw	r18,8(sp)
    6c00:	dc400115 	stw	r17,4(sp)
    6c04:	dc000015 	stw	r16,0(sp)
    6c08:	18daf404 	addi	r3,r3,27600
    6c0c:	24000117 	ldw	r16,4(r4)
    6c10:	20c00f15 	stw	r3,60(r4)
    6c14:	2080bb04 	addi	r2,r4,748
    6c18:	00c000c4 	movi	r3,3
    6c1c:	20c0b915 	stw	r3,740(r4)
    6c20:	2080ba15 	stw	r2,744(r4)
    6c24:	2000b815 	stw	zero,736(r4)
    6c28:	05c00204 	movi	r23,8
    6c2c:	00800104 	movi	r2,4
    6c30:	2025883a 	mov	r18,r4
    6c34:	b80d883a 	mov	r6,r23
    6c38:	81001704 	addi	r4,r16,92
    6c3c:	000b883a 	mov	r5,zero
    6c40:	80000015 	stw	zero,0(r16)
    6c44:	80000115 	stw	zero,4(r16)
    6c48:	80000215 	stw	zero,8(r16)
    6c4c:	8080030d 	sth	r2,12(r16)
    6c50:	80001915 	stw	zero,100(r16)
    6c54:	8000038d 	sth	zero,14(r16)
    6c58:	80000415 	stw	zero,16(r16)
    6c5c:	80000515 	stw	zero,20(r16)
    6c60:	80000615 	stw	zero,24(r16)
    6c64:	0000a140 	call	a14 <memset>
    6c68:	05800074 	movhi	r22,1
    6c6c:	94400217 	ldw	r17,8(r18)
    6c70:	05400074 	movhi	r21,1
    6c74:	05000074 	movhi	r20,1
    6c78:	04c00074 	movhi	r19,1
    6c7c:	b5a7ad04 	addi	r22,r22,-24908
    6c80:	ad67c404 	addi	r21,r21,-24816
    6c84:	a527e304 	addi	r20,r20,-24692
    6c88:	9ce7fa04 	addi	r19,r19,-24600
    6c8c:	85800815 	stw	r22,32(r16)
    6c90:	85400915 	stw	r21,36(r16)
    6c94:	85000a15 	stw	r20,40(r16)
    6c98:	84c00b15 	stw	r19,44(r16)
    6c9c:	84000715 	stw	r16,28(r16)
    6ca0:	00800284 	movi	r2,10
    6ca4:	8880030d 	sth	r2,12(r17)
    6ca8:	00800044 	movi	r2,1
    6cac:	89001704 	addi	r4,r17,92
    6cb0:	b80d883a 	mov	r6,r23
    6cb4:	000b883a 	mov	r5,zero
    6cb8:	88000015 	stw	zero,0(r17)
    6cbc:	88000115 	stw	zero,4(r17)
    6cc0:	88000215 	stw	zero,8(r17)
    6cc4:	88001915 	stw	zero,100(r17)
    6cc8:	8880038d 	sth	r2,14(r17)
    6ccc:	88000415 	stw	zero,16(r17)
    6cd0:	88000515 	stw	zero,20(r17)
    6cd4:	88000615 	stw	zero,24(r17)
    6cd8:	0000a140 	call	a14 <memset>
    6cdc:	94000317 	ldw	r16,12(r18)
    6ce0:	00800484 	movi	r2,18
    6ce4:	8c400715 	stw	r17,28(r17)
    6ce8:	8d800815 	stw	r22,32(r17)
    6cec:	8d400915 	stw	r21,36(r17)
    6cf0:	8d000a15 	stw	r20,40(r17)
    6cf4:	8cc00b15 	stw	r19,44(r17)
    6cf8:	8080030d 	sth	r2,12(r16)
    6cfc:	00800084 	movi	r2,2
    6d00:	80000015 	stw	zero,0(r16)
    6d04:	80000115 	stw	zero,4(r16)
    6d08:	80000215 	stw	zero,8(r16)
    6d0c:	80001915 	stw	zero,100(r16)
    6d10:	8080038d 	sth	r2,14(r16)
    6d14:	80000415 	stw	zero,16(r16)
    6d18:	80000515 	stw	zero,20(r16)
    6d1c:	80000615 	stw	zero,24(r16)
    6d20:	81001704 	addi	r4,r16,92
    6d24:	000b883a 	mov	r5,zero
    6d28:	b80d883a 	mov	r6,r23
    6d2c:	0000a140 	call	a14 <memset>
    6d30:	00800044 	movi	r2,1
    6d34:	84000715 	stw	r16,28(r16)
    6d38:	85800815 	stw	r22,32(r16)
    6d3c:	85400915 	stw	r21,36(r16)
    6d40:	85000a15 	stw	r20,40(r16)
    6d44:	84c00b15 	stw	r19,44(r16)
    6d48:	90800e15 	stw	r2,56(r18)
    6d4c:	dfc00817 	ldw	ra,32(sp)
    6d50:	ddc00717 	ldw	r23,28(sp)
    6d54:	dd800617 	ldw	r22,24(sp)
    6d58:	dd400517 	ldw	r21,20(sp)
    6d5c:	dd000417 	ldw	r20,16(sp)
    6d60:	dcc00317 	ldw	r19,12(sp)
    6d64:	dc800217 	ldw	r18,8(sp)
    6d68:	dc400117 	ldw	r17,4(sp)
    6d6c:	dc000017 	ldw	r16,0(sp)
    6d70:	dec00904 	addi	sp,sp,36
    6d74:	f800283a 	ret

00006d78 <__sfmoreglue>:
    6d78:	defffc04 	addi	sp,sp,-16
    6d7c:	dc400115 	stw	r17,4(sp)
    6d80:	2c7fffc4 	addi	r17,r5,-1
    6d84:	8c401a24 	muli	r17,r17,104
    6d88:	dc800215 	stw	r18,8(sp)
    6d8c:	2825883a 	mov	r18,r5
    6d90:	89401d04 	addi	r5,r17,116
    6d94:	dc000015 	stw	r16,0(sp)
    6d98:	dfc00315 	stw	ra,12(sp)
    6d9c:	0007c540 	call	7c54 <_malloc_r>
    6da0:	1021883a 	mov	r16,r2
    6da4:	10000726 	beq	r2,zero,6dc4 <__sfmoreglue+0x4c>
    6da8:	11000304 	addi	r4,r2,12
    6dac:	10000015 	stw	zero,0(r2)
    6db0:	14800115 	stw	r18,4(r2)
    6db4:	11000215 	stw	r4,8(r2)
    6db8:	000b883a 	mov	r5,zero
    6dbc:	89801a04 	addi	r6,r17,104
    6dc0:	0000a140 	call	a14 <memset>
    6dc4:	8005883a 	mov	r2,r16
    6dc8:	dfc00317 	ldw	ra,12(sp)
    6dcc:	dc800217 	ldw	r18,8(sp)
    6dd0:	dc400117 	ldw	r17,4(sp)
    6dd4:	dc000017 	ldw	r16,0(sp)
    6dd8:	dec00404 	addi	sp,sp,16
    6ddc:	f800283a 	ret

00006de0 <__sfp>:
    6de0:	008000b4 	movhi	r2,2
    6de4:	defffb04 	addi	sp,sp,-20
    6de8:	108c8504 	addi	r2,r2,12820
    6dec:	dc800215 	stw	r18,8(sp)
    6df0:	14800017 	ldw	r18,0(r2)
    6df4:	dcc00315 	stw	r19,12(sp)
    6df8:	dfc00415 	stw	ra,16(sp)
    6dfc:	90800e17 	ldw	r2,56(r18)
    6e00:	dc400115 	stw	r17,4(sp)
    6e04:	dc000015 	stw	r16,0(sp)
    6e08:	2027883a 	mov	r19,r4
    6e0c:	1000021e 	bne	r2,zero,6e18 <__sfp+0x38>
    6e10:	9009883a 	mov	r4,r18
    6e14:	0006bdc0 	call	6bdc <__sinit.part.1>
    6e18:	9480b804 	addi	r18,r18,736
    6e1c:	047fffc4 	movi	r17,-1
    6e20:	91400117 	ldw	r5,4(r18)
    6e24:	94000217 	ldw	r16,8(r18)
    6e28:	297fffc4 	addi	r5,r5,-1
    6e2c:	28000a16 	blt	r5,zero,6e58 <__sfp+0x78>
    6e30:	8080030f 	ldh	r2,12(r16)
    6e34:	10000c26 	beq	r2,zero,6e68 <__sfp+0x88>
    6e38:	80c01d04 	addi	r3,r16,116
    6e3c:	00000206 	br	6e48 <__sfp+0x68>
    6e40:	18bfe60f 	ldh	r2,-104(r3)
    6e44:	10000826 	beq	r2,zero,6e68 <__sfp+0x88>
    6e48:	297fffc4 	addi	r5,r5,-1
    6e4c:	1c3ffd04 	addi	r16,r3,-12
    6e50:	18c01a04 	addi	r3,r3,104
    6e54:	2c7ffa1e 	bne	r5,r17,6e40 <__alt_mem_Flash_flash_data+0xf4006e40>
    6e58:	90800017 	ldw	r2,0(r18)
    6e5c:	10001d26 	beq	r2,zero,6ed4 <__sfp+0xf4>
    6e60:	1025883a 	mov	r18,r2
    6e64:	003fee06 	br	6e20 <__alt_mem_Flash_flash_data+0xf4006e20>
    6e68:	00bfffc4 	movi	r2,-1
    6e6c:	8080038d 	sth	r2,14(r16)
    6e70:	00800044 	movi	r2,1
    6e74:	8080030d 	sth	r2,12(r16)
    6e78:	80001915 	stw	zero,100(r16)
    6e7c:	80000015 	stw	zero,0(r16)
    6e80:	80000215 	stw	zero,8(r16)
    6e84:	80000115 	stw	zero,4(r16)
    6e88:	80000415 	stw	zero,16(r16)
    6e8c:	80000515 	stw	zero,20(r16)
    6e90:	80000615 	stw	zero,24(r16)
    6e94:	81001704 	addi	r4,r16,92
    6e98:	000b883a 	mov	r5,zero
    6e9c:	01800204 	movi	r6,8
    6ea0:	0000a140 	call	a14 <memset>
    6ea4:	8005883a 	mov	r2,r16
    6ea8:	80000c15 	stw	zero,48(r16)
    6eac:	80000d15 	stw	zero,52(r16)
    6eb0:	80001115 	stw	zero,68(r16)
    6eb4:	80001215 	stw	zero,72(r16)
    6eb8:	dfc00417 	ldw	ra,16(sp)
    6ebc:	dcc00317 	ldw	r19,12(sp)
    6ec0:	dc800217 	ldw	r18,8(sp)
    6ec4:	dc400117 	ldw	r17,4(sp)
    6ec8:	dc000017 	ldw	r16,0(sp)
    6ecc:	dec00504 	addi	sp,sp,20
    6ed0:	f800283a 	ret
    6ed4:	9809883a 	mov	r4,r19
    6ed8:	01400104 	movi	r5,4
    6edc:	0006d780 	call	6d78 <__sfmoreglue>
    6ee0:	90800015 	stw	r2,0(r18)
    6ee4:	103fde1e 	bne	r2,zero,6e60 <__alt_mem_Flash_flash_data+0xf4006e60>
    6ee8:	00800304 	movi	r2,12
    6eec:	98800015 	stw	r2,0(r19)
    6ef0:	0005883a 	mov	r2,zero
    6ef4:	003ff006 	br	6eb8 <__alt_mem_Flash_flash_data+0xf4006eb8>

00006ef8 <_cleanup>:
    6ef8:	008000b4 	movhi	r2,2
    6efc:	108c8504 	addi	r2,r2,12820
    6f00:	11000017 	ldw	r4,0(r2)
    6f04:	01400074 	movhi	r5,1
    6f08:	29728904 	addi	r5,r5,-13788
    6f0c:	00078f81 	jmpi	78f8 <_fwalk_reent>

00006f10 <__sinit>:
    6f10:	20800e17 	ldw	r2,56(r4)
    6f14:	10000126 	beq	r2,zero,6f1c <__sinit+0xc>
    6f18:	f800283a 	ret
    6f1c:	0006bdc1 	jmpi	6bdc <__sinit.part.1>

00006f20 <__sfp_lock_acquire>:
    6f20:	f800283a 	ret

00006f24 <__sfp_lock_release>:
    6f24:	f800283a 	ret

00006f28 <__sinit_lock_acquire>:
    6f28:	f800283a 	ret

00006f2c <__sinit_lock_release>:
    6f2c:	f800283a 	ret

00006f30 <__fp_lock_all>:
    6f30:	008000b4 	movhi	r2,2
    6f34:	108c8604 	addi	r2,r2,12824
    6f38:	11000017 	ldw	r4,0(r2)
    6f3c:	01400034 	movhi	r5,0
    6f40:	295af004 	addi	r5,r5,27584
    6f44:	00078341 	jmpi	7834 <_fwalk>

00006f48 <__fp_unlock_all>:
    6f48:	008000b4 	movhi	r2,2
    6f4c:	108c8604 	addi	r2,r2,12824
    6f50:	11000017 	ldw	r4,0(r2)
    6f54:	01400034 	movhi	r5,0
    6f58:	295af204 	addi	r5,r5,27592
    6f5c:	00078341 	jmpi	7834 <_fwalk>

00006f60 <_malloc_trim_r>:
    6f60:	defffb04 	addi	sp,sp,-20
    6f64:	dcc00315 	stw	r19,12(sp)
    6f68:	04c000b4 	movhi	r19,2
    6f6c:	dc800215 	stw	r18,8(sp)
    6f70:	dc400115 	stw	r17,4(sp)
    6f74:	dc000015 	stw	r16,0(sp)
    6f78:	dfc00415 	stw	ra,16(sp)
    6f7c:	2821883a 	mov	r16,r5
    6f80:	9cc61d04 	addi	r19,r19,6260
    6f84:	2025883a 	mov	r18,r4
    6f88:	0010dac0 	call	10dac <__malloc_lock>
    6f8c:	98800217 	ldw	r2,8(r19)
    6f90:	14400117 	ldw	r17,4(r2)
    6f94:	00bfff04 	movi	r2,-4
    6f98:	88a2703a 	and	r17,r17,r2
    6f9c:	8c21c83a 	sub	r16,r17,r16
    6fa0:	8403fbc4 	addi	r16,r16,4079
    6fa4:	8020d33a 	srli	r16,r16,12
    6fa8:	0083ffc4 	movi	r2,4095
    6fac:	843fffc4 	addi	r16,r16,-1
    6fb0:	8020933a 	slli	r16,r16,12
    6fb4:	1400060e 	bge	r2,r16,6fd0 <_malloc_trim_r+0x70>
    6fb8:	9009883a 	mov	r4,r18
    6fbc:	000b883a 	mov	r5,zero
    6fc0:	0009e600 	call	9e60 <_sbrk_r>
    6fc4:	98c00217 	ldw	r3,8(r19)
    6fc8:	1c47883a 	add	r3,r3,r17
    6fcc:	10c00a26 	beq	r2,r3,6ff8 <_malloc_trim_r+0x98>
    6fd0:	9009883a 	mov	r4,r18
    6fd4:	0010ecc0 	call	10ecc <__malloc_unlock>
    6fd8:	0005883a 	mov	r2,zero
    6fdc:	dfc00417 	ldw	ra,16(sp)
    6fe0:	dcc00317 	ldw	r19,12(sp)
    6fe4:	dc800217 	ldw	r18,8(sp)
    6fe8:	dc400117 	ldw	r17,4(sp)
    6fec:	dc000017 	ldw	r16,0(sp)
    6ff0:	dec00504 	addi	sp,sp,20
    6ff4:	f800283a 	ret
    6ff8:	9009883a 	mov	r4,r18
    6ffc:	040bc83a 	sub	r5,zero,r16
    7000:	0009e600 	call	9e60 <_sbrk_r>
    7004:	00ffffc4 	movi	r3,-1
    7008:	10c00d26 	beq	r2,r3,7040 <_malloc_trim_r+0xe0>
    700c:	00c000b4 	movhi	r3,2
    7010:	18d4bf04 	addi	r3,r3,21244
    7014:	18800017 	ldw	r2,0(r3)
    7018:	99000217 	ldw	r4,8(r19)
    701c:	8c23c83a 	sub	r17,r17,r16
    7020:	8c400054 	ori	r17,r17,1
    7024:	1421c83a 	sub	r16,r2,r16
    7028:	24400115 	stw	r17,4(r4)
    702c:	9009883a 	mov	r4,r18
    7030:	1c000015 	stw	r16,0(r3)
    7034:	0010ecc0 	call	10ecc <__malloc_unlock>
    7038:	00800044 	movi	r2,1
    703c:	003fe706 	br	6fdc <__alt_mem_Flash_flash_data+0xf4006fdc>
    7040:	9009883a 	mov	r4,r18
    7044:	000b883a 	mov	r5,zero
    7048:	0009e600 	call	9e60 <_sbrk_r>
    704c:	99000217 	ldw	r4,8(r19)
    7050:	014003c4 	movi	r5,15
    7054:	1107c83a 	sub	r3,r2,r4
    7058:	28ffdd0e 	bge	r5,r3,6fd0 <__alt_mem_Flash_flash_data+0xf4006fd0>
    705c:	014000b4 	movhi	r5,2
    7060:	294c8804 	addi	r5,r5,12832
    7064:	29400017 	ldw	r5,0(r5)
    7068:	18c00054 	ori	r3,r3,1
    706c:	20c00115 	stw	r3,4(r4)
    7070:	00c000b4 	movhi	r3,2
    7074:	1145c83a 	sub	r2,r2,r5
    7078:	18d4bf04 	addi	r3,r3,21244
    707c:	18800015 	stw	r2,0(r3)
    7080:	003fd306 	br	6fd0 <__alt_mem_Flash_flash_data+0xf4006fd0>

00007084 <_free_r>:
    7084:	28004c26 	beq	r5,zero,71b8 <_free_r+0x134>
    7088:	defffd04 	addi	sp,sp,-12
    708c:	dc400115 	stw	r17,4(sp)
    7090:	dc000015 	stw	r16,0(sp)
    7094:	2023883a 	mov	r17,r4
    7098:	2821883a 	mov	r16,r5
    709c:	dfc00215 	stw	ra,8(sp)
    70a0:	0010dac0 	call	10dac <__malloc_lock>
    70a4:	813fff17 	ldw	r4,-4(r16)
    70a8:	00bfff84 	movi	r2,-2
    70ac:	024000b4 	movhi	r9,2
    70b0:	81bffe04 	addi	r6,r16,-8
    70b4:	2084703a 	and	r2,r4,r2
    70b8:	4a461d04 	addi	r9,r9,6260
    70bc:	308b883a 	add	r5,r6,r2
    70c0:	2a000117 	ldw	r8,4(r5)
    70c4:	49c00217 	ldw	r7,8(r9)
    70c8:	00ffff04 	movi	r3,-4
    70cc:	40c6703a 	and	r3,r8,r3
    70d0:	39405326 	beq	r7,r5,7220 <_free_r+0x19c>
    70d4:	28c00115 	stw	r3,4(r5)
    70d8:	2100004c 	andi	r4,r4,1
    70dc:	2000091e 	bne	r4,zero,7104 <_free_r+0x80>
    70e0:	81fffe17 	ldw	r7,-8(r16)
    70e4:	4a000204 	addi	r8,r9,8
    70e8:	31cdc83a 	sub	r6,r6,r7
    70ec:	31000217 	ldw	r4,8(r6)
    70f0:	11c5883a 	add	r2,r2,r7
    70f4:	22006126 	beq	r4,r8,727c <_free_r+0x1f8>
    70f8:	31c00317 	ldw	r7,12(r6)
    70fc:	21c00315 	stw	r7,12(r4)
    7100:	39000215 	stw	r4,8(r7)
    7104:	28c9883a 	add	r4,r5,r3
    7108:	21c00117 	ldw	r7,4(r4)
    710c:	39c0004c 	andi	r7,r7,1
    7110:	38000d1e 	bne	r7,zero,7148 <_free_r+0xc4>
    7114:	29000217 	ldw	r4,8(r5)
    7118:	10c5883a 	add	r2,r2,r3
    711c:	00c000b4 	movhi	r3,2
    7120:	18c61f04 	addi	r3,r3,6268
    7124:	20c07526 	beq	r4,r3,72fc <_free_r+0x278>
    7128:	29c00317 	ldw	r7,12(r5)
    712c:	11400054 	ori	r5,r2,1
    7130:	3087883a 	add	r3,r6,r2
    7134:	21c00315 	stw	r7,12(r4)
    7138:	39000215 	stw	r4,8(r7)
    713c:	31400115 	stw	r5,4(r6)
    7140:	18800015 	stw	r2,0(r3)
    7144:	00000406 	br	7158 <_free_r+0xd4>
    7148:	10c00054 	ori	r3,r2,1
    714c:	30c00115 	stw	r3,4(r6)
    7150:	3087883a 	add	r3,r6,r2
    7154:	18800015 	stw	r2,0(r3)
    7158:	00c07fc4 	movi	r3,511
    715c:	18801736 	bltu	r3,r2,71bc <_free_r+0x138>
    7160:	1004d0fa 	srli	r2,r2,3
    7164:	01400044 	movi	r5,1
    7168:	49000117 	ldw	r4,4(r9)
    716c:	1087883a 	add	r3,r2,r2
    7170:	18c7883a 	add	r3,r3,r3
    7174:	1005d0ba 	srai	r2,r2,2
    7178:	18c7883a 	add	r3,r3,r3
    717c:	1a47883a 	add	r3,r3,r9
    7180:	19c00217 	ldw	r7,8(r3)
    7184:	2884983a 	sll	r2,r5,r2
    7188:	30c00315 	stw	r3,12(r6)
    718c:	31c00215 	stw	r7,8(r6)
    7190:	1104b03a 	or	r2,r2,r4
    7194:	19800215 	stw	r6,8(r3)
    7198:	48800115 	stw	r2,4(r9)
    719c:	39800315 	stw	r6,12(r7)
    71a0:	8809883a 	mov	r4,r17
    71a4:	dfc00217 	ldw	ra,8(sp)
    71a8:	dc400117 	ldw	r17,4(sp)
    71ac:	dc000017 	ldw	r16,0(sp)
    71b0:	dec00304 	addi	sp,sp,12
    71b4:	0010ecc1 	jmpi	10ecc <__malloc_unlock>
    71b8:	f800283a 	ret
    71bc:	1006d27a 	srli	r3,r2,9
    71c0:	01000104 	movi	r4,4
    71c4:	20c04036 	bltu	r4,r3,72c8 <_free_r+0x244>
    71c8:	1006d1ba 	srli	r3,r2,6
    71cc:	19400e04 	addi	r5,r3,56
    71d0:	2947883a 	add	r3,r5,r5
    71d4:	18c7883a 	add	r3,r3,r3
    71d8:	18c7883a 	add	r3,r3,r3
    71dc:	1a49883a 	add	r4,r3,r9
    71e0:	20c00217 	ldw	r3,8(r4)
    71e4:	01c000b4 	movhi	r7,2
    71e8:	39c61d04 	addi	r7,r7,6260
    71ec:	19003b26 	beq	r3,r4,72dc <_free_r+0x258>
    71f0:	01ffff04 	movi	r7,-4
    71f4:	19400117 	ldw	r5,4(r3)
    71f8:	29ca703a 	and	r5,r5,r7
    71fc:	1140022e 	bgeu	r2,r5,7208 <_free_r+0x184>
    7200:	18c00217 	ldw	r3,8(r3)
    7204:	20fffb1e 	bne	r4,r3,71f4 <__alt_mem_Flash_flash_data+0xf40071f4>
    7208:	18800317 	ldw	r2,12(r3)
    720c:	30800315 	stw	r2,12(r6)
    7210:	30c00215 	stw	r3,8(r6)
    7214:	11800215 	stw	r6,8(r2)
    7218:	19800315 	stw	r6,12(r3)
    721c:	003fe006 	br	71a0 <__alt_mem_Flash_flash_data+0xf40071a0>
    7220:	2100004c 	andi	r4,r4,1
    7224:	1885883a 	add	r2,r3,r2
    7228:	2000071e 	bne	r4,zero,7248 <_free_r+0x1c4>
    722c:	817ffe17 	ldw	r5,-8(r16)
    7230:	314dc83a 	sub	r6,r6,r5
    7234:	30c00317 	ldw	r3,12(r6)
    7238:	31000217 	ldw	r4,8(r6)
    723c:	1145883a 	add	r2,r2,r5
    7240:	20c00315 	stw	r3,12(r4)
    7244:	19000215 	stw	r4,8(r3)
    7248:	10c00054 	ori	r3,r2,1
    724c:	30c00115 	stw	r3,4(r6)
    7250:	00c000b4 	movhi	r3,2
    7254:	18cc8904 	addi	r3,r3,12836
    7258:	18c00017 	ldw	r3,0(r3)
    725c:	49800215 	stw	r6,8(r9)
    7260:	10ffcf36 	bltu	r2,r3,71a0 <__alt_mem_Flash_flash_data+0xf40071a0>
    7264:	008000b4 	movhi	r2,2
    7268:	10947704 	addi	r2,r2,20956
    726c:	11400017 	ldw	r5,0(r2)
    7270:	8809883a 	mov	r4,r17
    7274:	0006f600 	call	6f60 <_malloc_trim_r>
    7278:	003fc906 	br	71a0 <__alt_mem_Flash_flash_data+0xf40071a0>
    727c:	28c9883a 	add	r4,r5,r3
    7280:	21000117 	ldw	r4,4(r4)
    7284:	2100004c 	andi	r4,r4,1
    7288:	20000a1e 	bne	r4,zero,72b4 <_free_r+0x230>
    728c:	29000317 	ldw	r4,12(r5)
    7290:	29400217 	ldw	r5,8(r5)
    7294:	10c5883a 	add	r2,r2,r3
    7298:	10c00054 	ori	r3,r2,1
    729c:	29000315 	stw	r4,12(r5)
    72a0:	21400215 	stw	r5,8(r4)
    72a4:	30c00115 	stw	r3,4(r6)
    72a8:	308d883a 	add	r6,r6,r2
    72ac:	30800015 	stw	r2,0(r6)
    72b0:	003fbb06 	br	71a0 <__alt_mem_Flash_flash_data+0xf40071a0>
    72b4:	10c00054 	ori	r3,r2,1
    72b8:	30c00115 	stw	r3,4(r6)
    72bc:	308d883a 	add	r6,r6,r2
    72c0:	30800015 	stw	r2,0(r6)
    72c4:	003fb606 	br	71a0 <__alt_mem_Flash_flash_data+0xf40071a0>
    72c8:	01000504 	movi	r4,20
    72cc:	20c01436 	bltu	r4,r3,7320 <_free_r+0x29c>
    72d0:	194016c4 	addi	r5,r3,91
    72d4:	2947883a 	add	r3,r5,r5
    72d8:	003fbe06 	br	71d4 <__alt_mem_Flash_flash_data+0xf40071d4>
    72dc:	280bd0ba 	srai	r5,r5,2
    72e0:	00800044 	movi	r2,1
    72e4:	39000117 	ldw	r4,4(r7)
    72e8:	114a983a 	sll	r5,r2,r5
    72ec:	1805883a 	mov	r2,r3
    72f0:	2908b03a 	or	r4,r5,r4
    72f4:	39000115 	stw	r4,4(r7)
    72f8:	003fc406 	br	720c <__alt_mem_Flash_flash_data+0xf400720c>
    72fc:	49800515 	stw	r6,20(r9)
    7300:	49800415 	stw	r6,16(r9)
    7304:	10c00054 	ori	r3,r2,1
    7308:	31000315 	stw	r4,12(r6)
    730c:	31000215 	stw	r4,8(r6)
    7310:	30c00115 	stw	r3,4(r6)
    7314:	308d883a 	add	r6,r6,r2
    7318:	30800015 	stw	r2,0(r6)
    731c:	003fa006 	br	71a0 <__alt_mem_Flash_flash_data+0xf40071a0>
    7320:	01001504 	movi	r4,84
    7324:	20c00436 	bltu	r4,r3,7338 <_free_r+0x2b4>
    7328:	1006d33a 	srli	r3,r2,12
    732c:	19401b84 	addi	r5,r3,110
    7330:	2947883a 	add	r3,r5,r5
    7334:	003fa706 	br	71d4 <__alt_mem_Flash_flash_data+0xf40071d4>
    7338:	01005504 	movi	r4,340
    733c:	20c00436 	bltu	r4,r3,7350 <_free_r+0x2cc>
    7340:	1006d3fa 	srli	r3,r2,15
    7344:	19401dc4 	addi	r5,r3,119
    7348:	2947883a 	add	r3,r5,r5
    734c:	003fa106 	br	71d4 <__alt_mem_Flash_flash_data+0xf40071d4>
    7350:	01015504 	movi	r4,1364
    7354:	20c00436 	bltu	r4,r3,7368 <_free_r+0x2e4>
    7358:	1006d4ba 	srli	r3,r2,18
    735c:	19401f04 	addi	r5,r3,124
    7360:	2947883a 	add	r3,r5,r5
    7364:	003f9b06 	br	71d4 <__alt_mem_Flash_flash_data+0xf40071d4>
    7368:	00c03f04 	movi	r3,252
    736c:	01401f84 	movi	r5,126
    7370:	003f9806 	br	71d4 <__alt_mem_Flash_flash_data+0xf40071d4>

00007374 <__sfvwrite_r>:
    7374:	30800217 	ldw	r2,8(r6)
    7378:	10006726 	beq	r2,zero,7518 <__sfvwrite_r+0x1a4>
    737c:	defff404 	addi	sp,sp,-48
    7380:	dd000615 	stw	r20,24(sp)
    7384:	2029883a 	mov	r20,r4
    7388:	2900030b 	ldhu	r4,12(r5)
    738c:	ddc00915 	stw	r23,36(sp)
    7390:	dc000215 	stw	r16,8(sp)
    7394:	dfc00b15 	stw	ra,44(sp)
    7398:	df000a15 	stw	fp,40(sp)
    739c:	dd800815 	stw	r22,32(sp)
    73a0:	dd400715 	stw	r21,28(sp)
    73a4:	dcc00515 	stw	r19,20(sp)
    73a8:	dc800415 	stw	r18,16(sp)
    73ac:	dc400315 	stw	r17,12(sp)
    73b0:	2080020c 	andi	r2,r4,8
    73b4:	2821883a 	mov	r16,r5
    73b8:	302f883a 	mov	r23,r6
    73bc:	10002726 	beq	r2,zero,745c <__sfvwrite_r+0xe8>
    73c0:	28800417 	ldw	r2,16(r5)
    73c4:	10002526 	beq	r2,zero,745c <__sfvwrite_r+0xe8>
    73c8:	2080008c 	andi	r2,r4,2
    73cc:	bc400017 	ldw	r17,0(r23)
    73d0:	10002a26 	beq	r2,zero,747c <__sfvwrite_r+0x108>
    73d4:	05600034 	movhi	r21,32768
    73d8:	0027883a 	mov	r19,zero
    73dc:	0025883a 	mov	r18,zero
    73e0:	ad7f0004 	addi	r21,r21,-1024
    73e4:	980d883a 	mov	r6,r19
    73e8:	a009883a 	mov	r4,r20
    73ec:	90004626 	beq	r18,zero,7508 <__sfvwrite_r+0x194>
    73f0:	900f883a 	mov	r7,r18
    73f4:	81400717 	ldw	r5,28(r16)
    73f8:	ac80022e 	bgeu	r21,r18,7404 <__sfvwrite_r+0x90>
    73fc:	01e00034 	movhi	r7,32768
    7400:	39ff0004 	addi	r7,r7,-1024
    7404:	80800917 	ldw	r2,36(r16)
    7408:	103ee83a 	callr	r2
    740c:	0080520e 	bge	zero,r2,7558 <__sfvwrite_r+0x1e4>
    7410:	b8c00217 	ldw	r3,8(r23)
    7414:	98a7883a 	add	r19,r19,r2
    7418:	90a5c83a 	sub	r18,r18,r2
    741c:	1885c83a 	sub	r2,r3,r2
    7420:	b8800215 	stw	r2,8(r23)
    7424:	103fef1e 	bne	r2,zero,73e4 <__alt_mem_Flash_flash_data+0xf40073e4>
    7428:	0005883a 	mov	r2,zero
    742c:	dfc00b17 	ldw	ra,44(sp)
    7430:	df000a17 	ldw	fp,40(sp)
    7434:	ddc00917 	ldw	r23,36(sp)
    7438:	dd800817 	ldw	r22,32(sp)
    743c:	dd400717 	ldw	r21,28(sp)
    7440:	dd000617 	ldw	r20,24(sp)
    7444:	dcc00517 	ldw	r19,20(sp)
    7448:	dc800417 	ldw	r18,16(sp)
    744c:	dc400317 	ldw	r17,12(sp)
    7450:	dc000217 	ldw	r16,8(sp)
    7454:	dec00c04 	addi	sp,sp,48
    7458:	f800283a 	ret
    745c:	a009883a 	mov	r4,r20
    7460:	800b883a 	mov	r5,r16
    7464:	0004eb00 	call	4eb0 <__swsetup_r>
    7468:	1000ec1e 	bne	r2,zero,781c <__sfvwrite_r+0x4a8>
    746c:	8100030b 	ldhu	r4,12(r16)
    7470:	bc400017 	ldw	r17,0(r23)
    7474:	2080008c 	andi	r2,r4,2
    7478:	103fd61e 	bne	r2,zero,73d4 <__alt_mem_Flash_flash_data+0xf40073d4>
    747c:	2080004c 	andi	r2,r4,1
    7480:	10003a1e 	bne	r2,zero,756c <__sfvwrite_r+0x1f8>
    7484:	0039883a 	mov	fp,zero
    7488:	0025883a 	mov	r18,zero
    748c:	90001a26 	beq	r18,zero,74f8 <__sfvwrite_r+0x184>
    7490:	2080800c 	andi	r2,r4,512
    7494:	85800217 	ldw	r22,8(r16)
    7498:	10007626 	beq	r2,zero,7674 <__sfvwrite_r+0x300>
    749c:	b027883a 	mov	r19,r22
    74a0:	95809436 	bltu	r18,r22,76f4 <__sfvwrite_r+0x380>
    74a4:	2081200c 	andi	r2,r4,1152
    74a8:	10009f1e 	bne	r2,zero,7728 <__sfvwrite_r+0x3b4>
    74ac:	81000017 	ldw	r4,0(r16)
    74b0:	e00b883a 	mov	r5,fp
    74b4:	980d883a 	mov	r6,r19
    74b8:	000861c0 	call	861c <memmove>
    74bc:	81000217 	ldw	r4,8(r16)
    74c0:	81400017 	ldw	r5,0(r16)
    74c4:	9005883a 	mov	r2,r18
    74c8:	2587c83a 	sub	r3,r4,r22
    74cc:	2ce7883a 	add	r19,r5,r19
    74d0:	80c00215 	stw	r3,8(r16)
    74d4:	84c00015 	stw	r19,0(r16)
    74d8:	b8c00217 	ldw	r3,8(r23)
    74dc:	e0b9883a 	add	fp,fp,r2
    74e0:	90a5c83a 	sub	r18,r18,r2
    74e4:	1885c83a 	sub	r2,r3,r2
    74e8:	b8800215 	stw	r2,8(r23)
    74ec:	103fce26 	beq	r2,zero,7428 <__alt_mem_Flash_flash_data+0xf4007428>
    74f0:	8100030b 	ldhu	r4,12(r16)
    74f4:	903fe61e 	bne	r18,zero,7490 <__alt_mem_Flash_flash_data+0xf4007490>
    74f8:	8f000017 	ldw	fp,0(r17)
    74fc:	8c800117 	ldw	r18,4(r17)
    7500:	8c400204 	addi	r17,r17,8
    7504:	003fe106 	br	748c <__alt_mem_Flash_flash_data+0xf400748c>
    7508:	8cc00017 	ldw	r19,0(r17)
    750c:	8c800117 	ldw	r18,4(r17)
    7510:	8c400204 	addi	r17,r17,8
    7514:	003fb306 	br	73e4 <__alt_mem_Flash_flash_data+0xf40073e4>
    7518:	0005883a 	mov	r2,zero
    751c:	f800283a 	ret
    7520:	00a00034 	movhi	r2,32768
    7524:	10bfffc4 	addi	r2,r2,-1
    7528:	9009883a 	mov	r4,r18
    752c:	1480012e 	bgeu	r2,r18,7534 <__sfvwrite_r+0x1c0>
    7530:	1009883a 	mov	r4,r2
    7534:	980b883a 	mov	r5,r19
    7538:	000dc100 	call	dc10 <__divsi3>
    753c:	81400717 	ldw	r5,28(r16)
    7540:	80c00917 	ldw	r3,36(r16)
    7544:	988f383a 	mul	r7,r19,r2
    7548:	a009883a 	mov	r4,r20
    754c:	e00d883a 	mov	r6,fp
    7550:	183ee83a 	callr	r3
    7554:	00bfe016 	blt	zero,r2,74d8 <__alt_mem_Flash_flash_data+0xf40074d8>
    7558:	8080030b 	ldhu	r2,12(r16)
    755c:	10801014 	ori	r2,r2,64
    7560:	8080030d 	sth	r2,12(r16)
    7564:	00bfffc4 	movi	r2,-1
    7568:	003fb006 	br	742c <__alt_mem_Flash_flash_data+0xf400742c>
    756c:	0027883a 	mov	r19,zero
    7570:	0011883a 	mov	r8,zero
    7574:	0039883a 	mov	fp,zero
    7578:	0025883a 	mov	r18,zero
    757c:	90001f26 	beq	r18,zero,75fc <__sfvwrite_r+0x288>
    7580:	40006026 	beq	r8,zero,7704 <__sfvwrite_r+0x390>
    7584:	982b883a 	mov	r21,r19
    7588:	94c0012e 	bgeu	r18,r19,7590 <__sfvwrite_r+0x21c>
    758c:	902b883a 	mov	r21,r18
    7590:	81000017 	ldw	r4,0(r16)
    7594:	80800417 	ldw	r2,16(r16)
    7598:	a82d883a 	mov	r22,r21
    759c:	81800217 	ldw	r6,8(r16)
    75a0:	81c00517 	ldw	r7,20(r16)
    75a4:	1100022e 	bgeu	r2,r4,75b0 <__sfvwrite_r+0x23c>
    75a8:	31c7883a 	add	r3,r6,r7
    75ac:	1d401816 	blt	r3,r21,7610 <__sfvwrite_r+0x29c>
    75b0:	a9c04416 	blt	r21,r7,76c4 <__sfvwrite_r+0x350>
    75b4:	80800917 	ldw	r2,36(r16)
    75b8:	81400717 	ldw	r5,28(r16)
    75bc:	a009883a 	mov	r4,r20
    75c0:	da000115 	stw	r8,4(sp)
    75c4:	e00d883a 	mov	r6,fp
    75c8:	103ee83a 	callr	r2
    75cc:	102d883a 	mov	r22,r2
    75d0:	da000117 	ldw	r8,4(sp)
    75d4:	00bfe00e 	bge	zero,r2,7558 <__alt_mem_Flash_flash_data+0xf4007558>
    75d8:	9da7c83a 	sub	r19,r19,r22
    75dc:	98001f26 	beq	r19,zero,765c <__sfvwrite_r+0x2e8>
    75e0:	b8800217 	ldw	r2,8(r23)
    75e4:	e5b9883a 	add	fp,fp,r22
    75e8:	95a5c83a 	sub	r18,r18,r22
    75ec:	15adc83a 	sub	r22,r2,r22
    75f0:	bd800215 	stw	r22,8(r23)
    75f4:	b03f8c26 	beq	r22,zero,7428 <__alt_mem_Flash_flash_data+0xf4007428>
    75f8:	903fe11e 	bne	r18,zero,7580 <__alt_mem_Flash_flash_data+0xf4007580>
    75fc:	8f000017 	ldw	fp,0(r17)
    7600:	8c800117 	ldw	r18,4(r17)
    7604:	0011883a 	mov	r8,zero
    7608:	8c400204 	addi	r17,r17,8
    760c:	003fdb06 	br	757c <__alt_mem_Flash_flash_data+0xf400757c>
    7610:	180d883a 	mov	r6,r3
    7614:	e00b883a 	mov	r5,fp
    7618:	da000115 	stw	r8,4(sp)
    761c:	d8c00015 	stw	r3,0(sp)
    7620:	000861c0 	call	861c <memmove>
    7624:	d8c00017 	ldw	r3,0(sp)
    7628:	80800017 	ldw	r2,0(r16)
    762c:	a009883a 	mov	r4,r20
    7630:	800b883a 	mov	r5,r16
    7634:	10c5883a 	add	r2,r2,r3
    7638:	80800015 	stw	r2,0(r16)
    763c:	d8c00015 	stw	r3,0(sp)
    7640:	0006b340 	call	6b34 <_fflush_r>
    7644:	d8c00017 	ldw	r3,0(sp)
    7648:	da000117 	ldw	r8,4(sp)
    764c:	103fc21e 	bne	r2,zero,7558 <__alt_mem_Flash_flash_data+0xf4007558>
    7650:	182d883a 	mov	r22,r3
    7654:	9da7c83a 	sub	r19,r19,r22
    7658:	983fe11e 	bne	r19,zero,75e0 <__alt_mem_Flash_flash_data+0xf40075e0>
    765c:	a009883a 	mov	r4,r20
    7660:	800b883a 	mov	r5,r16
    7664:	0006b340 	call	6b34 <_fflush_r>
    7668:	103fbb1e 	bne	r2,zero,7558 <__alt_mem_Flash_flash_data+0xf4007558>
    766c:	0011883a 	mov	r8,zero
    7670:	003fdb06 	br	75e0 <__alt_mem_Flash_flash_data+0xf40075e0>
    7674:	81000017 	ldw	r4,0(r16)
    7678:	80800417 	ldw	r2,16(r16)
    767c:	11000236 	bltu	r2,r4,7688 <__sfvwrite_r+0x314>
    7680:	84c00517 	ldw	r19,20(r16)
    7684:	94ffa62e 	bgeu	r18,r19,7520 <__alt_mem_Flash_flash_data+0xf4007520>
    7688:	9027883a 	mov	r19,r18
    768c:	b480012e 	bgeu	r22,r18,7694 <__sfvwrite_r+0x320>
    7690:	b027883a 	mov	r19,r22
    7694:	e00b883a 	mov	r5,fp
    7698:	980d883a 	mov	r6,r19
    769c:	000861c0 	call	861c <memmove>
    76a0:	80800217 	ldw	r2,8(r16)
    76a4:	80c00017 	ldw	r3,0(r16)
    76a8:	14c5c83a 	sub	r2,r2,r19
    76ac:	1cc7883a 	add	r3,r3,r19
    76b0:	80800215 	stw	r2,8(r16)
    76b4:	80c00015 	stw	r3,0(r16)
    76b8:	10004326 	beq	r2,zero,77c8 <__sfvwrite_r+0x454>
    76bc:	9805883a 	mov	r2,r19
    76c0:	003f8506 	br	74d8 <__alt_mem_Flash_flash_data+0xf40074d8>
    76c4:	a80d883a 	mov	r6,r21
    76c8:	e00b883a 	mov	r5,fp
    76cc:	da000115 	stw	r8,4(sp)
    76d0:	000861c0 	call	861c <memmove>
    76d4:	80800217 	ldw	r2,8(r16)
    76d8:	80c00017 	ldw	r3,0(r16)
    76dc:	da000117 	ldw	r8,4(sp)
    76e0:	1545c83a 	sub	r2,r2,r21
    76e4:	1d6b883a 	add	r21,r3,r21
    76e8:	80800215 	stw	r2,8(r16)
    76ec:	85400015 	stw	r21,0(r16)
    76f0:	003fb906 	br	75d8 <__alt_mem_Flash_flash_data+0xf40075d8>
    76f4:	81000017 	ldw	r4,0(r16)
    76f8:	902d883a 	mov	r22,r18
    76fc:	9027883a 	mov	r19,r18
    7700:	003f6b06 	br	74b0 <__alt_mem_Flash_flash_data+0xf40074b0>
    7704:	e009883a 	mov	r4,fp
    7708:	01400284 	movi	r5,10
    770c:	900d883a 	mov	r6,r18
    7710:	00083fc0 	call	83fc <memchr>
    7714:	10003e26 	beq	r2,zero,7810 <__sfvwrite_r+0x49c>
    7718:	10800044 	addi	r2,r2,1
    771c:	1727c83a 	sub	r19,r2,fp
    7720:	02000044 	movi	r8,1
    7724:	003f9706 	br	7584 <__alt_mem_Flash_flash_data+0xf4007584>
    7728:	80800517 	ldw	r2,20(r16)
    772c:	81400417 	ldw	r5,16(r16)
    7730:	80c00017 	ldw	r3,0(r16)
    7734:	10a7883a 	add	r19,r2,r2
    7738:	9885883a 	add	r2,r19,r2
    773c:	1026d7fa 	srli	r19,r2,31
    7740:	196bc83a 	sub	r21,r3,r5
    7744:	a9800044 	addi	r6,r21,1
    7748:	9885883a 	add	r2,r19,r2
    774c:	1027d07a 	srai	r19,r2,1
    7750:	3485883a 	add	r2,r6,r18
    7754:	980d883a 	mov	r6,r19
    7758:	9880022e 	bgeu	r19,r2,7764 <__sfvwrite_r+0x3f0>
    775c:	1027883a 	mov	r19,r2
    7760:	100d883a 	mov	r6,r2
    7764:	2101000c 	andi	r4,r4,1024
    7768:	20001c26 	beq	r4,zero,77dc <__sfvwrite_r+0x468>
    776c:	a009883a 	mov	r4,r20
    7770:	300b883a 	mov	r5,r6
    7774:	0007c540 	call	7c54 <_malloc_r>
    7778:	102d883a 	mov	r22,r2
    777c:	10002926 	beq	r2,zero,7824 <__sfvwrite_r+0x4b0>
    7780:	81400417 	ldw	r5,16(r16)
    7784:	1009883a 	mov	r4,r2
    7788:	a80d883a 	mov	r6,r21
    778c:	00084e40 	call	84e4 <memcpy>
    7790:	8080030b 	ldhu	r2,12(r16)
    7794:	00fedfc4 	movi	r3,-1153
    7798:	10c4703a 	and	r2,r2,r3
    779c:	10802014 	ori	r2,r2,128
    77a0:	8080030d 	sth	r2,12(r16)
    77a4:	b549883a 	add	r4,r22,r21
    77a8:	9d4bc83a 	sub	r5,r19,r21
    77ac:	85800415 	stw	r22,16(r16)
    77b0:	84c00515 	stw	r19,20(r16)
    77b4:	81000015 	stw	r4,0(r16)
    77b8:	902d883a 	mov	r22,r18
    77bc:	81400215 	stw	r5,8(r16)
    77c0:	9027883a 	mov	r19,r18
    77c4:	003f3a06 	br	74b0 <__alt_mem_Flash_flash_data+0xf40074b0>
    77c8:	a009883a 	mov	r4,r20
    77cc:	800b883a 	mov	r5,r16
    77d0:	0006b340 	call	6b34 <_fflush_r>
    77d4:	103fb926 	beq	r2,zero,76bc <__alt_mem_Flash_flash_data+0xf40076bc>
    77d8:	003f5f06 	br	7558 <__alt_mem_Flash_flash_data+0xf4007558>
    77dc:	a009883a 	mov	r4,r20
    77e0:	00098840 	call	9884 <_realloc_r>
    77e4:	102d883a 	mov	r22,r2
    77e8:	103fee1e 	bne	r2,zero,77a4 <__alt_mem_Flash_flash_data+0xf40077a4>
    77ec:	81400417 	ldw	r5,16(r16)
    77f0:	a009883a 	mov	r4,r20
    77f4:	00070840 	call	7084 <_free_r>
    77f8:	8080030b 	ldhu	r2,12(r16)
    77fc:	00ffdfc4 	movi	r3,-129
    7800:	1884703a 	and	r2,r3,r2
    7804:	00c00304 	movi	r3,12
    7808:	a0c00015 	stw	r3,0(r20)
    780c:	003f5306 	br	755c <__alt_mem_Flash_flash_data+0xf400755c>
    7810:	94c00044 	addi	r19,r18,1
    7814:	02000044 	movi	r8,1
    7818:	003f5a06 	br	7584 <__alt_mem_Flash_flash_data+0xf4007584>
    781c:	00bfffc4 	movi	r2,-1
    7820:	003f0206 	br	742c <__alt_mem_Flash_flash_data+0xf400742c>
    7824:	00800304 	movi	r2,12
    7828:	a0800015 	stw	r2,0(r20)
    782c:	8080030b 	ldhu	r2,12(r16)
    7830:	003f4a06 	br	755c <__alt_mem_Flash_flash_data+0xf400755c>

00007834 <_fwalk>:
    7834:	defff704 	addi	sp,sp,-36
    7838:	dd000415 	stw	r20,16(sp)
    783c:	dfc00815 	stw	ra,32(sp)
    7840:	ddc00715 	stw	r23,28(sp)
    7844:	dd800615 	stw	r22,24(sp)
    7848:	dd400515 	stw	r21,20(sp)
    784c:	dcc00315 	stw	r19,12(sp)
    7850:	dc800215 	stw	r18,8(sp)
    7854:	dc400115 	stw	r17,4(sp)
    7858:	dc000015 	stw	r16,0(sp)
    785c:	2500b804 	addi	r20,r4,736
    7860:	a0002326 	beq	r20,zero,78f0 <_fwalk+0xbc>
    7864:	282b883a 	mov	r21,r5
    7868:	002f883a 	mov	r23,zero
    786c:	05800044 	movi	r22,1
    7870:	04ffffc4 	movi	r19,-1
    7874:	a4400117 	ldw	r17,4(r20)
    7878:	a4800217 	ldw	r18,8(r20)
    787c:	8c7fffc4 	addi	r17,r17,-1
    7880:	88000d16 	blt	r17,zero,78b8 <_fwalk+0x84>
    7884:	94000304 	addi	r16,r18,12
    7888:	94800384 	addi	r18,r18,14
    788c:	80c0000b 	ldhu	r3,0(r16)
    7890:	8c7fffc4 	addi	r17,r17,-1
    7894:	813ffd04 	addi	r4,r16,-12
    7898:	b0c0042e 	bgeu	r22,r3,78ac <_fwalk+0x78>
    789c:	90c0000f 	ldh	r3,0(r18)
    78a0:	1cc00226 	beq	r3,r19,78ac <_fwalk+0x78>
    78a4:	a83ee83a 	callr	r21
    78a8:	b8aeb03a 	or	r23,r23,r2
    78ac:	84001a04 	addi	r16,r16,104
    78b0:	94801a04 	addi	r18,r18,104
    78b4:	8cfff51e 	bne	r17,r19,788c <__alt_mem_Flash_flash_data+0xf400788c>
    78b8:	a5000017 	ldw	r20,0(r20)
    78bc:	a03fed1e 	bne	r20,zero,7874 <__alt_mem_Flash_flash_data+0xf4007874>
    78c0:	b805883a 	mov	r2,r23
    78c4:	dfc00817 	ldw	ra,32(sp)
    78c8:	ddc00717 	ldw	r23,28(sp)
    78cc:	dd800617 	ldw	r22,24(sp)
    78d0:	dd400517 	ldw	r21,20(sp)
    78d4:	dd000417 	ldw	r20,16(sp)
    78d8:	dcc00317 	ldw	r19,12(sp)
    78dc:	dc800217 	ldw	r18,8(sp)
    78e0:	dc400117 	ldw	r17,4(sp)
    78e4:	dc000017 	ldw	r16,0(sp)
    78e8:	dec00904 	addi	sp,sp,36
    78ec:	f800283a 	ret
    78f0:	002f883a 	mov	r23,zero
    78f4:	003ff206 	br	78c0 <__alt_mem_Flash_flash_data+0xf40078c0>

000078f8 <_fwalk_reent>:
    78f8:	defff704 	addi	sp,sp,-36
    78fc:	dd400515 	stw	r21,20(sp)
    7900:	dfc00815 	stw	ra,32(sp)
    7904:	ddc00715 	stw	r23,28(sp)
    7908:	dd800615 	stw	r22,24(sp)
    790c:	dd000415 	stw	r20,16(sp)
    7910:	dcc00315 	stw	r19,12(sp)
    7914:	dc800215 	stw	r18,8(sp)
    7918:	dc400115 	stw	r17,4(sp)
    791c:	dc000015 	stw	r16,0(sp)
    7920:	2540b804 	addi	r21,r4,736
    7924:	a8002326 	beq	r21,zero,79b4 <_fwalk_reent+0xbc>
    7928:	2829883a 	mov	r20,r5
    792c:	202d883a 	mov	r22,r4
    7930:	002f883a 	mov	r23,zero
    7934:	04c00044 	movi	r19,1
    7938:	04bfffc4 	movi	r18,-1
    793c:	ac400117 	ldw	r17,4(r21)
    7940:	ac000217 	ldw	r16,8(r21)
    7944:	8c7fffc4 	addi	r17,r17,-1
    7948:	88000c16 	blt	r17,zero,797c <_fwalk_reent+0x84>
    794c:	84000304 	addi	r16,r16,12
    7950:	80c0000b 	ldhu	r3,0(r16)
    7954:	8c7fffc4 	addi	r17,r17,-1
    7958:	817ffd04 	addi	r5,r16,-12
    795c:	98c0052e 	bgeu	r19,r3,7974 <_fwalk_reent+0x7c>
    7960:	80c0008f 	ldh	r3,2(r16)
    7964:	b009883a 	mov	r4,r22
    7968:	1c800226 	beq	r3,r18,7974 <_fwalk_reent+0x7c>
    796c:	a03ee83a 	callr	r20
    7970:	b8aeb03a 	or	r23,r23,r2
    7974:	84001a04 	addi	r16,r16,104
    7978:	8cbff51e 	bne	r17,r18,7950 <__alt_mem_Flash_flash_data+0xf4007950>
    797c:	ad400017 	ldw	r21,0(r21)
    7980:	a83fee1e 	bne	r21,zero,793c <__alt_mem_Flash_flash_data+0xf400793c>
    7984:	b805883a 	mov	r2,r23
    7988:	dfc00817 	ldw	ra,32(sp)
    798c:	ddc00717 	ldw	r23,28(sp)
    7990:	dd800617 	ldw	r22,24(sp)
    7994:	dd400517 	ldw	r21,20(sp)
    7998:	dd000417 	ldw	r20,16(sp)
    799c:	dcc00317 	ldw	r19,12(sp)
    79a0:	dc800217 	ldw	r18,8(sp)
    79a4:	dc400117 	ldw	r17,4(sp)
    79a8:	dc000017 	ldw	r16,0(sp)
    79ac:	dec00904 	addi	sp,sp,36
    79b0:	f800283a 	ret
    79b4:	002f883a 	mov	r23,zero
    79b8:	003ff206 	br	7984 <__alt_mem_Flash_flash_data+0xf4007984>

000079bc <_setlocale_r>:
    79bc:	30001b26 	beq	r6,zero,7a2c <_setlocale_r+0x70>
    79c0:	014000b4 	movhi	r5,2
    79c4:	defffe04 	addi	sp,sp,-8
    79c8:	29439f04 	addi	r5,r5,3708
    79cc:	3009883a 	mov	r4,r6
    79d0:	dc000015 	stw	r16,0(sp)
    79d4:	dfc00115 	stw	ra,4(sp)
    79d8:	3021883a 	mov	r16,r6
    79dc:	0009ff00 	call	9ff0 <strcmp>
    79e0:	1000061e 	bne	r2,zero,79fc <_setlocale_r+0x40>
    79e4:	008000b4 	movhi	r2,2
    79e8:	10839e04 	addi	r2,r2,3704
    79ec:	dfc00117 	ldw	ra,4(sp)
    79f0:	dc000017 	ldw	r16,0(sp)
    79f4:	dec00204 	addi	sp,sp,8
    79f8:	f800283a 	ret
    79fc:	014000b4 	movhi	r5,2
    7a00:	29439e04 	addi	r5,r5,3704
    7a04:	8009883a 	mov	r4,r16
    7a08:	0009ff00 	call	9ff0 <strcmp>
    7a0c:	103ff526 	beq	r2,zero,79e4 <__alt_mem_Flash_flash_data+0xf40079e4>
    7a10:	014000b4 	movhi	r5,2
    7a14:	29438104 	addi	r5,r5,3588
    7a18:	8009883a 	mov	r4,r16
    7a1c:	0009ff00 	call	9ff0 <strcmp>
    7a20:	103ff026 	beq	r2,zero,79e4 <__alt_mem_Flash_flash_data+0xf40079e4>
    7a24:	0005883a 	mov	r2,zero
    7a28:	003ff006 	br	79ec <__alt_mem_Flash_flash_data+0xf40079ec>
    7a2c:	008000b4 	movhi	r2,2
    7a30:	10839e04 	addi	r2,r2,3704
    7a34:	f800283a 	ret

00007a38 <__locale_charset>:
    7a38:	008000b4 	movhi	r2,2
    7a3c:	10860704 	addi	r2,r2,6172
    7a40:	f800283a 	ret

00007a44 <__locale_mb_cur_max>:
    7a44:	008000b4 	movhi	r2,2
    7a48:	108c8704 	addi	r2,r2,12828
    7a4c:	10800017 	ldw	r2,0(r2)
    7a50:	f800283a 	ret

00007a54 <__locale_msgcharset>:
    7a54:	008000b4 	movhi	r2,2
    7a58:	1085ff04 	addi	r2,r2,6140
    7a5c:	f800283a 	ret

00007a60 <__locale_cjk_lang>:
    7a60:	0005883a 	mov	r2,zero
    7a64:	f800283a 	ret

00007a68 <_localeconv_r>:
    7a68:	008000b4 	movhi	r2,2
    7a6c:	10860f04 	addi	r2,r2,6204
    7a70:	f800283a 	ret

00007a74 <setlocale>:
    7a74:	00c000b4 	movhi	r3,2
    7a78:	18cc8604 	addi	r3,r3,12824
    7a7c:	2005883a 	mov	r2,r4
    7a80:	19000017 	ldw	r4,0(r3)
    7a84:	280d883a 	mov	r6,r5
    7a88:	100b883a 	mov	r5,r2
    7a8c:	00079bc1 	jmpi	79bc <_setlocale_r>

00007a90 <localeconv>:
    7a90:	008000b4 	movhi	r2,2
    7a94:	10860f04 	addi	r2,r2,6204
    7a98:	f800283a 	ret

00007a9c <__smakebuf_r>:
    7a9c:	2880030b 	ldhu	r2,12(r5)
    7aa0:	10c0008c 	andi	r3,r2,2
    7aa4:	1800401e 	bne	r3,zero,7ba8 <__smakebuf_r+0x10c>
    7aa8:	deffec04 	addi	sp,sp,-80
    7aac:	dc000f15 	stw	r16,60(sp)
    7ab0:	2821883a 	mov	r16,r5
    7ab4:	2940038f 	ldh	r5,14(r5)
    7ab8:	dc401015 	stw	r17,64(sp)
    7abc:	dfc01315 	stw	ra,76(sp)
    7ac0:	dcc01215 	stw	r19,72(sp)
    7ac4:	dc801115 	stw	r18,68(sp)
    7ac8:	2023883a 	mov	r17,r4
    7acc:	28001b16 	blt	r5,zero,7b3c <__smakebuf_r+0xa0>
    7ad0:	d80d883a 	mov	r6,sp
    7ad4:	000cd080 	call	cd08 <_fstat_r>
    7ad8:	10001716 	blt	r2,zero,7b38 <__smakebuf_r+0x9c>
    7adc:	d8800117 	ldw	r2,4(sp)
    7ae0:	00e00014 	movui	r3,32768
    7ae4:	10bc000c 	andi	r2,r2,61440
    7ae8:	10c03726 	beq	r2,r3,7bc8 <__smakebuf_r+0x12c>
    7aec:	80c0030b 	ldhu	r3,12(r16)
    7af0:	18c20014 	ori	r3,r3,2048
    7af4:	80c0030d 	sth	r3,12(r16)
    7af8:	00c80004 	movi	r3,8192
    7afc:	10c03c1e 	bne	r2,r3,7bf0 <__smakebuf_r+0x154>
    7b00:	8140038f 	ldh	r5,14(r16)
    7b04:	8809883a 	mov	r4,r17
    7b08:	000cd600 	call	cd60 <_isatty_r>
    7b0c:	10004e26 	beq	r2,zero,7c48 <__smakebuf_r+0x1ac>
    7b10:	8080030b 	ldhu	r2,12(r16)
    7b14:	04c00044 	movi	r19,1
    7b18:	80c010c4 	addi	r3,r16,67
    7b1c:	14c4b03a 	or	r2,r2,r19
    7b20:	8080030d 	sth	r2,12(r16)
    7b24:	80c00015 	stw	r3,0(r16)
    7b28:	80c00415 	stw	r3,16(r16)
    7b2c:	84c00515 	stw	r19,20(r16)
    7b30:	04810004 	movi	r18,1024
    7b34:	00000706 	br	7b54 <__smakebuf_r+0xb8>
    7b38:	8080030b 	ldhu	r2,12(r16)
    7b3c:	10c0200c 	andi	r3,r2,128
    7b40:	18001f1e 	bne	r3,zero,7bc0 <__smakebuf_r+0x124>
    7b44:	04810004 	movi	r18,1024
    7b48:	10820014 	ori	r2,r2,2048
    7b4c:	8080030d 	sth	r2,12(r16)
    7b50:	0027883a 	mov	r19,zero
    7b54:	8809883a 	mov	r4,r17
    7b58:	900b883a 	mov	r5,r18
    7b5c:	0007c540 	call	7c54 <_malloc_r>
    7b60:	10002e26 	beq	r2,zero,7c1c <__smakebuf_r+0x180>
    7b64:	80c0030b 	ldhu	r3,12(r16)
    7b68:	01000034 	movhi	r4,0
    7b6c:	211af404 	addi	r4,r4,27600
    7b70:	89000f15 	stw	r4,60(r17)
    7b74:	18c02014 	ori	r3,r3,128
    7b78:	80c0030d 	sth	r3,12(r16)
    7b7c:	80800015 	stw	r2,0(r16)
    7b80:	80800415 	stw	r2,16(r16)
    7b84:	84800515 	stw	r18,20(r16)
    7b88:	98001c1e 	bne	r19,zero,7bfc <__smakebuf_r+0x160>
    7b8c:	dfc01317 	ldw	ra,76(sp)
    7b90:	dcc01217 	ldw	r19,72(sp)
    7b94:	dc801117 	ldw	r18,68(sp)
    7b98:	dc401017 	ldw	r17,64(sp)
    7b9c:	dc000f17 	ldw	r16,60(sp)
    7ba0:	dec01404 	addi	sp,sp,80
    7ba4:	f800283a 	ret
    7ba8:	288010c4 	addi	r2,r5,67
    7bac:	28800015 	stw	r2,0(r5)
    7bb0:	28800415 	stw	r2,16(r5)
    7bb4:	00800044 	movi	r2,1
    7bb8:	28800515 	stw	r2,20(r5)
    7bbc:	f800283a 	ret
    7bc0:	04801004 	movi	r18,64
    7bc4:	003fe006 	br	7b48 <__alt_mem_Flash_flash_data+0xf4007b48>
    7bc8:	81000a17 	ldw	r4,40(r16)
    7bcc:	00c00074 	movhi	r3,1
    7bd0:	18e7e304 	addi	r3,r3,-24692
    7bd4:	20ffc51e 	bne	r4,r3,7aec <__alt_mem_Flash_flash_data+0xf4007aec>
    7bd8:	80c0030b 	ldhu	r3,12(r16)
    7bdc:	01010004 	movi	r4,1024
    7be0:	81001315 	stw	r4,76(r16)
    7be4:	1906b03a 	or	r3,r3,r4
    7be8:	80c0030d 	sth	r3,12(r16)
    7bec:	003fc206 	br	7af8 <__alt_mem_Flash_flash_data+0xf4007af8>
    7bf0:	0027883a 	mov	r19,zero
    7bf4:	04810004 	movi	r18,1024
    7bf8:	003fd606 	br	7b54 <__alt_mem_Flash_flash_data+0xf4007b54>
    7bfc:	8140038f 	ldh	r5,14(r16)
    7c00:	8809883a 	mov	r4,r17
    7c04:	000cd600 	call	cd60 <_isatty_r>
    7c08:	103fe026 	beq	r2,zero,7b8c <__alt_mem_Flash_flash_data+0xf4007b8c>
    7c0c:	8080030b 	ldhu	r2,12(r16)
    7c10:	10800054 	ori	r2,r2,1
    7c14:	8080030d 	sth	r2,12(r16)
    7c18:	003fdc06 	br	7b8c <__alt_mem_Flash_flash_data+0xf4007b8c>
    7c1c:	8080030b 	ldhu	r2,12(r16)
    7c20:	10c0800c 	andi	r3,r2,512
    7c24:	183fd91e 	bne	r3,zero,7b8c <__alt_mem_Flash_flash_data+0xf4007b8c>
    7c28:	10800094 	ori	r2,r2,2
    7c2c:	80c010c4 	addi	r3,r16,67
    7c30:	8080030d 	sth	r2,12(r16)
    7c34:	00800044 	movi	r2,1
    7c38:	80c00015 	stw	r3,0(r16)
    7c3c:	80c00415 	stw	r3,16(r16)
    7c40:	80800515 	stw	r2,20(r16)
    7c44:	003fd106 	br	7b8c <__alt_mem_Flash_flash_data+0xf4007b8c>
    7c48:	04c00044 	movi	r19,1
    7c4c:	04810004 	movi	r18,1024
    7c50:	003fc006 	br	7b54 <__alt_mem_Flash_flash_data+0xf4007b54>

00007c54 <_malloc_r>:
    7c54:	defff504 	addi	sp,sp,-44
    7c58:	dc800315 	stw	r18,12(sp)
    7c5c:	dfc00a15 	stw	ra,40(sp)
    7c60:	df000915 	stw	fp,36(sp)
    7c64:	ddc00815 	stw	r23,32(sp)
    7c68:	dd800715 	stw	r22,28(sp)
    7c6c:	dd400615 	stw	r21,24(sp)
    7c70:	dd000515 	stw	r20,20(sp)
    7c74:	dcc00415 	stw	r19,16(sp)
    7c78:	dc400215 	stw	r17,8(sp)
    7c7c:	dc000115 	stw	r16,4(sp)
    7c80:	288002c4 	addi	r2,r5,11
    7c84:	00c00584 	movi	r3,22
    7c88:	2025883a 	mov	r18,r4
    7c8c:	18802a2e 	bgeu	r3,r2,7d38 <_malloc_r+0xe4>
    7c90:	047ffe04 	movi	r17,-8
    7c94:	1462703a 	and	r17,r2,r17
    7c98:	88009e16 	blt	r17,zero,7f14 <_malloc_r+0x2c0>
    7c9c:	89409d36 	bltu	r17,r5,7f14 <_malloc_r+0x2c0>
    7ca0:	0010dac0 	call	10dac <__malloc_lock>
    7ca4:	00807dc4 	movi	r2,503
    7ca8:	14402736 	bltu	r2,r17,7d48 <_malloc_r+0xf4>
    7cac:	8806d0fa 	srli	r3,r17,3
    7cb0:	04c000b4 	movhi	r19,2
    7cb4:	9cc61d04 	addi	r19,r19,6260
    7cb8:	18c5883a 	add	r2,r3,r3
    7cbc:	1085883a 	add	r2,r2,r2
    7cc0:	1085883a 	add	r2,r2,r2
    7cc4:	9885883a 	add	r2,r19,r2
    7cc8:	14000317 	ldw	r16,12(r2)
    7ccc:	80814a26 	beq	r16,r2,81f8 <_malloc_r+0x5a4>
    7cd0:	80c00117 	ldw	r3,4(r16)
    7cd4:	81000317 	ldw	r4,12(r16)
    7cd8:	00bfff04 	movi	r2,-4
    7cdc:	1884703a 	and	r2,r3,r2
    7ce0:	81400217 	ldw	r5,8(r16)
    7ce4:	8085883a 	add	r2,r16,r2
    7ce8:	10c00117 	ldw	r3,4(r2)
    7cec:	29000315 	stw	r4,12(r5)
    7cf0:	21400215 	stw	r5,8(r4)
    7cf4:	18c00054 	ori	r3,r3,1
    7cf8:	10c00115 	stw	r3,4(r2)
    7cfc:	9009883a 	mov	r4,r18
    7d00:	0010ecc0 	call	10ecc <__malloc_unlock>
    7d04:	80800204 	addi	r2,r16,8
    7d08:	dfc00a17 	ldw	ra,40(sp)
    7d0c:	df000917 	ldw	fp,36(sp)
    7d10:	ddc00817 	ldw	r23,32(sp)
    7d14:	dd800717 	ldw	r22,28(sp)
    7d18:	dd400617 	ldw	r21,24(sp)
    7d1c:	dd000517 	ldw	r20,20(sp)
    7d20:	dcc00417 	ldw	r19,16(sp)
    7d24:	dc800317 	ldw	r18,12(sp)
    7d28:	dc400217 	ldw	r17,8(sp)
    7d2c:	dc000117 	ldw	r16,4(sp)
    7d30:	dec00b04 	addi	sp,sp,44
    7d34:	f800283a 	ret
    7d38:	04400404 	movi	r17,16
    7d3c:	89407536 	bltu	r17,r5,7f14 <_malloc_r+0x2c0>
    7d40:	0010dac0 	call	10dac <__malloc_lock>
    7d44:	003fd906 	br	7cac <__alt_mem_Flash_flash_data+0xf4007cac>
    7d48:	8806d27a 	srli	r3,r17,9
    7d4c:	18007526 	beq	r3,zero,7f24 <_malloc_r+0x2d0>
    7d50:	00800104 	movi	r2,4
    7d54:	10c0ef36 	bltu	r2,r3,8114 <_malloc_r+0x4c0>
    7d58:	8806d1ba 	srli	r3,r17,6
    7d5c:	19c00e04 	addi	r7,r3,56
    7d60:	39cb883a 	add	r5,r7,r7
    7d64:	04c000b4 	movhi	r19,2
    7d68:	294b883a 	add	r5,r5,r5
    7d6c:	9cc61d04 	addi	r19,r19,6260
    7d70:	294b883a 	add	r5,r5,r5
    7d74:	994b883a 	add	r5,r19,r5
    7d78:	2c000317 	ldw	r16,12(r5)
    7d7c:	2c000e26 	beq	r5,r16,7db8 <_malloc_r+0x164>
    7d80:	80800117 	ldw	r2,4(r16)
    7d84:	01bfff04 	movi	r6,-4
    7d88:	010003c4 	movi	r4,15
    7d8c:	1184703a 	and	r2,r2,r6
    7d90:	1447c83a 	sub	r3,r2,r17
    7d94:	20c00716 	blt	r4,r3,7db4 <_malloc_r+0x160>
    7d98:	1800650e 	bge	r3,zero,7f30 <_malloc_r+0x2dc>
    7d9c:	84000317 	ldw	r16,12(r16)
    7da0:	2c000526 	beq	r5,r16,7db8 <_malloc_r+0x164>
    7da4:	80800117 	ldw	r2,4(r16)
    7da8:	1184703a 	and	r2,r2,r6
    7dac:	1447c83a 	sub	r3,r2,r17
    7db0:	20fff90e 	bge	r4,r3,7d98 <__alt_mem_Flash_flash_data+0xf4007d98>
    7db4:	39ffffc4 	addi	r7,r7,-1
    7db8:	38c00044 	addi	r3,r7,1
    7dbc:	018000b4 	movhi	r6,2
    7dc0:	9c000417 	ldw	r16,16(r19)
    7dc4:	31861d04 	addi	r6,r6,6260
    7dc8:	32400204 	addi	r9,r6,8
    7dcc:	82410326 	beq	r16,r9,81dc <_malloc_r+0x588>
    7dd0:	81000117 	ldw	r4,4(r16)
    7dd4:	00bfff04 	movi	r2,-4
    7dd8:	208e703a 	and	r7,r4,r2
    7ddc:	3c45c83a 	sub	r2,r7,r17
    7de0:	010003c4 	movi	r4,15
    7de4:	2080ee16 	blt	r4,r2,81a0 <_malloc_r+0x54c>
    7de8:	32400515 	stw	r9,20(r6)
    7dec:	32400415 	stw	r9,16(r6)
    7df0:	1000510e 	bge	r2,zero,7f38 <_malloc_r+0x2e4>
    7df4:	00807fc4 	movi	r2,511
    7df8:	11c0ce36 	bltu	r2,r7,8134 <_malloc_r+0x4e0>
    7dfc:	3808d0fa 	srli	r4,r7,3
    7e00:	01c00044 	movi	r7,1
    7e04:	30800117 	ldw	r2,4(r6)
    7e08:	210b883a 	add	r5,r4,r4
    7e0c:	294b883a 	add	r5,r5,r5
    7e10:	2009d0ba 	srai	r4,r4,2
    7e14:	294b883a 	add	r5,r5,r5
    7e18:	298b883a 	add	r5,r5,r6
    7e1c:	2a000217 	ldw	r8,8(r5)
    7e20:	3908983a 	sll	r4,r7,r4
    7e24:	81400315 	stw	r5,12(r16)
    7e28:	82000215 	stw	r8,8(r16)
    7e2c:	2088b03a 	or	r4,r4,r2
    7e30:	2c000215 	stw	r16,8(r5)
    7e34:	31000115 	stw	r4,4(r6)
    7e38:	44000315 	stw	r16,12(r8)
    7e3c:	1805d0ba 	srai	r2,r3,2
    7e40:	01400044 	movi	r5,1
    7e44:	288a983a 	sll	r5,r5,r2
    7e48:	21404336 	bltu	r4,r5,7f58 <_malloc_r+0x304>
    7e4c:	2144703a 	and	r2,r4,r5
    7e50:	10000a1e 	bne	r2,zero,7e7c <_malloc_r+0x228>
    7e54:	00bfff04 	movi	r2,-4
    7e58:	294b883a 	add	r5,r5,r5
    7e5c:	1886703a 	and	r3,r3,r2
    7e60:	2144703a 	and	r2,r4,r5
    7e64:	18c00104 	addi	r3,r3,4
    7e68:	1000041e 	bne	r2,zero,7e7c <_malloc_r+0x228>
    7e6c:	294b883a 	add	r5,r5,r5
    7e70:	2144703a 	and	r2,r4,r5
    7e74:	18c00104 	addi	r3,r3,4
    7e78:	103ffc26 	beq	r2,zero,7e6c <__alt_mem_Flash_flash_data+0xf4007e6c>
    7e7c:	023fff04 	movi	r8,-4
    7e80:	01c003c4 	movi	r7,15
    7e84:	18c5883a 	add	r2,r3,r3
    7e88:	1085883a 	add	r2,r2,r2
    7e8c:	1085883a 	add	r2,r2,r2
    7e90:	9895883a 	add	r10,r19,r2
    7e94:	52c00304 	addi	r11,r10,12
    7e98:	1819883a 	mov	r12,r3
    7e9c:	5c000017 	ldw	r16,0(r11)
    7ea0:	59bffd04 	addi	r6,r11,-12
    7ea4:	8180041e 	bne	r16,r6,7eb8 <_malloc_r+0x264>
    7ea8:	0000ce06 	br	81e4 <_malloc_r+0x590>
    7eac:	2000d70e 	bge	r4,zero,820c <_malloc_r+0x5b8>
    7eb0:	84000317 	ldw	r16,12(r16)
    7eb4:	8180cb26 	beq	r16,r6,81e4 <_malloc_r+0x590>
    7eb8:	80800117 	ldw	r2,4(r16)
    7ebc:	1204703a 	and	r2,r2,r8
    7ec0:	1449c83a 	sub	r4,r2,r17
    7ec4:	393ff90e 	bge	r7,r4,7eac <__alt_mem_Flash_flash_data+0xf4007eac>
    7ec8:	80800317 	ldw	r2,12(r16)
    7ecc:	80c00217 	ldw	r3,8(r16)
    7ed0:	89400054 	ori	r5,r17,1
    7ed4:	81400115 	stw	r5,4(r16)
    7ed8:	18800315 	stw	r2,12(r3)
    7edc:	10c00215 	stw	r3,8(r2)
    7ee0:	8463883a 	add	r17,r16,r17
    7ee4:	9c400515 	stw	r17,20(r19)
    7ee8:	9c400415 	stw	r17,16(r19)
    7eec:	20800054 	ori	r2,r4,1
    7ef0:	88800115 	stw	r2,4(r17)
    7ef4:	8a400315 	stw	r9,12(r17)
    7ef8:	8a400215 	stw	r9,8(r17)
    7efc:	8923883a 	add	r17,r17,r4
    7f00:	89000015 	stw	r4,0(r17)
    7f04:	9009883a 	mov	r4,r18
    7f08:	0010ecc0 	call	10ecc <__malloc_unlock>
    7f0c:	80800204 	addi	r2,r16,8
    7f10:	003f7d06 	br	7d08 <__alt_mem_Flash_flash_data+0xf4007d08>
    7f14:	00800304 	movi	r2,12
    7f18:	90800015 	stw	r2,0(r18)
    7f1c:	0005883a 	mov	r2,zero
    7f20:	003f7906 	br	7d08 <__alt_mem_Flash_flash_data+0xf4007d08>
    7f24:	01401f84 	movi	r5,126
    7f28:	01c00fc4 	movi	r7,63
    7f2c:	003f8d06 	br	7d64 <__alt_mem_Flash_flash_data+0xf4007d64>
    7f30:	81000317 	ldw	r4,12(r16)
    7f34:	003f6a06 	br	7ce0 <__alt_mem_Flash_flash_data+0xf4007ce0>
    7f38:	81c5883a 	add	r2,r16,r7
    7f3c:	10c00117 	ldw	r3,4(r2)
    7f40:	9009883a 	mov	r4,r18
    7f44:	18c00054 	ori	r3,r3,1
    7f48:	10c00115 	stw	r3,4(r2)
    7f4c:	0010ecc0 	call	10ecc <__malloc_unlock>
    7f50:	80800204 	addi	r2,r16,8
    7f54:	003f6c06 	br	7d08 <__alt_mem_Flash_flash_data+0xf4007d08>
    7f58:	9c000217 	ldw	r16,8(r19)
    7f5c:	00bfff04 	movi	r2,-4
    7f60:	85800117 	ldw	r22,4(r16)
    7f64:	b0ac703a 	and	r22,r22,r2
    7f68:	b4400336 	bltu	r22,r17,7f78 <_malloc_r+0x324>
    7f6c:	b445c83a 	sub	r2,r22,r17
    7f70:	00c003c4 	movi	r3,15
    7f74:	18805d16 	blt	r3,r2,80ec <_malloc_r+0x498>
    7f78:	05c000b4 	movhi	r23,2
    7f7c:	008000b4 	movhi	r2,2
    7f80:	bdcc8804 	addi	r23,r23,12832
    7f84:	10947704 	addi	r2,r2,20956
    7f88:	15400017 	ldw	r21,0(r2)
    7f8c:	b9000017 	ldw	r4,0(r23)
    7f90:	00ffffc4 	movi	r3,-1
    7f94:	858d883a 	add	r6,r16,r22
    7f98:	8d6b883a 	add	r21,r17,r21
    7f9c:	20c0e426 	beq	r4,r3,8330 <_malloc_r+0x6dc>
    7fa0:	ad4403c4 	addi	r21,r21,4111
    7fa4:	00fc0004 	movi	r3,-4096
    7fa8:	a8ea703a 	and	r21,r21,r3
    7fac:	9009883a 	mov	r4,r18
    7fb0:	a80b883a 	mov	r5,r21
    7fb4:	d9800015 	stw	r6,0(sp)
    7fb8:	0009e600 	call	9e60 <_sbrk_r>
    7fbc:	00ffffc4 	movi	r3,-1
    7fc0:	1029883a 	mov	r20,r2
    7fc4:	d9800017 	ldw	r6,0(sp)
    7fc8:	10c0a426 	beq	r2,r3,825c <_malloc_r+0x608>
    7fcc:	1180a236 	bltu	r2,r6,8258 <_malloc_r+0x604>
    7fd0:	070000b4 	movhi	fp,2
    7fd4:	e714bf04 	addi	fp,fp,21244
    7fd8:	e0c00017 	ldw	r3,0(fp)
    7fdc:	a8c7883a 	add	r3,r21,r3
    7fe0:	e0c00015 	stw	r3,0(fp)
    7fe4:	3500da26 	beq	r6,r20,8350 <_malloc_r+0x6fc>
    7fe8:	b9000017 	ldw	r4,0(r23)
    7fec:	00bfffc4 	movi	r2,-1
    7ff0:	2080e426 	beq	r4,r2,8384 <_malloc_r+0x730>
    7ff4:	a185c83a 	sub	r2,r20,r6
    7ff8:	1885883a 	add	r2,r3,r2
    7ffc:	e0800015 	stw	r2,0(fp)
    8000:	a0c001cc 	andi	r3,r20,7
    8004:	1800b526 	beq	r3,zero,82dc <_malloc_r+0x688>
    8008:	a0e9c83a 	sub	r20,r20,r3
    800c:	00840204 	movi	r2,4104
    8010:	a5000204 	addi	r20,r20,8
    8014:	10c7c83a 	sub	r3,r2,r3
    8018:	a545883a 	add	r2,r20,r21
    801c:	1083ffcc 	andi	r2,r2,4095
    8020:	18abc83a 	sub	r21,r3,r2
    8024:	9009883a 	mov	r4,r18
    8028:	a80b883a 	mov	r5,r21
    802c:	0009e600 	call	9e60 <_sbrk_r>
    8030:	00ffffc4 	movi	r3,-1
    8034:	10c0d026 	beq	r2,r3,8378 <_malloc_r+0x724>
    8038:	1507c83a 	sub	r3,r2,r20
    803c:	a8c7883a 	add	r3,r21,r3
    8040:	18c00054 	ori	r3,r3,1
    8044:	e0800017 	ldw	r2,0(fp)
    8048:	9d000215 	stw	r20,8(r19)
    804c:	a0c00115 	stw	r3,4(r20)
    8050:	a887883a 	add	r3,r21,r2
    8054:	e0c00015 	stw	r3,0(fp)
    8058:	84c00e26 	beq	r16,r19,8094 <_malloc_r+0x440>
    805c:	018003c4 	movi	r6,15
    8060:	3580a02e 	bgeu	r6,r22,82e4 <_malloc_r+0x690>
    8064:	81400117 	ldw	r5,4(r16)
    8068:	013ffe04 	movi	r4,-8
    806c:	b0bffd04 	addi	r2,r22,-12
    8070:	1104703a 	and	r2,r2,r4
    8074:	2900004c 	andi	r4,r5,1
    8078:	1108b03a 	or	r4,r2,r4
    807c:	81000115 	stw	r4,4(r16)
    8080:	01400144 	movi	r5,5
    8084:	8089883a 	add	r4,r16,r2
    8088:	21400115 	stw	r5,4(r4)
    808c:	21400215 	stw	r5,8(r4)
    8090:	3080c036 	bltu	r6,r2,8394 <_malloc_r+0x740>
    8094:	008000b4 	movhi	r2,2
    8098:	10947604 	addi	r2,r2,20952
    809c:	11000017 	ldw	r4,0(r2)
    80a0:	20c0012e 	bgeu	r4,r3,80a8 <_malloc_r+0x454>
    80a4:	10c00015 	stw	r3,0(r2)
    80a8:	008000b4 	movhi	r2,2
    80ac:	10947504 	addi	r2,r2,20948
    80b0:	11000017 	ldw	r4,0(r2)
    80b4:	9c000217 	ldw	r16,8(r19)
    80b8:	20c0012e 	bgeu	r4,r3,80c0 <_malloc_r+0x46c>
    80bc:	10c00015 	stw	r3,0(r2)
    80c0:	80c00117 	ldw	r3,4(r16)
    80c4:	00bfff04 	movi	r2,-4
    80c8:	1886703a 	and	r3,r3,r2
    80cc:	1c45c83a 	sub	r2,r3,r17
    80d0:	1c400236 	bltu	r3,r17,80dc <_malloc_r+0x488>
    80d4:	00c003c4 	movi	r3,15
    80d8:	18800416 	blt	r3,r2,80ec <_malloc_r+0x498>
    80dc:	9009883a 	mov	r4,r18
    80e0:	0010ecc0 	call	10ecc <__malloc_unlock>
    80e4:	0005883a 	mov	r2,zero
    80e8:	003f0706 	br	7d08 <__alt_mem_Flash_flash_data+0xf4007d08>
    80ec:	88c00054 	ori	r3,r17,1
    80f0:	80c00115 	stw	r3,4(r16)
    80f4:	8463883a 	add	r17,r16,r17
    80f8:	10800054 	ori	r2,r2,1
    80fc:	9c400215 	stw	r17,8(r19)
    8100:	88800115 	stw	r2,4(r17)
    8104:	9009883a 	mov	r4,r18
    8108:	0010ecc0 	call	10ecc <__malloc_unlock>
    810c:	80800204 	addi	r2,r16,8
    8110:	003efd06 	br	7d08 <__alt_mem_Flash_flash_data+0xf4007d08>
    8114:	00800504 	movi	r2,20
    8118:	10c0482e 	bgeu	r2,r3,823c <_malloc_r+0x5e8>
    811c:	00801504 	movi	r2,84
    8120:	10c06836 	bltu	r2,r3,82c4 <_malloc_r+0x670>
    8124:	8806d33a 	srli	r3,r17,12
    8128:	19c01b84 	addi	r7,r3,110
    812c:	39cb883a 	add	r5,r7,r7
    8130:	003f0c06 	br	7d64 <__alt_mem_Flash_flash_data+0xf4007d64>
    8134:	3804d27a 	srli	r2,r7,9
    8138:	01000104 	movi	r4,4
    813c:	2080422e 	bgeu	r4,r2,8248 <_malloc_r+0x5f4>
    8140:	01000504 	movi	r4,20
    8144:	20807c36 	bltu	r4,r2,8338 <_malloc_r+0x6e4>
    8148:	110016c4 	addi	r4,r2,91
    814c:	210b883a 	add	r5,r4,r4
    8150:	294b883a 	add	r5,r5,r5
    8154:	294b883a 	add	r5,r5,r5
    8158:	994b883a 	add	r5,r19,r5
    815c:	28800217 	ldw	r2,8(r5)
    8160:	020000b4 	movhi	r8,2
    8164:	42061d04 	addi	r8,r8,6260
    8168:	11406326 	beq	r2,r5,82f8 <_malloc_r+0x6a4>
    816c:	01bfff04 	movi	r6,-4
    8170:	11000117 	ldw	r4,4(r2)
    8174:	2188703a 	and	r4,r4,r6
    8178:	3900022e 	bgeu	r7,r4,8184 <_malloc_r+0x530>
    817c:	10800217 	ldw	r2,8(r2)
    8180:	28bffb1e 	bne	r5,r2,8170 <__alt_mem_Flash_flash_data+0xf4008170>
    8184:	11800317 	ldw	r6,12(r2)
    8188:	99000117 	ldw	r4,4(r19)
    818c:	81800315 	stw	r6,12(r16)
    8190:	80800215 	stw	r2,8(r16)
    8194:	34000215 	stw	r16,8(r6)
    8198:	14000315 	stw	r16,12(r2)
    819c:	003f2706 	br	7e3c <__alt_mem_Flash_flash_data+0xf4007e3c>
    81a0:	88c00054 	ori	r3,r17,1
    81a4:	80c00115 	stw	r3,4(r16)
    81a8:	8463883a 	add	r17,r16,r17
    81ac:	34400515 	stw	r17,20(r6)
    81b0:	34400415 	stw	r17,16(r6)
    81b4:	10c00054 	ori	r3,r2,1
    81b8:	8a400315 	stw	r9,12(r17)
    81bc:	8a400215 	stw	r9,8(r17)
    81c0:	88c00115 	stw	r3,4(r17)
    81c4:	88a3883a 	add	r17,r17,r2
    81c8:	88800015 	stw	r2,0(r17)
    81cc:	9009883a 	mov	r4,r18
    81d0:	0010ecc0 	call	10ecc <__malloc_unlock>
    81d4:	80800204 	addi	r2,r16,8
    81d8:	003ecb06 	br	7d08 <__alt_mem_Flash_flash_data+0xf4007d08>
    81dc:	31000117 	ldw	r4,4(r6)
    81e0:	003f1606 	br	7e3c <__alt_mem_Flash_flash_data+0xf4007e3c>
    81e4:	63000044 	addi	r12,r12,1
    81e8:	608000cc 	andi	r2,r12,3
    81ec:	5ac00204 	addi	r11,r11,8
    81f0:	103f2a1e 	bne	r2,zero,7e9c <__alt_mem_Flash_flash_data+0xf4007e9c>
    81f4:	00002106 	br	827c <_malloc_r+0x628>
    81f8:	80800204 	addi	r2,r16,8
    81fc:	84000517 	ldw	r16,20(r16)
    8200:	143eb31e 	bne	r2,r16,7cd0 <__alt_mem_Flash_flash_data+0xf4007cd0>
    8204:	18c00084 	addi	r3,r3,2
    8208:	003eec06 	br	7dbc <__alt_mem_Flash_flash_data+0xf4007dbc>
    820c:	8085883a 	add	r2,r16,r2
    8210:	10c00117 	ldw	r3,4(r2)
    8214:	81000317 	ldw	r4,12(r16)
    8218:	81400217 	ldw	r5,8(r16)
    821c:	18c00054 	ori	r3,r3,1
    8220:	10c00115 	stw	r3,4(r2)
    8224:	29000315 	stw	r4,12(r5)
    8228:	21400215 	stw	r5,8(r4)
    822c:	9009883a 	mov	r4,r18
    8230:	0010ecc0 	call	10ecc <__malloc_unlock>
    8234:	80800204 	addi	r2,r16,8
    8238:	003eb306 	br	7d08 <__alt_mem_Flash_flash_data+0xf4007d08>
    823c:	19c016c4 	addi	r7,r3,91
    8240:	39cb883a 	add	r5,r7,r7
    8244:	003ec706 	br	7d64 <__alt_mem_Flash_flash_data+0xf4007d64>
    8248:	3804d1ba 	srli	r2,r7,6
    824c:	11000e04 	addi	r4,r2,56
    8250:	210b883a 	add	r5,r4,r4
    8254:	003fbe06 	br	8150 <__alt_mem_Flash_flash_data+0xf4008150>
    8258:	84ff5d26 	beq	r16,r19,7fd0 <__alt_mem_Flash_flash_data+0xf4007fd0>
    825c:	9c000217 	ldw	r16,8(r19)
    8260:	00bfff04 	movi	r2,-4
    8264:	80c00117 	ldw	r3,4(r16)
    8268:	1886703a 	and	r3,r3,r2
    826c:	003f9706 	br	80cc <__alt_mem_Flash_flash_data+0xf40080cc>
    8270:	52800017 	ldw	r10,0(r10)
    8274:	18ffffc4 	addi	r3,r3,-1
    8278:	50805c1e 	bne	r10,r2,83ec <_malloc_r+0x798>
    827c:	190000cc 	andi	r4,r3,3
    8280:	50bffe04 	addi	r2,r10,-8
    8284:	203ffa1e 	bne	r4,zero,8270 <__alt_mem_Flash_flash_data+0xf4008270>
    8288:	98800117 	ldw	r2,4(r19)
    828c:	0146303a 	nor	r3,zero,r5
    8290:	1884703a 	and	r2,r3,r2
    8294:	98800115 	stw	r2,4(r19)
    8298:	294b883a 	add	r5,r5,r5
    829c:	117f2e36 	bltu	r2,r5,7f58 <__alt_mem_Flash_flash_data+0xf4007f58>
    82a0:	283f2d26 	beq	r5,zero,7f58 <__alt_mem_Flash_flash_data+0xf4007f58>
    82a4:	1146703a 	and	r3,r2,r5
    82a8:	1800521e 	bne	r3,zero,83f4 <_malloc_r+0x7a0>
    82ac:	6007883a 	mov	r3,r12
    82b0:	294b883a 	add	r5,r5,r5
    82b4:	1148703a 	and	r4,r2,r5
    82b8:	18c00104 	addi	r3,r3,4
    82bc:	203ffc26 	beq	r4,zero,82b0 <__alt_mem_Flash_flash_data+0xf40082b0>
    82c0:	003ef006 	br	7e84 <__alt_mem_Flash_flash_data+0xf4007e84>
    82c4:	00805504 	movi	r2,340
    82c8:	10c01336 	bltu	r2,r3,8318 <_malloc_r+0x6c4>
    82cc:	8806d3fa 	srli	r3,r17,15
    82d0:	19c01dc4 	addi	r7,r3,119
    82d4:	39cb883a 	add	r5,r7,r7
    82d8:	003ea206 	br	7d64 <__alt_mem_Flash_flash_data+0xf4007d64>
    82dc:	00c40004 	movi	r3,4096
    82e0:	003f4d06 	br	8018 <__alt_mem_Flash_flash_data+0xf4008018>
    82e4:	00800044 	movi	r2,1
    82e8:	a0800115 	stw	r2,4(r20)
    82ec:	a021883a 	mov	r16,r20
    82f0:	0007883a 	mov	r3,zero
    82f4:	003f7506 	br	80cc <__alt_mem_Flash_flash_data+0xf40080cc>
    82f8:	200bd0ba 	srai	r5,r4,2
    82fc:	01800044 	movi	r6,1
    8300:	41000117 	ldw	r4,4(r8)
    8304:	314a983a 	sll	r5,r6,r5
    8308:	100d883a 	mov	r6,r2
    830c:	2908b03a 	or	r4,r5,r4
    8310:	41000115 	stw	r4,4(r8)
    8314:	003f9d06 	br	818c <__alt_mem_Flash_flash_data+0xf400818c>
    8318:	00815504 	movi	r2,1364
    831c:	10c01336 	bltu	r2,r3,836c <_malloc_r+0x718>
    8320:	8806d4ba 	srli	r3,r17,18
    8324:	19c01f04 	addi	r7,r3,124
    8328:	39cb883a 	add	r5,r7,r7
    832c:	003e8d06 	br	7d64 <__alt_mem_Flash_flash_data+0xf4007d64>
    8330:	ad400404 	addi	r21,r21,16
    8334:	003f1d06 	br	7fac <__alt_mem_Flash_flash_data+0xf4007fac>
    8338:	01001504 	movi	r4,84
    833c:	20801c36 	bltu	r4,r2,83b0 <_malloc_r+0x75c>
    8340:	3804d33a 	srli	r2,r7,12
    8344:	11001b84 	addi	r4,r2,110
    8348:	210b883a 	add	r5,r4,r4
    834c:	003f8006 	br	8150 <__alt_mem_Flash_flash_data+0xf4008150>
    8350:	3083ffcc 	andi	r2,r6,4095
    8354:	103f241e 	bne	r2,zero,7fe8 <__alt_mem_Flash_flash_data+0xf4007fe8>
    8358:	99000217 	ldw	r4,8(r19)
    835c:	ad85883a 	add	r2,r21,r22
    8360:	10800054 	ori	r2,r2,1
    8364:	20800115 	stw	r2,4(r4)
    8368:	003f4a06 	br	8094 <__alt_mem_Flash_flash_data+0xf4008094>
    836c:	01403f04 	movi	r5,252
    8370:	01c01f84 	movi	r7,126
    8374:	003e7b06 	br	7d64 <__alt_mem_Flash_flash_data+0xf4007d64>
    8378:	00c00044 	movi	r3,1
    837c:	002b883a 	mov	r21,zero
    8380:	003f3006 	br	8044 <__alt_mem_Flash_flash_data+0xf4008044>
    8384:	008000b4 	movhi	r2,2
    8388:	108c8804 	addi	r2,r2,12832
    838c:	15000015 	stw	r20,0(r2)
    8390:	003f1b06 	br	8000 <__alt_mem_Flash_flash_data+0xf4008000>
    8394:	9009883a 	mov	r4,r18
    8398:	81400204 	addi	r5,r16,8
    839c:	00070840 	call	7084 <_free_r>
    83a0:	008000b4 	movhi	r2,2
    83a4:	1094bf04 	addi	r2,r2,21244
    83a8:	10c00017 	ldw	r3,0(r2)
    83ac:	003f3906 	br	8094 <__alt_mem_Flash_flash_data+0xf4008094>
    83b0:	01005504 	movi	r4,340
    83b4:	20800436 	bltu	r4,r2,83c8 <_malloc_r+0x774>
    83b8:	3804d3fa 	srli	r2,r7,15
    83bc:	11001dc4 	addi	r4,r2,119
    83c0:	210b883a 	add	r5,r4,r4
    83c4:	003f6206 	br	8150 <__alt_mem_Flash_flash_data+0xf4008150>
    83c8:	01015504 	movi	r4,1364
    83cc:	20800436 	bltu	r4,r2,83e0 <_malloc_r+0x78c>
    83d0:	3804d4ba 	srli	r2,r7,18
    83d4:	11001f04 	addi	r4,r2,124
    83d8:	210b883a 	add	r5,r4,r4
    83dc:	003f5c06 	br	8150 <__alt_mem_Flash_flash_data+0xf4008150>
    83e0:	01403f04 	movi	r5,252
    83e4:	01001f84 	movi	r4,126
    83e8:	003f5906 	br	8150 <__alt_mem_Flash_flash_data+0xf4008150>
    83ec:	98800117 	ldw	r2,4(r19)
    83f0:	003fa906 	br	8298 <__alt_mem_Flash_flash_data+0xf4008298>
    83f4:	6007883a 	mov	r3,r12
    83f8:	003ea206 	br	7e84 <__alt_mem_Flash_flash_data+0xf4007e84>

000083fc <memchr>:
    83fc:	208000cc 	andi	r2,r4,3
    8400:	280f883a 	mov	r7,r5
    8404:	10003526 	beq	r2,zero,84dc <memchr+0xe0>
    8408:	30bfffc4 	addi	r2,r6,-1
    840c:	30001b26 	beq	r6,zero,847c <memchr+0x80>
    8410:	21800003 	ldbu	r6,0(r4)
    8414:	28c03fcc 	andi	r3,r5,255
    8418:	30c01a26 	beq	r6,r3,8484 <memchr+0x88>
    841c:	180d883a 	mov	r6,r3
    8420:	00000406 	br	8434 <memchr+0x38>
    8424:	10001526 	beq	r2,zero,847c <memchr+0x80>
    8428:	20c00003 	ldbu	r3,0(r4)
    842c:	10bfffc4 	addi	r2,r2,-1
    8430:	19801426 	beq	r3,r6,8484 <memchr+0x88>
    8434:	21000044 	addi	r4,r4,1
    8438:	20c000cc 	andi	r3,r4,3
    843c:	183ff91e 	bne	r3,zero,8424 <__alt_mem_Flash_flash_data+0xf4008424>
    8440:	024000c4 	movi	r9,3
    8444:	48801136 	bltu	r9,r2,848c <memchr+0x90>
    8448:	10000c26 	beq	r2,zero,847c <memchr+0x80>
    844c:	20c00003 	ldbu	r3,0(r4)
    8450:	29403fcc 	andi	r5,r5,255
    8454:	19400b26 	beq	r3,r5,8484 <memchr+0x88>
    8458:	20c00044 	addi	r3,r4,1
    845c:	2085883a 	add	r2,r4,r2
    8460:	39803fcc 	andi	r6,r7,255
    8464:	00000306 	br	8474 <memchr+0x78>
    8468:	18c00044 	addi	r3,r3,1
    846c:	197fffc3 	ldbu	r5,-1(r3)
    8470:	29800426 	beq	r5,r6,8484 <memchr+0x88>
    8474:	1809883a 	mov	r4,r3
    8478:	18bffb1e 	bne	r3,r2,8468 <__alt_mem_Flash_flash_data+0xf4008468>
    847c:	0005883a 	mov	r2,zero
    8480:	f800283a 	ret
    8484:	2005883a 	mov	r2,r4
    8488:	f800283a 	ret
    848c:	28c03fcc 	andi	r3,r5,255
    8490:	1810923a 	slli	r8,r3,8
    8494:	02ffbff4 	movhi	r11,65279
    8498:	02a02074 	movhi	r10,32897
    849c:	40c6b03a 	or	r3,r8,r3
    84a0:	1810943a 	slli	r8,r3,16
    84a4:	5affbfc4 	addi	r11,r11,-257
    84a8:	52a02004 	addi	r10,r10,-32640
    84ac:	40d0b03a 	or	r8,r8,r3
    84b0:	20c00017 	ldw	r3,0(r4)
    84b4:	40c6f03a 	xor	r3,r8,r3
    84b8:	1acd883a 	add	r6,r3,r11
    84bc:	00c6303a 	nor	r3,zero,r3
    84c0:	30c6703a 	and	r3,r6,r3
    84c4:	1a86703a 	and	r3,r3,r10
    84c8:	183fdf1e 	bne	r3,zero,8448 <__alt_mem_Flash_flash_data+0xf4008448>
    84cc:	10bfff04 	addi	r2,r2,-4
    84d0:	21000104 	addi	r4,r4,4
    84d4:	48bff636 	bltu	r9,r2,84b0 <__alt_mem_Flash_flash_data+0xf40084b0>
    84d8:	003fdb06 	br	8448 <__alt_mem_Flash_flash_data+0xf4008448>
    84dc:	3005883a 	mov	r2,r6
    84e0:	003fd706 	br	8440 <__alt_mem_Flash_flash_data+0xf4008440>

000084e4 <memcpy>:
    84e4:	deffff04 	addi	sp,sp,-4
    84e8:	dc000015 	stw	r16,0(sp)
    84ec:	00c003c4 	movi	r3,15
    84f0:	2005883a 	mov	r2,r4
    84f4:	1980432e 	bgeu	r3,r6,8604 <memcpy+0x120>
    84f8:	2146b03a 	or	r3,r4,r5
    84fc:	18c000cc 	andi	r3,r3,3
    8500:	1800421e 	bne	r3,zero,860c <memcpy+0x128>
    8504:	343ffc04 	addi	r16,r6,-16
    8508:	8020d13a 	srli	r16,r16,4
    850c:	28c00104 	addi	r3,r5,4
    8510:	23400104 	addi	r13,r4,4
    8514:	801e913a 	slli	r15,r16,4
    8518:	2b000204 	addi	r12,r5,8
    851c:	22c00204 	addi	r11,r4,8
    8520:	7bc00504 	addi	r15,r15,20
    8524:	2a800304 	addi	r10,r5,12
    8528:	22400304 	addi	r9,r4,12
    852c:	2bdf883a 	add	r15,r5,r15
    8530:	2811883a 	mov	r8,r5
    8534:	200f883a 	mov	r7,r4
    8538:	41000017 	ldw	r4,0(r8)
    853c:	39c00404 	addi	r7,r7,16
    8540:	18c00404 	addi	r3,r3,16
    8544:	393ffc15 	stw	r4,-16(r7)
    8548:	1bbffc17 	ldw	r14,-16(r3)
    854c:	6b400404 	addi	r13,r13,16
    8550:	5ac00404 	addi	r11,r11,16
    8554:	6bbffc15 	stw	r14,-16(r13)
    8558:	63800017 	ldw	r14,0(r12)
    855c:	4a400404 	addi	r9,r9,16
    8560:	42000404 	addi	r8,r8,16
    8564:	5bbffc15 	stw	r14,-16(r11)
    8568:	53800017 	ldw	r14,0(r10)
    856c:	63000404 	addi	r12,r12,16
    8570:	52800404 	addi	r10,r10,16
    8574:	4bbffc15 	stw	r14,-16(r9)
    8578:	1bffef1e 	bne	r3,r15,8538 <__alt_mem_Flash_flash_data+0xf4008538>
    857c:	81c00044 	addi	r7,r16,1
    8580:	380e913a 	slli	r7,r7,4
    8584:	310003cc 	andi	r4,r6,15
    8588:	02c000c4 	movi	r11,3
    858c:	11c7883a 	add	r3,r2,r7
    8590:	29cb883a 	add	r5,r5,r7
    8594:	59001f2e 	bgeu	r11,r4,8614 <memcpy+0x130>
    8598:	1813883a 	mov	r9,r3
    859c:	2811883a 	mov	r8,r5
    85a0:	200f883a 	mov	r7,r4
    85a4:	42800017 	ldw	r10,0(r8)
    85a8:	4a400104 	addi	r9,r9,4
    85ac:	39ffff04 	addi	r7,r7,-4
    85b0:	4abfff15 	stw	r10,-4(r9)
    85b4:	42000104 	addi	r8,r8,4
    85b8:	59fffa36 	bltu	r11,r7,85a4 <__alt_mem_Flash_flash_data+0xf40085a4>
    85bc:	213fff04 	addi	r4,r4,-4
    85c0:	2008d0ba 	srli	r4,r4,2
    85c4:	318000cc 	andi	r6,r6,3
    85c8:	21000044 	addi	r4,r4,1
    85cc:	2109883a 	add	r4,r4,r4
    85d0:	2109883a 	add	r4,r4,r4
    85d4:	1907883a 	add	r3,r3,r4
    85d8:	290b883a 	add	r5,r5,r4
    85dc:	30000626 	beq	r6,zero,85f8 <memcpy+0x114>
    85e0:	198d883a 	add	r6,r3,r6
    85e4:	29c00003 	ldbu	r7,0(r5)
    85e8:	18c00044 	addi	r3,r3,1
    85ec:	29400044 	addi	r5,r5,1
    85f0:	19ffffc5 	stb	r7,-1(r3)
    85f4:	19bffb1e 	bne	r3,r6,85e4 <__alt_mem_Flash_flash_data+0xf40085e4>
    85f8:	dc000017 	ldw	r16,0(sp)
    85fc:	dec00104 	addi	sp,sp,4
    8600:	f800283a 	ret
    8604:	2007883a 	mov	r3,r4
    8608:	003ff406 	br	85dc <__alt_mem_Flash_flash_data+0xf40085dc>
    860c:	2007883a 	mov	r3,r4
    8610:	003ff306 	br	85e0 <__alt_mem_Flash_flash_data+0xf40085e0>
    8614:	200d883a 	mov	r6,r4
    8618:	003ff006 	br	85dc <__alt_mem_Flash_flash_data+0xf40085dc>

0000861c <memmove>:
    861c:	2005883a 	mov	r2,r4
    8620:	29000b2e 	bgeu	r5,r4,8650 <memmove+0x34>
    8624:	298f883a 	add	r7,r5,r6
    8628:	21c0092e 	bgeu	r4,r7,8650 <memmove+0x34>
    862c:	2187883a 	add	r3,r4,r6
    8630:	198bc83a 	sub	r5,r3,r6
    8634:	30004b26 	beq	r6,zero,8764 <memmove+0x148>
    8638:	39ffffc4 	addi	r7,r7,-1
    863c:	39000003 	ldbu	r4,0(r7)
    8640:	18ffffc4 	addi	r3,r3,-1
    8644:	19000005 	stb	r4,0(r3)
    8648:	197ffb1e 	bne	r3,r5,8638 <__alt_mem_Flash_flash_data+0xf4008638>
    864c:	f800283a 	ret
    8650:	00c003c4 	movi	r3,15
    8654:	1980412e 	bgeu	r3,r6,875c <memmove+0x140>
    8658:	1146b03a 	or	r3,r2,r5
    865c:	18c000cc 	andi	r3,r3,3
    8660:	1800411e 	bne	r3,zero,8768 <memmove+0x14c>
    8664:	33fffc04 	addi	r15,r6,-16
    8668:	781ed13a 	srli	r15,r15,4
    866c:	28c00104 	addi	r3,r5,4
    8670:	13400104 	addi	r13,r2,4
    8674:	781c913a 	slli	r14,r15,4
    8678:	2b000204 	addi	r12,r5,8
    867c:	12c00204 	addi	r11,r2,8
    8680:	73800504 	addi	r14,r14,20
    8684:	2a800304 	addi	r10,r5,12
    8688:	12400304 	addi	r9,r2,12
    868c:	2b9d883a 	add	r14,r5,r14
    8690:	2811883a 	mov	r8,r5
    8694:	100f883a 	mov	r7,r2
    8698:	41000017 	ldw	r4,0(r8)
    869c:	39c00404 	addi	r7,r7,16
    86a0:	18c00404 	addi	r3,r3,16
    86a4:	393ffc15 	stw	r4,-16(r7)
    86a8:	193ffc17 	ldw	r4,-16(r3)
    86ac:	6b400404 	addi	r13,r13,16
    86b0:	5ac00404 	addi	r11,r11,16
    86b4:	693ffc15 	stw	r4,-16(r13)
    86b8:	61000017 	ldw	r4,0(r12)
    86bc:	4a400404 	addi	r9,r9,16
    86c0:	42000404 	addi	r8,r8,16
    86c4:	593ffc15 	stw	r4,-16(r11)
    86c8:	51000017 	ldw	r4,0(r10)
    86cc:	63000404 	addi	r12,r12,16
    86d0:	52800404 	addi	r10,r10,16
    86d4:	493ffc15 	stw	r4,-16(r9)
    86d8:	1bbfef1e 	bne	r3,r14,8698 <__alt_mem_Flash_flash_data+0xf4008698>
    86dc:	79000044 	addi	r4,r15,1
    86e0:	2008913a 	slli	r4,r4,4
    86e4:	328003cc 	andi	r10,r6,15
    86e8:	02c000c4 	movi	r11,3
    86ec:	1107883a 	add	r3,r2,r4
    86f0:	290b883a 	add	r5,r5,r4
    86f4:	5a801e2e 	bgeu	r11,r10,8770 <memmove+0x154>
    86f8:	1813883a 	mov	r9,r3
    86fc:	2811883a 	mov	r8,r5
    8700:	500f883a 	mov	r7,r10
    8704:	41000017 	ldw	r4,0(r8)
    8708:	4a400104 	addi	r9,r9,4
    870c:	39ffff04 	addi	r7,r7,-4
    8710:	493fff15 	stw	r4,-4(r9)
    8714:	42000104 	addi	r8,r8,4
    8718:	59fffa36 	bltu	r11,r7,8704 <__alt_mem_Flash_flash_data+0xf4008704>
    871c:	513fff04 	addi	r4,r10,-4
    8720:	2008d0ba 	srli	r4,r4,2
    8724:	318000cc 	andi	r6,r6,3
    8728:	21000044 	addi	r4,r4,1
    872c:	2109883a 	add	r4,r4,r4
    8730:	2109883a 	add	r4,r4,r4
    8734:	1907883a 	add	r3,r3,r4
    8738:	290b883a 	add	r5,r5,r4
    873c:	30000926 	beq	r6,zero,8764 <memmove+0x148>
    8740:	198d883a 	add	r6,r3,r6
    8744:	29c00003 	ldbu	r7,0(r5)
    8748:	18c00044 	addi	r3,r3,1
    874c:	29400044 	addi	r5,r5,1
    8750:	19ffffc5 	stb	r7,-1(r3)
    8754:	19bffb1e 	bne	r3,r6,8744 <__alt_mem_Flash_flash_data+0xf4008744>
    8758:	f800283a 	ret
    875c:	1007883a 	mov	r3,r2
    8760:	003ff606 	br	873c <__alt_mem_Flash_flash_data+0xf400873c>
    8764:	f800283a 	ret
    8768:	1007883a 	mov	r3,r2
    876c:	003ff406 	br	8740 <__alt_mem_Flash_flash_data+0xf4008740>
    8770:	500d883a 	mov	r6,r10
    8774:	003ff106 	br	873c <__alt_mem_Flash_flash_data+0xf400873c>

00008778 <_Balloc>:
    8778:	20801317 	ldw	r2,76(r4)
    877c:	defffc04 	addi	sp,sp,-16
    8780:	dc400115 	stw	r17,4(sp)
    8784:	dc000015 	stw	r16,0(sp)
    8788:	dfc00315 	stw	ra,12(sp)
    878c:	dc800215 	stw	r18,8(sp)
    8790:	2023883a 	mov	r17,r4
    8794:	2821883a 	mov	r16,r5
    8798:	10000f26 	beq	r2,zero,87d8 <_Balloc+0x60>
    879c:	8407883a 	add	r3,r16,r16
    87a0:	18c7883a 	add	r3,r3,r3
    87a4:	10c7883a 	add	r3,r2,r3
    87a8:	18800017 	ldw	r2,0(r3)
    87ac:	10001126 	beq	r2,zero,87f4 <_Balloc+0x7c>
    87b0:	11000017 	ldw	r4,0(r2)
    87b4:	19000015 	stw	r4,0(r3)
    87b8:	10000415 	stw	zero,16(r2)
    87bc:	10000315 	stw	zero,12(r2)
    87c0:	dfc00317 	ldw	ra,12(sp)
    87c4:	dc800217 	ldw	r18,8(sp)
    87c8:	dc400117 	ldw	r17,4(sp)
    87cc:	dc000017 	ldw	r16,0(sp)
    87d0:	dec00404 	addi	sp,sp,16
    87d4:	f800283a 	ret
    87d8:	01400104 	movi	r5,4
    87dc:	01800844 	movi	r6,33
    87e0:	000c9600 	call	c960 <_calloc_r>
    87e4:	88801315 	stw	r2,76(r17)
    87e8:	103fec1e 	bne	r2,zero,879c <__alt_mem_Flash_flash_data+0xf400879c>
    87ec:	0005883a 	mov	r2,zero
    87f0:	003ff306 	br	87c0 <__alt_mem_Flash_flash_data+0xf40087c0>
    87f4:	01400044 	movi	r5,1
    87f8:	2c24983a 	sll	r18,r5,r16
    87fc:	8809883a 	mov	r4,r17
    8800:	91800144 	addi	r6,r18,5
    8804:	318d883a 	add	r6,r6,r6
    8808:	318d883a 	add	r6,r6,r6
    880c:	000c9600 	call	c960 <_calloc_r>
    8810:	103ff626 	beq	r2,zero,87ec <__alt_mem_Flash_flash_data+0xf40087ec>
    8814:	14000115 	stw	r16,4(r2)
    8818:	14800215 	stw	r18,8(r2)
    881c:	003fe606 	br	87b8 <__alt_mem_Flash_flash_data+0xf40087b8>

00008820 <_Bfree>:
    8820:	28000826 	beq	r5,zero,8844 <_Bfree+0x24>
    8824:	28c00117 	ldw	r3,4(r5)
    8828:	20801317 	ldw	r2,76(r4)
    882c:	18c7883a 	add	r3,r3,r3
    8830:	18c7883a 	add	r3,r3,r3
    8834:	10c5883a 	add	r2,r2,r3
    8838:	10c00017 	ldw	r3,0(r2)
    883c:	28c00015 	stw	r3,0(r5)
    8840:	11400015 	stw	r5,0(r2)
    8844:	f800283a 	ret

00008848 <__multadd>:
    8848:	defffa04 	addi	sp,sp,-24
    884c:	dc000115 	stw	r16,4(sp)
    8850:	2c000417 	ldw	r16,16(r5)
    8854:	dc800315 	stw	r18,12(sp)
    8858:	dc400215 	stw	r17,8(sp)
    885c:	dfc00515 	stw	ra,20(sp)
    8860:	dcc00415 	stw	r19,16(sp)
    8864:	2823883a 	mov	r17,r5
    8868:	2025883a 	mov	r18,r4
    886c:	2a400504 	addi	r9,r5,20
    8870:	0015883a 	mov	r10,zero
    8874:	4a000017 	ldw	r8,0(r9)
    8878:	4a400104 	addi	r9,r9,4
    887c:	52800044 	addi	r10,r10,1
    8880:	40ffffcc 	andi	r3,r8,65535
    8884:	1987383a 	mul	r3,r3,r6
    8888:	4010d43a 	srli	r8,r8,16
    888c:	19cf883a 	add	r7,r3,r7
    8890:	4191383a 	mul	r8,r8,r6
    8894:	3816d43a 	srli	r11,r7,16
    8898:	38ffffcc 	andi	r3,r7,65535
    889c:	5a0f883a 	add	r7,r11,r8
    88a0:	3810943a 	slli	r8,r7,16
    88a4:	380ed43a 	srli	r7,r7,16
    88a8:	40c7883a 	add	r3,r8,r3
    88ac:	48ffff15 	stw	r3,-4(r9)
    88b0:	543ff016 	blt	r10,r16,8874 <__alt_mem_Flash_flash_data+0xf4008874>
    88b4:	38000926 	beq	r7,zero,88dc <__multadd+0x94>
    88b8:	88800217 	ldw	r2,8(r17)
    88bc:	80800f0e 	bge	r16,r2,88fc <__multadd+0xb4>
    88c0:	80800144 	addi	r2,r16,5
    88c4:	1085883a 	add	r2,r2,r2
    88c8:	1085883a 	add	r2,r2,r2
    88cc:	8885883a 	add	r2,r17,r2
    88d0:	11c00015 	stw	r7,0(r2)
    88d4:	84000044 	addi	r16,r16,1
    88d8:	8c000415 	stw	r16,16(r17)
    88dc:	8805883a 	mov	r2,r17
    88e0:	dfc00517 	ldw	ra,20(sp)
    88e4:	dcc00417 	ldw	r19,16(sp)
    88e8:	dc800317 	ldw	r18,12(sp)
    88ec:	dc400217 	ldw	r17,8(sp)
    88f0:	dc000117 	ldw	r16,4(sp)
    88f4:	dec00604 	addi	sp,sp,24
    88f8:	f800283a 	ret
    88fc:	89400117 	ldw	r5,4(r17)
    8900:	9009883a 	mov	r4,r18
    8904:	d9c00015 	stw	r7,0(sp)
    8908:	29400044 	addi	r5,r5,1
    890c:	00087780 	call	8778 <_Balloc>
    8910:	89800417 	ldw	r6,16(r17)
    8914:	11000304 	addi	r4,r2,12
    8918:	89400304 	addi	r5,r17,12
    891c:	31800084 	addi	r6,r6,2
    8920:	318d883a 	add	r6,r6,r6
    8924:	318d883a 	add	r6,r6,r6
    8928:	1027883a 	mov	r19,r2
    892c:	00084e40 	call	84e4 <memcpy>
    8930:	d9c00017 	ldw	r7,0(sp)
    8934:	88000a26 	beq	r17,zero,8960 <__multadd+0x118>
    8938:	89000117 	ldw	r4,4(r17)
    893c:	90c01317 	ldw	r3,76(r18)
    8940:	2109883a 	add	r4,r4,r4
    8944:	2109883a 	add	r4,r4,r4
    8948:	1907883a 	add	r3,r3,r4
    894c:	18800017 	ldw	r2,0(r3)
    8950:	88800015 	stw	r2,0(r17)
    8954:	1c400015 	stw	r17,0(r3)
    8958:	9823883a 	mov	r17,r19
    895c:	003fd806 	br	88c0 <__alt_mem_Flash_flash_data+0xf40088c0>
    8960:	9823883a 	mov	r17,r19
    8964:	003fd606 	br	88c0 <__alt_mem_Flash_flash_data+0xf40088c0>

00008968 <__s2b>:
    8968:	defff904 	addi	sp,sp,-28
    896c:	dc400115 	stw	r17,4(sp)
    8970:	dc000015 	stw	r16,0(sp)
    8974:	2023883a 	mov	r17,r4
    8978:	2821883a 	mov	r16,r5
    897c:	39000204 	addi	r4,r7,8
    8980:	01400244 	movi	r5,9
    8984:	dcc00315 	stw	r19,12(sp)
    8988:	dc800215 	stw	r18,8(sp)
    898c:	dfc00615 	stw	ra,24(sp)
    8990:	dd400515 	stw	r21,20(sp)
    8994:	dd000415 	stw	r20,16(sp)
    8998:	3825883a 	mov	r18,r7
    899c:	3027883a 	mov	r19,r6
    89a0:	000dc100 	call	dc10 <__divsi3>
    89a4:	00c00044 	movi	r3,1
    89a8:	000b883a 	mov	r5,zero
    89ac:	1880030e 	bge	r3,r2,89bc <__s2b+0x54>
    89b0:	18c7883a 	add	r3,r3,r3
    89b4:	29400044 	addi	r5,r5,1
    89b8:	18bffd16 	blt	r3,r2,89b0 <__alt_mem_Flash_flash_data+0xf40089b0>
    89bc:	8809883a 	mov	r4,r17
    89c0:	00087780 	call	8778 <_Balloc>
    89c4:	d8c00717 	ldw	r3,28(sp)
    89c8:	10c00515 	stw	r3,20(r2)
    89cc:	00c00044 	movi	r3,1
    89d0:	10c00415 	stw	r3,16(r2)
    89d4:	00c00244 	movi	r3,9
    89d8:	1cc0210e 	bge	r3,r19,8a60 <__s2b+0xf8>
    89dc:	80eb883a 	add	r21,r16,r3
    89e0:	a829883a 	mov	r20,r21
    89e4:	84e1883a 	add	r16,r16,r19
    89e8:	a1c00007 	ldb	r7,0(r20)
    89ec:	8809883a 	mov	r4,r17
    89f0:	a5000044 	addi	r20,r20,1
    89f4:	100b883a 	mov	r5,r2
    89f8:	01800284 	movi	r6,10
    89fc:	39fff404 	addi	r7,r7,-48
    8a00:	00088480 	call	8848 <__multadd>
    8a04:	a43ff81e 	bne	r20,r16,89e8 <__alt_mem_Flash_flash_data+0xf40089e8>
    8a08:	ace1883a 	add	r16,r21,r19
    8a0c:	843ffe04 	addi	r16,r16,-8
    8a10:	9c800a0e 	bge	r19,r18,8a3c <__s2b+0xd4>
    8a14:	94e5c83a 	sub	r18,r18,r19
    8a18:	84a5883a 	add	r18,r16,r18
    8a1c:	81c00007 	ldb	r7,0(r16)
    8a20:	8809883a 	mov	r4,r17
    8a24:	84000044 	addi	r16,r16,1
    8a28:	100b883a 	mov	r5,r2
    8a2c:	01800284 	movi	r6,10
    8a30:	39fff404 	addi	r7,r7,-48
    8a34:	00088480 	call	8848 <__multadd>
    8a38:	84bff81e 	bne	r16,r18,8a1c <__alt_mem_Flash_flash_data+0xf4008a1c>
    8a3c:	dfc00617 	ldw	ra,24(sp)
    8a40:	dd400517 	ldw	r21,20(sp)
    8a44:	dd000417 	ldw	r20,16(sp)
    8a48:	dcc00317 	ldw	r19,12(sp)
    8a4c:	dc800217 	ldw	r18,8(sp)
    8a50:	dc400117 	ldw	r17,4(sp)
    8a54:	dc000017 	ldw	r16,0(sp)
    8a58:	dec00704 	addi	sp,sp,28
    8a5c:	f800283a 	ret
    8a60:	84000284 	addi	r16,r16,10
    8a64:	1827883a 	mov	r19,r3
    8a68:	003fe906 	br	8a10 <__alt_mem_Flash_flash_data+0xf4008a10>

00008a6c <__hi0bits>:
    8a6c:	20bfffec 	andhi	r2,r4,65535
    8a70:	1000141e 	bne	r2,zero,8ac4 <__hi0bits+0x58>
    8a74:	2008943a 	slli	r4,r4,16
    8a78:	00800404 	movi	r2,16
    8a7c:	20ffc02c 	andhi	r3,r4,65280
    8a80:	1800021e 	bne	r3,zero,8a8c <__hi0bits+0x20>
    8a84:	2008923a 	slli	r4,r4,8
    8a88:	10800204 	addi	r2,r2,8
    8a8c:	20fc002c 	andhi	r3,r4,61440
    8a90:	1800021e 	bne	r3,zero,8a9c <__hi0bits+0x30>
    8a94:	2008913a 	slli	r4,r4,4
    8a98:	10800104 	addi	r2,r2,4
    8a9c:	20f0002c 	andhi	r3,r4,49152
    8aa0:	1800031e 	bne	r3,zero,8ab0 <__hi0bits+0x44>
    8aa4:	2109883a 	add	r4,r4,r4
    8aa8:	10800084 	addi	r2,r2,2
    8aac:	2109883a 	add	r4,r4,r4
    8ab0:	20000316 	blt	r4,zero,8ac0 <__hi0bits+0x54>
    8ab4:	2110002c 	andhi	r4,r4,16384
    8ab8:	2000041e 	bne	r4,zero,8acc <__hi0bits+0x60>
    8abc:	00800804 	movi	r2,32
    8ac0:	f800283a 	ret
    8ac4:	0005883a 	mov	r2,zero
    8ac8:	003fec06 	br	8a7c <__alt_mem_Flash_flash_data+0xf4008a7c>
    8acc:	10800044 	addi	r2,r2,1
    8ad0:	f800283a 	ret

00008ad4 <__lo0bits>:
    8ad4:	20c00017 	ldw	r3,0(r4)
    8ad8:	188001cc 	andi	r2,r3,7
    8adc:	10000826 	beq	r2,zero,8b00 <__lo0bits+0x2c>
    8ae0:	1880004c 	andi	r2,r3,1
    8ae4:	1000211e 	bne	r2,zero,8b6c <__lo0bits+0x98>
    8ae8:	1880008c 	andi	r2,r3,2
    8aec:	1000211e 	bne	r2,zero,8b74 <__lo0bits+0xa0>
    8af0:	1806d0ba 	srli	r3,r3,2
    8af4:	00800084 	movi	r2,2
    8af8:	20c00015 	stw	r3,0(r4)
    8afc:	f800283a 	ret
    8b00:	18bfffcc 	andi	r2,r3,65535
    8b04:	10001326 	beq	r2,zero,8b54 <__lo0bits+0x80>
    8b08:	0005883a 	mov	r2,zero
    8b0c:	19403fcc 	andi	r5,r3,255
    8b10:	2800021e 	bne	r5,zero,8b1c <__lo0bits+0x48>
    8b14:	1806d23a 	srli	r3,r3,8
    8b18:	10800204 	addi	r2,r2,8
    8b1c:	194003cc 	andi	r5,r3,15
    8b20:	2800021e 	bne	r5,zero,8b2c <__lo0bits+0x58>
    8b24:	1806d13a 	srli	r3,r3,4
    8b28:	10800104 	addi	r2,r2,4
    8b2c:	194000cc 	andi	r5,r3,3
    8b30:	2800021e 	bne	r5,zero,8b3c <__lo0bits+0x68>
    8b34:	1806d0ba 	srli	r3,r3,2
    8b38:	10800084 	addi	r2,r2,2
    8b3c:	1940004c 	andi	r5,r3,1
    8b40:	2800081e 	bne	r5,zero,8b64 <__lo0bits+0x90>
    8b44:	1806d07a 	srli	r3,r3,1
    8b48:	1800051e 	bne	r3,zero,8b60 <__lo0bits+0x8c>
    8b4c:	00800804 	movi	r2,32
    8b50:	f800283a 	ret
    8b54:	1806d43a 	srli	r3,r3,16
    8b58:	00800404 	movi	r2,16
    8b5c:	003feb06 	br	8b0c <__alt_mem_Flash_flash_data+0xf4008b0c>
    8b60:	10800044 	addi	r2,r2,1
    8b64:	20c00015 	stw	r3,0(r4)
    8b68:	f800283a 	ret
    8b6c:	0005883a 	mov	r2,zero
    8b70:	f800283a 	ret
    8b74:	1806d07a 	srli	r3,r3,1
    8b78:	00800044 	movi	r2,1
    8b7c:	20c00015 	stw	r3,0(r4)
    8b80:	f800283a 	ret

00008b84 <__i2b>:
    8b84:	defffd04 	addi	sp,sp,-12
    8b88:	dc000015 	stw	r16,0(sp)
    8b8c:	04000044 	movi	r16,1
    8b90:	dc400115 	stw	r17,4(sp)
    8b94:	2823883a 	mov	r17,r5
    8b98:	800b883a 	mov	r5,r16
    8b9c:	dfc00215 	stw	ra,8(sp)
    8ba0:	00087780 	call	8778 <_Balloc>
    8ba4:	14400515 	stw	r17,20(r2)
    8ba8:	14000415 	stw	r16,16(r2)
    8bac:	dfc00217 	ldw	ra,8(sp)
    8bb0:	dc400117 	ldw	r17,4(sp)
    8bb4:	dc000017 	ldw	r16,0(sp)
    8bb8:	dec00304 	addi	sp,sp,12
    8bbc:	f800283a 	ret

00008bc0 <__multiply>:
    8bc0:	defffa04 	addi	sp,sp,-24
    8bc4:	dcc00315 	stw	r19,12(sp)
    8bc8:	dc800215 	stw	r18,8(sp)
    8bcc:	2cc00417 	ldw	r19,16(r5)
    8bd0:	34800417 	ldw	r18,16(r6)
    8bd4:	dd000415 	stw	r20,16(sp)
    8bd8:	dc400115 	stw	r17,4(sp)
    8bdc:	dfc00515 	stw	ra,20(sp)
    8be0:	dc000015 	stw	r16,0(sp)
    8be4:	2829883a 	mov	r20,r5
    8be8:	3023883a 	mov	r17,r6
    8bec:	9c807016 	blt	r19,r18,8db0 <__multiply+0x1f0>
    8bf0:	9005883a 	mov	r2,r18
    8bf4:	9825883a 	mov	r18,r19
    8bf8:	1027883a 	mov	r19,r2
    8bfc:	a0800217 	ldw	r2,8(r20)
    8c00:	94e1883a 	add	r16,r18,r19
    8c04:	a1400117 	ldw	r5,4(r20)
    8c08:	1400010e 	bge	r2,r16,8c10 <__multiply+0x50>
    8c0c:	29400044 	addi	r5,r5,1
    8c10:	00087780 	call	8778 <_Balloc>
    8c14:	8417883a 	add	r11,r16,r16
    8c18:	13000504 	addi	r12,r2,20
    8c1c:	5ad7883a 	add	r11,r11,r11
    8c20:	62d7883a 	add	r11,r12,r11
    8c24:	6007883a 	mov	r3,r12
    8c28:	62c0032e 	bgeu	r12,r11,8c38 <__multiply+0x78>
    8c2c:	18000015 	stw	zero,0(r3)
    8c30:	18c00104 	addi	r3,r3,4
    8c34:	1afffd36 	bltu	r3,r11,8c2c <__alt_mem_Flash_flash_data+0xf4008c2c>
    8c38:	9ce7883a 	add	r19,r19,r19
    8c3c:	94a5883a 	add	r18,r18,r18
    8c40:	89800504 	addi	r6,r17,20
    8c44:	9ce7883a 	add	r19,r19,r19
    8c48:	a3800504 	addi	r14,r20,20
    8c4c:	94a5883a 	add	r18,r18,r18
    8c50:	34db883a 	add	r13,r6,r19
    8c54:	7495883a 	add	r10,r14,r18
    8c58:	3340422e 	bgeu	r6,r13,8d64 <__multiply+0x1a4>
    8c5c:	34400017 	ldw	r17,0(r6)
    8c60:	8cbfffcc 	andi	r18,r17,65535
    8c64:	90001b26 	beq	r18,zero,8cd4 <__multiply+0x114>
    8c68:	6013883a 	mov	r9,r12
    8c6c:	7023883a 	mov	r17,r14
    8c70:	0011883a 	mov	r8,zero
    8c74:	88c00017 	ldw	r3,0(r17)
    8c78:	4bc00017 	ldw	r15,0(r9)
    8c7c:	8c400104 	addi	r17,r17,4
    8c80:	19ffffcc 	andi	r7,r3,65535
    8c84:	3c8f383a 	mul	r7,r7,r18
    8c88:	1808d43a 	srli	r4,r3,16
    8c8c:	797fffcc 	andi	r5,r15,65535
    8c90:	29cb883a 	add	r5,r5,r7
    8c94:	2a0b883a 	add	r5,r5,r8
    8c98:	2489383a 	mul	r4,r4,r18
    8c9c:	7806d43a 	srli	r3,r15,16
    8ca0:	2810d43a 	srli	r8,r5,16
    8ca4:	297fffcc 	andi	r5,r5,65535
    8ca8:	1907883a 	add	r3,r3,r4
    8cac:	1a07883a 	add	r3,r3,r8
    8cb0:	1808943a 	slli	r4,r3,16
    8cb4:	480f883a 	mov	r7,r9
    8cb8:	1810d43a 	srli	r8,r3,16
    8cbc:	214ab03a 	or	r5,r4,r5
    8cc0:	49400015 	stw	r5,0(r9)
    8cc4:	4a400104 	addi	r9,r9,4
    8cc8:	8abfea36 	bltu	r17,r10,8c74 <__alt_mem_Flash_flash_data+0xf4008c74>
    8ccc:	3a000115 	stw	r8,4(r7)
    8cd0:	34400017 	ldw	r17,0(r6)
    8cd4:	8822d43a 	srli	r17,r17,16
    8cd8:	88001f26 	beq	r17,zero,8d58 <__multiply+0x198>
    8cdc:	60c00017 	ldw	r3,0(r12)
    8ce0:	7013883a 	mov	r9,r14
    8ce4:	601f883a 	mov	r15,r12
    8ce8:	1811883a 	mov	r8,r3
    8cec:	6027883a 	mov	r19,r12
    8cf0:	000f883a 	mov	r7,zero
    8cf4:	00000106 	br	8cfc <__multiply+0x13c>
    8cf8:	9027883a 	mov	r19,r18
    8cfc:	4940000b 	ldhu	r5,0(r9)
    8d00:	4010d43a 	srli	r8,r8,16
    8d04:	193fffcc 	andi	r4,r3,65535
    8d08:	2c4b383a 	mul	r5,r5,r17
    8d0c:	7bc00104 	addi	r15,r15,4
    8d10:	4a400104 	addi	r9,r9,4
    8d14:	2a0b883a 	add	r5,r5,r8
    8d18:	29cb883a 	add	r5,r5,r7
    8d1c:	2806943a 	slli	r3,r5,16
    8d20:	9c800104 	addi	r18,r19,4
    8d24:	280ad43a 	srli	r5,r5,16
    8d28:	1908b03a 	or	r4,r3,r4
    8d2c:	793fff15 	stw	r4,-4(r15)
    8d30:	48ffff17 	ldw	r3,-4(r9)
    8d34:	92000017 	ldw	r8,0(r18)
    8d38:	1806d43a 	srli	r3,r3,16
    8d3c:	413fffcc 	andi	r4,r8,65535
    8d40:	1c47383a 	mul	r3,r3,r17
    8d44:	1907883a 	add	r3,r3,r4
    8d48:	1947883a 	add	r3,r3,r5
    8d4c:	180ed43a 	srli	r7,r3,16
    8d50:	4abfe936 	bltu	r9,r10,8cf8 <__alt_mem_Flash_flash_data+0xf4008cf8>
    8d54:	98c00115 	stw	r3,4(r19)
    8d58:	31800104 	addi	r6,r6,4
    8d5c:	63000104 	addi	r12,r12,4
    8d60:	337fbe36 	bltu	r6,r13,8c5c <__alt_mem_Flash_flash_data+0xf4008c5c>
    8d64:	0400090e 	bge	zero,r16,8d8c <__multiply+0x1cc>
    8d68:	58ffff17 	ldw	r3,-4(r11)
    8d6c:	5affff04 	addi	r11,r11,-4
    8d70:	18000326 	beq	r3,zero,8d80 <__multiply+0x1c0>
    8d74:	00000506 	br	8d8c <__multiply+0x1cc>
    8d78:	58c00017 	ldw	r3,0(r11)
    8d7c:	1800031e 	bne	r3,zero,8d8c <__multiply+0x1cc>
    8d80:	843fffc4 	addi	r16,r16,-1
    8d84:	5affff04 	addi	r11,r11,-4
    8d88:	803ffb1e 	bne	r16,zero,8d78 <__alt_mem_Flash_flash_data+0xf4008d78>
    8d8c:	14000415 	stw	r16,16(r2)
    8d90:	dfc00517 	ldw	ra,20(sp)
    8d94:	dd000417 	ldw	r20,16(sp)
    8d98:	dcc00317 	ldw	r19,12(sp)
    8d9c:	dc800217 	ldw	r18,8(sp)
    8da0:	dc400117 	ldw	r17,4(sp)
    8da4:	dc000017 	ldw	r16,0(sp)
    8da8:	dec00604 	addi	sp,sp,24
    8dac:	f800283a 	ret
    8db0:	3029883a 	mov	r20,r6
    8db4:	2823883a 	mov	r17,r5
    8db8:	003f9006 	br	8bfc <__alt_mem_Flash_flash_data+0xf4008bfc>

00008dbc <__pow5mult>:
    8dbc:	defffa04 	addi	sp,sp,-24
    8dc0:	dcc00315 	stw	r19,12(sp)
    8dc4:	dc800215 	stw	r18,8(sp)
    8dc8:	dc000015 	stw	r16,0(sp)
    8dcc:	dfc00515 	stw	ra,20(sp)
    8dd0:	dd000415 	stw	r20,16(sp)
    8dd4:	dc400115 	stw	r17,4(sp)
    8dd8:	308000cc 	andi	r2,r6,3
    8ddc:	3021883a 	mov	r16,r6
    8de0:	2027883a 	mov	r19,r4
    8de4:	2825883a 	mov	r18,r5
    8de8:	10002e1e 	bne	r2,zero,8ea4 <__pow5mult+0xe8>
    8dec:	8021d0ba 	srai	r16,r16,2
    8df0:	80001a26 	beq	r16,zero,8e5c <__pow5mult+0xa0>
    8df4:	9c401217 	ldw	r17,72(r19)
    8df8:	8800061e 	bne	r17,zero,8e14 <__pow5mult+0x58>
    8dfc:	00003406 	br	8ed0 <__pow5mult+0x114>
    8e00:	8021d07a 	srai	r16,r16,1
    8e04:	80001526 	beq	r16,zero,8e5c <__pow5mult+0xa0>
    8e08:	88800017 	ldw	r2,0(r17)
    8e0c:	10001c26 	beq	r2,zero,8e80 <__pow5mult+0xc4>
    8e10:	1023883a 	mov	r17,r2
    8e14:	80c0004c 	andi	r3,r16,1
    8e18:	183ff926 	beq	r3,zero,8e00 <__alt_mem_Flash_flash_data+0xf4008e00>
    8e1c:	900b883a 	mov	r5,r18
    8e20:	880d883a 	mov	r6,r17
    8e24:	9809883a 	mov	r4,r19
    8e28:	0008bc00 	call	8bc0 <__multiply>
    8e2c:	90001b26 	beq	r18,zero,8e9c <__pow5mult+0xe0>
    8e30:	91c00117 	ldw	r7,4(r18)
    8e34:	98c01317 	ldw	r3,76(r19)
    8e38:	8021d07a 	srai	r16,r16,1
    8e3c:	39cf883a 	add	r7,r7,r7
    8e40:	39cf883a 	add	r7,r7,r7
    8e44:	19c7883a 	add	r3,r3,r7
    8e48:	19000017 	ldw	r4,0(r3)
    8e4c:	91000015 	stw	r4,0(r18)
    8e50:	1c800015 	stw	r18,0(r3)
    8e54:	1025883a 	mov	r18,r2
    8e58:	803feb1e 	bne	r16,zero,8e08 <__alt_mem_Flash_flash_data+0xf4008e08>
    8e5c:	9005883a 	mov	r2,r18
    8e60:	dfc00517 	ldw	ra,20(sp)
    8e64:	dd000417 	ldw	r20,16(sp)
    8e68:	dcc00317 	ldw	r19,12(sp)
    8e6c:	dc800217 	ldw	r18,8(sp)
    8e70:	dc400117 	ldw	r17,4(sp)
    8e74:	dc000017 	ldw	r16,0(sp)
    8e78:	dec00604 	addi	sp,sp,24
    8e7c:	f800283a 	ret
    8e80:	9809883a 	mov	r4,r19
    8e84:	880b883a 	mov	r5,r17
    8e88:	880d883a 	mov	r6,r17
    8e8c:	0008bc00 	call	8bc0 <__multiply>
    8e90:	88800015 	stw	r2,0(r17)
    8e94:	10000015 	stw	zero,0(r2)
    8e98:	003fdd06 	br	8e10 <__alt_mem_Flash_flash_data+0xf4008e10>
    8e9c:	1025883a 	mov	r18,r2
    8ea0:	003fd706 	br	8e00 <__alt_mem_Flash_flash_data+0xf4008e00>
    8ea4:	10bfffc4 	addi	r2,r2,-1
    8ea8:	1085883a 	add	r2,r2,r2
    8eac:	00c000b4 	movhi	r3,2
    8eb0:	18c3a204 	addi	r3,r3,3720
    8eb4:	1085883a 	add	r2,r2,r2
    8eb8:	1885883a 	add	r2,r3,r2
    8ebc:	11800017 	ldw	r6,0(r2)
    8ec0:	000f883a 	mov	r7,zero
    8ec4:	00088480 	call	8848 <__multadd>
    8ec8:	1025883a 	mov	r18,r2
    8ecc:	003fc706 	br	8dec <__alt_mem_Flash_flash_data+0xf4008dec>
    8ed0:	05000044 	movi	r20,1
    8ed4:	9809883a 	mov	r4,r19
    8ed8:	a00b883a 	mov	r5,r20
    8edc:	00087780 	call	8778 <_Balloc>
    8ee0:	1023883a 	mov	r17,r2
    8ee4:	00809c44 	movi	r2,625
    8ee8:	88800515 	stw	r2,20(r17)
    8eec:	8d000415 	stw	r20,16(r17)
    8ef0:	9c401215 	stw	r17,72(r19)
    8ef4:	88000015 	stw	zero,0(r17)
    8ef8:	003fc606 	br	8e14 <__alt_mem_Flash_flash_data+0xf4008e14>

00008efc <__lshift>:
    8efc:	defff904 	addi	sp,sp,-28
    8f00:	dd000415 	stw	r20,16(sp)
    8f04:	dcc00315 	stw	r19,12(sp)
    8f08:	3029d17a 	srai	r20,r6,5
    8f0c:	2cc00417 	ldw	r19,16(r5)
    8f10:	28800217 	ldw	r2,8(r5)
    8f14:	dd400515 	stw	r21,20(sp)
    8f18:	a4e7883a 	add	r19,r20,r19
    8f1c:	dc800215 	stw	r18,8(sp)
    8f20:	dc400115 	stw	r17,4(sp)
    8f24:	dc000015 	stw	r16,0(sp)
    8f28:	dfc00615 	stw	ra,24(sp)
    8f2c:	9c000044 	addi	r16,r19,1
    8f30:	2823883a 	mov	r17,r5
    8f34:	302b883a 	mov	r21,r6
    8f38:	2025883a 	mov	r18,r4
    8f3c:	29400117 	ldw	r5,4(r5)
    8f40:	1400030e 	bge	r2,r16,8f50 <__lshift+0x54>
    8f44:	1085883a 	add	r2,r2,r2
    8f48:	29400044 	addi	r5,r5,1
    8f4c:	143ffd16 	blt	r2,r16,8f44 <__alt_mem_Flash_flash_data+0xf4008f44>
    8f50:	9009883a 	mov	r4,r18
    8f54:	00087780 	call	8778 <_Balloc>
    8f58:	11c00504 	addi	r7,r2,20
    8f5c:	0500090e 	bge	zero,r20,8f84 <__lshift+0x88>
    8f60:	3811883a 	mov	r8,r7
    8f64:	0007883a 	mov	r3,zero
    8f68:	40000015 	stw	zero,0(r8)
    8f6c:	18c00044 	addi	r3,r3,1
    8f70:	42000104 	addi	r8,r8,4
    8f74:	1d3ffc1e 	bne	r3,r20,8f68 <__alt_mem_Flash_flash_data+0xf4008f68>
    8f78:	18c7883a 	add	r3,r3,r3
    8f7c:	18c7883a 	add	r3,r3,r3
    8f80:	38cf883a 	add	r7,r7,r3
    8f84:	89000417 	ldw	r4,16(r17)
    8f88:	88c00504 	addi	r3,r17,20
    8f8c:	a98007cc 	andi	r6,r21,31
    8f90:	2109883a 	add	r4,r4,r4
    8f94:	2109883a 	add	r4,r4,r4
    8f98:	1909883a 	add	r4,r3,r4
    8f9c:	30002326 	beq	r6,zero,902c <__lshift+0x130>
    8fa0:	01400804 	movi	r5,32
    8fa4:	298bc83a 	sub	r5,r5,r6
    8fa8:	0013883a 	mov	r9,zero
    8fac:	1a000017 	ldw	r8,0(r3)
    8fb0:	3815883a 	mov	r10,r7
    8fb4:	39c00104 	addi	r7,r7,4
    8fb8:	4190983a 	sll	r8,r8,r6
    8fbc:	18c00104 	addi	r3,r3,4
    8fc0:	4a10b03a 	or	r8,r9,r8
    8fc4:	3a3fff15 	stw	r8,-4(r7)
    8fc8:	1a3fff17 	ldw	r8,-4(r3)
    8fcc:	4152d83a 	srl	r9,r8,r5
    8fd0:	193ff636 	bltu	r3,r4,8fac <__alt_mem_Flash_flash_data+0xf4008fac>
    8fd4:	52400115 	stw	r9,4(r10)
    8fd8:	48001a1e 	bne	r9,zero,9044 <__lshift+0x148>
    8fdc:	843fffc4 	addi	r16,r16,-1
    8fe0:	14000415 	stw	r16,16(r2)
    8fe4:	88000826 	beq	r17,zero,9008 <__lshift+0x10c>
    8fe8:	89000117 	ldw	r4,4(r17)
    8fec:	90c01317 	ldw	r3,76(r18)
    8ff0:	2109883a 	add	r4,r4,r4
    8ff4:	2109883a 	add	r4,r4,r4
    8ff8:	1907883a 	add	r3,r3,r4
    8ffc:	19000017 	ldw	r4,0(r3)
    9000:	89000015 	stw	r4,0(r17)
    9004:	1c400015 	stw	r17,0(r3)
    9008:	dfc00617 	ldw	ra,24(sp)
    900c:	dd400517 	ldw	r21,20(sp)
    9010:	dd000417 	ldw	r20,16(sp)
    9014:	dcc00317 	ldw	r19,12(sp)
    9018:	dc800217 	ldw	r18,8(sp)
    901c:	dc400117 	ldw	r17,4(sp)
    9020:	dc000017 	ldw	r16,0(sp)
    9024:	dec00704 	addi	sp,sp,28
    9028:	f800283a 	ret
    902c:	19400017 	ldw	r5,0(r3)
    9030:	39c00104 	addi	r7,r7,4
    9034:	18c00104 	addi	r3,r3,4
    9038:	397fff15 	stw	r5,-4(r7)
    903c:	193ffb36 	bltu	r3,r4,902c <__alt_mem_Flash_flash_data+0xf400902c>
    9040:	003fe606 	br	8fdc <__alt_mem_Flash_flash_data+0xf4008fdc>
    9044:	9c000084 	addi	r16,r19,2
    9048:	003fe406 	br	8fdc <__alt_mem_Flash_flash_data+0xf4008fdc>

0000904c <__mcmp>:
    904c:	20800417 	ldw	r2,16(r4)
    9050:	28c00417 	ldw	r3,16(r5)
    9054:	10c5c83a 	sub	r2,r2,r3
    9058:	1000111e 	bne	r2,zero,90a0 <__mcmp+0x54>
    905c:	18c7883a 	add	r3,r3,r3
    9060:	18c7883a 	add	r3,r3,r3
    9064:	21000504 	addi	r4,r4,20
    9068:	29400504 	addi	r5,r5,20
    906c:	20c5883a 	add	r2,r4,r3
    9070:	28cb883a 	add	r5,r5,r3
    9074:	00000106 	br	907c <__mcmp+0x30>
    9078:	20800a2e 	bgeu	r4,r2,90a4 <__mcmp+0x58>
    907c:	10bfff04 	addi	r2,r2,-4
    9080:	297fff04 	addi	r5,r5,-4
    9084:	11800017 	ldw	r6,0(r2)
    9088:	28c00017 	ldw	r3,0(r5)
    908c:	30fffa26 	beq	r6,r3,9078 <__alt_mem_Flash_flash_data+0xf4009078>
    9090:	30c00236 	bltu	r6,r3,909c <__mcmp+0x50>
    9094:	00800044 	movi	r2,1
    9098:	f800283a 	ret
    909c:	00bfffc4 	movi	r2,-1
    90a0:	f800283a 	ret
    90a4:	0005883a 	mov	r2,zero
    90a8:	f800283a 	ret

000090ac <__mdiff>:
    90ac:	defffb04 	addi	sp,sp,-20
    90b0:	dc000015 	stw	r16,0(sp)
    90b4:	2821883a 	mov	r16,r5
    90b8:	dcc00315 	stw	r19,12(sp)
    90bc:	300b883a 	mov	r5,r6
    90c0:	2027883a 	mov	r19,r4
    90c4:	8009883a 	mov	r4,r16
    90c8:	dc800215 	stw	r18,8(sp)
    90cc:	dfc00415 	stw	ra,16(sp)
    90d0:	dc400115 	stw	r17,4(sp)
    90d4:	3025883a 	mov	r18,r6
    90d8:	000904c0 	call	904c <__mcmp>
    90dc:	10005226 	beq	r2,zero,9228 <__mdiff+0x17c>
    90e0:	10004c16 	blt	r2,zero,9214 <__mdiff+0x168>
    90e4:	0023883a 	mov	r17,zero
    90e8:	81400117 	ldw	r5,4(r16)
    90ec:	9809883a 	mov	r4,r19
    90f0:	00087780 	call	8778 <_Balloc>
    90f4:	83400417 	ldw	r13,16(r16)
    90f8:	93800417 	ldw	r14,16(r18)
    90fc:	81000504 	addi	r4,r16,20
    9100:	6b59883a 	add	r12,r13,r13
    9104:	739d883a 	add	r14,r14,r14
    9108:	6319883a 	add	r12,r12,r12
    910c:	91800504 	addi	r6,r18,20
    9110:	739d883a 	add	r14,r14,r14
    9114:	14400315 	stw	r17,12(r2)
    9118:	2319883a 	add	r12,r4,r12
    911c:	339d883a 	add	r14,r6,r14
    9120:	12400504 	addi	r9,r2,20
    9124:	0007883a 	mov	r3,zero
    9128:	22000017 	ldw	r8,0(r4)
    912c:	32800017 	ldw	r10,0(r6)
    9130:	4ac00104 	addi	r11,r9,4
    9134:	41ffffcc 	andi	r7,r8,65535
    9138:	38c7883a 	add	r3,r7,r3
    913c:	51ffffcc 	andi	r7,r10,65535
    9140:	19cfc83a 	sub	r7,r3,r7
    9144:	4010d43a 	srli	r8,r8,16
    9148:	5014d43a 	srli	r10,r10,16
    914c:	3807d43a 	srai	r3,r7,16
    9150:	39ffffcc 	andi	r7,r7,65535
    9154:	4291c83a 	sub	r8,r8,r10
    9158:	40c7883a 	add	r3,r8,r3
    915c:	1810943a 	slli	r8,r3,16
    9160:	31800104 	addi	r6,r6,4
    9164:	21000104 	addi	r4,r4,4
    9168:	41ceb03a 	or	r7,r8,r7
    916c:	49c00015 	stw	r7,0(r9)
    9170:	1807d43a 	srai	r3,r3,16
    9174:	580b883a 	mov	r5,r11
    9178:	5813883a 	mov	r9,r11
    917c:	33bfea36 	bltu	r6,r14,9128 <__alt_mem_Flash_flash_data+0xf4009128>
    9180:	2011883a 	mov	r8,r4
    9184:	2300152e 	bgeu	r4,r12,91dc <__mdiff+0x130>
    9188:	21400017 	ldw	r5,0(r4)
    918c:	4a400104 	addi	r9,r9,4
    9190:	21000104 	addi	r4,r4,4
    9194:	29ffffcc 	andi	r7,r5,65535
    9198:	38c7883a 	add	r3,r7,r3
    919c:	280ad43a 	srli	r5,r5,16
    91a0:	180dd43a 	srai	r6,r3,16
    91a4:	19ffffcc 	andi	r7,r3,65535
    91a8:	3147883a 	add	r3,r6,r5
    91ac:	180a943a 	slli	r5,r3,16
    91b0:	1807d43a 	srai	r3,r3,16
    91b4:	29ceb03a 	or	r7,r5,r7
    91b8:	49ffff15 	stw	r7,-4(r9)
    91bc:	233ff236 	bltu	r4,r12,9188 <__alt_mem_Flash_flash_data+0xf4009188>
    91c0:	0206303a 	nor	r3,zero,r8
    91c4:	1b07883a 	add	r3,r3,r12
    91c8:	1806d0ba 	srli	r3,r3,2
    91cc:	18c00044 	addi	r3,r3,1
    91d0:	18c7883a 	add	r3,r3,r3
    91d4:	18c7883a 	add	r3,r3,r3
    91d8:	58cb883a 	add	r5,r11,r3
    91dc:	28ffff04 	addi	r3,r5,-4
    91e0:	3800041e 	bne	r7,zero,91f4 <__mdiff+0x148>
    91e4:	18ffff04 	addi	r3,r3,-4
    91e8:	19000017 	ldw	r4,0(r3)
    91ec:	6b7fffc4 	addi	r13,r13,-1
    91f0:	203ffc26 	beq	r4,zero,91e4 <__alt_mem_Flash_flash_data+0xf40091e4>
    91f4:	13400415 	stw	r13,16(r2)
    91f8:	dfc00417 	ldw	ra,16(sp)
    91fc:	dcc00317 	ldw	r19,12(sp)
    9200:	dc800217 	ldw	r18,8(sp)
    9204:	dc400117 	ldw	r17,4(sp)
    9208:	dc000017 	ldw	r16,0(sp)
    920c:	dec00504 	addi	sp,sp,20
    9210:	f800283a 	ret
    9214:	8005883a 	mov	r2,r16
    9218:	04400044 	movi	r17,1
    921c:	9021883a 	mov	r16,r18
    9220:	1025883a 	mov	r18,r2
    9224:	003fb006 	br	90e8 <__alt_mem_Flash_flash_data+0xf40090e8>
    9228:	9809883a 	mov	r4,r19
    922c:	000b883a 	mov	r5,zero
    9230:	00087780 	call	8778 <_Balloc>
    9234:	00c00044 	movi	r3,1
    9238:	10c00415 	stw	r3,16(r2)
    923c:	10000515 	stw	zero,20(r2)
    9240:	003fed06 	br	91f8 <__alt_mem_Flash_flash_data+0xf40091f8>

00009244 <__ulp>:
    9244:	295ffc2c 	andhi	r5,r5,32752
    9248:	00bf3034 	movhi	r2,64704
    924c:	2887883a 	add	r3,r5,r2
    9250:	00c0020e 	bge	zero,r3,925c <__ulp+0x18>
    9254:	0005883a 	mov	r2,zero
    9258:	f800283a 	ret
    925c:	00c7c83a 	sub	r3,zero,r3
    9260:	180bd53a 	srai	r5,r3,20
    9264:	008004c4 	movi	r2,19
    9268:	11400a0e 	bge	r2,r5,9294 <__ulp+0x50>
    926c:	00800c84 	movi	r2,50
    9270:	0007883a 	mov	r3,zero
    9274:	11400516 	blt	r2,r5,928c <__ulp+0x48>
    9278:	00800cc4 	movi	r2,51
    927c:	114bc83a 	sub	r5,r2,r5
    9280:	00800044 	movi	r2,1
    9284:	1144983a 	sll	r2,r2,r5
    9288:	f800283a 	ret
    928c:	00800044 	movi	r2,1
    9290:	f800283a 	ret
    9294:	00800234 	movhi	r2,8
    9298:	1147d83a 	sra	r3,r2,r5
    929c:	0005883a 	mov	r2,zero
    92a0:	f800283a 	ret

000092a4 <__b2d>:
    92a4:	defffa04 	addi	sp,sp,-24
    92a8:	dc000015 	stw	r16,0(sp)
    92ac:	24000417 	ldw	r16,16(r4)
    92b0:	dc400115 	stw	r17,4(sp)
    92b4:	24400504 	addi	r17,r4,20
    92b8:	8421883a 	add	r16,r16,r16
    92bc:	8421883a 	add	r16,r16,r16
    92c0:	8c21883a 	add	r16,r17,r16
    92c4:	dc800215 	stw	r18,8(sp)
    92c8:	84bfff17 	ldw	r18,-4(r16)
    92cc:	dd000415 	stw	r20,16(sp)
    92d0:	dcc00315 	stw	r19,12(sp)
    92d4:	9009883a 	mov	r4,r18
    92d8:	2829883a 	mov	r20,r5
    92dc:	dfc00515 	stw	ra,20(sp)
    92e0:	0008a6c0 	call	8a6c <__hi0bits>
    92e4:	00c00804 	movi	r3,32
    92e8:	1887c83a 	sub	r3,r3,r2
    92ec:	a0c00015 	stw	r3,0(r20)
    92f0:	00c00284 	movi	r3,10
    92f4:	84ffff04 	addi	r19,r16,-4
    92f8:	18801216 	blt	r3,r2,9344 <__b2d+0xa0>
    92fc:	014002c4 	movi	r5,11
    9300:	2889c83a 	sub	r4,r5,r2
    9304:	9106d83a 	srl	r3,r18,r4
    9308:	18cffc34 	orhi	r3,r3,16368
    930c:	8cc0282e 	bgeu	r17,r19,93b0 <__b2d+0x10c>
    9310:	817ffe17 	ldw	r5,-8(r16)
    9314:	290ad83a 	srl	r5,r5,r4
    9318:	10800544 	addi	r2,r2,21
    931c:	9084983a 	sll	r2,r18,r2
    9320:	2884b03a 	or	r2,r5,r2
    9324:	dfc00517 	ldw	ra,20(sp)
    9328:	dd000417 	ldw	r20,16(sp)
    932c:	dcc00317 	ldw	r19,12(sp)
    9330:	dc800217 	ldw	r18,8(sp)
    9334:	dc400117 	ldw	r17,4(sp)
    9338:	dc000017 	ldw	r16,0(sp)
    933c:	dec00604 	addi	sp,sp,24
    9340:	f800283a 	ret
    9344:	113ffd44 	addi	r4,r2,-11
    9348:	8cc00f2e 	bgeu	r17,r19,9388 <__b2d+0xe4>
    934c:	81bffe04 	addi	r6,r16,-8
    9350:	817ffe17 	ldw	r5,-8(r16)
    9354:	20001326 	beq	r4,zero,93a4 <__b2d+0x100>
    9358:	00c00ac4 	movi	r3,43
    935c:	1885c83a 	sub	r2,r3,r2
    9360:	2886d83a 	srl	r3,r5,r2
    9364:	9124983a 	sll	r18,r18,r4
    9368:	90e4b03a 	or	r18,r18,r3
    936c:	90cffc34 	orhi	r3,r18,16368
    9370:	8980112e 	bgeu	r17,r6,93b8 <__b2d+0x114>
    9374:	81bffd17 	ldw	r6,-12(r16)
    9378:	308cd83a 	srl	r6,r6,r2
    937c:	2904983a 	sll	r2,r5,r4
    9380:	1184b03a 	or	r2,r2,r6
    9384:	003fe706 	br	9324 <__alt_mem_Flash_flash_data+0xf4009324>
    9388:	20000526 	beq	r4,zero,93a0 <__b2d+0xfc>
    938c:	9124983a 	sll	r18,r18,r4
    9390:	000d883a 	mov	r6,zero
    9394:	000b883a 	mov	r5,zero
    9398:	90cffc34 	orhi	r3,r18,16368
    939c:	003ff706 	br	937c <__alt_mem_Flash_flash_data+0xf400937c>
    93a0:	000b883a 	mov	r5,zero
    93a4:	90cffc34 	orhi	r3,r18,16368
    93a8:	2805883a 	mov	r2,r5
    93ac:	003fdd06 	br	9324 <__alt_mem_Flash_flash_data+0xf4009324>
    93b0:	000b883a 	mov	r5,zero
    93b4:	003fd806 	br	9318 <__alt_mem_Flash_flash_data+0xf4009318>
    93b8:	000d883a 	mov	r6,zero
    93bc:	003fef06 	br	937c <__alt_mem_Flash_flash_data+0xf400937c>

000093c0 <__d2b>:
    93c0:	defff704 	addi	sp,sp,-36
    93c4:	dc000215 	stw	r16,8(sp)
    93c8:	3021883a 	mov	r16,r6
    93cc:	dc400315 	stw	r17,12(sp)
    93d0:	8022907a 	slli	r17,r16,1
    93d4:	dd400715 	stw	r21,28(sp)
    93d8:	282b883a 	mov	r21,r5
    93dc:	01400044 	movi	r5,1
    93e0:	dd000615 	stw	r20,24(sp)
    93e4:	dcc00515 	stw	r19,20(sp)
    93e8:	dc800415 	stw	r18,16(sp)
    93ec:	dfc00815 	stw	ra,32(sp)
    93f0:	3829883a 	mov	r20,r7
    93f4:	dc800917 	ldw	r18,36(sp)
    93f8:	8822d57a 	srli	r17,r17,21
    93fc:	00087780 	call	8778 <_Balloc>
    9400:	1027883a 	mov	r19,r2
    9404:	00800434 	movhi	r2,16
    9408:	10bfffc4 	addi	r2,r2,-1
    940c:	808c703a 	and	r6,r16,r2
    9410:	88000126 	beq	r17,zero,9418 <__d2b+0x58>
    9414:	31800434 	orhi	r6,r6,16
    9418:	d9800015 	stw	r6,0(sp)
    941c:	a8001f26 	beq	r21,zero,949c <__d2b+0xdc>
    9420:	d9000104 	addi	r4,sp,4
    9424:	dd400115 	stw	r21,4(sp)
    9428:	0008ad40 	call	8ad4 <__lo0bits>
    942c:	d8c00017 	ldw	r3,0(sp)
    9430:	1000291e 	bne	r2,zero,94d8 <__d2b+0x118>
    9434:	d9000117 	ldw	r4,4(sp)
    9438:	99000515 	stw	r4,20(r19)
    943c:	1820c03a 	cmpne	r16,r3,zero
    9440:	84000044 	addi	r16,r16,1
    9444:	98c00615 	stw	r3,24(r19)
    9448:	9c000415 	stw	r16,16(r19)
    944c:	88001b1e 	bne	r17,zero,94bc <__d2b+0xfc>
    9450:	800690ba 	slli	r3,r16,2
    9454:	10bef384 	addi	r2,r2,-1074
    9458:	a0800015 	stw	r2,0(r20)
    945c:	98c5883a 	add	r2,r19,r3
    9460:	11000417 	ldw	r4,16(r2)
    9464:	8020917a 	slli	r16,r16,5
    9468:	0008a6c0 	call	8a6c <__hi0bits>
    946c:	8085c83a 	sub	r2,r16,r2
    9470:	90800015 	stw	r2,0(r18)
    9474:	9805883a 	mov	r2,r19
    9478:	dfc00817 	ldw	ra,32(sp)
    947c:	dd400717 	ldw	r21,28(sp)
    9480:	dd000617 	ldw	r20,24(sp)
    9484:	dcc00517 	ldw	r19,20(sp)
    9488:	dc800417 	ldw	r18,16(sp)
    948c:	dc400317 	ldw	r17,12(sp)
    9490:	dc000217 	ldw	r16,8(sp)
    9494:	dec00904 	addi	sp,sp,36
    9498:	f800283a 	ret
    949c:	d809883a 	mov	r4,sp
    94a0:	0008ad40 	call	8ad4 <__lo0bits>
    94a4:	d8c00017 	ldw	r3,0(sp)
    94a8:	04000044 	movi	r16,1
    94ac:	9c000415 	stw	r16,16(r19)
    94b0:	98c00515 	stw	r3,20(r19)
    94b4:	10800804 	addi	r2,r2,32
    94b8:	883fe526 	beq	r17,zero,9450 <__alt_mem_Flash_flash_data+0xf4009450>
    94bc:	8c7ef344 	addi	r17,r17,-1075
    94c0:	88a3883a 	add	r17,r17,r2
    94c4:	00c00d44 	movi	r3,53
    94c8:	a4400015 	stw	r17,0(r20)
    94cc:	1885c83a 	sub	r2,r3,r2
    94d0:	90800015 	stw	r2,0(r18)
    94d4:	003fe706 	br	9474 <__alt_mem_Flash_flash_data+0xf4009474>
    94d8:	01000804 	movi	r4,32
    94dc:	2089c83a 	sub	r4,r4,r2
    94e0:	1908983a 	sll	r4,r3,r4
    94e4:	d9400117 	ldw	r5,4(sp)
    94e8:	1886d83a 	srl	r3,r3,r2
    94ec:	2148b03a 	or	r4,r4,r5
    94f0:	99000515 	stw	r4,20(r19)
    94f4:	d8c00015 	stw	r3,0(sp)
    94f8:	003fd006 	br	943c <__alt_mem_Flash_flash_data+0xf400943c>

000094fc <__ratio>:
    94fc:	defff904 	addi	sp,sp,-28
    9500:	dc400315 	stw	r17,12(sp)
    9504:	2823883a 	mov	r17,r5
    9508:	d9400104 	addi	r5,sp,4
    950c:	dfc00615 	stw	ra,24(sp)
    9510:	dcc00515 	stw	r19,20(sp)
    9514:	dc800415 	stw	r18,16(sp)
    9518:	2027883a 	mov	r19,r4
    951c:	dc000215 	stw	r16,8(sp)
    9520:	00092a40 	call	92a4 <__b2d>
    9524:	8809883a 	mov	r4,r17
    9528:	d80b883a 	mov	r5,sp
    952c:	1025883a 	mov	r18,r2
    9530:	1821883a 	mov	r16,r3
    9534:	00092a40 	call	92a4 <__b2d>
    9538:	8a400417 	ldw	r9,16(r17)
    953c:	9a000417 	ldw	r8,16(r19)
    9540:	100d883a 	mov	r6,r2
    9544:	d8800017 	ldw	r2,0(sp)
    9548:	4251c83a 	sub	r8,r8,r9
    954c:	4012917a 	slli	r9,r8,5
    9550:	da000117 	ldw	r8,4(sp)
    9554:	4091c83a 	sub	r8,r8,r2
    9558:	4251883a 	add	r8,r8,r9
    955c:	02000d0e 	bge	zero,r8,9594 <__ratio+0x98>
    9560:	4010953a 	slli	r8,r8,20
    9564:	4421883a 	add	r16,r8,r16
    9568:	9009883a 	mov	r4,r18
    956c:	800b883a 	mov	r5,r16
    9570:	180f883a 	mov	r7,r3
    9574:	000e56c0 	call	e56c <__divdf3>
    9578:	dfc00617 	ldw	ra,24(sp)
    957c:	dcc00517 	ldw	r19,20(sp)
    9580:	dc800417 	ldw	r18,16(sp)
    9584:	dc400317 	ldw	r17,12(sp)
    9588:	dc000217 	ldw	r16,8(sp)
    958c:	dec00704 	addi	sp,sp,28
    9590:	f800283a 	ret
    9594:	4010953a 	slli	r8,r8,20
    9598:	1a07c83a 	sub	r3,r3,r8
    959c:	003ff206 	br	9568 <__alt_mem_Flash_flash_data+0xf4009568>

000095a0 <_mprec_log10>:
    95a0:	defffe04 	addi	sp,sp,-8
    95a4:	dc000015 	stw	r16,0(sp)
    95a8:	dfc00115 	stw	ra,4(sp)
    95ac:	008005c4 	movi	r2,23
    95b0:	2021883a 	mov	r16,r4
    95b4:	11000d0e 	bge	r2,r4,95ec <_mprec_log10+0x4c>
    95b8:	0005883a 	mov	r2,zero
    95bc:	00cffc34 	movhi	r3,16368
    95c0:	843fffc4 	addi	r16,r16,-1
    95c4:	1009883a 	mov	r4,r2
    95c8:	180b883a 	mov	r5,r3
    95cc:	000d883a 	mov	r6,zero
    95d0:	01d00934 	movhi	r7,16420
    95d4:	000f07c0 	call	f07c <__muldf3>
    95d8:	803ff91e 	bne	r16,zero,95c0 <__alt_mem_Flash_flash_data+0xf40095c0>
    95dc:	dfc00117 	ldw	ra,4(sp)
    95e0:	dc000017 	ldw	r16,0(sp)
    95e4:	dec00204 	addi	sp,sp,8
    95e8:	f800283a 	ret
    95ec:	202090fa 	slli	r16,r4,3
    95f0:	008000b4 	movhi	r2,2
    95f4:	1083b904 	addi	r2,r2,3812
    95f8:	1421883a 	add	r16,r2,r16
    95fc:	80800017 	ldw	r2,0(r16)
    9600:	80c00117 	ldw	r3,4(r16)
    9604:	dfc00117 	ldw	ra,4(sp)
    9608:	dc000017 	ldw	r16,0(sp)
    960c:	dec00204 	addi	sp,sp,8
    9610:	f800283a 	ret

00009614 <__copybits>:
    9614:	297fffc4 	addi	r5,r5,-1
    9618:	280fd17a 	srai	r7,r5,5
    961c:	30c00417 	ldw	r3,16(r6)
    9620:	30800504 	addi	r2,r6,20
    9624:	39c00044 	addi	r7,r7,1
    9628:	18c7883a 	add	r3,r3,r3
    962c:	39cf883a 	add	r7,r7,r7
    9630:	18c7883a 	add	r3,r3,r3
    9634:	39cf883a 	add	r7,r7,r7
    9638:	10c7883a 	add	r3,r2,r3
    963c:	21cf883a 	add	r7,r4,r7
    9640:	10c00d2e 	bgeu	r2,r3,9678 <__copybits+0x64>
    9644:	200b883a 	mov	r5,r4
    9648:	12000017 	ldw	r8,0(r2)
    964c:	29400104 	addi	r5,r5,4
    9650:	10800104 	addi	r2,r2,4
    9654:	2a3fff15 	stw	r8,-4(r5)
    9658:	10fffb36 	bltu	r2,r3,9648 <__alt_mem_Flash_flash_data+0xf4009648>
    965c:	1985c83a 	sub	r2,r3,r6
    9660:	10bffac4 	addi	r2,r2,-21
    9664:	1004d0ba 	srli	r2,r2,2
    9668:	10800044 	addi	r2,r2,1
    966c:	1085883a 	add	r2,r2,r2
    9670:	1085883a 	add	r2,r2,r2
    9674:	2089883a 	add	r4,r4,r2
    9678:	21c0032e 	bgeu	r4,r7,9688 <__copybits+0x74>
    967c:	20000015 	stw	zero,0(r4)
    9680:	21000104 	addi	r4,r4,4
    9684:	21fffd36 	bltu	r4,r7,967c <__alt_mem_Flash_flash_data+0xf400967c>
    9688:	f800283a 	ret

0000968c <__any_on>:
    968c:	20c00417 	ldw	r3,16(r4)
    9690:	2805d17a 	srai	r2,r5,5
    9694:	21000504 	addi	r4,r4,20
    9698:	18800d0e 	bge	r3,r2,96d0 <__any_on+0x44>
    969c:	18c7883a 	add	r3,r3,r3
    96a0:	18c7883a 	add	r3,r3,r3
    96a4:	20c7883a 	add	r3,r4,r3
    96a8:	20c0192e 	bgeu	r4,r3,9710 <__any_on+0x84>
    96ac:	18bfff17 	ldw	r2,-4(r3)
    96b0:	18ffff04 	addi	r3,r3,-4
    96b4:	1000041e 	bne	r2,zero,96c8 <__any_on+0x3c>
    96b8:	20c0142e 	bgeu	r4,r3,970c <__any_on+0x80>
    96bc:	18ffff04 	addi	r3,r3,-4
    96c0:	19400017 	ldw	r5,0(r3)
    96c4:	283ffc26 	beq	r5,zero,96b8 <__alt_mem_Flash_flash_data+0xf40096b8>
    96c8:	00800044 	movi	r2,1
    96cc:	f800283a 	ret
    96d0:	10c00a0e 	bge	r2,r3,96fc <__any_on+0x70>
    96d4:	1085883a 	add	r2,r2,r2
    96d8:	1085883a 	add	r2,r2,r2
    96dc:	294007cc 	andi	r5,r5,31
    96e0:	2087883a 	add	r3,r4,r2
    96e4:	283ff026 	beq	r5,zero,96a8 <__alt_mem_Flash_flash_data+0xf40096a8>
    96e8:	19800017 	ldw	r6,0(r3)
    96ec:	3144d83a 	srl	r2,r6,r5
    96f0:	114a983a 	sll	r5,r2,r5
    96f4:	29bff41e 	bne	r5,r6,96c8 <__alt_mem_Flash_flash_data+0xf40096c8>
    96f8:	003feb06 	br	96a8 <__alt_mem_Flash_flash_data+0xf40096a8>
    96fc:	1085883a 	add	r2,r2,r2
    9700:	1085883a 	add	r2,r2,r2
    9704:	2087883a 	add	r3,r4,r2
    9708:	003fe706 	br	96a8 <__alt_mem_Flash_flash_data+0xf40096a8>
    970c:	f800283a 	ret
    9710:	0005883a 	mov	r2,zero
    9714:	f800283a 	ret

00009718 <_putc_r>:
    9718:	defffc04 	addi	sp,sp,-16
    971c:	dc000215 	stw	r16,8(sp)
    9720:	dfc00315 	stw	ra,12(sp)
    9724:	2021883a 	mov	r16,r4
    9728:	20000226 	beq	r4,zero,9734 <_putc_r+0x1c>
    972c:	20800e17 	ldw	r2,56(r4)
    9730:	10001b26 	beq	r2,zero,97a0 <_putc_r+0x88>
    9734:	30800217 	ldw	r2,8(r6)
    9738:	10bfffc4 	addi	r2,r2,-1
    973c:	30800215 	stw	r2,8(r6)
    9740:	10000a16 	blt	r2,zero,976c <_putc_r+0x54>
    9744:	30800017 	ldw	r2,0(r6)
    9748:	11400005 	stb	r5,0(r2)
    974c:	30800017 	ldw	r2,0(r6)
    9750:	10c00044 	addi	r3,r2,1
    9754:	30c00015 	stw	r3,0(r6)
    9758:	10800003 	ldbu	r2,0(r2)
    975c:	dfc00317 	ldw	ra,12(sp)
    9760:	dc000217 	ldw	r16,8(sp)
    9764:	dec00404 	addi	sp,sp,16
    9768:	f800283a 	ret
    976c:	30c00617 	ldw	r3,24(r6)
    9770:	10c00616 	blt	r2,r3,978c <_putc_r+0x74>
    9774:	30800017 	ldw	r2,0(r6)
    9778:	00c00284 	movi	r3,10
    977c:	11400005 	stb	r5,0(r2)
    9780:	30800017 	ldw	r2,0(r6)
    9784:	11400003 	ldbu	r5,0(r2)
    9788:	28fff11e 	bne	r5,r3,9750 <__alt_mem_Flash_flash_data+0xf4009750>
    978c:	8009883a 	mov	r4,r16
    9790:	dfc00317 	ldw	ra,12(sp)
    9794:	dc000217 	ldw	r16,8(sp)
    9798:	dec00404 	addi	sp,sp,16
    979c:	000c75c1 	jmpi	c75c <__swbuf_r>
    97a0:	d9400015 	stw	r5,0(sp)
    97a4:	d9800115 	stw	r6,4(sp)
    97a8:	0006f100 	call	6f10 <__sinit>
    97ac:	d9800117 	ldw	r6,4(sp)
    97b0:	d9400017 	ldw	r5,0(sp)
    97b4:	003fdf06 	br	9734 <__alt_mem_Flash_flash_data+0xf4009734>

000097b8 <putc>:
    97b8:	008000b4 	movhi	r2,2
    97bc:	defffc04 	addi	sp,sp,-16
    97c0:	108c8604 	addi	r2,r2,12824
    97c4:	dc400115 	stw	r17,4(sp)
    97c8:	14400017 	ldw	r17,0(r2)
    97cc:	dc800215 	stw	r18,8(sp)
    97d0:	dc000015 	stw	r16,0(sp)
    97d4:	dfc00315 	stw	ra,12(sp)
    97d8:	2025883a 	mov	r18,r4
    97dc:	2821883a 	mov	r16,r5
    97e0:	88000226 	beq	r17,zero,97ec <putc+0x34>
    97e4:	88800e17 	ldw	r2,56(r17)
    97e8:	10001a26 	beq	r2,zero,9854 <putc+0x9c>
    97ec:	80800217 	ldw	r2,8(r16)
    97f0:	10bfffc4 	addi	r2,r2,-1
    97f4:	80800215 	stw	r2,8(r16)
    97f8:	10000c16 	blt	r2,zero,982c <putc+0x74>
    97fc:	80800017 	ldw	r2,0(r16)
    9800:	14800005 	stb	r18,0(r2)
    9804:	80800017 	ldw	r2,0(r16)
    9808:	10c00044 	addi	r3,r2,1
    980c:	80c00015 	stw	r3,0(r16)
    9810:	10800003 	ldbu	r2,0(r2)
    9814:	dfc00317 	ldw	ra,12(sp)
    9818:	dc800217 	ldw	r18,8(sp)
    981c:	dc400117 	ldw	r17,4(sp)
    9820:	dc000017 	ldw	r16,0(sp)
    9824:	dec00404 	addi	sp,sp,16
    9828:	f800283a 	ret
    982c:	80c00617 	ldw	r3,24(r16)
    9830:	10c00b16 	blt	r2,r3,9860 <putc+0xa8>
    9834:	80800017 	ldw	r2,0(r16)
    9838:	00c00284 	movi	r3,10
    983c:	14800005 	stb	r18,0(r2)
    9840:	80800017 	ldw	r2,0(r16)
    9844:	11400003 	ldbu	r5,0(r2)
    9848:	28ffef1e 	bne	r5,r3,9808 <__alt_mem_Flash_flash_data+0xf4009808>
    984c:	8809883a 	mov	r4,r17
    9850:	00000506 	br	9868 <putc+0xb0>
    9854:	8809883a 	mov	r4,r17
    9858:	0006f100 	call	6f10 <__sinit>
    985c:	003fe306 	br	97ec <__alt_mem_Flash_flash_data+0xf40097ec>
    9860:	8809883a 	mov	r4,r17
    9864:	900b883a 	mov	r5,r18
    9868:	800d883a 	mov	r6,r16
    986c:	dfc00317 	ldw	ra,12(sp)
    9870:	dc800217 	ldw	r18,8(sp)
    9874:	dc400117 	ldw	r17,4(sp)
    9878:	dc000017 	ldw	r16,0(sp)
    987c:	dec00404 	addi	sp,sp,16
    9880:	000c75c1 	jmpi	c75c <__swbuf_r>

00009884 <_realloc_r>:
    9884:	defff604 	addi	sp,sp,-40
    9888:	dd000415 	stw	r20,16(sp)
    988c:	dc400115 	stw	r17,4(sp)
    9890:	dfc00915 	stw	ra,36(sp)
    9894:	df000815 	stw	fp,32(sp)
    9898:	ddc00715 	stw	r23,28(sp)
    989c:	dd800615 	stw	r22,24(sp)
    98a0:	dd400515 	stw	r21,20(sp)
    98a4:	dcc00315 	stw	r19,12(sp)
    98a8:	dc800215 	stw	r18,8(sp)
    98ac:	dc000015 	stw	r16,0(sp)
    98b0:	2829883a 	mov	r20,r5
    98b4:	3023883a 	mov	r17,r6
    98b8:	2800ad26 	beq	r5,zero,9b70 <_realloc_r+0x2ec>
    98bc:	2025883a 	mov	r18,r4
    98c0:	0010dac0 	call	10dac <__malloc_lock>
    98c4:	a0ffff17 	ldw	r3,-4(r20)
    98c8:	043fff04 	movi	r16,-4
    98cc:	890002c4 	addi	r4,r17,11
    98d0:	01c00584 	movi	r7,22
    98d4:	a57ffe04 	addi	r21,r20,-8
    98d8:	1c20703a 	and	r16,r3,r16
    98dc:	39001d2e 	bgeu	r7,r4,9954 <_realloc_r+0xd0>
    98e0:	05bffe04 	movi	r22,-8
    98e4:	25ac703a 	and	r22,r4,r22
    98e8:	b00f883a 	mov	r7,r22
    98ec:	b0006516 	blt	r22,zero,9a84 <_realloc_r+0x200>
    98f0:	b4406436 	bltu	r22,r17,9a84 <_realloc_r+0x200>
    98f4:	81c01a0e 	bge	r16,r7,9960 <_realloc_r+0xdc>
    98f8:	070000b4 	movhi	fp,2
    98fc:	e7061d04 	addi	fp,fp,6260
    9900:	e1400217 	ldw	r5,8(fp)
    9904:	ac11883a 	add	r8,r21,r16
    9908:	2a006226 	beq	r5,r8,9a94 <_realloc_r+0x210>
    990c:	41800117 	ldw	r6,4(r8)
    9910:	027fff84 	movi	r9,-2
    9914:	3252703a 	and	r9,r6,r9
    9918:	4253883a 	add	r9,r8,r9
    991c:	49000117 	ldw	r4,4(r9)
    9920:	2100004c 	andi	r4,r4,1
    9924:	2000281e 	bne	r4,zero,99c8 <_realloc_r+0x144>
    9928:	00bfff04 	movi	r2,-4
    992c:	3084703a 	and	r2,r6,r2
    9930:	1409883a 	add	r4,r2,r16
    9934:	21c05e16 	blt	r4,r7,9ab0 <_realloc_r+0x22c>
    9938:	40800317 	ldw	r2,12(r8)
    993c:	41400217 	ldw	r5,8(r8)
    9940:	a023883a 	mov	r17,r20
    9944:	2021883a 	mov	r16,r4
    9948:	28800315 	stw	r2,12(r5)
    994c:	11400215 	stw	r5,8(r2)
    9950:	00000406 	br	9964 <_realloc_r+0xe0>
    9954:	01c00404 	movi	r7,16
    9958:	382d883a 	mov	r22,r7
    995c:	003fe406 	br	98f0 <__alt_mem_Flash_flash_data+0xf40098f0>
    9960:	a023883a 	mov	r17,r20
    9964:	858fc83a 	sub	r7,r16,r22
    9968:	008003c4 	movi	r2,15
    996c:	18c0004c 	andi	r3,r3,1
    9970:	11c07236 	bltu	r2,r7,9b3c <_realloc_r+0x2b8>
    9974:	1c06b03a 	or	r3,r3,r16
    9978:	a8c00115 	stw	r3,4(r21)
    997c:	ac21883a 	add	r16,r21,r16
    9980:	80800117 	ldw	r2,4(r16)
    9984:	10800054 	ori	r2,r2,1
    9988:	80800115 	stw	r2,4(r16)
    998c:	9009883a 	mov	r4,r18
    9990:	0010ecc0 	call	10ecc <__malloc_unlock>
    9994:	8805883a 	mov	r2,r17
    9998:	dfc00917 	ldw	ra,36(sp)
    999c:	df000817 	ldw	fp,32(sp)
    99a0:	ddc00717 	ldw	r23,28(sp)
    99a4:	dd800617 	ldw	r22,24(sp)
    99a8:	dd400517 	ldw	r21,20(sp)
    99ac:	dd000417 	ldw	r20,16(sp)
    99b0:	dcc00317 	ldw	r19,12(sp)
    99b4:	dc800217 	ldw	r18,8(sp)
    99b8:	dc400117 	ldw	r17,4(sp)
    99bc:	dc000017 	ldw	r16,0(sp)
    99c0:	dec00a04 	addi	sp,sp,40
    99c4:	f800283a 	ret
    99c8:	18c0004c 	andi	r3,r3,1
    99cc:	1800081e 	bne	r3,zero,99f0 <_realloc_r+0x16c>
    99d0:	a4fffe17 	ldw	r19,-8(r20)
    99d4:	00bfff04 	movi	r2,-4
    99d8:	ace7c83a 	sub	r19,r21,r19
    99dc:	98c00117 	ldw	r3,4(r19)
    99e0:	1886703a 	and	r3,r3,r2
    99e4:	98000226 	beq	r19,zero,99f0 <_realloc_r+0x16c>
    99e8:	1c2f883a 	add	r23,r3,r16
    99ec:	b9c06d0e 	bge	r23,r7,9ba4 <_realloc_r+0x320>
    99f0:	880b883a 	mov	r5,r17
    99f4:	9009883a 	mov	r4,r18
    99f8:	0007c540 	call	7c54 <_malloc_r>
    99fc:	1023883a 	mov	r17,r2
    9a00:	1000ef26 	beq	r2,zero,9dc0 <_realloc_r+0x53c>
    9a04:	a0ffff17 	ldw	r3,-4(r20)
    9a08:	113ffe04 	addi	r4,r2,-8
    9a0c:	00bfff84 	movi	r2,-2
    9a10:	1884703a 	and	r2,r3,r2
    9a14:	a885883a 	add	r2,r21,r2
    9a18:	2080bf26 	beq	r4,r2,9d18 <_realloc_r+0x494>
    9a1c:	81bfff04 	addi	r6,r16,-4
    9a20:	00800904 	movi	r2,36
    9a24:	11808936 	bltu	r2,r6,9c4c <_realloc_r+0x3c8>
    9a28:	00c004c4 	movi	r3,19
    9a2c:	19806c2e 	bgeu	r3,r6,9be0 <_realloc_r+0x35c>
    9a30:	a0c00017 	ldw	r3,0(r20)
    9a34:	88c00015 	stw	r3,0(r17)
    9a38:	a0c00117 	ldw	r3,4(r20)
    9a3c:	88c00115 	stw	r3,4(r17)
    9a40:	00c006c4 	movi	r3,27
    9a44:	1980ac36 	bltu	r3,r6,9cf8 <_realloc_r+0x474>
    9a48:	88800204 	addi	r2,r17,8
    9a4c:	a0c00204 	addi	r3,r20,8
    9a50:	19000017 	ldw	r4,0(r3)
    9a54:	11000015 	stw	r4,0(r2)
    9a58:	19000117 	ldw	r4,4(r3)
    9a5c:	11000115 	stw	r4,4(r2)
    9a60:	18c00217 	ldw	r3,8(r3)
    9a64:	10c00215 	stw	r3,8(r2)
    9a68:	a00b883a 	mov	r5,r20
    9a6c:	9009883a 	mov	r4,r18
    9a70:	00070840 	call	7084 <_free_r>
    9a74:	9009883a 	mov	r4,r18
    9a78:	0010ecc0 	call	10ecc <__malloc_unlock>
    9a7c:	8805883a 	mov	r2,r17
    9a80:	003fc506 	br	9998 <__alt_mem_Flash_flash_data+0xf4009998>
    9a84:	00800304 	movi	r2,12
    9a88:	90800015 	stw	r2,0(r18)
    9a8c:	0005883a 	mov	r2,zero
    9a90:	003fc106 	br	9998 <__alt_mem_Flash_flash_data+0xf4009998>
    9a94:	29800117 	ldw	r6,4(r5)
    9a98:	00bfff04 	movi	r2,-4
    9a9c:	b1000404 	addi	r4,r22,16
    9aa0:	3084703a 	and	r2,r6,r2
    9aa4:	140d883a 	add	r6,r2,r16
    9aa8:	31005b0e 	bge	r6,r4,9c18 <_realloc_r+0x394>
    9aac:	2811883a 	mov	r8,r5
    9ab0:	18c0004c 	andi	r3,r3,1
    9ab4:	183fce1e 	bne	r3,zero,99f0 <__alt_mem_Flash_flash_data+0xf40099f0>
    9ab8:	a4fffe17 	ldw	r19,-8(r20)
    9abc:	00ffff04 	movi	r3,-4
    9ac0:	ace7c83a 	sub	r19,r21,r19
    9ac4:	99000117 	ldw	r4,4(r19)
    9ac8:	20c6703a 	and	r3,r4,r3
    9acc:	403fc526 	beq	r8,zero,99e4 <__alt_mem_Flash_flash_data+0xf40099e4>
    9ad0:	1c2f883a 	add	r23,r3,r16
    9ad4:	b8af883a 	add	r23,r23,r2
    9ad8:	41406026 	beq	r8,r5,9c5c <_realloc_r+0x3d8>
    9adc:	b9ffc116 	blt	r23,r7,99e4 <__alt_mem_Flash_flash_data+0xf40099e4>
    9ae0:	40c00217 	ldw	r3,8(r8)
    9ae4:	40800317 	ldw	r2,12(r8)
    9ae8:	81bfff04 	addi	r6,r16,-4
    9aec:	01000904 	movi	r4,36
    9af0:	18800315 	stw	r2,12(r3)
    9af4:	10c00215 	stw	r3,8(r2)
    9af8:	99400217 	ldw	r5,8(r19)
    9afc:	98c00317 	ldw	r3,12(r19)
    9b00:	9c400204 	addi	r17,r19,8
    9b04:	28c00315 	stw	r3,12(r5)
    9b08:	19400215 	stw	r5,8(r3)
    9b0c:	21802d36 	bltu	r4,r6,9bc4 <_realloc_r+0x340>
    9b10:	008004c4 	movi	r2,19
    9b14:	1180352e 	bgeu	r2,r6,9bec <_realloc_r+0x368>
    9b18:	a0800017 	ldw	r2,0(r20)
    9b1c:	98800215 	stw	r2,8(r19)
    9b20:	a0800117 	ldw	r2,4(r20)
    9b24:	98800315 	stw	r2,12(r19)
    9b28:	008006c4 	movi	r2,27
    9b2c:	11808036 	bltu	r2,r6,9d30 <_realloc_r+0x4ac>
    9b30:	98c00404 	addi	r3,r19,16
    9b34:	a5000204 	addi	r20,r20,8
    9b38:	00002d06 	br	9bf0 <_realloc_r+0x36c>
    9b3c:	1d86b03a 	or	r3,r3,r22
    9b40:	ad8b883a 	add	r5,r21,r22
    9b44:	a8c00115 	stw	r3,4(r21)
    9b48:	38800054 	ori	r2,r7,1
    9b4c:	28800115 	stw	r2,4(r5)
    9b50:	29cf883a 	add	r7,r5,r7
    9b54:	38800117 	ldw	r2,4(r7)
    9b58:	9009883a 	mov	r4,r18
    9b5c:	29400204 	addi	r5,r5,8
    9b60:	10800054 	ori	r2,r2,1
    9b64:	38800115 	stw	r2,4(r7)
    9b68:	00070840 	call	7084 <_free_r>
    9b6c:	003f8706 	br	998c <__alt_mem_Flash_flash_data+0xf400998c>
    9b70:	300b883a 	mov	r5,r6
    9b74:	dfc00917 	ldw	ra,36(sp)
    9b78:	df000817 	ldw	fp,32(sp)
    9b7c:	ddc00717 	ldw	r23,28(sp)
    9b80:	dd800617 	ldw	r22,24(sp)
    9b84:	dd400517 	ldw	r21,20(sp)
    9b88:	dd000417 	ldw	r20,16(sp)
    9b8c:	dcc00317 	ldw	r19,12(sp)
    9b90:	dc800217 	ldw	r18,8(sp)
    9b94:	dc400117 	ldw	r17,4(sp)
    9b98:	dc000017 	ldw	r16,0(sp)
    9b9c:	dec00a04 	addi	sp,sp,40
    9ba0:	0007c541 	jmpi	7c54 <_malloc_r>
    9ba4:	98800317 	ldw	r2,12(r19)
    9ba8:	98c00217 	ldw	r3,8(r19)
    9bac:	81bfff04 	addi	r6,r16,-4
    9bb0:	01000904 	movi	r4,36
    9bb4:	18800315 	stw	r2,12(r3)
    9bb8:	10c00215 	stw	r3,8(r2)
    9bbc:	9c400204 	addi	r17,r19,8
    9bc0:	21bfd32e 	bgeu	r4,r6,9b10 <__alt_mem_Flash_flash_data+0xf4009b10>
    9bc4:	8809883a 	mov	r4,r17
    9bc8:	a00b883a 	mov	r5,r20
    9bcc:	000861c0 	call	861c <memmove>
    9bd0:	98c00117 	ldw	r3,4(r19)
    9bd4:	b821883a 	mov	r16,r23
    9bd8:	982b883a 	mov	r21,r19
    9bdc:	003f6106 	br	9964 <__alt_mem_Flash_flash_data+0xf4009964>
    9be0:	8805883a 	mov	r2,r17
    9be4:	a007883a 	mov	r3,r20
    9be8:	003f9906 	br	9a50 <__alt_mem_Flash_flash_data+0xf4009a50>
    9bec:	8807883a 	mov	r3,r17
    9bf0:	a0800017 	ldw	r2,0(r20)
    9bf4:	b821883a 	mov	r16,r23
    9bf8:	982b883a 	mov	r21,r19
    9bfc:	18800015 	stw	r2,0(r3)
    9c00:	a0800117 	ldw	r2,4(r20)
    9c04:	18800115 	stw	r2,4(r3)
    9c08:	a0800217 	ldw	r2,8(r20)
    9c0c:	18800215 	stw	r2,8(r3)
    9c10:	98c00117 	ldw	r3,4(r19)
    9c14:	003f5306 	br	9964 <__alt_mem_Flash_flash_data+0xf4009964>
    9c18:	adab883a 	add	r21,r21,r22
    9c1c:	3585c83a 	sub	r2,r6,r22
    9c20:	e5400215 	stw	r21,8(fp)
    9c24:	10800054 	ori	r2,r2,1
    9c28:	a8800115 	stw	r2,4(r21)
    9c2c:	a0bfff17 	ldw	r2,-4(r20)
    9c30:	9009883a 	mov	r4,r18
    9c34:	1080004c 	andi	r2,r2,1
    9c38:	b0acb03a 	or	r22,r22,r2
    9c3c:	a5bfff15 	stw	r22,-4(r20)
    9c40:	0010ecc0 	call	10ecc <__malloc_unlock>
    9c44:	a005883a 	mov	r2,r20
    9c48:	003f5306 	br	9998 <__alt_mem_Flash_flash_data+0xf4009998>
    9c4c:	8809883a 	mov	r4,r17
    9c50:	a00b883a 	mov	r5,r20
    9c54:	000861c0 	call	861c <memmove>
    9c58:	003f8306 	br	9a68 <__alt_mem_Flash_flash_data+0xf4009a68>
    9c5c:	b0800404 	addi	r2,r22,16
    9c60:	b8bf6016 	blt	r23,r2,99e4 <__alt_mem_Flash_flash_data+0xf40099e4>
    9c64:	98800317 	ldw	r2,12(r19)
    9c68:	98c00217 	ldw	r3,8(r19)
    9c6c:	81bfff04 	addi	r6,r16,-4
    9c70:	01000904 	movi	r4,36
    9c74:	18800315 	stw	r2,12(r3)
    9c78:	10c00215 	stw	r3,8(r2)
    9c7c:	9c400204 	addi	r17,r19,8
    9c80:	21804336 	bltu	r4,r6,9d90 <_realloc_r+0x50c>
    9c84:	008004c4 	movi	r2,19
    9c88:	11803f2e 	bgeu	r2,r6,9d88 <_realloc_r+0x504>
    9c8c:	a0800017 	ldw	r2,0(r20)
    9c90:	98800215 	stw	r2,8(r19)
    9c94:	a0800117 	ldw	r2,4(r20)
    9c98:	98800315 	stw	r2,12(r19)
    9c9c:	008006c4 	movi	r2,27
    9ca0:	11803f36 	bltu	r2,r6,9da0 <_realloc_r+0x51c>
    9ca4:	98800404 	addi	r2,r19,16
    9ca8:	a5000204 	addi	r20,r20,8
    9cac:	a0c00017 	ldw	r3,0(r20)
    9cb0:	10c00015 	stw	r3,0(r2)
    9cb4:	a0c00117 	ldw	r3,4(r20)
    9cb8:	10c00115 	stw	r3,4(r2)
    9cbc:	a0c00217 	ldw	r3,8(r20)
    9cc0:	10c00215 	stw	r3,8(r2)
    9cc4:	9d87883a 	add	r3,r19,r22
    9cc8:	bd85c83a 	sub	r2,r23,r22
    9ccc:	e0c00215 	stw	r3,8(fp)
    9cd0:	10800054 	ori	r2,r2,1
    9cd4:	18800115 	stw	r2,4(r3)
    9cd8:	98800117 	ldw	r2,4(r19)
    9cdc:	9009883a 	mov	r4,r18
    9ce0:	1080004c 	andi	r2,r2,1
    9ce4:	b0acb03a 	or	r22,r22,r2
    9ce8:	9d800115 	stw	r22,4(r19)
    9cec:	0010ecc0 	call	10ecc <__malloc_unlock>
    9cf0:	8805883a 	mov	r2,r17
    9cf4:	003f2806 	br	9998 <__alt_mem_Flash_flash_data+0xf4009998>
    9cf8:	a0c00217 	ldw	r3,8(r20)
    9cfc:	88c00215 	stw	r3,8(r17)
    9d00:	a0c00317 	ldw	r3,12(r20)
    9d04:	88c00315 	stw	r3,12(r17)
    9d08:	30801126 	beq	r6,r2,9d50 <_realloc_r+0x4cc>
    9d0c:	88800404 	addi	r2,r17,16
    9d10:	a0c00404 	addi	r3,r20,16
    9d14:	003f4e06 	br	9a50 <__alt_mem_Flash_flash_data+0xf4009a50>
    9d18:	893fff17 	ldw	r4,-4(r17)
    9d1c:	00bfff04 	movi	r2,-4
    9d20:	a023883a 	mov	r17,r20
    9d24:	2084703a 	and	r2,r4,r2
    9d28:	80a1883a 	add	r16,r16,r2
    9d2c:	003f0d06 	br	9964 <__alt_mem_Flash_flash_data+0xf4009964>
    9d30:	a0800217 	ldw	r2,8(r20)
    9d34:	98800415 	stw	r2,16(r19)
    9d38:	a0800317 	ldw	r2,12(r20)
    9d3c:	98800515 	stw	r2,20(r19)
    9d40:	31000a26 	beq	r6,r4,9d6c <_realloc_r+0x4e8>
    9d44:	98c00604 	addi	r3,r19,24
    9d48:	a5000404 	addi	r20,r20,16
    9d4c:	003fa806 	br	9bf0 <__alt_mem_Flash_flash_data+0xf4009bf0>
    9d50:	a1000417 	ldw	r4,16(r20)
    9d54:	88800604 	addi	r2,r17,24
    9d58:	a0c00604 	addi	r3,r20,24
    9d5c:	89000415 	stw	r4,16(r17)
    9d60:	a1000517 	ldw	r4,20(r20)
    9d64:	89000515 	stw	r4,20(r17)
    9d68:	003f3906 	br	9a50 <__alt_mem_Flash_flash_data+0xf4009a50>
    9d6c:	a0800417 	ldw	r2,16(r20)
    9d70:	a5000604 	addi	r20,r20,24
    9d74:	98c00804 	addi	r3,r19,32
    9d78:	98800615 	stw	r2,24(r19)
    9d7c:	a0bfff17 	ldw	r2,-4(r20)
    9d80:	98800715 	stw	r2,28(r19)
    9d84:	003f9a06 	br	9bf0 <__alt_mem_Flash_flash_data+0xf4009bf0>
    9d88:	8805883a 	mov	r2,r17
    9d8c:	003fc706 	br	9cac <__alt_mem_Flash_flash_data+0xf4009cac>
    9d90:	8809883a 	mov	r4,r17
    9d94:	a00b883a 	mov	r5,r20
    9d98:	000861c0 	call	861c <memmove>
    9d9c:	003fc906 	br	9cc4 <__alt_mem_Flash_flash_data+0xf4009cc4>
    9da0:	a0800217 	ldw	r2,8(r20)
    9da4:	98800415 	stw	r2,16(r19)
    9da8:	a0800317 	ldw	r2,12(r20)
    9dac:	98800515 	stw	r2,20(r19)
    9db0:	31000726 	beq	r6,r4,9dd0 <_realloc_r+0x54c>
    9db4:	98800604 	addi	r2,r19,24
    9db8:	a5000404 	addi	r20,r20,16
    9dbc:	003fbb06 	br	9cac <__alt_mem_Flash_flash_data+0xf4009cac>
    9dc0:	9009883a 	mov	r4,r18
    9dc4:	0010ecc0 	call	10ecc <__malloc_unlock>
    9dc8:	0005883a 	mov	r2,zero
    9dcc:	003ef206 	br	9998 <__alt_mem_Flash_flash_data+0xf4009998>
    9dd0:	a0c00417 	ldw	r3,16(r20)
    9dd4:	a5000604 	addi	r20,r20,24
    9dd8:	98800804 	addi	r2,r19,32
    9ddc:	98c00615 	stw	r3,24(r19)
    9de0:	a0ffff17 	ldw	r3,-4(r20)
    9de4:	98c00715 	stw	r3,28(r19)
    9de8:	003fb006 	br	9cac <__alt_mem_Flash_flash_data+0xf4009cac>

00009dec <__fpclassifyd>:
    9dec:	00a00034 	movhi	r2,32768
    9df0:	10bfffc4 	addi	r2,r2,-1
    9df4:	2884703a 	and	r2,r5,r2
    9df8:	10000726 	beq	r2,zero,9e18 <__fpclassifyd+0x2c>
    9dfc:	00fffc34 	movhi	r3,65520
    9e00:	019ff834 	movhi	r6,32736
    9e04:	28c7883a 	add	r3,r5,r3
    9e08:	31bfffc4 	addi	r6,r6,-1
    9e0c:	30c00536 	bltu	r6,r3,9e24 <__fpclassifyd+0x38>
    9e10:	00800104 	movi	r2,4
    9e14:	f800283a 	ret
    9e18:	2000021e 	bne	r4,zero,9e24 <__fpclassifyd+0x38>
    9e1c:	00800084 	movi	r2,2
    9e20:	f800283a 	ret
    9e24:	00dffc34 	movhi	r3,32752
    9e28:	019ff834 	movhi	r6,32736
    9e2c:	28cb883a 	add	r5,r5,r3
    9e30:	31bfffc4 	addi	r6,r6,-1
    9e34:	317ff62e 	bgeu	r6,r5,9e10 <__alt_mem_Flash_flash_data+0xf4009e10>
    9e38:	01400434 	movhi	r5,16
    9e3c:	297fffc4 	addi	r5,r5,-1
    9e40:	28800236 	bltu	r5,r2,9e4c <__fpclassifyd+0x60>
    9e44:	008000c4 	movi	r2,3
    9e48:	f800283a 	ret
    9e4c:	10c00226 	beq	r2,r3,9e58 <__fpclassifyd+0x6c>
    9e50:	0005883a 	mov	r2,zero
    9e54:	f800283a 	ret
    9e58:	2005003a 	cmpeq	r2,r4,zero
    9e5c:	f800283a 	ret

00009e60 <_sbrk_r>:
    9e60:	defffd04 	addi	sp,sp,-12
    9e64:	dc000015 	stw	r16,0(sp)
    9e68:	040000b4 	movhi	r16,2
    9e6c:	dc400115 	stw	r17,4(sp)
    9e70:	84147804 	addi	r16,r16,20960
    9e74:	2023883a 	mov	r17,r4
    9e78:	2809883a 	mov	r4,r5
    9e7c:	dfc00215 	stw	ra,8(sp)
    9e80:	80000015 	stw	zero,0(r16)
    9e84:	0010a980 	call	10a98 <sbrk>
    9e88:	00ffffc4 	movi	r3,-1
    9e8c:	10c00526 	beq	r2,r3,9ea4 <_sbrk_r+0x44>
    9e90:	dfc00217 	ldw	ra,8(sp)
    9e94:	dc400117 	ldw	r17,4(sp)
    9e98:	dc000017 	ldw	r16,0(sp)
    9e9c:	dec00304 	addi	sp,sp,12
    9ea0:	f800283a 	ret
    9ea4:	80c00017 	ldw	r3,0(r16)
    9ea8:	183ff926 	beq	r3,zero,9e90 <__alt_mem_Flash_flash_data+0xf4009e90>
    9eac:	88c00015 	stw	r3,0(r17)
    9eb0:	003ff706 	br	9e90 <__alt_mem_Flash_flash_data+0xf4009e90>

00009eb4 <__sread>:
    9eb4:	defffe04 	addi	sp,sp,-8
    9eb8:	dc000015 	stw	r16,0(sp)
    9ebc:	2821883a 	mov	r16,r5
    9ec0:	2940038f 	ldh	r5,14(r5)
    9ec4:	dfc00115 	stw	ra,4(sp)
    9ec8:	000ce100 	call	ce10 <_read_r>
    9ecc:	10000716 	blt	r2,zero,9eec <__sread+0x38>
    9ed0:	80c01417 	ldw	r3,80(r16)
    9ed4:	1887883a 	add	r3,r3,r2
    9ed8:	80c01415 	stw	r3,80(r16)
    9edc:	dfc00117 	ldw	ra,4(sp)
    9ee0:	dc000017 	ldw	r16,0(sp)
    9ee4:	dec00204 	addi	sp,sp,8
    9ee8:	f800283a 	ret
    9eec:	80c0030b 	ldhu	r3,12(r16)
    9ef0:	18fbffcc 	andi	r3,r3,61439
    9ef4:	80c0030d 	sth	r3,12(r16)
    9ef8:	dfc00117 	ldw	ra,4(sp)
    9efc:	dc000017 	ldw	r16,0(sp)
    9f00:	dec00204 	addi	sp,sp,8
    9f04:	f800283a 	ret

00009f08 <__seofread>:
    9f08:	0005883a 	mov	r2,zero
    9f0c:	f800283a 	ret

00009f10 <__swrite>:
    9f10:	2880030b 	ldhu	r2,12(r5)
    9f14:	defffb04 	addi	sp,sp,-20
    9f18:	dcc00315 	stw	r19,12(sp)
    9f1c:	dc800215 	stw	r18,8(sp)
    9f20:	dc400115 	stw	r17,4(sp)
    9f24:	dc000015 	stw	r16,0(sp)
    9f28:	dfc00415 	stw	ra,16(sp)
    9f2c:	10c0400c 	andi	r3,r2,256
    9f30:	2821883a 	mov	r16,r5
    9f34:	2027883a 	mov	r19,r4
    9f38:	3025883a 	mov	r18,r6
    9f3c:	3823883a 	mov	r17,r7
    9f40:	18000526 	beq	r3,zero,9f58 <__swrite+0x48>
    9f44:	2940038f 	ldh	r5,14(r5)
    9f48:	000d883a 	mov	r6,zero
    9f4c:	01c00084 	movi	r7,2
    9f50:	000cdb40 	call	cdb4 <_lseek_r>
    9f54:	8080030b 	ldhu	r2,12(r16)
    9f58:	8140038f 	ldh	r5,14(r16)
    9f5c:	10bbffcc 	andi	r2,r2,61439
    9f60:	9809883a 	mov	r4,r19
    9f64:	900d883a 	mov	r6,r18
    9f68:	880f883a 	mov	r7,r17
    9f6c:	8080030d 	sth	r2,12(r16)
    9f70:	dfc00417 	ldw	ra,16(sp)
    9f74:	dcc00317 	ldw	r19,12(sp)
    9f78:	dc800217 	ldw	r18,8(sp)
    9f7c:	dc400117 	ldw	r17,4(sp)
    9f80:	dc000017 	ldw	r16,0(sp)
    9f84:	dec00504 	addi	sp,sp,20
    9f88:	000c8b01 	jmpi	c8b0 <_write_r>

00009f8c <__sseek>:
    9f8c:	defffe04 	addi	sp,sp,-8
    9f90:	dc000015 	stw	r16,0(sp)
    9f94:	2821883a 	mov	r16,r5
    9f98:	2940038f 	ldh	r5,14(r5)
    9f9c:	dfc00115 	stw	ra,4(sp)
    9fa0:	000cdb40 	call	cdb4 <_lseek_r>
    9fa4:	00ffffc4 	movi	r3,-1
    9fa8:	10c00826 	beq	r2,r3,9fcc <__sseek+0x40>
    9fac:	80c0030b 	ldhu	r3,12(r16)
    9fb0:	80801415 	stw	r2,80(r16)
    9fb4:	18c40014 	ori	r3,r3,4096
    9fb8:	80c0030d 	sth	r3,12(r16)
    9fbc:	dfc00117 	ldw	ra,4(sp)
    9fc0:	dc000017 	ldw	r16,0(sp)
    9fc4:	dec00204 	addi	sp,sp,8
    9fc8:	f800283a 	ret
    9fcc:	80c0030b 	ldhu	r3,12(r16)
    9fd0:	18fbffcc 	andi	r3,r3,61439
    9fd4:	80c0030d 	sth	r3,12(r16)
    9fd8:	dfc00117 	ldw	ra,4(sp)
    9fdc:	dc000017 	ldw	r16,0(sp)
    9fe0:	dec00204 	addi	sp,sp,8
    9fe4:	f800283a 	ret

00009fe8 <__sclose>:
    9fe8:	2940038f 	ldh	r5,14(r5)
    9fec:	000c90c1 	jmpi	c90c <_close_r>

00009ff0 <strcmp>:
    9ff0:	2144b03a 	or	r2,r4,r5
    9ff4:	108000cc 	andi	r2,r2,3
    9ff8:	1000171e 	bne	r2,zero,a058 <strcmp+0x68>
    9ffc:	20800017 	ldw	r2,0(r4)
    a000:	28c00017 	ldw	r3,0(r5)
    a004:	10c0141e 	bne	r2,r3,a058 <strcmp+0x68>
    a008:	027fbff4 	movhi	r9,65279
    a00c:	4a7fbfc4 	addi	r9,r9,-257
    a010:	0086303a 	nor	r3,zero,r2
    a014:	02202074 	movhi	r8,32897
    a018:	1245883a 	add	r2,r2,r9
    a01c:	42202004 	addi	r8,r8,-32640
    a020:	10c4703a 	and	r2,r2,r3
    a024:	1204703a 	and	r2,r2,r8
    a028:	10000226 	beq	r2,zero,a034 <strcmp+0x44>
    a02c:	00001706 	br	a08c <strcmp+0x9c>
    a030:	1000161e 	bne	r2,zero,a08c <strcmp+0x9c>
    a034:	21000104 	addi	r4,r4,4
    a038:	20c00017 	ldw	r3,0(r4)
    a03c:	29400104 	addi	r5,r5,4
    a040:	29800017 	ldw	r6,0(r5)
    a044:	1a4f883a 	add	r7,r3,r9
    a048:	00c4303a 	nor	r2,zero,r3
    a04c:	3884703a 	and	r2,r7,r2
    a050:	1204703a 	and	r2,r2,r8
    a054:	19bff626 	beq	r3,r6,a030 <__alt_mem_Flash_flash_data+0xf400a030>
    a058:	20800007 	ldb	r2,0(r4)
    a05c:	1000051e 	bne	r2,zero,a074 <strcmp+0x84>
    a060:	00000606 	br	a07c <strcmp+0x8c>
    a064:	21000044 	addi	r4,r4,1
    a068:	20800007 	ldb	r2,0(r4)
    a06c:	29400044 	addi	r5,r5,1
    a070:	10000226 	beq	r2,zero,a07c <strcmp+0x8c>
    a074:	28c00007 	ldb	r3,0(r5)
    a078:	10fffa26 	beq	r2,r3,a064 <__alt_mem_Flash_flash_data+0xf400a064>
    a07c:	20800003 	ldbu	r2,0(r4)
    a080:	28c00003 	ldbu	r3,0(r5)
    a084:	10c5c83a 	sub	r2,r2,r3
    a088:	f800283a 	ret
    a08c:	0005883a 	mov	r2,zero
    a090:	f800283a 	ret

0000a094 <__ssprint_r>:
    a094:	30800217 	ldw	r2,8(r6)
    a098:	defff604 	addi	sp,sp,-40
    a09c:	ddc00715 	stw	r23,28(sp)
    a0a0:	dc800215 	stw	r18,8(sp)
    a0a4:	dfc00915 	stw	ra,36(sp)
    a0a8:	df000815 	stw	fp,32(sp)
    a0ac:	dd800615 	stw	r22,24(sp)
    a0b0:	dd400515 	stw	r21,20(sp)
    a0b4:	dd000415 	stw	r20,16(sp)
    a0b8:	dcc00315 	stw	r19,12(sp)
    a0bc:	dc400115 	stw	r17,4(sp)
    a0c0:	dc000015 	stw	r16,0(sp)
    a0c4:	3025883a 	mov	r18,r6
    a0c8:	35c00017 	ldw	r23,0(r6)
    a0cc:	10005626 	beq	r2,zero,a228 <__ssprint_r+0x194>
    a0d0:	2027883a 	mov	r19,r4
    a0d4:	28800217 	ldw	r2,8(r5)
    a0d8:	29000017 	ldw	r4,0(r5)
    a0dc:	2823883a 	mov	r17,r5
    a0e0:	0039883a 	mov	fp,zero
    a0e4:	0021883a 	mov	r16,zero
    a0e8:	80003926 	beq	r16,zero,a1d0 <__ssprint_r+0x13c>
    a0ec:	102b883a 	mov	r21,r2
    a0f0:	102d883a 	mov	r22,r2
    a0f4:	80803a36 	bltu	r16,r2,a1e0 <__ssprint_r+0x14c>
    a0f8:	88c0030b 	ldhu	r3,12(r17)
    a0fc:	1881200c 	andi	r2,r3,1152
    a100:	10002626 	beq	r2,zero,a19c <__ssprint_r+0x108>
    a104:	88800517 	ldw	r2,20(r17)
    a108:	89400417 	ldw	r5,16(r17)
    a10c:	81c00044 	addi	r7,r16,1
    a110:	108d883a 	add	r6,r2,r2
    a114:	3085883a 	add	r2,r6,r2
    a118:	100cd7fa 	srli	r6,r2,31
    a11c:	216dc83a 	sub	r22,r4,r5
    a120:	3d89883a 	add	r4,r7,r22
    a124:	3085883a 	add	r2,r6,r2
    a128:	102bd07a 	srai	r21,r2,1
    a12c:	a80d883a 	mov	r6,r21
    a130:	a900022e 	bgeu	r21,r4,a13c <__ssprint_r+0xa8>
    a134:	202b883a 	mov	r21,r4
    a138:	200d883a 	mov	r6,r4
    a13c:	18c1000c 	andi	r3,r3,1024
    a140:	9809883a 	mov	r4,r19
    a144:	18002926 	beq	r3,zero,a1ec <__ssprint_r+0x158>
    a148:	300b883a 	mov	r5,r6
    a14c:	0007c540 	call	7c54 <_malloc_r>
    a150:	1029883a 	mov	r20,r2
    a154:	10002b26 	beq	r2,zero,a204 <__ssprint_r+0x170>
    a158:	89400417 	ldw	r5,16(r17)
    a15c:	1009883a 	mov	r4,r2
    a160:	b00d883a 	mov	r6,r22
    a164:	00084e40 	call	84e4 <memcpy>
    a168:	8880030b 	ldhu	r2,12(r17)
    a16c:	00fedfc4 	movi	r3,-1153
    a170:	10c4703a 	and	r2,r2,r3
    a174:	10802014 	ori	r2,r2,128
    a178:	8880030d 	sth	r2,12(r17)
    a17c:	a589883a 	add	r4,r20,r22
    a180:	adadc83a 	sub	r22,r21,r22
    a184:	8d400515 	stw	r21,20(r17)
    a188:	8d800215 	stw	r22,8(r17)
    a18c:	8d000415 	stw	r20,16(r17)
    a190:	89000015 	stw	r4,0(r17)
    a194:	802b883a 	mov	r21,r16
    a198:	802d883a 	mov	r22,r16
    a19c:	e00b883a 	mov	r5,fp
    a1a0:	b00d883a 	mov	r6,r22
    a1a4:	000861c0 	call	861c <memmove>
    a1a8:	88800217 	ldw	r2,8(r17)
    a1ac:	89000017 	ldw	r4,0(r17)
    a1b0:	90c00217 	ldw	r3,8(r18)
    a1b4:	1545c83a 	sub	r2,r2,r21
    a1b8:	2589883a 	add	r4,r4,r22
    a1bc:	88800215 	stw	r2,8(r17)
    a1c0:	89000015 	stw	r4,0(r17)
    a1c4:	1c21c83a 	sub	r16,r3,r16
    a1c8:	94000215 	stw	r16,8(r18)
    a1cc:	80001626 	beq	r16,zero,a228 <__ssprint_r+0x194>
    a1d0:	bf000017 	ldw	fp,0(r23)
    a1d4:	bc000117 	ldw	r16,4(r23)
    a1d8:	bdc00204 	addi	r23,r23,8
    a1dc:	003fc206 	br	a0e8 <__alt_mem_Flash_flash_data+0xf400a0e8>
    a1e0:	802b883a 	mov	r21,r16
    a1e4:	802d883a 	mov	r22,r16
    a1e8:	003fec06 	br	a19c <__alt_mem_Flash_flash_data+0xf400a19c>
    a1ec:	00098840 	call	9884 <_realloc_r>
    a1f0:	1029883a 	mov	r20,r2
    a1f4:	103fe11e 	bne	r2,zero,a17c <__alt_mem_Flash_flash_data+0xf400a17c>
    a1f8:	89400417 	ldw	r5,16(r17)
    a1fc:	9809883a 	mov	r4,r19
    a200:	00070840 	call	7084 <_free_r>
    a204:	88c0030b 	ldhu	r3,12(r17)
    a208:	00800304 	movi	r2,12
    a20c:	98800015 	stw	r2,0(r19)
    a210:	18c01014 	ori	r3,r3,64
    a214:	88c0030d 	sth	r3,12(r17)
    a218:	00bfffc4 	movi	r2,-1
    a21c:	90000215 	stw	zero,8(r18)
    a220:	90000115 	stw	zero,4(r18)
    a224:	00000206 	br	a230 <__ssprint_r+0x19c>
    a228:	90000115 	stw	zero,4(r18)
    a22c:	0005883a 	mov	r2,zero
    a230:	dfc00917 	ldw	ra,36(sp)
    a234:	df000817 	ldw	fp,32(sp)
    a238:	ddc00717 	ldw	r23,28(sp)
    a23c:	dd800617 	ldw	r22,24(sp)
    a240:	dd400517 	ldw	r21,20(sp)
    a244:	dd000417 	ldw	r20,16(sp)
    a248:	dcc00317 	ldw	r19,12(sp)
    a24c:	dc800217 	ldw	r18,8(sp)
    a250:	dc400117 	ldw	r17,4(sp)
    a254:	dc000017 	ldw	r16,0(sp)
    a258:	dec00a04 	addi	sp,sp,40
    a25c:	f800283a 	ret

0000a260 <___svfiprintf_internal_r>:
    a260:	2880030b 	ldhu	r2,12(r5)
    a264:	deffc904 	addi	sp,sp,-220
    a268:	dd403215 	stw	r21,200(sp)
    a26c:	dfc03615 	stw	ra,216(sp)
    a270:	df003515 	stw	fp,212(sp)
    a274:	ddc03415 	stw	r23,208(sp)
    a278:	dd803315 	stw	r22,204(sp)
    a27c:	dd003115 	stw	r20,196(sp)
    a280:	dcc03015 	stw	r19,192(sp)
    a284:	dc802f15 	stw	r18,188(sp)
    a288:	dc402e15 	stw	r17,184(sp)
    a28c:	dc002d15 	stw	r16,180(sp)
    a290:	d9402715 	stw	r5,156(sp)
    a294:	d9002915 	stw	r4,164(sp)
    a298:	1080200c 	andi	r2,r2,128
    a29c:	d9c02315 	stw	r7,140(sp)
    a2a0:	302b883a 	mov	r21,r6
    a2a4:	10000226 	beq	r2,zero,a2b0 <___svfiprintf_internal_r+0x50>
    a2a8:	28800417 	ldw	r2,16(r5)
    a2ac:	1003ce26 	beq	r2,zero,b1e8 <___svfiprintf_internal_r+0xf88>
    a2b0:	dac01a04 	addi	r11,sp,104
    a2b4:	da8019c4 	addi	r10,sp,103
    a2b8:	dc802917 	ldw	r18,164(sp)
    a2bc:	dd002717 	ldw	r20,156(sp)
    a2c0:	04c000b4 	movhi	r19,2
    a2c4:	dac01e15 	stw	r11,120(sp)
    a2c8:	5a97c83a 	sub	r11,r11,r10
    a2cc:	9cc3eb04 	addi	r19,r19,4012
    a2d0:	da801f15 	stw	r10,124(sp)
    a2d4:	dec01a15 	stw	sp,104(sp)
    a2d8:	d8001c15 	stw	zero,112(sp)
    a2dc:	d8001b15 	stw	zero,108(sp)
    a2e0:	d811883a 	mov	r8,sp
    a2e4:	d8002a15 	stw	zero,168(sp)
    a2e8:	d8002415 	stw	zero,144(sp)
    a2ec:	dac02b15 	stw	r11,172(sp)
    a2f0:	a8800007 	ldb	r2,0(r21)
    a2f4:	10026a26 	beq	r2,zero,aca0 <___svfiprintf_internal_r+0xa40>
    a2f8:	01000944 	movi	r4,37
    a2fc:	11026826 	beq	r2,r4,aca0 <___svfiprintf_internal_r+0xa40>
    a300:	a805883a 	mov	r2,r21
    a304:	00000106 	br	a30c <___svfiprintf_internal_r+0xac>
    a308:	19000326 	beq	r3,r4,a318 <___svfiprintf_internal_r+0xb8>
    a30c:	10800044 	addi	r2,r2,1
    a310:	10c00007 	ldb	r3,0(r2)
    a314:	183ffc1e 	bne	r3,zero,a308 <__alt_mem_Flash_flash_data+0xf400a308>
    a318:	1561c83a 	sub	r16,r2,r21
    a31c:	102d883a 	mov	r22,r2
    a320:	80000e26 	beq	r16,zero,a35c <___svfiprintf_internal_r+0xfc>
    a324:	d8c01c17 	ldw	r3,112(sp)
    a328:	d8801b17 	ldw	r2,108(sp)
    a32c:	45400015 	stw	r21,0(r8)
    a330:	1c07883a 	add	r3,r3,r16
    a334:	10800044 	addi	r2,r2,1
    a338:	d8c01c15 	stw	r3,112(sp)
    a33c:	44000115 	stw	r16,4(r8)
    a340:	d8801b15 	stw	r2,108(sp)
    a344:	00c001c4 	movi	r3,7
    a348:	1882d816 	blt	r3,r2,aeac <___svfiprintf_internal_r+0xc4c>
    a34c:	42000204 	addi	r8,r8,8
    a350:	da802417 	ldw	r10,144(sp)
    a354:	5415883a 	add	r10,r10,r16
    a358:	da802415 	stw	r10,144(sp)
    a35c:	b0800007 	ldb	r2,0(r22)
    a360:	10027526 	beq	r2,zero,ad38 <___svfiprintf_internal_r+0xad8>
    a364:	b1000047 	ldb	r4,1(r22)
    a368:	b5400044 	addi	r21,r22,1
    a36c:	d8001d85 	stb	zero,118(sp)
    a370:	000d883a 	mov	r6,zero
    a374:	043fffc4 	movi	r16,-1
    a378:	d8002115 	stw	zero,132(sp)
    a37c:	0023883a 	mov	r17,zero
    a380:	00c01604 	movi	r3,88
    a384:	01400244 	movi	r5,9
    a388:	02400a84 	movi	r9,42
    a38c:	01c01b04 	movi	r7,108
    a390:	ad400044 	addi	r21,r21,1
    a394:	20bff804 	addi	r2,r4,-32
    a398:	18819736 	bltu	r3,r2,a9f8 <___svfiprintf_internal_r+0x798>
    a39c:	100490ba 	slli	r2,r2,2
    a3a0:	02c00074 	movhi	r11,1
    a3a4:	5ae8ed04 	addi	r11,r11,-23628
    a3a8:	12c5883a 	add	r2,r2,r11
    a3ac:	10800017 	ldw	r2,0(r2)
    a3b0:	1000683a 	jmp	r2
    a3b4:	0000a8f0 	cmpltui	zero,zero,675
    a3b8:	0000a9f8 	rdprs	zero,zero,679
    a3bc:	0000a9f8 	rdprs	zero,zero,679
    a3c0:	0000a8e4 	muli	zero,zero,675
    a3c4:	0000a9f8 	rdprs	zero,zero,679
    a3c8:	0000a9f8 	rdprs	zero,zero,679
    a3cc:	0000a9f8 	rdprs	zero,zero,679
    a3d0:	0000a9f8 	rdprs	zero,zero,679
    a3d4:	0000a9f8 	rdprs	zero,zero,679
    a3d8:	0000a9f8 	rdprs	zero,zero,679
    a3dc:	0000a610 	cmplti	zero,zero,664
    a3e0:	0000aa2c 	andhi	zero,zero,680
    a3e4:	0000a9f8 	rdprs	zero,zero,679
    a3e8:	0000a638 	rdprs	zero,zero,664
    a3ec:	0000aa38 	rdprs	zero,zero,680
    a3f0:	0000a9f8 	rdprs	zero,zero,679
    a3f4:	0000aa20 	cmpeqi	zero,zero,680
    a3f8:	0000a9c0 	call	a9c <memset+0x88>
    a3fc:	0000a9c0 	call	a9c <memset+0x88>
    a400:	0000a9c0 	call	a9c <memset+0x88>
    a404:	0000a9c0 	call	a9c <memset+0x88>
    a408:	0000a9c0 	call	a9c <memset+0x88>
    a40c:	0000a9c0 	call	a9c <memset+0x88>
    a410:	0000a9c0 	call	a9c <memset+0x88>
    a414:	0000a9c0 	call	a9c <memset+0x88>
    a418:	0000a9c0 	call	a9c <memset+0x88>
    a41c:	0000a9f8 	rdprs	zero,zero,679
    a420:	0000a9f8 	rdprs	zero,zero,679
    a424:	0000a9f8 	rdprs	zero,zero,679
    a428:	0000a9f8 	rdprs	zero,zero,679
    a42c:	0000a9f8 	rdprs	zero,zero,679
    a430:	0000a9f8 	rdprs	zero,zero,679
    a434:	0000a9f8 	rdprs	zero,zero,679
    a438:	0000a9f8 	rdprs	zero,zero,679
    a43c:	0000a9f8 	rdprs	zero,zero,679
    a440:	0000a9f8 	rdprs	zero,zero,679
    a444:	0000a958 	cmpnei	zero,zero,677
    a448:	0000a9f8 	rdprs	zero,zero,679
    a44c:	0000a9f8 	rdprs	zero,zero,679
    a450:	0000a9f8 	rdprs	zero,zero,679
    a454:	0000a9f8 	rdprs	zero,zero,679
    a458:	0000a9f8 	rdprs	zero,zero,679
    a45c:	0000a9f8 	rdprs	zero,zero,679
    a460:	0000a9f8 	rdprs	zero,zero,679
    a464:	0000a9f8 	rdprs	zero,zero,679
    a468:	0000a9f8 	rdprs	zero,zero,679
    a46c:	0000a9f8 	rdprs	zero,zero,679
    a470:	0000a5e4 	muli	zero,zero,663
    a474:	0000a9f8 	rdprs	zero,zero,679
    a478:	0000a9f8 	rdprs	zero,zero,679
    a47c:	0000a9f8 	rdprs	zero,zero,679
    a480:	0000a9f8 	rdprs	zero,zero,679
    a484:	0000a9f8 	rdprs	zero,zero,679
    a488:	0000a518 	cmpnei	zero,zero,660
    a48c:	0000a9f8 	rdprs	zero,zero,679
    a490:	0000a9f8 	rdprs	zero,zero,679
    a494:	0000a844 	movi	zero,673
    a498:	0000a9f8 	rdprs	zero,zero,679
    a49c:	0000a9f8 	rdprs	zero,zero,679
    a4a0:	0000a9f8 	rdprs	zero,zero,679
    a4a4:	0000a9f8 	rdprs	zero,zero,679
    a4a8:	0000a9f8 	rdprs	zero,zero,679
    a4ac:	0000a9f8 	rdprs	zero,zero,679
    a4b0:	0000a9f8 	rdprs	zero,zero,679
    a4b4:	0000a9f8 	rdprs	zero,zero,679
    a4b8:	0000a9f8 	rdprs	zero,zero,679
    a4bc:	0000a9f8 	rdprs	zero,zero,679
    a4c0:	0000a730 	cmpltui	zero,zero,668
    a4c4:	0000a6f0 	cmpltui	zero,zero,667
    a4c8:	0000a9f8 	rdprs	zero,zero,679
    a4cc:	0000a9f8 	rdprs	zero,zero,679
    a4d0:	0000a9f8 	rdprs	zero,zero,679
    a4d4:	0000a8a0 	cmpeqi	zero,zero,674
    a4d8:	0000a6f0 	cmpltui	zero,zero,667
    a4dc:	0000a9f8 	rdprs	zero,zero,679
    a4e0:	0000a9f8 	rdprs	zero,zero,679
    a4e4:	0000a88c 	andi	zero,zero,674
    a4e8:	0000a9f8 	rdprs	zero,zero,679
    a4ec:	0000a8ac 	andhi	zero,zero,674
    a4f0:	0000a5e8 	cmpgeui	zero,zero,663
    a4f4:	0000a6ac 	andhi	zero,zero,666
    a4f8:	0000a6a0 	cmpeqi	zero,zero,666
    a4fc:	0000a9f8 	rdprs	zero,zero,679
    a500:	0000a644 	movi	zero,665
    a504:	0000a9f8 	rdprs	zero,zero,679
    a508:	0000a51c 	xori	zero,zero,660
    a50c:	0000a9f8 	rdprs	zero,zero,679
    a510:	0000a9f8 	rdprs	zero,zero,679
    a514:	0000a90c 	andi	zero,zero,676
    a518:	8c400414 	ori	r17,r17,16
    a51c:	8880080c 	andi	r2,r17,32
    a520:	10029626 	beq	r2,zero,af7c <___svfiprintf_internal_r+0xd1c>
    a524:	da802317 	ldw	r10,140(sp)
    a528:	dac02317 	ldw	r11,140(sp)
    a52c:	00800044 	movi	r2,1
    a530:	52400017 	ldw	r9,0(r10)
    a534:	52800117 	ldw	r10,4(r10)
    a538:	5ac00204 	addi	r11,r11,8
    a53c:	dac02315 	stw	r11,140(sp)
    a540:	4a86b03a 	or	r3,r9,r10
    a544:	d8001d85 	stb	zero,118(sp)
    a548:	8039883a 	mov	fp,r16
    a54c:	0017883a 	mov	r11,zero
    a550:	80000216 	blt	r16,zero,a55c <___svfiprintf_internal_r+0x2fc>
    a554:	013fdfc4 	movi	r4,-129
    a558:	8922703a 	and	r17,r17,r4
    a55c:	1801d21e 	bne	r3,zero,aca8 <___svfiprintf_internal_r+0xa48>
    a560:	80024626 	beq	r16,zero,ae7c <___svfiprintf_internal_r+0xc1c>
    a564:	10803fcc 	andi	r2,r2,255
    a568:	00c00044 	movi	r3,1
    a56c:	10c2b426 	beq	r2,r3,b040 <___svfiprintf_internal_r+0xde0>
    a570:	00c00084 	movi	r3,2
    a574:	10c25d26 	beq	r2,r3,aeec <___svfiprintf_internal_r+0xc8c>
    a578:	d8c01a04 	addi	r3,sp,104
    a57c:	4808d0fa 	srli	r4,r9,3
    a580:	500a977a 	slli	r5,r10,29
    a584:	5014d0fa 	srli	r10,r10,3
    a588:	4a4001cc 	andi	r9,r9,7
    a58c:	48800c04 	addi	r2,r9,48
    a590:	18ffffc4 	addi	r3,r3,-1
    a594:	2912b03a 	or	r9,r5,r4
    a598:	18800005 	stb	r2,0(r3)
    a59c:	4a88b03a 	or	r4,r9,r10
    a5a0:	203ff61e 	bne	r4,zero,a57c <__alt_mem_Flash_flash_data+0xf400a57c>
    a5a4:	8900004c 	andi	r4,r17,1
    a5a8:	d8c02615 	stw	r3,152(sp)
    a5ac:	2002961e 	bne	r4,zero,b008 <___svfiprintf_internal_r+0xda8>
    a5b0:	da801e17 	ldw	r10,120(sp)
    a5b4:	50f9c83a 	sub	fp,r10,r3
    a5b8:	df002015 	stw	fp,128(sp)
    a5bc:	e400010e 	bge	fp,r16,a5c4 <___svfiprintf_internal_r+0x364>
    a5c0:	dc002015 	stw	r16,128(sp)
    a5c4:	5ac03fcc 	andi	r11,r11,255
    a5c8:	5ac0201c 	xori	r11,r11,128
    a5cc:	5affe004 	addi	r11,r11,-128
    a5d0:	58006326 	beq	r11,zero,a760 <___svfiprintf_internal_r+0x500>
    a5d4:	d8c02017 	ldw	r3,128(sp)
    a5d8:	18c00044 	addi	r3,r3,1
    a5dc:	d8c02015 	stw	r3,128(sp)
    a5e0:	00005f06 	br	a760 <___svfiprintf_internal_r+0x500>
    a5e4:	8c400414 	ori	r17,r17,16
    a5e8:	8880080c 	andi	r2,r17,32
    a5ec:	10027926 	beq	r2,zero,afd4 <___svfiprintf_internal_r+0xd74>
    a5f0:	dac02317 	ldw	r11,140(sp)
    a5f4:	0005883a 	mov	r2,zero
    a5f8:	5a400017 	ldw	r9,0(r11)
    a5fc:	5a800117 	ldw	r10,4(r11)
    a600:	5ac00204 	addi	r11,r11,8
    a604:	dac02315 	stw	r11,140(sp)
    a608:	4a86b03a 	or	r3,r9,r10
    a60c:	003fcd06 	br	a544 <__alt_mem_Flash_flash_data+0xf400a544>
    a610:	da802317 	ldw	r10,140(sp)
    a614:	dac02317 	ldw	r11,140(sp)
    a618:	52800017 	ldw	r10,0(r10)
    a61c:	58800104 	addi	r2,r11,4
    a620:	da802115 	stw	r10,132(sp)
    a624:	50028c0e 	bge	r10,zero,b058 <___svfiprintf_internal_r+0xdf8>
    a628:	da802117 	ldw	r10,132(sp)
    a62c:	d8802315 	stw	r2,140(sp)
    a630:	0295c83a 	sub	r10,zero,r10
    a634:	da802115 	stw	r10,132(sp)
    a638:	8c400114 	ori	r17,r17,4
    a63c:	a9000007 	ldb	r4,0(r21)
    a640:	003f5306 	br	a390 <__alt_mem_Flash_flash_data+0xf400a390>
    a644:	da802317 	ldw	r10,140(sp)
    a648:	dac02317 	ldw	r11,140(sp)
    a64c:	d8001d85 	stb	zero,118(sp)
    a650:	52800017 	ldw	r10,0(r10)
    a654:	5dc00104 	addi	r23,r11,4
    a658:	da802615 	stw	r10,152(sp)
    a65c:	5002d626 	beq	r10,zero,b1b8 <___svfiprintf_internal_r+0xf58>
    a660:	d9002617 	ldw	r4,152(sp)
    a664:	8002cc16 	blt	r16,zero,b198 <___svfiprintf_internal_r+0xf38>
    a668:	000b883a 	mov	r5,zero
    a66c:	800d883a 	mov	r6,r16
    a670:	da002c15 	stw	r8,176(sp)
    a674:	00083fc0 	call	83fc <memchr>
    a678:	da002c17 	ldw	r8,176(sp)
    a67c:	1002f026 	beq	r2,zero,b240 <___svfiprintf_internal_r+0xfe0>
    a680:	d8c02617 	ldw	r3,152(sp)
    a684:	10f9c83a 	sub	fp,r2,r3
    a688:	8700010e 	bge	r16,fp,a690 <___svfiprintf_internal_r+0x430>
    a68c:	8039883a 	mov	fp,r16
    a690:	dac01d83 	ldbu	r11,118(sp)
    a694:	ddc02315 	stw	r23,140(sp)
    a698:	0021883a 	mov	r16,zero
    a69c:	003fc606 	br	a5b8 <__alt_mem_Flash_flash_data+0xf400a5b8>
    a6a0:	8c400814 	ori	r17,r17,32
    a6a4:	a9000007 	ldb	r4,0(r21)
    a6a8:	003f3906 	br	a390 <__alt_mem_Flash_flash_data+0xf400a390>
    a6ac:	da802317 	ldw	r10,140(sp)
    a6b0:	00800c04 	movi	r2,48
    a6b4:	dac02317 	ldw	r11,140(sp)
    a6b8:	52400017 	ldw	r9,0(r10)
    a6bc:	d8801d05 	stb	r2,116(sp)
    a6c0:	00801e04 	movi	r2,120
    a6c4:	d8801d45 	stb	r2,117(sp)
    a6c8:	008000b4 	movhi	r2,2
    a6cc:	10838204 	addi	r2,r2,3592
    a6d0:	5ac00104 	addi	r11,r11,4
    a6d4:	d8802a15 	stw	r2,168(sp)
    a6d8:	0015883a 	mov	r10,zero
    a6dc:	8c400094 	ori	r17,r17,2
    a6e0:	dac02315 	stw	r11,140(sp)
    a6e4:	00800084 	movi	r2,2
    a6e8:	4807883a 	mov	r3,r9
    a6ec:	003f9506 	br	a544 <__alt_mem_Flash_flash_data+0xf400a544>
    a6f0:	d9801d85 	stb	r6,118(sp)
    a6f4:	8880080c 	andi	r2,r17,32
    a6f8:	d8c02317 	ldw	r3,140(sp)
    a6fc:	10009b26 	beq	r2,zero,a96c <___svfiprintf_internal_r+0x70c>
    a700:	dac02317 	ldw	r11,140(sp)
    a704:	18800117 	ldw	r2,4(r3)
    a708:	1a400017 	ldw	r9,0(r3)
    a70c:	5ac00204 	addi	r11,r11,8
    a710:	dac02315 	stw	r11,140(sp)
    a714:	1015883a 	mov	r10,r2
    a718:	10009f16 	blt	r2,zero,a998 <___svfiprintf_internal_r+0x738>
    a71c:	dac01d83 	ldbu	r11,118(sp)
    a720:	8039883a 	mov	fp,r16
    a724:	00800044 	movi	r2,1
    a728:	4a86b03a 	or	r3,r9,r10
    a72c:	003f8806 	br	a550 <__alt_mem_Flash_flash_data+0xf400a550>
    a730:	dac02317 	ldw	r11,140(sp)
    a734:	00c00044 	movi	r3,1
    a738:	da801004 	addi	r10,sp,64
    a73c:	58800017 	ldw	r2,0(r11)
    a740:	5ac00104 	addi	r11,r11,4
    a744:	d8c02015 	stw	r3,128(sp)
    a748:	d8001d85 	stb	zero,118(sp)
    a74c:	d8801005 	stb	r2,64(sp)
    a750:	dac02315 	stw	r11,140(sp)
    a754:	1839883a 	mov	fp,r3
    a758:	da802615 	stw	r10,152(sp)
    a75c:	0021883a 	mov	r16,zero
    a760:	8a80008c 	andi	r10,r17,2
    a764:	da802215 	stw	r10,136(sp)
    a768:	50000326 	beq	r10,zero,a778 <___svfiprintf_internal_r+0x518>
    a76c:	dac02017 	ldw	r11,128(sp)
    a770:	5ac00084 	addi	r11,r11,2
    a774:	dac02015 	stw	r11,128(sp)
    a778:	88c0210c 	andi	r3,r17,132
    a77c:	d8c02515 	stw	r3,148(sp)
    a780:	1800bd1e 	bne	r3,zero,aa78 <___svfiprintf_internal_r+0x818>
    a784:	da802117 	ldw	r10,132(sp)
    a788:	dac02017 	ldw	r11,128(sp)
    a78c:	52edc83a 	sub	r22,r10,r11
    a790:	0580b90e 	bge	zero,r22,aa78 <___svfiprintf_internal_r+0x818>
    a794:	02400404 	movi	r9,16
    a798:	d8c01c17 	ldw	r3,112(sp)
    a79c:	d8801b17 	ldw	r2,108(sp)
    a7a0:	4d829b0e 	bge	r9,r22,b210 <___svfiprintf_internal_r+0xfb0>
    a7a4:	014000b4 	movhi	r5,2
    a7a8:	2943ef04 	addi	r5,r5,4028
    a7ac:	d9402815 	stw	r5,160(sp)
    a7b0:	05c001c4 	movi	r23,7
    a7b4:	00000306 	br	a7c4 <___svfiprintf_internal_r+0x564>
    a7b8:	b5bffc04 	addi	r22,r22,-16
    a7bc:	42000204 	addi	r8,r8,8
    a7c0:	4d80150e 	bge	r9,r22,a818 <___svfiprintf_internal_r+0x5b8>
    a7c4:	028000b4 	movhi	r10,2
    a7c8:	18c00404 	addi	r3,r3,16
    a7cc:	10800044 	addi	r2,r2,1
    a7d0:	5283ef04 	addi	r10,r10,4028
    a7d4:	42800015 	stw	r10,0(r8)
    a7d8:	42400115 	stw	r9,4(r8)
    a7dc:	d8c01c15 	stw	r3,112(sp)
    a7e0:	d8801b15 	stw	r2,108(sp)
    a7e4:	b8bff40e 	bge	r23,r2,a7b8 <__alt_mem_Flash_flash_data+0xf400a7b8>
    a7e8:	9009883a 	mov	r4,r18
    a7ec:	a00b883a 	mov	r5,r20
    a7f0:	d9801a04 	addi	r6,sp,104
    a7f4:	da402c15 	stw	r9,176(sp)
    a7f8:	000a0940 	call	a094 <__ssprint_r>
    a7fc:	da402c17 	ldw	r9,176(sp)
    a800:	1001531e 	bne	r2,zero,ad50 <___svfiprintf_internal_r+0xaf0>
    a804:	b5bffc04 	addi	r22,r22,-16
    a808:	d8c01c17 	ldw	r3,112(sp)
    a80c:	d8801b17 	ldw	r2,108(sp)
    a810:	d811883a 	mov	r8,sp
    a814:	4dbfeb16 	blt	r9,r22,a7c4 <__alt_mem_Flash_flash_data+0xf400a7c4>
    a818:	dac02817 	ldw	r11,160(sp)
    a81c:	b0c7883a 	add	r3,r22,r3
    a820:	10800044 	addi	r2,r2,1
    a824:	42c00015 	stw	r11,0(r8)
    a828:	45800115 	stw	r22,4(r8)
    a82c:	d8c01c15 	stw	r3,112(sp)
    a830:	d8801b15 	stw	r2,108(sp)
    a834:	010001c4 	movi	r4,7
    a838:	2081dd16 	blt	r4,r2,afb0 <___svfiprintf_internal_r+0xd50>
    a83c:	42000204 	addi	r8,r8,8
    a840:	00008f06 	br	aa80 <___svfiprintf_internal_r+0x820>
    a844:	008000b4 	movhi	r2,2
    a848:	10837d04 	addi	r2,r2,3572
    a84c:	d8802a15 	stw	r2,168(sp)
    a850:	d9801d85 	stb	r6,118(sp)
    a854:	8880080c 	andi	r2,r17,32
    a858:	10003226 	beq	r2,zero,a924 <___svfiprintf_internal_r+0x6c4>
    a85c:	da802317 	ldw	r10,140(sp)
    a860:	dac02317 	ldw	r11,140(sp)
    a864:	52400017 	ldw	r9,0(r10)
    a868:	52800117 	ldw	r10,4(r10)
    a86c:	5ac00204 	addi	r11,r11,8
    a870:	dac02315 	stw	r11,140(sp)
    a874:	8880004c 	andi	r2,r17,1
    a878:	10003426 	beq	r2,zero,a94c <___svfiprintf_internal_r+0x6ec>
    a87c:	4a86b03a 	or	r3,r9,r10
    a880:	1802231e 	bne	r3,zero,b110 <___svfiprintf_internal_r+0xeb0>
    a884:	00800084 	movi	r2,2
    a888:	003f2e06 	br	a544 <__alt_mem_Flash_flash_data+0xf400a544>
    a88c:	a9000007 	ldb	r4,0(r21)
    a890:	a805883a 	mov	r2,r21
    a894:	21c22426 	beq	r4,r7,b128 <___svfiprintf_internal_r+0xec8>
    a898:	8c400414 	ori	r17,r17,16
    a89c:	003ebc06 	br	a390 <__alt_mem_Flash_flash_data+0xf400a390>
    a8a0:	8c401014 	ori	r17,r17,64
    a8a4:	a9000007 	ldb	r4,0(r21)
    a8a8:	003eb906 	br	a390 <__alt_mem_Flash_flash_data+0xf400a390>
    a8ac:	d9801d85 	stb	r6,118(sp)
    a8b0:	8880080c 	andi	r2,r17,32
    a8b4:	10020d1e 	bne	r2,zero,b0ec <___svfiprintf_internal_r+0xe8c>
    a8b8:	8880040c 	andi	r2,r17,16
    a8bc:	10021e1e 	bne	r2,zero,b138 <___svfiprintf_internal_r+0xed8>
    a8c0:	8c40100c 	andi	r17,r17,64
    a8c4:	88021c26 	beq	r17,zero,b138 <___svfiprintf_internal_r+0xed8>
    a8c8:	dac02317 	ldw	r11,140(sp)
    a8cc:	da802417 	ldw	r10,144(sp)
    a8d0:	58800017 	ldw	r2,0(r11)
    a8d4:	5ac00104 	addi	r11,r11,4
    a8d8:	dac02315 	stw	r11,140(sp)
    a8dc:	1280000d 	sth	r10,0(r2)
    a8e0:	003e8306 	br	a2f0 <__alt_mem_Flash_flash_data+0xf400a2f0>
    a8e4:	8c400054 	ori	r17,r17,1
    a8e8:	a9000007 	ldb	r4,0(r21)
    a8ec:	003ea806 	br	a390 <__alt_mem_Flash_flash_data+0xf400a390>
    a8f0:	30803fcc 	andi	r2,r6,255
    a8f4:	1080201c 	xori	r2,r2,128
    a8f8:	10bfe004 	addi	r2,r2,-128
    a8fc:	1001f91e 	bne	r2,zero,b0e4 <___svfiprintf_internal_r+0xe84>
    a900:	01800804 	movi	r6,32
    a904:	a9000007 	ldb	r4,0(r21)
    a908:	003ea106 	br	a390 <__alt_mem_Flash_flash_data+0xf400a390>
    a90c:	008000b4 	movhi	r2,2
    a910:	10838204 	addi	r2,r2,3592
    a914:	d8802a15 	stw	r2,168(sp)
    a918:	d9801d85 	stb	r6,118(sp)
    a91c:	8880080c 	andi	r2,r17,32
    a920:	103fce1e 	bne	r2,zero,a85c <__alt_mem_Flash_flash_data+0xf400a85c>
    a924:	8880040c 	andi	r2,r17,16
    a928:	1001e526 	beq	r2,zero,b0c0 <___svfiprintf_internal_r+0xe60>
    a92c:	da802317 	ldw	r10,140(sp)
    a930:	dac02317 	ldw	r11,140(sp)
    a934:	52400017 	ldw	r9,0(r10)
    a938:	8880004c 	andi	r2,r17,1
    a93c:	5ac00104 	addi	r11,r11,4
    a940:	dac02315 	stw	r11,140(sp)
    a944:	0015883a 	mov	r10,zero
    a948:	103fcc1e 	bne	r2,zero,a87c <__alt_mem_Flash_flash_data+0xf400a87c>
    a94c:	00800084 	movi	r2,2
    a950:	4a86b03a 	or	r3,r9,r10
    a954:	003efb06 	br	a544 <__alt_mem_Flash_flash_data+0xf400a544>
    a958:	8c400414 	ori	r17,r17,16
    a95c:	d9801d85 	stb	r6,118(sp)
    a960:	8880080c 	andi	r2,r17,32
    a964:	d8c02317 	ldw	r3,140(sp)
    a968:	103f651e 	bne	r2,zero,a700 <__alt_mem_Flash_flash_data+0xf400a700>
    a96c:	8880040c 	andi	r2,r17,16
    a970:	1001c61e 	bne	r2,zero,b08c <___svfiprintf_internal_r+0xe2c>
    a974:	8880100c 	andi	r2,r17,64
    a978:	1001c426 	beq	r2,zero,b08c <___svfiprintf_internal_r+0xe2c>
    a97c:	1a40000f 	ldh	r9,0(r3)
    a980:	dac02317 	ldw	r11,140(sp)
    a984:	4815d7fa 	srai	r10,r9,31
    a988:	5ac00104 	addi	r11,r11,4
    a98c:	dac02315 	stw	r11,140(sp)
    a990:	5005883a 	mov	r2,r10
    a994:	103f610e 	bge	r2,zero,a71c <__alt_mem_Flash_flash_data+0xf400a71c>
    a998:	0253c83a 	sub	r9,zero,r9
    a99c:	4804c03a 	cmpne	r2,r9,zero
    a9a0:	0295c83a 	sub	r10,zero,r10
    a9a4:	5095c83a 	sub	r10,r10,r2
    a9a8:	02c00b44 	movi	r11,45
    a9ac:	dac01d85 	stb	r11,118(sp)
    a9b0:	8039883a 	mov	fp,r16
    a9b4:	00800044 	movi	r2,1
    a9b8:	4a86b03a 	or	r3,r9,r10
    a9bc:	003ee406 	br	a550 <__alt_mem_Flash_flash_data+0xf400a550>
    a9c0:	a815883a 	mov	r10,r21
    a9c4:	d8002115 	stw	zero,132(sp)
    a9c8:	20bff404 	addi	r2,r4,-48
    a9cc:	51000007 	ldb	r4,0(r10)
    a9d0:	da802117 	ldw	r10,132(sp)
    a9d4:	ad400044 	addi	r21,r21,1
    a9d8:	52c002a4 	muli	r11,r10,10
    a9dc:	a815883a 	mov	r10,r21
    a9e0:	5885883a 	add	r2,r11,r2
    a9e4:	d8802115 	stw	r2,132(sp)
    a9e8:	20bff404 	addi	r2,r4,-48
    a9ec:	28bff72e 	bgeu	r5,r2,a9cc <__alt_mem_Flash_flash_data+0xf400a9cc>
    a9f0:	20bff804 	addi	r2,r4,-32
    a9f4:	18be692e 	bgeu	r3,r2,a39c <__alt_mem_Flash_flash_data+0xf400a39c>
    a9f8:	d9801d85 	stb	r6,118(sp)
    a9fc:	2000ce26 	beq	r4,zero,ad38 <___svfiprintf_internal_r+0xad8>
    aa00:	02800044 	movi	r10,1
    aa04:	dac01004 	addi	r11,sp,64
    aa08:	da802015 	stw	r10,128(sp)
    aa0c:	d9001005 	stb	r4,64(sp)
    aa10:	d8001d85 	stb	zero,118(sp)
    aa14:	5039883a 	mov	fp,r10
    aa18:	dac02615 	stw	r11,152(sp)
    aa1c:	003f4f06 	br	a75c <__alt_mem_Flash_flash_data+0xf400a75c>
    aa20:	8c402014 	ori	r17,r17,128
    aa24:	a9000007 	ldb	r4,0(r21)
    aa28:	003e5906 	br	a390 <__alt_mem_Flash_flash_data+0xf400a390>
    aa2c:	01800ac4 	movi	r6,43
    aa30:	a9000007 	ldb	r4,0(r21)
    aa34:	003e5606 	br	a390 <__alt_mem_Flash_flash_data+0xf400a390>
    aa38:	a9000007 	ldb	r4,0(r21)
    aa3c:	aa800044 	addi	r10,r21,1
    aa40:	22420626 	beq	r4,r9,b25c <___svfiprintf_internal_r+0xffc>
    aa44:	20bff404 	addi	r2,r4,-48
    aa48:	502b883a 	mov	r21,r10
    aa4c:	0021883a 	mov	r16,zero
    aa50:	28be5036 	bltu	r5,r2,a394 <__alt_mem_Flash_flash_data+0xf400a394>
    aa54:	a9000007 	ldb	r4,0(r21)
    aa58:	840002a4 	muli	r16,r16,10
    aa5c:	ad400044 	addi	r21,r21,1
    aa60:	1421883a 	add	r16,r2,r16
    aa64:	20bff404 	addi	r2,r4,-48
    aa68:	28bffa2e 	bgeu	r5,r2,aa54 <__alt_mem_Flash_flash_data+0xf400aa54>
    aa6c:	803e490e 	bge	r16,zero,a394 <__alt_mem_Flash_flash_data+0xf400a394>
    aa70:	043fffc4 	movi	r16,-1
    aa74:	003e4706 	br	a394 <__alt_mem_Flash_flash_data+0xf400a394>
    aa78:	d8c01c17 	ldw	r3,112(sp)
    aa7c:	d8801b17 	ldw	r2,108(sp)
    aa80:	d9001d87 	ldb	r4,118(sp)
    aa84:	20000b26 	beq	r4,zero,aab4 <___svfiprintf_internal_r+0x854>
    aa88:	d9001d84 	addi	r4,sp,118
    aa8c:	18c00044 	addi	r3,r3,1
    aa90:	10800044 	addi	r2,r2,1
    aa94:	41000015 	stw	r4,0(r8)
    aa98:	01000044 	movi	r4,1
    aa9c:	41000115 	stw	r4,4(r8)
    aaa0:	d8c01c15 	stw	r3,112(sp)
    aaa4:	d8801b15 	stw	r2,108(sp)
    aaa8:	010001c4 	movi	r4,7
    aaac:	20811e16 	blt	r4,r2,af28 <___svfiprintf_internal_r+0xcc8>
    aab0:	42000204 	addi	r8,r8,8
    aab4:	da802217 	ldw	r10,136(sp)
    aab8:	50000b26 	beq	r10,zero,aae8 <___svfiprintf_internal_r+0x888>
    aabc:	d9001d04 	addi	r4,sp,116
    aac0:	18c00084 	addi	r3,r3,2
    aac4:	10800044 	addi	r2,r2,1
    aac8:	41000015 	stw	r4,0(r8)
    aacc:	01000084 	movi	r4,2
    aad0:	41000115 	stw	r4,4(r8)
    aad4:	d8c01c15 	stw	r3,112(sp)
    aad8:	d8801b15 	stw	r2,108(sp)
    aadc:	010001c4 	movi	r4,7
    aae0:	20811a16 	blt	r4,r2,af4c <___svfiprintf_internal_r+0xcec>
    aae4:	42000204 	addi	r8,r8,8
    aae8:	dac02517 	ldw	r11,148(sp)
    aaec:	01002004 	movi	r4,128
    aaf0:	5900a826 	beq	r11,r4,ad94 <___svfiprintf_internal_r+0xb34>
    aaf4:	8721c83a 	sub	r16,r16,fp
    aaf8:	0400260e 	bge	zero,r16,ab94 <___svfiprintf_internal_r+0x934>
    aafc:	01c00404 	movi	r7,16
    ab00:	3c019d0e 	bge	r7,r16,b178 <___svfiprintf_internal_r+0xf18>
    ab04:	010000b4 	movhi	r4,2
    ab08:	2103eb04 	addi	r4,r4,4012
    ab0c:	d9002215 	stw	r4,136(sp)
    ab10:	382f883a 	mov	r23,r7
    ab14:	058001c4 	movi	r22,7
    ab18:	00000306 	br	ab28 <___svfiprintf_internal_r+0x8c8>
    ab1c:	843ffc04 	addi	r16,r16,-16
    ab20:	42000204 	addi	r8,r8,8
    ab24:	bc00110e 	bge	r23,r16,ab6c <___svfiprintf_internal_r+0x90c>
    ab28:	18c00404 	addi	r3,r3,16
    ab2c:	10800044 	addi	r2,r2,1
    ab30:	44c00015 	stw	r19,0(r8)
    ab34:	45c00115 	stw	r23,4(r8)
    ab38:	d8c01c15 	stw	r3,112(sp)
    ab3c:	d8801b15 	stw	r2,108(sp)
    ab40:	b0bff60e 	bge	r22,r2,ab1c <__alt_mem_Flash_flash_data+0xf400ab1c>
    ab44:	9009883a 	mov	r4,r18
    ab48:	a00b883a 	mov	r5,r20
    ab4c:	d9801a04 	addi	r6,sp,104
    ab50:	000a0940 	call	a094 <__ssprint_r>
    ab54:	10007e1e 	bne	r2,zero,ad50 <___svfiprintf_internal_r+0xaf0>
    ab58:	843ffc04 	addi	r16,r16,-16
    ab5c:	d8c01c17 	ldw	r3,112(sp)
    ab60:	d8801b17 	ldw	r2,108(sp)
    ab64:	d811883a 	mov	r8,sp
    ab68:	bc3fef16 	blt	r23,r16,ab28 <__alt_mem_Flash_flash_data+0xf400ab28>
    ab6c:	da802217 	ldw	r10,136(sp)
    ab70:	1c07883a 	add	r3,r3,r16
    ab74:	10800044 	addi	r2,r2,1
    ab78:	42800015 	stw	r10,0(r8)
    ab7c:	44000115 	stw	r16,4(r8)
    ab80:	d8c01c15 	stw	r3,112(sp)
    ab84:	d8801b15 	stw	r2,108(sp)
    ab88:	010001c4 	movi	r4,7
    ab8c:	2080ce16 	blt	r4,r2,aec8 <___svfiprintf_internal_r+0xc68>
    ab90:	42000204 	addi	r8,r8,8
    ab94:	dac02617 	ldw	r11,152(sp)
    ab98:	1f07883a 	add	r3,r3,fp
    ab9c:	10800044 	addi	r2,r2,1
    aba0:	42c00015 	stw	r11,0(r8)
    aba4:	47000115 	stw	fp,4(r8)
    aba8:	d8c01c15 	stw	r3,112(sp)
    abac:	d8801b15 	stw	r2,108(sp)
    abb0:	010001c4 	movi	r4,7
    abb4:	2080a316 	blt	r4,r2,ae44 <___svfiprintf_internal_r+0xbe4>
    abb8:	42000204 	addi	r8,r8,8
    abbc:	8c40010c 	andi	r17,r17,4
    abc0:	88002b26 	beq	r17,zero,ac70 <___svfiprintf_internal_r+0xa10>
    abc4:	da802117 	ldw	r10,132(sp)
    abc8:	dac02017 	ldw	r11,128(sp)
    abcc:	52e1c83a 	sub	r16,r10,r11
    abd0:	0400270e 	bge	zero,r16,ac70 <___svfiprintf_internal_r+0xa10>
    abd4:	04400404 	movi	r17,16
    abd8:	d8801b17 	ldw	r2,108(sp)
    abdc:	8c01900e 	bge	r17,r16,b220 <___svfiprintf_internal_r+0xfc0>
    abe0:	014000b4 	movhi	r5,2
    abe4:	2943ef04 	addi	r5,r5,4028
    abe8:	d9402815 	stw	r5,160(sp)
    abec:	070001c4 	movi	fp,7
    abf0:	00000306 	br	ac00 <___svfiprintf_internal_r+0x9a0>
    abf4:	843ffc04 	addi	r16,r16,-16
    abf8:	42000204 	addi	r8,r8,8
    abfc:	8c00130e 	bge	r17,r16,ac4c <___svfiprintf_internal_r+0x9ec>
    ac00:	028000b4 	movhi	r10,2
    ac04:	18c00404 	addi	r3,r3,16
    ac08:	10800044 	addi	r2,r2,1
    ac0c:	5283ef04 	addi	r10,r10,4028
    ac10:	42800015 	stw	r10,0(r8)
    ac14:	44400115 	stw	r17,4(r8)
    ac18:	d8c01c15 	stw	r3,112(sp)
    ac1c:	d8801b15 	stw	r2,108(sp)
    ac20:	e0bff40e 	bge	fp,r2,abf4 <__alt_mem_Flash_flash_data+0xf400abf4>
    ac24:	9009883a 	mov	r4,r18
    ac28:	a00b883a 	mov	r5,r20
    ac2c:	d9801a04 	addi	r6,sp,104
    ac30:	000a0940 	call	a094 <__ssprint_r>
    ac34:	1000461e 	bne	r2,zero,ad50 <___svfiprintf_internal_r+0xaf0>
    ac38:	843ffc04 	addi	r16,r16,-16
    ac3c:	d8c01c17 	ldw	r3,112(sp)
    ac40:	d8801b17 	ldw	r2,108(sp)
    ac44:	d811883a 	mov	r8,sp
    ac48:	8c3fed16 	blt	r17,r16,ac00 <__alt_mem_Flash_flash_data+0xf400ac00>
    ac4c:	dac02817 	ldw	r11,160(sp)
    ac50:	1c07883a 	add	r3,r3,r16
    ac54:	10800044 	addi	r2,r2,1
    ac58:	42c00015 	stw	r11,0(r8)
    ac5c:	44000115 	stw	r16,4(r8)
    ac60:	d8c01c15 	stw	r3,112(sp)
    ac64:	d8801b15 	stw	r2,108(sp)
    ac68:	010001c4 	movi	r4,7
    ac6c:	2080fd16 	blt	r4,r2,b064 <___svfiprintf_internal_r+0xe04>
    ac70:	dd802017 	ldw	r22,128(sp)
    ac74:	da802117 	ldw	r10,132(sp)
    ac78:	b280010e 	bge	r22,r10,ac80 <___svfiprintf_internal_r+0xa20>
    ac7c:	502d883a 	mov	r22,r10
    ac80:	dac02417 	ldw	r11,144(sp)
    ac84:	5d97883a 	add	r11,r11,r22
    ac88:	dac02415 	stw	r11,144(sp)
    ac8c:	1800751e 	bne	r3,zero,ae64 <___svfiprintf_internal_r+0xc04>
    ac90:	a8800007 	ldb	r2,0(r21)
    ac94:	d8001b15 	stw	zero,108(sp)
    ac98:	d811883a 	mov	r8,sp
    ac9c:	103d961e 	bne	r2,zero,a2f8 <__alt_mem_Flash_flash_data+0xf400a2f8>
    aca0:	a82d883a 	mov	r22,r21
    aca4:	003dad06 	br	a35c <__alt_mem_Flash_flash_data+0xf400a35c>
    aca8:	10803fcc 	andi	r2,r2,255
    acac:	00c00044 	movi	r3,1
    acb0:	10fe2f1e 	bne	r2,r3,a570 <__alt_mem_Flash_flash_data+0xf400a570>
    acb4:	5000e026 	beq	r10,zero,b038 <___svfiprintf_internal_r+0xdd8>
    acb8:	dc002015 	stw	r16,128(sp)
    acbc:	dc402215 	stw	r17,136(sp)
    acc0:	dd801a04 	addi	r22,sp,104
    acc4:	402f883a 	mov	r23,r8
    acc8:	5839883a 	mov	fp,r11
    accc:	4821883a 	mov	r16,r9
    acd0:	5023883a 	mov	r17,r10
    acd4:	8009883a 	mov	r4,r16
    acd8:	880b883a 	mov	r5,r17
    acdc:	01800284 	movi	r6,10
    ace0:	000f883a 	mov	r7,zero
    ace4:	000d6140 	call	d614 <__umoddi3>
    ace8:	10800c04 	addi	r2,r2,48
    acec:	b5bfffc4 	addi	r22,r22,-1
    acf0:	8009883a 	mov	r4,r16
    acf4:	880b883a 	mov	r5,r17
    acf8:	01800284 	movi	r6,10
    acfc:	000f883a 	mov	r7,zero
    ad00:	b0800005 	stb	r2,0(r22)
    ad04:	000d0540 	call	d054 <__udivdi3>
    ad08:	1021883a 	mov	r16,r2
    ad0c:	10c4b03a 	or	r2,r2,r3
    ad10:	1823883a 	mov	r17,r3
    ad14:	103fef1e 	bne	r2,zero,acd4 <__alt_mem_Flash_flash_data+0xf400acd4>
    ad18:	da801e17 	ldw	r10,120(sp)
    ad1c:	e017883a 	mov	r11,fp
    ad20:	dc002017 	ldw	r16,128(sp)
    ad24:	dc402217 	ldw	r17,136(sp)
    ad28:	b811883a 	mov	r8,r23
    ad2c:	dd802615 	stw	r22,152(sp)
    ad30:	55b9c83a 	sub	fp,r10,r22
    ad34:	003e2006 	br	a5b8 <__alt_mem_Flash_flash_data+0xf400a5b8>
    ad38:	d8801c17 	ldw	r2,112(sp)
    ad3c:	10000426 	beq	r2,zero,ad50 <___svfiprintf_internal_r+0xaf0>
    ad40:	d9002917 	ldw	r4,164(sp)
    ad44:	d9402717 	ldw	r5,156(sp)
    ad48:	d9801a04 	addi	r6,sp,104
    ad4c:	000a0940 	call	a094 <__ssprint_r>
    ad50:	da802717 	ldw	r10,156(sp)
    ad54:	5080030b 	ldhu	r2,12(r10)
    ad58:	1080100c 	andi	r2,r2,64
    ad5c:	1000511e 	bne	r2,zero,aea4 <___svfiprintf_internal_r+0xc44>
    ad60:	d8802417 	ldw	r2,144(sp)
    ad64:	dfc03617 	ldw	ra,216(sp)
    ad68:	df003517 	ldw	fp,212(sp)
    ad6c:	ddc03417 	ldw	r23,208(sp)
    ad70:	dd803317 	ldw	r22,204(sp)
    ad74:	dd403217 	ldw	r21,200(sp)
    ad78:	dd003117 	ldw	r20,196(sp)
    ad7c:	dcc03017 	ldw	r19,192(sp)
    ad80:	dc802f17 	ldw	r18,188(sp)
    ad84:	dc402e17 	ldw	r17,184(sp)
    ad88:	dc002d17 	ldw	r16,180(sp)
    ad8c:	dec03704 	addi	sp,sp,220
    ad90:	f800283a 	ret
    ad94:	da802117 	ldw	r10,132(sp)
    ad98:	dac02017 	ldw	r11,128(sp)
    ad9c:	52edc83a 	sub	r22,r10,r11
    ada0:	05bf540e 	bge	zero,r22,aaf4 <__alt_mem_Flash_flash_data+0xf400aaf4>
    ada4:	02400404 	movi	r9,16
    ada8:	4d81210e 	bge	r9,r22,b230 <___svfiprintf_internal_r+0xfd0>
    adac:	014000b4 	movhi	r5,2
    adb0:	2943eb04 	addi	r5,r5,4012
    adb4:	d9402215 	stw	r5,136(sp)
    adb8:	05c001c4 	movi	r23,7
    adbc:	00000306 	br	adcc <___svfiprintf_internal_r+0xb6c>
    adc0:	b5bffc04 	addi	r22,r22,-16
    adc4:	42000204 	addi	r8,r8,8
    adc8:	4d80130e 	bge	r9,r22,ae18 <___svfiprintf_internal_r+0xbb8>
    adcc:	18c00404 	addi	r3,r3,16
    add0:	10800044 	addi	r2,r2,1
    add4:	44c00015 	stw	r19,0(r8)
    add8:	42400115 	stw	r9,4(r8)
    addc:	d8c01c15 	stw	r3,112(sp)
    ade0:	d8801b15 	stw	r2,108(sp)
    ade4:	b8bff60e 	bge	r23,r2,adc0 <__alt_mem_Flash_flash_data+0xf400adc0>
    ade8:	9009883a 	mov	r4,r18
    adec:	a00b883a 	mov	r5,r20
    adf0:	d9801a04 	addi	r6,sp,104
    adf4:	da402c15 	stw	r9,176(sp)
    adf8:	000a0940 	call	a094 <__ssprint_r>
    adfc:	da402c17 	ldw	r9,176(sp)
    ae00:	103fd31e 	bne	r2,zero,ad50 <__alt_mem_Flash_flash_data+0xf400ad50>
    ae04:	b5bffc04 	addi	r22,r22,-16
    ae08:	d8c01c17 	ldw	r3,112(sp)
    ae0c:	d8801b17 	ldw	r2,108(sp)
    ae10:	d811883a 	mov	r8,sp
    ae14:	4dbfed16 	blt	r9,r22,adcc <__alt_mem_Flash_flash_data+0xf400adcc>
    ae18:	da802217 	ldw	r10,136(sp)
    ae1c:	1d87883a 	add	r3,r3,r22
    ae20:	10800044 	addi	r2,r2,1
    ae24:	42800015 	stw	r10,0(r8)
    ae28:	45800115 	stw	r22,4(r8)
    ae2c:	d8c01c15 	stw	r3,112(sp)
    ae30:	d8801b15 	stw	r2,108(sp)
    ae34:	010001c4 	movi	r4,7
    ae38:	2080c616 	blt	r4,r2,b154 <___svfiprintf_internal_r+0xef4>
    ae3c:	42000204 	addi	r8,r8,8
    ae40:	003f2c06 	br	aaf4 <__alt_mem_Flash_flash_data+0xf400aaf4>
    ae44:	9009883a 	mov	r4,r18
    ae48:	a00b883a 	mov	r5,r20
    ae4c:	d9801a04 	addi	r6,sp,104
    ae50:	000a0940 	call	a094 <__ssprint_r>
    ae54:	103fbe1e 	bne	r2,zero,ad50 <__alt_mem_Flash_flash_data+0xf400ad50>
    ae58:	d8c01c17 	ldw	r3,112(sp)
    ae5c:	d811883a 	mov	r8,sp
    ae60:	003f5606 	br	abbc <__alt_mem_Flash_flash_data+0xf400abbc>
    ae64:	9009883a 	mov	r4,r18
    ae68:	a00b883a 	mov	r5,r20
    ae6c:	d9801a04 	addi	r6,sp,104
    ae70:	000a0940 	call	a094 <__ssprint_r>
    ae74:	103f8626 	beq	r2,zero,ac90 <__alt_mem_Flash_flash_data+0xf400ac90>
    ae78:	003fb506 	br	ad50 <__alt_mem_Flash_flash_data+0xf400ad50>
    ae7c:	10803fcc 	andi	r2,r2,255
    ae80:	10003b1e 	bne	r2,zero,af70 <___svfiprintf_internal_r+0xd10>
    ae84:	8880004c 	andi	r2,r17,1
    ae88:	10007d26 	beq	r2,zero,b080 <___svfiprintf_internal_r+0xe20>
    ae8c:	00800c04 	movi	r2,48
    ae90:	d8c019c4 	addi	r3,sp,103
    ae94:	d88019c5 	stb	r2,103(sp)
    ae98:	df002b17 	ldw	fp,172(sp)
    ae9c:	d8c02615 	stw	r3,152(sp)
    aea0:	003dc506 	br	a5b8 <__alt_mem_Flash_flash_data+0xf400a5b8>
    aea4:	00bfffc4 	movi	r2,-1
    aea8:	003fae06 	br	ad64 <__alt_mem_Flash_flash_data+0xf400ad64>
    aeac:	9009883a 	mov	r4,r18
    aeb0:	a00b883a 	mov	r5,r20
    aeb4:	d9801a04 	addi	r6,sp,104
    aeb8:	000a0940 	call	a094 <__ssprint_r>
    aebc:	103fa41e 	bne	r2,zero,ad50 <__alt_mem_Flash_flash_data+0xf400ad50>
    aec0:	d811883a 	mov	r8,sp
    aec4:	003d2206 	br	a350 <__alt_mem_Flash_flash_data+0xf400a350>
    aec8:	9009883a 	mov	r4,r18
    aecc:	a00b883a 	mov	r5,r20
    aed0:	d9801a04 	addi	r6,sp,104
    aed4:	000a0940 	call	a094 <__ssprint_r>
    aed8:	103f9d1e 	bne	r2,zero,ad50 <__alt_mem_Flash_flash_data+0xf400ad50>
    aedc:	d8c01c17 	ldw	r3,112(sp)
    aee0:	d8801b17 	ldw	r2,108(sp)
    aee4:	d811883a 	mov	r8,sp
    aee8:	003f2a06 	br	ab94 <__alt_mem_Flash_flash_data+0xf400ab94>
    aeec:	d9402a17 	ldw	r5,168(sp)
    aef0:	d8c01a04 	addi	r3,sp,104
    aef4:	488003cc 	andi	r2,r9,15
    aef8:	5008973a 	slli	r4,r10,28
    aefc:	2885883a 	add	r2,r5,r2
    af00:	4812d13a 	srli	r9,r9,4
    af04:	10800003 	ldbu	r2,0(r2)
    af08:	5014d13a 	srli	r10,r10,4
    af0c:	18ffffc4 	addi	r3,r3,-1
    af10:	2252b03a 	or	r9,r4,r9
    af14:	18800005 	stb	r2,0(r3)
    af18:	4a84b03a 	or	r2,r9,r10
    af1c:	103ff51e 	bne	r2,zero,aef4 <__alt_mem_Flash_flash_data+0xf400aef4>
    af20:	d8c02615 	stw	r3,152(sp)
    af24:	003da206 	br	a5b0 <__alt_mem_Flash_flash_data+0xf400a5b0>
    af28:	9009883a 	mov	r4,r18
    af2c:	a00b883a 	mov	r5,r20
    af30:	d9801a04 	addi	r6,sp,104
    af34:	000a0940 	call	a094 <__ssprint_r>
    af38:	103f851e 	bne	r2,zero,ad50 <__alt_mem_Flash_flash_data+0xf400ad50>
    af3c:	d8c01c17 	ldw	r3,112(sp)
    af40:	d8801b17 	ldw	r2,108(sp)
    af44:	d811883a 	mov	r8,sp
    af48:	003eda06 	br	aab4 <__alt_mem_Flash_flash_data+0xf400aab4>
    af4c:	9009883a 	mov	r4,r18
    af50:	a00b883a 	mov	r5,r20
    af54:	d9801a04 	addi	r6,sp,104
    af58:	000a0940 	call	a094 <__ssprint_r>
    af5c:	103f7c1e 	bne	r2,zero,ad50 <__alt_mem_Flash_flash_data+0xf400ad50>
    af60:	d8c01c17 	ldw	r3,112(sp)
    af64:	d8801b17 	ldw	r2,108(sp)
    af68:	d811883a 	mov	r8,sp
    af6c:	003ede06 	br	aae8 <__alt_mem_Flash_flash_data+0xf400aae8>
    af70:	da801a04 	addi	r10,sp,104
    af74:	da802615 	stw	r10,152(sp)
    af78:	003d8f06 	br	a5b8 <__alt_mem_Flash_flash_data+0xf400a5b8>
    af7c:	8880040c 	andi	r2,r17,16
    af80:	10004c1e 	bne	r2,zero,b0b4 <___svfiprintf_internal_r+0xe54>
    af84:	8880100c 	andi	r2,r17,64
    af88:	da802317 	ldw	r10,140(sp)
    af8c:	10004a26 	beq	r2,zero,b0b8 <___svfiprintf_internal_r+0xe58>
    af90:	5240000b 	ldhu	r9,0(r10)
    af94:	dac02317 	ldw	r11,140(sp)
    af98:	0015883a 	mov	r10,zero
    af9c:	00800044 	movi	r2,1
    afa0:	5ac00104 	addi	r11,r11,4
    afa4:	dac02315 	stw	r11,140(sp)
    afa8:	4807883a 	mov	r3,r9
    afac:	003d6506 	br	a544 <__alt_mem_Flash_flash_data+0xf400a544>
    afb0:	9009883a 	mov	r4,r18
    afb4:	a00b883a 	mov	r5,r20
    afb8:	d9801a04 	addi	r6,sp,104
    afbc:	000a0940 	call	a094 <__ssprint_r>
    afc0:	103f631e 	bne	r2,zero,ad50 <__alt_mem_Flash_flash_data+0xf400ad50>
    afc4:	d8c01c17 	ldw	r3,112(sp)
    afc8:	d8801b17 	ldw	r2,108(sp)
    afcc:	d811883a 	mov	r8,sp
    afd0:	003eab06 	br	aa80 <__alt_mem_Flash_flash_data+0xf400aa80>
    afd4:	8880040c 	andi	r2,r17,16
    afd8:	1000331e 	bne	r2,zero,b0a8 <___svfiprintf_internal_r+0xe48>
    afdc:	8880100c 	andi	r2,r17,64
    afe0:	da802317 	ldw	r10,140(sp)
    afe4:	10003126 	beq	r2,zero,b0ac <___svfiprintf_internal_r+0xe4c>
    afe8:	5240000b 	ldhu	r9,0(r10)
    afec:	dac02317 	ldw	r11,140(sp)
    aff0:	0015883a 	mov	r10,zero
    aff4:	0005883a 	mov	r2,zero
    aff8:	5ac00104 	addi	r11,r11,4
    affc:	dac02315 	stw	r11,140(sp)
    b000:	4807883a 	mov	r3,r9
    b004:	003d4f06 	br	a544 <__alt_mem_Flash_flash_data+0xf400a544>
    b008:	10803fcc 	andi	r2,r2,255
    b00c:	1080201c 	xori	r2,r2,128
    b010:	10bfe004 	addi	r2,r2,-128
    b014:	01000c04 	movi	r4,48
    b018:	11005b26 	beq	r2,r4,b188 <___svfiprintf_internal_r+0xf28>
    b01c:	da802617 	ldw	r10,152(sp)
    b020:	d8801e17 	ldw	r2,120(sp)
    b024:	193fffc5 	stb	r4,-1(r3)
    b028:	52bfffc4 	addi	r10,r10,-1
    b02c:	da802615 	stw	r10,152(sp)
    b030:	12b9c83a 	sub	fp,r2,r10
    b034:	003d6006 	br	a5b8 <__alt_mem_Flash_flash_data+0xf400a5b8>
    b038:	00800244 	movi	r2,9
    b03c:	127f1e36 	bltu	r2,r9,acb8 <__alt_mem_Flash_flash_data+0xf400acb8>
    b040:	4a400c04 	addi	r9,r9,48
    b044:	d8c019c4 	addi	r3,sp,103
    b048:	da4019c5 	stb	r9,103(sp)
    b04c:	df002b17 	ldw	fp,172(sp)
    b050:	d8c02615 	stw	r3,152(sp)
    b054:	003d5806 	br	a5b8 <__alt_mem_Flash_flash_data+0xf400a5b8>
    b058:	d8802315 	stw	r2,140(sp)
    b05c:	a9000007 	ldb	r4,0(r21)
    b060:	003ccb06 	br	a390 <__alt_mem_Flash_flash_data+0xf400a390>
    b064:	9009883a 	mov	r4,r18
    b068:	a00b883a 	mov	r5,r20
    b06c:	d9801a04 	addi	r6,sp,104
    b070:	000a0940 	call	a094 <__ssprint_r>
    b074:	103f361e 	bne	r2,zero,ad50 <__alt_mem_Flash_flash_data+0xf400ad50>
    b078:	d8c01c17 	ldw	r3,112(sp)
    b07c:	003efc06 	br	ac70 <__alt_mem_Flash_flash_data+0xf400ac70>
    b080:	d8c01a04 	addi	r3,sp,104
    b084:	d8c02615 	stw	r3,152(sp)
    b088:	003d4b06 	br	a5b8 <__alt_mem_Flash_flash_data+0xf400a5b8>
    b08c:	da802317 	ldw	r10,140(sp)
    b090:	1a400017 	ldw	r9,0(r3)
    b094:	52800104 	addi	r10,r10,4
    b098:	da802315 	stw	r10,140(sp)
    b09c:	4815d7fa 	srai	r10,r9,31
    b0a0:	5005883a 	mov	r2,r10
    b0a4:	003d9c06 	br	a718 <__alt_mem_Flash_flash_data+0xf400a718>
    b0a8:	da802317 	ldw	r10,140(sp)
    b0ac:	52400017 	ldw	r9,0(r10)
    b0b0:	003fce06 	br	afec <__alt_mem_Flash_flash_data+0xf400afec>
    b0b4:	da802317 	ldw	r10,140(sp)
    b0b8:	52400017 	ldw	r9,0(r10)
    b0bc:	003fb506 	br	af94 <__alt_mem_Flash_flash_data+0xf400af94>
    b0c0:	8880100c 	andi	r2,r17,64
    b0c4:	da802317 	ldw	r10,140(sp)
    b0c8:	103e1926 	beq	r2,zero,a930 <__alt_mem_Flash_flash_data+0xf400a930>
    b0cc:	dac02317 	ldw	r11,140(sp)
    b0d0:	5240000b 	ldhu	r9,0(r10)
    b0d4:	0015883a 	mov	r10,zero
    b0d8:	5ac00104 	addi	r11,r11,4
    b0dc:	dac02315 	stw	r11,140(sp)
    b0e0:	003de406 	br	a874 <__alt_mem_Flash_flash_data+0xf400a874>
    b0e4:	a9000007 	ldb	r4,0(r21)
    b0e8:	003ca906 	br	a390 <__alt_mem_Flash_flash_data+0xf400a390>
    b0ec:	dac02317 	ldw	r11,140(sp)
    b0f0:	da802417 	ldw	r10,144(sp)
    b0f4:	58800017 	ldw	r2,0(r11)
    b0f8:	5007d7fa 	srai	r3,r10,31
    b0fc:	5ac00104 	addi	r11,r11,4
    b100:	dac02315 	stw	r11,140(sp)
    b104:	12800015 	stw	r10,0(r2)
    b108:	10c00115 	stw	r3,4(r2)
    b10c:	003c7806 	br	a2f0 <__alt_mem_Flash_flash_data+0xf400a2f0>
    b110:	00800c04 	movi	r2,48
    b114:	d8801d05 	stb	r2,116(sp)
    b118:	d9001d45 	stb	r4,117(sp)
    b11c:	8c400094 	ori	r17,r17,2
    b120:	00800084 	movi	r2,2
    b124:	003d0706 	br	a544 <__alt_mem_Flash_flash_data+0xf400a544>
    b128:	ad400044 	addi	r21,r21,1
    b12c:	8c400814 	ori	r17,r17,32
    b130:	11000047 	ldb	r4,1(r2)
    b134:	003c9606 	br	a390 <__alt_mem_Flash_flash_data+0xf400a390>
    b138:	dac02317 	ldw	r11,140(sp)
    b13c:	da802417 	ldw	r10,144(sp)
    b140:	58800017 	ldw	r2,0(r11)
    b144:	5ac00104 	addi	r11,r11,4
    b148:	dac02315 	stw	r11,140(sp)
    b14c:	12800015 	stw	r10,0(r2)
    b150:	003c6706 	br	a2f0 <__alt_mem_Flash_flash_data+0xf400a2f0>
    b154:	9009883a 	mov	r4,r18
    b158:	a00b883a 	mov	r5,r20
    b15c:	d9801a04 	addi	r6,sp,104
    b160:	000a0940 	call	a094 <__ssprint_r>
    b164:	103efa1e 	bne	r2,zero,ad50 <__alt_mem_Flash_flash_data+0xf400ad50>
    b168:	d8c01c17 	ldw	r3,112(sp)
    b16c:	d8801b17 	ldw	r2,108(sp)
    b170:	d811883a 	mov	r8,sp
    b174:	003e5f06 	br	aaf4 <__alt_mem_Flash_flash_data+0xf400aaf4>
    b178:	02c000b4 	movhi	r11,2
    b17c:	5ac3eb04 	addi	r11,r11,4012
    b180:	dac02215 	stw	r11,136(sp)
    b184:	003e7906 	br	ab6c <__alt_mem_Flash_flash_data+0xf400ab6c>
    b188:	da801e17 	ldw	r10,120(sp)
    b18c:	d8c02617 	ldw	r3,152(sp)
    b190:	50f9c83a 	sub	fp,r10,r3
    b194:	003d0806 	br	a5b8 <__alt_mem_Flash_flash_data+0xf400a5b8>
    b198:	da002c15 	stw	r8,176(sp)
    b19c:	0000e580 	call	e58 <strlen>
    b1a0:	1039883a 	mov	fp,r2
    b1a4:	dac01d83 	ldbu	r11,118(sp)
    b1a8:	ddc02315 	stw	r23,140(sp)
    b1ac:	0021883a 	mov	r16,zero
    b1b0:	da002c17 	ldw	r8,176(sp)
    b1b4:	003d0006 	br	a5b8 <__alt_mem_Flash_flash_data+0xf400a5b8>
    b1b8:	00800184 	movi	r2,6
    b1bc:	1400012e 	bgeu	r2,r16,b1c4 <___svfiprintf_internal_r+0xf64>
    b1c0:	1021883a 	mov	r16,r2
    b1c4:	8039883a 	mov	fp,r16
    b1c8:	802d883a 	mov	r22,r16
    b1cc:	80002116 	blt	r16,zero,b254 <___svfiprintf_internal_r+0xff4>
    b1d0:	008000b4 	movhi	r2,2
    b1d4:	10838704 	addi	r2,r2,3612
    b1d8:	dd802015 	stw	r22,128(sp)
    b1dc:	ddc02315 	stw	r23,140(sp)
    b1e0:	d8802615 	stw	r2,152(sp)
    b1e4:	003d5d06 	br	a75c <__alt_mem_Flash_flash_data+0xf400a75c>
    b1e8:	04001004 	movi	r16,64
    b1ec:	800b883a 	mov	r5,r16
    b1f0:	0007c540 	call	7c54 <_malloc_r>
    b1f4:	da802717 	ldw	r10,156(sp)
    b1f8:	50800015 	stw	r2,0(r10)
    b1fc:	50800415 	stw	r2,16(r10)
    b200:	10002026 	beq	r2,zero,b284 <___svfiprintf_internal_r+0x1024>
    b204:	da802717 	ldw	r10,156(sp)
    b208:	54000515 	stw	r16,20(r10)
    b20c:	003c2806 	br	a2b0 <__alt_mem_Flash_flash_data+0xf400a2b0>
    b210:	010000b4 	movhi	r4,2
    b214:	2103ef04 	addi	r4,r4,4028
    b218:	d9002815 	stw	r4,160(sp)
    b21c:	003d7e06 	br	a818 <__alt_mem_Flash_flash_data+0xf400a818>
    b220:	010000b4 	movhi	r4,2
    b224:	2103ef04 	addi	r4,r4,4028
    b228:	d9002815 	stw	r4,160(sp)
    b22c:	003e8706 	br	ac4c <__alt_mem_Flash_flash_data+0xf400ac4c>
    b230:	010000b4 	movhi	r4,2
    b234:	2103eb04 	addi	r4,r4,4012
    b238:	d9002215 	stw	r4,136(sp)
    b23c:	003ef606 	br	ae18 <__alt_mem_Flash_flash_data+0xf400ae18>
    b240:	8039883a 	mov	fp,r16
    b244:	dac01d83 	ldbu	r11,118(sp)
    b248:	ddc02315 	stw	r23,140(sp)
    b24c:	0021883a 	mov	r16,zero
    b250:	003cd906 	br	a5b8 <__alt_mem_Flash_flash_data+0xf400a5b8>
    b254:	002d883a 	mov	r22,zero
    b258:	003fdd06 	br	b1d0 <__alt_mem_Flash_flash_data+0xf400b1d0>
    b25c:	dac02317 	ldw	r11,140(sp)
    b260:	a805883a 	mov	r2,r21
    b264:	502b883a 	mov	r21,r10
    b268:	5c000017 	ldw	r16,0(r11)
    b26c:	59000104 	addi	r4,r11,4
    b270:	d9002315 	stw	r4,140(sp)
    b274:	803fae0e 	bge	r16,zero,b130 <__alt_mem_Flash_flash_data+0xf400b130>
    b278:	043fffc4 	movi	r16,-1
    b27c:	11000047 	ldb	r4,1(r2)
    b280:	003c4306 	br	a390 <__alt_mem_Flash_flash_data+0xf400a390>
    b284:	dac02917 	ldw	r11,164(sp)
    b288:	00800304 	movi	r2,12
    b28c:	58800015 	stw	r2,0(r11)
    b290:	00bfffc4 	movi	r2,-1
    b294:	003eb306 	br	ad64 <__alt_mem_Flash_flash_data+0xf400ad64>

0000b298 <__sprint_r.part.0>:
    b298:	28801917 	ldw	r2,100(r5)
    b29c:	defff604 	addi	sp,sp,-40
    b2a0:	dd400515 	stw	r21,20(sp)
    b2a4:	dcc00315 	stw	r19,12(sp)
    b2a8:	dfc00915 	stw	ra,36(sp)
    b2ac:	df000815 	stw	fp,32(sp)
    b2b0:	ddc00715 	stw	r23,28(sp)
    b2b4:	dd800615 	stw	r22,24(sp)
    b2b8:	dd000415 	stw	r20,16(sp)
    b2bc:	dc800215 	stw	r18,8(sp)
    b2c0:	dc400115 	stw	r17,4(sp)
    b2c4:	dc000015 	stw	r16,0(sp)
    b2c8:	1088000c 	andi	r2,r2,8192
    b2cc:	2827883a 	mov	r19,r5
    b2d0:	302b883a 	mov	r21,r6
    b2d4:	10002d26 	beq	r2,zero,b38c <__sprint_r.part.0+0xf4>
    b2d8:	30800217 	ldw	r2,8(r6)
    b2dc:	35800017 	ldw	r22,0(r6)
    b2e0:	10002826 	beq	r2,zero,b384 <__sprint_r.part.0+0xec>
    b2e4:	2029883a 	mov	r20,r4
    b2e8:	b5c00104 	addi	r23,r22,4
    b2ec:	04bfffc4 	movi	r18,-1
    b2f0:	bc400017 	ldw	r17,0(r23)
    b2f4:	b4000017 	ldw	r16,0(r22)
    b2f8:	0039883a 	mov	fp,zero
    b2fc:	8822d0ba 	srli	r17,r17,2
    b300:	04400316 	blt	zero,r17,b310 <__sprint_r.part.0+0x78>
    b304:	00001806 	br	b368 <__sprint_r.part.0+0xd0>
    b308:	84000104 	addi	r16,r16,4
    b30c:	8f001526 	beq	r17,fp,b364 <__sprint_r.part.0+0xcc>
    b310:	81400017 	ldw	r5,0(r16)
    b314:	a009883a 	mov	r4,r20
    b318:	980d883a 	mov	r6,r19
    b31c:	000cb280 	call	cb28 <_fputwc_r>
    b320:	e7000044 	addi	fp,fp,1
    b324:	14bff81e 	bne	r2,r18,b308 <__alt_mem_Flash_flash_data+0xf400b308>
    b328:	9005883a 	mov	r2,r18
    b32c:	a8000215 	stw	zero,8(r21)
    b330:	a8000115 	stw	zero,4(r21)
    b334:	dfc00917 	ldw	ra,36(sp)
    b338:	df000817 	ldw	fp,32(sp)
    b33c:	ddc00717 	ldw	r23,28(sp)
    b340:	dd800617 	ldw	r22,24(sp)
    b344:	dd400517 	ldw	r21,20(sp)
    b348:	dd000417 	ldw	r20,16(sp)
    b34c:	dcc00317 	ldw	r19,12(sp)
    b350:	dc800217 	ldw	r18,8(sp)
    b354:	dc400117 	ldw	r17,4(sp)
    b358:	dc000017 	ldw	r16,0(sp)
    b35c:	dec00a04 	addi	sp,sp,40
    b360:	f800283a 	ret
    b364:	a8800217 	ldw	r2,8(r21)
    b368:	8c63883a 	add	r17,r17,r17
    b36c:	8c63883a 	add	r17,r17,r17
    b370:	1445c83a 	sub	r2,r2,r17
    b374:	a8800215 	stw	r2,8(r21)
    b378:	b5800204 	addi	r22,r22,8
    b37c:	bdc00204 	addi	r23,r23,8
    b380:	103fdb1e 	bne	r2,zero,b2f0 <__alt_mem_Flash_flash_data+0xf400b2f0>
    b384:	0005883a 	mov	r2,zero
    b388:	003fe806 	br	b32c <__alt_mem_Flash_flash_data+0xf400b32c>
    b38c:	00073740 	call	7374 <__sfvwrite_r>
    b390:	003fe606 	br	b32c <__alt_mem_Flash_flash_data+0xf400b32c>

0000b394 <__sprint_r>:
    b394:	30c00217 	ldw	r3,8(r6)
    b398:	18000126 	beq	r3,zero,b3a0 <__sprint_r+0xc>
    b39c:	000b2981 	jmpi	b298 <__sprint_r.part.0>
    b3a0:	30000115 	stw	zero,4(r6)
    b3a4:	0005883a 	mov	r2,zero
    b3a8:	f800283a 	ret

0000b3ac <___vfiprintf_internal_r>:
    b3ac:	deffca04 	addi	sp,sp,-216
    b3b0:	dd803215 	stw	r22,200(sp)
    b3b4:	dd403115 	stw	r21,196(sp)
    b3b8:	dfc03515 	stw	ra,212(sp)
    b3bc:	df003415 	stw	fp,208(sp)
    b3c0:	ddc03315 	stw	r23,204(sp)
    b3c4:	dd003015 	stw	r20,192(sp)
    b3c8:	dcc02f15 	stw	r19,188(sp)
    b3cc:	dc802e15 	stw	r18,184(sp)
    b3d0:	dc402d15 	stw	r17,180(sp)
    b3d4:	dc002c15 	stw	r16,176(sp)
    b3d8:	d9002015 	stw	r4,128(sp)
    b3dc:	d9c02215 	stw	r7,136(sp)
    b3e0:	282b883a 	mov	r21,r5
    b3e4:	302d883a 	mov	r22,r6
    b3e8:	20000226 	beq	r4,zero,b3f4 <___vfiprintf_internal_r+0x48>
    b3ec:	20800e17 	ldw	r2,56(r4)
    b3f0:	1001b126 	beq	r2,zero,bab8 <___vfiprintf_internal_r+0x70c>
    b3f4:	a880030b 	ldhu	r2,12(r21)
    b3f8:	10c8000c 	andi	r3,r2,8192
    b3fc:	1800061e 	bne	r3,zero,b418 <___vfiprintf_internal_r+0x6c>
    b400:	a9001917 	ldw	r4,100(r21)
    b404:	00f7ffc4 	movi	r3,-8193
    b408:	10880014 	ori	r2,r2,8192
    b40c:	20c6703a 	and	r3,r4,r3
    b410:	a880030d 	sth	r2,12(r21)
    b414:	a8c01915 	stw	r3,100(r21)
    b418:	10c0020c 	andi	r3,r2,8
    b41c:	18018926 	beq	r3,zero,ba44 <___vfiprintf_internal_r+0x698>
    b420:	a8c00417 	ldw	r3,16(r21)
    b424:	18018726 	beq	r3,zero,ba44 <___vfiprintf_internal_r+0x698>
    b428:	1080068c 	andi	r2,r2,26
    b42c:	00c00284 	movi	r3,10
    b430:	10c18c26 	beq	r2,r3,ba64 <___vfiprintf_internal_r+0x6b8>
    b434:	d8801a04 	addi	r2,sp,104
    b438:	d8c019c4 	addi	r3,sp,103
    b43c:	070000b4 	movhi	fp,2
    b440:	05c000b4 	movhi	r23,2
    b444:	10c9c83a 	sub	r4,r2,r3
    b448:	e703f704 	addi	fp,fp,4060
    b44c:	bdc3f304 	addi	r23,r23,4044
    b450:	d8801e15 	stw	r2,120(sp)
    b454:	d8c01f15 	stw	r3,124(sp)
    b458:	dec01a15 	stw	sp,104(sp)
    b45c:	d8001c15 	stw	zero,112(sp)
    b460:	d8001b15 	stw	zero,108(sp)
    b464:	d8002615 	stw	zero,152(sp)
    b468:	d8002315 	stw	zero,140(sp)
    b46c:	d9002715 	stw	r4,156(sp)
    b470:	d811883a 	mov	r8,sp
    b474:	dd402115 	stw	r21,132(sp)
    b478:	b021883a 	mov	r16,r22
    b47c:	80800007 	ldb	r2,0(r16)
    b480:	10037226 	beq	r2,zero,c24c <___vfiprintf_internal_r+0xea0>
    b484:	01000944 	movi	r4,37
    b488:	11037026 	beq	r2,r4,c24c <___vfiprintf_internal_r+0xea0>
    b48c:	8005883a 	mov	r2,r16
    b490:	00000106 	br	b498 <___vfiprintf_internal_r+0xec>
    b494:	19000326 	beq	r3,r4,b4a4 <___vfiprintf_internal_r+0xf8>
    b498:	10800044 	addi	r2,r2,1
    b49c:	10c00007 	ldb	r3,0(r2)
    b4a0:	183ffc1e 	bne	r3,zero,b494 <__alt_mem_Flash_flash_data+0xf400b494>
    b4a4:	1425c83a 	sub	r18,r2,r16
    b4a8:	1023883a 	mov	r17,r2
    b4ac:	90001026 	beq	r18,zero,b4f0 <___vfiprintf_internal_r+0x144>
    b4b0:	d8c01c17 	ldw	r3,112(sp)
    b4b4:	d8801b17 	ldw	r2,108(sp)
    b4b8:	44000015 	stw	r16,0(r8)
    b4bc:	90c7883a 	add	r3,r18,r3
    b4c0:	10800044 	addi	r2,r2,1
    b4c4:	44800115 	stw	r18,4(r8)
    b4c8:	d8c01c15 	stw	r3,112(sp)
    b4cc:	d8801b15 	stw	r2,108(sp)
    b4d0:	010001c4 	movi	r4,7
    b4d4:	2080750e 	bge	r4,r2,b6ac <___vfiprintf_internal_r+0x300>
    b4d8:	18036f1e 	bne	r3,zero,c298 <___vfiprintf_internal_r+0xeec>
    b4dc:	d8802317 	ldw	r2,140(sp)
    b4e0:	d8001b15 	stw	zero,108(sp)
    b4e4:	d811883a 	mov	r8,sp
    b4e8:	1485883a 	add	r2,r2,r18
    b4ec:	d8802315 	stw	r2,140(sp)
    b4f0:	88800007 	ldb	r2,0(r17)
    b4f4:	10041026 	beq	r2,zero,c538 <___vfiprintf_internal_r+0x118c>
    b4f8:	88c00047 	ldb	r3,1(r17)
    b4fc:	88800044 	addi	r2,r17,1
    b500:	d8001d85 	stb	zero,118(sp)
    b504:	000f883a 	mov	r7,zero
    b508:	027fffc4 	movi	r9,-1
    b50c:	0025883a 	mov	r18,zero
    b510:	002b883a 	mov	r21,zero
    b514:	01401604 	movi	r5,88
    b518:	01800244 	movi	r6,9
    b51c:	03400a84 	movi	r13,42
    b520:	03001b04 	movi	r12,108
    b524:	14000044 	addi	r16,r2,1
    b528:	18bff804 	addi	r2,r3,-32
    b52c:	28825536 	bltu	r5,r2,be84 <___vfiprintf_internal_r+0xad8>
    b530:	100490ba 	slli	r2,r2,2
    b534:	01000074 	movhi	r4,1
    b538:	212d5204 	addi	r4,r4,-19128
    b53c:	1105883a 	add	r2,r2,r4
    b540:	10800017 	ldw	r2,0(r2)
    b544:	1000683a 	jmp	r2
    b548:	0000bc48 	cmpgei	zero,zero,753
    b54c:	0000be84 	movi	zero,762
    b550:	0000be84 	movi	zero,762
    b554:	0000bc68 	cmpgeui	zero,zero,753
    b558:	0000be84 	movi	zero,762
    b55c:	0000be84 	movi	zero,762
    b560:	0000be84 	movi	zero,762
    b564:	0000be84 	movi	zero,762
    b568:	0000be84 	movi	zero,762
    b56c:	0000be84 	movi	zero,762
    b570:	0000bc78 	rdprs	zero,zero,753
    b574:	0000bc98 	cmpnei	zero,zero,754
    b578:	0000be84 	movi	zero,762
    b57c:	0000bac0 	call	bac <putchar+0x4>
    b580:	0000bbac 	andhi	zero,zero,750
    b584:	0000be84 	movi	zero,762
    b588:	0000bb2c 	andhi	zero,zero,748
    b58c:	0000bb3c 	xorhi	zero,zero,748
    b590:	0000bb3c 	xorhi	zero,zero,748
    b594:	0000bb3c 	xorhi	zero,zero,748
    b598:	0000bb3c 	xorhi	zero,zero,748
    b59c:	0000bb3c 	xorhi	zero,zero,748
    b5a0:	0000bb3c 	xorhi	zero,zero,748
    b5a4:	0000bb3c 	xorhi	zero,zero,748
    b5a8:	0000bb3c 	xorhi	zero,zero,748
    b5ac:	0000bb3c 	xorhi	zero,zero,748
    b5b0:	0000be84 	movi	zero,762
    b5b4:	0000be84 	movi	zero,762
    b5b8:	0000be84 	movi	zero,762
    b5bc:	0000be84 	movi	zero,762
    b5c0:	0000be84 	movi	zero,762
    b5c4:	0000be84 	movi	zero,762
    b5c8:	0000be84 	movi	zero,762
    b5cc:	0000be84 	movi	zero,762
    b5d0:	0000be84 	movi	zero,762
    b5d4:	0000be84 	movi	zero,762
    b5d8:	0000bb68 	cmpgeui	zero,zero,749
    b5dc:	0000be84 	movi	zero,762
    b5e0:	0000be84 	movi	zero,762
    b5e4:	0000be84 	movi	zero,762
    b5e8:	0000be84 	movi	zero,762
    b5ec:	0000be84 	movi	zero,762
    b5f0:	0000be84 	movi	zero,762
    b5f4:	0000be84 	movi	zero,762
    b5f8:	0000be84 	movi	zero,762
    b5fc:	0000be84 	movi	zero,762
    b600:	0000be84 	movi	zero,762
    b604:	0000b6f4 	movhi	zero,731
    b608:	0000be84 	movi	zero,762
    b60c:	0000be84 	movi	zero,762
    b610:	0000be84 	movi	zero,762
    b614:	0000be84 	movi	zero,762
    b618:	0000be84 	movi	zero,762
    b61c:	0000b6c0 	call	b6c <printf+0x8>
    b620:	0000be84 	movi	zero,762
    b624:	0000be84 	movi	zero,762
    b628:	0000bd08 	cmpgei	zero,zero,756
    b62c:	0000be84 	movi	zero,762
    b630:	0000be84 	movi	zero,762
    b634:	0000be84 	movi	zero,762
    b638:	0000be84 	movi	zero,762
    b63c:	0000be84 	movi	zero,762
    b640:	0000be84 	movi	zero,762
    b644:	0000be84 	movi	zero,762
    b648:	0000be84 	movi	zero,762
    b64c:	0000be84 	movi	zero,762
    b650:	0000be84 	movi	zero,762
    b654:	0000bca8 	cmpgeui	zero,zero,754
    b658:	0000bcd4 	movui	zero,755
    b65c:	0000be84 	movi	zero,762
    b660:	0000be84 	movi	zero,762
    b664:	0000be84 	movi	zero,762
    b668:	0000bdb0 	cmpltui	zero,zero,758
    b66c:	0000bcd4 	movui	zero,755
    b670:	0000be84 	movi	zero,762
    b674:	0000be84 	movi	zero,762
    b678:	0000bdc0 	call	bdc <_puts_r+0x1c>
    b67c:	0000be84 	movi	zero,762
    b680:	0000bbec 	andhi	zero,zero,751
    b684:	0000b6f8 	rdprs	zero,zero,731
    b688:	0000bdd4 	movui	zero,759
    b68c:	0000be14 	movui	zero,760
    b690:	0000be84 	movi	zero,762
    b694:	0000bd5c 	xori	zero,zero,757
    b698:	0000be84 	movi	zero,762
    b69c:	0000b6c4 	movi	zero,731
    b6a0:	0000be84 	movi	zero,762
    b6a4:	0000be84 	movi	zero,762
    b6a8:	0000be24 	muli	zero,zero,760
    b6ac:	42000204 	addi	r8,r8,8
    b6b0:	d8802317 	ldw	r2,140(sp)
    b6b4:	1485883a 	add	r2,r2,r18
    b6b8:	d8802315 	stw	r2,140(sp)
    b6bc:	003f8c06 	br	b4f0 <__alt_mem_Flash_flash_data+0xf400b4f0>
    b6c0:	ad400414 	ori	r21,r21,16
    b6c4:	a880080c 	andi	r2,r21,32
    b6c8:	1001e61e 	bne	r2,zero,be64 <___vfiprintf_internal_r+0xab8>
    b6cc:	a880040c 	andi	r2,r21,16
    b6d0:	10034726 	beq	r2,zero,c3f0 <___vfiprintf_internal_r+0x1044>
    b6d4:	d8802217 	ldw	r2,136(sp)
    b6d8:	001b883a 	mov	r13,zero
    b6dc:	15800017 	ldw	r22,0(r2)
    b6e0:	10800104 	addi	r2,r2,4
    b6e4:	d8802215 	stw	r2,136(sp)
    b6e8:	b009883a 	mov	r4,r22
    b6ec:	00800044 	movi	r2,1
    b6f0:	00000c06 	br	b724 <___vfiprintf_internal_r+0x378>
    b6f4:	ad400414 	ori	r21,r21,16
    b6f8:	a880080c 	andi	r2,r21,32
    b6fc:	1001491e 	bne	r2,zero,bc24 <___vfiprintf_internal_r+0x878>
    b700:	a880040c 	andi	r2,r21,16
    b704:	10032d26 	beq	r2,zero,c3bc <___vfiprintf_internal_r+0x1010>
    b708:	d9002217 	ldw	r4,136(sp)
    b70c:	001b883a 	mov	r13,zero
    b710:	0005883a 	mov	r2,zero
    b714:	25800017 	ldw	r22,0(r4)
    b718:	21000104 	addi	r4,r4,4
    b71c:	d9002215 	stw	r4,136(sp)
    b720:	b009883a 	mov	r4,r22
    b724:	d8001d85 	stb	zero,118(sp)
    b728:	4827883a 	mov	r19,r9
    b72c:	001d883a 	mov	r14,zero
    b730:	48000216 	blt	r9,zero,b73c <___vfiprintf_internal_r+0x390>
    b734:	00ffdfc4 	movi	r3,-129
    b738:	a8ea703a 	and	r21,r21,r3
    b73c:	2002071e 	bne	r4,zero,bf5c <___vfiprintf_internal_r+0xbb0>
    b740:	4802ad26 	beq	r9,zero,c1f8 <___vfiprintf_internal_r+0xe4c>
    b744:	10803fcc 	andi	r2,r2,255
    b748:	00c00044 	movi	r3,1
    b74c:	10c22b26 	beq	r2,r3,bffc <___vfiprintf_internal_r+0xc50>
    b750:	00c00084 	movi	r3,2
    b754:	dd001a04 	addi	r20,sp,104
    b758:	10c0dd1e 	bne	r2,r3,bad0 <___vfiprintf_internal_r+0x724>
    b75c:	d9002617 	ldw	r4,152(sp)
    b760:	b08003cc 	andi	r2,r22,15
    b764:	6806973a 	slli	r3,r13,28
    b768:	2085883a 	add	r2,r4,r2
    b76c:	b02cd13a 	srli	r22,r22,4
    b770:	10800003 	ldbu	r2,0(r2)
    b774:	681ad13a 	srli	r13,r13,4
    b778:	a53fffc4 	addi	r20,r20,-1
    b77c:	1dacb03a 	or	r22,r3,r22
    b780:	a0800005 	stb	r2,0(r20)
    b784:	b344b03a 	or	r2,r22,r13
    b788:	103ff51e 	bne	r2,zero,b760 <__alt_mem_Flash_flash_data+0xf400b760>
    b78c:	d9001e17 	ldw	r4,120(sp)
    b790:	2527c83a 	sub	r19,r4,r20
    b794:	9823883a 	mov	r17,r19
    b798:	9a40010e 	bge	r19,r9,b7a0 <___vfiprintf_internal_r+0x3f4>
    b79c:	4823883a 	mov	r17,r9
    b7a0:	73803fcc 	andi	r14,r14,255
    b7a4:	7380201c 	xori	r14,r14,128
    b7a8:	73bfe004 	addi	r14,r14,-128
    b7ac:	70000126 	beq	r14,zero,b7b4 <___vfiprintf_internal_r+0x408>
    b7b0:	8c400044 	addi	r17,r17,1
    b7b4:	ab40008c 	andi	r13,r21,2
    b7b8:	68000126 	beq	r13,zero,b7c0 <___vfiprintf_internal_r+0x414>
    b7bc:	8c400084 	addi	r17,r17,2
    b7c0:	ad80210c 	andi	r22,r21,132
    b7c4:	b001c51e 	bne	r22,zero,bedc <___vfiprintf_internal_r+0xb30>
    b7c8:	9447c83a 	sub	r3,r18,r17
    b7cc:	00c1c30e 	bge	zero,r3,bedc <___vfiprintf_internal_r+0xb30>
    b7d0:	01c00404 	movi	r7,16
    b7d4:	d8801c17 	ldw	r2,112(sp)
    b7d8:	38c37b0e 	bge	r7,r3,c5c8 <___vfiprintf_internal_r+0x121c>
    b7dc:	010000b4 	movhi	r4,2
    b7e0:	2103f704 	addi	r4,r4,4060
    b7e4:	dc002915 	stw	r16,164(sp)
    b7e8:	d9801b17 	ldw	r6,108(sp)
    b7ec:	d9002415 	stw	r4,144(sp)
    b7f0:	03c001c4 	movi	r15,7
    b7f4:	da402515 	stw	r9,148(sp)
    b7f8:	db402815 	stw	r13,160(sp)
    b7fc:	1821883a 	mov	r16,r3
    b800:	00000506 	br	b818 <___vfiprintf_internal_r+0x46c>
    b804:	31400084 	addi	r5,r6,2
    b808:	42000204 	addi	r8,r8,8
    b80c:	200d883a 	mov	r6,r4
    b810:	843ffc04 	addi	r16,r16,-16
    b814:	3c000d0e 	bge	r7,r16,b84c <___vfiprintf_internal_r+0x4a0>
    b818:	10800404 	addi	r2,r2,16
    b81c:	31000044 	addi	r4,r6,1
    b820:	47000015 	stw	fp,0(r8)
    b824:	41c00115 	stw	r7,4(r8)
    b828:	d8801c15 	stw	r2,112(sp)
    b82c:	d9001b15 	stw	r4,108(sp)
    b830:	793ff40e 	bge	r15,r4,b804 <__alt_mem_Flash_flash_data+0xf400b804>
    b834:	10019b1e 	bne	r2,zero,bea4 <___vfiprintf_internal_r+0xaf8>
    b838:	843ffc04 	addi	r16,r16,-16
    b83c:	000d883a 	mov	r6,zero
    b840:	01400044 	movi	r5,1
    b844:	d811883a 	mov	r8,sp
    b848:	3c3ff316 	blt	r7,r16,b818 <__alt_mem_Flash_flash_data+0xf400b818>
    b84c:	8007883a 	mov	r3,r16
    b850:	da402517 	ldw	r9,148(sp)
    b854:	db402817 	ldw	r13,160(sp)
    b858:	dc002917 	ldw	r16,164(sp)
    b85c:	d9002417 	ldw	r4,144(sp)
    b860:	1885883a 	add	r2,r3,r2
    b864:	40c00115 	stw	r3,4(r8)
    b868:	41000015 	stw	r4,0(r8)
    b86c:	d8801c15 	stw	r2,112(sp)
    b870:	d9401b15 	stw	r5,108(sp)
    b874:	00c001c4 	movi	r3,7
    b878:	19426a16 	blt	r3,r5,c224 <___vfiprintf_internal_r+0xe78>
    b87c:	d8c01d87 	ldb	r3,118(sp)
    b880:	42000204 	addi	r8,r8,8
    b884:	29000044 	addi	r4,r5,1
    b888:	1801991e 	bne	r3,zero,bef0 <___vfiprintf_internal_r+0xb44>
    b88c:	68000c26 	beq	r13,zero,b8c0 <___vfiprintf_internal_r+0x514>
    b890:	d8c01d04 	addi	r3,sp,116
    b894:	10800084 	addi	r2,r2,2
    b898:	40c00015 	stw	r3,0(r8)
    b89c:	00c00084 	movi	r3,2
    b8a0:	40c00115 	stw	r3,4(r8)
    b8a4:	d8801c15 	stw	r2,112(sp)
    b8a8:	d9001b15 	stw	r4,108(sp)
    b8ac:	00c001c4 	movi	r3,7
    b8b0:	19024c16 	blt	r3,r4,c1e4 <___vfiprintf_internal_r+0xe38>
    b8b4:	200b883a 	mov	r5,r4
    b8b8:	42000204 	addi	r8,r8,8
    b8bc:	21000044 	addi	r4,r4,1
    b8c0:	00c02004 	movi	r3,128
    b8c4:	b0c20126 	beq	r22,r3,c0cc <___vfiprintf_internal_r+0xd20>
    b8c8:	4cedc83a 	sub	r22,r9,r19
    b8cc:	0580230e 	bge	zero,r22,b95c <___vfiprintf_internal_r+0x5b0>
    b8d0:	01c00404 	movi	r7,16
    b8d4:	3d83140e 	bge	r7,r22,c528 <___vfiprintf_internal_r+0x117c>
    b8d8:	010000b4 	movhi	r4,2
    b8dc:	2103f304 	addi	r4,r4,4044
    b8e0:	d9002415 	stw	r4,144(sp)
    b8e4:	034001c4 	movi	r13,7
    b8e8:	00000506 	br	b900 <___vfiprintf_internal_r+0x554>
    b8ec:	29000084 	addi	r4,r5,2
    b8f0:	42000204 	addi	r8,r8,8
    b8f4:	180b883a 	mov	r5,r3
    b8f8:	b5bffc04 	addi	r22,r22,-16
    b8fc:	3d800d0e 	bge	r7,r22,b934 <___vfiprintf_internal_r+0x588>
    b900:	10800404 	addi	r2,r2,16
    b904:	28c00044 	addi	r3,r5,1
    b908:	45c00015 	stw	r23,0(r8)
    b90c:	41c00115 	stw	r7,4(r8)
    b910:	d8801c15 	stw	r2,112(sp)
    b914:	d8c01b15 	stw	r3,108(sp)
    b918:	68fff40e 	bge	r13,r3,b8ec <__alt_mem_Flash_flash_data+0xf400b8ec>
    b91c:	1001811e 	bne	r2,zero,bf24 <___vfiprintf_internal_r+0xb78>
    b920:	b5bffc04 	addi	r22,r22,-16
    b924:	01000044 	movi	r4,1
    b928:	000b883a 	mov	r5,zero
    b92c:	d811883a 	mov	r8,sp
    b930:	3dbff316 	blt	r7,r22,b900 <__alt_mem_Flash_flash_data+0xf400b900>
    b934:	d8c02417 	ldw	r3,144(sp)
    b938:	1585883a 	add	r2,r2,r22
    b93c:	45800115 	stw	r22,4(r8)
    b940:	40c00015 	stw	r3,0(r8)
    b944:	d8801c15 	stw	r2,112(sp)
    b948:	d9001b15 	stw	r4,108(sp)
    b94c:	00c001c4 	movi	r3,7
    b950:	1901d016 	blt	r3,r4,c094 <___vfiprintf_internal_r+0xce8>
    b954:	42000204 	addi	r8,r8,8
    b958:	21000044 	addi	r4,r4,1
    b95c:	14c5883a 	add	r2,r2,r19
    b960:	45000015 	stw	r20,0(r8)
    b964:	44c00115 	stw	r19,4(r8)
    b968:	d8801c15 	stw	r2,112(sp)
    b96c:	d9001b15 	stw	r4,108(sp)
    b970:	00c001c4 	movi	r3,7
    b974:	1901cf0e 	bge	r3,r4,c0b4 <___vfiprintf_internal_r+0xd08>
    b978:	1002361e 	bne	r2,zero,c254 <___vfiprintf_internal_r+0xea8>
    b97c:	d8001b15 	stw	zero,108(sp)
    b980:	aac0010c 	andi	r11,r21,4
    b984:	58002826 	beq	r11,zero,ba28 <___vfiprintf_internal_r+0x67c>
    b988:	9467c83a 	sub	r19,r18,r17
    b98c:	d811883a 	mov	r8,sp
    b990:	04c3340e 	bge	zero,r19,c664 <___vfiprintf_internal_r+0x12b8>
    b994:	01c00404 	movi	r7,16
    b998:	3cc31b0e 	bge	r7,r19,c608 <___vfiprintf_internal_r+0x125c>
    b99c:	00c000b4 	movhi	r3,2
    b9a0:	18c3f704 	addi	r3,r3,4060
    b9a4:	d9001b17 	ldw	r4,108(sp)
    b9a8:	d8c02415 	stw	r3,144(sp)
    b9ac:	382b883a 	mov	r21,r7
    b9b0:	050001c4 	movi	r20,7
    b9b4:	dd802017 	ldw	r22,128(sp)
    b9b8:	00000506 	br	b9d0 <___vfiprintf_internal_r+0x624>
    b9bc:	21400084 	addi	r5,r4,2
    b9c0:	42000204 	addi	r8,r8,8
    b9c4:	1809883a 	mov	r4,r3
    b9c8:	9cfffc04 	addi	r19,r19,-16
    b9cc:	acc00d0e 	bge	r21,r19,ba04 <___vfiprintf_internal_r+0x658>
    b9d0:	10800404 	addi	r2,r2,16
    b9d4:	20c00044 	addi	r3,r4,1
    b9d8:	47000015 	stw	fp,0(r8)
    b9dc:	45400115 	stw	r21,4(r8)
    b9e0:	d8801c15 	stw	r2,112(sp)
    b9e4:	d8c01b15 	stw	r3,108(sp)
    b9e8:	a0fff40e 	bge	r20,r3,b9bc <__alt_mem_Flash_flash_data+0xf400b9bc>
    b9ec:	10019f1e 	bne	r2,zero,c06c <___vfiprintf_internal_r+0xcc0>
    b9f0:	9cfffc04 	addi	r19,r19,-16
    b9f4:	01400044 	movi	r5,1
    b9f8:	0009883a 	mov	r4,zero
    b9fc:	d811883a 	mov	r8,sp
    ba00:	acfff316 	blt	r21,r19,b9d0 <__alt_mem_Flash_flash_data+0xf400b9d0>
    ba04:	d8c02417 	ldw	r3,144(sp)
    ba08:	14c5883a 	add	r2,r2,r19
    ba0c:	44c00115 	stw	r19,4(r8)
    ba10:	40c00015 	stw	r3,0(r8)
    ba14:	d8801c15 	stw	r2,112(sp)
    ba18:	d9401b15 	stw	r5,108(sp)
    ba1c:	00c001c4 	movi	r3,7
    ba20:	1941810e 	bge	r3,r5,c028 <___vfiprintf_internal_r+0xc7c>
    ba24:	10017a1e 	bne	r2,zero,c010 <___vfiprintf_internal_r+0xc64>
    ba28:	8c82a416 	blt	r17,r18,c4bc <___vfiprintf_internal_r+0x1110>
    ba2c:	d9002317 	ldw	r4,140(sp)
    ba30:	2449883a 	add	r4,r4,r17
    ba34:	d9002315 	stw	r4,140(sp)
    ba38:	d8001b15 	stw	zero,108(sp)
    ba3c:	d811883a 	mov	r8,sp
    ba40:	003e8e06 	br	b47c <__alt_mem_Flash_flash_data+0xf400b47c>
    ba44:	d9002017 	ldw	r4,128(sp)
    ba48:	a80b883a 	mov	r5,r21
    ba4c:	0004eb00 	call	4eb0 <__swsetup_r>
    ba50:	10000c1e 	bne	r2,zero,ba84 <___vfiprintf_internal_r+0x6d8>
    ba54:	a880030b 	ldhu	r2,12(r21)
    ba58:	00c00284 	movi	r3,10
    ba5c:	1080068c 	andi	r2,r2,26
    ba60:	10fe741e 	bne	r2,r3,b434 <__alt_mem_Flash_flash_data+0xf400b434>
    ba64:	a880038f 	ldh	r2,14(r21)
    ba68:	103e7216 	blt	r2,zero,b434 <__alt_mem_Flash_flash_data+0xf400b434>
    ba6c:	d9002017 	ldw	r4,128(sp)
    ba70:	d9c02217 	ldw	r7,136(sp)
    ba74:	a80b883a 	mov	r5,r21
    ba78:	b00d883a 	mov	r6,r22
    ba7c:	000c6a00 	call	c6a0 <__sbprintf>
    ba80:	00000106 	br	ba88 <___vfiprintf_internal_r+0x6dc>
    ba84:	00bfffc4 	movi	r2,-1
    ba88:	dfc03517 	ldw	ra,212(sp)
    ba8c:	df003417 	ldw	fp,208(sp)
    ba90:	ddc03317 	ldw	r23,204(sp)
    ba94:	dd803217 	ldw	r22,200(sp)
    ba98:	dd403117 	ldw	r21,196(sp)
    ba9c:	dd003017 	ldw	r20,192(sp)
    baa0:	dcc02f17 	ldw	r19,188(sp)
    baa4:	dc802e17 	ldw	r18,184(sp)
    baa8:	dc402d17 	ldw	r17,180(sp)
    baac:	dc002c17 	ldw	r16,176(sp)
    bab0:	dec03604 	addi	sp,sp,216
    bab4:	f800283a 	ret
    bab8:	0006f100 	call	6f10 <__sinit>
    babc:	003e4d06 	br	b3f4 <__alt_mem_Flash_flash_data+0xf400b3f4>
    bac0:	8005883a 	mov	r2,r16
    bac4:	ad400114 	ori	r21,r21,4
    bac8:	80c00007 	ldb	r3,0(r16)
    bacc:	003e9506 	br	b524 <__alt_mem_Flash_flash_data+0xf400b524>
    bad0:	b006d0fa 	srli	r3,r22,3
    bad4:	6808977a 	slli	r4,r13,29
    bad8:	681ad0fa 	srli	r13,r13,3
    badc:	b58001cc 	andi	r22,r22,7
    bae0:	b0800c04 	addi	r2,r22,48
    bae4:	a53fffc4 	addi	r20,r20,-1
    bae8:	20ecb03a 	or	r22,r4,r3
    baec:	a0800005 	stb	r2,0(r20)
    baf0:	b346b03a 	or	r3,r22,r13
    baf4:	183ff61e 	bne	r3,zero,bad0 <__alt_mem_Flash_flash_data+0xf400bad0>
    baf8:	a8c0004c 	andi	r3,r21,1
    bafc:	a009883a 	mov	r4,r20
    bb00:	18013b26 	beq	r3,zero,bff0 <___vfiprintf_internal_r+0xc44>
    bb04:	10803fcc 	andi	r2,r2,255
    bb08:	1080201c 	xori	r2,r2,128
    bb0c:	10bfe004 	addi	r2,r2,-128
    bb10:	00c00c04 	movi	r3,48
    bb14:	10ff1d26 	beq	r2,r3,b78c <__alt_mem_Flash_flash_data+0xf400b78c>
    bb18:	d8801e17 	ldw	r2,120(sp)
    bb1c:	a53fffc4 	addi	r20,r20,-1
    bb20:	20ffffc5 	stb	r3,-1(r4)
    bb24:	1527c83a 	sub	r19,r2,r20
    bb28:	003f1a06 	br	b794 <__alt_mem_Flash_flash_data+0xf400b794>
    bb2c:	ad402014 	ori	r21,r21,128
    bb30:	8005883a 	mov	r2,r16
    bb34:	80c00007 	ldb	r3,0(r16)
    bb38:	003e7a06 	br	b524 <__alt_mem_Flash_flash_data+0xf400b524>
    bb3c:	8005883a 	mov	r2,r16
    bb40:	0025883a 	mov	r18,zero
    bb44:	193ff404 	addi	r4,r3,-48
    bb48:	10c00007 	ldb	r3,0(r2)
    bb4c:	948002a4 	muli	r18,r18,10
    bb50:	84000044 	addi	r16,r16,1
    bb54:	8005883a 	mov	r2,r16
    bb58:	9125883a 	add	r18,r18,r4
    bb5c:	193ff404 	addi	r4,r3,-48
    bb60:	313ff92e 	bgeu	r6,r4,bb48 <__alt_mem_Flash_flash_data+0xf400bb48>
    bb64:	003e7006 	br	b528 <__alt_mem_Flash_flash_data+0xf400b528>
    bb68:	ad400414 	ori	r21,r21,16
    bb6c:	d9c01d85 	stb	r7,118(sp)
    bb70:	a880080c 	andi	r2,r21,32
    bb74:	d8c02217 	ldw	r3,136(sp)
    bb78:	10005a26 	beq	r2,zero,bce4 <___vfiprintf_internal_r+0x938>
    bb7c:	d9002217 	ldw	r4,136(sp)
    bb80:	18800117 	ldw	r2,4(r3)
    bb84:	1d800017 	ldw	r22,0(r3)
    bb88:	21000204 	addi	r4,r4,8
    bb8c:	d9002215 	stw	r4,136(sp)
    bb90:	101b883a 	mov	r13,r2
    bb94:	1001f416 	blt	r2,zero,c368 <___vfiprintf_internal_r+0xfbc>
    bb98:	db801d83 	ldbu	r14,118(sp)
    bb9c:	4827883a 	mov	r19,r9
    bba0:	00800044 	movi	r2,1
    bba4:	b348b03a 	or	r4,r22,r13
    bba8:	003ee106 	br	b730 <__alt_mem_Flash_flash_data+0xf400b730>
    bbac:	80c00007 	ldb	r3,0(r16)
    bbb0:	80800044 	addi	r2,r16,1
    bbb4:	1b42a326 	beq	r3,r13,c644 <___vfiprintf_internal_r+0x1298>
    bbb8:	193ff404 	addi	r4,r3,-48
    bbbc:	1021883a 	mov	r16,r2
    bbc0:	0013883a 	mov	r9,zero
    bbc4:	313e5836 	bltu	r6,r4,b528 <__alt_mem_Flash_flash_data+0xf400b528>
    bbc8:	80c00007 	ldb	r3,0(r16)
    bbcc:	4a4002a4 	muli	r9,r9,10
    bbd0:	84000044 	addi	r16,r16,1
    bbd4:	2253883a 	add	r9,r4,r9
    bbd8:	193ff404 	addi	r4,r3,-48
    bbdc:	313ffa2e 	bgeu	r6,r4,bbc8 <__alt_mem_Flash_flash_data+0xf400bbc8>
    bbe0:	483e510e 	bge	r9,zero,b528 <__alt_mem_Flash_flash_data+0xf400b528>
    bbe4:	027fffc4 	movi	r9,-1
    bbe8:	003e4f06 	br	b528 <__alt_mem_Flash_flash_data+0xf400b528>
    bbec:	d9c01d85 	stb	r7,118(sp)
    bbf0:	a880080c 	andi	r2,r21,32
    bbf4:	10020826 	beq	r2,zero,c418 <___vfiprintf_internal_r+0x106c>
    bbf8:	d8c02217 	ldw	r3,136(sp)
    bbfc:	d9002317 	ldw	r4,140(sp)
    bc00:	18800017 	ldw	r2,0(r3)
    bc04:	2007d7fa 	srai	r3,r4,31
    bc08:	d9002217 	ldw	r4,136(sp)
    bc0c:	10c00115 	stw	r3,4(r2)
    bc10:	21000104 	addi	r4,r4,4
    bc14:	d9002215 	stw	r4,136(sp)
    bc18:	d9002317 	ldw	r4,140(sp)
    bc1c:	11000015 	stw	r4,0(r2)
    bc20:	003e1606 	br	b47c <__alt_mem_Flash_flash_data+0xf400b47c>
    bc24:	d8802217 	ldw	r2,136(sp)
    bc28:	d8c02217 	ldw	r3,136(sp)
    bc2c:	15800017 	ldw	r22,0(r2)
    bc30:	13400117 	ldw	r13,4(r2)
    bc34:	18c00204 	addi	r3,r3,8
    bc38:	0005883a 	mov	r2,zero
    bc3c:	d8c02215 	stw	r3,136(sp)
    bc40:	b348b03a 	or	r4,r22,r13
    bc44:	003eb706 	br	b724 <__alt_mem_Flash_flash_data+0xf400b724>
    bc48:	38803fcc 	andi	r2,r7,255
    bc4c:	1080201c 	xori	r2,r2,128
    bc50:	10bfe004 	addi	r2,r2,-128
    bc54:	1001e31e 	bne	r2,zero,c3e4 <___vfiprintf_internal_r+0x1038>
    bc58:	8005883a 	mov	r2,r16
    bc5c:	01c00804 	movi	r7,32
    bc60:	80c00007 	ldb	r3,0(r16)
    bc64:	003e2f06 	br	b524 <__alt_mem_Flash_flash_data+0xf400b524>
    bc68:	ad400054 	ori	r21,r21,1
    bc6c:	8005883a 	mov	r2,r16
    bc70:	80c00007 	ldb	r3,0(r16)
    bc74:	003e2b06 	br	b524 <__alt_mem_Flash_flash_data+0xf400b524>
    bc78:	d8c02217 	ldw	r3,136(sp)
    bc7c:	1c800017 	ldw	r18,0(r3)
    bc80:	18c00104 	addi	r3,r3,4
    bc84:	90023816 	blt	r18,zero,c568 <___vfiprintf_internal_r+0x11bc>
    bc88:	d8c02215 	stw	r3,136(sp)
    bc8c:	8005883a 	mov	r2,r16
    bc90:	80c00007 	ldb	r3,0(r16)
    bc94:	003e2306 	br	b524 <__alt_mem_Flash_flash_data+0xf400b524>
    bc98:	8005883a 	mov	r2,r16
    bc9c:	01c00ac4 	movi	r7,43
    bca0:	80c00007 	ldb	r3,0(r16)
    bca4:	003e1f06 	br	b524 <__alt_mem_Flash_flash_data+0xf400b524>
    bca8:	d8c02217 	ldw	r3,136(sp)
    bcac:	04400044 	movi	r17,1
    bcb0:	d8001d85 	stb	zero,118(sp)
    bcb4:	18800017 	ldw	r2,0(r3)
    bcb8:	18c00104 	addi	r3,r3,4
    bcbc:	d8c02215 	stw	r3,136(sp)
    bcc0:	d8801005 	stb	r2,64(sp)
    bcc4:	8827883a 	mov	r19,r17
    bcc8:	dd001004 	addi	r20,sp,64
    bccc:	0013883a 	mov	r9,zero
    bcd0:	003eb806 	br	b7b4 <__alt_mem_Flash_flash_data+0xf400b7b4>
    bcd4:	d9c01d85 	stb	r7,118(sp)
    bcd8:	a880080c 	andi	r2,r21,32
    bcdc:	d8c02217 	ldw	r3,136(sp)
    bce0:	103fa61e 	bne	r2,zero,bb7c <__alt_mem_Flash_flash_data+0xf400bb7c>
    bce4:	a880040c 	andi	r2,r21,16
    bce8:	1001dd26 	beq	r2,zero,c460 <___vfiprintf_internal_r+0x10b4>
    bcec:	1d800017 	ldw	r22,0(r3)
    bcf0:	d8802217 	ldw	r2,136(sp)
    bcf4:	b01bd7fa 	srai	r13,r22,31
    bcf8:	10800104 	addi	r2,r2,4
    bcfc:	d8802215 	stw	r2,136(sp)
    bd00:	6805883a 	mov	r2,r13
    bd04:	003fa306 	br	bb94 <__alt_mem_Flash_flash_data+0xf400bb94>
    bd08:	008000b4 	movhi	r2,2
    bd0c:	10837d04 	addi	r2,r2,3572
    bd10:	d8802615 	stw	r2,152(sp)
    bd14:	d9c01d85 	stb	r7,118(sp)
    bd18:	a880080c 	andi	r2,r21,32
    bd1c:	10004726 	beq	r2,zero,be3c <___vfiprintf_internal_r+0xa90>
    bd20:	d9002217 	ldw	r4,136(sp)
    bd24:	25800017 	ldw	r22,0(r4)
    bd28:	23400117 	ldw	r13,4(r4)
    bd2c:	21000204 	addi	r4,r4,8
    bd30:	d9002215 	stw	r4,136(sp)
    bd34:	a880004c 	andi	r2,r21,1
    bd38:	10014e26 	beq	r2,zero,c274 <___vfiprintf_internal_r+0xec8>
    bd3c:	b348b03a 	or	r4,r22,r13
    bd40:	20019c26 	beq	r4,zero,c3b4 <___vfiprintf_internal_r+0x1008>
    bd44:	00800c04 	movi	r2,48
    bd48:	d8801d05 	stb	r2,116(sp)
    bd4c:	d8c01d45 	stb	r3,117(sp)
    bd50:	ad400094 	ori	r21,r21,2
    bd54:	00800084 	movi	r2,2
    bd58:	003e7206 	br	b724 <__alt_mem_Flash_flash_data+0xf400b724>
    bd5c:	d8c02217 	ldw	r3,136(sp)
    bd60:	d8001d85 	stb	zero,118(sp)
    bd64:	1d000017 	ldw	r20,0(r3)
    bd68:	1d800104 	addi	r22,r3,4
    bd6c:	a0021c26 	beq	r20,zero,c5e0 <___vfiprintf_internal_r+0x1234>
    bd70:	a009883a 	mov	r4,r20
    bd74:	48020016 	blt	r9,zero,c578 <___vfiprintf_internal_r+0x11cc>
    bd78:	480d883a 	mov	r6,r9
    bd7c:	000b883a 	mov	r5,zero
    bd80:	da002a15 	stw	r8,168(sp)
    bd84:	da402b15 	stw	r9,172(sp)
    bd88:	00083fc0 	call	83fc <memchr>
    bd8c:	da002a17 	ldw	r8,168(sp)
    bd90:	da402b17 	ldw	r9,172(sp)
    bd94:	10022226 	beq	r2,zero,c620 <___vfiprintf_internal_r+0x1274>
    bd98:	1527c83a 	sub	r19,r2,r20
    bd9c:	4cc1c916 	blt	r9,r19,c4c4 <___vfiprintf_internal_r+0x1118>
    bda0:	db801d83 	ldbu	r14,118(sp)
    bda4:	dd802215 	stw	r22,136(sp)
    bda8:	0013883a 	mov	r9,zero
    bdac:	003e7906 	br	b794 <__alt_mem_Flash_flash_data+0xf400b794>
    bdb0:	ad401014 	ori	r21,r21,64
    bdb4:	8005883a 	mov	r2,r16
    bdb8:	80c00007 	ldb	r3,0(r16)
    bdbc:	003dd906 	br	b524 <__alt_mem_Flash_flash_data+0xf400b524>
    bdc0:	80c00007 	ldb	r3,0(r16)
    bdc4:	8005883a 	mov	r2,r16
    bdc8:	1b01e326 	beq	r3,r12,c558 <___vfiprintf_internal_r+0x11ac>
    bdcc:	ad400414 	ori	r21,r21,16
    bdd0:	003dd406 	br	b524 <__alt_mem_Flash_flash_data+0xf400b524>
    bdd4:	d9002217 	ldw	r4,136(sp)
    bdd8:	00800c04 	movi	r2,48
    bddc:	d8801d05 	stb	r2,116(sp)
    bde0:	25800017 	ldw	r22,0(r4)
    bde4:	00801e04 	movi	r2,120
    bde8:	d8801d45 	stb	r2,117(sp)
    bdec:	008000b4 	movhi	r2,2
    bdf0:	21000104 	addi	r4,r4,4
    bdf4:	10838204 	addi	r2,r2,3592
    bdf8:	d9002215 	stw	r4,136(sp)
    bdfc:	d8802615 	stw	r2,152(sp)
    be00:	001b883a 	mov	r13,zero
    be04:	ad400094 	ori	r21,r21,2
    be08:	00800084 	movi	r2,2
    be0c:	b009883a 	mov	r4,r22
    be10:	003e4406 	br	b724 <__alt_mem_Flash_flash_data+0xf400b724>
    be14:	ad400814 	ori	r21,r21,32
    be18:	8005883a 	mov	r2,r16
    be1c:	80c00007 	ldb	r3,0(r16)
    be20:	003dc006 	br	b524 <__alt_mem_Flash_flash_data+0xf400b524>
    be24:	008000b4 	movhi	r2,2
    be28:	10838204 	addi	r2,r2,3592
    be2c:	d8802615 	stw	r2,152(sp)
    be30:	d9c01d85 	stb	r7,118(sp)
    be34:	a880080c 	andi	r2,r21,32
    be38:	103fb91e 	bne	r2,zero,bd20 <__alt_mem_Flash_flash_data+0xf400bd20>
    be3c:	a880040c 	andi	r2,r21,16
    be40:	10010f1e 	bne	r2,zero,c280 <___vfiprintf_internal_r+0xed4>
    be44:	a880100c 	andi	r2,r21,64
    be48:	10010d26 	beq	r2,zero,c280 <___vfiprintf_internal_r+0xed4>
    be4c:	d9002217 	ldw	r4,136(sp)
    be50:	001b883a 	mov	r13,zero
    be54:	2580000b 	ldhu	r22,0(r4)
    be58:	21000104 	addi	r4,r4,4
    be5c:	d9002215 	stw	r4,136(sp)
    be60:	003fb406 	br	bd34 <__alt_mem_Flash_flash_data+0xf400bd34>
    be64:	d9002217 	ldw	r4,136(sp)
    be68:	00800044 	movi	r2,1
    be6c:	25800017 	ldw	r22,0(r4)
    be70:	23400117 	ldw	r13,4(r4)
    be74:	21000204 	addi	r4,r4,8
    be78:	d9002215 	stw	r4,136(sp)
    be7c:	b348b03a 	or	r4,r22,r13
    be80:	003e2806 	br	b724 <__alt_mem_Flash_flash_data+0xf400b724>
    be84:	d9c01d85 	stb	r7,118(sp)
    be88:	1801ab26 	beq	r3,zero,c538 <___vfiprintf_internal_r+0x118c>
    be8c:	04400044 	movi	r17,1
    be90:	d8c01005 	stb	r3,64(sp)
    be94:	d8001d85 	stb	zero,118(sp)
    be98:	8827883a 	mov	r19,r17
    be9c:	dd001004 	addi	r20,sp,64
    bea0:	003f8a06 	br	bccc <__alt_mem_Flash_flash_data+0xf400bccc>
    bea4:	d9002017 	ldw	r4,128(sp)
    bea8:	d9402117 	ldw	r5,132(sp)
    beac:	d9801a04 	addi	r6,sp,104
    beb0:	d9c02b15 	stw	r7,172(sp)
    beb4:	dbc02a15 	stw	r15,168(sp)
    beb8:	000b2980 	call	b298 <__sprint_r.part.0>
    bebc:	d9c02b17 	ldw	r7,172(sp)
    bec0:	dbc02a17 	ldw	r15,168(sp)
    bec4:	1000631e 	bne	r2,zero,c054 <___vfiprintf_internal_r+0xca8>
    bec8:	d9801b17 	ldw	r6,108(sp)
    becc:	d8801c17 	ldw	r2,112(sp)
    bed0:	d811883a 	mov	r8,sp
    bed4:	31400044 	addi	r5,r6,1
    bed8:	003e4d06 	br	b810 <__alt_mem_Flash_flash_data+0xf400b810>
    bedc:	d9401b17 	ldw	r5,108(sp)
    bee0:	d8801c17 	ldw	r2,112(sp)
    bee4:	29000044 	addi	r4,r5,1
    bee8:	d8c01d87 	ldb	r3,118(sp)
    beec:	183e6726 	beq	r3,zero,b88c <__alt_mem_Flash_flash_data+0xf400b88c>
    bef0:	00c00044 	movi	r3,1
    bef4:	d9401d84 	addi	r5,sp,118
    bef8:	10c5883a 	add	r2,r2,r3
    befc:	41400015 	stw	r5,0(r8)
    bf00:	40c00115 	stw	r3,4(r8)
    bf04:	d8801c15 	stw	r2,112(sp)
    bf08:	d9001b15 	stw	r4,108(sp)
    bf0c:	014001c4 	movi	r5,7
    bf10:	2900ab16 	blt	r5,r4,c1c0 <___vfiprintf_internal_r+0xe14>
    bf14:	200b883a 	mov	r5,r4
    bf18:	42000204 	addi	r8,r8,8
    bf1c:	21000044 	addi	r4,r4,1
    bf20:	003e5a06 	br	b88c <__alt_mem_Flash_flash_data+0xf400b88c>
    bf24:	d9002017 	ldw	r4,128(sp)
    bf28:	d9402117 	ldw	r5,132(sp)
    bf2c:	d9801a04 	addi	r6,sp,104
    bf30:	d9c02b15 	stw	r7,172(sp)
    bf34:	db402a15 	stw	r13,168(sp)
    bf38:	000b2980 	call	b298 <__sprint_r.part.0>
    bf3c:	d9c02b17 	ldw	r7,172(sp)
    bf40:	db402a17 	ldw	r13,168(sp)
    bf44:	1000431e 	bne	r2,zero,c054 <___vfiprintf_internal_r+0xca8>
    bf48:	d9401b17 	ldw	r5,108(sp)
    bf4c:	d8801c17 	ldw	r2,112(sp)
    bf50:	d811883a 	mov	r8,sp
    bf54:	29000044 	addi	r4,r5,1
    bf58:	003e6706 	br	b8f8 <__alt_mem_Flash_flash_data+0xf400b8f8>
    bf5c:	10803fcc 	andi	r2,r2,255
    bf60:	00c00044 	movi	r3,1
    bf64:	10fdfa1e 	bne	r2,r3,b750 <__alt_mem_Flash_flash_data+0xf400b750>
    bf68:	6800021e 	bne	r13,zero,bf74 <___vfiprintf_internal_r+0xbc8>
    bf6c:	00800244 	movi	r2,9
    bf70:	1580222e 	bgeu	r2,r22,bffc <___vfiprintf_internal_r+0xc50>
    bf74:	dc802415 	stw	r18,144(sp)
    bf78:	dc002515 	stw	r16,148(sp)
    bf7c:	dc401a04 	addi	r17,sp,104
    bf80:	b021883a 	mov	r16,r22
    bf84:	4827883a 	mov	r19,r9
    bf88:	4029883a 	mov	r20,r8
    bf8c:	702d883a 	mov	r22,r14
    bf90:	6825883a 	mov	r18,r13
    bf94:	8009883a 	mov	r4,r16
    bf98:	900b883a 	mov	r5,r18
    bf9c:	01800284 	movi	r6,10
    bfa0:	000f883a 	mov	r7,zero
    bfa4:	000d6140 	call	d614 <__umoddi3>
    bfa8:	10800c04 	addi	r2,r2,48
    bfac:	8c7fffc4 	addi	r17,r17,-1
    bfb0:	8009883a 	mov	r4,r16
    bfb4:	900b883a 	mov	r5,r18
    bfb8:	01800284 	movi	r6,10
    bfbc:	000f883a 	mov	r7,zero
    bfc0:	88800005 	stb	r2,0(r17)
    bfc4:	000d0540 	call	d054 <__udivdi3>
    bfc8:	1021883a 	mov	r16,r2
    bfcc:	10c4b03a 	or	r2,r2,r3
    bfd0:	1825883a 	mov	r18,r3
    bfd4:	103fef1e 	bne	r2,zero,bf94 <__alt_mem_Flash_flash_data+0xf400bf94>
    bfd8:	dc802417 	ldw	r18,144(sp)
    bfdc:	dc002517 	ldw	r16,148(sp)
    bfe0:	a011883a 	mov	r8,r20
    bfe4:	9813883a 	mov	r9,r19
    bfe8:	b01d883a 	mov	r14,r22
    bfec:	8829883a 	mov	r20,r17
    bff0:	d8c01e17 	ldw	r3,120(sp)
    bff4:	1d27c83a 	sub	r19,r3,r20
    bff8:	003de606 	br	b794 <__alt_mem_Flash_flash_data+0xf400b794>
    bffc:	b5800c04 	addi	r22,r22,48
    c000:	dd8019c5 	stb	r22,103(sp)
    c004:	dcc02717 	ldw	r19,156(sp)
    c008:	dd0019c4 	addi	r20,sp,103
    c00c:	003de106 	br	b794 <__alt_mem_Flash_flash_data+0xf400b794>
    c010:	d9002017 	ldw	r4,128(sp)
    c014:	d9402117 	ldw	r5,132(sp)
    c018:	d9801a04 	addi	r6,sp,104
    c01c:	000b2980 	call	b298 <__sprint_r.part.0>
    c020:	10000c1e 	bne	r2,zero,c054 <___vfiprintf_internal_r+0xca8>
    c024:	d8801c17 	ldw	r2,112(sp)
    c028:	8c80010e 	bge	r17,r18,c030 <___vfiprintf_internal_r+0xc84>
    c02c:	9023883a 	mov	r17,r18
    c030:	d8c02317 	ldw	r3,140(sp)
    c034:	1c47883a 	add	r3,r3,r17
    c038:	d8c02315 	stw	r3,140(sp)
    c03c:	103e7e26 	beq	r2,zero,ba38 <__alt_mem_Flash_flash_data+0xf400ba38>
    c040:	d9002017 	ldw	r4,128(sp)
    c044:	d9402117 	ldw	r5,132(sp)
    c048:	d9801a04 	addi	r6,sp,104
    c04c:	000b2980 	call	b298 <__sprint_r.part.0>
    c050:	103e7926 	beq	r2,zero,ba38 <__alt_mem_Flash_flash_data+0xf400ba38>
    c054:	dd402117 	ldw	r21,132(sp)
    c058:	a880030b 	ldhu	r2,12(r21)
    c05c:	1080100c 	andi	r2,r2,64
    c060:	103e881e 	bne	r2,zero,ba84 <__alt_mem_Flash_flash_data+0xf400ba84>
    c064:	d8802317 	ldw	r2,140(sp)
    c068:	003e8706 	br	ba88 <__alt_mem_Flash_flash_data+0xf400ba88>
    c06c:	d9402117 	ldw	r5,132(sp)
    c070:	b009883a 	mov	r4,r22
    c074:	d9801a04 	addi	r6,sp,104
    c078:	000b2980 	call	b298 <__sprint_r.part.0>
    c07c:	103ff51e 	bne	r2,zero,c054 <__alt_mem_Flash_flash_data+0xf400c054>
    c080:	d9001b17 	ldw	r4,108(sp)
    c084:	d8801c17 	ldw	r2,112(sp)
    c088:	d811883a 	mov	r8,sp
    c08c:	21400044 	addi	r5,r4,1
    c090:	003e4d06 	br	b9c8 <__alt_mem_Flash_flash_data+0xf400b9c8>
    c094:	1000aa1e 	bne	r2,zero,c340 <___vfiprintf_internal_r+0xf94>
    c098:	00c00044 	movi	r3,1
    c09c:	9805883a 	mov	r2,r19
    c0a0:	dd000015 	stw	r20,0(sp)
    c0a4:	dcc00115 	stw	r19,4(sp)
    c0a8:	dcc01c15 	stw	r19,112(sp)
    c0ac:	d8c01b15 	stw	r3,108(sp)
    c0b0:	d811883a 	mov	r8,sp
    c0b4:	42000204 	addi	r8,r8,8
    c0b8:	aac0010c 	andi	r11,r21,4
    c0bc:	583fda26 	beq	r11,zero,c028 <__alt_mem_Flash_flash_data+0xf400c028>
    c0c0:	9467c83a 	sub	r19,r18,r17
    c0c4:	04fe3316 	blt	zero,r19,b994 <__alt_mem_Flash_flash_data+0xf400b994>
    c0c8:	003fd706 	br	c028 <__alt_mem_Flash_flash_data+0xf400c028>
    c0cc:	946dc83a 	sub	r22,r18,r17
    c0d0:	05bdfd0e 	bge	zero,r22,b8c8 <__alt_mem_Flash_flash_data+0xf400b8c8>
    c0d4:	00c000b4 	movhi	r3,2
    c0d8:	18c3f304 	addi	r3,r3,4044
    c0dc:	01c00404 	movi	r7,16
    c0e0:	d8c02415 	stw	r3,144(sp)
    c0e4:	3d81530e 	bge	r7,r22,c634 <___vfiprintf_internal_r+0x1288>
    c0e8:	8007883a 	mov	r3,r16
    c0ec:	034001c4 	movi	r13,7
    c0f0:	b021883a 	mov	r16,r22
    c0f4:	da402515 	stw	r9,148(sp)
    c0f8:	182d883a 	mov	r22,r3
    c0fc:	00000506 	br	c114 <___vfiprintf_internal_r+0xd68>
    c100:	29800084 	addi	r6,r5,2
    c104:	42000204 	addi	r8,r8,8
    c108:	180b883a 	mov	r5,r3
    c10c:	843ffc04 	addi	r16,r16,-16
    c110:	3c000d0e 	bge	r7,r16,c148 <___vfiprintf_internal_r+0xd9c>
    c114:	10800404 	addi	r2,r2,16
    c118:	28c00044 	addi	r3,r5,1
    c11c:	45c00015 	stw	r23,0(r8)
    c120:	41c00115 	stw	r7,4(r8)
    c124:	d8801c15 	stw	r2,112(sp)
    c128:	d8c01b15 	stw	r3,108(sp)
    c12c:	68fff40e 	bge	r13,r3,c100 <__alt_mem_Flash_flash_data+0xf400c100>
    c130:	1000151e 	bne	r2,zero,c188 <___vfiprintf_internal_r+0xddc>
    c134:	843ffc04 	addi	r16,r16,-16
    c138:	01800044 	movi	r6,1
    c13c:	000b883a 	mov	r5,zero
    c140:	d811883a 	mov	r8,sp
    c144:	3c3ff316 	blt	r7,r16,c114 <__alt_mem_Flash_flash_data+0xf400c114>
    c148:	da402517 	ldw	r9,148(sp)
    c14c:	b007883a 	mov	r3,r22
    c150:	802d883a 	mov	r22,r16
    c154:	1821883a 	mov	r16,r3
    c158:	d8c02417 	ldw	r3,144(sp)
    c15c:	1585883a 	add	r2,r2,r22
    c160:	45800115 	stw	r22,4(r8)
    c164:	40c00015 	stw	r3,0(r8)
    c168:	d8801c15 	stw	r2,112(sp)
    c16c:	d9801b15 	stw	r6,108(sp)
    c170:	00c001c4 	movi	r3,7
    c174:	19806d16 	blt	r3,r6,c32c <___vfiprintf_internal_r+0xf80>
    c178:	42000204 	addi	r8,r8,8
    c17c:	31000044 	addi	r4,r6,1
    c180:	300b883a 	mov	r5,r6
    c184:	003dd006 	br	b8c8 <__alt_mem_Flash_flash_data+0xf400b8c8>
    c188:	d9002017 	ldw	r4,128(sp)
    c18c:	d9402117 	ldw	r5,132(sp)
    c190:	d9801a04 	addi	r6,sp,104
    c194:	d9c02b15 	stw	r7,172(sp)
    c198:	db402a15 	stw	r13,168(sp)
    c19c:	000b2980 	call	b298 <__sprint_r.part.0>
    c1a0:	d9c02b17 	ldw	r7,172(sp)
    c1a4:	db402a17 	ldw	r13,168(sp)
    c1a8:	103faa1e 	bne	r2,zero,c054 <__alt_mem_Flash_flash_data+0xf400c054>
    c1ac:	d9401b17 	ldw	r5,108(sp)
    c1b0:	d8801c17 	ldw	r2,112(sp)
    c1b4:	d811883a 	mov	r8,sp
    c1b8:	29800044 	addi	r6,r5,1
    c1bc:	003fd306 	br	c10c <__alt_mem_Flash_flash_data+0xf400c10c>
    c1c0:	1000401e 	bne	r2,zero,c2c4 <___vfiprintf_internal_r+0xf18>
    c1c4:	68003b26 	beq	r13,zero,c2b4 <___vfiprintf_internal_r+0xf08>
    c1c8:	d9001d04 	addi	r4,sp,116
    c1cc:	00800084 	movi	r2,2
    c1d0:	d9000015 	stw	r4,0(sp)
    c1d4:	d8800115 	stw	r2,4(sp)
    c1d8:	1809883a 	mov	r4,r3
    c1dc:	d811883a 	mov	r8,sp
    c1e0:	003db406 	br	b8b4 <__alt_mem_Flash_flash_data+0xf400b8b4>
    c1e4:	1000451e 	bne	r2,zero,c2fc <___vfiprintf_internal_r+0xf50>
    c1e8:	01000044 	movi	r4,1
    c1ec:	000b883a 	mov	r5,zero
    c1f0:	d811883a 	mov	r8,sp
    c1f4:	003db206 	br	b8c0 <__alt_mem_Flash_flash_data+0xf400b8c0>
    c1f8:	10803fcc 	andi	r2,r2,255
    c1fc:	1000071e 	bne	r2,zero,c21c <___vfiprintf_internal_r+0xe70>
    c200:	a880004c 	andi	r2,r21,1
    c204:	10000526 	beq	r2,zero,c21c <___vfiprintf_internal_r+0xe70>
    c208:	00800c04 	movi	r2,48
    c20c:	d88019c5 	stb	r2,103(sp)
    c210:	dcc02717 	ldw	r19,156(sp)
    c214:	dd0019c4 	addi	r20,sp,103
    c218:	003d5e06 	br	b794 <__alt_mem_Flash_flash_data+0xf400b794>
    c21c:	dd001a04 	addi	r20,sp,104
    c220:	003d5c06 	br	b794 <__alt_mem_Flash_flash_data+0xf400b794>
    c224:	1000971e 	bne	r2,zero,c484 <___vfiprintf_internal_r+0x10d8>
    c228:	d8c01d87 	ldb	r3,118(sp)
    c22c:	18005826 	beq	r3,zero,c390 <___vfiprintf_internal_r+0xfe4>
    c230:	00800044 	movi	r2,1
    c234:	d8c01d84 	addi	r3,sp,118
    c238:	1009883a 	mov	r4,r2
    c23c:	d8c00015 	stw	r3,0(sp)
    c240:	d8800115 	stw	r2,4(sp)
    c244:	d811883a 	mov	r8,sp
    c248:	003f3206 	br	bf14 <__alt_mem_Flash_flash_data+0xf400bf14>
    c24c:	8023883a 	mov	r17,r16
    c250:	003ca706 	br	b4f0 <__alt_mem_Flash_flash_data+0xf400b4f0>
    c254:	d9002017 	ldw	r4,128(sp)
    c258:	d9402117 	ldw	r5,132(sp)
    c25c:	d9801a04 	addi	r6,sp,104
    c260:	000b2980 	call	b298 <__sprint_r.part.0>
    c264:	103f7b1e 	bne	r2,zero,c054 <__alt_mem_Flash_flash_data+0xf400c054>
    c268:	d8801c17 	ldw	r2,112(sp)
    c26c:	d811883a 	mov	r8,sp
    c270:	003f9106 	br	c0b8 <__alt_mem_Flash_flash_data+0xf400c0b8>
    c274:	00800084 	movi	r2,2
    c278:	b348b03a 	or	r4,r22,r13
    c27c:	003d2906 	br	b724 <__alt_mem_Flash_flash_data+0xf400b724>
    c280:	d8802217 	ldw	r2,136(sp)
    c284:	001b883a 	mov	r13,zero
    c288:	15800017 	ldw	r22,0(r2)
    c28c:	10800104 	addi	r2,r2,4
    c290:	d8802215 	stw	r2,136(sp)
    c294:	003ea706 	br	bd34 <__alt_mem_Flash_flash_data+0xf400bd34>
    c298:	d9002017 	ldw	r4,128(sp)
    c29c:	d9402117 	ldw	r5,132(sp)
    c2a0:	d9801a04 	addi	r6,sp,104
    c2a4:	000b2980 	call	b298 <__sprint_r.part.0>
    c2a8:	103f6a1e 	bne	r2,zero,c054 <__alt_mem_Flash_flash_data+0xf400c054>
    c2ac:	d811883a 	mov	r8,sp
    c2b0:	003cff06 	br	b6b0 <__alt_mem_Flash_flash_data+0xf400b6b0>
    c2b4:	000b883a 	mov	r5,zero
    c2b8:	1809883a 	mov	r4,r3
    c2bc:	d811883a 	mov	r8,sp
    c2c0:	003d7f06 	br	b8c0 <__alt_mem_Flash_flash_data+0xf400b8c0>
    c2c4:	d9002017 	ldw	r4,128(sp)
    c2c8:	d9402117 	ldw	r5,132(sp)
    c2cc:	d9801a04 	addi	r6,sp,104
    c2d0:	da402b15 	stw	r9,172(sp)
    c2d4:	db402a15 	stw	r13,168(sp)
    c2d8:	000b2980 	call	b298 <__sprint_r.part.0>
    c2dc:	da402b17 	ldw	r9,172(sp)
    c2e0:	db402a17 	ldw	r13,168(sp)
    c2e4:	103f5b1e 	bne	r2,zero,c054 <__alt_mem_Flash_flash_data+0xf400c054>
    c2e8:	d9401b17 	ldw	r5,108(sp)
    c2ec:	d8801c17 	ldw	r2,112(sp)
    c2f0:	d811883a 	mov	r8,sp
    c2f4:	29000044 	addi	r4,r5,1
    c2f8:	003d6406 	br	b88c <__alt_mem_Flash_flash_data+0xf400b88c>
    c2fc:	d9002017 	ldw	r4,128(sp)
    c300:	d9402117 	ldw	r5,132(sp)
    c304:	d9801a04 	addi	r6,sp,104
    c308:	da402b15 	stw	r9,172(sp)
    c30c:	000b2980 	call	b298 <__sprint_r.part.0>
    c310:	da402b17 	ldw	r9,172(sp)
    c314:	103f4f1e 	bne	r2,zero,c054 <__alt_mem_Flash_flash_data+0xf400c054>
    c318:	d9401b17 	ldw	r5,108(sp)
    c31c:	d8801c17 	ldw	r2,112(sp)
    c320:	d811883a 	mov	r8,sp
    c324:	29000044 	addi	r4,r5,1
    c328:	003d6506 	br	b8c0 <__alt_mem_Flash_flash_data+0xf400b8c0>
    c32c:	10009a1e 	bne	r2,zero,c598 <___vfiprintf_internal_r+0x11ec>
    c330:	01000044 	movi	r4,1
    c334:	000b883a 	mov	r5,zero
    c338:	d811883a 	mov	r8,sp
    c33c:	003d6206 	br	b8c8 <__alt_mem_Flash_flash_data+0xf400b8c8>
    c340:	d9002017 	ldw	r4,128(sp)
    c344:	d9402117 	ldw	r5,132(sp)
    c348:	d9801a04 	addi	r6,sp,104
    c34c:	000b2980 	call	b298 <__sprint_r.part.0>
    c350:	103f401e 	bne	r2,zero,c054 <__alt_mem_Flash_flash_data+0xf400c054>
    c354:	d9001b17 	ldw	r4,108(sp)
    c358:	d8801c17 	ldw	r2,112(sp)
    c35c:	d811883a 	mov	r8,sp
    c360:	21000044 	addi	r4,r4,1
    c364:	003d7d06 	br	b95c <__alt_mem_Flash_flash_data+0xf400b95c>
    c368:	05adc83a 	sub	r22,zero,r22
    c36c:	b004c03a 	cmpne	r2,r22,zero
    c370:	035bc83a 	sub	r13,zero,r13
    c374:	689bc83a 	sub	r13,r13,r2
    c378:	03800b44 	movi	r14,45
    c37c:	db801d85 	stb	r14,118(sp)
    c380:	4827883a 	mov	r19,r9
    c384:	00800044 	movi	r2,1
    c388:	b348b03a 	or	r4,r22,r13
    c38c:	003ce806 	br	b730 <__alt_mem_Flash_flash_data+0xf400b730>
    c390:	000b883a 	mov	r5,zero
    c394:	01000044 	movi	r4,1
    c398:	d811883a 	mov	r8,sp
    c39c:	683d4826 	beq	r13,zero,b8c0 <__alt_mem_Flash_flash_data+0xf400b8c0>
    c3a0:	00800084 	movi	r2,2
    c3a4:	d8c01d04 	addi	r3,sp,116
    c3a8:	d8c00015 	stw	r3,0(sp)
    c3ac:	d8800115 	stw	r2,4(sp)
    c3b0:	003d4006 	br	b8b4 <__alt_mem_Flash_flash_data+0xf400b8b4>
    c3b4:	00800084 	movi	r2,2
    c3b8:	003cda06 	br	b724 <__alt_mem_Flash_flash_data+0xf400b724>
    c3bc:	a880100c 	andi	r2,r21,64
    c3c0:	10004226 	beq	r2,zero,c4cc <___vfiprintf_internal_r+0x1120>
    c3c4:	d8802217 	ldw	r2,136(sp)
    c3c8:	001b883a 	mov	r13,zero
    c3cc:	1580000b 	ldhu	r22,0(r2)
    c3d0:	10800104 	addi	r2,r2,4
    c3d4:	d8802215 	stw	r2,136(sp)
    c3d8:	b009883a 	mov	r4,r22
    c3dc:	0005883a 	mov	r2,zero
    c3e0:	003cd006 	br	b724 <__alt_mem_Flash_flash_data+0xf400b724>
    c3e4:	80c00007 	ldb	r3,0(r16)
    c3e8:	8005883a 	mov	r2,r16
    c3ec:	003c4d06 	br	b524 <__alt_mem_Flash_flash_data+0xf400b524>
    c3f0:	a880100c 	andi	r2,r21,64
    c3f4:	10004426 	beq	r2,zero,c508 <___vfiprintf_internal_r+0x115c>
    c3f8:	d8c02217 	ldw	r3,136(sp)
    c3fc:	001b883a 	mov	r13,zero
    c400:	00800044 	movi	r2,1
    c404:	1d80000b 	ldhu	r22,0(r3)
    c408:	18c00104 	addi	r3,r3,4
    c40c:	d8c02215 	stw	r3,136(sp)
    c410:	b009883a 	mov	r4,r22
    c414:	003cc306 	br	b724 <__alt_mem_Flash_flash_data+0xf400b724>
    c418:	a880040c 	andi	r2,r21,16
    c41c:	1000091e 	bne	r2,zero,c444 <___vfiprintf_internal_r+0x1098>
    c420:	aac0100c 	andi	r11,r21,64
    c424:	58000726 	beq	r11,zero,c444 <___vfiprintf_internal_r+0x1098>
    c428:	d8c02217 	ldw	r3,136(sp)
    c42c:	d9002317 	ldw	r4,140(sp)
    c430:	18800017 	ldw	r2,0(r3)
    c434:	18c00104 	addi	r3,r3,4
    c438:	d8c02215 	stw	r3,136(sp)
    c43c:	1100000d 	sth	r4,0(r2)
    c440:	003c0e06 	br	b47c <__alt_mem_Flash_flash_data+0xf400b47c>
    c444:	d8c02217 	ldw	r3,136(sp)
    c448:	d9002317 	ldw	r4,140(sp)
    c44c:	18800017 	ldw	r2,0(r3)
    c450:	18c00104 	addi	r3,r3,4
    c454:	d8c02215 	stw	r3,136(sp)
    c458:	11000015 	stw	r4,0(r2)
    c45c:	003c0706 	br	b47c <__alt_mem_Flash_flash_data+0xf400b47c>
    c460:	a880100c 	andi	r2,r21,64
    c464:	10002126 	beq	r2,zero,c4ec <___vfiprintf_internal_r+0x1140>
    c468:	1d80000f 	ldh	r22,0(r3)
    c46c:	d8c02217 	ldw	r3,136(sp)
    c470:	b01bd7fa 	srai	r13,r22,31
    c474:	18c00104 	addi	r3,r3,4
    c478:	d8c02215 	stw	r3,136(sp)
    c47c:	6805883a 	mov	r2,r13
    c480:	003dc406 	br	bb94 <__alt_mem_Flash_flash_data+0xf400bb94>
    c484:	d9002017 	ldw	r4,128(sp)
    c488:	d9402117 	ldw	r5,132(sp)
    c48c:	d9801a04 	addi	r6,sp,104
    c490:	da402b15 	stw	r9,172(sp)
    c494:	db402a15 	stw	r13,168(sp)
    c498:	000b2980 	call	b298 <__sprint_r.part.0>
    c49c:	da402b17 	ldw	r9,172(sp)
    c4a0:	db402a17 	ldw	r13,168(sp)
    c4a4:	103eeb1e 	bne	r2,zero,c054 <__alt_mem_Flash_flash_data+0xf400c054>
    c4a8:	d9401b17 	ldw	r5,108(sp)
    c4ac:	d8801c17 	ldw	r2,112(sp)
    c4b0:	d811883a 	mov	r8,sp
    c4b4:	29000044 	addi	r4,r5,1
    c4b8:	003e8b06 	br	bee8 <__alt_mem_Flash_flash_data+0xf400bee8>
    c4bc:	9023883a 	mov	r17,r18
    c4c0:	003d5a06 	br	ba2c <__alt_mem_Flash_flash_data+0xf400ba2c>
    c4c4:	4827883a 	mov	r19,r9
    c4c8:	003e3506 	br	bda0 <__alt_mem_Flash_flash_data+0xf400bda0>
    c4cc:	d8c02217 	ldw	r3,136(sp)
    c4d0:	001b883a 	mov	r13,zero
    c4d4:	0005883a 	mov	r2,zero
    c4d8:	1d800017 	ldw	r22,0(r3)
    c4dc:	18c00104 	addi	r3,r3,4
    c4e0:	d8c02215 	stw	r3,136(sp)
    c4e4:	b009883a 	mov	r4,r22
    c4e8:	003c8e06 	br	b724 <__alt_mem_Flash_flash_data+0xf400b724>
    c4ec:	1d800017 	ldw	r22,0(r3)
    c4f0:	d9002217 	ldw	r4,136(sp)
    c4f4:	b01bd7fa 	srai	r13,r22,31
    c4f8:	21000104 	addi	r4,r4,4
    c4fc:	d9002215 	stw	r4,136(sp)
    c500:	6805883a 	mov	r2,r13
    c504:	003da306 	br	bb94 <__alt_mem_Flash_flash_data+0xf400bb94>
    c508:	d9002217 	ldw	r4,136(sp)
    c50c:	001b883a 	mov	r13,zero
    c510:	00800044 	movi	r2,1
    c514:	25800017 	ldw	r22,0(r4)
    c518:	21000104 	addi	r4,r4,4
    c51c:	d9002215 	stw	r4,136(sp)
    c520:	b009883a 	mov	r4,r22
    c524:	003c7f06 	br	b724 <__alt_mem_Flash_flash_data+0xf400b724>
    c528:	00c000b4 	movhi	r3,2
    c52c:	18c3f304 	addi	r3,r3,4044
    c530:	d8c02415 	stw	r3,144(sp)
    c534:	003cff06 	br	b934 <__alt_mem_Flash_flash_data+0xf400b934>
    c538:	d8801c17 	ldw	r2,112(sp)
    c53c:	dd402117 	ldw	r21,132(sp)
    c540:	103ec526 	beq	r2,zero,c058 <__alt_mem_Flash_flash_data+0xf400c058>
    c544:	d9002017 	ldw	r4,128(sp)
    c548:	a80b883a 	mov	r5,r21
    c54c:	d9801a04 	addi	r6,sp,104
    c550:	000b2980 	call	b298 <__sprint_r.part.0>
    c554:	003ec006 	br	c058 <__alt_mem_Flash_flash_data+0xf400c058>
    c558:	80800044 	addi	r2,r16,1
    c55c:	ad400814 	ori	r21,r21,32
    c560:	80c00047 	ldb	r3,1(r16)
    c564:	003bef06 	br	b524 <__alt_mem_Flash_flash_data+0xf400b524>
    c568:	04a5c83a 	sub	r18,zero,r18
    c56c:	8005883a 	mov	r2,r16
    c570:	d8c02215 	stw	r3,136(sp)
    c574:	003d5306 	br	bac4 <__alt_mem_Flash_flash_data+0xf400bac4>
    c578:	da002a15 	stw	r8,168(sp)
    c57c:	0000e580 	call	e58 <strlen>
    c580:	1027883a 	mov	r19,r2
    c584:	db801d83 	ldbu	r14,118(sp)
    c588:	dd802215 	stw	r22,136(sp)
    c58c:	0013883a 	mov	r9,zero
    c590:	da002a17 	ldw	r8,168(sp)
    c594:	003c7f06 	br	b794 <__alt_mem_Flash_flash_data+0xf400b794>
    c598:	d9002017 	ldw	r4,128(sp)
    c59c:	d9402117 	ldw	r5,132(sp)
    c5a0:	d9801a04 	addi	r6,sp,104
    c5a4:	da402b15 	stw	r9,172(sp)
    c5a8:	000b2980 	call	b298 <__sprint_r.part.0>
    c5ac:	da402b17 	ldw	r9,172(sp)
    c5b0:	103ea81e 	bne	r2,zero,c054 <__alt_mem_Flash_flash_data+0xf400c054>
    c5b4:	d9401b17 	ldw	r5,108(sp)
    c5b8:	d8801c17 	ldw	r2,112(sp)
    c5bc:	d811883a 	mov	r8,sp
    c5c0:	29000044 	addi	r4,r5,1
    c5c4:	003cc006 	br	b8c8 <__alt_mem_Flash_flash_data+0xf400b8c8>
    c5c8:	d9401b17 	ldw	r5,108(sp)
    c5cc:	010000b4 	movhi	r4,2
    c5d0:	2103f704 	addi	r4,r4,4060
    c5d4:	d9002415 	stw	r4,144(sp)
    c5d8:	29400044 	addi	r5,r5,1
    c5dc:	003c9f06 	br	b85c <__alt_mem_Flash_flash_data+0xf400b85c>
    c5e0:	00800184 	movi	r2,6
    c5e4:	1240012e 	bgeu	r2,r9,c5ec <___vfiprintf_internal_r+0x1240>
    c5e8:	1013883a 	mov	r9,r2
    c5ec:	4827883a 	mov	r19,r9
    c5f0:	4823883a 	mov	r17,r9
    c5f4:	48001116 	blt	r9,zero,c63c <___vfiprintf_internal_r+0x1290>
    c5f8:	050000b4 	movhi	r20,2
    c5fc:	dd802215 	stw	r22,136(sp)
    c600:	a5038704 	addi	r20,r20,3612
    c604:	003db106 	br	bccc <__alt_mem_Flash_flash_data+0xf400bccc>
    c608:	d9401b17 	ldw	r5,108(sp)
    c60c:	010000b4 	movhi	r4,2
    c610:	2103f704 	addi	r4,r4,4060
    c614:	d9002415 	stw	r4,144(sp)
    c618:	29400044 	addi	r5,r5,1
    c61c:	003cf906 	br	ba04 <__alt_mem_Flash_flash_data+0xf400ba04>
    c620:	4827883a 	mov	r19,r9
    c624:	db801d83 	ldbu	r14,118(sp)
    c628:	dd802215 	stw	r22,136(sp)
    c62c:	0013883a 	mov	r9,zero
    c630:	003c5806 	br	b794 <__alt_mem_Flash_flash_data+0xf400b794>
    c634:	200d883a 	mov	r6,r4
    c638:	003ec706 	br	c158 <__alt_mem_Flash_flash_data+0xf400c158>
    c63c:	0023883a 	mov	r17,zero
    c640:	003fed06 	br	c5f8 <__alt_mem_Flash_flash_data+0xf400c5f8>
    c644:	d9002217 	ldw	r4,136(sp)
    c648:	22400017 	ldw	r9,0(r4)
    c64c:	20c00104 	addi	r3,r4,4
    c650:	d8c02215 	stw	r3,136(sp)
    c654:	483fc20e 	bge	r9,zero,c560 <__alt_mem_Flash_flash_data+0xf400c560>
    c658:	027fffc4 	movi	r9,-1
    c65c:	80c00047 	ldb	r3,1(r16)
    c660:	003bb006 	br	b524 <__alt_mem_Flash_flash_data+0xf400b524>
    c664:	8c80010e 	bge	r17,r18,c66c <___vfiprintf_internal_r+0x12c0>
    c668:	9023883a 	mov	r17,r18
    c66c:	d8802317 	ldw	r2,140(sp)
    c670:	1445883a 	add	r2,r2,r17
    c674:	d8802315 	stw	r2,140(sp)
    c678:	003cef06 	br	ba38 <__alt_mem_Flash_flash_data+0xf400ba38>

0000c67c <__vfiprintf_internal>:
    c67c:	2007883a 	mov	r3,r4
    c680:	010000b4 	movhi	r4,2
    c684:	210c8604 	addi	r4,r4,12824
    c688:	21000017 	ldw	r4,0(r4)
    c68c:	2805883a 	mov	r2,r5
    c690:	300f883a 	mov	r7,r6
    c694:	180b883a 	mov	r5,r3
    c698:	100d883a 	mov	r6,r2
    c69c:	000b3ac1 	jmpi	b3ac <___vfiprintf_internal_r>

0000c6a0 <__sbprintf>:
    c6a0:	2880030b 	ldhu	r2,12(r5)
    c6a4:	2ac01917 	ldw	r11,100(r5)
    c6a8:	2a80038b 	ldhu	r10,14(r5)
    c6ac:	2a400717 	ldw	r9,28(r5)
    c6b0:	2a000917 	ldw	r8,36(r5)
    c6b4:	defee204 	addi	sp,sp,-1144
    c6b8:	00c10004 	movi	r3,1024
    c6bc:	dc011a15 	stw	r16,1128(sp)
    c6c0:	10bfff4c 	andi	r2,r2,65533
    c6c4:	2821883a 	mov	r16,r5
    c6c8:	d8cb883a 	add	r5,sp,r3
    c6cc:	dc811c15 	stw	r18,1136(sp)
    c6d0:	dc411b15 	stw	r17,1132(sp)
    c6d4:	dfc11d15 	stw	ra,1140(sp)
    c6d8:	2025883a 	mov	r18,r4
    c6dc:	d881030d 	sth	r2,1036(sp)
    c6e0:	dac11915 	stw	r11,1124(sp)
    c6e4:	da81038d 	sth	r10,1038(sp)
    c6e8:	da410715 	stw	r9,1052(sp)
    c6ec:	da010915 	stw	r8,1060(sp)
    c6f0:	dec10015 	stw	sp,1024(sp)
    c6f4:	dec10415 	stw	sp,1040(sp)
    c6f8:	d8c10215 	stw	r3,1032(sp)
    c6fc:	d8c10515 	stw	r3,1044(sp)
    c700:	d8010615 	stw	zero,1048(sp)
    c704:	000b3ac0 	call	b3ac <___vfiprintf_internal_r>
    c708:	1023883a 	mov	r17,r2
    c70c:	10000416 	blt	r2,zero,c720 <__sbprintf+0x80>
    c710:	9009883a 	mov	r4,r18
    c714:	d9410004 	addi	r5,sp,1024
    c718:	0006b340 	call	6b34 <_fflush_r>
    c71c:	10000d1e 	bne	r2,zero,c754 <__sbprintf+0xb4>
    c720:	d8c1030b 	ldhu	r3,1036(sp)
    c724:	18c0100c 	andi	r3,r3,64
    c728:	18000326 	beq	r3,zero,c738 <__sbprintf+0x98>
    c72c:	8080030b 	ldhu	r2,12(r16)
    c730:	10801014 	ori	r2,r2,64
    c734:	8080030d 	sth	r2,12(r16)
    c738:	8805883a 	mov	r2,r17
    c73c:	dfc11d17 	ldw	ra,1140(sp)
    c740:	dc811c17 	ldw	r18,1136(sp)
    c744:	dc411b17 	ldw	r17,1132(sp)
    c748:	dc011a17 	ldw	r16,1128(sp)
    c74c:	dec11e04 	addi	sp,sp,1144
    c750:	f800283a 	ret
    c754:	047fffc4 	movi	r17,-1
    c758:	003ff106 	br	c720 <__alt_mem_Flash_flash_data+0xf400c720>

0000c75c <__swbuf_r>:
    c75c:	defffc04 	addi	sp,sp,-16
    c760:	dc800215 	stw	r18,8(sp)
    c764:	dc400115 	stw	r17,4(sp)
    c768:	dc000015 	stw	r16,0(sp)
    c76c:	dfc00315 	stw	ra,12(sp)
    c770:	2025883a 	mov	r18,r4
    c774:	2823883a 	mov	r17,r5
    c778:	3021883a 	mov	r16,r6
    c77c:	20000226 	beq	r4,zero,c788 <__swbuf_r+0x2c>
    c780:	20800e17 	ldw	r2,56(r4)
    c784:	10004126 	beq	r2,zero,c88c <__swbuf_r+0x130>
    c788:	80c00617 	ldw	r3,24(r16)
    c78c:	8180030b 	ldhu	r6,12(r16)
    c790:	80c00215 	stw	r3,8(r16)
    c794:	30c0020c 	andi	r3,r6,8
    c798:	18003526 	beq	r3,zero,c870 <__swbuf_r+0x114>
    c79c:	80c00417 	ldw	r3,16(r16)
    c7a0:	18003326 	beq	r3,zero,c870 <__swbuf_r+0x114>
    c7a4:	3088000c 	andi	r2,r6,8192
    c7a8:	8c403fcc 	andi	r17,r17,255
    c7ac:	10001726 	beq	r2,zero,c80c <__swbuf_r+0xb0>
    c7b0:	80800017 	ldw	r2,0(r16)
    c7b4:	81000517 	ldw	r4,20(r16)
    c7b8:	10c7c83a 	sub	r3,r2,r3
    c7bc:	19001d0e 	bge	r3,r4,c834 <__swbuf_r+0xd8>
    c7c0:	18c00044 	addi	r3,r3,1
    c7c4:	81400217 	ldw	r5,8(r16)
    c7c8:	11000044 	addi	r4,r2,1
    c7cc:	81000015 	stw	r4,0(r16)
    c7d0:	297fffc4 	addi	r5,r5,-1
    c7d4:	81400215 	stw	r5,8(r16)
    c7d8:	14400005 	stb	r17,0(r2)
    c7dc:	80800517 	ldw	r2,20(r16)
    c7e0:	10c01d26 	beq	r2,r3,c858 <__swbuf_r+0xfc>
    c7e4:	8080030b 	ldhu	r2,12(r16)
    c7e8:	1080004c 	andi	r2,r2,1
    c7ec:	1000181e 	bne	r2,zero,c850 <__swbuf_r+0xf4>
    c7f0:	8805883a 	mov	r2,r17
    c7f4:	dfc00317 	ldw	ra,12(sp)
    c7f8:	dc800217 	ldw	r18,8(sp)
    c7fc:	dc400117 	ldw	r17,4(sp)
    c800:	dc000017 	ldw	r16,0(sp)
    c804:	dec00404 	addi	sp,sp,16
    c808:	f800283a 	ret
    c80c:	81001917 	ldw	r4,100(r16)
    c810:	00b7ffc4 	movi	r2,-8193
    c814:	31880014 	ori	r6,r6,8192
    c818:	2084703a 	and	r2,r4,r2
    c81c:	80801915 	stw	r2,100(r16)
    c820:	80800017 	ldw	r2,0(r16)
    c824:	81000517 	ldw	r4,20(r16)
    c828:	8180030d 	sth	r6,12(r16)
    c82c:	10c7c83a 	sub	r3,r2,r3
    c830:	193fe316 	blt	r3,r4,c7c0 <__alt_mem_Flash_flash_data+0xf400c7c0>
    c834:	9009883a 	mov	r4,r18
    c838:	800b883a 	mov	r5,r16
    c83c:	0006b340 	call	6b34 <_fflush_r>
    c840:	1000091e 	bne	r2,zero,c868 <__swbuf_r+0x10c>
    c844:	80800017 	ldw	r2,0(r16)
    c848:	00c00044 	movi	r3,1
    c84c:	003fdd06 	br	c7c4 <__alt_mem_Flash_flash_data+0xf400c7c4>
    c850:	00800284 	movi	r2,10
    c854:	88bfe61e 	bne	r17,r2,c7f0 <__alt_mem_Flash_flash_data+0xf400c7f0>
    c858:	9009883a 	mov	r4,r18
    c85c:	800b883a 	mov	r5,r16
    c860:	0006b340 	call	6b34 <_fflush_r>
    c864:	103fe226 	beq	r2,zero,c7f0 <__alt_mem_Flash_flash_data+0xf400c7f0>
    c868:	00bfffc4 	movi	r2,-1
    c86c:	003fe106 	br	c7f4 <__alt_mem_Flash_flash_data+0xf400c7f4>
    c870:	9009883a 	mov	r4,r18
    c874:	800b883a 	mov	r5,r16
    c878:	0004eb00 	call	4eb0 <__swsetup_r>
    c87c:	103ffa1e 	bne	r2,zero,c868 <__alt_mem_Flash_flash_data+0xf400c868>
    c880:	8180030b 	ldhu	r6,12(r16)
    c884:	80c00417 	ldw	r3,16(r16)
    c888:	003fc606 	br	c7a4 <__alt_mem_Flash_flash_data+0xf400c7a4>
    c88c:	0006f100 	call	6f10 <__sinit>
    c890:	003fbd06 	br	c788 <__alt_mem_Flash_flash_data+0xf400c788>

0000c894 <__swbuf>:
    c894:	00c000b4 	movhi	r3,2
    c898:	18cc8604 	addi	r3,r3,12824
    c89c:	2005883a 	mov	r2,r4
    c8a0:	19000017 	ldw	r4,0(r3)
    c8a4:	280d883a 	mov	r6,r5
    c8a8:	100b883a 	mov	r5,r2
    c8ac:	000c75c1 	jmpi	c75c <__swbuf_r>

0000c8b0 <_write_r>:
    c8b0:	defffd04 	addi	sp,sp,-12
    c8b4:	dc000015 	stw	r16,0(sp)
    c8b8:	040000b4 	movhi	r16,2
    c8bc:	dc400115 	stw	r17,4(sp)
    c8c0:	84147804 	addi	r16,r16,20960
    c8c4:	2023883a 	mov	r17,r4
    c8c8:	2809883a 	mov	r4,r5
    c8cc:	300b883a 	mov	r5,r6
    c8d0:	380d883a 	mov	r6,r7
    c8d4:	dfc00215 	stw	ra,8(sp)
    c8d8:	80000015 	stw	zero,0(r16)
    c8dc:	0010b980 	call	10b98 <write>
    c8e0:	00ffffc4 	movi	r3,-1
    c8e4:	10c00526 	beq	r2,r3,c8fc <_write_r+0x4c>
    c8e8:	dfc00217 	ldw	ra,8(sp)
    c8ec:	dc400117 	ldw	r17,4(sp)
    c8f0:	dc000017 	ldw	r16,0(sp)
    c8f4:	dec00304 	addi	sp,sp,12
    c8f8:	f800283a 	ret
    c8fc:	80c00017 	ldw	r3,0(r16)
    c900:	183ff926 	beq	r3,zero,c8e8 <__alt_mem_Flash_flash_data+0xf400c8e8>
    c904:	88c00015 	stw	r3,0(r17)
    c908:	003ff706 	br	c8e8 <__alt_mem_Flash_flash_data+0xf400c8e8>

0000c90c <_close_r>:
    c90c:	defffd04 	addi	sp,sp,-12
    c910:	dc000015 	stw	r16,0(sp)
    c914:	040000b4 	movhi	r16,2
    c918:	dc400115 	stw	r17,4(sp)
    c91c:	84147804 	addi	r16,r16,20960
    c920:	2023883a 	mov	r17,r4
    c924:	2809883a 	mov	r4,r5
    c928:	dfc00215 	stw	ra,8(sp)
    c92c:	80000015 	stw	zero,0(r16)
    c930:	00103200 	call	10320 <close>
    c934:	00ffffc4 	movi	r3,-1
    c938:	10c00526 	beq	r2,r3,c950 <_close_r+0x44>
    c93c:	dfc00217 	ldw	ra,8(sp)
    c940:	dc400117 	ldw	r17,4(sp)
    c944:	dc000017 	ldw	r16,0(sp)
    c948:	dec00304 	addi	sp,sp,12
    c94c:	f800283a 	ret
    c950:	80c00017 	ldw	r3,0(r16)
    c954:	183ff926 	beq	r3,zero,c93c <__alt_mem_Flash_flash_data+0xf400c93c>
    c958:	88c00015 	stw	r3,0(r17)
    c95c:	003ff706 	br	c93c <__alt_mem_Flash_flash_data+0xf400c93c>

0000c960 <_calloc_r>:
    c960:	298b383a 	mul	r5,r5,r6
    c964:	defffe04 	addi	sp,sp,-8
    c968:	dc000015 	stw	r16,0(sp)
    c96c:	dfc00115 	stw	ra,4(sp)
    c970:	0007c540 	call	7c54 <_malloc_r>
    c974:	1021883a 	mov	r16,r2
    c978:	10002826 	beq	r2,zero,ca1c <_calloc_r+0xbc>
    c97c:	11bfff17 	ldw	r6,-4(r2)
    c980:	00bfff04 	movi	r2,-4
    c984:	00c00904 	movi	r3,36
    c988:	308c703a 	and	r6,r6,r2
    c98c:	308d883a 	add	r6,r6,r2
    c990:	19801436 	bltu	r3,r6,c9e4 <_calloc_r+0x84>
    c994:	008004c4 	movi	r2,19
    c998:	11800936 	bltu	r2,r6,c9c0 <_calloc_r+0x60>
    c99c:	8005883a 	mov	r2,r16
    c9a0:	10000015 	stw	zero,0(r2)
    c9a4:	10000115 	stw	zero,4(r2)
    c9a8:	10000215 	stw	zero,8(r2)
    c9ac:	8005883a 	mov	r2,r16
    c9b0:	dfc00117 	ldw	ra,4(sp)
    c9b4:	dc000017 	ldw	r16,0(sp)
    c9b8:	dec00204 	addi	sp,sp,8
    c9bc:	f800283a 	ret
    c9c0:	80000015 	stw	zero,0(r16)
    c9c4:	80000115 	stw	zero,4(r16)
    c9c8:	008006c4 	movi	r2,27
    c9cc:	11800d2e 	bgeu	r2,r6,ca04 <_calloc_r+0xa4>
    c9d0:	80000215 	stw	zero,8(r16)
    c9d4:	80000315 	stw	zero,12(r16)
    c9d8:	30c00c26 	beq	r6,r3,ca0c <_calloc_r+0xac>
    c9dc:	80800404 	addi	r2,r16,16
    c9e0:	003fef06 	br	c9a0 <__alt_mem_Flash_flash_data+0xf400c9a0>
    c9e4:	8009883a 	mov	r4,r16
    c9e8:	000b883a 	mov	r5,zero
    c9ec:	0000a140 	call	a14 <memset>
    c9f0:	8005883a 	mov	r2,r16
    c9f4:	dfc00117 	ldw	ra,4(sp)
    c9f8:	dc000017 	ldw	r16,0(sp)
    c9fc:	dec00204 	addi	sp,sp,8
    ca00:	f800283a 	ret
    ca04:	80800204 	addi	r2,r16,8
    ca08:	003fe506 	br	c9a0 <__alt_mem_Flash_flash_data+0xf400c9a0>
    ca0c:	80000415 	stw	zero,16(r16)
    ca10:	80800604 	addi	r2,r16,24
    ca14:	80000515 	stw	zero,20(r16)
    ca18:	003fe106 	br	c9a0 <__alt_mem_Flash_flash_data+0xf400c9a0>
    ca1c:	0005883a 	mov	r2,zero
    ca20:	003fe306 	br	c9b0 <__alt_mem_Flash_flash_data+0xf400c9b0>

0000ca24 <_fclose_r>:
    ca24:	28003926 	beq	r5,zero,cb0c <_fclose_r+0xe8>
    ca28:	defffc04 	addi	sp,sp,-16
    ca2c:	dc400115 	stw	r17,4(sp)
    ca30:	dc000015 	stw	r16,0(sp)
    ca34:	dfc00315 	stw	ra,12(sp)
    ca38:	dc800215 	stw	r18,8(sp)
    ca3c:	2023883a 	mov	r17,r4
    ca40:	2821883a 	mov	r16,r5
    ca44:	20000226 	beq	r4,zero,ca50 <_fclose_r+0x2c>
    ca48:	20800e17 	ldw	r2,56(r4)
    ca4c:	10002726 	beq	r2,zero,caec <_fclose_r+0xc8>
    ca50:	8080030f 	ldh	r2,12(r16)
    ca54:	1000071e 	bne	r2,zero,ca74 <_fclose_r+0x50>
    ca58:	0005883a 	mov	r2,zero
    ca5c:	dfc00317 	ldw	ra,12(sp)
    ca60:	dc800217 	ldw	r18,8(sp)
    ca64:	dc400117 	ldw	r17,4(sp)
    ca68:	dc000017 	ldw	r16,0(sp)
    ca6c:	dec00404 	addi	sp,sp,16
    ca70:	f800283a 	ret
    ca74:	8809883a 	mov	r4,r17
    ca78:	800b883a 	mov	r5,r16
    ca7c:	000692c0 	call	692c <__sflush_r>
    ca80:	1025883a 	mov	r18,r2
    ca84:	80800b17 	ldw	r2,44(r16)
    ca88:	10000426 	beq	r2,zero,ca9c <_fclose_r+0x78>
    ca8c:	81400717 	ldw	r5,28(r16)
    ca90:	8809883a 	mov	r4,r17
    ca94:	103ee83a 	callr	r2
    ca98:	10001616 	blt	r2,zero,caf4 <_fclose_r+0xd0>
    ca9c:	8080030b 	ldhu	r2,12(r16)
    caa0:	1080200c 	andi	r2,r2,128
    caa4:	1000151e 	bne	r2,zero,cafc <_fclose_r+0xd8>
    caa8:	81400c17 	ldw	r5,48(r16)
    caac:	28000526 	beq	r5,zero,cac4 <_fclose_r+0xa0>
    cab0:	80801004 	addi	r2,r16,64
    cab4:	28800226 	beq	r5,r2,cac0 <_fclose_r+0x9c>
    cab8:	8809883a 	mov	r4,r17
    cabc:	00070840 	call	7084 <_free_r>
    cac0:	80000c15 	stw	zero,48(r16)
    cac4:	81401117 	ldw	r5,68(r16)
    cac8:	28000326 	beq	r5,zero,cad8 <_fclose_r+0xb4>
    cacc:	8809883a 	mov	r4,r17
    cad0:	00070840 	call	7084 <_free_r>
    cad4:	80001115 	stw	zero,68(r16)
    cad8:	0006f200 	call	6f20 <__sfp_lock_acquire>
    cadc:	8000030d 	sth	zero,12(r16)
    cae0:	0006f240 	call	6f24 <__sfp_lock_release>
    cae4:	9005883a 	mov	r2,r18
    cae8:	003fdc06 	br	ca5c <__alt_mem_Flash_flash_data+0xf400ca5c>
    caec:	0006f100 	call	6f10 <__sinit>
    caf0:	003fd706 	br	ca50 <__alt_mem_Flash_flash_data+0xf400ca50>
    caf4:	04bfffc4 	movi	r18,-1
    caf8:	003fe806 	br	ca9c <__alt_mem_Flash_flash_data+0xf400ca9c>
    cafc:	81400417 	ldw	r5,16(r16)
    cb00:	8809883a 	mov	r4,r17
    cb04:	00070840 	call	7084 <_free_r>
    cb08:	003fe706 	br	caa8 <__alt_mem_Flash_flash_data+0xf400caa8>
    cb0c:	0005883a 	mov	r2,zero
    cb10:	f800283a 	ret

0000cb14 <fclose>:
    cb14:	008000b4 	movhi	r2,2
    cb18:	108c8604 	addi	r2,r2,12824
    cb1c:	200b883a 	mov	r5,r4
    cb20:	11000017 	ldw	r4,0(r2)
    cb24:	000ca241 	jmpi	ca24 <_fclose_r>

0000cb28 <_fputwc_r>:
    cb28:	3080030b 	ldhu	r2,12(r6)
    cb2c:	defff804 	addi	sp,sp,-32
    cb30:	dcc00415 	stw	r19,16(sp)
    cb34:	dc800315 	stw	r18,12(sp)
    cb38:	dc000115 	stw	r16,4(sp)
    cb3c:	dfc00715 	stw	ra,28(sp)
    cb40:	dd400615 	stw	r21,24(sp)
    cb44:	dd000515 	stw	r20,20(sp)
    cb48:	dc400215 	stw	r17,8(sp)
    cb4c:	10c8000c 	andi	r3,r2,8192
    cb50:	3021883a 	mov	r16,r6
    cb54:	2027883a 	mov	r19,r4
    cb58:	2825883a 	mov	r18,r5
    cb5c:	1800051e 	bne	r3,zero,cb74 <_fputwc_r+0x4c>
    cb60:	30c01917 	ldw	r3,100(r6)
    cb64:	10880014 	ori	r2,r2,8192
    cb68:	3080030d 	sth	r2,12(r6)
    cb6c:	18880014 	ori	r2,r3,8192
    cb70:	30801915 	stw	r2,100(r6)
    cb74:	0007a440 	call	7a44 <__locale_mb_cur_max>
    cb78:	00c00044 	movi	r3,1
    cb7c:	10c03e26 	beq	r2,r3,cc78 <_fputwc_r+0x150>
    cb80:	9809883a 	mov	r4,r19
    cb84:	d80b883a 	mov	r5,sp
    cb88:	900d883a 	mov	r6,r18
    cb8c:	81c01704 	addi	r7,r16,92
    cb90:	000ce6c0 	call	ce6c <_wcrtomb_r>
    cb94:	1029883a 	mov	r20,r2
    cb98:	00bfffc4 	movi	r2,-1
    cb9c:	a0802026 	beq	r20,r2,cc20 <_fputwc_r+0xf8>
    cba0:	d9400003 	ldbu	r5,0(sp)
    cba4:	a0001c26 	beq	r20,zero,cc18 <_fputwc_r+0xf0>
    cba8:	0023883a 	mov	r17,zero
    cbac:	05400284 	movi	r21,10
    cbb0:	00000906 	br	cbd8 <_fputwc_r+0xb0>
    cbb4:	80800017 	ldw	r2,0(r16)
    cbb8:	11400005 	stb	r5,0(r2)
    cbbc:	80c00017 	ldw	r3,0(r16)
    cbc0:	18c00044 	addi	r3,r3,1
    cbc4:	80c00015 	stw	r3,0(r16)
    cbc8:	8c400044 	addi	r17,r17,1
    cbcc:	dc45883a 	add	r2,sp,r17
    cbd0:	8d00112e 	bgeu	r17,r20,cc18 <_fputwc_r+0xf0>
    cbd4:	11400003 	ldbu	r5,0(r2)
    cbd8:	80c00217 	ldw	r3,8(r16)
    cbdc:	18ffffc4 	addi	r3,r3,-1
    cbe0:	80c00215 	stw	r3,8(r16)
    cbe4:	183ff30e 	bge	r3,zero,cbb4 <__alt_mem_Flash_flash_data+0xf400cbb4>
    cbe8:	80800617 	ldw	r2,24(r16)
    cbec:	18801916 	blt	r3,r2,cc54 <_fputwc_r+0x12c>
    cbf0:	80800017 	ldw	r2,0(r16)
    cbf4:	11400005 	stb	r5,0(r2)
    cbf8:	80800017 	ldw	r2,0(r16)
    cbfc:	10c00003 	ldbu	r3,0(r2)
    cc00:	10800044 	addi	r2,r2,1
    cc04:	1d402326 	beq	r3,r21,cc94 <_fputwc_r+0x16c>
    cc08:	80800015 	stw	r2,0(r16)
    cc0c:	8c400044 	addi	r17,r17,1
    cc10:	dc45883a 	add	r2,sp,r17
    cc14:	8d3fef36 	bltu	r17,r20,cbd4 <__alt_mem_Flash_flash_data+0xf400cbd4>
    cc18:	9005883a 	mov	r2,r18
    cc1c:	00000406 	br	cc30 <_fputwc_r+0x108>
    cc20:	80c0030b 	ldhu	r3,12(r16)
    cc24:	a005883a 	mov	r2,r20
    cc28:	18c01014 	ori	r3,r3,64
    cc2c:	80c0030d 	sth	r3,12(r16)
    cc30:	dfc00717 	ldw	ra,28(sp)
    cc34:	dd400617 	ldw	r21,24(sp)
    cc38:	dd000517 	ldw	r20,20(sp)
    cc3c:	dcc00417 	ldw	r19,16(sp)
    cc40:	dc800317 	ldw	r18,12(sp)
    cc44:	dc400217 	ldw	r17,8(sp)
    cc48:	dc000117 	ldw	r16,4(sp)
    cc4c:	dec00804 	addi	sp,sp,32
    cc50:	f800283a 	ret
    cc54:	9809883a 	mov	r4,r19
    cc58:	29403fcc 	andi	r5,r5,255
    cc5c:	800d883a 	mov	r6,r16
    cc60:	000c75c0 	call	c75c <__swbuf_r>
    cc64:	10bfffe0 	cmpeqi	r2,r2,-1
    cc68:	10803fcc 	andi	r2,r2,255
    cc6c:	103fd626 	beq	r2,zero,cbc8 <__alt_mem_Flash_flash_data+0xf400cbc8>
    cc70:	00bfffc4 	movi	r2,-1
    cc74:	003fee06 	br	cc30 <__alt_mem_Flash_flash_data+0xf400cc30>
    cc78:	90ffffc4 	addi	r3,r18,-1
    cc7c:	01003f84 	movi	r4,254
    cc80:	20ffbf36 	bltu	r4,r3,cb80 <__alt_mem_Flash_flash_data+0xf400cb80>
    cc84:	900b883a 	mov	r5,r18
    cc88:	dc800005 	stb	r18,0(sp)
    cc8c:	1029883a 	mov	r20,r2
    cc90:	003fc506 	br	cba8 <__alt_mem_Flash_flash_data+0xf400cba8>
    cc94:	9809883a 	mov	r4,r19
    cc98:	a80b883a 	mov	r5,r21
    cc9c:	800d883a 	mov	r6,r16
    cca0:	000c75c0 	call	c75c <__swbuf_r>
    cca4:	10bfffe0 	cmpeqi	r2,r2,-1
    cca8:	003fef06 	br	cc68 <__alt_mem_Flash_flash_data+0xf400cc68>

0000ccac <fputwc>:
    ccac:	008000b4 	movhi	r2,2
    ccb0:	defffc04 	addi	sp,sp,-16
    ccb4:	108c8604 	addi	r2,r2,12824
    ccb8:	dc000115 	stw	r16,4(sp)
    ccbc:	14000017 	ldw	r16,0(r2)
    ccc0:	dc400215 	stw	r17,8(sp)
    ccc4:	dfc00315 	stw	ra,12(sp)
    ccc8:	2023883a 	mov	r17,r4
    cccc:	280d883a 	mov	r6,r5
    ccd0:	80000626 	beq	r16,zero,ccec <fputwc+0x40>
    ccd4:	80800e17 	ldw	r2,56(r16)
    ccd8:	1000041e 	bne	r2,zero,ccec <fputwc+0x40>
    ccdc:	8009883a 	mov	r4,r16
    cce0:	d9400015 	stw	r5,0(sp)
    cce4:	0006f100 	call	6f10 <__sinit>
    cce8:	d9800017 	ldw	r6,0(sp)
    ccec:	8009883a 	mov	r4,r16
    ccf0:	880b883a 	mov	r5,r17
    ccf4:	dfc00317 	ldw	ra,12(sp)
    ccf8:	dc400217 	ldw	r17,8(sp)
    ccfc:	dc000117 	ldw	r16,4(sp)
    cd00:	dec00404 	addi	sp,sp,16
    cd04:	000cb281 	jmpi	cb28 <_fputwc_r>

0000cd08 <_fstat_r>:
    cd08:	defffd04 	addi	sp,sp,-12
    cd0c:	dc000015 	stw	r16,0(sp)
    cd10:	040000b4 	movhi	r16,2
    cd14:	dc400115 	stw	r17,4(sp)
    cd18:	84147804 	addi	r16,r16,20960
    cd1c:	2023883a 	mov	r17,r4
    cd20:	2809883a 	mov	r4,r5
    cd24:	300b883a 	mov	r5,r6
    cd28:	dfc00215 	stw	ra,8(sp)
    cd2c:	80000015 	stw	zero,0(r16)
    cd30:	001046c0 	call	1046c <fstat>
    cd34:	00ffffc4 	movi	r3,-1
    cd38:	10c00526 	beq	r2,r3,cd50 <_fstat_r+0x48>
    cd3c:	dfc00217 	ldw	ra,8(sp)
    cd40:	dc400117 	ldw	r17,4(sp)
    cd44:	dc000017 	ldw	r16,0(sp)
    cd48:	dec00304 	addi	sp,sp,12
    cd4c:	f800283a 	ret
    cd50:	80c00017 	ldw	r3,0(r16)
    cd54:	183ff926 	beq	r3,zero,cd3c <__alt_mem_Flash_flash_data+0xf400cd3c>
    cd58:	88c00015 	stw	r3,0(r17)
    cd5c:	003ff706 	br	cd3c <__alt_mem_Flash_flash_data+0xf400cd3c>

0000cd60 <_isatty_r>:
    cd60:	defffd04 	addi	sp,sp,-12
    cd64:	dc000015 	stw	r16,0(sp)
    cd68:	040000b4 	movhi	r16,2
    cd6c:	dc400115 	stw	r17,4(sp)
    cd70:	84147804 	addi	r16,r16,20960
    cd74:	2023883a 	mov	r17,r4
    cd78:	2809883a 	mov	r4,r5
    cd7c:	dfc00215 	stw	ra,8(sp)
    cd80:	80000015 	stw	zero,0(r16)
    cd84:	001056c0 	call	1056c <isatty>
    cd88:	00ffffc4 	movi	r3,-1
    cd8c:	10c00526 	beq	r2,r3,cda4 <_isatty_r+0x44>
    cd90:	dfc00217 	ldw	ra,8(sp)
    cd94:	dc400117 	ldw	r17,4(sp)
    cd98:	dc000017 	ldw	r16,0(sp)
    cd9c:	dec00304 	addi	sp,sp,12
    cda0:	f800283a 	ret
    cda4:	80c00017 	ldw	r3,0(r16)
    cda8:	183ff926 	beq	r3,zero,cd90 <__alt_mem_Flash_flash_data+0xf400cd90>
    cdac:	88c00015 	stw	r3,0(r17)
    cdb0:	003ff706 	br	cd90 <__alt_mem_Flash_flash_data+0xf400cd90>

0000cdb4 <_lseek_r>:
    cdb4:	defffd04 	addi	sp,sp,-12
    cdb8:	dc000015 	stw	r16,0(sp)
    cdbc:	040000b4 	movhi	r16,2
    cdc0:	dc400115 	stw	r17,4(sp)
    cdc4:	84147804 	addi	r16,r16,20960
    cdc8:	2023883a 	mov	r17,r4
    cdcc:	2809883a 	mov	r4,r5
    cdd0:	300b883a 	mov	r5,r6
    cdd4:	380d883a 	mov	r6,r7
    cdd8:	dfc00215 	stw	ra,8(sp)
    cddc:	80000015 	stw	zero,0(r16)
    cde0:	00107440 	call	10744 <lseek>
    cde4:	00ffffc4 	movi	r3,-1
    cde8:	10c00526 	beq	r2,r3,ce00 <_lseek_r+0x4c>
    cdec:	dfc00217 	ldw	ra,8(sp)
    cdf0:	dc400117 	ldw	r17,4(sp)
    cdf4:	dc000017 	ldw	r16,0(sp)
    cdf8:	dec00304 	addi	sp,sp,12
    cdfc:	f800283a 	ret
    ce00:	80c00017 	ldw	r3,0(r16)
    ce04:	183ff926 	beq	r3,zero,cdec <__alt_mem_Flash_flash_data+0xf400cdec>
    ce08:	88c00015 	stw	r3,0(r17)
    ce0c:	003ff706 	br	cdec <__alt_mem_Flash_flash_data+0xf400cdec>

0000ce10 <_read_r>:
    ce10:	defffd04 	addi	sp,sp,-12
    ce14:	dc000015 	stw	r16,0(sp)
    ce18:	040000b4 	movhi	r16,2
    ce1c:	dc400115 	stw	r17,4(sp)
    ce20:	84147804 	addi	r16,r16,20960
    ce24:	2023883a 	mov	r17,r4
    ce28:	2809883a 	mov	r4,r5
    ce2c:	300b883a 	mov	r5,r6
    ce30:	380d883a 	mov	r6,r7
    ce34:	dfc00215 	stw	ra,8(sp)
    ce38:	80000015 	stw	zero,0(r16)
    ce3c:	001093c0 	call	1093c <read>
    ce40:	00ffffc4 	movi	r3,-1
    ce44:	10c00526 	beq	r2,r3,ce5c <_read_r+0x4c>
    ce48:	dfc00217 	ldw	ra,8(sp)
    ce4c:	dc400117 	ldw	r17,4(sp)
    ce50:	dc000017 	ldw	r16,0(sp)
    ce54:	dec00304 	addi	sp,sp,12
    ce58:	f800283a 	ret
    ce5c:	80c00017 	ldw	r3,0(r16)
    ce60:	183ff926 	beq	r3,zero,ce48 <__alt_mem_Flash_flash_data+0xf400ce48>
    ce64:	88c00015 	stw	r3,0(r17)
    ce68:	003ff706 	br	ce48 <__alt_mem_Flash_flash_data+0xf400ce48>

0000ce6c <_wcrtomb_r>:
    ce6c:	defff604 	addi	sp,sp,-40
    ce70:	008000b4 	movhi	r2,2
    ce74:	dc800815 	stw	r18,32(sp)
    ce78:	dc400715 	stw	r17,28(sp)
    ce7c:	dc000615 	stw	r16,24(sp)
    ce80:	108c8a04 	addi	r2,r2,12840
    ce84:	dfc00915 	stw	ra,36(sp)
    ce88:	2021883a 	mov	r16,r4
    ce8c:	3823883a 	mov	r17,r7
    ce90:	14800017 	ldw	r18,0(r2)
    ce94:	28001426 	beq	r5,zero,cee8 <_wcrtomb_r+0x7c>
    ce98:	d9400415 	stw	r5,16(sp)
    ce9c:	d9800515 	stw	r6,20(sp)
    cea0:	0007a380 	call	7a38 <__locale_charset>
    cea4:	d9400417 	ldw	r5,16(sp)
    cea8:	d9800517 	ldw	r6,20(sp)
    ceac:	8009883a 	mov	r4,r16
    ceb0:	dc400015 	stw	r17,0(sp)
    ceb4:	100f883a 	mov	r7,r2
    ceb8:	903ee83a 	callr	r18
    cebc:	00ffffc4 	movi	r3,-1
    cec0:	10c0031e 	bne	r2,r3,ced0 <_wcrtomb_r+0x64>
    cec4:	88000015 	stw	zero,0(r17)
    cec8:	00c02284 	movi	r3,138
    cecc:	80c00015 	stw	r3,0(r16)
    ced0:	dfc00917 	ldw	ra,36(sp)
    ced4:	dc800817 	ldw	r18,32(sp)
    ced8:	dc400717 	ldw	r17,28(sp)
    cedc:	dc000617 	ldw	r16,24(sp)
    cee0:	dec00a04 	addi	sp,sp,40
    cee4:	f800283a 	ret
    cee8:	0007a380 	call	7a38 <__locale_charset>
    ceec:	8009883a 	mov	r4,r16
    cef0:	dc400015 	stw	r17,0(sp)
    cef4:	d9400104 	addi	r5,sp,4
    cef8:	000d883a 	mov	r6,zero
    cefc:	100f883a 	mov	r7,r2
    cf00:	903ee83a 	callr	r18
    cf04:	003fed06 	br	cebc <__alt_mem_Flash_flash_data+0xf400cebc>

0000cf08 <wcrtomb>:
    cf08:	defff604 	addi	sp,sp,-40
    cf0c:	008000b4 	movhi	r2,2
    cf10:	dc800615 	stw	r18,24(sp)
    cf14:	dc400515 	stw	r17,20(sp)
    cf18:	dc000415 	stw	r16,16(sp)
    cf1c:	108c8604 	addi	r2,r2,12824
    cf20:	dfc00915 	stw	ra,36(sp)
    cf24:	dd000815 	stw	r20,32(sp)
    cf28:	dcc00715 	stw	r19,28(sp)
    cf2c:	2021883a 	mov	r16,r4
    cf30:	3025883a 	mov	r18,r6
    cf34:	14400017 	ldw	r17,0(r2)
    cf38:	20001826 	beq	r4,zero,cf9c <wcrtomb+0x94>
    cf3c:	008000b4 	movhi	r2,2
    cf40:	108c8a04 	addi	r2,r2,12840
    cf44:	15000017 	ldw	r20,0(r2)
    cf48:	2827883a 	mov	r19,r5
    cf4c:	0007a380 	call	7a38 <__locale_charset>
    cf50:	8809883a 	mov	r4,r17
    cf54:	dc800015 	stw	r18,0(sp)
    cf58:	800b883a 	mov	r5,r16
    cf5c:	980d883a 	mov	r6,r19
    cf60:	100f883a 	mov	r7,r2
    cf64:	a03ee83a 	callr	r20
    cf68:	00ffffc4 	movi	r3,-1
    cf6c:	10c0031e 	bne	r2,r3,cf7c <wcrtomb+0x74>
    cf70:	90000015 	stw	zero,0(r18)
    cf74:	00c02284 	movi	r3,138
    cf78:	88c00015 	stw	r3,0(r17)
    cf7c:	dfc00917 	ldw	ra,36(sp)
    cf80:	dd000817 	ldw	r20,32(sp)
    cf84:	dcc00717 	ldw	r19,28(sp)
    cf88:	dc800617 	ldw	r18,24(sp)
    cf8c:	dc400517 	ldw	r17,20(sp)
    cf90:	dc000417 	ldw	r16,16(sp)
    cf94:	dec00a04 	addi	sp,sp,40
    cf98:	f800283a 	ret
    cf9c:	008000b4 	movhi	r2,2
    cfa0:	108c8a04 	addi	r2,r2,12840
    cfa4:	14000017 	ldw	r16,0(r2)
    cfa8:	0007a380 	call	7a38 <__locale_charset>
    cfac:	8809883a 	mov	r4,r17
    cfb0:	dc800015 	stw	r18,0(sp)
    cfb4:	d9400104 	addi	r5,sp,4
    cfb8:	000d883a 	mov	r6,zero
    cfbc:	100f883a 	mov	r7,r2
    cfc0:	803ee83a 	callr	r16
    cfc4:	003fe806 	br	cf68 <__alt_mem_Flash_flash_data+0xf400cf68>

0000cfc8 <__ascii_wctomb>:
    cfc8:	28000526 	beq	r5,zero,cfe0 <__ascii_wctomb+0x18>
    cfcc:	00803fc4 	movi	r2,255
    cfd0:	11800536 	bltu	r2,r6,cfe8 <__ascii_wctomb+0x20>
    cfd4:	29800005 	stb	r6,0(r5)
    cfd8:	00800044 	movi	r2,1
    cfdc:	f800283a 	ret
    cfe0:	0005883a 	mov	r2,zero
    cfe4:	f800283a 	ret
    cfe8:	00802284 	movi	r2,138
    cfec:	20800015 	stw	r2,0(r4)
    cff0:	00bfffc4 	movi	r2,-1
    cff4:	f800283a 	ret

0000cff8 <_wctomb_r>:
    cff8:	008000b4 	movhi	r2,2
    cffc:	defff904 	addi	sp,sp,-28
    d000:	108c8a04 	addi	r2,r2,12840
    d004:	dfc00615 	stw	ra,24(sp)
    d008:	dc400515 	stw	r17,20(sp)
    d00c:	dc000415 	stw	r16,16(sp)
    d010:	3823883a 	mov	r17,r7
    d014:	14000017 	ldw	r16,0(r2)
    d018:	d9000115 	stw	r4,4(sp)
    d01c:	d9400215 	stw	r5,8(sp)
    d020:	d9800315 	stw	r6,12(sp)
    d024:	0007a380 	call	7a38 <__locale_charset>
    d028:	d9000117 	ldw	r4,4(sp)
    d02c:	d9400217 	ldw	r5,8(sp)
    d030:	d9800317 	ldw	r6,12(sp)
    d034:	dc400015 	stw	r17,0(sp)
    d038:	100f883a 	mov	r7,r2
    d03c:	803ee83a 	callr	r16
    d040:	dfc00617 	ldw	ra,24(sp)
    d044:	dc400517 	ldw	r17,20(sp)
    d048:	dc000417 	ldw	r16,16(sp)
    d04c:	dec00704 	addi	sp,sp,28
    d050:	f800283a 	ret

0000d054 <__udivdi3>:
    d054:	defff504 	addi	sp,sp,-44
    d058:	dcc00415 	stw	r19,16(sp)
    d05c:	dc000115 	stw	r16,4(sp)
    d060:	dfc00a15 	stw	ra,40(sp)
    d064:	df000915 	stw	fp,36(sp)
    d068:	ddc00815 	stw	r23,32(sp)
    d06c:	dd800715 	stw	r22,28(sp)
    d070:	dd400615 	stw	r21,24(sp)
    d074:	dd000515 	stw	r20,20(sp)
    d078:	dc800315 	stw	r18,12(sp)
    d07c:	dc400215 	stw	r17,8(sp)
    d080:	2027883a 	mov	r19,r4
    d084:	2821883a 	mov	r16,r5
    d088:	3800421e 	bne	r7,zero,d194 <__udivdi3+0x140>
    d08c:	3025883a 	mov	r18,r6
    d090:	2023883a 	mov	r17,r4
    d094:	2980542e 	bgeu	r5,r6,d1e8 <__udivdi3+0x194>
    d098:	00bfffd4 	movui	r2,65535
    d09c:	282d883a 	mov	r22,r5
    d0a0:	1180a836 	bltu	r2,r6,d344 <__udivdi3+0x2f0>
    d0a4:	00803fc4 	movi	r2,255
    d0a8:	1181422e 	bgeu	r2,r6,d5b4 <__udivdi3+0x560>
    d0ac:	00800204 	movi	r2,8
    d0b0:	1007883a 	mov	r3,r2
    d0b4:	3084d83a 	srl	r2,r6,r2
    d0b8:	010000b4 	movhi	r4,2
    d0bc:	2103fb04 	addi	r4,r4,4076
    d0c0:	2085883a 	add	r2,r4,r2
    d0c4:	10800003 	ldbu	r2,0(r2)
    d0c8:	10c7883a 	add	r3,r2,r3
    d0cc:	00800804 	movi	r2,32
    d0d0:	10c5c83a 	sub	r2,r2,r3
    d0d4:	10000526 	beq	r2,zero,d0ec <__udivdi3+0x98>
    d0d8:	80a0983a 	sll	r16,r16,r2
    d0dc:	98c6d83a 	srl	r3,r19,r3
    d0e0:	30a4983a 	sll	r18,r6,r2
    d0e4:	98a2983a 	sll	r17,r19,r2
    d0e8:	80ecb03a 	or	r22,r16,r3
    d0ec:	902ad43a 	srli	r21,r18,16
    d0f0:	b009883a 	mov	r4,r22
    d0f4:	953fffcc 	andi	r20,r18,65535
    d0f8:	a80b883a 	mov	r5,r21
    d0fc:	000dcc80 	call	dcc8 <__umodsi3>
    d100:	b009883a 	mov	r4,r22
    d104:	a80b883a 	mov	r5,r21
    d108:	1027883a 	mov	r19,r2
    d10c:	000dcc00 	call	dcc0 <__udivsi3>
    d110:	1021883a 	mov	r16,r2
    d114:	8806d43a 	srli	r3,r17,16
    d118:	9804943a 	slli	r2,r19,16
    d11c:	8527383a 	mul	r19,r16,r20
    d120:	10c4b03a 	or	r2,r2,r3
    d124:	14c0052e 	bgeu	r2,r19,d13c <__udivdi3+0xe8>
    d128:	1485883a 	add	r2,r2,r18
    d12c:	80ffffc4 	addi	r3,r16,-1
    d130:	14800136 	bltu	r2,r18,d138 <__udivdi3+0xe4>
    d134:	14c13436 	bltu	r2,r19,d608 <__udivdi3+0x5b4>
    d138:	1821883a 	mov	r16,r3
    d13c:	14e7c83a 	sub	r19,r2,r19
    d140:	9809883a 	mov	r4,r19
    d144:	a80b883a 	mov	r5,r21
    d148:	000dcc80 	call	dcc8 <__umodsi3>
    d14c:	102d883a 	mov	r22,r2
    d150:	9809883a 	mov	r4,r19
    d154:	a80b883a 	mov	r5,r21
    d158:	000dcc00 	call	dcc0 <__udivsi3>
    d15c:	b02c943a 	slli	r22,r22,16
    d160:	1529383a 	mul	r20,r2,r20
    d164:	8c7fffcc 	andi	r17,r17,65535
    d168:	b462b03a 	or	r17,r22,r17
    d16c:	8d00052e 	bgeu	r17,r20,d184 <__udivdi3+0x130>
    d170:	8ca3883a 	add	r17,r17,r18
    d174:	10ffffc4 	addi	r3,r2,-1
    d178:	8c80f636 	bltu	r17,r18,d554 <__udivdi3+0x500>
    d17c:	8d00f52e 	bgeu	r17,r20,d554 <__udivdi3+0x500>
    d180:	10bfff84 	addi	r2,r2,-2
    d184:	8020943a 	slli	r16,r16,16
    d188:	0007883a 	mov	r3,zero
    d18c:	1404b03a 	or	r2,r2,r16
    d190:	00005b06 	br	d300 <__udivdi3+0x2ac>
    d194:	29c05836 	bltu	r5,r7,d2f8 <__udivdi3+0x2a4>
    d198:	00bfffd4 	movui	r2,65535
    d19c:	11c0642e 	bgeu	r2,r7,d330 <__udivdi3+0x2dc>
    d1a0:	00804034 	movhi	r2,256
    d1a4:	10bfffc4 	addi	r2,r2,-1
    d1a8:	11c0f32e 	bgeu	r2,r7,d578 <__udivdi3+0x524>
    d1ac:	00c00604 	movi	r3,24
    d1b0:	180b883a 	mov	r5,r3
    d1b4:	38c6d83a 	srl	r3,r7,r3
    d1b8:	008000b4 	movhi	r2,2
    d1bc:	1083fb04 	addi	r2,r2,4076
    d1c0:	10c7883a 	add	r3,r2,r3
    d1c4:	18c00003 	ldbu	r3,0(r3)
    d1c8:	01000804 	movi	r4,32
    d1cc:	1947883a 	add	r3,r3,r5
    d1d0:	20e5c83a 	sub	r18,r4,r3
    d1d4:	9000661e 	bne	r18,zero,d370 <__udivdi3+0x31c>
    d1d8:	3c00f936 	bltu	r7,r16,d5c0 <__udivdi3+0x56c>
    d1dc:	9985403a 	cmpgeu	r2,r19,r6
    d1e0:	0007883a 	mov	r3,zero
    d1e4:	00004606 	br	d300 <__udivdi3+0x2ac>
    d1e8:	3000041e 	bne	r6,zero,d1fc <__udivdi3+0x1a8>
    d1ec:	01000044 	movi	r4,1
    d1f0:	000b883a 	mov	r5,zero
    d1f4:	000dcc00 	call	dcc0 <__udivsi3>
    d1f8:	1025883a 	mov	r18,r2
    d1fc:	00bfffd4 	movui	r2,65535
    d200:	1480562e 	bgeu	r2,r18,d35c <__udivdi3+0x308>
    d204:	00804034 	movhi	r2,256
    d208:	10bfffc4 	addi	r2,r2,-1
    d20c:	1480e32e 	bgeu	r2,r18,d59c <__udivdi3+0x548>
    d210:	00800604 	movi	r2,24
    d214:	1007883a 	mov	r3,r2
    d218:	9084d83a 	srl	r2,r18,r2
    d21c:	010000b4 	movhi	r4,2
    d220:	2103fb04 	addi	r4,r4,4076
    d224:	2085883a 	add	r2,r4,r2
    d228:	10800003 	ldbu	r2,0(r2)
    d22c:	10c5883a 	add	r2,r2,r3
    d230:	00c00804 	movi	r3,32
    d234:	1887c83a 	sub	r3,r3,r2
    d238:	1800911e 	bne	r3,zero,d480 <__udivdi3+0x42c>
    d23c:	9028d43a 	srli	r20,r18,16
    d240:	84a1c83a 	sub	r16,r16,r18
    d244:	957fffcc 	andi	r21,r18,65535
    d248:	00c00044 	movi	r3,1
    d24c:	8009883a 	mov	r4,r16
    d250:	a00b883a 	mov	r5,r20
    d254:	d8c00015 	stw	r3,0(sp)
    d258:	000dcc80 	call	dcc8 <__umodsi3>
    d25c:	8009883a 	mov	r4,r16
    d260:	a00b883a 	mov	r5,r20
    d264:	1027883a 	mov	r19,r2
    d268:	000dcc00 	call	dcc0 <__udivsi3>
    d26c:	1021883a 	mov	r16,r2
    d270:	880cd43a 	srli	r6,r17,16
    d274:	9804943a 	slli	r2,r19,16
    d278:	8567383a 	mul	r19,r16,r21
    d27c:	d8c00017 	ldw	r3,0(sp)
    d280:	1188b03a 	or	r4,r2,r6
    d284:	24c0052e 	bgeu	r4,r19,d29c <__udivdi3+0x248>
    d288:	2489883a 	add	r4,r4,r18
    d28c:	80bfffc4 	addi	r2,r16,-1
    d290:	24800136 	bltu	r4,r18,d298 <__udivdi3+0x244>
    d294:	24c0d936 	bltu	r4,r19,d5fc <__udivdi3+0x5a8>
    d298:	1021883a 	mov	r16,r2
    d29c:	24e7c83a 	sub	r19,r4,r19
    d2a0:	9809883a 	mov	r4,r19
    d2a4:	a00b883a 	mov	r5,r20
    d2a8:	d8c00015 	stw	r3,0(sp)
    d2ac:	000dcc80 	call	dcc8 <__umodsi3>
    d2b0:	102d883a 	mov	r22,r2
    d2b4:	9809883a 	mov	r4,r19
    d2b8:	a00b883a 	mov	r5,r20
    d2bc:	000dcc00 	call	dcc0 <__udivsi3>
    d2c0:	b02c943a 	slli	r22,r22,16
    d2c4:	156b383a 	mul	r21,r2,r21
    d2c8:	8c7fffcc 	andi	r17,r17,65535
    d2cc:	b462b03a 	or	r17,r22,r17
    d2d0:	d8c00017 	ldw	r3,0(sp)
    d2d4:	8d40052e 	bgeu	r17,r21,d2ec <__udivdi3+0x298>
    d2d8:	8ca3883a 	add	r17,r17,r18
    d2dc:	113fffc4 	addi	r4,r2,-1
    d2e0:	8c809a36 	bltu	r17,r18,d54c <__udivdi3+0x4f8>
    d2e4:	8d40992e 	bgeu	r17,r21,d54c <__udivdi3+0x4f8>
    d2e8:	10bfff84 	addi	r2,r2,-2
    d2ec:	8020943a 	slli	r16,r16,16
    d2f0:	1404b03a 	or	r2,r2,r16
    d2f4:	00000206 	br	d300 <__udivdi3+0x2ac>
    d2f8:	0007883a 	mov	r3,zero
    d2fc:	0005883a 	mov	r2,zero
    d300:	dfc00a17 	ldw	ra,40(sp)
    d304:	df000917 	ldw	fp,36(sp)
    d308:	ddc00817 	ldw	r23,32(sp)
    d30c:	dd800717 	ldw	r22,28(sp)
    d310:	dd400617 	ldw	r21,24(sp)
    d314:	dd000517 	ldw	r20,20(sp)
    d318:	dcc00417 	ldw	r19,16(sp)
    d31c:	dc800317 	ldw	r18,12(sp)
    d320:	dc400217 	ldw	r17,8(sp)
    d324:	dc000117 	ldw	r16,4(sp)
    d328:	dec00b04 	addi	sp,sp,44
    d32c:	f800283a 	ret
    d330:	00803fc4 	movi	r2,255
    d334:	11c0932e 	bgeu	r2,r7,d584 <__udivdi3+0x530>
    d338:	00c00204 	movi	r3,8
    d33c:	180b883a 	mov	r5,r3
    d340:	003f9c06 	br	d1b4 <__alt_mem_Flash_flash_data+0xf400d1b4>
    d344:	00804034 	movhi	r2,256
    d348:	10bfffc4 	addi	r2,r2,-1
    d34c:	1180902e 	bgeu	r2,r6,d590 <__udivdi3+0x53c>
    d350:	00800604 	movi	r2,24
    d354:	1007883a 	mov	r3,r2
    d358:	003f5606 	br	d0b4 <__alt_mem_Flash_flash_data+0xf400d0b4>
    d35c:	00803fc4 	movi	r2,255
    d360:	1480912e 	bgeu	r2,r18,d5a8 <__udivdi3+0x554>
    d364:	00800204 	movi	r2,8
    d368:	1007883a 	mov	r3,r2
    d36c:	003faa06 	br	d218 <__alt_mem_Flash_flash_data+0xf400d218>
    d370:	30eed83a 	srl	r23,r6,r3
    d374:	3c8e983a 	sll	r7,r7,r18
    d378:	80f8d83a 	srl	fp,r16,r3
    d37c:	98c6d83a 	srl	r3,r19,r3
    d380:	3deeb03a 	or	r23,r7,r23
    d384:	b828d43a 	srli	r20,r23,16
    d388:	84a0983a 	sll	r16,r16,r18
    d38c:	e009883a 	mov	r4,fp
    d390:	a00b883a 	mov	r5,r20
    d394:	80e2b03a 	or	r17,r16,r3
    d398:	34aa983a 	sll	r21,r6,r18
    d39c:	000dcc80 	call	dcc8 <__umodsi3>
    d3a0:	e009883a 	mov	r4,fp
    d3a4:	a00b883a 	mov	r5,r20
    d3a8:	102d883a 	mov	r22,r2
    d3ac:	000dcc00 	call	dcc0 <__udivsi3>
    d3b0:	1021883a 	mov	r16,r2
    d3b4:	bf3fffcc 	andi	fp,r23,65535
    d3b8:	b004943a 	slli	r2,r22,16
    d3bc:	8808d43a 	srli	r4,r17,16
    d3c0:	872d383a 	mul	r22,r16,fp
    d3c4:	1104b03a 	or	r2,r2,r4
    d3c8:	1580042e 	bgeu	r2,r22,d3dc <__udivdi3+0x388>
    d3cc:	15c5883a 	add	r2,r2,r23
    d3d0:	80ffffc4 	addi	r3,r16,-1
    d3d4:	15c0812e 	bgeu	r2,r23,d5dc <__udivdi3+0x588>
    d3d8:	1821883a 	mov	r16,r3
    d3dc:	15adc83a 	sub	r22,r2,r22
    d3e0:	b009883a 	mov	r4,r22
    d3e4:	a00b883a 	mov	r5,r20
    d3e8:	000dcc80 	call	dcc8 <__umodsi3>
    d3ec:	a00b883a 	mov	r5,r20
    d3f0:	b009883a 	mov	r4,r22
    d3f4:	d8800015 	stw	r2,0(sp)
    d3f8:	000dcc00 	call	dcc0 <__udivsi3>
    d3fc:	d8c00017 	ldw	r3,0(sp)
    d400:	170b383a 	mul	r5,r2,fp
    d404:	8c7fffcc 	andi	r17,r17,65535
    d408:	1806943a 	slli	r3,r3,16
    d40c:	1c46b03a 	or	r3,r3,r17
    d410:	1940042e 	bgeu	r3,r5,d424 <__udivdi3+0x3d0>
    d414:	1dc7883a 	add	r3,r3,r23
    d418:	113fffc4 	addi	r4,r2,-1
    d41c:	1dc06b2e 	bgeu	r3,r23,d5cc <__udivdi3+0x578>
    d420:	2005883a 	mov	r2,r4
    d424:	8020943a 	slli	r16,r16,16
    d428:	a9ffffcc 	andi	r7,r21,65535
    d42c:	a82ad43a 	srli	r21,r21,16
    d430:	1404b03a 	or	r2,r2,r16
    d434:	113fffcc 	andi	r4,r2,65535
    d438:	100cd43a 	srli	r6,r2,16
    d43c:	21d3383a 	mul	r9,r4,r7
    d440:	2549383a 	mul	r4,r4,r21
    d444:	31cf383a 	mul	r7,r6,r7
    d448:	4810d43a 	srli	r8,r9,16
    d44c:	1947c83a 	sub	r3,r3,r5
    d450:	3909883a 	add	r4,r7,r4
    d454:	2209883a 	add	r4,r4,r8
    d458:	354d383a 	mul	r6,r6,r21
    d45c:	21c0022e 	bgeu	r4,r7,d468 <__udivdi3+0x414>
    d460:	01400074 	movhi	r5,1
    d464:	314d883a 	add	r6,r6,r5
    d468:	202ad43a 	srli	r21,r4,16
    d46c:	354d883a 	add	r6,r6,r21
    d470:	19803f36 	bltu	r3,r6,d570 <__udivdi3+0x51c>
    d474:	19803926 	beq	r3,r6,d55c <__udivdi3+0x508>
    d478:	0007883a 	mov	r3,zero
    d47c:	003fa006 	br	d300 <__alt_mem_Flash_flash_data+0xf400d300>
    d480:	90e4983a 	sll	r18,r18,r3
    d484:	80aad83a 	srl	r21,r16,r2
    d488:	80e0983a 	sll	r16,r16,r3
    d48c:	9028d43a 	srli	r20,r18,16
    d490:	9884d83a 	srl	r2,r19,r2
    d494:	a809883a 	mov	r4,r21
    d498:	a00b883a 	mov	r5,r20
    d49c:	80acb03a 	or	r22,r16,r2
    d4a0:	98e2983a 	sll	r17,r19,r3
    d4a4:	000dcc80 	call	dcc8 <__umodsi3>
    d4a8:	a809883a 	mov	r4,r21
    d4ac:	a00b883a 	mov	r5,r20
    d4b0:	1021883a 	mov	r16,r2
    d4b4:	000dcc00 	call	dcc0 <__udivsi3>
    d4b8:	957fffcc 	andi	r21,r18,65535
    d4bc:	8020943a 	slli	r16,r16,16
    d4c0:	b00ad43a 	srli	r5,r22,16
    d4c4:	1567383a 	mul	r19,r2,r21
    d4c8:	102f883a 	mov	r23,r2
    d4cc:	8148b03a 	or	r4,r16,r5
    d4d0:	24c0062e 	bgeu	r4,r19,d4ec <__udivdi3+0x498>
    d4d4:	2489883a 	add	r4,r4,r18
    d4d8:	10bfffc4 	addi	r2,r2,-1
    d4dc:	24804536 	bltu	r4,r18,d5f4 <__udivdi3+0x5a0>
    d4e0:	24c0442e 	bgeu	r4,r19,d5f4 <__udivdi3+0x5a0>
    d4e4:	bdffff84 	addi	r23,r23,-2
    d4e8:	2489883a 	add	r4,r4,r18
    d4ec:	24e7c83a 	sub	r19,r4,r19
    d4f0:	9809883a 	mov	r4,r19
    d4f4:	a00b883a 	mov	r5,r20
    d4f8:	000dcc80 	call	dcc8 <__umodsi3>
    d4fc:	1021883a 	mov	r16,r2
    d500:	9809883a 	mov	r4,r19
    d504:	a00b883a 	mov	r5,r20
    d508:	000dcc00 	call	dcc0 <__udivsi3>
    d50c:	8020943a 	slli	r16,r16,16
    d510:	1007883a 	mov	r3,r2
    d514:	1545383a 	mul	r2,r2,r21
    d518:	b13fffcc 	andi	r4,r22,65535
    d51c:	8108b03a 	or	r4,r16,r4
    d520:	2080062e 	bgeu	r4,r2,d53c <__udivdi3+0x4e8>
    d524:	2489883a 	add	r4,r4,r18
    d528:	197fffc4 	addi	r5,r3,-1
    d52c:	24802f36 	bltu	r4,r18,d5ec <__udivdi3+0x598>
    d530:	20802e2e 	bgeu	r4,r2,d5ec <__udivdi3+0x598>
    d534:	18ffff84 	addi	r3,r3,-2
    d538:	2489883a 	add	r4,r4,r18
    d53c:	b82e943a 	slli	r23,r23,16
    d540:	20a1c83a 	sub	r16,r4,r2
    d544:	1dc6b03a 	or	r3,r3,r23
    d548:	003f4006 	br	d24c <__alt_mem_Flash_flash_data+0xf400d24c>
    d54c:	2005883a 	mov	r2,r4
    d550:	003f6606 	br	d2ec <__alt_mem_Flash_flash_data+0xf400d2ec>
    d554:	1805883a 	mov	r2,r3
    d558:	003f0a06 	br	d184 <__alt_mem_Flash_flash_data+0xf400d184>
    d55c:	2006943a 	slli	r3,r4,16
    d560:	9c88983a 	sll	r4,r19,r18
    d564:	4a7fffcc 	andi	r9,r9,65535
    d568:	1a47883a 	add	r3,r3,r9
    d56c:	20ffc22e 	bgeu	r4,r3,d478 <__alt_mem_Flash_flash_data+0xf400d478>
    d570:	10bfffc4 	addi	r2,r2,-1
    d574:	003fc006 	br	d478 <__alt_mem_Flash_flash_data+0xf400d478>
    d578:	00c00404 	movi	r3,16
    d57c:	180b883a 	mov	r5,r3
    d580:	003f0c06 	br	d1b4 <__alt_mem_Flash_flash_data+0xf400d1b4>
    d584:	0007883a 	mov	r3,zero
    d588:	000b883a 	mov	r5,zero
    d58c:	003f0906 	br	d1b4 <__alt_mem_Flash_flash_data+0xf400d1b4>
    d590:	00800404 	movi	r2,16
    d594:	1007883a 	mov	r3,r2
    d598:	003ec606 	br	d0b4 <__alt_mem_Flash_flash_data+0xf400d0b4>
    d59c:	00800404 	movi	r2,16
    d5a0:	1007883a 	mov	r3,r2
    d5a4:	003f1c06 	br	d218 <__alt_mem_Flash_flash_data+0xf400d218>
    d5a8:	0005883a 	mov	r2,zero
    d5ac:	0007883a 	mov	r3,zero
    d5b0:	003f1906 	br	d218 <__alt_mem_Flash_flash_data+0xf400d218>
    d5b4:	0005883a 	mov	r2,zero
    d5b8:	0007883a 	mov	r3,zero
    d5bc:	003ebd06 	br	d0b4 <__alt_mem_Flash_flash_data+0xf400d0b4>
    d5c0:	0007883a 	mov	r3,zero
    d5c4:	00800044 	movi	r2,1
    d5c8:	003f4d06 	br	d300 <__alt_mem_Flash_flash_data+0xf400d300>
    d5cc:	197f942e 	bgeu	r3,r5,d420 <__alt_mem_Flash_flash_data+0xf400d420>
    d5d0:	10bfff84 	addi	r2,r2,-2
    d5d4:	1dc7883a 	add	r3,r3,r23
    d5d8:	003f9206 	br	d424 <__alt_mem_Flash_flash_data+0xf400d424>
    d5dc:	15bf7e2e 	bgeu	r2,r22,d3d8 <__alt_mem_Flash_flash_data+0xf400d3d8>
    d5e0:	843fff84 	addi	r16,r16,-2
    d5e4:	15c5883a 	add	r2,r2,r23
    d5e8:	003f7c06 	br	d3dc <__alt_mem_Flash_flash_data+0xf400d3dc>
    d5ec:	2807883a 	mov	r3,r5
    d5f0:	003fd206 	br	d53c <__alt_mem_Flash_flash_data+0xf400d53c>
    d5f4:	102f883a 	mov	r23,r2
    d5f8:	003fbc06 	br	d4ec <__alt_mem_Flash_flash_data+0xf400d4ec>
    d5fc:	843fff84 	addi	r16,r16,-2
    d600:	2489883a 	add	r4,r4,r18
    d604:	003f2506 	br	d29c <__alt_mem_Flash_flash_data+0xf400d29c>
    d608:	843fff84 	addi	r16,r16,-2
    d60c:	1485883a 	add	r2,r2,r18
    d610:	003eca06 	br	d13c <__alt_mem_Flash_flash_data+0xf400d13c>

0000d614 <__umoddi3>:
    d614:	defff404 	addi	sp,sp,-48
    d618:	ddc00915 	stw	r23,36(sp)
    d61c:	dc400315 	stw	r17,12(sp)
    d620:	dc000215 	stw	r16,8(sp)
    d624:	dfc00b15 	stw	ra,44(sp)
    d628:	df000a15 	stw	fp,40(sp)
    d62c:	dd800815 	stw	r22,32(sp)
    d630:	dd400715 	stw	r21,28(sp)
    d634:	dd000615 	stw	r20,24(sp)
    d638:	dcc00515 	stw	r19,20(sp)
    d63c:	dc800415 	stw	r18,16(sp)
    d640:	2021883a 	mov	r16,r4
    d644:	2823883a 	mov	r17,r5
    d648:	282f883a 	mov	r23,r5
    d64c:	3800381e 	bne	r7,zero,d730 <__umoddi3+0x11c>
    d650:	3027883a 	mov	r19,r6
    d654:	2029883a 	mov	r20,r4
    d658:	29804e2e 	bgeu	r5,r6,d794 <__umoddi3+0x180>
    d65c:	00bfffd4 	movui	r2,65535
    d660:	11809c36 	bltu	r2,r6,d8d4 <__umoddi3+0x2c0>
    d664:	00803fc4 	movi	r2,255
    d668:	11813b2e 	bgeu	r2,r6,db58 <__umoddi3+0x544>
    d66c:	01400204 	movi	r5,8
    d670:	2805883a 	mov	r2,r5
    d674:	314ad83a 	srl	r5,r6,r5
    d678:	00c000b4 	movhi	r3,2
    d67c:	18c3fb04 	addi	r3,r3,4076
    d680:	194b883a 	add	r5,r3,r5
    d684:	29000003 	ldbu	r4,0(r5)
    d688:	2089883a 	add	r4,r4,r2
    d68c:	00800804 	movi	r2,32
    d690:	1105c83a 	sub	r2,r2,r4
    d694:	1000ec26 	beq	r2,zero,da48 <__umoddi3+0x434>
    d698:	88a2983a 	sll	r17,r17,r2
    d69c:	8108d83a 	srl	r4,r16,r4
    d6a0:	30a6983a 	sll	r19,r6,r2
    d6a4:	80a8983a 	sll	r20,r16,r2
    d6a8:	1025883a 	mov	r18,r2
    d6ac:	892eb03a 	or	r23,r17,r4
    d6b0:	982cd43a 	srli	r22,r19,16
    d6b4:	b809883a 	mov	r4,r23
    d6b8:	9d7fffcc 	andi	r21,r19,65535
    d6bc:	b00b883a 	mov	r5,r22
    d6c0:	000dcc80 	call	dcc8 <__umodsi3>
    d6c4:	b809883a 	mov	r4,r23
    d6c8:	b00b883a 	mov	r5,r22
    d6cc:	1021883a 	mov	r16,r2
    d6d0:	000dcc00 	call	dcc0 <__udivsi3>
    d6d4:	8020943a 	slli	r16,r16,16
    d6d8:	a00cd43a 	srli	r6,r20,16
    d6dc:	1545383a 	mul	r2,r2,r21
    d6e0:	8188b03a 	or	r4,r16,r6
    d6e4:	2080042e 	bgeu	r4,r2,d6f8 <__umoddi3+0xe4>
    d6e8:	24c9883a 	add	r4,r4,r19
    d6ec:	24c00236 	bltu	r4,r19,d6f8 <__umoddi3+0xe4>
    d6f0:	2080012e 	bgeu	r4,r2,d6f8 <__umoddi3+0xe4>
    d6f4:	24c9883a 	add	r4,r4,r19
    d6f8:	20a3c83a 	sub	r17,r4,r2
    d6fc:	8809883a 	mov	r4,r17
    d700:	b00b883a 	mov	r5,r22
    d704:	000dcc80 	call	dcc8 <__umodsi3>
    d708:	8809883a 	mov	r4,r17
    d70c:	b00b883a 	mov	r5,r22
    d710:	1021883a 	mov	r16,r2
    d714:	000dcc00 	call	dcc0 <__udivsi3>
    d718:	8006943a 	slli	r3,r16,16
    d71c:	1545383a 	mul	r2,r2,r21
    d720:	a13fffcc 	andi	r4,r20,65535
    d724:	1906b03a 	or	r3,r3,r4
    d728:	1880532e 	bgeu	r3,r2,d878 <__umoddi3+0x264>
    d72c:	00004e06 	br	d868 <__umoddi3+0x254>
    d730:	29c05536 	bltu	r5,r7,d888 <__umoddi3+0x274>
    d734:	00bfffd4 	movui	r2,65535
    d738:	11c0612e 	bgeu	r2,r7,d8c0 <__umoddi3+0x2ac>
    d73c:	00804034 	movhi	r2,256
    d740:	10bfffc4 	addi	r2,r2,-1
    d744:	11c0f82e 	bgeu	r2,r7,db28 <__umoddi3+0x514>
    d748:	01400604 	movi	r5,24
    d74c:	282b883a 	mov	r21,r5
    d750:	394ad83a 	srl	r5,r7,r5
    d754:	00c000b4 	movhi	r3,2
    d758:	18c3fb04 	addi	r3,r3,4076
    d75c:	194b883a 	add	r5,r3,r5
    d760:	28800003 	ldbu	r2,0(r5)
    d764:	00c00804 	movi	r3,32
    d768:	156b883a 	add	r21,r2,r21
    d76c:	1d69c83a 	sub	r20,r3,r21
    d770:	a000631e 	bne	r20,zero,d900 <__umoddi3+0x2ec>
    d774:	3c400136 	bltu	r7,r17,d77c <__umoddi3+0x168>
    d778:	81810436 	bltu	r16,r6,db8c <__umoddi3+0x578>
    d77c:	8185c83a 	sub	r2,r16,r6
    d780:	89e3c83a 	sub	r17,r17,r7
    d784:	8087803a 	cmpltu	r3,r16,r2
    d788:	88efc83a 	sub	r23,r17,r3
    d78c:	b807883a 	mov	r3,r23
    d790:	00003f06 	br	d890 <__umoddi3+0x27c>
    d794:	3000041e 	bne	r6,zero,d7a8 <__umoddi3+0x194>
    d798:	01000044 	movi	r4,1
    d79c:	000b883a 	mov	r5,zero
    d7a0:	000dcc00 	call	dcc0 <__udivsi3>
    d7a4:	1027883a 	mov	r19,r2
    d7a8:	00bfffd4 	movui	r2,65535
    d7ac:	14c04f2e 	bgeu	r2,r19,d8ec <__umoddi3+0x2d8>
    d7b0:	00804034 	movhi	r2,256
    d7b4:	10bfffc4 	addi	r2,r2,-1
    d7b8:	14c0e42e 	bgeu	r2,r19,db4c <__umoddi3+0x538>
    d7bc:	00800604 	movi	r2,24
    d7c0:	1007883a 	mov	r3,r2
    d7c4:	9884d83a 	srl	r2,r19,r2
    d7c8:	010000b4 	movhi	r4,2
    d7cc:	2103fb04 	addi	r4,r4,4076
    d7d0:	2085883a 	add	r2,r4,r2
    d7d4:	11000003 	ldbu	r4,0(r2)
    d7d8:	00800804 	movi	r2,32
    d7dc:	20c7883a 	add	r3,r4,r3
    d7e0:	10c5c83a 	sub	r2,r2,r3
    d7e4:	10009a1e 	bne	r2,zero,da50 <__umoddi3+0x43c>
    d7e8:	982cd43a 	srli	r22,r19,16
    d7ec:	8ce3c83a 	sub	r17,r17,r19
    d7f0:	9c3fffcc 	andi	r16,r19,65535
    d7f4:	0025883a 	mov	r18,zero
    d7f8:	8809883a 	mov	r4,r17
    d7fc:	b00b883a 	mov	r5,r22
    d800:	000dcc80 	call	dcc8 <__umodsi3>
    d804:	8809883a 	mov	r4,r17
    d808:	b00b883a 	mov	r5,r22
    d80c:	102b883a 	mov	r21,r2
    d810:	000dcc00 	call	dcc0 <__udivsi3>
    d814:	a806943a 	slli	r3,r21,16
    d818:	a008d43a 	srli	r4,r20,16
    d81c:	1405383a 	mul	r2,r2,r16
    d820:	190cb03a 	or	r6,r3,r4
    d824:	3080032e 	bgeu	r6,r2,d834 <__umoddi3+0x220>
    d828:	34cd883a 	add	r6,r6,r19
    d82c:	34c00136 	bltu	r6,r19,d834 <__umoddi3+0x220>
    d830:	3080d436 	bltu	r6,r2,db84 <__umoddi3+0x570>
    d834:	30abc83a 	sub	r21,r6,r2
    d838:	a809883a 	mov	r4,r21
    d83c:	b00b883a 	mov	r5,r22
    d840:	000dcc80 	call	dcc8 <__umodsi3>
    d844:	1023883a 	mov	r17,r2
    d848:	a809883a 	mov	r4,r21
    d84c:	b00b883a 	mov	r5,r22
    d850:	000dcc00 	call	dcc0 <__udivsi3>
    d854:	8822943a 	slli	r17,r17,16
    d858:	1405383a 	mul	r2,r2,r16
    d85c:	a13fffcc 	andi	r4,r20,65535
    d860:	8906b03a 	or	r3,r17,r4
    d864:	1880042e 	bgeu	r3,r2,d878 <__umoddi3+0x264>
    d868:	1cc7883a 	add	r3,r3,r19
    d86c:	1cc00236 	bltu	r3,r19,d878 <__umoddi3+0x264>
    d870:	1880012e 	bgeu	r3,r2,d878 <__umoddi3+0x264>
    d874:	1cc7883a 	add	r3,r3,r19
    d878:	1887c83a 	sub	r3,r3,r2
    d87c:	1c84d83a 	srl	r2,r3,r18
    d880:	0007883a 	mov	r3,zero
    d884:	00000206 	br	d890 <__umoddi3+0x27c>
    d888:	2005883a 	mov	r2,r4
    d88c:	2807883a 	mov	r3,r5
    d890:	dfc00b17 	ldw	ra,44(sp)
    d894:	df000a17 	ldw	fp,40(sp)
    d898:	ddc00917 	ldw	r23,36(sp)
    d89c:	dd800817 	ldw	r22,32(sp)
    d8a0:	dd400717 	ldw	r21,28(sp)
    d8a4:	dd000617 	ldw	r20,24(sp)
    d8a8:	dcc00517 	ldw	r19,20(sp)
    d8ac:	dc800417 	ldw	r18,16(sp)
    d8b0:	dc400317 	ldw	r17,12(sp)
    d8b4:	dc000217 	ldw	r16,8(sp)
    d8b8:	dec00c04 	addi	sp,sp,48
    d8bc:	f800283a 	ret
    d8c0:	00803fc4 	movi	r2,255
    d8c4:	11c0952e 	bgeu	r2,r7,db1c <__umoddi3+0x508>
    d8c8:	01400204 	movi	r5,8
    d8cc:	282b883a 	mov	r21,r5
    d8d0:	003f9f06 	br	d750 <__alt_mem_Flash_flash_data+0xf400d750>
    d8d4:	00804034 	movhi	r2,256
    d8d8:	10bfffc4 	addi	r2,r2,-1
    d8dc:	1180952e 	bgeu	r2,r6,db34 <__umoddi3+0x520>
    d8e0:	01400604 	movi	r5,24
    d8e4:	2805883a 	mov	r2,r5
    d8e8:	003f6206 	br	d674 <__alt_mem_Flash_flash_data+0xf400d674>
    d8ec:	00803fc4 	movi	r2,255
    d8f0:	14c0932e 	bgeu	r2,r19,db40 <__umoddi3+0x52c>
    d8f4:	00800204 	movi	r2,8
    d8f8:	1007883a 	mov	r3,r2
    d8fc:	003fb106 	br	d7c4 <__alt_mem_Flash_flash_data+0xf400d7c4>
    d900:	3548d83a 	srl	r4,r6,r21
    d904:	3d0e983a 	sll	r7,r7,r20
    d908:	8d10983a 	sll	r8,r17,r20
    d90c:	8d6cd83a 	srl	r22,r17,r21
    d910:	3922b03a 	or	r17,r7,r4
    d914:	882ed43a 	srli	r23,r17,16
    d918:	8564d83a 	srl	r18,r16,r21
    d91c:	b009883a 	mov	r4,r22
    d920:	b80b883a 	mov	r5,r23
    d924:	44a4b03a 	or	r18,r8,r18
    d928:	3526983a 	sll	r19,r6,r20
    d92c:	000dcc80 	call	dcc8 <__umodsi3>
    d930:	b009883a 	mov	r4,r22
    d934:	b80b883a 	mov	r5,r23
    d938:	1039883a 	mov	fp,r2
    d93c:	000dcc00 	call	dcc0 <__udivsi3>
    d940:	102d883a 	mov	r22,r2
    d944:	8a3fffcc 	andi	r8,r17,65535
    d948:	e004943a 	slli	r2,fp,16
    d94c:	900cd43a 	srli	r6,r18,16
    d950:	b239383a 	mul	fp,r22,r8
    d954:	8520983a 	sll	r16,r16,r20
    d958:	118ab03a 	or	r5,r2,r6
    d95c:	2f00042e 	bgeu	r5,fp,d970 <__umoddi3+0x35c>
    d960:	2c4b883a 	add	r5,r5,r17
    d964:	b0bfffc4 	addi	r2,r22,-1
    d968:	2c40822e 	bgeu	r5,r17,db74 <__umoddi3+0x560>
    d96c:	102d883a 	mov	r22,r2
    d970:	2f39c83a 	sub	fp,r5,fp
    d974:	e009883a 	mov	r4,fp
    d978:	b80b883a 	mov	r5,r23
    d97c:	da000115 	stw	r8,4(sp)
    d980:	000dcc80 	call	dcc8 <__umodsi3>
    d984:	e009883a 	mov	r4,fp
    d988:	b80b883a 	mov	r5,r23
    d98c:	d8800015 	stw	r2,0(sp)
    d990:	000dcc00 	call	dcc0 <__udivsi3>
    d994:	d9800017 	ldw	r6,0(sp)
    d998:	da000117 	ldw	r8,4(sp)
    d99c:	94bfffcc 	andi	r18,r18,65535
    d9a0:	300c943a 	slli	r6,r6,16
    d9a4:	1209383a 	mul	r4,r2,r8
    d9a8:	3490b03a 	or	r8,r6,r18
    d9ac:	4100042e 	bgeu	r8,r4,d9c0 <__umoddi3+0x3ac>
    d9b0:	4451883a 	add	r8,r8,r17
    d9b4:	10ffffc4 	addi	r3,r2,-1
    d9b8:	44406a2e 	bgeu	r8,r17,db64 <__umoddi3+0x550>
    d9bc:	1805883a 	mov	r2,r3
    d9c0:	b012943a 	slli	r9,r22,16
    d9c4:	9abfffcc 	andi	r10,r19,65535
    d9c8:	980ed43a 	srli	r7,r19,16
    d9cc:	124ab03a 	or	r5,r2,r9
    d9d0:	2a7fffcc 	andi	r9,r5,65535
    d9d4:	280ad43a 	srli	r5,r5,16
    d9d8:	4a8d383a 	mul	r6,r9,r10
    d9dc:	49d3383a 	mul	r9,r9,r7
    d9e0:	2a95383a 	mul	r10,r5,r10
    d9e4:	3004d43a 	srli	r2,r6,16
    d9e8:	4111c83a 	sub	r8,r8,r4
    d9ec:	5253883a 	add	r9,r10,r9
    d9f0:	4893883a 	add	r9,r9,r2
    d9f4:	29cb383a 	mul	r5,r5,r7
    d9f8:	4a80022e 	bgeu	r9,r10,da04 <__umoddi3+0x3f0>
    d9fc:	00800074 	movhi	r2,1
    da00:	288b883a 	add	r5,r5,r2
    da04:	4808d43a 	srli	r4,r9,16
    da08:	4812943a 	slli	r9,r9,16
    da0c:	31bfffcc 	andi	r6,r6,65535
    da10:	290b883a 	add	r5,r5,r4
    da14:	498d883a 	add	r6,r9,r6
    da18:	41403a36 	bltu	r8,r5,db04 <__umoddi3+0x4f0>
    da1c:	41405d26 	beq	r8,r5,db94 <__umoddi3+0x580>
    da20:	4149c83a 	sub	r4,r8,r5
    da24:	300f883a 	mov	r7,r6
    da28:	81cfc83a 	sub	r7,r16,r7
    da2c:	81c7803a 	cmpltu	r3,r16,r7
    da30:	20c7c83a 	sub	r3,r4,r3
    da34:	1d44983a 	sll	r2,r3,r21
    da38:	3d0ed83a 	srl	r7,r7,r20
    da3c:	1d06d83a 	srl	r3,r3,r20
    da40:	11c4b03a 	or	r2,r2,r7
    da44:	003f9206 	br	d890 <__alt_mem_Flash_flash_data+0xf400d890>
    da48:	0025883a 	mov	r18,zero
    da4c:	003f1806 	br	d6b0 <__alt_mem_Flash_flash_data+0xf400d6b0>
    da50:	98a6983a 	sll	r19,r19,r2
    da54:	88e8d83a 	srl	r20,r17,r3
    da58:	80c6d83a 	srl	r3,r16,r3
    da5c:	982cd43a 	srli	r22,r19,16
    da60:	88a2983a 	sll	r17,r17,r2
    da64:	a009883a 	mov	r4,r20
    da68:	b00b883a 	mov	r5,r22
    da6c:	88eab03a 	or	r21,r17,r3
    da70:	1025883a 	mov	r18,r2
    da74:	000dcc80 	call	dcc8 <__umodsi3>
    da78:	a009883a 	mov	r4,r20
    da7c:	b00b883a 	mov	r5,r22
    da80:	1023883a 	mov	r17,r2
    da84:	000dcc00 	call	dcc0 <__udivsi3>
    da88:	9f3fffcc 	andi	fp,r19,65535
    da8c:	8822943a 	slli	r17,r17,16
    da90:	a80ad43a 	srli	r5,r21,16
    da94:	1705383a 	mul	r2,r2,fp
    da98:	84a8983a 	sll	r20,r16,r18
    da9c:	8948b03a 	or	r4,r17,r5
    daa0:	2080042e 	bgeu	r4,r2,dab4 <__umoddi3+0x4a0>
    daa4:	24c9883a 	add	r4,r4,r19
    daa8:	24c00236 	bltu	r4,r19,dab4 <__umoddi3+0x4a0>
    daac:	2080012e 	bgeu	r4,r2,dab4 <__umoddi3+0x4a0>
    dab0:	24c9883a 	add	r4,r4,r19
    dab4:	20afc83a 	sub	r23,r4,r2
    dab8:	b809883a 	mov	r4,r23
    dabc:	b00b883a 	mov	r5,r22
    dac0:	000dcc80 	call	dcc8 <__umodsi3>
    dac4:	1023883a 	mov	r17,r2
    dac8:	b809883a 	mov	r4,r23
    dacc:	b00b883a 	mov	r5,r22
    dad0:	000dcc00 	call	dcc0 <__udivsi3>
    dad4:	8822943a 	slli	r17,r17,16
    dad8:	1705383a 	mul	r2,r2,fp
    dadc:	a93fffcc 	andi	r4,r21,65535
    dae0:	8908b03a 	or	r4,r17,r4
    dae4:	2080042e 	bgeu	r4,r2,daf8 <__umoddi3+0x4e4>
    dae8:	24c9883a 	add	r4,r4,r19
    daec:	24c00236 	bltu	r4,r19,daf8 <__umoddi3+0x4e4>
    daf0:	2080012e 	bgeu	r4,r2,daf8 <__umoddi3+0x4e4>
    daf4:	24c9883a 	add	r4,r4,r19
    daf8:	20a3c83a 	sub	r17,r4,r2
    dafc:	e021883a 	mov	r16,fp
    db00:	003f3d06 	br	d7f8 <__alt_mem_Flash_flash_data+0xf400d7f8>
    db04:	34cfc83a 	sub	r7,r6,r19
    db08:	2c4bc83a 	sub	r5,r5,r17
    db0c:	31cd803a 	cmpltu	r6,r6,r7
    db10:	298dc83a 	sub	r6,r5,r6
    db14:	4189c83a 	sub	r4,r8,r6
    db18:	003fc306 	br	da28 <__alt_mem_Flash_flash_data+0xf400da28>
    db1c:	000b883a 	mov	r5,zero
    db20:	002b883a 	mov	r21,zero
    db24:	003f0a06 	br	d750 <__alt_mem_Flash_flash_data+0xf400d750>
    db28:	01400404 	movi	r5,16
    db2c:	282b883a 	mov	r21,r5
    db30:	003f0706 	br	d750 <__alt_mem_Flash_flash_data+0xf400d750>
    db34:	01400404 	movi	r5,16
    db38:	2805883a 	mov	r2,r5
    db3c:	003ecd06 	br	d674 <__alt_mem_Flash_flash_data+0xf400d674>
    db40:	0005883a 	mov	r2,zero
    db44:	0007883a 	mov	r3,zero
    db48:	003f1e06 	br	d7c4 <__alt_mem_Flash_flash_data+0xf400d7c4>
    db4c:	00800404 	movi	r2,16
    db50:	1007883a 	mov	r3,r2
    db54:	003f1b06 	br	d7c4 <__alt_mem_Flash_flash_data+0xf400d7c4>
    db58:	000b883a 	mov	r5,zero
    db5c:	0005883a 	mov	r2,zero
    db60:	003ec406 	br	d674 <__alt_mem_Flash_flash_data+0xf400d674>
    db64:	413f952e 	bgeu	r8,r4,d9bc <__alt_mem_Flash_flash_data+0xf400d9bc>
    db68:	10bfff84 	addi	r2,r2,-2
    db6c:	4451883a 	add	r8,r8,r17
    db70:	003f9306 	br	d9c0 <__alt_mem_Flash_flash_data+0xf400d9c0>
    db74:	2f3f7d2e 	bgeu	r5,fp,d96c <__alt_mem_Flash_flash_data+0xf400d96c>
    db78:	b5bfff84 	addi	r22,r22,-2
    db7c:	2c4b883a 	add	r5,r5,r17
    db80:	003f7b06 	br	d970 <__alt_mem_Flash_flash_data+0xf400d970>
    db84:	34cd883a 	add	r6,r6,r19
    db88:	003f2a06 	br	d834 <__alt_mem_Flash_flash_data+0xf400d834>
    db8c:	8005883a 	mov	r2,r16
    db90:	003efe06 	br	d78c <__alt_mem_Flash_flash_data+0xf400d78c>
    db94:	81bfdb36 	bltu	r16,r6,db04 <__alt_mem_Flash_flash_data+0xf400db04>
    db98:	300f883a 	mov	r7,r6
    db9c:	0009883a 	mov	r4,zero
    dba0:	003fa106 	br	da28 <__alt_mem_Flash_flash_data+0xf400da28>

0000dba4 <udivmodsi4>:
    dba4:	2900182e 	bgeu	r5,r4,dc08 <udivmodsi4+0x64>
    dba8:	28001716 	blt	r5,zero,dc08 <udivmodsi4+0x64>
    dbac:	00800804 	movi	r2,32
    dbb0:	00c00044 	movi	r3,1
    dbb4:	00000206 	br	dbc0 <udivmodsi4+0x1c>
    dbb8:	10001126 	beq	r2,zero,dc00 <udivmodsi4+0x5c>
    dbbc:	28000516 	blt	r5,zero,dbd4 <udivmodsi4+0x30>
    dbc0:	294b883a 	add	r5,r5,r5
    dbc4:	10bfffc4 	addi	r2,r2,-1
    dbc8:	18c7883a 	add	r3,r3,r3
    dbcc:	293ffa36 	bltu	r5,r4,dbb8 <__alt_mem_Flash_flash_data+0xf400dbb8>
    dbd0:	18000b26 	beq	r3,zero,dc00 <udivmodsi4+0x5c>
    dbd4:	0005883a 	mov	r2,zero
    dbd8:	21400236 	bltu	r4,r5,dbe4 <udivmodsi4+0x40>
    dbdc:	2149c83a 	sub	r4,r4,r5
    dbe0:	10c4b03a 	or	r2,r2,r3
    dbe4:	1806d07a 	srli	r3,r3,1
    dbe8:	280ad07a 	srli	r5,r5,1
    dbec:	183ffa1e 	bne	r3,zero,dbd8 <__alt_mem_Flash_flash_data+0xf400dbd8>
    dbf0:	3000011e 	bne	r6,zero,dbf8 <udivmodsi4+0x54>
    dbf4:	f800283a 	ret
    dbf8:	2005883a 	mov	r2,r4
    dbfc:	f800283a 	ret
    dc00:	0005883a 	mov	r2,zero
    dc04:	003ffa06 	br	dbf0 <__alt_mem_Flash_flash_data+0xf400dbf0>
    dc08:	00c00044 	movi	r3,1
    dc0c:	003ff106 	br	dbd4 <__alt_mem_Flash_flash_data+0xf400dbd4>

0000dc10 <__divsi3>:
    dc10:	defffe04 	addi	sp,sp,-8
    dc14:	dfc00115 	stw	ra,4(sp)
    dc18:	dc000015 	stw	r16,0(sp)
    dc1c:	20000b16 	blt	r4,zero,dc4c <__divsi3+0x3c>
    dc20:	0021883a 	mov	r16,zero
    dc24:	28000c16 	blt	r5,zero,dc58 <__divsi3+0x48>
    dc28:	000d883a 	mov	r6,zero
    dc2c:	000dba40 	call	dba4 <udivmodsi4>
    dc30:	0407c83a 	sub	r3,zero,r16
    dc34:	1884f03a 	xor	r2,r3,r2
    dc38:	1405883a 	add	r2,r2,r16
    dc3c:	dfc00117 	ldw	ra,4(sp)
    dc40:	dc000017 	ldw	r16,0(sp)
    dc44:	dec00204 	addi	sp,sp,8
    dc48:	f800283a 	ret
    dc4c:	0109c83a 	sub	r4,zero,r4
    dc50:	04000044 	movi	r16,1
    dc54:	283ff40e 	bge	r5,zero,dc28 <__alt_mem_Flash_flash_data+0xf400dc28>
    dc58:	014bc83a 	sub	r5,zero,r5
    dc5c:	8400005c 	xori	r16,r16,1
    dc60:	003ff106 	br	dc28 <__alt_mem_Flash_flash_data+0xf400dc28>

0000dc64 <__modsi3>:
    dc64:	defffd04 	addi	sp,sp,-12
    dc68:	dfc00215 	stw	ra,8(sp)
    dc6c:	dc400115 	stw	r17,4(sp)
    dc70:	dc000015 	stw	r16,0(sp)
    dc74:	20000c16 	blt	r4,zero,dca8 <__modsi3+0x44>
    dc78:	0023883a 	mov	r17,zero
    dc7c:	0021883a 	mov	r16,zero
    dc80:	28000d16 	blt	r5,zero,dcb8 <__modsi3+0x54>
    dc84:	01800044 	movi	r6,1
    dc88:	000dba40 	call	dba4 <udivmodsi4>
    dc8c:	1404f03a 	xor	r2,r2,r16
    dc90:	8885883a 	add	r2,r17,r2
    dc94:	dfc00217 	ldw	ra,8(sp)
    dc98:	dc400117 	ldw	r17,4(sp)
    dc9c:	dc000017 	ldw	r16,0(sp)
    dca0:	dec00304 	addi	sp,sp,12
    dca4:	f800283a 	ret
    dca8:	0109c83a 	sub	r4,zero,r4
    dcac:	04400044 	movi	r17,1
    dcb0:	043fffc4 	movi	r16,-1
    dcb4:	283ff30e 	bge	r5,zero,dc84 <__alt_mem_Flash_flash_data+0xf400dc84>
    dcb8:	014bc83a 	sub	r5,zero,r5
    dcbc:	003ff106 	br	dc84 <__alt_mem_Flash_flash_data+0xf400dc84>

0000dcc0 <__udivsi3>:
    dcc0:	000d883a 	mov	r6,zero
    dcc4:	000dba41 	jmpi	dba4 <udivmodsi4>

0000dcc8 <__umodsi3>:
    dcc8:	01800044 	movi	r6,1
    dccc:	000dba41 	jmpi	dba4 <udivmodsi4>

0000dcd0 <__adddf3>:
    dcd0:	02000434 	movhi	r8,16
    dcd4:	423fffc4 	addi	r8,r8,-1
    dcd8:	defffb04 	addi	sp,sp,-20
    dcdc:	2a12703a 	and	r9,r5,r8
    dce0:	2806d7fa 	srli	r3,r5,31
    dce4:	3a10703a 	and	r8,r7,r8
    dce8:	3804d53a 	srli	r2,r7,20
    dcec:	3014d77a 	srli	r10,r6,29
    dcf0:	dc000015 	stw	r16,0(sp)
    dcf4:	481290fa 	slli	r9,r9,3
    dcf8:	2820d53a 	srli	r16,r5,20
    dcfc:	401090fa 	slli	r8,r8,3
    dd00:	200ad77a 	srli	r5,r4,29
    dd04:	380ed7fa 	srli	r7,r7,31
    dd08:	dc800215 	stw	r18,8(sp)
    dd0c:	dc400115 	stw	r17,4(sp)
    dd10:	dfc00415 	stw	ra,16(sp)
    dd14:	dcc00315 	stw	r19,12(sp)
    dd18:	1c803fcc 	andi	r18,r3,255
    dd1c:	8401ffcc 	andi	r16,r16,2047
    dd20:	494ab03a 	or	r5,r9,r5
    dd24:	202290fa 	slli	r17,r4,3
    dd28:	1081ffcc 	andi	r2,r2,2047
    dd2c:	4290b03a 	or	r8,r8,r10
    dd30:	300c90fa 	slli	r6,r6,3
    dd34:	91c07026 	beq	r18,r7,def8 <__adddf3+0x228>
    dd38:	8087c83a 	sub	r3,r16,r2
    dd3c:	00c0b30e 	bge	zero,r3,e00c <__adddf3+0x33c>
    dd40:	10002a1e 	bne	r2,zero,ddec <__adddf3+0x11c>
    dd44:	4184b03a 	or	r2,r8,r6
    dd48:	1000991e 	bne	r2,zero,dfb0 <__adddf3+0x2e0>
    dd4c:	888001cc 	andi	r2,r17,7
    dd50:	10005b26 	beq	r2,zero,dec0 <__adddf3+0x1f0>
    dd54:	88c003cc 	andi	r3,r17,15
    dd58:	00800104 	movi	r2,4
    dd5c:	18805826 	beq	r3,r2,dec0 <__adddf3+0x1f0>
    dd60:	89800104 	addi	r6,r17,4
    dd64:	3463803a 	cmpltu	r17,r6,r17
    dd68:	2c4b883a 	add	r5,r5,r17
    dd6c:	2880202c 	andhi	r2,r5,128
    dd70:	9007883a 	mov	r3,r18
    dd74:	3023883a 	mov	r17,r6
    dd78:	10005426 	beq	r2,zero,decc <__adddf3+0x1fc>
    dd7c:	84000044 	addi	r16,r16,1
    dd80:	0081ffc4 	movi	r2,2047
    dd84:	8080c126 	beq	r16,r2,e08c <__adddf3+0x3bc>
    dd88:	013fe034 	movhi	r4,65408
    dd8c:	213fffc4 	addi	r4,r4,-1
    dd90:	290a703a 	and	r5,r5,r4
    dd94:	2804977a 	slli	r2,r5,29
    dd98:	280a927a 	slli	r5,r5,9
    dd9c:	8822d0fa 	srli	r17,r17,3
    dda0:	8401ffcc 	andi	r16,r16,2047
    dda4:	2808d33a 	srli	r4,r5,12
    dda8:	1444b03a 	or	r2,r2,r17
    ddac:	8401ffcc 	andi	r16,r16,2047
    ddb0:	800a953a 	slli	r5,r16,20
    ddb4:	18c03fcc 	andi	r3,r3,255
    ddb8:	04000434 	movhi	r16,16
    ddbc:	180697fa 	slli	r3,r3,31
    ddc0:	843fffc4 	addi	r16,r16,-1
    ddc4:	2420703a 	and	r16,r4,r16
    ddc8:	8160b03a 	or	r16,r16,r5
    ddcc:	80c6b03a 	or	r3,r16,r3
    ddd0:	dfc00417 	ldw	ra,16(sp)
    ddd4:	dcc00317 	ldw	r19,12(sp)
    ddd8:	dc800217 	ldw	r18,8(sp)
    dddc:	dc400117 	ldw	r17,4(sp)
    dde0:	dc000017 	ldw	r16,0(sp)
    dde4:	dec00504 	addi	sp,sp,20
    dde8:	f800283a 	ret
    ddec:	0081ffc4 	movi	r2,2047
    ddf0:	80bfd626 	beq	r16,r2,dd4c <__alt_mem_Flash_flash_data+0xf400dd4c>
    ddf4:	42002034 	orhi	r8,r8,128
    ddf8:	00800e04 	movi	r2,56
    ddfc:	10c0a616 	blt	r2,r3,e098 <__adddf3+0x3c8>
    de00:	008007c4 	movi	r2,31
    de04:	10c0c916 	blt	r2,r3,e12c <__adddf3+0x45c>
    de08:	00800804 	movi	r2,32
    de0c:	10c5c83a 	sub	r2,r2,r3
    de10:	408e983a 	sll	r7,r8,r2
    de14:	30c8d83a 	srl	r4,r6,r3
    de18:	3084983a 	sll	r2,r6,r2
    de1c:	40c6d83a 	srl	r3,r8,r3
    de20:	390cb03a 	or	r6,r7,r4
    de24:	1004c03a 	cmpne	r2,r2,zero
    de28:	308cb03a 	or	r6,r6,r2
    de2c:	898dc83a 	sub	r6,r17,r6
    de30:	89a3803a 	cmpltu	r17,r17,r6
    de34:	28cbc83a 	sub	r5,r5,r3
    de38:	2c4bc83a 	sub	r5,r5,r17
    de3c:	3023883a 	mov	r17,r6
    de40:	2880202c 	andhi	r2,r5,128
    de44:	10006d26 	beq	r2,zero,dffc <__adddf3+0x32c>
    de48:	04c02034 	movhi	r19,128
    de4c:	9cffffc4 	addi	r19,r19,-1
    de50:	2ce6703a 	and	r19,r5,r19
    de54:	98007e26 	beq	r19,zero,e050 <__adddf3+0x380>
    de58:	9809883a 	mov	r4,r19
    de5c:	001026c0 	call	1026c <__clzsi2>
    de60:	10fffe04 	addi	r3,r2,-8
    de64:	010007c4 	movi	r4,31
    de68:	20c07f16 	blt	r4,r3,e068 <__adddf3+0x398>
    de6c:	01400a04 	movi	r5,40
    de70:	2885c83a 	sub	r2,r5,r2
    de74:	888ad83a 	srl	r5,r17,r2
    de78:	98e6983a 	sll	r19,r19,r3
    de7c:	88e2983a 	sll	r17,r17,r3
    de80:	2ce6b03a 	or	r19,r5,r19
    de84:	1c007c16 	blt	r3,r16,e078 <__adddf3+0x3a8>
    de88:	1c21c83a 	sub	r16,r3,r16
    de8c:	81400044 	addi	r5,r16,1
    de90:	00c007c4 	movi	r3,31
    de94:	19409816 	blt	r3,r5,e0f8 <__adddf3+0x428>
    de98:	1c21c83a 	sub	r16,r3,r16
    de9c:	8c08983a 	sll	r4,r17,r16
    dea0:	8946d83a 	srl	r3,r17,r5
    dea4:	9c20983a 	sll	r16,r19,r16
    dea8:	2008c03a 	cmpne	r4,r4,zero
    deac:	994ad83a 	srl	r5,r19,r5
    deb0:	1c06b03a 	or	r3,r3,r16
    deb4:	1922b03a 	or	r17,r3,r4
    deb8:	0021883a 	mov	r16,zero
    debc:	003fa306 	br	dd4c <__alt_mem_Flash_flash_data+0xf400dd4c>
    dec0:	2880202c 	andhi	r2,r5,128
    dec4:	9007883a 	mov	r3,r18
    dec8:	103fac1e 	bne	r2,zero,dd7c <__alt_mem_Flash_flash_data+0xf400dd7c>
    decc:	2804977a 	slli	r2,r5,29
    ded0:	8822d0fa 	srli	r17,r17,3
    ded4:	0101ffc4 	movi	r4,2047
    ded8:	280ad0fa 	srli	r5,r5,3
    dedc:	1444b03a 	or	r2,r2,r17
    dee0:	81002c26 	beq	r16,r4,df94 <__adddf3+0x2c4>
    dee4:	8120703a 	and	r16,r16,r4
    dee8:	01000434 	movhi	r4,16
    deec:	213fffc4 	addi	r4,r4,-1
    def0:	2908703a 	and	r4,r5,r4
    def4:	003fad06 	br	ddac <__alt_mem_Flash_flash_data+0xf400ddac>
    def8:	8089c83a 	sub	r4,r16,r2
    defc:	01006a0e 	bge	zero,r4,e0a8 <__adddf3+0x3d8>
    df00:	10003326 	beq	r2,zero,dfd0 <__adddf3+0x300>
    df04:	0081ffc4 	movi	r2,2047
    df08:	80bf9026 	beq	r16,r2,dd4c <__alt_mem_Flash_flash_data+0xf400dd4c>
    df0c:	42002034 	orhi	r8,r8,128
    df10:	00800e04 	movi	r2,56
    df14:	1100b116 	blt	r2,r4,e1dc <__adddf3+0x50c>
    df18:	008007c4 	movi	r2,31
    df1c:	1100e216 	blt	r2,r4,e2a8 <__adddf3+0x5d8>
    df20:	00800804 	movi	r2,32
    df24:	1105c83a 	sub	r2,r2,r4
    df28:	4092983a 	sll	r9,r8,r2
    df2c:	310ed83a 	srl	r7,r6,r4
    df30:	3084983a 	sll	r2,r6,r2
    df34:	4110d83a 	srl	r8,r8,r4
    df38:	49ccb03a 	or	r6,r9,r7
    df3c:	1004c03a 	cmpne	r2,r2,zero
    df40:	308cb03a 	or	r6,r6,r2
    df44:	344d883a 	add	r6,r6,r17
    df48:	3463803a 	cmpltu	r17,r6,r17
    df4c:	414b883a 	add	r5,r8,r5
    df50:	2c4b883a 	add	r5,r5,r17
    df54:	3023883a 	mov	r17,r6
    df58:	2880202c 	andhi	r2,r5,128
    df5c:	10002726 	beq	r2,zero,dffc <__adddf3+0x32c>
    df60:	84000044 	addi	r16,r16,1
    df64:	0081ffc4 	movi	r2,2047
    df68:	8080ae26 	beq	r16,r2,e224 <__adddf3+0x554>
    df6c:	00bfe034 	movhi	r2,65408
    df70:	10bfffc4 	addi	r2,r2,-1
    df74:	288a703a 	and	r5,r5,r2
    df78:	880cd07a 	srli	r6,r17,1
    df7c:	280897fa 	slli	r4,r5,31
    df80:	88c0004c 	andi	r3,r17,1
    df84:	30e2b03a 	or	r17,r6,r3
    df88:	280ad07a 	srli	r5,r5,1
    df8c:	8922b03a 	or	r17,r17,r4
    df90:	003f6e06 	br	dd4c <__alt_mem_Flash_flash_data+0xf400dd4c>
    df94:	1148b03a 	or	r4,r2,r5
    df98:	20003c26 	beq	r4,zero,e08c <__adddf3+0x3bc>
    df9c:	29000234 	orhi	r4,r5,8
    dfa0:	01400434 	movhi	r5,16
    dfa4:	297fffc4 	addi	r5,r5,-1
    dfa8:	2148703a 	and	r4,r4,r5
    dfac:	003f7f06 	br	ddac <__alt_mem_Flash_flash_data+0xf400ddac>
    dfb0:	18ffffc4 	addi	r3,r3,-1
    dfb4:	18004d1e 	bne	r3,zero,e0ec <__adddf3+0x41c>
    dfb8:	898dc83a 	sub	r6,r17,r6
    dfbc:	89a3803a 	cmpltu	r17,r17,r6
    dfc0:	2a0bc83a 	sub	r5,r5,r8
    dfc4:	2c4bc83a 	sub	r5,r5,r17
    dfc8:	3023883a 	mov	r17,r6
    dfcc:	003f9c06 	br	de40 <__alt_mem_Flash_flash_data+0xf400de40>
    dfd0:	4184b03a 	or	r2,r8,r6
    dfd4:	103f5d26 	beq	r2,zero,dd4c <__alt_mem_Flash_flash_data+0xf400dd4c>
    dfd8:	213fffc4 	addi	r4,r4,-1
    dfdc:	203fd926 	beq	r4,zero,df44 <__alt_mem_Flash_flash_data+0xf400df44>
    dfe0:	0081ffc4 	movi	r2,2047
    dfe4:	80bfca1e 	bne	r16,r2,df10 <__alt_mem_Flash_flash_data+0xf400df10>
    dfe8:	003f5806 	br	dd4c <__alt_mem_Flash_flash_data+0xf400dd4c>
    dfec:	10c8b03a 	or	r4,r2,r3
    dff0:	20008b26 	beq	r4,zero,e220 <__adddf3+0x550>
    dff4:	100b883a 	mov	r5,r2
    dff8:	1823883a 	mov	r17,r3
    dffc:	888001cc 	andi	r2,r17,7
    e000:	103f541e 	bne	r2,zero,dd54 <__alt_mem_Flash_flash_data+0xf400dd54>
    e004:	9007883a 	mov	r3,r18
    e008:	003fb006 	br	decc <__alt_mem_Flash_flash_data+0xf400decc>
    e00c:	1800531e 	bne	r3,zero,e15c <__adddf3+0x48c>
    e010:	80800044 	addi	r2,r16,1
    e014:	1081ffcc 	andi	r2,r2,2047
    e018:	00c00044 	movi	r3,1
    e01c:	1880990e 	bge	r3,r2,e284 <__adddf3+0x5b4>
    e020:	8985c83a 	sub	r2,r17,r6
    e024:	8887803a 	cmpltu	r3,r17,r2
    e028:	2a27c83a 	sub	r19,r5,r8
    e02c:	98e7c83a 	sub	r19,r19,r3
    e030:	98c0202c 	andhi	r3,r19,128
    e034:	18006226 	beq	r3,zero,e1c0 <__adddf3+0x4f0>
    e038:	3463c83a 	sub	r17,r6,r17
    e03c:	4151c83a 	sub	r8,r8,r5
    e040:	344d803a 	cmpltu	r6,r6,r17
    e044:	41a7c83a 	sub	r19,r8,r6
    e048:	3825883a 	mov	r18,r7
    e04c:	983f821e 	bne	r19,zero,de58 <__alt_mem_Flash_flash_data+0xf400de58>
    e050:	8809883a 	mov	r4,r17
    e054:	001026c0 	call	1026c <__clzsi2>
    e058:	10800804 	addi	r2,r2,32
    e05c:	10fffe04 	addi	r3,r2,-8
    e060:	010007c4 	movi	r4,31
    e064:	20ff810e 	bge	r4,r3,de6c <__alt_mem_Flash_flash_data+0xf400de6c>
    e068:	14fff604 	addi	r19,r2,-40
    e06c:	8ce6983a 	sll	r19,r17,r19
    e070:	0023883a 	mov	r17,zero
    e074:	1c3f840e 	bge	r3,r16,de88 <__alt_mem_Flash_flash_data+0xf400de88>
    e078:	017fe034 	movhi	r5,65408
    e07c:	297fffc4 	addi	r5,r5,-1
    e080:	80e1c83a 	sub	r16,r16,r3
    e084:	994a703a 	and	r5,r19,r5
    e088:	003f3006 	br	dd4c <__alt_mem_Flash_flash_data+0xf400dd4c>
    e08c:	0009883a 	mov	r4,zero
    e090:	0005883a 	mov	r2,zero
    e094:	003f4506 	br	ddac <__alt_mem_Flash_flash_data+0xf400ddac>
    e098:	418cb03a 	or	r6,r8,r6
    e09c:	300cc03a 	cmpne	r6,r6,zero
    e0a0:	0007883a 	mov	r3,zero
    e0a4:	003f6106 	br	de2c <__alt_mem_Flash_flash_data+0xf400de2c>
    e0a8:	2000921e 	bne	r4,zero,e2f4 <__adddf3+0x624>
    e0ac:	80800044 	addi	r2,r16,1
    e0b0:	11c1ffcc 	andi	r7,r2,2047
    e0b4:	01000044 	movi	r4,1
    e0b8:	21c0610e 	bge	r4,r7,e240 <__adddf3+0x570>
    e0bc:	0101ffc4 	movi	r4,2047
    e0c0:	1100a326 	beq	r2,r4,e350 <__adddf3+0x680>
    e0c4:	344d883a 	add	r6,r6,r17
    e0c8:	3463803a 	cmpltu	r17,r6,r17
    e0cc:	414b883a 	add	r5,r8,r5
    e0d0:	2c4b883a 	add	r5,r5,r17
    e0d4:	282297fa 	slli	r17,r5,31
    e0d8:	300cd07a 	srli	r6,r6,1
    e0dc:	280ad07a 	srli	r5,r5,1
    e0e0:	1021883a 	mov	r16,r2
    e0e4:	89a2b03a 	or	r17,r17,r6
    e0e8:	003f1806 	br	dd4c <__alt_mem_Flash_flash_data+0xf400dd4c>
    e0ec:	0081ffc4 	movi	r2,2047
    e0f0:	80bf411e 	bne	r16,r2,ddf8 <__alt_mem_Flash_flash_data+0xf400ddf8>
    e0f4:	003f1506 	br	dd4c <__alt_mem_Flash_flash_data+0xf400dd4c>
    e0f8:	80bff844 	addi	r2,r16,-31
    e0fc:	00c00804 	movi	r3,32
    e100:	9884d83a 	srl	r2,r19,r2
    e104:	28c04a26 	beq	r5,r3,e230 <__adddf3+0x560>
    e108:	00c00fc4 	movi	r3,63
    e10c:	1c21c83a 	sub	r16,r3,r16
    e110:	9c26983a 	sll	r19,r19,r16
    e114:	9c62b03a 	or	r17,r19,r17
    e118:	8822c03a 	cmpne	r17,r17,zero
    e11c:	88a2b03a 	or	r17,r17,r2
    e120:	000b883a 	mov	r5,zero
    e124:	0021883a 	mov	r16,zero
    e128:	003fb406 	br	dffc <__alt_mem_Flash_flash_data+0xf400dffc>
    e12c:	18bff804 	addi	r2,r3,-32
    e130:	01000804 	movi	r4,32
    e134:	4084d83a 	srl	r2,r8,r2
    e138:	19003f26 	beq	r3,r4,e238 <__adddf3+0x568>
    e13c:	01001004 	movi	r4,64
    e140:	20c7c83a 	sub	r3,r4,r3
    e144:	40d0983a 	sll	r8,r8,r3
    e148:	418cb03a 	or	r6,r8,r6
    e14c:	300cc03a 	cmpne	r6,r6,zero
    e150:	308cb03a 	or	r6,r6,r2
    e154:	0007883a 	mov	r3,zero
    e158:	003f3406 	br	de2c <__alt_mem_Flash_flash_data+0xf400de2c>
    e15c:	80002326 	beq	r16,zero,e1ec <__adddf3+0x51c>
    e160:	0101ffc4 	movi	r4,2047
    e164:	11005e26 	beq	r2,r4,e2e0 <__adddf3+0x610>
    e168:	00c7c83a 	sub	r3,zero,r3
    e16c:	29402034 	orhi	r5,r5,128
    e170:	01000e04 	movi	r4,56
    e174:	20c07216 	blt	r4,r3,e340 <__adddf3+0x670>
    e178:	010007c4 	movi	r4,31
    e17c:	20c0ce16 	blt	r4,r3,e4b8 <__adddf3+0x7e8>
    e180:	01000804 	movi	r4,32
    e184:	20c9c83a 	sub	r4,r4,r3
    e188:	2914983a 	sll	r10,r5,r4
    e18c:	88d2d83a 	srl	r9,r17,r3
    e190:	8908983a 	sll	r4,r17,r4
    e194:	28c6d83a 	srl	r3,r5,r3
    e198:	5262b03a 	or	r17,r10,r9
    e19c:	2008c03a 	cmpne	r4,r4,zero
    e1a0:	8922b03a 	or	r17,r17,r4
    e1a4:	3463c83a 	sub	r17,r6,r17
    e1a8:	40c7c83a 	sub	r3,r8,r3
    e1ac:	344d803a 	cmpltu	r6,r6,r17
    e1b0:	198bc83a 	sub	r5,r3,r6
    e1b4:	1021883a 	mov	r16,r2
    e1b8:	3825883a 	mov	r18,r7
    e1bc:	003f2006 	br	de40 <__alt_mem_Flash_flash_data+0xf400de40>
    e1c0:	9886b03a 	or	r3,r19,r2
    e1c4:	1800141e 	bne	r3,zero,e218 <__adddf3+0x548>
    e1c8:	0007883a 	mov	r3,zero
    e1cc:	000b883a 	mov	r5,zero
    e1d0:	0023883a 	mov	r17,zero
    e1d4:	0021883a 	mov	r16,zero
    e1d8:	003f3c06 	br	decc <__alt_mem_Flash_flash_data+0xf400decc>
    e1dc:	418cb03a 	or	r6,r8,r6
    e1e0:	300cc03a 	cmpne	r6,r6,zero
    e1e4:	0011883a 	mov	r8,zero
    e1e8:	003f5606 	br	df44 <__alt_mem_Flash_flash_data+0xf400df44>
    e1ec:	2c48b03a 	or	r4,r5,r17
    e1f0:	20003b26 	beq	r4,zero,e2e0 <__adddf3+0x610>
    e1f4:	00c6303a 	nor	r3,zero,r3
    e1f8:	1800371e 	bne	r3,zero,e2d8 <__adddf3+0x608>
    e1fc:	3463c83a 	sub	r17,r6,r17
    e200:	414bc83a 	sub	r5,r8,r5
    e204:	344d803a 	cmpltu	r6,r6,r17
    e208:	298bc83a 	sub	r5,r5,r6
    e20c:	1021883a 	mov	r16,r2
    e210:	3825883a 	mov	r18,r7
    e214:	003f0a06 	br	de40 <__alt_mem_Flash_flash_data+0xf400de40>
    e218:	1023883a 	mov	r17,r2
    e21c:	003f0d06 	br	de54 <__alt_mem_Flash_flash_data+0xf400de54>
    e220:	0007883a 	mov	r3,zero
    e224:	000b883a 	mov	r5,zero
    e228:	0023883a 	mov	r17,zero
    e22c:	003f2706 	br	decc <__alt_mem_Flash_flash_data+0xf400decc>
    e230:	0027883a 	mov	r19,zero
    e234:	003fb706 	br	e114 <__alt_mem_Flash_flash_data+0xf400e114>
    e238:	0011883a 	mov	r8,zero
    e23c:	003fc206 	br	e148 <__alt_mem_Flash_flash_data+0xf400e148>
    e240:	2c44b03a 	or	r2,r5,r17
    e244:	8000871e 	bne	r16,zero,e464 <__adddf3+0x794>
    e248:	1000b126 	beq	r2,zero,e510 <__adddf3+0x840>
    e24c:	4184b03a 	or	r2,r8,r6
    e250:	103ebe26 	beq	r2,zero,dd4c <__alt_mem_Flash_flash_data+0xf400dd4c>
    e254:	3445883a 	add	r2,r6,r17
    e258:	1463803a 	cmpltu	r17,r2,r17
    e25c:	414b883a 	add	r5,r8,r5
    e260:	2c4b883a 	add	r5,r5,r17
    e264:	28c0202c 	andhi	r3,r5,128
    e268:	1023883a 	mov	r17,r2
    e26c:	183f6326 	beq	r3,zero,dffc <__alt_mem_Flash_flash_data+0xf400dffc>
    e270:	00bfe034 	movhi	r2,65408
    e274:	10bfffc4 	addi	r2,r2,-1
    e278:	2021883a 	mov	r16,r4
    e27c:	288a703a 	and	r5,r5,r2
    e280:	003eb206 	br	dd4c <__alt_mem_Flash_flash_data+0xf400dd4c>
    e284:	2c44b03a 	or	r2,r5,r17
    e288:	8000251e 	bne	r16,zero,e320 <__adddf3+0x650>
    e28c:	10004b1e 	bne	r2,zero,e3bc <__adddf3+0x6ec>
    e290:	4184b03a 	or	r2,r8,r6
    e294:	103fe226 	beq	r2,zero,e220 <__alt_mem_Flash_flash_data+0xf400e220>
    e298:	400b883a 	mov	r5,r8
    e29c:	3023883a 	mov	r17,r6
    e2a0:	3825883a 	mov	r18,r7
    e2a4:	003ea906 	br	dd4c <__alt_mem_Flash_flash_data+0xf400dd4c>
    e2a8:	20bff804 	addi	r2,r4,-32
    e2ac:	01c00804 	movi	r7,32
    e2b0:	4084d83a 	srl	r2,r8,r2
    e2b4:	21c07e26 	beq	r4,r7,e4b0 <__adddf3+0x7e0>
    e2b8:	01c01004 	movi	r7,64
    e2bc:	3909c83a 	sub	r4,r7,r4
    e2c0:	4110983a 	sll	r8,r8,r4
    e2c4:	418cb03a 	or	r6,r8,r6
    e2c8:	300cc03a 	cmpne	r6,r6,zero
    e2cc:	308cb03a 	or	r6,r6,r2
    e2d0:	0011883a 	mov	r8,zero
    e2d4:	003f1b06 	br	df44 <__alt_mem_Flash_flash_data+0xf400df44>
    e2d8:	0101ffc4 	movi	r4,2047
    e2dc:	113fa41e 	bne	r2,r4,e170 <__alt_mem_Flash_flash_data+0xf400e170>
    e2e0:	400b883a 	mov	r5,r8
    e2e4:	3023883a 	mov	r17,r6
    e2e8:	1021883a 	mov	r16,r2
    e2ec:	3825883a 	mov	r18,r7
    e2f0:	003e9606 	br	dd4c <__alt_mem_Flash_flash_data+0xf400dd4c>
    e2f4:	80001a1e 	bne	r16,zero,e360 <__adddf3+0x690>
    e2f8:	2c4eb03a 	or	r7,r5,r17
    e2fc:	38005526 	beq	r7,zero,e454 <__adddf3+0x784>
    e300:	0108303a 	nor	r4,zero,r4
    e304:	2000511e 	bne	r4,zero,e44c <__adddf3+0x77c>
    e308:	89a3883a 	add	r17,r17,r6
    e30c:	414b883a 	add	r5,r8,r5
    e310:	898d803a 	cmpltu	r6,r17,r6
    e314:	298b883a 	add	r5,r5,r6
    e318:	1021883a 	mov	r16,r2
    e31c:	003f0e06 	br	df58 <__alt_mem_Flash_flash_data+0xf400df58>
    e320:	1000341e 	bne	r2,zero,e3f4 <__adddf3+0x724>
    e324:	4184b03a 	or	r2,r8,r6
    e328:	10006f26 	beq	r2,zero,e4e8 <__adddf3+0x818>
    e32c:	400b883a 	mov	r5,r8
    e330:	3023883a 	mov	r17,r6
    e334:	3825883a 	mov	r18,r7
    e338:	0401ffc4 	movi	r16,2047
    e33c:	003e8306 	br	dd4c <__alt_mem_Flash_flash_data+0xf400dd4c>
    e340:	2c62b03a 	or	r17,r5,r17
    e344:	8822c03a 	cmpne	r17,r17,zero
    e348:	0007883a 	mov	r3,zero
    e34c:	003f9506 	br	e1a4 <__alt_mem_Flash_flash_data+0xf400e1a4>
    e350:	1021883a 	mov	r16,r2
    e354:	000b883a 	mov	r5,zero
    e358:	0023883a 	mov	r17,zero
    e35c:	003edb06 	br	decc <__alt_mem_Flash_flash_data+0xf400decc>
    e360:	01c1ffc4 	movi	r7,2047
    e364:	11c03b26 	beq	r2,r7,e454 <__adddf3+0x784>
    e368:	0109c83a 	sub	r4,zero,r4
    e36c:	29402034 	orhi	r5,r5,128
    e370:	01c00e04 	movi	r7,56
    e374:	39006216 	blt	r7,r4,e500 <__adddf3+0x830>
    e378:	01c007c4 	movi	r7,31
    e37c:	39006b16 	blt	r7,r4,e52c <__adddf3+0x85c>
    e380:	01c00804 	movi	r7,32
    e384:	390fc83a 	sub	r7,r7,r4
    e388:	29d4983a 	sll	r10,r5,r7
    e38c:	8912d83a 	srl	r9,r17,r4
    e390:	89ce983a 	sll	r7,r17,r7
    e394:	2908d83a 	srl	r4,r5,r4
    e398:	5262b03a 	or	r17,r10,r9
    e39c:	380ac03a 	cmpne	r5,r7,zero
    e3a0:	8962b03a 	or	r17,r17,r5
    e3a4:	89a3883a 	add	r17,r17,r6
    e3a8:	2211883a 	add	r8,r4,r8
    e3ac:	898d803a 	cmpltu	r6,r17,r6
    e3b0:	418b883a 	add	r5,r8,r6
    e3b4:	1021883a 	mov	r16,r2
    e3b8:	003ee706 	br	df58 <__alt_mem_Flash_flash_data+0xf400df58>
    e3bc:	4184b03a 	or	r2,r8,r6
    e3c0:	103e6226 	beq	r2,zero,dd4c <__alt_mem_Flash_flash_data+0xf400dd4c>
    e3c4:	8987c83a 	sub	r3,r17,r6
    e3c8:	88c9803a 	cmpltu	r4,r17,r3
    e3cc:	2a05c83a 	sub	r2,r5,r8
    e3d0:	1105c83a 	sub	r2,r2,r4
    e3d4:	1100202c 	andhi	r4,r2,128
    e3d8:	203f0426 	beq	r4,zero,dfec <__alt_mem_Flash_flash_data+0xf400dfec>
    e3dc:	3463c83a 	sub	r17,r6,r17
    e3e0:	414bc83a 	sub	r5,r8,r5
    e3e4:	344d803a 	cmpltu	r6,r6,r17
    e3e8:	298bc83a 	sub	r5,r5,r6
    e3ec:	3825883a 	mov	r18,r7
    e3f0:	003e5606 	br	dd4c <__alt_mem_Flash_flash_data+0xf400dd4c>
    e3f4:	4184b03a 	or	r2,r8,r6
    e3f8:	10002b26 	beq	r2,zero,e4a8 <__adddf3+0x7d8>
    e3fc:	2804d0fa 	srli	r2,r5,3
    e400:	8822d0fa 	srli	r17,r17,3
    e404:	280a977a 	slli	r5,r5,29
    e408:	10c0022c 	andhi	r3,r2,8
    e40c:	2c62b03a 	or	r17,r5,r17
    e410:	18000826 	beq	r3,zero,e434 <__adddf3+0x764>
    e414:	4008d0fa 	srli	r4,r8,3
    e418:	20c0022c 	andhi	r3,r4,8
    e41c:	1800051e 	bne	r3,zero,e434 <__adddf3+0x764>
    e420:	300cd0fa 	srli	r6,r6,3
    e424:	4010977a 	slli	r8,r8,29
    e428:	2005883a 	mov	r2,r4
    e42c:	3825883a 	mov	r18,r7
    e430:	41a2b03a 	or	r17,r8,r6
    e434:	880ad77a 	srli	r5,r17,29
    e438:	100490fa 	slli	r2,r2,3
    e43c:	882290fa 	slli	r17,r17,3
    e440:	0401ffc4 	movi	r16,2047
    e444:	288ab03a 	or	r5,r5,r2
    e448:	003e4006 	br	dd4c <__alt_mem_Flash_flash_data+0xf400dd4c>
    e44c:	01c1ffc4 	movi	r7,2047
    e450:	11ffc71e 	bne	r2,r7,e370 <__alt_mem_Flash_flash_data+0xf400e370>
    e454:	400b883a 	mov	r5,r8
    e458:	3023883a 	mov	r17,r6
    e45c:	1021883a 	mov	r16,r2
    e460:	003e3a06 	br	dd4c <__alt_mem_Flash_flash_data+0xf400dd4c>
    e464:	10002d26 	beq	r2,zero,e51c <__adddf3+0x84c>
    e468:	4184b03a 	or	r2,r8,r6
    e46c:	10000e26 	beq	r2,zero,e4a8 <__adddf3+0x7d8>
    e470:	2804d0fa 	srli	r2,r5,3
    e474:	8822d0fa 	srli	r17,r17,3
    e478:	280a977a 	slli	r5,r5,29
    e47c:	10c0022c 	andhi	r3,r2,8
    e480:	2c62b03a 	or	r17,r5,r17
    e484:	183feb26 	beq	r3,zero,e434 <__alt_mem_Flash_flash_data+0xf400e434>
    e488:	4008d0fa 	srli	r4,r8,3
    e48c:	20c0022c 	andhi	r3,r4,8
    e490:	183fe81e 	bne	r3,zero,e434 <__alt_mem_Flash_flash_data+0xf400e434>
    e494:	300cd0fa 	srli	r6,r6,3
    e498:	4010977a 	slli	r8,r8,29
    e49c:	2005883a 	mov	r2,r4
    e4a0:	41a2b03a 	or	r17,r8,r6
    e4a4:	003fe306 	br	e434 <__alt_mem_Flash_flash_data+0xf400e434>
    e4a8:	0401ffc4 	movi	r16,2047
    e4ac:	003e2706 	br	dd4c <__alt_mem_Flash_flash_data+0xf400dd4c>
    e4b0:	0011883a 	mov	r8,zero
    e4b4:	003f8306 	br	e2c4 <__alt_mem_Flash_flash_data+0xf400e2c4>
    e4b8:	193ff804 	addi	r4,r3,-32
    e4bc:	02400804 	movi	r9,32
    e4c0:	2908d83a 	srl	r4,r5,r4
    e4c4:	1a402526 	beq	r3,r9,e55c <__adddf3+0x88c>
    e4c8:	02401004 	movi	r9,64
    e4cc:	48c7c83a 	sub	r3,r9,r3
    e4d0:	28ca983a 	sll	r5,r5,r3
    e4d4:	2c62b03a 	or	r17,r5,r17
    e4d8:	8822c03a 	cmpne	r17,r17,zero
    e4dc:	8922b03a 	or	r17,r17,r4
    e4e0:	0007883a 	mov	r3,zero
    e4e4:	003f2f06 	br	e1a4 <__alt_mem_Flash_flash_data+0xf400e1a4>
    e4e8:	01402034 	movhi	r5,128
    e4ec:	0007883a 	mov	r3,zero
    e4f0:	297fffc4 	addi	r5,r5,-1
    e4f4:	047ffe04 	movi	r17,-8
    e4f8:	0401ffc4 	movi	r16,2047
    e4fc:	003e7306 	br	decc <__alt_mem_Flash_flash_data+0xf400decc>
    e500:	2c62b03a 	or	r17,r5,r17
    e504:	8822c03a 	cmpne	r17,r17,zero
    e508:	0009883a 	mov	r4,zero
    e50c:	003fa506 	br	e3a4 <__alt_mem_Flash_flash_data+0xf400e3a4>
    e510:	400b883a 	mov	r5,r8
    e514:	3023883a 	mov	r17,r6
    e518:	003e0c06 	br	dd4c <__alt_mem_Flash_flash_data+0xf400dd4c>
    e51c:	400b883a 	mov	r5,r8
    e520:	3023883a 	mov	r17,r6
    e524:	0401ffc4 	movi	r16,2047
    e528:	003e0806 	br	dd4c <__alt_mem_Flash_flash_data+0xf400dd4c>
    e52c:	21fff804 	addi	r7,r4,-32
    e530:	02400804 	movi	r9,32
    e534:	29ced83a 	srl	r7,r5,r7
    e538:	22400a26 	beq	r4,r9,e564 <__adddf3+0x894>
    e53c:	02401004 	movi	r9,64
    e540:	4909c83a 	sub	r4,r9,r4
    e544:	290a983a 	sll	r5,r5,r4
    e548:	2c62b03a 	or	r17,r5,r17
    e54c:	8822c03a 	cmpne	r17,r17,zero
    e550:	89e2b03a 	or	r17,r17,r7
    e554:	0009883a 	mov	r4,zero
    e558:	003f9206 	br	e3a4 <__alt_mem_Flash_flash_data+0xf400e3a4>
    e55c:	000b883a 	mov	r5,zero
    e560:	003fdc06 	br	e4d4 <__alt_mem_Flash_flash_data+0xf400e4d4>
    e564:	000b883a 	mov	r5,zero
    e568:	003ff706 	br	e548 <__alt_mem_Flash_flash_data+0xf400e548>

0000e56c <__divdf3>:
    e56c:	defff204 	addi	sp,sp,-56
    e570:	dd000815 	stw	r20,32(sp)
    e574:	2828d53a 	srli	r20,r5,20
    e578:	dd800a15 	stw	r22,40(sp)
    e57c:	282cd7fa 	srli	r22,r5,31
    e580:	dc000415 	stw	r16,16(sp)
    e584:	04000434 	movhi	r16,16
    e588:	df000c15 	stw	fp,48(sp)
    e58c:	dcc00715 	stw	r19,28(sp)
    e590:	dc800615 	stw	r18,24(sp)
    e594:	dc400515 	stw	r17,20(sp)
    e598:	843fffc4 	addi	r16,r16,-1
    e59c:	dfc00d15 	stw	ra,52(sp)
    e5a0:	ddc00b15 	stw	r23,44(sp)
    e5a4:	dd400915 	stw	r21,36(sp)
    e5a8:	a501ffcc 	andi	r20,r20,2047
    e5ac:	2025883a 	mov	r18,r4
    e5b0:	2027883a 	mov	r19,r4
    e5b4:	2c22703a 	and	r17,r5,r16
    e5b8:	b7003fcc 	andi	fp,r22,255
    e5bc:	a0005e26 	beq	r20,zero,e738 <__divdf3+0x1cc>
    e5c0:	0081ffc4 	movi	r2,2047
    e5c4:	a0803526 	beq	r20,r2,e69c <__divdf3+0x130>
    e5c8:	8c000434 	orhi	r16,r17,16
    e5cc:	2004d77a 	srli	r2,r4,29
    e5d0:	802090fa 	slli	r16,r16,3
    e5d4:	202690fa 	slli	r19,r4,3
    e5d8:	a53f0044 	addi	r20,r20,-1023
    e5dc:	80a2b03a 	or	r17,r16,r2
    e5e0:	0025883a 	mov	r18,zero
    e5e4:	0011883a 	mov	r8,zero
    e5e8:	380ad53a 	srli	r5,r7,20
    e5ec:	382ed7fa 	srli	r23,r7,31
    e5f0:	04000434 	movhi	r16,16
    e5f4:	843fffc4 	addi	r16,r16,-1
    e5f8:	2941ffcc 	andi	r5,r5,2047
    e5fc:	302b883a 	mov	r21,r6
    e600:	3c20703a 	and	r16,r7,r16
    e604:	ba403fcc 	andi	r9,r23,255
    e608:	28006726 	beq	r5,zero,e7a8 <__divdf3+0x23c>
    e60c:	0081ffc4 	movi	r2,2047
    e610:	28805f26 	beq	r5,r2,e790 <__divdf3+0x224>
    e614:	84000434 	orhi	r16,r16,16
    e618:	3004d77a 	srli	r2,r6,29
    e61c:	802090fa 	slli	r16,r16,3
    e620:	302a90fa 	slli	r21,r6,3
    e624:	297f0044 	addi	r5,r5,-1023
    e628:	80a0b03a 	or	r16,r16,r2
    e62c:	000f883a 	mov	r7,zero
    e630:	3c86b03a 	or	r3,r7,r18
    e634:	180690ba 	slli	r3,r3,2
    e638:	00800074 	movhi	r2,1
    e63c:	10b99704 	addi	r2,r2,-6564
    e640:	1887883a 	add	r3,r3,r2
    e644:	18c00017 	ldw	r3,0(r3)
    e648:	b5c8f03a 	xor	r4,r22,r23
    e64c:	200d883a 	mov	r6,r4
    e650:	24803fcc 	andi	r18,r4,255
    e654:	a169c83a 	sub	r20,r20,r5
    e658:	1800683a 	jmp	r3
    e65c:	0000e8a4 	muli	zero,zero,930
    e660:	0000e6d4 	movui	zero,923
    e664:	0000e868 	cmpgeui	zero,zero,929
    e668:	0000e6b8 	rdprs	zero,zero,922
    e66c:	0000e868 	cmpgeui	zero,zero,929
    e670:	0000e83c 	xorhi	zero,zero,928
    e674:	0000e868 	cmpgeui	zero,zero,929
    e678:	0000e6b8 	rdprs	zero,zero,922
    e67c:	0000e6d4 	movui	zero,923
    e680:	0000e6d4 	movui	zero,923
    e684:	0000e83c 	xorhi	zero,zero,928
    e688:	0000e6b8 	rdprs	zero,zero,922
    e68c:	0000e6c8 	cmpgei	zero,zero,923
    e690:	0000e6c8 	cmpgei	zero,zero,923
    e694:	0000e6c8 	cmpgei	zero,zero,923
    e698:	0000e878 	rdprs	zero,zero,929
    e69c:	8904b03a 	or	r2,r17,r4
    e6a0:	1000631e 	bne	r2,zero,e830 <__divdf3+0x2c4>
    e6a4:	04800204 	movi	r18,8
    e6a8:	0023883a 	mov	r17,zero
    e6ac:	0027883a 	mov	r19,zero
    e6b0:	02000084 	movi	r8,2
    e6b4:	003fcc06 	br	e5e8 <__alt_mem_Flash_flash_data+0xf400e5e8>
    e6b8:	8023883a 	mov	r17,r16
    e6bc:	a827883a 	mov	r19,r21
    e6c0:	4839883a 	mov	fp,r9
    e6c4:	3811883a 	mov	r8,r7
    e6c8:	00800084 	movi	r2,2
    e6cc:	40812a1e 	bne	r8,r2,eb78 <__divdf3+0x60c>
    e6d0:	e025883a 	mov	r18,fp
    e6d4:	9180004c 	andi	r6,r18,1
    e6d8:	0101ffc4 	movi	r4,2047
    e6dc:	000b883a 	mov	r5,zero
    e6e0:	0027883a 	mov	r19,zero
    e6e4:	2008953a 	slli	r4,r4,20
    e6e8:	30c03fcc 	andi	r3,r6,255
    e6ec:	04000434 	movhi	r16,16
    e6f0:	180697fa 	slli	r3,r3,31
    e6f4:	843fffc4 	addi	r16,r16,-1
    e6f8:	2c20703a 	and	r16,r5,r16
    e6fc:	8120b03a 	or	r16,r16,r4
    e700:	80c6b03a 	or	r3,r16,r3
    e704:	9805883a 	mov	r2,r19
    e708:	dfc00d17 	ldw	ra,52(sp)
    e70c:	df000c17 	ldw	fp,48(sp)
    e710:	ddc00b17 	ldw	r23,44(sp)
    e714:	dd800a17 	ldw	r22,40(sp)
    e718:	dd400917 	ldw	r21,36(sp)
    e71c:	dd000817 	ldw	r20,32(sp)
    e720:	dcc00717 	ldw	r19,28(sp)
    e724:	dc800617 	ldw	r18,24(sp)
    e728:	dc400517 	ldw	r17,20(sp)
    e72c:	dc000417 	ldw	r16,16(sp)
    e730:	dec00e04 	addi	sp,sp,56
    e734:	f800283a 	ret
    e738:	8904b03a 	or	r2,r17,r4
    e73c:	10003726 	beq	r2,zero,e81c <__divdf3+0x2b0>
    e740:	88011c26 	beq	r17,zero,ebb4 <__divdf3+0x648>
    e744:	8809883a 	mov	r4,r17
    e748:	d9800315 	stw	r6,12(sp)
    e74c:	d9c00115 	stw	r7,4(sp)
    e750:	001026c0 	call	1026c <__clzsi2>
    e754:	d9800317 	ldw	r6,12(sp)
    e758:	d9c00117 	ldw	r7,4(sp)
    e75c:	1007883a 	mov	r3,r2
    e760:	01000a04 	movi	r4,40
    e764:	1cfffe04 	addi	r19,r3,-8
    e768:	20c9c83a 	sub	r4,r4,r3
    e76c:	8cca983a 	sll	r5,r17,r19
    e770:	9108d83a 	srl	r4,r18,r4
    e774:	94e6983a 	sll	r19,r18,r19
    e778:	2162b03a 	or	r17,r4,r5
    e77c:	053f0344 	movi	r20,-1011
    e780:	a0e9c83a 	sub	r20,r20,r3
    e784:	0025883a 	mov	r18,zero
    e788:	0011883a 	mov	r8,zero
    e78c:	003f9606 	br	e5e8 <__alt_mem_Flash_flash_data+0xf400e5e8>
    e790:	8184b03a 	or	r2,r16,r6
    e794:	10001f1e 	bne	r2,zero,e814 <__divdf3+0x2a8>
    e798:	0021883a 	mov	r16,zero
    e79c:	002b883a 	mov	r21,zero
    e7a0:	01c00084 	movi	r7,2
    e7a4:	003fa206 	br	e630 <__alt_mem_Flash_flash_data+0xf400e630>
    e7a8:	8184b03a 	or	r2,r16,r6
    e7ac:	10001526 	beq	r2,zero,e804 <__divdf3+0x298>
    e7b0:	80010c26 	beq	r16,zero,ebe4 <__divdf3+0x678>
    e7b4:	8009883a 	mov	r4,r16
    e7b8:	d9800315 	stw	r6,12(sp)
    e7bc:	da000215 	stw	r8,8(sp)
    e7c0:	da400015 	stw	r9,0(sp)
    e7c4:	001026c0 	call	1026c <__clzsi2>
    e7c8:	d9800317 	ldw	r6,12(sp)
    e7cc:	da000217 	ldw	r8,8(sp)
    e7d0:	da400017 	ldw	r9,0(sp)
    e7d4:	1007883a 	mov	r3,r2
    e7d8:	01000a04 	movi	r4,40
    e7dc:	1d7ffe04 	addi	r21,r3,-8
    e7e0:	20c9c83a 	sub	r4,r4,r3
    e7e4:	8560983a 	sll	r16,r16,r21
    e7e8:	3108d83a 	srl	r4,r6,r4
    e7ec:	356a983a 	sll	r21,r6,r21
    e7f0:	2420b03a 	or	r16,r4,r16
    e7f4:	017f0344 	movi	r5,-1011
    e7f8:	28cbc83a 	sub	r5,r5,r3
    e7fc:	000f883a 	mov	r7,zero
    e800:	003f8b06 	br	e630 <__alt_mem_Flash_flash_data+0xf400e630>
    e804:	0021883a 	mov	r16,zero
    e808:	002b883a 	mov	r21,zero
    e80c:	01c00044 	movi	r7,1
    e810:	003f8706 	br	e630 <__alt_mem_Flash_flash_data+0xf400e630>
    e814:	01c000c4 	movi	r7,3
    e818:	003f8506 	br	e630 <__alt_mem_Flash_flash_data+0xf400e630>
    e81c:	04800104 	movi	r18,4
    e820:	0023883a 	mov	r17,zero
    e824:	0027883a 	mov	r19,zero
    e828:	02000044 	movi	r8,1
    e82c:	003f6e06 	br	e5e8 <__alt_mem_Flash_flash_data+0xf400e5e8>
    e830:	04800304 	movi	r18,12
    e834:	020000c4 	movi	r8,3
    e838:	003f6b06 	br	e5e8 <__alt_mem_Flash_flash_data+0xf400e5e8>
    e83c:	01400434 	movhi	r5,16
    e840:	000d883a 	mov	r6,zero
    e844:	297fffc4 	addi	r5,r5,-1
    e848:	04ffffc4 	movi	r19,-1
    e84c:	0101ffc4 	movi	r4,2047
    e850:	003fa406 	br	e6e4 <__alt_mem_Flash_flash_data+0xf400e6e4>
    e854:	043f0084 	movi	r16,-1022
    e858:	8521c83a 	sub	r16,r16,r20
    e85c:	00800e04 	movi	r2,56
    e860:	1401200e 	bge	r2,r16,ece4 <__divdf3+0x778>
    e864:	9180004c 	andi	r6,r18,1
    e868:	0009883a 	mov	r4,zero
    e86c:	000b883a 	mov	r5,zero
    e870:	0027883a 	mov	r19,zero
    e874:	003f9b06 	br	e6e4 <__alt_mem_Flash_flash_data+0xf400e6e4>
    e878:	8880022c 	andhi	r2,r17,8
    e87c:	1000c726 	beq	r2,zero,eb9c <__divdf3+0x630>
    e880:	8080022c 	andhi	r2,r16,8
    e884:	1000c51e 	bne	r2,zero,eb9c <__divdf3+0x630>
    e888:	00800434 	movhi	r2,16
    e88c:	81400234 	orhi	r5,r16,8
    e890:	10bfffc4 	addi	r2,r2,-1
    e894:	b80d883a 	mov	r6,r23
    e898:	288a703a 	and	r5,r5,r2
    e89c:	a827883a 	mov	r19,r21
    e8a0:	003fea06 	br	e84c <__alt_mem_Flash_flash_data+0xf400e84c>
    e8a4:	8440ea36 	bltu	r16,r17,ec50 <__divdf3+0x6e4>
    e8a8:	8c00e826 	beq	r17,r16,ec4c <__divdf3+0x6e0>
    e8ac:	a53fffc4 	addi	r20,r20,-1
    e8b0:	882d883a 	mov	r22,r17
    e8b4:	000d883a 	mov	r6,zero
    e8b8:	a804d63a 	srli	r2,r21,24
    e8bc:	8020923a 	slli	r16,r16,8
    e8c0:	b009883a 	mov	r4,r22
    e8c4:	d9800315 	stw	r6,12(sp)
    e8c8:	1420b03a 	or	r16,r2,r16
    e8cc:	802ed43a 	srli	r23,r16,16
    e8d0:	873fffcc 	andi	fp,r16,65535
    e8d4:	a82a923a 	slli	r21,r21,8
    e8d8:	b80b883a 	mov	r5,r23
    e8dc:	000dcc00 	call	dcc0 <__udivsi3>
    e8e0:	b009883a 	mov	r4,r22
    e8e4:	b80b883a 	mov	r5,r23
    e8e8:	1023883a 	mov	r17,r2
    e8ec:	000dcc80 	call	dcc8 <__umodsi3>
    e8f0:	1004943a 	slli	r2,r2,16
    e8f4:	9808d43a 	srli	r4,r19,16
    e8f8:	8f2d383a 	mul	r22,r17,fp
    e8fc:	d9800317 	ldw	r6,12(sp)
    e900:	1106b03a 	or	r3,r2,r4
    e904:	1d80062e 	bgeu	r3,r22,e920 <__divdf3+0x3b4>
    e908:	1c07883a 	add	r3,r3,r16
    e90c:	88bfffc4 	addi	r2,r17,-1
    e910:	1c00dc36 	bltu	r3,r16,ec84 <__divdf3+0x718>
    e914:	1d80db2e 	bgeu	r3,r22,ec84 <__divdf3+0x718>
    e918:	8c7fff84 	addi	r17,r17,-2
    e91c:	1c07883a 	add	r3,r3,r16
    e920:	1dadc83a 	sub	r22,r3,r22
    e924:	b009883a 	mov	r4,r22
    e928:	b80b883a 	mov	r5,r23
    e92c:	d9800315 	stw	r6,12(sp)
    e930:	000dcc00 	call	dcc0 <__udivsi3>
    e934:	b009883a 	mov	r4,r22
    e938:	b80b883a 	mov	r5,r23
    e93c:	d8800015 	stw	r2,0(sp)
    e940:	000dcc80 	call	dcc8 <__umodsi3>
    e944:	da400017 	ldw	r9,0(sp)
    e948:	1004943a 	slli	r2,r2,16
    e94c:	9cffffcc 	andi	r19,r19,65535
    e950:	4f07383a 	mul	r3,r9,fp
    e954:	14c8b03a 	or	r4,r2,r19
    e958:	d9800317 	ldw	r6,12(sp)
    e95c:	20c0062e 	bgeu	r4,r3,e978 <__divdf3+0x40c>
    e960:	2409883a 	add	r4,r4,r16
    e964:	48bfffc4 	addi	r2,r9,-1
    e968:	2400c436 	bltu	r4,r16,ec7c <__divdf3+0x710>
    e96c:	20c0c32e 	bgeu	r4,r3,ec7c <__divdf3+0x710>
    e970:	4a7fff84 	addi	r9,r9,-2
    e974:	2409883a 	add	r4,r4,r16
    e978:	8822943a 	slli	r17,r17,16
    e97c:	a80ed43a 	srli	r7,r21,16
    e980:	aa3fffcc 	andi	r8,r21,65535
    e984:	4c62b03a 	or	r17,r9,r17
    e988:	8816d43a 	srli	r11,r17,16
    e98c:	897fffcc 	andi	r5,r17,65535
    e990:	2a15383a 	mul	r10,r5,r8
    e994:	5a19383a 	mul	r12,r11,r8
    e998:	29cb383a 	mul	r5,r5,r7
    e99c:	5012d43a 	srli	r9,r10,16
    e9a0:	20c5c83a 	sub	r2,r4,r3
    e9a4:	614b883a 	add	r5,r12,r5
    e9a8:	2a4b883a 	add	r5,r5,r9
    e9ac:	59c7383a 	mul	r3,r11,r7
    e9b0:	2b00022e 	bgeu	r5,r12,e9bc <__divdf3+0x450>
    e9b4:	01000074 	movhi	r4,1
    e9b8:	1907883a 	add	r3,r3,r4
    e9bc:	2808d43a 	srli	r4,r5,16
    e9c0:	280a943a 	slli	r5,r5,16
    e9c4:	54ffffcc 	andi	r19,r10,65535
    e9c8:	1907883a 	add	r3,r3,r4
    e9cc:	2ccb883a 	add	r5,r5,r19
    e9d0:	10c09336 	bltu	r2,r3,ec20 <__divdf3+0x6b4>
    e9d4:	10c0ad26 	beq	r2,r3,ec8c <__divdf3+0x720>
    e9d8:	10c7c83a 	sub	r3,r2,r3
    e9dc:	3167c83a 	sub	r19,r6,r5
    e9e0:	34ed803a 	cmpltu	r22,r6,r19
    e9e4:	1dadc83a 	sub	r22,r3,r22
    e9e8:	b400b226 	beq	r22,r16,ecb4 <__divdf3+0x748>
    e9ec:	b009883a 	mov	r4,r22
    e9f0:	b80b883a 	mov	r5,r23
    e9f4:	d9c00115 	stw	r7,4(sp)
    e9f8:	da000215 	stw	r8,8(sp)
    e9fc:	000dcc00 	call	dcc0 <__udivsi3>
    ea00:	b009883a 	mov	r4,r22
    ea04:	b80b883a 	mov	r5,r23
    ea08:	d8800315 	stw	r2,12(sp)
    ea0c:	000dcc80 	call	dcc8 <__umodsi3>
    ea10:	d9800317 	ldw	r6,12(sp)
    ea14:	1004943a 	slli	r2,r2,16
    ea18:	9808d43a 	srli	r4,r19,16
    ea1c:	372d383a 	mul	r22,r6,fp
    ea20:	d9c00117 	ldw	r7,4(sp)
    ea24:	1106b03a 	or	r3,r2,r4
    ea28:	da000217 	ldw	r8,8(sp)
    ea2c:	1d80062e 	bgeu	r3,r22,ea48 <__divdf3+0x4dc>
    ea30:	1c07883a 	add	r3,r3,r16
    ea34:	30bfffc4 	addi	r2,r6,-1
    ea38:	1c00a036 	bltu	r3,r16,ecbc <__divdf3+0x750>
    ea3c:	1d809f2e 	bgeu	r3,r22,ecbc <__divdf3+0x750>
    ea40:	31bfff84 	addi	r6,r6,-2
    ea44:	1c07883a 	add	r3,r3,r16
    ea48:	1dadc83a 	sub	r22,r3,r22
    ea4c:	b009883a 	mov	r4,r22
    ea50:	b80b883a 	mov	r5,r23
    ea54:	d9800315 	stw	r6,12(sp)
    ea58:	d9c00115 	stw	r7,4(sp)
    ea5c:	da000215 	stw	r8,8(sp)
    ea60:	000dcc00 	call	dcc0 <__udivsi3>
    ea64:	b009883a 	mov	r4,r22
    ea68:	b80b883a 	mov	r5,r23
    ea6c:	d8800015 	stw	r2,0(sp)
    ea70:	000dcc80 	call	dcc8 <__umodsi3>
    ea74:	da400017 	ldw	r9,0(sp)
    ea78:	1004943a 	slli	r2,r2,16
    ea7c:	993fffcc 	andi	r4,r19,65535
    ea80:	4f39383a 	mul	fp,r9,fp
    ea84:	1106b03a 	or	r3,r2,r4
    ea88:	d9800317 	ldw	r6,12(sp)
    ea8c:	d9c00117 	ldw	r7,4(sp)
    ea90:	da000217 	ldw	r8,8(sp)
    ea94:	1f00062e 	bgeu	r3,fp,eab0 <__divdf3+0x544>
    ea98:	1c07883a 	add	r3,r3,r16
    ea9c:	48bfffc4 	addi	r2,r9,-1
    eaa0:	1c008836 	bltu	r3,r16,ecc4 <__divdf3+0x758>
    eaa4:	1f00872e 	bgeu	r3,fp,ecc4 <__divdf3+0x758>
    eaa8:	4a7fff84 	addi	r9,r9,-2
    eaac:	1c07883a 	add	r3,r3,r16
    eab0:	3008943a 	slli	r4,r6,16
    eab4:	1f07c83a 	sub	r3,r3,fp
    eab8:	4926b03a 	or	r19,r9,r4
    eabc:	993fffcc 	andi	r4,r19,65535
    eac0:	980cd43a 	srli	r6,r19,16
    eac4:	220b383a 	mul	r5,r4,r8
    eac8:	21c5383a 	mul	r2,r4,r7
    eacc:	3211383a 	mul	r8,r6,r8
    ead0:	2808d43a 	srli	r4,r5,16
    ead4:	31cf383a 	mul	r7,r6,r7
    ead8:	4085883a 	add	r2,r8,r2
    eadc:	1105883a 	add	r2,r2,r4
    eae0:	1200022e 	bgeu	r2,r8,eaec <__divdf3+0x580>
    eae4:	01000074 	movhi	r4,1
    eae8:	390f883a 	add	r7,r7,r4
    eaec:	1008d43a 	srli	r4,r2,16
    eaf0:	1004943a 	slli	r2,r2,16
    eaf4:	297fffcc 	andi	r5,r5,65535
    eaf8:	390f883a 	add	r7,r7,r4
    eafc:	1145883a 	add	r2,r2,r5
    eb00:	19c06536 	bltu	r3,r7,ec98 <__divdf3+0x72c>
    eb04:	19c09f26 	beq	r3,r7,ed84 <__divdf3+0x818>
    eb08:	9cc00054 	ori	r19,r19,1
    eb0c:	a100ffc4 	addi	r4,r20,1023
    eb10:	013f500e 	bge	zero,r4,e854 <__alt_mem_Flash_flash_data+0xf400e854>
    eb14:	988001cc 	andi	r2,r19,7
    eb18:	10000726 	beq	r2,zero,eb38 <__divdf3+0x5cc>
    eb1c:	98c003cc 	andi	r3,r19,15
    eb20:	00800104 	movi	r2,4
    eb24:	18800426 	beq	r3,r2,eb38 <__divdf3+0x5cc>
    eb28:	9885883a 	add	r2,r19,r2
    eb2c:	14e1803a 	cmpltu	r16,r2,r19
    eb30:	8c23883a 	add	r17,r17,r16
    eb34:	1027883a 	mov	r19,r2
    eb38:	8880402c 	andhi	r2,r17,256
    eb3c:	10000426 	beq	r2,zero,eb50 <__divdf3+0x5e4>
    eb40:	00bfc034 	movhi	r2,65280
    eb44:	10bfffc4 	addi	r2,r2,-1
    eb48:	a1010004 	addi	r4,r20,1024
    eb4c:	88a2703a 	and	r17,r17,r2
    eb50:	0081ff84 	movi	r2,2046
    eb54:	113edf16 	blt	r2,r4,e6d4 <__alt_mem_Flash_flash_data+0xf400e6d4>
    eb58:	9826d0fa 	srli	r19,r19,3
    eb5c:	8804977a 	slli	r2,r17,29
    eb60:	8820927a 	slli	r16,r17,9
    eb64:	2101ffcc 	andi	r4,r4,2047
    eb68:	14e6b03a 	or	r19,r2,r19
    eb6c:	800ad33a 	srli	r5,r16,12
    eb70:	9180004c 	andi	r6,r18,1
    eb74:	003edb06 	br	e6e4 <__alt_mem_Flash_flash_data+0xf400e6e4>
    eb78:	008000c4 	movi	r2,3
    eb7c:	4080a826 	beq	r8,r2,ee20 <__divdf3+0x8b4>
    eb80:	00800044 	movi	r2,1
    eb84:	4080551e 	bne	r8,r2,ecdc <__divdf3+0x770>
    eb88:	e00d883a 	mov	r6,fp
    eb8c:	0009883a 	mov	r4,zero
    eb90:	000b883a 	mov	r5,zero
    eb94:	0027883a 	mov	r19,zero
    eb98:	003ed206 	br	e6e4 <__alt_mem_Flash_flash_data+0xf400e6e4>
    eb9c:	00800434 	movhi	r2,16
    eba0:	89400234 	orhi	r5,r17,8
    eba4:	10bfffc4 	addi	r2,r2,-1
    eba8:	b00d883a 	mov	r6,r22
    ebac:	288a703a 	and	r5,r5,r2
    ebb0:	003f2606 	br	e84c <__alt_mem_Flash_flash_data+0xf400e84c>
    ebb4:	d9800315 	stw	r6,12(sp)
    ebb8:	d9c00115 	stw	r7,4(sp)
    ebbc:	001026c0 	call	1026c <__clzsi2>
    ebc0:	10c00804 	addi	r3,r2,32
    ebc4:	010009c4 	movi	r4,39
    ebc8:	d9800317 	ldw	r6,12(sp)
    ebcc:	d9c00117 	ldw	r7,4(sp)
    ebd0:	20fee30e 	bge	r4,r3,e760 <__alt_mem_Flash_flash_data+0xf400e760>
    ebd4:	117ffe04 	addi	r5,r2,-8
    ebd8:	9162983a 	sll	r17,r18,r5
    ebdc:	0027883a 	mov	r19,zero
    ebe0:	003ee606 	br	e77c <__alt_mem_Flash_flash_data+0xf400e77c>
    ebe4:	3009883a 	mov	r4,r6
    ebe8:	d9800315 	stw	r6,12(sp)
    ebec:	da000215 	stw	r8,8(sp)
    ebf0:	da400015 	stw	r9,0(sp)
    ebf4:	001026c0 	call	1026c <__clzsi2>
    ebf8:	10c00804 	addi	r3,r2,32
    ebfc:	010009c4 	movi	r4,39
    ec00:	d9800317 	ldw	r6,12(sp)
    ec04:	da000217 	ldw	r8,8(sp)
    ec08:	da400017 	ldw	r9,0(sp)
    ec0c:	20fef20e 	bge	r4,r3,e7d8 <__alt_mem_Flash_flash_data+0xf400e7d8>
    ec10:	10bffe04 	addi	r2,r2,-8
    ec14:	a8a0983a 	sll	r16,r21,r2
    ec18:	002b883a 	mov	r21,zero
    ec1c:	003ef506 	br	e7f4 <__alt_mem_Flash_flash_data+0xf400e7f4>
    ec20:	354d883a 	add	r6,r6,r21
    ec24:	3549803a 	cmpltu	r4,r6,r21
    ec28:	2409883a 	add	r4,r4,r16
    ec2c:	2089883a 	add	r4,r4,r2
    ec30:	88bfffc4 	addi	r2,r17,-1
    ec34:	81000c2e 	bgeu	r16,r4,ec68 <__divdf3+0x6fc>
    ec38:	20c04436 	bltu	r4,r3,ed4c <__divdf3+0x7e0>
    ec3c:	19006f26 	beq	r3,r4,edfc <__divdf3+0x890>
    ec40:	20c7c83a 	sub	r3,r4,r3
    ec44:	1023883a 	mov	r17,r2
    ec48:	003f6406 	br	e9dc <__alt_mem_Flash_flash_data+0xf400e9dc>
    ec4c:	9d7f1736 	bltu	r19,r21,e8ac <__alt_mem_Flash_flash_data+0xf400e8ac>
    ec50:	9806d07a 	srli	r3,r19,1
    ec54:	880497fa 	slli	r2,r17,31
    ec58:	980c97fa 	slli	r6,r19,31
    ec5c:	882cd07a 	srli	r22,r17,1
    ec60:	18a6b03a 	or	r19,r3,r2
    ec64:	003f1406 	br	e8b8 <__alt_mem_Flash_flash_data+0xf400e8b8>
    ec68:	243ff51e 	bne	r4,r16,ec40 <__alt_mem_Flash_flash_data+0xf400ec40>
    ec6c:	357ff22e 	bgeu	r6,r21,ec38 <__alt_mem_Flash_flash_data+0xf400ec38>
    ec70:	80c7c83a 	sub	r3,r16,r3
    ec74:	1023883a 	mov	r17,r2
    ec78:	003f5806 	br	e9dc <__alt_mem_Flash_flash_data+0xf400e9dc>
    ec7c:	1013883a 	mov	r9,r2
    ec80:	003f3d06 	br	e978 <__alt_mem_Flash_flash_data+0xf400e978>
    ec84:	1023883a 	mov	r17,r2
    ec88:	003f2506 	br	e920 <__alt_mem_Flash_flash_data+0xf400e920>
    ec8c:	317fe436 	bltu	r6,r5,ec20 <__alt_mem_Flash_flash_data+0xf400ec20>
    ec90:	0007883a 	mov	r3,zero
    ec94:	003f5106 	br	e9dc <__alt_mem_Flash_flash_data+0xf400e9dc>
    ec98:	1c07883a 	add	r3,r3,r16
    ec9c:	993fffc4 	addi	r4,r19,-1
    eca0:	1c000a2e 	bgeu	r3,r16,eccc <__divdf3+0x760>
    eca4:	2027883a 	mov	r19,r4
    eca8:	19ff971e 	bne	r3,r7,eb08 <__alt_mem_Flash_flash_data+0xf400eb08>
    ecac:	a8bf961e 	bne	r21,r2,eb08 <__alt_mem_Flash_flash_data+0xf400eb08>
    ecb0:	003f9606 	br	eb0c <__alt_mem_Flash_flash_data+0xf400eb0c>
    ecb4:	04ffffc4 	movi	r19,-1
    ecb8:	003f9406 	br	eb0c <__alt_mem_Flash_flash_data+0xf400eb0c>
    ecbc:	100d883a 	mov	r6,r2
    ecc0:	003f6106 	br	ea48 <__alt_mem_Flash_flash_data+0xf400ea48>
    ecc4:	1013883a 	mov	r9,r2
    ecc8:	003f7906 	br	eab0 <__alt_mem_Flash_flash_data+0xf400eab0>
    eccc:	19c02636 	bltu	r3,r7,ed68 <__divdf3+0x7fc>
    ecd0:	38c04d26 	beq	r7,r3,ee08 <__divdf3+0x89c>
    ecd4:	2027883a 	mov	r19,r4
    ecd8:	003f8b06 	br	eb08 <__alt_mem_Flash_flash_data+0xf400eb08>
    ecdc:	e025883a 	mov	r18,fp
    ece0:	003f8a06 	br	eb0c <__alt_mem_Flash_flash_data+0xf400eb0c>
    ece4:	008007c4 	movi	r2,31
    ece8:	14002a16 	blt	r2,r16,ed94 <__divdf3+0x828>
    ecec:	a5010784 	addi	r20,r20,1054
    ecf0:	8d04983a 	sll	r2,r17,r20
    ecf4:	9c06d83a 	srl	r3,r19,r16
    ecf8:	9d28983a 	sll	r20,r19,r20
    ecfc:	8c20d83a 	srl	r16,r17,r16
    ed00:	1886b03a 	or	r3,r3,r2
    ed04:	a004c03a 	cmpne	r2,r20,zero
    ed08:	1884b03a 	or	r2,r3,r2
    ed0c:	10c001cc 	andi	r3,r2,7
    ed10:	18000726 	beq	r3,zero,ed30 <__divdf3+0x7c4>
    ed14:	110003cc 	andi	r4,r2,15
    ed18:	00c00104 	movi	r3,4
    ed1c:	20c00426 	beq	r4,r3,ed30 <__divdf3+0x7c4>
    ed20:	10c00104 	addi	r3,r2,4
    ed24:	1885803a 	cmpltu	r2,r3,r2
    ed28:	80a1883a 	add	r16,r16,r2
    ed2c:	1805883a 	mov	r2,r3
    ed30:	80c0202c 	andhi	r3,r16,128
    ed34:	18002d26 	beq	r3,zero,edec <__divdf3+0x880>
    ed38:	9180004c 	andi	r6,r18,1
    ed3c:	01000044 	movi	r4,1
    ed40:	000b883a 	mov	r5,zero
    ed44:	0027883a 	mov	r19,zero
    ed48:	003e6606 	br	e6e4 <__alt_mem_Flash_flash_data+0xf400e6e4>
    ed4c:	354d883a 	add	r6,r6,r21
    ed50:	356d803a 	cmpltu	r22,r6,r21
    ed54:	b42d883a 	add	r22,r22,r16
    ed58:	b12d883a 	add	r22,r22,r4
    ed5c:	8c7fff84 	addi	r17,r17,-2
    ed60:	b0c7c83a 	sub	r3,r22,r3
    ed64:	003f1d06 	br	e9dc <__alt_mem_Flash_flash_data+0xf400e9dc>
    ed68:	ad4b883a 	add	r5,r21,r21
    ed6c:	2d6b803a 	cmpltu	r21,r5,r21
    ed70:	ac2b883a 	add	r21,r21,r16
    ed74:	1d47883a 	add	r3,r3,r21
    ed78:	993fff84 	addi	r4,r19,-2
    ed7c:	282b883a 	mov	r21,r5
    ed80:	003fc806 	br	eca4 <__alt_mem_Flash_flash_data+0xf400eca4>
    ed84:	103fc41e 	bne	r2,zero,ec98 <__alt_mem_Flash_flash_data+0xf400ec98>
    ed88:	002b883a 	mov	r21,zero
    ed8c:	a8bf5e1e 	bne	r21,r2,eb08 <__alt_mem_Flash_flash_data+0xf400eb08>
    ed90:	003f5e06 	br	eb0c <__alt_mem_Flash_flash_data+0xf400eb0c>
    ed94:	00bef884 	movi	r2,-1054
    ed98:	1505c83a 	sub	r2,r2,r20
    ed9c:	00c00804 	movi	r3,32
    eda0:	8884d83a 	srl	r2,r17,r2
    eda4:	80c01c26 	beq	r16,r3,ee18 <__divdf3+0x8ac>
    eda8:	a0c10f84 	addi	r3,r20,1086
    edac:	88c6983a 	sll	r3,r17,r3
    edb0:	1cc6b03a 	or	r3,r3,r19
    edb4:	1806c03a 	cmpne	r3,r3,zero
    edb8:	1884b03a 	or	r2,r3,r2
    edbc:	140001cc 	andi	r16,r2,7
    edc0:	8000061e 	bne	r16,zero,eddc <__divdf3+0x870>
    edc4:	000b883a 	mov	r5,zero
    edc8:	1004d0fa 	srli	r2,r2,3
    edcc:	9180004c 	andi	r6,r18,1
    edd0:	0009883a 	mov	r4,zero
    edd4:	1426b03a 	or	r19,r2,r16
    edd8:	003e4206 	br	e6e4 <__alt_mem_Flash_flash_data+0xf400e6e4>
    eddc:	110003cc 	andi	r4,r2,15
    ede0:	00c00104 	movi	r3,4
    ede4:	0021883a 	mov	r16,zero
    ede8:	20ffcd1e 	bne	r4,r3,ed20 <__alt_mem_Flash_flash_data+0xf400ed20>
    edec:	800a927a 	slli	r5,r16,9
    edf0:	8020977a 	slli	r16,r16,29
    edf4:	280ad33a 	srli	r5,r5,12
    edf8:	003ff306 	br	edc8 <__alt_mem_Flash_flash_data+0xf400edc8>
    edfc:	317fd336 	bltu	r6,r5,ed4c <__alt_mem_Flash_flash_data+0xf400ed4c>
    ee00:	1023883a 	mov	r17,r2
    ee04:	003fa206 	br	ec90 <__alt_mem_Flash_flash_data+0xf400ec90>
    ee08:	a8bfd736 	bltu	r21,r2,ed68 <__alt_mem_Flash_flash_data+0xf400ed68>
    ee0c:	2027883a 	mov	r19,r4
    ee10:	a8bf3d1e 	bne	r21,r2,eb08 <__alt_mem_Flash_flash_data+0xf400eb08>
    ee14:	003f3d06 	br	eb0c <__alt_mem_Flash_flash_data+0xf400eb0c>
    ee18:	0007883a 	mov	r3,zero
    ee1c:	003fe406 	br	edb0 <__alt_mem_Flash_flash_data+0xf400edb0>
    ee20:	00800434 	movhi	r2,16
    ee24:	89400234 	orhi	r5,r17,8
    ee28:	10bfffc4 	addi	r2,r2,-1
    ee2c:	e00d883a 	mov	r6,fp
    ee30:	288a703a 	and	r5,r5,r2
    ee34:	003e8506 	br	e84c <__alt_mem_Flash_flash_data+0xf400e84c>

0000ee38 <__eqdf2>:
    ee38:	2804d53a 	srli	r2,r5,20
    ee3c:	3806d53a 	srli	r3,r7,20
    ee40:	02000434 	movhi	r8,16
    ee44:	423fffc4 	addi	r8,r8,-1
    ee48:	1081ffcc 	andi	r2,r2,2047
    ee4c:	0241ffc4 	movi	r9,2047
    ee50:	2a14703a 	and	r10,r5,r8
    ee54:	18c1ffcc 	andi	r3,r3,2047
    ee58:	3a10703a 	and	r8,r7,r8
    ee5c:	280ad7fa 	srli	r5,r5,31
    ee60:	380ed7fa 	srli	r7,r7,31
    ee64:	12400f26 	beq	r2,r9,eea4 <__eqdf2+0x6c>
    ee68:	0241ffc4 	movi	r9,2047
    ee6c:	1a400326 	beq	r3,r9,ee7c <__eqdf2+0x44>
    ee70:	10c00526 	beq	r2,r3,ee88 <__eqdf2+0x50>
    ee74:	00800044 	movi	r2,1
    ee78:	f800283a 	ret
    ee7c:	4192b03a 	or	r9,r8,r6
    ee80:	483ffc1e 	bne	r9,zero,ee74 <__alt_mem_Flash_flash_data+0xf400ee74>
    ee84:	10fffb1e 	bne	r2,r3,ee74 <__alt_mem_Flash_flash_data+0xf400ee74>
    ee88:	523ffa1e 	bne	r10,r8,ee74 <__alt_mem_Flash_flash_data+0xf400ee74>
    ee8c:	21bff91e 	bne	r4,r6,ee74 <__alt_mem_Flash_flash_data+0xf400ee74>
    ee90:	29c00826 	beq	r5,r7,eeb4 <__eqdf2+0x7c>
    ee94:	103ff71e 	bne	r2,zero,ee74 <__alt_mem_Flash_flash_data+0xf400ee74>
    ee98:	5104b03a 	or	r2,r10,r4
    ee9c:	1004c03a 	cmpne	r2,r2,zero
    eea0:	f800283a 	ret
    eea4:	5112b03a 	or	r9,r10,r4
    eea8:	483fef26 	beq	r9,zero,ee68 <__alt_mem_Flash_flash_data+0xf400ee68>
    eeac:	00800044 	movi	r2,1
    eeb0:	f800283a 	ret
    eeb4:	0005883a 	mov	r2,zero
    eeb8:	f800283a 	ret

0000eebc <__gedf2>:
    eebc:	2804d53a 	srli	r2,r5,20
    eec0:	3806d53a 	srli	r3,r7,20
    eec4:	02000434 	movhi	r8,16
    eec8:	423fffc4 	addi	r8,r8,-1
    eecc:	0241ffc4 	movi	r9,2047
    eed0:	1081ffcc 	andi	r2,r2,2047
    eed4:	2a14703a 	and	r10,r5,r8
    eed8:	1a46703a 	and	r3,r3,r9
    eedc:	3a10703a 	and	r8,r7,r8
    eee0:	280ad7fa 	srli	r5,r5,31
    eee4:	380ed7fa 	srli	r7,r7,31
    eee8:	12400b26 	beq	r2,r9,ef18 <__gedf2+0x5c>
    eeec:	1a401626 	beq	r3,r9,ef48 <__gedf2+0x8c>
    eef0:	10000c1e 	bne	r2,zero,ef24 <__gedf2+0x68>
    eef4:	5112b03a 	or	r9,r10,r4
    eef8:	4813003a 	cmpeq	r9,r9,zero
    eefc:	4817883a 	mov	r11,r9
    ef00:	18000c1e 	bne	r3,zero,ef34 <__gedf2+0x78>
    ef04:	4198b03a 	or	r12,r8,r6
    ef08:	60000a1e 	bne	r12,zero,ef34 <__gedf2+0x78>
    ef0c:	48001326 	beq	r9,zero,ef5c <__gedf2+0xa0>
    ef10:	0005883a 	mov	r2,zero
    ef14:	f800283a 	ret
    ef18:	5112b03a 	or	r9,r10,r4
    ef1c:	4800191e 	bne	r9,zero,ef84 <__gedf2+0xc8>
    ef20:	18800926 	beq	r3,r2,ef48 <__gedf2+0x8c>
    ef24:	18000b1e 	bne	r3,zero,ef54 <__gedf2+0x98>
    ef28:	4192b03a 	or	r9,r8,r6
    ef2c:	0017883a 	mov	r11,zero
    ef30:	48000a26 	beq	r9,zero,ef5c <__gedf2+0xa0>
    ef34:	39c03fcc 	andi	r7,r7,255
    ef38:	58000726 	beq	r11,zero,ef58 <__gedf2+0x9c>
    ef3c:	3800081e 	bne	r7,zero,ef60 <__gedf2+0xa4>
    ef40:	00bfffc4 	movi	r2,-1
    ef44:	f800283a 	ret
    ef48:	4192b03a 	or	r9,r8,r6
    ef4c:	48000d1e 	bne	r9,zero,ef84 <__gedf2+0xc8>
    ef50:	103fe826 	beq	r2,zero,eef4 <__alt_mem_Flash_flash_data+0xf400eef4>
    ef54:	39c03fcc 	andi	r7,r7,255
    ef58:	29c00326 	beq	r5,r7,ef68 <__gedf2+0xac>
    ef5c:	283ff81e 	bne	r5,zero,ef40 <__alt_mem_Flash_flash_data+0xf400ef40>
    ef60:	00800044 	movi	r2,1
    ef64:	f800283a 	ret
    ef68:	18bffc16 	blt	r3,r2,ef5c <__alt_mem_Flash_flash_data+0xf400ef5c>
    ef6c:	10c00316 	blt	r2,r3,ef7c <__gedf2+0xc0>
    ef70:	42bffa36 	bltu	r8,r10,ef5c <__alt_mem_Flash_flash_data+0xf400ef5c>
    ef74:	52000526 	beq	r10,r8,ef8c <__gedf2+0xd0>
    ef78:	523fe52e 	bgeu	r10,r8,ef10 <__alt_mem_Flash_flash_data+0xf400ef10>
    ef7c:	283ff026 	beq	r5,zero,ef40 <__alt_mem_Flash_flash_data+0xf400ef40>
    ef80:	003ff706 	br	ef60 <__alt_mem_Flash_flash_data+0xf400ef60>
    ef84:	00bfff84 	movi	r2,-2
    ef88:	f800283a 	ret
    ef8c:	313ff336 	bltu	r6,r4,ef5c <__alt_mem_Flash_flash_data+0xf400ef5c>
    ef90:	21bfdf2e 	bgeu	r4,r6,ef10 <__alt_mem_Flash_flash_data+0xf400ef10>
    ef94:	283fea26 	beq	r5,zero,ef40 <__alt_mem_Flash_flash_data+0xf400ef40>
    ef98:	003ff106 	br	ef60 <__alt_mem_Flash_flash_data+0xf400ef60>

0000ef9c <__ledf2>:
    ef9c:	2804d53a 	srli	r2,r5,20
    efa0:	3810d53a 	srli	r8,r7,20
    efa4:	00c00434 	movhi	r3,16
    efa8:	18ffffc4 	addi	r3,r3,-1
    efac:	0241ffc4 	movi	r9,2047
    efb0:	1081ffcc 	andi	r2,r2,2047
    efb4:	28d4703a 	and	r10,r5,r3
    efb8:	4250703a 	and	r8,r8,r9
    efbc:	38c6703a 	and	r3,r7,r3
    efc0:	280ad7fa 	srli	r5,r5,31
    efc4:	380ed7fa 	srli	r7,r7,31
    efc8:	12400b26 	beq	r2,r9,eff8 <__ledf2+0x5c>
    efcc:	42401926 	beq	r8,r9,f034 <__ledf2+0x98>
    efd0:	10000c1e 	bne	r2,zero,f004 <__ledf2+0x68>
    efd4:	5112b03a 	or	r9,r10,r4
    efd8:	4813003a 	cmpeq	r9,r9,zero
    efdc:	4817883a 	mov	r11,r9
    efe0:	40000f26 	beq	r8,zero,f020 <__ledf2+0x84>
    efe4:	39c03fcc 	andi	r7,r7,255
    efe8:	58001826 	beq	r11,zero,f04c <__ledf2+0xb0>
    efec:	38000a1e 	bne	r7,zero,f018 <__ledf2+0x7c>
    eff0:	00bfffc4 	movi	r2,-1
    eff4:	f800283a 	ret
    eff8:	5112b03a 	or	r9,r10,r4
    effc:	48000f1e 	bne	r9,zero,f03c <__ledf2+0xa0>
    f000:	40800c26 	beq	r8,r2,f034 <__ledf2+0x98>
    f004:	4000101e 	bne	r8,zero,f048 <__ledf2+0xac>
    f008:	1992b03a 	or	r9,r3,r6
    f00c:	0017883a 	mov	r11,zero
    f010:	483ff41e 	bne	r9,zero,efe4 <__alt_mem_Flash_flash_data+0xf400efe4>
    f014:	283ff61e 	bne	r5,zero,eff0 <__alt_mem_Flash_flash_data+0xf400eff0>
    f018:	00800044 	movi	r2,1
    f01c:	f800283a 	ret
    f020:	1998b03a 	or	r12,r3,r6
    f024:	603fef1e 	bne	r12,zero,efe4 <__alt_mem_Flash_flash_data+0xf400efe4>
    f028:	483ffa26 	beq	r9,zero,f014 <__alt_mem_Flash_flash_data+0xf400f014>
    f02c:	0005883a 	mov	r2,zero
    f030:	f800283a 	ret
    f034:	1992b03a 	or	r9,r3,r6
    f038:	48000226 	beq	r9,zero,f044 <__ledf2+0xa8>
    f03c:	00800084 	movi	r2,2
    f040:	f800283a 	ret
    f044:	103fe326 	beq	r2,zero,efd4 <__alt_mem_Flash_flash_data+0xf400efd4>
    f048:	39c03fcc 	andi	r7,r7,255
    f04c:	29fff11e 	bne	r5,r7,f014 <__alt_mem_Flash_flash_data+0xf400f014>
    f050:	40bff016 	blt	r8,r2,f014 <__alt_mem_Flash_flash_data+0xf400f014>
    f054:	12000316 	blt	r2,r8,f064 <__ledf2+0xc8>
    f058:	1abfee36 	bltu	r3,r10,f014 <__alt_mem_Flash_flash_data+0xf400f014>
    f05c:	50c00326 	beq	r10,r3,f06c <__ledf2+0xd0>
    f060:	50fff22e 	bgeu	r10,r3,f02c <__alt_mem_Flash_flash_data+0xf400f02c>
    f064:	283fe226 	beq	r5,zero,eff0 <__alt_mem_Flash_flash_data+0xf400eff0>
    f068:	003feb06 	br	f018 <__alt_mem_Flash_flash_data+0xf400f018>
    f06c:	313fe936 	bltu	r6,r4,f014 <__alt_mem_Flash_flash_data+0xf400f014>
    f070:	21bfee2e 	bgeu	r4,r6,f02c <__alt_mem_Flash_flash_data+0xf400f02c>
    f074:	283fde26 	beq	r5,zero,eff0 <__alt_mem_Flash_flash_data+0xf400eff0>
    f078:	003fe706 	br	f018 <__alt_mem_Flash_flash_data+0xf400f018>

0000f07c <__muldf3>:
    f07c:	defff204 	addi	sp,sp,-56
    f080:	2804d53a 	srli	r2,r5,20
    f084:	dd800a15 	stw	r22,40(sp)
    f088:	282cd7fa 	srli	r22,r5,31
    f08c:	dc000415 	stw	r16,16(sp)
    f090:	04000434 	movhi	r16,16
    f094:	df000c15 	stw	fp,48(sp)
    f098:	dd000815 	stw	r20,32(sp)
    f09c:	dcc00715 	stw	r19,28(sp)
    f0a0:	dc800615 	stw	r18,24(sp)
    f0a4:	dc400515 	stw	r17,20(sp)
    f0a8:	843fffc4 	addi	r16,r16,-1
    f0ac:	dfc00d15 	stw	ra,52(sp)
    f0b0:	ddc00b15 	stw	r23,44(sp)
    f0b4:	dd400915 	stw	r21,36(sp)
    f0b8:	1501ffcc 	andi	r20,r2,2047
    f0bc:	2023883a 	mov	r17,r4
    f0c0:	2025883a 	mov	r18,r4
    f0c4:	2c20703a 	and	r16,r5,r16
    f0c8:	b027883a 	mov	r19,r22
    f0cc:	b7003fcc 	andi	fp,r22,255
    f0d0:	a0005926 	beq	r20,zero,f238 <__muldf3+0x1bc>
    f0d4:	0081ffc4 	movi	r2,2047
    f0d8:	a0803426 	beq	r20,r2,f1ac <__muldf3+0x130>
    f0dc:	84000434 	orhi	r16,r16,16
    f0e0:	2004d77a 	srli	r2,r4,29
    f0e4:	802090fa 	slli	r16,r16,3
    f0e8:	202490fa 	slli	r18,r4,3
    f0ec:	a53f0044 	addi	r20,r20,-1023
    f0f0:	80a0b03a 	or	r16,r16,r2
    f0f4:	002b883a 	mov	r21,zero
    f0f8:	0015883a 	mov	r10,zero
    f0fc:	3812d53a 	srli	r9,r7,20
    f100:	3806d7fa 	srli	r3,r7,31
    f104:	02000434 	movhi	r8,16
    f108:	423fffc4 	addi	r8,r8,-1
    f10c:	4941ffcc 	andi	r5,r9,2047
    f110:	302f883a 	mov	r23,r6
    f114:	3a22703a 	and	r17,r7,r8
    f118:	1ac03fcc 	andi	r11,r3,255
    f11c:	28006226 	beq	r5,zero,f2a8 <__muldf3+0x22c>
    f120:	0081ffc4 	movi	r2,2047
    f124:	28805a26 	beq	r5,r2,f290 <__muldf3+0x214>
    f128:	8a000434 	orhi	r8,r17,16
    f12c:	3004d77a 	srli	r2,r6,29
    f130:	401090fa 	slli	r8,r8,3
    f134:	302e90fa 	slli	r23,r6,3
    f138:	297f0044 	addi	r5,r5,-1023
    f13c:	40a2b03a 	or	r17,r8,r2
    f140:	0013883a 	mov	r9,zero
    f144:	4d4cb03a 	or	r6,r9,r21
    f148:	300c90ba 	slli	r6,r6,2
    f14c:	02000074 	movhi	r8,1
    f150:	423c5b04 	addi	r8,r8,-3732
    f154:	320d883a 	add	r6,r6,r8
    f158:	31800017 	ldw	r6,0(r6)
    f15c:	a14b883a 	add	r5,r20,r5
    f160:	1dacf03a 	xor	r22,r3,r22
    f164:	2b000044 	addi	r12,r5,1
    f168:	3000683a 	jmp	r6
    f16c:	0000f3a8 	cmpgeui	zero,zero,974
    f170:	0000f394 	movui	zero,974
    f174:	0000f394 	movui	zero,974
    f178:	0000f380 	call	f38 <___svfprintf_internal_r+0x48>
    f17c:	0000f1c8 	cmpgei	zero,zero,967
    f180:	0000f1c8 	cmpgei	zero,zero,967
    f184:	0000f368 	cmpgeui	zero,zero,973
    f188:	0000f380 	call	f38 <___svfprintf_internal_r+0x48>
    f18c:	0000f1c8 	cmpgei	zero,zero,967
    f190:	0000f368 	cmpgeui	zero,zero,973
    f194:	0000f1c8 	cmpgei	zero,zero,967
    f198:	0000f380 	call	f38 <___svfprintf_internal_r+0x48>
    f19c:	0000f1cc 	andi	zero,zero,967
    f1a0:	0000f1cc 	andi	zero,zero,967
    f1a4:	0000f1cc 	andi	zero,zero,967
    f1a8:	0000f5a4 	muli	zero,zero,982
    f1ac:	8104b03a 	or	r2,r16,r4
    f1b0:	10006a1e 	bne	r2,zero,f35c <__muldf3+0x2e0>
    f1b4:	05400204 	movi	r21,8
    f1b8:	0021883a 	mov	r16,zero
    f1bc:	0025883a 	mov	r18,zero
    f1c0:	02800084 	movi	r10,2
    f1c4:	003fcd06 	br	f0fc <__alt_mem_Flash_flash_data+0xf400f0fc>
    f1c8:	b039883a 	mov	fp,r22
    f1cc:	00800084 	movi	r2,2
    f1d0:	50804e1e 	bne	r10,r2,f30c <__muldf3+0x290>
    f1d4:	e4c0004c 	andi	r19,fp,1
    f1d8:	0101ffc4 	movi	r4,2047
    f1dc:	0021883a 	mov	r16,zero
    f1e0:	0025883a 	mov	r18,zero
    f1e4:	2008953a 	slli	r4,r4,20
    f1e8:	98c03fcc 	andi	r3,r19,255
    f1ec:	01400434 	movhi	r5,16
    f1f0:	297fffc4 	addi	r5,r5,-1
    f1f4:	180697fa 	slli	r3,r3,31
    f1f8:	8160703a 	and	r16,r16,r5
    f1fc:	8120b03a 	or	r16,r16,r4
    f200:	80c6b03a 	or	r3,r16,r3
    f204:	9005883a 	mov	r2,r18
    f208:	dfc00d17 	ldw	ra,52(sp)
    f20c:	df000c17 	ldw	fp,48(sp)
    f210:	ddc00b17 	ldw	r23,44(sp)
    f214:	dd800a17 	ldw	r22,40(sp)
    f218:	dd400917 	ldw	r21,36(sp)
    f21c:	dd000817 	ldw	r20,32(sp)
    f220:	dcc00717 	ldw	r19,28(sp)
    f224:	dc800617 	ldw	r18,24(sp)
    f228:	dc400517 	ldw	r17,20(sp)
    f22c:	dc000417 	ldw	r16,16(sp)
    f230:	dec00e04 	addi	sp,sp,56
    f234:	f800283a 	ret
    f238:	8104b03a 	or	r2,r16,r4
    f23c:	10004226 	beq	r2,zero,f348 <__muldf3+0x2cc>
    f240:	8000f926 	beq	r16,zero,f628 <__muldf3+0x5ac>
    f244:	8009883a 	mov	r4,r16
    f248:	d9800315 	stw	r6,12(sp)
    f24c:	d9c00015 	stw	r7,0(sp)
    f250:	001026c0 	call	1026c <__clzsi2>
    f254:	d9800317 	ldw	r6,12(sp)
    f258:	d9c00017 	ldw	r7,0(sp)
    f25c:	1007883a 	mov	r3,r2
    f260:	01000a04 	movi	r4,40
    f264:	18bffe04 	addi	r2,r3,-8
    f268:	20c9c83a 	sub	r4,r4,r3
    f26c:	80a0983a 	sll	r16,r16,r2
    f270:	8908d83a 	srl	r4,r17,r4
    f274:	88a4983a 	sll	r18,r17,r2
    f278:	2420b03a 	or	r16,r4,r16
    f27c:	017f0344 	movi	r5,-1011
    f280:	28e9c83a 	sub	r20,r5,r3
    f284:	002b883a 	mov	r21,zero
    f288:	0015883a 	mov	r10,zero
    f28c:	003f9b06 	br	f0fc <__alt_mem_Flash_flash_data+0xf400f0fc>
    f290:	8984b03a 	or	r2,r17,r6
    f294:	10002a1e 	bne	r2,zero,f340 <__muldf3+0x2c4>
    f298:	0023883a 	mov	r17,zero
    f29c:	002f883a 	mov	r23,zero
    f2a0:	02400084 	movi	r9,2
    f2a4:	003fa706 	br	f144 <__alt_mem_Flash_flash_data+0xf400f144>
    f2a8:	8984b03a 	or	r2,r17,r6
    f2ac:	10002026 	beq	r2,zero,f330 <__muldf3+0x2b4>
    f2b0:	8800cc26 	beq	r17,zero,f5e4 <__muldf3+0x568>
    f2b4:	8809883a 	mov	r4,r17
    f2b8:	d8c00215 	stw	r3,8(sp)
    f2bc:	d9800315 	stw	r6,12(sp)
    f2c0:	da800015 	stw	r10,0(sp)
    f2c4:	dac00115 	stw	r11,4(sp)
    f2c8:	001026c0 	call	1026c <__clzsi2>
    f2cc:	d8c00217 	ldw	r3,8(sp)
    f2d0:	d9800317 	ldw	r6,12(sp)
    f2d4:	da800017 	ldw	r10,0(sp)
    f2d8:	dac00117 	ldw	r11,4(sp)
    f2dc:	1009883a 	mov	r4,r2
    f2e0:	01400a04 	movi	r5,40
    f2e4:	25fffe04 	addi	r23,r4,-8
    f2e8:	290bc83a 	sub	r5,r5,r4
    f2ec:	8dd0983a 	sll	r8,r17,r23
    f2f0:	314ad83a 	srl	r5,r6,r5
    f2f4:	35ee983a 	sll	r23,r6,r23
    f2f8:	2a22b03a 	or	r17,r5,r8
    f2fc:	017f0344 	movi	r5,-1011
    f300:	290bc83a 	sub	r5,r5,r4
    f304:	0013883a 	mov	r9,zero
    f308:	003f8e06 	br	f144 <__alt_mem_Flash_flash_data+0xf400f144>
    f30c:	008000c4 	movi	r2,3
    f310:	50811d26 	beq	r10,r2,f788 <__muldf3+0x70c>
    f314:	00800044 	movi	r2,1
    f318:	5080e01e 	bne	r10,r2,f69c <__muldf3+0x620>
    f31c:	e0a6703a 	and	r19,fp,r2
    f320:	0009883a 	mov	r4,zero
    f324:	0021883a 	mov	r16,zero
    f328:	0025883a 	mov	r18,zero
    f32c:	003fad06 	br	f1e4 <__alt_mem_Flash_flash_data+0xf400f1e4>
    f330:	0023883a 	mov	r17,zero
    f334:	002f883a 	mov	r23,zero
    f338:	02400044 	movi	r9,1
    f33c:	003f8106 	br	f144 <__alt_mem_Flash_flash_data+0xf400f144>
    f340:	024000c4 	movi	r9,3
    f344:	003f7f06 	br	f144 <__alt_mem_Flash_flash_data+0xf400f144>
    f348:	05400104 	movi	r21,4
    f34c:	0021883a 	mov	r16,zero
    f350:	0025883a 	mov	r18,zero
    f354:	02800044 	movi	r10,1
    f358:	003f6806 	br	f0fc <__alt_mem_Flash_flash_data+0xf400f0fc>
    f35c:	05400304 	movi	r21,12
    f360:	028000c4 	movi	r10,3
    f364:	003f6506 	br	f0fc <__alt_mem_Flash_flash_data+0xf400f0fc>
    f368:	04000434 	movhi	r16,16
    f36c:	0027883a 	mov	r19,zero
    f370:	843fffc4 	addi	r16,r16,-1
    f374:	04bfffc4 	movi	r18,-1
    f378:	0101ffc4 	movi	r4,2047
    f37c:	003f9906 	br	f1e4 <__alt_mem_Flash_flash_data+0xf400f1e4>
    f380:	8821883a 	mov	r16,r17
    f384:	b825883a 	mov	r18,r23
    f388:	5839883a 	mov	fp,r11
    f38c:	4815883a 	mov	r10,r9
    f390:	003f8e06 	br	f1cc <__alt_mem_Flash_flash_data+0xf400f1cc>
    f394:	8821883a 	mov	r16,r17
    f398:	b825883a 	mov	r18,r23
    f39c:	b039883a 	mov	fp,r22
    f3a0:	4815883a 	mov	r10,r9
    f3a4:	003f8906 	br	f1cc <__alt_mem_Flash_flash_data+0xf400f1cc>
    f3a8:	b80cd43a 	srli	r6,r23,16
    f3ac:	9006d43a 	srli	r3,r18,16
    f3b0:	90bfffcc 	andi	r2,r18,65535
    f3b4:	bdffffcc 	andi	r23,r23,65535
    f3b8:	b891383a 	mul	r8,r23,r2
    f3bc:	b8c9383a 	mul	r4,r23,r3
    f3c0:	309b383a 	mul	r13,r6,r2
    f3c4:	400ed43a 	srli	r7,r8,16
    f3c8:	30df383a 	mul	r15,r6,r3
    f3cc:	235b883a 	add	r13,r4,r13
    f3d0:	69db883a 	add	r13,r13,r7
    f3d4:	6900022e 	bgeu	r13,r4,f3e0 <__muldf3+0x364>
    f3d8:	01000074 	movhi	r4,1
    f3dc:	791f883a 	add	r15,r15,r4
    f3e0:	8828d43a 	srli	r20,r17,16
    f3e4:	8c7fffcc 	andi	r17,r17,65535
    f3e8:	888f383a 	mul	r7,r17,r2
    f3ec:	88d3383a 	mul	r9,r17,r3
    f3f0:	a0a5383a 	mul	r18,r20,r2
    f3f4:	3816d43a 	srli	r11,r7,16
    f3f8:	6814943a 	slli	r10,r13,16
    f3fc:	4ca5883a 	add	r18,r9,r18
    f400:	423fffcc 	andi	r8,r8,65535
    f404:	92e5883a 	add	r18,r18,r11
    f408:	6808d43a 	srli	r4,r13,16
    f40c:	5215883a 	add	r10,r10,r8
    f410:	a0c7383a 	mul	r3,r20,r3
    f414:	9240022e 	bgeu	r18,r9,f420 <__muldf3+0x3a4>
    f418:	00800074 	movhi	r2,1
    f41c:	1887883a 	add	r3,r3,r2
    f420:	802ad43a 	srli	r21,r16,16
    f424:	80bfffcc 	andi	r2,r16,65535
    f428:	b893383a 	mul	r9,r23,r2
    f42c:	3091383a 	mul	r8,r6,r2
    f430:	bd6f383a 	mul	r23,r23,r21
    f434:	9026943a 	slli	r19,r18,16
    f438:	481ad43a 	srli	r13,r9,16
    f43c:	9024d43a 	srli	r18,r18,16
    f440:	39ffffcc 	andi	r7,r7,65535
    f444:	ba11883a 	add	r8,r23,r8
    f448:	99e7883a 	add	r19,r19,r7
    f44c:	4351883a 	add	r8,r8,r13
    f450:	1c97883a 	add	r11,r3,r18
    f454:	354d383a 	mul	r6,r6,r21
    f458:	9925883a 	add	r18,r19,r4
    f45c:	45c0022e 	bgeu	r8,r23,f468 <__muldf3+0x3ec>
    f460:	00c00074 	movhi	r3,1
    f464:	30cd883a 	add	r6,r6,r3
    f468:	8889383a 	mul	r4,r17,r2
    f46c:	8d63383a 	mul	r17,r17,r21
    f470:	a085383a 	mul	r2,r20,r2
    f474:	200ed43a 	srli	r7,r4,16
    f478:	401cd43a 	srli	r14,r8,16
    f47c:	401a943a 	slli	r13,r8,16
    f480:	8885883a 	add	r2,r17,r2
    f484:	4a3fffcc 	andi	r8,r9,65535
    f488:	11c5883a 	add	r2,r2,r7
    f48c:	339d883a 	add	r14,r6,r14
    f490:	6a11883a 	add	r8,r13,r8
    f494:	a561383a 	mul	r16,r20,r21
    f498:	1440022e 	bgeu	r2,r17,f4a4 <__muldf3+0x428>
    f49c:	00c00074 	movhi	r3,1
    f4a0:	80e1883a 	add	r16,r16,r3
    f4a4:	1006943a 	slli	r3,r2,16
    f4a8:	213fffcc 	andi	r4,r4,65535
    f4ac:	93db883a 	add	r13,r18,r15
    f4b0:	1909883a 	add	r4,r3,r4
    f4b4:	22c7883a 	add	r3,r4,r11
    f4b8:	6cd3803a 	cmpltu	r9,r13,r19
    f4bc:	6a09883a 	add	r4,r13,r8
    f4c0:	1a5b883a 	add	r13,r3,r9
    f4c4:	2211803a 	cmpltu	r8,r4,r8
    f4c8:	734d883a 	add	r6,r14,r13
    f4cc:	100ed43a 	srli	r7,r2,16
    f4d0:	6a53803a 	cmpltu	r9,r13,r9
    f4d4:	3205883a 	add	r2,r6,r8
    f4d8:	1ac7803a 	cmpltu	r3,r3,r11
    f4dc:	1211803a 	cmpltu	r8,r2,r8
    f4e0:	48c6b03a 	or	r3,r9,r3
    f4e4:	338d803a 	cmpltu	r6,r6,r14
    f4e8:	19c7883a 	add	r3,r3,r7
    f4ec:	418cb03a 	or	r6,r8,r6
    f4f0:	1987883a 	add	r3,r3,r6
    f4f4:	2024927a 	slli	r18,r4,9
    f4f8:	1c07883a 	add	r3,r3,r16
    f4fc:	1806927a 	slli	r3,r3,9
    f500:	1020d5fa 	srli	r16,r2,23
    f504:	2008d5fa 	srli	r4,r4,23
    f508:	9294b03a 	or	r10,r18,r10
    f50c:	1004927a 	slli	r2,r2,9
    f510:	5024c03a 	cmpne	r18,r10,zero
    f514:	1c20b03a 	or	r16,r3,r16
    f518:	9108b03a 	or	r4,r18,r4
    f51c:	80c0402c 	andhi	r3,r16,256
    f520:	20a4b03a 	or	r18,r4,r2
    f524:	18000726 	beq	r3,zero,f544 <__muldf3+0x4c8>
    f528:	9006d07a 	srli	r3,r18,1
    f52c:	800897fa 	slli	r4,r16,31
    f530:	9080004c 	andi	r2,r18,1
    f534:	8020d07a 	srli	r16,r16,1
    f538:	10c4b03a 	or	r2,r2,r3
    f53c:	1124b03a 	or	r18,r2,r4
    f540:	600b883a 	mov	r5,r12
    f544:	2900ffc4 	addi	r4,r5,1023
    f548:	01004b0e 	bge	zero,r4,f678 <__muldf3+0x5fc>
    f54c:	908001cc 	andi	r2,r18,7
    f550:	10000726 	beq	r2,zero,f570 <__muldf3+0x4f4>
    f554:	90c003cc 	andi	r3,r18,15
    f558:	00800104 	movi	r2,4
    f55c:	18800426 	beq	r3,r2,f570 <__muldf3+0x4f4>
    f560:	9087883a 	add	r3,r18,r2
    f564:	1c85803a 	cmpltu	r2,r3,r18
    f568:	80a1883a 	add	r16,r16,r2
    f56c:	1825883a 	mov	r18,r3
    f570:	8080402c 	andhi	r2,r16,256
    f574:	10000426 	beq	r2,zero,f588 <__muldf3+0x50c>
    f578:	00bfc034 	movhi	r2,65280
    f57c:	10bfffc4 	addi	r2,r2,-1
    f580:	29010004 	addi	r4,r5,1024
    f584:	80a0703a 	and	r16,r16,r2
    f588:	0081ff84 	movi	r2,2046
    f58c:	1100320e 	bge	r2,r4,f658 <__muldf3+0x5dc>
    f590:	b4c0004c 	andi	r19,r22,1
    f594:	0101ffc4 	movi	r4,2047
    f598:	0021883a 	mov	r16,zero
    f59c:	0025883a 	mov	r18,zero
    f5a0:	003f1006 	br	f1e4 <__alt_mem_Flash_flash_data+0xf400f1e4>
    f5a4:	8080022c 	andhi	r2,r16,8
    f5a8:	10000926 	beq	r2,zero,f5d0 <__muldf3+0x554>
    f5ac:	8880022c 	andhi	r2,r17,8
    f5b0:	1000071e 	bne	r2,zero,f5d0 <__muldf3+0x554>
    f5b4:	00800434 	movhi	r2,16
    f5b8:	8c000234 	orhi	r16,r17,8
    f5bc:	10bfffc4 	addi	r2,r2,-1
    f5c0:	1827883a 	mov	r19,r3
    f5c4:	80a0703a 	and	r16,r16,r2
    f5c8:	b825883a 	mov	r18,r23
    f5cc:	003f6a06 	br	f378 <__alt_mem_Flash_flash_data+0xf400f378>
    f5d0:	00800434 	movhi	r2,16
    f5d4:	84000234 	orhi	r16,r16,8
    f5d8:	10bfffc4 	addi	r2,r2,-1
    f5dc:	80a0703a 	and	r16,r16,r2
    f5e0:	003f6506 	br	f378 <__alt_mem_Flash_flash_data+0xf400f378>
    f5e4:	3009883a 	mov	r4,r6
    f5e8:	d8c00215 	stw	r3,8(sp)
    f5ec:	d9800315 	stw	r6,12(sp)
    f5f0:	da800015 	stw	r10,0(sp)
    f5f4:	dac00115 	stw	r11,4(sp)
    f5f8:	001026c0 	call	1026c <__clzsi2>
    f5fc:	11000804 	addi	r4,r2,32
    f600:	014009c4 	movi	r5,39
    f604:	d8c00217 	ldw	r3,8(sp)
    f608:	d9800317 	ldw	r6,12(sp)
    f60c:	da800017 	ldw	r10,0(sp)
    f610:	dac00117 	ldw	r11,4(sp)
    f614:	293f320e 	bge	r5,r4,f2e0 <__alt_mem_Flash_flash_data+0xf400f2e0>
    f618:	10bffe04 	addi	r2,r2,-8
    f61c:	b8a2983a 	sll	r17,r23,r2
    f620:	002f883a 	mov	r23,zero
    f624:	003f3506 	br	f2fc <__alt_mem_Flash_flash_data+0xf400f2fc>
    f628:	d9800315 	stw	r6,12(sp)
    f62c:	d9c00015 	stw	r7,0(sp)
    f630:	001026c0 	call	1026c <__clzsi2>
    f634:	10c00804 	addi	r3,r2,32
    f638:	010009c4 	movi	r4,39
    f63c:	d9800317 	ldw	r6,12(sp)
    f640:	d9c00017 	ldw	r7,0(sp)
    f644:	20ff060e 	bge	r4,r3,f260 <__alt_mem_Flash_flash_data+0xf400f260>
    f648:	10bffe04 	addi	r2,r2,-8
    f64c:	88a0983a 	sll	r16,r17,r2
    f650:	0025883a 	mov	r18,zero
    f654:	003f0906 	br	f27c <__alt_mem_Flash_flash_data+0xf400f27c>
    f658:	9004d0fa 	srli	r2,r18,3
    f65c:	8024977a 	slli	r18,r16,29
    f660:	8020927a 	slli	r16,r16,9
    f664:	2101ffcc 	andi	r4,r4,2047
    f668:	90a4b03a 	or	r18,r18,r2
    f66c:	8020d33a 	srli	r16,r16,12
    f670:	b4c0004c 	andi	r19,r22,1
    f674:	003edb06 	br	f1e4 <__alt_mem_Flash_flash_data+0xf400f1e4>
    f678:	00ff0084 	movi	r3,-1022
    f67c:	1947c83a 	sub	r3,r3,r5
    f680:	00800e04 	movi	r2,56
    f684:	10c0080e 	bge	r2,r3,f6a8 <__muldf3+0x62c>
    f688:	b4c0004c 	andi	r19,r22,1
    f68c:	0009883a 	mov	r4,zero
    f690:	0021883a 	mov	r16,zero
    f694:	0025883a 	mov	r18,zero
    f698:	003ed206 	br	f1e4 <__alt_mem_Flash_flash_data+0xf400f1e4>
    f69c:	600b883a 	mov	r5,r12
    f6a0:	e02d883a 	mov	r22,fp
    f6a4:	003fa706 	br	f544 <__alt_mem_Flash_flash_data+0xf400f544>
    f6a8:	008007c4 	movi	r2,31
    f6ac:	10c01816 	blt	r2,r3,f710 <__muldf3+0x694>
    f6b0:	29410784 	addi	r5,r5,1054
    f6b4:	8144983a 	sll	r2,r16,r5
    f6b8:	90c8d83a 	srl	r4,r18,r3
    f6bc:	914a983a 	sll	r5,r18,r5
    f6c0:	80c6d83a 	srl	r3,r16,r3
    f6c4:	2088b03a 	or	r4,r4,r2
    f6c8:	2804c03a 	cmpne	r2,r5,zero
    f6cc:	2084b03a 	or	r2,r4,r2
    f6d0:	110001cc 	andi	r4,r2,7
    f6d4:	20000726 	beq	r4,zero,f6f4 <__muldf3+0x678>
    f6d8:	114003cc 	andi	r5,r2,15
    f6dc:	01000104 	movi	r4,4
    f6e0:	29000426 	beq	r5,r4,f6f4 <__muldf3+0x678>
    f6e4:	11000104 	addi	r4,r2,4
    f6e8:	2085803a 	cmpltu	r2,r4,r2
    f6ec:	1887883a 	add	r3,r3,r2
    f6f0:	2005883a 	mov	r2,r4
    f6f4:	1900202c 	andhi	r4,r3,128
    f6f8:	20001826 	beq	r4,zero,f75c <__muldf3+0x6e0>
    f6fc:	b4c0004c 	andi	r19,r22,1
    f700:	01000044 	movi	r4,1
    f704:	0021883a 	mov	r16,zero
    f708:	0025883a 	mov	r18,zero
    f70c:	003eb506 	br	f1e4 <__alt_mem_Flash_flash_data+0xf400f1e4>
    f710:	00bef884 	movi	r2,-1054
    f714:	1145c83a 	sub	r2,r2,r5
    f718:	8088d83a 	srl	r4,r16,r2
    f71c:	00800804 	movi	r2,32
    f720:	18801726 	beq	r3,r2,f780 <__muldf3+0x704>
    f724:	28810f84 	addi	r2,r5,1086
    f728:	8084983a 	sll	r2,r16,r2
    f72c:	1484b03a 	or	r2,r2,r18
    f730:	1004c03a 	cmpne	r2,r2,zero
    f734:	1104b03a 	or	r2,r2,r4
    f738:	10c001cc 	andi	r3,r2,7
    f73c:	18000b1e 	bne	r3,zero,f76c <__muldf3+0x6f0>
    f740:	0021883a 	mov	r16,zero
    f744:	1004d0fa 	srli	r2,r2,3
    f748:	b4c0004c 	andi	r19,r22,1
    f74c:	0009883a 	mov	r4,zero
    f750:	10e4b03a 	or	r18,r2,r3
    f754:	003ea306 	br	f1e4 <__alt_mem_Flash_flash_data+0xf400f1e4>
    f758:	0007883a 	mov	r3,zero
    f75c:	1820927a 	slli	r16,r3,9
    f760:	1806977a 	slli	r3,r3,29
    f764:	8020d33a 	srli	r16,r16,12
    f768:	003ff606 	br	f744 <__alt_mem_Flash_flash_data+0xf400f744>
    f76c:	110003cc 	andi	r4,r2,15
    f770:	00c00104 	movi	r3,4
    f774:	20fff826 	beq	r4,r3,f758 <__alt_mem_Flash_flash_data+0xf400f758>
    f778:	0007883a 	mov	r3,zero
    f77c:	003fd906 	br	f6e4 <__alt_mem_Flash_flash_data+0xf400f6e4>
    f780:	0005883a 	mov	r2,zero
    f784:	003fe906 	br	f72c <__alt_mem_Flash_flash_data+0xf400f72c>
    f788:	00800434 	movhi	r2,16
    f78c:	84000234 	orhi	r16,r16,8
    f790:	10bfffc4 	addi	r2,r2,-1
    f794:	e4c0004c 	andi	r19,fp,1
    f798:	80a0703a 	and	r16,r16,r2
    f79c:	003ef606 	br	f378 <__alt_mem_Flash_flash_data+0xf400f378>

0000f7a0 <__subdf3>:
    f7a0:	00c00434 	movhi	r3,16
    f7a4:	18ffffc4 	addi	r3,r3,-1
    f7a8:	defffb04 	addi	sp,sp,-20
    f7ac:	28d2703a 	and	r9,r5,r3
    f7b0:	3814d53a 	srli	r10,r7,20
    f7b4:	38c6703a 	and	r3,r7,r3
    f7b8:	3004d77a 	srli	r2,r6,29
    f7bc:	dc800215 	stw	r18,8(sp)
    f7c0:	dc000015 	stw	r16,0(sp)
    f7c4:	2824d7fa 	srli	r18,r5,31
    f7c8:	2820d53a 	srli	r16,r5,20
    f7cc:	481290fa 	slli	r9,r9,3
    f7d0:	200ad77a 	srli	r5,r4,29
    f7d4:	180690fa 	slli	r3,r3,3
    f7d8:	dc400115 	stw	r17,4(sp)
    f7dc:	dfc00415 	stw	ra,16(sp)
    f7e0:	202290fa 	slli	r17,r4,3
    f7e4:	dcc00315 	stw	r19,12(sp)
    f7e8:	5281ffcc 	andi	r10,r10,2047
    f7ec:	0101ffc4 	movi	r4,2047
    f7f0:	9011883a 	mov	r8,r18
    f7f4:	8401ffcc 	andi	r16,r16,2047
    f7f8:	94803fcc 	andi	r18,r18,255
    f7fc:	494ab03a 	or	r5,r9,r5
    f800:	380ed7fa 	srli	r7,r7,31
    f804:	1886b03a 	or	r3,r3,r2
    f808:	300c90fa 	slli	r6,r6,3
    f80c:	51009026 	beq	r10,r4,fa50 <__subdf3+0x2b0>
    f810:	39c0005c 	xori	r7,r7,1
    f814:	8285c83a 	sub	r2,r16,r10
    f818:	91c06f26 	beq	r18,r7,f9d8 <__subdf3+0x238>
    f81c:	0080b10e 	bge	zero,r2,fae4 <__subdf3+0x344>
    f820:	50002a1e 	bne	r10,zero,f8cc <__subdf3+0x12c>
    f824:	1988b03a 	or	r4,r3,r6
    f828:	2000941e 	bne	r4,zero,fa7c <__subdf3+0x2dc>
    f82c:	888001cc 	andi	r2,r17,7
    f830:	10005b26 	beq	r2,zero,f9a0 <__subdf3+0x200>
    f834:	88c003cc 	andi	r3,r17,15
    f838:	00800104 	movi	r2,4
    f83c:	18805826 	beq	r3,r2,f9a0 <__subdf3+0x200>
    f840:	88c00104 	addi	r3,r17,4
    f844:	1c63803a 	cmpltu	r17,r3,r17
    f848:	2c4b883a 	add	r5,r5,r17
    f84c:	2880202c 	andhi	r2,r5,128
    f850:	9200004c 	andi	r8,r18,1
    f854:	1823883a 	mov	r17,r3
    f858:	10005426 	beq	r2,zero,f9ac <__subdf3+0x20c>
    f85c:	84000044 	addi	r16,r16,1
    f860:	0081ffc4 	movi	r2,2047
    f864:	8080bf26 	beq	r16,r2,fb64 <__subdf3+0x3c4>
    f868:	013fe034 	movhi	r4,65408
    f86c:	213fffc4 	addi	r4,r4,-1
    f870:	290a703a 	and	r5,r5,r4
    f874:	2804977a 	slli	r2,r5,29
    f878:	280a927a 	slli	r5,r5,9
    f87c:	8822d0fa 	srli	r17,r17,3
    f880:	8401ffcc 	andi	r16,r16,2047
    f884:	2808d33a 	srli	r4,r5,12
    f888:	1444b03a 	or	r2,r2,r17
    f88c:	8401ffcc 	andi	r16,r16,2047
    f890:	800a953a 	slli	r5,r16,20
    f894:	40c03fcc 	andi	r3,r8,255
    f898:	04000434 	movhi	r16,16
    f89c:	180697fa 	slli	r3,r3,31
    f8a0:	843fffc4 	addi	r16,r16,-1
    f8a4:	2420703a 	and	r16,r4,r16
    f8a8:	8160b03a 	or	r16,r16,r5
    f8ac:	80c6b03a 	or	r3,r16,r3
    f8b0:	dfc00417 	ldw	ra,16(sp)
    f8b4:	dcc00317 	ldw	r19,12(sp)
    f8b8:	dc800217 	ldw	r18,8(sp)
    f8bc:	dc400117 	ldw	r17,4(sp)
    f8c0:	dc000017 	ldw	r16,0(sp)
    f8c4:	dec00504 	addi	sp,sp,20
    f8c8:	f800283a 	ret
    f8cc:	0101ffc4 	movi	r4,2047
    f8d0:	813fd626 	beq	r16,r4,f82c <__alt_mem_Flash_flash_data+0xf400f82c>
    f8d4:	18c02034 	orhi	r3,r3,128
    f8d8:	01000e04 	movi	r4,56
    f8dc:	2080a416 	blt	r4,r2,fb70 <__subdf3+0x3d0>
    f8e0:	010007c4 	movi	r4,31
    f8e4:	2080c716 	blt	r4,r2,fc04 <__subdf3+0x464>
    f8e8:	01000804 	movi	r4,32
    f8ec:	2089c83a 	sub	r4,r4,r2
    f8f0:	1910983a 	sll	r8,r3,r4
    f8f4:	308ed83a 	srl	r7,r6,r2
    f8f8:	3108983a 	sll	r4,r6,r4
    f8fc:	1884d83a 	srl	r2,r3,r2
    f900:	41ccb03a 	or	r6,r8,r7
    f904:	2008c03a 	cmpne	r4,r4,zero
    f908:	310cb03a 	or	r6,r6,r4
    f90c:	898dc83a 	sub	r6,r17,r6
    f910:	89a3803a 	cmpltu	r17,r17,r6
    f914:	288bc83a 	sub	r5,r5,r2
    f918:	2c4bc83a 	sub	r5,r5,r17
    f91c:	3023883a 	mov	r17,r6
    f920:	2880202c 	andhi	r2,r5,128
    f924:	10006b26 	beq	r2,zero,fad4 <__subdf3+0x334>
    f928:	04c02034 	movhi	r19,128
    f92c:	9cffffc4 	addi	r19,r19,-1
    f930:	2ce6703a 	and	r19,r5,r19
    f934:	98007c26 	beq	r19,zero,fb28 <__subdf3+0x388>
    f938:	9809883a 	mov	r4,r19
    f93c:	001026c0 	call	1026c <__clzsi2>
    f940:	10fffe04 	addi	r3,r2,-8
    f944:	010007c4 	movi	r4,31
    f948:	20c07d16 	blt	r4,r3,fb40 <__subdf3+0x3a0>
    f94c:	01400a04 	movi	r5,40
    f950:	2885c83a 	sub	r2,r5,r2
    f954:	888ad83a 	srl	r5,r17,r2
    f958:	98e6983a 	sll	r19,r19,r3
    f95c:	88e2983a 	sll	r17,r17,r3
    f960:	2ce6b03a 	or	r19,r5,r19
    f964:	1c007a16 	blt	r3,r16,fb50 <__subdf3+0x3b0>
    f968:	1c21c83a 	sub	r16,r3,r16
    f96c:	81400044 	addi	r5,r16,1
    f970:	00c007c4 	movi	r3,31
    f974:	19409616 	blt	r3,r5,fbd0 <__subdf3+0x430>
    f978:	1c21c83a 	sub	r16,r3,r16
    f97c:	8c08983a 	sll	r4,r17,r16
    f980:	8946d83a 	srl	r3,r17,r5
    f984:	9c20983a 	sll	r16,r19,r16
    f988:	2008c03a 	cmpne	r4,r4,zero
    f98c:	994ad83a 	srl	r5,r19,r5
    f990:	1c06b03a 	or	r3,r3,r16
    f994:	1922b03a 	or	r17,r3,r4
    f998:	0021883a 	mov	r16,zero
    f99c:	003fa306 	br	f82c <__alt_mem_Flash_flash_data+0xf400f82c>
    f9a0:	2880202c 	andhi	r2,r5,128
    f9a4:	9200004c 	andi	r8,r18,1
    f9a8:	103fac1e 	bne	r2,zero,f85c <__alt_mem_Flash_flash_data+0xf400f85c>
    f9ac:	2804977a 	slli	r2,r5,29
    f9b0:	8822d0fa 	srli	r17,r17,3
    f9b4:	00c1ffc4 	movi	r3,2047
    f9b8:	280ad0fa 	srli	r5,r5,3
    f9bc:	1444b03a 	or	r2,r2,r17
    f9c0:	80c02726 	beq	r16,r3,fa60 <__subdf3+0x2c0>
    f9c4:	01000434 	movhi	r4,16
    f9c8:	213fffc4 	addi	r4,r4,-1
    f9cc:	80e0703a 	and	r16,r16,r3
    f9d0:	2908703a 	and	r4,r5,r4
    f9d4:	003fad06 	br	f88c <__alt_mem_Flash_flash_data+0xf400f88c>
    f9d8:	0080690e 	bge	zero,r2,fb80 <__subdf3+0x3e0>
    f9dc:	50002f26 	beq	r10,zero,fa9c <__subdf3+0x2fc>
    f9e0:	0101ffc4 	movi	r4,2047
    f9e4:	813f9126 	beq	r16,r4,f82c <__alt_mem_Flash_flash_data+0xf400f82c>
    f9e8:	18c02034 	orhi	r3,r3,128
    f9ec:	01000e04 	movi	r4,56
    f9f0:	2080b00e 	bge	r4,r2,fcb4 <__subdf3+0x514>
    f9f4:	198cb03a 	or	r6,r3,r6
    f9f8:	300ec03a 	cmpne	r7,r6,zero
    f9fc:	0005883a 	mov	r2,zero
    fa00:	3c4f883a 	add	r7,r7,r17
    fa04:	3c63803a 	cmpltu	r17,r7,r17
    fa08:	114b883a 	add	r5,r2,r5
    fa0c:	2c4b883a 	add	r5,r5,r17
    fa10:	3823883a 	mov	r17,r7
    fa14:	2880202c 	andhi	r2,r5,128
    fa18:	10002e26 	beq	r2,zero,fad4 <__subdf3+0x334>
    fa1c:	84000044 	addi	r16,r16,1
    fa20:	0081ffc4 	movi	r2,2047
    fa24:	8080de26 	beq	r16,r2,fda0 <__subdf3+0x600>
    fa28:	00bfe034 	movhi	r2,65408
    fa2c:	10bfffc4 	addi	r2,r2,-1
    fa30:	288a703a 	and	r5,r5,r2
    fa34:	880cd07a 	srli	r6,r17,1
    fa38:	280897fa 	slli	r4,r5,31
    fa3c:	88c0004c 	andi	r3,r17,1
    fa40:	30e2b03a 	or	r17,r6,r3
    fa44:	280ad07a 	srli	r5,r5,1
    fa48:	8922b03a 	or	r17,r17,r4
    fa4c:	003f7706 	br	f82c <__alt_mem_Flash_flash_data+0xf400f82c>
    fa50:	1984b03a 	or	r2,r3,r6
    fa54:	103f6e26 	beq	r2,zero,f810 <__alt_mem_Flash_flash_data+0xf400f810>
    fa58:	39c03fcc 	andi	r7,r7,255
    fa5c:	003f6d06 	br	f814 <__alt_mem_Flash_flash_data+0xf400f814>
    fa60:	1146b03a 	or	r3,r2,r5
    fa64:	18003f26 	beq	r3,zero,fb64 <__subdf3+0x3c4>
    fa68:	00c00434 	movhi	r3,16
    fa6c:	29000234 	orhi	r4,r5,8
    fa70:	18ffffc4 	addi	r3,r3,-1
    fa74:	20c8703a 	and	r4,r4,r3
    fa78:	003f8406 	br	f88c <__alt_mem_Flash_flash_data+0xf400f88c>
    fa7c:	10bfffc4 	addi	r2,r2,-1
    fa80:	1000501e 	bne	r2,zero,fbc4 <__subdf3+0x424>
    fa84:	898fc83a 	sub	r7,r17,r6
    fa88:	89e3803a 	cmpltu	r17,r17,r7
    fa8c:	28cbc83a 	sub	r5,r5,r3
    fa90:	2c4bc83a 	sub	r5,r5,r17
    fa94:	3823883a 	mov	r17,r7
    fa98:	003fa106 	br	f920 <__alt_mem_Flash_flash_data+0xf400f920>
    fa9c:	1988b03a 	or	r4,r3,r6
    faa0:	203f6226 	beq	r4,zero,f82c <__alt_mem_Flash_flash_data+0xf400f82c>
    faa4:	10bfffc4 	addi	r2,r2,-1
    faa8:	10009b1e 	bne	r2,zero,fd18 <__subdf3+0x578>
    faac:	344d883a 	add	r6,r6,r17
    fab0:	3463803a 	cmpltu	r17,r6,r17
    fab4:	194b883a 	add	r5,r3,r5
    fab8:	2c4b883a 	add	r5,r5,r17
    fabc:	3023883a 	mov	r17,r6
    fac0:	003fd406 	br	fa14 <__alt_mem_Flash_flash_data+0xf400fa14>
    fac4:	1106b03a 	or	r3,r2,r4
    fac8:	1800b426 	beq	r3,zero,fd9c <__subdf3+0x5fc>
    facc:	100b883a 	mov	r5,r2
    fad0:	2023883a 	mov	r17,r4
    fad4:	888001cc 	andi	r2,r17,7
    fad8:	103f561e 	bne	r2,zero,f834 <__alt_mem_Flash_flash_data+0xf400f834>
    fadc:	9200004c 	andi	r8,r18,1
    fae0:	003fb206 	br	f9ac <__alt_mem_Flash_flash_data+0xf400f9ac>
    fae4:	1000531e 	bne	r2,zero,fc34 <__subdf3+0x494>
    fae8:	80800044 	addi	r2,r16,1
    faec:	1081ffcc 	andi	r2,r2,2047
    faf0:	01000044 	movi	r4,1
    faf4:	2080a00e 	bge	r4,r2,fd78 <__subdf3+0x5d8>
    faf8:	8985c83a 	sub	r2,r17,r6
    fafc:	8889803a 	cmpltu	r4,r17,r2
    fb00:	28e7c83a 	sub	r19,r5,r3
    fb04:	9927c83a 	sub	r19,r19,r4
    fb08:	9900202c 	andhi	r4,r19,128
    fb0c:	20006226 	beq	r4,zero,fc98 <__subdf3+0x4f8>
    fb10:	3463c83a 	sub	r17,r6,r17
    fb14:	194bc83a 	sub	r5,r3,r5
    fb18:	344d803a 	cmpltu	r6,r6,r17
    fb1c:	29a7c83a 	sub	r19,r5,r6
    fb20:	3825883a 	mov	r18,r7
    fb24:	983f841e 	bne	r19,zero,f938 <__alt_mem_Flash_flash_data+0xf400f938>
    fb28:	8809883a 	mov	r4,r17
    fb2c:	001026c0 	call	1026c <__clzsi2>
    fb30:	10800804 	addi	r2,r2,32
    fb34:	10fffe04 	addi	r3,r2,-8
    fb38:	010007c4 	movi	r4,31
    fb3c:	20ff830e 	bge	r4,r3,f94c <__alt_mem_Flash_flash_data+0xf400f94c>
    fb40:	14fff604 	addi	r19,r2,-40
    fb44:	8ce6983a 	sll	r19,r17,r19
    fb48:	0023883a 	mov	r17,zero
    fb4c:	1c3f860e 	bge	r3,r16,f968 <__alt_mem_Flash_flash_data+0xf400f968>
    fb50:	017fe034 	movhi	r5,65408
    fb54:	297fffc4 	addi	r5,r5,-1
    fb58:	80e1c83a 	sub	r16,r16,r3
    fb5c:	994a703a 	and	r5,r19,r5
    fb60:	003f3206 	br	f82c <__alt_mem_Flash_flash_data+0xf400f82c>
    fb64:	0009883a 	mov	r4,zero
    fb68:	0005883a 	mov	r2,zero
    fb6c:	003f4706 	br	f88c <__alt_mem_Flash_flash_data+0xf400f88c>
    fb70:	198cb03a 	or	r6,r3,r6
    fb74:	300cc03a 	cmpne	r6,r6,zero
    fb78:	0005883a 	mov	r2,zero
    fb7c:	003f6306 	br	f90c <__alt_mem_Flash_flash_data+0xf400f90c>
    fb80:	10009d1e 	bne	r2,zero,fdf8 <__subdf3+0x658>
    fb84:	81c00044 	addi	r7,r16,1
    fb88:	3881ffcc 	andi	r2,r7,2047
    fb8c:	02400044 	movi	r9,1
    fb90:	4880680e 	bge	r9,r2,fd34 <__subdf3+0x594>
    fb94:	0081ffc4 	movi	r2,2047
    fb98:	3880ae26 	beq	r7,r2,fe54 <__subdf3+0x6b4>
    fb9c:	344d883a 	add	r6,r6,r17
    fba0:	3463803a 	cmpltu	r17,r6,r17
    fba4:	194b883a 	add	r5,r3,r5
    fba8:	2c4b883a 	add	r5,r5,r17
    fbac:	282297fa 	slli	r17,r5,31
    fbb0:	300cd07a 	srli	r6,r6,1
    fbb4:	280ad07a 	srli	r5,r5,1
    fbb8:	3821883a 	mov	r16,r7
    fbbc:	89a2b03a 	or	r17,r17,r6
    fbc0:	003f1a06 	br	f82c <__alt_mem_Flash_flash_data+0xf400f82c>
    fbc4:	0101ffc4 	movi	r4,2047
    fbc8:	813f431e 	bne	r16,r4,f8d8 <__alt_mem_Flash_flash_data+0xf400f8d8>
    fbcc:	003f1706 	br	f82c <__alt_mem_Flash_flash_data+0xf400f82c>
    fbd0:	80bff844 	addi	r2,r16,-31
    fbd4:	00c00804 	movi	r3,32
    fbd8:	9884d83a 	srl	r2,r19,r2
    fbdc:	28c05126 	beq	r5,r3,fd24 <__subdf3+0x584>
    fbe0:	00c00fc4 	movi	r3,63
    fbe4:	1c21c83a 	sub	r16,r3,r16
    fbe8:	9c26983a 	sll	r19,r19,r16
    fbec:	9c62b03a 	or	r17,r19,r17
    fbf0:	8822c03a 	cmpne	r17,r17,zero
    fbf4:	88a2b03a 	or	r17,r17,r2
    fbf8:	000b883a 	mov	r5,zero
    fbfc:	0021883a 	mov	r16,zero
    fc00:	003fb406 	br	fad4 <__alt_mem_Flash_flash_data+0xf400fad4>
    fc04:	113ff804 	addi	r4,r2,-32
    fc08:	01c00804 	movi	r7,32
    fc0c:	1908d83a 	srl	r4,r3,r4
    fc10:	11c04626 	beq	r2,r7,fd2c <__subdf3+0x58c>
    fc14:	01c01004 	movi	r7,64
    fc18:	3885c83a 	sub	r2,r7,r2
    fc1c:	1884983a 	sll	r2,r3,r2
    fc20:	118cb03a 	or	r6,r2,r6
    fc24:	300cc03a 	cmpne	r6,r6,zero
    fc28:	310cb03a 	or	r6,r6,r4
    fc2c:	0005883a 	mov	r2,zero
    fc30:	003f3606 	br	f90c <__alt_mem_Flash_flash_data+0xf400f90c>
    fc34:	80002b26 	beq	r16,zero,fce4 <__subdf3+0x544>
    fc38:	0101ffc4 	movi	r4,2047
    fc3c:	51006926 	beq	r10,r4,fde4 <__subdf3+0x644>
    fc40:	0085c83a 	sub	r2,zero,r2
    fc44:	29402034 	orhi	r5,r5,128
    fc48:	01000e04 	movi	r4,56
    fc4c:	20807d16 	blt	r4,r2,fe44 <__subdf3+0x6a4>
    fc50:	010007c4 	movi	r4,31
    fc54:	2080d916 	blt	r4,r2,ffbc <__subdf3+0x81c>
    fc58:	01000804 	movi	r4,32
    fc5c:	2089c83a 	sub	r4,r4,r2
    fc60:	2912983a 	sll	r9,r5,r4
    fc64:	8890d83a 	srl	r8,r17,r2
    fc68:	8908983a 	sll	r4,r17,r4
    fc6c:	2884d83a 	srl	r2,r5,r2
    fc70:	4a22b03a 	or	r17,r9,r8
    fc74:	2008c03a 	cmpne	r4,r4,zero
    fc78:	8922b03a 	or	r17,r17,r4
    fc7c:	3463c83a 	sub	r17,r6,r17
    fc80:	1885c83a 	sub	r2,r3,r2
    fc84:	344d803a 	cmpltu	r6,r6,r17
    fc88:	118bc83a 	sub	r5,r2,r6
    fc8c:	5021883a 	mov	r16,r10
    fc90:	3825883a 	mov	r18,r7
    fc94:	003f2206 	br	f920 <__alt_mem_Flash_flash_data+0xf400f920>
    fc98:	9886b03a 	or	r3,r19,r2
    fc9c:	18001c1e 	bne	r3,zero,fd10 <__subdf3+0x570>
    fca0:	0011883a 	mov	r8,zero
    fca4:	000b883a 	mov	r5,zero
    fca8:	0023883a 	mov	r17,zero
    fcac:	0021883a 	mov	r16,zero
    fcb0:	003f3e06 	br	f9ac <__alt_mem_Flash_flash_data+0xf400f9ac>
    fcb4:	010007c4 	movi	r4,31
    fcb8:	20803c16 	blt	r4,r2,fdac <__subdf3+0x60c>
    fcbc:	01000804 	movi	r4,32
    fcc0:	2089c83a 	sub	r4,r4,r2
    fcc4:	1912983a 	sll	r9,r3,r4
    fcc8:	308ed83a 	srl	r7,r6,r2
    fccc:	3108983a 	sll	r4,r6,r4
    fcd0:	1884d83a 	srl	r2,r3,r2
    fcd4:	49ceb03a 	or	r7,r9,r7
    fcd8:	2008c03a 	cmpne	r4,r4,zero
    fcdc:	390eb03a 	or	r7,r7,r4
    fce0:	003f4706 	br	fa00 <__alt_mem_Flash_flash_data+0xf400fa00>
    fce4:	2c48b03a 	or	r4,r5,r17
    fce8:	20003e26 	beq	r4,zero,fde4 <__subdf3+0x644>
    fcec:	0084303a 	nor	r2,zero,r2
    fcf0:	10003a1e 	bne	r2,zero,fddc <__subdf3+0x63c>
    fcf4:	3463c83a 	sub	r17,r6,r17
    fcf8:	194bc83a 	sub	r5,r3,r5
    fcfc:	344d803a 	cmpltu	r6,r6,r17
    fd00:	298bc83a 	sub	r5,r5,r6
    fd04:	5021883a 	mov	r16,r10
    fd08:	3825883a 	mov	r18,r7
    fd0c:	003f0406 	br	f920 <__alt_mem_Flash_flash_data+0xf400f920>
    fd10:	1023883a 	mov	r17,r2
    fd14:	003f0706 	br	f934 <__alt_mem_Flash_flash_data+0xf400f934>
    fd18:	0101ffc4 	movi	r4,2047
    fd1c:	813f331e 	bne	r16,r4,f9ec <__alt_mem_Flash_flash_data+0xf400f9ec>
    fd20:	003ec206 	br	f82c <__alt_mem_Flash_flash_data+0xf400f82c>
    fd24:	0027883a 	mov	r19,zero
    fd28:	003fb006 	br	fbec <__alt_mem_Flash_flash_data+0xf400fbec>
    fd2c:	0005883a 	mov	r2,zero
    fd30:	003fbb06 	br	fc20 <__alt_mem_Flash_flash_data+0xf400fc20>
    fd34:	2c44b03a 	or	r2,r5,r17
    fd38:	80008b1e 	bne	r16,zero,ff68 <__subdf3+0x7c8>
    fd3c:	1000b526 	beq	r2,zero,10014 <__subdf3+0x874>
    fd40:	1984b03a 	or	r2,r3,r6
    fd44:	103eb926 	beq	r2,zero,f82c <__alt_mem_Flash_flash_data+0xf400f82c>
    fd48:	3449883a 	add	r4,r6,r17
    fd4c:	2463803a 	cmpltu	r17,r4,r17
    fd50:	194b883a 	add	r5,r3,r5
    fd54:	2c4b883a 	add	r5,r5,r17
    fd58:	2880202c 	andhi	r2,r5,128
    fd5c:	2023883a 	mov	r17,r4
    fd60:	103f5c26 	beq	r2,zero,fad4 <__alt_mem_Flash_flash_data+0xf400fad4>
    fd64:	00bfe034 	movhi	r2,65408
    fd68:	10bfffc4 	addi	r2,r2,-1
    fd6c:	4821883a 	mov	r16,r9
    fd70:	288a703a 	and	r5,r5,r2
    fd74:	003ead06 	br	f82c <__alt_mem_Flash_flash_data+0xf400f82c>
    fd78:	2c44b03a 	or	r2,r5,r17
    fd7c:	8000291e 	bne	r16,zero,fe24 <__subdf3+0x684>
    fd80:	10004f1e 	bne	r2,zero,fec0 <__subdf3+0x720>
    fd84:	1984b03a 	or	r2,r3,r6
    fd88:	10000426 	beq	r2,zero,fd9c <__subdf3+0x5fc>
    fd8c:	180b883a 	mov	r5,r3
    fd90:	3023883a 	mov	r17,r6
    fd94:	3825883a 	mov	r18,r7
    fd98:	003ea406 	br	f82c <__alt_mem_Flash_flash_data+0xf400f82c>
    fd9c:	0011883a 	mov	r8,zero
    fda0:	000b883a 	mov	r5,zero
    fda4:	0023883a 	mov	r17,zero
    fda8:	003f0006 	br	f9ac <__alt_mem_Flash_flash_data+0xf400f9ac>
    fdac:	11fff804 	addi	r7,r2,-32
    fdb0:	19c8d83a 	srl	r4,r3,r7
    fdb4:	01c00804 	movi	r7,32
    fdb8:	11c07e26 	beq	r2,r7,ffb4 <__subdf3+0x814>
    fdbc:	01c01004 	movi	r7,64
    fdc0:	3885c83a 	sub	r2,r7,r2
    fdc4:	1884983a 	sll	r2,r3,r2
    fdc8:	118cb03a 	or	r6,r2,r6
    fdcc:	300ec03a 	cmpne	r7,r6,zero
    fdd0:	390eb03a 	or	r7,r7,r4
    fdd4:	0005883a 	mov	r2,zero
    fdd8:	003f0906 	br	fa00 <__alt_mem_Flash_flash_data+0xf400fa00>
    fddc:	0101ffc4 	movi	r4,2047
    fde0:	513f991e 	bne	r10,r4,fc48 <__alt_mem_Flash_flash_data+0xf400fc48>
    fde4:	180b883a 	mov	r5,r3
    fde8:	3023883a 	mov	r17,r6
    fdec:	5021883a 	mov	r16,r10
    fdf0:	3825883a 	mov	r18,r7
    fdf4:	003e8d06 	br	f82c <__alt_mem_Flash_flash_data+0xf400f82c>
    fdf8:	80001a1e 	bne	r16,zero,fe64 <__subdf3+0x6c4>
    fdfc:	2c48b03a 	or	r4,r5,r17
    fe00:	20005526 	beq	r4,zero,ff58 <__subdf3+0x7b8>
    fe04:	0084303a 	nor	r2,zero,r2
    fe08:	1000511e 	bne	r2,zero,ff50 <__subdf3+0x7b0>
    fe0c:	89a3883a 	add	r17,r17,r6
    fe10:	194b883a 	add	r5,r3,r5
    fe14:	898d803a 	cmpltu	r6,r17,r6
    fe18:	298b883a 	add	r5,r5,r6
    fe1c:	5021883a 	mov	r16,r10
    fe20:	003efc06 	br	fa14 <__alt_mem_Flash_flash_data+0xf400fa14>
    fe24:	1000341e 	bne	r2,zero,fef8 <__subdf3+0x758>
    fe28:	1984b03a 	or	r2,r3,r6
    fe2c:	10006f26 	beq	r2,zero,ffec <__subdf3+0x84c>
    fe30:	180b883a 	mov	r5,r3
    fe34:	3023883a 	mov	r17,r6
    fe38:	3825883a 	mov	r18,r7
    fe3c:	0401ffc4 	movi	r16,2047
    fe40:	003e7a06 	br	f82c <__alt_mem_Flash_flash_data+0xf400f82c>
    fe44:	2c62b03a 	or	r17,r5,r17
    fe48:	8822c03a 	cmpne	r17,r17,zero
    fe4c:	0005883a 	mov	r2,zero
    fe50:	003f8a06 	br	fc7c <__alt_mem_Flash_flash_data+0xf400fc7c>
    fe54:	3821883a 	mov	r16,r7
    fe58:	000b883a 	mov	r5,zero
    fe5c:	0023883a 	mov	r17,zero
    fe60:	003ed206 	br	f9ac <__alt_mem_Flash_flash_data+0xf400f9ac>
    fe64:	0101ffc4 	movi	r4,2047
    fe68:	51003b26 	beq	r10,r4,ff58 <__subdf3+0x7b8>
    fe6c:	0085c83a 	sub	r2,zero,r2
    fe70:	29402034 	orhi	r5,r5,128
    fe74:	01000e04 	movi	r4,56
    fe78:	20806216 	blt	r4,r2,10004 <__subdf3+0x864>
    fe7c:	010007c4 	movi	r4,31
    fe80:	20806b16 	blt	r4,r2,10030 <__subdf3+0x890>
    fe84:	01000804 	movi	r4,32
    fe88:	2089c83a 	sub	r4,r4,r2
    fe8c:	2912983a 	sll	r9,r5,r4
    fe90:	888ed83a 	srl	r7,r17,r2
    fe94:	8908983a 	sll	r4,r17,r4
    fe98:	2884d83a 	srl	r2,r5,r2
    fe9c:	49e2b03a 	or	r17,r9,r7
    fea0:	2008c03a 	cmpne	r4,r4,zero
    fea4:	8922b03a 	or	r17,r17,r4
    fea8:	89a3883a 	add	r17,r17,r6
    feac:	10c5883a 	add	r2,r2,r3
    feb0:	898d803a 	cmpltu	r6,r17,r6
    feb4:	118b883a 	add	r5,r2,r6
    feb8:	5021883a 	mov	r16,r10
    febc:	003ed506 	br	fa14 <__alt_mem_Flash_flash_data+0xf400fa14>
    fec0:	1984b03a 	or	r2,r3,r6
    fec4:	103e5926 	beq	r2,zero,f82c <__alt_mem_Flash_flash_data+0xf400f82c>
    fec8:	8989c83a 	sub	r4,r17,r6
    fecc:	8911803a 	cmpltu	r8,r17,r4
    fed0:	28c5c83a 	sub	r2,r5,r3
    fed4:	1205c83a 	sub	r2,r2,r8
    fed8:	1200202c 	andhi	r8,r2,128
    fedc:	403ef926 	beq	r8,zero,fac4 <__alt_mem_Flash_flash_data+0xf400fac4>
    fee0:	3463c83a 	sub	r17,r6,r17
    fee4:	194bc83a 	sub	r5,r3,r5
    fee8:	344d803a 	cmpltu	r6,r6,r17
    feec:	298bc83a 	sub	r5,r5,r6
    fef0:	3825883a 	mov	r18,r7
    fef4:	003e4d06 	br	f82c <__alt_mem_Flash_flash_data+0xf400f82c>
    fef8:	1984b03a 	or	r2,r3,r6
    fefc:	10002b26 	beq	r2,zero,ffac <__subdf3+0x80c>
    ff00:	2808d0fa 	srli	r4,r5,3
    ff04:	8822d0fa 	srli	r17,r17,3
    ff08:	280a977a 	slli	r5,r5,29
    ff0c:	2080022c 	andhi	r2,r4,8
    ff10:	2c62b03a 	or	r17,r5,r17
    ff14:	10000826 	beq	r2,zero,ff38 <__subdf3+0x798>
    ff18:	1810d0fa 	srli	r8,r3,3
    ff1c:	4080022c 	andhi	r2,r8,8
    ff20:	1000051e 	bne	r2,zero,ff38 <__subdf3+0x798>
    ff24:	300cd0fa 	srli	r6,r6,3
    ff28:	1804977a 	slli	r2,r3,29
    ff2c:	4009883a 	mov	r4,r8
    ff30:	3825883a 	mov	r18,r7
    ff34:	11a2b03a 	or	r17,r2,r6
    ff38:	880ad77a 	srli	r5,r17,29
    ff3c:	200890fa 	slli	r4,r4,3
    ff40:	882290fa 	slli	r17,r17,3
    ff44:	0401ffc4 	movi	r16,2047
    ff48:	290ab03a 	or	r5,r5,r4
    ff4c:	003e3706 	br	f82c <__alt_mem_Flash_flash_data+0xf400f82c>
    ff50:	0101ffc4 	movi	r4,2047
    ff54:	513fc71e 	bne	r10,r4,fe74 <__alt_mem_Flash_flash_data+0xf400fe74>
    ff58:	180b883a 	mov	r5,r3
    ff5c:	3023883a 	mov	r17,r6
    ff60:	5021883a 	mov	r16,r10
    ff64:	003e3106 	br	f82c <__alt_mem_Flash_flash_data+0xf400f82c>
    ff68:	10002d26 	beq	r2,zero,10020 <__subdf3+0x880>
    ff6c:	1984b03a 	or	r2,r3,r6
    ff70:	10000e26 	beq	r2,zero,ffac <__subdf3+0x80c>
    ff74:	2808d0fa 	srli	r4,r5,3
    ff78:	8822d0fa 	srli	r17,r17,3
    ff7c:	280a977a 	slli	r5,r5,29
    ff80:	2080022c 	andhi	r2,r4,8
    ff84:	2c62b03a 	or	r17,r5,r17
    ff88:	103feb26 	beq	r2,zero,ff38 <__alt_mem_Flash_flash_data+0xf400ff38>
    ff8c:	180ed0fa 	srli	r7,r3,3
    ff90:	3880022c 	andhi	r2,r7,8
    ff94:	103fe81e 	bne	r2,zero,ff38 <__alt_mem_Flash_flash_data+0xf400ff38>
    ff98:	300cd0fa 	srli	r6,r6,3
    ff9c:	1804977a 	slli	r2,r3,29
    ffa0:	3809883a 	mov	r4,r7
    ffa4:	11a2b03a 	or	r17,r2,r6
    ffa8:	003fe306 	br	ff38 <__alt_mem_Flash_flash_data+0xf400ff38>
    ffac:	0401ffc4 	movi	r16,2047
    ffb0:	003e1e06 	br	f82c <__alt_mem_Flash_flash_data+0xf400f82c>
    ffb4:	0005883a 	mov	r2,zero
    ffb8:	003f8306 	br	fdc8 <__alt_mem_Flash_flash_data+0xf400fdc8>
    ffbc:	113ff804 	addi	r4,r2,-32
    ffc0:	02000804 	movi	r8,32
    ffc4:	2908d83a 	srl	r4,r5,r4
    ffc8:	12002526 	beq	r2,r8,10060 <__subdf3+0x8c0>
    ffcc:	02001004 	movi	r8,64
    ffd0:	4085c83a 	sub	r2,r8,r2
    ffd4:	288a983a 	sll	r5,r5,r2
    ffd8:	2c62b03a 	or	r17,r5,r17
    ffdc:	8822c03a 	cmpne	r17,r17,zero
    ffe0:	8922b03a 	or	r17,r17,r4
    ffe4:	0005883a 	mov	r2,zero
    ffe8:	003f2406 	br	fc7c <__alt_mem_Flash_flash_data+0xf400fc7c>
    ffec:	01402034 	movhi	r5,128
    fff0:	0011883a 	mov	r8,zero
    fff4:	297fffc4 	addi	r5,r5,-1
    fff8:	047ffe04 	movi	r17,-8
    fffc:	0401ffc4 	movi	r16,2047
   10000:	003e6a06 	br	f9ac <__alt_mem_Flash_flash_data+0xf400f9ac>
   10004:	2c62b03a 	or	r17,r5,r17
   10008:	8822c03a 	cmpne	r17,r17,zero
   1000c:	0005883a 	mov	r2,zero
   10010:	003fa506 	br	fea8 <__alt_mem_Flash_flash_data+0xf400fea8>
   10014:	180b883a 	mov	r5,r3
   10018:	3023883a 	mov	r17,r6
   1001c:	003e0306 	br	f82c <__alt_mem_Flash_flash_data+0xf400f82c>
   10020:	180b883a 	mov	r5,r3
   10024:	3023883a 	mov	r17,r6
   10028:	0401ffc4 	movi	r16,2047
   1002c:	003dff06 	br	f82c <__alt_mem_Flash_flash_data+0xf400f82c>
   10030:	113ff804 	addi	r4,r2,-32
   10034:	01c00804 	movi	r7,32
   10038:	2908d83a 	srl	r4,r5,r4
   1003c:	11c00a26 	beq	r2,r7,10068 <__subdf3+0x8c8>
   10040:	01c01004 	movi	r7,64
   10044:	3885c83a 	sub	r2,r7,r2
   10048:	288a983a 	sll	r5,r5,r2
   1004c:	2c62b03a 	or	r17,r5,r17
   10050:	8822c03a 	cmpne	r17,r17,zero
   10054:	8922b03a 	or	r17,r17,r4
   10058:	0005883a 	mov	r2,zero
   1005c:	003f9206 	br	fea8 <__alt_mem_Flash_flash_data+0xf400fea8>
   10060:	000b883a 	mov	r5,zero
   10064:	003fdc06 	br	ffd8 <__alt_mem_Flash_flash_data+0xf400ffd8>
   10068:	000b883a 	mov	r5,zero
   1006c:	003ff706 	br	1004c <__alt_mem_Flash_flash_data+0xf401004c>

00010070 <__fixdfsi>:
   10070:	2806d53a 	srli	r3,r5,20
   10074:	00800434 	movhi	r2,16
   10078:	10bfffc4 	addi	r2,r2,-1
   1007c:	18c1ffcc 	andi	r3,r3,2047
   10080:	0180ff84 	movi	r6,1022
   10084:	2884703a 	and	r2,r5,r2
   10088:	280ad7fa 	srli	r5,r5,31
   1008c:	30c0130e 	bge	r6,r3,100dc <__fixdfsi+0x6c>
   10090:	01810744 	movi	r6,1053
   10094:	30c00d16 	blt	r6,r3,100cc <__fixdfsi+0x5c>
   10098:	01810cc4 	movi	r6,1075
   1009c:	30cdc83a 	sub	r6,r6,r3
   100a0:	01c007c4 	movi	r7,31
   100a4:	10800434 	orhi	r2,r2,16
   100a8:	39800e0e 	bge	r7,r6,100e4 <__fixdfsi+0x74>
   100ac:	010104c4 	movi	r4,1043
   100b0:	20c7c83a 	sub	r3,r4,r3
   100b4:	10c6d83a 	srl	r3,r2,r3
   100b8:	29403fcc 	andi	r5,r5,255
   100bc:	0145c83a 	sub	r2,zero,r5
   100c0:	1884f03a 	xor	r2,r3,r2
   100c4:	1145883a 	add	r2,r2,r5
   100c8:	f800283a 	ret
   100cc:	00a00034 	movhi	r2,32768
   100d0:	10bfffc4 	addi	r2,r2,-1
   100d4:	2885883a 	add	r2,r5,r2
   100d8:	f800283a 	ret
   100dc:	0005883a 	mov	r2,zero
   100e0:	f800283a 	ret
   100e4:	18fefb44 	addi	r3,r3,-1043
   100e8:	2188d83a 	srl	r4,r4,r6
   100ec:	10c6983a 	sll	r3,r2,r3
   100f0:	20c6b03a 	or	r3,r4,r3
   100f4:	003ff006 	br	100b8 <__alt_mem_Flash_flash_data+0xf40100b8>

000100f8 <__floatsidf>:
   100f8:	defffd04 	addi	sp,sp,-12
   100fc:	dc400115 	stw	r17,4(sp)
   10100:	dfc00215 	stw	ra,8(sp)
   10104:	dc000015 	stw	r16,0(sp)
   10108:	2023883a 	mov	r17,r4
   1010c:	20001426 	beq	r4,zero,10160 <__floatsidf+0x68>
   10110:	2020d7fa 	srli	r16,r4,31
   10114:	80000126 	beq	r16,zero,1011c <__floatsidf+0x24>
   10118:	0123c83a 	sub	r17,zero,r4
   1011c:	8809883a 	mov	r4,r17
   10120:	001026c0 	call	1026c <__clzsi2>
   10124:	01410784 	movi	r5,1054
   10128:	00c00284 	movi	r3,10
   1012c:	288bc83a 	sub	r5,r5,r2
   10130:	18801c16 	blt	r3,r2,101a4 <__floatsidf+0xac>
   10134:	00c002c4 	movi	r3,11
   10138:	1887c83a 	sub	r3,r3,r2
   1013c:	88c8d83a 	srl	r4,r17,r3
   10140:	00c00434 	movhi	r3,16
   10144:	18ffffc4 	addi	r3,r3,-1
   10148:	10800544 	addi	r2,r2,21
   1014c:	20c8703a 	and	r4,r4,r3
   10150:	8884983a 	sll	r2,r17,r2
   10154:	28c1ffcc 	andi	r3,r5,2047
   10158:	800d883a 	mov	r6,r16
   1015c:	00000406 	br	10170 <__floatsidf+0x78>
   10160:	000d883a 	mov	r6,zero
   10164:	0007883a 	mov	r3,zero
   10168:	0009883a 	mov	r4,zero
   1016c:	0005883a 	mov	r2,zero
   10170:	180a953a 	slli	r5,r3,20
   10174:	31803fcc 	andi	r6,r6,255
   10178:	00c00434 	movhi	r3,16
   1017c:	300c97fa 	slli	r6,r6,31
   10180:	18ffffc4 	addi	r3,r3,-1
   10184:	20c6703a 	and	r3,r4,r3
   10188:	1946b03a 	or	r3,r3,r5
   1018c:	1986b03a 	or	r3,r3,r6
   10190:	dfc00217 	ldw	ra,8(sp)
   10194:	dc400117 	ldw	r17,4(sp)
   10198:	dc000017 	ldw	r16,0(sp)
   1019c:	dec00304 	addi	sp,sp,12
   101a0:	f800283a 	ret
   101a4:	10fffd44 	addi	r3,r2,-11
   101a8:	88c8983a 	sll	r4,r17,r3
   101ac:	00800434 	movhi	r2,16
   101b0:	10bfffc4 	addi	r2,r2,-1
   101b4:	2088703a 	and	r4,r4,r2
   101b8:	28c1ffcc 	andi	r3,r5,2047
   101bc:	800d883a 	mov	r6,r16
   101c0:	0005883a 	mov	r2,zero
   101c4:	003fea06 	br	10170 <__alt_mem_Flash_flash_data+0xf4010170>

000101c8 <__floatunsidf>:
   101c8:	defffe04 	addi	sp,sp,-8
   101cc:	dc000015 	stw	r16,0(sp)
   101d0:	dfc00115 	stw	ra,4(sp)
   101d4:	2021883a 	mov	r16,r4
   101d8:	20001026 	beq	r4,zero,1021c <__floatunsidf+0x54>
   101dc:	001026c0 	call	1026c <__clzsi2>
   101e0:	01410784 	movi	r5,1054
   101e4:	100d883a 	mov	r6,r2
   101e8:	288bc83a 	sub	r5,r5,r2
   101ec:	00800284 	movi	r2,10
   101f0:	11801616 	blt	r2,r6,1024c <__floatunsidf+0x84>
   101f4:	008002c4 	movi	r2,11
   101f8:	1185c83a 	sub	r2,r2,r6
   101fc:	8084d83a 	srl	r2,r16,r2
   10200:	00c00434 	movhi	r3,16
   10204:	31c00544 	addi	r7,r6,21
   10208:	18ffffc4 	addi	r3,r3,-1
   1020c:	81e0983a 	sll	r16,r16,r7
   10210:	10cc703a 	and	r6,r2,r3
   10214:	2941ffcc 	andi	r5,r5,2047
   10218:	00000206 	br	10224 <__floatunsidf+0x5c>
   1021c:	000b883a 	mov	r5,zero
   10220:	000d883a 	mov	r6,zero
   10224:	280a953a 	slli	r5,r5,20
   10228:	00c00434 	movhi	r3,16
   1022c:	18ffffc4 	addi	r3,r3,-1
   10230:	30c6703a 	and	r3,r6,r3
   10234:	8005883a 	mov	r2,r16
   10238:	1946b03a 	or	r3,r3,r5
   1023c:	dfc00117 	ldw	ra,4(sp)
   10240:	dc000017 	ldw	r16,0(sp)
   10244:	dec00204 	addi	sp,sp,8
   10248:	f800283a 	ret
   1024c:	31bffd44 	addi	r6,r6,-11
   10250:	818c983a 	sll	r6,r16,r6
   10254:	00800434 	movhi	r2,16
   10258:	10bfffc4 	addi	r2,r2,-1
   1025c:	2941ffcc 	andi	r5,r5,2047
   10260:	0021883a 	mov	r16,zero
   10264:	308c703a 	and	r6,r6,r2
   10268:	003fee06 	br	10224 <__alt_mem_Flash_flash_data+0xf4010224>

0001026c <__clzsi2>:
   1026c:	00bfffd4 	movui	r2,65535
   10270:	11000b36 	bltu	r2,r4,102a0 <__clzsi2+0x34>
   10274:	00803fc4 	movi	r2,255
   10278:	1100122e 	bgeu	r2,r4,102c4 <__clzsi2+0x58>
   1027c:	00c00204 	movi	r3,8
   10280:	01400604 	movi	r5,24
   10284:	20c8d83a 	srl	r4,r4,r3
   10288:	008000b4 	movhi	r2,2
   1028c:	1083fb04 	addi	r2,r2,4076
   10290:	1109883a 	add	r4,r2,r4
   10294:	20800003 	ldbu	r2,0(r4)
   10298:	2885c83a 	sub	r2,r5,r2
   1029c:	f800283a 	ret
   102a0:	00804034 	movhi	r2,256
   102a4:	10bfffc4 	addi	r2,r2,-1
   102a8:	11000336 	bltu	r2,r4,102b8 <__clzsi2+0x4c>
   102ac:	00c00404 	movi	r3,16
   102b0:	180b883a 	mov	r5,r3
   102b4:	003ff306 	br	10284 <__alt_mem_Flash_flash_data+0xf4010284>
   102b8:	00c00604 	movi	r3,24
   102bc:	01400204 	movi	r5,8
   102c0:	003ff006 	br	10284 <__alt_mem_Flash_flash_data+0xf4010284>
   102c4:	0007883a 	mov	r3,zero
   102c8:	01400804 	movi	r5,32
   102cc:	003fed06 	br	10284 <__alt_mem_Flash_flash_data+0xf4010284>

000102d0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   102d0:	defffe04 	addi	sp,sp,-8
   102d4:	dfc00115 	stw	ra,4(sp)
   102d8:	df000015 	stw	fp,0(sp)
   102dc:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   102e0:	008000b4 	movhi	r2,2
   102e4:	108c9004 	addi	r2,r2,12864
   102e8:	10800017 	ldw	r2,0(r2)
   102ec:	10000526 	beq	r2,zero,10304 <alt_get_errno+0x34>
   102f0:	008000b4 	movhi	r2,2
   102f4:	108c9004 	addi	r2,r2,12864
   102f8:	10800017 	ldw	r2,0(r2)
   102fc:	103ee83a 	callr	r2
   10300:	00000206 	br	1030c <alt_get_errno+0x3c>
   10304:	008000b4 	movhi	r2,2
   10308:	10947804 	addi	r2,r2,20960
}
   1030c:	e037883a 	mov	sp,fp
   10310:	dfc00117 	ldw	ra,4(sp)
   10314:	df000017 	ldw	fp,0(sp)
   10318:	dec00204 	addi	sp,sp,8
   1031c:	f800283a 	ret

00010320 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
   10320:	defffb04 	addi	sp,sp,-20
   10324:	dfc00415 	stw	ra,16(sp)
   10328:	df000315 	stw	fp,12(sp)
   1032c:	df000304 	addi	fp,sp,12
   10330:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
   10334:	e0bfff17 	ldw	r2,-4(fp)
   10338:	10000616 	blt	r2,zero,10354 <close+0x34>
   1033c:	e0bfff17 	ldw	r2,-4(fp)
   10340:	10c00324 	muli	r3,r2,12
   10344:	008000b4 	movhi	r2,2
   10348:	10872904 	addi	r2,r2,7332
   1034c:	1885883a 	add	r2,r3,r2
   10350:	00000106 	br	10358 <close+0x38>
   10354:	0005883a 	mov	r2,zero
   10358:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
   1035c:	e0bffd17 	ldw	r2,-12(fp)
   10360:	10001926 	beq	r2,zero,103c8 <close+0xa8>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
   10364:	e0bffd17 	ldw	r2,-12(fp)
   10368:	10800017 	ldw	r2,0(r2)
   1036c:	10800417 	ldw	r2,16(r2)
   10370:	10000626 	beq	r2,zero,1038c <close+0x6c>
   10374:	e0bffd17 	ldw	r2,-12(fp)
   10378:	10800017 	ldw	r2,0(r2)
   1037c:	10800417 	ldw	r2,16(r2)
   10380:	e13ffd17 	ldw	r4,-12(fp)
   10384:	103ee83a 	callr	r2
   10388:	00000106 	br	10390 <close+0x70>
   1038c:	0005883a 	mov	r2,zero
   10390:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
   10394:	e13fff17 	ldw	r4,-4(fp)
   10398:	0010a380 	call	10a38 <alt_release_fd>
    if (rval < 0)
   1039c:	e0bffe17 	ldw	r2,-8(fp)
   103a0:	1000070e 	bge	r2,zero,103c0 <close+0xa0>
    {
      ALT_ERRNO = -rval;
   103a4:	00102d00 	call	102d0 <alt_get_errno>
   103a8:	1007883a 	mov	r3,r2
   103ac:	e0bffe17 	ldw	r2,-8(fp)
   103b0:	0085c83a 	sub	r2,zero,r2
   103b4:	18800015 	stw	r2,0(r3)
      return -1;
   103b8:	00bfffc4 	movi	r2,-1
   103bc:	00000706 	br	103dc <close+0xbc>
    }
    return 0;
   103c0:	0005883a 	mov	r2,zero
   103c4:	00000506 	br	103dc <close+0xbc>
  }
  else
  {
    ALT_ERRNO = EBADFD;
   103c8:	00102d00 	call	102d0 <alt_get_errno>
   103cc:	1007883a 	mov	r3,r2
   103d0:	00801444 	movi	r2,81
   103d4:	18800015 	stw	r2,0(r3)
    return -1;
   103d8:	00bfffc4 	movi	r2,-1
  }
}
   103dc:	e037883a 	mov	sp,fp
   103e0:	dfc00117 	ldw	ra,4(sp)
   103e4:	df000017 	ldw	fp,0(sp)
   103e8:	dec00204 	addi	sp,sp,8
   103ec:	f800283a 	ret

000103f0 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
   103f0:	defffc04 	addi	sp,sp,-16
   103f4:	df000315 	stw	fp,12(sp)
   103f8:	df000304 	addi	fp,sp,12
   103fc:	e13ffd15 	stw	r4,-12(fp)
   10400:	e17ffe15 	stw	r5,-8(fp)
   10404:	e1bfff15 	stw	r6,-4(fp)
  return len;
   10408:	e0bfff17 	ldw	r2,-4(fp)
}
   1040c:	e037883a 	mov	sp,fp
   10410:	df000017 	ldw	fp,0(sp)
   10414:	dec00104 	addi	sp,sp,4
   10418:	f800283a 	ret

0001041c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   1041c:	defffe04 	addi	sp,sp,-8
   10420:	dfc00115 	stw	ra,4(sp)
   10424:	df000015 	stw	fp,0(sp)
   10428:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   1042c:	008000b4 	movhi	r2,2
   10430:	108c9004 	addi	r2,r2,12864
   10434:	10800017 	ldw	r2,0(r2)
   10438:	10000526 	beq	r2,zero,10450 <alt_get_errno+0x34>
   1043c:	008000b4 	movhi	r2,2
   10440:	108c9004 	addi	r2,r2,12864
   10444:	10800017 	ldw	r2,0(r2)
   10448:	103ee83a 	callr	r2
   1044c:	00000206 	br	10458 <alt_get_errno+0x3c>
   10450:	008000b4 	movhi	r2,2
   10454:	10947804 	addi	r2,r2,20960
}
   10458:	e037883a 	mov	sp,fp
   1045c:	dfc00117 	ldw	ra,4(sp)
   10460:	df000017 	ldw	fp,0(sp)
   10464:	dec00204 	addi	sp,sp,8
   10468:	f800283a 	ret

0001046c <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
   1046c:	defffb04 	addi	sp,sp,-20
   10470:	dfc00415 	stw	ra,16(sp)
   10474:	df000315 	stw	fp,12(sp)
   10478:	df000304 	addi	fp,sp,12
   1047c:	e13ffe15 	stw	r4,-8(fp)
   10480:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   10484:	e0bffe17 	ldw	r2,-8(fp)
   10488:	10000616 	blt	r2,zero,104a4 <fstat+0x38>
   1048c:	e0bffe17 	ldw	r2,-8(fp)
   10490:	10c00324 	muli	r3,r2,12
   10494:	008000b4 	movhi	r2,2
   10498:	10872904 	addi	r2,r2,7332
   1049c:	1885883a 	add	r2,r3,r2
   104a0:	00000106 	br	104a8 <fstat+0x3c>
   104a4:	0005883a 	mov	r2,zero
   104a8:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
   104ac:	e0bffd17 	ldw	r2,-12(fp)
   104b0:	10001026 	beq	r2,zero,104f4 <fstat+0x88>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
   104b4:	e0bffd17 	ldw	r2,-12(fp)
   104b8:	10800017 	ldw	r2,0(r2)
   104bc:	10800817 	ldw	r2,32(r2)
   104c0:	10000726 	beq	r2,zero,104e0 <fstat+0x74>
    {
      return fd->dev->fstat(fd, st);
   104c4:	e0bffd17 	ldw	r2,-12(fp)
   104c8:	10800017 	ldw	r2,0(r2)
   104cc:	10800817 	ldw	r2,32(r2)
   104d0:	e13ffd17 	ldw	r4,-12(fp)
   104d4:	e17fff17 	ldw	r5,-4(fp)
   104d8:	103ee83a 	callr	r2
   104dc:	00000a06 	br	10508 <fstat+0x9c>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
   104e0:	e0bfff17 	ldw	r2,-4(fp)
   104e4:	00c80004 	movi	r3,8192
   104e8:	10c00115 	stw	r3,4(r2)
      return 0;
   104ec:	0005883a 	mov	r2,zero
   104f0:	00000506 	br	10508 <fstat+0x9c>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
   104f4:	001041c0 	call	1041c <alt_get_errno>
   104f8:	1007883a 	mov	r3,r2
   104fc:	00801444 	movi	r2,81
   10500:	18800015 	stw	r2,0(r3)
    return -1;
   10504:	00bfffc4 	movi	r2,-1
  }
}
   10508:	e037883a 	mov	sp,fp
   1050c:	dfc00117 	ldw	ra,4(sp)
   10510:	df000017 	ldw	fp,0(sp)
   10514:	dec00204 	addi	sp,sp,8
   10518:	f800283a 	ret

0001051c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   1051c:	defffe04 	addi	sp,sp,-8
   10520:	dfc00115 	stw	ra,4(sp)
   10524:	df000015 	stw	fp,0(sp)
   10528:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   1052c:	008000b4 	movhi	r2,2
   10530:	108c9004 	addi	r2,r2,12864
   10534:	10800017 	ldw	r2,0(r2)
   10538:	10000526 	beq	r2,zero,10550 <alt_get_errno+0x34>
   1053c:	008000b4 	movhi	r2,2
   10540:	108c9004 	addi	r2,r2,12864
   10544:	10800017 	ldw	r2,0(r2)
   10548:	103ee83a 	callr	r2
   1054c:	00000206 	br	10558 <alt_get_errno+0x3c>
   10550:	008000b4 	movhi	r2,2
   10554:	10947804 	addi	r2,r2,20960
}
   10558:	e037883a 	mov	sp,fp
   1055c:	dfc00117 	ldw	ra,4(sp)
   10560:	df000017 	ldw	fp,0(sp)
   10564:	dec00204 	addi	sp,sp,8
   10568:	f800283a 	ret

0001056c <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
   1056c:	deffed04 	addi	sp,sp,-76
   10570:	dfc01215 	stw	ra,72(sp)
   10574:	df001115 	stw	fp,68(sp)
   10578:	df001104 	addi	fp,sp,68
   1057c:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   10580:	e0bfff17 	ldw	r2,-4(fp)
   10584:	10000616 	blt	r2,zero,105a0 <isatty+0x34>
   10588:	e0bfff17 	ldw	r2,-4(fp)
   1058c:	10c00324 	muli	r3,r2,12
   10590:	008000b4 	movhi	r2,2
   10594:	10872904 	addi	r2,r2,7332
   10598:	1885883a 	add	r2,r3,r2
   1059c:	00000106 	br	105a4 <isatty+0x38>
   105a0:	0005883a 	mov	r2,zero
   105a4:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
   105a8:	e0bfef17 	ldw	r2,-68(fp)
   105ac:	10000e26 	beq	r2,zero,105e8 <isatty+0x7c>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
   105b0:	e0bfef17 	ldw	r2,-68(fp)
   105b4:	10800017 	ldw	r2,0(r2)
   105b8:	10800817 	ldw	r2,32(r2)
   105bc:	1000021e 	bne	r2,zero,105c8 <isatty+0x5c>
    {
      return 1;
   105c0:	00800044 	movi	r2,1
   105c4:	00000d06 	br	105fc <isatty+0x90>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
   105c8:	e0bff004 	addi	r2,fp,-64
   105cc:	e13fff17 	ldw	r4,-4(fp)
   105d0:	100b883a 	mov	r5,r2
   105d4:	001046c0 	call	1046c <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
   105d8:	e0bff117 	ldw	r2,-60(fp)
   105dc:	10880020 	cmpeqi	r2,r2,8192
   105e0:	10803fcc 	andi	r2,r2,255
   105e4:	00000506 	br	105fc <isatty+0x90>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
   105e8:	001051c0 	call	1051c <alt_get_errno>
   105ec:	1007883a 	mov	r3,r2
   105f0:	00801444 	movi	r2,81
   105f4:	18800015 	stw	r2,0(r3)
    return 0;
   105f8:	0005883a 	mov	r2,zero
  }
}
   105fc:	e037883a 	mov	sp,fp
   10600:	dfc00117 	ldw	ra,4(sp)
   10604:	df000017 	ldw	fp,0(sp)
   10608:	dec00204 	addi	sp,sp,8
   1060c:	f800283a 	ret

00010610 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
   10610:	defffc04 	addi	sp,sp,-16
   10614:	df000315 	stw	fp,12(sp)
   10618:	df000304 	addi	fp,sp,12
   1061c:	e13ffd15 	stw	r4,-12(fp)
   10620:	e17ffe15 	stw	r5,-8(fp)
   10624:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
   10628:	e0fffe17 	ldw	r3,-8(fp)
   1062c:	e0bffd17 	ldw	r2,-12(fp)
   10630:	18800c26 	beq	r3,r2,10664 <alt_load_section+0x54>
  {
    while( to != end )
   10634:	00000806 	br	10658 <alt_load_section+0x48>
    {
      *to++ = *from++;
   10638:	e0bffe17 	ldw	r2,-8(fp)
   1063c:	10c00104 	addi	r3,r2,4
   10640:	e0fffe15 	stw	r3,-8(fp)
   10644:	e0fffd17 	ldw	r3,-12(fp)
   10648:	19000104 	addi	r4,r3,4
   1064c:	e13ffd15 	stw	r4,-12(fp)
   10650:	18c00017 	ldw	r3,0(r3)
   10654:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
   10658:	e0fffe17 	ldw	r3,-8(fp)
   1065c:	e0bfff17 	ldw	r2,-4(fp)
   10660:	18bff51e 	bne	r3,r2,10638 <__alt_mem_Flash_flash_data+0xf4010638>
    {
      *to++ = *from++;
    }
  }
}
   10664:	e037883a 	mov	sp,fp
   10668:	df000017 	ldw	fp,0(sp)
   1066c:	dec00104 	addi	sp,sp,4
   10670:	f800283a 	ret

00010674 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
   10674:	defffe04 	addi	sp,sp,-8
   10678:	dfc00115 	stw	ra,4(sp)
   1067c:	df000015 	stw	fp,0(sp)
   10680:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
   10684:	010000b4 	movhi	r4,2
   10688:	210cb404 	addi	r4,r4,13008
   1068c:	014000b4 	movhi	r5,2
   10690:	2944f604 	addi	r5,r5,5080
   10694:	018000b4 	movhi	r6,2
   10698:	318cb404 	addi	r6,r6,13008
   1069c:	00106100 	call	10610 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
   106a0:	01000034 	movhi	r4,0
   106a4:	21000804 	addi	r4,r4,32
   106a8:	01400034 	movhi	r5,0
   106ac:	29400804 	addi	r5,r5,32
   106b0:	01800034 	movhi	r6,0
   106b4:	31809104 	addi	r6,r6,580
   106b8:	00106100 	call	10610 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
   106bc:	010000b4 	movhi	r4,2
   106c0:	21032c04 	addi	r4,r4,3248
   106c4:	014000b4 	movhi	r5,2
   106c8:	29432c04 	addi	r5,r5,3248
   106cc:	018000b4 	movhi	r6,2
   106d0:	3184f604 	addi	r6,r6,5080
   106d4:	00106100 	call	10610 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
   106d8:	001f8f80 	call	1f8f8 <alt_dcache_flush_all>
  alt_icache_flush_all();
   106dc:	001fb500 	call	1fb50 <alt_icache_flush_all>
}
   106e0:	e037883a 	mov	sp,fp
   106e4:	dfc00117 	ldw	ra,4(sp)
   106e8:	df000017 	ldw	fp,0(sp)
   106ec:	dec00204 	addi	sp,sp,8
   106f0:	f800283a 	ret

000106f4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   106f4:	defffe04 	addi	sp,sp,-8
   106f8:	dfc00115 	stw	ra,4(sp)
   106fc:	df000015 	stw	fp,0(sp)
   10700:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   10704:	008000b4 	movhi	r2,2
   10708:	108c9004 	addi	r2,r2,12864
   1070c:	10800017 	ldw	r2,0(r2)
   10710:	10000526 	beq	r2,zero,10728 <alt_get_errno+0x34>
   10714:	008000b4 	movhi	r2,2
   10718:	108c9004 	addi	r2,r2,12864
   1071c:	10800017 	ldw	r2,0(r2)
   10720:	103ee83a 	callr	r2
   10724:	00000206 	br	10730 <alt_get_errno+0x3c>
   10728:	008000b4 	movhi	r2,2
   1072c:	10947804 	addi	r2,r2,20960
}
   10730:	e037883a 	mov	sp,fp
   10734:	dfc00117 	ldw	ra,4(sp)
   10738:	df000017 	ldw	fp,0(sp)
   1073c:	dec00204 	addi	sp,sp,8
   10740:	f800283a 	ret

00010744 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
   10744:	defff904 	addi	sp,sp,-28
   10748:	dfc00615 	stw	ra,24(sp)
   1074c:	df000515 	stw	fp,20(sp)
   10750:	df000504 	addi	fp,sp,20
   10754:	e13ffd15 	stw	r4,-12(fp)
   10758:	e17ffe15 	stw	r5,-8(fp)
   1075c:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
   10760:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   10764:	e0bffd17 	ldw	r2,-12(fp)
   10768:	10000616 	blt	r2,zero,10784 <lseek+0x40>
   1076c:	e0bffd17 	ldw	r2,-12(fp)
   10770:	10c00324 	muli	r3,r2,12
   10774:	008000b4 	movhi	r2,2
   10778:	10872904 	addi	r2,r2,7332
   1077c:	1885883a 	add	r2,r3,r2
   10780:	00000106 	br	10788 <lseek+0x44>
   10784:	0005883a 	mov	r2,zero
   10788:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
   1078c:	e0bffc17 	ldw	r2,-16(fp)
   10790:	10001026 	beq	r2,zero,107d4 <lseek+0x90>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
   10794:	e0bffc17 	ldw	r2,-16(fp)
   10798:	10800017 	ldw	r2,0(r2)
   1079c:	10800717 	ldw	r2,28(r2)
   107a0:	10000926 	beq	r2,zero,107c8 <lseek+0x84>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
   107a4:	e0bffc17 	ldw	r2,-16(fp)
   107a8:	10800017 	ldw	r2,0(r2)
   107ac:	10800717 	ldw	r2,28(r2)
   107b0:	e13ffc17 	ldw	r4,-16(fp)
   107b4:	e17ffe17 	ldw	r5,-8(fp)
   107b8:	e1bfff17 	ldw	r6,-4(fp)
   107bc:	103ee83a 	callr	r2
   107c0:	e0bffb15 	stw	r2,-20(fp)
   107c4:	00000506 	br	107dc <lseek+0x98>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
   107c8:	00bfde84 	movi	r2,-134
   107cc:	e0bffb15 	stw	r2,-20(fp)
   107d0:	00000206 	br	107dc <lseek+0x98>
    }
  }
  else  
  {
    rc = -EBADFD;
   107d4:	00bfebc4 	movi	r2,-81
   107d8:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
   107dc:	e0bffb17 	ldw	r2,-20(fp)
   107e0:	1000070e 	bge	r2,zero,10800 <lseek+0xbc>
  {
    ALT_ERRNO = -rc;
   107e4:	00106f40 	call	106f4 <alt_get_errno>
   107e8:	1007883a 	mov	r3,r2
   107ec:	e0bffb17 	ldw	r2,-20(fp)
   107f0:	0085c83a 	sub	r2,zero,r2
   107f4:	18800015 	stw	r2,0(r3)
    rc = -1;
   107f8:	00bfffc4 	movi	r2,-1
   107fc:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
   10800:	e0bffb17 	ldw	r2,-20(fp)
}
   10804:	e037883a 	mov	sp,fp
   10808:	dfc00117 	ldw	ra,4(sp)
   1080c:	df000017 	ldw	fp,0(sp)
   10810:	dec00204 	addi	sp,sp,8
   10814:	f800283a 	ret

00010818 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
   10818:	defff904 	addi	sp,sp,-28
   1081c:	dfc00615 	stw	ra,24(sp)
   10820:	df000515 	stw	fp,20(sp)
   10824:	df000504 	addi	fp,sp,20
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
   10828:	0009883a 	mov	r4,zero
   1082c:	0018c640 	call	18c64 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
   10830:	00118080 	call	11808 <OSInit>
   10834:	01000044 	movi	r4,1
   10838:	00163780 	call	16378 <OSSemCreate>
   1083c:	1007883a 	mov	r3,r2
   10840:	008000b4 	movhi	r2,2
   10844:	10947e04 	addi	r2,r2,20984
   10848:	10c00015 	stw	r3,0(r2)
   1084c:	01000044 	movi	r4,1
   10850:	00163780 	call	16378 <OSSemCreate>
   10854:	1007883a 	mov	r3,r2
   10858:	008000b4 	movhi	r2,2
   1085c:	10948004 	addi	r2,r2,20992
   10860:	10c00015 	stw	r3,0(r2)
   10864:	008000b4 	movhi	r2,2
   10868:	10947904 	addi	r2,r2,20964
   1086c:	e0bffc15 	stw	r2,-16(fp)
   10870:	00800044 	movi	r2,1
   10874:	e0bffd0d 	sth	r2,-12(fp)
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sem_create (OS_EVENT** sem, 
              INT16U value)
{
  *sem = OSSemCreate (value);
   10878:	e0bffd0b 	ldhu	r2,-12(fp)
   1087c:	1009883a 	mov	r4,r2
   10880:	00163780 	call	16378 <OSSemCreate>
   10884:	1007883a 	mov	r3,r2
   10888:	e0bffc17 	ldw	r2,-16(fp)
   1088c:	10c00015 	stw	r3,0(r2)
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
   10890:	0018c980 	call	18c98 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
   10894:	010000b4 	movhi	r4,2
   10898:	21043e04 	addi	r4,r4,4344
   1089c:	014000b4 	movhi	r5,2
   108a0:	29443e04 	addi	r5,r5,4344
   108a4:	018000b4 	movhi	r6,2
   108a8:	31843e04 	addi	r6,r6,4344
   108ac:	001fc400 	call	1fc40 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
   108b0:	001fa080 	call	1fa08 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
   108b4:	010000b4 	movhi	r4,2
   108b8:	213e9904 	addi	r4,r4,-1436
   108bc:	00209040 	call	20904 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
   108c0:	d127f517 	ldw	r4,-24620(gp)
   108c4:	d0e7f617 	ldw	r3,-24616(gp)
   108c8:	d0a7f717 	ldw	r2,-24612(gp)
   108cc:	180b883a 	mov	r5,r3
   108d0:	100d883a 	mov	r6,r2
   108d4:	00008d40 	call	8d4 <main>
   108d8:	e0bffb15 	stw	r2,-20(fp)
  close(STDOUT_FILENO);
   108dc:	01000044 	movi	r4,1
   108e0:	00103200 	call	10320 <close>
  exit (result);
   108e4:	e13ffb17 	ldw	r4,-20(fp)
   108e8:	00209180 	call	20918 <exit>

000108ec <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   108ec:	defffe04 	addi	sp,sp,-8
   108f0:	dfc00115 	stw	ra,4(sp)
   108f4:	df000015 	stw	fp,0(sp)
   108f8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   108fc:	008000b4 	movhi	r2,2
   10900:	108c9004 	addi	r2,r2,12864
   10904:	10800017 	ldw	r2,0(r2)
   10908:	10000526 	beq	r2,zero,10920 <alt_get_errno+0x34>
   1090c:	008000b4 	movhi	r2,2
   10910:	108c9004 	addi	r2,r2,12864
   10914:	10800017 	ldw	r2,0(r2)
   10918:	103ee83a 	callr	r2
   1091c:	00000206 	br	10928 <alt_get_errno+0x3c>
   10920:	008000b4 	movhi	r2,2
   10924:	10947804 	addi	r2,r2,20960
}
   10928:	e037883a 	mov	sp,fp
   1092c:	dfc00117 	ldw	ra,4(sp)
   10930:	df000017 	ldw	fp,0(sp)
   10934:	dec00204 	addi	sp,sp,8
   10938:	f800283a 	ret

0001093c <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
   1093c:	defff904 	addi	sp,sp,-28
   10940:	dfc00615 	stw	ra,24(sp)
   10944:	df000515 	stw	fp,20(sp)
   10948:	df000504 	addi	fp,sp,20
   1094c:	e13ffd15 	stw	r4,-12(fp)
   10950:	e17ffe15 	stw	r5,-8(fp)
   10954:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   10958:	e0bffd17 	ldw	r2,-12(fp)
   1095c:	10000616 	blt	r2,zero,10978 <read+0x3c>
   10960:	e0bffd17 	ldw	r2,-12(fp)
   10964:	10c00324 	muli	r3,r2,12
   10968:	008000b4 	movhi	r2,2
   1096c:	10872904 	addi	r2,r2,7332
   10970:	1885883a 	add	r2,r3,r2
   10974:	00000106 	br	1097c <read+0x40>
   10978:	0005883a 	mov	r2,zero
   1097c:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
   10980:	e0bffb17 	ldw	r2,-20(fp)
   10984:	10002226 	beq	r2,zero,10a10 <read+0xd4>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
   10988:	e0bffb17 	ldw	r2,-20(fp)
   1098c:	10800217 	ldw	r2,8(r2)
   10990:	108000cc 	andi	r2,r2,3
   10994:	10800060 	cmpeqi	r2,r2,1
   10998:	1000181e 	bne	r2,zero,109fc <read+0xc0>
        (fd->dev->read))
   1099c:	e0bffb17 	ldw	r2,-20(fp)
   109a0:	10800017 	ldw	r2,0(r2)
   109a4:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
   109a8:	10001426 	beq	r2,zero,109fc <read+0xc0>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
   109ac:	e0bffb17 	ldw	r2,-20(fp)
   109b0:	10800017 	ldw	r2,0(r2)
   109b4:	10800517 	ldw	r2,20(r2)
   109b8:	e0ffff17 	ldw	r3,-4(fp)
   109bc:	e13ffb17 	ldw	r4,-20(fp)
   109c0:	e17ffe17 	ldw	r5,-8(fp)
   109c4:	180d883a 	mov	r6,r3
   109c8:	103ee83a 	callr	r2
   109cc:	e0bffc15 	stw	r2,-16(fp)
   109d0:	e0bffc17 	ldw	r2,-16(fp)
   109d4:	1000070e 	bge	r2,zero,109f4 <read+0xb8>
        {
          ALT_ERRNO = -rval;
   109d8:	00108ec0 	call	108ec <alt_get_errno>
   109dc:	1007883a 	mov	r3,r2
   109e0:	e0bffc17 	ldw	r2,-16(fp)
   109e4:	0085c83a 	sub	r2,zero,r2
   109e8:	18800015 	stw	r2,0(r3)
          return -1;
   109ec:	00bfffc4 	movi	r2,-1
   109f0:	00000c06 	br	10a24 <read+0xe8>
        }
        return rval;
   109f4:	e0bffc17 	ldw	r2,-16(fp)
   109f8:	00000a06 	br	10a24 <read+0xe8>
      }
      else
      {
        ALT_ERRNO = EACCES;
   109fc:	00108ec0 	call	108ec <alt_get_errno>
   10a00:	1007883a 	mov	r3,r2
   10a04:	00800344 	movi	r2,13
   10a08:	18800015 	stw	r2,0(r3)
   10a0c:	00000406 	br	10a20 <read+0xe4>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
   10a10:	00108ec0 	call	108ec <alt_get_errno>
   10a14:	1007883a 	mov	r3,r2
   10a18:	00801444 	movi	r2,81
   10a1c:	18800015 	stw	r2,0(r3)
  }
  return -1;
   10a20:	00bfffc4 	movi	r2,-1
}
   10a24:	e037883a 	mov	sp,fp
   10a28:	dfc00117 	ldw	ra,4(sp)
   10a2c:	df000017 	ldw	fp,0(sp)
   10a30:	dec00204 	addi	sp,sp,8
   10a34:	f800283a 	ret

00010a38 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
   10a38:	defffe04 	addi	sp,sp,-8
   10a3c:	df000115 	stw	fp,4(sp)
   10a40:	df000104 	addi	fp,sp,4
   10a44:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
   10a48:	e0bfff17 	ldw	r2,-4(fp)
   10a4c:	108000d0 	cmplti	r2,r2,3
   10a50:	10000d1e 	bne	r2,zero,10a88 <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
   10a54:	008000b4 	movhi	r2,2
   10a58:	10872904 	addi	r2,r2,7332
   10a5c:	e0ffff17 	ldw	r3,-4(fp)
   10a60:	18c00324 	muli	r3,r3,12
   10a64:	18c00204 	addi	r3,r3,8
   10a68:	10c5883a 	add	r2,r2,r3
   10a6c:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
   10a70:	008000b4 	movhi	r2,2
   10a74:	10872904 	addi	r2,r2,7332
   10a78:	e0ffff17 	ldw	r3,-4(fp)
   10a7c:	18c00324 	muli	r3,r3,12
   10a80:	10c5883a 	add	r2,r2,r3
   10a84:	10000015 	stw	zero,0(r2)
  }
}
   10a88:	e037883a 	mov	sp,fp
   10a8c:	df000017 	ldw	fp,0(sp)
   10a90:	dec00104 	addi	sp,sp,4
   10a94:	f800283a 	ret

00010a98 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
   10a98:	defff904 	addi	sp,sp,-28
   10a9c:	df000615 	stw	fp,24(sp)
   10aa0:	df000604 	addi	fp,sp,24
   10aa4:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   10aa8:	0005303a 	rdctl	r2,status
   10aac:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   10ab0:	e0fffc17 	ldw	r3,-16(fp)
   10ab4:	00bfff84 	movi	r2,-2
   10ab8:	1884703a 	and	r2,r3,r2
   10abc:	1001703a 	wrctl	status,r2
  
  return context;
   10ac0:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
   10ac4:	e0bffa15 	stw	r2,-24(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
   10ac8:	d0a00c17 	ldw	r2,-32720(gp)
   10acc:	10c000c4 	addi	r3,r2,3
   10ad0:	00bfff04 	movi	r2,-4
   10ad4:	1884703a 	and	r2,r3,r2
   10ad8:	d0a00c15 	stw	r2,-32720(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
   10adc:	d0e00c17 	ldw	r3,-32720(gp)
   10ae0:	e0bfff17 	ldw	r2,-4(fp)
   10ae4:	1887883a 	add	r3,r3,r2
   10ae8:	00810034 	movhi	r2,1024
   10aec:	10800004 	addi	r2,r2,0
   10af0:	10c0062e 	bgeu	r2,r3,10b0c <sbrk+0x74>
   10af4:	e0bffa17 	ldw	r2,-24(fp)
   10af8:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   10afc:	e0bffd17 	ldw	r2,-12(fp)
   10b00:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
   10b04:	00bfffc4 	movi	r2,-1
   10b08:	00000b06 	br	10b38 <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
   10b0c:	d0a00c17 	ldw	r2,-32720(gp)
   10b10:	e0bffb15 	stw	r2,-20(fp)
  heap_end += incr; 
   10b14:	d0e00c17 	ldw	r3,-32720(gp)
   10b18:	e0bfff17 	ldw	r2,-4(fp)
   10b1c:	1885883a 	add	r2,r3,r2
   10b20:	d0a00c15 	stw	r2,-32720(gp)
   10b24:	e0bffa17 	ldw	r2,-24(fp)
   10b28:	e0bffe15 	stw	r2,-8(fp)
   10b2c:	e0bffe17 	ldw	r2,-8(fp)
   10b30:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
   10b34:	e0bffb17 	ldw	r2,-20(fp)
} 
   10b38:	e037883a 	mov	sp,fp
   10b3c:	df000017 	ldw	fp,0(sp)
   10b40:	dec00104 	addi	sp,sp,4
   10b44:	f800283a 	ret

00010b48 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   10b48:	defffe04 	addi	sp,sp,-8
   10b4c:	dfc00115 	stw	ra,4(sp)
   10b50:	df000015 	stw	fp,0(sp)
   10b54:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   10b58:	008000b4 	movhi	r2,2
   10b5c:	108c9004 	addi	r2,r2,12864
   10b60:	10800017 	ldw	r2,0(r2)
   10b64:	10000526 	beq	r2,zero,10b7c <alt_get_errno+0x34>
   10b68:	008000b4 	movhi	r2,2
   10b6c:	108c9004 	addi	r2,r2,12864
   10b70:	10800017 	ldw	r2,0(r2)
   10b74:	103ee83a 	callr	r2
   10b78:	00000206 	br	10b84 <alt_get_errno+0x3c>
   10b7c:	008000b4 	movhi	r2,2
   10b80:	10947804 	addi	r2,r2,20960
}
   10b84:	e037883a 	mov	sp,fp
   10b88:	dfc00117 	ldw	ra,4(sp)
   10b8c:	df000017 	ldw	fp,0(sp)
   10b90:	dec00204 	addi	sp,sp,8
   10b94:	f800283a 	ret

00010b98 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
   10b98:	defff904 	addi	sp,sp,-28
   10b9c:	dfc00615 	stw	ra,24(sp)
   10ba0:	df000515 	stw	fp,20(sp)
   10ba4:	df000504 	addi	fp,sp,20
   10ba8:	e13ffd15 	stw	r4,-12(fp)
   10bac:	e17ffe15 	stw	r5,-8(fp)
   10bb0:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   10bb4:	e0bffd17 	ldw	r2,-12(fp)
   10bb8:	10000616 	blt	r2,zero,10bd4 <write+0x3c>
   10bbc:	e0bffd17 	ldw	r2,-12(fp)
   10bc0:	10c00324 	muli	r3,r2,12
   10bc4:	008000b4 	movhi	r2,2
   10bc8:	10872904 	addi	r2,r2,7332
   10bcc:	1885883a 	add	r2,r3,r2
   10bd0:	00000106 	br	10bd8 <write+0x40>
   10bd4:	0005883a 	mov	r2,zero
   10bd8:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
   10bdc:	e0bffb17 	ldw	r2,-20(fp)
   10be0:	10002126 	beq	r2,zero,10c68 <write+0xd0>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
   10be4:	e0bffb17 	ldw	r2,-20(fp)
   10be8:	10800217 	ldw	r2,8(r2)
   10bec:	108000cc 	andi	r2,r2,3
   10bf0:	10001826 	beq	r2,zero,10c54 <write+0xbc>
   10bf4:	e0bffb17 	ldw	r2,-20(fp)
   10bf8:	10800017 	ldw	r2,0(r2)
   10bfc:	10800617 	ldw	r2,24(r2)
   10c00:	10001426 	beq	r2,zero,10c54 <write+0xbc>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
   10c04:	e0bffb17 	ldw	r2,-20(fp)
   10c08:	10800017 	ldw	r2,0(r2)
   10c0c:	10800617 	ldw	r2,24(r2)
   10c10:	e0ffff17 	ldw	r3,-4(fp)
   10c14:	e13ffb17 	ldw	r4,-20(fp)
   10c18:	e17ffe17 	ldw	r5,-8(fp)
   10c1c:	180d883a 	mov	r6,r3
   10c20:	103ee83a 	callr	r2
   10c24:	e0bffc15 	stw	r2,-16(fp)
   10c28:	e0bffc17 	ldw	r2,-16(fp)
   10c2c:	1000070e 	bge	r2,zero,10c4c <write+0xb4>
      {
        ALT_ERRNO = -rval;
   10c30:	0010b480 	call	10b48 <alt_get_errno>
   10c34:	1007883a 	mov	r3,r2
   10c38:	e0bffc17 	ldw	r2,-16(fp)
   10c3c:	0085c83a 	sub	r2,zero,r2
   10c40:	18800015 	stw	r2,0(r3)
        return -1;
   10c44:	00bfffc4 	movi	r2,-1
   10c48:	00000c06 	br	10c7c <write+0xe4>
      }
      return rval;
   10c4c:	e0bffc17 	ldw	r2,-16(fp)
   10c50:	00000a06 	br	10c7c <write+0xe4>
    }
    else
    {
      ALT_ERRNO = EACCES;
   10c54:	0010b480 	call	10b48 <alt_get_errno>
   10c58:	1007883a 	mov	r3,r2
   10c5c:	00800344 	movi	r2,13
   10c60:	18800015 	stw	r2,0(r3)
   10c64:	00000406 	br	10c78 <write+0xe0>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
   10c68:	0010b480 	call	10b48 <alt_get_errno>
   10c6c:	1007883a 	mov	r3,r2
   10c70:	00801444 	movi	r2,81
   10c74:	18800015 	stw	r2,0(r3)
  }
  return -1;
   10c78:	00bfffc4 	movi	r2,-1
}
   10c7c:	e037883a 	mov	sp,fp
   10c80:	dfc00117 	ldw	ra,4(sp)
   10c84:	df000017 	ldw	fp,0(sp)
   10c88:	dec00204 	addi	sp,sp,8
   10c8c:	f800283a 	ret

00010c90 <__env_lock>:
/*
 *
 */

void __env_lock ( struct _reent *_r )
{
   10c90:	deffdf04 	addi	sp,sp,-132
   10c94:	dfc02015 	stw	ra,128(sp)
   10c98:	df001f15 	stw	fp,124(sp)
   10c9c:	df001f04 	addi	fp,sp,124
   10ca0:	e13fff15 	stw	r4,-4(fp)
  INT8U err;
  int id;

  /* use our priority as a task id */

  err = OSTaskQuery( OS_PRIO_SELF, &tcb );
   10ca4:	e0bfe204 	addi	r2,fp,-120
   10ca8:	01003fc4 	movi	r4,255
   10cac:	100b883a 	mov	r5,r2
   10cb0:	001852c0 	call	1852c <OSTaskQuery>
   10cb4:	e0bffe85 	stb	r2,-6(fp)
  if (err != OS_NO_ERR)
   10cb8:	e0bffe83 	ldbu	r2,-6(fp)
   10cbc:	10803fcc 	andi	r2,r2,255
   10cc0:	10000126 	beq	r2,zero,10cc8 <__env_lock+0x38>
    return;
   10cc4:	00001d06 	br	10d3c <__env_lock+0xac>

  id = tcb.OSTCBPrio;
   10cc8:	e0bfee83 	ldbu	r2,-70(fp)
   10ccc:	10803fcc 	andi	r2,r2,255
   10cd0:	e0bfe115 	stw	r2,-124(fp)
   
  /* see if we own the environment already */

  OSSemQuery( alt_envsem, &semdata );
   10cd4:	d0e7f917 	ldw	r3,-24604(gp)
   10cd8:	e0bffd04 	addi	r2,fp,-12
   10cdc:	1809883a 	mov	r4,r3
   10ce0:	100b883a 	mov	r5,r2
   10ce4:	0016bc40 	call	16bc4 <OSSemQuery>
  if( semdata.OSEventGrp && id == lockid ) 
   10ce8:	e0bffe43 	ldbu	r2,-7(fp)
   10cec:	10803fcc 	andi	r2,r2,255
   10cf0:	10000726 	beq	r2,zero,10d10 <__env_lock+0x80>
   10cf4:	d0a00d17 	ldw	r2,-32716(gp)
   10cf8:	e0ffe117 	ldw	r3,-124(fp)
   10cfc:	1880041e 	bne	r3,r2,10d10 <__env_lock+0x80>
  {
    /* we do; just count the recursion */

    locks++;
   10d00:	d0a7f817 	ldw	r2,-24608(gp)
   10d04:	10800044 	addi	r2,r2,1
   10d08:	d0a7f815 	stw	r2,-24608(gp)
   10d0c:	00000a06 	br	10d38 <__env_lock+0xa8>
  }
  else 
  {
    /* wait on the other task to yield, then claim ownership */

    OSSemPend( alt_envsem, 0, &err );
   10d10:	d0e7f917 	ldw	r3,-24604(gp)
   10d14:	e0bffe84 	addi	r2,fp,-6
   10d18:	1809883a 	mov	r4,r3
   10d1c:	000b883a 	mov	r5,zero
   10d20:	100d883a 	mov	r6,r2
   10d24:	00166e00 	call	166e0 <OSSemPend>
    locks  = 1;
   10d28:	00800044 	movi	r2,1
   10d2c:	d0a7f815 	stw	r2,-24608(gp)
    lockid = id;
   10d30:	e0bfe117 	ldw	r2,-124(fp)
   10d34:	d0a00d15 	stw	r2,-32716(gp)
  }

#endif /* OS_THREAD_SAFE_NEWLIB */
  return;
   10d38:	0001883a 	nop
}
   10d3c:	e037883a 	mov	sp,fp
   10d40:	dfc00117 	ldw	ra,4(sp)
   10d44:	df000017 	ldw	fp,0(sp)
   10d48:	dec00204 	addi	sp,sp,8
   10d4c:	f800283a 	ret

00010d50 <__env_unlock>:
/*
 *
 */

void __env_unlock ( struct _reent *_r )
{
   10d50:	defffd04 	addi	sp,sp,-12
   10d54:	dfc00215 	stw	ra,8(sp)
   10d58:	df000115 	stw	fp,4(sp)
   10d5c:	df000104 	addi	fp,sp,4
   10d60:	e13fff15 	stw	r4,-4(fp)
#if OS_THREAD_SAFE_NEWLIB
  if (locks == 0)
   10d64:	d0a7f817 	ldw	r2,-24608(gp)
   10d68:	1000011e 	bne	r2,zero,10d70 <__env_unlock+0x20>
    return;
   10d6c:	00000a06 	br	10d98 <__env_unlock+0x48>
   /* 
    * release the environment once the number of locks == the number 
    * of unlocks 
    */

  if( (--locks) == 0 ) 
   10d70:	d0a7f817 	ldw	r2,-24608(gp)
   10d74:	10bfffc4 	addi	r2,r2,-1
   10d78:	d0a7f815 	stw	r2,-24608(gp)
   10d7c:	d0a7f817 	ldw	r2,-24608(gp)
   10d80:	1000051e 	bne	r2,zero,10d98 <__env_unlock+0x48>
  {
    lockid = -1;
   10d84:	00bfffc4 	movi	r2,-1
   10d88:	d0a00d15 	stw	r2,-32716(gp)
    OSSemPost( alt_envsem );
   10d8c:	d0a7f917 	ldw	r2,-24604(gp)
   10d90:	1009883a 	mov	r4,r2
   10d94:	0016ab40 	call	16ab4 <OSSemPost>
  }
#endif /* OS_THREAD_SAFE_NEWLIB */
}
   10d98:	e037883a 	mov	sp,fp
   10d9c:	dfc00117 	ldw	ra,4(sp)
   10da0:	df000017 	ldw	fp,0(sp)
   10da4:	dec00204 	addi	sp,sp,8
   10da8:	f800283a 	ret

00010dac <__malloc_lock>:
/*
 *
 */

void __malloc_lock ( struct _reent *_r )
{
   10dac:	deffdb04 	addi	sp,sp,-148
   10db0:	dfc02415 	stw	ra,144(sp)
   10db4:	df002315 	stw	fp,140(sp)
   10db8:	df002304 	addi	fp,sp,140
   10dbc:	e13fff15 	stw	r4,-4(fp)
  OS_TCB tcb;
  OS_SEM_DATA semdata;
  INT8U err;
  int id;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   10dc0:	e03fdd15 	stw	zero,-140(fp)
#endif  
  
  if (OSRunning != OS_TRUE)
   10dc4:	008000b4 	movhi	r2,2
   10dc8:	10948144 	addi	r2,r2,20997
   10dcc:	10800003 	ldbu	r2,0(r2)
   10dd0:	10803fcc 	andi	r2,r2,255
   10dd4:	10800060 	cmpeqi	r2,r2,1
   10dd8:	1000011e 	bne	r2,zero,10de0 <__malloc_lock+0x34>
      return;
   10ddc:	00003606 	br	10eb8 <__malloc_lock+0x10c>

  /* use our priority as a task id */

  err = OSTaskQuery( OS_PRIO_SELF, &tcb );
   10de0:	e0bfe204 	addi	r2,fp,-120
   10de4:	01003fc4 	movi	r4,255
   10de8:	100b883a 	mov	r5,r2
   10dec:	001852c0 	call	1852c <OSTaskQuery>
   10df0:	e0bffe85 	stb	r2,-6(fp)
  if (err != OS_NO_ERR)
   10df4:	e0bffe83 	ldbu	r2,-6(fp)
   10df8:	10803fcc 	andi	r2,r2,255
   10dfc:	10000126 	beq	r2,zero,10e04 <__malloc_lock+0x58>
    return;
   10e00:	00002d06 	br	10eb8 <__malloc_lock+0x10c>

  id = tcb.OSTCBPrio;
   10e04:	e0bfee83 	ldbu	r2,-70(fp)
   10e08:	10803fcc 	andi	r2,r2,255
   10e0c:	e0bfde15 	stw	r2,-136(fp)
   
  /* see if we own the heap already */

  OSSemQuery( alt_heapsem, &semdata );
   10e10:	d0e7fb17 	ldw	r3,-24596(gp)
   10e14:	e0bffd04 	addi	r2,fp,-12
   10e18:	1809883a 	mov	r4,r3
   10e1c:	100b883a 	mov	r5,r2
   10e20:	0016bc40 	call	16bc4 <OSSemQuery>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   10e24:	0005303a 	rdctl	r2,status
   10e28:	e0bfdf15 	stw	r2,-132(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   10e2c:	e0ffdf17 	ldw	r3,-132(fp)
   10e30:	00bfff84 	movi	r2,-2
   10e34:	1884703a 	and	r2,r3,r2
   10e38:	1001703a 	wrctl	status,r2
  
  return context;
   10e3c:	e0bfdf17 	ldw	r2,-132(fp)
  
  OS_ENTER_CRITICAL();
   10e40:	e0bfdd15 	stw	r2,-140(fp)

  if( !semdata.OSCnt && id == lockid ) 
   10e44:	e0bffd0b 	ldhu	r2,-12(fp)
   10e48:	10bfffcc 	andi	r2,r2,65535
   10e4c:	10000b1e 	bne	r2,zero,10e7c <__malloc_lock+0xd0>
   10e50:	d0a00e17 	ldw	r2,-32712(gp)
   10e54:	e0ffde17 	ldw	r3,-136(fp)
   10e58:	1880081e 	bne	r3,r2,10e7c <__malloc_lock+0xd0>
  {
    /* we do; just count the recursion */
    locks++;
   10e5c:	d0a7fa17 	ldw	r2,-24600(gp)
   10e60:	10800044 	addi	r2,r2,1
   10e64:	d0a7fa15 	stw	r2,-24600(gp)
   10e68:	e0bfdd17 	ldw	r2,-140(fp)
   10e6c:	e0bfe015 	stw	r2,-128(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   10e70:	e0bfe017 	ldw	r2,-128(fp)
   10e74:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
   10e78:	00000e06 	br	10eb4 <__malloc_lock+0x108>
   10e7c:	e0bfdd17 	ldw	r2,-140(fp)
   10e80:	e0bfe115 	stw	r2,-124(fp)
   10e84:	e0bfe117 	ldw	r2,-124(fp)
   10e88:	1001703a 	wrctl	status,r2
  else 
  {
    /* wait on the other task to yield the heap, then claim ownership of it */
    OS_EXIT_CRITICAL();

    OSSemPend( alt_heapsem, 0, &err );
   10e8c:	d0e7fb17 	ldw	r3,-24596(gp)
   10e90:	e0bffe84 	addi	r2,fp,-6
   10e94:	1809883a 	mov	r4,r3
   10e98:	000b883a 	mov	r5,zero
   10e9c:	100d883a 	mov	r6,r2
   10ea0:	00166e00 	call	166e0 <OSSemPend>
    locks  = 1;
   10ea4:	00800044 	movi	r2,1
   10ea8:	d0a7fa15 	stw	r2,-24600(gp)
    lockid = id;
   10eac:	e0bfde17 	ldw	r2,-136(fp)
   10eb0:	d0a00e15 	stw	r2,-32712(gp)
  }

#endif /* OS_THREAD_SAFE_NEWLIB */
  return;
   10eb4:	0001883a 	nop
}
   10eb8:	e037883a 	mov	sp,fp
   10ebc:	dfc00117 	ldw	ra,4(sp)
   10ec0:	df000017 	ldw	fp,0(sp)
   10ec4:	dec00204 	addi	sp,sp,8
   10ec8:	f800283a 	ret

00010ecc <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
   10ecc:	defff804 	addi	sp,sp,-32
   10ed0:	dfc00715 	stw	ra,28(sp)
   10ed4:	df000615 	stw	fp,24(sp)
   10ed8:	df000604 	addi	fp,sp,24
   10edc:	e13fff15 	stw	r4,-4(fp)
#if OS_THREAD_SAFE_NEWLIB

#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   10ee0:	e03ffa15 	stw	zero,-24(fp)
#endif 

  if (OSRunning != OS_TRUE)
   10ee4:	008000b4 	movhi	r2,2
   10ee8:	10948144 	addi	r2,r2,20997
   10eec:	10800003 	ldbu	r2,0(r2)
   10ef0:	10803fcc 	andi	r2,r2,255
   10ef4:	10800060 	cmpeqi	r2,r2,1
   10ef8:	1000011e 	bne	r2,zero,10f00 <__malloc_unlock+0x34>
      return;
   10efc:	00002206 	br	10f88 <__malloc_unlock+0xbc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   10f00:	0005303a 	rdctl	r2,status
   10f04:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   10f08:	e0fffb17 	ldw	r3,-20(fp)
   10f0c:	00bfff84 	movi	r2,-2
   10f10:	1884703a 	and	r2,r3,r2
   10f14:	1001703a 	wrctl	status,r2
  
  return context;
   10f18:	e0bffb17 	ldw	r2,-20(fp)

  OS_ENTER_CRITICAL();
   10f1c:	e0bffa15 	stw	r2,-24(fp)
  if (locks == 0)
   10f20:	d0a7fa17 	ldw	r2,-24600(gp)
   10f24:	1000051e 	bne	r2,zero,10f3c <__malloc_unlock+0x70>
   10f28:	e0bffa17 	ldw	r2,-24(fp)
   10f2c:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   10f30:	e0bffc17 	ldw	r2,-16(fp)
   10f34:	1001703a 	wrctl	status,r2
  {
      OS_EXIT_CRITICAL();
      return;
   10f38:	00001306 	br	10f88 <__malloc_unlock+0xbc>
  }

  /* release the heap once the number of locks == the number of unlocks */
  if( (--locks) == 0 ) 
   10f3c:	d0a7fa17 	ldw	r2,-24600(gp)
   10f40:	10bfffc4 	addi	r2,r2,-1
   10f44:	d0a7fa15 	stw	r2,-24600(gp)
   10f48:	d0a7fa17 	ldw	r2,-24600(gp)
   10f4c:	10000a1e 	bne	r2,zero,10f78 <__malloc_unlock+0xac>
  {
    lockid = -1;
   10f50:	00bfffc4 	movi	r2,-1
   10f54:	d0a00e15 	stw	r2,-32712(gp)
   10f58:	e0bffa17 	ldw	r2,-24(fp)
   10f5c:	e0bffd15 	stw	r2,-12(fp)
   10f60:	e0bffd17 	ldw	r2,-12(fp)
   10f64:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    OSSemPost( alt_heapsem );
   10f68:	d0a7fb17 	ldw	r2,-24596(gp)
   10f6c:	1009883a 	mov	r4,r2
   10f70:	0016ab40 	call	16ab4 <OSSemPost>
   10f74:	00000406 	br	10f88 <__malloc_unlock+0xbc>
   10f78:	e0bffa17 	ldw	r2,-24(fp)
   10f7c:	e0bffe15 	stw	r2,-8(fp)
   10f80:	e0bffe17 	ldw	r2,-8(fp)
   10f84:	1001703a 	wrctl	status,r2
  {
      OS_EXIT_CRITICAL();
  }
  
#endif /* OS_THREAD_SAFE_NEWLIB */
}
   10f88:	e037883a 	mov	sp,fp
   10f8c:	dfc00117 	ldw	ra,4(sp)
   10f90:	df000017 	ldw	fp,0(sp)
   10f94:	dec00204 	addi	sp,sp,8
   10f98:	f800283a 	ret

00010f9c <OSEventNameGet>:
*********************************************************************************************************
*/

#if (OS_EVENT_EN) && (OS_EVENT_NAME_SIZE > 1)
INT8U  OSEventNameGet (OS_EVENT *pevent, INT8U *pname, INT8U *perr)
{
   10f9c:	defff704 	addi	sp,sp,-36
   10fa0:	dfc00815 	stw	ra,32(sp)
   10fa4:	df000715 	stw	fp,28(sp)
   10fa8:	df000704 	addi	fp,sp,28
   10fac:	e13ffd15 	stw	r4,-12(fp)
   10fb0:	e17ffe15 	stw	r5,-8(fp)
   10fb4:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   10fb8:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
   10fbc:	e0bfff17 	ldw	r2,-4(fp)
   10fc0:	1000021e 	bne	r2,zero,10fcc <OSEventNameGet+0x30>
        return (0);
   10fc4:	0005883a 	mov	r2,zero
   10fc8:	00003706 	br	110a8 <OSEventNameGet+0x10c>
    }
    if (pevent == (OS_EVENT *)0) {               /* Is 'pevent' a NULL pointer?                        */
   10fcc:	e0bffd17 	ldw	r2,-12(fp)
   10fd0:	1000051e 	bne	r2,zero,10fe8 <OSEventNameGet+0x4c>
        *perr = OS_ERR_PEVENT_NULL;
   10fd4:	e0bfff17 	ldw	r2,-4(fp)
   10fd8:	00c00104 	movi	r3,4
   10fdc:	10c00005 	stb	r3,0(r2)
        return (0);
   10fe0:	0005883a 	mov	r2,zero
   10fe4:	00003006 	br	110a8 <OSEventNameGet+0x10c>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
   10fe8:	e0bffe17 	ldw	r2,-8(fp)
   10fec:	1000051e 	bne	r2,zero,11004 <OSEventNameGet+0x68>
        *perr = OS_ERR_PNAME_NULL;
   10ff0:	e0bfff17 	ldw	r2,-4(fp)
   10ff4:	00c00304 	movi	r3,12
   10ff8:	10c00005 	stb	r3,0(r2)
        return (0);
   10ffc:	0005883a 	mov	r2,zero
   11000:	00002906 	br	110a8 <OSEventNameGet+0x10c>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
   11004:	d0a80a03 	ldbu	r2,-24536(gp)
   11008:	10803fcc 	andi	r2,r2,255
   1100c:	10000526 	beq	r2,zero,11024 <OSEventNameGet+0x88>
        *perr  = OS_ERR_NAME_GET_ISR;
   11010:	e0bfff17 	ldw	r2,-4(fp)
   11014:	00c00444 	movi	r3,17
   11018:	10c00005 	stb	r3,0(r2)
        return (0);
   1101c:	0005883a 	mov	r2,zero
   11020:	00002106 	br	110a8 <OSEventNameGet+0x10c>
    }
    switch (pevent->OSEventType) {
   11024:	e0bffd17 	ldw	r2,-12(fp)
   11028:	10800003 	ldbu	r2,0(r2)
   1102c:	10803fcc 	andi	r2,r2,255
   11030:	10bfffc4 	addi	r2,r2,-1
   11034:	10800128 	cmpgeui	r2,r2,4
   11038:	10000526 	beq	r2,zero,11050 <OSEventNameGet+0xb4>
        case OS_EVENT_TYPE_MBOX:
        case OS_EVENT_TYPE_Q:
             break;

        default:
             *perr = OS_ERR_EVENT_TYPE;
   1103c:	e0bfff17 	ldw	r2,-4(fp)
   11040:	00c00044 	movi	r3,1
   11044:	10c00005 	stb	r3,0(r2)
             return (0);
   11048:	0005883a 	mov	r2,zero
   1104c:	00001606 	br	110a8 <OSEventNameGet+0x10c>
    switch (pevent->OSEventType) {
        case OS_EVENT_TYPE_SEM:
        case OS_EVENT_TYPE_MUTEX:
        case OS_EVENT_TYPE_MBOX:
        case OS_EVENT_TYPE_Q:
             break;
   11050:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   11054:	0005303a 	rdctl	r2,status
   11058:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1105c:	e0fffb17 	ldw	r3,-20(fp)
   11060:	00bfff84 	movi	r2,-2
   11064:	1884703a 	and	r2,r3,r2
   11068:	1001703a 	wrctl	status,r2
  
  return context;
   1106c:	e0bffb17 	ldw	r2,-20(fp)

        default:
             *perr = OS_ERR_EVENT_TYPE;
             return (0);
    }
    OS_ENTER_CRITICAL();
   11070:	e0bff915 	stw	r2,-28(fp)
    len   = OS_StrCopy(pname, pevent->OSEventName);   /* Copy name from OS_EVENT                       */
   11074:	e0bffd17 	ldw	r2,-12(fp)
   11078:	10800384 	addi	r2,r2,14
   1107c:	e13ffe17 	ldw	r4,-8(fp)
   11080:	100b883a 	mov	r5,r2
   11084:	00129f00 	call	129f0 <OS_StrCopy>
   11088:	e0bffa05 	stb	r2,-24(fp)
   1108c:	e0bff917 	ldw	r2,-28(fp)
   11090:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   11094:	e0bffc17 	ldw	r2,-16(fp)
   11098:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
   1109c:	e0bfff17 	ldw	r2,-4(fp)
   110a0:	10000005 	stb	zero,0(r2)
    return (len);
   110a4:	e0bffa03 	ldbu	r2,-24(fp)
}
   110a8:	e037883a 	mov	sp,fp
   110ac:	dfc00117 	ldw	ra,4(sp)
   110b0:	df000017 	ldw	fp,0(sp)
   110b4:	dec00204 	addi	sp,sp,8
   110b8:	f800283a 	ret

000110bc <OSEventNameSet>:
*********************************************************************************************************
*/

#if (OS_EVENT_EN) && (OS_EVENT_NAME_SIZE > 1)
void  OSEventNameSet (OS_EVENT *pevent, INT8U *pname, INT8U *perr)
{
   110bc:	defff604 	addi	sp,sp,-40
   110c0:	dfc00915 	stw	ra,36(sp)
   110c4:	df000815 	stw	fp,32(sp)
   110c8:	df000804 	addi	fp,sp,32
   110cc:	e13ffd15 	stw	r4,-12(fp)
   110d0:	e17ffe15 	stw	r5,-8(fp)
   110d4:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   110d8:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
   110dc:	e0bfff17 	ldw	r2,-4(fp)
   110e0:	1000011e 	bne	r2,zero,110e8 <OSEventNameSet+0x2c>
        return;
   110e4:	00003f06 	br	111e4 <OSEventNameSet+0x128>
    }
    if (pevent == (OS_EVENT *)0) {               /* Is 'pevent' a NULL pointer?                        */
   110e8:	e0bffd17 	ldw	r2,-12(fp)
   110ec:	1000041e 	bne	r2,zero,11100 <OSEventNameSet+0x44>
        *perr = OS_ERR_PEVENT_NULL;
   110f0:	e0bfff17 	ldw	r2,-4(fp)
   110f4:	00c00104 	movi	r3,4
   110f8:	10c00005 	stb	r3,0(r2)
        return;
   110fc:	00003906 	br	111e4 <OSEventNameSet+0x128>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
   11100:	e0bffe17 	ldw	r2,-8(fp)
   11104:	1000041e 	bne	r2,zero,11118 <OSEventNameSet+0x5c>
        *perr = OS_ERR_PNAME_NULL;
   11108:	e0bfff17 	ldw	r2,-4(fp)
   1110c:	00c00304 	movi	r3,12
   11110:	10c00005 	stb	r3,0(r2)
        return;
   11114:	00003306 	br	111e4 <OSEventNameSet+0x128>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
   11118:	d0a80a03 	ldbu	r2,-24536(gp)
   1111c:	10803fcc 	andi	r2,r2,255
   11120:	10000426 	beq	r2,zero,11134 <OSEventNameSet+0x78>
        *perr = OS_ERR_NAME_SET_ISR;
   11124:	e0bfff17 	ldw	r2,-4(fp)
   11128:	00c00484 	movi	r3,18
   1112c:	10c00005 	stb	r3,0(r2)
        return;
   11130:	00002c06 	br	111e4 <OSEventNameSet+0x128>
    }
    switch (pevent->OSEventType) {
   11134:	e0bffd17 	ldw	r2,-12(fp)
   11138:	10800003 	ldbu	r2,0(r2)
   1113c:	10803fcc 	andi	r2,r2,255
   11140:	10bfffc4 	addi	r2,r2,-1
   11144:	10800128 	cmpgeui	r2,r2,4
   11148:	10000426 	beq	r2,zero,1115c <OSEventNameSet+0xa0>
        case OS_EVENT_TYPE_MBOX:
        case OS_EVENT_TYPE_Q:
             break;

        default:
             *perr = OS_ERR_EVENT_TYPE;
   1114c:	e0bfff17 	ldw	r2,-4(fp)
   11150:	00c00044 	movi	r3,1
   11154:	10c00005 	stb	r3,0(r2)
             return;
   11158:	00002206 	br	111e4 <OSEventNameSet+0x128>
    switch (pevent->OSEventType) {
        case OS_EVENT_TYPE_SEM:
        case OS_EVENT_TYPE_MUTEX:
        case OS_EVENT_TYPE_MBOX:
        case OS_EVENT_TYPE_Q:
             break;
   1115c:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   11160:	0005303a 	rdctl	r2,status
   11164:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   11168:	e0fffa17 	ldw	r3,-24(fp)
   1116c:	00bfff84 	movi	r2,-2
   11170:	1884703a 	and	r2,r3,r2
   11174:	1001703a 	wrctl	status,r2
  
  return context;
   11178:	e0bffa17 	ldw	r2,-24(fp)

        default:
             *perr = OS_ERR_EVENT_TYPE;
             return;
    }
    OS_ENTER_CRITICAL();
   1117c:	e0bff815 	stw	r2,-32(fp)
    len = OS_StrLen(pname);                           /* Can we fit the string in the storage area?    */
   11180:	e13ffe17 	ldw	r4,-8(fp)
   11184:	0012a640 	call	12a64 <OS_StrLen>
   11188:	e0bff905 	stb	r2,-28(fp)
    if (len > (OS_EVENT_NAME_SIZE - 1)) {             /* No                                            */
   1118c:	e0bff903 	ldbu	r2,-28(fp)
   11190:	10800830 	cmpltui	r2,r2,32
   11194:	1000081e 	bne	r2,zero,111b8 <OSEventNameSet+0xfc>
   11198:	e0bff817 	ldw	r2,-32(fp)
   1119c:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   111a0:	e0bffb17 	ldw	r2,-20(fp)
   111a4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_EVENT_NAME_TOO_LONG;
   111a8:	e0bfff17 	ldw	r2,-4(fp)
   111ac:	00c002c4 	movi	r3,11
   111b0:	10c00005 	stb	r3,0(r2)
        return;
   111b4:	00000b06 	br	111e4 <OSEventNameSet+0x128>
    }
    (void)OS_StrCopy(pevent->OSEventName, pname);     /* Yes, copy name to the event control block     */
   111b8:	e0bffd17 	ldw	r2,-12(fp)
   111bc:	10800384 	addi	r2,r2,14
   111c0:	1009883a 	mov	r4,r2
   111c4:	e17ffe17 	ldw	r5,-8(fp)
   111c8:	00129f00 	call	129f0 <OS_StrCopy>
   111cc:	e0bff817 	ldw	r2,-32(fp)
   111d0:	e0bffc15 	stw	r2,-16(fp)
   111d4:	e0bffc17 	ldw	r2,-16(fp)
   111d8:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
   111dc:	e0bfff17 	ldw	r2,-4(fp)
   111e0:	10000005 	stb	zero,0(r2)
}
   111e4:	e037883a 	mov	sp,fp
   111e8:	dfc00117 	ldw	ra,4(sp)
   111ec:	df000017 	ldw	fp,0(sp)
   111f0:	dec00204 	addi	sp,sp,8
   111f4:	f800283a 	ret

000111f8 <OSEventPendMulti>:
*********************************************************************************************************
*/
/*$PAGE*/
#if ((OS_EVENT_EN) && (OS_EVENT_MULTI_EN > 0))
INT16U  OSEventPendMulti (OS_EVENT **pevents_pend, OS_EVENT **pevents_rdy, void **pmsgs_rdy, INT16U timeout, INT8U *perr)
{
   111f8:	deffed04 	addi	sp,sp,-76
   111fc:	dfc01215 	stw	ra,72(sp)
   11200:	df001115 	stw	fp,68(sp)
   11204:	df001104 	addi	fp,sp,68
   11208:	e13ffc15 	stw	r4,-16(fp)
   1120c:	e17ffd15 	stw	r5,-12(fp)
   11210:	e1bffe15 	stw	r6,-8(fp)
   11214:	3805883a 	mov	r2,r7
   11218:	e0bfff0d 	sth	r2,-4(fp)
#endif
    BOOLEAN     events_rdy;
    INT16U      events_rdy_nbr;
    INT8U       events_stat;
#if (OS_CRITICAL_METHOD == 3)                           /* Allocate storage for CPU status register    */
    OS_CPU_SR   cpu_sr = 0;
   1121c:	e03ff315 	stw	zero,-52(fp)
#endif



#if (OS_ARG_CHK_EN > 0)
    if (perr == (INT8U *)0) {                           /* Validate 'perr'                             */
   11220:	e0800217 	ldw	r2,8(fp)
   11224:	1000021e 	bne	r2,zero,11230 <OSEventPendMulti+0x38>
        return (0);
   11228:	0005883a 	mov	r2,zero
   1122c:	00017106 	br	117f4 <OSEventPendMulti+0x5fc>
    }
    if (pevents_pend == (OS_EVENT **)0) {               /* Validate 'pevents_pend'                     */
   11230:	e0bffc17 	ldw	r2,-16(fp)
   11234:	1000051e 	bne	r2,zero,1124c <OSEventPendMulti+0x54>
       *perr =  OS_ERR_PEVENT_NULL;
   11238:	e0800217 	ldw	r2,8(fp)
   1123c:	00c00104 	movi	r3,4
   11240:	10c00005 	stb	r3,0(r2)
        return (0);
   11244:	0005883a 	mov	r2,zero
   11248:	00016a06 	br	117f4 <OSEventPendMulti+0x5fc>
    }
    if (pevents_rdy  == (OS_EVENT **)0) {               /* Validate 'pevents_rdy'                      */
   1124c:	e0bffd17 	ldw	r2,-12(fp)
   11250:	1000051e 	bne	r2,zero,11268 <OSEventPendMulti+0x70>
       *perr =  OS_ERR_PEVENT_NULL;
   11254:	e0800217 	ldw	r2,8(fp)
   11258:	00c00104 	movi	r3,4
   1125c:	10c00005 	stb	r3,0(r2)
        return (0);
   11260:	0005883a 	mov	r2,zero
   11264:	00016306 	br	117f4 <OSEventPendMulti+0x5fc>
    }
    if (pmsgs_rdy == (void **)0) {                      /* Validate 'pmsgs_rdy'                        */
   11268:	e0bffe17 	ldw	r2,-8(fp)
   1126c:	1000051e 	bne	r2,zero,11284 <OSEventPendMulti+0x8c>
       *perr =  OS_ERR_PEVENT_NULL;
   11270:	e0800217 	ldw	r2,8(fp)
   11274:	00c00104 	movi	r3,4
   11278:	10c00005 	stb	r3,0(r2)
        return (0);
   1127c:	0005883a 	mov	r2,zero
   11280:	00015c06 	br	117f4 <OSEventPendMulti+0x5fc>
    }
#endif

   *pevents_rdy = (OS_EVENT *)0;                        /* Init array to NULL in case of errors        */
   11284:	e0bffd17 	ldw	r2,-12(fp)
   11288:	10000015 	stw	zero,0(r2)

    pevents     =  pevents_pend;
   1128c:	e0bffc17 	ldw	r2,-16(fp)
   11290:	e0bfef15 	stw	r2,-68(fp)
    pevent      = *pevents;
   11294:	e0bfef17 	ldw	r2,-68(fp)
   11298:	10800017 	ldw	r2,0(r2)
   1129c:	e0bff015 	stw	r2,-64(fp)
    while  (pevent != (OS_EVENT *)0) {
   112a0:	00001906 	br	11308 <OSEventPendMulti+0x110>
        switch (pevent->OSEventType) {                  /* Validate event block types                  */
   112a4:	e0bff017 	ldw	r2,-64(fp)
   112a8:	10800003 	ldbu	r2,0(r2)
   112ac:	10803fcc 	andi	r2,r2,255
   112b0:	10c000a0 	cmpeqi	r3,r2,2
   112b4:	1800091e 	bne	r3,zero,112dc <OSEventPendMulti+0xe4>
   112b8:	10c000e0 	cmpeqi	r3,r2,3
   112bc:	1800091e 	bne	r3,zero,112e4 <OSEventPendMulti+0xec>
   112c0:	10800060 	cmpeqi	r2,r2,1
   112c4:	1000091e 	bne	r2,zero,112ec <OSEventPendMulti+0xf4>
#endif

            case OS_EVENT_TYPE_MUTEX:                                            
            case OS_EVENT_TYPE_FLAG:
            default:           
                *perr = OS_ERR_EVENT_TYPE;
   112c8:	e0800217 	ldw	r2,8(fp)
   112cc:	00c00044 	movi	r3,1
   112d0:	10c00005 	stb	r3,0(r2)
                 return (0);
   112d4:	0005883a 	mov	r2,zero
   112d8:	00014606 	br	117f4 <OSEventPendMulti+0x5fc>
            case OS_EVENT_TYPE_MBOX:
                 break;
#endif
#if ((OS_Q_EN   > 0) && (OS_MAX_QS > 0))
            case OS_EVENT_TYPE_Q:
                 break;
   112dc:	0001883a 	nop
   112e0:	00000306 	br	112f0 <OSEventPendMulti+0xf8>
    pevent      = *pevents;
    while  (pevent != (OS_EVENT *)0) {
        switch (pevent->OSEventType) {                  /* Validate event block types                  */
#if (OS_SEM_EN  > 0)
            case OS_EVENT_TYPE_SEM:
                 break;
   112e4:	0001883a 	nop
   112e8:	00000106 	br	112f0 <OSEventPendMulti+0xf8>
#endif
#if (OS_MBOX_EN > 0)
            case OS_EVENT_TYPE_MBOX:
                 break;
   112ec:	0001883a 	nop
            case OS_EVENT_TYPE_FLAG:
            default:           
                *perr = OS_ERR_EVENT_TYPE;
                 return (0);
        }
        pevents++;
   112f0:	e0bfef17 	ldw	r2,-68(fp)
   112f4:	10800104 	addi	r2,r2,4
   112f8:	e0bfef15 	stw	r2,-68(fp)
        pevent = *pevents;
   112fc:	e0bfef17 	ldw	r2,-68(fp)
   11300:	10800017 	ldw	r2,0(r2)
   11304:	e0bff015 	stw	r2,-64(fp)

   *pevents_rdy = (OS_EVENT *)0;                        /* Init array to NULL in case of errors        */

    pevents     =  pevents_pend;
    pevent      = *pevents;
    while  (pevent != (OS_EVENT *)0) {
   11308:	e0bff017 	ldw	r2,-64(fp)
   1130c:	103fe51e 	bne	r2,zero,112a4 <__alt_mem_Flash_flash_data+0xf40112a4>
        }
        pevents++;
        pevent = *pevents;
    }

    if (OSIntNesting  > 0) {                            /* See if called from ISR ...                  */
   11310:	d0a80a03 	ldbu	r2,-24536(gp)
   11314:	10803fcc 	andi	r2,r2,255
   11318:	10000526 	beq	r2,zero,11330 <OSEventPendMulti+0x138>
       *perr =  OS_ERR_PEND_ISR;                        /* ... can't PEND from an ISR                  */
   1131c:	e0800217 	ldw	r2,8(fp)
   11320:	00c00084 	movi	r3,2
   11324:	10c00005 	stb	r3,0(r2)
        return (0);
   11328:	0005883a 	mov	r2,zero
   1132c:	00013106 	br	117f4 <OSEventPendMulti+0x5fc>
    }
    if (OSLockNesting > 0) {                            /* See if called with scheduler locked ...     */
   11330:	d0a7fc03 	ldbu	r2,-24592(gp)
   11334:	10803fcc 	andi	r2,r2,255
   11338:	10000526 	beq	r2,zero,11350 <OSEventPendMulti+0x158>
       *perr =  OS_ERR_PEND_LOCKED;                     /* ... can't PEND when locked                  */
   1133c:	e0800217 	ldw	r2,8(fp)
   11340:	00c00344 	movi	r3,13
   11344:	10c00005 	stb	r3,0(r2)
        return (0);
   11348:	0005883a 	mov	r2,zero
   1134c:	00012906 	br	117f4 <OSEventPendMulti+0x5fc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   11350:	0005303a 	rdctl	r2,status
   11354:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   11358:	e0fff517 	ldw	r3,-44(fp)
   1135c:	00bfff84 	movi	r2,-2
   11360:	1884703a 	and	r2,r3,r2
   11364:	1001703a 	wrctl	status,r2
  
  return context;
   11368:	e0bff517 	ldw	r2,-44(fp)
    }

/*$PAGE*/
    OS_ENTER_CRITICAL();
   1136c:	e0bff315 	stw	r2,-52(fp)
    events_rdy     =  OS_FALSE;
   11370:	e03ff105 	stb	zero,-60(fp)
    events_rdy_nbr =  0;
   11374:	e03ff18d 	sth	zero,-58(fp)
    events_stat    =  OS_STAT_RDY;
   11378:	e03ff205 	stb	zero,-56(fp)
    pevents        =  pevents_pend;
   1137c:	e0bffc17 	ldw	r2,-16(fp)
   11380:	e0bfef15 	stw	r2,-68(fp)
    pevent         = *pevents;
   11384:	e0bfef17 	ldw	r2,-68(fp)
   11388:	10800017 	ldw	r2,0(r2)
   1138c:	e0bff015 	stw	r2,-64(fp)
    while (pevent != (OS_EVENT *)0) {                   /* See if any events already available         */
   11390:	00008106 	br	11598 <OSEventPendMulti+0x3a0>
        switch (pevent->OSEventType) {
   11394:	e0bff017 	ldw	r2,-64(fp)
   11398:	10800003 	ldbu	r2,0(r2)
   1139c:	10803fcc 	andi	r2,r2,255
   113a0:	10c000a0 	cmpeqi	r3,r2,2
   113a4:	18003c1e 	bne	r3,zero,11498 <OSEventPendMulti+0x2a0>
   113a8:	10c000e0 	cmpeqi	r3,r2,3
   113ac:	1800031e 	bne	r3,zero,113bc <OSEventPendMulti+0x1c4>
   113b0:	10800060 	cmpeqi	r2,r2,1
   113b4:	10001e1e 	bne	r2,zero,11430 <OSEventPendMulti+0x238>
   113b8:	00006606 	br	11554 <OSEventPendMulti+0x35c>
#if (OS_SEM_EN > 0)
            case OS_EVENT_TYPE_SEM:
                 if (pevent->OSEventCnt > 0) {          /* If semaphore count > 0, resource available; */
   113bc:	e0bff017 	ldw	r2,-64(fp)
   113c0:	1080020b 	ldhu	r2,8(r2)
   113c4:	10bfffcc 	andi	r2,r2,65535
   113c8:	10001526 	beq	r2,zero,11420 <OSEventPendMulti+0x228>
                     pevent->OSEventCnt--;              /* ... decrement semaphore,                ... */
   113cc:	e0bff017 	ldw	r2,-64(fp)
   113d0:	1080020b 	ldhu	r2,8(r2)
   113d4:	10bfffc4 	addi	r2,r2,-1
   113d8:	1007883a 	mov	r3,r2
   113dc:	e0bff017 	ldw	r2,-64(fp)
   113e0:	10c0020d 	sth	r3,8(r2)
                    *pevents_rdy++ =  pevent;           /* ... and return available semaphore event    */
   113e4:	e0bffd17 	ldw	r2,-12(fp)
   113e8:	10c00104 	addi	r3,r2,4
   113ec:	e0fffd15 	stw	r3,-12(fp)
   113f0:	e0fff017 	ldw	r3,-64(fp)
   113f4:	10c00015 	stw	r3,0(r2)
                      events_rdy   =  OS_TRUE;
   113f8:	00800044 	movi	r2,1
   113fc:	e0bff105 	stb	r2,-60(fp)
                    *pmsgs_rdy++   = (void *)0;         /* NO message returned  for semaphores         */
   11400:	e0bffe17 	ldw	r2,-8(fp)
   11404:	10c00104 	addi	r3,r2,4
   11408:	e0fffe15 	stw	r3,-8(fp)
   1140c:	10000015 	stw	zero,0(r2)
                      events_rdy_nbr++;
   11410:	e0bff18b 	ldhu	r2,-58(fp)
   11414:	10800044 	addi	r2,r2,1
   11418:	e0bff18d 	sth	r2,-58(fp)

                 } else {
                      events_stat |=  OS_STAT_SEM;      /* Configure multi-pend for semaphore events   */
                 }
                 break;
   1141c:	00005806 	br	11580 <OSEventPendMulti+0x388>
                      events_rdy   =  OS_TRUE;
                    *pmsgs_rdy++   = (void *)0;         /* NO message returned  for semaphores         */
                      events_rdy_nbr++;

                 } else {
                      events_stat |=  OS_STAT_SEM;      /* Configure multi-pend for semaphore events   */
   11420:	e0bff203 	ldbu	r2,-56(fp)
   11424:	10800054 	ori	r2,r2,1
   11428:	e0bff205 	stb	r2,-56(fp)
                 }
                 break;
   1142c:	00005406 	br	11580 <OSEventPendMulti+0x388>
#endif

#if (OS_MBOX_EN > 0)
            case OS_EVENT_TYPE_MBOX:
                 if (pevent->OSEventPtr != (void *)0) { /* If mailbox NOT empty;                   ... */
   11430:	e0bff017 	ldw	r2,-64(fp)
   11434:	10800117 	ldw	r2,4(r2)
   11438:	10001326 	beq	r2,zero,11488 <OSEventPendMulti+0x290>
                                                        /* ... return available message,           ... */
                    *pmsgs_rdy++         = (void *)pevent->OSEventPtr;
   1143c:	e0bffe17 	ldw	r2,-8(fp)
   11440:	10c00104 	addi	r3,r2,4
   11444:	e0fffe15 	stw	r3,-8(fp)
   11448:	e0fff017 	ldw	r3,-64(fp)
   1144c:	18c00117 	ldw	r3,4(r3)
   11450:	10c00015 	stw	r3,0(r2)
                     pevent->OSEventPtr  = (void *)0;
   11454:	e0bff017 	ldw	r2,-64(fp)
   11458:	10000115 	stw	zero,4(r2)
                    *pevents_rdy++       =  pevent;     /* ... and return available mailbox event      */
   1145c:	e0bffd17 	ldw	r2,-12(fp)
   11460:	10c00104 	addi	r3,r2,4
   11464:	e0fffd15 	stw	r3,-12(fp)
   11468:	e0fff017 	ldw	r3,-64(fp)
   1146c:	10c00015 	stw	r3,0(r2)
                      events_rdy         =  OS_TRUE;
   11470:	00800044 	movi	r2,1
   11474:	e0bff105 	stb	r2,-60(fp)
                      events_rdy_nbr++;
   11478:	e0bff18b 	ldhu	r2,-58(fp)
   1147c:	10800044 	addi	r2,r2,1
   11480:	e0bff18d 	sth	r2,-58(fp)

                 } else {
                      events_stat |= OS_STAT_MBOX;      /* Configure multi-pend for mailbox events     */
                 }
                 break;
   11484:	00003e06 	br	11580 <OSEventPendMulti+0x388>
                    *pevents_rdy++       =  pevent;     /* ... and return available mailbox event      */
                      events_rdy         =  OS_TRUE;
                      events_rdy_nbr++;

                 } else {
                      events_stat |= OS_STAT_MBOX;      /* Configure multi-pend for mailbox events     */
   11488:	e0bff203 	ldbu	r2,-56(fp)
   1148c:	10800094 	ori	r2,r2,2
   11490:	e0bff205 	stb	r2,-56(fp)
                 }
                 break;
   11494:	00003a06 	br	11580 <OSEventPendMulti+0x388>
#endif

#if ((OS_Q_EN > 0) && (OS_MAX_QS > 0))
            case OS_EVENT_TYPE_Q:
                 pq = (OS_Q *)pevent->OSEventPtr;
   11498:	e0bff017 	ldw	r2,-64(fp)
   1149c:	10800117 	ldw	r2,4(r2)
   114a0:	e0bff415 	stw	r2,-48(fp)
                 if (pq->OSQEntries > 0) {              /* If queue NOT empty;                     ... */
   114a4:	e0bff417 	ldw	r2,-48(fp)
   114a8:	1080058b 	ldhu	r2,22(r2)
   114ac:	10bfffcc 	andi	r2,r2,65535
   114b0:	10002426 	beq	r2,zero,11544 <OSEventPendMulti+0x34c>
                                                        /* ... return available message,           ... */
                    *pmsgs_rdy++ = (void *)*pq->OSQOut++;
   114b4:	e0bffe17 	ldw	r2,-8(fp)
   114b8:	10c00104 	addi	r3,r2,4
   114bc:	e0fffe15 	stw	r3,-8(fp)
   114c0:	e0fff417 	ldw	r3,-48(fp)
   114c4:	18c00417 	ldw	r3,16(r3)
   114c8:	19400104 	addi	r5,r3,4
   114cc:	e13ff417 	ldw	r4,-48(fp)
   114d0:	21400415 	stw	r5,16(r4)
   114d4:	18c00017 	ldw	r3,0(r3)
   114d8:	10c00015 	stw	r3,0(r2)
                     if (pq->OSQOut == pq->OSQEnd) {    /* If OUT ptr at queue end, ...                */
   114dc:	e0bff417 	ldw	r2,-48(fp)
   114e0:	10c00417 	ldw	r3,16(r2)
   114e4:	e0bff417 	ldw	r2,-48(fp)
   114e8:	10800217 	ldw	r2,8(r2)
   114ec:	1880041e 	bne	r3,r2,11500 <OSEventPendMulti+0x308>
                         pq->OSQOut  = pq->OSQStart;    /* ... wrap   to queue start                   */
   114f0:	e0bff417 	ldw	r2,-48(fp)
   114f4:	10c00117 	ldw	r3,4(r2)
   114f8:	e0bff417 	ldw	r2,-48(fp)
   114fc:	10c00415 	stw	r3,16(r2)
                     }
                     pq->OSQEntries--;                  /* Update number of queue entries              */
   11500:	e0bff417 	ldw	r2,-48(fp)
   11504:	1080058b 	ldhu	r2,22(r2)
   11508:	10bfffc4 	addi	r2,r2,-1
   1150c:	1007883a 	mov	r3,r2
   11510:	e0bff417 	ldw	r2,-48(fp)
   11514:	10c0058d 	sth	r3,22(r2)
                    *pevents_rdy++ = pevent;            /* ... and return available queue event        */
   11518:	e0bffd17 	ldw	r2,-12(fp)
   1151c:	10c00104 	addi	r3,r2,4
   11520:	e0fffd15 	stw	r3,-12(fp)
   11524:	e0fff017 	ldw	r3,-64(fp)
   11528:	10c00015 	stw	r3,0(r2)
                      events_rdy   = OS_TRUE;
   1152c:	00800044 	movi	r2,1
   11530:	e0bff105 	stb	r2,-60(fp)
                      events_rdy_nbr++;
   11534:	e0bff18b 	ldhu	r2,-58(fp)
   11538:	10800044 	addi	r2,r2,1
   1153c:	e0bff18d 	sth	r2,-58(fp)

                 } else {
                      events_stat |= OS_STAT_Q;         /* Configure multi-pend for queue events       */
                 }
                 break;
   11540:	00000f06 	br	11580 <OSEventPendMulti+0x388>
                    *pevents_rdy++ = pevent;            /* ... and return available queue event        */
                      events_rdy   = OS_TRUE;
                      events_rdy_nbr++;

                 } else {
                      events_stat |= OS_STAT_Q;         /* Configure multi-pend for queue events       */
   11544:	e0bff203 	ldbu	r2,-56(fp)
   11548:	10800114 	ori	r2,r2,4
   1154c:	e0bff205 	stb	r2,-56(fp)
                 }
                 break;
   11550:	00000b06 	br	11580 <OSEventPendMulti+0x388>
   11554:	e0bff317 	ldw	r2,-52(fp)
   11558:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1155c:	e0bff617 	ldw	r2,-40(fp)
   11560:	1001703a 	wrctl	status,r2

            case OS_EVENT_TYPE_MUTEX:                                            
            case OS_EVENT_TYPE_FLAG:
            default:           
                 OS_EXIT_CRITICAL();
                *pevents_rdy = (OS_EVENT *)0;           /* NULL terminate return event array           */
   11564:	e0bffd17 	ldw	r2,-12(fp)
   11568:	10000015 	stw	zero,0(r2)
                *perr        =  OS_ERR_EVENT_TYPE;
   1156c:	e0800217 	ldw	r2,8(fp)
   11570:	00c00044 	movi	r3,1
   11574:	10c00005 	stb	r3,0(r2)
                 return (events_rdy_nbr);
   11578:	e0bff18b 	ldhu	r2,-58(fp)
   1157c:	00009d06 	br	117f4 <OSEventPendMulti+0x5fc>
        }
        pevents++;
   11580:	e0bfef17 	ldw	r2,-68(fp)
   11584:	10800104 	addi	r2,r2,4
   11588:	e0bfef15 	stw	r2,-68(fp)
        pevent = *pevents;
   1158c:	e0bfef17 	ldw	r2,-68(fp)
   11590:	10800017 	ldw	r2,0(r2)
   11594:	e0bff015 	stw	r2,-64(fp)
    events_rdy     =  OS_FALSE;
    events_rdy_nbr =  0;
    events_stat    =  OS_STAT_RDY;
    pevents        =  pevents_pend;
    pevent         = *pevents;
    while (pevent != (OS_EVENT *)0) {                   /* See if any events already available         */
   11598:	e0bff017 	ldw	r2,-64(fp)
   1159c:	103f7d1e 	bne	r2,zero,11394 <__alt_mem_Flash_flash_data+0xf4011394>
        }
        pevents++;
        pevent = *pevents;
    }

    if ( events_rdy == OS_TRUE) {                       /* Return any events already available         */
   115a0:	e0bff103 	ldbu	r2,-60(fp)
   115a4:	10800058 	cmpnei	r2,r2,1
   115a8:	10000a1e 	bne	r2,zero,115d4 <OSEventPendMulti+0x3dc>
       *pevents_rdy = (OS_EVENT *)0;                    /* NULL terminate return event array           */
   115ac:	e0bffd17 	ldw	r2,-12(fp)
   115b0:	10000015 	stw	zero,0(r2)
   115b4:	e0bff317 	ldw	r2,-52(fp)
   115b8:	e0bff715 	stw	r2,-36(fp)
   115bc:	e0bff717 	ldw	r2,-36(fp)
   115c0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
       *perr        =  OS_ERR_NONE;
   115c4:	e0800217 	ldw	r2,8(fp)
   115c8:	10000005 	stb	zero,0(r2)
        return (events_rdy_nbr);
   115cc:	e0bff18b 	ldhu	r2,-58(fp)
   115d0:	00008806 	br	117f4 <OSEventPendMulti+0x5fc>
    }
/*$PAGE*/
                                                        /* Otherwise, must wait until any event occurs */
    OSTCBCur->OSTCBStat     |= events_stat  |           /* Resource not available, ...                 */
   115d4:	d0a80b17 	ldw	r2,-24532(gp)
   115d8:	d0e80b17 	ldw	r3,-24532(gp)
   115dc:	19000c03 	ldbu	r4,48(r3)
   115e0:	e0fff203 	ldbu	r3,-56(fp)
   115e4:	20c6b03a 	or	r3,r4,r3
   115e8:	1809883a 	mov	r4,r3
   115ec:	00ffe004 	movi	r3,-128
   115f0:	20c6b03a 	or	r3,r4,r3
   115f4:	10c00c05 	stb	r3,48(r2)
                               OS_STAT_MULTI;           /* ... pend on multiple events                 */
    OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
   115f8:	d0a80b17 	ldw	r2,-24532(gp)
   115fc:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBDly       = timeout;                 /* Store pend timeout in TCB                   */
   11600:	d0a80b17 	ldw	r2,-24532(gp)
   11604:	e0ffff0b 	ldhu	r3,-4(fp)
   11608:	10c00b8d 	sth	r3,46(r2)
    OS_EventTaskWaitMulti(pevents_pend);                /* Suspend task until events or timeout occurs */
   1160c:	e13ffc17 	ldw	r4,-16(fp)
   11610:	00121400 	call	12140 <OS_EventTaskWaitMulti>
   11614:	e0bff317 	ldw	r2,-52(fp)
   11618:	e0bff815 	stw	r2,-32(fp)
   1161c:	e0bff817 	ldw	r2,-32(fp)
   11620:	1001703a 	wrctl	status,r2

    OS_EXIT_CRITICAL();
    OS_Sched();                                         /* Find next highest priority task ready       */
   11624:	00128b40 	call	128b4 <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   11628:	0005303a 	rdctl	r2,status
   1162c:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   11630:	e0fff917 	ldw	r3,-28(fp)
   11634:	00bfff84 	movi	r2,-2
   11638:	1884703a 	and	r2,r3,r2
   1163c:	1001703a 	wrctl	status,r2
  
  return context;
   11640:	e0bff917 	ldw	r2,-28(fp)
    OS_ENTER_CRITICAL();
   11644:	e0bff315 	stw	r2,-52(fp)

    switch (OSTCBCur->OSTCBStatPend) {                  /* Handle event posted, aborted, or timed-out  */
   11648:	d0a80b17 	ldw	r2,-24532(gp)
   1164c:	10800c43 	ldbu	r2,49(r2)
   11650:	10803fcc 	andi	r2,r2,255
   11654:	10000226 	beq	r2,zero,11660 <OSEventPendMulti+0x468>
   11658:	108000a0 	cmpeqi	r2,r2,2
   1165c:	10001826 	beq	r2,zero,116c0 <OSEventPendMulti+0x4c8>
        case OS_STAT_PEND_OK:
        case OS_STAT_PEND_ABORT:
             pevent = OSTCBCur->OSTCBEventPtr;
   11660:	d0a80b17 	ldw	r2,-24532(gp)
   11664:	10800717 	ldw	r2,28(r2)
   11668:	e0bff015 	stw	r2,-64(fp)
             if (pevent != (OS_EVENT *)0) {             /* If task event ptr != NULL, ...              */
   1166c:	e0bff017 	ldw	r2,-64(fp)
   11670:	10000b26 	beq	r2,zero,116a0 <OSEventPendMulti+0x4a8>
                *pevents_rdy++ =  pevent;               /* ... return available event ...              */
   11674:	e0bffd17 	ldw	r2,-12(fp)
   11678:	10c00104 	addi	r3,r2,4
   1167c:	e0fffd15 	stw	r3,-12(fp)
   11680:	e0fff017 	ldw	r3,-64(fp)
   11684:	10c00015 	stw	r3,0(r2)
                *pevents_rdy   = (OS_EVENT *)0;         /* ... & NULL terminate return event array     */
   11688:	e0bffd17 	ldw	r2,-12(fp)
   1168c:	10000015 	stw	zero,0(r2)
                  events_rdy_nbr++;
   11690:	e0bff18b 	ldhu	r2,-58(fp)
   11694:	10800044 	addi	r2,r2,1
   11698:	e0bff18d 	sth	r2,-58(fp)

             } else {                                   /* Else NO event available, handle as timeout  */
                 OSTCBCur->OSTCBStatPend = OS_STAT_PEND_TO;
                 OS_EventTaskRemoveMulti(OSTCBCur, pevents_pend);
             }
			 break;
   1169c:	00000d06 	br	116d4 <OSEventPendMulti+0x4dc>
                *pevents_rdy++ =  pevent;               /* ... return available event ...              */
                *pevents_rdy   = (OS_EVENT *)0;         /* ... & NULL terminate return event array     */
                  events_rdy_nbr++;

             } else {                                   /* Else NO event available, handle as timeout  */
                 OSTCBCur->OSTCBStatPend = OS_STAT_PEND_TO;
   116a0:	d0a80b17 	ldw	r2,-24532(gp)
   116a4:	00c00044 	movi	r3,1
   116a8:	10c00c45 	stb	r3,49(r2)
                 OS_EventTaskRemoveMulti(OSTCBCur, pevents_pend);
   116ac:	d0a80b17 	ldw	r2,-24532(gp)
   116b0:	1009883a 	mov	r4,r2
   116b4:	e17ffc17 	ldw	r5,-16(fp)
   116b8:	00123400 	call	12340 <OS_EventTaskRemoveMulti>
             }
			 break;
   116bc:	00000506 	br	116d4 <OSEventPendMulti+0x4dc>

        case OS_STAT_PEND_TO:
        default:                                        /* ... remove task from events' wait lists     */
             OS_EventTaskRemoveMulti(OSTCBCur, pevents_pend);
   116c0:	d0a80b17 	ldw	r2,-24532(gp)
   116c4:	1009883a 	mov	r4,r2
   116c8:	e17ffc17 	ldw	r5,-16(fp)
   116cc:	00123400 	call	12340 <OS_EventTaskRemoveMulti>
             break;
   116d0:	0001883a 	nop
    }

    switch (OSTCBCur->OSTCBStatPend) {
   116d4:	d0a80b17 	ldw	r2,-24532(gp)
   116d8:	10800c43 	ldbu	r2,49(r2)
   116dc:	10803fcc 	andi	r2,r2,255
   116e0:	10000326 	beq	r2,zero,116f0 <OSEventPendMulti+0x4f8>
   116e4:	108000a0 	cmpeqi	r2,r2,2
   116e8:	1000231e 	bne	r2,zero,11778 <OSEventPendMulti+0x580>
   116ec:	00002a06 	br	11798 <OSEventPendMulti+0x5a0>
        case OS_STAT_PEND_OK:
             switch (pevent->OSEventType) {             /* Return event's message                      */
   116f0:	e0bff017 	ldw	r2,-64(fp)
   116f4:	10800003 	ldbu	r2,0(r2)
   116f8:	10803fcc 	andi	r2,r2,255
   116fc:	0080100e 	bge	zero,r2,11740 <OSEventPendMulti+0x548>
   11700:	10c000d0 	cmplti	r3,r2,3
   11704:	1800071e 	bne	r3,zero,11724 <OSEventPendMulti+0x52c>
   11708:	108000e0 	cmpeqi	r2,r2,3
   1170c:	10000c26 	beq	r2,zero,11740 <OSEventPendMulti+0x548>
#if (OS_SEM_EN > 0)
                 case OS_EVENT_TYPE_SEM:
                     *pmsgs_rdy++ = (void *)0;          /* NO message returned for semaphores          */
   11710:	e0bffe17 	ldw	r2,-8(fp)
   11714:	10c00104 	addi	r3,r2,4
   11718:	e0fffe15 	stw	r3,-8(fp)
   1171c:	10000015 	stw	zero,0(r2)
                      break;
   11720:	00001206 	br	1176c <OSEventPendMulti+0x574>

#if ((OS_MBOX_EN > 0) ||                 \
    ((OS_Q_EN    > 0) && (OS_MAX_QS > 0)))
                 case OS_EVENT_TYPE_MBOX:
                 case OS_EVENT_TYPE_Q:
                     *pmsgs_rdy++ = (void *)OSTCBCur->OSTCBMsg;     /* Return received message         */
   11724:	e0bffe17 	ldw	r2,-8(fp)
   11728:	10c00104 	addi	r3,r2,4
   1172c:	e0fffe15 	stw	r3,-8(fp)
   11730:	d0e80b17 	ldw	r3,-24532(gp)
   11734:	18c00917 	ldw	r3,36(r3)
   11738:	10c00015 	stw	r3,0(r2)
                      break;
   1173c:	00000b06 	br	1176c <OSEventPendMulti+0x574>
   11740:	e0bff317 	ldw	r2,-52(fp)
   11744:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   11748:	e0bffa17 	ldw	r2,-24(fp)
   1174c:	1001703a 	wrctl	status,r2

                 case OS_EVENT_TYPE_MUTEX:                                       
                 case OS_EVENT_TYPE_FLAG:
                 default:           
                      OS_EXIT_CRITICAL();
                     *pevents_rdy = (OS_EVENT *)0;      /* NULL terminate return event array           */
   11750:	e0bffd17 	ldw	r2,-12(fp)
   11754:	10000015 	stw	zero,0(r2)
                     *perr        =  OS_ERR_EVENT_TYPE;
   11758:	e0800217 	ldw	r2,8(fp)
   1175c:	00c00044 	movi	r3,1
   11760:	10c00005 	stb	r3,0(r2)
                      return (events_rdy_nbr);
   11764:	e0bff18b 	ldhu	r2,-58(fp)
   11768:	00002206 	br	117f4 <OSEventPendMulti+0x5fc>
             }
            *perr = OS_ERR_NONE;
   1176c:	e0800217 	ldw	r2,8(fp)
   11770:	10000005 	stb	zero,0(r2)
             break;
   11774:	00001006 	br	117b8 <OSEventPendMulti+0x5c0>

        case OS_STAT_PEND_ABORT:
            *pmsgs_rdy++ = (void *)0;                   /* NO message returned for abort               */
   11778:	e0bffe17 	ldw	r2,-8(fp)
   1177c:	10c00104 	addi	r3,r2,4
   11780:	e0fffe15 	stw	r3,-8(fp)
   11784:	10000015 	stw	zero,0(r2)
            *perr        =  OS_ERR_PEND_ABORT;          /* Indicate that event  aborted                */
   11788:	e0800217 	ldw	r2,8(fp)
   1178c:	00c00384 	movi	r3,14
   11790:	10c00005 	stb	r3,0(r2)
             break;
   11794:	00000806 	br	117b8 <OSEventPendMulti+0x5c0>
                                                        
        case OS_STAT_PEND_TO:                                                
        default:        
            *pmsgs_rdy++ = (void *)0;                   /* NO message returned for timeout             */
   11798:	e0bffe17 	ldw	r2,-8(fp)
   1179c:	10c00104 	addi	r3,r2,4
   117a0:	e0fffe15 	stw	r3,-8(fp)
   117a4:	10000015 	stw	zero,0(r2)
            *perr        =  OS_ERR_TIMEOUT;             /* Indicate that events timed out              */
   117a8:	e0800217 	ldw	r2,8(fp)
   117ac:	00c00284 	movi	r3,10
   117b0:	10c00005 	stb	r3,0(r2)
             break;
   117b4:	0001883a 	nop
    }

    OSTCBCur->OSTCBStat          =  OS_STAT_RDY;        /* Set   task  status to ready                 */
   117b8:	d0a80b17 	ldw	r2,-24532(gp)
   117bc:	10000c05 	stb	zero,48(r2)
    OSTCBCur->OSTCBStatPend      =  OS_STAT_PEND_OK;    /* Clear pend  status                          */
   117c0:	d0a80b17 	ldw	r2,-24532(gp)
   117c4:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;      /* Clear event pointers                        */
   117c8:	d0a80b17 	ldw	r2,-24532(gp)
   117cc:	10000715 	stw	zero,28(r2)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
   117d0:	d0a80b17 	ldw	r2,-24532(gp)
   117d4:	10000815 	stw	zero,32(r2)
    OSTCBCur->OSTCBMsg           = (void      *)0;      /* Clear task  message                         */
   117d8:	d0a80b17 	ldw	r2,-24532(gp)
   117dc:	10000915 	stw	zero,36(r2)
   117e0:	e0bff317 	ldw	r2,-52(fp)
   117e4:	e0bffb15 	stw	r2,-20(fp)
   117e8:	e0bffb17 	ldw	r2,-20(fp)
   117ec:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();

    return (events_rdy_nbr);
   117f0:	e0bff18b 	ldhu	r2,-58(fp)
}
   117f4:	e037883a 	mov	sp,fp
   117f8:	dfc00117 	ldw	ra,4(sp)
   117fc:	df000017 	ldw	fp,0(sp)
   11800:	dec00204 	addi	sp,sp,8
   11804:	f800283a 	ret

00011808 <OSInit>:
* Returns    : none
*********************************************************************************************************
*/

void  OSInit (void)
{
   11808:	defffe04 	addi	sp,sp,-8
   1180c:	dfc00115 	stw	ra,4(sp)
   11810:	df000015 	stw	fp,0(sp)
   11814:	d839883a 	mov	fp,sp
    OSInitHookBegin();                                           /* Call port specific initialization code   */
   11818:	00205580 	call	20558 <OSInitHookBegin>

    OS_InitMisc();                                               /* Initialize miscellaneous variables       */
   1181c:	001257c0 	call	1257c <OS_InitMisc>

    OS_InitRdyList();                                            /* Initialize the Ready List                */
   11820:	00125c00 	call	125c0 <OS_InitRdyList>

    OS_InitTCBList();                                            /* Initialize the free list of OS_TCBs      */
   11824:	00127200 	call	12720 <OS_InitTCBList>

    OS_InitEventList();                                          /* Initialize the free list of OS_EVENTs    */
   11828:	00124a00 	call	124a0 <OS_InitEventList>

#if (OS_FLAG_EN > 0) && (OS_MAX_FLAGS > 0)
    OS_FlagInit();                                               /* Initialize the event flag structures     */
   1182c:	00146a00 	call	146a0 <OS_FlagInit>
#endif

#if (OS_MEM_EN > 0) && (OS_MAX_MEM_PART > 0)
    OS_MemInit();                                                /* Initialize the memory manager            */
   11830:	0014fe80 	call	14fe8 <OS_MemInit>
#endif

#if (OS_Q_EN > 0) && (OS_MAX_QS > 0)
    OS_QInit();                                                  /* Initialize the message queue structures  */
   11834:	001621c0 	call	1621c <OS_QInit>
#endif

    OS_InitTaskIdle();                                           /* Create the Idle Task                     */
   11838:	00126280 	call	12628 <OS_InitTaskIdle>
#if OS_TASK_STAT_EN > 0
    OS_InitTaskStat();                                           /* Create the Statistic Task                */
   1183c:	00126a40 	call	126a4 <OS_InitTaskStat>

#if OS_TMR_EN > 0
    OSTmr_Init();                                                /* Initialize the Timer Manager             */
#endif

    OSInitHookEnd();                                             /* Call port specific init. code            */
   11840:	00205740 	call	20574 <OSInitHookEnd>

#if OS_DEBUG_EN > 0
    OSDebugInit();
   11844:	0012f8c0 	call	12f8c <OSDebugInit>
#endif
}
   11848:	e037883a 	mov	sp,fp
   1184c:	dfc00117 	ldw	ra,4(sp)
   11850:	df000017 	ldw	fp,0(sp)
   11854:	dec00204 	addi	sp,sp,8
   11858:	f800283a 	ret

0001185c <OSIntEnter>:
*              5) You are allowed to nest interrupts up to 255 levels deep.
*********************************************************************************************************
*/

void  OSIntEnter (void)
{
   1185c:	defffc04 	addi	sp,sp,-16
   11860:	df000315 	stw	fp,12(sp)
   11864:	df000304 	addi	fp,sp,12
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
   11868:	e03ffd15 	stw	zero,-12(fp)
#endif

    if (OSRunning == OS_TRUE) {
   1186c:	d0a7fc43 	ldbu	r2,-24591(gp)
   11870:	10803fcc 	andi	r2,r2,255
   11874:	10800058 	cmpnei	r2,r2,1
   11878:	1000131e 	bne	r2,zero,118c8 <OSIntEnter+0x6c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1187c:	0005303a 	rdctl	r2,status
   11880:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   11884:	e0fffe17 	ldw	r3,-8(fp)
   11888:	00bfff84 	movi	r2,-2
   1188c:	1884703a 	and	r2,r3,r2
   11890:	1001703a 	wrctl	status,r2
  
  return context;
   11894:	e0bffe17 	ldw	r2,-8(fp)
        OS_ENTER_CRITICAL();
   11898:	e0bffd15 	stw	r2,-12(fp)
        if (OSIntNesting < 255u) {
   1189c:	d0a80a03 	ldbu	r2,-24536(gp)
   118a0:	10803fcc 	andi	r2,r2,255
   118a4:	10803fe0 	cmpeqi	r2,r2,255
   118a8:	1000031e 	bne	r2,zero,118b8 <OSIntEnter+0x5c>
            OSIntNesting++;                      /* Increment ISR nesting level                        */
   118ac:	d0a80a03 	ldbu	r2,-24536(gp)
   118b0:	10800044 	addi	r2,r2,1
   118b4:	d0a80a05 	stb	r2,-24536(gp)
   118b8:	e0bffd17 	ldw	r2,-12(fp)
   118bc:	e0bfff15 	stw	r2,-4(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   118c0:	e0bfff17 	ldw	r2,-4(fp)
   118c4:	1001703a 	wrctl	status,r2
        }
        OS_EXIT_CRITICAL();
    }
}
   118c8:	e037883a 	mov	sp,fp
   118cc:	df000017 	ldw	fp,0(sp)
   118d0:	dec00104 	addi	sp,sp,4
   118d4:	f800283a 	ret

000118d8 <OSIntExit>:
*              2) Rescheduling is prevented when the scheduler is locked (see OS_SchedLock())
*********************************************************************************************************
*/

void  OSIntExit (void)
{
   118d8:	defffb04 	addi	sp,sp,-20
   118dc:	dfc00415 	stw	ra,16(sp)
   118e0:	df000315 	stw	fp,12(sp)
   118e4:	df000304 	addi	fp,sp,12
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
   118e8:	e03ffd15 	stw	zero,-12(fp)
#endif



    if (OSRunning == OS_TRUE) {
   118ec:	d0a7fc43 	ldbu	r2,-24591(gp)
   118f0:	10803fcc 	andi	r2,r2,255
   118f4:	10800058 	cmpnei	r2,r2,1
   118f8:	10002f1e 	bne	r2,zero,119b8 <OSIntExit+0xe0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   118fc:	0005303a 	rdctl	r2,status
   11900:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   11904:	e0fffe17 	ldw	r3,-8(fp)
   11908:	00bfff84 	movi	r2,-2
   1190c:	1884703a 	and	r2,r3,r2
   11910:	1001703a 	wrctl	status,r2
  
  return context;
   11914:	e0bffe17 	ldw	r2,-8(fp)
        OS_ENTER_CRITICAL();
   11918:	e0bffd15 	stw	r2,-12(fp)
        if (OSIntNesting > 0) {                            /* Prevent OSIntNesting from wrapping       */
   1191c:	d0a80a03 	ldbu	r2,-24536(gp)
   11920:	10803fcc 	andi	r2,r2,255
   11924:	10000326 	beq	r2,zero,11934 <OSIntExit+0x5c>
            OSIntNesting--;
   11928:	d0a80a03 	ldbu	r2,-24536(gp)
   1192c:	10bfffc4 	addi	r2,r2,-1
   11930:	d0a80a05 	stb	r2,-24536(gp)
        }
        if (OSIntNesting == 0) {                           /* Reschedule only if all ISRs complete ... */
   11934:	d0a80a03 	ldbu	r2,-24536(gp)
   11938:	10803fcc 	andi	r2,r2,255
   1193c:	10001a1e 	bne	r2,zero,119a8 <OSIntExit+0xd0>
            if (OSLockNesting == 0) {                      /* ... and not locked.                      */
   11940:	d0a7fc03 	ldbu	r2,-24592(gp)
   11944:	10803fcc 	andi	r2,r2,255
   11948:	1000171e 	bne	r2,zero,119a8 <OSIntExit+0xd0>
                OS_SchedNew();
   1194c:	00129800 	call	12980 <OS_SchedNew>
                if (OSPrioHighRdy != OSPrioCur) {          /* No Ctx Sw if current task is highest rdy */
   11950:	d0e7fe03 	ldbu	r3,-24584(gp)
   11954:	d0a7fe43 	ldbu	r2,-24583(gp)
   11958:	18c03fcc 	andi	r3,r3,255
   1195c:	10803fcc 	andi	r2,r2,255
   11960:	18801126 	beq	r3,r2,119a8 <OSIntExit+0xd0>
                    OSTCBHighRdy  = OSTCBPrioTbl[OSPrioHighRdy];
   11964:	d0a7fe03 	ldbu	r2,-24584(gp)
   11968:	10c03fcc 	andi	r3,r2,255
   1196c:	008000f4 	movhi	r2,3
   11970:	10a13d04 	addi	r2,r2,-31500
   11974:	18c7883a 	add	r3,r3,r3
   11978:	18c7883a 	add	r3,r3,r3
   1197c:	10c5883a 	add	r2,r2,r3
   11980:	10800017 	ldw	r2,0(r2)
   11984:	d0a80615 	stw	r2,-24552(gp)
#if OS_TASK_PROFILE_EN > 0
                    OSTCBHighRdy->OSTCBCtxSwCtr++;         /* Inc. # of context switches to this task  */
   11988:	d0a80617 	ldw	r2,-24552(gp)
   1198c:	10c00e17 	ldw	r3,56(r2)
   11990:	18c00044 	addi	r3,r3,1
   11994:	10c00e15 	stw	r3,56(r2)
#endif
                    OSCtxSwCtr++;                          /* Keep track of the number of ctx switches */
   11998:	d0a80117 	ldw	r2,-24572(gp)
   1199c:	10800044 	addi	r2,r2,1
   119a0:	d0a80115 	stw	r2,-24572(gp)
                    OSIntCtxSw();                          /* Perform interrupt level ctx switch       */
   119a4:	00202980 	call	20298 <OSCtxSw>
   119a8:	e0bffd17 	ldw	r2,-12(fp)
   119ac:	e0bfff15 	stw	r2,-4(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   119b0:	e0bfff17 	ldw	r2,-4(fp)
   119b4:	1001703a 	wrctl	status,r2
                }
            }
        }
        OS_EXIT_CRITICAL();
    }
}
   119b8:	e037883a 	mov	sp,fp
   119bc:	dfc00117 	ldw	ra,4(sp)
   119c0:	df000017 	ldw	fp,0(sp)
   119c4:	dec00204 	addi	sp,sp,8
   119c8:	f800283a 	ret

000119cc <OSSchedLock>:
*********************************************************************************************************
*/

#if OS_SCHED_LOCK_EN > 0
void  OSSchedLock (void)
{
   119cc:	defffc04 	addi	sp,sp,-16
   119d0:	df000315 	stw	fp,12(sp)
   119d4:	df000304 	addi	fp,sp,12
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   119d8:	e03ffd15 	stw	zero,-12(fp)
#endif



    if (OSRunning == OS_TRUE) {                  /* Make sure multitasking is running                  */
   119dc:	d0a7fc43 	ldbu	r2,-24591(gp)
   119e0:	10803fcc 	andi	r2,r2,255
   119e4:	10800058 	cmpnei	r2,r2,1
   119e8:	1000161e 	bne	r2,zero,11a44 <OSSchedLock+0x78>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   119ec:	0005303a 	rdctl	r2,status
   119f0:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   119f4:	e0fffe17 	ldw	r3,-8(fp)
   119f8:	00bfff84 	movi	r2,-2
   119fc:	1884703a 	and	r2,r3,r2
   11a00:	1001703a 	wrctl	status,r2
  
  return context;
   11a04:	e0bffe17 	ldw	r2,-8(fp)
        OS_ENTER_CRITICAL();
   11a08:	e0bffd15 	stw	r2,-12(fp)
        if (OSIntNesting == 0) {                 /* Can't call from an ISR                             */
   11a0c:	d0a80a03 	ldbu	r2,-24536(gp)
   11a10:	10803fcc 	andi	r2,r2,255
   11a14:	1000071e 	bne	r2,zero,11a34 <OSSchedLock+0x68>
            if (OSLockNesting < 255u) {          /* Prevent OSLockNesting from wrapping back to 0      */
   11a18:	d0a7fc03 	ldbu	r2,-24592(gp)
   11a1c:	10803fcc 	andi	r2,r2,255
   11a20:	10803fe0 	cmpeqi	r2,r2,255
   11a24:	1000031e 	bne	r2,zero,11a34 <OSSchedLock+0x68>
                OSLockNesting++;                 /* Increment lock nesting level                       */
   11a28:	d0a7fc03 	ldbu	r2,-24592(gp)
   11a2c:	10800044 	addi	r2,r2,1
   11a30:	d0a7fc05 	stb	r2,-24592(gp)
   11a34:	e0bffd17 	ldw	r2,-12(fp)
   11a38:	e0bfff15 	stw	r2,-4(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   11a3c:	e0bfff17 	ldw	r2,-4(fp)
   11a40:	1001703a 	wrctl	status,r2
            }
        }
        OS_EXIT_CRITICAL();
    }
}
   11a44:	e037883a 	mov	sp,fp
   11a48:	df000017 	ldw	fp,0(sp)
   11a4c:	dec00104 	addi	sp,sp,4
   11a50:	f800283a 	ret

00011a54 <OSSchedUnlock>:
*********************************************************************************************************
*/

#if OS_SCHED_LOCK_EN > 0
void  OSSchedUnlock (void)
{
   11a54:	defff804 	addi	sp,sp,-32
   11a58:	dfc00715 	stw	ra,28(sp)
   11a5c:	df000615 	stw	fp,24(sp)
   11a60:	df000604 	addi	fp,sp,24
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
   11a64:	e03ffa15 	stw	zero,-24(fp)
#endif



    if (OSRunning == OS_TRUE) {                            /* Make sure multitasking is running        */
   11a68:	d0a7fc43 	ldbu	r2,-24591(gp)
   11a6c:	10803fcc 	andi	r2,r2,255
   11a70:	10800058 	cmpnei	r2,r2,1
   11a74:	1000281e 	bne	r2,zero,11b18 <OSSchedUnlock+0xc4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   11a78:	0005303a 	rdctl	r2,status
   11a7c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   11a80:	e0fffb17 	ldw	r3,-20(fp)
   11a84:	00bfff84 	movi	r2,-2
   11a88:	1884703a 	and	r2,r3,r2
   11a8c:	1001703a 	wrctl	status,r2
  
  return context;
   11a90:	e0bffb17 	ldw	r2,-20(fp)
        OS_ENTER_CRITICAL();
   11a94:	e0bffa15 	stw	r2,-24(fp)
        if (OSLockNesting > 0) {                           /* Do not decrement if already 0            */
   11a98:	d0a7fc03 	ldbu	r2,-24592(gp)
   11a9c:	10803fcc 	andi	r2,r2,255
   11aa0:	10001926 	beq	r2,zero,11b08 <OSSchedUnlock+0xb4>
            OSLockNesting--;                               /* Decrement lock nesting level             */
   11aa4:	d0a7fc03 	ldbu	r2,-24592(gp)
   11aa8:	10bfffc4 	addi	r2,r2,-1
   11aac:	d0a7fc05 	stb	r2,-24592(gp)
            if (OSLockNesting == 0) {                      /* See if scheduler is enabled and ...      */
   11ab0:	d0a7fc03 	ldbu	r2,-24592(gp)
   11ab4:	10803fcc 	andi	r2,r2,255
   11ab8:	10000e1e 	bne	r2,zero,11af4 <OSSchedUnlock+0xa0>
                if (OSIntNesting == 0) {                   /* ... not in an ISR                        */
   11abc:	d0a80a03 	ldbu	r2,-24536(gp)
   11ac0:	10803fcc 	andi	r2,r2,255
   11ac4:	1000061e 	bne	r2,zero,11ae0 <OSSchedUnlock+0x8c>
   11ac8:	e0bffa17 	ldw	r2,-24(fp)
   11acc:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   11ad0:	e0bffc17 	ldw	r2,-16(fp)
   11ad4:	1001703a 	wrctl	status,r2
                    OS_EXIT_CRITICAL();
                    OS_Sched();                            /* See if a HPT is ready                    */
   11ad8:	00128b40 	call	128b4 <OS_Sched>
   11adc:	00000e06 	br	11b18 <OSSchedUnlock+0xc4>
   11ae0:	e0bffa17 	ldw	r2,-24(fp)
   11ae4:	e0bffd15 	stw	r2,-12(fp)
   11ae8:	e0bffd17 	ldw	r2,-12(fp)
   11aec:	1001703a 	wrctl	status,r2
   11af0:	00000906 	br	11b18 <OSSchedUnlock+0xc4>
   11af4:	e0bffa17 	ldw	r2,-24(fp)
   11af8:	e0bffe15 	stw	r2,-8(fp)
   11afc:	e0bffe17 	ldw	r2,-8(fp)
   11b00:	1001703a 	wrctl	status,r2
   11b04:	00000406 	br	11b18 <OSSchedUnlock+0xc4>
   11b08:	e0bffa17 	ldw	r2,-24(fp)
   11b0c:	e0bfff15 	stw	r2,-4(fp)
   11b10:	e0bfff17 	ldw	r2,-4(fp)
   11b14:	1001703a 	wrctl	status,r2
            }
        } else {
            OS_EXIT_CRITICAL();
        }
    }
}
   11b18:	e037883a 	mov	sp,fp
   11b1c:	dfc00117 	ldw	ra,4(sp)
   11b20:	df000017 	ldw	fp,0(sp)
   11b24:	dec00204 	addi	sp,sp,8
   11b28:	f800283a 	ret

00011b2c <OSStart>:
*                 d_ Execute the task.
*********************************************************************************************************
*/

void  OSStart (void)
{
   11b2c:	defffe04 	addi	sp,sp,-8
   11b30:	dfc00115 	stw	ra,4(sp)
   11b34:	df000015 	stw	fp,0(sp)
   11b38:	d839883a 	mov	fp,sp
    if (OSRunning == OS_FALSE) {
   11b3c:	d0a7fc43 	ldbu	r2,-24591(gp)
   11b40:	10803fcc 	andi	r2,r2,255
   11b44:	10000f1e 	bne	r2,zero,11b84 <OSStart+0x58>
        OS_SchedNew();                               /* Find highest priority's task priority number   */
   11b48:	00129800 	call	12980 <OS_SchedNew>
        OSPrioCur     = OSPrioHighRdy;
   11b4c:	d0a7fe03 	ldbu	r2,-24584(gp)
   11b50:	d0a7fe45 	stb	r2,-24583(gp)
        OSTCBHighRdy  = OSTCBPrioTbl[OSPrioHighRdy]; /* Point to highest priority task ready to run    */
   11b54:	d0a7fe03 	ldbu	r2,-24584(gp)
   11b58:	10c03fcc 	andi	r3,r2,255
   11b5c:	008000f4 	movhi	r2,3
   11b60:	10a13d04 	addi	r2,r2,-31500
   11b64:	18c7883a 	add	r3,r3,r3
   11b68:	18c7883a 	add	r3,r3,r3
   11b6c:	10c5883a 	add	r2,r2,r3
   11b70:	10800017 	ldw	r2,0(r2)
   11b74:	d0a80615 	stw	r2,-24552(gp)
        OSTCBCur      = OSTCBHighRdy;
   11b78:	d0a80617 	ldw	r2,-24552(gp)
   11b7c:	d0a80b15 	stw	r2,-24532(gp)
        OSStartHighRdy();                            /* Execute target specific code to start task     */
   11b80:	00203240 	call	20324 <OSStartHighRdy>
    }
}
   11b84:	e037883a 	mov	sp,fp
   11b88:	dfc00117 	ldw	ra,4(sp)
   11b8c:	df000017 	ldw	fp,0(sp)
   11b90:	dec00204 	addi	sp,sp,8
   11b94:	f800283a 	ret

00011b98 <OSStatInit>:
*********************************************************************************************************
*/

#if OS_TASK_STAT_EN > 0
void  OSStatInit (void)
{
   11b98:	defff904 	addi	sp,sp,-28
   11b9c:	dfc00615 	stw	ra,24(sp)
   11ba0:	df000515 	stw	fp,20(sp)
   11ba4:	df000504 	addi	fp,sp,20
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   11ba8:	e03ffb15 	stw	zero,-20(fp)
#endif



    OSTimeDly(2);                                /* Synchronize with clock tick                        */
   11bac:	01000084 	movi	r4,2
   11bb0:	00186c40 	call	186c4 <OSTimeDly>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   11bb4:	0005303a 	rdctl	r2,status
   11bb8:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   11bbc:	e0fffc17 	ldw	r3,-16(fp)
   11bc0:	00bfff84 	movi	r2,-2
   11bc4:	1884703a 	and	r2,r3,r2
   11bc8:	1001703a 	wrctl	status,r2
  
  return context;
   11bcc:	e0bffc17 	ldw	r2,-16(fp)
    OS_ENTER_CRITICAL();
   11bd0:	e0bffb15 	stw	r2,-20(fp)
    OSIdleCtr    = 0L;                           /* Clear idle counter                                 */
   11bd4:	d027fd15 	stw	zero,-24588(gp)
   11bd8:	e0bffb17 	ldw	r2,-20(fp)
   11bdc:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   11be0:	e0bffd17 	ldw	r2,-12(fp)
   11be4:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    OSTimeDly(OS_TICKS_PER_SEC / 10);            /* Determine MAX. idle counter value for 1/10 second  */
   11be8:	0009883a 	mov	r4,zero
   11bec:	00186c40 	call	186c4 <OSTimeDly>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   11bf0:	0005303a 	rdctl	r2,status
   11bf4:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   11bf8:	e0fffe17 	ldw	r3,-8(fp)
   11bfc:	00bfff84 	movi	r2,-2
   11c00:	1884703a 	and	r2,r3,r2
   11c04:	1001703a 	wrctl	status,r2
  
  return context;
   11c08:	e0bffe17 	ldw	r2,-8(fp)
    OS_ENTER_CRITICAL();
   11c0c:	e0bffb15 	stw	r2,-20(fp)
    OSIdleCtrMax = OSIdleCtr;                    /* Store maximum idle counter count in 1/10 second    */
   11c10:	d0a7fd17 	ldw	r2,-24588(gp)
   11c14:	d0a80215 	stw	r2,-24568(gp)
    OSStatRdy    = OS_TRUE;
   11c18:	00800044 	movi	r2,1
   11c1c:	d0a80e05 	stb	r2,-24520(gp)
   11c20:	e0bffb17 	ldw	r2,-20(fp)
   11c24:	e0bfff15 	stw	r2,-4(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   11c28:	e0bfff17 	ldw	r2,-4(fp)
   11c2c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
}
   11c30:	e037883a 	mov	sp,fp
   11c34:	dfc00117 	ldw	ra,4(sp)
   11c38:	df000017 	ldw	fp,0(sp)
   11c3c:	dec00204 	addi	sp,sp,8
   11c40:	f800283a 	ret

00011c44 <OSTimeTick>:
* Returns    : none
*********************************************************************************************************
*/

void  OSTimeTick (void)
{
   11c44:	defff704 	addi	sp,sp,-36
   11c48:	dfc00815 	stw	ra,32(sp)
   11c4c:	df000715 	stw	fp,28(sp)
   11c50:	df000704 	addi	fp,sp,28
    OS_TCB    *ptcb;
#if OS_TICK_STEP_EN > 0
    BOOLEAN    step;
#endif
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
   11c54:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_TIME_TICK_HOOK_EN > 0
    OSTimeTickHook();                                      /* Call user definable hook                     */
   11c58:	002053c0 	call	2053c <OSTimeTickHook>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   11c5c:	0005303a 	rdctl	r2,status
   11c60:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   11c64:	e0fffc17 	ldw	r3,-16(fp)
   11c68:	00bfff84 	movi	r2,-2
   11c6c:	1884703a 	and	r2,r3,r2
   11c70:	1001703a 	wrctl	status,r2
  
  return context;
   11c74:	e0bffc17 	ldw	r2,-16(fp)
#endif
#if OS_TIME_GET_SET_EN > 0
    OS_ENTER_CRITICAL();                                   /* Update the 32-bit tick counter               */
   11c78:	e0bffb15 	stw	r2,-20(fp)
    OSTime++;
   11c7c:	d0a80c17 	ldw	r2,-24528(gp)
   11c80:	10800044 	addi	r2,r2,1
   11c84:	d0a80c15 	stw	r2,-24528(gp)
   11c88:	e0bffb17 	ldw	r2,-20(fp)
   11c8c:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   11c90:	e0bffd17 	ldw	r2,-12(fp)
   11c94:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
#endif
    if (OSRunning == OS_TRUE) {
   11c98:	d0a7fc43 	ldbu	r2,-24591(gp)
   11c9c:	10803fcc 	andi	r2,r2,255
   11ca0:	10800058 	cmpnei	r2,r2,1
   11ca4:	1000691e 	bne	r2,zero,11e4c <OSTimeTick+0x208>
#if OS_TICK_STEP_EN > 0
        switch (OSTickStepState) {                         /* Determine whether we need to process a tick  */
   11ca8:	d0a80003 	ldbu	r2,-24576(gp)
   11cac:	10803fcc 	andi	r2,r2,255
   11cb0:	10c00060 	cmpeqi	r3,r2,1
   11cb4:	1800061e 	bne	r3,zero,11cd0 <OSTimeTick+0x8c>
   11cb8:	10c000a0 	cmpeqi	r3,r2,2
   11cbc:	1800061e 	bne	r3,zero,11cd8 <OSTimeTick+0x94>
   11cc0:	10000a1e 	bne	r2,zero,11cec <OSTimeTick+0xa8>
            case OS_TICK_STEP_DIS:                         /* Yes, stepping is disabled                    */
                 step = OS_TRUE;
   11cc4:	00800044 	movi	r2,1
   11cc8:	e0bffa05 	stb	r2,-24(fp)
                 break;
   11ccc:	00000b06 	br	11cfc <OSTimeTick+0xb8>

            case OS_TICK_STEP_WAIT:                        /* No,  waiting for uC/OS-View to set ...       */
                 step = OS_FALSE;                          /*      .. OSTickStepState to OS_TICK_STEP_ONCE */
   11cd0:	e03ffa05 	stb	zero,-24(fp)
                 break;
   11cd4:	00000906 	br	11cfc <OSTimeTick+0xb8>

            case OS_TICK_STEP_ONCE:                        /* Yes, process tick once and wait for next ... */
                 step            = OS_TRUE;                /*      ... step command from uC/OS-View        */
   11cd8:	00800044 	movi	r2,1
   11cdc:	e0bffa05 	stb	r2,-24(fp)
                 OSTickStepState = OS_TICK_STEP_WAIT;
   11ce0:	00800044 	movi	r2,1
   11ce4:	d0a80005 	stb	r2,-24576(gp)
                 break;
   11ce8:	00000406 	br	11cfc <OSTimeTick+0xb8>

            default:                                       /* Invalid case, correct situation              */
                 step            = OS_TRUE;
   11cec:	00800044 	movi	r2,1
   11cf0:	e0bffa05 	stb	r2,-24(fp)
                 OSTickStepState = OS_TICK_STEP_DIS;
   11cf4:	d0280005 	stb	zero,-24576(gp)
                 break;
   11cf8:	0001883a 	nop
        }
        if (step == OS_FALSE) {                            /* Return if waiting for step command           */
   11cfc:	e0bffa03 	ldbu	r2,-24(fp)
   11d00:	1000011e 	bne	r2,zero,11d08 <OSTimeTick+0xc4>
            return;
   11d04:	00005106 	br	11e4c <OSTimeTick+0x208>
        }
#endif
        ptcb = OSTCBList;                                  /* Point at first TCB in TCB list               */
   11d08:	d0a7ff17 	ldw	r2,-24580(gp)
   11d0c:	e0bff915 	stw	r2,-28(fp)
        while (ptcb->OSTCBPrio != OS_TASK_IDLE_PRIO) {     /* Go through all TCBs in TCB list              */
   11d10:	00004906 	br	11e38 <OSTimeTick+0x1f4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   11d14:	0005303a 	rdctl	r2,status
   11d18:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   11d1c:	e0fffe17 	ldw	r3,-8(fp)
   11d20:	00bfff84 	movi	r2,-2
   11d24:	1884703a 	and	r2,r3,r2
   11d28:	1001703a 	wrctl	status,r2
  
  return context;
   11d2c:	e0bffe17 	ldw	r2,-8(fp)
            OS_ENTER_CRITICAL();
   11d30:	e0bffb15 	stw	r2,-20(fp)
            if (ptcb->OSTCBDly != 0) {                     /* No, Delayed or waiting for event with TO     */
   11d34:	e0bff917 	ldw	r2,-28(fp)
   11d38:	10800b8b 	ldhu	r2,46(r2)
   11d3c:	10bfffcc 	andi	r2,r2,65535
   11d40:	10003626 	beq	r2,zero,11e1c <OSTimeTick+0x1d8>
                if (--ptcb->OSTCBDly == 0) {               /* Decrement nbr of ticks to end of delay       */
   11d44:	e0bff917 	ldw	r2,-28(fp)
   11d48:	10800b8b 	ldhu	r2,46(r2)
   11d4c:	10bfffc4 	addi	r2,r2,-1
   11d50:	1007883a 	mov	r3,r2
   11d54:	e0bff917 	ldw	r2,-28(fp)
   11d58:	10c00b8d 	sth	r3,46(r2)
   11d5c:	e0bff917 	ldw	r2,-28(fp)
   11d60:	10800b8b 	ldhu	r2,46(r2)
   11d64:	10bfffcc 	andi	r2,r2,65535
   11d68:	10002c1e 	bne	r2,zero,11e1c <OSTimeTick+0x1d8>
                                                           /* Check for timeout                            */
                    if ((ptcb->OSTCBStat & OS_STAT_PEND_ANY) != OS_STAT_RDY) {
   11d6c:	e0bff917 	ldw	r2,-28(fp)
   11d70:	10800c03 	ldbu	r2,48(r2)
   11d74:	10803fcc 	andi	r2,r2,255
   11d78:	10800dcc 	andi	r2,r2,55
   11d7c:	10000b26 	beq	r2,zero,11dac <OSTimeTick+0x168>
                        ptcb->OSTCBStat  &= ~(INT8U)OS_STAT_PEND_ANY;          /* Yes, Clear status flag   */
   11d80:	e0bff917 	ldw	r2,-28(fp)
   11d84:	10c00c03 	ldbu	r3,48(r2)
   11d88:	00bff204 	movi	r2,-56
   11d8c:	1884703a 	and	r2,r3,r2
   11d90:	1007883a 	mov	r3,r2
   11d94:	e0bff917 	ldw	r2,-28(fp)
   11d98:	10c00c05 	stb	r3,48(r2)
                        ptcb->OSTCBStatPend = OS_STAT_PEND_TO;                 /* Indicate PEND timeout    */
   11d9c:	e0bff917 	ldw	r2,-28(fp)
   11da0:	00c00044 	movi	r3,1
   11da4:	10c00c45 	stb	r3,49(r2)
   11da8:	00000206 	br	11db4 <OSTimeTick+0x170>
                    } else {
                        ptcb->OSTCBStatPend = OS_STAT_PEND_OK;
   11dac:	e0bff917 	ldw	r2,-28(fp)
   11db0:	10000c45 	stb	zero,49(r2)
                    }

                    if ((ptcb->OSTCBStat & OS_STAT_SUSPEND) == OS_STAT_RDY) {  /* Is task suspended?       */
   11db4:	e0bff917 	ldw	r2,-28(fp)
   11db8:	10800c03 	ldbu	r2,48(r2)
   11dbc:	10803fcc 	andi	r2,r2,255
   11dc0:	1080020c 	andi	r2,r2,8
   11dc4:	1000151e 	bne	r2,zero,11e1c <OSTimeTick+0x1d8>
                        OSRdyGrp               |= ptcb->OSTCBBitY;             /* No,  Make ready          */
   11dc8:	e0bff917 	ldw	r2,-28(fp)
   11dcc:	10c00d83 	ldbu	r3,54(r2)
   11dd0:	d0a80803 	ldbu	r2,-24544(gp)
   11dd4:	1884b03a 	or	r2,r3,r2
   11dd8:	d0a80805 	stb	r2,-24544(gp)
                        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
   11ddc:	e0bff917 	ldw	r2,-28(fp)
   11de0:	10800d03 	ldbu	r2,52(r2)
   11de4:	10c03fcc 	andi	r3,r2,255
   11de8:	e0bff917 	ldw	r2,-28(fp)
   11dec:	10800d03 	ldbu	r2,52(r2)
   11df0:	11003fcc 	andi	r4,r2,255
   11df4:	d0a80844 	addi	r2,gp,-24543
   11df8:	2085883a 	add	r2,r4,r2
   11dfc:	11000003 	ldbu	r4,0(r2)
   11e00:	e0bff917 	ldw	r2,-28(fp)
   11e04:	10800d43 	ldbu	r2,53(r2)
   11e08:	2084b03a 	or	r2,r4,r2
   11e0c:	1009883a 	mov	r4,r2
   11e10:	d0a80844 	addi	r2,gp,-24543
   11e14:	1885883a 	add	r2,r3,r2
   11e18:	11000005 	stb	r4,0(r2)
                    }
                }
            }
            ptcb = ptcb->OSTCBNext;                        /* Point at next TCB in TCB list                */
   11e1c:	e0bff917 	ldw	r2,-28(fp)
   11e20:	10800517 	ldw	r2,20(r2)
   11e24:	e0bff915 	stw	r2,-28(fp)
   11e28:	e0bffb17 	ldw	r2,-20(fp)
   11e2c:	e0bfff15 	stw	r2,-4(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   11e30:	e0bfff17 	ldw	r2,-4(fp)
   11e34:	1001703a 	wrctl	status,r2
        if (step == OS_FALSE) {                            /* Return if waiting for step command           */
            return;
        }
#endif
        ptcb = OSTCBList;                                  /* Point at first TCB in TCB list               */
        while (ptcb->OSTCBPrio != OS_TASK_IDLE_PRIO) {     /* Go through all TCBs in TCB list              */
   11e38:	e0bff917 	ldw	r2,-28(fp)
   11e3c:	10800c83 	ldbu	r2,50(r2)
   11e40:	10803fcc 	andi	r2,r2,255
   11e44:	10800518 	cmpnei	r2,r2,20
   11e48:	103fb21e 	bne	r2,zero,11d14 <__alt_mem_Flash_flash_data+0xf4011d14>
            }
            ptcb = ptcb->OSTCBNext;                        /* Point at next TCB in TCB list                */
            OS_EXIT_CRITICAL();
        }
    }
}
   11e4c:	e037883a 	mov	sp,fp
   11e50:	dfc00117 	ldw	ra,4(sp)
   11e54:	df000017 	ldw	fp,0(sp)
   11e58:	dec00204 	addi	sp,sp,8
   11e5c:	f800283a 	ret

00011e60 <OSVersion>:
* Returns    : the version number of uC/OS-II multiplied by 100.
*********************************************************************************************************
*/

INT16U  OSVersion (void)
{
   11e60:	deffff04 	addi	sp,sp,-4
   11e64:	df000015 	stw	fp,0(sp)
   11e68:	d839883a 	mov	fp,sp
    return (OS_VERSION);
   11e6c:	00804784 	movi	r2,286
}
   11e70:	e037883a 	mov	sp,fp
   11e74:	df000017 	ldw	fp,0(sp)
   11e78:	dec00104 	addi	sp,sp,4
   11e7c:	f800283a 	ret

00011e80 <OS_Dummy>:
*********************************************************************************************************
*/

#if OS_TASK_DEL_EN > 0
void  OS_Dummy (void)
{
   11e80:	deffff04 	addi	sp,sp,-4
   11e84:	df000015 	stw	fp,0(sp)
   11e88:	d839883a 	mov	fp,sp
}
   11e8c:	e037883a 	mov	sp,fp
   11e90:	df000017 	ldw	fp,0(sp)
   11e94:	dec00104 	addi	sp,sp,4
   11e98:	f800283a 	ret

00011e9c <OS_EventTaskRdy>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
INT8U  OS_EventTaskRdy (OS_EVENT *pevent, void *pmsg, INT8U msk, INT8U pend_stat)
{
   11e9c:	defff804 	addi	sp,sp,-32
   11ea0:	dfc00715 	stw	ra,28(sp)
   11ea4:	df000615 	stw	fp,24(sp)
   11ea8:	df000604 	addi	fp,sp,24
   11eac:	e13ffc15 	stw	r4,-16(fp)
   11eb0:	e17ffd15 	stw	r5,-12(fp)
   11eb4:	3007883a 	mov	r3,r6
   11eb8:	3805883a 	mov	r2,r7
   11ebc:	e0fffe05 	stb	r3,-8(fp)
   11ec0:	e0bfff05 	stb	r2,-4(fp)
    INT16U  *ptbl;
#endif


#if OS_LOWEST_PRIO <= 63
    y    = OSUnMapTbl[pevent->OSEventGrp];              /* Find HPT waiting for message                */
   11ec4:	e0bffc17 	ldw	r2,-16(fp)
   11ec8:	10800283 	ldbu	r2,10(r2)
   11ecc:	10c03fcc 	andi	r3,r2,255
   11ed0:	008000b4 	movhi	r2,2
   11ed4:	10844204 	addi	r2,r2,4360
   11ed8:	10c5883a 	add	r2,r2,r3
   11edc:	10800003 	ldbu	r2,0(r2)
   11ee0:	e0bffa05 	stb	r2,-24(fp)
    x    = OSUnMapTbl[pevent->OSEventTbl[y]];
   11ee4:	e0bffa03 	ldbu	r2,-24(fp)
   11ee8:	e0fffc17 	ldw	r3,-16(fp)
   11eec:	1885883a 	add	r2,r3,r2
   11ef0:	10800204 	addi	r2,r2,8
   11ef4:	108000c3 	ldbu	r2,3(r2)
   11ef8:	10c03fcc 	andi	r3,r2,255
   11efc:	008000b4 	movhi	r2,2
   11f00:	10844204 	addi	r2,r2,4360
   11f04:	10c5883a 	add	r2,r2,r3
   11f08:	10800003 	ldbu	r2,0(r2)
   11f0c:	e0bffa45 	stb	r2,-23(fp)
    prio = (INT8U)((y << 3) + x);                       /* Find priority of task getting the msg       */
   11f10:	e0bffa03 	ldbu	r2,-24(fp)
   11f14:	100490fa 	slli	r2,r2,3
   11f18:	1007883a 	mov	r3,r2
   11f1c:	e0bffa43 	ldbu	r2,-23(fp)
   11f20:	1885883a 	add	r2,r3,r2
   11f24:	e0bffa85 	stb	r2,-22(fp)
        x = OSUnMapTbl[(*ptbl >> 8) & 0xFF] + 8;
    }
    prio = (INT8U)((y << 4) + x);                       /* Find priority of task getting the msg       */
#endif

    ptcb                  =  OSTCBPrioTbl[prio];        /* Point to this task's OS_TCB                 */
   11f28:	e0fffa83 	ldbu	r3,-22(fp)
   11f2c:	008000f4 	movhi	r2,3
   11f30:	10a13d04 	addi	r2,r2,-31500
   11f34:	18c7883a 	add	r3,r3,r3
   11f38:	18c7883a 	add	r3,r3,r3
   11f3c:	10c5883a 	add	r2,r2,r3
   11f40:	10800017 	ldw	r2,0(r2)
   11f44:	e0bffb15 	stw	r2,-20(fp)
    ptcb->OSTCBDly        =  0;                         /* Prevent OSTimeTick() from readying task     */
   11f48:	e0bffb17 	ldw	r2,-20(fp)
   11f4c:	10000b8d 	sth	zero,46(r2)
#if ((OS_Q_EN > 0) && (OS_MAX_QS > 0)) || (OS_MBOX_EN > 0)
    ptcb->OSTCBMsg        =  pmsg;                      /* Send message directly to waiting task       */
   11f50:	e0bffb17 	ldw	r2,-20(fp)
   11f54:	e0fffd17 	ldw	r3,-12(fp)
   11f58:	10c00915 	stw	r3,36(r2)
#else
    pmsg                  =  pmsg;                      /* Prevent compiler warning if not used        */
#endif
    ptcb->OSTCBStat      &= ~msk;                       /* Clear bit associated with event type        */
   11f5c:	e0bffb17 	ldw	r2,-20(fp)
   11f60:	10800c03 	ldbu	r2,48(r2)
   11f64:	1007883a 	mov	r3,r2
   11f68:	e0bffe03 	ldbu	r2,-8(fp)
   11f6c:	0084303a 	nor	r2,zero,r2
   11f70:	1884703a 	and	r2,r3,r2
   11f74:	1007883a 	mov	r3,r2
   11f78:	e0bffb17 	ldw	r2,-20(fp)
   11f7c:	10c00c05 	stb	r3,48(r2)
    ptcb->OSTCBStatPend   =  pend_stat;                 /* Set pend status of post or abort            */
   11f80:	e0bffb17 	ldw	r2,-20(fp)
   11f84:	e0ffff03 	ldbu	r3,-4(fp)
   11f88:	10c00c45 	stb	r3,49(r2)
                                                        /* See if task is ready (could be susp'd)      */
    if ((ptcb->OSTCBStat &   OS_STAT_SUSPEND) == OS_STAT_RDY) {
   11f8c:	e0bffb17 	ldw	r2,-20(fp)
   11f90:	10800c03 	ldbu	r2,48(r2)
   11f94:	10803fcc 	andi	r2,r2,255
   11f98:	1080020c 	andi	r2,r2,8
   11f9c:	1000111e 	bne	r2,zero,11fe4 <OS_EventTaskRdy+0x148>
        OSRdyGrp         |=  ptcb->OSTCBBitY;           /* Put task in the ready to run list           */
   11fa0:	e0bffb17 	ldw	r2,-20(fp)
   11fa4:	10c00d83 	ldbu	r3,54(r2)
   11fa8:	d0a80803 	ldbu	r2,-24544(gp)
   11fac:	1884b03a 	or	r2,r3,r2
   11fb0:	d0a80805 	stb	r2,-24544(gp)
        OSRdyTbl[y]      |=  ptcb->OSTCBBitX;
   11fb4:	e0fffa03 	ldbu	r3,-24(fp)
   11fb8:	e13ffa03 	ldbu	r4,-24(fp)
   11fbc:	d0a80844 	addi	r2,gp,-24543
   11fc0:	2085883a 	add	r2,r4,r2
   11fc4:	11000003 	ldbu	r4,0(r2)
   11fc8:	e0bffb17 	ldw	r2,-20(fp)
   11fcc:	10800d43 	ldbu	r2,53(r2)
   11fd0:	2084b03a 	or	r2,r4,r2
   11fd4:	1009883a 	mov	r4,r2
   11fd8:	d0a80844 	addi	r2,gp,-24543
   11fdc:	1885883a 	add	r2,r3,r2
   11fe0:	11000005 	stb	r4,0(r2)
    }

    OS_EventTaskRemove(ptcb, pevent);                   /* Remove this task from event   wait list     */
   11fe4:	e13ffb17 	ldw	r4,-20(fp)
   11fe8:	e17ffc17 	ldw	r5,-16(fp)
   11fec:	001228c0 	call	1228c <OS_EventTaskRemove>
#if (OS_EVENT_MULTI_EN > 0)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {   /* Remove this task from events' wait lists    */
   11ff0:	e0bffb17 	ldw	r2,-20(fp)
   11ff4:	10800817 	ldw	r2,32(r2)
   11ff8:	10000826 	beq	r2,zero,1201c <OS_EventTaskRdy+0x180>
        OS_EventTaskRemoveMulti(ptcb, ptcb->OSTCBEventMultiPtr);
   11ffc:	e0bffb17 	ldw	r2,-20(fp)
   12000:	10800817 	ldw	r2,32(r2)
   12004:	e13ffb17 	ldw	r4,-20(fp)
   12008:	100b883a 	mov	r5,r2
   1200c:	00123400 	call	12340 <OS_EventTaskRemoveMulti>
        ptcb->OSTCBEventPtr       = (OS_EVENT  *)pevent;/* Return event as first multi-pend event ready*/
   12010:	e0bffb17 	ldw	r2,-20(fp)
   12014:	e0fffc17 	ldw	r3,-16(fp)
   12018:	10c00715 	stw	r3,28(r2)
    }
#endif

    return (prio);
   1201c:	e0bffa83 	ldbu	r2,-22(fp)
}
   12020:	e037883a 	mov	sp,fp
   12024:	dfc00117 	ldw	ra,4(sp)
   12028:	df000017 	ldw	fp,0(sp)
   1202c:	dec00204 	addi	sp,sp,8
   12030:	f800283a 	ret

00012034 <OS_EventTaskWait>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
void  OS_EventTaskWait (OS_EVENT *pevent)
{
   12034:	defffd04 	addi	sp,sp,-12
   12038:	df000215 	stw	fp,8(sp)
   1203c:	df000204 	addi	fp,sp,8
   12040:	e13fff15 	stw	r4,-4(fp)
    INT8U  y;


    OSTCBCur->OSTCBEventPtr               = pevent;                 /* Store ptr to ECB in TCB         */
   12044:	d0a80b17 	ldw	r2,-24532(gp)
   12048:	e0ffff17 	ldw	r3,-4(fp)
   1204c:	10c00715 	stw	r3,28(r2)

    pevent->OSEventTbl[OSTCBCur->OSTCBY] |= OSTCBCur->OSTCBBitX;    /* Put task in waiting list        */
   12050:	d0a80b17 	ldw	r2,-24532(gp)
   12054:	10800d03 	ldbu	r2,52(r2)
   12058:	10803fcc 	andi	r2,r2,255
   1205c:	d0e80b17 	ldw	r3,-24532(gp)
   12060:	18c00d03 	ldbu	r3,52(r3)
   12064:	18c03fcc 	andi	r3,r3,255
   12068:	e13fff17 	ldw	r4,-4(fp)
   1206c:	20c7883a 	add	r3,r4,r3
   12070:	18c00204 	addi	r3,r3,8
   12074:	190000c3 	ldbu	r4,3(r3)
   12078:	d0e80b17 	ldw	r3,-24532(gp)
   1207c:	18c00d43 	ldbu	r3,53(r3)
   12080:	20c6b03a 	or	r3,r4,r3
   12084:	1809883a 	mov	r4,r3
   12088:	e0ffff17 	ldw	r3,-4(fp)
   1208c:	1885883a 	add	r2,r3,r2
   12090:	10800204 	addi	r2,r2,8
   12094:	110000c5 	stb	r4,3(r2)
    pevent->OSEventGrp                   |= OSTCBCur->OSTCBBitY;
   12098:	e0bfff17 	ldw	r2,-4(fp)
   1209c:	10c00283 	ldbu	r3,10(r2)
   120a0:	d0a80b17 	ldw	r2,-24532(gp)
   120a4:	10800d83 	ldbu	r2,54(r2)
   120a8:	1884b03a 	or	r2,r3,r2
   120ac:	1007883a 	mov	r3,r2
   120b0:	e0bfff17 	ldw	r2,-4(fp)
   120b4:	10c00285 	stb	r3,10(r2)

    y             =  OSTCBCur->OSTCBY;            /* Task no longer ready                              */
   120b8:	d0a80b17 	ldw	r2,-24532(gp)
   120bc:	10800d03 	ldbu	r2,52(r2)
   120c0:	e0bffe05 	stb	r2,-8(fp)
    OSRdyTbl[y]  &= ~OSTCBCur->OSTCBBitX;
   120c4:	e0fffe03 	ldbu	r3,-8(fp)
   120c8:	e13ffe03 	ldbu	r4,-8(fp)
   120cc:	d0a80844 	addi	r2,gp,-24543
   120d0:	2085883a 	add	r2,r4,r2
   120d4:	10800003 	ldbu	r2,0(r2)
   120d8:	1009883a 	mov	r4,r2
   120dc:	d0a80b17 	ldw	r2,-24532(gp)
   120e0:	10800d43 	ldbu	r2,53(r2)
   120e4:	0084303a 	nor	r2,zero,r2
   120e8:	2084703a 	and	r2,r4,r2
   120ec:	1009883a 	mov	r4,r2
   120f0:	d0a80844 	addi	r2,gp,-24543
   120f4:	1885883a 	add	r2,r3,r2
   120f8:	11000005 	stb	r4,0(r2)
    if (OSRdyTbl[y] == 0) {
   120fc:	e0fffe03 	ldbu	r3,-8(fp)
   12100:	d0a80844 	addi	r2,gp,-24543
   12104:	1885883a 	add	r2,r3,r2
   12108:	10800003 	ldbu	r2,0(r2)
   1210c:	10803fcc 	andi	r2,r2,255
   12110:	1000071e 	bne	r2,zero,12130 <OS_EventTaskWait+0xfc>
        OSRdyGrp &= ~OSTCBCur->OSTCBBitY;         /* Clear event grp bit if this was only task pending */
   12114:	d0a80b17 	ldw	r2,-24532(gp)
   12118:	10800d83 	ldbu	r2,54(r2)
   1211c:	0084303a 	nor	r2,zero,r2
   12120:	1007883a 	mov	r3,r2
   12124:	d0a80803 	ldbu	r2,-24544(gp)
   12128:	1884703a 	and	r2,r3,r2
   1212c:	d0a80805 	stb	r2,-24544(gp)
    }
}
   12130:	e037883a 	mov	sp,fp
   12134:	df000017 	ldw	fp,0(sp)
   12138:	dec00104 	addi	sp,sp,4
   1213c:	f800283a 	ret

00012140 <OS_EventTaskWaitMulti>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if ((OS_EVENT_EN) && (OS_EVENT_MULTI_EN > 0))
void  OS_EventTaskWaitMulti (OS_EVENT **pevents_wait)
{
   12140:	defffb04 	addi	sp,sp,-20
   12144:	df000415 	stw	fp,16(sp)
   12148:	df000404 	addi	fp,sp,16
   1214c:	e13fff15 	stw	r4,-4(fp)
    OS_EVENT **pevents;
    OS_EVENT  *pevent;
    INT8U      y;


    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;
   12150:	d0a80b17 	ldw	r2,-24532(gp)
   12154:	10000715 	stw	zero,28(r2)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)pevents_wait;       /* Store ptr to ECBs in TCB        */
   12158:	d0a80b17 	ldw	r2,-24532(gp)
   1215c:	e0ffff17 	ldw	r3,-4(fp)
   12160:	10c00815 	stw	r3,32(r2)

    pevents =  pevents_wait;
   12164:	e0bfff17 	ldw	r2,-4(fp)
   12168:	e0bffc15 	stw	r2,-16(fp)
    pevent  = *pevents;
   1216c:	e0bffc17 	ldw	r2,-16(fp)
   12170:	10800017 	ldw	r2,0(r2)
   12174:	e0bffd15 	stw	r2,-12(fp)
    while (pevent != (OS_EVENT *)0) {                               /* Put task in waiting lists       */
   12178:	00002006 	br	121fc <OS_EventTaskWaitMulti+0xbc>
        pevent->OSEventTbl[OSTCBCur->OSTCBY] |= OSTCBCur->OSTCBBitX;
   1217c:	d0a80b17 	ldw	r2,-24532(gp)
   12180:	10800d03 	ldbu	r2,52(r2)
   12184:	10803fcc 	andi	r2,r2,255
   12188:	d0e80b17 	ldw	r3,-24532(gp)
   1218c:	18c00d03 	ldbu	r3,52(r3)
   12190:	18c03fcc 	andi	r3,r3,255
   12194:	e13ffd17 	ldw	r4,-12(fp)
   12198:	20c7883a 	add	r3,r4,r3
   1219c:	18c00204 	addi	r3,r3,8
   121a0:	190000c3 	ldbu	r4,3(r3)
   121a4:	d0e80b17 	ldw	r3,-24532(gp)
   121a8:	18c00d43 	ldbu	r3,53(r3)
   121ac:	20c6b03a 	or	r3,r4,r3
   121b0:	1809883a 	mov	r4,r3
   121b4:	e0fffd17 	ldw	r3,-12(fp)
   121b8:	1885883a 	add	r2,r3,r2
   121bc:	10800204 	addi	r2,r2,8
   121c0:	110000c5 	stb	r4,3(r2)
        pevent->OSEventGrp                   |= OSTCBCur->OSTCBBitY;
   121c4:	e0bffd17 	ldw	r2,-12(fp)
   121c8:	10c00283 	ldbu	r3,10(r2)
   121cc:	d0a80b17 	ldw	r2,-24532(gp)
   121d0:	10800d83 	ldbu	r2,54(r2)
   121d4:	1884b03a 	or	r2,r3,r2
   121d8:	1007883a 	mov	r3,r2
   121dc:	e0bffd17 	ldw	r2,-12(fp)
   121e0:	10c00285 	stb	r3,10(r2)
        pevents++;
   121e4:	e0bffc17 	ldw	r2,-16(fp)
   121e8:	10800104 	addi	r2,r2,4
   121ec:	e0bffc15 	stw	r2,-16(fp)
        pevent = *pevents;
   121f0:	e0bffc17 	ldw	r2,-16(fp)
   121f4:	10800017 	ldw	r2,0(r2)
   121f8:	e0bffd15 	stw	r2,-12(fp)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)pevents_wait;       /* Store ptr to ECBs in TCB        */

    pevents =  pevents_wait;
    pevent  = *pevents;
    while (pevent != (OS_EVENT *)0) {                               /* Put task in waiting lists       */
   121fc:	e0bffd17 	ldw	r2,-12(fp)
   12200:	103fde1e 	bne	r2,zero,1217c <__alt_mem_Flash_flash_data+0xf401217c>
        pevent->OSEventGrp                   |= OSTCBCur->OSTCBBitY;
        pevents++;
        pevent = *pevents;
    }

    y             =  OSTCBCur->OSTCBY;            /* Task no longer ready                              */
   12204:	d0a80b17 	ldw	r2,-24532(gp)
   12208:	10800d03 	ldbu	r2,52(r2)
   1220c:	e0bffe05 	stb	r2,-8(fp)
    OSRdyTbl[y]  &= ~OSTCBCur->OSTCBBitX;
   12210:	e0fffe03 	ldbu	r3,-8(fp)
   12214:	e13ffe03 	ldbu	r4,-8(fp)
   12218:	d0a80844 	addi	r2,gp,-24543
   1221c:	2085883a 	add	r2,r4,r2
   12220:	10800003 	ldbu	r2,0(r2)
   12224:	1009883a 	mov	r4,r2
   12228:	d0a80b17 	ldw	r2,-24532(gp)
   1222c:	10800d43 	ldbu	r2,53(r2)
   12230:	0084303a 	nor	r2,zero,r2
   12234:	2084703a 	and	r2,r4,r2
   12238:	1009883a 	mov	r4,r2
   1223c:	d0a80844 	addi	r2,gp,-24543
   12240:	1885883a 	add	r2,r3,r2
   12244:	11000005 	stb	r4,0(r2)
    if (OSRdyTbl[y] == 0) {
   12248:	e0fffe03 	ldbu	r3,-8(fp)
   1224c:	d0a80844 	addi	r2,gp,-24543
   12250:	1885883a 	add	r2,r3,r2
   12254:	10800003 	ldbu	r2,0(r2)
   12258:	10803fcc 	andi	r2,r2,255
   1225c:	1000071e 	bne	r2,zero,1227c <OS_EventTaskWaitMulti+0x13c>
        OSRdyGrp &= ~OSTCBCur->OSTCBBitY;         /* Clear event grp bit if this was only task pending */
   12260:	d0a80b17 	ldw	r2,-24532(gp)
   12264:	10800d83 	ldbu	r2,54(r2)
   12268:	0084303a 	nor	r2,zero,r2
   1226c:	1007883a 	mov	r3,r2
   12270:	d0a80803 	ldbu	r2,-24544(gp)
   12274:	1884703a 	and	r2,r3,r2
   12278:	d0a80805 	stb	r2,-24544(gp)
    }
}
   1227c:	e037883a 	mov	sp,fp
   12280:	df000017 	ldw	fp,0(sp)
   12284:	dec00104 	addi	sp,sp,4
   12288:	f800283a 	ret

0001228c <OS_EventTaskRemove>:
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
void  OS_EventTaskRemove (OS_TCB   *ptcb,
                          OS_EVENT *pevent)
{
   1228c:	defffc04 	addi	sp,sp,-16
   12290:	df000315 	stw	fp,12(sp)
   12294:	df000304 	addi	fp,sp,12
   12298:	e13ffe15 	stw	r4,-8(fp)
   1229c:	e17fff15 	stw	r5,-4(fp)
    INT8U  y;


    y                       =  ptcb->OSTCBY;
   122a0:	e0bffe17 	ldw	r2,-8(fp)
   122a4:	10800d03 	ldbu	r2,52(r2)
   122a8:	e0bffd05 	stb	r2,-12(fp)
    pevent->OSEventTbl[y]  &= ~ptcb->OSTCBBitX;         /* Remove task from wait list                  */
   122ac:	e0bffd03 	ldbu	r2,-12(fp)
   122b0:	e0fffd03 	ldbu	r3,-12(fp)
   122b4:	e13fff17 	ldw	r4,-4(fp)
   122b8:	20c7883a 	add	r3,r4,r3
   122bc:	18c00204 	addi	r3,r3,8
   122c0:	18c000c3 	ldbu	r3,3(r3)
   122c4:	1809883a 	mov	r4,r3
   122c8:	e0fffe17 	ldw	r3,-8(fp)
   122cc:	18c00d43 	ldbu	r3,53(r3)
   122d0:	00c6303a 	nor	r3,zero,r3
   122d4:	20c6703a 	and	r3,r4,r3
   122d8:	1809883a 	mov	r4,r3
   122dc:	e0ffff17 	ldw	r3,-4(fp)
   122e0:	1885883a 	add	r2,r3,r2
   122e4:	10800204 	addi	r2,r2,8
   122e8:	110000c5 	stb	r4,3(r2)
    if (pevent->OSEventTbl[y] == 0) {
   122ec:	e0bffd03 	ldbu	r2,-12(fp)
   122f0:	e0ffff17 	ldw	r3,-4(fp)
   122f4:	1885883a 	add	r2,r3,r2
   122f8:	10800204 	addi	r2,r2,8
   122fc:	108000c3 	ldbu	r2,3(r2)
   12300:	10803fcc 	andi	r2,r2,255
   12304:	10000a1e 	bne	r2,zero,12330 <OS_EventTaskRemove+0xa4>
        pevent->OSEventGrp &= ~ptcb->OSTCBBitY;
   12308:	e0bfff17 	ldw	r2,-4(fp)
   1230c:	10800283 	ldbu	r2,10(r2)
   12310:	1007883a 	mov	r3,r2
   12314:	e0bffe17 	ldw	r2,-8(fp)
   12318:	10800d83 	ldbu	r2,54(r2)
   1231c:	0084303a 	nor	r2,zero,r2
   12320:	1884703a 	and	r2,r3,r2
   12324:	1007883a 	mov	r3,r2
   12328:	e0bfff17 	ldw	r2,-4(fp)
   1232c:	10c00285 	stb	r3,10(r2)
    }
}
   12330:	e037883a 	mov	sp,fp
   12334:	df000017 	ldw	fp,0(sp)
   12338:	dec00104 	addi	sp,sp,4
   1233c:	f800283a 	ret

00012340 <OS_EventTaskRemoveMulti>:
*********************************************************************************************************
*/
#if ((OS_EVENT_EN) && (OS_EVENT_MULTI_EN > 0))
void  OS_EventTaskRemoveMulti (OS_TCB    *ptcb,
                               OS_EVENT **pevents_multi)
{
   12340:	defffa04 	addi	sp,sp,-24
   12344:	df000515 	stw	fp,20(sp)
   12348:	df000504 	addi	fp,sp,20
   1234c:	e13ffe15 	stw	r4,-8(fp)
   12350:	e17fff15 	stw	r5,-4(fp)
    INT16U     bity;
    INT16U     bitx;
#endif


    y       =  ptcb->OSTCBY;
   12354:	e0bffe17 	ldw	r2,-8(fp)
   12358:	10800d03 	ldbu	r2,52(r2)
   1235c:	e0bffd05 	stb	r2,-12(fp)
    bity    =  ptcb->OSTCBBitY;
   12360:	e0bffe17 	ldw	r2,-8(fp)
   12364:	10800d83 	ldbu	r2,54(r2)
   12368:	e0bffd45 	stb	r2,-11(fp)
    bitx    =  ptcb->OSTCBBitX;
   1236c:	e0bffe17 	ldw	r2,-8(fp)
   12370:	10800d43 	ldbu	r2,53(r2)
   12374:	e0bffd85 	stb	r2,-10(fp)
    pevents =  pevents_multi;
   12378:	e0bfff17 	ldw	r2,-4(fp)
   1237c:	e0bffb15 	stw	r2,-20(fp)
    pevent  = *pevents;
   12380:	e0bffb17 	ldw	r2,-20(fp)
   12384:	10800017 	ldw	r2,0(r2)
   12388:	e0bffc15 	stw	r2,-16(fp)
    while (pevent != (OS_EVENT *)0) {                   /* Remove task from all events' wait lists     */
   1238c:	00002506 	br	12424 <OS_EventTaskRemoveMulti+0xe4>
        pevent->OSEventTbl[y]  &= ~bitx;
   12390:	e0bffd03 	ldbu	r2,-12(fp)
   12394:	e0fffd03 	ldbu	r3,-12(fp)
   12398:	e13ffc17 	ldw	r4,-16(fp)
   1239c:	20c7883a 	add	r3,r4,r3
   123a0:	18c00204 	addi	r3,r3,8
   123a4:	18c000c3 	ldbu	r3,3(r3)
   123a8:	1809883a 	mov	r4,r3
   123ac:	e0fffd83 	ldbu	r3,-10(fp)
   123b0:	00c6303a 	nor	r3,zero,r3
   123b4:	20c6703a 	and	r3,r4,r3
   123b8:	1809883a 	mov	r4,r3
   123bc:	e0fffc17 	ldw	r3,-16(fp)
   123c0:	1885883a 	add	r2,r3,r2
   123c4:	10800204 	addi	r2,r2,8
   123c8:	110000c5 	stb	r4,3(r2)
        if (pevent->OSEventTbl[y] == 0) {
   123cc:	e0bffd03 	ldbu	r2,-12(fp)
   123d0:	e0fffc17 	ldw	r3,-16(fp)
   123d4:	1885883a 	add	r2,r3,r2
   123d8:	10800204 	addi	r2,r2,8
   123dc:	108000c3 	ldbu	r2,3(r2)
   123e0:	10803fcc 	andi	r2,r2,255
   123e4:	1000091e 	bne	r2,zero,1240c <OS_EventTaskRemoveMulti+0xcc>
            pevent->OSEventGrp &= ~bity;
   123e8:	e0bffc17 	ldw	r2,-16(fp)
   123ec:	10800283 	ldbu	r2,10(r2)
   123f0:	1007883a 	mov	r3,r2
   123f4:	e0bffd43 	ldbu	r2,-11(fp)
   123f8:	0084303a 	nor	r2,zero,r2
   123fc:	1884703a 	and	r2,r3,r2
   12400:	1007883a 	mov	r3,r2
   12404:	e0bffc17 	ldw	r2,-16(fp)
   12408:	10c00285 	stb	r3,10(r2)
        }
        pevents++;
   1240c:	e0bffb17 	ldw	r2,-20(fp)
   12410:	10800104 	addi	r2,r2,4
   12414:	e0bffb15 	stw	r2,-20(fp)
        pevent = *pevents;
   12418:	e0bffb17 	ldw	r2,-20(fp)
   1241c:	10800017 	ldw	r2,0(r2)
   12420:	e0bffc15 	stw	r2,-16(fp)
    y       =  ptcb->OSTCBY;
    bity    =  ptcb->OSTCBBitY;
    bitx    =  ptcb->OSTCBBitX;
    pevents =  pevents_multi;
    pevent  = *pevents;
    while (pevent != (OS_EVENT *)0) {                   /* Remove task from all events' wait lists     */
   12424:	e0bffc17 	ldw	r2,-16(fp)
   12428:	103fd91e 	bne	r2,zero,12390 <__alt_mem_Flash_flash_data+0xf4012390>
            pevent->OSEventGrp &= ~bity;
        }
        pevents++;
        pevent = *pevents;
    }
}
   1242c:	e037883a 	mov	sp,fp
   12430:	df000017 	ldw	fp,0(sp)
   12434:	dec00104 	addi	sp,sp,4
   12438:	f800283a 	ret

0001243c <OS_EventWaitListInit>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
void  OS_EventWaitListInit (OS_EVENT *pevent)
{
   1243c:	defffc04 	addi	sp,sp,-16
   12440:	df000315 	stw	fp,12(sp)
   12444:	df000304 	addi	fp,sp,12
   12448:	e13fff15 	stw	r4,-4(fp)
    INT16U *ptbl;
#endif
    INT8U   i;


    pevent->OSEventGrp = 0;                      /* No task waiting on event                           */
   1244c:	e0bfff17 	ldw	r2,-4(fp)
   12450:	10000285 	stb	zero,10(r2)
    ptbl               = &pevent->OSEventTbl[0];
   12454:	e0bfff17 	ldw	r2,-4(fp)
   12458:	108002c4 	addi	r2,r2,11
   1245c:	e0bffd15 	stw	r2,-12(fp)

    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
   12460:	e03ffe05 	stb	zero,-8(fp)
   12464:	00000706 	br	12484 <OS_EventWaitListInit+0x48>
        *ptbl++ = 0;
   12468:	e0bffd17 	ldw	r2,-12(fp)
   1246c:	10c00044 	addi	r3,r2,1
   12470:	e0fffd15 	stw	r3,-12(fp)
   12474:	10000005 	stb	zero,0(r2)


    pevent->OSEventGrp = 0;                      /* No task waiting on event                           */
    ptbl               = &pevent->OSEventTbl[0];

    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
   12478:	e0bffe03 	ldbu	r2,-8(fp)
   1247c:	10800044 	addi	r2,r2,1
   12480:	e0bffe05 	stb	r2,-8(fp)
   12484:	e0bffe03 	ldbu	r2,-8(fp)
   12488:	108000f0 	cmpltui	r2,r2,3
   1248c:	103ff61e 	bne	r2,zero,12468 <__alt_mem_Flash_flash_data+0xf4012468>
        *ptbl++ = 0;
    }
}
   12490:	e037883a 	mov	sp,fp
   12494:	df000017 	ldw	fp,0(sp)
   12498:	dec00104 	addi	sp,sp,4
   1249c:	f800283a 	ret

000124a0 <OS_InitEventList>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitEventList (void)
{
   124a0:	defffb04 	addi	sp,sp,-20
   124a4:	dfc00415 	stw	ra,16(sp)
   124a8:	df000315 	stw	fp,12(sp)
   124ac:	df000304 	addi	fp,sp,12
    INT16U     i;
    OS_EVENT  *pevent1;
    OS_EVENT  *pevent2;


    OS_MemClr((INT8U *)&OSEventTbl[0], sizeof(OSEventTbl)); /* Clear the event table                   */
   124b0:	010000b4 	movhi	r4,2
   124b4:	211d2904 	addi	r4,r4,29860
   124b8:	0142d004 	movi	r5,2880
   124bc:	00128000 	call	12800 <OS_MemClr>
    pevent1 = &OSEventTbl[0];
   124c0:	008000b4 	movhi	r2,2
   124c4:	109d2904 	addi	r2,r2,29860
   124c8:	e0bffe15 	stw	r2,-8(fp)
    pevent2 = &OSEventTbl[1];
   124cc:	008000b4 	movhi	r2,2
   124d0:	109d3504 	addi	r2,r2,29908
   124d4:	e0bfff15 	stw	r2,-4(fp)
    for (i = 0; i < (OS_MAX_EVENTS - 1); i++) {             /* Init. list of free EVENT control blocks */
   124d8:	e03ffd0d 	sth	zero,-12(fp)
   124dc:	00001306 	br	1252c <OS_InitEventList+0x8c>
        pevent1->OSEventType    = OS_EVENT_TYPE_UNUSED;
   124e0:	e0bffe17 	ldw	r2,-8(fp)
   124e4:	10000005 	stb	zero,0(r2)
        pevent1->OSEventPtr     = pevent2;
   124e8:	e0bffe17 	ldw	r2,-8(fp)
   124ec:	e0ffff17 	ldw	r3,-4(fp)
   124f0:	10c00115 	stw	r3,4(r2)
#if OS_EVENT_NAME_SIZE > 1
        pevent1->OSEventName[0] = '?';                      /* Unknown name                            */
   124f4:	e0bffe17 	ldw	r2,-8(fp)
   124f8:	00c00fc4 	movi	r3,63
   124fc:	10c00385 	stb	r3,14(r2)
        pevent1->OSEventName[1] = OS_ASCII_NUL;
   12500:	e0bffe17 	ldw	r2,-8(fp)
   12504:	100003c5 	stb	zero,15(r2)
#endif
        pevent1++;
   12508:	e0bffe17 	ldw	r2,-8(fp)
   1250c:	10800c04 	addi	r2,r2,48
   12510:	e0bffe15 	stw	r2,-8(fp)
        pevent2++;
   12514:	e0bfff17 	ldw	r2,-4(fp)
   12518:	10800c04 	addi	r2,r2,48
   1251c:	e0bfff15 	stw	r2,-4(fp)


    OS_MemClr((INT8U *)&OSEventTbl[0], sizeof(OSEventTbl)); /* Clear the event table                   */
    pevent1 = &OSEventTbl[0];
    pevent2 = &OSEventTbl[1];
    for (i = 0; i < (OS_MAX_EVENTS - 1); i++) {             /* Init. list of free EVENT control blocks */
   12520:	e0bffd0b 	ldhu	r2,-12(fp)
   12524:	10800044 	addi	r2,r2,1
   12528:	e0bffd0d 	sth	r2,-12(fp)
   1252c:	e0bffd0b 	ldhu	r2,-12(fp)
   12530:	10800ef0 	cmpltui	r2,r2,59
   12534:	103fea1e 	bne	r2,zero,124e0 <__alt_mem_Flash_flash_data+0xf40124e0>
        pevent1->OSEventName[1] = OS_ASCII_NUL;
#endif
        pevent1++;
        pevent2++;
    }
    pevent1->OSEventType            = OS_EVENT_TYPE_UNUSED;
   12538:	e0bffe17 	ldw	r2,-8(fp)
   1253c:	10000005 	stb	zero,0(r2)
    pevent1->OSEventPtr             = (OS_EVENT *)0;
   12540:	e0bffe17 	ldw	r2,-8(fp)
   12544:	10000115 	stw	zero,4(r2)
#if OS_EVENT_NAME_SIZE > 1
    pevent1->OSEventName[0]         = '?';
   12548:	e0bffe17 	ldw	r2,-8(fp)
   1254c:	00c00fc4 	movi	r3,63
   12550:	10c00385 	stb	r3,14(r2)
    pevent1->OSEventName[1]         = OS_ASCII_NUL;
   12554:	e0bffe17 	ldw	r2,-8(fp)
   12558:	100003c5 	stb	zero,15(r2)
#endif
    OSEventFreeList                 = &OSEventTbl[0];
   1255c:	008000b4 	movhi	r2,2
   12560:	109d2904 	addi	r2,r2,29860
   12564:	d0a80915 	stw	r2,-24540(gp)
    OSEventFreeList->OSEventName[0] = '?';                  /* Unknown name                            */
    OSEventFreeList->OSEventName[1] = OS_ASCII_NUL;
#endif
#endif
#endif
}
   12568:	e037883a 	mov	sp,fp
   1256c:	dfc00117 	ldw	ra,4(sp)
   12570:	df000017 	ldw	fp,0(sp)
   12574:	dec00204 	addi	sp,sp,8
   12578:	f800283a 	ret

0001257c <OS_InitMisc>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitMisc (void)
{
   1257c:	deffff04 	addi	sp,sp,-4
   12580:	df000015 	stw	fp,0(sp)
   12584:	d839883a 	mov	fp,sp
#if OS_TIME_GET_SET_EN > 0
    OSTime        = 0L;                                    /* Clear the 32-bit system clock            */
   12588:	d0280c15 	stw	zero,-24528(gp)
#endif

    OSIntNesting  = 0;                                     /* Clear the interrupt nesting counter      */
   1258c:	d0280a05 	stb	zero,-24536(gp)
    OSLockNesting = 0;                                     /* Clear the scheduling lock counter        */
   12590:	d027fc05 	stb	zero,-24592(gp)

    OSTaskCtr     = 0;                                     /* Clear the number of tasks                */
   12594:	d0280445 	stb	zero,-24559(gp)

    OSRunning     = OS_FALSE;                              /* Indicate that multitasking not started   */
   12598:	d027fc45 	stb	zero,-24591(gp)

    OSCtxSwCtr    = 0;                                     /* Clear the context switch counter         */
   1259c:	d0280115 	stw	zero,-24572(gp)
    OSIdleCtr     = 0L;                                    /* Clear the 32-bit idle counter            */
   125a0:	d027fd15 	stw	zero,-24588(gp)

#if OS_TASK_STAT_EN > 0
    OSIdleCtrRun  = 0L;
   125a4:	d0280f15 	stw	zero,-24516(gp)
    OSIdleCtrMax  = 0L;
   125a8:	d0280215 	stw	zero,-24568(gp)
    OSStatRdy     = OS_FALSE;                              /* Statistic task is not ready              */
   125ac:	d0280e05 	stb	zero,-24520(gp)
#endif
}
   125b0:	e037883a 	mov	sp,fp
   125b4:	df000017 	ldw	fp,0(sp)
   125b8:	dec00104 	addi	sp,sp,4
   125bc:	f800283a 	ret

000125c0 <OS_InitRdyList>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitRdyList (void)
{
   125c0:	defffd04 	addi	sp,sp,-12
   125c4:	df000215 	stw	fp,8(sp)
   125c8:	df000204 	addi	fp,sp,8
#else
    INT16U  *prdytbl;
#endif


    OSRdyGrp      = 0;                                     /* Clear the ready list                     */
   125cc:	d0280805 	stb	zero,-24544(gp)
    prdytbl       = &OSRdyTbl[0];
   125d0:	d0a80844 	addi	r2,gp,-24543
   125d4:	e0bfff15 	stw	r2,-4(fp)
    for (i = 0; i < OS_RDY_TBL_SIZE; i++) {
   125d8:	e03ffe05 	stb	zero,-8(fp)
   125dc:	00000706 	br	125fc <OS_InitRdyList+0x3c>
        *prdytbl++ = 0;
   125e0:	e0bfff17 	ldw	r2,-4(fp)
   125e4:	10c00044 	addi	r3,r2,1
   125e8:	e0ffff15 	stw	r3,-4(fp)
   125ec:	10000005 	stb	zero,0(r2)
#endif


    OSRdyGrp      = 0;                                     /* Clear the ready list                     */
    prdytbl       = &OSRdyTbl[0];
    for (i = 0; i < OS_RDY_TBL_SIZE; i++) {
   125f0:	e0bffe03 	ldbu	r2,-8(fp)
   125f4:	10800044 	addi	r2,r2,1
   125f8:	e0bffe05 	stb	r2,-8(fp)
   125fc:	e0bffe03 	ldbu	r2,-8(fp)
   12600:	108000f0 	cmpltui	r2,r2,3
   12604:	103ff61e 	bne	r2,zero,125e0 <__alt_mem_Flash_flash_data+0xf40125e0>
        *prdytbl++ = 0;
    }

    OSPrioCur     = 0;
   12608:	d027fe45 	stb	zero,-24583(gp)
    OSPrioHighRdy = 0;
   1260c:	d027fe05 	stb	zero,-24584(gp)

    OSTCBHighRdy  = (OS_TCB *)0;
   12610:	d0280615 	stw	zero,-24552(gp)
    OSTCBCur      = (OS_TCB *)0;
   12614:	d0280b15 	stw	zero,-24532(gp)
}
   12618:	e037883a 	mov	sp,fp
   1261c:	df000017 	ldw	fp,0(sp)
   12620:	dec00104 	addi	sp,sp,4
   12624:	f800283a 	ret

00012628 <OS_InitTaskIdle>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitTaskIdle (void)
{
   12628:	defff804 	addi	sp,sp,-32
   1262c:	dfc00715 	stw	ra,28(sp)
   12630:	df000615 	stw	fp,24(sp)
   12634:	df000604 	addi	fp,sp,24
#endif


#if OS_TASK_CREATE_EXT_EN > 0
    #if OS_STK_GROWTH == 1
    (void)OSTaskCreateExt(OS_TaskIdle,
   12638:	00bfffd4 	movui	r2,65535
   1263c:	d8800015 	stw	r2,0(sp)
   12640:	008000b4 	movhi	r2,2
   12644:	109b2904 	addi	r2,r2,27812
   12648:	d8800115 	stw	r2,4(sp)
   1264c:	00808004 	movi	r2,512
   12650:	d8800215 	stw	r2,8(sp)
   12654:	d8000315 	stw	zero,12(sp)
   12658:	008000c4 	movi	r2,3
   1265c:	d8800415 	stw	r2,16(sp)
   12660:	01000074 	movhi	r4,1
   12664:	210aae04 	addi	r4,r4,10936
   12668:	000b883a 	mov	r5,zero
   1266c:	018000b4 	movhi	r6,2
   12670:	319d2804 	addi	r6,r6,29856
   12674:	01c00504 	movi	r7,20
   12678:	00174cc0 	call	174cc <OSTaskCreateExt>
                       OS_TASK_IDLE_PRIO);
    #endif
#endif

#if OS_TASK_NAME_SIZE > 14
    OSTaskNameSet(OS_TASK_IDLE_PRIO, (INT8U *)"uC/OS-II Idle", &err);
   1267c:	01000504 	movi	r4,20
   12680:	014000b4 	movhi	r5,2
   12684:	29448204 	addi	r5,r5,4616
   12688:	e1bfff04 	addi	r6,fp,-4
   1268c:	0017d980 	call	17d98 <OSTaskNameSet>
#else
#if OS_TASK_NAME_SIZE > 7
    OSTaskNameSet(OS_TASK_IDLE_PRIO, (INT8U *)"OS-Idle", &err);
#endif
#endif
}
   12690:	e037883a 	mov	sp,fp
   12694:	dfc00117 	ldw	ra,4(sp)
   12698:	df000017 	ldw	fp,0(sp)
   1269c:	dec00204 	addi	sp,sp,8
   126a0:	f800283a 	ret

000126a4 <OS_InitTaskStat>:
*********************************************************************************************************
*/

#if OS_TASK_STAT_EN > 0
static  void  OS_InitTaskStat (void)
{
   126a4:	defff804 	addi	sp,sp,-32
   126a8:	dfc00715 	stw	ra,28(sp)
   126ac:	df000615 	stw	fp,24(sp)
   126b0:	df000604 	addi	fp,sp,24
#endif


#if OS_TASK_CREATE_EXT_EN > 0
    #if OS_STK_GROWTH == 1
    (void)OSTaskCreateExt(OS_TaskStat,
   126b4:	00bfff94 	movui	r2,65534
   126b8:	d8800015 	stw	r2,0(sp)
   126bc:	008000b4 	movhi	r2,2
   126c0:	1098b104 	addi	r2,r2,25284
   126c4:	d8800115 	stw	r2,4(sp)
   126c8:	00808004 	movi	r2,512
   126cc:	d8800215 	stw	r2,8(sp)
   126d0:	d8000315 	stw	zero,12(sp)
   126d4:	008000c4 	movi	r2,3
   126d8:	d8800415 	stw	r2,16(sp)
   126dc:	01000074 	movhi	r4,1
   126e0:	210ac504 	addi	r4,r4,11028
   126e4:	000b883a 	mov	r5,zero
   126e8:	018000b4 	movhi	r6,2
   126ec:	319ab004 	addi	r6,r6,27328
   126f0:	01c004c4 	movi	r7,19
   126f4:	00174cc0 	call	174cc <OSTaskCreateExt>
                       OS_TASK_STAT_PRIO);                             /* One higher than the idle task  */
    #endif
#endif

#if OS_TASK_NAME_SIZE > 14
    OSTaskNameSet(OS_TASK_STAT_PRIO, (INT8U *)"uC/OS-II Stat", &err);
   126f8:	010004c4 	movi	r4,19
   126fc:	014000b4 	movhi	r5,2
   12700:	29448604 	addi	r5,r5,4632
   12704:	e1bfff04 	addi	r6,fp,-4
   12708:	0017d980 	call	17d98 <OSTaskNameSet>
#else
#if OS_TASK_NAME_SIZE > 7
    OSTaskNameSet(OS_TASK_STAT_PRIO, (INT8U *)"OS-Stat", &err);
#endif
#endif
}
   1270c:	e037883a 	mov	sp,fp
   12710:	dfc00117 	ldw	ra,4(sp)
   12714:	df000017 	ldw	fp,0(sp)
   12718:	dec00204 	addi	sp,sp,8
   1271c:	f800283a 	ret

00012720 <OS_InitTCBList>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitTCBList (void)
{
   12720:	defffb04 	addi	sp,sp,-20
   12724:	dfc00415 	stw	ra,16(sp)
   12728:	df000315 	stw	fp,12(sp)
   1272c:	df000304 	addi	fp,sp,12
    INT8U    i;
    OS_TCB  *ptcb1;
    OS_TCB  *ptcb2;


    OS_MemClr((INT8U *)&OSTCBTbl[0],     sizeof(OSTCBTbl));      /* Clear all the TCBs                 */
   12730:	010000b4 	movhi	r4,2
   12734:	211ff904 	addi	r4,r4,32740
   12738:	01414404 	movi	r5,1296
   1273c:	00128000 	call	12800 <OS_MemClr>
    OS_MemClr((INT8U *)&OSTCBPrioTbl[0], sizeof(OSTCBPrioTbl));  /* Clear the priority table           */
   12740:	010000f4 	movhi	r4,3
   12744:	21213d04 	addi	r4,r4,-31500
   12748:	01401504 	movi	r5,84
   1274c:	00128000 	call	12800 <OS_MemClr>
    ptcb1 = &OSTCBTbl[0];
   12750:	008000b4 	movhi	r2,2
   12754:	109ff904 	addi	r2,r2,32740
   12758:	e0bffe15 	stw	r2,-8(fp)
    ptcb2 = &OSTCBTbl[1];
   1275c:	008000f4 	movhi	r2,3
   12760:	10a01404 	addi	r2,r2,-32688
   12764:	e0bfff15 	stw	r2,-4(fp)
    for (i = 0; i < (OS_MAX_TASKS + OS_N_SYS_TASKS - 1); i++) {  /* Init. list of free TCBs            */
   12768:	e03ffd05 	stb	zero,-12(fp)
   1276c:	00001106 	br	127b4 <OS_InitTCBList+0x94>
        ptcb1->OSTCBNext = ptcb2;
   12770:	e0bffe17 	ldw	r2,-8(fp)
   12774:	e0ffff17 	ldw	r3,-4(fp)
   12778:	10c00515 	stw	r3,20(r2)
#if OS_TASK_NAME_SIZE > 1
        ptcb1->OSTCBTaskName[0] = '?';                           /* Unknown name                       */
   1277c:	e0bffe17 	ldw	r2,-8(fp)
   12780:	00c00fc4 	movi	r3,63
   12784:	10c01305 	stb	r3,76(r2)
        ptcb1->OSTCBTaskName[1] = OS_ASCII_NUL;
   12788:	e0bffe17 	ldw	r2,-8(fp)
   1278c:	10001345 	stb	zero,77(r2)
#endif
        ptcb1++;
   12790:	e0bffe17 	ldw	r2,-8(fp)
   12794:	10801b04 	addi	r2,r2,108
   12798:	e0bffe15 	stw	r2,-8(fp)
        ptcb2++;
   1279c:	e0bfff17 	ldw	r2,-4(fp)
   127a0:	10801b04 	addi	r2,r2,108
   127a4:	e0bfff15 	stw	r2,-4(fp)

    OS_MemClr((INT8U *)&OSTCBTbl[0],     sizeof(OSTCBTbl));      /* Clear all the TCBs                 */
    OS_MemClr((INT8U *)&OSTCBPrioTbl[0], sizeof(OSTCBPrioTbl));  /* Clear the priority table           */
    ptcb1 = &OSTCBTbl[0];
    ptcb2 = &OSTCBTbl[1];
    for (i = 0; i < (OS_MAX_TASKS + OS_N_SYS_TASKS - 1); i++) {  /* Init. list of free TCBs            */
   127a8:	e0bffd03 	ldbu	r2,-12(fp)
   127ac:	10800044 	addi	r2,r2,1
   127b0:	e0bffd05 	stb	r2,-12(fp)
   127b4:	e0bffd03 	ldbu	r2,-12(fp)
   127b8:	108002f0 	cmpltui	r2,r2,11
   127bc:	103fec1e 	bne	r2,zero,12770 <__alt_mem_Flash_flash_data+0xf4012770>
        ptcb1->OSTCBTaskName[1] = OS_ASCII_NUL;
#endif
        ptcb1++;
        ptcb2++;
    }
    ptcb1->OSTCBNext = (OS_TCB *)0;                              /* Last OS_TCB                        */
   127c0:	e0bffe17 	ldw	r2,-8(fp)
   127c4:	10000515 	stw	zero,20(r2)
#if OS_TASK_NAME_SIZE > 1
    ptcb1->OSTCBTaskName[0] = '?';                               /* Unknown name                       */
   127c8:	e0bffe17 	ldw	r2,-8(fp)
   127cc:	00c00fc4 	movi	r3,63
   127d0:	10c01305 	stb	r3,76(r2)
    ptcb1->OSTCBTaskName[1] = OS_ASCII_NUL;
   127d4:	e0bffe17 	ldw	r2,-8(fp)
   127d8:	10001345 	stb	zero,77(r2)
#endif
    OSTCBList               = (OS_TCB *)0;                       /* TCB lists initializations          */
   127dc:	d027ff15 	stw	zero,-24580(gp)
    OSTCBFreeList           = &OSTCBTbl[0];
   127e0:	008000b4 	movhi	r2,2
   127e4:	109ff904 	addi	r2,r2,32740
   127e8:	d0a80315 	stw	r2,-24564(gp)
}
   127ec:	e037883a 	mov	sp,fp
   127f0:	dfc00117 	ldw	ra,4(sp)
   127f4:	df000017 	ldw	fp,0(sp)
   127f8:	dec00204 	addi	sp,sp,8
   127fc:	f800283a 	ret

00012800 <OS_MemClr>:
*                 of the alignment of the destination.
*********************************************************************************************************
*/

void  OS_MemClr (INT8U *pdest, INT16U size)
{
   12800:	defffd04 	addi	sp,sp,-12
   12804:	df000215 	stw	fp,8(sp)
   12808:	df000204 	addi	fp,sp,8
   1280c:	e13ffe15 	stw	r4,-8(fp)
   12810:	2805883a 	mov	r2,r5
   12814:	e0bfff0d 	sth	r2,-4(fp)
    while (size > 0) {
   12818:	00000706 	br	12838 <OS_MemClr+0x38>
        *pdest++ = (INT8U)0;
   1281c:	e0bffe17 	ldw	r2,-8(fp)
   12820:	10c00044 	addi	r3,r2,1
   12824:	e0fffe15 	stw	r3,-8(fp)
   12828:	10000005 	stb	zero,0(r2)
        size--;
   1282c:	e0bfff0b 	ldhu	r2,-4(fp)
   12830:	10bfffc4 	addi	r2,r2,-1
   12834:	e0bfff0d 	sth	r2,-4(fp)
*********************************************************************************************************
*/

void  OS_MemClr (INT8U *pdest, INT16U size)
{
    while (size > 0) {
   12838:	e0bfff0b 	ldhu	r2,-4(fp)
   1283c:	103ff71e 	bne	r2,zero,1281c <__alt_mem_Flash_flash_data+0xf401281c>
        *pdest++ = (INT8U)0;
        size--;
    }
}
   12840:	e037883a 	mov	sp,fp
   12844:	df000017 	ldw	fp,0(sp)
   12848:	dec00104 	addi	sp,sp,4
   1284c:	f800283a 	ret

00012850 <OS_MemCopy>:
*                 of the alignment of the source and destination.
*********************************************************************************************************
*/

void  OS_MemCopy (INT8U *pdest, INT8U *psrc, INT16U size)
{
   12850:	defffc04 	addi	sp,sp,-16
   12854:	df000315 	stw	fp,12(sp)
   12858:	df000304 	addi	fp,sp,12
   1285c:	e13ffd15 	stw	r4,-12(fp)
   12860:	e17ffe15 	stw	r5,-8(fp)
   12864:	3005883a 	mov	r2,r6
   12868:	e0bfff0d 	sth	r2,-4(fp)
    while (size > 0) {
   1286c:	00000b06 	br	1289c <OS_MemCopy+0x4c>
        *pdest++ = *psrc++;
   12870:	e0bffd17 	ldw	r2,-12(fp)
   12874:	10c00044 	addi	r3,r2,1
   12878:	e0fffd15 	stw	r3,-12(fp)
   1287c:	e0fffe17 	ldw	r3,-8(fp)
   12880:	19000044 	addi	r4,r3,1
   12884:	e13ffe15 	stw	r4,-8(fp)
   12888:	18c00003 	ldbu	r3,0(r3)
   1288c:	10c00005 	stb	r3,0(r2)
        size--;
   12890:	e0bfff0b 	ldhu	r2,-4(fp)
   12894:	10bfffc4 	addi	r2,r2,-1
   12898:	e0bfff0d 	sth	r2,-4(fp)
*********************************************************************************************************
*/

void  OS_MemCopy (INT8U *pdest, INT8U *psrc, INT16U size)
{
    while (size > 0) {
   1289c:	e0bfff0b 	ldhu	r2,-4(fp)
   128a0:	103ff31e 	bne	r2,zero,12870 <__alt_mem_Flash_flash_data+0xf4012870>
        *pdest++ = *psrc++;
        size--;
    }
}
   128a4:	e037883a 	mov	sp,fp
   128a8:	df000017 	ldw	fp,0(sp)
   128ac:	dec00104 	addi	sp,sp,4
   128b0:	f800283a 	ret

000128b4 <OS_Sched>:
*              2) Rescheduling is prevented when the scheduler is locked (see OS_SchedLock())
*********************************************************************************************************
*/

void  OS_Sched (void)
{
   128b4:	defffb04 	addi	sp,sp,-20
   128b8:	dfc00415 	stw	ra,16(sp)
   128bc:	df000315 	stw	fp,12(sp)
   128c0:	df000304 	addi	fp,sp,12
#if OS_CRITICAL_METHOD == 3                            /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
   128c4:	e03ffd15 	stw	zero,-12(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   128c8:	0005303a 	rdctl	r2,status
   128cc:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   128d0:	e0fffe17 	ldw	r3,-8(fp)
   128d4:	00bfff84 	movi	r2,-2
   128d8:	1884703a 	and	r2,r3,r2
   128dc:	1001703a 	wrctl	status,r2
  
  return context;
   128e0:	e0bffe17 	ldw	r2,-8(fp)
#endif



    OS_ENTER_CRITICAL();
   128e4:	e0bffd15 	stw	r2,-12(fp)
    if (OSIntNesting == 0) {                           /* Schedule only if all ISRs done and ...       */
   128e8:	d0a80a03 	ldbu	r2,-24536(gp)
   128ec:	10803fcc 	andi	r2,r2,255
   128f0:	10001a1e 	bne	r2,zero,1295c <OS_Sched+0xa8>
        if (OSLockNesting == 0) {                      /* ... scheduler is not locked                  */
   128f4:	d0a7fc03 	ldbu	r2,-24592(gp)
   128f8:	10803fcc 	andi	r2,r2,255
   128fc:	1000171e 	bne	r2,zero,1295c <OS_Sched+0xa8>
            OS_SchedNew();
   12900:	00129800 	call	12980 <OS_SchedNew>
            if (OSPrioHighRdy != OSPrioCur) {          /* No Ctx Sw if current task is highest rdy     */
   12904:	d0e7fe03 	ldbu	r3,-24584(gp)
   12908:	d0a7fe43 	ldbu	r2,-24583(gp)
   1290c:	18c03fcc 	andi	r3,r3,255
   12910:	10803fcc 	andi	r2,r2,255
   12914:	18801126 	beq	r3,r2,1295c <OS_Sched+0xa8>
                OSTCBHighRdy = OSTCBPrioTbl[OSPrioHighRdy];
   12918:	d0a7fe03 	ldbu	r2,-24584(gp)
   1291c:	10c03fcc 	andi	r3,r2,255
   12920:	008000f4 	movhi	r2,3
   12924:	10a13d04 	addi	r2,r2,-31500
   12928:	18c7883a 	add	r3,r3,r3
   1292c:	18c7883a 	add	r3,r3,r3
   12930:	10c5883a 	add	r2,r2,r3
   12934:	10800017 	ldw	r2,0(r2)
   12938:	d0a80615 	stw	r2,-24552(gp)
#if OS_TASK_PROFILE_EN > 0
                OSTCBHighRdy->OSTCBCtxSwCtr++;         /* Inc. # of context switches to this task      */
   1293c:	d0a80617 	ldw	r2,-24552(gp)
   12940:	10c00e17 	ldw	r3,56(r2)
   12944:	18c00044 	addi	r3,r3,1
   12948:	10c00e15 	stw	r3,56(r2)
#endif
                OSCtxSwCtr++;                          /* Increment context switch counter             */
   1294c:	d0a80117 	ldw	r2,-24572(gp)
   12950:	10800044 	addi	r2,r2,1
   12954:	d0a80115 	stw	r2,-24572(gp)
                OS_TASK_SW();                          /* Perform a context switch                     */
   12958:	00202980 	call	20298 <OSCtxSw>
   1295c:	e0bffd17 	ldw	r2,-12(fp)
   12960:	e0bfff15 	stw	r2,-4(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   12964:	e0bfff17 	ldw	r2,-4(fp)
   12968:	1001703a 	wrctl	status,r2
            }
        }
    }
    OS_EXIT_CRITICAL();
}
   1296c:	e037883a 	mov	sp,fp
   12970:	dfc00117 	ldw	ra,4(sp)
   12974:	df000017 	ldw	fp,0(sp)
   12978:	dec00204 	addi	sp,sp,8
   1297c:	f800283a 	ret

00012980 <OS_SchedNew>:
*              2) Interrupts are assumed to be disabled when this function is called.
*********************************************************************************************************
*/

static  void  OS_SchedNew (void)
{
   12980:	defffe04 	addi	sp,sp,-8
   12984:	df000115 	stw	fp,4(sp)
   12988:	df000104 	addi	fp,sp,4
#if OS_LOWEST_PRIO <= 63                         /* See if we support up to 64 tasks                   */
    INT8U   y;


    y             = OSUnMapTbl[OSRdyGrp];
   1298c:	d0a80803 	ldbu	r2,-24544(gp)
   12990:	10c03fcc 	andi	r3,r2,255
   12994:	008000b4 	movhi	r2,2
   12998:	10844204 	addi	r2,r2,4360
   1299c:	10c5883a 	add	r2,r2,r3
   129a0:	10800003 	ldbu	r2,0(r2)
   129a4:	e0bfff05 	stb	r2,-4(fp)
    OSPrioHighRdy = (INT8U)((y << 3) + OSUnMapTbl[OSRdyTbl[y]]);
   129a8:	e0bfff03 	ldbu	r2,-4(fp)
   129ac:	100490fa 	slli	r2,r2,3
   129b0:	1009883a 	mov	r4,r2
   129b4:	e0ffff03 	ldbu	r3,-4(fp)
   129b8:	d0a80844 	addi	r2,gp,-24543
   129bc:	1885883a 	add	r2,r3,r2
   129c0:	10800003 	ldbu	r2,0(r2)
   129c4:	10c03fcc 	andi	r3,r2,255
   129c8:	008000b4 	movhi	r2,2
   129cc:	10844204 	addi	r2,r2,4360
   129d0:	10c5883a 	add	r2,r2,r3
   129d4:	10800003 	ldbu	r2,0(r2)
   129d8:	2085883a 	add	r2,r4,r2
   129dc:	d0a7fe05 	stb	r2,-24584(gp)
        OSPrioHighRdy = (INT8U)((y << 4) + OSUnMapTbl[(*ptbl & 0xFF)]);
    } else {
        OSPrioHighRdy = (INT8U)((y << 4) + OSUnMapTbl[(*ptbl >> 8) & 0xFF] + 8);
    }
#endif
}
   129e0:	e037883a 	mov	sp,fp
   129e4:	df000017 	ldw	fp,0(sp)
   129e8:	dec00104 	addi	sp,sp,4
   129ec:	f800283a 	ret

000129f0 <OS_StrCopy>:
*********************************************************************************************************
*/

#if (OS_EVENT_NAME_SIZE > 1) || (OS_FLAG_NAME_SIZE > 1) || (OS_MEM_NAME_SIZE > 1) || (OS_TASK_NAME_SIZE > 1) || (OS_TMR_CFG_NAME_SIZE > 1)
INT8U  OS_StrCopy (INT8U *pdest, INT8U *psrc)
{
   129f0:	defffc04 	addi	sp,sp,-16
   129f4:	df000315 	stw	fp,12(sp)
   129f8:	df000304 	addi	fp,sp,12
   129fc:	e13ffe15 	stw	r4,-8(fp)
   12a00:	e17fff15 	stw	r5,-4(fp)
    INT8U  len;


    len = 0;
   12a04:	e03ffd05 	stb	zero,-12(fp)
    while (*psrc != OS_ASCII_NUL) {
   12a08:	00000b06 	br	12a38 <OS_StrCopy+0x48>
        *pdest++ = *psrc++;
   12a0c:	e0bffe17 	ldw	r2,-8(fp)
   12a10:	10c00044 	addi	r3,r2,1
   12a14:	e0fffe15 	stw	r3,-8(fp)
   12a18:	e0ffff17 	ldw	r3,-4(fp)
   12a1c:	19000044 	addi	r4,r3,1
   12a20:	e13fff15 	stw	r4,-4(fp)
   12a24:	18c00003 	ldbu	r3,0(r3)
   12a28:	10c00005 	stb	r3,0(r2)
        len++;
   12a2c:	e0bffd03 	ldbu	r2,-12(fp)
   12a30:	10800044 	addi	r2,r2,1
   12a34:	e0bffd05 	stb	r2,-12(fp)
{
    INT8U  len;


    len = 0;
    while (*psrc != OS_ASCII_NUL) {
   12a38:	e0bfff17 	ldw	r2,-4(fp)
   12a3c:	10800003 	ldbu	r2,0(r2)
   12a40:	10803fcc 	andi	r2,r2,255
   12a44:	103ff11e 	bne	r2,zero,12a0c <__alt_mem_Flash_flash_data+0xf4012a0c>
        *pdest++ = *psrc++;
        len++;
    }
    *pdest = OS_ASCII_NUL;
   12a48:	e0bffe17 	ldw	r2,-8(fp)
   12a4c:	10000005 	stb	zero,0(r2)
    return (len);
   12a50:	e0bffd03 	ldbu	r2,-12(fp)
}
   12a54:	e037883a 	mov	sp,fp
   12a58:	df000017 	ldw	fp,0(sp)
   12a5c:	dec00104 	addi	sp,sp,4
   12a60:	f800283a 	ret

00012a64 <OS_StrLen>:
*********************************************************************************************************
*/

#if (OS_EVENT_NAME_SIZE > 1) || (OS_FLAG_NAME_SIZE > 1) || (OS_MEM_NAME_SIZE > 1) || (OS_TASK_NAME_SIZE > 1) || (OS_TMR_CFG_NAME_SIZE > 1)
INT8U  OS_StrLen (INT8U *psrc)
{
   12a64:	defffd04 	addi	sp,sp,-12
   12a68:	df000215 	stw	fp,8(sp)
   12a6c:	df000204 	addi	fp,sp,8
   12a70:	e13fff15 	stw	r4,-4(fp)
    INT8U  len;


    len = 0;
   12a74:	e03ffe05 	stb	zero,-8(fp)
    while (*psrc != OS_ASCII_NUL) {
   12a78:	00000606 	br	12a94 <OS_StrLen+0x30>
        psrc++;
   12a7c:	e0bfff17 	ldw	r2,-4(fp)
   12a80:	10800044 	addi	r2,r2,1
   12a84:	e0bfff15 	stw	r2,-4(fp)
        len++;
   12a88:	e0bffe03 	ldbu	r2,-8(fp)
   12a8c:	10800044 	addi	r2,r2,1
   12a90:	e0bffe05 	stb	r2,-8(fp)
{
    INT8U  len;


    len = 0;
    while (*psrc != OS_ASCII_NUL) {
   12a94:	e0bfff17 	ldw	r2,-4(fp)
   12a98:	10800003 	ldbu	r2,0(r2)
   12a9c:	10803fcc 	andi	r2,r2,255
   12aa0:	103ff61e 	bne	r2,zero,12a7c <__alt_mem_Flash_flash_data+0xf4012a7c>
        psrc++;
        len++;
    }
    return (len);
   12aa4:	e0bffe03 	ldbu	r2,-8(fp)
}
   12aa8:	e037883a 	mov	sp,fp
   12aac:	df000017 	ldw	fp,0(sp)
   12ab0:	dec00104 	addi	sp,sp,4
   12ab4:	f800283a 	ret

00012ab8 <OS_TaskIdle>:
*                 power.
*********************************************************************************************************
*/

void  OS_TaskIdle (void *p_arg)
{
   12ab8:	defffa04 	addi	sp,sp,-24
   12abc:	dfc00515 	stw	ra,20(sp)
   12ac0:	df000415 	stw	fp,16(sp)
   12ac4:	df000404 	addi	fp,sp,16
   12ac8:	e13fff15 	stw	r4,-4(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   12acc:	e03ffc15 	stw	zero,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   12ad0:	0005303a 	rdctl	r2,status
   12ad4:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   12ad8:	e0fffd17 	ldw	r3,-12(fp)
   12adc:	00bfff84 	movi	r2,-2
   12ae0:	1884703a 	and	r2,r3,r2
   12ae4:	1001703a 	wrctl	status,r2
  
  return context;
   12ae8:	e0bffd17 	ldw	r2,-12(fp)



    (void)p_arg;                                 /* Prevent compiler warning for not using 'p_arg'     */
    for (;;) {
        OS_ENTER_CRITICAL();
   12aec:	e0bffc15 	stw	r2,-16(fp)
        OSIdleCtr++;
   12af0:	d0a7fd17 	ldw	r2,-24588(gp)
   12af4:	10800044 	addi	r2,r2,1
   12af8:	d0a7fd15 	stw	r2,-24588(gp)
   12afc:	e0bffc17 	ldw	r2,-16(fp)
   12b00:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   12b04:	e0bffe17 	ldw	r2,-8(fp)
   12b08:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OSTaskIdleHook();                        /* Call user definable HOOK                           */
   12b0c:	00205900 	call	20590 <OSTaskIdleHook>
    }
   12b10:	003fef06 	br	12ad0 <__alt_mem_Flash_flash_data+0xf4012ad0>

00012b14 <OS_TaskStat>:
*********************************************************************************************************
*/

#if OS_TASK_STAT_EN > 0
void  OS_TaskStat (void *p_arg)
{
   12b14:	defff804 	addi	sp,sp,-32
   12b18:	dfc00715 	stw	ra,28(sp)
   12b1c:	df000615 	stw	fp,24(sp)
   12b20:	dc400515 	stw	r17,20(sp)
   12b24:	dc000415 	stw	r16,16(sp)
   12b28:	df000604 	addi	fp,sp,24
   12b2c:	e13ffd15 	stw	r4,-12(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   12b30:	e03ffa15 	stw	zero,-24(fp)
#endif



    (void)p_arg;                                 /* Prevent compiler warning for not using 'p_arg'     */
    while (OSStatRdy == OS_FALSE) {
   12b34:	00000206 	br	12b40 <OS_TaskStat+0x2c>
        OSTimeDly(2 * OS_TICKS_PER_SEC / 10);    /* Wait until statistic task is ready                 */
   12b38:	01000044 	movi	r4,1
   12b3c:	00186c40 	call	186c4 <OSTimeDly>
#endif



    (void)p_arg;                                 /* Prevent compiler warning for not using 'p_arg'     */
    while (OSStatRdy == OS_FALSE) {
   12b40:	d0a80e03 	ldbu	r2,-24520(gp)
   12b44:	10803fcc 	andi	r2,r2,255
   12b48:	103ffb26 	beq	r2,zero,12b38 <__alt_mem_Flash_flash_data+0xf4012b38>
        OSTimeDly(2 * OS_TICKS_PER_SEC / 10);    /* Wait until statistic task is ready                 */
    }
    OSIdleCtrMax /= 100L;
   12b4c:	d0e80217 	ldw	r3,-24568(gp)
   12b50:	00947b34 	movhi	r2,20972
   12b54:	10a147c4 	addi	r2,r2,-31457
   12b58:	1888383a 	mulxuu	r4,r3,r2
   12b5c:	1885383a 	mul	r2,r3,r2
   12b60:	1021883a 	mov	r16,r2
   12b64:	2023883a 	mov	r17,r4
   12b68:	8804d17a 	srli	r2,r17,5
   12b6c:	d0a80215 	stw	r2,-24568(gp)
    if (OSIdleCtrMax == 0L) {
   12b70:	d0a80217 	ldw	r2,-24568(gp)
   12b74:	1000031e 	bne	r2,zero,12b84 <OS_TaskStat+0x70>
        OSCPUUsage = 0;
   12b78:	d0280405 	stb	zero,-24560(gp)
        (void)OSTaskSuspend(OS_PRIO_SELF);
   12b7c:	01003fc4 	movi	r4,255
   12b80:	00183180 	call	18318 <OSTaskSuspend>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   12b84:	0005303a 	rdctl	r2,status
   12b88:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   12b8c:	e0fffb17 	ldw	r3,-20(fp)
   12b90:	00bfff84 	movi	r2,-2
   12b94:	1884703a 	and	r2,r3,r2
   12b98:	1001703a 	wrctl	status,r2
  
  return context;
   12b9c:	e0bffb17 	ldw	r2,-20(fp)
    }
    for (;;) {
        OS_ENTER_CRITICAL();
   12ba0:	e0bffa15 	stw	r2,-24(fp)
        OSIdleCtrRun = OSIdleCtr;                /* Obtain the of the idle counter for the past second */
   12ba4:	d0a7fd17 	ldw	r2,-24588(gp)
   12ba8:	d0a80f15 	stw	r2,-24516(gp)
        OSIdleCtr    = 0L;                       /* Reset the idle counter for the next second         */
   12bac:	d027fd15 	stw	zero,-24588(gp)
   12bb0:	e0bffa17 	ldw	r2,-24(fp)
   12bb4:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   12bb8:	e0bffc17 	ldw	r2,-16(fp)
   12bbc:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OSCPUUsage   = (INT8U)(100L - OSIdleCtrRun / OSIdleCtrMax);
   12bc0:	d0e80f17 	ldw	r3,-24516(gp)
   12bc4:	d0a80217 	ldw	r2,-24568(gp)
   12bc8:	1885203a 	divu	r2,r3,r2
   12bcc:	1007883a 	mov	r3,r2
   12bd0:	00801904 	movi	r2,100
   12bd4:	10c5c83a 	sub	r2,r2,r3
   12bd8:	d0a80405 	stb	r2,-24560(gp)
        OSTaskStatHook();                        /* Invoke user definable hook                         */
   12bdc:	00205200 	call	20520 <OSTaskStatHook>
#if (OS_TASK_STAT_STK_CHK_EN > 0) && (OS_TASK_CREATE_EXT_EN > 0)
        OS_TaskStatStkChk();                     /* Check the stacks for each task                     */
   12be0:	0012bf00 	call	12bf0 <OS_TaskStatStkChk>
#endif
        OSTimeDly(OS_TICKS_PER_SEC / 10);        /* Accumulate OSIdleCtr for the next 1/10 second      */
   12be4:	0009883a 	mov	r4,zero
   12be8:	00186c40 	call	186c4 <OSTimeDly>
    }
   12bec:	003fe506 	br	12b84 <__alt_mem_Flash_flash_data+0xf4012b84>

00012bf0 <OS_TaskStatStkChk>:
*********************************************************************************************************
*/

#if (OS_TASK_STAT_STK_CHK_EN > 0) && (OS_TASK_CREATE_EXT_EN > 0)
void  OS_TaskStatStkChk (void)
{
   12bf0:	defffa04 	addi	sp,sp,-24
   12bf4:	dfc00515 	stw	ra,20(sp)
   12bf8:	df000415 	stw	fp,16(sp)
   12bfc:	df000404 	addi	fp,sp,16
    OS_STK_DATA  stk_data;
    INT8U        err;
    INT8U        prio;


    for (prio = 0; prio <= OS_TASK_IDLE_PRIO; prio++) {
   12c00:	e03ffc05 	stb	zero,-16(fp)
   12c04:	00002406 	br	12c98 <OS_TaskStatStkChk+0xa8>
        err = OSTaskStkChk(prio, &stk_data);
   12c08:	e0fffc03 	ldbu	r3,-16(fp)
   12c0c:	e0bffe04 	addi	r2,fp,-8
   12c10:	1809883a 	mov	r4,r3
   12c14:	100b883a 	mov	r5,r2
   12c18:	00181500 	call	18150 <OSTaskStkChk>
   12c1c:	e0bffc45 	stb	r2,-15(fp)
        if (err == OS_ERR_NONE) {
   12c20:	e0bffc43 	ldbu	r2,-15(fp)
   12c24:	1000191e 	bne	r2,zero,12c8c <OS_TaskStatStkChk+0x9c>
            ptcb = OSTCBPrioTbl[prio];
   12c28:	e0fffc03 	ldbu	r3,-16(fp)
   12c2c:	008000f4 	movhi	r2,3
   12c30:	10a13d04 	addi	r2,r2,-31500
   12c34:	18c7883a 	add	r3,r3,r3
   12c38:	18c7883a 	add	r3,r3,r3
   12c3c:	10c5883a 	add	r2,r2,r3
   12c40:	10800017 	ldw	r2,0(r2)
   12c44:	e0bffd15 	stw	r2,-12(fp)
            if (ptcb != (OS_TCB *)0) {                               /* Make sure task 'ptcb' is ...   */
   12c48:	e0bffd17 	ldw	r2,-12(fp)
   12c4c:	10000f26 	beq	r2,zero,12c8c <OS_TaskStatStkChk+0x9c>
                if (ptcb != OS_TCB_RESERVED) {                       /* ... still valid.               */
   12c50:	e0bffd17 	ldw	r2,-12(fp)
   12c54:	10800060 	cmpeqi	r2,r2,1
   12c58:	10000c1e 	bne	r2,zero,12c8c <OS_TaskStatStkChk+0x9c>
#if OS_TASK_PROFILE_EN > 0
                    #if OS_STK_GROWTH == 1
                    ptcb->OSTCBStkBase = ptcb->OSTCBStkBottom + ptcb->OSTCBStkSize;
   12c5c:	e0bffd17 	ldw	r2,-12(fp)
   12c60:	10c00217 	ldw	r3,8(r2)
   12c64:	e0bffd17 	ldw	r2,-12(fp)
   12c68:	10800317 	ldw	r2,12(r2)
   12c6c:	1085883a 	add	r2,r2,r2
   12c70:	1085883a 	add	r2,r2,r2
   12c74:	1887883a 	add	r3,r3,r2
   12c78:	e0bffd17 	ldw	r2,-12(fp)
   12c7c:	10c01115 	stw	r3,68(r2)
                    #else
                    ptcb->OSTCBStkBase = ptcb->OSTCBStkBottom - ptcb->OSTCBStkSize;
                    #endif
                    ptcb->OSTCBStkUsed = stk_data.OSUsed;            /* Store the number of bytes used */
   12c80:	e0ffff17 	ldw	r3,-4(fp)
   12c84:	e0bffd17 	ldw	r2,-12(fp)
   12c88:	10c01215 	stw	r3,72(r2)
    OS_STK_DATA  stk_data;
    INT8U        err;
    INT8U        prio;


    for (prio = 0; prio <= OS_TASK_IDLE_PRIO; prio++) {
   12c8c:	e0bffc03 	ldbu	r2,-16(fp)
   12c90:	10800044 	addi	r2,r2,1
   12c94:	e0bffc05 	stb	r2,-16(fp)
   12c98:	e0bffc03 	ldbu	r2,-16(fp)
   12c9c:	10800570 	cmpltui	r2,r2,21
   12ca0:	103fd91e 	bne	r2,zero,12c08 <__alt_mem_Flash_flash_data+0xf4012c08>
#endif
                }
            }
        }
    }
}
   12ca4:	e037883a 	mov	sp,fp
   12ca8:	dfc00117 	ldw	ra,4(sp)
   12cac:	df000017 	ldw	fp,0(sp)
   12cb0:	dec00204 	addi	sp,sp,8
   12cb4:	f800283a 	ret

00012cb8 <OS_TCBInit>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

INT8U  OS_TCBInit (INT8U prio, OS_STK *ptos, OS_STK *pbos, INT16U id, INT32U stk_size, void *pext, INT16U opt)
{
   12cb8:	defff204 	addi	sp,sp,-56
   12cbc:	dfc00d15 	stw	ra,52(sp)
   12cc0:	df000c15 	stw	fp,48(sp)
   12cc4:	df000c04 	addi	fp,sp,48
   12cc8:	e17ffc15 	stw	r5,-16(fp)
   12ccc:	e1bffd15 	stw	r6,-12(fp)
   12cd0:	3807883a 	mov	r3,r7
   12cd4:	e0800417 	ldw	r2,16(fp)
   12cd8:	e13ffb05 	stb	r4,-20(fp)
   12cdc:	e0fffe0d 	sth	r3,-8(fp)
   12ce0:	e0bfff0d 	sth	r2,-4(fp)
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
   12ce4:	e03ff415 	stw	zero,-48(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   12ce8:	0005303a 	rdctl	r2,status
   12cec:	e0bff615 	stw	r2,-40(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   12cf0:	e0fff617 	ldw	r3,-40(fp)
   12cf4:	00bfff84 	movi	r2,-2
   12cf8:	1884703a 	and	r2,r3,r2
   12cfc:	1001703a 	wrctl	status,r2
  
  return context;
   12d00:	e0bff617 	ldw	r2,-40(fp)
#endif



    OS_ENTER_CRITICAL();
   12d04:	e0bff415 	stw	r2,-48(fp)
    ptcb = OSTCBFreeList;                                  /* Get a free TCB from the free TCB list    */
   12d08:	d0a80317 	ldw	r2,-24564(gp)
   12d0c:	e0bff515 	stw	r2,-44(fp)
    if (ptcb != (OS_TCB *)0) {
   12d10:	e0bff517 	ldw	r2,-44(fp)
   12d14:	10009326 	beq	r2,zero,12f64 <OS_TCBInit+0x2ac>
        OSTCBFreeList            = ptcb->OSTCBNext;        /* Update pointer to free TCB list          */
   12d18:	e0bff517 	ldw	r2,-44(fp)
   12d1c:	10800517 	ldw	r2,20(r2)
   12d20:	d0a80315 	stw	r2,-24564(gp)
   12d24:	e0bff417 	ldw	r2,-48(fp)
   12d28:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   12d2c:	e0bff717 	ldw	r2,-36(fp)
   12d30:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        ptcb->OSTCBStkPtr        = ptos;                   /* Load Stack pointer in TCB                */
   12d34:	e0bff517 	ldw	r2,-44(fp)
   12d38:	e0fffc17 	ldw	r3,-16(fp)
   12d3c:	10c00015 	stw	r3,0(r2)
        ptcb->OSTCBPrio          = prio;                   /* Load task priority into TCB              */
   12d40:	e0bff517 	ldw	r2,-44(fp)
   12d44:	e0fffb03 	ldbu	r3,-20(fp)
   12d48:	10c00c85 	stb	r3,50(r2)
        ptcb->OSTCBStat          = OS_STAT_RDY;            /* Task is ready to run                     */
   12d4c:	e0bff517 	ldw	r2,-44(fp)
   12d50:	10000c05 	stb	zero,48(r2)
        ptcb->OSTCBStatPend      = OS_STAT_PEND_OK;        /* Clear pend status                        */
   12d54:	e0bff517 	ldw	r2,-44(fp)
   12d58:	10000c45 	stb	zero,49(r2)
        ptcb->OSTCBDly           = 0;                      /* Task is not delayed                      */
   12d5c:	e0bff517 	ldw	r2,-44(fp)
   12d60:	10000b8d 	sth	zero,46(r2)

#if OS_TASK_CREATE_EXT_EN > 0
        ptcb->OSTCBExtPtr        = pext;                   /* Store pointer to TCB extension           */
   12d64:	e0bff517 	ldw	r2,-44(fp)
   12d68:	e0c00317 	ldw	r3,12(fp)
   12d6c:	10c00115 	stw	r3,4(r2)
        ptcb->OSTCBStkSize       = stk_size;               /* Store stack size                         */
   12d70:	e0bff517 	ldw	r2,-44(fp)
   12d74:	e0c00217 	ldw	r3,8(fp)
   12d78:	10c00315 	stw	r3,12(r2)
        ptcb->OSTCBStkBottom     = pbos;                   /* Store pointer to bottom of stack         */
   12d7c:	e0bff517 	ldw	r2,-44(fp)
   12d80:	e0fffd17 	ldw	r3,-12(fp)
   12d84:	10c00215 	stw	r3,8(r2)
        ptcb->OSTCBOpt           = opt;                    /* Store task options                       */
   12d88:	e0bff517 	ldw	r2,-44(fp)
   12d8c:	e0ffff0b 	ldhu	r3,-4(fp)
   12d90:	10c0040d 	sth	r3,16(r2)
        ptcb->OSTCBId            = id;                     /* Store task ID                            */
   12d94:	e0bff517 	ldw	r2,-44(fp)
   12d98:	e0fffe0b 	ldhu	r3,-8(fp)
   12d9c:	10c0048d 	sth	r3,18(r2)
        opt                      = opt;
        id                       = id;
#endif

#if OS_TASK_DEL_EN > 0
        ptcb->OSTCBDelReq        = OS_ERR_NONE;
   12da0:	e0bff517 	ldw	r2,-44(fp)
   12da4:	10000dc5 	stb	zero,55(r2)
#endif

#if OS_LOWEST_PRIO <= 63
        ptcb->OSTCBY             = (INT8U)(prio >> 3);          /* Pre-compute X, Y, BitX and BitY     */
   12da8:	e0bffb03 	ldbu	r2,-20(fp)
   12dac:	1004d0fa 	srli	r2,r2,3
   12db0:	1007883a 	mov	r3,r2
   12db4:	e0bff517 	ldw	r2,-44(fp)
   12db8:	10c00d05 	stb	r3,52(r2)
        ptcb->OSTCBX             = (INT8U)(prio & 0x07);
   12dbc:	e0bffb03 	ldbu	r2,-20(fp)
   12dc0:	108001cc 	andi	r2,r2,7
   12dc4:	1007883a 	mov	r3,r2
   12dc8:	e0bff517 	ldw	r2,-44(fp)
   12dcc:	10c00cc5 	stb	r3,51(r2)
        ptcb->OSTCBBitY          = (INT8U)(1 << ptcb->OSTCBY);
   12dd0:	e0bff517 	ldw	r2,-44(fp)
   12dd4:	10800d03 	ldbu	r2,52(r2)
   12dd8:	10803fcc 	andi	r2,r2,255
   12ddc:	00c00044 	movi	r3,1
   12de0:	1884983a 	sll	r2,r3,r2
   12de4:	1007883a 	mov	r3,r2
   12de8:	e0bff517 	ldw	r2,-44(fp)
   12dec:	10c00d85 	stb	r3,54(r2)
        ptcb->OSTCBBitX          = (INT8U)(1 << ptcb->OSTCBX);
   12df0:	e0bff517 	ldw	r2,-44(fp)
   12df4:	10800cc3 	ldbu	r2,51(r2)
   12df8:	10803fcc 	andi	r2,r2,255
   12dfc:	00c00044 	movi	r3,1
   12e00:	1884983a 	sll	r2,r3,r2
   12e04:	1007883a 	mov	r3,r2
   12e08:	e0bff517 	ldw	r2,-44(fp)
   12e0c:	10c00d45 	stb	r3,53(r2)
        ptcb->OSTCBBitY          = (INT16U)(1 << ptcb->OSTCBY);
        ptcb->OSTCBBitX          = (INT16U)(1 << ptcb->OSTCBX);
#endif

#if (OS_EVENT_EN)
        ptcb->OSTCBEventPtr      = (OS_EVENT  *)0;         /* Task is not pending on an  event         */
   12e10:	e0bff517 	ldw	r2,-44(fp)
   12e14:	10000715 	stw	zero,28(r2)
#if (OS_EVENT_MULTI_EN > 0)
        ptcb->OSTCBEventMultiPtr = (OS_EVENT **)0;         /* Task is not pending on any events        */
   12e18:	e0bff517 	ldw	r2,-44(fp)
   12e1c:	10000815 	stw	zero,32(r2)
#endif
#endif

#if (OS_FLAG_EN > 0) && (OS_MAX_FLAGS > 0) && (OS_TASK_DEL_EN > 0)
        ptcb->OSTCBFlagNode  = (OS_FLAG_NODE *)0;          /* Task is not pending on an event flag     */
   12e20:	e0bff517 	ldw	r2,-44(fp)
   12e24:	10000a15 	stw	zero,40(r2)
#endif

#if (OS_MBOX_EN > 0) || ((OS_Q_EN > 0) && (OS_MAX_QS > 0))
        ptcb->OSTCBMsg       = (void *)0;                  /* No message received                      */
   12e28:	e0bff517 	ldw	r2,-44(fp)
   12e2c:	10000915 	stw	zero,36(r2)
#endif

#if OS_TASK_PROFILE_EN > 0
        ptcb->OSTCBCtxSwCtr    = 0L;                       /* Initialize profiling variables           */
   12e30:	e0bff517 	ldw	r2,-44(fp)
   12e34:	10000e15 	stw	zero,56(r2)
        ptcb->OSTCBCyclesStart = 0L;
   12e38:	e0bff517 	ldw	r2,-44(fp)
   12e3c:	10001015 	stw	zero,64(r2)
        ptcb->OSTCBCyclesTot   = 0L;
   12e40:	e0bff517 	ldw	r2,-44(fp)
   12e44:	10000f15 	stw	zero,60(r2)
        ptcb->OSTCBStkBase     = (OS_STK *)0;
   12e48:	e0bff517 	ldw	r2,-44(fp)
   12e4c:	10001115 	stw	zero,68(r2)
        ptcb->OSTCBStkUsed     = 0L;
   12e50:	e0bff517 	ldw	r2,-44(fp)
   12e54:	10001215 	stw	zero,72(r2)
#endif

#if OS_TASK_NAME_SIZE > 1
        ptcb->OSTCBTaskName[0] = '?';                      /* Unknown name at task creation            */
   12e58:	e0bff517 	ldw	r2,-44(fp)
   12e5c:	00c00fc4 	movi	r3,63
   12e60:	10c01305 	stb	r3,76(r2)
        ptcb->OSTCBTaskName[1] = OS_ASCII_NUL;
   12e64:	e0bff517 	ldw	r2,-44(fp)
   12e68:	10001345 	stb	zero,77(r2)
#endif

        OSTCBInitHook(ptcb);
   12e6c:	e13ff517 	ldw	r4,-44(fp)
   12e70:	00205ac0 	call	205ac <OSTCBInitHook>

        OSTaskCreateHook(ptcb);                            /* Call user defined hook                   */
   12e74:	e13ff517 	ldw	r4,-44(fp)
   12e78:	00204c40 	call	204c4 <OSTaskCreateHook>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   12e7c:	0005303a 	rdctl	r2,status
   12e80:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   12e84:	e0fff817 	ldw	r3,-32(fp)
   12e88:	00bfff84 	movi	r2,-2
   12e8c:	1884703a 	and	r2,r3,r2
   12e90:	1001703a 	wrctl	status,r2
  
  return context;
   12e94:	e0bff817 	ldw	r2,-32(fp)

        OS_ENTER_CRITICAL();
   12e98:	e0bff415 	stw	r2,-48(fp)
        OSTCBPrioTbl[prio] = ptcb;
   12e9c:	e0fffb03 	ldbu	r3,-20(fp)
   12ea0:	008000f4 	movhi	r2,3
   12ea4:	10a13d04 	addi	r2,r2,-31500
   12ea8:	18c7883a 	add	r3,r3,r3
   12eac:	18c7883a 	add	r3,r3,r3
   12eb0:	10c5883a 	add	r2,r2,r3
   12eb4:	e0fff517 	ldw	r3,-44(fp)
   12eb8:	10c00015 	stw	r3,0(r2)
        ptcb->OSTCBNext    = OSTCBList;                    /* Link into TCB chain                      */
   12ebc:	d0e7ff17 	ldw	r3,-24580(gp)
   12ec0:	e0bff517 	ldw	r2,-44(fp)
   12ec4:	10c00515 	stw	r3,20(r2)
        ptcb->OSTCBPrev    = (OS_TCB *)0;
   12ec8:	e0bff517 	ldw	r2,-44(fp)
   12ecc:	10000615 	stw	zero,24(r2)
        if (OSTCBList != (OS_TCB *)0) {
   12ed0:	d0a7ff17 	ldw	r2,-24580(gp)
   12ed4:	10000326 	beq	r2,zero,12ee4 <OS_TCBInit+0x22c>
            OSTCBList->OSTCBPrev = ptcb;
   12ed8:	d0a7ff17 	ldw	r2,-24580(gp)
   12edc:	e0fff517 	ldw	r3,-44(fp)
   12ee0:	10c00615 	stw	r3,24(r2)
        }
        OSTCBList               = ptcb;
   12ee4:	e0bff517 	ldw	r2,-44(fp)
   12ee8:	d0a7ff15 	stw	r2,-24580(gp)
        OSRdyGrp               |= ptcb->OSTCBBitY;         /* Make task ready to run                   */
   12eec:	e0bff517 	ldw	r2,-44(fp)
   12ef0:	10c00d83 	ldbu	r3,54(r2)
   12ef4:	d0a80803 	ldbu	r2,-24544(gp)
   12ef8:	1884b03a 	or	r2,r3,r2
   12efc:	d0a80805 	stb	r2,-24544(gp)
        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
   12f00:	e0bff517 	ldw	r2,-44(fp)
   12f04:	10800d03 	ldbu	r2,52(r2)
   12f08:	10c03fcc 	andi	r3,r2,255
   12f0c:	e0bff517 	ldw	r2,-44(fp)
   12f10:	10800d03 	ldbu	r2,52(r2)
   12f14:	11003fcc 	andi	r4,r2,255
   12f18:	d0a80844 	addi	r2,gp,-24543
   12f1c:	2085883a 	add	r2,r4,r2
   12f20:	11000003 	ldbu	r4,0(r2)
   12f24:	e0bff517 	ldw	r2,-44(fp)
   12f28:	10800d43 	ldbu	r2,53(r2)
   12f2c:	2084b03a 	or	r2,r4,r2
   12f30:	1009883a 	mov	r4,r2
   12f34:	d0a80844 	addi	r2,gp,-24543
   12f38:	1885883a 	add	r2,r3,r2
   12f3c:	11000005 	stb	r4,0(r2)
        OSTaskCtr++;                                       /* Increment the #tasks counter             */
   12f40:	d0a80443 	ldbu	r2,-24559(gp)
   12f44:	10800044 	addi	r2,r2,1
   12f48:	d0a80445 	stb	r2,-24559(gp)
   12f4c:	e0bff417 	ldw	r2,-48(fp)
   12f50:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   12f54:	e0bff917 	ldw	r2,-28(fp)
   12f58:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_NONE);
   12f5c:	0005883a 	mov	r2,zero
   12f60:	00000506 	br	12f78 <OS_TCBInit+0x2c0>
   12f64:	e0bff417 	ldw	r2,-48(fp)
   12f68:	e0bffa15 	stw	r2,-24(fp)
   12f6c:	e0bffa17 	ldw	r2,-24(fp)
   12f70:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_TASK_NO_MORE_TCB);
   12f74:	00801084 	movi	r2,66
}
   12f78:	e037883a 	mov	sp,fp
   12f7c:	dfc00117 	ldw	ra,4(sp)
   12f80:	df000017 	ldw	fp,0(sp)
   12f84:	dec00204 	addi	sp,sp,8
   12f88:	f800283a 	ret

00012f8c <OSDebugInit>:
*********************************************************************************************************
*/

#if OS_DEBUG_EN > 0
void  OSDebugInit (void)
{
   12f8c:	defffe04 	addi	sp,sp,-8
   12f90:	df000115 	stw	fp,4(sp)
   12f94:	df000104 	addi	fp,sp,4
    void  *ptemp;

    
    ptemp = (void *)&OSDebugEn;
   12f98:	d0a00f04 	addi	r2,gp,-32708
   12f9c:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSEndiannessTest;
   12fa0:	d0a01004 	addi	r2,gp,-32704
   12fa4:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSEventMax;
   12fa8:	d0a01184 	addi	r2,gp,-32698
   12fac:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventNameSize;
   12fb0:	d0a01204 	addi	r2,gp,-32696
   12fb4:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventEn;
   12fb8:	d0a01104 	addi	r2,gp,-32700
   12fbc:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventSize;
   12fc0:	d0a01284 	addi	r2,gp,-32694
   12fc4:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventTblSize;
   12fc8:	d0a01304 	addi	r2,gp,-32692
   12fcc:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventMultiEn;
   12fd0:	d0a01384 	addi	r2,gp,-32690
   12fd4:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSFlagEn;
   12fd8:	d0a01404 	addi	r2,gp,-32688
   12fdc:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagGrpSize;
   12fe0:	d0a01484 	addi	r2,gp,-32686
   12fe4:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagNodeSize;
   12fe8:	d0a01504 	addi	r2,gp,-32684
   12fec:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagWidth;
   12ff0:	d0a01584 	addi	r2,gp,-32682
   12ff4:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagMax;
   12ff8:	d0a01604 	addi	r2,gp,-32680
   12ffc:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagNameSize;
   13000:	d0a01684 	addi	r2,gp,-32678
   13004:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSLowestPrio;
   13008:	d0a01704 	addi	r2,gp,-32676
   1300c:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSMboxEn;
   13010:	d0a01784 	addi	r2,gp,-32674
   13014:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSMemEn;
   13018:	d0a01804 	addi	r2,gp,-32672
   1301c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSMemMax;
   13020:	d0a01884 	addi	r2,gp,-32670
   13024:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSMemNameSize;
   13028:	d0a01904 	addi	r2,gp,-32668
   1302c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSMemSize;
   13030:	d0a01984 	addi	r2,gp,-32666
   13034:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSMemTblSize;
   13038:	d0a01a04 	addi	r2,gp,-32664
   1303c:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSMutexEn;
   13040:	d0a01a84 	addi	r2,gp,-32662
   13044:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSPtrSize;
   13048:	d0a01b04 	addi	r2,gp,-32660
   1304c:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSQEn;
   13050:	d0a01b84 	addi	r2,gp,-32658
   13054:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSQMax;
   13058:	d0a01c04 	addi	r2,gp,-32656
   1305c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSQSize;
   13060:	d0a01c84 	addi	r2,gp,-32654
   13064:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSRdyTblSize;
   13068:	d0a01d04 	addi	r2,gp,-32652
   1306c:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSSemEn;
   13070:	d0a01d84 	addi	r2,gp,-32650
   13074:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSStkWidth;
   13078:	d0a01e04 	addi	r2,gp,-32648
   1307c:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSTaskCreateEn;
   13080:	d0a01e84 	addi	r2,gp,-32646
   13084:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskCreateExtEn;
   13088:	d0a01f04 	addi	r2,gp,-32644
   1308c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskDelEn;
   13090:	d0a01f84 	addi	r2,gp,-32642
   13094:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskIdleStkSize;
   13098:	d0a02004 	addi	r2,gp,-32640
   1309c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskProfileEn;
   130a0:	d0a02084 	addi	r2,gp,-32638
   130a4:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskMax;
   130a8:	d0a02104 	addi	r2,gp,-32636
   130ac:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskNameSize;
   130b0:	d0a02184 	addi	r2,gp,-32634
   130b4:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskStatEn;
   130b8:	d0a02204 	addi	r2,gp,-32632
   130bc:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskStatStkSize;
   130c0:	d0a02284 	addi	r2,gp,-32630
   130c4:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskStatStkChkEn;
   130c8:	d0a02304 	addi	r2,gp,-32628
   130cc:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskSwHookEn;
   130d0:	d0a02384 	addi	r2,gp,-32626
   130d4:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSTCBPrioTblMax;
   130d8:	d0a02404 	addi	r2,gp,-32624
   130dc:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTCBSize;
   130e0:	d0a02484 	addi	r2,gp,-32622
   130e4:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSTicksPerSec;
   130e8:	d0a02504 	addi	r2,gp,-32620
   130ec:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTimeTickHookEn;
   130f0:	d0a02584 	addi	r2,gp,-32618
   130f4:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSTmrWheelSize;
    ptemp = (void *)&OSTmrWheelTblSize;
#endif

    ptemp = (void *)&OSVersionNbr;
   130f8:	d0a02604 	addi	r2,gp,-32616
   130fc:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSDataSize;
   13100:	d0a02b04 	addi	r2,gp,-32596
   13104:	e0bfff15 	stw	r2,-4(fp)

    ptemp = ptemp;                             /* Prevent compiler warning for 'ptemp' not being used! */
}
   13108:	e037883a 	mov	sp,fp
   1310c:	df000017 	ldw	fp,0(sp)
   13110:	dec00104 	addi	sp,sp,4
   13114:	f800283a 	ret

00013118 <OSFlagAccept>:
*********************************************************************************************************
*/

#if OS_FLAG_ACCEPT_EN > 0
OS_FLAGS  OSFlagAccept (OS_FLAG_GRP *pgrp, OS_FLAGS flags, INT8U wait_type, INT8U *perr)
{
   13118:	defff204 	addi	sp,sp,-56
   1311c:	df000d15 	stw	fp,52(sp)
   13120:	df000d04 	addi	fp,sp,52
   13124:	e13ffc15 	stw	r4,-16(fp)
   13128:	2807883a 	mov	r3,r5
   1312c:	3005883a 	mov	r2,r6
   13130:	e1ffff15 	stw	r7,-4(fp)
   13134:	e0fffd0d 	sth	r3,-12(fp)
   13138:	e0bffe05 	stb	r2,-8(fp)
    OS_FLAGS      flags_rdy;
    INT8U         result;
    BOOLEAN       consume;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR     cpu_sr = 0;
   1313c:	e03ff415 	stw	zero,-48(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
   13140:	e0bfff17 	ldw	r2,-4(fp)
   13144:	1000021e 	bne	r2,zero,13150 <OSFlagAccept+0x38>
        return ((OS_FLAGS)0);
   13148:	0005883a 	mov	r2,zero
   1314c:	0000b006 	br	13410 <OSFlagAccept+0x2f8>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {                        /* Validate 'pgrp'                          */
   13150:	e0bffc17 	ldw	r2,-16(fp)
   13154:	1000051e 	bne	r2,zero,1316c <OSFlagAccept+0x54>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
   13158:	e0bfff17 	ldw	r2,-4(fp)
   1315c:	00c01b84 	movi	r3,110
   13160:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
   13164:	0005883a 	mov	r2,zero
   13168:	0000a906 	br	13410 <OSFlagAccept+0x2f8>
    }
#endif
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {          /* Validate event block type                */
   1316c:	e0bffc17 	ldw	r2,-16(fp)
   13170:	10800003 	ldbu	r2,0(r2)
   13174:	10803fcc 	andi	r2,r2,255
   13178:	10800160 	cmpeqi	r2,r2,5
   1317c:	1000051e 	bne	r2,zero,13194 <OSFlagAccept+0x7c>
        *perr = OS_ERR_EVENT_TYPE;
   13180:	e0bfff17 	ldw	r2,-4(fp)
   13184:	00c00044 	movi	r3,1
   13188:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
   1318c:	0005883a 	mov	r2,zero
   13190:	00009f06 	br	13410 <OSFlagAccept+0x2f8>
    }
    result = (INT8U)(wait_type & OS_FLAG_CONSUME);
   13194:	e0fffe03 	ldbu	r3,-8(fp)
   13198:	00bfe004 	movi	r2,-128
   1319c:	1884703a 	and	r2,r3,r2
   131a0:	e0bff505 	stb	r2,-44(fp)
    if (result != (INT8U)0) {                              /* See if we need to consume the flags      */
   131a4:	e0bff503 	ldbu	r2,-44(fp)
   131a8:	10000626 	beq	r2,zero,131c4 <OSFlagAccept+0xac>
        wait_type &= ~OS_FLAG_CONSUME;
   131ac:	e0bffe03 	ldbu	r2,-8(fp)
   131b0:	10801fcc 	andi	r2,r2,127
   131b4:	e0bffe05 	stb	r2,-8(fp)
        consume    = OS_TRUE;
   131b8:	00800044 	movi	r2,1
   131bc:	e0bff385 	stb	r2,-50(fp)
   131c0:	00000106 	br	131c8 <OSFlagAccept+0xb0>
    } else {
        consume    = OS_FALSE;
   131c4:	e03ff385 	stb	zero,-50(fp)
    }
/*$PAGE*/
    *perr = OS_ERR_NONE;                                   /* Assume NO error until proven otherwise.  */
   131c8:	e0bfff17 	ldw	r2,-4(fp)
   131cc:	10000005 	stb	zero,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   131d0:	0005303a 	rdctl	r2,status
   131d4:	e0bff615 	stw	r2,-40(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   131d8:	e0fff617 	ldw	r3,-40(fp)
   131dc:	00bfff84 	movi	r2,-2
   131e0:	1884703a 	and	r2,r3,r2
   131e4:	1001703a 	wrctl	status,r2
  
  return context;
   131e8:	e0bff617 	ldw	r2,-40(fp)
    OS_ENTER_CRITICAL();
   131ec:	e0bff415 	stw	r2,-48(fp)
    switch (wait_type) {
   131f0:	e0bffe03 	ldbu	r2,-8(fp)
   131f4:	10c00060 	cmpeqi	r3,r2,1
   131f8:	18005f1e 	bne	r3,zero,13378 <OSFlagAccept+0x260>
   131fc:	10c00088 	cmpgei	r3,r2,2
   13200:	1800021e 	bne	r3,zero,1320c <OSFlagAccept+0xf4>
   13204:	10003f26 	beq	r2,zero,13304 <OSFlagAccept+0x1ec>
   13208:	00007706 	br	133e8 <OSFlagAccept+0x2d0>
   1320c:	10c000a0 	cmpeqi	r3,r2,2
   13210:	1800031e 	bne	r3,zero,13220 <OSFlagAccept+0x108>
   13214:	108000e0 	cmpeqi	r2,r2,3
   13218:	10001e1e 	bne	r2,zero,13294 <OSFlagAccept+0x17c>
   1321c:	00007206 	br	133e8 <OSFlagAccept+0x2d0>
        case OS_FLAG_WAIT_SET_ALL:                         /* See if all required flags are set        */
             flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);     /* Extract only the bits we want   */
   13220:	e0bffc17 	ldw	r2,-16(fp)
   13224:	10c0020b 	ldhu	r3,8(r2)
   13228:	e0bffd0b 	ldhu	r2,-12(fp)
   1322c:	1884703a 	and	r2,r3,r2
   13230:	e0bff30d 	sth	r2,-52(fp)
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
   13234:	e0fff30b 	ldhu	r3,-52(fp)
   13238:	e0bffd0b 	ldhu	r2,-12(fp)
   1323c:	18800d1e 	bne	r3,r2,13274 <OSFlagAccept+0x15c>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
   13240:	e0bff383 	ldbu	r2,-50(fp)
   13244:	10800058 	cmpnei	r2,r2,1
   13248:	10000d1e 	bne	r2,zero,13280 <OSFlagAccept+0x168>
                     pgrp->OSFlagFlags &= ~flags_rdy;      /* Clear ONLY the flags that we wanted      */
   1324c:	e0bffc17 	ldw	r2,-16(fp)
   13250:	1080020b 	ldhu	r2,8(r2)
   13254:	1007883a 	mov	r3,r2
   13258:	e0bff30b 	ldhu	r2,-52(fp)
   1325c:	0084303a 	nor	r2,zero,r2
   13260:	1884703a 	and	r2,r3,r2
   13264:	1007883a 	mov	r3,r2
   13268:	e0bffc17 	ldw	r2,-16(fp)
   1326c:	10c0020d 	sth	r3,8(r2)
   13270:	00000306 	br	13280 <OSFlagAccept+0x168>
                 }
             } else {
                 *perr = OS_ERR_FLAG_NOT_RDY;
   13274:	e0bfff17 	ldw	r2,-4(fp)
   13278:	00c01c04 	movi	r3,112
   1327c:	10c00005 	stb	r3,0(r2)
   13280:	e0bff417 	ldw	r2,-48(fp)
   13284:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   13288:	e0bff717 	ldw	r2,-36(fp)
   1328c:	1001703a 	wrctl	status,r2
             }
             OS_EXIT_CRITICAL();
             break;
   13290:	00005e06 	br	1340c <OSFlagAccept+0x2f4>

        case OS_FLAG_WAIT_SET_ANY:
             flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);     /* Extract only the bits we want   */
   13294:	e0bffc17 	ldw	r2,-16(fp)
   13298:	10c0020b 	ldhu	r3,8(r2)
   1329c:	e0bffd0b 	ldhu	r2,-12(fp)
   132a0:	1884703a 	and	r2,r3,r2
   132a4:	e0bff30d 	sth	r2,-52(fp)
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag set                      */
   132a8:	e0bff30b 	ldhu	r2,-52(fp)
   132ac:	10000d26 	beq	r2,zero,132e4 <OSFlagAccept+0x1cc>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
   132b0:	e0bff383 	ldbu	r2,-50(fp)
   132b4:	10800058 	cmpnei	r2,r2,1
   132b8:	10000d1e 	bne	r2,zero,132f0 <OSFlagAccept+0x1d8>
                     pgrp->OSFlagFlags &= ~flags_rdy;      /* Clear ONLY the flags that we got         */
   132bc:	e0bffc17 	ldw	r2,-16(fp)
   132c0:	1080020b 	ldhu	r2,8(r2)
   132c4:	1007883a 	mov	r3,r2
   132c8:	e0bff30b 	ldhu	r2,-52(fp)
   132cc:	0084303a 	nor	r2,zero,r2
   132d0:	1884703a 	and	r2,r3,r2
   132d4:	1007883a 	mov	r3,r2
   132d8:	e0bffc17 	ldw	r2,-16(fp)
   132dc:	10c0020d 	sth	r3,8(r2)
   132e0:	00000306 	br	132f0 <OSFlagAccept+0x1d8>
                 }
             } else {
                 *perr = OS_ERR_FLAG_NOT_RDY;
   132e4:	e0bfff17 	ldw	r2,-4(fp)
   132e8:	00c01c04 	movi	r3,112
   132ec:	10c00005 	stb	r3,0(r2)
   132f0:	e0bff417 	ldw	r2,-48(fp)
   132f4:	e0bff815 	stw	r2,-32(fp)
   132f8:	e0bff817 	ldw	r2,-32(fp)
   132fc:	1001703a 	wrctl	status,r2
             }
             OS_EXIT_CRITICAL();
             break;
   13300:	00004206 	br	1340c <OSFlagAccept+0x2f4>

#if OS_FLAG_WAIT_CLR_EN > 0
        case OS_FLAG_WAIT_CLR_ALL:                         /* See if all required flags are cleared    */
             flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags);  /* Extract only the bits we want     */
   13304:	e0bffc17 	ldw	r2,-16(fp)
   13308:	1080020b 	ldhu	r2,8(r2)
   1330c:	0084303a 	nor	r2,zero,r2
   13310:	1007883a 	mov	r3,r2
   13314:	e0bffd0b 	ldhu	r2,-12(fp)
   13318:	1884703a 	and	r2,r3,r2
   1331c:	e0bff30d 	sth	r2,-52(fp)
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
   13320:	e0fff30b 	ldhu	r3,-52(fp)
   13324:	e0bffd0b 	ldhu	r2,-12(fp)
   13328:	18800b1e 	bne	r3,r2,13358 <OSFlagAccept+0x240>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
   1332c:	e0bff383 	ldbu	r2,-50(fp)
   13330:	10800058 	cmpnei	r2,r2,1
   13334:	10000b1e 	bne	r2,zero,13364 <OSFlagAccept+0x24c>
                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we wanted        */
   13338:	e0bffc17 	ldw	r2,-16(fp)
   1333c:	10c0020b 	ldhu	r3,8(r2)
   13340:	e0bff30b 	ldhu	r2,-52(fp)
   13344:	1884b03a 	or	r2,r3,r2
   13348:	1007883a 	mov	r3,r2
   1334c:	e0bffc17 	ldw	r2,-16(fp)
   13350:	10c0020d 	sth	r3,8(r2)
   13354:	00000306 	br	13364 <OSFlagAccept+0x24c>
                 }
             } else {
                 *perr = OS_ERR_FLAG_NOT_RDY;
   13358:	e0bfff17 	ldw	r2,-4(fp)
   1335c:	00c01c04 	movi	r3,112
   13360:	10c00005 	stb	r3,0(r2)
   13364:	e0bff417 	ldw	r2,-48(fp)
   13368:	e0bff915 	stw	r2,-28(fp)
   1336c:	e0bff917 	ldw	r2,-28(fp)
   13370:	1001703a 	wrctl	status,r2
             }
             OS_EXIT_CRITICAL();
             break;
   13374:	00002506 	br	1340c <OSFlagAccept+0x2f4>

        case OS_FLAG_WAIT_CLR_ANY:
             flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags); /* Extract only the bits we want      */
   13378:	e0bffc17 	ldw	r2,-16(fp)
   1337c:	1080020b 	ldhu	r2,8(r2)
   13380:	0084303a 	nor	r2,zero,r2
   13384:	1007883a 	mov	r3,r2
   13388:	e0bffd0b 	ldhu	r2,-12(fp)
   1338c:	1884703a 	and	r2,r3,r2
   13390:	e0bff30d 	sth	r2,-52(fp)
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag cleared                  */
   13394:	e0bff30b 	ldhu	r2,-52(fp)
   13398:	10000b26 	beq	r2,zero,133c8 <OSFlagAccept+0x2b0>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
   1339c:	e0bff383 	ldbu	r2,-50(fp)
   133a0:	10800058 	cmpnei	r2,r2,1
   133a4:	10000b1e 	bne	r2,zero,133d4 <OSFlagAccept+0x2bc>
                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we got           */
   133a8:	e0bffc17 	ldw	r2,-16(fp)
   133ac:	10c0020b 	ldhu	r3,8(r2)
   133b0:	e0bff30b 	ldhu	r2,-52(fp)
   133b4:	1884b03a 	or	r2,r3,r2
   133b8:	1007883a 	mov	r3,r2
   133bc:	e0bffc17 	ldw	r2,-16(fp)
   133c0:	10c0020d 	sth	r3,8(r2)
   133c4:	00000306 	br	133d4 <OSFlagAccept+0x2bc>
                 }
             } else {
                 *perr = OS_ERR_FLAG_NOT_RDY;
   133c8:	e0bfff17 	ldw	r2,-4(fp)
   133cc:	00c01c04 	movi	r3,112
   133d0:	10c00005 	stb	r3,0(r2)
   133d4:	e0bff417 	ldw	r2,-48(fp)
   133d8:	e0bffa15 	stw	r2,-24(fp)
   133dc:	e0bffa17 	ldw	r2,-24(fp)
   133e0:	1001703a 	wrctl	status,r2
             }
             OS_EXIT_CRITICAL();
             break;
   133e4:	00000906 	br	1340c <OSFlagAccept+0x2f4>
   133e8:	e0bff417 	ldw	r2,-48(fp)
   133ec:	e0bffb15 	stw	r2,-20(fp)
   133f0:	e0bffb17 	ldw	r2,-20(fp)
   133f4:	1001703a 	wrctl	status,r2
#endif

        default:
             OS_EXIT_CRITICAL();
             flags_rdy = (OS_FLAGS)0;
   133f8:	e03ff30d 	sth	zero,-52(fp)
             *perr     = OS_ERR_FLAG_WAIT_TYPE;
   133fc:	e0bfff17 	ldw	r2,-4(fp)
   13400:	00c01bc4 	movi	r3,111
   13404:	10c00005 	stb	r3,0(r2)
             break;
   13408:	0001883a 	nop
    }
    return (flags_rdy);
   1340c:	e0bff30b 	ldhu	r2,-52(fp)
}
   13410:	e037883a 	mov	sp,fp
   13414:	df000017 	ldw	fp,0(sp)
   13418:	dec00104 	addi	sp,sp,4
   1341c:	f800283a 	ret

00013420 <OSFlagCreate>:
* Called from: Task ONLY
*********************************************************************************************************
*/

OS_FLAG_GRP  *OSFlagCreate (OS_FLAGS flags, INT8U *perr)
{
   13420:	defff804 	addi	sp,sp,-32
   13424:	df000715 	stw	fp,28(sp)
   13428:	df000704 	addi	fp,sp,28
   1342c:	2005883a 	mov	r2,r4
   13430:	e17fff15 	stw	r5,-4(fp)
   13434:	e0bffe0d 	sth	r2,-8(fp)
    OS_FLAG_GRP *pgrp;
#if OS_CRITICAL_METHOD == 3                         /* Allocate storage for CPU status register        */
    OS_CPU_SR    cpu_sr = 0;
   13438:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                       /* Validate 'perr'                                 */
   1343c:	e0bfff17 	ldw	r2,-4(fp)
   13440:	1000021e 	bne	r2,zero,1344c <OSFlagCreate+0x2c>
        return ((OS_FLAG_GRP *)0);
   13444:	0005883a 	mov	r2,zero
   13448:	00003b06 	br	13538 <OSFlagCreate+0x118>
    }
#endif
    if (OSIntNesting > 0) {                         /* See if called from ISR ...                      */
   1344c:	008000b4 	movhi	r2,2
   13450:	10948f04 	addi	r2,r2,21052
   13454:	10800003 	ldbu	r2,0(r2)
   13458:	10803fcc 	andi	r2,r2,255
   1345c:	10000526 	beq	r2,zero,13474 <OSFlagCreate+0x54>
        *perr = OS_ERR_CREATE_ISR;                  /* ... can't CREATE from an ISR                    */
   13460:	e0bfff17 	ldw	r2,-4(fp)
   13464:	00c00404 	movi	r3,16
   13468:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAG_GRP *)0);
   1346c:	0005883a 	mov	r2,zero
   13470:	00003106 	br	13538 <OSFlagCreate+0x118>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   13474:	0005303a 	rdctl	r2,status
   13478:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1347c:	e0fffb17 	ldw	r3,-20(fp)
   13480:	00bfff84 	movi	r2,-2
   13484:	1884703a 	and	r2,r3,r2
   13488:	1001703a 	wrctl	status,r2
  
  return context;
   1348c:	e0bffb17 	ldw	r2,-20(fp)
    }
    OS_ENTER_CRITICAL();
   13490:	e0bff915 	stw	r2,-28(fp)
    pgrp = OSFlagFreeList;                          /* Get next free event flag                        */
   13494:	008000b4 	movhi	r2,2
   13498:	10949204 	addi	r2,r2,21064
   1349c:	10800017 	ldw	r2,0(r2)
   134a0:	e0bffa15 	stw	r2,-24(fp)
    if (pgrp != (OS_FLAG_GRP *)0) {                 /* See if we have event flag groups available      */
   134a4:	e0bffa17 	ldw	r2,-24(fp)
   134a8:	10001b26 	beq	r2,zero,13518 <OSFlagCreate+0xf8>
                                                    /* Adjust free list                                */
        OSFlagFreeList       = (OS_FLAG_GRP *)OSFlagFreeList->OSFlagWaitList;
   134ac:	008000b4 	movhi	r2,2
   134b0:	10949204 	addi	r2,r2,21064
   134b4:	10800017 	ldw	r2,0(r2)
   134b8:	10c00117 	ldw	r3,4(r2)
   134bc:	008000b4 	movhi	r2,2
   134c0:	10949204 	addi	r2,r2,21064
   134c4:	10c00015 	stw	r3,0(r2)
        pgrp->OSFlagType     = OS_EVENT_TYPE_FLAG;  /* Set to event flag group type                    */
   134c8:	e0bffa17 	ldw	r2,-24(fp)
   134cc:	00c00144 	movi	r3,5
   134d0:	10c00005 	stb	r3,0(r2)
        pgrp->OSFlagFlags    = flags;               /* Set to desired initial value                    */
   134d4:	e0bffa17 	ldw	r2,-24(fp)
   134d8:	e0fffe0b 	ldhu	r3,-8(fp)
   134dc:	10c0020d 	sth	r3,8(r2)
        pgrp->OSFlagWaitList = (void *)0;           /* Clear list of tasks waiting on flags            */
   134e0:	e0bffa17 	ldw	r2,-24(fp)
   134e4:	10000115 	stw	zero,4(r2)
#if OS_FLAG_NAME_SIZE > 1
        pgrp->OSFlagName[0]  = '?';
   134e8:	e0bffa17 	ldw	r2,-24(fp)
   134ec:	00c00fc4 	movi	r3,63
   134f0:	10c00285 	stb	r3,10(r2)
        pgrp->OSFlagName[1]  = OS_ASCII_NUL;
   134f4:	e0bffa17 	ldw	r2,-24(fp)
   134f8:	100002c5 	stb	zero,11(r2)
   134fc:	e0bff917 	ldw	r2,-28(fp)
   13500:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   13504:	e0bffc17 	ldw	r2,-16(fp)
   13508:	1001703a 	wrctl	status,r2
#endif
        OS_EXIT_CRITICAL();
        *perr                = OS_ERR_NONE;
   1350c:	e0bfff17 	ldw	r2,-4(fp)
   13510:	10000005 	stb	zero,0(r2)
   13514:	00000706 	br	13534 <OSFlagCreate+0x114>
   13518:	e0bff917 	ldw	r2,-28(fp)
   1351c:	e0bffd15 	stw	r2,-12(fp)
   13520:	e0bffd17 	ldw	r2,-12(fp)
   13524:	1001703a 	wrctl	status,r2
    } else {
        OS_EXIT_CRITICAL();
        *perr                = OS_ERR_FLAG_GRP_DEPLETED;
   13528:	e0bfff17 	ldw	r2,-4(fp)
   1352c:	00c01c84 	movi	r3,114
   13530:	10c00005 	stb	r3,0(r2)
    }
    return (pgrp);                                  /* Return pointer to event flag group              */
   13534:	e0bffa17 	ldw	r2,-24(fp)
}
   13538:	e037883a 	mov	sp,fp
   1353c:	df000017 	ldw	fp,0(sp)
   13540:	dec00104 	addi	sp,sp,4
   13544:	f800283a 	ret

00013548 <OSFlagDel>:
*********************************************************************************************************
*/

#if OS_FLAG_DEL_EN > 0
OS_FLAG_GRP  *OSFlagDel (OS_FLAG_GRP *pgrp, INT8U opt, INT8U *perr)
{
   13548:	defff204 	addi	sp,sp,-56
   1354c:	dfc00d15 	stw	ra,52(sp)
   13550:	df000c15 	stw	fp,48(sp)
   13554:	df000c04 	addi	fp,sp,48
   13558:	e13ffd15 	stw	r4,-12(fp)
   1355c:	2805883a 	mov	r2,r5
   13560:	e1bfff15 	stw	r6,-4(fp)
   13564:	e0bffe05 	stb	r2,-8(fp)
    BOOLEAN       tasks_waiting;
    OS_FLAG_NODE *pnode;
    OS_FLAG_GRP  *pgrp_return;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR     cpu_sr = 0;
   13568:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
   1356c:	e0bfff17 	ldw	r2,-4(fp)
   13570:	1000021e 	bne	r2,zero,1357c <OSFlagDel+0x34>
        return (pgrp);
   13574:	e0bffd17 	ldw	r2,-12(fp)
   13578:	00008a06 	br	137a4 <OSFlagDel+0x25c>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {                        /* Validate 'pgrp'                          */
   1357c:	e0bffd17 	ldw	r2,-12(fp)
   13580:	1000051e 	bne	r2,zero,13598 <OSFlagDel+0x50>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
   13584:	e0bfff17 	ldw	r2,-4(fp)
   13588:	00c01b84 	movi	r3,110
   1358c:	10c00005 	stb	r3,0(r2)
        return (pgrp);
   13590:	e0bffd17 	ldw	r2,-12(fp)
   13594:	00008306 	br	137a4 <OSFlagDel+0x25c>
    }
#endif
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
   13598:	008000b4 	movhi	r2,2
   1359c:	10948f04 	addi	r2,r2,21052
   135a0:	10800003 	ldbu	r2,0(r2)
   135a4:	10803fcc 	andi	r2,r2,255
   135a8:	10000526 	beq	r2,zero,135c0 <OSFlagDel+0x78>
        *perr = OS_ERR_DEL_ISR;                            /* ... can't DELETE from an ISR             */
   135ac:	e0bfff17 	ldw	r2,-4(fp)
   135b0:	00c003c4 	movi	r3,15
   135b4:	10c00005 	stb	r3,0(r2)
        return (pgrp);
   135b8:	e0bffd17 	ldw	r2,-12(fp)
   135bc:	00007906 	br	137a4 <OSFlagDel+0x25c>
    }
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {          /* Validate event group type                */
   135c0:	e0bffd17 	ldw	r2,-12(fp)
   135c4:	10800003 	ldbu	r2,0(r2)
   135c8:	10803fcc 	andi	r2,r2,255
   135cc:	10800160 	cmpeqi	r2,r2,5
   135d0:	1000051e 	bne	r2,zero,135e8 <OSFlagDel+0xa0>
        *perr = OS_ERR_EVENT_TYPE;
   135d4:	e0bfff17 	ldw	r2,-4(fp)
   135d8:	00c00044 	movi	r3,1
   135dc:	10c00005 	stb	r3,0(r2)
        return (pgrp);
   135e0:	e0bffd17 	ldw	r2,-12(fp)
   135e4:	00006f06 	br	137a4 <OSFlagDel+0x25c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   135e8:	0005303a 	rdctl	r2,status
   135ec:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   135f0:	e0fff817 	ldw	r3,-32(fp)
   135f4:	00bfff84 	movi	r2,-2
   135f8:	1884703a 	and	r2,r3,r2
   135fc:	1001703a 	wrctl	status,r2
  
  return context;
   13600:	e0bff817 	ldw	r2,-32(fp)
    }
    OS_ENTER_CRITICAL();
   13604:	e0bff715 	stw	r2,-36(fp)
    if (pgrp->OSFlagWaitList != (void *)0) {               /* See if any tasks waiting on event flags  */
   13608:	e0bffd17 	ldw	r2,-12(fp)
   1360c:	10800117 	ldw	r2,4(r2)
   13610:	10000326 	beq	r2,zero,13620 <OSFlagDel+0xd8>
        tasks_waiting = OS_TRUE;                           /* Yes                                      */
   13614:	00800044 	movi	r2,1
   13618:	e0bff405 	stb	r2,-48(fp)
   1361c:	00000106 	br	13624 <OSFlagDel+0xdc>
    } else {
        tasks_waiting = OS_FALSE;                          /* No                                       */
   13620:	e03ff405 	stb	zero,-48(fp)
    }
    switch (opt) {
   13624:	e0bffe03 	ldbu	r2,-8(fp)
   13628:	10000326 	beq	r2,zero,13638 <OSFlagDel+0xf0>
   1362c:	10800060 	cmpeqi	r2,r2,1
   13630:	1000271e 	bne	r2,zero,136d0 <OSFlagDel+0x188>
   13634:	00005006 	br	13778 <OSFlagDel+0x230>
        case OS_DEL_NO_PEND:                               /* Delete group if no task waiting          */
             if (tasks_waiting == OS_FALSE) {
   13638:	e0bff403 	ldbu	r2,-48(fp)
   1363c:	10001a1e 	bne	r2,zero,136a8 <OSFlagDel+0x160>
#if OS_FLAG_NAME_SIZE > 1
                 pgrp->OSFlagName[0]  = '?';               /* Unknown name                             */
   13640:	e0bffd17 	ldw	r2,-12(fp)
   13644:	00c00fc4 	movi	r3,63
   13648:	10c00285 	stb	r3,10(r2)
                 pgrp->OSFlagName[1]  = OS_ASCII_NUL;
   1364c:	e0bffd17 	ldw	r2,-12(fp)
   13650:	100002c5 	stb	zero,11(r2)
#endif
                 pgrp->OSFlagType     = OS_EVENT_TYPE_UNUSED;
   13654:	e0bffd17 	ldw	r2,-12(fp)
   13658:	10000005 	stb	zero,0(r2)
                 pgrp->OSFlagWaitList = (void *)OSFlagFreeList; /* Return group to free list           */
   1365c:	008000b4 	movhi	r2,2
   13660:	10949204 	addi	r2,r2,21064
   13664:	10c00017 	ldw	r3,0(r2)
   13668:	e0bffd17 	ldw	r2,-12(fp)
   1366c:	10c00115 	stw	r3,4(r2)
                 pgrp->OSFlagFlags    = (OS_FLAGS)0;
   13670:	e0bffd17 	ldw	r2,-12(fp)
   13674:	1000020d 	sth	zero,8(r2)
                 OSFlagFreeList       = pgrp;
   13678:	008000b4 	movhi	r2,2
   1367c:	10949204 	addi	r2,r2,21064
   13680:	e0fffd17 	ldw	r3,-12(fp)
   13684:	10c00015 	stw	r3,0(r2)
   13688:	e0bff717 	ldw	r2,-36(fp)
   1368c:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   13690:	e0bff917 	ldw	r2,-28(fp)
   13694:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                = OS_ERR_NONE;
   13698:	e0bfff17 	ldw	r2,-4(fp)
   1369c:	10000005 	stb	zero,0(r2)
                 pgrp_return          = (OS_FLAG_GRP *)0;  /* Event Flag Group has been deleted        */
   136a0:	e03ff615 	stw	zero,-40(fp)
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                = OS_ERR_TASK_WAITING;
                 pgrp_return          = pgrp;
             }
             break;
   136a4:	00003e06 	br	137a0 <OSFlagDel+0x258>
   136a8:	e0bff717 	ldw	r2,-36(fp)
   136ac:	e0bffa15 	stw	r2,-24(fp)
   136b0:	e0bffa17 	ldw	r2,-24(fp)
   136b4:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                = OS_ERR_NONE;
                 pgrp_return          = (OS_FLAG_GRP *)0;  /* Event Flag Group has been deleted        */
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                = OS_ERR_TASK_WAITING;
   136b8:	e0bfff17 	ldw	r2,-4(fp)
   136bc:	00c01244 	movi	r3,73
   136c0:	10c00005 	stb	r3,0(r2)
                 pgrp_return          = pgrp;
   136c4:	e0bffd17 	ldw	r2,-12(fp)
   136c8:	e0bff615 	stw	r2,-40(fp)
             }
             break;
   136cc:	00003406 	br	137a0 <OSFlagDel+0x258>

        case OS_DEL_ALWAYS:                                /* Always delete the event flag group       */
             pnode = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
   136d0:	e0bffd17 	ldw	r2,-12(fp)
   136d4:	10800117 	ldw	r2,4(r2)
   136d8:	e0bff515 	stw	r2,-44(fp)
             while (pnode != (OS_FLAG_NODE *)0) {          /* Ready ALL tasks waiting for flags        */
   136dc:	00000606 	br	136f8 <OSFlagDel+0x1b0>
                 (void)OS_FlagTaskRdy(pnode, (OS_FLAGS)0);
   136e0:	e13ff517 	ldw	r4,-44(fp)
   136e4:	000b883a 	mov	r5,zero
   136e8:	00147840 	call	14784 <OS_FlagTaskRdy>
                 pnode = (OS_FLAG_NODE *)pnode->OSFlagNodeNext;
   136ec:	e0bff517 	ldw	r2,-44(fp)
   136f0:	10800017 	ldw	r2,0(r2)
   136f4:	e0bff515 	stw	r2,-44(fp)
             }
             break;

        case OS_DEL_ALWAYS:                                /* Always delete the event flag group       */
             pnode = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
             while (pnode != (OS_FLAG_NODE *)0) {          /* Ready ALL tasks waiting for flags        */
   136f8:	e0bff517 	ldw	r2,-44(fp)
   136fc:	103ff81e 	bne	r2,zero,136e0 <__alt_mem_Flash_flash_data+0xf40136e0>
                 (void)OS_FlagTaskRdy(pnode, (OS_FLAGS)0);
                 pnode = (OS_FLAG_NODE *)pnode->OSFlagNodeNext;
             }
#if OS_FLAG_NAME_SIZE > 1
             pgrp->OSFlagName[0]  = '?';                   /* Unknown name                             */
   13700:	e0bffd17 	ldw	r2,-12(fp)
   13704:	00c00fc4 	movi	r3,63
   13708:	10c00285 	stb	r3,10(r2)
             pgrp->OSFlagName[1]  = OS_ASCII_NUL;
   1370c:	e0bffd17 	ldw	r2,-12(fp)
   13710:	100002c5 	stb	zero,11(r2)
#endif
             pgrp->OSFlagType     = OS_EVENT_TYPE_UNUSED;
   13714:	e0bffd17 	ldw	r2,-12(fp)
   13718:	10000005 	stb	zero,0(r2)
             pgrp->OSFlagWaitList = (void *)OSFlagFreeList;/* Return group to free list                */
   1371c:	008000b4 	movhi	r2,2
   13720:	10949204 	addi	r2,r2,21064
   13724:	10c00017 	ldw	r3,0(r2)
   13728:	e0bffd17 	ldw	r2,-12(fp)
   1372c:	10c00115 	stw	r3,4(r2)
             pgrp->OSFlagFlags    = (OS_FLAGS)0;
   13730:	e0bffd17 	ldw	r2,-12(fp)
   13734:	1000020d 	sth	zero,8(r2)
             OSFlagFreeList       = pgrp;
   13738:	008000b4 	movhi	r2,2
   1373c:	10949204 	addi	r2,r2,21064
   13740:	e0fffd17 	ldw	r3,-12(fp)
   13744:	10c00015 	stw	r3,0(r2)
   13748:	e0bff717 	ldw	r2,-36(fp)
   1374c:	e0bffb15 	stw	r2,-20(fp)
   13750:	e0bffb17 	ldw	r2,-20(fp)
   13754:	1001703a 	wrctl	status,r2
             OS_EXIT_CRITICAL();
             if (tasks_waiting == OS_TRUE) {               /* Reschedule only if task(s) were waiting  */
   13758:	e0bff403 	ldbu	r2,-48(fp)
   1375c:	10800058 	cmpnei	r2,r2,1
   13760:	1000011e 	bne	r2,zero,13768 <OSFlagDel+0x220>
                 OS_Sched();                               /* Find highest priority task ready to run  */
   13764:	00128b40 	call	128b4 <OS_Sched>
             }
             *perr = OS_ERR_NONE;
   13768:	e0bfff17 	ldw	r2,-4(fp)
   1376c:	10000005 	stb	zero,0(r2)
             pgrp_return          = (OS_FLAG_GRP *)0;      /* Event Flag Group has been deleted        */
   13770:	e03ff615 	stw	zero,-40(fp)
             break;
   13774:	00000a06 	br	137a0 <OSFlagDel+0x258>
   13778:	e0bff717 	ldw	r2,-36(fp)
   1377c:	e0bffc15 	stw	r2,-16(fp)
   13780:	e0bffc17 	ldw	r2,-16(fp)
   13784:	1001703a 	wrctl	status,r2

        default:
             OS_EXIT_CRITICAL();
             *perr                = OS_ERR_INVALID_OPT;
   13788:	e0bfff17 	ldw	r2,-4(fp)
   1378c:	00c001c4 	movi	r3,7
   13790:	10c00005 	stb	r3,0(r2)
             pgrp_return          = pgrp;
   13794:	e0bffd17 	ldw	r2,-12(fp)
   13798:	e0bff615 	stw	r2,-40(fp)
             break;
   1379c:	0001883a 	nop
    }
    return (pgrp_return);
   137a0:	e0bff617 	ldw	r2,-40(fp)
}
   137a4:	e037883a 	mov	sp,fp
   137a8:	dfc00117 	ldw	ra,4(sp)
   137ac:	df000017 	ldw	fp,0(sp)
   137b0:	dec00204 	addi	sp,sp,8
   137b4:	f800283a 	ret

000137b8 <OSFlagNameGet>:
*********************************************************************************************************
*/

#if OS_FLAG_NAME_SIZE > 1
INT8U  OSFlagNameGet (OS_FLAG_GRP *pgrp, INT8U *pname, INT8U *perr)
{
   137b8:	defff604 	addi	sp,sp,-40
   137bc:	dfc00915 	stw	ra,36(sp)
   137c0:	df000815 	stw	fp,32(sp)
   137c4:	df000804 	addi	fp,sp,32
   137c8:	e13ffd15 	stw	r4,-12(fp)
   137cc:	e17ffe15 	stw	r5,-8(fp)
   137d0:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   137d4:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
   137d8:	e0bfff17 	ldw	r2,-4(fp)
   137dc:	1000021e 	bne	r2,zero,137e8 <OSFlagNameGet+0x30>
        return (0);
   137e0:	0005883a 	mov	r2,zero
   137e4:	00003b06 	br	138d4 <OSFlagNameGet+0x11c>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {              /* Is 'pgrp' a NULL pointer?                          */
   137e8:	e0bffd17 	ldw	r2,-12(fp)
   137ec:	1000051e 	bne	r2,zero,13804 <OSFlagNameGet+0x4c>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
   137f0:	e0bfff17 	ldw	r2,-4(fp)
   137f4:	00c01b84 	movi	r3,110
   137f8:	10c00005 	stb	r3,0(r2)
        return (0);
   137fc:	0005883a 	mov	r2,zero
   13800:	00003406 	br	138d4 <OSFlagNameGet+0x11c>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
   13804:	e0bffe17 	ldw	r2,-8(fp)
   13808:	1000051e 	bne	r2,zero,13820 <OSFlagNameGet+0x68>
        *perr = OS_ERR_PNAME_NULL;
   1380c:	e0bfff17 	ldw	r2,-4(fp)
   13810:	00c00304 	movi	r3,12
   13814:	10c00005 	stb	r3,0(r2)
        return (0);
   13818:	0005883a 	mov	r2,zero
   1381c:	00002d06 	br	138d4 <OSFlagNameGet+0x11c>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
   13820:	008000b4 	movhi	r2,2
   13824:	10948f04 	addi	r2,r2,21052
   13828:	10800003 	ldbu	r2,0(r2)
   1382c:	10803fcc 	andi	r2,r2,255
   13830:	10000526 	beq	r2,zero,13848 <OSFlagNameGet+0x90>
        *perr = OS_ERR_NAME_GET_ISR;
   13834:	e0bfff17 	ldw	r2,-4(fp)
   13838:	00c00444 	movi	r3,17
   1383c:	10c00005 	stb	r3,0(r2)
        return (0);
   13840:	0005883a 	mov	r2,zero
   13844:	00002306 	br	138d4 <OSFlagNameGet+0x11c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   13848:	0005303a 	rdctl	r2,status
   1384c:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   13850:	e0fffa17 	ldw	r3,-24(fp)
   13854:	00bfff84 	movi	r2,-2
   13858:	1884703a 	and	r2,r3,r2
   1385c:	1001703a 	wrctl	status,r2
  
  return context;
   13860:	e0bffa17 	ldw	r2,-24(fp)
    }
    OS_ENTER_CRITICAL();
   13864:	e0bff815 	stw	r2,-32(fp)
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {
   13868:	e0bffd17 	ldw	r2,-12(fp)
   1386c:	10800003 	ldbu	r2,0(r2)
   13870:	10803fcc 	andi	r2,r2,255
   13874:	10800160 	cmpeqi	r2,r2,5
   13878:	1000091e 	bne	r2,zero,138a0 <OSFlagNameGet+0xe8>
   1387c:	e0bff817 	ldw	r2,-32(fp)
   13880:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   13884:	e0bffb17 	ldw	r2,-20(fp)
   13888:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_EVENT_TYPE;
   1388c:	e0bfff17 	ldw	r2,-4(fp)
   13890:	00c00044 	movi	r3,1
   13894:	10c00005 	stb	r3,0(r2)
        return (0);
   13898:	0005883a 	mov	r2,zero
   1389c:	00000d06 	br	138d4 <OSFlagNameGet+0x11c>
    }
    len   = OS_StrCopy(pname, pgrp->OSFlagName); /* Copy name from OS_FLAG_GRP                         */
   138a0:	e0bffd17 	ldw	r2,-12(fp)
   138a4:	10800284 	addi	r2,r2,10
   138a8:	e13ffe17 	ldw	r4,-8(fp)
   138ac:	100b883a 	mov	r5,r2
   138b0:	00129f00 	call	129f0 <OS_StrCopy>
   138b4:	e0bff905 	stb	r2,-28(fp)
   138b8:	e0bff817 	ldw	r2,-32(fp)
   138bc:	e0bffc15 	stw	r2,-16(fp)
   138c0:	e0bffc17 	ldw	r2,-16(fp)
   138c4:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
   138c8:	e0bfff17 	ldw	r2,-4(fp)
   138cc:	10000005 	stb	zero,0(r2)
    return (len);
   138d0:	e0bff903 	ldbu	r2,-28(fp)
}
   138d4:	e037883a 	mov	sp,fp
   138d8:	dfc00117 	ldw	ra,4(sp)
   138dc:	df000017 	ldw	fp,0(sp)
   138e0:	dec00204 	addi	sp,sp,8
   138e4:	f800283a 	ret

000138e8 <OSFlagNameSet>:
*********************************************************************************************************
*/

#if OS_FLAG_NAME_SIZE > 1
void  OSFlagNameSet (OS_FLAG_GRP *pgrp, INT8U *pname, INT8U *perr)
{
   138e8:	defff504 	addi	sp,sp,-44
   138ec:	dfc00a15 	stw	ra,40(sp)
   138f0:	df000915 	stw	fp,36(sp)
   138f4:	df000904 	addi	fp,sp,36
   138f8:	e13ffd15 	stw	r4,-12(fp)
   138fc:	e17ffe15 	stw	r5,-8(fp)
   13900:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   13904:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
   13908:	e0bfff17 	ldw	r2,-4(fp)
   1390c:	1000011e 	bne	r2,zero,13914 <OSFlagNameSet+0x2c>
        return;
   13910:	00004406 	br	13a24 <OSFlagNameSet+0x13c>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {              /* Is 'pgrp' a NULL pointer?                          */
   13914:	e0bffd17 	ldw	r2,-12(fp)
   13918:	1000041e 	bne	r2,zero,1392c <OSFlagNameSet+0x44>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
   1391c:	e0bfff17 	ldw	r2,-4(fp)
   13920:	00c01b84 	movi	r3,110
   13924:	10c00005 	stb	r3,0(r2)
        return;
   13928:	00003e06 	br	13a24 <OSFlagNameSet+0x13c>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
   1392c:	e0bffe17 	ldw	r2,-8(fp)
   13930:	1000041e 	bne	r2,zero,13944 <OSFlagNameSet+0x5c>
        *perr = OS_ERR_PNAME_NULL;
   13934:	e0bfff17 	ldw	r2,-4(fp)
   13938:	00c00304 	movi	r3,12
   1393c:	10c00005 	stb	r3,0(r2)
        return;
   13940:	00003806 	br	13a24 <OSFlagNameSet+0x13c>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
   13944:	008000b4 	movhi	r2,2
   13948:	10948f04 	addi	r2,r2,21052
   1394c:	10800003 	ldbu	r2,0(r2)
   13950:	10803fcc 	andi	r2,r2,255
   13954:	10000426 	beq	r2,zero,13968 <OSFlagNameSet+0x80>
        *perr = OS_ERR_NAME_SET_ISR;
   13958:	e0bfff17 	ldw	r2,-4(fp)
   1395c:	00c00484 	movi	r3,18
   13960:	10c00005 	stb	r3,0(r2)
        return;
   13964:	00002f06 	br	13a24 <OSFlagNameSet+0x13c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   13968:	0005303a 	rdctl	r2,status
   1396c:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   13970:	e0fff917 	ldw	r3,-28(fp)
   13974:	00bfff84 	movi	r2,-2
   13978:	1884703a 	and	r2,r3,r2
   1397c:	1001703a 	wrctl	status,r2
  
  return context;
   13980:	e0bff917 	ldw	r2,-28(fp)
    }
    OS_ENTER_CRITICAL();
   13984:	e0bff715 	stw	r2,-36(fp)
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {
   13988:	e0bffd17 	ldw	r2,-12(fp)
   1398c:	10800003 	ldbu	r2,0(r2)
   13990:	10803fcc 	andi	r2,r2,255
   13994:	10800160 	cmpeqi	r2,r2,5
   13998:	1000081e 	bne	r2,zero,139bc <OSFlagNameSet+0xd4>
   1399c:	e0bff717 	ldw	r2,-36(fp)
   139a0:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   139a4:	e0bffa17 	ldw	r2,-24(fp)
   139a8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_EVENT_TYPE;
   139ac:	e0bfff17 	ldw	r2,-4(fp)
   139b0:	00c00044 	movi	r3,1
   139b4:	10c00005 	stb	r3,0(r2)
        return;
   139b8:	00001a06 	br	13a24 <OSFlagNameSet+0x13c>
    }
    len = OS_StrLen(pname);                      /* Can we fit the string in the storage area?         */
   139bc:	e13ffe17 	ldw	r4,-8(fp)
   139c0:	0012a640 	call	12a64 <OS_StrLen>
   139c4:	e0bff805 	stb	r2,-32(fp)
    if (len > (OS_FLAG_NAME_SIZE - 1)) {         /* No                                                 */
   139c8:	e0bff803 	ldbu	r2,-32(fp)
   139cc:	10800830 	cmpltui	r2,r2,32
   139d0:	1000081e 	bne	r2,zero,139f4 <OSFlagNameSet+0x10c>
   139d4:	e0bff717 	ldw	r2,-36(fp)
   139d8:	e0bffb15 	stw	r2,-20(fp)
   139dc:	e0bffb17 	ldw	r2,-20(fp)
   139e0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_FLAG_NAME_TOO_LONG;
   139e4:	e0bfff17 	ldw	r2,-4(fp)
   139e8:	00c01cc4 	movi	r3,115
   139ec:	10c00005 	stb	r3,0(r2)
        return;
   139f0:	00000c06 	br	13a24 <OSFlagNameSet+0x13c>
    }
    (void)OS_StrCopy(pgrp->OSFlagName, pname);   /* Yes, copy name from OS_FLAG_GRP                    */
   139f4:	e0bffd17 	ldw	r2,-12(fp)
   139f8:	10800284 	addi	r2,r2,10
   139fc:	1009883a 	mov	r4,r2
   13a00:	e17ffe17 	ldw	r5,-8(fp)
   13a04:	00129f00 	call	129f0 <OS_StrCopy>
   13a08:	e0bff717 	ldw	r2,-36(fp)
   13a0c:	e0bffc15 	stw	r2,-16(fp)
   13a10:	e0bffc17 	ldw	r2,-16(fp)
   13a14:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
   13a18:	e0bfff17 	ldw	r2,-4(fp)
   13a1c:	10000005 	stb	zero,0(r2)
    return;
   13a20:	0001883a 	nop
}
   13a24:	e037883a 	mov	sp,fp
   13a28:	dfc00117 	ldw	ra,4(sp)
   13a2c:	df000017 	ldw	fp,0(sp)
   13a30:	dec00204 	addi	sp,sp,8
   13a34:	f800283a 	ret

00013a38 <OSFlagPend>:
*                 event flags.
*********************************************************************************************************
*/

OS_FLAGS  OSFlagPend (OS_FLAG_GRP *pgrp, OS_FLAGS flags, INT8U wait_type, INT16U timeout, INT8U *perr)
{
   13a38:	deffe204 	addi	sp,sp,-120
   13a3c:	dfc01d15 	stw	ra,116(sp)
   13a40:	df001c15 	stw	fp,112(sp)
   13a44:	df001c04 	addi	fp,sp,112
   13a48:	e13ffc15 	stw	r4,-16(fp)
   13a4c:	2809883a 	mov	r4,r5
   13a50:	3007883a 	mov	r3,r6
   13a54:	3805883a 	mov	r2,r7
   13a58:	e13ffd0d 	sth	r4,-12(fp)
   13a5c:	e0fffe05 	stb	r3,-8(fp)
   13a60:	e0bfff0d 	sth	r2,-4(fp)
    OS_FLAGS      flags_rdy;
    INT8U         result;
    INT8U         pend_stat;
    BOOLEAN       consume;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR     cpu_sr = 0;
   13a64:	e03fe615 	stw	zero,-104(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
   13a68:	e0800217 	ldw	r2,8(fp)
   13a6c:	1000021e 	bne	r2,zero,13a78 <OSFlagPend+0x40>
        return ((OS_FLAGS)0);
   13a70:	0005883a 	mov	r2,zero
   13a74:	00016706 	br	14014 <OSFlagPend+0x5dc>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {                        /* Validate 'pgrp'                          */
   13a78:	e0bffc17 	ldw	r2,-16(fp)
   13a7c:	1000051e 	bne	r2,zero,13a94 <OSFlagPend+0x5c>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
   13a80:	e0800217 	ldw	r2,8(fp)
   13a84:	00c01b84 	movi	r3,110
   13a88:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
   13a8c:	0005883a 	mov	r2,zero
   13a90:	00016006 	br	14014 <OSFlagPend+0x5dc>
    }
#endif
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
   13a94:	008000b4 	movhi	r2,2
   13a98:	10948f04 	addi	r2,r2,21052
   13a9c:	10800003 	ldbu	r2,0(r2)
   13aa0:	10803fcc 	andi	r2,r2,255
   13aa4:	10000526 	beq	r2,zero,13abc <OSFlagPend+0x84>
        *perr = OS_ERR_PEND_ISR;                           /* ... can't PEND from an ISR               */
   13aa8:	e0800217 	ldw	r2,8(fp)
   13aac:	00c00084 	movi	r3,2
   13ab0:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
   13ab4:	0005883a 	mov	r2,zero
   13ab8:	00015606 	br	14014 <OSFlagPend+0x5dc>
    }
    if (OSLockNesting > 0) {                               /* See if called with scheduler locked ...  */
   13abc:	008000b4 	movhi	r2,2
   13ac0:	10948104 	addi	r2,r2,20996
   13ac4:	10800003 	ldbu	r2,0(r2)
   13ac8:	10803fcc 	andi	r2,r2,255
   13acc:	10000526 	beq	r2,zero,13ae4 <OSFlagPend+0xac>
        *perr = OS_ERR_PEND_LOCKED;                        /* ... can't PEND when locked               */
   13ad0:	e0800217 	ldw	r2,8(fp)
   13ad4:	00c00344 	movi	r3,13
   13ad8:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
   13adc:	0005883a 	mov	r2,zero
   13ae0:	00014c06 	br	14014 <OSFlagPend+0x5dc>
    }
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {          /* Validate event block type                */
   13ae4:	e0bffc17 	ldw	r2,-16(fp)
   13ae8:	10800003 	ldbu	r2,0(r2)
   13aec:	10803fcc 	andi	r2,r2,255
   13af0:	10800160 	cmpeqi	r2,r2,5
   13af4:	1000051e 	bne	r2,zero,13b0c <OSFlagPend+0xd4>
        *perr = OS_ERR_EVENT_TYPE;
   13af8:	e0800217 	ldw	r2,8(fp)
   13afc:	00c00044 	movi	r3,1
   13b00:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
   13b04:	0005883a 	mov	r2,zero
   13b08:	00014206 	br	14014 <OSFlagPend+0x5dc>
    }
    result = (INT8U)(wait_type & OS_FLAG_CONSUME);
   13b0c:	e0fffe03 	ldbu	r3,-8(fp)
   13b10:	00bfe004 	movi	r2,-128
   13b14:	1884703a 	and	r2,r3,r2
   13b18:	e0bfe705 	stb	r2,-100(fp)
    if (result != (INT8U)0) {                             /* See if we need to consume the flags      */
   13b1c:	e0bfe703 	ldbu	r2,-100(fp)
   13b20:	10000626 	beq	r2,zero,13b3c <OSFlagPend+0x104>
        wait_type &= ~(INT8U)OS_FLAG_CONSUME;
   13b24:	e0bffe03 	ldbu	r2,-8(fp)
   13b28:	10801fcc 	andi	r2,r2,127
   13b2c:	e0bffe05 	stb	r2,-8(fp)
        consume    = OS_TRUE;
   13b30:	00800044 	movi	r2,1
   13b34:	e0bfe505 	stb	r2,-108(fp)
   13b38:	00000106 	br	13b40 <OSFlagPend+0x108>
    } else {
        consume    = OS_FALSE;
   13b3c:	e03fe505 	stb	zero,-108(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   13b40:	0005303a 	rdctl	r2,status
   13b44:	e0bfe915 	stw	r2,-92(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   13b48:	e0ffe917 	ldw	r3,-92(fp)
   13b4c:	00bfff84 	movi	r2,-2
   13b50:	1884703a 	and	r2,r3,r2
   13b54:	1001703a 	wrctl	status,r2
  
  return context;
   13b58:	e0bfe917 	ldw	r2,-92(fp)
    }
/*$PAGE*/
    OS_ENTER_CRITICAL();
   13b5c:	e0bfe615 	stw	r2,-104(fp)
    switch (wait_type) {
   13b60:	e0bffe03 	ldbu	r2,-8(fp)
   13b64:	10c00060 	cmpeqi	r3,r2,1
   13b68:	1800921e 	bne	r3,zero,13db4 <OSFlagPend+0x37c>
   13b6c:	10c00088 	cmpgei	r3,r2,2
   13b70:	1800021e 	bne	r3,zero,13b7c <OSFlagPend+0x144>
   13b74:	10006126 	beq	r2,zero,13cfc <OSFlagPend+0x2c4>
   13b78:	0000bb06 	br	13e68 <OSFlagPend+0x430>
   13b7c:	10c000a0 	cmpeqi	r3,r2,2
   13b80:	1800031e 	bne	r3,zero,13b90 <OSFlagPend+0x158>
   13b84:	108000e0 	cmpeqi	r2,r2,3
   13b88:	10002f1e 	bne	r2,zero,13c48 <OSFlagPend+0x210>
   13b8c:	0000b606 	br	13e68 <OSFlagPend+0x430>
        case OS_FLAG_WAIT_SET_ALL:                         /* See if all required flags are set        */
             flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);   /* Extract only the bits we want     */
   13b90:	e0bffc17 	ldw	r2,-16(fp)
   13b94:	10c0020b 	ldhu	r3,8(r2)
   13b98:	e0bffd0b 	ldhu	r2,-12(fp)
   13b9c:	1884703a 	and	r2,r3,r2
   13ba0:	e0bfe78d 	sth	r2,-98(fp)
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
   13ba4:	e0ffe78b 	ldhu	r3,-98(fp)
   13ba8:	e0bffd0b 	ldhu	r2,-12(fp)
   13bac:	1880191e 	bne	r3,r2,13c14 <OSFlagPend+0x1dc>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
   13bb0:	e0bfe503 	ldbu	r2,-108(fp)
   13bb4:	10800058 	cmpnei	r2,r2,1
   13bb8:	1000091e 	bne	r2,zero,13be0 <OSFlagPend+0x1a8>
                     pgrp->OSFlagFlags &= ~flags_rdy;      /* Clear ONLY the flags that we wanted      */
   13bbc:	e0bffc17 	ldw	r2,-16(fp)
   13bc0:	1080020b 	ldhu	r2,8(r2)
   13bc4:	1007883a 	mov	r3,r2
   13bc8:	e0bfe78b 	ldhu	r2,-98(fp)
   13bcc:	0084303a 	nor	r2,zero,r2
   13bd0:	1884703a 	and	r2,r3,r2
   13bd4:	1007883a 	mov	r3,r2
   13bd8:	e0bffc17 	ldw	r2,-16(fp)
   13bdc:	10c0020d 	sth	r3,8(r2)
                 }
                 OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
   13be0:	008000b4 	movhi	r2,2
   13be4:	10949004 	addi	r2,r2,21056
   13be8:	10800017 	ldw	r2,0(r2)
   13bec:	e0ffe78b 	ldhu	r3,-98(fp)
   13bf0:	10c00b0d 	sth	r3,44(r2)
   13bf4:	e0bfe617 	ldw	r2,-104(fp)
   13bf8:	e0bfea15 	stw	r2,-88(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   13bfc:	e0bfea17 	ldw	r2,-88(fp)
   13c00:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
                 *perr                   = OS_ERR_NONE;
   13c04:	e0800217 	ldw	r2,8(fp)
   13c08:	10000005 	stb	zero,0(r2)
                 return (flags_rdy);
   13c0c:	e0bfe78b 	ldhu	r2,-98(fp)
   13c10:	00010006 	br	14014 <OSFlagPend+0x5dc>
             } else {                                      /* Block task until events occur or timeout */
                 OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
   13c14:	e1bffd0b 	ldhu	r6,-12(fp)
   13c18:	e0fffe03 	ldbu	r3,-8(fp)
   13c1c:	e0bfff0b 	ldhu	r2,-4(fp)
   13c20:	e17ff704 	addi	r5,fp,-36
   13c24:	d8800015 	stw	r2,0(sp)
   13c28:	e13ffc17 	ldw	r4,-16(fp)
   13c2c:	180f883a 	mov	r7,r3
   13c30:	00144dc0 	call	144dc <OS_FlagBlock>
   13c34:	e0bfe617 	ldw	r2,-104(fp)
   13c38:	e0bfeb15 	stw	r2,-84(fp)
   13c3c:	e0bfeb17 	ldw	r2,-84(fp)
   13c40:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
             }
             break;
   13c44:	00009206 	br	13e90 <OSFlagPend+0x458>

        case OS_FLAG_WAIT_SET_ANY:
             flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);    /* Extract only the bits we want    */
   13c48:	e0bffc17 	ldw	r2,-16(fp)
   13c4c:	10c0020b 	ldhu	r3,8(r2)
   13c50:	e0bffd0b 	ldhu	r2,-12(fp)
   13c54:	1884703a 	and	r2,r3,r2
   13c58:	e0bfe78d 	sth	r2,-98(fp)
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag set                      */
   13c5c:	e0bfe78b 	ldhu	r2,-98(fp)
   13c60:	10001926 	beq	r2,zero,13cc8 <OSFlagPend+0x290>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
   13c64:	e0bfe503 	ldbu	r2,-108(fp)
   13c68:	10800058 	cmpnei	r2,r2,1
   13c6c:	1000091e 	bne	r2,zero,13c94 <OSFlagPend+0x25c>
                     pgrp->OSFlagFlags &= ~flags_rdy;      /* Clear ONLY the flags that we got         */
   13c70:	e0bffc17 	ldw	r2,-16(fp)
   13c74:	1080020b 	ldhu	r2,8(r2)
   13c78:	1007883a 	mov	r3,r2
   13c7c:	e0bfe78b 	ldhu	r2,-98(fp)
   13c80:	0084303a 	nor	r2,zero,r2
   13c84:	1884703a 	and	r2,r3,r2
   13c88:	1007883a 	mov	r3,r2
   13c8c:	e0bffc17 	ldw	r2,-16(fp)
   13c90:	10c0020d 	sth	r3,8(r2)
                 }
                 OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
   13c94:	008000b4 	movhi	r2,2
   13c98:	10949004 	addi	r2,r2,21056
   13c9c:	10800017 	ldw	r2,0(r2)
   13ca0:	e0ffe78b 	ldhu	r3,-98(fp)
   13ca4:	10c00b0d 	sth	r3,44(r2)
   13ca8:	e0bfe617 	ldw	r2,-104(fp)
   13cac:	e0bfec15 	stw	r2,-80(fp)
   13cb0:	e0bfec17 	ldw	r2,-80(fp)
   13cb4:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
                 *perr                   = OS_ERR_NONE;
   13cb8:	e0800217 	ldw	r2,8(fp)
   13cbc:	10000005 	stb	zero,0(r2)
                 return (flags_rdy);
   13cc0:	e0bfe78b 	ldhu	r2,-98(fp)
   13cc4:	0000d306 	br	14014 <OSFlagPend+0x5dc>
             } else {                                      /* Block task until events occur or timeout */
                 OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
   13cc8:	e1bffd0b 	ldhu	r6,-12(fp)
   13ccc:	e0fffe03 	ldbu	r3,-8(fp)
   13cd0:	e0bfff0b 	ldhu	r2,-4(fp)
   13cd4:	e17ff704 	addi	r5,fp,-36
   13cd8:	d8800015 	stw	r2,0(sp)
   13cdc:	e13ffc17 	ldw	r4,-16(fp)
   13ce0:	180f883a 	mov	r7,r3
   13ce4:	00144dc0 	call	144dc <OS_FlagBlock>
   13ce8:	e0bfe617 	ldw	r2,-104(fp)
   13cec:	e0bfed15 	stw	r2,-76(fp)
   13cf0:	e0bfed17 	ldw	r2,-76(fp)
   13cf4:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
             }
             break;
   13cf8:	00006506 	br	13e90 <OSFlagPend+0x458>

#if OS_FLAG_WAIT_CLR_EN > 0
        case OS_FLAG_WAIT_CLR_ALL:                         /* See if all required flags are cleared    */
             flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags);  /* Extract only the bits we want     */
   13cfc:	e0bffc17 	ldw	r2,-16(fp)
   13d00:	1080020b 	ldhu	r2,8(r2)
   13d04:	0084303a 	nor	r2,zero,r2
   13d08:	1007883a 	mov	r3,r2
   13d0c:	e0bffd0b 	ldhu	r2,-12(fp)
   13d10:	1884703a 	and	r2,r3,r2
   13d14:	e0bfe78d 	sth	r2,-98(fp)
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
   13d18:	e0ffe78b 	ldhu	r3,-98(fp)
   13d1c:	e0bffd0b 	ldhu	r2,-12(fp)
   13d20:	1880171e 	bne	r3,r2,13d80 <OSFlagPend+0x348>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
   13d24:	e0bfe503 	ldbu	r2,-108(fp)
   13d28:	10800058 	cmpnei	r2,r2,1
   13d2c:	1000071e 	bne	r2,zero,13d4c <OSFlagPend+0x314>
                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we wanted        */
   13d30:	e0bffc17 	ldw	r2,-16(fp)
   13d34:	10c0020b 	ldhu	r3,8(r2)
   13d38:	e0bfe78b 	ldhu	r2,-98(fp)
   13d3c:	1884b03a 	or	r2,r3,r2
   13d40:	1007883a 	mov	r3,r2
   13d44:	e0bffc17 	ldw	r2,-16(fp)
   13d48:	10c0020d 	sth	r3,8(r2)
                 }
                 OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
   13d4c:	008000b4 	movhi	r2,2
   13d50:	10949004 	addi	r2,r2,21056
   13d54:	10800017 	ldw	r2,0(r2)
   13d58:	e0ffe78b 	ldhu	r3,-98(fp)
   13d5c:	10c00b0d 	sth	r3,44(r2)
   13d60:	e0bfe617 	ldw	r2,-104(fp)
   13d64:	e0bfee15 	stw	r2,-72(fp)
   13d68:	e0bfee17 	ldw	r2,-72(fp)
   13d6c:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
                 *perr                   = OS_ERR_NONE;
   13d70:	e0800217 	ldw	r2,8(fp)
   13d74:	10000005 	stb	zero,0(r2)
                 return (flags_rdy);
   13d78:	e0bfe78b 	ldhu	r2,-98(fp)
   13d7c:	0000a506 	br	14014 <OSFlagPend+0x5dc>
             } else {                                      /* Block task until events occur or timeout */
                 OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
   13d80:	e1bffd0b 	ldhu	r6,-12(fp)
   13d84:	e0fffe03 	ldbu	r3,-8(fp)
   13d88:	e0bfff0b 	ldhu	r2,-4(fp)
   13d8c:	e17ff704 	addi	r5,fp,-36
   13d90:	d8800015 	stw	r2,0(sp)
   13d94:	e13ffc17 	ldw	r4,-16(fp)
   13d98:	180f883a 	mov	r7,r3
   13d9c:	00144dc0 	call	144dc <OS_FlagBlock>
   13da0:	e0bfe617 	ldw	r2,-104(fp)
   13da4:	e0bfef15 	stw	r2,-68(fp)
   13da8:	e0bfef17 	ldw	r2,-68(fp)
   13dac:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
             }
             break;
   13db0:	00003706 	br	13e90 <OSFlagPend+0x458>

        case OS_FLAG_WAIT_CLR_ANY:
             flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags); /* Extract only the bits we want      */
   13db4:	e0bffc17 	ldw	r2,-16(fp)
   13db8:	1080020b 	ldhu	r2,8(r2)
   13dbc:	0084303a 	nor	r2,zero,r2
   13dc0:	1007883a 	mov	r3,r2
   13dc4:	e0bffd0b 	ldhu	r2,-12(fp)
   13dc8:	1884703a 	and	r2,r3,r2
   13dcc:	e0bfe78d 	sth	r2,-98(fp)
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag cleared                  */
   13dd0:	e0bfe78b 	ldhu	r2,-98(fp)
   13dd4:	10001726 	beq	r2,zero,13e34 <OSFlagPend+0x3fc>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
   13dd8:	e0bfe503 	ldbu	r2,-108(fp)
   13ddc:	10800058 	cmpnei	r2,r2,1
   13de0:	1000071e 	bne	r2,zero,13e00 <OSFlagPend+0x3c8>
                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we got           */
   13de4:	e0bffc17 	ldw	r2,-16(fp)
   13de8:	10c0020b 	ldhu	r3,8(r2)
   13dec:	e0bfe78b 	ldhu	r2,-98(fp)
   13df0:	1884b03a 	or	r2,r3,r2
   13df4:	1007883a 	mov	r3,r2
   13df8:	e0bffc17 	ldw	r2,-16(fp)
   13dfc:	10c0020d 	sth	r3,8(r2)
                 }
                 OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
   13e00:	008000b4 	movhi	r2,2
   13e04:	10949004 	addi	r2,r2,21056
   13e08:	10800017 	ldw	r2,0(r2)
   13e0c:	e0ffe78b 	ldhu	r3,-98(fp)
   13e10:	10c00b0d 	sth	r3,44(r2)
   13e14:	e0bfe617 	ldw	r2,-104(fp)
   13e18:	e0bff015 	stw	r2,-64(fp)
   13e1c:	e0bff017 	ldw	r2,-64(fp)
   13e20:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
                 *perr                   = OS_ERR_NONE;
   13e24:	e0800217 	ldw	r2,8(fp)
   13e28:	10000005 	stb	zero,0(r2)
                 return (flags_rdy);
   13e2c:	e0bfe78b 	ldhu	r2,-98(fp)
   13e30:	00007806 	br	14014 <OSFlagPend+0x5dc>
             } else {                                      /* Block task until events occur or timeout */
                 OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
   13e34:	e1bffd0b 	ldhu	r6,-12(fp)
   13e38:	e0fffe03 	ldbu	r3,-8(fp)
   13e3c:	e0bfff0b 	ldhu	r2,-4(fp)
   13e40:	e17ff704 	addi	r5,fp,-36
   13e44:	d8800015 	stw	r2,0(sp)
   13e48:	e13ffc17 	ldw	r4,-16(fp)
   13e4c:	180f883a 	mov	r7,r3
   13e50:	00144dc0 	call	144dc <OS_FlagBlock>
   13e54:	e0bfe617 	ldw	r2,-104(fp)
   13e58:	e0bff115 	stw	r2,-60(fp)
   13e5c:	e0bff117 	ldw	r2,-60(fp)
   13e60:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
             }
             break;
   13e64:	00000a06 	br	13e90 <OSFlagPend+0x458>
   13e68:	e0bfe617 	ldw	r2,-104(fp)
   13e6c:	e0bff215 	stw	r2,-56(fp)
   13e70:	e0bff217 	ldw	r2,-56(fp)
   13e74:	1001703a 	wrctl	status,r2
#endif

        default:
             OS_EXIT_CRITICAL();
             flags_rdy = (OS_FLAGS)0;
   13e78:	e03fe78d 	sth	zero,-98(fp)
             *perr      = OS_ERR_FLAG_WAIT_TYPE;
   13e7c:	e0800217 	ldw	r2,8(fp)
   13e80:	00c01bc4 	movi	r3,111
   13e84:	10c00005 	stb	r3,0(r2)
             return (flags_rdy);
   13e88:	e0bfe78b 	ldhu	r2,-98(fp)
   13e8c:	00006106 	br	14014 <OSFlagPend+0x5dc>
    }
/*$PAGE*/
    OS_Sched();                                            /* Find next HPT ready to run               */
   13e90:	00128b40 	call	128b4 <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   13e94:	0005303a 	rdctl	r2,status
   13e98:	e0bff315 	stw	r2,-52(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   13e9c:	e0fff317 	ldw	r3,-52(fp)
   13ea0:	00bfff84 	movi	r2,-2
   13ea4:	1884703a 	and	r2,r3,r2
   13ea8:	1001703a 	wrctl	status,r2
  
  return context;
   13eac:	e0bff317 	ldw	r2,-52(fp)
    OS_ENTER_CRITICAL();
   13eb0:	e0bfe615 	stw	r2,-104(fp)
    if (OSTCBCur->OSTCBStatPend != OS_STAT_PEND_OK) {      /* Have we timed-out or aborted?            */
   13eb4:	008000b4 	movhi	r2,2
   13eb8:	10949004 	addi	r2,r2,21056
   13ebc:	10800017 	ldw	r2,0(r2)
   13ec0:	10800c43 	ldbu	r2,49(r2)
   13ec4:	10803fcc 	andi	r2,r2,255
   13ec8:	10002226 	beq	r2,zero,13f54 <OSFlagPend+0x51c>
        pend_stat                = OSTCBCur->OSTCBStatPend;
   13ecc:	008000b4 	movhi	r2,2
   13ed0:	10949004 	addi	r2,r2,21056
   13ed4:	10800017 	ldw	r2,0(r2)
   13ed8:	10800c43 	ldbu	r2,49(r2)
   13edc:	e0bfe805 	stb	r2,-96(fp)
        OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
   13ee0:	008000b4 	movhi	r2,2
   13ee4:	10949004 	addi	r2,r2,21056
   13ee8:	10800017 	ldw	r2,0(r2)
   13eec:	10000c45 	stb	zero,49(r2)
        OS_FlagUnlink(&node);
   13ef0:	e0bff704 	addi	r2,fp,-36
   13ef4:	1009883a 	mov	r4,r2
   13ef8:	00148940 	call	14894 <OS_FlagUnlink>
        OSTCBCur->OSTCBStat      = OS_STAT_RDY;            /* Yes, make task ready-to-run              */
   13efc:	008000b4 	movhi	r2,2
   13f00:	10949004 	addi	r2,r2,21056
   13f04:	10800017 	ldw	r2,0(r2)
   13f08:	10000c05 	stb	zero,48(r2)
   13f0c:	e0bfe617 	ldw	r2,-104(fp)
   13f10:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   13f14:	e0bff417 	ldw	r2,-48(fp)
   13f18:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        flags_rdy                = (OS_FLAGS)0;
   13f1c:	e03fe78d 	sth	zero,-98(fp)
        switch (pend_stat) {
   13f20:	e0bfe803 	ldbu	r2,-96(fp)
   13f24:	108000a0 	cmpeqi	r2,r2,2
   13f28:	10000426 	beq	r2,zero,13f3c <OSFlagPend+0x504>
            case OS_STAT_PEND_ABORT:
                 *perr = OS_ERR_PEND_ABORT;                 /* Indicate that we aborted   waiting       */
   13f2c:	e0800217 	ldw	r2,8(fp)
   13f30:	00c00384 	movi	r3,14
   13f34:	10c00005 	stb	r3,0(r2)
                 break;
   13f38:	00000406 	br	13f4c <OSFlagPend+0x514>

            case OS_STAT_PEND_TO:
            default:
                 *perr = OS_ERR_TIMEOUT;                    /* Indicate that we timed-out waiting       */
   13f3c:	e0800217 	ldw	r2,8(fp)
   13f40:	00c00284 	movi	r3,10
   13f44:	10c00005 	stb	r3,0(r2)
                 break;
   13f48:	0001883a 	nop
        }
        return (flags_rdy);
   13f4c:	e0bfe78b 	ldhu	r2,-98(fp)
   13f50:	00003006 	br	14014 <OSFlagPend+0x5dc>
    }
    flags_rdy = OSTCBCur->OSTCBFlagsRdy;
   13f54:	008000b4 	movhi	r2,2
   13f58:	10949004 	addi	r2,r2,21056
   13f5c:	10800017 	ldw	r2,0(r2)
   13f60:	10800b0b 	ldhu	r2,44(r2)
   13f64:	e0bfe78d 	sth	r2,-98(fp)
    if (consume == OS_TRUE) {                              /* See if we need to consume the flags      */
   13f68:	e0bfe503 	ldbu	r2,-108(fp)
   13f6c:	10800058 	cmpnei	r2,r2,1
   13f70:	1000211e 	bne	r2,zero,13ff8 <OSFlagPend+0x5c0>
        switch (wait_type) {
   13f74:	e0bffe03 	ldbu	r2,-8(fp)
   13f78:	10001616 	blt	r2,zero,13fd4 <OSFlagPend+0x59c>
   13f7c:	10c00090 	cmplti	r3,r2,2
   13f80:	18000c1e 	bne	r3,zero,13fb4 <OSFlagPend+0x57c>
   13f84:	10800108 	cmpgei	r2,r2,4
   13f88:	1000121e 	bne	r2,zero,13fd4 <OSFlagPend+0x59c>
            case OS_FLAG_WAIT_SET_ALL:
            case OS_FLAG_WAIT_SET_ANY:                     /* Clear ONLY the flags we got              */
                 pgrp->OSFlagFlags &= ~flags_rdy;
   13f8c:	e0bffc17 	ldw	r2,-16(fp)
   13f90:	1080020b 	ldhu	r2,8(r2)
   13f94:	1007883a 	mov	r3,r2
   13f98:	e0bfe78b 	ldhu	r2,-98(fp)
   13f9c:	0084303a 	nor	r2,zero,r2
   13fa0:	1884703a 	and	r2,r3,r2
   13fa4:	1007883a 	mov	r3,r2
   13fa8:	e0bffc17 	ldw	r2,-16(fp)
   13fac:	10c0020d 	sth	r3,8(r2)
                 break;
   13fb0:	00001106 	br	13ff8 <OSFlagPend+0x5c0>

#if OS_FLAG_WAIT_CLR_EN > 0
            case OS_FLAG_WAIT_CLR_ALL:
            case OS_FLAG_WAIT_CLR_ANY:                     /* Set   ONLY the flags we got              */
                 pgrp->OSFlagFlags |=  flags_rdy;
   13fb4:	e0bffc17 	ldw	r2,-16(fp)
   13fb8:	10c0020b 	ldhu	r3,8(r2)
   13fbc:	e0bfe78b 	ldhu	r2,-98(fp)
   13fc0:	1884b03a 	or	r2,r3,r2
   13fc4:	1007883a 	mov	r3,r2
   13fc8:	e0bffc17 	ldw	r2,-16(fp)
   13fcc:	10c0020d 	sth	r3,8(r2)
                 break;
   13fd0:	00000906 	br	13ff8 <OSFlagPend+0x5c0>
   13fd4:	e0bfe617 	ldw	r2,-104(fp)
   13fd8:	e0bff515 	stw	r2,-44(fp)
   13fdc:	e0bff517 	ldw	r2,-44(fp)
   13fe0:	1001703a 	wrctl	status,r2
#endif
            default:
                 OS_EXIT_CRITICAL();
                 *perr = OS_ERR_FLAG_WAIT_TYPE;
   13fe4:	e0800217 	ldw	r2,8(fp)
   13fe8:	00c01bc4 	movi	r3,111
   13fec:	10c00005 	stb	r3,0(r2)
                 return ((OS_FLAGS)0);
   13ff0:	0005883a 	mov	r2,zero
   13ff4:	00000706 	br	14014 <OSFlagPend+0x5dc>
   13ff8:	e0bfe617 	ldw	r2,-104(fp)
   13ffc:	e0bff615 	stw	r2,-40(fp)
   14000:	e0bff617 	ldw	r2,-40(fp)
   14004:	1001703a 	wrctl	status,r2
        }
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;                                   /* Event(s) must have occurred              */
   14008:	e0800217 	ldw	r2,8(fp)
   1400c:	10000005 	stb	zero,0(r2)
    return (flags_rdy);
   14010:	e0bfe78b 	ldhu	r2,-98(fp)
}
   14014:	e037883a 	mov	sp,fp
   14018:	dfc00117 	ldw	ra,4(sp)
   1401c:	df000017 	ldw	fp,0(sp)
   14020:	dec00204 	addi	sp,sp,8
   14024:	f800283a 	ret

00014028 <OSFlagPendGetFlagsRdy>:
* Called from: Task ONLY
*********************************************************************************************************
*/

OS_FLAGS  OSFlagPendGetFlagsRdy (void)
{
   14028:	defffb04 	addi	sp,sp,-20
   1402c:	df000415 	stw	fp,16(sp)
   14030:	df000404 	addi	fp,sp,16
    OS_FLAGS      flags;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR     cpu_sr = 0;
   14034:	e03ffc15 	stw	zero,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   14038:	0005303a 	rdctl	r2,status
   1403c:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   14040:	e0fffe17 	ldw	r3,-8(fp)
   14044:	00bfff84 	movi	r2,-2
   14048:	1884703a 	and	r2,r3,r2
   1404c:	1001703a 	wrctl	status,r2
  
  return context;
   14050:	e0bffe17 	ldw	r2,-8(fp)
#endif



    OS_ENTER_CRITICAL();
   14054:	e0bffc15 	stw	r2,-16(fp)
    flags = OSTCBCur->OSTCBFlagsRdy;
   14058:	008000b4 	movhi	r2,2
   1405c:	10949004 	addi	r2,r2,21056
   14060:	10800017 	ldw	r2,0(r2)
   14064:	10800b0b 	ldhu	r2,44(r2)
   14068:	e0bffd0d 	sth	r2,-12(fp)
   1406c:	e0bffc17 	ldw	r2,-16(fp)
   14070:	e0bfff15 	stw	r2,-4(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   14074:	e0bfff17 	ldw	r2,-4(fp)
   14078:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (flags);
   1407c:	e0bffd0b 	ldhu	r2,-12(fp)
}
   14080:	e037883a 	mov	sp,fp
   14084:	df000017 	ldw	fp,0(sp)
   14088:	dec00104 	addi	sp,sp,4
   1408c:	f800283a 	ret

00014090 <OSFlagPost>:
*              2) The amount of time interrupts are DISABLED depends on the number of tasks waiting on
*                 the event flag group.
*********************************************************************************************************
*/
OS_FLAGS  OSFlagPost (OS_FLAG_GRP *pgrp, OS_FLAGS flags, INT8U opt, INT8U *perr)
{
   14090:	deffef04 	addi	sp,sp,-68
   14094:	dfc01015 	stw	ra,64(sp)
   14098:	df000f15 	stw	fp,60(sp)
   1409c:	df000f04 	addi	fp,sp,60
   140a0:	e13ffc15 	stw	r4,-16(fp)
   140a4:	2807883a 	mov	r3,r5
   140a8:	3005883a 	mov	r2,r6
   140ac:	e1ffff15 	stw	r7,-4(fp)
   140b0:	e0fffd0d 	sth	r3,-12(fp)
   140b4:	e0bffe05 	stb	r2,-8(fp)
    BOOLEAN       sched;
    OS_FLAGS      flags_cur;
    OS_FLAGS      flags_rdy;
    BOOLEAN       rdy;
#if OS_CRITICAL_METHOD == 3                          /* Allocate storage for CPU status register       */
    OS_CPU_SR     cpu_sr = 0;
   140b8:	e03ff315 	stw	zero,-52(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                        /* Validate 'perr'                                */
   140bc:	e0bfff17 	ldw	r2,-4(fp)
   140c0:	1000021e 	bne	r2,zero,140cc <OSFlagPost+0x3c>
        return ((OS_FLAGS)0);
   140c4:	0005883a 	mov	r2,zero
   140c8:	0000ce06 	br	14404 <OSFlagPost+0x374>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {                  /* Validate 'pgrp'                                */
   140cc:	e0bffc17 	ldw	r2,-16(fp)
   140d0:	1000051e 	bne	r2,zero,140e8 <OSFlagPost+0x58>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
   140d4:	e0bfff17 	ldw	r2,-4(fp)
   140d8:	00c01b84 	movi	r3,110
   140dc:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
   140e0:	0005883a 	mov	r2,zero
   140e4:	0000c706 	br	14404 <OSFlagPost+0x374>
    }
#endif
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {    /* Make sure we are pointing to an event flag grp */
   140e8:	e0bffc17 	ldw	r2,-16(fp)
   140ec:	10800003 	ldbu	r2,0(r2)
   140f0:	10803fcc 	andi	r2,r2,255
   140f4:	10800160 	cmpeqi	r2,r2,5
   140f8:	1000051e 	bne	r2,zero,14110 <OSFlagPost+0x80>
        *perr = OS_ERR_EVENT_TYPE;
   140fc:	e0bfff17 	ldw	r2,-4(fp)
   14100:	00c00044 	movi	r3,1
   14104:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
   14108:	0005883a 	mov	r2,zero
   1410c:	0000bd06 	br	14404 <OSFlagPost+0x374>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   14110:	0005303a 	rdctl	r2,status
   14114:	e0bff615 	stw	r2,-40(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   14118:	e0fff617 	ldw	r3,-40(fp)
   1411c:	00bfff84 	movi	r2,-2
   14120:	1884703a 	and	r2,r3,r2
   14124:	1001703a 	wrctl	status,r2
  
  return context;
   14128:	e0bff617 	ldw	r2,-40(fp)
    }
/*$PAGE*/
    OS_ENTER_CRITICAL();
   1412c:	e0bff315 	stw	r2,-52(fp)
    switch (opt) {
   14130:	e0bffe03 	ldbu	r2,-8(fp)
   14134:	10000326 	beq	r2,zero,14144 <OSFlagPost+0xb4>
   14138:	10800060 	cmpeqi	r2,r2,1
   1413c:	10000b1e 	bne	r2,zero,1416c <OSFlagPost+0xdc>
   14140:	00001206 	br	1418c <OSFlagPost+0xfc>
        case OS_FLAG_CLR:
             pgrp->OSFlagFlags &= ~flags;            /* Clear the flags specified in the group         */
   14144:	e0bffc17 	ldw	r2,-16(fp)
   14148:	1080020b 	ldhu	r2,8(r2)
   1414c:	1007883a 	mov	r3,r2
   14150:	e0bffd0b 	ldhu	r2,-12(fp)
   14154:	0084303a 	nor	r2,zero,r2
   14158:	1884703a 	and	r2,r3,r2
   1415c:	1007883a 	mov	r3,r2
   14160:	e0bffc17 	ldw	r2,-16(fp)
   14164:	10c0020d 	sth	r3,8(r2)
             break;
   14168:	00001106 	br	141b0 <OSFlagPost+0x120>

        case OS_FLAG_SET:
             pgrp->OSFlagFlags |=  flags;            /* Set   the flags specified in the group         */
   1416c:	e0bffc17 	ldw	r2,-16(fp)
   14170:	10c0020b 	ldhu	r3,8(r2)
   14174:	e0bffd0b 	ldhu	r2,-12(fp)
   14178:	1884b03a 	or	r2,r3,r2
   1417c:	1007883a 	mov	r3,r2
   14180:	e0bffc17 	ldw	r2,-16(fp)
   14184:	10c0020d 	sth	r3,8(r2)
             break;
   14188:	00000906 	br	141b0 <OSFlagPost+0x120>
   1418c:	e0bff317 	ldw	r2,-52(fp)
   14190:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   14194:	e0bff717 	ldw	r2,-36(fp)
   14198:	1001703a 	wrctl	status,r2

        default:
             OS_EXIT_CRITICAL();                     /* INVALID option                                 */
             *perr = OS_ERR_FLAG_INVALID_OPT;
   1419c:	e0bfff17 	ldw	r2,-4(fp)
   141a0:	00c01c44 	movi	r3,113
   141a4:	10c00005 	stb	r3,0(r2)
             return ((OS_FLAGS)0);
   141a8:	0005883a 	mov	r2,zero
   141ac:	00009506 	br	14404 <OSFlagPost+0x374>
    }
    sched = OS_FALSE;                                /* Indicate that we don't need rescheduling       */
   141b0:	e03ff205 	stb	zero,-56(fp)
    pnode = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
   141b4:	e0bffc17 	ldw	r2,-16(fp)
   141b8:	10800117 	ldw	r2,4(r2)
   141bc:	e0bff115 	stw	r2,-60(fp)
    while (pnode != (OS_FLAG_NODE *)0) {             /* Go through all tasks waiting on event flag(s)  */
   141c0:	00007406 	br	14394 <OSFlagPost+0x304>
        switch (pnode->OSFlagNodeWaitType) {
   141c4:	e0bff117 	ldw	r2,-60(fp)
   141c8:	10800483 	ldbu	r2,18(r2)
   141cc:	10803fcc 	andi	r2,r2,255
   141d0:	10c00060 	cmpeqi	r3,r2,1
   141d4:	18004d1e 	bne	r3,zero,1430c <OSFlagPost+0x27c>
   141d8:	10c00088 	cmpgei	r3,r2,2
   141dc:	1800021e 	bne	r3,zero,141e8 <OSFlagPost+0x158>
   141e0:	10003126 	beq	r2,zero,142a8 <OSFlagPost+0x218>
   141e4:	00005f06 	br	14364 <OSFlagPost+0x2d4>
   141e8:	10c000a0 	cmpeqi	r3,r2,2
   141ec:	1800031e 	bne	r3,zero,141fc <OSFlagPost+0x16c>
   141f0:	108000e0 	cmpeqi	r2,r2,3
   141f4:	1000181e 	bne	r2,zero,14258 <OSFlagPost+0x1c8>
   141f8:	00005a06 	br	14364 <OSFlagPost+0x2d4>
            case OS_FLAG_WAIT_SET_ALL:               /* See if all req. flags are set for current node */
                 flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
   141fc:	e0bffc17 	ldw	r2,-16(fp)
   14200:	10c0020b 	ldhu	r3,8(r2)
   14204:	e0bff117 	ldw	r2,-60(fp)
   14208:	1080040b 	ldhu	r2,16(r2)
   1420c:	1884703a 	and	r2,r3,r2
   14210:	e0bff40d 	sth	r2,-48(fp)
                 if (flags_rdy == pnode->OSFlagNodeFlags) {
   14214:	e0bff117 	ldw	r2,-60(fp)
   14218:	1080040b 	ldhu	r2,16(r2)
   1421c:	10ffffcc 	andi	r3,r2,65535
   14220:	e0bff40b 	ldhu	r2,-48(fp)
   14224:	18800b1e 	bne	r3,r2,14254 <OSFlagPost+0x1c4>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
   14228:	e0bff40b 	ldhu	r2,-48(fp)
   1422c:	e13ff117 	ldw	r4,-60(fp)
   14230:	100b883a 	mov	r5,r2
   14234:	00147840 	call	14784 <OS_FlagTaskRdy>
   14238:	e0bff485 	stb	r2,-46(fp)
                     if (rdy == OS_TRUE) {
   1423c:	e0bff483 	ldbu	r2,-46(fp)
   14240:	10800058 	cmpnei	r2,r2,1
   14244:	1000031e 	bne	r2,zero,14254 <OSFlagPost+0x1c4>
                         sched = OS_TRUE;                     /* When done we will reschedule          */
   14248:	00800044 	movi	r2,1
   1424c:	e0bff205 	stb	r2,-56(fp)
                     }
                 }
                 break;
   14250:	00004d06 	br	14388 <OSFlagPost+0x2f8>
   14254:	00004c06 	br	14388 <OSFlagPost+0x2f8>

            case OS_FLAG_WAIT_SET_ANY:               /* See if any flag set                            */
                 flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
   14258:	e0bffc17 	ldw	r2,-16(fp)
   1425c:	10c0020b 	ldhu	r3,8(r2)
   14260:	e0bff117 	ldw	r2,-60(fp)
   14264:	1080040b 	ldhu	r2,16(r2)
   14268:	1884703a 	and	r2,r3,r2
   1426c:	e0bff40d 	sth	r2,-48(fp)
                 if (flags_rdy != (OS_FLAGS)0) {
   14270:	e0bff40b 	ldhu	r2,-48(fp)
   14274:	10000b26 	beq	r2,zero,142a4 <OSFlagPost+0x214>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
   14278:	e0bff40b 	ldhu	r2,-48(fp)
   1427c:	e13ff117 	ldw	r4,-60(fp)
   14280:	100b883a 	mov	r5,r2
   14284:	00147840 	call	14784 <OS_FlagTaskRdy>
   14288:	e0bff485 	stb	r2,-46(fp)
                     if (rdy == OS_TRUE) {
   1428c:	e0bff483 	ldbu	r2,-46(fp)
   14290:	10800058 	cmpnei	r2,r2,1
   14294:	1000031e 	bne	r2,zero,142a4 <OSFlagPost+0x214>
                         sched = OS_TRUE;                     /* When done we will reschedule          */
   14298:	00800044 	movi	r2,1
   1429c:	e0bff205 	stb	r2,-56(fp)
                     }
                 }
                 break;
   142a0:	00003906 	br	14388 <OSFlagPost+0x2f8>
   142a4:	00003806 	br	14388 <OSFlagPost+0x2f8>

#if OS_FLAG_WAIT_CLR_EN > 0
            case OS_FLAG_WAIT_CLR_ALL:               /* See if all req. flags are set for current node */
                 flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
   142a8:	e0bffc17 	ldw	r2,-16(fp)
   142ac:	1080020b 	ldhu	r2,8(r2)
   142b0:	0084303a 	nor	r2,zero,r2
   142b4:	1007883a 	mov	r3,r2
   142b8:	e0bff117 	ldw	r2,-60(fp)
   142bc:	1080040b 	ldhu	r2,16(r2)
   142c0:	1884703a 	and	r2,r3,r2
   142c4:	e0bff40d 	sth	r2,-48(fp)
                 if (flags_rdy == pnode->OSFlagNodeFlags) {
   142c8:	e0bff117 	ldw	r2,-60(fp)
   142cc:	1080040b 	ldhu	r2,16(r2)
   142d0:	10ffffcc 	andi	r3,r2,65535
   142d4:	e0bff40b 	ldhu	r2,-48(fp)
   142d8:	18800b1e 	bne	r3,r2,14308 <OSFlagPost+0x278>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
   142dc:	e0bff40b 	ldhu	r2,-48(fp)
   142e0:	e13ff117 	ldw	r4,-60(fp)
   142e4:	100b883a 	mov	r5,r2
   142e8:	00147840 	call	14784 <OS_FlagTaskRdy>
   142ec:	e0bff485 	stb	r2,-46(fp)
                     if (rdy == OS_TRUE) {
   142f0:	e0bff483 	ldbu	r2,-46(fp)
   142f4:	10800058 	cmpnei	r2,r2,1
   142f8:	1000031e 	bne	r2,zero,14308 <OSFlagPost+0x278>
                         sched = OS_TRUE;                     /* When done we will reschedule          */
   142fc:	00800044 	movi	r2,1
   14300:	e0bff205 	stb	r2,-56(fp)
                     }
                 }
                 break;
   14304:	00002006 	br	14388 <OSFlagPost+0x2f8>
   14308:	00001f06 	br	14388 <OSFlagPost+0x2f8>

            case OS_FLAG_WAIT_CLR_ANY:               /* See if any flag set                            */
                 flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
   1430c:	e0bffc17 	ldw	r2,-16(fp)
   14310:	1080020b 	ldhu	r2,8(r2)
   14314:	0084303a 	nor	r2,zero,r2
   14318:	1007883a 	mov	r3,r2
   1431c:	e0bff117 	ldw	r2,-60(fp)
   14320:	1080040b 	ldhu	r2,16(r2)
   14324:	1884703a 	and	r2,r3,r2
   14328:	e0bff40d 	sth	r2,-48(fp)
                 if (flags_rdy != (OS_FLAGS)0) {
   1432c:	e0bff40b 	ldhu	r2,-48(fp)
   14330:	10000b26 	beq	r2,zero,14360 <OSFlagPost+0x2d0>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
   14334:	e0bff40b 	ldhu	r2,-48(fp)
   14338:	e13ff117 	ldw	r4,-60(fp)
   1433c:	100b883a 	mov	r5,r2
   14340:	00147840 	call	14784 <OS_FlagTaskRdy>
   14344:	e0bff485 	stb	r2,-46(fp)
                     if (rdy == OS_TRUE) {
   14348:	e0bff483 	ldbu	r2,-46(fp)
   1434c:	10800058 	cmpnei	r2,r2,1
   14350:	1000031e 	bne	r2,zero,14360 <OSFlagPost+0x2d0>
                         sched = OS_TRUE;                     /* When done we will reschedule          */
   14354:	00800044 	movi	r2,1
   14358:	e0bff205 	stb	r2,-56(fp)
                     }
                 }
                 break;
   1435c:	00000a06 	br	14388 <OSFlagPost+0x2f8>
   14360:	00000906 	br	14388 <OSFlagPost+0x2f8>
   14364:	e0bff317 	ldw	r2,-52(fp)
   14368:	e0bff815 	stw	r2,-32(fp)
   1436c:	e0bff817 	ldw	r2,-32(fp)
   14370:	1001703a 	wrctl	status,r2
#endif
            default:
                 OS_EXIT_CRITICAL();
                 *perr = OS_ERR_FLAG_WAIT_TYPE;
   14374:	e0bfff17 	ldw	r2,-4(fp)
   14378:	00c01bc4 	movi	r3,111
   1437c:	10c00005 	stb	r3,0(r2)
                 return ((OS_FLAGS)0);
   14380:	0005883a 	mov	r2,zero
   14384:	00001f06 	br	14404 <OSFlagPost+0x374>
        }
        pnode = (OS_FLAG_NODE *)pnode->OSFlagNodeNext; /* Point to next task waiting for event flag(s) */
   14388:	e0bff117 	ldw	r2,-60(fp)
   1438c:	10800017 	ldw	r2,0(r2)
   14390:	e0bff115 	stw	r2,-60(fp)
             *perr = OS_ERR_FLAG_INVALID_OPT;
             return ((OS_FLAGS)0);
    }
    sched = OS_FALSE;                                /* Indicate that we don't need rescheduling       */
    pnode = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
    while (pnode != (OS_FLAG_NODE *)0) {             /* Go through all tasks waiting on event flag(s)  */
   14394:	e0bff117 	ldw	r2,-60(fp)
   14398:	103f8a1e 	bne	r2,zero,141c4 <__alt_mem_Flash_flash_data+0xf40141c4>
   1439c:	e0bff317 	ldw	r2,-52(fp)
   143a0:	e0bff915 	stw	r2,-28(fp)
   143a4:	e0bff917 	ldw	r2,-28(fp)
   143a8:	1001703a 	wrctl	status,r2
                 return ((OS_FLAGS)0);
        }
        pnode = (OS_FLAG_NODE *)pnode->OSFlagNodeNext; /* Point to next task waiting for event flag(s) */
    }
    OS_EXIT_CRITICAL();
    if (sched == OS_TRUE) {
   143ac:	e0bff203 	ldbu	r2,-56(fp)
   143b0:	10800058 	cmpnei	r2,r2,1
   143b4:	1000011e 	bne	r2,zero,143bc <OSFlagPost+0x32c>
        OS_Sched();
   143b8:	00128b40 	call	128b4 <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   143bc:	0005303a 	rdctl	r2,status
   143c0:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   143c4:	e0fffa17 	ldw	r3,-24(fp)
   143c8:	00bfff84 	movi	r2,-2
   143cc:	1884703a 	and	r2,r3,r2
   143d0:	1001703a 	wrctl	status,r2
  
  return context;
   143d4:	e0bffa17 	ldw	r2,-24(fp)
    }
    OS_ENTER_CRITICAL();
   143d8:	e0bff315 	stw	r2,-52(fp)
    flags_cur = pgrp->OSFlagFlags;
   143dc:	e0bffc17 	ldw	r2,-16(fp)
   143e0:	1080020b 	ldhu	r2,8(r2)
   143e4:	e0bff50d 	sth	r2,-44(fp)
   143e8:	e0bff317 	ldw	r2,-52(fp)
   143ec:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   143f0:	e0bffb17 	ldw	r2,-20(fp)
   143f4:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr     = OS_ERR_NONE;
   143f8:	e0bfff17 	ldw	r2,-4(fp)
   143fc:	10000005 	stb	zero,0(r2)
    return (flags_cur);
   14400:	e0bff50b 	ldhu	r2,-44(fp)
}
   14404:	e037883a 	mov	sp,fp
   14408:	dfc00117 	ldw	ra,4(sp)
   1440c:	df000017 	ldw	fp,0(sp)
   14410:	dec00204 	addi	sp,sp,8
   14414:	f800283a 	ret

00014418 <OSFlagQuery>:
*********************************************************************************************************
*/

#if OS_FLAG_QUERY_EN > 0
OS_FLAGS  OSFlagQuery (OS_FLAG_GRP *pgrp, INT8U *perr)
{
   14418:	defff904 	addi	sp,sp,-28
   1441c:	df000615 	stw	fp,24(sp)
   14420:	df000604 	addi	fp,sp,24
   14424:	e13ffe15 	stw	r4,-8(fp)
   14428:	e17fff15 	stw	r5,-4(fp)
    OS_FLAGS   flags;
#if OS_CRITICAL_METHOD == 3                       /* Allocate storage for CPU status register          */
    OS_CPU_SR  cpu_sr = 0;
   1442c:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                     /* Validate 'perr'                                   */
   14430:	e0bfff17 	ldw	r2,-4(fp)
   14434:	1000021e 	bne	r2,zero,14440 <OSFlagQuery+0x28>
        return ((OS_FLAGS)0);
   14438:	0005883a 	mov	r2,zero
   1443c:	00002306 	br	144cc <OSFlagQuery+0xb4>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {               /* Validate 'pgrp'                                   */
   14440:	e0bffe17 	ldw	r2,-8(fp)
   14444:	1000051e 	bne	r2,zero,1445c <OSFlagQuery+0x44>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
   14448:	e0bfff17 	ldw	r2,-4(fp)
   1444c:	00c01b84 	movi	r3,110
   14450:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
   14454:	0005883a 	mov	r2,zero
   14458:	00001c06 	br	144cc <OSFlagQuery+0xb4>
    }
#endif
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) { /* Validate event block type                         */
   1445c:	e0bffe17 	ldw	r2,-8(fp)
   14460:	10800003 	ldbu	r2,0(r2)
   14464:	10803fcc 	andi	r2,r2,255
   14468:	10800160 	cmpeqi	r2,r2,5
   1446c:	1000051e 	bne	r2,zero,14484 <OSFlagQuery+0x6c>
        *perr = OS_ERR_EVENT_TYPE;
   14470:	e0bfff17 	ldw	r2,-4(fp)
   14474:	00c00044 	movi	r3,1
   14478:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
   1447c:	0005883a 	mov	r2,zero
   14480:	00001206 	br	144cc <OSFlagQuery+0xb4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   14484:	0005303a 	rdctl	r2,status
   14488:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1448c:	e0fffc17 	ldw	r3,-16(fp)
   14490:	00bfff84 	movi	r2,-2
   14494:	1884703a 	and	r2,r3,r2
   14498:	1001703a 	wrctl	status,r2
  
  return context;
   1449c:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
   144a0:	e0bffa15 	stw	r2,-24(fp)
    flags = pgrp->OSFlagFlags;
   144a4:	e0bffe17 	ldw	r2,-8(fp)
   144a8:	1080020b 	ldhu	r2,8(r2)
   144ac:	e0bffb0d 	sth	r2,-20(fp)
   144b0:	e0bffa17 	ldw	r2,-24(fp)
   144b4:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   144b8:	e0bffd17 	ldw	r2,-12(fp)
   144bc:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
   144c0:	e0bfff17 	ldw	r2,-4(fp)
   144c4:	10000005 	stb	zero,0(r2)
    return (flags);                               /* Return the current value of the event flags       */
   144c8:	e0bffb0b 	ldhu	r2,-20(fp)
}
   144cc:	e037883a 	mov	sp,fp
   144d0:	df000017 	ldw	fp,0(sp)
   144d4:	dec00104 	addi	sp,sp,4
   144d8:	f800283a 	ret

000144dc <OS_FlagBlock>:
* Note(s)    : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

static  void  OS_FlagBlock (OS_FLAG_GRP *pgrp, OS_FLAG_NODE *pnode, OS_FLAGS flags, INT8U wait_type, INT16U timeout)
{
   144dc:	defff804 	addi	sp,sp,-32
   144e0:	df000715 	stw	fp,28(sp)
   144e4:	df000704 	addi	fp,sp,28
   144e8:	e13ffb15 	stw	r4,-20(fp)
   144ec:	e17ffc15 	stw	r5,-16(fp)
   144f0:	3009883a 	mov	r4,r6
   144f4:	3807883a 	mov	r3,r7
   144f8:	e0800117 	ldw	r2,4(fp)
   144fc:	e13ffd0d 	sth	r4,-12(fp)
   14500:	e0fffe05 	stb	r3,-8(fp)
   14504:	e0bfff0d 	sth	r2,-4(fp)
    OS_FLAG_NODE  *pnode_next;
    INT8U          y;


    OSTCBCur->OSTCBStat      |= OS_STAT_FLAG;
   14508:	008000b4 	movhi	r2,2
   1450c:	10949004 	addi	r2,r2,21056
   14510:	10c00017 	ldw	r3,0(r2)
   14514:	008000b4 	movhi	r2,2
   14518:	10949004 	addi	r2,r2,21056
   1451c:	10800017 	ldw	r2,0(r2)
   14520:	10800c03 	ldbu	r2,48(r2)
   14524:	10800814 	ori	r2,r2,32
   14528:	18800c05 	stb	r2,48(r3)
    OSTCBCur->OSTCBStatPend   = OS_STAT_PEND_OK;
   1452c:	008000b4 	movhi	r2,2
   14530:	10949004 	addi	r2,r2,21056
   14534:	10800017 	ldw	r2,0(r2)
   14538:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBDly        = timeout;              /* Store timeout in task's TCB                   */
   1453c:	008000b4 	movhi	r2,2
   14540:	10949004 	addi	r2,r2,21056
   14544:	10800017 	ldw	r2,0(r2)
   14548:	e0ffff0b 	ldhu	r3,-4(fp)
   1454c:	10c00b8d 	sth	r3,46(r2)
#if OS_TASK_DEL_EN > 0
    OSTCBCur->OSTCBFlagNode   = pnode;                /* TCB to link to node                           */
   14550:	008000b4 	movhi	r2,2
   14554:	10949004 	addi	r2,r2,21056
   14558:	10800017 	ldw	r2,0(r2)
   1455c:	e0fffc17 	ldw	r3,-16(fp)
   14560:	10c00a15 	stw	r3,40(r2)
#endif
    pnode->OSFlagNodeFlags    = flags;                /* Save the flags that we need to wait for       */
   14564:	e0bffc17 	ldw	r2,-16(fp)
   14568:	e0fffd0b 	ldhu	r3,-12(fp)
   1456c:	10c0040d 	sth	r3,16(r2)
    pnode->OSFlagNodeWaitType = wait_type;            /* Save the type of wait we are doing            */
   14570:	e0bffc17 	ldw	r2,-16(fp)
   14574:	e0fffe03 	ldbu	r3,-8(fp)
   14578:	10c00485 	stb	r3,18(r2)
    pnode->OSFlagNodeTCB      = (void *)OSTCBCur;     /* Link to task's TCB                            */
   1457c:	008000b4 	movhi	r2,2
   14580:	10949004 	addi	r2,r2,21056
   14584:	10c00017 	ldw	r3,0(r2)
   14588:	e0bffc17 	ldw	r2,-16(fp)
   1458c:	10c00215 	stw	r3,8(r2)
    pnode->OSFlagNodeNext     = pgrp->OSFlagWaitList; /* Add node at beginning of event flag wait list */
   14590:	e0bffb17 	ldw	r2,-20(fp)
   14594:	10c00117 	ldw	r3,4(r2)
   14598:	e0bffc17 	ldw	r2,-16(fp)
   1459c:	10c00015 	stw	r3,0(r2)
    pnode->OSFlagNodePrev     = (void *)0;
   145a0:	e0bffc17 	ldw	r2,-16(fp)
   145a4:	10000115 	stw	zero,4(r2)
    pnode->OSFlagNodeFlagGrp  = (void *)pgrp;         /* Link to Event Flag Group                      */
   145a8:	e0bffc17 	ldw	r2,-16(fp)
   145ac:	e0fffb17 	ldw	r3,-20(fp)
   145b0:	10c00315 	stw	r3,12(r2)
    pnode_next                = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
   145b4:	e0bffb17 	ldw	r2,-20(fp)
   145b8:	10800117 	ldw	r2,4(r2)
   145bc:	e0bff915 	stw	r2,-28(fp)
    if (pnode_next != (void *)0) {                    /* Is this the first NODE to insert?             */
   145c0:	e0bff917 	ldw	r2,-28(fp)
   145c4:	10000326 	beq	r2,zero,145d4 <OS_FlagBlock+0xf8>
        pnode_next->OSFlagNodePrev = pnode;           /* No, link in doubly linked list                */
   145c8:	e0bff917 	ldw	r2,-28(fp)
   145cc:	e0fffc17 	ldw	r3,-16(fp)
   145d0:	10c00115 	stw	r3,4(r2)
    }
    pgrp->OSFlagWaitList = (void *)pnode;
   145d4:	e0bffb17 	ldw	r2,-20(fp)
   145d8:	e0fffc17 	ldw	r3,-16(fp)
   145dc:	10c00115 	stw	r3,4(r2)

    y            =  OSTCBCur->OSTCBY;                 /* Suspend current task until flag(s) received   */
   145e0:	008000b4 	movhi	r2,2
   145e4:	10949004 	addi	r2,r2,21056
   145e8:	10800017 	ldw	r2,0(r2)
   145ec:	10800d03 	ldbu	r2,52(r2)
   145f0:	e0bffa05 	stb	r2,-24(fp)
    OSRdyTbl[y] &= ~OSTCBCur->OSTCBBitX;
   145f4:	e0fffa03 	ldbu	r3,-24(fp)
   145f8:	e13ffa03 	ldbu	r4,-24(fp)
   145fc:	008000b4 	movhi	r2,2
   14600:	10948d44 	addi	r2,r2,21045
   14604:	1105883a 	add	r2,r2,r4
   14608:	10800003 	ldbu	r2,0(r2)
   1460c:	1009883a 	mov	r4,r2
   14610:	008000b4 	movhi	r2,2
   14614:	10949004 	addi	r2,r2,21056
   14618:	10800017 	ldw	r2,0(r2)
   1461c:	10800d43 	ldbu	r2,53(r2)
   14620:	0084303a 	nor	r2,zero,r2
   14624:	2084703a 	and	r2,r4,r2
   14628:	1009883a 	mov	r4,r2
   1462c:	008000b4 	movhi	r2,2
   14630:	10948d44 	addi	r2,r2,21045
   14634:	10c5883a 	add	r2,r2,r3
   14638:	11000005 	stb	r4,0(r2)
    if (OSRdyTbl[y] == 0x00) {
   1463c:	e0fffa03 	ldbu	r3,-24(fp)
   14640:	008000b4 	movhi	r2,2
   14644:	10948d44 	addi	r2,r2,21045
   14648:	10c5883a 	add	r2,r2,r3
   1464c:	10800003 	ldbu	r2,0(r2)
   14650:	10803fcc 	andi	r2,r2,255
   14654:	10000e1e 	bne	r2,zero,14690 <OS_FlagBlock+0x1b4>
        OSRdyGrp &= ~OSTCBCur->OSTCBBitY;
   14658:	008000b4 	movhi	r2,2
   1465c:	10949004 	addi	r2,r2,21056
   14660:	10800017 	ldw	r2,0(r2)
   14664:	10800d83 	ldbu	r2,54(r2)
   14668:	0084303a 	nor	r2,zero,r2
   1466c:	1007883a 	mov	r3,r2
   14670:	008000b4 	movhi	r2,2
   14674:	10948d04 	addi	r2,r2,21044
   14678:	10800003 	ldbu	r2,0(r2)
   1467c:	1884703a 	and	r2,r3,r2
   14680:	1007883a 	mov	r3,r2
   14684:	008000b4 	movhi	r2,2
   14688:	10948d04 	addi	r2,r2,21044
   1468c:	10c00005 	stb	r3,0(r2)
    }
}
   14690:	e037883a 	mov	sp,fp
   14694:	df000017 	ldw	fp,0(sp)
   14698:	dec00104 	addi	sp,sp,4
   1469c:	f800283a 	ret

000146a0 <OS_FlagInit>:
* WARNING    : You MUST NOT call this function from your code.  This is an INTERNAL function to uC/OS-II.
*********************************************************************************************************
*/

void  OS_FlagInit (void)
{
   146a0:	defffb04 	addi	sp,sp,-20
   146a4:	dfc00415 	stw	ra,16(sp)
   146a8:	df000315 	stw	fp,12(sp)
   146ac:	df000304 	addi	fp,sp,12
    INT16U       i;
    OS_FLAG_GRP *pgrp1;
    OS_FLAG_GRP *pgrp2;


    OS_MemClr((INT8U *)&OSFlagTbl[0], sizeof(OSFlagTbl));           /* Clear the flag group table      */
   146b0:	010000b4 	movhi	r4,2
   146b4:	2114c904 	addi	r4,r4,21284
   146b8:	0140dc04 	movi	r5,880
   146bc:	00128000 	call	12800 <OS_MemClr>
    pgrp1 = &OSFlagTbl[0];
   146c0:	008000b4 	movhi	r2,2
   146c4:	1094c904 	addi	r2,r2,21284
   146c8:	e0bffe15 	stw	r2,-8(fp)
    pgrp2 = &OSFlagTbl[1];
   146cc:	008000b4 	movhi	r2,2
   146d0:	1094d404 	addi	r2,r2,21328
   146d4:	e0bfff15 	stw	r2,-4(fp)
    for (i = 0; i < (OS_MAX_FLAGS - 1); i++) {                      /* Init. list of free EVENT FLAGS  */
   146d8:	e03ffd0d 	sth	zero,-12(fp)
   146dc:	00001306 	br	1472c <OS_FlagInit+0x8c>
        pgrp1->OSFlagType     = OS_EVENT_TYPE_UNUSED;
   146e0:	e0bffe17 	ldw	r2,-8(fp)
   146e4:	10000005 	stb	zero,0(r2)
        pgrp1->OSFlagWaitList = (void *)pgrp2;
   146e8:	e0bffe17 	ldw	r2,-8(fp)
   146ec:	e0ffff17 	ldw	r3,-4(fp)
   146f0:	10c00115 	stw	r3,4(r2)
#if OS_FLAG_NAME_SIZE > 1
        pgrp1->OSFlagName[0]  = '?';                                /* Unknown name                    */
   146f4:	e0bffe17 	ldw	r2,-8(fp)
   146f8:	00c00fc4 	movi	r3,63
   146fc:	10c00285 	stb	r3,10(r2)
        pgrp1->OSFlagName[1]  = OS_ASCII_NUL;
   14700:	e0bffe17 	ldw	r2,-8(fp)
   14704:	100002c5 	stb	zero,11(r2)
#endif
        pgrp1++;
   14708:	e0bffe17 	ldw	r2,-8(fp)
   1470c:	10800b04 	addi	r2,r2,44
   14710:	e0bffe15 	stw	r2,-8(fp)
        pgrp2++;
   14714:	e0bfff17 	ldw	r2,-4(fp)
   14718:	10800b04 	addi	r2,r2,44
   1471c:	e0bfff15 	stw	r2,-4(fp)


    OS_MemClr((INT8U *)&OSFlagTbl[0], sizeof(OSFlagTbl));           /* Clear the flag group table      */
    pgrp1 = &OSFlagTbl[0];
    pgrp2 = &OSFlagTbl[1];
    for (i = 0; i < (OS_MAX_FLAGS - 1); i++) {                      /* Init. list of free EVENT FLAGS  */
   14720:	e0bffd0b 	ldhu	r2,-12(fp)
   14724:	10800044 	addi	r2,r2,1
   14728:	e0bffd0d 	sth	r2,-12(fp)
   1472c:	e0bffd0b 	ldhu	r2,-12(fp)
   14730:	108004f0 	cmpltui	r2,r2,19
   14734:	103fea1e 	bne	r2,zero,146e0 <__alt_mem_Flash_flash_data+0xf40146e0>
        pgrp1->OSFlagName[1]  = OS_ASCII_NUL;
#endif
        pgrp1++;
        pgrp2++;
    }
    pgrp1->OSFlagType     = OS_EVENT_TYPE_UNUSED;
   14738:	e0bffe17 	ldw	r2,-8(fp)
   1473c:	10000005 	stb	zero,0(r2)
    pgrp1->OSFlagWaitList = (void *)0;
   14740:	e0bffe17 	ldw	r2,-8(fp)
   14744:	10000115 	stw	zero,4(r2)
#if OS_FLAG_NAME_SIZE > 1
    pgrp1->OSFlagName[0]  = '?';                                    /* Unknown name                    */
   14748:	e0bffe17 	ldw	r2,-8(fp)
   1474c:	00c00fc4 	movi	r3,63
   14750:	10c00285 	stb	r3,10(r2)
    pgrp1->OSFlagName[1]  = OS_ASCII_NUL;
   14754:	e0bffe17 	ldw	r2,-8(fp)
   14758:	100002c5 	stb	zero,11(r2)
#endif
    OSFlagFreeList        = &OSFlagTbl[0];
   1475c:	008000b4 	movhi	r2,2
   14760:	10949204 	addi	r2,r2,21064
   14764:	00c000b4 	movhi	r3,2
   14768:	18d4c904 	addi	r3,r3,21284
   1476c:	10c00015 	stw	r3,0(r2)
#endif
}
   14770:	e037883a 	mov	sp,fp
   14774:	dfc00117 	ldw	ra,4(sp)
   14778:	df000017 	ldw	fp,0(sp)
   1477c:	dec00204 	addi	sp,sp,8
   14780:	f800283a 	ret

00014784 <OS_FlagTaskRdy>:
*              2) This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

static  BOOLEAN  OS_FlagTaskRdy (OS_FLAG_NODE *pnode, OS_FLAGS flags_rdy)
{
   14784:	defffa04 	addi	sp,sp,-24
   14788:	dfc00515 	stw	ra,20(sp)
   1478c:	df000415 	stw	fp,16(sp)
   14790:	df000404 	addi	fp,sp,16
   14794:	e13ffe15 	stw	r4,-8(fp)
   14798:	2805883a 	mov	r2,r5
   1479c:	e0bfff0d 	sth	r2,-4(fp)
    OS_TCB   *ptcb;
    BOOLEAN   sched;


    ptcb                 = (OS_TCB *)pnode->OSFlagNodeTCB; /* Point to TCB of waiting task             */
   147a0:	e0bffe17 	ldw	r2,-8(fp)
   147a4:	10800217 	ldw	r2,8(r2)
   147a8:	e0bffd15 	stw	r2,-12(fp)
    ptcb->OSTCBDly       = 0;
   147ac:	e0bffd17 	ldw	r2,-12(fp)
   147b0:	10000b8d 	sth	zero,46(r2)
    ptcb->OSTCBFlagsRdy  = flags_rdy;
   147b4:	e0bffd17 	ldw	r2,-12(fp)
   147b8:	e0ffff0b 	ldhu	r3,-4(fp)
   147bc:	10c00b0d 	sth	r3,44(r2)
    ptcb->OSTCBStat     &= ~(INT8U)OS_STAT_FLAG;
   147c0:	e0bffd17 	ldw	r2,-12(fp)
   147c4:	10c00c03 	ldbu	r3,48(r2)
   147c8:	00bff7c4 	movi	r2,-33
   147cc:	1884703a 	and	r2,r3,r2
   147d0:	1007883a 	mov	r3,r2
   147d4:	e0bffd17 	ldw	r2,-12(fp)
   147d8:	10c00c05 	stb	r3,48(r2)
    ptcb->OSTCBStatPend  = OS_STAT_PEND_OK;
   147dc:	e0bffd17 	ldw	r2,-12(fp)
   147e0:	10000c45 	stb	zero,49(r2)
    if (ptcb->OSTCBStat == OS_STAT_RDY) {                  /* Task now ready?                          */
   147e4:	e0bffd17 	ldw	r2,-12(fp)
   147e8:	10800c03 	ldbu	r2,48(r2)
   147ec:	10803fcc 	andi	r2,r2,255
   147f0:	10001f1e 	bne	r2,zero,14870 <OS_FlagTaskRdy+0xec>
        OSRdyGrp               |= ptcb->OSTCBBitY;         /* Put task into ready list                 */
   147f4:	e0bffd17 	ldw	r2,-12(fp)
   147f8:	10c00d83 	ldbu	r3,54(r2)
   147fc:	008000b4 	movhi	r2,2
   14800:	10948d04 	addi	r2,r2,21044
   14804:	10800003 	ldbu	r2,0(r2)
   14808:	1884b03a 	or	r2,r3,r2
   1480c:	1007883a 	mov	r3,r2
   14810:	008000b4 	movhi	r2,2
   14814:	10948d04 	addi	r2,r2,21044
   14818:	10c00005 	stb	r3,0(r2)
        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
   1481c:	e0bffd17 	ldw	r2,-12(fp)
   14820:	10800d03 	ldbu	r2,52(r2)
   14824:	10c03fcc 	andi	r3,r2,255
   14828:	e0bffd17 	ldw	r2,-12(fp)
   1482c:	10800d03 	ldbu	r2,52(r2)
   14830:	11003fcc 	andi	r4,r2,255
   14834:	008000b4 	movhi	r2,2
   14838:	10948d44 	addi	r2,r2,21045
   1483c:	1105883a 	add	r2,r2,r4
   14840:	11000003 	ldbu	r4,0(r2)
   14844:	e0bffd17 	ldw	r2,-12(fp)
   14848:	10800d43 	ldbu	r2,53(r2)
   1484c:	2084b03a 	or	r2,r4,r2
   14850:	1009883a 	mov	r4,r2
   14854:	008000b4 	movhi	r2,2
   14858:	10948d44 	addi	r2,r2,21045
   1485c:	10c5883a 	add	r2,r2,r3
   14860:	11000005 	stb	r4,0(r2)
        sched                   = OS_TRUE;
   14864:	00800044 	movi	r2,1
   14868:	e0bffc05 	stb	r2,-16(fp)
   1486c:	00000106 	br	14874 <OS_FlagTaskRdy+0xf0>
    } else {
        sched                   = OS_FALSE;
   14870:	e03ffc05 	stb	zero,-16(fp)
    }
    OS_FlagUnlink(pnode);
   14874:	e13ffe17 	ldw	r4,-8(fp)
   14878:	00148940 	call	14894 <OS_FlagUnlink>
    return (sched);
   1487c:	e0bffc03 	ldbu	r2,-16(fp)
}
   14880:	e037883a 	mov	sp,fp
   14884:	dfc00117 	ldw	ra,4(sp)
   14888:	df000017 	ldw	fp,0(sp)
   1488c:	dec00204 	addi	sp,sp,8
   14890:	f800283a 	ret

00014894 <OS_FlagUnlink>:
*              2) This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

void  OS_FlagUnlink (OS_FLAG_NODE *pnode)
{
   14894:	defffa04 	addi	sp,sp,-24
   14898:	df000515 	stw	fp,20(sp)
   1489c:	df000504 	addi	fp,sp,20
   148a0:	e13fff15 	stw	r4,-4(fp)
    OS_FLAG_GRP  *pgrp;
    OS_FLAG_NODE *pnode_prev;
    OS_FLAG_NODE *pnode_next;


    pnode_prev = (OS_FLAG_NODE *)pnode->OSFlagNodePrev;
   148a4:	e0bfff17 	ldw	r2,-4(fp)
   148a8:	10800117 	ldw	r2,4(r2)
   148ac:	e0bffb15 	stw	r2,-20(fp)
    pnode_next = (OS_FLAG_NODE *)pnode->OSFlagNodeNext;
   148b0:	e0bfff17 	ldw	r2,-4(fp)
   148b4:	10800017 	ldw	r2,0(r2)
   148b8:	e0bffc15 	stw	r2,-16(fp)
    if (pnode_prev == (OS_FLAG_NODE *)0) {                      /* Is it first node in wait list?      */
   148bc:	e0bffb17 	ldw	r2,-20(fp)
   148c0:	10000b1e 	bne	r2,zero,148f0 <OS_FlagUnlink+0x5c>
        pgrp                 = (OS_FLAG_GRP *)pnode->OSFlagNodeFlagGrp;
   148c4:	e0bfff17 	ldw	r2,-4(fp)
   148c8:	10800317 	ldw	r2,12(r2)
   148cc:	e0bffd15 	stw	r2,-12(fp)
        pgrp->OSFlagWaitList = (void *)pnode_next;              /*      Update list for new 1st node   */
   148d0:	e0bffd17 	ldw	r2,-12(fp)
   148d4:	e0fffc17 	ldw	r3,-16(fp)
   148d8:	10c00115 	stw	r3,4(r2)
        if (pnode_next != (OS_FLAG_NODE *)0) {
   148dc:	e0bffc17 	ldw	r2,-16(fp)
   148e0:	10000b26 	beq	r2,zero,14910 <OS_FlagUnlink+0x7c>
            pnode_next->OSFlagNodePrev = (OS_FLAG_NODE *)0;     /*      Link new 1st node PREV to NULL */
   148e4:	e0bffc17 	ldw	r2,-16(fp)
   148e8:	10000115 	stw	zero,4(r2)
   148ec:	00000806 	br	14910 <OS_FlagUnlink+0x7c>
        }
    } else {                                                    /* No,  A node somewhere in the list   */
        pnode_prev->OSFlagNodeNext = pnode_next;                /*      Link around the node to unlink */
   148f0:	e0bffb17 	ldw	r2,-20(fp)
   148f4:	e0fffc17 	ldw	r3,-16(fp)
   148f8:	10c00015 	stw	r3,0(r2)
        if (pnode_next != (OS_FLAG_NODE *)0) {                  /*      Was this the LAST node?        */
   148fc:	e0bffc17 	ldw	r2,-16(fp)
   14900:	10000326 	beq	r2,zero,14910 <OS_FlagUnlink+0x7c>
            pnode_next->OSFlagNodePrev = pnode_prev;            /*      No, Link around current node   */
   14904:	e0bffc17 	ldw	r2,-16(fp)
   14908:	e0fffb17 	ldw	r3,-20(fp)
   1490c:	10c00115 	stw	r3,4(r2)
        }
    }
#if OS_TASK_DEL_EN > 0
    ptcb                = (OS_TCB *)pnode->OSFlagNodeTCB;
   14910:	e0bfff17 	ldw	r2,-4(fp)
   14914:	10800217 	ldw	r2,8(r2)
   14918:	e0bffe15 	stw	r2,-8(fp)
    ptcb->OSTCBFlagNode = (OS_FLAG_NODE *)0;
   1491c:	e0bffe17 	ldw	r2,-8(fp)
   14920:	10000a15 	stw	zero,40(r2)
#endif
}
   14924:	e037883a 	mov	sp,fp
   14928:	df000017 	ldw	fp,0(sp)
   1492c:	dec00104 	addi	sp,sp,4
   14930:	f800283a 	ret

00014934 <OSMemCreate>:
*                              free partition is available.
*********************************************************************************************************
*/

OS_MEM  *OSMemCreate (void *addr, INT32U nblks, INT32U blksize, INT8U *perr)
{
   14934:	defff404 	addi	sp,sp,-48
   14938:	df000b15 	stw	fp,44(sp)
   1493c:	df000b04 	addi	fp,sp,44
   14940:	e13ffc15 	stw	r4,-16(fp)
   14944:	e17ffd15 	stw	r5,-12(fp)
   14948:	e1bffe15 	stw	r6,-8(fp)
   1494c:	e1ffff15 	stw	r7,-4(fp)
    OS_MEM    *pmem;
    INT8U     *pblk;
    void     **plink;
    INT32U     i;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   14950:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0              
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
   14954:	e0bfff17 	ldw	r2,-4(fp)
   14958:	1000021e 	bne	r2,zero,14964 <OSMemCreate+0x30>
        return ((OS_MEM *)0);
   1495c:	0005883a 	mov	r2,zero
   14960:	00006d06 	br	14b18 <OSMemCreate+0x1e4>
    }
    if (addr == (void *)0) {                          /* Must pass a valid address for the memory part.*/
   14964:	e0bffc17 	ldw	r2,-16(fp)
   14968:	1000051e 	bne	r2,zero,14980 <OSMemCreate+0x4c>
        *perr = OS_ERR_MEM_INVALID_ADDR;
   1496c:	e0bfff17 	ldw	r2,-4(fp)
   14970:	00c01884 	movi	r3,98
   14974:	10c00005 	stb	r3,0(r2)
        return ((OS_MEM *)0);
   14978:	0005883a 	mov	r2,zero
   1497c:	00006606 	br	14b18 <OSMemCreate+0x1e4>
    }
    if (((INT32U)addr & (sizeof(void *) - 1)) != 0){  /* Must be pointer size aligned                  */
   14980:	e0bffc17 	ldw	r2,-16(fp)
   14984:	108000cc 	andi	r2,r2,3
   14988:	10000526 	beq	r2,zero,149a0 <OSMemCreate+0x6c>
        *perr = OS_ERR_MEM_INVALID_ADDR;
   1498c:	e0bfff17 	ldw	r2,-4(fp)
   14990:	00c01884 	movi	r3,98
   14994:	10c00005 	stb	r3,0(r2)
        return ((OS_MEM *)0);
   14998:	0005883a 	mov	r2,zero
   1499c:	00005e06 	br	14b18 <OSMemCreate+0x1e4>
    }
    if (nblks < 2) {                                  /* Must have at least 2 blocks per partition     */
   149a0:	e0bffd17 	ldw	r2,-12(fp)
   149a4:	108000a8 	cmpgeui	r2,r2,2
   149a8:	1000051e 	bne	r2,zero,149c0 <OSMemCreate+0x8c>
        *perr = OS_ERR_MEM_INVALID_BLKS;
   149ac:	e0bfff17 	ldw	r2,-4(fp)
   149b0:	00c016c4 	movi	r3,91
   149b4:	10c00005 	stb	r3,0(r2)
        return ((OS_MEM *)0);
   149b8:	0005883a 	mov	r2,zero
   149bc:	00005606 	br	14b18 <OSMemCreate+0x1e4>
    }
    if (blksize < sizeof(void *)) {                   /* Must contain space for at least a pointer     */
   149c0:	e0bffe17 	ldw	r2,-8(fp)
   149c4:	10800128 	cmpgeui	r2,r2,4
   149c8:	1000051e 	bne	r2,zero,149e0 <OSMemCreate+0xac>
        *perr = OS_ERR_MEM_INVALID_SIZE;
   149cc:	e0bfff17 	ldw	r2,-4(fp)
   149d0:	00c01704 	movi	r3,92
   149d4:	10c00005 	stb	r3,0(r2)
        return ((OS_MEM *)0);
   149d8:	0005883a 	mov	r2,zero
   149dc:	00004e06 	br	14b18 <OSMemCreate+0x1e4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   149e0:	0005303a 	rdctl	r2,status
   149e4:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   149e8:	e0fffa17 	ldw	r3,-24(fp)
   149ec:	00bfff84 	movi	r2,-2
   149f0:	1884703a 	and	r2,r3,r2
   149f4:	1001703a 	wrctl	status,r2
  
  return context;
   149f8:	e0bffa17 	ldw	r2,-24(fp)
    }
#endif
    OS_ENTER_CRITICAL();
   149fc:	e0bff815 	stw	r2,-32(fp)
    pmem = OSMemFreeList;                             /* Get next free memory partition                */
   14a00:	008000b4 	movhi	r2,2
   14a04:	10948a04 	addi	r2,r2,21032
   14a08:	10800017 	ldw	r2,0(r2)
   14a0c:	e0bff915 	stw	r2,-28(fp)
    if (OSMemFreeList != (OS_MEM *)0) {               /* See if pool of free partitions was empty      */
   14a10:	008000b4 	movhi	r2,2
   14a14:	10948a04 	addi	r2,r2,21032
   14a18:	10800017 	ldw	r2,0(r2)
   14a1c:	10000726 	beq	r2,zero,14a3c <OSMemCreate+0x108>
        OSMemFreeList = (OS_MEM *)OSMemFreeList->OSMemFreeList;
   14a20:	008000b4 	movhi	r2,2
   14a24:	10948a04 	addi	r2,r2,21032
   14a28:	10800017 	ldw	r2,0(r2)
   14a2c:	10c00117 	ldw	r3,4(r2)
   14a30:	008000b4 	movhi	r2,2
   14a34:	10948a04 	addi	r2,r2,21032
   14a38:	10c00015 	stw	r3,0(r2)
   14a3c:	e0bff817 	ldw	r2,-32(fp)
   14a40:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   14a44:	e0bffb17 	ldw	r2,-20(fp)
   14a48:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    if (pmem == (OS_MEM *)0) {                        /* See if we have a memory partition             */
   14a4c:	e0bff917 	ldw	r2,-28(fp)
   14a50:	1000051e 	bne	r2,zero,14a68 <OSMemCreate+0x134>
        *perr = OS_ERR_MEM_INVALID_PART;
   14a54:	e0bfff17 	ldw	r2,-4(fp)
   14a58:	00c01684 	movi	r3,90
   14a5c:	10c00005 	stb	r3,0(r2)
        return ((OS_MEM *)0);
   14a60:	0005883a 	mov	r2,zero
   14a64:	00002c06 	br	14b18 <OSMemCreate+0x1e4>
    }
    plink = (void **)addr;                            /* Create linked list of free memory blocks      */
   14a68:	e0bffc17 	ldw	r2,-16(fp)
   14a6c:	e0bff615 	stw	r2,-40(fp)
    pblk  = (INT8U *)((INT32U)addr + blksize);
   14a70:	e0fffc17 	ldw	r3,-16(fp)
   14a74:	e0bffe17 	ldw	r2,-8(fp)
   14a78:	1885883a 	add	r2,r3,r2
   14a7c:	e0bff515 	stw	r2,-44(fp)
    for (i = 0; i < (nblks - 1); i++) {
   14a80:	e03ff715 	stw	zero,-36(fp)
   14a84:	00000c06 	br	14ab8 <OSMemCreate+0x184>
       *plink = (void *)pblk;                         /* Save pointer to NEXT block in CURRENT block   */
   14a88:	e0bff617 	ldw	r2,-40(fp)
   14a8c:	e0fff517 	ldw	r3,-44(fp)
   14a90:	10c00015 	stw	r3,0(r2)
        plink = (void **)pblk;                        /* Position to  NEXT      block                  */
   14a94:	e0bff517 	ldw	r2,-44(fp)
   14a98:	e0bff615 	stw	r2,-40(fp)
        pblk  = (INT8U *)((INT32U)pblk + blksize);    /* Point to the FOLLOWING block                  */
   14a9c:	e0fff517 	ldw	r3,-44(fp)
   14aa0:	e0bffe17 	ldw	r2,-8(fp)
   14aa4:	1885883a 	add	r2,r3,r2
   14aa8:	e0bff515 	stw	r2,-44(fp)
        *perr = OS_ERR_MEM_INVALID_PART;
        return ((OS_MEM *)0);
    }
    plink = (void **)addr;                            /* Create linked list of free memory blocks      */
    pblk  = (INT8U *)((INT32U)addr + blksize);
    for (i = 0; i < (nblks - 1); i++) {
   14aac:	e0bff717 	ldw	r2,-36(fp)
   14ab0:	10800044 	addi	r2,r2,1
   14ab4:	e0bff715 	stw	r2,-36(fp)
   14ab8:	e0bffd17 	ldw	r2,-12(fp)
   14abc:	10bfffc4 	addi	r2,r2,-1
   14ac0:	e0fff717 	ldw	r3,-36(fp)
   14ac4:	18bff036 	bltu	r3,r2,14a88 <__alt_mem_Flash_flash_data+0xf4014a88>
       *plink = (void *)pblk;                         /* Save pointer to NEXT block in CURRENT block   */
        plink = (void **)pblk;                        /* Position to  NEXT      block                  */
        pblk  = (INT8U *)((INT32U)pblk + blksize);    /* Point to the FOLLOWING block                  */
    }
    *plink              = (void *)0;                  /* Last memory block points to NULL              */
   14ac8:	e0bff617 	ldw	r2,-40(fp)
   14acc:	10000015 	stw	zero,0(r2)
    pmem->OSMemAddr     = addr;                       /* Store start address of memory partition       */
   14ad0:	e0bff917 	ldw	r2,-28(fp)
   14ad4:	e0fffc17 	ldw	r3,-16(fp)
   14ad8:	10c00015 	stw	r3,0(r2)
    pmem->OSMemFreeList = addr;                       /* Initialize pointer to pool of free blocks     */
   14adc:	e0bff917 	ldw	r2,-28(fp)
   14ae0:	e0fffc17 	ldw	r3,-16(fp)
   14ae4:	10c00115 	stw	r3,4(r2)
    pmem->OSMemNFree    = nblks;                      /* Store number of free blocks in MCB            */
   14ae8:	e0bff917 	ldw	r2,-28(fp)
   14aec:	e0fffd17 	ldw	r3,-12(fp)
   14af0:	10c00415 	stw	r3,16(r2)
    pmem->OSMemNBlks    = nblks;
   14af4:	e0bff917 	ldw	r2,-28(fp)
   14af8:	e0fffd17 	ldw	r3,-12(fp)
   14afc:	10c00315 	stw	r3,12(r2)
    pmem->OSMemBlkSize  = blksize;                    /* Store block size of each memory blocks        */
   14b00:	e0bff917 	ldw	r2,-28(fp)
   14b04:	e0fffe17 	ldw	r3,-8(fp)
   14b08:	10c00215 	stw	r3,8(r2)
    *perr               = OS_ERR_NONE;
   14b0c:	e0bfff17 	ldw	r2,-4(fp)
   14b10:	10000005 	stb	zero,0(r2)
    return (pmem);
   14b14:	e0bff917 	ldw	r2,-28(fp)
}
   14b18:	e037883a 	mov	sp,fp
   14b1c:	df000017 	ldw	fp,0(sp)
   14b20:	dec00104 	addi	sp,sp,4
   14b24:	f800283a 	ret

00014b28 <OSMemGet>:
*               A pointer to NULL if an error is detected
*********************************************************************************************************
*/

void  *OSMemGet (OS_MEM *pmem, INT8U *perr)
{
   14b28:	defff804 	addi	sp,sp,-32
   14b2c:	df000715 	stw	fp,28(sp)
   14b30:	df000704 	addi	fp,sp,28
   14b34:	e13ffe15 	stw	r4,-8(fp)
   14b38:	e17fff15 	stw	r5,-4(fp)
    void      *pblk;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   14b3c:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
   14b40:	e0bfff17 	ldw	r2,-4(fp)
   14b44:	1000021e 	bne	r2,zero,14b50 <OSMemGet+0x28>
        return ((void *)0);
   14b48:	0005883a 	mov	r2,zero
   14b4c:	00002e06 	br	14c08 <OSMemGet+0xe0>
    }
    if (pmem == (OS_MEM *)0) {                        /* Must point to a valid memory partition        */
   14b50:	e0bffe17 	ldw	r2,-8(fp)
   14b54:	1000051e 	bne	r2,zero,14b6c <OSMemGet+0x44>
        *perr = OS_ERR_MEM_INVALID_PMEM;
   14b58:	e0bfff17 	ldw	r2,-4(fp)
   14b5c:	00c01804 	movi	r3,96
   14b60:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
   14b64:	0005883a 	mov	r2,zero
   14b68:	00002706 	br	14c08 <OSMemGet+0xe0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   14b6c:	0005303a 	rdctl	r2,status
   14b70:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   14b74:	e0fffb17 	ldw	r3,-20(fp)
   14b78:	00bfff84 	movi	r2,-2
   14b7c:	1884703a 	and	r2,r3,r2
   14b80:	1001703a 	wrctl	status,r2
  
  return context;
   14b84:	e0bffb17 	ldw	r2,-20(fp)
    }
#endif
    OS_ENTER_CRITICAL();
   14b88:	e0bff915 	stw	r2,-28(fp)
    if (pmem->OSMemNFree > 0) {                       /* See if there are any free memory blocks       */
   14b8c:	e0bffe17 	ldw	r2,-8(fp)
   14b90:	10800417 	ldw	r2,16(r2)
   14b94:	10001426 	beq	r2,zero,14be8 <OSMemGet+0xc0>
        pblk                = pmem->OSMemFreeList;    /* Yes, point to next free memory block          */
   14b98:	e0bffe17 	ldw	r2,-8(fp)
   14b9c:	10800117 	ldw	r2,4(r2)
   14ba0:	e0bffa15 	stw	r2,-24(fp)
        pmem->OSMemFreeList = *(void **)pblk;         /*      Adjust pointer to new free list          */
   14ba4:	e0bffa17 	ldw	r2,-24(fp)
   14ba8:	10c00017 	ldw	r3,0(r2)
   14bac:	e0bffe17 	ldw	r2,-8(fp)
   14bb0:	10c00115 	stw	r3,4(r2)
        pmem->OSMemNFree--;                           /*      One less memory block in this partition  */
   14bb4:	e0bffe17 	ldw	r2,-8(fp)
   14bb8:	10800417 	ldw	r2,16(r2)
   14bbc:	10ffffc4 	addi	r3,r2,-1
   14bc0:	e0bffe17 	ldw	r2,-8(fp)
   14bc4:	10c00415 	stw	r3,16(r2)
   14bc8:	e0bff917 	ldw	r2,-28(fp)
   14bcc:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   14bd0:	e0bffc17 	ldw	r2,-16(fp)
   14bd4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_NONE;                          /*      No error                                 */
   14bd8:	e0bfff17 	ldw	r2,-4(fp)
   14bdc:	10000005 	stb	zero,0(r2)
        return (pblk);                                /*      Return memory block to caller            */
   14be0:	e0bffa17 	ldw	r2,-24(fp)
   14be4:	00000806 	br	14c08 <OSMemGet+0xe0>
   14be8:	e0bff917 	ldw	r2,-28(fp)
   14bec:	e0bffd15 	stw	r2,-12(fp)
   14bf0:	e0bffd17 	ldw	r2,-12(fp)
   14bf4:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_MEM_NO_FREE_BLKS;                  /* No,  Notify caller of empty memory partition  */
   14bf8:	e0bfff17 	ldw	r2,-4(fp)
   14bfc:	00c01744 	movi	r3,93
   14c00:	10c00005 	stb	r3,0(r2)
    return ((void *)0);                               /*      Return NULL pointer to caller            */
   14c04:	0005883a 	mov	r2,zero
}
   14c08:	e037883a 	mov	sp,fp
   14c0c:	df000017 	ldw	fp,0(sp)
   14c10:	dec00104 	addi	sp,sp,4
   14c14:	f800283a 	ret

00014c18 <OSMemNameGet>:
*********************************************************************************************************
*/

#if OS_MEM_NAME_SIZE > 1
INT8U  OSMemNameGet (OS_MEM *pmem, INT8U *pname, INT8U *perr)
{
   14c18:	defff704 	addi	sp,sp,-36
   14c1c:	dfc00815 	stw	ra,32(sp)
   14c20:	df000715 	stw	fp,28(sp)
   14c24:	df000704 	addi	fp,sp,28
   14c28:	e13ffd15 	stw	r4,-12(fp)
   14c2c:	e17ffe15 	stw	r5,-8(fp)
   14c30:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   14c34:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
   14c38:	e0bfff17 	ldw	r2,-4(fp)
   14c3c:	1000021e 	bne	r2,zero,14c48 <OSMemNameGet+0x30>
        return (0);
   14c40:	0005883a 	mov	r2,zero
   14c44:	00002d06 	br	14cfc <OSMemNameGet+0xe4>
    }
    if (pmem == (OS_MEM *)0) {                   /* Is 'pmem' a NULL pointer?                          */
   14c48:	e0bffd17 	ldw	r2,-12(fp)
   14c4c:	1000051e 	bne	r2,zero,14c64 <OSMemNameGet+0x4c>
        *perr = OS_ERR_MEM_INVALID_PMEM;
   14c50:	e0bfff17 	ldw	r2,-4(fp)
   14c54:	00c01804 	movi	r3,96
   14c58:	10c00005 	stb	r3,0(r2)
        return (0);
   14c5c:	0005883a 	mov	r2,zero
   14c60:	00002606 	br	14cfc <OSMemNameGet+0xe4>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
   14c64:	e0bffe17 	ldw	r2,-8(fp)
   14c68:	1000051e 	bne	r2,zero,14c80 <OSMemNameGet+0x68>
        *perr = OS_ERR_PNAME_NULL;
   14c6c:	e0bfff17 	ldw	r2,-4(fp)
   14c70:	00c00304 	movi	r3,12
   14c74:	10c00005 	stb	r3,0(r2)
        return (0);
   14c78:	0005883a 	mov	r2,zero
   14c7c:	00001f06 	br	14cfc <OSMemNameGet+0xe4>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
   14c80:	008000b4 	movhi	r2,2
   14c84:	10948f04 	addi	r2,r2,21052
   14c88:	10800003 	ldbu	r2,0(r2)
   14c8c:	10803fcc 	andi	r2,r2,255
   14c90:	10000526 	beq	r2,zero,14ca8 <OSMemNameGet+0x90>
        *perr = OS_ERR_NAME_GET_ISR;
   14c94:	e0bfff17 	ldw	r2,-4(fp)
   14c98:	00c00444 	movi	r3,17
   14c9c:	10c00005 	stb	r3,0(r2)
        return (0);
   14ca0:	0005883a 	mov	r2,zero
   14ca4:	00001506 	br	14cfc <OSMemNameGet+0xe4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   14ca8:	0005303a 	rdctl	r2,status
   14cac:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   14cb0:	e0fffb17 	ldw	r3,-20(fp)
   14cb4:	00bfff84 	movi	r2,-2
   14cb8:	1884703a 	and	r2,r3,r2
   14cbc:	1001703a 	wrctl	status,r2
  
  return context;
   14cc0:	e0bffb17 	ldw	r2,-20(fp)
    }
    OS_ENTER_CRITICAL();
   14cc4:	e0bff915 	stw	r2,-28(fp)
    len   = OS_StrCopy(pname, pmem->OSMemName);  /* Copy name from OS_MEM                              */
   14cc8:	e0bffd17 	ldw	r2,-12(fp)
   14ccc:	10800504 	addi	r2,r2,20
   14cd0:	e13ffe17 	ldw	r4,-8(fp)
   14cd4:	100b883a 	mov	r5,r2
   14cd8:	00129f00 	call	129f0 <OS_StrCopy>
   14cdc:	e0bffa05 	stb	r2,-24(fp)
   14ce0:	e0bff917 	ldw	r2,-28(fp)
   14ce4:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   14ce8:	e0bffc17 	ldw	r2,-16(fp)
   14cec:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
   14cf0:	e0bfff17 	ldw	r2,-4(fp)
   14cf4:	10000005 	stb	zero,0(r2)
    return (len);
   14cf8:	e0bffa03 	ldbu	r2,-24(fp)
}
   14cfc:	e037883a 	mov	sp,fp
   14d00:	dfc00117 	ldw	ra,4(sp)
   14d04:	df000017 	ldw	fp,0(sp)
   14d08:	dec00204 	addi	sp,sp,8
   14d0c:	f800283a 	ret

00014d10 <OSMemNameSet>:
*********************************************************************************************************
*/

#if OS_MEM_NAME_SIZE > 1
void  OSMemNameSet (OS_MEM *pmem, INT8U *pname, INT8U *perr)
{
   14d10:	defff604 	addi	sp,sp,-40
   14d14:	dfc00915 	stw	ra,36(sp)
   14d18:	df000815 	stw	fp,32(sp)
   14d1c:	df000804 	addi	fp,sp,32
   14d20:	e13ffd15 	stw	r4,-12(fp)
   14d24:	e17ffe15 	stw	r5,-8(fp)
   14d28:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   14d2c:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
   14d30:	e0bfff17 	ldw	r2,-4(fp)
   14d34:	1000011e 	bne	r2,zero,14d3c <OSMemNameSet+0x2c>
        return;
   14d38:	00003606 	br	14e14 <OSMemNameSet+0x104>
    }
    if (pmem == (OS_MEM *)0) {                   /* Is 'pmem' a NULL pointer?                          */
   14d3c:	e0bffd17 	ldw	r2,-12(fp)
   14d40:	1000041e 	bne	r2,zero,14d54 <OSMemNameSet+0x44>
        *perr = OS_ERR_MEM_INVALID_PMEM;
   14d44:	e0bfff17 	ldw	r2,-4(fp)
   14d48:	00c01804 	movi	r3,96
   14d4c:	10c00005 	stb	r3,0(r2)
        return;
   14d50:	00003006 	br	14e14 <OSMemNameSet+0x104>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
   14d54:	e0bffe17 	ldw	r2,-8(fp)
   14d58:	1000041e 	bne	r2,zero,14d6c <OSMemNameSet+0x5c>
        *perr = OS_ERR_PNAME_NULL;
   14d5c:	e0bfff17 	ldw	r2,-4(fp)
   14d60:	00c00304 	movi	r3,12
   14d64:	10c00005 	stb	r3,0(r2)
        return;
   14d68:	00002a06 	br	14e14 <OSMemNameSet+0x104>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
   14d6c:	008000b4 	movhi	r2,2
   14d70:	10948f04 	addi	r2,r2,21052
   14d74:	10800003 	ldbu	r2,0(r2)
   14d78:	10803fcc 	andi	r2,r2,255
   14d7c:	10000426 	beq	r2,zero,14d90 <OSMemNameSet+0x80>
        *perr = OS_ERR_NAME_SET_ISR;
   14d80:	e0bfff17 	ldw	r2,-4(fp)
   14d84:	00c00484 	movi	r3,18
   14d88:	10c00005 	stb	r3,0(r2)
        return;
   14d8c:	00002106 	br	14e14 <OSMemNameSet+0x104>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   14d90:	0005303a 	rdctl	r2,status
   14d94:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   14d98:	e0fffa17 	ldw	r3,-24(fp)
   14d9c:	00bfff84 	movi	r2,-2
   14da0:	1884703a 	and	r2,r3,r2
   14da4:	1001703a 	wrctl	status,r2
  
  return context;
   14da8:	e0bffa17 	ldw	r2,-24(fp)
    }
    OS_ENTER_CRITICAL();
   14dac:	e0bff815 	stw	r2,-32(fp)
    len = OS_StrLen(pname);                      /* Can we fit the string in the storage area?         */
   14db0:	e13ffe17 	ldw	r4,-8(fp)
   14db4:	0012a640 	call	12a64 <OS_StrLen>
   14db8:	e0bff905 	stb	r2,-28(fp)
    if (len > (OS_MEM_NAME_SIZE - 1)) {          /* No                                                 */
   14dbc:	e0bff903 	ldbu	r2,-28(fp)
   14dc0:	10800830 	cmpltui	r2,r2,32
   14dc4:	1000081e 	bne	r2,zero,14de8 <OSMemNameSet+0xd8>
   14dc8:	e0bff817 	ldw	r2,-32(fp)
   14dcc:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   14dd0:	e0bffb17 	ldw	r2,-20(fp)
   14dd4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_MEM_NAME_TOO_LONG;
   14dd8:	e0bfff17 	ldw	r2,-4(fp)
   14ddc:	00c018c4 	movi	r3,99
   14de0:	10c00005 	stb	r3,0(r2)
        return;
   14de4:	00000b06 	br	14e14 <OSMemNameSet+0x104>
    }
    (void)OS_StrCopy(pmem->OSMemName, pname);    /* Yes, copy name to the memory partition header      */
   14de8:	e0bffd17 	ldw	r2,-12(fp)
   14dec:	10800504 	addi	r2,r2,20
   14df0:	1009883a 	mov	r4,r2
   14df4:	e17ffe17 	ldw	r5,-8(fp)
   14df8:	00129f00 	call	129f0 <OS_StrCopy>
   14dfc:	e0bff817 	ldw	r2,-32(fp)
   14e00:	e0bffc15 	stw	r2,-16(fp)
   14e04:	e0bffc17 	ldw	r2,-16(fp)
   14e08:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
   14e0c:	e0bfff17 	ldw	r2,-4(fp)
   14e10:	10000005 	stb	zero,0(r2)
}
   14e14:	e037883a 	mov	sp,fp
   14e18:	dfc00117 	ldw	ra,4(sp)
   14e1c:	df000017 	ldw	fp,0(sp)
   14e20:	dec00204 	addi	sp,sp,8
   14e24:	f800283a 	ret

00014e28 <OSMemPut>:
*               OS_ERR_MEM_INVALID_PBLK  if you passed a NULL pointer for the block to release.
*********************************************************************************************************
*/

INT8U  OSMemPut (OS_MEM *pmem, void *pblk)
{
   14e28:	defff904 	addi	sp,sp,-28
   14e2c:	df000615 	stw	fp,24(sp)
   14e30:	df000604 	addi	fp,sp,24
   14e34:	e13ffe15 	stw	r4,-8(fp)
   14e38:	e17fff15 	stw	r5,-4(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   14e3c:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pmem == (OS_MEM *)0) {                   /* Must point to a valid memory partition             */
   14e40:	e0bffe17 	ldw	r2,-8(fp)
   14e44:	1000021e 	bne	r2,zero,14e50 <OSMemPut+0x28>
        return (OS_ERR_MEM_INVALID_PMEM);
   14e48:	00801804 	movi	r2,96
   14e4c:	00002806 	br	14ef0 <OSMemPut+0xc8>
    }
    if (pblk == (void *)0) {                     /* Must release a valid block                         */
   14e50:	e0bfff17 	ldw	r2,-4(fp)
   14e54:	1000021e 	bne	r2,zero,14e60 <OSMemPut+0x38>
        return (OS_ERR_MEM_INVALID_PBLK);
   14e58:	008017c4 	movi	r2,95
   14e5c:	00002406 	br	14ef0 <OSMemPut+0xc8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   14e60:	0005303a 	rdctl	r2,status
   14e64:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   14e68:	e0fffb17 	ldw	r3,-20(fp)
   14e6c:	00bfff84 	movi	r2,-2
   14e70:	1884703a 	and	r2,r3,r2
   14e74:	1001703a 	wrctl	status,r2
  
  return context;
   14e78:	e0bffb17 	ldw	r2,-20(fp)
    }
#endif
    OS_ENTER_CRITICAL();
   14e7c:	e0bffa15 	stw	r2,-24(fp)
    if (pmem->OSMemNFree >= pmem->OSMemNBlks) {  /* Make sure all blocks not already returned          */
   14e80:	e0bffe17 	ldw	r2,-8(fp)
   14e84:	10c00417 	ldw	r3,16(r2)
   14e88:	e0bffe17 	ldw	r2,-8(fp)
   14e8c:	10800317 	ldw	r2,12(r2)
   14e90:	18800636 	bltu	r3,r2,14eac <OSMemPut+0x84>
   14e94:	e0bffa17 	ldw	r2,-24(fp)
   14e98:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   14e9c:	e0bffc17 	ldw	r2,-16(fp)
   14ea0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_MEM_FULL);
   14ea4:	00801784 	movi	r2,94
   14ea8:	00001106 	br	14ef0 <OSMemPut+0xc8>
    }
    *(void **)pblk      = pmem->OSMemFreeList;   /* Insert released block into free block list         */
   14eac:	e0bffe17 	ldw	r2,-8(fp)
   14eb0:	10c00117 	ldw	r3,4(r2)
   14eb4:	e0bfff17 	ldw	r2,-4(fp)
   14eb8:	10c00015 	stw	r3,0(r2)
    pmem->OSMemFreeList = pblk;
   14ebc:	e0bffe17 	ldw	r2,-8(fp)
   14ec0:	e0ffff17 	ldw	r3,-4(fp)
   14ec4:	10c00115 	stw	r3,4(r2)
    pmem->OSMemNFree++;                          /* One more memory block in this partition            */
   14ec8:	e0bffe17 	ldw	r2,-8(fp)
   14ecc:	10800417 	ldw	r2,16(r2)
   14ed0:	10c00044 	addi	r3,r2,1
   14ed4:	e0bffe17 	ldw	r2,-8(fp)
   14ed8:	10c00415 	stw	r3,16(r2)
   14edc:	e0bffa17 	ldw	r2,-24(fp)
   14ee0:	e0bffd15 	stw	r2,-12(fp)
   14ee4:	e0bffd17 	ldw	r2,-12(fp)
   14ee8:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);                        /* Notify caller that memory block was released       */
   14eec:	0005883a 	mov	r2,zero
}
   14ef0:	e037883a 	mov	sp,fp
   14ef4:	df000017 	ldw	fp,0(sp)
   14ef8:	dec00104 	addi	sp,sp,4
   14efc:	f800283a 	ret

00014f00 <OSMemQuery>:
*********************************************************************************************************
*/

#if OS_MEM_QUERY_EN > 0
INT8U  OSMemQuery (OS_MEM *pmem, OS_MEM_DATA *p_mem_data)
{
   14f00:	defffa04 	addi	sp,sp,-24
   14f04:	df000515 	stw	fp,20(sp)
   14f08:	df000504 	addi	fp,sp,20
   14f0c:	e13ffe15 	stw	r4,-8(fp)
   14f10:	e17fff15 	stw	r5,-4(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   14f14:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pmem == (OS_MEM *)0) {                   /* Must point to a valid memory partition             */
   14f18:	e0bffe17 	ldw	r2,-8(fp)
   14f1c:	1000021e 	bne	r2,zero,14f28 <OSMemQuery+0x28>
        return (OS_ERR_MEM_INVALID_PMEM);
   14f20:	00801804 	movi	r2,96
   14f24:	00002c06 	br	14fd8 <OSMemQuery+0xd8>
    }
    if (p_mem_data == (OS_MEM_DATA *)0) {        /* Must release a valid storage area for the data     */
   14f28:	e0bfff17 	ldw	r2,-4(fp)
   14f2c:	1000021e 	bne	r2,zero,14f38 <OSMemQuery+0x38>
        return (OS_ERR_MEM_INVALID_PDATA);
   14f30:	00801844 	movi	r2,97
   14f34:	00002806 	br	14fd8 <OSMemQuery+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   14f38:	0005303a 	rdctl	r2,status
   14f3c:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   14f40:	e0fffc17 	ldw	r3,-16(fp)
   14f44:	00bfff84 	movi	r2,-2
   14f48:	1884703a 	and	r2,r3,r2
   14f4c:	1001703a 	wrctl	status,r2
  
  return context;
   14f50:	e0bffc17 	ldw	r2,-16(fp)
    }
#endif
    OS_ENTER_CRITICAL();
   14f54:	e0bffb15 	stw	r2,-20(fp)
    p_mem_data->OSAddr     = pmem->OSMemAddr;
   14f58:	e0bffe17 	ldw	r2,-8(fp)
   14f5c:	10c00017 	ldw	r3,0(r2)
   14f60:	e0bfff17 	ldw	r2,-4(fp)
   14f64:	10c00015 	stw	r3,0(r2)
    p_mem_data->OSFreeList = pmem->OSMemFreeList;
   14f68:	e0bffe17 	ldw	r2,-8(fp)
   14f6c:	10c00117 	ldw	r3,4(r2)
   14f70:	e0bfff17 	ldw	r2,-4(fp)
   14f74:	10c00115 	stw	r3,4(r2)
    p_mem_data->OSBlkSize  = pmem->OSMemBlkSize;
   14f78:	e0bffe17 	ldw	r2,-8(fp)
   14f7c:	10c00217 	ldw	r3,8(r2)
   14f80:	e0bfff17 	ldw	r2,-4(fp)
   14f84:	10c00215 	stw	r3,8(r2)
    p_mem_data->OSNBlks    = pmem->OSMemNBlks;
   14f88:	e0bffe17 	ldw	r2,-8(fp)
   14f8c:	10c00317 	ldw	r3,12(r2)
   14f90:	e0bfff17 	ldw	r2,-4(fp)
   14f94:	10c00315 	stw	r3,12(r2)
    p_mem_data->OSNFree    = pmem->OSMemNFree;
   14f98:	e0bffe17 	ldw	r2,-8(fp)
   14f9c:	10c00417 	ldw	r3,16(r2)
   14fa0:	e0bfff17 	ldw	r2,-4(fp)
   14fa4:	10c00415 	stw	r3,16(r2)
   14fa8:	e0bffb17 	ldw	r2,-20(fp)
   14fac:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   14fb0:	e0bffd17 	ldw	r2,-12(fp)
   14fb4:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    p_mem_data->OSNUsed    = p_mem_data->OSNBlks - p_mem_data->OSNFree;
   14fb8:	e0bfff17 	ldw	r2,-4(fp)
   14fbc:	10c00317 	ldw	r3,12(r2)
   14fc0:	e0bfff17 	ldw	r2,-4(fp)
   14fc4:	10800417 	ldw	r2,16(r2)
   14fc8:	1887c83a 	sub	r3,r3,r2
   14fcc:	e0bfff17 	ldw	r2,-4(fp)
   14fd0:	10c00515 	stw	r3,20(r2)
    return (OS_ERR_NONE);
   14fd4:	0005883a 	mov	r2,zero
}
   14fd8:	e037883a 	mov	sp,fp
   14fdc:	df000017 	ldw	fp,0(sp)
   14fe0:	dec00104 	addi	sp,sp,4
   14fe4:	f800283a 	ret

00014fe8 <OS_MemInit>:
* Note(s)    : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

void  OS_MemInit (void)
{
   14fe8:	defffc04 	addi	sp,sp,-16
   14fec:	dfc00315 	stw	ra,12(sp)
   14ff0:	df000215 	stw	fp,8(sp)
   14ff4:	df000204 	addi	fp,sp,8
#if OS_MAX_MEM_PART >= 2
    OS_MEM  *pmem;
    INT16U   i;


    OS_MemClr((INT8U *)&OSMemTbl[0], sizeof(OSMemTbl));   /* Clear the memory partition table          */
   14ff8:	010000b4 	movhi	r4,2
   14ffc:	2115a504 	addi	r4,r4,22164
   15000:	01430c04 	movi	r5,3120
   15004:	00128000 	call	12800 <OS_MemClr>
    pmem = &OSMemTbl[0];                                  /* Point to memory control block (MCB)       */
   15008:	008000b4 	movhi	r2,2
   1500c:	1095a504 	addi	r2,r2,22164
   15010:	e0bffe15 	stw	r2,-8(fp)
    for (i = 0; i < (OS_MAX_MEM_PART - 1); i++) {         /* Init. list of free memory partitions      */
   15014:	e03fff0d 	sth	zero,-4(fp)
   15018:	00001306 	br	15068 <OS_MemInit+0x80>
        pmem->OSMemFreeList = (void *)&OSMemTbl[i+1];     /* Chain list of free partitions             */
   1501c:	e0bfff0b 	ldhu	r2,-4(fp)
   15020:	10800044 	addi	r2,r2,1
   15024:	10c00d24 	muli	r3,r2,52
   15028:	008000b4 	movhi	r2,2
   1502c:	1095a504 	addi	r2,r2,22164
   15030:	1887883a 	add	r3,r3,r2
   15034:	e0bffe17 	ldw	r2,-8(fp)
   15038:	10c00115 	stw	r3,4(r2)
#if OS_MEM_NAME_SIZE > 1
        pmem->OSMemName[0]  = '?';                        /* Unknown name                              */
   1503c:	e0bffe17 	ldw	r2,-8(fp)
   15040:	00c00fc4 	movi	r3,63
   15044:	10c00505 	stb	r3,20(r2)
        pmem->OSMemName[1]  = OS_ASCII_NUL;
   15048:	e0bffe17 	ldw	r2,-8(fp)
   1504c:	10000545 	stb	zero,21(r2)
#endif
        pmem++;
   15050:	e0bffe17 	ldw	r2,-8(fp)
   15054:	10800d04 	addi	r2,r2,52
   15058:	e0bffe15 	stw	r2,-8(fp)
    INT16U   i;


    OS_MemClr((INT8U *)&OSMemTbl[0], sizeof(OSMemTbl));   /* Clear the memory partition table          */
    pmem = &OSMemTbl[0];                                  /* Point to memory control block (MCB)       */
    for (i = 0; i < (OS_MAX_MEM_PART - 1); i++) {         /* Init. list of free memory partitions      */
   1505c:	e0bfff0b 	ldhu	r2,-4(fp)
   15060:	10800044 	addi	r2,r2,1
   15064:	e0bfff0d 	sth	r2,-4(fp)
   15068:	e0bfff0b 	ldhu	r2,-4(fp)
   1506c:	10800ef0 	cmpltui	r2,r2,59
   15070:	103fea1e 	bne	r2,zero,1501c <__alt_mem_Flash_flash_data+0xf401501c>
        pmem->OSMemName[0]  = '?';                        /* Unknown name                              */
        pmem->OSMemName[1]  = OS_ASCII_NUL;
#endif
        pmem++;
    }
    pmem->OSMemFreeList = (void *)0;                      /* Initialize last node                      */
   15074:	e0bffe17 	ldw	r2,-8(fp)
   15078:	10000115 	stw	zero,4(r2)
#if OS_MEM_NAME_SIZE > 1
    pmem->OSMemName[0]  = '?';                            /* Unknown name                              */
   1507c:	e0bffe17 	ldw	r2,-8(fp)
   15080:	00c00fc4 	movi	r3,63
   15084:	10c00505 	stb	r3,20(r2)
    pmem->OSMemName[1]  = OS_ASCII_NUL;
   15088:	e0bffe17 	ldw	r2,-8(fp)
   1508c:	10000545 	stb	zero,21(r2)
#endif

    OSMemFreeList       = &OSMemTbl[0];                   /* Point to beginning of free list           */
   15090:	008000b4 	movhi	r2,2
   15094:	10948a04 	addi	r2,r2,21032
   15098:	00c000b4 	movhi	r3,2
   1509c:	18d5a504 	addi	r3,r3,22164
   150a0:	10c00015 	stw	r3,0(r2)
#endif
}
   150a4:	e037883a 	mov	sp,fp
   150a8:	dfc00117 	ldw	ra,4(sp)
   150ac:	df000017 	ldw	fp,0(sp)
   150b0:	dec00204 	addi	sp,sp,8
   150b4:	f800283a 	ret

000150b8 <OSQAccept>:
*********************************************************************************************************
*/

#if OS_Q_ACCEPT_EN > 0
void  *OSQAccept (OS_EVENT *pevent, INT8U *perr)
{
   150b8:	defff804 	addi	sp,sp,-32
   150bc:	df000715 	stw	fp,28(sp)
   150c0:	df000704 	addi	fp,sp,28
   150c4:	e13ffe15 	stw	r4,-8(fp)
   150c8:	e17fff15 	stw	r5,-4(fp)
    void      *pmsg;
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   150cc:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
   150d0:	e0bfff17 	ldw	r2,-4(fp)
   150d4:	1000021e 	bne	r2,zero,150e0 <OSQAccept+0x28>
        return ((void *)0);
   150d8:	0005883a 	mov	r2,zero
   150dc:	00004206 	br	151e8 <OSQAccept+0x130>
    }
    if (pevent == (OS_EVENT *)0) {               /* Validate 'pevent'                                  */
   150e0:	e0bffe17 	ldw	r2,-8(fp)
   150e4:	1000051e 	bne	r2,zero,150fc <OSQAccept+0x44>
        *perr = OS_ERR_PEVENT_NULL;
   150e8:	e0bfff17 	ldw	r2,-4(fp)
   150ec:	00c00104 	movi	r3,4
   150f0:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
   150f4:	0005883a 	mov	r2,zero
   150f8:	00003b06 	br	151e8 <OSQAccept+0x130>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {/* Validate event block type                          */
   150fc:	e0bffe17 	ldw	r2,-8(fp)
   15100:	10800003 	ldbu	r2,0(r2)
   15104:	10803fcc 	andi	r2,r2,255
   15108:	108000a0 	cmpeqi	r2,r2,2
   1510c:	1000051e 	bne	r2,zero,15124 <OSQAccept+0x6c>
        *perr = OS_ERR_EVENT_TYPE;
   15110:	e0bfff17 	ldw	r2,-4(fp)
   15114:	00c00044 	movi	r3,1
   15118:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
   1511c:	0005883a 	mov	r2,zero
   15120:	00003106 	br	151e8 <OSQAccept+0x130>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   15124:	0005303a 	rdctl	r2,status
   15128:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1512c:	e0fffc17 	ldw	r3,-16(fp)
   15130:	00bfff84 	movi	r2,-2
   15134:	1884703a 	and	r2,r3,r2
   15138:	1001703a 	wrctl	status,r2
  
  return context;
   1513c:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
   15140:	e0bffa15 	stw	r2,-24(fp)
    pq = (OS_Q *)pevent->OSEventPtr;             /* Point at queue control block                       */
   15144:	e0bffe17 	ldw	r2,-8(fp)
   15148:	10800117 	ldw	r2,4(r2)
   1514c:	e0bffb15 	stw	r2,-20(fp)
    if (pq->OSQEntries > 0) {                    /* See if any messages in the queue                   */
   15150:	e0bffb17 	ldw	r2,-20(fp)
   15154:	1080058b 	ldhu	r2,22(r2)
   15158:	10bfffcc 	andi	r2,r2,65535
   1515c:	10001926 	beq	r2,zero,151c4 <OSQAccept+0x10c>
        pmsg = *pq->OSQOut++;                    /* Yes, extract oldest message from the queue         */
   15160:	e0bffb17 	ldw	r2,-20(fp)
   15164:	10800417 	ldw	r2,16(r2)
   15168:	11000104 	addi	r4,r2,4
   1516c:	e0fffb17 	ldw	r3,-20(fp)
   15170:	19000415 	stw	r4,16(r3)
   15174:	10800017 	ldw	r2,0(r2)
   15178:	e0bff915 	stw	r2,-28(fp)
        pq->OSQEntries--;                        /* Update the number of entries in the queue          */
   1517c:	e0bffb17 	ldw	r2,-20(fp)
   15180:	1080058b 	ldhu	r2,22(r2)
   15184:	10bfffc4 	addi	r2,r2,-1
   15188:	1007883a 	mov	r3,r2
   1518c:	e0bffb17 	ldw	r2,-20(fp)
   15190:	10c0058d 	sth	r3,22(r2)
        if (pq->OSQOut == pq->OSQEnd) {          /* Wrap OUT pointer if we are at the end of the queue */
   15194:	e0bffb17 	ldw	r2,-20(fp)
   15198:	10c00417 	ldw	r3,16(r2)
   1519c:	e0bffb17 	ldw	r2,-20(fp)
   151a0:	10800217 	ldw	r2,8(r2)
   151a4:	1880041e 	bne	r3,r2,151b8 <OSQAccept+0x100>
            pq->OSQOut = pq->OSQStart;
   151a8:	e0bffb17 	ldw	r2,-20(fp)
   151ac:	10c00117 	ldw	r3,4(r2)
   151b0:	e0bffb17 	ldw	r2,-20(fp)
   151b4:	10c00415 	stw	r3,16(r2)
        }
        *perr = OS_ERR_NONE;
   151b8:	e0bfff17 	ldw	r2,-4(fp)
   151bc:	10000005 	stb	zero,0(r2)
   151c0:	00000406 	br	151d4 <OSQAccept+0x11c>
    } else {
        *perr = OS_ERR_Q_EMPTY;
   151c4:	e0bfff17 	ldw	r2,-4(fp)
   151c8:	00c007c4 	movi	r3,31
   151cc:	10c00005 	stb	r3,0(r2)
        pmsg  = (void *)0;                       /* Queue is empty                                     */
   151d0:	e03ff915 	stw	zero,-28(fp)
   151d4:	e0bffa17 	ldw	r2,-24(fp)
   151d8:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   151dc:	e0bffd17 	ldw	r2,-12(fp)
   151e0:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (pmsg);                               /* Return message received (or NULL)                  */
   151e4:	e0bff917 	ldw	r2,-28(fp)
}
   151e8:	e037883a 	mov	sp,fp
   151ec:	df000017 	ldw	fp,0(sp)
   151f0:	dec00104 	addi	sp,sp,4
   151f4:	f800283a 	ret

000151f8 <OSQCreate>:
*              == (OS_EVENT *)0  if no event control blocks were available or an error was detected
*********************************************************************************************************
*/

OS_EVENT  *OSQCreate (void **start, INT16U size)
{
   151f8:	defff404 	addi	sp,sp,-48
   151fc:	dfc00b15 	stw	ra,44(sp)
   15200:	df000a15 	stw	fp,40(sp)
   15204:	df000a04 	addi	fp,sp,40
   15208:	e13ffe15 	stw	r4,-8(fp)
   1520c:	2805883a 	mov	r2,r5
   15210:	e0bfff0d 	sth	r2,-4(fp)
    OS_EVENT  *pevent;
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   15214:	e03ff715 	stw	zero,-36(fp)
#endif



    if (OSIntNesting > 0) {                      /* See if called from ISR ...                         */
   15218:	008000b4 	movhi	r2,2
   1521c:	10948f04 	addi	r2,r2,21052
   15220:	10800003 	ldbu	r2,0(r2)
   15224:	10803fcc 	andi	r2,r2,255
   15228:	10000226 	beq	r2,zero,15234 <OSQCreate+0x3c>
        return ((OS_EVENT *)0);                  /* ... can't CREATE from an ISR                       */
   1522c:	0005883a 	mov	r2,zero
   15230:	00006b06 	br	153e0 <OSQCreate+0x1e8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   15234:	0005303a 	rdctl	r2,status
   15238:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1523c:	e0fff917 	ldw	r3,-28(fp)
   15240:	00bfff84 	movi	r2,-2
   15244:	1884703a 	and	r2,r3,r2
   15248:	1001703a 	wrctl	status,r2
  
  return context;
   1524c:	e0bff917 	ldw	r2,-28(fp)
    }
    OS_ENTER_CRITICAL();
   15250:	e0bff715 	stw	r2,-36(fp)
    pevent = OSEventFreeList;                    /* Get next free event control block                  */
   15254:	008000b4 	movhi	r2,2
   15258:	10948e04 	addi	r2,r2,21048
   1525c:	10800017 	ldw	r2,0(r2)
   15260:	e0bff615 	stw	r2,-40(fp)
    if (OSEventFreeList != (OS_EVENT *)0) {      /* See if pool of free ECB pool was empty             */
   15264:	008000b4 	movhi	r2,2
   15268:	10948e04 	addi	r2,r2,21048
   1526c:	10800017 	ldw	r2,0(r2)
   15270:	10000726 	beq	r2,zero,15290 <OSQCreate+0x98>
        OSEventFreeList = (OS_EVENT *)OSEventFreeList->OSEventPtr;
   15274:	008000b4 	movhi	r2,2
   15278:	10948e04 	addi	r2,r2,21048
   1527c:	10800017 	ldw	r2,0(r2)
   15280:	10c00117 	ldw	r3,4(r2)
   15284:	008000b4 	movhi	r2,2
   15288:	10948e04 	addi	r2,r2,21048
   1528c:	10c00015 	stw	r3,0(r2)
   15290:	e0bff717 	ldw	r2,-36(fp)
   15294:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   15298:	e0bffa17 	ldw	r2,-24(fp)
   1529c:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    if (pevent != (OS_EVENT *)0) {               /* See if we have an event control block              */
   152a0:	e0bff617 	ldw	r2,-40(fp)
   152a4:	10004d26 	beq	r2,zero,153dc <OSQCreate+0x1e4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   152a8:	0005303a 	rdctl	r2,status
   152ac:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   152b0:	e0fffb17 	ldw	r3,-20(fp)
   152b4:	00bfff84 	movi	r2,-2
   152b8:	1884703a 	and	r2,r3,r2
   152bc:	1001703a 	wrctl	status,r2
  
  return context;
   152c0:	e0bffb17 	ldw	r2,-20(fp)
        OS_ENTER_CRITICAL();
   152c4:	e0bff715 	stw	r2,-36(fp)
        pq = OSQFreeList;                        /* Get a free queue control block                     */
   152c8:	008000b4 	movhi	r2,2
   152cc:	10948c04 	addi	r2,r2,21040
   152d0:	10800017 	ldw	r2,0(r2)
   152d4:	e0bff815 	stw	r2,-32(fp)
        if (pq != (OS_Q *)0) {                   /* Were we able to get a queue control block ?        */
   152d8:	e0bff817 	ldw	r2,-32(fp)
   152dc:	10003126 	beq	r2,zero,153a4 <OSQCreate+0x1ac>
            OSQFreeList            = OSQFreeList->OSQPtr; /* Yes, Adjust free list pointer to next free*/
   152e0:	008000b4 	movhi	r2,2
   152e4:	10948c04 	addi	r2,r2,21040
   152e8:	10800017 	ldw	r2,0(r2)
   152ec:	10c00017 	ldw	r3,0(r2)
   152f0:	008000b4 	movhi	r2,2
   152f4:	10948c04 	addi	r2,r2,21040
   152f8:	10c00015 	stw	r3,0(r2)
   152fc:	e0bff717 	ldw	r2,-36(fp)
   15300:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   15304:	e0bffc17 	ldw	r2,-16(fp)
   15308:	1001703a 	wrctl	status,r2
            OS_EXIT_CRITICAL();
            pq->OSQStart           = start;               /*      Initialize the queue                 */
   1530c:	e0bff817 	ldw	r2,-32(fp)
   15310:	e0fffe17 	ldw	r3,-8(fp)
   15314:	10c00115 	stw	r3,4(r2)
            pq->OSQEnd             = &start[size];
   15318:	e0bfff0b 	ldhu	r2,-4(fp)
   1531c:	1085883a 	add	r2,r2,r2
   15320:	1085883a 	add	r2,r2,r2
   15324:	1007883a 	mov	r3,r2
   15328:	e0bffe17 	ldw	r2,-8(fp)
   1532c:	10c7883a 	add	r3,r2,r3
   15330:	e0bff817 	ldw	r2,-32(fp)
   15334:	10c00215 	stw	r3,8(r2)
            pq->OSQIn              = start;
   15338:	e0bff817 	ldw	r2,-32(fp)
   1533c:	e0fffe17 	ldw	r3,-8(fp)
   15340:	10c00315 	stw	r3,12(r2)
            pq->OSQOut             = start;
   15344:	e0bff817 	ldw	r2,-32(fp)
   15348:	e0fffe17 	ldw	r3,-8(fp)
   1534c:	10c00415 	stw	r3,16(r2)
            pq->OSQSize            = size;
   15350:	e0bff817 	ldw	r2,-32(fp)
   15354:	e0ffff0b 	ldhu	r3,-4(fp)
   15358:	10c0050d 	sth	r3,20(r2)
            pq->OSQEntries         = 0;
   1535c:	e0bff817 	ldw	r2,-32(fp)
   15360:	1000058d 	sth	zero,22(r2)
            pevent->OSEventType    = OS_EVENT_TYPE_Q;
   15364:	e0bff617 	ldw	r2,-40(fp)
   15368:	00c00084 	movi	r3,2
   1536c:	10c00005 	stb	r3,0(r2)
            pevent->OSEventCnt     = 0;
   15370:	e0bff617 	ldw	r2,-40(fp)
   15374:	1000020d 	sth	zero,8(r2)
            pevent->OSEventPtr     = pq;
   15378:	e0bff617 	ldw	r2,-40(fp)
   1537c:	e0fff817 	ldw	r3,-32(fp)
   15380:	10c00115 	stw	r3,4(r2)
#if OS_EVENT_NAME_SIZE > 1
            pevent->OSEventName[0] = '?';                  /* Unknown name                             */
   15384:	e0bff617 	ldw	r2,-40(fp)
   15388:	00c00fc4 	movi	r3,63
   1538c:	10c00385 	stb	r3,14(r2)
            pevent->OSEventName[1] = OS_ASCII_NUL;
   15390:	e0bff617 	ldw	r2,-40(fp)
   15394:	100003c5 	stb	zero,15(r2)
#endif
            OS_EventWaitListInit(pevent);                 /*      Initalize the wait list              */
   15398:	e13ff617 	ldw	r4,-40(fp)
   1539c:	001243c0 	call	1243c <OS_EventWaitListInit>
   153a0:	00000e06 	br	153dc <OSQCreate+0x1e4>
        } else {
            pevent->OSEventPtr = (void *)OSEventFreeList; /* No,  Return event control block on error  */
   153a4:	008000b4 	movhi	r2,2
   153a8:	10948e04 	addi	r2,r2,21048
   153ac:	10c00017 	ldw	r3,0(r2)
   153b0:	e0bff617 	ldw	r2,-40(fp)
   153b4:	10c00115 	stw	r3,4(r2)
            OSEventFreeList    = pevent;
   153b8:	008000b4 	movhi	r2,2
   153bc:	10948e04 	addi	r2,r2,21048
   153c0:	e0fff617 	ldw	r3,-40(fp)
   153c4:	10c00015 	stw	r3,0(r2)
   153c8:	e0bff717 	ldw	r2,-36(fp)
   153cc:	e0bffd15 	stw	r2,-12(fp)
   153d0:	e0bffd17 	ldw	r2,-12(fp)
   153d4:	1001703a 	wrctl	status,r2
            OS_EXIT_CRITICAL();
            pevent = (OS_EVENT *)0;
   153d8:	e03ff615 	stw	zero,-40(fp)
        }
    }
    return (pevent);
   153dc:	e0bff617 	ldw	r2,-40(fp)
}
   153e0:	e037883a 	mov	sp,fp
   153e4:	dfc00117 	ldw	ra,4(sp)
   153e8:	df000017 	ldw	fp,0(sp)
   153ec:	dec00204 	addi	sp,sp,8
   153f0:	f800283a 	ret

000153f4 <OSQDel>:
*********************************************************************************************************
*/

#if OS_Q_DEL_EN > 0
OS_EVENT  *OSQDel (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
   153f4:	defff204 	addi	sp,sp,-56
   153f8:	dfc00d15 	stw	ra,52(sp)
   153fc:	df000c15 	stw	fp,48(sp)
   15400:	df000c04 	addi	fp,sp,48
   15404:	e13ffd15 	stw	r4,-12(fp)
   15408:	2805883a 	mov	r2,r5
   1540c:	e1bfff15 	stw	r6,-4(fp)
   15410:	e0bffe05 	stb	r2,-8(fp)
    BOOLEAN    tasks_waiting;
    OS_EVENT  *pevent_return;
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
   15414:	e03ff615 	stw	zero,-40(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
   15418:	e0bfff17 	ldw	r2,-4(fp)
   1541c:	1000021e 	bne	r2,zero,15428 <OSQDel+0x34>
        return (pevent);
   15420:	e0bffd17 	ldw	r2,-12(fp)
   15424:	0000a006 	br	156a8 <OSQDel+0x2b4>
    }
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
   15428:	e0bffd17 	ldw	r2,-12(fp)
   1542c:	1000051e 	bne	r2,zero,15444 <OSQDel+0x50>
        *perr = OS_ERR_PEVENT_NULL;
   15430:	e0bfff17 	ldw	r2,-4(fp)
   15434:	00c00104 	movi	r3,4
   15438:	10c00005 	stb	r3,0(r2)
        return (pevent);
   1543c:	e0bffd17 	ldw	r2,-12(fp)
   15440:	00009906 	br	156a8 <OSQDel+0x2b4>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {          /* Validate event block type                */
   15444:	e0bffd17 	ldw	r2,-12(fp)
   15448:	10800003 	ldbu	r2,0(r2)
   1544c:	10803fcc 	andi	r2,r2,255
   15450:	108000a0 	cmpeqi	r2,r2,2
   15454:	1000051e 	bne	r2,zero,1546c <OSQDel+0x78>
        *perr = OS_ERR_EVENT_TYPE;
   15458:	e0bfff17 	ldw	r2,-4(fp)
   1545c:	00c00044 	movi	r3,1
   15460:	10c00005 	stb	r3,0(r2)
        return (pevent);
   15464:	e0bffd17 	ldw	r2,-12(fp)
   15468:	00008f06 	br	156a8 <OSQDel+0x2b4>
    }
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
   1546c:	008000b4 	movhi	r2,2
   15470:	10948f04 	addi	r2,r2,21052
   15474:	10800003 	ldbu	r2,0(r2)
   15478:	10803fcc 	andi	r2,r2,255
   1547c:	10000526 	beq	r2,zero,15494 <OSQDel+0xa0>
        *perr = OS_ERR_DEL_ISR;                            /* ... can't DELETE from an ISR             */
   15480:	e0bfff17 	ldw	r2,-4(fp)
   15484:	00c003c4 	movi	r3,15
   15488:	10c00005 	stb	r3,0(r2)
        return (pevent);
   1548c:	e0bffd17 	ldw	r2,-12(fp)
   15490:	00008506 	br	156a8 <OSQDel+0x2b4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   15494:	0005303a 	rdctl	r2,status
   15498:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1549c:	e0fff817 	ldw	r3,-32(fp)
   154a0:	00bfff84 	movi	r2,-2
   154a4:	1884703a 	and	r2,r3,r2
   154a8:	1001703a 	wrctl	status,r2
  
  return context;
   154ac:	e0bff817 	ldw	r2,-32(fp)
    }
    OS_ENTER_CRITICAL();
   154b0:	e0bff615 	stw	r2,-40(fp)
    if (pevent->OSEventGrp != 0) {                         /* See if any tasks waiting on queue        */
   154b4:	e0bffd17 	ldw	r2,-12(fp)
   154b8:	10800283 	ldbu	r2,10(r2)
   154bc:	10803fcc 	andi	r2,r2,255
   154c0:	10000326 	beq	r2,zero,154d0 <OSQDel+0xdc>
        tasks_waiting = OS_TRUE;                           /* Yes                                      */
   154c4:	00800044 	movi	r2,1
   154c8:	e0bff405 	stb	r2,-48(fp)
   154cc:	00000106 	br	154d4 <OSQDel+0xe0>
    } else {
        tasks_waiting = OS_FALSE;                          /* No                                       */
   154d0:	e03ff405 	stb	zero,-48(fp)
    }
    switch (opt) {
   154d4:	e0bffe03 	ldbu	r2,-8(fp)
   154d8:	10000326 	beq	r2,zero,154e8 <OSQDel+0xf4>
   154dc:	10800060 	cmpeqi	r2,r2,1
   154e0:	1000381e 	bne	r2,zero,155c4 <OSQDel+0x1d0>
   154e4:	00006506 	br	1567c <OSQDel+0x288>
        case OS_DEL_NO_PEND:                               /* Delete queue only if no task waiting     */
             if (tasks_waiting == OS_FALSE) {
   154e8:	e0bff403 	ldbu	r2,-48(fp)
   154ec:	1000261e 	bne	r2,zero,15588 <OSQDel+0x194>
#if OS_EVENT_NAME_SIZE > 1
                 pevent->OSEventName[0] = '?';             /* Unknown name                             */
   154f0:	e0bffd17 	ldw	r2,-12(fp)
   154f4:	00c00fc4 	movi	r3,63
   154f8:	10c00385 	stb	r3,14(r2)
                 pevent->OSEventName[1] = OS_ASCII_NUL;
   154fc:	e0bffd17 	ldw	r2,-12(fp)
   15500:	100003c5 	stb	zero,15(r2)
#endif
                 pq                     = (OS_Q *)pevent->OSEventPtr;  /* Return OS_Q to free list     */
   15504:	e0bffd17 	ldw	r2,-12(fp)
   15508:	10800117 	ldw	r2,4(r2)
   1550c:	e0bff715 	stw	r2,-36(fp)
                 pq->OSQPtr             = OSQFreeList;
   15510:	008000b4 	movhi	r2,2
   15514:	10948c04 	addi	r2,r2,21040
   15518:	10c00017 	ldw	r3,0(r2)
   1551c:	e0bff717 	ldw	r2,-36(fp)
   15520:	10c00015 	stw	r3,0(r2)
                 OSQFreeList            = pq;
   15524:	008000b4 	movhi	r2,2
   15528:	10948c04 	addi	r2,r2,21040
   1552c:	e0fff717 	ldw	r3,-36(fp)
   15530:	10c00015 	stw	r3,0(r2)
                 pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
   15534:	e0bffd17 	ldw	r2,-12(fp)
   15538:	10000005 	stb	zero,0(r2)
                 pevent->OSEventPtr     = OSEventFreeList; /* Return Event Control Block to free list  */
   1553c:	008000b4 	movhi	r2,2
   15540:	10948e04 	addi	r2,r2,21048
   15544:	10c00017 	ldw	r3,0(r2)
   15548:	e0bffd17 	ldw	r2,-12(fp)
   1554c:	10c00115 	stw	r3,4(r2)
                 pevent->OSEventCnt     = 0;
   15550:	e0bffd17 	ldw	r2,-12(fp)
   15554:	1000020d 	sth	zero,8(r2)
                 OSEventFreeList        = pevent;          /* Get next free event control block        */
   15558:	008000b4 	movhi	r2,2
   1555c:	10948e04 	addi	r2,r2,21048
   15560:	e0fffd17 	ldw	r3,-12(fp)
   15564:	10c00015 	stw	r3,0(r2)
   15568:	e0bff617 	ldw	r2,-40(fp)
   1556c:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   15570:	e0bff917 	ldw	r2,-28(fp)
   15574:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_NONE;
   15578:	e0bfff17 	ldw	r2,-4(fp)
   1557c:	10000005 	stb	zero,0(r2)
                 pevent_return          = (OS_EVENT *)0;   /* Queue has been deleted                   */
   15580:	e03ff515 	stw	zero,-44(fp)
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_TASK_WAITING;
                 pevent_return          = pevent;
             }
             break;
   15584:	00004706 	br	156a4 <OSQDel+0x2b0>
   15588:	e0bff617 	ldw	r2,-40(fp)
   1558c:	e0bffa15 	stw	r2,-24(fp)
   15590:	e0bffa17 	ldw	r2,-24(fp)
   15594:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_NONE;
                 pevent_return          = (OS_EVENT *)0;   /* Queue has been deleted                   */
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_TASK_WAITING;
   15598:	e0bfff17 	ldw	r2,-4(fp)
   1559c:	00c01244 	movi	r3,73
   155a0:	10c00005 	stb	r3,0(r2)
                 pevent_return          = pevent;
   155a4:	e0bffd17 	ldw	r2,-12(fp)
   155a8:	e0bff515 	stw	r2,-44(fp)
             }
             break;
   155ac:	00003d06 	br	156a4 <OSQDel+0x2b0>

        case OS_DEL_ALWAYS:                                /* Always delete the queue                  */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for queue        */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_OK);
   155b0:	e13ffd17 	ldw	r4,-12(fp)
   155b4:	000b883a 	mov	r5,zero
   155b8:	01800104 	movi	r6,4
   155bc:	000f883a 	mov	r7,zero
   155c0:	0011e9c0 	call	11e9c <OS_EventTaskRdy>
                 pevent_return          = pevent;
             }
             break;

        case OS_DEL_ALWAYS:                                /* Always delete the queue                  */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for queue        */
   155c4:	e0bffd17 	ldw	r2,-12(fp)
   155c8:	10800283 	ldbu	r2,10(r2)
   155cc:	10803fcc 	andi	r2,r2,255
   155d0:	103ff71e 	bne	r2,zero,155b0 <__alt_mem_Flash_flash_data+0xf40155b0>
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_OK);
             }
#if OS_EVENT_NAME_SIZE > 1
             pevent->OSEventName[0] = '?';                 /* Unknown name                             */
   155d4:	e0bffd17 	ldw	r2,-12(fp)
   155d8:	00c00fc4 	movi	r3,63
   155dc:	10c00385 	stb	r3,14(r2)
             pevent->OSEventName[1] = OS_ASCII_NUL;
   155e0:	e0bffd17 	ldw	r2,-12(fp)
   155e4:	100003c5 	stb	zero,15(r2)
#endif
             pq                     = (OS_Q *)pevent->OSEventPtr;   /* Return OS_Q to free list        */
   155e8:	e0bffd17 	ldw	r2,-12(fp)
   155ec:	10800117 	ldw	r2,4(r2)
   155f0:	e0bff715 	stw	r2,-36(fp)
             pq->OSQPtr             = OSQFreeList;
   155f4:	008000b4 	movhi	r2,2
   155f8:	10948c04 	addi	r2,r2,21040
   155fc:	10c00017 	ldw	r3,0(r2)
   15600:	e0bff717 	ldw	r2,-36(fp)
   15604:	10c00015 	stw	r3,0(r2)
             OSQFreeList            = pq;
   15608:	008000b4 	movhi	r2,2
   1560c:	10948c04 	addi	r2,r2,21040
   15610:	e0fff717 	ldw	r3,-36(fp)
   15614:	10c00015 	stw	r3,0(r2)
             pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
   15618:	e0bffd17 	ldw	r2,-12(fp)
   1561c:	10000005 	stb	zero,0(r2)
             pevent->OSEventPtr     = OSEventFreeList;     /* Return Event Control Block to free list  */
   15620:	008000b4 	movhi	r2,2
   15624:	10948e04 	addi	r2,r2,21048
   15628:	10c00017 	ldw	r3,0(r2)
   1562c:	e0bffd17 	ldw	r2,-12(fp)
   15630:	10c00115 	stw	r3,4(r2)
             pevent->OSEventCnt     = 0;
   15634:	e0bffd17 	ldw	r2,-12(fp)
   15638:	1000020d 	sth	zero,8(r2)
             OSEventFreeList        = pevent;              /* Get next free event control block        */
   1563c:	008000b4 	movhi	r2,2
   15640:	10948e04 	addi	r2,r2,21048
   15644:	e0fffd17 	ldw	r3,-12(fp)
   15648:	10c00015 	stw	r3,0(r2)
   1564c:	e0bff617 	ldw	r2,-40(fp)
   15650:	e0bffb15 	stw	r2,-20(fp)
   15654:	e0bffb17 	ldw	r2,-20(fp)
   15658:	1001703a 	wrctl	status,r2
             OS_EXIT_CRITICAL();
             if (tasks_waiting == OS_TRUE) {               /* Reschedule only if task(s) were waiting  */
   1565c:	e0bff403 	ldbu	r2,-48(fp)
   15660:	10800058 	cmpnei	r2,r2,1
   15664:	1000011e 	bne	r2,zero,1566c <OSQDel+0x278>
                 OS_Sched();                               /* Find highest priority task ready to run  */
   15668:	00128b40 	call	128b4 <OS_Sched>
             }
             *perr                  = OS_ERR_NONE;
   1566c:	e0bfff17 	ldw	r2,-4(fp)
   15670:	10000005 	stb	zero,0(r2)
             pevent_return          = (OS_EVENT *)0;       /* Queue has been deleted                   */
   15674:	e03ff515 	stw	zero,-44(fp)
             break;
   15678:	00000a06 	br	156a4 <OSQDel+0x2b0>
   1567c:	e0bff617 	ldw	r2,-40(fp)
   15680:	e0bffc15 	stw	r2,-16(fp)
   15684:	e0bffc17 	ldw	r2,-16(fp)
   15688:	1001703a 	wrctl	status,r2

        default:
             OS_EXIT_CRITICAL();
             *perr                  = OS_ERR_INVALID_OPT;
   1568c:	e0bfff17 	ldw	r2,-4(fp)
   15690:	00c001c4 	movi	r3,7
   15694:	10c00005 	stb	r3,0(r2)
             pevent_return          = pevent;
   15698:	e0bffd17 	ldw	r2,-12(fp)
   1569c:	e0bff515 	stw	r2,-44(fp)
             break;
   156a0:	0001883a 	nop
    }
    return (pevent_return);
   156a4:	e0bff517 	ldw	r2,-44(fp)
}
   156a8:	e037883a 	mov	sp,fp
   156ac:	dfc00117 	ldw	ra,4(sp)
   156b0:	df000017 	ldw	fp,0(sp)
   156b4:	dec00204 	addi	sp,sp,8
   156b8:	f800283a 	ret

000156bc <OSQFlush>:
*********************************************************************************************************
*/

#if OS_Q_FLUSH_EN > 0
INT8U  OSQFlush (OS_EVENT *pevent)
{
   156bc:	defffa04 	addi	sp,sp,-24
   156c0:	df000515 	stw	fp,20(sp)
   156c4:	df000504 	addi	fp,sp,20
   156c8:	e13fff15 	stw	r4,-4(fp)
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   156cc:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
   156d0:	e0bfff17 	ldw	r2,-4(fp)
   156d4:	1000021e 	bne	r2,zero,156e0 <OSQFlush+0x24>
        return (OS_ERR_PEVENT_NULL);
   156d8:	00800104 	movi	r2,4
   156dc:	00002106 	br	15764 <OSQFlush+0xa8>
    }
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {     /* Validate event block type                     */
   156e0:	e0bfff17 	ldw	r2,-4(fp)
   156e4:	10800003 	ldbu	r2,0(r2)
   156e8:	10803fcc 	andi	r2,r2,255
   156ec:	108000a0 	cmpeqi	r2,r2,2
   156f0:	1000021e 	bne	r2,zero,156fc <OSQFlush+0x40>
        return (OS_ERR_EVENT_TYPE);
   156f4:	00800044 	movi	r2,1
   156f8:	00001a06 	br	15764 <OSQFlush+0xa8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   156fc:	0005303a 	rdctl	r2,status
   15700:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   15704:	e0fffd17 	ldw	r3,-12(fp)
   15708:	00bfff84 	movi	r2,-2
   1570c:	1884703a 	and	r2,r3,r2
   15710:	1001703a 	wrctl	status,r2
  
  return context;
   15714:	e0bffd17 	ldw	r2,-12(fp)
    }
#endif
    OS_ENTER_CRITICAL();
   15718:	e0bffb15 	stw	r2,-20(fp)
    pq             = (OS_Q *)pevent->OSEventPtr;      /* Point to queue storage structure              */
   1571c:	e0bfff17 	ldw	r2,-4(fp)
   15720:	10800117 	ldw	r2,4(r2)
   15724:	e0bffc15 	stw	r2,-16(fp)
    pq->OSQIn      = pq->OSQStart;
   15728:	e0bffc17 	ldw	r2,-16(fp)
   1572c:	10c00117 	ldw	r3,4(r2)
   15730:	e0bffc17 	ldw	r2,-16(fp)
   15734:	10c00315 	stw	r3,12(r2)
    pq->OSQOut     = pq->OSQStart;
   15738:	e0bffc17 	ldw	r2,-16(fp)
   1573c:	10c00117 	ldw	r3,4(r2)
   15740:	e0bffc17 	ldw	r2,-16(fp)
   15744:	10c00415 	stw	r3,16(r2)
    pq->OSQEntries = 0;
   15748:	e0bffc17 	ldw	r2,-16(fp)
   1574c:	1000058d 	sth	zero,22(r2)
   15750:	e0bffb17 	ldw	r2,-20(fp)
   15754:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   15758:	e0bffe17 	ldw	r2,-8(fp)
   1575c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
   15760:	0005883a 	mov	r2,zero
}
   15764:	e037883a 	mov	sp,fp
   15768:	df000017 	ldw	fp,0(sp)
   1576c:	dec00104 	addi	sp,sp,4
   15770:	f800283a 	ret

00015774 <OSQPend>:
* Note(s)    : As of V2.60, this function allows you to receive NULL pointer messages.
*********************************************************************************************************
*/

void  *OSQPend (OS_EVENT *pevent, INT16U timeout, INT8U *perr)
{
   15774:	defff304 	addi	sp,sp,-52
   15778:	dfc00c15 	stw	ra,48(sp)
   1577c:	df000b15 	stw	fp,44(sp)
   15780:	df000b04 	addi	fp,sp,44
   15784:	e13ffd15 	stw	r4,-12(fp)
   15788:	2805883a 	mov	r2,r5
   1578c:	e1bfff15 	stw	r6,-4(fp)
   15790:	e0bffe0d 	sth	r2,-8(fp)
    void      *pmsg;
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   15794:	e03ff615 	stw	zero,-40(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
   15798:	e0bfff17 	ldw	r2,-4(fp)
   1579c:	1000021e 	bne	r2,zero,157a8 <OSQPend+0x34>
        return ((void *)0);
   157a0:	0005883a 	mov	r2,zero
   157a4:	0000ad06 	br	15a5c <OSQPend+0x2e8>
    }
    if (pevent == (OS_EVENT *)0) {               /* Validate 'pevent'                                  */
   157a8:	e0bffd17 	ldw	r2,-12(fp)
   157ac:	1000051e 	bne	r2,zero,157c4 <OSQPend+0x50>
        *perr = OS_ERR_PEVENT_NULL;
   157b0:	e0bfff17 	ldw	r2,-4(fp)
   157b4:	00c00104 	movi	r3,4
   157b8:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
   157bc:	0005883a 	mov	r2,zero
   157c0:	0000a606 	br	15a5c <OSQPend+0x2e8>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {/* Validate event block type                          */
   157c4:	e0bffd17 	ldw	r2,-12(fp)
   157c8:	10800003 	ldbu	r2,0(r2)
   157cc:	10803fcc 	andi	r2,r2,255
   157d0:	108000a0 	cmpeqi	r2,r2,2
   157d4:	1000051e 	bne	r2,zero,157ec <OSQPend+0x78>
        *perr = OS_ERR_EVENT_TYPE;
   157d8:	e0bfff17 	ldw	r2,-4(fp)
   157dc:	00c00044 	movi	r3,1
   157e0:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
   157e4:	0005883a 	mov	r2,zero
   157e8:	00009c06 	br	15a5c <OSQPend+0x2e8>
    }
    if (OSIntNesting > 0) {                      /* See if called from ISR ...                         */
   157ec:	008000b4 	movhi	r2,2
   157f0:	10948f04 	addi	r2,r2,21052
   157f4:	10800003 	ldbu	r2,0(r2)
   157f8:	10803fcc 	andi	r2,r2,255
   157fc:	10000526 	beq	r2,zero,15814 <OSQPend+0xa0>
        *perr = OS_ERR_PEND_ISR;                 /* ... can't PEND from an ISR                         */
   15800:	e0bfff17 	ldw	r2,-4(fp)
   15804:	00c00084 	movi	r3,2
   15808:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
   1580c:	0005883a 	mov	r2,zero
   15810:	00009206 	br	15a5c <OSQPend+0x2e8>
    }
    if (OSLockNesting > 0) {                     /* See if called with scheduler locked ...            */
   15814:	008000b4 	movhi	r2,2
   15818:	10948104 	addi	r2,r2,20996
   1581c:	10800003 	ldbu	r2,0(r2)
   15820:	10803fcc 	andi	r2,r2,255
   15824:	10000526 	beq	r2,zero,1583c <OSQPend+0xc8>
        *perr = OS_ERR_PEND_LOCKED;              /* ... can't PEND when locked                         */
   15828:	e0bfff17 	ldw	r2,-4(fp)
   1582c:	00c00344 	movi	r3,13
   15830:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
   15834:	0005883a 	mov	r2,zero
   15838:	00008806 	br	15a5c <OSQPend+0x2e8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1583c:	0005303a 	rdctl	r2,status
   15840:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   15844:	e0fff817 	ldw	r3,-32(fp)
   15848:	00bfff84 	movi	r2,-2
   1584c:	1884703a 	and	r2,r3,r2
   15850:	1001703a 	wrctl	status,r2
  
  return context;
   15854:	e0bff817 	ldw	r2,-32(fp)
    }
    OS_ENTER_CRITICAL();
   15858:	e0bff615 	stw	r2,-40(fp)
    pq = (OS_Q *)pevent->OSEventPtr;             /* Point at queue control block                       */
   1585c:	e0bffd17 	ldw	r2,-12(fp)
   15860:	10800117 	ldw	r2,4(r2)
   15864:	e0bff715 	stw	r2,-36(fp)
    if (pq->OSQEntries > 0) {                    /* See if any messages in the queue                   */
   15868:	e0bff717 	ldw	r2,-36(fp)
   1586c:	1080058b 	ldhu	r2,22(r2)
   15870:	10bfffcc 	andi	r2,r2,65535
   15874:	10001e26 	beq	r2,zero,158f0 <OSQPend+0x17c>
        pmsg = *pq->OSQOut++;                    /* Yes, extract oldest message from the queue         */
   15878:	e0bff717 	ldw	r2,-36(fp)
   1587c:	10800417 	ldw	r2,16(r2)
   15880:	11000104 	addi	r4,r2,4
   15884:	e0fff717 	ldw	r3,-36(fp)
   15888:	19000415 	stw	r4,16(r3)
   1588c:	10800017 	ldw	r2,0(r2)
   15890:	e0bff515 	stw	r2,-44(fp)
        pq->OSQEntries--;                        /* Update the number of entries in the queue          */
   15894:	e0bff717 	ldw	r2,-36(fp)
   15898:	1080058b 	ldhu	r2,22(r2)
   1589c:	10bfffc4 	addi	r2,r2,-1
   158a0:	1007883a 	mov	r3,r2
   158a4:	e0bff717 	ldw	r2,-36(fp)
   158a8:	10c0058d 	sth	r3,22(r2)
        if (pq->OSQOut == pq->OSQEnd) {          /* Wrap OUT pointer if we are at the end of the queue */
   158ac:	e0bff717 	ldw	r2,-36(fp)
   158b0:	10c00417 	ldw	r3,16(r2)
   158b4:	e0bff717 	ldw	r2,-36(fp)
   158b8:	10800217 	ldw	r2,8(r2)
   158bc:	1880041e 	bne	r3,r2,158d0 <OSQPend+0x15c>
            pq->OSQOut = pq->OSQStart;
   158c0:	e0bff717 	ldw	r2,-36(fp)
   158c4:	10c00117 	ldw	r3,4(r2)
   158c8:	e0bff717 	ldw	r2,-36(fp)
   158cc:	10c00415 	stw	r3,16(r2)
   158d0:	e0bff617 	ldw	r2,-40(fp)
   158d4:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   158d8:	e0bff917 	ldw	r2,-28(fp)
   158dc:	1001703a 	wrctl	status,r2
        }
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_NONE;
   158e0:	e0bfff17 	ldw	r2,-4(fp)
   158e4:	10000005 	stb	zero,0(r2)
        return (pmsg);                           /* Return message received                            */
   158e8:	e0bff517 	ldw	r2,-44(fp)
   158ec:	00005b06 	br	15a5c <OSQPend+0x2e8>
    }
    OSTCBCur->OSTCBStat     |= OS_STAT_Q;        /* Task will have to pend for a message to be posted  */
   158f0:	008000b4 	movhi	r2,2
   158f4:	10949004 	addi	r2,r2,21056
   158f8:	10c00017 	ldw	r3,0(r2)
   158fc:	008000b4 	movhi	r2,2
   15900:	10949004 	addi	r2,r2,21056
   15904:	10800017 	ldw	r2,0(r2)
   15908:	10800c03 	ldbu	r2,48(r2)
   1590c:	10800114 	ori	r2,r2,4
   15910:	18800c05 	stb	r2,48(r3)
    OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
   15914:	008000b4 	movhi	r2,2
   15918:	10949004 	addi	r2,r2,21056
   1591c:	10800017 	ldw	r2,0(r2)
   15920:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBDly       = timeout;          /* Load timeout into TCB                              */
   15924:	008000b4 	movhi	r2,2
   15928:	10949004 	addi	r2,r2,21056
   1592c:	10800017 	ldw	r2,0(r2)
   15930:	e0fffe0b 	ldhu	r3,-8(fp)
   15934:	10c00b8d 	sth	r3,46(r2)
    OS_EventTaskWait(pevent);                    /* Suspend task until event or timeout occurs         */
   15938:	e13ffd17 	ldw	r4,-12(fp)
   1593c:	00120340 	call	12034 <OS_EventTaskWait>
   15940:	e0bff617 	ldw	r2,-40(fp)
   15944:	e0bffa15 	stw	r2,-24(fp)
   15948:	e0bffa17 	ldw	r2,-24(fp)
   1594c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    OS_Sched();                                  /* Find next highest priority task ready to run       */
   15950:	00128b40 	call	128b4 <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   15954:	0005303a 	rdctl	r2,status
   15958:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1595c:	e0fffb17 	ldw	r3,-20(fp)
   15960:	00bfff84 	movi	r2,-2
   15964:	1884703a 	and	r2,r3,r2
   15968:	1001703a 	wrctl	status,r2
  
  return context;
   1596c:	e0bffb17 	ldw	r2,-20(fp)
    OS_ENTER_CRITICAL();
   15970:	e0bff615 	stw	r2,-40(fp)
    switch (OSTCBCur->OSTCBStatPend) {                /* See if we timed-out or aborted                */
   15974:	008000b4 	movhi	r2,2
   15978:	10949004 	addi	r2,r2,21056
   1597c:	10800017 	ldw	r2,0(r2)
   15980:	10800c43 	ldbu	r2,49(r2)
   15984:	10803fcc 	andi	r2,r2,255
   15988:	10000326 	beq	r2,zero,15998 <OSQPend+0x224>
   1598c:	108000a0 	cmpeqi	r2,r2,2
   15990:	1000091e 	bne	r2,zero,159b8 <OSQPend+0x244>
   15994:	00000d06 	br	159cc <OSQPend+0x258>
        case OS_STAT_PEND_OK:                         /* Extract message from TCB (Put there by QPost) */
             pmsg =  OSTCBCur->OSTCBMsg;
   15998:	008000b4 	movhi	r2,2
   1599c:	10949004 	addi	r2,r2,21056
   159a0:	10800017 	ldw	r2,0(r2)
   159a4:	10800917 	ldw	r2,36(r2)
   159a8:	e0bff515 	stw	r2,-44(fp)
            *perr =  OS_ERR_NONE;
   159ac:	e0bfff17 	ldw	r2,-4(fp)
   159b0:	10000005 	stb	zero,0(r2)
             break;
   159b4:	00001006 	br	159f8 <OSQPend+0x284>

        case OS_STAT_PEND_ABORT:
             pmsg = (void *)0;
   159b8:	e03ff515 	stw	zero,-44(fp)
            *perr =  OS_ERR_PEND_ABORT;               /* Indicate that we aborted                      */
   159bc:	e0bfff17 	ldw	r2,-4(fp)
   159c0:	00c00384 	movi	r3,14
   159c4:	10c00005 	stb	r3,0(r2)
             break;
   159c8:	00000b06 	br	159f8 <OSQPend+0x284>

        case OS_STAT_PEND_TO:
        default:
             OS_EventTaskRemove(OSTCBCur, pevent);
   159cc:	008000b4 	movhi	r2,2
   159d0:	10949004 	addi	r2,r2,21056
   159d4:	10800017 	ldw	r2,0(r2)
   159d8:	1009883a 	mov	r4,r2
   159dc:	e17ffd17 	ldw	r5,-12(fp)
   159e0:	001228c0 	call	1228c <OS_EventTaskRemove>
             pmsg = (void *)0;
   159e4:	e03ff515 	stw	zero,-44(fp)
            *perr =  OS_ERR_TIMEOUT;                  /* Indicate that we didn't get event within TO   */
   159e8:	e0bfff17 	ldw	r2,-4(fp)
   159ec:	00c00284 	movi	r3,10
   159f0:	10c00005 	stb	r3,0(r2)
             break;
   159f4:	0001883a 	nop
    }
    OSTCBCur->OSTCBStat          =  OS_STAT_RDY;      /* Set   task  status to ready                   */
   159f8:	008000b4 	movhi	r2,2
   159fc:	10949004 	addi	r2,r2,21056
   15a00:	10800017 	ldw	r2,0(r2)
   15a04:	10000c05 	stb	zero,48(r2)
    OSTCBCur->OSTCBStatPend      =  OS_STAT_PEND_OK;  /* Clear pend  status                            */
   15a08:	008000b4 	movhi	r2,2
   15a0c:	10949004 	addi	r2,r2,21056
   15a10:	10800017 	ldw	r2,0(r2)
   15a14:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;    /* Clear event pointers                          */
   15a18:	008000b4 	movhi	r2,2
   15a1c:	10949004 	addi	r2,r2,21056
   15a20:	10800017 	ldw	r2,0(r2)
   15a24:	10000715 	stw	zero,28(r2)
#if (OS_EVENT_MULTI_EN > 0)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
   15a28:	008000b4 	movhi	r2,2
   15a2c:	10949004 	addi	r2,r2,21056
   15a30:	10800017 	ldw	r2,0(r2)
   15a34:	10000815 	stw	zero,32(r2)
#endif
    OSTCBCur->OSTCBMsg           = (void      *)0;    /* Clear  received message                       */
   15a38:	008000b4 	movhi	r2,2
   15a3c:	10949004 	addi	r2,r2,21056
   15a40:	10800017 	ldw	r2,0(r2)
   15a44:	10000915 	stw	zero,36(r2)
   15a48:	e0bff617 	ldw	r2,-40(fp)
   15a4c:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   15a50:	e0bffc17 	ldw	r2,-16(fp)
   15a54:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (pmsg);                                    /* Return received message                       */
   15a58:	e0bff517 	ldw	r2,-44(fp)
}
   15a5c:	e037883a 	mov	sp,fp
   15a60:	dfc00117 	ldw	ra,4(sp)
   15a64:	df000017 	ldw	fp,0(sp)
   15a68:	dec00204 	addi	sp,sp,8
   15a6c:	f800283a 	ret

00015a70 <OSQPendAbort>:
*********************************************************************************************************
*/

#if OS_Q_PEND_ABORT_EN > 0
INT8U  OSQPendAbort (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
   15a70:	defff604 	addi	sp,sp,-40
   15a74:	dfc00915 	stw	ra,36(sp)
   15a78:	df000815 	stw	fp,32(sp)
   15a7c:	df000804 	addi	fp,sp,32
   15a80:	e13ffd15 	stw	r4,-12(fp)
   15a84:	2805883a 	mov	r2,r5
   15a88:	e1bfff15 	stw	r6,-4(fp)
   15a8c:	e0bffe05 	stb	r2,-8(fp)
    INT8U      nbr_tasks;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
   15a90:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
   15a94:	e0bfff17 	ldw	r2,-4(fp)
   15a98:	1000021e 	bne	r2,zero,15aa4 <OSQPendAbort+0x34>
        return (0);
   15a9c:	0005883a 	mov	r2,zero
   15aa0:	00004906 	br	15bc8 <OSQPendAbort+0x158>
    }
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
   15aa4:	e0bffd17 	ldw	r2,-12(fp)
   15aa8:	1000051e 	bne	r2,zero,15ac0 <OSQPendAbort+0x50>
        *perr = OS_ERR_PEVENT_NULL;
   15aac:	e0bfff17 	ldw	r2,-4(fp)
   15ab0:	00c00104 	movi	r3,4
   15ab4:	10c00005 	stb	r3,0(r2)
        return (0);
   15ab8:	0005883a 	mov	r2,zero
   15abc:	00004206 	br	15bc8 <OSQPendAbort+0x158>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {          /* Validate event block type                */
   15ac0:	e0bffd17 	ldw	r2,-12(fp)
   15ac4:	10800003 	ldbu	r2,0(r2)
   15ac8:	10803fcc 	andi	r2,r2,255
   15acc:	108000a0 	cmpeqi	r2,r2,2
   15ad0:	1000051e 	bne	r2,zero,15ae8 <OSQPendAbort+0x78>
        *perr = OS_ERR_EVENT_TYPE;
   15ad4:	e0bfff17 	ldw	r2,-4(fp)
   15ad8:	00c00044 	movi	r3,1
   15adc:	10c00005 	stb	r3,0(r2)
        return (0);
   15ae0:	0005883a 	mov	r2,zero
   15ae4:	00003806 	br	15bc8 <OSQPendAbort+0x158>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   15ae8:	0005303a 	rdctl	r2,status
   15aec:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   15af0:	e0fffa17 	ldw	r3,-24(fp)
   15af4:	00bfff84 	movi	r2,-2
   15af8:	1884703a 	and	r2,r3,r2
   15afc:	1001703a 	wrctl	status,r2
  
  return context;
   15b00:	e0bffa17 	ldw	r2,-24(fp)
    }
    OS_ENTER_CRITICAL();
   15b04:	e0bff915 	stw	r2,-28(fp)
    if (pevent->OSEventGrp != 0) {                         /* See if any task waiting on queue?        */
   15b08:	e0bffd17 	ldw	r2,-12(fp)
   15b0c:	10800283 	ldbu	r2,10(r2)
   15b10:	10803fcc 	andi	r2,r2,255
   15b14:	10002526 	beq	r2,zero,15bac <OSQPendAbort+0x13c>
        nbr_tasks = 0;
   15b18:	e03ff805 	stb	zero,-32(fp)
        switch (opt) {
   15b1c:	e0bffe03 	ldbu	r2,-8(fp)
   15b20:	10800060 	cmpeqi	r2,r2,1
   15b24:	10000e26 	beq	r2,zero,15b60 <OSQPendAbort+0xf0>
            case OS_PEND_OPT_BROADCAST:                    /* Do we need to abort ALL waiting tasks?   */
                 while (pevent->OSEventGrp != 0) {         /* Yes, ready ALL tasks waiting on queue    */
   15b28:	00000806 	br	15b4c <OSQPendAbort+0xdc>
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_ABORT);
   15b2c:	e13ffd17 	ldw	r4,-12(fp)
   15b30:	000b883a 	mov	r5,zero
   15b34:	01800104 	movi	r6,4
   15b38:	01c00084 	movi	r7,2
   15b3c:	0011e9c0 	call	11e9c <OS_EventTaskRdy>
                     nbr_tasks++;
   15b40:	e0bff803 	ldbu	r2,-32(fp)
   15b44:	10800044 	addi	r2,r2,1
   15b48:	e0bff805 	stb	r2,-32(fp)
    OS_ENTER_CRITICAL();
    if (pevent->OSEventGrp != 0) {                         /* See if any task waiting on queue?        */
        nbr_tasks = 0;
        switch (opt) {
            case OS_PEND_OPT_BROADCAST:                    /* Do we need to abort ALL waiting tasks?   */
                 while (pevent->OSEventGrp != 0) {         /* Yes, ready ALL tasks waiting on queue    */
   15b4c:	e0bffd17 	ldw	r2,-12(fp)
   15b50:	10800283 	ldbu	r2,10(r2)
   15b54:	10803fcc 	andi	r2,r2,255
   15b58:	103ff41e 	bne	r2,zero,15b2c <__alt_mem_Flash_flash_data+0xf4015b2c>
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_ABORT);
                     nbr_tasks++;
                 }
                 break;
   15b5c:	00000906 	br	15b84 <OSQPendAbort+0x114>
               
            case OS_PEND_OPT_NONE:
            default:                                       /* No,  ready HPT       waiting on queue    */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_ABORT);
   15b60:	e13ffd17 	ldw	r4,-12(fp)
   15b64:	000b883a 	mov	r5,zero
   15b68:	01800104 	movi	r6,4
   15b6c:	01c00084 	movi	r7,2
   15b70:	0011e9c0 	call	11e9c <OS_EventTaskRdy>
                 nbr_tasks++;
   15b74:	e0bff803 	ldbu	r2,-32(fp)
   15b78:	10800044 	addi	r2,r2,1
   15b7c:	e0bff805 	stb	r2,-32(fp)
                 break;
   15b80:	0001883a 	nop
   15b84:	e0bff917 	ldw	r2,-28(fp)
   15b88:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   15b8c:	e0bffb17 	ldw	r2,-20(fp)
   15b90:	1001703a 	wrctl	status,r2
        }
        OS_EXIT_CRITICAL();
        OS_Sched();                                        /* Find HPT ready to run                    */
   15b94:	00128b40 	call	128b4 <OS_Sched>
        *perr = OS_ERR_PEND_ABORT;
   15b98:	e0bfff17 	ldw	r2,-4(fp)
   15b9c:	00c00384 	movi	r3,14
   15ba0:	10c00005 	stb	r3,0(r2)
        return (nbr_tasks);
   15ba4:	e0bff803 	ldbu	r2,-32(fp)
   15ba8:	00000706 	br	15bc8 <OSQPendAbort+0x158>
   15bac:	e0bff917 	ldw	r2,-28(fp)
   15bb0:	e0bffc15 	stw	r2,-16(fp)
   15bb4:	e0bffc17 	ldw	r2,-16(fp)
   15bb8:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
   15bbc:	e0bfff17 	ldw	r2,-4(fp)
   15bc0:	10000005 	stb	zero,0(r2)
    return (0);                                            /* No tasks waiting on queue                */
   15bc4:	0005883a 	mov	r2,zero
}
   15bc8:	e037883a 	mov	sp,fp
   15bcc:	dfc00117 	ldw	ra,4(sp)
   15bd0:	df000017 	ldw	fp,0(sp)
   15bd4:	dec00204 	addi	sp,sp,8
   15bd8:	f800283a 	ret

00015bdc <OSQPost>:
*********************************************************************************************************
*/

#if OS_Q_POST_EN > 0
INT8U  OSQPost (OS_EVENT *pevent, void *pmsg)
{
   15bdc:	defff604 	addi	sp,sp,-40
   15be0:	dfc00915 	stw	ra,36(sp)
   15be4:	df000815 	stw	fp,32(sp)
   15be8:	df000804 	addi	fp,sp,32
   15bec:	e13ffe15 	stw	r4,-8(fp)
   15bf0:	e17fff15 	stw	r5,-4(fp)
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                            /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
   15bf4:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                     /* Validate 'pevent'                            */
   15bf8:	e0bffe17 	ldw	r2,-8(fp)
   15bfc:	1000021e 	bne	r2,zero,15c08 <OSQPost+0x2c>
        return (OS_ERR_PEVENT_NULL);
   15c00:	00800104 	movi	r2,4
   15c04:	00004a06 	br	15d30 <OSQPost+0x154>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {      /* Validate event block type                    */
   15c08:	e0bffe17 	ldw	r2,-8(fp)
   15c0c:	10800003 	ldbu	r2,0(r2)
   15c10:	10803fcc 	andi	r2,r2,255
   15c14:	108000a0 	cmpeqi	r2,r2,2
   15c18:	1000021e 	bne	r2,zero,15c24 <OSQPost+0x48>
        return (OS_ERR_EVENT_TYPE);
   15c1c:	00800044 	movi	r2,1
   15c20:	00004306 	br	15d30 <OSQPost+0x154>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   15c24:	0005303a 	rdctl	r2,status
   15c28:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   15c2c:	e0fffa17 	ldw	r3,-24(fp)
   15c30:	00bfff84 	movi	r2,-2
   15c34:	1884703a 	and	r2,r3,r2
   15c38:	1001703a 	wrctl	status,r2
  
  return context;
   15c3c:	e0bffa17 	ldw	r2,-24(fp)
    }
    OS_ENTER_CRITICAL();
   15c40:	e0bff815 	stw	r2,-32(fp)
    if (pevent->OSEventGrp != 0) {                     /* See if any task pending on queue             */
   15c44:	e0bffe17 	ldw	r2,-8(fp)
   15c48:	10800283 	ldbu	r2,10(r2)
   15c4c:	10803fcc 	andi	r2,r2,255
   15c50:	10000c26 	beq	r2,zero,15c84 <OSQPost+0xa8>
                                                       /* Ready highest priority task waiting on event */
        (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
   15c54:	e13ffe17 	ldw	r4,-8(fp)
   15c58:	e17fff17 	ldw	r5,-4(fp)
   15c5c:	01800104 	movi	r6,4
   15c60:	000f883a 	mov	r7,zero
   15c64:	0011e9c0 	call	11e9c <OS_EventTaskRdy>
   15c68:	e0bff817 	ldw	r2,-32(fp)
   15c6c:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   15c70:	e0bffb17 	ldw	r2,-20(fp)
   15c74:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                                    /* Find highest priority task ready to run      */
   15c78:	00128b40 	call	128b4 <OS_Sched>
        return (OS_ERR_NONE);
   15c7c:	0005883a 	mov	r2,zero
   15c80:	00002b06 	br	15d30 <OSQPost+0x154>
    }
    pq = (OS_Q *)pevent->OSEventPtr;                   /* Point to queue control block                 */
   15c84:	e0bffe17 	ldw	r2,-8(fp)
   15c88:	10800117 	ldw	r2,4(r2)
   15c8c:	e0bff915 	stw	r2,-28(fp)
    if (pq->OSQEntries >= pq->OSQSize) {               /* Make sure queue is not full                  */
   15c90:	e0bff917 	ldw	r2,-28(fp)
   15c94:	10c0058b 	ldhu	r3,22(r2)
   15c98:	e0bff917 	ldw	r2,-28(fp)
   15c9c:	1080050b 	ldhu	r2,20(r2)
   15ca0:	18ffffcc 	andi	r3,r3,65535
   15ca4:	10bfffcc 	andi	r2,r2,65535
   15ca8:	18800636 	bltu	r3,r2,15cc4 <OSQPost+0xe8>
   15cac:	e0bff817 	ldw	r2,-32(fp)
   15cb0:	e0bffc15 	stw	r2,-16(fp)
   15cb4:	e0bffc17 	ldw	r2,-16(fp)
   15cb8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_Q_FULL);
   15cbc:	00800784 	movi	r2,30
   15cc0:	00001b06 	br	15d30 <OSQPost+0x154>
    }
    *pq->OSQIn++ = pmsg;                               /* Insert message into queue                    */
   15cc4:	e0bff917 	ldw	r2,-28(fp)
   15cc8:	10800317 	ldw	r2,12(r2)
   15ccc:	11000104 	addi	r4,r2,4
   15cd0:	e0fff917 	ldw	r3,-28(fp)
   15cd4:	19000315 	stw	r4,12(r3)
   15cd8:	e0ffff17 	ldw	r3,-4(fp)
   15cdc:	10c00015 	stw	r3,0(r2)
    pq->OSQEntries++;                                  /* Update the nbr of entries in the queue       */
   15ce0:	e0bff917 	ldw	r2,-28(fp)
   15ce4:	1080058b 	ldhu	r2,22(r2)
   15ce8:	10800044 	addi	r2,r2,1
   15cec:	1007883a 	mov	r3,r2
   15cf0:	e0bff917 	ldw	r2,-28(fp)
   15cf4:	10c0058d 	sth	r3,22(r2)
    if (pq->OSQIn == pq->OSQEnd) {                     /* Wrap IN ptr if we are at end of queue        */
   15cf8:	e0bff917 	ldw	r2,-28(fp)
   15cfc:	10c00317 	ldw	r3,12(r2)
   15d00:	e0bff917 	ldw	r2,-28(fp)
   15d04:	10800217 	ldw	r2,8(r2)
   15d08:	1880041e 	bne	r3,r2,15d1c <OSQPost+0x140>
        pq->OSQIn = pq->OSQStart;
   15d0c:	e0bff917 	ldw	r2,-28(fp)
   15d10:	10c00117 	ldw	r3,4(r2)
   15d14:	e0bff917 	ldw	r2,-28(fp)
   15d18:	10c00315 	stw	r3,12(r2)
   15d1c:	e0bff817 	ldw	r2,-32(fp)
   15d20:	e0bffd15 	stw	r2,-12(fp)
   15d24:	e0bffd17 	ldw	r2,-12(fp)
   15d28:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
   15d2c:	0005883a 	mov	r2,zero
}
   15d30:	e037883a 	mov	sp,fp
   15d34:	dfc00117 	ldw	ra,4(sp)
   15d38:	df000017 	ldw	fp,0(sp)
   15d3c:	dec00204 	addi	sp,sp,8
   15d40:	f800283a 	ret

00015d44 <OSQPostFront>:
*********************************************************************************************************
*/

#if OS_Q_POST_FRONT_EN > 0
INT8U  OSQPostFront (OS_EVENT *pevent, void *pmsg)
{
   15d44:	defff604 	addi	sp,sp,-40
   15d48:	dfc00915 	stw	ra,36(sp)
   15d4c:	df000815 	stw	fp,32(sp)
   15d50:	df000804 	addi	fp,sp,32
   15d54:	e13ffe15 	stw	r4,-8(fp)
   15d58:	e17fff15 	stw	r5,-4(fp)
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   15d5c:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
   15d60:	e0bffe17 	ldw	r2,-8(fp)
   15d64:	1000021e 	bne	r2,zero,15d70 <OSQPostFront+0x2c>
        return (OS_ERR_PEVENT_NULL);
   15d68:	00800104 	movi	r2,4
   15d6c:	00004c06 	br	15ea0 <OSQPostFront+0x15c>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {     /* Validate event block type                     */
   15d70:	e0bffe17 	ldw	r2,-8(fp)
   15d74:	10800003 	ldbu	r2,0(r2)
   15d78:	10803fcc 	andi	r2,r2,255
   15d7c:	108000a0 	cmpeqi	r2,r2,2
   15d80:	1000021e 	bne	r2,zero,15d8c <OSQPostFront+0x48>
        return (OS_ERR_EVENT_TYPE);
   15d84:	00800044 	movi	r2,1
   15d88:	00004506 	br	15ea0 <OSQPostFront+0x15c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   15d8c:	0005303a 	rdctl	r2,status
   15d90:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   15d94:	e0fffa17 	ldw	r3,-24(fp)
   15d98:	00bfff84 	movi	r2,-2
   15d9c:	1884703a 	and	r2,r3,r2
   15da0:	1001703a 	wrctl	status,r2
  
  return context;
   15da4:	e0bffa17 	ldw	r2,-24(fp)
    }
    OS_ENTER_CRITICAL();
   15da8:	e0bff815 	stw	r2,-32(fp)
    if (pevent->OSEventGrp != 0) {                    /* See if any task pending on queue              */
   15dac:	e0bffe17 	ldw	r2,-8(fp)
   15db0:	10800283 	ldbu	r2,10(r2)
   15db4:	10803fcc 	andi	r2,r2,255
   15db8:	10000c26 	beq	r2,zero,15dec <OSQPostFront+0xa8>
                                                      /* Ready highest priority task waiting on event  */
        (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
   15dbc:	e13ffe17 	ldw	r4,-8(fp)
   15dc0:	e17fff17 	ldw	r5,-4(fp)
   15dc4:	01800104 	movi	r6,4
   15dc8:	000f883a 	mov	r7,zero
   15dcc:	0011e9c0 	call	11e9c <OS_EventTaskRdy>
   15dd0:	e0bff817 	ldw	r2,-32(fp)
   15dd4:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   15dd8:	e0bffb17 	ldw	r2,-20(fp)
   15ddc:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                                   /* Find highest priority task ready to run       */
   15de0:	00128b40 	call	128b4 <OS_Sched>
        return (OS_ERR_NONE);
   15de4:	0005883a 	mov	r2,zero
   15de8:	00002d06 	br	15ea0 <OSQPostFront+0x15c>
    }
    pq = (OS_Q *)pevent->OSEventPtr;                  /* Point to queue control block                  */
   15dec:	e0bffe17 	ldw	r2,-8(fp)
   15df0:	10800117 	ldw	r2,4(r2)
   15df4:	e0bff915 	stw	r2,-28(fp)
    if (pq->OSQEntries >= pq->OSQSize) {              /* Make sure queue is not full                   */
   15df8:	e0bff917 	ldw	r2,-28(fp)
   15dfc:	10c0058b 	ldhu	r3,22(r2)
   15e00:	e0bff917 	ldw	r2,-28(fp)
   15e04:	1080050b 	ldhu	r2,20(r2)
   15e08:	18ffffcc 	andi	r3,r3,65535
   15e0c:	10bfffcc 	andi	r2,r2,65535
   15e10:	18800636 	bltu	r3,r2,15e2c <OSQPostFront+0xe8>
   15e14:	e0bff817 	ldw	r2,-32(fp)
   15e18:	e0bffc15 	stw	r2,-16(fp)
   15e1c:	e0bffc17 	ldw	r2,-16(fp)
   15e20:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_Q_FULL);
   15e24:	00800784 	movi	r2,30
   15e28:	00001d06 	br	15ea0 <OSQPostFront+0x15c>
    }
    if (pq->OSQOut == pq->OSQStart) {                 /* Wrap OUT ptr if we are at the 1st queue entry */
   15e2c:	e0bff917 	ldw	r2,-28(fp)
   15e30:	10c00417 	ldw	r3,16(r2)
   15e34:	e0bff917 	ldw	r2,-28(fp)
   15e38:	10800117 	ldw	r2,4(r2)
   15e3c:	1880041e 	bne	r3,r2,15e50 <OSQPostFront+0x10c>
        pq->OSQOut = pq->OSQEnd;
   15e40:	e0bff917 	ldw	r2,-28(fp)
   15e44:	10c00217 	ldw	r3,8(r2)
   15e48:	e0bff917 	ldw	r2,-28(fp)
   15e4c:	10c00415 	stw	r3,16(r2)
    }
    pq->OSQOut--;
   15e50:	e0bff917 	ldw	r2,-28(fp)
   15e54:	10800417 	ldw	r2,16(r2)
   15e58:	10ffff04 	addi	r3,r2,-4
   15e5c:	e0bff917 	ldw	r2,-28(fp)
   15e60:	10c00415 	stw	r3,16(r2)
    *pq->OSQOut = pmsg;                               /* Insert message into queue                     */
   15e64:	e0bff917 	ldw	r2,-28(fp)
   15e68:	10800417 	ldw	r2,16(r2)
   15e6c:	e0ffff17 	ldw	r3,-4(fp)
   15e70:	10c00015 	stw	r3,0(r2)
    pq->OSQEntries++;                                 /* Update the nbr of entries in the queue        */
   15e74:	e0bff917 	ldw	r2,-28(fp)
   15e78:	1080058b 	ldhu	r2,22(r2)
   15e7c:	10800044 	addi	r2,r2,1
   15e80:	1007883a 	mov	r3,r2
   15e84:	e0bff917 	ldw	r2,-28(fp)
   15e88:	10c0058d 	sth	r3,22(r2)
   15e8c:	e0bff817 	ldw	r2,-32(fp)
   15e90:	e0bffd15 	stw	r2,-12(fp)
   15e94:	e0bffd17 	ldw	r2,-12(fp)
   15e98:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
   15e9c:	0005883a 	mov	r2,zero
}
   15ea0:	e037883a 	mov	sp,fp
   15ea4:	dfc00117 	ldw	ra,4(sp)
   15ea8:	df000017 	ldw	fp,0(sp)
   15eac:	dec00204 	addi	sp,sp,8
   15eb0:	f800283a 	ret

00015eb4 <OSQPostOpt>:
*********************************************************************************************************
*/

#if OS_Q_POST_OPT_EN > 0
INT8U  OSQPostOpt (OS_EVENT *pevent, void *pmsg, INT8U opt)
{
   15eb4:	defff504 	addi	sp,sp,-44
   15eb8:	dfc00a15 	stw	ra,40(sp)
   15ebc:	df000915 	stw	fp,36(sp)
   15ec0:	df000904 	addi	fp,sp,36
   15ec4:	e13ffd15 	stw	r4,-12(fp)
   15ec8:	e17ffe15 	stw	r5,-8(fp)
   15ecc:	3005883a 	mov	r2,r6
   15ed0:	e0bfff05 	stb	r2,-4(fp)
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   15ed4:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
   15ed8:	e0bffd17 	ldw	r2,-12(fp)
   15edc:	1000021e 	bne	r2,zero,15ee8 <OSQPostOpt+0x34>
        return (OS_ERR_PEVENT_NULL);
   15ee0:	00800104 	movi	r2,4
   15ee4:	00007106 	br	160ac <OSQPostOpt+0x1f8>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {     /* Validate event block type                     */
   15ee8:	e0bffd17 	ldw	r2,-12(fp)
   15eec:	10800003 	ldbu	r2,0(r2)
   15ef0:	10803fcc 	andi	r2,r2,255
   15ef4:	108000a0 	cmpeqi	r2,r2,2
   15ef8:	1000021e 	bne	r2,zero,15f04 <OSQPostOpt+0x50>
        return (OS_ERR_EVENT_TYPE);
   15efc:	00800044 	movi	r2,1
   15f00:	00006a06 	br	160ac <OSQPostOpt+0x1f8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   15f04:	0005303a 	rdctl	r2,status
   15f08:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   15f0c:	e0fff917 	ldw	r3,-28(fp)
   15f10:	00bfff84 	movi	r2,-2
   15f14:	1884703a 	and	r2,r3,r2
   15f18:	1001703a 	wrctl	status,r2
  
  return context;
   15f1c:	e0bff917 	ldw	r2,-28(fp)
    }
    OS_ENTER_CRITICAL();
   15f20:	e0bff715 	stw	r2,-36(fp)
    if (pevent->OSEventGrp != 0x00) {                 /* See if any task pending on queue              */
   15f24:	e0bffd17 	ldw	r2,-12(fp)
   15f28:	10800283 	ldbu	r2,10(r2)
   15f2c:	10803fcc 	andi	r2,r2,255
   15f30:	10001d26 	beq	r2,zero,15fa8 <OSQPostOpt+0xf4>
        if ((opt & OS_POST_OPT_BROADCAST) != 0x00) {  /* Do we need to post msg to ALL waiting tasks ? */
   15f34:	e0bfff03 	ldbu	r2,-4(fp)
   15f38:	1080004c 	andi	r2,r2,1
   15f3c:	10000b26 	beq	r2,zero,15f6c <OSQPostOpt+0xb8>
            while (pevent->OSEventGrp != 0) {         /* Yes, Post to ALL tasks waiting on queue       */
   15f40:	00000506 	br	15f58 <OSQPostOpt+0xa4>
                (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
   15f44:	e13ffd17 	ldw	r4,-12(fp)
   15f48:	e17ffe17 	ldw	r5,-8(fp)
   15f4c:	01800104 	movi	r6,4
   15f50:	000f883a 	mov	r7,zero
   15f54:	0011e9c0 	call	11e9c <OS_EventTaskRdy>
        return (OS_ERR_EVENT_TYPE);
    }
    OS_ENTER_CRITICAL();
    if (pevent->OSEventGrp != 0x00) {                 /* See if any task pending on queue              */
        if ((opt & OS_POST_OPT_BROADCAST) != 0x00) {  /* Do we need to post msg to ALL waiting tasks ? */
            while (pevent->OSEventGrp != 0) {         /* Yes, Post to ALL tasks waiting on queue       */
   15f58:	e0bffd17 	ldw	r2,-12(fp)
   15f5c:	10800283 	ldbu	r2,10(r2)
   15f60:	10803fcc 	andi	r2,r2,255
   15f64:	103ff71e 	bne	r2,zero,15f44 <__alt_mem_Flash_flash_data+0xf4015f44>
   15f68:	00000506 	br	15f80 <OSQPostOpt+0xcc>
                (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
            }
        } else {                                      /* No,  Post to HPT waiting on queue             */
            (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
   15f6c:	e13ffd17 	ldw	r4,-12(fp)
   15f70:	e17ffe17 	ldw	r5,-8(fp)
   15f74:	01800104 	movi	r6,4
   15f78:	000f883a 	mov	r7,zero
   15f7c:	0011e9c0 	call	11e9c <OS_EventTaskRdy>
   15f80:	e0bff717 	ldw	r2,-36(fp)
   15f84:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   15f88:	e0bffa17 	ldw	r2,-24(fp)
   15f8c:	1001703a 	wrctl	status,r2
        }
        OS_EXIT_CRITICAL();
        if ((opt & OS_POST_OPT_NO_SCHED) == 0) {	  /* See if scheduler needs to be invoked          */
   15f90:	e0bfff03 	ldbu	r2,-4(fp)
   15f94:	1080010c 	andi	r2,r2,4
   15f98:	1000011e 	bne	r2,zero,15fa0 <OSQPostOpt+0xec>
            OS_Sched();                               /* Find highest priority task ready to run       */
   15f9c:	00128b40 	call	128b4 <OS_Sched>
        }
        return (OS_ERR_NONE);
   15fa0:	0005883a 	mov	r2,zero
   15fa4:	00004106 	br	160ac <OSQPostOpt+0x1f8>
    }
    pq = (OS_Q *)pevent->OSEventPtr;                  /* Point to queue control block                  */
   15fa8:	e0bffd17 	ldw	r2,-12(fp)
   15fac:	10800117 	ldw	r2,4(r2)
   15fb0:	e0bff815 	stw	r2,-32(fp)
    if (pq->OSQEntries >= pq->OSQSize) {              /* Make sure queue is not full                   */
   15fb4:	e0bff817 	ldw	r2,-32(fp)
   15fb8:	10c0058b 	ldhu	r3,22(r2)
   15fbc:	e0bff817 	ldw	r2,-32(fp)
   15fc0:	1080050b 	ldhu	r2,20(r2)
   15fc4:	18ffffcc 	andi	r3,r3,65535
   15fc8:	10bfffcc 	andi	r2,r2,65535
   15fcc:	18800636 	bltu	r3,r2,15fe8 <OSQPostOpt+0x134>
   15fd0:	e0bff717 	ldw	r2,-36(fp)
   15fd4:	e0bffb15 	stw	r2,-20(fp)
   15fd8:	e0bffb17 	ldw	r2,-20(fp)
   15fdc:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_Q_FULL);
   15fe0:	00800784 	movi	r2,30
   15fe4:	00003106 	br	160ac <OSQPostOpt+0x1f8>
    }
    if ((opt & OS_POST_OPT_FRONT) != 0x00) {          /* Do we post to the FRONT of the queue?         */
   15fe8:	e0bfff03 	ldbu	r2,-4(fp)
   15fec:	1080008c 	andi	r2,r2,2
   15ff0:	10001326 	beq	r2,zero,16040 <OSQPostOpt+0x18c>
        if (pq->OSQOut == pq->OSQStart) {             /* Yes, Post as LIFO, Wrap OUT pointer if we ... */
   15ff4:	e0bff817 	ldw	r2,-32(fp)
   15ff8:	10c00417 	ldw	r3,16(r2)
   15ffc:	e0bff817 	ldw	r2,-32(fp)
   16000:	10800117 	ldw	r2,4(r2)
   16004:	1880041e 	bne	r3,r2,16018 <OSQPostOpt+0x164>
            pq->OSQOut = pq->OSQEnd;                  /*      ... are at the 1st queue entry           */
   16008:	e0bff817 	ldw	r2,-32(fp)
   1600c:	10c00217 	ldw	r3,8(r2)
   16010:	e0bff817 	ldw	r2,-32(fp)
   16014:	10c00415 	stw	r3,16(r2)
        }
        pq->OSQOut--;
   16018:	e0bff817 	ldw	r2,-32(fp)
   1601c:	10800417 	ldw	r2,16(r2)
   16020:	10ffff04 	addi	r3,r2,-4
   16024:	e0bff817 	ldw	r2,-32(fp)
   16028:	10c00415 	stw	r3,16(r2)
        *pq->OSQOut = pmsg;                           /*      Insert message into queue                */
   1602c:	e0bff817 	ldw	r2,-32(fp)
   16030:	10800417 	ldw	r2,16(r2)
   16034:	e0fffe17 	ldw	r3,-8(fp)
   16038:	10c00015 	stw	r3,0(r2)
   1603c:	00001006 	br	16080 <OSQPostOpt+0x1cc>
    } else {                                          /* No,  Post as FIFO                             */
        *pq->OSQIn++ = pmsg;                          /*      Insert message into queue                */
   16040:	e0bff817 	ldw	r2,-32(fp)
   16044:	10800317 	ldw	r2,12(r2)
   16048:	11000104 	addi	r4,r2,4
   1604c:	e0fff817 	ldw	r3,-32(fp)
   16050:	19000315 	stw	r4,12(r3)
   16054:	e0fffe17 	ldw	r3,-8(fp)
   16058:	10c00015 	stw	r3,0(r2)
        if (pq->OSQIn == pq->OSQEnd) {                /*      Wrap IN ptr if we are at end of queue    */
   1605c:	e0bff817 	ldw	r2,-32(fp)
   16060:	10c00317 	ldw	r3,12(r2)
   16064:	e0bff817 	ldw	r2,-32(fp)
   16068:	10800217 	ldw	r2,8(r2)
   1606c:	1880041e 	bne	r3,r2,16080 <OSQPostOpt+0x1cc>
            pq->OSQIn = pq->OSQStart;
   16070:	e0bff817 	ldw	r2,-32(fp)
   16074:	10c00117 	ldw	r3,4(r2)
   16078:	e0bff817 	ldw	r2,-32(fp)
   1607c:	10c00315 	stw	r3,12(r2)
        }
    }
    pq->OSQEntries++;                                 /* Update the nbr of entries in the queue        */
   16080:	e0bff817 	ldw	r2,-32(fp)
   16084:	1080058b 	ldhu	r2,22(r2)
   16088:	10800044 	addi	r2,r2,1
   1608c:	1007883a 	mov	r3,r2
   16090:	e0bff817 	ldw	r2,-32(fp)
   16094:	10c0058d 	sth	r3,22(r2)
   16098:	e0bff717 	ldw	r2,-36(fp)
   1609c:	e0bffc15 	stw	r2,-16(fp)
   160a0:	e0bffc17 	ldw	r2,-16(fp)
   160a4:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
   160a8:	0005883a 	mov	r2,zero
}
   160ac:	e037883a 	mov	sp,fp
   160b0:	dfc00117 	ldw	ra,4(sp)
   160b4:	df000017 	ldw	fp,0(sp)
   160b8:	dec00204 	addi	sp,sp,8
   160bc:	f800283a 	ret

000160c0 <OSQQuery>:
*********************************************************************************************************
*/

#if OS_Q_QUERY_EN > 0
INT8U  OSQQuery (OS_EVENT *pevent, OS_Q_DATA *p_q_data)
{
   160c0:	defff604 	addi	sp,sp,-40
   160c4:	df000915 	stw	fp,36(sp)
   160c8:	df000904 	addi	fp,sp,36
   160cc:	e13ffe15 	stw	r4,-8(fp)
   160d0:	e17fff15 	stw	r5,-4(fp)
#else
    INT16U    *psrc;
    INT16U    *pdest;
#endif
#if OS_CRITICAL_METHOD == 3                            /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
   160d4:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                     /* Validate 'pevent'                            */
   160d8:	e0bffe17 	ldw	r2,-8(fp)
   160dc:	1000021e 	bne	r2,zero,160e8 <OSQQuery+0x28>
        return (OS_ERR_PEVENT_NULL);
   160e0:	00800104 	movi	r2,4
   160e4:	00004906 	br	1620c <OSQQuery+0x14c>
    }
    if (p_q_data == (OS_Q_DATA *)0) {                  /* Validate 'p_q_data'                          */
   160e8:	e0bfff17 	ldw	r2,-4(fp)
   160ec:	1000021e 	bne	r2,zero,160f8 <OSQQuery+0x38>
        return (OS_ERR_PDATA_NULL);
   160f0:	00800244 	movi	r2,9
   160f4:	00004506 	br	1620c <OSQQuery+0x14c>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {      /* Validate event block type                    */
   160f8:	e0bffe17 	ldw	r2,-8(fp)
   160fc:	10800003 	ldbu	r2,0(r2)
   16100:	10803fcc 	andi	r2,r2,255
   16104:	108000a0 	cmpeqi	r2,r2,2
   16108:	1000021e 	bne	r2,zero,16114 <OSQQuery+0x54>
        return (OS_ERR_EVENT_TYPE);
   1610c:	00800044 	movi	r2,1
   16110:	00003e06 	br	1620c <OSQQuery+0x14c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   16114:	0005303a 	rdctl	r2,status
   16118:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1611c:	e0fffc17 	ldw	r3,-16(fp)
   16120:	00bfff84 	movi	r2,-2
   16124:	1884703a 	and	r2,r3,r2
   16128:	1001703a 	wrctl	status,r2
  
  return context;
   1612c:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
   16130:	e0bffa15 	stw	r2,-24(fp)
    p_q_data->OSEventGrp = pevent->OSEventGrp;         /* Copy message queue wait list                 */
   16134:	e0bffe17 	ldw	r2,-8(fp)
   16138:	10c00283 	ldbu	r3,10(r2)
   1613c:	e0bfff17 	ldw	r2,-4(fp)
   16140:	10c002c5 	stb	r3,11(r2)
    psrc                 = &pevent->OSEventTbl[0];
   16144:	e0bffe17 	ldw	r2,-8(fp)
   16148:	108002c4 	addi	r2,r2,11
   1614c:	e0bff815 	stw	r2,-32(fp)
    pdest                = &p_q_data->OSEventTbl[0];
   16150:	e0bfff17 	ldw	r2,-4(fp)
   16154:	10800204 	addi	r2,r2,8
   16158:	e0bff915 	stw	r2,-28(fp)
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
   1615c:	e03ff705 	stb	zero,-36(fp)
   16160:	00000b06 	br	16190 <OSQQuery+0xd0>
        *pdest++ = *psrc++;
   16164:	e0bff917 	ldw	r2,-28(fp)
   16168:	10c00044 	addi	r3,r2,1
   1616c:	e0fff915 	stw	r3,-28(fp)
   16170:	e0fff817 	ldw	r3,-32(fp)
   16174:	19000044 	addi	r4,r3,1
   16178:	e13ff815 	stw	r4,-32(fp)
   1617c:	18c00003 	ldbu	r3,0(r3)
   16180:	10c00005 	stb	r3,0(r2)
    }
    OS_ENTER_CRITICAL();
    p_q_data->OSEventGrp = pevent->OSEventGrp;         /* Copy message queue wait list                 */
    psrc                 = &pevent->OSEventTbl[0];
    pdest                = &p_q_data->OSEventTbl[0];
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
   16184:	e0bff703 	ldbu	r2,-36(fp)
   16188:	10800044 	addi	r2,r2,1
   1618c:	e0bff705 	stb	r2,-36(fp)
   16190:	e0bff703 	ldbu	r2,-36(fp)
   16194:	108000f0 	cmpltui	r2,r2,3
   16198:	103ff21e 	bne	r2,zero,16164 <__alt_mem_Flash_flash_data+0xf4016164>
        *pdest++ = *psrc++;
    }
    pq = (OS_Q *)pevent->OSEventPtr;
   1619c:	e0bffe17 	ldw	r2,-8(fp)
   161a0:	10800117 	ldw	r2,4(r2)
   161a4:	e0bffb15 	stw	r2,-20(fp)
    if (pq->OSQEntries > 0) {
   161a8:	e0bffb17 	ldw	r2,-20(fp)
   161ac:	1080058b 	ldhu	r2,22(r2)
   161b0:	10bfffcc 	andi	r2,r2,65535
   161b4:	10000626 	beq	r2,zero,161d0 <OSQQuery+0x110>
        p_q_data->OSMsg = *pq->OSQOut;                 /* Get next message to return if available      */
   161b8:	e0bffb17 	ldw	r2,-20(fp)
   161bc:	10800417 	ldw	r2,16(r2)
   161c0:	10c00017 	ldw	r3,0(r2)
   161c4:	e0bfff17 	ldw	r2,-4(fp)
   161c8:	10c00015 	stw	r3,0(r2)
   161cc:	00000206 	br	161d8 <OSQQuery+0x118>
    } else {
        p_q_data->OSMsg = (void *)0;
   161d0:	e0bfff17 	ldw	r2,-4(fp)
   161d4:	10000015 	stw	zero,0(r2)
    }
    p_q_data->OSNMsgs = pq->OSQEntries;
   161d8:	e0bffb17 	ldw	r2,-20(fp)
   161dc:	10c0058b 	ldhu	r3,22(r2)
   161e0:	e0bfff17 	ldw	r2,-4(fp)
   161e4:	10c0010d 	sth	r3,4(r2)
    p_q_data->OSQSize = pq->OSQSize;
   161e8:	e0bffb17 	ldw	r2,-20(fp)
   161ec:	10c0050b 	ldhu	r3,20(r2)
   161f0:	e0bfff17 	ldw	r2,-4(fp)
   161f4:	10c0018d 	sth	r3,6(r2)
   161f8:	e0bffa17 	ldw	r2,-24(fp)
   161fc:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   16200:	e0bffd17 	ldw	r2,-12(fp)
   16204:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
   16208:	0005883a 	mov	r2,zero
}
   1620c:	e037883a 	mov	sp,fp
   16210:	df000017 	ldw	fp,0(sp)
   16214:	dec00104 	addi	sp,sp,4
   16218:	f800283a 	ret

0001621c <OS_QInit>:
* Note(s)    : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

void  OS_QInit (void)
{
   1621c:	defffb04 	addi	sp,sp,-20
   16220:	dfc00415 	stw	ra,16(sp)
   16224:	df000315 	stw	fp,12(sp)
   16228:	df000304 	addi	fp,sp,12
    OS_Q   *pq1;
    OS_Q   *pq2;



    OS_MemClr((INT8U *)&OSQTbl[0], sizeof(OSQTbl));  /* Clear the queue table                          */
   1622c:	010000b4 	movhi	r4,2
   16230:	211ab104 	addi	r4,r4,27332
   16234:	01407804 	movi	r5,480
   16238:	00128000 	call	12800 <OS_MemClr>
    pq1 = &OSQTbl[0];
   1623c:	008000b4 	movhi	r2,2
   16240:	109ab104 	addi	r2,r2,27332
   16244:	e0bffe15 	stw	r2,-8(fp)
    pq2 = &OSQTbl[1];
   16248:	008000b4 	movhi	r2,2
   1624c:	109ab704 	addi	r2,r2,27356
   16250:	e0bfff15 	stw	r2,-4(fp)
    for (i = 0; i < (OS_MAX_QS - 1); i++) {          /* Init. list of free QUEUE control blocks        */
   16254:	e03ffd0d 	sth	zero,-12(fp)
   16258:	00000c06 	br	1628c <OS_QInit+0x70>
        pq1->OSQPtr = pq2;
   1625c:	e0bffe17 	ldw	r2,-8(fp)
   16260:	e0ffff17 	ldw	r3,-4(fp)
   16264:	10c00015 	stw	r3,0(r2)
        pq1++;
   16268:	e0bffe17 	ldw	r2,-8(fp)
   1626c:	10800604 	addi	r2,r2,24
   16270:	e0bffe15 	stw	r2,-8(fp)
        pq2++;
   16274:	e0bfff17 	ldw	r2,-4(fp)
   16278:	10800604 	addi	r2,r2,24
   1627c:	e0bfff15 	stw	r2,-4(fp)


    OS_MemClr((INT8U *)&OSQTbl[0], sizeof(OSQTbl));  /* Clear the queue table                          */
    pq1 = &OSQTbl[0];
    pq2 = &OSQTbl[1];
    for (i = 0; i < (OS_MAX_QS - 1); i++) {          /* Init. list of free QUEUE control blocks        */
   16280:	e0bffd0b 	ldhu	r2,-12(fp)
   16284:	10800044 	addi	r2,r2,1
   16288:	e0bffd0d 	sth	r2,-12(fp)
   1628c:	e0bffd0b 	ldhu	r2,-12(fp)
   16290:	108004f0 	cmpltui	r2,r2,19
   16294:	103ff11e 	bne	r2,zero,1625c <__alt_mem_Flash_flash_data+0xf401625c>
        pq1->OSQPtr = pq2;
        pq1++;
        pq2++;
    }
    pq1->OSQPtr = (OS_Q *)0;
   16298:	e0bffe17 	ldw	r2,-8(fp)
   1629c:	10000015 	stw	zero,0(r2)
    OSQFreeList = &OSQTbl[0];
   162a0:	008000b4 	movhi	r2,2
   162a4:	10948c04 	addi	r2,r2,21040
   162a8:	00c000b4 	movhi	r3,2
   162ac:	18dab104 	addi	r3,r3,27332
   162b0:	10c00015 	stw	r3,0(r2)
#endif
}
   162b4:	e037883a 	mov	sp,fp
   162b8:	dfc00117 	ldw	ra,4(sp)
   162bc:	df000017 	ldw	fp,0(sp)
   162c0:	dec00204 	addi	sp,sp,8
   162c4:	f800283a 	ret

000162c8 <OSSemAccept>:
*********************************************************************************************************
*/

#if OS_SEM_ACCEPT_EN > 0
INT16U  OSSemAccept (OS_EVENT *pevent)
{
   162c8:	defffa04 	addi	sp,sp,-24
   162cc:	df000515 	stw	fp,20(sp)
   162d0:	df000504 	addi	fp,sp,20
   162d4:	e13fff15 	stw	r4,-4(fp)
    INT16U     cnt;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   162d8:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
   162dc:	e0bfff17 	ldw	r2,-4(fp)
   162e0:	1000021e 	bne	r2,zero,162ec <OSSemAccept+0x24>
        return (0);
   162e4:	0005883a 	mov	r2,zero
   162e8:	00001f06 	br	16368 <OSSemAccept+0xa0>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
   162ec:	e0bfff17 	ldw	r2,-4(fp)
   162f0:	10800003 	ldbu	r2,0(r2)
   162f4:	10803fcc 	andi	r2,r2,255
   162f8:	108000e0 	cmpeqi	r2,r2,3
   162fc:	1000021e 	bne	r2,zero,16308 <OSSemAccept+0x40>
        return (0);
   16300:	0005883a 	mov	r2,zero
   16304:	00001806 	br	16368 <OSSemAccept+0xa0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   16308:	0005303a 	rdctl	r2,status
   1630c:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   16310:	e0fffd17 	ldw	r3,-12(fp)
   16314:	00bfff84 	movi	r2,-2
   16318:	1884703a 	and	r2,r3,r2
   1631c:	1001703a 	wrctl	status,r2
  
  return context;
   16320:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
   16324:	e0bffb15 	stw	r2,-20(fp)
    cnt = pevent->OSEventCnt;
   16328:	e0bfff17 	ldw	r2,-4(fp)
   1632c:	1080020b 	ldhu	r2,8(r2)
   16330:	e0bffc0d 	sth	r2,-16(fp)
    if (cnt > 0) {                                    /* See if resource is available                  */
   16334:	e0bffc0b 	ldhu	r2,-16(fp)
   16338:	10000626 	beq	r2,zero,16354 <OSSemAccept+0x8c>
        pevent->OSEventCnt--;                         /* Yes, decrement semaphore and notify caller    */
   1633c:	e0bfff17 	ldw	r2,-4(fp)
   16340:	1080020b 	ldhu	r2,8(r2)
   16344:	10bfffc4 	addi	r2,r2,-1
   16348:	1007883a 	mov	r3,r2
   1634c:	e0bfff17 	ldw	r2,-4(fp)
   16350:	10c0020d 	sth	r3,8(r2)
   16354:	e0bffb17 	ldw	r2,-20(fp)
   16358:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1635c:	e0bffe17 	ldw	r2,-8(fp)
   16360:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (cnt);                                     /* Return semaphore count                        */
   16364:	e0bffc0b 	ldhu	r2,-16(fp)
}
   16368:	e037883a 	mov	sp,fp
   1636c:	df000017 	ldw	fp,0(sp)
   16370:	dec00104 	addi	sp,sp,4
   16374:	f800283a 	ret

00016378 <OSSemCreate>:
*              == (void *)0  if no event control blocks were available
*********************************************************************************************************
*/

OS_EVENT  *OSSemCreate (INT16U cnt)
{
   16378:	defff904 	addi	sp,sp,-28
   1637c:	dfc00615 	stw	ra,24(sp)
   16380:	df000515 	stw	fp,20(sp)
   16384:	df000504 	addi	fp,sp,20
   16388:	2005883a 	mov	r2,r4
   1638c:	e0bfff0d 	sth	r2,-4(fp)
    OS_EVENT  *pevent;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
   16390:	e03ffb15 	stw	zero,-20(fp)
#endif



    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
   16394:	008000b4 	movhi	r2,2
   16398:	10948f04 	addi	r2,r2,21052
   1639c:	10800003 	ldbu	r2,0(r2)
   163a0:	10803fcc 	andi	r2,r2,255
   163a4:	10000226 	beq	r2,zero,163b0 <OSSemCreate+0x38>
        return ((OS_EVENT *)0);                            /* ... can't CREATE from an ISR             */
   163a8:	0005883a 	mov	r2,zero
   163ac:	00002d06 	br	16464 <OSSemCreate+0xec>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   163b0:	0005303a 	rdctl	r2,status
   163b4:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   163b8:	e0fffd17 	ldw	r3,-12(fp)
   163bc:	00bfff84 	movi	r2,-2
   163c0:	1884703a 	and	r2,r3,r2
   163c4:	1001703a 	wrctl	status,r2
  
  return context;
   163c8:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
   163cc:	e0bffb15 	stw	r2,-20(fp)
    pevent = OSEventFreeList;                              /* Get next free event control block        */
   163d0:	008000b4 	movhi	r2,2
   163d4:	10948e04 	addi	r2,r2,21048
   163d8:	10800017 	ldw	r2,0(r2)
   163dc:	e0bffc15 	stw	r2,-16(fp)
    if (OSEventFreeList != (OS_EVENT *)0) {                /* See if pool of free ECB pool was empty   */
   163e0:	008000b4 	movhi	r2,2
   163e4:	10948e04 	addi	r2,r2,21048
   163e8:	10800017 	ldw	r2,0(r2)
   163ec:	10000726 	beq	r2,zero,1640c <OSSemCreate+0x94>
        OSEventFreeList = (OS_EVENT *)OSEventFreeList->OSEventPtr;
   163f0:	008000b4 	movhi	r2,2
   163f4:	10948e04 	addi	r2,r2,21048
   163f8:	10800017 	ldw	r2,0(r2)
   163fc:	10c00117 	ldw	r3,4(r2)
   16400:	008000b4 	movhi	r2,2
   16404:	10948e04 	addi	r2,r2,21048
   16408:	10c00015 	stw	r3,0(r2)
   1640c:	e0bffb17 	ldw	r2,-20(fp)
   16410:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   16414:	e0bffe17 	ldw	r2,-8(fp)
   16418:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    if (pevent != (OS_EVENT *)0) {                         /* Get an event control block               */
   1641c:	e0bffc17 	ldw	r2,-16(fp)
   16420:	10000f26 	beq	r2,zero,16460 <OSSemCreate+0xe8>
        pevent->OSEventType    = OS_EVENT_TYPE_SEM;
   16424:	e0bffc17 	ldw	r2,-16(fp)
   16428:	00c000c4 	movi	r3,3
   1642c:	10c00005 	stb	r3,0(r2)
        pevent->OSEventCnt     = cnt;                      /* Set semaphore value                      */
   16430:	e0bffc17 	ldw	r2,-16(fp)
   16434:	e0ffff0b 	ldhu	r3,-4(fp)
   16438:	10c0020d 	sth	r3,8(r2)
        pevent->OSEventPtr     = (void *)0;                /* Unlink from ECB free list                */
   1643c:	e0bffc17 	ldw	r2,-16(fp)
   16440:	10000115 	stw	zero,4(r2)
#if OS_EVENT_NAME_SIZE > 1
        pevent->OSEventName[0] = '?';                      /* Unknown name                             */
   16444:	e0bffc17 	ldw	r2,-16(fp)
   16448:	00c00fc4 	movi	r3,63
   1644c:	10c00385 	stb	r3,14(r2)
        pevent->OSEventName[1] = OS_ASCII_NUL;
   16450:	e0bffc17 	ldw	r2,-16(fp)
   16454:	100003c5 	stb	zero,15(r2)
#endif
        OS_EventWaitListInit(pevent);                      /* Initialize to 'nobody waiting' on sem.   */
   16458:	e13ffc17 	ldw	r4,-16(fp)
   1645c:	001243c0 	call	1243c <OS_EventWaitListInit>
    }
    return (pevent);
   16460:	e0bffc17 	ldw	r2,-16(fp)
}
   16464:	e037883a 	mov	sp,fp
   16468:	dfc00117 	ldw	ra,4(sp)
   1646c:	df000017 	ldw	fp,0(sp)
   16470:	dec00204 	addi	sp,sp,8
   16474:	f800283a 	ret

00016478 <OSSemDel>:
*********************************************************************************************************
*/

#if OS_SEM_DEL_EN > 0
OS_EVENT  *OSSemDel (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
   16478:	defff304 	addi	sp,sp,-52
   1647c:	dfc00c15 	stw	ra,48(sp)
   16480:	df000b15 	stw	fp,44(sp)
   16484:	df000b04 	addi	fp,sp,44
   16488:	e13ffd15 	stw	r4,-12(fp)
   1648c:	2805883a 	mov	r2,r5
   16490:	e1bfff15 	stw	r6,-4(fp)
   16494:	e0bffe05 	stb	r2,-8(fp)
    BOOLEAN    tasks_waiting;
    OS_EVENT  *pevent_return;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
   16498:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
   1649c:	e0bfff17 	ldw	r2,-4(fp)
   164a0:	1000021e 	bne	r2,zero,164ac <OSSemDel+0x34>
        return (pevent);
   164a4:	e0bffd17 	ldw	r2,-12(fp)
   164a8:	00008806 	br	166cc <OSSemDel+0x254>
    }
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
   164ac:	e0bffd17 	ldw	r2,-12(fp)
   164b0:	1000051e 	bne	r2,zero,164c8 <OSSemDel+0x50>
        *perr = OS_ERR_PEVENT_NULL;
   164b4:	e0bfff17 	ldw	r2,-4(fp)
   164b8:	00c00104 	movi	r3,4
   164bc:	10c00005 	stb	r3,0(r2)
        return (pevent);
   164c0:	e0bffd17 	ldw	r2,-12(fp)
   164c4:	00008106 	br	166cc <OSSemDel+0x254>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {        /* Validate event block type                */
   164c8:	e0bffd17 	ldw	r2,-12(fp)
   164cc:	10800003 	ldbu	r2,0(r2)
   164d0:	10803fcc 	andi	r2,r2,255
   164d4:	108000e0 	cmpeqi	r2,r2,3
   164d8:	1000051e 	bne	r2,zero,164f0 <OSSemDel+0x78>
        *perr = OS_ERR_EVENT_TYPE;
   164dc:	e0bfff17 	ldw	r2,-4(fp)
   164e0:	00c00044 	movi	r3,1
   164e4:	10c00005 	stb	r3,0(r2)
        return (pevent);
   164e8:	e0bffd17 	ldw	r2,-12(fp)
   164ec:	00007706 	br	166cc <OSSemDel+0x254>
    }
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
   164f0:	008000b4 	movhi	r2,2
   164f4:	10948f04 	addi	r2,r2,21052
   164f8:	10800003 	ldbu	r2,0(r2)
   164fc:	10803fcc 	andi	r2,r2,255
   16500:	10000526 	beq	r2,zero,16518 <OSSemDel+0xa0>
        *perr = OS_ERR_DEL_ISR;                             /* ... can't DELETE from an ISR             */
   16504:	e0bfff17 	ldw	r2,-4(fp)
   16508:	00c003c4 	movi	r3,15
   1650c:	10c00005 	stb	r3,0(r2)
        return (pevent);
   16510:	e0bffd17 	ldw	r2,-12(fp)
   16514:	00006d06 	br	166cc <OSSemDel+0x254>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   16518:	0005303a 	rdctl	r2,status
   1651c:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   16520:	e0fff817 	ldw	r3,-32(fp)
   16524:	00bfff84 	movi	r2,-2
   16528:	1884703a 	and	r2,r3,r2
   1652c:	1001703a 	wrctl	status,r2
  
  return context;
   16530:	e0bff817 	ldw	r2,-32(fp)
    }
    OS_ENTER_CRITICAL();
   16534:	e0bff715 	stw	r2,-36(fp)
    if (pevent->OSEventGrp != 0) {                         /* See if any tasks waiting on semaphore    */
   16538:	e0bffd17 	ldw	r2,-12(fp)
   1653c:	10800283 	ldbu	r2,10(r2)
   16540:	10803fcc 	andi	r2,r2,255
   16544:	10000326 	beq	r2,zero,16554 <OSSemDel+0xdc>
        tasks_waiting = OS_TRUE;                           /* Yes                                      */
   16548:	00800044 	movi	r2,1
   1654c:	e0bff505 	stb	r2,-44(fp)
   16550:	00000106 	br	16558 <OSSemDel+0xe0>
    } else {
        tasks_waiting = OS_FALSE;                          /* No                                       */
   16554:	e03ff505 	stb	zero,-44(fp)
    }
    switch (opt) {
   16558:	e0bffe03 	ldbu	r2,-8(fp)
   1655c:	10000326 	beq	r2,zero,1656c <OSSemDel+0xf4>
   16560:	10800060 	cmpeqi	r2,r2,1
   16564:	10002c1e 	bne	r2,zero,16618 <OSSemDel+0x1a0>
   16568:	00004d06 	br	166a0 <OSSemDel+0x228>
        case OS_DEL_NO_PEND:                               /* Delete semaphore only if no task waiting */
             if (tasks_waiting == OS_FALSE) {
   1656c:	e0bff503 	ldbu	r2,-44(fp)
   16570:	10001a1e 	bne	r2,zero,165dc <OSSemDel+0x164>
#if OS_EVENT_NAME_SIZE > 1
                 pevent->OSEventName[0] = '?';             /* Unknown name                             */
   16574:	e0bffd17 	ldw	r2,-12(fp)
   16578:	00c00fc4 	movi	r3,63
   1657c:	10c00385 	stb	r3,14(r2)
                 pevent->OSEventName[1] = OS_ASCII_NUL;
   16580:	e0bffd17 	ldw	r2,-12(fp)
   16584:	100003c5 	stb	zero,15(r2)
#endif
                 pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
   16588:	e0bffd17 	ldw	r2,-12(fp)
   1658c:	10000005 	stb	zero,0(r2)
                 pevent->OSEventPtr     = OSEventFreeList; /* Return Event Control Block to free list  */
   16590:	008000b4 	movhi	r2,2
   16594:	10948e04 	addi	r2,r2,21048
   16598:	10c00017 	ldw	r3,0(r2)
   1659c:	e0bffd17 	ldw	r2,-12(fp)
   165a0:	10c00115 	stw	r3,4(r2)
                 pevent->OSEventCnt     = 0;
   165a4:	e0bffd17 	ldw	r2,-12(fp)
   165a8:	1000020d 	sth	zero,8(r2)
                 OSEventFreeList        = pevent;          /* Get next free event control block        */
   165ac:	008000b4 	movhi	r2,2
   165b0:	10948e04 	addi	r2,r2,21048
   165b4:	e0fffd17 	ldw	r3,-12(fp)
   165b8:	10c00015 	stw	r3,0(r2)
   165bc:	e0bff717 	ldw	r2,-36(fp)
   165c0:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   165c4:	e0bff917 	ldw	r2,-28(fp)
   165c8:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_NONE;
   165cc:	e0bfff17 	ldw	r2,-4(fp)
   165d0:	10000005 	stb	zero,0(r2)
                 pevent_return          = (OS_EVENT *)0;   /* Semaphore has been deleted               */
   165d4:	e03ff615 	stw	zero,-40(fp)
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_TASK_WAITING;
                 pevent_return          = pevent;
             }
             break;
   165d8:	00003b06 	br	166c8 <OSSemDel+0x250>
   165dc:	e0bff717 	ldw	r2,-36(fp)
   165e0:	e0bffa15 	stw	r2,-24(fp)
   165e4:	e0bffa17 	ldw	r2,-24(fp)
   165e8:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_NONE;
                 pevent_return          = (OS_EVENT *)0;   /* Semaphore has been deleted               */
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_TASK_WAITING;
   165ec:	e0bfff17 	ldw	r2,-4(fp)
   165f0:	00c01244 	movi	r3,73
   165f4:	10c00005 	stb	r3,0(r2)
                 pevent_return          = pevent;
   165f8:	e0bffd17 	ldw	r2,-12(fp)
   165fc:	e0bff615 	stw	r2,-40(fp)
             }
             break;
   16600:	00003106 	br	166c8 <OSSemDel+0x250>

        case OS_DEL_ALWAYS:                                /* Always delete the semaphore              */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for semaphore    */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_OK);
   16604:	e13ffd17 	ldw	r4,-12(fp)
   16608:	000b883a 	mov	r5,zero
   1660c:	01800044 	movi	r6,1
   16610:	000f883a 	mov	r7,zero
   16614:	0011e9c0 	call	11e9c <OS_EventTaskRdy>
                 pevent_return          = pevent;
             }
             break;

        case OS_DEL_ALWAYS:                                /* Always delete the semaphore              */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for semaphore    */
   16618:	e0bffd17 	ldw	r2,-12(fp)
   1661c:	10800283 	ldbu	r2,10(r2)
   16620:	10803fcc 	andi	r2,r2,255
   16624:	103ff71e 	bne	r2,zero,16604 <__alt_mem_Flash_flash_data+0xf4016604>
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_OK);
             }
#if OS_EVENT_NAME_SIZE > 1
             pevent->OSEventName[0] = '?';                 /* Unknown name                             */
   16628:	e0bffd17 	ldw	r2,-12(fp)
   1662c:	00c00fc4 	movi	r3,63
   16630:	10c00385 	stb	r3,14(r2)
             pevent->OSEventName[1] = OS_ASCII_NUL;
   16634:	e0bffd17 	ldw	r2,-12(fp)
   16638:	100003c5 	stb	zero,15(r2)
#endif
             pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
   1663c:	e0bffd17 	ldw	r2,-12(fp)
   16640:	10000005 	stb	zero,0(r2)
             pevent->OSEventPtr     = OSEventFreeList;     /* Return Event Control Block to free list  */
   16644:	008000b4 	movhi	r2,2
   16648:	10948e04 	addi	r2,r2,21048
   1664c:	10c00017 	ldw	r3,0(r2)
   16650:	e0bffd17 	ldw	r2,-12(fp)
   16654:	10c00115 	stw	r3,4(r2)
             pevent->OSEventCnt     = 0;
   16658:	e0bffd17 	ldw	r2,-12(fp)
   1665c:	1000020d 	sth	zero,8(r2)
             OSEventFreeList        = pevent;              /* Get next free event control block        */
   16660:	008000b4 	movhi	r2,2
   16664:	10948e04 	addi	r2,r2,21048
   16668:	e0fffd17 	ldw	r3,-12(fp)
   1666c:	10c00015 	stw	r3,0(r2)
   16670:	e0bff717 	ldw	r2,-36(fp)
   16674:	e0bffb15 	stw	r2,-20(fp)
   16678:	e0bffb17 	ldw	r2,-20(fp)
   1667c:	1001703a 	wrctl	status,r2
             OS_EXIT_CRITICAL();
             if (tasks_waiting == OS_TRUE) {               /* Reschedule only if task(s) were waiting  */
   16680:	e0bff503 	ldbu	r2,-44(fp)
   16684:	10800058 	cmpnei	r2,r2,1
   16688:	1000011e 	bne	r2,zero,16690 <OSSemDel+0x218>
                 OS_Sched();                               /* Find highest priority task ready to run  */
   1668c:	00128b40 	call	128b4 <OS_Sched>
             }
             *perr                  = OS_ERR_NONE;
   16690:	e0bfff17 	ldw	r2,-4(fp)
   16694:	10000005 	stb	zero,0(r2)
             pevent_return          = (OS_EVENT *)0;       /* Semaphore has been deleted               */
   16698:	e03ff615 	stw	zero,-40(fp)
             break;
   1669c:	00000a06 	br	166c8 <OSSemDel+0x250>
   166a0:	e0bff717 	ldw	r2,-36(fp)
   166a4:	e0bffc15 	stw	r2,-16(fp)
   166a8:	e0bffc17 	ldw	r2,-16(fp)
   166ac:	1001703a 	wrctl	status,r2

        default:
             OS_EXIT_CRITICAL();
             *perr                  = OS_ERR_INVALID_OPT;
   166b0:	e0bfff17 	ldw	r2,-4(fp)
   166b4:	00c001c4 	movi	r3,7
   166b8:	10c00005 	stb	r3,0(r2)
             pevent_return          = pevent;
   166bc:	e0bffd17 	ldw	r2,-12(fp)
   166c0:	e0bff615 	stw	r2,-40(fp)
             break;
   166c4:	0001883a 	nop
    }
    return (pevent_return);
   166c8:	e0bff617 	ldw	r2,-40(fp)
}
   166cc:	e037883a 	mov	sp,fp
   166d0:	dfc00117 	ldw	ra,4(sp)
   166d4:	df000017 	ldw	fp,0(sp)
   166d8:	dec00204 	addi	sp,sp,8
   166dc:	f800283a 	ret

000166e0 <OSSemPend>:
* Returns    : none
*********************************************************************************************************
*/
/*$PAGE*/
void  OSSemPend (OS_EVENT *pevent, INT16U timeout, INT8U *perr)
{
   166e0:	defff504 	addi	sp,sp,-44
   166e4:	dfc00a15 	stw	ra,40(sp)
   166e8:	df000915 	stw	fp,36(sp)
   166ec:	df000904 	addi	fp,sp,36
   166f0:	e13ffd15 	stw	r4,-12(fp)
   166f4:	2805883a 	mov	r2,r5
   166f8:	e1bfff15 	stw	r6,-4(fp)
   166fc:	e0bffe0d 	sth	r2,-8(fp)
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   16700:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
   16704:	e0bfff17 	ldw	r2,-4(fp)
   16708:	1000011e 	bne	r2,zero,16710 <OSSemPend+0x30>
        return;
   1670c:	00008906 	br	16934 <OSSemPend+0x254>
    }
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
   16710:	e0bffd17 	ldw	r2,-12(fp)
   16714:	1000041e 	bne	r2,zero,16728 <OSSemPend+0x48>
        *perr = OS_ERR_PEVENT_NULL;
   16718:	e0bfff17 	ldw	r2,-4(fp)
   1671c:	00c00104 	movi	r3,4
   16720:	10c00005 	stb	r3,0(r2)
        return;
   16724:	00008306 	br	16934 <OSSemPend+0x254>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
   16728:	e0bffd17 	ldw	r2,-12(fp)
   1672c:	10800003 	ldbu	r2,0(r2)
   16730:	10803fcc 	andi	r2,r2,255
   16734:	108000e0 	cmpeqi	r2,r2,3
   16738:	1000041e 	bne	r2,zero,1674c <OSSemPend+0x6c>
        *perr = OS_ERR_EVENT_TYPE;
   1673c:	e0bfff17 	ldw	r2,-4(fp)
   16740:	00c00044 	movi	r3,1
   16744:	10c00005 	stb	r3,0(r2)
        return;
   16748:	00007a06 	br	16934 <OSSemPend+0x254>
    }
    if (OSIntNesting > 0) {                           /* See if called from ISR ...                    */
   1674c:	008000b4 	movhi	r2,2
   16750:	10948f04 	addi	r2,r2,21052
   16754:	10800003 	ldbu	r2,0(r2)
   16758:	10803fcc 	andi	r2,r2,255
   1675c:	10000426 	beq	r2,zero,16770 <OSSemPend+0x90>
        *perr = OS_ERR_PEND_ISR;                      /* ... can't PEND from an ISR                    */
   16760:	e0bfff17 	ldw	r2,-4(fp)
   16764:	00c00084 	movi	r3,2
   16768:	10c00005 	stb	r3,0(r2)
        return;
   1676c:	00007106 	br	16934 <OSSemPend+0x254>
    }
    if (OSLockNesting > 0) {                          /* See if called with scheduler locked ...       */
   16770:	008000b4 	movhi	r2,2
   16774:	10948104 	addi	r2,r2,20996
   16778:	10800003 	ldbu	r2,0(r2)
   1677c:	10803fcc 	andi	r2,r2,255
   16780:	10000426 	beq	r2,zero,16794 <OSSemPend+0xb4>
        *perr = OS_ERR_PEND_LOCKED;                   /* ... can't PEND when locked                    */
   16784:	e0bfff17 	ldw	r2,-4(fp)
   16788:	00c00344 	movi	r3,13
   1678c:	10c00005 	stb	r3,0(r2)
        return;
   16790:	00006806 	br	16934 <OSSemPend+0x254>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   16794:	0005303a 	rdctl	r2,status
   16798:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1679c:	e0fff817 	ldw	r3,-32(fp)
   167a0:	00bfff84 	movi	r2,-2
   167a4:	1884703a 	and	r2,r3,r2
   167a8:	1001703a 	wrctl	status,r2
  
  return context;
   167ac:	e0bff817 	ldw	r2,-32(fp)
    }
    OS_ENTER_CRITICAL();
   167b0:	e0bff715 	stw	r2,-36(fp)
    if (pevent->OSEventCnt > 0) {                     /* If sem. is positive, resource available ...   */
   167b4:	e0bffd17 	ldw	r2,-12(fp)
   167b8:	1080020b 	ldhu	r2,8(r2)
   167bc:	10bfffcc 	andi	r2,r2,65535
   167c0:	10000d26 	beq	r2,zero,167f8 <OSSemPend+0x118>
        pevent->OSEventCnt--;                         /* ... decrement semaphore only if positive.     */
   167c4:	e0bffd17 	ldw	r2,-12(fp)
   167c8:	1080020b 	ldhu	r2,8(r2)
   167cc:	10bfffc4 	addi	r2,r2,-1
   167d0:	1007883a 	mov	r3,r2
   167d4:	e0bffd17 	ldw	r2,-12(fp)
   167d8:	10c0020d 	sth	r3,8(r2)
   167dc:	e0bff717 	ldw	r2,-36(fp)
   167e0:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   167e4:	e0bff917 	ldw	r2,-28(fp)
   167e8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_NONE;
   167ec:	e0bfff17 	ldw	r2,-4(fp)
   167f0:	10000005 	stb	zero,0(r2)
        return;
   167f4:	00004f06 	br	16934 <OSSemPend+0x254>
    }
                                                      /* Otherwise, must wait until event occurs       */
    OSTCBCur->OSTCBStat     |= OS_STAT_SEM;           /* Resource not available, pend on semaphore     */
   167f8:	008000b4 	movhi	r2,2
   167fc:	10949004 	addi	r2,r2,21056
   16800:	10c00017 	ldw	r3,0(r2)
   16804:	008000b4 	movhi	r2,2
   16808:	10949004 	addi	r2,r2,21056
   1680c:	10800017 	ldw	r2,0(r2)
   16810:	10800c03 	ldbu	r2,48(r2)
   16814:	10800054 	ori	r2,r2,1
   16818:	18800c05 	stb	r2,48(r3)
    OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
   1681c:	008000b4 	movhi	r2,2
   16820:	10949004 	addi	r2,r2,21056
   16824:	10800017 	ldw	r2,0(r2)
   16828:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBDly       = timeout;               /* Store pend timeout in TCB                     */
   1682c:	008000b4 	movhi	r2,2
   16830:	10949004 	addi	r2,r2,21056
   16834:	10800017 	ldw	r2,0(r2)
   16838:	e0fffe0b 	ldhu	r3,-8(fp)
   1683c:	10c00b8d 	sth	r3,46(r2)
    OS_EventTaskWait(pevent);                         /* Suspend task until event or timeout occurs    */
   16840:	e13ffd17 	ldw	r4,-12(fp)
   16844:	00120340 	call	12034 <OS_EventTaskWait>
   16848:	e0bff717 	ldw	r2,-36(fp)
   1684c:	e0bffa15 	stw	r2,-24(fp)
   16850:	e0bffa17 	ldw	r2,-24(fp)
   16854:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    OS_Sched();                                       /* Find next highest priority task ready         */
   16858:	00128b40 	call	128b4 <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1685c:	0005303a 	rdctl	r2,status
   16860:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   16864:	e0fffb17 	ldw	r3,-20(fp)
   16868:	00bfff84 	movi	r2,-2
   1686c:	1884703a 	and	r2,r3,r2
   16870:	1001703a 	wrctl	status,r2
  
  return context;
   16874:	e0bffb17 	ldw	r2,-20(fp)
    OS_ENTER_CRITICAL();
   16878:	e0bff715 	stw	r2,-36(fp)
    switch (OSTCBCur->OSTCBStatPend) {                /* See if we timed-out or aborted                */
   1687c:	008000b4 	movhi	r2,2
   16880:	10949004 	addi	r2,r2,21056
   16884:	10800017 	ldw	r2,0(r2)
   16888:	10800c43 	ldbu	r2,49(r2)
   1688c:	10803fcc 	andi	r2,r2,255
   16890:	10000326 	beq	r2,zero,168a0 <OSSemPend+0x1c0>
   16894:	108000a0 	cmpeqi	r2,r2,2
   16898:	1000041e 	bne	r2,zero,168ac <OSSemPend+0x1cc>
   1689c:	00000706 	br	168bc <OSSemPend+0x1dc>
        case OS_STAT_PEND_OK:
             *perr = OS_ERR_NONE;
   168a0:	e0bfff17 	ldw	r2,-4(fp)
   168a4:	10000005 	stb	zero,0(r2)
             break;
   168a8:	00000e06 	br	168e4 <OSSemPend+0x204>

        case OS_STAT_PEND_ABORT:
             *perr = OS_ERR_PEND_ABORT;               /* Indicate that we aborted                      */
   168ac:	e0bfff17 	ldw	r2,-4(fp)
   168b0:	00c00384 	movi	r3,14
   168b4:	10c00005 	stb	r3,0(r2)
             break;
   168b8:	00000a06 	br	168e4 <OSSemPend+0x204>

        case OS_STAT_PEND_TO:
        default:        
             OS_EventTaskRemove(OSTCBCur, pevent);
   168bc:	008000b4 	movhi	r2,2
   168c0:	10949004 	addi	r2,r2,21056
   168c4:	10800017 	ldw	r2,0(r2)
   168c8:	1009883a 	mov	r4,r2
   168cc:	e17ffd17 	ldw	r5,-12(fp)
   168d0:	001228c0 	call	1228c <OS_EventTaskRemove>
             *perr = OS_ERR_TIMEOUT;                  /* Indicate that we didn't get event within TO   */
   168d4:	e0bfff17 	ldw	r2,-4(fp)
   168d8:	00c00284 	movi	r3,10
   168dc:	10c00005 	stb	r3,0(r2)
             break;
   168e0:	0001883a 	nop
    }
    OSTCBCur->OSTCBStat          =  OS_STAT_RDY;      /* Set   task  status to ready                   */
   168e4:	008000b4 	movhi	r2,2
   168e8:	10949004 	addi	r2,r2,21056
   168ec:	10800017 	ldw	r2,0(r2)
   168f0:	10000c05 	stb	zero,48(r2)
    OSTCBCur->OSTCBStatPend      =  OS_STAT_PEND_OK;  /* Clear pend  status                            */
   168f4:	008000b4 	movhi	r2,2
   168f8:	10949004 	addi	r2,r2,21056
   168fc:	10800017 	ldw	r2,0(r2)
   16900:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;    /* Clear event pointers                          */
   16904:	008000b4 	movhi	r2,2
   16908:	10949004 	addi	r2,r2,21056
   1690c:	10800017 	ldw	r2,0(r2)
   16910:	10000715 	stw	zero,28(r2)
#if (OS_EVENT_MULTI_EN > 0)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
   16914:	008000b4 	movhi	r2,2
   16918:	10949004 	addi	r2,r2,21056
   1691c:	10800017 	ldw	r2,0(r2)
   16920:	10000815 	stw	zero,32(r2)
   16924:	e0bff717 	ldw	r2,-36(fp)
   16928:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1692c:	e0bffc17 	ldw	r2,-16(fp)
   16930:	1001703a 	wrctl	status,r2
#endif
    OS_EXIT_CRITICAL();
}
   16934:	e037883a 	mov	sp,fp
   16938:	dfc00117 	ldw	ra,4(sp)
   1693c:	df000017 	ldw	fp,0(sp)
   16940:	dec00204 	addi	sp,sp,8
   16944:	f800283a 	ret

00016948 <OSSemPendAbort>:
*********************************************************************************************************
*/

#if OS_SEM_PEND_ABORT_EN > 0
INT8U  OSSemPendAbort (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
   16948:	defff604 	addi	sp,sp,-40
   1694c:	dfc00915 	stw	ra,36(sp)
   16950:	df000815 	stw	fp,32(sp)
   16954:	df000804 	addi	fp,sp,32
   16958:	e13ffd15 	stw	r4,-12(fp)
   1695c:	2805883a 	mov	r2,r5
   16960:	e1bfff15 	stw	r6,-4(fp)
   16964:	e0bffe05 	stb	r2,-8(fp)
    INT8U      nbr_tasks;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   16968:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
   1696c:	e0bfff17 	ldw	r2,-4(fp)
   16970:	1000021e 	bne	r2,zero,1697c <OSSemPendAbort+0x34>
        return (0);
   16974:	0005883a 	mov	r2,zero
   16978:	00004906 	br	16aa0 <OSSemPendAbort+0x158>
    }
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
   1697c:	e0bffd17 	ldw	r2,-12(fp)
   16980:	1000051e 	bne	r2,zero,16998 <OSSemPendAbort+0x50>
        *perr = OS_ERR_PEVENT_NULL;
   16984:	e0bfff17 	ldw	r2,-4(fp)
   16988:	00c00104 	movi	r3,4
   1698c:	10c00005 	stb	r3,0(r2)
        return (0);
   16990:	0005883a 	mov	r2,zero
   16994:	00004206 	br	16aa0 <OSSemPendAbort+0x158>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
   16998:	e0bffd17 	ldw	r2,-12(fp)
   1699c:	10800003 	ldbu	r2,0(r2)
   169a0:	10803fcc 	andi	r2,r2,255
   169a4:	108000e0 	cmpeqi	r2,r2,3
   169a8:	1000051e 	bne	r2,zero,169c0 <OSSemPendAbort+0x78>
        *perr = OS_ERR_EVENT_TYPE;
   169ac:	e0bfff17 	ldw	r2,-4(fp)
   169b0:	00c00044 	movi	r3,1
   169b4:	10c00005 	stb	r3,0(r2)
        return (0);
   169b8:	0005883a 	mov	r2,zero
   169bc:	00003806 	br	16aa0 <OSSemPendAbort+0x158>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   169c0:	0005303a 	rdctl	r2,status
   169c4:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   169c8:	e0fffa17 	ldw	r3,-24(fp)
   169cc:	00bfff84 	movi	r2,-2
   169d0:	1884703a 	and	r2,r3,r2
   169d4:	1001703a 	wrctl	status,r2
  
  return context;
   169d8:	e0bffa17 	ldw	r2,-24(fp)
    }
    OS_ENTER_CRITICAL();
   169dc:	e0bff915 	stw	r2,-28(fp)
    if (pevent->OSEventGrp != 0) {                    /* See if any task waiting on semaphore?         */
   169e0:	e0bffd17 	ldw	r2,-12(fp)
   169e4:	10800283 	ldbu	r2,10(r2)
   169e8:	10803fcc 	andi	r2,r2,255
   169ec:	10002526 	beq	r2,zero,16a84 <OSSemPendAbort+0x13c>
        nbr_tasks = 0;
   169f0:	e03ff805 	stb	zero,-32(fp)
        switch (opt) {
   169f4:	e0bffe03 	ldbu	r2,-8(fp)
   169f8:	10800060 	cmpeqi	r2,r2,1
   169fc:	10000e26 	beq	r2,zero,16a38 <OSSemPendAbort+0xf0>
            case OS_PEND_OPT_BROADCAST:               /* Do we need to abort ALL waiting tasks?        */
                 while (pevent->OSEventGrp != 0) {    /* Yes, ready ALL tasks waiting on semaphore     */
   16a00:	00000806 	br	16a24 <OSSemPendAbort+0xdc>
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_ABORT);
   16a04:	e13ffd17 	ldw	r4,-12(fp)
   16a08:	000b883a 	mov	r5,zero
   16a0c:	01800044 	movi	r6,1
   16a10:	01c00084 	movi	r7,2
   16a14:	0011e9c0 	call	11e9c <OS_EventTaskRdy>
                     nbr_tasks++;
   16a18:	e0bff803 	ldbu	r2,-32(fp)
   16a1c:	10800044 	addi	r2,r2,1
   16a20:	e0bff805 	stb	r2,-32(fp)
    OS_ENTER_CRITICAL();
    if (pevent->OSEventGrp != 0) {                    /* See if any task waiting on semaphore?         */
        nbr_tasks = 0;
        switch (opt) {
            case OS_PEND_OPT_BROADCAST:               /* Do we need to abort ALL waiting tasks?        */
                 while (pevent->OSEventGrp != 0) {    /* Yes, ready ALL tasks waiting on semaphore     */
   16a24:	e0bffd17 	ldw	r2,-12(fp)
   16a28:	10800283 	ldbu	r2,10(r2)
   16a2c:	10803fcc 	andi	r2,r2,255
   16a30:	103ff41e 	bne	r2,zero,16a04 <__alt_mem_Flash_flash_data+0xf4016a04>
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_ABORT);
                     nbr_tasks++;
                 }
                 break;
   16a34:	00000906 	br	16a5c <OSSemPendAbort+0x114>
                 
            case OS_PEND_OPT_NONE:
            default:                                  /* No,  ready HPT       waiting on semaphore     */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_ABORT);
   16a38:	e13ffd17 	ldw	r4,-12(fp)
   16a3c:	000b883a 	mov	r5,zero
   16a40:	01800044 	movi	r6,1
   16a44:	01c00084 	movi	r7,2
   16a48:	0011e9c0 	call	11e9c <OS_EventTaskRdy>
                 nbr_tasks++;
   16a4c:	e0bff803 	ldbu	r2,-32(fp)
   16a50:	10800044 	addi	r2,r2,1
   16a54:	e0bff805 	stb	r2,-32(fp)
                 break;
   16a58:	0001883a 	nop
   16a5c:	e0bff917 	ldw	r2,-28(fp)
   16a60:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   16a64:	e0bffb17 	ldw	r2,-20(fp)
   16a68:	1001703a 	wrctl	status,r2
        }
        OS_EXIT_CRITICAL();
        OS_Sched();                                   /* Find HPT ready to run                         */
   16a6c:	00128b40 	call	128b4 <OS_Sched>
        *perr = OS_ERR_PEND_ABORT;
   16a70:	e0bfff17 	ldw	r2,-4(fp)
   16a74:	00c00384 	movi	r3,14
   16a78:	10c00005 	stb	r3,0(r2)
        return (nbr_tasks);
   16a7c:	e0bff803 	ldbu	r2,-32(fp)
   16a80:	00000706 	br	16aa0 <OSSemPendAbort+0x158>
   16a84:	e0bff917 	ldw	r2,-28(fp)
   16a88:	e0bffc15 	stw	r2,-16(fp)
   16a8c:	e0bffc17 	ldw	r2,-16(fp)
   16a90:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
   16a94:	e0bfff17 	ldw	r2,-4(fp)
   16a98:	10000005 	stb	zero,0(r2)
    return (0);                                       /* No tasks waiting on semaphore                 */
   16a9c:	0005883a 	mov	r2,zero
}
   16aa0:	e037883a 	mov	sp,fp
   16aa4:	dfc00117 	ldw	ra,4(sp)
   16aa8:	df000017 	ldw	fp,0(sp)
   16aac:	dec00204 	addi	sp,sp,8
   16ab0:	f800283a 	ret

00016ab4 <OSSemPost>:
*              OS_ERR_PEVENT_NULL  If 'pevent' is a NULL pointer.
*********************************************************************************************************
*/

INT8U  OSSemPost (OS_EVENT *pevent)
{
   16ab4:	defff804 	addi	sp,sp,-32
   16ab8:	dfc00715 	stw	ra,28(sp)
   16abc:	df000615 	stw	fp,24(sp)
   16ac0:	df000604 	addi	fp,sp,24
   16ac4:	e13fff15 	stw	r4,-4(fp)
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   16ac8:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
   16acc:	e0bfff17 	ldw	r2,-4(fp)
   16ad0:	1000021e 	bne	r2,zero,16adc <OSSemPost+0x28>
        return (OS_ERR_PEVENT_NULL);
   16ad4:	00800104 	movi	r2,4
   16ad8:	00003506 	br	16bb0 <OSSemPost+0xfc>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
   16adc:	e0bfff17 	ldw	r2,-4(fp)
   16ae0:	10800003 	ldbu	r2,0(r2)
   16ae4:	10803fcc 	andi	r2,r2,255
   16ae8:	108000e0 	cmpeqi	r2,r2,3
   16aec:	1000021e 	bne	r2,zero,16af8 <OSSemPost+0x44>
        return (OS_ERR_EVENT_TYPE);
   16af0:	00800044 	movi	r2,1
   16af4:	00002e06 	br	16bb0 <OSSemPost+0xfc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   16af8:	0005303a 	rdctl	r2,status
   16afc:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   16b00:	e0fffb17 	ldw	r3,-20(fp)
   16b04:	00bfff84 	movi	r2,-2
   16b08:	1884703a 	and	r2,r3,r2
   16b0c:	1001703a 	wrctl	status,r2
  
  return context;
   16b10:	e0bffb17 	ldw	r2,-20(fp)
    }
    OS_ENTER_CRITICAL();
   16b14:	e0bffa15 	stw	r2,-24(fp)
    if (pevent->OSEventGrp != 0) {                    /* See if any task waiting for semaphore         */
   16b18:	e0bfff17 	ldw	r2,-4(fp)
   16b1c:	10800283 	ldbu	r2,10(r2)
   16b20:	10803fcc 	andi	r2,r2,255
   16b24:	10000c26 	beq	r2,zero,16b58 <OSSemPost+0xa4>
                                                      /* Ready HPT waiting on event                    */
        (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_OK);
   16b28:	e13fff17 	ldw	r4,-4(fp)
   16b2c:	000b883a 	mov	r5,zero
   16b30:	01800044 	movi	r6,1
   16b34:	000f883a 	mov	r7,zero
   16b38:	0011e9c0 	call	11e9c <OS_EventTaskRdy>
   16b3c:	e0bffa17 	ldw	r2,-24(fp)
   16b40:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   16b44:	e0bffc17 	ldw	r2,-16(fp)
   16b48:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                                   /* Find HPT ready to run                         */
   16b4c:	00128b40 	call	128b4 <OS_Sched>
        return (OS_ERR_NONE);
   16b50:	0005883a 	mov	r2,zero
   16b54:	00001606 	br	16bb0 <OSSemPost+0xfc>
    }
    if (pevent->OSEventCnt < 65535u) {                /* Make sure semaphore will not overflow         */
   16b58:	e0bfff17 	ldw	r2,-4(fp)
   16b5c:	1080020b 	ldhu	r2,8(r2)
   16b60:	10ffffcc 	andi	r3,r2,65535
   16b64:	00bfffd4 	movui	r2,65535
   16b68:	18800c26 	beq	r3,r2,16b9c <OSSemPost+0xe8>
        pevent->OSEventCnt++;                         /* Increment semaphore count to register event   */
   16b6c:	e0bfff17 	ldw	r2,-4(fp)
   16b70:	1080020b 	ldhu	r2,8(r2)
   16b74:	10800044 	addi	r2,r2,1
   16b78:	1007883a 	mov	r3,r2
   16b7c:	e0bfff17 	ldw	r2,-4(fp)
   16b80:	10c0020d 	sth	r3,8(r2)
   16b84:	e0bffa17 	ldw	r2,-24(fp)
   16b88:	e0bffd15 	stw	r2,-12(fp)
   16b8c:	e0bffd17 	ldw	r2,-12(fp)
   16b90:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_NONE);
   16b94:	0005883a 	mov	r2,zero
   16b98:	00000506 	br	16bb0 <OSSemPost+0xfc>
   16b9c:	e0bffa17 	ldw	r2,-24(fp)
   16ba0:	e0bffe15 	stw	r2,-8(fp)
   16ba4:	e0bffe17 	ldw	r2,-8(fp)
   16ba8:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();                               /* Semaphore value has reached its maximum       */
    return (OS_ERR_SEM_OVF);
   16bac:	00800c84 	movi	r2,50
}
   16bb0:	e037883a 	mov	sp,fp
   16bb4:	dfc00117 	ldw	ra,4(sp)
   16bb8:	df000017 	ldw	fp,0(sp)
   16bbc:	dec00204 	addi	sp,sp,8
   16bc0:	f800283a 	ret

00016bc4 <OSSemQuery>:
*********************************************************************************************************
*/

#if OS_SEM_QUERY_EN > 0
INT8U  OSSemQuery (OS_EVENT *pevent, OS_SEM_DATA *p_sem_data)
{
   16bc4:	defff704 	addi	sp,sp,-36
   16bc8:	df000815 	stw	fp,32(sp)
   16bcc:	df000804 	addi	fp,sp,32
   16bd0:	e13ffe15 	stw	r4,-8(fp)
   16bd4:	e17fff15 	stw	r5,-4(fp)
    INT16U    *psrc;
    INT16U    *pdest;
#endif
    INT8U      i;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
   16bd8:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
   16bdc:	e0bffe17 	ldw	r2,-8(fp)
   16be0:	1000021e 	bne	r2,zero,16bec <OSSemQuery+0x28>
        return (OS_ERR_PEVENT_NULL);
   16be4:	00800104 	movi	r2,4
   16be8:	00003606 	br	16cc4 <OSSemQuery+0x100>
    }
    if (p_sem_data == (OS_SEM_DATA *)0) {                  /* Validate 'p_sem_data'                    */
   16bec:	e0bfff17 	ldw	r2,-4(fp)
   16bf0:	1000021e 	bne	r2,zero,16bfc <OSSemQuery+0x38>
        return (OS_ERR_PDATA_NULL);
   16bf4:	00800244 	movi	r2,9
   16bf8:	00003206 	br	16cc4 <OSSemQuery+0x100>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {        /* Validate event block type                */
   16bfc:	e0bffe17 	ldw	r2,-8(fp)
   16c00:	10800003 	ldbu	r2,0(r2)
   16c04:	10803fcc 	andi	r2,r2,255
   16c08:	108000e0 	cmpeqi	r2,r2,3
   16c0c:	1000021e 	bne	r2,zero,16c18 <OSSemQuery+0x54>
        return (OS_ERR_EVENT_TYPE);
   16c10:	00800044 	movi	r2,1
   16c14:	00002b06 	br	16cc4 <OSSemQuery+0x100>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   16c18:	0005303a 	rdctl	r2,status
   16c1c:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   16c20:	e0fffc17 	ldw	r3,-16(fp)
   16c24:	00bfff84 	movi	r2,-2
   16c28:	1884703a 	and	r2,r3,r2
   16c2c:	1001703a 	wrctl	status,r2
  
  return context;
   16c30:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
   16c34:	e0bffb15 	stw	r2,-20(fp)
    p_sem_data->OSEventGrp = pevent->OSEventGrp;           /* Copy message mailbox wait list           */
   16c38:	e0bffe17 	ldw	r2,-8(fp)
   16c3c:	10c00283 	ldbu	r3,10(r2)
   16c40:	e0bfff17 	ldw	r2,-4(fp)
   16c44:	10c00145 	stb	r3,5(r2)
    psrc                   = &pevent->OSEventTbl[0];
   16c48:	e0bffe17 	ldw	r2,-8(fp)
   16c4c:	108002c4 	addi	r2,r2,11
   16c50:	e0bff815 	stw	r2,-32(fp)
    pdest                  = &p_sem_data->OSEventTbl[0];
   16c54:	e0bfff17 	ldw	r2,-4(fp)
   16c58:	10800084 	addi	r2,r2,2
   16c5c:	e0bff915 	stw	r2,-28(fp)
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
   16c60:	e03ffa05 	stb	zero,-24(fp)
   16c64:	00000b06 	br	16c94 <OSSemQuery+0xd0>
        *pdest++ = *psrc++;
   16c68:	e0bff917 	ldw	r2,-28(fp)
   16c6c:	10c00044 	addi	r3,r2,1
   16c70:	e0fff915 	stw	r3,-28(fp)
   16c74:	e0fff817 	ldw	r3,-32(fp)
   16c78:	19000044 	addi	r4,r3,1
   16c7c:	e13ff815 	stw	r4,-32(fp)
   16c80:	18c00003 	ldbu	r3,0(r3)
   16c84:	10c00005 	stb	r3,0(r2)
    }
    OS_ENTER_CRITICAL();
    p_sem_data->OSEventGrp = pevent->OSEventGrp;           /* Copy message mailbox wait list           */
    psrc                   = &pevent->OSEventTbl[0];
    pdest                  = &p_sem_data->OSEventTbl[0];
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
   16c88:	e0bffa03 	ldbu	r2,-24(fp)
   16c8c:	10800044 	addi	r2,r2,1
   16c90:	e0bffa05 	stb	r2,-24(fp)
   16c94:	e0bffa03 	ldbu	r2,-24(fp)
   16c98:	108000f0 	cmpltui	r2,r2,3
   16c9c:	103ff21e 	bne	r2,zero,16c68 <__alt_mem_Flash_flash_data+0xf4016c68>
        *pdest++ = *psrc++;
    }
    p_sem_data->OSCnt = pevent->OSEventCnt;                /* Get semaphore count                      */
   16ca0:	e0bffe17 	ldw	r2,-8(fp)
   16ca4:	10c0020b 	ldhu	r3,8(r2)
   16ca8:	e0bfff17 	ldw	r2,-4(fp)
   16cac:	10c0000d 	sth	r3,0(r2)
   16cb0:	e0bffb17 	ldw	r2,-20(fp)
   16cb4:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   16cb8:	e0bffd17 	ldw	r2,-12(fp)
   16cbc:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
   16cc0:	0005883a 	mov	r2,zero
}
   16cc4:	e037883a 	mov	sp,fp
   16cc8:	df000017 	ldw	fp,0(sp)
   16ccc:	dec00104 	addi	sp,sp,4
   16cd0:	f800283a 	ret

00016cd4 <OSSemSet>:
*********************************************************************************************************
*/

#if OS_SEM_SET_EN > 0
void  OSSemSet (OS_EVENT *pevent, INT16U cnt, INT8U *perr)
{
   16cd4:	defff904 	addi	sp,sp,-28
   16cd8:	df000615 	stw	fp,24(sp)
   16cdc:	df000604 	addi	fp,sp,24
   16ce0:	e13ffd15 	stw	r4,-12(fp)
   16ce4:	2805883a 	mov	r2,r5
   16ce8:	e1bfff15 	stw	r6,-4(fp)
   16cec:	e0bffe0d 	sth	r2,-8(fp)
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   16cf0:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
   16cf4:	e0bfff17 	ldw	r2,-4(fp)
   16cf8:	1000011e 	bne	r2,zero,16d00 <OSSemSet+0x2c>
        return;
   16cfc:	00003006 	br	16dc0 <OSSemSet+0xec>
    }
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
   16d00:	e0bffd17 	ldw	r2,-12(fp)
   16d04:	1000041e 	bne	r2,zero,16d18 <OSSemSet+0x44>
        *perr = OS_ERR_PEVENT_NULL;
   16d08:	e0bfff17 	ldw	r2,-4(fp)
   16d0c:	00c00104 	movi	r3,4
   16d10:	10c00005 	stb	r3,0(r2)
        return;
   16d14:	00002a06 	br	16dc0 <OSSemSet+0xec>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
   16d18:	e0bffd17 	ldw	r2,-12(fp)
   16d1c:	10800003 	ldbu	r2,0(r2)
   16d20:	10803fcc 	andi	r2,r2,255
   16d24:	108000e0 	cmpeqi	r2,r2,3
   16d28:	1000041e 	bne	r2,zero,16d3c <OSSemSet+0x68>
        *perr = OS_ERR_EVENT_TYPE;
   16d2c:	e0bfff17 	ldw	r2,-4(fp)
   16d30:	00c00044 	movi	r3,1
   16d34:	10c00005 	stb	r3,0(r2)
        return;
   16d38:	00002106 	br	16dc0 <OSSemSet+0xec>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   16d3c:	0005303a 	rdctl	r2,status
   16d40:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   16d44:	e0fffb17 	ldw	r3,-20(fp)
   16d48:	00bfff84 	movi	r2,-2
   16d4c:	1884703a 	and	r2,r3,r2
   16d50:	1001703a 	wrctl	status,r2
  
  return context;
   16d54:	e0bffb17 	ldw	r2,-20(fp)
    }
    OS_ENTER_CRITICAL();
   16d58:	e0bffa15 	stw	r2,-24(fp)
    *perr = OS_ERR_NONE;
   16d5c:	e0bfff17 	ldw	r2,-4(fp)
   16d60:	10000005 	stb	zero,0(r2)
    if (pevent->OSEventCnt > 0) {                     /* See if semaphore already has a count          */
   16d64:	e0bffd17 	ldw	r2,-12(fp)
   16d68:	1080020b 	ldhu	r2,8(r2)
   16d6c:	10bfffcc 	andi	r2,r2,65535
   16d70:	10000426 	beq	r2,zero,16d84 <OSSemSet+0xb0>
        pevent->OSEventCnt = cnt;                     /* Yes, set it to the new value specified.       */
   16d74:	e0bffd17 	ldw	r2,-12(fp)
   16d78:	e0fffe0b 	ldhu	r3,-8(fp)
   16d7c:	10c0020d 	sth	r3,8(r2)
   16d80:	00000b06 	br	16db0 <OSSemSet+0xdc>
    } else {                                          /* No                                            */
        if (pevent->OSEventGrp == 0) {                /*      See if task(s) waiting?                  */
   16d84:	e0bffd17 	ldw	r2,-12(fp)
   16d88:	10800283 	ldbu	r2,10(r2)
   16d8c:	10803fcc 	andi	r2,r2,255
   16d90:	1000041e 	bne	r2,zero,16da4 <OSSemSet+0xd0>
            pevent->OSEventCnt = cnt;                 /*      No, OK to set the value                  */
   16d94:	e0bffd17 	ldw	r2,-12(fp)
   16d98:	e0fffe0b 	ldhu	r3,-8(fp)
   16d9c:	10c0020d 	sth	r3,8(r2)
   16da0:	00000306 	br	16db0 <OSSemSet+0xdc>
        } else {
            *perr              = OS_ERR_TASK_WAITING;
   16da4:	e0bfff17 	ldw	r2,-4(fp)
   16da8:	00c01244 	movi	r3,73
   16dac:	10c00005 	stb	r3,0(r2)
   16db0:	e0bffa17 	ldw	r2,-24(fp)
   16db4:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   16db8:	e0bffc17 	ldw	r2,-16(fp)
   16dbc:	1001703a 	wrctl	status,r2
        }
    }
    OS_EXIT_CRITICAL();
}
   16dc0:	e037883a 	mov	sp,fp
   16dc4:	df000017 	ldw	fp,0(sp)
   16dc8:	dec00104 	addi	sp,sp,4
   16dcc:	f800283a 	ret

00016dd0 <OSTaskChangePrio>:
*********************************************************************************************************
*/

#if OS_TASK_CHANGE_PRIO_EN > 0
INT8U  OSTaskChangePrio (INT8U oldprio, INT8U newprio)
{
   16dd0:	defff104 	addi	sp,sp,-60
   16dd4:	dfc00e15 	stw	ra,56(sp)
   16dd8:	df000d15 	stw	fp,52(sp)
   16ddc:	df000d04 	addi	fp,sp,52
   16de0:	2007883a 	mov	r3,r4
   16de4:	2805883a 	mov	r2,r5
   16de8:	e0fffe05 	stb	r3,-8(fp)
   16dec:	e0bfff05 	stb	r2,-4(fp)
    INT16U     bitx_new;
    INT16U     bity_old;
    INT16U     bitx_old;
#endif
#if OS_CRITICAL_METHOD == 3
    OS_CPU_SR  cpu_sr = 0;                                  /* Storage for CPU status register         */
   16df0:	e03ff515 	stw	zero,-44(fp)
#endif


/*$PAGE*/
#if OS_ARG_CHK_EN > 0
    if (oldprio >= OS_LOWEST_PRIO) {
   16df4:	e0bffe03 	ldbu	r2,-8(fp)
   16df8:	10800530 	cmpltui	r2,r2,20
   16dfc:	1000051e 	bne	r2,zero,16e14 <OSTaskChangePrio+0x44>
        if (oldprio != OS_PRIO_SELF) {
   16e00:	e0bffe03 	ldbu	r2,-8(fp)
   16e04:	10803fe0 	cmpeqi	r2,r2,255
   16e08:	1000021e 	bne	r2,zero,16e14 <OSTaskChangePrio+0x44>
            return (OS_ERR_PRIO_INVALID);
   16e0c:	00800a84 	movi	r2,42
   16e10:	00013a06 	br	172fc <OSTaskChangePrio+0x52c>
        }
    }
    if (newprio >= OS_LOWEST_PRIO) {
   16e14:	e0bfff03 	ldbu	r2,-4(fp)
   16e18:	10800530 	cmpltui	r2,r2,20
   16e1c:	1000021e 	bne	r2,zero,16e28 <OSTaskChangePrio+0x58>
        return (OS_ERR_PRIO_INVALID);
   16e20:	00800a84 	movi	r2,42
   16e24:	00013506 	br	172fc <OSTaskChangePrio+0x52c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   16e28:	0005303a 	rdctl	r2,status
   16e2c:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   16e30:	e0fff917 	ldw	r3,-28(fp)
   16e34:	00bfff84 	movi	r2,-2
   16e38:	1884703a 	and	r2,r3,r2
   16e3c:	1001703a 	wrctl	status,r2
  
  return context;
   16e40:	e0bff917 	ldw	r2,-28(fp)
    }
#endif
    OS_ENTER_CRITICAL();
   16e44:	e0bff515 	stw	r2,-44(fp)
    if (OSTCBPrioTbl[newprio] != (OS_TCB *)0) {             /* New priority must not already exist     */
   16e48:	e0ffff03 	ldbu	r3,-4(fp)
   16e4c:	008000f4 	movhi	r2,3
   16e50:	10a13d04 	addi	r2,r2,-31500
   16e54:	18c7883a 	add	r3,r3,r3
   16e58:	18c7883a 	add	r3,r3,r3
   16e5c:	10c5883a 	add	r2,r2,r3
   16e60:	10800017 	ldw	r2,0(r2)
   16e64:	10000626 	beq	r2,zero,16e80 <OSTaskChangePrio+0xb0>
   16e68:	e0bff517 	ldw	r2,-44(fp)
   16e6c:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   16e70:	e0bffa17 	ldw	r2,-24(fp)
   16e74:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_PRIO_EXIST);
   16e78:	00800a04 	movi	r2,40
   16e7c:	00011f06 	br	172fc <OSTaskChangePrio+0x52c>
    }
    if (oldprio == OS_PRIO_SELF) {                          /* See if changing self                    */
   16e80:	e0bffe03 	ldbu	r2,-8(fp)
   16e84:	10803fd8 	cmpnei	r2,r2,255
   16e88:	1000051e 	bne	r2,zero,16ea0 <OSTaskChangePrio+0xd0>
        oldprio = OSTCBCur->OSTCBPrio;                      /* Yes, get priority                       */
   16e8c:	008000b4 	movhi	r2,2
   16e90:	10949004 	addi	r2,r2,21056
   16e94:	10800017 	ldw	r2,0(r2)
   16e98:	10800c83 	ldbu	r2,50(r2)
   16e9c:	e0bffe05 	stb	r2,-8(fp)
    }
    ptcb = OSTCBPrioTbl[oldprio];
   16ea0:	e0fffe03 	ldbu	r3,-8(fp)
   16ea4:	008000f4 	movhi	r2,3
   16ea8:	10a13d04 	addi	r2,r2,-31500
   16eac:	18c7883a 	add	r3,r3,r3
   16eb0:	18c7883a 	add	r3,r3,r3
   16eb4:	10c5883a 	add	r2,r2,r3
   16eb8:	10800017 	ldw	r2,0(r2)
   16ebc:	e0bff615 	stw	r2,-40(fp)
    if (ptcb == (OS_TCB *)0) {                              /* Does task to change exist?              */
   16ec0:	e0bff617 	ldw	r2,-40(fp)
   16ec4:	1000061e 	bne	r2,zero,16ee0 <OSTaskChangePrio+0x110>
   16ec8:	e0bff517 	ldw	r2,-44(fp)
   16ecc:	e0bffb15 	stw	r2,-20(fp)
   16ed0:	e0bffb17 	ldw	r2,-20(fp)
   16ed4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                                 /* No, can't change its priority!          */
        return (OS_ERR_PRIO);
   16ed8:	00800a44 	movi	r2,41
   16edc:	00010706 	br	172fc <OSTaskChangePrio+0x52c>
    }
    if (ptcb == OS_TCB_RESERVED) {                          /* Is task assigned to Mutex               */
   16ee0:	e0bff617 	ldw	r2,-40(fp)
   16ee4:	10800058 	cmpnei	r2,r2,1
   16ee8:	1000061e 	bne	r2,zero,16f04 <OSTaskChangePrio+0x134>
   16eec:	e0bff517 	ldw	r2,-44(fp)
   16ef0:	e0bffc15 	stw	r2,-16(fp)
   16ef4:	e0bffc17 	ldw	r2,-16(fp)
   16ef8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                                 /* No, can't change its priority!          */
        return (OS_ERR_TASK_NOT_EXIST);
   16efc:	008010c4 	movi	r2,67
   16f00:	0000fe06 	br	172fc <OSTaskChangePrio+0x52c>
    }
#if OS_LOWEST_PRIO <= 63
    y_new                 = (INT8U)(newprio >> 3);          /* Yes, compute new TCB fields             */
   16f04:	e0bfff03 	ldbu	r2,-4(fp)
   16f08:	1004d0fa 	srli	r2,r2,3
   16f0c:	e0bff705 	stb	r2,-36(fp)
    x_new                 = (INT8U)(newprio & 0x07);
   16f10:	e0bfff03 	ldbu	r2,-4(fp)
   16f14:	108001cc 	andi	r2,r2,7
   16f18:	e0bff745 	stb	r2,-35(fp)
    bity_new              = (INT8U)(1 << y_new);
   16f1c:	e0bff703 	ldbu	r2,-36(fp)
   16f20:	00c00044 	movi	r3,1
   16f24:	1884983a 	sll	r2,r3,r2
   16f28:	e0bff785 	stb	r2,-34(fp)
    bitx_new              = (INT8U)(1 << x_new);
   16f2c:	e0bff743 	ldbu	r2,-35(fp)
   16f30:	00c00044 	movi	r3,1
   16f34:	1884983a 	sll	r2,r3,r2
   16f38:	e0bff7c5 	stb	r2,-33(fp)
    x_new                 = (INT8U)( newprio & 0x0F);
    bity_new              = (INT16U)(1 << y_new);
    bitx_new              = (INT16U)(1 << x_new);
#endif

    OSTCBPrioTbl[oldprio] = (OS_TCB *)0;                    /* Remove TCB from old priority            */
   16f3c:	e0fffe03 	ldbu	r3,-8(fp)
   16f40:	008000f4 	movhi	r2,3
   16f44:	10a13d04 	addi	r2,r2,-31500
   16f48:	18c7883a 	add	r3,r3,r3
   16f4c:	18c7883a 	add	r3,r3,r3
   16f50:	10c5883a 	add	r2,r2,r3
   16f54:	10000015 	stw	zero,0(r2)
    OSTCBPrioTbl[newprio] =  ptcb;                          /* Place pointer to TCB @ new priority     */
   16f58:	e0ffff03 	ldbu	r3,-4(fp)
   16f5c:	008000f4 	movhi	r2,3
   16f60:	10a13d04 	addi	r2,r2,-31500
   16f64:	18c7883a 	add	r3,r3,r3
   16f68:	18c7883a 	add	r3,r3,r3
   16f6c:	10c5883a 	add	r2,r2,r3
   16f70:	e0fff617 	ldw	r3,-40(fp)
   16f74:	10c00015 	stw	r3,0(r2)
    y_old                 =  ptcb->OSTCBY;
   16f78:	e0bff617 	ldw	r2,-40(fp)
   16f7c:	10800d03 	ldbu	r2,52(r2)
   16f80:	e0bff805 	stb	r2,-32(fp)
    bity_old              =  ptcb->OSTCBBitY;
   16f84:	e0bff617 	ldw	r2,-40(fp)
   16f88:	10800d83 	ldbu	r2,54(r2)
   16f8c:	e0bff845 	stb	r2,-31(fp)
    bitx_old              =  ptcb->OSTCBBitX;
   16f90:	e0bff617 	ldw	r2,-40(fp)
   16f94:	10800d43 	ldbu	r2,53(r2)
   16f98:	e0bff885 	stb	r2,-30(fp)
    if ((OSRdyTbl[y_old] &   bitx_old) != 0) {              /* If task is ready make it not            */
   16f9c:	e0fff803 	ldbu	r3,-32(fp)
   16fa0:	008000b4 	movhi	r2,2
   16fa4:	10948d44 	addi	r2,r2,21045
   16fa8:	10c5883a 	add	r2,r2,r3
   16fac:	10c00003 	ldbu	r3,0(r2)
   16fb0:	e0bff883 	ldbu	r2,-30(fp)
   16fb4:	1884703a 	and	r2,r3,r2
   16fb8:	10803fcc 	andi	r2,r2,255
   16fbc:	10003726 	beq	r2,zero,1709c <OSTaskChangePrio+0x2cc>
         OSRdyTbl[y_old] &= ~bitx_old;
   16fc0:	e0fff803 	ldbu	r3,-32(fp)
   16fc4:	e13ff803 	ldbu	r4,-32(fp)
   16fc8:	008000b4 	movhi	r2,2
   16fcc:	10948d44 	addi	r2,r2,21045
   16fd0:	1105883a 	add	r2,r2,r4
   16fd4:	10800003 	ldbu	r2,0(r2)
   16fd8:	1009883a 	mov	r4,r2
   16fdc:	e0bff883 	ldbu	r2,-30(fp)
   16fe0:	0084303a 	nor	r2,zero,r2
   16fe4:	2084703a 	and	r2,r4,r2
   16fe8:	1009883a 	mov	r4,r2
   16fec:	008000b4 	movhi	r2,2
   16ff0:	10948d44 	addi	r2,r2,21045
   16ff4:	10c5883a 	add	r2,r2,r3
   16ff8:	11000005 	stb	r4,0(r2)
         if (OSRdyTbl[y_old] == 0) {
   16ffc:	e0fff803 	ldbu	r3,-32(fp)
   17000:	008000b4 	movhi	r2,2
   17004:	10948d44 	addi	r2,r2,21045
   17008:	10c5883a 	add	r2,r2,r3
   1700c:	10800003 	ldbu	r2,0(r2)
   17010:	10803fcc 	andi	r2,r2,255
   17014:	10000b1e 	bne	r2,zero,17044 <OSTaskChangePrio+0x274>
             OSRdyGrp &= ~bity_old;
   17018:	e0bff843 	ldbu	r2,-31(fp)
   1701c:	0084303a 	nor	r2,zero,r2
   17020:	1007883a 	mov	r3,r2
   17024:	008000b4 	movhi	r2,2
   17028:	10948d04 	addi	r2,r2,21044
   1702c:	10800003 	ldbu	r2,0(r2)
   17030:	1884703a 	and	r2,r3,r2
   17034:	1007883a 	mov	r3,r2
   17038:	008000b4 	movhi	r2,2
   1703c:	10948d04 	addi	r2,r2,21044
   17040:	10c00005 	stb	r3,0(r2)
         }
         OSRdyGrp        |= bity_new;                       /* Make new priority ready to run          */
   17044:	008000b4 	movhi	r2,2
   17048:	10948d04 	addi	r2,r2,21044
   1704c:	10c00003 	ldbu	r3,0(r2)
   17050:	e0bff783 	ldbu	r2,-34(fp)
   17054:	1884b03a 	or	r2,r3,r2
   17058:	1007883a 	mov	r3,r2
   1705c:	008000b4 	movhi	r2,2
   17060:	10948d04 	addi	r2,r2,21044
   17064:	10c00005 	stb	r3,0(r2)
         OSRdyTbl[y_new] |= bitx_new;
   17068:	e0fff703 	ldbu	r3,-36(fp)
   1706c:	e13ff703 	ldbu	r4,-36(fp)
   17070:	008000b4 	movhi	r2,2
   17074:	10948d44 	addi	r2,r2,21045
   17078:	1105883a 	add	r2,r2,r4
   1707c:	11000003 	ldbu	r4,0(r2)
   17080:	e0bff7c3 	ldbu	r2,-33(fp)
   17084:	2084b03a 	or	r2,r4,r2
   17088:	1009883a 	mov	r4,r2
   1708c:	008000b4 	movhi	r2,2
   17090:	10948d44 	addi	r2,r2,21045
   17094:	10c5883a 	add	r2,r2,r3
   17098:	11000005 	stb	r4,0(r2)
    }

#if (OS_EVENT_EN)
    pevent = ptcb->OSTCBEventPtr;
   1709c:	e0bff617 	ldw	r2,-40(fp)
   170a0:	10800717 	ldw	r2,28(r2)
   170a4:	e0bff315 	stw	r2,-52(fp)
    if (pevent != (OS_EVENT *)0) {
   170a8:	e0bff317 	ldw	r2,-52(fp)
   170ac:	10003326 	beq	r2,zero,1717c <OSTaskChangePrio+0x3ac>
        pevent->OSEventTbl[y_old] &= ~bitx_old;             /* Remove old task prio from wait list     */
   170b0:	e0bff803 	ldbu	r2,-32(fp)
   170b4:	e0fff803 	ldbu	r3,-32(fp)
   170b8:	e13ff317 	ldw	r4,-52(fp)
   170bc:	20c7883a 	add	r3,r4,r3
   170c0:	18c00204 	addi	r3,r3,8
   170c4:	18c000c3 	ldbu	r3,3(r3)
   170c8:	1809883a 	mov	r4,r3
   170cc:	e0fff883 	ldbu	r3,-30(fp)
   170d0:	00c6303a 	nor	r3,zero,r3
   170d4:	20c6703a 	and	r3,r4,r3
   170d8:	1809883a 	mov	r4,r3
   170dc:	e0fff317 	ldw	r3,-52(fp)
   170e0:	1885883a 	add	r2,r3,r2
   170e4:	10800204 	addi	r2,r2,8
   170e8:	110000c5 	stb	r4,3(r2)
        if (pevent->OSEventTbl[y_old] == 0) {
   170ec:	e0bff803 	ldbu	r2,-32(fp)
   170f0:	e0fff317 	ldw	r3,-52(fp)
   170f4:	1885883a 	add	r2,r3,r2
   170f8:	10800204 	addi	r2,r2,8
   170fc:	108000c3 	ldbu	r2,3(r2)
   17100:	10803fcc 	andi	r2,r2,255
   17104:	1000091e 	bne	r2,zero,1712c <OSTaskChangePrio+0x35c>
            pevent->OSEventGrp    &= ~bity_old;
   17108:	e0bff317 	ldw	r2,-52(fp)
   1710c:	10800283 	ldbu	r2,10(r2)
   17110:	1007883a 	mov	r3,r2
   17114:	e0bff843 	ldbu	r2,-31(fp)
   17118:	0084303a 	nor	r2,zero,r2
   1711c:	1884703a 	and	r2,r3,r2
   17120:	1007883a 	mov	r3,r2
   17124:	e0bff317 	ldw	r2,-52(fp)
   17128:	10c00285 	stb	r3,10(r2)
        }
        pevent->OSEventGrp        |= bity_new;              /* Add    new task prio to   wait list     */
   1712c:	e0bff317 	ldw	r2,-52(fp)
   17130:	10c00283 	ldbu	r3,10(r2)
   17134:	e0bff783 	ldbu	r2,-34(fp)
   17138:	1884b03a 	or	r2,r3,r2
   1713c:	1007883a 	mov	r3,r2
   17140:	e0bff317 	ldw	r2,-52(fp)
   17144:	10c00285 	stb	r3,10(r2)
        pevent->OSEventTbl[y_new] |= bitx_new;
   17148:	e0bff703 	ldbu	r2,-36(fp)
   1714c:	e0fff703 	ldbu	r3,-36(fp)
   17150:	e13ff317 	ldw	r4,-52(fp)
   17154:	20c7883a 	add	r3,r4,r3
   17158:	18c00204 	addi	r3,r3,8
   1715c:	190000c3 	ldbu	r4,3(r3)
   17160:	e0fff7c3 	ldbu	r3,-33(fp)
   17164:	20c6b03a 	or	r3,r4,r3
   17168:	1809883a 	mov	r4,r3
   1716c:	e0fff317 	ldw	r3,-52(fp)
   17170:	1885883a 	add	r2,r3,r2
   17174:	10800204 	addi	r2,r2,8
   17178:	110000c5 	stb	r4,3(r2)
    }
#if (OS_EVENT_MULTI_EN > 0)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {
   1717c:	e0bff617 	ldw	r2,-40(fp)
   17180:	10800817 	ldw	r2,32(r2)
   17184:	10004226 	beq	r2,zero,17290 <OSTaskChangePrio+0x4c0>
        pevents =  ptcb->OSTCBEventMultiPtr;
   17188:	e0bff617 	ldw	r2,-40(fp)
   1718c:	10800817 	ldw	r2,32(r2)
   17190:	e0bff415 	stw	r2,-48(fp)
        pevent  = *pevents;
   17194:	e0bff417 	ldw	r2,-48(fp)
   17198:	10800017 	ldw	r2,0(r2)
   1719c:	e0bff315 	stw	r2,-52(fp)
        while (pevent != (OS_EVENT *)0) {
   171a0:	00003906 	br	17288 <OSTaskChangePrio+0x4b8>
            pevent->OSEventTbl[y_old] &= ~bitx_old;         /* Remove old task prio from wait lists    */
   171a4:	e0bff803 	ldbu	r2,-32(fp)
   171a8:	e0fff803 	ldbu	r3,-32(fp)
   171ac:	e13ff317 	ldw	r4,-52(fp)
   171b0:	20c7883a 	add	r3,r4,r3
   171b4:	18c00204 	addi	r3,r3,8
   171b8:	18c000c3 	ldbu	r3,3(r3)
   171bc:	1809883a 	mov	r4,r3
   171c0:	e0fff883 	ldbu	r3,-30(fp)
   171c4:	00c6303a 	nor	r3,zero,r3
   171c8:	20c6703a 	and	r3,r4,r3
   171cc:	1809883a 	mov	r4,r3
   171d0:	e0fff317 	ldw	r3,-52(fp)
   171d4:	1885883a 	add	r2,r3,r2
   171d8:	10800204 	addi	r2,r2,8
   171dc:	110000c5 	stb	r4,3(r2)
            if (pevent->OSEventTbl[y_old] == 0) {
   171e0:	e0bff803 	ldbu	r2,-32(fp)
   171e4:	e0fff317 	ldw	r3,-52(fp)
   171e8:	1885883a 	add	r2,r3,r2
   171ec:	10800204 	addi	r2,r2,8
   171f0:	108000c3 	ldbu	r2,3(r2)
   171f4:	10803fcc 	andi	r2,r2,255
   171f8:	1000091e 	bne	r2,zero,17220 <OSTaskChangePrio+0x450>
                pevent->OSEventGrp    &= ~bity_old;
   171fc:	e0bff317 	ldw	r2,-52(fp)
   17200:	10800283 	ldbu	r2,10(r2)
   17204:	1007883a 	mov	r3,r2
   17208:	e0bff843 	ldbu	r2,-31(fp)
   1720c:	0084303a 	nor	r2,zero,r2
   17210:	1884703a 	and	r2,r3,r2
   17214:	1007883a 	mov	r3,r2
   17218:	e0bff317 	ldw	r2,-52(fp)
   1721c:	10c00285 	stb	r3,10(r2)
            }
            pevent->OSEventGrp        |= bity_new;          /* Add    new task prio to   wait lists    */
   17220:	e0bff317 	ldw	r2,-52(fp)
   17224:	10c00283 	ldbu	r3,10(r2)
   17228:	e0bff783 	ldbu	r2,-34(fp)
   1722c:	1884b03a 	or	r2,r3,r2
   17230:	1007883a 	mov	r3,r2
   17234:	e0bff317 	ldw	r2,-52(fp)
   17238:	10c00285 	stb	r3,10(r2)
            pevent->OSEventTbl[y_new] |= bitx_new;
   1723c:	e0bff703 	ldbu	r2,-36(fp)
   17240:	e0fff703 	ldbu	r3,-36(fp)
   17244:	e13ff317 	ldw	r4,-52(fp)
   17248:	20c7883a 	add	r3,r4,r3
   1724c:	18c00204 	addi	r3,r3,8
   17250:	190000c3 	ldbu	r4,3(r3)
   17254:	e0fff7c3 	ldbu	r3,-33(fp)
   17258:	20c6b03a 	or	r3,r4,r3
   1725c:	1809883a 	mov	r4,r3
   17260:	e0fff317 	ldw	r3,-52(fp)
   17264:	1885883a 	add	r2,r3,r2
   17268:	10800204 	addi	r2,r2,8
   1726c:	110000c5 	stb	r4,3(r2)
            pevents++;
   17270:	e0bff417 	ldw	r2,-48(fp)
   17274:	10800104 	addi	r2,r2,4
   17278:	e0bff415 	stw	r2,-48(fp)
            pevent                     = *pevents;
   1727c:	e0bff417 	ldw	r2,-48(fp)
   17280:	10800017 	ldw	r2,0(r2)
   17284:	e0bff315 	stw	r2,-52(fp)
    }
#if (OS_EVENT_MULTI_EN > 0)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {
        pevents =  ptcb->OSTCBEventMultiPtr;
        pevent  = *pevents;
        while (pevent != (OS_EVENT *)0) {
   17288:	e0bff317 	ldw	r2,-52(fp)
   1728c:	103fc51e 	bne	r2,zero,171a4 <__alt_mem_Flash_flash_data+0xf40171a4>
        }
    }
#endif
#endif

    ptcb->OSTCBPrio = newprio;                              /* Set new task priority                   */
   17290:	e0bff617 	ldw	r2,-40(fp)
   17294:	e0ffff03 	ldbu	r3,-4(fp)
   17298:	10c00c85 	stb	r3,50(r2)
    ptcb->OSTCBY    = y_new;
   1729c:	e0bff617 	ldw	r2,-40(fp)
   172a0:	e0fff703 	ldbu	r3,-36(fp)
   172a4:	10c00d05 	stb	r3,52(r2)
    ptcb->OSTCBX    = x_new;
   172a8:	e0bff617 	ldw	r2,-40(fp)
   172ac:	e0fff743 	ldbu	r3,-35(fp)
   172b0:	10c00cc5 	stb	r3,51(r2)
    ptcb->OSTCBBitY = bity_new;
   172b4:	e0bff617 	ldw	r2,-40(fp)
   172b8:	e0fff783 	ldbu	r3,-34(fp)
   172bc:	10c00d85 	stb	r3,54(r2)
    ptcb->OSTCBBitX = bitx_new;
   172c0:	e0bff617 	ldw	r2,-40(fp)
   172c4:	e0fff7c3 	ldbu	r3,-33(fp)
   172c8:	10c00d45 	stb	r3,53(r2)
   172cc:	e0bff517 	ldw	r2,-44(fp)
   172d0:	e0bffd15 	stw	r2,-12(fp)
   172d4:	e0bffd17 	ldw	r2,-12(fp)
   172d8:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    if (OSRunning == OS_TRUE) {
   172dc:	008000b4 	movhi	r2,2
   172e0:	10948144 	addi	r2,r2,20997
   172e4:	10800003 	ldbu	r2,0(r2)
   172e8:	10803fcc 	andi	r2,r2,255
   172ec:	10800058 	cmpnei	r2,r2,1
   172f0:	1000011e 	bne	r2,zero,172f8 <OSTaskChangePrio+0x528>
        OS_Sched();                                         /* Find new highest priority task          */
   172f4:	00128b40 	call	128b4 <OS_Sched>
    }
    return (OS_ERR_NONE);
   172f8:	0005883a 	mov	r2,zero
}
   172fc:	e037883a 	mov	sp,fp
   17300:	dfc00117 	ldw	ra,4(sp)
   17304:	df000017 	ldw	fp,0(sp)
   17308:	dec00204 	addi	sp,sp,8
   1730c:	f800283a 	ret

00017310 <OSTaskCreate>:
*********************************************************************************************************
*/

#if OS_TASK_CREATE_EN > 0
INT8U  OSTaskCreate (void (*task)(void *p_arg), void *p_arg, OS_STK *ptos, INT8U prio)
{
   17310:	deffee04 	addi	sp,sp,-72
   17314:	dfc01115 	stw	ra,68(sp)
   17318:	df001015 	stw	fp,64(sp)
   1731c:	df001004 	addi	fp,sp,64
   17320:	e13ffc15 	stw	r4,-16(fp)
   17324:	e17ffd15 	stw	r5,-12(fp)
   17328:	e1bffe15 	stw	r6,-8(fp)
   1732c:	3805883a 	mov	r2,r7
   17330:	e0bfff05 	stb	r2,-4(fp)
    OS_STK    *psp;
    INT8U      err;
#if OS_CRITICAL_METHOD == 3                  /* Allocate storage for CPU status register               */
    OS_CPU_SR  cpu_sr = 0;
   17334:	e03ff315 	stw	zero,-52(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio > OS_LOWEST_PRIO) {             /* Make sure priority is within allowable range           */
   17338:	e0bfff03 	ldbu	r2,-4(fp)
   1733c:	10800570 	cmpltui	r2,r2,21
   17340:	1000021e 	bne	r2,zero,1734c <OSTaskCreate+0x3c>
        return (OS_ERR_PRIO_INVALID);
   17344:	00800a84 	movi	r2,42
   17348:	00005b06 	br	174b8 <OSTaskCreate+0x1a8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1734c:	0005303a 	rdctl	r2,status
   17350:	e0bff615 	stw	r2,-40(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   17354:	e0fff617 	ldw	r3,-40(fp)
   17358:	00bfff84 	movi	r2,-2
   1735c:	1884703a 	and	r2,r3,r2
   17360:	1001703a 	wrctl	status,r2
  
  return context;
   17364:	e0bff617 	ldw	r2,-40(fp)
    }
#endif
    OS_ENTER_CRITICAL();
   17368:	e0bff315 	stw	r2,-52(fp)
    if (OSIntNesting > 0) {                  /* Make sure we don't create the task from within an ISR  */
   1736c:	008000b4 	movhi	r2,2
   17370:	10948f04 	addi	r2,r2,21052
   17374:	10800003 	ldbu	r2,0(r2)
   17378:	10803fcc 	andi	r2,r2,255
   1737c:	10000626 	beq	r2,zero,17398 <OSTaskCreate+0x88>
   17380:	e0bff317 	ldw	r2,-52(fp)
   17384:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   17388:	e0bff717 	ldw	r2,-36(fp)
   1738c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_CREATE_ISR);
   17390:	00800f04 	movi	r2,60
   17394:	00004806 	br	174b8 <OSTaskCreate+0x1a8>
    }
    if (OSTCBPrioTbl[prio] == (OS_TCB *)0) { /* Make sure task doesn't already exist at this priority  */
   17398:	e0ffff03 	ldbu	r3,-4(fp)
   1739c:	008000f4 	movhi	r2,3
   173a0:	10a13d04 	addi	r2,r2,-31500
   173a4:	18c7883a 	add	r3,r3,r3
   173a8:	18c7883a 	add	r3,r3,r3
   173ac:	10c5883a 	add	r2,r2,r3
   173b0:	10800017 	ldw	r2,0(r2)
   173b4:	10003b1e 	bne	r2,zero,174a4 <OSTaskCreate+0x194>
        OSTCBPrioTbl[prio] = OS_TCB_RESERVED;/* Reserve the priority to prevent others from doing ...  */
   173b8:	e0ffff03 	ldbu	r3,-4(fp)
   173bc:	008000f4 	movhi	r2,3
   173c0:	10a13d04 	addi	r2,r2,-31500
   173c4:	18c7883a 	add	r3,r3,r3
   173c8:	18c7883a 	add	r3,r3,r3
   173cc:	10c5883a 	add	r2,r2,r3
   173d0:	00c00044 	movi	r3,1
   173d4:	10c00015 	stw	r3,0(r2)
   173d8:	e0bff317 	ldw	r2,-52(fp)
   173dc:	e0bff815 	stw	r2,-32(fp)
   173e0:	e0bff817 	ldw	r2,-32(fp)
   173e4:	1001703a 	wrctl	status,r2
                                             /* ... the same thing until task is created.              */
        OS_EXIT_CRITICAL();
        psp = OSTaskStkInit(task, p_arg, ptos, 0);              /* Initialize the task's stack         */
   173e8:	e13ffc17 	ldw	r4,-16(fp)
   173ec:	e17ffd17 	ldw	r5,-12(fp)
   173f0:	e1bffe17 	ldw	r6,-8(fp)
   173f4:	000f883a 	mov	r7,zero
   173f8:	00203680 	call	20368 <OSTaskStkInit>
   173fc:	e0bff415 	stw	r2,-48(fp)
        err = OS_TCBInit(prio, psp, (OS_STK *)0, 0, 0, (void *)0, 0);
   17400:	e0bfff03 	ldbu	r2,-4(fp)
   17404:	d8000015 	stw	zero,0(sp)
   17408:	d8000115 	stw	zero,4(sp)
   1740c:	d8000215 	stw	zero,8(sp)
   17410:	1009883a 	mov	r4,r2
   17414:	e17ff417 	ldw	r5,-48(fp)
   17418:	000d883a 	mov	r6,zero
   1741c:	000f883a 	mov	r7,zero
   17420:	0012cb80 	call	12cb8 <OS_TCBInit>
   17424:	e0bff505 	stb	r2,-44(fp)
        if (err == OS_ERR_NONE) {
   17428:	e0bff503 	ldbu	r2,-44(fp)
   1742c:	1000081e 	bne	r2,zero,17450 <OSTaskCreate+0x140>
            if (OSRunning == OS_TRUE) {      /* Find highest priority task if multitasking has started */
   17430:	008000b4 	movhi	r2,2
   17434:	10948144 	addi	r2,r2,20997
   17438:	10800003 	ldbu	r2,0(r2)
   1743c:	10803fcc 	andi	r2,r2,255
   17440:	10800058 	cmpnei	r2,r2,1
   17444:	1000151e 	bne	r2,zero,1749c <OSTaskCreate+0x18c>
                OS_Sched();
   17448:	00128b40 	call	128b4 <OS_Sched>
   1744c:	00001306 	br	1749c <OSTaskCreate+0x18c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   17450:	0005303a 	rdctl	r2,status
   17454:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   17458:	e0fff917 	ldw	r3,-28(fp)
   1745c:	00bfff84 	movi	r2,-2
   17460:	1884703a 	and	r2,r3,r2
   17464:	1001703a 	wrctl	status,r2
  
  return context;
   17468:	e0bff917 	ldw	r2,-28(fp)
            }
        } else {
            OS_ENTER_CRITICAL();
   1746c:	e0bff315 	stw	r2,-52(fp)
            OSTCBPrioTbl[prio] = (OS_TCB *)0;/* Make this priority available to others                 */
   17470:	e0ffff03 	ldbu	r3,-4(fp)
   17474:	008000f4 	movhi	r2,3
   17478:	10a13d04 	addi	r2,r2,-31500
   1747c:	18c7883a 	add	r3,r3,r3
   17480:	18c7883a 	add	r3,r3,r3
   17484:	10c5883a 	add	r2,r2,r3
   17488:	10000015 	stw	zero,0(r2)
   1748c:	e0bff317 	ldw	r2,-52(fp)
   17490:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   17494:	e0bffa17 	ldw	r2,-24(fp)
   17498:	1001703a 	wrctl	status,r2
            OS_EXIT_CRITICAL();
        }
        return (err);
   1749c:	e0bff503 	ldbu	r2,-44(fp)
   174a0:	00000506 	br	174b8 <OSTaskCreate+0x1a8>
   174a4:	e0bff317 	ldw	r2,-52(fp)
   174a8:	e0bffb15 	stw	r2,-20(fp)
   174ac:	e0bffb17 	ldw	r2,-20(fp)
   174b0:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_PRIO_EXIST);
   174b4:	00800a04 	movi	r2,40
}
   174b8:	e037883a 	mov	sp,fp
   174bc:	dfc00117 	ldw	ra,4(sp)
   174c0:	df000017 	ldw	fp,0(sp)
   174c4:	dec00204 	addi	sp,sp,8
   174c8:	f800283a 	ret

000174cc <OSTaskCreateExt>:
                        INT16U   id,
                        OS_STK  *pbos,
                        INT32U   stk_size,
                        void    *pext,
                        INT16U   opt)
{
   174cc:	deffec04 	addi	sp,sp,-80
   174d0:	dfc01315 	stw	ra,76(sp)
   174d4:	df001215 	stw	fp,72(sp)
   174d8:	df001204 	addi	fp,sp,72
   174dc:	e13ffa15 	stw	r4,-24(fp)
   174e0:	e17ffb15 	stw	r5,-20(fp)
   174e4:	e1bffc15 	stw	r6,-16(fp)
   174e8:	3809883a 	mov	r4,r7
   174ec:	e0c00217 	ldw	r3,8(fp)
   174f0:	e0800617 	ldw	r2,24(fp)
   174f4:	e13ffd05 	stb	r4,-12(fp)
   174f8:	e0fffe0d 	sth	r3,-8(fp)
   174fc:	e0bfff0d 	sth	r2,-4(fp)
    OS_STK    *psp;
    INT8U      err;
#if OS_CRITICAL_METHOD == 3                  /* Allocate storage for CPU status register               */
    OS_CPU_SR  cpu_sr = 0;
   17500:	e03ff115 	stw	zero,-60(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio > OS_LOWEST_PRIO) {             /* Make sure priority is within allowable range           */
   17504:	e0bffd03 	ldbu	r2,-12(fp)
   17508:	10800570 	cmpltui	r2,r2,21
   1750c:	1000021e 	bne	r2,zero,17518 <OSTaskCreateExt+0x4c>
        return (OS_ERR_PRIO_INVALID);
   17510:	00800a84 	movi	r2,42
   17514:	00006306 	br	176a4 <OSTaskCreateExt+0x1d8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   17518:	0005303a 	rdctl	r2,status
   1751c:	e0bff415 	stw	r2,-48(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   17520:	e0fff417 	ldw	r3,-48(fp)
   17524:	00bfff84 	movi	r2,-2
   17528:	1884703a 	and	r2,r3,r2
   1752c:	1001703a 	wrctl	status,r2
  
  return context;
   17530:	e0bff417 	ldw	r2,-48(fp)
    }
#endif
    OS_ENTER_CRITICAL();
   17534:	e0bff115 	stw	r2,-60(fp)
    if (OSIntNesting > 0) {                  /* Make sure we don't create the task from within an ISR  */
   17538:	008000b4 	movhi	r2,2
   1753c:	10948f04 	addi	r2,r2,21052
   17540:	10800003 	ldbu	r2,0(r2)
   17544:	10803fcc 	andi	r2,r2,255
   17548:	10000626 	beq	r2,zero,17564 <OSTaskCreateExt+0x98>
   1754c:	e0bff117 	ldw	r2,-60(fp)
   17550:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   17554:	e0bff517 	ldw	r2,-44(fp)
   17558:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_CREATE_ISR);
   1755c:	00800f04 	movi	r2,60
   17560:	00005006 	br	176a4 <OSTaskCreateExt+0x1d8>
    }
    if (OSTCBPrioTbl[prio] == (OS_TCB *)0) { /* Make sure task doesn't already exist at this priority  */
   17564:	e0fffd03 	ldbu	r3,-12(fp)
   17568:	008000f4 	movhi	r2,3
   1756c:	10a13d04 	addi	r2,r2,-31500
   17570:	18c7883a 	add	r3,r3,r3
   17574:	18c7883a 	add	r3,r3,r3
   17578:	10c5883a 	add	r2,r2,r3
   1757c:	10800017 	ldw	r2,0(r2)
   17580:	1000431e 	bne	r2,zero,17690 <OSTaskCreateExt+0x1c4>
        OSTCBPrioTbl[prio] = OS_TCB_RESERVED;/* Reserve the priority to prevent others from doing ...  */
   17584:	e0fffd03 	ldbu	r3,-12(fp)
   17588:	008000f4 	movhi	r2,3
   1758c:	10a13d04 	addi	r2,r2,-31500
   17590:	18c7883a 	add	r3,r3,r3
   17594:	18c7883a 	add	r3,r3,r3
   17598:	10c5883a 	add	r2,r2,r3
   1759c:	00c00044 	movi	r3,1
   175a0:	10c00015 	stw	r3,0(r2)
   175a4:	e0bff117 	ldw	r2,-60(fp)
   175a8:	e0bff615 	stw	r2,-40(fp)
   175ac:	e0bff617 	ldw	r2,-40(fp)
   175b0:	1001703a 	wrctl	status,r2
                                             /* ... the same thing until task is created.              */
        OS_EXIT_CRITICAL();

#if (OS_TASK_STAT_STK_CHK_EN > 0)
        OS_TaskStkClr(pbos, stk_size, opt);                    /* Clear the task stack (if needed)     */
   175b4:	e0bfff0b 	ldhu	r2,-4(fp)
   175b8:	e1000317 	ldw	r4,12(fp)
   175bc:	e1400417 	ldw	r5,16(fp)
   175c0:	100d883a 	mov	r6,r2
   175c4:	00186580 	call	18658 <OS_TaskStkClr>
#endif

        psp = OSTaskStkInit(task, p_arg, ptos, opt);           /* Initialize the task's stack          */
   175c8:	e0bfff0b 	ldhu	r2,-4(fp)
   175cc:	e13ffa17 	ldw	r4,-24(fp)
   175d0:	e17ffb17 	ldw	r5,-20(fp)
   175d4:	e1bffc17 	ldw	r6,-16(fp)
   175d8:	100f883a 	mov	r7,r2
   175dc:	00203680 	call	20368 <OSTaskStkInit>
   175e0:	e0bff215 	stw	r2,-56(fp)
        err = OS_TCBInit(prio, psp, pbos, id, stk_size, pext, opt);
   175e4:	e13ffd03 	ldbu	r4,-12(fp)
   175e8:	e1fffe0b 	ldhu	r7,-8(fp)
   175ec:	e0bfff0b 	ldhu	r2,-4(fp)
   175f0:	e0c00417 	ldw	r3,16(fp)
   175f4:	d8c00015 	stw	r3,0(sp)
   175f8:	e0c00517 	ldw	r3,20(fp)
   175fc:	d8c00115 	stw	r3,4(sp)
   17600:	d8800215 	stw	r2,8(sp)
   17604:	e17ff217 	ldw	r5,-56(fp)
   17608:	e1800317 	ldw	r6,12(fp)
   1760c:	0012cb80 	call	12cb8 <OS_TCBInit>
   17610:	e0bff305 	stb	r2,-52(fp)
        if (err == OS_ERR_NONE) {
   17614:	e0bff303 	ldbu	r2,-52(fp)
   17618:	1000081e 	bne	r2,zero,1763c <OSTaskCreateExt+0x170>
            if (OSRunning == OS_TRUE) {                        /* Find HPT if multitasking has started */
   1761c:	008000b4 	movhi	r2,2
   17620:	10948144 	addi	r2,r2,20997
   17624:	10800003 	ldbu	r2,0(r2)
   17628:	10803fcc 	andi	r2,r2,255
   1762c:	10800058 	cmpnei	r2,r2,1
   17630:	1000151e 	bne	r2,zero,17688 <OSTaskCreateExt+0x1bc>
                OS_Sched();
   17634:	00128b40 	call	128b4 <OS_Sched>
   17638:	00001306 	br	17688 <OSTaskCreateExt+0x1bc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1763c:	0005303a 	rdctl	r2,status
   17640:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   17644:	e0fff717 	ldw	r3,-36(fp)
   17648:	00bfff84 	movi	r2,-2
   1764c:	1884703a 	and	r2,r3,r2
   17650:	1001703a 	wrctl	status,r2
  
  return context;
   17654:	e0bff717 	ldw	r2,-36(fp)
            }
        } else {
            OS_ENTER_CRITICAL();
   17658:	e0bff115 	stw	r2,-60(fp)
            OSTCBPrioTbl[prio] = (OS_TCB *)0;                  /* Make this priority avail. to others  */
   1765c:	e0fffd03 	ldbu	r3,-12(fp)
   17660:	008000f4 	movhi	r2,3
   17664:	10a13d04 	addi	r2,r2,-31500
   17668:	18c7883a 	add	r3,r3,r3
   1766c:	18c7883a 	add	r3,r3,r3
   17670:	10c5883a 	add	r2,r2,r3
   17674:	10000015 	stw	zero,0(r2)
   17678:	e0bff117 	ldw	r2,-60(fp)
   1767c:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   17680:	e0bff817 	ldw	r2,-32(fp)
   17684:	1001703a 	wrctl	status,r2
            OS_EXIT_CRITICAL();
        }
        return (err);
   17688:	e0bff303 	ldbu	r2,-52(fp)
   1768c:	00000506 	br	176a4 <OSTaskCreateExt+0x1d8>
   17690:	e0bff117 	ldw	r2,-60(fp)
   17694:	e0bff915 	stw	r2,-28(fp)
   17698:	e0bff917 	ldw	r2,-28(fp)
   1769c:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_PRIO_EXIST);
   176a0:	00800a04 	movi	r2,40
}
   176a4:	e037883a 	mov	sp,fp
   176a8:	dfc00117 	ldw	ra,4(sp)
   176ac:	df000017 	ldw	fp,0(sp)
   176b0:	dec00204 	addi	sp,sp,8
   176b4:	f800283a 	ret

000176b8 <OSTaskDel>:
*********************************************************************************************************
*/

#if OS_TASK_DEL_EN > 0
INT8U  OSTaskDel (INT8U prio)
{
   176b8:	defff404 	addi	sp,sp,-48
   176bc:	dfc00b15 	stw	ra,44(sp)
   176c0:	df000a15 	stw	fp,40(sp)
   176c4:	df000a04 	addi	fp,sp,40
   176c8:	2005883a 	mov	r2,r4
   176cc:	e0bfff05 	stb	r2,-4(fp)
#if (OS_FLAG_EN > 0) && (OS_MAX_FLAGS > 0)
    OS_FLAG_NODE *pnode;
#endif
    OS_TCB       *ptcb;
#if OS_CRITICAL_METHOD == 3                             /* Allocate storage for CPU status register    */
    OS_CPU_SR     cpu_sr = 0;
   176d0:	e03ff615 	stw	zero,-40(fp)
#endif



    if (OSIntNesting > 0) {                             /* See if trying to delete from ISR            */
   176d4:	008000b4 	movhi	r2,2
   176d8:	10948f04 	addi	r2,r2,21052
   176dc:	10800003 	ldbu	r2,0(r2)
   176e0:	10803fcc 	andi	r2,r2,255
   176e4:	10000226 	beq	r2,zero,176f0 <OSTaskDel+0x38>
        return (OS_ERR_TASK_DEL_ISR);
   176e8:	00801004 	movi	r2,64
   176ec:	0000e506 	br	17a84 <OSTaskDel+0x3cc>
    }
    if (prio == OS_TASK_IDLE_PRIO) {                    /* Not allowed to delete idle task             */
   176f0:	e0bfff03 	ldbu	r2,-4(fp)
   176f4:	10800518 	cmpnei	r2,r2,20
   176f8:	1000021e 	bne	r2,zero,17704 <OSTaskDel+0x4c>
        return (OS_ERR_TASK_DEL_IDLE);
   176fc:	00800f84 	movi	r2,62
   17700:	0000e006 	br	17a84 <OSTaskDel+0x3cc>
    }
#if OS_ARG_CHK_EN > 0
    if (prio >= OS_LOWEST_PRIO) {                       /* Task priority valid ?                       */
   17704:	e0bfff03 	ldbu	r2,-4(fp)
   17708:	10800530 	cmpltui	r2,r2,20
   1770c:	1000051e 	bne	r2,zero,17724 <OSTaskDel+0x6c>
        if (prio != OS_PRIO_SELF) {
   17710:	e0bfff03 	ldbu	r2,-4(fp)
   17714:	10803fe0 	cmpeqi	r2,r2,255
   17718:	1000021e 	bne	r2,zero,17724 <OSTaskDel+0x6c>
            return (OS_ERR_PRIO_INVALID);
   1771c:	00800a84 	movi	r2,42
   17720:	0000d806 	br	17a84 <OSTaskDel+0x3cc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   17724:	0005303a 	rdctl	r2,status
   17728:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1772c:	e0fff917 	ldw	r3,-28(fp)
   17730:	00bfff84 	movi	r2,-2
   17734:	1884703a 	and	r2,r3,r2
   17738:	1001703a 	wrctl	status,r2
  
  return context;
   1773c:	e0bff917 	ldw	r2,-28(fp)
        }
    }
#endif

/*$PAGE*/
    OS_ENTER_CRITICAL();
   17740:	e0bff615 	stw	r2,-40(fp)
    if (prio == OS_PRIO_SELF) {                         /* See if requesting to delete self            */
   17744:	e0bfff03 	ldbu	r2,-4(fp)
   17748:	10803fd8 	cmpnei	r2,r2,255
   1774c:	1000051e 	bne	r2,zero,17764 <OSTaskDel+0xac>
        prio = OSTCBCur->OSTCBPrio;                     /* Set priority to delete to current           */
   17750:	008000b4 	movhi	r2,2
   17754:	10949004 	addi	r2,r2,21056
   17758:	10800017 	ldw	r2,0(r2)
   1775c:	10800c83 	ldbu	r2,50(r2)
   17760:	e0bfff05 	stb	r2,-4(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
   17764:	e0ffff03 	ldbu	r3,-4(fp)
   17768:	008000f4 	movhi	r2,3
   1776c:	10a13d04 	addi	r2,r2,-31500
   17770:	18c7883a 	add	r3,r3,r3
   17774:	18c7883a 	add	r3,r3,r3
   17778:	10c5883a 	add	r2,r2,r3
   1777c:	10800017 	ldw	r2,0(r2)
   17780:	e0bff715 	stw	r2,-36(fp)
    if (ptcb == (OS_TCB *)0) {                          /* Task to delete must exist                   */
   17784:	e0bff717 	ldw	r2,-36(fp)
   17788:	1000061e 	bne	r2,zero,177a4 <OSTaskDel+0xec>
   1778c:	e0bff617 	ldw	r2,-40(fp)
   17790:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   17794:	e0bffa17 	ldw	r2,-24(fp)
   17798:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
   1779c:	008010c4 	movi	r2,67
   177a0:	0000b806 	br	17a84 <OSTaskDel+0x3cc>
    }
    if (ptcb == OS_TCB_RESERVED) {                      /* Must not be assigned to Mutex               */
   177a4:	e0bff717 	ldw	r2,-36(fp)
   177a8:	10800058 	cmpnei	r2,r2,1
   177ac:	1000061e 	bne	r2,zero,177c8 <OSTaskDel+0x110>
   177b0:	e0bff617 	ldw	r2,-40(fp)
   177b4:	e0bffb15 	stw	r2,-20(fp)
   177b8:	e0bffb17 	ldw	r2,-20(fp)
   177bc:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_DEL);
   177c0:	00800f44 	movi	r2,61
   177c4:	0000af06 	br	17a84 <OSTaskDel+0x3cc>
    }

    OSRdyTbl[ptcb->OSTCBY] &= ~ptcb->OSTCBBitX;
   177c8:	e0bff717 	ldw	r2,-36(fp)
   177cc:	10800d03 	ldbu	r2,52(r2)
   177d0:	10c03fcc 	andi	r3,r2,255
   177d4:	e0bff717 	ldw	r2,-36(fp)
   177d8:	10800d03 	ldbu	r2,52(r2)
   177dc:	11003fcc 	andi	r4,r2,255
   177e0:	008000b4 	movhi	r2,2
   177e4:	10948d44 	addi	r2,r2,21045
   177e8:	1105883a 	add	r2,r2,r4
   177ec:	10800003 	ldbu	r2,0(r2)
   177f0:	1009883a 	mov	r4,r2
   177f4:	e0bff717 	ldw	r2,-36(fp)
   177f8:	10800d43 	ldbu	r2,53(r2)
   177fc:	0084303a 	nor	r2,zero,r2
   17800:	2084703a 	and	r2,r4,r2
   17804:	1009883a 	mov	r4,r2
   17808:	008000b4 	movhi	r2,2
   1780c:	10948d44 	addi	r2,r2,21045
   17810:	10c5883a 	add	r2,r2,r3
   17814:	11000005 	stb	r4,0(r2)
    if (OSRdyTbl[ptcb->OSTCBY] == 0) {                  /* Make task not ready                         */
   17818:	e0bff717 	ldw	r2,-36(fp)
   1781c:	10800d03 	ldbu	r2,52(r2)
   17820:	10c03fcc 	andi	r3,r2,255
   17824:	008000b4 	movhi	r2,2
   17828:	10948d44 	addi	r2,r2,21045
   1782c:	10c5883a 	add	r2,r2,r3
   17830:	10800003 	ldbu	r2,0(r2)
   17834:	10803fcc 	andi	r2,r2,255
   17838:	10000c1e 	bne	r2,zero,1786c <OSTaskDel+0x1b4>
        OSRdyGrp           &= ~ptcb->OSTCBBitY;
   1783c:	e0bff717 	ldw	r2,-36(fp)
   17840:	10800d83 	ldbu	r2,54(r2)
   17844:	0084303a 	nor	r2,zero,r2
   17848:	1007883a 	mov	r3,r2
   1784c:	008000b4 	movhi	r2,2
   17850:	10948d04 	addi	r2,r2,21044
   17854:	10800003 	ldbu	r2,0(r2)
   17858:	1884703a 	and	r2,r3,r2
   1785c:	1007883a 	mov	r3,r2
   17860:	008000b4 	movhi	r2,2
   17864:	10948d04 	addi	r2,r2,21044
   17868:	10c00005 	stb	r3,0(r2)
    }
    
#if (OS_EVENT_EN)
    if (ptcb->OSTCBEventPtr != (OS_EVENT *)0) {
   1786c:	e0bff717 	ldw	r2,-36(fp)
   17870:	10800717 	ldw	r2,28(r2)
   17874:	10000526 	beq	r2,zero,1788c <OSTaskDel+0x1d4>
        OS_EventTaskRemove(ptcb, ptcb->OSTCBEventPtr);  /* Remove this task from any event   wait list */
   17878:	e0bff717 	ldw	r2,-36(fp)
   1787c:	10800717 	ldw	r2,28(r2)
   17880:	e13ff717 	ldw	r4,-36(fp)
   17884:	100b883a 	mov	r5,r2
   17888:	001228c0 	call	1228c <OS_EventTaskRemove>
    }
#if (OS_EVENT_MULTI_EN > 0)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {   /* Remove this task from any events' wait lists*/
   1788c:	e0bff717 	ldw	r2,-36(fp)
   17890:	10800817 	ldw	r2,32(r2)
   17894:	10000526 	beq	r2,zero,178ac <OSTaskDel+0x1f4>
        OS_EventTaskRemoveMulti(ptcb, ptcb->OSTCBEventMultiPtr);
   17898:	e0bff717 	ldw	r2,-36(fp)
   1789c:	10800817 	ldw	r2,32(r2)
   178a0:	e13ff717 	ldw	r4,-36(fp)
   178a4:	100b883a 	mov	r5,r2
   178a8:	00123400 	call	12340 <OS_EventTaskRemoveMulti>
    }
#endif
#endif

#if (OS_FLAG_EN > 0) && (OS_MAX_FLAGS > 0)
    pnode = ptcb->OSTCBFlagNode;
   178ac:	e0bff717 	ldw	r2,-36(fp)
   178b0:	10800a17 	ldw	r2,40(r2)
   178b4:	e0bff815 	stw	r2,-32(fp)
    if (pnode != (OS_FLAG_NODE *)0) {                   /* If task is waiting on event flag            */
   178b8:	e0bff817 	ldw	r2,-32(fp)
   178bc:	10000226 	beq	r2,zero,178c8 <OSTaskDel+0x210>
        OS_FlagUnlink(pnode);                           /* Remove from wait list                       */
   178c0:	e13ff817 	ldw	r4,-32(fp)
   178c4:	00148940 	call	14894 <OS_FlagUnlink>
    }
#endif

    ptcb->OSTCBDly      = 0;                            /* Prevent OSTimeTick() from updating          */
   178c8:	e0bff717 	ldw	r2,-36(fp)
   178cc:	10000b8d 	sth	zero,46(r2)
    ptcb->OSTCBStat     = OS_STAT_RDY;                  /* Prevent task from being resumed             */
   178d0:	e0bff717 	ldw	r2,-36(fp)
   178d4:	10000c05 	stb	zero,48(r2)
    ptcb->OSTCBStatPend = OS_STAT_PEND_OK;
   178d8:	e0bff717 	ldw	r2,-36(fp)
   178dc:	10000c45 	stb	zero,49(r2)
    if (OSLockNesting < 255u) {                         /* Make sure we don't context switch           */
   178e0:	008000b4 	movhi	r2,2
   178e4:	10948104 	addi	r2,r2,20996
   178e8:	10800003 	ldbu	r2,0(r2)
   178ec:	10803fcc 	andi	r2,r2,255
   178f0:	10803fe0 	cmpeqi	r2,r2,255
   178f4:	1000081e 	bne	r2,zero,17918 <OSTaskDel+0x260>
        OSLockNesting++;
   178f8:	008000b4 	movhi	r2,2
   178fc:	10948104 	addi	r2,r2,20996
   17900:	10800003 	ldbu	r2,0(r2)
   17904:	10800044 	addi	r2,r2,1
   17908:	1007883a 	mov	r3,r2
   1790c:	008000b4 	movhi	r2,2
   17910:	10948104 	addi	r2,r2,20996
   17914:	10c00005 	stb	r3,0(r2)
   17918:	e0bff617 	ldw	r2,-40(fp)
   1791c:	e0bffc15 	stw	r2,-16(fp)
   17920:	e0bffc17 	ldw	r2,-16(fp)
   17924:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();                                 /* Enabling INT. ignores next instruc.         */
    OS_Dummy();                                         /* ... Dummy ensures that INTs will be         */
   17928:	0011e800 	call	11e80 <OS_Dummy>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1792c:	0005303a 	rdctl	r2,status
   17930:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   17934:	e0fffd17 	ldw	r3,-12(fp)
   17938:	00bfff84 	movi	r2,-2
   1793c:	1884703a 	and	r2,r3,r2
   17940:	1001703a 	wrctl	status,r2
  
  return context;
   17944:	e0bffd17 	ldw	r2,-12(fp)
    OS_ENTER_CRITICAL();                                /* ... disabled HERE!                          */
   17948:	e0bff615 	stw	r2,-40(fp)
    if (OSLockNesting > 0) {                            /* Remove context switch lock                  */
   1794c:	008000b4 	movhi	r2,2
   17950:	10948104 	addi	r2,r2,20996
   17954:	10800003 	ldbu	r2,0(r2)
   17958:	10803fcc 	andi	r2,r2,255
   1795c:	10000826 	beq	r2,zero,17980 <OSTaskDel+0x2c8>
        OSLockNesting--;
   17960:	008000b4 	movhi	r2,2
   17964:	10948104 	addi	r2,r2,20996
   17968:	10800003 	ldbu	r2,0(r2)
   1796c:	10bfffc4 	addi	r2,r2,-1
   17970:	1007883a 	mov	r3,r2
   17974:	008000b4 	movhi	r2,2
   17978:	10948104 	addi	r2,r2,20996
   1797c:	10c00005 	stb	r3,0(r2)
    }
    OSTaskDelHook(ptcb);                                /* Call user defined hook                      */
   17980:	e13ff717 	ldw	r4,-36(fp)
   17984:	00204e40 	call	204e4 <OSTaskDelHook>
    OSTaskCtr--;                                        /* One less task being managed                 */
   17988:	008000b4 	movhi	r2,2
   1798c:	10948944 	addi	r2,r2,21029
   17990:	10800003 	ldbu	r2,0(r2)
   17994:	10bfffc4 	addi	r2,r2,-1
   17998:	1007883a 	mov	r3,r2
   1799c:	008000b4 	movhi	r2,2
   179a0:	10948944 	addi	r2,r2,21029
   179a4:	10c00005 	stb	r3,0(r2)
    OSTCBPrioTbl[prio] = (OS_TCB *)0;                   /* Clear old priority entry                    */
   179a8:	e0ffff03 	ldbu	r3,-4(fp)
   179ac:	008000f4 	movhi	r2,3
   179b0:	10a13d04 	addi	r2,r2,-31500
   179b4:	18c7883a 	add	r3,r3,r3
   179b8:	18c7883a 	add	r3,r3,r3
   179bc:	10c5883a 	add	r2,r2,r3
   179c0:	10000015 	stw	zero,0(r2)
    if (ptcb->OSTCBPrev == (OS_TCB *)0) {               /* Remove from TCB chain                       */
   179c4:	e0bff717 	ldw	r2,-36(fp)
   179c8:	10800617 	ldw	r2,24(r2)
   179cc:	1000091e 	bne	r2,zero,179f4 <OSTaskDel+0x33c>
        ptcb->OSTCBNext->OSTCBPrev = (OS_TCB *)0;
   179d0:	e0bff717 	ldw	r2,-36(fp)
   179d4:	10800517 	ldw	r2,20(r2)
   179d8:	10000615 	stw	zero,24(r2)
        OSTCBList                  = ptcb->OSTCBNext;
   179dc:	e0bff717 	ldw	r2,-36(fp)
   179e0:	10c00517 	ldw	r3,20(r2)
   179e4:	008000b4 	movhi	r2,2
   179e8:	10948404 	addi	r2,r2,21008
   179ec:	10c00015 	stw	r3,0(r2)
   179f0:	00000a06 	br	17a1c <OSTaskDel+0x364>
    } else {
        ptcb->OSTCBPrev->OSTCBNext = ptcb->OSTCBNext;
   179f4:	e0bff717 	ldw	r2,-36(fp)
   179f8:	10800617 	ldw	r2,24(r2)
   179fc:	e0fff717 	ldw	r3,-36(fp)
   17a00:	18c00517 	ldw	r3,20(r3)
   17a04:	10c00515 	stw	r3,20(r2)
        ptcb->OSTCBNext->OSTCBPrev = ptcb->OSTCBPrev;
   17a08:	e0bff717 	ldw	r2,-36(fp)
   17a0c:	10800517 	ldw	r2,20(r2)
   17a10:	e0fff717 	ldw	r3,-36(fp)
   17a14:	18c00617 	ldw	r3,24(r3)
   17a18:	10c00615 	stw	r3,24(r2)
    }
    ptcb->OSTCBNext   = OSTCBFreeList;                  /* Return TCB to free TCB list                 */
   17a1c:	008000b4 	movhi	r2,2
   17a20:	10948804 	addi	r2,r2,21024
   17a24:	10c00017 	ldw	r3,0(r2)
   17a28:	e0bff717 	ldw	r2,-36(fp)
   17a2c:	10c00515 	stw	r3,20(r2)
    OSTCBFreeList     = ptcb;
   17a30:	008000b4 	movhi	r2,2
   17a34:	10948804 	addi	r2,r2,21024
   17a38:	e0fff717 	ldw	r3,-36(fp)
   17a3c:	10c00015 	stw	r3,0(r2)
#if OS_TASK_NAME_SIZE > 1
    ptcb->OSTCBTaskName[0] = '?';                       /* Unknown name                                */
   17a40:	e0bff717 	ldw	r2,-36(fp)
   17a44:	00c00fc4 	movi	r3,63
   17a48:	10c01305 	stb	r3,76(r2)
    ptcb->OSTCBTaskName[1] = OS_ASCII_NUL;
   17a4c:	e0bff717 	ldw	r2,-36(fp)
   17a50:	10001345 	stb	zero,77(r2)
   17a54:	e0bff617 	ldw	r2,-40(fp)
   17a58:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   17a5c:	e0bffe17 	ldw	r2,-8(fp)
   17a60:	1001703a 	wrctl	status,r2
#endif
    OS_EXIT_CRITICAL();
    if (OSRunning == OS_TRUE) {
   17a64:	008000b4 	movhi	r2,2
   17a68:	10948144 	addi	r2,r2,20997
   17a6c:	10800003 	ldbu	r2,0(r2)
   17a70:	10803fcc 	andi	r2,r2,255
   17a74:	10800058 	cmpnei	r2,r2,1
   17a78:	1000011e 	bne	r2,zero,17a80 <OSTaskDel+0x3c8>
        OS_Sched();                                     /* Find new highest priority task              */
   17a7c:	00128b40 	call	128b4 <OS_Sched>
    }
    return (OS_ERR_NONE);
   17a80:	0005883a 	mov	r2,zero
}
   17a84:	e037883a 	mov	sp,fp
   17a88:	dfc00117 	ldw	ra,4(sp)
   17a8c:	df000017 	ldw	fp,0(sp)
   17a90:	dec00204 	addi	sp,sp,8
   17a94:	f800283a 	ret

00017a98 <OSTaskDelReq>:
*********************************************************************************************************
*/
/*$PAGE*/
#if OS_TASK_DEL_EN > 0
INT8U  OSTaskDelReq (INT8U prio)
{
   17a98:	defff504 	addi	sp,sp,-44
   17a9c:	df000a15 	stw	fp,40(sp)
   17aa0:	df000a04 	addi	fp,sp,40
   17aa4:	2005883a 	mov	r2,r4
   17aa8:	e0bfff05 	stb	r2,-4(fp)
    INT8U      stat;
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   17aac:	e03ff615 	stw	zero,-40(fp)
#endif



    if (prio == OS_TASK_IDLE_PRIO) {                            /* Not allowed to delete idle task     */
   17ab0:	e0bfff03 	ldbu	r2,-4(fp)
   17ab4:	10800518 	cmpnei	r2,r2,20
   17ab8:	1000021e 	bne	r2,zero,17ac4 <OSTaskDelReq+0x2c>
        return (OS_ERR_TASK_DEL_IDLE);
   17abc:	00800f84 	movi	r2,62
   17ac0:	00004706 	br	17be0 <OSTaskDelReq+0x148>
    }
#if OS_ARG_CHK_EN > 0
    if (prio >= OS_LOWEST_PRIO) {                               /* Task priority valid ?               */
   17ac4:	e0bfff03 	ldbu	r2,-4(fp)
   17ac8:	10800530 	cmpltui	r2,r2,20
   17acc:	1000051e 	bne	r2,zero,17ae4 <OSTaskDelReq+0x4c>
        if (prio != OS_PRIO_SELF) {
   17ad0:	e0bfff03 	ldbu	r2,-4(fp)
   17ad4:	10803fe0 	cmpeqi	r2,r2,255
   17ad8:	1000021e 	bne	r2,zero,17ae4 <OSTaskDelReq+0x4c>
            return (OS_ERR_PRIO_INVALID);
   17adc:	00800a84 	movi	r2,42
   17ae0:	00003f06 	br	17be0 <OSTaskDelReq+0x148>
        }
    }
#endif
    if (prio == OS_PRIO_SELF) {                                 /* See if a task is requesting to ...  */
   17ae4:	e0bfff03 	ldbu	r2,-4(fp)
   17ae8:	10803fd8 	cmpnei	r2,r2,255
   17aec:	1000131e 	bne	r2,zero,17b3c <OSTaskDelReq+0xa4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   17af0:	0005303a 	rdctl	r2,status
   17af4:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   17af8:	e0fff917 	ldw	r3,-28(fp)
   17afc:	00bfff84 	movi	r2,-2
   17b00:	1884703a 	and	r2,r3,r2
   17b04:	1001703a 	wrctl	status,r2
  
  return context;
   17b08:	e0bff917 	ldw	r2,-28(fp)
        OS_ENTER_CRITICAL();                                    /* ... this task to delete itself      */
   17b0c:	e0bff615 	stw	r2,-40(fp)
        stat = OSTCBCur->OSTCBDelReq;                           /* Return request status to caller     */
   17b10:	008000b4 	movhi	r2,2
   17b14:	10949004 	addi	r2,r2,21056
   17b18:	10800017 	ldw	r2,0(r2)
   17b1c:	10800dc3 	ldbu	r2,55(r2)
   17b20:	e0bff705 	stb	r2,-36(fp)
   17b24:	e0bff617 	ldw	r2,-40(fp)
   17b28:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   17b2c:	e0bffa17 	ldw	r2,-24(fp)
   17b30:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (stat);
   17b34:	e0bff703 	ldbu	r2,-36(fp)
   17b38:	00002906 	br	17be0 <OSTaskDelReq+0x148>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   17b3c:	0005303a 	rdctl	r2,status
   17b40:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   17b44:	e0fffb17 	ldw	r3,-20(fp)
   17b48:	00bfff84 	movi	r2,-2
   17b4c:	1884703a 	and	r2,r3,r2
   17b50:	1001703a 	wrctl	status,r2
  
  return context;
   17b54:	e0bffb17 	ldw	r2,-20(fp)
    }
    OS_ENTER_CRITICAL();
   17b58:	e0bff615 	stw	r2,-40(fp)
    ptcb = OSTCBPrioTbl[prio];
   17b5c:	e0ffff03 	ldbu	r3,-4(fp)
   17b60:	008000f4 	movhi	r2,3
   17b64:	10a13d04 	addi	r2,r2,-31500
   17b68:	18c7883a 	add	r3,r3,r3
   17b6c:	18c7883a 	add	r3,r3,r3
   17b70:	10c5883a 	add	r2,r2,r3
   17b74:	10800017 	ldw	r2,0(r2)
   17b78:	e0bff815 	stw	r2,-32(fp)
    if (ptcb == (OS_TCB *)0) {                                  /* Task to delete must exist           */
   17b7c:	e0bff817 	ldw	r2,-32(fp)
   17b80:	1000061e 	bne	r2,zero,17b9c <OSTaskDelReq+0x104>
   17b84:	e0bff617 	ldw	r2,-40(fp)
   17b88:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   17b8c:	e0bffc17 	ldw	r2,-16(fp)
   17b90:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);                         /* Task must already be deleted        */
   17b94:	008010c4 	movi	r2,67
   17b98:	00001106 	br	17be0 <OSTaskDelReq+0x148>
    }
    if (ptcb == OS_TCB_RESERVED) {                              /* Must NOT be assigned to a Mutex     */
   17b9c:	e0bff817 	ldw	r2,-32(fp)
   17ba0:	10800058 	cmpnei	r2,r2,1
   17ba4:	1000061e 	bne	r2,zero,17bc0 <OSTaskDelReq+0x128>
   17ba8:	e0bff617 	ldw	r2,-40(fp)
   17bac:	e0bffd15 	stw	r2,-12(fp)
   17bb0:	e0bffd17 	ldw	r2,-12(fp)
   17bb4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_DEL);
   17bb8:	00800f44 	movi	r2,61
   17bbc:	00000806 	br	17be0 <OSTaskDelReq+0x148>
    }
    ptcb->OSTCBDelReq = OS_ERR_TASK_DEL_REQ;                    /* Set flag indicating task to be DEL. */
   17bc0:	e0bff817 	ldw	r2,-32(fp)
   17bc4:	00c00fc4 	movi	r3,63
   17bc8:	10c00dc5 	stb	r3,55(r2)
   17bcc:	e0bff617 	ldw	r2,-40(fp)
   17bd0:	e0bffe15 	stw	r2,-8(fp)
   17bd4:	e0bffe17 	ldw	r2,-8(fp)
   17bd8:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
   17bdc:	0005883a 	mov	r2,zero
}
   17be0:	e037883a 	mov	sp,fp
   17be4:	df000017 	ldw	fp,0(sp)
   17be8:	dec00104 	addi	sp,sp,4
   17bec:	f800283a 	ret

00017bf0 <OSTaskNameGet>:
*********************************************************************************************************
*/

#if OS_TASK_NAME_SIZE > 1
INT8U  OSTaskNameGet (INT8U prio, INT8U *pname, INT8U *perr)
{
   17bf0:	defff404 	addi	sp,sp,-48
   17bf4:	dfc00b15 	stw	ra,44(sp)
   17bf8:	df000a15 	stw	fp,40(sp)
   17bfc:	df000a04 	addi	fp,sp,40
   17c00:	2005883a 	mov	r2,r4
   17c04:	e17ffe15 	stw	r5,-8(fp)
   17c08:	e1bfff15 	stw	r6,-4(fp)
   17c0c:	e0bffd05 	stb	r2,-12(fp)
    OS_TCB    *ptcb;
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                              /* Allocate storage for CPU status register   */
    OS_CPU_SR  cpu_sr = 0;
   17c10:	e03ff615 	stw	zero,-40(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                            /* Validate 'perr'                            */
   17c14:	e0bfff17 	ldw	r2,-4(fp)
   17c18:	1000021e 	bne	r2,zero,17c24 <OSTaskNameGet+0x34>
        return (0);
   17c1c:	0005883a 	mov	r2,zero
   17c20:	00005806 	br	17d84 <OSTaskNameGet+0x194>
    }
    if (prio > OS_LOWEST_PRIO) {                         /* Task priority valid ?                      */
   17c24:	e0bffd03 	ldbu	r2,-12(fp)
   17c28:	10800570 	cmpltui	r2,r2,21
   17c2c:	1000081e 	bne	r2,zero,17c50 <OSTaskNameGet+0x60>
        if (prio != OS_PRIO_SELF) {
   17c30:	e0bffd03 	ldbu	r2,-12(fp)
   17c34:	10803fe0 	cmpeqi	r2,r2,255
   17c38:	1000051e 	bne	r2,zero,17c50 <OSTaskNameGet+0x60>
            *perr = OS_ERR_PRIO_INVALID;                 /* No                                         */
   17c3c:	e0bfff17 	ldw	r2,-4(fp)
   17c40:	00c00a84 	movi	r3,42
   17c44:	10c00005 	stb	r3,0(r2)
            return (0);
   17c48:	0005883a 	mov	r2,zero
   17c4c:	00004d06 	br	17d84 <OSTaskNameGet+0x194>
        }
    }
    if (pname == (INT8U *)0) {                           /* Is 'pname' a NULL pointer?                 */
   17c50:	e0bffe17 	ldw	r2,-8(fp)
   17c54:	1000051e 	bne	r2,zero,17c6c <OSTaskNameGet+0x7c>
        *perr = OS_ERR_PNAME_NULL;                       /* Yes                                        */
   17c58:	e0bfff17 	ldw	r2,-4(fp)
   17c5c:	00c00304 	movi	r3,12
   17c60:	10c00005 	stb	r3,0(r2)
        return (0);
   17c64:	0005883a 	mov	r2,zero
   17c68:	00004606 	br	17d84 <OSTaskNameGet+0x194>
    }
#endif
    if (OSIntNesting > 0) {                              /* See if trying to call from an ISR          */
   17c6c:	008000b4 	movhi	r2,2
   17c70:	10948f04 	addi	r2,r2,21052
   17c74:	10800003 	ldbu	r2,0(r2)
   17c78:	10803fcc 	andi	r2,r2,255
   17c7c:	10000526 	beq	r2,zero,17c94 <OSTaskNameGet+0xa4>
        *perr = OS_ERR_NAME_GET_ISR;
   17c80:	e0bfff17 	ldw	r2,-4(fp)
   17c84:	00c00444 	movi	r3,17
   17c88:	10c00005 	stb	r3,0(r2)
        return (0);
   17c8c:	0005883a 	mov	r2,zero
   17c90:	00003c06 	br	17d84 <OSTaskNameGet+0x194>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   17c94:	0005303a 	rdctl	r2,status
   17c98:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   17c9c:	e0fff917 	ldw	r3,-28(fp)
   17ca0:	00bfff84 	movi	r2,-2
   17ca4:	1884703a 	and	r2,r3,r2
   17ca8:	1001703a 	wrctl	status,r2
  
  return context;
   17cac:	e0bff917 	ldw	r2,-28(fp)
    }
    OS_ENTER_CRITICAL();
   17cb0:	e0bff615 	stw	r2,-40(fp)
    if (prio == OS_PRIO_SELF) {                          /* See if caller desires it's own name        */
   17cb4:	e0bffd03 	ldbu	r2,-12(fp)
   17cb8:	10803fd8 	cmpnei	r2,r2,255
   17cbc:	1000051e 	bne	r2,zero,17cd4 <OSTaskNameGet+0xe4>
        prio = OSTCBCur->OSTCBPrio;
   17cc0:	008000b4 	movhi	r2,2
   17cc4:	10949004 	addi	r2,r2,21056
   17cc8:	10800017 	ldw	r2,0(r2)
   17ccc:	10800c83 	ldbu	r2,50(r2)
   17cd0:	e0bffd05 	stb	r2,-12(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
   17cd4:	e0fffd03 	ldbu	r3,-12(fp)
   17cd8:	008000f4 	movhi	r2,3
   17cdc:	10a13d04 	addi	r2,r2,-31500
   17ce0:	18c7883a 	add	r3,r3,r3
   17ce4:	18c7883a 	add	r3,r3,r3
   17ce8:	10c5883a 	add	r2,r2,r3
   17cec:	10800017 	ldw	r2,0(r2)
   17cf0:	e0bff715 	stw	r2,-36(fp)
    if (ptcb == (OS_TCB *)0) {                           /* Does task exist?                           */
   17cf4:	e0bff717 	ldw	r2,-36(fp)
   17cf8:	1000091e 	bne	r2,zero,17d20 <OSTaskNameGet+0x130>
   17cfc:	e0bff617 	ldw	r2,-40(fp)
   17d00:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   17d04:	e0bffa17 	ldw	r2,-24(fp)
   17d08:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                              /* No                                         */
        *perr = OS_ERR_TASK_NOT_EXIST;
   17d0c:	e0bfff17 	ldw	r2,-4(fp)
   17d10:	00c010c4 	movi	r3,67
   17d14:	10c00005 	stb	r3,0(r2)
        return (0);
   17d18:	0005883a 	mov	r2,zero
   17d1c:	00001906 	br	17d84 <OSTaskNameGet+0x194>
    }
    if (ptcb == OS_TCB_RESERVED) {                       /* Task assigned to a Mutex?                  */
   17d20:	e0bff717 	ldw	r2,-36(fp)
   17d24:	10800058 	cmpnei	r2,r2,1
   17d28:	1000091e 	bne	r2,zero,17d50 <OSTaskNameGet+0x160>
   17d2c:	e0bff617 	ldw	r2,-40(fp)
   17d30:	e0bffb15 	stw	r2,-20(fp)
   17d34:	e0bffb17 	ldw	r2,-20(fp)
   17d38:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                              /* Yes                                        */
        *perr = OS_ERR_TASK_NOT_EXIST;
   17d3c:	e0bfff17 	ldw	r2,-4(fp)
   17d40:	00c010c4 	movi	r3,67
   17d44:	10c00005 	stb	r3,0(r2)
        return (0);
   17d48:	0005883a 	mov	r2,zero
   17d4c:	00000d06 	br	17d84 <OSTaskNameGet+0x194>
    }
    len   = OS_StrCopy(pname, ptcb->OSTCBTaskName);      /* Yes, copy name from TCB                    */
   17d50:	e0bff717 	ldw	r2,-36(fp)
   17d54:	10801304 	addi	r2,r2,76
   17d58:	e13ffe17 	ldw	r4,-8(fp)
   17d5c:	100b883a 	mov	r5,r2
   17d60:	00129f00 	call	129f0 <OS_StrCopy>
   17d64:	e0bff805 	stb	r2,-32(fp)
   17d68:	e0bff617 	ldw	r2,-40(fp)
   17d6c:	e0bffc15 	stw	r2,-16(fp)
   17d70:	e0bffc17 	ldw	r2,-16(fp)
   17d74:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
   17d78:	e0bfff17 	ldw	r2,-4(fp)
   17d7c:	10000005 	stb	zero,0(r2)
    return (len);
   17d80:	e0bff803 	ldbu	r2,-32(fp)
}
   17d84:	e037883a 	mov	sp,fp
   17d88:	dfc00117 	ldw	ra,4(sp)
   17d8c:	df000017 	ldw	fp,0(sp)
   17d90:	dec00204 	addi	sp,sp,8
   17d94:	f800283a 	ret

00017d98 <OSTaskNameSet>:
* Returns    : None
*********************************************************************************************************
*/
#if OS_TASK_NAME_SIZE > 1
void  OSTaskNameSet (INT8U prio, INT8U *pname, INT8U *perr)
{
   17d98:	defff304 	addi	sp,sp,-52
   17d9c:	dfc00c15 	stw	ra,48(sp)
   17da0:	df000b15 	stw	fp,44(sp)
   17da4:	df000b04 	addi	fp,sp,44
   17da8:	2005883a 	mov	r2,r4
   17dac:	e17ffe15 	stw	r5,-8(fp)
   17db0:	e1bfff15 	stw	r6,-4(fp)
   17db4:	e0bffd05 	stb	r2,-12(fp)
    INT8U      len;
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                          /* Allocate storage for CPU status register       */
    OS_CPU_SR  cpu_sr = 0;
   17db8:	e03ff515 	stw	zero,-44(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                        /* Validate 'perr'                                */
   17dbc:	e0bfff17 	ldw	r2,-4(fp)
   17dc0:	1000011e 	bne	r2,zero,17dc8 <OSTaskNameSet+0x30>
        return;
   17dc4:	00005f06 	br	17f44 <OSTaskNameSet+0x1ac>
    }
    if (prio > OS_LOWEST_PRIO) {                     /* Task priority valid ?                          */
   17dc8:	e0bffd03 	ldbu	r2,-12(fp)
   17dcc:	10800570 	cmpltui	r2,r2,21
   17dd0:	1000071e 	bne	r2,zero,17df0 <OSTaskNameSet+0x58>
        if (prio != OS_PRIO_SELF) {
   17dd4:	e0bffd03 	ldbu	r2,-12(fp)
   17dd8:	10803fe0 	cmpeqi	r2,r2,255
   17ddc:	1000041e 	bne	r2,zero,17df0 <OSTaskNameSet+0x58>
            *perr = OS_ERR_PRIO_INVALID;             /* No                                             */
   17de0:	e0bfff17 	ldw	r2,-4(fp)
   17de4:	00c00a84 	movi	r3,42
   17de8:	10c00005 	stb	r3,0(r2)
            return;
   17dec:	00005506 	br	17f44 <OSTaskNameSet+0x1ac>
        }
    }
    if (pname == (INT8U *)0) {                       /* Is 'pname' a NULL pointer?                     */
   17df0:	e0bffe17 	ldw	r2,-8(fp)
   17df4:	1000041e 	bne	r2,zero,17e08 <OSTaskNameSet+0x70>
        *perr = OS_ERR_PNAME_NULL;                   /* Yes                                            */
   17df8:	e0bfff17 	ldw	r2,-4(fp)
   17dfc:	00c00304 	movi	r3,12
   17e00:	10c00005 	stb	r3,0(r2)
        return;
   17e04:	00004f06 	br	17f44 <OSTaskNameSet+0x1ac>
    }
#endif
    if (OSIntNesting > 0) {                          /* See if trying to call from an ISR              */
   17e08:	008000b4 	movhi	r2,2
   17e0c:	10948f04 	addi	r2,r2,21052
   17e10:	10800003 	ldbu	r2,0(r2)
   17e14:	10803fcc 	andi	r2,r2,255
   17e18:	10000426 	beq	r2,zero,17e2c <OSTaskNameSet+0x94>
        *perr = OS_ERR_NAME_SET_ISR;
   17e1c:	e0bfff17 	ldw	r2,-4(fp)
   17e20:	00c00484 	movi	r3,18
   17e24:	10c00005 	stb	r3,0(r2)
        return;
   17e28:	00004606 	br	17f44 <OSTaskNameSet+0x1ac>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   17e2c:	0005303a 	rdctl	r2,status
   17e30:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   17e34:	e0fff817 	ldw	r3,-32(fp)
   17e38:	00bfff84 	movi	r2,-2
   17e3c:	1884703a 	and	r2,r3,r2
   17e40:	1001703a 	wrctl	status,r2
  
  return context;
   17e44:	e0bff817 	ldw	r2,-32(fp)
    }
    OS_ENTER_CRITICAL();
   17e48:	e0bff515 	stw	r2,-44(fp)
    if (prio == OS_PRIO_SELF) {                      /* See if caller desires to set it's own name     */
   17e4c:	e0bffd03 	ldbu	r2,-12(fp)
   17e50:	10803fd8 	cmpnei	r2,r2,255
   17e54:	1000051e 	bne	r2,zero,17e6c <OSTaskNameSet+0xd4>
        prio = OSTCBCur->OSTCBPrio;
   17e58:	008000b4 	movhi	r2,2
   17e5c:	10949004 	addi	r2,r2,21056
   17e60:	10800017 	ldw	r2,0(r2)
   17e64:	10800c83 	ldbu	r2,50(r2)
   17e68:	e0bffd05 	stb	r2,-12(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
   17e6c:	e0fffd03 	ldbu	r3,-12(fp)
   17e70:	008000f4 	movhi	r2,3
   17e74:	10a13d04 	addi	r2,r2,-31500
   17e78:	18c7883a 	add	r3,r3,r3
   17e7c:	18c7883a 	add	r3,r3,r3
   17e80:	10c5883a 	add	r2,r2,r3
   17e84:	10800017 	ldw	r2,0(r2)
   17e88:	e0bff615 	stw	r2,-40(fp)
    if (ptcb == (OS_TCB *)0) {                       /* Does task exist?                               */
   17e8c:	e0bff617 	ldw	r2,-40(fp)
   17e90:	1000081e 	bne	r2,zero,17eb4 <OSTaskNameSet+0x11c>
   17e94:	e0bff517 	ldw	r2,-44(fp)
   17e98:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   17e9c:	e0bff917 	ldw	r2,-28(fp)
   17ea0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                          /* No                                             */
        *perr = OS_ERR_TASK_NOT_EXIST;
   17ea4:	e0bfff17 	ldw	r2,-4(fp)
   17ea8:	00c010c4 	movi	r3,67
   17eac:	10c00005 	stb	r3,0(r2)
        return;
   17eb0:	00002406 	br	17f44 <OSTaskNameSet+0x1ac>
    }
    if (ptcb == OS_TCB_RESERVED) {                   /* Task assigned to a Mutex?                      */
   17eb4:	e0bff617 	ldw	r2,-40(fp)
   17eb8:	10800058 	cmpnei	r2,r2,1
   17ebc:	1000081e 	bne	r2,zero,17ee0 <OSTaskNameSet+0x148>
   17ec0:	e0bff517 	ldw	r2,-44(fp)
   17ec4:	e0bffa15 	stw	r2,-24(fp)
   17ec8:	e0bffa17 	ldw	r2,-24(fp)
   17ecc:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                          /* Yes                                            */
        *perr = OS_ERR_TASK_NOT_EXIST;
   17ed0:	e0bfff17 	ldw	r2,-4(fp)
   17ed4:	00c010c4 	movi	r3,67
   17ed8:	10c00005 	stb	r3,0(r2)
        return;
   17edc:	00001906 	br	17f44 <OSTaskNameSet+0x1ac>
    }
    len = OS_StrLen(pname);                          /* Yes, Can we fit the string in the TCB?         */
   17ee0:	e13ffe17 	ldw	r4,-8(fp)
   17ee4:	0012a640 	call	12a64 <OS_StrLen>
   17ee8:	e0bff705 	stb	r2,-36(fp)
    if (len > (OS_TASK_NAME_SIZE - 1)) {             /*      No                                        */
   17eec:	e0bff703 	ldbu	r2,-36(fp)
   17ef0:	10800830 	cmpltui	r2,r2,32
   17ef4:	1000081e 	bne	r2,zero,17f18 <OSTaskNameSet+0x180>
   17ef8:	e0bff517 	ldw	r2,-44(fp)
   17efc:	e0bffb15 	stw	r2,-20(fp)
   17f00:	e0bffb17 	ldw	r2,-20(fp)
   17f04:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_TASK_NAME_TOO_LONG;
   17f08:	e0bfff17 	ldw	r2,-4(fp)
   17f0c:	00c01044 	movi	r3,65
   17f10:	10c00005 	stb	r3,0(r2)
        return;
   17f14:	00000b06 	br	17f44 <OSTaskNameSet+0x1ac>
    }
    (void)OS_StrCopy(ptcb->OSTCBTaskName, pname);    /*      Yes, copy to TCB                          */
   17f18:	e0bff617 	ldw	r2,-40(fp)
   17f1c:	10801304 	addi	r2,r2,76
   17f20:	1009883a 	mov	r4,r2
   17f24:	e17ffe17 	ldw	r5,-8(fp)
   17f28:	00129f00 	call	129f0 <OS_StrCopy>
   17f2c:	e0bff517 	ldw	r2,-44(fp)
   17f30:	e0bffc15 	stw	r2,-16(fp)
   17f34:	e0bffc17 	ldw	r2,-16(fp)
   17f38:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
   17f3c:	e0bfff17 	ldw	r2,-4(fp)
   17f40:	10000005 	stb	zero,0(r2)
}
   17f44:	e037883a 	mov	sp,fp
   17f48:	dfc00117 	ldw	ra,4(sp)
   17f4c:	df000017 	ldw	fp,0(sp)
   17f50:	dec00204 	addi	sp,sp,8
   17f54:	f800283a 	ret

00017f58 <OSTaskResume>:
*********************************************************************************************************
*/

#if OS_TASK_SUSPEND_EN > 0
INT8U  OSTaskResume (INT8U prio)
{
   17f58:	defff404 	addi	sp,sp,-48
   17f5c:	dfc00b15 	stw	ra,44(sp)
   17f60:	df000a15 	stw	fp,40(sp)
   17f64:	df000a04 	addi	fp,sp,40
   17f68:	2005883a 	mov	r2,r4
   17f6c:	e0bfff05 	stb	r2,-4(fp)
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                                   /* Storage for CPU status register       */
    OS_CPU_SR  cpu_sr = 0;
   17f70:	e03ff615 	stw	zero,-40(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio >= OS_LOWEST_PRIO) {                             /* Make sure task priority is valid      */
   17f74:	e0bfff03 	ldbu	r2,-4(fp)
   17f78:	10800530 	cmpltui	r2,r2,20
   17f7c:	1000021e 	bne	r2,zero,17f88 <OSTaskResume+0x30>
        return (OS_ERR_PRIO_INVALID);
   17f80:	00800a84 	movi	r2,42
   17f84:	00006d06 	br	1813c <OSTaskResume+0x1e4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   17f88:	0005303a 	rdctl	r2,status
   17f8c:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   17f90:	e0fff817 	ldw	r3,-32(fp)
   17f94:	00bfff84 	movi	r2,-2
   17f98:	1884703a 	and	r2,r3,r2
   17f9c:	1001703a 	wrctl	status,r2
  
  return context;
   17fa0:	e0bff817 	ldw	r2,-32(fp)
    }
#endif
    OS_ENTER_CRITICAL();
   17fa4:	e0bff615 	stw	r2,-40(fp)
    ptcb = OSTCBPrioTbl[prio];
   17fa8:	e0ffff03 	ldbu	r3,-4(fp)
   17fac:	008000f4 	movhi	r2,3
   17fb0:	10a13d04 	addi	r2,r2,-31500
   17fb4:	18c7883a 	add	r3,r3,r3
   17fb8:	18c7883a 	add	r3,r3,r3
   17fbc:	10c5883a 	add	r2,r2,r3
   17fc0:	10800017 	ldw	r2,0(r2)
   17fc4:	e0bff715 	stw	r2,-36(fp)
    if (ptcb == (OS_TCB *)0) {                                /* Task to suspend must exist            */
   17fc8:	e0bff717 	ldw	r2,-36(fp)
   17fcc:	1000061e 	bne	r2,zero,17fe8 <OSTaskResume+0x90>
   17fd0:	e0bff617 	ldw	r2,-40(fp)
   17fd4:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   17fd8:	e0bff917 	ldw	r2,-28(fp)
   17fdc:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_RESUME_PRIO);
   17fe0:	00801184 	movi	r2,70
   17fe4:	00005506 	br	1813c <OSTaskResume+0x1e4>
    }
    if (ptcb == OS_TCB_RESERVED) {                            /* See if assigned to Mutex              */
   17fe8:	e0bff717 	ldw	r2,-36(fp)
   17fec:	10800058 	cmpnei	r2,r2,1
   17ff0:	1000061e 	bne	r2,zero,1800c <OSTaskResume+0xb4>
   17ff4:	e0bff617 	ldw	r2,-40(fp)
   17ff8:	e0bffa15 	stw	r2,-24(fp)
   17ffc:	e0bffa17 	ldw	r2,-24(fp)
   18000:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
   18004:	008010c4 	movi	r2,67
   18008:	00004c06 	br	1813c <OSTaskResume+0x1e4>
    }
    if ((ptcb->OSTCBStat & OS_STAT_SUSPEND) != OS_STAT_RDY) { /* Task must be suspended                */
   1800c:	e0bff717 	ldw	r2,-36(fp)
   18010:	10800c03 	ldbu	r2,48(r2)
   18014:	10803fcc 	andi	r2,r2,255
   18018:	1080020c 	andi	r2,r2,8
   1801c:	10004226 	beq	r2,zero,18128 <OSTaskResume+0x1d0>
        ptcb->OSTCBStat &= ~(INT8U)OS_STAT_SUSPEND;           /* Remove suspension                     */
   18020:	e0bff717 	ldw	r2,-36(fp)
   18024:	10c00c03 	ldbu	r3,48(r2)
   18028:	00bffdc4 	movi	r2,-9
   1802c:	1884703a 	and	r2,r3,r2
   18030:	1007883a 	mov	r3,r2
   18034:	e0bff717 	ldw	r2,-36(fp)
   18038:	10c00c05 	stb	r3,48(r2)
        if (ptcb->OSTCBStat == OS_STAT_RDY) {                 /* See if task is now ready              */
   1803c:	e0bff717 	ldw	r2,-36(fp)
   18040:	10800c03 	ldbu	r2,48(r2)
   18044:	10803fcc 	andi	r2,r2,255
   18048:	1000311e 	bne	r2,zero,18110 <OSTaskResume+0x1b8>
            if (ptcb->OSTCBDly == 0) {
   1804c:	e0bff717 	ldw	r2,-36(fp)
   18050:	10800b8b 	ldhu	r2,46(r2)
   18054:	10bfffcc 	andi	r2,r2,65535
   18058:	1000281e 	bne	r2,zero,180fc <OSTaskResume+0x1a4>
                OSRdyGrp               |= ptcb->OSTCBBitY;    /* Yes, Make task ready to run           */
   1805c:	e0bff717 	ldw	r2,-36(fp)
   18060:	10c00d83 	ldbu	r3,54(r2)
   18064:	008000b4 	movhi	r2,2
   18068:	10948d04 	addi	r2,r2,21044
   1806c:	10800003 	ldbu	r2,0(r2)
   18070:	1884b03a 	or	r2,r3,r2
   18074:	1007883a 	mov	r3,r2
   18078:	008000b4 	movhi	r2,2
   1807c:	10948d04 	addi	r2,r2,21044
   18080:	10c00005 	stb	r3,0(r2)
                OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
   18084:	e0bff717 	ldw	r2,-36(fp)
   18088:	10800d03 	ldbu	r2,52(r2)
   1808c:	10c03fcc 	andi	r3,r2,255
   18090:	e0bff717 	ldw	r2,-36(fp)
   18094:	10800d03 	ldbu	r2,52(r2)
   18098:	11003fcc 	andi	r4,r2,255
   1809c:	008000b4 	movhi	r2,2
   180a0:	10948d44 	addi	r2,r2,21045
   180a4:	1105883a 	add	r2,r2,r4
   180a8:	11000003 	ldbu	r4,0(r2)
   180ac:	e0bff717 	ldw	r2,-36(fp)
   180b0:	10800d43 	ldbu	r2,53(r2)
   180b4:	2084b03a 	or	r2,r4,r2
   180b8:	1009883a 	mov	r4,r2
   180bc:	008000b4 	movhi	r2,2
   180c0:	10948d44 	addi	r2,r2,21045
   180c4:	10c5883a 	add	r2,r2,r3
   180c8:	11000005 	stb	r4,0(r2)
   180cc:	e0bff617 	ldw	r2,-40(fp)
   180d0:	e0bffb15 	stw	r2,-20(fp)
   180d4:	e0bffb17 	ldw	r2,-20(fp)
   180d8:	1001703a 	wrctl	status,r2
                OS_EXIT_CRITICAL();
                if (OSRunning == OS_TRUE) {
   180dc:	008000b4 	movhi	r2,2
   180e0:	10948144 	addi	r2,r2,20997
   180e4:	10800003 	ldbu	r2,0(r2)
   180e8:	10803fcc 	andi	r2,r2,255
   180ec:	10800058 	cmpnei	r2,r2,1
   180f0:	10000b1e 	bne	r2,zero,18120 <OSTaskResume+0x1c8>
                    OS_Sched();                               /* Find new highest priority task        */
   180f4:	00128b40 	call	128b4 <OS_Sched>
   180f8:	00000906 	br	18120 <OSTaskResume+0x1c8>
   180fc:	e0bff617 	ldw	r2,-40(fp)
   18100:	e0bffc15 	stw	r2,-16(fp)
   18104:	e0bffc17 	ldw	r2,-16(fp)
   18108:	1001703a 	wrctl	status,r2
   1810c:	00000406 	br	18120 <OSTaskResume+0x1c8>
   18110:	e0bff617 	ldw	r2,-40(fp)
   18114:	e0bffd15 	stw	r2,-12(fp)
   18118:	e0bffd17 	ldw	r2,-12(fp)
   1811c:	1001703a 	wrctl	status,r2
                OS_EXIT_CRITICAL();
            }
        } else {                                              /* Must be pending on event              */
            OS_EXIT_CRITICAL();
        }
        return (OS_ERR_NONE);
   18120:	0005883a 	mov	r2,zero
   18124:	00000506 	br	1813c <OSTaskResume+0x1e4>
   18128:	e0bff617 	ldw	r2,-40(fp)
   1812c:	e0bffe15 	stw	r2,-8(fp)
   18130:	e0bffe17 	ldw	r2,-8(fp)
   18134:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_TASK_NOT_SUSPENDED);
   18138:	00801104 	movi	r2,68
}
   1813c:	e037883a 	mov	sp,fp
   18140:	dfc00117 	ldw	ra,4(sp)
   18144:	df000017 	ldw	fp,0(sp)
   18148:	dec00204 	addi	sp,sp,8
   1814c:	f800283a 	ret

00018150 <OSTaskStkChk>:
*              OS_ERR_PDATA_NULL      if 'p_stk_data' is a NULL pointer
*********************************************************************************************************
*/
#if (OS_TASK_STAT_STK_CHK_EN > 0) && (OS_TASK_CREATE_EXT_EN > 0)
INT8U  OSTaskStkChk (INT8U prio, OS_STK_DATA *p_stk_data)
{
   18150:	defff304 	addi	sp,sp,-52
   18154:	df000c15 	stw	fp,48(sp)
   18158:	df000c04 	addi	fp,sp,48
   1815c:	2005883a 	mov	r2,r4
   18160:	e17fff15 	stw	r5,-4(fp)
   18164:	e0bffe05 	stb	r2,-8(fp)
    OS_TCB    *ptcb;
    OS_STK    *pchk;
    INT32U     nfree;
    INT32U     size;
#if OS_CRITICAL_METHOD == 3                            /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
   18168:	e03ff615 	stw	zero,-40(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio > OS_LOWEST_PRIO) {                       /* Make sure task priority is valid             */
   1816c:	e0bffe03 	ldbu	r2,-8(fp)
   18170:	10800570 	cmpltui	r2,r2,21
   18174:	1000051e 	bne	r2,zero,1818c <OSTaskStkChk+0x3c>
        if (prio != OS_PRIO_SELF) {
   18178:	e0bffe03 	ldbu	r2,-8(fp)
   1817c:	10803fe0 	cmpeqi	r2,r2,255
   18180:	1000021e 	bne	r2,zero,1818c <OSTaskStkChk+0x3c>
            return (OS_ERR_PRIO_INVALID);
   18184:	00800a84 	movi	r2,42
   18188:	00005f06 	br	18308 <OSTaskStkChk+0x1b8>
        }
    }
    if (p_stk_data == (OS_STK_DATA *)0) {              /* Validate 'p_stk_data'                        */
   1818c:	e0bfff17 	ldw	r2,-4(fp)
   18190:	1000021e 	bne	r2,zero,1819c <OSTaskStkChk+0x4c>
        return (OS_ERR_PDATA_NULL);
   18194:	00800244 	movi	r2,9
   18198:	00005b06 	br	18308 <OSTaskStkChk+0x1b8>
    }
#endif
    p_stk_data->OSFree = 0;                            /* Assume failure, set to 0 size                */
   1819c:	e0bfff17 	ldw	r2,-4(fp)
   181a0:	10000015 	stw	zero,0(r2)
    p_stk_data->OSUsed = 0;
   181a4:	e0bfff17 	ldw	r2,-4(fp)
   181a8:	10000115 	stw	zero,4(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   181ac:	0005303a 	rdctl	r2,status
   181b0:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   181b4:	e0fff917 	ldw	r3,-28(fp)
   181b8:	00bfff84 	movi	r2,-2
   181bc:	1884703a 	and	r2,r3,r2
   181c0:	1001703a 	wrctl	status,r2
  
  return context;
   181c4:	e0bff917 	ldw	r2,-28(fp)
    OS_ENTER_CRITICAL();
   181c8:	e0bff615 	stw	r2,-40(fp)
    if (prio == OS_PRIO_SELF) {                        /* See if check for SELF                        */
   181cc:	e0bffe03 	ldbu	r2,-8(fp)
   181d0:	10803fd8 	cmpnei	r2,r2,255
   181d4:	1000051e 	bne	r2,zero,181ec <OSTaskStkChk+0x9c>
        prio = OSTCBCur->OSTCBPrio;
   181d8:	008000b4 	movhi	r2,2
   181dc:	10949004 	addi	r2,r2,21056
   181e0:	10800017 	ldw	r2,0(r2)
   181e4:	10800c83 	ldbu	r2,50(r2)
   181e8:	e0bffe05 	stb	r2,-8(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
   181ec:	e0fffe03 	ldbu	r3,-8(fp)
   181f0:	008000f4 	movhi	r2,3
   181f4:	10a13d04 	addi	r2,r2,-31500
   181f8:	18c7883a 	add	r3,r3,r3
   181fc:	18c7883a 	add	r3,r3,r3
   18200:	10c5883a 	add	r2,r2,r3
   18204:	10800017 	ldw	r2,0(r2)
   18208:	e0bff715 	stw	r2,-36(fp)
    if (ptcb == (OS_TCB *)0) {                         /* Make sure task exist                         */
   1820c:	e0bff717 	ldw	r2,-36(fp)
   18210:	1000061e 	bne	r2,zero,1822c <OSTaskStkChk+0xdc>
   18214:	e0bff617 	ldw	r2,-40(fp)
   18218:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1821c:	e0bffa17 	ldw	r2,-24(fp)
   18220:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
   18224:	008010c4 	movi	r2,67
   18228:	00003706 	br	18308 <OSTaskStkChk+0x1b8>
    }
    if (ptcb == OS_TCB_RESERVED) {
   1822c:	e0bff717 	ldw	r2,-36(fp)
   18230:	10800058 	cmpnei	r2,r2,1
   18234:	1000061e 	bne	r2,zero,18250 <OSTaskStkChk+0x100>
   18238:	e0bff617 	ldw	r2,-40(fp)
   1823c:	e0bffb15 	stw	r2,-20(fp)
   18240:	e0bffb17 	ldw	r2,-20(fp)
   18244:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
   18248:	008010c4 	movi	r2,67
   1824c:	00002e06 	br	18308 <OSTaskStkChk+0x1b8>
    }
    if ((ptcb->OSTCBOpt & OS_TASK_OPT_STK_CHK) == 0) { /* Make sure stack checking option is set       */
   18250:	e0bff717 	ldw	r2,-36(fp)
   18254:	1080040b 	ldhu	r2,16(r2)
   18258:	10bfffcc 	andi	r2,r2,65535
   1825c:	1080004c 	andi	r2,r2,1
   18260:	1000061e 	bne	r2,zero,1827c <OSTaskStkChk+0x12c>
   18264:	e0bff617 	ldw	r2,-40(fp)
   18268:	e0bffc15 	stw	r2,-16(fp)
   1826c:	e0bffc17 	ldw	r2,-16(fp)
   18270:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_OPT);
   18274:	00801144 	movi	r2,69
   18278:	00002306 	br	18308 <OSTaskStkChk+0x1b8>
    }
    nfree = 0;
   1827c:	e03ff515 	stw	zero,-44(fp)
    size  = ptcb->OSTCBStkSize;
   18280:	e0bff717 	ldw	r2,-36(fp)
   18284:	10800317 	ldw	r2,12(r2)
   18288:	e0bff815 	stw	r2,-32(fp)
    pchk  = ptcb->OSTCBStkBottom;
   1828c:	e0bff717 	ldw	r2,-36(fp)
   18290:	10800217 	ldw	r2,8(r2)
   18294:	e0bff415 	stw	r2,-48(fp)
   18298:	e0bff617 	ldw	r2,-40(fp)
   1829c:	e0bffd15 	stw	r2,-12(fp)
   182a0:	e0bffd17 	ldw	r2,-12(fp)
   182a4:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
#if OS_STK_GROWTH == 1
    while (*pchk++ == (OS_STK)0) {                    /* Compute the number of zero entries on the stk */
   182a8:	00000306 	br	182b8 <OSTaskStkChk+0x168>
        nfree++;
   182ac:	e0bff517 	ldw	r2,-44(fp)
   182b0:	10800044 	addi	r2,r2,1
   182b4:	e0bff515 	stw	r2,-44(fp)
    nfree = 0;
    size  = ptcb->OSTCBStkSize;
    pchk  = ptcb->OSTCBStkBottom;
    OS_EXIT_CRITICAL();
#if OS_STK_GROWTH == 1
    while (*pchk++ == (OS_STK)0) {                    /* Compute the number of zero entries on the stk */
   182b8:	e0bff417 	ldw	r2,-48(fp)
   182bc:	10c00104 	addi	r3,r2,4
   182c0:	e0fff415 	stw	r3,-48(fp)
   182c4:	10800017 	ldw	r2,0(r2)
   182c8:	103ff826 	beq	r2,zero,182ac <__alt_mem_Flash_flash_data+0xf40182ac>
#else
    while (*pchk-- == (OS_STK)0) {
        nfree++;
    }
#endif
    p_stk_data->OSFree = nfree * sizeof(OS_STK);          /* Compute number of free bytes on the stack */
   182cc:	e0bff517 	ldw	r2,-44(fp)
   182d0:	1085883a 	add	r2,r2,r2
   182d4:	1085883a 	add	r2,r2,r2
   182d8:	1007883a 	mov	r3,r2
   182dc:	e0bfff17 	ldw	r2,-4(fp)
   182e0:	10c00015 	stw	r3,0(r2)
    p_stk_data->OSUsed = (size - nfree) * sizeof(OS_STK); /* Compute number of bytes used on the stack */
   182e4:	e0fff817 	ldw	r3,-32(fp)
   182e8:	e0bff517 	ldw	r2,-44(fp)
   182ec:	1885c83a 	sub	r2,r3,r2
   182f0:	1085883a 	add	r2,r2,r2
   182f4:	1085883a 	add	r2,r2,r2
   182f8:	1007883a 	mov	r3,r2
   182fc:	e0bfff17 	ldw	r2,-4(fp)
   18300:	10c00115 	stw	r3,4(r2)
    return (OS_ERR_NONE);
   18304:	0005883a 	mov	r2,zero
}
   18308:	e037883a 	mov	sp,fp
   1830c:	df000017 	ldw	fp,0(sp)
   18310:	dec00104 	addi	sp,sp,4
   18314:	f800283a 	ret

00018318 <OSTaskSuspend>:
*********************************************************************************************************
*/

#if OS_TASK_SUSPEND_EN > 0
INT8U  OSTaskSuspend (INT8U prio)
{
   18318:	defff504 	addi	sp,sp,-44
   1831c:	dfc00a15 	stw	ra,40(sp)
   18320:	df000915 	stw	fp,36(sp)
   18324:	df000904 	addi	fp,sp,36
   18328:	2005883a 	mov	r2,r4
   1832c:	e0bfff05 	stb	r2,-4(fp)
    BOOLEAN    self;
    OS_TCB    *ptcb;
    INT8U      y;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   18330:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio == OS_TASK_IDLE_PRIO) {                            /* Not allowed to suspend idle task    */
   18334:	e0bfff03 	ldbu	r2,-4(fp)
   18338:	10800518 	cmpnei	r2,r2,20
   1833c:	1000021e 	bne	r2,zero,18348 <OSTaskSuspend+0x30>
        return (OS_ERR_TASK_SUSPEND_IDLE);
   18340:	008011c4 	movi	r2,71
   18344:	00007406 	br	18518 <OSTaskSuspend+0x200>
    }
    if (prio >= OS_LOWEST_PRIO) {                               /* Task priority valid ?               */
   18348:	e0bfff03 	ldbu	r2,-4(fp)
   1834c:	10800530 	cmpltui	r2,r2,20
   18350:	1000051e 	bne	r2,zero,18368 <OSTaskSuspend+0x50>
        if (prio != OS_PRIO_SELF) {
   18354:	e0bfff03 	ldbu	r2,-4(fp)
   18358:	10803fe0 	cmpeqi	r2,r2,255
   1835c:	1000021e 	bne	r2,zero,18368 <OSTaskSuspend+0x50>
            return (OS_ERR_PRIO_INVALID);
   18360:	00800a84 	movi	r2,42
   18364:	00006c06 	br	18518 <OSTaskSuspend+0x200>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   18368:	0005303a 	rdctl	r2,status
   1836c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   18370:	e0fffb17 	ldw	r3,-20(fp)
   18374:	00bfff84 	movi	r2,-2
   18378:	1884703a 	and	r2,r3,r2
   1837c:	1001703a 	wrctl	status,r2
  
  return context;
   18380:	e0bffb17 	ldw	r2,-20(fp)
        }
    }
#endif
    OS_ENTER_CRITICAL();
   18384:	e0bff815 	stw	r2,-32(fp)
    if (prio == OS_PRIO_SELF) {                                 /* See if suspend SELF                 */
   18388:	e0bfff03 	ldbu	r2,-4(fp)
   1838c:	10803fd8 	cmpnei	r2,r2,255
   18390:	1000081e 	bne	r2,zero,183b4 <OSTaskSuspend+0x9c>
        prio = OSTCBCur->OSTCBPrio;
   18394:	008000b4 	movhi	r2,2
   18398:	10949004 	addi	r2,r2,21056
   1839c:	10800017 	ldw	r2,0(r2)
   183a0:	10800c83 	ldbu	r2,50(r2)
   183a4:	e0bfff05 	stb	r2,-4(fp)
        self = OS_TRUE;
   183a8:	00800044 	movi	r2,1
   183ac:	e0bff705 	stb	r2,-36(fp)
   183b0:	00000b06 	br	183e0 <OSTaskSuspend+0xc8>
    } else if (prio == OSTCBCur->OSTCBPrio) {                   /* See if suspending self              */
   183b4:	008000b4 	movhi	r2,2
   183b8:	10949004 	addi	r2,r2,21056
   183bc:	10800017 	ldw	r2,0(r2)
   183c0:	10800c83 	ldbu	r2,50(r2)
   183c4:	10c03fcc 	andi	r3,r2,255
   183c8:	e0bfff03 	ldbu	r2,-4(fp)
   183cc:	1880031e 	bne	r3,r2,183dc <OSTaskSuspend+0xc4>
        self = OS_TRUE;
   183d0:	00800044 	movi	r2,1
   183d4:	e0bff705 	stb	r2,-36(fp)
   183d8:	00000106 	br	183e0 <OSTaskSuspend+0xc8>
    } else {
        self = OS_FALSE;                                        /* No suspending another task          */
   183dc:	e03ff705 	stb	zero,-36(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
   183e0:	e0ffff03 	ldbu	r3,-4(fp)
   183e4:	008000f4 	movhi	r2,3
   183e8:	10a13d04 	addi	r2,r2,-31500
   183ec:	18c7883a 	add	r3,r3,r3
   183f0:	18c7883a 	add	r3,r3,r3
   183f4:	10c5883a 	add	r2,r2,r3
   183f8:	10800017 	ldw	r2,0(r2)
   183fc:	e0bff915 	stw	r2,-28(fp)
    if (ptcb == (OS_TCB *)0) {                                  /* Task to suspend must exist          */
   18400:	e0bff917 	ldw	r2,-28(fp)
   18404:	1000061e 	bne	r2,zero,18420 <OSTaskSuspend+0x108>
   18408:	e0bff817 	ldw	r2,-32(fp)
   1840c:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   18410:	e0bffc17 	ldw	r2,-16(fp)
   18414:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_SUSPEND_PRIO);
   18418:	00801204 	movi	r2,72
   1841c:	00003e06 	br	18518 <OSTaskSuspend+0x200>
    }
    if (ptcb == OS_TCB_RESERVED) {                              /* See if assigned to Mutex            */
   18420:	e0bff917 	ldw	r2,-28(fp)
   18424:	10800058 	cmpnei	r2,r2,1
   18428:	1000061e 	bne	r2,zero,18444 <OSTaskSuspend+0x12c>
   1842c:	e0bff817 	ldw	r2,-32(fp)
   18430:	e0bffd15 	stw	r2,-12(fp)
   18434:	e0bffd17 	ldw	r2,-12(fp)
   18438:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
   1843c:	008010c4 	movi	r2,67
   18440:	00003506 	br	18518 <OSTaskSuspend+0x200>
    }
    y            = ptcb->OSTCBY;
   18444:	e0bff917 	ldw	r2,-28(fp)
   18448:	10800d03 	ldbu	r2,52(r2)
   1844c:	e0bffa05 	stb	r2,-24(fp)
    OSRdyTbl[y] &= ~ptcb->OSTCBBitX;                            /* Make task not ready                 */
   18450:	e0fffa03 	ldbu	r3,-24(fp)
   18454:	e13ffa03 	ldbu	r4,-24(fp)
   18458:	008000b4 	movhi	r2,2
   1845c:	10948d44 	addi	r2,r2,21045
   18460:	1105883a 	add	r2,r2,r4
   18464:	10800003 	ldbu	r2,0(r2)
   18468:	1009883a 	mov	r4,r2
   1846c:	e0bff917 	ldw	r2,-28(fp)
   18470:	10800d43 	ldbu	r2,53(r2)
   18474:	0084303a 	nor	r2,zero,r2
   18478:	2084703a 	and	r2,r4,r2
   1847c:	1009883a 	mov	r4,r2
   18480:	008000b4 	movhi	r2,2
   18484:	10948d44 	addi	r2,r2,21045
   18488:	10c5883a 	add	r2,r2,r3
   1848c:	11000005 	stb	r4,0(r2)
    if (OSRdyTbl[y] == 0) {
   18490:	e0fffa03 	ldbu	r3,-24(fp)
   18494:	008000b4 	movhi	r2,2
   18498:	10948d44 	addi	r2,r2,21045
   1849c:	10c5883a 	add	r2,r2,r3
   184a0:	10800003 	ldbu	r2,0(r2)
   184a4:	10803fcc 	andi	r2,r2,255
   184a8:	10000c1e 	bne	r2,zero,184dc <OSTaskSuspend+0x1c4>
        OSRdyGrp &= ~ptcb->OSTCBBitY;
   184ac:	e0bff917 	ldw	r2,-28(fp)
   184b0:	10800d83 	ldbu	r2,54(r2)
   184b4:	0084303a 	nor	r2,zero,r2
   184b8:	1007883a 	mov	r3,r2
   184bc:	008000b4 	movhi	r2,2
   184c0:	10948d04 	addi	r2,r2,21044
   184c4:	10800003 	ldbu	r2,0(r2)
   184c8:	1884703a 	and	r2,r3,r2
   184cc:	1007883a 	mov	r3,r2
   184d0:	008000b4 	movhi	r2,2
   184d4:	10948d04 	addi	r2,r2,21044
   184d8:	10c00005 	stb	r3,0(r2)
    }
    ptcb->OSTCBStat |= OS_STAT_SUSPEND;                         /* Status of task is 'SUSPENDED'       */
   184dc:	e0bff917 	ldw	r2,-28(fp)
   184e0:	10800c03 	ldbu	r2,48(r2)
   184e4:	10800214 	ori	r2,r2,8
   184e8:	1007883a 	mov	r3,r2
   184ec:	e0bff917 	ldw	r2,-28(fp)
   184f0:	10c00c05 	stb	r3,48(r2)
   184f4:	e0bff817 	ldw	r2,-32(fp)
   184f8:	e0bffe15 	stw	r2,-8(fp)
   184fc:	e0bffe17 	ldw	r2,-8(fp)
   18500:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    if (self == OS_TRUE) {                                      /* Context switch only if SELF         */
   18504:	e0bff703 	ldbu	r2,-36(fp)
   18508:	10800058 	cmpnei	r2,r2,1
   1850c:	1000011e 	bne	r2,zero,18514 <OSTaskSuspend+0x1fc>
        OS_Sched();                                             /* Find new highest priority task      */
   18510:	00128b40 	call	128b4 <OS_Sched>
    }
    return (OS_ERR_NONE);
   18514:	0005883a 	mov	r2,zero
}
   18518:	e037883a 	mov	sp,fp
   1851c:	dfc00117 	ldw	ra,4(sp)
   18520:	df000017 	ldw	fp,0(sp)
   18524:	dec00204 	addi	sp,sp,8
   18528:	f800283a 	ret

0001852c <OSTaskQuery>:
*********************************************************************************************************
*/

#if OS_TASK_QUERY_EN > 0
INT8U  OSTaskQuery (INT8U prio, OS_TCB *p_task_data)
{
   1852c:	defff604 	addi	sp,sp,-40
   18530:	dfc00915 	stw	ra,36(sp)
   18534:	df000815 	stw	fp,32(sp)
   18538:	df000804 	addi	fp,sp,32
   1853c:	2005883a 	mov	r2,r4
   18540:	e17fff15 	stw	r5,-4(fp)
   18544:	e0bffe05 	stb	r2,-8(fp)
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   18548:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio > OS_LOWEST_PRIO) {                 /* Task priority valid ?                              */
   1854c:	e0bffe03 	ldbu	r2,-8(fp)
   18550:	10800570 	cmpltui	r2,r2,21
   18554:	1000051e 	bne	r2,zero,1856c <OSTaskQuery+0x40>
        if (prio != OS_PRIO_SELF) {
   18558:	e0bffe03 	ldbu	r2,-8(fp)
   1855c:	10803fe0 	cmpeqi	r2,r2,255
   18560:	1000021e 	bne	r2,zero,1856c <OSTaskQuery+0x40>
            return (OS_ERR_PRIO_INVALID);
   18564:	00800a84 	movi	r2,42
   18568:	00003606 	br	18644 <OSTaskQuery+0x118>
        }
    }
    if (p_task_data == (OS_TCB *)0) {            /* Validate 'p_task_data'                             */
   1856c:	e0bfff17 	ldw	r2,-4(fp)
   18570:	1000021e 	bne	r2,zero,1857c <OSTaskQuery+0x50>
        return (OS_ERR_PDATA_NULL);
   18574:	00800244 	movi	r2,9
   18578:	00003206 	br	18644 <OSTaskQuery+0x118>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1857c:	0005303a 	rdctl	r2,status
   18580:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   18584:	e0fffa17 	ldw	r3,-24(fp)
   18588:	00bfff84 	movi	r2,-2
   1858c:	1884703a 	and	r2,r3,r2
   18590:	1001703a 	wrctl	status,r2
  
  return context;
   18594:	e0bffa17 	ldw	r2,-24(fp)
    }
#endif
    OS_ENTER_CRITICAL();
   18598:	e0bff815 	stw	r2,-32(fp)
    if (prio == OS_PRIO_SELF) {                  /* See if suspend SELF                                */
   1859c:	e0bffe03 	ldbu	r2,-8(fp)
   185a0:	10803fd8 	cmpnei	r2,r2,255
   185a4:	1000051e 	bne	r2,zero,185bc <OSTaskQuery+0x90>
        prio = OSTCBCur->OSTCBPrio;
   185a8:	008000b4 	movhi	r2,2
   185ac:	10949004 	addi	r2,r2,21056
   185b0:	10800017 	ldw	r2,0(r2)
   185b4:	10800c83 	ldbu	r2,50(r2)
   185b8:	e0bffe05 	stb	r2,-8(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
   185bc:	e0fffe03 	ldbu	r3,-8(fp)
   185c0:	008000f4 	movhi	r2,3
   185c4:	10a13d04 	addi	r2,r2,-31500
   185c8:	18c7883a 	add	r3,r3,r3
   185cc:	18c7883a 	add	r3,r3,r3
   185d0:	10c5883a 	add	r2,r2,r3
   185d4:	10800017 	ldw	r2,0(r2)
   185d8:	e0bff915 	stw	r2,-28(fp)
    if (ptcb == (OS_TCB *)0) {                   /* Task to query must exist                           */
   185dc:	e0bff917 	ldw	r2,-28(fp)
   185e0:	1000061e 	bne	r2,zero,185fc <OSTaskQuery+0xd0>
   185e4:	e0bff817 	ldw	r2,-32(fp)
   185e8:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   185ec:	e0bffb17 	ldw	r2,-20(fp)
   185f0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_PRIO);
   185f4:	00800a44 	movi	r2,41
   185f8:	00001206 	br	18644 <OSTaskQuery+0x118>
    }
    if (ptcb == OS_TCB_RESERVED) {               /* Task to query must not be assigned to a Mutex      */
   185fc:	e0bff917 	ldw	r2,-28(fp)
   18600:	10800058 	cmpnei	r2,r2,1
   18604:	1000061e 	bne	r2,zero,18620 <OSTaskQuery+0xf4>
   18608:	e0bff817 	ldw	r2,-32(fp)
   1860c:	e0bffc15 	stw	r2,-16(fp)
   18610:	e0bffc17 	ldw	r2,-16(fp)
   18614:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
   18618:	008010c4 	movi	r2,67
   1861c:	00000906 	br	18644 <OSTaskQuery+0x118>
    }
                                                 /* Copy TCB into user storage area                    */
    OS_MemCopy((INT8U *)p_task_data, (INT8U *)ptcb, sizeof(OS_TCB));
   18620:	e13fff17 	ldw	r4,-4(fp)
   18624:	e17ff917 	ldw	r5,-28(fp)
   18628:	01801b04 	movi	r6,108
   1862c:	00128500 	call	12850 <OS_MemCopy>
   18630:	e0bff817 	ldw	r2,-32(fp)
   18634:	e0bffd15 	stw	r2,-12(fp)
   18638:	e0bffd17 	ldw	r2,-12(fp)
   1863c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
   18640:	0005883a 	mov	r2,zero
}
   18644:	e037883a 	mov	sp,fp
   18648:	dfc00117 	ldw	ra,4(sp)
   1864c:	df000017 	ldw	fp,0(sp)
   18650:	dec00204 	addi	sp,sp,8
   18654:	f800283a 	ret

00018658 <OS_TaskStkClr>:
* Returns    : none
*********************************************************************************************************
*/
#if (OS_TASK_STAT_STK_CHK_EN > 0) && (OS_TASK_CREATE_EXT_EN > 0)
void  OS_TaskStkClr (OS_STK *pbos, INT32U size, INT16U opt)
{
   18658:	defffc04 	addi	sp,sp,-16
   1865c:	df000315 	stw	fp,12(sp)
   18660:	df000304 	addi	fp,sp,12
   18664:	e13ffd15 	stw	r4,-12(fp)
   18668:	e17ffe15 	stw	r5,-8(fp)
   1866c:	3005883a 	mov	r2,r6
   18670:	e0bfff0d 	sth	r2,-4(fp)
    if ((opt & OS_TASK_OPT_STK_CHK) != 0x0000) {       /* See if stack checking has been enabled       */
   18674:	e0bfff0b 	ldhu	r2,-4(fp)
   18678:	1080004c 	andi	r2,r2,1
   1867c:	10000d26 	beq	r2,zero,186b4 <OS_TaskStkClr+0x5c>
        if ((opt & OS_TASK_OPT_STK_CLR) != 0x0000) {   /* See if stack needs to be cleared             */
   18680:	e0bfff0b 	ldhu	r2,-4(fp)
   18684:	1080008c 	andi	r2,r2,2
   18688:	10000a26 	beq	r2,zero,186b4 <OS_TaskStkClr+0x5c>
#if OS_STK_GROWTH == 1
            while (size > 0) {                         /* Stack grows from HIGH to LOW memory          */
   1868c:	00000706 	br	186ac <OS_TaskStkClr+0x54>
                size--;
   18690:	e0bffe17 	ldw	r2,-8(fp)
   18694:	10bfffc4 	addi	r2,r2,-1
   18698:	e0bffe15 	stw	r2,-8(fp)
                *pbos++ = (OS_STK)0;                   /* Clear from bottom of stack and up!           */
   1869c:	e0bffd17 	ldw	r2,-12(fp)
   186a0:	10c00104 	addi	r3,r2,4
   186a4:	e0fffd15 	stw	r3,-12(fp)
   186a8:	10000015 	stw	zero,0(r2)
void  OS_TaskStkClr (OS_STK *pbos, INT32U size, INT16U opt)
{
    if ((opt & OS_TASK_OPT_STK_CHK) != 0x0000) {       /* See if stack checking has been enabled       */
        if ((opt & OS_TASK_OPT_STK_CLR) != 0x0000) {   /* See if stack needs to be cleared             */
#if OS_STK_GROWTH == 1
            while (size > 0) {                         /* Stack grows from HIGH to LOW memory          */
   186ac:	e0bffe17 	ldw	r2,-8(fp)
   186b0:	103ff71e 	bne	r2,zero,18690 <__alt_mem_Flash_flash_data+0xf4018690>
                *pbos-- = (OS_STK)0;                   /* Clear from bottom of stack and down          */
            }
#endif
        }
    }
}
   186b4:	e037883a 	mov	sp,fp
   186b8:	df000017 	ldw	fp,0(sp)
   186bc:	dec00104 	addi	sp,sp,4
   186c0:	f800283a 	ret

000186c4 <OSTimeDly>:
* Returns    : none
*********************************************************************************************************
*/

void  OSTimeDly (INT16U ticks)
{
   186c4:	defff904 	addi	sp,sp,-28
   186c8:	dfc00615 	stw	ra,24(sp)
   186cc:	df000515 	stw	fp,20(sp)
   186d0:	df000504 	addi	fp,sp,20
   186d4:	2005883a 	mov	r2,r4
   186d8:	e0bfff0d 	sth	r2,-4(fp)
    INT8U      y;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   186dc:	e03ffb15 	stw	zero,-20(fp)
#endif



    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
   186e0:	008000b4 	movhi	r2,2
   186e4:	10948f04 	addi	r2,r2,21052
   186e8:	10800003 	ldbu	r2,0(r2)
   186ec:	10803fcc 	andi	r2,r2,255
   186f0:	10000126 	beq	r2,zero,186f8 <OSTimeDly+0x34>
        return;
   186f4:	00004006 	br	187f8 <OSTimeDly+0x134>
    }
    if (ticks > 0) {                             /* 0 means no delay!                                  */
   186f8:	e0bfff0b 	ldhu	r2,-4(fp)
   186fc:	10003e26 	beq	r2,zero,187f8 <OSTimeDly+0x134>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   18700:	0005303a 	rdctl	r2,status
   18704:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   18708:	e0fffd17 	ldw	r3,-12(fp)
   1870c:	00bfff84 	movi	r2,-2
   18710:	1884703a 	and	r2,r3,r2
   18714:	1001703a 	wrctl	status,r2
  
  return context;
   18718:	e0bffd17 	ldw	r2,-12(fp)
        OS_ENTER_CRITICAL();
   1871c:	e0bffb15 	stw	r2,-20(fp)
        y            =  OSTCBCur->OSTCBY;        /* Delay current task                                 */
   18720:	008000b4 	movhi	r2,2
   18724:	10949004 	addi	r2,r2,21056
   18728:	10800017 	ldw	r2,0(r2)
   1872c:	10800d03 	ldbu	r2,52(r2)
   18730:	e0bffc05 	stb	r2,-16(fp)
        OSRdyTbl[y] &= ~OSTCBCur->OSTCBBitX;
   18734:	e0fffc03 	ldbu	r3,-16(fp)
   18738:	e13ffc03 	ldbu	r4,-16(fp)
   1873c:	008000b4 	movhi	r2,2
   18740:	10948d44 	addi	r2,r2,21045
   18744:	1105883a 	add	r2,r2,r4
   18748:	10800003 	ldbu	r2,0(r2)
   1874c:	1009883a 	mov	r4,r2
   18750:	008000b4 	movhi	r2,2
   18754:	10949004 	addi	r2,r2,21056
   18758:	10800017 	ldw	r2,0(r2)
   1875c:	10800d43 	ldbu	r2,53(r2)
   18760:	0084303a 	nor	r2,zero,r2
   18764:	2084703a 	and	r2,r4,r2
   18768:	1009883a 	mov	r4,r2
   1876c:	008000b4 	movhi	r2,2
   18770:	10948d44 	addi	r2,r2,21045
   18774:	10c5883a 	add	r2,r2,r3
   18778:	11000005 	stb	r4,0(r2)
        if (OSRdyTbl[y] == 0) {
   1877c:	e0fffc03 	ldbu	r3,-16(fp)
   18780:	008000b4 	movhi	r2,2
   18784:	10948d44 	addi	r2,r2,21045
   18788:	10c5883a 	add	r2,r2,r3
   1878c:	10800003 	ldbu	r2,0(r2)
   18790:	10803fcc 	andi	r2,r2,255
   18794:	10000e1e 	bne	r2,zero,187d0 <OSTimeDly+0x10c>
            OSRdyGrp &= ~OSTCBCur->OSTCBBitY;
   18798:	008000b4 	movhi	r2,2
   1879c:	10949004 	addi	r2,r2,21056
   187a0:	10800017 	ldw	r2,0(r2)
   187a4:	10800d83 	ldbu	r2,54(r2)
   187a8:	0084303a 	nor	r2,zero,r2
   187ac:	1007883a 	mov	r3,r2
   187b0:	008000b4 	movhi	r2,2
   187b4:	10948d04 	addi	r2,r2,21044
   187b8:	10800003 	ldbu	r2,0(r2)
   187bc:	1884703a 	and	r2,r3,r2
   187c0:	1007883a 	mov	r3,r2
   187c4:	008000b4 	movhi	r2,2
   187c8:	10948d04 	addi	r2,r2,21044
   187cc:	10c00005 	stb	r3,0(r2)
        }
        OSTCBCur->OSTCBDly = ticks;              /* Load ticks in TCB                                  */
   187d0:	008000b4 	movhi	r2,2
   187d4:	10949004 	addi	r2,r2,21056
   187d8:	10800017 	ldw	r2,0(r2)
   187dc:	e0ffff0b 	ldhu	r3,-4(fp)
   187e0:	10c00b8d 	sth	r3,46(r2)
   187e4:	e0bffb17 	ldw	r2,-20(fp)
   187e8:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   187ec:	e0bffe17 	ldw	r2,-8(fp)
   187f0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                              /* Find next task to run!                             */
   187f4:	00128b40 	call	128b4 <OS_Sched>
    }
}
   187f8:	e037883a 	mov	sp,fp
   187fc:	dfc00117 	ldw	ra,4(sp)
   18800:	df000017 	ldw	fp,0(sp)
   18804:	dec00204 	addi	sp,sp,8
   18808:	f800283a 	ret

0001880c <OSTimeDlyHMSM>:
*********************************************************************************************************
*/

#if OS_TIME_DLY_HMSM_EN > 0
INT8U  OSTimeDlyHMSM (INT8U hours, INT8U minutes, INT8U seconds, INT16U ms)
{
   1880c:	defff804 	addi	sp,sp,-32
   18810:	dfc00715 	stw	ra,28(sp)
   18814:	df000615 	stw	fp,24(sp)
   18818:	df000604 	addi	fp,sp,24
   1881c:	2015883a 	mov	r10,r4
   18820:	2809883a 	mov	r4,r5
   18824:	3007883a 	mov	r3,r6
   18828:	3805883a 	mov	r2,r7
   1882c:	e2bffc05 	stb	r10,-16(fp)
   18830:	e13ffd05 	stb	r4,-12(fp)
   18834:	e0fffe05 	stb	r3,-8(fp)
   18838:	e0bfff0d 	sth	r2,-4(fp)
    INT32U ticks;
    INT16U loops;


    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
   1883c:	008000b4 	movhi	r2,2
   18840:	10948f04 	addi	r2,r2,21052
   18844:	10800003 	ldbu	r2,0(r2)
   18848:	10803fcc 	andi	r2,r2,255
   1884c:	10000226 	beq	r2,zero,18858 <OSTimeDlyHMSM+0x4c>
        return (OS_ERR_TIME_DLY_ISR);
   18850:	00801544 	movi	r2,85
   18854:	00004206 	br	18960 <OSTimeDlyHMSM+0x154>
    }
#if OS_ARG_CHK_EN > 0
    if (hours == 0) {
   18858:	e0bffc03 	ldbu	r2,-16(fp)
   1885c:	1000081e 	bne	r2,zero,18880 <OSTimeDlyHMSM+0x74>
        if (minutes == 0) {
   18860:	e0bffd03 	ldbu	r2,-12(fp)
   18864:	1000061e 	bne	r2,zero,18880 <OSTimeDlyHMSM+0x74>
            if (seconds == 0) {
   18868:	e0bffe03 	ldbu	r2,-8(fp)
   1886c:	1000041e 	bne	r2,zero,18880 <OSTimeDlyHMSM+0x74>
                if (ms == 0) {
   18870:	e0bfff0b 	ldhu	r2,-4(fp)
   18874:	1000021e 	bne	r2,zero,18880 <OSTimeDlyHMSM+0x74>
                    return (OS_ERR_TIME_ZERO_DLY);
   18878:	00801504 	movi	r2,84
   1887c:	00003806 	br	18960 <OSTimeDlyHMSM+0x154>
                }
            }
        }
    }
    if (minutes > 59) {
   18880:	e0bffd03 	ldbu	r2,-12(fp)
   18884:	10800f30 	cmpltui	r2,r2,60
   18888:	1000021e 	bne	r2,zero,18894 <OSTimeDlyHMSM+0x88>
        return (OS_ERR_TIME_INVALID_MINUTES);    /* Validate arguments to be within range              */
   1888c:	00801444 	movi	r2,81
   18890:	00003306 	br	18960 <OSTimeDlyHMSM+0x154>
    }
    if (seconds > 59) {
   18894:	e0bffe03 	ldbu	r2,-8(fp)
   18898:	10800f30 	cmpltui	r2,r2,60
   1889c:	1000021e 	bne	r2,zero,188a8 <OSTimeDlyHMSM+0x9c>
        return (OS_ERR_TIME_INVALID_SECONDS);
   188a0:	00801484 	movi	r2,82
   188a4:	00002e06 	br	18960 <OSTimeDlyHMSM+0x154>
    }
    if (ms > 999) {
   188a8:	e0bfff0b 	ldhu	r2,-4(fp)
   188ac:	1080fa30 	cmpltui	r2,r2,1000
   188b0:	1000021e 	bne	r2,zero,188bc <OSTimeDlyHMSM+0xb0>
        return (OS_ERR_TIME_INVALID_MS);
   188b4:	008014c4 	movi	r2,83
   188b8:	00002906 	br	18960 <OSTimeDlyHMSM+0x154>
    }
#endif
                                                 /* Compute the total number of clock ticks required.. */
                                                 /* .. (rounded to the nearest tick)                   */
    ticks = ((INT32U)hours * 3600L + (INT32U)minutes * 60L + (INT32U)seconds) * OS_TICKS_PER_SEC
   188bc:	e0bffc03 	ldbu	r2,-16(fp)
   188c0:	10c38424 	muli	r3,r2,3600
   188c4:	e0bffd03 	ldbu	r2,-12(fp)
   188c8:	10800f24 	muli	r2,r2,60
   188cc:	1887883a 	add	r3,r3,r2
   188d0:	e0bffe03 	ldbu	r2,-8(fp)
   188d4:	1885883a 	add	r2,r3,r2
   188d8:	100890fa 	slli	r4,r2,3
          + OS_TICKS_PER_SEC * ((INT32U)ms + 500L / OS_TICKS_PER_SEC) / 1000L;
   188dc:	e0bfff0b 	ldhu	r2,-4(fp)
   188e0:	10800f84 	addi	r2,r2,62
   188e4:	100690fa 	slli	r3,r2,3
   188e8:	008418b4 	movhi	r2,4194
   188ec:	109374c4 	addi	r2,r2,19923
   188f0:	188a383a 	mulxuu	r5,r3,r2
   188f4:	1885383a 	mul	r2,r3,r2
   188f8:	1011883a 	mov	r8,r2
   188fc:	2813883a 	mov	r9,r5
   18900:	4804d1ba 	srli	r2,r9,6
        return (OS_ERR_TIME_INVALID_MS);
    }
#endif
                                                 /* Compute the total number of clock ticks required.. */
                                                 /* .. (rounded to the nearest tick)                   */
    ticks = ((INT32U)hours * 3600L + (INT32U)minutes * 60L + (INT32U)seconds) * OS_TICKS_PER_SEC
   18904:	2085883a 	add	r2,r4,r2
   18908:	e0bffb15 	stw	r2,-20(fp)
          + OS_TICKS_PER_SEC * ((INT32U)ms + 500L / OS_TICKS_PER_SEC) / 1000L;
    loops = (INT16U)(ticks >> 16);               /* Compute the integral number of 65536 tick delays   */
   1890c:	e0bffb17 	ldw	r2,-20(fp)
   18910:	1004d43a 	srli	r2,r2,16
   18914:	e0bffa0d 	sth	r2,-24(fp)
    ticks = ticks & 0xFFFFL;                     /* Obtain  the fractional number of ticks             */
   18918:	e0bffb17 	ldw	r2,-20(fp)
   1891c:	10bfffcc 	andi	r2,r2,65535
   18920:	e0bffb15 	stw	r2,-20(fp)
    OSTimeDly((INT16U)ticks);
   18924:	e0bffb17 	ldw	r2,-20(fp)
   18928:	10bfffcc 	andi	r2,r2,65535
   1892c:	1009883a 	mov	r4,r2
   18930:	00186c40 	call	186c4 <OSTimeDly>
    while (loops > 0) {
   18934:	00000706 	br	18954 <OSTimeDlyHMSM+0x148>
        OSTimeDly((INT16U)32768u);
   18938:	01200014 	movui	r4,32768
   1893c:	00186c40 	call	186c4 <OSTimeDly>
        OSTimeDly((INT16U)32768u);
   18940:	01200014 	movui	r4,32768
   18944:	00186c40 	call	186c4 <OSTimeDly>
        loops--;
   18948:	e0bffa0b 	ldhu	r2,-24(fp)
   1894c:	10bfffc4 	addi	r2,r2,-1
   18950:	e0bffa0d 	sth	r2,-24(fp)
    ticks = ((INT32U)hours * 3600L + (INT32U)minutes * 60L + (INT32U)seconds) * OS_TICKS_PER_SEC
          + OS_TICKS_PER_SEC * ((INT32U)ms + 500L / OS_TICKS_PER_SEC) / 1000L;
    loops = (INT16U)(ticks >> 16);               /* Compute the integral number of 65536 tick delays   */
    ticks = ticks & 0xFFFFL;                     /* Obtain  the fractional number of ticks             */
    OSTimeDly((INT16U)ticks);
    while (loops > 0) {
   18954:	e0bffa0b 	ldhu	r2,-24(fp)
   18958:	103ff71e 	bne	r2,zero,18938 <__alt_mem_Flash_flash_data+0xf4018938>
        OSTimeDly((INT16U)32768u);
        OSTimeDly((INT16U)32768u);
        loops--;
    }
    return (OS_ERR_NONE);
   1895c:	0005883a 	mov	r2,zero
}
   18960:	e037883a 	mov	sp,fp
   18964:	dfc00117 	ldw	ra,4(sp)
   18968:	df000017 	ldw	fp,0(sp)
   1896c:	dec00204 	addi	sp,sp,8
   18970:	f800283a 	ret

00018974 <OSTimeDlyResume>:
*********************************************************************************************************
*/

#if OS_TIME_DLY_RESUME_EN > 0
INT8U  OSTimeDlyResume (INT8U prio)
{
   18974:	defff504 	addi	sp,sp,-44
   18978:	dfc00a15 	stw	ra,40(sp)
   1897c:	df000915 	stw	fp,36(sp)
   18980:	df000904 	addi	fp,sp,36
   18984:	2005883a 	mov	r2,r4
   18988:	e0bfff05 	stb	r2,-4(fp)
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                                    /* Storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   1898c:	e03ff715 	stw	zero,-36(fp)
#endif



    if (prio >= OS_LOWEST_PRIO) {
   18990:	e0bfff03 	ldbu	r2,-4(fp)
   18994:	10800530 	cmpltui	r2,r2,20
   18998:	1000021e 	bne	r2,zero,189a4 <OSTimeDlyResume+0x30>
        return (OS_ERR_PRIO_INVALID);
   1899c:	00800a84 	movi	r2,42
   189a0:	00006b06 	br	18b50 <OSTimeDlyResume+0x1dc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   189a4:	0005303a 	rdctl	r2,status
   189a8:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   189ac:	e0fff917 	ldw	r3,-28(fp)
   189b0:	00bfff84 	movi	r2,-2
   189b4:	1884703a 	and	r2,r3,r2
   189b8:	1001703a 	wrctl	status,r2
  
  return context;
   189bc:	e0bff917 	ldw	r2,-28(fp)
    }
    OS_ENTER_CRITICAL();
   189c0:	e0bff715 	stw	r2,-36(fp)
    ptcb = OSTCBPrioTbl[prio];                                 /* Make sure that task exist            */
   189c4:	e0ffff03 	ldbu	r3,-4(fp)
   189c8:	008000f4 	movhi	r2,3
   189cc:	10a13d04 	addi	r2,r2,-31500
   189d0:	18c7883a 	add	r3,r3,r3
   189d4:	18c7883a 	add	r3,r3,r3
   189d8:	10c5883a 	add	r2,r2,r3
   189dc:	10800017 	ldw	r2,0(r2)
   189e0:	e0bff815 	stw	r2,-32(fp)
    if (ptcb == (OS_TCB *)0) {
   189e4:	e0bff817 	ldw	r2,-32(fp)
   189e8:	1000061e 	bne	r2,zero,18a04 <OSTimeDlyResume+0x90>
   189ec:	e0bff717 	ldw	r2,-36(fp)
   189f0:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   189f4:	e0bffa17 	ldw	r2,-24(fp)
   189f8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);                        /* The task does not exist              */
   189fc:	008010c4 	movi	r2,67
   18a00:	00005306 	br	18b50 <OSTimeDlyResume+0x1dc>
    }
    if (ptcb == OS_TCB_RESERVED) {
   18a04:	e0bff817 	ldw	r2,-32(fp)
   18a08:	10800058 	cmpnei	r2,r2,1
   18a0c:	1000061e 	bne	r2,zero,18a28 <OSTimeDlyResume+0xb4>
   18a10:	e0bff717 	ldw	r2,-36(fp)
   18a14:	e0bffb15 	stw	r2,-20(fp)
   18a18:	e0bffb17 	ldw	r2,-20(fp)
   18a1c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);                        /* The task does not exist              */
   18a20:	008010c4 	movi	r2,67
   18a24:	00004a06 	br	18b50 <OSTimeDlyResume+0x1dc>
    }
    if (ptcb->OSTCBDly == 0) {                                 /* See if task is delayed               */
   18a28:	e0bff817 	ldw	r2,-32(fp)
   18a2c:	10800b8b 	ldhu	r2,46(r2)
   18a30:	10bfffcc 	andi	r2,r2,65535
   18a34:	1000061e 	bne	r2,zero,18a50 <OSTimeDlyResume+0xdc>
   18a38:	e0bff717 	ldw	r2,-36(fp)
   18a3c:	e0bffc15 	stw	r2,-16(fp)
   18a40:	e0bffc17 	ldw	r2,-16(fp)
   18a44:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TIME_NOT_DLY);                          /* Indicate that task was not delayed   */
   18a48:	00801404 	movi	r2,80
   18a4c:	00004006 	br	18b50 <OSTimeDlyResume+0x1dc>
    }

    ptcb->OSTCBDly = 0;                                        /* Clear the time delay                 */
   18a50:	e0bff817 	ldw	r2,-32(fp)
   18a54:	10000b8d 	sth	zero,46(r2)
    if ((ptcb->OSTCBStat & OS_STAT_PEND_ANY) != OS_STAT_RDY) {
   18a58:	e0bff817 	ldw	r2,-32(fp)
   18a5c:	10800c03 	ldbu	r2,48(r2)
   18a60:	10803fcc 	andi	r2,r2,255
   18a64:	10800dcc 	andi	r2,r2,55
   18a68:	10000b26 	beq	r2,zero,18a98 <OSTimeDlyResume+0x124>
        ptcb->OSTCBStat     &= ~OS_STAT_PEND_ANY;              /* Yes, Clear status flag               */
   18a6c:	e0bff817 	ldw	r2,-32(fp)
   18a70:	10c00c03 	ldbu	r3,48(r2)
   18a74:	00bff204 	movi	r2,-56
   18a78:	1884703a 	and	r2,r3,r2
   18a7c:	1007883a 	mov	r3,r2
   18a80:	e0bff817 	ldw	r2,-32(fp)
   18a84:	10c00c05 	stb	r3,48(r2)
        ptcb->OSTCBStatPend  =  OS_STAT_PEND_TO;               /* Indicate PEND timeout                */
   18a88:	e0bff817 	ldw	r2,-32(fp)
   18a8c:	00c00044 	movi	r3,1
   18a90:	10c00c45 	stb	r3,49(r2)
   18a94:	00000206 	br	18aa0 <OSTimeDlyResume+0x12c>
    } else {
        ptcb->OSTCBStatPend  =  OS_STAT_PEND_OK;
   18a98:	e0bff817 	ldw	r2,-32(fp)
   18a9c:	10000c45 	stb	zero,49(r2)
    }
    if ((ptcb->OSTCBStat & OS_STAT_SUSPEND) == OS_STAT_RDY) {  /* Is task suspended?                   */
   18aa0:	e0bff817 	ldw	r2,-32(fp)
   18aa4:	10800c03 	ldbu	r2,48(r2)
   18aa8:	10803fcc 	andi	r2,r2,255
   18aac:	1080020c 	andi	r2,r2,8
   18ab0:	1000221e 	bne	r2,zero,18b3c <OSTimeDlyResume+0x1c8>
        OSRdyGrp               |= ptcb->OSTCBBitY;             /* No,  Make ready                      */
   18ab4:	e0bff817 	ldw	r2,-32(fp)
   18ab8:	10c00d83 	ldbu	r3,54(r2)
   18abc:	008000b4 	movhi	r2,2
   18ac0:	10948d04 	addi	r2,r2,21044
   18ac4:	10800003 	ldbu	r2,0(r2)
   18ac8:	1884b03a 	or	r2,r3,r2
   18acc:	1007883a 	mov	r3,r2
   18ad0:	008000b4 	movhi	r2,2
   18ad4:	10948d04 	addi	r2,r2,21044
   18ad8:	10c00005 	stb	r3,0(r2)
        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
   18adc:	e0bff817 	ldw	r2,-32(fp)
   18ae0:	10800d03 	ldbu	r2,52(r2)
   18ae4:	10c03fcc 	andi	r3,r2,255
   18ae8:	e0bff817 	ldw	r2,-32(fp)
   18aec:	10800d03 	ldbu	r2,52(r2)
   18af0:	11003fcc 	andi	r4,r2,255
   18af4:	008000b4 	movhi	r2,2
   18af8:	10948d44 	addi	r2,r2,21045
   18afc:	1105883a 	add	r2,r2,r4
   18b00:	11000003 	ldbu	r4,0(r2)
   18b04:	e0bff817 	ldw	r2,-32(fp)
   18b08:	10800d43 	ldbu	r2,53(r2)
   18b0c:	2084b03a 	or	r2,r4,r2
   18b10:	1009883a 	mov	r4,r2
   18b14:	008000b4 	movhi	r2,2
   18b18:	10948d44 	addi	r2,r2,21045
   18b1c:	10c5883a 	add	r2,r2,r3
   18b20:	11000005 	stb	r4,0(r2)
   18b24:	e0bff717 	ldw	r2,-36(fp)
   18b28:	e0bffd15 	stw	r2,-12(fp)
   18b2c:	e0bffd17 	ldw	r2,-12(fp)
   18b30:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                                            /* See if this is new highest priority  */
   18b34:	00128b40 	call	128b4 <OS_Sched>
   18b38:	00000406 	br	18b4c <OSTimeDlyResume+0x1d8>
   18b3c:	e0bff717 	ldw	r2,-36(fp)
   18b40:	e0bffe15 	stw	r2,-8(fp)
   18b44:	e0bffe17 	ldw	r2,-8(fp)
   18b48:	1001703a 	wrctl	status,r2
    } else {
        OS_EXIT_CRITICAL();                                    /* Task may be suspended                */
    }
    return (OS_ERR_NONE);
   18b4c:	0005883a 	mov	r2,zero
}
   18b50:	e037883a 	mov	sp,fp
   18b54:	dfc00117 	ldw	ra,4(sp)
   18b58:	df000017 	ldw	fp,0(sp)
   18b5c:	dec00204 	addi	sp,sp,8
   18b60:	f800283a 	ret

00018b64 <OSTimeGet>:
*********************************************************************************************************
*/

#if OS_TIME_GET_SET_EN > 0
INT32U  OSTimeGet (void)
{
   18b64:	defffb04 	addi	sp,sp,-20
   18b68:	df000415 	stw	fp,16(sp)
   18b6c:	df000404 	addi	fp,sp,16
    INT32U     ticks;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   18b70:	e03ffc15 	stw	zero,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   18b74:	0005303a 	rdctl	r2,status
   18b78:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   18b7c:	e0fffe17 	ldw	r3,-8(fp)
   18b80:	00bfff84 	movi	r2,-2
   18b84:	1884703a 	and	r2,r3,r2
   18b88:	1001703a 	wrctl	status,r2
  
  return context;
   18b8c:	e0bffe17 	ldw	r2,-8(fp)
#endif



    OS_ENTER_CRITICAL();
   18b90:	e0bffc15 	stw	r2,-16(fp)
    ticks = OSTime;
   18b94:	008000b4 	movhi	r2,2
   18b98:	10949104 	addi	r2,r2,21060
   18b9c:	10800017 	ldw	r2,0(r2)
   18ba0:	e0bffd15 	stw	r2,-12(fp)
   18ba4:	e0bffc17 	ldw	r2,-16(fp)
   18ba8:	e0bfff15 	stw	r2,-4(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   18bac:	e0bfff17 	ldw	r2,-4(fp)
   18bb0:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (ticks);
   18bb4:	e0bffd17 	ldw	r2,-12(fp)
}
   18bb8:	e037883a 	mov	sp,fp
   18bbc:	df000017 	ldw	fp,0(sp)
   18bc0:	dec00104 	addi	sp,sp,4
   18bc4:	f800283a 	ret

00018bc8 <OSTimeSet>:
*********************************************************************************************************
*/

#if OS_TIME_GET_SET_EN > 0
void  OSTimeSet (INT32U ticks)
{
   18bc8:	defffb04 	addi	sp,sp,-20
   18bcc:	df000415 	stw	fp,16(sp)
   18bd0:	df000404 	addi	fp,sp,16
   18bd4:	e13fff15 	stw	r4,-4(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   18bd8:	e03ffc15 	stw	zero,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   18bdc:	0005303a 	rdctl	r2,status
   18be0:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   18be4:	e0fffd17 	ldw	r3,-12(fp)
   18be8:	00bfff84 	movi	r2,-2
   18bec:	1884703a 	and	r2,r3,r2
   18bf0:	1001703a 	wrctl	status,r2
  
  return context;
   18bf4:	e0bffd17 	ldw	r2,-12(fp)
#endif



    OS_ENTER_CRITICAL();
   18bf8:	e0bffc15 	stw	r2,-16(fp)
    OSTime = ticks;
   18bfc:	008000b4 	movhi	r2,2
   18c00:	10949104 	addi	r2,r2,21060
   18c04:	e0ffff17 	ldw	r3,-4(fp)
   18c08:	10c00015 	stw	r3,0(r2)
   18c0c:	e0bffc17 	ldw	r2,-16(fp)
   18c10:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   18c14:	e0bffe17 	ldw	r2,-8(fp)
   18c18:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
}
   18c1c:	e037883a 	mov	sp,fp
   18c20:	df000017 	ldw	fp,0(sp)
   18c24:	dec00104 	addi	sp,sp,4
   18c28:	f800283a 	ret

00018c2c <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
   18c2c:	defffd04 	addi	sp,sp,-12
   18c30:	dfc00215 	stw	ra,8(sp)
   18c34:	df000115 	stw	fp,4(sp)
   18c38:	df000104 	addi	fp,sp,4
   18c3c:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
   18c40:	e13fff17 	ldw	r4,-4(fp)
   18c44:	014000b4 	movhi	r5,2
   18c48:	294c8d04 	addi	r5,r5,12852
   18c4c:	001f9640 	call	1f964 <alt_dev_llist_insert>
}
   18c50:	e037883a 	mov	sp,fp
   18c54:	dfc00117 	ldw	ra,4(sp)
   18c58:	df000017 	ldw	fp,0(sp)
   18c5c:	dec00204 	addi	sp,sp,8
   18c60:	f800283a 	ret

00018c64 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
   18c64:	defffd04 	addi	sp,sp,-12
   18c68:	dfc00215 	stw	ra,8(sp)
   18c6c:	df000115 	stw	fp,4(sp)
   18c70:	df000104 	addi	fp,sp,4
   18c74:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2, Nios2);
   18c78:	00202780 	call	20278 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
   18c7c:	00800044 	movi	r2,1
   18c80:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
   18c84:	e037883a 	mov	sp,fp
   18c88:	dfc00117 	ldw	ra,4(sp)
   18c8c:	df000017 	ldw	fp,0(sp)
   18c90:	dec00204 	addi	sp,sp,8
   18c94:	f800283a 	ret

00018c98 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
   18c98:	defffd04 	addi	sp,sp,-12
   18c9c:	dfc00215 	stw	ra,8(sp)
   18ca0:	df000115 	stw	fp,4(sp)
   18ca4:	df000104 	addi	fp,sp,4
    ALTERA_AVALON_TIMER_INIT ( INTERVAL_TIMER, Interval_Timer);
   18ca8:	01040034 	movhi	r4,4096
   18cac:	21080004 	addi	r4,r4,8192
   18cb0:	000b883a 	mov	r5,zero
   18cb4:	000d883a 	mov	r6,zero
   18cb8:	01c00204 	movi	r7,8
   18cbc:	001e1b00 	call	1e1b0 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, JTAG_UART);
   18cc0:	010000b4 	movhi	r4,2
   18cc4:	21079304 	addi	r4,r4,7756
   18cc8:	000b883a 	mov	r5,zero
   18ccc:	01800204 	movi	r6,8
   18cd0:	001d5780 	call	1d578 <altera_avalon_jtag_uart_init>
   18cd4:	010000b4 	movhi	r4,2
   18cd8:	21078904 	addi	r4,r4,7716
   18cdc:	0018c2c0 	call	18c2c <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID, SysID);
   18ce0:	0001883a 	nop
    ALTERA_UP_AVALON_AUDIO_AND_VIDEO_CONFIG_INIT ( AV_CONFIG, AV_Config);
   18ce4:	010000b4 	movhi	r4,2
   18ce8:	210ba404 	addi	r4,r4,11920
   18cec:	0018c2c0 	call	18c2c <alt_dev_reg>
    ALTERA_UP_AVALON_AUDIO_INIT ( AUDIO_SUBSYSTEM_AUDIO, Audio_Subsystem_Audio);
   18cf0:	010000b4 	movhi	r4,2
   18cf4:	210bb004 	addi	r4,r4,11968
   18cf8:	0018c2c0 	call	18c2c <alt_dev_reg>
    ALTERA_UP_AVALON_CHARACTER_LCD_INIT ( CHAR_LCD_16X2, Char_LCD_16x2);
   18cfc:	010000b4 	movhi	r4,2
   18d00:	210bbc04 	addi	r4,r4,12016
   18d04:	001e2e00 	call	1e2e0 <alt_up_character_lcd_init>
   18d08:	010000b4 	movhi	r4,2
   18d0c:	210bbc04 	addi	r4,r4,12016
   18d10:	0018c2c0 	call	18c2c <alt_dev_reg>
    ALTERA_UP_AVALON_IRDA_INIT ( IRDA, IrDA);
   18d14:	010000b4 	movhi	r4,2
   18d18:	210bc704 	addi	r4,r4,12060
   18d1c:	0018c2c0 	call	18c2c <alt_dev_reg>
    ALTERA_UP_AVALON_PARALLEL_PORT_INIT ( EXPANSION_JP5, Expansion_JP5);
   18d20:	010000b4 	movhi	r4,2
   18d24:	210bd204 	addi	r4,r4,12104
   18d28:	0018c2c0 	call	18c2c <alt_dev_reg>
    ALTERA_UP_AVALON_PARALLEL_PORT_INIT ( GREEN_LEDS, Green_LEDs);
   18d2c:	010000b4 	movhi	r4,2
   18d30:	210bdd04 	addi	r4,r4,12148
   18d34:	0018c2c0 	call	18c2c <alt_dev_reg>
    ALTERA_UP_AVALON_PARALLEL_PORT_INIT ( HEX3_HEX0, HEX3_HEX0);
   18d38:	010000b4 	movhi	r4,2
   18d3c:	210be804 	addi	r4,r4,12192
   18d40:	0018c2c0 	call	18c2c <alt_dev_reg>
    ALTERA_UP_AVALON_PARALLEL_PORT_INIT ( HEX7_HEX4, HEX7_HEX4);
   18d44:	010000b4 	movhi	r4,2
   18d48:	210bf304 	addi	r4,r4,12236
   18d4c:	0018c2c0 	call	18c2c <alt_dev_reg>
    ALTERA_UP_AVALON_PARALLEL_PORT_INIT ( PUSHBUTTONS, Pushbuttons);
   18d50:	010000b4 	movhi	r4,2
   18d54:	210bfe04 	addi	r4,r4,12280
   18d58:	0018c2c0 	call	18c2c <alt_dev_reg>
    ALTERA_UP_AVALON_PARALLEL_PORT_INIT ( RED_LEDS, Red_LEDs);
   18d5c:	010000b4 	movhi	r4,2
   18d60:	210c0904 	addi	r4,r4,12324
   18d64:	0018c2c0 	call	18c2c <alt_dev_reg>
    ALTERA_UP_AVALON_PARALLEL_PORT_INIT ( SLIDER_SWITCHES, Slider_Switches);
   18d68:	010000b4 	movhi	r4,2
   18d6c:	210c1404 	addi	r4,r4,12368
   18d70:	0018c2c0 	call	18c2c <alt_dev_reg>
    ALTERA_UP_AVALON_PS2_INIT ( PS2_PORT, PS2_Port);
   18d74:	010000b4 	movhi	r4,2
   18d78:	210c1f04 	addi	r4,r4,12412
   18d7c:	001ebb80 	call	1ebb8 <alt_up_ps2_init>
   18d80:	010000b4 	movhi	r4,2
   18d84:	210c1f04 	addi	r4,r4,12412
   18d88:	0018c2c0 	call	18c2c <alt_dev_reg>
    ALTERA_UP_AVALON_PS2_INIT ( PS2_PORT_DUAL, PS2_Port_Dual);
   18d8c:	010000b4 	movhi	r4,2
   18d90:	210c2d04 	addi	r4,r4,12468
   18d94:	001ebb80 	call	1ebb8 <alt_up_ps2_init>
   18d98:	010000b4 	movhi	r4,2
   18d9c:	210c2d04 	addi	r4,r4,12468
   18da0:	0018c2c0 	call	18c2c <alt_dev_reg>
    ALTERA_UP_AVALON_RS232_INIT ( SERIAL_PORT, Serial_Port);
   18da4:	010000b4 	movhi	r4,2
   18da8:	210c3b04 	addi	r4,r4,12524
   18dac:	0018c2c0 	call	18c2c <alt_dev_reg>
    ALTERA_UP_AVALON_USB_INIT ( USB, USB);
   18db0:	010000b4 	movhi	r4,2
   18db4:	210c4604 	addi	r4,r4,12568
   18db8:	0018c2c0 	call	18c2c <alt_dev_reg>
    ALTERA_UP_AVALON_VIDEO_CHARACTER_BUFFER_WITH_DMA_INIT ( VGA_SUBSYSTEM_VGA_CHAR_BUFFER, VGA_Subsystem_VGA_Char_Buffer);
   18dbc:	008000b4 	movhi	r2,2
   18dc0:	108c5304 	addi	r2,r2,12620
   18dc4:	10800a17 	ldw	r2,40(r2)
   18dc8:	10800104 	addi	r2,r2,4
   18dcc:	10800017 	ldw	r2,0(r2)
   18dd0:	10ffffcc 	andi	r3,r2,65535
   18dd4:	008000b4 	movhi	r2,2
   18dd8:	108c5304 	addi	r2,r2,12620
   18ddc:	10c00c15 	stw	r3,48(r2)
   18de0:	008000b4 	movhi	r2,2
   18de4:	108c5304 	addi	r2,r2,12620
   18de8:	10800a17 	ldw	r2,40(r2)
   18dec:	10800104 	addi	r2,r2,4
   18df0:	10800017 	ldw	r2,0(r2)
   18df4:	1006d43a 	srli	r3,r2,16
   18df8:	008000b4 	movhi	r2,2
   18dfc:	108c5304 	addi	r2,r2,12620
   18e00:	10c00d15 	stw	r3,52(r2)
   18e04:	008000b4 	movhi	r2,2
   18e08:	108c5304 	addi	r2,r2,12620
   18e0c:	10800c17 	ldw	r2,48(r2)
   18e10:	10801068 	cmpgeui	r2,r2,65
   18e14:	1000081e 	bne	r2,zero,18e38 <alt_sys_init+0x1a0>
   18e18:	008000b4 	movhi	r2,2
   18e1c:	108c5304 	addi	r2,r2,12620
   18e20:	00c00fc4 	movi	r3,63
   18e24:	10c00f15 	stw	r3,60(r2)
   18e28:	008000b4 	movhi	r2,2
   18e2c:	108c5304 	addi	r2,r2,12620
   18e30:	00c00184 	movi	r3,6
   18e34:	10c01015 	stw	r3,64(r2)
   18e38:	008000b4 	movhi	r2,2
   18e3c:	108c5304 	addi	r2,r2,12620
   18e40:	10800d17 	ldw	r2,52(r2)
   18e44:	10800868 	cmpgeui	r2,r2,33
   18e48:	1000041e 	bne	r2,zero,18e5c <alt_sys_init+0x1c4>
   18e4c:	008000b4 	movhi	r2,2
   18e50:	108c5304 	addi	r2,r2,12620
   18e54:	00c007c4 	movi	r3,31
   18e58:	10c01115 	stw	r3,68(r2)
   18e5c:	010000b4 	movhi	r4,2
   18e60:	210c5304 	addi	r4,r4,12620
   18e64:	001f4d00 	call	1f4d0 <alt_up_char_buffer_init>
   18e68:	010000b4 	movhi	r4,2
   18e6c:	210c5304 	addi	r4,r4,12620
   18e70:	0018c2c0 	call	18c2c <alt_dev_reg>
    ALTERA_UP_AVALON_VIDEO_PIXEL_BUFFER_DMA_INIT ( VGA_SUBSYSTEM_VGA_PIXEL_DMA, VGA_Subsystem_VGA_Pixel_DMA);
   18e74:	008000b4 	movhi	r2,2
   18e78:	108c6504 	addi	r2,r2,12692
   18e7c:	10800a17 	ldw	r2,40(r2)
   18e80:	10800017 	ldw	r2,0(r2)
   18e84:	1007883a 	mov	r3,r2
   18e88:	008000b4 	movhi	r2,2
   18e8c:	108c6504 	addi	r2,r2,12692
   18e90:	10c00b15 	stw	r3,44(r2)
   18e94:	008000b4 	movhi	r2,2
   18e98:	108c6504 	addi	r2,r2,12692
   18e9c:	10800a17 	ldw	r2,40(r2)
   18ea0:	10800104 	addi	r2,r2,4
   18ea4:	10800017 	ldw	r2,0(r2)
   18ea8:	1007883a 	mov	r3,r2
   18eac:	008000b4 	movhi	r2,2
   18eb0:	108c6504 	addi	r2,r2,12692
   18eb4:	10c00c15 	stw	r3,48(r2)
   18eb8:	008000b4 	movhi	r2,2
   18ebc:	108c6504 	addi	r2,r2,12692
   18ec0:	10800a17 	ldw	r2,40(r2)
   18ec4:	10800204 	addi	r2,r2,8
   18ec8:	10800017 	ldw	r2,0(r2)
   18ecc:	10ffffcc 	andi	r3,r2,65535
   18ed0:	008000b4 	movhi	r2,2
   18ed4:	108c6504 	addi	r2,r2,12692
   18ed8:	10c00f15 	stw	r3,60(r2)
   18edc:	008000b4 	movhi	r2,2
   18ee0:	108c6504 	addi	r2,r2,12692
   18ee4:	10800a17 	ldw	r2,40(r2)
   18ee8:	10800204 	addi	r2,r2,8
   18eec:	10800017 	ldw	r2,0(r2)
   18ef0:	1006d43a 	srli	r3,r2,16
   18ef4:	008000b4 	movhi	r2,2
   18ef8:	108c6504 	addi	r2,r2,12692
   18efc:	10c01015 	stw	r3,64(r2)
   18f00:	008000b4 	movhi	r2,2
   18f04:	108c6504 	addi	r2,r2,12692
   18f08:	10800a17 	ldw	r2,40(r2)
   18f0c:	10800304 	addi	r2,r2,12
   18f10:	10800017 	ldw	r2,0(r2)
   18f14:	1005d07a 	srai	r2,r2,1
   18f18:	10c0004c 	andi	r3,r2,1
   18f1c:	008000b4 	movhi	r2,2
   18f20:	108c6504 	addi	r2,r2,12692
   18f24:	10c00d15 	stw	r3,52(r2)
   18f28:	008000b4 	movhi	r2,2
   18f2c:	108c6504 	addi	r2,r2,12692
   18f30:	10800a17 	ldw	r2,40(r2)
   18f34:	10800304 	addi	r2,r2,12
   18f38:	10800017 	ldw	r2,0(r2)
   18f3c:	1005d13a 	srai	r2,r2,4
   18f40:	10c003cc 	andi	r3,r2,15
   18f44:	008000b4 	movhi	r2,2
   18f48:	108c6504 	addi	r2,r2,12692
   18f4c:	10c00e15 	stw	r3,56(r2)
   18f50:	008000b4 	movhi	r2,2
   18f54:	108c6504 	addi	r2,r2,12692
   18f58:	10800a17 	ldw	r2,40(r2)
   18f5c:	10800304 	addi	r2,r2,12
   18f60:	10800017 	ldw	r2,0(r2)
   18f64:	1005d43a 	srai	r2,r2,16
   18f68:	e0bfff05 	stb	r2,-4(fp)
   18f6c:	008000b4 	movhi	r2,2
   18f70:	108c6504 	addi	r2,r2,12692
   18f74:	10800a17 	ldw	r2,40(r2)
   18f78:	10800304 	addi	r2,r2,12
   18f7c:	10800017 	ldw	r2,0(r2)
   18f80:	1004d63a 	srli	r2,r2,24
   18f84:	e0bfff45 	stb	r2,-3(fp)
   18f88:	008000b4 	movhi	r2,2
   18f8c:	108c6504 	addi	r2,r2,12692
   18f90:	10800e17 	ldw	r2,56(r2)
   18f94:	10800058 	cmpnei	r2,r2,1
   18f98:	1000041e 	bne	r2,zero,18fac <alt_sys_init+0x314>
   18f9c:	008000b4 	movhi	r2,2
   18fa0:	108c6504 	addi	r2,r2,12692
   18fa4:	10001115 	stw	zero,68(r2)
   18fa8:	00000e06 	br	18fe4 <alt_sys_init+0x34c>
   18fac:	008000b4 	movhi	r2,2
   18fb0:	108c6504 	addi	r2,r2,12692
   18fb4:	10800e17 	ldw	r2,56(r2)
   18fb8:	10800098 	cmpnei	r2,r2,2
   18fbc:	1000051e 	bne	r2,zero,18fd4 <alt_sys_init+0x33c>
   18fc0:	008000b4 	movhi	r2,2
   18fc4:	108c6504 	addi	r2,r2,12692
   18fc8:	00c00044 	movi	r3,1
   18fcc:	10c01115 	stw	r3,68(r2)
   18fd0:	00000406 	br	18fe4 <alt_sys_init+0x34c>
   18fd4:	008000b4 	movhi	r2,2
   18fd8:	108c6504 	addi	r2,r2,12692
   18fdc:	00c00084 	movi	r3,2
   18fe0:	10c01115 	stw	r3,68(r2)
   18fe4:	e0bfff03 	ldbu	r2,-4(fp)
   18fe8:	00c00804 	movi	r3,32
   18fec:	1885c83a 	sub	r2,r3,r2
   18ff0:	00ffffc4 	movi	r3,-1
   18ff4:	1886d83a 	srl	r3,r3,r2
   18ff8:	008000b4 	movhi	r2,2
   18ffc:	108c6504 	addi	r2,r2,12692
   19000:	10c01215 	stw	r3,72(r2)
   19004:	e0ffff03 	ldbu	r3,-4(fp)
   19008:	008000b4 	movhi	r2,2
   1900c:	108c6504 	addi	r2,r2,12692
   19010:	10801117 	ldw	r2,68(r2)
   19014:	1887883a 	add	r3,r3,r2
   19018:	008000b4 	movhi	r2,2
   1901c:	108c6504 	addi	r2,r2,12692
   19020:	10c01315 	stw	r3,76(r2)
   19024:	e0bfff43 	ldbu	r2,-3(fp)
   19028:	00c00804 	movi	r3,32
   1902c:	1885c83a 	sub	r2,r3,r2
   19030:	00ffffc4 	movi	r3,-1
   19034:	1886d83a 	srl	r3,r3,r2
   19038:	008000b4 	movhi	r2,2
   1903c:	108c6504 	addi	r2,r2,12692
   19040:	10c01415 	stw	r3,80(r2)
   19044:	010000b4 	movhi	r4,2
   19048:	210c6504 	addi	r4,r4,12692
   1904c:	0018c2c0 	call	18c2c <alt_dev_reg>
    ALTERA_UP_SD_CARD_AVALON_INTERFACE_INIT ( SD_CARD, SD_Card);
   19050:	010000b4 	movhi	r4,2
   19054:	210c7a04 	addi	r4,r4,12776
   19058:	0018c2c0 	call	18c2c <alt_dev_reg>
}
   1905c:	e037883a 	mov	sp,fp
   19060:	dfc00117 	ldw	ra,4(sp)
   19064:	df000017 	ldw	fp,0(sp)
   19068:	dec00204 	addi	sp,sp,8
   1906c:	f800283a 	ret

00019070 <Write_Sector_Data>:
///////////////////////////////////////////////////////////////////////////

        
bool Write_Sector_Data(int sector_index, int partition_offset)
// This function writes a sector at the specified address on the SD Card.
{
   19070:	defffa04 	addi	sp,sp,-24
   19074:	dfc00515 	stw	ra,20(sp)
   19078:	df000415 	stw	fp,16(sp)
   1907c:	df000404 	addi	fp,sp,16
   19080:	e13ffe15 	stw	r4,-8(fp)
   19084:	e17fff15 	stw	r5,-4(fp)
    bool result = false;
   19088:	e03ffc15 	stw	zero,-16(fp)
    
    if (alt_up_sd_card_is_Present())
   1908c:	001bd840 	call	1bd84 <alt_up_sd_card_is_Present>
   19090:	10001e26 	beq	r2,zero,1910c <Write_Sector_Data+0x9c>
    {
        short int reg_state = 0xff;
   19094:	00803fc4 	movi	r2,255
   19098:	e0bffd0d 	sth	r2,-12(fp)

		/* Multiply sector offset by sector size to get the address. Sector size is 512. Also,
         * the SD card reads data in 512 byte chunks, so the address must be a multiple of 512. */
        IOWR_32DIRECT(command_argument_register, 0, (sector_index + partition_offset)*512);
   1909c:	d0a81617 	ldw	r2,-24488(gp)
   190a0:	e13ffe17 	ldw	r4,-8(fp)
   190a4:	e0ffff17 	ldw	r3,-4(fp)
   190a8:	20c7883a 	add	r3,r4,r3
   190ac:	1806927a 	slli	r3,r3,9
   190b0:	10c00035 	stwio	r3,0(r2)
        IOWR_16DIRECT(command_register, 0, CMD_WRITE_BLOCK);
   190b4:	d0a81517 	ldw	r2,-24492(gp)
   190b8:	00c00604 	movi	r3,24
   190bc:	10c0002d 	sthio	r3,0(r2)
        do {
            reg_state = (short int) IORD_16DIRECT(aux_status_register,0);
   190c0:	d0a81217 	ldw	r2,-24504(gp)
   190c4:	1080002b 	ldhuio	r2,0(r2)
   190c8:	10bfffcc 	andi	r2,r2,65535
   190cc:	e0bffd0d 	sth	r2,-12(fp)
        } while ((reg_state & 0x04)!=0);
   190d0:	e0bffd0b 	ldhu	r2,-12(fp)
   190d4:	10bfffcc 	andi	r2,r2,65535
   190d8:	1080010c 	andi	r2,r2,4
   190dc:	103ff81e 	bne	r2,zero,190c0 <__alt_mem_Flash_flash_data+0xf40190c0>
        // Make sure the request did not time out.
        if ((reg_state & 0x10) == 0)
   190e0:	e0bffd0b 	ldhu	r2,-12(fp)
   190e4:	10bfffcc 	andi	r2,r2,65535
   190e8:	1080040c 	andi	r2,r2,16
   190ec:	1000071e 	bne	r2,zero,1910c <Write_Sector_Data+0x9c>
        {
            result = true;
   190f0:	00800044 	movi	r2,1
   190f4:	e0bffc15 	stw	r2,-16(fp)
            current_sector_modified = false;
   190f8:	d0281b15 	stw	zero,-24468(gp)
            current_sector_index = sector_index+partition_offset;
   190fc:	e0fffe17 	ldw	r3,-8(fp)
   19100:	e0bfff17 	ldw	r2,-4(fp)
   19104:	1885883a 	add	r2,r3,r2
   19108:	d0a81c15 	stw	r2,-24464(gp)
        }
    }
    return result;
   1910c:	e0bffc17 	ldw	r2,-16(fp)
}
   19110:	e037883a 	mov	sp,fp
   19114:	dfc00117 	ldw	ra,4(sp)
   19118:	df000017 	ldw	fp,0(sp)
   1911c:	dec00204 	addi	sp,sp,8
   19120:	f800283a 	ret

00019124 <Save_Modified_Sector>:


bool Save_Modified_Sector()
// If the sector has been modified, then save it to the SD Card.
{
   19124:	defffd04 	addi	sp,sp,-12
   19128:	dfc00215 	stw	ra,8(sp)
   1912c:	df000115 	stw	fp,4(sp)
   19130:	df000104 	addi	fp,sp,4
    bool result = true;
   19134:	00800044 	movi	r2,1
   19138:	e0bfff15 	stw	r2,-4(fp)
    if (current_sector_modified)
   1913c:	d0a81b17 	ldw	r2,-24468(gp)
   19140:	10000526 	beq	r2,zero,19158 <Save_Modified_Sector+0x34>
    {
        result = Write_Sector_Data(current_sector_index, 0);
   19144:	d0a81c17 	ldw	r2,-24464(gp)
   19148:	1009883a 	mov	r4,r2
   1914c:	000b883a 	mov	r5,zero
   19150:	00190700 	call	19070 <Write_Sector_Data>
   19154:	e0bfff15 	stw	r2,-4(fp)
    }
    return result;
   19158:	e0bfff17 	ldw	r2,-4(fp)
}
   1915c:	e037883a 	mov	sp,fp
   19160:	dfc00117 	ldw	ra,4(sp)
   19164:	df000017 	ldw	fp,0(sp)
   19168:	dec00204 	addi	sp,sp,8
   1916c:	f800283a 	ret

00019170 <Read_Sector_Data>:


bool Read_Sector_Data(int sector_index, int partition_offset)
// This function reads a sector at the specified address on the SD Card.
{
   19170:	defffa04 	addi	sp,sp,-24
   19174:	dfc00515 	stw	ra,20(sp)
   19178:	df000415 	stw	fp,16(sp)
   1917c:	df000404 	addi	fp,sp,16
   19180:	e13ffe15 	stw	r4,-8(fp)
   19184:	e17fff15 	stw	r5,-4(fp)
	bool result = false;
   19188:	e03ffc15 	stw	zero,-16(fp)
    
	if (alt_up_sd_card_is_Present())
   1918c:	001bd840 	call	1bd84 <alt_up_sd_card_is_Present>
   19190:	10002726 	beq	r2,zero,19230 <Read_Sector_Data+0xc0>
	{
		short int reg_state = 0xff;
   19194:	00803fc4 	movi	r2,255
   19198:	e0bffd0d 	sth	r2,-12(fp)
        
        /* Write data to the SD card if the current buffer is out of date. */
        if (current_sector_modified)
   1919c:	d0a81b17 	ldw	r2,-24468(gp)
   191a0:	10000726 	beq	r2,zero,191c0 <Read_Sector_Data+0x50>
        {
            if (Write_Sector_Data(current_sector_index, 0) == false)
   191a4:	d0a81c17 	ldw	r2,-24464(gp)
   191a8:	1009883a 	mov	r4,r2
   191ac:	000b883a 	mov	r5,zero
   191b0:	00190700 	call	19070 <Write_Sector_Data>
   191b4:	1000021e 	bne	r2,zero,191c0 <Read_Sector_Data+0x50>
            {
                return false;
   191b8:	0005883a 	mov	r2,zero
   191bc:	00001d06 	br	19234 <Read_Sector_Data+0xc4>
            }
        }
		/* Multiply sector offset by sector size to get the address. Sector size is 512. Also,
		 * the SD card reads data in 512 byte chunks, so the address must be a multiple of 512. */
        IOWR_32DIRECT(command_argument_register, 0, (sector_index + partition_offset)*512);
   191c0:	d0a81617 	ldw	r2,-24488(gp)
   191c4:	e13ffe17 	ldw	r4,-8(fp)
   191c8:	e0ffff17 	ldw	r3,-4(fp)
   191cc:	20c7883a 	add	r3,r4,r3
   191d0:	1806927a 	slli	r3,r3,9
   191d4:	10c00035 	stwio	r3,0(r2)
        IOWR_16DIRECT(command_register, 0, CMD_READ_BLOCK);
   191d8:	d0a81517 	ldw	r2,-24492(gp)
   191dc:	00c00444 	movi	r3,17
   191e0:	10c0002d 	sthio	r3,0(r2)
		do {
			reg_state = (short int) IORD_16DIRECT(aux_status_register,0);
   191e4:	d0a81217 	ldw	r2,-24504(gp)
   191e8:	1080002b 	ldhuio	r2,0(r2)
   191ec:	10bfffcc 	andi	r2,r2,65535
   191f0:	e0bffd0d 	sth	r2,-12(fp)
		} while ((reg_state & 0x04)!=0);
   191f4:	e0bffd0b 	ldhu	r2,-12(fp)
   191f8:	10bfffcc 	andi	r2,r2,65535
   191fc:	1080010c 	andi	r2,r2,4
   19200:	103ff81e 	bne	r2,zero,191e4 <__alt_mem_Flash_flash_data+0xf40191e4>
		// Make sure the request did not time out.
		if ((reg_state & 0x10) == 0)
   19204:	e0bffd0b 	ldhu	r2,-12(fp)
   19208:	10bfffcc 	andi	r2,r2,65535
   1920c:	1080040c 	andi	r2,r2,16
   19210:	1000071e 	bne	r2,zero,19230 <Read_Sector_Data+0xc0>
		{
			result = true;
   19214:	00800044 	movi	r2,1
   19218:	e0bffc15 	stw	r2,-16(fp)
            current_sector_modified = false;
   1921c:	d0281b15 	stw	zero,-24468(gp)
            current_sector_index = sector_index+partition_offset;
   19220:	e0fffe17 	ldw	r3,-8(fp)
   19224:	e0bfff17 	ldw	r2,-4(fp)
   19228:	1885883a 	add	r2,r3,r2
   1922c:	d0a81c15 	stw	r2,-24464(gp)
		}
	}
	return result;
   19230:	e0bffc17 	ldw	r2,-16(fp)
}
   19234:	e037883a 	mov	sp,fp
   19238:	dfc00117 	ldw	ra,4(sp)
   1923c:	df000017 	ldw	fp,0(sp)
   19240:	dec00204 	addi	sp,sp,8
   19244:	f800283a 	ret

00019248 <get_cluster_flag>:


bool get_cluster_flag(unsigned int cluster_index, unsigned short int *flag)
// Read a cluster flag.
{
   19248:	defffb04 	addi	sp,sp,-20
   1924c:	dfc00415 	stw	ra,16(sp)
   19250:	df000315 	stw	fp,12(sp)
   19254:	df000304 	addi	fp,sp,12
   19258:	e13ffe15 	stw	r4,-8(fp)
   1925c:	e17fff15 	stw	r5,-4(fp)
    unsigned int sector_index = (cluster_index / 256) + fat_partition_offset_in_512_byte_sectors;
   19260:	e0bffe17 	ldw	r2,-8(fp)
   19264:	1004d23a 	srli	r2,r2,8
   19268:	d0e81817 	ldw	r3,-24480(gp)
   1926c:	10c5883a 	add	r2,r2,r3
   19270:	e0bffd15 	stw	r2,-12(fp)
    
    sector_index  = sector_index + boot_sector_data.first_fat_sector_offset;
   19274:	008000f4 	movhi	r2,3
   19278:	10a15704 	addi	r2,r2,-31396
   1927c:	10801117 	ldw	r2,68(r2)
   19280:	e0fffd17 	ldw	r3,-12(fp)
   19284:	1885883a 	add	r2,r3,r2
   19288:	e0bffd15 	stw	r2,-12(fp)
     
    if (sector_index != current_sector_index)
   1928c:	d0a81c17 	ldw	r2,-24464(gp)
   19290:	e0fffd17 	ldw	r3,-12(fp)
   19294:	18800726 	beq	r3,r2,192b4 <get_cluster_flag+0x6c>
    {
        if (Read_Sector_Data(sector_index, 0) == false)
   19298:	e0bffd17 	ldw	r2,-12(fp)
   1929c:	1009883a 	mov	r4,r2
   192a0:	000b883a 	mov	r5,zero
   192a4:	00191700 	call	19170 <Read_Sector_Data>
   192a8:	1000021e 	bne	r2,zero,192b4 <get_cluster_flag+0x6c>
        {
            return false;
   192ac:	0005883a 	mov	r2,zero
   192b0:	00000d06 	br	192e8 <get_cluster_flag+0xa0>
        }
    }
    *flag = (unsigned short int) IORD_16DIRECT(device_pointer->base, 2*(cluster_index % 256));
   192b4:	e0bffe17 	ldw	r2,-8(fp)
   192b8:	10803fcc 	andi	r2,r2,255
   192bc:	1085883a 	add	r2,r2,r2
   192c0:	1007883a 	mov	r3,r2
   192c4:	d0a81a17 	ldw	r2,-24472(gp)
   192c8:	10800a17 	ldw	r2,40(r2)
   192cc:	1885883a 	add	r2,r3,r2
   192d0:	1080002b 	ldhuio	r2,0(r2)
   192d4:	10bfffcc 	andi	r2,r2,65535
   192d8:	1007883a 	mov	r3,r2
   192dc:	e0bfff17 	ldw	r2,-4(fp)
   192e0:	10c0000d 	sth	r3,0(r2)
    return true;
   192e4:	00800044 	movi	r2,1
}
   192e8:	e037883a 	mov	sp,fp
   192ec:	dfc00117 	ldw	ra,4(sp)
   192f0:	df000017 	ldw	fp,0(sp)
   192f4:	dec00204 	addi	sp,sp,8
   192f8:	f800283a 	ret

000192fc <mark_cluster>:


bool mark_cluster(unsigned int cluster_index, short int flag, bool first_fat)
// Place a marker on the specified cluster in a given FAT.
{
   192fc:	defffa04 	addi	sp,sp,-24
   19300:	dfc00515 	stw	ra,20(sp)
   19304:	df000415 	stw	fp,16(sp)
   19308:	df000404 	addi	fp,sp,16
   1930c:	e13ffd15 	stw	r4,-12(fp)
   19310:	2805883a 	mov	r2,r5
   19314:	e1bfff15 	stw	r6,-4(fp)
   19318:	e0bffe0d 	sth	r2,-8(fp)
    unsigned int sector_index = (cluster_index / 256) +  fat_partition_offset_in_512_byte_sectors;
   1931c:	e0bffd17 	ldw	r2,-12(fp)
   19320:	1004d23a 	srli	r2,r2,8
   19324:	d0e81817 	ldw	r3,-24480(gp)
   19328:	10c5883a 	add	r2,r2,r3
   1932c:	e0bffc15 	stw	r2,-16(fp)
    
    if (first_fat)
   19330:	e0bfff17 	ldw	r2,-4(fp)
   19334:	10000726 	beq	r2,zero,19354 <mark_cluster+0x58>
    {
        sector_index  = sector_index + boot_sector_data.first_fat_sector_offset;
   19338:	008000f4 	movhi	r2,3
   1933c:	10a15704 	addi	r2,r2,-31396
   19340:	10801117 	ldw	r2,68(r2)
   19344:	e0fffc17 	ldw	r3,-16(fp)
   19348:	1885883a 	add	r2,r3,r2
   1934c:	e0bffc15 	stw	r2,-16(fp)
   19350:	00000606 	br	1936c <mark_cluster+0x70>
    }
    else
    {
        sector_index  = sector_index + boot_sector_data.second_fat_sector_offset;
   19354:	008000f4 	movhi	r2,3
   19358:	10a15704 	addi	r2,r2,-31396
   1935c:	10801217 	ldw	r2,72(r2)
   19360:	e0fffc17 	ldw	r3,-16(fp)
   19364:	1885883a 	add	r2,r3,r2
   19368:	e0bffc15 	stw	r2,-16(fp)
    }
     
    if (sector_index != current_sector_index)
   1936c:	d0a81c17 	ldw	r2,-24464(gp)
   19370:	e0fffc17 	ldw	r3,-16(fp)
   19374:	18800726 	beq	r3,r2,19394 <mark_cluster+0x98>
    {
        if (Read_Sector_Data(sector_index, 0) == false)
   19378:	e0bffc17 	ldw	r2,-16(fp)
   1937c:	1009883a 	mov	r4,r2
   19380:	000b883a 	mov	r5,zero
   19384:	00191700 	call	19170 <Read_Sector_Data>
   19388:	1000021e 	bne	r2,zero,19394 <mark_cluster+0x98>
        {
            return false;
   1938c:	0005883a 	mov	r2,zero
   19390:	00000d06 	br	193c8 <mark_cluster+0xcc>
        }
    }
    IOWR_16DIRECT(device_pointer->base, 2*(cluster_index % 256), flag);
   19394:	e0bffd17 	ldw	r2,-12(fp)
   19398:	10803fcc 	andi	r2,r2,255
   1939c:	1085883a 	add	r2,r2,r2
   193a0:	1007883a 	mov	r3,r2
   193a4:	d0a81a17 	ldw	r2,-24472(gp)
   193a8:	10800a17 	ldw	r2,40(r2)
   193ac:	1885883a 	add	r2,r3,r2
   193b0:	1007883a 	mov	r3,r2
   193b4:	e0bffe0f 	ldh	r2,-8(fp)
   193b8:	1880002d 	sthio	r2,0(r3)
    current_sector_modified = true;
   193bc:	00800044 	movi	r2,1
   193c0:	d0a81b15 	stw	r2,-24468(gp)
    return true;
   193c4:	00800044 	movi	r2,1
}
   193c8:	e037883a 	mov	sp,fp
   193cc:	dfc00117 	ldw	ra,4(sp)
   193d0:	df000017 	ldw	fp,0(sp)
   193d4:	dec00204 	addi	sp,sp,8
   193d8:	f800283a 	ret

000193dc <Check_for_Master_Boot_Record>:

bool Check_for_Master_Boot_Record(void)
// This function reads the first 512 bytes on the SD Card. This data should
// contain the Master Boot Record. If it does, then print
// relevant information and return true. Otherwise, return false. 
{
   193dc:	defff704 	addi	sp,sp,-36
   193e0:	dfc00815 	stw	ra,32(sp)
   193e4:	df000715 	stw	fp,28(sp)
   193e8:	df000704 	addi	fp,sp,28
	bool result = false;
   193ec:	e03ff915 	stw	zero,-28(fp)
	int index;
	int end, offset, partition_size;

	/* Load the first 512 bytes of data from SD card. */
	if (Read_Sector_Data(0, 0))
   193f0:	0009883a 	mov	r4,zero
   193f4:	000b883a 	mov	r5,zero
   193f8:	00191700 	call	19170 <Read_Sector_Data>
   193fc:	10005c26 	beq	r2,zero,19570 <Check_for_Master_Boot_Record+0x194>
	{
		end =  (short int) IORD_16DIRECT(device_pointer->base,0x1fe);
   19400:	d0a81a17 	ldw	r2,-24472(gp)
   19404:	10800a17 	ldw	r2,40(r2)
   19408:	10807f84 	addi	r2,r2,510
   1940c:	1080002b 	ldhuio	r2,0(r2)
   19410:	10bfffcc 	andi	r2,r2,65535
   19414:	10bfffcc 	andi	r2,r2,65535
   19418:	10a0001c 	xori	r2,r2,32768
   1941c:	10a00004 	addi	r2,r2,-32768
   19420:	e0bffb15 	stw	r2,-20(fp)

		// Check if the end of the sector contains an end string 0xaa55.
		if ((end & 0x0000ffff) == 0x0000aa55)
   19424:	e0bffb17 	ldw	r2,-20(fp)
   19428:	10ffffcc 	andi	r3,r2,65535
   1942c:	00aa9554 	movui	r2,43605
   19430:	18804f1e 	bne	r3,r2,19570 <Check_for_Master_Boot_Record+0x194>
		{
			// Check four partition entries and see if any are valid
			for (index = 0; index < 4; index++)
   19434:	e03ffa15 	stw	zero,-24(fp)
   19438:	00004a06 	br	19564 <Check_for_Master_Boot_Record+0x188>
			{
				int partition_data_offset = (index * 16) + 0x01be;
   1943c:	e0bffa17 	ldw	r2,-24(fp)
   19440:	1004913a 	slli	r2,r2,4
   19444:	10806f84 	addi	r2,r2,446
   19448:	e0bffc15 	stw	r2,-16(fp)
				char type;
		        
				// Read Partition type
				type = (unsigned char) IORD_8DIRECT(device_pointer->base,partition_data_offset + 0x04);
   1944c:	d0a81a17 	ldw	r2,-24472(gp)
   19450:	10c00a17 	ldw	r3,40(r2)
   19454:	e0bffc17 	ldw	r2,-16(fp)
   19458:	1885883a 	add	r2,r3,r2
   1945c:	10800104 	addi	r2,r2,4
   19460:	10800023 	ldbuio	r2,0(r2)
   19464:	10803fcc 	andi	r2,r2,255
   19468:	e0bffd05 	stb	r2,-12(fp)

				// Check if this is an FAT parition
				if ((type == 1) || (type == 4) || (type == 6) || (type == 14))
   1946c:	e0bffd07 	ldb	r2,-12(fp)
   19470:	10800060 	cmpeqi	r2,r2,1
   19474:	1000091e 	bne	r2,zero,1949c <Check_for_Master_Boot_Record+0xc0>
   19478:	e0bffd07 	ldb	r2,-12(fp)
   1947c:	10800120 	cmpeqi	r2,r2,4
   19480:	1000061e 	bne	r2,zero,1949c <Check_for_Master_Boot_Record+0xc0>
   19484:	e0bffd07 	ldb	r2,-12(fp)
   19488:	108001a0 	cmpeqi	r2,r2,6
   1948c:	1000031e 	bne	r2,zero,1949c <Check_for_Master_Boot_Record+0xc0>
   19490:	e0bffd07 	ldb	r2,-12(fp)
   19494:	10800398 	cmpnei	r2,r2,14
   19498:	10002f1e 	bne	r2,zero,19558 <Check_for_Master_Boot_Record+0x17c>
				{
					// Get partition offset and size.
					offset = (((unsigned short int) IORD_16DIRECT(device_pointer->base,partition_data_offset + 0x0A)) << 16) | ((unsigned short int) IORD_16DIRECT(device_pointer->base,partition_data_offset + 0x08));
   1949c:	d0a81a17 	ldw	r2,-24472(gp)
   194a0:	10c00a17 	ldw	r3,40(r2)
   194a4:	e0bffc17 	ldw	r2,-16(fp)
   194a8:	1885883a 	add	r2,r3,r2
   194ac:	10800284 	addi	r2,r2,10
   194b0:	1080002b 	ldhuio	r2,0(r2)
   194b4:	10bfffcc 	andi	r2,r2,65535
   194b8:	10bfffcc 	andi	r2,r2,65535
   194bc:	1006943a 	slli	r3,r2,16
   194c0:	d0a81a17 	ldw	r2,-24472(gp)
   194c4:	11000a17 	ldw	r4,40(r2)
   194c8:	e0bffc17 	ldw	r2,-16(fp)
   194cc:	2085883a 	add	r2,r4,r2
   194d0:	10800204 	addi	r2,r2,8
   194d4:	1080002b 	ldhuio	r2,0(r2)
   194d8:	10bfffcc 	andi	r2,r2,65535
   194dc:	10bfffcc 	andi	r2,r2,65535
   194e0:	1884b03a 	or	r2,r3,r2
   194e4:	e0bffe15 	stw	r2,-8(fp)
					partition_size = (((unsigned short int) IORD_16DIRECT(device_pointer->base,partition_data_offset + 0x0E)) << 16) | ((unsigned short int) IORD_16DIRECT(device_pointer->base,partition_data_offset + 0x0C));
   194e8:	d0a81a17 	ldw	r2,-24472(gp)
   194ec:	10c00a17 	ldw	r3,40(r2)
   194f0:	e0bffc17 	ldw	r2,-16(fp)
   194f4:	1885883a 	add	r2,r3,r2
   194f8:	10800384 	addi	r2,r2,14
   194fc:	1080002b 	ldhuio	r2,0(r2)
   19500:	10bfffcc 	andi	r2,r2,65535
   19504:	10bfffcc 	andi	r2,r2,65535
   19508:	1006943a 	slli	r3,r2,16
   1950c:	d0a81a17 	ldw	r2,-24472(gp)
   19510:	11000a17 	ldw	r4,40(r2)
   19514:	e0bffc17 	ldw	r2,-16(fp)
   19518:	2085883a 	add	r2,r4,r2
   1951c:	10800304 	addi	r2,r2,12
   19520:	1080002b 	ldhuio	r2,0(r2)
   19524:	10bfffcc 	andi	r2,r2,65535
   19528:	10bfffcc 	andi	r2,r2,65535
   1952c:	1884b03a 	or	r2,r3,r2
   19530:	e0bfff15 	stw	r2,-4(fp)
		            
					// Check if the partition is valid
					if (partition_size > 0)
   19534:	e0bfff17 	ldw	r2,-4(fp)
   19538:	0080070e 	bge	zero,r2,19558 <Check_for_Master_Boot_Record+0x17c>
					{
						result = true;
   1953c:	00800044 	movi	r2,1
   19540:	e0bff915 	stw	r2,-28(fp)
						fat_partition_size_in_512_byte_sectors = partition_size;
   19544:	e0bfff17 	ldw	r2,-4(fp)
   19548:	d0a81915 	stw	r2,-24476(gp)
						fat_partition_offset_in_512_byte_sectors = offset;
   1954c:	e0bffe17 	ldw	r2,-8(fp)
   19550:	d0a81815 	stw	r2,-24480(gp)
						break;
   19554:	00000606 	br	19570 <Check_for_Master_Boot_Record+0x194>

		// Check if the end of the sector contains an end string 0xaa55.
		if ((end & 0x0000ffff) == 0x0000aa55)
		{
			// Check four partition entries and see if any are valid
			for (index = 0; index < 4; index++)
   19558:	e0bffa17 	ldw	r2,-24(fp)
   1955c:	10800044 	addi	r2,r2,1
   19560:	e0bffa15 	stw	r2,-24(fp)
   19564:	e0bffa17 	ldw	r2,-24(fp)
   19568:	10800110 	cmplti	r2,r2,4
   1956c:	103fb31e 	bne	r2,zero,1943c <__alt_mem_Flash_flash_data+0xf401943c>
				}
			}
		}
	}

	return result;
   19570:	e0bff917 	ldw	r2,-28(fp)
}
   19574:	e037883a 	mov	sp,fp
   19578:	dfc00117 	ldw	ra,4(sp)
   1957c:	df000017 	ldw	fp,0(sp)
   19580:	dec00204 	addi	sp,sp,8
   19584:	f800283a 	ret

00019588 <Read_File_Record_At_Offset>:


bool Read_File_Record_At_Offset(int offset, t_file_record *record, unsigned int cluster_index, unsigned int sector_in_cluster)
// This function reads a file record
{
   19588:	defff804 	addi	sp,sp,-32
   1958c:	dfc00715 	stw	ra,28(sp)
   19590:	df000615 	stw	fp,24(sp)
   19594:	df000604 	addi	fp,sp,24
   19598:	e13ffc15 	stw	r4,-16(fp)
   1959c:	e17ffd15 	stw	r5,-12(fp)
   195a0:	e1bffe15 	stw	r6,-8(fp)
   195a4:	e1ffff15 	stw	r7,-4(fp)
	bool result = false;
   195a8:	e03ffa15 	stw	zero,-24(fp)
	if (((offset & 0x01f) == 0) && (alt_up_sd_card_is_Present()) && (is_sd_card_formated_as_FAT16))
   195ac:	e0bffc17 	ldw	r2,-16(fp)
   195b0:	108007cc 	andi	r2,r2,31
   195b4:	10008d1e 	bne	r2,zero,197ec <Read_File_Record_At_Offset+0x264>
   195b8:	001bd840 	call	1bd84 <alt_up_sd_card_is_Present>
   195bc:	10008b26 	beq	r2,zero,197ec <Read_File_Record_At_Offset+0x264>
   195c0:	d0a81117 	ldw	r2,-24508(gp)
   195c4:	10008926 	beq	r2,zero,197ec <Read_File_Record_At_Offset+0x264>
	{
		int counter;

		for (counter = 0; counter < 8; counter++)
   195c8:	e03ffb15 	stw	zero,-20(fp)
   195cc:	00001106 	br	19614 <Read_File_Record_At_Offset+0x8c>
		{
			record->name[counter] = (char) IORD_8DIRECT(device_pointer->base, offset+counter);
   195d0:	e0fffc17 	ldw	r3,-16(fp)
   195d4:	e0bffb17 	ldw	r2,-20(fp)
   195d8:	1885883a 	add	r2,r3,r2
   195dc:	1007883a 	mov	r3,r2
   195e0:	d0a81a17 	ldw	r2,-24472(gp)
   195e4:	10800a17 	ldw	r2,40(r2)
   195e8:	1885883a 	add	r2,r3,r2
   195ec:	10800023 	ldbuio	r2,0(r2)
   195f0:	10803fcc 	andi	r2,r2,255
   195f4:	1009883a 	mov	r4,r2
   195f8:	e0fffd17 	ldw	r3,-12(fp)
   195fc:	e0bffb17 	ldw	r2,-20(fp)
   19600:	1885883a 	add	r2,r3,r2
   19604:	11000005 	stb	r4,0(r2)
	bool result = false;
	if (((offset & 0x01f) == 0) && (alt_up_sd_card_is_Present()) && (is_sd_card_formated_as_FAT16))
	{
		int counter;

		for (counter = 0; counter < 8; counter++)
   19608:	e0bffb17 	ldw	r2,-20(fp)
   1960c:	10800044 	addi	r2,r2,1
   19610:	e0bffb15 	stw	r2,-20(fp)
   19614:	e0bffb17 	ldw	r2,-20(fp)
   19618:	10800210 	cmplti	r2,r2,8
   1961c:	103fec1e 	bne	r2,zero,195d0 <__alt_mem_Flash_flash_data+0xf40195d0>
		{
			record->name[counter] = (char) IORD_8DIRECT(device_pointer->base, offset+counter);
		}        
		for (counter = 0; counter < 3; counter++)
   19620:	e03ffb15 	stw	zero,-20(fp)
   19624:	00001306 	br	19674 <Read_File_Record_At_Offset+0xec>
		{
			record->extension[counter] = (char) IORD_8DIRECT(device_pointer->base, offset+counter+8);
   19628:	e0fffc17 	ldw	r3,-16(fp)
   1962c:	e0bffb17 	ldw	r2,-20(fp)
   19630:	1885883a 	add	r2,r3,r2
   19634:	1007883a 	mov	r3,r2
   19638:	d0a81a17 	ldw	r2,-24472(gp)
   1963c:	10800a17 	ldw	r2,40(r2)
   19640:	1885883a 	add	r2,r3,r2
   19644:	10800204 	addi	r2,r2,8
   19648:	10800023 	ldbuio	r2,0(r2)
   1964c:	10803fcc 	andi	r2,r2,255
   19650:	1009883a 	mov	r4,r2
   19654:	e0fffd17 	ldw	r3,-12(fp)
   19658:	e0bffb17 	ldw	r2,-20(fp)
   1965c:	1885883a 	add	r2,r3,r2
   19660:	10800204 	addi	r2,r2,8
   19664:	11000005 	stb	r4,0(r2)

		for (counter = 0; counter < 8; counter++)
		{
			record->name[counter] = (char) IORD_8DIRECT(device_pointer->base, offset+counter);
		}        
		for (counter = 0; counter < 3; counter++)
   19668:	e0bffb17 	ldw	r2,-20(fp)
   1966c:	10800044 	addi	r2,r2,1
   19670:	e0bffb15 	stw	r2,-20(fp)
   19674:	e0bffb17 	ldw	r2,-20(fp)
   19678:	108000d0 	cmplti	r2,r2,3
   1967c:	103fea1e 	bne	r2,zero,19628 <__alt_mem_Flash_flash_data+0xf4019628>
		{
			record->extension[counter] = (char) IORD_8DIRECT(device_pointer->base, offset+counter+8);
		}        
		record->attributes          =   (char) IORD_8DIRECT(device_pointer->base, offset+11);
   19680:	d0a81a17 	ldw	r2,-24472(gp)
   19684:	10c00a17 	ldw	r3,40(r2)
   19688:	e0bffc17 	ldw	r2,-16(fp)
   1968c:	1885883a 	add	r2,r3,r2
   19690:	108002c4 	addi	r2,r2,11
   19694:	10800023 	ldbuio	r2,0(r2)
   19698:	10803fcc 	andi	r2,r2,255
   1969c:	1007883a 	mov	r3,r2
   196a0:	e0bffd17 	ldw	r2,-12(fp)
   196a4:	10c002c5 	stb	r3,11(r2)
		/* Ignore reserved bytes at locations 12 and 13. */
		record->create_time         =   (unsigned short int) IORD_16DIRECT(device_pointer->base, offset+14);
   196a8:	d0a81a17 	ldw	r2,-24472(gp)
   196ac:	10c00a17 	ldw	r3,40(r2)
   196b0:	e0bffc17 	ldw	r2,-16(fp)
   196b4:	1885883a 	add	r2,r3,r2
   196b8:	10800384 	addi	r2,r2,14
   196bc:	1080002b 	ldhuio	r2,0(r2)
   196c0:	10bfffcc 	andi	r2,r2,65535
   196c4:	1007883a 	mov	r3,r2
   196c8:	e0bffd17 	ldw	r2,-12(fp)
   196cc:	10c0030d 	sth	r3,12(r2)
		record->create_date         =   (unsigned short int) IORD_16DIRECT(device_pointer->base, offset+16);
   196d0:	d0a81a17 	ldw	r2,-24472(gp)
   196d4:	10c00a17 	ldw	r3,40(r2)
   196d8:	e0bffc17 	ldw	r2,-16(fp)
   196dc:	1885883a 	add	r2,r3,r2
   196e0:	10800404 	addi	r2,r2,16
   196e4:	1080002b 	ldhuio	r2,0(r2)
   196e8:	10bfffcc 	andi	r2,r2,65535
   196ec:	1007883a 	mov	r3,r2
   196f0:	e0bffd17 	ldw	r2,-12(fp)
   196f4:	10c0038d 	sth	r3,14(r2)
		record->last_access_date    =   (unsigned short int) IORD_16DIRECT(device_pointer->base, offset+18);
   196f8:	d0a81a17 	ldw	r2,-24472(gp)
   196fc:	10c00a17 	ldw	r3,40(r2)
   19700:	e0bffc17 	ldw	r2,-16(fp)
   19704:	1885883a 	add	r2,r3,r2
   19708:	10800484 	addi	r2,r2,18
   1970c:	1080002b 	ldhuio	r2,0(r2)
   19710:	10bfffcc 	andi	r2,r2,65535
   19714:	1007883a 	mov	r3,r2
   19718:	e0bffd17 	ldw	r2,-12(fp)
   1971c:	10c0040d 	sth	r3,16(r2)
		/* Ignore reserved bytes at locations 20 and 21. */
		record->last_modified_time  =	(unsigned short int) IORD_16DIRECT(device_pointer->base, offset+22);
   19720:	d0a81a17 	ldw	r2,-24472(gp)
   19724:	10c00a17 	ldw	r3,40(r2)
   19728:	e0bffc17 	ldw	r2,-16(fp)
   1972c:	1885883a 	add	r2,r3,r2
   19730:	10800584 	addi	r2,r2,22
   19734:	1080002b 	ldhuio	r2,0(r2)
   19738:	10bfffcc 	andi	r2,r2,65535
   1973c:	1007883a 	mov	r3,r2
   19740:	e0bffd17 	ldw	r2,-12(fp)
   19744:	10c0048d 	sth	r3,18(r2)
		record->last_modified_date  =	(unsigned short int) IORD_16DIRECT(device_pointer->base, offset+24);
   19748:	d0a81a17 	ldw	r2,-24472(gp)
   1974c:	10c00a17 	ldw	r3,40(r2)
   19750:	e0bffc17 	ldw	r2,-16(fp)
   19754:	1885883a 	add	r2,r3,r2
   19758:	10800604 	addi	r2,r2,24
   1975c:	1080002b 	ldhuio	r2,0(r2)
   19760:	10bfffcc 	andi	r2,r2,65535
   19764:	1007883a 	mov	r3,r2
   19768:	e0bffd17 	ldw	r2,-12(fp)
   1976c:	10c0050d 	sth	r3,20(r2)
		record->start_cluster_index =	(unsigned short int) IORD_16DIRECT(device_pointer->base, offset+26);
   19770:	d0a81a17 	ldw	r2,-24472(gp)
   19774:	10c00a17 	ldw	r3,40(r2)
   19778:	e0bffc17 	ldw	r2,-16(fp)
   1977c:	1885883a 	add	r2,r3,r2
   19780:	10800684 	addi	r2,r2,26
   19784:	1080002b 	ldhuio	r2,0(r2)
   19788:	10bfffcc 	andi	r2,r2,65535
   1978c:	1007883a 	mov	r3,r2
   19790:	e0bffd17 	ldw	r2,-12(fp)
   19794:	10c0058d 	sth	r3,22(r2)
		record->file_size_in_bytes  =	(unsigned int) IORD_32DIRECT(device_pointer->base, offset+28);
   19798:	d0a81a17 	ldw	r2,-24472(gp)
   1979c:	10c00a17 	ldw	r3,40(r2)
   197a0:	e0bffc17 	ldw	r2,-16(fp)
   197a4:	1885883a 	add	r2,r3,r2
   197a8:	10800704 	addi	r2,r2,28
   197ac:	10800037 	ldwio	r2,0(r2)
   197b0:	1007883a 	mov	r3,r2
   197b4:	e0bffd17 	ldw	r2,-12(fp)
   197b8:	10c00615 	stw	r3,24(r2)
		record->file_record_cluster = cluster_index;
   197bc:	e0bffd17 	ldw	r2,-12(fp)
   197c0:	e0fffe17 	ldw	r3,-8(fp)
   197c4:	10c00a15 	stw	r3,40(r2)
		record->file_record_sector_in_cluster = sector_in_cluster;
   197c8:	e0bffd17 	ldw	r2,-12(fp)
   197cc:	e0ffff17 	ldw	r3,-4(fp)
   197d0:	10c00b15 	stw	r3,44(r2)
		record->file_record_offset = offset;
   197d4:	e0bffc17 	ldw	r2,-16(fp)
   197d8:	1007883a 	mov	r3,r2
   197dc:	e0bffd17 	ldw	r2,-12(fp)
   197e0:	10c00c0d 	sth	r3,48(r2)
		result = true;
   197e4:	00800044 	movi	r2,1
   197e8:	e0bffa15 	stw	r2,-24(fp)
	}
	return result;
   197ec:	e0bffa17 	ldw	r2,-24(fp)
}
   197f0:	e037883a 	mov	sp,fp
   197f4:	dfc00117 	ldw	ra,4(sp)
   197f8:	df000017 	ldw	fp,0(sp)
   197fc:	dec00204 	addi	sp,sp,8
   19800:	f800283a 	ret

00019804 <Write_File_Record_At_Offset>:


bool Write_File_Record_At_Offset(int offset, t_file_record *record)
// This function writes a file record at a given offset. The offset is given in bytes.
{
   19804:	defff904 	addi	sp,sp,-28
   19808:	dfc00615 	stw	ra,24(sp)
   1980c:	df000515 	stw	fp,20(sp)
   19810:	df000504 	addi	fp,sp,20
   19814:	e13ffe15 	stw	r4,-8(fp)
   19818:	e17fff15 	stw	r5,-4(fp)
    bool result = false;
   1981c:	e03ffb15 	stw	zero,-20(fp)
    if (((offset & 0x01f) == 0) && (alt_up_sd_card_is_Present()) && (is_sd_card_formated_as_FAT16))
   19820:	e0bffe17 	ldw	r2,-8(fp)
   19824:	108007cc 	andi	r2,r2,31
   19828:	1000931e 	bne	r2,zero,19a78 <Write_File_Record_At_Offset+0x274>
   1982c:	001bd840 	call	1bd84 <alt_up_sd_card_is_Present>
   19830:	10009126 	beq	r2,zero,19a78 <Write_File_Record_At_Offset+0x274>
   19834:	d0a81117 	ldw	r2,-24508(gp)
   19838:	10008f26 	beq	r2,zero,19a78 <Write_File_Record_At_Offset+0x274>
    {
        int counter;

        for (counter = 0; counter < 8; counter=counter+2)
   1983c:	e03ffc15 	stw	zero,-16(fp)
   19840:	00001f06 	br	198c0 <Write_File_Record_At_Offset+0xbc>
        {
            short int two_chars = (short int) record->name[counter+1];
   19844:	e0bffc17 	ldw	r2,-16(fp)
   19848:	10800044 	addi	r2,r2,1
   1984c:	e0ffff17 	ldw	r3,-4(fp)
   19850:	1885883a 	add	r2,r3,r2
   19854:	10800003 	ldbu	r2,0(r2)
   19858:	10803fcc 	andi	r2,r2,255
   1985c:	e0bffd0d 	sth	r2,-12(fp)
            two_chars = two_chars << 8;
   19860:	e0bffd0f 	ldh	r2,-12(fp)
   19864:	1004923a 	slli	r2,r2,8
   19868:	e0bffd0d 	sth	r2,-12(fp)
            two_chars = two_chars | record->name[counter];
   1986c:	e0ffff17 	ldw	r3,-4(fp)
   19870:	e0bffc17 	ldw	r2,-16(fp)
   19874:	1885883a 	add	r2,r3,r2
   19878:	10800003 	ldbu	r2,0(r2)
   1987c:	10c03fcc 	andi	r3,r2,255
   19880:	e0bffd0b 	ldhu	r2,-12(fp)
   19884:	1884b03a 	or	r2,r3,r2
   19888:	e0bffd0d 	sth	r2,-12(fp)
            IOWR_16DIRECT(device_pointer->base, offset+counter, two_chars);
   1988c:	e0fffe17 	ldw	r3,-8(fp)
   19890:	e0bffc17 	ldw	r2,-16(fp)
   19894:	1885883a 	add	r2,r3,r2
   19898:	1007883a 	mov	r3,r2
   1989c:	d0a81a17 	ldw	r2,-24472(gp)
   198a0:	10800a17 	ldw	r2,40(r2)
   198a4:	1885883a 	add	r2,r3,r2
   198a8:	1007883a 	mov	r3,r2
   198ac:	e0bffd0f 	ldh	r2,-12(fp)
   198b0:	1880002d 	sthio	r2,0(r3)
    bool result = false;
    if (((offset & 0x01f) == 0) && (alt_up_sd_card_is_Present()) && (is_sd_card_formated_as_FAT16))
    {
        int counter;

        for (counter = 0; counter < 8; counter=counter+2)
   198b4:	e0bffc17 	ldw	r2,-16(fp)
   198b8:	10800084 	addi	r2,r2,2
   198bc:	e0bffc15 	stw	r2,-16(fp)
   198c0:	e0bffc17 	ldw	r2,-16(fp)
   198c4:	10800210 	cmplti	r2,r2,8
   198c8:	103fde1e 	bne	r2,zero,19844 <__alt_mem_Flash_flash_data+0xf4019844>
            short int two_chars = (short int) record->name[counter+1];
            two_chars = two_chars << 8;
            two_chars = two_chars | record->name[counter];
            IOWR_16DIRECT(device_pointer->base, offset+counter, two_chars);
        }        
        for (counter = 0; counter < 3; counter++)
   198cc:	e03ffc15 	stw	zero,-16(fp)
   198d0:	00001306 	br	19920 <Write_File_Record_At_Offset+0x11c>
        {
            IOWR_8DIRECT(device_pointer->base, offset+counter+8, record->extension[counter]);
   198d4:	e0fffe17 	ldw	r3,-8(fp)
   198d8:	e0bffc17 	ldw	r2,-16(fp)
   198dc:	1885883a 	add	r2,r3,r2
   198e0:	1007883a 	mov	r3,r2
   198e4:	d0a81a17 	ldw	r2,-24472(gp)
   198e8:	10800a17 	ldw	r2,40(r2)
   198ec:	1885883a 	add	r2,r3,r2
   198f0:	10800204 	addi	r2,r2,8
   198f4:	1009883a 	mov	r4,r2
   198f8:	e0ffff17 	ldw	r3,-4(fp)
   198fc:	e0bffc17 	ldw	r2,-16(fp)
   19900:	1885883a 	add	r2,r3,r2
   19904:	10800204 	addi	r2,r2,8
   19908:	10800003 	ldbu	r2,0(r2)
   1990c:	10803fcc 	andi	r2,r2,255
   19910:	20800025 	stbio	r2,0(r4)
            short int two_chars = (short int) record->name[counter+1];
            two_chars = two_chars << 8;
            two_chars = two_chars | record->name[counter];
            IOWR_16DIRECT(device_pointer->base, offset+counter, two_chars);
        }        
        for (counter = 0; counter < 3; counter++)
   19914:	e0bffc17 	ldw	r2,-16(fp)
   19918:	10800044 	addi	r2,r2,1
   1991c:	e0bffc15 	stw	r2,-16(fp)
   19920:	e0bffc17 	ldw	r2,-16(fp)
   19924:	108000d0 	cmplti	r2,r2,3
   19928:	103fea1e 	bne	r2,zero,198d4 <__alt_mem_Flash_flash_data+0xf40198d4>
        {
            IOWR_8DIRECT(device_pointer->base, offset+counter+8, record->extension[counter]);
        }        
        IOWR_8DIRECT(device_pointer->base, offset+11, record->attributes);
   1992c:	d0a81a17 	ldw	r2,-24472(gp)
   19930:	10c00a17 	ldw	r3,40(r2)
   19934:	e0bffe17 	ldw	r2,-8(fp)
   19938:	1885883a 	add	r2,r3,r2
   1993c:	108002c4 	addi	r2,r2,11
   19940:	1007883a 	mov	r3,r2
   19944:	e0bfff17 	ldw	r2,-4(fp)
   19948:	108002c3 	ldbu	r2,11(r2)
   1994c:	10803fcc 	andi	r2,r2,255
   19950:	18800025 	stbio	r2,0(r3)
        /* Ignore reserved bytes at locations 12 and 13. */
        IOWR_16DIRECT(device_pointer->base, offset+14, record->create_time);
   19954:	d0a81a17 	ldw	r2,-24472(gp)
   19958:	10c00a17 	ldw	r3,40(r2)
   1995c:	e0bffe17 	ldw	r2,-8(fp)
   19960:	1885883a 	add	r2,r3,r2
   19964:	10800384 	addi	r2,r2,14
   19968:	1007883a 	mov	r3,r2
   1996c:	e0bfff17 	ldw	r2,-4(fp)
   19970:	1080030b 	ldhu	r2,12(r2)
   19974:	10bfffcc 	andi	r2,r2,65535
   19978:	1880002d 	sthio	r2,0(r3)
        IOWR_16DIRECT(device_pointer->base, offset+16, record->create_date);
   1997c:	d0a81a17 	ldw	r2,-24472(gp)
   19980:	10c00a17 	ldw	r3,40(r2)
   19984:	e0bffe17 	ldw	r2,-8(fp)
   19988:	1885883a 	add	r2,r3,r2
   1998c:	10800404 	addi	r2,r2,16
   19990:	1007883a 	mov	r3,r2
   19994:	e0bfff17 	ldw	r2,-4(fp)
   19998:	1080038b 	ldhu	r2,14(r2)
   1999c:	10bfffcc 	andi	r2,r2,65535
   199a0:	1880002d 	sthio	r2,0(r3)
        IOWR_16DIRECT(device_pointer->base, offset+18, record->last_access_date);
   199a4:	d0a81a17 	ldw	r2,-24472(gp)
   199a8:	10c00a17 	ldw	r3,40(r2)
   199ac:	e0bffe17 	ldw	r2,-8(fp)
   199b0:	1885883a 	add	r2,r3,r2
   199b4:	10800484 	addi	r2,r2,18
   199b8:	1007883a 	mov	r3,r2
   199bc:	e0bfff17 	ldw	r2,-4(fp)
   199c0:	1080040b 	ldhu	r2,16(r2)
   199c4:	10bfffcc 	andi	r2,r2,65535
   199c8:	1880002d 	sthio	r2,0(r3)
        /* Ignore reserved bytes at locations 20 and 21. */
        IOWR_16DIRECT(device_pointer->base, offset+22, record->last_modified_time);
   199cc:	d0a81a17 	ldw	r2,-24472(gp)
   199d0:	10c00a17 	ldw	r3,40(r2)
   199d4:	e0bffe17 	ldw	r2,-8(fp)
   199d8:	1885883a 	add	r2,r3,r2
   199dc:	10800584 	addi	r2,r2,22
   199e0:	1007883a 	mov	r3,r2
   199e4:	e0bfff17 	ldw	r2,-4(fp)
   199e8:	1080048b 	ldhu	r2,18(r2)
   199ec:	10bfffcc 	andi	r2,r2,65535
   199f0:	1880002d 	sthio	r2,0(r3)
        IOWR_16DIRECT(device_pointer->base, offset+24, record->last_modified_date);
   199f4:	d0a81a17 	ldw	r2,-24472(gp)
   199f8:	10c00a17 	ldw	r3,40(r2)
   199fc:	e0bffe17 	ldw	r2,-8(fp)
   19a00:	1885883a 	add	r2,r3,r2
   19a04:	10800604 	addi	r2,r2,24
   19a08:	1007883a 	mov	r3,r2
   19a0c:	e0bfff17 	ldw	r2,-4(fp)
   19a10:	1080050b 	ldhu	r2,20(r2)
   19a14:	10bfffcc 	andi	r2,r2,65535
   19a18:	1880002d 	sthio	r2,0(r3)
        IOWR_16DIRECT(device_pointer->base, offset+26, record->start_cluster_index);
   19a1c:	d0a81a17 	ldw	r2,-24472(gp)
   19a20:	10c00a17 	ldw	r3,40(r2)
   19a24:	e0bffe17 	ldw	r2,-8(fp)
   19a28:	1885883a 	add	r2,r3,r2
   19a2c:	10800684 	addi	r2,r2,26
   19a30:	1007883a 	mov	r3,r2
   19a34:	e0bfff17 	ldw	r2,-4(fp)
   19a38:	1080058b 	ldhu	r2,22(r2)
   19a3c:	10bfffcc 	andi	r2,r2,65535
   19a40:	1880002d 	sthio	r2,0(r3)
        IOWR_32DIRECT(device_pointer->base, offset+28, record->file_size_in_bytes);
   19a44:	d0a81a17 	ldw	r2,-24472(gp)
   19a48:	10c00a17 	ldw	r3,40(r2)
   19a4c:	e0bffe17 	ldw	r2,-8(fp)
   19a50:	1885883a 	add	r2,r3,r2
   19a54:	10800704 	addi	r2,r2,28
   19a58:	1007883a 	mov	r3,r2
   19a5c:	e0bfff17 	ldw	r2,-4(fp)
   19a60:	10800617 	ldw	r2,24(r2)
   19a64:	18800035 	stwio	r2,0(r3)
        current_sector_modified = true;                  
   19a68:	00800044 	movi	r2,1
   19a6c:	d0a81b15 	stw	r2,-24468(gp)
        result = true;
   19a70:	00800044 	movi	r2,1
   19a74:	e0bffb15 	stw	r2,-20(fp)
    }
    return result;
   19a78:	e0bffb17 	ldw	r2,-20(fp)
}
   19a7c:	e037883a 	mov	sp,fp
   19a80:	dfc00117 	ldw	ra,4(sp)
   19a84:	df000017 	ldw	fp,0(sp)
   19a88:	dec00204 	addi	sp,sp,8
   19a8c:	f800283a 	ret

00019a90 <Check_for_DOS_FAT>:
// This function reads the boot sector for the FAT file system on the SD Card.
// The offset_address should point to the sector on the card where the boot sector is located.
// The sector number is specified either in the master Boot Record, or is 0 by default for a purely FAT
// based file system. If the specified sector contains a FAT boot sector, then this function prints the
// relevant information and returns 1. Otherwise, it returns 0. 
{
   19a90:	defff904 	addi	sp,sp,-28
   19a94:	dfc00615 	stw	ra,24(sp)
   19a98:	df000515 	stw	fp,20(sp)
   19a9c:	df000504 	addi	fp,sp,20
   19aa0:	e13fff15 	stw	r4,-4(fp)
	bool result = false;
   19aa4:	e03ffb15 	stw	zero,-20(fp)
	int counter = 0;
   19aa8:	e03ffc15 	stw	zero,-16(fp)
	short int end;

	result = Read_Sector_Data(0, FAT_partition_start_sector);
   19aac:	0009883a 	mov	r4,zero
   19ab0:	e17fff17 	ldw	r5,-4(fp)
   19ab4:	00191700 	call	19170 <Read_Sector_Data>
   19ab8:	e0bffb15 	stw	r2,-20(fp)
	end =  (short int) IORD_16DIRECT(device_pointer->base, 0x1fe);
   19abc:	d0a81a17 	ldw	r2,-24472(gp)
   19ac0:	10800a17 	ldw	r2,40(r2)
   19ac4:	10807f84 	addi	r2,r2,510
   19ac8:	1080002b 	ldhuio	r2,0(r2)
   19acc:	10bfffcc 	andi	r2,r2,65535
   19ad0:	e0bffe0d 	sth	r2,-8(fp)
	if (((end & 0x0000ffff) == 0x0000aa55) && (result))
   19ad4:	e0bffe0f 	ldh	r2,-8(fp)
   19ad8:	10ffffcc 	andi	r3,r2,65535
   19adc:	00aa9554 	movui	r2,43605
   19ae0:	1881861e 	bne	r3,r2,1a0fc <Check_for_DOS_FAT+0x66c>
   19ae4:	e0bffb17 	ldw	r2,-20(fp)
   19ae8:	10018426 	beq	r2,zero,1a0fc <Check_for_DOS_FAT+0x66c>
	{
		int num_clusters = 0;
   19aec:	e03ffd15 	stw	zero,-12(fp)

		boot_sector_data.jump_instruction[0] = (char) IORD_8DIRECT(device_pointer->base, 0);
   19af0:	d0a81a17 	ldw	r2,-24472(gp)
   19af4:	10800a17 	ldw	r2,40(r2)
   19af8:	10800023 	ldbuio	r2,0(r2)
   19afc:	10803fcc 	andi	r2,r2,255
   19b00:	1007883a 	mov	r3,r2
   19b04:	008000f4 	movhi	r2,3
   19b08:	10a15704 	addi	r2,r2,-31396
   19b0c:	10c00005 	stb	r3,0(r2)
		boot_sector_data.jump_instruction[1] = (char) IORD_8DIRECT(device_pointer->base, 1);
   19b10:	d0a81a17 	ldw	r2,-24472(gp)
   19b14:	10800a17 	ldw	r2,40(r2)
   19b18:	10800044 	addi	r2,r2,1
   19b1c:	10800023 	ldbuio	r2,0(r2)
   19b20:	10803fcc 	andi	r2,r2,255
   19b24:	1007883a 	mov	r3,r2
   19b28:	008000f4 	movhi	r2,3
   19b2c:	10a15704 	addi	r2,r2,-31396
   19b30:	10c00045 	stb	r3,1(r2)
		boot_sector_data.jump_instruction[2] = (char) IORD_8DIRECT(device_pointer->base, 2);
   19b34:	d0a81a17 	ldw	r2,-24472(gp)
   19b38:	10800a17 	ldw	r2,40(r2)
   19b3c:	10800084 	addi	r2,r2,2
   19b40:	10800023 	ldbuio	r2,0(r2)
   19b44:	10803fcc 	andi	r2,r2,255
   19b48:	1007883a 	mov	r3,r2
   19b4c:	008000f4 	movhi	r2,3
   19b50:	10a15704 	addi	r2,r2,-31396
   19b54:	10c00085 	stb	r3,2(r2)
		for (counter = 0; counter < 8; counter++)
   19b58:	e03ffc15 	stw	zero,-16(fp)
   19b5c:	00001006 	br	19ba0 <Check_for_DOS_FAT+0x110>
		{
			boot_sector_data.OEM_name[counter] = (char) IORD_8DIRECT(device_pointer->base, 3+counter);
   19b60:	d0a81a17 	ldw	r2,-24472(gp)
   19b64:	10c00a17 	ldw	r3,40(r2)
   19b68:	e0bffc17 	ldw	r2,-16(fp)
   19b6c:	1885883a 	add	r2,r3,r2
   19b70:	108000c4 	addi	r2,r2,3
   19b74:	10800023 	ldbuio	r2,0(r2)
   19b78:	10803fcc 	andi	r2,r2,255
   19b7c:	1009883a 	mov	r4,r2
   19b80:	008000f4 	movhi	r2,3
   19b84:	10a15704 	addi	r2,r2,-31396
   19b88:	e0fffc17 	ldw	r3,-16(fp)
   19b8c:	10c5883a 	add	r2,r2,r3
   19b90:	110000c5 	stb	r4,3(r2)
		int num_clusters = 0;

		boot_sector_data.jump_instruction[0] = (char) IORD_8DIRECT(device_pointer->base, 0);
		boot_sector_data.jump_instruction[1] = (char) IORD_8DIRECT(device_pointer->base, 1);
		boot_sector_data.jump_instruction[2] = (char) IORD_8DIRECT(device_pointer->base, 2);
		for (counter = 0; counter < 8; counter++)
   19b94:	e0bffc17 	ldw	r2,-16(fp)
   19b98:	10800044 	addi	r2,r2,1
   19b9c:	e0bffc15 	stw	r2,-16(fp)
   19ba0:	e0bffc17 	ldw	r2,-16(fp)
   19ba4:	10800210 	cmplti	r2,r2,8
   19ba8:	103fed1e 	bne	r2,zero,19b60 <__alt_mem_Flash_flash_data+0xf4019b60>
		{
			boot_sector_data.OEM_name[counter] = (char) IORD_8DIRECT(device_pointer->base, 3+counter);
		}
		boot_sector_data.sector_size_in_bytes = (((unsigned char) IORD_8DIRECT(device_pointer->base, 12)) << 8 ) | ((char) IORD_8DIRECT(device_pointer->base, 11));
   19bac:	d0a81a17 	ldw	r2,-24472(gp)
   19bb0:	10800a17 	ldw	r2,40(r2)
   19bb4:	10800304 	addi	r2,r2,12
   19bb8:	10800023 	ldbuio	r2,0(r2)
   19bbc:	10803fcc 	andi	r2,r2,255
   19bc0:	10803fcc 	andi	r2,r2,255
   19bc4:	1004923a 	slli	r2,r2,8
   19bc8:	1007883a 	mov	r3,r2
   19bcc:	d0a81a17 	ldw	r2,-24472(gp)
   19bd0:	10800a17 	ldw	r2,40(r2)
   19bd4:	108002c4 	addi	r2,r2,11
   19bd8:	10800023 	ldbuio	r2,0(r2)
   19bdc:	10803fcc 	andi	r2,r2,255
   19be0:	10803fcc 	andi	r2,r2,255
   19be4:	1080201c 	xori	r2,r2,128
   19be8:	10bfe004 	addi	r2,r2,-128
   19bec:	1884b03a 	or	r2,r3,r2
   19bf0:	1007883a 	mov	r3,r2
   19bf4:	008000f4 	movhi	r2,3
   19bf8:	10a15704 	addi	r2,r2,-31396
   19bfc:	10c0030d 	sth	r3,12(r2)
		boot_sector_data.sectors_per_cluster = ((unsigned char) IORD_8DIRECT(device_pointer->base, 13));
   19c00:	d0a81a17 	ldw	r2,-24472(gp)
   19c04:	10800a17 	ldw	r2,40(r2)
   19c08:	10800344 	addi	r2,r2,13
   19c0c:	10800023 	ldbuio	r2,0(r2)
   19c10:	10803fcc 	andi	r2,r2,255
   19c14:	1007883a 	mov	r3,r2
   19c18:	008000f4 	movhi	r2,3
   19c1c:	10a15704 	addi	r2,r2,-31396
   19c20:	10c00385 	stb	r3,14(r2)
		boot_sector_data.reserved_sectors = ((unsigned short int) IORD_16DIRECT(device_pointer->base, 14));
   19c24:	d0a81a17 	ldw	r2,-24472(gp)
   19c28:	10800a17 	ldw	r2,40(r2)
   19c2c:	10800384 	addi	r2,r2,14
   19c30:	1080002b 	ldhuio	r2,0(r2)
   19c34:	10bfffcc 	andi	r2,r2,65535
   19c38:	1007883a 	mov	r3,r2
   19c3c:	008000f4 	movhi	r2,3
   19c40:	10a15704 	addi	r2,r2,-31396
   19c44:	10c0040d 	sth	r3,16(r2)
		boot_sector_data.number_of_FATs = ((unsigned char) IORD_8DIRECT(device_pointer->base, 16));
   19c48:	d0a81a17 	ldw	r2,-24472(gp)
   19c4c:	10800a17 	ldw	r2,40(r2)
   19c50:	10800404 	addi	r2,r2,16
   19c54:	10800023 	ldbuio	r2,0(r2)
   19c58:	10803fcc 	andi	r2,r2,255
   19c5c:	1007883a 	mov	r3,r2
   19c60:	008000f4 	movhi	r2,3
   19c64:	10a15704 	addi	r2,r2,-31396
   19c68:	10c00485 	stb	r3,18(r2)
		boot_sector_data.max_number_of_dir_entires = (((unsigned short int)(((unsigned char) IORD_8DIRECT(device_pointer->base, 18)))) << 8 ) | ((unsigned char) IORD_8DIRECT(device_pointer->base, 17));
   19c6c:	d0a81a17 	ldw	r2,-24472(gp)
   19c70:	10800a17 	ldw	r2,40(r2)
   19c74:	10800484 	addi	r2,r2,18
   19c78:	10800023 	ldbuio	r2,0(r2)
   19c7c:	10803fcc 	andi	r2,r2,255
   19c80:	10803fcc 	andi	r2,r2,255
   19c84:	1004923a 	slli	r2,r2,8
   19c88:	1007883a 	mov	r3,r2
   19c8c:	d0a81a17 	ldw	r2,-24472(gp)
   19c90:	10800a17 	ldw	r2,40(r2)
   19c94:	10800444 	addi	r2,r2,17
   19c98:	10800023 	ldbuio	r2,0(r2)
   19c9c:	10803fcc 	andi	r2,r2,255
   19ca0:	10803fcc 	andi	r2,r2,255
   19ca4:	1884b03a 	or	r2,r3,r2
   19ca8:	1007883a 	mov	r3,r2
   19cac:	008000f4 	movhi	r2,3
   19cb0:	10a15704 	addi	r2,r2,-31396
   19cb4:	10c0050d 	sth	r3,20(r2)
		boot_sector_data.number_of_sectors_in_partition = (((unsigned short int)(((unsigned char) IORD_8DIRECT(device_pointer->base, 20)))) << 8 ) | ((unsigned char) IORD_8DIRECT(device_pointer->base, 19));
   19cb8:	d0a81a17 	ldw	r2,-24472(gp)
   19cbc:	10800a17 	ldw	r2,40(r2)
   19cc0:	10800504 	addi	r2,r2,20
   19cc4:	10800023 	ldbuio	r2,0(r2)
   19cc8:	10803fcc 	andi	r2,r2,255
   19ccc:	10803fcc 	andi	r2,r2,255
   19cd0:	1004923a 	slli	r2,r2,8
   19cd4:	1007883a 	mov	r3,r2
   19cd8:	d0a81a17 	ldw	r2,-24472(gp)
   19cdc:	10800a17 	ldw	r2,40(r2)
   19ce0:	108004c4 	addi	r2,r2,19
   19ce4:	10800023 	ldbuio	r2,0(r2)
   19ce8:	10803fcc 	andi	r2,r2,255
   19cec:	10803fcc 	andi	r2,r2,255
   19cf0:	1884b03a 	or	r2,r3,r2
   19cf4:	1007883a 	mov	r3,r2
   19cf8:	008000f4 	movhi	r2,3
   19cfc:	10a15704 	addi	r2,r2,-31396
   19d00:	10c0058d 	sth	r3,22(r2)
		boot_sector_data.media_descriptor = ((unsigned char) IORD_8DIRECT(device_pointer->base, 21));
   19d04:	d0a81a17 	ldw	r2,-24472(gp)
   19d08:	10800a17 	ldw	r2,40(r2)
   19d0c:	10800544 	addi	r2,r2,21
   19d10:	10800023 	ldbuio	r2,0(r2)
   19d14:	10803fcc 	andi	r2,r2,255
   19d18:	1007883a 	mov	r3,r2
   19d1c:	008000f4 	movhi	r2,3
   19d20:	10a15704 	addi	r2,r2,-31396
   19d24:	10c00605 	stb	r3,24(r2)
		boot_sector_data.number_of_sectors_per_table = ((unsigned short int) IORD_16DIRECT(device_pointer->base, 22));
   19d28:	d0a81a17 	ldw	r2,-24472(gp)
   19d2c:	10800a17 	ldw	r2,40(r2)
   19d30:	10800584 	addi	r2,r2,22
   19d34:	1080002b 	ldhuio	r2,0(r2)
   19d38:	10bfffcc 	andi	r2,r2,65535
   19d3c:	1007883a 	mov	r3,r2
   19d40:	008000f4 	movhi	r2,3
   19d44:	10a15704 	addi	r2,r2,-31396
   19d48:	10c0068d 	sth	r3,26(r2)
		boot_sector_data.number_of_sectors_per_track = ((unsigned short int) IORD_16DIRECT(device_pointer->base, 24));
   19d4c:	d0a81a17 	ldw	r2,-24472(gp)
   19d50:	10800a17 	ldw	r2,40(r2)
   19d54:	10800604 	addi	r2,r2,24
   19d58:	1080002b 	ldhuio	r2,0(r2)
   19d5c:	10bfffcc 	andi	r2,r2,65535
   19d60:	1007883a 	mov	r3,r2
   19d64:	008000f4 	movhi	r2,3
   19d68:	10a15704 	addi	r2,r2,-31396
   19d6c:	10c0070d 	sth	r3,28(r2)
		boot_sector_data.number_of_heads = ((unsigned short int) IORD_16DIRECT(device_pointer->base, 26));
   19d70:	d0a81a17 	ldw	r2,-24472(gp)
   19d74:	10800a17 	ldw	r2,40(r2)
   19d78:	10800684 	addi	r2,r2,26
   19d7c:	1080002b 	ldhuio	r2,0(r2)
   19d80:	10bfffcc 	andi	r2,r2,65535
   19d84:	1007883a 	mov	r3,r2
   19d88:	008000f4 	movhi	r2,3
   19d8c:	10a15704 	addi	r2,r2,-31396
   19d90:	10c0078d 	sth	r3,30(r2)
		boot_sector_data.number_of_hidden_sectors = ((unsigned int) IORD_32DIRECT(device_pointer->base, 28));
   19d94:	d0a81a17 	ldw	r2,-24472(gp)
   19d98:	10800a17 	ldw	r2,40(r2)
   19d9c:	10800704 	addi	r2,r2,28
   19da0:	10800037 	ldwio	r2,0(r2)
   19da4:	1007883a 	mov	r3,r2
   19da8:	008000f4 	movhi	r2,3
   19dac:	10a15704 	addi	r2,r2,-31396
   19db0:	10c00815 	stw	r3,32(r2)
		boot_sector_data.total_sector_count_if_above_32MB = ((unsigned int) IORD_32DIRECT(device_pointer->base, 32));
   19db4:	d0a81a17 	ldw	r2,-24472(gp)
   19db8:	10800a17 	ldw	r2,40(r2)
   19dbc:	10800804 	addi	r2,r2,32
   19dc0:	10800037 	ldwio	r2,0(r2)
   19dc4:	1007883a 	mov	r3,r2
   19dc8:	008000f4 	movhi	r2,3
   19dcc:	10a15704 	addi	r2,r2,-31396
   19dd0:	10c00915 	stw	r3,36(r2)
		boot_sector_data.drive_number = ((unsigned char) IORD_8DIRECT(device_pointer->base, 36));
   19dd4:	d0a81a17 	ldw	r2,-24472(gp)
   19dd8:	10800a17 	ldw	r2,40(r2)
   19ddc:	10800904 	addi	r2,r2,36
   19de0:	10800023 	ldbuio	r2,0(r2)
   19de4:	10803fcc 	andi	r2,r2,255
   19de8:	1007883a 	mov	r3,r2
   19dec:	008000f4 	movhi	r2,3
   19df0:	10a15704 	addi	r2,r2,-31396
   19df4:	10c00a05 	stb	r3,40(r2)
		boot_sector_data.current_head = ((unsigned char) IORD_8DIRECT(device_pointer->base, 37));
   19df8:	d0a81a17 	ldw	r2,-24472(gp)
   19dfc:	10800a17 	ldw	r2,40(r2)
   19e00:	10800944 	addi	r2,r2,37
   19e04:	10800023 	ldbuio	r2,0(r2)
   19e08:	10803fcc 	andi	r2,r2,255
   19e0c:	1007883a 	mov	r3,r2
   19e10:	008000f4 	movhi	r2,3
   19e14:	10a15704 	addi	r2,r2,-31396
   19e18:	10c00a45 	stb	r3,41(r2)
		boot_sector_data.boot_signature = ((unsigned char) IORD_8DIRECT(device_pointer->base, 38));
   19e1c:	d0a81a17 	ldw	r2,-24472(gp)
   19e20:	10800a17 	ldw	r2,40(r2)
   19e24:	10800984 	addi	r2,r2,38
   19e28:	10800023 	ldbuio	r2,0(r2)
   19e2c:	10803fcc 	andi	r2,r2,255
   19e30:	1007883a 	mov	r3,r2
   19e34:	008000f4 	movhi	r2,3
   19e38:	10a15704 	addi	r2,r2,-31396
   19e3c:	10c00a85 	stb	r3,42(r2)
		boot_sector_data.first_fat_sector_offset = boot_sector_data.reserved_sectors;
   19e40:	008000f4 	movhi	r2,3
   19e44:	10a15704 	addi	r2,r2,-31396
   19e48:	1080040b 	ldhu	r2,16(r2)
   19e4c:	10ffffcc 	andi	r3,r2,65535
   19e50:	008000f4 	movhi	r2,3
   19e54:	10a15704 	addi	r2,r2,-31396
   19e58:	10c01115 	stw	r3,68(r2)
		boot_sector_data.second_fat_sector_offset = boot_sector_data.first_fat_sector_offset + boot_sector_data.number_of_sectors_per_table;
   19e5c:	008000f4 	movhi	r2,3
   19e60:	10a15704 	addi	r2,r2,-31396
   19e64:	10c01117 	ldw	r3,68(r2)
   19e68:	008000f4 	movhi	r2,3
   19e6c:	10a15704 	addi	r2,r2,-31396
   19e70:	1080068b 	ldhu	r2,26(r2)
   19e74:	10bfffcc 	andi	r2,r2,65535
   19e78:	1887883a 	add	r3,r3,r2
   19e7c:	008000f4 	movhi	r2,3
   19e80:	10a15704 	addi	r2,r2,-31396
   19e84:	10c01215 	stw	r3,72(r2)
		boot_sector_data.root_directory_sector_offset = boot_sector_data.second_fat_sector_offset + boot_sector_data.number_of_sectors_per_table; 
   19e88:	008000f4 	movhi	r2,3
   19e8c:	10a15704 	addi	r2,r2,-31396
   19e90:	10c01217 	ldw	r3,72(r2)
   19e94:	008000f4 	movhi	r2,3
   19e98:	10a15704 	addi	r2,r2,-31396
   19e9c:	1080068b 	ldhu	r2,26(r2)
   19ea0:	10bfffcc 	andi	r2,r2,65535
   19ea4:	1887883a 	add	r3,r3,r2
   19ea8:	008000f4 	movhi	r2,3
   19eac:	10a15704 	addi	r2,r2,-31396
   19eb0:	10c01315 	stw	r3,76(r2)
		boot_sector_data.data_sector_offset = boot_sector_data.root_directory_sector_offset + (32*boot_sector_data.max_number_of_dir_entires / boot_sector_data.sector_size_in_bytes);    
   19eb4:	008000f4 	movhi	r2,3
   19eb8:	10a15704 	addi	r2,r2,-31396
   19ebc:	10c01317 	ldw	r3,76(r2)
   19ec0:	008000f4 	movhi	r2,3
   19ec4:	10a15704 	addi	r2,r2,-31396
   19ec8:	1080050b 	ldhu	r2,20(r2)
   19ecc:	10bfffcc 	andi	r2,r2,65535
   19ed0:	1008917a 	slli	r4,r2,5
   19ed4:	008000f4 	movhi	r2,3
   19ed8:	10a15704 	addi	r2,r2,-31396
   19edc:	1080030b 	ldhu	r2,12(r2)
   19ee0:	10bfffcc 	andi	r2,r2,65535
   19ee4:	2085283a 	div	r2,r4,r2
   19ee8:	1887883a 	add	r3,r3,r2
   19eec:	008000f4 	movhi	r2,3
   19ef0:	10a15704 	addi	r2,r2,-31396
   19ef4:	10c01415 	stw	r3,80(r2)
	    
		if (boot_sector_data.number_of_sectors_in_partition > 0)
   19ef8:	008000f4 	movhi	r2,3
   19efc:	10a15704 	addi	r2,r2,-31396
   19f00:	1080058b 	ldhu	r2,22(r2)
   19f04:	10bfffcc 	andi	r2,r2,65535
   19f08:	10000b26 	beq	r2,zero,19f38 <Check_for_DOS_FAT+0x4a8>
		{
			num_clusters = (boot_sector_data.number_of_sectors_in_partition / boot_sector_data.sectors_per_cluster);
   19f0c:	008000f4 	movhi	r2,3
   19f10:	10a15704 	addi	r2,r2,-31396
   19f14:	1080058b 	ldhu	r2,22(r2)
   19f18:	10ffffcc 	andi	r3,r2,65535
   19f1c:	008000f4 	movhi	r2,3
   19f20:	10a15704 	addi	r2,r2,-31396
   19f24:	10800383 	ldbu	r2,14(r2)
   19f28:	10803fcc 	andi	r2,r2,255
   19f2c:	1885283a 	div	r2,r3,r2
   19f30:	e0bffd15 	stw	r2,-12(fp)
   19f34:	00000906 	br	19f5c <Check_for_DOS_FAT+0x4cc>
		}
		else
		{
			num_clusters = (boot_sector_data.total_sector_count_if_above_32MB / boot_sector_data.sectors_per_cluster);
   19f38:	008000f4 	movhi	r2,3
   19f3c:	10a15704 	addi	r2,r2,-31396
   19f40:	10c00917 	ldw	r3,36(r2)
   19f44:	008000f4 	movhi	r2,3
   19f48:	10a15704 	addi	r2,r2,-31396
   19f4c:	10800383 	ldbu	r2,14(r2)
   19f50:	10803fcc 	andi	r2,r2,255
   19f54:	1885203a 	divu	r2,r3,r2
   19f58:	e0bffd15 	stw	r2,-12(fp)
		}
		if (num_clusters < 4087)
   19f5c:	e0bffd17 	ldw	r2,-12(fp)
   19f60:	1083fdc8 	cmpgei	r2,r2,4087
   19f64:	1000051e 	bne	r2,zero,19f7c <Check_for_DOS_FAT+0x4ec>
		{
			boot_sector_data.bits_for_cluster_index = 12;
   19f68:	008000f4 	movhi	r2,3
   19f6c:	10a15704 	addi	r2,r2,-31396
   19f70:	00c00304 	movi	r3,12
   19f74:	10c01085 	stb	r3,66(r2)
   19f78:	00000c06 	br	19fac <Check_for_DOS_FAT+0x51c>
		}
		else if (num_clusters <= 65517)
   19f7c:	e0bffd17 	ldw	r2,-12(fp)
   19f80:	00fffb54 	movui	r3,65517
   19f84:	18800516 	blt	r3,r2,19f9c <Check_for_DOS_FAT+0x50c>
		{
			boot_sector_data.bits_for_cluster_index = 16;
   19f88:	008000f4 	movhi	r2,3
   19f8c:	10a15704 	addi	r2,r2,-31396
   19f90:	00c00404 	movi	r3,16
   19f94:	10c01085 	stb	r3,66(r2)
   19f98:	00000406 	br	19fac <Check_for_DOS_FAT+0x51c>
		}
		else
		{
			boot_sector_data.bits_for_cluster_index = 32;
   19f9c:	008000f4 	movhi	r2,3
   19fa0:	10a15704 	addi	r2,r2,-31396
   19fa4:	00c00804 	movi	r3,32
   19fa8:	10c01085 	stb	r3,66(r2)
		}
	    
		for (counter = 0; counter < 4; counter++)
   19fac:	e03ffc15 	stw	zero,-16(fp)
   19fb0:	00001106 	br	19ff8 <Check_for_DOS_FAT+0x568>
		{
			boot_sector_data.volume_id[counter] = ((char) IORD_8DIRECT(device_pointer->base, 39+counter));
   19fb4:	d0a81a17 	ldw	r2,-24472(gp)
   19fb8:	10c00a17 	ldw	r3,40(r2)
   19fbc:	e0bffc17 	ldw	r2,-16(fp)
   19fc0:	1885883a 	add	r2,r3,r2
   19fc4:	108009c4 	addi	r2,r2,39
   19fc8:	10800023 	ldbuio	r2,0(r2)
   19fcc:	10803fcc 	andi	r2,r2,255
   19fd0:	1009883a 	mov	r4,r2
   19fd4:	008000f4 	movhi	r2,3
   19fd8:	10a15704 	addi	r2,r2,-31396
   19fdc:	e0fffc17 	ldw	r3,-16(fp)
   19fe0:	10c5883a 	add	r2,r2,r3
   19fe4:	10800a04 	addi	r2,r2,40
   19fe8:	110000c5 	stb	r4,3(r2)
		else
		{
			boot_sector_data.bits_for_cluster_index = 32;
		}
	    
		for (counter = 0; counter < 4; counter++)
   19fec:	e0bffc17 	ldw	r2,-16(fp)
   19ff0:	10800044 	addi	r2,r2,1
   19ff4:	e0bffc15 	stw	r2,-16(fp)
   19ff8:	e0bffc17 	ldw	r2,-16(fp)
   19ffc:	10800110 	cmplti	r2,r2,4
   1a000:	103fec1e 	bne	r2,zero,19fb4 <__alt_mem_Flash_flash_data+0xf4019fb4>
		{
			boot_sector_data.volume_id[counter] = ((char) IORD_8DIRECT(device_pointer->base, 39+counter));
		}    
		for (counter = 0; counter < 11; counter++)
   1a004:	e03ffc15 	stw	zero,-16(fp)
   1a008:	00001106 	br	1a050 <Check_for_DOS_FAT+0x5c0>
		{
			boot_sector_data.volume_label[counter] = ((char) IORD_8DIRECT(device_pointer->base, 43+counter));
   1a00c:	d0a81a17 	ldw	r2,-24472(gp)
   1a010:	10c00a17 	ldw	r3,40(r2)
   1a014:	e0bffc17 	ldw	r2,-16(fp)
   1a018:	1885883a 	add	r2,r3,r2
   1a01c:	10800ac4 	addi	r2,r2,43
   1a020:	10800023 	ldbuio	r2,0(r2)
   1a024:	10803fcc 	andi	r2,r2,255
   1a028:	1009883a 	mov	r4,r2
   1a02c:	008000f4 	movhi	r2,3
   1a030:	10a15704 	addi	r2,r2,-31396
   1a034:	e0fffc17 	ldw	r3,-16(fp)
   1a038:	10c5883a 	add	r2,r2,r3
   1a03c:	10800b04 	addi	r2,r2,44
   1a040:	110000c5 	stb	r4,3(r2)
	    
		for (counter = 0; counter < 4; counter++)
		{
			boot_sector_data.volume_id[counter] = ((char) IORD_8DIRECT(device_pointer->base, 39+counter));
		}    
		for (counter = 0; counter < 11; counter++)
   1a044:	e0bffc17 	ldw	r2,-16(fp)
   1a048:	10800044 	addi	r2,r2,1
   1a04c:	e0bffc15 	stw	r2,-16(fp)
   1a050:	e0bffc17 	ldw	r2,-16(fp)
   1a054:	108002d0 	cmplti	r2,r2,11
   1a058:	103fec1e 	bne	r2,zero,1a00c <__alt_mem_Flash_flash_data+0xf401a00c>
		{
			boot_sector_data.volume_label[counter] = ((char) IORD_8DIRECT(device_pointer->base, 43+counter));
		}    
		for (counter = 0; counter < 8; counter++)
   1a05c:	e03ffc15 	stw	zero,-16(fp)
   1a060:	00001106 	br	1a0a8 <Check_for_DOS_FAT+0x618>
		{
			boot_sector_data.file_system_type[counter] = ((char) IORD_8DIRECT(device_pointer->base, 54+counter));
   1a064:	d0a81a17 	ldw	r2,-24472(gp)
   1a068:	10c00a17 	ldw	r3,40(r2)
   1a06c:	e0bffc17 	ldw	r2,-16(fp)
   1a070:	1885883a 	add	r2,r3,r2
   1a074:	10800d84 	addi	r2,r2,54
   1a078:	10800023 	ldbuio	r2,0(r2)
   1a07c:	10803fcc 	andi	r2,r2,255
   1a080:	1009883a 	mov	r4,r2
   1a084:	008000f4 	movhi	r2,3
   1a088:	10a15704 	addi	r2,r2,-31396
   1a08c:	e0fffc17 	ldw	r3,-16(fp)
   1a090:	10c5883a 	add	r2,r2,r3
   1a094:	10800e04 	addi	r2,r2,56
   1a098:	11000085 	stb	r4,2(r2)
		}    
		for (counter = 0; counter < 11; counter++)
		{
			boot_sector_data.volume_label[counter] = ((char) IORD_8DIRECT(device_pointer->base, 43+counter));
		}    
		for (counter = 0; counter < 8; counter++)
   1a09c:	e0bffc17 	ldw	r2,-16(fp)
   1a0a0:	10800044 	addi	r2,r2,1
   1a0a4:	e0bffc15 	stw	r2,-16(fp)
   1a0a8:	e0bffc17 	ldw	r2,-16(fp)
   1a0ac:	10800210 	cmplti	r2,r2,8
   1a0b0:	103fec1e 	bne	r2,zero,1a064 <__alt_mem_Flash_flash_data+0xf401a064>
		{
			boot_sector_data.file_system_type[counter] = ((char) IORD_8DIRECT(device_pointer->base, 54+counter));
		}    
		// Clear file records
		for (counter = 0; counter < MAX_FILES_OPENED; counter++)
   1a0b4:	e03ffc15 	stw	zero,-16(fp)
   1a0b8:	00000a06 	br	1a0e4 <Check_for_DOS_FAT+0x654>
		{
			active_files[counter].in_use = false;
   1a0bc:	008000f4 	movhi	r2,3
   1a0c0:	10a16c04 	addi	r2,r2,-31312
   1a0c4:	e0fffc17 	ldw	r3,-16(fp)
   1a0c8:	180691ba 	slli	r3,r3,6
   1a0cc:	18c00f04 	addi	r3,r3,60
   1a0d0:	10c5883a 	add	r2,r2,r3
   1a0d4:	10000015 	stw	zero,0(r2)
		for (counter = 0; counter < 8; counter++)
		{
			boot_sector_data.file_system_type[counter] = ((char) IORD_8DIRECT(device_pointer->base, 54+counter));
		}    
		// Clear file records
		for (counter = 0; counter < MAX_FILES_OPENED; counter++)
   1a0d8:	e0bffc17 	ldw	r2,-16(fp)
   1a0dc:	10800044 	addi	r2,r2,1
   1a0e0:	e0bffc15 	stw	r2,-16(fp)
   1a0e4:	e0bffc17 	ldw	r2,-16(fp)
   1a0e8:	10800510 	cmplti	r2,r2,20
   1a0ec:	103ff31e 	bne	r2,zero,1a0bc <__alt_mem_Flash_flash_data+0xf401a0bc>
		{
			active_files[counter].in_use = false;
		}
		result = true;
   1a0f0:	00800044 	movi	r2,1
   1a0f4:	e0bffb15 	stw	r2,-20(fp)
	short int end;

	result = Read_Sector_Data(0, FAT_partition_start_sector);
	end =  (short int) IORD_16DIRECT(device_pointer->base, 0x1fe);
	if (((end & 0x0000ffff) == 0x0000aa55) && (result))
	{
   1a0f8:	00000106 	br	1a100 <Check_for_DOS_FAT+0x670>
		}
		result = true;
	}
    else
    {
        result = false;
   1a0fc:	e03ffb15 	stw	zero,-20(fp)
    }
	return result;
   1a100:	e0bffb17 	ldw	r2,-20(fp)
}
   1a104:	e037883a 	mov	sp,fp
   1a108:	dfc00117 	ldw	ra,4(sp)
   1a10c:	df000017 	ldw	fp,0(sp)
   1a110:	dec00204 	addi	sp,sp,8
   1a114:	f800283a 	ret

0001a118 <Look_for_FAT16>:


bool Look_for_FAT16(void)
// Read the SD card to determine if it contains a FAT16 partition.
{
   1a118:	defffc04 	addi	sp,sp,-16
   1a11c:	dfc00315 	stw	ra,12(sp)
   1a120:	df000215 	stw	fp,8(sp)
   1a124:	df000204 	addi	fp,sp,8
	bool result = false;
   1a128:	e03ffe15 	stw	zero,-8(fp)

	if (alt_up_sd_card_is_Present())
   1a12c:	001bd840 	call	1bd84 <alt_up_sd_card_is_Present>
   1a130:	10002e26 	beq	r2,zero,1a1ec <Look_for_FAT16+0xd4>
	{
		short int csd_file_format = *CSD_register_w0;
   1a134:	d0a81417 	ldw	r2,-24496(gp)
   1a138:	1080000b 	ldhu	r2,0(r2)
   1a13c:	e0bfff0d 	sth	r2,-4(fp)
        
		fat_partition_offset_in_512_byte_sectors = 0;
   1a140:	d0281815 	stw	zero,-24480(gp)
		fat_partition_size_in_512_byte_sectors = 0;              
   1a144:	d0281915 	stw	zero,-24476(gp)

		if (((csd_file_format & 0x8000) == 0) && ((csd_file_format & 0x0c00) != 0x0c00))
   1a148:	e0bfff0f 	ldh	r2,-4(fp)
   1a14c:	10002716 	blt	r2,zero,1a1ec <Look_for_FAT16+0xd4>
   1a150:	e0bfff0b 	ldhu	r2,-4(fp)
   1a154:	10bfffcc 	andi	r2,r2,65535
   1a158:	1083000c 	andi	r2,r2,3072
   1a15c:	10830020 	cmpeqi	r2,r2,3072
   1a160:	1000221e 	bne	r2,zero,1a1ec <Look_for_FAT16+0xd4>
		{
			if ((csd_file_format & 0x0c00) == 0x0400)
   1a164:	e0bfff0b 	ldhu	r2,-4(fp)
   1a168:	10bfffcc 	andi	r2,r2,65535
   1a16c:	1083000c 	andi	r2,r2,3072
   1a170:	10810018 	cmpnei	r2,r2,1024
   1a174:	1000031e 	bne	r2,zero,1a184 <Look_for_FAT16+0x6c>
			{
				/* SD Card contains files stored in a DOS FAT (floppy like) file format, without a partition table */
				result = Check_for_DOS_FAT(0);
   1a178:	0009883a 	mov	r4,zero
   1a17c:	0019a900 	call	19a90 <Check_for_DOS_FAT>
   1a180:	e0bffe15 	stw	r2,-8(fp)
			}
			if ((csd_file_format & 0x0c00) == 0x0000)
   1a184:	e0bfff0b 	ldhu	r2,-4(fp)
   1a188:	10bfffcc 	andi	r2,r2,65535
   1a18c:	1083000c 	andi	r2,r2,3072
   1a190:	1000061e 	bne	r2,zero,1a1ac <Look_for_FAT16+0x94>
			{
				/* SD Card contains files stored in a Hard disk-like file format that contains a partition table */
				if (Check_for_Master_Boot_Record())
   1a194:	00193dc0 	call	193dc <Check_for_Master_Boot_Record>
   1a198:	10000426 	beq	r2,zero,1a1ac <Look_for_FAT16+0x94>
				{
					result = Check_for_DOS_FAT(fat_partition_offset_in_512_byte_sectors);
   1a19c:	d0a81817 	ldw	r2,-24480(gp)
   1a1a0:	1009883a 	mov	r4,r2
   1a1a4:	0019a900 	call	19a90 <Check_for_DOS_FAT>
   1a1a8:	e0bffe15 	stw	r2,-8(fp)
				}                        
			}
			if (result == true)
   1a1ac:	e0bffe17 	ldw	r2,-8(fp)
   1a1b0:	10800058 	cmpnei	r2,r2,1
   1a1b4:	10000d1e 	bne	r2,zero,1a1ec <Look_for_FAT16+0xd4>
			{
				// Accept only FAT16, not FAT12.
				if (boot_sector_data.bits_for_cluster_index != 16)
   1a1b8:	008000f4 	movhi	r2,3
   1a1bc:	10a15704 	addi	r2,r2,-31396
   1a1c0:	10801083 	ldbu	r2,66(r2)
   1a1c4:	10803fcc 	andi	r2,r2,255
   1a1c8:	10800420 	cmpeqi	r2,r2,16
   1a1cc:	1000021e 	bne	r2,zero,1a1d8 <Look_for_FAT16+0xc0>
				{
					result = false;
   1a1d0:	e03ffe15 	stw	zero,-8(fp)
   1a1d4:	00000506 	br	1a1ec <Look_for_FAT16+0xd4>
				}
				else
				{
					fat_partition_size_in_512_byte_sectors = boot_sector_data.number_of_sectors_in_partition;
   1a1d8:	008000f4 	movhi	r2,3
   1a1dc:	10a15704 	addi	r2,r2,-31396
   1a1e0:	1080058b 	ldhu	r2,22(r2)
   1a1e4:	10bfffcc 	andi	r2,r2,65535
   1a1e8:	d0a81915 	stw	r2,-24476(gp)
				}
			}
		}
	}
	return result;
   1a1ec:	e0bffe17 	ldw	r2,-8(fp)
}
   1a1f0:	e037883a 	mov	sp,fp
   1a1f4:	dfc00117 	ldw	ra,4(sp)
   1a1f8:	df000017 	ldw	fp,0(sp)
   1a1fc:	dec00204 	addi	sp,sp,8
   1a200:	f800283a 	ret

0001a204 <filename_to_upper_case>:
 

void filename_to_upper_case(char *file_name)
// Change file name to upper case.
{
   1a204:	defffb04 	addi	sp,sp,-20
   1a208:	dfc00415 	stw	ra,16(sp)
   1a20c:	df000315 	stw	fp,12(sp)
   1a210:	df000304 	addi	fp,sp,12
   1a214:	e13fff15 	stw	r4,-4(fp)
    int index;
    int length = strlen(file_name);
   1a218:	e13fff17 	ldw	r4,-4(fp)
   1a21c:	0000e580 	call	e58 <strlen>
   1a220:	e0bffe15 	stw	r2,-8(fp)
    
    for (index = 0; index < length; index++)
   1a224:	e03ffd15 	stw	zero,-12(fp)
   1a228:	00001e06 	br	1a2a4 <filename_to_upper_case+0xa0>
    {
        if ((file_name[index] >= 'a') && (file_name[index] <= 'z'))
   1a22c:	e0bffd17 	ldw	r2,-12(fp)
   1a230:	e0ffff17 	ldw	r3,-4(fp)
   1a234:	1885883a 	add	r2,r3,r2
   1a238:	10800003 	ldbu	r2,0(r2)
   1a23c:	10803fcc 	andi	r2,r2,255
   1a240:	1080201c 	xori	r2,r2,128
   1a244:	10bfe004 	addi	r2,r2,-128
   1a248:	10801850 	cmplti	r2,r2,97
   1a24c:	1000121e 	bne	r2,zero,1a298 <filename_to_upper_case+0x94>
   1a250:	e0bffd17 	ldw	r2,-12(fp)
   1a254:	e0ffff17 	ldw	r3,-4(fp)
   1a258:	1885883a 	add	r2,r3,r2
   1a25c:	10800003 	ldbu	r2,0(r2)
   1a260:	10803fcc 	andi	r2,r2,255
   1a264:	1080201c 	xori	r2,r2,128
   1a268:	10bfe004 	addi	r2,r2,-128
   1a26c:	10801ec8 	cmpgei	r2,r2,123
   1a270:	1000091e 	bne	r2,zero,1a298 <filename_to_upper_case+0x94>
        {
            file_name[index] = (file_name[index] - 'a') + 'A';
   1a274:	e0bffd17 	ldw	r2,-12(fp)
   1a278:	e0ffff17 	ldw	r3,-4(fp)
   1a27c:	1885883a 	add	r2,r3,r2
   1a280:	e0fffd17 	ldw	r3,-12(fp)
   1a284:	e13fff17 	ldw	r4,-4(fp)
   1a288:	20c7883a 	add	r3,r4,r3
   1a28c:	18c00003 	ldbu	r3,0(r3)
   1a290:	18fff804 	addi	r3,r3,-32
   1a294:	10c00005 	stb	r3,0(r2)
// Change file name to upper case.
{
    int index;
    int length = strlen(file_name);
    
    for (index = 0; index < length; index++)
   1a298:	e0bffd17 	ldw	r2,-12(fp)
   1a29c:	10800044 	addi	r2,r2,1
   1a2a0:	e0bffd15 	stw	r2,-12(fp)
   1a2a4:	e0fffd17 	ldw	r3,-12(fp)
   1a2a8:	e0bffe17 	ldw	r2,-8(fp)
   1a2ac:	18bfdf16 	blt	r3,r2,1a22c <__alt_mem_Flash_flash_data+0xf401a22c>
        if ((file_name[index] >= 'a') && (file_name[index] <= 'z'))
        {
            file_name[index] = (file_name[index] - 'a') + 'A';
        }
    }
}
   1a2b0:	e037883a 	mov	sp,fp
   1a2b4:	dfc00117 	ldw	ra,4(sp)
   1a2b8:	df000017 	ldw	fp,0(sp)
   1a2bc:	dec00204 	addi	sp,sp,8
   1a2c0:	f800283a 	ret

0001a2c4 <check_file_name_for_FAT16_compliance>:


bool check_file_name_for_FAT16_compliance(char *file_name)
// Check if the file complies with FAT16 naming convention.
{
   1a2c4:	defff804 	addi	sp,sp,-32
   1a2c8:	dfc00715 	stw	ra,28(sp)
   1a2cc:	df000615 	stw	fp,24(sp)
   1a2d0:	df000604 	addi	fp,sp,24
   1a2d4:	e13fff15 	stw	r4,-4(fp)
    int length = strlen(file_name);
   1a2d8:	e13fff17 	ldw	r4,-4(fp)
   1a2dc:	0000e580 	call	e58 <strlen>
   1a2e0:	e0bffe15 	stw	r2,-8(fp)
    int index;
    int last_dir_break_position = -1;
   1a2e4:	00bfffc4 	movi	r2,-1
   1a2e8:	e0bffb15 	stw	r2,-20(fp)
    int last_period = -1;
   1a2ec:	00bfffc4 	movi	r2,-1
   1a2f0:	e0bffc15 	stw	r2,-16(fp)
    bool result = true;
   1a2f4:	00800044 	movi	r2,1
   1a2f8:	e0bffd15 	stw	r2,-12(fp)
    
    for(index = 0; index < length; index++)
   1a2fc:	e03ffa15 	stw	zero,-24(fp)
   1a300:	00006d06 	br	1a4b8 <check_file_name_for_FAT16_compliance+0x1f4>
    {
        if ((file_name[index] == ' ') ||
   1a304:	e0bffa17 	ldw	r2,-24(fp)
   1a308:	e0ffff17 	ldw	r3,-4(fp)
   1a30c:	1885883a 	add	r2,r3,r2
   1a310:	10800003 	ldbu	r2,0(r2)
   1a314:	10803fcc 	andi	r2,r2,255
   1a318:	1080201c 	xori	r2,r2,128
   1a31c:	10bfe004 	addi	r2,r2,-128
   1a320:	10800820 	cmpeqi	r2,r2,32
   1a324:	10003e1e 	bne	r2,zero,1a420 <check_file_name_for_FAT16_compliance+0x15c>
            ((last_dir_break_position == (index - 1)) && ((file_name[index] == '\\') || (file_name[index] == '/'))) ||
   1a328:	e0bffa17 	ldw	r2,-24(fp)
   1a32c:	10ffffc4 	addi	r3,r2,-1
    int last_period = -1;
    bool result = true;
    
    for(index = 0; index < length; index++)
    {
        if ((file_name[index] == ' ') ||
   1a330:	e0bffb17 	ldw	r2,-20(fp)
   1a334:	1880121e 	bne	r3,r2,1a380 <check_file_name_for_FAT16_compliance+0xbc>
            ((last_dir_break_position == (index - 1)) && ((file_name[index] == '\\') || (file_name[index] == '/'))) ||
   1a338:	e0bffa17 	ldw	r2,-24(fp)
   1a33c:	e0ffff17 	ldw	r3,-4(fp)
   1a340:	1885883a 	add	r2,r3,r2
   1a344:	10800003 	ldbu	r2,0(r2)
   1a348:	10803fcc 	andi	r2,r2,255
   1a34c:	1080201c 	xori	r2,r2,128
   1a350:	10bfe004 	addi	r2,r2,-128
   1a354:	10801720 	cmpeqi	r2,r2,92
   1a358:	1000311e 	bne	r2,zero,1a420 <check_file_name_for_FAT16_compliance+0x15c>
   1a35c:	e0bffa17 	ldw	r2,-24(fp)
   1a360:	e0ffff17 	ldw	r3,-4(fp)
   1a364:	1885883a 	add	r2,r3,r2
   1a368:	10800003 	ldbu	r2,0(r2)
   1a36c:	10803fcc 	andi	r2,r2,255
   1a370:	1080201c 	xori	r2,r2,128
   1a374:	10bfe004 	addi	r2,r2,-128
   1a378:	10800be0 	cmpeqi	r2,r2,47
   1a37c:	1000281e 	bne	r2,zero,1a420 <check_file_name_for_FAT16_compliance+0x15c>
            ((index - last_period == 9) && (file_name[index] != '.')) ||
   1a380:	e0fffa17 	ldw	r3,-24(fp)
   1a384:	e0bffc17 	ldw	r2,-16(fp)
   1a388:	1885c83a 	sub	r2,r3,r2
    bool result = true;
    
    for(index = 0; index < length; index++)
    {
        if ((file_name[index] == ' ') ||
            ((last_dir_break_position == (index - 1)) && ((file_name[index] == '\\') || (file_name[index] == '/'))) ||
   1a38c:	10800258 	cmpnei	r2,r2,9
   1a390:	1000091e 	bne	r2,zero,1a3b8 <check_file_name_for_FAT16_compliance+0xf4>
            ((index - last_period == 9) && (file_name[index] != '.')) ||
   1a394:	e0bffa17 	ldw	r2,-24(fp)
   1a398:	e0ffff17 	ldw	r3,-4(fp)
   1a39c:	1885883a 	add	r2,r3,r2
   1a3a0:	10800003 	ldbu	r2,0(r2)
   1a3a4:	10803fcc 	andi	r2,r2,255
   1a3a8:	1080201c 	xori	r2,r2,128
   1a3ac:	10bfe004 	addi	r2,r2,-128
   1a3b0:	10800b98 	cmpnei	r2,r2,46
   1a3b4:	10001a1e 	bne	r2,zero,1a420 <check_file_name_for_FAT16_compliance+0x15c>
   1a3b8:	e0fffb17 	ldw	r3,-20(fp)
   1a3bc:	e0bffc17 	ldw	r2,-16(fp)
   1a3c0:	18801926 	beq	r3,r2,1a428 <check_file_name_for_FAT16_compliance+0x164>
            ((last_dir_break_position != last_period) && (index - last_period > 3) &&
   1a3c4:	e0fffa17 	ldw	r3,-24(fp)
   1a3c8:	e0bffc17 	ldw	r2,-16(fp)
   1a3cc:	1885c83a 	sub	r2,r3,r2
   1a3d0:	10800110 	cmplti	r2,r2,4
   1a3d4:	1000141e 	bne	r2,zero,1a428 <check_file_name_for_FAT16_compliance+0x164>
             (file_name[index] != '\\') && (file_name[index] != '/'))
   1a3d8:	e0bffa17 	ldw	r2,-24(fp)
   1a3dc:	e0ffff17 	ldw	r3,-4(fp)
   1a3e0:	1885883a 	add	r2,r3,r2
   1a3e4:	10800003 	ldbu	r2,0(r2)
    for(index = 0; index < length; index++)
    {
        if ((file_name[index] == ' ') ||
            ((last_dir_break_position == (index - 1)) && ((file_name[index] == '\\') || (file_name[index] == '/'))) ||
            ((index - last_period == 9) && (file_name[index] != '.')) ||
            ((last_dir_break_position != last_period) && (index - last_period > 3) &&
   1a3e8:	10803fcc 	andi	r2,r2,255
   1a3ec:	1080201c 	xori	r2,r2,128
   1a3f0:	10bfe004 	addi	r2,r2,-128
   1a3f4:	10801720 	cmpeqi	r2,r2,92
   1a3f8:	10000b1e 	bne	r2,zero,1a428 <check_file_name_for_FAT16_compliance+0x164>
             (file_name[index] != '\\') && (file_name[index] != '/'))
   1a3fc:	e0bffa17 	ldw	r2,-24(fp)
   1a400:	e0ffff17 	ldw	r3,-4(fp)
   1a404:	1885883a 	add	r2,r3,r2
   1a408:	10800003 	ldbu	r2,0(r2)
   1a40c:	10803fcc 	andi	r2,r2,255
   1a410:	1080201c 	xori	r2,r2,128
   1a414:	10bfe004 	addi	r2,r2,-128
   1a418:	10800be0 	cmpeqi	r2,r2,47
   1a41c:	1000021e 	bne	r2,zero,1a428 <check_file_name_for_FAT16_compliance+0x164>
           )
        {
            result = false;
   1a420:	e03ffd15 	stw	zero,-12(fp)
            break;
   1a424:	00002706 	br	1a4c4 <check_file_name_for_FAT16_compliance+0x200>
        }
        if ((file_name[index] == '\\') || (file_name[index] == '/'))
   1a428:	e0bffa17 	ldw	r2,-24(fp)
   1a42c:	e0ffff17 	ldw	r3,-4(fp)
   1a430:	1885883a 	add	r2,r3,r2
   1a434:	10800003 	ldbu	r2,0(r2)
   1a438:	10803fcc 	andi	r2,r2,255
   1a43c:	1080201c 	xori	r2,r2,128
   1a440:	10bfe004 	addi	r2,r2,-128
   1a444:	10801720 	cmpeqi	r2,r2,92
   1a448:	1000091e 	bne	r2,zero,1a470 <check_file_name_for_FAT16_compliance+0x1ac>
   1a44c:	e0bffa17 	ldw	r2,-24(fp)
   1a450:	e0ffff17 	ldw	r3,-4(fp)
   1a454:	1885883a 	add	r2,r3,r2
   1a458:	10800003 	ldbu	r2,0(r2)
   1a45c:	10803fcc 	andi	r2,r2,255
   1a460:	1080201c 	xori	r2,r2,128
   1a464:	10bfe004 	addi	r2,r2,-128
   1a468:	10800bd8 	cmpnei	r2,r2,47
   1a46c:	1000041e 	bne	r2,zero,1a480 <check_file_name_for_FAT16_compliance+0x1bc>
        {
            last_period = index;
   1a470:	e0bffa17 	ldw	r2,-24(fp)
   1a474:	e0bffc15 	stw	r2,-16(fp)
            last_dir_break_position = index;
   1a478:	e0bffa17 	ldw	r2,-24(fp)
   1a47c:	e0bffb15 	stw	r2,-20(fp)
        }
        if (file_name[index] == '.')
   1a480:	e0bffa17 	ldw	r2,-24(fp)
   1a484:	e0ffff17 	ldw	r3,-4(fp)
   1a488:	1885883a 	add	r2,r3,r2
   1a48c:	10800003 	ldbu	r2,0(r2)
   1a490:	10803fcc 	andi	r2,r2,255
   1a494:	1080201c 	xori	r2,r2,128
   1a498:	10bfe004 	addi	r2,r2,-128
   1a49c:	10800b98 	cmpnei	r2,r2,46
   1a4a0:	1000021e 	bne	r2,zero,1a4ac <check_file_name_for_FAT16_compliance+0x1e8>
        {
            last_period = index;
   1a4a4:	e0bffa17 	ldw	r2,-24(fp)
   1a4a8:	e0bffc15 	stw	r2,-16(fp)
    int index;
    int last_dir_break_position = -1;
    int last_period = -1;
    bool result = true;
    
    for(index = 0; index < length; index++)
   1a4ac:	e0bffa17 	ldw	r2,-24(fp)
   1a4b0:	10800044 	addi	r2,r2,1
   1a4b4:	e0bffa15 	stw	r2,-24(fp)
   1a4b8:	e0fffa17 	ldw	r3,-24(fp)
   1a4bc:	e0bffe17 	ldw	r2,-8(fp)
   1a4c0:	18bf9016 	blt	r3,r2,1a304 <__alt_mem_Flash_flash_data+0xf401a304>
        if (file_name[index] == '.')
        {
            last_period = index;
        }
    }
    if ((file_name[length-1] == '\\') || (file_name[length-1] == '/'))
   1a4c4:	e0bffe17 	ldw	r2,-8(fp)
   1a4c8:	10bfffc4 	addi	r2,r2,-1
   1a4cc:	e0ffff17 	ldw	r3,-4(fp)
   1a4d0:	1885883a 	add	r2,r3,r2
   1a4d4:	10800003 	ldbu	r2,0(r2)
   1a4d8:	10803fcc 	andi	r2,r2,255
   1a4dc:	1080201c 	xori	r2,r2,128
   1a4e0:	10bfe004 	addi	r2,r2,-128
   1a4e4:	10801720 	cmpeqi	r2,r2,92
   1a4e8:	10000a1e 	bne	r2,zero,1a514 <check_file_name_for_FAT16_compliance+0x250>
   1a4ec:	e0bffe17 	ldw	r2,-8(fp)
   1a4f0:	10bfffc4 	addi	r2,r2,-1
   1a4f4:	e0ffff17 	ldw	r3,-4(fp)
   1a4f8:	1885883a 	add	r2,r3,r2
   1a4fc:	10800003 	ldbu	r2,0(r2)
   1a500:	10803fcc 	andi	r2,r2,255
   1a504:	1080201c 	xori	r2,r2,128
   1a508:	10bfe004 	addi	r2,r2,-128
   1a50c:	10800bd8 	cmpnei	r2,r2,47
   1a510:	1000011e 	bne	r2,zero,1a518 <check_file_name_for_FAT16_compliance+0x254>
    {
        result = false;
   1a514:	e03ffd15 	stw	zero,-12(fp)
    }
    return result;
   1a518:	e0bffd17 	ldw	r2,-12(fp)
}
   1a51c:	e037883a 	mov	sp,fp
   1a520:	dfc00117 	ldw	ra,4(sp)
   1a524:	df000017 	ldw	fp,0(sp)
   1a528:	dec00204 	addi	sp,sp,8
   1a52c:	f800283a 	ret

0001a530 <get_dir_divider_location>:


int get_dir_divider_location(char *name)
// Find a directory divider location.
{
   1a530:	defffb04 	addi	sp,sp,-20
   1a534:	dfc00415 	stw	ra,16(sp)
   1a538:	df000315 	stw	fp,12(sp)
   1a53c:	df000304 	addi	fp,sp,12
   1a540:	e13fff15 	stw	r4,-4(fp)
    int index = 0;
   1a544:	e03ffd15 	stw	zero,-12(fp)
    int length = strlen(name);
   1a548:	e13fff17 	ldw	r4,-4(fp)
   1a54c:	0000e580 	call	e58 <strlen>
   1a550:	e0bffe15 	stw	r2,-8(fp)
    
    for(index = 0; index < length; index++)
   1a554:	e03ffd15 	stw	zero,-12(fp)
   1a558:	00001506 	br	1a5b0 <get_dir_divider_location+0x80>
    {
        if ((name[index] == '\\') || (name[index] == '/'))
   1a55c:	e0bffd17 	ldw	r2,-12(fp)
   1a560:	e0ffff17 	ldw	r3,-4(fp)
   1a564:	1885883a 	add	r2,r3,r2
   1a568:	10800003 	ldbu	r2,0(r2)
   1a56c:	10803fcc 	andi	r2,r2,255
   1a570:	1080201c 	xori	r2,r2,128
   1a574:	10bfe004 	addi	r2,r2,-128
   1a578:	10801720 	cmpeqi	r2,r2,92
   1a57c:	10000f1e 	bne	r2,zero,1a5bc <get_dir_divider_location+0x8c>
   1a580:	e0bffd17 	ldw	r2,-12(fp)
   1a584:	e0ffff17 	ldw	r3,-4(fp)
   1a588:	1885883a 	add	r2,r3,r2
   1a58c:	10800003 	ldbu	r2,0(r2)
   1a590:	10803fcc 	andi	r2,r2,255
   1a594:	1080201c 	xori	r2,r2,128
   1a598:	10bfe004 	addi	r2,r2,-128
   1a59c:	10800be0 	cmpeqi	r2,r2,47
   1a5a0:	1000061e 	bne	r2,zero,1a5bc <get_dir_divider_location+0x8c>
// Find a directory divider location.
{
    int index = 0;
    int length = strlen(name);
    
    for(index = 0; index < length; index++)
   1a5a4:	e0bffd17 	ldw	r2,-12(fp)
   1a5a8:	10800044 	addi	r2,r2,1
   1a5ac:	e0bffd15 	stw	r2,-12(fp)
   1a5b0:	e0fffd17 	ldw	r3,-12(fp)
   1a5b4:	e0bffe17 	ldw	r2,-8(fp)
   1a5b8:	18bfe816 	blt	r3,r2,1a55c <__alt_mem_Flash_flash_data+0xf401a55c>
        {
            break;
        }
    }
    
    if (index == length)
   1a5bc:	e0fffd17 	ldw	r3,-12(fp)
   1a5c0:	e0bffe17 	ldw	r2,-8(fp)
   1a5c4:	1880021e 	bne	r3,r2,1a5d0 <get_dir_divider_location+0xa0>
    {
        index = -1;
   1a5c8:	00bfffc4 	movi	r2,-1
   1a5cc:	e0bffd15 	stw	r2,-12(fp)
    }
    
    return index;
   1a5d0:	e0bffd17 	ldw	r2,-12(fp)
}
   1a5d4:	e037883a 	mov	sp,fp
   1a5d8:	dfc00117 	ldw	ra,4(sp)
   1a5dc:	df000017 	ldw	fp,0(sp)
   1a5e0:	dec00204 	addi	sp,sp,8
   1a5e4:	f800283a 	ret

0001a5e8 <match_file_record_to_name_ext>:


bool match_file_record_to_name_ext(t_file_record *file_record, char *name, char *extension)
/* See if the given name and extension match the file record. Return true if this is so, false otherwise. */
{
   1a5e8:	defffa04 	addi	sp,sp,-24
   1a5ec:	df000515 	stw	fp,20(sp)
   1a5f0:	df000504 	addi	fp,sp,20
   1a5f4:	e13ffd15 	stw	r4,-12(fp)
   1a5f8:	e17ffe15 	stw	r5,-8(fp)
   1a5fc:	e1bfff15 	stw	r6,-4(fp)
    bool match = true;
   1a600:	00800044 	movi	r2,1
   1a604:	e0bffb15 	stw	r2,-20(fp)
	int index;

    for (index = 0; index < 8; index++)
   1a608:	e03ffc15 	stw	zero,-16(fp)
   1a60c:	00004606 	br	1a728 <match_file_record_to_name_ext+0x140>
    {
        if (CHAR_TO_UPPER(file_record->name[index]) != CHAR_TO_UPPER(name[index]))
   1a610:	e0fffd17 	ldw	r3,-12(fp)
   1a614:	e0bffc17 	ldw	r2,-16(fp)
   1a618:	1885883a 	add	r2,r3,r2
   1a61c:	10800003 	ldbu	r2,0(r2)
   1a620:	10803fcc 	andi	r2,r2,255
   1a624:	10801870 	cmpltui	r2,r2,97
   1a628:	1000101e 	bne	r2,zero,1a66c <match_file_record_to_name_ext+0x84>
   1a62c:	e0fffd17 	ldw	r3,-12(fp)
   1a630:	e0bffc17 	ldw	r2,-16(fp)
   1a634:	1885883a 	add	r2,r3,r2
   1a638:	10800003 	ldbu	r2,0(r2)
   1a63c:	10803fcc 	andi	r2,r2,255
   1a640:	10801ee8 	cmpgeui	r2,r2,123
   1a644:	1000091e 	bne	r2,zero,1a66c <match_file_record_to_name_ext+0x84>
   1a648:	e0fffd17 	ldw	r3,-12(fp)
   1a64c:	e0bffc17 	ldw	r2,-16(fp)
   1a650:	1885883a 	add	r2,r3,r2
   1a654:	10800003 	ldbu	r2,0(r2)
   1a658:	10bff804 	addi	r2,r2,-32
   1a65c:	10c03fcc 	andi	r3,r2,255
   1a660:	18c0201c 	xori	r3,r3,128
   1a664:	18ffe004 	addi	r3,r3,-128
   1a668:	00000706 	br	1a688 <match_file_record_to_name_ext+0xa0>
   1a66c:	e0fffd17 	ldw	r3,-12(fp)
   1a670:	e0bffc17 	ldw	r2,-16(fp)
   1a674:	1885883a 	add	r2,r3,r2
   1a678:	10800003 	ldbu	r2,0(r2)
   1a67c:	10c03fcc 	andi	r3,r2,255
   1a680:	18c0201c 	xori	r3,r3,128
   1a684:	18ffe004 	addi	r3,r3,-128
   1a688:	e0bffc17 	ldw	r2,-16(fp)
   1a68c:	e13ffe17 	ldw	r4,-8(fp)
   1a690:	2085883a 	add	r2,r4,r2
   1a694:	10800003 	ldbu	r2,0(r2)
   1a698:	10803fcc 	andi	r2,r2,255
   1a69c:	1080201c 	xori	r2,r2,128
   1a6a0:	10bfe004 	addi	r2,r2,-128
   1a6a4:	10801850 	cmplti	r2,r2,97
   1a6a8:	1000121e 	bne	r2,zero,1a6f4 <match_file_record_to_name_ext+0x10c>
   1a6ac:	e0bffc17 	ldw	r2,-16(fp)
   1a6b0:	e13ffe17 	ldw	r4,-8(fp)
   1a6b4:	2085883a 	add	r2,r4,r2
   1a6b8:	10800003 	ldbu	r2,0(r2)
   1a6bc:	10803fcc 	andi	r2,r2,255
   1a6c0:	1080201c 	xori	r2,r2,128
   1a6c4:	10bfe004 	addi	r2,r2,-128
   1a6c8:	10801ec8 	cmpgei	r2,r2,123
   1a6cc:	1000091e 	bne	r2,zero,1a6f4 <match_file_record_to_name_ext+0x10c>
   1a6d0:	e0bffc17 	ldw	r2,-16(fp)
   1a6d4:	e13ffe17 	ldw	r4,-8(fp)
   1a6d8:	2085883a 	add	r2,r4,r2
   1a6dc:	10800003 	ldbu	r2,0(r2)
   1a6e0:	10bff804 	addi	r2,r2,-32
   1a6e4:	10803fcc 	andi	r2,r2,255
   1a6e8:	1080201c 	xori	r2,r2,128
   1a6ec:	10bfe004 	addi	r2,r2,-128
   1a6f0:	00000706 	br	1a710 <match_file_record_to_name_ext+0x128>
   1a6f4:	e0bffc17 	ldw	r2,-16(fp)
   1a6f8:	e13ffe17 	ldw	r4,-8(fp)
   1a6fc:	2085883a 	add	r2,r4,r2
   1a700:	10800003 	ldbu	r2,0(r2)
   1a704:	10803fcc 	andi	r2,r2,255
   1a708:	1080201c 	xori	r2,r2,128
   1a70c:	10bfe004 	addi	r2,r2,-128
   1a710:	18800226 	beq	r3,r2,1a71c <match_file_record_to_name_ext+0x134>
        {
            match = false;
   1a714:	e03ffb15 	stw	zero,-20(fp)
			break;
   1a718:	00000606 	br	1a734 <match_file_record_to_name_ext+0x14c>
/* See if the given name and extension match the file record. Return true if this is so, false otherwise. */
{
    bool match = true;
	int index;

    for (index = 0; index < 8; index++)
   1a71c:	e0bffc17 	ldw	r2,-16(fp)
   1a720:	10800044 	addi	r2,r2,1
   1a724:	e0bffc15 	stw	r2,-16(fp)
   1a728:	e0bffc17 	ldw	r2,-16(fp)
   1a72c:	10800210 	cmplti	r2,r2,8
   1a730:	103fb71e 	bne	r2,zero,1a610 <__alt_mem_Flash_flash_data+0xf401a610>
        {
            match = false;
			break;
        }
    }
    for (index = 0; index < 3; index++)
   1a734:	e03ffc15 	stw	zero,-16(fp)
   1a738:	00004a06 	br	1a864 <match_file_record_to_name_ext+0x27c>
    {
        if (CHAR_TO_UPPER(file_record->extension[index]) != CHAR_TO_UPPER(extension[index]))
   1a73c:	e0fffd17 	ldw	r3,-12(fp)
   1a740:	e0bffc17 	ldw	r2,-16(fp)
   1a744:	1885883a 	add	r2,r3,r2
   1a748:	10800204 	addi	r2,r2,8
   1a74c:	10800003 	ldbu	r2,0(r2)
   1a750:	10803fcc 	andi	r2,r2,255
   1a754:	10801870 	cmpltui	r2,r2,97
   1a758:	1000121e 	bne	r2,zero,1a7a4 <match_file_record_to_name_ext+0x1bc>
   1a75c:	e0fffd17 	ldw	r3,-12(fp)
   1a760:	e0bffc17 	ldw	r2,-16(fp)
   1a764:	1885883a 	add	r2,r3,r2
   1a768:	10800204 	addi	r2,r2,8
   1a76c:	10800003 	ldbu	r2,0(r2)
   1a770:	10803fcc 	andi	r2,r2,255
   1a774:	10801ee8 	cmpgeui	r2,r2,123
   1a778:	10000a1e 	bne	r2,zero,1a7a4 <match_file_record_to_name_ext+0x1bc>
   1a77c:	e0fffd17 	ldw	r3,-12(fp)
   1a780:	e0bffc17 	ldw	r2,-16(fp)
   1a784:	1885883a 	add	r2,r3,r2
   1a788:	10800204 	addi	r2,r2,8
   1a78c:	10800003 	ldbu	r2,0(r2)
   1a790:	10bff804 	addi	r2,r2,-32
   1a794:	10c03fcc 	andi	r3,r2,255
   1a798:	18c0201c 	xori	r3,r3,128
   1a79c:	18ffe004 	addi	r3,r3,-128
   1a7a0:	00000806 	br	1a7c4 <match_file_record_to_name_ext+0x1dc>
   1a7a4:	e0fffd17 	ldw	r3,-12(fp)
   1a7a8:	e0bffc17 	ldw	r2,-16(fp)
   1a7ac:	1885883a 	add	r2,r3,r2
   1a7b0:	10800204 	addi	r2,r2,8
   1a7b4:	10800003 	ldbu	r2,0(r2)
   1a7b8:	10c03fcc 	andi	r3,r2,255
   1a7bc:	18c0201c 	xori	r3,r3,128
   1a7c0:	18ffe004 	addi	r3,r3,-128
   1a7c4:	e0bffc17 	ldw	r2,-16(fp)
   1a7c8:	e13fff17 	ldw	r4,-4(fp)
   1a7cc:	2085883a 	add	r2,r4,r2
   1a7d0:	10800003 	ldbu	r2,0(r2)
   1a7d4:	10803fcc 	andi	r2,r2,255
   1a7d8:	1080201c 	xori	r2,r2,128
   1a7dc:	10bfe004 	addi	r2,r2,-128
   1a7e0:	10801850 	cmplti	r2,r2,97
   1a7e4:	1000121e 	bne	r2,zero,1a830 <match_file_record_to_name_ext+0x248>
   1a7e8:	e0bffc17 	ldw	r2,-16(fp)
   1a7ec:	e13fff17 	ldw	r4,-4(fp)
   1a7f0:	2085883a 	add	r2,r4,r2
   1a7f4:	10800003 	ldbu	r2,0(r2)
   1a7f8:	10803fcc 	andi	r2,r2,255
   1a7fc:	1080201c 	xori	r2,r2,128
   1a800:	10bfe004 	addi	r2,r2,-128
   1a804:	10801ec8 	cmpgei	r2,r2,123
   1a808:	1000091e 	bne	r2,zero,1a830 <match_file_record_to_name_ext+0x248>
   1a80c:	e0bffc17 	ldw	r2,-16(fp)
   1a810:	e13fff17 	ldw	r4,-4(fp)
   1a814:	2085883a 	add	r2,r4,r2
   1a818:	10800003 	ldbu	r2,0(r2)
   1a81c:	10bff804 	addi	r2,r2,-32
   1a820:	10803fcc 	andi	r2,r2,255
   1a824:	1080201c 	xori	r2,r2,128
   1a828:	10bfe004 	addi	r2,r2,-128
   1a82c:	00000706 	br	1a84c <match_file_record_to_name_ext+0x264>
   1a830:	e0bffc17 	ldw	r2,-16(fp)
   1a834:	e13fff17 	ldw	r4,-4(fp)
   1a838:	2085883a 	add	r2,r4,r2
   1a83c:	10800003 	ldbu	r2,0(r2)
   1a840:	10803fcc 	andi	r2,r2,255
   1a844:	1080201c 	xori	r2,r2,128
   1a848:	10bfe004 	addi	r2,r2,-128
   1a84c:	18800226 	beq	r3,r2,1a858 <match_file_record_to_name_ext+0x270>
        {
            match = false;
   1a850:	e03ffb15 	stw	zero,-20(fp)
			break;
   1a854:	00000606 	br	1a870 <match_file_record_to_name_ext+0x288>
        {
            match = false;
			break;
        }
    }
    for (index = 0; index < 3; index++)
   1a858:	e0bffc17 	ldw	r2,-16(fp)
   1a85c:	10800044 	addi	r2,r2,1
   1a860:	e0bffc15 	stw	r2,-16(fp)
   1a864:	e0bffc17 	ldw	r2,-16(fp)
   1a868:	108000d0 	cmplti	r2,r2,3
   1a86c:	103fb31e 	bne	r2,zero,1a73c <__alt_mem_Flash_flash_data+0xf401a73c>
        {
            match = false;
			break;
        }
    }
	return match;
   1a870:	e0bffb17 	ldw	r2,-20(fp)
}
   1a874:	e037883a 	mov	sp,fp
   1a878:	df000017 	ldw	fp,0(sp)
   1a87c:	dec00104 	addi	sp,sp,4
   1a880:	f800283a 	ret

0001a884 <get_home_directory_cluster_for_file>:


bool get_home_directory_cluster_for_file(char *file_name, int *home_directory_cluster, t_file_record *file_record)
// Scan the directories in given in the file name and find the root directory for the file.
{
   1a884:	deffe704 	addi	sp,sp,-100
   1a888:	dfc01815 	stw	ra,96(sp)
   1a88c:	df001715 	stw	fp,92(sp)
   1a890:	df001704 	addi	fp,sp,92
   1a894:	e13ffd15 	stw	r4,-12(fp)
   1a898:	e17ffe15 	stw	r5,-8(fp)
   1a89c:	e1bfff15 	stw	r6,-4(fp)
    bool result = false;
   1a8a0:	e03fe915 	stw	zero,-92(fp)
    int home_dir_cluster = 0;
   1a8a4:	e03fea15 	stw	zero,-88(fp)
    int location, index;
    int start_location = 0;
   1a8a8:	e03fed15 	stw	zero,-76(fp)
    
    /* Get Next Directory. */
    location = get_dir_divider_location( file_name );
   1a8ac:	e13ffd17 	ldw	r4,-12(fp)
   1a8b0:	001a5300 	call	1a530 <get_dir_divider_location>
   1a8b4:	e0bfeb15 	stw	r2,-84(fp)
    while (location > 0)
   1a8b8:	00012c06 	br	1ad6c <get_home_directory_cluster_for_file+0x4e8>
    {
        char name[8] = { ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ' };
   1a8bc:	00800804 	movi	r2,32
   1a8c0:	e0bff905 	stb	r2,-28(fp)
   1a8c4:	00800804 	movi	r2,32
   1a8c8:	e0bff945 	stb	r2,-27(fp)
   1a8cc:	00800804 	movi	r2,32
   1a8d0:	e0bff985 	stb	r2,-26(fp)
   1a8d4:	00800804 	movi	r2,32
   1a8d8:	e0bff9c5 	stb	r2,-25(fp)
   1a8dc:	00800804 	movi	r2,32
   1a8e0:	e0bffa05 	stb	r2,-24(fp)
   1a8e4:	00800804 	movi	r2,32
   1a8e8:	e0bffa45 	stb	r2,-23(fp)
   1a8ec:	00800804 	movi	r2,32
   1a8f0:	e0bffa85 	stb	r2,-22(fp)
   1a8f4:	00800804 	movi	r2,32
   1a8f8:	e0bffac5 	stb	r2,-21(fp)
        char extension[3] = { ' ', ' ', ' ' };
   1a8fc:	00800804 	movi	r2,32
   1a900:	e0bffb05 	stb	r2,-20(fp)
   1a904:	00800804 	movi	r2,32
   1a908:	e0bffb45 	stb	r2,-19(fp)
   1a90c:	00800804 	movi	r2,32
   1a910:	e0bffb85 	stb	r2,-18(fp)
        int ext_index = -1;
   1a914:	00bfffc4 	movi	r2,-1
   1a918:	e0bfee15 	stw	r2,-72(fp)
        int new_cluster = home_dir_cluster;
   1a91c:	e0bfea17 	ldw	r2,-88(fp)
   1a920:	e0bfef15 	stw	r2,-68(fp)
        
        // Get the name of the directory in name/extension format.
        for (index = 0; index < location; index++)
   1a924:	e03fec15 	stw	zero,-80(fp)
   1a928:	00002d06 	br	1a9e0 <get_home_directory_cluster_for_file+0x15c>
        {
            if (file_name[index+start_location] == '.')
   1a92c:	e0ffec17 	ldw	r3,-80(fp)
   1a930:	e0bfed17 	ldw	r2,-76(fp)
   1a934:	1885883a 	add	r2,r3,r2
   1a938:	1007883a 	mov	r3,r2
   1a93c:	e0bffd17 	ldw	r2,-12(fp)
   1a940:	10c5883a 	add	r2,r2,r3
   1a944:	10800003 	ldbu	r2,0(r2)
   1a948:	10803fcc 	andi	r2,r2,255
   1a94c:	1080201c 	xori	r2,r2,128
   1a950:	10bfe004 	addi	r2,r2,-128
   1a954:	10800b98 	cmpnei	r2,r2,46
   1a958:	1000031e 	bne	r2,zero,1a968 <get_home_directory_cluster_for_file+0xe4>
            {
                ext_index = index;
   1a95c:	e0bfec17 	ldw	r2,-80(fp)
   1a960:	e0bfee15 	stw	r2,-72(fp)
   1a964:	00001b06 	br	1a9d4 <get_home_directory_cluster_for_file+0x150>
            }
            else if (ext_index < 0)
   1a968:	e0bfee17 	ldw	r2,-72(fp)
   1a96c:	10000c0e 	bge	r2,zero,1a9a0 <get_home_directory_cluster_for_file+0x11c>
            {
                name[index] = file_name[index+start_location];
   1a970:	e0ffec17 	ldw	r3,-80(fp)
   1a974:	e0bfed17 	ldw	r2,-76(fp)
   1a978:	1885883a 	add	r2,r3,r2
   1a97c:	1007883a 	mov	r3,r2
   1a980:	e0bffd17 	ldw	r2,-12(fp)
   1a984:	10c5883a 	add	r2,r2,r3
   1a988:	10c00003 	ldbu	r3,0(r2)
   1a98c:	e13ff904 	addi	r4,fp,-28
   1a990:	e0bfec17 	ldw	r2,-80(fp)
   1a994:	2085883a 	add	r2,r4,r2
   1a998:	10c00005 	stb	r3,0(r2)
   1a99c:	00000d06 	br	1a9d4 <get_home_directory_cluster_for_file+0x150>
            }
            else
            {
                extension[index-ext_index] = file_name[index+start_location];
   1a9a0:	e0ffec17 	ldw	r3,-80(fp)
   1a9a4:	e0bfee17 	ldw	r2,-72(fp)
   1a9a8:	1885c83a 	sub	r2,r3,r2
   1a9ac:	e13fec17 	ldw	r4,-80(fp)
   1a9b0:	e0ffed17 	ldw	r3,-76(fp)
   1a9b4:	20c7883a 	add	r3,r4,r3
   1a9b8:	1809883a 	mov	r4,r3
   1a9bc:	e0fffd17 	ldw	r3,-12(fp)
   1a9c0:	1907883a 	add	r3,r3,r4
   1a9c4:	18c00003 	ldbu	r3,0(r3)
   1a9c8:	e13ffb04 	addi	r4,fp,-20
   1a9cc:	2085883a 	add	r2,r4,r2
   1a9d0:	10c00005 	stb	r3,0(r2)
        char extension[3] = { ' ', ' ', ' ' };
        int ext_index = -1;
        int new_cluster = home_dir_cluster;
        
        // Get the name of the directory in name/extension format.
        for (index = 0; index < location; index++)
   1a9d4:	e0bfec17 	ldw	r2,-80(fp)
   1a9d8:	10800044 	addi	r2,r2,1
   1a9dc:	e0bfec15 	stw	r2,-80(fp)
   1a9e0:	e0ffec17 	ldw	r3,-80(fp)
   1a9e4:	e0bfeb17 	ldw	r2,-84(fp)
   1a9e8:	18bfd016 	blt	r3,r2,1a92c <__alt_mem_Flash_flash_data+0xf401a92c>
            {
                extension[index-ext_index] = file_name[index+start_location];
            }
        }
        
        if (home_dir_cluster == 0)
   1a9ec:	e0bfea17 	ldw	r2,-88(fp)
   1a9f0:	10005b1e 	bne	r2,zero,1ab60 <get_home_directory_cluster_for_file+0x2dc>
        {
            /* We are in the root directory. Scan the directory (of predefined size) and see if you can find the specified file. */
            int max_root_dir_sectors = ((32*boot_sector_data.max_number_of_dir_entires) / boot_sector_data.sector_size_in_bytes);
   1a9f4:	008000f4 	movhi	r2,3
   1a9f8:	10a15704 	addi	r2,r2,-31396
   1a9fc:	1080050b 	ldhu	r2,20(r2)
   1aa00:	10bfffcc 	andi	r2,r2,65535
   1aa04:	1006917a 	slli	r3,r2,5
   1aa08:	008000f4 	movhi	r2,3
   1aa0c:	10a15704 	addi	r2,r2,-31396
   1aa10:	1080030b 	ldhu	r2,12(r2)
   1aa14:	10bfffcc 	andi	r2,r2,65535
   1aa18:	1885283a 	div	r2,r3,r2
   1aa1c:	e0bff715 	stw	r2,-36(fp)
            int sector_index;
            
            for (sector_index = 0; sector_index < max_root_dir_sectors; sector_index++)
   1aa20:	e03ff015 	stw	zero,-64(fp)
   1aa24:	00003e06 	br	1ab20 <get_home_directory_cluster_for_file+0x29c>
            {
                if (Read_Sector_Data(sector_index+boot_sector_data.root_directory_sector_offset, fat_partition_offset_in_512_byte_sectors))
   1aa28:	008000f4 	movhi	r2,3
   1aa2c:	10a15704 	addi	r2,r2,-31396
   1aa30:	10c01317 	ldw	r3,76(r2)
   1aa34:	e0bff017 	ldw	r2,-64(fp)
   1aa38:	1885883a 	add	r2,r3,r2
   1aa3c:	1007883a 	mov	r3,r2
   1aa40:	d0a81817 	ldw	r2,-24480(gp)
   1aa44:	1809883a 	mov	r4,r3
   1aa48:	100b883a 	mov	r5,r2
   1aa4c:	00191700 	call	19170 <Read_Sector_Data>
   1aa50:	10002e26 	beq	r2,zero,1ab0c <get_home_directory_cluster_for_file+0x288>
                {
                    int file_counter;
                    
                    for (file_counter = 0; file_counter < 16; file_counter++)
   1aa54:	e03ff115 	stw	zero,-60(fp)
   1aa58:	00002506 	br	1aaf0 <get_home_directory_cluster_for_file+0x26c>
                    {
                       
                        // Read file record.
                        Read_File_Record_At_Offset(file_counter*32, file_record, 0, sector_index);
   1aa5c:	e0bff117 	ldw	r2,-60(fp)
   1aa60:	1006917a 	slli	r3,r2,5
   1aa64:	e0bff017 	ldw	r2,-64(fp)
   1aa68:	1809883a 	mov	r4,r3
   1aa6c:	e17fff17 	ldw	r5,-4(fp)
   1aa70:	000d883a 	mov	r6,zero
   1aa74:	100f883a 	mov	r7,r2
   1aa78:	00195880 	call	19588 <Read_File_Record_At_Offset>
                        if ((file_record->name[0] != 0xe5) && (file_record->name[0] != 0x00))
   1aa7c:	e0bfff17 	ldw	r2,-4(fp)
   1aa80:	10800003 	ldbu	r2,0(r2)
   1aa84:	10803fcc 	andi	r2,r2,255
   1aa88:	10803960 	cmpeqi	r2,r2,229
   1aa8c:	1000151e 	bne	r2,zero,1aae4 <get_home_directory_cluster_for_file+0x260>
   1aa90:	e0bfff17 	ldw	r2,-4(fp)
   1aa94:	10800003 	ldbu	r2,0(r2)
   1aa98:	10803fcc 	andi	r2,r2,255
   1aa9c:	10001126 	beq	r2,zero,1aae4 <get_home_directory_cluster_for_file+0x260>
                        {
                            bool match = match_file_record_to_name_ext(file_record, name, extension);
   1aaa0:	e0fff904 	addi	r3,fp,-28
   1aaa4:	e0bffb04 	addi	r2,fp,-20
   1aaa8:	e13fff17 	ldw	r4,-4(fp)
   1aaac:	180b883a 	mov	r5,r3
   1aab0:	100d883a 	mov	r6,r2
   1aab4:	001a5e80 	call	1a5e8 <match_file_record_to_name_ext>
   1aab8:	e0bff815 	stw	r2,-32(fp)
                            if (match)
   1aabc:	e0bff817 	ldw	r2,-32(fp)
   1aac0:	10000826 	beq	r2,zero,1aae4 <get_home_directory_cluster_for_file+0x260>
                            {
                                new_cluster = file_record->start_cluster_index;
   1aac4:	e0bfff17 	ldw	r2,-4(fp)
   1aac8:	1080058b 	ldhu	r2,22(r2)
   1aacc:	10bfffcc 	andi	r2,r2,65535
   1aad0:	e0bfef15 	stw	r2,-68(fp)
                                file_record->file_record_cluster = 1; // Home directory is a subdirectory in the root directory.
   1aad4:	e0bfff17 	ldw	r2,-4(fp)
   1aad8:	00c00044 	movi	r3,1
   1aadc:	10c00a15 	stw	r3,40(r2)
                                break;
   1aae0:	00000606 	br	1aafc <get_home_directory_cluster_for_file+0x278>
            {
                if (Read_Sector_Data(sector_index+boot_sector_data.root_directory_sector_offset, fat_partition_offset_in_512_byte_sectors))
                {
                    int file_counter;
                    
                    for (file_counter = 0; file_counter < 16; file_counter++)
   1aae4:	e0bff117 	ldw	r2,-60(fp)
   1aae8:	10800044 	addi	r2,r2,1
   1aaec:	e0bff115 	stw	r2,-60(fp)
   1aaf0:	e0bff117 	ldw	r2,-60(fp)
   1aaf4:	10800410 	cmplti	r2,r2,16
   1aaf8:	103fd81e 	bne	r2,zero,1aa5c <__alt_mem_Flash_flash_data+0xf401aa5c>
                }
                else
                {
                    break;
                }
                if (new_cluster != home_dir_cluster)
   1aafc:	e0ffef17 	ldw	r3,-68(fp)
   1ab00:	e0bfea17 	ldw	r2,-88(fp)
   1ab04:	18800326 	beq	r3,r2,1ab14 <get_home_directory_cluster_for_file+0x290>
   1ab08:	00000106 	br	1ab10 <get_home_directory_cluster_for_file+0x28c>
                        }
                    }
                }
                else
                {
                    break;
   1ab0c:	00000706 	br	1ab2c <get_home_directory_cluster_for_file+0x2a8>
                }
                if (new_cluster != home_dir_cluster)
                {
                    break;
   1ab10:	00000606 	br	1ab2c <get_home_directory_cluster_for_file+0x2a8>
        {
            /* We are in the root directory. Scan the directory (of predefined size) and see if you can find the specified file. */
            int max_root_dir_sectors = ((32*boot_sector_data.max_number_of_dir_entires) / boot_sector_data.sector_size_in_bytes);
            int sector_index;
            
            for (sector_index = 0; sector_index < max_root_dir_sectors; sector_index++)
   1ab14:	e0bff017 	ldw	r2,-64(fp)
   1ab18:	10800044 	addi	r2,r2,1
   1ab1c:	e0bff015 	stw	r2,-64(fp)
   1ab20:	e0fff017 	ldw	r3,-64(fp)
   1ab24:	e0bff717 	ldw	r2,-36(fp)
   1ab28:	18bfbf16 	blt	r3,r2,1aa28 <__alt_mem_Flash_flash_data+0xf401aa28>
                if (new_cluster != home_dir_cluster)
                {
                    break;
                }
            }
            if (new_cluster != home_dir_cluster)
   1ab2c:	e0ffef17 	ldw	r3,-68(fp)
   1ab30:	e0bfea17 	ldw	r2,-88(fp)
   1ab34:	18800826 	beq	r3,r2,1ab58 <get_home_directory_cluster_for_file+0x2d4>
            {
                // A valid directory is found, so go to it.
                home_dir_cluster = new_cluster;
   1ab38:	e0bfef17 	ldw	r2,-68(fp)
   1ab3c:	e0bfea15 	stw	r2,-88(fp)
                start_location = start_location+location+1;
   1ab40:	e0ffed17 	ldw	r3,-76(fp)
   1ab44:	e0bfeb17 	ldw	r2,-84(fp)
   1ab48:	1885883a 	add	r2,r3,r2
   1ab4c:	10800044 	addi	r2,r2,1
   1ab50:	e0bfed15 	stw	r2,-76(fp)
   1ab54:	00007b06 	br	1ad44 <get_home_directory_cluster_for_file+0x4c0>
            }
            else
            {
                // Directory path is invalid. 
                return false;
   1ab58:	0005883a 	mov	r2,zero
   1ab5c:	00008f06 	br	1ad9c <get_home_directory_cluster_for_file+0x518>
            }
        } else {
            // This is a subdirectory that can have any number of elements. So scan through it as though it was a file
            // and see if you can find the directory of interest.
            int cluster = home_dir_cluster;
   1ab60:	e0bfea17 	ldw	r2,-88(fp)
   1ab64:	e0bff415 	stw	r2,-48(fp)
            
            do {
                int start_sector = ( cluster - 2 ) * ( boot_sector_data.sectors_per_cluster ) + boot_sector_data.data_sector_offset;
   1ab68:	e0bff417 	ldw	r2,-48(fp)
   1ab6c:	10ffff84 	addi	r3,r2,-2
   1ab70:	008000f4 	movhi	r2,3
   1ab74:	10a15704 	addi	r2,r2,-31396
   1ab78:	10800383 	ldbu	r2,14(r2)
   1ab7c:	10803fcc 	andi	r2,r2,255
   1ab80:	1885383a 	mul	r2,r3,r2
   1ab84:	1007883a 	mov	r3,r2
   1ab88:	008000f4 	movhi	r2,3
   1ab8c:	10a15704 	addi	r2,r2,-31396
   1ab90:	10801417 	ldw	r2,80(r2)
   1ab94:	1885883a 	add	r2,r3,r2
   1ab98:	e0bff515 	stw	r2,-44(fp)
                int sector_index;
                
                for (sector_index = 0; sector_index < boot_sector_data.sectors_per_cluster; sector_index++)
   1ab9c:	e03ff215 	stw	zero,-56(fp)
   1aba0:	00003806 	br	1ac84 <get_home_directory_cluster_for_file+0x400>
                {
                    if (Read_Sector_Data(sector_index + start_sector, fat_partition_offset_in_512_byte_sectors))
   1aba4:	e0fff217 	ldw	r3,-56(fp)
   1aba8:	e0bff517 	ldw	r2,-44(fp)
   1abac:	1887883a 	add	r3,r3,r2
   1abb0:	d0a81817 	ldw	r2,-24480(gp)
   1abb4:	1809883a 	mov	r4,r3
   1abb8:	100b883a 	mov	r5,r2
   1abbc:	00191700 	call	19170 <Read_Sector_Data>
   1abc0:	10002b26 	beq	r2,zero,1ac70 <get_home_directory_cluster_for_file+0x3ec>
                    {
                        int file_counter;
                        
                        for (file_counter = 0; file_counter < 16; file_counter++)
   1abc4:	e03ff315 	stw	zero,-52(fp)
   1abc8:	00002206 	br	1ac54 <get_home_directory_cluster_for_file+0x3d0>
                        {                         
                            // Read file record.
                            Read_File_Record_At_Offset(file_counter*32, file_record, cluster, sector_index);
   1abcc:	e0bff317 	ldw	r2,-52(fp)
   1abd0:	1008917a 	slli	r4,r2,5
   1abd4:	e0fff417 	ldw	r3,-48(fp)
   1abd8:	e0bff217 	ldw	r2,-56(fp)
   1abdc:	e17fff17 	ldw	r5,-4(fp)
   1abe0:	180d883a 	mov	r6,r3
   1abe4:	100f883a 	mov	r7,r2
   1abe8:	00195880 	call	19588 <Read_File_Record_At_Offset>
                            if ((file_record->name[0] != 0xe5) && (file_record->name[0] != 0x00))
   1abec:	e0bfff17 	ldw	r2,-4(fp)
   1abf0:	10800003 	ldbu	r2,0(r2)
   1abf4:	10803fcc 	andi	r2,r2,255
   1abf8:	10803960 	cmpeqi	r2,r2,229
   1abfc:	1000121e 	bne	r2,zero,1ac48 <get_home_directory_cluster_for_file+0x3c4>
   1ac00:	e0bfff17 	ldw	r2,-4(fp)
   1ac04:	10800003 	ldbu	r2,0(r2)
   1ac08:	10803fcc 	andi	r2,r2,255
   1ac0c:	10000e26 	beq	r2,zero,1ac48 <get_home_directory_cluster_for_file+0x3c4>
                            {
								bool match = match_file_record_to_name_ext(file_record, name, extension);
   1ac10:	e0fff904 	addi	r3,fp,-28
   1ac14:	e0bffb04 	addi	r2,fp,-20
   1ac18:	e13fff17 	ldw	r4,-4(fp)
   1ac1c:	180b883a 	mov	r5,r3
   1ac20:	100d883a 	mov	r6,r2
   1ac24:	001a5e80 	call	1a5e8 <match_file_record_to_name_ext>
   1ac28:	e0bff615 	stw	r2,-40(fp)
                                if (match)
   1ac2c:	e0bff617 	ldw	r2,-40(fp)
   1ac30:	10000526 	beq	r2,zero,1ac48 <get_home_directory_cluster_for_file+0x3c4>
                                {
                                    new_cluster = file_record->start_cluster_index;                                   
   1ac34:	e0bfff17 	ldw	r2,-4(fp)
   1ac38:	1080058b 	ldhu	r2,22(r2)
   1ac3c:	10bfffcc 	andi	r2,r2,65535
   1ac40:	e0bfef15 	stw	r2,-68(fp)
                                    break;
   1ac44:	00000606 	br	1ac60 <get_home_directory_cluster_for_file+0x3dc>
                {
                    if (Read_Sector_Data(sector_index + start_sector, fat_partition_offset_in_512_byte_sectors))
                    {
                        int file_counter;
                        
                        for (file_counter = 0; file_counter < 16; file_counter++)
   1ac48:	e0bff317 	ldw	r2,-52(fp)
   1ac4c:	10800044 	addi	r2,r2,1
   1ac50:	e0bff315 	stw	r2,-52(fp)
   1ac54:	e0bff317 	ldw	r2,-52(fp)
   1ac58:	10800410 	cmplti	r2,r2,16
   1ac5c:	103fdb1e 	bne	r2,zero,1abcc <__alt_mem_Flash_flash_data+0xf401abcc>
                    }
                    else
                    {
                        break;
                    }
                    if (new_cluster != home_dir_cluster)
   1ac60:	e0ffef17 	ldw	r3,-68(fp)
   1ac64:	e0bfea17 	ldw	r2,-88(fp)
   1ac68:	18800326 	beq	r3,r2,1ac78 <get_home_directory_cluster_for_file+0x3f4>
   1ac6c:	00000106 	br	1ac74 <get_home_directory_cluster_for_file+0x3f0>
                            }
                        }
                    }
                    else
                    {
                        break;
   1ac70:	00000a06 	br	1ac9c <get_home_directory_cluster_for_file+0x418>
                    }
                    if (new_cluster != home_dir_cluster)
                    {
                        break;
   1ac74:	00000906 	br	1ac9c <get_home_directory_cluster_for_file+0x418>
            
            do {
                int start_sector = ( cluster - 2 ) * ( boot_sector_data.sectors_per_cluster ) + boot_sector_data.data_sector_offset;
                int sector_index;
                
                for (sector_index = 0; sector_index < boot_sector_data.sectors_per_cluster; sector_index++)
   1ac78:	e0bff217 	ldw	r2,-56(fp)
   1ac7c:	10800044 	addi	r2,r2,1
   1ac80:	e0bff215 	stw	r2,-56(fp)
   1ac84:	008000f4 	movhi	r2,3
   1ac88:	10a15704 	addi	r2,r2,-31396
   1ac8c:	10800383 	ldbu	r2,14(r2)
   1ac90:	10803fcc 	andi	r2,r2,255
   1ac94:	e0fff217 	ldw	r3,-56(fp)
   1ac98:	18bfc216 	blt	r3,r2,1aba4 <__alt_mem_Flash_flash_data+0xf401aba4>
                        break;
                    }
                }
                // If this is the end of the cluster and the directory has not been found, then see if there is another cluster
                // that holds data for the current directory.
                if (new_cluster == home_dir_cluster)
   1ac9c:	e0ffef17 	ldw	r3,-68(fp)
   1aca0:	e0bfea17 	ldw	r2,-88(fp)
   1aca4:	1880141e 	bne	r3,r2,1acf8 <get_home_directory_cluster_for_file+0x474>
                {
					unsigned short int next_cluster;

					if (get_cluster_flag(new_cluster, &next_cluster))
   1aca8:	e0ffef17 	ldw	r3,-68(fp)
   1acac:	e0bffc04 	addi	r2,fp,-16
   1acb0:	1809883a 	mov	r4,r3
   1acb4:	100b883a 	mov	r5,r2
   1acb8:	00192480 	call	19248 <get_cluster_flag>
   1acbc:	10000c26 	beq	r2,zero,1acf0 <get_home_directory_cluster_for_file+0x46c>
					{
						// The directory needs to be expanded to store more files.
						if ((next_cluster & 0x0000fff8) == 0x0000fff8)
   1acc0:	e0bffc0b 	ldhu	r2,-16(fp)
   1acc4:	10bfffcc 	andi	r2,r2,65535
   1acc8:	10fffe0c 	andi	r3,r2,65528
   1accc:	00bffe14 	movui	r2,65528
   1acd0:	1880021e 	bne	r3,r2,1acdc <get_home_directory_cluster_for_file+0x458>
						{
							return false;
   1acd4:	0005883a 	mov	r2,zero
   1acd8:	00003006 	br	1ad9c <get_home_directory_cluster_for_file+0x518>
						}
						new_cluster = (next_cluster & 0x0000fff8);
   1acdc:	e0bffc0b 	ldhu	r2,-16(fp)
   1ace0:	10bfffcc 	andi	r2,r2,65535
   1ace4:	10bffe0c 	andi	r2,r2,65528
   1ace8:	e0bfef15 	stw	r2,-68(fp)
   1acec:	00000206 	br	1acf8 <get_home_directory_cluster_for_file+0x474>
					}
					else
					{
						// Directory path is invalid.                 
						return false;
   1acf0:	0005883a 	mov	r2,zero
   1acf4:	00002906 	br	1ad9c <get_home_directory_cluster_for_file+0x518>
					}
                }              
            } while ((cluster < 0x0000fff8) && (new_cluster == home_dir_cluster));
   1acf8:	e0bff417 	ldw	r2,-48(fp)
   1acfc:	00fffdd4 	movui	r3,65527
   1ad00:	18800316 	blt	r3,r2,1ad10 <get_home_directory_cluster_for_file+0x48c>
   1ad04:	e0ffef17 	ldw	r3,-68(fp)
   1ad08:	e0bfea17 	ldw	r2,-88(fp)
   1ad0c:	18bf9626 	beq	r3,r2,1ab68 <__alt_mem_Flash_flash_data+0xf401ab68>
            if (new_cluster != home_dir_cluster)
   1ad10:	e0ffef17 	ldw	r3,-68(fp)
   1ad14:	e0bfea17 	ldw	r2,-88(fp)
   1ad18:	18800826 	beq	r3,r2,1ad3c <get_home_directory_cluster_for_file+0x4b8>
            {
                // A valid directory is found, so go to it.
                home_dir_cluster = new_cluster;
   1ad1c:	e0bfef17 	ldw	r2,-68(fp)
   1ad20:	e0bfea15 	stw	r2,-88(fp)
                start_location = start_location+location+1;
   1ad24:	e0ffed17 	ldw	r3,-76(fp)
   1ad28:	e0bfeb17 	ldw	r2,-84(fp)
   1ad2c:	1885883a 	add	r2,r3,r2
   1ad30:	10800044 	addi	r2,r2,1
   1ad34:	e0bfed15 	stw	r2,-76(fp)
   1ad38:	00000206 	br	1ad44 <get_home_directory_cluster_for_file+0x4c0>
            }
            else
            {
                // Directory path is invalid. 
                return false;
   1ad3c:	0005883a 	mov	r2,zero
   1ad40:	00001606 	br	1ad9c <get_home_directory_cluster_for_file+0x518>
            }            
        }
        location = get_dir_divider_location(&(file_name[start_location]));
   1ad44:	e0bfed17 	ldw	r2,-76(fp)
   1ad48:	e0fffd17 	ldw	r3,-12(fp)
   1ad4c:	1885883a 	add	r2,r3,r2
   1ad50:	1009883a 	mov	r4,r2
   1ad54:	001a5300 	call	1a530 <get_dir_divider_location>
   1ad58:	e0bfeb15 	stw	r2,-84(fp)
        if (location < 0)
   1ad5c:	e0bfeb17 	ldw	r2,-84(fp)
   1ad60:	1000020e 	bge	r2,zero,1ad6c <get_home_directory_cluster_for_file+0x4e8>
        {
            // Directory has been located.
            result = true;
   1ad64:	00800044 	movi	r2,1
   1ad68:	e0bfe915 	stw	r2,-92(fp)
    int location, index;
    int start_location = 0;
    
    /* Get Next Directory. */
    location = get_dir_divider_location( file_name );
    while (location > 0)
   1ad6c:	e0bfeb17 	ldw	r2,-84(fp)
   1ad70:	00bed216 	blt	zero,r2,1a8bc <__alt_mem_Flash_flash_data+0xf401a8bc>
            // Directory has been located.
            result = true;
        }
    }
    
    *home_directory_cluster = home_dir_cluster;
   1ad74:	e0bffe17 	ldw	r2,-8(fp)
   1ad78:	e0ffea17 	ldw	r3,-88(fp)
   1ad7c:	10c00015 	stw	r3,0(r2)
    if (home_dir_cluster == 0)
   1ad80:	e0bfea17 	ldw	r2,-88(fp)
   1ad84:	1000041e 	bne	r2,zero,1ad98 <get_home_directory_cluster_for_file+0x514>
    {
        file_record->file_record_cluster = 0; // Home directory is the root directory.
   1ad88:	e0bfff17 	ldw	r2,-4(fp)
   1ad8c:	10000a15 	stw	zero,40(r2)
		result = true;
   1ad90:	00800044 	movi	r2,1
   1ad94:	e0bfe915 	stw	r2,-92(fp)
    }
    return result;
   1ad98:	e0bfe917 	ldw	r2,-92(fp)
}
   1ad9c:	e037883a 	mov	sp,fp
   1ada0:	dfc00117 	ldw	ra,4(sp)
   1ada4:	df000017 	ldw	fp,0(sp)
   1ada8:	dec00204 	addi	sp,sp,8
   1adac:	f800283a 	ret

0001adb0 <find_file_in_directory>:


bool find_file_in_directory(int directory_start_cluster, char *file_name, t_file_record *file_record)
// Given a cluster and a file name, check if the file already exists. Return the file record if the file is found.
{
   1adb0:	deffe804 	addi	sp,sp,-96
   1adb4:	dfc01715 	stw	ra,92(sp)
   1adb8:	df001615 	stw	fp,88(sp)
   1adbc:	df001604 	addi	fp,sp,88
   1adc0:	e13ffd15 	stw	r4,-12(fp)
   1adc4:	e17ffe15 	stw	r5,-8(fp)
   1adc8:	e1bfff15 	stw	r6,-4(fp)
    int location = get_dir_divider_location( file_name );
   1adcc:	e13ffe17 	ldw	r4,-8(fp)
   1add0:	001a5300 	call	1a530 <get_dir_divider_location>
   1add4:	e0bfea15 	stw	r2,-88(fp)
    int last_dir_separator = 0;
   1add8:	e03feb15 	stw	zero,-84(fp)
    char name[8] = { ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ' };
   1addc:	00800804 	movi	r2,32
   1ade0:	e0bff905 	stb	r2,-28(fp)
   1ade4:	00800804 	movi	r2,32
   1ade8:	e0bff945 	stb	r2,-27(fp)
   1adec:	00800804 	movi	r2,32
   1adf0:	e0bff985 	stb	r2,-26(fp)
   1adf4:	00800804 	movi	r2,32
   1adf8:	e0bff9c5 	stb	r2,-25(fp)
   1adfc:	00800804 	movi	r2,32
   1ae00:	e0bffa05 	stb	r2,-24(fp)
   1ae04:	00800804 	movi	r2,32
   1ae08:	e0bffa45 	stb	r2,-23(fp)
   1ae0c:	00800804 	movi	r2,32
   1ae10:	e0bffa85 	stb	r2,-22(fp)
   1ae14:	00800804 	movi	r2,32
   1ae18:	e0bffac5 	stb	r2,-21(fp)
    char extension[3] = { ' ', ' ', ' ' };
   1ae1c:	00800804 	movi	r2,32
   1ae20:	e0bffb05 	stb	r2,-20(fp)
   1ae24:	00800804 	movi	r2,32
   1ae28:	e0bffb45 	stb	r2,-19(fp)
   1ae2c:	00800804 	movi	r2,32
   1ae30:	e0bffb85 	stb	r2,-18(fp)
    int ext_index = -1;
   1ae34:	00bfffc4 	movi	r2,-1
   1ae38:	e0bfec15 	stw	r2,-80(fp)
    int cluster = directory_start_cluster;
   1ae3c:	e0bffd17 	ldw	r2,-12(fp)
   1ae40:	e0bfed15 	stw	r2,-76(fp)
    int index;
	int length = strlen(file_name);
   1ae44:	e13ffe17 	ldw	r4,-8(fp)
   1ae48:	0000e580 	call	e58 <strlen>
   1ae4c:	e0bff415 	stw	r2,-48(fp)
    bool result = false;
   1ae50:	e03fef15 	stw	zero,-68(fp)
    
    // Skip through all directory separators.
    while (location > 0)
   1ae54:	00000b06 	br	1ae84 <find_file_in_directory+0xd4>
    {
        last_dir_separator = last_dir_separator+location+1;
   1ae58:	e0ffeb17 	ldw	r3,-84(fp)
   1ae5c:	e0bfea17 	ldw	r2,-88(fp)
   1ae60:	1885883a 	add	r2,r3,r2
   1ae64:	10800044 	addi	r2,r2,1
   1ae68:	e0bfeb15 	stw	r2,-84(fp)
        location = get_dir_divider_location( &(file_name[last_dir_separator]) );
   1ae6c:	e0bfeb17 	ldw	r2,-84(fp)
   1ae70:	e0fffe17 	ldw	r3,-8(fp)
   1ae74:	1885883a 	add	r2,r3,r2
   1ae78:	1009883a 	mov	r4,r2
   1ae7c:	001a5300 	call	1a530 <get_dir_divider_location>
   1ae80:	e0bfea15 	stw	r2,-88(fp)
    int index;
	int length = strlen(file_name);
    bool result = false;
    
    // Skip through all directory separators.
    while (location > 0)
   1ae84:	e0bfea17 	ldw	r2,-88(fp)
   1ae88:	00bff316 	blt	zero,r2,1ae58 <__alt_mem_Flash_flash_data+0xf401ae58>
        last_dir_separator = last_dir_separator+location+1;
        location = get_dir_divider_location( &(file_name[last_dir_separator]) );
    }
        
    // Get the name of the file in name/extension format.
    for (index = last_dir_separator; index < length; index++)
   1ae8c:	e0bfeb17 	ldw	r2,-84(fp)
   1ae90:	e0bfee15 	stw	r2,-72(fp)
   1ae94:	00002706 	br	1af34 <find_file_in_directory+0x184>
    {
        if (file_name[index] == '.')
   1ae98:	e0bfee17 	ldw	r2,-72(fp)
   1ae9c:	e0fffe17 	ldw	r3,-8(fp)
   1aea0:	1885883a 	add	r2,r3,r2
   1aea4:	10800003 	ldbu	r2,0(r2)
   1aea8:	10803fcc 	andi	r2,r2,255
   1aeac:	1080201c 	xori	r2,r2,128
   1aeb0:	10bfe004 	addi	r2,r2,-128
   1aeb4:	10800b98 	cmpnei	r2,r2,46
   1aeb8:	1000031e 	bne	r2,zero,1aec8 <find_file_in_directory+0x118>
        {
            ext_index = index;
   1aebc:	e0bfee17 	ldw	r2,-72(fp)
   1aec0:	e0bfec15 	stw	r2,-80(fp)
   1aec4:	00001806 	br	1af28 <find_file_in_directory+0x178>
        }
        else if (ext_index < 0)
   1aec8:	e0bfec17 	ldw	r2,-80(fp)
   1aecc:	10000b0e 	bge	r2,zero,1aefc <find_file_in_directory+0x14c>
        {
            name[index-last_dir_separator] = file_name[index];
   1aed0:	e0ffee17 	ldw	r3,-72(fp)
   1aed4:	e0bfeb17 	ldw	r2,-84(fp)
   1aed8:	1885c83a 	sub	r2,r3,r2
   1aedc:	e0ffee17 	ldw	r3,-72(fp)
   1aee0:	e13ffe17 	ldw	r4,-8(fp)
   1aee4:	20c7883a 	add	r3,r4,r3
   1aee8:	18c00003 	ldbu	r3,0(r3)
   1aeec:	e13ff904 	addi	r4,fp,-28
   1aef0:	2085883a 	add	r2,r4,r2
   1aef4:	10c00005 	stb	r3,0(r2)
   1aef8:	00000b06 	br	1af28 <find_file_in_directory+0x178>
        }
        else
        {
            extension[index-ext_index-1] = file_name[index];
   1aefc:	e0ffee17 	ldw	r3,-72(fp)
   1af00:	e0bfec17 	ldw	r2,-80(fp)
   1af04:	1885c83a 	sub	r2,r3,r2
   1af08:	10bfffc4 	addi	r2,r2,-1
   1af0c:	e0ffee17 	ldw	r3,-72(fp)
   1af10:	e13ffe17 	ldw	r4,-8(fp)
   1af14:	20c7883a 	add	r3,r4,r3
   1af18:	18c00003 	ldbu	r3,0(r3)
   1af1c:	e13ffb04 	addi	r4,fp,-20
   1af20:	2085883a 	add	r2,r4,r2
   1af24:	10c00005 	stb	r3,0(r2)
        last_dir_separator = last_dir_separator+location+1;
        location = get_dir_divider_location( &(file_name[last_dir_separator]) );
    }
        
    // Get the name of the file in name/extension format.
    for (index = last_dir_separator; index < length; index++)
   1af28:	e0bfee17 	ldw	r2,-72(fp)
   1af2c:	10800044 	addi	r2,r2,1
   1af30:	e0bfee15 	stw	r2,-72(fp)
   1af34:	e0ffee17 	ldw	r3,-72(fp)
   1af38:	e0bff417 	ldw	r2,-48(fp)
   1af3c:	18bfd616 	blt	r3,r2,1ae98 <__alt_mem_Flash_flash_data+0xf401ae98>
            extension[index-ext_index-1] = file_name[index];
        }
    }

    // Look for the file.
    if (directory_start_cluster == 0)
   1af40:	e0bffd17 	ldw	r2,-12(fp)
   1af44:	1000491e 	bne	r2,zero,1b06c <find_file_in_directory+0x2bc>
    {
        /* We are in the root directory. Scan the directory (of predefined size) and see if you can find the specified file. */
        int max_root_dir_sectors = ((32*boot_sector_data.max_number_of_dir_entires) / boot_sector_data.sector_size_in_bytes);
   1af48:	008000f4 	movhi	r2,3
   1af4c:	10a15704 	addi	r2,r2,-31396
   1af50:	1080050b 	ldhu	r2,20(r2)
   1af54:	10bfffcc 	andi	r2,r2,65535
   1af58:	1006917a 	slli	r3,r2,5
   1af5c:	008000f4 	movhi	r2,3
   1af60:	10a15704 	addi	r2,r2,-31396
   1af64:	1080030b 	ldhu	r2,12(r2)
   1af68:	10bfffcc 	andi	r2,r2,65535
   1af6c:	1885283a 	div	r2,r3,r2
   1af70:	e0bff715 	stw	r2,-36(fp)
        int sector_index;
        
        for (sector_index = 0; sector_index < max_root_dir_sectors; sector_index++)
   1af74:	e03ff015 	stw	zero,-64(fp)
   1af78:	00003806 	br	1b05c <find_file_in_directory+0x2ac>
        {
            if (Read_Sector_Data(   sector_index + boot_sector_data.root_directory_sector_offset,
   1af7c:	008000f4 	movhi	r2,3
   1af80:	10a15704 	addi	r2,r2,-31396
   1af84:	10c01317 	ldw	r3,76(r2)
   1af88:	e0bff017 	ldw	r2,-64(fp)
   1af8c:	1885883a 	add	r2,r3,r2
   1af90:	1007883a 	mov	r3,r2
   1af94:	d0a81817 	ldw	r2,-24480(gp)
   1af98:	1809883a 	mov	r4,r3
   1af9c:	100b883a 	mov	r5,r2
   1afa0:	00191700 	call	19170 <Read_Sector_Data>
   1afa4:	10002826 	beq	r2,zero,1b048 <find_file_in_directory+0x298>
                                    fat_partition_offset_in_512_byte_sectors))
            {
                int file_counter;
                
                for (file_counter = 0; file_counter < 16; file_counter++)
   1afa8:	e03ff115 	stw	zero,-60(fp)
   1afac:	00002006 	br	1b030 <find_file_in_directory+0x280>
                {
                    // Read file record.
                    Read_File_Record_At_Offset(file_counter*32, file_record, 0, sector_index);
   1afb0:	e0bff117 	ldw	r2,-60(fp)
   1afb4:	1006917a 	slli	r3,r2,5
   1afb8:	e0bff017 	ldw	r2,-64(fp)
   1afbc:	1809883a 	mov	r4,r3
   1afc0:	e17fff17 	ldw	r5,-4(fp)
   1afc4:	000d883a 	mov	r6,zero
   1afc8:	100f883a 	mov	r7,r2
   1afcc:	00195880 	call	19588 <Read_File_Record_At_Offset>
                    if ((file_record->name[0] != 0xe5) && (file_record->name[0] != 0x00))
   1afd0:	e0bfff17 	ldw	r2,-4(fp)
   1afd4:	10800003 	ldbu	r2,0(r2)
   1afd8:	10803fcc 	andi	r2,r2,255
   1afdc:	10803960 	cmpeqi	r2,r2,229
   1afe0:	1000101e 	bne	r2,zero,1b024 <find_file_in_directory+0x274>
   1afe4:	e0bfff17 	ldw	r2,-4(fp)
   1afe8:	10800003 	ldbu	r2,0(r2)
   1afec:	10803fcc 	andi	r2,r2,255
   1aff0:	10000c26 	beq	r2,zero,1b024 <find_file_in_directory+0x274>
                    {
                        bool match = match_file_record_to_name_ext(file_record, name, extension);
   1aff4:	e0fff904 	addi	r3,fp,-28
   1aff8:	e0bffb04 	addi	r2,fp,-20
   1affc:	e13fff17 	ldw	r4,-4(fp)
   1b000:	180b883a 	mov	r5,r3
   1b004:	100d883a 	mov	r6,r2
   1b008:	001a5e80 	call	1a5e8 <match_file_record_to_name_ext>
   1b00c:	e0bff815 	stw	r2,-32(fp)

                        if (match)
   1b010:	e0bff817 	ldw	r2,-32(fp)
   1b014:	10000326 	beq	r2,zero,1b024 <find_file_in_directory+0x274>
                        {
                            result = true;
   1b018:	00800044 	movi	r2,1
   1b01c:	e0bfef15 	stw	r2,-68(fp)
                            break;
   1b020:	00000606 	br	1b03c <find_file_in_directory+0x28c>
            if (Read_Sector_Data(   sector_index + boot_sector_data.root_directory_sector_offset,
                                    fat_partition_offset_in_512_byte_sectors))
            {
                int file_counter;
                
                for (file_counter = 0; file_counter < 16; file_counter++)
   1b024:	e0bff117 	ldw	r2,-60(fp)
   1b028:	10800044 	addi	r2,r2,1
   1b02c:	e0bff115 	stw	r2,-60(fp)
   1b030:	e0bff117 	ldw	r2,-60(fp)
   1b034:	10800410 	cmplti	r2,r2,16
   1b038:	103fdd1e 	bne	r2,zero,1afb0 <__alt_mem_Flash_flash_data+0xf401afb0>
            }
            else
            {
                break;
            }
            if (result)
   1b03c:	e0bfef17 	ldw	r2,-68(fp)
   1b040:	10000326 	beq	r2,zero,1b050 <find_file_in_directory+0x2a0>
   1b044:	00000106 	br	1b04c <find_file_in_directory+0x29c>
                    }
                }
            }
            else
            {
                break;
   1b048:	00000706 	br	1b068 <find_file_in_directory+0x2b8>
            }
            if (result)
            {
                break;
   1b04c:	00000606 	br	1b068 <find_file_in_directory+0x2b8>
    {
        /* We are in the root directory. Scan the directory (of predefined size) and see if you can find the specified file. */
        int max_root_dir_sectors = ((32*boot_sector_data.max_number_of_dir_entires) / boot_sector_data.sector_size_in_bytes);
        int sector_index;
        
        for (sector_index = 0; sector_index < max_root_dir_sectors; sector_index++)
   1b050:	e0bff017 	ldw	r2,-64(fp)
   1b054:	10800044 	addi	r2,r2,1
   1b058:	e0bff015 	stw	r2,-64(fp)
   1b05c:	e0fff017 	ldw	r3,-64(fp)
   1b060:	e0bff717 	ldw	r2,-36(fp)
   1b064:	18bfc516 	blt	r3,r2,1af7c <__alt_mem_Flash_flash_data+0xf401af7c>
   1b068:	00006506 	br	1b200 <find_file_in_directory+0x450>
        }
    }
    else
    {          
        do {
            int start_sector = ( cluster - 2 ) * ( boot_sector_data.sectors_per_cluster ) + boot_sector_data.data_sector_offset;
   1b06c:	e0bfed17 	ldw	r2,-76(fp)
   1b070:	10ffff84 	addi	r3,r2,-2
   1b074:	008000f4 	movhi	r2,3
   1b078:	10a15704 	addi	r2,r2,-31396
   1b07c:	10800383 	ldbu	r2,14(r2)
   1b080:	10803fcc 	andi	r2,r2,255
   1b084:	1885383a 	mul	r2,r3,r2
   1b088:	1007883a 	mov	r3,r2
   1b08c:	008000f4 	movhi	r2,3
   1b090:	10a15704 	addi	r2,r2,-31396
   1b094:	10801417 	ldw	r2,80(r2)
   1b098:	1885883a 	add	r2,r3,r2
   1b09c:	e0bff515 	stw	r2,-44(fp)
            int sector_index;
            
            for (sector_index = 0; sector_index < boot_sector_data.sectors_per_cluster; sector_index++)
   1b0a0:	e03ff215 	stw	zero,-56(fp)
   1b0a4:	00003506 	br	1b17c <find_file_in_directory+0x3cc>
            {
                if (Read_Sector_Data(sector_index + start_sector, fat_partition_offset_in_512_byte_sectors))
   1b0a8:	e0fff217 	ldw	r3,-56(fp)
   1b0ac:	e0bff517 	ldw	r2,-44(fp)
   1b0b0:	1887883a 	add	r3,r3,r2
   1b0b4:	d0a81817 	ldw	r2,-24480(gp)
   1b0b8:	1809883a 	mov	r4,r3
   1b0bc:	100b883a 	mov	r5,r2
   1b0c0:	00191700 	call	19170 <Read_Sector_Data>
   1b0c4:	10002826 	beq	r2,zero,1b168 <find_file_in_directory+0x3b8>
                {
                    int file_counter;
                    
                    for (file_counter = 0; file_counter < 16; file_counter++)
   1b0c8:	e03ff315 	stw	zero,-52(fp)
   1b0cc:	00002006 	br	1b150 <find_file_in_directory+0x3a0>
                    {
                        // Read file record.
                        Read_File_Record_At_Offset(file_counter*32, file_record, cluster, sector_index);
   1b0d0:	e0bff317 	ldw	r2,-52(fp)
   1b0d4:	1008917a 	slli	r4,r2,5
   1b0d8:	e0ffed17 	ldw	r3,-76(fp)
   1b0dc:	e0bff217 	ldw	r2,-56(fp)
   1b0e0:	e17fff17 	ldw	r5,-4(fp)
   1b0e4:	180d883a 	mov	r6,r3
   1b0e8:	100f883a 	mov	r7,r2
   1b0ec:	00195880 	call	19588 <Read_File_Record_At_Offset>
                        if ((file_record->name[0] != 0xe5) && (file_record->name[0] != 0x00))
   1b0f0:	e0bfff17 	ldw	r2,-4(fp)
   1b0f4:	10800003 	ldbu	r2,0(r2)
   1b0f8:	10803fcc 	andi	r2,r2,255
   1b0fc:	10803960 	cmpeqi	r2,r2,229
   1b100:	1000101e 	bne	r2,zero,1b144 <find_file_in_directory+0x394>
   1b104:	e0bfff17 	ldw	r2,-4(fp)
   1b108:	10800003 	ldbu	r2,0(r2)
   1b10c:	10803fcc 	andi	r2,r2,255
   1b110:	10000c26 	beq	r2,zero,1b144 <find_file_in_directory+0x394>
                        {
                            bool match = match_file_record_to_name_ext(file_record, name, extension);
   1b114:	e0fff904 	addi	r3,fp,-28
   1b118:	e0bffb04 	addi	r2,fp,-20
   1b11c:	e13fff17 	ldw	r4,-4(fp)
   1b120:	180b883a 	mov	r5,r3
   1b124:	100d883a 	mov	r6,r2
   1b128:	001a5e80 	call	1a5e8 <match_file_record_to_name_ext>
   1b12c:	e0bff615 	stw	r2,-40(fp)

                            if (match)
   1b130:	e0bff617 	ldw	r2,-40(fp)
   1b134:	10000326 	beq	r2,zero,1b144 <find_file_in_directory+0x394>
                            {                               
                                result = true;
   1b138:	00800044 	movi	r2,1
   1b13c:	e0bfef15 	stw	r2,-68(fp)
                                break;
   1b140:	00000606 	br	1b15c <find_file_in_directory+0x3ac>
            {
                if (Read_Sector_Data(sector_index + start_sector, fat_partition_offset_in_512_byte_sectors))
                {
                    int file_counter;
                    
                    for (file_counter = 0; file_counter < 16; file_counter++)
   1b144:	e0bff317 	ldw	r2,-52(fp)
   1b148:	10800044 	addi	r2,r2,1
   1b14c:	e0bff315 	stw	r2,-52(fp)
   1b150:	e0bff317 	ldw	r2,-52(fp)
   1b154:	10800410 	cmplti	r2,r2,16
   1b158:	103fdd1e 	bne	r2,zero,1b0d0 <__alt_mem_Flash_flash_data+0xf401b0d0>
                }
                else
                {
                    break;
                }
                if (result)
   1b15c:	e0bfef17 	ldw	r2,-68(fp)
   1b160:	10000326 	beq	r2,zero,1b170 <find_file_in_directory+0x3c0>
   1b164:	00000106 	br	1b16c <find_file_in_directory+0x3bc>
                        }
                    }
                }
                else
                {
                    break;
   1b168:	00000a06 	br	1b194 <find_file_in_directory+0x3e4>
                }
                if (result)
                {
                    break;
   1b16c:	00000906 	br	1b194 <find_file_in_directory+0x3e4>
    {          
        do {
            int start_sector = ( cluster - 2 ) * ( boot_sector_data.sectors_per_cluster ) + boot_sector_data.data_sector_offset;
            int sector_index;
            
            for (sector_index = 0; sector_index < boot_sector_data.sectors_per_cluster; sector_index++)
   1b170:	e0bff217 	ldw	r2,-56(fp)
   1b174:	10800044 	addi	r2,r2,1
   1b178:	e0bff215 	stw	r2,-56(fp)
   1b17c:	008000f4 	movhi	r2,3
   1b180:	10a15704 	addi	r2,r2,-31396
   1b184:	10800383 	ldbu	r2,14(r2)
   1b188:	10803fcc 	andi	r2,r2,255
   1b18c:	e0fff217 	ldw	r3,-56(fp)
   1b190:	18bfc516 	blt	r3,r2,1b0a8 <__alt_mem_Flash_flash_data+0xf401b0a8>
                    break;
                }
            }
            // If this is the end of the cluster and the file has not been found, then see if there is another cluster
            // that holds data for the current directory.
            if (result == false)
   1b194:	e0bfef17 	ldw	r2,-68(fp)
   1b198:	1000141e 	bne	r2,zero,1b1ec <find_file_in_directory+0x43c>
            {
				unsigned short int new_cluster;

				if (get_cluster_flag(cluster, &new_cluster))
   1b19c:	e0ffed17 	ldw	r3,-76(fp)
   1b1a0:	e0bffc04 	addi	r2,fp,-16
   1b1a4:	1809883a 	mov	r4,r3
   1b1a8:	100b883a 	mov	r5,r2
   1b1ac:	00192480 	call	19248 <get_cluster_flag>
   1b1b0:	10000c26 	beq	r2,zero,1b1e4 <find_file_in_directory+0x434>
				{
					// The directory needs to be expanded to store more files.
					if ((new_cluster & 0x0000fff8) == 0x0000fff8)
   1b1b4:	e0bffc0b 	ldhu	r2,-16(fp)
   1b1b8:	10bfffcc 	andi	r2,r2,65535
   1b1bc:	10fffe0c 	andi	r3,r2,65528
   1b1c0:	00bffe14 	movui	r2,65528
   1b1c4:	1880021e 	bne	r3,r2,1b1d0 <find_file_in_directory+0x420>
					{
						return false;
   1b1c8:	0005883a 	mov	r2,zero
   1b1cc:	00000d06 	br	1b204 <find_file_in_directory+0x454>
					}
					cluster = (new_cluster & 0x0000fff8);
   1b1d0:	e0bffc0b 	ldhu	r2,-16(fp)
   1b1d4:	10bfffcc 	andi	r2,r2,65535
   1b1d8:	10bffe0c 	andi	r2,r2,65528
   1b1dc:	e0bfed15 	stw	r2,-76(fp)
   1b1e0:	00000206 	br	1b1ec <find_file_in_directory+0x43c>
				}
				else
                {
                    // Directory path is invalid.                 
                    return false;
   1b1e4:	0005883a 	mov	r2,zero
   1b1e8:	00000606 	br	1b204 <find_file_in_directory+0x454>
                }
            }              
        } while ((cluster < 0x0000fff8) && (result == false));
   1b1ec:	e0bfed17 	ldw	r2,-76(fp)
   1b1f0:	00fffdd4 	movui	r3,65527
   1b1f4:	18800216 	blt	r3,r2,1b200 <find_file_in_directory+0x450>
   1b1f8:	e0bfef17 	ldw	r2,-68(fp)
   1b1fc:	103f9b26 	beq	r2,zero,1b06c <__alt_mem_Flash_flash_data+0xf401b06c>
    }
    
    return result;   
   1b200:	e0bfef17 	ldw	r2,-68(fp)
}
   1b204:	e037883a 	mov	sp,fp
   1b208:	dfc00117 	ldw	ra,4(sp)
   1b20c:	df000017 	ldw	fp,0(sp)
   1b210:	dec00204 	addi	sp,sp,8
   1b214:	f800283a 	ret

0001b218 <find_first_empty_cluster>:


bool find_first_empty_cluster(unsigned int *cluster_number)
// Find the first empty cluster. It will be marked by a 0 entry in the File Allocation Table.
{
   1b218:	defff504 	addi	sp,sp,-44
   1b21c:	dfc00a15 	stw	ra,40(sp)
   1b220:	df000915 	stw	fp,36(sp)
   1b224:	df000904 	addi	fp,sp,36
   1b228:	e13fff15 	stw	r4,-4(fp)
    unsigned int sector = boot_sector_data.first_fat_sector_offset;
   1b22c:	008000f4 	movhi	r2,3
   1b230:	10a15704 	addi	r2,r2,-31396
   1b234:	10801117 	ldw	r2,68(r2)
   1b238:	e0bff715 	stw	r2,-36(fp)
    unsigned int cluster_index = 2;
   1b23c:	00800084 	movi	r2,2
   1b240:	e0bff815 	stw	r2,-32(fp)
    short int cluster = -1;
   1b244:	00bfffc4 	movi	r2,-1
   1b248:	e0bff90d 	sth	r2,-28(fp)
    bool result = false;
   1b24c:	e03ffa15 	stw	zero,-24(fp)
	unsigned max_cluster_index = 0;
   1b250:	e03ffb15 	stw	zero,-20(fp)
	unsigned int non_data_sectors = boot_sector_data.data_sector_offset;
   1b254:	008000f4 	movhi	r2,3
   1b258:	10a15704 	addi	r2,r2,-31396
   1b25c:	10801417 	ldw	r2,80(r2)
   1b260:	e0bffc15 	stw	r2,-16(fp)
	unsigned int less_than_32 = boot_sector_data.number_of_sectors_in_partition;
   1b264:	008000f4 	movhi	r2,3
   1b268:	10a15704 	addi	r2,r2,-31396
   1b26c:	1080058b 	ldhu	r2,22(r2)
   1b270:	10bfffcc 	andi	r2,r2,65535
   1b274:	e0bffd15 	stw	r2,-12(fp)
	unsigned int greater_than_32 = boot_sector_data.total_sector_count_if_above_32MB;
   1b278:	008000f4 	movhi	r2,3
   1b27c:	10a15704 	addi	r2,r2,-31396
   1b280:	10800917 	ldw	r2,36(r2)
   1b284:	e0bffe15 	stw	r2,-8(fp)

	if (less_than_32 > greater_than_32)
   1b288:	e0bffd17 	ldw	r2,-12(fp)
   1b28c:	e0fffe17 	ldw	r3,-8(fp)
   1b290:	18800b2e 	bgeu	r3,r2,1b2c0 <find_first_empty_cluster+0xa8>
	{
		max_cluster_index = ((less_than_32 - non_data_sectors) / boot_sector_data.sectors_per_cluster) + 1;
   1b294:	e0fffd17 	ldw	r3,-12(fp)
   1b298:	e0bffc17 	ldw	r2,-16(fp)
   1b29c:	1887c83a 	sub	r3,r3,r2
   1b2a0:	008000f4 	movhi	r2,3
   1b2a4:	10a15704 	addi	r2,r2,-31396
   1b2a8:	10800383 	ldbu	r2,14(r2)
   1b2ac:	10803fcc 	andi	r2,r2,255
   1b2b0:	1885203a 	divu	r2,r3,r2
   1b2b4:	10800044 	addi	r2,r2,1
   1b2b8:	e0bffb15 	stw	r2,-20(fp)
   1b2bc:	00000a06 	br	1b2e8 <find_first_empty_cluster+0xd0>
	}
	else
	{
		max_cluster_index = ((greater_than_32 - non_data_sectors) / boot_sector_data.sectors_per_cluster) + 1;
   1b2c0:	e0fffe17 	ldw	r3,-8(fp)
   1b2c4:	e0bffc17 	ldw	r2,-16(fp)
   1b2c8:	1887c83a 	sub	r3,r3,r2
   1b2cc:	008000f4 	movhi	r2,3
   1b2d0:	10a15704 	addi	r2,r2,-31396
   1b2d4:	10800383 	ldbu	r2,14(r2)
   1b2d8:	10803fcc 	andi	r2,r2,255
   1b2dc:	1885203a 	divu	r2,r3,r2
   1b2e0:	10800044 	addi	r2,r2,1
   1b2e4:	e0bffb15 	stw	r2,-20(fp)
	}
    // Find an empty cluster for the file.
    while (sector != boot_sector_data.second_fat_sector_offset)
   1b2e8:	00001f06 	br	1b368 <find_first_empty_cluster+0x150>
    {
        if (Read_Sector_Data( sector, fat_partition_offset_in_512_byte_sectors))
   1b2ec:	e0fff717 	ldw	r3,-36(fp)
   1b2f0:	d0a81817 	ldw	r2,-24480(gp)
   1b2f4:	1809883a 	mov	r4,r3
   1b2f8:	100b883a 	mov	r5,r2
   1b2fc:	00191700 	call	19170 <Read_Sector_Data>
   1b300:	10001326 	beq	r2,zero,1b350 <find_first_empty_cluster+0x138>
        {
            do {
                cluster = ((unsigned short int) IORD_16DIRECT(device_pointer->base, 2*(cluster_index % 256)));
   1b304:	e0bff817 	ldw	r2,-32(fp)
   1b308:	10803fcc 	andi	r2,r2,255
   1b30c:	1085883a 	add	r2,r2,r2
   1b310:	1007883a 	mov	r3,r2
   1b314:	d0a81a17 	ldw	r2,-24472(gp)
   1b318:	10800a17 	ldw	r2,40(r2)
   1b31c:	1885883a 	add	r2,r3,r2
   1b320:	1080002b 	ldhuio	r2,0(r2)
   1b324:	10bfffcc 	andi	r2,r2,65535
   1b328:	e0bff90d 	sth	r2,-28(fp)
                if (cluster == 0)
   1b32c:	e0bff90f 	ldh	r2,-28(fp)
   1b330:	1000011e 	bne	r2,zero,1b338 <find_first_empty_cluster+0x120>
                {
                    // Free cluster found.
                    break;
   1b334:	00000606 	br	1b350 <find_first_empty_cluster+0x138>
                }
                else
                {
                    cluster_index++;
   1b338:	e0bff817 	ldw	r2,-32(fp)
   1b33c:	10800044 	addi	r2,r2,1
   1b340:	e0bff815 	stw	r2,-32(fp)
                } 
            } while ((cluster_index % 256) != 0);
   1b344:	e0bff817 	ldw	r2,-32(fp)
   1b348:	10803fcc 	andi	r2,r2,255
   1b34c:	103fed1e 	bne	r2,zero,1b304 <__alt_mem_Flash_flash_data+0xf401b304>
        }
        if (cluster == 0)
   1b350:	e0bff90f 	ldh	r2,-28(fp)
   1b354:	1000011e 	bne	r2,zero,1b35c <find_first_empty_cluster+0x144>
        {
            break;
   1b358:	00000806 	br	1b37c <find_first_empty_cluster+0x164>
        }
        sector++;
   1b35c:	e0bff717 	ldw	r2,-36(fp)
   1b360:	10800044 	addi	r2,r2,1
   1b364:	e0bff715 	stw	r2,-36(fp)
	else
	{
		max_cluster_index = ((greater_than_32 - non_data_sectors) / boot_sector_data.sectors_per_cluster) + 1;
	}
    // Find an empty cluster for the file.
    while (sector != boot_sector_data.second_fat_sector_offset)
   1b368:	008000f4 	movhi	r2,3
   1b36c:	10a15704 	addi	r2,r2,-31396
   1b370:	10c01217 	ldw	r3,72(r2)
   1b374:	e0bff717 	ldw	r2,-36(fp)
   1b378:	18bfdc1e 	bne	r3,r2,1b2ec <__alt_mem_Flash_flash_data+0xf401b2ec>
        {
            break;
        }
        sector++;
    }
    if ((cluster == 0) && (cluster <= max_cluster_index))
   1b37c:	e0bff90f 	ldh	r2,-28(fp)
   1b380:	1000081e 	bne	r2,zero,1b3a4 <find_first_empty_cluster+0x18c>
   1b384:	e0bff90f 	ldh	r2,-28(fp)
   1b388:	e0fffb17 	ldw	r3,-20(fp)
   1b38c:	18800536 	bltu	r3,r2,1b3a4 <find_first_empty_cluster+0x18c>
    {
        *cluster_number = cluster_index;
   1b390:	e0bfff17 	ldw	r2,-4(fp)
   1b394:	e0fff817 	ldw	r3,-32(fp)
   1b398:	10c00015 	stw	r3,0(r2)
		result = true;
   1b39c:	00800044 	movi	r2,1
   1b3a0:	e0bffa15 	stw	r2,-24(fp)
    }
    return result;
   1b3a4:	e0bffa17 	ldw	r2,-24(fp)
}
   1b3a8:	e037883a 	mov	sp,fp
   1b3ac:	dfc00117 	ldw	ra,4(sp)
   1b3b0:	df000017 	ldw	fp,0(sp)
   1b3b4:	dec00204 	addi	sp,sp,8
   1b3b8:	f800283a 	ret

0001b3bc <find_first_empty_record_in_a_subdirectory>:


int find_first_empty_record_in_a_subdirectory(int start_cluster_index)
// Search for a free spot in a subdirectory. Return an encoded location for the file record.
{
   1b3bc:	defff604 	addi	sp,sp,-40
   1b3c0:	dfc00915 	stw	ra,36(sp)
   1b3c4:	df000815 	stw	fp,32(sp)
   1b3c8:	df000804 	addi	fp,sp,32
   1b3cc:	e13fff15 	stw	r4,-4(fp)
    int result = -1;
   1b3d0:	00bfffc4 	movi	r2,-1
   1b3d4:	e0bff815 	stw	r2,-32(fp)
    int cluster = start_cluster_index;
   1b3d8:	e0bfff17 	ldw	r2,-4(fp)
   1b3dc:	e0bff915 	stw	r2,-28(fp)
    do {
        int start_sector = ( cluster - 2 ) * ( boot_sector_data.sectors_per_cluster ) + boot_sector_data.data_sector_offset;
   1b3e0:	e0bff917 	ldw	r2,-28(fp)
   1b3e4:	10ffff84 	addi	r3,r2,-2
   1b3e8:	008000f4 	movhi	r2,3
   1b3ec:	10a15704 	addi	r2,r2,-31396
   1b3f0:	10800383 	ldbu	r2,14(r2)
   1b3f4:	10803fcc 	andi	r2,r2,255
   1b3f8:	1885383a 	mul	r2,r3,r2
   1b3fc:	1007883a 	mov	r3,r2
   1b400:	008000f4 	movhi	r2,3
   1b404:	10a15704 	addi	r2,r2,-31396
   1b408:	10801417 	ldw	r2,80(r2)
   1b40c:	1885883a 	add	r2,r3,r2
   1b410:	e0bffc15 	stw	r2,-16(fp)
        int sector_index;
        
        for (sector_index = 0; sector_index < boot_sector_data.sectors_per_cluster; sector_index++)
   1b414:	e03ffa15 	stw	zero,-24(fp)
   1b418:	00002e06 	br	1b4d4 <find_first_empty_record_in_a_subdirectory+0x118>
        {
            if (Read_Sector_Data(sector_index + start_sector, fat_partition_offset_in_512_byte_sectors))
   1b41c:	e0fffa17 	ldw	r3,-24(fp)
   1b420:	e0bffc17 	ldw	r2,-16(fp)
   1b424:	1887883a 	add	r3,r3,r2
   1b428:	d0a81817 	ldw	r2,-24480(gp)
   1b42c:	1809883a 	mov	r4,r3
   1b430:	100b883a 	mov	r5,r2
   1b434:	00191700 	call	19170 <Read_Sector_Data>
   1b438:	10002226 	beq	r2,zero,1b4c4 <find_first_empty_record_in_a_subdirectory+0x108>
            {
                int file_counter;
                
                for (file_counter = 0; file_counter < 16; file_counter++)
   1b43c:	e03ffb15 	stw	zero,-20(fp)
   1b440:	00001c06 	br	1b4b4 <find_first_empty_record_in_a_subdirectory+0xf8>
                {
                    unsigned short int leading_char;
                    
                    // Read file record.
                    leading_char = ((unsigned char) IORD_8DIRECT(device_pointer->base, file_counter*32));
   1b444:	e0bffb17 	ldw	r2,-20(fp)
   1b448:	1004917a 	slli	r2,r2,5
   1b44c:	1007883a 	mov	r3,r2
   1b450:	d0a81a17 	ldw	r2,-24472(gp)
   1b454:	10800a17 	ldw	r2,40(r2)
   1b458:	1885883a 	add	r2,r3,r2
   1b45c:	10800023 	ldbuio	r2,0(r2)
   1b460:	10803fcc 	andi	r2,r2,255
   1b464:	10803fcc 	andi	r2,r2,255
   1b468:	e0bffd0d 	sth	r2,-12(fp)
                    if ((leading_char == 0x00e5) || (leading_char == 0))
   1b46c:	e0bffd0b 	ldhu	r2,-12(fp)
   1b470:	10803960 	cmpeqi	r2,r2,229
   1b474:	1000021e 	bne	r2,zero,1b480 <find_first_empty_record_in_a_subdirectory+0xc4>
   1b478:	e0bffd0b 	ldhu	r2,-12(fp)
   1b47c:	10000a1e 	bne	r2,zero,1b4a8 <find_first_empty_record_in_a_subdirectory+0xec>
                    {
                        result = (cluster) | ((sector_index*16 + file_counter) << 16);
   1b480:	e0bffa17 	ldw	r2,-24(fp)
   1b484:	1006913a 	slli	r3,r2,4
   1b488:	e0bffb17 	ldw	r2,-20(fp)
   1b48c:	1885883a 	add	r2,r3,r2
   1b490:	1006943a 	slli	r3,r2,16
   1b494:	e0bff917 	ldw	r2,-28(fp)
   1b498:	1884b03a 	or	r2,r3,r2
   1b49c:	e0bff815 	stw	r2,-32(fp)
                        return result;
   1b4a0:	e0bff817 	ldw	r2,-32(fp)
   1b4a4:	00005306 	br	1b5f4 <find_first_empty_record_in_a_subdirectory+0x238>
        {
            if (Read_Sector_Data(sector_index + start_sector, fat_partition_offset_in_512_byte_sectors))
            {
                int file_counter;
                
                for (file_counter = 0; file_counter < 16; file_counter++)
   1b4a8:	e0bffb17 	ldw	r2,-20(fp)
   1b4ac:	10800044 	addi	r2,r2,1
   1b4b0:	e0bffb15 	stw	r2,-20(fp)
   1b4b4:	e0bffb17 	ldw	r2,-20(fp)
   1b4b8:	10800410 	cmplti	r2,r2,16
   1b4bc:	103fe11e 	bne	r2,zero,1b444 <__alt_mem_Flash_flash_data+0xf401b444>
   1b4c0:	00000106 	br	1b4c8 <find_first_empty_record_in_a_subdirectory+0x10c>
                    }
                }
            }
            else
            {
                break;
   1b4c4:	00000906 	br	1b4ec <find_first_empty_record_in_a_subdirectory+0x130>
    int cluster = start_cluster_index;
    do {
        int start_sector = ( cluster - 2 ) * ( boot_sector_data.sectors_per_cluster ) + boot_sector_data.data_sector_offset;
        int sector_index;
        
        for (sector_index = 0; sector_index < boot_sector_data.sectors_per_cluster; sector_index++)
   1b4c8:	e0bffa17 	ldw	r2,-24(fp)
   1b4cc:	10800044 	addi	r2,r2,1
   1b4d0:	e0bffa15 	stw	r2,-24(fp)
   1b4d4:	008000f4 	movhi	r2,3
   1b4d8:	10a15704 	addi	r2,r2,-31396
   1b4dc:	10800383 	ldbu	r2,14(r2)
   1b4e0:	10803fcc 	andi	r2,r2,255
   1b4e4:	e0fffa17 	ldw	r3,-24(fp)
   1b4e8:	18bfcc16 	blt	r3,r2,1b41c <__alt_mem_Flash_flash_data+0xf401b41c>
                break;
            }
        }
        // If this is the end of the cluster and the file has not been found, then see if there is another cluster
        // that holds data for the current directory.
        if (result < 0)
   1b4ec:	e0bff817 	ldw	r2,-32(fp)
   1b4f0:	1000390e 	bge	r2,zero,1b5d8 <find_first_empty_record_in_a_subdirectory+0x21c>
        {
			unsigned short int new_cluster;
			if (get_cluster_flag(cluster, &new_cluster))
   1b4f4:	e0fff917 	ldw	r3,-28(fp)
   1b4f8:	e0bffd84 	addi	r2,fp,-10
   1b4fc:	1809883a 	mov	r4,r3
   1b500:	100b883a 	mov	r5,r2
   1b504:	00192480 	call	19248 <get_cluster_flag>
   1b508:	10003126 	beq	r2,zero,1b5d0 <find_first_empty_record_in_a_subdirectory+0x214>
			{
                // The directory needs to be expanded to store more files.
				if ((new_cluster & 0x0000fff8) == 0x0000fff8)
   1b50c:	e0bffd8b 	ldhu	r2,-10(fp)
   1b510:	10bfffcc 	andi	r2,r2,65535
   1b514:	10fffe0c 	andi	r3,r2,65528
   1b518:	00bffe14 	movui	r2,65528
   1b51c:	18802e1e 	bne	r3,r2,1b5d8 <find_first_empty_record_in_a_subdirectory+0x21c>
				{
					unsigned int new_dir_cluster; 
					if (find_first_empty_cluster(&new_dir_cluster))
   1b520:	e0bffe04 	addi	r2,fp,-8
   1b524:	1009883a 	mov	r4,r2
   1b528:	001b2180 	call	1b218 <find_first_empty_cluster>
   1b52c:	10002326 	beq	r2,zero,1b5bc <find_first_empty_record_in_a_subdirectory+0x200>
					{
						// Add the new cluster to the linked list of the given directory.
						if (mark_cluster(cluster, ((short int) (new_dir_cluster)), true) &&
   1b530:	e0fff917 	ldw	r3,-28(fp)
   1b534:	e0bffe17 	ldw	r2,-8(fp)
   1b538:	10bfffcc 	andi	r2,r2,65535
   1b53c:	10a0001c 	xori	r2,r2,32768
   1b540:	10a00004 	addi	r2,r2,-32768
   1b544:	1809883a 	mov	r4,r3
   1b548:	100b883a 	mov	r5,r2
   1b54c:	01800044 	movi	r6,1
   1b550:	00192fc0 	call	192fc <mark_cluster>
   1b554:	10001926 	beq	r2,zero,1b5bc <find_first_empty_record_in_a_subdirectory+0x200>
   1b558:	e0bffe17 	ldw	r2,-8(fp)
							mark_cluster(new_dir_cluster, ((short int) (0xffff)), true) &&
   1b55c:	1009883a 	mov	r4,r2
   1b560:	017fffc4 	movi	r5,-1
   1b564:	01800044 	movi	r6,1
   1b568:	00192fc0 	call	192fc <mark_cluster>
				{
					unsigned int new_dir_cluster; 
					if (find_first_empty_cluster(&new_dir_cluster))
					{
						// Add the new cluster to the linked list of the given directory.
						if (mark_cluster(cluster, ((short int) (new_dir_cluster)), true) &&
   1b56c:	10001326 	beq	r2,zero,1b5bc <find_first_empty_record_in_a_subdirectory+0x200>
							mark_cluster(new_dir_cluster, ((short int) (0xffff)), true) &&
							mark_cluster(cluster, ((short int) (new_dir_cluster)), false) &&
   1b570:	e0fff917 	ldw	r3,-28(fp)
   1b574:	e0bffe17 	ldw	r2,-8(fp)
   1b578:	10bfffcc 	andi	r2,r2,65535
   1b57c:	10a0001c 	xori	r2,r2,32768
   1b580:	10a00004 	addi	r2,r2,-32768
   1b584:	1809883a 	mov	r4,r3
   1b588:	100b883a 	mov	r5,r2
   1b58c:	000d883a 	mov	r6,zero
   1b590:	00192fc0 	call	192fc <mark_cluster>
					unsigned int new_dir_cluster; 
					if (find_first_empty_cluster(&new_dir_cluster))
					{
						// Add the new cluster to the linked list of the given directory.
						if (mark_cluster(cluster, ((short int) (new_dir_cluster)), true) &&
							mark_cluster(new_dir_cluster, ((short int) (0xffff)), true) &&
   1b594:	10000926 	beq	r2,zero,1b5bc <find_first_empty_record_in_a_subdirectory+0x200>
							mark_cluster(cluster, ((short int) (new_dir_cluster)), false) &&
   1b598:	e0bffe17 	ldw	r2,-8(fp)
							mark_cluster(new_dir_cluster, ((short int) (0xffff)), false))
   1b59c:	1009883a 	mov	r4,r2
   1b5a0:	017fffc4 	movi	r5,-1
   1b5a4:	000d883a 	mov	r6,zero
   1b5a8:	00192fc0 	call	192fc <mark_cluster>
					if (find_first_empty_cluster(&new_dir_cluster))
					{
						// Add the new cluster to the linked list of the given directory.
						if (mark_cluster(cluster, ((short int) (new_dir_cluster)), true) &&
							mark_cluster(new_dir_cluster, ((short int) (0xffff)), true) &&
							mark_cluster(cluster, ((short int) (new_dir_cluster)), false) &&
   1b5ac:	10000326 	beq	r2,zero,1b5bc <find_first_empty_record_in_a_subdirectory+0x200>
							mark_cluster(new_dir_cluster, ((short int) (0xffff)), false))
						{
							Save_Modified_Sector();
   1b5b0:	00191240 	call	19124 <Save_Modified_Sector>
							// The new file will begin at the first entry of the directory.
							result = new_dir_cluster;                           
   1b5b4:	e0bffe17 	ldw	r2,-8(fp)
   1b5b8:	e0bff815 	stw	r2,-32(fp)
						}
					}
					cluster = (new_cluster & 0x0000fff8);
   1b5bc:	e0bffd8b 	ldhu	r2,-10(fp)
   1b5c0:	10bfffcc 	andi	r2,r2,65535
   1b5c4:	10bffe0c 	andi	r2,r2,65528
   1b5c8:	e0bff915 	stw	r2,-28(fp)
   1b5cc:	00000206 	br	1b5d8 <find_first_empty_record_in_a_subdirectory+0x21c>
				}
			}
			else
			{
				// Error encountered.                 
				result = -1;
   1b5d0:	00bfffc4 	movi	r2,-1
   1b5d4:	e0bff815 	stw	r2,-32(fp)
			}
        }              
    } while ((cluster < 0x0000fff8) && (result == -1)); 
   1b5d8:	e0bff917 	ldw	r2,-28(fp)
   1b5dc:	00fffdd4 	movui	r3,65527
   1b5e0:	18800316 	blt	r3,r2,1b5f0 <find_first_empty_record_in_a_subdirectory+0x234>
   1b5e4:	e0bff817 	ldw	r2,-32(fp)
   1b5e8:	10bfffe0 	cmpeqi	r2,r2,-1
   1b5ec:	103f7c1e 	bne	r2,zero,1b3e0 <__alt_mem_Flash_flash_data+0xf401b3e0>
    return result; 
   1b5f0:	e0bff817 	ldw	r2,-32(fp)
}
   1b5f4:	e037883a 	mov	sp,fp
   1b5f8:	dfc00117 	ldw	ra,4(sp)
   1b5fc:	df000017 	ldw	fp,0(sp)
   1b600:	dec00204 	addi	sp,sp,8
   1b604:	f800283a 	ret

0001b608 <find_first_empty_record_in_root_directory>:


int find_first_empty_record_in_root_directory()
// Find a first unused record location to use. Return -1 if none is found.
{
   1b608:	defff904 	addi	sp,sp,-28
   1b60c:	dfc00615 	stw	ra,24(sp)
   1b610:	df000515 	stw	fp,20(sp)
   1b614:	df000504 	addi	fp,sp,20
    int max_root_dir_sectors = ((32*boot_sector_data.max_number_of_dir_entires) / boot_sector_data.sector_size_in_bytes);
   1b618:	008000f4 	movhi	r2,3
   1b61c:	10a15704 	addi	r2,r2,-31396
   1b620:	1080050b 	ldhu	r2,20(r2)
   1b624:	10bfffcc 	andi	r2,r2,65535
   1b628:	1006917a 	slli	r3,r2,5
   1b62c:	008000f4 	movhi	r2,3
   1b630:	10a15704 	addi	r2,r2,-31396
   1b634:	1080030b 	ldhu	r2,12(r2)
   1b638:	10bfffcc 	andi	r2,r2,65535
   1b63c:	1885283a 	div	r2,r3,r2
   1b640:	e0bffd15 	stw	r2,-12(fp)
    int sector_index;
    int result = -1;
   1b644:	00bfffc4 	movi	r2,-1
   1b648:	e0bffe15 	stw	r2,-8(fp)
    
    for (sector_index = 0; sector_index < max_root_dir_sectors; sector_index++)
   1b64c:	e03ffb15 	stw	zero,-20(fp)
   1b650:	00002f06 	br	1b710 <find_first_empty_record_in_root_directory+0x108>
    {
        if (Read_Sector_Data(   sector_index + boot_sector_data.root_directory_sector_offset,
   1b654:	008000f4 	movhi	r2,3
   1b658:	10a15704 	addi	r2,r2,-31396
   1b65c:	10c01317 	ldw	r3,76(r2)
   1b660:	e0bffb17 	ldw	r2,-20(fp)
   1b664:	1885883a 	add	r2,r3,r2
   1b668:	1007883a 	mov	r3,r2
   1b66c:	d0a81817 	ldw	r2,-24480(gp)
   1b670:	1809883a 	mov	r4,r3
   1b674:	100b883a 	mov	r5,r2
   1b678:	00191700 	call	19170 <Read_Sector_Data>
   1b67c:	10002026 	beq	r2,zero,1b700 <find_first_empty_record_in_root_directory+0xf8>
                                fat_partition_offset_in_512_byte_sectors))
        {
            int file_counter;
            
            for (file_counter = 0; file_counter < 16; file_counter++)
   1b680:	e03ffc15 	stw	zero,-16(fp)
   1b684:	00001a06 	br	1b6f0 <find_first_empty_record_in_root_directory+0xe8>
            {
                unsigned short int leading_char;
                
                // Read first character of the file record.
                leading_char = ((unsigned char) IORD_8DIRECT(device_pointer->base, file_counter*32));
   1b688:	e0bffc17 	ldw	r2,-16(fp)
   1b68c:	1004917a 	slli	r2,r2,5
   1b690:	1007883a 	mov	r3,r2
   1b694:	d0a81a17 	ldw	r2,-24472(gp)
   1b698:	10800a17 	ldw	r2,40(r2)
   1b69c:	1885883a 	add	r2,r3,r2
   1b6a0:	10800023 	ldbuio	r2,0(r2)
   1b6a4:	10803fcc 	andi	r2,r2,255
   1b6a8:	10803fcc 	andi	r2,r2,255
   1b6ac:	e0bfff0d 	sth	r2,-4(fp)
                if ((leading_char == 0x00e5) || (leading_char == 0))
   1b6b0:	e0bfff0b 	ldhu	r2,-4(fp)
   1b6b4:	10803960 	cmpeqi	r2,r2,229
   1b6b8:	1000021e 	bne	r2,zero,1b6c4 <find_first_empty_record_in_root_directory+0xbc>
   1b6bc:	e0bfff0b 	ldhu	r2,-4(fp)
   1b6c0:	1000081e 	bne	r2,zero,1b6e4 <find_first_empty_record_in_root_directory+0xdc>
                {
                    result = (sector_index*16 + file_counter) << 16;
   1b6c4:	e0bffb17 	ldw	r2,-20(fp)
   1b6c8:	1006913a 	slli	r3,r2,4
   1b6cc:	e0bffc17 	ldw	r2,-16(fp)
   1b6d0:	1885883a 	add	r2,r3,r2
   1b6d4:	1004943a 	slli	r2,r2,16
   1b6d8:	e0bffe15 	stw	r2,-8(fp)
                    return result;
   1b6dc:	e0bffe17 	ldw	r2,-8(fp)
   1b6e0:	00000f06 	br	1b720 <find_first_empty_record_in_root_directory+0x118>
        if (Read_Sector_Data(   sector_index + boot_sector_data.root_directory_sector_offset,
                                fat_partition_offset_in_512_byte_sectors))
        {
            int file_counter;
            
            for (file_counter = 0; file_counter < 16; file_counter++)
   1b6e4:	e0bffc17 	ldw	r2,-16(fp)
   1b6e8:	10800044 	addi	r2,r2,1
   1b6ec:	e0bffc15 	stw	r2,-16(fp)
   1b6f0:	e0bffc17 	ldw	r2,-16(fp)
   1b6f4:	10800410 	cmplti	r2,r2,16
   1b6f8:	103fe31e 	bne	r2,zero,1b688 <__alt_mem_Flash_flash_data+0xf401b688>
   1b6fc:	00000106 	br	1b704 <find_first_empty_record_in_root_directory+0xfc>
                }
            }
        }
        else
        {
            break;
   1b700:	00000606 	br	1b71c <find_first_empty_record_in_root_directory+0x114>
{
    int max_root_dir_sectors = ((32*boot_sector_data.max_number_of_dir_entires) / boot_sector_data.sector_size_in_bytes);
    int sector_index;
    int result = -1;
    
    for (sector_index = 0; sector_index < max_root_dir_sectors; sector_index++)
   1b704:	e0bffb17 	ldw	r2,-20(fp)
   1b708:	10800044 	addi	r2,r2,1
   1b70c:	e0bffb15 	stw	r2,-20(fp)
   1b710:	e0fffb17 	ldw	r3,-20(fp)
   1b714:	e0bffd17 	ldw	r2,-12(fp)
   1b718:	18bfce16 	blt	r3,r2,1b654 <__alt_mem_Flash_flash_data+0xf401b654>
        else
        {
            break;
        }
    }
    return result;
   1b71c:	e0bffe17 	ldw	r2,-8(fp)
}
   1b720:	e037883a 	mov	sp,fp
   1b724:	dfc00117 	ldw	ra,4(sp)
   1b728:	df000017 	ldw	fp,0(sp)
   1b72c:	dec00204 	addi	sp,sp,8
   1b730:	f800283a 	ret

0001b734 <convert_filename_to_name_extension>:

void convert_filename_to_name_extension(char *filename, char *name, char *extension)
// This function converts the file name into a name . extension format.
{
   1b734:	defffa04 	addi	sp,sp,-24
   1b738:	df000515 	stw	fp,20(sp)
   1b73c:	df000504 	addi	fp,sp,20
   1b740:	e13ffd15 	stw	r4,-12(fp)
   1b744:	e17ffe15 	stw	r5,-8(fp)
   1b748:	e1bfff15 	stw	r6,-4(fp)
    int counter;
    int local = 0;
   1b74c:	e03ffc15 	stw	zero,-16(fp)
    
    for(counter = 0; counter < 8; counter++)
   1b750:	e03ffb15 	stw	zero,-20(fp)
   1b754:	00002506 	br	1b7ec <convert_filename_to_name_extension+0xb8>
    {
        if (filename[local] != '.')
   1b758:	e0bffc17 	ldw	r2,-16(fp)
   1b75c:	e0fffd17 	ldw	r3,-12(fp)
   1b760:	1885883a 	add	r2,r3,r2
   1b764:	10800003 	ldbu	r2,0(r2)
   1b768:	10803fcc 	andi	r2,r2,255
   1b76c:	1080201c 	xori	r2,r2,128
   1b770:	10bfe004 	addi	r2,r2,-128
   1b774:	10800ba0 	cmpeqi	r2,r2,46
   1b778:	1000141e 	bne	r2,zero,1b7cc <convert_filename_to_name_extension+0x98>
        {
            name[counter] = filename[local];
   1b77c:	e0bffb17 	ldw	r2,-20(fp)
   1b780:	e0fffe17 	ldw	r3,-8(fp)
   1b784:	1885883a 	add	r2,r3,r2
   1b788:	e0fffc17 	ldw	r3,-16(fp)
   1b78c:	e13ffd17 	ldw	r4,-12(fp)
   1b790:	20c7883a 	add	r3,r4,r3
   1b794:	18c00003 	ldbu	r3,0(r3)
   1b798:	10c00005 	stb	r3,0(r2)
            if (filename[local] != 0) local++;
   1b79c:	e0bffc17 	ldw	r2,-16(fp)
   1b7a0:	e0fffd17 	ldw	r3,-12(fp)
   1b7a4:	1885883a 	add	r2,r3,r2
   1b7a8:	10800003 	ldbu	r2,0(r2)
   1b7ac:	10803fcc 	andi	r2,r2,255
   1b7b0:	1080201c 	xori	r2,r2,128
   1b7b4:	10bfe004 	addi	r2,r2,-128
   1b7b8:	10000926 	beq	r2,zero,1b7e0 <convert_filename_to_name_extension+0xac>
   1b7bc:	e0bffc17 	ldw	r2,-16(fp)
   1b7c0:	10800044 	addi	r2,r2,1
   1b7c4:	e0bffc15 	stw	r2,-16(fp)
   1b7c8:	00000506 	br	1b7e0 <convert_filename_to_name_extension+0xac>
        }
        else
        {
            name[counter] = ' ';
   1b7cc:	e0bffb17 	ldw	r2,-20(fp)
   1b7d0:	e0fffe17 	ldw	r3,-8(fp)
   1b7d4:	1885883a 	add	r2,r3,r2
   1b7d8:	00c00804 	movi	r3,32
   1b7dc:	10c00005 	stb	r3,0(r2)
// This function converts the file name into a name . extension format.
{
    int counter;
    int local = 0;
    
    for(counter = 0; counter < 8; counter++)
   1b7e0:	e0bffb17 	ldw	r2,-20(fp)
   1b7e4:	10800044 	addi	r2,r2,1
   1b7e8:	e0bffb15 	stw	r2,-20(fp)
   1b7ec:	e0bffb17 	ldw	r2,-20(fp)
   1b7f0:	10800210 	cmplti	r2,r2,8
   1b7f4:	103fd81e 	bne	r2,zero,1b758 <__alt_mem_Flash_flash_data+0xf401b758>
        else
        {
            name[counter] = ' ';
        }
    }
    if (filename[local] == '.') local++;
   1b7f8:	e0bffc17 	ldw	r2,-16(fp)
   1b7fc:	e0fffd17 	ldw	r3,-12(fp)
   1b800:	1885883a 	add	r2,r3,r2
   1b804:	10800003 	ldbu	r2,0(r2)
   1b808:	10803fcc 	andi	r2,r2,255
   1b80c:	1080201c 	xori	r2,r2,128
   1b810:	10bfe004 	addi	r2,r2,-128
   1b814:	10800b98 	cmpnei	r2,r2,46
   1b818:	1000031e 	bne	r2,zero,1b828 <convert_filename_to_name_extension+0xf4>
   1b81c:	e0bffc17 	ldw	r2,-16(fp)
   1b820:	10800044 	addi	r2,r2,1
   1b824:	e0bffc15 	stw	r2,-16(fp)
    for(counter = 0; counter < 3; counter++)
   1b828:	e03ffb15 	stw	zero,-20(fp)
   1b82c:	00001c06 	br	1b8a0 <convert_filename_to_name_extension+0x16c>
    {
        if (filename[local] != 0)
   1b830:	e0bffc17 	ldw	r2,-16(fp)
   1b834:	e0fffd17 	ldw	r3,-12(fp)
   1b838:	1885883a 	add	r2,r3,r2
   1b83c:	10800003 	ldbu	r2,0(r2)
   1b840:	10803fcc 	andi	r2,r2,255
   1b844:	1080201c 	xori	r2,r2,128
   1b848:	10bfe004 	addi	r2,r2,-128
   1b84c:	10000c26 	beq	r2,zero,1b880 <convert_filename_to_name_extension+0x14c>
        {
            extension[counter] = filename[local];
   1b850:	e0bffb17 	ldw	r2,-20(fp)
   1b854:	e0ffff17 	ldw	r3,-4(fp)
   1b858:	1885883a 	add	r2,r3,r2
   1b85c:	e0fffc17 	ldw	r3,-16(fp)
   1b860:	e13ffd17 	ldw	r4,-12(fp)
   1b864:	20c7883a 	add	r3,r4,r3
   1b868:	18c00003 	ldbu	r3,0(r3)
   1b86c:	10c00005 	stb	r3,0(r2)
            local++;
   1b870:	e0bffc17 	ldw	r2,-16(fp)
   1b874:	10800044 	addi	r2,r2,1
   1b878:	e0bffc15 	stw	r2,-16(fp)
   1b87c:	00000506 	br	1b894 <convert_filename_to_name_extension+0x160>
        }
        else
        {
            extension[counter] = ' ';
   1b880:	e0bffb17 	ldw	r2,-20(fp)
   1b884:	e0ffff17 	ldw	r3,-4(fp)
   1b888:	1885883a 	add	r2,r3,r2
   1b88c:	00c00804 	movi	r3,32
   1b890:	10c00005 	stb	r3,0(r2)
        {
            name[counter] = ' ';
        }
    }
    if (filename[local] == '.') local++;
    for(counter = 0; counter < 3; counter++)
   1b894:	e0bffb17 	ldw	r2,-20(fp)
   1b898:	10800044 	addi	r2,r2,1
   1b89c:	e0bffb15 	stw	r2,-20(fp)
   1b8a0:	e0bffb17 	ldw	r2,-20(fp)
   1b8a4:	108000d0 	cmplti	r2,r2,3
   1b8a8:	103fe11e 	bne	r2,zero,1b830 <__alt_mem_Flash_flash_data+0xf401b830>
        {
            extension[counter] = ' ';
        }
    }

}
   1b8ac:	e037883a 	mov	sp,fp
   1b8b0:	df000017 	ldw	fp,0(sp)
   1b8b4:	dec00104 	addi	sp,sp,4
   1b8b8:	f800283a 	ret

0001b8bc <create_file>:

bool create_file(char *name, t_file_record *file_record, t_file_record *home_dir)
// Create a file in a given directory. Expand the directory if needed.
{
   1b8bc:	defff504 	addi	sp,sp,-44
   1b8c0:	dfc00a15 	stw	ra,40(sp)
   1b8c4:	df000915 	stw	fp,36(sp)
   1b8c8:	df000904 	addi	fp,sp,36
   1b8cc:	e13ffd15 	stw	r4,-12(fp)
   1b8d0:	e17ffe15 	stw	r5,-8(fp)
   1b8d4:	e1bfff15 	stw	r6,-4(fp)
    unsigned int cluster_number;
    bool result = false;
   1b8d8:	e03ff715 	stw	zero,-36(fp)
    
    if (find_first_empty_cluster(&cluster_number))
   1b8dc:	e0bffc04 	addi	r2,fp,-16
   1b8e0:	1009883a 	mov	r4,r2
   1b8e4:	001b2180 	call	1b218 <find_first_empty_cluster>
   1b8e8:	10009f26 	beq	r2,zero,1bb68 <create_file+0x2ac>
    {
        int record_index;
        
        if (home_dir->file_record_cluster == 0)
   1b8ec:	e0bfff17 	ldw	r2,-4(fp)
   1b8f0:	10800a17 	ldw	r2,40(r2)
   1b8f4:	1000031e 	bne	r2,zero,1b904 <create_file+0x48>
        {
            // Put a file in the root directory.
            record_index = find_first_empty_record_in_root_directory();
   1b8f8:	001b6080 	call	1b608 <find_first_empty_record_in_root_directory>
   1b8fc:	e0bff815 	stw	r2,-32(fp)
   1b900:	00000606 	br	1b91c <create_file+0x60>
        }
        else
        {
            // Put a file in a subdirectory.
            record_index = find_first_empty_record_in_a_subdirectory(home_dir->start_cluster_index);           
   1b904:	e0bfff17 	ldw	r2,-4(fp)
   1b908:	1080058b 	ldhu	r2,22(r2)
   1b90c:	10bfffcc 	andi	r2,r2,65535
   1b910:	1009883a 	mov	r4,r2
   1b914:	001b3bc0 	call	1b3bc <find_first_empty_record_in_a_subdirectory>
   1b918:	e0bff815 	stw	r2,-32(fp)
        }
        if (record_index >= 0)
   1b91c:	e0bff817 	ldw	r2,-32(fp)
   1b920:	10009116 	blt	r2,zero,1bb68 <create_file+0x2ac>
        {   
            unsigned int file_record_sector;
            int location = get_dir_divider_location( name );
   1b924:	e13ffd17 	ldw	r4,-12(fp)
   1b928:	001a5300 	call	1a530 <get_dir_divider_location>
   1b92c:	e0bff915 	stw	r2,-28(fp)
            int last_dir_separator = 0;
   1b930:	e03ffa15 	stw	zero,-24(fp)

            // Skip through all directory separators.
            while (location > 0)
   1b934:	00000b06 	br	1b964 <create_file+0xa8>
            {
                last_dir_separator = last_dir_separator+location+1;
   1b938:	e0fffa17 	ldw	r3,-24(fp)
   1b93c:	e0bff917 	ldw	r2,-28(fp)
   1b940:	1885883a 	add	r2,r3,r2
   1b944:	10800044 	addi	r2,r2,1
   1b948:	e0bffa15 	stw	r2,-24(fp)
                location = get_dir_divider_location( &(name[last_dir_separator]) );
   1b94c:	e0bffa17 	ldw	r2,-24(fp)
   1b950:	e0fffd17 	ldw	r3,-12(fp)
   1b954:	1885883a 	add	r2,r3,r2
   1b958:	1009883a 	mov	r4,r2
   1b95c:	001a5300 	call	1a530 <get_dir_divider_location>
   1b960:	e0bff915 	stw	r2,-28(fp)
            unsigned int file_record_sector;
            int location = get_dir_divider_location( name );
            int last_dir_separator = 0;

            // Skip through all directory separators.
            while (location > 0)
   1b964:	e0bff917 	ldw	r2,-28(fp)
   1b968:	00bff316 	blt	zero,r2,1b938 <__alt_mem_Flash_flash_data+0xf401b938>
            {
                last_dir_separator = last_dir_separator+location+1;
                location = get_dir_divider_location( &(name[last_dir_separator]) );
            }
            
            convert_filename_to_name_extension(&(name[last_dir_separator]), (char *)file_record->name, (char *)file_record->extension);
   1b96c:	e0bffa17 	ldw	r2,-24(fp)
   1b970:	e0fffd17 	ldw	r3,-12(fp)
   1b974:	1889883a 	add	r4,r3,r2
   1b978:	e0fffe17 	ldw	r3,-8(fp)
   1b97c:	e0bffe17 	ldw	r2,-8(fp)
   1b980:	10800204 	addi	r2,r2,8
   1b984:	180b883a 	mov	r5,r3
   1b988:	100d883a 	mov	r6,r2
   1b98c:	001b7340 	call	1b734 <convert_filename_to_name_extension>
                         
            file_record->attributes = 0;
   1b990:	e0bffe17 	ldw	r2,-8(fp)
   1b994:	100002c5 	stb	zero,11(r2)
            file_record->create_time = 0;
   1b998:	e0bffe17 	ldw	r2,-8(fp)
   1b99c:	1000030d 	sth	zero,12(r2)
            file_record->create_date = 0;
   1b9a0:	e0bffe17 	ldw	r2,-8(fp)
   1b9a4:	1000038d 	sth	zero,14(r2)
            file_record->last_access_date = 0;
   1b9a8:	e0bffe17 	ldw	r2,-8(fp)
   1b9ac:	1000040d 	sth	zero,16(r2)
            file_record->last_modified_time = 0;
   1b9b0:	e0bffe17 	ldw	r2,-8(fp)
   1b9b4:	1000048d 	sth	zero,18(r2)
            file_record->last_modified_date = 0;
   1b9b8:	e0bffe17 	ldw	r2,-8(fp)
   1b9bc:	1000050d 	sth	zero,20(r2)
            file_record->start_cluster_index = cluster_number;
   1b9c0:	e0bffc17 	ldw	r2,-16(fp)
   1b9c4:	1007883a 	mov	r3,r2
   1b9c8:	e0bffe17 	ldw	r2,-8(fp)
   1b9cc:	10c0058d 	sth	r3,22(r2)
            file_record->file_size_in_bytes = 0;
   1b9d0:	e0bffe17 	ldw	r2,-8(fp)
   1b9d4:	10000615 	stw	zero,24(r2)
            file_record->current_cluster_index = cluster_number;
   1b9d8:	e0fffc17 	ldw	r3,-16(fp)
   1b9dc:	e0bffe17 	ldw	r2,-8(fp)
   1b9e0:	10c00715 	stw	r3,28(r2)
            file_record->current_sector_in_cluster = 0;
   1b9e4:	e0bffe17 	ldw	r2,-8(fp)
   1b9e8:	10000815 	stw	zero,32(r2)
            file_record->current_byte_position = 0;
   1b9ec:	e0bffe17 	ldw	r2,-8(fp)
   1b9f0:	10000915 	stw	zero,36(r2)
            file_record->file_record_cluster = record_index & 0x0000ffff;
   1b9f4:	e0bff817 	ldw	r2,-32(fp)
   1b9f8:	10ffffcc 	andi	r3,r2,65535
   1b9fc:	e0bffe17 	ldw	r2,-8(fp)
   1ba00:	10c00a15 	stw	r3,40(r2)
            file_record->file_record_sector_in_cluster = ((record_index >> 16) & 0x0000ffff) / 16;
   1ba04:	e0bff817 	ldw	r2,-32(fp)
   1ba08:	1004d43a 	srli	r2,r2,16
   1ba0c:	1000010e 	bge	r2,zero,1ba14 <create_file+0x158>
   1ba10:	108003c4 	addi	r2,r2,15
   1ba14:	1005d13a 	srai	r2,r2,4
   1ba18:	1007883a 	mov	r3,r2
   1ba1c:	e0bffe17 	ldw	r2,-8(fp)
   1ba20:	10c00b15 	stw	r3,44(r2)
            file_record->file_record_offset = (((record_index >> 16) & 0x0000ffff) % 16)*32;   
   1ba24:	e0bff817 	ldw	r2,-32(fp)
   1ba28:	1004d43a 	srli	r2,r2,16
   1ba2c:	1007883a 	mov	r3,r2
   1ba30:	00a00034 	movhi	r2,32768
   1ba34:	108003c4 	addi	r2,r2,15
   1ba38:	1884703a 	and	r2,r3,r2
   1ba3c:	1000040e 	bge	r2,zero,1ba50 <create_file+0x194>
   1ba40:	10bfffc4 	addi	r2,r2,-1
   1ba44:	00fffc04 	movi	r3,-16
   1ba48:	10c4b03a 	or	r2,r2,r3
   1ba4c:	10800044 	addi	r2,r2,1
   1ba50:	1004917a 	slli	r2,r2,5
   1ba54:	1007883a 	mov	r3,r2
   1ba58:	e0bffe17 	ldw	r2,-8(fp)
   1ba5c:	10c00c0d 	sth	r3,48(r2)
            file_record->home_directory_cluster = home_dir->start_cluster_index;
   1ba60:	e0bfff17 	ldw	r2,-4(fp)
   1ba64:	1080058b 	ldhu	r2,22(r2)
   1ba68:	10ffffcc 	andi	r3,r2,65535
   1ba6c:	e0bffe17 	ldw	r2,-8(fp)
   1ba70:	10c00d15 	stw	r3,52(r2)
            file_record->in_use = true;
   1ba74:	e0bffe17 	ldw	r2,-8(fp)
   1ba78:	00c00044 	movi	r3,1
   1ba7c:	10c00f15 	stw	r3,60(r2)
            file_record->modified = true;
   1ba80:	e0bffe17 	ldw	r2,-8(fp)
   1ba84:	00c00044 	movi	r3,1
   1ba88:	10c00e15 	stw	r3,56(r2)
            // Now write the record at the specified location.
            file_record_sector = (file_record->file_record_cluster == 0) ? 
   1ba8c:	e0bffe17 	ldw	r2,-8(fp)
   1ba90:	10800a17 	ldw	r2,40(r2)
                                    (boot_sector_data.root_directory_sector_offset + file_record->file_record_sector_in_cluster):  
   1ba94:	1000071e 	bne	r2,zero,1bab4 <create_file+0x1f8>
   1ba98:	008000f4 	movhi	r2,3
   1ba9c:	10a15704 	addi	r2,r2,-31396
   1baa0:	10c01317 	ldw	r3,76(r2)
   1baa4:	e0bffe17 	ldw	r2,-8(fp)
   1baa8:	10800b17 	ldw	r2,44(r2)
   1baac:	1885883a 	add	r2,r3,r2
   1bab0:	00000f06 	br	1baf0 <create_file+0x234>
                                    (boot_sector_data.data_sector_offset + (file_record->file_record_cluster-2)*boot_sector_data.sectors_per_cluster +
   1bab4:	008000f4 	movhi	r2,3
   1bab8:	10a15704 	addi	r2,r2,-31396
   1babc:	10c01417 	ldw	r3,80(r2)
   1bac0:	e0bffe17 	ldw	r2,-8(fp)
   1bac4:	10800a17 	ldw	r2,40(r2)
   1bac8:	113fff84 	addi	r4,r2,-2
   1bacc:	008000f4 	movhi	r2,3
   1bad0:	10a15704 	addi	r2,r2,-31396
   1bad4:	10800383 	ldbu	r2,14(r2)
   1bad8:	10803fcc 	andi	r2,r2,255
   1badc:	2085383a 	mul	r2,r4,r2
   1bae0:	1887883a 	add	r3,r3,r2
                                     file_record->file_record_sector_in_cluster);
   1bae4:	e0bffe17 	ldw	r2,-8(fp)
   1bae8:	10800b17 	ldw	r2,44(r2)
            file_record->home_directory_cluster = home_dir->start_cluster_index;
            file_record->in_use = true;
            file_record->modified = true;
            // Now write the record at the specified location.
            file_record_sector = (file_record->file_record_cluster == 0) ? 
                                    (boot_sector_data.root_directory_sector_offset + file_record->file_record_sector_in_cluster):  
   1baec:	1885883a 	add	r2,r3,r2
            file_record->file_record_offset = (((record_index >> 16) & 0x0000ffff) % 16)*32;   
            file_record->home_directory_cluster = home_dir->start_cluster_index;
            file_record->in_use = true;
            file_record->modified = true;
            // Now write the record at the specified location.
            file_record_sector = (file_record->file_record_cluster == 0) ? 
   1baf0:	e0bffb15 	stw	r2,-20(fp)
                                    (boot_sector_data.root_directory_sector_offset + file_record->file_record_sector_in_cluster):  
                                    (boot_sector_data.data_sector_offset + (file_record->file_record_cluster-2)*boot_sector_data.sectors_per_cluster +
                                     file_record->file_record_sector_in_cluster);

			if (Read_Sector_Data(file_record_sector, fat_partition_offset_in_512_byte_sectors))
   1baf4:	e0fffb17 	ldw	r3,-20(fp)
   1baf8:	d0a81817 	ldw	r2,-24480(gp)
   1bafc:	1809883a 	mov	r4,r3
   1bb00:	100b883a 	mov	r5,r2
   1bb04:	00191700 	call	19170 <Read_Sector_Data>
   1bb08:	10001726 	beq	r2,zero,1bb68 <create_file+0x2ac>
            {
                if (Write_File_Record_At_Offset(file_record->file_record_offset, file_record))
   1bb0c:	e0bffe17 	ldw	r2,-8(fp)
   1bb10:	10800c0b 	ldhu	r2,48(r2)
   1bb14:	10bfffcc 	andi	r2,r2,65535
   1bb18:	10a0001c 	xori	r2,r2,32768
   1bb1c:	10a00004 	addi	r2,r2,-32768
   1bb20:	1009883a 	mov	r4,r2
   1bb24:	e17ffe17 	ldw	r5,-8(fp)
   1bb28:	00198040 	call	19804 <Write_File_Record_At_Offset>
   1bb2c:	10000e26 	beq	r2,zero,1bb68 <create_file+0x2ac>
                {
                    Save_Modified_Sector();
   1bb30:	00191240 	call	19124 <Save_Modified_Sector>
                    // Mark the first cluster of the file as the last cluster at first.
                    mark_cluster(cluster_number, ((short int) (0xffff)), true);
   1bb34:	e0bffc17 	ldw	r2,-16(fp)
   1bb38:	1009883a 	mov	r4,r2
   1bb3c:	017fffc4 	movi	r5,-1
   1bb40:	01800044 	movi	r6,1
   1bb44:	00192fc0 	call	192fc <mark_cluster>
                    if (mark_cluster(cluster_number, ((short int) (0xffff)), false))
   1bb48:	e0bffc17 	ldw	r2,-16(fp)
   1bb4c:	1009883a 	mov	r4,r2
   1bb50:	017fffc4 	movi	r5,-1
   1bb54:	000d883a 	mov	r6,zero
   1bb58:	00192fc0 	call	192fc <mark_cluster>
   1bb5c:	10000226 	beq	r2,zero,1bb68 <create_file+0x2ac>
                    {
                        result = true;
   1bb60:	00800044 	movi	r2,1
   1bb64:	e0bff715 	stw	r2,-36(fp)
                }
            }
        }

    }
    return result;           
   1bb68:	e0bff717 	ldw	r2,-36(fp)
}
   1bb6c:	e037883a 	mov	sp,fp
   1bb70:	dfc00117 	ldw	ra,4(sp)
   1bb74:	df000017 	ldw	fp,0(sp)
   1bb78:	dec00204 	addi	sp,sp,8
   1bb7c:	f800283a 	ret

0001bb80 <copy_file_record_name_to_string>:


void copy_file_record_name_to_string(t_file_record *file_record, char *file_name)
/* Copy a file name from the file record to a given string */
{
   1bb80:	defffb04 	addi	sp,sp,-20
   1bb84:	df000415 	stw	fp,16(sp)
   1bb88:	df000404 	addi	fp,sp,16
   1bb8c:	e13ffe15 	stw	r4,-8(fp)
   1bb90:	e17fff15 	stw	r5,-4(fp)
	int index;
	int flength = 0;
   1bb94:	e03ffd15 	stw	zero,-12(fp)

	/* Copy file name.*/
	for (index = 0; index < 8; index++)
   1bb98:	e03ffc15 	stw	zero,-16(fp)
   1bb9c:	00001506 	br	1bbf4 <copy_file_record_name_to_string+0x74>
	{
		if (file_record->name[index] != ' ')
   1bba0:	e0fffe17 	ldw	r3,-8(fp)
   1bba4:	e0bffc17 	ldw	r2,-16(fp)
   1bba8:	1885883a 	add	r2,r3,r2
   1bbac:	10800003 	ldbu	r2,0(r2)
   1bbb0:	10803fcc 	andi	r2,r2,255
   1bbb4:	10800820 	cmpeqi	r2,r2,32
   1bbb8:	10000b1e 	bne	r2,zero,1bbe8 <copy_file_record_name_to_string+0x68>
		{
			file_name[flength] = file_record->name[index];
   1bbbc:	e0bffd17 	ldw	r2,-12(fp)
   1bbc0:	e0ffff17 	ldw	r3,-4(fp)
   1bbc4:	1885883a 	add	r2,r3,r2
   1bbc8:	e13ffe17 	ldw	r4,-8(fp)
   1bbcc:	e0fffc17 	ldw	r3,-16(fp)
   1bbd0:	20c7883a 	add	r3,r4,r3
   1bbd4:	18c00003 	ldbu	r3,0(r3)
   1bbd8:	10c00005 	stb	r3,0(r2)
			flength = flength + 1;
   1bbdc:	e0bffd17 	ldw	r2,-12(fp)
   1bbe0:	10800044 	addi	r2,r2,1
   1bbe4:	e0bffd15 	stw	r2,-12(fp)
{
	int index;
	int flength = 0;

	/* Copy file name.*/
	for (index = 0; index < 8; index++)
   1bbe8:	e0bffc17 	ldw	r2,-16(fp)
   1bbec:	10800044 	addi	r2,r2,1
   1bbf0:	e0bffc15 	stw	r2,-16(fp)
   1bbf4:	e0bffc17 	ldw	r2,-16(fp)
   1bbf8:	10800210 	cmplti	r2,r2,8
   1bbfc:	103fe81e 	bne	r2,zero,1bba0 <__alt_mem_Flash_flash_data+0xf401bba0>
		{
			file_name[flength] = file_record->name[index];
			flength = flength + 1;
		}
	}
	if (file_record->extension[0] != ' ')
   1bc00:	e0bffe17 	ldw	r2,-8(fp)
   1bc04:	10800203 	ldbu	r2,8(r2)
   1bc08:	10803fcc 	andi	r2,r2,255
   1bc0c:	10800820 	cmpeqi	r2,r2,32
   1bc10:	1000241e 	bne	r2,zero,1bca4 <copy_file_record_name_to_string+0x124>
	{
		file_name[flength] = '.';
   1bc14:	e0bffd17 	ldw	r2,-12(fp)
   1bc18:	e0ffff17 	ldw	r3,-4(fp)
   1bc1c:	1885883a 	add	r2,r3,r2
   1bc20:	00c00b84 	movi	r3,46
   1bc24:	10c00005 	stb	r3,0(r2)
		flength = flength + 1;
   1bc28:	e0bffd17 	ldw	r2,-12(fp)
   1bc2c:	10800044 	addi	r2,r2,1
   1bc30:	e0bffd15 	stw	r2,-12(fp)
		for (index = 0; index < 3; index++)
   1bc34:	e03ffc15 	stw	zero,-16(fp)
   1bc38:	00001706 	br	1bc98 <copy_file_record_name_to_string+0x118>
		{
			if (file_record->extension[index] != ' ')
   1bc3c:	e0fffe17 	ldw	r3,-8(fp)
   1bc40:	e0bffc17 	ldw	r2,-16(fp)
   1bc44:	1885883a 	add	r2,r3,r2
   1bc48:	10800204 	addi	r2,r2,8
   1bc4c:	10800003 	ldbu	r2,0(r2)
   1bc50:	10803fcc 	andi	r2,r2,255
   1bc54:	10800820 	cmpeqi	r2,r2,32
   1bc58:	10000c1e 	bne	r2,zero,1bc8c <copy_file_record_name_to_string+0x10c>
			{
				file_name[flength] = file_record->extension[index];
   1bc5c:	e0bffd17 	ldw	r2,-12(fp)
   1bc60:	e0ffff17 	ldw	r3,-4(fp)
   1bc64:	1885883a 	add	r2,r3,r2
   1bc68:	e13ffe17 	ldw	r4,-8(fp)
   1bc6c:	e0fffc17 	ldw	r3,-16(fp)
   1bc70:	20c7883a 	add	r3,r4,r3
   1bc74:	18c00204 	addi	r3,r3,8
   1bc78:	18c00003 	ldbu	r3,0(r3)
   1bc7c:	10c00005 	stb	r3,0(r2)
				flength = flength + 1;
   1bc80:	e0bffd17 	ldw	r2,-12(fp)
   1bc84:	10800044 	addi	r2,r2,1
   1bc88:	e0bffd15 	stw	r2,-12(fp)
	}
	if (file_record->extension[0] != ' ')
	{
		file_name[flength] = '.';
		flength = flength + 1;
		for (index = 0; index < 3; index++)
   1bc8c:	e0bffc17 	ldw	r2,-16(fp)
   1bc90:	10800044 	addi	r2,r2,1
   1bc94:	e0bffc15 	stw	r2,-16(fp)
   1bc98:	e0bffc17 	ldw	r2,-16(fp)
   1bc9c:	108000d0 	cmplti	r2,r2,3
   1bca0:	103fe61e 	bne	r2,zero,1bc3c <__alt_mem_Flash_flash_data+0xf401bc3c>
				file_name[flength] = file_record->extension[index];
				flength = flength + 1;
			}
		}
	}
	file_name[flength] = 0;
   1bca4:	e0bffd17 	ldw	r2,-12(fp)
   1bca8:	e0ffff17 	ldw	r3,-4(fp)
   1bcac:	1885883a 	add	r2,r3,r2
   1bcb0:	10000005 	stb	zero,0(r2)
}
   1bcb4:	e037883a 	mov	sp,fp
   1bcb8:	df000017 	ldw	fp,0(sp)
   1bcbc:	dec00104 	addi	sp,sp,4
   1bcc0:	f800283a 	ret

0001bcc4 <alt_up_sd_card_open_dev>:
// Direct functions
///////////////////////////////////////////////////////////////////////////


alt_up_sd_card_dev* alt_up_sd_card_open_dev(const char* name)
{
   1bcc4:	defffc04 	addi	sp,sp,-16
   1bcc8:	dfc00315 	stw	ra,12(sp)
   1bccc:	df000215 	stw	fp,8(sp)
   1bcd0:	df000204 	addi	fp,sp,8
   1bcd4:	e13fff15 	stw	r4,-4(fp)
	// find the device from the device list 
	// (see altera_hal/HAL/inc/priv/alt_file.h 
	// and altera_hal/HAL/src/alt_find_dev.c 
	// for details)
	alt_up_sd_card_dev *dev = (alt_up_sd_card_dev *) alt_find_dev(name, &alt_dev_list);
   1bcd8:	e13fff17 	ldw	r4,-4(fp)
   1bcdc:	014000b4 	movhi	r5,2
   1bce0:	294c8d04 	addi	r5,r5,12852
   1bce4:	001fac00 	call	1fac0 <alt_find_dev>
   1bce8:	e0bffe15 	stw	r2,-8(fp)

	if (dev != NULL)
   1bcec:	e0bffe17 	ldw	r2,-8(fp)
   1bcf0:	10001e26 	beq	r2,zero,1bd6c <alt_up_sd_card_open_dev+0xa8>
	{
		aux_status_register = ((short int *) SD_CARD_AUX_STATUS(dev->base));
   1bcf4:	e0bffe17 	ldw	r2,-8(fp)
   1bcf8:	10800a17 	ldw	r2,40(r2)
   1bcfc:	10808d04 	addi	r2,r2,564
   1bd00:	d0a81215 	stw	r2,-24504(gp)
		status_register = ((int *) SD_CARD_STATUS(dev->base));
   1bd04:	e0bffe17 	ldw	r2,-8(fp)
   1bd08:	10800a17 	ldw	r2,40(r2)
   1bd0c:	10808904 	addi	r2,r2,548
   1bd10:	d0a81315 	stw	r2,-24500(gp)
		CSD_register_w0 = ((short int *) SD_CARD_CSD(dev->base, 0));
   1bd14:	e0bffe17 	ldw	r2,-8(fp)
   1bd18:	10800a17 	ldw	r2,40(r2)
   1bd1c:	10808404 	addi	r2,r2,528
   1bd20:	d0a81415 	stw	r2,-24496(gp)
		command_register = ((short int *) SD_CARD_COMMAND(dev->base));
   1bd24:	e0bffe17 	ldw	r2,-8(fp)
   1bd28:	10800a17 	ldw	r2,40(r2)
   1bd2c:	10808c04 	addi	r2,r2,560
   1bd30:	d0a81515 	stw	r2,-24492(gp)
		command_argument_register = ((int *) SD_CARD_ARGUMENT(dev->base));
   1bd34:	e0bffe17 	ldw	r2,-8(fp)
   1bd38:	10800a17 	ldw	r2,40(r2)
   1bd3c:	10808b04 	addi	r2,r2,556
   1bd40:	d0a81615 	stw	r2,-24488(gp)
		buffer_memory = (char *) SD_CARD_BUFFER(dev->base, 0);
   1bd44:	e0bffe17 	ldw	r2,-8(fp)
   1bd48:	10800a17 	ldw	r2,40(r2)
   1bd4c:	d0a81715 	stw	r2,-24484(gp)
		device_pointer = dev;
   1bd50:	e0bffe17 	ldw	r2,-8(fp)
   1bd54:	d0a81a15 	stw	r2,-24472(gp)
		initialized = false;
   1bd58:	d0281015 	stw	zero,-24512(gp)
		is_sd_card_formated_as_FAT16 = false;
   1bd5c:	d0281115 	stw	zero,-24508(gp)
		search_data.valid = false;
   1bd60:	008000f4 	movhi	r2,3
   1bd64:	10a15204 	addi	r2,r2,-31416
   1bd68:	10000415 	stw	zero,16(r2)
	}
	return dev;
   1bd6c:	e0bffe17 	ldw	r2,-8(fp)
}
   1bd70:	e037883a 	mov	sp,fp
   1bd74:	dfc00117 	ldw	ra,4(sp)
   1bd78:	df000017 	ldw	fp,0(sp)
   1bd7c:	dec00204 	addi	sp,sp,8
   1bd80:	f800283a 	ret

0001bd84 <alt_up_sd_card_is_Present>:


bool alt_up_sd_card_is_Present(void)
// Check if there is an SD Card insterted into the SD Card socket.
{
   1bd84:	defffd04 	addi	sp,sp,-12
   1bd88:	df000215 	stw	fp,8(sp)
   1bd8c:	df000204 	addi	fp,sp,8
    bool result = false;
   1bd90:	e03ffe15 	stw	zero,-8(fp)

    if ((device_pointer != NULL) && ((IORD_16DIRECT(aux_status_register,0) & 0x02) != 0))
   1bd94:	d0a81a17 	ldw	r2,-24472(gp)
   1bd98:	10000826 	beq	r2,zero,1bdbc <alt_up_sd_card_is_Present+0x38>
   1bd9c:	d0a81217 	ldw	r2,-24504(gp)
   1bda0:	1080002b 	ldhuio	r2,0(r2)
   1bda4:	10bfffcc 	andi	r2,r2,65535
   1bda8:	1080008c 	andi	r2,r2,2
   1bdac:	10000326 	beq	r2,zero,1bdbc <alt_up_sd_card_is_Present+0x38>
    {
        result = true;
   1bdb0:	00800044 	movi	r2,1
   1bdb4:	e0bffe15 	stw	r2,-8(fp)
   1bdb8:	00001e06 	br	1be34 <alt_up_sd_card_is_Present+0xb0>
    }
	else if (initialized == true)
   1bdbc:	d0a81017 	ldw	r2,-24512(gp)
   1bdc0:	10800058 	cmpnei	r2,r2,1
   1bdc4:	10001b1e 	bne	r2,zero,1be34 <alt_up_sd_card_is_Present+0xb0>
	{
		int index;

		initialized = false;
   1bdc8:	d0281015 	stw	zero,-24512(gp)
		search_data.valid = false;
   1bdcc:	008000f4 	movhi	r2,3
   1bdd0:	10a15204 	addi	r2,r2,-31416
   1bdd4:	10000415 	stw	zero,16(r2)
		is_sd_card_formated_as_FAT16 = false;
   1bdd8:	d0281115 	stw	zero,-24508(gp)

		for(index = 0; index < MAX_FILES_OPENED; index++)
   1bddc:	e03fff15 	stw	zero,-4(fp)
   1bde0:	00001106 	br	1be28 <alt_up_sd_card_is_Present+0xa4>
		{
			active_files[index].in_use = false;
   1bde4:	008000f4 	movhi	r2,3
   1bde8:	10a16c04 	addi	r2,r2,-31312
   1bdec:	e0ffff17 	ldw	r3,-4(fp)
   1bdf0:	180691ba 	slli	r3,r3,6
   1bdf4:	18c00f04 	addi	r3,r3,60
   1bdf8:	10c5883a 	add	r2,r2,r3
   1bdfc:	10000015 	stw	zero,0(r2)
			active_files[index].modified = false;
   1be00:	008000f4 	movhi	r2,3
   1be04:	10a16c04 	addi	r2,r2,-31312
   1be08:	e0ffff17 	ldw	r3,-4(fp)
   1be0c:	180691ba 	slli	r3,r3,6
   1be10:	18c00e04 	addi	r3,r3,56
   1be14:	10c5883a 	add	r2,r2,r3
   1be18:	10000015 	stw	zero,0(r2)

		initialized = false;
		search_data.valid = false;
		is_sd_card_formated_as_FAT16 = false;

		for(index = 0; index < MAX_FILES_OPENED; index++)
   1be1c:	e0bfff17 	ldw	r2,-4(fp)
   1be20:	10800044 	addi	r2,r2,1
   1be24:	e0bfff15 	stw	r2,-4(fp)
   1be28:	e0bfff17 	ldw	r2,-4(fp)
   1be2c:	10800510 	cmplti	r2,r2,20
   1be30:	103fec1e 	bne	r2,zero,1bde4 <__alt_mem_Flash_flash_data+0xf401bde4>
		{
			active_files[index].in_use = false;
			active_files[index].modified = false;
		}
	}
    return result;
   1be34:	e0bffe17 	ldw	r2,-8(fp)
}
   1be38:	e037883a 	mov	sp,fp
   1be3c:	df000017 	ldw	fp,0(sp)
   1be40:	dec00104 	addi	sp,sp,4
   1be44:	f800283a 	ret

0001be48 <alt_up_sd_card_is_FAT16>:
/* This function reads the SD card data in an effort to determine if the card is formated as a FAT16
 * volume. Please note that FAT12 has a similar format, but will not be supported by this driver.
 * If the card contains a FAT16 volume, the local data structures will be initialized to allow reading and writing
 * to the SD card as though it was a hard drive.
 */
{
   1be48:	defffd04 	addi	sp,sp,-12
   1be4c:	dfc00215 	stw	ra,8(sp)
   1be50:	df000115 	stw	fp,4(sp)
   1be54:	df000104 	addi	fp,sp,4
	bool result = false;
   1be58:	e03fff15 	stw	zero,-4(fp)

	if (alt_up_sd_card_is_Present())
   1be5c:	001bd840 	call	1bd84 <alt_up_sd_card_is_Present>
   1be60:	10000c26 	beq	r2,zero,1be94 <alt_up_sd_card_is_FAT16+0x4c>
	{
		// Check if an SD Card is in the SD Card slot.
		if (initialized == false)
   1be64:	d0a81017 	ldw	r2,-24512(gp)
   1be68:	1000071e 	bne	r2,zero,1be88 <alt_up_sd_card_is_FAT16+0x40>
		{
			// Now determine if the card is formatted as FAT 16.
			is_sd_card_formated_as_FAT16 = Look_for_FAT16();
   1be6c:	001a1180 	call	1a118 <Look_for_FAT16>
   1be70:	d0a81115 	stw	r2,-24508(gp)
			initialized = is_sd_card_formated_as_FAT16;
   1be74:	d0a81117 	ldw	r2,-24508(gp)
   1be78:	d0a81015 	stw	r2,-24512(gp)
			search_data.valid = false;
   1be7c:	008000f4 	movhi	r2,3
   1be80:	10a15204 	addi	r2,r2,-31416
   1be84:	10000415 	stw	zero,16(r2)
		}
		result = is_sd_card_formated_as_FAT16;
   1be88:	d0a81117 	ldw	r2,-24508(gp)
   1be8c:	e0bfff15 	stw	r2,-4(fp)
   1be90:	00000206 	br	1be9c <alt_up_sd_card_is_FAT16+0x54>
	}
	else
	{
		// If not then you may as well not open the device.
		initialized = false;
   1be94:	d0281015 	stw	zero,-24512(gp)
		is_sd_card_formated_as_FAT16 = false;
   1be98:	d0281115 	stw	zero,-24508(gp)
	}

	return result;
   1be9c:	e0bfff17 	ldw	r2,-4(fp)
}
   1bea0:	e037883a 	mov	sp,fp
   1bea4:	dfc00117 	ldw	ra,4(sp)
   1bea8:	df000017 	ldw	fp,0(sp)
   1beac:	dec00204 	addi	sp,sp,8
   1beb0:	f800283a 	ret

0001beb4 <alt_up_sd_card_find_first>:
 * "first/sub/." - look through a directory named "sub", that is located within the subdirectory named "first". "first" is located in the root directory.
 * Invalid examples include:
 * "/.", "/////." - this is not the root directory.
 * "/first/." - the first character may not be a '/'.
 */
{
   1beb4:	deffea04 	addi	sp,sp,-88
   1beb8:	dfc01515 	stw	ra,84(sp)
   1bebc:	df001415 	stw	fp,80(sp)
   1bec0:	df001404 	addi	fp,sp,80
   1bec4:	e13ffe15 	stw	r4,-8(fp)
   1bec8:	e17fff15 	stw	r5,-4(fp)
	short int result = 2;
   1becc:	00800084 	movi	r2,2
   1bed0:	e0bfec0d 	sth	r2,-80(fp)
	if ((alt_up_sd_card_is_Present()) && (is_sd_card_formated_as_FAT16))
   1bed4:	001bd840 	call	1bd84 <alt_up_sd_card_is_Present>
   1bed8:	10002426 	beq	r2,zero,1bf6c <alt_up_sd_card_find_first+0xb8>
   1bedc:	d0a81117 	ldw	r2,-24508(gp)
   1bee0:	10002226 	beq	r2,zero,1bf6c <alt_up_sd_card_find_first+0xb8>
	{
		int home_directory_cluster;
		t_file_record file_record;

		if (get_home_directory_cluster_for_file(directory_to_search_through, &home_directory_cluster, &file_record))
   1bee4:	e0ffed04 	addi	r3,fp,-76
   1bee8:	e0bfee04 	addi	r2,fp,-72
   1beec:	e13ffe17 	ldw	r4,-8(fp)
   1bef0:	180b883a 	mov	r5,r3
   1bef4:	100d883a 	mov	r6,r2
   1bef8:	001a8840 	call	1a884 <get_home_directory_cluster_for_file>
   1befc:	10001926 	beq	r2,zero,1bf64 <alt_up_sd_card_find_first+0xb0>
		{
			search_data.directory_root_cluster = home_directory_cluster;
   1bf00:	e0bfed17 	ldw	r2,-76(fp)
   1bf04:	1007883a 	mov	r3,r2
   1bf08:	008000f4 	movhi	r2,3
   1bf0c:	10a15204 	addi	r2,r2,-31416
   1bf10:	10c00015 	stw	r3,0(r2)
			search_data.current_cluster_index = home_directory_cluster;
   1bf14:	e0bfed17 	ldw	r2,-76(fp)
   1bf18:	1007883a 	mov	r3,r2
   1bf1c:	008000f4 	movhi	r2,3
   1bf20:	10a15204 	addi	r2,r2,-31416
   1bf24:	10c00115 	stw	r3,4(r2)
			search_data.current_sector_in_cluster = 0;
   1bf28:	008000f4 	movhi	r2,3
   1bf2c:	10a15204 	addi	r2,r2,-31416
   1bf30:	10000215 	stw	zero,8(r2)
			search_data.file_index_in_sector = -1;
   1bf34:	008000f4 	movhi	r2,3
   1bf38:	10a15204 	addi	r2,r2,-31416
   1bf3c:	00ffffc4 	movi	r3,-1
   1bf40:	10c0030d 	sth	r3,12(r2)
			search_data.valid = true;
   1bf44:	008000f4 	movhi	r2,3
   1bf48:	10a15204 	addi	r2,r2,-31416
   1bf4c:	00c00044 	movi	r3,1
   1bf50:	10c00415 	stw	r3,16(r2)
			result = alt_up_sd_card_find_next(file_name);
   1bf54:	e13fff17 	ldw	r4,-4(fp)
   1bf58:	001bf840 	call	1bf84 <alt_up_sd_card_find_next>
   1bf5c:	e0bfec0d 	sth	r2,-80(fp)
   1bf60:	00000206 	br	1bf6c <alt_up_sd_card_find_first+0xb8>
		}
		else
		{
			result = 1;
   1bf64:	00800044 	movi	r2,1
   1bf68:	e0bfec0d 	sth	r2,-80(fp)
		}
	}
	return result;
   1bf6c:	e0bfec0b 	ldhu	r2,-80(fp)
}
   1bf70:	e037883a 	mov	sp,fp
   1bf74:	dfc00117 	ldw	ra,4(sp)
   1bf78:	df000017 	ldw	fp,0(sp)
   1bf7c:	dec00204 	addi	sp,sp,8
   1bf80:	f800283a 	ret

0001bf84 <alt_up_sd_card_find_next>:
 *		-1 - end of directory.
 *		0 - success
 *		2 - No card or incorrect card format.
 *		3 - find_first has not been called successfully.
 */
{
   1bf84:	deffe404 	addi	sp,sp,-112
   1bf88:	dfc01b15 	stw	ra,108(sp)
   1bf8c:	df001a15 	stw	fp,104(sp)
   1bf90:	df001a04 	addi	fp,sp,104
   1bf94:	e13fff15 	stw	r4,-4(fp)
	short int result = 2;
   1bf98:	00800084 	movi	r2,2
   1bf9c:	e0bfe60d 	sth	r2,-104(fp)
	if ((alt_up_sd_card_is_Present()) && (is_sd_card_formated_as_FAT16))
   1bfa0:	001bd840 	call	1bd84 <alt_up_sd_card_is_Present>
   1bfa4:	1000dc26 	beq	r2,zero,1c318 <alt_up_sd_card_find_next+0x394>
   1bfa8:	d0a81117 	ldw	r2,-24508(gp)
   1bfac:	1000da26 	beq	r2,zero,1c318 <alt_up_sd_card_find_next+0x394>
	{
		if (search_data.valid)
   1bfb0:	008000f4 	movhi	r2,3
   1bfb4:	10a15204 	addi	r2,r2,-31416
   1bfb8:	10800417 	ldw	r2,16(r2)
   1bfbc:	1000d426 	beq	r2,zero,1c310 <alt_up_sd_card_find_next+0x38c>
		{
			t_file_record file_record;
			int cluster = search_data.current_cluster_index;
   1bfc0:	008000f4 	movhi	r2,3
   1bfc4:	10a15204 	addi	r2,r2,-31416
   1bfc8:	10800117 	ldw	r2,4(r2)
   1bfcc:	e0bfe715 	stw	r2,-100(fp)

			if (cluster == 0)
   1bfd0:	e0bfe717 	ldw	r2,-100(fp)
   1bfd4:	1000551e 	bne	r2,zero,1c12c <alt_up_sd_card_find_next+0x1a8>
			{
				// Searching through the root directory
				int max_root_dir_sectors = ((32*boot_sector_data.max_number_of_dir_entires) / boot_sector_data.sector_size_in_bytes);
   1bfd8:	008000f4 	movhi	r2,3
   1bfdc:	10a15704 	addi	r2,r2,-31396
   1bfe0:	1080050b 	ldhu	r2,20(r2)
   1bfe4:	10bfffcc 	andi	r2,r2,65535
   1bfe8:	1006917a 	slli	r3,r2,5
   1bfec:	008000f4 	movhi	r2,3
   1bff0:	10a15704 	addi	r2,r2,-31396
   1bff4:	1080030b 	ldhu	r2,12(r2)
   1bff8:	10bfffcc 	andi	r2,r2,65535
   1bffc:	1885283a 	div	r2,r3,r2
   1c000:	e0bfec15 	stw	r2,-80(fp)
				int sector_index = search_data.current_sector_in_cluster;
   1c004:	008000f4 	movhi	r2,3
   1c008:	10a15204 	addi	r2,r2,-31416
   1c00c:	10800217 	ldw	r2,8(r2)
   1c010:	e0bfe815 	stw	r2,-96(fp)
				int file_counter = search_data.file_index_in_sector+1;
   1c014:	008000f4 	movhi	r2,3
   1c018:	10a15204 	addi	r2,r2,-31416
   1c01c:	1080030b 	ldhu	r2,12(r2)
   1c020:	10bfffcc 	andi	r2,r2,65535
   1c024:	10a0001c 	xori	r2,r2,32768
   1c028:	10a00004 	addi	r2,r2,-32768
   1c02c:	10800044 	addi	r2,r2,1
   1c030:	e0bfe915 	stw	r2,-92(fp)
    
				for (; sector_index < max_root_dir_sectors; sector_index++)
   1c034:	00003706 	br	1c114 <alt_up_sd_card_find_next+0x190>
				{
					if (Read_Sector_Data(   sector_index + boot_sector_data.root_directory_sector_offset,
   1c038:	008000f4 	movhi	r2,3
   1c03c:	10a15704 	addi	r2,r2,-31396
   1c040:	10c01317 	ldw	r3,76(r2)
   1c044:	e0bfe817 	ldw	r2,-96(fp)
   1c048:	1885883a 	add	r2,r3,r2
   1c04c:	1007883a 	mov	r3,r2
   1c050:	d0a81817 	ldw	r2,-24480(gp)
   1c054:	1809883a 	mov	r4,r3
   1c058:	100b883a 	mov	r5,r2
   1c05c:	00191700 	call	19170 <Read_Sector_Data>
   1c060:	10002826 	beq	r2,zero,1c104 <alt_up_sd_card_find_next+0x180>
											fat_partition_offset_in_512_byte_sectors))
					{
						for (; file_counter < 16; file_counter++)
   1c064:	00002206 	br	1c0f0 <alt_up_sd_card_find_next+0x16c>
						{
							if (Read_File_Record_At_Offset(file_counter*32, &file_record, 0, sector_index))
   1c068:	e0bfe917 	ldw	r2,-92(fp)
   1c06c:	1008917a 	slli	r4,r2,5
   1c070:	e0bfe817 	ldw	r2,-96(fp)
   1c074:	e0ffef04 	addi	r3,fp,-68
   1c078:	180b883a 	mov	r5,r3
   1c07c:	000d883a 	mov	r6,zero
   1c080:	100f883a 	mov	r7,r2
   1c084:	00195880 	call	19588 <Read_File_Record_At_Offset>
   1c088:	10001626 	beq	r2,zero,1c0e4 <alt_up_sd_card_find_next+0x160>
							{
								if ((file_record.name[0] != 0) && (file_record.name[0] != 0xe5))
   1c08c:	e0bfef03 	ldbu	r2,-68(fp)
   1c090:	10803fcc 	andi	r2,r2,255
   1c094:	10001326 	beq	r2,zero,1c0e4 <alt_up_sd_card_find_next+0x160>
   1c098:	e0bfef03 	ldbu	r2,-68(fp)
   1c09c:	10803fcc 	andi	r2,r2,255
   1c0a0:	10803960 	cmpeqi	r2,r2,229
   1c0a4:	10000f1e 	bne	r2,zero,1c0e4 <alt_up_sd_card_find_next+0x160>
								{
									/* Update search structure. */
									search_data.file_index_in_sector = file_counter;
   1c0a8:	e0bfe917 	ldw	r2,-92(fp)
   1c0ac:	1007883a 	mov	r3,r2
   1c0b0:	008000f4 	movhi	r2,3
   1c0b4:	10a15204 	addi	r2,r2,-31416
   1c0b8:	10c0030d 	sth	r3,12(r2)
									search_data.current_sector_in_cluster = sector_index;
   1c0bc:	e0ffe817 	ldw	r3,-96(fp)
   1c0c0:	008000f4 	movhi	r2,3
   1c0c4:	10a15204 	addi	r2,r2,-31416
   1c0c8:	10c00215 	stw	r3,8(r2)

									/* Copy file name.*/
									copy_file_record_name_to_string(&file_record, file_name);
   1c0cc:	e0bfef04 	addi	r2,fp,-68
   1c0d0:	1009883a 	mov	r4,r2
   1c0d4:	e17fff17 	ldw	r5,-4(fp)
   1c0d8:	001bb800 	call	1bb80 <copy_file_record_name_to_string>
									return 0;
   1c0dc:	0005883a 	mov	r2,zero
   1c0e0:	00008e06 	br	1c31c <alt_up_sd_card_find_next+0x398>
				for (; sector_index < max_root_dir_sectors; sector_index++)
				{
					if (Read_Sector_Data(   sector_index + boot_sector_data.root_directory_sector_offset,
											fat_partition_offset_in_512_byte_sectors))
					{
						for (; file_counter < 16; file_counter++)
   1c0e4:	e0bfe917 	ldw	r2,-92(fp)
   1c0e8:	10800044 	addi	r2,r2,1
   1c0ec:	e0bfe915 	stw	r2,-92(fp)
   1c0f0:	e0bfe917 	ldw	r2,-92(fp)
   1c0f4:	10800410 	cmplti	r2,r2,16
   1c0f8:	103fdb1e 	bne	r2,zero,1c068 <__alt_mem_Flash_flash_data+0xf401c068>
									copy_file_record_name_to_string(&file_record, file_name);
									return 0;
								}
							}
						}
						file_counter = 0;
   1c0fc:	e03fe915 	stw	zero,-92(fp)
   1c100:	00000106 	br	1c108 <alt_up_sd_card_find_next+0x184>
					}
					else
					{
						break;
   1c104:	00000606 	br	1c120 <alt_up_sd_card_find_next+0x19c>
				// Searching through the root directory
				int max_root_dir_sectors = ((32*boot_sector_data.max_number_of_dir_entires) / boot_sector_data.sector_size_in_bytes);
				int sector_index = search_data.current_sector_in_cluster;
				int file_counter = search_data.file_index_in_sector+1;
    
				for (; sector_index < max_root_dir_sectors; sector_index++)
   1c108:	e0bfe817 	ldw	r2,-96(fp)
   1c10c:	10800044 	addi	r2,r2,1
   1c110:	e0bfe815 	stw	r2,-96(fp)
   1c114:	e0ffe817 	ldw	r3,-96(fp)
   1c118:	e0bfec17 	ldw	r2,-80(fp)
   1c11c:	18bfc616 	blt	r3,r2,1c038 <__alt_mem_Flash_flash_data+0xf401c038>
					else
					{
						break;
					}
				}
				result = -1;
   1c120:	00bfffc4 	movi	r2,-1
   1c124:	e0bfe60d 	sth	r2,-104(fp)
   1c128:	00007806 	br	1c30c <alt_up_sd_card_find_next+0x388>
			}
			else
			{
				int file_counter = search_data.file_index_in_sector+1;
   1c12c:	008000f4 	movhi	r2,3
   1c130:	10a15204 	addi	r2,r2,-31416
   1c134:	1080030b 	ldhu	r2,12(r2)
   1c138:	10bfffcc 	andi	r2,r2,65535
   1c13c:	10a0001c 	xori	r2,r2,32768
   1c140:	10a00004 	addi	r2,r2,-32768
   1c144:	10800044 	addi	r2,r2,1
   1c148:	e0bfea15 	stw	r2,-88(fp)
				do 
				{
					int start_sector = ( cluster - 2 ) * ( boot_sector_data.sectors_per_cluster ) + boot_sector_data.data_sector_offset;
   1c14c:	e0bfe717 	ldw	r2,-100(fp)
   1c150:	10ffff84 	addi	r3,r2,-2
   1c154:	008000f4 	movhi	r2,3
   1c158:	10a15704 	addi	r2,r2,-31396
   1c15c:	10800383 	ldbu	r2,14(r2)
   1c160:	10803fcc 	andi	r2,r2,255
   1c164:	1885383a 	mul	r2,r3,r2
   1c168:	1007883a 	mov	r3,r2
   1c16c:	008000f4 	movhi	r2,3
   1c170:	10a15704 	addi	r2,r2,-31396
   1c174:	10801417 	ldw	r2,80(r2)
   1c178:	1885883a 	add	r2,r3,r2
   1c17c:	e0bfed15 	stw	r2,-76(fp)
					int sector_index = search_data.current_sector_in_cluster;
   1c180:	008000f4 	movhi	r2,3
   1c184:	10a15204 	addi	r2,r2,-31416
   1c188:	10800217 	ldw	r2,8(r2)
   1c18c:	e0bfeb15 	stw	r2,-84(fp)
			        
					for (; sector_index < boot_sector_data.sectors_per_cluster; sector_index++)
   1c190:	00003806 	br	1c274 <alt_up_sd_card_find_next+0x2f0>
					{
						if (Read_Sector_Data(sector_index + start_sector, fat_partition_offset_in_512_byte_sectors))
   1c194:	e0ffeb17 	ldw	r3,-84(fp)
   1c198:	e0bfed17 	ldw	r2,-76(fp)
   1c19c:	1887883a 	add	r3,r3,r2
   1c1a0:	d0a81817 	ldw	r2,-24480(gp)
   1c1a4:	1809883a 	mov	r4,r3
   1c1a8:	100b883a 	mov	r5,r2
   1c1ac:	00191700 	call	19170 <Read_Sector_Data>
   1c1b0:	10002c26 	beq	r2,zero,1c264 <alt_up_sd_card_find_next+0x2e0>
						{        
							for (; file_counter < 16; file_counter++)
   1c1b4:	00002606 	br	1c250 <alt_up_sd_card_find_next+0x2cc>
							{
								if (Read_File_Record_At_Offset(file_counter*32, &file_record, cluster, sector_index))
   1c1b8:	e0bfea17 	ldw	r2,-88(fp)
   1c1bc:	1008917a 	slli	r4,r2,5
   1c1c0:	e0ffe717 	ldw	r3,-100(fp)
   1c1c4:	e0bfeb17 	ldw	r2,-84(fp)
   1c1c8:	e17fef04 	addi	r5,fp,-68
   1c1cc:	180d883a 	mov	r6,r3
   1c1d0:	100f883a 	mov	r7,r2
   1c1d4:	00195880 	call	19588 <Read_File_Record_At_Offset>
   1c1d8:	10001a26 	beq	r2,zero,1c244 <alt_up_sd_card_find_next+0x2c0>
								{
									if ((file_record.name[0] != 0) && (file_record.name[0] != 0xe5))
   1c1dc:	e0bfef03 	ldbu	r2,-68(fp)
   1c1e0:	10803fcc 	andi	r2,r2,255
   1c1e4:	10001726 	beq	r2,zero,1c244 <alt_up_sd_card_find_next+0x2c0>
   1c1e8:	e0bfef03 	ldbu	r2,-68(fp)
   1c1ec:	10803fcc 	andi	r2,r2,255
   1c1f0:	10803960 	cmpeqi	r2,r2,229
   1c1f4:	1000131e 	bne	r2,zero,1c244 <alt_up_sd_card_find_next+0x2c0>
									{
										/* Update search structure. */
										search_data.current_cluster_index = cluster;
   1c1f8:	e0ffe717 	ldw	r3,-100(fp)
   1c1fc:	008000f4 	movhi	r2,3
   1c200:	10a15204 	addi	r2,r2,-31416
   1c204:	10c00115 	stw	r3,4(r2)
										search_data.file_index_in_sector = file_counter;
   1c208:	e0bfea17 	ldw	r2,-88(fp)
   1c20c:	1007883a 	mov	r3,r2
   1c210:	008000f4 	movhi	r2,3
   1c214:	10a15204 	addi	r2,r2,-31416
   1c218:	10c0030d 	sth	r3,12(r2)
										search_data.current_sector_in_cluster = sector_index;
   1c21c:	e0ffeb17 	ldw	r3,-84(fp)
   1c220:	008000f4 	movhi	r2,3
   1c224:	10a15204 	addi	r2,r2,-31416
   1c228:	10c00215 	stw	r3,8(r2)

										/* Copy file name.*/
										copy_file_record_name_to_string(&file_record, file_name);
   1c22c:	e0bfef04 	addi	r2,fp,-68
   1c230:	1009883a 	mov	r4,r2
   1c234:	e17fff17 	ldw	r5,-4(fp)
   1c238:	001bb800 	call	1bb80 <copy_file_record_name_to_string>
										return 0;
   1c23c:	0005883a 	mov	r2,zero
   1c240:	00003606 	br	1c31c <alt_up_sd_card_find_next+0x398>
			        
					for (; sector_index < boot_sector_data.sectors_per_cluster; sector_index++)
					{
						if (Read_Sector_Data(sector_index + start_sector, fat_partition_offset_in_512_byte_sectors))
						{        
							for (; file_counter < 16; file_counter++)
   1c244:	e0bfea17 	ldw	r2,-88(fp)
   1c248:	10800044 	addi	r2,r2,1
   1c24c:	e0bfea15 	stw	r2,-88(fp)
   1c250:	e0bfea17 	ldw	r2,-88(fp)
   1c254:	10800410 	cmplti	r2,r2,16
   1c258:	103fd71e 	bne	r2,zero,1c1b8 <__alt_mem_Flash_flash_data+0xf401c1b8>
										copy_file_record_name_to_string(&file_record, file_name);
										return 0;
									}
								}
							}
							file_counter = 0;
   1c25c:	e03fea15 	stw	zero,-88(fp)
   1c260:	00000106 	br	1c268 <alt_up_sd_card_find_next+0x2e4>
						}
						else
						{
							break;
   1c264:	00000906 	br	1c28c <alt_up_sd_card_find_next+0x308>
				do 
				{
					int start_sector = ( cluster - 2 ) * ( boot_sector_data.sectors_per_cluster ) + boot_sector_data.data_sector_offset;
					int sector_index = search_data.current_sector_in_cluster;
			        
					for (; sector_index < boot_sector_data.sectors_per_cluster; sector_index++)
   1c268:	e0bfeb17 	ldw	r2,-84(fp)
   1c26c:	10800044 	addi	r2,r2,1
   1c270:	e0bfeb15 	stw	r2,-84(fp)
   1c274:	008000f4 	movhi	r2,3
   1c278:	10a15704 	addi	r2,r2,-31396
   1c27c:	10800383 	ldbu	r2,14(r2)
   1c280:	10803fcc 	andi	r2,r2,255
   1c284:	e0ffeb17 	ldw	r3,-84(fp)
   1c288:	18bfc216 	blt	r3,r2,1c194 <__alt_mem_Flash_flash_data+0xf401c194>
							break;
						}
					}
					// If this is the end of the cluster and the file has not been found, then see if there is another cluster
					// that holds data for the current directory.
					if (sector_index >= boot_sector_data.sectors_per_cluster)
   1c28c:	008000f4 	movhi	r2,3
   1c290:	10a15704 	addi	r2,r2,-31396
   1c294:	10800383 	ldbu	r2,14(r2)
   1c298:	10803fcc 	andi	r2,r2,255
   1c29c:	e0ffeb17 	ldw	r3,-84(fp)
   1c2a0:	18801716 	blt	r3,r2,1c300 <alt_up_sd_card_find_next+0x37c>
					{
						unsigned short int new_cluster;

						if (get_cluster_flag(cluster, &new_cluster))
   1c2a4:	e0ffe717 	ldw	r3,-100(fp)
   1c2a8:	e0bfee04 	addi	r2,fp,-72
   1c2ac:	1809883a 	mov	r4,r3
   1c2b0:	100b883a 	mov	r5,r2
   1c2b4:	00192480 	call	19248 <get_cluster_flag>
   1c2b8:	10000f26 	beq	r2,zero,1c2f8 <alt_up_sd_card_find_next+0x374>
						{
							if ((new_cluster & 0x0000fff8) == 0x0000fff8)
   1c2bc:	e0bfee0b 	ldhu	r2,-72(fp)
   1c2c0:	10bfffcc 	andi	r2,r2,65535
   1c2c4:	10fffe0c 	andi	r3,r2,65528
   1c2c8:	00bffe14 	movui	r2,65528
   1c2cc:	1880051e 	bne	r3,r2,1c2e4 <alt_up_sd_card_find_next+0x360>
							{
								result = -1;
   1c2d0:	00bfffc4 	movi	r2,-1
   1c2d4:	e0bfe60d 	sth	r2,-104(fp)
								search_data.valid = false;
   1c2d8:	008000f4 	movhi	r2,3
   1c2dc:	10a15204 	addi	r2,r2,-31416
   1c2e0:	10000415 	stw	zero,16(r2)
							}
							cluster = ((new_cluster) & 0x0000fff8);
   1c2e4:	e0bfee0b 	ldhu	r2,-72(fp)
   1c2e8:	10bfffcc 	andi	r2,r2,65535
   1c2ec:	10bffe0c 	andi	r2,r2,65528
   1c2f0:	e0bfe715 	stw	r2,-100(fp)
   1c2f4:	00000206 	br	1c300 <alt_up_sd_card_find_next+0x37c>
						}
						else
						{
							// Error encountered.                 
							result = -1;
   1c2f8:	00bfffc4 	movi	r2,-1
   1c2fc:	e0bfe60d 	sth	r2,-104(fp)
						}
					}              
				} while (cluster < 0x0000fff8);
   1c300:	e0bfe717 	ldw	r2,-100(fp)
   1c304:	00fffdd4 	movui	r3,65527
   1c308:	18bf900e 	bge	r3,r2,1c14c <__alt_mem_Flash_flash_data+0xf401c14c>
   1c30c:	00000206 	br	1c318 <alt_up_sd_card_find_next+0x394>
			}
		}
		else
		{
			// Call Find_First first.
			result = 3;
   1c310:	008000c4 	movi	r2,3
   1c314:	e0bfe60d 	sth	r2,-104(fp)
		}
	}
	return result;
   1c318:	e0bfe60b 	ldhu	r2,-104(fp)
}
   1c31c:	e037883a 	mov	sp,fp
   1c320:	dfc00117 	ldw	ra,4(sp)
   1c324:	df000017 	ldw	fp,0(sp)
   1c328:	dec00204 	addi	sp,sp,8
   1c32c:	f800283a 	ret

0001c330 <alt_up_sd_card_fopen>:
 *      create - a flag set to true to create a file if it does not already exist
 * Output:
 *      An index to the file record assigned to the specified file. -1 is returned if the file could not be opened.
 *		Return -2 if the specified file has already been opened previously.
 */
{
   1c330:	deffe904 	addi	sp,sp,-92
   1c334:	dfc01615 	stw	ra,88(sp)
   1c338:	df001515 	stw	fp,84(sp)
   1c33c:	df001504 	addi	fp,sp,84
   1c340:	e13ffe15 	stw	r4,-8(fp)
   1c344:	e17fff15 	stw	r5,-4(fp)
	short int file_record_index = -1;
   1c348:	00bfffc4 	movi	r2,-1
   1c34c:	e0bfeb0d 	sth	r2,-84(fp)

	if ((alt_up_sd_card_is_Present()) && (is_sd_card_formated_as_FAT16))
   1c350:	001bd840 	call	1bd84 <alt_up_sd_card_is_Present>
   1c354:	1000d126 	beq	r2,zero,1c69c <alt_up_sd_card_fopen+0x36c>
   1c358:	d0a81117 	ldw	r2,-24508(gp)
   1c35c:	1000cf26 	beq	r2,zero,1c69c <alt_up_sd_card_fopen+0x36c>
	{
        unsigned int home_directory_cluster = 0;
   1c360:	e03fed15 	stw	zero,-76(fp)
         * Rules:
         *  - no spaces
         *  - at most 12 chatacters per name, with a period in 9th position.
         *  - a / or a \ every at most 12 characters.
         */
        filename_to_upper_case(name);
   1c364:	e13ffe17 	ldw	r4,-8(fp)
   1c368:	001a2040 	call	1a204 <filename_to_upper_case>
        if (check_file_name_for_FAT16_compliance(name))
   1c36c:	e13ffe17 	ldw	r4,-8(fp)
   1c370:	001a2c40 	call	1a2c4 <check_file_name_for_FAT16_compliance>
   1c374:	1000c926 	beq	r2,zero,1c69c <alt_up_sd_card_fopen+0x36c>
        {
			int index;

            /* Get home directory cluster location for the specified file. 0 means root directory. */
            if (!get_home_directory_cluster_for_file(name, (int *) &home_directory_cluster, &home_dir))
   1c378:	e0ffed04 	addi	r3,fp,-76
   1c37c:	e0bfee04 	addi	r2,fp,-72
   1c380:	e13ffe17 	ldw	r4,-8(fp)
   1c384:	180b883a 	mov	r5,r3
   1c388:	100d883a 	mov	r6,r2
   1c38c:	001a8840 	call	1a884 <get_home_directory_cluster_for_file>
   1c390:	1000021e 	bne	r2,zero,1c39c <alt_up_sd_card_fopen+0x6c>
            {
                return file_record_index;
   1c394:	e0bfeb0b 	ldhu	r2,-84(fp)
   1c398:	0000c106 	br	1c6a0 <alt_up_sd_card_fopen+0x370>
            }
            
    		/* Find a free file slot to store file specs in. */
    		for (index = 0; index < MAX_FILES_OPENED; index++)
   1c39c:	e03fec15 	stw	zero,-80(fp)
   1c3a0:	00000e06 	br	1c3dc <alt_up_sd_card_fopen+0xac>
    		{
    			if (active_files[index].in_use == false)
   1c3a4:	008000f4 	movhi	r2,3
   1c3a8:	10a16c04 	addi	r2,r2,-31312
   1c3ac:	e0ffec17 	ldw	r3,-80(fp)
   1c3b0:	180691ba 	slli	r3,r3,6
   1c3b4:	18c00f04 	addi	r3,r3,60
   1c3b8:	10c5883a 	add	r2,r2,r3
   1c3bc:	10800017 	ldw	r2,0(r2)
   1c3c0:	1000031e 	bne	r2,zero,1c3d0 <alt_up_sd_card_fopen+0xa0>
    			{
    				file_record_index = index;
   1c3c4:	e0bfec17 	ldw	r2,-80(fp)
   1c3c8:	e0bfeb0d 	sth	r2,-84(fp)
    				break;
   1c3cc:	00000606 	br	1c3e8 <alt_up_sd_card_fopen+0xb8>
            {
                return file_record_index;
            }
            
    		/* Find a free file slot to store file specs in. */
    		for (index = 0; index < MAX_FILES_OPENED; index++)
   1c3d0:	e0bfec17 	ldw	r2,-80(fp)
   1c3d4:	10800044 	addi	r2,r2,1
   1c3d8:	e0bfec15 	stw	r2,-80(fp)
   1c3dc:	e0bfec17 	ldw	r2,-80(fp)
   1c3e0:	10800510 	cmplti	r2,r2,20
   1c3e4:	103fef1e 	bne	r2,zero,1c3a4 <__alt_mem_Flash_flash_data+0xf401c3a4>
    			{
    				file_record_index = index;
    				break;
    			}
    		}
    		if (file_record_index >= 0)
   1c3e8:	e0bfeb0f 	ldh	r2,-84(fp)
   1c3ec:	1000ab16 	blt	r2,zero,1c69c <alt_up_sd_card_fopen+0x36c>
    		{
    			/* If file record is found, then look for the specified file. If the create flag is set to true 
    			 * and the file is not found, then it should be created in the current directory. 
    			 */
                
                if (find_file_in_directory(home_directory_cluster, name, &(active_files[file_record_index])))
   1c3f0:	e0bfed17 	ldw	r2,-76(fp)
   1c3f4:	1009883a 	mov	r4,r2
   1c3f8:	e0bfeb0f 	ldh	r2,-84(fp)
   1c3fc:	100691ba 	slli	r3,r2,6
   1c400:	008000f4 	movhi	r2,3
   1c404:	10a16c04 	addi	r2,r2,-31312
   1c408:	1885883a 	add	r2,r3,r2
   1c40c:	e17ffe17 	ldw	r5,-8(fp)
   1c410:	100d883a 	mov	r6,r2
   1c414:	001adb00 	call	1adb0 <find_file_in_directory>
   1c418:	10007c26 	beq	r2,zero,1c60c <alt_up_sd_card_fopen+0x2dc>
                {
                    if (create)
   1c41c:	e0bfff17 	ldw	r2,-4(fp)
   1c420:	10000226 	beq	r2,zero,1c42c <alt_up_sd_card_fopen+0xfc>
                    {
                        /* Do not allow overwriting existing files for now. */
                        return -1;
   1c424:	00bfffc4 	movi	r2,-1
   1c428:	00009d06 	br	1c6a0 <alt_up_sd_card_fopen+0x370>
                    }
                    active_files[file_record_index].current_cluster_index = active_files[file_record_index].start_cluster_index;
   1c42c:	e13feb0f 	ldh	r4,-84(fp)
   1c430:	e0ffeb0f 	ldh	r3,-84(fp)
   1c434:	008000f4 	movhi	r2,3
   1c438:	10a16c04 	addi	r2,r2,-31312
   1c43c:	180691ba 	slli	r3,r3,6
   1c440:	18c00504 	addi	r3,r3,20
   1c444:	10c5883a 	add	r2,r2,r3
   1c448:	1080008b 	ldhu	r2,2(r2)
   1c44c:	10ffffcc 	andi	r3,r2,65535
   1c450:	008000f4 	movhi	r2,3
   1c454:	10a16c04 	addi	r2,r2,-31312
   1c458:	200891ba 	slli	r4,r4,6
   1c45c:	21000704 	addi	r4,r4,28
   1c460:	1105883a 	add	r2,r2,r4
   1c464:	10c00015 	stw	r3,0(r2)
                    active_files[file_record_index].current_sector_in_cluster = 0;
   1c468:	e0ffeb0f 	ldh	r3,-84(fp)
   1c46c:	008000f4 	movhi	r2,3
   1c470:	10a16c04 	addi	r2,r2,-31312
   1c474:	180691ba 	slli	r3,r3,6
   1c478:	18c00804 	addi	r3,r3,32
   1c47c:	10c5883a 	add	r2,r2,r3
   1c480:	10000015 	stw	zero,0(r2)
                    active_files[file_record_index].current_byte_position = 0;
   1c484:	e0ffeb0f 	ldh	r3,-84(fp)
   1c488:	008000f4 	movhi	r2,3
   1c48c:	10a16c04 	addi	r2,r2,-31312
   1c490:	180691ba 	slli	r3,r3,6
   1c494:	18c00904 	addi	r3,r3,36
   1c498:	10c5883a 	add	r2,r2,r3
   1c49c:	10000015 	stw	zero,0(r2)
                    active_files[file_record_index].in_use = true;
   1c4a0:	e0ffeb0f 	ldh	r3,-84(fp)
   1c4a4:	008000f4 	movhi	r2,3
   1c4a8:	10a16c04 	addi	r2,r2,-31312
   1c4ac:	180691ba 	slli	r3,r3,6
   1c4b0:	18c00f04 	addi	r3,r3,60
   1c4b4:	10c5883a 	add	r2,r2,r3
   1c4b8:	00c00044 	movi	r3,1
   1c4bc:	10c00015 	stw	r3,0(r2)
    				active_files[file_record_index].modified = false;
   1c4c0:	e0ffeb0f 	ldh	r3,-84(fp)
   1c4c4:	008000f4 	movhi	r2,3
   1c4c8:	10a16c04 	addi	r2,r2,-31312
   1c4cc:	180691ba 	slli	r3,r3,6
   1c4d0:	18c00e04 	addi	r3,r3,56
   1c4d4:	10c5883a 	add	r2,r2,r3
   1c4d8:	10000015 	stw	zero,0(r2)

					/* Check if the file has already been opened. */
					for (index = 0; index < MAX_FILES_OPENED; index++)
   1c4dc:	e03fec15 	stw	zero,-80(fp)
   1c4e0:	00004606 	br	1c5fc <alt_up_sd_card_fopen+0x2cc>
					{
						if ((file_record_index != index) && (active_files[index].in_use == true))
   1c4e4:	e0ffeb0f 	ldh	r3,-84(fp)
   1c4e8:	e0bfec17 	ldw	r2,-80(fp)
   1c4ec:	18804026 	beq	r3,r2,1c5f0 <alt_up_sd_card_fopen+0x2c0>
   1c4f0:	008000f4 	movhi	r2,3
   1c4f4:	10a16c04 	addi	r2,r2,-31312
   1c4f8:	e0ffec17 	ldw	r3,-80(fp)
   1c4fc:	180691ba 	slli	r3,r3,6
   1c500:	18c00f04 	addi	r3,r3,60
   1c504:	10c5883a 	add	r2,r2,r3
   1c508:	10800017 	ldw	r2,0(r2)
   1c50c:	10800058 	cmpnei	r2,r2,1
   1c510:	1000371e 	bne	r2,zero,1c5f0 <alt_up_sd_card_fopen+0x2c0>
						{
							if ((active_files[file_record_index].file_record_cluster == active_files[index].file_record_cluster) &&
   1c514:	e0ffeb0f 	ldh	r3,-84(fp)
   1c518:	008000f4 	movhi	r2,3
   1c51c:	10a16c04 	addi	r2,r2,-31312
   1c520:	180691ba 	slli	r3,r3,6
   1c524:	18c00a04 	addi	r3,r3,40
   1c528:	10c5883a 	add	r2,r2,r3
   1c52c:	10c00017 	ldw	r3,0(r2)
   1c530:	008000f4 	movhi	r2,3
   1c534:	10a16c04 	addi	r2,r2,-31312
   1c538:	e13fec17 	ldw	r4,-80(fp)
   1c53c:	200891ba 	slli	r4,r4,6
   1c540:	21000a04 	addi	r4,r4,40
   1c544:	1105883a 	add	r2,r2,r4
   1c548:	10800017 	ldw	r2,0(r2)
   1c54c:	1880281e 	bne	r3,r2,1c5f0 <alt_up_sd_card_fopen+0x2c0>
								(active_files[file_record_index].file_record_sector_in_cluster == active_files[index].file_record_sector_in_cluster) &&
   1c550:	e0ffeb0f 	ldh	r3,-84(fp)
   1c554:	008000f4 	movhi	r2,3
   1c558:	10a16c04 	addi	r2,r2,-31312
   1c55c:	180691ba 	slli	r3,r3,6
   1c560:	18c00b04 	addi	r3,r3,44
   1c564:	10c5883a 	add	r2,r2,r3
   1c568:	10c00017 	ldw	r3,0(r2)
   1c56c:	008000f4 	movhi	r2,3
   1c570:	10a16c04 	addi	r2,r2,-31312
   1c574:	e13fec17 	ldw	r4,-80(fp)
   1c578:	200891ba 	slli	r4,r4,6
   1c57c:	21000b04 	addi	r4,r4,44
   1c580:	1105883a 	add	r2,r2,r4
   1c584:	10800017 	ldw	r2,0(r2)
					/* Check if the file has already been opened. */
					for (index = 0; index < MAX_FILES_OPENED; index++)
					{
						if ((file_record_index != index) && (active_files[index].in_use == true))
						{
							if ((active_files[file_record_index].file_record_cluster == active_files[index].file_record_cluster) &&
   1c588:	1880191e 	bne	r3,r2,1c5f0 <alt_up_sd_card_fopen+0x2c0>
								(active_files[file_record_index].file_record_sector_in_cluster == active_files[index].file_record_sector_in_cluster) &&
								(active_files[file_record_index].file_record_offset == active_files[index].file_record_offset))
   1c58c:	e0ffeb0f 	ldh	r3,-84(fp)
   1c590:	008000f4 	movhi	r2,3
   1c594:	10a16c04 	addi	r2,r2,-31312
   1c598:	180691ba 	slli	r3,r3,6
   1c59c:	18c00c04 	addi	r3,r3,48
   1c5a0:	10c5883a 	add	r2,r2,r3
   1c5a4:	1100000b 	ldhu	r4,0(r2)
   1c5a8:	008000f4 	movhi	r2,3
   1c5ac:	10a16c04 	addi	r2,r2,-31312
   1c5b0:	e0ffec17 	ldw	r3,-80(fp)
   1c5b4:	180691ba 	slli	r3,r3,6
   1c5b8:	18c00c04 	addi	r3,r3,48
   1c5bc:	10c5883a 	add	r2,r2,r3
   1c5c0:	1080000b 	ldhu	r2,0(r2)
					for (index = 0; index < MAX_FILES_OPENED; index++)
					{
						if ((file_record_index != index) && (active_files[index].in_use == true))
						{
							if ((active_files[file_record_index].file_record_cluster == active_files[index].file_record_cluster) &&
								(active_files[file_record_index].file_record_sector_in_cluster == active_files[index].file_record_sector_in_cluster) &&
   1c5c4:	20ffffcc 	andi	r3,r4,65535
   1c5c8:	18e0001c 	xori	r3,r3,32768
   1c5cc:	18e00004 	addi	r3,r3,-32768
   1c5d0:	10bfffcc 	andi	r2,r2,65535
   1c5d4:	10a0001c 	xori	r2,r2,32768
   1c5d8:	10a00004 	addi	r2,r2,-32768
   1c5dc:	1880041e 	bne	r3,r2,1c5f0 <alt_up_sd_card_fopen+0x2c0>
								(active_files[file_record_index].file_record_offset == active_files[index].file_record_offset))
							{
								// file already in use.
								file_record_index = -2;
   1c5e0:	00bfff84 	movi	r2,-2
   1c5e4:	e0bfeb0d 	sth	r2,-84(fp)
								break;
   1c5e8:	0001883a 	nop
   1c5ec:	00002b06 	br	1c69c <alt_up_sd_card_fopen+0x36c>
                    active_files[file_record_index].current_byte_position = 0;
                    active_files[file_record_index].in_use = true;
    				active_files[file_record_index].modified = false;

					/* Check if the file has already been opened. */
					for (index = 0; index < MAX_FILES_OPENED; index++)
   1c5f0:	e0bfec17 	ldw	r2,-80(fp)
   1c5f4:	10800044 	addi	r2,r2,1
   1c5f8:	e0bfec15 	stw	r2,-80(fp)
   1c5fc:	e0bfec17 	ldw	r2,-80(fp)
   1c600:	10800510 	cmplti	r2,r2,20
   1c604:	103fb71e 	bne	r2,zero,1c4e4 <__alt_mem_Flash_flash_data+0xf401c4e4>
   1c608:	00002406 	br	1c69c <alt_up_sd_card_fopen+0x36c>
							}
						}
					}

                }
                else if (create)
   1c60c:	e0bfff17 	ldw	r2,-4(fp)
   1c610:	10001f26 	beq	r2,zero,1c690 <alt_up_sd_card_fopen+0x360>
                {
                    /* Create file if needed. */
                    if (create_file(name, &(active_files[file_record_index]), &home_dir))
   1c614:	e0bfeb0f 	ldh	r2,-84(fp)
   1c618:	100691ba 	slli	r3,r2,6
   1c61c:	008000f4 	movhi	r2,3
   1c620:	10a16c04 	addi	r2,r2,-31312
   1c624:	1887883a 	add	r3,r3,r2
   1c628:	e0bfee04 	addi	r2,fp,-72
   1c62c:	e13ffe17 	ldw	r4,-8(fp)
   1c630:	180b883a 	mov	r5,r3
   1c634:	100d883a 	mov	r6,r2
   1c638:	001b8bc0 	call	1b8bc <create_file>
   1c63c:	10001126 	beq	r2,zero,1c684 <alt_up_sd_card_fopen+0x354>
                    {
                        active_files[file_record_index].in_use = true;
   1c640:	e0ffeb0f 	ldh	r3,-84(fp)
   1c644:	008000f4 	movhi	r2,3
   1c648:	10a16c04 	addi	r2,r2,-31312
   1c64c:	180691ba 	slli	r3,r3,6
   1c650:	18c00f04 	addi	r3,r3,60
   1c654:	10c5883a 	add	r2,r2,r3
   1c658:	00c00044 	movi	r3,1
   1c65c:	10c00015 	stw	r3,0(r2)
    					active_files[file_record_index].modified = true;
   1c660:	e0ffeb0f 	ldh	r3,-84(fp)
   1c664:	008000f4 	movhi	r2,3
   1c668:	10a16c04 	addi	r2,r2,-31312
   1c66c:	180691ba 	slli	r3,r3,6
   1c670:	18c00e04 	addi	r3,r3,56
   1c674:	10c5883a 	add	r2,r2,r3
   1c678:	00c00044 	movi	r3,1
   1c67c:	10c00015 	stw	r3,0(r2)
   1c680:	00000606 	br	1c69c <alt_up_sd_card_fopen+0x36c>
                    }
                    else
                    {
                        /* If file creation fails then return an invalid file handle. */
                        file_record_index = -1;
   1c684:	00bfffc4 	movi	r2,-1
   1c688:	e0bfeb0d 	sth	r2,-84(fp)
   1c68c:	00000306 	br	1c69c <alt_up_sd_card_fopen+0x36c>
                    }                
                }
                else
                {
                    /* Otherwise the file could not be opened.*/
                    file_record_index = -1;
   1c690:	00bfffc4 	movi	r2,-1
   1c694:	e0bfeb0d 	sth	r2,-84(fp)
   1c698:	00000006 	br	1c69c <alt_up_sd_card_fopen+0x36c>
                }
    		}
        }
	}

	return file_record_index;
   1c69c:	e0bfeb0b 	ldhu	r2,-84(fp)
}
   1c6a0:	e037883a 	mov	sp,fp
   1c6a4:	dfc00117 	ldw	ra,4(sp)
   1c6a8:	df000017 	ldw	fp,0(sp)
   1c6ac:	dec00204 	addi	sp,sp,8
   1c6b0:	f800283a 	ret

0001c6b4 <alt_up_sd_card_set_attributes>:


void alt_up_sd_card_set_attributes(short int file_handle, short int attributes)
/* Return file attributes, or -1 if the file_handle is invalid.
 */
{
   1c6b4:	defffd04 	addi	sp,sp,-12
   1c6b8:	df000215 	stw	fp,8(sp)
   1c6bc:	df000204 	addi	fp,sp,8
   1c6c0:	2007883a 	mov	r3,r4
   1c6c4:	2805883a 	mov	r2,r5
   1c6c8:	e0fffe0d 	sth	r3,-8(fp)
   1c6cc:	e0bfff0d 	sth	r2,-4(fp)
    if ((file_handle >= 0) && (file_handle < MAX_FILES_OPENED))
   1c6d0:	e0bffe0f 	ldh	r2,-8(fp)
   1c6d4:	10001416 	blt	r2,zero,1c728 <alt_up_sd_card_set_attributes+0x74>
   1c6d8:	e0bffe0f 	ldh	r2,-8(fp)
   1c6dc:	10800508 	cmpgei	r2,r2,20
   1c6e0:	1000111e 	bne	r2,zero,1c728 <alt_up_sd_card_set_attributes+0x74>
    {
        if (active_files[file_handle].in_use)
   1c6e4:	e0fffe0f 	ldh	r3,-8(fp)
   1c6e8:	008000f4 	movhi	r2,3
   1c6ec:	10a16c04 	addi	r2,r2,-31312
   1c6f0:	180691ba 	slli	r3,r3,6
   1c6f4:	18c00f04 	addi	r3,r3,60
   1c6f8:	10c5883a 	add	r2,r2,r3
   1c6fc:	10800017 	ldw	r2,0(r2)
   1c700:	10000926 	beq	r2,zero,1c728 <alt_up_sd_card_set_attributes+0x74>
        {
            active_files[file_handle].attributes = ((char)(attributes & 0x00ff));
   1c704:	e0fffe0f 	ldh	r3,-8(fp)
   1c708:	e0bfff0b 	ldhu	r2,-4(fp)
   1c70c:	1009883a 	mov	r4,r2
   1c710:	008000f4 	movhi	r2,3
   1c714:	10a16c04 	addi	r2,r2,-31312
   1c718:	180691ba 	slli	r3,r3,6
   1c71c:	18c00204 	addi	r3,r3,8
   1c720:	10c5883a 	add	r2,r2,r3
   1c724:	110000c5 	stb	r4,3(r2)
        }
    }
}
   1c728:	e037883a 	mov	sp,fp
   1c72c:	df000017 	ldw	fp,0(sp)
   1c730:	dec00104 	addi	sp,sp,4
   1c734:	f800283a 	ret

0001c738 <alt_up_sd_card_get_attributes>:


short int alt_up_sd_card_get_attributes(short int file_handle)
/* Return file attributes, or -1 if the file_handle is invalid.
 */
{
   1c738:	defffd04 	addi	sp,sp,-12
   1c73c:	df000215 	stw	fp,8(sp)
   1c740:	df000204 	addi	fp,sp,8
   1c744:	2005883a 	mov	r2,r4
   1c748:	e0bfff0d 	sth	r2,-4(fp)
	short int result = -1;
   1c74c:	00bfffc4 	movi	r2,-1
   1c750:	e0bffe0d 	sth	r2,-8(fp)
    if ((file_handle >= 0) && (file_handle < MAX_FILES_OPENED))
   1c754:	e0bfff0f 	ldh	r2,-4(fp)
   1c758:	10001416 	blt	r2,zero,1c7ac <alt_up_sd_card_get_attributes+0x74>
   1c75c:	e0bfff0f 	ldh	r2,-4(fp)
   1c760:	10800508 	cmpgei	r2,r2,20
   1c764:	1000111e 	bne	r2,zero,1c7ac <alt_up_sd_card_get_attributes+0x74>
    {
        if (active_files[file_handle].in_use)
   1c768:	e0ffff0f 	ldh	r3,-4(fp)
   1c76c:	008000f4 	movhi	r2,3
   1c770:	10a16c04 	addi	r2,r2,-31312
   1c774:	180691ba 	slli	r3,r3,6
   1c778:	18c00f04 	addi	r3,r3,60
   1c77c:	10c5883a 	add	r2,r2,r3
   1c780:	10800017 	ldw	r2,0(r2)
   1c784:	10000926 	beq	r2,zero,1c7ac <alt_up_sd_card_get_attributes+0x74>
		{
			result = ((active_files[file_handle].attributes) & 0x00ff);
   1c788:	e0ffff0f 	ldh	r3,-4(fp)
   1c78c:	008000f4 	movhi	r2,3
   1c790:	10a16c04 	addi	r2,r2,-31312
   1c794:	180691ba 	slli	r3,r3,6
   1c798:	18c00204 	addi	r3,r3,8
   1c79c:	10c5883a 	add	r2,r2,r3
   1c7a0:	108000c3 	ldbu	r2,3(r2)
   1c7a4:	10803fcc 	andi	r2,r2,255
   1c7a8:	e0bffe0d 	sth	r2,-8(fp)
		}
	}
	return result;
   1c7ac:	e0bffe0b 	ldhu	r2,-8(fp)
}
   1c7b0:	e037883a 	mov	sp,fp
   1c7b4:	df000017 	ldw	fp,0(sp)
   1c7b8:	dec00104 	addi	sp,sp,4
   1c7bc:	f800283a 	ret

0001c7c0 <alt_up_sd_card_read>:

short int alt_up_sd_card_read(short int file_handle)
/* Read a single character from a given file. Return -1 if at the end of a file. Any other negative number
 * means that the file could not be read. A number between 0 and 255 is an ASCII character read from the SD Card. */
{
   1c7c0:	defffa04 	addi	sp,sp,-24
   1c7c4:	dfc00515 	stw	ra,20(sp)
   1c7c8:	df000415 	stw	fp,16(sp)
   1c7cc:	df000404 	addi	fp,sp,16
   1c7d0:	2005883a 	mov	r2,r4
   1c7d4:	e0bfff0d 	sth	r2,-4(fp)
    short int ch = -1;
   1c7d8:	00bfffc4 	movi	r2,-1
   1c7dc:	e0bffc0d 	sth	r2,-16(fp)
    
    if ((file_handle >= 0) && (file_handle < MAX_FILES_OPENED))
   1c7e0:	e0bfff0f 	ldh	r2,-4(fp)
   1c7e4:	1000ce16 	blt	r2,zero,1cb20 <alt_up_sd_card_read+0x360>
   1c7e8:	e0bfff0f 	ldh	r2,-4(fp)
   1c7ec:	10800508 	cmpgei	r2,r2,20
   1c7f0:	1000cb1e 	bne	r2,zero,1cb20 <alt_up_sd_card_read+0x360>
    {
        if (active_files[file_handle].in_use)
   1c7f4:	e0ffff0f 	ldh	r3,-4(fp)
   1c7f8:	008000f4 	movhi	r2,3
   1c7fc:	10a16c04 	addi	r2,r2,-31312
   1c800:	180691ba 	slli	r3,r3,6
   1c804:	18c00f04 	addi	r3,r3,60
   1c808:	10c5883a 	add	r2,r2,r3
   1c80c:	10800017 	ldw	r2,0(r2)
   1c810:	1000c326 	beq	r2,zero,1cb20 <alt_up_sd_card_read+0x360>
        {
            if (active_files[file_handle].current_byte_position < active_files[file_handle].file_size_in_bytes)
   1c814:	e0ffff0f 	ldh	r3,-4(fp)
   1c818:	008000f4 	movhi	r2,3
   1c81c:	10a16c04 	addi	r2,r2,-31312
   1c820:	180691ba 	slli	r3,r3,6
   1c824:	18c00904 	addi	r3,r3,36
   1c828:	10c5883a 	add	r2,r2,r3
   1c82c:	10c00017 	ldw	r3,0(r2)
   1c830:	e13fff0f 	ldh	r4,-4(fp)
   1c834:	008000f4 	movhi	r2,3
   1c838:	10a16c04 	addi	r2,r2,-31312
   1c83c:	200891ba 	slli	r4,r4,6
   1c840:	21000604 	addi	r4,r4,24
   1c844:	1105883a 	add	r2,r2,r4
   1c848:	10800017 	ldw	r2,0(r2)
   1c84c:	1880b42e 	bgeu	r3,r2,1cb20 <alt_up_sd_card_read+0x360>
            {
                int data_sector = boot_sector_data.data_sector_offset + (active_files[file_handle].current_cluster_index - 2)*boot_sector_data.sectors_per_cluster +
   1c850:	008000f4 	movhi	r2,3
   1c854:	10a15704 	addi	r2,r2,-31396
   1c858:	10c01417 	ldw	r3,80(r2)
   1c85c:	e13fff0f 	ldh	r4,-4(fp)
   1c860:	008000f4 	movhi	r2,3
   1c864:	10a16c04 	addi	r2,r2,-31312
   1c868:	200891ba 	slli	r4,r4,6
   1c86c:	21000704 	addi	r4,r4,28
   1c870:	1105883a 	add	r2,r2,r4
   1c874:	10800017 	ldw	r2,0(r2)
   1c878:	113fff84 	addi	r4,r2,-2
   1c87c:	008000f4 	movhi	r2,3
   1c880:	10a15704 	addi	r2,r2,-31396
   1c884:	10800383 	ldbu	r2,14(r2)
   1c888:	10803fcc 	andi	r2,r2,255
   1c88c:	2085383a 	mul	r2,r4,r2
   1c890:	1887883a 	add	r3,r3,r2
                                  active_files[file_handle].current_sector_in_cluster;
   1c894:	e13fff0f 	ldh	r4,-4(fp)
   1c898:	008000f4 	movhi	r2,3
   1c89c:	10a16c04 	addi	r2,r2,-31312
   1c8a0:	200891ba 	slli	r4,r4,6
   1c8a4:	21000804 	addi	r4,r4,32
   1c8a8:	1105883a 	add	r2,r2,r4
   1c8ac:	10800017 	ldw	r2,0(r2)
    {
        if (active_files[file_handle].in_use)
        {
            if (active_files[file_handle].current_byte_position < active_files[file_handle].file_size_in_bytes)
            {
                int data_sector = boot_sector_data.data_sector_offset + (active_files[file_handle].current_cluster_index - 2)*boot_sector_data.sectors_per_cluster +
   1c8b0:	1885883a 	add	r2,r3,r2
   1c8b4:	e0bffd15 	stw	r2,-12(fp)
                                  active_files[file_handle].current_sector_in_cluster;
                
                if ((active_files[file_handle].current_byte_position > 0) && ((active_files[file_handle].current_byte_position % 512) == 0))
   1c8b8:	e0ffff0f 	ldh	r3,-4(fp)
   1c8bc:	008000f4 	movhi	r2,3
   1c8c0:	10a16c04 	addi	r2,r2,-31312
   1c8c4:	180691ba 	slli	r3,r3,6
   1c8c8:	18c00904 	addi	r3,r3,36
   1c8cc:	10c5883a 	add	r2,r2,r3
   1c8d0:	10800017 	ldw	r2,0(r2)
   1c8d4:	10006826 	beq	r2,zero,1ca78 <alt_up_sd_card_read+0x2b8>
   1c8d8:	e0ffff0f 	ldh	r3,-4(fp)
   1c8dc:	008000f4 	movhi	r2,3
   1c8e0:	10a16c04 	addi	r2,r2,-31312
   1c8e4:	180691ba 	slli	r3,r3,6
   1c8e8:	18c00904 	addi	r3,r3,36
   1c8ec:	10c5883a 	add	r2,r2,r3
   1c8f0:	10800017 	ldw	r2,0(r2)
   1c8f4:	10807fcc 	andi	r2,r2,511
   1c8f8:	10005f1e 	bne	r2,zero,1ca78 <alt_up_sd_card_read+0x2b8>
                {
                    // Read in a new sector of data.
                    if (active_files[file_handle].current_sector_in_cluster == boot_sector_data.sectors_per_cluster - 1)
   1c8fc:	e0ffff0f 	ldh	r3,-4(fp)
   1c900:	008000f4 	movhi	r2,3
   1c904:	10a16c04 	addi	r2,r2,-31312
   1c908:	180691ba 	slli	r3,r3,6
   1c90c:	18c00804 	addi	r3,r3,32
   1c910:	10c5883a 	add	r2,r2,r3
   1c914:	10c00017 	ldw	r3,0(r2)
   1c918:	008000f4 	movhi	r2,3
   1c91c:	10a15704 	addi	r2,r2,-31396
   1c920:	10800383 	ldbu	r2,14(r2)
   1c924:	10803fcc 	andi	r2,r2,255
   1c928:	10bfffc4 	addi	r2,r2,-1
   1c92c:	1880401e 	bne	r3,r2,1ca30 <alt_up_sd_card_read+0x270>
                    {
                        // Go to the next cluster.
                        unsigned short int next_cluster;
                        if (get_cluster_flag(active_files[file_handle].current_cluster_index, &next_cluster))
   1c930:	e0ffff0f 	ldh	r3,-4(fp)
   1c934:	008000f4 	movhi	r2,3
   1c938:	10a16c04 	addi	r2,r2,-31312
   1c93c:	180691ba 	slli	r3,r3,6
   1c940:	18c00704 	addi	r3,r3,28
   1c944:	10c5883a 	add	r2,r2,r3
   1c948:	10c00017 	ldw	r3,0(r2)
   1c94c:	e0bffe04 	addi	r2,fp,-8
   1c950:	1809883a 	mov	r4,r3
   1c954:	100b883a 	mov	r5,r2
   1c958:	00192480 	call	19248 <get_cluster_flag>
   1c95c:	10003226 	beq	r2,zero,1ca28 <alt_up_sd_card_read+0x268>
                        {
                            if ((next_cluster & 0x0000fff8) == 0x0000fff8)
   1c960:	e0bffe0b 	ldhu	r2,-8(fp)
   1c964:	10bfffcc 	andi	r2,r2,65535
   1c968:	10fffe0c 	andi	r3,r2,65528
   1c96c:	00bffe14 	movui	r2,65528
   1c970:	1880021e 	bne	r3,r2,1c97c <alt_up_sd_card_read+0x1bc>
                            {
                                /* End of file */
                                return -1;
   1c974:	00bfffc4 	movi	r2,-1
   1c978:	00006a06 	br	1cb24 <alt_up_sd_card_read+0x364>
                            } 
                            else
                            {
                                active_files[file_handle].current_cluster_index = next_cluster;
   1c97c:	e13fff0f 	ldh	r4,-4(fp)
   1c980:	e0bffe0b 	ldhu	r2,-8(fp)
   1c984:	10ffffcc 	andi	r3,r2,65535
   1c988:	008000f4 	movhi	r2,3
   1c98c:	10a16c04 	addi	r2,r2,-31312
   1c990:	200891ba 	slli	r4,r4,6
   1c994:	21000704 	addi	r4,r4,28
   1c998:	1105883a 	add	r2,r2,r4
   1c99c:	10c00015 	stw	r3,0(r2)
								active_files[file_handle].current_sector_in_cluster = 0;
   1c9a0:	e0ffff0f 	ldh	r3,-4(fp)
   1c9a4:	008000f4 	movhi	r2,3
   1c9a8:	10a16c04 	addi	r2,r2,-31312
   1c9ac:	180691ba 	slli	r3,r3,6
   1c9b0:	18c00804 	addi	r3,r3,32
   1c9b4:	10c5883a 	add	r2,r2,r3
   1c9b8:	10000015 	stw	zero,0(r2)
                                data_sector = boot_sector_data.data_sector_offset + (active_files[file_handle].current_cluster_index - 2)*boot_sector_data.sectors_per_cluster +
   1c9bc:	008000f4 	movhi	r2,3
   1c9c0:	10a15704 	addi	r2,r2,-31396
   1c9c4:	10c01417 	ldw	r3,80(r2)
   1c9c8:	e13fff0f 	ldh	r4,-4(fp)
   1c9cc:	008000f4 	movhi	r2,3
   1c9d0:	10a16c04 	addi	r2,r2,-31312
   1c9d4:	200891ba 	slli	r4,r4,6
   1c9d8:	21000704 	addi	r4,r4,28
   1c9dc:	1105883a 	add	r2,r2,r4
   1c9e0:	10800017 	ldw	r2,0(r2)
   1c9e4:	113fff84 	addi	r4,r2,-2
   1c9e8:	008000f4 	movhi	r2,3
   1c9ec:	10a15704 	addi	r2,r2,-31396
   1c9f0:	10800383 	ldbu	r2,14(r2)
   1c9f4:	10803fcc 	andi	r2,r2,255
   1c9f8:	2085383a 	mul	r2,r4,r2
   1c9fc:	1887883a 	add	r3,r3,r2
                                  active_files[file_handle].current_sector_in_cluster;                                
   1ca00:	e13fff0f 	ldh	r4,-4(fp)
   1ca04:	008000f4 	movhi	r2,3
   1ca08:	10a16c04 	addi	r2,r2,-31312
   1ca0c:	200891ba 	slli	r4,r4,6
   1ca10:	21000804 	addi	r4,r4,32
   1ca14:	1105883a 	add	r2,r2,r4
   1ca18:	10800017 	ldw	r2,0(r2)
                            } 
                            else
                            {
                                active_files[file_handle].current_cluster_index = next_cluster;
								active_files[file_handle].current_sector_in_cluster = 0;
                                data_sector = boot_sector_data.data_sector_offset + (active_files[file_handle].current_cluster_index - 2)*boot_sector_data.sectors_per_cluster +
   1ca1c:	1885883a 	add	r2,r3,r2
   1ca20:	e0bffd15 	stw	r2,-12(fp)
   1ca24:	00001406 	br	1ca78 <alt_up_sd_card_read+0x2b8>
                                  active_files[file_handle].current_sector_in_cluster;                                
                            }
                        }
                        else
                        {
                            return -2;
   1ca28:	00bfff84 	movi	r2,-2
   1ca2c:	00003d06 	br	1cb24 <alt_up_sd_card_read+0x364>
                        }
                    }
                    else
                    {
                        active_files[file_handle].current_sector_in_cluster = active_files[file_handle].current_sector_in_cluster + 1;
   1ca30:	e13fff0f 	ldh	r4,-4(fp)
   1ca34:	e0ffff0f 	ldh	r3,-4(fp)
   1ca38:	008000f4 	movhi	r2,3
   1ca3c:	10a16c04 	addi	r2,r2,-31312
   1ca40:	180691ba 	slli	r3,r3,6
   1ca44:	18c00804 	addi	r3,r3,32
   1ca48:	10c5883a 	add	r2,r2,r3
   1ca4c:	10800017 	ldw	r2,0(r2)
   1ca50:	10c00044 	addi	r3,r2,1
   1ca54:	008000f4 	movhi	r2,3
   1ca58:	10a16c04 	addi	r2,r2,-31312
   1ca5c:	200891ba 	slli	r4,r4,6
   1ca60:	21000804 	addi	r4,r4,32
   1ca64:	1105883a 	add	r2,r2,r4
   1ca68:	10c00015 	stw	r3,0(r2)
                        data_sector = data_sector + 1;
   1ca6c:	e0bffd17 	ldw	r2,-12(fp)
   1ca70:	10800044 	addi	r2,r2,1
   1ca74:	e0bffd15 	stw	r2,-12(fp)
                    }
                }
                // Reading te first byte of the file.
                if (current_sector_index != (data_sector + fat_partition_offset_in_512_byte_sectors))
   1ca78:	d0e81817 	ldw	r3,-24480(gp)
   1ca7c:	e0bffd17 	ldw	r2,-12(fp)
   1ca80:	1885883a 	add	r2,r3,r2
   1ca84:	1007883a 	mov	r3,r2
   1ca88:	d0a81c17 	ldw	r2,-24464(gp)
   1ca8c:	18800726 	beq	r3,r2,1caac <alt_up_sd_card_read+0x2ec>
                {
                    if (!Read_Sector_Data(data_sector, fat_partition_offset_in_512_byte_sectors))
   1ca90:	d0a81817 	ldw	r2,-24480(gp)
   1ca94:	e13ffd17 	ldw	r4,-12(fp)
   1ca98:	100b883a 	mov	r5,r2
   1ca9c:	00191700 	call	19170 <Read_Sector_Data>
   1caa0:	1000021e 	bne	r2,zero,1caac <alt_up_sd_card_read+0x2ec>
                    {
						return -2;
   1caa4:	00bfff84 	movi	r2,-2
   1caa8:	00001e06 	br	1cb24 <alt_up_sd_card_read+0x364>
                    }
                }

                ch = (unsigned char) IORD_8DIRECT(buffer_memory, (active_files[file_handle].current_byte_position % 512));
   1caac:	d0e81717 	ldw	r3,-24484(gp)
   1cab0:	e13fff0f 	ldh	r4,-4(fp)
   1cab4:	008000f4 	movhi	r2,3
   1cab8:	10a16c04 	addi	r2,r2,-31312
   1cabc:	200891ba 	slli	r4,r4,6
   1cac0:	21000904 	addi	r4,r4,36
   1cac4:	1105883a 	add	r2,r2,r4
   1cac8:	10800017 	ldw	r2,0(r2)
   1cacc:	10807fcc 	andi	r2,r2,511
   1cad0:	1885883a 	add	r2,r3,r2
   1cad4:	10800023 	ldbuio	r2,0(r2)
   1cad8:	10803fcc 	andi	r2,r2,255
   1cadc:	10803fcc 	andi	r2,r2,255
   1cae0:	e0bffc0d 	sth	r2,-16(fp)
                active_files[file_handle].current_byte_position = active_files[file_handle].current_byte_position + 1;
   1cae4:	e13fff0f 	ldh	r4,-4(fp)
   1cae8:	e0ffff0f 	ldh	r3,-4(fp)
   1caec:	008000f4 	movhi	r2,3
   1caf0:	10a16c04 	addi	r2,r2,-31312
   1caf4:	180691ba 	slli	r3,r3,6
   1caf8:	18c00904 	addi	r3,r3,36
   1cafc:	10c5883a 	add	r2,r2,r3
   1cb00:	10800017 	ldw	r2,0(r2)
   1cb04:	10c00044 	addi	r3,r2,1
   1cb08:	008000f4 	movhi	r2,3
   1cb0c:	10a16c04 	addi	r2,r2,-31312
   1cb10:	200891ba 	slli	r4,r4,6
   1cb14:	21000904 	addi	r4,r4,36
   1cb18:	1105883a 	add	r2,r2,r4
   1cb1c:	10c00015 	stw	r3,0(r2)
            }
        }
    }
    
    return ch;
   1cb20:	e0bffc0b 	ldhu	r2,-16(fp)
}
   1cb24:	e037883a 	mov	sp,fp
   1cb28:	dfc00117 	ldw	ra,4(sp)
   1cb2c:	df000017 	ldw	fp,0(sp)
   1cb30:	dec00204 	addi	sp,sp,8
   1cb34:	f800283a 	ret

0001cb38 <alt_up_sd_card_write>:


bool alt_up_sd_card_write(short int file_handle, char byte_of_data)
/* Write a single character to a given file. Return true if successful, and false otherwise. */
{
   1cb38:	defff704 	addi	sp,sp,-36
   1cb3c:	dfc00815 	stw	ra,32(sp)
   1cb40:	df000715 	stw	fp,28(sp)
   1cb44:	df000704 	addi	fp,sp,28
   1cb48:	2007883a 	mov	r3,r4
   1cb4c:	2805883a 	mov	r2,r5
   1cb50:	e0fffe0d 	sth	r3,-8(fp)
   1cb54:	e0bfff05 	stb	r2,-4(fp)
    bool result = false;
   1cb58:	e03ff915 	stw	zero,-28(fp)
    
    if ((file_handle >= 0) && (file_handle < MAX_FILES_OPENED))
   1cb5c:	e0bffe0f 	ldh	r2,-8(fp)
   1cb60:	1001b716 	blt	r2,zero,1d240 <alt_up_sd_card_write+0x708>
   1cb64:	e0bffe0f 	ldh	r2,-8(fp)
   1cb68:	10800508 	cmpgei	r2,r2,20
   1cb6c:	1001b41e 	bne	r2,zero,1d240 <alt_up_sd_card_write+0x708>
    {
        if (active_files[file_handle].in_use)
   1cb70:	e0fffe0f 	ldh	r3,-8(fp)
   1cb74:	008000f4 	movhi	r2,3
   1cb78:	10a16c04 	addi	r2,r2,-31312
   1cb7c:	180691ba 	slli	r3,r3,6
   1cb80:	18c00f04 	addi	r3,r3,60
   1cb84:	10c5883a 	add	r2,r2,r3
   1cb88:	10800017 	ldw	r2,0(r2)
   1cb8c:	1001ac26 	beq	r2,zero,1d240 <alt_up_sd_card_write+0x708>
        {
            int data_sector = boot_sector_data.data_sector_offset + (active_files[file_handle].current_cluster_index - 2)*boot_sector_data.sectors_per_cluster +
   1cb90:	008000f4 	movhi	r2,3
   1cb94:	10a15704 	addi	r2,r2,-31396
   1cb98:	10c01417 	ldw	r3,80(r2)
   1cb9c:	e13ffe0f 	ldh	r4,-8(fp)
   1cba0:	008000f4 	movhi	r2,3
   1cba4:	10a16c04 	addi	r2,r2,-31312
   1cba8:	200891ba 	slli	r4,r4,6
   1cbac:	21000704 	addi	r4,r4,28
   1cbb0:	1105883a 	add	r2,r2,r4
   1cbb4:	10800017 	ldw	r2,0(r2)
   1cbb8:	113fff84 	addi	r4,r2,-2
   1cbbc:	008000f4 	movhi	r2,3
   1cbc0:	10a15704 	addi	r2,r2,-31396
   1cbc4:	10800383 	ldbu	r2,14(r2)
   1cbc8:	10803fcc 	andi	r2,r2,255
   1cbcc:	2085383a 	mul	r2,r4,r2
   1cbd0:	1887883a 	add	r3,r3,r2
                              active_files[file_handle].current_sector_in_cluster;
   1cbd4:	e13ffe0f 	ldh	r4,-8(fp)
   1cbd8:	008000f4 	movhi	r2,3
   1cbdc:	10a16c04 	addi	r2,r2,-31312
   1cbe0:	200891ba 	slli	r4,r4,6
   1cbe4:	21000804 	addi	r4,r4,32
   1cbe8:	1105883a 	add	r2,r2,r4
   1cbec:	10800017 	ldw	r2,0(r2)
    
    if ((file_handle >= 0) && (file_handle < MAX_FILES_OPENED))
    {
        if (active_files[file_handle].in_use)
        {
            int data_sector = boot_sector_data.data_sector_offset + (active_files[file_handle].current_cluster_index - 2)*boot_sector_data.sectors_per_cluster +
   1cbf0:	1885883a 	add	r2,r3,r2
   1cbf4:	e0bffa15 	stw	r2,-24(fp)
                              active_files[file_handle].current_sector_in_cluster;
			short int buffer_offset = active_files[file_handle].current_byte_position % boot_sector_data.sector_size_in_bytes;
   1cbf8:	e0fffe0f 	ldh	r3,-8(fp)
   1cbfc:	008000f4 	movhi	r2,3
   1cc00:	10a16c04 	addi	r2,r2,-31312
   1cc04:	180691ba 	slli	r3,r3,6
   1cc08:	18c00904 	addi	r3,r3,36
   1cc0c:	10c5883a 	add	r2,r2,r3
   1cc10:	10c00017 	ldw	r3,0(r2)
   1cc14:	008000f4 	movhi	r2,3
   1cc18:	10a15704 	addi	r2,r2,-31396
   1cc1c:	1080030b 	ldhu	r2,12(r2)
   1cc20:	10bfffcc 	andi	r2,r2,65535
   1cc24:	1889203a 	divu	r4,r3,r2
   1cc28:	2085383a 	mul	r2,r4,r2
   1cc2c:	1885c83a 	sub	r2,r3,r2
   1cc30:	e0bffb0d 	sth	r2,-20(fp)

			if (active_files[file_handle].current_byte_position < active_files[file_handle].file_size_in_bytes)
   1cc34:	e0fffe0f 	ldh	r3,-8(fp)
   1cc38:	008000f4 	movhi	r2,3
   1cc3c:	10a16c04 	addi	r2,r2,-31312
   1cc40:	180691ba 	slli	r3,r3,6
   1cc44:	18c00904 	addi	r3,r3,36
   1cc48:	10c5883a 	add	r2,r2,r3
   1cc4c:	10c00017 	ldw	r3,0(r2)
   1cc50:	e13ffe0f 	ldh	r4,-8(fp)
   1cc54:	008000f4 	movhi	r2,3
   1cc58:	10a16c04 	addi	r2,r2,-31312
   1cc5c:	200891ba 	slli	r4,r4,6
   1cc60:	21000604 	addi	r4,r4,24
   1cc64:	1105883a 	add	r2,r2,r4
   1cc68:	10800017 	ldw	r2,0(r2)
   1cc6c:	1880a72e 	bgeu	r3,r2,1cf0c <alt_up_sd_card_write+0x3d4>
            {
                if ((active_files[file_handle].current_byte_position > 0) && (buffer_offset == 0))
   1cc70:	e0fffe0f 	ldh	r3,-8(fp)
   1cc74:	008000f4 	movhi	r2,3
   1cc78:	10a16c04 	addi	r2,r2,-31312
   1cc7c:	180691ba 	slli	r3,r3,6
   1cc80:	18c00904 	addi	r3,r3,36
   1cc84:	10c5883a 	add	r2,r2,r3
   1cc88:	10800017 	ldw	r2,0(r2)
   1cc8c:	10006126 	beq	r2,zero,1ce14 <alt_up_sd_card_write+0x2dc>
   1cc90:	e0bffb0f 	ldh	r2,-20(fp)
   1cc94:	10005f1e 	bne	r2,zero,1ce14 <alt_up_sd_card_write+0x2dc>
                {
                    // Read in a new sector of data.
                    if (active_files[file_handle].current_sector_in_cluster == boot_sector_data.sectors_per_cluster - 1)
   1cc98:	e0fffe0f 	ldh	r3,-8(fp)
   1cc9c:	008000f4 	movhi	r2,3
   1cca0:	10a16c04 	addi	r2,r2,-31312
   1cca4:	180691ba 	slli	r3,r3,6
   1cca8:	18c00804 	addi	r3,r3,32
   1ccac:	10c5883a 	add	r2,r2,r3
   1ccb0:	10c00017 	ldw	r3,0(r2)
   1ccb4:	008000f4 	movhi	r2,3
   1ccb8:	10a15704 	addi	r2,r2,-31396
   1ccbc:	10800383 	ldbu	r2,14(r2)
   1ccc0:	10803fcc 	andi	r2,r2,255
   1ccc4:	10bfffc4 	addi	r2,r2,-1
   1ccc8:	18803e1e 	bne	r3,r2,1cdc4 <alt_up_sd_card_write+0x28c>
                    {
                        // Go to the next cluster.
                        unsigned short int next_cluster;
                        if (get_cluster_flag(active_files[file_handle].current_cluster_index, &next_cluster))
   1cccc:	e0fffe0f 	ldh	r3,-8(fp)
   1ccd0:	008000f4 	movhi	r2,3
   1ccd4:	10a16c04 	addi	r2,r2,-31312
   1ccd8:	180691ba 	slli	r3,r3,6
   1ccdc:	18c00704 	addi	r3,r3,28
   1cce0:	10c5883a 	add	r2,r2,r3
   1cce4:	10c00017 	ldw	r3,0(r2)
   1cce8:	e0bffb84 	addi	r2,fp,-18
   1ccec:	1809883a 	mov	r4,r3
   1ccf0:	100b883a 	mov	r5,r2
   1ccf4:	00192480 	call	19248 <get_cluster_flag>
   1ccf8:	10003026 	beq	r2,zero,1cdbc <alt_up_sd_card_write+0x284>
                        {
                            if (next_cluster < 0x0000fff8)
   1ccfc:	e0bffb8b 	ldhu	r2,-18(fp)
   1cd00:	10bfffcc 	andi	r2,r2,65535
   1cd04:	10bffe28 	cmpgeui	r2,r2,65528
   1cd08:	10002b1e 	bne	r2,zero,1cdb8 <alt_up_sd_card_write+0x280>
                            {
                                active_files[file_handle].current_cluster_index = next_cluster;
   1cd0c:	e13ffe0f 	ldh	r4,-8(fp)
   1cd10:	e0bffb8b 	ldhu	r2,-18(fp)
   1cd14:	10ffffcc 	andi	r3,r2,65535
   1cd18:	008000f4 	movhi	r2,3
   1cd1c:	10a16c04 	addi	r2,r2,-31312
   1cd20:	200891ba 	slli	r4,r4,6
   1cd24:	21000704 	addi	r4,r4,28
   1cd28:	1105883a 	add	r2,r2,r4
   1cd2c:	10c00015 	stw	r3,0(r2)
								active_files[file_handle].current_sector_in_cluster = 0;
   1cd30:	e0fffe0f 	ldh	r3,-8(fp)
   1cd34:	008000f4 	movhi	r2,3
   1cd38:	10a16c04 	addi	r2,r2,-31312
   1cd3c:	180691ba 	slli	r3,r3,6
   1cd40:	18c00804 	addi	r3,r3,32
   1cd44:	10c5883a 	add	r2,r2,r3
   1cd48:	10000015 	stw	zero,0(r2)
                                data_sector = boot_sector_data.data_sector_offset + (active_files[file_handle].current_cluster_index - 2)*boot_sector_data.sectors_per_cluster +
   1cd4c:	008000f4 	movhi	r2,3
   1cd50:	10a15704 	addi	r2,r2,-31396
   1cd54:	10c01417 	ldw	r3,80(r2)
   1cd58:	e13ffe0f 	ldh	r4,-8(fp)
   1cd5c:	008000f4 	movhi	r2,3
   1cd60:	10a16c04 	addi	r2,r2,-31312
   1cd64:	200891ba 	slli	r4,r4,6
   1cd68:	21000704 	addi	r4,r4,28
   1cd6c:	1105883a 	add	r2,r2,r4
   1cd70:	10800017 	ldw	r2,0(r2)
   1cd74:	113fff84 	addi	r4,r2,-2
   1cd78:	008000f4 	movhi	r2,3
   1cd7c:	10a15704 	addi	r2,r2,-31396
   1cd80:	10800383 	ldbu	r2,14(r2)
   1cd84:	10803fcc 	andi	r2,r2,255
   1cd88:	2085383a 	mul	r2,r4,r2
   1cd8c:	1887883a 	add	r3,r3,r2
                                  active_files[file_handle].current_sector_in_cluster;                                
   1cd90:	e13ffe0f 	ldh	r4,-8(fp)
   1cd94:	008000f4 	movhi	r2,3
   1cd98:	10a16c04 	addi	r2,r2,-31312
   1cd9c:	200891ba 	slli	r4,r4,6
   1cda0:	21000804 	addi	r4,r4,32
   1cda4:	1105883a 	add	r2,r2,r4
   1cda8:	10800017 	ldw	r2,0(r2)
                        {
                            if (next_cluster < 0x0000fff8)
                            {
                                active_files[file_handle].current_cluster_index = next_cluster;
								active_files[file_handle].current_sector_in_cluster = 0;
                                data_sector = boot_sector_data.data_sector_offset + (active_files[file_handle].current_cluster_index - 2)*boot_sector_data.sectors_per_cluster +
   1cdac:	1885883a 	add	r2,r3,r2
   1cdb0:	e0bffa15 	stw	r2,-24(fp)
   1cdb4:	00001606 	br	1ce10 <alt_up_sd_card_write+0x2d8>
   1cdb8:	00001506 	br	1ce10 <alt_up_sd_card_write+0x2d8>
                                  active_files[file_handle].current_sector_in_cluster;                                
                            }
                        }
                        else
                        {
                            return false;
   1cdbc:	0005883a 	mov	r2,zero
   1cdc0:	00012006 	br	1d244 <alt_up_sd_card_write+0x70c>
                        }
                    }
                    else
                    {
                        active_files[file_handle].current_sector_in_cluster = active_files[file_handle].current_sector_in_cluster + 1;
   1cdc4:	e13ffe0f 	ldh	r4,-8(fp)
   1cdc8:	e0fffe0f 	ldh	r3,-8(fp)
   1cdcc:	008000f4 	movhi	r2,3
   1cdd0:	10a16c04 	addi	r2,r2,-31312
   1cdd4:	180691ba 	slli	r3,r3,6
   1cdd8:	18c00804 	addi	r3,r3,32
   1cddc:	10c5883a 	add	r2,r2,r3
   1cde0:	10800017 	ldw	r2,0(r2)
   1cde4:	10c00044 	addi	r3,r2,1
   1cde8:	008000f4 	movhi	r2,3
   1cdec:	10a16c04 	addi	r2,r2,-31312
   1cdf0:	200891ba 	slli	r4,r4,6
   1cdf4:	21000804 	addi	r4,r4,32
   1cdf8:	1105883a 	add	r2,r2,r4
   1cdfc:	10c00015 	stw	r3,0(r2)
                        data_sector = data_sector + 1;
   1ce00:	e0bffa17 	ldw	r2,-24(fp)
   1ce04:	10800044 	addi	r2,r2,1
   1ce08:	e0bffa15 	stw	r2,-24(fp)
			if (active_files[file_handle].current_byte_position < active_files[file_handle].file_size_in_bytes)
            {
                if ((active_files[file_handle].current_byte_position > 0) && (buffer_offset == 0))
                {
                    // Read in a new sector of data.
                    if (active_files[file_handle].current_sector_in_cluster == boot_sector_data.sectors_per_cluster - 1)
   1ce0c:	00003e06 	br	1cf08 <alt_up_sd_card_write+0x3d0>
   1ce10:	00003d06 	br	1cf08 <alt_up_sd_card_write+0x3d0>
                        data_sector = data_sector + 1;
                    }
                }else{
                	// Go to the next cluster.
					unsigned short int next_cluster;
					if (get_cluster_flag(active_files[file_handle].current_cluster_index, &next_cluster))
   1ce14:	e0fffe0f 	ldh	r3,-8(fp)
   1ce18:	008000f4 	movhi	r2,3
   1ce1c:	10a16c04 	addi	r2,r2,-31312
   1ce20:	180691ba 	slli	r3,r3,6
   1ce24:	18c00704 	addi	r3,r3,28
   1ce28:	10c5883a 	add	r2,r2,r3
   1ce2c:	10c00017 	ldw	r3,0(r2)
   1ce30:	e0bffc04 	addi	r2,fp,-16
   1ce34:	1809883a 	mov	r4,r3
   1ce38:	100b883a 	mov	r5,r2
   1ce3c:	00192480 	call	19248 <get_cluster_flag>
   1ce40:	10002f26 	beq	r2,zero,1cf00 <alt_up_sd_card_write+0x3c8>
					{
						if (next_cluster < 0x0000fff8)
   1ce44:	e0bffc0b 	ldhu	r2,-16(fp)
   1ce48:	10bfffcc 	andi	r2,r2,65535
   1ce4c:	10bffe28 	cmpgeui	r2,r2,65528
   1ce50:	10002d1e 	bne	r2,zero,1cf08 <alt_up_sd_card_write+0x3d0>
						{
							active_files[file_handle].current_cluster_index = next_cluster;
   1ce54:	e13ffe0f 	ldh	r4,-8(fp)
   1ce58:	e0bffc0b 	ldhu	r2,-16(fp)
   1ce5c:	10ffffcc 	andi	r3,r2,65535
   1ce60:	008000f4 	movhi	r2,3
   1ce64:	10a16c04 	addi	r2,r2,-31312
   1ce68:	200891ba 	slli	r4,r4,6
   1ce6c:	21000704 	addi	r4,r4,28
   1ce70:	1105883a 	add	r2,r2,r4
   1ce74:	10c00015 	stw	r3,0(r2)
							active_files[file_handle].current_sector_in_cluster = 0;
   1ce78:	e0fffe0f 	ldh	r3,-8(fp)
   1ce7c:	008000f4 	movhi	r2,3
   1ce80:	10a16c04 	addi	r2,r2,-31312
   1ce84:	180691ba 	slli	r3,r3,6
   1ce88:	18c00804 	addi	r3,r3,32
   1ce8c:	10c5883a 	add	r2,r2,r3
   1ce90:	10000015 	stw	zero,0(r2)
							data_sector = boot_sector_data.data_sector_offset + (active_files[file_handle].current_cluster_index - 2)*boot_sector_data.sectors_per_cluster +
   1ce94:	008000f4 	movhi	r2,3
   1ce98:	10a15704 	addi	r2,r2,-31396
   1ce9c:	10c01417 	ldw	r3,80(r2)
   1cea0:	e13ffe0f 	ldh	r4,-8(fp)
   1cea4:	008000f4 	movhi	r2,3
   1cea8:	10a16c04 	addi	r2,r2,-31312
   1ceac:	200891ba 	slli	r4,r4,6
   1ceb0:	21000704 	addi	r4,r4,28
   1ceb4:	1105883a 	add	r2,r2,r4
   1ceb8:	10800017 	ldw	r2,0(r2)
   1cebc:	113fff84 	addi	r4,r2,-2
   1cec0:	008000f4 	movhi	r2,3
   1cec4:	10a15704 	addi	r2,r2,-31396
   1cec8:	10800383 	ldbu	r2,14(r2)
   1cecc:	10803fcc 	andi	r2,r2,255
   1ced0:	2085383a 	mul	r2,r4,r2
   1ced4:	1887883a 	add	r3,r3,r2
									active_files[file_handle].current_sector_in_cluster;
   1ced8:	e13ffe0f 	ldh	r4,-8(fp)
   1cedc:	008000f4 	movhi	r2,3
   1cee0:	10a16c04 	addi	r2,r2,-31312
   1cee4:	200891ba 	slli	r4,r4,6
   1cee8:	21000804 	addi	r4,r4,32
   1ceec:	1105883a 	add	r2,r2,r4
   1cef0:	10800017 	ldw	r2,0(r2)
					{
						if (next_cluster < 0x0000fff8)
						{
							active_files[file_handle].current_cluster_index = next_cluster;
							active_files[file_handle].current_sector_in_cluster = 0;
							data_sector = boot_sector_data.data_sector_offset + (active_files[file_handle].current_cluster_index - 2)*boot_sector_data.sectors_per_cluster +
   1cef4:	1885883a 	add	r2,r3,r2
   1cef8:	e0bffa15 	stw	r2,-24(fp)
   1cefc:	00008506 	br	1d114 <alt_up_sd_card_write+0x5dc>
									active_files[file_handle].current_sector_in_cluster;
						}
					}
					else
					{
						return false;
   1cf00:	0005883a 	mov	r2,zero
   1cf04:	0000cf06 	br	1d244 <alt_up_sd_card_write+0x70c>
   1cf08:	00008206 	br	1d114 <alt_up_sd_card_write+0x5dc>
                }
            }
			else
			{
				/* You are adding data to the end of the file, so increment its size and look for an additional data cluster if needed. */
				if ((active_files[file_handle].current_byte_position > 0) && (buffer_offset == 0))
   1cf0c:	e0fffe0f 	ldh	r3,-8(fp)
   1cf10:	008000f4 	movhi	r2,3
   1cf14:	10a16c04 	addi	r2,r2,-31312
   1cf18:	180691ba 	slli	r3,r3,6
   1cf1c:	18c00904 	addi	r3,r3,36
   1cf20:	10c5883a 	add	r2,r2,r3
   1cf24:	10800017 	ldw	r2,0(r2)
   1cf28:	10007a26 	beq	r2,zero,1d114 <alt_up_sd_card_write+0x5dc>
   1cf2c:	e0bffb0f 	ldh	r2,-20(fp)
   1cf30:	1000781e 	bne	r2,zero,1d114 <alt_up_sd_card_write+0x5dc>
				{
					if (active_files[file_handle].current_sector_in_cluster == boot_sector_data.sectors_per_cluster - 1)
   1cf34:	e0fffe0f 	ldh	r3,-8(fp)
   1cf38:	008000f4 	movhi	r2,3
   1cf3c:	10a16c04 	addi	r2,r2,-31312
   1cf40:	180691ba 	slli	r3,r3,6
   1cf44:	18c00804 	addi	r3,r3,32
   1cf48:	10c5883a 	add	r2,r2,r3
   1cf4c:	10c00017 	ldw	r3,0(r2)
   1cf50:	008000f4 	movhi	r2,3
   1cf54:	10a15704 	addi	r2,r2,-31396
   1cf58:	10800383 	ldbu	r2,14(r2)
   1cf5c:	10803fcc 	andi	r2,r2,255
   1cf60:	10bfffc4 	addi	r2,r2,-1
   1cf64:	18803e1e 	bne	r3,r2,1d060 <alt_up_sd_card_write+0x528>
					{
						/* Find a new cluster if possible. */
						unsigned int cluster_number;

						if (find_first_empty_cluster(&cluster_number))
   1cf68:	e0bffd04 	addi	r2,fp,-12
   1cf6c:	1009883a 	mov	r4,r2
   1cf70:	001b2180 	call	1b218 <find_first_empty_cluster>
   1cf74:	10003826 	beq	r2,zero,1d058 <alt_up_sd_card_write+0x520>
						{
							// mark clusters in both File Allocation Tables.
							mark_cluster(active_files[file_handle].current_cluster_index, ((unsigned short int) (cluster_number & 0x0000ffff)), true);
   1cf78:	e0fffe0f 	ldh	r3,-8(fp)
   1cf7c:	008000f4 	movhi	r2,3
   1cf80:	10a16c04 	addi	r2,r2,-31312
   1cf84:	180691ba 	slli	r3,r3,6
   1cf88:	18c00704 	addi	r3,r3,28
   1cf8c:	10c5883a 	add	r2,r2,r3
   1cf90:	10c00017 	ldw	r3,0(r2)
   1cf94:	e0bffd17 	ldw	r2,-12(fp)
   1cf98:	10bfffcc 	andi	r2,r2,65535
   1cf9c:	10a0001c 	xori	r2,r2,32768
   1cfa0:	10a00004 	addi	r2,r2,-32768
   1cfa4:	1809883a 	mov	r4,r3
   1cfa8:	100b883a 	mov	r5,r2
   1cfac:	01800044 	movi	r6,1
   1cfb0:	00192fc0 	call	192fc <mark_cluster>
							mark_cluster(cluster_number, 0xffff, true);
   1cfb4:	e0bffd17 	ldw	r2,-12(fp)
   1cfb8:	1009883a 	mov	r4,r2
   1cfbc:	017fffc4 	movi	r5,-1
   1cfc0:	01800044 	movi	r6,1
   1cfc4:	00192fc0 	call	192fc <mark_cluster>
							mark_cluster(active_files[file_handle].current_cluster_index, ((unsigned short int) (cluster_number & 0x0000ffff)), false);
   1cfc8:	e0fffe0f 	ldh	r3,-8(fp)
   1cfcc:	008000f4 	movhi	r2,3
   1cfd0:	10a16c04 	addi	r2,r2,-31312
   1cfd4:	180691ba 	slli	r3,r3,6
   1cfd8:	18c00704 	addi	r3,r3,28
   1cfdc:	10c5883a 	add	r2,r2,r3
   1cfe0:	10c00017 	ldw	r3,0(r2)
   1cfe4:	e0bffd17 	ldw	r2,-12(fp)
   1cfe8:	10bfffcc 	andi	r2,r2,65535
   1cfec:	10a0001c 	xori	r2,r2,32768
   1cff0:	10a00004 	addi	r2,r2,-32768
   1cff4:	1809883a 	mov	r4,r3
   1cff8:	100b883a 	mov	r5,r2
   1cffc:	000d883a 	mov	r6,zero
   1d000:	00192fc0 	call	192fc <mark_cluster>
							mark_cluster(cluster_number, 0xffff, false);
   1d004:	e0bffd17 	ldw	r2,-12(fp)
   1d008:	1009883a 	mov	r4,r2
   1d00c:	017fffc4 	movi	r5,-1
   1d010:	000d883a 	mov	r6,zero
   1d014:	00192fc0 	call	192fc <mark_cluster>
							// Change cluster index and sector index to compute a new data sector.
							active_files[file_handle].current_cluster_index = cluster_number;
   1d018:	e13ffe0f 	ldh	r4,-8(fp)
   1d01c:	e0fffd17 	ldw	r3,-12(fp)
   1d020:	008000f4 	movhi	r2,3
   1d024:	10a16c04 	addi	r2,r2,-31312
   1d028:	200891ba 	slli	r4,r4,6
   1d02c:	21000704 	addi	r4,r4,28
   1d030:	1105883a 	add	r2,r2,r4
   1d034:	10c00015 	stw	r3,0(r2)
							active_files[file_handle].current_sector_in_cluster = 0;
   1d038:	e0fffe0f 	ldh	r3,-8(fp)
   1d03c:	008000f4 	movhi	r2,3
   1d040:	10a16c04 	addi	r2,r2,-31312
   1d044:	180691ba 	slli	r3,r3,6
   1d048:	18c00804 	addi	r3,r3,32
   1d04c:	10c5883a 	add	r2,r2,r3
   1d050:	10000015 	stw	zero,0(r2)
   1d054:	00001506 	br	1d0ac <alt_up_sd_card_write+0x574>
						}
						else
						{
							return false;
   1d058:	0005883a 	mov	r2,zero
   1d05c:	00007906 	br	1d244 <alt_up_sd_card_write+0x70c>
						}
					}
					else
					{
						/* Read the next sector in the cluster and modify it. We only need to change the data_sector value. The actual read happens a few lines below. */
						active_files[file_handle].current_sector_in_cluster = active_files[file_handle].current_byte_position / boot_sector_data.sector_size_in_bytes;
   1d060:	e13ffe0f 	ldh	r4,-8(fp)
   1d064:	e0fffe0f 	ldh	r3,-8(fp)
   1d068:	008000f4 	movhi	r2,3
   1d06c:	10a16c04 	addi	r2,r2,-31312
   1d070:	180691ba 	slli	r3,r3,6
   1d074:	18c00904 	addi	r3,r3,36
   1d078:	10c5883a 	add	r2,r2,r3
   1d07c:	10c00017 	ldw	r3,0(r2)
   1d080:	008000f4 	movhi	r2,3
   1d084:	10a15704 	addi	r2,r2,-31396
   1d088:	1080030b 	ldhu	r2,12(r2)
   1d08c:	10bfffcc 	andi	r2,r2,65535
   1d090:	1887203a 	divu	r3,r3,r2
   1d094:	008000f4 	movhi	r2,3
   1d098:	10a16c04 	addi	r2,r2,-31312
   1d09c:	200891ba 	slli	r4,r4,6
   1d0a0:	21000804 	addi	r4,r4,32
   1d0a4:	1105883a 	add	r2,r2,r4
   1d0a8:	10c00015 	stw	r3,0(r2)
					}
					data_sector = boot_sector_data.data_sector_offset + (active_files[file_handle].current_cluster_index - 2)*boot_sector_data.sectors_per_cluster +
   1d0ac:	008000f4 	movhi	r2,3
   1d0b0:	10a15704 	addi	r2,r2,-31396
   1d0b4:	10c01417 	ldw	r3,80(r2)
   1d0b8:	e13ffe0f 	ldh	r4,-8(fp)
   1d0bc:	008000f4 	movhi	r2,3
   1d0c0:	10a16c04 	addi	r2,r2,-31312
   1d0c4:	200891ba 	slli	r4,r4,6
   1d0c8:	21000704 	addi	r4,r4,28
   1d0cc:	1105883a 	add	r2,r2,r4
   1d0d0:	10800017 	ldw	r2,0(r2)
   1d0d4:	113fff84 	addi	r4,r2,-2
   1d0d8:	008000f4 	movhi	r2,3
   1d0dc:	10a15704 	addi	r2,r2,-31396
   1d0e0:	10800383 	ldbu	r2,14(r2)
   1d0e4:	10803fcc 	andi	r2,r2,255
   1d0e8:	2085383a 	mul	r2,r4,r2
   1d0ec:	1887883a 	add	r3,r3,r2
                          active_files[file_handle].current_sector_in_cluster;
   1d0f0:	e13ffe0f 	ldh	r4,-8(fp)
   1d0f4:	008000f4 	movhi	r2,3
   1d0f8:	10a16c04 	addi	r2,r2,-31312
   1d0fc:	200891ba 	slli	r4,r4,6
   1d100:	21000804 	addi	r4,r4,32
   1d104:	1105883a 	add	r2,r2,r4
   1d108:	10800017 	ldw	r2,0(r2)
					else
					{
						/* Read the next sector in the cluster and modify it. We only need to change the data_sector value. The actual read happens a few lines below. */
						active_files[file_handle].current_sector_in_cluster = active_files[file_handle].current_byte_position / boot_sector_data.sector_size_in_bytes;
					}
					data_sector = boot_sector_data.data_sector_offset + (active_files[file_handle].current_cluster_index - 2)*boot_sector_data.sectors_per_cluster +
   1d10c:	1885883a 	add	r2,r3,r2
   1d110:	e0bffa15 	stw	r2,-24(fp)
                          active_files[file_handle].current_sector_in_cluster;
				}
			}
            // Reading a data sector into the buffer. Note that changes to the most recently modified sector will be saved before
			// a new sector is read from the SD Card.
            if (current_sector_index != data_sector + fat_partition_offset_in_512_byte_sectors)
   1d114:	d0e81817 	ldw	r3,-24480(gp)
   1d118:	e0bffa17 	ldw	r2,-24(fp)
   1d11c:	1885883a 	add	r2,r3,r2
   1d120:	1007883a 	mov	r3,r2
   1d124:	d0a81c17 	ldw	r2,-24464(gp)
   1d128:	18800726 	beq	r3,r2,1d148 <alt_up_sd_card_write+0x610>
            {
                if (!Read_Sector_Data(data_sector, fat_partition_offset_in_512_byte_sectors))
   1d12c:	d0a81817 	ldw	r2,-24480(gp)
   1d130:	e13ffa17 	ldw	r4,-24(fp)
   1d134:	100b883a 	mov	r5,r2
   1d138:	00191700 	call	19170 <Read_Sector_Data>
   1d13c:	1000021e 	bne	r2,zero,1d148 <alt_up_sd_card_write+0x610>
                {
					return false;
   1d140:	0005883a 	mov	r2,zero
   1d144:	00003f06 	br	1d244 <alt_up_sd_card_write+0x70c>
                }
            }
            // Write a byte of data to the buffer.
			IOWR_8DIRECT(buffer_memory, buffer_offset, byte_of_data);
   1d148:	d0e81717 	ldw	r3,-24484(gp)
   1d14c:	e0bffb0f 	ldh	r2,-20(fp)
   1d150:	1885883a 	add	r2,r3,r2
   1d154:	e0ffff07 	ldb	r3,-4(fp)
   1d158:	10c00025 	stbio	r3,0(r2)
			active_files[file_handle].current_byte_position = active_files[file_handle].current_byte_position + 1;
   1d15c:	e13ffe0f 	ldh	r4,-8(fp)
   1d160:	e0fffe0f 	ldh	r3,-8(fp)
   1d164:	008000f4 	movhi	r2,3
   1d168:	10a16c04 	addi	r2,r2,-31312
   1d16c:	180691ba 	slli	r3,r3,6
   1d170:	18c00904 	addi	r3,r3,36
   1d174:	10c5883a 	add	r2,r2,r3
   1d178:	10800017 	ldw	r2,0(r2)
   1d17c:	10c00044 	addi	r3,r2,1
   1d180:	008000f4 	movhi	r2,3
   1d184:	10a16c04 	addi	r2,r2,-31312
   1d188:	200891ba 	slli	r4,r4,6
   1d18c:	21000904 	addi	r4,r4,36
   1d190:	1105883a 	add	r2,r2,r4
   1d194:	10c00015 	stw	r3,0(r2)

			// Modify the file record only when necessary.
			if (active_files[file_handle].current_byte_position >= active_files[file_handle].file_size_in_bytes)
   1d198:	e0fffe0f 	ldh	r3,-8(fp)
   1d19c:	008000f4 	movhi	r2,3
   1d1a0:	10a16c04 	addi	r2,r2,-31312
   1d1a4:	180691ba 	slli	r3,r3,6
   1d1a8:	18c00904 	addi	r3,r3,36
   1d1ac:	10c5883a 	add	r2,r2,r3
   1d1b0:	10c00017 	ldw	r3,0(r2)
   1d1b4:	e13ffe0f 	ldh	r4,-8(fp)
   1d1b8:	008000f4 	movhi	r2,3
   1d1bc:	10a16c04 	addi	r2,r2,-31312
   1d1c0:	200891ba 	slli	r4,r4,6
   1d1c4:	21000604 	addi	r4,r4,24
   1d1c8:	1105883a 	add	r2,r2,r4
   1d1cc:	10800017 	ldw	r2,0(r2)
   1d1d0:	18801736 	bltu	r3,r2,1d230 <alt_up_sd_card_write+0x6f8>
			{
				active_files[file_handle].file_size_in_bytes = active_files[file_handle].file_size_in_bytes + 1;
   1d1d4:	e13ffe0f 	ldh	r4,-8(fp)
   1d1d8:	e0fffe0f 	ldh	r3,-8(fp)
   1d1dc:	008000f4 	movhi	r2,3
   1d1e0:	10a16c04 	addi	r2,r2,-31312
   1d1e4:	180691ba 	slli	r3,r3,6
   1d1e8:	18c00604 	addi	r3,r3,24
   1d1ec:	10c5883a 	add	r2,r2,r3
   1d1f0:	10800017 	ldw	r2,0(r2)
   1d1f4:	10c00044 	addi	r3,r2,1
   1d1f8:	008000f4 	movhi	r2,3
   1d1fc:	10a16c04 	addi	r2,r2,-31312
   1d200:	200891ba 	slli	r4,r4,6
   1d204:	21000604 	addi	r4,r4,24
   1d208:	1105883a 	add	r2,r2,r4
   1d20c:	10c00015 	stw	r3,0(r2)
				active_files[file_handle].modified = true;
   1d210:	e0fffe0f 	ldh	r3,-8(fp)
   1d214:	008000f4 	movhi	r2,3
   1d218:	10a16c04 	addi	r2,r2,-31312
   1d21c:	180691ba 	slli	r3,r3,6
   1d220:	18c00e04 	addi	r3,r3,56
   1d224:	10c5883a 	add	r2,r2,r3
   1d228:	00c00044 	movi	r3,1
   1d22c:	10c00015 	stw	r3,0(r2)
			}
            // Invaldiate the buffer to ensure that the buffer contents are written to the SD card whe nthe file is closed.
            current_sector_modified = true;
   1d230:	00800044 	movi	r2,1
   1d234:	d0a81b15 	stw	r2,-24468(gp)
			result = true;
   1d238:	00800044 	movi	r2,1
   1d23c:	e0bff915 	stw	r2,-28(fp)
		}
    }
    
    return result;
   1d240:	e0bff917 	ldw	r2,-28(fp)
}
   1d244:	e037883a 	mov	sp,fp
   1d248:	dfc00117 	ldw	ra,4(sp)
   1d24c:	df000017 	ldw	fp,0(sp)
   1d250:	dec00204 	addi	sp,sp,8
   1d254:	f800283a 	ret

0001d258 <alt_up_sd_card_fclose>:


bool alt_up_sd_card_fclose(short int file_handle)
// This function closes an opened file and saves data to SD Card if necessary.
{
   1d258:	defffb04 	addi	sp,sp,-20
   1d25c:	dfc00415 	stw	ra,16(sp)
   1d260:	df000315 	stw	fp,12(sp)
   1d264:	df000304 	addi	fp,sp,12
   1d268:	2005883a 	mov	r2,r4
   1d26c:	e0bfff0d 	sth	r2,-4(fp)
    bool result = false;
   1d270:	e03ffd15 	stw	zero,-12(fp)
    if ((alt_up_sd_card_is_Present()) && (is_sd_card_formated_as_FAT16))
   1d274:	001bd840 	call	1bd84 <alt_up_sd_card_is_Present>
   1d278:	10006026 	beq	r2,zero,1d3fc <alt_up_sd_card_fclose+0x1a4>
   1d27c:	d0a81117 	ldw	r2,-24508(gp)
   1d280:	10005e26 	beq	r2,zero,1d3fc <alt_up_sd_card_fclose+0x1a4>
    {
        if (active_files[file_handle].in_use) 
   1d284:	e0ffff0f 	ldh	r3,-4(fp)
   1d288:	008000f4 	movhi	r2,3
   1d28c:	10a16c04 	addi	r2,r2,-31312
   1d290:	180691ba 	slli	r3,r3,6
   1d294:	18c00f04 	addi	r3,r3,60
   1d298:	10c5883a 	add	r2,r2,r3
   1d29c:	10800017 	ldw	r2,0(r2)
   1d2a0:	10005626 	beq	r2,zero,1d3fc <alt_up_sd_card_fclose+0x1a4>
        {
			if (active_files[file_handle].modified)
   1d2a4:	e0ffff0f 	ldh	r3,-4(fp)
   1d2a8:	008000f4 	movhi	r2,3
   1d2ac:	10a16c04 	addi	r2,r2,-31312
   1d2b0:	180691ba 	slli	r3,r3,6
   1d2b4:	18c00e04 	addi	r3,r3,56
   1d2b8:	10c5883a 	add	r2,r2,r3
   1d2bc:	10800017 	ldw	r2,0(r2)
   1d2c0:	10004526 	beq	r2,zero,1d3d8 <alt_up_sd_card_fclose+0x180>
			{
				unsigned int record_sector = active_files[file_handle].file_record_sector_in_cluster;
   1d2c4:	e0ffff0f 	ldh	r3,-4(fp)
   1d2c8:	008000f4 	movhi	r2,3
   1d2cc:	10a16c04 	addi	r2,r2,-31312
   1d2d0:	180691ba 	slli	r3,r3,6
   1d2d4:	18c00b04 	addi	r3,r3,44
   1d2d8:	10c5883a 	add	r2,r2,r3
   1d2dc:	10800017 	ldw	r2,0(r2)
   1d2e0:	e0bffe15 	stw	r2,-8(fp)
				if (active_files[file_handle].file_record_cluster == 0)
   1d2e4:	e0ffff0f 	ldh	r3,-4(fp)
   1d2e8:	008000f4 	movhi	r2,3
   1d2ec:	10a16c04 	addi	r2,r2,-31312
   1d2f0:	180691ba 	slli	r3,r3,6
   1d2f4:	18c00a04 	addi	r3,r3,40
   1d2f8:	10c5883a 	add	r2,r2,r3
   1d2fc:	10800017 	ldw	r2,0(r2)
   1d300:	1000071e 	bne	r2,zero,1d320 <alt_up_sd_card_fclose+0xc8>
				{
					record_sector = record_sector + boot_sector_data.root_directory_sector_offset;
   1d304:	008000f4 	movhi	r2,3
   1d308:	10a15704 	addi	r2,r2,-31396
   1d30c:	10801317 	ldw	r2,76(r2)
   1d310:	e0fffe17 	ldw	r3,-8(fp)
   1d314:	1885883a 	add	r2,r3,r2
   1d318:	e0bffe15 	stw	r2,-8(fp)
   1d31c:	00001406 	br	1d370 <alt_up_sd_card_fclose+0x118>
				}
				else
				{
					record_sector = record_sector + boot_sector_data.data_sector_offset + 
   1d320:	008000f4 	movhi	r2,3
   1d324:	10a15704 	addi	r2,r2,-31396
   1d328:	10c01417 	ldw	r3,80(r2)
   1d32c:	e0bffe17 	ldw	r2,-8(fp)
   1d330:	1887883a 	add	r3,r3,r2
									(active_files[file_handle].file_record_cluster - 2)*boot_sector_data.sectors_per_cluster;
   1d334:	e13fff0f 	ldh	r4,-4(fp)
   1d338:	008000f4 	movhi	r2,3
   1d33c:	10a16c04 	addi	r2,r2,-31312
   1d340:	200891ba 	slli	r4,r4,6
   1d344:	21000a04 	addi	r4,r4,40
   1d348:	1105883a 	add	r2,r2,r4
   1d34c:	10800017 	ldw	r2,0(r2)
   1d350:	113fff84 	addi	r4,r2,-2
   1d354:	008000f4 	movhi	r2,3
   1d358:	10a15704 	addi	r2,r2,-31396
   1d35c:	10800383 	ldbu	r2,14(r2)
   1d360:	10803fcc 	andi	r2,r2,255
   1d364:	2085383a 	mul	r2,r4,r2
				{
					record_sector = record_sector + boot_sector_data.root_directory_sector_offset;
				}
				else
				{
					record_sector = record_sector + boot_sector_data.data_sector_offset + 
   1d368:	1885883a 	add	r2,r3,r2
   1d36c:	e0bffe15 	stw	r2,-8(fp)
									(active_files[file_handle].file_record_cluster - 2)*boot_sector_data.sectors_per_cluster;
				}
				if (Read_Sector_Data(record_sector, fat_partition_offset_in_512_byte_sectors))
   1d370:	e0fffe17 	ldw	r3,-8(fp)
   1d374:	d0a81817 	ldw	r2,-24480(gp)
   1d378:	1809883a 	mov	r4,r3
   1d37c:	100b883a 	mov	r5,r2
   1d380:	00191700 	call	19170 <Read_Sector_Data>
   1d384:	10001426 	beq	r2,zero,1d3d8 <alt_up_sd_card_fclose+0x180>
				{
					if (Write_File_Record_At_Offset(active_files[file_handle].file_record_offset, &(active_files[file_handle])))
   1d388:	e0ffff0f 	ldh	r3,-4(fp)
   1d38c:	008000f4 	movhi	r2,3
   1d390:	10a16c04 	addi	r2,r2,-31312
   1d394:	180691ba 	slli	r3,r3,6
   1d398:	18c00c04 	addi	r3,r3,48
   1d39c:	10c5883a 	add	r2,r2,r3
   1d3a0:	1080000b 	ldhu	r2,0(r2)
   1d3a4:	113fffcc 	andi	r4,r2,65535
   1d3a8:	2120001c 	xori	r4,r4,32768
   1d3ac:	21200004 	addi	r4,r4,-32768
   1d3b0:	e0bfff0f 	ldh	r2,-4(fp)
   1d3b4:	100691ba 	slli	r3,r2,6
   1d3b8:	008000f4 	movhi	r2,3
   1d3bc:	10a16c04 	addi	r2,r2,-31312
   1d3c0:	1885883a 	add	r2,r3,r2
   1d3c4:	100b883a 	mov	r5,r2
   1d3c8:	00198040 	call	19804 <Write_File_Record_At_Offset>
   1d3cc:	10000226 	beq	r2,zero,1d3d8 <alt_up_sd_card_fclose+0x180>
					{
						// Make sure that the Data has been saved to the SD Card.
						result = Save_Modified_Sector();
   1d3d0:	00191240 	call	19124 <Save_Modified_Sector>
   1d3d4:	e0bffd15 	stw	r2,-12(fp)
					}
				}
			}
			active_files[file_handle].in_use = false;
   1d3d8:	e0ffff0f 	ldh	r3,-4(fp)
   1d3dc:	008000f4 	movhi	r2,3
   1d3e0:	10a16c04 	addi	r2,r2,-31312
   1d3e4:	180691ba 	slli	r3,r3,6
   1d3e8:	18c00f04 	addi	r3,r3,60
   1d3ec:	10c5883a 	add	r2,r2,r3
   1d3f0:	10000015 	stw	zero,0(r2)
			result = true;
   1d3f4:	00800044 	movi	r2,1
   1d3f8:	e0bffd15 	stw	r2,-12(fp)
        }
    }
    
    return result;
   1d3fc:	e0bffd17 	ldw	r2,-12(fp)
}
   1d400:	e037883a 	mov	sp,fp
   1d404:	dfc00117 	ldw	ra,4(sp)
   1d408:	df000017 	ldw	fp,0(sp)
   1d40c:	dec00204 	addi	sp,sp,8
   1d410:	f800283a 	ret

0001d414 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
   1d414:	defffa04 	addi	sp,sp,-24
   1d418:	dfc00515 	stw	ra,20(sp)
   1d41c:	df000415 	stw	fp,16(sp)
   1d420:	df000404 	addi	fp,sp,16
   1d424:	e13ffd15 	stw	r4,-12(fp)
   1d428:	e17ffe15 	stw	r5,-8(fp)
   1d42c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   1d430:	e0bffd17 	ldw	r2,-12(fp)
   1d434:	10800017 	ldw	r2,0(r2)
   1d438:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
   1d43c:	e0bffc17 	ldw	r2,-16(fp)
   1d440:	10c00a04 	addi	r3,r2,40
   1d444:	e0bffd17 	ldw	r2,-12(fp)
   1d448:	10800217 	ldw	r2,8(r2)
   1d44c:	1809883a 	mov	r4,r3
   1d450:	e17ffe17 	ldw	r5,-8(fp)
   1d454:	e1bfff17 	ldw	r6,-4(fp)
   1d458:	100f883a 	mov	r7,r2
   1d45c:	001dbc40 	call	1dbc4 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
   1d460:	e037883a 	mov	sp,fp
   1d464:	dfc00117 	ldw	ra,4(sp)
   1d468:	df000017 	ldw	fp,0(sp)
   1d46c:	dec00204 	addi	sp,sp,8
   1d470:	f800283a 	ret

0001d474 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
   1d474:	defffa04 	addi	sp,sp,-24
   1d478:	dfc00515 	stw	ra,20(sp)
   1d47c:	df000415 	stw	fp,16(sp)
   1d480:	df000404 	addi	fp,sp,16
   1d484:	e13ffd15 	stw	r4,-12(fp)
   1d488:	e17ffe15 	stw	r5,-8(fp)
   1d48c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   1d490:	e0bffd17 	ldw	r2,-12(fp)
   1d494:	10800017 	ldw	r2,0(r2)
   1d498:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
   1d49c:	e0bffc17 	ldw	r2,-16(fp)
   1d4a0:	10c00a04 	addi	r3,r2,40
   1d4a4:	e0bffd17 	ldw	r2,-12(fp)
   1d4a8:	10800217 	ldw	r2,8(r2)
   1d4ac:	1809883a 	mov	r4,r3
   1d4b0:	e17ffe17 	ldw	r5,-8(fp)
   1d4b4:	e1bfff17 	ldw	r6,-4(fp)
   1d4b8:	100f883a 	mov	r7,r2
   1d4bc:	001de780 	call	1de78 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
   1d4c0:	e037883a 	mov	sp,fp
   1d4c4:	dfc00117 	ldw	ra,4(sp)
   1d4c8:	df000017 	ldw	fp,0(sp)
   1d4cc:	dec00204 	addi	sp,sp,8
   1d4d0:	f800283a 	ret

0001d4d4 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
   1d4d4:	defffc04 	addi	sp,sp,-16
   1d4d8:	dfc00315 	stw	ra,12(sp)
   1d4dc:	df000215 	stw	fp,8(sp)
   1d4e0:	df000204 	addi	fp,sp,8
   1d4e4:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   1d4e8:	e0bfff17 	ldw	r2,-4(fp)
   1d4ec:	10800017 	ldw	r2,0(r2)
   1d4f0:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
   1d4f4:	e0bffe17 	ldw	r2,-8(fp)
   1d4f8:	10c00a04 	addi	r3,r2,40
   1d4fc:	e0bfff17 	ldw	r2,-4(fp)
   1d500:	10800217 	ldw	r2,8(r2)
   1d504:	1809883a 	mov	r4,r3
   1d508:	100b883a 	mov	r5,r2
   1d50c:	001da700 	call	1da70 <altera_avalon_jtag_uart_close>
}
   1d510:	e037883a 	mov	sp,fp
   1d514:	dfc00117 	ldw	ra,4(sp)
   1d518:	df000017 	ldw	fp,0(sp)
   1d51c:	dec00204 	addi	sp,sp,8
   1d520:	f800283a 	ret

0001d524 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
   1d524:	defffa04 	addi	sp,sp,-24
   1d528:	dfc00515 	stw	ra,20(sp)
   1d52c:	df000415 	stw	fp,16(sp)
   1d530:	df000404 	addi	fp,sp,16
   1d534:	e13ffd15 	stw	r4,-12(fp)
   1d538:	e17ffe15 	stw	r5,-8(fp)
   1d53c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
   1d540:	e0bffd17 	ldw	r2,-12(fp)
   1d544:	10800017 	ldw	r2,0(r2)
   1d548:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
   1d54c:	e0bffc17 	ldw	r2,-16(fp)
   1d550:	10800a04 	addi	r2,r2,40
   1d554:	1009883a 	mov	r4,r2
   1d558:	e17ffe17 	ldw	r5,-8(fp)
   1d55c:	e1bfff17 	ldw	r6,-4(fp)
   1d560:	001dad80 	call	1dad8 <altera_avalon_jtag_uart_ioctl>
}
   1d564:	e037883a 	mov	sp,fp
   1d568:	dfc00117 	ldw	ra,4(sp)
   1d56c:	df000017 	ldw	fp,0(sp)
   1d570:	dec00204 	addi	sp,sp,8
   1d574:	f800283a 	ret

0001d578 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
   1d578:	defff104 	addi	sp,sp,-60
   1d57c:	dfc00e15 	stw	ra,56(sp)
   1d580:	df000d15 	stw	fp,52(sp)
   1d584:	df000d04 	addi	fp,sp,52
   1d588:	e13ff915 	stw	r4,-28(fp)
   1d58c:	e17ffa15 	stw	r5,-24(fp)
   1d590:	e1bffb15 	stw	r6,-20(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
   1d594:	e0bff917 	ldw	r2,-28(fp)
   1d598:	10800c04 	addi	r2,r2,48
   1d59c:	e0bff315 	stw	r2,-52(fp)
   1d5a0:	e03ff40d 	sth	zero,-48(fp)

static ALT_INLINE int ALT_ALWAYS_INLINE alt_flag_create (OS_FLAG_GRP** pgroup, 
               OS_FLAGS flags)
{
  INT8U err;
  *pgroup = OSFlagCreate (flags, &err);
   1d5a4:	e0fff40b 	ldhu	r3,-48(fp)
   1d5a8:	e0bff884 	addi	r2,fp,-30
   1d5ac:	1809883a 	mov	r4,r3
   1d5b0:	100b883a 	mov	r5,r2
   1d5b4:	00134200 	call	13420 <OSFlagCreate>
   1d5b8:	1007883a 	mov	r3,r2
   1d5bc:	e0bff317 	ldw	r2,-52(fp)
   1d5c0:	10c00015 	stw	r3,0(r2)
  ALT_SEM_CREATE(&sp->read_lock, 1);
   1d5c4:	e0bff917 	ldw	r2,-28(fp)
   1d5c8:	10800a04 	addi	r2,r2,40
   1d5cc:	e0bff515 	stw	r2,-44(fp)
   1d5d0:	00800044 	movi	r2,1
   1d5d4:	e0bff60d 	sth	r2,-40(fp)
   1d5d8:	e0bff60b 	ldhu	r2,-40(fp)
   1d5dc:	1009883a 	mov	r4,r2
   1d5e0:	00163780 	call	16378 <OSSemCreate>
   1d5e4:	1007883a 	mov	r3,r2
   1d5e8:	e0bff517 	ldw	r2,-44(fp)
   1d5ec:	10c00015 	stw	r3,0(r2)
  ALT_SEM_CREATE(&sp->write_lock, 1);
   1d5f0:	e0bff917 	ldw	r2,-28(fp)
   1d5f4:	10800b04 	addi	r2,r2,44
   1d5f8:	e0bff715 	stw	r2,-36(fp)
   1d5fc:	00800044 	movi	r2,1
   1d600:	e0bff80d 	sth	r2,-32(fp)
   1d604:	e0bff80b 	ldhu	r2,-32(fp)
   1d608:	1009883a 	mov	r4,r2
   1d60c:	00163780 	call	16378 <OSSemCreate>
   1d610:	1007883a 	mov	r3,r2
   1d614:	e0bff717 	ldw	r2,-36(fp)
   1d618:	10c00015 	stw	r3,0(r2)

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   1d61c:	e0bff917 	ldw	r2,-28(fp)
   1d620:	00c00044 	movi	r3,1
   1d624:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
   1d628:	e0bff917 	ldw	r2,-28(fp)
   1d62c:	10800017 	ldw	r2,0(r2)
   1d630:	10800104 	addi	r2,r2,4
   1d634:	1007883a 	mov	r3,r2
   1d638:	e0bff917 	ldw	r2,-28(fp)
   1d63c:	10800817 	ldw	r2,32(r2)
   1d640:	18800035 	stwio	r2,0(r3)
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
                      sp, NULL);
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
   1d644:	e0bffb17 	ldw	r2,-20(fp)
   1d648:	1009883a 	mov	r4,r2
   1d64c:	e17ff917 	ldw	r5,-28(fp)
   1d650:	018000b4 	movhi	r6,2
   1d654:	31b5ae04 	addi	r6,r6,-10568
   1d658:	001fcb80 	call	1fcb8 <alt_irq_register>
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
   1d65c:	e0bff917 	ldw	r2,-28(fp)
   1d660:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
   1d664:	e0bff917 	ldw	r2,-28(fp)
   1d668:	10c00204 	addi	r3,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
   1d66c:	008000b4 	movhi	r2,2
   1d670:	1094a304 	addi	r2,r2,21132
   1d674:	10800017 	ldw	r2,0(r2)
   1d678:	1809883a 	mov	r4,r3
   1d67c:	100b883a 	mov	r5,r2
   1d680:	018000b4 	movhi	r6,2
   1d684:	31b65804 	addi	r6,r6,-9888
   1d688:	e1fff917 	ldw	r7,-28(fp)
   1d68c:	001f7b80 	call	1f7b8 <alt_alarm_start>
   1d690:	1000040e 	bge	r2,zero,1d6a4 <altera_avalon_jtag_uart_init+0x12c>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
   1d694:	e0fff917 	ldw	r3,-28(fp)
   1d698:	00a00034 	movhi	r2,32768
   1d69c:	10bfffc4 	addi	r2,r2,-1
   1d6a0:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
   1d6a4:	e037883a 	mov	sp,fp
   1d6a8:	dfc00117 	ldw	ra,4(sp)
   1d6ac:	df000017 	ldw	fp,0(sp)
   1d6b0:	dec00204 	addi	sp,sp,8
   1d6b4:	f800283a 	ret

0001d6b8 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
   1d6b8:	defff104 	addi	sp,sp,-60
   1d6bc:	dfc00e15 	stw	ra,56(sp)
   1d6c0:	df000d15 	stw	fp,52(sp)
   1d6c4:	df000d04 	addi	fp,sp,52
   1d6c8:	e13ffe15 	stw	r4,-8(fp)
   1d6cc:	e17fff15 	stw	r5,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
   1d6d0:	e0bffe17 	ldw	r2,-8(fp)
   1d6d4:	e0bff515 	stw	r2,-44(fp)
  unsigned int base = sp->base;
   1d6d8:	e0bff517 	ldw	r2,-44(fp)
   1d6dc:	10800017 	ldw	r2,0(r2)
   1d6e0:	e0bff615 	stw	r2,-40(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   1d6e4:	e0bff617 	ldw	r2,-40(fp)
   1d6e8:	10800104 	addi	r2,r2,4
   1d6ec:	10800037 	ldwio	r2,0(r2)
   1d6f0:	e0bff715 	stw	r2,-36(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
   1d6f4:	e0bff717 	ldw	r2,-36(fp)
   1d6f8:	1080c00c 	andi	r2,r2,768
   1d6fc:	1000011e 	bne	r2,zero,1d704 <altera_avalon_jtag_uart_irq+0x4c>
      break;
   1d700:	00009206 	br	1d94c <altera_avalon_jtag_uart_irq+0x294>

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
   1d704:	e0bff717 	ldw	r2,-36(fp)
   1d708:	1080400c 	andi	r2,r2,256
   1d70c:	10004726 	beq	r2,zero,1d82c <altera_avalon_jtag_uart_irq+0x174>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
   1d710:	00800074 	movhi	r2,1
   1d714:	e0bff315 	stw	r2,-52(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   1d718:	e0bff517 	ldw	r2,-44(fp)
   1d71c:	10800d17 	ldw	r2,52(r2)
   1d720:	10800044 	addi	r2,r2,1
   1d724:	1081ffcc 	andi	r2,r2,2047
   1d728:	e0bff815 	stw	r2,-32(fp)
        if (next == sp->rx_out)
   1d72c:	e0bff517 	ldw	r2,-44(fp)
   1d730:	10c00e17 	ldw	r3,56(r2)
   1d734:	e0bff817 	ldw	r2,-32(fp)
   1d738:	1880011e 	bne	r3,r2,1d740 <altera_avalon_jtag_uart_irq+0x88>
          break;
   1d73c:	00002906 	br	1d7e4 <altera_avalon_jtag_uart_irq+0x12c>

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
   1d740:	e0bff617 	ldw	r2,-40(fp)
   1d744:	10800037 	ldwio	r2,0(r2)
   1d748:	e0bff315 	stw	r2,-52(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
   1d74c:	e0bff317 	ldw	r2,-52(fp)
   1d750:	10a0000c 	andi	r2,r2,32768
   1d754:	1000011e 	bne	r2,zero,1d75c <altera_avalon_jtag_uart_irq+0xa4>
          break;
   1d758:	00002206 	br	1d7e4 <altera_avalon_jtag_uart_irq+0x12c>

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
   1d75c:	e0bff517 	ldw	r2,-44(fp)
   1d760:	10800d17 	ldw	r2,52(r2)
   1d764:	e0fff317 	ldw	r3,-52(fp)
   1d768:	1809883a 	mov	r4,r3
   1d76c:	e0fff517 	ldw	r3,-44(fp)
   1d770:	1885883a 	add	r2,r3,r2
   1d774:	10801104 	addi	r2,r2,68
   1d778:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   1d77c:	e0bff517 	ldw	r2,-44(fp)
   1d780:	10800d17 	ldw	r2,52(r2)
   1d784:	10800044 	addi	r2,r2,1
   1d788:	10c1ffcc 	andi	r3,r2,2047
   1d78c:	e0bff517 	ldw	r2,-44(fp)
   1d790:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
   1d794:	e0bff517 	ldw	r2,-44(fp)
   1d798:	10800c17 	ldw	r2,48(r2)
   1d79c:	e0bff915 	stw	r2,-28(fp)
   1d7a0:	00800044 	movi	r2,1
   1d7a4:	e0bffa0d 	sth	r2,-24(fp)
   1d7a8:	00800044 	movi	r2,1
   1d7ac:	e0bffa85 	stb	r2,-22(fp)
                   OS_FLAGS     flags, 
                   INT8U        opt)
{
  INT8U err;

  if (OSRunning)
   1d7b0:	008000b4 	movhi	r2,2
   1d7b4:	10948144 	addi	r2,r2,20997
   1d7b8:	10800003 	ldbu	r2,0(r2)
   1d7bc:	10803fcc 	andi	r2,r2,255
   1d7c0:	103fd526 	beq	r2,zero,1d718 <__alt_mem_Flash_flash_data+0xf401d718>
  {
    OSFlagPost (group, flags, opt, &err);
   1d7c4:	e17ffa0b 	ldhu	r5,-24(fp)
   1d7c8:	e0fffa83 	ldbu	r3,-22(fp)
   1d7cc:	e0bffcc4 	addi	r2,fp,-13
   1d7d0:	e13ff917 	ldw	r4,-28(fp)
   1d7d4:	180d883a 	mov	r6,r3
   1d7d8:	100f883a 	mov	r7,r2
   1d7dc:	00140900 	call	14090 <OSFlagPost>
      }
   1d7e0:	003fcd06 	br	1d718 <__alt_mem_Flash_flash_data+0xf401d718>

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
   1d7e4:	e0bff317 	ldw	r2,-52(fp)
   1d7e8:	10bfffec 	andhi	r2,r2,65535
   1d7ec:	10000f26 	beq	r2,zero,1d82c <altera_avalon_jtag_uart_irq+0x174>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   1d7f0:	e0bff517 	ldw	r2,-44(fp)
   1d7f4:	10c00817 	ldw	r3,32(r2)
   1d7f8:	00bfff84 	movi	r2,-2
   1d7fc:	1886703a 	and	r3,r3,r2
   1d800:	e0bff517 	ldw	r2,-44(fp)
   1d804:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
   1d808:	e0bff617 	ldw	r2,-40(fp)
   1d80c:	10800104 	addi	r2,r2,4
   1d810:	1007883a 	mov	r3,r2
   1d814:	e0bff517 	ldw	r2,-44(fp)
   1d818:	10800817 	ldw	r2,32(r2)
   1d81c:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   1d820:	e0bff617 	ldw	r2,-40(fp)
   1d824:	10800104 	addi	r2,r2,4
   1d828:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
   1d82c:	e0bff717 	ldw	r2,-36(fp)
   1d830:	1080800c 	andi	r2,r2,512
   1d834:	10004426 	beq	r2,zero,1d948 <altera_avalon_jtag_uart_irq+0x290>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
   1d838:	e0bff717 	ldw	r2,-36(fp)
   1d83c:	1004d43a 	srli	r2,r2,16
   1d840:	e0bff415 	stw	r2,-48(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
   1d844:	00002706 	br	1d8e4 <altera_avalon_jtag_uart_irq+0x22c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
   1d848:	e0bff617 	ldw	r2,-40(fp)
   1d84c:	e0fff517 	ldw	r3,-44(fp)
   1d850:	18c01017 	ldw	r3,64(r3)
   1d854:	e13ff517 	ldw	r4,-44(fp)
   1d858:	20c7883a 	add	r3,r4,r3
   1d85c:	18c21104 	addi	r3,r3,2116
   1d860:	18c00003 	ldbu	r3,0(r3)
   1d864:	18c03fcc 	andi	r3,r3,255
   1d868:	18c0201c 	xori	r3,r3,128
   1d86c:	18ffe004 	addi	r3,r3,-128
   1d870:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   1d874:	e0bff517 	ldw	r2,-44(fp)
   1d878:	10801017 	ldw	r2,64(r2)
   1d87c:	10800044 	addi	r2,r2,1
   1d880:	10c1ffcc 	andi	r3,r2,2047
   1d884:	e0bff517 	ldw	r2,-44(fp)
   1d888:	10c01015 	stw	r3,64(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);
   1d88c:	e0bff517 	ldw	r2,-44(fp)
   1d890:	10800c17 	ldw	r2,48(r2)
   1d894:	e0bffb15 	stw	r2,-20(fp)
   1d898:	00800084 	movi	r2,2
   1d89c:	e0bffc0d 	sth	r2,-16(fp)
   1d8a0:	00800044 	movi	r2,1
   1d8a4:	e0bffc85 	stb	r2,-14(fp)
                   OS_FLAGS     flags, 
                   INT8U        opt)
{
  INT8U err;

  if (OSRunning)
   1d8a8:	008000b4 	movhi	r2,2
   1d8ac:	10948144 	addi	r2,r2,20997
   1d8b0:	10800003 	ldbu	r2,0(r2)
   1d8b4:	10803fcc 	andi	r2,r2,255
   1d8b8:	10000726 	beq	r2,zero,1d8d8 <altera_avalon_jtag_uart_irq+0x220>
  {
    OSFlagPost (group, flags, opt, &err);
   1d8bc:	e17ffc0b 	ldhu	r5,-16(fp)
   1d8c0:	e0fffc83 	ldbu	r3,-14(fp)
   1d8c4:	e0bffd04 	addi	r2,fp,-12
   1d8c8:	e13ffb17 	ldw	r4,-20(fp)
   1d8cc:	180d883a 	mov	r6,r3
   1d8d0:	100f883a 	mov	r7,r2
   1d8d4:	00140900 	call	14090 <OSFlagPost>

        space--;
   1d8d8:	e0bff417 	ldw	r2,-48(fp)
   1d8dc:	10bfffc4 	addi	r2,r2,-1
   1d8e0:	e0bff415 	stw	r2,-48(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
   1d8e4:	e0bff417 	ldw	r2,-48(fp)
   1d8e8:	10000526 	beq	r2,zero,1d900 <altera_avalon_jtag_uart_irq+0x248>
   1d8ec:	e0bff517 	ldw	r2,-44(fp)
   1d8f0:	10c01017 	ldw	r3,64(r2)
   1d8f4:	e0bff517 	ldw	r2,-44(fp)
   1d8f8:	10800f17 	ldw	r2,60(r2)
   1d8fc:	18bfd21e 	bne	r3,r2,1d848 <__alt_mem_Flash_flash_data+0xf401d848>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
   1d900:	e0bff417 	ldw	r2,-48(fp)
   1d904:	10001026 	beq	r2,zero,1d948 <altera_avalon_jtag_uart_irq+0x290>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   1d908:	e0bff517 	ldw	r2,-44(fp)
   1d90c:	10c00817 	ldw	r3,32(r2)
   1d910:	00bfff44 	movi	r2,-3
   1d914:	1886703a 	and	r3,r3,r2
   1d918:	e0bff517 	ldw	r2,-44(fp)
   1d91c:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   1d920:	e0bff517 	ldw	r2,-44(fp)
   1d924:	10800017 	ldw	r2,0(r2)
   1d928:	10800104 	addi	r2,r2,4
   1d92c:	1007883a 	mov	r3,r2
   1d930:	e0bff517 	ldw	r2,-44(fp)
   1d934:	10800817 	ldw	r2,32(r2)
   1d938:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   1d93c:	e0bff617 	ldw	r2,-40(fp)
   1d940:	10800104 	addi	r2,r2,4
   1d944:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
   1d948:	003f6606 	br	1d6e4 <__alt_mem_Flash_flash_data+0xf401d6e4>
}
   1d94c:	e037883a 	mov	sp,fp
   1d950:	dfc00117 	ldw	ra,4(sp)
   1d954:	df000017 	ldw	fp,0(sp)
   1d958:	dec00204 	addi	sp,sp,8
   1d95c:	f800283a 	ret

0001d960 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
   1d960:	defff904 	addi	sp,sp,-28
   1d964:	dfc00615 	stw	ra,24(sp)
   1d968:	df000515 	stw	fp,20(sp)
   1d96c:	df000504 	addi	fp,sp,20
   1d970:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
   1d974:	e0bfff17 	ldw	r2,-4(fp)
   1d978:	e0bffb15 	stw	r2,-20(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
   1d97c:	e0bffb17 	ldw	r2,-20(fp)
   1d980:	10800017 	ldw	r2,0(r2)
   1d984:	10800104 	addi	r2,r2,4
   1d988:	10800037 	ldwio	r2,0(r2)
   1d98c:	e0bffc15 	stw	r2,-16(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
   1d990:	e0bffc17 	ldw	r2,-16(fp)
   1d994:	1081000c 	andi	r2,r2,1024
   1d998:	10000b26 	beq	r2,zero,1d9c8 <altera_avalon_jtag_uart_timeout+0x68>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
   1d99c:	e0bffb17 	ldw	r2,-20(fp)
   1d9a0:	10800017 	ldw	r2,0(r2)
   1d9a4:	10800104 	addi	r2,r2,4
   1d9a8:	1007883a 	mov	r3,r2
   1d9ac:	e0bffb17 	ldw	r2,-20(fp)
   1d9b0:	10800817 	ldw	r2,32(r2)
   1d9b4:	10810014 	ori	r2,r2,1024
   1d9b8:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
   1d9bc:	e0bffb17 	ldw	r2,-20(fp)
   1d9c0:	10000915 	stw	zero,36(r2)
   1d9c4:	00002206 	br	1da50 <altera_avalon_jtag_uart_timeout+0xf0>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
   1d9c8:	e0bffb17 	ldw	r2,-20(fp)
   1d9cc:	10c00917 	ldw	r3,36(r2)
   1d9d0:	00a00034 	movhi	r2,32768
   1d9d4:	10bfff04 	addi	r2,r2,-4
   1d9d8:	10c01d36 	bltu	r2,r3,1da50 <altera_avalon_jtag_uart_timeout+0xf0>
    sp->host_inactive++;
   1d9dc:	e0bffb17 	ldw	r2,-20(fp)
   1d9e0:	10800917 	ldw	r2,36(r2)
   1d9e4:	10c00044 	addi	r3,r2,1
   1d9e8:	e0bffb17 	ldw	r2,-20(fp)
   1d9ec:	10c00915 	stw	r3,36(r2)
    
    if (sp->host_inactive >= sp->timeout) {
   1d9f0:	e0bffb17 	ldw	r2,-20(fp)
   1d9f4:	10c00917 	ldw	r3,36(r2)
   1d9f8:	e0bffb17 	ldw	r2,-20(fp)
   1d9fc:	10800117 	ldw	r2,4(r2)
   1da00:	18801336 	bltu	r3,r2,1da50 <altera_avalon_jtag_uart_timeout+0xf0>
      /* Post an event to indicate host is inactive (for jtag_uart_read */
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
   1da04:	e0bffb17 	ldw	r2,-20(fp)
   1da08:	10800c17 	ldw	r2,48(r2)
   1da0c:	e0bffd15 	stw	r2,-12(fp)
   1da10:	00800104 	movi	r2,4
   1da14:	e0bffe0d 	sth	r2,-8(fp)
   1da18:	00800044 	movi	r2,1
   1da1c:	e0bffe85 	stb	r2,-6(fp)
                   OS_FLAGS     flags, 
                   INT8U        opt)
{
  INT8U err;

  if (OSRunning)
   1da20:	008000b4 	movhi	r2,2
   1da24:	10948144 	addi	r2,r2,20997
   1da28:	10800003 	ldbu	r2,0(r2)
   1da2c:	10803fcc 	andi	r2,r2,255
   1da30:	10000726 	beq	r2,zero,1da50 <altera_avalon_jtag_uart_timeout+0xf0>
  {
    OSFlagPost (group, flags, opt, &err);
   1da34:	e17ffe0b 	ldhu	r5,-8(fp)
   1da38:	e0fffe83 	ldbu	r3,-6(fp)
   1da3c:	e0bffec4 	addi	r2,fp,-5
   1da40:	e13ffd17 	ldw	r4,-12(fp)
   1da44:	180d883a 	mov	r6,r3
   1da48:	100f883a 	mov	r7,r2
   1da4c:	00140900 	call	14090 <OSFlagPost>
   1da50:	008000b4 	movhi	r2,2
   1da54:	1094a304 	addi	r2,r2,21132
   1da58:	10800017 	ldw	r2,0(r2)
    }
  }

  return alt_ticks_per_second();
}
   1da5c:	e037883a 	mov	sp,fp
   1da60:	dfc00117 	ldw	ra,4(sp)
   1da64:	df000017 	ldw	fp,0(sp)
   1da68:	dec00204 	addi	sp,sp,8
   1da6c:	f800283a 	ret

0001da70 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
   1da70:	defffd04 	addi	sp,sp,-12
   1da74:	df000215 	stw	fp,8(sp)
   1da78:	df000204 	addi	fp,sp,8
   1da7c:	e13ffe15 	stw	r4,-8(fp)
   1da80:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   1da84:	00000506 	br	1da9c <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
   1da88:	e0bfff17 	ldw	r2,-4(fp)
   1da8c:	1090000c 	andi	r2,r2,16384
   1da90:	10000226 	beq	r2,zero,1da9c <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
   1da94:	00bffd44 	movi	r2,-11
   1da98:	00000b06 	br	1dac8 <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   1da9c:	e0bffe17 	ldw	r2,-8(fp)
   1daa0:	10c01017 	ldw	r3,64(r2)
   1daa4:	e0bffe17 	ldw	r2,-8(fp)
   1daa8:	10800f17 	ldw	r2,60(r2)
   1daac:	18800526 	beq	r3,r2,1dac4 <altera_avalon_jtag_uart_close+0x54>
   1dab0:	e0bffe17 	ldw	r2,-8(fp)
   1dab4:	10c00917 	ldw	r3,36(r2)
   1dab8:	e0bffe17 	ldw	r2,-8(fp)
   1dabc:	10800117 	ldw	r2,4(r2)
   1dac0:	18bff136 	bltu	r3,r2,1da88 <__alt_mem_Flash_flash_data+0xf401da88>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
   1dac4:	0005883a 	mov	r2,zero
}
   1dac8:	e037883a 	mov	sp,fp
   1dacc:	df000017 	ldw	fp,0(sp)
   1dad0:	dec00104 	addi	sp,sp,4
   1dad4:	f800283a 	ret

0001dad8 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
   1dad8:	defffa04 	addi	sp,sp,-24
   1dadc:	df000515 	stw	fp,20(sp)
   1dae0:	df000504 	addi	fp,sp,20
   1dae4:	e13ffd15 	stw	r4,-12(fp)
   1dae8:	e17ffe15 	stw	r5,-8(fp)
   1daec:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
   1daf0:	00bff9c4 	movi	r2,-25
   1daf4:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
   1daf8:	e0bffe17 	ldw	r2,-8(fp)
   1dafc:	10da8060 	cmpeqi	r3,r2,27137
   1db00:	1800031e 	bne	r3,zero,1db10 <altera_avalon_jtag_uart_ioctl+0x38>
   1db04:	109a80a0 	cmpeqi	r2,r2,27138
   1db08:	1000191e 	bne	r2,zero,1db70 <altera_avalon_jtag_uart_ioctl+0x98>
      rc = 0;
    }
    break;

  default:
    break;
   1db0c:	00002806 	br	1dbb0 <altera_avalon_jtag_uart_ioctl+0xd8>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
   1db10:	e0bffd17 	ldw	r2,-12(fp)
   1db14:	10c00117 	ldw	r3,4(r2)
   1db18:	00a00034 	movhi	r2,32768
   1db1c:	10bfffc4 	addi	r2,r2,-1
   1db20:	18801226 	beq	r3,r2,1db6c <altera_avalon_jtag_uart_ioctl+0x94>
    {
      int timeout = *((int *)arg);
   1db24:	e0bfff17 	ldw	r2,-4(fp)
   1db28:	10800017 	ldw	r2,0(r2)
   1db2c:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
   1db30:	e0bffc17 	ldw	r2,-16(fp)
   1db34:	10800090 	cmplti	r2,r2,2
   1db38:	1000061e 	bne	r2,zero,1db54 <altera_avalon_jtag_uart_ioctl+0x7c>
   1db3c:	e0fffc17 	ldw	r3,-16(fp)
   1db40:	00a00034 	movhi	r2,32768
   1db44:	10bfffc4 	addi	r2,r2,-1
   1db48:	18800226 	beq	r3,r2,1db54 <altera_avalon_jtag_uart_ioctl+0x7c>
   1db4c:	e0bffc17 	ldw	r2,-16(fp)
   1db50:	00000206 	br	1db5c <altera_avalon_jtag_uart_ioctl+0x84>
   1db54:	00a00034 	movhi	r2,32768
   1db58:	10bfff84 	addi	r2,r2,-2
   1db5c:	e0fffd17 	ldw	r3,-12(fp)
   1db60:	18800115 	stw	r2,4(r3)
      rc = 0;
   1db64:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
   1db68:	00001106 	br	1dbb0 <altera_avalon_jtag_uart_ioctl+0xd8>
   1db6c:	00001006 	br	1dbb0 <altera_avalon_jtag_uart_ioctl+0xd8>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
   1db70:	e0bffd17 	ldw	r2,-12(fp)
   1db74:	10c00117 	ldw	r3,4(r2)
   1db78:	00a00034 	movhi	r2,32768
   1db7c:	10bfffc4 	addi	r2,r2,-1
   1db80:	18800a26 	beq	r3,r2,1dbac <altera_avalon_jtag_uart_ioctl+0xd4>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
   1db84:	e0bffd17 	ldw	r2,-12(fp)
   1db88:	10c00917 	ldw	r3,36(r2)
   1db8c:	e0bffd17 	ldw	r2,-12(fp)
   1db90:	10800117 	ldw	r2,4(r2)
   1db94:	1885803a 	cmpltu	r2,r3,r2
   1db98:	10c03fcc 	andi	r3,r2,255
   1db9c:	e0bfff17 	ldw	r2,-4(fp)
   1dba0:	10c00015 	stw	r3,0(r2)
      rc = 0;
   1dba4:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
   1dba8:	00000006 	br	1dbac <altera_avalon_jtag_uart_ioctl+0xd4>
   1dbac:	0001883a 	nop

  default:
    break;
  }

  return rc;
   1dbb0:	e0bffb17 	ldw	r2,-20(fp)
}
   1dbb4:	e037883a 	mov	sp,fp
   1dbb8:	df000017 	ldw	fp,0(sp)
   1dbbc:	dec00104 	addi	sp,sp,4
   1dbc0:	f800283a 	ret

0001dbc4 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
   1dbc4:	deffec04 	addi	sp,sp,-80
   1dbc8:	dfc01315 	stw	ra,76(sp)
   1dbcc:	df001215 	stw	fp,72(sp)
   1dbd0:	df001204 	addi	fp,sp,72
   1dbd4:	e13ffc15 	stw	r4,-16(fp)
   1dbd8:	e17ffd15 	stw	r5,-12(fp)
   1dbdc:	e1bffe15 	stw	r6,-8(fp)
   1dbe0:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
   1dbe4:	e0bffd17 	ldw	r2,-12(fp)
   1dbe8:	e0bfef15 	stw	r2,-68(fp)

  /*
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);
   1dbec:	e0bffc17 	ldw	r2,-16(fp)
   1dbf0:	10800a17 	ldw	r2,40(r2)
   1dbf4:	e0bff415 	stw	r2,-48(fp)
   1dbf8:	e03ff50d 	sth	zero,-44(fp)

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sem_pend (OS_EVENT* sem, 
                  INT16U timeout)
{
  INT8U err;
  OSSemPend (sem, timeout, &err);
   1dbfc:	e0fff50b 	ldhu	r3,-44(fp)
   1dc00:	e0bffb04 	addi	r2,fp,-20
   1dc04:	e13ff417 	ldw	r4,-48(fp)
   1dc08:	180b883a 	mov	r5,r3
   1dc0c:	100d883a 	mov	r6,r2
   1dc10:	00166e00 	call	166e0 <OSSemPend>

  while (space > 0)
   1dc14:	00006506 	br	1ddac <altera_avalon_jtag_uart_read+0x1e8>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
   1dc18:	e0bffc17 	ldw	r2,-16(fp)
   1dc1c:	10800d17 	ldw	r2,52(r2)
   1dc20:	e0bff115 	stw	r2,-60(fp)
      out = sp->rx_out;
   1dc24:	e0bffc17 	ldw	r2,-16(fp)
   1dc28:	10800e17 	ldw	r2,56(r2)
   1dc2c:	e0bff215 	stw	r2,-56(fp)

      if (in >= out)
   1dc30:	e0fff117 	ldw	r3,-60(fp)
   1dc34:	e0bff217 	ldw	r2,-56(fp)
   1dc38:	18800536 	bltu	r3,r2,1dc50 <altera_avalon_jtag_uart_read+0x8c>
        n = in - out;
   1dc3c:	e0fff117 	ldw	r3,-60(fp)
   1dc40:	e0bff217 	ldw	r2,-56(fp)
   1dc44:	1885c83a 	sub	r2,r3,r2
   1dc48:	e0bff015 	stw	r2,-64(fp)
   1dc4c:	00000406 	br	1dc60 <altera_avalon_jtag_uart_read+0x9c>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
   1dc50:	00c20004 	movi	r3,2048
   1dc54:	e0bff217 	ldw	r2,-56(fp)
   1dc58:	1885c83a 	sub	r2,r3,r2
   1dc5c:	e0bff015 	stw	r2,-64(fp)

      if (n == 0)
   1dc60:	e0bff017 	ldw	r2,-64(fp)
   1dc64:	1000011e 	bne	r2,zero,1dc6c <altera_avalon_jtag_uart_read+0xa8>
        break; /* No more data available */
   1dc68:	00001d06 	br	1dce0 <altera_avalon_jtag_uart_read+0x11c>

      if (n > space)
   1dc6c:	e0fffe17 	ldw	r3,-8(fp)
   1dc70:	e0bff017 	ldw	r2,-64(fp)
   1dc74:	1880022e 	bgeu	r3,r2,1dc80 <altera_avalon_jtag_uart_read+0xbc>
        n = space;
   1dc78:	e0bffe17 	ldw	r2,-8(fp)
   1dc7c:	e0bff015 	stw	r2,-64(fp)

      memcpy(ptr, sp->rx_buf + out, n);
   1dc80:	e0bff217 	ldw	r2,-56(fp)
   1dc84:	10801104 	addi	r2,r2,68
   1dc88:	e0fffc17 	ldw	r3,-16(fp)
   1dc8c:	1885883a 	add	r2,r3,r2
   1dc90:	e13fef17 	ldw	r4,-68(fp)
   1dc94:	100b883a 	mov	r5,r2
   1dc98:	e1bff017 	ldw	r6,-64(fp)
   1dc9c:	00084e40 	call	84e4 <memcpy>
      ptr   += n;
   1dca0:	e0ffef17 	ldw	r3,-68(fp)
   1dca4:	e0bff017 	ldw	r2,-64(fp)
   1dca8:	1885883a 	add	r2,r3,r2
   1dcac:	e0bfef15 	stw	r2,-68(fp)
      space -= n;
   1dcb0:	e0fffe17 	ldw	r3,-8(fp)
   1dcb4:	e0bff017 	ldw	r2,-64(fp)
   1dcb8:	1885c83a 	sub	r2,r3,r2
   1dcbc:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   1dcc0:	e0fff217 	ldw	r3,-56(fp)
   1dcc4:	e0bff017 	ldw	r2,-64(fp)
   1dcc8:	1885883a 	add	r2,r3,r2
   1dccc:	10c1ffcc 	andi	r3,r2,2047
   1dcd0:	e0bffc17 	ldw	r2,-16(fp)
   1dcd4:	10c00e15 	stw	r3,56(r2)
    }
    while (space > 0);
   1dcd8:	e0bffe17 	ldw	r2,-8(fp)
   1dcdc:	00bfce16 	blt	zero,r2,1dc18 <__alt_mem_Flash_flash_data+0xf401dc18>

    /* If we read any data then return it */
    if (ptr != buffer)
   1dce0:	e0ffef17 	ldw	r3,-68(fp)
   1dce4:	e0bffd17 	ldw	r2,-12(fp)
   1dce8:	18800126 	beq	r3,r2,1dcf0 <altera_avalon_jtag_uart_read+0x12c>
      break;
   1dcec:	00003106 	br	1ddb4 <altera_avalon_jtag_uart_read+0x1f0>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
   1dcf0:	e0bfff17 	ldw	r2,-4(fp)
   1dcf4:	1090000c 	andi	r2,r2,16384
   1dcf8:	10000126 	beq	r2,zero,1dd00 <altera_avalon_jtag_uart_read+0x13c>
      break;
   1dcfc:	00002d06 	br	1ddb4 <altera_avalon_jtag_uart_read+0x1f0>

#ifdef __ucosii__
    /* OS Present: Pend on a flag if the OS is running, otherwise spin */
    if(OSRunning == OS_TRUE) {
   1dd00:	008000b4 	movhi	r2,2
   1dd04:	10948144 	addi	r2,r2,20997
   1dd08:	10800003 	ldbu	r2,0(r2)
   1dd0c:	10803fcc 	andi	r2,r2,255
   1dd10:	10800058 	cmpnei	r2,r2,1
   1dd14:	1000161e 	bne	r2,zero,1dd70 <altera_avalon_jtag_uart_read+0x1ac>
       * When running in a multi-threaded mode, we pend on the read event
       * flag set and timeout event flag set in the isr. This avoids wasting CPU
       * cycles waiting in this thread, when we could be doing something more
       * profitable elsewhere.
       */
      ALT_FLAG_PEND (sp->events,
   1dd18:	e0bffc17 	ldw	r2,-16(fp)
   1dd1c:	10800c17 	ldw	r2,48(r2)
   1dd20:	e0bff615 	stw	r2,-40(fp)
   1dd24:	00800144 	movi	r2,5
   1dd28:	e0bff70d 	sth	r2,-36(fp)
   1dd2c:	00bfe0c4 	movi	r2,-125
   1dd30:	e0bff785 	stb	r2,-34(fp)
   1dd34:	e03ff80d 	sth	zero,-32(fp)
                   OS_FLAGS flags, 
                   INT8U wait_type, 
                   INT16U timeout)
{
  INT8U err;
  if (OSRunning)
   1dd38:	008000b4 	movhi	r2,2
   1dd3c:	10948144 	addi	r2,r2,20997
   1dd40:	10800003 	ldbu	r2,0(r2)
   1dd44:	10803fcc 	andi	r2,r2,255
   1dd48:	10001326 	beq	r2,zero,1dd98 <altera_avalon_jtag_uart_read+0x1d4>
  {
    OSFlagPend (group, flags, wait_type, timeout, &err);
   1dd4c:	e17ff70b 	ldhu	r5,-36(fp)
   1dd50:	e1bff783 	ldbu	r6,-34(fp)
   1dd54:	e0fff80b 	ldhu	r3,-32(fp)
   1dd58:	e0bffb44 	addi	r2,fp,-19
   1dd5c:	d8800015 	stw	r2,0(sp)
   1dd60:	e13ff617 	ldw	r4,-40(fp)
   1dd64:	180f883a 	mov	r7,r3
   1dd68:	0013a380 	call	13a38 <OSFlagPend>
   1dd6c:	00000a06 	br	1dd98 <altera_avalon_jtag_uart_read+0x1d4>
                     OS_FLAG_WAIT_SET_ANY + OS_FLAG_CONSUME,
                     0);
    }
    else {
      /* Spin until more data arrives or until host disconnects */
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
   1dd70:	0001883a 	nop
   1dd74:	e0bffc17 	ldw	r2,-16(fp)
   1dd78:	10c00d17 	ldw	r3,52(r2)
   1dd7c:	e0bff117 	ldw	r2,-60(fp)
   1dd80:	1880051e 	bne	r3,r2,1dd98 <altera_avalon_jtag_uart_read+0x1d4>
   1dd84:	e0bffc17 	ldw	r2,-16(fp)
   1dd88:	10c00917 	ldw	r3,36(r2)
   1dd8c:	e0bffc17 	ldw	r2,-16(fp)
   1dd90:	10800117 	ldw	r2,4(r2)
   1dd94:	18bff736 	bltu	r3,r2,1dd74 <__alt_mem_Flash_flash_data+0xf401dd74>
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
   1dd98:	e0bffc17 	ldw	r2,-16(fp)
   1dd9c:	10c00d17 	ldw	r3,52(r2)
   1dda0:	e0bff117 	ldw	r2,-60(fp)
   1dda4:	1880011e 	bne	r3,r2,1ddac <altera_avalon_jtag_uart_read+0x1e8>
      break;
   1dda8:	00000206 	br	1ddb4 <altera_avalon_jtag_uart_read+0x1f0>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   1ddac:	e0bffe17 	ldw	r2,-8(fp)
   1ddb0:	00bf9916 	blt	zero,r2,1dc18 <__alt_mem_Flash_flash_data+0xf401dc18>
  /*
   * Now that access to the circular buffer is complete, release the read
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);
   1ddb4:	e0bffc17 	ldw	r2,-16(fp)
   1ddb8:	10800a17 	ldw	r2,40(r2)
   1ddbc:	1009883a 	mov	r4,r2
   1ddc0:	0016ab40 	call	16ab4 <OSSemPost>

  if (ptr != buffer)
   1ddc4:	e0ffef17 	ldw	r3,-68(fp)
   1ddc8:	e0bffd17 	ldw	r2,-12(fp)
   1ddcc:	18801826 	beq	r3,r2,1de30 <altera_avalon_jtag_uart_read+0x26c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1ddd0:	0005303a 	rdctl	r2,status
   1ddd4:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1ddd8:	e0fff917 	ldw	r3,-28(fp)
   1dddc:	00bfff84 	movi	r2,-2
   1dde0:	1884703a 	and	r2,r3,r2
   1dde4:	1001703a 	wrctl	status,r2
  
  return context;
   1dde8:	e0bff917 	ldw	r2,-28(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
   1ddec:	e0bff315 	stw	r2,-52(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   1ddf0:	e0bffc17 	ldw	r2,-16(fp)
   1ddf4:	10800817 	ldw	r2,32(r2)
   1ddf8:	10c00054 	ori	r3,r2,1
   1ddfc:	e0bffc17 	ldw	r2,-16(fp)
   1de00:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   1de04:	e0bffc17 	ldw	r2,-16(fp)
   1de08:	10800017 	ldw	r2,0(r2)
   1de0c:	10800104 	addi	r2,r2,4
   1de10:	1007883a 	mov	r3,r2
   1de14:	e0bffc17 	ldw	r2,-16(fp)
   1de18:	10800817 	ldw	r2,32(r2)
   1de1c:	18800035 	stwio	r2,0(r3)
   1de20:	e0bff317 	ldw	r2,-52(fp)
   1de24:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1de28:	e0bffa17 	ldw	r2,-24(fp)
   1de2c:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
   1de30:	e0ffef17 	ldw	r3,-68(fp)
   1de34:	e0bffd17 	ldw	r2,-12(fp)
   1de38:	18800426 	beq	r3,r2,1de4c <altera_avalon_jtag_uart_read+0x288>
    return ptr - buffer;
   1de3c:	e0ffef17 	ldw	r3,-68(fp)
   1de40:	e0bffd17 	ldw	r2,-12(fp)
   1de44:	1885c83a 	sub	r2,r3,r2
   1de48:	00000606 	br	1de64 <altera_avalon_jtag_uart_read+0x2a0>
  else if (flags & O_NONBLOCK)
   1de4c:	e0bfff17 	ldw	r2,-4(fp)
   1de50:	1090000c 	andi	r2,r2,16384
   1de54:	10000226 	beq	r2,zero,1de60 <altera_avalon_jtag_uart_read+0x29c>
    return -EWOULDBLOCK;
   1de58:	00bffd44 	movi	r2,-11
   1de5c:	00000106 	br	1de64 <altera_avalon_jtag_uart_read+0x2a0>
  else
    return -EIO;
   1de60:	00bffec4 	movi	r2,-5
}
   1de64:	e037883a 	mov	sp,fp
   1de68:	dfc00117 	ldw	ra,4(sp)
   1de6c:	df000017 	ldw	fp,0(sp)
   1de70:	dec00204 	addi	sp,sp,8
   1de74:	f800283a 	ret

0001de78 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
   1de78:	deffed04 	addi	sp,sp,-76
   1de7c:	dfc01215 	stw	ra,72(sp)
   1de80:	df001115 	stw	fp,68(sp)
   1de84:	df001104 	addi	fp,sp,68
   1de88:	e13ffc15 	stw	r4,-16(fp)
   1de8c:	e17ffd15 	stw	r5,-12(fp)
   1de90:	e1bffe15 	stw	r6,-8(fp)
   1de94:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
   1de98:	e03ff015 	stw	zero,-64(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
   1de9c:	e0bffd17 	ldw	r2,-12(fp)
   1dea0:	e0bff215 	stw	r2,-56(fp)

  /*
   * When running in a multi threaded environment, obtain the "write_lock"
   * semaphore. This ensures that writing to the device is thread-safe.
   */
  ALT_SEM_PEND (sp->write_lock, 0);
   1dea4:	e0bffc17 	ldw	r2,-16(fp)
   1dea8:	10800b17 	ldw	r2,44(r2)
   1deac:	e0bff515 	stw	r2,-44(fp)
   1deb0:	e03ff60d 	sth	zero,-40(fp)
   1deb4:	e0fff60b 	ldhu	r3,-40(fp)
   1deb8:	e0bffbc4 	addi	r2,fp,-17
   1debc:	e13ff517 	ldw	r4,-44(fp)
   1dec0:	180b883a 	mov	r5,r3
   1dec4:	100d883a 	mov	r6,r2
   1dec8:	00166e00 	call	166e0 <OSSemPend>

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   1decc:	00003806 	br	1dfb0 <altera_avalon_jtag_uart_write+0x138>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
   1ded0:	e0bffc17 	ldw	r2,-16(fp)
   1ded4:	10800f17 	ldw	r2,60(r2)
   1ded8:	e0bff315 	stw	r2,-52(fp)
      out = sp->tx_out;
   1dedc:	e0bffc17 	ldw	r2,-16(fp)
   1dee0:	10801017 	ldw	r2,64(r2)
   1dee4:	e0bff015 	stw	r2,-64(fp)

      if (in < out)
   1dee8:	e0fff317 	ldw	r3,-52(fp)
   1deec:	e0bff017 	ldw	r2,-64(fp)
   1def0:	1880062e 	bgeu	r3,r2,1df0c <altera_avalon_jtag_uart_write+0x94>
        n = out - 1 - in;
   1def4:	e0fff017 	ldw	r3,-64(fp)
   1def8:	e0bff317 	ldw	r2,-52(fp)
   1defc:	1885c83a 	sub	r2,r3,r2
   1df00:	10bfffc4 	addi	r2,r2,-1
   1df04:	e0bff115 	stw	r2,-60(fp)
   1df08:	00000b06 	br	1df38 <altera_avalon_jtag_uart_write+0xc0>
      else if (out > 0)
   1df0c:	e0bff017 	ldw	r2,-64(fp)
   1df10:	10000526 	beq	r2,zero,1df28 <altera_avalon_jtag_uart_write+0xb0>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
   1df14:	00c20004 	movi	r3,2048
   1df18:	e0bff317 	ldw	r2,-52(fp)
   1df1c:	1885c83a 	sub	r2,r3,r2
   1df20:	e0bff115 	stw	r2,-60(fp)
   1df24:	00000406 	br	1df38 <altera_avalon_jtag_uart_write+0xc0>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
   1df28:	00c1ffc4 	movi	r3,2047
   1df2c:	e0bff317 	ldw	r2,-52(fp)
   1df30:	1885c83a 	sub	r2,r3,r2
   1df34:	e0bff115 	stw	r2,-60(fp)

      if (n == 0)
   1df38:	e0bff117 	ldw	r2,-60(fp)
   1df3c:	1000011e 	bne	r2,zero,1df44 <altera_avalon_jtag_uart_write+0xcc>
        break;
   1df40:	00001d06 	br	1dfb8 <altera_avalon_jtag_uart_write+0x140>

      if (n > count)
   1df44:	e0fffe17 	ldw	r3,-8(fp)
   1df48:	e0bff117 	ldw	r2,-60(fp)
   1df4c:	1880022e 	bgeu	r3,r2,1df58 <altera_avalon_jtag_uart_write+0xe0>
        n = count;
   1df50:	e0bffe17 	ldw	r2,-8(fp)
   1df54:	e0bff115 	stw	r2,-60(fp)

      memcpy(sp->tx_buf + in, ptr, n);
   1df58:	e0bff317 	ldw	r2,-52(fp)
   1df5c:	10821104 	addi	r2,r2,2116
   1df60:	e0fffc17 	ldw	r3,-16(fp)
   1df64:	1885883a 	add	r2,r3,r2
   1df68:	1009883a 	mov	r4,r2
   1df6c:	e17ffd17 	ldw	r5,-12(fp)
   1df70:	e1bff117 	ldw	r6,-60(fp)
   1df74:	00084e40 	call	84e4 <memcpy>
      ptr   += n;
   1df78:	e0fffd17 	ldw	r3,-12(fp)
   1df7c:	e0bff117 	ldw	r2,-60(fp)
   1df80:	1885883a 	add	r2,r3,r2
   1df84:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
   1df88:	e0fffe17 	ldw	r3,-8(fp)
   1df8c:	e0bff117 	ldw	r2,-60(fp)
   1df90:	1885c83a 	sub	r2,r3,r2
   1df94:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   1df98:	e0fff317 	ldw	r3,-52(fp)
   1df9c:	e0bff117 	ldw	r2,-60(fp)
   1dfa0:	1885883a 	add	r2,r3,r2
   1dfa4:	10c1ffcc 	andi	r3,r2,2047
   1dfa8:	e0bffc17 	ldw	r2,-16(fp)
   1dfac:	10c00f15 	stw	r3,60(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   1dfb0:	e0bffe17 	ldw	r2,-8(fp)
   1dfb4:	00bfc616 	blt	zero,r2,1ded0 <__alt_mem_Flash_flash_data+0xf401ded0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1dfb8:	0005303a 	rdctl	r2,status
   1dfbc:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1dfc0:	e0fff717 	ldw	r3,-36(fp)
   1dfc4:	00bfff84 	movi	r2,-2
   1dfc8:	1884703a 	and	r2,r3,r2
   1dfcc:	1001703a 	wrctl	status,r2
  
  return context;
   1dfd0:	e0bff717 	ldw	r2,-36(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
   1dfd4:	e0bff415 	stw	r2,-48(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   1dfd8:	e0bffc17 	ldw	r2,-16(fp)
   1dfdc:	10800817 	ldw	r2,32(r2)
   1dfe0:	10c00094 	ori	r3,r2,2
   1dfe4:	e0bffc17 	ldw	r2,-16(fp)
   1dfe8:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   1dfec:	e0bffc17 	ldw	r2,-16(fp)
   1dff0:	10800017 	ldw	r2,0(r2)
   1dff4:	10800104 	addi	r2,r2,4
   1dff8:	1007883a 	mov	r3,r2
   1dffc:	e0bffc17 	ldw	r2,-16(fp)
   1e000:	10800817 	ldw	r2,32(r2)
   1e004:	18800035 	stwio	r2,0(r3)
   1e008:	e0bff417 	ldw	r2,-48(fp)
   1e00c:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1e010:	e0bff817 	ldw	r2,-32(fp)
   1e014:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
   1e018:	e0bffe17 	ldw	r2,-8(fp)
   1e01c:	00802e0e 	bge	zero,r2,1e0d8 <altera_avalon_jtag_uart_write+0x260>
    {
      if (flags & O_NONBLOCK)
   1e020:	e0bfff17 	ldw	r2,-4(fp)
   1e024:	1090000c 	andi	r2,r2,16384
   1e028:	10000126 	beq	r2,zero,1e030 <altera_avalon_jtag_uart_write+0x1b8>
        break;
   1e02c:	00002c06 	br	1e0e0 <altera_avalon_jtag_uart_write+0x268>

#ifdef __ucosii__
      /* OS Present: Pend on a flag if the OS is running, otherwise spin */
      if(OSRunning == OS_TRUE) {
   1e030:	008000b4 	movhi	r2,2
   1e034:	10948144 	addi	r2,r2,20997
   1e038:	10800003 	ldbu	r2,0(r2)
   1e03c:	10803fcc 	andi	r2,r2,255
   1e040:	10800058 	cmpnei	r2,r2,1
   1e044:	1000161e 	bne	r2,zero,1e0a0 <altera_avalon_jtag_uart_write+0x228>
         * more profitable elsewhere.
         */
#ifdef ALTERA_AVALON_JTAG_UART_IGNORE_FIFO_FULL_ERROR
        if(!sp->host_inactive)
#endif
        ALT_FLAG_PEND (sp->events,
   1e048:	e0bffc17 	ldw	r2,-16(fp)
   1e04c:	10800c17 	ldw	r2,48(r2)
   1e050:	e0bff915 	stw	r2,-28(fp)
   1e054:	00800184 	movi	r2,6
   1e058:	e0bffa0d 	sth	r2,-24(fp)
   1e05c:	00bfe0c4 	movi	r2,-125
   1e060:	e0bffa85 	stb	r2,-22(fp)
   1e064:	e03ffb0d 	sth	zero,-20(fp)
                   OS_FLAGS flags, 
                   INT8U wait_type, 
                   INT16U timeout)
{
  INT8U err;
  if (OSRunning)
   1e068:	008000b4 	movhi	r2,2
   1e06c:	10948144 	addi	r2,r2,20997
   1e070:	10800003 	ldbu	r2,0(r2)
   1e074:	10803fcc 	andi	r2,r2,255
   1e078:	10001326 	beq	r2,zero,1e0c8 <altera_avalon_jtag_uart_write+0x250>
  {
    OSFlagPend (group, flags, wait_type, timeout, &err);
   1e07c:	e17ffa0b 	ldhu	r5,-24(fp)
   1e080:	e1bffa83 	ldbu	r6,-22(fp)
   1e084:	e0fffb0b 	ldhu	r3,-20(fp)
   1e088:	e0bffb84 	addi	r2,fp,-18
   1e08c:	d8800015 	stw	r2,0(sp)
   1e090:	e13ff917 	ldw	r4,-28(fp)
   1e094:	180f883a 	mov	r7,r3
   1e098:	0013a380 	call	13a38 <OSFlagPend>
   1e09c:	00000a06 	br	1e0c8 <altera_avalon_jtag_uart_write+0x250>
        /*
         * OS not running: Wait for data to be removed from buffer.
         * Once the interrupt routine has removed some data then we
         * will be able to insert some more.
         */
        while (out == sp->tx_out && sp->host_inactive < sp->timeout)
   1e0a0:	0001883a 	nop
   1e0a4:	e0bffc17 	ldw	r2,-16(fp)
   1e0a8:	10c01017 	ldw	r3,64(r2)
   1e0ac:	e0bff017 	ldw	r2,-64(fp)
   1e0b0:	1880051e 	bne	r3,r2,1e0c8 <altera_avalon_jtag_uart_write+0x250>
   1e0b4:	e0bffc17 	ldw	r2,-16(fp)
   1e0b8:	10c00917 	ldw	r3,36(r2)
   1e0bc:	e0bffc17 	ldw	r2,-16(fp)
   1e0c0:	10800117 	ldw	r2,4(r2)
   1e0c4:	18bff736 	bltu	r3,r2,1e0a4 <__alt_mem_Flash_flash_data+0xf401e0a4>
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
   1e0c8:	e0bffc17 	ldw	r2,-16(fp)
   1e0cc:	10800917 	ldw	r2,36(r2)
   1e0d0:	10000126 	beq	r2,zero,1e0d8 <altera_avalon_jtag_uart_write+0x260>
         break;
   1e0d4:	00000206 	br	1e0e0 <altera_avalon_jtag_uart_write+0x268>
    }
  }
  while (count > 0);
   1e0d8:	e0bffe17 	ldw	r2,-8(fp)
   1e0dc:	00bf7b16 	blt	zero,r2,1decc <__alt_mem_Flash_flash_data+0xf401decc>

  /*
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);
   1e0e0:	e0bffc17 	ldw	r2,-16(fp)
   1e0e4:	10800b17 	ldw	r2,44(r2)
   1e0e8:	1009883a 	mov	r4,r2
   1e0ec:	0016ab40 	call	16ab4 <OSSemPost>

  if (ptr != start)
   1e0f0:	e0fffd17 	ldw	r3,-12(fp)
   1e0f4:	e0bff217 	ldw	r2,-56(fp)
   1e0f8:	18800426 	beq	r3,r2,1e10c <altera_avalon_jtag_uart_write+0x294>
    return ptr - start;
   1e0fc:	e0fffd17 	ldw	r3,-12(fp)
   1e100:	e0bff217 	ldw	r2,-56(fp)
   1e104:	1885c83a 	sub	r2,r3,r2
   1e108:	00000606 	br	1e124 <altera_avalon_jtag_uart_write+0x2ac>
  else if (flags & O_NONBLOCK)
   1e10c:	e0bfff17 	ldw	r2,-4(fp)
   1e110:	1090000c 	andi	r2,r2,16384
   1e114:	10000226 	beq	r2,zero,1e120 <altera_avalon_jtag_uart_write+0x2a8>
    return -EWOULDBLOCK;
   1e118:	00bffd44 	movi	r2,-11
   1e11c:	00000106 	br	1e124 <altera_avalon_jtag_uart_write+0x2ac>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
   1e120:	00bffec4 	movi	r2,-5
}
   1e124:	e037883a 	mov	sp,fp
   1e128:	dfc00117 	ldw	ra,4(sp)
   1e12c:	df000017 	ldw	fp,0(sp)
   1e130:	dec00204 	addi	sp,sp,8
   1e134:	f800283a 	ret

0001e138 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
   1e138:	defff904 	addi	sp,sp,-28
   1e13c:	dfc00615 	stw	ra,24(sp)
   1e140:	df000515 	stw	fp,20(sp)
   1e144:	df000504 	addi	fp,sp,20
   1e148:	e13ffe15 	stw	r4,-8(fp)
   1e14c:	e17fff15 	stw	r5,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
   1e150:	0007883a 	mov	r3,zero
   1e154:	e0bffe17 	ldw	r2,-8(fp)
   1e158:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
   1e15c:	e0bffe17 	ldw	r2,-8(fp)
   1e160:	10800104 	addi	r2,r2,4
   1e164:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1e168:	0005303a 	rdctl	r2,status
   1e16c:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1e170:	e0fffc17 	ldw	r3,-16(fp)
   1e174:	00bfff84 	movi	r2,-2
   1e178:	1884703a 	and	r2,r3,r2
   1e17c:	1001703a 	wrctl	status,r2
  
  return context;
   1e180:	e0bffc17 	ldw	r2,-16(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
   1e184:	e0bffb15 	stw	r2,-20(fp)
  alt_tick ();
   1e188:	00201740 	call	20174 <alt_tick>
   1e18c:	e0bffb17 	ldw	r2,-20(fp)
   1e190:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1e194:	e0bffd17 	ldw	r2,-12(fp)
   1e198:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
   1e19c:	e037883a 	mov	sp,fp
   1e1a0:	dfc00117 	ldw	ra,4(sp)
   1e1a4:	df000017 	ldw	fp,0(sp)
   1e1a8:	dec00204 	addi	sp,sp,8
   1e1ac:	f800283a 	ret

0001e1b0 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
   1e1b0:	defff904 	addi	sp,sp,-28
   1e1b4:	dfc00615 	stw	ra,24(sp)
   1e1b8:	df000515 	stw	fp,20(sp)
   1e1bc:	df000504 	addi	fp,sp,20
   1e1c0:	e13ffc15 	stw	r4,-16(fp)
   1e1c4:	e17ffd15 	stw	r5,-12(fp)
   1e1c8:	e1bffe15 	stw	r6,-8(fp)
   1e1cc:	e1ffff15 	stw	r7,-4(fp)
   1e1d0:	e0bfff17 	ldw	r2,-4(fp)
   1e1d4:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
   1e1d8:	008000b4 	movhi	r2,2
   1e1dc:	1094a304 	addi	r2,r2,21132
   1e1e0:	10800017 	ldw	r2,0(r2)
   1e1e4:	1000041e 	bne	r2,zero,1e1f8 <alt_avalon_timer_sc_init+0x48>
  {
    _alt_tick_rate = nticks;
   1e1e8:	008000b4 	movhi	r2,2
   1e1ec:	1094a304 	addi	r2,r2,21132
   1e1f0:	e0fffb17 	ldw	r3,-20(fp)
   1e1f4:	10c00015 	stw	r3,0(r2)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
   1e1f8:	e0bffc17 	ldw	r2,-16(fp)
   1e1fc:	10800104 	addi	r2,r2,4
   1e200:	00c001c4 	movi	r3,7
   1e204:	10c00035 	stwio	r3,0(r2)
  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
   1e208:	e13ffe17 	ldw	r4,-8(fp)
   1e20c:	e17ffc17 	ldw	r5,-16(fp)
   1e210:	018000b4 	movhi	r6,2
   1e214:	31b84e04 	addi	r6,r6,-7880
   1e218:	001fcb80 	call	1fcb8 <alt_irq_register>
#endif  
}
   1e21c:	e037883a 	mov	sp,fp
   1e220:	dfc00117 	ldw	ra,4(sp)
   1e224:	df000017 	ldw	fp,0(sp)
   1e228:	dec00204 	addi	sp,sp,8
   1e22c:	f800283a 	ret

0001e230 <get_DDRAM_addr>:
 * @sa the datasheet for the LCD Display Controller on the DE2 Board
 * @note the function requires that the input are in the valid range
 *
 **/
unsigned char get_DDRAM_addr(unsigned x_pos, unsigned y_pos)
{
   1e230:	defffc04 	addi	sp,sp,-16
   1e234:	df000315 	stw	fp,12(sp)
   1e238:	df000304 	addi	fp,sp,12
   1e23c:	e13ffe15 	stw	r4,-8(fp)
   1e240:	e17fff15 	stw	r5,-4(fp)
	//assume valid inputs
	unsigned char addr = 0x00000000;
   1e244:	e03ffd05 	stb	zero,-12(fp)
	if (y_pos == 0)
   1e248:	e0bfff17 	ldw	r2,-4(fp)
   1e24c:	1000061e 	bne	r2,zero,1e268 <get_DDRAM_addr+0x38>
	{
		addr |= x_pos;
   1e250:	e0bffe17 	ldw	r2,-8(fp)
   1e254:	1007883a 	mov	r3,r2
   1e258:	e0bffd03 	ldbu	r2,-12(fp)
   1e25c:	1884b03a 	or	r2,r3,r2
   1e260:	e0bffd05 	stb	r2,-12(fp)
   1e264:	00000806 	br	1e288 <get_DDRAM_addr+0x58>
	}
	else
	{
		addr |= x_pos;
   1e268:	e0bffe17 	ldw	r2,-8(fp)
   1e26c:	1007883a 	mov	r3,r2
   1e270:	e0bffd03 	ldbu	r2,-12(fp)
   1e274:	1884b03a 	or	r2,r3,r2
   1e278:	e0bffd05 	stb	r2,-12(fp)
		addr |= 0x00000040;
   1e27c:	e0bffd03 	ldbu	r2,-12(fp)
   1e280:	10801014 	ori	r2,r2,64
   1e284:	e0bffd05 	stb	r2,-12(fp)
	}
	// b_7 is always 1 for DDRAM address, see datasheet
	return (addr | 0x00000080);
   1e288:	e0fffd03 	ldbu	r3,-12(fp)
   1e28c:	00bfe004 	movi	r2,-128
   1e290:	1884b03a 	or	r2,r3,r2
}
   1e294:	e037883a 	mov	sp,fp
   1e298:	df000017 	ldw	fp,0(sp)
   1e29c:	dec00104 	addi	sp,sp,4
   1e2a0:	f800283a 	ret

0001e2a4 <alt_up_character_lcd_send_cmd>:
 * @param cmd -- the command bits 
 *
 * @return nothing
 **/
void alt_up_character_lcd_send_cmd(alt_up_character_lcd_dev *lcd, unsigned char cmd)
{
   1e2a4:	defffd04 	addi	sp,sp,-12
   1e2a8:	df000215 	stw	fp,8(sp)
   1e2ac:	df000204 	addi	fp,sp,8
   1e2b0:	e13ffe15 	stw	r4,-8(fp)
   1e2b4:	2805883a 	mov	r2,r5
   1e2b8:	e0bfff05 	stb	r2,-4(fp)
 	// NOTE: We use the term Instruction Register and Control Register interchangeably
	IOWR_ALT_UP_CHARACTER_LCD_COMMAND(lcd->base, cmd);
   1e2bc:	e0bffe17 	ldw	r2,-8(fp)
   1e2c0:	10800a17 	ldw	r2,40(r2)
   1e2c4:	1007883a 	mov	r3,r2
   1e2c8:	e0bfff03 	ldbu	r2,-4(fp)
   1e2cc:	18800025 	stbio	r2,0(r3)
}
   1e2d0:	e037883a 	mov	sp,fp
   1e2d4:	df000017 	ldw	fp,0(sp)
   1e2d8:	dec00104 	addi	sp,sp,4
   1e2dc:	f800283a 	ret

0001e2e0 <alt_up_character_lcd_init>:
 * file for a detailed description of each function
 */
////////////////////////////////////////////////////////////////////////////

void alt_up_character_lcd_init(alt_up_character_lcd_dev *lcd)
{
   1e2e0:	defffe04 	addi	sp,sp,-8
   1e2e4:	df000115 	stw	fp,4(sp)
   1e2e8:	df000104 	addi	fp,sp,4
   1e2ec:	e13fff15 	stw	r4,-4(fp)
	IOWR_ALT_UP_CHARACTER_LCD_COMMAND(lcd->base, ALT_UP_CHARACTER_LCD_COMM_CLEAR_DISPLAY);
   1e2f0:	e0bfff17 	ldw	r2,-4(fp)
   1e2f4:	10800a17 	ldw	r2,40(r2)
   1e2f8:	1007883a 	mov	r3,r2
   1e2fc:	00800044 	movi	r2,1
   1e300:	18800025 	stbio	r2,0(r3)
	// register the device 
	// see "Developing Device Drivers for the HAL" in "Nios II Software Developer's Handbook"
}
   1e304:	e037883a 	mov	sp,fp
   1e308:	df000017 	ldw	fp,0(sp)
   1e30c:	dec00104 	addi	sp,sp,4
   1e310:	f800283a 	ret

0001e314 <alt_up_character_lcd_open_dev>:

alt_up_character_lcd_dev* alt_up_character_lcd_open_dev(const char* name)
{
   1e314:	defffc04 	addi	sp,sp,-16
   1e318:	dfc00315 	stw	ra,12(sp)
   1e31c:	df000215 	stw	fp,8(sp)
   1e320:	df000204 	addi	fp,sp,8
   1e324:	e13fff15 	stw	r4,-4(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_character_lcd_dev *dev = (alt_up_character_lcd_dev*)alt_find_dev(name, &alt_dev_list);
   1e328:	e13fff17 	ldw	r4,-4(fp)
   1e32c:	014000b4 	movhi	r5,2
   1e330:	294c8d04 	addi	r5,r5,12852
   1e334:	001fac00 	call	1fac0 <alt_find_dev>
   1e338:	e0bffe15 	stw	r2,-8(fp)

  return dev;
   1e33c:	e0bffe17 	ldw	r2,-8(fp)
}
   1e340:	e037883a 	mov	sp,fp
   1e344:	dfc00117 	ldw	ra,4(sp)
   1e348:	df000017 	ldw	fp,0(sp)
   1e34c:	dec00204 	addi	sp,sp,8
   1e350:	f800283a 	ret

0001e354 <alt_up_character_lcd_write>:

void alt_up_character_lcd_write(alt_up_character_lcd_dev *dev, const char *ptr, unsigned int len)
{
   1e354:	defffb04 	addi	sp,sp,-20
   1e358:	df000415 	stw	fp,16(sp)
   1e35c:	df000404 	addi	fp,sp,16
   1e360:	e13ffd15 	stw	r4,-12(fp)
   1e364:	e17ffe15 	stw	r5,-8(fp)
   1e368:	e1bfff15 	stw	r6,-4(fp)
	unsigned int i;
	for (i = 0; i < len; i++)
   1e36c:	e03ffc15 	stw	zero,-16(fp)
   1e370:	00000f06 	br	1e3b0 <alt_up_character_lcd_write+0x5c>
	{
		IOWR_ALT_UP_CHARACTER_LCD_DATA(dev->base, *(ptr+i));
   1e374:	e0bffd17 	ldw	r2,-12(fp)
   1e378:	10800a17 	ldw	r2,40(r2)
   1e37c:	10800044 	addi	r2,r2,1
   1e380:	1009883a 	mov	r4,r2
   1e384:	e0fffe17 	ldw	r3,-8(fp)
   1e388:	e0bffc17 	ldw	r2,-16(fp)
   1e38c:	1885883a 	add	r2,r3,r2
   1e390:	10800003 	ldbu	r2,0(r2)
   1e394:	10803fcc 	andi	r2,r2,255
   1e398:	1080201c 	xori	r2,r2,128
   1e39c:	10bfe004 	addi	r2,r2,-128
   1e3a0:	20800025 	stbio	r2,0(r4)
}

void alt_up_character_lcd_write(alt_up_character_lcd_dev *dev, const char *ptr, unsigned int len)
{
	unsigned int i;
	for (i = 0; i < len; i++)
   1e3a4:	e0bffc17 	ldw	r2,-16(fp)
   1e3a8:	10800044 	addi	r2,r2,1
   1e3ac:	e0bffc15 	stw	r2,-16(fp)
   1e3b0:	e0fffc17 	ldw	r3,-16(fp)
   1e3b4:	e0bfff17 	ldw	r2,-4(fp)
   1e3b8:	18bfee36 	bltu	r3,r2,1e374 <__alt_mem_Flash_flash_data+0xf401e374>
	{
		IOWR_ALT_UP_CHARACTER_LCD_DATA(dev->base, *(ptr+i));
	}
}
   1e3bc:	e037883a 	mov	sp,fp
   1e3c0:	df000017 	ldw	fp,0(sp)
   1e3c4:	dec00104 	addi	sp,sp,4
   1e3c8:	f800283a 	ret

0001e3cc <alt_up_character_lcd_string>:

void alt_up_character_lcd_string(alt_up_character_lcd_dev *dev, const char *ptr)
{
   1e3cc:	defffd04 	addi	sp,sp,-12
   1e3d0:	df000215 	stw	fp,8(sp)
   1e3d4:	df000204 	addi	fp,sp,8
   1e3d8:	e13ffe15 	stw	r4,-8(fp)
   1e3dc:	e17fff15 	stw	r5,-4(fp)
	while ( *ptr )
   1e3e0:	00000d06 	br	1e418 <alt_up_character_lcd_string+0x4c>
	{
		IOWR_ALT_UP_CHARACTER_LCD_DATA(dev->base, *(ptr));
   1e3e4:	e0bffe17 	ldw	r2,-8(fp)
   1e3e8:	10800a17 	ldw	r2,40(r2)
   1e3ec:	10800044 	addi	r2,r2,1
   1e3f0:	1007883a 	mov	r3,r2
   1e3f4:	e0bfff17 	ldw	r2,-4(fp)
   1e3f8:	10800003 	ldbu	r2,0(r2)
   1e3fc:	10803fcc 	andi	r2,r2,255
   1e400:	1080201c 	xori	r2,r2,128
   1e404:	10bfe004 	addi	r2,r2,-128
   1e408:	18800025 	stbio	r2,0(r3)
		++ptr;
   1e40c:	e0bfff17 	ldw	r2,-4(fp)
   1e410:	10800044 	addi	r2,r2,1
   1e414:	e0bfff15 	stw	r2,-4(fp)
	}
}

void alt_up_character_lcd_string(alt_up_character_lcd_dev *dev, const char *ptr)
{
	while ( *ptr )
   1e418:	e0bfff17 	ldw	r2,-4(fp)
   1e41c:	10800003 	ldbu	r2,0(r2)
   1e420:	10803fcc 	andi	r2,r2,255
   1e424:	1080201c 	xori	r2,r2,128
   1e428:	10bfe004 	addi	r2,r2,-128
   1e42c:	103fed1e 	bne	r2,zero,1e3e4 <__alt_mem_Flash_flash_data+0xf401e3e4>
	{
		IOWR_ALT_UP_CHARACTER_LCD_DATA(dev->base, *(ptr));
		++ptr;
	}
}
   1e430:	e037883a 	mov	sp,fp
   1e434:	df000017 	ldw	fp,0(sp)
   1e438:	dec00104 	addi	sp,sp,4
   1e43c:	f800283a 	ret

0001e440 <alt_up_character_lcd_write_fd>:

// this function isn't used, and is included for future upgrades
int alt_up_character_lcd_write_fd(alt_fd *fd, const char *ptr, int len)
{
   1e440:	defffb04 	addi	sp,sp,-20
   1e444:	dfc00415 	stw	ra,16(sp)
   1e448:	df000315 	stw	fp,12(sp)
   1e44c:	df000304 	addi	fp,sp,12
   1e450:	e13ffd15 	stw	r4,-12(fp)
   1e454:	e17ffe15 	stw	r5,-8(fp)
   1e458:	e1bfff15 	stw	r6,-4(fp)
	alt_up_character_lcd_write( (alt_up_character_lcd_dev *) fd->dev, ptr, (unsigned int) len);
   1e45c:	e0bffd17 	ldw	r2,-12(fp)
   1e460:	10c00017 	ldw	r3,0(r2)
   1e464:	e0bfff17 	ldw	r2,-4(fp)
   1e468:	1809883a 	mov	r4,r3
   1e46c:	e17ffe17 	ldw	r5,-8(fp)
   1e470:	100d883a 	mov	r6,r2
   1e474:	001e3540 	call	1e354 <alt_up_character_lcd_write>
	return 0;
   1e478:	0005883a 	mov	r2,zero
}
   1e47c:	e037883a 	mov	sp,fp
   1e480:	dfc00117 	ldw	ra,4(sp)
   1e484:	df000017 	ldw	fp,0(sp)
   1e488:	dec00204 	addi	sp,sp,8
   1e48c:	f800283a 	ret

0001e490 <alt_up_character_lcd_set_cursor_pos>:

int alt_up_character_lcd_set_cursor_pos(alt_up_character_lcd_dev *lcd, unsigned x_pos, 
	 unsigned y_pos)
{
   1e490:	defffa04 	addi	sp,sp,-24
   1e494:	dfc00515 	stw	ra,20(sp)
   1e498:	df000415 	stw	fp,16(sp)
   1e49c:	df000404 	addi	fp,sp,16
   1e4a0:	e13ffd15 	stw	r4,-12(fp)
   1e4a4:	e17ffe15 	stw	r5,-8(fp)
   1e4a8:	e1bfff15 	stw	r6,-4(fp)
	//boundary check
	if (x_pos > 39 || y_pos > 1 )
   1e4ac:	e0bffe17 	ldw	r2,-8(fp)
   1e4b0:	10800a28 	cmpgeui	r2,r2,40
   1e4b4:	1000031e 	bne	r2,zero,1e4c4 <alt_up_character_lcd_set_cursor_pos+0x34>
   1e4b8:	e0bfff17 	ldw	r2,-4(fp)
   1e4bc:	108000b0 	cmpltui	r2,r2,2
   1e4c0:	1000021e 	bne	r2,zero,1e4cc <alt_up_character_lcd_set_cursor_pos+0x3c>
		// invalid argument
		return -1;
   1e4c4:	00bfffc4 	movi	r2,-1
   1e4c8:	00000906 	br	1e4f0 <alt_up_character_lcd_set_cursor_pos+0x60>
	// calculate address
	unsigned char addr = get_DDRAM_addr(x_pos, y_pos);
   1e4cc:	e13ffe17 	ldw	r4,-8(fp)
   1e4d0:	e17fff17 	ldw	r5,-4(fp)
   1e4d4:	001e2300 	call	1e230 <get_DDRAM_addr>
   1e4d8:	e0bffc05 	stb	r2,-16(fp)
	// set the cursor
	alt_up_character_lcd_send_cmd(lcd, addr);
   1e4dc:	e0bffc03 	ldbu	r2,-16(fp)
   1e4e0:	e13ffd17 	ldw	r4,-12(fp)
   1e4e4:	100b883a 	mov	r5,r2
   1e4e8:	001e2a40 	call	1e2a4 <alt_up_character_lcd_send_cmd>
	return 0;
   1e4ec:	0005883a 	mov	r2,zero
}
   1e4f0:	e037883a 	mov	sp,fp
   1e4f4:	dfc00117 	ldw	ra,4(sp)
   1e4f8:	df000017 	ldw	fp,0(sp)
   1e4fc:	dec00204 	addi	sp,sp,8
   1e500:	f800283a 	ret

0001e504 <alt_up_character_lcd_shift_cursor>:

void alt_up_character_lcd_shift_cursor(alt_up_character_lcd_dev *lcd, int x_right_shift_offset)
{
   1e504:	defffb04 	addi	sp,sp,-20
   1e508:	dfc00415 	stw	ra,16(sp)
   1e50c:	df000315 	stw	fp,12(sp)
   1e510:	df000304 	addi	fp,sp,12
   1e514:	e13ffe15 	stw	r4,-8(fp)
   1e518:	e17fff15 	stw	r5,-4(fp)
	if (x_right_shift_offset == 0) 
   1e51c:	e0bfff17 	ldw	r2,-4(fp)
   1e520:	1000011e 	bne	r2,zero,1e528 <alt_up_character_lcd_shift_cursor+0x24>
		// don't ask me to do nothing 
		return;
   1e524:	00001406 	br	1e578 <alt_up_character_lcd_shift_cursor+0x74>

	// see shift right or left
	unsigned char shift_cmd = (x_right_shift_offset > 0) ? 
   1e528:	e0bfff17 	ldw	r2,-4(fp)
   1e52c:	0080020e 	bge	zero,r2,1e538 <alt_up_character_lcd_shift_cursor+0x34>
   1e530:	00800504 	movi	r2,20
   1e534:	00000106 	br	1e53c <alt_up_character_lcd_shift_cursor+0x38>
   1e538:	00800404 	movi	r2,16
   1e53c:	e0bffd45 	stb	r2,-11(fp)
		ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_LEFT;
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
   1e540:	e0bfff17 	ldw	r2,-4(fp)
   1e544:	1000010e 	bge	r2,zero,1e54c <alt_up_character_lcd_shift_cursor+0x48>
   1e548:	0085c83a 	sub	r2,zero,r2
   1e54c:	e0bffd05 	stb	r2,-12(fp)
		-x_right_shift_offset;
	// do the shift
	while (num_offset-- > 0)
   1e550:	00000406 	br	1e564 <alt_up_character_lcd_shift_cursor+0x60>
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
   1e554:	e0bffd43 	ldbu	r2,-11(fp)
   1e558:	e13ffe17 	ldw	r4,-8(fp)
   1e55c:	100b883a 	mov	r5,r2
   1e560:	001e2a40 	call	1e2a4 <alt_up_character_lcd_send_cmd>
		ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_LEFT;
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
		-x_right_shift_offset;
	// do the shift
	while (num_offset-- > 0)
   1e564:	e0bffd03 	ldbu	r2,-12(fp)
   1e568:	10ffffc4 	addi	r3,r2,-1
   1e56c:	e0fffd05 	stb	r3,-12(fp)
   1e570:	10803fcc 	andi	r2,r2,255
   1e574:	103ff71e 	bne	r2,zero,1e554 <__alt_mem_Flash_flash_data+0xf401e554>
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
}
   1e578:	e037883a 	mov	sp,fp
   1e57c:	dfc00117 	ldw	ra,4(sp)
   1e580:	df000017 	ldw	fp,0(sp)
   1e584:	dec00204 	addi	sp,sp,8
   1e588:	f800283a 	ret

0001e58c <alt_up_character_lcd_shift_display>:

void alt_up_character_lcd_shift_display(alt_up_character_lcd_dev *lcd, int x_right_shift_offset)
{
   1e58c:	defffb04 	addi	sp,sp,-20
   1e590:	dfc00415 	stw	ra,16(sp)
   1e594:	df000315 	stw	fp,12(sp)
   1e598:	df000304 	addi	fp,sp,12
   1e59c:	e13ffe15 	stw	r4,-8(fp)
   1e5a0:	e17fff15 	stw	r5,-4(fp)
	if (x_right_shift_offset == 0) 
   1e5a4:	e0bfff17 	ldw	r2,-4(fp)
   1e5a8:	1000011e 	bne	r2,zero,1e5b0 <alt_up_character_lcd_shift_display+0x24>
		// don't ask me to do nothing 
		return;
   1e5ac:	00001406 	br	1e600 <alt_up_character_lcd_shift_display+0x74>

	// see shift right or left
	unsigned char shift_cmd = (x_right_shift_offset > 0) ? 
   1e5b0:	e0bfff17 	ldw	r2,-4(fp)
   1e5b4:	0080020e 	bge	zero,r2,1e5c0 <alt_up_character_lcd_shift_display+0x34>
   1e5b8:	00800704 	movi	r2,28
   1e5bc:	00000106 	br	1e5c4 <alt_up_character_lcd_shift_display+0x38>
   1e5c0:	00800604 	movi	r2,24
   1e5c4:	e0bffd45 	stb	r2,-11(fp)
		ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_LEFT;
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
   1e5c8:	e0bfff17 	ldw	r2,-4(fp)
   1e5cc:	1000010e 	bge	r2,zero,1e5d4 <alt_up_character_lcd_shift_display+0x48>
   1e5d0:	0085c83a 	sub	r2,zero,r2
   1e5d4:	e0bffd05 	stb	r2,-12(fp)
		-x_right_shift_offset;
	// do the shift
	while (num_offset-- > 0)
   1e5d8:	00000406 	br	1e5ec <alt_up_character_lcd_shift_display+0x60>
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
   1e5dc:	e0bffd43 	ldbu	r2,-11(fp)
   1e5e0:	e13ffe17 	ldw	r4,-8(fp)
   1e5e4:	100b883a 	mov	r5,r2
   1e5e8:	001e2a40 	call	1e2a4 <alt_up_character_lcd_send_cmd>
		ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_LEFT;
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
		-x_right_shift_offset;
	// do the shift
	while (num_offset-- > 0)
   1e5ec:	e0bffd03 	ldbu	r2,-12(fp)
   1e5f0:	10ffffc4 	addi	r3,r2,-1
   1e5f4:	e0fffd05 	stb	r3,-12(fp)
   1e5f8:	10803fcc 	andi	r2,r2,255
   1e5fc:	103ff71e 	bne	r2,zero,1e5dc <__alt_mem_Flash_flash_data+0xf401e5dc>
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
}
   1e600:	e037883a 	mov	sp,fp
   1e604:	dfc00117 	ldw	ra,4(sp)
   1e608:	df000017 	ldw	fp,0(sp)
   1e60c:	dec00204 	addi	sp,sp,8
   1e610:	f800283a 	ret

0001e614 <alt_up_character_lcd_erase_pos>:

int alt_up_character_lcd_erase_pos(alt_up_character_lcd_dev *lcd, unsigned x_pos, unsigned y_pos)
{
   1e614:	defffa04 	addi	sp,sp,-24
   1e618:	dfc00515 	stw	ra,20(sp)
   1e61c:	df000415 	stw	fp,16(sp)
   1e620:	df000404 	addi	fp,sp,16
   1e624:	e13ffd15 	stw	r4,-12(fp)
   1e628:	e17ffe15 	stw	r5,-8(fp)
   1e62c:	e1bfff15 	stw	r6,-4(fp)
	// boundary check
	if (x_pos > 39 || y_pos > 1 )
   1e630:	e0bffe17 	ldw	r2,-8(fp)
   1e634:	10800a28 	cmpgeui	r2,r2,40
   1e638:	1000031e 	bne	r2,zero,1e648 <alt_up_character_lcd_erase_pos+0x34>
   1e63c:	e0bfff17 	ldw	r2,-4(fp)
   1e640:	108000b0 	cmpltui	r2,r2,2
   1e644:	1000021e 	bne	r2,zero,1e650 <alt_up_character_lcd_erase_pos+0x3c>
		return -1;
   1e648:	00bfffc4 	movi	r2,-1
   1e64c:	00000f06 	br	1e68c <alt_up_character_lcd_erase_pos+0x78>

	// get address
	unsigned char addr = get_DDRAM_addr(x_pos, y_pos);
   1e650:	e13ffe17 	ldw	r4,-8(fp)
   1e654:	e17fff17 	ldw	r5,-4(fp)
   1e658:	001e2300 	call	1e230 <get_DDRAM_addr>
   1e65c:	e0bffc05 	stb	r2,-16(fp)
	// set cursor to dest point
	alt_up_character_lcd_send_cmd(lcd, addr);
   1e660:	e0bffc03 	ldbu	r2,-16(fp)
   1e664:	e13ffd17 	ldw	r4,-12(fp)
   1e668:	100b883a 	mov	r5,r2
   1e66c:	001e2a40 	call	1e2a4 <alt_up_character_lcd_send_cmd>
	//send an empty char as erase (refer to the Character Generator ROM part of the Datasheet)
	IOWR_ALT_UP_CHARACTER_LCD_DATA(lcd->base, (0x00000002) );
   1e670:	e0bffd17 	ldw	r2,-12(fp)
   1e674:	10800a17 	ldw	r2,40(r2)
   1e678:	10800044 	addi	r2,r2,1
   1e67c:	1007883a 	mov	r3,r2
   1e680:	00800084 	movi	r2,2
   1e684:	18800025 	stbio	r2,0(r3)
	return 0;
   1e688:	0005883a 	mov	r2,zero
}
   1e68c:	e037883a 	mov	sp,fp
   1e690:	dfc00117 	ldw	ra,4(sp)
   1e694:	df000017 	ldw	fp,0(sp)
   1e698:	dec00204 	addi	sp,sp,8
   1e69c:	f800283a 	ret

0001e6a0 <alt_up_character_lcd_cursor_off>:

void alt_up_character_lcd_cursor_off(alt_up_character_lcd_dev *lcd)
{
   1e6a0:	defffd04 	addi	sp,sp,-12
   1e6a4:	dfc00215 	stw	ra,8(sp)
   1e6a8:	df000115 	stw	fp,4(sp)
   1e6ac:	df000104 	addi	fp,sp,4
   1e6b0:	e13fff15 	stw	r4,-4(fp)
	alt_up_character_lcd_send_cmd(lcd, ALT_UP_CHARACTER_LCD_COMM_CURSOR_OFF);
   1e6b4:	e13fff17 	ldw	r4,-4(fp)
   1e6b8:	01400304 	movi	r5,12
   1e6bc:	001e2a40 	call	1e2a4 <alt_up_character_lcd_send_cmd>
}
   1e6c0:	e037883a 	mov	sp,fp
   1e6c4:	dfc00117 	ldw	ra,4(sp)
   1e6c8:	df000017 	ldw	fp,0(sp)
   1e6cc:	dec00204 	addi	sp,sp,8
   1e6d0:	f800283a 	ret

0001e6d4 <alt_up_character_lcd_cursor_blink_on>:

void alt_up_character_lcd_cursor_blink_on(alt_up_character_lcd_dev *lcd)
{
   1e6d4:	defffd04 	addi	sp,sp,-12
   1e6d8:	dfc00215 	stw	ra,8(sp)
   1e6dc:	df000115 	stw	fp,4(sp)
   1e6e0:	df000104 	addi	fp,sp,4
   1e6e4:	e13fff15 	stw	r4,-4(fp)
	alt_up_character_lcd_send_cmd(lcd, ALT_UP_CHARACTER_LCD_COMM_CURSOR_BLINK_ON);
   1e6e8:	e13fff17 	ldw	r4,-4(fp)
   1e6ec:	014003c4 	movi	r5,15
   1e6f0:	001e2a40 	call	1e2a4 <alt_up_character_lcd_send_cmd>
}
   1e6f4:	e037883a 	mov	sp,fp
   1e6f8:	dfc00117 	ldw	ra,4(sp)
   1e6fc:	df000017 	ldw	fp,0(sp)
   1e700:	dec00204 	addi	sp,sp,8
   1e704:	f800283a 	ret

0001e708 <alt_up_irda_enable_read_interrupt>:
#include "altera_up_avalon_irda.h"
#include "altera_up_avalon_irda_regs.h"


void alt_up_irda_enable_read_interrupt(alt_up_irda_dev *irda)
{
   1e708:	defffd04 	addi	sp,sp,-12
   1e70c:	df000215 	stw	fp,8(sp)
   1e710:	df000204 	addi	fp,sp,8
   1e714:	e13fff15 	stw	r4,-4(fp)
	alt_u32 ctrl_reg;
	ctrl_reg = IORD_ALT_UP_IRDA_CONTROL(irda->base); 
   1e718:	e0bfff17 	ldw	r2,-4(fp)
   1e71c:	10800a17 	ldw	r2,40(r2)
   1e720:	10800104 	addi	r2,r2,4
   1e724:	10800037 	ldwio	r2,0(r2)
   1e728:	e0bffe15 	stw	r2,-8(fp)
	// set RE to 1 while maintaining other bits the same
	ctrl_reg |= ALT_UP_IRDA_CONTROL_RE_MSK;
   1e72c:	e0bffe17 	ldw	r2,-8(fp)
   1e730:	10800054 	ori	r2,r2,1
   1e734:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_IRDA_CONTROL(irda->base, ctrl_reg);
   1e738:	e0bfff17 	ldw	r2,-4(fp)
   1e73c:	10800a17 	ldw	r2,40(r2)
   1e740:	10800104 	addi	r2,r2,4
   1e744:	1007883a 	mov	r3,r2
   1e748:	e0bffe17 	ldw	r2,-8(fp)
   1e74c:	18800035 	stwio	r2,0(r3)
}
   1e750:	e037883a 	mov	sp,fp
   1e754:	df000017 	ldw	fp,0(sp)
   1e758:	dec00104 	addi	sp,sp,4
   1e75c:	f800283a 	ret

0001e760 <alt_up_irda_disable_read_interrupt>:

void alt_up_irda_disable_read_interrupt(alt_up_irda_dev *irda)
{
   1e760:	defffd04 	addi	sp,sp,-12
   1e764:	df000215 	stw	fp,8(sp)
   1e768:	df000204 	addi	fp,sp,8
   1e76c:	e13fff15 	stw	r4,-4(fp)
	alt_u32 ctrl_reg;
	ctrl_reg = IORD_ALT_UP_IRDA_CONTROL(irda->base); 
   1e770:	e0bfff17 	ldw	r2,-4(fp)
   1e774:	10800a17 	ldw	r2,40(r2)
   1e778:	10800104 	addi	r2,r2,4
   1e77c:	10800037 	ldwio	r2,0(r2)
   1e780:	e0bffe15 	stw	r2,-8(fp)
	// set RE to 0 while maintaining other bits the same
	ctrl_reg &= ~ALT_UP_IRDA_CONTROL_RE_MSK;
   1e784:	e0fffe17 	ldw	r3,-8(fp)
   1e788:	00bfff84 	movi	r2,-2
   1e78c:	1884703a 	and	r2,r3,r2
   1e790:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_IRDA_CONTROL(irda->base, ctrl_reg);
   1e794:	e0bfff17 	ldw	r2,-4(fp)
   1e798:	10800a17 	ldw	r2,40(r2)
   1e79c:	10800104 	addi	r2,r2,4
   1e7a0:	1007883a 	mov	r3,r2
   1e7a4:	e0bffe17 	ldw	r2,-8(fp)
   1e7a8:	18800035 	stwio	r2,0(r3)
}
   1e7ac:	e037883a 	mov	sp,fp
   1e7b0:	df000017 	ldw	fp,0(sp)
   1e7b4:	dec00104 	addi	sp,sp,4
   1e7b8:	f800283a 	ret

0001e7bc <alt_up_irda_get_used_space_in_read_FIFO>:

unsigned alt_up_irda_get_used_space_in_read_FIFO(alt_up_irda_dev *irda)
{
   1e7bc:	defffd04 	addi	sp,sp,-12
   1e7c0:	df000215 	stw	fp,8(sp)
   1e7c4:	df000204 	addi	fp,sp,8
   1e7c8:	e13fff15 	stw	r4,-4(fp)
	alt_u16 ravail = 0;
   1e7cc:	e03ffe0d 	sth	zero,-8(fp)
	// we can only read the 16 bits for RAVAIL --- a read of DATA will discard the data
//	ravail = IORD_16DIRECT(IOADDR_ALT_UP_IRDA_DATA(irda->base), 2); 
//	return ravail;
	ravail = IORD_ALT_UP_IRDA_RAVAIL(irda->base); 
   1e7d0:	e0bfff17 	ldw	r2,-4(fp)
   1e7d4:	10800a17 	ldw	r2,40(r2)
   1e7d8:	10800084 	addi	r2,r2,2
   1e7dc:	1080002b 	ldhuio	r2,0(r2)
   1e7e0:	10bfffcc 	andi	r2,r2,65535
   1e7e4:	e0bffe0d 	sth	r2,-8(fp)
	return (ravail & ALT_UP_IRDA_RAVAIL_MSK) >> ALT_UP_IRDA_RAVAIL_OFST;
   1e7e8:	e0bffe0b 	ldhu	r2,-8(fp)
}
   1e7ec:	e037883a 	mov	sp,fp
   1e7f0:	df000017 	ldw	fp,0(sp)
   1e7f4:	dec00104 	addi	sp,sp,4
   1e7f8:	f800283a 	ret

0001e7fc <alt_up_irda_get_available_space_in_write_FIFO>:

unsigned alt_up_irda_get_available_space_in_write_FIFO(alt_up_irda_dev *irda)
{
   1e7fc:	defffd04 	addi	sp,sp,-12
   1e800:	df000215 	stw	fp,8(sp)
   1e804:	df000204 	addi	fp,sp,8
   1e808:	e13fff15 	stw	r4,-4(fp)
	alt_u32 ctrl_reg;
	ctrl_reg = IORD_ALT_UP_IRDA_CONTROL(irda->base); 
   1e80c:	e0bfff17 	ldw	r2,-4(fp)
   1e810:	10800a17 	ldw	r2,40(r2)
   1e814:	10800104 	addi	r2,r2,4
   1e818:	10800037 	ldwio	r2,0(r2)
   1e81c:	e0bffe15 	stw	r2,-8(fp)
	return (ctrl_reg & ALT_UP_IRDA_CONTROL_WSPACE_MSK) >> ALT_UP_IRDA_CONTROL_WSPACE_OFST;
   1e820:	e0bffe17 	ldw	r2,-8(fp)
   1e824:	1004d43a 	srli	r2,r2,16
}
   1e828:	e037883a 	mov	sp,fp
   1e82c:	df000017 	ldw	fp,0(sp)
   1e830:	dec00104 	addi	sp,sp,4
   1e834:	f800283a 	ret

0001e838 <alt_up_irda_check_parity>:

int alt_up_irda_check_parity(alt_u32 data_reg)
{
   1e838:	defffd04 	addi	sp,sp,-12
   1e83c:	df000215 	stw	fp,8(sp)
   1e840:	df000204 	addi	fp,sp,8
   1e844:	e13fff15 	stw	r4,-4(fp)
	unsigned parity_error = (data_reg & ALT_UP_IRDA_DATA_PE_MSK) >> ALT_UP_IRDA_DATA_PE_OFST;
   1e848:	e0bfff17 	ldw	r2,-4(fp)
   1e84c:	1080800c 	andi	r2,r2,512
   1e850:	1004d27a 	srli	r2,r2,9
   1e854:	e0bffe15 	stw	r2,-8(fp)
	return (parity_error ? -1 : 0);
   1e858:	e0bffe17 	ldw	r2,-8(fp)
   1e85c:	10000226 	beq	r2,zero,1e868 <alt_up_irda_check_parity+0x30>
   1e860:	00bfffc4 	movi	r2,-1
   1e864:	00000106 	br	1e86c <alt_up_irda_check_parity+0x34>
   1e868:	0005883a 	mov	r2,zero
}
   1e86c:	e037883a 	mov	sp,fp
   1e870:	df000017 	ldw	fp,0(sp)
   1e874:	dec00104 	addi	sp,sp,4
   1e878:	f800283a 	ret

0001e87c <alt_up_irda_write_data>:

int alt_up_irda_write_data(alt_up_irda_dev *irda, alt_u8 data)
{
   1e87c:	defffd04 	addi	sp,sp,-12
   1e880:	df000215 	stw	fp,8(sp)
   1e884:	df000204 	addi	fp,sp,8
   1e888:	e13ffe15 	stw	r4,-8(fp)
   1e88c:	2805883a 	mov	r2,r5
   1e890:	e0bfff05 	stb	r2,-4(fp)
	data_reg = IORD_ALT_UP_IRDA_DATA(irda->base);
    */

	// we can write directly without thinking about other bit fields for this
	// case ONLY, because only DATA field of the data register is writable
	IOWR_ALT_UP_IRDA_DATA(irda->base, (data>>ALT_UP_IRDA_DATA_DATA_OFST) & ALT_UP_IRDA_DATA_DATA_MSK);
   1e894:	e0bffe17 	ldw	r2,-8(fp)
   1e898:	10800a17 	ldw	r2,40(r2)
   1e89c:	1007883a 	mov	r3,r2
   1e8a0:	e0bfff03 	ldbu	r2,-4(fp)
   1e8a4:	18800035 	stwio	r2,0(r3)
	return 0;
   1e8a8:	0005883a 	mov	r2,zero
}
   1e8ac:	e037883a 	mov	sp,fp
   1e8b0:	df000017 	ldw	fp,0(sp)
   1e8b4:	dec00104 	addi	sp,sp,4
   1e8b8:	f800283a 	ret

0001e8bc <alt_up_irda_read_data>:

int alt_up_irda_read_data(alt_up_irda_dev *irda, alt_u8 *data, alt_u8 *parity_error)
{
   1e8bc:	defffa04 	addi	sp,sp,-24
   1e8c0:	dfc00515 	stw	ra,20(sp)
   1e8c4:	df000415 	stw	fp,16(sp)
   1e8c8:	df000404 	addi	fp,sp,16
   1e8cc:	e13ffd15 	stw	r4,-12(fp)
   1e8d0:	e17ffe15 	stw	r5,-8(fp)
   1e8d4:	e1bfff15 	stw	r6,-4(fp)
	alt_u32 data_reg;
	data_reg = IORD_ALT_UP_IRDA_DATA(irda->base);
   1e8d8:	e0bffd17 	ldw	r2,-12(fp)
   1e8dc:	10800a17 	ldw	r2,40(r2)
   1e8e0:	10800037 	ldwio	r2,0(r2)
   1e8e4:	e0bffc15 	stw	r2,-16(fp)
	*data = (data_reg & ALT_UP_IRDA_DATA_DATA_MSK) >> ALT_UP_IRDA_DATA_DATA_OFST;
   1e8e8:	e0bffc17 	ldw	r2,-16(fp)
   1e8ec:	1007883a 	mov	r3,r2
   1e8f0:	e0bffe17 	ldw	r2,-8(fp)
   1e8f4:	10c00005 	stb	r3,0(r2)
	*parity_error = alt_up_irda_check_parity(data_reg);
   1e8f8:	e13ffc17 	ldw	r4,-16(fp)
   1e8fc:	001e8380 	call	1e838 <alt_up_irda_check_parity>
   1e900:	1007883a 	mov	r3,r2
   1e904:	e0bfff17 	ldw	r2,-4(fp)
   1e908:	10c00005 	stb	r3,0(r2)
	return (((data_reg & ALT_UP_IRDA_DATA_RVALID_MSK) >> ALT_UP_IRDA_DATA_RVALID_OFST) - 1);
   1e90c:	e0bffc17 	ldw	r2,-16(fp)
   1e910:	10a0000c 	andi	r2,r2,32768
   1e914:	1004d3fa 	srli	r2,r2,15
   1e918:	10bfffc4 	addi	r2,r2,-1
}
   1e91c:	e037883a 	mov	sp,fp
   1e920:	dfc00117 	ldw	ra,4(sp)
   1e924:	df000017 	ldw	fp,0(sp)
   1e928:	dec00204 	addi	sp,sp,8
   1e92c:	f800283a 	ret

0001e930 <alt_up_irda_read_fd>:

int alt_up_irda_read_fd (alt_fd* fd, char* ptr, int len)
{
   1e930:	defff804 	addi	sp,sp,-32
   1e934:	dfc00715 	stw	ra,28(sp)
   1e938:	df000615 	stw	fp,24(sp)
   1e93c:	df000604 	addi	fp,sp,24
   1e940:	e13ffd15 	stw	r4,-12(fp)
   1e944:	e17ffe15 	stw	r5,-8(fp)
   1e948:	e1bfff15 	stw	r6,-4(fp)
	alt_up_irda_dev *irda = (alt_up_irda_dev*)fd->dev;
   1e94c:	e0bffd17 	ldw	r2,-12(fp)
   1e950:	10800017 	ldw	r2,0(r2)
   1e954:	e0bffb15 	stw	r2,-20(fp)
	int count = 0;
   1e958:	e03ffa15 	stw	zero,-24(fp)
	alt_u8 parity_error;
	while(len--)
   1e95c:	00000e06 	br	1e998 <alt_up_irda_read_fd+0x68>
	{
		if (alt_up_irda_read_data(irda, (alt_u8 *)ptr++, &parity_error)==0)
   1e960:	e0bffe17 	ldw	r2,-8(fp)
   1e964:	10c00044 	addi	r3,r2,1
   1e968:	e0fffe15 	stw	r3,-8(fp)
   1e96c:	e0fffc04 	addi	r3,fp,-16
   1e970:	e13ffb17 	ldw	r4,-20(fp)
   1e974:	100b883a 	mov	r5,r2
   1e978:	180d883a 	mov	r6,r3
   1e97c:	001e8bc0 	call	1e8bc <alt_up_irda_read_data>
   1e980:	1000041e 	bne	r2,zero,1e994 <alt_up_irda_read_fd+0x64>
			count++;
   1e984:	e0bffa17 	ldw	r2,-24(fp)
   1e988:	10800044 	addi	r2,r2,1
   1e98c:	e0bffa15 	stw	r2,-24(fp)
   1e990:	00000106 	br	1e998 <alt_up_irda_read_fd+0x68>
		else
			break;
   1e994:	00000406 	br	1e9a8 <alt_up_irda_read_fd+0x78>
int alt_up_irda_read_fd (alt_fd* fd, char* ptr, int len)
{
	alt_up_irda_dev *irda = (alt_up_irda_dev*)fd->dev;
	int count = 0;
	alt_u8 parity_error;
	while(len--)
   1e998:	e0bfff17 	ldw	r2,-4(fp)
   1e99c:	10ffffc4 	addi	r3,r2,-1
   1e9a0:	e0ffff15 	stw	r3,-4(fp)
   1e9a4:	103fee1e 	bne	r2,zero,1e960 <__alt_mem_Flash_flash_data+0xf401e960>
		if (alt_up_irda_read_data(irda, (alt_u8 *)ptr++, &parity_error)==0)
			count++;
		else
			break;
	}
	return count;
   1e9a8:	e0bffa17 	ldw	r2,-24(fp)
}
   1e9ac:	e037883a 	mov	sp,fp
   1e9b0:	dfc00117 	ldw	ra,4(sp)
   1e9b4:	df000017 	ldw	fp,0(sp)
   1e9b8:	dec00204 	addi	sp,sp,8
   1e9bc:	f800283a 	ret

0001e9c0 <alt_up_irda_write_fd>:

int alt_up_irda_write_fd (alt_fd* fd, const char* ptr, int len)
{
   1e9c0:	defff904 	addi	sp,sp,-28
   1e9c4:	dfc00615 	stw	ra,24(sp)
   1e9c8:	df000515 	stw	fp,20(sp)
   1e9cc:	df000504 	addi	fp,sp,20
   1e9d0:	e13ffd15 	stw	r4,-12(fp)
   1e9d4:	e17ffe15 	stw	r5,-8(fp)
   1e9d8:	e1bfff15 	stw	r6,-4(fp)
	alt_up_irda_dev *irda = (alt_up_irda_dev*)fd->dev;
   1e9dc:	e0bffd17 	ldw	r2,-12(fp)
   1e9e0:	10800017 	ldw	r2,0(r2)
   1e9e4:	e0bffc15 	stw	r2,-16(fp)
	int count = 0;
   1e9e8:	e03ffb15 	stw	zero,-20(fp)
	while(len--)
   1e9ec:	00000e06 	br	1ea28 <alt_up_irda_write_fd+0x68>
	{
		if (alt_up_irda_write_data(irda, (alt_u8) *ptr++)==0)
   1e9f0:	e0bffe17 	ldw	r2,-8(fp)
   1e9f4:	10c00044 	addi	r3,r2,1
   1e9f8:	e0fffe15 	stw	r3,-8(fp)
   1e9fc:	10800003 	ldbu	r2,0(r2)
   1ea00:	10803fcc 	andi	r2,r2,255
   1ea04:	e13ffc17 	ldw	r4,-16(fp)
   1ea08:	100b883a 	mov	r5,r2
   1ea0c:	001e87c0 	call	1e87c <alt_up_irda_write_data>
   1ea10:	1000041e 	bne	r2,zero,1ea24 <alt_up_irda_write_fd+0x64>
			count++;
   1ea14:	e0bffb17 	ldw	r2,-20(fp)
   1ea18:	10800044 	addi	r2,r2,1
   1ea1c:	e0bffb15 	stw	r2,-20(fp)
   1ea20:	00000106 	br	1ea28 <alt_up_irda_write_fd+0x68>
		else
			break;
   1ea24:	00000406 	br	1ea38 <alt_up_irda_write_fd+0x78>

int alt_up_irda_write_fd (alt_fd* fd, const char* ptr, int len)
{
	alt_up_irda_dev *irda = (alt_up_irda_dev*)fd->dev;
	int count = 0;
	while(len--)
   1ea28:	e0bfff17 	ldw	r2,-4(fp)
   1ea2c:	10ffffc4 	addi	r3,r2,-1
   1ea30:	e0ffff15 	stw	r3,-4(fp)
   1ea34:	103fee1e 	bne	r2,zero,1e9f0 <__alt_mem_Flash_flash_data+0xf401e9f0>
		if (alt_up_irda_write_data(irda, (alt_u8) *ptr++)==0)
			count++;
		else
			break;
	}
	return count;
   1ea38:	e0bffb17 	ldw	r2,-20(fp)
}
   1ea3c:	e037883a 	mov	sp,fp
   1ea40:	dfc00117 	ldw	ra,4(sp)
   1ea44:	df000017 	ldw	fp,0(sp)
   1ea48:	dec00204 	addi	sp,sp,8
   1ea4c:	f800283a 	ret

0001ea50 <alt_up_irda_open_dev>:

alt_up_irda_dev* alt_up_irda_open_dev(const char* name)
{
   1ea50:	defffc04 	addi	sp,sp,-16
   1ea54:	dfc00315 	stw	ra,12(sp)
   1ea58:	df000215 	stw	fp,8(sp)
   1ea5c:	df000204 	addi	fp,sp,8
   1ea60:	e13fff15 	stw	r4,-4(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_irda_dev *dev = (alt_up_irda_dev*)alt_find_dev(name, &alt_dev_list);
   1ea64:	e13fff17 	ldw	r4,-4(fp)
   1ea68:	014000b4 	movhi	r5,2
   1ea6c:	294c8d04 	addi	r5,r5,12852
   1ea70:	001fac00 	call	1fac0 <alt_find_dev>
   1ea74:	e0bffe15 	stw	r2,-8(fp)

  return dev;
   1ea78:	e0bffe17 	ldw	r2,-8(fp)
}
   1ea7c:	e037883a 	mov	sp,fp
   1ea80:	dfc00117 	ldw	ra,4(sp)
   1ea84:	df000017 	ldw	fp,0(sp)
   1ea88:	dec00204 	addi	sp,sp,8
   1ea8c:	f800283a 	ret

0001ea90 <read_RI_bit>:


//////////////////////////////////////////////////////////////////////////////////////////////
// Internal Functions
alt_u8 read_RI_bit(alt_u32 ctrl_reg)
{
   1ea90:	defffd04 	addi	sp,sp,-12
   1ea94:	df000215 	stw	fp,8(sp)
   1ea98:	df000204 	addi	fp,sp,8
   1ea9c:	e13fff15 	stw	r4,-4(fp)
	alt_u8 ri = (alt_u8) ((ctrl_reg & ALT_UP_PS2_PORT_CTRL_REG_RI_MSK) >> ALT_UP_PS2_PORT_CTRL_REG_RI_OFST);
   1eaa0:	e0bfff17 	ldw	r2,-4(fp)
   1eaa4:	1080400c 	andi	r2,r2,256
   1eaa8:	1004d23a 	srli	r2,r2,8
   1eaac:	e0bffe05 	stb	r2,-8(fp)
	return ri;
   1eab0:	e0bffe03 	ldbu	r2,-8(fp)
}
   1eab4:	e037883a 	mov	sp,fp
   1eab8:	df000017 	ldw	fp,0(sp)
   1eabc:	dec00104 	addi	sp,sp,4
   1eac0:	f800283a 	ret

0001eac4 <read_RE_bit>:

alt_u8 read_RE_bit(alt_u32 ctrl_reg)
{
   1eac4:	defffd04 	addi	sp,sp,-12
   1eac8:	df000215 	stw	fp,8(sp)
   1eacc:	df000204 	addi	fp,sp,8
   1ead0:	e13fff15 	stw	r4,-4(fp)
	alt_u8 re = (alt_u8) ((ctrl_reg & ALT_UP_PS2_PORT_CTRL_REG_RE_MSK) >> ALT_UP_PS2_PORT_CTRL_REG_RE_OFST);
   1ead4:	e0bfff17 	ldw	r2,-4(fp)
   1ead8:	1080004c 	andi	r2,r2,1
   1eadc:	e0bffe05 	stb	r2,-8(fp)
	return re;
   1eae0:	e0bffe03 	ldbu	r2,-8(fp)
}
   1eae4:	e037883a 	mov	sp,fp
   1eae8:	df000017 	ldw	fp,0(sp)
   1eaec:	dec00104 	addi	sp,sp,4
   1eaf0:	f800283a 	ret

0001eaf4 <read_CE_bit>:

alt_u8 read_CE_bit(alt_u32 ctrl_reg)
{
   1eaf4:	defffd04 	addi	sp,sp,-12
   1eaf8:	df000215 	stw	fp,8(sp)
   1eafc:	df000204 	addi	fp,sp,8
   1eb00:	e13fff15 	stw	r4,-4(fp)
	alt_u8 re = (alt_u8) ((ctrl_reg & ALT_UP_PS2_PORT_CTRL_REG_CE_MSK) >> ALT_UP_PS2_PORT_CTRL_REG_CE_OFST);
   1eb04:	e0bfff17 	ldw	r2,-4(fp)
   1eb08:	1081000c 	andi	r2,r2,1024
   1eb0c:	1004d2ba 	srli	r2,r2,10
   1eb10:	e0bffe05 	stb	r2,-8(fp)
	return re;
   1eb14:	e0bffe03 	ldbu	r2,-8(fp)
}
   1eb18:	e037883a 	mov	sp,fp
   1eb1c:	df000017 	ldw	fp,0(sp)
   1eb20:	dec00104 	addi	sp,sp,4
   1eb24:	f800283a 	ret

0001eb28 <read_num_bytes_available>:

alt_u16 read_num_bytes_available(alt_u32 data_reg)
{
   1eb28:	defffd04 	addi	sp,sp,-12
   1eb2c:	df000215 	stw	fp,8(sp)
   1eb30:	df000204 	addi	fp,sp,8
   1eb34:	e13fff15 	stw	r4,-4(fp)
	alt_u16 ravail = (alt_u16)((data_reg & ALT_UP_PS2_PORT_DATA_REG_RAVAIL_MSK ) >> ALT_UP_PS2_PORT_DATA_REG_RAVAIL_OFST);
   1eb38:	e0bfff17 	ldw	r2,-4(fp)
   1eb3c:	1004d43a 	srli	r2,r2,16
   1eb40:	e0bffe0d 	sth	r2,-8(fp)
	return ravail;
   1eb44:	e0bffe0b 	ldhu	r2,-8(fp)
}
   1eb48:	e037883a 	mov	sp,fp
   1eb4c:	df000017 	ldw	fp,0(sp)
   1eb50:	dec00104 	addi	sp,sp,4
   1eb54:	f800283a 	ret

0001eb58 <read_data_valid>:

alt_u8 read_data_valid(alt_u32 data_reg)
{
   1eb58:	defffd04 	addi	sp,sp,-12
   1eb5c:	df000215 	stw	fp,8(sp)
   1eb60:	df000204 	addi	fp,sp,8
   1eb64:	e13fff15 	stw	r4,-4(fp)
	alt_u8 rvalid = (alt_u8)((data_reg & ALT_UP_PS2_PORT_DATA_REG_RVALID_MSK ) >> ALT_UP_PS2_PORT_DATA_REG_RVALID_OFST);
   1eb68:	e0bfff17 	ldw	r2,-4(fp)
   1eb6c:	10a0000c 	andi	r2,r2,32768
   1eb70:	1004d3fa 	srli	r2,r2,15
   1eb74:	e0bffe05 	stb	r2,-8(fp)
	return rvalid;
   1eb78:	e0bffe03 	ldbu	r2,-8(fp)
}
   1eb7c:	e037883a 	mov	sp,fp
   1eb80:	df000017 	ldw	fp,0(sp)
   1eb84:	dec00104 	addi	sp,sp,4
   1eb88:	f800283a 	ret

0001eb8c <read_data_byte>:

alt_u8 read_data_byte(alt_u32 data_reg)
{
   1eb8c:	defffd04 	addi	sp,sp,-12
   1eb90:	df000215 	stw	fp,8(sp)
   1eb94:	df000204 	addi	fp,sp,8
   1eb98:	e13fff15 	stw	r4,-4(fp)
	alt_u8 data = (alt_u8) ( (data_reg & ALT_UP_PS2_PORT_DATA_REG_DATA_MSK) >> ALT_UP_PS2_PORT_DATA_REG_DATA_OFST) ;
   1eb9c:	e0bfff17 	ldw	r2,-4(fp)
   1eba0:	e0bffe05 	stb	r2,-8(fp)
	return data;
   1eba4:	e0bffe03 	ldbu	r2,-8(fp)
}
   1eba8:	e037883a 	mov	sp,fp
   1ebac:	df000017 	ldw	fp,0(sp)
   1ebb0:	dec00104 	addi	sp,sp,4
   1ebb4:	f800283a 	ret

0001ebb8 <alt_up_ps2_init>:

//////////////////////////////////////////////////////////////////////////////////////////////
// HAL Functions
void alt_up_ps2_init(alt_up_ps2_dev *ps2)
{
   1ebb8:	defffb04 	addi	sp,sp,-20
   1ebbc:	dfc00415 	stw	ra,16(sp)
   1ebc0:	df000315 	stw	fp,12(sp)
   1ebc4:	df000304 	addi	fp,sp,12
   1ebc8:	e13fff15 	stw	r4,-4(fp)
	// initialize the device
	unsigned char byte;
	//send the reset request, wait for ACK
	int status = alt_up_ps2_write_data_byte_with_ack(ps2, 0xff);
   1ebcc:	e13fff17 	ldw	r4,-4(fp)
   1ebd0:	01403fc4 	movi	r5,255
   1ebd4:	001ee140 	call	1ee14 <alt_up_ps2_write_data_byte_with_ack>
   1ebd8:	e0bffd15 	stw	r2,-12(fp)
	if (status == 0)
   1ebdc:	e0bffd17 	ldw	r2,-12(fp)
   1ebe0:	1000211e 	bne	r2,zero,1ec68 <alt_up_ps2_init+0xb0>
	{
		// reset succeed, now try to get the BAT result, AA means passed
		status = alt_up_ps2_read_data_byte_timeout(ps2, &byte);
   1ebe4:	e0bffe04 	addi	r2,fp,-8
   1ebe8:	e13fff17 	ldw	r4,-4(fp)
   1ebec:	100b883a 	mov	r5,r2
   1ebf0:	001ee780 	call	1ee78 <alt_up_ps2_read_data_byte_timeout>
   1ebf4:	e0bffd15 	stw	r2,-12(fp)
		if (status == 0 && byte == 0xAA)
   1ebf8:	e0bffd17 	ldw	r2,-12(fp)
   1ebfc:	10001a1e 	bne	r2,zero,1ec68 <alt_up_ps2_init+0xb0>
   1ec00:	e0bffe03 	ldbu	r2,-8(fp)
   1ec04:	10803fcc 	andi	r2,r2,255
   1ec08:	10802a98 	cmpnei	r2,r2,170
   1ec0c:	1000161e 	bne	r2,zero,1ec68 <alt_up_ps2_init+0xb0>
		{
			//get the 2nd byte
			status = alt_up_ps2_read_data_byte_timeout(ps2, &byte);
   1ec10:	e0bffe04 	addi	r2,fp,-8
   1ec14:	e13fff17 	ldw	r4,-4(fp)
   1ec18:	100b883a 	mov	r5,r2
   1ec1c:	001ee780 	call	1ee78 <alt_up_ps2_read_data_byte_timeout>
   1ec20:	e0bffd15 	stw	r2,-12(fp)
			if (status == -ETIMEDOUT)
   1ec24:	e0bffd17 	ldw	r2,-12(fp)
   1ec28:	10bfe318 	cmpnei	r2,r2,-116
   1ec2c:	1000041e 	bne	r2,zero,1ec40 <alt_up_ps2_init+0x88>
			{
				//for keyboard, only 2 bytes are sent(ACK, PASS/FAIL), so timeout
				ps2->device_type = PS2_KEYBOARD;
   1ec30:	e0bfff17 	ldw	r2,-4(fp)
   1ec34:	00c00044 	movi	r3,1
   1ec38:	10c00d15 	stw	r3,52(r2)
   1ec3c:	00000a06 	br	1ec68 <alt_up_ps2_init+0xb0>
			}
			else if (status == 0 && byte == 0x00)
   1ec40:	e0bffd17 	ldw	r2,-12(fp)
   1ec44:	1000081e 	bne	r2,zero,1ec68 <alt_up_ps2_init+0xb0>
   1ec48:	e0bffe03 	ldbu	r2,-8(fp)
   1ec4c:	10803fcc 	andi	r2,r2,255
   1ec50:	1000051e 	bne	r2,zero,1ec68 <alt_up_ps2_init+0xb0>
			{
				//for mouse, it will sent out 0x00 after sending out ACK and PASS/FAIL.
				ps2->device_type = PS2_MOUSE;
   1ec54:	e0bfff17 	ldw	r2,-4(fp)
   1ec58:	10000d15 	stw	zero,52(r2)
				(void) alt_up_ps2_write_data_byte (ps2, 0xf4); // enable data from mouse
   1ec5c:	e13fff17 	ldw	r4,-4(fp)
   1ec60:	01403d04 	movi	r5,244
   1ec64:	001ed300 	call	1ed30 <alt_up_ps2_write_data_byte>
			}
		}
	}
}
   1ec68:	e037883a 	mov	sp,fp
   1ec6c:	dfc00117 	ldw	ra,4(sp)
   1ec70:	df000017 	ldw	fp,0(sp)
   1ec74:	dec00204 	addi	sp,sp,8
   1ec78:	f800283a 	ret

0001ec7c <alt_up_ps2_enable_read_interrupt>:

void alt_up_ps2_enable_read_interrupt(alt_up_ps2_dev *ps2)
{
   1ec7c:	defffd04 	addi	sp,sp,-12
   1ec80:	df000215 	stw	fp,8(sp)
   1ec84:	df000204 	addi	fp,sp,8
   1ec88:	e13fff15 	stw	r4,-4(fp)
	unsigned int ctrl_reg;
	ctrl_reg = IORD_ALT_UP_PS2_PORT_CTRL_REG(ps2->base); 
   1ec8c:	e0bfff17 	ldw	r2,-4(fp)
   1ec90:	10800a17 	ldw	r2,40(r2)
   1ec94:	10800104 	addi	r2,r2,4
   1ec98:	10800037 	ldwio	r2,0(r2)
   1ec9c:	e0bffe15 	stw	r2,-8(fp)
	// set RE to 1 while maintaining other bits the same
	ctrl_reg |= ALT_UP_PS2_PORT_CTRL_REG_RE_MSK;
   1eca0:	e0bffe17 	ldw	r2,-8(fp)
   1eca4:	10800054 	ori	r2,r2,1
   1eca8:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_PS2_PORT_CTRL_REG(ps2->base, ctrl_reg);
   1ecac:	e0bfff17 	ldw	r2,-4(fp)
   1ecb0:	10800a17 	ldw	r2,40(r2)
   1ecb4:	10800104 	addi	r2,r2,4
   1ecb8:	1007883a 	mov	r3,r2
   1ecbc:	e0bffe17 	ldw	r2,-8(fp)
   1ecc0:	18800035 	stwio	r2,0(r3)
}
   1ecc4:	e037883a 	mov	sp,fp
   1ecc8:	df000017 	ldw	fp,0(sp)
   1eccc:	dec00104 	addi	sp,sp,4
   1ecd0:	f800283a 	ret

0001ecd4 <alt_up_ps2_disable_read_interrupt>:

void alt_up_ps2_disable_read_interrupt(alt_up_ps2_dev *ps2)
{
   1ecd4:	defffd04 	addi	sp,sp,-12
   1ecd8:	df000215 	stw	fp,8(sp)
   1ecdc:	df000204 	addi	fp,sp,8
   1ece0:	e13fff15 	stw	r4,-4(fp)
	unsigned int ctrl_reg;
	ctrl_reg = IORD_ALT_UP_PS2_PORT_CTRL_REG(ps2->base); 
   1ece4:	e0bfff17 	ldw	r2,-4(fp)
   1ece8:	10800a17 	ldw	r2,40(r2)
   1ecec:	10800104 	addi	r2,r2,4
   1ecf0:	10800037 	ldwio	r2,0(r2)
   1ecf4:	e0bffe15 	stw	r2,-8(fp)
	// set RE to 0 while maintaining other bits the same
	ctrl_reg &= ~ALT_UP_PS2_PORT_CTRL_REG_RE_MSK;
   1ecf8:	e0fffe17 	ldw	r3,-8(fp)
   1ecfc:	00bfff84 	movi	r2,-2
   1ed00:	1884703a 	and	r2,r3,r2
   1ed04:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_PS2_PORT_CTRL_REG(ps2->base, ctrl_reg);
   1ed08:	e0bfff17 	ldw	r2,-4(fp)
   1ed0c:	10800a17 	ldw	r2,40(r2)
   1ed10:	10800104 	addi	r2,r2,4
   1ed14:	1007883a 	mov	r3,r2
   1ed18:	e0bffe17 	ldw	r2,-8(fp)
   1ed1c:	18800035 	stwio	r2,0(r3)
}
   1ed20:	e037883a 	mov	sp,fp
   1ed24:	df000017 	ldw	fp,0(sp)
   1ed28:	dec00104 	addi	sp,sp,4
   1ed2c:	f800283a 	ret

0001ed30 <alt_up_ps2_write_data_byte>:

int alt_up_ps2_write_data_byte(alt_up_ps2_dev *ps2, unsigned char byte)
{
   1ed30:	defffb04 	addi	sp,sp,-20
   1ed34:	dfc00415 	stw	ra,16(sp)
   1ed38:	df000315 	stw	fp,12(sp)
   1ed3c:	df000304 	addi	fp,sp,12
   1ed40:	e13ffe15 	stw	r4,-8(fp)
   1ed44:	2805883a 	mov	r2,r5
   1ed48:	e0bfff05 	stb	r2,-4(fp)
	//note: data are only located at the lower 8 bits
	//note: the software send command to the PS2 peripheral through the data
	//		register rather than the control register
	IOWR_ALT_UP_PS2_PORT_DATA(ps2->base, byte);
   1ed4c:	e0bffe17 	ldw	r2,-8(fp)
   1ed50:	10800a17 	ldw	r2,40(r2)
   1ed54:	1007883a 	mov	r3,r2
   1ed58:	e0bfff03 	ldbu	r2,-4(fp)
   1ed5c:	18800025 	stbio	r2,0(r3)
	alt_u32 ctrl_reg = IORD_ALT_UP_PS2_PORT_CTRL_REG(ps2->base);
   1ed60:	e0bffe17 	ldw	r2,-8(fp)
   1ed64:	10800a17 	ldw	r2,40(r2)
   1ed68:	10800104 	addi	r2,r2,4
   1ed6c:	10800037 	ldwio	r2,0(r2)
   1ed70:	e0bffd15 	stw	r2,-12(fp)
	if (read_CE_bit(ctrl_reg))
   1ed74:	e13ffd17 	ldw	r4,-12(fp)
   1ed78:	001eaf40 	call	1eaf4 <read_CE_bit>
   1ed7c:	10803fcc 	andi	r2,r2,255
   1ed80:	10000226 	beq	r2,zero,1ed8c <alt_up_ps2_write_data_byte+0x5c>
	{
		//CE bit is set --> error occurs on sending commands
		return -EIO;
   1ed84:	00bffec4 	movi	r2,-5
   1ed88:	00000106 	br	1ed90 <alt_up_ps2_write_data_byte+0x60>
	}
	return 0;
   1ed8c:	0005883a 	mov	r2,zero
}
   1ed90:	e037883a 	mov	sp,fp
   1ed94:	dfc00117 	ldw	ra,4(sp)
   1ed98:	df000017 	ldw	fp,0(sp)
   1ed9c:	dec00204 	addi	sp,sp,8
   1eda0:	f800283a 	ret

0001eda4 <alt_up_ps2_wait_for_ack>:

int alt_up_ps2_wait_for_ack(alt_up_ps2_dev *ps2)
{
   1eda4:	defffc04 	addi	sp,sp,-16
   1eda8:	dfc00315 	stw	ra,12(sp)
   1edac:	df000215 	stw	fp,8(sp)
   1edb0:	df000204 	addi	fp,sp,8
   1edb4:	e13fff15 	stw	r4,-4(fp)
	unsigned char data = 0;
   1edb8:	e03ffe45 	stb	zero,-7(fp)
	unsigned char status = 0;
   1edbc:	e03ffe05 	stb	zero,-8(fp)
	do
	{
		status = alt_up_ps2_read_data_byte_timeout(ps2, &data); 
   1edc0:	e0bffe44 	addi	r2,fp,-7
   1edc4:	e13fff17 	ldw	r4,-4(fp)
   1edc8:	100b883a 	mov	r5,r2
   1edcc:	001ee780 	call	1ee78 <alt_up_ps2_read_data_byte_timeout>
   1edd0:	e0bffe05 	stb	r2,-8(fp)
		if ( status == 0)
   1edd4:	e0bffe03 	ldbu	r2,-8(fp)
   1edd8:	1000061e 	bne	r2,zero,1edf4 <alt_up_ps2_wait_for_ack+0x50>
		{
			if (data == PS2_ACK)
   1eddc:	e0bffe43 	ldbu	r2,-7(fp)
   1ede0:	10803fcc 	andi	r2,r2,255
   1ede4:	10803e98 	cmpnei	r2,r2,250
   1ede8:	1000041e 	bne	r2,zero,1edfc <alt_up_ps2_wait_for_ack+0x58>
				return 0;
   1edec:	0005883a 	mov	r2,zero
   1edf0:	00000306 	br	1ee00 <alt_up_ps2_wait_for_ack+0x5c>
		}
		else 
		{
			return status;
   1edf4:	e0bffe03 	ldbu	r2,-8(fp)
   1edf8:	00000106 	br	1ee00 <alt_up_ps2_wait_for_ack+0x5c>
		}
	} while(1);
   1edfc:	003ff006 	br	1edc0 <__alt_mem_Flash_flash_data+0xf401edc0>
	return -ETIMEDOUT;
}
   1ee00:	e037883a 	mov	sp,fp
   1ee04:	dfc00117 	ldw	ra,4(sp)
   1ee08:	df000017 	ldw	fp,0(sp)
   1ee0c:	dec00204 	addi	sp,sp,8
   1ee10:	f800283a 	ret

0001ee14 <alt_up_ps2_write_data_byte_with_ack>:

int alt_up_ps2_write_data_byte_with_ack(alt_up_ps2_dev *ps2, unsigned char byte)
{
   1ee14:	defffa04 	addi	sp,sp,-24
   1ee18:	dfc00515 	stw	ra,20(sp)
   1ee1c:	df000415 	stw	fp,16(sp)
   1ee20:	df000404 	addi	fp,sp,16
   1ee24:	e13ffe15 	stw	r4,-8(fp)
   1ee28:	2805883a 	mov	r2,r5
   1ee2c:	e0bfff05 	stb	r2,-4(fp)
	int send_status = alt_up_ps2_write_data_byte(ps2, byte);
   1ee30:	e0bfff03 	ldbu	r2,-4(fp)
   1ee34:	e13ffe17 	ldw	r4,-8(fp)
   1ee38:	100b883a 	mov	r5,r2
   1ee3c:	001ed300 	call	1ed30 <alt_up_ps2_write_data_byte>
   1ee40:	e0bffc15 	stw	r2,-16(fp)
	if ( send_status != 0)
   1ee44:	e0bffc17 	ldw	r2,-16(fp)
   1ee48:	10000226 	beq	r2,zero,1ee54 <alt_up_ps2_write_data_byte_with_ack+0x40>
		// return on sending error
		return send_status;
   1ee4c:	e0bffc17 	ldw	r2,-16(fp)
   1ee50:	00000406 	br	1ee64 <alt_up_ps2_write_data_byte_with_ack+0x50>

	int ack_status = alt_up_ps2_wait_for_ack(ps2);
   1ee54:	e13ffe17 	ldw	r4,-8(fp)
   1ee58:	001eda40 	call	1eda4 <alt_up_ps2_wait_for_ack>
   1ee5c:	e0bffd15 	stw	r2,-12(fp)
	return ack_status;
   1ee60:	e0bffd17 	ldw	r2,-12(fp)
}
   1ee64:	e037883a 	mov	sp,fp
   1ee68:	dfc00117 	ldw	ra,4(sp)
   1ee6c:	df000017 	ldw	fp,0(sp)
   1ee70:	dec00204 	addi	sp,sp,8
   1ee74:	f800283a 	ret

0001ee78 <alt_up_ps2_read_data_byte_timeout>:

int alt_up_ps2_read_data_byte_timeout(alt_up_ps2_dev *ps2, unsigned char *byte)
{
   1ee78:	defffa04 	addi	sp,sp,-24
   1ee7c:	dfc00515 	stw	ra,20(sp)
   1ee80:	df000415 	stw	fp,16(sp)
   1ee84:	df000404 	addi	fp,sp,16
   1ee88:	e13ffe15 	stw	r4,-8(fp)
   1ee8c:	e17fff15 	stw	r5,-4(fp)
	unsigned int data_reg = 0; 
   1ee90:	e03ffd15 	stw	zero,-12(fp)
	unsigned int count = 0;
   1ee94:	e03ffc15 	stw	zero,-16(fp)
	do {
		count++;
   1ee98:	e0bffc17 	ldw	r2,-16(fp)
   1ee9c:	10800044 	addi	r2,r2,1
   1eea0:	e0bffc15 	stw	r2,-16(fp)
		data_reg = IORD_ALT_UP_PS2_PORT_DATA_REG(ps2->base);
   1eea4:	e0bffe17 	ldw	r2,-8(fp)
   1eea8:	10800a17 	ldw	r2,40(r2)
   1eeac:	10800037 	ldwio	r2,0(r2)
   1eeb0:	e0bffd15 	stw	r2,-12(fp)
		if (read_data_valid(data_reg))
   1eeb4:	e13ffd17 	ldw	r4,-12(fp)
   1eeb8:	001eb580 	call	1eb58 <read_data_valid>
   1eebc:	10803fcc 	andi	r2,r2,255
   1eec0:	10000726 	beq	r2,zero,1eee0 <alt_up_ps2_read_data_byte_timeout+0x68>
		{
			*byte = read_data_byte(data_reg);
   1eec4:	e13ffd17 	ldw	r4,-12(fp)
   1eec8:	001eb8c0 	call	1eb8c <read_data_byte>
   1eecc:	1007883a 	mov	r3,r2
   1eed0:	e0bfff17 	ldw	r2,-4(fp)
   1eed4:	10c00005 	stb	r3,0(r2)
			return 0;
   1eed8:	0005883a 	mov	r2,zero
   1eedc:	00000a06 	br	1ef08 <alt_up_ps2_read_data_byte_timeout+0x90>
		}
		//timeout = 0 means to disable the timeout
		if ( ps2->timeout != 0 && count > ps2->timeout)
   1eee0:	e0bffe17 	ldw	r2,-8(fp)
   1eee4:	10800c17 	ldw	r2,48(r2)
   1eee8:	10000626 	beq	r2,zero,1ef04 <alt_up_ps2_read_data_byte_timeout+0x8c>
   1eeec:	e0bffe17 	ldw	r2,-8(fp)
   1eef0:	10c00c17 	ldw	r3,48(r2)
   1eef4:	e0bffc17 	ldw	r2,-16(fp)
   1eef8:	1880022e 	bgeu	r3,r2,1ef04 <alt_up_ps2_read_data_byte_timeout+0x8c>
		{
			return -ETIMEDOUT;
   1eefc:	00bfe304 	movi	r2,-116
   1ef00:	00000106 	br	1ef08 <alt_up_ps2_read_data_byte_timeout+0x90>
		}
	} while (1);
   1ef04:	003fe406 	br	1ee98 <__alt_mem_Flash_flash_data+0xf401ee98>
}
   1ef08:	e037883a 	mov	sp,fp
   1ef0c:	dfc00117 	ldw	ra,4(sp)
   1ef10:	df000017 	ldw	fp,0(sp)
   1ef14:	dec00204 	addi	sp,sp,8
   1ef18:	f800283a 	ret

0001ef1c <alt_up_ps2_read_data_byte>:

int alt_up_ps2_read_data_byte(alt_up_ps2_dev *ps2, unsigned char *byte)
{
   1ef1c:	defffb04 	addi	sp,sp,-20
   1ef20:	dfc00415 	stw	ra,16(sp)
   1ef24:	df000315 	stw	fp,12(sp)
   1ef28:	df000304 	addi	fp,sp,12
   1ef2c:	e13ffe15 	stw	r4,-8(fp)
   1ef30:	e17fff15 	stw	r5,-4(fp)
	unsigned int data_reg = 0; 
   1ef34:	e03ffd15 	stw	zero,-12(fp)
	data_reg = IORD_ALT_UP_PS2_PORT_DATA_REG(ps2->base);
   1ef38:	e0bffe17 	ldw	r2,-8(fp)
   1ef3c:	10800a17 	ldw	r2,40(r2)
   1ef40:	10800037 	ldwio	r2,0(r2)
   1ef44:	e0bffd15 	stw	r2,-12(fp)
	if (read_data_valid(data_reg))
   1ef48:	e13ffd17 	ldw	r4,-12(fp)
   1ef4c:	001eb580 	call	1eb58 <read_data_valid>
   1ef50:	10803fcc 	andi	r2,r2,255
   1ef54:	10000726 	beq	r2,zero,1ef74 <alt_up_ps2_read_data_byte+0x58>
	{
		*byte = read_data_byte(data_reg);
   1ef58:	e13ffd17 	ldw	r4,-12(fp)
   1ef5c:	001eb8c0 	call	1eb8c <read_data_byte>
   1ef60:	1007883a 	mov	r3,r2
   1ef64:	e0bfff17 	ldw	r2,-4(fp)
   1ef68:	10c00005 	stb	r3,0(r2)
		return 0;
   1ef6c:	0005883a 	mov	r2,zero
   1ef70:	00000106 	br	1ef78 <alt_up_ps2_read_data_byte+0x5c>
	}
	return -1;
   1ef74:	00bfffc4 	movi	r2,-1
}
   1ef78:	e037883a 	mov	sp,fp
   1ef7c:	dfc00117 	ldw	ra,4(sp)
   1ef80:	df000017 	ldw	fp,0(sp)
   1ef84:	dec00204 	addi	sp,sp,8
   1ef88:	f800283a 	ret

0001ef8c <alt_up_ps2_clear_fifo>:

void alt_up_ps2_clear_fifo(alt_up_ps2_dev *ps2)
{
   1ef8c:	defffb04 	addi	sp,sp,-20
   1ef90:	dfc00415 	stw	ra,16(sp)
   1ef94:	df000315 	stw	fp,12(sp)
   1ef98:	df000304 	addi	fp,sp,12
   1ef9c:	e13fff15 	stw	r4,-4(fp)
	// The DATA byte of the data register will be automatically cleared after a read
	// So we simply keep reading it until there are no available bytes
	alt_u16 num = 0;
   1efa0:	e03ffd0d 	sth	zero,-12(fp)
	unsigned int data_reg = 0;
   1efa4:	e03ffe15 	stw	zero,-8(fp)
	do
	{
		// read the data register (the DATA byte is cleared)
		data_reg = IORD_ALT_UP_PS2_PORT_DATA_REG(ps2->base);
   1efa8:	e0bfff17 	ldw	r2,-4(fp)
   1efac:	10800a17 	ldw	r2,40(r2)
   1efb0:	10800037 	ldwio	r2,0(r2)
   1efb4:	e0bffe15 	stw	r2,-8(fp)
		// get the number of available bytes from the RAVAIL part of data register
		num = read_num_bytes_available(data_reg);
   1efb8:	e13ffe17 	ldw	r4,-8(fp)
   1efbc:	001eb280 	call	1eb28 <read_num_bytes_available>
   1efc0:	e0bffd0d 	sth	r2,-12(fp)
	} while (num > 0);
   1efc4:	e0bffd0b 	ldhu	r2,-12(fp)
   1efc8:	103ff71e 	bne	r2,zero,1efa8 <__alt_mem_Flash_flash_data+0xf401efa8>
}
   1efcc:	e037883a 	mov	sp,fp
   1efd0:	dfc00117 	ldw	ra,4(sp)
   1efd4:	df000017 	ldw	fp,0(sp)
   1efd8:	dec00204 	addi	sp,sp,8
   1efdc:	f800283a 	ret

0001efe0 <alt_up_ps2_read_fd>:

//////////////////////////////////////////////////////////////
// FD Functions
int alt_up_ps2_read_fd (alt_fd* fd, char* ptr, int len)
{
   1efe0:	defff804 	addi	sp,sp,-32
   1efe4:	dfc00715 	stw	ra,28(sp)
   1efe8:	df000615 	stw	fp,24(sp)
   1efec:	df000604 	addi	fp,sp,24
   1eff0:	e13ffd15 	stw	r4,-12(fp)
   1eff4:	e17ffe15 	stw	r5,-8(fp)
   1eff8:	e1bfff15 	stw	r6,-4(fp)
	alt_up_ps2_dev *ps2 = (alt_up_ps2_dev*) fd->dev;
   1effc:	e0bffd17 	ldw	r2,-12(fp)
   1f000:	10800017 	ldw	r2,0(r2)
   1f004:	e0bffa15 	stw	r2,-24(fp)
	int status = 0;
   1f008:	e03ffb15 	stw	zero,-20(fp)
	int count = 0;
   1f00c:	e03ffc15 	stw	zero,-16(fp)
	while (count < len);
   1f010:	e0fffc17 	ldw	r3,-16(fp)
   1f014:	e0bfff17 	ldw	r2,-4(fp)
   1f018:	18bffd16 	blt	r3,r2,1f010 <__alt_mem_Flash_flash_data+0xf401f010>
	{
		status = alt_up_ps2_read_data_byte_timeout(ps2, (unsigned char *)ptr++);
   1f01c:	e0bffe17 	ldw	r2,-8(fp)
   1f020:	10c00044 	addi	r3,r2,1
   1f024:	e0fffe15 	stw	r3,-8(fp)
   1f028:	e13ffa17 	ldw	r4,-24(fp)
   1f02c:	100b883a 	mov	r5,r2
   1f030:	001ee780 	call	1ee78 <alt_up_ps2_read_data_byte_timeout>
   1f034:	e0bffb15 	stw	r2,-20(fp)
		if (status!=0)
   1f038:	e0bffb17 	ldw	r2,-20(fp)
   1f03c:	10000226 	beq	r2,zero,1f048 <alt_up_ps2_read_fd+0x68>
			return count;
   1f040:	e0bffc17 	ldw	r2,-16(fp)
   1f044:	00000406 	br	1f058 <alt_up_ps2_read_fd+0x78>
		count++;
   1f048:	e0bffc17 	ldw	r2,-16(fp)
   1f04c:	10800044 	addi	r2,r2,1
   1f050:	e0bffc15 	stw	r2,-16(fp)
	} 
	return count;
   1f054:	e0bffc17 	ldw	r2,-16(fp)
}
   1f058:	e037883a 	mov	sp,fp
   1f05c:	dfc00117 	ldw	ra,4(sp)
   1f060:	df000017 	ldw	fp,0(sp)
   1f064:	dec00204 	addi	sp,sp,8
   1f068:	f800283a 	ret

0001f06c <alt_up_ps2_write_fd>:

int alt_up_ps2_write_fd (alt_fd* fd, const char* ptr, int len)
{
   1f06c:	defff804 	addi	sp,sp,-32
   1f070:	dfc00715 	stw	ra,28(sp)
   1f074:	df000615 	stw	fp,24(sp)
   1f078:	df000604 	addi	fp,sp,24
   1f07c:	e13ffd15 	stw	r4,-12(fp)
   1f080:	e17ffe15 	stw	r5,-8(fp)
   1f084:	e1bfff15 	stw	r6,-4(fp)
	alt_up_ps2_dev *ps2 = (alt_up_ps2_dev*) fd->dev;
   1f088:	e0bffd17 	ldw	r2,-12(fp)
   1f08c:	10800017 	ldw	r2,0(r2)
   1f090:	e0bffb15 	stw	r2,-20(fp)
	int status = 0;
   1f094:	e03ffc15 	stw	zero,-16(fp)
	int count = 0;
   1f098:	e03ffa15 	stw	zero,-24(fp)
	while (count < len)
   1f09c:	00001006 	br	1f0e0 <alt_up_ps2_write_fd+0x74>
	{
		status = alt_up_ps2_write_data_byte(ps2, *(ptr++) );
   1f0a0:	e0bffe17 	ldw	r2,-8(fp)
   1f0a4:	10c00044 	addi	r3,r2,1
   1f0a8:	e0fffe15 	stw	r3,-8(fp)
   1f0ac:	10800003 	ldbu	r2,0(r2)
   1f0b0:	10803fcc 	andi	r2,r2,255
   1f0b4:	e13ffb17 	ldw	r4,-20(fp)
   1f0b8:	100b883a 	mov	r5,r2
   1f0bc:	001ed300 	call	1ed30 <alt_up_ps2_write_data_byte>
   1f0c0:	e0bffc15 	stw	r2,-16(fp)
		if (status!=0)
   1f0c4:	e0bffc17 	ldw	r2,-16(fp)
   1f0c8:	10000226 	beq	r2,zero,1f0d4 <alt_up_ps2_write_fd+0x68>
			return count;
   1f0cc:	e0bffa17 	ldw	r2,-24(fp)
   1f0d0:	00000706 	br	1f0f0 <alt_up_ps2_write_fd+0x84>
		count++;
   1f0d4:	e0bffa17 	ldw	r2,-24(fp)
   1f0d8:	10800044 	addi	r2,r2,1
   1f0dc:	e0bffa15 	stw	r2,-24(fp)
int alt_up_ps2_write_fd (alt_fd* fd, const char* ptr, int len)
{
	alt_up_ps2_dev *ps2 = (alt_up_ps2_dev*) fd->dev;
	int status = 0;
	int count = 0;
	while (count < len)
   1f0e0:	e0fffa17 	ldw	r3,-24(fp)
   1f0e4:	e0bfff17 	ldw	r2,-4(fp)
   1f0e8:	18bfed16 	blt	r3,r2,1f0a0 <__alt_mem_Flash_flash_data+0xf401f0a0>
		status = alt_up_ps2_write_data_byte(ps2, *(ptr++) );
		if (status!=0)
			return count;
		count++;
	}
	return count;
   1f0ec:	e0bffa17 	ldw	r2,-24(fp)
}
   1f0f0:	e037883a 	mov	sp,fp
   1f0f4:	dfc00117 	ldw	ra,4(sp)
   1f0f8:	df000017 	ldw	fp,0(sp)
   1f0fc:	dec00204 	addi	sp,sp,8
   1f100:	f800283a 	ret

0001f104 <alt_up_ps2_open_dev>:

alt_up_ps2_dev* alt_up_ps2_open_dev(const char* name)
{
   1f104:	defffc04 	addi	sp,sp,-16
   1f108:	dfc00315 	stw	ra,12(sp)
   1f10c:	df000215 	stw	fp,8(sp)
   1f110:	df000204 	addi	fp,sp,8
   1f114:	e13fff15 	stw	r4,-4(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_ps2_dev *dev = (alt_up_ps2_dev*)alt_find_dev(name, &alt_dev_list);
   1f118:	e13fff17 	ldw	r4,-4(fp)
   1f11c:	014000b4 	movhi	r5,2
   1f120:	294c8d04 	addi	r5,r5,12852
   1f124:	001fac00 	call	1fac0 <alt_find_dev>
   1f128:	e0bffe15 	stw	r2,-8(fp)

  return dev;
   1f12c:	e0bffe17 	ldw	r2,-8(fp)
}
   1f130:	e037883a 	mov	sp,fp
   1f134:	dfc00117 	ldw	ra,4(sp)
   1f138:	df000017 	ldw	fp,0(sp)
   1f13c:	dec00204 	addi	sp,sp,8
   1f140:	f800283a 	ret

0001f144 <alt_up_rs232_enable_read_interrupt>:
#include "altera_up_avalon_rs232.h"
#include "altera_up_avalon_rs232_regs.h"


void alt_up_rs232_enable_read_interrupt(alt_up_rs232_dev *rs232)
{
   1f144:	defffd04 	addi	sp,sp,-12
   1f148:	df000215 	stw	fp,8(sp)
   1f14c:	df000204 	addi	fp,sp,8
   1f150:	e13fff15 	stw	r4,-4(fp)
	alt_u32 ctrl_reg;
	ctrl_reg = IORD_ALT_UP_RS232_CONTROL(rs232->base); 
   1f154:	e0bfff17 	ldw	r2,-4(fp)
   1f158:	10800a17 	ldw	r2,40(r2)
   1f15c:	10800104 	addi	r2,r2,4
   1f160:	10800037 	ldwio	r2,0(r2)
   1f164:	e0bffe15 	stw	r2,-8(fp)
	// set RE to 1 while maintaining other bits the same
	ctrl_reg |= ALT_UP_RS232_CONTROL_RE_MSK;
   1f168:	e0bffe17 	ldw	r2,-8(fp)
   1f16c:	10800054 	ori	r2,r2,1
   1f170:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_RS232_CONTROL(rs232->base, ctrl_reg);
   1f174:	e0bfff17 	ldw	r2,-4(fp)
   1f178:	10800a17 	ldw	r2,40(r2)
   1f17c:	10800104 	addi	r2,r2,4
   1f180:	1007883a 	mov	r3,r2
   1f184:	e0bffe17 	ldw	r2,-8(fp)
   1f188:	18800035 	stwio	r2,0(r3)
}
   1f18c:	e037883a 	mov	sp,fp
   1f190:	df000017 	ldw	fp,0(sp)
   1f194:	dec00104 	addi	sp,sp,4
   1f198:	f800283a 	ret

0001f19c <alt_up_rs232_disable_read_interrupt>:

void alt_up_rs232_disable_read_interrupt(alt_up_rs232_dev *rs232)
{
   1f19c:	defffd04 	addi	sp,sp,-12
   1f1a0:	df000215 	stw	fp,8(sp)
   1f1a4:	df000204 	addi	fp,sp,8
   1f1a8:	e13fff15 	stw	r4,-4(fp)
	alt_u32 ctrl_reg;
	ctrl_reg = IORD_ALT_UP_RS232_CONTROL(rs232->base); 
   1f1ac:	e0bfff17 	ldw	r2,-4(fp)
   1f1b0:	10800a17 	ldw	r2,40(r2)
   1f1b4:	10800104 	addi	r2,r2,4
   1f1b8:	10800037 	ldwio	r2,0(r2)
   1f1bc:	e0bffe15 	stw	r2,-8(fp)
	// set RE to 0 while maintaining other bits the same
	ctrl_reg &= ~ALT_UP_RS232_CONTROL_RE_MSK;
   1f1c0:	e0fffe17 	ldw	r3,-8(fp)
   1f1c4:	00bfff84 	movi	r2,-2
   1f1c8:	1884703a 	and	r2,r3,r2
   1f1cc:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_RS232_CONTROL(rs232->base, ctrl_reg);
   1f1d0:	e0bfff17 	ldw	r2,-4(fp)
   1f1d4:	10800a17 	ldw	r2,40(r2)
   1f1d8:	10800104 	addi	r2,r2,4
   1f1dc:	1007883a 	mov	r3,r2
   1f1e0:	e0bffe17 	ldw	r2,-8(fp)
   1f1e4:	18800035 	stwio	r2,0(r3)
}
   1f1e8:	e037883a 	mov	sp,fp
   1f1ec:	df000017 	ldw	fp,0(sp)
   1f1f0:	dec00104 	addi	sp,sp,4
   1f1f4:	f800283a 	ret

0001f1f8 <alt_up_rs232_get_used_space_in_read_FIFO>:

unsigned alt_up_rs232_get_used_space_in_read_FIFO(alt_up_rs232_dev *rs232)
{
   1f1f8:	defffd04 	addi	sp,sp,-12
   1f1fc:	df000215 	stw	fp,8(sp)
   1f200:	df000204 	addi	fp,sp,8
   1f204:	e13fff15 	stw	r4,-4(fp)
	alt_u16 ravail = 0;
   1f208:	e03ffe0d 	sth	zero,-8(fp)
	// we can only read the 16 bits for RAVAIL --- a read of DATA will discard the data
//	ravail = IORD_16DIRECT(IOADDR_ALT_UP_RS232_DATA(rs232->base), 2); 
	ravail = IORD_ALT_UP_RS232_RAVAIL(rs232->base); 
   1f20c:	e0bfff17 	ldw	r2,-4(fp)
   1f210:	10800a17 	ldw	r2,40(r2)
   1f214:	10800084 	addi	r2,r2,2
   1f218:	1080002b 	ldhuio	r2,0(r2)
   1f21c:	10bfffcc 	andi	r2,r2,65535
   1f220:	e0bffe0d 	sth	r2,-8(fp)
//	return ravail;
	return (ravail & ALT_UP_RS232_RAVAIL_MSK) >> ALT_UP_RS232_RAVAIL_OFST;
   1f224:	e0bffe0b 	ldhu	r2,-8(fp)
}
   1f228:	e037883a 	mov	sp,fp
   1f22c:	df000017 	ldw	fp,0(sp)
   1f230:	dec00104 	addi	sp,sp,4
   1f234:	f800283a 	ret

0001f238 <alt_up_rs232_get_available_space_in_write_FIFO>:

unsigned alt_up_rs232_get_available_space_in_write_FIFO(alt_up_rs232_dev *rs232)
{
   1f238:	defffd04 	addi	sp,sp,-12
   1f23c:	df000215 	stw	fp,8(sp)
   1f240:	df000204 	addi	fp,sp,8
   1f244:	e13fff15 	stw	r4,-4(fp)
	alt_u32 ctrl_reg;
	ctrl_reg = IORD_ALT_UP_RS232_CONTROL(rs232->base); 
   1f248:	e0bfff17 	ldw	r2,-4(fp)
   1f24c:	10800a17 	ldw	r2,40(r2)
   1f250:	10800104 	addi	r2,r2,4
   1f254:	10800037 	ldwio	r2,0(r2)
   1f258:	e0bffe15 	stw	r2,-8(fp)
	return (ctrl_reg & ALT_UP_RS232_CONTROL_WSPACE_MSK) >> ALT_UP_RS232_CONTROL_WSPACE_OFST;
   1f25c:	e0bffe17 	ldw	r2,-8(fp)
   1f260:	1004d43a 	srli	r2,r2,16
}
   1f264:	e037883a 	mov	sp,fp
   1f268:	df000017 	ldw	fp,0(sp)
   1f26c:	dec00104 	addi	sp,sp,4
   1f270:	f800283a 	ret

0001f274 <alt_up_rs232_check_parity>:

int alt_up_rs232_check_parity(alt_u32 data_reg)
{
   1f274:	defffd04 	addi	sp,sp,-12
   1f278:	df000215 	stw	fp,8(sp)
   1f27c:	df000204 	addi	fp,sp,8
   1f280:	e13fff15 	stw	r4,-4(fp)
	unsigned parity_error = (data_reg & ALT_UP_RS232_DATA_PE_MSK) >> ALT_UP_RS232_DATA_PE_OFST;
   1f284:	e0bfff17 	ldw	r2,-4(fp)
   1f288:	1080800c 	andi	r2,r2,512
   1f28c:	1004d27a 	srli	r2,r2,9
   1f290:	e0bffe15 	stw	r2,-8(fp)
	return (parity_error ? -1 : 0);
   1f294:	e0bffe17 	ldw	r2,-8(fp)
   1f298:	10000226 	beq	r2,zero,1f2a4 <alt_up_rs232_check_parity+0x30>
   1f29c:	00bfffc4 	movi	r2,-1
   1f2a0:	00000106 	br	1f2a8 <alt_up_rs232_check_parity+0x34>
   1f2a4:	0005883a 	mov	r2,zero
}
   1f2a8:	e037883a 	mov	sp,fp
   1f2ac:	df000017 	ldw	fp,0(sp)
   1f2b0:	dec00104 	addi	sp,sp,4
   1f2b4:	f800283a 	ret

0001f2b8 <alt_up_rs232_write_data>:

int alt_up_rs232_write_data(alt_up_rs232_dev *rs232, alt_u8 data)
{
   1f2b8:	defffd04 	addi	sp,sp,-12
   1f2bc:	df000215 	stw	fp,8(sp)
   1f2c0:	df000204 	addi	fp,sp,8
   1f2c4:	e13ffe15 	stw	r4,-8(fp)
   1f2c8:	2805883a 	mov	r2,r5
   1f2cc:	e0bfff05 	stb	r2,-4(fp)
	/*alt_u32 data_reg;
	data_reg = IORD_ALT_UP_RS232_DATA(rs232->base);*/
    
	// we can write directly without thinking about other bit fields for this
	// case ONLY, because only DATA field of the data register is writable
	IOWR_ALT_UP_RS232_DATA(rs232->base, (data>>ALT_UP_RS232_DATA_DATA_OFST) & ALT_UP_RS232_DATA_DATA_MSK);
   1f2d0:	e0bffe17 	ldw	r2,-8(fp)
   1f2d4:	10800a17 	ldw	r2,40(r2)
   1f2d8:	1007883a 	mov	r3,r2
   1f2dc:	e0bfff03 	ldbu	r2,-4(fp)
   1f2e0:	18800035 	stwio	r2,0(r3)
	return 0;
   1f2e4:	0005883a 	mov	r2,zero
}
   1f2e8:	e037883a 	mov	sp,fp
   1f2ec:	df000017 	ldw	fp,0(sp)
   1f2f0:	dec00104 	addi	sp,sp,4
   1f2f4:	f800283a 	ret

0001f2f8 <alt_up_rs232_read_data>:

int alt_up_rs232_read_data(alt_up_rs232_dev *rs232, alt_u8 *data, alt_u8 *parity_error)
{
   1f2f8:	defffa04 	addi	sp,sp,-24
   1f2fc:	dfc00515 	stw	ra,20(sp)
   1f300:	df000415 	stw	fp,16(sp)
   1f304:	df000404 	addi	fp,sp,16
   1f308:	e13ffd15 	stw	r4,-12(fp)
   1f30c:	e17ffe15 	stw	r5,-8(fp)
   1f310:	e1bfff15 	stw	r6,-4(fp)
	alt_u32 data_reg;
	data_reg = IORD_ALT_UP_RS232_DATA(rs232->base);
   1f314:	e0bffd17 	ldw	r2,-12(fp)
   1f318:	10800a17 	ldw	r2,40(r2)
   1f31c:	10800037 	ldwio	r2,0(r2)
   1f320:	e0bffc15 	stw	r2,-16(fp)
	*data = (data_reg & ALT_UP_RS232_DATA_DATA_MSK) >> ALT_UP_RS232_DATA_DATA_OFST;
   1f324:	e0bffc17 	ldw	r2,-16(fp)
   1f328:	1007883a 	mov	r3,r2
   1f32c:	e0bffe17 	ldw	r2,-8(fp)
   1f330:	10c00005 	stb	r3,0(r2)
	*parity_error = alt_up_rs232_check_parity(data_reg);
   1f334:	e13ffc17 	ldw	r4,-16(fp)
   1f338:	001f2740 	call	1f274 <alt_up_rs232_check_parity>
   1f33c:	1007883a 	mov	r3,r2
   1f340:	e0bfff17 	ldw	r2,-4(fp)
   1f344:	10c00005 	stb	r3,0(r2)
	return (((data_reg & ALT_UP_RS232_DATA_RVALID_MSK) >> ALT_UP_RS232_DATA_RVALID_OFST) - 1);
   1f348:	e0bffc17 	ldw	r2,-16(fp)
   1f34c:	10a0000c 	andi	r2,r2,32768
   1f350:	1004d3fa 	srli	r2,r2,15
   1f354:	10bfffc4 	addi	r2,r2,-1
}
   1f358:	e037883a 	mov	sp,fp
   1f35c:	dfc00117 	ldw	ra,4(sp)
   1f360:	df000017 	ldw	fp,0(sp)
   1f364:	dec00204 	addi	sp,sp,8
   1f368:	f800283a 	ret

0001f36c <alt_up_rs232_read_fd>:

int alt_up_rs232_read_fd (alt_fd* fd, char* ptr, int len)
{
   1f36c:	defff804 	addi	sp,sp,-32
   1f370:	dfc00715 	stw	ra,28(sp)
   1f374:	df000615 	stw	fp,24(sp)
   1f378:	df000604 	addi	fp,sp,24
   1f37c:	e13ffd15 	stw	r4,-12(fp)
   1f380:	e17ffe15 	stw	r5,-8(fp)
   1f384:	e1bfff15 	stw	r6,-4(fp)
	alt_up_rs232_dev *rs232 = (alt_up_rs232_dev*)fd->dev;
   1f388:	e0bffd17 	ldw	r2,-12(fp)
   1f38c:	10800017 	ldw	r2,0(r2)
   1f390:	e0bffb15 	stw	r2,-20(fp)
	int count = 0;
   1f394:	e03ffa15 	stw	zero,-24(fp)
	alt_u8 parity_error;
	while(len--)
   1f398:	00000e06 	br	1f3d4 <alt_up_rs232_read_fd+0x68>
	{
		if (alt_up_rs232_read_data(rs232, (alt_u8 *)ptr++, &parity_error)==0)
   1f39c:	e0bffe17 	ldw	r2,-8(fp)
   1f3a0:	10c00044 	addi	r3,r2,1
   1f3a4:	e0fffe15 	stw	r3,-8(fp)
   1f3a8:	e0fffc04 	addi	r3,fp,-16
   1f3ac:	e13ffb17 	ldw	r4,-20(fp)
   1f3b0:	100b883a 	mov	r5,r2
   1f3b4:	180d883a 	mov	r6,r3
   1f3b8:	001f2f80 	call	1f2f8 <alt_up_rs232_read_data>
   1f3bc:	1000041e 	bne	r2,zero,1f3d0 <alt_up_rs232_read_fd+0x64>
			count++;
   1f3c0:	e0bffa17 	ldw	r2,-24(fp)
   1f3c4:	10800044 	addi	r2,r2,1
   1f3c8:	e0bffa15 	stw	r2,-24(fp)
   1f3cc:	00000106 	br	1f3d4 <alt_up_rs232_read_fd+0x68>
		else
			break;
   1f3d0:	00000406 	br	1f3e4 <alt_up_rs232_read_fd+0x78>
int alt_up_rs232_read_fd (alt_fd* fd, char* ptr, int len)
{
	alt_up_rs232_dev *rs232 = (alt_up_rs232_dev*)fd->dev;
	int count = 0;
	alt_u8 parity_error;
	while(len--)
   1f3d4:	e0bfff17 	ldw	r2,-4(fp)
   1f3d8:	10ffffc4 	addi	r3,r2,-1
   1f3dc:	e0ffff15 	stw	r3,-4(fp)
   1f3e0:	103fee1e 	bne	r2,zero,1f39c <__alt_mem_Flash_flash_data+0xf401f39c>
		if (alt_up_rs232_read_data(rs232, (alt_u8 *)ptr++, &parity_error)==0)
			count++;
		else
			break;
	}
	return count;
   1f3e4:	e0bffa17 	ldw	r2,-24(fp)
}
   1f3e8:	e037883a 	mov	sp,fp
   1f3ec:	dfc00117 	ldw	ra,4(sp)
   1f3f0:	df000017 	ldw	fp,0(sp)
   1f3f4:	dec00204 	addi	sp,sp,8
   1f3f8:	f800283a 	ret

0001f3fc <alt_up_rs232_write_fd>:

int alt_up_rs232_write_fd (alt_fd* fd, const char* ptr, int len)
{
   1f3fc:	defff904 	addi	sp,sp,-28
   1f400:	dfc00615 	stw	ra,24(sp)
   1f404:	df000515 	stw	fp,20(sp)
   1f408:	df000504 	addi	fp,sp,20
   1f40c:	e13ffd15 	stw	r4,-12(fp)
   1f410:	e17ffe15 	stw	r5,-8(fp)
   1f414:	e1bfff15 	stw	r6,-4(fp)
	alt_up_rs232_dev *rs232 = (alt_up_rs232_dev*)fd->dev;
   1f418:	e0bffd17 	ldw	r2,-12(fp)
   1f41c:	10800017 	ldw	r2,0(r2)
   1f420:	e0bffc15 	stw	r2,-16(fp)
	int count = 0;
   1f424:	e03ffb15 	stw	zero,-20(fp)
	while(len--)
   1f428:	00000f06 	br	1f468 <alt_up_rs232_write_fd+0x6c>
	{
		if (alt_up_rs232_write_data(rs232, *ptr)==0)
   1f42c:	e0bffe17 	ldw	r2,-8(fp)
   1f430:	10800003 	ldbu	r2,0(r2)
   1f434:	10803fcc 	andi	r2,r2,255
   1f438:	e13ffc17 	ldw	r4,-16(fp)
   1f43c:	100b883a 	mov	r5,r2
   1f440:	001f2b80 	call	1f2b8 <alt_up_rs232_write_data>
   1f444:	1000071e 	bne	r2,zero,1f464 <alt_up_rs232_write_fd+0x68>
		{
			count++;
   1f448:	e0bffb17 	ldw	r2,-20(fp)
   1f44c:	10800044 	addi	r2,r2,1
   1f450:	e0bffb15 	stw	r2,-20(fp)
			ptr++;
   1f454:	e0bffe17 	ldw	r2,-8(fp)
   1f458:	10800044 	addi	r2,r2,1
   1f45c:	e0bffe15 	stw	r2,-8(fp)
   1f460:	00000106 	br	1f468 <alt_up_rs232_write_fd+0x6c>
		}
		else
			break;
   1f464:	00000406 	br	1f478 <alt_up_rs232_write_fd+0x7c>

int alt_up_rs232_write_fd (alt_fd* fd, const char* ptr, int len)
{
	alt_up_rs232_dev *rs232 = (alt_up_rs232_dev*)fd->dev;
	int count = 0;
	while(len--)
   1f468:	e0bfff17 	ldw	r2,-4(fp)
   1f46c:	10ffffc4 	addi	r3,r2,-1
   1f470:	e0ffff15 	stw	r3,-4(fp)
   1f474:	103fed1e 	bne	r2,zero,1f42c <__alt_mem_Flash_flash_data+0xf401f42c>
			ptr++;
		}
		else
			break;
	}
	return count;
   1f478:	e0bffb17 	ldw	r2,-20(fp)
}
   1f47c:	e037883a 	mov	sp,fp
   1f480:	dfc00117 	ldw	ra,4(sp)
   1f484:	df000017 	ldw	fp,0(sp)
   1f488:	dec00204 	addi	sp,sp,8
   1f48c:	f800283a 	ret

0001f490 <alt_up_rs232_open_dev>:

alt_up_rs232_dev* alt_up_rs232_open_dev(const char* name)
{
   1f490:	defffc04 	addi	sp,sp,-16
   1f494:	dfc00315 	stw	ra,12(sp)
   1f498:	df000215 	stw	fp,8(sp)
   1f49c:	df000204 	addi	fp,sp,8
   1f4a0:	e13fff15 	stw	r4,-4(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_rs232_dev *dev = (alt_up_rs232_dev*)alt_find_dev(name, &alt_dev_list);
   1f4a4:	e13fff17 	ldw	r4,-4(fp)
   1f4a8:	014000b4 	movhi	r5,2
   1f4ac:	294c8d04 	addi	r5,r5,12852
   1f4b0:	001fac00 	call	1fac0 <alt_find_dev>
   1f4b4:	e0bffe15 	stw	r2,-8(fp)

  return dev;
   1f4b8:	e0bffe17 	ldw	r2,-8(fp)
}
   1f4bc:	e037883a 	mov	sp,fp
   1f4c0:	dfc00117 	ldw	ra,4(sp)
   1f4c4:	df000017 	ldw	fp,0(sp)
   1f4c8:	dec00204 	addi	sp,sp,8
   1f4cc:	f800283a 	ret

0001f4d0 <alt_up_char_buffer_init>:
#include <priv/alt_file.h>

#include "altera_up_avalon_video_character_buffer_with_dma.h"
#include "altera_up_avalon_video_character_buffer_with_dma_regs.h"

void alt_up_char_buffer_init(alt_up_char_buffer_dev *char_buffer) {
   1f4d0:	defffc04 	addi	sp,sp,-16
   1f4d4:	dfc00315 	stw	ra,12(sp)
   1f4d8:	df000215 	stw	fp,8(sp)
   1f4dc:	df000204 	addi	fp,sp,8
   1f4e0:	e13fff15 	stw	r4,-4(fp)
	char * name;
	name = (char *) char_buffer->dev.name;
   1f4e4:	e0bfff17 	ldw	r2,-4(fp)
   1f4e8:	10800217 	ldw	r2,8(r2)
   1f4ec:	e0bffe15 	stw	r2,-8(fp)

	for ( ; (*name) != '\0'; name++) {
   1f4f0:	00000b06 	br	1f520 <alt_up_char_buffer_init+0x50>
		if (strcmp(name, "_avalon_char_buffer_slave") == 0) {
   1f4f4:	e13ffe17 	ldw	r4,-8(fp)
   1f4f8:	014000b4 	movhi	r5,2
   1f4fc:	2944ee04 	addi	r5,r5,5048
   1f500:	0009ff00 	call	9ff0 <strcmp>
   1f504:	1000031e 	bne	r2,zero,1f514 <alt_up_char_buffer_init+0x44>
			(*name) = '\0';
   1f508:	e0bffe17 	ldw	r2,-8(fp)
   1f50c:	10000005 	stb	zero,0(r2)
			break;
   1f510:	00000906 	br	1f538 <alt_up_char_buffer_init+0x68>

void alt_up_char_buffer_init(alt_up_char_buffer_dev *char_buffer) {
	char * name;
	name = (char *) char_buffer->dev.name;

	for ( ; (*name) != '\0'; name++) {
   1f514:	e0bffe17 	ldw	r2,-8(fp)
   1f518:	10800044 	addi	r2,r2,1
   1f51c:	e0bffe15 	stw	r2,-8(fp)
   1f520:	e0bffe17 	ldw	r2,-8(fp)
   1f524:	10800003 	ldbu	r2,0(r2)
   1f528:	10803fcc 	andi	r2,r2,255
   1f52c:	1080201c 	xori	r2,r2,128
   1f530:	10bfe004 	addi	r2,r2,-128
   1f534:	103fef1e 	bne	r2,zero,1f4f4 <__alt_mem_Flash_flash_data+0xf401f4f4>
			(*name) = '\0';
			break;
		}
	}
	
	return;
   1f538:	0001883a 	nop
}
   1f53c:	e037883a 	mov	sp,fp
   1f540:	dfc00117 	ldw	ra,4(sp)
   1f544:	df000017 	ldw	fp,0(sp)
   1f548:	dec00204 	addi	sp,sp,8
   1f54c:	f800283a 	ret

0001f550 <alt_up_char_buffer_open_dev>:

alt_up_char_buffer_dev* alt_up_char_buffer_open_dev(const char* name) {
   1f550:	defffc04 	addi	sp,sp,-16
   1f554:	dfc00315 	stw	ra,12(sp)
   1f558:	df000215 	stw	fp,8(sp)
   1f55c:	df000204 	addi	fp,sp,8
   1f560:	e13fff15 	stw	r4,-4(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_char_buffer_dev *dev = (alt_up_char_buffer_dev *)alt_find_dev(name, &alt_dev_list);
   1f564:	e13fff17 	ldw	r4,-4(fp)
   1f568:	014000b4 	movhi	r5,2
   1f56c:	294c8d04 	addi	r5,r5,12852
   1f570:	001fac00 	call	1fac0 <alt_find_dev>
   1f574:	e0bffe15 	stw	r2,-8(fp)

  return dev;
   1f578:	e0bffe17 	ldw	r2,-8(fp)
}
   1f57c:	e037883a 	mov	sp,fp
   1f580:	dfc00117 	ldw	ra,4(sp)
   1f584:	df000017 	ldw	fp,0(sp)
   1f588:	dec00204 	addi	sp,sp,8
   1f58c:	f800283a 	ret

0001f590 <alt_up_char_buffer_draw>:

int alt_up_char_buffer_draw(alt_up_char_buffer_dev *char_buffer, unsigned char ch, 
	unsigned int x, unsigned int y) {
   1f590:	defffa04 	addi	sp,sp,-24
   1f594:	df000515 	stw	fp,20(sp)
   1f598:	df000504 	addi	fp,sp,20
   1f59c:	e13ffc15 	stw	r4,-16(fp)
   1f5a0:	2805883a 	mov	r2,r5
   1f5a4:	e1bffe15 	stw	r6,-8(fp)
   1f5a8:	e1ffff15 	stw	r7,-4(fp)
   1f5ac:	e0bffd05 	stb	r2,-12(fp)
	// boundary check
	if (x >= char_buffer->x_resolution || y >= char_buffer->y_resolution )
   1f5b0:	e0bffc17 	ldw	r2,-16(fp)
   1f5b4:	10800c17 	ldw	r2,48(r2)
   1f5b8:	e0fffe17 	ldw	r3,-8(fp)
   1f5bc:	1880042e 	bgeu	r3,r2,1f5d0 <alt_up_char_buffer_draw+0x40>
   1f5c0:	e0bffc17 	ldw	r2,-16(fp)
   1f5c4:	10800d17 	ldw	r2,52(r2)
   1f5c8:	e0ffff17 	ldw	r3,-4(fp)
   1f5cc:	18800236 	bltu	r3,r2,1f5d8 <alt_up_char_buffer_draw+0x48>
		return -1;
   1f5d0:	00bfffc4 	movi	r2,-1
   1f5d4:	00001d06 	br	1f64c <alt_up_char_buffer_draw+0xbc>
	
	unsigned int addr = 0;
   1f5d8:	e03ffb15 	stw	zero,-20(fp)
	addr |= ((x & char_buffer->x_coord_mask) << char_buffer->x_coord_offset);
   1f5dc:	e0bffc17 	ldw	r2,-16(fp)
   1f5e0:	10c00f17 	ldw	r3,60(r2)
   1f5e4:	e0bffe17 	ldw	r2,-8(fp)
   1f5e8:	1884703a 	and	r2,r3,r2
   1f5ec:	e0fffc17 	ldw	r3,-16(fp)
   1f5f0:	18c00e17 	ldw	r3,56(r3)
   1f5f4:	10c4983a 	sll	r2,r2,r3
   1f5f8:	e0fffb17 	ldw	r3,-20(fp)
   1f5fc:	1884b03a 	or	r2,r3,r2
   1f600:	e0bffb15 	stw	r2,-20(fp)
	addr |= ((y & char_buffer->y_coord_mask) << char_buffer->y_coord_offset);
   1f604:	e0bffc17 	ldw	r2,-16(fp)
   1f608:	10c01117 	ldw	r3,68(r2)
   1f60c:	e0bfff17 	ldw	r2,-4(fp)
   1f610:	1884703a 	and	r2,r3,r2
   1f614:	e0fffc17 	ldw	r3,-16(fp)
   1f618:	18c01017 	ldw	r3,64(r3)
   1f61c:	10c4983a 	sll	r2,r2,r3
   1f620:	e0fffb17 	ldw	r3,-20(fp)
   1f624:	1884b03a 	or	r2,r3,r2
   1f628:	e0bffb15 	stw	r2,-20(fp)
	IOWR_8DIRECT(char_buffer->buffer_base, addr, ch);
   1f62c:	e0bffc17 	ldw	r2,-16(fp)
   1f630:	10c00b17 	ldw	r3,44(r2)
   1f634:	e0bffb17 	ldw	r2,-20(fp)
   1f638:	1885883a 	add	r2,r3,r2
   1f63c:	1007883a 	mov	r3,r2
   1f640:	e0bffd03 	ldbu	r2,-12(fp)
   1f644:	18800025 	stbio	r2,0(r3)

	return 0;
   1f648:	0005883a 	mov	r2,zero
}
   1f64c:	e037883a 	mov	sp,fp
   1f650:	df000017 	ldw	fp,0(sp)
   1f654:	dec00104 	addi	sp,sp,4
   1f658:	f800283a 	ret

0001f65c <alt_up_char_buffer_string>:

int alt_up_char_buffer_string(alt_up_char_buffer_dev *char_buffer, const char *ptr, 
	unsigned int x, unsigned int y) {
   1f65c:	defffa04 	addi	sp,sp,-24
   1f660:	df000515 	stw	fp,20(sp)
   1f664:	df000504 	addi	fp,sp,20
   1f668:	e13ffc15 	stw	r4,-16(fp)
   1f66c:	e17ffd15 	stw	r5,-12(fp)
   1f670:	e1bffe15 	stw	r6,-8(fp)
   1f674:	e1ffff15 	stw	r7,-4(fp)
	// boundary check
	if (x >= char_buffer->x_resolution || y >= char_buffer->y_resolution )
   1f678:	e0bffc17 	ldw	r2,-16(fp)
   1f67c:	10800c17 	ldw	r2,48(r2)
   1f680:	e0fffe17 	ldw	r3,-8(fp)
   1f684:	1880042e 	bgeu	r3,r2,1f698 <alt_up_char_buffer_string+0x3c>
   1f688:	e0bffc17 	ldw	r2,-16(fp)
   1f68c:	10800d17 	ldw	r2,52(r2)
   1f690:	e0ffff17 	ldw	r3,-4(fp)
   1f694:	18800236 	bltu	r3,r2,1f6a0 <alt_up_char_buffer_string+0x44>
		return -1;
   1f698:	00bfffc4 	movi	r2,-1
   1f69c:	00002b06 	br	1f74c <alt_up_char_buffer_string+0xf0>
	
	unsigned int offset = 0;
   1f6a0:	e03ffb15 	stw	zero,-20(fp)
	offset = (y << char_buffer->y_coord_offset) + x;
   1f6a4:	e0bffc17 	ldw	r2,-16(fp)
   1f6a8:	10801017 	ldw	r2,64(r2)
   1f6ac:	1007883a 	mov	r3,r2
   1f6b0:	e0bfff17 	ldw	r2,-4(fp)
   1f6b4:	10c6983a 	sll	r3,r2,r3
   1f6b8:	e0bffe17 	ldw	r2,-8(fp)
   1f6bc:	1885883a 	add	r2,r3,r2
   1f6c0:	e0bffb15 	stw	r2,-20(fp)

	while ( *ptr )
   1f6c4:	00001a06 	br	1f730 <alt_up_char_buffer_string+0xd4>
	{
		IOWR_8DIRECT(char_buffer->buffer_base, offset, *ptr);
   1f6c8:	e0bffc17 	ldw	r2,-16(fp)
   1f6cc:	10c00b17 	ldw	r3,44(r2)
   1f6d0:	e0bffb17 	ldw	r2,-20(fp)
   1f6d4:	1885883a 	add	r2,r3,r2
   1f6d8:	1007883a 	mov	r3,r2
   1f6dc:	e0bffd17 	ldw	r2,-12(fp)
   1f6e0:	10800003 	ldbu	r2,0(r2)
   1f6e4:	10803fcc 	andi	r2,r2,255
   1f6e8:	1080201c 	xori	r2,r2,128
   1f6ec:	10bfe004 	addi	r2,r2,-128
   1f6f0:	18800025 	stbio	r2,0(r3)
		++ptr;
   1f6f4:	e0bffd17 	ldw	r2,-12(fp)
   1f6f8:	10800044 	addi	r2,r2,1
   1f6fc:	e0bffd15 	stw	r2,-12(fp)
		if (++x >= char_buffer->x_resolution)
   1f700:	e0bffe17 	ldw	r2,-8(fp)
   1f704:	10800044 	addi	r2,r2,1
   1f708:	e0bffe15 	stw	r2,-8(fp)
   1f70c:	e0bffc17 	ldw	r2,-16(fp)
   1f710:	10800c17 	ldw	r2,48(r2)
   1f714:	e0fffe17 	ldw	r3,-8(fp)
   1f718:	18800236 	bltu	r3,r2,1f724 <alt_up_char_buffer_string+0xc8>
			return -1;
   1f71c:	00bfffc4 	movi	r2,-1
   1f720:	00000a06 	br	1f74c <alt_up_char_buffer_string+0xf0>
		++offset;
   1f724:	e0bffb17 	ldw	r2,-20(fp)
   1f728:	10800044 	addi	r2,r2,1
   1f72c:	e0bffb15 	stw	r2,-20(fp)
		return -1;
	
	unsigned int offset = 0;
	offset = (y << char_buffer->y_coord_offset) + x;

	while ( *ptr )
   1f730:	e0bffd17 	ldw	r2,-12(fp)
   1f734:	10800003 	ldbu	r2,0(r2)
   1f738:	10803fcc 	andi	r2,r2,255
   1f73c:	1080201c 	xori	r2,r2,128
   1f740:	10bfe004 	addi	r2,r2,-128
   1f744:	103fe01e 	bne	r2,zero,1f6c8 <__alt_mem_Flash_flash_data+0xf401f6c8>
		++ptr;
		if (++x >= char_buffer->x_resolution)
			return -1;
		++offset;
	}
	return 0;
   1f748:	0005883a 	mov	r2,zero
}
   1f74c:	e037883a 	mov	sp,fp
   1f750:	df000017 	ldw	fp,0(sp)
   1f754:	dec00104 	addi	sp,sp,4
   1f758:	f800283a 	ret

0001f75c <alt_up_char_buffer_clear>:

int alt_up_char_buffer_clear(alt_up_char_buffer_dev *char_buffer) {
   1f75c:	defffe04 	addi	sp,sp,-8
   1f760:	df000115 	stw	fp,4(sp)
   1f764:	df000104 	addi	fp,sp,4
   1f768:	e13fff15 	stw	r4,-4(fp)
	IOWR_ALT_UP_CHAR_BUFFER_CLR_SCRN(char_buffer->ctrl_reg_base, 1);
   1f76c:	e0bfff17 	ldw	r2,-4(fp)
   1f770:	10800a17 	ldw	r2,40(r2)
   1f774:	10800084 	addi	r2,r2,2
   1f778:	1007883a 	mov	r3,r2
   1f77c:	00800044 	movi	r2,1
   1f780:	18800025 	stbio	r2,0(r3)
	while ((IORD_ALT_UP_CHAR_BUFFER_CLR_SCRN(char_buffer->ctrl_reg_base) & ALT_UP_CHAR_BUFFER_CLR_SCRN_MSK) >> ALT_UP_CHAR_BUFFER_CLR_SCRN_OFST);
   1f784:	0001883a 	nop
   1f788:	e0bfff17 	ldw	r2,-4(fp)
   1f78c:	10800a17 	ldw	r2,40(r2)
   1f790:	10800084 	addi	r2,r2,2
   1f794:	10800023 	ldbuio	r2,0(r2)
   1f798:	10803fcc 	andi	r2,r2,255
   1f79c:	1080004c 	andi	r2,r2,1
   1f7a0:	103ff91e 	bne	r2,zero,1f788 <__alt_mem_Flash_flash_data+0xf401f788>
	return 0;
   1f7a4:	0005883a 	mov	r2,zero
}
   1f7a8:	e037883a 	mov	sp,fp
   1f7ac:	df000017 	ldw	fp,0(sp)
   1f7b0:	dec00104 	addi	sp,sp,4
   1f7b4:	f800283a 	ret

0001f7b8 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
   1f7b8:	defff504 	addi	sp,sp,-44
   1f7bc:	df000a15 	stw	fp,40(sp)
   1f7c0:	df000a04 	addi	fp,sp,40
   1f7c4:	e13ffc15 	stw	r4,-16(fp)
   1f7c8:	e17ffd15 	stw	r5,-12(fp)
   1f7cc:	e1bffe15 	stw	r6,-8(fp)
   1f7d0:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
   1f7d4:	e03ff615 	stw	zero,-40(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
   1f7d8:	008000b4 	movhi	r2,2
   1f7dc:	1094a304 	addi	r2,r2,21132
   1f7e0:	10800017 	ldw	r2,0(r2)
  
  if (alt_ticks_per_second ())
   1f7e4:	10003f26 	beq	r2,zero,1f8e4 <alt_alarm_start+0x12c>
  {
    if (alarm)
   1f7e8:	e0bffc17 	ldw	r2,-16(fp)
   1f7ec:	10003b26 	beq	r2,zero,1f8dc <alt_alarm_start+0x124>
    {
      alarm->callback = callback;
   1f7f0:	e0bffc17 	ldw	r2,-16(fp)
   1f7f4:	e0fffe17 	ldw	r3,-8(fp)
   1f7f8:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
   1f7fc:	e0bffc17 	ldw	r2,-16(fp)
   1f800:	e0ffff17 	ldw	r3,-4(fp)
   1f804:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1f808:	0005303a 	rdctl	r2,status
   1f80c:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1f810:	e0fff817 	ldw	r3,-32(fp)
   1f814:	00bfff84 	movi	r2,-2
   1f818:	1884703a 	and	r2,r3,r2
   1f81c:	1001703a 	wrctl	status,r2
  
  return context;
   1f820:	e0bff817 	ldw	r2,-32(fp)
 
      irq_context = alt_irq_disable_all ();
   1f824:	e0bff715 	stw	r2,-36(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
   1f828:	008000b4 	movhi	r2,2
   1f82c:	1094a404 	addi	r2,r2,21136
   1f830:	10800017 	ldw	r2,0(r2)
      
      current_nticks = alt_nticks();
   1f834:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
   1f838:	e0fffd17 	ldw	r3,-12(fp)
   1f83c:	e0bff617 	ldw	r2,-40(fp)
   1f840:	1885883a 	add	r2,r3,r2
   1f844:	10c00044 	addi	r3,r2,1
   1f848:	e0bffc17 	ldw	r2,-16(fp)
   1f84c:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
   1f850:	e0bffc17 	ldw	r2,-16(fp)
   1f854:	10c00217 	ldw	r3,8(r2)
   1f858:	e0bff617 	ldw	r2,-40(fp)
   1f85c:	1880042e 	bgeu	r3,r2,1f870 <alt_alarm_start+0xb8>
      {
        alarm->rollover = 1;
   1f860:	e0bffc17 	ldw	r2,-16(fp)
   1f864:	00c00044 	movi	r3,1
   1f868:	10c00405 	stb	r3,16(r2)
   1f86c:	00000206 	br	1f878 <alt_alarm_start+0xc0>
      }
      else
      {
        alarm->rollover = 0;
   1f870:	e0bffc17 	ldw	r2,-16(fp)
   1f874:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
   1f878:	e0fffc17 	ldw	r3,-16(fp)
   1f87c:	008000b4 	movhi	r2,2
   1f880:	108cb204 	addi	r2,r2,13000
   1f884:	e0bff915 	stw	r2,-28(fp)
   1f888:	e0fffa15 	stw	r3,-24(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   1f88c:	e0bffa17 	ldw	r2,-24(fp)
   1f890:	e0fff917 	ldw	r3,-28(fp)
   1f894:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   1f898:	e0bff917 	ldw	r2,-28(fp)
   1f89c:	10c00017 	ldw	r3,0(r2)
   1f8a0:	e0bffa17 	ldw	r2,-24(fp)
   1f8a4:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   1f8a8:	e0bff917 	ldw	r2,-28(fp)
   1f8ac:	10800017 	ldw	r2,0(r2)
   1f8b0:	e0fffa17 	ldw	r3,-24(fp)
   1f8b4:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   1f8b8:	e0bff917 	ldw	r2,-28(fp)
   1f8bc:	e0fffa17 	ldw	r3,-24(fp)
   1f8c0:	10c00015 	stw	r3,0(r2)
   1f8c4:	e0bff717 	ldw	r2,-36(fp)
   1f8c8:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1f8cc:	e0bffb17 	ldw	r2,-20(fp)
   1f8d0:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
   1f8d4:	0005883a 	mov	r2,zero
   1f8d8:	00000306 	br	1f8e8 <alt_alarm_start+0x130>
    }
    else
    {
      return -EINVAL;
   1f8dc:	00bffa84 	movi	r2,-22
   1f8e0:	00000106 	br	1f8e8 <alt_alarm_start+0x130>
    }
  }
  else
  {
    return -ENOTSUP;
   1f8e4:	00bfde84 	movi	r2,-134
  }
}
   1f8e8:	e037883a 	mov	sp,fp
   1f8ec:	df000017 	ldw	fp,0(sp)
   1f8f0:	dec00104 	addi	sp,sp,4
   1f8f4:	f800283a 	ret

0001f8f8 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
   1f8f8:	deffff04 	addi	sp,sp,-4
   1f8fc:	df000015 	stw	fp,0(sp)
   1f900:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
   1f904:	e037883a 	mov	sp,fp
   1f908:	df000017 	ldw	fp,0(sp)
   1f90c:	dec00104 	addi	sp,sp,4
   1f910:	f800283a 	ret

0001f914 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   1f914:	defffe04 	addi	sp,sp,-8
   1f918:	dfc00115 	stw	ra,4(sp)
   1f91c:	df000015 	stw	fp,0(sp)
   1f920:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   1f924:	008000b4 	movhi	r2,2
   1f928:	108c9004 	addi	r2,r2,12864
   1f92c:	10800017 	ldw	r2,0(r2)
   1f930:	10000526 	beq	r2,zero,1f948 <alt_get_errno+0x34>
   1f934:	008000b4 	movhi	r2,2
   1f938:	108c9004 	addi	r2,r2,12864
   1f93c:	10800017 	ldw	r2,0(r2)
   1f940:	103ee83a 	callr	r2
   1f944:	00000206 	br	1f950 <alt_get_errno+0x3c>
   1f948:	008000b4 	movhi	r2,2
   1f94c:	10947804 	addi	r2,r2,20960
}
   1f950:	e037883a 	mov	sp,fp
   1f954:	dfc00117 	ldw	ra,4(sp)
   1f958:	df000017 	ldw	fp,0(sp)
   1f95c:	dec00204 	addi	sp,sp,8
   1f960:	f800283a 	ret

0001f964 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
   1f964:	defffa04 	addi	sp,sp,-24
   1f968:	dfc00515 	stw	ra,20(sp)
   1f96c:	df000415 	stw	fp,16(sp)
   1f970:	df000404 	addi	fp,sp,16
   1f974:	e13ffe15 	stw	r4,-8(fp)
   1f978:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
   1f97c:	e0bffe17 	ldw	r2,-8(fp)
   1f980:	10000326 	beq	r2,zero,1f990 <alt_dev_llist_insert+0x2c>
   1f984:	e0bffe17 	ldw	r2,-8(fp)
   1f988:	10800217 	ldw	r2,8(r2)
   1f98c:	1000061e 	bne	r2,zero,1f9a8 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
   1f990:	001f9140 	call	1f914 <alt_get_errno>
   1f994:	1007883a 	mov	r3,r2
   1f998:	00800584 	movi	r2,22
   1f99c:	18800015 	stw	r2,0(r3)
    return -EINVAL;
   1f9a0:	00bffa84 	movi	r2,-22
   1f9a4:	00001306 	br	1f9f4 <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
   1f9a8:	e0bffe17 	ldw	r2,-8(fp)
   1f9ac:	e0ffff17 	ldw	r3,-4(fp)
   1f9b0:	e0fffc15 	stw	r3,-16(fp)
   1f9b4:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   1f9b8:	e0bffd17 	ldw	r2,-12(fp)
   1f9bc:	e0fffc17 	ldw	r3,-16(fp)
   1f9c0:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   1f9c4:	e0bffc17 	ldw	r2,-16(fp)
   1f9c8:	10c00017 	ldw	r3,0(r2)
   1f9cc:	e0bffd17 	ldw	r2,-12(fp)
   1f9d0:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   1f9d4:	e0bffc17 	ldw	r2,-16(fp)
   1f9d8:	10800017 	ldw	r2,0(r2)
   1f9dc:	e0fffd17 	ldw	r3,-12(fp)
   1f9e0:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   1f9e4:	e0bffc17 	ldw	r2,-16(fp)
   1f9e8:	e0fffd17 	ldw	r3,-12(fp)
   1f9ec:	10c00015 	stw	r3,0(r2)

  return 0;  
   1f9f0:	0005883a 	mov	r2,zero
}
   1f9f4:	e037883a 	mov	sp,fp
   1f9f8:	dfc00117 	ldw	ra,4(sp)
   1f9fc:	df000017 	ldw	fp,0(sp)
   1fa00:	dec00204 	addi	sp,sp,8
   1fa04:	f800283a 	ret

0001fa08 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
   1fa08:	defffd04 	addi	sp,sp,-12
   1fa0c:	dfc00215 	stw	ra,8(sp)
   1fa10:	df000115 	stw	fp,4(sp)
   1fa14:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   1fa18:	008000b4 	movhi	r2,2
   1fa1c:	10832b04 	addi	r2,r2,3244
   1fa20:	e0bfff15 	stw	r2,-4(fp)
   1fa24:	00000606 	br	1fa40 <_do_ctors+0x38>
        (*ctor) (); 
   1fa28:	e0bfff17 	ldw	r2,-4(fp)
   1fa2c:	10800017 	ldw	r2,0(r2)
   1fa30:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   1fa34:	e0bfff17 	ldw	r2,-4(fp)
   1fa38:	10bfff04 	addi	r2,r2,-4
   1fa3c:	e0bfff15 	stw	r2,-4(fp)
   1fa40:	e0ffff17 	ldw	r3,-4(fp)
   1fa44:	008000b4 	movhi	r2,2
   1fa48:	10832c04 	addi	r2,r2,3248
   1fa4c:	18bff62e 	bgeu	r3,r2,1fa28 <__alt_mem_Flash_flash_data+0xf401fa28>
        (*ctor) (); 
}
   1fa50:	e037883a 	mov	sp,fp
   1fa54:	dfc00117 	ldw	ra,4(sp)
   1fa58:	df000017 	ldw	fp,0(sp)
   1fa5c:	dec00204 	addi	sp,sp,8
   1fa60:	f800283a 	ret

0001fa64 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
   1fa64:	defffd04 	addi	sp,sp,-12
   1fa68:	dfc00215 	stw	ra,8(sp)
   1fa6c:	df000115 	stw	fp,4(sp)
   1fa70:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   1fa74:	008000b4 	movhi	r2,2
   1fa78:	10832b04 	addi	r2,r2,3244
   1fa7c:	e0bfff15 	stw	r2,-4(fp)
   1fa80:	00000606 	br	1fa9c <_do_dtors+0x38>
        (*dtor) (); 
   1fa84:	e0bfff17 	ldw	r2,-4(fp)
   1fa88:	10800017 	ldw	r2,0(r2)
   1fa8c:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   1fa90:	e0bfff17 	ldw	r2,-4(fp)
   1fa94:	10bfff04 	addi	r2,r2,-4
   1fa98:	e0bfff15 	stw	r2,-4(fp)
   1fa9c:	e0ffff17 	ldw	r3,-4(fp)
   1faa0:	008000b4 	movhi	r2,2
   1faa4:	10832c04 	addi	r2,r2,3248
   1faa8:	18bff62e 	bgeu	r3,r2,1fa84 <__alt_mem_Flash_flash_data+0xf401fa84>
        (*dtor) (); 
}
   1faac:	e037883a 	mov	sp,fp
   1fab0:	dfc00117 	ldw	ra,4(sp)
   1fab4:	df000017 	ldw	fp,0(sp)
   1fab8:	dec00204 	addi	sp,sp,8
   1fabc:	f800283a 	ret

0001fac0 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
   1fac0:	defffa04 	addi	sp,sp,-24
   1fac4:	dfc00515 	stw	ra,20(sp)
   1fac8:	df000415 	stw	fp,16(sp)
   1facc:	df000404 	addi	fp,sp,16
   1fad0:	e13ffe15 	stw	r4,-8(fp)
   1fad4:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
   1fad8:	e0bfff17 	ldw	r2,-4(fp)
   1fadc:	10800017 	ldw	r2,0(r2)
   1fae0:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
   1fae4:	e13ffe17 	ldw	r4,-8(fp)
   1fae8:	0000e580 	call	e58 <strlen>
   1faec:	10800044 	addi	r2,r2,1
   1faf0:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   1faf4:	00000d06 	br	1fb2c <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
   1faf8:	e0bffc17 	ldw	r2,-16(fp)
   1fafc:	10c00217 	ldw	r3,8(r2)
   1fb00:	e0bffd17 	ldw	r2,-12(fp)
   1fb04:	1809883a 	mov	r4,r3
   1fb08:	e17ffe17 	ldw	r5,-8(fp)
   1fb0c:	100d883a 	mov	r6,r2
   1fb10:	00209500 	call	20950 <memcmp>
   1fb14:	1000021e 	bne	r2,zero,1fb20 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
   1fb18:	e0bffc17 	ldw	r2,-16(fp)
   1fb1c:	00000706 	br	1fb3c <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
   1fb20:	e0bffc17 	ldw	r2,-16(fp)
   1fb24:	10800017 	ldw	r2,0(r2)
   1fb28:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   1fb2c:	e0fffc17 	ldw	r3,-16(fp)
   1fb30:	e0bfff17 	ldw	r2,-4(fp)
   1fb34:	18bff01e 	bne	r3,r2,1faf8 <__alt_mem_Flash_flash_data+0xf401faf8>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
   1fb38:	0005883a 	mov	r2,zero
}
   1fb3c:	e037883a 	mov	sp,fp
   1fb40:	dfc00117 	ldw	ra,4(sp)
   1fb44:	df000017 	ldw	fp,0(sp)
   1fb48:	dec00204 	addi	sp,sp,8
   1fb4c:	f800283a 	ret

0001fb50 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
   1fb50:	defffe04 	addi	sp,sp,-8
   1fb54:	dfc00115 	stw	ra,4(sp)
   1fb58:	df000015 	stw	fp,0(sp)
   1fb5c:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
   1fb60:	0009883a 	mov	r4,zero
   1fb64:	01440004 	movi	r5,4096
   1fb68:	00207dc0 	call	207dc <alt_icache_flush>
#endif
}
   1fb6c:	e037883a 	mov	sp,fp
   1fb70:	dfc00117 	ldw	ra,4(sp)
   1fb74:	df000017 	ldw	fp,0(sp)
   1fb78:	dec00204 	addi	sp,sp,8
   1fb7c:	f800283a 	ret

0001fb80 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
   1fb80:	defff904 	addi	sp,sp,-28
   1fb84:	dfc00615 	stw	ra,24(sp)
   1fb88:	df000515 	stw	fp,20(sp)
   1fb8c:	df000504 	addi	fp,sp,20
   1fb90:	e13ffc15 	stw	r4,-16(fp)
   1fb94:	e17ffd15 	stw	r5,-12(fp)
   1fb98:	e1bffe15 	stw	r6,-8(fp)
   1fb9c:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
   1fba0:	e13ffd17 	ldw	r4,-12(fp)
   1fba4:	e17ffe17 	ldw	r5,-8(fp)
   1fba8:	e1bfff17 	ldw	r6,-4(fp)
   1fbac:	001ff840 	call	1ff84 <open>
   1fbb0:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
   1fbb4:	e0bffb17 	ldw	r2,-20(fp)
   1fbb8:	10001c16 	blt	r2,zero,1fc2c <alt_open_fd+0xac>
  {
    fd->dev      = alt_fd_list[old].dev;
   1fbbc:	008000b4 	movhi	r2,2
   1fbc0:	10872904 	addi	r2,r2,7332
   1fbc4:	e0fffb17 	ldw	r3,-20(fp)
   1fbc8:	18c00324 	muli	r3,r3,12
   1fbcc:	10c5883a 	add	r2,r2,r3
   1fbd0:	10c00017 	ldw	r3,0(r2)
   1fbd4:	e0bffc17 	ldw	r2,-16(fp)
   1fbd8:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
   1fbdc:	008000b4 	movhi	r2,2
   1fbe0:	10872904 	addi	r2,r2,7332
   1fbe4:	e0fffb17 	ldw	r3,-20(fp)
   1fbe8:	18c00324 	muli	r3,r3,12
   1fbec:	18c00104 	addi	r3,r3,4
   1fbf0:	10c5883a 	add	r2,r2,r3
   1fbf4:	10c00017 	ldw	r3,0(r2)
   1fbf8:	e0bffc17 	ldw	r2,-16(fp)
   1fbfc:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
   1fc00:	008000b4 	movhi	r2,2
   1fc04:	10872904 	addi	r2,r2,7332
   1fc08:	e0fffb17 	ldw	r3,-20(fp)
   1fc0c:	18c00324 	muli	r3,r3,12
   1fc10:	18c00204 	addi	r3,r3,8
   1fc14:	10c5883a 	add	r2,r2,r3
   1fc18:	10c00017 	ldw	r3,0(r2)
   1fc1c:	e0bffc17 	ldw	r2,-16(fp)
   1fc20:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
   1fc24:	e13ffb17 	ldw	r4,-20(fp)
   1fc28:	0010a380 	call	10a38 <alt_release_fd>
  }
} 
   1fc2c:	e037883a 	mov	sp,fp
   1fc30:	dfc00117 	ldw	ra,4(sp)
   1fc34:	df000017 	ldw	fp,0(sp)
   1fc38:	dec00204 	addi	sp,sp,8
   1fc3c:	f800283a 	ret

0001fc40 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
   1fc40:	defffb04 	addi	sp,sp,-20
   1fc44:	dfc00415 	stw	ra,16(sp)
   1fc48:	df000315 	stw	fp,12(sp)
   1fc4c:	df000304 	addi	fp,sp,12
   1fc50:	e13ffd15 	stw	r4,-12(fp)
   1fc54:	e17ffe15 	stw	r5,-8(fp)
   1fc58:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
   1fc5c:	010000b4 	movhi	r4,2
   1fc60:	21072c04 	addi	r4,r4,7344
   1fc64:	e17ffd17 	ldw	r5,-12(fp)
   1fc68:	01800044 	movi	r6,1
   1fc6c:	01c07fc4 	movi	r7,511
   1fc70:	001fb800 	call	1fb80 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
   1fc74:	010000b4 	movhi	r4,2
   1fc78:	21072904 	addi	r4,r4,7332
   1fc7c:	e17ffe17 	ldw	r5,-8(fp)
   1fc80:	000d883a 	mov	r6,zero
   1fc84:	01c07fc4 	movi	r7,511
   1fc88:	001fb800 	call	1fb80 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
   1fc8c:	010000b4 	movhi	r4,2
   1fc90:	21072f04 	addi	r4,r4,7356
   1fc94:	e17fff17 	ldw	r5,-4(fp)
   1fc98:	01800044 	movi	r6,1
   1fc9c:	01c07fc4 	movi	r7,511
   1fca0:	001fb800 	call	1fb80 <alt_open_fd>
}  
   1fca4:	e037883a 	mov	sp,fp
   1fca8:	dfc00117 	ldw	ra,4(sp)
   1fcac:	df000017 	ldw	fp,0(sp)
   1fcb0:	dec00204 	addi	sp,sp,8
   1fcb4:	f800283a 	ret

0001fcb8 <alt_irq_register>:
 */
 
int alt_irq_register (alt_u32 id, 
                      void* context, 
                      alt_isr_func handler)
{
   1fcb8:	defff004 	addi	sp,sp,-64
   1fcbc:	df000f15 	stw	fp,60(sp)
   1fcc0:	df000f04 	addi	fp,sp,60
   1fcc4:	e13ffd15 	stw	r4,-12(fp)
   1fcc8:	e17ffe15 	stw	r5,-8(fp)
   1fccc:	e1bfff15 	stw	r6,-4(fp)
  int rc = -EINVAL;  
   1fcd0:	00bffa84 	movi	r2,-22
   1fcd4:	e0bff115 	stw	r2,-60(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
   1fcd8:	e0bffd17 	ldw	r2,-12(fp)
   1fcdc:	10800828 	cmpgeui	r2,r2,32
   1fce0:	10005c1e 	bne	r2,zero,1fe54 <alt_irq_register+0x19c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1fce4:	0005303a 	rdctl	r2,status
   1fce8:	e0bff315 	stw	r2,-52(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1fcec:	e0fff317 	ldw	r3,-52(fp)
   1fcf0:	00bfff84 	movi	r2,-2
   1fcf4:	1884703a 	and	r2,r3,r2
   1fcf8:	1001703a 	wrctl	status,r2
  
  return context;
   1fcfc:	e0bff317 	ldw	r2,-52(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all ();
   1fd00:	e0bff215 	stw	r2,-56(fp)

    alt_irq[id].handler = handler;
   1fd04:	008000f4 	movhi	r2,3
   1fd08:	10a2ac04 	addi	r2,r2,-30032
   1fd0c:	e0fffd17 	ldw	r3,-12(fp)
   1fd10:	180690fa 	slli	r3,r3,3
   1fd14:	10c5883a 	add	r2,r2,r3
   1fd18:	e0ffff17 	ldw	r3,-4(fp)
   1fd1c:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = context;
   1fd20:	008000f4 	movhi	r2,3
   1fd24:	10a2ac04 	addi	r2,r2,-30032
   1fd28:	e0fffd17 	ldw	r3,-12(fp)
   1fd2c:	180690fa 	slli	r3,r3,3
   1fd30:	18c00104 	addi	r3,r3,4
   1fd34:	10c5883a 	add	r2,r2,r3
   1fd38:	e0fffe17 	ldw	r3,-8(fp)
   1fd3c:	10c00015 	stw	r3,0(r2)

    rc = (handler) ? alt_irq_enable (id): alt_irq_disable (id);
   1fd40:	e0bfff17 	ldw	r2,-4(fp)
   1fd44:	10001f26 	beq	r2,zero,1fdc4 <alt_irq_register+0x10c>
   1fd48:	e0bffd17 	ldw	r2,-12(fp)
   1fd4c:	e0bff415 	stw	r2,-48(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1fd50:	0005303a 	rdctl	r2,status
   1fd54:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1fd58:	e0fff517 	ldw	r3,-44(fp)
   1fd5c:	00bfff84 	movi	r2,-2
   1fd60:	1884703a 	and	r2,r3,r2
   1fd64:	1001703a 	wrctl	status,r2
  
  return context;
   1fd68:	e0bff517 	ldw	r2,-44(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   1fd6c:	e0bff615 	stw	r2,-40(fp)

  alt_irq_active |= (1 << id);
   1fd70:	e0bff417 	ldw	r2,-48(fp)
   1fd74:	00c00044 	movi	r3,1
   1fd78:	1884983a 	sll	r2,r3,r2
   1fd7c:	1007883a 	mov	r3,r2
   1fd80:	008000b4 	movhi	r2,2
   1fd84:	1094a204 	addi	r2,r2,21128
   1fd88:	10800017 	ldw	r2,0(r2)
   1fd8c:	1886b03a 	or	r3,r3,r2
   1fd90:	008000b4 	movhi	r2,2
   1fd94:	1094a204 	addi	r2,r2,21128
   1fd98:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   1fd9c:	008000b4 	movhi	r2,2
   1fda0:	1094a204 	addi	r2,r2,21128
   1fda4:	10800017 	ldw	r2,0(r2)
   1fda8:	100170fa 	wrctl	ienable,r2
   1fdac:	e0bff617 	ldw	r2,-40(fp)
   1fdb0:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1fdb4:	e0bff717 	ldw	r2,-36(fp)
   1fdb8:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   1fdbc:	0005883a 	mov	r2,zero
   1fdc0:	00001f06 	br	1fe40 <alt_irq_register+0x188>
   1fdc4:	e0bffd17 	ldw	r2,-12(fp)
   1fdc8:	e0bff815 	stw	r2,-32(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1fdcc:	0005303a 	rdctl	r2,status
   1fdd0:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1fdd4:	e0fff917 	ldw	r3,-28(fp)
   1fdd8:	00bfff84 	movi	r2,-2
   1fddc:	1884703a 	and	r2,r3,r2
   1fde0:	1001703a 	wrctl	status,r2
  
  return context;
   1fde4:	e0bff917 	ldw	r2,-28(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   1fde8:	e0bffa15 	stw	r2,-24(fp)

  alt_irq_active &= ~(1 << id);
   1fdec:	e0bff817 	ldw	r2,-32(fp)
   1fdf0:	00c00044 	movi	r3,1
   1fdf4:	1884983a 	sll	r2,r3,r2
   1fdf8:	0084303a 	nor	r2,zero,r2
   1fdfc:	1007883a 	mov	r3,r2
   1fe00:	008000b4 	movhi	r2,2
   1fe04:	1094a204 	addi	r2,r2,21128
   1fe08:	10800017 	ldw	r2,0(r2)
   1fe0c:	1886703a 	and	r3,r3,r2
   1fe10:	008000b4 	movhi	r2,2
   1fe14:	1094a204 	addi	r2,r2,21128
   1fe18:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   1fe1c:	008000b4 	movhi	r2,2
   1fe20:	1094a204 	addi	r2,r2,21128
   1fe24:	10800017 	ldw	r2,0(r2)
   1fe28:	100170fa 	wrctl	ienable,r2
   1fe2c:	e0bffa17 	ldw	r2,-24(fp)
   1fe30:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1fe34:	e0bffb17 	ldw	r2,-20(fp)
   1fe38:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   1fe3c:	0005883a 	mov	r2,zero
   1fe40:	e0bff115 	stw	r2,-60(fp)
   1fe44:	e0bff217 	ldw	r2,-56(fp)
   1fe48:	e0bffc15 	stw	r2,-16(fp)
   1fe4c:	e0bffc17 	ldw	r2,-16(fp)
   1fe50:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }
  return rc; 
   1fe54:	e0bff117 	ldw	r2,-60(fp)
}
   1fe58:	e037883a 	mov	sp,fp
   1fe5c:	df000017 	ldw	fp,0(sp)
   1fe60:	dec00104 	addi	sp,sp,4
   1fe64:	f800283a 	ret

0001fe68 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   1fe68:	defffe04 	addi	sp,sp,-8
   1fe6c:	dfc00115 	stw	ra,4(sp)
   1fe70:	df000015 	stw	fp,0(sp)
   1fe74:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   1fe78:	008000b4 	movhi	r2,2
   1fe7c:	108c9004 	addi	r2,r2,12864
   1fe80:	10800017 	ldw	r2,0(r2)
   1fe84:	10000526 	beq	r2,zero,1fe9c <alt_get_errno+0x34>
   1fe88:	008000b4 	movhi	r2,2
   1fe8c:	108c9004 	addi	r2,r2,12864
   1fe90:	10800017 	ldw	r2,0(r2)
   1fe94:	103ee83a 	callr	r2
   1fe98:	00000206 	br	1fea4 <alt_get_errno+0x3c>
   1fe9c:	008000b4 	movhi	r2,2
   1fea0:	10947804 	addi	r2,r2,20960
}
   1fea4:	e037883a 	mov	sp,fp
   1fea8:	dfc00117 	ldw	ra,4(sp)
   1feac:	df000017 	ldw	fp,0(sp)
   1feb0:	dec00204 	addi	sp,sp,8
   1feb4:	f800283a 	ret

0001feb8 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
   1feb8:	defffd04 	addi	sp,sp,-12
   1febc:	df000215 	stw	fp,8(sp)
   1fec0:	df000204 	addi	fp,sp,8
   1fec4:	e13fff15 	stw	r4,-4(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
   1fec8:	e0bfff17 	ldw	r2,-4(fp)
   1fecc:	10800217 	ldw	r2,8(r2)
   1fed0:	10d00034 	orhi	r3,r2,16384
   1fed4:	e0bfff17 	ldw	r2,-4(fp)
   1fed8:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   1fedc:	e03ffe15 	stw	zero,-8(fp)
   1fee0:	00001d06 	br	1ff58 <alt_file_locked+0xa0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   1fee4:	008000b4 	movhi	r2,2
   1fee8:	10872904 	addi	r2,r2,7332
   1feec:	e0fffe17 	ldw	r3,-8(fp)
   1fef0:	18c00324 	muli	r3,r3,12
   1fef4:	10c5883a 	add	r2,r2,r3
   1fef8:	10c00017 	ldw	r3,0(r2)
   1fefc:	e0bfff17 	ldw	r2,-4(fp)
   1ff00:	10800017 	ldw	r2,0(r2)
   1ff04:	1880111e 	bne	r3,r2,1ff4c <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   1ff08:	008000b4 	movhi	r2,2
   1ff0c:	10872904 	addi	r2,r2,7332
   1ff10:	e0fffe17 	ldw	r3,-8(fp)
   1ff14:	18c00324 	muli	r3,r3,12
   1ff18:	18c00204 	addi	r3,r3,8
   1ff1c:	10c5883a 	add	r2,r2,r3
   1ff20:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   1ff24:	1000090e 	bge	r2,zero,1ff4c <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
   1ff28:	e0bffe17 	ldw	r2,-8(fp)
   1ff2c:	10c00324 	muli	r3,r2,12
   1ff30:	008000b4 	movhi	r2,2
   1ff34:	10872904 	addi	r2,r2,7332
   1ff38:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   1ff3c:	e0bfff17 	ldw	r2,-4(fp)
   1ff40:	18800226 	beq	r3,r2,1ff4c <alt_file_locked+0x94>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
   1ff44:	00bffcc4 	movi	r2,-13
   1ff48:	00000a06 	br	1ff74 <alt_file_locked+0xbc>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   1ff4c:	e0bffe17 	ldw	r2,-8(fp)
   1ff50:	10800044 	addi	r2,r2,1
   1ff54:	e0bffe15 	stw	r2,-8(fp)
   1ff58:	008000b4 	movhi	r2,2
   1ff5c:	108c8f04 	addi	r2,r2,12860
   1ff60:	10800017 	ldw	r2,0(r2)
   1ff64:	1007883a 	mov	r3,r2
   1ff68:	e0bffe17 	ldw	r2,-8(fp)
   1ff6c:	18bfdd2e 	bgeu	r3,r2,1fee4 <__alt_mem_Flash_flash_data+0xf401fee4>
    }
  }
  
  /* The device is not locked */
 
  return 0;
   1ff70:	0005883a 	mov	r2,zero
}
   1ff74:	e037883a 	mov	sp,fp
   1ff78:	df000017 	ldw	fp,0(sp)
   1ff7c:	dec00104 	addi	sp,sp,4
   1ff80:	f800283a 	ret

0001ff84 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
   1ff84:	defff604 	addi	sp,sp,-40
   1ff88:	dfc00915 	stw	ra,36(sp)
   1ff8c:	df000815 	stw	fp,32(sp)
   1ff90:	df000804 	addi	fp,sp,32
   1ff94:	e13ffd15 	stw	r4,-12(fp)
   1ff98:	e17ffe15 	stw	r5,-8(fp)
   1ff9c:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
   1ffa0:	00bfffc4 	movi	r2,-1
   1ffa4:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
   1ffa8:	00bffb44 	movi	r2,-19
   1ffac:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
   1ffb0:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
   1ffb4:	e13ffd17 	ldw	r4,-12(fp)
   1ffb8:	014000b4 	movhi	r5,2
   1ffbc:	294c8d04 	addi	r5,r5,12852
   1ffc0:	001fac00 	call	1fac0 <alt_find_dev>
   1ffc4:	e0bff815 	stw	r2,-32(fp)
   1ffc8:	e0bff817 	ldw	r2,-32(fp)
   1ffcc:	1000051e 	bne	r2,zero,1ffe4 <open+0x60>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
   1ffd0:	e13ffd17 	ldw	r4,-12(fp)
   1ffd4:	00205cc0 	call	205cc <alt_find_file>
   1ffd8:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
   1ffdc:	00800044 	movi	r2,1
   1ffe0:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
   1ffe4:	e0bff817 	ldw	r2,-32(fp)
   1ffe8:	10002926 	beq	r2,zero,20090 <open+0x10c>
  {
    if ((index = alt_get_fd (dev)) < 0)
   1ffec:	e13ff817 	ldw	r4,-32(fp)
   1fff0:	00206e00 	call	206e0 <alt_get_fd>
   1fff4:	e0bff915 	stw	r2,-28(fp)
   1fff8:	e0bff917 	ldw	r2,-28(fp)
   1fffc:	1000030e 	bge	r2,zero,2000c <open+0x88>
    {
      status = index;
   20000:	e0bff917 	ldw	r2,-28(fp)
   20004:	e0bffa15 	stw	r2,-24(fp)
   20008:	00002306 	br	20098 <open+0x114>
    }
    else
    {
      fd = &alt_fd_list[index];
   2000c:	e0bff917 	ldw	r2,-28(fp)
   20010:	10c00324 	muli	r3,r2,12
   20014:	008000b4 	movhi	r2,2
   20018:	10872904 	addi	r2,r2,7332
   2001c:	1885883a 	add	r2,r3,r2
   20020:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
   20024:	e0fffe17 	ldw	r3,-8(fp)
   20028:	00900034 	movhi	r2,16384
   2002c:	10bfffc4 	addi	r2,r2,-1
   20030:	1886703a 	and	r3,r3,r2
   20034:	e0bffc17 	ldw	r2,-16(fp)
   20038:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
   2003c:	e0bffb17 	ldw	r2,-20(fp)
   20040:	1000051e 	bne	r2,zero,20058 <open+0xd4>
   20044:	e13ffc17 	ldw	r4,-16(fp)
   20048:	001feb80 	call	1feb8 <alt_file_locked>
   2004c:	e0bffa15 	stw	r2,-24(fp)
   20050:	e0bffa17 	ldw	r2,-24(fp)
   20054:	10001016 	blt	r2,zero,20098 <open+0x114>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
   20058:	e0bff817 	ldw	r2,-32(fp)
   2005c:	10800317 	ldw	r2,12(r2)
   20060:	10000826 	beq	r2,zero,20084 <open+0x100>
   20064:	e0bff817 	ldw	r2,-32(fp)
   20068:	10800317 	ldw	r2,12(r2)
   2006c:	e13ffc17 	ldw	r4,-16(fp)
   20070:	e17ffd17 	ldw	r5,-12(fp)
   20074:	e1bffe17 	ldw	r6,-8(fp)
   20078:	e1ffff17 	ldw	r7,-4(fp)
   2007c:	103ee83a 	callr	r2
   20080:	00000106 	br	20088 <open+0x104>
   20084:	0005883a 	mov	r2,zero
   20088:	e0bffa15 	stw	r2,-24(fp)
   2008c:	00000206 	br	20098 <open+0x114>
      }
    }
  }
  else
  {
    status = -ENODEV;
   20090:	00bffb44 	movi	r2,-19
   20094:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
   20098:	e0bffa17 	ldw	r2,-24(fp)
   2009c:	1000090e 	bge	r2,zero,200c4 <open+0x140>
  {
    alt_release_fd (index);  
   200a0:	e13ff917 	ldw	r4,-28(fp)
   200a4:	0010a380 	call	10a38 <alt_release_fd>
    ALT_ERRNO = -status;
   200a8:	001fe680 	call	1fe68 <alt_get_errno>
   200ac:	1007883a 	mov	r3,r2
   200b0:	e0bffa17 	ldw	r2,-24(fp)
   200b4:	0085c83a 	sub	r2,zero,r2
   200b8:	18800015 	stw	r2,0(r3)
    return -1;
   200bc:	00bfffc4 	movi	r2,-1
   200c0:	00000106 	br	200c8 <open+0x144>
  }
  
  /* return the reference upon success */

  return index;
   200c4:	e0bff917 	ldw	r2,-28(fp)
}
   200c8:	e037883a 	mov	sp,fp
   200cc:	dfc00117 	ldw	ra,4(sp)
   200d0:	df000017 	ldw	fp,0(sp)
   200d4:	dec00204 	addi	sp,sp,8
   200d8:	f800283a 	ret

000200dc <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
   200dc:	defffa04 	addi	sp,sp,-24
   200e0:	df000515 	stw	fp,20(sp)
   200e4:	df000504 	addi	fp,sp,20
   200e8:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   200ec:	0005303a 	rdctl	r2,status
   200f0:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   200f4:	e0fffc17 	ldw	r3,-16(fp)
   200f8:	00bfff84 	movi	r2,-2
   200fc:	1884703a 	and	r2,r3,r2
   20100:	1001703a 	wrctl	status,r2
  
  return context;
   20104:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
   20108:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
   2010c:	e0bfff17 	ldw	r2,-4(fp)
   20110:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
   20114:	e0bffd17 	ldw	r2,-12(fp)
   20118:	10800017 	ldw	r2,0(r2)
   2011c:	e0fffd17 	ldw	r3,-12(fp)
   20120:	18c00117 	ldw	r3,4(r3)
   20124:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
   20128:	e0bffd17 	ldw	r2,-12(fp)
   2012c:	10800117 	ldw	r2,4(r2)
   20130:	e0fffd17 	ldw	r3,-12(fp)
   20134:	18c00017 	ldw	r3,0(r3)
   20138:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
   2013c:	e0bffd17 	ldw	r2,-12(fp)
   20140:	e0fffd17 	ldw	r3,-12(fp)
   20144:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
   20148:	e0bffd17 	ldw	r2,-12(fp)
   2014c:	e0fffd17 	ldw	r3,-12(fp)
   20150:	10c00015 	stw	r3,0(r2)
   20154:	e0bffb17 	ldw	r2,-20(fp)
   20158:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   2015c:	e0bffe17 	ldw	r2,-8(fp)
   20160:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
   20164:	e037883a 	mov	sp,fp
   20168:	df000017 	ldw	fp,0(sp)
   2016c:	dec00104 	addi	sp,sp,4
   20170:	f800283a 	ret

00020174 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
   20174:	defffb04 	addi	sp,sp,-20
   20178:	dfc00415 	stw	ra,16(sp)
   2017c:	df000315 	stw	fp,12(sp)
   20180:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
   20184:	d0a02d17 	ldw	r2,-32588(gp)
   20188:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
   2018c:	d0a81f17 	ldw	r2,-24452(gp)
   20190:	10800044 	addi	r2,r2,1
   20194:	d0a81f15 	stw	r2,-24452(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   20198:	00002e06 	br	20254 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
   2019c:	e0bffd17 	ldw	r2,-12(fp)
   201a0:	10800017 	ldw	r2,0(r2)
   201a4:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
   201a8:	e0bffd17 	ldw	r2,-12(fp)
   201ac:	10800403 	ldbu	r2,16(r2)
   201b0:	10803fcc 	andi	r2,r2,255
   201b4:	10000426 	beq	r2,zero,201c8 <alt_tick+0x54>
   201b8:	d0a81f17 	ldw	r2,-24452(gp)
   201bc:	1000021e 	bne	r2,zero,201c8 <alt_tick+0x54>
    {
      alarm->rollover = 0;
   201c0:	e0bffd17 	ldw	r2,-12(fp)
   201c4:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
   201c8:	e0bffd17 	ldw	r2,-12(fp)
   201cc:	10800217 	ldw	r2,8(r2)
   201d0:	d0e81f17 	ldw	r3,-24452(gp)
   201d4:	18801d36 	bltu	r3,r2,2024c <alt_tick+0xd8>
   201d8:	e0bffd17 	ldw	r2,-12(fp)
   201dc:	10800403 	ldbu	r2,16(r2)
   201e0:	10803fcc 	andi	r2,r2,255
   201e4:	1000191e 	bne	r2,zero,2024c <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
   201e8:	e0bffd17 	ldw	r2,-12(fp)
   201ec:	10800317 	ldw	r2,12(r2)
   201f0:	e0fffd17 	ldw	r3,-12(fp)
   201f4:	18c00517 	ldw	r3,20(r3)
   201f8:	1809883a 	mov	r4,r3
   201fc:	103ee83a 	callr	r2
   20200:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
   20204:	e0bfff17 	ldw	r2,-4(fp)
   20208:	1000031e 	bne	r2,zero,20218 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
   2020c:	e13ffd17 	ldw	r4,-12(fp)
   20210:	00200dc0 	call	200dc <alt_alarm_stop>
   20214:	00000d06 	br	2024c <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
   20218:	e0bffd17 	ldw	r2,-12(fp)
   2021c:	10c00217 	ldw	r3,8(r2)
   20220:	e0bfff17 	ldw	r2,-4(fp)
   20224:	1887883a 	add	r3,r3,r2
   20228:	e0bffd17 	ldw	r2,-12(fp)
   2022c:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
   20230:	e0bffd17 	ldw	r2,-12(fp)
   20234:	10c00217 	ldw	r3,8(r2)
   20238:	d0a81f17 	ldw	r2,-24452(gp)
   2023c:	1880032e 	bgeu	r3,r2,2024c <alt_tick+0xd8>
        {
          alarm->rollover = 1;
   20240:	e0bffd17 	ldw	r2,-12(fp)
   20244:	00c00044 	movi	r3,1
   20248:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
   2024c:	e0bffe17 	ldw	r2,-8(fp)
   20250:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   20254:	e0fffd17 	ldw	r3,-12(fp)
   20258:	d0a02d04 	addi	r2,gp,-32588
   2025c:	18bfcf1e 	bne	r3,r2,2019c <__alt_mem_Flash_flash_data+0xf402019c>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
   20260:	0011c440 	call	11c44 <OSTimeTick>
}
   20264:	e037883a 	mov	sp,fp
   20268:	dfc00117 	ldw	ra,4(sp)
   2026c:	df000017 	ldw	fp,0(sp)
   20270:	dec00204 	addi	sp,sp,8
   20274:	f800283a 	ret

00020278 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
   20278:	deffff04 	addi	sp,sp,-4
   2027c:	df000015 	stw	fp,0(sp)
   20280:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
   20284:	000170fa 	wrctl	ienable,zero
}
   20288:	e037883a 	mov	sp,fp
   2028c:	df000017 	ldw	fp,0(sp)
   20290:	dec00104 	addi	sp,sp,4
   20294:	f800283a 	ret

00020298 <OSCtxSw>:

      /* 
       * Save the remaining registers to the stack. 
       */

      addi sp, sp, -44
   20298:	defff504 	addi	sp,sp,-44
      bltu  sp, et, .Lstack_overflow

#endif

#if OS_THREAD_SAFE_NEWLIB
      ldw r3, %gprel(_impure_ptr)(gp)   /* load the pointer */
   2029c:	d0e00117 	ldw	r3,-32764(gp)
#endif /* OS_THREAD_SAFE_NEWLIB */

      ldw r4, %gprel(OSTCBCur)(gp)
   202a0:	d1280b17 	ldw	r4,-24532(gp)

      stw ra,  0(sp)
   202a4:	dfc00015 	stw	ra,0(sp)
      stw fp,  4(sp)
   202a8:	df000115 	stw	fp,4(sp)
      stw r23, 8(sp)
   202ac:	ddc00215 	stw	r23,8(sp)
      stw r22, 12(sp)
   202b0:	dd800315 	stw	r22,12(sp)
      stw r21, 16(sp)
   202b4:	dd400415 	stw	r21,16(sp)
      stw r20, 20(sp)
   202b8:	dd000515 	stw	r20,20(sp)
      stw r19, 24(sp)
   202bc:	dcc00615 	stw	r19,24(sp)
      stw r18, 28(sp)
   202c0:	dc800715 	stw	r18,28(sp)
      stw r17, 32(sp)
   202c4:	dc400815 	stw	r17,32(sp)
      stw r16, 36(sp)
   202c8:	dc000915 	stw	r16,36(sp)
       * store the current value of _impure_ptr so it can be restored
       * later; _impure_ptr is asigned on a per task basis. It is used
       * by Newlib to achieve reentrancy.	
       */

      stw r3, 40(sp)                  /* save the impure pointer */
   202cc:	d8c00a15 	stw	r3,40(sp)
      /* 
       * Save the current tasks stack pointer into the current tasks OS_TCB.
       * i.e. OSTCBCur->OSTCBStkPtr = sp;
       */

      stw sp, (r4)                  /* save the stack pointer (OSTCBStkPtr */
   202d0:	26c00015 	stw	sp,0(r4)

      /*
       * Call the user definable OSTaskSWHook()
       */

      call OSTaskSwHook
   202d4:	00205040 	call	20504 <OSTaskSwHook>
      /*
       * OSTCBCur = OSTCBHighRdy; 
       * OSPrioCur = OSPrioHighRdy; 
       */

      ldw r4, %gprel(OSTCBHighRdy)(gp)
   202d8:	d1280617 	ldw	r4,-24552(gp)
      ldb r5, %gprel(OSPrioHighRdy)(gp)
   202dc:	d167fe07 	ldb	r5,-24584(gp)

      stw r4, %gprel(OSTCBCur)(gp)     /* set the current task to be the new task */
   202e0:	d1280b15 	stw	r4,-24532(gp)
      stb r5, %gprel(OSPrioCur)(gp)    /* store the new task's priority as the current */
   202e4:	d167fe45 	stb	r5,-24583(gp)

      /*
       * Set the stack pointer to point to the new task's stack
       */

      ldw sp, (r4) /* the stack pointer is the first entry in the OS_TCB structure */
   202e8:	26c00017 	ldw	sp,0(r4)
      /*
       * restore the value of _impure_ptr ; _impure_ptr is asigned on a 
       * per task basis. It is used by Newlib to achieve reentrancy.	
       */

      ldw r3, 40(sp)                  /* load the new impure pointer */
   202ec:	d8c00a17 	ldw	r3,40(sp)

      /*
       * Restore the saved registers for the new task.
       */

      ldw ra,  0(sp)
   202f0:	dfc00017 	ldw	ra,0(sp)
      ldw fp,  4(sp)
   202f4:	df000117 	ldw	fp,4(sp)
      ldw r23, 8(sp)
   202f8:	ddc00217 	ldw	r23,8(sp)
      ldw r22, 12(sp)
   202fc:	dd800317 	ldw	r22,12(sp)
      ldw r21, 16(sp)
   20300:	dd400417 	ldw	r21,16(sp)
      ldw r20, 20(sp)
   20304:	dd000517 	ldw	r20,20(sp)
      ldw r19, 24(sp)
   20308:	dcc00617 	ldw	r19,24(sp)
      ldw r18, 28(sp)
   2030c:	dc800717 	ldw	r18,28(sp)
      ldw r17, 32(sp)
   20310:	dc400817 	ldw	r17,32(sp)
      ldw r16, 36(sp)
   20314:	dc000917 	ldw	r16,36(sp)

#if OS_THREAD_SAFE_NEWLIB

      stw r3, %gprel(_impure_ptr)(gp) /* update _impure_ptr */
   20318:	d0e00115 	stw	r3,-32764(gp)

      stw et, %gprel(alt_stack_limit_value)(gp)

#endif

      addi sp, sp, 44
   2031c:	dec00b04 	addi	sp,sp,44

      /*
       * resume execution of the new task.
       */

      ret
   20320:	f800283a 	ret

00020324 <OSStartHighRdy>:

      /*
       * disable interrupts so that the scheduler doesn't run while
       * we're initialising this task.
       */  
      rdctl r18, status
   20324:	0025303a 	rdctl	r18,status
      subi  r17, zero, 2   /* r17 = 0xfffffffe */
   20328:	047fff84 	movi	r17,-2
      and   r18, r18, r17
   2032c:	9464703a 	and	r18,r18,r17
      wrctl status, r18
   20330:	9001703a 	wrctl	status,r18

      /*
       * Call the user definable OSTaskSWHook()
       */

      call OSTaskSwHook
   20334:	00205040 	call	20504 <OSTaskSwHook>

      /* 
       * set OSRunning = TRUE.
       */

      movi r18, 1                    /* set r18 to the value 'TRUE' */
   20338:	04800044 	movi	r18,1
      stb r18, %gprel(OSRunning)(gp) /* save this to OSRunning */
   2033c:	d4a7fc45 	stb	r18,-24591(gp)

      /*
       * start execution of the new task.
       */

      br 9b
   20340:	003fe506 	br	202d8 <__alt_mem_Flash_flash_data+0xf40202d8>

00020344 <OSStartTsk>:

OSStartTsk:
      /* This instruction is never executed.  Its here to make the
       * backtrace work right 
       */
      movi sp, 0
   20344:	06c00004 	movi	sp,0

      /* Enable interrupts */
      rdctl r2, status
   20348:	0005303a 	rdctl	r2,status
      ori   r2, r2, 0x1
   2034c:	10800054 	ori	r2,r2,1
      wrctl status, r2
   20350:	1001703a 	wrctl	status,r2

      ldw r2, 4(sp)
   20354:	d8800117 	ldw	r2,4(sp)
      ldw r4, 0(sp)
   20358:	d9000017 	ldw	r4,0(sp)

      addi sp, sp, 8
   2035c:	dec00204 	addi	sp,sp,8

      callr r2
   20360:	103ee83a 	callr	r2

      nop
   20364:	0001883a 	nop

00020368 <OSTaskStkInit>:
 *              been placed on the stack in the proper order.
 *
 ***********************************************************************************************/

OS_STK *OSTaskStkInit(void (*task)(void *pd), void *pdata, OS_STK *pstk, INT16U opt)
{
   20368:	defff704 	addi	sp,sp,-36
   2036c:	dfc00815 	stw	ra,32(sp)
   20370:	df000715 	stw	fp,28(sp)
   20374:	df000704 	addi	fp,sp,28
   20378:	e13ffc15 	stw	r4,-16(fp)
   2037c:	e17ffd15 	stw	r5,-12(fp)
   20380:	e1bffe15 	stw	r6,-8(fp)
   20384:	3805883a 	mov	r2,r7
   20388:	e0bfff0d 	sth	r2,-4(fp)
    * create and initialise the impure pointer used for Newlib thread local storage.
    * This is only done if the C library is being used in a thread safe mode. Otherwise
    * a single reent structure is used for all threads, which saves memory.
    */

   local_impure_ptr = (struct _reent*)((((INT32U)(pstk)) & ~0x3) - sizeof(struct _reent));
   2038c:	e0fffe17 	ldw	r3,-8(fp)
   20390:	00bfff04 	movi	r2,-4
   20394:	1884703a 	and	r2,r3,r2
   20398:	10bef704 	addi	r2,r2,-1060
   2039c:	e0bff915 	stw	r2,-28(fp)

   _REENT_INIT_PTR (local_impure_ptr);
   203a0:	e13ff917 	ldw	r4,-28(fp)
   203a4:	000b883a 	mov	r5,zero
   203a8:	01810904 	movi	r6,1060
   203ac:	0000a140 	call	a14 <memset>
   203b0:	e0bff917 	ldw	r2,-28(fp)
   203b4:	10c0bb04 	addi	r3,r2,748
   203b8:	e0bff917 	ldw	r2,-28(fp)
   203bc:	10c00115 	stw	r3,4(r2)
   203c0:	e0bff917 	ldw	r2,-28(fp)
   203c4:	10c0d504 	addi	r3,r2,852
   203c8:	e0bff917 	ldw	r2,-28(fp)
   203cc:	10c00215 	stw	r3,8(r2)
   203d0:	e0bff917 	ldw	r2,-28(fp)
   203d4:	10c0ef04 	addi	r3,r2,956
   203d8:	e0bff917 	ldw	r2,-28(fp)
   203dc:	10c00315 	stw	r3,12(r2)
   203e0:	e0fff917 	ldw	r3,-28(fp)
   203e4:	008000b4 	movhi	r2,2
   203e8:	1084f504 	addi	r2,r2,5076
   203ec:	18800d15 	stw	r2,52(r3)
   203f0:	e0bff917 	ldw	r2,-28(fp)
   203f4:	00c00044 	movi	r3,1
   203f8:	10c02915 	stw	r3,164(r2)
   203fc:	10002a15 	stw	zero,168(r2)
   20400:	e0bff917 	ldw	r2,-28(fp)
   20404:	00ccc384 	movi	r3,13070
   20408:	10c02b0d 	sth	r3,172(r2)
   2040c:	e0bff917 	ldw	r2,-28(fp)
   20410:	00eaf344 	movi	r3,-21555
   20414:	10c02b8d 	sth	r3,174(r2)
   20418:	e0bff917 	ldw	r2,-28(fp)
   2041c:	00c48d04 	movi	r3,4660
   20420:	10c02c0d 	sth	r3,176(r2)
   20424:	e0bff917 	ldw	r2,-28(fp)
   20428:	00f99b44 	movi	r3,-6547
   2042c:	10c02c8d 	sth	r3,178(r2)
   20430:	e0bff917 	ldw	r2,-28(fp)
   20434:	00f7bb04 	movi	r3,-8468
   20438:	10c02d0d 	sth	r3,180(r2)
   2043c:	e0bff917 	ldw	r2,-28(fp)
   20440:	00c00144 	movi	r3,5
   20444:	10c02d8d 	sth	r3,182(r2)
   20448:	e0bff917 	ldw	r2,-28(fp)
   2044c:	00c002c4 	movi	r3,11
   20450:	10c02e0d 	sth	r3,184(r2)
   /* 
    * create a stack frame at the top of the stack (leaving space for the 
    * reentrant data structure).
    */

   frame_pointer = (INT32U*) local_impure_ptr;
   20454:	e0bff917 	ldw	r2,-28(fp)
   20458:	e0bffa15 	stw	r2,-24(fp)
#else
   frame_pointer =   (INT32U*) (((INT32U)(pstk)) & ~0x3);
#endif /* OS_THREAD_SAFE_NEWLIB */
   stk = frame_pointer - 13;
   2045c:	e0bffa17 	ldw	r2,-24(fp)
   20460:	10bff304 	addi	r2,r2,-52
   20464:	e0bffb15 	stw	r2,-20(fp)

   /* Now fill the stack frame. */

   stk[12] = (INT32U)task;            /* task address (ra) */
   20468:	e0bffb17 	ldw	r2,-20(fp)
   2046c:	10800c04 	addi	r2,r2,48
   20470:	e0fffc17 	ldw	r3,-16(fp)
   20474:	10c00015 	stw	r3,0(r2)
   stk[11] = (INT32U) pdata;          /* first register argument (r4) */
   20478:	e0bffb17 	ldw	r2,-20(fp)
   2047c:	10800b04 	addi	r2,r2,44
   20480:	e0fffd17 	ldw	r3,-12(fp)
   20484:	10c00015 	stw	r3,0(r2)

#if OS_THREAD_SAFE_NEWLIB
   stk[10] = (INT32U) local_impure_ptr; /* value of _impure_ptr for this thread */
   20488:	e0bffb17 	ldw	r2,-20(fp)
   2048c:	10800a04 	addi	r2,r2,40
   20490:	e0fff917 	ldw	r3,-28(fp)
   20494:	10c00015 	stw	r3,0(r2)
#endif /* OS_THREAD_SAFE_NEWLIB */
   stk[0]  = ((INT32U)&OSStartTsk) + 4;/* exception return address (ea) */  
   20498:	008000b4 	movhi	r2,2
   2049c:	1080d104 	addi	r2,r2,836
   204a0:	10c00104 	addi	r3,r2,4
   204a4:	e0bffb17 	ldw	r2,-20(fp)
   204a8:	10c00015 	stw	r3,0(r2)
    */
   __asm__ (".set OSTCBNext_OFFSET,%0" :: "i" (offsetof(OS_TCB, OSTCBNext)));
   __asm__ (".set OSTCBPrio_OFFSET,%0" :: "i" (offsetof(OS_TCB, OSTCBPrio)));
   __asm__ (".set OSTCBStkPtr_OFFSET,%0" :: "i" (offsetof(OS_TCB, OSTCBStkPtr)));
  
   return((OS_STK *)stk);
   204ac:	e0bffb17 	ldw	r2,-20(fp)
}
   204b0:	e037883a 	mov	sp,fp
   204b4:	dfc00117 	ldw	ra,4(sp)
   204b8:	df000017 	ldw	fp,0(sp)
   204bc:	dec00204 	addi	sp,sp,8
   204c0:	f800283a 	ret

000204c4 <OSTaskCreateHook>:
*
* Note(s)    : 1) Interrupts are disabled during this call.
*********************************************************************************************************
*/
void OSTaskCreateHook (OS_TCB *ptcb)
{
   204c4:	defffe04 	addi	sp,sp,-8
   204c8:	df000115 	stw	fp,4(sp)
   204cc:	df000104 	addi	fp,sp,4
   204d0:	e13fff15 	stw	r4,-4(fp)
    ptcb = ptcb;                       /* Prevent compiler warning */
}
   204d4:	e037883a 	mov	sp,fp
   204d8:	df000017 	ldw	fp,0(sp)
   204dc:	dec00104 	addi	sp,sp,4
   204e0:	f800283a 	ret

000204e4 <OSTaskDelHook>:
*
* Note(s)    : 1) Interrupts are disabled during this call.
*********************************************************************************************************
*/
void OSTaskDelHook (OS_TCB *ptcb)
{
   204e4:	defffe04 	addi	sp,sp,-8
   204e8:	df000115 	stw	fp,4(sp)
   204ec:	df000104 	addi	fp,sp,4
   204f0:	e13fff15 	stw	r4,-4(fp)
    ptcb = ptcb;                       /* Prevent compiler warning                                     */
}
   204f4:	e037883a 	mov	sp,fp
   204f8:	df000017 	ldw	fp,0(sp)
   204fc:	dec00104 	addi	sp,sp,4
   20500:	f800283a 	ret

00020504 <OSTaskSwHook>:
*                 will be 'switched in' (i.e. the highest priority task) and, 'OSTCBCur' points to the
*                 task being switched out (i.e. the preempted task).
*********************************************************************************************************
*/
void OSTaskSwHook (void)
{
   20504:	deffff04 	addi	sp,sp,-4
   20508:	df000015 	stw	fp,0(sp)
   2050c:	d839883a 	mov	fp,sp
}
   20510:	e037883a 	mov	sp,fp
   20514:	df000017 	ldw	fp,0(sp)
   20518:	dec00104 	addi	sp,sp,4
   2051c:	f800283a 	ret

00020520 <OSTaskStatHook>:
*
* Arguments  : none
*********************************************************************************************************
*/
void OSTaskStatHook (void)
{
   20520:	deffff04 	addi	sp,sp,-4
   20524:	df000015 	stw	fp,0(sp)
   20528:	d839883a 	mov	fp,sp
}
   2052c:	e037883a 	mov	sp,fp
   20530:	df000017 	ldw	fp,0(sp)
   20534:	dec00104 	addi	sp,sp,4
   20538:	f800283a 	ret

0002053c <OSTimeTickHook>:
#ifdef ALT_INICHE
void cticks_hook(void);
#endif

void OSTimeTickHook (void)
{
   2053c:	deffff04 	addi	sp,sp,-4
   20540:	df000015 	stw	fp,0(sp)
   20544:	d839883a 	mov	fp,sp
    
#ifdef ALT_INICHE
    /* Service the Interniche timer */
    cticks_hook();
#endif
}
   20548:	e037883a 	mov	sp,fp
   2054c:	df000017 	ldw	fp,0(sp)
   20550:	dec00104 	addi	sp,sp,4
   20554:	f800283a 	ret

00020558 <OSInitHookBegin>:

void OSInitHookBegin(void)
{
   20558:	deffff04 	addi	sp,sp,-4
   2055c:	df000015 	stw	fp,0(sp)
   20560:	d839883a 	mov	fp,sp
#if OS_TMR_EN > 0
    OSTmrCtr = 0;
#endif
}
   20564:	e037883a 	mov	sp,fp
   20568:	df000017 	ldw	fp,0(sp)
   2056c:	dec00104 	addi	sp,sp,4
   20570:	f800283a 	ret

00020574 <OSInitHookEnd>:

void OSInitHookEnd(void)
{
   20574:	deffff04 	addi	sp,sp,-4
   20578:	df000015 	stw	fp,0(sp)
   2057c:	d839883a 	mov	fp,sp
}
   20580:	e037883a 	mov	sp,fp
   20584:	df000017 	ldw	fp,0(sp)
   20588:	dec00104 	addi	sp,sp,4
   2058c:	f800283a 	ret

00020590 <OSTaskIdleHook>:

void OSTaskIdleHook(void)
{
   20590:	deffff04 	addi	sp,sp,-4
   20594:	df000015 	stw	fp,0(sp)
   20598:	d839883a 	mov	fp,sp
}
   2059c:	e037883a 	mov	sp,fp
   205a0:	df000017 	ldw	fp,0(sp)
   205a4:	dec00104 	addi	sp,sp,4
   205a8:	f800283a 	ret

000205ac <OSTCBInitHook>:

void OSTCBInitHook(OS_TCB *ptcb)
{
   205ac:	defffe04 	addi	sp,sp,-8
   205b0:	df000115 	stw	fp,4(sp)
   205b4:	df000104 	addi	fp,sp,4
   205b8:	e13fff15 	stw	r4,-4(fp)
}
   205bc:	e037883a 	mov	sp,fp
   205c0:	df000017 	ldw	fp,0(sp)
   205c4:	dec00104 	addi	sp,sp,4
   205c8:	f800283a 	ret

000205cc <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
   205cc:	defffb04 	addi	sp,sp,-20
   205d0:	dfc00415 	stw	ra,16(sp)
   205d4:	df000315 	stw	fp,12(sp)
   205d8:	df000304 	addi	fp,sp,12
   205dc:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
   205e0:	008000b4 	movhi	r2,2
   205e4:	108c8b04 	addi	r2,r2,12844
   205e8:	10800017 	ldw	r2,0(r2)
   205ec:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   205f0:	00003106 	br	206b8 <alt_find_file+0xec>
  {
    len = strlen(next->name);
   205f4:	e0bffd17 	ldw	r2,-12(fp)
   205f8:	10800217 	ldw	r2,8(r2)
   205fc:	1009883a 	mov	r4,r2
   20600:	0000e580 	call	e58 <strlen>
   20604:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
   20608:	e0bffd17 	ldw	r2,-12(fp)
   2060c:	10c00217 	ldw	r3,8(r2)
   20610:	e0bffe17 	ldw	r2,-8(fp)
   20614:	10bfffc4 	addi	r2,r2,-1
   20618:	1885883a 	add	r2,r3,r2
   2061c:	10800003 	ldbu	r2,0(r2)
   20620:	10803fcc 	andi	r2,r2,255
   20624:	1080201c 	xori	r2,r2,128
   20628:	10bfe004 	addi	r2,r2,-128
   2062c:	10800bd8 	cmpnei	r2,r2,47
   20630:	1000031e 	bne	r2,zero,20640 <alt_find_file+0x74>
    {
      len -= 1;
   20634:	e0bffe17 	ldw	r2,-8(fp)
   20638:	10bfffc4 	addi	r2,r2,-1
   2063c:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   20640:	e0bffe17 	ldw	r2,-8(fp)
   20644:	e0ffff17 	ldw	r3,-4(fp)
   20648:	1885883a 	add	r2,r3,r2
   2064c:	10800003 	ldbu	r2,0(r2)
   20650:	10803fcc 	andi	r2,r2,255
   20654:	1080201c 	xori	r2,r2,128
   20658:	10bfe004 	addi	r2,r2,-128
   2065c:	10800be0 	cmpeqi	r2,r2,47
   20660:	1000081e 	bne	r2,zero,20684 <alt_find_file+0xb8>
   20664:	e0bffe17 	ldw	r2,-8(fp)
   20668:	e0ffff17 	ldw	r3,-4(fp)
   2066c:	1885883a 	add	r2,r3,r2
   20670:	10800003 	ldbu	r2,0(r2)
   20674:	10803fcc 	andi	r2,r2,255
   20678:	1080201c 	xori	r2,r2,128
   2067c:	10bfe004 	addi	r2,r2,-128
   20680:	10000a1e 	bne	r2,zero,206ac <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
   20684:	e0bffd17 	ldw	r2,-12(fp)
   20688:	10c00217 	ldw	r3,8(r2)
   2068c:	e0bffe17 	ldw	r2,-8(fp)
   20690:	1809883a 	mov	r4,r3
   20694:	e17fff17 	ldw	r5,-4(fp)
   20698:	100d883a 	mov	r6,r2
   2069c:	00209500 	call	20950 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   206a0:	1000021e 	bne	r2,zero,206ac <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
   206a4:	e0bffd17 	ldw	r2,-12(fp)
   206a8:	00000806 	br	206cc <alt_find_file+0x100>
    }
    next = (alt_dev*) next->llist.next;
   206ac:	e0bffd17 	ldw	r2,-12(fp)
   206b0:	10800017 	ldw	r2,0(r2)
   206b4:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   206b8:	e0fffd17 	ldw	r3,-12(fp)
   206bc:	008000b4 	movhi	r2,2
   206c0:	108c8b04 	addi	r2,r2,12844
   206c4:	18bfcb1e 	bne	r3,r2,205f4 <__alt_mem_Flash_flash_data+0xf40205f4>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
   206c8:	0005883a 	mov	r2,zero
}
   206cc:	e037883a 	mov	sp,fp
   206d0:	dfc00117 	ldw	ra,4(sp)
   206d4:	df000017 	ldw	fp,0(sp)
   206d8:	dec00204 	addi	sp,sp,8
   206dc:	f800283a 	ret

000206e0 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
   206e0:	defff904 	addi	sp,sp,-28
   206e4:	dfc00615 	stw	ra,24(sp)
   206e8:	df000515 	stw	fp,20(sp)
   206ec:	df000504 	addi	fp,sp,20
   206f0:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
   206f4:	00bffa04 	movi	r2,-24
   206f8:	e0bffc15 	stw	r2,-16(fp)
  /* 
   * Take the alt_fd_list_lock semaphore in order to avoid races when 
   * accessing the file descriptor pool.
   */
  
  ALT_SEM_PEND(alt_fd_list_lock, 0);
   206fc:	008000b4 	movhi	r2,2
   20700:	10947904 	addi	r2,r2,20964
   20704:	10800017 	ldw	r2,0(r2)
   20708:	e0bffd15 	stw	r2,-12(fp)
   2070c:	e03ffe0d 	sth	zero,-8(fp)
   20710:	e0fffe0b 	ldhu	r3,-8(fp)
   20714:	e0bffe84 	addi	r2,fp,-6
   20718:	e13ffd17 	ldw	r4,-12(fp)
   2071c:	180b883a 	mov	r5,r3
   20720:	100d883a 	mov	r6,r2
   20724:	00166e00 	call	166e0 <OSSemPend>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   20728:	e03ffb15 	stw	zero,-20(fp)
   2072c:	00001d06 	br	207a4 <alt_get_fd+0xc4>
  {
    if (!alt_fd_list[i].dev)
   20730:	008000b4 	movhi	r2,2
   20734:	10872904 	addi	r2,r2,7332
   20738:	e0fffb17 	ldw	r3,-20(fp)
   2073c:	18c00324 	muli	r3,r3,12
   20740:	10c5883a 	add	r2,r2,r3
   20744:	10800017 	ldw	r2,0(r2)
   20748:	1000131e 	bne	r2,zero,20798 <alt_get_fd+0xb8>
    {
      alt_fd_list[i].dev = dev;
   2074c:	008000b4 	movhi	r2,2
   20750:	10872904 	addi	r2,r2,7332
   20754:	e0fffb17 	ldw	r3,-20(fp)
   20758:	18c00324 	muli	r3,r3,12
   2075c:	10c5883a 	add	r2,r2,r3
   20760:	e0ffff17 	ldw	r3,-4(fp)
   20764:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
   20768:	008000b4 	movhi	r2,2
   2076c:	108c8f04 	addi	r2,r2,12860
   20770:	10c00017 	ldw	r3,0(r2)
   20774:	e0bffb17 	ldw	r2,-20(fp)
   20778:	1880040e 	bge	r3,r2,2078c <alt_get_fd+0xac>
      {
        alt_max_fd = i;
   2077c:	008000b4 	movhi	r2,2
   20780:	108c8f04 	addi	r2,r2,12860
   20784:	e0fffb17 	ldw	r3,-20(fp)
   20788:	10c00015 	stw	r3,0(r2)
      }
      rc = i;
   2078c:	e0bffb17 	ldw	r2,-20(fp)
   20790:	e0bffc15 	stw	r2,-16(fp)
      goto alt_get_fd_exit;
   20794:	00000606 	br	207b0 <alt_get_fd+0xd0>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   20798:	e0bffb17 	ldw	r2,-20(fp)
   2079c:	10800044 	addi	r2,r2,1
   207a0:	e0bffb15 	stw	r2,-20(fp)
   207a4:	e0bffb17 	ldw	r2,-20(fp)
   207a8:	10800810 	cmplti	r2,r2,32
   207ac:	103fe01e 	bne	r2,zero,20730 <__alt_mem_Flash_flash_data+0xf4020730>
  /*
   * Release the alt_fd_list_lock semaphore now that we are done with the
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);
   207b0:	008000b4 	movhi	r2,2
   207b4:	10947904 	addi	r2,r2,20964
   207b8:	10800017 	ldw	r2,0(r2)
   207bc:	1009883a 	mov	r4,r2
   207c0:	0016ab40 	call	16ab4 <OSSemPost>

  return rc;
   207c4:	e0bffc17 	ldw	r2,-16(fp)
}
   207c8:	e037883a 	mov	sp,fp
   207cc:	dfc00117 	ldw	ra,4(sp)
   207d0:	df000017 	ldw	fp,0(sp)
   207d4:	dec00204 	addi	sp,sp,8
   207d8:	f800283a 	ret

000207dc <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
   207dc:	defffb04 	addi	sp,sp,-20
   207e0:	df000415 	stw	fp,16(sp)
   207e4:	df000404 	addi	fp,sp,16
   207e8:	e13ffe15 	stw	r4,-8(fp)
   207ec:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
   207f0:	e0bfff17 	ldw	r2,-4(fp)
   207f4:	10840070 	cmpltui	r2,r2,4097
   207f8:	1000021e 	bne	r2,zero,20804 <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
   207fc:	00840004 	movi	r2,4096
   20800:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
   20804:	e0fffe17 	ldw	r3,-8(fp)
   20808:	e0bfff17 	ldw	r2,-4(fp)
   2080c:	1885883a 	add	r2,r3,r2
   20810:	e0bffd15 	stw	r2,-12(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
   20814:	e0bffe17 	ldw	r2,-8(fp)
   20818:	e0bffc15 	stw	r2,-16(fp)
   2081c:	00000506 	br	20834 <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
   20820:	e0bffc17 	ldw	r2,-16(fp)
   20824:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
   20828:	e0bffc17 	ldw	r2,-16(fp)
   2082c:	10800804 	addi	r2,r2,32
   20830:	e0bffc15 	stw	r2,-16(fp)
   20834:	e0fffc17 	ldw	r3,-16(fp)
   20838:	e0bffd17 	ldw	r2,-12(fp)
   2083c:	18bff836 	bltu	r3,r2,20820 <__alt_mem_Flash_flash_data+0xf4020820>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
   20840:	e0bffe17 	ldw	r2,-8(fp)
   20844:	108007cc 	andi	r2,r2,31
   20848:	10000226 	beq	r2,zero,20854 <alt_icache_flush+0x78>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
   2084c:	e0bffc17 	ldw	r2,-16(fp)
   20850:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
   20854:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
   20858:	e037883a 	mov	sp,fp
   2085c:	df000017 	ldw	fp,0(sp)
   20860:	dec00104 	addi	sp,sp,4
   20864:	f800283a 	ret

00020868 <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
   20868:	defffe04 	addi	sp,sp,-8
   2086c:	df000115 	stw	fp,4(sp)
   20870:	df000104 	addi	fp,sp,4
   20874:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
   20878:	e0bfff17 	ldw	r2,-4(fp)
   2087c:	10bffe84 	addi	r2,r2,-6
   20880:	10c00428 	cmpgeui	r3,r2,16
   20884:	18001a1e 	bne	r3,zero,208f0 <alt_exception_cause_generated_bad_addr+0x88>
   20888:	100690ba 	slli	r3,r2,2
   2088c:	008000b4 	movhi	r2,2
   20890:	10822804 	addi	r2,r2,2208
   20894:	1885883a 	add	r2,r3,r2
   20898:	10800017 	ldw	r2,0(r2)
   2089c:	1000683a 	jmp	r2
   208a0:	000208e0 	cmpeqi	zero,zero,2083
   208a4:	000208e0 	cmpeqi	zero,zero,2083
   208a8:	000208f0 	cmpltui	zero,zero,2083
   208ac:	000208f0 	cmpltui	zero,zero,2083
   208b0:	000208f0 	cmpltui	zero,zero,2083
   208b4:	000208e0 	cmpeqi	zero,zero,2083
   208b8:	000208e8 	cmpgeui	zero,zero,2083
   208bc:	000208f0 	cmpltui	zero,zero,2083
   208c0:	000208e0 	cmpeqi	zero,zero,2083
   208c4:	000208e0 	cmpeqi	zero,zero,2083
   208c8:	000208f0 	cmpltui	zero,zero,2083
   208cc:	000208e0 	cmpeqi	zero,zero,2083
   208d0:	000208e8 	cmpgeui	zero,zero,2083
   208d4:	000208f0 	cmpltui	zero,zero,2083
   208d8:	000208f0 	cmpltui	zero,zero,2083
   208dc:	000208e0 	cmpeqi	zero,zero,2083
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
   208e0:	00800044 	movi	r2,1
   208e4:	00000306 	br	208f4 <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
   208e8:	0005883a 	mov	r2,zero
   208ec:	00000106 	br	208f4 <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
   208f0:	0005883a 	mov	r2,zero
  }
}
   208f4:	e037883a 	mov	sp,fp
   208f8:	df000017 	ldw	fp,0(sp)
   208fc:	dec00104 	addi	sp,sp,4
   20900:	f800283a 	ret

00020904 <atexit>:
   20904:	200b883a 	mov	r5,r4
   20908:	000d883a 	mov	r6,zero
   2090c:	0009883a 	mov	r4,zero
   20910:	000f883a 	mov	r7,zero
   20914:	00209cc1 	jmpi	209cc <__register_exitproc>

00020918 <exit>:
   20918:	defffe04 	addi	sp,sp,-8
   2091c:	000b883a 	mov	r5,zero
   20920:	dc000015 	stw	r16,0(sp)
   20924:	dfc00115 	stw	ra,4(sp)
   20928:	2021883a 	mov	r16,r4
   2092c:	0020ae00 	call	20ae0 <__call_exitprocs>
   20930:	008000b4 	movhi	r2,2
   20934:	108c8504 	addi	r2,r2,12820
   20938:	11000017 	ldw	r4,0(r2)
   2093c:	20800f17 	ldw	r2,60(r4)
   20940:	10000126 	beq	r2,zero,20948 <exit+0x30>
   20944:	103ee83a 	callr	r2
   20948:	8009883a 	mov	r4,r16
   2094c:	0020c740 	call	20c74 <_exit>

00020950 <memcmp>:
   20950:	01c000c4 	movi	r7,3
   20954:	3980192e 	bgeu	r7,r6,209bc <memcmp+0x6c>
   20958:	2144b03a 	or	r2,r4,r5
   2095c:	11c4703a 	and	r2,r2,r7
   20960:	10000f26 	beq	r2,zero,209a0 <memcmp+0x50>
   20964:	20800003 	ldbu	r2,0(r4)
   20968:	28c00003 	ldbu	r3,0(r5)
   2096c:	10c0151e 	bne	r2,r3,209c4 <memcmp+0x74>
   20970:	31bfff84 	addi	r6,r6,-2
   20974:	01ffffc4 	movi	r7,-1
   20978:	00000406 	br	2098c <memcmp+0x3c>
   2097c:	20800003 	ldbu	r2,0(r4)
   20980:	28c00003 	ldbu	r3,0(r5)
   20984:	31bfffc4 	addi	r6,r6,-1
   20988:	10c00e1e 	bne	r2,r3,209c4 <memcmp+0x74>
   2098c:	21000044 	addi	r4,r4,1
   20990:	29400044 	addi	r5,r5,1
   20994:	31fff91e 	bne	r6,r7,2097c <__alt_mem_Flash_flash_data+0xf402097c>
   20998:	0005883a 	mov	r2,zero
   2099c:	f800283a 	ret
   209a0:	20c00017 	ldw	r3,0(r4)
   209a4:	28800017 	ldw	r2,0(r5)
   209a8:	1880041e 	bne	r3,r2,209bc <memcmp+0x6c>
   209ac:	31bfff04 	addi	r6,r6,-4
   209b0:	21000104 	addi	r4,r4,4
   209b4:	29400104 	addi	r5,r5,4
   209b8:	39bff936 	bltu	r7,r6,209a0 <__alt_mem_Flash_flash_data+0xf40209a0>
   209bc:	303fe91e 	bne	r6,zero,20964 <__alt_mem_Flash_flash_data+0xf4020964>
   209c0:	003ff506 	br	20998 <__alt_mem_Flash_flash_data+0xf4020998>
   209c4:	10c5c83a 	sub	r2,r2,r3
   209c8:	f800283a 	ret

000209cc <__register_exitproc>:
   209cc:	008000b4 	movhi	r2,2
   209d0:	defffa04 	addi	sp,sp,-24
   209d4:	108c8504 	addi	r2,r2,12820
   209d8:	dc000315 	stw	r16,12(sp)
   209dc:	14000017 	ldw	r16,0(r2)
   209e0:	dc400415 	stw	r17,16(sp)
   209e4:	dfc00515 	stw	ra,20(sp)
   209e8:	80805217 	ldw	r2,328(r16)
   209ec:	2023883a 	mov	r17,r4
   209f0:	10003626 	beq	r2,zero,20acc <__register_exitproc+0x100>
   209f4:	10c00117 	ldw	r3,4(r2)
   209f8:	010007c4 	movi	r4,31
   209fc:	20c00e16 	blt	r4,r3,20a38 <__register_exitproc+0x6c>
   20a00:	1a400044 	addi	r9,r3,1
   20a04:	8800211e 	bne	r17,zero,20a8c <__register_exitproc+0xc0>
   20a08:	18c00084 	addi	r3,r3,2
   20a0c:	18c7883a 	add	r3,r3,r3
   20a10:	18c7883a 	add	r3,r3,r3
   20a14:	12400115 	stw	r9,4(r2)
   20a18:	10c7883a 	add	r3,r2,r3
   20a1c:	19400015 	stw	r5,0(r3)
   20a20:	0005883a 	mov	r2,zero
   20a24:	dfc00517 	ldw	ra,20(sp)
   20a28:	dc400417 	ldw	r17,16(sp)
   20a2c:	dc000317 	ldw	r16,12(sp)
   20a30:	dec00604 	addi	sp,sp,24
   20a34:	f800283a 	ret
   20a38:	00800034 	movhi	r2,0
   20a3c:	10800004 	addi	r2,r2,0
   20a40:	10002526 	beq	r2,zero,20ad8 <__register_exitproc+0x10c>
   20a44:	01006404 	movi	r4,400
   20a48:	d9400015 	stw	r5,0(sp)
   20a4c:	d9800115 	stw	r6,4(sp)
   20a50:	d9c00215 	stw	r7,8(sp)
   20a54:	00000000 	call	0 <__alt_mem_SDRAM>
   20a58:	d9400017 	ldw	r5,0(sp)
   20a5c:	d9800117 	ldw	r6,4(sp)
   20a60:	d9c00217 	ldw	r7,8(sp)
   20a64:	10001c26 	beq	r2,zero,20ad8 <__register_exitproc+0x10c>
   20a68:	80c05217 	ldw	r3,328(r16)
   20a6c:	10000115 	stw	zero,4(r2)
   20a70:	02400044 	movi	r9,1
   20a74:	10c00015 	stw	r3,0(r2)
   20a78:	80805215 	stw	r2,328(r16)
   20a7c:	10006215 	stw	zero,392(r2)
   20a80:	10006315 	stw	zero,396(r2)
   20a84:	0007883a 	mov	r3,zero
   20a88:	883fdf26 	beq	r17,zero,20a08 <__alt_mem_Flash_flash_data+0xf4020a08>
   20a8c:	18d1883a 	add	r8,r3,r3
   20a90:	4211883a 	add	r8,r8,r8
   20a94:	1211883a 	add	r8,r2,r8
   20a98:	41802215 	stw	r6,136(r8)
   20a9c:	01000044 	movi	r4,1
   20aa0:	11806217 	ldw	r6,392(r2)
   20aa4:	20c8983a 	sll	r4,r4,r3
   20aa8:	310cb03a 	or	r6,r6,r4
   20aac:	11806215 	stw	r6,392(r2)
   20ab0:	41c04215 	stw	r7,264(r8)
   20ab4:	01800084 	movi	r6,2
   20ab8:	89bfd31e 	bne	r17,r6,20a08 <__alt_mem_Flash_flash_data+0xf4020a08>
   20abc:	11806317 	ldw	r6,396(r2)
   20ac0:	3108b03a 	or	r4,r6,r4
   20ac4:	11006315 	stw	r4,396(r2)
   20ac8:	003fcf06 	br	20a08 <__alt_mem_Flash_flash_data+0xf4020a08>
   20acc:	80805304 	addi	r2,r16,332
   20ad0:	80805215 	stw	r2,328(r16)
   20ad4:	003fc706 	br	209f4 <__alt_mem_Flash_flash_data+0xf40209f4>
   20ad8:	00bfffc4 	movi	r2,-1
   20adc:	003fd106 	br	20a24 <__alt_mem_Flash_flash_data+0xf4020a24>

00020ae0 <__call_exitprocs>:
   20ae0:	008000b4 	movhi	r2,2
   20ae4:	108c8504 	addi	r2,r2,12820
   20ae8:	10800017 	ldw	r2,0(r2)
   20aec:	defff404 	addi	sp,sp,-48
   20af0:	dd800815 	stw	r22,32(sp)
   20af4:	d8800015 	stw	r2,0(sp)
   20af8:	10805204 	addi	r2,r2,328
   20afc:	dd000615 	stw	r20,24(sp)
   20b00:	dc800415 	stw	r18,16(sp)
   20b04:	dfc00b15 	stw	ra,44(sp)
   20b08:	df000a15 	stw	fp,40(sp)
   20b0c:	ddc00915 	stw	r23,36(sp)
   20b10:	dd400715 	stw	r21,28(sp)
   20b14:	dcc00515 	stw	r19,20(sp)
   20b18:	dc400315 	stw	r17,12(sp)
   20b1c:	dc000215 	stw	r16,8(sp)
   20b20:	2025883a 	mov	r18,r4
   20b24:	2829883a 	mov	r20,r5
   20b28:	d8800115 	stw	r2,4(sp)
   20b2c:	05bfffc4 	movi	r22,-1
   20b30:	d8800017 	ldw	r2,0(sp)
   20b34:	14c05217 	ldw	r19,328(r2)
   20b38:	98001d26 	beq	r19,zero,20bb0 <__call_exitprocs+0xd0>
   20b3c:	dd400117 	ldw	r21,4(sp)
   20b40:	98800117 	ldw	r2,4(r19)
   20b44:	173fffc4 	addi	fp,r2,-1
   20b48:	e0000d16 	blt	fp,zero,20b80 <__call_exitprocs+0xa0>
   20b4c:	14000044 	addi	r16,r2,1
   20b50:	8421883a 	add	r16,r16,r16
   20b54:	8421883a 	add	r16,r16,r16
   20b58:	84402004 	addi	r17,r16,128
   20b5c:	9c63883a 	add	r17,r19,r17
   20b60:	9c21883a 	add	r16,r19,r16
   20b64:	a0001e26 	beq	r20,zero,20be0 <__call_exitprocs+0x100>
   20b68:	80804017 	ldw	r2,256(r16)
   20b6c:	15001c26 	beq	r2,r20,20be0 <__call_exitprocs+0x100>
   20b70:	e73fffc4 	addi	fp,fp,-1
   20b74:	843fff04 	addi	r16,r16,-4
   20b78:	8c7fff04 	addi	r17,r17,-4
   20b7c:	e5bff91e 	bne	fp,r22,20b64 <__alt_mem_Flash_flash_data+0xf4020b64>
   20b80:	00800034 	movhi	r2,0
   20b84:	10800004 	addi	r2,r2,0
   20b88:	10000926 	beq	r2,zero,20bb0 <__call_exitprocs+0xd0>
   20b8c:	98800117 	ldw	r2,4(r19)
   20b90:	1000311e 	bne	r2,zero,20c58 <__call_exitprocs+0x178>
   20b94:	98800017 	ldw	r2,0(r19)
   20b98:	10003426 	beq	r2,zero,20c6c <__call_exitprocs+0x18c>
   20b9c:	9809883a 	mov	r4,r19
   20ba0:	a8800015 	stw	r2,0(r21)
   20ba4:	00000000 	call	0 <__alt_mem_SDRAM>
   20ba8:	acc00017 	ldw	r19,0(r21)
   20bac:	983fe41e 	bne	r19,zero,20b40 <__alt_mem_Flash_flash_data+0xf4020b40>
   20bb0:	dfc00b17 	ldw	ra,44(sp)
   20bb4:	df000a17 	ldw	fp,40(sp)
   20bb8:	ddc00917 	ldw	r23,36(sp)
   20bbc:	dd800817 	ldw	r22,32(sp)
   20bc0:	dd400717 	ldw	r21,28(sp)
   20bc4:	dd000617 	ldw	r20,24(sp)
   20bc8:	dcc00517 	ldw	r19,20(sp)
   20bcc:	dc800417 	ldw	r18,16(sp)
   20bd0:	dc400317 	ldw	r17,12(sp)
   20bd4:	dc000217 	ldw	r16,8(sp)
   20bd8:	dec00c04 	addi	sp,sp,48
   20bdc:	f800283a 	ret
   20be0:	98800117 	ldw	r2,4(r19)
   20be4:	80c00017 	ldw	r3,0(r16)
   20be8:	10bfffc4 	addi	r2,r2,-1
   20bec:	17001526 	beq	r2,fp,20c44 <__call_exitprocs+0x164>
   20bf0:	80000015 	stw	zero,0(r16)
   20bf4:	183fde26 	beq	r3,zero,20b70 <__alt_mem_Flash_flash_data+0xf4020b70>
   20bf8:	00800044 	movi	r2,1
   20bfc:	1708983a 	sll	r4,r2,fp
   20c00:	98806217 	ldw	r2,392(r19)
   20c04:	9dc00117 	ldw	r23,4(r19)
   20c08:	2084703a 	and	r2,r4,r2
   20c0c:	1000061e 	bne	r2,zero,20c28 <__call_exitprocs+0x148>
   20c10:	183ee83a 	callr	r3
   20c14:	98800117 	ldw	r2,4(r19)
   20c18:	15ffc51e 	bne	r2,r23,20b30 <__alt_mem_Flash_flash_data+0xf4020b30>
   20c1c:	a8800017 	ldw	r2,0(r21)
   20c20:	14ffd326 	beq	r2,r19,20b70 <__alt_mem_Flash_flash_data+0xf4020b70>
   20c24:	003fc206 	br	20b30 <__alt_mem_Flash_flash_data+0xf4020b30>
   20c28:	98806317 	ldw	r2,396(r19)
   20c2c:	2084703a 	and	r2,r4,r2
   20c30:	1000061e 	bne	r2,zero,20c4c <__call_exitprocs+0x16c>
   20c34:	89400017 	ldw	r5,0(r17)
   20c38:	9009883a 	mov	r4,r18
   20c3c:	183ee83a 	callr	r3
   20c40:	003ff406 	br	20c14 <__alt_mem_Flash_flash_data+0xf4020c14>
   20c44:	9f000115 	stw	fp,4(r19)
   20c48:	003fea06 	br	20bf4 <__alt_mem_Flash_flash_data+0xf4020bf4>
   20c4c:	89000017 	ldw	r4,0(r17)
   20c50:	183ee83a 	callr	r3
   20c54:	003fef06 	br	20c14 <__alt_mem_Flash_flash_data+0xf4020c14>
   20c58:	98800017 	ldw	r2,0(r19)
   20c5c:	982b883a 	mov	r21,r19
   20c60:	1027883a 	mov	r19,r2
   20c64:	983fb61e 	bne	r19,zero,20b40 <__alt_mem_Flash_flash_data+0xf4020b40>
   20c68:	003fd106 	br	20bb0 <__alt_mem_Flash_flash_data+0xf4020bb0>
   20c6c:	0005883a 	mov	r2,zero
   20c70:	003ffa06 	br	20c5c <__alt_mem_Flash_flash_data+0xf4020c5c>

00020c74 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
   20c74:	defffd04 	addi	sp,sp,-12
   20c78:	df000215 	stw	fp,8(sp)
   20c7c:	df000204 	addi	fp,sp,8
   20c80:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
   20c84:	008000b4 	movhi	r2,2
   20c88:	10948144 	addi	r2,r2,20997
   20c8c:	10000005 	stb	zero,0(r2)
   20c90:	e0bfff17 	ldw	r2,-4(fp)
   20c94:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
   20c98:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
   20c9c:	10000226 	beq	r2,zero,20ca8 <_exit+0x34>
    ALT_SIM_FAIL();
   20ca0:	002af070 	cmpltui	zero,zero,43969
   20ca4:	00000106 	br	20cac <_exit+0x38>
  } else {
    ALT_SIM_PASS();
   20ca8:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
   20cac:	003fff06 	br	20cac <__alt_mem_Flash_flash_data+0xf4020cac>
