
demo6.elf:     file format elf32-littlenios2
demo6.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00000244

Program Header:
    LOAD off    0x00001000 vaddr 0x00000000 paddr 0x00000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00000020 paddr 0x00000020 align 2**12
         filesz 0x0001934c memsz 0x0001934c flags r-x
    LOAD off    0x0001a36c vaddr 0x0001936c paddr 0x0001b288 align 2**12
         filesz 0x00001f1c memsz 0x00001f1c flags rw-
    LOAD off    0x0001d1a4 vaddr 0x0001d1a4 paddr 0x0001d1a4 align 2**12
         filesz 0x00000000 memsz 0x0000b42c flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00000000  00000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000224  00000020  00000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00018a78  00000244  00000244  00001244  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       000006b0  00018cbc  00018cbc  00019cbc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001f1c  0001936c  0001b288  0001a36c  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          0000b42c  0001d1a4  0001d1a4  0001d1a4  2**2
                  ALLOC, SMALL_DATA
  6 .SDRAM        00000000  000285d0  000285d0  0001c288  2**0
                  CONTENTS
  7 .Flash_flash_data 00000000  0c000000  0c000000  0001c288  2**0
                  CONTENTS
  8 .comment      00000023  00000000  00000000  0001c288  2**0
                  CONTENTS, READONLY
  9 .debug_aranges 00001008  00000000  00000000  0001c2b0  2**3
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_info   0002cd26  00000000  00000000  0001d2b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 0000a7e6  00000000  00000000  00049fde  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0000ddbd  00000000  00000000  000547c4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame  000037ac  00000000  00000000  00062584  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    000051a3  00000000  00000000  00065d30  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    000158f3  00000000  00000000  0006aed3  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_alt_sim_info 00000020  00000000  00000000  000807c8  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 000015c0  00000000  00000000  000807e8  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .thread_model 00000006  00000000  00000000  00087421  2**0
                  CONTENTS, READONLY
 19 .cpu          00000005  00000000  00000000  00087427  2**0
                  CONTENTS, READONLY
 20 .qsys         00000001  00000000  00000000  0008742c  2**0
                  CONTENTS, READONLY
 21 .simulation_enabled 00000001  00000000  00000000  0008742d  2**0
                  CONTENTS, READONLY
 22 .sysid_hash   00000004  00000000  00000000  0008742e  2**0
                  CONTENTS, READONLY
 23 .sysid_base   00000004  00000000  00000000  00087432  2**0
                  CONTENTS, READONLY
 24 .sysid_time   00000004  00000000  00000000  00087436  2**0
                  CONTENTS, READONLY
 25 .stderr_dev   00000009  00000000  00000000  0008743a  2**0
                  CONTENTS, READONLY
 26 .stdin_dev    00000009  00000000  00000000  00087443  2**0
                  CONTENTS, READONLY
 27 .stdout_dev   00000009  00000000  00000000  0008744c  2**0
                  CONTENTS, READONLY
 28 .sopc_system_name 0000000b  00000000  00000000  00087455  2**0
                  CONTENTS, READONLY
 29 .quartus_project_dir 0000005e  00000000  00000000  00087460  2**0
                  CONTENTS, READONLY
 30 .jdi          0000abc5  00000000  00000000  000874be  2**0
                  CONTENTS, READONLY
 31 .sopcinfo     001878b7  00000000  00000000  00092083  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00000000 l    d  .entry	00000000 .entry
00000020 l    d  .exceptions	00000000 .exceptions
00000244 l    d  .text	00000000 .text
00018cbc l    d  .rodata	00000000 .rodata
0001936c l    d  .rwdata	00000000 .rwdata
0001d1a4 l    d  .bss	00000000 .bss
000285d0 l    d  .SDRAM	00000000 .SDRAM
0c000000 l    d  .Flash_flash_data	00000000 .Flash_flash_data
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 C:/Users/rickert/Documents/School/jaar_2/KBS_ESA2_A/NIOS/demo6_bsp//obj/HAL/src/crt0.o
0000027c l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 hello_ucosii.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 sprintf.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
00018dfa l     O .rodata	00000010 zeroes.4240
00018e0a l     O .rodata	00000010 blanks.4239
00000000 l    df *ABS*	00000000 dtoa.c
00002c48 l     F .text	00000200 quorem
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 impure.c
00019394 l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 locale.c
000197d8 l     O .rwdata	00000020 lc_ctype_charset
000197b8 l     O .rwdata	00000020 lc_message_charset
000197f8 l     O .rwdata	00000038 lconv
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 mprec.c
00018e3c l     O .rodata	0000000c p05.2710
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 s_fpclassify.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 vfprintf.c
00018f60 l     O .rodata	00000010 zeroes.4184
00018f70 l     O .rodata	00000010 blanks.4183
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
00008358 l     F .text	00000008 __fp_lock
00008360 l     F .text	00000008 __fp_unlock
00008374 l     F .text	0000019c __sinit.part.1
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00009f14 l     F .text	0000006c udivmodsi4
00000000 l    df *ABS*	00000000 adddf3.c
00000000 l    df *ABS*	00000000 divdf3.c
00000000 l    df *ABS*	00000000 eqdf2.c
00000000 l    df *ABS*	00000000 gedf2.c
00000000 l    df *ABS*	00000000 ledf2.c
00000000 l    df *ABS*	00000000 muldf3.c
00000000 l    df *ABS*	00000000 subdf3.c
00000000 l    df *ABS*	00000000 fixdfsi.c
00000000 l    df *ABS*	00000000 floatsidf.c
00000000 l    df *ABS*	00000000 floatunsidf.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 alt_close.c
0000c640 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
0000c760 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
0000c78c l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
0000c88c l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
0000c980 l     F .text	00000064 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
0000ca64 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_read.c
0000cc5c l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
0001b1fc l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_write.c
0000ceb8 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_env_lock.c
0001b200 l     O .rwdata	00000004 lockid
0001d1ec l     O .bss	00000004 locks
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
0001b204 l     O .rwdata	00000004 lockid
0001d1f4 l     O .bss	00000004 locks
00000000 l    df *ABS*	00000000 os_core.c
0000e8ec l     F .text	00000044 OS_InitMisc
0000e930 l     F .text	00000068 OS_InitRdyList
0000ea90 l     F .text	000000e0 OS_InitTCBList
0000e810 l     F .text	000000dc OS_InitEventList
0000e998 l     F .text	0000007c OS_InitTaskIdle
0000ea14 l     F .text	0000007c OS_InitTaskStat
0000ecf0 l     F .text	00000070 OS_SchedNew
00000000 l    df *ABS*	00000000 os_dbg.c
00000000 l    df *ABS*	00000000 os_flag.c
00010af4 l     F .text	00000110 OS_FlagTaskRdy
0001084c l     F .text	000001c4 OS_FlagBlock
00000000 l    df *ABS*	00000000 os_mem.c
00000000 l    df *ABS*	00000000 os_q.c
00000000 l    df *ABS*	00000000 os_sem.c
00000000 l    df *ABS*	00000000 os_task.c
00000000 l    df *ABS*	00000000 os_time.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
00014f9c l     F .text	00000038 alt_dev_reg
00019de0 l     O .rwdata	0000106c JTAG_UART
0001ae4c l     O .rwdata	00000030 AV_Config
0001ae7c l     O .rwdata	00000030 Audio_Subsystem_Audio
0001aeac l     O .rwdata	0000002c Char_LCD_16x2
0001aed8 l     O .rwdata	0000002c IrDA
0001af04 l     O .rwdata	0000002c Expansion_JP5
0001af30 l     O .rwdata	0000002c Green_LEDs
0001af5c l     O .rwdata	0000002c HEX3_HEX0
0001af88 l     O .rwdata	0000002c HEX7_HEX4
0001afb4 l     O .rwdata	0000002c Pushbuttons
0001afe0 l     O .rwdata	0000002c Red_LEDs
0001b00c l     O .rwdata	0000002c Slider_Switches
0001b038 l     O .rwdata	00000038 PS2_Port
0001b070 l     O .rwdata	00000038 PS2_Port_Dual
0001b0a8 l     O .rwdata	0000002c Serial_Port
0001b0d4 l     O .rwdata	00000034 USB
0001b108 l     O .rwdata	00000048 VGA_Subsystem_VGA_Char_Buffer
0001b150 l     O .rwdata	00000054 VGA_Subsystem_VGA_Pixel_DMA
0001b1a4 l     O .rwdata	0000002c SD_Card
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
00015684 l     F .text	000002a8 altera_avalon_jtag_uart_irq
0001592c l     F .text	00000110 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
00016104 l     F .text	00000078 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 altera_up_avalon_character_lcd.c
00000000 l    df *ABS*	00000000 altera_up_avalon_irda.c
00000000 l    df *ABS*	00000000 altera_up_avalon_parallel_port.c
00000000 l    df *ABS*	00000000 altera_up_avalon_ps2.c
00000000 l    df *ABS*	00000000 altera_up_avalon_rs232.c
00000000 l    df *ABS*	00000000 altera_up_avalon_video_character_buffer_with_dma.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
00017920 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
00017b8c l     F .text	000000c0 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_register.c
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
00017e74 l     F .text	00000050 alt_get_errno
00017ec4 l     F .text	000000cc alt_file_locked
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 os_cpu_a.o
00000040 l       *ABS*	00000000 OSCtxSw_SWITCH_PC
00000000 l    df *ABS*	00000000 os_cpu_c.c
00000014 l       *ABS*	00000000 OSTCBNext_OFFSET
00000032 l       *ABS*	00000000 OSTCBPrio_OFFSET
00000000 l       *ABS*	00000000 OSTCBStkPtr_OFFSET
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
0001d258 g     O .bss	00000004 alt_instruction_exception_handler
0000645c g     F .text	00000074 _mprec_log10
0001b252 g     O .rwdata	00000002 OSTaskNameSize
00006548 g     F .text	0000008c __any_on
000092b8 g     F .text	00000054 _isatty_r
00018e48 g     O .rodata	00000028 __mprec_tinytens
0000cb88 g     F .text	000000d4 alt_main
00000aa0 g     F .text	000000a8 _puts_r
000284d0 g     O .bss	00000100 alt_irq
00016ce0 g     F .text	0000005c alt_up_ps2_disable_read_interrupt
0000930c g     F .text	0000005c _lseek_r
00011358 g     F .text	000000d0 OS_MemInit
0001b288 g       *ABS*	00000000 __flash_rwdata_start
00014f38 g     F .text	00000064 OSTimeSet
00016270 g     F .text	0000003c alt_up_character_lcd_send_cmd
0000b1a8 g     F .text	00000084 .hidden __eqdf2
0000d568 g     F .text	00000610 OSEventPendMulti
000285d0 g       *ABS*	00000000 __alt_heap_start
000184d0 g     F .text	00000020 OSTaskCreateHook
0001d284 g     O .bss	00002000 task1_stk
0001b22a g     O .rwdata	00000002 OSMboxEn
0000dbcc g     F .text	0000007c OSIntEnter
00009048 g     F .text	0000005c __sseek
000086a8 g     F .text	00000010 __sinit
00017668 g     F .text	00000100 alt_up_char_buffer_string
00016b00 g     F .text	00000034 read_CE_bit
0001b23a g     O .rwdata	00000002 OSQEn
00004a30 g     F .text	0000007c _setlocale_r
0001d1a4 g     O .bss	00000004 sem
00008510 g     F .text	00000068 __sfmoreglue
0000d23c g     F .text	000000d0 __malloc_unlock
0001852c g     F .text	0000001c OSTaskStatHook
00016e84 g     F .text	000000a4 alt_up_ps2_read_data_byte_timeout
00017378 g     F .text	00000090 alt_up_rs232_read_fd
0001d1fc g     O .bss	00000001 OSLockNesting
0001b278 g     O .rwdata	00000002 OSDataSize
0001d1fd g     O .bss	00000001 OSRunning
0001759c g     F .text	000000cc alt_up_char_buffer_draw
000054d8 g     F .text	0000015c memmove
00018564 g     F .text	0000001c OSInitHookBegin
0001b270 g     O .rwdata	00000002 OSTmrSize
00008690 g     F .text	00000018 _cleanup
00005634 g     F .text	000000a8 _Balloc
0001d200 g     O .bss	00000004 OSIdleCtr
0000b22c g     F .text	000000e0 .hidden __gtdf2
00018284 g     F .text	00000020 altera_nios2_gen2_irq_init
00018350 g       .text	00000000 OSStartTsk
00000000  w      *UND*	00000000 __errno
000161fc g     F .text	00000074 get_DDRAM_addr
0000f028 g     F .text	000002d4 OS_TCBInit
0001d1a8 g     O .bss	00000004 red_LEDs_dev
00000000 g     F .entry	0000001c __reset
0001b276 g     O .rwdata	00000002 OSTmrWheelTblSize
00000020 g       *ABS*	00000000 __flash_exceptions_start
0001b216 g     O .rwdata	00000002 OSEventSize
0001d204 g     O .bss	00000001 OSPrioHighRdy
00009260 g     F .text	00000058 _fstat_r
000184f0 g     F .text	00000020 OSTaskDelHook
0001d1d8 g     O .bss	00000004 errno
00008fc4 g     F .text	00000008 __seofread
00018330 g       .text	00000000 OSStartHighRdy
0001383c g     F .text	000001ec OSTaskCreateExt
00006e74 g     F .text	00001038 ___svfiprintf_internal_r
00010398 g     F .text	00000068 OSFlagPendGetFlagsRdy
0001b256 g     O .rwdata	00000002 OSTaskStatStkSize
0000f488 g     F .text	00000308 OSFlagAccept
00011a2c g     F .text	000000b8 OSQFlush
00011428 g     F .text	00000140 OSQAccept
0001d1e4 g     O .bss	00000004 alt_argv
000231d0 g       *ABS*	00000000 _gp
00013680 g     F .text	000001bc OSTaskCreate
00013140 g     F .text	00000540 OSTaskChangePrio
0001d1f8 g     O .bss	00000004 alt_heapsem
000004e4 g     F .text	000000f0 task4
0000f2fc g     F .text	0000018c OSDebugInit
00013a28 g     F .text	000003e0 OSTaskDel
00019c60 g     O .rwdata	00000180 alt_fd_list
000252ac g     O .bss	00000370 OSFlagTbl
0001d1ac g     O .bss	00000004 hex3_hex0_dev
0000e5fc g     F .text	000000b4 OS_EventTaskRemove
00017acc g     F .text	00000090 alt_find_dev
000053a0 g     F .text	00000138 memcpy
0001b240 g     O .rwdata	00000002 OSRdyTblSize
0001640c g     F .text	00000050 alt_up_character_lcd_write_fd
00017768 g     F .text	0000005c alt_up_char_buffer_clear
00008368 g     F .text	0000000c _cleanup_r
0000c468 g     F .text	000000d0 .hidden __floatsidf
00017c4c g     F .text	00000078 alt_io_redirect
0000b30c g     F .text	000000e0 .hidden __ltdf2
00018cbc g       *ABS*	00000000 __DTOR_END__
0001698c g     F .text	00000090 alt_up_irda_write_fd
00017304 g     F .text	00000074 alt_up_rs232_read_data
00000b48 g     F .text	00000014 puts
00018874 g     F .text	0000009c alt_exception_cause_generated_bad_addr
0000d30c g     F .text	00000120 OSEventNameGet
0001b224 g     O .rwdata	00000002 OSFlagMax
00006b3c g     F .text	00000074 __fpclassifyd
000063b8 g     F .text	000000a4 __ratio
0000dc48 g     F .text	000000f4 OSIntExit
0001b25e g     O .rwdata	00000002 OSTCBSize
0001d205 g     O .bss	00000001 OSPrioCur
00016788 g     F .text	00000040 alt_up_irda_get_used_space_in_read_FIFO
00015b90 g     F .text	000002b4 altera_avalon_jtag_uart_read
00000000  w      *UND*	00000000 malloc
0000a030 g     F .text	00000008 .hidden __udivsi3
0000c8dc g     F .text	000000a4 isatty
0001b244 g     O .rwdata	00000002 OSStkWidth
00018e98 g     O .rodata	000000c8 __mprec_tens
0001b238 g     O .rwdata	00000002 OSPtrSize
00004aac g     F .text	0000000c __locale_charset
0001b218 g     O .rwdata	00000002 OSEventTblSize
0001672c g     F .text	0000005c alt_up_irda_disable_read_interrupt
000182a4 g       .text	00000000 OSCtxSw
000187e8 g     F .text	0000008c alt_icache_flush
0001d1d4 g     O .bss	00000004 __malloc_top_pad
0001d208 g     O .bss	00000004 OSTCBList
0001d1dc g     O .bss	00000004 alt_fd_list_lock
0001b1d8 g     O .rwdata	00000004 __mb_cur_max
00004adc g     F .text	0000000c _localeconv_r
00005a40 g     F .text	0000003c __i2b
00004570 g     F .text	000004c0 __sfvwrite_r
0002561c g     O .bss	00000c30 OSMemTbl
0001d20c g     O .bss	00000001 OSTickStepState
00006bb0 g     F .text	00000054 _sbrk_r
0001b23c g     O .rwdata	00000002 OSQMax
0002624c g     O .bss	00000800 OSTaskStatStk
00010f88 g     F .text	000000f8 OSMemNameGet
0001f284 g     O .bss	00002000 task4_stk
0001b21c g     O .rwdata	00000002 OSFlagEn
00009368 g     F .text	0000005c _read_r
0001b262 g     O .rwdata	00000002 OSTimeTickHookEn
00011f4c g     F .text	00000168 OSQPost
00010c04 g     F .text	000000a0 OS_FlagUnlink
0001b1f4 g     O .rwdata	00000004 alt_max_fd
00017280 g     F .text	00000044 alt_up_rs232_check_parity
0000ebc0 g     F .text	00000064 OS_MemCopy
0000ec24 g     F .text	000000cc OS_Sched
0000915c g     F .text	000000f0 _fclose_r
00010e98 g     F .text	000000f0 OSMemGet
00014108 g     F .text	000001c0 OSTaskNameSet
00016b34 g     F .text	00000030 read_num_bytes_available
00008328 g     F .text	00000030 fflush
0001d1d0 g     O .bss	00000004 __malloc_max_sbrked_mem
0001d210 g     O .bss	00000004 OSCtxSwCtr
00018548 g     F .text	0000001c OSTimeTickHook
00017cc4 g     F .text	000001b0 alt_irq_register
0001b226 g     O .rwdata	00000002 OSFlagNameSize
00016a9c g     F .text	00000034 read_RI_bit
0000e6b0 g     F .text	000000fc OS_EventTaskRemoveMulti
0000a040 g     F .text	0000089c .hidden __adddf3
0000e4b0 g     F .text	0000014c OS_EventTaskWaitMulti
00006160 g     F .text	0000011c __b2d
0001b23e g     O .rwdata	00000002 OSQSize
00009984 g     F .text	00000590 .hidden __umoddi3
0000cab4 g     F .text	000000d4 lseek
00012a50 g     F .text	00000268 OSSemPend
0001b1d0 g     O .rwdata	00000004 _global_impure_ptr
000065d4 g     F .text	00000568 _realloc_r
0001b228 g     O .rwdata	00000002 OSLowestPrio
000285d0 g       *ABS*	00000000 __bss_end
000185b8 g     F .text	00000020 OSTCBInitHook
0001b26e g     O .rwdata	00000002 OSTmrCfgTicksPerSec
00018180 g     F .text	00000104 alt_tick
000093c4 g     F .text	000005c0 .hidden __udivdi3
0001b210 g     O .rwdata	00000002 OSEventEn
00018e70 g     O .rodata	00000028 __mprec_bigtens
00005824 g     F .text	00000104 __s2b
0001b26a g     O .rwdata	00000002 OSTmrCfgNameSize
0000c538 g     F .text	000000a4 .hidden __floatunsidf
00005f08 g     F .text	00000060 __mcmp
0c000000 g       *ABS*	00000000 __alt_mem_Flash_flash_data
00016b98 g     F .text	0000002c read_data_byte
000086c8 g     F .text	00000018 __fp_lock_all
00010a10 g     F .text	000000e4 OS_FlagInit
000180e8 g     F .text	00000098 alt_alarm_stop
00016ad0 g     F .text	00000030 read_RE_bit
0001b24c g     O .rwdata	00000002 OSTaskIdleStkSize
0001d24c g     O .bss	00000004 alt_irq_active
00012638 g     F .text	000000b0 OSSemAccept
0000095c g     F .text	00000090 VGA_text
00011198 g     F .text	000000d8 OSMemPut
00010ca4 g     F .text	000001f4 OSMemCreate
0001d214 g     O .bss	00000004 OSIdleCtrMax
000167c8 g     F .text	0000003c alt_up_irda_get_available_space_in_write_FIFO
000000fc g     F .exceptions	000000d4 alt_irq_handler
00019c38 g     O .rwdata	00000028 alt_dev_null
0001b260 g     O .rwdata	00000002 OSTicksPerSec
000166a0 g     F .text	00000034 alt_up_character_lcd_cursor_blink_on
00016a5c g     F .text	00000040 alt_up_parallel_port_open_dev
000182a4 g       .text	00000000 OSIntCtxSw
00016d3c g     F .text	00000074 alt_up_ps2_write_data_byte
00017904 g     F .text	0000001c alt_dcache_flush_all
00005928 g     F .text	00000068 __hi0bits
0000c3e0 g     F .text	00000088 .hidden __fixdfsi
0001d218 g     O .bss	00000004 OSTCBFreeList
0001b288 g       *ABS*	00000000 __ram_rwdata_end
00012cb8 g     F .text	0000016c OSSemPendAbort
0001b1ec g     O .rwdata	00000008 alt_dev_list
0000cf08 g     F .text	000000f8 write
0001b264 g     O .rwdata	00000002 OSVersionNbr
0001936c g       *ABS*	00000000 __ram_rodata_end
0000c7dc g     F .text	000000b0 fstat
00017408 g     F .text	00000094 alt_up_rs232_write_fd
00000000 g       *ABS*	00000000 __alt_mem_SDRAM
0000b30c g     F .text	000000e0 .hidden __ledf2
0001b20c g     O .rwdata	00000004 OSEndiannessTest
00005c78 g     F .text	00000140 __pow5mult
0001d1c8 g     O .bss	00000004 __nlocale_changed
0000a038 g     F .text	00000008 .hidden __umodsi3
0001b21e g     O .rwdata	00000002 OSFlagGrpSize
000285d0 g       *ABS*	00000000 end
00017078 g     F .text	00000098 alt_up_ps2_write_fd
00016804 g     F .text	00000044 alt_up_irda_check_parity
000174dc g     F .text	00000080 alt_up_char_buffer_init
00015544 g     F .text	00000140 altera_avalon_jtag_uart_init
0000ee84 g     F .text	000000dc OS_TaskStat
000001d0 g     F .exceptions	00000074 alt_instruction_exception_entry
00018cbc g       *ABS*	00000000 __CTOR_LIST__
04000000 g       *ABS*	00000000 __alt_stack_pointer
0001617c g     F .text	00000080 alt_avalon_timer_sc_init
0000c5dc g     F .text	00000064 .hidden __clzsi2
00015e44 g     F .text	000002c0 altera_avalon_jtag_uart_write
000086b8 g     F .text	00000004 __sfp_lock_acquire
000052b8 g     F .text	000000e8 memchr
0000eb70 g     F .text	00000050 OS_MemClr
00016320 g     F .text	00000078 alt_up_character_lcd_write
00018374 g     F .text	0000015c OSTaskStkInit
00000280 g     F .text	000000c0 task1
00000b5c g     F .text	00000058 _sprintf_r
0000881c g     F .text	000002f0 _free_r
00004ab8 g     F .text	00000010 __locale_mb_cur_max
0000e20c g     F .text	00000198 OS_EventTaskRdy
00018aec g     F .text	00000194 __call_exitprocs
0001d21c g     O .bss	00000001 OSCPUUsage
0001d1c4 g     O .bss	00000004 __mlocale_changed
00021284 g     O .bss	00000028 text_bottom_row
0001b1dc g     O .rwdata	00000004 __malloc_sbrk_base
00000244 g     F .text	0000003c _start
00000340 g     F .text	0000011c task2
0001d250 g     O .bss	00000004 _alt_tick_rate
00011ae4 g     F .text	000002fc OSQPend
00014a34 g     F .text	00000148 OSTimeDly
00005db8 g     F .text	00000150 __lshift
0001d254 g     O .bss	00000004 _alt_nticks
0000ccac g     F .text	000000fc read
00015008 g     F .text	000003d8 alt_sys_init
00016558 g     F .text	00000088 alt_up_character_lcd_shift_display
00006ca8 g     F .text	000001cc __ssprint_r
000189d8 g     F .text	00000114 __register_exitproc
0001d21d g     O .bss	00000001 OSTaskCtr
00016f98 g     F .text	00000054 alt_up_ps2_clear_fifo
00017244 g     F .text	0000003c alt_up_rs232_get_available_space_in_write_FIFO
000009ec g     F .text	000000b4 VGA_box
00014b7c g     F .text	00000168 OSTimeDlyHMSM
00005a7c g     F .text	000001fc __multiply
000165e0 g     F .text	0000008c alt_up_character_lcd_erase_pos
00015a3c g     F .text	00000068 altera_avalon_jtag_uart_close
0001936c g       *ABS*	00000000 __ram_rwdata_start
00018cbc g       *ABS*	00000000 __ram_rodata_start
0001d25c g     O .bss	00000028 __malloc_current_mallinfo
0001b212 g     O .rwdata	00000002 OSEventMax
0000627c g     F .text	0000013c __d2b
00012e24 g     F .text	00000110 OSSemPost
0000ddc4 g     F .text	000000d8 OSSchedUnlock
000153e0 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
000186ec g     F .text	000000fc alt_get_fd
0001d220 g     O .bss	00000004 OSMemFreeList
0000df08 g     F .text	000000ac OSStatInit
00010788 g     F .text	000000c4 OSFlagQuery
0001b248 g     O .rwdata	00000002 OSTaskCreateExtEn
00009108 g     F .text	00000054 _close_r
0001895c g     F .text	0000007c memcmp
0000e1f0 g     F .text	0000001c OS_Dummy
000154a0 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
000285d0 g       *ABS*	00000000 __alt_stack_base
000154f0 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
000166d4 g     F .text	00000058 alt_up_irda_enable_read_interrupt
00007eac g     F .text	00000154 __swsetup_r
00026a4c g     O .bss	000001e0 OSQTbl
0000a8dc g     F .text	000008cc .hidden __divdf3
00008578 g     F .text	00000118 __sfp
000064d0 g     F .text	00000078 __copybits
00019830 g     O .rwdata	00000408 __malloc_av_
000086c4 g     F .text	00000004 __sinit_lock_release
0001d224 g     O .bss	00000004 OSTCBHighRdy
0000b3ec g     F .text	00000724 .hidden __muldf3
00008f70 g     F .text	00000054 __sread
0001d228 g     O .bss	00000004 OSQFreeList
000171a8 g     F .text	0000005c alt_up_rs232_disable_read_interrupt
000185d8 g     F .text	00000114 alt_find_file
00017970 g     F .text	000000a4 alt_dev_llist_insert
0000d11c g     F .text	00000120 __malloc_lock
0000ce08 g     F .text	000000b0 sbrk
00000cb8 g     F .text	00001f90 ___svfprintf_internal_r
0000d42c g     F .text	0000013c OSEventNameSet
000082cc g     F .text	0000005c _fflush_r
00008000 g     F .text	000000c4 _calloc_r
0001d22c g     O .bss	00000001 OSRdyGrp
0001d1a4 g       *ABS*	00000000 __bss_start
00008e4c g     F .text	00000124 memset
000005d4 g     F .text	00000388 main
0001d1e8 g     O .bss	00000004 alt_envp
0001d1cc g     O .bss	00000004 __malloc_max_total_mem
0001755c g     F .text	00000040 alt_up_char_buffer_open_dev
00015440 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
0001909c g     O .rodata	00000100 OSUnMapTbl
0001b242 g     O .rwdata	00000002 OSSemEn
000164d0 g     F .text	00000088 alt_up_character_lcd_shift_cursor
00010400 g     F .text	00000388 OSFlagPost
000090a4 g     F .text	00000008 __sclose
04000000 g       *ABS*	00000000 __alt_heap_limit
0000924c g     F .text	00000014 fclose
0000e3a4 g     F .text	0000010c OS_EventTaskWait
000212ac g     O .bss	00002000 task2_stk
00016f28 g     F .text	00000070 alt_up_ps2_read_data_byte
0001d1b0 g     O .bss	00000004 hex7_hex4_dev
0000ef60 g     F .text	000000c8 OS_TaskStatStkChk
00013e08 g     F .text	00000158 OSTaskDelReq
00002e48 g     F .text	00001728 _dtoa_r
00004b10 g     F .text	000007a8 _malloc_r
0001b1f8 g     O .rwdata	00000004 alt_errno
0000de9c g     F .text	0000006c OSStart
000232ac g     O .bss	00002000 task3_stk
0000d0c0 g     F .text	0000005c __env_unlock
00008b0c g     F .text	000000c4 _fwalk
000142c8 g     F .text	000001f8 OSTaskResume
00011270 g     F .text	000000e8 OSMemQuery
0001b254 g     O .rwdata	00000002 OSTaskStatEn
00016848 g     F .text	00000040 alt_up_irda_write_data
0001b22e g     O .rwdata	00000002 OSMemMax
000120b4 g     F .text	00000170 OSQPostFront
00017110 g     F .text	00000040 alt_up_ps2_open_dev
00009f80 g     F .text	00000054 .hidden __divsi3
0001d22d g     O .bss	00000003 OSRdyTbl
0001b208 g     O .rwdata	00000002 OSDebugEn
000162e0 g     F .text	00000040 alt_up_character_lcd_open_dev
000086f8 g     F .text	00000124 _malloc_trim_r
00016c88 g     F .text	00000058 alt_up_ps2_enable_read_interrupt
00018cbc g       *ABS*	00000000 __CTOR_END__
0001b220 g     O .rwdata	00000002 OSFlagNodeSize
0001b268 g     O .rwdata	00000002 OSTmrCfgMax
000162ac g     F .text	00000034 alt_up_character_lcd_init
00006c04 g     F .text	000000a4 strcmp
00011568 g     F .text	000001fc OSQCreate
00013f60 g     F .text	000001a8 OSTaskNameGet
00018cbc g       *ABS*	00000000 __flash_rodata_start
00012224 g     F .text	0000020c OSQPostOpt
0000dfb4 g     F .text	0000021c OSTimeTick
0001b250 g     O .rwdata	00000002 OSTaskMax
00018cbc g       *ABS*	00000000 __DTOR_LIST__
000126e8 g     F .text	00000100 OSSemCreate
0001b274 g     O .rwdata	00000002 OSTmrWheelSize
0001749c g     F .text	00000040 alt_up_rs232_open_dev
0000b1a8 g     F .text	00000084 .hidden __nedf2
0001b24a g     O .rwdata	00000002 OSTaskDelEn
00012f34 g     F .text	00000110 OSSemQuery
00011764 g     F .text	000002c8 OSQDel
00011de0 g     F .text	0000016c OSQPendAbort
00014fd4 g     F .text	00000034 alt_irq_init
0000cda8 g     F .text	00000060 alt_release_fd
00016b64 g     F .text	00000034 read_data_valid
00000bb4 g     F .text	0000006c sprintf
0001666c g     F .text	00000034 alt_up_character_lcd_cursor_off
00018f80 g     O .rodata	00000100 .hidden __clz_tab
0001d1c0 g     O .bss	00000004 _PathLocale
00016e20 g     F .text	00000064 alt_up_ps2_write_data_byte_with_ack
00018910 g     F .text	00000014 atexit
000090ac g     F .text	0000005c _write_r
0000dd3c g     F .text	00000088 OSSchedLock
00004ae8 g     F .text	0000001c setlocale
0000f790 g     F .text	00000128 OSFlagCreate
0001b1d4 g     O .rwdata	00000004 _impure_ptr
0001d1e0 g     O .bss	00000004 alt_argc
000080c4 g     F .text	00000208 __sflush_r
00017a70 g     F .text	0000005c _do_dtors
00004ad4 g     F .text	00000008 __locale_cjk_lang
0001b21a g     O .rwdata	00000002 OSEventMultiEn
0000f8b8 g     F .text	00000270 OSFlagDel
0001d230 g     O .bss	00000004 OSEventFreeList
00000020 g       .exceptions	00000000 alt_irq_entry
00006100 g     F .text	00000060 __ulp
0000fda8 g     F .text	000005f0 OSFlagPend
0001b266 g     O .rwdata	00000002 OSTmrEn
000086e0 g     F .text	00000018 __fp_unlock_all
0001b1e4 g     O .rwdata	00000008 alt_fs_list
0000ed60 g     F .text	00000074 OS_StrCopy
00017150 g     F .text	00000058 alt_up_rs232_enable_read_interrupt
000172c4 g     F .text	00000040 alt_up_rs232_write_data
0001b230 g     O .rwdata	00000002 OSMemNameSize
00018580 g     F .text	0000001c OSInitHookEnd
00000020 g       *ABS*	00000000 __ram_exceptions_start
0001b25c g     O .rwdata	00000002 OSTCBPrioTblMax
00004b04 g     F .text	0000000c localeconv
0001b258 g     O .rwdata	00000002 OSTaskStatStkChkEn
0001d1b4 g     O .bss	00000004 lcd_dev
0001b22c g     O .rwdata	00000002 OSMemEn
0001b236 g     O .rwdata	00000002 OSMutexEn
0001b288 g       *ABS*	00000000 _edata
000285d0 g       *ABS*	00000000 _end
0001d234 g     O .bss	00000001 OSIntNesting
00000244 g       *ABS*	00000000 __ram_exceptions_end
00015aa4 g     F .text	000000ec altera_avalon_jtag_uart_ioctl
00014ce4 g     F .text	000001f0 OSTimeDlyResume
0000fc58 g     F .text	00000150 OSFlagNameSet
000144c0 g     F .text	000001c8 OSTaskStkChk
0001b232 g     O .rwdata	00000002 OSMemSize
00008fcc g     F .text	0000007c __swrite
0001b1e0 g     O .rwdata	00000004 __malloc_trim_threshold
0001936c g     O .rwdata	00000028 text_top_row
00004ac8 g     F .text	0000000c __locale_msgcharset
0001d238 g     O .bss	00000004 OSTCBCur
00018924 g     F .text	00000038 exit
00016888 g     F .text	00000074 alt_up_irda_read_data
0001b234 g     O .rwdata	00000002 OSMemTblSize
00008bd0 g     F .text	000000c4 _fwalk_reent
00016bc4 g     F .text	000000c4 alt_up_ps2_init
00005f68 g     F .text	00000198 __mdiff
00009fd4 g     F .text	0000005c .hidden __modsi3
04000000 g       *ABS*	00000000 __alt_data_end
00000020 g     F .exceptions	00000000 alt_exception
000086bc g     F .text	00000004 __sfp_lock_release
0000db78 g     F .text	00000054 OSInit
0001489c g     F .text	0000012c OSTaskQuery
00016398 g     F .text	00000074 alt_up_character_lcd_string
0001258c g     F .text	000000ac OS_QInit
0000edd4 g     F .text	00000054 OS_StrLen
00016a1c g     F .text	00000040 alt_up_irda_open_dev
00011080 g     F .text	00000118 OSMemNameSet
0001b24e g     O .rwdata	00000002 OSTaskProfileEn
0001d23c g     O .bss	00000004 OSTime
00026c2c g     O .bss	00000800 OSTaskIdleStk
00018c80 g     F .text	0000003c _exit
000177c4 g     F .text	00000140 alt_alarm_start
0000fb28 g     F .text	00000130 OSFlagNameGet
00014ed4 g     F .text	00000064 OSTimeGet
0001d1b8 g     O .bss	00000004 slider_switches_dev
00008c94 g     F .text	000001b8 __smakebuf_r
00016db0 g     F .text	00000070 alt_up_ps2_wait_for_ack
00000c20 g     F .text	00000098 strlen
00018510 g     F .text	0000001c OSTaskSwHook
00017f90 g     F .text	00000158 open
0002742c g     O .bss	00000b40 OSEventTbl
0000b22c g     F .text	000000e0 .hidden __gedf2
00027f6c g     O .bss	00000510 OSTCBTbl
00013044 g     F .text	000000fc OSSemSet
0001d1bc g     O .bss	00000004 green_LEDs_dev
00017b5c g     F .text	00000030 alt_icache_flush_all
0001645c g     F .text	00000074 alt_up_character_lcd_set_cursor_pos
0001b27c g     O .rwdata	00000004 alt_priority_mask
000127e8 g     F .text	00000268 OSSemDel
0001d240 g     O .bss	00000004 OSFlagFreeList
0000045c g     F .text	00000088 task3
0001b214 g     O .rwdata	00000002 OSEventNameSize
0001d244 g     O .bss	00000001 OSStatRdy
0002847c g     O .bss	00000054 OSTCBPrioTbl
0000d000 g     F .text	000000c0 __env_lock
00016fec g     F .text	0000008c alt_up_ps2_read_fd
0001b25a g     O .rwdata	00000002 OSTaskSwHookEn
0000bb10 g     F .text	000008d0 .hidden __subdf3
000168fc g     F .text	00000090 alt_up_irda_read_fd
00005990 g     F .text	000000b0 __lo0bits
0001b280 g     O .rwdata	00000008 alt_alarm_list
0001b222 g     O .rwdata	00000002 OSFlagWidth
00017a14 g     F .text	0000005c _do_ctors
00017204 g     F .text	00000040 alt_up_rs232_get_used_space_in_read_FIFO
0000c690 g     F .text	000000d0 close
0001d1f0 g     O .bss	00000004 alt_envsem
0001d248 g     O .bss	00000004 OSIdleCtrRun
0000e1d0 g     F .text	00000020 OSVersion
0001b26c g     O .rwdata	00000002 OSTmrCfgWheelSize
0000c9e4 g     F .text	00000080 alt_load
000149c8 g     F .text	0000006c OS_TaskStkClr
0001b246 g     O .rwdata	00000002 OSTaskCreateEn
0000e7ac g     F .text	00000064 OS_EventWaitListInit
0001859c g     F .text	0000001c OSTaskIdleHook
00000000  w      *UND*	00000000 free
000086c0 g     F .text	00000004 __sinit_lock_acquire
00005704 g     F .text	00000120 __multadd
00014688 g     F .text	00000214 OSTaskSuspend
000056dc g     F .text	00000028 _Bfree
0000ee28 g     F .text	0000005c OS_TaskIdle
0001b272 g     O .rwdata	00000002 OSTmrTblSize
00012430 g     F .text	0000015c OSQQuery



Disassembly of section .entry:

00000000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && (!defined(ALT_SIM_OPTIMIZE) || defined(NIOS2_ECC_PRESENT))
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
   0:	00840014 	movui	r2,4096
#endif

0:
    initi r2
   4:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
   8:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
   c:	00bffd16 	blt	zero,r2,4 <__alt_mem_Flash_flash_data+0xf4000004>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
  10:	00400034 	movhi	at,0
    ori r1, r1, %lo(_start)
  14:	08409114 	ori	at,at,580
    jmp r1
  18:	0800683a 	jmp	at
  1c:	00000000 	call	0 <__reset>

Disassembly of section .exceptions:

00000020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
  20:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
  24:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
  28:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
  2c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
  30:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
  34:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
  38:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
  3c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
  40:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
  44:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
  48:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
  4c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
  50:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
  54:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
  58:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
  5c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
  60:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
  64:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
  68:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
  6c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  70:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
  74:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
  78:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
  7c:	10000326 	beq	r2,zero,8c <OSCtxSw_SWITCH_PC+0x4c>
        beq   r4, zero, .Lnot_irq
  80:	20000226 	beq	r4,zero,8c <OSCtxSw_SWITCH_PC+0x4c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
  84:	00000fc0 	call	fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
  88:	00000706 	br	a8 <OSCtxSw_SWITCH_PC+0x68>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
  8c:	df401215 	stw	ea,72(sp)
        ldhu.n  r2, 0(r4)
        ldhu.n  r3, 2(r4)
        slli.n  r3, r3, 16
        or.n    r2, r2, r3 /* Instruction that caused exception */
#else
        ldw   r2, -4(ea)   /* Instruction that caused exception */
  90:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
  94:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
  98:	00001d00 	call	1d0 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
  9c:	1000021e 	bne	r2,zero,a8 <OSCtxSw_SWITCH_PC+0x68>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
  a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
  a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
  ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
  b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
  b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
  b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
  bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
  c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
  c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
  c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
  cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
  d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
  d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
  d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
  dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
  e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
  e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
  e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
  ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
  f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
  f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
  f8:	ef80083a 	eret

000000fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
  fc:	defff904 	addi	sp,sp,-28
 100:	dfc00615 	stw	ra,24(sp)
 104:	df000515 	stw	fp,20(sp)
 108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
 10c:	000dbcc0 	call	dbcc <OSIntEnter>
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 110:	0005313a 	rdctl	r2,ipending
 114:	e0bffe15 	stw	r2,-8(fp)

  return active;
 118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 11c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
 120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 124:	00800044 	movi	r2,1
 128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 12c:	e0fffb17 	ldw	r3,-20(fp)
 130:	e0bffc17 	ldw	r2,-16(fp)
 134:	1884703a 	and	r2,r3,r2
 138:	10001526 	beq	r2,zero,190 <alt_irq_handler+0x94>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
 13c:	008000f4 	movhi	r2,3
 140:	10a13404 	addi	r2,r2,-31536
 144:	e0fffd17 	ldw	r3,-12(fp)
 148:	180690fa 	slli	r3,r3,3
 14c:	10c5883a 	add	r2,r2,r3
 150:	10c00017 	ldw	r3,0(r2)
 154:	008000f4 	movhi	r2,3
 158:	10a13404 	addi	r2,r2,-31536
 15c:	e13ffd17 	ldw	r4,-12(fp)
 160:	200890fa 	slli	r4,r4,3
 164:	21000104 	addi	r4,r4,4
 168:	1105883a 	add	r2,r2,r4
 16c:	10800017 	ldw	r2,0(r2)
 170:	1009883a 	mov	r4,r2
 174:	e17ffd17 	ldw	r5,-12(fp)
 178:	183ee83a 	callr	r3
#endif
        break;
 17c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 180:	0005313a 	rdctl	r2,ipending
 184:	e0bfff15 	stw	r2,-4(fp)

  return active;
 188:	e0bfff17 	ldw	r2,-4(fp)
 18c:	00000706 	br	1ac <alt_irq_handler+0xb0>
      }
      mask <<= 1;
 190:	e0bffc17 	ldw	r2,-16(fp)
 194:	1085883a 	add	r2,r2,r2
 198:	e0bffc15 	stw	r2,-16(fp)
      i++;
 19c:	e0bffd17 	ldw	r2,-12(fp)
 1a0:	10800044 	addi	r2,r2,1
 1a4:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
 1a8:	003fe006 	br	12c <__alt_mem_Flash_flash_data+0xf400012c>

    active = alt_irq_pending ();
 1ac:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
 1b0:	e0bffb17 	ldw	r2,-20(fp)
 1b4:	103fda1e 	bne	r2,zero,120 <__alt_mem_Flash_flash_data+0xf4000120>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
 1b8:	000dc480 	call	dc48 <OSIntExit>
}
 1bc:	e037883a 	mov	sp,fp
 1c0:	dfc00117 	ldw	ra,4(sp)
 1c4:	df000017 	ldw	fp,0(sp)
 1c8:	dec00204 	addi	sp,sp,8
 1cc:	f800283a 	ret

000001d0 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
 1d0:	defffb04 	addi	sp,sp,-20
 1d4:	dfc00415 	stw	ra,16(sp)
 1d8:	df000315 	stw	fp,12(sp)
 1dc:	df000304 	addi	fp,sp,12
 1e0:	e13fff15 	stw	r4,-4(fp)
 * NIOS2_EXCEPTION_CAUSE_NOT_PRESENT. Your handling routine should
 * check the validity of the cause argument before proceeding.
 */
#ifdef NIOS2_HAS_EXTRA_EXCEPTION_INFO
  /* Get exception cause & "badaddr" */
  NIOS2_READ_EXCEPTION(cause);
 1e4:	000531fa 	rdctl	r2,exception
 1e8:	e0bffd15 	stw	r2,-12(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
 1ec:	e0bffd17 	ldw	r2,-12(fp)
 1f0:	10801f0c 	andi	r2,r2,124
 1f4:	1004d0ba 	srli	r2,r2,2
 1f8:	e0bffd15 	stw	r2,-12(fp)
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
 1fc:	0005333a 	rdctl	r2,badaddr
 200:	e0bffe15 	stw	r2,-8(fp)
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
  badaddr = 0;
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
 204:	d0a82217 	ldw	r2,-24440(gp)
 208:	10000726 	beq	r2,zero,228 <alt_instruction_exception_entry+0x58>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
 20c:	d0a82217 	ldw	r2,-24440(gp)
 210:	e0fffd17 	ldw	r3,-12(fp)
 214:	1809883a 	mov	r4,r3
 218:	e17fff17 	ldw	r5,-4(fp)
 21c:	e1bffe17 	ldw	r6,-8(fp)
 220:	103ee83a 	callr	r2
 224:	00000206 	br	230 <alt_instruction_exception_entry+0x60>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
 228:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
 22c:	0005883a 	mov	r2,zero
}
 230:	e037883a 	mov	sp,fp
 234:	dfc00117 	ldw	ra,4(sp)
 238:	df000017 	ldw	fp,0(sp)
 23c:	dec00204 	addi	sp,sp,8
 240:	f800283a 	ret

Disassembly of section .text:

00000244 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
     244:	06c10034 	movhi	sp,1024
    ori sp, sp, %lo(__alt_stack_pointer)
     248:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
     24c:	068000b4 	movhi	gp,2
    ori gp, gp, %lo(_gp)
     250:	d68c7414 	ori	gp,gp,12752
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
     254:	00800074 	movhi	r2,1
    ori r2, r2, %lo(__bss_start)
     258:	10b46914 	ori	r2,r2,53668

    movhi r3, %hi(__bss_end)
     25c:	00c000b4 	movhi	r3,2
    ori r3, r3, %lo(__bss_end)
     260:	18e17414 	ori	r3,r3,34256

    beq r2, r3, 1f
     264:	10c00326 	beq	r2,r3,274 <_start+0x30>

0:
    stw zero, (r2)
     268:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
     26c:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
     270:	10fffd36 	bltu	r2,r3,268 <__alt_mem_Flash_flash_data+0xf4000268>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
     274:	000c9e40 	call	c9e4 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
     278:	000cb880 	call	cb88 <alt_main>

0000027c <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
     27c:	003fff06 	br	27c <__alt_mem_Flash_flash_data+0xf400027c>

00000280 <task1>:
/* create a message to be displayed on the VGA and LCD displays */
char text_top_row[40] = "HOI";
char text_bottom_row[40];


void task1(void* pdata) {
     280:	defffa04 	addi	sp,sp,-24
     284:	dfc00515 	stw	ra,20(sp)
     288:	df000415 	stw	fp,16(sp)
     28c:	df000404 	addi	fp,sp,16
     290:	e13fff15 	stw	r4,-4(fp)
	int count = 0;
     294:	e03ffc15 	stw	zero,-16(fp)

	while (1) {
		ALT_SEM_PEND(sem, 0);
     298:	d0a7f517 	ldw	r2,-24620(gp)
     29c:	e0bffd15 	stw	r2,-12(fp)
     2a0:	e03ffe0d 	sth	zero,-8(fp)

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sem_pend (OS_EVENT* sem, 
                  INT16U timeout)
{
  INT8U err;
  OSSemPend (sem, timeout, &err);
     2a4:	e0fffe0b 	ldhu	r3,-8(fp)
     2a8:	e0bffe84 	addi	r2,fp,-6
     2ac:	e13ffd17 	ldw	r4,-12(fp)
     2b0:	180b883a 	mov	r5,r3
     2b4:	100d883a 	mov	r6,r2
     2b8:	0012a500 	call	12a50 <OSSemPend>

		sprintf(text_bottom_row, "%d", count++);
     2bc:	e0bffc17 	ldw	r2,-16(fp)
     2c0:	10c00044 	addi	r3,r2,1
     2c4:	e0fffc15 	stw	r3,-16(fp)
     2c8:	010000b4 	movhi	r4,2
     2cc:	2104a104 	addi	r4,r4,4740
     2d0:	014000b4 	movhi	r5,2
     2d4:	29632f04 	addi	r5,r5,-29508
     2d8:	100d883a 	mov	r6,r2
     2dc:	0000bb40 	call	bb4 <sprintf>

		alt_up_character_lcd_set_cursor_pos(lcd_dev, 0, 1); // set LCD cursor location to bottom row
     2e0:	d0a7f917 	ldw	r2,-24604(gp)
     2e4:	1009883a 	mov	r4,r2
     2e8:	000b883a 	mov	r5,zero
     2ec:	01800044 	movi	r6,1
     2f0:	001645c0 	call	1645c <alt_up_character_lcd_set_cursor_pos>
		alt_up_character_lcd_string(lcd_dev, text_bottom_row);
     2f4:	d0a7f917 	ldw	r2,-24604(gp)
     2f8:	1009883a 	mov	r4,r2
     2fc:	014000b4 	movhi	r5,2
     300:	2944a104 	addi	r5,r5,4740
     304:	00163980 	call	16398 <alt_up_character_lcd_string>

		OSTimeDlyHMSM(0, 0, 0, 500);
     308:	0009883a 	mov	r4,zero
     30c:	000b883a 	mov	r5,zero
     310:	000d883a 	mov	r6,zero
     314:	01c07d04 	movi	r7,500
     318:	0014b7c0 	call	14b7c <OSTimeDlyHMSM>
		ALT_SEM_POST(sem);
     31c:	d0a7f517 	ldw	r2,-24620(gp)
     320:	1009883a 	mov	r4,r2
     324:	0012e240 	call	12e24 <OSSemPost>

		OSTimeDlyHMSM(0, 0, 1, 0);
     328:	0009883a 	mov	r4,zero
     32c:	000b883a 	mov	r5,zero
     330:	01800044 	movi	r6,1
     334:	000f883a 	mov	r7,zero
     338:	0014b7c0 	call	14b7c <OSTimeDlyHMSM>
	}
     33c:	003fd606 	br	298 <__alt_mem_Flash_flash_data+0xf4000298>

00000340 <task2>:
}


void task2(void* pdata)
{
     340:	defffa04 	addi	sp,sp,-24
     344:	dfc00515 	stw	ra,20(sp)
     348:	df000415 	stw	fp,16(sp)
     34c:	df000404 	addi	fp,sp,16
     350:	e13fff15 	stw	r4,-4(fp)
	int toggle = 0;
     354:	e03ffc15 	stw	zero,-16(fp)
	while (1)
	{
		ALT_SEM_PEND(sem, 0);
     358:	d0a7f517 	ldw	r2,-24620(gp)
     35c:	e0bffd15 	stw	r2,-12(fp)
     360:	e03ffe0d 	sth	zero,-8(fp)
     364:	e0fffe0b 	ldhu	r3,-8(fp)
     368:	e0bffe84 	addi	r2,fp,-6
     36c:	e13ffd17 	ldw	r4,-12(fp)
     370:	180b883a 	mov	r5,r3
     374:	100d883a 	mov	r6,r2
     378:	0012a500 	call	12a50 <OSSemPend>

		if (toggle == 0)
     37c:	e0bffc17 	ldw	r2,-16(fp)
     380:	1000101e 	bne	r2,zero,3c4 <task2+0x84>
		{
			strcpy(text_bottom_row, "Task2");
     384:	008000b4 	movhi	r2,2
     388:	1084a104 	addi	r2,r2,4740
     38c:	00c01504 	movi	r3,84
     390:	10c00005 	stb	r3,0(r2)
     394:	00c01844 	movi	r3,97
     398:	10c00045 	stb	r3,1(r2)
     39c:	00c01cc4 	movi	r3,115
     3a0:	10c00085 	stb	r3,2(r2)
     3a4:	00c01ac4 	movi	r3,107
     3a8:	10c000c5 	stb	r3,3(r2)
     3ac:	00c00c84 	movi	r3,50
     3b0:	10c00105 	stb	r3,4(r2)
     3b4:	10000145 	stb	zero,5(r2)
			toggle = 1;
     3b8:	00800044 	movi	r2,1
     3bc:	e0bffc15 	stw	r2,-16(fp)
     3c0:	00000e06 	br	3fc <task2+0xbc>
		}
		else
		{
			strcpy(text_bottom_row, "     ");
     3c4:	008000b4 	movhi	r2,2
     3c8:	1084a104 	addi	r2,r2,4740
     3cc:	00c00804 	movi	r3,32
     3d0:	10c00005 	stb	r3,0(r2)
     3d4:	00c00804 	movi	r3,32
     3d8:	10c00045 	stb	r3,1(r2)
     3dc:	00c00804 	movi	r3,32
     3e0:	10c00085 	stb	r3,2(r2)
     3e4:	00c00804 	movi	r3,32
     3e8:	10c000c5 	stb	r3,3(r2)
     3ec:	00c00804 	movi	r3,32
     3f0:	10c00105 	stb	r3,4(r2)
     3f4:	10000145 	stb	zero,5(r2)
			toggle = 0;
     3f8:	e03ffc15 	stw	zero,-16(fp)
		}

		alt_up_character_lcd_set_cursor_pos(lcd_dev, 5, 1); // set LCD cursor location to bottom row
     3fc:	d0a7f917 	ldw	r2,-24604(gp)
     400:	1009883a 	mov	r4,r2
     404:	01400144 	movi	r5,5
     408:	01800044 	movi	r6,1
     40c:	001645c0 	call	1645c <alt_up_character_lcd_set_cursor_pos>
		alt_up_character_lcd_string(lcd_dev, text_bottom_row);
     410:	d0a7f917 	ldw	r2,-24604(gp)
     414:	1009883a 	mov	r4,r2
     418:	014000b4 	movhi	r5,2
     41c:	2944a104 	addi	r5,r5,4740
     420:	00163980 	call	16398 <alt_up_character_lcd_string>

		OSTimeDlyHMSM(0, 0, 0, 500);
     424:	0009883a 	mov	r4,zero
     428:	000b883a 	mov	r5,zero
     42c:	000d883a 	mov	r6,zero
     430:	01c07d04 	movi	r7,500
     434:	0014b7c0 	call	14b7c <OSTimeDlyHMSM>
		ALT_SEM_POST(sem);
     438:	d0a7f517 	ldw	r2,-24620(gp)
     43c:	1009883a 	mov	r4,r2
     440:	0012e240 	call	12e24 <OSSemPost>
		OSTimeDlyHMSM(0, 0, 1, 0);
     444:	0009883a 	mov	r4,zero
     448:	000b883a 	mov	r5,zero
     44c:	01800044 	movi	r6,1
     450:	000f883a 	mov	r7,zero
     454:	0014b7c0 	call	14b7c <OSTimeDlyHMSM>
	}
     458:	003fbf06 	br	358 <__alt_mem_Flash_flash_data+0xf4000358>

0000045c <task3>:
}

void task3(void* pdata) {
     45c:	defffb04 	addi	sp,sp,-20
     460:	dfc00415 	stw	ra,16(sp)
     464:	df000315 	stw	fp,12(sp)
     468:	df000304 	addi	fp,sp,12
     46c:	e13fff15 	stw	r4,-4(fp)
	int sw_values, hex_values;

	while (1) {
		sw_values = alt_up_parallel_port_read_data(slider_switches_dev);
     470:	d0a7fa17 	ldw	r2,-24600(gp)
     474:	10800a17 	ldw	r2,40(r2)
     478:	10800037 	ldwio	r2,0(r2)
     47c:	e0bffd15 	stw	r2,-12(fp)

		sw_values &= 0x000000FF;
     480:	e0bffd17 	ldw	r2,-12(fp)
     484:	10803fcc 	andi	r2,r2,255
     488:	e0bffd15 	stw	r2,-12(fp)
		hex_values = sw_values | sw_values << 8 | sw_values << 16 | sw_values << 24;
     48c:	e0bffd17 	ldw	r2,-12(fp)
     490:	1006923a 	slli	r3,r2,8
     494:	e0bffd17 	ldw	r2,-12(fp)
     498:	1886b03a 	or	r3,r3,r2
     49c:	e0bffd17 	ldw	r2,-12(fp)
     4a0:	1004943a 	slli	r2,r2,16
     4a4:	1886b03a 	or	r3,r3,r2
     4a8:	e0bffd17 	ldw	r2,-12(fp)
     4ac:	1004963a 	slli	r2,r2,24
     4b0:	1884b03a 	or	r2,r3,r2
     4b4:	e0bffe15 	stw	r2,-8(fp)

		alt_up_parallel_port_write_data(hex3_hex0_dev, hex_values);
     4b8:	d0a7f717 	ldw	r2,-24612(gp)
     4bc:	10800a17 	ldw	r2,40(r2)
     4c0:	1007883a 	mov	r3,r2
     4c4:	e0bffe17 	ldw	r2,-8(fp)
     4c8:	18800035 	stwio	r2,0(r3)

		OSTimeDlyHMSM(0, 0, 0, 100);
     4cc:	0009883a 	mov	r4,zero
     4d0:	000b883a 	mov	r5,zero
     4d4:	000d883a 	mov	r6,zero
     4d8:	01c01904 	movi	r7,100
     4dc:	0014b7c0 	call	14b7c <OSTimeDlyHMSM>
	}
     4e0:	003fe306 	br	470 <__alt_mem_Flash_flash_data+0xf4000470>

000004e4 <task4>:
}

void task4(void* pdata) {
     4e4:	defffa04 	addi	sp,sp,-24
     4e8:	dfc00515 	stw	ra,20(sp)
     4ec:	df000415 	stw	fp,16(sp)
     4f0:	df000404 	addi	fp,sp,16
     4f4:	e13fff15 	stw	r4,-4(fp)
	unsigned int countR = 1;
     4f8:	00800044 	movi	r2,1
     4fc:	e0bffc15 	stw	r2,-16(fp)
	unsigned int countG = 1 << 8;
     500:	00804004 	movi	r2,256
     504:	e0bffd15 	stw	r2,-12(fp)
	int toggle = 1;
     508:	00800044 	movi	r2,1
     50c:	e0bffe15 	stw	r2,-8(fp)

	while (1) {
		alt_up_parallel_port_write_data(red_LEDs_dev, countR);
     510:	d0a7f617 	ldw	r2,-24616(gp)
     514:	10800a17 	ldw	r2,40(r2)
     518:	1007883a 	mov	r3,r2
     51c:	e0bffc17 	ldw	r2,-16(fp)
     520:	18800035 	stwio	r2,0(r3)
		alt_up_parallel_port_write_data(green_LEDs_dev, countG);
     524:	d0a7fb17 	ldw	r2,-24596(gp)
     528:	10800a17 	ldw	r2,40(r2)
     52c:	1007883a 	mov	r3,r2
     530:	e0bffd17 	ldw	r2,-12(fp)
     534:	18800035 	stwio	r2,0(r3)

		OSTimeDlyHMSM(0, 0, 0, 100);
     538:	0009883a 	mov	r4,zero
     53c:	000b883a 	mov	r5,zero
     540:	000d883a 	mov	r6,zero
     544:	01c01904 	movi	r7,100
     548:	0014b7c0 	call	14b7c <OSTimeDlyHMSM>

		alt_up_parallel_port_write_data(red_LEDs_dev, 0x000000);
     54c:	d0a7f617 	ldw	r2,-24616(gp)
     550:	10800a17 	ldw	r2,40(r2)
     554:	0007883a 	mov	r3,zero
     558:	10c00035 	stwio	r3,0(r2)
		alt_up_parallel_port_write_data(green_LEDs_dev, 0x000000);
     55c:	d0a7fb17 	ldw	r2,-24596(gp)
     560:	10800a17 	ldw	r2,40(r2)
     564:	0007883a 	mov	r3,zero
     568:	10c00035 	stwio	r3,0(r2)


		if (countR < 1 << 17)
     56c:	e0fffc17 	ldw	r3,-16(fp)
     570:	008000b4 	movhi	r2,2
     574:	1880042e 	bgeu	r3,r2,588 <task4+0xa4>
			countR = countR << 1;
     578:	e0bffc17 	ldw	r2,-16(fp)
     57c:	1085883a 	add	r2,r2,r2
     580:	e0bffc15 	stw	r2,-16(fp)
     584:	00000206 	br	590 <task4+0xac>
		else
			countR = 1;
     588:	00800044 	movi	r2,1
     58c:	e0bffc15 	stw	r2,-16(fp)

		if (toggle)
     590:	e0bffe17 	ldw	r2,-8(fp)
     594:	10000a26 	beq	r2,zero,5c0 <task4+0xdc>
		{
			if (countG == 1)
     598:	e0bffd17 	ldw	r2,-12(fp)
     59c:	10800058 	cmpnei	r2,r2,1
     5a0:	1000041e 	bne	r2,zero,5b4 <task4+0xd0>
				countG = countG << 8;
     5a4:	e0bffd17 	ldw	r2,-12(fp)
     5a8:	1004923a 	slli	r2,r2,8
     5ac:	e0bffd15 	stw	r2,-12(fp)
     5b0:	00000306 	br	5c0 <task4+0xdc>
			else
				countG = countG >> 1;
     5b4:	e0bffd17 	ldw	r2,-12(fp)
     5b8:	1004d07a 	srli	r2,r2,1
     5bc:	e0bffd15 	stw	r2,-12(fp)
		}
		toggle = !toggle;
     5c0:	e0bffe17 	ldw	r2,-8(fp)
     5c4:	1005003a 	cmpeq	r2,r2,zero
     5c8:	10803fcc 	andi	r2,r2,255
     5cc:	e0bffe15 	stw	r2,-8(fp)
	}
     5d0:	003fcf06 	br	510 <__alt_mem_Flash_flash_data+0xf4000510>

000005d4 <main>:
}

/* The main function creates two task and starts multi-tasking */
int main(void) {
     5d4:	defff404 	addi	sp,sp,-48
     5d8:	dfc00b15 	stw	ra,44(sp)
     5dc:	df000a15 	stw	fp,40(sp)
     5e0:	df000a04 	addi	fp,sp,40
	OSInit();
     5e4:	000db780 	call	db78 <OSInit>
     5e8:	d0a7f504 	addi	r2,gp,-24620
     5ec:	e0bffc15 	stw	r2,-16(fp)
     5f0:	00800044 	movi	r2,1
     5f4:	e0bffd0d 	sth	r2,-12(fp)
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sem_create (OS_EVENT** sem, 
              INT16U value)
{
  *sem = OSSemCreate (value);
     5f8:	e0bffd0b 	ldhu	r2,-12(fp)
     5fc:	1009883a 	mov	r4,r2
     600:	00126e80 	call	126e8 <OSSemCreate>
     604:	1007883a 	mov	r3,r2
     608:	e0bffc17 	ldw	r2,-16(fp)
     60c:	10c00015 	stw	r3,0(r2)
  return *sem ? 0 : -1;
     610:	e0bffc17 	ldw	r2,-16(fp)
     614:	10800017 	ldw	r2,0(r2)
     618:	10000226 	beq	r2,zero,624 <main+0x50>
     61c:	0005883a 	mov	r2,zero
     620:	00000106 	br	628 <main+0x54>
     624:	00bfffc4 	movi	r2,-1

	int err = ALT_SEM_CREATE(&sem, 1);
     628:	e0bffb15 	stw	r2,-20(fp)
	if (err != 0)
     62c:	e0bffb17 	ldw	r2,-20(fp)
     630:	10000326 	beq	r2,zero,640 <main+0x6c>
		printf("Semaphore NOT created\n");
     634:	010000b4 	movhi	r4,2
     638:	21233004 	addi	r4,r4,-29504
     63c:	0000b480 	call	b48 <puts>

	/* output text message to the LCD */
	ALT_SEM_PEND(sem, 0);
     640:	d0a7f517 	ldw	r2,-24620(gp)
     644:	e0bffe15 	stw	r2,-8(fp)
     648:	e03fff0d 	sth	zero,-4(fp)

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sem_pend (OS_EVENT* sem, 
                  INT16U timeout)
{
  INT8U err;
  OSSemPend (sem, timeout, &err);
     64c:	e0ffff0b 	ldhu	r3,-4(fp)
     650:	e0bfff84 	addi	r2,fp,-2
     654:	e13ffe17 	ldw	r4,-8(fp)
     658:	180b883a 	mov	r5,r3
     65c:	100d883a 	mov	r6,r2
     660:	0012a500 	call	12a50 <OSSemPend>

	lcd_dev = alt_up_character_lcd_open_dev("/dev/Char_LCD_16x2");
     664:	010000b4 	movhi	r4,2
     668:	21233604 	addi	r4,r4,-29480
     66c:	00162e00 	call	162e0 <alt_up_character_lcd_open_dev>
     670:	d0a7f915 	stw	r2,-24604(gp)
	if (lcd_dev == NULL) {
     674:	d0a7f917 	ldw	r2,-24604(gp)
     678:	1000051e 	bne	r2,zero,690 <main+0xbc>
		printf("Error: could not open character LCD device\n");
     67c:	010000b4 	movhi	r4,2
     680:	21233b04 	addi	r4,r4,-29460
     684:	0000b480 	call	b48 <puts>
		return -1;
     688:	00bfffc4 	movi	r2,-1
     68c:	0000ae06 	br	948 <main+0x374>
	} else
		printf("Opened character LCD device\n");
     690:	010000b4 	movhi	r4,2
     694:	21234604 	addi	r4,r4,-29416
     698:	0000b480 	call	b48 <puts>

	alt_up_character_lcd_set_cursor_pos(lcd_dev, 0, 0); // set LCD cursor location to top row
     69c:	d0a7f917 	ldw	r2,-24604(gp)
     6a0:	1009883a 	mov	r4,r2
     6a4:	000b883a 	mov	r5,zero
     6a8:	000d883a 	mov	r6,zero
     6ac:	001645c0 	call	1645c <alt_up_character_lcd_set_cursor_pos>
	alt_up_character_lcd_string(lcd_dev, text_top_row);
     6b0:	d0a7f917 	ldw	r2,-24604(gp)
     6b4:	1009883a 	mov	r4,r2
     6b8:	014000b4 	movhi	r5,2
     6bc:	2964db04 	addi	r5,r5,-27796
     6c0:	00163980 	call	16398 <alt_up_character_lcd_string>
	alt_up_character_lcd_set_cursor_pos(lcd_dev, 0, 1); // set LCD cursor location to bottom row
     6c4:	d0a7f917 	ldw	r2,-24604(gp)
     6c8:	1009883a 	mov	r4,r2
     6cc:	000b883a 	mov	r5,zero
     6d0:	01800044 	movi	r6,1
     6d4:	001645c0 	call	1645c <alt_up_character_lcd_set_cursor_pos>
	alt_up_character_lcd_string(lcd_dev, text_bottom_row);
     6d8:	d0a7f917 	ldw	r2,-24604(gp)
     6dc:	1009883a 	mov	r4,r2
     6e0:	014000b4 	movhi	r5,2
     6e4:	2944a104 	addi	r5,r5,4740
     6e8:	00163980 	call	16398 <alt_up_character_lcd_string>
	alt_up_character_lcd_cursor_off(lcd_dev); // turn off the LCD cursor
     6ec:	d0a7f917 	ldw	r2,-24604(gp)
     6f0:	1009883a 	mov	r4,r2
     6f4:	001666c0 	call	1666c <alt_up_character_lcd_cursor_off>
	ALT_SEM_POST(sem);
     6f8:	d0a7f517 	ldw	r2,-24620(gp)
     6fc:	1009883a 	mov	r4,r2
     700:	0012e240 	call	12e24 <OSSemPost>

	VGA_text (35, 29, "                                     ");
     704:	010008c4 	movi	r4,35
     708:	01400744 	movi	r5,29
     70c:	018000b4 	movhi	r6,2
     710:	31a34d04 	addi	r6,r6,-29388
     714:	000095c0 	call	95c <VGA_text>
	//VGA_text (35, 30, text_bottom_row);
	VGA_box (0, 0, 319, 239, 0);						// clear the screen
     718:	d8000015 	stw	zero,0(sp)
     71c:	0009883a 	mov	r4,zero
     720:	000b883a 	mov	r5,zero
     724:	01804fc4 	movi	r6,319
     728:	01c03bc4 	movi	r7,239
     72c:	00009ec0 	call	9ec <VGA_box>
	VGA_box (15, 100, 20, 150, 0x3333CC);				// links
     730:	00800cf4 	movhi	r2,51
     734:	108cf304 	addi	r2,r2,13260
     738:	d8800015 	stw	r2,0(sp)
     73c:	010003c4 	movi	r4,15
     740:	01401904 	movi	r5,100
     744:	01800504 	movi	r6,20
     748:	01c02584 	movi	r7,150
     74c:	00009ec0 	call	9ec <VGA_box>
	VGA_box (300, 100, 305, 150, 0x3333CC);				// rechts
     750:	00800cf4 	movhi	r2,51
     754:	108cf304 	addi	r2,r2,13260
     758:	d8800015 	stw	r2,0(sp)
     75c:	01004b04 	movi	r4,300
     760:	01401904 	movi	r5,100
     764:	01804c44 	movi	r6,305
     768:	01c02584 	movi	r7,150
     76c:	00009ec0 	call	9ec <VGA_box>

	VGA_box (0, 0, 319, 3, 0xFFFFFF);					// boven
     770:	00804034 	movhi	r2,256
     774:	10bfffc4 	addi	r2,r2,-1
     778:	d8800015 	stw	r2,0(sp)
     77c:	0009883a 	mov	r4,zero
     780:	000b883a 	mov	r5,zero
     784:	01804fc4 	movi	r6,319
     788:	01c000c4 	movi	r7,3
     78c:	00009ec0 	call	9ec <VGA_box>
	VGA_box (0, 236, 319, 239, 0xFFFFFF);				// onder
     790:	00804034 	movhi	r2,256
     794:	10bfffc4 	addi	r2,r2,-1
     798:	d8800015 	stw	r2,0(sp)
     79c:	0009883a 	mov	r4,zero
     7a0:	01403b04 	movi	r5,236
     7a4:	01804fc4 	movi	r6,319
     7a8:	01c03bc4 	movi	r7,239
     7ac:	00009ec0 	call	9ec <VGA_box>

	VGA_box (159, 0, 160, 239, 0xFFFFFF);				// middenlijntje
     7b0:	00804034 	movhi	r2,256
     7b4:	10bfffc4 	addi	r2,r2,-1
     7b8:	d8800015 	stw	r2,0(sp)
     7bc:	010027c4 	movi	r4,159
     7c0:	000b883a 	mov	r5,zero
     7c4:	01802804 	movi	r6,160
     7c8:	01c03bc4 	movi	r7,239
     7cc:	00009ec0 	call	9ec <VGA_box>

	VGA_box (100, 50, 105, 55, 0xFFFFFF);
     7d0:	00804034 	movhi	r2,256
     7d4:	10bfffc4 	addi	r2,r2,-1
     7d8:	d8800015 	stw	r2,0(sp)
     7dc:	01001904 	movi	r4,100
     7e0:	01400c84 	movi	r5,50
     7e4:	01801a44 	movi	r6,105
     7e8:	01c00dc4 	movi	r7,55
     7ec:	00009ec0 	call	9ec <VGA_box>

	red_LEDs_dev = alt_up_parallel_port_open_dev("/dev/Red_LEDs");
     7f0:	010000b4 	movhi	r4,2
     7f4:	21235704 	addi	r4,r4,-29348
     7f8:	0016a5c0 	call	16a5c <alt_up_parallel_port_open_dev>
     7fc:	d0a7f615 	stw	r2,-24616(gp)
	green_LEDs_dev = alt_up_parallel_port_open_dev("/dev/Green_LEDs");
     800:	010000b4 	movhi	r4,2
     804:	21235b04 	addi	r4,r4,-29332
     808:	0016a5c0 	call	16a5c <alt_up_parallel_port_open_dev>
     80c:	d0a7fb15 	stw	r2,-24596(gp)
	slider_switches_dev = alt_up_parallel_port_open_dev("/dev/Slider_Switches");
     810:	010000b4 	movhi	r4,2
     814:	21235f04 	addi	r4,r4,-29316
     818:	0016a5c0 	call	16a5c <alt_up_parallel_port_open_dev>
     81c:	d0a7fa15 	stw	r2,-24600(gp)

	hex3_hex0_dev = alt_up_parallel_port_open_dev("/dev/HEX3_HEX0");
     820:	010000b4 	movhi	r4,2
     824:	21236504 	addi	r4,r4,-29292
     828:	0016a5c0 	call	16a5c <alt_up_parallel_port_open_dev>
     82c:	d0a7f715 	stw	r2,-24612(gp)
	hex7_hex4_dev = alt_up_parallel_port_open_dev("/dev/HEX7_HEX4");
     830:	010000b4 	movhi	r4,2
     834:	21236904 	addi	r4,r4,-29276
     838:	0016a5c0 	call	16a5c <alt_up_parallel_port_open_dev>
     83c:	d0a7f815 	stw	r2,-24608(gp)

	OSTaskCreateExt(task1, NULL, (void *) &task1_stk[TASK_STACKSIZE - 1],
     840:	00800284 	movi	r2,10
     844:	d8800015 	stw	r2,0(sp)
     848:	008000b4 	movhi	r2,2
     84c:	10b4a104 	addi	r2,r2,-11644
     850:	d8800115 	stw	r2,4(sp)
     854:	00820004 	movi	r2,2048
     858:	d8800215 	stw	r2,8(sp)
     85c:	d8000315 	stw	zero,12(sp)
     860:	d8000415 	stw	zero,16(sp)
     864:	01000034 	movhi	r4,0
     868:	2100a004 	addi	r4,r4,640
     86c:	000b883a 	mov	r5,zero
     870:	018000b4 	movhi	r6,2
     874:	31bca004 	addi	r6,r6,-3456
     878:	01c00284 	movi	r7,10
     87c:	001383c0 	call	1383c <OSTaskCreateExt>
			TASK1_PRIORITY, TASK1_PRIORITY, task1_stk, TASK_STACKSIZE, NULL, 0);

	OSTaskCreateExt(task2, NULL, (void *) &task2_stk[TASK_STACKSIZE - 1],
     880:	008002c4 	movi	r2,11
     884:	d8800015 	stw	r2,0(sp)
     888:	008000b4 	movhi	r2,2
     88c:	1084ab04 	addi	r2,r2,4780
     890:	d8800115 	stw	r2,4(sp)
     894:	00820004 	movi	r2,2048
     898:	d8800215 	stw	r2,8(sp)
     89c:	d8000315 	stw	zero,12(sp)
     8a0:	d8000415 	stw	zero,16(sp)
     8a4:	01000034 	movhi	r4,0
     8a8:	2100d004 	addi	r4,r4,832
     8ac:	000b883a 	mov	r5,zero
     8b0:	018000b4 	movhi	r6,2
     8b4:	318caa04 	addi	r6,r6,12968
     8b8:	01c002c4 	movi	r7,11
     8bc:	001383c0 	call	1383c <OSTaskCreateExt>
			TASK2_PRIORITY, TASK2_PRIORITY, task2_stk, TASK_STACKSIZE, NULL, 0);

	OSTaskCreateExt(task3, NULL, (void *) &task3_stk[TASK_STACKSIZE - 1],
     8c0:	00800304 	movi	r2,12
     8c4:	d8800015 	stw	r2,0(sp)
     8c8:	008000b4 	movhi	r2,2
     8cc:	108cab04 	addi	r2,r2,12972
     8d0:	d8800115 	stw	r2,4(sp)
     8d4:	00820004 	movi	r2,2048
     8d8:	d8800215 	stw	r2,8(sp)
     8dc:	d8000315 	stw	zero,12(sp)
     8e0:	d8000415 	stw	zero,16(sp)
     8e4:	01000034 	movhi	r4,0
     8e8:	21011704 	addi	r4,r4,1116
     8ec:	000b883a 	mov	r5,zero
     8f0:	018000b4 	movhi	r6,2
     8f4:	3194aa04 	addi	r6,r6,21160
     8f8:	01c00304 	movi	r7,12
     8fc:	001383c0 	call	1383c <OSTaskCreateExt>
			TASK3_PRIORITY, TASK3_PRIORITY, task3_stk, TASK_STACKSIZE, NULL, 0);

	OSTaskCreateExt(task4, NULL, (void *) &task4_stk[TASK_STACKSIZE - 1],
     900:	00800244 	movi	r2,9
     904:	d8800015 	stw	r2,0(sp)
     908:	008000b4 	movhi	r2,2
     90c:	10bca104 	addi	r2,r2,-3452
     910:	d8800115 	stw	r2,4(sp)
     914:	00820004 	movi	r2,2048
     918:	d8800215 	stw	r2,8(sp)
     91c:	d8000315 	stw	zero,12(sp)
     920:	d8000415 	stw	zero,16(sp)
     924:	01000034 	movhi	r4,0
     928:	21013904 	addi	r4,r4,1252
     92c:	000b883a 	mov	r5,zero
     930:	018000b4 	movhi	r6,2
     934:	3184a004 	addi	r6,r6,4736
     938:	01c00244 	movi	r7,9
     93c:	001383c0 	call	1383c <OSTaskCreateExt>
			TASK4_PRIORITY, TASK4_PRIORITY, task4_stk, TASK_STACKSIZE, NULL, 0);

	OSStart();
     940:	000de9c0 	call	de9c <OSStart>
	return 0;
     944:	0005883a 	mov	r2,zero
}
     948:	e037883a 	mov	sp,fp
     94c:	dfc00117 	ldw	ra,4(sp)
     950:	df000017 	ldw	fp,0(sp)
     954:	dec00204 	addi	sp,sp,8
     958:	f800283a 	ret

0000095c <VGA_text>:

/****************************************************************************************
 * Subroutine to send a string of text to the VGA monitor
****************************************************************************************/
void VGA_text(int x, int y, char * text_ptr)
{
     95c:	defffa04 	addi	sp,sp,-24
     960:	df000515 	stw	fp,20(sp)
     964:	df000504 	addi	fp,sp,20
     968:	e13ffd15 	stw	r4,-12(fp)
     96c:	e17ffe15 	stw	r5,-8(fp)
     970:	e1bfff15 	stw	r6,-4(fp)
	int offset;
  	volatile char * character_buffer = (char *) 0x09000000;	// VGA character buffer
     974:	00824034 	movhi	r2,2304
     978:	e0bffc15 	stw	r2,-16(fp)

	/* assume that the text string fits on one line */
	offset = (y << 7) + x;
     97c:	e0bffe17 	ldw	r2,-8(fp)
     980:	100691fa 	slli	r3,r2,7
     984:	e0bffd17 	ldw	r2,-12(fp)
     988:	1885883a 	add	r2,r3,r2
     98c:	e0bffb15 	stw	r2,-20(fp)
	while ( *(text_ptr) )
     990:	00000c06 	br	9c4 <VGA_text+0x68>
	{
		*(character_buffer + offset) = *(text_ptr);	// write to the character buffer
     994:	e0bffb17 	ldw	r2,-20(fp)
     998:	e0fffc17 	ldw	r3,-16(fp)
     99c:	1885883a 	add	r2,r3,r2
     9a0:	e0ffff17 	ldw	r3,-4(fp)
     9a4:	18c00003 	ldbu	r3,0(r3)
     9a8:	10c00005 	stb	r3,0(r2)
		++text_ptr;
     9ac:	e0bfff17 	ldw	r2,-4(fp)
     9b0:	10800044 	addi	r2,r2,1
     9b4:	e0bfff15 	stw	r2,-4(fp)
		++offset;
     9b8:	e0bffb17 	ldw	r2,-20(fp)
     9bc:	10800044 	addi	r2,r2,1
     9c0:	e0bffb15 	stw	r2,-20(fp)
	int offset;
  	volatile char * character_buffer = (char *) 0x09000000;	// VGA character buffer

	/* assume that the text string fits on one line */
	offset = (y << 7) + x;
	while ( *(text_ptr) )
     9c4:	e0bfff17 	ldw	r2,-4(fp)
     9c8:	10800003 	ldbu	r2,0(r2)
     9cc:	10803fcc 	andi	r2,r2,255
     9d0:	1080201c 	xori	r2,r2,128
     9d4:	10bfe004 	addi	r2,r2,-128
     9d8:	103fee1e 	bne	r2,zero,994 <__alt_mem_Flash_flash_data+0xf4000994>
	{
		*(character_buffer + offset) = *(text_ptr);	// write to the character buffer
		++text_ptr;
		++offset;
	}
}
     9dc:	e037883a 	mov	sp,fp
     9e0:	df000017 	ldw	fp,0(sp)
     9e4:	dec00104 	addi	sp,sp,4
     9e8:	f800283a 	ret

000009ec <VGA_box>:

/****************************************************************************************
 * Draw a filled rectangle on the VGA monitor
****************************************************************************************/
void VGA_box(int x1, int y1, int x2, int y2, short pixel_color)
{
     9ec:	defff604 	addi	sp,sp,-40
     9f0:	df000915 	stw	fp,36(sp)
     9f4:	df000904 	addi	fp,sp,36
     9f8:	e13ffb15 	stw	r4,-20(fp)
     9fc:	e17ffc15 	stw	r5,-16(fp)
     a00:	e1bffd15 	stw	r6,-12(fp)
     a04:	e1fffe15 	stw	r7,-8(fp)
     a08:	e0800117 	ldw	r2,4(fp)
     a0c:	e0bfff0d 	sth	r2,-4(fp)
	int offset, row, col;
  	volatile short * pixel_buffer = (short *) 0x08000000;	// VGA pixel buffer
     a10:	00820034 	movhi	r2,2048
     a14:	e0bff915 	stw	r2,-28(fp)

	/* assume that the box coordinates are valid */
	for (row = y1; row <= y2; row++)
     a18:	e0bffc17 	ldw	r2,-16(fp)
     a1c:	e0bff715 	stw	r2,-36(fp)
     a20:	00001806 	br	a84 <VGA_box+0x98>
	{
		col = x1;
     a24:	e0bffb17 	ldw	r2,-20(fp)
     a28:	e0bff815 	stw	r2,-32(fp)
		while (col <= x2)
     a2c:	00000f06 	br	a6c <VGA_box+0x80>
		{
			offset = (row << 9) + col;
     a30:	e0bff717 	ldw	r2,-36(fp)
     a34:	1006927a 	slli	r3,r2,9
     a38:	e0bff817 	ldw	r2,-32(fp)
     a3c:	1885883a 	add	r2,r3,r2
     a40:	e0bffa15 	stw	r2,-24(fp)
			*(pixel_buffer + offset) = pixel_color;	// compute halfword address, set pixel
     a44:	e0bffa17 	ldw	r2,-24(fp)
     a48:	1085883a 	add	r2,r2,r2
     a4c:	1007883a 	mov	r3,r2
     a50:	e0bff917 	ldw	r2,-28(fp)
     a54:	10c5883a 	add	r2,r2,r3
     a58:	e0ffff0b 	ldhu	r3,-4(fp)
     a5c:	10c0000d 	sth	r3,0(r2)
			++col;
     a60:	e0bff817 	ldw	r2,-32(fp)
     a64:	10800044 	addi	r2,r2,1
     a68:	e0bff815 	stw	r2,-32(fp)

	/* assume that the box coordinates are valid */
	for (row = y1; row <= y2; row++)
	{
		col = x1;
		while (col <= x2)
     a6c:	e0bff817 	ldw	r2,-32(fp)
     a70:	e0fffd17 	ldw	r3,-12(fp)
     a74:	18bfee0e 	bge	r3,r2,a30 <__alt_mem_Flash_flash_data+0xf4000a30>
{
	int offset, row, col;
  	volatile short * pixel_buffer = (short *) 0x08000000;	// VGA pixel buffer

	/* assume that the box coordinates are valid */
	for (row = y1; row <= y2; row++)
     a78:	e0bff717 	ldw	r2,-36(fp)
     a7c:	10800044 	addi	r2,r2,1
     a80:	e0bff715 	stw	r2,-36(fp)
     a84:	e0bff717 	ldw	r2,-36(fp)
     a88:	e0fffe17 	ldw	r3,-8(fp)
     a8c:	18bfe50e 	bge	r3,r2,a24 <__alt_mem_Flash_flash_data+0xf4000a24>
			offset = (row << 9) + col;
			*(pixel_buffer + offset) = pixel_color;	// compute halfword address, set pixel
			++col;
		}
	}
}
     a90:	e037883a 	mov	sp,fp
     a94:	df000017 	ldw	fp,0(sp)
     a98:	dec00104 	addi	sp,sp,4
     a9c:	f800283a 	ret

00000aa0 <_puts_r>:
     aa0:	defff604 	addi	sp,sp,-40
     aa4:	dc000715 	stw	r16,28(sp)
     aa8:	2021883a 	mov	r16,r4
     aac:	2809883a 	mov	r4,r5
     ab0:	dc400815 	stw	r17,32(sp)
     ab4:	dfc00915 	stw	ra,36(sp)
     ab8:	2823883a 	mov	r17,r5
     abc:	0000c200 	call	c20 <strlen>
     ac0:	81400217 	ldw	r5,8(r16)
     ac4:	11000044 	addi	r4,r2,1
     ac8:	d8800115 	stw	r2,4(sp)
     acc:	008000b4 	movhi	r2,2
     ad0:	2980030b 	ldhu	r6,12(r5)
     ad4:	10a36d04 	addi	r2,r2,-29260
     ad8:	d8800215 	stw	r2,8(sp)
     adc:	00800044 	movi	r2,1
     ae0:	d8800315 	stw	r2,12(sp)
     ae4:	00800084 	movi	r2,2
     ae8:	d8800515 	stw	r2,20(sp)
     aec:	dc400015 	stw	r17,0(sp)
     af0:	d9000615 	stw	r4,24(sp)
     af4:	dec00415 	stw	sp,16(sp)
     af8:	3088000c 	andi	r2,r6,8192
     afc:	1000061e 	bne	r2,zero,b18 <_puts_r+0x78>
     b00:	29001917 	ldw	r4,100(r5)
     b04:	00b7ffc4 	movi	r2,-8193
     b08:	31880014 	ori	r6,r6,8192
     b0c:	2084703a 	and	r2,r4,r2
     b10:	2980030d 	sth	r6,12(r5)
     b14:	28801915 	stw	r2,100(r5)
     b18:	8009883a 	mov	r4,r16
     b1c:	d9800404 	addi	r6,sp,16
     b20:	00045700 	call	4570 <__sfvwrite_r>
     b24:	1000061e 	bne	r2,zero,b40 <_puts_r+0xa0>
     b28:	00800284 	movi	r2,10
     b2c:	dfc00917 	ldw	ra,36(sp)
     b30:	dc400817 	ldw	r17,32(sp)
     b34:	dc000717 	ldw	r16,28(sp)
     b38:	dec00a04 	addi	sp,sp,40
     b3c:	f800283a 	ret
     b40:	00bfffc4 	movi	r2,-1
     b44:	003ff906 	br	b2c <__alt_mem_Flash_flash_data+0xf4000b2c>

00000b48 <puts>:
     b48:	008000b4 	movhi	r2,2
     b4c:	10ac7504 	addi	r2,r2,-20012
     b50:	200b883a 	mov	r5,r4
     b54:	11000017 	ldw	r4,0(r2)
     b58:	0000aa01 	jmpi	aa0 <_puts_r>

00000b5c <_sprintf_r>:
     b5c:	deffe404 	addi	sp,sp,-112
     b60:	2807883a 	mov	r3,r5
     b64:	dfc01a15 	stw	ra,104(sp)
     b68:	d9c01b15 	stw	r7,108(sp)
     b6c:	00a00034 	movhi	r2,32768
     b70:	10bfffc4 	addi	r2,r2,-1
     b74:	02008204 	movi	r8,520
     b78:	d8800215 	stw	r2,8(sp)
     b7c:	d8800515 	stw	r2,20(sp)
     b80:	d80b883a 	mov	r5,sp
     b84:	d9c01b04 	addi	r7,sp,108
     b88:	00bfffc4 	movi	r2,-1
     b8c:	d8c00015 	stw	r3,0(sp)
     b90:	d8c00415 	stw	r3,16(sp)
     b94:	da00030d 	sth	r8,12(sp)
     b98:	d880038d 	sth	r2,14(sp)
     b9c:	0000cb80 	call	cb8 <___svfprintf_internal_r>
     ba0:	d8c00017 	ldw	r3,0(sp)
     ba4:	18000005 	stb	zero,0(r3)
     ba8:	dfc01a17 	ldw	ra,104(sp)
     bac:	dec01c04 	addi	sp,sp,112
     bb0:	f800283a 	ret

00000bb4 <sprintf>:
     bb4:	deffe304 	addi	sp,sp,-116
     bb8:	2007883a 	mov	r3,r4
     bbc:	dfc01a15 	stw	ra,104(sp)
     bc0:	d9801b15 	stw	r6,108(sp)
     bc4:	d9c01c15 	stw	r7,112(sp)
     bc8:	010000b4 	movhi	r4,2
     bcc:	212c7504 	addi	r4,r4,-20012
     bd0:	21000017 	ldw	r4,0(r4)
     bd4:	00a00034 	movhi	r2,32768
     bd8:	10bfffc4 	addi	r2,r2,-1
     bdc:	280d883a 	mov	r6,r5
     be0:	02008204 	movi	r8,520
     be4:	d8800215 	stw	r2,8(sp)
     be8:	d8800515 	stw	r2,20(sp)
     bec:	d80b883a 	mov	r5,sp
     bf0:	d9c01b04 	addi	r7,sp,108
     bf4:	00bfffc4 	movi	r2,-1
     bf8:	d8c00015 	stw	r3,0(sp)
     bfc:	d8c00415 	stw	r3,16(sp)
     c00:	da00030d 	sth	r8,12(sp)
     c04:	d880038d 	sth	r2,14(sp)
     c08:	0000cb80 	call	cb8 <___svfprintf_internal_r>
     c0c:	d8c00017 	ldw	r3,0(sp)
     c10:	18000005 	stb	zero,0(r3)
     c14:	dfc01a17 	ldw	ra,104(sp)
     c18:	dec01d04 	addi	sp,sp,116
     c1c:	f800283a 	ret

00000c20 <strlen>:
     c20:	208000cc 	andi	r2,r4,3
     c24:	10002026 	beq	r2,zero,ca8 <strlen+0x88>
     c28:	20800007 	ldb	r2,0(r4)
     c2c:	10002026 	beq	r2,zero,cb0 <strlen+0x90>
     c30:	2005883a 	mov	r2,r4
     c34:	00000206 	br	c40 <strlen+0x20>
     c38:	10c00007 	ldb	r3,0(r2)
     c3c:	18001826 	beq	r3,zero,ca0 <strlen+0x80>
     c40:	10800044 	addi	r2,r2,1
     c44:	10c000cc 	andi	r3,r2,3
     c48:	183ffb1e 	bne	r3,zero,c38 <__alt_mem_Flash_flash_data+0xf4000c38>
     c4c:	10c00017 	ldw	r3,0(r2)
     c50:	01ffbff4 	movhi	r7,65279
     c54:	39ffbfc4 	addi	r7,r7,-257
     c58:	00ca303a 	nor	r5,zero,r3
     c5c:	01a02074 	movhi	r6,32897
     c60:	19c7883a 	add	r3,r3,r7
     c64:	31a02004 	addi	r6,r6,-32640
     c68:	1946703a 	and	r3,r3,r5
     c6c:	1986703a 	and	r3,r3,r6
     c70:	1800091e 	bne	r3,zero,c98 <strlen+0x78>
     c74:	10800104 	addi	r2,r2,4
     c78:	10c00017 	ldw	r3,0(r2)
     c7c:	19cb883a 	add	r5,r3,r7
     c80:	00c6303a 	nor	r3,zero,r3
     c84:	28c6703a 	and	r3,r5,r3
     c88:	1986703a 	and	r3,r3,r6
     c8c:	183ff926 	beq	r3,zero,c74 <__alt_mem_Flash_flash_data+0xf4000c74>
     c90:	00000106 	br	c98 <strlen+0x78>
     c94:	10800044 	addi	r2,r2,1
     c98:	10c00007 	ldb	r3,0(r2)
     c9c:	183ffd1e 	bne	r3,zero,c94 <__alt_mem_Flash_flash_data+0xf4000c94>
     ca0:	1105c83a 	sub	r2,r2,r4
     ca4:	f800283a 	ret
     ca8:	2005883a 	mov	r2,r4
     cac:	003fe706 	br	c4c <__alt_mem_Flash_flash_data+0xf4000c4c>
     cb0:	0005883a 	mov	r2,zero
     cb4:	f800283a 	ret

00000cb8 <___svfprintf_internal_r>:
     cb8:	deffb504 	addi	sp,sp,-300
     cbc:	dfc04a15 	stw	ra,296(sp)
     cc0:	ddc04815 	stw	r23,288(sp)
     cc4:	d9002f15 	stw	r4,188(sp)
     cc8:	282f883a 	mov	r23,r5
     ccc:	d9802915 	stw	r6,164(sp)
     cd0:	d9c02d15 	stw	r7,180(sp)
     cd4:	df004915 	stw	fp,292(sp)
     cd8:	dd804715 	stw	r22,284(sp)
     cdc:	dd404615 	stw	r21,280(sp)
     ce0:	dd004515 	stw	r20,276(sp)
     ce4:	dcc04415 	stw	r19,272(sp)
     ce8:	dc804315 	stw	r18,268(sp)
     cec:	dc404215 	stw	r17,264(sp)
     cf0:	dc004115 	stw	r16,260(sp)
     cf4:	0004adc0 	call	4adc <_localeconv_r>
     cf8:	10800017 	ldw	r2,0(r2)
     cfc:	1009883a 	mov	r4,r2
     d00:	d8803515 	stw	r2,212(sp)
     d04:	0000c200 	call	c20 <strlen>
     d08:	d8803915 	stw	r2,228(sp)
     d0c:	b880030b 	ldhu	r2,12(r23)
     d10:	1080200c 	andi	r2,r2,128
     d14:	10000226 	beq	r2,zero,d20 <___svfprintf_internal_r+0x68>
     d18:	b8800417 	ldw	r2,16(r23)
     d1c:	10065f26 	beq	r2,zero,269c <___svfprintf_internal_r+0x19e4>
     d20:	db001dc4 	addi	r12,sp,119
     d24:	dd801e04 	addi	r22,sp,120
     d28:	d8800404 	addi	r2,sp,16
     d2c:	050000b4 	movhi	r20,2
     d30:	b317c83a 	sub	r11,r22,r12
     d34:	a5237e84 	addi	r20,r20,-29190
     d38:	db002815 	stw	r12,160(sp)
     d3c:	d8801e15 	stw	r2,120(sp)
     d40:	d8002015 	stw	zero,128(sp)
     d44:	d8001f15 	stw	zero,124(sp)
     d48:	d8003315 	stw	zero,204(sp)
     d4c:	d8003715 	stw	zero,220(sp)
     d50:	d8003815 	stw	zero,224(sp)
     d54:	1011883a 	mov	r8,r2
     d58:	d8003b15 	stw	zero,236(sp)
     d5c:	d8003a15 	stw	zero,232(sp)
     d60:	d8003015 	stw	zero,192(sp)
     d64:	dac03d15 	stw	r11,244(sp)
     d68:	db002917 	ldw	r12,164(sp)
     d6c:	60800007 	ldb	r2,0(r12)
     d70:	1000ab26 	beq	r2,zero,1020 <___svfprintf_internal_r+0x368>
     d74:	00c00944 	movi	r3,37
     d78:	10c0a926 	beq	r2,r3,1020 <___svfprintf_internal_r+0x368>
     d7c:	6021883a 	mov	r16,r12
     d80:	00000106 	br	d88 <___svfprintf_internal_r+0xd0>
     d84:	10c08426 	beq	r2,r3,f98 <___svfprintf_internal_r+0x2e0>
     d88:	84000044 	addi	r16,r16,1
     d8c:	80800007 	ldb	r2,0(r16)
     d90:	103ffc1e 	bne	r2,zero,d84 <__alt_mem_Flash_flash_data+0xf4000d84>
     d94:	dac02917 	ldw	r11,164(sp)
     d98:	82e3c83a 	sub	r17,r16,r11
     d9c:	88000f26 	beq	r17,zero,ddc <___svfprintf_internal_r+0x124>
     da0:	d8c02017 	ldw	r3,128(sp)
     da4:	d8801f17 	ldw	r2,124(sp)
     da8:	dac02917 	ldw	r11,164(sp)
     dac:	1c47883a 	add	r3,r3,r17
     db0:	10800044 	addi	r2,r2,1
     db4:	d8c02015 	stw	r3,128(sp)
     db8:	42c00015 	stw	r11,0(r8)
     dbc:	44400115 	stw	r17,4(r8)
     dc0:	d8801f15 	stw	r2,124(sp)
     dc4:	00c001c4 	movi	r3,7
     dc8:	18807616 	blt	r3,r2,fa4 <___svfprintf_internal_r+0x2ec>
     dcc:	42000204 	addi	r8,r8,8
     dd0:	db003017 	ldw	r12,192(sp)
     dd4:	6459883a 	add	r12,r12,r17
     dd8:	db003015 	stw	r12,192(sp)
     ddc:	80800007 	ldb	r2,0(r16)
     de0:	10007726 	beq	r2,zero,fc0 <___svfprintf_internal_r+0x308>
     de4:	80800044 	addi	r2,r16,1
     de8:	84000047 	ldb	r16,1(r16)
     dec:	d8002785 	stb	zero,158(sp)
     df0:	000d883a 	mov	r6,zero
     df4:	027fffc4 	movi	r9,-1
     df8:	d8002e15 	stw	zero,184(sp)
     dfc:	0023883a 	mov	r17,zero
     e00:	01001604 	movi	r4,88
     e04:	01400244 	movi	r5,9
     e08:	02800a84 	movi	r10,42
     e0c:	01c01b04 	movi	r7,108
     e10:	10c00044 	addi	r3,r2,1
     e14:	80bff804 	addi	r2,r16,-32
     e18:	2082e636 	bltu	r4,r2,19b4 <___svfprintf_internal_r+0xcfc>
     e1c:	100490ba 	slli	r2,r2,2
     e20:	02c00034 	movhi	r11,0
     e24:	5ac38d04 	addi	r11,r11,3636
     e28:	12c5883a 	add	r2,r2,r11
     e2c:	10800017 	ldw	r2,0(r2)
     e30:	1000683a 	jmp	r2
     e34:	00001794 	movui	zero,94
     e38:	000019b4 	movhi	zero,102
     e3c:	000019b4 	movhi	zero,102
     e40:	000017b4 	movhi	zero,94
     e44:	000019b4 	movhi	zero,102
     e48:	000019b4 	movhi	zero,102
     e4c:	000019b4 	movhi	zero,102
     e50:	000019b4 	movhi	zero,102
     e54:	000019b4 	movhi	zero,102
     e58:	000019b4 	movhi	zero,102
     e5c:	000017c4 	movi	zero,95
     e60:	000017f0 	cmpltui	zero,zero,95
     e64:	000019b4 	movhi	zero,102
     e68:	00001028 	cmpgeui	zero,zero,64
     e6c:	00001038 	rdprs	zero,zero,64
     e70:	000019b4 	movhi	zero,102
     e74:	00001078 	rdprs	zero,zero,65
     e78:	00001658 	cmpnei	zero,zero,89
     e7c:	00001658 	cmpnei	zero,zero,89
     e80:	00001658 	cmpnei	zero,zero,89
     e84:	00001658 	cmpnei	zero,zero,89
     e88:	00001658 	cmpnei	zero,zero,89
     e8c:	00001658 	cmpnei	zero,zero,89
     e90:	00001658 	cmpnei	zero,zero,89
     e94:	00001658 	cmpnei	zero,zero,89
     e98:	00001658 	cmpnei	zero,zero,89
     e9c:	000019b4 	movhi	zero,102
     ea0:	000019b4 	movhi	zero,102
     ea4:	000019b4 	movhi	zero,102
     ea8:	000019b4 	movhi	zero,102
     eac:	000019b4 	movhi	zero,102
     eb0:	000019b4 	movhi	zero,102
     eb4:	000019b4 	movhi	zero,102
     eb8:	000019b4 	movhi	zero,102
     ebc:	000019b4 	movhi	zero,102
     ec0:	000019b4 	movhi	zero,102
     ec4:	00001088 	cmpgei	zero,zero,66
     ec8:	00001508 	cmpgei	zero,zero,84
     ecc:	000019b4 	movhi	zero,102
     ed0:	00001508 	cmpgei	zero,zero,84
     ed4:	000019b4 	movhi	zero,102
     ed8:	000019b4 	movhi	zero,102
     edc:	000019b4 	movhi	zero,102
     ee0:	000019b4 	movhi	zero,102
     ee4:	000015ac 	andhi	zero,zero,86
     ee8:	000019b4 	movhi	zero,102
     eec:	000019b4 	movhi	zero,102
     ef0:	00001948 	cmpgei	zero,zero,101
     ef4:	000019b4 	movhi	zero,102
     ef8:	000019b4 	movhi	zero,102
     efc:	000019b4 	movhi	zero,102
     f00:	000019b4 	movhi	zero,102
     f04:	000019b4 	movhi	zero,102
     f08:	000015bc 	xorhi	zero,zero,86
     f0c:	000019b4 	movhi	zero,102
     f10:	000019b4 	movhi	zero,102
     f14:	000015fc 	xorhi	zero,zero,87
     f18:	000019b4 	movhi	zero,102
     f1c:	000019b4 	movhi	zero,102
     f20:	000019b4 	movhi	zero,102
     f24:	000019b4 	movhi	zero,102
     f28:	000019b4 	movhi	zero,102
     f2c:	000019b4 	movhi	zero,102
     f30:	000019b4 	movhi	zero,102
     f34:	000019b4 	movhi	zero,102
     f38:	000019b4 	movhi	zero,102
     f3c:	000019b4 	movhi	zero,102
     f40:	000018a0 	cmpeqi	zero,zero,98
     f44:	000018e0 	cmpeqi	zero,zero,99
     f48:	00001508 	cmpgei	zero,zero,84
     f4c:	00001508 	cmpgei	zero,zero,84
     f50:	00001508 	cmpgei	zero,zero,84
     f54:	00001800 	call	180 <alt_irq_handler+0x84>
     f58:	000018e0 	cmpeqi	zero,zero,99
     f5c:	000019b4 	movhi	zero,102
     f60:	000019b4 	movhi	zero,102
     f64:	00001810 	cmplti	zero,zero,96
     f68:	000019b4 	movhi	zero,102
     f6c:	00001824 	muli	zero,zero,96
     f70:	00001978 	rdprs	zero,zero,101
     f74:	00001858 	cmpnei	zero,zero,97
     f78:	0000168c 	andi	zero,zero,90
     f7c:	000019b4 	movhi	zero,102
     f80:	0000169c 	xori	zero,zero,90
     f84:	000019b4 	movhi	zero,102
     f88:	00001714 	movui	zero,92
     f8c:	000019b4 	movhi	zero,102
     f90:	000019b4 	movhi	zero,102
     f94:	00001754 	movui	zero,93
     f98:	db002917 	ldw	r12,164(sp)
     f9c:	8323c83a 	sub	r17,r16,r12
     fa0:	003f7e06 	br	d9c <__alt_mem_Flash_flash_data+0xf4000d9c>
     fa4:	d9002f17 	ldw	r4,188(sp)
     fa8:	b80b883a 	mov	r5,r23
     fac:	b00d883a 	mov	r6,r22
     fb0:	0006ca80 	call	6ca8 <__ssprint_r>
     fb4:	1000081e 	bne	r2,zero,fd8 <___svfprintf_internal_r+0x320>
     fb8:	da000404 	addi	r8,sp,16
     fbc:	003f8406 	br	dd0 <__alt_mem_Flash_flash_data+0xf4000dd0>
     fc0:	d8802017 	ldw	r2,128(sp)
     fc4:	10000426 	beq	r2,zero,fd8 <___svfprintf_internal_r+0x320>
     fc8:	d9002f17 	ldw	r4,188(sp)
     fcc:	b80b883a 	mov	r5,r23
     fd0:	d9801e04 	addi	r6,sp,120
     fd4:	0006ca80 	call	6ca8 <__ssprint_r>
     fd8:	b880030b 	ldhu	r2,12(r23)
     fdc:	1080100c 	andi	r2,r2,64
     fe0:	10000d1e 	bne	r2,zero,1018 <___svfprintf_internal_r+0x360>
     fe4:	d8803017 	ldw	r2,192(sp)
     fe8:	dfc04a17 	ldw	ra,296(sp)
     fec:	df004917 	ldw	fp,292(sp)
     ff0:	ddc04817 	ldw	r23,288(sp)
     ff4:	dd804717 	ldw	r22,284(sp)
     ff8:	dd404617 	ldw	r21,280(sp)
     ffc:	dd004517 	ldw	r20,276(sp)
    1000:	dcc04417 	ldw	r19,272(sp)
    1004:	dc804317 	ldw	r18,268(sp)
    1008:	dc404217 	ldw	r17,264(sp)
    100c:	dc004117 	ldw	r16,260(sp)
    1010:	dec04b04 	addi	sp,sp,300
    1014:	f800283a 	ret
    1018:	00bfffc4 	movi	r2,-1
    101c:	003ff206 	br	fe8 <__alt_mem_Flash_flash_data+0xf4000fe8>
    1020:	dc002917 	ldw	r16,164(sp)
    1024:	003f6d06 	br	ddc <__alt_mem_Flash_flash_data+0xf4000ddc>
    1028:	1805883a 	mov	r2,r3
    102c:	8c400114 	ori	r17,r17,4
    1030:	1c000007 	ldb	r16,0(r3)
    1034:	003f7606 	br	e10 <__alt_mem_Flash_flash_data+0xf4000e10>
    1038:	1c000007 	ldb	r16,0(r3)
    103c:	18800044 	addi	r2,r3,1
    1040:	8286e726 	beq	r16,r10,2be0 <___svfprintf_internal_r+0x1f28>
    1044:	82fff404 	addi	r11,r16,-48
    1048:	1007883a 	mov	r3,r2
    104c:	0013883a 	mov	r9,zero
    1050:	2aff7036 	bltu	r5,r11,e14 <__alt_mem_Flash_flash_data+0xf4000e14>
    1054:	1c000007 	ldb	r16,0(r3)
    1058:	4a4002a4 	muli	r9,r9,10
    105c:	18c00044 	addi	r3,r3,1
    1060:	5a53883a 	add	r9,r11,r9
    1064:	82fff404 	addi	r11,r16,-48
    1068:	2afffa2e 	bgeu	r5,r11,1054 <__alt_mem_Flash_flash_data+0xf4001054>
    106c:	483f690e 	bge	r9,zero,e14 <__alt_mem_Flash_flash_data+0xf4000e14>
    1070:	027fffc4 	movi	r9,-1
    1074:	003f6706 	br	e14 <__alt_mem_Flash_flash_data+0xf4000e14>
    1078:	8c402014 	ori	r17,r17,128
    107c:	1805883a 	mov	r2,r3
    1080:	1c000007 	ldb	r16,0(r3)
    1084:	003f6206 	br	e10 <__alt_mem_Flash_flash_data+0xf4000e10>
    1088:	8c400414 	ori	r17,r17,16
    108c:	d8c02915 	stw	r3,164(sp)
    1090:	d9802785 	stb	r6,158(sp)
    1094:	8880080c 	andi	r2,r17,32
    1098:	d8c02d17 	ldw	r3,180(sp)
    109c:	10021526 	beq	r2,zero,18f4 <___svfprintf_internal_r+0xc3c>
    10a0:	db002d17 	ldw	r12,180(sp)
    10a4:	18800117 	ldw	r2,4(r3)
    10a8:	1cc00017 	ldw	r19,0(r3)
    10ac:	63000204 	addi	r12,r12,8
    10b0:	db002d15 	stw	r12,180(sp)
    10b4:	1039883a 	mov	fp,r2
    10b8:	10021916 	blt	r2,zero,1920 <___svfprintf_internal_r+0xc68>
    10bc:	dd402783 	ldbu	r21,158(sp)
    10c0:	da403215 	stw	r9,200(sp)
    10c4:	00800044 	movi	r2,1
    10c8:	9f06b03a 	or	r3,r19,fp
    10cc:	48000216 	blt	r9,zero,10d8 <___svfprintf_internal_r+0x420>
    10d0:	013fdfc4 	movi	r4,-129
    10d4:	8922703a 	and	r17,r17,r4
    10d8:	1802461e 	bne	r3,zero,19f4 <___svfprintf_internal_r+0xd3c>
    10dc:	48035426 	beq	r9,zero,1e30 <___svfprintf_internal_r+0x1178>
    10e0:	10803fcc 	andi	r2,r2,255
    10e4:	00c00044 	movi	r3,1
    10e8:	10c26726 	beq	r2,r3,1a88 <___svfprintf_internal_r+0xdd0>
    10ec:	00c00084 	movi	r3,2
    10f0:	10c2ea26 	beq	r2,r3,1c9c <___svfprintf_internal_r+0xfe4>
    10f4:	b007883a 	mov	r3,r22
    10f8:	9808d0fa 	srli	r4,r19,3
    10fc:	e00a977a 	slli	r5,fp,29
    1100:	e038d0fa 	srli	fp,fp,3
    1104:	9cc001cc 	andi	r19,r19,7
    1108:	98800c04 	addi	r2,r19,48
    110c:	18ffffc4 	addi	r3,r3,-1
    1110:	2926b03a 	or	r19,r5,r4
    1114:	18800005 	stb	r2,0(r3)
    1118:	9f08b03a 	or	r4,r19,fp
    111c:	203ff61e 	bne	r4,zero,10f8 <__alt_mem_Flash_flash_data+0xf40010f8>
    1120:	8900004c 	andi	r4,r17,1
    1124:	d8c03115 	stw	r3,196(sp)
    1128:	2002ea26 	beq	r4,zero,1cd4 <___svfprintf_internal_r+0x101c>
    112c:	10803fcc 	andi	r2,r2,255
    1130:	1080201c 	xori	r2,r2,128
    1134:	10bfe004 	addi	r2,r2,-128
    1138:	01000c04 	movi	r4,48
    113c:	11057526 	beq	r2,r4,2714 <___svfprintf_internal_r+0x1a5c>
    1140:	dac03117 	ldw	r11,196(sp)
    1144:	193fffc5 	stb	r4,-1(r3)
    1148:	5affffc4 	addi	r11,r11,-1
    114c:	dac03115 	stw	r11,196(sp)
    1150:	b2e5c83a 	sub	r18,r22,r11
    1154:	9005883a 	mov	r2,r18
    1158:	9240010e 	bge	r18,r9,1160 <___svfprintf_internal_r+0x4a8>
    115c:	4805883a 	mov	r2,r9
    1160:	d8802a15 	stw	r2,168(sp)
    1164:	d8003415 	stw	zero,208(sp)
    1168:	a8803fcc 	andi	r2,r21,255
    116c:	1080201c 	xori	r2,r2,128
    1170:	10bfe004 	addi	r2,r2,-128
    1174:	10000326 	beq	r2,zero,1184 <___svfprintf_internal_r+0x4cc>
    1178:	d8c02a17 	ldw	r3,168(sp)
    117c:	18c00044 	addi	r3,r3,1
    1180:	d8c02a15 	stw	r3,168(sp)
    1184:	8ac0008c 	andi	r11,r17,2
    1188:	dac02b15 	stw	r11,172(sp)
    118c:	58000326 	beq	r11,zero,119c <___svfprintf_internal_r+0x4e4>
    1190:	db002a17 	ldw	r12,168(sp)
    1194:	63000084 	addi	r12,r12,2
    1198:	db002a15 	stw	r12,168(sp)
    119c:	88c0210c 	andi	r3,r17,132
    11a0:	d8c02c15 	stw	r3,176(sp)
    11a4:	1802111e 	bne	r3,zero,19ec <___svfprintf_internal_r+0xd34>
    11a8:	dac02e17 	ldw	r11,184(sp)
    11ac:	db002a17 	ldw	r12,168(sp)
    11b0:	5b39c83a 	sub	fp,r11,r12
    11b4:	07020d0e 	bge	zero,fp,19ec <___svfprintf_internal_r+0xd34>
    11b8:	02400404 	movi	r9,16
    11bc:	d8c02017 	ldw	r3,128(sp)
    11c0:	d8801f17 	ldw	r2,124(sp)
    11c4:	4f058c0e 	bge	r9,fp,27f8 <___svfprintf_internal_r+0x1b40>
    11c8:	014000b4 	movhi	r5,2
    11cc:	e009883a 	mov	r4,fp
    11d0:	29638284 	addi	r5,r5,-29174
    11d4:	dc003c15 	stw	r16,240(sp)
    11d8:	9039883a 	mov	fp,r18
    11dc:	d9403615 	stw	r5,216(sp)
    11e0:	8825883a 	mov	r18,r17
    11e4:	482b883a 	mov	r21,r9
    11e8:	04c001c4 	movi	r19,7
    11ec:	dc002f17 	ldw	r16,188(sp)
    11f0:	2023883a 	mov	r17,r4
    11f4:	00000306 	br	1204 <___svfprintf_internal_r+0x54c>
    11f8:	8c7ffc04 	addi	r17,r17,-16
    11fc:	42000204 	addi	r8,r8,8
    1200:	ac40130e 	bge	r21,r17,1250 <___svfprintf_internal_r+0x598>
    1204:	02c000b4 	movhi	r11,2
    1208:	18c00404 	addi	r3,r3,16
    120c:	10800044 	addi	r2,r2,1
    1210:	5ae38284 	addi	r11,r11,-29174
    1214:	42c00015 	stw	r11,0(r8)
    1218:	45400115 	stw	r21,4(r8)
    121c:	d8c02015 	stw	r3,128(sp)
    1220:	d8801f15 	stw	r2,124(sp)
    1224:	98bff40e 	bge	r19,r2,11f8 <__alt_mem_Flash_flash_data+0xf40011f8>
    1228:	8009883a 	mov	r4,r16
    122c:	b80b883a 	mov	r5,r23
    1230:	b00d883a 	mov	r6,r22
    1234:	0006ca80 	call	6ca8 <__ssprint_r>
    1238:	103f671e 	bne	r2,zero,fd8 <__alt_mem_Flash_flash_data+0xf4000fd8>
    123c:	8c7ffc04 	addi	r17,r17,-16
    1240:	d8c02017 	ldw	r3,128(sp)
    1244:	d8801f17 	ldw	r2,124(sp)
    1248:	da000404 	addi	r8,sp,16
    124c:	ac7fed16 	blt	r21,r17,1204 <__alt_mem_Flash_flash_data+0xf4001204>
    1250:	dc003c17 	ldw	r16,240(sp)
    1254:	8809883a 	mov	r4,r17
    1258:	9023883a 	mov	r17,r18
    125c:	e025883a 	mov	r18,fp
    1260:	2039883a 	mov	fp,r4
    1264:	db003617 	ldw	r12,216(sp)
    1268:	e0c7883a 	add	r3,fp,r3
    126c:	10800044 	addi	r2,r2,1
    1270:	43000015 	stw	r12,0(r8)
    1274:	47000115 	stw	fp,4(r8)
    1278:	d8c02015 	stw	r3,128(sp)
    127c:	d8801f15 	stw	r2,124(sp)
    1280:	010001c4 	movi	r4,7
    1284:	20834416 	blt	r4,r2,1f98 <___svfprintf_internal_r+0x12e0>
    1288:	d8802787 	ldb	r2,158(sp)
    128c:	42000204 	addi	r8,r8,8
    1290:	10000c26 	beq	r2,zero,12c4 <___svfprintf_internal_r+0x60c>
    1294:	d8801f17 	ldw	r2,124(sp)
    1298:	d9002784 	addi	r4,sp,158
    129c:	18c00044 	addi	r3,r3,1
    12a0:	10800044 	addi	r2,r2,1
    12a4:	41000015 	stw	r4,0(r8)
    12a8:	01000044 	movi	r4,1
    12ac:	41000115 	stw	r4,4(r8)
    12b0:	d8c02015 	stw	r3,128(sp)
    12b4:	d8801f15 	stw	r2,124(sp)
    12b8:	010001c4 	movi	r4,7
    12bc:	2082f616 	blt	r4,r2,1e98 <___svfprintf_internal_r+0x11e0>
    12c0:	42000204 	addi	r8,r8,8
    12c4:	dac02b17 	ldw	r11,172(sp)
    12c8:	58000c26 	beq	r11,zero,12fc <___svfprintf_internal_r+0x644>
    12cc:	d8801f17 	ldw	r2,124(sp)
    12d0:	d9002704 	addi	r4,sp,156
    12d4:	18c00084 	addi	r3,r3,2
    12d8:	10800044 	addi	r2,r2,1
    12dc:	41000015 	stw	r4,0(r8)
    12e0:	01000084 	movi	r4,2
    12e4:	41000115 	stw	r4,4(r8)
    12e8:	d8c02015 	stw	r3,128(sp)
    12ec:	d8801f15 	stw	r2,124(sp)
    12f0:	010001c4 	movi	r4,7
    12f4:	2082e016 	blt	r4,r2,1e78 <___svfprintf_internal_r+0x11c0>
    12f8:	42000204 	addi	r8,r8,8
    12fc:	db002c17 	ldw	r12,176(sp)
    1300:	00802004 	movi	r2,128
    1304:	60822f26 	beq	r12,r2,1bc4 <___svfprintf_internal_r+0xf0c>
    1308:	db003217 	ldw	r12,200(sp)
    130c:	64abc83a 	sub	r21,r12,r18
    1310:	0540310e 	bge	zero,r21,13d8 <___svfprintf_internal_r+0x720>
    1314:	07000404 	movi	fp,16
    1318:	d8801f17 	ldw	r2,124(sp)
    131c:	e544270e 	bge	fp,r21,23bc <___svfprintf_internal_r+0x1704>
    1320:	014000b4 	movhi	r5,2
    1324:	a809883a 	mov	r4,r21
    1328:	29637e84 	addi	r5,r5,-29190
    132c:	dc002c15 	stw	r16,176(sp)
    1330:	902b883a 	mov	r21,r18
    1334:	d9402b15 	stw	r5,172(sp)
    1338:	8825883a 	mov	r18,r17
    133c:	04c001c4 	movi	r19,7
    1340:	dc002f17 	ldw	r16,188(sp)
    1344:	2023883a 	mov	r17,r4
    1348:	00000306 	br	1358 <___svfprintf_internal_r+0x6a0>
    134c:	8c7ffc04 	addi	r17,r17,-16
    1350:	42000204 	addi	r8,r8,8
    1354:	e440110e 	bge	fp,r17,139c <___svfprintf_internal_r+0x6e4>
    1358:	18c00404 	addi	r3,r3,16
    135c:	10800044 	addi	r2,r2,1
    1360:	45000015 	stw	r20,0(r8)
    1364:	47000115 	stw	fp,4(r8)
    1368:	d8c02015 	stw	r3,128(sp)
    136c:	d8801f15 	stw	r2,124(sp)
    1370:	98bff60e 	bge	r19,r2,134c <__alt_mem_Flash_flash_data+0xf400134c>
    1374:	8009883a 	mov	r4,r16
    1378:	b80b883a 	mov	r5,r23
    137c:	b00d883a 	mov	r6,r22
    1380:	0006ca80 	call	6ca8 <__ssprint_r>
    1384:	103f141e 	bne	r2,zero,fd8 <__alt_mem_Flash_flash_data+0xf4000fd8>
    1388:	8c7ffc04 	addi	r17,r17,-16
    138c:	d8c02017 	ldw	r3,128(sp)
    1390:	d8801f17 	ldw	r2,124(sp)
    1394:	da000404 	addi	r8,sp,16
    1398:	e47fef16 	blt	fp,r17,1358 <__alt_mem_Flash_flash_data+0xf4001358>
    139c:	dc002c17 	ldw	r16,176(sp)
    13a0:	8809883a 	mov	r4,r17
    13a4:	9023883a 	mov	r17,r18
    13a8:	a825883a 	mov	r18,r21
    13ac:	202b883a 	mov	r21,r4
    13b0:	dac02b17 	ldw	r11,172(sp)
    13b4:	1d47883a 	add	r3,r3,r21
    13b8:	10800044 	addi	r2,r2,1
    13bc:	42c00015 	stw	r11,0(r8)
    13c0:	45400115 	stw	r21,4(r8)
    13c4:	d8c02015 	stw	r3,128(sp)
    13c8:	d8801f15 	stw	r2,124(sp)
    13cc:	010001c4 	movi	r4,7
    13d0:	2082a116 	blt	r4,r2,1e58 <___svfprintf_internal_r+0x11a0>
    13d4:	42000204 	addi	r8,r8,8
    13d8:	8880400c 	andi	r2,r17,256
    13dc:	1001b01e 	bne	r2,zero,1aa0 <___svfprintf_internal_r+0xde8>
    13e0:	d8801f17 	ldw	r2,124(sp)
    13e4:	db003117 	ldw	r12,196(sp)
    13e8:	1c87883a 	add	r3,r3,r18
    13ec:	10800044 	addi	r2,r2,1
    13f0:	43000015 	stw	r12,0(r8)
    13f4:	44800115 	stw	r18,4(r8)
    13f8:	d8c02015 	stw	r3,128(sp)
    13fc:	d8801f15 	stw	r2,124(sp)
    1400:	010001c4 	movi	r4,7
    1404:	20828216 	blt	r4,r2,1e10 <___svfprintf_internal_r+0x1158>
    1408:	42000204 	addi	r8,r8,8
    140c:	8c40010c 	andi	r17,r17,4
    1410:	88003226 	beq	r17,zero,14dc <___svfprintf_internal_r+0x824>
    1414:	db002e17 	ldw	r12,184(sp)
    1418:	dac02a17 	ldw	r11,168(sp)
    141c:	62e1c83a 	sub	r16,r12,r11
    1420:	04002e0e 	bge	zero,r16,14dc <___svfprintf_internal_r+0x824>
    1424:	04400404 	movi	r17,16
    1428:	d8801f17 	ldw	r2,124(sp)
    142c:	8c05330e 	bge	r17,r16,28fc <___svfprintf_internal_r+0x1c44>
    1430:	010000b4 	movhi	r4,2
    1434:	21238284 	addi	r4,r4,-29174
    1438:	d9003615 	stw	r4,216(sp)
    143c:	048001c4 	movi	r18,7
    1440:	dcc02f17 	ldw	r19,188(sp)
    1444:	00000306 	br	1454 <___svfprintf_internal_r+0x79c>
    1448:	843ffc04 	addi	r16,r16,-16
    144c:	42000204 	addi	r8,r8,8
    1450:	8c00130e 	bge	r17,r16,14a0 <___svfprintf_internal_r+0x7e8>
    1454:	014000b4 	movhi	r5,2
    1458:	18c00404 	addi	r3,r3,16
    145c:	10800044 	addi	r2,r2,1
    1460:	29638284 	addi	r5,r5,-29174
    1464:	41400015 	stw	r5,0(r8)
    1468:	44400115 	stw	r17,4(r8)
    146c:	d8c02015 	stw	r3,128(sp)
    1470:	d8801f15 	stw	r2,124(sp)
    1474:	90bff40e 	bge	r18,r2,1448 <__alt_mem_Flash_flash_data+0xf4001448>
    1478:	9809883a 	mov	r4,r19
    147c:	b80b883a 	mov	r5,r23
    1480:	b00d883a 	mov	r6,r22
    1484:	0006ca80 	call	6ca8 <__ssprint_r>
    1488:	103ed31e 	bne	r2,zero,fd8 <__alt_mem_Flash_flash_data+0xf4000fd8>
    148c:	843ffc04 	addi	r16,r16,-16
    1490:	d8c02017 	ldw	r3,128(sp)
    1494:	d8801f17 	ldw	r2,124(sp)
    1498:	da000404 	addi	r8,sp,16
    149c:	8c3fed16 	blt	r17,r16,1454 <__alt_mem_Flash_flash_data+0xf4001454>
    14a0:	dac03617 	ldw	r11,216(sp)
    14a4:	1c07883a 	add	r3,r3,r16
    14a8:	10800044 	addi	r2,r2,1
    14ac:	42c00015 	stw	r11,0(r8)
    14b0:	44000115 	stw	r16,4(r8)
    14b4:	d8c02015 	stw	r3,128(sp)
    14b8:	d8801f15 	stw	r2,124(sp)
    14bc:	010001c4 	movi	r4,7
    14c0:	2080060e 	bge	r4,r2,14dc <___svfprintf_internal_r+0x824>
    14c4:	d9002f17 	ldw	r4,188(sp)
    14c8:	b80b883a 	mov	r5,r23
    14cc:	b00d883a 	mov	r6,r22
    14d0:	0006ca80 	call	6ca8 <__ssprint_r>
    14d4:	103ec01e 	bne	r2,zero,fd8 <__alt_mem_Flash_flash_data+0xf4000fd8>
    14d8:	d8c02017 	ldw	r3,128(sp)
    14dc:	d8802a17 	ldw	r2,168(sp)
    14e0:	db002e17 	ldw	r12,184(sp)
    14e4:	1300010e 	bge	r2,r12,14ec <___svfprintf_internal_r+0x834>
    14e8:	6005883a 	mov	r2,r12
    14ec:	dac03017 	ldw	r11,192(sp)
    14f0:	5897883a 	add	r11,r11,r2
    14f4:	dac03015 	stw	r11,192(sp)
    14f8:	1802331e 	bne	r3,zero,1dc8 <___svfprintf_internal_r+0x1110>
    14fc:	d8001f15 	stw	zero,124(sp)
    1500:	da000404 	addi	r8,sp,16
    1504:	003e1806 	br	d68 <__alt_mem_Flash_flash_data+0xf4000d68>
    1508:	db002d17 	ldw	r12,180(sp)
    150c:	dac02d17 	ldw	r11,180(sp)
    1510:	d8c02915 	stw	r3,164(sp)
    1514:	63000017 	ldw	r12,0(r12)
    1518:	5ac00117 	ldw	r11,4(r11)
    151c:	d9802785 	stb	r6,158(sp)
    1520:	6009883a 	mov	r4,r12
    1524:	580b883a 	mov	r5,r11
    1528:	db003715 	stw	r12,220(sp)
    152c:	da004015 	stw	r8,256(sp)
    1530:	da403f15 	stw	r9,252(sp)
    1534:	dac03815 	stw	r11,224(sp)
    1538:	0006b3c0 	call	6b3c <__fpclassifyd>
    153c:	db002d17 	ldw	r12,180(sp)
    1540:	04800044 	movi	r18,1
    1544:	da004017 	ldw	r8,256(sp)
    1548:	64c00204 	addi	r19,r12,8
    154c:	da403f17 	ldw	r9,252(sp)
    1550:	d9003717 	ldw	r4,220(sp)
    1554:	d9403817 	ldw	r5,224(sp)
    1558:	1483561e 	bne	r2,r18,22b4 <___svfprintf_internal_r+0x15fc>
    155c:	000d883a 	mov	r6,zero
    1560:	000f883a 	mov	r7,zero
    1564:	000b30c0 	call	b30c <__ledf2>
    1568:	da004017 	ldw	r8,256(sp)
    156c:	1004ee16 	blt	r2,zero,2928 <___svfprintf_internal_r+0x1c70>
    1570:	dd402783 	ldbu	r21,158(sp)
    1574:	008011c4 	movi	r2,71
    1578:	1404440e 	bge	r2,r16,268c <___svfprintf_internal_r+0x19d4>
    157c:	00c000b4 	movhi	r3,2
    1580:	18e36f04 	addi	r3,r3,-29252
    1584:	d8c03115 	stw	r3,196(sp)
    1588:	02c000c4 	movi	r11,3
    158c:	00bfdfc4 	movi	r2,-129
    1590:	dac02a15 	stw	r11,168(sp)
    1594:	88a2703a 	and	r17,r17,r2
    1598:	dcc02d15 	stw	r19,180(sp)
    159c:	5825883a 	mov	r18,r11
    15a0:	d8003215 	stw	zero,200(sp)
    15a4:	d8003415 	stw	zero,208(sp)
    15a8:	003eef06 	br	1168 <__alt_mem_Flash_flash_data+0xf4001168>
    15ac:	8c400214 	ori	r17,r17,8
    15b0:	1805883a 	mov	r2,r3
    15b4:	1c000007 	ldb	r16,0(r3)
    15b8:	003e1506 	br	e10 <__alt_mem_Flash_flash_data+0xf4000e10>
    15bc:	8c400414 	ori	r17,r17,16
    15c0:	d8c02915 	stw	r3,164(sp)
    15c4:	88c0080c 	andi	r3,r17,32
    15c8:	d8802d17 	ldw	r2,180(sp)
    15cc:	18005526 	beq	r3,zero,1724 <___svfprintf_internal_r+0xa6c>
    15d0:	dac02d17 	ldw	r11,180(sp)
    15d4:	14c00017 	ldw	r19,0(r2)
    15d8:	17000117 	ldw	fp,4(r2)
    15dc:	5ac00204 	addi	r11,r11,8
    15e0:	dac02d15 	stw	r11,180(sp)
    15e4:	00800044 	movi	r2,1
    15e8:	9f06b03a 	or	r3,r19,fp
    15ec:	d8002785 	stb	zero,158(sp)
    15f0:	da403215 	stw	r9,200(sp)
    15f4:	002b883a 	mov	r21,zero
    15f8:	003eb406 	br	10cc <__alt_mem_Flash_flash_data+0xf40010cc>
    15fc:	030000b4 	movhi	r12,2
    1600:	63237204 	addi	r12,r12,-29240
    1604:	d8c02915 	stw	r3,164(sp)
    1608:	d9802785 	stb	r6,158(sp)
    160c:	db003b15 	stw	r12,236(sp)
    1610:	88c0080c 	andi	r3,r17,32
    1614:	d8802d17 	ldw	r2,180(sp)
    1618:	18005626 	beq	r3,zero,1774 <___svfprintf_internal_r+0xabc>
    161c:	dac02d17 	ldw	r11,180(sp)
    1620:	14c00017 	ldw	r19,0(r2)
    1624:	17000117 	ldw	fp,4(r2)
    1628:	5ac00204 	addi	r11,r11,8
    162c:	dac02d15 	stw	r11,180(sp)
    1630:	8880004c 	andi	r2,r17,1
    1634:	10029326 	beq	r2,zero,2084 <___svfprintf_internal_r+0x13cc>
    1638:	9f06b03a 	or	r3,r19,fp
    163c:	18033526 	beq	r3,zero,2314 <___svfprintf_internal_r+0x165c>
    1640:	00800c04 	movi	r2,48
    1644:	d8802705 	stb	r2,156(sp)
    1648:	dc002745 	stb	r16,157(sp)
    164c:	8c400094 	ori	r17,r17,2
    1650:	00800084 	movi	r2,2
    1654:	003fe506 	br	15ec <__alt_mem_Flash_flash_data+0xf40015ec>
    1658:	1805883a 	mov	r2,r3
    165c:	d8002e15 	stw	zero,184(sp)
    1660:	82fff404 	addi	r11,r16,-48
    1664:	0019883a 	mov	r12,zero
    1668:	14000007 	ldb	r16,0(r2)
    166c:	630002a4 	muli	r12,r12,10
    1670:	18c00044 	addi	r3,r3,1
    1674:	1805883a 	mov	r2,r3
    1678:	62d9883a 	add	r12,r12,r11
    167c:	82fff404 	addi	r11,r16,-48
    1680:	2afff92e 	bgeu	r5,r11,1668 <__alt_mem_Flash_flash_data+0xf4001668>
    1684:	db002e15 	stw	r12,184(sp)
    1688:	003de206 	br	e14 <__alt_mem_Flash_flash_data+0xf4000e14>
    168c:	8c400814 	ori	r17,r17,32
    1690:	1805883a 	mov	r2,r3
    1694:	1c000007 	ldb	r16,0(r3)
    1698:	003ddd06 	br	e10 <__alt_mem_Flash_flash_data+0xf4000e10>
    169c:	dac02d17 	ldw	r11,180(sp)
    16a0:	db002d17 	ldw	r12,180(sp)
    16a4:	d8c02915 	stw	r3,164(sp)
    16a8:	5ac00017 	ldw	r11,0(r11)
    16ac:	d8002785 	stb	zero,158(sp)
    16b0:	64c00104 	addi	r19,r12,4
    16b4:	dac03115 	stw	r11,196(sp)
    16b8:	58048126 	beq	r11,zero,28c0 <___svfprintf_internal_r+0x1c08>
    16bc:	d9003117 	ldw	r4,196(sp)
    16c0:	48041716 	blt	r9,zero,2720 <___svfprintf_internal_r+0x1a68>
    16c4:	480d883a 	mov	r6,r9
    16c8:	000b883a 	mov	r5,zero
    16cc:	da004015 	stw	r8,256(sp)
    16d0:	da403f15 	stw	r9,252(sp)
    16d4:	00052b80 	call	52b8 <memchr>
    16d8:	da004017 	ldw	r8,256(sp)
    16dc:	da403f17 	ldw	r9,252(sp)
    16e0:	1004db26 	beq	r2,zero,2a50 <___svfprintf_internal_r+0x1d98>
    16e4:	d8c03117 	ldw	r3,196(sp)
    16e8:	10e5c83a 	sub	r18,r2,r3
    16ec:	4c80010e 	bge	r9,r18,16f4 <___svfprintf_internal_r+0xa3c>
    16f0:	4825883a 	mov	r18,r9
    16f4:	9005883a 	mov	r2,r18
    16f8:	90040e16 	blt	r18,zero,2734 <___svfprintf_internal_r+0x1a7c>
    16fc:	dd402783 	ldbu	r21,158(sp)
    1700:	d8802a15 	stw	r2,168(sp)
    1704:	dcc02d15 	stw	r19,180(sp)
    1708:	d8003215 	stw	zero,200(sp)
    170c:	d8003415 	stw	zero,208(sp)
    1710:	003e9506 	br	1168 <__alt_mem_Flash_flash_data+0xf4001168>
    1714:	d8c02915 	stw	r3,164(sp)
    1718:	88c0080c 	andi	r3,r17,32
    171c:	d8802d17 	ldw	r2,180(sp)
    1720:	183fab1e 	bne	r3,zero,15d0 <__alt_mem_Flash_flash_data+0xf40015d0>
    1724:	88c0040c 	andi	r3,r17,16
    1728:	1802681e 	bne	r3,zero,20cc <___svfprintf_internal_r+0x1414>
    172c:	88c0100c 	andi	r3,r17,64
    1730:	18026626 	beq	r3,zero,20cc <___svfprintf_internal_r+0x1414>
    1734:	dac02d17 	ldw	r11,180(sp)
    1738:	14c0000b 	ldhu	r19,0(r2)
    173c:	0039883a 	mov	fp,zero
    1740:	5ac00104 	addi	r11,r11,4
    1744:	dac02d15 	stw	r11,180(sp)
    1748:	00800044 	movi	r2,1
    174c:	9807883a 	mov	r3,r19
    1750:	003fa606 	br	15ec <__alt_mem_Flash_flash_data+0xf40015ec>
    1754:	008000b4 	movhi	r2,2
    1758:	10a37704 	addi	r2,r2,-29220
    175c:	d8c02915 	stw	r3,164(sp)
    1760:	d8803b15 	stw	r2,236(sp)
    1764:	d9802785 	stb	r6,158(sp)
    1768:	88c0080c 	andi	r3,r17,32
    176c:	d8802d17 	ldw	r2,180(sp)
    1770:	183faa1e 	bne	r3,zero,161c <__alt_mem_Flash_flash_data+0xf400161c>
    1774:	88c0040c 	andi	r3,r17,16
    1778:	1802e826 	beq	r3,zero,231c <___svfprintf_internal_r+0x1664>
    177c:	db002d17 	ldw	r12,180(sp)
    1780:	14c00017 	ldw	r19,0(r2)
    1784:	0039883a 	mov	fp,zero
    1788:	63000104 	addi	r12,r12,4
    178c:	db002d15 	stw	r12,180(sp)
    1790:	003fa706 	br	1630 <__alt_mem_Flash_flash_data+0xf4001630>
    1794:	30803fcc 	andi	r2,r6,255
    1798:	1080201c 	xori	r2,r2,128
    179c:	10bfe004 	addi	r2,r2,-128
    17a0:	1002d91e 	bne	r2,zero,2308 <___svfprintf_internal_r+0x1650>
    17a4:	1805883a 	mov	r2,r3
    17a8:	01800804 	movi	r6,32
    17ac:	1c000007 	ldb	r16,0(r3)
    17b0:	003d9706 	br	e10 <__alt_mem_Flash_flash_data+0xf4000e10>
    17b4:	8c400054 	ori	r17,r17,1
    17b8:	1805883a 	mov	r2,r3
    17bc:	1c000007 	ldb	r16,0(r3)
    17c0:	003d9306 	br	e10 <__alt_mem_Flash_flash_data+0xf4000e10>
    17c4:	dac02d17 	ldw	r11,180(sp)
    17c8:	db002d17 	ldw	r12,180(sp)
    17cc:	5ac00017 	ldw	r11,0(r11)
    17d0:	dac02e15 	stw	r11,184(sp)
    17d4:	62c00104 	addi	r11,r12,4
    17d8:	db002e17 	ldw	r12,184(sp)
    17dc:	60033e16 	blt	r12,zero,24d8 <___svfprintf_internal_r+0x1820>
    17e0:	dac02d15 	stw	r11,180(sp)
    17e4:	1805883a 	mov	r2,r3
    17e8:	1c000007 	ldb	r16,0(r3)
    17ec:	003d8806 	br	e10 <__alt_mem_Flash_flash_data+0xf4000e10>
    17f0:	1805883a 	mov	r2,r3
    17f4:	01800ac4 	movi	r6,43
    17f8:	1c000007 	ldb	r16,0(r3)
    17fc:	003d8406 	br	e10 <__alt_mem_Flash_flash_data+0xf4000e10>
    1800:	8c401014 	ori	r17,r17,64
    1804:	1805883a 	mov	r2,r3
    1808:	1c000007 	ldb	r16,0(r3)
    180c:	003d8006 	br	e10 <__alt_mem_Flash_flash_data+0xf4000e10>
    1810:	1c000007 	ldb	r16,0(r3)
    1814:	81c33626 	beq	r16,r7,24f0 <___svfprintf_internal_r+0x1838>
    1818:	8c400414 	ori	r17,r17,16
    181c:	1805883a 	mov	r2,r3
    1820:	003d7b06 	br	e10 <__alt_mem_Flash_flash_data+0xf4000e10>
    1824:	d8c02915 	stw	r3,164(sp)
    1828:	d9802785 	stb	r6,158(sp)
    182c:	8880080c 	andi	r2,r17,32
    1830:	1002c226 	beq	r2,zero,233c <___svfprintf_internal_r+0x1684>
    1834:	db002d17 	ldw	r12,180(sp)
    1838:	dac03017 	ldw	r11,192(sp)
    183c:	60800017 	ldw	r2,0(r12)
    1840:	5807d7fa 	srai	r3,r11,31
    1844:	63000104 	addi	r12,r12,4
    1848:	db002d15 	stw	r12,180(sp)
    184c:	12c00015 	stw	r11,0(r2)
    1850:	10c00115 	stw	r3,4(r2)
    1854:	003d4406 	br	d68 <__alt_mem_Flash_flash_data+0xf4000d68>
    1858:	db002d17 	ldw	r12,180(sp)
    185c:	00800c04 	movi	r2,48
    1860:	d8802705 	stb	r2,156(sp)
    1864:	64c00017 	ldw	r19,0(r12)
    1868:	00801e04 	movi	r2,120
    186c:	d8802745 	stb	r2,157(sp)
    1870:	008000b4 	movhi	r2,2
    1874:	10a37704 	addi	r2,r2,-29220
    1878:	63000104 	addi	r12,r12,4
    187c:	d8c02915 	stw	r3,164(sp)
    1880:	d8803b15 	stw	r2,236(sp)
    1884:	0039883a 	mov	fp,zero
    1888:	8c400094 	ori	r17,r17,2
    188c:	db002d15 	stw	r12,180(sp)
    1890:	00800084 	movi	r2,2
    1894:	04001e04 	movi	r16,120
    1898:	9807883a 	mov	r3,r19
    189c:	003f5306 	br	15ec <__alt_mem_Flash_flash_data+0xf40015ec>
    18a0:	db002d17 	ldw	r12,180(sp)
    18a4:	d8c02915 	stw	r3,164(sp)
    18a8:	dac01404 	addi	r11,sp,80
    18ac:	60800017 	ldw	r2,0(r12)
    18b0:	00c00044 	movi	r3,1
    18b4:	63000104 	addi	r12,r12,4
    18b8:	d8801405 	stb	r2,80(sp)
    18bc:	d8c02a15 	stw	r3,168(sp)
    18c0:	d8002785 	stb	zero,158(sp)
    18c4:	db002d15 	stw	r12,180(sp)
    18c8:	1825883a 	mov	r18,r3
    18cc:	d8003215 	stw	zero,200(sp)
    18d0:	d8003415 	stw	zero,208(sp)
    18d4:	dac03115 	stw	r11,196(sp)
    18d8:	0005883a 	mov	r2,zero
    18dc:	003e2906 	br	1184 <__alt_mem_Flash_flash_data+0xf4001184>
    18e0:	d8c02915 	stw	r3,164(sp)
    18e4:	d9802785 	stb	r6,158(sp)
    18e8:	8880080c 	andi	r2,r17,32
    18ec:	d8c02d17 	ldw	r3,180(sp)
    18f0:	103deb1e 	bne	r2,zero,10a0 <__alt_mem_Flash_flash_data+0xf40010a0>
    18f4:	8880040c 	andi	r2,r17,16
    18f8:	1001e51e 	bne	r2,zero,2090 <___svfprintf_internal_r+0x13d8>
    18fc:	8880100c 	andi	r2,r17,64
    1900:	1001e326 	beq	r2,zero,2090 <___svfprintf_internal_r+0x13d8>
    1904:	1cc0000f 	ldh	r19,0(r3)
    1908:	db002d17 	ldw	r12,180(sp)
    190c:	9839d7fa 	srai	fp,r19,31
    1910:	63000104 	addi	r12,r12,4
    1914:	db002d15 	stw	r12,180(sp)
    1918:	e005883a 	mov	r2,fp
    191c:	103de70e 	bge	r2,zero,10bc <__alt_mem_Flash_flash_data+0xf40010bc>
    1920:	04e7c83a 	sub	r19,zero,r19
    1924:	9804c03a 	cmpne	r2,r19,zero
    1928:	0739c83a 	sub	fp,zero,fp
    192c:	e0b9c83a 	sub	fp,fp,r2
    1930:	05400b44 	movi	r21,45
    1934:	dd402785 	stb	r21,158(sp)
    1938:	da403215 	stw	r9,200(sp)
    193c:	00800044 	movi	r2,1
    1940:	9f06b03a 	or	r3,r19,fp
    1944:	003de106 	br	10cc <__alt_mem_Flash_flash_data+0xf40010cc>
    1948:	8c400414 	ori	r17,r17,16
    194c:	d8c02915 	stw	r3,164(sp)
    1950:	8880080c 	andi	r2,r17,32
    1954:	10000b26 	beq	r2,zero,1984 <___svfprintf_internal_r+0xccc>
    1958:	db002d17 	ldw	r12,180(sp)
    195c:	0005883a 	mov	r2,zero
    1960:	64c00017 	ldw	r19,0(r12)
    1964:	67000117 	ldw	fp,4(r12)
    1968:	63000204 	addi	r12,r12,8
    196c:	db002d15 	stw	r12,180(sp)
    1970:	9f06b03a 	or	r3,r19,fp
    1974:	003f1d06 	br	15ec <__alt_mem_Flash_flash_data+0xf40015ec>
    1978:	d8c02915 	stw	r3,164(sp)
    197c:	8880080c 	andi	r2,r17,32
    1980:	103ff51e 	bne	r2,zero,1958 <__alt_mem_Flash_flash_data+0xf4001958>
    1984:	8880040c 	andi	r2,r17,16
    1988:	1001c81e 	bne	r2,zero,20ac <___svfprintf_internal_r+0x13f4>
    198c:	8880100c 	andi	r2,r17,64
    1990:	1001c626 	beq	r2,zero,20ac <___svfprintf_internal_r+0x13f4>
    1994:	db002d17 	ldw	r12,180(sp)
    1998:	0039883a 	mov	fp,zero
    199c:	0005883a 	mov	r2,zero
    19a0:	64c0000b 	ldhu	r19,0(r12)
    19a4:	63000104 	addi	r12,r12,4
    19a8:	db002d15 	stw	r12,180(sp)
    19ac:	9807883a 	mov	r3,r19
    19b0:	003f0e06 	br	15ec <__alt_mem_Flash_flash_data+0xf40015ec>
    19b4:	d8c02915 	stw	r3,164(sp)
    19b8:	d9802785 	stb	r6,158(sp)
    19bc:	803d8026 	beq	r16,zero,fc0 <__alt_mem_Flash_flash_data+0xf4000fc0>
    19c0:	02c00044 	movi	r11,1
    19c4:	db001404 	addi	r12,sp,80
    19c8:	dac02a15 	stw	r11,168(sp)
    19cc:	dc001405 	stb	r16,80(sp)
    19d0:	d8002785 	stb	zero,158(sp)
    19d4:	5825883a 	mov	r18,r11
    19d8:	d8003215 	stw	zero,200(sp)
    19dc:	d8003415 	stw	zero,208(sp)
    19e0:	db003115 	stw	r12,196(sp)
    19e4:	0005883a 	mov	r2,zero
    19e8:	003de606 	br	1184 <__alt_mem_Flash_flash_data+0xf4001184>
    19ec:	d8c02017 	ldw	r3,128(sp)
    19f0:	003e2706 	br	1290 <__alt_mem_Flash_flash_data+0xf4001290>
    19f4:	10803fcc 	andi	r2,r2,255
    19f8:	00c00044 	movi	r3,1
    19fc:	10fdbb1e 	bne	r2,r3,10ec <__alt_mem_Flash_flash_data+0xf40010ec>
    1a00:	e000021e 	bne	fp,zero,1a0c <___svfprintf_internal_r+0xd54>
    1a04:	00800244 	movi	r2,9
    1a08:	14c01f2e 	bgeu	r2,r19,1a88 <___svfprintf_internal_r+0xdd0>
    1a0c:	dc002a15 	stw	r16,168(sp)
    1a10:	dc402b15 	stw	r17,172(sp)
    1a14:	9821883a 	mov	r16,r19
    1a18:	e023883a 	mov	r17,fp
    1a1c:	b025883a 	mov	r18,r22
    1a20:	4827883a 	mov	r19,r9
    1a24:	4039883a 	mov	fp,r8
    1a28:	8009883a 	mov	r4,r16
    1a2c:	880b883a 	mov	r5,r17
    1a30:	01800284 	movi	r6,10
    1a34:	000f883a 	mov	r7,zero
    1a38:	00099840 	call	9984 <__umoddi3>
    1a3c:	10800c04 	addi	r2,r2,48
    1a40:	94bfffc4 	addi	r18,r18,-1
    1a44:	8009883a 	mov	r4,r16
    1a48:	880b883a 	mov	r5,r17
    1a4c:	01800284 	movi	r6,10
    1a50:	000f883a 	mov	r7,zero
    1a54:	90800005 	stb	r2,0(r18)
    1a58:	00093c40 	call	93c4 <__udivdi3>
    1a5c:	1021883a 	mov	r16,r2
    1a60:	10c4b03a 	or	r2,r2,r3
    1a64:	1823883a 	mov	r17,r3
    1a68:	103fef1e 	bne	r2,zero,1a28 <__alt_mem_Flash_flash_data+0xf4001a28>
    1a6c:	dc803115 	stw	r18,196(sp)
    1a70:	dc002a17 	ldw	r16,168(sp)
    1a74:	dc402b17 	ldw	r17,172(sp)
    1a78:	9813883a 	mov	r9,r19
    1a7c:	e011883a 	mov	r8,fp
    1a80:	b4a5c83a 	sub	r18,r22,r18
    1a84:	003db306 	br	1154 <__alt_mem_Flash_flash_data+0xf4001154>
    1a88:	9cc00c04 	addi	r19,r19,48
    1a8c:	db001dc4 	addi	r12,sp,119
    1a90:	dcc01dc5 	stb	r19,119(sp)
    1a94:	dc803d17 	ldw	r18,244(sp)
    1a98:	db003115 	stw	r12,196(sp)
    1a9c:	003dad06 	br	1154 <__alt_mem_Flash_flash_data+0xf4001154>
    1aa0:	00801944 	movi	r2,101
    1aa4:	14008d0e 	bge	r2,r16,1cdc <___svfprintf_internal_r+0x1024>
    1aa8:	d9003717 	ldw	r4,220(sp)
    1aac:	d9403817 	ldw	r5,224(sp)
    1ab0:	000d883a 	mov	r6,zero
    1ab4:	000f883a 	mov	r7,zero
    1ab8:	d8c03e15 	stw	r3,248(sp)
    1abc:	da004015 	stw	r8,256(sp)
    1ac0:	000b1a80 	call	b1a8 <__eqdf2>
    1ac4:	d8c03e17 	ldw	r3,248(sp)
    1ac8:	da004017 	ldw	r8,256(sp)
    1acc:	1000fd1e 	bne	r2,zero,1ec4 <___svfprintf_internal_r+0x120c>
    1ad0:	d8801f17 	ldw	r2,124(sp)
    1ad4:	010000b4 	movhi	r4,2
    1ad8:	21237e04 	addi	r4,r4,-29192
    1adc:	18c00044 	addi	r3,r3,1
    1ae0:	10800044 	addi	r2,r2,1
    1ae4:	41000015 	stw	r4,0(r8)
    1ae8:	01000044 	movi	r4,1
    1aec:	41000115 	stw	r4,4(r8)
    1af0:	d8c02015 	stw	r3,128(sp)
    1af4:	d8801f15 	stw	r2,124(sp)
    1af8:	010001c4 	movi	r4,7
    1afc:	20823316 	blt	r4,r2,23cc <___svfprintf_internal_r+0x1714>
    1b00:	42000204 	addi	r8,r8,8
    1b04:	d8802617 	ldw	r2,152(sp)
    1b08:	dac03317 	ldw	r11,204(sp)
    1b0c:	12c00216 	blt	r2,r11,1b18 <___svfprintf_internal_r+0xe60>
    1b10:	8880004c 	andi	r2,r17,1
    1b14:	103e3d26 	beq	r2,zero,140c <__alt_mem_Flash_flash_data+0xf400140c>
    1b18:	db003917 	ldw	r12,228(sp)
    1b1c:	d8801f17 	ldw	r2,124(sp)
    1b20:	dac03517 	ldw	r11,212(sp)
    1b24:	1b07883a 	add	r3,r3,r12
    1b28:	10800044 	addi	r2,r2,1
    1b2c:	42c00015 	stw	r11,0(r8)
    1b30:	43000115 	stw	r12,4(r8)
    1b34:	d8c02015 	stw	r3,128(sp)
    1b38:	d8801f15 	stw	r2,124(sp)
    1b3c:	010001c4 	movi	r4,7
    1b40:	20826f16 	blt	r4,r2,2500 <___svfprintf_internal_r+0x1848>
    1b44:	42000204 	addi	r8,r8,8
    1b48:	db003317 	ldw	r12,204(sp)
    1b4c:	643fffc4 	addi	r16,r12,-1
    1b50:	043e2e0e 	bge	zero,r16,140c <__alt_mem_Flash_flash_data+0xf400140c>
    1b54:	04800404 	movi	r18,16
    1b58:	d8801f17 	ldw	r2,124(sp)
    1b5c:	9400a00e 	bge	r18,r16,1de0 <___svfprintf_internal_r+0x1128>
    1b60:	014000b4 	movhi	r5,2
    1b64:	29637e84 	addi	r5,r5,-29190
    1b68:	d9402b15 	stw	r5,172(sp)
    1b6c:	054001c4 	movi	r21,7
    1b70:	dcc02f17 	ldw	r19,188(sp)
    1b74:	00000306 	br	1b84 <___svfprintf_internal_r+0xecc>
    1b78:	42000204 	addi	r8,r8,8
    1b7c:	843ffc04 	addi	r16,r16,-16
    1b80:	94009a0e 	bge	r18,r16,1dec <___svfprintf_internal_r+0x1134>
    1b84:	18c00404 	addi	r3,r3,16
    1b88:	10800044 	addi	r2,r2,1
    1b8c:	45000015 	stw	r20,0(r8)
    1b90:	44800115 	stw	r18,4(r8)
    1b94:	d8c02015 	stw	r3,128(sp)
    1b98:	d8801f15 	stw	r2,124(sp)
    1b9c:	a8bff60e 	bge	r21,r2,1b78 <__alt_mem_Flash_flash_data+0xf4001b78>
    1ba0:	9809883a 	mov	r4,r19
    1ba4:	b80b883a 	mov	r5,r23
    1ba8:	b00d883a 	mov	r6,r22
    1bac:	0006ca80 	call	6ca8 <__ssprint_r>
    1bb0:	103d091e 	bne	r2,zero,fd8 <__alt_mem_Flash_flash_data+0xf4000fd8>
    1bb4:	d8c02017 	ldw	r3,128(sp)
    1bb8:	d8801f17 	ldw	r2,124(sp)
    1bbc:	da000404 	addi	r8,sp,16
    1bc0:	003fee06 	br	1b7c <__alt_mem_Flash_flash_data+0xf4001b7c>
    1bc4:	dac02e17 	ldw	r11,184(sp)
    1bc8:	db002a17 	ldw	r12,168(sp)
    1bcc:	5b2bc83a 	sub	r21,r11,r12
    1bd0:	057dcd0e 	bge	zero,r21,1308 <__alt_mem_Flash_flash_data+0xf4001308>
    1bd4:	07000404 	movi	fp,16
    1bd8:	d8801f17 	ldw	r2,124(sp)
    1bdc:	e5435d0e 	bge	fp,r21,2954 <___svfprintf_internal_r+0x1c9c>
    1be0:	014000b4 	movhi	r5,2
    1be4:	a809883a 	mov	r4,r21
    1be8:	29637e84 	addi	r5,r5,-29190
    1bec:	dc002c15 	stw	r16,176(sp)
    1bf0:	902b883a 	mov	r21,r18
    1bf4:	d9402b15 	stw	r5,172(sp)
    1bf8:	8825883a 	mov	r18,r17
    1bfc:	04c001c4 	movi	r19,7
    1c00:	dc002f17 	ldw	r16,188(sp)
    1c04:	2023883a 	mov	r17,r4
    1c08:	00000306 	br	1c18 <___svfprintf_internal_r+0xf60>
    1c0c:	8c7ffc04 	addi	r17,r17,-16
    1c10:	42000204 	addi	r8,r8,8
    1c14:	e440110e 	bge	fp,r17,1c5c <___svfprintf_internal_r+0xfa4>
    1c18:	18c00404 	addi	r3,r3,16
    1c1c:	10800044 	addi	r2,r2,1
    1c20:	45000015 	stw	r20,0(r8)
    1c24:	47000115 	stw	fp,4(r8)
    1c28:	d8c02015 	stw	r3,128(sp)
    1c2c:	d8801f15 	stw	r2,124(sp)
    1c30:	98bff60e 	bge	r19,r2,1c0c <__alt_mem_Flash_flash_data+0xf4001c0c>
    1c34:	8009883a 	mov	r4,r16
    1c38:	b80b883a 	mov	r5,r23
    1c3c:	b00d883a 	mov	r6,r22
    1c40:	0006ca80 	call	6ca8 <__ssprint_r>
    1c44:	103ce41e 	bne	r2,zero,fd8 <__alt_mem_Flash_flash_data+0xf4000fd8>
    1c48:	8c7ffc04 	addi	r17,r17,-16
    1c4c:	d8c02017 	ldw	r3,128(sp)
    1c50:	d8801f17 	ldw	r2,124(sp)
    1c54:	da000404 	addi	r8,sp,16
    1c58:	e47fef16 	blt	fp,r17,1c18 <__alt_mem_Flash_flash_data+0xf4001c18>
    1c5c:	dc002c17 	ldw	r16,176(sp)
    1c60:	8809883a 	mov	r4,r17
    1c64:	9023883a 	mov	r17,r18
    1c68:	a825883a 	mov	r18,r21
    1c6c:	202b883a 	mov	r21,r4
    1c70:	dac02b17 	ldw	r11,172(sp)
    1c74:	1d47883a 	add	r3,r3,r21
    1c78:	10800044 	addi	r2,r2,1
    1c7c:	42c00015 	stw	r11,0(r8)
    1c80:	45400115 	stw	r21,4(r8)
    1c84:	d8c02015 	stw	r3,128(sp)
    1c88:	d8801f15 	stw	r2,124(sp)
    1c8c:	010001c4 	movi	r4,7
    1c90:	20818016 	blt	r4,r2,2294 <___svfprintf_internal_r+0x15dc>
    1c94:	42000204 	addi	r8,r8,8
    1c98:	003d9b06 	br	1308 <__alt_mem_Flash_flash_data+0xf4001308>
    1c9c:	d9403b17 	ldw	r5,236(sp)
    1ca0:	b007883a 	mov	r3,r22
    1ca4:	988003cc 	andi	r2,r19,15
    1ca8:	e008973a 	slli	r4,fp,28
    1cac:	2885883a 	add	r2,r5,r2
    1cb0:	9826d13a 	srli	r19,r19,4
    1cb4:	10800003 	ldbu	r2,0(r2)
    1cb8:	e038d13a 	srli	fp,fp,4
    1cbc:	18ffffc4 	addi	r3,r3,-1
    1cc0:	24e6b03a 	or	r19,r4,r19
    1cc4:	18800005 	stb	r2,0(r3)
    1cc8:	9f04b03a 	or	r2,r19,fp
    1ccc:	103ff51e 	bne	r2,zero,1ca4 <__alt_mem_Flash_flash_data+0xf4001ca4>
    1cd0:	d8c03115 	stw	r3,196(sp)
    1cd4:	b0e5c83a 	sub	r18,r22,r3
    1cd8:	003d1e06 	br	1154 <__alt_mem_Flash_flash_data+0xf4001154>
    1cdc:	db003317 	ldw	r12,204(sp)
    1ce0:	00800044 	movi	r2,1
    1ce4:	18c00044 	addi	r3,r3,1
    1ce8:	13014b0e 	bge	r2,r12,2218 <___svfprintf_internal_r+0x1560>
    1cec:	dc001f17 	ldw	r16,124(sp)
    1cf0:	dac03117 	ldw	r11,196(sp)
    1cf4:	00800044 	movi	r2,1
    1cf8:	84000044 	addi	r16,r16,1
    1cfc:	40800115 	stw	r2,4(r8)
    1d00:	42c00015 	stw	r11,0(r8)
    1d04:	d8c02015 	stw	r3,128(sp)
    1d08:	dc001f15 	stw	r16,124(sp)
    1d0c:	008001c4 	movi	r2,7
    1d10:	14014e16 	blt	r2,r16,224c <___svfprintf_internal_r+0x1594>
    1d14:	42000204 	addi	r8,r8,8
    1d18:	db003917 	ldw	r12,228(sp)
    1d1c:	dac03517 	ldw	r11,212(sp)
    1d20:	84000044 	addi	r16,r16,1
    1d24:	1b07883a 	add	r3,r3,r12
    1d28:	42c00015 	stw	r11,0(r8)
    1d2c:	43000115 	stw	r12,4(r8)
    1d30:	d8c02015 	stw	r3,128(sp)
    1d34:	dc001f15 	stw	r16,124(sp)
    1d38:	008001c4 	movi	r2,7
    1d3c:	14014c16 	blt	r2,r16,2270 <___svfprintf_internal_r+0x15b8>
    1d40:	44800204 	addi	r18,r8,8
    1d44:	d9003717 	ldw	r4,220(sp)
    1d48:	d9403817 	ldw	r5,224(sp)
    1d4c:	000d883a 	mov	r6,zero
    1d50:	000f883a 	mov	r7,zero
    1d54:	d8c03e15 	stw	r3,248(sp)
    1d58:	000b1a80 	call	b1a8 <__eqdf2>
    1d5c:	d8c03e17 	ldw	r3,248(sp)
    1d60:	db003317 	ldw	r12,204(sp)
    1d64:	10009526 	beq	r2,zero,1fbc <___svfprintf_internal_r+0x1304>
    1d68:	dac03117 	ldw	r11,196(sp)
    1d6c:	60bfffc4 	addi	r2,r12,-1
    1d70:	1887883a 	add	r3,r3,r2
    1d74:	59000044 	addi	r4,r11,1
    1d78:	84000044 	addi	r16,r16,1
    1d7c:	90800115 	stw	r2,4(r18)
    1d80:	91000015 	stw	r4,0(r18)
    1d84:	d8c02015 	stw	r3,128(sp)
    1d88:	dc001f15 	stw	r16,124(sp)
    1d8c:	008001c4 	movi	r2,7
    1d90:	1400b316 	blt	r2,r16,2060 <___svfprintf_internal_r+0x13a8>
    1d94:	94800204 	addi	r18,r18,8
    1d98:	dac03a17 	ldw	r11,232(sp)
    1d9c:	dd4022c4 	addi	r21,sp,139
    1da0:	84000044 	addi	r16,r16,1
    1da4:	1ac7883a 	add	r3,r3,r11
    1da8:	95400015 	stw	r21,0(r18)
    1dac:	92c00115 	stw	r11,4(r18)
    1db0:	d8c02015 	stw	r3,128(sp)
    1db4:	dc001f15 	stw	r16,124(sp)
    1db8:	008001c4 	movi	r2,7
    1dbc:	14001416 	blt	r2,r16,1e10 <___svfprintf_internal_r+0x1158>
    1dc0:	92000204 	addi	r8,r18,8
    1dc4:	003d9106 	br	140c <__alt_mem_Flash_flash_data+0xf400140c>
    1dc8:	d9002f17 	ldw	r4,188(sp)
    1dcc:	b80b883a 	mov	r5,r23
    1dd0:	b00d883a 	mov	r6,r22
    1dd4:	0006ca80 	call	6ca8 <__ssprint_r>
    1dd8:	103dc826 	beq	r2,zero,14fc <__alt_mem_Flash_flash_data+0xf40014fc>
    1ddc:	003c7e06 	br	fd8 <__alt_mem_Flash_flash_data+0xf4000fd8>
    1de0:	010000b4 	movhi	r4,2
    1de4:	21237e84 	addi	r4,r4,-29190
    1de8:	d9002b15 	stw	r4,172(sp)
    1dec:	dac02b17 	ldw	r11,172(sp)
    1df0:	1c07883a 	add	r3,r3,r16
    1df4:	44000115 	stw	r16,4(r8)
    1df8:	42c00015 	stw	r11,0(r8)
    1dfc:	10800044 	addi	r2,r2,1
    1e00:	d8c02015 	stw	r3,128(sp)
    1e04:	d8801f15 	stw	r2,124(sp)
    1e08:	010001c4 	movi	r4,7
    1e0c:	20bd7e0e 	bge	r4,r2,1408 <__alt_mem_Flash_flash_data+0xf4001408>
    1e10:	d9002f17 	ldw	r4,188(sp)
    1e14:	b80b883a 	mov	r5,r23
    1e18:	b00d883a 	mov	r6,r22
    1e1c:	0006ca80 	call	6ca8 <__ssprint_r>
    1e20:	103c6d1e 	bne	r2,zero,fd8 <__alt_mem_Flash_flash_data+0xf4000fd8>
    1e24:	d8c02017 	ldw	r3,128(sp)
    1e28:	da000404 	addi	r8,sp,16
    1e2c:	003d7706 	br	140c <__alt_mem_Flash_flash_data+0xf400140c>
    1e30:	10803fcc 	andi	r2,r2,255
    1e34:	1000201e 	bne	r2,zero,1eb8 <___svfprintf_internal_r+0x1200>
    1e38:	8880004c 	andi	r2,r17,1
    1e3c:	10001e26 	beq	r2,zero,1eb8 <___svfprintf_internal_r+0x1200>
    1e40:	00800c04 	movi	r2,48
    1e44:	d8c01dc4 	addi	r3,sp,119
    1e48:	d8801dc5 	stb	r2,119(sp)
    1e4c:	dc803d17 	ldw	r18,244(sp)
    1e50:	d8c03115 	stw	r3,196(sp)
    1e54:	003cbf06 	br	1154 <__alt_mem_Flash_flash_data+0xf4001154>
    1e58:	d9002f17 	ldw	r4,188(sp)
    1e5c:	b80b883a 	mov	r5,r23
    1e60:	b00d883a 	mov	r6,r22
    1e64:	0006ca80 	call	6ca8 <__ssprint_r>
    1e68:	103c5b1e 	bne	r2,zero,fd8 <__alt_mem_Flash_flash_data+0xf4000fd8>
    1e6c:	d8c02017 	ldw	r3,128(sp)
    1e70:	da000404 	addi	r8,sp,16
    1e74:	003d5806 	br	13d8 <__alt_mem_Flash_flash_data+0xf40013d8>
    1e78:	d9002f17 	ldw	r4,188(sp)
    1e7c:	b80b883a 	mov	r5,r23
    1e80:	b00d883a 	mov	r6,r22
    1e84:	0006ca80 	call	6ca8 <__ssprint_r>
    1e88:	103c531e 	bne	r2,zero,fd8 <__alt_mem_Flash_flash_data+0xf4000fd8>
    1e8c:	d8c02017 	ldw	r3,128(sp)
    1e90:	da000404 	addi	r8,sp,16
    1e94:	003d1906 	br	12fc <__alt_mem_Flash_flash_data+0xf40012fc>
    1e98:	d9002f17 	ldw	r4,188(sp)
    1e9c:	b80b883a 	mov	r5,r23
    1ea0:	b00d883a 	mov	r6,r22
    1ea4:	0006ca80 	call	6ca8 <__ssprint_r>
    1ea8:	103c4b1e 	bne	r2,zero,fd8 <__alt_mem_Flash_flash_data+0xf4000fd8>
    1eac:	d8c02017 	ldw	r3,128(sp)
    1eb0:	da000404 	addi	r8,sp,16
    1eb4:	003d0306 	br	12c4 <__alt_mem_Flash_flash_data+0xf40012c4>
    1eb8:	0025883a 	mov	r18,zero
    1ebc:	dd803115 	stw	r22,196(sp)
    1ec0:	003ca406 	br	1154 <__alt_mem_Flash_flash_data+0xf4001154>
    1ec4:	dc002617 	ldw	r16,152(sp)
    1ec8:	0401480e 	bge	zero,r16,23ec <___svfprintf_internal_r+0x1734>
    1ecc:	db003117 	ldw	r12,196(sp)
    1ed0:	dac03317 	ldw	r11,204(sp)
    1ed4:	62e1883a 	add	r16,r12,r11
    1ed8:	db003417 	ldw	r12,208(sp)
    1edc:	5825883a 	mov	r18,r11
    1ee0:	62c0010e 	bge	r12,r11,1ee8 <___svfprintf_internal_r+0x1230>
    1ee4:	6025883a 	mov	r18,r12
    1ee8:	04800b0e 	bge	zero,r18,1f18 <___svfprintf_internal_r+0x1260>
    1eec:	d8801f17 	ldw	r2,124(sp)
    1ef0:	dac03117 	ldw	r11,196(sp)
    1ef4:	1c87883a 	add	r3,r3,r18
    1ef8:	10800044 	addi	r2,r2,1
    1efc:	42c00015 	stw	r11,0(r8)
    1f00:	44800115 	stw	r18,4(r8)
    1f04:	d8c02015 	stw	r3,128(sp)
    1f08:	d8801f15 	stw	r2,124(sp)
    1f0c:	010001c4 	movi	r4,7
    1f10:	20823f16 	blt	r4,r2,2810 <___svfprintf_internal_r+0x1b58>
    1f14:	42000204 	addi	r8,r8,8
    1f18:	90023b16 	blt	r18,zero,2808 <___svfprintf_internal_r+0x1b50>
    1f1c:	db003417 	ldw	r12,208(sp)
    1f20:	64a5c83a 	sub	r18,r12,r18
    1f24:	0480780e 	bge	zero,r18,2108 <___svfprintf_internal_r+0x1450>
    1f28:	05400404 	movi	r21,16
    1f2c:	d8801f17 	ldw	r2,124(sp)
    1f30:	ac81140e 	bge	r21,r18,2384 <___svfprintf_internal_r+0x16cc>
    1f34:	014000b4 	movhi	r5,2
    1f38:	29637e84 	addi	r5,r5,-29190
    1f3c:	d9402b15 	stw	r5,172(sp)
    1f40:	070001c4 	movi	fp,7
    1f44:	dcc02f17 	ldw	r19,188(sp)
    1f48:	00000306 	br	1f58 <___svfprintf_internal_r+0x12a0>
    1f4c:	42000204 	addi	r8,r8,8
    1f50:	94bffc04 	addi	r18,r18,-16
    1f54:	ac810e0e 	bge	r21,r18,2390 <___svfprintf_internal_r+0x16d8>
    1f58:	18c00404 	addi	r3,r3,16
    1f5c:	10800044 	addi	r2,r2,1
    1f60:	45000015 	stw	r20,0(r8)
    1f64:	45400115 	stw	r21,4(r8)
    1f68:	d8c02015 	stw	r3,128(sp)
    1f6c:	d8801f15 	stw	r2,124(sp)
    1f70:	e0bff60e 	bge	fp,r2,1f4c <__alt_mem_Flash_flash_data+0xf4001f4c>
    1f74:	9809883a 	mov	r4,r19
    1f78:	b80b883a 	mov	r5,r23
    1f7c:	b00d883a 	mov	r6,r22
    1f80:	0006ca80 	call	6ca8 <__ssprint_r>
    1f84:	103c141e 	bne	r2,zero,fd8 <__alt_mem_Flash_flash_data+0xf4000fd8>
    1f88:	d8c02017 	ldw	r3,128(sp)
    1f8c:	d8801f17 	ldw	r2,124(sp)
    1f90:	da000404 	addi	r8,sp,16
    1f94:	003fee06 	br	1f50 <__alt_mem_Flash_flash_data+0xf4001f50>
    1f98:	d9002f17 	ldw	r4,188(sp)
    1f9c:	b80b883a 	mov	r5,r23
    1fa0:	b00d883a 	mov	r6,r22
    1fa4:	0006ca80 	call	6ca8 <__ssprint_r>
    1fa8:	103c0b1e 	bne	r2,zero,fd8 <__alt_mem_Flash_flash_data+0xf4000fd8>
    1fac:	d8c02017 	ldw	r3,128(sp)
    1fb0:	d8802787 	ldb	r2,158(sp)
    1fb4:	da000404 	addi	r8,sp,16
    1fb8:	003cb506 	br	1290 <__alt_mem_Flash_flash_data+0xf4001290>
    1fbc:	657fffc4 	addi	r21,r12,-1
    1fc0:	057f750e 	bge	zero,r21,1d98 <__alt_mem_Flash_flash_data+0xf4001d98>
    1fc4:	07000404 	movi	fp,16
    1fc8:	e542ed0e 	bge	fp,r21,2b80 <___svfprintf_internal_r+0x1ec8>
    1fcc:	010000b4 	movhi	r4,2
    1fd0:	21237e84 	addi	r4,r4,-29190
    1fd4:	d9002b15 	stw	r4,172(sp)
    1fd8:	01c001c4 	movi	r7,7
    1fdc:	dcc02f17 	ldw	r19,188(sp)
    1fe0:	00000306 	br	1ff0 <___svfprintf_internal_r+0x1338>
    1fe4:	ad7ffc04 	addi	r21,r21,-16
    1fe8:	94800204 	addi	r18,r18,8
    1fec:	e540130e 	bge	fp,r21,203c <___svfprintf_internal_r+0x1384>
    1ff0:	18c00404 	addi	r3,r3,16
    1ff4:	84000044 	addi	r16,r16,1
    1ff8:	95000015 	stw	r20,0(r18)
    1ffc:	97000115 	stw	fp,4(r18)
    2000:	d8c02015 	stw	r3,128(sp)
    2004:	dc001f15 	stw	r16,124(sp)
    2008:	3c3ff60e 	bge	r7,r16,1fe4 <__alt_mem_Flash_flash_data+0xf4001fe4>
    200c:	9809883a 	mov	r4,r19
    2010:	b80b883a 	mov	r5,r23
    2014:	b00d883a 	mov	r6,r22
    2018:	d9c03e15 	stw	r7,248(sp)
    201c:	0006ca80 	call	6ca8 <__ssprint_r>
    2020:	d9c03e17 	ldw	r7,248(sp)
    2024:	103bec1e 	bne	r2,zero,fd8 <__alt_mem_Flash_flash_data+0xf4000fd8>
    2028:	ad7ffc04 	addi	r21,r21,-16
    202c:	d8c02017 	ldw	r3,128(sp)
    2030:	dc001f17 	ldw	r16,124(sp)
    2034:	dc800404 	addi	r18,sp,16
    2038:	e57fed16 	blt	fp,r21,1ff0 <__alt_mem_Flash_flash_data+0xf4001ff0>
    203c:	dac02b17 	ldw	r11,172(sp)
    2040:	1d47883a 	add	r3,r3,r21
    2044:	84000044 	addi	r16,r16,1
    2048:	92c00015 	stw	r11,0(r18)
    204c:	95400115 	stw	r21,4(r18)
    2050:	d8c02015 	stw	r3,128(sp)
    2054:	dc001f15 	stw	r16,124(sp)
    2058:	008001c4 	movi	r2,7
    205c:	143f4d0e 	bge	r2,r16,1d94 <__alt_mem_Flash_flash_data+0xf4001d94>
    2060:	d9002f17 	ldw	r4,188(sp)
    2064:	b80b883a 	mov	r5,r23
    2068:	b00d883a 	mov	r6,r22
    206c:	0006ca80 	call	6ca8 <__ssprint_r>
    2070:	103bd91e 	bne	r2,zero,fd8 <__alt_mem_Flash_flash_data+0xf4000fd8>
    2074:	d8c02017 	ldw	r3,128(sp)
    2078:	dc001f17 	ldw	r16,124(sp)
    207c:	dc800404 	addi	r18,sp,16
    2080:	003f4506 	br	1d98 <__alt_mem_Flash_flash_data+0xf4001d98>
    2084:	00800084 	movi	r2,2
    2088:	9f06b03a 	or	r3,r19,fp
    208c:	003d5706 	br	15ec <__alt_mem_Flash_flash_data+0xf40015ec>
    2090:	1cc00017 	ldw	r19,0(r3)
    2094:	dac02d17 	ldw	r11,180(sp)
    2098:	9839d7fa 	srai	fp,r19,31
    209c:	5ac00104 	addi	r11,r11,4
    20a0:	dac02d15 	stw	r11,180(sp)
    20a4:	e005883a 	mov	r2,fp
    20a8:	003c0306 	br	10b8 <__alt_mem_Flash_flash_data+0xf40010b8>
    20ac:	dac02d17 	ldw	r11,180(sp)
    20b0:	0039883a 	mov	fp,zero
    20b4:	0005883a 	mov	r2,zero
    20b8:	5cc00017 	ldw	r19,0(r11)
    20bc:	5ac00104 	addi	r11,r11,4
    20c0:	dac02d15 	stw	r11,180(sp)
    20c4:	9807883a 	mov	r3,r19
    20c8:	003d4806 	br	15ec <__alt_mem_Flash_flash_data+0xf40015ec>
    20cc:	db002d17 	ldw	r12,180(sp)
    20d0:	14c00017 	ldw	r19,0(r2)
    20d4:	0039883a 	mov	fp,zero
    20d8:	63000104 	addi	r12,r12,4
    20dc:	db002d15 	stw	r12,180(sp)
    20e0:	00800044 	movi	r2,1
    20e4:	9807883a 	mov	r3,r19
    20e8:	003d4006 	br	15ec <__alt_mem_Flash_flash_data+0xf40015ec>
    20ec:	d9002f17 	ldw	r4,188(sp)
    20f0:	b80b883a 	mov	r5,r23
    20f4:	b00d883a 	mov	r6,r22
    20f8:	0006ca80 	call	6ca8 <__ssprint_r>
    20fc:	103bb61e 	bne	r2,zero,fd8 <__alt_mem_Flash_flash_data+0xf4000fd8>
    2100:	d8c02017 	ldw	r3,128(sp)
    2104:	da000404 	addi	r8,sp,16
    2108:	db003117 	ldw	r12,196(sp)
    210c:	dac03417 	ldw	r11,208(sp)
    2110:	d8802617 	ldw	r2,152(sp)
    2114:	62e5883a 	add	r18,r12,r11
    2118:	db003317 	ldw	r12,204(sp)
    211c:	13000216 	blt	r2,r12,2128 <___svfprintf_internal_r+0x1470>
    2120:	8900004c 	andi	r4,r17,1
    2124:	20000c26 	beq	r4,zero,2158 <___svfprintf_internal_r+0x14a0>
    2128:	dac03917 	ldw	r11,228(sp)
    212c:	d9001f17 	ldw	r4,124(sp)
    2130:	db003517 	ldw	r12,212(sp)
    2134:	1ac7883a 	add	r3,r3,r11
    2138:	21000044 	addi	r4,r4,1
    213c:	43000015 	stw	r12,0(r8)
    2140:	42c00115 	stw	r11,4(r8)
    2144:	d8c02015 	stw	r3,128(sp)
    2148:	d9001f15 	stw	r4,124(sp)
    214c:	014001c4 	movi	r5,7
    2150:	2901b716 	blt	r5,r4,2830 <___svfprintf_internal_r+0x1b78>
    2154:	42000204 	addi	r8,r8,8
    2158:	dac03317 	ldw	r11,204(sp)
    215c:	8489c83a 	sub	r4,r16,r18
    2160:	5885c83a 	sub	r2,r11,r2
    2164:	1021883a 	mov	r16,r2
    2168:	2080010e 	bge	r4,r2,2170 <___svfprintf_internal_r+0x14b8>
    216c:	2021883a 	mov	r16,r4
    2170:	04000a0e 	bge	zero,r16,219c <___svfprintf_internal_r+0x14e4>
    2174:	d9001f17 	ldw	r4,124(sp)
    2178:	1c07883a 	add	r3,r3,r16
    217c:	44800015 	stw	r18,0(r8)
    2180:	21000044 	addi	r4,r4,1
    2184:	44000115 	stw	r16,4(r8)
    2188:	d8c02015 	stw	r3,128(sp)
    218c:	d9001f15 	stw	r4,124(sp)
    2190:	014001c4 	movi	r5,7
    2194:	2901bf16 	blt	r5,r4,2894 <___svfprintf_internal_r+0x1bdc>
    2198:	42000204 	addi	r8,r8,8
    219c:	8001bb16 	blt	r16,zero,288c <___svfprintf_internal_r+0x1bd4>
    21a0:	1421c83a 	sub	r16,r2,r16
    21a4:	043c990e 	bge	zero,r16,140c <__alt_mem_Flash_flash_data+0xf400140c>
    21a8:	04800404 	movi	r18,16
    21ac:	d8801f17 	ldw	r2,124(sp)
    21b0:	943f0b0e 	bge	r18,r16,1de0 <__alt_mem_Flash_flash_data+0xf4001de0>
    21b4:	014000b4 	movhi	r5,2
    21b8:	29637e84 	addi	r5,r5,-29190
    21bc:	d9402b15 	stw	r5,172(sp)
    21c0:	054001c4 	movi	r21,7
    21c4:	dcc02f17 	ldw	r19,188(sp)
    21c8:	00000306 	br	21d8 <___svfprintf_internal_r+0x1520>
    21cc:	42000204 	addi	r8,r8,8
    21d0:	843ffc04 	addi	r16,r16,-16
    21d4:	943f050e 	bge	r18,r16,1dec <__alt_mem_Flash_flash_data+0xf4001dec>
    21d8:	18c00404 	addi	r3,r3,16
    21dc:	10800044 	addi	r2,r2,1
    21e0:	45000015 	stw	r20,0(r8)
    21e4:	44800115 	stw	r18,4(r8)
    21e8:	d8c02015 	stw	r3,128(sp)
    21ec:	d8801f15 	stw	r2,124(sp)
    21f0:	a8bff60e 	bge	r21,r2,21cc <__alt_mem_Flash_flash_data+0xf40021cc>
    21f4:	9809883a 	mov	r4,r19
    21f8:	b80b883a 	mov	r5,r23
    21fc:	b00d883a 	mov	r6,r22
    2200:	0006ca80 	call	6ca8 <__ssprint_r>
    2204:	103b741e 	bne	r2,zero,fd8 <__alt_mem_Flash_flash_data+0xf4000fd8>
    2208:	d8c02017 	ldw	r3,128(sp)
    220c:	d8801f17 	ldw	r2,124(sp)
    2210:	da000404 	addi	r8,sp,16
    2214:	003fee06 	br	21d0 <__alt_mem_Flash_flash_data+0xf40021d0>
    2218:	8888703a 	and	r4,r17,r2
    221c:	203eb31e 	bne	r4,zero,1cec <__alt_mem_Flash_flash_data+0xf4001cec>
    2220:	dc001f17 	ldw	r16,124(sp)
    2224:	db003117 	ldw	r12,196(sp)
    2228:	40800115 	stw	r2,4(r8)
    222c:	84000044 	addi	r16,r16,1
    2230:	43000015 	stw	r12,0(r8)
    2234:	d8c02015 	stw	r3,128(sp)
    2238:	dc001f15 	stw	r16,124(sp)
    223c:	008001c4 	movi	r2,7
    2240:	143f8716 	blt	r2,r16,2060 <__alt_mem_Flash_flash_data+0xf4002060>
    2244:	44800204 	addi	r18,r8,8
    2248:	003ed306 	br	1d98 <__alt_mem_Flash_flash_data+0xf4001d98>
    224c:	d9002f17 	ldw	r4,188(sp)
    2250:	b80b883a 	mov	r5,r23
    2254:	b00d883a 	mov	r6,r22
    2258:	0006ca80 	call	6ca8 <__ssprint_r>
    225c:	103b5e1e 	bne	r2,zero,fd8 <__alt_mem_Flash_flash_data+0xf4000fd8>
    2260:	d8c02017 	ldw	r3,128(sp)
    2264:	dc001f17 	ldw	r16,124(sp)
    2268:	da000404 	addi	r8,sp,16
    226c:	003eaa06 	br	1d18 <__alt_mem_Flash_flash_data+0xf4001d18>
    2270:	d9002f17 	ldw	r4,188(sp)
    2274:	b80b883a 	mov	r5,r23
    2278:	b00d883a 	mov	r6,r22
    227c:	0006ca80 	call	6ca8 <__ssprint_r>
    2280:	103b551e 	bne	r2,zero,fd8 <__alt_mem_Flash_flash_data+0xf4000fd8>
    2284:	d8c02017 	ldw	r3,128(sp)
    2288:	dc001f17 	ldw	r16,124(sp)
    228c:	dc800404 	addi	r18,sp,16
    2290:	003eac06 	br	1d44 <__alt_mem_Flash_flash_data+0xf4001d44>
    2294:	d9002f17 	ldw	r4,188(sp)
    2298:	b80b883a 	mov	r5,r23
    229c:	b00d883a 	mov	r6,r22
    22a0:	0006ca80 	call	6ca8 <__ssprint_r>
    22a4:	103b4c1e 	bne	r2,zero,fd8 <__alt_mem_Flash_flash_data+0xf4000fd8>
    22a8:	d8c02017 	ldw	r3,128(sp)
    22ac:	da000404 	addi	r8,sp,16
    22b0:	003c1506 	br	1308 <__alt_mem_Flash_flash_data+0xf4001308>
    22b4:	da004015 	stw	r8,256(sp)
    22b8:	da403f15 	stw	r9,252(sp)
    22bc:	0006b3c0 	call	6b3c <__fpclassifyd>
    22c0:	da004017 	ldw	r8,256(sp)
    22c4:	da403f17 	ldw	r9,252(sp)
    22c8:	1000951e 	bne	r2,zero,2520 <___svfprintf_internal_r+0x1868>
    22cc:	008011c4 	movi	r2,71
    22d0:	1400fb16 	blt	r2,r16,26c0 <___svfprintf_internal_r+0x1a08>
    22d4:	030000b4 	movhi	r12,2
    22d8:	63237004 	addi	r12,r12,-29248
    22dc:	db003115 	stw	r12,196(sp)
    22e0:	00c000c4 	movi	r3,3
    22e4:	00bfdfc4 	movi	r2,-129
    22e8:	d8c02a15 	stw	r3,168(sp)
    22ec:	88a2703a 	and	r17,r17,r2
    22f0:	dd402783 	ldbu	r21,158(sp)
    22f4:	dcc02d15 	stw	r19,180(sp)
    22f8:	1825883a 	mov	r18,r3
    22fc:	d8003215 	stw	zero,200(sp)
    2300:	d8003415 	stw	zero,208(sp)
    2304:	003b9806 	br	1168 <__alt_mem_Flash_flash_data+0xf4001168>
    2308:	1c000007 	ldb	r16,0(r3)
    230c:	1805883a 	mov	r2,r3
    2310:	003abf06 	br	e10 <__alt_mem_Flash_flash_data+0xf4000e10>
    2314:	00800084 	movi	r2,2
    2318:	003cb406 	br	15ec <__alt_mem_Flash_flash_data+0xf40015ec>
    231c:	88c0100c 	andi	r3,r17,64
    2320:	1800f626 	beq	r3,zero,26fc <___svfprintf_internal_r+0x1a44>
    2324:	dac02d17 	ldw	r11,180(sp)
    2328:	14c0000b 	ldhu	r19,0(r2)
    232c:	0039883a 	mov	fp,zero
    2330:	5ac00104 	addi	r11,r11,4
    2334:	dac02d15 	stw	r11,180(sp)
    2338:	003cbd06 	br	1630 <__alt_mem_Flash_flash_data+0xf4001630>
    233c:	8880040c 	andi	r2,r17,16
    2340:	1000091e 	bne	r2,zero,2368 <___svfprintf_internal_r+0x16b0>
    2344:	8c40100c 	andi	r17,r17,64
    2348:	88000726 	beq	r17,zero,2368 <___svfprintf_internal_r+0x16b0>
    234c:	db002d17 	ldw	r12,180(sp)
    2350:	dac03017 	ldw	r11,192(sp)
    2354:	60800017 	ldw	r2,0(r12)
    2358:	63000104 	addi	r12,r12,4
    235c:	db002d15 	stw	r12,180(sp)
    2360:	12c0000d 	sth	r11,0(r2)
    2364:	003a8006 	br	d68 <__alt_mem_Flash_flash_data+0xf4000d68>
    2368:	db002d17 	ldw	r12,180(sp)
    236c:	dac03017 	ldw	r11,192(sp)
    2370:	60800017 	ldw	r2,0(r12)
    2374:	63000104 	addi	r12,r12,4
    2378:	db002d15 	stw	r12,180(sp)
    237c:	12c00015 	stw	r11,0(r2)
    2380:	003a7906 	br	d68 <__alt_mem_Flash_flash_data+0xf4000d68>
    2384:	010000b4 	movhi	r4,2
    2388:	21237e84 	addi	r4,r4,-29190
    238c:	d9002b15 	stw	r4,172(sp)
    2390:	dac02b17 	ldw	r11,172(sp)
    2394:	1c87883a 	add	r3,r3,r18
    2398:	10800044 	addi	r2,r2,1
    239c:	42c00015 	stw	r11,0(r8)
    23a0:	44800115 	stw	r18,4(r8)
    23a4:	d8c02015 	stw	r3,128(sp)
    23a8:	d8801f15 	stw	r2,124(sp)
    23ac:	010001c4 	movi	r4,7
    23b0:	20bf4e16 	blt	r4,r2,20ec <__alt_mem_Flash_flash_data+0xf40020ec>
    23b4:	42000204 	addi	r8,r8,8
    23b8:	003f5306 	br	2108 <__alt_mem_Flash_flash_data+0xf4002108>
    23bc:	010000b4 	movhi	r4,2
    23c0:	21237e84 	addi	r4,r4,-29190
    23c4:	d9002b15 	stw	r4,172(sp)
    23c8:	003bf906 	br	13b0 <__alt_mem_Flash_flash_data+0xf40013b0>
    23cc:	d9002f17 	ldw	r4,188(sp)
    23d0:	b80b883a 	mov	r5,r23
    23d4:	b00d883a 	mov	r6,r22
    23d8:	0006ca80 	call	6ca8 <__ssprint_r>
    23dc:	103afe1e 	bne	r2,zero,fd8 <__alt_mem_Flash_flash_data+0xf4000fd8>
    23e0:	d8c02017 	ldw	r3,128(sp)
    23e4:	da000404 	addi	r8,sp,16
    23e8:	003dc606 	br	1b04 <__alt_mem_Flash_flash_data+0xf4001b04>
    23ec:	d8801f17 	ldw	r2,124(sp)
    23f0:	030000b4 	movhi	r12,2
    23f4:	01000044 	movi	r4,1
    23f8:	18c00044 	addi	r3,r3,1
    23fc:	10800044 	addi	r2,r2,1
    2400:	63237e04 	addi	r12,r12,-29192
    2404:	41000115 	stw	r4,4(r8)
    2408:	43000015 	stw	r12,0(r8)
    240c:	d8c02015 	stw	r3,128(sp)
    2410:	d8801f15 	stw	r2,124(sp)
    2414:	010001c4 	movi	r4,7
    2418:	2080ad16 	blt	r4,r2,26d0 <___svfprintf_internal_r+0x1a18>
    241c:	42000204 	addi	r8,r8,8
    2420:	8000041e 	bne	r16,zero,2434 <___svfprintf_internal_r+0x177c>
    2424:	dac03317 	ldw	r11,204(sp)
    2428:	5800021e 	bne	r11,zero,2434 <___svfprintf_internal_r+0x177c>
    242c:	8880004c 	andi	r2,r17,1
    2430:	103bf626 	beq	r2,zero,140c <__alt_mem_Flash_flash_data+0xf400140c>
    2434:	db003917 	ldw	r12,228(sp)
    2438:	d8801f17 	ldw	r2,124(sp)
    243c:	dac03517 	ldw	r11,212(sp)
    2440:	1b07883a 	add	r3,r3,r12
    2444:	10800044 	addi	r2,r2,1
    2448:	42c00015 	stw	r11,0(r8)
    244c:	43000115 	stw	r12,4(r8)
    2450:	d8c02015 	stw	r3,128(sp)
    2454:	d8801f15 	stw	r2,124(sp)
    2458:	010001c4 	movi	r4,7
    245c:	20818616 	blt	r4,r2,2a78 <___svfprintf_internal_r+0x1dc0>
    2460:	42000204 	addi	r8,r8,8
    2464:	0421c83a 	sub	r16,zero,r16
    2468:	0400bc0e 	bge	zero,r16,275c <___svfprintf_internal_r+0x1aa4>
    246c:	04800404 	movi	r18,16
    2470:	9400f80e 	bge	r18,r16,2854 <___svfprintf_internal_r+0x1b9c>
    2474:	010000b4 	movhi	r4,2
    2478:	21237e84 	addi	r4,r4,-29190
    247c:	d9002b15 	stw	r4,172(sp)
    2480:	054001c4 	movi	r21,7
    2484:	dcc02f17 	ldw	r19,188(sp)
    2488:	00000306 	br	2498 <___svfprintf_internal_r+0x17e0>
    248c:	42000204 	addi	r8,r8,8
    2490:	843ffc04 	addi	r16,r16,-16
    2494:	9400f20e 	bge	r18,r16,2860 <___svfprintf_internal_r+0x1ba8>
    2498:	18c00404 	addi	r3,r3,16
    249c:	10800044 	addi	r2,r2,1
    24a0:	45000015 	stw	r20,0(r8)
    24a4:	44800115 	stw	r18,4(r8)
    24a8:	d8c02015 	stw	r3,128(sp)
    24ac:	d8801f15 	stw	r2,124(sp)
    24b0:	a8bff60e 	bge	r21,r2,248c <__alt_mem_Flash_flash_data+0xf400248c>
    24b4:	9809883a 	mov	r4,r19
    24b8:	b80b883a 	mov	r5,r23
    24bc:	b00d883a 	mov	r6,r22
    24c0:	0006ca80 	call	6ca8 <__ssprint_r>
    24c4:	103ac41e 	bne	r2,zero,fd8 <__alt_mem_Flash_flash_data+0xf4000fd8>
    24c8:	d8c02017 	ldw	r3,128(sp)
    24cc:	d8801f17 	ldw	r2,124(sp)
    24d0:	da000404 	addi	r8,sp,16
    24d4:	003fee06 	br	2490 <__alt_mem_Flash_flash_data+0xf4002490>
    24d8:	db002e17 	ldw	r12,184(sp)
    24dc:	1805883a 	mov	r2,r3
    24e0:	dac02d15 	stw	r11,180(sp)
    24e4:	0319c83a 	sub	r12,zero,r12
    24e8:	db002e15 	stw	r12,184(sp)
    24ec:	003acf06 	br	102c <__alt_mem_Flash_flash_data+0xf400102c>
    24f0:	18800044 	addi	r2,r3,1
    24f4:	8c400814 	ori	r17,r17,32
    24f8:	1c000047 	ldb	r16,1(r3)
    24fc:	003a4406 	br	e10 <__alt_mem_Flash_flash_data+0xf4000e10>
    2500:	d9002f17 	ldw	r4,188(sp)
    2504:	b80b883a 	mov	r5,r23
    2508:	b00d883a 	mov	r6,r22
    250c:	0006ca80 	call	6ca8 <__ssprint_r>
    2510:	103ab11e 	bne	r2,zero,fd8 <__alt_mem_Flash_flash_data+0xf4000fd8>
    2514:	d8c02017 	ldw	r3,128(sp)
    2518:	da000404 	addi	r8,sp,16
    251c:	003d8a06 	br	1b48 <__alt_mem_Flash_flash_data+0xf4001b48>
    2520:	057ff7c4 	movi	r21,-33
    2524:	00bfffc4 	movi	r2,-1
    2528:	856a703a 	and	r21,r16,r21
    252c:	48807126 	beq	r9,r2,26f4 <___svfprintf_internal_r+0x1a3c>
    2530:	008011c4 	movi	r2,71
    2534:	a8814d26 	beq	r21,r2,2a6c <___svfprintf_internal_r+0x1db4>
    2538:	db003817 	ldw	r12,224(sp)
    253c:	8ac04014 	ori	r11,r17,256
    2540:	dac02d15 	stw	r11,180(sp)
    2544:	60015616 	blt	r12,zero,2aa0 <___svfprintf_internal_r+0x1de8>
    2548:	dc803817 	ldw	r18,224(sp)
    254c:	d8002a05 	stb	zero,168(sp)
    2550:	00801984 	movi	r2,102
    2554:	80808c26 	beq	r16,r2,2788 <___svfprintf_internal_r+0x1ad0>
    2558:	00801184 	movi	r2,70
    255c:	80808a26 	beq	r16,r2,2788 <___svfprintf_internal_r+0x1ad0>
    2560:	00801144 	movi	r2,69
    2564:	a8815226 	beq	r21,r2,2ab0 <___svfprintf_internal_r+0x1df8>
    2568:	4839883a 	mov	fp,r9
    256c:	d8802604 	addi	r2,sp,152
    2570:	d8800115 	stw	r2,4(sp)
    2574:	d9002f17 	ldw	r4,188(sp)
    2578:	d8802504 	addi	r2,sp,148
    257c:	d9403717 	ldw	r5,220(sp)
    2580:	d8800215 	stw	r2,8(sp)
    2584:	d8802104 	addi	r2,sp,132
    2588:	df000015 	stw	fp,0(sp)
    258c:	d8800315 	stw	r2,12(sp)
    2590:	900d883a 	mov	r6,r18
    2594:	01c00084 	movi	r7,2
    2598:	da004015 	stw	r8,256(sp)
    259c:	da403f15 	stw	r9,252(sp)
    25a0:	0002e480 	call	2e48 <_dtoa_r>
    25a4:	d8803115 	stw	r2,196(sp)
    25a8:	008019c4 	movi	r2,103
    25ac:	da004017 	ldw	r8,256(sp)
    25b0:	da403f17 	ldw	r9,252(sp)
    25b4:	80800226 	beq	r16,r2,25c0 <___svfprintf_internal_r+0x1908>
    25b8:	008011c4 	movi	r2,71
    25bc:	8080841e 	bne	r16,r2,27d0 <___svfprintf_internal_r+0x1b18>
    25c0:	8880004c 	andi	r2,r17,1
    25c4:	10014f26 	beq	r2,zero,2b04 <___svfprintf_internal_r+0x1e4c>
    25c8:	db003117 	ldw	r12,196(sp)
    25cc:	6715883a 	add	r10,r12,fp
    25d0:	d9003717 	ldw	r4,220(sp)
    25d4:	900b883a 	mov	r5,r18
    25d8:	000d883a 	mov	r6,zero
    25dc:	000f883a 	mov	r7,zero
    25e0:	da004015 	stw	r8,256(sp)
    25e4:	da403f15 	stw	r9,252(sp)
    25e8:	da803e15 	stw	r10,248(sp)
    25ec:	000b1a80 	call	b1a8 <__eqdf2>
    25f0:	da004017 	ldw	r8,256(sp)
    25f4:	da403f17 	ldw	r9,252(sp)
    25f8:	da803e17 	ldw	r10,248(sp)
    25fc:	1000d926 	beq	r2,zero,2964 <___svfprintf_internal_r+0x1cac>
    2600:	d8802117 	ldw	r2,132(sp)
    2604:	1280062e 	bgeu	r2,r10,2620 <___svfprintf_internal_r+0x1968>
    2608:	01000c04 	movi	r4,48
    260c:	10c00044 	addi	r3,r2,1
    2610:	d8c02115 	stw	r3,132(sp)
    2614:	11000005 	stb	r4,0(r2)
    2618:	d8802117 	ldw	r2,132(sp)
    261c:	12bffb36 	bltu	r2,r10,260c <__alt_mem_Flash_flash_data+0xf400260c>
    2620:	db003117 	ldw	r12,196(sp)
    2624:	1305c83a 	sub	r2,r2,r12
    2628:	d8803315 	stw	r2,204(sp)
    262c:	008011c4 	movi	r2,71
    2630:	a880b626 	beq	r21,r2,290c <___svfprintf_internal_r+0x1c54>
    2634:	00801944 	movi	r2,101
    2638:	14017c0e 	bge	r2,r16,2c2c <___svfprintf_internal_r+0x1f74>
    263c:	00801984 	movi	r2,102
    2640:	80812626 	beq	r16,r2,2adc <___svfprintf_internal_r+0x1e24>
    2644:	db002617 	ldw	r12,152(sp)
    2648:	db003415 	stw	r12,208(sp)
    264c:	db003417 	ldw	r12,208(sp)
    2650:	dac03317 	ldw	r11,204(sp)
    2654:	62c11816 	blt	r12,r11,2ab8 <___svfprintf_internal_r+0x1e00>
    2658:	8c40004c 	andi	r17,r17,1
    265c:	88013b1e 	bne	r17,zero,2b4c <___svfprintf_internal_r+0x1e94>
    2660:	6005883a 	mov	r2,r12
    2664:	60012516 	blt	r12,zero,2afc <___svfprintf_internal_r+0x1e44>
    2668:	dc803417 	ldw	r18,208(sp)
    266c:	df002a07 	ldb	fp,168(sp)
    2670:	e000b01e 	bne	fp,zero,2934 <___svfprintf_internal_r+0x1c7c>
    2674:	dc402d17 	ldw	r17,180(sp)
    2678:	dd402783 	ldbu	r21,158(sp)
    267c:	d8802a15 	stw	r2,168(sp)
    2680:	dcc02d15 	stw	r19,180(sp)
    2684:	d8003215 	stw	zero,200(sp)
    2688:	003ab706 	br	1168 <__alt_mem_Flash_flash_data+0xf4001168>
    268c:	008000b4 	movhi	r2,2
    2690:	10a36e04 	addi	r2,r2,-29256
    2694:	d8803115 	stw	r2,196(sp)
    2698:	003bbb06 	br	1588 <__alt_mem_Flash_flash_data+0xf4001588>
    269c:	d9002f17 	ldw	r4,188(sp)
    26a0:	04001004 	movi	r16,64
    26a4:	800b883a 	mov	r5,r16
    26a8:	0004b100 	call	4b10 <_malloc_r>
    26ac:	b8800015 	stw	r2,0(r23)
    26b0:	b8800415 	stw	r2,16(r23)
    26b4:	10015f26 	beq	r2,zero,2c34 <___svfprintf_internal_r+0x1f7c>
    26b8:	bc000515 	stw	r16,20(r23)
    26bc:	00399806 	br	d20 <__alt_mem_Flash_flash_data+0xf4000d20>
    26c0:	008000b4 	movhi	r2,2
    26c4:	10a37104 	addi	r2,r2,-29244
    26c8:	d8803115 	stw	r2,196(sp)
    26cc:	003f0406 	br	22e0 <__alt_mem_Flash_flash_data+0xf40022e0>
    26d0:	d9002f17 	ldw	r4,188(sp)
    26d4:	b80b883a 	mov	r5,r23
    26d8:	b00d883a 	mov	r6,r22
    26dc:	0006ca80 	call	6ca8 <__ssprint_r>
    26e0:	103a3d1e 	bne	r2,zero,fd8 <__alt_mem_Flash_flash_data+0xf4000fd8>
    26e4:	dc002617 	ldw	r16,152(sp)
    26e8:	d8c02017 	ldw	r3,128(sp)
    26ec:	da000404 	addi	r8,sp,16
    26f0:	003f4b06 	br	2420 <__alt_mem_Flash_flash_data+0xf4002420>
    26f4:	02400184 	movi	r9,6
    26f8:	003f8f06 	br	2538 <__alt_mem_Flash_flash_data+0xf4002538>
    26fc:	db002d17 	ldw	r12,180(sp)
    2700:	14c00017 	ldw	r19,0(r2)
    2704:	0039883a 	mov	fp,zero
    2708:	63000104 	addi	r12,r12,4
    270c:	db002d15 	stw	r12,180(sp)
    2710:	003bc706 	br	1630 <__alt_mem_Flash_flash_data+0xf4001630>
    2714:	d8c03117 	ldw	r3,196(sp)
    2718:	b0e5c83a 	sub	r18,r22,r3
    271c:	003a8d06 	br	1154 <__alt_mem_Flash_flash_data+0xf4001154>
    2720:	da004015 	stw	r8,256(sp)
    2724:	0000c200 	call	c20 <strlen>
    2728:	1025883a 	mov	r18,r2
    272c:	da004017 	ldw	r8,256(sp)
    2730:	903bf20e 	bge	r18,zero,16fc <__alt_mem_Flash_flash_data+0xf40016fc>
    2734:	0005883a 	mov	r2,zero
    2738:	003bf006 	br	16fc <__alt_mem_Flash_flash_data+0xf40016fc>
    273c:	d9002f17 	ldw	r4,188(sp)
    2740:	b80b883a 	mov	r5,r23
    2744:	b00d883a 	mov	r6,r22
    2748:	0006ca80 	call	6ca8 <__ssprint_r>
    274c:	103a221e 	bne	r2,zero,fd8 <__alt_mem_Flash_flash_data+0xf4000fd8>
    2750:	d8c02017 	ldw	r3,128(sp)
    2754:	d8801f17 	ldw	r2,124(sp)
    2758:	da000404 	addi	r8,sp,16
    275c:	db003317 	ldw	r12,204(sp)
    2760:	dac03117 	ldw	r11,196(sp)
    2764:	10800044 	addi	r2,r2,1
    2768:	1b07883a 	add	r3,r3,r12
    276c:	42c00015 	stw	r11,0(r8)
    2770:	43000115 	stw	r12,4(r8)
    2774:	d8c02015 	stw	r3,128(sp)
    2778:	d8801f15 	stw	r2,124(sp)
    277c:	010001c4 	movi	r4,7
    2780:	20bb210e 	bge	r4,r2,1408 <__alt_mem_Flash_flash_data+0xf4001408>
    2784:	003da206 	br	1e10 <__alt_mem_Flash_flash_data+0xf4001e10>
    2788:	d8802604 	addi	r2,sp,152
    278c:	d8800115 	stw	r2,4(sp)
    2790:	d9002f17 	ldw	r4,188(sp)
    2794:	d8802504 	addi	r2,sp,148
    2798:	d9403717 	ldw	r5,220(sp)
    279c:	d8800215 	stw	r2,8(sp)
    27a0:	d8802104 	addi	r2,sp,132
    27a4:	da400015 	stw	r9,0(sp)
    27a8:	d8800315 	stw	r2,12(sp)
    27ac:	900d883a 	mov	r6,r18
    27b0:	01c000c4 	movi	r7,3
    27b4:	da004015 	stw	r8,256(sp)
    27b8:	da403f15 	stw	r9,252(sp)
    27bc:	0002e480 	call	2e48 <_dtoa_r>
    27c0:	da403f17 	ldw	r9,252(sp)
    27c4:	da004017 	ldw	r8,256(sp)
    27c8:	d8803115 	stw	r2,196(sp)
    27cc:	4839883a 	mov	fp,r9
    27d0:	dac03117 	ldw	r11,196(sp)
    27d4:	00801184 	movi	r2,70
    27d8:	5f15883a 	add	r10,r11,fp
    27dc:	a8bf7c1e 	bne	r21,r2,25d0 <__alt_mem_Flash_flash_data+0xf40025d0>
    27e0:	59000007 	ldb	r4,0(r11)
    27e4:	00800c04 	movi	r2,48
    27e8:	2080c826 	beq	r4,r2,2b0c <___svfprintf_internal_r+0x1e54>
    27ec:	d8c02617 	ldw	r3,152(sp)
    27f0:	50d5883a 	add	r10,r10,r3
    27f4:	003f7606 	br	25d0 <__alt_mem_Flash_flash_data+0xf40025d0>
    27f8:	010000b4 	movhi	r4,2
    27fc:	21238284 	addi	r4,r4,-29174
    2800:	d9003615 	stw	r4,216(sp)
    2804:	003a9706 	br	1264 <__alt_mem_Flash_flash_data+0xf4001264>
    2808:	0025883a 	mov	r18,zero
    280c:	003dc306 	br	1f1c <__alt_mem_Flash_flash_data+0xf4001f1c>
    2810:	d9002f17 	ldw	r4,188(sp)
    2814:	b80b883a 	mov	r5,r23
    2818:	b00d883a 	mov	r6,r22
    281c:	0006ca80 	call	6ca8 <__ssprint_r>
    2820:	1039ed1e 	bne	r2,zero,fd8 <__alt_mem_Flash_flash_data+0xf4000fd8>
    2824:	d8c02017 	ldw	r3,128(sp)
    2828:	da000404 	addi	r8,sp,16
    282c:	003dba06 	br	1f18 <__alt_mem_Flash_flash_data+0xf4001f18>
    2830:	d9002f17 	ldw	r4,188(sp)
    2834:	b80b883a 	mov	r5,r23
    2838:	b00d883a 	mov	r6,r22
    283c:	0006ca80 	call	6ca8 <__ssprint_r>
    2840:	1039e51e 	bne	r2,zero,fd8 <__alt_mem_Flash_flash_data+0xf4000fd8>
    2844:	d8802617 	ldw	r2,152(sp)
    2848:	d8c02017 	ldw	r3,128(sp)
    284c:	da000404 	addi	r8,sp,16
    2850:	003e4106 	br	2158 <__alt_mem_Flash_flash_data+0xf4002158>
    2854:	030000b4 	movhi	r12,2
    2858:	63237e84 	addi	r12,r12,-29190
    285c:	db002b15 	stw	r12,172(sp)
    2860:	dac02b17 	ldw	r11,172(sp)
    2864:	1c07883a 	add	r3,r3,r16
    2868:	10800044 	addi	r2,r2,1
    286c:	42c00015 	stw	r11,0(r8)
    2870:	44000115 	stw	r16,4(r8)
    2874:	d8c02015 	stw	r3,128(sp)
    2878:	d8801f15 	stw	r2,124(sp)
    287c:	010001c4 	movi	r4,7
    2880:	20bfae16 	blt	r4,r2,273c <__alt_mem_Flash_flash_data+0xf400273c>
    2884:	42000204 	addi	r8,r8,8
    2888:	003fb406 	br	275c <__alt_mem_Flash_flash_data+0xf400275c>
    288c:	0021883a 	mov	r16,zero
    2890:	003e4306 	br	21a0 <__alt_mem_Flash_flash_data+0xf40021a0>
    2894:	d9002f17 	ldw	r4,188(sp)
    2898:	b80b883a 	mov	r5,r23
    289c:	b00d883a 	mov	r6,r22
    28a0:	0006ca80 	call	6ca8 <__ssprint_r>
    28a4:	1039cc1e 	bne	r2,zero,fd8 <__alt_mem_Flash_flash_data+0xf4000fd8>
    28a8:	d8802617 	ldw	r2,152(sp)
    28ac:	db003317 	ldw	r12,204(sp)
    28b0:	d8c02017 	ldw	r3,128(sp)
    28b4:	da000404 	addi	r8,sp,16
    28b8:	6085c83a 	sub	r2,r12,r2
    28bc:	003e3706 	br	219c <__alt_mem_Flash_flash_data+0xf400219c>
    28c0:	00800184 	movi	r2,6
    28c4:	1240012e 	bgeu	r2,r9,28cc <___svfprintf_internal_r+0x1c14>
    28c8:	1013883a 	mov	r9,r2
    28cc:	4825883a 	mov	r18,r9
    28d0:	4805883a 	mov	r2,r9
    28d4:	4800a216 	blt	r9,zero,2b60 <___svfprintf_internal_r+0x1ea8>
    28d8:	d8802a15 	stw	r2,168(sp)
    28dc:	008000b4 	movhi	r2,2
    28e0:	10a37c04 	addi	r2,r2,-29200
    28e4:	d8803115 	stw	r2,196(sp)
    28e8:	dcc02d15 	stw	r19,180(sp)
    28ec:	d8003215 	stw	zero,200(sp)
    28f0:	d8003415 	stw	zero,208(sp)
    28f4:	0005883a 	mov	r2,zero
    28f8:	003a2206 	br	1184 <__alt_mem_Flash_flash_data+0xf4001184>
    28fc:	030000b4 	movhi	r12,2
    2900:	63238284 	addi	r12,r12,-29174
    2904:	db003615 	stw	r12,216(sp)
    2908:	003ae506 	br	14a0 <__alt_mem_Flash_flash_data+0xf40014a0>
    290c:	d8c02617 	ldw	r3,152(sp)
    2910:	00bfff44 	movi	r2,-3
    2914:	18801516 	blt	r3,r2,296c <___svfprintf_internal_r+0x1cb4>
    2918:	48c01416 	blt	r9,r3,296c <___svfprintf_internal_r+0x1cb4>
    291c:	d8c03415 	stw	r3,208(sp)
    2920:	040019c4 	movi	r16,103
    2924:	003f4906 	br	264c <__alt_mem_Flash_flash_data+0xf400264c>
    2928:	05400b44 	movi	r21,45
    292c:	dd402785 	stb	r21,158(sp)
    2930:	003b1006 	br	1574 <__alt_mem_Flash_flash_data+0xf4001574>
    2934:	00c00b44 	movi	r3,45
    2938:	d8802a15 	stw	r2,168(sp)
    293c:	dc402d17 	ldw	r17,180(sp)
    2940:	d8c02785 	stb	r3,158(sp)
    2944:	dcc02d15 	stw	r19,180(sp)
    2948:	d8003215 	stw	zero,200(sp)
    294c:	00800b44 	movi	r2,45
    2950:	003a0906 	br	1178 <__alt_mem_Flash_flash_data+0xf4001178>
    2954:	010000b4 	movhi	r4,2
    2958:	21237e84 	addi	r4,r4,-29190
    295c:	d9002b15 	stw	r4,172(sp)
    2960:	003cc306 	br	1c70 <__alt_mem_Flash_flash_data+0xf4001c70>
    2964:	5005883a 	mov	r2,r10
    2968:	003f2d06 	br	2620 <__alt_mem_Flash_flash_data+0xf4002620>
    296c:	843fff84 	addi	r16,r16,-2
    2970:	1f3fffc4 	addi	fp,r3,-1
    2974:	df002615 	stw	fp,152(sp)
    2978:	dc0022c5 	stb	r16,139(sp)
    297c:	e000a016 	blt	fp,zero,2c00 <___svfprintf_internal_r+0x1f48>
    2980:	00800ac4 	movi	r2,43
    2984:	d8802305 	stb	r2,140(sp)
    2988:	00800244 	movi	r2,9
    298c:	1700800e 	bge	r2,fp,2b90 <___svfprintf_internal_r+0x1ed8>
    2990:	dd4022c4 	addi	r21,sp,139
    2994:	dc002b15 	stw	r16,172(sp)
    2998:	4025883a 	mov	r18,r8
    299c:	a821883a 	mov	r16,r21
    29a0:	e009883a 	mov	r4,fp
    29a4:	01400284 	movi	r5,10
    29a8:	0009fd40 	call	9fd4 <__modsi3>
    29ac:	10800c04 	addi	r2,r2,48
    29b0:	843fffc4 	addi	r16,r16,-1
    29b4:	e009883a 	mov	r4,fp
    29b8:	01400284 	movi	r5,10
    29bc:	80800005 	stb	r2,0(r16)
    29c0:	0009f800 	call	9f80 <__divsi3>
    29c4:	1039883a 	mov	fp,r2
    29c8:	00800244 	movi	r2,9
    29cc:	173ff416 	blt	r2,fp,29a0 <__alt_mem_Flash_flash_data+0xf40029a0>
    29d0:	9011883a 	mov	r8,r18
    29d4:	e0800c04 	addi	r2,fp,48
    29d8:	8025883a 	mov	r18,r16
    29dc:	913fffc4 	addi	r4,r18,-1
    29e0:	90bfffc5 	stb	r2,-1(r18)
    29e4:	dc002b17 	ldw	r16,172(sp)
    29e8:	25408e2e 	bgeu	r4,r21,2c24 <___svfprintf_internal_r+0x1f6c>
    29ec:	d9402384 	addi	r5,sp,142
    29f0:	2c8bc83a 	sub	r5,r5,r18
    29f4:	d8c02344 	addi	r3,sp,141
    29f8:	a94b883a 	add	r5,r21,r5
    29fc:	00000106 	br	2a04 <___svfprintf_internal_r+0x1d4c>
    2a00:	20800003 	ldbu	r2,0(r4)
    2a04:	18800005 	stb	r2,0(r3)
    2a08:	18c00044 	addi	r3,r3,1
    2a0c:	21000044 	addi	r4,r4,1
    2a10:	197ffb1e 	bne	r3,r5,2a00 <__alt_mem_Flash_flash_data+0xf4002a00>
    2a14:	d8802304 	addi	r2,sp,140
    2a18:	1485c83a 	sub	r2,r2,r18
    2a1c:	d8c02344 	addi	r3,sp,141
    2a20:	1885883a 	add	r2,r3,r2
    2a24:	dac03317 	ldw	r11,204(sp)
    2a28:	156bc83a 	sub	r21,r2,r21
    2a2c:	dd403a15 	stw	r21,232(sp)
    2a30:	00800044 	movi	r2,1
    2a34:	5d65883a 	add	r18,r11,r21
    2a38:	12c0770e 	bge	r2,r11,2c18 <___svfprintf_internal_r+0x1f60>
    2a3c:	94800044 	addi	r18,r18,1
    2a40:	9005883a 	mov	r2,r18
    2a44:	90007216 	blt	r18,zero,2c10 <___svfprintf_internal_r+0x1f58>
    2a48:	d8003415 	stw	zero,208(sp)
    2a4c:	003f0706 	br	266c <__alt_mem_Flash_flash_data+0xf400266c>
    2a50:	da402a15 	stw	r9,168(sp)
    2a54:	dd402783 	ldbu	r21,158(sp)
    2a58:	4825883a 	mov	r18,r9
    2a5c:	dcc02d15 	stw	r19,180(sp)
    2a60:	d8003215 	stw	zero,200(sp)
    2a64:	d8003415 	stw	zero,208(sp)
    2a68:	0039bf06 	br	1168 <__alt_mem_Flash_flash_data+0xf4001168>
    2a6c:	483eb21e 	bne	r9,zero,2538 <__alt_mem_Flash_flash_data+0xf4002538>
    2a70:	9013883a 	mov	r9,r18
    2a74:	003eb006 	br	2538 <__alt_mem_Flash_flash_data+0xf4002538>
    2a78:	d9002f17 	ldw	r4,188(sp)
    2a7c:	b80b883a 	mov	r5,r23
    2a80:	b00d883a 	mov	r6,r22
    2a84:	0006ca80 	call	6ca8 <__ssprint_r>
    2a88:	1039531e 	bne	r2,zero,fd8 <__alt_mem_Flash_flash_data+0xf4000fd8>
    2a8c:	dc002617 	ldw	r16,152(sp)
    2a90:	d8c02017 	ldw	r3,128(sp)
    2a94:	d8801f17 	ldw	r2,124(sp)
    2a98:	da000404 	addi	r8,sp,16
    2a9c:	003e7106 	br	2464 <__alt_mem_Flash_flash_data+0xf4002464>
    2aa0:	00c00b44 	movi	r3,45
    2aa4:	64a0003c 	xorhi	r18,r12,32768
    2aa8:	d8c02a05 	stb	r3,168(sp)
    2aac:	003ea806 	br	2550 <__alt_mem_Flash_flash_data+0xf4002550>
    2ab0:	4f000044 	addi	fp,r9,1
    2ab4:	003ead06 	br	256c <__alt_mem_Flash_flash_data+0xf400256c>
    2ab8:	d8c03417 	ldw	r3,208(sp)
    2abc:	00c0410e 	bge	zero,r3,2bc4 <___svfprintf_internal_r+0x1f0c>
    2ac0:	04800044 	movi	r18,1
    2ac4:	dac03317 	ldw	r11,204(sp)
    2ac8:	92e5883a 	add	r18,r18,r11
    2acc:	9005883a 	mov	r2,r18
    2ad0:	903ee60e 	bge	r18,zero,266c <__alt_mem_Flash_flash_data+0xf400266c>
    2ad4:	0005883a 	mov	r2,zero
    2ad8:	003ee406 	br	266c <__alt_mem_Flash_flash_data+0xf400266c>
    2adc:	d8c02617 	ldw	r3,152(sp)
    2ae0:	d8c03415 	stw	r3,208(sp)
    2ae4:	00c0310e 	bge	zero,r3,2bac <___svfprintf_internal_r+0x1ef4>
    2ae8:	48001f1e 	bne	r9,zero,2b68 <___svfprintf_internal_r+0x1eb0>
    2aec:	8c40004c 	andi	r17,r17,1
    2af0:	88001d1e 	bne	r17,zero,2b68 <___svfprintf_internal_r+0x1eb0>
    2af4:	1805883a 	mov	r2,r3
    2af8:	183edb0e 	bge	r3,zero,2668 <__alt_mem_Flash_flash_data+0xf4002668>
    2afc:	0005883a 	mov	r2,zero
    2b00:	003ed906 	br	2668 <__alt_mem_Flash_flash_data+0xf4002668>
    2b04:	d8802117 	ldw	r2,132(sp)
    2b08:	003ec506 	br	2620 <__alt_mem_Flash_flash_data+0xf4002620>
    2b0c:	d9003717 	ldw	r4,220(sp)
    2b10:	900b883a 	mov	r5,r18
    2b14:	000d883a 	mov	r6,zero
    2b18:	000f883a 	mov	r7,zero
    2b1c:	da004015 	stw	r8,256(sp)
    2b20:	da403f15 	stw	r9,252(sp)
    2b24:	da803e15 	stw	r10,248(sp)
    2b28:	000b1a80 	call	b1a8 <__eqdf2>
    2b2c:	da004017 	ldw	r8,256(sp)
    2b30:	da403f17 	ldw	r9,252(sp)
    2b34:	da803e17 	ldw	r10,248(sp)
    2b38:	103f2c26 	beq	r2,zero,27ec <__alt_mem_Flash_flash_data+0xf40027ec>
    2b3c:	00800044 	movi	r2,1
    2b40:	1707c83a 	sub	r3,r2,fp
    2b44:	d8c02615 	stw	r3,152(sp)
    2b48:	003f2906 	br	27f0 <__alt_mem_Flash_flash_data+0xf40027f0>
    2b4c:	db003417 	ldw	r12,208(sp)
    2b50:	64800044 	addi	r18,r12,1
    2b54:	9005883a 	mov	r2,r18
    2b58:	903ec40e 	bge	r18,zero,266c <__alt_mem_Flash_flash_data+0xf400266c>
    2b5c:	003fdd06 	br	2ad4 <__alt_mem_Flash_flash_data+0xf4002ad4>
    2b60:	0005883a 	mov	r2,zero
    2b64:	003f5c06 	br	28d8 <__alt_mem_Flash_flash_data+0xf40028d8>
    2b68:	dac03417 	ldw	r11,208(sp)
    2b6c:	4a400044 	addi	r9,r9,1
    2b70:	5a65883a 	add	r18,r11,r9
    2b74:	9005883a 	mov	r2,r18
    2b78:	903ebc0e 	bge	r18,zero,266c <__alt_mem_Flash_flash_data+0xf400266c>
    2b7c:	003fd506 	br	2ad4 <__alt_mem_Flash_flash_data+0xf4002ad4>
    2b80:	008000b4 	movhi	r2,2
    2b84:	10a37e84 	addi	r2,r2,-29190
    2b88:	d8802b15 	stw	r2,172(sp)
    2b8c:	003d2b06 	br	203c <__alt_mem_Flash_flash_data+0xf400203c>
    2b90:	00800c04 	movi	r2,48
    2b94:	e0c00c04 	addi	r3,fp,48
    2b98:	d8802345 	stb	r2,141(sp)
    2b9c:	d8c02385 	stb	r3,142(sp)
    2ba0:	d88023c4 	addi	r2,sp,143
    2ba4:	dd4022c4 	addi	r21,sp,139
    2ba8:	003f9e06 	br	2a24 <__alt_mem_Flash_flash_data+0xf4002a24>
    2bac:	4800081e 	bne	r9,zero,2bd0 <___svfprintf_internal_r+0x1f18>
    2bb0:	8c40004c 	andi	r17,r17,1
    2bb4:	8800061e 	bne	r17,zero,2bd0 <___svfprintf_internal_r+0x1f18>
    2bb8:	00800044 	movi	r2,1
    2bbc:	1025883a 	mov	r18,r2
    2bc0:	003eaa06 	br	266c <__alt_mem_Flash_flash_data+0xf400266c>
    2bc4:	04800084 	movi	r18,2
    2bc8:	90e5c83a 	sub	r18,r18,r3
    2bcc:	003fbd06 	br	2ac4 <__alt_mem_Flash_flash_data+0xf4002ac4>
    2bd0:	4c800084 	addi	r18,r9,2
    2bd4:	9005883a 	mov	r2,r18
    2bd8:	903ea40e 	bge	r18,zero,266c <__alt_mem_Flash_flash_data+0xf400266c>
    2bdc:	003fbd06 	br	2ad4 <__alt_mem_Flash_flash_data+0xf4002ad4>
    2be0:	dac02d17 	ldw	r11,180(sp)
    2be4:	5a400017 	ldw	r9,0(r11)
    2be8:	5ac00104 	addi	r11,r11,4
    2bec:	dac02d15 	stw	r11,180(sp)
    2bf0:	483e410e 	bge	r9,zero,24f8 <__alt_mem_Flash_flash_data+0xf40024f8>
    2bf4:	027fffc4 	movi	r9,-1
    2bf8:	1c000047 	ldb	r16,1(r3)
    2bfc:	00388406 	br	e10 <__alt_mem_Flash_flash_data+0xf4000e10>
    2c00:	00800b44 	movi	r2,45
    2c04:	0739c83a 	sub	fp,zero,fp
    2c08:	d8802305 	stb	r2,140(sp)
    2c0c:	003f5e06 	br	2988 <__alt_mem_Flash_flash_data+0xf4002988>
    2c10:	0005883a 	mov	r2,zero
    2c14:	003f8c06 	br	2a48 <__alt_mem_Flash_flash_data+0xf4002a48>
    2c18:	88a2703a 	and	r17,r17,r2
    2c1c:	883f8826 	beq	r17,zero,2a40 <__alt_mem_Flash_flash_data+0xf4002a40>
    2c20:	003f8606 	br	2a3c <__alt_mem_Flash_flash_data+0xf4002a3c>
    2c24:	d8802344 	addi	r2,sp,141
    2c28:	003f7e06 	br	2a24 <__alt_mem_Flash_flash_data+0xf4002a24>
    2c2c:	d8c02617 	ldw	r3,152(sp)
    2c30:	003f4f06 	br	2970 <__alt_mem_Flash_flash_data+0xf4002970>
    2c34:	dac02f17 	ldw	r11,188(sp)
    2c38:	00800304 	movi	r2,12
    2c3c:	58800015 	stw	r2,0(r11)
    2c40:	00bfffc4 	movi	r2,-1
    2c44:	0038e806 	br	fe8 <__alt_mem_Flash_flash_data+0xf4000fe8>

00002c48 <quorem>:
    2c48:	defff704 	addi	sp,sp,-36
    2c4c:	dc800215 	stw	r18,8(sp)
    2c50:	20800417 	ldw	r2,16(r4)
    2c54:	2c800417 	ldw	r18,16(r5)
    2c58:	dfc00815 	stw	ra,32(sp)
    2c5c:	ddc00715 	stw	r23,28(sp)
    2c60:	dd800615 	stw	r22,24(sp)
    2c64:	dd400515 	stw	r21,20(sp)
    2c68:	dd000415 	stw	r20,16(sp)
    2c6c:	dcc00315 	stw	r19,12(sp)
    2c70:	dc400115 	stw	r17,4(sp)
    2c74:	dc000015 	stw	r16,0(sp)
    2c78:	14807116 	blt	r2,r18,2e40 <quorem+0x1f8>
    2c7c:	94bfffc4 	addi	r18,r18,-1
    2c80:	94ad883a 	add	r22,r18,r18
    2c84:	b5ad883a 	add	r22,r22,r22
    2c88:	2c400504 	addi	r17,r5,20
    2c8c:	8da9883a 	add	r20,r17,r22
    2c90:	25400504 	addi	r21,r4,20
    2c94:	282f883a 	mov	r23,r5
    2c98:	adad883a 	add	r22,r21,r22
    2c9c:	a1400017 	ldw	r5,0(r20)
    2ca0:	2021883a 	mov	r16,r4
    2ca4:	b1000017 	ldw	r4,0(r22)
    2ca8:	29400044 	addi	r5,r5,1
    2cac:	000a0300 	call	a030 <__udivsi3>
    2cb0:	1027883a 	mov	r19,r2
    2cb4:	10002c26 	beq	r2,zero,2d68 <quorem+0x120>
    2cb8:	a813883a 	mov	r9,r21
    2cbc:	8811883a 	mov	r8,r17
    2cc0:	0009883a 	mov	r4,zero
    2cc4:	000d883a 	mov	r6,zero
    2cc8:	41c00017 	ldw	r7,0(r8)
    2ccc:	49400017 	ldw	r5,0(r9)
    2cd0:	42000104 	addi	r8,r8,4
    2cd4:	38bfffcc 	andi	r2,r7,65535
    2cd8:	14c5383a 	mul	r2,r2,r19
    2cdc:	380ed43a 	srli	r7,r7,16
    2ce0:	28ffffcc 	andi	r3,r5,65535
    2ce4:	2085883a 	add	r2,r4,r2
    2ce8:	1008d43a 	srli	r4,r2,16
    2cec:	3ccf383a 	mul	r7,r7,r19
    2cf0:	198d883a 	add	r6,r3,r6
    2cf4:	10ffffcc 	andi	r3,r2,65535
    2cf8:	30c7c83a 	sub	r3,r6,r3
    2cfc:	280ad43a 	srli	r5,r5,16
    2d00:	21c9883a 	add	r4,r4,r7
    2d04:	180dd43a 	srai	r6,r3,16
    2d08:	20bfffcc 	andi	r2,r4,65535
    2d0c:	288bc83a 	sub	r5,r5,r2
    2d10:	298b883a 	add	r5,r5,r6
    2d14:	280e943a 	slli	r7,r5,16
    2d18:	18ffffcc 	andi	r3,r3,65535
    2d1c:	2008d43a 	srli	r4,r4,16
    2d20:	38ceb03a 	or	r7,r7,r3
    2d24:	49c00015 	stw	r7,0(r9)
    2d28:	280dd43a 	srai	r6,r5,16
    2d2c:	4a400104 	addi	r9,r9,4
    2d30:	a23fe52e 	bgeu	r20,r8,2cc8 <__alt_mem_Flash_flash_data+0xf4002cc8>
    2d34:	b0800017 	ldw	r2,0(r22)
    2d38:	10000b1e 	bne	r2,zero,2d68 <quorem+0x120>
    2d3c:	b0bfff04 	addi	r2,r22,-4
    2d40:	a880082e 	bgeu	r21,r2,2d64 <quorem+0x11c>
    2d44:	b0ffff17 	ldw	r3,-4(r22)
    2d48:	18000326 	beq	r3,zero,2d58 <quorem+0x110>
    2d4c:	00000506 	br	2d64 <quorem+0x11c>
    2d50:	10c00017 	ldw	r3,0(r2)
    2d54:	1800031e 	bne	r3,zero,2d64 <quorem+0x11c>
    2d58:	10bfff04 	addi	r2,r2,-4
    2d5c:	94bfffc4 	addi	r18,r18,-1
    2d60:	a8bffb36 	bltu	r21,r2,2d50 <__alt_mem_Flash_flash_data+0xf4002d50>
    2d64:	84800415 	stw	r18,16(r16)
    2d68:	8009883a 	mov	r4,r16
    2d6c:	b80b883a 	mov	r5,r23
    2d70:	0005f080 	call	5f08 <__mcmp>
    2d74:	10002616 	blt	r2,zero,2e10 <quorem+0x1c8>
    2d78:	9cc00044 	addi	r19,r19,1
    2d7c:	a80d883a 	mov	r6,r21
    2d80:	000b883a 	mov	r5,zero
    2d84:	31000017 	ldw	r4,0(r6)
    2d88:	88800017 	ldw	r2,0(r17)
    2d8c:	31800104 	addi	r6,r6,4
    2d90:	20ffffcc 	andi	r3,r4,65535
    2d94:	194b883a 	add	r5,r3,r5
    2d98:	10ffffcc 	andi	r3,r2,65535
    2d9c:	28c7c83a 	sub	r3,r5,r3
    2da0:	1004d43a 	srli	r2,r2,16
    2da4:	2008d43a 	srli	r4,r4,16
    2da8:	180bd43a 	srai	r5,r3,16
    2dac:	18ffffcc 	andi	r3,r3,65535
    2db0:	2089c83a 	sub	r4,r4,r2
    2db4:	2149883a 	add	r4,r4,r5
    2db8:	2004943a 	slli	r2,r4,16
    2dbc:	8c400104 	addi	r17,r17,4
    2dc0:	200bd43a 	srai	r5,r4,16
    2dc4:	10c6b03a 	or	r3,r2,r3
    2dc8:	30ffff15 	stw	r3,-4(r6)
    2dcc:	a47fed2e 	bgeu	r20,r17,2d84 <__alt_mem_Flash_flash_data+0xf4002d84>
    2dd0:	9485883a 	add	r2,r18,r18
    2dd4:	1085883a 	add	r2,r2,r2
    2dd8:	a887883a 	add	r3,r21,r2
    2ddc:	18800017 	ldw	r2,0(r3)
    2de0:	10000b1e 	bne	r2,zero,2e10 <quorem+0x1c8>
    2de4:	18bfff04 	addi	r2,r3,-4
    2de8:	a880082e 	bgeu	r21,r2,2e0c <quorem+0x1c4>
    2dec:	18ffff17 	ldw	r3,-4(r3)
    2df0:	18000326 	beq	r3,zero,2e00 <quorem+0x1b8>
    2df4:	00000506 	br	2e0c <quorem+0x1c4>
    2df8:	10c00017 	ldw	r3,0(r2)
    2dfc:	1800031e 	bne	r3,zero,2e0c <quorem+0x1c4>
    2e00:	10bfff04 	addi	r2,r2,-4
    2e04:	94bfffc4 	addi	r18,r18,-1
    2e08:	a8bffb36 	bltu	r21,r2,2df8 <__alt_mem_Flash_flash_data+0xf4002df8>
    2e0c:	84800415 	stw	r18,16(r16)
    2e10:	9805883a 	mov	r2,r19
    2e14:	dfc00817 	ldw	ra,32(sp)
    2e18:	ddc00717 	ldw	r23,28(sp)
    2e1c:	dd800617 	ldw	r22,24(sp)
    2e20:	dd400517 	ldw	r21,20(sp)
    2e24:	dd000417 	ldw	r20,16(sp)
    2e28:	dcc00317 	ldw	r19,12(sp)
    2e2c:	dc800217 	ldw	r18,8(sp)
    2e30:	dc400117 	ldw	r17,4(sp)
    2e34:	dc000017 	ldw	r16,0(sp)
    2e38:	dec00904 	addi	sp,sp,36
    2e3c:	f800283a 	ret
    2e40:	0005883a 	mov	r2,zero
    2e44:	003ff306 	br	2e14 <__alt_mem_Flash_flash_data+0xf4002e14>

00002e48 <_dtoa_r>:
    2e48:	20801017 	ldw	r2,64(r4)
    2e4c:	deffde04 	addi	sp,sp,-136
    2e50:	dd401d15 	stw	r21,116(sp)
    2e54:	dcc01b15 	stw	r19,108(sp)
    2e58:	dc801a15 	stw	r18,104(sp)
    2e5c:	dc401915 	stw	r17,100(sp)
    2e60:	dc001815 	stw	r16,96(sp)
    2e64:	dfc02115 	stw	ra,132(sp)
    2e68:	df002015 	stw	fp,128(sp)
    2e6c:	ddc01f15 	stw	r23,124(sp)
    2e70:	dd801e15 	stw	r22,120(sp)
    2e74:	dd001c15 	stw	r20,112(sp)
    2e78:	d9c00315 	stw	r7,12(sp)
    2e7c:	2021883a 	mov	r16,r4
    2e80:	302b883a 	mov	r21,r6
    2e84:	2825883a 	mov	r18,r5
    2e88:	dc402417 	ldw	r17,144(sp)
    2e8c:	3027883a 	mov	r19,r6
    2e90:	10000826 	beq	r2,zero,2eb4 <_dtoa_r+0x6c>
    2e94:	21801117 	ldw	r6,68(r4)
    2e98:	00c00044 	movi	r3,1
    2e9c:	100b883a 	mov	r5,r2
    2ea0:	1986983a 	sll	r3,r3,r6
    2ea4:	11800115 	stw	r6,4(r2)
    2ea8:	10c00215 	stw	r3,8(r2)
    2eac:	00056dc0 	call	56dc <_Bfree>
    2eb0:	80001015 	stw	zero,64(r16)
    2eb4:	a8002d16 	blt	r21,zero,2f6c <_dtoa_r+0x124>
    2eb8:	88000015 	stw	zero,0(r17)
    2ebc:	a8dffc2c 	andhi	r3,r21,32752
    2ec0:	009ffc34 	movhi	r2,32752
    2ec4:	18801b26 	beq	r3,r2,2f34 <_dtoa_r+0xec>
    2ec8:	9009883a 	mov	r4,r18
    2ecc:	980b883a 	mov	r5,r19
    2ed0:	000d883a 	mov	r6,zero
    2ed4:	000f883a 	mov	r7,zero
    2ed8:	000b1a80 	call	b1a8 <__eqdf2>
    2edc:	10002a1e 	bne	r2,zero,2f88 <_dtoa_r+0x140>
    2ee0:	d8c02317 	ldw	r3,140(sp)
    2ee4:	d9002517 	ldw	r4,148(sp)
    2ee8:	00800044 	movi	r2,1
    2eec:	18800015 	stw	r2,0(r3)
    2ef0:	2001a226 	beq	r4,zero,357c <_dtoa_r+0x734>
    2ef4:	008000b4 	movhi	r2,2
    2ef8:	10a37e44 	addi	r2,r2,-29191
    2efc:	20800015 	stw	r2,0(r4)
    2f00:	10bfffc4 	addi	r2,r2,-1
    2f04:	dfc02117 	ldw	ra,132(sp)
    2f08:	df002017 	ldw	fp,128(sp)
    2f0c:	ddc01f17 	ldw	r23,124(sp)
    2f10:	dd801e17 	ldw	r22,120(sp)
    2f14:	dd401d17 	ldw	r21,116(sp)
    2f18:	dd001c17 	ldw	r20,112(sp)
    2f1c:	dcc01b17 	ldw	r19,108(sp)
    2f20:	dc801a17 	ldw	r18,104(sp)
    2f24:	dc401917 	ldw	r17,100(sp)
    2f28:	dc001817 	ldw	r16,96(sp)
    2f2c:	dec02204 	addi	sp,sp,136
    2f30:	f800283a 	ret
    2f34:	d8c02317 	ldw	r3,140(sp)
    2f38:	0089c3c4 	movi	r2,9999
    2f3c:	18800015 	stw	r2,0(r3)
    2f40:	90017c26 	beq	r18,zero,3534 <_dtoa_r+0x6ec>
    2f44:	008000b4 	movhi	r2,2
    2f48:	10a38a04 	addi	r2,r2,-29144
    2f4c:	d9002517 	ldw	r4,148(sp)
    2f50:	203fec26 	beq	r4,zero,2f04 <__alt_mem_Flash_flash_data+0xf4002f04>
    2f54:	10c000c7 	ldb	r3,3(r2)
    2f58:	18017d1e 	bne	r3,zero,3550 <_dtoa_r+0x708>
    2f5c:	10c000c4 	addi	r3,r2,3
    2f60:	d9802517 	ldw	r6,148(sp)
    2f64:	30c00015 	stw	r3,0(r6)
    2f68:	003fe606 	br	2f04 <__alt_mem_Flash_flash_data+0xf4002f04>
    2f6c:	04e00034 	movhi	r19,32768
    2f70:	9cffffc4 	addi	r19,r19,-1
    2f74:	00800044 	movi	r2,1
    2f78:	ace6703a 	and	r19,r21,r19
    2f7c:	88800015 	stw	r2,0(r17)
    2f80:	982b883a 	mov	r21,r19
    2f84:	003fcd06 	br	2ebc <__alt_mem_Flash_flash_data+0xf4002ebc>
    2f88:	d8800204 	addi	r2,sp,8
    2f8c:	a822d53a 	srli	r17,r21,20
    2f90:	d8800015 	stw	r2,0(sp)
    2f94:	8009883a 	mov	r4,r16
    2f98:	900b883a 	mov	r5,r18
    2f9c:	980d883a 	mov	r6,r19
    2fa0:	d9c00104 	addi	r7,sp,4
    2fa4:	000627c0 	call	627c <__d2b>
    2fa8:	1039883a 	mov	fp,r2
    2fac:	88016a1e 	bne	r17,zero,3558 <_dtoa_r+0x710>
    2fb0:	dd000217 	ldw	r20,8(sp)
    2fb4:	dc400117 	ldw	r17,4(sp)
    2fb8:	00befbc4 	movi	r2,-1041
    2fbc:	a463883a 	add	r17,r20,r17
    2fc0:	8882ea16 	blt	r17,r2,3b6c <_dtoa_r+0xd24>
    2fc4:	00bf0384 	movi	r2,-1010
    2fc8:	1445c83a 	sub	r2,r2,r17
    2fcc:	89010484 	addi	r4,r17,1042
    2fd0:	a8aa983a 	sll	r21,r21,r2
    2fd4:	9108d83a 	srl	r4,r18,r4
    2fd8:	a908b03a 	or	r4,r21,r4
    2fdc:	000c5380 	call	c538 <__floatunsidf>
    2fe0:	017f8434 	movhi	r5,65040
    2fe4:	01800044 	movi	r6,1
    2fe8:	1009883a 	mov	r4,r2
    2fec:	194b883a 	add	r5,r3,r5
    2ff0:	8c7fffc4 	addi	r17,r17,-1
    2ff4:	d9800f15 	stw	r6,60(sp)
    2ff8:	000d883a 	mov	r6,zero
    2ffc:	01cffe34 	movhi	r7,16376
    3000:	000bb100 	call	bb10 <__subdf3>
    3004:	0198dbf4 	movhi	r6,25455
    3008:	01cff4f4 	movhi	r7,16339
    300c:	1009883a 	mov	r4,r2
    3010:	180b883a 	mov	r5,r3
    3014:	3190d844 	addi	r6,r6,17249
    3018:	39e1e9c4 	addi	r7,r7,-30809
    301c:	000b3ec0 	call	b3ec <__muldf3>
    3020:	01a2d874 	movhi	r6,35681
    3024:	01cff1f4 	movhi	r7,16327
    3028:	180b883a 	mov	r5,r3
    302c:	31b22cc4 	addi	r6,r6,-14157
    3030:	39e28a04 	addi	r7,r7,-30168
    3034:	1009883a 	mov	r4,r2
    3038:	000a0400 	call	a040 <__adddf3>
    303c:	8809883a 	mov	r4,r17
    3040:	102d883a 	mov	r22,r2
    3044:	182b883a 	mov	r21,r3
    3048:	000c4680 	call	c468 <__floatsidf>
    304c:	019427f4 	movhi	r6,20639
    3050:	01cff4f4 	movhi	r7,16339
    3054:	1009883a 	mov	r4,r2
    3058:	180b883a 	mov	r5,r3
    305c:	319e7ec4 	addi	r6,r6,31227
    3060:	39d104c4 	addi	r7,r7,17427
    3064:	000b3ec0 	call	b3ec <__muldf3>
    3068:	b009883a 	mov	r4,r22
    306c:	a80b883a 	mov	r5,r21
    3070:	100d883a 	mov	r6,r2
    3074:	180f883a 	mov	r7,r3
    3078:	000a0400 	call	a040 <__adddf3>
    307c:	1009883a 	mov	r4,r2
    3080:	180b883a 	mov	r5,r3
    3084:	102d883a 	mov	r22,r2
    3088:	182b883a 	mov	r21,r3
    308c:	000c3e00 	call	c3e0 <__fixdfsi>
    3090:	b009883a 	mov	r4,r22
    3094:	a80b883a 	mov	r5,r21
    3098:	000d883a 	mov	r6,zero
    309c:	000f883a 	mov	r7,zero
    30a0:	d8800515 	stw	r2,20(sp)
    30a4:	000b30c0 	call	b30c <__ledf2>
    30a8:	10023116 	blt	r2,zero,3970 <_dtoa_r+0xb28>
    30ac:	d8c00517 	ldw	r3,20(sp)
    30b0:	00800584 	movi	r2,22
    30b4:	10c21f36 	bltu	r2,r3,3934 <_dtoa_r+0xaec>
    30b8:	180490fa 	slli	r2,r3,3
    30bc:	00c000b4 	movhi	r3,2
    30c0:	18e3a604 	addi	r3,r3,-29032
    30c4:	1885883a 	add	r2,r3,r2
    30c8:	11000017 	ldw	r4,0(r2)
    30cc:	11400117 	ldw	r5,4(r2)
    30d0:	900d883a 	mov	r6,r18
    30d4:	980f883a 	mov	r7,r19
    30d8:	000b22c0 	call	b22c <__gedf2>
    30dc:	0082a70e 	bge	zero,r2,3b7c <_dtoa_r+0xd34>
    30e0:	d9000517 	ldw	r4,20(sp)
    30e4:	d8000d15 	stw	zero,52(sp)
    30e8:	213fffc4 	addi	r4,r4,-1
    30ec:	d9000515 	stw	r4,20(sp)
    30f0:	a463c83a 	sub	r17,r20,r17
    30f4:	8dbfffc4 	addi	r22,r17,-1
    30f8:	b0021916 	blt	r22,zero,3960 <_dtoa_r+0xb18>
    30fc:	d8000815 	stw	zero,32(sp)
    3100:	d8800517 	ldw	r2,20(sp)
    3104:	10020e16 	blt	r2,zero,3940 <_dtoa_r+0xaf8>
    3108:	b0ad883a 	add	r22,r22,r2
    310c:	d8800a15 	stw	r2,40(sp)
    3110:	d8000915 	stw	zero,36(sp)
    3114:	d8c00317 	ldw	r3,12(sp)
    3118:	00800244 	movi	r2,9
    311c:	10c11a36 	bltu	r2,r3,3588 <_dtoa_r+0x740>
    3120:	00800144 	movi	r2,5
    3124:	10c4fc0e 	bge	r2,r3,4518 <_dtoa_r+0x16d0>
    3128:	18ffff04 	addi	r3,r3,-4
    312c:	d8c00315 	stw	r3,12(sp)
    3130:	0029883a 	mov	r20,zero
    3134:	d9800317 	ldw	r6,12(sp)
    3138:	008000c4 	movi	r2,3
    313c:	3083bd26 	beq	r6,r2,4034 <_dtoa_r+0x11ec>
    3140:	1183670e 	bge	r2,r6,3ee0 <_dtoa_r+0x1098>
    3144:	d8c00317 	ldw	r3,12(sp)
    3148:	00800104 	movi	r2,4
    314c:	1882e726 	beq	r3,r2,3cec <_dtoa_r+0xea4>
    3150:	00800144 	movi	r2,5
    3154:	1884f21e 	bne	r3,r2,4520 <_dtoa_r+0x16d8>
    3158:	00800044 	movi	r2,1
    315c:	d8800b15 	stw	r2,44(sp)
    3160:	d8c02217 	ldw	r3,136(sp)
    3164:	d9000517 	ldw	r4,20(sp)
    3168:	1907883a 	add	r3,r3,r4
    316c:	19800044 	addi	r6,r3,1
    3170:	d8c00c15 	stw	r3,48(sp)
    3174:	d9800615 	stw	r6,24(sp)
    3178:	0183c30e 	bge	zero,r6,4088 <_dtoa_r+0x1240>
    317c:	d9800617 	ldw	r6,24(sp)
    3180:	3023883a 	mov	r17,r6
    3184:	80001115 	stw	zero,68(r16)
    3188:	008005c4 	movi	r2,23
    318c:	1184f62e 	bgeu	r2,r6,4568 <_dtoa_r+0x1720>
    3190:	00c00044 	movi	r3,1
    3194:	00800104 	movi	r2,4
    3198:	1085883a 	add	r2,r2,r2
    319c:	11000504 	addi	r4,r2,20
    31a0:	180b883a 	mov	r5,r3
    31a4:	18c00044 	addi	r3,r3,1
    31a8:	313ffb2e 	bgeu	r6,r4,3198 <__alt_mem_Flash_flash_data+0xf4003198>
    31ac:	81401115 	stw	r5,68(r16)
    31b0:	8009883a 	mov	r4,r16
    31b4:	00056340 	call	5634 <_Balloc>
    31b8:	d8800715 	stw	r2,28(sp)
    31bc:	80801015 	stw	r2,64(r16)
    31c0:	00800384 	movi	r2,14
    31c4:	1440fd36 	bltu	r2,r17,35bc <_dtoa_r+0x774>
    31c8:	a000fc26 	beq	r20,zero,35bc <_dtoa_r+0x774>
    31cc:	d8800517 	ldw	r2,20(sp)
    31d0:	0083b90e 	bge	zero,r2,40b8 <_dtoa_r+0x1270>
    31d4:	d8c00517 	ldw	r3,20(sp)
    31d8:	108003cc 	andi	r2,r2,15
    31dc:	100490fa 	slli	r2,r2,3
    31e0:	182fd13a 	srai	r23,r3,4
    31e4:	00c000b4 	movhi	r3,2
    31e8:	18e3a604 	addi	r3,r3,-29032
    31ec:	1885883a 	add	r2,r3,r2
    31f0:	b8c0040c 	andi	r3,r23,16
    31f4:	12c00017 	ldw	r11,0(r2)
    31f8:	12800117 	ldw	r10,4(r2)
    31fc:	18039726 	beq	r3,zero,405c <_dtoa_r+0x1214>
    3200:	008000b4 	movhi	r2,2
    3204:	10a39c04 	addi	r2,r2,-29072
    3208:	11800817 	ldw	r6,32(r2)
    320c:	11c00917 	ldw	r7,36(r2)
    3210:	9009883a 	mov	r4,r18
    3214:	980b883a 	mov	r5,r19
    3218:	da801615 	stw	r10,88(sp)
    321c:	dac01515 	stw	r11,84(sp)
    3220:	000a8dc0 	call	a8dc <__divdf3>
    3224:	da801617 	ldw	r10,88(sp)
    3228:	dac01517 	ldw	r11,84(sp)
    322c:	bdc003cc 	andi	r23,r23,15
    3230:	044000c4 	movi	r17,3
    3234:	d8800e15 	stw	r2,56(sp)
    3238:	182b883a 	mov	r21,r3
    323c:	b8001126 	beq	r23,zero,3284 <_dtoa_r+0x43c>
    3240:	050000b4 	movhi	r20,2
    3244:	a5239c04 	addi	r20,r20,-29072
    3248:	5805883a 	mov	r2,r11
    324c:	5007883a 	mov	r3,r10
    3250:	b980004c 	andi	r6,r23,1
    3254:	1009883a 	mov	r4,r2
    3258:	b82fd07a 	srai	r23,r23,1
    325c:	180b883a 	mov	r5,r3
    3260:	30000426 	beq	r6,zero,3274 <_dtoa_r+0x42c>
    3264:	a1800017 	ldw	r6,0(r20)
    3268:	a1c00117 	ldw	r7,4(r20)
    326c:	8c400044 	addi	r17,r17,1
    3270:	000b3ec0 	call	b3ec <__muldf3>
    3274:	a5000204 	addi	r20,r20,8
    3278:	b83ff51e 	bne	r23,zero,3250 <__alt_mem_Flash_flash_data+0xf4003250>
    327c:	1017883a 	mov	r11,r2
    3280:	1815883a 	mov	r10,r3
    3284:	d9000e17 	ldw	r4,56(sp)
    3288:	a80b883a 	mov	r5,r21
    328c:	580d883a 	mov	r6,r11
    3290:	500f883a 	mov	r7,r10
    3294:	000a8dc0 	call	a8dc <__divdf3>
    3298:	1029883a 	mov	r20,r2
    329c:	182b883a 	mov	r21,r3
    32a0:	d9800d17 	ldw	r6,52(sp)
    32a4:	30000626 	beq	r6,zero,32c0 <_dtoa_r+0x478>
    32a8:	a009883a 	mov	r4,r20
    32ac:	a80b883a 	mov	r5,r21
    32b0:	000d883a 	mov	r6,zero
    32b4:	01cffc34 	movhi	r7,16368
    32b8:	000b30c0 	call	b30c <__ledf2>
    32bc:	10043216 	blt	r2,zero,4388 <_dtoa_r+0x1540>
    32c0:	8809883a 	mov	r4,r17
    32c4:	000c4680 	call	c468 <__floatsidf>
    32c8:	1009883a 	mov	r4,r2
    32cc:	180b883a 	mov	r5,r3
    32d0:	a00d883a 	mov	r6,r20
    32d4:	a80f883a 	mov	r7,r21
    32d8:	000b3ec0 	call	b3ec <__muldf3>
    32dc:	000d883a 	mov	r6,zero
    32e0:	1009883a 	mov	r4,r2
    32e4:	180b883a 	mov	r5,r3
    32e8:	01d00734 	movhi	r7,16412
    32ec:	000a0400 	call	a040 <__adddf3>
    32f0:	1023883a 	mov	r17,r2
    32f4:	d9800617 	ldw	r6,24(sp)
    32f8:	00bf3034 	movhi	r2,64704
    32fc:	1885883a 	add	r2,r3,r2
    3300:	d8800e15 	stw	r2,56(sp)
    3304:	30032e26 	beq	r6,zero,3fc0 <_dtoa_r+0x1178>
    3308:	d8c00517 	ldw	r3,20(sp)
    330c:	da800617 	ldw	r10,24(sp)
    3310:	d8c01215 	stw	r3,72(sp)
    3314:	d9000b17 	ldw	r4,44(sp)
    3318:	2003b026 	beq	r4,zero,41dc <_dtoa_r+0x1394>
    331c:	50bfffc4 	addi	r2,r10,-1
    3320:	100490fa 	slli	r2,r2,3
    3324:	00c000b4 	movhi	r3,2
    3328:	18e3a604 	addi	r3,r3,-29032
    332c:	1885883a 	add	r2,r3,r2
    3330:	11800017 	ldw	r6,0(r2)
    3334:	11c00117 	ldw	r7,4(r2)
    3338:	d8800717 	ldw	r2,28(sp)
    333c:	0009883a 	mov	r4,zero
    3340:	014ff834 	movhi	r5,16352
    3344:	da801615 	stw	r10,88(sp)
    3348:	15c00044 	addi	r23,r2,1
    334c:	000a8dc0 	call	a8dc <__divdf3>
    3350:	d9c00e17 	ldw	r7,56(sp)
    3354:	880d883a 	mov	r6,r17
    3358:	1009883a 	mov	r4,r2
    335c:	180b883a 	mov	r5,r3
    3360:	000bb100 	call	bb10 <__subdf3>
    3364:	a80b883a 	mov	r5,r21
    3368:	a009883a 	mov	r4,r20
    336c:	d8c01015 	stw	r3,64(sp)
    3370:	d8800e15 	stw	r2,56(sp)
    3374:	000c3e00 	call	c3e0 <__fixdfsi>
    3378:	1009883a 	mov	r4,r2
    337c:	d8801715 	stw	r2,92(sp)
    3380:	000c4680 	call	c468 <__floatsidf>
    3384:	a009883a 	mov	r4,r20
    3388:	a80b883a 	mov	r5,r21
    338c:	100d883a 	mov	r6,r2
    3390:	180f883a 	mov	r7,r3
    3394:	000bb100 	call	bb10 <__subdf3>
    3398:	da001717 	ldw	r8,92(sp)
    339c:	1829883a 	mov	r20,r3
    33a0:	d8c00717 	ldw	r3,28(sp)
    33a4:	d9000e17 	ldw	r4,56(sp)
    33a8:	d9401017 	ldw	r5,64(sp)
    33ac:	42000c04 	addi	r8,r8,48
    33b0:	1023883a 	mov	r17,r2
    33b4:	1a000005 	stb	r8,0(r3)
    33b8:	880d883a 	mov	r6,r17
    33bc:	a00f883a 	mov	r7,r20
    33c0:	402b883a 	mov	r21,r8
    33c4:	000b22c0 	call	b22c <__gedf2>
    33c8:	00844516 	blt	zero,r2,44e0 <_dtoa_r+0x1698>
    33cc:	0009883a 	mov	r4,zero
    33d0:	014ffc34 	movhi	r5,16368
    33d4:	880d883a 	mov	r6,r17
    33d8:	a00f883a 	mov	r7,r20
    33dc:	000bb100 	call	bb10 <__subdf3>
    33e0:	d9000e17 	ldw	r4,56(sp)
    33e4:	d9401017 	ldw	r5,64(sp)
    33e8:	100d883a 	mov	r6,r2
    33ec:	180f883a 	mov	r7,r3
    33f0:	000b22c0 	call	b22c <__gedf2>
    33f4:	da801617 	ldw	r10,88(sp)
    33f8:	00843616 	blt	zero,r2,44d4 <_dtoa_r+0x168c>
    33fc:	00800044 	movi	r2,1
    3400:	12806e0e 	bge	r2,r10,35bc <_dtoa_r+0x774>
    3404:	d9000717 	ldw	r4,28(sp)
    3408:	dd801315 	stw	r22,76(sp)
    340c:	dc001115 	stw	r16,68(sp)
    3410:	2295883a 	add	r10,r4,r10
    3414:	dcc01415 	stw	r19,80(sp)
    3418:	502d883a 	mov	r22,r10
    341c:	dcc01017 	ldw	r19,64(sp)
    3420:	b821883a 	mov	r16,r23
    3424:	dc801015 	stw	r18,64(sp)
    3428:	dc800e17 	ldw	r18,56(sp)
    342c:	00000906 	br	3454 <_dtoa_r+0x60c>
    3430:	000bb100 	call	bb10 <__subdf3>
    3434:	1009883a 	mov	r4,r2
    3438:	180b883a 	mov	r5,r3
    343c:	900d883a 	mov	r6,r18
    3440:	980f883a 	mov	r7,r19
    3444:	000b30c0 	call	b30c <__ledf2>
    3448:	10040e16 	blt	r2,zero,4484 <_dtoa_r+0x163c>
    344c:	b821883a 	mov	r16,r23
    3450:	bd841026 	beq	r23,r22,4494 <_dtoa_r+0x164c>
    3454:	9009883a 	mov	r4,r18
    3458:	980b883a 	mov	r5,r19
    345c:	000d883a 	mov	r6,zero
    3460:	01d00934 	movhi	r7,16420
    3464:	000b3ec0 	call	b3ec <__muldf3>
    3468:	000d883a 	mov	r6,zero
    346c:	01d00934 	movhi	r7,16420
    3470:	8809883a 	mov	r4,r17
    3474:	a00b883a 	mov	r5,r20
    3478:	1025883a 	mov	r18,r2
    347c:	1827883a 	mov	r19,r3
    3480:	000b3ec0 	call	b3ec <__muldf3>
    3484:	180b883a 	mov	r5,r3
    3488:	1009883a 	mov	r4,r2
    348c:	1823883a 	mov	r17,r3
    3490:	1029883a 	mov	r20,r2
    3494:	000c3e00 	call	c3e0 <__fixdfsi>
    3498:	1009883a 	mov	r4,r2
    349c:	102b883a 	mov	r21,r2
    34a0:	000c4680 	call	c468 <__floatsidf>
    34a4:	a009883a 	mov	r4,r20
    34a8:	880b883a 	mov	r5,r17
    34ac:	100d883a 	mov	r6,r2
    34b0:	180f883a 	mov	r7,r3
    34b4:	000bb100 	call	bb10 <__subdf3>
    34b8:	ad400c04 	addi	r21,r21,48
    34bc:	1009883a 	mov	r4,r2
    34c0:	180b883a 	mov	r5,r3
    34c4:	900d883a 	mov	r6,r18
    34c8:	980f883a 	mov	r7,r19
    34cc:	85400005 	stb	r21,0(r16)
    34d0:	1023883a 	mov	r17,r2
    34d4:	1829883a 	mov	r20,r3
    34d8:	000b30c0 	call	b30c <__ledf2>
    34dc:	bdc00044 	addi	r23,r23,1
    34e0:	0009883a 	mov	r4,zero
    34e4:	014ffc34 	movhi	r5,16368
    34e8:	880d883a 	mov	r6,r17
    34ec:	a00f883a 	mov	r7,r20
    34f0:	103fcf0e 	bge	r2,zero,3430 <__alt_mem_Flash_flash_data+0xf4003430>
    34f4:	d9801217 	ldw	r6,72(sp)
    34f8:	dc001117 	ldw	r16,68(sp)
    34fc:	d9800515 	stw	r6,20(sp)
    3500:	8009883a 	mov	r4,r16
    3504:	e00b883a 	mov	r5,fp
    3508:	00056dc0 	call	56dc <_Bfree>
    350c:	d8c00517 	ldw	r3,20(sp)
    3510:	d9002317 	ldw	r4,140(sp)
    3514:	d9802517 	ldw	r6,148(sp)
    3518:	b8000005 	stb	zero,0(r23)
    351c:	18800044 	addi	r2,r3,1
    3520:	20800015 	stw	r2,0(r4)
    3524:	30027226 	beq	r6,zero,3ef0 <_dtoa_r+0x10a8>
    3528:	35c00015 	stw	r23,0(r6)
    352c:	d8800717 	ldw	r2,28(sp)
    3530:	003e7406 	br	2f04 <__alt_mem_Flash_flash_data+0xf4002f04>
    3534:	00800434 	movhi	r2,16
    3538:	10bfffc4 	addi	r2,r2,-1
    353c:	a8aa703a 	and	r21,r21,r2
    3540:	a83e801e 	bne	r21,zero,2f44 <__alt_mem_Flash_flash_data+0xf4002f44>
    3544:	008000b4 	movhi	r2,2
    3548:	10a38704 	addi	r2,r2,-29156
    354c:	003e7f06 	br	2f4c <__alt_mem_Flash_flash_data+0xf4002f4c>
    3550:	10c00204 	addi	r3,r2,8
    3554:	003e8206 	br	2f60 <__alt_mem_Flash_flash_data+0xf4002f60>
    3558:	01400434 	movhi	r5,16
    355c:	297fffc4 	addi	r5,r5,-1
    3560:	994a703a 	and	r5,r19,r5
    3564:	9009883a 	mov	r4,r18
    3568:	8c7f0044 	addi	r17,r17,-1023
    356c:	294ffc34 	orhi	r5,r5,16368
    3570:	dd000217 	ldw	r20,8(sp)
    3574:	d8000f15 	stw	zero,60(sp)
    3578:	003e9f06 	br	2ff8 <__alt_mem_Flash_flash_data+0xf4002ff8>
    357c:	008000b4 	movhi	r2,2
    3580:	10a37e04 	addi	r2,r2,-29192
    3584:	003e5f06 	br	2f04 <__alt_mem_Flash_flash_data+0xf4002f04>
    3588:	80001115 	stw	zero,68(r16)
    358c:	8009883a 	mov	r4,r16
    3590:	000b883a 	mov	r5,zero
    3594:	00056340 	call	5634 <_Balloc>
    3598:	01bfffc4 	movi	r6,-1
    359c:	d8800715 	stw	r2,28(sp)
    35a0:	80801015 	stw	r2,64(r16)
    35a4:	00800044 	movi	r2,1
    35a8:	d9800c15 	stw	r6,48(sp)
    35ac:	d8800b15 	stw	r2,44(sp)
    35b0:	d9800615 	stw	r6,24(sp)
    35b4:	d8002215 	stw	zero,136(sp)
    35b8:	d8000315 	stw	zero,12(sp)
    35bc:	d8800117 	ldw	r2,4(sp)
    35c0:	10008e16 	blt	r2,zero,37fc <_dtoa_r+0x9b4>
    35c4:	d9000517 	ldw	r4,20(sp)
    35c8:	00c00384 	movi	r3,14
    35cc:	19008b16 	blt	r3,r4,37fc <_dtoa_r+0x9b4>
    35d0:	200490fa 	slli	r2,r4,3
    35d4:	00c000b4 	movhi	r3,2
    35d8:	d9802217 	ldw	r6,136(sp)
    35dc:	18e3a604 	addi	r3,r3,-29032
    35e0:	1885883a 	add	r2,r3,r2
    35e4:	14400017 	ldw	r17,0(r2)
    35e8:	15000117 	ldw	r20,4(r2)
    35ec:	3001c716 	blt	r6,zero,3d0c <_dtoa_r+0xec4>
    35f0:	880d883a 	mov	r6,r17
    35f4:	a00f883a 	mov	r7,r20
    35f8:	9009883a 	mov	r4,r18
    35fc:	980b883a 	mov	r5,r19
    3600:	000a8dc0 	call	a8dc <__divdf3>
    3604:	180b883a 	mov	r5,r3
    3608:	1009883a 	mov	r4,r2
    360c:	000c3e00 	call	c3e0 <__fixdfsi>
    3610:	1009883a 	mov	r4,r2
    3614:	102d883a 	mov	r22,r2
    3618:	000c4680 	call	c468 <__floatsidf>
    361c:	1009883a 	mov	r4,r2
    3620:	180b883a 	mov	r5,r3
    3624:	880d883a 	mov	r6,r17
    3628:	a00f883a 	mov	r7,r20
    362c:	000b3ec0 	call	b3ec <__muldf3>
    3630:	9009883a 	mov	r4,r18
    3634:	980b883a 	mov	r5,r19
    3638:	100d883a 	mov	r6,r2
    363c:	180f883a 	mov	r7,r3
    3640:	000bb100 	call	bb10 <__subdf3>
    3644:	d9000717 	ldw	r4,28(sp)
    3648:	d9800617 	ldw	r6,24(sp)
    364c:	180b883a 	mov	r5,r3
    3650:	b0c00c04 	addi	r3,r22,48
    3654:	20c00005 	stb	r3,0(r4)
    3658:	25c00044 	addi	r23,r4,1
    365c:	01000044 	movi	r4,1
    3660:	1011883a 	mov	r8,r2
    3664:	2807883a 	mov	r3,r5
    3668:	31003d26 	beq	r6,r4,3760 <_dtoa_r+0x918>
    366c:	000d883a 	mov	r6,zero
    3670:	01d00934 	movhi	r7,16420
    3674:	1009883a 	mov	r4,r2
    3678:	000b3ec0 	call	b3ec <__muldf3>
    367c:	1009883a 	mov	r4,r2
    3680:	180b883a 	mov	r5,r3
    3684:	000d883a 	mov	r6,zero
    3688:	000f883a 	mov	r7,zero
    368c:	1027883a 	mov	r19,r2
    3690:	182b883a 	mov	r21,r3
    3694:	000b1a80 	call	b1a8 <__eqdf2>
    3698:	103f9926 	beq	r2,zero,3500 <__alt_mem_Flash_flash_data+0xf4003500>
    369c:	d8c00617 	ldw	r3,24(sp)
    36a0:	d9000717 	ldw	r4,28(sp)
    36a4:	b825883a 	mov	r18,r23
    36a8:	18bfffc4 	addi	r2,r3,-1
    36ac:	20ad883a 	add	r22,r4,r2
    36b0:	dc000315 	stw	r16,12(sp)
    36b4:	00000a06 	br	36e0 <_dtoa_r+0x898>
    36b8:	000b3ec0 	call	b3ec <__muldf3>
    36bc:	1009883a 	mov	r4,r2
    36c0:	180b883a 	mov	r5,r3
    36c4:	000d883a 	mov	r6,zero
    36c8:	000f883a 	mov	r7,zero
    36cc:	1027883a 	mov	r19,r2
    36d0:	182b883a 	mov	r21,r3
    36d4:	b825883a 	mov	r18,r23
    36d8:	000b1a80 	call	b1a8 <__eqdf2>
    36dc:	10022626 	beq	r2,zero,3f78 <_dtoa_r+0x1130>
    36e0:	880d883a 	mov	r6,r17
    36e4:	a00f883a 	mov	r7,r20
    36e8:	9809883a 	mov	r4,r19
    36ec:	a80b883a 	mov	r5,r21
    36f0:	000a8dc0 	call	a8dc <__divdf3>
    36f4:	180b883a 	mov	r5,r3
    36f8:	1009883a 	mov	r4,r2
    36fc:	000c3e00 	call	c3e0 <__fixdfsi>
    3700:	1009883a 	mov	r4,r2
    3704:	1021883a 	mov	r16,r2
    3708:	000c4680 	call	c468 <__floatsidf>
    370c:	1009883a 	mov	r4,r2
    3710:	180b883a 	mov	r5,r3
    3714:	880d883a 	mov	r6,r17
    3718:	a00f883a 	mov	r7,r20
    371c:	000b3ec0 	call	b3ec <__muldf3>
    3720:	9809883a 	mov	r4,r19
    3724:	a80b883a 	mov	r5,r21
    3728:	100d883a 	mov	r6,r2
    372c:	180f883a 	mov	r7,r3
    3730:	000bb100 	call	bb10 <__subdf3>
    3734:	82000c04 	addi	r8,r16,48
    3738:	92000005 	stb	r8,0(r18)
    373c:	1009883a 	mov	r4,r2
    3740:	180b883a 	mov	r5,r3
    3744:	000d883a 	mov	r6,zero
    3748:	01d00934 	movhi	r7,16420
    374c:	1011883a 	mov	r8,r2
    3750:	bdc00044 	addi	r23,r23,1
    3754:	95bfd81e 	bne	r18,r22,36b8 <__alt_mem_Flash_flash_data+0xf40036b8>
    3758:	802d883a 	mov	r22,r16
    375c:	dc000317 	ldw	r16,12(sp)
    3760:	4009883a 	mov	r4,r8
    3764:	180b883a 	mov	r5,r3
    3768:	400d883a 	mov	r6,r8
    376c:	180f883a 	mov	r7,r3
    3770:	000a0400 	call	a040 <__adddf3>
    3774:	8809883a 	mov	r4,r17
    3778:	a00b883a 	mov	r5,r20
    377c:	100d883a 	mov	r6,r2
    3780:	180f883a 	mov	r7,r3
    3784:	1027883a 	mov	r19,r2
    3788:	1825883a 	mov	r18,r3
    378c:	000b30c0 	call	b30c <__ledf2>
    3790:	10000816 	blt	r2,zero,37b4 <_dtoa_r+0x96c>
    3794:	8809883a 	mov	r4,r17
    3798:	a00b883a 	mov	r5,r20
    379c:	980d883a 	mov	r6,r19
    37a0:	900f883a 	mov	r7,r18
    37a4:	000b1a80 	call	b1a8 <__eqdf2>
    37a8:	103f551e 	bne	r2,zero,3500 <__alt_mem_Flash_flash_data+0xf4003500>
    37ac:	b580004c 	andi	r22,r22,1
    37b0:	b03f5326 	beq	r22,zero,3500 <__alt_mem_Flash_flash_data+0xf4003500>
    37b4:	bd7fffc3 	ldbu	r21,-1(r23)
    37b8:	b8bfffc4 	addi	r2,r23,-1
    37bc:	1007883a 	mov	r3,r2
    37c0:	01400e44 	movi	r5,57
    37c4:	d9800717 	ldw	r6,28(sp)
    37c8:	00000506 	br	37e0 <_dtoa_r+0x998>
    37cc:	18ffffc4 	addi	r3,r3,-1
    37d0:	30825e26 	beq	r6,r2,414c <_dtoa_r+0x1304>
    37d4:	1d400003 	ldbu	r21,0(r3)
    37d8:	102f883a 	mov	r23,r2
    37dc:	10bfffc4 	addi	r2,r2,-1
    37e0:	a9003fcc 	andi	r4,r21,255
    37e4:	2100201c 	xori	r4,r4,128
    37e8:	213fe004 	addi	r4,r4,-128
    37ec:	217ff726 	beq	r4,r5,37cc <__alt_mem_Flash_flash_data+0xf40037cc>
    37f0:	aa000044 	addi	r8,r21,1
    37f4:	12000005 	stb	r8,0(r2)
    37f8:	003f4106 	br	3500 <__alt_mem_Flash_flash_data+0xf4003500>
    37fc:	d8c00b17 	ldw	r3,44(sp)
    3800:	18006726 	beq	r3,zero,39a0 <_dtoa_r+0xb58>
    3804:	d9000317 	ldw	r4,12(sp)
    3808:	00c00044 	movi	r3,1
    380c:	19016a0e 	bge	r3,r4,3db8 <_dtoa_r+0xf70>
    3810:	d8800617 	ldw	r2,24(sp)
    3814:	d8c00917 	ldw	r3,36(sp)
    3818:	157fffc4 	addi	r21,r2,-1
    381c:	1d420716 	blt	r3,r21,403c <_dtoa_r+0x11f4>
    3820:	1d6bc83a 	sub	r21,r3,r21
    3824:	d8800617 	ldw	r2,24(sp)
    3828:	1002c716 	blt	r2,zero,4348 <_dtoa_r+0x1500>
    382c:	dd000817 	ldw	r20,32(sp)
    3830:	d8800617 	ldw	r2,24(sp)
    3834:	d9800817 	ldw	r6,32(sp)
    3838:	8009883a 	mov	r4,r16
    383c:	01400044 	movi	r5,1
    3840:	308d883a 	add	r6,r6,r2
    3844:	d9800815 	stw	r6,32(sp)
    3848:	b0ad883a 	add	r22,r22,r2
    384c:	0005a400 	call	5a40 <__i2b>
    3850:	1023883a 	mov	r17,r2
    3854:	a0000826 	beq	r20,zero,3878 <_dtoa_r+0xa30>
    3858:	0580070e 	bge	zero,r22,3878 <_dtoa_r+0xa30>
    385c:	b005883a 	mov	r2,r22
    3860:	a5812016 	blt	r20,r22,3ce4 <_dtoa_r+0xe9c>
    3864:	d8c00817 	ldw	r3,32(sp)
    3868:	a0a9c83a 	sub	r20,r20,r2
    386c:	b0adc83a 	sub	r22,r22,r2
    3870:	1887c83a 	sub	r3,r3,r2
    3874:	d8c00815 	stw	r3,32(sp)
    3878:	d9000917 	ldw	r4,36(sp)
    387c:	0100140e 	bge	zero,r4,38d0 <_dtoa_r+0xa88>
    3880:	d9800b17 	ldw	r6,44(sp)
    3884:	3001e526 	beq	r6,zero,401c <_dtoa_r+0x11d4>
    3888:	05400e0e 	bge	zero,r21,38c4 <_dtoa_r+0xa7c>
    388c:	880b883a 	mov	r5,r17
    3890:	8009883a 	mov	r4,r16
    3894:	a80d883a 	mov	r6,r21
    3898:	0005c780 	call	5c78 <__pow5mult>
    389c:	e00d883a 	mov	r6,fp
    38a0:	8009883a 	mov	r4,r16
    38a4:	100b883a 	mov	r5,r2
    38a8:	1023883a 	mov	r17,r2
    38ac:	0005a7c0 	call	5a7c <__multiply>
    38b0:	102f883a 	mov	r23,r2
    38b4:	e00b883a 	mov	r5,fp
    38b8:	8009883a 	mov	r4,r16
    38bc:	00056dc0 	call	56dc <_Bfree>
    38c0:	b839883a 	mov	fp,r23
    38c4:	d8800917 	ldw	r2,36(sp)
    38c8:	154dc83a 	sub	r6,r2,r21
    38cc:	3001281e 	bne	r6,zero,3d70 <_dtoa_r+0xf28>
    38d0:	05c00044 	movi	r23,1
    38d4:	8009883a 	mov	r4,r16
    38d8:	b80b883a 	mov	r5,r23
    38dc:	0005a400 	call	5a40 <__i2b>
    38e0:	d8c00a17 	ldw	r3,40(sp)
    38e4:	102b883a 	mov	r21,r2
    38e8:	00c0310e 	bge	zero,r3,39b0 <_dtoa_r+0xb68>
    38ec:	8009883a 	mov	r4,r16
    38f0:	100b883a 	mov	r5,r2
    38f4:	180d883a 	mov	r6,r3
    38f8:	0005c780 	call	5c78 <__pow5mult>
    38fc:	d9000317 	ldw	r4,12(sp)
    3900:	102b883a 	mov	r21,r2
    3904:	b9011f0e 	bge	r23,r4,3d84 <_dtoa_r+0xf3c>
    3908:	0027883a 	mov	r19,zero
    390c:	a8800417 	ldw	r2,16(r21)
    3910:	10800104 	addi	r2,r2,4
    3914:	1085883a 	add	r2,r2,r2
    3918:	1085883a 	add	r2,r2,r2
    391c:	a885883a 	add	r2,r21,r2
    3920:	11000017 	ldw	r4,0(r2)
    3924:	00059280 	call	5928 <__hi0bits>
    3928:	00c00804 	movi	r3,32
    392c:	1885c83a 	sub	r2,r3,r2
    3930:	00002506 	br	39c8 <_dtoa_r+0xb80>
    3934:	01800044 	movi	r6,1
    3938:	d9800d15 	stw	r6,52(sp)
    393c:	003dec06 	br	30f0 <__alt_mem_Flash_flash_data+0xf40030f0>
    3940:	d8c00817 	ldw	r3,32(sp)
    3944:	d9000517 	ldw	r4,20(sp)
    3948:	d8000a15 	stw	zero,40(sp)
    394c:	1907c83a 	sub	r3,r3,r4
    3950:	010dc83a 	sub	r6,zero,r4
    3954:	d8c00815 	stw	r3,32(sp)
    3958:	d9800915 	stw	r6,36(sp)
    395c:	003ded06 	br	3114 <__alt_mem_Flash_flash_data+0xf4003114>
    3960:	05adc83a 	sub	r22,zero,r22
    3964:	dd800815 	stw	r22,32(sp)
    3968:	002d883a 	mov	r22,zero
    396c:	003de406 	br	3100 <__alt_mem_Flash_flash_data+0xf4003100>
    3970:	d9000517 	ldw	r4,20(sp)
    3974:	000c4680 	call	c468 <__floatsidf>
    3978:	1009883a 	mov	r4,r2
    397c:	180b883a 	mov	r5,r3
    3980:	b00d883a 	mov	r6,r22
    3984:	a80f883a 	mov	r7,r21
    3988:	000b1a80 	call	b1a8 <__eqdf2>
    398c:	103dc726 	beq	r2,zero,30ac <__alt_mem_Flash_flash_data+0xf40030ac>
    3990:	d8800517 	ldw	r2,20(sp)
    3994:	10bfffc4 	addi	r2,r2,-1
    3998:	d8800515 	stw	r2,20(sp)
    399c:	003dc306 	br	30ac <__alt_mem_Flash_flash_data+0xf40030ac>
    39a0:	dd400917 	ldw	r21,36(sp)
    39a4:	dd000817 	ldw	r20,32(sp)
    39a8:	0023883a 	mov	r17,zero
    39ac:	003fa906 	br	3854 <__alt_mem_Flash_flash_data+0xf4003854>
    39b0:	d9800317 	ldw	r6,12(sp)
    39b4:	b981670e 	bge	r23,r6,3f54 <_dtoa_r+0x110c>
    39b8:	0027883a 	mov	r19,zero
    39bc:	d8c00a17 	ldw	r3,40(sp)
    39c0:	183fd21e 	bne	r3,zero,390c <__alt_mem_Flash_flash_data+0xf400390c>
    39c4:	00800044 	movi	r2,1
    39c8:	1585883a 	add	r2,r2,r22
    39cc:	108007cc 	andi	r2,r2,31
    39d0:	10005f26 	beq	r2,zero,3b50 <_dtoa_r+0xd08>
    39d4:	00c00804 	movi	r3,32
    39d8:	1887c83a 	sub	r3,r3,r2
    39dc:	01000104 	movi	r4,4
    39e0:	20c2dd0e 	bge	r4,r3,4558 <_dtoa_r+0x1710>
    39e4:	d9000817 	ldw	r4,32(sp)
    39e8:	00c00704 	movi	r3,28
    39ec:	1885c83a 	sub	r2,r3,r2
    39f0:	2089883a 	add	r4,r4,r2
    39f4:	d9000815 	stw	r4,32(sp)
    39f8:	a0a9883a 	add	r20,r20,r2
    39fc:	b0ad883a 	add	r22,r22,r2
    3a00:	d8800817 	ldw	r2,32(sp)
    3a04:	0080050e 	bge	zero,r2,3a1c <_dtoa_r+0xbd4>
    3a08:	e00b883a 	mov	r5,fp
    3a0c:	8009883a 	mov	r4,r16
    3a10:	100d883a 	mov	r6,r2
    3a14:	0005db80 	call	5db8 <__lshift>
    3a18:	1039883a 	mov	fp,r2
    3a1c:	0580050e 	bge	zero,r22,3a34 <_dtoa_r+0xbec>
    3a20:	a80b883a 	mov	r5,r21
    3a24:	8009883a 	mov	r4,r16
    3a28:	b00d883a 	mov	r6,r22
    3a2c:	0005db80 	call	5db8 <__lshift>
    3a30:	102b883a 	mov	r21,r2
    3a34:	d8c00d17 	ldw	r3,52(sp)
    3a38:	1801161e 	bne	r3,zero,3e94 <_dtoa_r+0x104c>
    3a3c:	d8c00617 	ldw	r3,24(sp)
    3a40:	00c12d0e 	bge	zero,r3,3ef8 <_dtoa_r+0x10b0>
    3a44:	d8c00b17 	ldw	r3,44(sp)
    3a48:	1800571e 	bne	r3,zero,3ba8 <_dtoa_r+0xd60>
    3a4c:	dc800717 	ldw	r18,28(sp)
    3a50:	dcc00617 	ldw	r19,24(sp)
    3a54:	9029883a 	mov	r20,r18
    3a58:	00000206 	br	3a64 <_dtoa_r+0xc1c>
    3a5c:	00057040 	call	5704 <__multadd>
    3a60:	1039883a 	mov	fp,r2
    3a64:	e009883a 	mov	r4,fp
    3a68:	a80b883a 	mov	r5,r21
    3a6c:	0002c480 	call	2c48 <quorem>
    3a70:	10800c04 	addi	r2,r2,48
    3a74:	90800005 	stb	r2,0(r18)
    3a78:	94800044 	addi	r18,r18,1
    3a7c:	9507c83a 	sub	r3,r18,r20
    3a80:	8009883a 	mov	r4,r16
    3a84:	e00b883a 	mov	r5,fp
    3a88:	01800284 	movi	r6,10
    3a8c:	000f883a 	mov	r7,zero
    3a90:	1cfff216 	blt	r3,r19,3a5c <__alt_mem_Flash_flash_data+0xf4003a5c>
    3a94:	1011883a 	mov	r8,r2
    3a98:	d8800617 	ldw	r2,24(sp)
    3a9c:	00822e0e 	bge	zero,r2,4358 <_dtoa_r+0x1510>
    3aa0:	d9000717 	ldw	r4,28(sp)
    3aa4:	0025883a 	mov	r18,zero
    3aa8:	20af883a 	add	r23,r4,r2
    3aac:	e00b883a 	mov	r5,fp
    3ab0:	01800044 	movi	r6,1
    3ab4:	8009883a 	mov	r4,r16
    3ab8:	da001715 	stw	r8,92(sp)
    3abc:	0005db80 	call	5db8 <__lshift>
    3ac0:	1009883a 	mov	r4,r2
    3ac4:	a80b883a 	mov	r5,r21
    3ac8:	1039883a 	mov	fp,r2
    3acc:	0005f080 	call	5f08 <__mcmp>
    3ad0:	da001717 	ldw	r8,92(sp)
    3ad4:	00816e0e 	bge	zero,r2,4090 <_dtoa_r+0x1248>
    3ad8:	b93fffc3 	ldbu	r4,-1(r23)
    3adc:	b8bfffc4 	addi	r2,r23,-1
    3ae0:	1007883a 	mov	r3,r2
    3ae4:	01800e44 	movi	r6,57
    3ae8:	d9c00717 	ldw	r7,28(sp)
    3aec:	00000506 	br	3b04 <_dtoa_r+0xcbc>
    3af0:	18ffffc4 	addi	r3,r3,-1
    3af4:	38811926 	beq	r7,r2,3f5c <_dtoa_r+0x1114>
    3af8:	19000003 	ldbu	r4,0(r3)
    3afc:	102f883a 	mov	r23,r2
    3b00:	10bfffc4 	addi	r2,r2,-1
    3b04:	21403fcc 	andi	r5,r4,255
    3b08:	2940201c 	xori	r5,r5,128
    3b0c:	297fe004 	addi	r5,r5,-128
    3b10:	29bff726 	beq	r5,r6,3af0 <__alt_mem_Flash_flash_data+0xf4003af0>
    3b14:	21000044 	addi	r4,r4,1
    3b18:	11000005 	stb	r4,0(r2)
    3b1c:	8009883a 	mov	r4,r16
    3b20:	a80b883a 	mov	r5,r21
    3b24:	00056dc0 	call	56dc <_Bfree>
    3b28:	883e7526 	beq	r17,zero,3500 <__alt_mem_Flash_flash_data+0xf4003500>
    3b2c:	90000426 	beq	r18,zero,3b40 <_dtoa_r+0xcf8>
    3b30:	94400326 	beq	r18,r17,3b40 <_dtoa_r+0xcf8>
    3b34:	8009883a 	mov	r4,r16
    3b38:	900b883a 	mov	r5,r18
    3b3c:	00056dc0 	call	56dc <_Bfree>
    3b40:	8009883a 	mov	r4,r16
    3b44:	880b883a 	mov	r5,r17
    3b48:	00056dc0 	call	56dc <_Bfree>
    3b4c:	003e6c06 	br	3500 <__alt_mem_Flash_flash_data+0xf4003500>
    3b50:	00800704 	movi	r2,28
    3b54:	d9800817 	ldw	r6,32(sp)
    3b58:	a0a9883a 	add	r20,r20,r2
    3b5c:	b0ad883a 	add	r22,r22,r2
    3b60:	308d883a 	add	r6,r6,r2
    3b64:	d9800815 	stw	r6,32(sp)
    3b68:	003fa506 	br	3a00 <__alt_mem_Flash_flash_data+0xf4003a00>
    3b6c:	013efb84 	movi	r4,-1042
    3b70:	246bc83a 	sub	r21,r4,r17
    3b74:	9548983a 	sll	r4,r18,r21
    3b78:	003d1806 	br	2fdc <__alt_mem_Flash_flash_data+0xf4002fdc>
    3b7c:	d8000d15 	stw	zero,52(sp)
    3b80:	003d5b06 	br	30f0 <__alt_mem_Flash_flash_data+0xf40030f0>
    3b84:	880b883a 	mov	r5,r17
    3b88:	8009883a 	mov	r4,r16
    3b8c:	01800284 	movi	r6,10
    3b90:	000f883a 	mov	r7,zero
    3b94:	00057040 	call	5704 <__multadd>
    3b98:	1023883a 	mov	r17,r2
    3b9c:	d8800c17 	ldw	r2,48(sp)
    3ba0:	0082550e 	bge	zero,r2,44f8 <_dtoa_r+0x16b0>
    3ba4:	d8800615 	stw	r2,24(sp)
    3ba8:	0500050e 	bge	zero,r20,3bc0 <_dtoa_r+0xd78>
    3bac:	880b883a 	mov	r5,r17
    3bb0:	8009883a 	mov	r4,r16
    3bb4:	a00d883a 	mov	r6,r20
    3bb8:	0005db80 	call	5db8 <__lshift>
    3bbc:	1023883a 	mov	r17,r2
    3bc0:	98016a1e 	bne	r19,zero,416c <_dtoa_r+0x1324>
    3bc4:	8829883a 	mov	r20,r17
    3bc8:	d9000617 	ldw	r4,24(sp)
    3bcc:	dcc00717 	ldw	r19,28(sp)
    3bd0:	9480004c 	andi	r18,r18,1
    3bd4:	20bfffc4 	addi	r2,r4,-1
    3bd8:	9885883a 	add	r2,r19,r2
    3bdc:	d8800415 	stw	r2,16(sp)
    3be0:	dc800615 	stw	r18,24(sp)
    3be4:	e009883a 	mov	r4,fp
    3be8:	a80b883a 	mov	r5,r21
    3bec:	0002c480 	call	2c48 <quorem>
    3bf0:	e009883a 	mov	r4,fp
    3bf4:	880b883a 	mov	r5,r17
    3bf8:	102f883a 	mov	r23,r2
    3bfc:	0005f080 	call	5f08 <__mcmp>
    3c00:	8009883a 	mov	r4,r16
    3c04:	a80b883a 	mov	r5,r21
    3c08:	a00d883a 	mov	r6,r20
    3c0c:	102d883a 	mov	r22,r2
    3c10:	0005f680 	call	5f68 <__mdiff>
    3c14:	1007883a 	mov	r3,r2
    3c18:	10800317 	ldw	r2,12(r2)
    3c1c:	bc800c04 	addi	r18,r23,48
    3c20:	1000971e 	bne	r2,zero,3e80 <_dtoa_r+0x1038>
    3c24:	180b883a 	mov	r5,r3
    3c28:	e009883a 	mov	r4,fp
    3c2c:	d8c01515 	stw	r3,84(sp)
    3c30:	0005f080 	call	5f08 <__mcmp>
    3c34:	d8c01517 	ldw	r3,84(sp)
    3c38:	8009883a 	mov	r4,r16
    3c3c:	d8801515 	stw	r2,84(sp)
    3c40:	180b883a 	mov	r5,r3
    3c44:	00056dc0 	call	56dc <_Bfree>
    3c48:	d8801517 	ldw	r2,84(sp)
    3c4c:	1000041e 	bne	r2,zero,3c60 <_dtoa_r+0xe18>
    3c50:	d9800317 	ldw	r6,12(sp)
    3c54:	3000021e 	bne	r6,zero,3c60 <_dtoa_r+0xe18>
    3c58:	d8c00617 	ldw	r3,24(sp)
    3c5c:	18007626 	beq	r3,zero,3e38 <_dtoa_r+0xff0>
    3c60:	b0005b16 	blt	r22,zero,3dd0 <_dtoa_r+0xf88>
    3c64:	b000041e 	bne	r22,zero,3c78 <_dtoa_r+0xe30>
    3c68:	d9000317 	ldw	r4,12(sp)
    3c6c:	2000021e 	bne	r4,zero,3c78 <_dtoa_r+0xe30>
    3c70:	d8c00617 	ldw	r3,24(sp)
    3c74:	18005626 	beq	r3,zero,3dd0 <_dtoa_r+0xf88>
    3c78:	00814d16 	blt	zero,r2,41b0 <_dtoa_r+0x1368>
    3c7c:	d8c00417 	ldw	r3,16(sp)
    3c80:	9d800044 	addi	r22,r19,1
    3c84:	9c800005 	stb	r18,0(r19)
    3c88:	b02f883a 	mov	r23,r22
    3c8c:	98c14c26 	beq	r19,r3,41c0 <_dtoa_r+0x1378>
    3c90:	e00b883a 	mov	r5,fp
    3c94:	8009883a 	mov	r4,r16
    3c98:	01800284 	movi	r6,10
    3c9c:	000f883a 	mov	r7,zero
    3ca0:	00057040 	call	5704 <__multadd>
    3ca4:	1039883a 	mov	fp,r2
    3ca8:	8d006d26 	beq	r17,r20,3e60 <_dtoa_r+0x1018>
    3cac:	880b883a 	mov	r5,r17
    3cb0:	01800284 	movi	r6,10
    3cb4:	000f883a 	mov	r7,zero
    3cb8:	8009883a 	mov	r4,r16
    3cbc:	00057040 	call	5704 <__multadd>
    3cc0:	a00b883a 	mov	r5,r20
    3cc4:	8009883a 	mov	r4,r16
    3cc8:	01800284 	movi	r6,10
    3ccc:	000f883a 	mov	r7,zero
    3cd0:	1023883a 	mov	r17,r2
    3cd4:	00057040 	call	5704 <__multadd>
    3cd8:	1029883a 	mov	r20,r2
    3cdc:	b027883a 	mov	r19,r22
    3ce0:	003fc006 	br	3be4 <__alt_mem_Flash_flash_data+0xf4003be4>
    3ce4:	a005883a 	mov	r2,r20
    3ce8:	003ede06 	br	3864 <__alt_mem_Flash_flash_data+0xf4003864>
    3cec:	01000044 	movi	r4,1
    3cf0:	d9000b15 	stw	r4,44(sp)
    3cf4:	d9802217 	ldw	r6,136(sp)
    3cf8:	0180dc0e 	bge	zero,r6,406c <_dtoa_r+0x1224>
    3cfc:	3023883a 	mov	r17,r6
    3d00:	d9800c15 	stw	r6,48(sp)
    3d04:	d9800615 	stw	r6,24(sp)
    3d08:	003d1e06 	br	3184 <__alt_mem_Flash_flash_data+0xf4003184>
    3d0c:	d8800617 	ldw	r2,24(sp)
    3d10:	00be3716 	blt	zero,r2,35f0 <__alt_mem_Flash_flash_data+0xf40035f0>
    3d14:	1000be1e 	bne	r2,zero,4010 <_dtoa_r+0x11c8>
    3d18:	8809883a 	mov	r4,r17
    3d1c:	a00b883a 	mov	r5,r20
    3d20:	000d883a 	mov	r6,zero
    3d24:	01d00534 	movhi	r7,16404
    3d28:	000b3ec0 	call	b3ec <__muldf3>
    3d2c:	1009883a 	mov	r4,r2
    3d30:	180b883a 	mov	r5,r3
    3d34:	900d883a 	mov	r6,r18
    3d38:	980f883a 	mov	r7,r19
    3d3c:	000b22c0 	call	b22c <__gedf2>
    3d40:	002b883a 	mov	r21,zero
    3d44:	0023883a 	mov	r17,zero
    3d48:	10007a16 	blt	r2,zero,3f34 <_dtoa_r+0x10ec>
    3d4c:	d9002217 	ldw	r4,136(sp)
    3d50:	ddc00717 	ldw	r23,28(sp)
    3d54:	0108303a 	nor	r4,zero,r4
    3d58:	d9000515 	stw	r4,20(sp)
    3d5c:	8009883a 	mov	r4,r16
    3d60:	a80b883a 	mov	r5,r21
    3d64:	00056dc0 	call	56dc <_Bfree>
    3d68:	883f751e 	bne	r17,zero,3b40 <__alt_mem_Flash_flash_data+0xf4003b40>
    3d6c:	003de406 	br	3500 <__alt_mem_Flash_flash_data+0xf4003500>
    3d70:	e00b883a 	mov	r5,fp
    3d74:	8009883a 	mov	r4,r16
    3d78:	0005c780 	call	5c78 <__pow5mult>
    3d7c:	1039883a 	mov	fp,r2
    3d80:	003ed306 	br	38d0 <__alt_mem_Flash_flash_data+0xf40038d0>
    3d84:	903ee01e 	bne	r18,zero,3908 <__alt_mem_Flash_flash_data+0xf4003908>
    3d88:	00800434 	movhi	r2,16
    3d8c:	10bfffc4 	addi	r2,r2,-1
    3d90:	9884703a 	and	r2,r19,r2
    3d94:	103f081e 	bne	r2,zero,39b8 <__alt_mem_Flash_flash_data+0xf40039b8>
    3d98:	9cdffc2c 	andhi	r19,r19,32752
    3d9c:	983f0626 	beq	r19,zero,39b8 <__alt_mem_Flash_flash_data+0xf40039b8>
    3da0:	d8800817 	ldw	r2,32(sp)
    3da4:	b5800044 	addi	r22,r22,1
    3da8:	04c00044 	movi	r19,1
    3dac:	10800044 	addi	r2,r2,1
    3db0:	d8800815 	stw	r2,32(sp)
    3db4:	003f0106 	br	39bc <__alt_mem_Flash_flash_data+0xf40039bc>
    3db8:	d9800f17 	ldw	r6,60(sp)
    3dbc:	30016826 	beq	r6,zero,4360 <_dtoa_r+0x1518>
    3dc0:	10810cc4 	addi	r2,r2,1075
    3dc4:	dd400917 	ldw	r21,36(sp)
    3dc8:	dd000817 	ldw	r20,32(sp)
    3dcc:	003e9906 	br	3834 <__alt_mem_Flash_flash_data+0xf4003834>
    3dd0:	9011883a 	mov	r8,r18
    3dd4:	4007883a 	mov	r3,r8
    3dd8:	e02d883a 	mov	r22,fp
    3ddc:	0080100e 	bge	zero,r2,3e20 <_dtoa_r+0xfd8>
    3de0:	01800044 	movi	r6,1
    3de4:	8009883a 	mov	r4,r16
    3de8:	e00b883a 	mov	r5,fp
    3dec:	da001515 	stw	r8,84(sp)
    3df0:	da001715 	stw	r8,92(sp)
    3df4:	0005db80 	call	5db8 <__lshift>
    3df8:	1009883a 	mov	r4,r2
    3dfc:	a80b883a 	mov	r5,r21
    3e00:	102d883a 	mov	r22,r2
    3e04:	0005f080 	call	5f08 <__mcmp>
    3e08:	d8c01517 	ldw	r3,84(sp)
    3e0c:	da001717 	ldw	r8,92(sp)
    3e10:	0081a50e 	bge	zero,r2,44a8 <_dtoa_r+0x1660>
    3e14:	00800e44 	movi	r2,57
    3e18:	40817b26 	beq	r8,r2,4408 <_dtoa_r+0x15c0>
    3e1c:	40c00044 	addi	r3,r8,1
    3e20:	8825883a 	mov	r18,r17
    3e24:	9dc00044 	addi	r23,r19,1
    3e28:	98c00005 	stb	r3,0(r19)
    3e2c:	a023883a 	mov	r17,r20
    3e30:	b039883a 	mov	fp,r22
    3e34:	003f3906 	br	3b1c <__alt_mem_Flash_flash_data+0xf4003b1c>
    3e38:	00800e44 	movi	r2,57
    3e3c:	9011883a 	mov	r8,r18
    3e40:	90817226 	beq	r18,r2,440c <_dtoa_r+0x15c4>
    3e44:	0580010e 	bge	zero,r22,3e4c <_dtoa_r+0x1004>
    3e48:	ba000c44 	addi	r8,r23,49
    3e4c:	8825883a 	mov	r18,r17
    3e50:	9dc00044 	addi	r23,r19,1
    3e54:	9a000005 	stb	r8,0(r19)
    3e58:	a023883a 	mov	r17,r20
    3e5c:	003f2f06 	br	3b1c <__alt_mem_Flash_flash_data+0xf4003b1c>
    3e60:	880b883a 	mov	r5,r17
    3e64:	8009883a 	mov	r4,r16
    3e68:	01800284 	movi	r6,10
    3e6c:	000f883a 	mov	r7,zero
    3e70:	00057040 	call	5704 <__multadd>
    3e74:	1023883a 	mov	r17,r2
    3e78:	1029883a 	mov	r20,r2
    3e7c:	003f9706 	br	3cdc <__alt_mem_Flash_flash_data+0xf4003cdc>
    3e80:	8009883a 	mov	r4,r16
    3e84:	180b883a 	mov	r5,r3
    3e88:	00056dc0 	call	56dc <_Bfree>
    3e8c:	00800044 	movi	r2,1
    3e90:	003f7306 	br	3c60 <__alt_mem_Flash_flash_data+0xf4003c60>
    3e94:	e009883a 	mov	r4,fp
    3e98:	a80b883a 	mov	r5,r21
    3e9c:	0005f080 	call	5f08 <__mcmp>
    3ea0:	103ee60e 	bge	r2,zero,3a3c <__alt_mem_Flash_flash_data+0xf4003a3c>
    3ea4:	8009883a 	mov	r4,r16
    3ea8:	e00b883a 	mov	r5,fp
    3eac:	01800284 	movi	r6,10
    3eb0:	000f883a 	mov	r7,zero
    3eb4:	00057040 	call	5704 <__multadd>
    3eb8:	d9000517 	ldw	r4,20(sp)
    3ebc:	d9800b17 	ldw	r6,44(sp)
    3ec0:	1039883a 	mov	fp,r2
    3ec4:	213fffc4 	addi	r4,r4,-1
    3ec8:	d9000515 	stw	r4,20(sp)
    3ecc:	303f2d1e 	bne	r6,zero,3b84 <__alt_mem_Flash_flash_data+0xf4003b84>
    3ed0:	d9000c17 	ldw	r4,48(sp)
    3ed4:	0101780e 	bge	zero,r4,44b8 <_dtoa_r+0x1670>
    3ed8:	d9000615 	stw	r4,24(sp)
    3edc:	003edb06 	br	3a4c <__alt_mem_Flash_flash_data+0xf4003a4c>
    3ee0:	00800084 	movi	r2,2
    3ee4:	30818e1e 	bne	r6,r2,4520 <_dtoa_r+0x16d8>
    3ee8:	d8000b15 	stw	zero,44(sp)
    3eec:	003f8106 	br	3cf4 <__alt_mem_Flash_flash_data+0xf4003cf4>
    3ef0:	d8800717 	ldw	r2,28(sp)
    3ef4:	003c0306 	br	2f04 <__alt_mem_Flash_flash_data+0xf4002f04>
    3ef8:	d9000317 	ldw	r4,12(sp)
    3efc:	00800084 	movi	r2,2
    3f00:	113ed00e 	bge	r2,r4,3a44 <__alt_mem_Flash_flash_data+0xf4003a44>
    3f04:	d8c00617 	ldw	r3,24(sp)
    3f08:	183f901e 	bne	r3,zero,3d4c <__alt_mem_Flash_flash_data+0xf4003d4c>
    3f0c:	a80b883a 	mov	r5,r21
    3f10:	8009883a 	mov	r4,r16
    3f14:	01800144 	movi	r6,5
    3f18:	000f883a 	mov	r7,zero
    3f1c:	00057040 	call	5704 <__multadd>
    3f20:	e009883a 	mov	r4,fp
    3f24:	100b883a 	mov	r5,r2
    3f28:	102b883a 	mov	r21,r2
    3f2c:	0005f080 	call	5f08 <__mcmp>
    3f30:	00bf860e 	bge	zero,r2,3d4c <__alt_mem_Flash_flash_data+0xf4003d4c>
    3f34:	d9800717 	ldw	r6,28(sp)
    3f38:	00800c44 	movi	r2,49
    3f3c:	30800005 	stb	r2,0(r6)
    3f40:	d8800517 	ldw	r2,20(sp)
    3f44:	35c00044 	addi	r23,r6,1
    3f48:	10800044 	addi	r2,r2,1
    3f4c:	d8800515 	stw	r2,20(sp)
    3f50:	003f8206 	br	3d5c <__alt_mem_Flash_flash_data+0xf4003d5c>
    3f54:	903e981e 	bne	r18,zero,39b8 <__alt_mem_Flash_flash_data+0xf40039b8>
    3f58:	003f8b06 	br	3d88 <__alt_mem_Flash_flash_data+0xf4003d88>
    3f5c:	d9800517 	ldw	r6,20(sp)
    3f60:	d8c00717 	ldw	r3,28(sp)
    3f64:	00800c44 	movi	r2,49
    3f68:	31800044 	addi	r6,r6,1
    3f6c:	d9800515 	stw	r6,20(sp)
    3f70:	18800005 	stb	r2,0(r3)
    3f74:	003ee906 	br	3b1c <__alt_mem_Flash_flash_data+0xf4003b1c>
    3f78:	dc000317 	ldw	r16,12(sp)
    3f7c:	003d6006 	br	3500 <__alt_mem_Flash_flash_data+0xf4003500>
    3f80:	8809883a 	mov	r4,r17
    3f84:	000c4680 	call	c468 <__floatsidf>
    3f88:	a009883a 	mov	r4,r20
    3f8c:	a80b883a 	mov	r5,r21
    3f90:	100d883a 	mov	r6,r2
    3f94:	180f883a 	mov	r7,r3
    3f98:	000b3ec0 	call	b3ec <__muldf3>
    3f9c:	1009883a 	mov	r4,r2
    3fa0:	180b883a 	mov	r5,r3
    3fa4:	000d883a 	mov	r6,zero
    3fa8:	01d00734 	movhi	r7,16412
    3fac:	000a0400 	call	a040 <__adddf3>
    3fb0:	1023883a 	mov	r17,r2
    3fb4:	00bf3034 	movhi	r2,64704
    3fb8:	1885883a 	add	r2,r3,r2
    3fbc:	d8800e15 	stw	r2,56(sp)
    3fc0:	a009883a 	mov	r4,r20
    3fc4:	a80b883a 	mov	r5,r21
    3fc8:	000d883a 	mov	r6,zero
    3fcc:	01d00534 	movhi	r7,16404
    3fd0:	000bb100 	call	bb10 <__subdf3>
    3fd4:	d9c00e17 	ldw	r7,56(sp)
    3fd8:	1009883a 	mov	r4,r2
    3fdc:	180b883a 	mov	r5,r3
    3fe0:	880d883a 	mov	r6,r17
    3fe4:	102b883a 	mov	r21,r2
    3fe8:	1829883a 	mov	r20,r3
    3fec:	000b22c0 	call	b22c <__gedf2>
    3ff0:	00807716 	blt	zero,r2,41d0 <_dtoa_r+0x1388>
    3ff4:	d8800e17 	ldw	r2,56(sp)
    3ff8:	a809883a 	mov	r4,r21
    3ffc:	a00b883a 	mov	r5,r20
    4000:	11e0003c 	xorhi	r7,r2,32768
    4004:	880d883a 	mov	r6,r17
    4008:	000b30c0 	call	b30c <__ledf2>
    400c:	103d6b0e 	bge	r2,zero,35bc <__alt_mem_Flash_flash_data+0xf40035bc>
    4010:	002b883a 	mov	r21,zero
    4014:	0023883a 	mov	r17,zero
    4018:	003f4c06 	br	3d4c <__alt_mem_Flash_flash_data+0xf4003d4c>
    401c:	d9800917 	ldw	r6,36(sp)
    4020:	e00b883a 	mov	r5,fp
    4024:	8009883a 	mov	r4,r16
    4028:	0005c780 	call	5c78 <__pow5mult>
    402c:	1039883a 	mov	fp,r2
    4030:	003e2706 	br	38d0 <__alt_mem_Flash_flash_data+0xf40038d0>
    4034:	d8000b15 	stw	zero,44(sp)
    4038:	003c4906 	br	3160 <__alt_mem_Flash_flash_data+0xf4003160>
    403c:	d9000917 	ldw	r4,36(sp)
    4040:	d9800a17 	ldw	r6,40(sp)
    4044:	dd400915 	stw	r21,36(sp)
    4048:	a905c83a 	sub	r2,r21,r4
    404c:	308d883a 	add	r6,r6,r2
    4050:	d9800a15 	stw	r6,40(sp)
    4054:	002b883a 	mov	r21,zero
    4058:	003df206 	br	3824 <__alt_mem_Flash_flash_data+0xf4003824>
    405c:	dc800e15 	stw	r18,56(sp)
    4060:	982b883a 	mov	r21,r19
    4064:	04400084 	movi	r17,2
    4068:	003c7406 	br	323c <__alt_mem_Flash_flash_data+0xf400323c>
    406c:	04400044 	movi	r17,1
    4070:	dc400c15 	stw	r17,48(sp)
    4074:	dc400615 	stw	r17,24(sp)
    4078:	dc402215 	stw	r17,136(sp)
    407c:	80001115 	stw	zero,68(r16)
    4080:	000b883a 	mov	r5,zero
    4084:	003c4a06 	br	31b0 <__alt_mem_Flash_flash_data+0xf40031b0>
    4088:	3023883a 	mov	r17,r6
    408c:	003ffb06 	br	407c <__alt_mem_Flash_flash_data+0xf400407c>
    4090:	1000021e 	bne	r2,zero,409c <_dtoa_r+0x1254>
    4094:	4200004c 	andi	r8,r8,1
    4098:	403e8f1e 	bne	r8,zero,3ad8 <__alt_mem_Flash_flash_data+0xf4003ad8>
    409c:	01000c04 	movi	r4,48
    40a0:	00000106 	br	40a8 <_dtoa_r+0x1260>
    40a4:	102f883a 	mov	r23,r2
    40a8:	b8bfffc4 	addi	r2,r23,-1
    40ac:	10c00007 	ldb	r3,0(r2)
    40b0:	193ffc26 	beq	r3,r4,40a4 <__alt_mem_Flash_flash_data+0xf40040a4>
    40b4:	003e9906 	br	3b1c <__alt_mem_Flash_flash_data+0xf4003b1c>
    40b8:	d9000517 	ldw	r4,20(sp)
    40bc:	012fc83a 	sub	r23,zero,r4
    40c0:	b800ad26 	beq	r23,zero,4378 <_dtoa_r+0x1530>
    40c4:	b88003cc 	andi	r2,r23,15
    40c8:	100490fa 	slli	r2,r2,3
    40cc:	00c000b4 	movhi	r3,2
    40d0:	18e3a604 	addi	r3,r3,-29032
    40d4:	1885883a 	add	r2,r3,r2
    40d8:	11800017 	ldw	r6,0(r2)
    40dc:	11c00117 	ldw	r7,4(r2)
    40e0:	b82fd13a 	srai	r23,r23,4
    40e4:	9009883a 	mov	r4,r18
    40e8:	980b883a 	mov	r5,r19
    40ec:	000b3ec0 	call	b3ec <__muldf3>
    40f0:	1029883a 	mov	r20,r2
    40f4:	182b883a 	mov	r21,r3
    40f8:	b800f426 	beq	r23,zero,44cc <_dtoa_r+0x1684>
    40fc:	020000b4 	movhi	r8,2
    4100:	42239c04 	addi	r8,r8,-29072
    4104:	8029883a 	mov	r20,r16
    4108:	04400084 	movi	r17,2
    410c:	4021883a 	mov	r16,r8
    4110:	b980004c 	andi	r6,r23,1
    4114:	1009883a 	mov	r4,r2
    4118:	b82fd07a 	srai	r23,r23,1
    411c:	180b883a 	mov	r5,r3
    4120:	30000426 	beq	r6,zero,4134 <_dtoa_r+0x12ec>
    4124:	81800017 	ldw	r6,0(r16)
    4128:	81c00117 	ldw	r7,4(r16)
    412c:	8c400044 	addi	r17,r17,1
    4130:	000b3ec0 	call	b3ec <__muldf3>
    4134:	84000204 	addi	r16,r16,8
    4138:	b83ff51e 	bne	r23,zero,4110 <__alt_mem_Flash_flash_data+0xf4004110>
    413c:	a021883a 	mov	r16,r20
    4140:	182b883a 	mov	r21,r3
    4144:	1029883a 	mov	r20,r2
    4148:	003c5506 	br	32a0 <__alt_mem_Flash_flash_data+0xf40032a0>
    414c:	d9800517 	ldw	r6,20(sp)
    4150:	d9000717 	ldw	r4,28(sp)
    4154:	00c00c04 	movi	r3,48
    4158:	31800044 	addi	r6,r6,1
    415c:	d9800515 	stw	r6,20(sp)
    4160:	20c00005 	stb	r3,0(r4)
    4164:	02000c44 	movi	r8,49
    4168:	003da206 	br	37f4 <__alt_mem_Flash_flash_data+0xf40037f4>
    416c:	89400117 	ldw	r5,4(r17)
    4170:	8009883a 	mov	r4,r16
    4174:	00056340 	call	5634 <_Balloc>
    4178:	89800417 	ldw	r6,16(r17)
    417c:	11000304 	addi	r4,r2,12
    4180:	89400304 	addi	r5,r17,12
    4184:	31800084 	addi	r6,r6,2
    4188:	318d883a 	add	r6,r6,r6
    418c:	318d883a 	add	r6,r6,r6
    4190:	1027883a 	mov	r19,r2
    4194:	00053a00 	call	53a0 <memcpy>
    4198:	8009883a 	mov	r4,r16
    419c:	980b883a 	mov	r5,r19
    41a0:	01800044 	movi	r6,1
    41a4:	0005db80 	call	5db8 <__lshift>
    41a8:	1029883a 	mov	r20,r2
    41ac:	003e8606 	br	3bc8 <__alt_mem_Flash_flash_data+0xf4003bc8>
    41b0:	00800e44 	movi	r2,57
    41b4:	90809526 	beq	r18,r2,440c <_dtoa_r+0x15c4>
    41b8:	92000044 	addi	r8,r18,1
    41bc:	003f2306 	br	3e4c <__alt_mem_Flash_flash_data+0xf4003e4c>
    41c0:	9011883a 	mov	r8,r18
    41c4:	8825883a 	mov	r18,r17
    41c8:	a023883a 	mov	r17,r20
    41cc:	003e3706 	br	3aac <__alt_mem_Flash_flash_data+0xf4003aac>
    41d0:	002b883a 	mov	r21,zero
    41d4:	0023883a 	mov	r17,zero
    41d8:	003f5606 	br	3f34 <__alt_mem_Flash_flash_data+0xf4003f34>
    41dc:	51bfffc4 	addi	r6,r10,-1
    41e0:	300490fa 	slli	r2,r6,3
    41e4:	00c000b4 	movhi	r3,2
    41e8:	18e3a604 	addi	r3,r3,-29032
    41ec:	1885883a 	add	r2,r3,r2
    41f0:	d9c00e17 	ldw	r7,56(sp)
    41f4:	11000017 	ldw	r4,0(r2)
    41f8:	11400117 	ldw	r5,4(r2)
    41fc:	d8800717 	ldw	r2,28(sp)
    4200:	d9801015 	stw	r6,64(sp)
    4204:	880d883a 	mov	r6,r17
    4208:	da801615 	stw	r10,88(sp)
    420c:	15c00044 	addi	r23,r2,1
    4210:	000b3ec0 	call	b3ec <__muldf3>
    4214:	a80b883a 	mov	r5,r21
    4218:	a009883a 	mov	r4,r20
    421c:	d8c01115 	stw	r3,68(sp)
    4220:	d8800e15 	stw	r2,56(sp)
    4224:	000c3e00 	call	c3e0 <__fixdfsi>
    4228:	1009883a 	mov	r4,r2
    422c:	1023883a 	mov	r17,r2
    4230:	000c4680 	call	c468 <__floatsidf>
    4234:	a009883a 	mov	r4,r20
    4238:	a80b883a 	mov	r5,r21
    423c:	100d883a 	mov	r6,r2
    4240:	180f883a 	mov	r7,r3
    4244:	000bb100 	call	bb10 <__subdf3>
    4248:	1813883a 	mov	r9,r3
    424c:	d8c00717 	ldw	r3,28(sp)
    4250:	8c400c04 	addi	r17,r17,48
    4254:	1011883a 	mov	r8,r2
    4258:	1c400005 	stb	r17,0(r3)
    425c:	da801617 	ldw	r10,88(sp)
    4260:	00800044 	movi	r2,1
    4264:	50802326 	beq	r10,r2,42f4 <_dtoa_r+0x14ac>
    4268:	d8800717 	ldw	r2,28(sp)
    426c:	b82b883a 	mov	r21,r23
    4270:	dc001315 	stw	r16,76(sp)
    4274:	12a9883a 	add	r20,r2,r10
    4278:	4807883a 	mov	r3,r9
    427c:	4005883a 	mov	r2,r8
    4280:	dc801415 	stw	r18,80(sp)
    4284:	000d883a 	mov	r6,zero
    4288:	01d00934 	movhi	r7,16420
    428c:	1009883a 	mov	r4,r2
    4290:	180b883a 	mov	r5,r3
    4294:	000b3ec0 	call	b3ec <__muldf3>
    4298:	180b883a 	mov	r5,r3
    429c:	1009883a 	mov	r4,r2
    42a0:	1821883a 	mov	r16,r3
    42a4:	1025883a 	mov	r18,r2
    42a8:	000c3e00 	call	c3e0 <__fixdfsi>
    42ac:	1009883a 	mov	r4,r2
    42b0:	1023883a 	mov	r17,r2
    42b4:	000c4680 	call	c468 <__floatsidf>
    42b8:	9009883a 	mov	r4,r18
    42bc:	800b883a 	mov	r5,r16
    42c0:	100d883a 	mov	r6,r2
    42c4:	180f883a 	mov	r7,r3
    42c8:	8c400c04 	addi	r17,r17,48
    42cc:	000bb100 	call	bb10 <__subdf3>
    42d0:	ad400044 	addi	r21,r21,1
    42d4:	ac7fffc5 	stb	r17,-1(r21)
    42d8:	ad3fea1e 	bne	r21,r20,4284 <__alt_mem_Flash_flash_data+0xf4004284>
    42dc:	1813883a 	mov	r9,r3
    42e0:	d8c01017 	ldw	r3,64(sp)
    42e4:	dc001317 	ldw	r16,76(sp)
    42e8:	dc801417 	ldw	r18,80(sp)
    42ec:	1011883a 	mov	r8,r2
    42f0:	b8ef883a 	add	r23,r23,r3
    42f4:	d9000e17 	ldw	r4,56(sp)
    42f8:	d9401117 	ldw	r5,68(sp)
    42fc:	000d883a 	mov	r6,zero
    4300:	01cff834 	movhi	r7,16352
    4304:	da001715 	stw	r8,92(sp)
    4308:	da401515 	stw	r9,84(sp)
    430c:	000a0400 	call	a040 <__adddf3>
    4310:	da001717 	ldw	r8,92(sp)
    4314:	da401517 	ldw	r9,84(sp)
    4318:	1009883a 	mov	r4,r2
    431c:	400d883a 	mov	r6,r8
    4320:	480f883a 	mov	r7,r9
    4324:	180b883a 	mov	r5,r3
    4328:	000b30c0 	call	b30c <__ledf2>
    432c:	da001717 	ldw	r8,92(sp)
    4330:	da401517 	ldw	r9,84(sp)
    4334:	10003b0e 	bge	r2,zero,4424 <_dtoa_r+0x15dc>
    4338:	d9001217 	ldw	r4,72(sp)
    433c:	bd7fffc3 	ldbu	r21,-1(r23)
    4340:	d9000515 	stw	r4,20(sp)
    4344:	003d1c06 	br	37b8 <__alt_mem_Flash_flash_data+0xf40037b8>
    4348:	d8c00817 	ldw	r3,32(sp)
    434c:	18a9c83a 	sub	r20,r3,r2
    4350:	0005883a 	mov	r2,zero
    4354:	003d3706 	br	3834 <__alt_mem_Flash_flash_data+0xf4003834>
    4358:	00800044 	movi	r2,1
    435c:	003dd006 	br	3aa0 <__alt_mem_Flash_flash_data+0xf4003aa0>
    4360:	d8c00217 	ldw	r3,8(sp)
    4364:	00800d84 	movi	r2,54
    4368:	dd400917 	ldw	r21,36(sp)
    436c:	10c5c83a 	sub	r2,r2,r3
    4370:	dd000817 	ldw	r20,32(sp)
    4374:	003d2f06 	br	3834 <__alt_mem_Flash_flash_data+0xf4003834>
    4378:	9029883a 	mov	r20,r18
    437c:	982b883a 	mov	r21,r19
    4380:	04400084 	movi	r17,2
    4384:	003bc606 	br	32a0 <__alt_mem_Flash_flash_data+0xf40032a0>
    4388:	d8800617 	ldw	r2,24(sp)
    438c:	103efc26 	beq	r2,zero,3f80 <__alt_mem_Flash_flash_data+0xf4003f80>
    4390:	d8c00c17 	ldw	r3,48(sp)
    4394:	00fc890e 	bge	zero,r3,35bc <__alt_mem_Flash_flash_data+0xf40035bc>
    4398:	a80b883a 	mov	r5,r21
    439c:	a009883a 	mov	r4,r20
    43a0:	000d883a 	mov	r6,zero
    43a4:	01d00934 	movhi	r7,16420
    43a8:	000b3ec0 	call	b3ec <__muldf3>
    43ac:	89000044 	addi	r4,r17,1
    43b0:	1029883a 	mov	r20,r2
    43b4:	182b883a 	mov	r21,r3
    43b8:	000c4680 	call	c468 <__floatsidf>
    43bc:	a009883a 	mov	r4,r20
    43c0:	a80b883a 	mov	r5,r21
    43c4:	100d883a 	mov	r6,r2
    43c8:	180f883a 	mov	r7,r3
    43cc:	000b3ec0 	call	b3ec <__muldf3>
    43d0:	1009883a 	mov	r4,r2
    43d4:	180b883a 	mov	r5,r3
    43d8:	000d883a 	mov	r6,zero
    43dc:	01d00734 	movhi	r7,16412
    43e0:	000a0400 	call	a040 <__adddf3>
    43e4:	d9000517 	ldw	r4,20(sp)
    43e8:	1023883a 	mov	r17,r2
    43ec:	00bf3034 	movhi	r2,64704
    43f0:	213fffc4 	addi	r4,r4,-1
    43f4:	1885883a 	add	r2,r3,r2
    43f8:	d9001215 	stw	r4,72(sp)
    43fc:	d8800e15 	stw	r2,56(sp)
    4400:	da800c17 	ldw	r10,48(sp)
    4404:	003bc306 	br	3314 <__alt_mem_Flash_flash_data+0xf4003314>
    4408:	b039883a 	mov	fp,r22
    440c:	01000e44 	movi	r4,57
    4410:	8825883a 	mov	r18,r17
    4414:	9dc00044 	addi	r23,r19,1
    4418:	99000005 	stb	r4,0(r19)
    441c:	a023883a 	mov	r17,r20
    4420:	003dae06 	br	3adc <__alt_mem_Flash_flash_data+0xf4003adc>
    4424:	d9800e17 	ldw	r6,56(sp)
    4428:	d9c01117 	ldw	r7,68(sp)
    442c:	0009883a 	mov	r4,zero
    4430:	014ff834 	movhi	r5,16352
    4434:	da001715 	stw	r8,92(sp)
    4438:	da401515 	stw	r9,84(sp)
    443c:	000bb100 	call	bb10 <__subdf3>
    4440:	da001717 	ldw	r8,92(sp)
    4444:	da401517 	ldw	r9,84(sp)
    4448:	1009883a 	mov	r4,r2
    444c:	180b883a 	mov	r5,r3
    4450:	400d883a 	mov	r6,r8
    4454:	480f883a 	mov	r7,r9
    4458:	000b22c0 	call	b22c <__gedf2>
    445c:	00bc570e 	bge	zero,r2,35bc <__alt_mem_Flash_flash_data+0xf40035bc>
    4460:	01000c04 	movi	r4,48
    4464:	00000106 	br	446c <_dtoa_r+0x1624>
    4468:	102f883a 	mov	r23,r2
    446c:	b8bfffc4 	addi	r2,r23,-1
    4470:	10c00007 	ldb	r3,0(r2)
    4474:	193ffc26 	beq	r3,r4,4468 <__alt_mem_Flash_flash_data+0xf4004468>
    4478:	d9801217 	ldw	r6,72(sp)
    447c:	d9800515 	stw	r6,20(sp)
    4480:	003c1f06 	br	3500 <__alt_mem_Flash_flash_data+0xf4003500>
    4484:	d8801217 	ldw	r2,72(sp)
    4488:	dc001117 	ldw	r16,68(sp)
    448c:	d8800515 	stw	r2,20(sp)
    4490:	003cc906 	br	37b8 <__alt_mem_Flash_flash_data+0xf40037b8>
    4494:	dd801317 	ldw	r22,76(sp)
    4498:	dc001117 	ldw	r16,68(sp)
    449c:	dcc01417 	ldw	r19,80(sp)
    44a0:	dc801017 	ldw	r18,64(sp)
    44a4:	003c4506 	br	35bc <__alt_mem_Flash_flash_data+0xf40035bc>
    44a8:	103e5d1e 	bne	r2,zero,3e20 <__alt_mem_Flash_flash_data+0xf4003e20>
    44ac:	4080004c 	andi	r2,r8,1
    44b0:	103e5b26 	beq	r2,zero,3e20 <__alt_mem_Flash_flash_data+0xf4003e20>
    44b4:	003e5706 	br	3e14 <__alt_mem_Flash_flash_data+0xf4003e14>
    44b8:	d8c00317 	ldw	r3,12(sp)
    44bc:	00800084 	movi	r2,2
    44c0:	10c00a16 	blt	r2,r3,44ec <_dtoa_r+0x16a4>
    44c4:	d9000c17 	ldw	r4,48(sp)
    44c8:	003e8306 	br	3ed8 <__alt_mem_Flash_flash_data+0xf4003ed8>
    44cc:	04400084 	movi	r17,2
    44d0:	003b7306 	br	32a0 <__alt_mem_Flash_flash_data+0xf40032a0>
    44d4:	d9801217 	ldw	r6,72(sp)
    44d8:	d9800515 	stw	r6,20(sp)
    44dc:	003cb606 	br	37b8 <__alt_mem_Flash_flash_data+0xf40037b8>
    44e0:	d9001217 	ldw	r4,72(sp)
    44e4:	d9000515 	stw	r4,20(sp)
    44e8:	003c0506 	br	3500 <__alt_mem_Flash_flash_data+0xf4003500>
    44ec:	d9800c17 	ldw	r6,48(sp)
    44f0:	d9800615 	stw	r6,24(sp)
    44f4:	003e8306 	br	3f04 <__alt_mem_Flash_flash_data+0xf4003f04>
    44f8:	d9800317 	ldw	r6,12(sp)
    44fc:	00800084 	movi	r2,2
    4500:	11800216 	blt	r2,r6,450c <_dtoa_r+0x16c4>
    4504:	d8800c17 	ldw	r2,48(sp)
    4508:	003da606 	br	3ba4 <__alt_mem_Flash_flash_data+0xf4003ba4>
    450c:	d8800c17 	ldw	r2,48(sp)
    4510:	d8800615 	stw	r2,24(sp)
    4514:	003e7b06 	br	3f04 <__alt_mem_Flash_flash_data+0xf4003f04>
    4518:	05000044 	movi	r20,1
    451c:	003b0506 	br	3134 <__alt_mem_Flash_flash_data+0xf4003134>
    4520:	8009883a 	mov	r4,r16
    4524:	80001115 	stw	zero,68(r16)
    4528:	000b883a 	mov	r5,zero
    452c:	00056340 	call	5634 <_Balloc>
    4530:	d8800715 	stw	r2,28(sp)
    4534:	d8c00717 	ldw	r3,28(sp)
    4538:	00bfffc4 	movi	r2,-1
    453c:	01000044 	movi	r4,1
    4540:	d8800c15 	stw	r2,48(sp)
    4544:	80c01015 	stw	r3,64(r16)
    4548:	d9000b15 	stw	r4,44(sp)
    454c:	d8800615 	stw	r2,24(sp)
    4550:	d8002215 	stw	zero,136(sp)
    4554:	003c1906 	br	35bc <__alt_mem_Flash_flash_data+0xf40035bc>
    4558:	193d2926 	beq	r3,r4,3a00 <__alt_mem_Flash_flash_data+0xf4003a00>
    455c:	00c00f04 	movi	r3,60
    4560:	1885c83a 	sub	r2,r3,r2
    4564:	003d7b06 	br	3b54 <__alt_mem_Flash_flash_data+0xf4003b54>
    4568:	000b883a 	mov	r5,zero
    456c:	003b1006 	br	31b0 <__alt_mem_Flash_flash_data+0xf40031b0>

00004570 <__sfvwrite_r>:
    4570:	30800217 	ldw	r2,8(r6)
    4574:	10006726 	beq	r2,zero,4714 <__sfvwrite_r+0x1a4>
    4578:	defff404 	addi	sp,sp,-48
    457c:	dd000615 	stw	r20,24(sp)
    4580:	2029883a 	mov	r20,r4
    4584:	2900030b 	ldhu	r4,12(r5)
    4588:	ddc00915 	stw	r23,36(sp)
    458c:	dc000215 	stw	r16,8(sp)
    4590:	dfc00b15 	stw	ra,44(sp)
    4594:	df000a15 	stw	fp,40(sp)
    4598:	dd800815 	stw	r22,32(sp)
    459c:	dd400715 	stw	r21,28(sp)
    45a0:	dcc00515 	stw	r19,20(sp)
    45a4:	dc800415 	stw	r18,16(sp)
    45a8:	dc400315 	stw	r17,12(sp)
    45ac:	2080020c 	andi	r2,r4,8
    45b0:	2821883a 	mov	r16,r5
    45b4:	302f883a 	mov	r23,r6
    45b8:	10002726 	beq	r2,zero,4658 <__sfvwrite_r+0xe8>
    45bc:	28800417 	ldw	r2,16(r5)
    45c0:	10002526 	beq	r2,zero,4658 <__sfvwrite_r+0xe8>
    45c4:	2080008c 	andi	r2,r4,2
    45c8:	bc400017 	ldw	r17,0(r23)
    45cc:	10002a26 	beq	r2,zero,4678 <__sfvwrite_r+0x108>
    45d0:	05600034 	movhi	r21,32768
    45d4:	0027883a 	mov	r19,zero
    45d8:	0025883a 	mov	r18,zero
    45dc:	ad7f0004 	addi	r21,r21,-1024
    45e0:	980d883a 	mov	r6,r19
    45e4:	a009883a 	mov	r4,r20
    45e8:	90004626 	beq	r18,zero,4704 <__sfvwrite_r+0x194>
    45ec:	900f883a 	mov	r7,r18
    45f0:	81400717 	ldw	r5,28(r16)
    45f4:	ac80022e 	bgeu	r21,r18,4600 <__sfvwrite_r+0x90>
    45f8:	01e00034 	movhi	r7,32768
    45fc:	39ff0004 	addi	r7,r7,-1024
    4600:	80800917 	ldw	r2,36(r16)
    4604:	103ee83a 	callr	r2
    4608:	0080520e 	bge	zero,r2,4754 <__sfvwrite_r+0x1e4>
    460c:	b8c00217 	ldw	r3,8(r23)
    4610:	98a7883a 	add	r19,r19,r2
    4614:	90a5c83a 	sub	r18,r18,r2
    4618:	1885c83a 	sub	r2,r3,r2
    461c:	b8800215 	stw	r2,8(r23)
    4620:	103fef1e 	bne	r2,zero,45e0 <__alt_mem_Flash_flash_data+0xf40045e0>
    4624:	0005883a 	mov	r2,zero
    4628:	dfc00b17 	ldw	ra,44(sp)
    462c:	df000a17 	ldw	fp,40(sp)
    4630:	ddc00917 	ldw	r23,36(sp)
    4634:	dd800817 	ldw	r22,32(sp)
    4638:	dd400717 	ldw	r21,28(sp)
    463c:	dd000617 	ldw	r20,24(sp)
    4640:	dcc00517 	ldw	r19,20(sp)
    4644:	dc800417 	ldw	r18,16(sp)
    4648:	dc400317 	ldw	r17,12(sp)
    464c:	dc000217 	ldw	r16,8(sp)
    4650:	dec00c04 	addi	sp,sp,48
    4654:	f800283a 	ret
    4658:	a009883a 	mov	r4,r20
    465c:	800b883a 	mov	r5,r16
    4660:	0007eac0 	call	7eac <__swsetup_r>
    4664:	1000ec1e 	bne	r2,zero,4a18 <__sfvwrite_r+0x4a8>
    4668:	8100030b 	ldhu	r4,12(r16)
    466c:	bc400017 	ldw	r17,0(r23)
    4670:	2080008c 	andi	r2,r4,2
    4674:	103fd61e 	bne	r2,zero,45d0 <__alt_mem_Flash_flash_data+0xf40045d0>
    4678:	2080004c 	andi	r2,r4,1
    467c:	10003a1e 	bne	r2,zero,4768 <__sfvwrite_r+0x1f8>
    4680:	0039883a 	mov	fp,zero
    4684:	0025883a 	mov	r18,zero
    4688:	90001a26 	beq	r18,zero,46f4 <__sfvwrite_r+0x184>
    468c:	2080800c 	andi	r2,r4,512
    4690:	85800217 	ldw	r22,8(r16)
    4694:	10007626 	beq	r2,zero,4870 <__sfvwrite_r+0x300>
    4698:	b027883a 	mov	r19,r22
    469c:	95809436 	bltu	r18,r22,48f0 <__sfvwrite_r+0x380>
    46a0:	2081200c 	andi	r2,r4,1152
    46a4:	10009f1e 	bne	r2,zero,4924 <__sfvwrite_r+0x3b4>
    46a8:	81000017 	ldw	r4,0(r16)
    46ac:	e00b883a 	mov	r5,fp
    46b0:	980d883a 	mov	r6,r19
    46b4:	00054d80 	call	54d8 <memmove>
    46b8:	81000217 	ldw	r4,8(r16)
    46bc:	81400017 	ldw	r5,0(r16)
    46c0:	9005883a 	mov	r2,r18
    46c4:	2587c83a 	sub	r3,r4,r22
    46c8:	2ce7883a 	add	r19,r5,r19
    46cc:	80c00215 	stw	r3,8(r16)
    46d0:	84c00015 	stw	r19,0(r16)
    46d4:	b8c00217 	ldw	r3,8(r23)
    46d8:	e0b9883a 	add	fp,fp,r2
    46dc:	90a5c83a 	sub	r18,r18,r2
    46e0:	1885c83a 	sub	r2,r3,r2
    46e4:	b8800215 	stw	r2,8(r23)
    46e8:	103fce26 	beq	r2,zero,4624 <__alt_mem_Flash_flash_data+0xf4004624>
    46ec:	8100030b 	ldhu	r4,12(r16)
    46f0:	903fe61e 	bne	r18,zero,468c <__alt_mem_Flash_flash_data+0xf400468c>
    46f4:	8f000017 	ldw	fp,0(r17)
    46f8:	8c800117 	ldw	r18,4(r17)
    46fc:	8c400204 	addi	r17,r17,8
    4700:	003fe106 	br	4688 <__alt_mem_Flash_flash_data+0xf4004688>
    4704:	8cc00017 	ldw	r19,0(r17)
    4708:	8c800117 	ldw	r18,4(r17)
    470c:	8c400204 	addi	r17,r17,8
    4710:	003fb306 	br	45e0 <__alt_mem_Flash_flash_data+0xf40045e0>
    4714:	0005883a 	mov	r2,zero
    4718:	f800283a 	ret
    471c:	00a00034 	movhi	r2,32768
    4720:	10bfffc4 	addi	r2,r2,-1
    4724:	9009883a 	mov	r4,r18
    4728:	1480012e 	bgeu	r2,r18,4730 <__sfvwrite_r+0x1c0>
    472c:	1009883a 	mov	r4,r2
    4730:	980b883a 	mov	r5,r19
    4734:	0009f800 	call	9f80 <__divsi3>
    4738:	81400717 	ldw	r5,28(r16)
    473c:	80c00917 	ldw	r3,36(r16)
    4740:	988f383a 	mul	r7,r19,r2
    4744:	a009883a 	mov	r4,r20
    4748:	e00d883a 	mov	r6,fp
    474c:	183ee83a 	callr	r3
    4750:	00bfe016 	blt	zero,r2,46d4 <__alt_mem_Flash_flash_data+0xf40046d4>
    4754:	8080030b 	ldhu	r2,12(r16)
    4758:	10801014 	ori	r2,r2,64
    475c:	8080030d 	sth	r2,12(r16)
    4760:	00bfffc4 	movi	r2,-1
    4764:	003fb006 	br	4628 <__alt_mem_Flash_flash_data+0xf4004628>
    4768:	0027883a 	mov	r19,zero
    476c:	0011883a 	mov	r8,zero
    4770:	0039883a 	mov	fp,zero
    4774:	0025883a 	mov	r18,zero
    4778:	90001f26 	beq	r18,zero,47f8 <__sfvwrite_r+0x288>
    477c:	40006026 	beq	r8,zero,4900 <__sfvwrite_r+0x390>
    4780:	982b883a 	mov	r21,r19
    4784:	94c0012e 	bgeu	r18,r19,478c <__sfvwrite_r+0x21c>
    4788:	902b883a 	mov	r21,r18
    478c:	81000017 	ldw	r4,0(r16)
    4790:	80800417 	ldw	r2,16(r16)
    4794:	a82d883a 	mov	r22,r21
    4798:	81800217 	ldw	r6,8(r16)
    479c:	81c00517 	ldw	r7,20(r16)
    47a0:	1100022e 	bgeu	r2,r4,47ac <__sfvwrite_r+0x23c>
    47a4:	31c7883a 	add	r3,r6,r7
    47a8:	1d401816 	blt	r3,r21,480c <__sfvwrite_r+0x29c>
    47ac:	a9c04416 	blt	r21,r7,48c0 <__sfvwrite_r+0x350>
    47b0:	80800917 	ldw	r2,36(r16)
    47b4:	81400717 	ldw	r5,28(r16)
    47b8:	a009883a 	mov	r4,r20
    47bc:	da000115 	stw	r8,4(sp)
    47c0:	e00d883a 	mov	r6,fp
    47c4:	103ee83a 	callr	r2
    47c8:	102d883a 	mov	r22,r2
    47cc:	da000117 	ldw	r8,4(sp)
    47d0:	00bfe00e 	bge	zero,r2,4754 <__alt_mem_Flash_flash_data+0xf4004754>
    47d4:	9da7c83a 	sub	r19,r19,r22
    47d8:	98001f26 	beq	r19,zero,4858 <__sfvwrite_r+0x2e8>
    47dc:	b8800217 	ldw	r2,8(r23)
    47e0:	e5b9883a 	add	fp,fp,r22
    47e4:	95a5c83a 	sub	r18,r18,r22
    47e8:	15adc83a 	sub	r22,r2,r22
    47ec:	bd800215 	stw	r22,8(r23)
    47f0:	b03f8c26 	beq	r22,zero,4624 <__alt_mem_Flash_flash_data+0xf4004624>
    47f4:	903fe11e 	bne	r18,zero,477c <__alt_mem_Flash_flash_data+0xf400477c>
    47f8:	8f000017 	ldw	fp,0(r17)
    47fc:	8c800117 	ldw	r18,4(r17)
    4800:	0011883a 	mov	r8,zero
    4804:	8c400204 	addi	r17,r17,8
    4808:	003fdb06 	br	4778 <__alt_mem_Flash_flash_data+0xf4004778>
    480c:	180d883a 	mov	r6,r3
    4810:	e00b883a 	mov	r5,fp
    4814:	da000115 	stw	r8,4(sp)
    4818:	d8c00015 	stw	r3,0(sp)
    481c:	00054d80 	call	54d8 <memmove>
    4820:	d8c00017 	ldw	r3,0(sp)
    4824:	80800017 	ldw	r2,0(r16)
    4828:	a009883a 	mov	r4,r20
    482c:	800b883a 	mov	r5,r16
    4830:	10c5883a 	add	r2,r2,r3
    4834:	80800015 	stw	r2,0(r16)
    4838:	d8c00015 	stw	r3,0(sp)
    483c:	00082cc0 	call	82cc <_fflush_r>
    4840:	d8c00017 	ldw	r3,0(sp)
    4844:	da000117 	ldw	r8,4(sp)
    4848:	103fc21e 	bne	r2,zero,4754 <__alt_mem_Flash_flash_data+0xf4004754>
    484c:	182d883a 	mov	r22,r3
    4850:	9da7c83a 	sub	r19,r19,r22
    4854:	983fe11e 	bne	r19,zero,47dc <__alt_mem_Flash_flash_data+0xf40047dc>
    4858:	a009883a 	mov	r4,r20
    485c:	800b883a 	mov	r5,r16
    4860:	00082cc0 	call	82cc <_fflush_r>
    4864:	103fbb1e 	bne	r2,zero,4754 <__alt_mem_Flash_flash_data+0xf4004754>
    4868:	0011883a 	mov	r8,zero
    486c:	003fdb06 	br	47dc <__alt_mem_Flash_flash_data+0xf40047dc>
    4870:	81000017 	ldw	r4,0(r16)
    4874:	80800417 	ldw	r2,16(r16)
    4878:	11000236 	bltu	r2,r4,4884 <__sfvwrite_r+0x314>
    487c:	84c00517 	ldw	r19,20(r16)
    4880:	94ffa62e 	bgeu	r18,r19,471c <__alt_mem_Flash_flash_data+0xf400471c>
    4884:	9027883a 	mov	r19,r18
    4888:	b480012e 	bgeu	r22,r18,4890 <__sfvwrite_r+0x320>
    488c:	b027883a 	mov	r19,r22
    4890:	e00b883a 	mov	r5,fp
    4894:	980d883a 	mov	r6,r19
    4898:	00054d80 	call	54d8 <memmove>
    489c:	80800217 	ldw	r2,8(r16)
    48a0:	80c00017 	ldw	r3,0(r16)
    48a4:	14c5c83a 	sub	r2,r2,r19
    48a8:	1cc7883a 	add	r3,r3,r19
    48ac:	80800215 	stw	r2,8(r16)
    48b0:	80c00015 	stw	r3,0(r16)
    48b4:	10004326 	beq	r2,zero,49c4 <__sfvwrite_r+0x454>
    48b8:	9805883a 	mov	r2,r19
    48bc:	003f8506 	br	46d4 <__alt_mem_Flash_flash_data+0xf40046d4>
    48c0:	a80d883a 	mov	r6,r21
    48c4:	e00b883a 	mov	r5,fp
    48c8:	da000115 	stw	r8,4(sp)
    48cc:	00054d80 	call	54d8 <memmove>
    48d0:	80800217 	ldw	r2,8(r16)
    48d4:	80c00017 	ldw	r3,0(r16)
    48d8:	da000117 	ldw	r8,4(sp)
    48dc:	1545c83a 	sub	r2,r2,r21
    48e0:	1d6b883a 	add	r21,r3,r21
    48e4:	80800215 	stw	r2,8(r16)
    48e8:	85400015 	stw	r21,0(r16)
    48ec:	003fb906 	br	47d4 <__alt_mem_Flash_flash_data+0xf40047d4>
    48f0:	81000017 	ldw	r4,0(r16)
    48f4:	902d883a 	mov	r22,r18
    48f8:	9027883a 	mov	r19,r18
    48fc:	003f6b06 	br	46ac <__alt_mem_Flash_flash_data+0xf40046ac>
    4900:	e009883a 	mov	r4,fp
    4904:	01400284 	movi	r5,10
    4908:	900d883a 	mov	r6,r18
    490c:	00052b80 	call	52b8 <memchr>
    4910:	10003e26 	beq	r2,zero,4a0c <__sfvwrite_r+0x49c>
    4914:	10800044 	addi	r2,r2,1
    4918:	1727c83a 	sub	r19,r2,fp
    491c:	02000044 	movi	r8,1
    4920:	003f9706 	br	4780 <__alt_mem_Flash_flash_data+0xf4004780>
    4924:	80800517 	ldw	r2,20(r16)
    4928:	81400417 	ldw	r5,16(r16)
    492c:	80c00017 	ldw	r3,0(r16)
    4930:	10a7883a 	add	r19,r2,r2
    4934:	9885883a 	add	r2,r19,r2
    4938:	1026d7fa 	srli	r19,r2,31
    493c:	196bc83a 	sub	r21,r3,r5
    4940:	a9800044 	addi	r6,r21,1
    4944:	9885883a 	add	r2,r19,r2
    4948:	1027d07a 	srai	r19,r2,1
    494c:	3485883a 	add	r2,r6,r18
    4950:	980d883a 	mov	r6,r19
    4954:	9880022e 	bgeu	r19,r2,4960 <__sfvwrite_r+0x3f0>
    4958:	1027883a 	mov	r19,r2
    495c:	100d883a 	mov	r6,r2
    4960:	2101000c 	andi	r4,r4,1024
    4964:	20001c26 	beq	r4,zero,49d8 <__sfvwrite_r+0x468>
    4968:	a009883a 	mov	r4,r20
    496c:	300b883a 	mov	r5,r6
    4970:	0004b100 	call	4b10 <_malloc_r>
    4974:	102d883a 	mov	r22,r2
    4978:	10002926 	beq	r2,zero,4a20 <__sfvwrite_r+0x4b0>
    497c:	81400417 	ldw	r5,16(r16)
    4980:	1009883a 	mov	r4,r2
    4984:	a80d883a 	mov	r6,r21
    4988:	00053a00 	call	53a0 <memcpy>
    498c:	8080030b 	ldhu	r2,12(r16)
    4990:	00fedfc4 	movi	r3,-1153
    4994:	10c4703a 	and	r2,r2,r3
    4998:	10802014 	ori	r2,r2,128
    499c:	8080030d 	sth	r2,12(r16)
    49a0:	b549883a 	add	r4,r22,r21
    49a4:	9d4bc83a 	sub	r5,r19,r21
    49a8:	85800415 	stw	r22,16(r16)
    49ac:	84c00515 	stw	r19,20(r16)
    49b0:	81000015 	stw	r4,0(r16)
    49b4:	902d883a 	mov	r22,r18
    49b8:	81400215 	stw	r5,8(r16)
    49bc:	9027883a 	mov	r19,r18
    49c0:	003f3a06 	br	46ac <__alt_mem_Flash_flash_data+0xf40046ac>
    49c4:	a009883a 	mov	r4,r20
    49c8:	800b883a 	mov	r5,r16
    49cc:	00082cc0 	call	82cc <_fflush_r>
    49d0:	103fb926 	beq	r2,zero,48b8 <__alt_mem_Flash_flash_data+0xf40048b8>
    49d4:	003f5f06 	br	4754 <__alt_mem_Flash_flash_data+0xf4004754>
    49d8:	a009883a 	mov	r4,r20
    49dc:	00065d40 	call	65d4 <_realloc_r>
    49e0:	102d883a 	mov	r22,r2
    49e4:	103fee1e 	bne	r2,zero,49a0 <__alt_mem_Flash_flash_data+0xf40049a0>
    49e8:	81400417 	ldw	r5,16(r16)
    49ec:	a009883a 	mov	r4,r20
    49f0:	000881c0 	call	881c <_free_r>
    49f4:	8080030b 	ldhu	r2,12(r16)
    49f8:	00ffdfc4 	movi	r3,-129
    49fc:	1884703a 	and	r2,r3,r2
    4a00:	00c00304 	movi	r3,12
    4a04:	a0c00015 	stw	r3,0(r20)
    4a08:	003f5306 	br	4758 <__alt_mem_Flash_flash_data+0xf4004758>
    4a0c:	94c00044 	addi	r19,r18,1
    4a10:	02000044 	movi	r8,1
    4a14:	003f5a06 	br	4780 <__alt_mem_Flash_flash_data+0xf4004780>
    4a18:	00bfffc4 	movi	r2,-1
    4a1c:	003f0206 	br	4628 <__alt_mem_Flash_flash_data+0xf4004628>
    4a20:	00800304 	movi	r2,12
    4a24:	a0800015 	stw	r2,0(r20)
    4a28:	8080030b 	ldhu	r2,12(r16)
    4a2c:	003f4a06 	br	4758 <__alt_mem_Flash_flash_data+0xf4004758>

00004a30 <_setlocale_r>:
    4a30:	30001b26 	beq	r6,zero,4aa0 <_setlocale_r+0x70>
    4a34:	014000b4 	movhi	r5,2
    4a38:	defffe04 	addi	sp,sp,-8
    4a3c:	29638c04 	addi	r5,r5,-29136
    4a40:	3009883a 	mov	r4,r6
    4a44:	dc000015 	stw	r16,0(sp)
    4a48:	dfc00115 	stw	ra,4(sp)
    4a4c:	3021883a 	mov	r16,r6
    4a50:	0006c040 	call	6c04 <strcmp>
    4a54:	1000061e 	bne	r2,zero,4a70 <_setlocale_r+0x40>
    4a58:	008000b4 	movhi	r2,2
    4a5c:	10a38b04 	addi	r2,r2,-29140
    4a60:	dfc00117 	ldw	ra,4(sp)
    4a64:	dc000017 	ldw	r16,0(sp)
    4a68:	dec00204 	addi	sp,sp,8
    4a6c:	f800283a 	ret
    4a70:	014000b4 	movhi	r5,2
    4a74:	29638b04 	addi	r5,r5,-29140
    4a78:	8009883a 	mov	r4,r16
    4a7c:	0006c040 	call	6c04 <strcmp>
    4a80:	103ff526 	beq	r2,zero,4a58 <__alt_mem_Flash_flash_data+0xf4004a58>
    4a84:	014000b4 	movhi	r5,2
    4a88:	29637604 	addi	r5,r5,-29224
    4a8c:	8009883a 	mov	r4,r16
    4a90:	0006c040 	call	6c04 <strcmp>
    4a94:	103ff026 	beq	r2,zero,4a58 <__alt_mem_Flash_flash_data+0xf4004a58>
    4a98:	0005883a 	mov	r2,zero
    4a9c:	003ff006 	br	4a60 <__alt_mem_Flash_flash_data+0xf4004a60>
    4aa0:	008000b4 	movhi	r2,2
    4aa4:	10a38b04 	addi	r2,r2,-29140
    4aa8:	f800283a 	ret

00004aac <__locale_charset>:
    4aac:	008000b4 	movhi	r2,2
    4ab0:	10a5f604 	addi	r2,r2,-26664
    4ab4:	f800283a 	ret

00004ab8 <__locale_mb_cur_max>:
    4ab8:	008000b4 	movhi	r2,2
    4abc:	10ac7604 	addi	r2,r2,-20008
    4ac0:	10800017 	ldw	r2,0(r2)
    4ac4:	f800283a 	ret

00004ac8 <__locale_msgcharset>:
    4ac8:	008000b4 	movhi	r2,2
    4acc:	10a5ee04 	addi	r2,r2,-26696
    4ad0:	f800283a 	ret

00004ad4 <__locale_cjk_lang>:
    4ad4:	0005883a 	mov	r2,zero
    4ad8:	f800283a 	ret

00004adc <_localeconv_r>:
    4adc:	008000b4 	movhi	r2,2
    4ae0:	10a5fe04 	addi	r2,r2,-26632
    4ae4:	f800283a 	ret

00004ae8 <setlocale>:
    4ae8:	00c000b4 	movhi	r3,2
    4aec:	18ec7504 	addi	r3,r3,-20012
    4af0:	2005883a 	mov	r2,r4
    4af4:	19000017 	ldw	r4,0(r3)
    4af8:	280d883a 	mov	r6,r5
    4afc:	100b883a 	mov	r5,r2
    4b00:	0004a301 	jmpi	4a30 <_setlocale_r>

00004b04 <localeconv>:
    4b04:	008000b4 	movhi	r2,2
    4b08:	10a5fe04 	addi	r2,r2,-26632
    4b0c:	f800283a 	ret

00004b10 <_malloc_r>:
    4b10:	defff504 	addi	sp,sp,-44
    4b14:	dc800315 	stw	r18,12(sp)
    4b18:	dfc00a15 	stw	ra,40(sp)
    4b1c:	df000915 	stw	fp,36(sp)
    4b20:	ddc00815 	stw	r23,32(sp)
    4b24:	dd800715 	stw	r22,28(sp)
    4b28:	dd400615 	stw	r21,24(sp)
    4b2c:	dd000515 	stw	r20,20(sp)
    4b30:	dcc00415 	stw	r19,16(sp)
    4b34:	dc400215 	stw	r17,8(sp)
    4b38:	dc000115 	stw	r16,4(sp)
    4b3c:	288002c4 	addi	r2,r5,11
    4b40:	00c00584 	movi	r3,22
    4b44:	2025883a 	mov	r18,r4
    4b48:	18802a2e 	bgeu	r3,r2,4bf4 <_malloc_r+0xe4>
    4b4c:	047ffe04 	movi	r17,-8
    4b50:	1462703a 	and	r17,r2,r17
    4b54:	88009e16 	blt	r17,zero,4dd0 <_malloc_r+0x2c0>
    4b58:	89409d36 	bltu	r17,r5,4dd0 <_malloc_r+0x2c0>
    4b5c:	000d11c0 	call	d11c <__malloc_lock>
    4b60:	00807dc4 	movi	r2,503
    4b64:	14402736 	bltu	r2,r17,4c04 <_malloc_r+0xf4>
    4b68:	8806d0fa 	srli	r3,r17,3
    4b6c:	04c000b4 	movhi	r19,2
    4b70:	9ce60c04 	addi	r19,r19,-26576
    4b74:	18c5883a 	add	r2,r3,r3
    4b78:	1085883a 	add	r2,r2,r2
    4b7c:	1085883a 	add	r2,r2,r2
    4b80:	9885883a 	add	r2,r19,r2
    4b84:	14000317 	ldw	r16,12(r2)
    4b88:	80814a26 	beq	r16,r2,50b4 <_malloc_r+0x5a4>
    4b8c:	80c00117 	ldw	r3,4(r16)
    4b90:	81000317 	ldw	r4,12(r16)
    4b94:	00bfff04 	movi	r2,-4
    4b98:	1884703a 	and	r2,r3,r2
    4b9c:	81400217 	ldw	r5,8(r16)
    4ba0:	8085883a 	add	r2,r16,r2
    4ba4:	10c00117 	ldw	r3,4(r2)
    4ba8:	29000315 	stw	r4,12(r5)
    4bac:	21400215 	stw	r5,8(r4)
    4bb0:	18c00054 	ori	r3,r3,1
    4bb4:	10c00115 	stw	r3,4(r2)
    4bb8:	9009883a 	mov	r4,r18
    4bbc:	000d23c0 	call	d23c <__malloc_unlock>
    4bc0:	80800204 	addi	r2,r16,8
    4bc4:	dfc00a17 	ldw	ra,40(sp)
    4bc8:	df000917 	ldw	fp,36(sp)
    4bcc:	ddc00817 	ldw	r23,32(sp)
    4bd0:	dd800717 	ldw	r22,28(sp)
    4bd4:	dd400617 	ldw	r21,24(sp)
    4bd8:	dd000517 	ldw	r20,20(sp)
    4bdc:	dcc00417 	ldw	r19,16(sp)
    4be0:	dc800317 	ldw	r18,12(sp)
    4be4:	dc400217 	ldw	r17,8(sp)
    4be8:	dc000117 	ldw	r16,4(sp)
    4bec:	dec00b04 	addi	sp,sp,44
    4bf0:	f800283a 	ret
    4bf4:	04400404 	movi	r17,16
    4bf8:	89407536 	bltu	r17,r5,4dd0 <_malloc_r+0x2c0>
    4bfc:	000d11c0 	call	d11c <__malloc_lock>
    4c00:	003fd906 	br	4b68 <__alt_mem_Flash_flash_data+0xf4004b68>
    4c04:	8806d27a 	srli	r3,r17,9
    4c08:	18007526 	beq	r3,zero,4de0 <_malloc_r+0x2d0>
    4c0c:	00800104 	movi	r2,4
    4c10:	10c0ef36 	bltu	r2,r3,4fd0 <_malloc_r+0x4c0>
    4c14:	8806d1ba 	srli	r3,r17,6
    4c18:	19c00e04 	addi	r7,r3,56
    4c1c:	39cb883a 	add	r5,r7,r7
    4c20:	04c000b4 	movhi	r19,2
    4c24:	294b883a 	add	r5,r5,r5
    4c28:	9ce60c04 	addi	r19,r19,-26576
    4c2c:	294b883a 	add	r5,r5,r5
    4c30:	994b883a 	add	r5,r19,r5
    4c34:	2c000317 	ldw	r16,12(r5)
    4c38:	2c000e26 	beq	r5,r16,4c74 <_malloc_r+0x164>
    4c3c:	80800117 	ldw	r2,4(r16)
    4c40:	01bfff04 	movi	r6,-4
    4c44:	010003c4 	movi	r4,15
    4c48:	1184703a 	and	r2,r2,r6
    4c4c:	1447c83a 	sub	r3,r2,r17
    4c50:	20c00716 	blt	r4,r3,4c70 <_malloc_r+0x160>
    4c54:	1800650e 	bge	r3,zero,4dec <_malloc_r+0x2dc>
    4c58:	84000317 	ldw	r16,12(r16)
    4c5c:	2c000526 	beq	r5,r16,4c74 <_malloc_r+0x164>
    4c60:	80800117 	ldw	r2,4(r16)
    4c64:	1184703a 	and	r2,r2,r6
    4c68:	1447c83a 	sub	r3,r2,r17
    4c6c:	20fff90e 	bge	r4,r3,4c54 <__alt_mem_Flash_flash_data+0xf4004c54>
    4c70:	39ffffc4 	addi	r7,r7,-1
    4c74:	38c00044 	addi	r3,r7,1
    4c78:	018000b4 	movhi	r6,2
    4c7c:	9c000417 	ldw	r16,16(r19)
    4c80:	31a60c04 	addi	r6,r6,-26576
    4c84:	32400204 	addi	r9,r6,8
    4c88:	82410326 	beq	r16,r9,5098 <_malloc_r+0x588>
    4c8c:	81000117 	ldw	r4,4(r16)
    4c90:	00bfff04 	movi	r2,-4
    4c94:	208e703a 	and	r7,r4,r2
    4c98:	3c45c83a 	sub	r2,r7,r17
    4c9c:	010003c4 	movi	r4,15
    4ca0:	2080ee16 	blt	r4,r2,505c <_malloc_r+0x54c>
    4ca4:	32400515 	stw	r9,20(r6)
    4ca8:	32400415 	stw	r9,16(r6)
    4cac:	1000510e 	bge	r2,zero,4df4 <_malloc_r+0x2e4>
    4cb0:	00807fc4 	movi	r2,511
    4cb4:	11c0ce36 	bltu	r2,r7,4ff0 <_malloc_r+0x4e0>
    4cb8:	3808d0fa 	srli	r4,r7,3
    4cbc:	01c00044 	movi	r7,1
    4cc0:	30800117 	ldw	r2,4(r6)
    4cc4:	210b883a 	add	r5,r4,r4
    4cc8:	294b883a 	add	r5,r5,r5
    4ccc:	2009d0ba 	srai	r4,r4,2
    4cd0:	294b883a 	add	r5,r5,r5
    4cd4:	298b883a 	add	r5,r5,r6
    4cd8:	2a000217 	ldw	r8,8(r5)
    4cdc:	3908983a 	sll	r4,r7,r4
    4ce0:	81400315 	stw	r5,12(r16)
    4ce4:	82000215 	stw	r8,8(r16)
    4ce8:	2088b03a 	or	r4,r4,r2
    4cec:	2c000215 	stw	r16,8(r5)
    4cf0:	31000115 	stw	r4,4(r6)
    4cf4:	44000315 	stw	r16,12(r8)
    4cf8:	1805d0ba 	srai	r2,r3,2
    4cfc:	01400044 	movi	r5,1
    4d00:	288a983a 	sll	r5,r5,r2
    4d04:	21404336 	bltu	r4,r5,4e14 <_malloc_r+0x304>
    4d08:	2144703a 	and	r2,r4,r5
    4d0c:	10000a1e 	bne	r2,zero,4d38 <_malloc_r+0x228>
    4d10:	00bfff04 	movi	r2,-4
    4d14:	294b883a 	add	r5,r5,r5
    4d18:	1886703a 	and	r3,r3,r2
    4d1c:	2144703a 	and	r2,r4,r5
    4d20:	18c00104 	addi	r3,r3,4
    4d24:	1000041e 	bne	r2,zero,4d38 <_malloc_r+0x228>
    4d28:	294b883a 	add	r5,r5,r5
    4d2c:	2144703a 	and	r2,r4,r5
    4d30:	18c00104 	addi	r3,r3,4
    4d34:	103ffc26 	beq	r2,zero,4d28 <__alt_mem_Flash_flash_data+0xf4004d28>
    4d38:	023fff04 	movi	r8,-4
    4d3c:	01c003c4 	movi	r7,15
    4d40:	18c5883a 	add	r2,r3,r3
    4d44:	1085883a 	add	r2,r2,r2
    4d48:	1085883a 	add	r2,r2,r2
    4d4c:	9895883a 	add	r10,r19,r2
    4d50:	52c00304 	addi	r11,r10,12
    4d54:	1819883a 	mov	r12,r3
    4d58:	5c000017 	ldw	r16,0(r11)
    4d5c:	59bffd04 	addi	r6,r11,-12
    4d60:	8180041e 	bne	r16,r6,4d74 <_malloc_r+0x264>
    4d64:	0000ce06 	br	50a0 <_malloc_r+0x590>
    4d68:	2000d70e 	bge	r4,zero,50c8 <_malloc_r+0x5b8>
    4d6c:	84000317 	ldw	r16,12(r16)
    4d70:	8180cb26 	beq	r16,r6,50a0 <_malloc_r+0x590>
    4d74:	80800117 	ldw	r2,4(r16)
    4d78:	1204703a 	and	r2,r2,r8
    4d7c:	1449c83a 	sub	r4,r2,r17
    4d80:	393ff90e 	bge	r7,r4,4d68 <__alt_mem_Flash_flash_data+0xf4004d68>
    4d84:	80800317 	ldw	r2,12(r16)
    4d88:	80c00217 	ldw	r3,8(r16)
    4d8c:	89400054 	ori	r5,r17,1
    4d90:	81400115 	stw	r5,4(r16)
    4d94:	18800315 	stw	r2,12(r3)
    4d98:	10c00215 	stw	r3,8(r2)
    4d9c:	8463883a 	add	r17,r16,r17
    4da0:	9c400515 	stw	r17,20(r19)
    4da4:	9c400415 	stw	r17,16(r19)
    4da8:	20800054 	ori	r2,r4,1
    4dac:	88800115 	stw	r2,4(r17)
    4db0:	8a400315 	stw	r9,12(r17)
    4db4:	8a400215 	stw	r9,8(r17)
    4db8:	8923883a 	add	r17,r17,r4
    4dbc:	89000015 	stw	r4,0(r17)
    4dc0:	9009883a 	mov	r4,r18
    4dc4:	000d23c0 	call	d23c <__malloc_unlock>
    4dc8:	80800204 	addi	r2,r16,8
    4dcc:	003f7d06 	br	4bc4 <__alt_mem_Flash_flash_data+0xf4004bc4>
    4dd0:	00800304 	movi	r2,12
    4dd4:	90800015 	stw	r2,0(r18)
    4dd8:	0005883a 	mov	r2,zero
    4ddc:	003f7906 	br	4bc4 <__alt_mem_Flash_flash_data+0xf4004bc4>
    4de0:	01401f84 	movi	r5,126
    4de4:	01c00fc4 	movi	r7,63
    4de8:	003f8d06 	br	4c20 <__alt_mem_Flash_flash_data+0xf4004c20>
    4dec:	81000317 	ldw	r4,12(r16)
    4df0:	003f6a06 	br	4b9c <__alt_mem_Flash_flash_data+0xf4004b9c>
    4df4:	81c5883a 	add	r2,r16,r7
    4df8:	10c00117 	ldw	r3,4(r2)
    4dfc:	9009883a 	mov	r4,r18
    4e00:	18c00054 	ori	r3,r3,1
    4e04:	10c00115 	stw	r3,4(r2)
    4e08:	000d23c0 	call	d23c <__malloc_unlock>
    4e0c:	80800204 	addi	r2,r16,8
    4e10:	003f6c06 	br	4bc4 <__alt_mem_Flash_flash_data+0xf4004bc4>
    4e14:	9c000217 	ldw	r16,8(r19)
    4e18:	00bfff04 	movi	r2,-4
    4e1c:	85800117 	ldw	r22,4(r16)
    4e20:	b0ac703a 	and	r22,r22,r2
    4e24:	b4400336 	bltu	r22,r17,4e34 <_malloc_r+0x324>
    4e28:	b445c83a 	sub	r2,r22,r17
    4e2c:	00c003c4 	movi	r3,15
    4e30:	18805d16 	blt	r3,r2,4fa8 <_malloc_r+0x498>
    4e34:	05c000b4 	movhi	r23,2
    4e38:	008000b4 	movhi	r2,2
    4e3c:	bdec7704 	addi	r23,r23,-20004
    4e40:	10b47504 	addi	r2,r2,-11820
    4e44:	15400017 	ldw	r21,0(r2)
    4e48:	b9000017 	ldw	r4,0(r23)
    4e4c:	00ffffc4 	movi	r3,-1
    4e50:	858d883a 	add	r6,r16,r22
    4e54:	8d6b883a 	add	r21,r17,r21
    4e58:	20c0e426 	beq	r4,r3,51ec <_malloc_r+0x6dc>
    4e5c:	ad4403c4 	addi	r21,r21,4111
    4e60:	00fc0004 	movi	r3,-4096
    4e64:	a8ea703a 	and	r21,r21,r3
    4e68:	9009883a 	mov	r4,r18
    4e6c:	a80b883a 	mov	r5,r21
    4e70:	d9800015 	stw	r6,0(sp)
    4e74:	0006bb00 	call	6bb0 <_sbrk_r>
    4e78:	00ffffc4 	movi	r3,-1
    4e7c:	1029883a 	mov	r20,r2
    4e80:	d9800017 	ldw	r6,0(sp)
    4e84:	10c0a426 	beq	r2,r3,5118 <_malloc_r+0x608>
    4e88:	1180a236 	bltu	r2,r6,5114 <_malloc_r+0x604>
    4e8c:	070000b4 	movhi	fp,2
    4e90:	e7349704 	addi	fp,fp,-11684
    4e94:	e0c00017 	ldw	r3,0(fp)
    4e98:	a8c7883a 	add	r3,r21,r3
    4e9c:	e0c00015 	stw	r3,0(fp)
    4ea0:	3500da26 	beq	r6,r20,520c <_malloc_r+0x6fc>
    4ea4:	b9000017 	ldw	r4,0(r23)
    4ea8:	00bfffc4 	movi	r2,-1
    4eac:	2080e426 	beq	r4,r2,5240 <_malloc_r+0x730>
    4eb0:	a185c83a 	sub	r2,r20,r6
    4eb4:	1885883a 	add	r2,r3,r2
    4eb8:	e0800015 	stw	r2,0(fp)
    4ebc:	a0c001cc 	andi	r3,r20,7
    4ec0:	1800b526 	beq	r3,zero,5198 <_malloc_r+0x688>
    4ec4:	a0e9c83a 	sub	r20,r20,r3
    4ec8:	00840204 	movi	r2,4104
    4ecc:	a5000204 	addi	r20,r20,8
    4ed0:	10c7c83a 	sub	r3,r2,r3
    4ed4:	a545883a 	add	r2,r20,r21
    4ed8:	1083ffcc 	andi	r2,r2,4095
    4edc:	18abc83a 	sub	r21,r3,r2
    4ee0:	9009883a 	mov	r4,r18
    4ee4:	a80b883a 	mov	r5,r21
    4ee8:	0006bb00 	call	6bb0 <_sbrk_r>
    4eec:	00ffffc4 	movi	r3,-1
    4ef0:	10c0d026 	beq	r2,r3,5234 <_malloc_r+0x724>
    4ef4:	1507c83a 	sub	r3,r2,r20
    4ef8:	a8c7883a 	add	r3,r21,r3
    4efc:	18c00054 	ori	r3,r3,1
    4f00:	e0800017 	ldw	r2,0(fp)
    4f04:	9d000215 	stw	r20,8(r19)
    4f08:	a0c00115 	stw	r3,4(r20)
    4f0c:	a887883a 	add	r3,r21,r2
    4f10:	e0c00015 	stw	r3,0(fp)
    4f14:	84c00e26 	beq	r16,r19,4f50 <_malloc_r+0x440>
    4f18:	018003c4 	movi	r6,15
    4f1c:	3580a02e 	bgeu	r6,r22,51a0 <_malloc_r+0x690>
    4f20:	81400117 	ldw	r5,4(r16)
    4f24:	013ffe04 	movi	r4,-8
    4f28:	b0bffd04 	addi	r2,r22,-12
    4f2c:	1104703a 	and	r2,r2,r4
    4f30:	2900004c 	andi	r4,r5,1
    4f34:	1108b03a 	or	r4,r2,r4
    4f38:	81000115 	stw	r4,4(r16)
    4f3c:	01400144 	movi	r5,5
    4f40:	8089883a 	add	r4,r16,r2
    4f44:	21400115 	stw	r5,4(r4)
    4f48:	21400215 	stw	r5,8(r4)
    4f4c:	3080c036 	bltu	r6,r2,5250 <_malloc_r+0x740>
    4f50:	008000b4 	movhi	r2,2
    4f54:	10b47404 	addi	r2,r2,-11824
    4f58:	11000017 	ldw	r4,0(r2)
    4f5c:	20c0012e 	bgeu	r4,r3,4f64 <_malloc_r+0x454>
    4f60:	10c00015 	stw	r3,0(r2)
    4f64:	008000b4 	movhi	r2,2
    4f68:	10b47304 	addi	r2,r2,-11828
    4f6c:	11000017 	ldw	r4,0(r2)
    4f70:	9c000217 	ldw	r16,8(r19)
    4f74:	20c0012e 	bgeu	r4,r3,4f7c <_malloc_r+0x46c>
    4f78:	10c00015 	stw	r3,0(r2)
    4f7c:	80c00117 	ldw	r3,4(r16)
    4f80:	00bfff04 	movi	r2,-4
    4f84:	1886703a 	and	r3,r3,r2
    4f88:	1c45c83a 	sub	r2,r3,r17
    4f8c:	1c400236 	bltu	r3,r17,4f98 <_malloc_r+0x488>
    4f90:	00c003c4 	movi	r3,15
    4f94:	18800416 	blt	r3,r2,4fa8 <_malloc_r+0x498>
    4f98:	9009883a 	mov	r4,r18
    4f9c:	000d23c0 	call	d23c <__malloc_unlock>
    4fa0:	0005883a 	mov	r2,zero
    4fa4:	003f0706 	br	4bc4 <__alt_mem_Flash_flash_data+0xf4004bc4>
    4fa8:	88c00054 	ori	r3,r17,1
    4fac:	80c00115 	stw	r3,4(r16)
    4fb0:	8463883a 	add	r17,r16,r17
    4fb4:	10800054 	ori	r2,r2,1
    4fb8:	9c400215 	stw	r17,8(r19)
    4fbc:	88800115 	stw	r2,4(r17)
    4fc0:	9009883a 	mov	r4,r18
    4fc4:	000d23c0 	call	d23c <__malloc_unlock>
    4fc8:	80800204 	addi	r2,r16,8
    4fcc:	003efd06 	br	4bc4 <__alt_mem_Flash_flash_data+0xf4004bc4>
    4fd0:	00800504 	movi	r2,20
    4fd4:	10c0482e 	bgeu	r2,r3,50f8 <_malloc_r+0x5e8>
    4fd8:	00801504 	movi	r2,84
    4fdc:	10c06836 	bltu	r2,r3,5180 <_malloc_r+0x670>
    4fe0:	8806d33a 	srli	r3,r17,12
    4fe4:	19c01b84 	addi	r7,r3,110
    4fe8:	39cb883a 	add	r5,r7,r7
    4fec:	003f0c06 	br	4c20 <__alt_mem_Flash_flash_data+0xf4004c20>
    4ff0:	3804d27a 	srli	r2,r7,9
    4ff4:	01000104 	movi	r4,4
    4ff8:	2080422e 	bgeu	r4,r2,5104 <_malloc_r+0x5f4>
    4ffc:	01000504 	movi	r4,20
    5000:	20807c36 	bltu	r4,r2,51f4 <_malloc_r+0x6e4>
    5004:	110016c4 	addi	r4,r2,91
    5008:	210b883a 	add	r5,r4,r4
    500c:	294b883a 	add	r5,r5,r5
    5010:	294b883a 	add	r5,r5,r5
    5014:	994b883a 	add	r5,r19,r5
    5018:	28800217 	ldw	r2,8(r5)
    501c:	020000b4 	movhi	r8,2
    5020:	42260c04 	addi	r8,r8,-26576
    5024:	11406326 	beq	r2,r5,51b4 <_malloc_r+0x6a4>
    5028:	01bfff04 	movi	r6,-4
    502c:	11000117 	ldw	r4,4(r2)
    5030:	2188703a 	and	r4,r4,r6
    5034:	3900022e 	bgeu	r7,r4,5040 <_malloc_r+0x530>
    5038:	10800217 	ldw	r2,8(r2)
    503c:	28bffb1e 	bne	r5,r2,502c <__alt_mem_Flash_flash_data+0xf400502c>
    5040:	11800317 	ldw	r6,12(r2)
    5044:	99000117 	ldw	r4,4(r19)
    5048:	81800315 	stw	r6,12(r16)
    504c:	80800215 	stw	r2,8(r16)
    5050:	34000215 	stw	r16,8(r6)
    5054:	14000315 	stw	r16,12(r2)
    5058:	003f2706 	br	4cf8 <__alt_mem_Flash_flash_data+0xf4004cf8>
    505c:	88c00054 	ori	r3,r17,1
    5060:	80c00115 	stw	r3,4(r16)
    5064:	8463883a 	add	r17,r16,r17
    5068:	34400515 	stw	r17,20(r6)
    506c:	34400415 	stw	r17,16(r6)
    5070:	10c00054 	ori	r3,r2,1
    5074:	8a400315 	stw	r9,12(r17)
    5078:	8a400215 	stw	r9,8(r17)
    507c:	88c00115 	stw	r3,4(r17)
    5080:	88a3883a 	add	r17,r17,r2
    5084:	88800015 	stw	r2,0(r17)
    5088:	9009883a 	mov	r4,r18
    508c:	000d23c0 	call	d23c <__malloc_unlock>
    5090:	80800204 	addi	r2,r16,8
    5094:	003ecb06 	br	4bc4 <__alt_mem_Flash_flash_data+0xf4004bc4>
    5098:	31000117 	ldw	r4,4(r6)
    509c:	003f1606 	br	4cf8 <__alt_mem_Flash_flash_data+0xf4004cf8>
    50a0:	63000044 	addi	r12,r12,1
    50a4:	608000cc 	andi	r2,r12,3
    50a8:	5ac00204 	addi	r11,r11,8
    50ac:	103f2a1e 	bne	r2,zero,4d58 <__alt_mem_Flash_flash_data+0xf4004d58>
    50b0:	00002106 	br	5138 <_malloc_r+0x628>
    50b4:	80800204 	addi	r2,r16,8
    50b8:	84000517 	ldw	r16,20(r16)
    50bc:	143eb31e 	bne	r2,r16,4b8c <__alt_mem_Flash_flash_data+0xf4004b8c>
    50c0:	18c00084 	addi	r3,r3,2
    50c4:	003eec06 	br	4c78 <__alt_mem_Flash_flash_data+0xf4004c78>
    50c8:	8085883a 	add	r2,r16,r2
    50cc:	10c00117 	ldw	r3,4(r2)
    50d0:	81000317 	ldw	r4,12(r16)
    50d4:	81400217 	ldw	r5,8(r16)
    50d8:	18c00054 	ori	r3,r3,1
    50dc:	10c00115 	stw	r3,4(r2)
    50e0:	29000315 	stw	r4,12(r5)
    50e4:	21400215 	stw	r5,8(r4)
    50e8:	9009883a 	mov	r4,r18
    50ec:	000d23c0 	call	d23c <__malloc_unlock>
    50f0:	80800204 	addi	r2,r16,8
    50f4:	003eb306 	br	4bc4 <__alt_mem_Flash_flash_data+0xf4004bc4>
    50f8:	19c016c4 	addi	r7,r3,91
    50fc:	39cb883a 	add	r5,r7,r7
    5100:	003ec706 	br	4c20 <__alt_mem_Flash_flash_data+0xf4004c20>
    5104:	3804d1ba 	srli	r2,r7,6
    5108:	11000e04 	addi	r4,r2,56
    510c:	210b883a 	add	r5,r4,r4
    5110:	003fbe06 	br	500c <__alt_mem_Flash_flash_data+0xf400500c>
    5114:	84ff5d26 	beq	r16,r19,4e8c <__alt_mem_Flash_flash_data+0xf4004e8c>
    5118:	9c000217 	ldw	r16,8(r19)
    511c:	00bfff04 	movi	r2,-4
    5120:	80c00117 	ldw	r3,4(r16)
    5124:	1886703a 	and	r3,r3,r2
    5128:	003f9706 	br	4f88 <__alt_mem_Flash_flash_data+0xf4004f88>
    512c:	52800017 	ldw	r10,0(r10)
    5130:	18ffffc4 	addi	r3,r3,-1
    5134:	50805c1e 	bne	r10,r2,52a8 <_malloc_r+0x798>
    5138:	190000cc 	andi	r4,r3,3
    513c:	50bffe04 	addi	r2,r10,-8
    5140:	203ffa1e 	bne	r4,zero,512c <__alt_mem_Flash_flash_data+0xf400512c>
    5144:	98800117 	ldw	r2,4(r19)
    5148:	0146303a 	nor	r3,zero,r5
    514c:	1884703a 	and	r2,r3,r2
    5150:	98800115 	stw	r2,4(r19)
    5154:	294b883a 	add	r5,r5,r5
    5158:	117f2e36 	bltu	r2,r5,4e14 <__alt_mem_Flash_flash_data+0xf4004e14>
    515c:	283f2d26 	beq	r5,zero,4e14 <__alt_mem_Flash_flash_data+0xf4004e14>
    5160:	1146703a 	and	r3,r2,r5
    5164:	1800521e 	bne	r3,zero,52b0 <_malloc_r+0x7a0>
    5168:	6007883a 	mov	r3,r12
    516c:	294b883a 	add	r5,r5,r5
    5170:	1148703a 	and	r4,r2,r5
    5174:	18c00104 	addi	r3,r3,4
    5178:	203ffc26 	beq	r4,zero,516c <__alt_mem_Flash_flash_data+0xf400516c>
    517c:	003ef006 	br	4d40 <__alt_mem_Flash_flash_data+0xf4004d40>
    5180:	00805504 	movi	r2,340
    5184:	10c01336 	bltu	r2,r3,51d4 <_malloc_r+0x6c4>
    5188:	8806d3fa 	srli	r3,r17,15
    518c:	19c01dc4 	addi	r7,r3,119
    5190:	39cb883a 	add	r5,r7,r7
    5194:	003ea206 	br	4c20 <__alt_mem_Flash_flash_data+0xf4004c20>
    5198:	00c40004 	movi	r3,4096
    519c:	003f4d06 	br	4ed4 <__alt_mem_Flash_flash_data+0xf4004ed4>
    51a0:	00800044 	movi	r2,1
    51a4:	a0800115 	stw	r2,4(r20)
    51a8:	a021883a 	mov	r16,r20
    51ac:	0007883a 	mov	r3,zero
    51b0:	003f7506 	br	4f88 <__alt_mem_Flash_flash_data+0xf4004f88>
    51b4:	200bd0ba 	srai	r5,r4,2
    51b8:	01800044 	movi	r6,1
    51bc:	41000117 	ldw	r4,4(r8)
    51c0:	314a983a 	sll	r5,r6,r5
    51c4:	100d883a 	mov	r6,r2
    51c8:	2908b03a 	or	r4,r5,r4
    51cc:	41000115 	stw	r4,4(r8)
    51d0:	003f9d06 	br	5048 <__alt_mem_Flash_flash_data+0xf4005048>
    51d4:	00815504 	movi	r2,1364
    51d8:	10c01336 	bltu	r2,r3,5228 <_malloc_r+0x718>
    51dc:	8806d4ba 	srli	r3,r17,18
    51e0:	19c01f04 	addi	r7,r3,124
    51e4:	39cb883a 	add	r5,r7,r7
    51e8:	003e8d06 	br	4c20 <__alt_mem_Flash_flash_data+0xf4004c20>
    51ec:	ad400404 	addi	r21,r21,16
    51f0:	003f1d06 	br	4e68 <__alt_mem_Flash_flash_data+0xf4004e68>
    51f4:	01001504 	movi	r4,84
    51f8:	20801c36 	bltu	r4,r2,526c <_malloc_r+0x75c>
    51fc:	3804d33a 	srli	r2,r7,12
    5200:	11001b84 	addi	r4,r2,110
    5204:	210b883a 	add	r5,r4,r4
    5208:	003f8006 	br	500c <__alt_mem_Flash_flash_data+0xf400500c>
    520c:	3083ffcc 	andi	r2,r6,4095
    5210:	103f241e 	bne	r2,zero,4ea4 <__alt_mem_Flash_flash_data+0xf4004ea4>
    5214:	99000217 	ldw	r4,8(r19)
    5218:	ad85883a 	add	r2,r21,r22
    521c:	10800054 	ori	r2,r2,1
    5220:	20800115 	stw	r2,4(r4)
    5224:	003f4a06 	br	4f50 <__alt_mem_Flash_flash_data+0xf4004f50>
    5228:	01403f04 	movi	r5,252
    522c:	01c01f84 	movi	r7,126
    5230:	003e7b06 	br	4c20 <__alt_mem_Flash_flash_data+0xf4004c20>
    5234:	00c00044 	movi	r3,1
    5238:	002b883a 	mov	r21,zero
    523c:	003f3006 	br	4f00 <__alt_mem_Flash_flash_data+0xf4004f00>
    5240:	008000b4 	movhi	r2,2
    5244:	10ac7704 	addi	r2,r2,-20004
    5248:	15000015 	stw	r20,0(r2)
    524c:	003f1b06 	br	4ebc <__alt_mem_Flash_flash_data+0xf4004ebc>
    5250:	9009883a 	mov	r4,r18
    5254:	81400204 	addi	r5,r16,8
    5258:	000881c0 	call	881c <_free_r>
    525c:	008000b4 	movhi	r2,2
    5260:	10b49704 	addi	r2,r2,-11684
    5264:	10c00017 	ldw	r3,0(r2)
    5268:	003f3906 	br	4f50 <__alt_mem_Flash_flash_data+0xf4004f50>
    526c:	01005504 	movi	r4,340
    5270:	20800436 	bltu	r4,r2,5284 <_malloc_r+0x774>
    5274:	3804d3fa 	srli	r2,r7,15
    5278:	11001dc4 	addi	r4,r2,119
    527c:	210b883a 	add	r5,r4,r4
    5280:	003f6206 	br	500c <__alt_mem_Flash_flash_data+0xf400500c>
    5284:	01015504 	movi	r4,1364
    5288:	20800436 	bltu	r4,r2,529c <_malloc_r+0x78c>
    528c:	3804d4ba 	srli	r2,r7,18
    5290:	11001f04 	addi	r4,r2,124
    5294:	210b883a 	add	r5,r4,r4
    5298:	003f5c06 	br	500c <__alt_mem_Flash_flash_data+0xf400500c>
    529c:	01403f04 	movi	r5,252
    52a0:	01001f84 	movi	r4,126
    52a4:	003f5906 	br	500c <__alt_mem_Flash_flash_data+0xf400500c>
    52a8:	98800117 	ldw	r2,4(r19)
    52ac:	003fa906 	br	5154 <__alt_mem_Flash_flash_data+0xf4005154>
    52b0:	6007883a 	mov	r3,r12
    52b4:	003ea206 	br	4d40 <__alt_mem_Flash_flash_data+0xf4004d40>

000052b8 <memchr>:
    52b8:	208000cc 	andi	r2,r4,3
    52bc:	280f883a 	mov	r7,r5
    52c0:	10003526 	beq	r2,zero,5398 <memchr+0xe0>
    52c4:	30bfffc4 	addi	r2,r6,-1
    52c8:	30001b26 	beq	r6,zero,5338 <memchr+0x80>
    52cc:	21800003 	ldbu	r6,0(r4)
    52d0:	28c03fcc 	andi	r3,r5,255
    52d4:	30c01a26 	beq	r6,r3,5340 <memchr+0x88>
    52d8:	180d883a 	mov	r6,r3
    52dc:	00000406 	br	52f0 <memchr+0x38>
    52e0:	10001526 	beq	r2,zero,5338 <memchr+0x80>
    52e4:	20c00003 	ldbu	r3,0(r4)
    52e8:	10bfffc4 	addi	r2,r2,-1
    52ec:	19801426 	beq	r3,r6,5340 <memchr+0x88>
    52f0:	21000044 	addi	r4,r4,1
    52f4:	20c000cc 	andi	r3,r4,3
    52f8:	183ff91e 	bne	r3,zero,52e0 <__alt_mem_Flash_flash_data+0xf40052e0>
    52fc:	024000c4 	movi	r9,3
    5300:	48801136 	bltu	r9,r2,5348 <memchr+0x90>
    5304:	10000c26 	beq	r2,zero,5338 <memchr+0x80>
    5308:	20c00003 	ldbu	r3,0(r4)
    530c:	29403fcc 	andi	r5,r5,255
    5310:	19400b26 	beq	r3,r5,5340 <memchr+0x88>
    5314:	20c00044 	addi	r3,r4,1
    5318:	2085883a 	add	r2,r4,r2
    531c:	39803fcc 	andi	r6,r7,255
    5320:	00000306 	br	5330 <memchr+0x78>
    5324:	18c00044 	addi	r3,r3,1
    5328:	197fffc3 	ldbu	r5,-1(r3)
    532c:	29800426 	beq	r5,r6,5340 <memchr+0x88>
    5330:	1809883a 	mov	r4,r3
    5334:	18bffb1e 	bne	r3,r2,5324 <__alt_mem_Flash_flash_data+0xf4005324>
    5338:	0005883a 	mov	r2,zero
    533c:	f800283a 	ret
    5340:	2005883a 	mov	r2,r4
    5344:	f800283a 	ret
    5348:	28c03fcc 	andi	r3,r5,255
    534c:	1810923a 	slli	r8,r3,8
    5350:	02ffbff4 	movhi	r11,65279
    5354:	02a02074 	movhi	r10,32897
    5358:	40c6b03a 	or	r3,r8,r3
    535c:	1810943a 	slli	r8,r3,16
    5360:	5affbfc4 	addi	r11,r11,-257
    5364:	52a02004 	addi	r10,r10,-32640
    5368:	40d0b03a 	or	r8,r8,r3
    536c:	20c00017 	ldw	r3,0(r4)
    5370:	40c6f03a 	xor	r3,r8,r3
    5374:	1acd883a 	add	r6,r3,r11
    5378:	00c6303a 	nor	r3,zero,r3
    537c:	30c6703a 	and	r3,r6,r3
    5380:	1a86703a 	and	r3,r3,r10
    5384:	183fdf1e 	bne	r3,zero,5304 <__alt_mem_Flash_flash_data+0xf4005304>
    5388:	10bfff04 	addi	r2,r2,-4
    538c:	21000104 	addi	r4,r4,4
    5390:	48bff636 	bltu	r9,r2,536c <__alt_mem_Flash_flash_data+0xf400536c>
    5394:	003fdb06 	br	5304 <__alt_mem_Flash_flash_data+0xf4005304>
    5398:	3005883a 	mov	r2,r6
    539c:	003fd706 	br	52fc <__alt_mem_Flash_flash_data+0xf40052fc>

000053a0 <memcpy>:
    53a0:	deffff04 	addi	sp,sp,-4
    53a4:	dc000015 	stw	r16,0(sp)
    53a8:	00c003c4 	movi	r3,15
    53ac:	2005883a 	mov	r2,r4
    53b0:	1980432e 	bgeu	r3,r6,54c0 <memcpy+0x120>
    53b4:	2146b03a 	or	r3,r4,r5
    53b8:	18c000cc 	andi	r3,r3,3
    53bc:	1800421e 	bne	r3,zero,54c8 <memcpy+0x128>
    53c0:	343ffc04 	addi	r16,r6,-16
    53c4:	8020d13a 	srli	r16,r16,4
    53c8:	28c00104 	addi	r3,r5,4
    53cc:	23400104 	addi	r13,r4,4
    53d0:	801e913a 	slli	r15,r16,4
    53d4:	2b000204 	addi	r12,r5,8
    53d8:	22c00204 	addi	r11,r4,8
    53dc:	7bc00504 	addi	r15,r15,20
    53e0:	2a800304 	addi	r10,r5,12
    53e4:	22400304 	addi	r9,r4,12
    53e8:	2bdf883a 	add	r15,r5,r15
    53ec:	2811883a 	mov	r8,r5
    53f0:	200f883a 	mov	r7,r4
    53f4:	41000017 	ldw	r4,0(r8)
    53f8:	39c00404 	addi	r7,r7,16
    53fc:	18c00404 	addi	r3,r3,16
    5400:	393ffc15 	stw	r4,-16(r7)
    5404:	1bbffc17 	ldw	r14,-16(r3)
    5408:	6b400404 	addi	r13,r13,16
    540c:	5ac00404 	addi	r11,r11,16
    5410:	6bbffc15 	stw	r14,-16(r13)
    5414:	63800017 	ldw	r14,0(r12)
    5418:	4a400404 	addi	r9,r9,16
    541c:	42000404 	addi	r8,r8,16
    5420:	5bbffc15 	stw	r14,-16(r11)
    5424:	53800017 	ldw	r14,0(r10)
    5428:	63000404 	addi	r12,r12,16
    542c:	52800404 	addi	r10,r10,16
    5430:	4bbffc15 	stw	r14,-16(r9)
    5434:	1bffef1e 	bne	r3,r15,53f4 <__alt_mem_Flash_flash_data+0xf40053f4>
    5438:	81c00044 	addi	r7,r16,1
    543c:	380e913a 	slli	r7,r7,4
    5440:	310003cc 	andi	r4,r6,15
    5444:	02c000c4 	movi	r11,3
    5448:	11c7883a 	add	r3,r2,r7
    544c:	29cb883a 	add	r5,r5,r7
    5450:	59001f2e 	bgeu	r11,r4,54d0 <memcpy+0x130>
    5454:	1813883a 	mov	r9,r3
    5458:	2811883a 	mov	r8,r5
    545c:	200f883a 	mov	r7,r4
    5460:	42800017 	ldw	r10,0(r8)
    5464:	4a400104 	addi	r9,r9,4
    5468:	39ffff04 	addi	r7,r7,-4
    546c:	4abfff15 	stw	r10,-4(r9)
    5470:	42000104 	addi	r8,r8,4
    5474:	59fffa36 	bltu	r11,r7,5460 <__alt_mem_Flash_flash_data+0xf4005460>
    5478:	213fff04 	addi	r4,r4,-4
    547c:	2008d0ba 	srli	r4,r4,2
    5480:	318000cc 	andi	r6,r6,3
    5484:	21000044 	addi	r4,r4,1
    5488:	2109883a 	add	r4,r4,r4
    548c:	2109883a 	add	r4,r4,r4
    5490:	1907883a 	add	r3,r3,r4
    5494:	290b883a 	add	r5,r5,r4
    5498:	30000626 	beq	r6,zero,54b4 <memcpy+0x114>
    549c:	198d883a 	add	r6,r3,r6
    54a0:	29c00003 	ldbu	r7,0(r5)
    54a4:	18c00044 	addi	r3,r3,1
    54a8:	29400044 	addi	r5,r5,1
    54ac:	19ffffc5 	stb	r7,-1(r3)
    54b0:	19bffb1e 	bne	r3,r6,54a0 <__alt_mem_Flash_flash_data+0xf40054a0>
    54b4:	dc000017 	ldw	r16,0(sp)
    54b8:	dec00104 	addi	sp,sp,4
    54bc:	f800283a 	ret
    54c0:	2007883a 	mov	r3,r4
    54c4:	003ff406 	br	5498 <__alt_mem_Flash_flash_data+0xf4005498>
    54c8:	2007883a 	mov	r3,r4
    54cc:	003ff306 	br	549c <__alt_mem_Flash_flash_data+0xf400549c>
    54d0:	200d883a 	mov	r6,r4
    54d4:	003ff006 	br	5498 <__alt_mem_Flash_flash_data+0xf4005498>

000054d8 <memmove>:
    54d8:	2005883a 	mov	r2,r4
    54dc:	29000b2e 	bgeu	r5,r4,550c <memmove+0x34>
    54e0:	298f883a 	add	r7,r5,r6
    54e4:	21c0092e 	bgeu	r4,r7,550c <memmove+0x34>
    54e8:	2187883a 	add	r3,r4,r6
    54ec:	198bc83a 	sub	r5,r3,r6
    54f0:	30004b26 	beq	r6,zero,5620 <memmove+0x148>
    54f4:	39ffffc4 	addi	r7,r7,-1
    54f8:	39000003 	ldbu	r4,0(r7)
    54fc:	18ffffc4 	addi	r3,r3,-1
    5500:	19000005 	stb	r4,0(r3)
    5504:	197ffb1e 	bne	r3,r5,54f4 <__alt_mem_Flash_flash_data+0xf40054f4>
    5508:	f800283a 	ret
    550c:	00c003c4 	movi	r3,15
    5510:	1980412e 	bgeu	r3,r6,5618 <memmove+0x140>
    5514:	1146b03a 	or	r3,r2,r5
    5518:	18c000cc 	andi	r3,r3,3
    551c:	1800411e 	bne	r3,zero,5624 <memmove+0x14c>
    5520:	33fffc04 	addi	r15,r6,-16
    5524:	781ed13a 	srli	r15,r15,4
    5528:	28c00104 	addi	r3,r5,4
    552c:	13400104 	addi	r13,r2,4
    5530:	781c913a 	slli	r14,r15,4
    5534:	2b000204 	addi	r12,r5,8
    5538:	12c00204 	addi	r11,r2,8
    553c:	73800504 	addi	r14,r14,20
    5540:	2a800304 	addi	r10,r5,12
    5544:	12400304 	addi	r9,r2,12
    5548:	2b9d883a 	add	r14,r5,r14
    554c:	2811883a 	mov	r8,r5
    5550:	100f883a 	mov	r7,r2
    5554:	41000017 	ldw	r4,0(r8)
    5558:	39c00404 	addi	r7,r7,16
    555c:	18c00404 	addi	r3,r3,16
    5560:	393ffc15 	stw	r4,-16(r7)
    5564:	193ffc17 	ldw	r4,-16(r3)
    5568:	6b400404 	addi	r13,r13,16
    556c:	5ac00404 	addi	r11,r11,16
    5570:	693ffc15 	stw	r4,-16(r13)
    5574:	61000017 	ldw	r4,0(r12)
    5578:	4a400404 	addi	r9,r9,16
    557c:	42000404 	addi	r8,r8,16
    5580:	593ffc15 	stw	r4,-16(r11)
    5584:	51000017 	ldw	r4,0(r10)
    5588:	63000404 	addi	r12,r12,16
    558c:	52800404 	addi	r10,r10,16
    5590:	493ffc15 	stw	r4,-16(r9)
    5594:	1bbfef1e 	bne	r3,r14,5554 <__alt_mem_Flash_flash_data+0xf4005554>
    5598:	79000044 	addi	r4,r15,1
    559c:	2008913a 	slli	r4,r4,4
    55a0:	328003cc 	andi	r10,r6,15
    55a4:	02c000c4 	movi	r11,3
    55a8:	1107883a 	add	r3,r2,r4
    55ac:	290b883a 	add	r5,r5,r4
    55b0:	5a801e2e 	bgeu	r11,r10,562c <memmove+0x154>
    55b4:	1813883a 	mov	r9,r3
    55b8:	2811883a 	mov	r8,r5
    55bc:	500f883a 	mov	r7,r10
    55c0:	41000017 	ldw	r4,0(r8)
    55c4:	4a400104 	addi	r9,r9,4
    55c8:	39ffff04 	addi	r7,r7,-4
    55cc:	493fff15 	stw	r4,-4(r9)
    55d0:	42000104 	addi	r8,r8,4
    55d4:	59fffa36 	bltu	r11,r7,55c0 <__alt_mem_Flash_flash_data+0xf40055c0>
    55d8:	513fff04 	addi	r4,r10,-4
    55dc:	2008d0ba 	srli	r4,r4,2
    55e0:	318000cc 	andi	r6,r6,3
    55e4:	21000044 	addi	r4,r4,1
    55e8:	2109883a 	add	r4,r4,r4
    55ec:	2109883a 	add	r4,r4,r4
    55f0:	1907883a 	add	r3,r3,r4
    55f4:	290b883a 	add	r5,r5,r4
    55f8:	30000926 	beq	r6,zero,5620 <memmove+0x148>
    55fc:	198d883a 	add	r6,r3,r6
    5600:	29c00003 	ldbu	r7,0(r5)
    5604:	18c00044 	addi	r3,r3,1
    5608:	29400044 	addi	r5,r5,1
    560c:	19ffffc5 	stb	r7,-1(r3)
    5610:	19bffb1e 	bne	r3,r6,5600 <__alt_mem_Flash_flash_data+0xf4005600>
    5614:	f800283a 	ret
    5618:	1007883a 	mov	r3,r2
    561c:	003ff606 	br	55f8 <__alt_mem_Flash_flash_data+0xf40055f8>
    5620:	f800283a 	ret
    5624:	1007883a 	mov	r3,r2
    5628:	003ff406 	br	55fc <__alt_mem_Flash_flash_data+0xf40055fc>
    562c:	500d883a 	mov	r6,r10
    5630:	003ff106 	br	55f8 <__alt_mem_Flash_flash_data+0xf40055f8>

00005634 <_Balloc>:
    5634:	20801317 	ldw	r2,76(r4)
    5638:	defffc04 	addi	sp,sp,-16
    563c:	dc400115 	stw	r17,4(sp)
    5640:	dc000015 	stw	r16,0(sp)
    5644:	dfc00315 	stw	ra,12(sp)
    5648:	dc800215 	stw	r18,8(sp)
    564c:	2023883a 	mov	r17,r4
    5650:	2821883a 	mov	r16,r5
    5654:	10000f26 	beq	r2,zero,5694 <_Balloc+0x60>
    5658:	8407883a 	add	r3,r16,r16
    565c:	18c7883a 	add	r3,r3,r3
    5660:	10c7883a 	add	r3,r2,r3
    5664:	18800017 	ldw	r2,0(r3)
    5668:	10001126 	beq	r2,zero,56b0 <_Balloc+0x7c>
    566c:	11000017 	ldw	r4,0(r2)
    5670:	19000015 	stw	r4,0(r3)
    5674:	10000415 	stw	zero,16(r2)
    5678:	10000315 	stw	zero,12(r2)
    567c:	dfc00317 	ldw	ra,12(sp)
    5680:	dc800217 	ldw	r18,8(sp)
    5684:	dc400117 	ldw	r17,4(sp)
    5688:	dc000017 	ldw	r16,0(sp)
    568c:	dec00404 	addi	sp,sp,16
    5690:	f800283a 	ret
    5694:	01400104 	movi	r5,4
    5698:	01800844 	movi	r6,33
    569c:	00080000 	call	8000 <_calloc_r>
    56a0:	88801315 	stw	r2,76(r17)
    56a4:	103fec1e 	bne	r2,zero,5658 <__alt_mem_Flash_flash_data+0xf4005658>
    56a8:	0005883a 	mov	r2,zero
    56ac:	003ff306 	br	567c <__alt_mem_Flash_flash_data+0xf400567c>
    56b0:	01400044 	movi	r5,1
    56b4:	2c24983a 	sll	r18,r5,r16
    56b8:	8809883a 	mov	r4,r17
    56bc:	91800144 	addi	r6,r18,5
    56c0:	318d883a 	add	r6,r6,r6
    56c4:	318d883a 	add	r6,r6,r6
    56c8:	00080000 	call	8000 <_calloc_r>
    56cc:	103ff626 	beq	r2,zero,56a8 <__alt_mem_Flash_flash_data+0xf40056a8>
    56d0:	14000115 	stw	r16,4(r2)
    56d4:	14800215 	stw	r18,8(r2)
    56d8:	003fe606 	br	5674 <__alt_mem_Flash_flash_data+0xf4005674>

000056dc <_Bfree>:
    56dc:	28000826 	beq	r5,zero,5700 <_Bfree+0x24>
    56e0:	28c00117 	ldw	r3,4(r5)
    56e4:	20801317 	ldw	r2,76(r4)
    56e8:	18c7883a 	add	r3,r3,r3
    56ec:	18c7883a 	add	r3,r3,r3
    56f0:	10c5883a 	add	r2,r2,r3
    56f4:	10c00017 	ldw	r3,0(r2)
    56f8:	28c00015 	stw	r3,0(r5)
    56fc:	11400015 	stw	r5,0(r2)
    5700:	f800283a 	ret

00005704 <__multadd>:
    5704:	defffa04 	addi	sp,sp,-24
    5708:	dc000115 	stw	r16,4(sp)
    570c:	2c000417 	ldw	r16,16(r5)
    5710:	dc800315 	stw	r18,12(sp)
    5714:	dc400215 	stw	r17,8(sp)
    5718:	dfc00515 	stw	ra,20(sp)
    571c:	dcc00415 	stw	r19,16(sp)
    5720:	2823883a 	mov	r17,r5
    5724:	2025883a 	mov	r18,r4
    5728:	2a400504 	addi	r9,r5,20
    572c:	0015883a 	mov	r10,zero
    5730:	4a000017 	ldw	r8,0(r9)
    5734:	4a400104 	addi	r9,r9,4
    5738:	52800044 	addi	r10,r10,1
    573c:	40ffffcc 	andi	r3,r8,65535
    5740:	1987383a 	mul	r3,r3,r6
    5744:	4010d43a 	srli	r8,r8,16
    5748:	19cf883a 	add	r7,r3,r7
    574c:	4191383a 	mul	r8,r8,r6
    5750:	3816d43a 	srli	r11,r7,16
    5754:	38ffffcc 	andi	r3,r7,65535
    5758:	5a0f883a 	add	r7,r11,r8
    575c:	3810943a 	slli	r8,r7,16
    5760:	380ed43a 	srli	r7,r7,16
    5764:	40c7883a 	add	r3,r8,r3
    5768:	48ffff15 	stw	r3,-4(r9)
    576c:	543ff016 	blt	r10,r16,5730 <__alt_mem_Flash_flash_data+0xf4005730>
    5770:	38000926 	beq	r7,zero,5798 <__multadd+0x94>
    5774:	88800217 	ldw	r2,8(r17)
    5778:	80800f0e 	bge	r16,r2,57b8 <__multadd+0xb4>
    577c:	80800144 	addi	r2,r16,5
    5780:	1085883a 	add	r2,r2,r2
    5784:	1085883a 	add	r2,r2,r2
    5788:	8885883a 	add	r2,r17,r2
    578c:	11c00015 	stw	r7,0(r2)
    5790:	84000044 	addi	r16,r16,1
    5794:	8c000415 	stw	r16,16(r17)
    5798:	8805883a 	mov	r2,r17
    579c:	dfc00517 	ldw	ra,20(sp)
    57a0:	dcc00417 	ldw	r19,16(sp)
    57a4:	dc800317 	ldw	r18,12(sp)
    57a8:	dc400217 	ldw	r17,8(sp)
    57ac:	dc000117 	ldw	r16,4(sp)
    57b0:	dec00604 	addi	sp,sp,24
    57b4:	f800283a 	ret
    57b8:	89400117 	ldw	r5,4(r17)
    57bc:	9009883a 	mov	r4,r18
    57c0:	d9c00015 	stw	r7,0(sp)
    57c4:	29400044 	addi	r5,r5,1
    57c8:	00056340 	call	5634 <_Balloc>
    57cc:	89800417 	ldw	r6,16(r17)
    57d0:	11000304 	addi	r4,r2,12
    57d4:	89400304 	addi	r5,r17,12
    57d8:	31800084 	addi	r6,r6,2
    57dc:	318d883a 	add	r6,r6,r6
    57e0:	318d883a 	add	r6,r6,r6
    57e4:	1027883a 	mov	r19,r2
    57e8:	00053a00 	call	53a0 <memcpy>
    57ec:	d9c00017 	ldw	r7,0(sp)
    57f0:	88000a26 	beq	r17,zero,581c <__multadd+0x118>
    57f4:	89000117 	ldw	r4,4(r17)
    57f8:	90c01317 	ldw	r3,76(r18)
    57fc:	2109883a 	add	r4,r4,r4
    5800:	2109883a 	add	r4,r4,r4
    5804:	1907883a 	add	r3,r3,r4
    5808:	18800017 	ldw	r2,0(r3)
    580c:	88800015 	stw	r2,0(r17)
    5810:	1c400015 	stw	r17,0(r3)
    5814:	9823883a 	mov	r17,r19
    5818:	003fd806 	br	577c <__alt_mem_Flash_flash_data+0xf400577c>
    581c:	9823883a 	mov	r17,r19
    5820:	003fd606 	br	577c <__alt_mem_Flash_flash_data+0xf400577c>

00005824 <__s2b>:
    5824:	defff904 	addi	sp,sp,-28
    5828:	dc400115 	stw	r17,4(sp)
    582c:	dc000015 	stw	r16,0(sp)
    5830:	2023883a 	mov	r17,r4
    5834:	2821883a 	mov	r16,r5
    5838:	39000204 	addi	r4,r7,8
    583c:	01400244 	movi	r5,9
    5840:	dcc00315 	stw	r19,12(sp)
    5844:	dc800215 	stw	r18,8(sp)
    5848:	dfc00615 	stw	ra,24(sp)
    584c:	dd400515 	stw	r21,20(sp)
    5850:	dd000415 	stw	r20,16(sp)
    5854:	3825883a 	mov	r18,r7
    5858:	3027883a 	mov	r19,r6
    585c:	0009f800 	call	9f80 <__divsi3>
    5860:	00c00044 	movi	r3,1
    5864:	000b883a 	mov	r5,zero
    5868:	1880030e 	bge	r3,r2,5878 <__s2b+0x54>
    586c:	18c7883a 	add	r3,r3,r3
    5870:	29400044 	addi	r5,r5,1
    5874:	18bffd16 	blt	r3,r2,586c <__alt_mem_Flash_flash_data+0xf400586c>
    5878:	8809883a 	mov	r4,r17
    587c:	00056340 	call	5634 <_Balloc>
    5880:	d8c00717 	ldw	r3,28(sp)
    5884:	10c00515 	stw	r3,20(r2)
    5888:	00c00044 	movi	r3,1
    588c:	10c00415 	stw	r3,16(r2)
    5890:	00c00244 	movi	r3,9
    5894:	1cc0210e 	bge	r3,r19,591c <__s2b+0xf8>
    5898:	80eb883a 	add	r21,r16,r3
    589c:	a829883a 	mov	r20,r21
    58a0:	84e1883a 	add	r16,r16,r19
    58a4:	a1c00007 	ldb	r7,0(r20)
    58a8:	8809883a 	mov	r4,r17
    58ac:	a5000044 	addi	r20,r20,1
    58b0:	100b883a 	mov	r5,r2
    58b4:	01800284 	movi	r6,10
    58b8:	39fff404 	addi	r7,r7,-48
    58bc:	00057040 	call	5704 <__multadd>
    58c0:	a43ff81e 	bne	r20,r16,58a4 <__alt_mem_Flash_flash_data+0xf40058a4>
    58c4:	ace1883a 	add	r16,r21,r19
    58c8:	843ffe04 	addi	r16,r16,-8
    58cc:	9c800a0e 	bge	r19,r18,58f8 <__s2b+0xd4>
    58d0:	94e5c83a 	sub	r18,r18,r19
    58d4:	84a5883a 	add	r18,r16,r18
    58d8:	81c00007 	ldb	r7,0(r16)
    58dc:	8809883a 	mov	r4,r17
    58e0:	84000044 	addi	r16,r16,1
    58e4:	100b883a 	mov	r5,r2
    58e8:	01800284 	movi	r6,10
    58ec:	39fff404 	addi	r7,r7,-48
    58f0:	00057040 	call	5704 <__multadd>
    58f4:	84bff81e 	bne	r16,r18,58d8 <__alt_mem_Flash_flash_data+0xf40058d8>
    58f8:	dfc00617 	ldw	ra,24(sp)
    58fc:	dd400517 	ldw	r21,20(sp)
    5900:	dd000417 	ldw	r20,16(sp)
    5904:	dcc00317 	ldw	r19,12(sp)
    5908:	dc800217 	ldw	r18,8(sp)
    590c:	dc400117 	ldw	r17,4(sp)
    5910:	dc000017 	ldw	r16,0(sp)
    5914:	dec00704 	addi	sp,sp,28
    5918:	f800283a 	ret
    591c:	84000284 	addi	r16,r16,10
    5920:	1827883a 	mov	r19,r3
    5924:	003fe906 	br	58cc <__alt_mem_Flash_flash_data+0xf40058cc>

00005928 <__hi0bits>:
    5928:	20bfffec 	andhi	r2,r4,65535
    592c:	1000141e 	bne	r2,zero,5980 <__hi0bits+0x58>
    5930:	2008943a 	slli	r4,r4,16
    5934:	00800404 	movi	r2,16
    5938:	20ffc02c 	andhi	r3,r4,65280
    593c:	1800021e 	bne	r3,zero,5948 <__hi0bits+0x20>
    5940:	2008923a 	slli	r4,r4,8
    5944:	10800204 	addi	r2,r2,8
    5948:	20fc002c 	andhi	r3,r4,61440
    594c:	1800021e 	bne	r3,zero,5958 <__hi0bits+0x30>
    5950:	2008913a 	slli	r4,r4,4
    5954:	10800104 	addi	r2,r2,4
    5958:	20f0002c 	andhi	r3,r4,49152
    595c:	1800031e 	bne	r3,zero,596c <__hi0bits+0x44>
    5960:	2109883a 	add	r4,r4,r4
    5964:	10800084 	addi	r2,r2,2
    5968:	2109883a 	add	r4,r4,r4
    596c:	20000316 	blt	r4,zero,597c <__hi0bits+0x54>
    5970:	2110002c 	andhi	r4,r4,16384
    5974:	2000041e 	bne	r4,zero,5988 <__hi0bits+0x60>
    5978:	00800804 	movi	r2,32
    597c:	f800283a 	ret
    5980:	0005883a 	mov	r2,zero
    5984:	003fec06 	br	5938 <__alt_mem_Flash_flash_data+0xf4005938>
    5988:	10800044 	addi	r2,r2,1
    598c:	f800283a 	ret

00005990 <__lo0bits>:
    5990:	20c00017 	ldw	r3,0(r4)
    5994:	188001cc 	andi	r2,r3,7
    5998:	10000826 	beq	r2,zero,59bc <__lo0bits+0x2c>
    599c:	1880004c 	andi	r2,r3,1
    59a0:	1000211e 	bne	r2,zero,5a28 <__lo0bits+0x98>
    59a4:	1880008c 	andi	r2,r3,2
    59a8:	1000211e 	bne	r2,zero,5a30 <__lo0bits+0xa0>
    59ac:	1806d0ba 	srli	r3,r3,2
    59b0:	00800084 	movi	r2,2
    59b4:	20c00015 	stw	r3,0(r4)
    59b8:	f800283a 	ret
    59bc:	18bfffcc 	andi	r2,r3,65535
    59c0:	10001326 	beq	r2,zero,5a10 <__lo0bits+0x80>
    59c4:	0005883a 	mov	r2,zero
    59c8:	19403fcc 	andi	r5,r3,255
    59cc:	2800021e 	bne	r5,zero,59d8 <__lo0bits+0x48>
    59d0:	1806d23a 	srli	r3,r3,8
    59d4:	10800204 	addi	r2,r2,8
    59d8:	194003cc 	andi	r5,r3,15
    59dc:	2800021e 	bne	r5,zero,59e8 <__lo0bits+0x58>
    59e0:	1806d13a 	srli	r3,r3,4
    59e4:	10800104 	addi	r2,r2,4
    59e8:	194000cc 	andi	r5,r3,3
    59ec:	2800021e 	bne	r5,zero,59f8 <__lo0bits+0x68>
    59f0:	1806d0ba 	srli	r3,r3,2
    59f4:	10800084 	addi	r2,r2,2
    59f8:	1940004c 	andi	r5,r3,1
    59fc:	2800081e 	bne	r5,zero,5a20 <__lo0bits+0x90>
    5a00:	1806d07a 	srli	r3,r3,1
    5a04:	1800051e 	bne	r3,zero,5a1c <__lo0bits+0x8c>
    5a08:	00800804 	movi	r2,32
    5a0c:	f800283a 	ret
    5a10:	1806d43a 	srli	r3,r3,16
    5a14:	00800404 	movi	r2,16
    5a18:	003feb06 	br	59c8 <__alt_mem_Flash_flash_data+0xf40059c8>
    5a1c:	10800044 	addi	r2,r2,1
    5a20:	20c00015 	stw	r3,0(r4)
    5a24:	f800283a 	ret
    5a28:	0005883a 	mov	r2,zero
    5a2c:	f800283a 	ret
    5a30:	1806d07a 	srli	r3,r3,1
    5a34:	00800044 	movi	r2,1
    5a38:	20c00015 	stw	r3,0(r4)
    5a3c:	f800283a 	ret

00005a40 <__i2b>:
    5a40:	defffd04 	addi	sp,sp,-12
    5a44:	dc000015 	stw	r16,0(sp)
    5a48:	04000044 	movi	r16,1
    5a4c:	dc400115 	stw	r17,4(sp)
    5a50:	2823883a 	mov	r17,r5
    5a54:	800b883a 	mov	r5,r16
    5a58:	dfc00215 	stw	ra,8(sp)
    5a5c:	00056340 	call	5634 <_Balloc>
    5a60:	14400515 	stw	r17,20(r2)
    5a64:	14000415 	stw	r16,16(r2)
    5a68:	dfc00217 	ldw	ra,8(sp)
    5a6c:	dc400117 	ldw	r17,4(sp)
    5a70:	dc000017 	ldw	r16,0(sp)
    5a74:	dec00304 	addi	sp,sp,12
    5a78:	f800283a 	ret

00005a7c <__multiply>:
    5a7c:	defffa04 	addi	sp,sp,-24
    5a80:	dcc00315 	stw	r19,12(sp)
    5a84:	dc800215 	stw	r18,8(sp)
    5a88:	2cc00417 	ldw	r19,16(r5)
    5a8c:	34800417 	ldw	r18,16(r6)
    5a90:	dd000415 	stw	r20,16(sp)
    5a94:	dc400115 	stw	r17,4(sp)
    5a98:	dfc00515 	stw	ra,20(sp)
    5a9c:	dc000015 	stw	r16,0(sp)
    5aa0:	2829883a 	mov	r20,r5
    5aa4:	3023883a 	mov	r17,r6
    5aa8:	9c807016 	blt	r19,r18,5c6c <__multiply+0x1f0>
    5aac:	9005883a 	mov	r2,r18
    5ab0:	9825883a 	mov	r18,r19
    5ab4:	1027883a 	mov	r19,r2
    5ab8:	a0800217 	ldw	r2,8(r20)
    5abc:	94e1883a 	add	r16,r18,r19
    5ac0:	a1400117 	ldw	r5,4(r20)
    5ac4:	1400010e 	bge	r2,r16,5acc <__multiply+0x50>
    5ac8:	29400044 	addi	r5,r5,1
    5acc:	00056340 	call	5634 <_Balloc>
    5ad0:	8417883a 	add	r11,r16,r16
    5ad4:	13000504 	addi	r12,r2,20
    5ad8:	5ad7883a 	add	r11,r11,r11
    5adc:	62d7883a 	add	r11,r12,r11
    5ae0:	6007883a 	mov	r3,r12
    5ae4:	62c0032e 	bgeu	r12,r11,5af4 <__multiply+0x78>
    5ae8:	18000015 	stw	zero,0(r3)
    5aec:	18c00104 	addi	r3,r3,4
    5af0:	1afffd36 	bltu	r3,r11,5ae8 <__alt_mem_Flash_flash_data+0xf4005ae8>
    5af4:	9ce7883a 	add	r19,r19,r19
    5af8:	94a5883a 	add	r18,r18,r18
    5afc:	89800504 	addi	r6,r17,20
    5b00:	9ce7883a 	add	r19,r19,r19
    5b04:	a3800504 	addi	r14,r20,20
    5b08:	94a5883a 	add	r18,r18,r18
    5b0c:	34db883a 	add	r13,r6,r19
    5b10:	7495883a 	add	r10,r14,r18
    5b14:	3340422e 	bgeu	r6,r13,5c20 <__multiply+0x1a4>
    5b18:	34400017 	ldw	r17,0(r6)
    5b1c:	8cbfffcc 	andi	r18,r17,65535
    5b20:	90001b26 	beq	r18,zero,5b90 <__multiply+0x114>
    5b24:	6013883a 	mov	r9,r12
    5b28:	7023883a 	mov	r17,r14
    5b2c:	0011883a 	mov	r8,zero
    5b30:	88c00017 	ldw	r3,0(r17)
    5b34:	4bc00017 	ldw	r15,0(r9)
    5b38:	8c400104 	addi	r17,r17,4
    5b3c:	19ffffcc 	andi	r7,r3,65535
    5b40:	3c8f383a 	mul	r7,r7,r18
    5b44:	1808d43a 	srli	r4,r3,16
    5b48:	797fffcc 	andi	r5,r15,65535
    5b4c:	29cb883a 	add	r5,r5,r7
    5b50:	2a0b883a 	add	r5,r5,r8
    5b54:	2489383a 	mul	r4,r4,r18
    5b58:	7806d43a 	srli	r3,r15,16
    5b5c:	2810d43a 	srli	r8,r5,16
    5b60:	297fffcc 	andi	r5,r5,65535
    5b64:	1907883a 	add	r3,r3,r4
    5b68:	1a07883a 	add	r3,r3,r8
    5b6c:	1808943a 	slli	r4,r3,16
    5b70:	480f883a 	mov	r7,r9
    5b74:	1810d43a 	srli	r8,r3,16
    5b78:	214ab03a 	or	r5,r4,r5
    5b7c:	49400015 	stw	r5,0(r9)
    5b80:	4a400104 	addi	r9,r9,4
    5b84:	8abfea36 	bltu	r17,r10,5b30 <__alt_mem_Flash_flash_data+0xf4005b30>
    5b88:	3a000115 	stw	r8,4(r7)
    5b8c:	34400017 	ldw	r17,0(r6)
    5b90:	8822d43a 	srli	r17,r17,16
    5b94:	88001f26 	beq	r17,zero,5c14 <__multiply+0x198>
    5b98:	60c00017 	ldw	r3,0(r12)
    5b9c:	7013883a 	mov	r9,r14
    5ba0:	601f883a 	mov	r15,r12
    5ba4:	1811883a 	mov	r8,r3
    5ba8:	6027883a 	mov	r19,r12
    5bac:	000f883a 	mov	r7,zero
    5bb0:	00000106 	br	5bb8 <__multiply+0x13c>
    5bb4:	9027883a 	mov	r19,r18
    5bb8:	4940000b 	ldhu	r5,0(r9)
    5bbc:	4010d43a 	srli	r8,r8,16
    5bc0:	193fffcc 	andi	r4,r3,65535
    5bc4:	2c4b383a 	mul	r5,r5,r17
    5bc8:	7bc00104 	addi	r15,r15,4
    5bcc:	4a400104 	addi	r9,r9,4
    5bd0:	2a0b883a 	add	r5,r5,r8
    5bd4:	29cb883a 	add	r5,r5,r7
    5bd8:	2806943a 	slli	r3,r5,16
    5bdc:	9c800104 	addi	r18,r19,4
    5be0:	280ad43a 	srli	r5,r5,16
    5be4:	1908b03a 	or	r4,r3,r4
    5be8:	793fff15 	stw	r4,-4(r15)
    5bec:	48ffff17 	ldw	r3,-4(r9)
    5bf0:	92000017 	ldw	r8,0(r18)
    5bf4:	1806d43a 	srli	r3,r3,16
    5bf8:	413fffcc 	andi	r4,r8,65535
    5bfc:	1c47383a 	mul	r3,r3,r17
    5c00:	1907883a 	add	r3,r3,r4
    5c04:	1947883a 	add	r3,r3,r5
    5c08:	180ed43a 	srli	r7,r3,16
    5c0c:	4abfe936 	bltu	r9,r10,5bb4 <__alt_mem_Flash_flash_data+0xf4005bb4>
    5c10:	98c00115 	stw	r3,4(r19)
    5c14:	31800104 	addi	r6,r6,4
    5c18:	63000104 	addi	r12,r12,4
    5c1c:	337fbe36 	bltu	r6,r13,5b18 <__alt_mem_Flash_flash_data+0xf4005b18>
    5c20:	0400090e 	bge	zero,r16,5c48 <__multiply+0x1cc>
    5c24:	58ffff17 	ldw	r3,-4(r11)
    5c28:	5affff04 	addi	r11,r11,-4
    5c2c:	18000326 	beq	r3,zero,5c3c <__multiply+0x1c0>
    5c30:	00000506 	br	5c48 <__multiply+0x1cc>
    5c34:	58c00017 	ldw	r3,0(r11)
    5c38:	1800031e 	bne	r3,zero,5c48 <__multiply+0x1cc>
    5c3c:	843fffc4 	addi	r16,r16,-1
    5c40:	5affff04 	addi	r11,r11,-4
    5c44:	803ffb1e 	bne	r16,zero,5c34 <__alt_mem_Flash_flash_data+0xf4005c34>
    5c48:	14000415 	stw	r16,16(r2)
    5c4c:	dfc00517 	ldw	ra,20(sp)
    5c50:	dd000417 	ldw	r20,16(sp)
    5c54:	dcc00317 	ldw	r19,12(sp)
    5c58:	dc800217 	ldw	r18,8(sp)
    5c5c:	dc400117 	ldw	r17,4(sp)
    5c60:	dc000017 	ldw	r16,0(sp)
    5c64:	dec00604 	addi	sp,sp,24
    5c68:	f800283a 	ret
    5c6c:	3029883a 	mov	r20,r6
    5c70:	2823883a 	mov	r17,r5
    5c74:	003f9006 	br	5ab8 <__alt_mem_Flash_flash_data+0xf4005ab8>

00005c78 <__pow5mult>:
    5c78:	defffa04 	addi	sp,sp,-24
    5c7c:	dcc00315 	stw	r19,12(sp)
    5c80:	dc800215 	stw	r18,8(sp)
    5c84:	dc000015 	stw	r16,0(sp)
    5c88:	dfc00515 	stw	ra,20(sp)
    5c8c:	dd000415 	stw	r20,16(sp)
    5c90:	dc400115 	stw	r17,4(sp)
    5c94:	308000cc 	andi	r2,r6,3
    5c98:	3021883a 	mov	r16,r6
    5c9c:	2027883a 	mov	r19,r4
    5ca0:	2825883a 	mov	r18,r5
    5ca4:	10002e1e 	bne	r2,zero,5d60 <__pow5mult+0xe8>
    5ca8:	8021d0ba 	srai	r16,r16,2
    5cac:	80001a26 	beq	r16,zero,5d18 <__pow5mult+0xa0>
    5cb0:	9c401217 	ldw	r17,72(r19)
    5cb4:	8800061e 	bne	r17,zero,5cd0 <__pow5mult+0x58>
    5cb8:	00003406 	br	5d8c <__pow5mult+0x114>
    5cbc:	8021d07a 	srai	r16,r16,1
    5cc0:	80001526 	beq	r16,zero,5d18 <__pow5mult+0xa0>
    5cc4:	88800017 	ldw	r2,0(r17)
    5cc8:	10001c26 	beq	r2,zero,5d3c <__pow5mult+0xc4>
    5ccc:	1023883a 	mov	r17,r2
    5cd0:	80c0004c 	andi	r3,r16,1
    5cd4:	183ff926 	beq	r3,zero,5cbc <__alt_mem_Flash_flash_data+0xf4005cbc>
    5cd8:	900b883a 	mov	r5,r18
    5cdc:	880d883a 	mov	r6,r17
    5ce0:	9809883a 	mov	r4,r19
    5ce4:	0005a7c0 	call	5a7c <__multiply>
    5ce8:	90001b26 	beq	r18,zero,5d58 <__pow5mult+0xe0>
    5cec:	91c00117 	ldw	r7,4(r18)
    5cf0:	98c01317 	ldw	r3,76(r19)
    5cf4:	8021d07a 	srai	r16,r16,1
    5cf8:	39cf883a 	add	r7,r7,r7
    5cfc:	39cf883a 	add	r7,r7,r7
    5d00:	19c7883a 	add	r3,r3,r7
    5d04:	19000017 	ldw	r4,0(r3)
    5d08:	91000015 	stw	r4,0(r18)
    5d0c:	1c800015 	stw	r18,0(r3)
    5d10:	1025883a 	mov	r18,r2
    5d14:	803feb1e 	bne	r16,zero,5cc4 <__alt_mem_Flash_flash_data+0xf4005cc4>
    5d18:	9005883a 	mov	r2,r18
    5d1c:	dfc00517 	ldw	ra,20(sp)
    5d20:	dd000417 	ldw	r20,16(sp)
    5d24:	dcc00317 	ldw	r19,12(sp)
    5d28:	dc800217 	ldw	r18,8(sp)
    5d2c:	dc400117 	ldw	r17,4(sp)
    5d30:	dc000017 	ldw	r16,0(sp)
    5d34:	dec00604 	addi	sp,sp,24
    5d38:	f800283a 	ret
    5d3c:	9809883a 	mov	r4,r19
    5d40:	880b883a 	mov	r5,r17
    5d44:	880d883a 	mov	r6,r17
    5d48:	0005a7c0 	call	5a7c <__multiply>
    5d4c:	88800015 	stw	r2,0(r17)
    5d50:	10000015 	stw	zero,0(r2)
    5d54:	003fdd06 	br	5ccc <__alt_mem_Flash_flash_data+0xf4005ccc>
    5d58:	1025883a 	mov	r18,r2
    5d5c:	003fd706 	br	5cbc <__alt_mem_Flash_flash_data+0xf4005cbc>
    5d60:	10bfffc4 	addi	r2,r2,-1
    5d64:	1085883a 	add	r2,r2,r2
    5d68:	00c000b4 	movhi	r3,2
    5d6c:	18e38f04 	addi	r3,r3,-29124
    5d70:	1085883a 	add	r2,r2,r2
    5d74:	1885883a 	add	r2,r3,r2
    5d78:	11800017 	ldw	r6,0(r2)
    5d7c:	000f883a 	mov	r7,zero
    5d80:	00057040 	call	5704 <__multadd>
    5d84:	1025883a 	mov	r18,r2
    5d88:	003fc706 	br	5ca8 <__alt_mem_Flash_flash_data+0xf4005ca8>
    5d8c:	05000044 	movi	r20,1
    5d90:	9809883a 	mov	r4,r19
    5d94:	a00b883a 	mov	r5,r20
    5d98:	00056340 	call	5634 <_Balloc>
    5d9c:	1023883a 	mov	r17,r2
    5da0:	00809c44 	movi	r2,625
    5da4:	88800515 	stw	r2,20(r17)
    5da8:	8d000415 	stw	r20,16(r17)
    5dac:	9c401215 	stw	r17,72(r19)
    5db0:	88000015 	stw	zero,0(r17)
    5db4:	003fc606 	br	5cd0 <__alt_mem_Flash_flash_data+0xf4005cd0>

00005db8 <__lshift>:
    5db8:	defff904 	addi	sp,sp,-28
    5dbc:	dd000415 	stw	r20,16(sp)
    5dc0:	dcc00315 	stw	r19,12(sp)
    5dc4:	3029d17a 	srai	r20,r6,5
    5dc8:	2cc00417 	ldw	r19,16(r5)
    5dcc:	28800217 	ldw	r2,8(r5)
    5dd0:	dd400515 	stw	r21,20(sp)
    5dd4:	a4e7883a 	add	r19,r20,r19
    5dd8:	dc800215 	stw	r18,8(sp)
    5ddc:	dc400115 	stw	r17,4(sp)
    5de0:	dc000015 	stw	r16,0(sp)
    5de4:	dfc00615 	stw	ra,24(sp)
    5de8:	9c000044 	addi	r16,r19,1
    5dec:	2823883a 	mov	r17,r5
    5df0:	302b883a 	mov	r21,r6
    5df4:	2025883a 	mov	r18,r4
    5df8:	29400117 	ldw	r5,4(r5)
    5dfc:	1400030e 	bge	r2,r16,5e0c <__lshift+0x54>
    5e00:	1085883a 	add	r2,r2,r2
    5e04:	29400044 	addi	r5,r5,1
    5e08:	143ffd16 	blt	r2,r16,5e00 <__alt_mem_Flash_flash_data+0xf4005e00>
    5e0c:	9009883a 	mov	r4,r18
    5e10:	00056340 	call	5634 <_Balloc>
    5e14:	11c00504 	addi	r7,r2,20
    5e18:	0500090e 	bge	zero,r20,5e40 <__lshift+0x88>
    5e1c:	3811883a 	mov	r8,r7
    5e20:	0007883a 	mov	r3,zero
    5e24:	40000015 	stw	zero,0(r8)
    5e28:	18c00044 	addi	r3,r3,1
    5e2c:	42000104 	addi	r8,r8,4
    5e30:	1d3ffc1e 	bne	r3,r20,5e24 <__alt_mem_Flash_flash_data+0xf4005e24>
    5e34:	18c7883a 	add	r3,r3,r3
    5e38:	18c7883a 	add	r3,r3,r3
    5e3c:	38cf883a 	add	r7,r7,r3
    5e40:	89000417 	ldw	r4,16(r17)
    5e44:	88c00504 	addi	r3,r17,20
    5e48:	a98007cc 	andi	r6,r21,31
    5e4c:	2109883a 	add	r4,r4,r4
    5e50:	2109883a 	add	r4,r4,r4
    5e54:	1909883a 	add	r4,r3,r4
    5e58:	30002326 	beq	r6,zero,5ee8 <__lshift+0x130>
    5e5c:	01400804 	movi	r5,32
    5e60:	298bc83a 	sub	r5,r5,r6
    5e64:	0013883a 	mov	r9,zero
    5e68:	1a000017 	ldw	r8,0(r3)
    5e6c:	3815883a 	mov	r10,r7
    5e70:	39c00104 	addi	r7,r7,4
    5e74:	4190983a 	sll	r8,r8,r6
    5e78:	18c00104 	addi	r3,r3,4
    5e7c:	4a10b03a 	or	r8,r9,r8
    5e80:	3a3fff15 	stw	r8,-4(r7)
    5e84:	1a3fff17 	ldw	r8,-4(r3)
    5e88:	4152d83a 	srl	r9,r8,r5
    5e8c:	193ff636 	bltu	r3,r4,5e68 <__alt_mem_Flash_flash_data+0xf4005e68>
    5e90:	52400115 	stw	r9,4(r10)
    5e94:	48001a1e 	bne	r9,zero,5f00 <__lshift+0x148>
    5e98:	843fffc4 	addi	r16,r16,-1
    5e9c:	14000415 	stw	r16,16(r2)
    5ea0:	88000826 	beq	r17,zero,5ec4 <__lshift+0x10c>
    5ea4:	89000117 	ldw	r4,4(r17)
    5ea8:	90c01317 	ldw	r3,76(r18)
    5eac:	2109883a 	add	r4,r4,r4
    5eb0:	2109883a 	add	r4,r4,r4
    5eb4:	1907883a 	add	r3,r3,r4
    5eb8:	19000017 	ldw	r4,0(r3)
    5ebc:	89000015 	stw	r4,0(r17)
    5ec0:	1c400015 	stw	r17,0(r3)
    5ec4:	dfc00617 	ldw	ra,24(sp)
    5ec8:	dd400517 	ldw	r21,20(sp)
    5ecc:	dd000417 	ldw	r20,16(sp)
    5ed0:	dcc00317 	ldw	r19,12(sp)
    5ed4:	dc800217 	ldw	r18,8(sp)
    5ed8:	dc400117 	ldw	r17,4(sp)
    5edc:	dc000017 	ldw	r16,0(sp)
    5ee0:	dec00704 	addi	sp,sp,28
    5ee4:	f800283a 	ret
    5ee8:	19400017 	ldw	r5,0(r3)
    5eec:	39c00104 	addi	r7,r7,4
    5ef0:	18c00104 	addi	r3,r3,4
    5ef4:	397fff15 	stw	r5,-4(r7)
    5ef8:	193ffb36 	bltu	r3,r4,5ee8 <__alt_mem_Flash_flash_data+0xf4005ee8>
    5efc:	003fe606 	br	5e98 <__alt_mem_Flash_flash_data+0xf4005e98>
    5f00:	9c000084 	addi	r16,r19,2
    5f04:	003fe406 	br	5e98 <__alt_mem_Flash_flash_data+0xf4005e98>

00005f08 <__mcmp>:
    5f08:	20800417 	ldw	r2,16(r4)
    5f0c:	28c00417 	ldw	r3,16(r5)
    5f10:	10c5c83a 	sub	r2,r2,r3
    5f14:	1000111e 	bne	r2,zero,5f5c <__mcmp+0x54>
    5f18:	18c7883a 	add	r3,r3,r3
    5f1c:	18c7883a 	add	r3,r3,r3
    5f20:	21000504 	addi	r4,r4,20
    5f24:	29400504 	addi	r5,r5,20
    5f28:	20c5883a 	add	r2,r4,r3
    5f2c:	28cb883a 	add	r5,r5,r3
    5f30:	00000106 	br	5f38 <__mcmp+0x30>
    5f34:	20800a2e 	bgeu	r4,r2,5f60 <__mcmp+0x58>
    5f38:	10bfff04 	addi	r2,r2,-4
    5f3c:	297fff04 	addi	r5,r5,-4
    5f40:	11800017 	ldw	r6,0(r2)
    5f44:	28c00017 	ldw	r3,0(r5)
    5f48:	30fffa26 	beq	r6,r3,5f34 <__alt_mem_Flash_flash_data+0xf4005f34>
    5f4c:	30c00236 	bltu	r6,r3,5f58 <__mcmp+0x50>
    5f50:	00800044 	movi	r2,1
    5f54:	f800283a 	ret
    5f58:	00bfffc4 	movi	r2,-1
    5f5c:	f800283a 	ret
    5f60:	0005883a 	mov	r2,zero
    5f64:	f800283a 	ret

00005f68 <__mdiff>:
    5f68:	defffb04 	addi	sp,sp,-20
    5f6c:	dc000015 	stw	r16,0(sp)
    5f70:	2821883a 	mov	r16,r5
    5f74:	dcc00315 	stw	r19,12(sp)
    5f78:	300b883a 	mov	r5,r6
    5f7c:	2027883a 	mov	r19,r4
    5f80:	8009883a 	mov	r4,r16
    5f84:	dc800215 	stw	r18,8(sp)
    5f88:	dfc00415 	stw	ra,16(sp)
    5f8c:	dc400115 	stw	r17,4(sp)
    5f90:	3025883a 	mov	r18,r6
    5f94:	0005f080 	call	5f08 <__mcmp>
    5f98:	10005226 	beq	r2,zero,60e4 <__mdiff+0x17c>
    5f9c:	10004c16 	blt	r2,zero,60d0 <__mdiff+0x168>
    5fa0:	0023883a 	mov	r17,zero
    5fa4:	81400117 	ldw	r5,4(r16)
    5fa8:	9809883a 	mov	r4,r19
    5fac:	00056340 	call	5634 <_Balloc>
    5fb0:	83400417 	ldw	r13,16(r16)
    5fb4:	93800417 	ldw	r14,16(r18)
    5fb8:	81000504 	addi	r4,r16,20
    5fbc:	6b59883a 	add	r12,r13,r13
    5fc0:	739d883a 	add	r14,r14,r14
    5fc4:	6319883a 	add	r12,r12,r12
    5fc8:	91800504 	addi	r6,r18,20
    5fcc:	739d883a 	add	r14,r14,r14
    5fd0:	14400315 	stw	r17,12(r2)
    5fd4:	2319883a 	add	r12,r4,r12
    5fd8:	339d883a 	add	r14,r6,r14
    5fdc:	12400504 	addi	r9,r2,20
    5fe0:	0007883a 	mov	r3,zero
    5fe4:	22000017 	ldw	r8,0(r4)
    5fe8:	32800017 	ldw	r10,0(r6)
    5fec:	4ac00104 	addi	r11,r9,4
    5ff0:	41ffffcc 	andi	r7,r8,65535
    5ff4:	38c7883a 	add	r3,r7,r3
    5ff8:	51ffffcc 	andi	r7,r10,65535
    5ffc:	19cfc83a 	sub	r7,r3,r7
    6000:	4010d43a 	srli	r8,r8,16
    6004:	5014d43a 	srli	r10,r10,16
    6008:	3807d43a 	srai	r3,r7,16
    600c:	39ffffcc 	andi	r7,r7,65535
    6010:	4291c83a 	sub	r8,r8,r10
    6014:	40c7883a 	add	r3,r8,r3
    6018:	1810943a 	slli	r8,r3,16
    601c:	31800104 	addi	r6,r6,4
    6020:	21000104 	addi	r4,r4,4
    6024:	41ceb03a 	or	r7,r8,r7
    6028:	49c00015 	stw	r7,0(r9)
    602c:	1807d43a 	srai	r3,r3,16
    6030:	580b883a 	mov	r5,r11
    6034:	5813883a 	mov	r9,r11
    6038:	33bfea36 	bltu	r6,r14,5fe4 <__alt_mem_Flash_flash_data+0xf4005fe4>
    603c:	2011883a 	mov	r8,r4
    6040:	2300152e 	bgeu	r4,r12,6098 <__mdiff+0x130>
    6044:	21400017 	ldw	r5,0(r4)
    6048:	4a400104 	addi	r9,r9,4
    604c:	21000104 	addi	r4,r4,4
    6050:	29ffffcc 	andi	r7,r5,65535
    6054:	38c7883a 	add	r3,r7,r3
    6058:	280ad43a 	srli	r5,r5,16
    605c:	180dd43a 	srai	r6,r3,16
    6060:	19ffffcc 	andi	r7,r3,65535
    6064:	3147883a 	add	r3,r6,r5
    6068:	180a943a 	slli	r5,r3,16
    606c:	1807d43a 	srai	r3,r3,16
    6070:	29ceb03a 	or	r7,r5,r7
    6074:	49ffff15 	stw	r7,-4(r9)
    6078:	233ff236 	bltu	r4,r12,6044 <__alt_mem_Flash_flash_data+0xf4006044>
    607c:	0206303a 	nor	r3,zero,r8
    6080:	1b07883a 	add	r3,r3,r12
    6084:	1806d0ba 	srli	r3,r3,2
    6088:	18c00044 	addi	r3,r3,1
    608c:	18c7883a 	add	r3,r3,r3
    6090:	18c7883a 	add	r3,r3,r3
    6094:	58cb883a 	add	r5,r11,r3
    6098:	28ffff04 	addi	r3,r5,-4
    609c:	3800041e 	bne	r7,zero,60b0 <__mdiff+0x148>
    60a0:	18ffff04 	addi	r3,r3,-4
    60a4:	19000017 	ldw	r4,0(r3)
    60a8:	6b7fffc4 	addi	r13,r13,-1
    60ac:	203ffc26 	beq	r4,zero,60a0 <__alt_mem_Flash_flash_data+0xf40060a0>
    60b0:	13400415 	stw	r13,16(r2)
    60b4:	dfc00417 	ldw	ra,16(sp)
    60b8:	dcc00317 	ldw	r19,12(sp)
    60bc:	dc800217 	ldw	r18,8(sp)
    60c0:	dc400117 	ldw	r17,4(sp)
    60c4:	dc000017 	ldw	r16,0(sp)
    60c8:	dec00504 	addi	sp,sp,20
    60cc:	f800283a 	ret
    60d0:	8005883a 	mov	r2,r16
    60d4:	04400044 	movi	r17,1
    60d8:	9021883a 	mov	r16,r18
    60dc:	1025883a 	mov	r18,r2
    60e0:	003fb006 	br	5fa4 <__alt_mem_Flash_flash_data+0xf4005fa4>
    60e4:	9809883a 	mov	r4,r19
    60e8:	000b883a 	mov	r5,zero
    60ec:	00056340 	call	5634 <_Balloc>
    60f0:	00c00044 	movi	r3,1
    60f4:	10c00415 	stw	r3,16(r2)
    60f8:	10000515 	stw	zero,20(r2)
    60fc:	003fed06 	br	60b4 <__alt_mem_Flash_flash_data+0xf40060b4>

00006100 <__ulp>:
    6100:	295ffc2c 	andhi	r5,r5,32752
    6104:	00bf3034 	movhi	r2,64704
    6108:	2887883a 	add	r3,r5,r2
    610c:	00c0020e 	bge	zero,r3,6118 <__ulp+0x18>
    6110:	0005883a 	mov	r2,zero
    6114:	f800283a 	ret
    6118:	00c7c83a 	sub	r3,zero,r3
    611c:	180bd53a 	srai	r5,r3,20
    6120:	008004c4 	movi	r2,19
    6124:	11400a0e 	bge	r2,r5,6150 <__ulp+0x50>
    6128:	00800c84 	movi	r2,50
    612c:	0007883a 	mov	r3,zero
    6130:	11400516 	blt	r2,r5,6148 <__ulp+0x48>
    6134:	00800cc4 	movi	r2,51
    6138:	114bc83a 	sub	r5,r2,r5
    613c:	00800044 	movi	r2,1
    6140:	1144983a 	sll	r2,r2,r5
    6144:	f800283a 	ret
    6148:	00800044 	movi	r2,1
    614c:	f800283a 	ret
    6150:	00800234 	movhi	r2,8
    6154:	1147d83a 	sra	r3,r2,r5
    6158:	0005883a 	mov	r2,zero
    615c:	f800283a 	ret

00006160 <__b2d>:
    6160:	defffa04 	addi	sp,sp,-24
    6164:	dc000015 	stw	r16,0(sp)
    6168:	24000417 	ldw	r16,16(r4)
    616c:	dc400115 	stw	r17,4(sp)
    6170:	24400504 	addi	r17,r4,20
    6174:	8421883a 	add	r16,r16,r16
    6178:	8421883a 	add	r16,r16,r16
    617c:	8c21883a 	add	r16,r17,r16
    6180:	dc800215 	stw	r18,8(sp)
    6184:	84bfff17 	ldw	r18,-4(r16)
    6188:	dd000415 	stw	r20,16(sp)
    618c:	dcc00315 	stw	r19,12(sp)
    6190:	9009883a 	mov	r4,r18
    6194:	2829883a 	mov	r20,r5
    6198:	dfc00515 	stw	ra,20(sp)
    619c:	00059280 	call	5928 <__hi0bits>
    61a0:	00c00804 	movi	r3,32
    61a4:	1887c83a 	sub	r3,r3,r2
    61a8:	a0c00015 	stw	r3,0(r20)
    61ac:	00c00284 	movi	r3,10
    61b0:	84ffff04 	addi	r19,r16,-4
    61b4:	18801216 	blt	r3,r2,6200 <__b2d+0xa0>
    61b8:	014002c4 	movi	r5,11
    61bc:	2889c83a 	sub	r4,r5,r2
    61c0:	9106d83a 	srl	r3,r18,r4
    61c4:	18cffc34 	orhi	r3,r3,16368
    61c8:	8cc0282e 	bgeu	r17,r19,626c <__b2d+0x10c>
    61cc:	817ffe17 	ldw	r5,-8(r16)
    61d0:	290ad83a 	srl	r5,r5,r4
    61d4:	10800544 	addi	r2,r2,21
    61d8:	9084983a 	sll	r2,r18,r2
    61dc:	2884b03a 	or	r2,r5,r2
    61e0:	dfc00517 	ldw	ra,20(sp)
    61e4:	dd000417 	ldw	r20,16(sp)
    61e8:	dcc00317 	ldw	r19,12(sp)
    61ec:	dc800217 	ldw	r18,8(sp)
    61f0:	dc400117 	ldw	r17,4(sp)
    61f4:	dc000017 	ldw	r16,0(sp)
    61f8:	dec00604 	addi	sp,sp,24
    61fc:	f800283a 	ret
    6200:	113ffd44 	addi	r4,r2,-11
    6204:	8cc00f2e 	bgeu	r17,r19,6244 <__b2d+0xe4>
    6208:	81bffe04 	addi	r6,r16,-8
    620c:	817ffe17 	ldw	r5,-8(r16)
    6210:	20001326 	beq	r4,zero,6260 <__b2d+0x100>
    6214:	00c00ac4 	movi	r3,43
    6218:	1885c83a 	sub	r2,r3,r2
    621c:	2886d83a 	srl	r3,r5,r2
    6220:	9124983a 	sll	r18,r18,r4
    6224:	90e4b03a 	or	r18,r18,r3
    6228:	90cffc34 	orhi	r3,r18,16368
    622c:	8980112e 	bgeu	r17,r6,6274 <__b2d+0x114>
    6230:	81bffd17 	ldw	r6,-12(r16)
    6234:	308cd83a 	srl	r6,r6,r2
    6238:	2904983a 	sll	r2,r5,r4
    623c:	1184b03a 	or	r2,r2,r6
    6240:	003fe706 	br	61e0 <__alt_mem_Flash_flash_data+0xf40061e0>
    6244:	20000526 	beq	r4,zero,625c <__b2d+0xfc>
    6248:	9124983a 	sll	r18,r18,r4
    624c:	000d883a 	mov	r6,zero
    6250:	000b883a 	mov	r5,zero
    6254:	90cffc34 	orhi	r3,r18,16368
    6258:	003ff706 	br	6238 <__alt_mem_Flash_flash_data+0xf4006238>
    625c:	000b883a 	mov	r5,zero
    6260:	90cffc34 	orhi	r3,r18,16368
    6264:	2805883a 	mov	r2,r5
    6268:	003fdd06 	br	61e0 <__alt_mem_Flash_flash_data+0xf40061e0>
    626c:	000b883a 	mov	r5,zero
    6270:	003fd806 	br	61d4 <__alt_mem_Flash_flash_data+0xf40061d4>
    6274:	000d883a 	mov	r6,zero
    6278:	003fef06 	br	6238 <__alt_mem_Flash_flash_data+0xf4006238>

0000627c <__d2b>:
    627c:	defff704 	addi	sp,sp,-36
    6280:	dc000215 	stw	r16,8(sp)
    6284:	3021883a 	mov	r16,r6
    6288:	dc400315 	stw	r17,12(sp)
    628c:	8022907a 	slli	r17,r16,1
    6290:	dd400715 	stw	r21,28(sp)
    6294:	282b883a 	mov	r21,r5
    6298:	01400044 	movi	r5,1
    629c:	dd000615 	stw	r20,24(sp)
    62a0:	dcc00515 	stw	r19,20(sp)
    62a4:	dc800415 	stw	r18,16(sp)
    62a8:	dfc00815 	stw	ra,32(sp)
    62ac:	3829883a 	mov	r20,r7
    62b0:	dc800917 	ldw	r18,36(sp)
    62b4:	8822d57a 	srli	r17,r17,21
    62b8:	00056340 	call	5634 <_Balloc>
    62bc:	1027883a 	mov	r19,r2
    62c0:	00800434 	movhi	r2,16
    62c4:	10bfffc4 	addi	r2,r2,-1
    62c8:	808c703a 	and	r6,r16,r2
    62cc:	88000126 	beq	r17,zero,62d4 <__d2b+0x58>
    62d0:	31800434 	orhi	r6,r6,16
    62d4:	d9800015 	stw	r6,0(sp)
    62d8:	a8001f26 	beq	r21,zero,6358 <__d2b+0xdc>
    62dc:	d9000104 	addi	r4,sp,4
    62e0:	dd400115 	stw	r21,4(sp)
    62e4:	00059900 	call	5990 <__lo0bits>
    62e8:	d8c00017 	ldw	r3,0(sp)
    62ec:	1000291e 	bne	r2,zero,6394 <__d2b+0x118>
    62f0:	d9000117 	ldw	r4,4(sp)
    62f4:	99000515 	stw	r4,20(r19)
    62f8:	1820c03a 	cmpne	r16,r3,zero
    62fc:	84000044 	addi	r16,r16,1
    6300:	98c00615 	stw	r3,24(r19)
    6304:	9c000415 	stw	r16,16(r19)
    6308:	88001b1e 	bne	r17,zero,6378 <__d2b+0xfc>
    630c:	800690ba 	slli	r3,r16,2
    6310:	10bef384 	addi	r2,r2,-1074
    6314:	a0800015 	stw	r2,0(r20)
    6318:	98c5883a 	add	r2,r19,r3
    631c:	11000417 	ldw	r4,16(r2)
    6320:	8020917a 	slli	r16,r16,5
    6324:	00059280 	call	5928 <__hi0bits>
    6328:	8085c83a 	sub	r2,r16,r2
    632c:	90800015 	stw	r2,0(r18)
    6330:	9805883a 	mov	r2,r19
    6334:	dfc00817 	ldw	ra,32(sp)
    6338:	dd400717 	ldw	r21,28(sp)
    633c:	dd000617 	ldw	r20,24(sp)
    6340:	dcc00517 	ldw	r19,20(sp)
    6344:	dc800417 	ldw	r18,16(sp)
    6348:	dc400317 	ldw	r17,12(sp)
    634c:	dc000217 	ldw	r16,8(sp)
    6350:	dec00904 	addi	sp,sp,36
    6354:	f800283a 	ret
    6358:	d809883a 	mov	r4,sp
    635c:	00059900 	call	5990 <__lo0bits>
    6360:	d8c00017 	ldw	r3,0(sp)
    6364:	04000044 	movi	r16,1
    6368:	9c000415 	stw	r16,16(r19)
    636c:	98c00515 	stw	r3,20(r19)
    6370:	10800804 	addi	r2,r2,32
    6374:	883fe526 	beq	r17,zero,630c <__alt_mem_Flash_flash_data+0xf400630c>
    6378:	8c7ef344 	addi	r17,r17,-1075
    637c:	88a3883a 	add	r17,r17,r2
    6380:	00c00d44 	movi	r3,53
    6384:	a4400015 	stw	r17,0(r20)
    6388:	1885c83a 	sub	r2,r3,r2
    638c:	90800015 	stw	r2,0(r18)
    6390:	003fe706 	br	6330 <__alt_mem_Flash_flash_data+0xf4006330>
    6394:	01000804 	movi	r4,32
    6398:	2089c83a 	sub	r4,r4,r2
    639c:	1908983a 	sll	r4,r3,r4
    63a0:	d9400117 	ldw	r5,4(sp)
    63a4:	1886d83a 	srl	r3,r3,r2
    63a8:	2148b03a 	or	r4,r4,r5
    63ac:	99000515 	stw	r4,20(r19)
    63b0:	d8c00015 	stw	r3,0(sp)
    63b4:	003fd006 	br	62f8 <__alt_mem_Flash_flash_data+0xf40062f8>

000063b8 <__ratio>:
    63b8:	defff904 	addi	sp,sp,-28
    63bc:	dc400315 	stw	r17,12(sp)
    63c0:	2823883a 	mov	r17,r5
    63c4:	d9400104 	addi	r5,sp,4
    63c8:	dfc00615 	stw	ra,24(sp)
    63cc:	dcc00515 	stw	r19,20(sp)
    63d0:	dc800415 	stw	r18,16(sp)
    63d4:	2027883a 	mov	r19,r4
    63d8:	dc000215 	stw	r16,8(sp)
    63dc:	00061600 	call	6160 <__b2d>
    63e0:	8809883a 	mov	r4,r17
    63e4:	d80b883a 	mov	r5,sp
    63e8:	1025883a 	mov	r18,r2
    63ec:	1821883a 	mov	r16,r3
    63f0:	00061600 	call	6160 <__b2d>
    63f4:	8a400417 	ldw	r9,16(r17)
    63f8:	9a000417 	ldw	r8,16(r19)
    63fc:	100d883a 	mov	r6,r2
    6400:	d8800017 	ldw	r2,0(sp)
    6404:	4251c83a 	sub	r8,r8,r9
    6408:	4012917a 	slli	r9,r8,5
    640c:	da000117 	ldw	r8,4(sp)
    6410:	4091c83a 	sub	r8,r8,r2
    6414:	4251883a 	add	r8,r8,r9
    6418:	02000d0e 	bge	zero,r8,6450 <__ratio+0x98>
    641c:	4010953a 	slli	r8,r8,20
    6420:	4421883a 	add	r16,r8,r16
    6424:	9009883a 	mov	r4,r18
    6428:	800b883a 	mov	r5,r16
    642c:	180f883a 	mov	r7,r3
    6430:	000a8dc0 	call	a8dc <__divdf3>
    6434:	dfc00617 	ldw	ra,24(sp)
    6438:	dcc00517 	ldw	r19,20(sp)
    643c:	dc800417 	ldw	r18,16(sp)
    6440:	dc400317 	ldw	r17,12(sp)
    6444:	dc000217 	ldw	r16,8(sp)
    6448:	dec00704 	addi	sp,sp,28
    644c:	f800283a 	ret
    6450:	4010953a 	slli	r8,r8,20
    6454:	1a07c83a 	sub	r3,r3,r8
    6458:	003ff206 	br	6424 <__alt_mem_Flash_flash_data+0xf4006424>

0000645c <_mprec_log10>:
    645c:	defffe04 	addi	sp,sp,-8
    6460:	dc000015 	stw	r16,0(sp)
    6464:	dfc00115 	stw	ra,4(sp)
    6468:	008005c4 	movi	r2,23
    646c:	2021883a 	mov	r16,r4
    6470:	11000d0e 	bge	r2,r4,64a8 <_mprec_log10+0x4c>
    6474:	0005883a 	mov	r2,zero
    6478:	00cffc34 	movhi	r3,16368
    647c:	843fffc4 	addi	r16,r16,-1
    6480:	1009883a 	mov	r4,r2
    6484:	180b883a 	mov	r5,r3
    6488:	000d883a 	mov	r6,zero
    648c:	01d00934 	movhi	r7,16420
    6490:	000b3ec0 	call	b3ec <__muldf3>
    6494:	803ff91e 	bne	r16,zero,647c <__alt_mem_Flash_flash_data+0xf400647c>
    6498:	dfc00117 	ldw	ra,4(sp)
    649c:	dc000017 	ldw	r16,0(sp)
    64a0:	dec00204 	addi	sp,sp,8
    64a4:	f800283a 	ret
    64a8:	202090fa 	slli	r16,r4,3
    64ac:	008000b4 	movhi	r2,2
    64b0:	10a3a604 	addi	r2,r2,-29032
    64b4:	1421883a 	add	r16,r2,r16
    64b8:	80800017 	ldw	r2,0(r16)
    64bc:	80c00117 	ldw	r3,4(r16)
    64c0:	dfc00117 	ldw	ra,4(sp)
    64c4:	dc000017 	ldw	r16,0(sp)
    64c8:	dec00204 	addi	sp,sp,8
    64cc:	f800283a 	ret

000064d0 <__copybits>:
    64d0:	297fffc4 	addi	r5,r5,-1
    64d4:	280fd17a 	srai	r7,r5,5
    64d8:	30c00417 	ldw	r3,16(r6)
    64dc:	30800504 	addi	r2,r6,20
    64e0:	39c00044 	addi	r7,r7,1
    64e4:	18c7883a 	add	r3,r3,r3
    64e8:	39cf883a 	add	r7,r7,r7
    64ec:	18c7883a 	add	r3,r3,r3
    64f0:	39cf883a 	add	r7,r7,r7
    64f4:	10c7883a 	add	r3,r2,r3
    64f8:	21cf883a 	add	r7,r4,r7
    64fc:	10c00d2e 	bgeu	r2,r3,6534 <__copybits+0x64>
    6500:	200b883a 	mov	r5,r4
    6504:	12000017 	ldw	r8,0(r2)
    6508:	29400104 	addi	r5,r5,4
    650c:	10800104 	addi	r2,r2,4
    6510:	2a3fff15 	stw	r8,-4(r5)
    6514:	10fffb36 	bltu	r2,r3,6504 <__alt_mem_Flash_flash_data+0xf4006504>
    6518:	1985c83a 	sub	r2,r3,r6
    651c:	10bffac4 	addi	r2,r2,-21
    6520:	1004d0ba 	srli	r2,r2,2
    6524:	10800044 	addi	r2,r2,1
    6528:	1085883a 	add	r2,r2,r2
    652c:	1085883a 	add	r2,r2,r2
    6530:	2089883a 	add	r4,r4,r2
    6534:	21c0032e 	bgeu	r4,r7,6544 <__copybits+0x74>
    6538:	20000015 	stw	zero,0(r4)
    653c:	21000104 	addi	r4,r4,4
    6540:	21fffd36 	bltu	r4,r7,6538 <__alt_mem_Flash_flash_data+0xf4006538>
    6544:	f800283a 	ret

00006548 <__any_on>:
    6548:	20c00417 	ldw	r3,16(r4)
    654c:	2805d17a 	srai	r2,r5,5
    6550:	21000504 	addi	r4,r4,20
    6554:	18800d0e 	bge	r3,r2,658c <__any_on+0x44>
    6558:	18c7883a 	add	r3,r3,r3
    655c:	18c7883a 	add	r3,r3,r3
    6560:	20c7883a 	add	r3,r4,r3
    6564:	20c0192e 	bgeu	r4,r3,65cc <__any_on+0x84>
    6568:	18bfff17 	ldw	r2,-4(r3)
    656c:	18ffff04 	addi	r3,r3,-4
    6570:	1000041e 	bne	r2,zero,6584 <__any_on+0x3c>
    6574:	20c0142e 	bgeu	r4,r3,65c8 <__any_on+0x80>
    6578:	18ffff04 	addi	r3,r3,-4
    657c:	19400017 	ldw	r5,0(r3)
    6580:	283ffc26 	beq	r5,zero,6574 <__alt_mem_Flash_flash_data+0xf4006574>
    6584:	00800044 	movi	r2,1
    6588:	f800283a 	ret
    658c:	10c00a0e 	bge	r2,r3,65b8 <__any_on+0x70>
    6590:	1085883a 	add	r2,r2,r2
    6594:	1085883a 	add	r2,r2,r2
    6598:	294007cc 	andi	r5,r5,31
    659c:	2087883a 	add	r3,r4,r2
    65a0:	283ff026 	beq	r5,zero,6564 <__alt_mem_Flash_flash_data+0xf4006564>
    65a4:	19800017 	ldw	r6,0(r3)
    65a8:	3144d83a 	srl	r2,r6,r5
    65ac:	114a983a 	sll	r5,r2,r5
    65b0:	29bff41e 	bne	r5,r6,6584 <__alt_mem_Flash_flash_data+0xf4006584>
    65b4:	003feb06 	br	6564 <__alt_mem_Flash_flash_data+0xf4006564>
    65b8:	1085883a 	add	r2,r2,r2
    65bc:	1085883a 	add	r2,r2,r2
    65c0:	2087883a 	add	r3,r4,r2
    65c4:	003fe706 	br	6564 <__alt_mem_Flash_flash_data+0xf4006564>
    65c8:	f800283a 	ret
    65cc:	0005883a 	mov	r2,zero
    65d0:	f800283a 	ret

000065d4 <_realloc_r>:
    65d4:	defff604 	addi	sp,sp,-40
    65d8:	dd000415 	stw	r20,16(sp)
    65dc:	dc400115 	stw	r17,4(sp)
    65e0:	dfc00915 	stw	ra,36(sp)
    65e4:	df000815 	stw	fp,32(sp)
    65e8:	ddc00715 	stw	r23,28(sp)
    65ec:	dd800615 	stw	r22,24(sp)
    65f0:	dd400515 	stw	r21,20(sp)
    65f4:	dcc00315 	stw	r19,12(sp)
    65f8:	dc800215 	stw	r18,8(sp)
    65fc:	dc000015 	stw	r16,0(sp)
    6600:	2829883a 	mov	r20,r5
    6604:	3023883a 	mov	r17,r6
    6608:	2800ad26 	beq	r5,zero,68c0 <_realloc_r+0x2ec>
    660c:	2025883a 	mov	r18,r4
    6610:	000d11c0 	call	d11c <__malloc_lock>
    6614:	a0ffff17 	ldw	r3,-4(r20)
    6618:	043fff04 	movi	r16,-4
    661c:	890002c4 	addi	r4,r17,11
    6620:	01c00584 	movi	r7,22
    6624:	a57ffe04 	addi	r21,r20,-8
    6628:	1c20703a 	and	r16,r3,r16
    662c:	39001d2e 	bgeu	r7,r4,66a4 <_realloc_r+0xd0>
    6630:	05bffe04 	movi	r22,-8
    6634:	25ac703a 	and	r22,r4,r22
    6638:	b00f883a 	mov	r7,r22
    663c:	b0006516 	blt	r22,zero,67d4 <_realloc_r+0x200>
    6640:	b4406436 	bltu	r22,r17,67d4 <_realloc_r+0x200>
    6644:	81c01a0e 	bge	r16,r7,66b0 <_realloc_r+0xdc>
    6648:	070000b4 	movhi	fp,2
    664c:	e7260c04 	addi	fp,fp,-26576
    6650:	e1400217 	ldw	r5,8(fp)
    6654:	ac11883a 	add	r8,r21,r16
    6658:	2a006226 	beq	r5,r8,67e4 <_realloc_r+0x210>
    665c:	41800117 	ldw	r6,4(r8)
    6660:	027fff84 	movi	r9,-2
    6664:	3252703a 	and	r9,r6,r9
    6668:	4253883a 	add	r9,r8,r9
    666c:	49000117 	ldw	r4,4(r9)
    6670:	2100004c 	andi	r4,r4,1
    6674:	2000281e 	bne	r4,zero,6718 <_realloc_r+0x144>
    6678:	00bfff04 	movi	r2,-4
    667c:	3084703a 	and	r2,r6,r2
    6680:	1409883a 	add	r4,r2,r16
    6684:	21c05e16 	blt	r4,r7,6800 <_realloc_r+0x22c>
    6688:	40800317 	ldw	r2,12(r8)
    668c:	41400217 	ldw	r5,8(r8)
    6690:	a023883a 	mov	r17,r20
    6694:	2021883a 	mov	r16,r4
    6698:	28800315 	stw	r2,12(r5)
    669c:	11400215 	stw	r5,8(r2)
    66a0:	00000406 	br	66b4 <_realloc_r+0xe0>
    66a4:	01c00404 	movi	r7,16
    66a8:	382d883a 	mov	r22,r7
    66ac:	003fe406 	br	6640 <__alt_mem_Flash_flash_data+0xf4006640>
    66b0:	a023883a 	mov	r17,r20
    66b4:	858fc83a 	sub	r7,r16,r22
    66b8:	008003c4 	movi	r2,15
    66bc:	18c0004c 	andi	r3,r3,1
    66c0:	11c07236 	bltu	r2,r7,688c <_realloc_r+0x2b8>
    66c4:	1c06b03a 	or	r3,r3,r16
    66c8:	a8c00115 	stw	r3,4(r21)
    66cc:	ac21883a 	add	r16,r21,r16
    66d0:	80800117 	ldw	r2,4(r16)
    66d4:	10800054 	ori	r2,r2,1
    66d8:	80800115 	stw	r2,4(r16)
    66dc:	9009883a 	mov	r4,r18
    66e0:	000d23c0 	call	d23c <__malloc_unlock>
    66e4:	8805883a 	mov	r2,r17
    66e8:	dfc00917 	ldw	ra,36(sp)
    66ec:	df000817 	ldw	fp,32(sp)
    66f0:	ddc00717 	ldw	r23,28(sp)
    66f4:	dd800617 	ldw	r22,24(sp)
    66f8:	dd400517 	ldw	r21,20(sp)
    66fc:	dd000417 	ldw	r20,16(sp)
    6700:	dcc00317 	ldw	r19,12(sp)
    6704:	dc800217 	ldw	r18,8(sp)
    6708:	dc400117 	ldw	r17,4(sp)
    670c:	dc000017 	ldw	r16,0(sp)
    6710:	dec00a04 	addi	sp,sp,40
    6714:	f800283a 	ret
    6718:	18c0004c 	andi	r3,r3,1
    671c:	1800081e 	bne	r3,zero,6740 <_realloc_r+0x16c>
    6720:	a4fffe17 	ldw	r19,-8(r20)
    6724:	00bfff04 	movi	r2,-4
    6728:	ace7c83a 	sub	r19,r21,r19
    672c:	98c00117 	ldw	r3,4(r19)
    6730:	1886703a 	and	r3,r3,r2
    6734:	98000226 	beq	r19,zero,6740 <_realloc_r+0x16c>
    6738:	1c2f883a 	add	r23,r3,r16
    673c:	b9c06d0e 	bge	r23,r7,68f4 <_realloc_r+0x320>
    6740:	880b883a 	mov	r5,r17
    6744:	9009883a 	mov	r4,r18
    6748:	0004b100 	call	4b10 <_malloc_r>
    674c:	1023883a 	mov	r17,r2
    6750:	1000ef26 	beq	r2,zero,6b10 <_realloc_r+0x53c>
    6754:	a0ffff17 	ldw	r3,-4(r20)
    6758:	113ffe04 	addi	r4,r2,-8
    675c:	00bfff84 	movi	r2,-2
    6760:	1884703a 	and	r2,r3,r2
    6764:	a885883a 	add	r2,r21,r2
    6768:	2080bf26 	beq	r4,r2,6a68 <_realloc_r+0x494>
    676c:	81bfff04 	addi	r6,r16,-4
    6770:	00800904 	movi	r2,36
    6774:	11808936 	bltu	r2,r6,699c <_realloc_r+0x3c8>
    6778:	00c004c4 	movi	r3,19
    677c:	19806c2e 	bgeu	r3,r6,6930 <_realloc_r+0x35c>
    6780:	a0c00017 	ldw	r3,0(r20)
    6784:	88c00015 	stw	r3,0(r17)
    6788:	a0c00117 	ldw	r3,4(r20)
    678c:	88c00115 	stw	r3,4(r17)
    6790:	00c006c4 	movi	r3,27
    6794:	1980ac36 	bltu	r3,r6,6a48 <_realloc_r+0x474>
    6798:	88800204 	addi	r2,r17,8
    679c:	a0c00204 	addi	r3,r20,8
    67a0:	19000017 	ldw	r4,0(r3)
    67a4:	11000015 	stw	r4,0(r2)
    67a8:	19000117 	ldw	r4,4(r3)
    67ac:	11000115 	stw	r4,4(r2)
    67b0:	18c00217 	ldw	r3,8(r3)
    67b4:	10c00215 	stw	r3,8(r2)
    67b8:	a00b883a 	mov	r5,r20
    67bc:	9009883a 	mov	r4,r18
    67c0:	000881c0 	call	881c <_free_r>
    67c4:	9009883a 	mov	r4,r18
    67c8:	000d23c0 	call	d23c <__malloc_unlock>
    67cc:	8805883a 	mov	r2,r17
    67d0:	003fc506 	br	66e8 <__alt_mem_Flash_flash_data+0xf40066e8>
    67d4:	00800304 	movi	r2,12
    67d8:	90800015 	stw	r2,0(r18)
    67dc:	0005883a 	mov	r2,zero
    67e0:	003fc106 	br	66e8 <__alt_mem_Flash_flash_data+0xf40066e8>
    67e4:	29800117 	ldw	r6,4(r5)
    67e8:	00bfff04 	movi	r2,-4
    67ec:	b1000404 	addi	r4,r22,16
    67f0:	3084703a 	and	r2,r6,r2
    67f4:	140d883a 	add	r6,r2,r16
    67f8:	31005b0e 	bge	r6,r4,6968 <_realloc_r+0x394>
    67fc:	2811883a 	mov	r8,r5
    6800:	18c0004c 	andi	r3,r3,1
    6804:	183fce1e 	bne	r3,zero,6740 <__alt_mem_Flash_flash_data+0xf4006740>
    6808:	a4fffe17 	ldw	r19,-8(r20)
    680c:	00ffff04 	movi	r3,-4
    6810:	ace7c83a 	sub	r19,r21,r19
    6814:	99000117 	ldw	r4,4(r19)
    6818:	20c6703a 	and	r3,r4,r3
    681c:	403fc526 	beq	r8,zero,6734 <__alt_mem_Flash_flash_data+0xf4006734>
    6820:	1c2f883a 	add	r23,r3,r16
    6824:	b8af883a 	add	r23,r23,r2
    6828:	41406026 	beq	r8,r5,69ac <_realloc_r+0x3d8>
    682c:	b9ffc116 	blt	r23,r7,6734 <__alt_mem_Flash_flash_data+0xf4006734>
    6830:	40c00217 	ldw	r3,8(r8)
    6834:	40800317 	ldw	r2,12(r8)
    6838:	81bfff04 	addi	r6,r16,-4
    683c:	01000904 	movi	r4,36
    6840:	18800315 	stw	r2,12(r3)
    6844:	10c00215 	stw	r3,8(r2)
    6848:	99400217 	ldw	r5,8(r19)
    684c:	98c00317 	ldw	r3,12(r19)
    6850:	9c400204 	addi	r17,r19,8
    6854:	28c00315 	stw	r3,12(r5)
    6858:	19400215 	stw	r5,8(r3)
    685c:	21802d36 	bltu	r4,r6,6914 <_realloc_r+0x340>
    6860:	008004c4 	movi	r2,19
    6864:	1180352e 	bgeu	r2,r6,693c <_realloc_r+0x368>
    6868:	a0800017 	ldw	r2,0(r20)
    686c:	98800215 	stw	r2,8(r19)
    6870:	a0800117 	ldw	r2,4(r20)
    6874:	98800315 	stw	r2,12(r19)
    6878:	008006c4 	movi	r2,27
    687c:	11808036 	bltu	r2,r6,6a80 <_realloc_r+0x4ac>
    6880:	98c00404 	addi	r3,r19,16
    6884:	a5000204 	addi	r20,r20,8
    6888:	00002d06 	br	6940 <_realloc_r+0x36c>
    688c:	1d86b03a 	or	r3,r3,r22
    6890:	ad8b883a 	add	r5,r21,r22
    6894:	a8c00115 	stw	r3,4(r21)
    6898:	38800054 	ori	r2,r7,1
    689c:	28800115 	stw	r2,4(r5)
    68a0:	29cf883a 	add	r7,r5,r7
    68a4:	38800117 	ldw	r2,4(r7)
    68a8:	9009883a 	mov	r4,r18
    68ac:	29400204 	addi	r5,r5,8
    68b0:	10800054 	ori	r2,r2,1
    68b4:	38800115 	stw	r2,4(r7)
    68b8:	000881c0 	call	881c <_free_r>
    68bc:	003f8706 	br	66dc <__alt_mem_Flash_flash_data+0xf40066dc>
    68c0:	300b883a 	mov	r5,r6
    68c4:	dfc00917 	ldw	ra,36(sp)
    68c8:	df000817 	ldw	fp,32(sp)
    68cc:	ddc00717 	ldw	r23,28(sp)
    68d0:	dd800617 	ldw	r22,24(sp)
    68d4:	dd400517 	ldw	r21,20(sp)
    68d8:	dd000417 	ldw	r20,16(sp)
    68dc:	dcc00317 	ldw	r19,12(sp)
    68e0:	dc800217 	ldw	r18,8(sp)
    68e4:	dc400117 	ldw	r17,4(sp)
    68e8:	dc000017 	ldw	r16,0(sp)
    68ec:	dec00a04 	addi	sp,sp,40
    68f0:	0004b101 	jmpi	4b10 <_malloc_r>
    68f4:	98800317 	ldw	r2,12(r19)
    68f8:	98c00217 	ldw	r3,8(r19)
    68fc:	81bfff04 	addi	r6,r16,-4
    6900:	01000904 	movi	r4,36
    6904:	18800315 	stw	r2,12(r3)
    6908:	10c00215 	stw	r3,8(r2)
    690c:	9c400204 	addi	r17,r19,8
    6910:	21bfd32e 	bgeu	r4,r6,6860 <__alt_mem_Flash_flash_data+0xf4006860>
    6914:	8809883a 	mov	r4,r17
    6918:	a00b883a 	mov	r5,r20
    691c:	00054d80 	call	54d8 <memmove>
    6920:	98c00117 	ldw	r3,4(r19)
    6924:	b821883a 	mov	r16,r23
    6928:	982b883a 	mov	r21,r19
    692c:	003f6106 	br	66b4 <__alt_mem_Flash_flash_data+0xf40066b4>
    6930:	8805883a 	mov	r2,r17
    6934:	a007883a 	mov	r3,r20
    6938:	003f9906 	br	67a0 <__alt_mem_Flash_flash_data+0xf40067a0>
    693c:	8807883a 	mov	r3,r17
    6940:	a0800017 	ldw	r2,0(r20)
    6944:	b821883a 	mov	r16,r23
    6948:	982b883a 	mov	r21,r19
    694c:	18800015 	stw	r2,0(r3)
    6950:	a0800117 	ldw	r2,4(r20)
    6954:	18800115 	stw	r2,4(r3)
    6958:	a0800217 	ldw	r2,8(r20)
    695c:	18800215 	stw	r2,8(r3)
    6960:	98c00117 	ldw	r3,4(r19)
    6964:	003f5306 	br	66b4 <__alt_mem_Flash_flash_data+0xf40066b4>
    6968:	adab883a 	add	r21,r21,r22
    696c:	3585c83a 	sub	r2,r6,r22
    6970:	e5400215 	stw	r21,8(fp)
    6974:	10800054 	ori	r2,r2,1
    6978:	a8800115 	stw	r2,4(r21)
    697c:	a0bfff17 	ldw	r2,-4(r20)
    6980:	9009883a 	mov	r4,r18
    6984:	1080004c 	andi	r2,r2,1
    6988:	b0acb03a 	or	r22,r22,r2
    698c:	a5bfff15 	stw	r22,-4(r20)
    6990:	000d23c0 	call	d23c <__malloc_unlock>
    6994:	a005883a 	mov	r2,r20
    6998:	003f5306 	br	66e8 <__alt_mem_Flash_flash_data+0xf40066e8>
    699c:	8809883a 	mov	r4,r17
    69a0:	a00b883a 	mov	r5,r20
    69a4:	00054d80 	call	54d8 <memmove>
    69a8:	003f8306 	br	67b8 <__alt_mem_Flash_flash_data+0xf40067b8>
    69ac:	b0800404 	addi	r2,r22,16
    69b0:	b8bf6016 	blt	r23,r2,6734 <__alt_mem_Flash_flash_data+0xf4006734>
    69b4:	98800317 	ldw	r2,12(r19)
    69b8:	98c00217 	ldw	r3,8(r19)
    69bc:	81bfff04 	addi	r6,r16,-4
    69c0:	01000904 	movi	r4,36
    69c4:	18800315 	stw	r2,12(r3)
    69c8:	10c00215 	stw	r3,8(r2)
    69cc:	9c400204 	addi	r17,r19,8
    69d0:	21804336 	bltu	r4,r6,6ae0 <_realloc_r+0x50c>
    69d4:	008004c4 	movi	r2,19
    69d8:	11803f2e 	bgeu	r2,r6,6ad8 <_realloc_r+0x504>
    69dc:	a0800017 	ldw	r2,0(r20)
    69e0:	98800215 	stw	r2,8(r19)
    69e4:	a0800117 	ldw	r2,4(r20)
    69e8:	98800315 	stw	r2,12(r19)
    69ec:	008006c4 	movi	r2,27
    69f0:	11803f36 	bltu	r2,r6,6af0 <_realloc_r+0x51c>
    69f4:	98800404 	addi	r2,r19,16
    69f8:	a5000204 	addi	r20,r20,8
    69fc:	a0c00017 	ldw	r3,0(r20)
    6a00:	10c00015 	stw	r3,0(r2)
    6a04:	a0c00117 	ldw	r3,4(r20)
    6a08:	10c00115 	stw	r3,4(r2)
    6a0c:	a0c00217 	ldw	r3,8(r20)
    6a10:	10c00215 	stw	r3,8(r2)
    6a14:	9d87883a 	add	r3,r19,r22
    6a18:	bd85c83a 	sub	r2,r23,r22
    6a1c:	e0c00215 	stw	r3,8(fp)
    6a20:	10800054 	ori	r2,r2,1
    6a24:	18800115 	stw	r2,4(r3)
    6a28:	98800117 	ldw	r2,4(r19)
    6a2c:	9009883a 	mov	r4,r18
    6a30:	1080004c 	andi	r2,r2,1
    6a34:	b0acb03a 	or	r22,r22,r2
    6a38:	9d800115 	stw	r22,4(r19)
    6a3c:	000d23c0 	call	d23c <__malloc_unlock>
    6a40:	8805883a 	mov	r2,r17
    6a44:	003f2806 	br	66e8 <__alt_mem_Flash_flash_data+0xf40066e8>
    6a48:	a0c00217 	ldw	r3,8(r20)
    6a4c:	88c00215 	stw	r3,8(r17)
    6a50:	a0c00317 	ldw	r3,12(r20)
    6a54:	88c00315 	stw	r3,12(r17)
    6a58:	30801126 	beq	r6,r2,6aa0 <_realloc_r+0x4cc>
    6a5c:	88800404 	addi	r2,r17,16
    6a60:	a0c00404 	addi	r3,r20,16
    6a64:	003f4e06 	br	67a0 <__alt_mem_Flash_flash_data+0xf40067a0>
    6a68:	893fff17 	ldw	r4,-4(r17)
    6a6c:	00bfff04 	movi	r2,-4
    6a70:	a023883a 	mov	r17,r20
    6a74:	2084703a 	and	r2,r4,r2
    6a78:	80a1883a 	add	r16,r16,r2
    6a7c:	003f0d06 	br	66b4 <__alt_mem_Flash_flash_data+0xf40066b4>
    6a80:	a0800217 	ldw	r2,8(r20)
    6a84:	98800415 	stw	r2,16(r19)
    6a88:	a0800317 	ldw	r2,12(r20)
    6a8c:	98800515 	stw	r2,20(r19)
    6a90:	31000a26 	beq	r6,r4,6abc <_realloc_r+0x4e8>
    6a94:	98c00604 	addi	r3,r19,24
    6a98:	a5000404 	addi	r20,r20,16
    6a9c:	003fa806 	br	6940 <__alt_mem_Flash_flash_data+0xf4006940>
    6aa0:	a1000417 	ldw	r4,16(r20)
    6aa4:	88800604 	addi	r2,r17,24
    6aa8:	a0c00604 	addi	r3,r20,24
    6aac:	89000415 	stw	r4,16(r17)
    6ab0:	a1000517 	ldw	r4,20(r20)
    6ab4:	89000515 	stw	r4,20(r17)
    6ab8:	003f3906 	br	67a0 <__alt_mem_Flash_flash_data+0xf40067a0>
    6abc:	a0800417 	ldw	r2,16(r20)
    6ac0:	a5000604 	addi	r20,r20,24
    6ac4:	98c00804 	addi	r3,r19,32
    6ac8:	98800615 	stw	r2,24(r19)
    6acc:	a0bfff17 	ldw	r2,-4(r20)
    6ad0:	98800715 	stw	r2,28(r19)
    6ad4:	003f9a06 	br	6940 <__alt_mem_Flash_flash_data+0xf4006940>
    6ad8:	8805883a 	mov	r2,r17
    6adc:	003fc706 	br	69fc <__alt_mem_Flash_flash_data+0xf40069fc>
    6ae0:	8809883a 	mov	r4,r17
    6ae4:	a00b883a 	mov	r5,r20
    6ae8:	00054d80 	call	54d8 <memmove>
    6aec:	003fc906 	br	6a14 <__alt_mem_Flash_flash_data+0xf4006a14>
    6af0:	a0800217 	ldw	r2,8(r20)
    6af4:	98800415 	stw	r2,16(r19)
    6af8:	a0800317 	ldw	r2,12(r20)
    6afc:	98800515 	stw	r2,20(r19)
    6b00:	31000726 	beq	r6,r4,6b20 <_realloc_r+0x54c>
    6b04:	98800604 	addi	r2,r19,24
    6b08:	a5000404 	addi	r20,r20,16
    6b0c:	003fbb06 	br	69fc <__alt_mem_Flash_flash_data+0xf40069fc>
    6b10:	9009883a 	mov	r4,r18
    6b14:	000d23c0 	call	d23c <__malloc_unlock>
    6b18:	0005883a 	mov	r2,zero
    6b1c:	003ef206 	br	66e8 <__alt_mem_Flash_flash_data+0xf40066e8>
    6b20:	a0c00417 	ldw	r3,16(r20)
    6b24:	a5000604 	addi	r20,r20,24
    6b28:	98800804 	addi	r2,r19,32
    6b2c:	98c00615 	stw	r3,24(r19)
    6b30:	a0ffff17 	ldw	r3,-4(r20)
    6b34:	98c00715 	stw	r3,28(r19)
    6b38:	003fb006 	br	69fc <__alt_mem_Flash_flash_data+0xf40069fc>

00006b3c <__fpclassifyd>:
    6b3c:	00a00034 	movhi	r2,32768
    6b40:	10bfffc4 	addi	r2,r2,-1
    6b44:	2884703a 	and	r2,r5,r2
    6b48:	10000726 	beq	r2,zero,6b68 <__fpclassifyd+0x2c>
    6b4c:	00fffc34 	movhi	r3,65520
    6b50:	019ff834 	movhi	r6,32736
    6b54:	28c7883a 	add	r3,r5,r3
    6b58:	31bfffc4 	addi	r6,r6,-1
    6b5c:	30c00536 	bltu	r6,r3,6b74 <__fpclassifyd+0x38>
    6b60:	00800104 	movi	r2,4
    6b64:	f800283a 	ret
    6b68:	2000021e 	bne	r4,zero,6b74 <__fpclassifyd+0x38>
    6b6c:	00800084 	movi	r2,2
    6b70:	f800283a 	ret
    6b74:	00dffc34 	movhi	r3,32752
    6b78:	019ff834 	movhi	r6,32736
    6b7c:	28cb883a 	add	r5,r5,r3
    6b80:	31bfffc4 	addi	r6,r6,-1
    6b84:	317ff62e 	bgeu	r6,r5,6b60 <__alt_mem_Flash_flash_data+0xf4006b60>
    6b88:	01400434 	movhi	r5,16
    6b8c:	297fffc4 	addi	r5,r5,-1
    6b90:	28800236 	bltu	r5,r2,6b9c <__fpclassifyd+0x60>
    6b94:	008000c4 	movi	r2,3
    6b98:	f800283a 	ret
    6b9c:	10c00226 	beq	r2,r3,6ba8 <__fpclassifyd+0x6c>
    6ba0:	0005883a 	mov	r2,zero
    6ba4:	f800283a 	ret
    6ba8:	2005003a 	cmpeq	r2,r4,zero
    6bac:	f800283a 	ret

00006bb0 <_sbrk_r>:
    6bb0:	defffd04 	addi	sp,sp,-12
    6bb4:	dc000015 	stw	r16,0(sp)
    6bb8:	040000b4 	movhi	r16,2
    6bbc:	dc400115 	stw	r17,4(sp)
    6bc0:	84347604 	addi	r16,r16,-11816
    6bc4:	2023883a 	mov	r17,r4
    6bc8:	2809883a 	mov	r4,r5
    6bcc:	dfc00215 	stw	ra,8(sp)
    6bd0:	80000015 	stw	zero,0(r16)
    6bd4:	000ce080 	call	ce08 <sbrk>
    6bd8:	00ffffc4 	movi	r3,-1
    6bdc:	10c00526 	beq	r2,r3,6bf4 <_sbrk_r+0x44>
    6be0:	dfc00217 	ldw	ra,8(sp)
    6be4:	dc400117 	ldw	r17,4(sp)
    6be8:	dc000017 	ldw	r16,0(sp)
    6bec:	dec00304 	addi	sp,sp,12
    6bf0:	f800283a 	ret
    6bf4:	80c00017 	ldw	r3,0(r16)
    6bf8:	183ff926 	beq	r3,zero,6be0 <__alt_mem_Flash_flash_data+0xf4006be0>
    6bfc:	88c00015 	stw	r3,0(r17)
    6c00:	003ff706 	br	6be0 <__alt_mem_Flash_flash_data+0xf4006be0>

00006c04 <strcmp>:
    6c04:	2144b03a 	or	r2,r4,r5
    6c08:	108000cc 	andi	r2,r2,3
    6c0c:	1000171e 	bne	r2,zero,6c6c <strcmp+0x68>
    6c10:	20800017 	ldw	r2,0(r4)
    6c14:	28c00017 	ldw	r3,0(r5)
    6c18:	10c0141e 	bne	r2,r3,6c6c <strcmp+0x68>
    6c1c:	027fbff4 	movhi	r9,65279
    6c20:	4a7fbfc4 	addi	r9,r9,-257
    6c24:	0086303a 	nor	r3,zero,r2
    6c28:	02202074 	movhi	r8,32897
    6c2c:	1245883a 	add	r2,r2,r9
    6c30:	42202004 	addi	r8,r8,-32640
    6c34:	10c4703a 	and	r2,r2,r3
    6c38:	1204703a 	and	r2,r2,r8
    6c3c:	10000226 	beq	r2,zero,6c48 <strcmp+0x44>
    6c40:	00001706 	br	6ca0 <strcmp+0x9c>
    6c44:	1000161e 	bne	r2,zero,6ca0 <strcmp+0x9c>
    6c48:	21000104 	addi	r4,r4,4
    6c4c:	20c00017 	ldw	r3,0(r4)
    6c50:	29400104 	addi	r5,r5,4
    6c54:	29800017 	ldw	r6,0(r5)
    6c58:	1a4f883a 	add	r7,r3,r9
    6c5c:	00c4303a 	nor	r2,zero,r3
    6c60:	3884703a 	and	r2,r7,r2
    6c64:	1204703a 	and	r2,r2,r8
    6c68:	19bff626 	beq	r3,r6,6c44 <__alt_mem_Flash_flash_data+0xf4006c44>
    6c6c:	20800007 	ldb	r2,0(r4)
    6c70:	1000051e 	bne	r2,zero,6c88 <strcmp+0x84>
    6c74:	00000606 	br	6c90 <strcmp+0x8c>
    6c78:	21000044 	addi	r4,r4,1
    6c7c:	20800007 	ldb	r2,0(r4)
    6c80:	29400044 	addi	r5,r5,1
    6c84:	10000226 	beq	r2,zero,6c90 <strcmp+0x8c>
    6c88:	28c00007 	ldb	r3,0(r5)
    6c8c:	10fffa26 	beq	r2,r3,6c78 <__alt_mem_Flash_flash_data+0xf4006c78>
    6c90:	20800003 	ldbu	r2,0(r4)
    6c94:	28c00003 	ldbu	r3,0(r5)
    6c98:	10c5c83a 	sub	r2,r2,r3
    6c9c:	f800283a 	ret
    6ca0:	0005883a 	mov	r2,zero
    6ca4:	f800283a 	ret

00006ca8 <__ssprint_r>:
    6ca8:	30800217 	ldw	r2,8(r6)
    6cac:	defff604 	addi	sp,sp,-40
    6cb0:	ddc00715 	stw	r23,28(sp)
    6cb4:	dc800215 	stw	r18,8(sp)
    6cb8:	dfc00915 	stw	ra,36(sp)
    6cbc:	df000815 	stw	fp,32(sp)
    6cc0:	dd800615 	stw	r22,24(sp)
    6cc4:	dd400515 	stw	r21,20(sp)
    6cc8:	dd000415 	stw	r20,16(sp)
    6ccc:	dcc00315 	stw	r19,12(sp)
    6cd0:	dc400115 	stw	r17,4(sp)
    6cd4:	dc000015 	stw	r16,0(sp)
    6cd8:	3025883a 	mov	r18,r6
    6cdc:	35c00017 	ldw	r23,0(r6)
    6ce0:	10005626 	beq	r2,zero,6e3c <__ssprint_r+0x194>
    6ce4:	2027883a 	mov	r19,r4
    6ce8:	28800217 	ldw	r2,8(r5)
    6cec:	29000017 	ldw	r4,0(r5)
    6cf0:	2823883a 	mov	r17,r5
    6cf4:	0039883a 	mov	fp,zero
    6cf8:	0021883a 	mov	r16,zero
    6cfc:	80003926 	beq	r16,zero,6de4 <__ssprint_r+0x13c>
    6d00:	102b883a 	mov	r21,r2
    6d04:	102d883a 	mov	r22,r2
    6d08:	80803a36 	bltu	r16,r2,6df4 <__ssprint_r+0x14c>
    6d0c:	88c0030b 	ldhu	r3,12(r17)
    6d10:	1881200c 	andi	r2,r3,1152
    6d14:	10002626 	beq	r2,zero,6db0 <__ssprint_r+0x108>
    6d18:	88800517 	ldw	r2,20(r17)
    6d1c:	89400417 	ldw	r5,16(r17)
    6d20:	81c00044 	addi	r7,r16,1
    6d24:	108d883a 	add	r6,r2,r2
    6d28:	3085883a 	add	r2,r6,r2
    6d2c:	100cd7fa 	srli	r6,r2,31
    6d30:	216dc83a 	sub	r22,r4,r5
    6d34:	3d89883a 	add	r4,r7,r22
    6d38:	3085883a 	add	r2,r6,r2
    6d3c:	102bd07a 	srai	r21,r2,1
    6d40:	a80d883a 	mov	r6,r21
    6d44:	a900022e 	bgeu	r21,r4,6d50 <__ssprint_r+0xa8>
    6d48:	202b883a 	mov	r21,r4
    6d4c:	200d883a 	mov	r6,r4
    6d50:	18c1000c 	andi	r3,r3,1024
    6d54:	9809883a 	mov	r4,r19
    6d58:	18002926 	beq	r3,zero,6e00 <__ssprint_r+0x158>
    6d5c:	300b883a 	mov	r5,r6
    6d60:	0004b100 	call	4b10 <_malloc_r>
    6d64:	1029883a 	mov	r20,r2
    6d68:	10002b26 	beq	r2,zero,6e18 <__ssprint_r+0x170>
    6d6c:	89400417 	ldw	r5,16(r17)
    6d70:	1009883a 	mov	r4,r2
    6d74:	b00d883a 	mov	r6,r22
    6d78:	00053a00 	call	53a0 <memcpy>
    6d7c:	8880030b 	ldhu	r2,12(r17)
    6d80:	00fedfc4 	movi	r3,-1153
    6d84:	10c4703a 	and	r2,r2,r3
    6d88:	10802014 	ori	r2,r2,128
    6d8c:	8880030d 	sth	r2,12(r17)
    6d90:	a589883a 	add	r4,r20,r22
    6d94:	adadc83a 	sub	r22,r21,r22
    6d98:	8d400515 	stw	r21,20(r17)
    6d9c:	8d800215 	stw	r22,8(r17)
    6da0:	8d000415 	stw	r20,16(r17)
    6da4:	89000015 	stw	r4,0(r17)
    6da8:	802b883a 	mov	r21,r16
    6dac:	802d883a 	mov	r22,r16
    6db0:	e00b883a 	mov	r5,fp
    6db4:	b00d883a 	mov	r6,r22
    6db8:	00054d80 	call	54d8 <memmove>
    6dbc:	88800217 	ldw	r2,8(r17)
    6dc0:	89000017 	ldw	r4,0(r17)
    6dc4:	90c00217 	ldw	r3,8(r18)
    6dc8:	1545c83a 	sub	r2,r2,r21
    6dcc:	2589883a 	add	r4,r4,r22
    6dd0:	88800215 	stw	r2,8(r17)
    6dd4:	89000015 	stw	r4,0(r17)
    6dd8:	1c21c83a 	sub	r16,r3,r16
    6ddc:	94000215 	stw	r16,8(r18)
    6de0:	80001626 	beq	r16,zero,6e3c <__ssprint_r+0x194>
    6de4:	bf000017 	ldw	fp,0(r23)
    6de8:	bc000117 	ldw	r16,4(r23)
    6dec:	bdc00204 	addi	r23,r23,8
    6df0:	003fc206 	br	6cfc <__alt_mem_Flash_flash_data+0xf4006cfc>
    6df4:	802b883a 	mov	r21,r16
    6df8:	802d883a 	mov	r22,r16
    6dfc:	003fec06 	br	6db0 <__alt_mem_Flash_flash_data+0xf4006db0>
    6e00:	00065d40 	call	65d4 <_realloc_r>
    6e04:	1029883a 	mov	r20,r2
    6e08:	103fe11e 	bne	r2,zero,6d90 <__alt_mem_Flash_flash_data+0xf4006d90>
    6e0c:	89400417 	ldw	r5,16(r17)
    6e10:	9809883a 	mov	r4,r19
    6e14:	000881c0 	call	881c <_free_r>
    6e18:	88c0030b 	ldhu	r3,12(r17)
    6e1c:	00800304 	movi	r2,12
    6e20:	98800015 	stw	r2,0(r19)
    6e24:	18c01014 	ori	r3,r3,64
    6e28:	88c0030d 	sth	r3,12(r17)
    6e2c:	00bfffc4 	movi	r2,-1
    6e30:	90000215 	stw	zero,8(r18)
    6e34:	90000115 	stw	zero,4(r18)
    6e38:	00000206 	br	6e44 <__ssprint_r+0x19c>
    6e3c:	90000115 	stw	zero,4(r18)
    6e40:	0005883a 	mov	r2,zero
    6e44:	dfc00917 	ldw	ra,36(sp)
    6e48:	df000817 	ldw	fp,32(sp)
    6e4c:	ddc00717 	ldw	r23,28(sp)
    6e50:	dd800617 	ldw	r22,24(sp)
    6e54:	dd400517 	ldw	r21,20(sp)
    6e58:	dd000417 	ldw	r20,16(sp)
    6e5c:	dcc00317 	ldw	r19,12(sp)
    6e60:	dc800217 	ldw	r18,8(sp)
    6e64:	dc400117 	ldw	r17,4(sp)
    6e68:	dc000017 	ldw	r16,0(sp)
    6e6c:	dec00a04 	addi	sp,sp,40
    6e70:	f800283a 	ret

00006e74 <___svfiprintf_internal_r>:
    6e74:	2880030b 	ldhu	r2,12(r5)
    6e78:	deffc904 	addi	sp,sp,-220
    6e7c:	dd403215 	stw	r21,200(sp)
    6e80:	dfc03615 	stw	ra,216(sp)
    6e84:	df003515 	stw	fp,212(sp)
    6e88:	ddc03415 	stw	r23,208(sp)
    6e8c:	dd803315 	stw	r22,204(sp)
    6e90:	dd003115 	stw	r20,196(sp)
    6e94:	dcc03015 	stw	r19,192(sp)
    6e98:	dc802f15 	stw	r18,188(sp)
    6e9c:	dc402e15 	stw	r17,184(sp)
    6ea0:	dc002d15 	stw	r16,180(sp)
    6ea4:	d9402715 	stw	r5,156(sp)
    6ea8:	d9002915 	stw	r4,164(sp)
    6eac:	1080200c 	andi	r2,r2,128
    6eb0:	d9c02315 	stw	r7,140(sp)
    6eb4:	302b883a 	mov	r21,r6
    6eb8:	10000226 	beq	r2,zero,6ec4 <___svfiprintf_internal_r+0x50>
    6ebc:	28800417 	ldw	r2,16(r5)
    6ec0:	1003ce26 	beq	r2,zero,7dfc <___svfiprintf_internal_r+0xf88>
    6ec4:	dac01a04 	addi	r11,sp,104
    6ec8:	da8019c4 	addi	r10,sp,103
    6ecc:	dc802917 	ldw	r18,164(sp)
    6ed0:	dd002717 	ldw	r20,156(sp)
    6ed4:	04c000b4 	movhi	r19,2
    6ed8:	dac01e15 	stw	r11,120(sp)
    6edc:	5a97c83a 	sub	r11,r11,r10
    6ee0:	9ce3d804 	addi	r19,r19,-28832
    6ee4:	da801f15 	stw	r10,124(sp)
    6ee8:	dec01a15 	stw	sp,104(sp)
    6eec:	d8001c15 	stw	zero,112(sp)
    6ef0:	d8001b15 	stw	zero,108(sp)
    6ef4:	d811883a 	mov	r8,sp
    6ef8:	d8002a15 	stw	zero,168(sp)
    6efc:	d8002415 	stw	zero,144(sp)
    6f00:	dac02b15 	stw	r11,172(sp)
    6f04:	a8800007 	ldb	r2,0(r21)
    6f08:	10026a26 	beq	r2,zero,78b4 <___svfiprintf_internal_r+0xa40>
    6f0c:	01000944 	movi	r4,37
    6f10:	11026826 	beq	r2,r4,78b4 <___svfiprintf_internal_r+0xa40>
    6f14:	a805883a 	mov	r2,r21
    6f18:	00000106 	br	6f20 <___svfiprintf_internal_r+0xac>
    6f1c:	19000326 	beq	r3,r4,6f2c <___svfiprintf_internal_r+0xb8>
    6f20:	10800044 	addi	r2,r2,1
    6f24:	10c00007 	ldb	r3,0(r2)
    6f28:	183ffc1e 	bne	r3,zero,6f1c <__alt_mem_Flash_flash_data+0xf4006f1c>
    6f2c:	1561c83a 	sub	r16,r2,r21
    6f30:	102d883a 	mov	r22,r2
    6f34:	80000e26 	beq	r16,zero,6f70 <___svfiprintf_internal_r+0xfc>
    6f38:	d8c01c17 	ldw	r3,112(sp)
    6f3c:	d8801b17 	ldw	r2,108(sp)
    6f40:	45400015 	stw	r21,0(r8)
    6f44:	1c07883a 	add	r3,r3,r16
    6f48:	10800044 	addi	r2,r2,1
    6f4c:	d8c01c15 	stw	r3,112(sp)
    6f50:	44000115 	stw	r16,4(r8)
    6f54:	d8801b15 	stw	r2,108(sp)
    6f58:	00c001c4 	movi	r3,7
    6f5c:	1882d816 	blt	r3,r2,7ac0 <___svfiprintf_internal_r+0xc4c>
    6f60:	42000204 	addi	r8,r8,8
    6f64:	da802417 	ldw	r10,144(sp)
    6f68:	5415883a 	add	r10,r10,r16
    6f6c:	da802415 	stw	r10,144(sp)
    6f70:	b0800007 	ldb	r2,0(r22)
    6f74:	10027526 	beq	r2,zero,794c <___svfiprintf_internal_r+0xad8>
    6f78:	b1000047 	ldb	r4,1(r22)
    6f7c:	b5400044 	addi	r21,r22,1
    6f80:	d8001d85 	stb	zero,118(sp)
    6f84:	000d883a 	mov	r6,zero
    6f88:	043fffc4 	movi	r16,-1
    6f8c:	d8002115 	stw	zero,132(sp)
    6f90:	0023883a 	mov	r17,zero
    6f94:	00c01604 	movi	r3,88
    6f98:	01400244 	movi	r5,9
    6f9c:	02400a84 	movi	r9,42
    6fa0:	01c01b04 	movi	r7,108
    6fa4:	ad400044 	addi	r21,r21,1
    6fa8:	20bff804 	addi	r2,r4,-32
    6fac:	18819736 	bltu	r3,r2,760c <___svfiprintf_internal_r+0x798>
    6fb0:	100490ba 	slli	r2,r2,2
    6fb4:	02c00034 	movhi	r11,0
    6fb8:	5adbf204 	addi	r11,r11,28616
    6fbc:	12c5883a 	add	r2,r2,r11
    6fc0:	10800017 	ldw	r2,0(r2)
    6fc4:	1000683a 	jmp	r2
    6fc8:	00007504 	movi	zero,468
    6fcc:	0000760c 	andi	zero,zero,472
    6fd0:	0000760c 	andi	zero,zero,472
    6fd4:	000074f8 	rdprs	zero,zero,467
    6fd8:	0000760c 	andi	zero,zero,472
    6fdc:	0000760c 	andi	zero,zero,472
    6fe0:	0000760c 	andi	zero,zero,472
    6fe4:	0000760c 	andi	zero,zero,472
    6fe8:	0000760c 	andi	zero,zero,472
    6fec:	0000760c 	andi	zero,zero,472
    6ff0:	00007224 	muli	zero,zero,456
    6ff4:	00007640 	call	764 <main+0x190>
    6ff8:	0000760c 	andi	zero,zero,472
    6ffc:	0000724c 	andi	zero,zero,457
    7000:	0000764c 	andi	zero,zero,473
    7004:	0000760c 	andi	zero,zero,472
    7008:	00007634 	movhi	zero,472
    700c:	000075d4 	movui	zero,471
    7010:	000075d4 	movui	zero,471
    7014:	000075d4 	movui	zero,471
    7018:	000075d4 	movui	zero,471
    701c:	000075d4 	movui	zero,471
    7020:	000075d4 	movui	zero,471
    7024:	000075d4 	movui	zero,471
    7028:	000075d4 	movui	zero,471
    702c:	000075d4 	movui	zero,471
    7030:	0000760c 	andi	zero,zero,472
    7034:	0000760c 	andi	zero,zero,472
    7038:	0000760c 	andi	zero,zero,472
    703c:	0000760c 	andi	zero,zero,472
    7040:	0000760c 	andi	zero,zero,472
    7044:	0000760c 	andi	zero,zero,472
    7048:	0000760c 	andi	zero,zero,472
    704c:	0000760c 	andi	zero,zero,472
    7050:	0000760c 	andi	zero,zero,472
    7054:	0000760c 	andi	zero,zero,472
    7058:	0000756c 	andhi	zero,zero,469
    705c:	0000760c 	andi	zero,zero,472
    7060:	0000760c 	andi	zero,zero,472
    7064:	0000760c 	andi	zero,zero,472
    7068:	0000760c 	andi	zero,zero,472
    706c:	0000760c 	andi	zero,zero,472
    7070:	0000760c 	andi	zero,zero,472
    7074:	0000760c 	andi	zero,zero,472
    7078:	0000760c 	andi	zero,zero,472
    707c:	0000760c 	andi	zero,zero,472
    7080:	0000760c 	andi	zero,zero,472
    7084:	000071f8 	rdprs	zero,zero,455
    7088:	0000760c 	andi	zero,zero,472
    708c:	0000760c 	andi	zero,zero,472
    7090:	0000760c 	andi	zero,zero,472
    7094:	0000760c 	andi	zero,zero,472
    7098:	0000760c 	andi	zero,zero,472
    709c:	0000712c 	andhi	zero,zero,452
    70a0:	0000760c 	andi	zero,zero,472
    70a4:	0000760c 	andi	zero,zero,472
    70a8:	00007458 	cmpnei	zero,zero,465
    70ac:	0000760c 	andi	zero,zero,472
    70b0:	0000760c 	andi	zero,zero,472
    70b4:	0000760c 	andi	zero,zero,472
    70b8:	0000760c 	andi	zero,zero,472
    70bc:	0000760c 	andi	zero,zero,472
    70c0:	0000760c 	andi	zero,zero,472
    70c4:	0000760c 	andi	zero,zero,472
    70c8:	0000760c 	andi	zero,zero,472
    70cc:	0000760c 	andi	zero,zero,472
    70d0:	0000760c 	andi	zero,zero,472
    70d4:	00007344 	movi	zero,461
    70d8:	00007304 	movi	zero,460
    70dc:	0000760c 	andi	zero,zero,472
    70e0:	0000760c 	andi	zero,zero,472
    70e4:	0000760c 	andi	zero,zero,472
    70e8:	000074b4 	movhi	zero,466
    70ec:	00007304 	movi	zero,460
    70f0:	0000760c 	andi	zero,zero,472
    70f4:	0000760c 	andi	zero,zero,472
    70f8:	000074a0 	cmpeqi	zero,zero,466
    70fc:	0000760c 	andi	zero,zero,472
    7100:	000074c0 	call	74c <main+0x178>
    7104:	000071fc 	xorhi	zero,zero,455
    7108:	000072c0 	call	72c <main+0x158>
    710c:	000072b4 	movhi	zero,458
    7110:	0000760c 	andi	zero,zero,472
    7114:	00007258 	cmpnei	zero,zero,457
    7118:	0000760c 	andi	zero,zero,472
    711c:	00007130 	cmpltui	zero,zero,452
    7120:	0000760c 	andi	zero,zero,472
    7124:	0000760c 	andi	zero,zero,472
    7128:	00007520 	cmpeqi	zero,zero,468
    712c:	8c400414 	ori	r17,r17,16
    7130:	8880080c 	andi	r2,r17,32
    7134:	10029626 	beq	r2,zero,7b90 <___svfiprintf_internal_r+0xd1c>
    7138:	da802317 	ldw	r10,140(sp)
    713c:	dac02317 	ldw	r11,140(sp)
    7140:	00800044 	movi	r2,1
    7144:	52400017 	ldw	r9,0(r10)
    7148:	52800117 	ldw	r10,4(r10)
    714c:	5ac00204 	addi	r11,r11,8
    7150:	dac02315 	stw	r11,140(sp)
    7154:	4a86b03a 	or	r3,r9,r10
    7158:	d8001d85 	stb	zero,118(sp)
    715c:	8039883a 	mov	fp,r16
    7160:	0017883a 	mov	r11,zero
    7164:	80000216 	blt	r16,zero,7170 <___svfiprintf_internal_r+0x2fc>
    7168:	013fdfc4 	movi	r4,-129
    716c:	8922703a 	and	r17,r17,r4
    7170:	1801d21e 	bne	r3,zero,78bc <___svfiprintf_internal_r+0xa48>
    7174:	80024626 	beq	r16,zero,7a90 <___svfiprintf_internal_r+0xc1c>
    7178:	10803fcc 	andi	r2,r2,255
    717c:	00c00044 	movi	r3,1
    7180:	10c2b426 	beq	r2,r3,7c54 <___svfiprintf_internal_r+0xde0>
    7184:	00c00084 	movi	r3,2
    7188:	10c25d26 	beq	r2,r3,7b00 <___svfiprintf_internal_r+0xc8c>
    718c:	d8c01a04 	addi	r3,sp,104
    7190:	4808d0fa 	srli	r4,r9,3
    7194:	500a977a 	slli	r5,r10,29
    7198:	5014d0fa 	srli	r10,r10,3
    719c:	4a4001cc 	andi	r9,r9,7
    71a0:	48800c04 	addi	r2,r9,48
    71a4:	18ffffc4 	addi	r3,r3,-1
    71a8:	2912b03a 	or	r9,r5,r4
    71ac:	18800005 	stb	r2,0(r3)
    71b0:	4a88b03a 	or	r4,r9,r10
    71b4:	203ff61e 	bne	r4,zero,7190 <__alt_mem_Flash_flash_data+0xf4007190>
    71b8:	8900004c 	andi	r4,r17,1
    71bc:	d8c02615 	stw	r3,152(sp)
    71c0:	2002961e 	bne	r4,zero,7c1c <___svfiprintf_internal_r+0xda8>
    71c4:	da801e17 	ldw	r10,120(sp)
    71c8:	50f9c83a 	sub	fp,r10,r3
    71cc:	df002015 	stw	fp,128(sp)
    71d0:	e400010e 	bge	fp,r16,71d8 <___svfiprintf_internal_r+0x364>
    71d4:	dc002015 	stw	r16,128(sp)
    71d8:	5ac03fcc 	andi	r11,r11,255
    71dc:	5ac0201c 	xori	r11,r11,128
    71e0:	5affe004 	addi	r11,r11,-128
    71e4:	58006326 	beq	r11,zero,7374 <___svfiprintf_internal_r+0x500>
    71e8:	d8c02017 	ldw	r3,128(sp)
    71ec:	18c00044 	addi	r3,r3,1
    71f0:	d8c02015 	stw	r3,128(sp)
    71f4:	00005f06 	br	7374 <___svfiprintf_internal_r+0x500>
    71f8:	8c400414 	ori	r17,r17,16
    71fc:	8880080c 	andi	r2,r17,32
    7200:	10027926 	beq	r2,zero,7be8 <___svfiprintf_internal_r+0xd74>
    7204:	dac02317 	ldw	r11,140(sp)
    7208:	0005883a 	mov	r2,zero
    720c:	5a400017 	ldw	r9,0(r11)
    7210:	5a800117 	ldw	r10,4(r11)
    7214:	5ac00204 	addi	r11,r11,8
    7218:	dac02315 	stw	r11,140(sp)
    721c:	4a86b03a 	or	r3,r9,r10
    7220:	003fcd06 	br	7158 <__alt_mem_Flash_flash_data+0xf4007158>
    7224:	da802317 	ldw	r10,140(sp)
    7228:	dac02317 	ldw	r11,140(sp)
    722c:	52800017 	ldw	r10,0(r10)
    7230:	58800104 	addi	r2,r11,4
    7234:	da802115 	stw	r10,132(sp)
    7238:	50028c0e 	bge	r10,zero,7c6c <___svfiprintf_internal_r+0xdf8>
    723c:	da802117 	ldw	r10,132(sp)
    7240:	d8802315 	stw	r2,140(sp)
    7244:	0295c83a 	sub	r10,zero,r10
    7248:	da802115 	stw	r10,132(sp)
    724c:	8c400114 	ori	r17,r17,4
    7250:	a9000007 	ldb	r4,0(r21)
    7254:	003f5306 	br	6fa4 <__alt_mem_Flash_flash_data+0xf4006fa4>
    7258:	da802317 	ldw	r10,140(sp)
    725c:	dac02317 	ldw	r11,140(sp)
    7260:	d8001d85 	stb	zero,118(sp)
    7264:	52800017 	ldw	r10,0(r10)
    7268:	5dc00104 	addi	r23,r11,4
    726c:	da802615 	stw	r10,152(sp)
    7270:	5002d626 	beq	r10,zero,7dcc <___svfiprintf_internal_r+0xf58>
    7274:	d9002617 	ldw	r4,152(sp)
    7278:	8002cc16 	blt	r16,zero,7dac <___svfiprintf_internal_r+0xf38>
    727c:	000b883a 	mov	r5,zero
    7280:	800d883a 	mov	r6,r16
    7284:	da002c15 	stw	r8,176(sp)
    7288:	00052b80 	call	52b8 <memchr>
    728c:	da002c17 	ldw	r8,176(sp)
    7290:	1002f026 	beq	r2,zero,7e54 <___svfiprintf_internal_r+0xfe0>
    7294:	d8c02617 	ldw	r3,152(sp)
    7298:	10f9c83a 	sub	fp,r2,r3
    729c:	8700010e 	bge	r16,fp,72a4 <___svfiprintf_internal_r+0x430>
    72a0:	8039883a 	mov	fp,r16
    72a4:	dac01d83 	ldbu	r11,118(sp)
    72a8:	ddc02315 	stw	r23,140(sp)
    72ac:	0021883a 	mov	r16,zero
    72b0:	003fc606 	br	71cc <__alt_mem_Flash_flash_data+0xf40071cc>
    72b4:	8c400814 	ori	r17,r17,32
    72b8:	a9000007 	ldb	r4,0(r21)
    72bc:	003f3906 	br	6fa4 <__alt_mem_Flash_flash_data+0xf4006fa4>
    72c0:	da802317 	ldw	r10,140(sp)
    72c4:	00800c04 	movi	r2,48
    72c8:	dac02317 	ldw	r11,140(sp)
    72cc:	52400017 	ldw	r9,0(r10)
    72d0:	d8801d05 	stb	r2,116(sp)
    72d4:	00801e04 	movi	r2,120
    72d8:	d8801d45 	stb	r2,117(sp)
    72dc:	008000b4 	movhi	r2,2
    72e0:	10a37704 	addi	r2,r2,-29220
    72e4:	5ac00104 	addi	r11,r11,4
    72e8:	d8802a15 	stw	r2,168(sp)
    72ec:	0015883a 	mov	r10,zero
    72f0:	8c400094 	ori	r17,r17,2
    72f4:	dac02315 	stw	r11,140(sp)
    72f8:	00800084 	movi	r2,2
    72fc:	4807883a 	mov	r3,r9
    7300:	003f9506 	br	7158 <__alt_mem_Flash_flash_data+0xf4007158>
    7304:	d9801d85 	stb	r6,118(sp)
    7308:	8880080c 	andi	r2,r17,32
    730c:	d8c02317 	ldw	r3,140(sp)
    7310:	10009b26 	beq	r2,zero,7580 <___svfiprintf_internal_r+0x70c>
    7314:	dac02317 	ldw	r11,140(sp)
    7318:	18800117 	ldw	r2,4(r3)
    731c:	1a400017 	ldw	r9,0(r3)
    7320:	5ac00204 	addi	r11,r11,8
    7324:	dac02315 	stw	r11,140(sp)
    7328:	1015883a 	mov	r10,r2
    732c:	10009f16 	blt	r2,zero,75ac <___svfiprintf_internal_r+0x738>
    7330:	dac01d83 	ldbu	r11,118(sp)
    7334:	8039883a 	mov	fp,r16
    7338:	00800044 	movi	r2,1
    733c:	4a86b03a 	or	r3,r9,r10
    7340:	003f8806 	br	7164 <__alt_mem_Flash_flash_data+0xf4007164>
    7344:	dac02317 	ldw	r11,140(sp)
    7348:	00c00044 	movi	r3,1
    734c:	da801004 	addi	r10,sp,64
    7350:	58800017 	ldw	r2,0(r11)
    7354:	5ac00104 	addi	r11,r11,4
    7358:	d8c02015 	stw	r3,128(sp)
    735c:	d8001d85 	stb	zero,118(sp)
    7360:	d8801005 	stb	r2,64(sp)
    7364:	dac02315 	stw	r11,140(sp)
    7368:	1839883a 	mov	fp,r3
    736c:	da802615 	stw	r10,152(sp)
    7370:	0021883a 	mov	r16,zero
    7374:	8a80008c 	andi	r10,r17,2
    7378:	da802215 	stw	r10,136(sp)
    737c:	50000326 	beq	r10,zero,738c <___svfiprintf_internal_r+0x518>
    7380:	dac02017 	ldw	r11,128(sp)
    7384:	5ac00084 	addi	r11,r11,2
    7388:	dac02015 	stw	r11,128(sp)
    738c:	88c0210c 	andi	r3,r17,132
    7390:	d8c02515 	stw	r3,148(sp)
    7394:	1800bd1e 	bne	r3,zero,768c <___svfiprintf_internal_r+0x818>
    7398:	da802117 	ldw	r10,132(sp)
    739c:	dac02017 	ldw	r11,128(sp)
    73a0:	52edc83a 	sub	r22,r10,r11
    73a4:	0580b90e 	bge	zero,r22,768c <___svfiprintf_internal_r+0x818>
    73a8:	02400404 	movi	r9,16
    73ac:	d8c01c17 	ldw	r3,112(sp)
    73b0:	d8801b17 	ldw	r2,108(sp)
    73b4:	4d829b0e 	bge	r9,r22,7e24 <___svfiprintf_internal_r+0xfb0>
    73b8:	014000b4 	movhi	r5,2
    73bc:	2963dc04 	addi	r5,r5,-28816
    73c0:	d9402815 	stw	r5,160(sp)
    73c4:	05c001c4 	movi	r23,7
    73c8:	00000306 	br	73d8 <___svfiprintf_internal_r+0x564>
    73cc:	b5bffc04 	addi	r22,r22,-16
    73d0:	42000204 	addi	r8,r8,8
    73d4:	4d80150e 	bge	r9,r22,742c <___svfiprintf_internal_r+0x5b8>
    73d8:	028000b4 	movhi	r10,2
    73dc:	18c00404 	addi	r3,r3,16
    73e0:	10800044 	addi	r2,r2,1
    73e4:	52a3dc04 	addi	r10,r10,-28816
    73e8:	42800015 	stw	r10,0(r8)
    73ec:	42400115 	stw	r9,4(r8)
    73f0:	d8c01c15 	stw	r3,112(sp)
    73f4:	d8801b15 	stw	r2,108(sp)
    73f8:	b8bff40e 	bge	r23,r2,73cc <__alt_mem_Flash_flash_data+0xf40073cc>
    73fc:	9009883a 	mov	r4,r18
    7400:	a00b883a 	mov	r5,r20
    7404:	d9801a04 	addi	r6,sp,104
    7408:	da402c15 	stw	r9,176(sp)
    740c:	0006ca80 	call	6ca8 <__ssprint_r>
    7410:	da402c17 	ldw	r9,176(sp)
    7414:	1001531e 	bne	r2,zero,7964 <___svfiprintf_internal_r+0xaf0>
    7418:	b5bffc04 	addi	r22,r22,-16
    741c:	d8c01c17 	ldw	r3,112(sp)
    7420:	d8801b17 	ldw	r2,108(sp)
    7424:	d811883a 	mov	r8,sp
    7428:	4dbfeb16 	blt	r9,r22,73d8 <__alt_mem_Flash_flash_data+0xf40073d8>
    742c:	dac02817 	ldw	r11,160(sp)
    7430:	b0c7883a 	add	r3,r22,r3
    7434:	10800044 	addi	r2,r2,1
    7438:	42c00015 	stw	r11,0(r8)
    743c:	45800115 	stw	r22,4(r8)
    7440:	d8c01c15 	stw	r3,112(sp)
    7444:	d8801b15 	stw	r2,108(sp)
    7448:	010001c4 	movi	r4,7
    744c:	2081dd16 	blt	r4,r2,7bc4 <___svfiprintf_internal_r+0xd50>
    7450:	42000204 	addi	r8,r8,8
    7454:	00008f06 	br	7694 <___svfiprintf_internal_r+0x820>
    7458:	008000b4 	movhi	r2,2
    745c:	10a37204 	addi	r2,r2,-29240
    7460:	d8802a15 	stw	r2,168(sp)
    7464:	d9801d85 	stb	r6,118(sp)
    7468:	8880080c 	andi	r2,r17,32
    746c:	10003226 	beq	r2,zero,7538 <___svfiprintf_internal_r+0x6c4>
    7470:	da802317 	ldw	r10,140(sp)
    7474:	dac02317 	ldw	r11,140(sp)
    7478:	52400017 	ldw	r9,0(r10)
    747c:	52800117 	ldw	r10,4(r10)
    7480:	5ac00204 	addi	r11,r11,8
    7484:	dac02315 	stw	r11,140(sp)
    7488:	8880004c 	andi	r2,r17,1
    748c:	10003426 	beq	r2,zero,7560 <___svfiprintf_internal_r+0x6ec>
    7490:	4a86b03a 	or	r3,r9,r10
    7494:	1802231e 	bne	r3,zero,7d24 <___svfiprintf_internal_r+0xeb0>
    7498:	00800084 	movi	r2,2
    749c:	003f2e06 	br	7158 <__alt_mem_Flash_flash_data+0xf4007158>
    74a0:	a9000007 	ldb	r4,0(r21)
    74a4:	a805883a 	mov	r2,r21
    74a8:	21c22426 	beq	r4,r7,7d3c <___svfiprintf_internal_r+0xec8>
    74ac:	8c400414 	ori	r17,r17,16
    74b0:	003ebc06 	br	6fa4 <__alt_mem_Flash_flash_data+0xf4006fa4>
    74b4:	8c401014 	ori	r17,r17,64
    74b8:	a9000007 	ldb	r4,0(r21)
    74bc:	003eb906 	br	6fa4 <__alt_mem_Flash_flash_data+0xf4006fa4>
    74c0:	d9801d85 	stb	r6,118(sp)
    74c4:	8880080c 	andi	r2,r17,32
    74c8:	10020d1e 	bne	r2,zero,7d00 <___svfiprintf_internal_r+0xe8c>
    74cc:	8880040c 	andi	r2,r17,16
    74d0:	10021e1e 	bne	r2,zero,7d4c <___svfiprintf_internal_r+0xed8>
    74d4:	8c40100c 	andi	r17,r17,64
    74d8:	88021c26 	beq	r17,zero,7d4c <___svfiprintf_internal_r+0xed8>
    74dc:	dac02317 	ldw	r11,140(sp)
    74e0:	da802417 	ldw	r10,144(sp)
    74e4:	58800017 	ldw	r2,0(r11)
    74e8:	5ac00104 	addi	r11,r11,4
    74ec:	dac02315 	stw	r11,140(sp)
    74f0:	1280000d 	sth	r10,0(r2)
    74f4:	003e8306 	br	6f04 <__alt_mem_Flash_flash_data+0xf4006f04>
    74f8:	8c400054 	ori	r17,r17,1
    74fc:	a9000007 	ldb	r4,0(r21)
    7500:	003ea806 	br	6fa4 <__alt_mem_Flash_flash_data+0xf4006fa4>
    7504:	30803fcc 	andi	r2,r6,255
    7508:	1080201c 	xori	r2,r2,128
    750c:	10bfe004 	addi	r2,r2,-128
    7510:	1001f91e 	bne	r2,zero,7cf8 <___svfiprintf_internal_r+0xe84>
    7514:	01800804 	movi	r6,32
    7518:	a9000007 	ldb	r4,0(r21)
    751c:	003ea106 	br	6fa4 <__alt_mem_Flash_flash_data+0xf4006fa4>
    7520:	008000b4 	movhi	r2,2
    7524:	10a37704 	addi	r2,r2,-29220
    7528:	d8802a15 	stw	r2,168(sp)
    752c:	d9801d85 	stb	r6,118(sp)
    7530:	8880080c 	andi	r2,r17,32
    7534:	103fce1e 	bne	r2,zero,7470 <__alt_mem_Flash_flash_data+0xf4007470>
    7538:	8880040c 	andi	r2,r17,16
    753c:	1001e526 	beq	r2,zero,7cd4 <___svfiprintf_internal_r+0xe60>
    7540:	da802317 	ldw	r10,140(sp)
    7544:	dac02317 	ldw	r11,140(sp)
    7548:	52400017 	ldw	r9,0(r10)
    754c:	8880004c 	andi	r2,r17,1
    7550:	5ac00104 	addi	r11,r11,4
    7554:	dac02315 	stw	r11,140(sp)
    7558:	0015883a 	mov	r10,zero
    755c:	103fcc1e 	bne	r2,zero,7490 <__alt_mem_Flash_flash_data+0xf4007490>
    7560:	00800084 	movi	r2,2
    7564:	4a86b03a 	or	r3,r9,r10
    7568:	003efb06 	br	7158 <__alt_mem_Flash_flash_data+0xf4007158>
    756c:	8c400414 	ori	r17,r17,16
    7570:	d9801d85 	stb	r6,118(sp)
    7574:	8880080c 	andi	r2,r17,32
    7578:	d8c02317 	ldw	r3,140(sp)
    757c:	103f651e 	bne	r2,zero,7314 <__alt_mem_Flash_flash_data+0xf4007314>
    7580:	8880040c 	andi	r2,r17,16
    7584:	1001c61e 	bne	r2,zero,7ca0 <___svfiprintf_internal_r+0xe2c>
    7588:	8880100c 	andi	r2,r17,64
    758c:	1001c426 	beq	r2,zero,7ca0 <___svfiprintf_internal_r+0xe2c>
    7590:	1a40000f 	ldh	r9,0(r3)
    7594:	dac02317 	ldw	r11,140(sp)
    7598:	4815d7fa 	srai	r10,r9,31
    759c:	5ac00104 	addi	r11,r11,4
    75a0:	dac02315 	stw	r11,140(sp)
    75a4:	5005883a 	mov	r2,r10
    75a8:	103f610e 	bge	r2,zero,7330 <__alt_mem_Flash_flash_data+0xf4007330>
    75ac:	0253c83a 	sub	r9,zero,r9
    75b0:	4804c03a 	cmpne	r2,r9,zero
    75b4:	0295c83a 	sub	r10,zero,r10
    75b8:	5095c83a 	sub	r10,r10,r2
    75bc:	02c00b44 	movi	r11,45
    75c0:	dac01d85 	stb	r11,118(sp)
    75c4:	8039883a 	mov	fp,r16
    75c8:	00800044 	movi	r2,1
    75cc:	4a86b03a 	or	r3,r9,r10
    75d0:	003ee406 	br	7164 <__alt_mem_Flash_flash_data+0xf4007164>
    75d4:	a815883a 	mov	r10,r21
    75d8:	d8002115 	stw	zero,132(sp)
    75dc:	20bff404 	addi	r2,r4,-48
    75e0:	51000007 	ldb	r4,0(r10)
    75e4:	da802117 	ldw	r10,132(sp)
    75e8:	ad400044 	addi	r21,r21,1
    75ec:	52c002a4 	muli	r11,r10,10
    75f0:	a815883a 	mov	r10,r21
    75f4:	5885883a 	add	r2,r11,r2
    75f8:	d8802115 	stw	r2,132(sp)
    75fc:	20bff404 	addi	r2,r4,-48
    7600:	28bff72e 	bgeu	r5,r2,75e0 <__alt_mem_Flash_flash_data+0xf40075e0>
    7604:	20bff804 	addi	r2,r4,-32
    7608:	18be692e 	bgeu	r3,r2,6fb0 <__alt_mem_Flash_flash_data+0xf4006fb0>
    760c:	d9801d85 	stb	r6,118(sp)
    7610:	2000ce26 	beq	r4,zero,794c <___svfiprintf_internal_r+0xad8>
    7614:	02800044 	movi	r10,1
    7618:	dac01004 	addi	r11,sp,64
    761c:	da802015 	stw	r10,128(sp)
    7620:	d9001005 	stb	r4,64(sp)
    7624:	d8001d85 	stb	zero,118(sp)
    7628:	5039883a 	mov	fp,r10
    762c:	dac02615 	stw	r11,152(sp)
    7630:	003f4f06 	br	7370 <__alt_mem_Flash_flash_data+0xf4007370>
    7634:	8c402014 	ori	r17,r17,128
    7638:	a9000007 	ldb	r4,0(r21)
    763c:	003e5906 	br	6fa4 <__alt_mem_Flash_flash_data+0xf4006fa4>
    7640:	01800ac4 	movi	r6,43
    7644:	a9000007 	ldb	r4,0(r21)
    7648:	003e5606 	br	6fa4 <__alt_mem_Flash_flash_data+0xf4006fa4>
    764c:	a9000007 	ldb	r4,0(r21)
    7650:	aa800044 	addi	r10,r21,1
    7654:	22420626 	beq	r4,r9,7e70 <___svfiprintf_internal_r+0xffc>
    7658:	20bff404 	addi	r2,r4,-48
    765c:	502b883a 	mov	r21,r10
    7660:	0021883a 	mov	r16,zero
    7664:	28be5036 	bltu	r5,r2,6fa8 <__alt_mem_Flash_flash_data+0xf4006fa8>
    7668:	a9000007 	ldb	r4,0(r21)
    766c:	840002a4 	muli	r16,r16,10
    7670:	ad400044 	addi	r21,r21,1
    7674:	1421883a 	add	r16,r2,r16
    7678:	20bff404 	addi	r2,r4,-48
    767c:	28bffa2e 	bgeu	r5,r2,7668 <__alt_mem_Flash_flash_data+0xf4007668>
    7680:	803e490e 	bge	r16,zero,6fa8 <__alt_mem_Flash_flash_data+0xf4006fa8>
    7684:	043fffc4 	movi	r16,-1
    7688:	003e4706 	br	6fa8 <__alt_mem_Flash_flash_data+0xf4006fa8>
    768c:	d8c01c17 	ldw	r3,112(sp)
    7690:	d8801b17 	ldw	r2,108(sp)
    7694:	d9001d87 	ldb	r4,118(sp)
    7698:	20000b26 	beq	r4,zero,76c8 <___svfiprintf_internal_r+0x854>
    769c:	d9001d84 	addi	r4,sp,118
    76a0:	18c00044 	addi	r3,r3,1
    76a4:	10800044 	addi	r2,r2,1
    76a8:	41000015 	stw	r4,0(r8)
    76ac:	01000044 	movi	r4,1
    76b0:	41000115 	stw	r4,4(r8)
    76b4:	d8c01c15 	stw	r3,112(sp)
    76b8:	d8801b15 	stw	r2,108(sp)
    76bc:	010001c4 	movi	r4,7
    76c0:	20811e16 	blt	r4,r2,7b3c <___svfiprintf_internal_r+0xcc8>
    76c4:	42000204 	addi	r8,r8,8
    76c8:	da802217 	ldw	r10,136(sp)
    76cc:	50000b26 	beq	r10,zero,76fc <___svfiprintf_internal_r+0x888>
    76d0:	d9001d04 	addi	r4,sp,116
    76d4:	18c00084 	addi	r3,r3,2
    76d8:	10800044 	addi	r2,r2,1
    76dc:	41000015 	stw	r4,0(r8)
    76e0:	01000084 	movi	r4,2
    76e4:	41000115 	stw	r4,4(r8)
    76e8:	d8c01c15 	stw	r3,112(sp)
    76ec:	d8801b15 	stw	r2,108(sp)
    76f0:	010001c4 	movi	r4,7
    76f4:	20811a16 	blt	r4,r2,7b60 <___svfiprintf_internal_r+0xcec>
    76f8:	42000204 	addi	r8,r8,8
    76fc:	dac02517 	ldw	r11,148(sp)
    7700:	01002004 	movi	r4,128
    7704:	5900a826 	beq	r11,r4,79a8 <___svfiprintf_internal_r+0xb34>
    7708:	8721c83a 	sub	r16,r16,fp
    770c:	0400260e 	bge	zero,r16,77a8 <___svfiprintf_internal_r+0x934>
    7710:	01c00404 	movi	r7,16
    7714:	3c019d0e 	bge	r7,r16,7d8c <___svfiprintf_internal_r+0xf18>
    7718:	010000b4 	movhi	r4,2
    771c:	2123d804 	addi	r4,r4,-28832
    7720:	d9002215 	stw	r4,136(sp)
    7724:	382f883a 	mov	r23,r7
    7728:	058001c4 	movi	r22,7
    772c:	00000306 	br	773c <___svfiprintf_internal_r+0x8c8>
    7730:	843ffc04 	addi	r16,r16,-16
    7734:	42000204 	addi	r8,r8,8
    7738:	bc00110e 	bge	r23,r16,7780 <___svfiprintf_internal_r+0x90c>
    773c:	18c00404 	addi	r3,r3,16
    7740:	10800044 	addi	r2,r2,1
    7744:	44c00015 	stw	r19,0(r8)
    7748:	45c00115 	stw	r23,4(r8)
    774c:	d8c01c15 	stw	r3,112(sp)
    7750:	d8801b15 	stw	r2,108(sp)
    7754:	b0bff60e 	bge	r22,r2,7730 <__alt_mem_Flash_flash_data+0xf4007730>
    7758:	9009883a 	mov	r4,r18
    775c:	a00b883a 	mov	r5,r20
    7760:	d9801a04 	addi	r6,sp,104
    7764:	0006ca80 	call	6ca8 <__ssprint_r>
    7768:	10007e1e 	bne	r2,zero,7964 <___svfiprintf_internal_r+0xaf0>
    776c:	843ffc04 	addi	r16,r16,-16
    7770:	d8c01c17 	ldw	r3,112(sp)
    7774:	d8801b17 	ldw	r2,108(sp)
    7778:	d811883a 	mov	r8,sp
    777c:	bc3fef16 	blt	r23,r16,773c <__alt_mem_Flash_flash_data+0xf400773c>
    7780:	da802217 	ldw	r10,136(sp)
    7784:	1c07883a 	add	r3,r3,r16
    7788:	10800044 	addi	r2,r2,1
    778c:	42800015 	stw	r10,0(r8)
    7790:	44000115 	stw	r16,4(r8)
    7794:	d8c01c15 	stw	r3,112(sp)
    7798:	d8801b15 	stw	r2,108(sp)
    779c:	010001c4 	movi	r4,7
    77a0:	2080ce16 	blt	r4,r2,7adc <___svfiprintf_internal_r+0xc68>
    77a4:	42000204 	addi	r8,r8,8
    77a8:	dac02617 	ldw	r11,152(sp)
    77ac:	1f07883a 	add	r3,r3,fp
    77b0:	10800044 	addi	r2,r2,1
    77b4:	42c00015 	stw	r11,0(r8)
    77b8:	47000115 	stw	fp,4(r8)
    77bc:	d8c01c15 	stw	r3,112(sp)
    77c0:	d8801b15 	stw	r2,108(sp)
    77c4:	010001c4 	movi	r4,7
    77c8:	2080a316 	blt	r4,r2,7a58 <___svfiprintf_internal_r+0xbe4>
    77cc:	42000204 	addi	r8,r8,8
    77d0:	8c40010c 	andi	r17,r17,4
    77d4:	88002b26 	beq	r17,zero,7884 <___svfiprintf_internal_r+0xa10>
    77d8:	da802117 	ldw	r10,132(sp)
    77dc:	dac02017 	ldw	r11,128(sp)
    77e0:	52e1c83a 	sub	r16,r10,r11
    77e4:	0400270e 	bge	zero,r16,7884 <___svfiprintf_internal_r+0xa10>
    77e8:	04400404 	movi	r17,16
    77ec:	d8801b17 	ldw	r2,108(sp)
    77f0:	8c01900e 	bge	r17,r16,7e34 <___svfiprintf_internal_r+0xfc0>
    77f4:	014000b4 	movhi	r5,2
    77f8:	2963dc04 	addi	r5,r5,-28816
    77fc:	d9402815 	stw	r5,160(sp)
    7800:	070001c4 	movi	fp,7
    7804:	00000306 	br	7814 <___svfiprintf_internal_r+0x9a0>
    7808:	843ffc04 	addi	r16,r16,-16
    780c:	42000204 	addi	r8,r8,8
    7810:	8c00130e 	bge	r17,r16,7860 <___svfiprintf_internal_r+0x9ec>
    7814:	028000b4 	movhi	r10,2
    7818:	18c00404 	addi	r3,r3,16
    781c:	10800044 	addi	r2,r2,1
    7820:	52a3dc04 	addi	r10,r10,-28816
    7824:	42800015 	stw	r10,0(r8)
    7828:	44400115 	stw	r17,4(r8)
    782c:	d8c01c15 	stw	r3,112(sp)
    7830:	d8801b15 	stw	r2,108(sp)
    7834:	e0bff40e 	bge	fp,r2,7808 <__alt_mem_Flash_flash_data+0xf4007808>
    7838:	9009883a 	mov	r4,r18
    783c:	a00b883a 	mov	r5,r20
    7840:	d9801a04 	addi	r6,sp,104
    7844:	0006ca80 	call	6ca8 <__ssprint_r>
    7848:	1000461e 	bne	r2,zero,7964 <___svfiprintf_internal_r+0xaf0>
    784c:	843ffc04 	addi	r16,r16,-16
    7850:	d8c01c17 	ldw	r3,112(sp)
    7854:	d8801b17 	ldw	r2,108(sp)
    7858:	d811883a 	mov	r8,sp
    785c:	8c3fed16 	blt	r17,r16,7814 <__alt_mem_Flash_flash_data+0xf4007814>
    7860:	dac02817 	ldw	r11,160(sp)
    7864:	1c07883a 	add	r3,r3,r16
    7868:	10800044 	addi	r2,r2,1
    786c:	42c00015 	stw	r11,0(r8)
    7870:	44000115 	stw	r16,4(r8)
    7874:	d8c01c15 	stw	r3,112(sp)
    7878:	d8801b15 	stw	r2,108(sp)
    787c:	010001c4 	movi	r4,7
    7880:	2080fd16 	blt	r4,r2,7c78 <___svfiprintf_internal_r+0xe04>
    7884:	dd802017 	ldw	r22,128(sp)
    7888:	da802117 	ldw	r10,132(sp)
    788c:	b280010e 	bge	r22,r10,7894 <___svfiprintf_internal_r+0xa20>
    7890:	502d883a 	mov	r22,r10
    7894:	dac02417 	ldw	r11,144(sp)
    7898:	5d97883a 	add	r11,r11,r22
    789c:	dac02415 	stw	r11,144(sp)
    78a0:	1800751e 	bne	r3,zero,7a78 <___svfiprintf_internal_r+0xc04>
    78a4:	a8800007 	ldb	r2,0(r21)
    78a8:	d8001b15 	stw	zero,108(sp)
    78ac:	d811883a 	mov	r8,sp
    78b0:	103d961e 	bne	r2,zero,6f0c <__alt_mem_Flash_flash_data+0xf4006f0c>
    78b4:	a82d883a 	mov	r22,r21
    78b8:	003dad06 	br	6f70 <__alt_mem_Flash_flash_data+0xf4006f70>
    78bc:	10803fcc 	andi	r2,r2,255
    78c0:	00c00044 	movi	r3,1
    78c4:	10fe2f1e 	bne	r2,r3,7184 <__alt_mem_Flash_flash_data+0xf4007184>
    78c8:	5000e026 	beq	r10,zero,7c4c <___svfiprintf_internal_r+0xdd8>
    78cc:	dc002015 	stw	r16,128(sp)
    78d0:	dc402215 	stw	r17,136(sp)
    78d4:	dd801a04 	addi	r22,sp,104
    78d8:	402f883a 	mov	r23,r8
    78dc:	5839883a 	mov	fp,r11
    78e0:	4821883a 	mov	r16,r9
    78e4:	5023883a 	mov	r17,r10
    78e8:	8009883a 	mov	r4,r16
    78ec:	880b883a 	mov	r5,r17
    78f0:	01800284 	movi	r6,10
    78f4:	000f883a 	mov	r7,zero
    78f8:	00099840 	call	9984 <__umoddi3>
    78fc:	10800c04 	addi	r2,r2,48
    7900:	b5bfffc4 	addi	r22,r22,-1
    7904:	8009883a 	mov	r4,r16
    7908:	880b883a 	mov	r5,r17
    790c:	01800284 	movi	r6,10
    7910:	000f883a 	mov	r7,zero
    7914:	b0800005 	stb	r2,0(r22)
    7918:	00093c40 	call	93c4 <__udivdi3>
    791c:	1021883a 	mov	r16,r2
    7920:	10c4b03a 	or	r2,r2,r3
    7924:	1823883a 	mov	r17,r3
    7928:	103fef1e 	bne	r2,zero,78e8 <__alt_mem_Flash_flash_data+0xf40078e8>
    792c:	da801e17 	ldw	r10,120(sp)
    7930:	e017883a 	mov	r11,fp
    7934:	dc002017 	ldw	r16,128(sp)
    7938:	dc402217 	ldw	r17,136(sp)
    793c:	b811883a 	mov	r8,r23
    7940:	dd802615 	stw	r22,152(sp)
    7944:	55b9c83a 	sub	fp,r10,r22
    7948:	003e2006 	br	71cc <__alt_mem_Flash_flash_data+0xf40071cc>
    794c:	d8801c17 	ldw	r2,112(sp)
    7950:	10000426 	beq	r2,zero,7964 <___svfiprintf_internal_r+0xaf0>
    7954:	d9002917 	ldw	r4,164(sp)
    7958:	d9402717 	ldw	r5,156(sp)
    795c:	d9801a04 	addi	r6,sp,104
    7960:	0006ca80 	call	6ca8 <__ssprint_r>
    7964:	da802717 	ldw	r10,156(sp)
    7968:	5080030b 	ldhu	r2,12(r10)
    796c:	1080100c 	andi	r2,r2,64
    7970:	1000511e 	bne	r2,zero,7ab8 <___svfiprintf_internal_r+0xc44>
    7974:	d8802417 	ldw	r2,144(sp)
    7978:	dfc03617 	ldw	ra,216(sp)
    797c:	df003517 	ldw	fp,212(sp)
    7980:	ddc03417 	ldw	r23,208(sp)
    7984:	dd803317 	ldw	r22,204(sp)
    7988:	dd403217 	ldw	r21,200(sp)
    798c:	dd003117 	ldw	r20,196(sp)
    7990:	dcc03017 	ldw	r19,192(sp)
    7994:	dc802f17 	ldw	r18,188(sp)
    7998:	dc402e17 	ldw	r17,184(sp)
    799c:	dc002d17 	ldw	r16,180(sp)
    79a0:	dec03704 	addi	sp,sp,220
    79a4:	f800283a 	ret
    79a8:	da802117 	ldw	r10,132(sp)
    79ac:	dac02017 	ldw	r11,128(sp)
    79b0:	52edc83a 	sub	r22,r10,r11
    79b4:	05bf540e 	bge	zero,r22,7708 <__alt_mem_Flash_flash_data+0xf4007708>
    79b8:	02400404 	movi	r9,16
    79bc:	4d81210e 	bge	r9,r22,7e44 <___svfiprintf_internal_r+0xfd0>
    79c0:	014000b4 	movhi	r5,2
    79c4:	2963d804 	addi	r5,r5,-28832
    79c8:	d9402215 	stw	r5,136(sp)
    79cc:	05c001c4 	movi	r23,7
    79d0:	00000306 	br	79e0 <___svfiprintf_internal_r+0xb6c>
    79d4:	b5bffc04 	addi	r22,r22,-16
    79d8:	42000204 	addi	r8,r8,8
    79dc:	4d80130e 	bge	r9,r22,7a2c <___svfiprintf_internal_r+0xbb8>
    79e0:	18c00404 	addi	r3,r3,16
    79e4:	10800044 	addi	r2,r2,1
    79e8:	44c00015 	stw	r19,0(r8)
    79ec:	42400115 	stw	r9,4(r8)
    79f0:	d8c01c15 	stw	r3,112(sp)
    79f4:	d8801b15 	stw	r2,108(sp)
    79f8:	b8bff60e 	bge	r23,r2,79d4 <__alt_mem_Flash_flash_data+0xf40079d4>
    79fc:	9009883a 	mov	r4,r18
    7a00:	a00b883a 	mov	r5,r20
    7a04:	d9801a04 	addi	r6,sp,104
    7a08:	da402c15 	stw	r9,176(sp)
    7a0c:	0006ca80 	call	6ca8 <__ssprint_r>
    7a10:	da402c17 	ldw	r9,176(sp)
    7a14:	103fd31e 	bne	r2,zero,7964 <__alt_mem_Flash_flash_data+0xf4007964>
    7a18:	b5bffc04 	addi	r22,r22,-16
    7a1c:	d8c01c17 	ldw	r3,112(sp)
    7a20:	d8801b17 	ldw	r2,108(sp)
    7a24:	d811883a 	mov	r8,sp
    7a28:	4dbfed16 	blt	r9,r22,79e0 <__alt_mem_Flash_flash_data+0xf40079e0>
    7a2c:	da802217 	ldw	r10,136(sp)
    7a30:	1d87883a 	add	r3,r3,r22
    7a34:	10800044 	addi	r2,r2,1
    7a38:	42800015 	stw	r10,0(r8)
    7a3c:	45800115 	stw	r22,4(r8)
    7a40:	d8c01c15 	stw	r3,112(sp)
    7a44:	d8801b15 	stw	r2,108(sp)
    7a48:	010001c4 	movi	r4,7
    7a4c:	2080c616 	blt	r4,r2,7d68 <___svfiprintf_internal_r+0xef4>
    7a50:	42000204 	addi	r8,r8,8
    7a54:	003f2c06 	br	7708 <__alt_mem_Flash_flash_data+0xf4007708>
    7a58:	9009883a 	mov	r4,r18
    7a5c:	a00b883a 	mov	r5,r20
    7a60:	d9801a04 	addi	r6,sp,104
    7a64:	0006ca80 	call	6ca8 <__ssprint_r>
    7a68:	103fbe1e 	bne	r2,zero,7964 <__alt_mem_Flash_flash_data+0xf4007964>
    7a6c:	d8c01c17 	ldw	r3,112(sp)
    7a70:	d811883a 	mov	r8,sp
    7a74:	003f5606 	br	77d0 <__alt_mem_Flash_flash_data+0xf40077d0>
    7a78:	9009883a 	mov	r4,r18
    7a7c:	a00b883a 	mov	r5,r20
    7a80:	d9801a04 	addi	r6,sp,104
    7a84:	0006ca80 	call	6ca8 <__ssprint_r>
    7a88:	103f8626 	beq	r2,zero,78a4 <__alt_mem_Flash_flash_data+0xf40078a4>
    7a8c:	003fb506 	br	7964 <__alt_mem_Flash_flash_data+0xf4007964>
    7a90:	10803fcc 	andi	r2,r2,255
    7a94:	10003b1e 	bne	r2,zero,7b84 <___svfiprintf_internal_r+0xd10>
    7a98:	8880004c 	andi	r2,r17,1
    7a9c:	10007d26 	beq	r2,zero,7c94 <___svfiprintf_internal_r+0xe20>
    7aa0:	00800c04 	movi	r2,48
    7aa4:	d8c019c4 	addi	r3,sp,103
    7aa8:	d88019c5 	stb	r2,103(sp)
    7aac:	df002b17 	ldw	fp,172(sp)
    7ab0:	d8c02615 	stw	r3,152(sp)
    7ab4:	003dc506 	br	71cc <__alt_mem_Flash_flash_data+0xf40071cc>
    7ab8:	00bfffc4 	movi	r2,-1
    7abc:	003fae06 	br	7978 <__alt_mem_Flash_flash_data+0xf4007978>
    7ac0:	9009883a 	mov	r4,r18
    7ac4:	a00b883a 	mov	r5,r20
    7ac8:	d9801a04 	addi	r6,sp,104
    7acc:	0006ca80 	call	6ca8 <__ssprint_r>
    7ad0:	103fa41e 	bne	r2,zero,7964 <__alt_mem_Flash_flash_data+0xf4007964>
    7ad4:	d811883a 	mov	r8,sp
    7ad8:	003d2206 	br	6f64 <__alt_mem_Flash_flash_data+0xf4006f64>
    7adc:	9009883a 	mov	r4,r18
    7ae0:	a00b883a 	mov	r5,r20
    7ae4:	d9801a04 	addi	r6,sp,104
    7ae8:	0006ca80 	call	6ca8 <__ssprint_r>
    7aec:	103f9d1e 	bne	r2,zero,7964 <__alt_mem_Flash_flash_data+0xf4007964>
    7af0:	d8c01c17 	ldw	r3,112(sp)
    7af4:	d8801b17 	ldw	r2,108(sp)
    7af8:	d811883a 	mov	r8,sp
    7afc:	003f2a06 	br	77a8 <__alt_mem_Flash_flash_data+0xf40077a8>
    7b00:	d9402a17 	ldw	r5,168(sp)
    7b04:	d8c01a04 	addi	r3,sp,104
    7b08:	488003cc 	andi	r2,r9,15
    7b0c:	5008973a 	slli	r4,r10,28
    7b10:	2885883a 	add	r2,r5,r2
    7b14:	4812d13a 	srli	r9,r9,4
    7b18:	10800003 	ldbu	r2,0(r2)
    7b1c:	5014d13a 	srli	r10,r10,4
    7b20:	18ffffc4 	addi	r3,r3,-1
    7b24:	2252b03a 	or	r9,r4,r9
    7b28:	18800005 	stb	r2,0(r3)
    7b2c:	4a84b03a 	or	r2,r9,r10
    7b30:	103ff51e 	bne	r2,zero,7b08 <__alt_mem_Flash_flash_data+0xf4007b08>
    7b34:	d8c02615 	stw	r3,152(sp)
    7b38:	003da206 	br	71c4 <__alt_mem_Flash_flash_data+0xf40071c4>
    7b3c:	9009883a 	mov	r4,r18
    7b40:	a00b883a 	mov	r5,r20
    7b44:	d9801a04 	addi	r6,sp,104
    7b48:	0006ca80 	call	6ca8 <__ssprint_r>
    7b4c:	103f851e 	bne	r2,zero,7964 <__alt_mem_Flash_flash_data+0xf4007964>
    7b50:	d8c01c17 	ldw	r3,112(sp)
    7b54:	d8801b17 	ldw	r2,108(sp)
    7b58:	d811883a 	mov	r8,sp
    7b5c:	003eda06 	br	76c8 <__alt_mem_Flash_flash_data+0xf40076c8>
    7b60:	9009883a 	mov	r4,r18
    7b64:	a00b883a 	mov	r5,r20
    7b68:	d9801a04 	addi	r6,sp,104
    7b6c:	0006ca80 	call	6ca8 <__ssprint_r>
    7b70:	103f7c1e 	bne	r2,zero,7964 <__alt_mem_Flash_flash_data+0xf4007964>
    7b74:	d8c01c17 	ldw	r3,112(sp)
    7b78:	d8801b17 	ldw	r2,108(sp)
    7b7c:	d811883a 	mov	r8,sp
    7b80:	003ede06 	br	76fc <__alt_mem_Flash_flash_data+0xf40076fc>
    7b84:	da801a04 	addi	r10,sp,104
    7b88:	da802615 	stw	r10,152(sp)
    7b8c:	003d8f06 	br	71cc <__alt_mem_Flash_flash_data+0xf40071cc>
    7b90:	8880040c 	andi	r2,r17,16
    7b94:	10004c1e 	bne	r2,zero,7cc8 <___svfiprintf_internal_r+0xe54>
    7b98:	8880100c 	andi	r2,r17,64
    7b9c:	da802317 	ldw	r10,140(sp)
    7ba0:	10004a26 	beq	r2,zero,7ccc <___svfiprintf_internal_r+0xe58>
    7ba4:	5240000b 	ldhu	r9,0(r10)
    7ba8:	dac02317 	ldw	r11,140(sp)
    7bac:	0015883a 	mov	r10,zero
    7bb0:	00800044 	movi	r2,1
    7bb4:	5ac00104 	addi	r11,r11,4
    7bb8:	dac02315 	stw	r11,140(sp)
    7bbc:	4807883a 	mov	r3,r9
    7bc0:	003d6506 	br	7158 <__alt_mem_Flash_flash_data+0xf4007158>
    7bc4:	9009883a 	mov	r4,r18
    7bc8:	a00b883a 	mov	r5,r20
    7bcc:	d9801a04 	addi	r6,sp,104
    7bd0:	0006ca80 	call	6ca8 <__ssprint_r>
    7bd4:	103f631e 	bne	r2,zero,7964 <__alt_mem_Flash_flash_data+0xf4007964>
    7bd8:	d8c01c17 	ldw	r3,112(sp)
    7bdc:	d8801b17 	ldw	r2,108(sp)
    7be0:	d811883a 	mov	r8,sp
    7be4:	003eab06 	br	7694 <__alt_mem_Flash_flash_data+0xf4007694>
    7be8:	8880040c 	andi	r2,r17,16
    7bec:	1000331e 	bne	r2,zero,7cbc <___svfiprintf_internal_r+0xe48>
    7bf0:	8880100c 	andi	r2,r17,64
    7bf4:	da802317 	ldw	r10,140(sp)
    7bf8:	10003126 	beq	r2,zero,7cc0 <___svfiprintf_internal_r+0xe4c>
    7bfc:	5240000b 	ldhu	r9,0(r10)
    7c00:	dac02317 	ldw	r11,140(sp)
    7c04:	0015883a 	mov	r10,zero
    7c08:	0005883a 	mov	r2,zero
    7c0c:	5ac00104 	addi	r11,r11,4
    7c10:	dac02315 	stw	r11,140(sp)
    7c14:	4807883a 	mov	r3,r9
    7c18:	003d4f06 	br	7158 <__alt_mem_Flash_flash_data+0xf4007158>
    7c1c:	10803fcc 	andi	r2,r2,255
    7c20:	1080201c 	xori	r2,r2,128
    7c24:	10bfe004 	addi	r2,r2,-128
    7c28:	01000c04 	movi	r4,48
    7c2c:	11005b26 	beq	r2,r4,7d9c <___svfiprintf_internal_r+0xf28>
    7c30:	da802617 	ldw	r10,152(sp)
    7c34:	d8801e17 	ldw	r2,120(sp)
    7c38:	193fffc5 	stb	r4,-1(r3)
    7c3c:	52bfffc4 	addi	r10,r10,-1
    7c40:	da802615 	stw	r10,152(sp)
    7c44:	12b9c83a 	sub	fp,r2,r10
    7c48:	003d6006 	br	71cc <__alt_mem_Flash_flash_data+0xf40071cc>
    7c4c:	00800244 	movi	r2,9
    7c50:	127f1e36 	bltu	r2,r9,78cc <__alt_mem_Flash_flash_data+0xf40078cc>
    7c54:	4a400c04 	addi	r9,r9,48
    7c58:	d8c019c4 	addi	r3,sp,103
    7c5c:	da4019c5 	stb	r9,103(sp)
    7c60:	df002b17 	ldw	fp,172(sp)
    7c64:	d8c02615 	stw	r3,152(sp)
    7c68:	003d5806 	br	71cc <__alt_mem_Flash_flash_data+0xf40071cc>
    7c6c:	d8802315 	stw	r2,140(sp)
    7c70:	a9000007 	ldb	r4,0(r21)
    7c74:	003ccb06 	br	6fa4 <__alt_mem_Flash_flash_data+0xf4006fa4>
    7c78:	9009883a 	mov	r4,r18
    7c7c:	a00b883a 	mov	r5,r20
    7c80:	d9801a04 	addi	r6,sp,104
    7c84:	0006ca80 	call	6ca8 <__ssprint_r>
    7c88:	103f361e 	bne	r2,zero,7964 <__alt_mem_Flash_flash_data+0xf4007964>
    7c8c:	d8c01c17 	ldw	r3,112(sp)
    7c90:	003efc06 	br	7884 <__alt_mem_Flash_flash_data+0xf4007884>
    7c94:	d8c01a04 	addi	r3,sp,104
    7c98:	d8c02615 	stw	r3,152(sp)
    7c9c:	003d4b06 	br	71cc <__alt_mem_Flash_flash_data+0xf40071cc>
    7ca0:	da802317 	ldw	r10,140(sp)
    7ca4:	1a400017 	ldw	r9,0(r3)
    7ca8:	52800104 	addi	r10,r10,4
    7cac:	da802315 	stw	r10,140(sp)
    7cb0:	4815d7fa 	srai	r10,r9,31
    7cb4:	5005883a 	mov	r2,r10
    7cb8:	003d9c06 	br	732c <__alt_mem_Flash_flash_data+0xf400732c>
    7cbc:	da802317 	ldw	r10,140(sp)
    7cc0:	52400017 	ldw	r9,0(r10)
    7cc4:	003fce06 	br	7c00 <__alt_mem_Flash_flash_data+0xf4007c00>
    7cc8:	da802317 	ldw	r10,140(sp)
    7ccc:	52400017 	ldw	r9,0(r10)
    7cd0:	003fb506 	br	7ba8 <__alt_mem_Flash_flash_data+0xf4007ba8>
    7cd4:	8880100c 	andi	r2,r17,64
    7cd8:	da802317 	ldw	r10,140(sp)
    7cdc:	103e1926 	beq	r2,zero,7544 <__alt_mem_Flash_flash_data+0xf4007544>
    7ce0:	dac02317 	ldw	r11,140(sp)
    7ce4:	5240000b 	ldhu	r9,0(r10)
    7ce8:	0015883a 	mov	r10,zero
    7cec:	5ac00104 	addi	r11,r11,4
    7cf0:	dac02315 	stw	r11,140(sp)
    7cf4:	003de406 	br	7488 <__alt_mem_Flash_flash_data+0xf4007488>
    7cf8:	a9000007 	ldb	r4,0(r21)
    7cfc:	003ca906 	br	6fa4 <__alt_mem_Flash_flash_data+0xf4006fa4>
    7d00:	dac02317 	ldw	r11,140(sp)
    7d04:	da802417 	ldw	r10,144(sp)
    7d08:	58800017 	ldw	r2,0(r11)
    7d0c:	5007d7fa 	srai	r3,r10,31
    7d10:	5ac00104 	addi	r11,r11,4
    7d14:	dac02315 	stw	r11,140(sp)
    7d18:	12800015 	stw	r10,0(r2)
    7d1c:	10c00115 	stw	r3,4(r2)
    7d20:	003c7806 	br	6f04 <__alt_mem_Flash_flash_data+0xf4006f04>
    7d24:	00800c04 	movi	r2,48
    7d28:	d8801d05 	stb	r2,116(sp)
    7d2c:	d9001d45 	stb	r4,117(sp)
    7d30:	8c400094 	ori	r17,r17,2
    7d34:	00800084 	movi	r2,2
    7d38:	003d0706 	br	7158 <__alt_mem_Flash_flash_data+0xf4007158>
    7d3c:	ad400044 	addi	r21,r21,1
    7d40:	8c400814 	ori	r17,r17,32
    7d44:	11000047 	ldb	r4,1(r2)
    7d48:	003c9606 	br	6fa4 <__alt_mem_Flash_flash_data+0xf4006fa4>
    7d4c:	dac02317 	ldw	r11,140(sp)
    7d50:	da802417 	ldw	r10,144(sp)
    7d54:	58800017 	ldw	r2,0(r11)
    7d58:	5ac00104 	addi	r11,r11,4
    7d5c:	dac02315 	stw	r11,140(sp)
    7d60:	12800015 	stw	r10,0(r2)
    7d64:	003c6706 	br	6f04 <__alt_mem_Flash_flash_data+0xf4006f04>
    7d68:	9009883a 	mov	r4,r18
    7d6c:	a00b883a 	mov	r5,r20
    7d70:	d9801a04 	addi	r6,sp,104
    7d74:	0006ca80 	call	6ca8 <__ssprint_r>
    7d78:	103efa1e 	bne	r2,zero,7964 <__alt_mem_Flash_flash_data+0xf4007964>
    7d7c:	d8c01c17 	ldw	r3,112(sp)
    7d80:	d8801b17 	ldw	r2,108(sp)
    7d84:	d811883a 	mov	r8,sp
    7d88:	003e5f06 	br	7708 <__alt_mem_Flash_flash_data+0xf4007708>
    7d8c:	02c000b4 	movhi	r11,2
    7d90:	5ae3d804 	addi	r11,r11,-28832
    7d94:	dac02215 	stw	r11,136(sp)
    7d98:	003e7906 	br	7780 <__alt_mem_Flash_flash_data+0xf4007780>
    7d9c:	da801e17 	ldw	r10,120(sp)
    7da0:	d8c02617 	ldw	r3,152(sp)
    7da4:	50f9c83a 	sub	fp,r10,r3
    7da8:	003d0806 	br	71cc <__alt_mem_Flash_flash_data+0xf40071cc>
    7dac:	da002c15 	stw	r8,176(sp)
    7db0:	0000c200 	call	c20 <strlen>
    7db4:	1039883a 	mov	fp,r2
    7db8:	dac01d83 	ldbu	r11,118(sp)
    7dbc:	ddc02315 	stw	r23,140(sp)
    7dc0:	0021883a 	mov	r16,zero
    7dc4:	da002c17 	ldw	r8,176(sp)
    7dc8:	003d0006 	br	71cc <__alt_mem_Flash_flash_data+0xf40071cc>
    7dcc:	00800184 	movi	r2,6
    7dd0:	1400012e 	bgeu	r2,r16,7dd8 <___svfiprintf_internal_r+0xf64>
    7dd4:	1021883a 	mov	r16,r2
    7dd8:	8039883a 	mov	fp,r16
    7ddc:	802d883a 	mov	r22,r16
    7de0:	80002116 	blt	r16,zero,7e68 <___svfiprintf_internal_r+0xff4>
    7de4:	008000b4 	movhi	r2,2
    7de8:	10a37c04 	addi	r2,r2,-29200
    7dec:	dd802015 	stw	r22,128(sp)
    7df0:	ddc02315 	stw	r23,140(sp)
    7df4:	d8802615 	stw	r2,152(sp)
    7df8:	003d5d06 	br	7370 <__alt_mem_Flash_flash_data+0xf4007370>
    7dfc:	04001004 	movi	r16,64
    7e00:	800b883a 	mov	r5,r16
    7e04:	0004b100 	call	4b10 <_malloc_r>
    7e08:	da802717 	ldw	r10,156(sp)
    7e0c:	50800015 	stw	r2,0(r10)
    7e10:	50800415 	stw	r2,16(r10)
    7e14:	10002026 	beq	r2,zero,7e98 <___svfiprintf_internal_r+0x1024>
    7e18:	da802717 	ldw	r10,156(sp)
    7e1c:	54000515 	stw	r16,20(r10)
    7e20:	003c2806 	br	6ec4 <__alt_mem_Flash_flash_data+0xf4006ec4>
    7e24:	010000b4 	movhi	r4,2
    7e28:	2123dc04 	addi	r4,r4,-28816
    7e2c:	d9002815 	stw	r4,160(sp)
    7e30:	003d7e06 	br	742c <__alt_mem_Flash_flash_data+0xf400742c>
    7e34:	010000b4 	movhi	r4,2
    7e38:	2123dc04 	addi	r4,r4,-28816
    7e3c:	d9002815 	stw	r4,160(sp)
    7e40:	003e8706 	br	7860 <__alt_mem_Flash_flash_data+0xf4007860>
    7e44:	010000b4 	movhi	r4,2
    7e48:	2123d804 	addi	r4,r4,-28832
    7e4c:	d9002215 	stw	r4,136(sp)
    7e50:	003ef606 	br	7a2c <__alt_mem_Flash_flash_data+0xf4007a2c>
    7e54:	8039883a 	mov	fp,r16
    7e58:	dac01d83 	ldbu	r11,118(sp)
    7e5c:	ddc02315 	stw	r23,140(sp)
    7e60:	0021883a 	mov	r16,zero
    7e64:	003cd906 	br	71cc <__alt_mem_Flash_flash_data+0xf40071cc>
    7e68:	002d883a 	mov	r22,zero
    7e6c:	003fdd06 	br	7de4 <__alt_mem_Flash_flash_data+0xf4007de4>
    7e70:	dac02317 	ldw	r11,140(sp)
    7e74:	a805883a 	mov	r2,r21
    7e78:	502b883a 	mov	r21,r10
    7e7c:	5c000017 	ldw	r16,0(r11)
    7e80:	59000104 	addi	r4,r11,4
    7e84:	d9002315 	stw	r4,140(sp)
    7e88:	803fae0e 	bge	r16,zero,7d44 <__alt_mem_Flash_flash_data+0xf4007d44>
    7e8c:	043fffc4 	movi	r16,-1
    7e90:	11000047 	ldb	r4,1(r2)
    7e94:	003c4306 	br	6fa4 <__alt_mem_Flash_flash_data+0xf4006fa4>
    7e98:	dac02917 	ldw	r11,164(sp)
    7e9c:	00800304 	movi	r2,12
    7ea0:	58800015 	stw	r2,0(r11)
    7ea4:	00bfffc4 	movi	r2,-1
    7ea8:	003eb306 	br	7978 <__alt_mem_Flash_flash_data+0xf4007978>

00007eac <__swsetup_r>:
    7eac:	008000b4 	movhi	r2,2
    7eb0:	defffd04 	addi	sp,sp,-12
    7eb4:	10ac7504 	addi	r2,r2,-20012
    7eb8:	dc400115 	stw	r17,4(sp)
    7ebc:	2023883a 	mov	r17,r4
    7ec0:	11000017 	ldw	r4,0(r2)
    7ec4:	dc000015 	stw	r16,0(sp)
    7ec8:	dfc00215 	stw	ra,8(sp)
    7ecc:	2821883a 	mov	r16,r5
    7ed0:	20000226 	beq	r4,zero,7edc <__swsetup_r+0x30>
    7ed4:	20c00e17 	ldw	r3,56(r4)
    7ed8:	18003126 	beq	r3,zero,7fa0 <__swsetup_r+0xf4>
    7edc:	8080030b 	ldhu	r2,12(r16)
    7ee0:	10c0020c 	andi	r3,r2,8
    7ee4:	100d883a 	mov	r6,r2
    7ee8:	18000f26 	beq	r3,zero,7f28 <__swsetup_r+0x7c>
    7eec:	80c00417 	ldw	r3,16(r16)
    7ef0:	18001526 	beq	r3,zero,7f48 <__swsetup_r+0x9c>
    7ef4:	1100004c 	andi	r4,r2,1
    7ef8:	20001c1e 	bne	r4,zero,7f6c <__swsetup_r+0xc0>
    7efc:	1080008c 	andi	r2,r2,2
    7f00:	1000291e 	bne	r2,zero,7fa8 <__swsetup_r+0xfc>
    7f04:	80800517 	ldw	r2,20(r16)
    7f08:	80800215 	stw	r2,8(r16)
    7f0c:	18001c26 	beq	r3,zero,7f80 <__swsetup_r+0xd4>
    7f10:	0005883a 	mov	r2,zero
    7f14:	dfc00217 	ldw	ra,8(sp)
    7f18:	dc400117 	ldw	r17,4(sp)
    7f1c:	dc000017 	ldw	r16,0(sp)
    7f20:	dec00304 	addi	sp,sp,12
    7f24:	f800283a 	ret
    7f28:	3080040c 	andi	r2,r6,16
    7f2c:	10002e26 	beq	r2,zero,7fe8 <__swsetup_r+0x13c>
    7f30:	3080010c 	andi	r2,r6,4
    7f34:	10001e1e 	bne	r2,zero,7fb0 <__swsetup_r+0x104>
    7f38:	80c00417 	ldw	r3,16(r16)
    7f3c:	30800214 	ori	r2,r6,8
    7f40:	8080030d 	sth	r2,12(r16)
    7f44:	183feb1e 	bne	r3,zero,7ef4 <__alt_mem_Flash_flash_data+0xf4007ef4>
    7f48:	1140a00c 	andi	r5,r2,640
    7f4c:	01008004 	movi	r4,512
    7f50:	293fe826 	beq	r5,r4,7ef4 <__alt_mem_Flash_flash_data+0xf4007ef4>
    7f54:	8809883a 	mov	r4,r17
    7f58:	800b883a 	mov	r5,r16
    7f5c:	0008c940 	call	8c94 <__smakebuf_r>
    7f60:	8080030b 	ldhu	r2,12(r16)
    7f64:	80c00417 	ldw	r3,16(r16)
    7f68:	003fe206 	br	7ef4 <__alt_mem_Flash_flash_data+0xf4007ef4>
    7f6c:	80800517 	ldw	r2,20(r16)
    7f70:	80000215 	stw	zero,8(r16)
    7f74:	0085c83a 	sub	r2,zero,r2
    7f78:	80800615 	stw	r2,24(r16)
    7f7c:	183fe41e 	bne	r3,zero,7f10 <__alt_mem_Flash_flash_data+0xf4007f10>
    7f80:	80c0030b 	ldhu	r3,12(r16)
    7f84:	0005883a 	mov	r2,zero
    7f88:	1900200c 	andi	r4,r3,128
    7f8c:	203fe126 	beq	r4,zero,7f14 <__alt_mem_Flash_flash_data+0xf4007f14>
    7f90:	18c01014 	ori	r3,r3,64
    7f94:	80c0030d 	sth	r3,12(r16)
    7f98:	00bfffc4 	movi	r2,-1
    7f9c:	003fdd06 	br	7f14 <__alt_mem_Flash_flash_data+0xf4007f14>
    7fa0:	00086a80 	call	86a8 <__sinit>
    7fa4:	003fcd06 	br	7edc <__alt_mem_Flash_flash_data+0xf4007edc>
    7fa8:	0005883a 	mov	r2,zero
    7fac:	003fd606 	br	7f08 <__alt_mem_Flash_flash_data+0xf4007f08>
    7fb0:	81400c17 	ldw	r5,48(r16)
    7fb4:	28000626 	beq	r5,zero,7fd0 <__swsetup_r+0x124>
    7fb8:	80801004 	addi	r2,r16,64
    7fbc:	28800326 	beq	r5,r2,7fcc <__swsetup_r+0x120>
    7fc0:	8809883a 	mov	r4,r17
    7fc4:	000881c0 	call	881c <_free_r>
    7fc8:	8180030b 	ldhu	r6,12(r16)
    7fcc:	80000c15 	stw	zero,48(r16)
    7fd0:	80c00417 	ldw	r3,16(r16)
    7fd4:	00bff6c4 	movi	r2,-37
    7fd8:	118c703a 	and	r6,r2,r6
    7fdc:	80000115 	stw	zero,4(r16)
    7fe0:	80c00015 	stw	r3,0(r16)
    7fe4:	003fd506 	br	7f3c <__alt_mem_Flash_flash_data+0xf4007f3c>
    7fe8:	00800244 	movi	r2,9
    7fec:	88800015 	stw	r2,0(r17)
    7ff0:	30801014 	ori	r2,r6,64
    7ff4:	8080030d 	sth	r2,12(r16)
    7ff8:	00bfffc4 	movi	r2,-1
    7ffc:	003fc506 	br	7f14 <__alt_mem_Flash_flash_data+0xf4007f14>

00008000 <_calloc_r>:
    8000:	298b383a 	mul	r5,r5,r6
    8004:	defffe04 	addi	sp,sp,-8
    8008:	dc000015 	stw	r16,0(sp)
    800c:	dfc00115 	stw	ra,4(sp)
    8010:	0004b100 	call	4b10 <_malloc_r>
    8014:	1021883a 	mov	r16,r2
    8018:	10002826 	beq	r2,zero,80bc <_calloc_r+0xbc>
    801c:	11bfff17 	ldw	r6,-4(r2)
    8020:	00bfff04 	movi	r2,-4
    8024:	00c00904 	movi	r3,36
    8028:	308c703a 	and	r6,r6,r2
    802c:	308d883a 	add	r6,r6,r2
    8030:	19801436 	bltu	r3,r6,8084 <_calloc_r+0x84>
    8034:	008004c4 	movi	r2,19
    8038:	11800936 	bltu	r2,r6,8060 <_calloc_r+0x60>
    803c:	8005883a 	mov	r2,r16
    8040:	10000015 	stw	zero,0(r2)
    8044:	10000115 	stw	zero,4(r2)
    8048:	10000215 	stw	zero,8(r2)
    804c:	8005883a 	mov	r2,r16
    8050:	dfc00117 	ldw	ra,4(sp)
    8054:	dc000017 	ldw	r16,0(sp)
    8058:	dec00204 	addi	sp,sp,8
    805c:	f800283a 	ret
    8060:	80000015 	stw	zero,0(r16)
    8064:	80000115 	stw	zero,4(r16)
    8068:	008006c4 	movi	r2,27
    806c:	11800d2e 	bgeu	r2,r6,80a4 <_calloc_r+0xa4>
    8070:	80000215 	stw	zero,8(r16)
    8074:	80000315 	stw	zero,12(r16)
    8078:	30c00c26 	beq	r6,r3,80ac <_calloc_r+0xac>
    807c:	80800404 	addi	r2,r16,16
    8080:	003fef06 	br	8040 <__alt_mem_Flash_flash_data+0xf4008040>
    8084:	8009883a 	mov	r4,r16
    8088:	000b883a 	mov	r5,zero
    808c:	0008e4c0 	call	8e4c <memset>
    8090:	8005883a 	mov	r2,r16
    8094:	dfc00117 	ldw	ra,4(sp)
    8098:	dc000017 	ldw	r16,0(sp)
    809c:	dec00204 	addi	sp,sp,8
    80a0:	f800283a 	ret
    80a4:	80800204 	addi	r2,r16,8
    80a8:	003fe506 	br	8040 <__alt_mem_Flash_flash_data+0xf4008040>
    80ac:	80000415 	stw	zero,16(r16)
    80b0:	80800604 	addi	r2,r16,24
    80b4:	80000515 	stw	zero,20(r16)
    80b8:	003fe106 	br	8040 <__alt_mem_Flash_flash_data+0xf4008040>
    80bc:	0005883a 	mov	r2,zero
    80c0:	003fe306 	br	8050 <__alt_mem_Flash_flash_data+0xf4008050>

000080c4 <__sflush_r>:
    80c4:	2880030b 	ldhu	r2,12(r5)
    80c8:	defffb04 	addi	sp,sp,-20
    80cc:	dcc00315 	stw	r19,12(sp)
    80d0:	dc400115 	stw	r17,4(sp)
    80d4:	dfc00415 	stw	ra,16(sp)
    80d8:	dc800215 	stw	r18,8(sp)
    80dc:	dc000015 	stw	r16,0(sp)
    80e0:	10c0020c 	andi	r3,r2,8
    80e4:	2823883a 	mov	r17,r5
    80e8:	2027883a 	mov	r19,r4
    80ec:	1800311e 	bne	r3,zero,81b4 <__sflush_r+0xf0>
    80f0:	28c00117 	ldw	r3,4(r5)
    80f4:	10820014 	ori	r2,r2,2048
    80f8:	2880030d 	sth	r2,12(r5)
    80fc:	00c04b0e 	bge	zero,r3,822c <__sflush_r+0x168>
    8100:	8a000a17 	ldw	r8,40(r17)
    8104:	40002326 	beq	r8,zero,8194 <__sflush_r+0xd0>
    8108:	9c000017 	ldw	r16,0(r19)
    810c:	10c4000c 	andi	r3,r2,4096
    8110:	98000015 	stw	zero,0(r19)
    8114:	18004826 	beq	r3,zero,8238 <__sflush_r+0x174>
    8118:	89801417 	ldw	r6,80(r17)
    811c:	10c0010c 	andi	r3,r2,4
    8120:	18000626 	beq	r3,zero,813c <__sflush_r+0x78>
    8124:	88c00117 	ldw	r3,4(r17)
    8128:	88800c17 	ldw	r2,48(r17)
    812c:	30cdc83a 	sub	r6,r6,r3
    8130:	10000226 	beq	r2,zero,813c <__sflush_r+0x78>
    8134:	88800f17 	ldw	r2,60(r17)
    8138:	308dc83a 	sub	r6,r6,r2
    813c:	89400717 	ldw	r5,28(r17)
    8140:	9809883a 	mov	r4,r19
    8144:	000f883a 	mov	r7,zero
    8148:	403ee83a 	callr	r8
    814c:	00ffffc4 	movi	r3,-1
    8150:	10c04426 	beq	r2,r3,8264 <__sflush_r+0x1a0>
    8154:	88c0030b 	ldhu	r3,12(r17)
    8158:	89000417 	ldw	r4,16(r17)
    815c:	88000115 	stw	zero,4(r17)
    8160:	197dffcc 	andi	r5,r3,63487
    8164:	8940030d 	sth	r5,12(r17)
    8168:	89000015 	stw	r4,0(r17)
    816c:	18c4000c 	andi	r3,r3,4096
    8170:	18002c1e 	bne	r3,zero,8224 <__sflush_r+0x160>
    8174:	89400c17 	ldw	r5,48(r17)
    8178:	9c000015 	stw	r16,0(r19)
    817c:	28000526 	beq	r5,zero,8194 <__sflush_r+0xd0>
    8180:	88801004 	addi	r2,r17,64
    8184:	28800226 	beq	r5,r2,8190 <__sflush_r+0xcc>
    8188:	9809883a 	mov	r4,r19
    818c:	000881c0 	call	881c <_free_r>
    8190:	88000c15 	stw	zero,48(r17)
    8194:	0005883a 	mov	r2,zero
    8198:	dfc00417 	ldw	ra,16(sp)
    819c:	dcc00317 	ldw	r19,12(sp)
    81a0:	dc800217 	ldw	r18,8(sp)
    81a4:	dc400117 	ldw	r17,4(sp)
    81a8:	dc000017 	ldw	r16,0(sp)
    81ac:	dec00504 	addi	sp,sp,20
    81b0:	f800283a 	ret
    81b4:	2c800417 	ldw	r18,16(r5)
    81b8:	903ff626 	beq	r18,zero,8194 <__alt_mem_Flash_flash_data+0xf4008194>
    81bc:	2c000017 	ldw	r16,0(r5)
    81c0:	108000cc 	andi	r2,r2,3
    81c4:	2c800015 	stw	r18,0(r5)
    81c8:	84a1c83a 	sub	r16,r16,r18
    81cc:	1000131e 	bne	r2,zero,821c <__sflush_r+0x158>
    81d0:	28800517 	ldw	r2,20(r5)
    81d4:	88800215 	stw	r2,8(r17)
    81d8:	04000316 	blt	zero,r16,81e8 <__sflush_r+0x124>
    81dc:	003fed06 	br	8194 <__alt_mem_Flash_flash_data+0xf4008194>
    81e0:	90a5883a 	add	r18,r18,r2
    81e4:	043feb0e 	bge	zero,r16,8194 <__alt_mem_Flash_flash_data+0xf4008194>
    81e8:	88800917 	ldw	r2,36(r17)
    81ec:	89400717 	ldw	r5,28(r17)
    81f0:	800f883a 	mov	r7,r16
    81f4:	900d883a 	mov	r6,r18
    81f8:	9809883a 	mov	r4,r19
    81fc:	103ee83a 	callr	r2
    8200:	80a1c83a 	sub	r16,r16,r2
    8204:	00bff616 	blt	zero,r2,81e0 <__alt_mem_Flash_flash_data+0xf40081e0>
    8208:	88c0030b 	ldhu	r3,12(r17)
    820c:	00bfffc4 	movi	r2,-1
    8210:	18c01014 	ori	r3,r3,64
    8214:	88c0030d 	sth	r3,12(r17)
    8218:	003fdf06 	br	8198 <__alt_mem_Flash_flash_data+0xf4008198>
    821c:	0005883a 	mov	r2,zero
    8220:	003fec06 	br	81d4 <__alt_mem_Flash_flash_data+0xf40081d4>
    8224:	88801415 	stw	r2,80(r17)
    8228:	003fd206 	br	8174 <__alt_mem_Flash_flash_data+0xf4008174>
    822c:	28c00f17 	ldw	r3,60(r5)
    8230:	00ffb316 	blt	zero,r3,8100 <__alt_mem_Flash_flash_data+0xf4008100>
    8234:	003fd706 	br	8194 <__alt_mem_Flash_flash_data+0xf4008194>
    8238:	89400717 	ldw	r5,28(r17)
    823c:	000d883a 	mov	r6,zero
    8240:	9809883a 	mov	r4,r19
    8244:	01c00044 	movi	r7,1
    8248:	403ee83a 	callr	r8
    824c:	100d883a 	mov	r6,r2
    8250:	00bfffc4 	movi	r2,-1
    8254:	30801426 	beq	r6,r2,82a8 <__sflush_r+0x1e4>
    8258:	8880030b 	ldhu	r2,12(r17)
    825c:	8a000a17 	ldw	r8,40(r17)
    8260:	003fae06 	br	811c <__alt_mem_Flash_flash_data+0xf400811c>
    8264:	98c00017 	ldw	r3,0(r19)
    8268:	183fba26 	beq	r3,zero,8154 <__alt_mem_Flash_flash_data+0xf4008154>
    826c:	01000744 	movi	r4,29
    8270:	19000626 	beq	r3,r4,828c <__sflush_r+0x1c8>
    8274:	01000584 	movi	r4,22
    8278:	19000426 	beq	r3,r4,828c <__sflush_r+0x1c8>
    827c:	88c0030b 	ldhu	r3,12(r17)
    8280:	18c01014 	ori	r3,r3,64
    8284:	88c0030d 	sth	r3,12(r17)
    8288:	003fc306 	br	8198 <__alt_mem_Flash_flash_data+0xf4008198>
    828c:	8880030b 	ldhu	r2,12(r17)
    8290:	88c00417 	ldw	r3,16(r17)
    8294:	88000115 	stw	zero,4(r17)
    8298:	10bdffcc 	andi	r2,r2,63487
    829c:	8880030d 	sth	r2,12(r17)
    82a0:	88c00015 	stw	r3,0(r17)
    82a4:	003fb306 	br	8174 <__alt_mem_Flash_flash_data+0xf4008174>
    82a8:	98800017 	ldw	r2,0(r19)
    82ac:	103fea26 	beq	r2,zero,8258 <__alt_mem_Flash_flash_data+0xf4008258>
    82b0:	00c00744 	movi	r3,29
    82b4:	10c00226 	beq	r2,r3,82c0 <__sflush_r+0x1fc>
    82b8:	00c00584 	movi	r3,22
    82bc:	10ffd21e 	bne	r2,r3,8208 <__alt_mem_Flash_flash_data+0xf4008208>
    82c0:	9c000015 	stw	r16,0(r19)
    82c4:	0005883a 	mov	r2,zero
    82c8:	003fb306 	br	8198 <__alt_mem_Flash_flash_data+0xf4008198>

000082cc <_fflush_r>:
    82cc:	defffd04 	addi	sp,sp,-12
    82d0:	dc000115 	stw	r16,4(sp)
    82d4:	dfc00215 	stw	ra,8(sp)
    82d8:	2021883a 	mov	r16,r4
    82dc:	20000226 	beq	r4,zero,82e8 <_fflush_r+0x1c>
    82e0:	20800e17 	ldw	r2,56(r4)
    82e4:	10000c26 	beq	r2,zero,8318 <_fflush_r+0x4c>
    82e8:	2880030f 	ldh	r2,12(r5)
    82ec:	1000051e 	bne	r2,zero,8304 <_fflush_r+0x38>
    82f0:	0005883a 	mov	r2,zero
    82f4:	dfc00217 	ldw	ra,8(sp)
    82f8:	dc000117 	ldw	r16,4(sp)
    82fc:	dec00304 	addi	sp,sp,12
    8300:	f800283a 	ret
    8304:	8009883a 	mov	r4,r16
    8308:	dfc00217 	ldw	ra,8(sp)
    830c:	dc000117 	ldw	r16,4(sp)
    8310:	dec00304 	addi	sp,sp,12
    8314:	00080c41 	jmpi	80c4 <__sflush_r>
    8318:	d9400015 	stw	r5,0(sp)
    831c:	00086a80 	call	86a8 <__sinit>
    8320:	d9400017 	ldw	r5,0(sp)
    8324:	003ff006 	br	82e8 <__alt_mem_Flash_flash_data+0xf40082e8>

00008328 <fflush>:
    8328:	20000526 	beq	r4,zero,8340 <fflush+0x18>
    832c:	008000b4 	movhi	r2,2
    8330:	10ac7504 	addi	r2,r2,-20012
    8334:	200b883a 	mov	r5,r4
    8338:	11000017 	ldw	r4,0(r2)
    833c:	00082cc1 	jmpi	82cc <_fflush_r>
    8340:	008000b4 	movhi	r2,2
    8344:	10ac7404 	addi	r2,r2,-20016
    8348:	11000017 	ldw	r4,0(r2)
    834c:	01400074 	movhi	r5,1
    8350:	2960b304 	addi	r5,r5,-32052
    8354:	0008bd01 	jmpi	8bd0 <_fwalk_reent>

00008358 <__fp_lock>:
    8358:	0005883a 	mov	r2,zero
    835c:	f800283a 	ret

00008360 <__fp_unlock>:
    8360:	0005883a 	mov	r2,zero
    8364:	f800283a 	ret

00008368 <_cleanup_r>:
    8368:	01400074 	movhi	r5,1
    836c:	29645704 	addi	r5,r5,-28324
    8370:	0008bd01 	jmpi	8bd0 <_fwalk_reent>

00008374 <__sinit.part.1>:
    8374:	defff704 	addi	sp,sp,-36
    8378:	00c00074 	movhi	r3,1
    837c:	dfc00815 	stw	ra,32(sp)
    8380:	ddc00715 	stw	r23,28(sp)
    8384:	dd800615 	stw	r22,24(sp)
    8388:	dd400515 	stw	r21,20(sp)
    838c:	dd000415 	stw	r20,16(sp)
    8390:	dcc00315 	stw	r19,12(sp)
    8394:	dc800215 	stw	r18,8(sp)
    8398:	dc400115 	stw	r17,4(sp)
    839c:	dc000015 	stw	r16,0(sp)
    83a0:	18e0da04 	addi	r3,r3,-31896
    83a4:	24000117 	ldw	r16,4(r4)
    83a8:	20c00f15 	stw	r3,60(r4)
    83ac:	2080bb04 	addi	r2,r4,748
    83b0:	00c000c4 	movi	r3,3
    83b4:	20c0b915 	stw	r3,740(r4)
    83b8:	2080ba15 	stw	r2,744(r4)
    83bc:	2000b815 	stw	zero,736(r4)
    83c0:	05c00204 	movi	r23,8
    83c4:	00800104 	movi	r2,4
    83c8:	2025883a 	mov	r18,r4
    83cc:	b80d883a 	mov	r6,r23
    83d0:	81001704 	addi	r4,r16,92
    83d4:	000b883a 	mov	r5,zero
    83d8:	80000015 	stw	zero,0(r16)
    83dc:	80000115 	stw	zero,4(r16)
    83e0:	80000215 	stw	zero,8(r16)
    83e4:	8080030d 	sth	r2,12(r16)
    83e8:	80001915 	stw	zero,100(r16)
    83ec:	8000038d 	sth	zero,14(r16)
    83f0:	80000415 	stw	zero,16(r16)
    83f4:	80000515 	stw	zero,20(r16)
    83f8:	80000615 	stw	zero,24(r16)
    83fc:	0008e4c0 	call	8e4c <memset>
    8400:	05800074 	movhi	r22,1
    8404:	94400217 	ldw	r17,8(r18)
    8408:	05400074 	movhi	r21,1
    840c:	05000074 	movhi	r20,1
    8410:	04c00074 	movhi	r19,1
    8414:	b5a3dc04 	addi	r22,r22,-28816
    8418:	ad63f304 	addi	r21,r21,-28724
    841c:	a5241204 	addi	r20,r20,-28600
    8420:	9ce42904 	addi	r19,r19,-28508
    8424:	85800815 	stw	r22,32(r16)
    8428:	85400915 	stw	r21,36(r16)
    842c:	85000a15 	stw	r20,40(r16)
    8430:	84c00b15 	stw	r19,44(r16)
    8434:	84000715 	stw	r16,28(r16)
    8438:	00800284 	movi	r2,10
    843c:	8880030d 	sth	r2,12(r17)
    8440:	00800044 	movi	r2,1
    8444:	89001704 	addi	r4,r17,92
    8448:	b80d883a 	mov	r6,r23
    844c:	000b883a 	mov	r5,zero
    8450:	88000015 	stw	zero,0(r17)
    8454:	88000115 	stw	zero,4(r17)
    8458:	88000215 	stw	zero,8(r17)
    845c:	88001915 	stw	zero,100(r17)
    8460:	8880038d 	sth	r2,14(r17)
    8464:	88000415 	stw	zero,16(r17)
    8468:	88000515 	stw	zero,20(r17)
    846c:	88000615 	stw	zero,24(r17)
    8470:	0008e4c0 	call	8e4c <memset>
    8474:	94000317 	ldw	r16,12(r18)
    8478:	00800484 	movi	r2,18
    847c:	8c400715 	stw	r17,28(r17)
    8480:	8d800815 	stw	r22,32(r17)
    8484:	8d400915 	stw	r21,36(r17)
    8488:	8d000a15 	stw	r20,40(r17)
    848c:	8cc00b15 	stw	r19,44(r17)
    8490:	8080030d 	sth	r2,12(r16)
    8494:	00800084 	movi	r2,2
    8498:	80000015 	stw	zero,0(r16)
    849c:	80000115 	stw	zero,4(r16)
    84a0:	80000215 	stw	zero,8(r16)
    84a4:	80001915 	stw	zero,100(r16)
    84a8:	8080038d 	sth	r2,14(r16)
    84ac:	80000415 	stw	zero,16(r16)
    84b0:	80000515 	stw	zero,20(r16)
    84b4:	80000615 	stw	zero,24(r16)
    84b8:	81001704 	addi	r4,r16,92
    84bc:	000b883a 	mov	r5,zero
    84c0:	b80d883a 	mov	r6,r23
    84c4:	0008e4c0 	call	8e4c <memset>
    84c8:	00800044 	movi	r2,1
    84cc:	84000715 	stw	r16,28(r16)
    84d0:	85800815 	stw	r22,32(r16)
    84d4:	85400915 	stw	r21,36(r16)
    84d8:	85000a15 	stw	r20,40(r16)
    84dc:	84c00b15 	stw	r19,44(r16)
    84e0:	90800e15 	stw	r2,56(r18)
    84e4:	dfc00817 	ldw	ra,32(sp)
    84e8:	ddc00717 	ldw	r23,28(sp)
    84ec:	dd800617 	ldw	r22,24(sp)
    84f0:	dd400517 	ldw	r21,20(sp)
    84f4:	dd000417 	ldw	r20,16(sp)
    84f8:	dcc00317 	ldw	r19,12(sp)
    84fc:	dc800217 	ldw	r18,8(sp)
    8500:	dc400117 	ldw	r17,4(sp)
    8504:	dc000017 	ldw	r16,0(sp)
    8508:	dec00904 	addi	sp,sp,36
    850c:	f800283a 	ret

00008510 <__sfmoreglue>:
    8510:	defffc04 	addi	sp,sp,-16
    8514:	dc400115 	stw	r17,4(sp)
    8518:	2c7fffc4 	addi	r17,r5,-1
    851c:	8c401a24 	muli	r17,r17,104
    8520:	dc800215 	stw	r18,8(sp)
    8524:	2825883a 	mov	r18,r5
    8528:	89401d04 	addi	r5,r17,116
    852c:	dc000015 	stw	r16,0(sp)
    8530:	dfc00315 	stw	ra,12(sp)
    8534:	0004b100 	call	4b10 <_malloc_r>
    8538:	1021883a 	mov	r16,r2
    853c:	10000726 	beq	r2,zero,855c <__sfmoreglue+0x4c>
    8540:	11000304 	addi	r4,r2,12
    8544:	10000015 	stw	zero,0(r2)
    8548:	14800115 	stw	r18,4(r2)
    854c:	11000215 	stw	r4,8(r2)
    8550:	000b883a 	mov	r5,zero
    8554:	89801a04 	addi	r6,r17,104
    8558:	0008e4c0 	call	8e4c <memset>
    855c:	8005883a 	mov	r2,r16
    8560:	dfc00317 	ldw	ra,12(sp)
    8564:	dc800217 	ldw	r18,8(sp)
    8568:	dc400117 	ldw	r17,4(sp)
    856c:	dc000017 	ldw	r16,0(sp)
    8570:	dec00404 	addi	sp,sp,16
    8574:	f800283a 	ret

00008578 <__sfp>:
    8578:	008000b4 	movhi	r2,2
    857c:	defffb04 	addi	sp,sp,-20
    8580:	10ac7404 	addi	r2,r2,-20016
    8584:	dc800215 	stw	r18,8(sp)
    8588:	14800017 	ldw	r18,0(r2)
    858c:	dcc00315 	stw	r19,12(sp)
    8590:	dfc00415 	stw	ra,16(sp)
    8594:	90800e17 	ldw	r2,56(r18)
    8598:	dc400115 	stw	r17,4(sp)
    859c:	dc000015 	stw	r16,0(sp)
    85a0:	2027883a 	mov	r19,r4
    85a4:	1000021e 	bne	r2,zero,85b0 <__sfp+0x38>
    85a8:	9009883a 	mov	r4,r18
    85ac:	00083740 	call	8374 <__sinit.part.1>
    85b0:	9480b804 	addi	r18,r18,736
    85b4:	047fffc4 	movi	r17,-1
    85b8:	91400117 	ldw	r5,4(r18)
    85bc:	94000217 	ldw	r16,8(r18)
    85c0:	297fffc4 	addi	r5,r5,-1
    85c4:	28000a16 	blt	r5,zero,85f0 <__sfp+0x78>
    85c8:	8080030f 	ldh	r2,12(r16)
    85cc:	10000c26 	beq	r2,zero,8600 <__sfp+0x88>
    85d0:	80c01d04 	addi	r3,r16,116
    85d4:	00000206 	br	85e0 <__sfp+0x68>
    85d8:	18bfe60f 	ldh	r2,-104(r3)
    85dc:	10000826 	beq	r2,zero,8600 <__sfp+0x88>
    85e0:	297fffc4 	addi	r5,r5,-1
    85e4:	1c3ffd04 	addi	r16,r3,-12
    85e8:	18c01a04 	addi	r3,r3,104
    85ec:	2c7ffa1e 	bne	r5,r17,85d8 <__alt_mem_Flash_flash_data+0xf40085d8>
    85f0:	90800017 	ldw	r2,0(r18)
    85f4:	10001d26 	beq	r2,zero,866c <__sfp+0xf4>
    85f8:	1025883a 	mov	r18,r2
    85fc:	003fee06 	br	85b8 <__alt_mem_Flash_flash_data+0xf40085b8>
    8600:	00bfffc4 	movi	r2,-1
    8604:	8080038d 	sth	r2,14(r16)
    8608:	00800044 	movi	r2,1
    860c:	8080030d 	sth	r2,12(r16)
    8610:	80001915 	stw	zero,100(r16)
    8614:	80000015 	stw	zero,0(r16)
    8618:	80000215 	stw	zero,8(r16)
    861c:	80000115 	stw	zero,4(r16)
    8620:	80000415 	stw	zero,16(r16)
    8624:	80000515 	stw	zero,20(r16)
    8628:	80000615 	stw	zero,24(r16)
    862c:	81001704 	addi	r4,r16,92
    8630:	000b883a 	mov	r5,zero
    8634:	01800204 	movi	r6,8
    8638:	0008e4c0 	call	8e4c <memset>
    863c:	8005883a 	mov	r2,r16
    8640:	80000c15 	stw	zero,48(r16)
    8644:	80000d15 	stw	zero,52(r16)
    8648:	80001115 	stw	zero,68(r16)
    864c:	80001215 	stw	zero,72(r16)
    8650:	dfc00417 	ldw	ra,16(sp)
    8654:	dcc00317 	ldw	r19,12(sp)
    8658:	dc800217 	ldw	r18,8(sp)
    865c:	dc400117 	ldw	r17,4(sp)
    8660:	dc000017 	ldw	r16,0(sp)
    8664:	dec00504 	addi	sp,sp,20
    8668:	f800283a 	ret
    866c:	9809883a 	mov	r4,r19
    8670:	01400104 	movi	r5,4
    8674:	00085100 	call	8510 <__sfmoreglue>
    8678:	90800015 	stw	r2,0(r18)
    867c:	103fde1e 	bne	r2,zero,85f8 <__alt_mem_Flash_flash_data+0xf40085f8>
    8680:	00800304 	movi	r2,12
    8684:	98800015 	stw	r2,0(r19)
    8688:	0005883a 	mov	r2,zero
    868c:	003ff006 	br	8650 <__alt_mem_Flash_flash_data+0xf4008650>

00008690 <_cleanup>:
    8690:	008000b4 	movhi	r2,2
    8694:	10ac7404 	addi	r2,r2,-20016
    8698:	11000017 	ldw	r4,0(r2)
    869c:	01400074 	movhi	r5,1
    86a0:	29645704 	addi	r5,r5,-28324
    86a4:	0008bd01 	jmpi	8bd0 <_fwalk_reent>

000086a8 <__sinit>:
    86a8:	20800e17 	ldw	r2,56(r4)
    86ac:	10000126 	beq	r2,zero,86b4 <__sinit+0xc>
    86b0:	f800283a 	ret
    86b4:	00083741 	jmpi	8374 <__sinit.part.1>

000086b8 <__sfp_lock_acquire>:
    86b8:	f800283a 	ret

000086bc <__sfp_lock_release>:
    86bc:	f800283a 	ret

000086c0 <__sinit_lock_acquire>:
    86c0:	f800283a 	ret

000086c4 <__sinit_lock_release>:
    86c4:	f800283a 	ret

000086c8 <__fp_lock_all>:
    86c8:	008000b4 	movhi	r2,2
    86cc:	10ac7504 	addi	r2,r2,-20012
    86d0:	11000017 	ldw	r4,0(r2)
    86d4:	01400074 	movhi	r5,1
    86d8:	2960d604 	addi	r5,r5,-31912
    86dc:	0008b0c1 	jmpi	8b0c <_fwalk>

000086e0 <__fp_unlock_all>:
    86e0:	008000b4 	movhi	r2,2
    86e4:	10ac7504 	addi	r2,r2,-20012
    86e8:	11000017 	ldw	r4,0(r2)
    86ec:	01400074 	movhi	r5,1
    86f0:	2960d804 	addi	r5,r5,-31904
    86f4:	0008b0c1 	jmpi	8b0c <_fwalk>

000086f8 <_malloc_trim_r>:
    86f8:	defffb04 	addi	sp,sp,-20
    86fc:	dcc00315 	stw	r19,12(sp)
    8700:	04c000b4 	movhi	r19,2
    8704:	dc800215 	stw	r18,8(sp)
    8708:	dc400115 	stw	r17,4(sp)
    870c:	dc000015 	stw	r16,0(sp)
    8710:	dfc00415 	stw	ra,16(sp)
    8714:	2821883a 	mov	r16,r5
    8718:	9ce60c04 	addi	r19,r19,-26576
    871c:	2025883a 	mov	r18,r4
    8720:	000d11c0 	call	d11c <__malloc_lock>
    8724:	98800217 	ldw	r2,8(r19)
    8728:	14400117 	ldw	r17,4(r2)
    872c:	00bfff04 	movi	r2,-4
    8730:	88a2703a 	and	r17,r17,r2
    8734:	8c21c83a 	sub	r16,r17,r16
    8738:	8403fbc4 	addi	r16,r16,4079
    873c:	8020d33a 	srli	r16,r16,12
    8740:	0083ffc4 	movi	r2,4095
    8744:	843fffc4 	addi	r16,r16,-1
    8748:	8020933a 	slli	r16,r16,12
    874c:	1400060e 	bge	r2,r16,8768 <_malloc_trim_r+0x70>
    8750:	9009883a 	mov	r4,r18
    8754:	000b883a 	mov	r5,zero
    8758:	0006bb00 	call	6bb0 <_sbrk_r>
    875c:	98c00217 	ldw	r3,8(r19)
    8760:	1c47883a 	add	r3,r3,r17
    8764:	10c00a26 	beq	r2,r3,8790 <_malloc_trim_r+0x98>
    8768:	9009883a 	mov	r4,r18
    876c:	000d23c0 	call	d23c <__malloc_unlock>
    8770:	0005883a 	mov	r2,zero
    8774:	dfc00417 	ldw	ra,16(sp)
    8778:	dcc00317 	ldw	r19,12(sp)
    877c:	dc800217 	ldw	r18,8(sp)
    8780:	dc400117 	ldw	r17,4(sp)
    8784:	dc000017 	ldw	r16,0(sp)
    8788:	dec00504 	addi	sp,sp,20
    878c:	f800283a 	ret
    8790:	9009883a 	mov	r4,r18
    8794:	040bc83a 	sub	r5,zero,r16
    8798:	0006bb00 	call	6bb0 <_sbrk_r>
    879c:	00ffffc4 	movi	r3,-1
    87a0:	10c00d26 	beq	r2,r3,87d8 <_malloc_trim_r+0xe0>
    87a4:	00c000b4 	movhi	r3,2
    87a8:	18f49704 	addi	r3,r3,-11684
    87ac:	18800017 	ldw	r2,0(r3)
    87b0:	99000217 	ldw	r4,8(r19)
    87b4:	8c23c83a 	sub	r17,r17,r16
    87b8:	8c400054 	ori	r17,r17,1
    87bc:	1421c83a 	sub	r16,r2,r16
    87c0:	24400115 	stw	r17,4(r4)
    87c4:	9009883a 	mov	r4,r18
    87c8:	1c000015 	stw	r16,0(r3)
    87cc:	000d23c0 	call	d23c <__malloc_unlock>
    87d0:	00800044 	movi	r2,1
    87d4:	003fe706 	br	8774 <__alt_mem_Flash_flash_data+0xf4008774>
    87d8:	9009883a 	mov	r4,r18
    87dc:	000b883a 	mov	r5,zero
    87e0:	0006bb00 	call	6bb0 <_sbrk_r>
    87e4:	99000217 	ldw	r4,8(r19)
    87e8:	014003c4 	movi	r5,15
    87ec:	1107c83a 	sub	r3,r2,r4
    87f0:	28ffdd0e 	bge	r5,r3,8768 <__alt_mem_Flash_flash_data+0xf4008768>
    87f4:	014000b4 	movhi	r5,2
    87f8:	296c7704 	addi	r5,r5,-20004
    87fc:	29400017 	ldw	r5,0(r5)
    8800:	18c00054 	ori	r3,r3,1
    8804:	20c00115 	stw	r3,4(r4)
    8808:	00c000b4 	movhi	r3,2
    880c:	1145c83a 	sub	r2,r2,r5
    8810:	18f49704 	addi	r3,r3,-11684
    8814:	18800015 	stw	r2,0(r3)
    8818:	003fd306 	br	8768 <__alt_mem_Flash_flash_data+0xf4008768>

0000881c <_free_r>:
    881c:	28004c26 	beq	r5,zero,8950 <_free_r+0x134>
    8820:	defffd04 	addi	sp,sp,-12
    8824:	dc400115 	stw	r17,4(sp)
    8828:	dc000015 	stw	r16,0(sp)
    882c:	2023883a 	mov	r17,r4
    8830:	2821883a 	mov	r16,r5
    8834:	dfc00215 	stw	ra,8(sp)
    8838:	000d11c0 	call	d11c <__malloc_lock>
    883c:	813fff17 	ldw	r4,-4(r16)
    8840:	00bfff84 	movi	r2,-2
    8844:	024000b4 	movhi	r9,2
    8848:	81bffe04 	addi	r6,r16,-8
    884c:	2084703a 	and	r2,r4,r2
    8850:	4a660c04 	addi	r9,r9,-26576
    8854:	308b883a 	add	r5,r6,r2
    8858:	2a000117 	ldw	r8,4(r5)
    885c:	49c00217 	ldw	r7,8(r9)
    8860:	00ffff04 	movi	r3,-4
    8864:	40c6703a 	and	r3,r8,r3
    8868:	39405326 	beq	r7,r5,89b8 <_free_r+0x19c>
    886c:	28c00115 	stw	r3,4(r5)
    8870:	2100004c 	andi	r4,r4,1
    8874:	2000091e 	bne	r4,zero,889c <_free_r+0x80>
    8878:	81fffe17 	ldw	r7,-8(r16)
    887c:	4a000204 	addi	r8,r9,8
    8880:	31cdc83a 	sub	r6,r6,r7
    8884:	31000217 	ldw	r4,8(r6)
    8888:	11c5883a 	add	r2,r2,r7
    888c:	22006126 	beq	r4,r8,8a14 <_free_r+0x1f8>
    8890:	31c00317 	ldw	r7,12(r6)
    8894:	21c00315 	stw	r7,12(r4)
    8898:	39000215 	stw	r4,8(r7)
    889c:	28c9883a 	add	r4,r5,r3
    88a0:	21c00117 	ldw	r7,4(r4)
    88a4:	39c0004c 	andi	r7,r7,1
    88a8:	38000d1e 	bne	r7,zero,88e0 <_free_r+0xc4>
    88ac:	29000217 	ldw	r4,8(r5)
    88b0:	10c5883a 	add	r2,r2,r3
    88b4:	00c000b4 	movhi	r3,2
    88b8:	18e60e04 	addi	r3,r3,-26568
    88bc:	20c07526 	beq	r4,r3,8a94 <_free_r+0x278>
    88c0:	29c00317 	ldw	r7,12(r5)
    88c4:	11400054 	ori	r5,r2,1
    88c8:	3087883a 	add	r3,r6,r2
    88cc:	21c00315 	stw	r7,12(r4)
    88d0:	39000215 	stw	r4,8(r7)
    88d4:	31400115 	stw	r5,4(r6)
    88d8:	18800015 	stw	r2,0(r3)
    88dc:	00000406 	br	88f0 <_free_r+0xd4>
    88e0:	10c00054 	ori	r3,r2,1
    88e4:	30c00115 	stw	r3,4(r6)
    88e8:	3087883a 	add	r3,r6,r2
    88ec:	18800015 	stw	r2,0(r3)
    88f0:	00c07fc4 	movi	r3,511
    88f4:	18801736 	bltu	r3,r2,8954 <_free_r+0x138>
    88f8:	1004d0fa 	srli	r2,r2,3
    88fc:	01400044 	movi	r5,1
    8900:	49000117 	ldw	r4,4(r9)
    8904:	1087883a 	add	r3,r2,r2
    8908:	18c7883a 	add	r3,r3,r3
    890c:	1005d0ba 	srai	r2,r2,2
    8910:	18c7883a 	add	r3,r3,r3
    8914:	1a47883a 	add	r3,r3,r9
    8918:	19c00217 	ldw	r7,8(r3)
    891c:	2884983a 	sll	r2,r5,r2
    8920:	30c00315 	stw	r3,12(r6)
    8924:	31c00215 	stw	r7,8(r6)
    8928:	1104b03a 	or	r2,r2,r4
    892c:	19800215 	stw	r6,8(r3)
    8930:	48800115 	stw	r2,4(r9)
    8934:	39800315 	stw	r6,12(r7)
    8938:	8809883a 	mov	r4,r17
    893c:	dfc00217 	ldw	ra,8(sp)
    8940:	dc400117 	ldw	r17,4(sp)
    8944:	dc000017 	ldw	r16,0(sp)
    8948:	dec00304 	addi	sp,sp,12
    894c:	000d23c1 	jmpi	d23c <__malloc_unlock>
    8950:	f800283a 	ret
    8954:	1006d27a 	srli	r3,r2,9
    8958:	01000104 	movi	r4,4
    895c:	20c04036 	bltu	r4,r3,8a60 <_free_r+0x244>
    8960:	1006d1ba 	srli	r3,r2,6
    8964:	19400e04 	addi	r5,r3,56
    8968:	2947883a 	add	r3,r5,r5
    896c:	18c7883a 	add	r3,r3,r3
    8970:	18c7883a 	add	r3,r3,r3
    8974:	1a49883a 	add	r4,r3,r9
    8978:	20c00217 	ldw	r3,8(r4)
    897c:	01c000b4 	movhi	r7,2
    8980:	39e60c04 	addi	r7,r7,-26576
    8984:	19003b26 	beq	r3,r4,8a74 <_free_r+0x258>
    8988:	01ffff04 	movi	r7,-4
    898c:	19400117 	ldw	r5,4(r3)
    8990:	29ca703a 	and	r5,r5,r7
    8994:	1140022e 	bgeu	r2,r5,89a0 <_free_r+0x184>
    8998:	18c00217 	ldw	r3,8(r3)
    899c:	20fffb1e 	bne	r4,r3,898c <__alt_mem_Flash_flash_data+0xf400898c>
    89a0:	18800317 	ldw	r2,12(r3)
    89a4:	30800315 	stw	r2,12(r6)
    89a8:	30c00215 	stw	r3,8(r6)
    89ac:	11800215 	stw	r6,8(r2)
    89b0:	19800315 	stw	r6,12(r3)
    89b4:	003fe006 	br	8938 <__alt_mem_Flash_flash_data+0xf4008938>
    89b8:	2100004c 	andi	r4,r4,1
    89bc:	1885883a 	add	r2,r3,r2
    89c0:	2000071e 	bne	r4,zero,89e0 <_free_r+0x1c4>
    89c4:	817ffe17 	ldw	r5,-8(r16)
    89c8:	314dc83a 	sub	r6,r6,r5
    89cc:	30c00317 	ldw	r3,12(r6)
    89d0:	31000217 	ldw	r4,8(r6)
    89d4:	1145883a 	add	r2,r2,r5
    89d8:	20c00315 	stw	r3,12(r4)
    89dc:	19000215 	stw	r4,8(r3)
    89e0:	10c00054 	ori	r3,r2,1
    89e4:	30c00115 	stw	r3,4(r6)
    89e8:	00c000b4 	movhi	r3,2
    89ec:	18ec7804 	addi	r3,r3,-20000
    89f0:	18c00017 	ldw	r3,0(r3)
    89f4:	49800215 	stw	r6,8(r9)
    89f8:	10ffcf36 	bltu	r2,r3,8938 <__alt_mem_Flash_flash_data+0xf4008938>
    89fc:	008000b4 	movhi	r2,2
    8a00:	10b47504 	addi	r2,r2,-11820
    8a04:	11400017 	ldw	r5,0(r2)
    8a08:	8809883a 	mov	r4,r17
    8a0c:	00086f80 	call	86f8 <_malloc_trim_r>
    8a10:	003fc906 	br	8938 <__alt_mem_Flash_flash_data+0xf4008938>
    8a14:	28c9883a 	add	r4,r5,r3
    8a18:	21000117 	ldw	r4,4(r4)
    8a1c:	2100004c 	andi	r4,r4,1
    8a20:	20000a1e 	bne	r4,zero,8a4c <_free_r+0x230>
    8a24:	29000317 	ldw	r4,12(r5)
    8a28:	29400217 	ldw	r5,8(r5)
    8a2c:	10c5883a 	add	r2,r2,r3
    8a30:	10c00054 	ori	r3,r2,1
    8a34:	29000315 	stw	r4,12(r5)
    8a38:	21400215 	stw	r5,8(r4)
    8a3c:	30c00115 	stw	r3,4(r6)
    8a40:	308d883a 	add	r6,r6,r2
    8a44:	30800015 	stw	r2,0(r6)
    8a48:	003fbb06 	br	8938 <__alt_mem_Flash_flash_data+0xf4008938>
    8a4c:	10c00054 	ori	r3,r2,1
    8a50:	30c00115 	stw	r3,4(r6)
    8a54:	308d883a 	add	r6,r6,r2
    8a58:	30800015 	stw	r2,0(r6)
    8a5c:	003fb606 	br	8938 <__alt_mem_Flash_flash_data+0xf4008938>
    8a60:	01000504 	movi	r4,20
    8a64:	20c01436 	bltu	r4,r3,8ab8 <_free_r+0x29c>
    8a68:	194016c4 	addi	r5,r3,91
    8a6c:	2947883a 	add	r3,r5,r5
    8a70:	003fbe06 	br	896c <__alt_mem_Flash_flash_data+0xf400896c>
    8a74:	280bd0ba 	srai	r5,r5,2
    8a78:	00800044 	movi	r2,1
    8a7c:	39000117 	ldw	r4,4(r7)
    8a80:	114a983a 	sll	r5,r2,r5
    8a84:	1805883a 	mov	r2,r3
    8a88:	2908b03a 	or	r4,r5,r4
    8a8c:	39000115 	stw	r4,4(r7)
    8a90:	003fc406 	br	89a4 <__alt_mem_Flash_flash_data+0xf40089a4>
    8a94:	49800515 	stw	r6,20(r9)
    8a98:	49800415 	stw	r6,16(r9)
    8a9c:	10c00054 	ori	r3,r2,1
    8aa0:	31000315 	stw	r4,12(r6)
    8aa4:	31000215 	stw	r4,8(r6)
    8aa8:	30c00115 	stw	r3,4(r6)
    8aac:	308d883a 	add	r6,r6,r2
    8ab0:	30800015 	stw	r2,0(r6)
    8ab4:	003fa006 	br	8938 <__alt_mem_Flash_flash_data+0xf4008938>
    8ab8:	01001504 	movi	r4,84
    8abc:	20c00436 	bltu	r4,r3,8ad0 <_free_r+0x2b4>
    8ac0:	1006d33a 	srli	r3,r2,12
    8ac4:	19401b84 	addi	r5,r3,110
    8ac8:	2947883a 	add	r3,r5,r5
    8acc:	003fa706 	br	896c <__alt_mem_Flash_flash_data+0xf400896c>
    8ad0:	01005504 	movi	r4,340
    8ad4:	20c00436 	bltu	r4,r3,8ae8 <_free_r+0x2cc>
    8ad8:	1006d3fa 	srli	r3,r2,15
    8adc:	19401dc4 	addi	r5,r3,119
    8ae0:	2947883a 	add	r3,r5,r5
    8ae4:	003fa106 	br	896c <__alt_mem_Flash_flash_data+0xf400896c>
    8ae8:	01015504 	movi	r4,1364
    8aec:	20c00436 	bltu	r4,r3,8b00 <_free_r+0x2e4>
    8af0:	1006d4ba 	srli	r3,r2,18
    8af4:	19401f04 	addi	r5,r3,124
    8af8:	2947883a 	add	r3,r5,r5
    8afc:	003f9b06 	br	896c <__alt_mem_Flash_flash_data+0xf400896c>
    8b00:	00c03f04 	movi	r3,252
    8b04:	01401f84 	movi	r5,126
    8b08:	003f9806 	br	896c <__alt_mem_Flash_flash_data+0xf400896c>

00008b0c <_fwalk>:
    8b0c:	defff704 	addi	sp,sp,-36
    8b10:	dd000415 	stw	r20,16(sp)
    8b14:	dfc00815 	stw	ra,32(sp)
    8b18:	ddc00715 	stw	r23,28(sp)
    8b1c:	dd800615 	stw	r22,24(sp)
    8b20:	dd400515 	stw	r21,20(sp)
    8b24:	dcc00315 	stw	r19,12(sp)
    8b28:	dc800215 	stw	r18,8(sp)
    8b2c:	dc400115 	stw	r17,4(sp)
    8b30:	dc000015 	stw	r16,0(sp)
    8b34:	2500b804 	addi	r20,r4,736
    8b38:	a0002326 	beq	r20,zero,8bc8 <_fwalk+0xbc>
    8b3c:	282b883a 	mov	r21,r5
    8b40:	002f883a 	mov	r23,zero
    8b44:	05800044 	movi	r22,1
    8b48:	04ffffc4 	movi	r19,-1
    8b4c:	a4400117 	ldw	r17,4(r20)
    8b50:	a4800217 	ldw	r18,8(r20)
    8b54:	8c7fffc4 	addi	r17,r17,-1
    8b58:	88000d16 	blt	r17,zero,8b90 <_fwalk+0x84>
    8b5c:	94000304 	addi	r16,r18,12
    8b60:	94800384 	addi	r18,r18,14
    8b64:	80c0000b 	ldhu	r3,0(r16)
    8b68:	8c7fffc4 	addi	r17,r17,-1
    8b6c:	813ffd04 	addi	r4,r16,-12
    8b70:	b0c0042e 	bgeu	r22,r3,8b84 <_fwalk+0x78>
    8b74:	90c0000f 	ldh	r3,0(r18)
    8b78:	1cc00226 	beq	r3,r19,8b84 <_fwalk+0x78>
    8b7c:	a83ee83a 	callr	r21
    8b80:	b8aeb03a 	or	r23,r23,r2
    8b84:	84001a04 	addi	r16,r16,104
    8b88:	94801a04 	addi	r18,r18,104
    8b8c:	8cfff51e 	bne	r17,r19,8b64 <__alt_mem_Flash_flash_data+0xf4008b64>
    8b90:	a5000017 	ldw	r20,0(r20)
    8b94:	a03fed1e 	bne	r20,zero,8b4c <__alt_mem_Flash_flash_data+0xf4008b4c>
    8b98:	b805883a 	mov	r2,r23
    8b9c:	dfc00817 	ldw	ra,32(sp)
    8ba0:	ddc00717 	ldw	r23,28(sp)
    8ba4:	dd800617 	ldw	r22,24(sp)
    8ba8:	dd400517 	ldw	r21,20(sp)
    8bac:	dd000417 	ldw	r20,16(sp)
    8bb0:	dcc00317 	ldw	r19,12(sp)
    8bb4:	dc800217 	ldw	r18,8(sp)
    8bb8:	dc400117 	ldw	r17,4(sp)
    8bbc:	dc000017 	ldw	r16,0(sp)
    8bc0:	dec00904 	addi	sp,sp,36
    8bc4:	f800283a 	ret
    8bc8:	002f883a 	mov	r23,zero
    8bcc:	003ff206 	br	8b98 <__alt_mem_Flash_flash_data+0xf4008b98>

00008bd0 <_fwalk_reent>:
    8bd0:	defff704 	addi	sp,sp,-36
    8bd4:	dd400515 	stw	r21,20(sp)
    8bd8:	dfc00815 	stw	ra,32(sp)
    8bdc:	ddc00715 	stw	r23,28(sp)
    8be0:	dd800615 	stw	r22,24(sp)
    8be4:	dd000415 	stw	r20,16(sp)
    8be8:	dcc00315 	stw	r19,12(sp)
    8bec:	dc800215 	stw	r18,8(sp)
    8bf0:	dc400115 	stw	r17,4(sp)
    8bf4:	dc000015 	stw	r16,0(sp)
    8bf8:	2540b804 	addi	r21,r4,736
    8bfc:	a8002326 	beq	r21,zero,8c8c <_fwalk_reent+0xbc>
    8c00:	2829883a 	mov	r20,r5
    8c04:	202d883a 	mov	r22,r4
    8c08:	002f883a 	mov	r23,zero
    8c0c:	04c00044 	movi	r19,1
    8c10:	04bfffc4 	movi	r18,-1
    8c14:	ac400117 	ldw	r17,4(r21)
    8c18:	ac000217 	ldw	r16,8(r21)
    8c1c:	8c7fffc4 	addi	r17,r17,-1
    8c20:	88000c16 	blt	r17,zero,8c54 <_fwalk_reent+0x84>
    8c24:	84000304 	addi	r16,r16,12
    8c28:	80c0000b 	ldhu	r3,0(r16)
    8c2c:	8c7fffc4 	addi	r17,r17,-1
    8c30:	817ffd04 	addi	r5,r16,-12
    8c34:	98c0052e 	bgeu	r19,r3,8c4c <_fwalk_reent+0x7c>
    8c38:	80c0008f 	ldh	r3,2(r16)
    8c3c:	b009883a 	mov	r4,r22
    8c40:	1c800226 	beq	r3,r18,8c4c <_fwalk_reent+0x7c>
    8c44:	a03ee83a 	callr	r20
    8c48:	b8aeb03a 	or	r23,r23,r2
    8c4c:	84001a04 	addi	r16,r16,104
    8c50:	8cbff51e 	bne	r17,r18,8c28 <__alt_mem_Flash_flash_data+0xf4008c28>
    8c54:	ad400017 	ldw	r21,0(r21)
    8c58:	a83fee1e 	bne	r21,zero,8c14 <__alt_mem_Flash_flash_data+0xf4008c14>
    8c5c:	b805883a 	mov	r2,r23
    8c60:	dfc00817 	ldw	ra,32(sp)
    8c64:	ddc00717 	ldw	r23,28(sp)
    8c68:	dd800617 	ldw	r22,24(sp)
    8c6c:	dd400517 	ldw	r21,20(sp)
    8c70:	dd000417 	ldw	r20,16(sp)
    8c74:	dcc00317 	ldw	r19,12(sp)
    8c78:	dc800217 	ldw	r18,8(sp)
    8c7c:	dc400117 	ldw	r17,4(sp)
    8c80:	dc000017 	ldw	r16,0(sp)
    8c84:	dec00904 	addi	sp,sp,36
    8c88:	f800283a 	ret
    8c8c:	002f883a 	mov	r23,zero
    8c90:	003ff206 	br	8c5c <__alt_mem_Flash_flash_data+0xf4008c5c>

00008c94 <__smakebuf_r>:
    8c94:	2880030b 	ldhu	r2,12(r5)
    8c98:	10c0008c 	andi	r3,r2,2
    8c9c:	1800401e 	bne	r3,zero,8da0 <__smakebuf_r+0x10c>
    8ca0:	deffec04 	addi	sp,sp,-80
    8ca4:	dc000f15 	stw	r16,60(sp)
    8ca8:	2821883a 	mov	r16,r5
    8cac:	2940038f 	ldh	r5,14(r5)
    8cb0:	dc401015 	stw	r17,64(sp)
    8cb4:	dfc01315 	stw	ra,76(sp)
    8cb8:	dcc01215 	stw	r19,72(sp)
    8cbc:	dc801115 	stw	r18,68(sp)
    8cc0:	2023883a 	mov	r17,r4
    8cc4:	28001b16 	blt	r5,zero,8d34 <__smakebuf_r+0xa0>
    8cc8:	d80d883a 	mov	r6,sp
    8ccc:	00092600 	call	9260 <_fstat_r>
    8cd0:	10001716 	blt	r2,zero,8d30 <__smakebuf_r+0x9c>
    8cd4:	d8800117 	ldw	r2,4(sp)
    8cd8:	00e00014 	movui	r3,32768
    8cdc:	10bc000c 	andi	r2,r2,61440
    8ce0:	10c03726 	beq	r2,r3,8dc0 <__smakebuf_r+0x12c>
    8ce4:	80c0030b 	ldhu	r3,12(r16)
    8ce8:	18c20014 	ori	r3,r3,2048
    8cec:	80c0030d 	sth	r3,12(r16)
    8cf0:	00c80004 	movi	r3,8192
    8cf4:	10c03c1e 	bne	r2,r3,8de8 <__smakebuf_r+0x154>
    8cf8:	8140038f 	ldh	r5,14(r16)
    8cfc:	8809883a 	mov	r4,r17
    8d00:	00092b80 	call	92b8 <_isatty_r>
    8d04:	10004e26 	beq	r2,zero,8e40 <__smakebuf_r+0x1ac>
    8d08:	8080030b 	ldhu	r2,12(r16)
    8d0c:	04c00044 	movi	r19,1
    8d10:	80c010c4 	addi	r3,r16,67
    8d14:	14c4b03a 	or	r2,r2,r19
    8d18:	8080030d 	sth	r2,12(r16)
    8d1c:	80c00015 	stw	r3,0(r16)
    8d20:	80c00415 	stw	r3,16(r16)
    8d24:	84c00515 	stw	r19,20(r16)
    8d28:	04810004 	movi	r18,1024
    8d2c:	00000706 	br	8d4c <__smakebuf_r+0xb8>
    8d30:	8080030b 	ldhu	r2,12(r16)
    8d34:	10c0200c 	andi	r3,r2,128
    8d38:	18001f1e 	bne	r3,zero,8db8 <__smakebuf_r+0x124>
    8d3c:	04810004 	movi	r18,1024
    8d40:	10820014 	ori	r2,r2,2048
    8d44:	8080030d 	sth	r2,12(r16)
    8d48:	0027883a 	mov	r19,zero
    8d4c:	8809883a 	mov	r4,r17
    8d50:	900b883a 	mov	r5,r18
    8d54:	0004b100 	call	4b10 <_malloc_r>
    8d58:	10002e26 	beq	r2,zero,8e14 <__smakebuf_r+0x180>
    8d5c:	80c0030b 	ldhu	r3,12(r16)
    8d60:	01000074 	movhi	r4,1
    8d64:	2120da04 	addi	r4,r4,-31896
    8d68:	89000f15 	stw	r4,60(r17)
    8d6c:	18c02014 	ori	r3,r3,128
    8d70:	80c0030d 	sth	r3,12(r16)
    8d74:	80800015 	stw	r2,0(r16)
    8d78:	80800415 	stw	r2,16(r16)
    8d7c:	84800515 	stw	r18,20(r16)
    8d80:	98001c1e 	bne	r19,zero,8df4 <__smakebuf_r+0x160>
    8d84:	dfc01317 	ldw	ra,76(sp)
    8d88:	dcc01217 	ldw	r19,72(sp)
    8d8c:	dc801117 	ldw	r18,68(sp)
    8d90:	dc401017 	ldw	r17,64(sp)
    8d94:	dc000f17 	ldw	r16,60(sp)
    8d98:	dec01404 	addi	sp,sp,80
    8d9c:	f800283a 	ret
    8da0:	288010c4 	addi	r2,r5,67
    8da4:	28800015 	stw	r2,0(r5)
    8da8:	28800415 	stw	r2,16(r5)
    8dac:	00800044 	movi	r2,1
    8db0:	28800515 	stw	r2,20(r5)
    8db4:	f800283a 	ret
    8db8:	04801004 	movi	r18,64
    8dbc:	003fe006 	br	8d40 <__alt_mem_Flash_flash_data+0xf4008d40>
    8dc0:	81000a17 	ldw	r4,40(r16)
    8dc4:	00c00074 	movhi	r3,1
    8dc8:	18e41204 	addi	r3,r3,-28600
    8dcc:	20ffc51e 	bne	r4,r3,8ce4 <__alt_mem_Flash_flash_data+0xf4008ce4>
    8dd0:	80c0030b 	ldhu	r3,12(r16)
    8dd4:	01010004 	movi	r4,1024
    8dd8:	81001315 	stw	r4,76(r16)
    8ddc:	1906b03a 	or	r3,r3,r4
    8de0:	80c0030d 	sth	r3,12(r16)
    8de4:	003fc206 	br	8cf0 <__alt_mem_Flash_flash_data+0xf4008cf0>
    8de8:	0027883a 	mov	r19,zero
    8dec:	04810004 	movi	r18,1024
    8df0:	003fd606 	br	8d4c <__alt_mem_Flash_flash_data+0xf4008d4c>
    8df4:	8140038f 	ldh	r5,14(r16)
    8df8:	8809883a 	mov	r4,r17
    8dfc:	00092b80 	call	92b8 <_isatty_r>
    8e00:	103fe026 	beq	r2,zero,8d84 <__alt_mem_Flash_flash_data+0xf4008d84>
    8e04:	8080030b 	ldhu	r2,12(r16)
    8e08:	10800054 	ori	r2,r2,1
    8e0c:	8080030d 	sth	r2,12(r16)
    8e10:	003fdc06 	br	8d84 <__alt_mem_Flash_flash_data+0xf4008d84>
    8e14:	8080030b 	ldhu	r2,12(r16)
    8e18:	10c0800c 	andi	r3,r2,512
    8e1c:	183fd91e 	bne	r3,zero,8d84 <__alt_mem_Flash_flash_data+0xf4008d84>
    8e20:	10800094 	ori	r2,r2,2
    8e24:	80c010c4 	addi	r3,r16,67
    8e28:	8080030d 	sth	r2,12(r16)
    8e2c:	00800044 	movi	r2,1
    8e30:	80c00015 	stw	r3,0(r16)
    8e34:	80c00415 	stw	r3,16(r16)
    8e38:	80800515 	stw	r2,20(r16)
    8e3c:	003fd106 	br	8d84 <__alt_mem_Flash_flash_data+0xf4008d84>
    8e40:	04c00044 	movi	r19,1
    8e44:	04810004 	movi	r18,1024
    8e48:	003fc006 	br	8d4c <__alt_mem_Flash_flash_data+0xf4008d4c>

00008e4c <memset>:
    8e4c:	20c000cc 	andi	r3,r4,3
    8e50:	2005883a 	mov	r2,r4
    8e54:	18004326 	beq	r3,zero,8f64 <memset+0x118>
    8e58:	31ffffc4 	addi	r7,r6,-1
    8e5c:	30004026 	beq	r6,zero,8f60 <memset+0x114>
    8e60:	2813883a 	mov	r9,r5
    8e64:	200d883a 	mov	r6,r4
    8e68:	2007883a 	mov	r3,r4
    8e6c:	00000406 	br	8e80 <memset+0x34>
    8e70:	3a3fffc4 	addi	r8,r7,-1
    8e74:	31800044 	addi	r6,r6,1
    8e78:	38003926 	beq	r7,zero,8f60 <memset+0x114>
    8e7c:	400f883a 	mov	r7,r8
    8e80:	18c00044 	addi	r3,r3,1
    8e84:	32400005 	stb	r9,0(r6)
    8e88:	1a0000cc 	andi	r8,r3,3
    8e8c:	403ff81e 	bne	r8,zero,8e70 <__alt_mem_Flash_flash_data+0xf4008e70>
    8e90:	010000c4 	movi	r4,3
    8e94:	21c02d2e 	bgeu	r4,r7,8f4c <memset+0x100>
    8e98:	29803fcc 	andi	r6,r5,255
    8e9c:	3008923a 	slli	r4,r6,8
    8ea0:	218cb03a 	or	r6,r4,r6
    8ea4:	3008943a 	slli	r4,r6,16
    8ea8:	218cb03a 	or	r6,r4,r6
    8eac:	010003c4 	movi	r4,15
    8eb0:	21c0182e 	bgeu	r4,r7,8f14 <memset+0xc8>
    8eb4:	3b3ffc04 	addi	r12,r7,-16
    8eb8:	6018d13a 	srli	r12,r12,4
    8ebc:	1a000104 	addi	r8,r3,4
    8ec0:	1ac00204 	addi	r11,r3,8
    8ec4:	6008913a 	slli	r4,r12,4
    8ec8:	1a800304 	addi	r10,r3,12
    8ecc:	1813883a 	mov	r9,r3
    8ed0:	21000504 	addi	r4,r4,20
    8ed4:	1909883a 	add	r4,r3,r4
    8ed8:	49800015 	stw	r6,0(r9)
    8edc:	41800015 	stw	r6,0(r8)
    8ee0:	59800015 	stw	r6,0(r11)
    8ee4:	51800015 	stw	r6,0(r10)
    8ee8:	42000404 	addi	r8,r8,16
    8eec:	4a400404 	addi	r9,r9,16
    8ef0:	5ac00404 	addi	r11,r11,16
    8ef4:	52800404 	addi	r10,r10,16
    8ef8:	413ff71e 	bne	r8,r4,8ed8 <__alt_mem_Flash_flash_data+0xf4008ed8>
    8efc:	63000044 	addi	r12,r12,1
    8f00:	6018913a 	slli	r12,r12,4
    8f04:	39c003cc 	andi	r7,r7,15
    8f08:	010000c4 	movi	r4,3
    8f0c:	1b07883a 	add	r3,r3,r12
    8f10:	21c00e2e 	bgeu	r4,r7,8f4c <memset+0x100>
    8f14:	1813883a 	mov	r9,r3
    8f18:	3811883a 	mov	r8,r7
    8f1c:	010000c4 	movi	r4,3
    8f20:	49800015 	stw	r6,0(r9)
    8f24:	423fff04 	addi	r8,r8,-4
    8f28:	4a400104 	addi	r9,r9,4
    8f2c:	223ffc36 	bltu	r4,r8,8f20 <__alt_mem_Flash_flash_data+0xf4008f20>
    8f30:	393fff04 	addi	r4,r7,-4
    8f34:	2008d0ba 	srli	r4,r4,2
    8f38:	39c000cc 	andi	r7,r7,3
    8f3c:	21000044 	addi	r4,r4,1
    8f40:	2109883a 	add	r4,r4,r4
    8f44:	2109883a 	add	r4,r4,r4
    8f48:	1907883a 	add	r3,r3,r4
    8f4c:	38000426 	beq	r7,zero,8f60 <memset+0x114>
    8f50:	19cf883a 	add	r7,r3,r7
    8f54:	19400005 	stb	r5,0(r3)
    8f58:	18c00044 	addi	r3,r3,1
    8f5c:	19fffd1e 	bne	r3,r7,8f54 <__alt_mem_Flash_flash_data+0xf4008f54>
    8f60:	f800283a 	ret
    8f64:	2007883a 	mov	r3,r4
    8f68:	300f883a 	mov	r7,r6
    8f6c:	003fc806 	br	8e90 <__alt_mem_Flash_flash_data+0xf4008e90>

00008f70 <__sread>:
    8f70:	defffe04 	addi	sp,sp,-8
    8f74:	dc000015 	stw	r16,0(sp)
    8f78:	2821883a 	mov	r16,r5
    8f7c:	2940038f 	ldh	r5,14(r5)
    8f80:	dfc00115 	stw	ra,4(sp)
    8f84:	00093680 	call	9368 <_read_r>
    8f88:	10000716 	blt	r2,zero,8fa8 <__sread+0x38>
    8f8c:	80c01417 	ldw	r3,80(r16)
    8f90:	1887883a 	add	r3,r3,r2
    8f94:	80c01415 	stw	r3,80(r16)
    8f98:	dfc00117 	ldw	ra,4(sp)
    8f9c:	dc000017 	ldw	r16,0(sp)
    8fa0:	dec00204 	addi	sp,sp,8
    8fa4:	f800283a 	ret
    8fa8:	80c0030b 	ldhu	r3,12(r16)
    8fac:	18fbffcc 	andi	r3,r3,61439
    8fb0:	80c0030d 	sth	r3,12(r16)
    8fb4:	dfc00117 	ldw	ra,4(sp)
    8fb8:	dc000017 	ldw	r16,0(sp)
    8fbc:	dec00204 	addi	sp,sp,8
    8fc0:	f800283a 	ret

00008fc4 <__seofread>:
    8fc4:	0005883a 	mov	r2,zero
    8fc8:	f800283a 	ret

00008fcc <__swrite>:
    8fcc:	2880030b 	ldhu	r2,12(r5)
    8fd0:	defffb04 	addi	sp,sp,-20
    8fd4:	dcc00315 	stw	r19,12(sp)
    8fd8:	dc800215 	stw	r18,8(sp)
    8fdc:	dc400115 	stw	r17,4(sp)
    8fe0:	dc000015 	stw	r16,0(sp)
    8fe4:	dfc00415 	stw	ra,16(sp)
    8fe8:	10c0400c 	andi	r3,r2,256
    8fec:	2821883a 	mov	r16,r5
    8ff0:	2027883a 	mov	r19,r4
    8ff4:	3025883a 	mov	r18,r6
    8ff8:	3823883a 	mov	r17,r7
    8ffc:	18000526 	beq	r3,zero,9014 <__swrite+0x48>
    9000:	2940038f 	ldh	r5,14(r5)
    9004:	000d883a 	mov	r6,zero
    9008:	01c00084 	movi	r7,2
    900c:	000930c0 	call	930c <_lseek_r>
    9010:	8080030b 	ldhu	r2,12(r16)
    9014:	8140038f 	ldh	r5,14(r16)
    9018:	10bbffcc 	andi	r2,r2,61439
    901c:	9809883a 	mov	r4,r19
    9020:	900d883a 	mov	r6,r18
    9024:	880f883a 	mov	r7,r17
    9028:	8080030d 	sth	r2,12(r16)
    902c:	dfc00417 	ldw	ra,16(sp)
    9030:	dcc00317 	ldw	r19,12(sp)
    9034:	dc800217 	ldw	r18,8(sp)
    9038:	dc400117 	ldw	r17,4(sp)
    903c:	dc000017 	ldw	r16,0(sp)
    9040:	dec00504 	addi	sp,sp,20
    9044:	00090ac1 	jmpi	90ac <_write_r>

00009048 <__sseek>:
    9048:	defffe04 	addi	sp,sp,-8
    904c:	dc000015 	stw	r16,0(sp)
    9050:	2821883a 	mov	r16,r5
    9054:	2940038f 	ldh	r5,14(r5)
    9058:	dfc00115 	stw	ra,4(sp)
    905c:	000930c0 	call	930c <_lseek_r>
    9060:	00ffffc4 	movi	r3,-1
    9064:	10c00826 	beq	r2,r3,9088 <__sseek+0x40>
    9068:	80c0030b 	ldhu	r3,12(r16)
    906c:	80801415 	stw	r2,80(r16)
    9070:	18c40014 	ori	r3,r3,4096
    9074:	80c0030d 	sth	r3,12(r16)
    9078:	dfc00117 	ldw	ra,4(sp)
    907c:	dc000017 	ldw	r16,0(sp)
    9080:	dec00204 	addi	sp,sp,8
    9084:	f800283a 	ret
    9088:	80c0030b 	ldhu	r3,12(r16)
    908c:	18fbffcc 	andi	r3,r3,61439
    9090:	80c0030d 	sth	r3,12(r16)
    9094:	dfc00117 	ldw	ra,4(sp)
    9098:	dc000017 	ldw	r16,0(sp)
    909c:	dec00204 	addi	sp,sp,8
    90a0:	f800283a 	ret

000090a4 <__sclose>:
    90a4:	2940038f 	ldh	r5,14(r5)
    90a8:	00091081 	jmpi	9108 <_close_r>

000090ac <_write_r>:
    90ac:	defffd04 	addi	sp,sp,-12
    90b0:	dc000015 	stw	r16,0(sp)
    90b4:	040000b4 	movhi	r16,2
    90b8:	dc400115 	stw	r17,4(sp)
    90bc:	84347604 	addi	r16,r16,-11816
    90c0:	2023883a 	mov	r17,r4
    90c4:	2809883a 	mov	r4,r5
    90c8:	300b883a 	mov	r5,r6
    90cc:	380d883a 	mov	r6,r7
    90d0:	dfc00215 	stw	ra,8(sp)
    90d4:	80000015 	stw	zero,0(r16)
    90d8:	000cf080 	call	cf08 <write>
    90dc:	00ffffc4 	movi	r3,-1
    90e0:	10c00526 	beq	r2,r3,90f8 <_write_r+0x4c>
    90e4:	dfc00217 	ldw	ra,8(sp)
    90e8:	dc400117 	ldw	r17,4(sp)
    90ec:	dc000017 	ldw	r16,0(sp)
    90f0:	dec00304 	addi	sp,sp,12
    90f4:	f800283a 	ret
    90f8:	80c00017 	ldw	r3,0(r16)
    90fc:	183ff926 	beq	r3,zero,90e4 <__alt_mem_Flash_flash_data+0xf40090e4>
    9100:	88c00015 	stw	r3,0(r17)
    9104:	003ff706 	br	90e4 <__alt_mem_Flash_flash_data+0xf40090e4>

00009108 <_close_r>:
    9108:	defffd04 	addi	sp,sp,-12
    910c:	dc000015 	stw	r16,0(sp)
    9110:	040000b4 	movhi	r16,2
    9114:	dc400115 	stw	r17,4(sp)
    9118:	84347604 	addi	r16,r16,-11816
    911c:	2023883a 	mov	r17,r4
    9120:	2809883a 	mov	r4,r5
    9124:	dfc00215 	stw	ra,8(sp)
    9128:	80000015 	stw	zero,0(r16)
    912c:	000c6900 	call	c690 <close>
    9130:	00ffffc4 	movi	r3,-1
    9134:	10c00526 	beq	r2,r3,914c <_close_r+0x44>
    9138:	dfc00217 	ldw	ra,8(sp)
    913c:	dc400117 	ldw	r17,4(sp)
    9140:	dc000017 	ldw	r16,0(sp)
    9144:	dec00304 	addi	sp,sp,12
    9148:	f800283a 	ret
    914c:	80c00017 	ldw	r3,0(r16)
    9150:	183ff926 	beq	r3,zero,9138 <__alt_mem_Flash_flash_data+0xf4009138>
    9154:	88c00015 	stw	r3,0(r17)
    9158:	003ff706 	br	9138 <__alt_mem_Flash_flash_data+0xf4009138>

0000915c <_fclose_r>:
    915c:	28003926 	beq	r5,zero,9244 <_fclose_r+0xe8>
    9160:	defffc04 	addi	sp,sp,-16
    9164:	dc400115 	stw	r17,4(sp)
    9168:	dc000015 	stw	r16,0(sp)
    916c:	dfc00315 	stw	ra,12(sp)
    9170:	dc800215 	stw	r18,8(sp)
    9174:	2023883a 	mov	r17,r4
    9178:	2821883a 	mov	r16,r5
    917c:	20000226 	beq	r4,zero,9188 <_fclose_r+0x2c>
    9180:	20800e17 	ldw	r2,56(r4)
    9184:	10002726 	beq	r2,zero,9224 <_fclose_r+0xc8>
    9188:	8080030f 	ldh	r2,12(r16)
    918c:	1000071e 	bne	r2,zero,91ac <_fclose_r+0x50>
    9190:	0005883a 	mov	r2,zero
    9194:	dfc00317 	ldw	ra,12(sp)
    9198:	dc800217 	ldw	r18,8(sp)
    919c:	dc400117 	ldw	r17,4(sp)
    91a0:	dc000017 	ldw	r16,0(sp)
    91a4:	dec00404 	addi	sp,sp,16
    91a8:	f800283a 	ret
    91ac:	8809883a 	mov	r4,r17
    91b0:	800b883a 	mov	r5,r16
    91b4:	00080c40 	call	80c4 <__sflush_r>
    91b8:	1025883a 	mov	r18,r2
    91bc:	80800b17 	ldw	r2,44(r16)
    91c0:	10000426 	beq	r2,zero,91d4 <_fclose_r+0x78>
    91c4:	81400717 	ldw	r5,28(r16)
    91c8:	8809883a 	mov	r4,r17
    91cc:	103ee83a 	callr	r2
    91d0:	10001616 	blt	r2,zero,922c <_fclose_r+0xd0>
    91d4:	8080030b 	ldhu	r2,12(r16)
    91d8:	1080200c 	andi	r2,r2,128
    91dc:	1000151e 	bne	r2,zero,9234 <_fclose_r+0xd8>
    91e0:	81400c17 	ldw	r5,48(r16)
    91e4:	28000526 	beq	r5,zero,91fc <_fclose_r+0xa0>
    91e8:	80801004 	addi	r2,r16,64
    91ec:	28800226 	beq	r5,r2,91f8 <_fclose_r+0x9c>
    91f0:	8809883a 	mov	r4,r17
    91f4:	000881c0 	call	881c <_free_r>
    91f8:	80000c15 	stw	zero,48(r16)
    91fc:	81401117 	ldw	r5,68(r16)
    9200:	28000326 	beq	r5,zero,9210 <_fclose_r+0xb4>
    9204:	8809883a 	mov	r4,r17
    9208:	000881c0 	call	881c <_free_r>
    920c:	80001115 	stw	zero,68(r16)
    9210:	00086b80 	call	86b8 <__sfp_lock_acquire>
    9214:	8000030d 	sth	zero,12(r16)
    9218:	00086bc0 	call	86bc <__sfp_lock_release>
    921c:	9005883a 	mov	r2,r18
    9220:	003fdc06 	br	9194 <__alt_mem_Flash_flash_data+0xf4009194>
    9224:	00086a80 	call	86a8 <__sinit>
    9228:	003fd706 	br	9188 <__alt_mem_Flash_flash_data+0xf4009188>
    922c:	04bfffc4 	movi	r18,-1
    9230:	003fe806 	br	91d4 <__alt_mem_Flash_flash_data+0xf40091d4>
    9234:	81400417 	ldw	r5,16(r16)
    9238:	8809883a 	mov	r4,r17
    923c:	000881c0 	call	881c <_free_r>
    9240:	003fe706 	br	91e0 <__alt_mem_Flash_flash_data+0xf40091e0>
    9244:	0005883a 	mov	r2,zero
    9248:	f800283a 	ret

0000924c <fclose>:
    924c:	008000b4 	movhi	r2,2
    9250:	10ac7504 	addi	r2,r2,-20012
    9254:	200b883a 	mov	r5,r4
    9258:	11000017 	ldw	r4,0(r2)
    925c:	000915c1 	jmpi	915c <_fclose_r>

00009260 <_fstat_r>:
    9260:	defffd04 	addi	sp,sp,-12
    9264:	dc000015 	stw	r16,0(sp)
    9268:	040000b4 	movhi	r16,2
    926c:	dc400115 	stw	r17,4(sp)
    9270:	84347604 	addi	r16,r16,-11816
    9274:	2023883a 	mov	r17,r4
    9278:	2809883a 	mov	r4,r5
    927c:	300b883a 	mov	r5,r6
    9280:	dfc00215 	stw	ra,8(sp)
    9284:	80000015 	stw	zero,0(r16)
    9288:	000c7dc0 	call	c7dc <fstat>
    928c:	00ffffc4 	movi	r3,-1
    9290:	10c00526 	beq	r2,r3,92a8 <_fstat_r+0x48>
    9294:	dfc00217 	ldw	ra,8(sp)
    9298:	dc400117 	ldw	r17,4(sp)
    929c:	dc000017 	ldw	r16,0(sp)
    92a0:	dec00304 	addi	sp,sp,12
    92a4:	f800283a 	ret
    92a8:	80c00017 	ldw	r3,0(r16)
    92ac:	183ff926 	beq	r3,zero,9294 <__alt_mem_Flash_flash_data+0xf4009294>
    92b0:	88c00015 	stw	r3,0(r17)
    92b4:	003ff706 	br	9294 <__alt_mem_Flash_flash_data+0xf4009294>

000092b8 <_isatty_r>:
    92b8:	defffd04 	addi	sp,sp,-12
    92bc:	dc000015 	stw	r16,0(sp)
    92c0:	040000b4 	movhi	r16,2
    92c4:	dc400115 	stw	r17,4(sp)
    92c8:	84347604 	addi	r16,r16,-11816
    92cc:	2023883a 	mov	r17,r4
    92d0:	2809883a 	mov	r4,r5
    92d4:	dfc00215 	stw	ra,8(sp)
    92d8:	80000015 	stw	zero,0(r16)
    92dc:	000c8dc0 	call	c8dc <isatty>
    92e0:	00ffffc4 	movi	r3,-1
    92e4:	10c00526 	beq	r2,r3,92fc <_isatty_r+0x44>
    92e8:	dfc00217 	ldw	ra,8(sp)
    92ec:	dc400117 	ldw	r17,4(sp)
    92f0:	dc000017 	ldw	r16,0(sp)
    92f4:	dec00304 	addi	sp,sp,12
    92f8:	f800283a 	ret
    92fc:	80c00017 	ldw	r3,0(r16)
    9300:	183ff926 	beq	r3,zero,92e8 <__alt_mem_Flash_flash_data+0xf40092e8>
    9304:	88c00015 	stw	r3,0(r17)
    9308:	003ff706 	br	92e8 <__alt_mem_Flash_flash_data+0xf40092e8>

0000930c <_lseek_r>:
    930c:	defffd04 	addi	sp,sp,-12
    9310:	dc000015 	stw	r16,0(sp)
    9314:	040000b4 	movhi	r16,2
    9318:	dc400115 	stw	r17,4(sp)
    931c:	84347604 	addi	r16,r16,-11816
    9320:	2023883a 	mov	r17,r4
    9324:	2809883a 	mov	r4,r5
    9328:	300b883a 	mov	r5,r6
    932c:	380d883a 	mov	r6,r7
    9330:	dfc00215 	stw	ra,8(sp)
    9334:	80000015 	stw	zero,0(r16)
    9338:	000cab40 	call	cab4 <lseek>
    933c:	00ffffc4 	movi	r3,-1
    9340:	10c00526 	beq	r2,r3,9358 <_lseek_r+0x4c>
    9344:	dfc00217 	ldw	ra,8(sp)
    9348:	dc400117 	ldw	r17,4(sp)
    934c:	dc000017 	ldw	r16,0(sp)
    9350:	dec00304 	addi	sp,sp,12
    9354:	f800283a 	ret
    9358:	80c00017 	ldw	r3,0(r16)
    935c:	183ff926 	beq	r3,zero,9344 <__alt_mem_Flash_flash_data+0xf4009344>
    9360:	88c00015 	stw	r3,0(r17)
    9364:	003ff706 	br	9344 <__alt_mem_Flash_flash_data+0xf4009344>

00009368 <_read_r>:
    9368:	defffd04 	addi	sp,sp,-12
    936c:	dc000015 	stw	r16,0(sp)
    9370:	040000b4 	movhi	r16,2
    9374:	dc400115 	stw	r17,4(sp)
    9378:	84347604 	addi	r16,r16,-11816
    937c:	2023883a 	mov	r17,r4
    9380:	2809883a 	mov	r4,r5
    9384:	300b883a 	mov	r5,r6
    9388:	380d883a 	mov	r6,r7
    938c:	dfc00215 	stw	ra,8(sp)
    9390:	80000015 	stw	zero,0(r16)
    9394:	000ccac0 	call	ccac <read>
    9398:	00ffffc4 	movi	r3,-1
    939c:	10c00526 	beq	r2,r3,93b4 <_read_r+0x4c>
    93a0:	dfc00217 	ldw	ra,8(sp)
    93a4:	dc400117 	ldw	r17,4(sp)
    93a8:	dc000017 	ldw	r16,0(sp)
    93ac:	dec00304 	addi	sp,sp,12
    93b0:	f800283a 	ret
    93b4:	80c00017 	ldw	r3,0(r16)
    93b8:	183ff926 	beq	r3,zero,93a0 <__alt_mem_Flash_flash_data+0xf40093a0>
    93bc:	88c00015 	stw	r3,0(r17)
    93c0:	003ff706 	br	93a0 <__alt_mem_Flash_flash_data+0xf40093a0>

000093c4 <__udivdi3>:
    93c4:	defff504 	addi	sp,sp,-44
    93c8:	dcc00415 	stw	r19,16(sp)
    93cc:	dc000115 	stw	r16,4(sp)
    93d0:	dfc00a15 	stw	ra,40(sp)
    93d4:	df000915 	stw	fp,36(sp)
    93d8:	ddc00815 	stw	r23,32(sp)
    93dc:	dd800715 	stw	r22,28(sp)
    93e0:	dd400615 	stw	r21,24(sp)
    93e4:	dd000515 	stw	r20,20(sp)
    93e8:	dc800315 	stw	r18,12(sp)
    93ec:	dc400215 	stw	r17,8(sp)
    93f0:	2027883a 	mov	r19,r4
    93f4:	2821883a 	mov	r16,r5
    93f8:	3800421e 	bne	r7,zero,9504 <__udivdi3+0x140>
    93fc:	3025883a 	mov	r18,r6
    9400:	2023883a 	mov	r17,r4
    9404:	2980542e 	bgeu	r5,r6,9558 <__udivdi3+0x194>
    9408:	00bfffd4 	movui	r2,65535
    940c:	282d883a 	mov	r22,r5
    9410:	1180a836 	bltu	r2,r6,96b4 <__udivdi3+0x2f0>
    9414:	00803fc4 	movi	r2,255
    9418:	1181422e 	bgeu	r2,r6,9924 <__udivdi3+0x560>
    941c:	00800204 	movi	r2,8
    9420:	1007883a 	mov	r3,r2
    9424:	3084d83a 	srl	r2,r6,r2
    9428:	010000b4 	movhi	r4,2
    942c:	2123e004 	addi	r4,r4,-28800
    9430:	2085883a 	add	r2,r4,r2
    9434:	10800003 	ldbu	r2,0(r2)
    9438:	10c7883a 	add	r3,r2,r3
    943c:	00800804 	movi	r2,32
    9440:	10c5c83a 	sub	r2,r2,r3
    9444:	10000526 	beq	r2,zero,945c <__udivdi3+0x98>
    9448:	80a0983a 	sll	r16,r16,r2
    944c:	98c6d83a 	srl	r3,r19,r3
    9450:	30a4983a 	sll	r18,r6,r2
    9454:	98a2983a 	sll	r17,r19,r2
    9458:	80ecb03a 	or	r22,r16,r3
    945c:	902ad43a 	srli	r21,r18,16
    9460:	b009883a 	mov	r4,r22
    9464:	953fffcc 	andi	r20,r18,65535
    9468:	a80b883a 	mov	r5,r21
    946c:	000a0380 	call	a038 <__umodsi3>
    9470:	b009883a 	mov	r4,r22
    9474:	a80b883a 	mov	r5,r21
    9478:	1027883a 	mov	r19,r2
    947c:	000a0300 	call	a030 <__udivsi3>
    9480:	1021883a 	mov	r16,r2
    9484:	8806d43a 	srli	r3,r17,16
    9488:	9804943a 	slli	r2,r19,16
    948c:	8527383a 	mul	r19,r16,r20
    9490:	10c4b03a 	or	r2,r2,r3
    9494:	14c0052e 	bgeu	r2,r19,94ac <__udivdi3+0xe8>
    9498:	1485883a 	add	r2,r2,r18
    949c:	80ffffc4 	addi	r3,r16,-1
    94a0:	14800136 	bltu	r2,r18,94a8 <__udivdi3+0xe4>
    94a4:	14c13436 	bltu	r2,r19,9978 <__udivdi3+0x5b4>
    94a8:	1821883a 	mov	r16,r3
    94ac:	14e7c83a 	sub	r19,r2,r19
    94b0:	9809883a 	mov	r4,r19
    94b4:	a80b883a 	mov	r5,r21
    94b8:	000a0380 	call	a038 <__umodsi3>
    94bc:	102d883a 	mov	r22,r2
    94c0:	9809883a 	mov	r4,r19
    94c4:	a80b883a 	mov	r5,r21
    94c8:	000a0300 	call	a030 <__udivsi3>
    94cc:	b02c943a 	slli	r22,r22,16
    94d0:	1529383a 	mul	r20,r2,r20
    94d4:	8c7fffcc 	andi	r17,r17,65535
    94d8:	b462b03a 	or	r17,r22,r17
    94dc:	8d00052e 	bgeu	r17,r20,94f4 <__udivdi3+0x130>
    94e0:	8ca3883a 	add	r17,r17,r18
    94e4:	10ffffc4 	addi	r3,r2,-1
    94e8:	8c80f636 	bltu	r17,r18,98c4 <__udivdi3+0x500>
    94ec:	8d00f52e 	bgeu	r17,r20,98c4 <__udivdi3+0x500>
    94f0:	10bfff84 	addi	r2,r2,-2
    94f4:	8020943a 	slli	r16,r16,16
    94f8:	0007883a 	mov	r3,zero
    94fc:	1404b03a 	or	r2,r2,r16
    9500:	00005b06 	br	9670 <__udivdi3+0x2ac>
    9504:	29c05836 	bltu	r5,r7,9668 <__udivdi3+0x2a4>
    9508:	00bfffd4 	movui	r2,65535
    950c:	11c0642e 	bgeu	r2,r7,96a0 <__udivdi3+0x2dc>
    9510:	00804034 	movhi	r2,256
    9514:	10bfffc4 	addi	r2,r2,-1
    9518:	11c0f32e 	bgeu	r2,r7,98e8 <__udivdi3+0x524>
    951c:	00c00604 	movi	r3,24
    9520:	180b883a 	mov	r5,r3
    9524:	38c6d83a 	srl	r3,r7,r3
    9528:	008000b4 	movhi	r2,2
    952c:	10a3e004 	addi	r2,r2,-28800
    9530:	10c7883a 	add	r3,r2,r3
    9534:	18c00003 	ldbu	r3,0(r3)
    9538:	01000804 	movi	r4,32
    953c:	1947883a 	add	r3,r3,r5
    9540:	20e5c83a 	sub	r18,r4,r3
    9544:	9000661e 	bne	r18,zero,96e0 <__udivdi3+0x31c>
    9548:	3c00f936 	bltu	r7,r16,9930 <__udivdi3+0x56c>
    954c:	9985403a 	cmpgeu	r2,r19,r6
    9550:	0007883a 	mov	r3,zero
    9554:	00004606 	br	9670 <__udivdi3+0x2ac>
    9558:	3000041e 	bne	r6,zero,956c <__udivdi3+0x1a8>
    955c:	01000044 	movi	r4,1
    9560:	000b883a 	mov	r5,zero
    9564:	000a0300 	call	a030 <__udivsi3>
    9568:	1025883a 	mov	r18,r2
    956c:	00bfffd4 	movui	r2,65535
    9570:	1480562e 	bgeu	r2,r18,96cc <__udivdi3+0x308>
    9574:	00804034 	movhi	r2,256
    9578:	10bfffc4 	addi	r2,r2,-1
    957c:	1480e32e 	bgeu	r2,r18,990c <__udivdi3+0x548>
    9580:	00800604 	movi	r2,24
    9584:	1007883a 	mov	r3,r2
    9588:	9084d83a 	srl	r2,r18,r2
    958c:	010000b4 	movhi	r4,2
    9590:	2123e004 	addi	r4,r4,-28800
    9594:	2085883a 	add	r2,r4,r2
    9598:	10800003 	ldbu	r2,0(r2)
    959c:	10c5883a 	add	r2,r2,r3
    95a0:	00c00804 	movi	r3,32
    95a4:	1887c83a 	sub	r3,r3,r2
    95a8:	1800911e 	bne	r3,zero,97f0 <__udivdi3+0x42c>
    95ac:	9028d43a 	srli	r20,r18,16
    95b0:	84a1c83a 	sub	r16,r16,r18
    95b4:	957fffcc 	andi	r21,r18,65535
    95b8:	00c00044 	movi	r3,1
    95bc:	8009883a 	mov	r4,r16
    95c0:	a00b883a 	mov	r5,r20
    95c4:	d8c00015 	stw	r3,0(sp)
    95c8:	000a0380 	call	a038 <__umodsi3>
    95cc:	8009883a 	mov	r4,r16
    95d0:	a00b883a 	mov	r5,r20
    95d4:	1027883a 	mov	r19,r2
    95d8:	000a0300 	call	a030 <__udivsi3>
    95dc:	1021883a 	mov	r16,r2
    95e0:	880cd43a 	srli	r6,r17,16
    95e4:	9804943a 	slli	r2,r19,16
    95e8:	8567383a 	mul	r19,r16,r21
    95ec:	d8c00017 	ldw	r3,0(sp)
    95f0:	1188b03a 	or	r4,r2,r6
    95f4:	24c0052e 	bgeu	r4,r19,960c <__udivdi3+0x248>
    95f8:	2489883a 	add	r4,r4,r18
    95fc:	80bfffc4 	addi	r2,r16,-1
    9600:	24800136 	bltu	r4,r18,9608 <__udivdi3+0x244>
    9604:	24c0d936 	bltu	r4,r19,996c <__udivdi3+0x5a8>
    9608:	1021883a 	mov	r16,r2
    960c:	24e7c83a 	sub	r19,r4,r19
    9610:	9809883a 	mov	r4,r19
    9614:	a00b883a 	mov	r5,r20
    9618:	d8c00015 	stw	r3,0(sp)
    961c:	000a0380 	call	a038 <__umodsi3>
    9620:	102d883a 	mov	r22,r2
    9624:	9809883a 	mov	r4,r19
    9628:	a00b883a 	mov	r5,r20
    962c:	000a0300 	call	a030 <__udivsi3>
    9630:	b02c943a 	slli	r22,r22,16
    9634:	156b383a 	mul	r21,r2,r21
    9638:	8c7fffcc 	andi	r17,r17,65535
    963c:	b462b03a 	or	r17,r22,r17
    9640:	d8c00017 	ldw	r3,0(sp)
    9644:	8d40052e 	bgeu	r17,r21,965c <__udivdi3+0x298>
    9648:	8ca3883a 	add	r17,r17,r18
    964c:	113fffc4 	addi	r4,r2,-1
    9650:	8c809a36 	bltu	r17,r18,98bc <__udivdi3+0x4f8>
    9654:	8d40992e 	bgeu	r17,r21,98bc <__udivdi3+0x4f8>
    9658:	10bfff84 	addi	r2,r2,-2
    965c:	8020943a 	slli	r16,r16,16
    9660:	1404b03a 	or	r2,r2,r16
    9664:	00000206 	br	9670 <__udivdi3+0x2ac>
    9668:	0007883a 	mov	r3,zero
    966c:	0005883a 	mov	r2,zero
    9670:	dfc00a17 	ldw	ra,40(sp)
    9674:	df000917 	ldw	fp,36(sp)
    9678:	ddc00817 	ldw	r23,32(sp)
    967c:	dd800717 	ldw	r22,28(sp)
    9680:	dd400617 	ldw	r21,24(sp)
    9684:	dd000517 	ldw	r20,20(sp)
    9688:	dcc00417 	ldw	r19,16(sp)
    968c:	dc800317 	ldw	r18,12(sp)
    9690:	dc400217 	ldw	r17,8(sp)
    9694:	dc000117 	ldw	r16,4(sp)
    9698:	dec00b04 	addi	sp,sp,44
    969c:	f800283a 	ret
    96a0:	00803fc4 	movi	r2,255
    96a4:	11c0932e 	bgeu	r2,r7,98f4 <__udivdi3+0x530>
    96a8:	00c00204 	movi	r3,8
    96ac:	180b883a 	mov	r5,r3
    96b0:	003f9c06 	br	9524 <__alt_mem_Flash_flash_data+0xf4009524>
    96b4:	00804034 	movhi	r2,256
    96b8:	10bfffc4 	addi	r2,r2,-1
    96bc:	1180902e 	bgeu	r2,r6,9900 <__udivdi3+0x53c>
    96c0:	00800604 	movi	r2,24
    96c4:	1007883a 	mov	r3,r2
    96c8:	003f5606 	br	9424 <__alt_mem_Flash_flash_data+0xf4009424>
    96cc:	00803fc4 	movi	r2,255
    96d0:	1480912e 	bgeu	r2,r18,9918 <__udivdi3+0x554>
    96d4:	00800204 	movi	r2,8
    96d8:	1007883a 	mov	r3,r2
    96dc:	003faa06 	br	9588 <__alt_mem_Flash_flash_data+0xf4009588>
    96e0:	30eed83a 	srl	r23,r6,r3
    96e4:	3c8e983a 	sll	r7,r7,r18
    96e8:	80f8d83a 	srl	fp,r16,r3
    96ec:	98c6d83a 	srl	r3,r19,r3
    96f0:	3deeb03a 	or	r23,r7,r23
    96f4:	b828d43a 	srli	r20,r23,16
    96f8:	84a0983a 	sll	r16,r16,r18
    96fc:	e009883a 	mov	r4,fp
    9700:	a00b883a 	mov	r5,r20
    9704:	80e2b03a 	or	r17,r16,r3
    9708:	34aa983a 	sll	r21,r6,r18
    970c:	000a0380 	call	a038 <__umodsi3>
    9710:	e009883a 	mov	r4,fp
    9714:	a00b883a 	mov	r5,r20
    9718:	102d883a 	mov	r22,r2
    971c:	000a0300 	call	a030 <__udivsi3>
    9720:	1021883a 	mov	r16,r2
    9724:	bf3fffcc 	andi	fp,r23,65535
    9728:	b004943a 	slli	r2,r22,16
    972c:	8808d43a 	srli	r4,r17,16
    9730:	872d383a 	mul	r22,r16,fp
    9734:	1104b03a 	or	r2,r2,r4
    9738:	1580042e 	bgeu	r2,r22,974c <__udivdi3+0x388>
    973c:	15c5883a 	add	r2,r2,r23
    9740:	80ffffc4 	addi	r3,r16,-1
    9744:	15c0812e 	bgeu	r2,r23,994c <__udivdi3+0x588>
    9748:	1821883a 	mov	r16,r3
    974c:	15adc83a 	sub	r22,r2,r22
    9750:	b009883a 	mov	r4,r22
    9754:	a00b883a 	mov	r5,r20
    9758:	000a0380 	call	a038 <__umodsi3>
    975c:	a00b883a 	mov	r5,r20
    9760:	b009883a 	mov	r4,r22
    9764:	d8800015 	stw	r2,0(sp)
    9768:	000a0300 	call	a030 <__udivsi3>
    976c:	d8c00017 	ldw	r3,0(sp)
    9770:	170b383a 	mul	r5,r2,fp
    9774:	8c7fffcc 	andi	r17,r17,65535
    9778:	1806943a 	slli	r3,r3,16
    977c:	1c46b03a 	or	r3,r3,r17
    9780:	1940042e 	bgeu	r3,r5,9794 <__udivdi3+0x3d0>
    9784:	1dc7883a 	add	r3,r3,r23
    9788:	113fffc4 	addi	r4,r2,-1
    978c:	1dc06b2e 	bgeu	r3,r23,993c <__udivdi3+0x578>
    9790:	2005883a 	mov	r2,r4
    9794:	8020943a 	slli	r16,r16,16
    9798:	a9ffffcc 	andi	r7,r21,65535
    979c:	a82ad43a 	srli	r21,r21,16
    97a0:	1404b03a 	or	r2,r2,r16
    97a4:	113fffcc 	andi	r4,r2,65535
    97a8:	100cd43a 	srli	r6,r2,16
    97ac:	21d3383a 	mul	r9,r4,r7
    97b0:	2549383a 	mul	r4,r4,r21
    97b4:	31cf383a 	mul	r7,r6,r7
    97b8:	4810d43a 	srli	r8,r9,16
    97bc:	1947c83a 	sub	r3,r3,r5
    97c0:	3909883a 	add	r4,r7,r4
    97c4:	2209883a 	add	r4,r4,r8
    97c8:	354d383a 	mul	r6,r6,r21
    97cc:	21c0022e 	bgeu	r4,r7,97d8 <__udivdi3+0x414>
    97d0:	01400074 	movhi	r5,1
    97d4:	314d883a 	add	r6,r6,r5
    97d8:	202ad43a 	srli	r21,r4,16
    97dc:	354d883a 	add	r6,r6,r21
    97e0:	19803f36 	bltu	r3,r6,98e0 <__udivdi3+0x51c>
    97e4:	19803926 	beq	r3,r6,98cc <__udivdi3+0x508>
    97e8:	0007883a 	mov	r3,zero
    97ec:	003fa006 	br	9670 <__alt_mem_Flash_flash_data+0xf4009670>
    97f0:	90e4983a 	sll	r18,r18,r3
    97f4:	80aad83a 	srl	r21,r16,r2
    97f8:	80e0983a 	sll	r16,r16,r3
    97fc:	9028d43a 	srli	r20,r18,16
    9800:	9884d83a 	srl	r2,r19,r2
    9804:	a809883a 	mov	r4,r21
    9808:	a00b883a 	mov	r5,r20
    980c:	80acb03a 	or	r22,r16,r2
    9810:	98e2983a 	sll	r17,r19,r3
    9814:	000a0380 	call	a038 <__umodsi3>
    9818:	a809883a 	mov	r4,r21
    981c:	a00b883a 	mov	r5,r20
    9820:	1021883a 	mov	r16,r2
    9824:	000a0300 	call	a030 <__udivsi3>
    9828:	957fffcc 	andi	r21,r18,65535
    982c:	8020943a 	slli	r16,r16,16
    9830:	b00ad43a 	srli	r5,r22,16
    9834:	1567383a 	mul	r19,r2,r21
    9838:	102f883a 	mov	r23,r2
    983c:	8148b03a 	or	r4,r16,r5
    9840:	24c0062e 	bgeu	r4,r19,985c <__udivdi3+0x498>
    9844:	2489883a 	add	r4,r4,r18
    9848:	10bfffc4 	addi	r2,r2,-1
    984c:	24804536 	bltu	r4,r18,9964 <__udivdi3+0x5a0>
    9850:	24c0442e 	bgeu	r4,r19,9964 <__udivdi3+0x5a0>
    9854:	bdffff84 	addi	r23,r23,-2
    9858:	2489883a 	add	r4,r4,r18
    985c:	24e7c83a 	sub	r19,r4,r19
    9860:	9809883a 	mov	r4,r19
    9864:	a00b883a 	mov	r5,r20
    9868:	000a0380 	call	a038 <__umodsi3>
    986c:	1021883a 	mov	r16,r2
    9870:	9809883a 	mov	r4,r19
    9874:	a00b883a 	mov	r5,r20
    9878:	000a0300 	call	a030 <__udivsi3>
    987c:	8020943a 	slli	r16,r16,16
    9880:	1007883a 	mov	r3,r2
    9884:	1545383a 	mul	r2,r2,r21
    9888:	b13fffcc 	andi	r4,r22,65535
    988c:	8108b03a 	or	r4,r16,r4
    9890:	2080062e 	bgeu	r4,r2,98ac <__udivdi3+0x4e8>
    9894:	2489883a 	add	r4,r4,r18
    9898:	197fffc4 	addi	r5,r3,-1
    989c:	24802f36 	bltu	r4,r18,995c <__udivdi3+0x598>
    98a0:	20802e2e 	bgeu	r4,r2,995c <__udivdi3+0x598>
    98a4:	18ffff84 	addi	r3,r3,-2
    98a8:	2489883a 	add	r4,r4,r18
    98ac:	b82e943a 	slli	r23,r23,16
    98b0:	20a1c83a 	sub	r16,r4,r2
    98b4:	1dc6b03a 	or	r3,r3,r23
    98b8:	003f4006 	br	95bc <__alt_mem_Flash_flash_data+0xf40095bc>
    98bc:	2005883a 	mov	r2,r4
    98c0:	003f6606 	br	965c <__alt_mem_Flash_flash_data+0xf400965c>
    98c4:	1805883a 	mov	r2,r3
    98c8:	003f0a06 	br	94f4 <__alt_mem_Flash_flash_data+0xf40094f4>
    98cc:	2006943a 	slli	r3,r4,16
    98d0:	9c88983a 	sll	r4,r19,r18
    98d4:	4a7fffcc 	andi	r9,r9,65535
    98d8:	1a47883a 	add	r3,r3,r9
    98dc:	20ffc22e 	bgeu	r4,r3,97e8 <__alt_mem_Flash_flash_data+0xf40097e8>
    98e0:	10bfffc4 	addi	r2,r2,-1
    98e4:	003fc006 	br	97e8 <__alt_mem_Flash_flash_data+0xf40097e8>
    98e8:	00c00404 	movi	r3,16
    98ec:	180b883a 	mov	r5,r3
    98f0:	003f0c06 	br	9524 <__alt_mem_Flash_flash_data+0xf4009524>
    98f4:	0007883a 	mov	r3,zero
    98f8:	000b883a 	mov	r5,zero
    98fc:	003f0906 	br	9524 <__alt_mem_Flash_flash_data+0xf4009524>
    9900:	00800404 	movi	r2,16
    9904:	1007883a 	mov	r3,r2
    9908:	003ec606 	br	9424 <__alt_mem_Flash_flash_data+0xf4009424>
    990c:	00800404 	movi	r2,16
    9910:	1007883a 	mov	r3,r2
    9914:	003f1c06 	br	9588 <__alt_mem_Flash_flash_data+0xf4009588>
    9918:	0005883a 	mov	r2,zero
    991c:	0007883a 	mov	r3,zero
    9920:	003f1906 	br	9588 <__alt_mem_Flash_flash_data+0xf4009588>
    9924:	0005883a 	mov	r2,zero
    9928:	0007883a 	mov	r3,zero
    992c:	003ebd06 	br	9424 <__alt_mem_Flash_flash_data+0xf4009424>
    9930:	0007883a 	mov	r3,zero
    9934:	00800044 	movi	r2,1
    9938:	003f4d06 	br	9670 <__alt_mem_Flash_flash_data+0xf4009670>
    993c:	197f942e 	bgeu	r3,r5,9790 <__alt_mem_Flash_flash_data+0xf4009790>
    9940:	10bfff84 	addi	r2,r2,-2
    9944:	1dc7883a 	add	r3,r3,r23
    9948:	003f9206 	br	9794 <__alt_mem_Flash_flash_data+0xf4009794>
    994c:	15bf7e2e 	bgeu	r2,r22,9748 <__alt_mem_Flash_flash_data+0xf4009748>
    9950:	843fff84 	addi	r16,r16,-2
    9954:	15c5883a 	add	r2,r2,r23
    9958:	003f7c06 	br	974c <__alt_mem_Flash_flash_data+0xf400974c>
    995c:	2807883a 	mov	r3,r5
    9960:	003fd206 	br	98ac <__alt_mem_Flash_flash_data+0xf40098ac>
    9964:	102f883a 	mov	r23,r2
    9968:	003fbc06 	br	985c <__alt_mem_Flash_flash_data+0xf400985c>
    996c:	843fff84 	addi	r16,r16,-2
    9970:	2489883a 	add	r4,r4,r18
    9974:	003f2506 	br	960c <__alt_mem_Flash_flash_data+0xf400960c>
    9978:	843fff84 	addi	r16,r16,-2
    997c:	1485883a 	add	r2,r2,r18
    9980:	003eca06 	br	94ac <__alt_mem_Flash_flash_data+0xf40094ac>

00009984 <__umoddi3>:
    9984:	defff404 	addi	sp,sp,-48
    9988:	ddc00915 	stw	r23,36(sp)
    998c:	dc400315 	stw	r17,12(sp)
    9990:	dc000215 	stw	r16,8(sp)
    9994:	dfc00b15 	stw	ra,44(sp)
    9998:	df000a15 	stw	fp,40(sp)
    999c:	dd800815 	stw	r22,32(sp)
    99a0:	dd400715 	stw	r21,28(sp)
    99a4:	dd000615 	stw	r20,24(sp)
    99a8:	dcc00515 	stw	r19,20(sp)
    99ac:	dc800415 	stw	r18,16(sp)
    99b0:	2021883a 	mov	r16,r4
    99b4:	2823883a 	mov	r17,r5
    99b8:	282f883a 	mov	r23,r5
    99bc:	3800381e 	bne	r7,zero,9aa0 <__umoddi3+0x11c>
    99c0:	3027883a 	mov	r19,r6
    99c4:	2029883a 	mov	r20,r4
    99c8:	29804e2e 	bgeu	r5,r6,9b04 <__umoddi3+0x180>
    99cc:	00bfffd4 	movui	r2,65535
    99d0:	11809c36 	bltu	r2,r6,9c44 <__umoddi3+0x2c0>
    99d4:	00803fc4 	movi	r2,255
    99d8:	11813b2e 	bgeu	r2,r6,9ec8 <__umoddi3+0x544>
    99dc:	01400204 	movi	r5,8
    99e0:	2805883a 	mov	r2,r5
    99e4:	314ad83a 	srl	r5,r6,r5
    99e8:	00c000b4 	movhi	r3,2
    99ec:	18e3e004 	addi	r3,r3,-28800
    99f0:	194b883a 	add	r5,r3,r5
    99f4:	29000003 	ldbu	r4,0(r5)
    99f8:	2089883a 	add	r4,r4,r2
    99fc:	00800804 	movi	r2,32
    9a00:	1105c83a 	sub	r2,r2,r4
    9a04:	1000ec26 	beq	r2,zero,9db8 <__umoddi3+0x434>
    9a08:	88a2983a 	sll	r17,r17,r2
    9a0c:	8108d83a 	srl	r4,r16,r4
    9a10:	30a6983a 	sll	r19,r6,r2
    9a14:	80a8983a 	sll	r20,r16,r2
    9a18:	1025883a 	mov	r18,r2
    9a1c:	892eb03a 	or	r23,r17,r4
    9a20:	982cd43a 	srli	r22,r19,16
    9a24:	b809883a 	mov	r4,r23
    9a28:	9d7fffcc 	andi	r21,r19,65535
    9a2c:	b00b883a 	mov	r5,r22
    9a30:	000a0380 	call	a038 <__umodsi3>
    9a34:	b809883a 	mov	r4,r23
    9a38:	b00b883a 	mov	r5,r22
    9a3c:	1021883a 	mov	r16,r2
    9a40:	000a0300 	call	a030 <__udivsi3>
    9a44:	8020943a 	slli	r16,r16,16
    9a48:	a00cd43a 	srli	r6,r20,16
    9a4c:	1545383a 	mul	r2,r2,r21
    9a50:	8188b03a 	or	r4,r16,r6
    9a54:	2080042e 	bgeu	r4,r2,9a68 <__umoddi3+0xe4>
    9a58:	24c9883a 	add	r4,r4,r19
    9a5c:	24c00236 	bltu	r4,r19,9a68 <__umoddi3+0xe4>
    9a60:	2080012e 	bgeu	r4,r2,9a68 <__umoddi3+0xe4>
    9a64:	24c9883a 	add	r4,r4,r19
    9a68:	20a3c83a 	sub	r17,r4,r2
    9a6c:	8809883a 	mov	r4,r17
    9a70:	b00b883a 	mov	r5,r22
    9a74:	000a0380 	call	a038 <__umodsi3>
    9a78:	8809883a 	mov	r4,r17
    9a7c:	b00b883a 	mov	r5,r22
    9a80:	1021883a 	mov	r16,r2
    9a84:	000a0300 	call	a030 <__udivsi3>
    9a88:	8006943a 	slli	r3,r16,16
    9a8c:	1545383a 	mul	r2,r2,r21
    9a90:	a13fffcc 	andi	r4,r20,65535
    9a94:	1906b03a 	or	r3,r3,r4
    9a98:	1880532e 	bgeu	r3,r2,9be8 <__umoddi3+0x264>
    9a9c:	00004e06 	br	9bd8 <__umoddi3+0x254>
    9aa0:	29c05536 	bltu	r5,r7,9bf8 <__umoddi3+0x274>
    9aa4:	00bfffd4 	movui	r2,65535
    9aa8:	11c0612e 	bgeu	r2,r7,9c30 <__umoddi3+0x2ac>
    9aac:	00804034 	movhi	r2,256
    9ab0:	10bfffc4 	addi	r2,r2,-1
    9ab4:	11c0f82e 	bgeu	r2,r7,9e98 <__umoddi3+0x514>
    9ab8:	01400604 	movi	r5,24
    9abc:	282b883a 	mov	r21,r5
    9ac0:	394ad83a 	srl	r5,r7,r5
    9ac4:	00c000b4 	movhi	r3,2
    9ac8:	18e3e004 	addi	r3,r3,-28800
    9acc:	194b883a 	add	r5,r3,r5
    9ad0:	28800003 	ldbu	r2,0(r5)
    9ad4:	00c00804 	movi	r3,32
    9ad8:	156b883a 	add	r21,r2,r21
    9adc:	1d69c83a 	sub	r20,r3,r21
    9ae0:	a000631e 	bne	r20,zero,9c70 <__umoddi3+0x2ec>
    9ae4:	3c400136 	bltu	r7,r17,9aec <__umoddi3+0x168>
    9ae8:	81810436 	bltu	r16,r6,9efc <__umoddi3+0x578>
    9aec:	8185c83a 	sub	r2,r16,r6
    9af0:	89e3c83a 	sub	r17,r17,r7
    9af4:	8087803a 	cmpltu	r3,r16,r2
    9af8:	88efc83a 	sub	r23,r17,r3
    9afc:	b807883a 	mov	r3,r23
    9b00:	00003f06 	br	9c00 <__umoddi3+0x27c>
    9b04:	3000041e 	bne	r6,zero,9b18 <__umoddi3+0x194>
    9b08:	01000044 	movi	r4,1
    9b0c:	000b883a 	mov	r5,zero
    9b10:	000a0300 	call	a030 <__udivsi3>
    9b14:	1027883a 	mov	r19,r2
    9b18:	00bfffd4 	movui	r2,65535
    9b1c:	14c04f2e 	bgeu	r2,r19,9c5c <__umoddi3+0x2d8>
    9b20:	00804034 	movhi	r2,256
    9b24:	10bfffc4 	addi	r2,r2,-1
    9b28:	14c0e42e 	bgeu	r2,r19,9ebc <__umoddi3+0x538>
    9b2c:	00800604 	movi	r2,24
    9b30:	1007883a 	mov	r3,r2
    9b34:	9884d83a 	srl	r2,r19,r2
    9b38:	010000b4 	movhi	r4,2
    9b3c:	2123e004 	addi	r4,r4,-28800
    9b40:	2085883a 	add	r2,r4,r2
    9b44:	11000003 	ldbu	r4,0(r2)
    9b48:	00800804 	movi	r2,32
    9b4c:	20c7883a 	add	r3,r4,r3
    9b50:	10c5c83a 	sub	r2,r2,r3
    9b54:	10009a1e 	bne	r2,zero,9dc0 <__umoddi3+0x43c>
    9b58:	982cd43a 	srli	r22,r19,16
    9b5c:	8ce3c83a 	sub	r17,r17,r19
    9b60:	9c3fffcc 	andi	r16,r19,65535
    9b64:	0025883a 	mov	r18,zero
    9b68:	8809883a 	mov	r4,r17
    9b6c:	b00b883a 	mov	r5,r22
    9b70:	000a0380 	call	a038 <__umodsi3>
    9b74:	8809883a 	mov	r4,r17
    9b78:	b00b883a 	mov	r5,r22
    9b7c:	102b883a 	mov	r21,r2
    9b80:	000a0300 	call	a030 <__udivsi3>
    9b84:	a806943a 	slli	r3,r21,16
    9b88:	a008d43a 	srli	r4,r20,16
    9b8c:	1405383a 	mul	r2,r2,r16
    9b90:	190cb03a 	or	r6,r3,r4
    9b94:	3080032e 	bgeu	r6,r2,9ba4 <__umoddi3+0x220>
    9b98:	34cd883a 	add	r6,r6,r19
    9b9c:	34c00136 	bltu	r6,r19,9ba4 <__umoddi3+0x220>
    9ba0:	3080d436 	bltu	r6,r2,9ef4 <__umoddi3+0x570>
    9ba4:	30abc83a 	sub	r21,r6,r2
    9ba8:	a809883a 	mov	r4,r21
    9bac:	b00b883a 	mov	r5,r22
    9bb0:	000a0380 	call	a038 <__umodsi3>
    9bb4:	1023883a 	mov	r17,r2
    9bb8:	a809883a 	mov	r4,r21
    9bbc:	b00b883a 	mov	r5,r22
    9bc0:	000a0300 	call	a030 <__udivsi3>
    9bc4:	8822943a 	slli	r17,r17,16
    9bc8:	1405383a 	mul	r2,r2,r16
    9bcc:	a13fffcc 	andi	r4,r20,65535
    9bd0:	8906b03a 	or	r3,r17,r4
    9bd4:	1880042e 	bgeu	r3,r2,9be8 <__umoddi3+0x264>
    9bd8:	1cc7883a 	add	r3,r3,r19
    9bdc:	1cc00236 	bltu	r3,r19,9be8 <__umoddi3+0x264>
    9be0:	1880012e 	bgeu	r3,r2,9be8 <__umoddi3+0x264>
    9be4:	1cc7883a 	add	r3,r3,r19
    9be8:	1887c83a 	sub	r3,r3,r2
    9bec:	1c84d83a 	srl	r2,r3,r18
    9bf0:	0007883a 	mov	r3,zero
    9bf4:	00000206 	br	9c00 <__umoddi3+0x27c>
    9bf8:	2005883a 	mov	r2,r4
    9bfc:	2807883a 	mov	r3,r5
    9c00:	dfc00b17 	ldw	ra,44(sp)
    9c04:	df000a17 	ldw	fp,40(sp)
    9c08:	ddc00917 	ldw	r23,36(sp)
    9c0c:	dd800817 	ldw	r22,32(sp)
    9c10:	dd400717 	ldw	r21,28(sp)
    9c14:	dd000617 	ldw	r20,24(sp)
    9c18:	dcc00517 	ldw	r19,20(sp)
    9c1c:	dc800417 	ldw	r18,16(sp)
    9c20:	dc400317 	ldw	r17,12(sp)
    9c24:	dc000217 	ldw	r16,8(sp)
    9c28:	dec00c04 	addi	sp,sp,48
    9c2c:	f800283a 	ret
    9c30:	00803fc4 	movi	r2,255
    9c34:	11c0952e 	bgeu	r2,r7,9e8c <__umoddi3+0x508>
    9c38:	01400204 	movi	r5,8
    9c3c:	282b883a 	mov	r21,r5
    9c40:	003f9f06 	br	9ac0 <__alt_mem_Flash_flash_data+0xf4009ac0>
    9c44:	00804034 	movhi	r2,256
    9c48:	10bfffc4 	addi	r2,r2,-1
    9c4c:	1180952e 	bgeu	r2,r6,9ea4 <__umoddi3+0x520>
    9c50:	01400604 	movi	r5,24
    9c54:	2805883a 	mov	r2,r5
    9c58:	003f6206 	br	99e4 <__alt_mem_Flash_flash_data+0xf40099e4>
    9c5c:	00803fc4 	movi	r2,255
    9c60:	14c0932e 	bgeu	r2,r19,9eb0 <__umoddi3+0x52c>
    9c64:	00800204 	movi	r2,8
    9c68:	1007883a 	mov	r3,r2
    9c6c:	003fb106 	br	9b34 <__alt_mem_Flash_flash_data+0xf4009b34>
    9c70:	3548d83a 	srl	r4,r6,r21
    9c74:	3d0e983a 	sll	r7,r7,r20
    9c78:	8d10983a 	sll	r8,r17,r20
    9c7c:	8d6cd83a 	srl	r22,r17,r21
    9c80:	3922b03a 	or	r17,r7,r4
    9c84:	882ed43a 	srli	r23,r17,16
    9c88:	8564d83a 	srl	r18,r16,r21
    9c8c:	b009883a 	mov	r4,r22
    9c90:	b80b883a 	mov	r5,r23
    9c94:	44a4b03a 	or	r18,r8,r18
    9c98:	3526983a 	sll	r19,r6,r20
    9c9c:	000a0380 	call	a038 <__umodsi3>
    9ca0:	b009883a 	mov	r4,r22
    9ca4:	b80b883a 	mov	r5,r23
    9ca8:	1039883a 	mov	fp,r2
    9cac:	000a0300 	call	a030 <__udivsi3>
    9cb0:	102d883a 	mov	r22,r2
    9cb4:	8a3fffcc 	andi	r8,r17,65535
    9cb8:	e004943a 	slli	r2,fp,16
    9cbc:	900cd43a 	srli	r6,r18,16
    9cc0:	b239383a 	mul	fp,r22,r8
    9cc4:	8520983a 	sll	r16,r16,r20
    9cc8:	118ab03a 	or	r5,r2,r6
    9ccc:	2f00042e 	bgeu	r5,fp,9ce0 <__umoddi3+0x35c>
    9cd0:	2c4b883a 	add	r5,r5,r17
    9cd4:	b0bfffc4 	addi	r2,r22,-1
    9cd8:	2c40822e 	bgeu	r5,r17,9ee4 <__umoddi3+0x560>
    9cdc:	102d883a 	mov	r22,r2
    9ce0:	2f39c83a 	sub	fp,r5,fp
    9ce4:	e009883a 	mov	r4,fp
    9ce8:	b80b883a 	mov	r5,r23
    9cec:	da000115 	stw	r8,4(sp)
    9cf0:	000a0380 	call	a038 <__umodsi3>
    9cf4:	e009883a 	mov	r4,fp
    9cf8:	b80b883a 	mov	r5,r23
    9cfc:	d8800015 	stw	r2,0(sp)
    9d00:	000a0300 	call	a030 <__udivsi3>
    9d04:	d9800017 	ldw	r6,0(sp)
    9d08:	da000117 	ldw	r8,4(sp)
    9d0c:	94bfffcc 	andi	r18,r18,65535
    9d10:	300c943a 	slli	r6,r6,16
    9d14:	1209383a 	mul	r4,r2,r8
    9d18:	3490b03a 	or	r8,r6,r18
    9d1c:	4100042e 	bgeu	r8,r4,9d30 <__umoddi3+0x3ac>
    9d20:	4451883a 	add	r8,r8,r17
    9d24:	10ffffc4 	addi	r3,r2,-1
    9d28:	44406a2e 	bgeu	r8,r17,9ed4 <__umoddi3+0x550>
    9d2c:	1805883a 	mov	r2,r3
    9d30:	b012943a 	slli	r9,r22,16
    9d34:	9abfffcc 	andi	r10,r19,65535
    9d38:	980ed43a 	srli	r7,r19,16
    9d3c:	124ab03a 	or	r5,r2,r9
    9d40:	2a7fffcc 	andi	r9,r5,65535
    9d44:	280ad43a 	srli	r5,r5,16
    9d48:	4a8d383a 	mul	r6,r9,r10
    9d4c:	49d3383a 	mul	r9,r9,r7
    9d50:	2a95383a 	mul	r10,r5,r10
    9d54:	3004d43a 	srli	r2,r6,16
    9d58:	4111c83a 	sub	r8,r8,r4
    9d5c:	5253883a 	add	r9,r10,r9
    9d60:	4893883a 	add	r9,r9,r2
    9d64:	29cb383a 	mul	r5,r5,r7
    9d68:	4a80022e 	bgeu	r9,r10,9d74 <__umoddi3+0x3f0>
    9d6c:	00800074 	movhi	r2,1
    9d70:	288b883a 	add	r5,r5,r2
    9d74:	4808d43a 	srli	r4,r9,16
    9d78:	4812943a 	slli	r9,r9,16
    9d7c:	31bfffcc 	andi	r6,r6,65535
    9d80:	290b883a 	add	r5,r5,r4
    9d84:	498d883a 	add	r6,r9,r6
    9d88:	41403a36 	bltu	r8,r5,9e74 <__umoddi3+0x4f0>
    9d8c:	41405d26 	beq	r8,r5,9f04 <__umoddi3+0x580>
    9d90:	4149c83a 	sub	r4,r8,r5
    9d94:	300f883a 	mov	r7,r6
    9d98:	81cfc83a 	sub	r7,r16,r7
    9d9c:	81c7803a 	cmpltu	r3,r16,r7
    9da0:	20c7c83a 	sub	r3,r4,r3
    9da4:	1d44983a 	sll	r2,r3,r21
    9da8:	3d0ed83a 	srl	r7,r7,r20
    9dac:	1d06d83a 	srl	r3,r3,r20
    9db0:	11c4b03a 	or	r2,r2,r7
    9db4:	003f9206 	br	9c00 <__alt_mem_Flash_flash_data+0xf4009c00>
    9db8:	0025883a 	mov	r18,zero
    9dbc:	003f1806 	br	9a20 <__alt_mem_Flash_flash_data+0xf4009a20>
    9dc0:	98a6983a 	sll	r19,r19,r2
    9dc4:	88e8d83a 	srl	r20,r17,r3
    9dc8:	80c6d83a 	srl	r3,r16,r3
    9dcc:	982cd43a 	srli	r22,r19,16
    9dd0:	88a2983a 	sll	r17,r17,r2
    9dd4:	a009883a 	mov	r4,r20
    9dd8:	b00b883a 	mov	r5,r22
    9ddc:	88eab03a 	or	r21,r17,r3
    9de0:	1025883a 	mov	r18,r2
    9de4:	000a0380 	call	a038 <__umodsi3>
    9de8:	a009883a 	mov	r4,r20
    9dec:	b00b883a 	mov	r5,r22
    9df0:	1023883a 	mov	r17,r2
    9df4:	000a0300 	call	a030 <__udivsi3>
    9df8:	9f3fffcc 	andi	fp,r19,65535
    9dfc:	8822943a 	slli	r17,r17,16
    9e00:	a80ad43a 	srli	r5,r21,16
    9e04:	1705383a 	mul	r2,r2,fp
    9e08:	84a8983a 	sll	r20,r16,r18
    9e0c:	8948b03a 	or	r4,r17,r5
    9e10:	2080042e 	bgeu	r4,r2,9e24 <__umoddi3+0x4a0>
    9e14:	24c9883a 	add	r4,r4,r19
    9e18:	24c00236 	bltu	r4,r19,9e24 <__umoddi3+0x4a0>
    9e1c:	2080012e 	bgeu	r4,r2,9e24 <__umoddi3+0x4a0>
    9e20:	24c9883a 	add	r4,r4,r19
    9e24:	20afc83a 	sub	r23,r4,r2
    9e28:	b809883a 	mov	r4,r23
    9e2c:	b00b883a 	mov	r5,r22
    9e30:	000a0380 	call	a038 <__umodsi3>
    9e34:	1023883a 	mov	r17,r2
    9e38:	b809883a 	mov	r4,r23
    9e3c:	b00b883a 	mov	r5,r22
    9e40:	000a0300 	call	a030 <__udivsi3>
    9e44:	8822943a 	slli	r17,r17,16
    9e48:	1705383a 	mul	r2,r2,fp
    9e4c:	a93fffcc 	andi	r4,r21,65535
    9e50:	8908b03a 	or	r4,r17,r4
    9e54:	2080042e 	bgeu	r4,r2,9e68 <__umoddi3+0x4e4>
    9e58:	24c9883a 	add	r4,r4,r19
    9e5c:	24c00236 	bltu	r4,r19,9e68 <__umoddi3+0x4e4>
    9e60:	2080012e 	bgeu	r4,r2,9e68 <__umoddi3+0x4e4>
    9e64:	24c9883a 	add	r4,r4,r19
    9e68:	20a3c83a 	sub	r17,r4,r2
    9e6c:	e021883a 	mov	r16,fp
    9e70:	003f3d06 	br	9b68 <__alt_mem_Flash_flash_data+0xf4009b68>
    9e74:	34cfc83a 	sub	r7,r6,r19
    9e78:	2c4bc83a 	sub	r5,r5,r17
    9e7c:	31cd803a 	cmpltu	r6,r6,r7
    9e80:	298dc83a 	sub	r6,r5,r6
    9e84:	4189c83a 	sub	r4,r8,r6
    9e88:	003fc306 	br	9d98 <__alt_mem_Flash_flash_data+0xf4009d98>
    9e8c:	000b883a 	mov	r5,zero
    9e90:	002b883a 	mov	r21,zero
    9e94:	003f0a06 	br	9ac0 <__alt_mem_Flash_flash_data+0xf4009ac0>
    9e98:	01400404 	movi	r5,16
    9e9c:	282b883a 	mov	r21,r5
    9ea0:	003f0706 	br	9ac0 <__alt_mem_Flash_flash_data+0xf4009ac0>
    9ea4:	01400404 	movi	r5,16
    9ea8:	2805883a 	mov	r2,r5
    9eac:	003ecd06 	br	99e4 <__alt_mem_Flash_flash_data+0xf40099e4>
    9eb0:	0005883a 	mov	r2,zero
    9eb4:	0007883a 	mov	r3,zero
    9eb8:	003f1e06 	br	9b34 <__alt_mem_Flash_flash_data+0xf4009b34>
    9ebc:	00800404 	movi	r2,16
    9ec0:	1007883a 	mov	r3,r2
    9ec4:	003f1b06 	br	9b34 <__alt_mem_Flash_flash_data+0xf4009b34>
    9ec8:	000b883a 	mov	r5,zero
    9ecc:	0005883a 	mov	r2,zero
    9ed0:	003ec406 	br	99e4 <__alt_mem_Flash_flash_data+0xf40099e4>
    9ed4:	413f952e 	bgeu	r8,r4,9d2c <__alt_mem_Flash_flash_data+0xf4009d2c>
    9ed8:	10bfff84 	addi	r2,r2,-2
    9edc:	4451883a 	add	r8,r8,r17
    9ee0:	003f9306 	br	9d30 <__alt_mem_Flash_flash_data+0xf4009d30>
    9ee4:	2f3f7d2e 	bgeu	r5,fp,9cdc <__alt_mem_Flash_flash_data+0xf4009cdc>
    9ee8:	b5bfff84 	addi	r22,r22,-2
    9eec:	2c4b883a 	add	r5,r5,r17
    9ef0:	003f7b06 	br	9ce0 <__alt_mem_Flash_flash_data+0xf4009ce0>
    9ef4:	34cd883a 	add	r6,r6,r19
    9ef8:	003f2a06 	br	9ba4 <__alt_mem_Flash_flash_data+0xf4009ba4>
    9efc:	8005883a 	mov	r2,r16
    9f00:	003efe06 	br	9afc <__alt_mem_Flash_flash_data+0xf4009afc>
    9f04:	81bfdb36 	bltu	r16,r6,9e74 <__alt_mem_Flash_flash_data+0xf4009e74>
    9f08:	300f883a 	mov	r7,r6
    9f0c:	0009883a 	mov	r4,zero
    9f10:	003fa106 	br	9d98 <__alt_mem_Flash_flash_data+0xf4009d98>

00009f14 <udivmodsi4>:
    9f14:	2900182e 	bgeu	r5,r4,9f78 <udivmodsi4+0x64>
    9f18:	28001716 	blt	r5,zero,9f78 <udivmodsi4+0x64>
    9f1c:	00800804 	movi	r2,32
    9f20:	00c00044 	movi	r3,1
    9f24:	00000206 	br	9f30 <udivmodsi4+0x1c>
    9f28:	10001126 	beq	r2,zero,9f70 <udivmodsi4+0x5c>
    9f2c:	28000516 	blt	r5,zero,9f44 <udivmodsi4+0x30>
    9f30:	294b883a 	add	r5,r5,r5
    9f34:	10bfffc4 	addi	r2,r2,-1
    9f38:	18c7883a 	add	r3,r3,r3
    9f3c:	293ffa36 	bltu	r5,r4,9f28 <__alt_mem_Flash_flash_data+0xf4009f28>
    9f40:	18000b26 	beq	r3,zero,9f70 <udivmodsi4+0x5c>
    9f44:	0005883a 	mov	r2,zero
    9f48:	21400236 	bltu	r4,r5,9f54 <udivmodsi4+0x40>
    9f4c:	2149c83a 	sub	r4,r4,r5
    9f50:	10c4b03a 	or	r2,r2,r3
    9f54:	1806d07a 	srli	r3,r3,1
    9f58:	280ad07a 	srli	r5,r5,1
    9f5c:	183ffa1e 	bne	r3,zero,9f48 <__alt_mem_Flash_flash_data+0xf4009f48>
    9f60:	3000011e 	bne	r6,zero,9f68 <udivmodsi4+0x54>
    9f64:	f800283a 	ret
    9f68:	2005883a 	mov	r2,r4
    9f6c:	f800283a 	ret
    9f70:	0005883a 	mov	r2,zero
    9f74:	003ffa06 	br	9f60 <__alt_mem_Flash_flash_data+0xf4009f60>
    9f78:	00c00044 	movi	r3,1
    9f7c:	003ff106 	br	9f44 <__alt_mem_Flash_flash_data+0xf4009f44>

00009f80 <__divsi3>:
    9f80:	defffe04 	addi	sp,sp,-8
    9f84:	dfc00115 	stw	ra,4(sp)
    9f88:	dc000015 	stw	r16,0(sp)
    9f8c:	20000b16 	blt	r4,zero,9fbc <__divsi3+0x3c>
    9f90:	0021883a 	mov	r16,zero
    9f94:	28000c16 	blt	r5,zero,9fc8 <__divsi3+0x48>
    9f98:	000d883a 	mov	r6,zero
    9f9c:	0009f140 	call	9f14 <udivmodsi4>
    9fa0:	0407c83a 	sub	r3,zero,r16
    9fa4:	1884f03a 	xor	r2,r3,r2
    9fa8:	1405883a 	add	r2,r2,r16
    9fac:	dfc00117 	ldw	ra,4(sp)
    9fb0:	dc000017 	ldw	r16,0(sp)
    9fb4:	dec00204 	addi	sp,sp,8
    9fb8:	f800283a 	ret
    9fbc:	0109c83a 	sub	r4,zero,r4
    9fc0:	04000044 	movi	r16,1
    9fc4:	283ff40e 	bge	r5,zero,9f98 <__alt_mem_Flash_flash_data+0xf4009f98>
    9fc8:	014bc83a 	sub	r5,zero,r5
    9fcc:	8400005c 	xori	r16,r16,1
    9fd0:	003ff106 	br	9f98 <__alt_mem_Flash_flash_data+0xf4009f98>

00009fd4 <__modsi3>:
    9fd4:	defffd04 	addi	sp,sp,-12
    9fd8:	dfc00215 	stw	ra,8(sp)
    9fdc:	dc400115 	stw	r17,4(sp)
    9fe0:	dc000015 	stw	r16,0(sp)
    9fe4:	20000c16 	blt	r4,zero,a018 <__modsi3+0x44>
    9fe8:	0023883a 	mov	r17,zero
    9fec:	0021883a 	mov	r16,zero
    9ff0:	28000d16 	blt	r5,zero,a028 <__modsi3+0x54>
    9ff4:	01800044 	movi	r6,1
    9ff8:	0009f140 	call	9f14 <udivmodsi4>
    9ffc:	1404f03a 	xor	r2,r2,r16
    a000:	8885883a 	add	r2,r17,r2
    a004:	dfc00217 	ldw	ra,8(sp)
    a008:	dc400117 	ldw	r17,4(sp)
    a00c:	dc000017 	ldw	r16,0(sp)
    a010:	dec00304 	addi	sp,sp,12
    a014:	f800283a 	ret
    a018:	0109c83a 	sub	r4,zero,r4
    a01c:	04400044 	movi	r17,1
    a020:	043fffc4 	movi	r16,-1
    a024:	283ff30e 	bge	r5,zero,9ff4 <__alt_mem_Flash_flash_data+0xf4009ff4>
    a028:	014bc83a 	sub	r5,zero,r5
    a02c:	003ff106 	br	9ff4 <__alt_mem_Flash_flash_data+0xf4009ff4>

0000a030 <__udivsi3>:
    a030:	000d883a 	mov	r6,zero
    a034:	0009f141 	jmpi	9f14 <udivmodsi4>

0000a038 <__umodsi3>:
    a038:	01800044 	movi	r6,1
    a03c:	0009f141 	jmpi	9f14 <udivmodsi4>

0000a040 <__adddf3>:
    a040:	02000434 	movhi	r8,16
    a044:	423fffc4 	addi	r8,r8,-1
    a048:	defffb04 	addi	sp,sp,-20
    a04c:	2a12703a 	and	r9,r5,r8
    a050:	2806d7fa 	srli	r3,r5,31
    a054:	3a10703a 	and	r8,r7,r8
    a058:	3804d53a 	srli	r2,r7,20
    a05c:	3014d77a 	srli	r10,r6,29
    a060:	dc000015 	stw	r16,0(sp)
    a064:	481290fa 	slli	r9,r9,3
    a068:	2820d53a 	srli	r16,r5,20
    a06c:	401090fa 	slli	r8,r8,3
    a070:	200ad77a 	srli	r5,r4,29
    a074:	380ed7fa 	srli	r7,r7,31
    a078:	dc800215 	stw	r18,8(sp)
    a07c:	dc400115 	stw	r17,4(sp)
    a080:	dfc00415 	stw	ra,16(sp)
    a084:	dcc00315 	stw	r19,12(sp)
    a088:	1c803fcc 	andi	r18,r3,255
    a08c:	8401ffcc 	andi	r16,r16,2047
    a090:	494ab03a 	or	r5,r9,r5
    a094:	202290fa 	slli	r17,r4,3
    a098:	1081ffcc 	andi	r2,r2,2047
    a09c:	4290b03a 	or	r8,r8,r10
    a0a0:	300c90fa 	slli	r6,r6,3
    a0a4:	91c07026 	beq	r18,r7,a268 <__adddf3+0x228>
    a0a8:	8087c83a 	sub	r3,r16,r2
    a0ac:	00c0b30e 	bge	zero,r3,a37c <__adddf3+0x33c>
    a0b0:	10002a1e 	bne	r2,zero,a15c <__adddf3+0x11c>
    a0b4:	4184b03a 	or	r2,r8,r6
    a0b8:	1000991e 	bne	r2,zero,a320 <__adddf3+0x2e0>
    a0bc:	888001cc 	andi	r2,r17,7
    a0c0:	10005b26 	beq	r2,zero,a230 <__adddf3+0x1f0>
    a0c4:	88c003cc 	andi	r3,r17,15
    a0c8:	00800104 	movi	r2,4
    a0cc:	18805826 	beq	r3,r2,a230 <__adddf3+0x1f0>
    a0d0:	89800104 	addi	r6,r17,4
    a0d4:	3463803a 	cmpltu	r17,r6,r17
    a0d8:	2c4b883a 	add	r5,r5,r17
    a0dc:	2880202c 	andhi	r2,r5,128
    a0e0:	9007883a 	mov	r3,r18
    a0e4:	3023883a 	mov	r17,r6
    a0e8:	10005426 	beq	r2,zero,a23c <__adddf3+0x1fc>
    a0ec:	84000044 	addi	r16,r16,1
    a0f0:	0081ffc4 	movi	r2,2047
    a0f4:	8080c126 	beq	r16,r2,a3fc <__adddf3+0x3bc>
    a0f8:	013fe034 	movhi	r4,65408
    a0fc:	213fffc4 	addi	r4,r4,-1
    a100:	290a703a 	and	r5,r5,r4
    a104:	2804977a 	slli	r2,r5,29
    a108:	280a927a 	slli	r5,r5,9
    a10c:	8822d0fa 	srli	r17,r17,3
    a110:	8401ffcc 	andi	r16,r16,2047
    a114:	2808d33a 	srli	r4,r5,12
    a118:	1444b03a 	or	r2,r2,r17
    a11c:	8401ffcc 	andi	r16,r16,2047
    a120:	800a953a 	slli	r5,r16,20
    a124:	18c03fcc 	andi	r3,r3,255
    a128:	04000434 	movhi	r16,16
    a12c:	180697fa 	slli	r3,r3,31
    a130:	843fffc4 	addi	r16,r16,-1
    a134:	2420703a 	and	r16,r4,r16
    a138:	8160b03a 	or	r16,r16,r5
    a13c:	80c6b03a 	or	r3,r16,r3
    a140:	dfc00417 	ldw	ra,16(sp)
    a144:	dcc00317 	ldw	r19,12(sp)
    a148:	dc800217 	ldw	r18,8(sp)
    a14c:	dc400117 	ldw	r17,4(sp)
    a150:	dc000017 	ldw	r16,0(sp)
    a154:	dec00504 	addi	sp,sp,20
    a158:	f800283a 	ret
    a15c:	0081ffc4 	movi	r2,2047
    a160:	80bfd626 	beq	r16,r2,a0bc <__alt_mem_Flash_flash_data+0xf400a0bc>
    a164:	42002034 	orhi	r8,r8,128
    a168:	00800e04 	movi	r2,56
    a16c:	10c0a616 	blt	r2,r3,a408 <__adddf3+0x3c8>
    a170:	008007c4 	movi	r2,31
    a174:	10c0c916 	blt	r2,r3,a49c <__adddf3+0x45c>
    a178:	00800804 	movi	r2,32
    a17c:	10c5c83a 	sub	r2,r2,r3
    a180:	408e983a 	sll	r7,r8,r2
    a184:	30c8d83a 	srl	r4,r6,r3
    a188:	3084983a 	sll	r2,r6,r2
    a18c:	40c6d83a 	srl	r3,r8,r3
    a190:	390cb03a 	or	r6,r7,r4
    a194:	1004c03a 	cmpne	r2,r2,zero
    a198:	308cb03a 	or	r6,r6,r2
    a19c:	898dc83a 	sub	r6,r17,r6
    a1a0:	89a3803a 	cmpltu	r17,r17,r6
    a1a4:	28cbc83a 	sub	r5,r5,r3
    a1a8:	2c4bc83a 	sub	r5,r5,r17
    a1ac:	3023883a 	mov	r17,r6
    a1b0:	2880202c 	andhi	r2,r5,128
    a1b4:	10006d26 	beq	r2,zero,a36c <__adddf3+0x32c>
    a1b8:	04c02034 	movhi	r19,128
    a1bc:	9cffffc4 	addi	r19,r19,-1
    a1c0:	2ce6703a 	and	r19,r5,r19
    a1c4:	98007e26 	beq	r19,zero,a3c0 <__adddf3+0x380>
    a1c8:	9809883a 	mov	r4,r19
    a1cc:	000c5dc0 	call	c5dc <__clzsi2>
    a1d0:	10fffe04 	addi	r3,r2,-8
    a1d4:	010007c4 	movi	r4,31
    a1d8:	20c07f16 	blt	r4,r3,a3d8 <__adddf3+0x398>
    a1dc:	01400a04 	movi	r5,40
    a1e0:	2885c83a 	sub	r2,r5,r2
    a1e4:	888ad83a 	srl	r5,r17,r2
    a1e8:	98e6983a 	sll	r19,r19,r3
    a1ec:	88e2983a 	sll	r17,r17,r3
    a1f0:	2ce6b03a 	or	r19,r5,r19
    a1f4:	1c007c16 	blt	r3,r16,a3e8 <__adddf3+0x3a8>
    a1f8:	1c21c83a 	sub	r16,r3,r16
    a1fc:	81400044 	addi	r5,r16,1
    a200:	00c007c4 	movi	r3,31
    a204:	19409816 	blt	r3,r5,a468 <__adddf3+0x428>
    a208:	1c21c83a 	sub	r16,r3,r16
    a20c:	8c08983a 	sll	r4,r17,r16
    a210:	8946d83a 	srl	r3,r17,r5
    a214:	9c20983a 	sll	r16,r19,r16
    a218:	2008c03a 	cmpne	r4,r4,zero
    a21c:	994ad83a 	srl	r5,r19,r5
    a220:	1c06b03a 	or	r3,r3,r16
    a224:	1922b03a 	or	r17,r3,r4
    a228:	0021883a 	mov	r16,zero
    a22c:	003fa306 	br	a0bc <__alt_mem_Flash_flash_data+0xf400a0bc>
    a230:	2880202c 	andhi	r2,r5,128
    a234:	9007883a 	mov	r3,r18
    a238:	103fac1e 	bne	r2,zero,a0ec <__alt_mem_Flash_flash_data+0xf400a0ec>
    a23c:	2804977a 	slli	r2,r5,29
    a240:	8822d0fa 	srli	r17,r17,3
    a244:	0101ffc4 	movi	r4,2047
    a248:	280ad0fa 	srli	r5,r5,3
    a24c:	1444b03a 	or	r2,r2,r17
    a250:	81002c26 	beq	r16,r4,a304 <__adddf3+0x2c4>
    a254:	8120703a 	and	r16,r16,r4
    a258:	01000434 	movhi	r4,16
    a25c:	213fffc4 	addi	r4,r4,-1
    a260:	2908703a 	and	r4,r5,r4
    a264:	003fad06 	br	a11c <__alt_mem_Flash_flash_data+0xf400a11c>
    a268:	8089c83a 	sub	r4,r16,r2
    a26c:	01006a0e 	bge	zero,r4,a418 <__adddf3+0x3d8>
    a270:	10003326 	beq	r2,zero,a340 <__adddf3+0x300>
    a274:	0081ffc4 	movi	r2,2047
    a278:	80bf9026 	beq	r16,r2,a0bc <__alt_mem_Flash_flash_data+0xf400a0bc>
    a27c:	42002034 	orhi	r8,r8,128
    a280:	00800e04 	movi	r2,56
    a284:	1100b116 	blt	r2,r4,a54c <__adddf3+0x50c>
    a288:	008007c4 	movi	r2,31
    a28c:	1100e216 	blt	r2,r4,a618 <__adddf3+0x5d8>
    a290:	00800804 	movi	r2,32
    a294:	1105c83a 	sub	r2,r2,r4
    a298:	4092983a 	sll	r9,r8,r2
    a29c:	310ed83a 	srl	r7,r6,r4
    a2a0:	3084983a 	sll	r2,r6,r2
    a2a4:	4110d83a 	srl	r8,r8,r4
    a2a8:	49ccb03a 	or	r6,r9,r7
    a2ac:	1004c03a 	cmpne	r2,r2,zero
    a2b0:	308cb03a 	or	r6,r6,r2
    a2b4:	344d883a 	add	r6,r6,r17
    a2b8:	3463803a 	cmpltu	r17,r6,r17
    a2bc:	414b883a 	add	r5,r8,r5
    a2c0:	2c4b883a 	add	r5,r5,r17
    a2c4:	3023883a 	mov	r17,r6
    a2c8:	2880202c 	andhi	r2,r5,128
    a2cc:	10002726 	beq	r2,zero,a36c <__adddf3+0x32c>
    a2d0:	84000044 	addi	r16,r16,1
    a2d4:	0081ffc4 	movi	r2,2047
    a2d8:	8080ae26 	beq	r16,r2,a594 <__adddf3+0x554>
    a2dc:	00bfe034 	movhi	r2,65408
    a2e0:	10bfffc4 	addi	r2,r2,-1
    a2e4:	288a703a 	and	r5,r5,r2
    a2e8:	880cd07a 	srli	r6,r17,1
    a2ec:	280897fa 	slli	r4,r5,31
    a2f0:	88c0004c 	andi	r3,r17,1
    a2f4:	30e2b03a 	or	r17,r6,r3
    a2f8:	280ad07a 	srli	r5,r5,1
    a2fc:	8922b03a 	or	r17,r17,r4
    a300:	003f6e06 	br	a0bc <__alt_mem_Flash_flash_data+0xf400a0bc>
    a304:	1148b03a 	or	r4,r2,r5
    a308:	20003c26 	beq	r4,zero,a3fc <__adddf3+0x3bc>
    a30c:	29000234 	orhi	r4,r5,8
    a310:	01400434 	movhi	r5,16
    a314:	297fffc4 	addi	r5,r5,-1
    a318:	2148703a 	and	r4,r4,r5
    a31c:	003f7f06 	br	a11c <__alt_mem_Flash_flash_data+0xf400a11c>
    a320:	18ffffc4 	addi	r3,r3,-1
    a324:	18004d1e 	bne	r3,zero,a45c <__adddf3+0x41c>
    a328:	898dc83a 	sub	r6,r17,r6
    a32c:	89a3803a 	cmpltu	r17,r17,r6
    a330:	2a0bc83a 	sub	r5,r5,r8
    a334:	2c4bc83a 	sub	r5,r5,r17
    a338:	3023883a 	mov	r17,r6
    a33c:	003f9c06 	br	a1b0 <__alt_mem_Flash_flash_data+0xf400a1b0>
    a340:	4184b03a 	or	r2,r8,r6
    a344:	103f5d26 	beq	r2,zero,a0bc <__alt_mem_Flash_flash_data+0xf400a0bc>
    a348:	213fffc4 	addi	r4,r4,-1
    a34c:	203fd926 	beq	r4,zero,a2b4 <__alt_mem_Flash_flash_data+0xf400a2b4>
    a350:	0081ffc4 	movi	r2,2047
    a354:	80bfca1e 	bne	r16,r2,a280 <__alt_mem_Flash_flash_data+0xf400a280>
    a358:	003f5806 	br	a0bc <__alt_mem_Flash_flash_data+0xf400a0bc>
    a35c:	10c8b03a 	or	r4,r2,r3
    a360:	20008b26 	beq	r4,zero,a590 <__adddf3+0x550>
    a364:	100b883a 	mov	r5,r2
    a368:	1823883a 	mov	r17,r3
    a36c:	888001cc 	andi	r2,r17,7
    a370:	103f541e 	bne	r2,zero,a0c4 <__alt_mem_Flash_flash_data+0xf400a0c4>
    a374:	9007883a 	mov	r3,r18
    a378:	003fb006 	br	a23c <__alt_mem_Flash_flash_data+0xf400a23c>
    a37c:	1800531e 	bne	r3,zero,a4cc <__adddf3+0x48c>
    a380:	80800044 	addi	r2,r16,1
    a384:	1081ffcc 	andi	r2,r2,2047
    a388:	00c00044 	movi	r3,1
    a38c:	1880990e 	bge	r3,r2,a5f4 <__adddf3+0x5b4>
    a390:	8985c83a 	sub	r2,r17,r6
    a394:	8887803a 	cmpltu	r3,r17,r2
    a398:	2a27c83a 	sub	r19,r5,r8
    a39c:	98e7c83a 	sub	r19,r19,r3
    a3a0:	98c0202c 	andhi	r3,r19,128
    a3a4:	18006226 	beq	r3,zero,a530 <__adddf3+0x4f0>
    a3a8:	3463c83a 	sub	r17,r6,r17
    a3ac:	4151c83a 	sub	r8,r8,r5
    a3b0:	344d803a 	cmpltu	r6,r6,r17
    a3b4:	41a7c83a 	sub	r19,r8,r6
    a3b8:	3825883a 	mov	r18,r7
    a3bc:	983f821e 	bne	r19,zero,a1c8 <__alt_mem_Flash_flash_data+0xf400a1c8>
    a3c0:	8809883a 	mov	r4,r17
    a3c4:	000c5dc0 	call	c5dc <__clzsi2>
    a3c8:	10800804 	addi	r2,r2,32
    a3cc:	10fffe04 	addi	r3,r2,-8
    a3d0:	010007c4 	movi	r4,31
    a3d4:	20ff810e 	bge	r4,r3,a1dc <__alt_mem_Flash_flash_data+0xf400a1dc>
    a3d8:	14fff604 	addi	r19,r2,-40
    a3dc:	8ce6983a 	sll	r19,r17,r19
    a3e0:	0023883a 	mov	r17,zero
    a3e4:	1c3f840e 	bge	r3,r16,a1f8 <__alt_mem_Flash_flash_data+0xf400a1f8>
    a3e8:	017fe034 	movhi	r5,65408
    a3ec:	297fffc4 	addi	r5,r5,-1
    a3f0:	80e1c83a 	sub	r16,r16,r3
    a3f4:	994a703a 	and	r5,r19,r5
    a3f8:	003f3006 	br	a0bc <__alt_mem_Flash_flash_data+0xf400a0bc>
    a3fc:	0009883a 	mov	r4,zero
    a400:	0005883a 	mov	r2,zero
    a404:	003f4506 	br	a11c <__alt_mem_Flash_flash_data+0xf400a11c>
    a408:	418cb03a 	or	r6,r8,r6
    a40c:	300cc03a 	cmpne	r6,r6,zero
    a410:	0007883a 	mov	r3,zero
    a414:	003f6106 	br	a19c <__alt_mem_Flash_flash_data+0xf400a19c>
    a418:	2000921e 	bne	r4,zero,a664 <__adddf3+0x624>
    a41c:	80800044 	addi	r2,r16,1
    a420:	11c1ffcc 	andi	r7,r2,2047
    a424:	01000044 	movi	r4,1
    a428:	21c0610e 	bge	r4,r7,a5b0 <__adddf3+0x570>
    a42c:	0101ffc4 	movi	r4,2047
    a430:	1100a326 	beq	r2,r4,a6c0 <__adddf3+0x680>
    a434:	344d883a 	add	r6,r6,r17
    a438:	3463803a 	cmpltu	r17,r6,r17
    a43c:	414b883a 	add	r5,r8,r5
    a440:	2c4b883a 	add	r5,r5,r17
    a444:	282297fa 	slli	r17,r5,31
    a448:	300cd07a 	srli	r6,r6,1
    a44c:	280ad07a 	srli	r5,r5,1
    a450:	1021883a 	mov	r16,r2
    a454:	89a2b03a 	or	r17,r17,r6
    a458:	003f1806 	br	a0bc <__alt_mem_Flash_flash_data+0xf400a0bc>
    a45c:	0081ffc4 	movi	r2,2047
    a460:	80bf411e 	bne	r16,r2,a168 <__alt_mem_Flash_flash_data+0xf400a168>
    a464:	003f1506 	br	a0bc <__alt_mem_Flash_flash_data+0xf400a0bc>
    a468:	80bff844 	addi	r2,r16,-31
    a46c:	00c00804 	movi	r3,32
    a470:	9884d83a 	srl	r2,r19,r2
    a474:	28c04a26 	beq	r5,r3,a5a0 <__adddf3+0x560>
    a478:	00c00fc4 	movi	r3,63
    a47c:	1c21c83a 	sub	r16,r3,r16
    a480:	9c26983a 	sll	r19,r19,r16
    a484:	9c62b03a 	or	r17,r19,r17
    a488:	8822c03a 	cmpne	r17,r17,zero
    a48c:	88a2b03a 	or	r17,r17,r2
    a490:	000b883a 	mov	r5,zero
    a494:	0021883a 	mov	r16,zero
    a498:	003fb406 	br	a36c <__alt_mem_Flash_flash_data+0xf400a36c>
    a49c:	18bff804 	addi	r2,r3,-32
    a4a0:	01000804 	movi	r4,32
    a4a4:	4084d83a 	srl	r2,r8,r2
    a4a8:	19003f26 	beq	r3,r4,a5a8 <__adddf3+0x568>
    a4ac:	01001004 	movi	r4,64
    a4b0:	20c7c83a 	sub	r3,r4,r3
    a4b4:	40d0983a 	sll	r8,r8,r3
    a4b8:	418cb03a 	or	r6,r8,r6
    a4bc:	300cc03a 	cmpne	r6,r6,zero
    a4c0:	308cb03a 	or	r6,r6,r2
    a4c4:	0007883a 	mov	r3,zero
    a4c8:	003f3406 	br	a19c <__alt_mem_Flash_flash_data+0xf400a19c>
    a4cc:	80002326 	beq	r16,zero,a55c <__adddf3+0x51c>
    a4d0:	0101ffc4 	movi	r4,2047
    a4d4:	11005e26 	beq	r2,r4,a650 <__adddf3+0x610>
    a4d8:	00c7c83a 	sub	r3,zero,r3
    a4dc:	29402034 	orhi	r5,r5,128
    a4e0:	01000e04 	movi	r4,56
    a4e4:	20c07216 	blt	r4,r3,a6b0 <__adddf3+0x670>
    a4e8:	010007c4 	movi	r4,31
    a4ec:	20c0ce16 	blt	r4,r3,a828 <__adddf3+0x7e8>
    a4f0:	01000804 	movi	r4,32
    a4f4:	20c9c83a 	sub	r4,r4,r3
    a4f8:	2914983a 	sll	r10,r5,r4
    a4fc:	88d2d83a 	srl	r9,r17,r3
    a500:	8908983a 	sll	r4,r17,r4
    a504:	28c6d83a 	srl	r3,r5,r3
    a508:	5262b03a 	or	r17,r10,r9
    a50c:	2008c03a 	cmpne	r4,r4,zero
    a510:	8922b03a 	or	r17,r17,r4
    a514:	3463c83a 	sub	r17,r6,r17
    a518:	40c7c83a 	sub	r3,r8,r3
    a51c:	344d803a 	cmpltu	r6,r6,r17
    a520:	198bc83a 	sub	r5,r3,r6
    a524:	1021883a 	mov	r16,r2
    a528:	3825883a 	mov	r18,r7
    a52c:	003f2006 	br	a1b0 <__alt_mem_Flash_flash_data+0xf400a1b0>
    a530:	9886b03a 	or	r3,r19,r2
    a534:	1800141e 	bne	r3,zero,a588 <__adddf3+0x548>
    a538:	0007883a 	mov	r3,zero
    a53c:	000b883a 	mov	r5,zero
    a540:	0023883a 	mov	r17,zero
    a544:	0021883a 	mov	r16,zero
    a548:	003f3c06 	br	a23c <__alt_mem_Flash_flash_data+0xf400a23c>
    a54c:	418cb03a 	or	r6,r8,r6
    a550:	300cc03a 	cmpne	r6,r6,zero
    a554:	0011883a 	mov	r8,zero
    a558:	003f5606 	br	a2b4 <__alt_mem_Flash_flash_data+0xf400a2b4>
    a55c:	2c48b03a 	or	r4,r5,r17
    a560:	20003b26 	beq	r4,zero,a650 <__adddf3+0x610>
    a564:	00c6303a 	nor	r3,zero,r3
    a568:	1800371e 	bne	r3,zero,a648 <__adddf3+0x608>
    a56c:	3463c83a 	sub	r17,r6,r17
    a570:	414bc83a 	sub	r5,r8,r5
    a574:	344d803a 	cmpltu	r6,r6,r17
    a578:	298bc83a 	sub	r5,r5,r6
    a57c:	1021883a 	mov	r16,r2
    a580:	3825883a 	mov	r18,r7
    a584:	003f0a06 	br	a1b0 <__alt_mem_Flash_flash_data+0xf400a1b0>
    a588:	1023883a 	mov	r17,r2
    a58c:	003f0d06 	br	a1c4 <__alt_mem_Flash_flash_data+0xf400a1c4>
    a590:	0007883a 	mov	r3,zero
    a594:	000b883a 	mov	r5,zero
    a598:	0023883a 	mov	r17,zero
    a59c:	003f2706 	br	a23c <__alt_mem_Flash_flash_data+0xf400a23c>
    a5a0:	0027883a 	mov	r19,zero
    a5a4:	003fb706 	br	a484 <__alt_mem_Flash_flash_data+0xf400a484>
    a5a8:	0011883a 	mov	r8,zero
    a5ac:	003fc206 	br	a4b8 <__alt_mem_Flash_flash_data+0xf400a4b8>
    a5b0:	2c44b03a 	or	r2,r5,r17
    a5b4:	8000871e 	bne	r16,zero,a7d4 <__adddf3+0x794>
    a5b8:	1000b126 	beq	r2,zero,a880 <__adddf3+0x840>
    a5bc:	4184b03a 	or	r2,r8,r6
    a5c0:	103ebe26 	beq	r2,zero,a0bc <__alt_mem_Flash_flash_data+0xf400a0bc>
    a5c4:	3445883a 	add	r2,r6,r17
    a5c8:	1463803a 	cmpltu	r17,r2,r17
    a5cc:	414b883a 	add	r5,r8,r5
    a5d0:	2c4b883a 	add	r5,r5,r17
    a5d4:	28c0202c 	andhi	r3,r5,128
    a5d8:	1023883a 	mov	r17,r2
    a5dc:	183f6326 	beq	r3,zero,a36c <__alt_mem_Flash_flash_data+0xf400a36c>
    a5e0:	00bfe034 	movhi	r2,65408
    a5e4:	10bfffc4 	addi	r2,r2,-1
    a5e8:	2021883a 	mov	r16,r4
    a5ec:	288a703a 	and	r5,r5,r2
    a5f0:	003eb206 	br	a0bc <__alt_mem_Flash_flash_data+0xf400a0bc>
    a5f4:	2c44b03a 	or	r2,r5,r17
    a5f8:	8000251e 	bne	r16,zero,a690 <__adddf3+0x650>
    a5fc:	10004b1e 	bne	r2,zero,a72c <__adddf3+0x6ec>
    a600:	4184b03a 	or	r2,r8,r6
    a604:	103fe226 	beq	r2,zero,a590 <__alt_mem_Flash_flash_data+0xf400a590>
    a608:	400b883a 	mov	r5,r8
    a60c:	3023883a 	mov	r17,r6
    a610:	3825883a 	mov	r18,r7
    a614:	003ea906 	br	a0bc <__alt_mem_Flash_flash_data+0xf400a0bc>
    a618:	20bff804 	addi	r2,r4,-32
    a61c:	01c00804 	movi	r7,32
    a620:	4084d83a 	srl	r2,r8,r2
    a624:	21c07e26 	beq	r4,r7,a820 <__adddf3+0x7e0>
    a628:	01c01004 	movi	r7,64
    a62c:	3909c83a 	sub	r4,r7,r4
    a630:	4110983a 	sll	r8,r8,r4
    a634:	418cb03a 	or	r6,r8,r6
    a638:	300cc03a 	cmpne	r6,r6,zero
    a63c:	308cb03a 	or	r6,r6,r2
    a640:	0011883a 	mov	r8,zero
    a644:	003f1b06 	br	a2b4 <__alt_mem_Flash_flash_data+0xf400a2b4>
    a648:	0101ffc4 	movi	r4,2047
    a64c:	113fa41e 	bne	r2,r4,a4e0 <__alt_mem_Flash_flash_data+0xf400a4e0>
    a650:	400b883a 	mov	r5,r8
    a654:	3023883a 	mov	r17,r6
    a658:	1021883a 	mov	r16,r2
    a65c:	3825883a 	mov	r18,r7
    a660:	003e9606 	br	a0bc <__alt_mem_Flash_flash_data+0xf400a0bc>
    a664:	80001a1e 	bne	r16,zero,a6d0 <__adddf3+0x690>
    a668:	2c4eb03a 	or	r7,r5,r17
    a66c:	38005526 	beq	r7,zero,a7c4 <__adddf3+0x784>
    a670:	0108303a 	nor	r4,zero,r4
    a674:	2000511e 	bne	r4,zero,a7bc <__adddf3+0x77c>
    a678:	89a3883a 	add	r17,r17,r6
    a67c:	414b883a 	add	r5,r8,r5
    a680:	898d803a 	cmpltu	r6,r17,r6
    a684:	298b883a 	add	r5,r5,r6
    a688:	1021883a 	mov	r16,r2
    a68c:	003f0e06 	br	a2c8 <__alt_mem_Flash_flash_data+0xf400a2c8>
    a690:	1000341e 	bne	r2,zero,a764 <__adddf3+0x724>
    a694:	4184b03a 	or	r2,r8,r6
    a698:	10006f26 	beq	r2,zero,a858 <__adddf3+0x818>
    a69c:	400b883a 	mov	r5,r8
    a6a0:	3023883a 	mov	r17,r6
    a6a4:	3825883a 	mov	r18,r7
    a6a8:	0401ffc4 	movi	r16,2047
    a6ac:	003e8306 	br	a0bc <__alt_mem_Flash_flash_data+0xf400a0bc>
    a6b0:	2c62b03a 	or	r17,r5,r17
    a6b4:	8822c03a 	cmpne	r17,r17,zero
    a6b8:	0007883a 	mov	r3,zero
    a6bc:	003f9506 	br	a514 <__alt_mem_Flash_flash_data+0xf400a514>
    a6c0:	1021883a 	mov	r16,r2
    a6c4:	000b883a 	mov	r5,zero
    a6c8:	0023883a 	mov	r17,zero
    a6cc:	003edb06 	br	a23c <__alt_mem_Flash_flash_data+0xf400a23c>
    a6d0:	01c1ffc4 	movi	r7,2047
    a6d4:	11c03b26 	beq	r2,r7,a7c4 <__adddf3+0x784>
    a6d8:	0109c83a 	sub	r4,zero,r4
    a6dc:	29402034 	orhi	r5,r5,128
    a6e0:	01c00e04 	movi	r7,56
    a6e4:	39006216 	blt	r7,r4,a870 <__adddf3+0x830>
    a6e8:	01c007c4 	movi	r7,31
    a6ec:	39006b16 	blt	r7,r4,a89c <__adddf3+0x85c>
    a6f0:	01c00804 	movi	r7,32
    a6f4:	390fc83a 	sub	r7,r7,r4
    a6f8:	29d4983a 	sll	r10,r5,r7
    a6fc:	8912d83a 	srl	r9,r17,r4
    a700:	89ce983a 	sll	r7,r17,r7
    a704:	2908d83a 	srl	r4,r5,r4
    a708:	5262b03a 	or	r17,r10,r9
    a70c:	380ac03a 	cmpne	r5,r7,zero
    a710:	8962b03a 	or	r17,r17,r5
    a714:	89a3883a 	add	r17,r17,r6
    a718:	2211883a 	add	r8,r4,r8
    a71c:	898d803a 	cmpltu	r6,r17,r6
    a720:	418b883a 	add	r5,r8,r6
    a724:	1021883a 	mov	r16,r2
    a728:	003ee706 	br	a2c8 <__alt_mem_Flash_flash_data+0xf400a2c8>
    a72c:	4184b03a 	or	r2,r8,r6
    a730:	103e6226 	beq	r2,zero,a0bc <__alt_mem_Flash_flash_data+0xf400a0bc>
    a734:	8987c83a 	sub	r3,r17,r6
    a738:	88c9803a 	cmpltu	r4,r17,r3
    a73c:	2a05c83a 	sub	r2,r5,r8
    a740:	1105c83a 	sub	r2,r2,r4
    a744:	1100202c 	andhi	r4,r2,128
    a748:	203f0426 	beq	r4,zero,a35c <__alt_mem_Flash_flash_data+0xf400a35c>
    a74c:	3463c83a 	sub	r17,r6,r17
    a750:	414bc83a 	sub	r5,r8,r5
    a754:	344d803a 	cmpltu	r6,r6,r17
    a758:	298bc83a 	sub	r5,r5,r6
    a75c:	3825883a 	mov	r18,r7
    a760:	003e5606 	br	a0bc <__alt_mem_Flash_flash_data+0xf400a0bc>
    a764:	4184b03a 	or	r2,r8,r6
    a768:	10002b26 	beq	r2,zero,a818 <__adddf3+0x7d8>
    a76c:	2804d0fa 	srli	r2,r5,3
    a770:	8822d0fa 	srli	r17,r17,3
    a774:	280a977a 	slli	r5,r5,29
    a778:	10c0022c 	andhi	r3,r2,8
    a77c:	2c62b03a 	or	r17,r5,r17
    a780:	18000826 	beq	r3,zero,a7a4 <__adddf3+0x764>
    a784:	4008d0fa 	srli	r4,r8,3
    a788:	20c0022c 	andhi	r3,r4,8
    a78c:	1800051e 	bne	r3,zero,a7a4 <__adddf3+0x764>
    a790:	300cd0fa 	srli	r6,r6,3
    a794:	4010977a 	slli	r8,r8,29
    a798:	2005883a 	mov	r2,r4
    a79c:	3825883a 	mov	r18,r7
    a7a0:	41a2b03a 	or	r17,r8,r6
    a7a4:	880ad77a 	srli	r5,r17,29
    a7a8:	100490fa 	slli	r2,r2,3
    a7ac:	882290fa 	slli	r17,r17,3
    a7b0:	0401ffc4 	movi	r16,2047
    a7b4:	288ab03a 	or	r5,r5,r2
    a7b8:	003e4006 	br	a0bc <__alt_mem_Flash_flash_data+0xf400a0bc>
    a7bc:	01c1ffc4 	movi	r7,2047
    a7c0:	11ffc71e 	bne	r2,r7,a6e0 <__alt_mem_Flash_flash_data+0xf400a6e0>
    a7c4:	400b883a 	mov	r5,r8
    a7c8:	3023883a 	mov	r17,r6
    a7cc:	1021883a 	mov	r16,r2
    a7d0:	003e3a06 	br	a0bc <__alt_mem_Flash_flash_data+0xf400a0bc>
    a7d4:	10002d26 	beq	r2,zero,a88c <__adddf3+0x84c>
    a7d8:	4184b03a 	or	r2,r8,r6
    a7dc:	10000e26 	beq	r2,zero,a818 <__adddf3+0x7d8>
    a7e0:	2804d0fa 	srli	r2,r5,3
    a7e4:	8822d0fa 	srli	r17,r17,3
    a7e8:	280a977a 	slli	r5,r5,29
    a7ec:	10c0022c 	andhi	r3,r2,8
    a7f0:	2c62b03a 	or	r17,r5,r17
    a7f4:	183feb26 	beq	r3,zero,a7a4 <__alt_mem_Flash_flash_data+0xf400a7a4>
    a7f8:	4008d0fa 	srli	r4,r8,3
    a7fc:	20c0022c 	andhi	r3,r4,8
    a800:	183fe81e 	bne	r3,zero,a7a4 <__alt_mem_Flash_flash_data+0xf400a7a4>
    a804:	300cd0fa 	srli	r6,r6,3
    a808:	4010977a 	slli	r8,r8,29
    a80c:	2005883a 	mov	r2,r4
    a810:	41a2b03a 	or	r17,r8,r6
    a814:	003fe306 	br	a7a4 <__alt_mem_Flash_flash_data+0xf400a7a4>
    a818:	0401ffc4 	movi	r16,2047
    a81c:	003e2706 	br	a0bc <__alt_mem_Flash_flash_data+0xf400a0bc>
    a820:	0011883a 	mov	r8,zero
    a824:	003f8306 	br	a634 <__alt_mem_Flash_flash_data+0xf400a634>
    a828:	193ff804 	addi	r4,r3,-32
    a82c:	02400804 	movi	r9,32
    a830:	2908d83a 	srl	r4,r5,r4
    a834:	1a402526 	beq	r3,r9,a8cc <__adddf3+0x88c>
    a838:	02401004 	movi	r9,64
    a83c:	48c7c83a 	sub	r3,r9,r3
    a840:	28ca983a 	sll	r5,r5,r3
    a844:	2c62b03a 	or	r17,r5,r17
    a848:	8822c03a 	cmpne	r17,r17,zero
    a84c:	8922b03a 	or	r17,r17,r4
    a850:	0007883a 	mov	r3,zero
    a854:	003f2f06 	br	a514 <__alt_mem_Flash_flash_data+0xf400a514>
    a858:	01402034 	movhi	r5,128
    a85c:	0007883a 	mov	r3,zero
    a860:	297fffc4 	addi	r5,r5,-1
    a864:	047ffe04 	movi	r17,-8
    a868:	0401ffc4 	movi	r16,2047
    a86c:	003e7306 	br	a23c <__alt_mem_Flash_flash_data+0xf400a23c>
    a870:	2c62b03a 	or	r17,r5,r17
    a874:	8822c03a 	cmpne	r17,r17,zero
    a878:	0009883a 	mov	r4,zero
    a87c:	003fa506 	br	a714 <__alt_mem_Flash_flash_data+0xf400a714>
    a880:	400b883a 	mov	r5,r8
    a884:	3023883a 	mov	r17,r6
    a888:	003e0c06 	br	a0bc <__alt_mem_Flash_flash_data+0xf400a0bc>
    a88c:	400b883a 	mov	r5,r8
    a890:	3023883a 	mov	r17,r6
    a894:	0401ffc4 	movi	r16,2047
    a898:	003e0806 	br	a0bc <__alt_mem_Flash_flash_data+0xf400a0bc>
    a89c:	21fff804 	addi	r7,r4,-32
    a8a0:	02400804 	movi	r9,32
    a8a4:	29ced83a 	srl	r7,r5,r7
    a8a8:	22400a26 	beq	r4,r9,a8d4 <__adddf3+0x894>
    a8ac:	02401004 	movi	r9,64
    a8b0:	4909c83a 	sub	r4,r9,r4
    a8b4:	290a983a 	sll	r5,r5,r4
    a8b8:	2c62b03a 	or	r17,r5,r17
    a8bc:	8822c03a 	cmpne	r17,r17,zero
    a8c0:	89e2b03a 	or	r17,r17,r7
    a8c4:	0009883a 	mov	r4,zero
    a8c8:	003f9206 	br	a714 <__alt_mem_Flash_flash_data+0xf400a714>
    a8cc:	000b883a 	mov	r5,zero
    a8d0:	003fdc06 	br	a844 <__alt_mem_Flash_flash_data+0xf400a844>
    a8d4:	000b883a 	mov	r5,zero
    a8d8:	003ff706 	br	a8b8 <__alt_mem_Flash_flash_data+0xf400a8b8>

0000a8dc <__divdf3>:
    a8dc:	defff204 	addi	sp,sp,-56
    a8e0:	dd000815 	stw	r20,32(sp)
    a8e4:	2828d53a 	srli	r20,r5,20
    a8e8:	dd800a15 	stw	r22,40(sp)
    a8ec:	282cd7fa 	srli	r22,r5,31
    a8f0:	dc000415 	stw	r16,16(sp)
    a8f4:	04000434 	movhi	r16,16
    a8f8:	df000c15 	stw	fp,48(sp)
    a8fc:	dcc00715 	stw	r19,28(sp)
    a900:	dc800615 	stw	r18,24(sp)
    a904:	dc400515 	stw	r17,20(sp)
    a908:	843fffc4 	addi	r16,r16,-1
    a90c:	dfc00d15 	stw	ra,52(sp)
    a910:	ddc00b15 	stw	r23,44(sp)
    a914:	dd400915 	stw	r21,36(sp)
    a918:	a501ffcc 	andi	r20,r20,2047
    a91c:	2025883a 	mov	r18,r4
    a920:	2027883a 	mov	r19,r4
    a924:	2c22703a 	and	r17,r5,r16
    a928:	b7003fcc 	andi	fp,r22,255
    a92c:	a0005e26 	beq	r20,zero,aaa8 <__divdf3+0x1cc>
    a930:	0081ffc4 	movi	r2,2047
    a934:	a0803526 	beq	r20,r2,aa0c <__divdf3+0x130>
    a938:	8c000434 	orhi	r16,r17,16
    a93c:	2004d77a 	srli	r2,r4,29
    a940:	802090fa 	slli	r16,r16,3
    a944:	202690fa 	slli	r19,r4,3
    a948:	a53f0044 	addi	r20,r20,-1023
    a94c:	80a2b03a 	or	r17,r16,r2
    a950:	0025883a 	mov	r18,zero
    a954:	0011883a 	mov	r8,zero
    a958:	380ad53a 	srli	r5,r7,20
    a95c:	382ed7fa 	srli	r23,r7,31
    a960:	04000434 	movhi	r16,16
    a964:	843fffc4 	addi	r16,r16,-1
    a968:	2941ffcc 	andi	r5,r5,2047
    a96c:	302b883a 	mov	r21,r6
    a970:	3c20703a 	and	r16,r7,r16
    a974:	ba403fcc 	andi	r9,r23,255
    a978:	28006726 	beq	r5,zero,ab18 <__divdf3+0x23c>
    a97c:	0081ffc4 	movi	r2,2047
    a980:	28805f26 	beq	r5,r2,ab00 <__divdf3+0x224>
    a984:	84000434 	orhi	r16,r16,16
    a988:	3004d77a 	srli	r2,r6,29
    a98c:	802090fa 	slli	r16,r16,3
    a990:	302a90fa 	slli	r21,r6,3
    a994:	297f0044 	addi	r5,r5,-1023
    a998:	80a0b03a 	or	r16,r16,r2
    a99c:	000f883a 	mov	r7,zero
    a9a0:	3c86b03a 	or	r3,r7,r18
    a9a4:	180690ba 	slli	r3,r3,2
    a9a8:	00800074 	movhi	r2,1
    a9ac:	10aa7304 	addi	r2,r2,-22068
    a9b0:	1887883a 	add	r3,r3,r2
    a9b4:	18c00017 	ldw	r3,0(r3)
    a9b8:	b5c8f03a 	xor	r4,r22,r23
    a9bc:	200d883a 	mov	r6,r4
    a9c0:	24803fcc 	andi	r18,r4,255
    a9c4:	a169c83a 	sub	r20,r20,r5
    a9c8:	1800683a 	jmp	r3
    a9cc:	0000ac14 	movui	zero,688
    a9d0:	0000aa44 	movi	zero,681
    a9d4:	0000abd8 	cmpnei	zero,zero,687
    a9d8:	0000aa28 	cmpgeui	zero,zero,680
    a9dc:	0000abd8 	cmpnei	zero,zero,687
    a9e0:	0000abac 	andhi	zero,zero,686
    a9e4:	0000abd8 	cmpnei	zero,zero,687
    a9e8:	0000aa28 	cmpgeui	zero,zero,680
    a9ec:	0000aa44 	movi	zero,681
    a9f0:	0000aa44 	movi	zero,681
    a9f4:	0000abac 	andhi	zero,zero,686
    a9f8:	0000aa28 	cmpgeui	zero,zero,680
    a9fc:	0000aa38 	rdprs	zero,zero,680
    aa00:	0000aa38 	rdprs	zero,zero,680
    aa04:	0000aa38 	rdprs	zero,zero,680
    aa08:	0000abe8 	cmpgeui	zero,zero,687
    aa0c:	8904b03a 	or	r2,r17,r4
    aa10:	1000631e 	bne	r2,zero,aba0 <__divdf3+0x2c4>
    aa14:	04800204 	movi	r18,8
    aa18:	0023883a 	mov	r17,zero
    aa1c:	0027883a 	mov	r19,zero
    aa20:	02000084 	movi	r8,2
    aa24:	003fcc06 	br	a958 <__alt_mem_Flash_flash_data+0xf400a958>
    aa28:	8023883a 	mov	r17,r16
    aa2c:	a827883a 	mov	r19,r21
    aa30:	4839883a 	mov	fp,r9
    aa34:	3811883a 	mov	r8,r7
    aa38:	00800084 	movi	r2,2
    aa3c:	40812a1e 	bne	r8,r2,aee8 <__divdf3+0x60c>
    aa40:	e025883a 	mov	r18,fp
    aa44:	9180004c 	andi	r6,r18,1
    aa48:	0101ffc4 	movi	r4,2047
    aa4c:	000b883a 	mov	r5,zero
    aa50:	0027883a 	mov	r19,zero
    aa54:	2008953a 	slli	r4,r4,20
    aa58:	30c03fcc 	andi	r3,r6,255
    aa5c:	04000434 	movhi	r16,16
    aa60:	180697fa 	slli	r3,r3,31
    aa64:	843fffc4 	addi	r16,r16,-1
    aa68:	2c20703a 	and	r16,r5,r16
    aa6c:	8120b03a 	or	r16,r16,r4
    aa70:	80c6b03a 	or	r3,r16,r3
    aa74:	9805883a 	mov	r2,r19
    aa78:	dfc00d17 	ldw	ra,52(sp)
    aa7c:	df000c17 	ldw	fp,48(sp)
    aa80:	ddc00b17 	ldw	r23,44(sp)
    aa84:	dd800a17 	ldw	r22,40(sp)
    aa88:	dd400917 	ldw	r21,36(sp)
    aa8c:	dd000817 	ldw	r20,32(sp)
    aa90:	dcc00717 	ldw	r19,28(sp)
    aa94:	dc800617 	ldw	r18,24(sp)
    aa98:	dc400517 	ldw	r17,20(sp)
    aa9c:	dc000417 	ldw	r16,16(sp)
    aaa0:	dec00e04 	addi	sp,sp,56
    aaa4:	f800283a 	ret
    aaa8:	8904b03a 	or	r2,r17,r4
    aaac:	10003726 	beq	r2,zero,ab8c <__divdf3+0x2b0>
    aab0:	88011c26 	beq	r17,zero,af24 <__divdf3+0x648>
    aab4:	8809883a 	mov	r4,r17
    aab8:	d9800315 	stw	r6,12(sp)
    aabc:	d9c00115 	stw	r7,4(sp)
    aac0:	000c5dc0 	call	c5dc <__clzsi2>
    aac4:	d9800317 	ldw	r6,12(sp)
    aac8:	d9c00117 	ldw	r7,4(sp)
    aacc:	1007883a 	mov	r3,r2
    aad0:	01000a04 	movi	r4,40
    aad4:	1cfffe04 	addi	r19,r3,-8
    aad8:	20c9c83a 	sub	r4,r4,r3
    aadc:	8cca983a 	sll	r5,r17,r19
    aae0:	9108d83a 	srl	r4,r18,r4
    aae4:	94e6983a 	sll	r19,r18,r19
    aae8:	2162b03a 	or	r17,r4,r5
    aaec:	053f0344 	movi	r20,-1011
    aaf0:	a0e9c83a 	sub	r20,r20,r3
    aaf4:	0025883a 	mov	r18,zero
    aaf8:	0011883a 	mov	r8,zero
    aafc:	003f9606 	br	a958 <__alt_mem_Flash_flash_data+0xf400a958>
    ab00:	8184b03a 	or	r2,r16,r6
    ab04:	10001f1e 	bne	r2,zero,ab84 <__divdf3+0x2a8>
    ab08:	0021883a 	mov	r16,zero
    ab0c:	002b883a 	mov	r21,zero
    ab10:	01c00084 	movi	r7,2
    ab14:	003fa206 	br	a9a0 <__alt_mem_Flash_flash_data+0xf400a9a0>
    ab18:	8184b03a 	or	r2,r16,r6
    ab1c:	10001526 	beq	r2,zero,ab74 <__divdf3+0x298>
    ab20:	80010c26 	beq	r16,zero,af54 <__divdf3+0x678>
    ab24:	8009883a 	mov	r4,r16
    ab28:	d9800315 	stw	r6,12(sp)
    ab2c:	da000215 	stw	r8,8(sp)
    ab30:	da400015 	stw	r9,0(sp)
    ab34:	000c5dc0 	call	c5dc <__clzsi2>
    ab38:	d9800317 	ldw	r6,12(sp)
    ab3c:	da000217 	ldw	r8,8(sp)
    ab40:	da400017 	ldw	r9,0(sp)
    ab44:	1007883a 	mov	r3,r2
    ab48:	01000a04 	movi	r4,40
    ab4c:	1d7ffe04 	addi	r21,r3,-8
    ab50:	20c9c83a 	sub	r4,r4,r3
    ab54:	8560983a 	sll	r16,r16,r21
    ab58:	3108d83a 	srl	r4,r6,r4
    ab5c:	356a983a 	sll	r21,r6,r21
    ab60:	2420b03a 	or	r16,r4,r16
    ab64:	017f0344 	movi	r5,-1011
    ab68:	28cbc83a 	sub	r5,r5,r3
    ab6c:	000f883a 	mov	r7,zero
    ab70:	003f8b06 	br	a9a0 <__alt_mem_Flash_flash_data+0xf400a9a0>
    ab74:	0021883a 	mov	r16,zero
    ab78:	002b883a 	mov	r21,zero
    ab7c:	01c00044 	movi	r7,1
    ab80:	003f8706 	br	a9a0 <__alt_mem_Flash_flash_data+0xf400a9a0>
    ab84:	01c000c4 	movi	r7,3
    ab88:	003f8506 	br	a9a0 <__alt_mem_Flash_flash_data+0xf400a9a0>
    ab8c:	04800104 	movi	r18,4
    ab90:	0023883a 	mov	r17,zero
    ab94:	0027883a 	mov	r19,zero
    ab98:	02000044 	movi	r8,1
    ab9c:	003f6e06 	br	a958 <__alt_mem_Flash_flash_data+0xf400a958>
    aba0:	04800304 	movi	r18,12
    aba4:	020000c4 	movi	r8,3
    aba8:	003f6b06 	br	a958 <__alt_mem_Flash_flash_data+0xf400a958>
    abac:	01400434 	movhi	r5,16
    abb0:	000d883a 	mov	r6,zero
    abb4:	297fffc4 	addi	r5,r5,-1
    abb8:	04ffffc4 	movi	r19,-1
    abbc:	0101ffc4 	movi	r4,2047
    abc0:	003fa406 	br	aa54 <__alt_mem_Flash_flash_data+0xf400aa54>
    abc4:	043f0084 	movi	r16,-1022
    abc8:	8521c83a 	sub	r16,r16,r20
    abcc:	00800e04 	movi	r2,56
    abd0:	1401200e 	bge	r2,r16,b054 <__divdf3+0x778>
    abd4:	9180004c 	andi	r6,r18,1
    abd8:	0009883a 	mov	r4,zero
    abdc:	000b883a 	mov	r5,zero
    abe0:	0027883a 	mov	r19,zero
    abe4:	003f9b06 	br	aa54 <__alt_mem_Flash_flash_data+0xf400aa54>
    abe8:	8880022c 	andhi	r2,r17,8
    abec:	1000c726 	beq	r2,zero,af0c <__divdf3+0x630>
    abf0:	8080022c 	andhi	r2,r16,8
    abf4:	1000c51e 	bne	r2,zero,af0c <__divdf3+0x630>
    abf8:	00800434 	movhi	r2,16
    abfc:	81400234 	orhi	r5,r16,8
    ac00:	10bfffc4 	addi	r2,r2,-1
    ac04:	b80d883a 	mov	r6,r23
    ac08:	288a703a 	and	r5,r5,r2
    ac0c:	a827883a 	mov	r19,r21
    ac10:	003fea06 	br	abbc <__alt_mem_Flash_flash_data+0xf400abbc>
    ac14:	8440ea36 	bltu	r16,r17,afc0 <__divdf3+0x6e4>
    ac18:	8c00e826 	beq	r17,r16,afbc <__divdf3+0x6e0>
    ac1c:	a53fffc4 	addi	r20,r20,-1
    ac20:	882d883a 	mov	r22,r17
    ac24:	000d883a 	mov	r6,zero
    ac28:	a804d63a 	srli	r2,r21,24
    ac2c:	8020923a 	slli	r16,r16,8
    ac30:	b009883a 	mov	r4,r22
    ac34:	d9800315 	stw	r6,12(sp)
    ac38:	1420b03a 	or	r16,r2,r16
    ac3c:	802ed43a 	srli	r23,r16,16
    ac40:	873fffcc 	andi	fp,r16,65535
    ac44:	a82a923a 	slli	r21,r21,8
    ac48:	b80b883a 	mov	r5,r23
    ac4c:	000a0300 	call	a030 <__udivsi3>
    ac50:	b009883a 	mov	r4,r22
    ac54:	b80b883a 	mov	r5,r23
    ac58:	1023883a 	mov	r17,r2
    ac5c:	000a0380 	call	a038 <__umodsi3>
    ac60:	1004943a 	slli	r2,r2,16
    ac64:	9808d43a 	srli	r4,r19,16
    ac68:	8f2d383a 	mul	r22,r17,fp
    ac6c:	d9800317 	ldw	r6,12(sp)
    ac70:	1106b03a 	or	r3,r2,r4
    ac74:	1d80062e 	bgeu	r3,r22,ac90 <__divdf3+0x3b4>
    ac78:	1c07883a 	add	r3,r3,r16
    ac7c:	88bfffc4 	addi	r2,r17,-1
    ac80:	1c00dc36 	bltu	r3,r16,aff4 <__divdf3+0x718>
    ac84:	1d80db2e 	bgeu	r3,r22,aff4 <__divdf3+0x718>
    ac88:	8c7fff84 	addi	r17,r17,-2
    ac8c:	1c07883a 	add	r3,r3,r16
    ac90:	1dadc83a 	sub	r22,r3,r22
    ac94:	b009883a 	mov	r4,r22
    ac98:	b80b883a 	mov	r5,r23
    ac9c:	d9800315 	stw	r6,12(sp)
    aca0:	000a0300 	call	a030 <__udivsi3>
    aca4:	b009883a 	mov	r4,r22
    aca8:	b80b883a 	mov	r5,r23
    acac:	d8800015 	stw	r2,0(sp)
    acb0:	000a0380 	call	a038 <__umodsi3>
    acb4:	da400017 	ldw	r9,0(sp)
    acb8:	1004943a 	slli	r2,r2,16
    acbc:	9cffffcc 	andi	r19,r19,65535
    acc0:	4f07383a 	mul	r3,r9,fp
    acc4:	14c8b03a 	or	r4,r2,r19
    acc8:	d9800317 	ldw	r6,12(sp)
    accc:	20c0062e 	bgeu	r4,r3,ace8 <__divdf3+0x40c>
    acd0:	2409883a 	add	r4,r4,r16
    acd4:	48bfffc4 	addi	r2,r9,-1
    acd8:	2400c436 	bltu	r4,r16,afec <__divdf3+0x710>
    acdc:	20c0c32e 	bgeu	r4,r3,afec <__divdf3+0x710>
    ace0:	4a7fff84 	addi	r9,r9,-2
    ace4:	2409883a 	add	r4,r4,r16
    ace8:	8822943a 	slli	r17,r17,16
    acec:	a80ed43a 	srli	r7,r21,16
    acf0:	aa3fffcc 	andi	r8,r21,65535
    acf4:	4c62b03a 	or	r17,r9,r17
    acf8:	8816d43a 	srli	r11,r17,16
    acfc:	897fffcc 	andi	r5,r17,65535
    ad00:	2a15383a 	mul	r10,r5,r8
    ad04:	5a19383a 	mul	r12,r11,r8
    ad08:	29cb383a 	mul	r5,r5,r7
    ad0c:	5012d43a 	srli	r9,r10,16
    ad10:	20c5c83a 	sub	r2,r4,r3
    ad14:	614b883a 	add	r5,r12,r5
    ad18:	2a4b883a 	add	r5,r5,r9
    ad1c:	59c7383a 	mul	r3,r11,r7
    ad20:	2b00022e 	bgeu	r5,r12,ad2c <__divdf3+0x450>
    ad24:	01000074 	movhi	r4,1
    ad28:	1907883a 	add	r3,r3,r4
    ad2c:	2808d43a 	srli	r4,r5,16
    ad30:	280a943a 	slli	r5,r5,16
    ad34:	54ffffcc 	andi	r19,r10,65535
    ad38:	1907883a 	add	r3,r3,r4
    ad3c:	2ccb883a 	add	r5,r5,r19
    ad40:	10c09336 	bltu	r2,r3,af90 <__divdf3+0x6b4>
    ad44:	10c0ad26 	beq	r2,r3,affc <__divdf3+0x720>
    ad48:	10c7c83a 	sub	r3,r2,r3
    ad4c:	3167c83a 	sub	r19,r6,r5
    ad50:	34ed803a 	cmpltu	r22,r6,r19
    ad54:	1dadc83a 	sub	r22,r3,r22
    ad58:	b400b226 	beq	r22,r16,b024 <__divdf3+0x748>
    ad5c:	b009883a 	mov	r4,r22
    ad60:	b80b883a 	mov	r5,r23
    ad64:	d9c00115 	stw	r7,4(sp)
    ad68:	da000215 	stw	r8,8(sp)
    ad6c:	000a0300 	call	a030 <__udivsi3>
    ad70:	b009883a 	mov	r4,r22
    ad74:	b80b883a 	mov	r5,r23
    ad78:	d8800315 	stw	r2,12(sp)
    ad7c:	000a0380 	call	a038 <__umodsi3>
    ad80:	d9800317 	ldw	r6,12(sp)
    ad84:	1004943a 	slli	r2,r2,16
    ad88:	9808d43a 	srli	r4,r19,16
    ad8c:	372d383a 	mul	r22,r6,fp
    ad90:	d9c00117 	ldw	r7,4(sp)
    ad94:	1106b03a 	or	r3,r2,r4
    ad98:	da000217 	ldw	r8,8(sp)
    ad9c:	1d80062e 	bgeu	r3,r22,adb8 <__divdf3+0x4dc>
    ada0:	1c07883a 	add	r3,r3,r16
    ada4:	30bfffc4 	addi	r2,r6,-1
    ada8:	1c00a036 	bltu	r3,r16,b02c <__divdf3+0x750>
    adac:	1d809f2e 	bgeu	r3,r22,b02c <__divdf3+0x750>
    adb0:	31bfff84 	addi	r6,r6,-2
    adb4:	1c07883a 	add	r3,r3,r16
    adb8:	1dadc83a 	sub	r22,r3,r22
    adbc:	b009883a 	mov	r4,r22
    adc0:	b80b883a 	mov	r5,r23
    adc4:	d9800315 	stw	r6,12(sp)
    adc8:	d9c00115 	stw	r7,4(sp)
    adcc:	da000215 	stw	r8,8(sp)
    add0:	000a0300 	call	a030 <__udivsi3>
    add4:	b009883a 	mov	r4,r22
    add8:	b80b883a 	mov	r5,r23
    addc:	d8800015 	stw	r2,0(sp)
    ade0:	000a0380 	call	a038 <__umodsi3>
    ade4:	da400017 	ldw	r9,0(sp)
    ade8:	1004943a 	slli	r2,r2,16
    adec:	993fffcc 	andi	r4,r19,65535
    adf0:	4f39383a 	mul	fp,r9,fp
    adf4:	1106b03a 	or	r3,r2,r4
    adf8:	d9800317 	ldw	r6,12(sp)
    adfc:	d9c00117 	ldw	r7,4(sp)
    ae00:	da000217 	ldw	r8,8(sp)
    ae04:	1f00062e 	bgeu	r3,fp,ae20 <__divdf3+0x544>
    ae08:	1c07883a 	add	r3,r3,r16
    ae0c:	48bfffc4 	addi	r2,r9,-1
    ae10:	1c008836 	bltu	r3,r16,b034 <__divdf3+0x758>
    ae14:	1f00872e 	bgeu	r3,fp,b034 <__divdf3+0x758>
    ae18:	4a7fff84 	addi	r9,r9,-2
    ae1c:	1c07883a 	add	r3,r3,r16
    ae20:	3008943a 	slli	r4,r6,16
    ae24:	1f07c83a 	sub	r3,r3,fp
    ae28:	4926b03a 	or	r19,r9,r4
    ae2c:	993fffcc 	andi	r4,r19,65535
    ae30:	980cd43a 	srli	r6,r19,16
    ae34:	220b383a 	mul	r5,r4,r8
    ae38:	21c5383a 	mul	r2,r4,r7
    ae3c:	3211383a 	mul	r8,r6,r8
    ae40:	2808d43a 	srli	r4,r5,16
    ae44:	31cf383a 	mul	r7,r6,r7
    ae48:	4085883a 	add	r2,r8,r2
    ae4c:	1105883a 	add	r2,r2,r4
    ae50:	1200022e 	bgeu	r2,r8,ae5c <__divdf3+0x580>
    ae54:	01000074 	movhi	r4,1
    ae58:	390f883a 	add	r7,r7,r4
    ae5c:	1008d43a 	srli	r4,r2,16
    ae60:	1004943a 	slli	r2,r2,16
    ae64:	297fffcc 	andi	r5,r5,65535
    ae68:	390f883a 	add	r7,r7,r4
    ae6c:	1145883a 	add	r2,r2,r5
    ae70:	19c06536 	bltu	r3,r7,b008 <__divdf3+0x72c>
    ae74:	19c09f26 	beq	r3,r7,b0f4 <__divdf3+0x818>
    ae78:	9cc00054 	ori	r19,r19,1
    ae7c:	a100ffc4 	addi	r4,r20,1023
    ae80:	013f500e 	bge	zero,r4,abc4 <__alt_mem_Flash_flash_data+0xf400abc4>
    ae84:	988001cc 	andi	r2,r19,7
    ae88:	10000726 	beq	r2,zero,aea8 <__divdf3+0x5cc>
    ae8c:	98c003cc 	andi	r3,r19,15
    ae90:	00800104 	movi	r2,4
    ae94:	18800426 	beq	r3,r2,aea8 <__divdf3+0x5cc>
    ae98:	9885883a 	add	r2,r19,r2
    ae9c:	14e1803a 	cmpltu	r16,r2,r19
    aea0:	8c23883a 	add	r17,r17,r16
    aea4:	1027883a 	mov	r19,r2
    aea8:	8880402c 	andhi	r2,r17,256
    aeac:	10000426 	beq	r2,zero,aec0 <__divdf3+0x5e4>
    aeb0:	00bfc034 	movhi	r2,65280
    aeb4:	10bfffc4 	addi	r2,r2,-1
    aeb8:	a1010004 	addi	r4,r20,1024
    aebc:	88a2703a 	and	r17,r17,r2
    aec0:	0081ff84 	movi	r2,2046
    aec4:	113edf16 	blt	r2,r4,aa44 <__alt_mem_Flash_flash_data+0xf400aa44>
    aec8:	9826d0fa 	srli	r19,r19,3
    aecc:	8804977a 	slli	r2,r17,29
    aed0:	8820927a 	slli	r16,r17,9
    aed4:	2101ffcc 	andi	r4,r4,2047
    aed8:	14e6b03a 	or	r19,r2,r19
    aedc:	800ad33a 	srli	r5,r16,12
    aee0:	9180004c 	andi	r6,r18,1
    aee4:	003edb06 	br	aa54 <__alt_mem_Flash_flash_data+0xf400aa54>
    aee8:	008000c4 	movi	r2,3
    aeec:	4080a826 	beq	r8,r2,b190 <__divdf3+0x8b4>
    aef0:	00800044 	movi	r2,1
    aef4:	4080551e 	bne	r8,r2,b04c <__divdf3+0x770>
    aef8:	e00d883a 	mov	r6,fp
    aefc:	0009883a 	mov	r4,zero
    af00:	000b883a 	mov	r5,zero
    af04:	0027883a 	mov	r19,zero
    af08:	003ed206 	br	aa54 <__alt_mem_Flash_flash_data+0xf400aa54>
    af0c:	00800434 	movhi	r2,16
    af10:	89400234 	orhi	r5,r17,8
    af14:	10bfffc4 	addi	r2,r2,-1
    af18:	b00d883a 	mov	r6,r22
    af1c:	288a703a 	and	r5,r5,r2
    af20:	003f2606 	br	abbc <__alt_mem_Flash_flash_data+0xf400abbc>
    af24:	d9800315 	stw	r6,12(sp)
    af28:	d9c00115 	stw	r7,4(sp)
    af2c:	000c5dc0 	call	c5dc <__clzsi2>
    af30:	10c00804 	addi	r3,r2,32
    af34:	010009c4 	movi	r4,39
    af38:	d9800317 	ldw	r6,12(sp)
    af3c:	d9c00117 	ldw	r7,4(sp)
    af40:	20fee30e 	bge	r4,r3,aad0 <__alt_mem_Flash_flash_data+0xf400aad0>
    af44:	117ffe04 	addi	r5,r2,-8
    af48:	9162983a 	sll	r17,r18,r5
    af4c:	0027883a 	mov	r19,zero
    af50:	003ee606 	br	aaec <__alt_mem_Flash_flash_data+0xf400aaec>
    af54:	3009883a 	mov	r4,r6
    af58:	d9800315 	stw	r6,12(sp)
    af5c:	da000215 	stw	r8,8(sp)
    af60:	da400015 	stw	r9,0(sp)
    af64:	000c5dc0 	call	c5dc <__clzsi2>
    af68:	10c00804 	addi	r3,r2,32
    af6c:	010009c4 	movi	r4,39
    af70:	d9800317 	ldw	r6,12(sp)
    af74:	da000217 	ldw	r8,8(sp)
    af78:	da400017 	ldw	r9,0(sp)
    af7c:	20fef20e 	bge	r4,r3,ab48 <__alt_mem_Flash_flash_data+0xf400ab48>
    af80:	10bffe04 	addi	r2,r2,-8
    af84:	a8a0983a 	sll	r16,r21,r2
    af88:	002b883a 	mov	r21,zero
    af8c:	003ef506 	br	ab64 <__alt_mem_Flash_flash_data+0xf400ab64>
    af90:	354d883a 	add	r6,r6,r21
    af94:	3549803a 	cmpltu	r4,r6,r21
    af98:	2409883a 	add	r4,r4,r16
    af9c:	2089883a 	add	r4,r4,r2
    afa0:	88bfffc4 	addi	r2,r17,-1
    afa4:	81000c2e 	bgeu	r16,r4,afd8 <__divdf3+0x6fc>
    afa8:	20c04436 	bltu	r4,r3,b0bc <__divdf3+0x7e0>
    afac:	19006f26 	beq	r3,r4,b16c <__divdf3+0x890>
    afb0:	20c7c83a 	sub	r3,r4,r3
    afb4:	1023883a 	mov	r17,r2
    afb8:	003f6406 	br	ad4c <__alt_mem_Flash_flash_data+0xf400ad4c>
    afbc:	9d7f1736 	bltu	r19,r21,ac1c <__alt_mem_Flash_flash_data+0xf400ac1c>
    afc0:	9806d07a 	srli	r3,r19,1
    afc4:	880497fa 	slli	r2,r17,31
    afc8:	980c97fa 	slli	r6,r19,31
    afcc:	882cd07a 	srli	r22,r17,1
    afd0:	18a6b03a 	or	r19,r3,r2
    afd4:	003f1406 	br	ac28 <__alt_mem_Flash_flash_data+0xf400ac28>
    afd8:	243ff51e 	bne	r4,r16,afb0 <__alt_mem_Flash_flash_data+0xf400afb0>
    afdc:	357ff22e 	bgeu	r6,r21,afa8 <__alt_mem_Flash_flash_data+0xf400afa8>
    afe0:	80c7c83a 	sub	r3,r16,r3
    afe4:	1023883a 	mov	r17,r2
    afe8:	003f5806 	br	ad4c <__alt_mem_Flash_flash_data+0xf400ad4c>
    afec:	1013883a 	mov	r9,r2
    aff0:	003f3d06 	br	ace8 <__alt_mem_Flash_flash_data+0xf400ace8>
    aff4:	1023883a 	mov	r17,r2
    aff8:	003f2506 	br	ac90 <__alt_mem_Flash_flash_data+0xf400ac90>
    affc:	317fe436 	bltu	r6,r5,af90 <__alt_mem_Flash_flash_data+0xf400af90>
    b000:	0007883a 	mov	r3,zero
    b004:	003f5106 	br	ad4c <__alt_mem_Flash_flash_data+0xf400ad4c>
    b008:	1c07883a 	add	r3,r3,r16
    b00c:	993fffc4 	addi	r4,r19,-1
    b010:	1c000a2e 	bgeu	r3,r16,b03c <__divdf3+0x760>
    b014:	2027883a 	mov	r19,r4
    b018:	19ff971e 	bne	r3,r7,ae78 <__alt_mem_Flash_flash_data+0xf400ae78>
    b01c:	a8bf961e 	bne	r21,r2,ae78 <__alt_mem_Flash_flash_data+0xf400ae78>
    b020:	003f9606 	br	ae7c <__alt_mem_Flash_flash_data+0xf400ae7c>
    b024:	04ffffc4 	movi	r19,-1
    b028:	003f9406 	br	ae7c <__alt_mem_Flash_flash_data+0xf400ae7c>
    b02c:	100d883a 	mov	r6,r2
    b030:	003f6106 	br	adb8 <__alt_mem_Flash_flash_data+0xf400adb8>
    b034:	1013883a 	mov	r9,r2
    b038:	003f7906 	br	ae20 <__alt_mem_Flash_flash_data+0xf400ae20>
    b03c:	19c02636 	bltu	r3,r7,b0d8 <__divdf3+0x7fc>
    b040:	38c04d26 	beq	r7,r3,b178 <__divdf3+0x89c>
    b044:	2027883a 	mov	r19,r4
    b048:	003f8b06 	br	ae78 <__alt_mem_Flash_flash_data+0xf400ae78>
    b04c:	e025883a 	mov	r18,fp
    b050:	003f8a06 	br	ae7c <__alt_mem_Flash_flash_data+0xf400ae7c>
    b054:	008007c4 	movi	r2,31
    b058:	14002a16 	blt	r2,r16,b104 <__divdf3+0x828>
    b05c:	a5010784 	addi	r20,r20,1054
    b060:	8d04983a 	sll	r2,r17,r20
    b064:	9c06d83a 	srl	r3,r19,r16
    b068:	9d28983a 	sll	r20,r19,r20
    b06c:	8c20d83a 	srl	r16,r17,r16
    b070:	1886b03a 	or	r3,r3,r2
    b074:	a004c03a 	cmpne	r2,r20,zero
    b078:	1884b03a 	or	r2,r3,r2
    b07c:	10c001cc 	andi	r3,r2,7
    b080:	18000726 	beq	r3,zero,b0a0 <__divdf3+0x7c4>
    b084:	110003cc 	andi	r4,r2,15
    b088:	00c00104 	movi	r3,4
    b08c:	20c00426 	beq	r4,r3,b0a0 <__divdf3+0x7c4>
    b090:	10c00104 	addi	r3,r2,4
    b094:	1885803a 	cmpltu	r2,r3,r2
    b098:	80a1883a 	add	r16,r16,r2
    b09c:	1805883a 	mov	r2,r3
    b0a0:	80c0202c 	andhi	r3,r16,128
    b0a4:	18002d26 	beq	r3,zero,b15c <__divdf3+0x880>
    b0a8:	9180004c 	andi	r6,r18,1
    b0ac:	01000044 	movi	r4,1
    b0b0:	000b883a 	mov	r5,zero
    b0b4:	0027883a 	mov	r19,zero
    b0b8:	003e6606 	br	aa54 <__alt_mem_Flash_flash_data+0xf400aa54>
    b0bc:	354d883a 	add	r6,r6,r21
    b0c0:	356d803a 	cmpltu	r22,r6,r21
    b0c4:	b42d883a 	add	r22,r22,r16
    b0c8:	b12d883a 	add	r22,r22,r4
    b0cc:	8c7fff84 	addi	r17,r17,-2
    b0d0:	b0c7c83a 	sub	r3,r22,r3
    b0d4:	003f1d06 	br	ad4c <__alt_mem_Flash_flash_data+0xf400ad4c>
    b0d8:	ad4b883a 	add	r5,r21,r21
    b0dc:	2d6b803a 	cmpltu	r21,r5,r21
    b0e0:	ac2b883a 	add	r21,r21,r16
    b0e4:	1d47883a 	add	r3,r3,r21
    b0e8:	993fff84 	addi	r4,r19,-2
    b0ec:	282b883a 	mov	r21,r5
    b0f0:	003fc806 	br	b014 <__alt_mem_Flash_flash_data+0xf400b014>
    b0f4:	103fc41e 	bne	r2,zero,b008 <__alt_mem_Flash_flash_data+0xf400b008>
    b0f8:	002b883a 	mov	r21,zero
    b0fc:	a8bf5e1e 	bne	r21,r2,ae78 <__alt_mem_Flash_flash_data+0xf400ae78>
    b100:	003f5e06 	br	ae7c <__alt_mem_Flash_flash_data+0xf400ae7c>
    b104:	00bef884 	movi	r2,-1054
    b108:	1505c83a 	sub	r2,r2,r20
    b10c:	00c00804 	movi	r3,32
    b110:	8884d83a 	srl	r2,r17,r2
    b114:	80c01c26 	beq	r16,r3,b188 <__divdf3+0x8ac>
    b118:	a0c10f84 	addi	r3,r20,1086
    b11c:	88c6983a 	sll	r3,r17,r3
    b120:	1cc6b03a 	or	r3,r3,r19
    b124:	1806c03a 	cmpne	r3,r3,zero
    b128:	1884b03a 	or	r2,r3,r2
    b12c:	140001cc 	andi	r16,r2,7
    b130:	8000061e 	bne	r16,zero,b14c <__divdf3+0x870>
    b134:	000b883a 	mov	r5,zero
    b138:	1004d0fa 	srli	r2,r2,3
    b13c:	9180004c 	andi	r6,r18,1
    b140:	0009883a 	mov	r4,zero
    b144:	1426b03a 	or	r19,r2,r16
    b148:	003e4206 	br	aa54 <__alt_mem_Flash_flash_data+0xf400aa54>
    b14c:	110003cc 	andi	r4,r2,15
    b150:	00c00104 	movi	r3,4
    b154:	0021883a 	mov	r16,zero
    b158:	20ffcd1e 	bne	r4,r3,b090 <__alt_mem_Flash_flash_data+0xf400b090>
    b15c:	800a927a 	slli	r5,r16,9
    b160:	8020977a 	slli	r16,r16,29
    b164:	280ad33a 	srli	r5,r5,12
    b168:	003ff306 	br	b138 <__alt_mem_Flash_flash_data+0xf400b138>
    b16c:	317fd336 	bltu	r6,r5,b0bc <__alt_mem_Flash_flash_data+0xf400b0bc>
    b170:	1023883a 	mov	r17,r2
    b174:	003fa206 	br	b000 <__alt_mem_Flash_flash_data+0xf400b000>
    b178:	a8bfd736 	bltu	r21,r2,b0d8 <__alt_mem_Flash_flash_data+0xf400b0d8>
    b17c:	2027883a 	mov	r19,r4
    b180:	a8bf3d1e 	bne	r21,r2,ae78 <__alt_mem_Flash_flash_data+0xf400ae78>
    b184:	003f3d06 	br	ae7c <__alt_mem_Flash_flash_data+0xf400ae7c>
    b188:	0007883a 	mov	r3,zero
    b18c:	003fe406 	br	b120 <__alt_mem_Flash_flash_data+0xf400b120>
    b190:	00800434 	movhi	r2,16
    b194:	89400234 	orhi	r5,r17,8
    b198:	10bfffc4 	addi	r2,r2,-1
    b19c:	e00d883a 	mov	r6,fp
    b1a0:	288a703a 	and	r5,r5,r2
    b1a4:	003e8506 	br	abbc <__alt_mem_Flash_flash_data+0xf400abbc>

0000b1a8 <__eqdf2>:
    b1a8:	2804d53a 	srli	r2,r5,20
    b1ac:	3806d53a 	srli	r3,r7,20
    b1b0:	02000434 	movhi	r8,16
    b1b4:	423fffc4 	addi	r8,r8,-1
    b1b8:	1081ffcc 	andi	r2,r2,2047
    b1bc:	0241ffc4 	movi	r9,2047
    b1c0:	2a14703a 	and	r10,r5,r8
    b1c4:	18c1ffcc 	andi	r3,r3,2047
    b1c8:	3a10703a 	and	r8,r7,r8
    b1cc:	280ad7fa 	srli	r5,r5,31
    b1d0:	380ed7fa 	srli	r7,r7,31
    b1d4:	12400f26 	beq	r2,r9,b214 <__eqdf2+0x6c>
    b1d8:	0241ffc4 	movi	r9,2047
    b1dc:	1a400326 	beq	r3,r9,b1ec <__eqdf2+0x44>
    b1e0:	10c00526 	beq	r2,r3,b1f8 <__eqdf2+0x50>
    b1e4:	00800044 	movi	r2,1
    b1e8:	f800283a 	ret
    b1ec:	4192b03a 	or	r9,r8,r6
    b1f0:	483ffc1e 	bne	r9,zero,b1e4 <__alt_mem_Flash_flash_data+0xf400b1e4>
    b1f4:	10fffb1e 	bne	r2,r3,b1e4 <__alt_mem_Flash_flash_data+0xf400b1e4>
    b1f8:	523ffa1e 	bne	r10,r8,b1e4 <__alt_mem_Flash_flash_data+0xf400b1e4>
    b1fc:	21bff91e 	bne	r4,r6,b1e4 <__alt_mem_Flash_flash_data+0xf400b1e4>
    b200:	29c00826 	beq	r5,r7,b224 <__eqdf2+0x7c>
    b204:	103ff71e 	bne	r2,zero,b1e4 <__alt_mem_Flash_flash_data+0xf400b1e4>
    b208:	5104b03a 	or	r2,r10,r4
    b20c:	1004c03a 	cmpne	r2,r2,zero
    b210:	f800283a 	ret
    b214:	5112b03a 	or	r9,r10,r4
    b218:	483fef26 	beq	r9,zero,b1d8 <__alt_mem_Flash_flash_data+0xf400b1d8>
    b21c:	00800044 	movi	r2,1
    b220:	f800283a 	ret
    b224:	0005883a 	mov	r2,zero
    b228:	f800283a 	ret

0000b22c <__gedf2>:
    b22c:	2804d53a 	srli	r2,r5,20
    b230:	3806d53a 	srli	r3,r7,20
    b234:	02000434 	movhi	r8,16
    b238:	423fffc4 	addi	r8,r8,-1
    b23c:	0241ffc4 	movi	r9,2047
    b240:	1081ffcc 	andi	r2,r2,2047
    b244:	2a14703a 	and	r10,r5,r8
    b248:	1a46703a 	and	r3,r3,r9
    b24c:	3a10703a 	and	r8,r7,r8
    b250:	280ad7fa 	srli	r5,r5,31
    b254:	380ed7fa 	srli	r7,r7,31
    b258:	12400b26 	beq	r2,r9,b288 <__gedf2+0x5c>
    b25c:	1a401626 	beq	r3,r9,b2b8 <__gedf2+0x8c>
    b260:	10000c1e 	bne	r2,zero,b294 <__gedf2+0x68>
    b264:	5112b03a 	or	r9,r10,r4
    b268:	4813003a 	cmpeq	r9,r9,zero
    b26c:	4817883a 	mov	r11,r9
    b270:	18000c1e 	bne	r3,zero,b2a4 <__gedf2+0x78>
    b274:	4198b03a 	or	r12,r8,r6
    b278:	60000a1e 	bne	r12,zero,b2a4 <__gedf2+0x78>
    b27c:	48001326 	beq	r9,zero,b2cc <__gedf2+0xa0>
    b280:	0005883a 	mov	r2,zero
    b284:	f800283a 	ret
    b288:	5112b03a 	or	r9,r10,r4
    b28c:	4800191e 	bne	r9,zero,b2f4 <__gedf2+0xc8>
    b290:	18800926 	beq	r3,r2,b2b8 <__gedf2+0x8c>
    b294:	18000b1e 	bne	r3,zero,b2c4 <__gedf2+0x98>
    b298:	4192b03a 	or	r9,r8,r6
    b29c:	0017883a 	mov	r11,zero
    b2a0:	48000a26 	beq	r9,zero,b2cc <__gedf2+0xa0>
    b2a4:	39c03fcc 	andi	r7,r7,255
    b2a8:	58000726 	beq	r11,zero,b2c8 <__gedf2+0x9c>
    b2ac:	3800081e 	bne	r7,zero,b2d0 <__gedf2+0xa4>
    b2b0:	00bfffc4 	movi	r2,-1
    b2b4:	f800283a 	ret
    b2b8:	4192b03a 	or	r9,r8,r6
    b2bc:	48000d1e 	bne	r9,zero,b2f4 <__gedf2+0xc8>
    b2c0:	103fe826 	beq	r2,zero,b264 <__alt_mem_Flash_flash_data+0xf400b264>
    b2c4:	39c03fcc 	andi	r7,r7,255
    b2c8:	29c00326 	beq	r5,r7,b2d8 <__gedf2+0xac>
    b2cc:	283ff81e 	bne	r5,zero,b2b0 <__alt_mem_Flash_flash_data+0xf400b2b0>
    b2d0:	00800044 	movi	r2,1
    b2d4:	f800283a 	ret
    b2d8:	18bffc16 	blt	r3,r2,b2cc <__alt_mem_Flash_flash_data+0xf400b2cc>
    b2dc:	10c00316 	blt	r2,r3,b2ec <__gedf2+0xc0>
    b2e0:	42bffa36 	bltu	r8,r10,b2cc <__alt_mem_Flash_flash_data+0xf400b2cc>
    b2e4:	52000526 	beq	r10,r8,b2fc <__gedf2+0xd0>
    b2e8:	523fe52e 	bgeu	r10,r8,b280 <__alt_mem_Flash_flash_data+0xf400b280>
    b2ec:	283ff026 	beq	r5,zero,b2b0 <__alt_mem_Flash_flash_data+0xf400b2b0>
    b2f0:	003ff706 	br	b2d0 <__alt_mem_Flash_flash_data+0xf400b2d0>
    b2f4:	00bfff84 	movi	r2,-2
    b2f8:	f800283a 	ret
    b2fc:	313ff336 	bltu	r6,r4,b2cc <__alt_mem_Flash_flash_data+0xf400b2cc>
    b300:	21bfdf2e 	bgeu	r4,r6,b280 <__alt_mem_Flash_flash_data+0xf400b280>
    b304:	283fea26 	beq	r5,zero,b2b0 <__alt_mem_Flash_flash_data+0xf400b2b0>
    b308:	003ff106 	br	b2d0 <__alt_mem_Flash_flash_data+0xf400b2d0>

0000b30c <__ledf2>:
    b30c:	2804d53a 	srli	r2,r5,20
    b310:	3810d53a 	srli	r8,r7,20
    b314:	00c00434 	movhi	r3,16
    b318:	18ffffc4 	addi	r3,r3,-1
    b31c:	0241ffc4 	movi	r9,2047
    b320:	1081ffcc 	andi	r2,r2,2047
    b324:	28d4703a 	and	r10,r5,r3
    b328:	4250703a 	and	r8,r8,r9
    b32c:	38c6703a 	and	r3,r7,r3
    b330:	280ad7fa 	srli	r5,r5,31
    b334:	380ed7fa 	srli	r7,r7,31
    b338:	12400b26 	beq	r2,r9,b368 <__ledf2+0x5c>
    b33c:	42401926 	beq	r8,r9,b3a4 <__ledf2+0x98>
    b340:	10000c1e 	bne	r2,zero,b374 <__ledf2+0x68>
    b344:	5112b03a 	or	r9,r10,r4
    b348:	4813003a 	cmpeq	r9,r9,zero
    b34c:	4817883a 	mov	r11,r9
    b350:	40000f26 	beq	r8,zero,b390 <__ledf2+0x84>
    b354:	39c03fcc 	andi	r7,r7,255
    b358:	58001826 	beq	r11,zero,b3bc <__ledf2+0xb0>
    b35c:	38000a1e 	bne	r7,zero,b388 <__ledf2+0x7c>
    b360:	00bfffc4 	movi	r2,-1
    b364:	f800283a 	ret
    b368:	5112b03a 	or	r9,r10,r4
    b36c:	48000f1e 	bne	r9,zero,b3ac <__ledf2+0xa0>
    b370:	40800c26 	beq	r8,r2,b3a4 <__ledf2+0x98>
    b374:	4000101e 	bne	r8,zero,b3b8 <__ledf2+0xac>
    b378:	1992b03a 	or	r9,r3,r6
    b37c:	0017883a 	mov	r11,zero
    b380:	483ff41e 	bne	r9,zero,b354 <__alt_mem_Flash_flash_data+0xf400b354>
    b384:	283ff61e 	bne	r5,zero,b360 <__alt_mem_Flash_flash_data+0xf400b360>
    b388:	00800044 	movi	r2,1
    b38c:	f800283a 	ret
    b390:	1998b03a 	or	r12,r3,r6
    b394:	603fef1e 	bne	r12,zero,b354 <__alt_mem_Flash_flash_data+0xf400b354>
    b398:	483ffa26 	beq	r9,zero,b384 <__alt_mem_Flash_flash_data+0xf400b384>
    b39c:	0005883a 	mov	r2,zero
    b3a0:	f800283a 	ret
    b3a4:	1992b03a 	or	r9,r3,r6
    b3a8:	48000226 	beq	r9,zero,b3b4 <__ledf2+0xa8>
    b3ac:	00800084 	movi	r2,2
    b3b0:	f800283a 	ret
    b3b4:	103fe326 	beq	r2,zero,b344 <__alt_mem_Flash_flash_data+0xf400b344>
    b3b8:	39c03fcc 	andi	r7,r7,255
    b3bc:	29fff11e 	bne	r5,r7,b384 <__alt_mem_Flash_flash_data+0xf400b384>
    b3c0:	40bff016 	blt	r8,r2,b384 <__alt_mem_Flash_flash_data+0xf400b384>
    b3c4:	12000316 	blt	r2,r8,b3d4 <__ledf2+0xc8>
    b3c8:	1abfee36 	bltu	r3,r10,b384 <__alt_mem_Flash_flash_data+0xf400b384>
    b3cc:	50c00326 	beq	r10,r3,b3dc <__ledf2+0xd0>
    b3d0:	50fff22e 	bgeu	r10,r3,b39c <__alt_mem_Flash_flash_data+0xf400b39c>
    b3d4:	283fe226 	beq	r5,zero,b360 <__alt_mem_Flash_flash_data+0xf400b360>
    b3d8:	003feb06 	br	b388 <__alt_mem_Flash_flash_data+0xf400b388>
    b3dc:	313fe936 	bltu	r6,r4,b384 <__alt_mem_Flash_flash_data+0xf400b384>
    b3e0:	21bfee2e 	bgeu	r4,r6,b39c <__alt_mem_Flash_flash_data+0xf400b39c>
    b3e4:	283fde26 	beq	r5,zero,b360 <__alt_mem_Flash_flash_data+0xf400b360>
    b3e8:	003fe706 	br	b388 <__alt_mem_Flash_flash_data+0xf400b388>

0000b3ec <__muldf3>:
    b3ec:	defff204 	addi	sp,sp,-56
    b3f0:	2804d53a 	srli	r2,r5,20
    b3f4:	dd800a15 	stw	r22,40(sp)
    b3f8:	282cd7fa 	srli	r22,r5,31
    b3fc:	dc000415 	stw	r16,16(sp)
    b400:	04000434 	movhi	r16,16
    b404:	df000c15 	stw	fp,48(sp)
    b408:	dd000815 	stw	r20,32(sp)
    b40c:	dcc00715 	stw	r19,28(sp)
    b410:	dc800615 	stw	r18,24(sp)
    b414:	dc400515 	stw	r17,20(sp)
    b418:	843fffc4 	addi	r16,r16,-1
    b41c:	dfc00d15 	stw	ra,52(sp)
    b420:	ddc00b15 	stw	r23,44(sp)
    b424:	dd400915 	stw	r21,36(sp)
    b428:	1501ffcc 	andi	r20,r2,2047
    b42c:	2023883a 	mov	r17,r4
    b430:	2025883a 	mov	r18,r4
    b434:	2c20703a 	and	r16,r5,r16
    b438:	b027883a 	mov	r19,r22
    b43c:	b7003fcc 	andi	fp,r22,255
    b440:	a0005926 	beq	r20,zero,b5a8 <__muldf3+0x1bc>
    b444:	0081ffc4 	movi	r2,2047
    b448:	a0803426 	beq	r20,r2,b51c <__muldf3+0x130>
    b44c:	84000434 	orhi	r16,r16,16
    b450:	2004d77a 	srli	r2,r4,29
    b454:	802090fa 	slli	r16,r16,3
    b458:	202490fa 	slli	r18,r4,3
    b45c:	a53f0044 	addi	r20,r20,-1023
    b460:	80a0b03a 	or	r16,r16,r2
    b464:	002b883a 	mov	r21,zero
    b468:	0015883a 	mov	r10,zero
    b46c:	3812d53a 	srli	r9,r7,20
    b470:	3806d7fa 	srli	r3,r7,31
    b474:	02000434 	movhi	r8,16
    b478:	423fffc4 	addi	r8,r8,-1
    b47c:	4941ffcc 	andi	r5,r9,2047
    b480:	302f883a 	mov	r23,r6
    b484:	3a22703a 	and	r17,r7,r8
    b488:	1ac03fcc 	andi	r11,r3,255
    b48c:	28006226 	beq	r5,zero,b618 <__muldf3+0x22c>
    b490:	0081ffc4 	movi	r2,2047
    b494:	28805a26 	beq	r5,r2,b600 <__muldf3+0x214>
    b498:	8a000434 	orhi	r8,r17,16
    b49c:	3004d77a 	srli	r2,r6,29
    b4a0:	401090fa 	slli	r8,r8,3
    b4a4:	302e90fa 	slli	r23,r6,3
    b4a8:	297f0044 	addi	r5,r5,-1023
    b4ac:	40a2b03a 	or	r17,r8,r2
    b4b0:	0013883a 	mov	r9,zero
    b4b4:	4d4cb03a 	or	r6,r9,r21
    b4b8:	300c90ba 	slli	r6,r6,2
    b4bc:	02000074 	movhi	r8,1
    b4c0:	422d3704 	addi	r8,r8,-19236
    b4c4:	320d883a 	add	r6,r6,r8
    b4c8:	31800017 	ldw	r6,0(r6)
    b4cc:	a14b883a 	add	r5,r20,r5
    b4d0:	1dacf03a 	xor	r22,r3,r22
    b4d4:	2b000044 	addi	r12,r5,1
    b4d8:	3000683a 	jmp	r6
    b4dc:	0000b718 	cmpnei	zero,zero,732
    b4e0:	0000b704 	movi	zero,732
    b4e4:	0000b704 	movi	zero,732
    b4e8:	0000b6f0 	cmpltui	zero,zero,731
    b4ec:	0000b538 	rdprs	zero,zero,724
    b4f0:	0000b538 	rdprs	zero,zero,724
    b4f4:	0000b6d8 	cmpnei	zero,zero,731
    b4f8:	0000b6f0 	cmpltui	zero,zero,731
    b4fc:	0000b538 	rdprs	zero,zero,724
    b500:	0000b6d8 	cmpnei	zero,zero,731
    b504:	0000b538 	rdprs	zero,zero,724
    b508:	0000b6f0 	cmpltui	zero,zero,731
    b50c:	0000b53c 	xorhi	zero,zero,724
    b510:	0000b53c 	xorhi	zero,zero,724
    b514:	0000b53c 	xorhi	zero,zero,724
    b518:	0000b914 	movui	zero,740
    b51c:	8104b03a 	or	r2,r16,r4
    b520:	10006a1e 	bne	r2,zero,b6cc <__muldf3+0x2e0>
    b524:	05400204 	movi	r21,8
    b528:	0021883a 	mov	r16,zero
    b52c:	0025883a 	mov	r18,zero
    b530:	02800084 	movi	r10,2
    b534:	003fcd06 	br	b46c <__alt_mem_Flash_flash_data+0xf400b46c>
    b538:	b039883a 	mov	fp,r22
    b53c:	00800084 	movi	r2,2
    b540:	50804e1e 	bne	r10,r2,b67c <__muldf3+0x290>
    b544:	e4c0004c 	andi	r19,fp,1
    b548:	0101ffc4 	movi	r4,2047
    b54c:	0021883a 	mov	r16,zero
    b550:	0025883a 	mov	r18,zero
    b554:	2008953a 	slli	r4,r4,20
    b558:	98c03fcc 	andi	r3,r19,255
    b55c:	01400434 	movhi	r5,16
    b560:	297fffc4 	addi	r5,r5,-1
    b564:	180697fa 	slli	r3,r3,31
    b568:	8160703a 	and	r16,r16,r5
    b56c:	8120b03a 	or	r16,r16,r4
    b570:	80c6b03a 	or	r3,r16,r3
    b574:	9005883a 	mov	r2,r18
    b578:	dfc00d17 	ldw	ra,52(sp)
    b57c:	df000c17 	ldw	fp,48(sp)
    b580:	ddc00b17 	ldw	r23,44(sp)
    b584:	dd800a17 	ldw	r22,40(sp)
    b588:	dd400917 	ldw	r21,36(sp)
    b58c:	dd000817 	ldw	r20,32(sp)
    b590:	dcc00717 	ldw	r19,28(sp)
    b594:	dc800617 	ldw	r18,24(sp)
    b598:	dc400517 	ldw	r17,20(sp)
    b59c:	dc000417 	ldw	r16,16(sp)
    b5a0:	dec00e04 	addi	sp,sp,56
    b5a4:	f800283a 	ret
    b5a8:	8104b03a 	or	r2,r16,r4
    b5ac:	10004226 	beq	r2,zero,b6b8 <__muldf3+0x2cc>
    b5b0:	8000f926 	beq	r16,zero,b998 <__muldf3+0x5ac>
    b5b4:	8009883a 	mov	r4,r16
    b5b8:	d9800315 	stw	r6,12(sp)
    b5bc:	d9c00015 	stw	r7,0(sp)
    b5c0:	000c5dc0 	call	c5dc <__clzsi2>
    b5c4:	d9800317 	ldw	r6,12(sp)
    b5c8:	d9c00017 	ldw	r7,0(sp)
    b5cc:	1007883a 	mov	r3,r2
    b5d0:	01000a04 	movi	r4,40
    b5d4:	18bffe04 	addi	r2,r3,-8
    b5d8:	20c9c83a 	sub	r4,r4,r3
    b5dc:	80a0983a 	sll	r16,r16,r2
    b5e0:	8908d83a 	srl	r4,r17,r4
    b5e4:	88a4983a 	sll	r18,r17,r2
    b5e8:	2420b03a 	or	r16,r4,r16
    b5ec:	017f0344 	movi	r5,-1011
    b5f0:	28e9c83a 	sub	r20,r5,r3
    b5f4:	002b883a 	mov	r21,zero
    b5f8:	0015883a 	mov	r10,zero
    b5fc:	003f9b06 	br	b46c <__alt_mem_Flash_flash_data+0xf400b46c>
    b600:	8984b03a 	or	r2,r17,r6
    b604:	10002a1e 	bne	r2,zero,b6b0 <__muldf3+0x2c4>
    b608:	0023883a 	mov	r17,zero
    b60c:	002f883a 	mov	r23,zero
    b610:	02400084 	movi	r9,2
    b614:	003fa706 	br	b4b4 <__alt_mem_Flash_flash_data+0xf400b4b4>
    b618:	8984b03a 	or	r2,r17,r6
    b61c:	10002026 	beq	r2,zero,b6a0 <__muldf3+0x2b4>
    b620:	8800cc26 	beq	r17,zero,b954 <__muldf3+0x568>
    b624:	8809883a 	mov	r4,r17
    b628:	d8c00215 	stw	r3,8(sp)
    b62c:	d9800315 	stw	r6,12(sp)
    b630:	da800015 	stw	r10,0(sp)
    b634:	dac00115 	stw	r11,4(sp)
    b638:	000c5dc0 	call	c5dc <__clzsi2>
    b63c:	d8c00217 	ldw	r3,8(sp)
    b640:	d9800317 	ldw	r6,12(sp)
    b644:	da800017 	ldw	r10,0(sp)
    b648:	dac00117 	ldw	r11,4(sp)
    b64c:	1009883a 	mov	r4,r2
    b650:	01400a04 	movi	r5,40
    b654:	25fffe04 	addi	r23,r4,-8
    b658:	290bc83a 	sub	r5,r5,r4
    b65c:	8dd0983a 	sll	r8,r17,r23
    b660:	314ad83a 	srl	r5,r6,r5
    b664:	35ee983a 	sll	r23,r6,r23
    b668:	2a22b03a 	or	r17,r5,r8
    b66c:	017f0344 	movi	r5,-1011
    b670:	290bc83a 	sub	r5,r5,r4
    b674:	0013883a 	mov	r9,zero
    b678:	003f8e06 	br	b4b4 <__alt_mem_Flash_flash_data+0xf400b4b4>
    b67c:	008000c4 	movi	r2,3
    b680:	50811d26 	beq	r10,r2,baf8 <__muldf3+0x70c>
    b684:	00800044 	movi	r2,1
    b688:	5080e01e 	bne	r10,r2,ba0c <__muldf3+0x620>
    b68c:	e0a6703a 	and	r19,fp,r2
    b690:	0009883a 	mov	r4,zero
    b694:	0021883a 	mov	r16,zero
    b698:	0025883a 	mov	r18,zero
    b69c:	003fad06 	br	b554 <__alt_mem_Flash_flash_data+0xf400b554>
    b6a0:	0023883a 	mov	r17,zero
    b6a4:	002f883a 	mov	r23,zero
    b6a8:	02400044 	movi	r9,1
    b6ac:	003f8106 	br	b4b4 <__alt_mem_Flash_flash_data+0xf400b4b4>
    b6b0:	024000c4 	movi	r9,3
    b6b4:	003f7f06 	br	b4b4 <__alt_mem_Flash_flash_data+0xf400b4b4>
    b6b8:	05400104 	movi	r21,4
    b6bc:	0021883a 	mov	r16,zero
    b6c0:	0025883a 	mov	r18,zero
    b6c4:	02800044 	movi	r10,1
    b6c8:	003f6806 	br	b46c <__alt_mem_Flash_flash_data+0xf400b46c>
    b6cc:	05400304 	movi	r21,12
    b6d0:	028000c4 	movi	r10,3
    b6d4:	003f6506 	br	b46c <__alt_mem_Flash_flash_data+0xf400b46c>
    b6d8:	04000434 	movhi	r16,16
    b6dc:	0027883a 	mov	r19,zero
    b6e0:	843fffc4 	addi	r16,r16,-1
    b6e4:	04bfffc4 	movi	r18,-1
    b6e8:	0101ffc4 	movi	r4,2047
    b6ec:	003f9906 	br	b554 <__alt_mem_Flash_flash_data+0xf400b554>
    b6f0:	8821883a 	mov	r16,r17
    b6f4:	b825883a 	mov	r18,r23
    b6f8:	5839883a 	mov	fp,r11
    b6fc:	4815883a 	mov	r10,r9
    b700:	003f8e06 	br	b53c <__alt_mem_Flash_flash_data+0xf400b53c>
    b704:	8821883a 	mov	r16,r17
    b708:	b825883a 	mov	r18,r23
    b70c:	b039883a 	mov	fp,r22
    b710:	4815883a 	mov	r10,r9
    b714:	003f8906 	br	b53c <__alt_mem_Flash_flash_data+0xf400b53c>
    b718:	b80cd43a 	srli	r6,r23,16
    b71c:	9006d43a 	srli	r3,r18,16
    b720:	90bfffcc 	andi	r2,r18,65535
    b724:	bdffffcc 	andi	r23,r23,65535
    b728:	b891383a 	mul	r8,r23,r2
    b72c:	b8c9383a 	mul	r4,r23,r3
    b730:	309b383a 	mul	r13,r6,r2
    b734:	400ed43a 	srli	r7,r8,16
    b738:	30df383a 	mul	r15,r6,r3
    b73c:	235b883a 	add	r13,r4,r13
    b740:	69db883a 	add	r13,r13,r7
    b744:	6900022e 	bgeu	r13,r4,b750 <__muldf3+0x364>
    b748:	01000074 	movhi	r4,1
    b74c:	791f883a 	add	r15,r15,r4
    b750:	8828d43a 	srli	r20,r17,16
    b754:	8c7fffcc 	andi	r17,r17,65535
    b758:	888f383a 	mul	r7,r17,r2
    b75c:	88d3383a 	mul	r9,r17,r3
    b760:	a0a5383a 	mul	r18,r20,r2
    b764:	3816d43a 	srli	r11,r7,16
    b768:	6814943a 	slli	r10,r13,16
    b76c:	4ca5883a 	add	r18,r9,r18
    b770:	423fffcc 	andi	r8,r8,65535
    b774:	92e5883a 	add	r18,r18,r11
    b778:	6808d43a 	srli	r4,r13,16
    b77c:	5215883a 	add	r10,r10,r8
    b780:	a0c7383a 	mul	r3,r20,r3
    b784:	9240022e 	bgeu	r18,r9,b790 <__muldf3+0x3a4>
    b788:	00800074 	movhi	r2,1
    b78c:	1887883a 	add	r3,r3,r2
    b790:	802ad43a 	srli	r21,r16,16
    b794:	80bfffcc 	andi	r2,r16,65535
    b798:	b893383a 	mul	r9,r23,r2
    b79c:	3091383a 	mul	r8,r6,r2
    b7a0:	bd6f383a 	mul	r23,r23,r21
    b7a4:	9026943a 	slli	r19,r18,16
    b7a8:	481ad43a 	srli	r13,r9,16
    b7ac:	9024d43a 	srli	r18,r18,16
    b7b0:	39ffffcc 	andi	r7,r7,65535
    b7b4:	ba11883a 	add	r8,r23,r8
    b7b8:	99e7883a 	add	r19,r19,r7
    b7bc:	4351883a 	add	r8,r8,r13
    b7c0:	1c97883a 	add	r11,r3,r18
    b7c4:	354d383a 	mul	r6,r6,r21
    b7c8:	9925883a 	add	r18,r19,r4
    b7cc:	45c0022e 	bgeu	r8,r23,b7d8 <__muldf3+0x3ec>
    b7d0:	00c00074 	movhi	r3,1
    b7d4:	30cd883a 	add	r6,r6,r3
    b7d8:	8889383a 	mul	r4,r17,r2
    b7dc:	8d63383a 	mul	r17,r17,r21
    b7e0:	a085383a 	mul	r2,r20,r2
    b7e4:	200ed43a 	srli	r7,r4,16
    b7e8:	401cd43a 	srli	r14,r8,16
    b7ec:	401a943a 	slli	r13,r8,16
    b7f0:	8885883a 	add	r2,r17,r2
    b7f4:	4a3fffcc 	andi	r8,r9,65535
    b7f8:	11c5883a 	add	r2,r2,r7
    b7fc:	339d883a 	add	r14,r6,r14
    b800:	6a11883a 	add	r8,r13,r8
    b804:	a561383a 	mul	r16,r20,r21
    b808:	1440022e 	bgeu	r2,r17,b814 <__muldf3+0x428>
    b80c:	00c00074 	movhi	r3,1
    b810:	80e1883a 	add	r16,r16,r3
    b814:	1006943a 	slli	r3,r2,16
    b818:	213fffcc 	andi	r4,r4,65535
    b81c:	93db883a 	add	r13,r18,r15
    b820:	1909883a 	add	r4,r3,r4
    b824:	22c7883a 	add	r3,r4,r11
    b828:	6cd3803a 	cmpltu	r9,r13,r19
    b82c:	6a09883a 	add	r4,r13,r8
    b830:	1a5b883a 	add	r13,r3,r9
    b834:	2211803a 	cmpltu	r8,r4,r8
    b838:	734d883a 	add	r6,r14,r13
    b83c:	100ed43a 	srli	r7,r2,16
    b840:	6a53803a 	cmpltu	r9,r13,r9
    b844:	3205883a 	add	r2,r6,r8
    b848:	1ac7803a 	cmpltu	r3,r3,r11
    b84c:	1211803a 	cmpltu	r8,r2,r8
    b850:	48c6b03a 	or	r3,r9,r3
    b854:	338d803a 	cmpltu	r6,r6,r14
    b858:	19c7883a 	add	r3,r3,r7
    b85c:	418cb03a 	or	r6,r8,r6
    b860:	1987883a 	add	r3,r3,r6
    b864:	2024927a 	slli	r18,r4,9
    b868:	1c07883a 	add	r3,r3,r16
    b86c:	1806927a 	slli	r3,r3,9
    b870:	1020d5fa 	srli	r16,r2,23
    b874:	2008d5fa 	srli	r4,r4,23
    b878:	9294b03a 	or	r10,r18,r10
    b87c:	1004927a 	slli	r2,r2,9
    b880:	5024c03a 	cmpne	r18,r10,zero
    b884:	1c20b03a 	or	r16,r3,r16
    b888:	9108b03a 	or	r4,r18,r4
    b88c:	80c0402c 	andhi	r3,r16,256
    b890:	20a4b03a 	or	r18,r4,r2
    b894:	18000726 	beq	r3,zero,b8b4 <__muldf3+0x4c8>
    b898:	9006d07a 	srli	r3,r18,1
    b89c:	800897fa 	slli	r4,r16,31
    b8a0:	9080004c 	andi	r2,r18,1
    b8a4:	8020d07a 	srli	r16,r16,1
    b8a8:	10c4b03a 	or	r2,r2,r3
    b8ac:	1124b03a 	or	r18,r2,r4
    b8b0:	600b883a 	mov	r5,r12
    b8b4:	2900ffc4 	addi	r4,r5,1023
    b8b8:	01004b0e 	bge	zero,r4,b9e8 <__muldf3+0x5fc>
    b8bc:	908001cc 	andi	r2,r18,7
    b8c0:	10000726 	beq	r2,zero,b8e0 <__muldf3+0x4f4>
    b8c4:	90c003cc 	andi	r3,r18,15
    b8c8:	00800104 	movi	r2,4
    b8cc:	18800426 	beq	r3,r2,b8e0 <__muldf3+0x4f4>
    b8d0:	9087883a 	add	r3,r18,r2
    b8d4:	1c85803a 	cmpltu	r2,r3,r18
    b8d8:	80a1883a 	add	r16,r16,r2
    b8dc:	1825883a 	mov	r18,r3
    b8e0:	8080402c 	andhi	r2,r16,256
    b8e4:	10000426 	beq	r2,zero,b8f8 <__muldf3+0x50c>
    b8e8:	00bfc034 	movhi	r2,65280
    b8ec:	10bfffc4 	addi	r2,r2,-1
    b8f0:	29010004 	addi	r4,r5,1024
    b8f4:	80a0703a 	and	r16,r16,r2
    b8f8:	0081ff84 	movi	r2,2046
    b8fc:	1100320e 	bge	r2,r4,b9c8 <__muldf3+0x5dc>
    b900:	b4c0004c 	andi	r19,r22,1
    b904:	0101ffc4 	movi	r4,2047
    b908:	0021883a 	mov	r16,zero
    b90c:	0025883a 	mov	r18,zero
    b910:	003f1006 	br	b554 <__alt_mem_Flash_flash_data+0xf400b554>
    b914:	8080022c 	andhi	r2,r16,8
    b918:	10000926 	beq	r2,zero,b940 <__muldf3+0x554>
    b91c:	8880022c 	andhi	r2,r17,8
    b920:	1000071e 	bne	r2,zero,b940 <__muldf3+0x554>
    b924:	00800434 	movhi	r2,16
    b928:	8c000234 	orhi	r16,r17,8
    b92c:	10bfffc4 	addi	r2,r2,-1
    b930:	1827883a 	mov	r19,r3
    b934:	80a0703a 	and	r16,r16,r2
    b938:	b825883a 	mov	r18,r23
    b93c:	003f6a06 	br	b6e8 <__alt_mem_Flash_flash_data+0xf400b6e8>
    b940:	00800434 	movhi	r2,16
    b944:	84000234 	orhi	r16,r16,8
    b948:	10bfffc4 	addi	r2,r2,-1
    b94c:	80a0703a 	and	r16,r16,r2
    b950:	003f6506 	br	b6e8 <__alt_mem_Flash_flash_data+0xf400b6e8>
    b954:	3009883a 	mov	r4,r6
    b958:	d8c00215 	stw	r3,8(sp)
    b95c:	d9800315 	stw	r6,12(sp)
    b960:	da800015 	stw	r10,0(sp)
    b964:	dac00115 	stw	r11,4(sp)
    b968:	000c5dc0 	call	c5dc <__clzsi2>
    b96c:	11000804 	addi	r4,r2,32
    b970:	014009c4 	movi	r5,39
    b974:	d8c00217 	ldw	r3,8(sp)
    b978:	d9800317 	ldw	r6,12(sp)
    b97c:	da800017 	ldw	r10,0(sp)
    b980:	dac00117 	ldw	r11,4(sp)
    b984:	293f320e 	bge	r5,r4,b650 <__alt_mem_Flash_flash_data+0xf400b650>
    b988:	10bffe04 	addi	r2,r2,-8
    b98c:	b8a2983a 	sll	r17,r23,r2
    b990:	002f883a 	mov	r23,zero
    b994:	003f3506 	br	b66c <__alt_mem_Flash_flash_data+0xf400b66c>
    b998:	d9800315 	stw	r6,12(sp)
    b99c:	d9c00015 	stw	r7,0(sp)
    b9a0:	000c5dc0 	call	c5dc <__clzsi2>
    b9a4:	10c00804 	addi	r3,r2,32
    b9a8:	010009c4 	movi	r4,39
    b9ac:	d9800317 	ldw	r6,12(sp)
    b9b0:	d9c00017 	ldw	r7,0(sp)
    b9b4:	20ff060e 	bge	r4,r3,b5d0 <__alt_mem_Flash_flash_data+0xf400b5d0>
    b9b8:	10bffe04 	addi	r2,r2,-8
    b9bc:	88a0983a 	sll	r16,r17,r2
    b9c0:	0025883a 	mov	r18,zero
    b9c4:	003f0906 	br	b5ec <__alt_mem_Flash_flash_data+0xf400b5ec>
    b9c8:	9004d0fa 	srli	r2,r18,3
    b9cc:	8024977a 	slli	r18,r16,29
    b9d0:	8020927a 	slli	r16,r16,9
    b9d4:	2101ffcc 	andi	r4,r4,2047
    b9d8:	90a4b03a 	or	r18,r18,r2
    b9dc:	8020d33a 	srli	r16,r16,12
    b9e0:	b4c0004c 	andi	r19,r22,1
    b9e4:	003edb06 	br	b554 <__alt_mem_Flash_flash_data+0xf400b554>
    b9e8:	00ff0084 	movi	r3,-1022
    b9ec:	1947c83a 	sub	r3,r3,r5
    b9f0:	00800e04 	movi	r2,56
    b9f4:	10c0080e 	bge	r2,r3,ba18 <__muldf3+0x62c>
    b9f8:	b4c0004c 	andi	r19,r22,1
    b9fc:	0009883a 	mov	r4,zero
    ba00:	0021883a 	mov	r16,zero
    ba04:	0025883a 	mov	r18,zero
    ba08:	003ed206 	br	b554 <__alt_mem_Flash_flash_data+0xf400b554>
    ba0c:	600b883a 	mov	r5,r12
    ba10:	e02d883a 	mov	r22,fp
    ba14:	003fa706 	br	b8b4 <__alt_mem_Flash_flash_data+0xf400b8b4>
    ba18:	008007c4 	movi	r2,31
    ba1c:	10c01816 	blt	r2,r3,ba80 <__muldf3+0x694>
    ba20:	29410784 	addi	r5,r5,1054
    ba24:	8144983a 	sll	r2,r16,r5
    ba28:	90c8d83a 	srl	r4,r18,r3
    ba2c:	914a983a 	sll	r5,r18,r5
    ba30:	80c6d83a 	srl	r3,r16,r3
    ba34:	2088b03a 	or	r4,r4,r2
    ba38:	2804c03a 	cmpne	r2,r5,zero
    ba3c:	2084b03a 	or	r2,r4,r2
    ba40:	110001cc 	andi	r4,r2,7
    ba44:	20000726 	beq	r4,zero,ba64 <__muldf3+0x678>
    ba48:	114003cc 	andi	r5,r2,15
    ba4c:	01000104 	movi	r4,4
    ba50:	29000426 	beq	r5,r4,ba64 <__muldf3+0x678>
    ba54:	11000104 	addi	r4,r2,4
    ba58:	2085803a 	cmpltu	r2,r4,r2
    ba5c:	1887883a 	add	r3,r3,r2
    ba60:	2005883a 	mov	r2,r4
    ba64:	1900202c 	andhi	r4,r3,128
    ba68:	20001826 	beq	r4,zero,bacc <__muldf3+0x6e0>
    ba6c:	b4c0004c 	andi	r19,r22,1
    ba70:	01000044 	movi	r4,1
    ba74:	0021883a 	mov	r16,zero
    ba78:	0025883a 	mov	r18,zero
    ba7c:	003eb506 	br	b554 <__alt_mem_Flash_flash_data+0xf400b554>
    ba80:	00bef884 	movi	r2,-1054
    ba84:	1145c83a 	sub	r2,r2,r5
    ba88:	8088d83a 	srl	r4,r16,r2
    ba8c:	00800804 	movi	r2,32
    ba90:	18801726 	beq	r3,r2,baf0 <__muldf3+0x704>
    ba94:	28810f84 	addi	r2,r5,1086
    ba98:	8084983a 	sll	r2,r16,r2
    ba9c:	1484b03a 	or	r2,r2,r18
    baa0:	1004c03a 	cmpne	r2,r2,zero
    baa4:	1104b03a 	or	r2,r2,r4
    baa8:	10c001cc 	andi	r3,r2,7
    baac:	18000b1e 	bne	r3,zero,badc <__muldf3+0x6f0>
    bab0:	0021883a 	mov	r16,zero
    bab4:	1004d0fa 	srli	r2,r2,3
    bab8:	b4c0004c 	andi	r19,r22,1
    babc:	0009883a 	mov	r4,zero
    bac0:	10e4b03a 	or	r18,r2,r3
    bac4:	003ea306 	br	b554 <__alt_mem_Flash_flash_data+0xf400b554>
    bac8:	0007883a 	mov	r3,zero
    bacc:	1820927a 	slli	r16,r3,9
    bad0:	1806977a 	slli	r3,r3,29
    bad4:	8020d33a 	srli	r16,r16,12
    bad8:	003ff606 	br	bab4 <__alt_mem_Flash_flash_data+0xf400bab4>
    badc:	110003cc 	andi	r4,r2,15
    bae0:	00c00104 	movi	r3,4
    bae4:	20fff826 	beq	r4,r3,bac8 <__alt_mem_Flash_flash_data+0xf400bac8>
    bae8:	0007883a 	mov	r3,zero
    baec:	003fd906 	br	ba54 <__alt_mem_Flash_flash_data+0xf400ba54>
    baf0:	0005883a 	mov	r2,zero
    baf4:	003fe906 	br	ba9c <__alt_mem_Flash_flash_data+0xf400ba9c>
    baf8:	00800434 	movhi	r2,16
    bafc:	84000234 	orhi	r16,r16,8
    bb00:	10bfffc4 	addi	r2,r2,-1
    bb04:	e4c0004c 	andi	r19,fp,1
    bb08:	80a0703a 	and	r16,r16,r2
    bb0c:	003ef606 	br	b6e8 <__alt_mem_Flash_flash_data+0xf400b6e8>

0000bb10 <__subdf3>:
    bb10:	00c00434 	movhi	r3,16
    bb14:	18ffffc4 	addi	r3,r3,-1
    bb18:	defffb04 	addi	sp,sp,-20
    bb1c:	28d2703a 	and	r9,r5,r3
    bb20:	3814d53a 	srli	r10,r7,20
    bb24:	38c6703a 	and	r3,r7,r3
    bb28:	3004d77a 	srli	r2,r6,29
    bb2c:	dc800215 	stw	r18,8(sp)
    bb30:	dc000015 	stw	r16,0(sp)
    bb34:	2824d7fa 	srli	r18,r5,31
    bb38:	2820d53a 	srli	r16,r5,20
    bb3c:	481290fa 	slli	r9,r9,3
    bb40:	200ad77a 	srli	r5,r4,29
    bb44:	180690fa 	slli	r3,r3,3
    bb48:	dc400115 	stw	r17,4(sp)
    bb4c:	dfc00415 	stw	ra,16(sp)
    bb50:	202290fa 	slli	r17,r4,3
    bb54:	dcc00315 	stw	r19,12(sp)
    bb58:	5281ffcc 	andi	r10,r10,2047
    bb5c:	0101ffc4 	movi	r4,2047
    bb60:	9011883a 	mov	r8,r18
    bb64:	8401ffcc 	andi	r16,r16,2047
    bb68:	94803fcc 	andi	r18,r18,255
    bb6c:	494ab03a 	or	r5,r9,r5
    bb70:	380ed7fa 	srli	r7,r7,31
    bb74:	1886b03a 	or	r3,r3,r2
    bb78:	300c90fa 	slli	r6,r6,3
    bb7c:	51009026 	beq	r10,r4,bdc0 <__subdf3+0x2b0>
    bb80:	39c0005c 	xori	r7,r7,1
    bb84:	8285c83a 	sub	r2,r16,r10
    bb88:	91c06f26 	beq	r18,r7,bd48 <__subdf3+0x238>
    bb8c:	0080b10e 	bge	zero,r2,be54 <__subdf3+0x344>
    bb90:	50002a1e 	bne	r10,zero,bc3c <__subdf3+0x12c>
    bb94:	1988b03a 	or	r4,r3,r6
    bb98:	2000941e 	bne	r4,zero,bdec <__subdf3+0x2dc>
    bb9c:	888001cc 	andi	r2,r17,7
    bba0:	10005b26 	beq	r2,zero,bd10 <__subdf3+0x200>
    bba4:	88c003cc 	andi	r3,r17,15
    bba8:	00800104 	movi	r2,4
    bbac:	18805826 	beq	r3,r2,bd10 <__subdf3+0x200>
    bbb0:	88c00104 	addi	r3,r17,4
    bbb4:	1c63803a 	cmpltu	r17,r3,r17
    bbb8:	2c4b883a 	add	r5,r5,r17
    bbbc:	2880202c 	andhi	r2,r5,128
    bbc0:	9200004c 	andi	r8,r18,1
    bbc4:	1823883a 	mov	r17,r3
    bbc8:	10005426 	beq	r2,zero,bd1c <__subdf3+0x20c>
    bbcc:	84000044 	addi	r16,r16,1
    bbd0:	0081ffc4 	movi	r2,2047
    bbd4:	8080bf26 	beq	r16,r2,bed4 <__subdf3+0x3c4>
    bbd8:	013fe034 	movhi	r4,65408
    bbdc:	213fffc4 	addi	r4,r4,-1
    bbe0:	290a703a 	and	r5,r5,r4
    bbe4:	2804977a 	slli	r2,r5,29
    bbe8:	280a927a 	slli	r5,r5,9
    bbec:	8822d0fa 	srli	r17,r17,3
    bbf0:	8401ffcc 	andi	r16,r16,2047
    bbf4:	2808d33a 	srli	r4,r5,12
    bbf8:	1444b03a 	or	r2,r2,r17
    bbfc:	8401ffcc 	andi	r16,r16,2047
    bc00:	800a953a 	slli	r5,r16,20
    bc04:	40c03fcc 	andi	r3,r8,255
    bc08:	04000434 	movhi	r16,16
    bc0c:	180697fa 	slli	r3,r3,31
    bc10:	843fffc4 	addi	r16,r16,-1
    bc14:	2420703a 	and	r16,r4,r16
    bc18:	8160b03a 	or	r16,r16,r5
    bc1c:	80c6b03a 	or	r3,r16,r3
    bc20:	dfc00417 	ldw	ra,16(sp)
    bc24:	dcc00317 	ldw	r19,12(sp)
    bc28:	dc800217 	ldw	r18,8(sp)
    bc2c:	dc400117 	ldw	r17,4(sp)
    bc30:	dc000017 	ldw	r16,0(sp)
    bc34:	dec00504 	addi	sp,sp,20
    bc38:	f800283a 	ret
    bc3c:	0101ffc4 	movi	r4,2047
    bc40:	813fd626 	beq	r16,r4,bb9c <__alt_mem_Flash_flash_data+0xf400bb9c>
    bc44:	18c02034 	orhi	r3,r3,128
    bc48:	01000e04 	movi	r4,56
    bc4c:	2080a416 	blt	r4,r2,bee0 <__subdf3+0x3d0>
    bc50:	010007c4 	movi	r4,31
    bc54:	2080c716 	blt	r4,r2,bf74 <__subdf3+0x464>
    bc58:	01000804 	movi	r4,32
    bc5c:	2089c83a 	sub	r4,r4,r2
    bc60:	1910983a 	sll	r8,r3,r4
    bc64:	308ed83a 	srl	r7,r6,r2
    bc68:	3108983a 	sll	r4,r6,r4
    bc6c:	1884d83a 	srl	r2,r3,r2
    bc70:	41ccb03a 	or	r6,r8,r7
    bc74:	2008c03a 	cmpne	r4,r4,zero
    bc78:	310cb03a 	or	r6,r6,r4
    bc7c:	898dc83a 	sub	r6,r17,r6
    bc80:	89a3803a 	cmpltu	r17,r17,r6
    bc84:	288bc83a 	sub	r5,r5,r2
    bc88:	2c4bc83a 	sub	r5,r5,r17
    bc8c:	3023883a 	mov	r17,r6
    bc90:	2880202c 	andhi	r2,r5,128
    bc94:	10006b26 	beq	r2,zero,be44 <__subdf3+0x334>
    bc98:	04c02034 	movhi	r19,128
    bc9c:	9cffffc4 	addi	r19,r19,-1
    bca0:	2ce6703a 	and	r19,r5,r19
    bca4:	98007c26 	beq	r19,zero,be98 <__subdf3+0x388>
    bca8:	9809883a 	mov	r4,r19
    bcac:	000c5dc0 	call	c5dc <__clzsi2>
    bcb0:	10fffe04 	addi	r3,r2,-8
    bcb4:	010007c4 	movi	r4,31
    bcb8:	20c07d16 	blt	r4,r3,beb0 <__subdf3+0x3a0>
    bcbc:	01400a04 	movi	r5,40
    bcc0:	2885c83a 	sub	r2,r5,r2
    bcc4:	888ad83a 	srl	r5,r17,r2
    bcc8:	98e6983a 	sll	r19,r19,r3
    bccc:	88e2983a 	sll	r17,r17,r3
    bcd0:	2ce6b03a 	or	r19,r5,r19
    bcd4:	1c007a16 	blt	r3,r16,bec0 <__subdf3+0x3b0>
    bcd8:	1c21c83a 	sub	r16,r3,r16
    bcdc:	81400044 	addi	r5,r16,1
    bce0:	00c007c4 	movi	r3,31
    bce4:	19409616 	blt	r3,r5,bf40 <__subdf3+0x430>
    bce8:	1c21c83a 	sub	r16,r3,r16
    bcec:	8c08983a 	sll	r4,r17,r16
    bcf0:	8946d83a 	srl	r3,r17,r5
    bcf4:	9c20983a 	sll	r16,r19,r16
    bcf8:	2008c03a 	cmpne	r4,r4,zero
    bcfc:	994ad83a 	srl	r5,r19,r5
    bd00:	1c06b03a 	or	r3,r3,r16
    bd04:	1922b03a 	or	r17,r3,r4
    bd08:	0021883a 	mov	r16,zero
    bd0c:	003fa306 	br	bb9c <__alt_mem_Flash_flash_data+0xf400bb9c>
    bd10:	2880202c 	andhi	r2,r5,128
    bd14:	9200004c 	andi	r8,r18,1
    bd18:	103fac1e 	bne	r2,zero,bbcc <__alt_mem_Flash_flash_data+0xf400bbcc>
    bd1c:	2804977a 	slli	r2,r5,29
    bd20:	8822d0fa 	srli	r17,r17,3
    bd24:	00c1ffc4 	movi	r3,2047
    bd28:	280ad0fa 	srli	r5,r5,3
    bd2c:	1444b03a 	or	r2,r2,r17
    bd30:	80c02726 	beq	r16,r3,bdd0 <__subdf3+0x2c0>
    bd34:	01000434 	movhi	r4,16
    bd38:	213fffc4 	addi	r4,r4,-1
    bd3c:	80e0703a 	and	r16,r16,r3
    bd40:	2908703a 	and	r4,r5,r4
    bd44:	003fad06 	br	bbfc <__alt_mem_Flash_flash_data+0xf400bbfc>
    bd48:	0080690e 	bge	zero,r2,bef0 <__subdf3+0x3e0>
    bd4c:	50002f26 	beq	r10,zero,be0c <__subdf3+0x2fc>
    bd50:	0101ffc4 	movi	r4,2047
    bd54:	813f9126 	beq	r16,r4,bb9c <__alt_mem_Flash_flash_data+0xf400bb9c>
    bd58:	18c02034 	orhi	r3,r3,128
    bd5c:	01000e04 	movi	r4,56
    bd60:	2080b00e 	bge	r4,r2,c024 <__subdf3+0x514>
    bd64:	198cb03a 	or	r6,r3,r6
    bd68:	300ec03a 	cmpne	r7,r6,zero
    bd6c:	0005883a 	mov	r2,zero
    bd70:	3c4f883a 	add	r7,r7,r17
    bd74:	3c63803a 	cmpltu	r17,r7,r17
    bd78:	114b883a 	add	r5,r2,r5
    bd7c:	2c4b883a 	add	r5,r5,r17
    bd80:	3823883a 	mov	r17,r7
    bd84:	2880202c 	andhi	r2,r5,128
    bd88:	10002e26 	beq	r2,zero,be44 <__subdf3+0x334>
    bd8c:	84000044 	addi	r16,r16,1
    bd90:	0081ffc4 	movi	r2,2047
    bd94:	8080de26 	beq	r16,r2,c110 <__subdf3+0x600>
    bd98:	00bfe034 	movhi	r2,65408
    bd9c:	10bfffc4 	addi	r2,r2,-1
    bda0:	288a703a 	and	r5,r5,r2
    bda4:	880cd07a 	srli	r6,r17,1
    bda8:	280897fa 	slli	r4,r5,31
    bdac:	88c0004c 	andi	r3,r17,1
    bdb0:	30e2b03a 	or	r17,r6,r3
    bdb4:	280ad07a 	srli	r5,r5,1
    bdb8:	8922b03a 	or	r17,r17,r4
    bdbc:	003f7706 	br	bb9c <__alt_mem_Flash_flash_data+0xf400bb9c>
    bdc0:	1984b03a 	or	r2,r3,r6
    bdc4:	103f6e26 	beq	r2,zero,bb80 <__alt_mem_Flash_flash_data+0xf400bb80>
    bdc8:	39c03fcc 	andi	r7,r7,255
    bdcc:	003f6d06 	br	bb84 <__alt_mem_Flash_flash_data+0xf400bb84>
    bdd0:	1146b03a 	or	r3,r2,r5
    bdd4:	18003f26 	beq	r3,zero,bed4 <__subdf3+0x3c4>
    bdd8:	00c00434 	movhi	r3,16
    bddc:	29000234 	orhi	r4,r5,8
    bde0:	18ffffc4 	addi	r3,r3,-1
    bde4:	20c8703a 	and	r4,r4,r3
    bde8:	003f8406 	br	bbfc <__alt_mem_Flash_flash_data+0xf400bbfc>
    bdec:	10bfffc4 	addi	r2,r2,-1
    bdf0:	1000501e 	bne	r2,zero,bf34 <__subdf3+0x424>
    bdf4:	898fc83a 	sub	r7,r17,r6
    bdf8:	89e3803a 	cmpltu	r17,r17,r7
    bdfc:	28cbc83a 	sub	r5,r5,r3
    be00:	2c4bc83a 	sub	r5,r5,r17
    be04:	3823883a 	mov	r17,r7
    be08:	003fa106 	br	bc90 <__alt_mem_Flash_flash_data+0xf400bc90>
    be0c:	1988b03a 	or	r4,r3,r6
    be10:	203f6226 	beq	r4,zero,bb9c <__alt_mem_Flash_flash_data+0xf400bb9c>
    be14:	10bfffc4 	addi	r2,r2,-1
    be18:	10009b1e 	bne	r2,zero,c088 <__subdf3+0x578>
    be1c:	344d883a 	add	r6,r6,r17
    be20:	3463803a 	cmpltu	r17,r6,r17
    be24:	194b883a 	add	r5,r3,r5
    be28:	2c4b883a 	add	r5,r5,r17
    be2c:	3023883a 	mov	r17,r6
    be30:	003fd406 	br	bd84 <__alt_mem_Flash_flash_data+0xf400bd84>
    be34:	1106b03a 	or	r3,r2,r4
    be38:	1800b426 	beq	r3,zero,c10c <__subdf3+0x5fc>
    be3c:	100b883a 	mov	r5,r2
    be40:	2023883a 	mov	r17,r4
    be44:	888001cc 	andi	r2,r17,7
    be48:	103f561e 	bne	r2,zero,bba4 <__alt_mem_Flash_flash_data+0xf400bba4>
    be4c:	9200004c 	andi	r8,r18,1
    be50:	003fb206 	br	bd1c <__alt_mem_Flash_flash_data+0xf400bd1c>
    be54:	1000531e 	bne	r2,zero,bfa4 <__subdf3+0x494>
    be58:	80800044 	addi	r2,r16,1
    be5c:	1081ffcc 	andi	r2,r2,2047
    be60:	01000044 	movi	r4,1
    be64:	2080a00e 	bge	r4,r2,c0e8 <__subdf3+0x5d8>
    be68:	8985c83a 	sub	r2,r17,r6
    be6c:	8889803a 	cmpltu	r4,r17,r2
    be70:	28e7c83a 	sub	r19,r5,r3
    be74:	9927c83a 	sub	r19,r19,r4
    be78:	9900202c 	andhi	r4,r19,128
    be7c:	20006226 	beq	r4,zero,c008 <__subdf3+0x4f8>
    be80:	3463c83a 	sub	r17,r6,r17
    be84:	194bc83a 	sub	r5,r3,r5
    be88:	344d803a 	cmpltu	r6,r6,r17
    be8c:	29a7c83a 	sub	r19,r5,r6
    be90:	3825883a 	mov	r18,r7
    be94:	983f841e 	bne	r19,zero,bca8 <__alt_mem_Flash_flash_data+0xf400bca8>
    be98:	8809883a 	mov	r4,r17
    be9c:	000c5dc0 	call	c5dc <__clzsi2>
    bea0:	10800804 	addi	r2,r2,32
    bea4:	10fffe04 	addi	r3,r2,-8
    bea8:	010007c4 	movi	r4,31
    beac:	20ff830e 	bge	r4,r3,bcbc <__alt_mem_Flash_flash_data+0xf400bcbc>
    beb0:	14fff604 	addi	r19,r2,-40
    beb4:	8ce6983a 	sll	r19,r17,r19
    beb8:	0023883a 	mov	r17,zero
    bebc:	1c3f860e 	bge	r3,r16,bcd8 <__alt_mem_Flash_flash_data+0xf400bcd8>
    bec0:	017fe034 	movhi	r5,65408
    bec4:	297fffc4 	addi	r5,r5,-1
    bec8:	80e1c83a 	sub	r16,r16,r3
    becc:	994a703a 	and	r5,r19,r5
    bed0:	003f3206 	br	bb9c <__alt_mem_Flash_flash_data+0xf400bb9c>
    bed4:	0009883a 	mov	r4,zero
    bed8:	0005883a 	mov	r2,zero
    bedc:	003f4706 	br	bbfc <__alt_mem_Flash_flash_data+0xf400bbfc>
    bee0:	198cb03a 	or	r6,r3,r6
    bee4:	300cc03a 	cmpne	r6,r6,zero
    bee8:	0005883a 	mov	r2,zero
    beec:	003f6306 	br	bc7c <__alt_mem_Flash_flash_data+0xf400bc7c>
    bef0:	10009d1e 	bne	r2,zero,c168 <__subdf3+0x658>
    bef4:	81c00044 	addi	r7,r16,1
    bef8:	3881ffcc 	andi	r2,r7,2047
    befc:	02400044 	movi	r9,1
    bf00:	4880680e 	bge	r9,r2,c0a4 <__subdf3+0x594>
    bf04:	0081ffc4 	movi	r2,2047
    bf08:	3880ae26 	beq	r7,r2,c1c4 <__subdf3+0x6b4>
    bf0c:	344d883a 	add	r6,r6,r17
    bf10:	3463803a 	cmpltu	r17,r6,r17
    bf14:	194b883a 	add	r5,r3,r5
    bf18:	2c4b883a 	add	r5,r5,r17
    bf1c:	282297fa 	slli	r17,r5,31
    bf20:	300cd07a 	srli	r6,r6,1
    bf24:	280ad07a 	srli	r5,r5,1
    bf28:	3821883a 	mov	r16,r7
    bf2c:	89a2b03a 	or	r17,r17,r6
    bf30:	003f1a06 	br	bb9c <__alt_mem_Flash_flash_data+0xf400bb9c>
    bf34:	0101ffc4 	movi	r4,2047
    bf38:	813f431e 	bne	r16,r4,bc48 <__alt_mem_Flash_flash_data+0xf400bc48>
    bf3c:	003f1706 	br	bb9c <__alt_mem_Flash_flash_data+0xf400bb9c>
    bf40:	80bff844 	addi	r2,r16,-31
    bf44:	00c00804 	movi	r3,32
    bf48:	9884d83a 	srl	r2,r19,r2
    bf4c:	28c05126 	beq	r5,r3,c094 <__subdf3+0x584>
    bf50:	00c00fc4 	movi	r3,63
    bf54:	1c21c83a 	sub	r16,r3,r16
    bf58:	9c26983a 	sll	r19,r19,r16
    bf5c:	9c62b03a 	or	r17,r19,r17
    bf60:	8822c03a 	cmpne	r17,r17,zero
    bf64:	88a2b03a 	or	r17,r17,r2
    bf68:	000b883a 	mov	r5,zero
    bf6c:	0021883a 	mov	r16,zero
    bf70:	003fb406 	br	be44 <__alt_mem_Flash_flash_data+0xf400be44>
    bf74:	113ff804 	addi	r4,r2,-32
    bf78:	01c00804 	movi	r7,32
    bf7c:	1908d83a 	srl	r4,r3,r4
    bf80:	11c04626 	beq	r2,r7,c09c <__subdf3+0x58c>
    bf84:	01c01004 	movi	r7,64
    bf88:	3885c83a 	sub	r2,r7,r2
    bf8c:	1884983a 	sll	r2,r3,r2
    bf90:	118cb03a 	or	r6,r2,r6
    bf94:	300cc03a 	cmpne	r6,r6,zero
    bf98:	310cb03a 	or	r6,r6,r4
    bf9c:	0005883a 	mov	r2,zero
    bfa0:	003f3606 	br	bc7c <__alt_mem_Flash_flash_data+0xf400bc7c>
    bfa4:	80002b26 	beq	r16,zero,c054 <__subdf3+0x544>
    bfa8:	0101ffc4 	movi	r4,2047
    bfac:	51006926 	beq	r10,r4,c154 <__subdf3+0x644>
    bfb0:	0085c83a 	sub	r2,zero,r2
    bfb4:	29402034 	orhi	r5,r5,128
    bfb8:	01000e04 	movi	r4,56
    bfbc:	20807d16 	blt	r4,r2,c1b4 <__subdf3+0x6a4>
    bfc0:	010007c4 	movi	r4,31
    bfc4:	2080d916 	blt	r4,r2,c32c <__subdf3+0x81c>
    bfc8:	01000804 	movi	r4,32
    bfcc:	2089c83a 	sub	r4,r4,r2
    bfd0:	2912983a 	sll	r9,r5,r4
    bfd4:	8890d83a 	srl	r8,r17,r2
    bfd8:	8908983a 	sll	r4,r17,r4
    bfdc:	2884d83a 	srl	r2,r5,r2
    bfe0:	4a22b03a 	or	r17,r9,r8
    bfe4:	2008c03a 	cmpne	r4,r4,zero
    bfe8:	8922b03a 	or	r17,r17,r4
    bfec:	3463c83a 	sub	r17,r6,r17
    bff0:	1885c83a 	sub	r2,r3,r2
    bff4:	344d803a 	cmpltu	r6,r6,r17
    bff8:	118bc83a 	sub	r5,r2,r6
    bffc:	5021883a 	mov	r16,r10
    c000:	3825883a 	mov	r18,r7
    c004:	003f2206 	br	bc90 <__alt_mem_Flash_flash_data+0xf400bc90>
    c008:	9886b03a 	or	r3,r19,r2
    c00c:	18001c1e 	bne	r3,zero,c080 <__subdf3+0x570>
    c010:	0011883a 	mov	r8,zero
    c014:	000b883a 	mov	r5,zero
    c018:	0023883a 	mov	r17,zero
    c01c:	0021883a 	mov	r16,zero
    c020:	003f3e06 	br	bd1c <__alt_mem_Flash_flash_data+0xf400bd1c>
    c024:	010007c4 	movi	r4,31
    c028:	20803c16 	blt	r4,r2,c11c <__subdf3+0x60c>
    c02c:	01000804 	movi	r4,32
    c030:	2089c83a 	sub	r4,r4,r2
    c034:	1912983a 	sll	r9,r3,r4
    c038:	308ed83a 	srl	r7,r6,r2
    c03c:	3108983a 	sll	r4,r6,r4
    c040:	1884d83a 	srl	r2,r3,r2
    c044:	49ceb03a 	or	r7,r9,r7
    c048:	2008c03a 	cmpne	r4,r4,zero
    c04c:	390eb03a 	or	r7,r7,r4
    c050:	003f4706 	br	bd70 <__alt_mem_Flash_flash_data+0xf400bd70>
    c054:	2c48b03a 	or	r4,r5,r17
    c058:	20003e26 	beq	r4,zero,c154 <__subdf3+0x644>
    c05c:	0084303a 	nor	r2,zero,r2
    c060:	10003a1e 	bne	r2,zero,c14c <__subdf3+0x63c>
    c064:	3463c83a 	sub	r17,r6,r17
    c068:	194bc83a 	sub	r5,r3,r5
    c06c:	344d803a 	cmpltu	r6,r6,r17
    c070:	298bc83a 	sub	r5,r5,r6
    c074:	5021883a 	mov	r16,r10
    c078:	3825883a 	mov	r18,r7
    c07c:	003f0406 	br	bc90 <__alt_mem_Flash_flash_data+0xf400bc90>
    c080:	1023883a 	mov	r17,r2
    c084:	003f0706 	br	bca4 <__alt_mem_Flash_flash_data+0xf400bca4>
    c088:	0101ffc4 	movi	r4,2047
    c08c:	813f331e 	bne	r16,r4,bd5c <__alt_mem_Flash_flash_data+0xf400bd5c>
    c090:	003ec206 	br	bb9c <__alt_mem_Flash_flash_data+0xf400bb9c>
    c094:	0027883a 	mov	r19,zero
    c098:	003fb006 	br	bf5c <__alt_mem_Flash_flash_data+0xf400bf5c>
    c09c:	0005883a 	mov	r2,zero
    c0a0:	003fbb06 	br	bf90 <__alt_mem_Flash_flash_data+0xf400bf90>
    c0a4:	2c44b03a 	or	r2,r5,r17
    c0a8:	80008b1e 	bne	r16,zero,c2d8 <__subdf3+0x7c8>
    c0ac:	1000b526 	beq	r2,zero,c384 <__subdf3+0x874>
    c0b0:	1984b03a 	or	r2,r3,r6
    c0b4:	103eb926 	beq	r2,zero,bb9c <__alt_mem_Flash_flash_data+0xf400bb9c>
    c0b8:	3449883a 	add	r4,r6,r17
    c0bc:	2463803a 	cmpltu	r17,r4,r17
    c0c0:	194b883a 	add	r5,r3,r5
    c0c4:	2c4b883a 	add	r5,r5,r17
    c0c8:	2880202c 	andhi	r2,r5,128
    c0cc:	2023883a 	mov	r17,r4
    c0d0:	103f5c26 	beq	r2,zero,be44 <__alt_mem_Flash_flash_data+0xf400be44>
    c0d4:	00bfe034 	movhi	r2,65408
    c0d8:	10bfffc4 	addi	r2,r2,-1
    c0dc:	4821883a 	mov	r16,r9
    c0e0:	288a703a 	and	r5,r5,r2
    c0e4:	003ead06 	br	bb9c <__alt_mem_Flash_flash_data+0xf400bb9c>
    c0e8:	2c44b03a 	or	r2,r5,r17
    c0ec:	8000291e 	bne	r16,zero,c194 <__subdf3+0x684>
    c0f0:	10004f1e 	bne	r2,zero,c230 <__subdf3+0x720>
    c0f4:	1984b03a 	or	r2,r3,r6
    c0f8:	10000426 	beq	r2,zero,c10c <__subdf3+0x5fc>
    c0fc:	180b883a 	mov	r5,r3
    c100:	3023883a 	mov	r17,r6
    c104:	3825883a 	mov	r18,r7
    c108:	003ea406 	br	bb9c <__alt_mem_Flash_flash_data+0xf400bb9c>
    c10c:	0011883a 	mov	r8,zero
    c110:	000b883a 	mov	r5,zero
    c114:	0023883a 	mov	r17,zero
    c118:	003f0006 	br	bd1c <__alt_mem_Flash_flash_data+0xf400bd1c>
    c11c:	11fff804 	addi	r7,r2,-32
    c120:	19c8d83a 	srl	r4,r3,r7
    c124:	01c00804 	movi	r7,32
    c128:	11c07e26 	beq	r2,r7,c324 <__subdf3+0x814>
    c12c:	01c01004 	movi	r7,64
    c130:	3885c83a 	sub	r2,r7,r2
    c134:	1884983a 	sll	r2,r3,r2
    c138:	118cb03a 	or	r6,r2,r6
    c13c:	300ec03a 	cmpne	r7,r6,zero
    c140:	390eb03a 	or	r7,r7,r4
    c144:	0005883a 	mov	r2,zero
    c148:	003f0906 	br	bd70 <__alt_mem_Flash_flash_data+0xf400bd70>
    c14c:	0101ffc4 	movi	r4,2047
    c150:	513f991e 	bne	r10,r4,bfb8 <__alt_mem_Flash_flash_data+0xf400bfb8>
    c154:	180b883a 	mov	r5,r3
    c158:	3023883a 	mov	r17,r6
    c15c:	5021883a 	mov	r16,r10
    c160:	3825883a 	mov	r18,r7
    c164:	003e8d06 	br	bb9c <__alt_mem_Flash_flash_data+0xf400bb9c>
    c168:	80001a1e 	bne	r16,zero,c1d4 <__subdf3+0x6c4>
    c16c:	2c48b03a 	or	r4,r5,r17
    c170:	20005526 	beq	r4,zero,c2c8 <__subdf3+0x7b8>
    c174:	0084303a 	nor	r2,zero,r2
    c178:	1000511e 	bne	r2,zero,c2c0 <__subdf3+0x7b0>
    c17c:	89a3883a 	add	r17,r17,r6
    c180:	194b883a 	add	r5,r3,r5
    c184:	898d803a 	cmpltu	r6,r17,r6
    c188:	298b883a 	add	r5,r5,r6
    c18c:	5021883a 	mov	r16,r10
    c190:	003efc06 	br	bd84 <__alt_mem_Flash_flash_data+0xf400bd84>
    c194:	1000341e 	bne	r2,zero,c268 <__subdf3+0x758>
    c198:	1984b03a 	or	r2,r3,r6
    c19c:	10006f26 	beq	r2,zero,c35c <__subdf3+0x84c>
    c1a0:	180b883a 	mov	r5,r3
    c1a4:	3023883a 	mov	r17,r6
    c1a8:	3825883a 	mov	r18,r7
    c1ac:	0401ffc4 	movi	r16,2047
    c1b0:	003e7a06 	br	bb9c <__alt_mem_Flash_flash_data+0xf400bb9c>
    c1b4:	2c62b03a 	or	r17,r5,r17
    c1b8:	8822c03a 	cmpne	r17,r17,zero
    c1bc:	0005883a 	mov	r2,zero
    c1c0:	003f8a06 	br	bfec <__alt_mem_Flash_flash_data+0xf400bfec>
    c1c4:	3821883a 	mov	r16,r7
    c1c8:	000b883a 	mov	r5,zero
    c1cc:	0023883a 	mov	r17,zero
    c1d0:	003ed206 	br	bd1c <__alt_mem_Flash_flash_data+0xf400bd1c>
    c1d4:	0101ffc4 	movi	r4,2047
    c1d8:	51003b26 	beq	r10,r4,c2c8 <__subdf3+0x7b8>
    c1dc:	0085c83a 	sub	r2,zero,r2
    c1e0:	29402034 	orhi	r5,r5,128
    c1e4:	01000e04 	movi	r4,56
    c1e8:	20806216 	blt	r4,r2,c374 <__subdf3+0x864>
    c1ec:	010007c4 	movi	r4,31
    c1f0:	20806b16 	blt	r4,r2,c3a0 <__subdf3+0x890>
    c1f4:	01000804 	movi	r4,32
    c1f8:	2089c83a 	sub	r4,r4,r2
    c1fc:	2912983a 	sll	r9,r5,r4
    c200:	888ed83a 	srl	r7,r17,r2
    c204:	8908983a 	sll	r4,r17,r4
    c208:	2884d83a 	srl	r2,r5,r2
    c20c:	49e2b03a 	or	r17,r9,r7
    c210:	2008c03a 	cmpne	r4,r4,zero
    c214:	8922b03a 	or	r17,r17,r4
    c218:	89a3883a 	add	r17,r17,r6
    c21c:	10c5883a 	add	r2,r2,r3
    c220:	898d803a 	cmpltu	r6,r17,r6
    c224:	118b883a 	add	r5,r2,r6
    c228:	5021883a 	mov	r16,r10
    c22c:	003ed506 	br	bd84 <__alt_mem_Flash_flash_data+0xf400bd84>
    c230:	1984b03a 	or	r2,r3,r6
    c234:	103e5926 	beq	r2,zero,bb9c <__alt_mem_Flash_flash_data+0xf400bb9c>
    c238:	8989c83a 	sub	r4,r17,r6
    c23c:	8911803a 	cmpltu	r8,r17,r4
    c240:	28c5c83a 	sub	r2,r5,r3
    c244:	1205c83a 	sub	r2,r2,r8
    c248:	1200202c 	andhi	r8,r2,128
    c24c:	403ef926 	beq	r8,zero,be34 <__alt_mem_Flash_flash_data+0xf400be34>
    c250:	3463c83a 	sub	r17,r6,r17
    c254:	194bc83a 	sub	r5,r3,r5
    c258:	344d803a 	cmpltu	r6,r6,r17
    c25c:	298bc83a 	sub	r5,r5,r6
    c260:	3825883a 	mov	r18,r7
    c264:	003e4d06 	br	bb9c <__alt_mem_Flash_flash_data+0xf400bb9c>
    c268:	1984b03a 	or	r2,r3,r6
    c26c:	10002b26 	beq	r2,zero,c31c <__subdf3+0x80c>
    c270:	2808d0fa 	srli	r4,r5,3
    c274:	8822d0fa 	srli	r17,r17,3
    c278:	280a977a 	slli	r5,r5,29
    c27c:	2080022c 	andhi	r2,r4,8
    c280:	2c62b03a 	or	r17,r5,r17
    c284:	10000826 	beq	r2,zero,c2a8 <__subdf3+0x798>
    c288:	1810d0fa 	srli	r8,r3,3
    c28c:	4080022c 	andhi	r2,r8,8
    c290:	1000051e 	bne	r2,zero,c2a8 <__subdf3+0x798>
    c294:	300cd0fa 	srli	r6,r6,3
    c298:	1804977a 	slli	r2,r3,29
    c29c:	4009883a 	mov	r4,r8
    c2a0:	3825883a 	mov	r18,r7
    c2a4:	11a2b03a 	or	r17,r2,r6
    c2a8:	880ad77a 	srli	r5,r17,29
    c2ac:	200890fa 	slli	r4,r4,3
    c2b0:	882290fa 	slli	r17,r17,3
    c2b4:	0401ffc4 	movi	r16,2047
    c2b8:	290ab03a 	or	r5,r5,r4
    c2bc:	003e3706 	br	bb9c <__alt_mem_Flash_flash_data+0xf400bb9c>
    c2c0:	0101ffc4 	movi	r4,2047
    c2c4:	513fc71e 	bne	r10,r4,c1e4 <__alt_mem_Flash_flash_data+0xf400c1e4>
    c2c8:	180b883a 	mov	r5,r3
    c2cc:	3023883a 	mov	r17,r6
    c2d0:	5021883a 	mov	r16,r10
    c2d4:	003e3106 	br	bb9c <__alt_mem_Flash_flash_data+0xf400bb9c>
    c2d8:	10002d26 	beq	r2,zero,c390 <__subdf3+0x880>
    c2dc:	1984b03a 	or	r2,r3,r6
    c2e0:	10000e26 	beq	r2,zero,c31c <__subdf3+0x80c>
    c2e4:	2808d0fa 	srli	r4,r5,3
    c2e8:	8822d0fa 	srli	r17,r17,3
    c2ec:	280a977a 	slli	r5,r5,29
    c2f0:	2080022c 	andhi	r2,r4,8
    c2f4:	2c62b03a 	or	r17,r5,r17
    c2f8:	103feb26 	beq	r2,zero,c2a8 <__alt_mem_Flash_flash_data+0xf400c2a8>
    c2fc:	180ed0fa 	srli	r7,r3,3
    c300:	3880022c 	andhi	r2,r7,8
    c304:	103fe81e 	bne	r2,zero,c2a8 <__alt_mem_Flash_flash_data+0xf400c2a8>
    c308:	300cd0fa 	srli	r6,r6,3
    c30c:	1804977a 	slli	r2,r3,29
    c310:	3809883a 	mov	r4,r7
    c314:	11a2b03a 	or	r17,r2,r6
    c318:	003fe306 	br	c2a8 <__alt_mem_Flash_flash_data+0xf400c2a8>
    c31c:	0401ffc4 	movi	r16,2047
    c320:	003e1e06 	br	bb9c <__alt_mem_Flash_flash_data+0xf400bb9c>
    c324:	0005883a 	mov	r2,zero
    c328:	003f8306 	br	c138 <__alt_mem_Flash_flash_data+0xf400c138>
    c32c:	113ff804 	addi	r4,r2,-32
    c330:	02000804 	movi	r8,32
    c334:	2908d83a 	srl	r4,r5,r4
    c338:	12002526 	beq	r2,r8,c3d0 <__subdf3+0x8c0>
    c33c:	02001004 	movi	r8,64
    c340:	4085c83a 	sub	r2,r8,r2
    c344:	288a983a 	sll	r5,r5,r2
    c348:	2c62b03a 	or	r17,r5,r17
    c34c:	8822c03a 	cmpne	r17,r17,zero
    c350:	8922b03a 	or	r17,r17,r4
    c354:	0005883a 	mov	r2,zero
    c358:	003f2406 	br	bfec <__alt_mem_Flash_flash_data+0xf400bfec>
    c35c:	01402034 	movhi	r5,128
    c360:	0011883a 	mov	r8,zero
    c364:	297fffc4 	addi	r5,r5,-1
    c368:	047ffe04 	movi	r17,-8
    c36c:	0401ffc4 	movi	r16,2047
    c370:	003e6a06 	br	bd1c <__alt_mem_Flash_flash_data+0xf400bd1c>
    c374:	2c62b03a 	or	r17,r5,r17
    c378:	8822c03a 	cmpne	r17,r17,zero
    c37c:	0005883a 	mov	r2,zero
    c380:	003fa506 	br	c218 <__alt_mem_Flash_flash_data+0xf400c218>
    c384:	180b883a 	mov	r5,r3
    c388:	3023883a 	mov	r17,r6
    c38c:	003e0306 	br	bb9c <__alt_mem_Flash_flash_data+0xf400bb9c>
    c390:	180b883a 	mov	r5,r3
    c394:	3023883a 	mov	r17,r6
    c398:	0401ffc4 	movi	r16,2047
    c39c:	003dff06 	br	bb9c <__alt_mem_Flash_flash_data+0xf400bb9c>
    c3a0:	113ff804 	addi	r4,r2,-32
    c3a4:	01c00804 	movi	r7,32
    c3a8:	2908d83a 	srl	r4,r5,r4
    c3ac:	11c00a26 	beq	r2,r7,c3d8 <__subdf3+0x8c8>
    c3b0:	01c01004 	movi	r7,64
    c3b4:	3885c83a 	sub	r2,r7,r2
    c3b8:	288a983a 	sll	r5,r5,r2
    c3bc:	2c62b03a 	or	r17,r5,r17
    c3c0:	8822c03a 	cmpne	r17,r17,zero
    c3c4:	8922b03a 	or	r17,r17,r4
    c3c8:	0005883a 	mov	r2,zero
    c3cc:	003f9206 	br	c218 <__alt_mem_Flash_flash_data+0xf400c218>
    c3d0:	000b883a 	mov	r5,zero
    c3d4:	003fdc06 	br	c348 <__alt_mem_Flash_flash_data+0xf400c348>
    c3d8:	000b883a 	mov	r5,zero
    c3dc:	003ff706 	br	c3bc <__alt_mem_Flash_flash_data+0xf400c3bc>

0000c3e0 <__fixdfsi>:
    c3e0:	2806d53a 	srli	r3,r5,20
    c3e4:	00800434 	movhi	r2,16
    c3e8:	10bfffc4 	addi	r2,r2,-1
    c3ec:	18c1ffcc 	andi	r3,r3,2047
    c3f0:	0180ff84 	movi	r6,1022
    c3f4:	2884703a 	and	r2,r5,r2
    c3f8:	280ad7fa 	srli	r5,r5,31
    c3fc:	30c0130e 	bge	r6,r3,c44c <__fixdfsi+0x6c>
    c400:	01810744 	movi	r6,1053
    c404:	30c00d16 	blt	r6,r3,c43c <__fixdfsi+0x5c>
    c408:	01810cc4 	movi	r6,1075
    c40c:	30cdc83a 	sub	r6,r6,r3
    c410:	01c007c4 	movi	r7,31
    c414:	10800434 	orhi	r2,r2,16
    c418:	39800e0e 	bge	r7,r6,c454 <__fixdfsi+0x74>
    c41c:	010104c4 	movi	r4,1043
    c420:	20c7c83a 	sub	r3,r4,r3
    c424:	10c6d83a 	srl	r3,r2,r3
    c428:	29403fcc 	andi	r5,r5,255
    c42c:	0145c83a 	sub	r2,zero,r5
    c430:	1884f03a 	xor	r2,r3,r2
    c434:	1145883a 	add	r2,r2,r5
    c438:	f800283a 	ret
    c43c:	00a00034 	movhi	r2,32768
    c440:	10bfffc4 	addi	r2,r2,-1
    c444:	2885883a 	add	r2,r5,r2
    c448:	f800283a 	ret
    c44c:	0005883a 	mov	r2,zero
    c450:	f800283a 	ret
    c454:	18fefb44 	addi	r3,r3,-1043
    c458:	2188d83a 	srl	r4,r4,r6
    c45c:	10c6983a 	sll	r3,r2,r3
    c460:	20c6b03a 	or	r3,r4,r3
    c464:	003ff006 	br	c428 <__alt_mem_Flash_flash_data+0xf400c428>

0000c468 <__floatsidf>:
    c468:	defffd04 	addi	sp,sp,-12
    c46c:	dc400115 	stw	r17,4(sp)
    c470:	dfc00215 	stw	ra,8(sp)
    c474:	dc000015 	stw	r16,0(sp)
    c478:	2023883a 	mov	r17,r4
    c47c:	20001426 	beq	r4,zero,c4d0 <__floatsidf+0x68>
    c480:	2020d7fa 	srli	r16,r4,31
    c484:	80000126 	beq	r16,zero,c48c <__floatsidf+0x24>
    c488:	0123c83a 	sub	r17,zero,r4
    c48c:	8809883a 	mov	r4,r17
    c490:	000c5dc0 	call	c5dc <__clzsi2>
    c494:	01410784 	movi	r5,1054
    c498:	00c00284 	movi	r3,10
    c49c:	288bc83a 	sub	r5,r5,r2
    c4a0:	18801c16 	blt	r3,r2,c514 <__floatsidf+0xac>
    c4a4:	00c002c4 	movi	r3,11
    c4a8:	1887c83a 	sub	r3,r3,r2
    c4ac:	88c8d83a 	srl	r4,r17,r3
    c4b0:	00c00434 	movhi	r3,16
    c4b4:	18ffffc4 	addi	r3,r3,-1
    c4b8:	10800544 	addi	r2,r2,21
    c4bc:	20c8703a 	and	r4,r4,r3
    c4c0:	8884983a 	sll	r2,r17,r2
    c4c4:	28c1ffcc 	andi	r3,r5,2047
    c4c8:	800d883a 	mov	r6,r16
    c4cc:	00000406 	br	c4e0 <__floatsidf+0x78>
    c4d0:	000d883a 	mov	r6,zero
    c4d4:	0007883a 	mov	r3,zero
    c4d8:	0009883a 	mov	r4,zero
    c4dc:	0005883a 	mov	r2,zero
    c4e0:	180a953a 	slli	r5,r3,20
    c4e4:	31803fcc 	andi	r6,r6,255
    c4e8:	00c00434 	movhi	r3,16
    c4ec:	300c97fa 	slli	r6,r6,31
    c4f0:	18ffffc4 	addi	r3,r3,-1
    c4f4:	20c6703a 	and	r3,r4,r3
    c4f8:	1946b03a 	or	r3,r3,r5
    c4fc:	1986b03a 	or	r3,r3,r6
    c500:	dfc00217 	ldw	ra,8(sp)
    c504:	dc400117 	ldw	r17,4(sp)
    c508:	dc000017 	ldw	r16,0(sp)
    c50c:	dec00304 	addi	sp,sp,12
    c510:	f800283a 	ret
    c514:	10fffd44 	addi	r3,r2,-11
    c518:	88c8983a 	sll	r4,r17,r3
    c51c:	00800434 	movhi	r2,16
    c520:	10bfffc4 	addi	r2,r2,-1
    c524:	2088703a 	and	r4,r4,r2
    c528:	28c1ffcc 	andi	r3,r5,2047
    c52c:	800d883a 	mov	r6,r16
    c530:	0005883a 	mov	r2,zero
    c534:	003fea06 	br	c4e0 <__alt_mem_Flash_flash_data+0xf400c4e0>

0000c538 <__floatunsidf>:
    c538:	defffe04 	addi	sp,sp,-8
    c53c:	dc000015 	stw	r16,0(sp)
    c540:	dfc00115 	stw	ra,4(sp)
    c544:	2021883a 	mov	r16,r4
    c548:	20001026 	beq	r4,zero,c58c <__floatunsidf+0x54>
    c54c:	000c5dc0 	call	c5dc <__clzsi2>
    c550:	01410784 	movi	r5,1054
    c554:	100d883a 	mov	r6,r2
    c558:	288bc83a 	sub	r5,r5,r2
    c55c:	00800284 	movi	r2,10
    c560:	11801616 	blt	r2,r6,c5bc <__floatunsidf+0x84>
    c564:	008002c4 	movi	r2,11
    c568:	1185c83a 	sub	r2,r2,r6
    c56c:	8084d83a 	srl	r2,r16,r2
    c570:	00c00434 	movhi	r3,16
    c574:	31c00544 	addi	r7,r6,21
    c578:	18ffffc4 	addi	r3,r3,-1
    c57c:	81e0983a 	sll	r16,r16,r7
    c580:	10cc703a 	and	r6,r2,r3
    c584:	2941ffcc 	andi	r5,r5,2047
    c588:	00000206 	br	c594 <__floatunsidf+0x5c>
    c58c:	000b883a 	mov	r5,zero
    c590:	000d883a 	mov	r6,zero
    c594:	280a953a 	slli	r5,r5,20
    c598:	00c00434 	movhi	r3,16
    c59c:	18ffffc4 	addi	r3,r3,-1
    c5a0:	30c6703a 	and	r3,r6,r3
    c5a4:	8005883a 	mov	r2,r16
    c5a8:	1946b03a 	or	r3,r3,r5
    c5ac:	dfc00117 	ldw	ra,4(sp)
    c5b0:	dc000017 	ldw	r16,0(sp)
    c5b4:	dec00204 	addi	sp,sp,8
    c5b8:	f800283a 	ret
    c5bc:	31bffd44 	addi	r6,r6,-11
    c5c0:	818c983a 	sll	r6,r16,r6
    c5c4:	00800434 	movhi	r2,16
    c5c8:	10bfffc4 	addi	r2,r2,-1
    c5cc:	2941ffcc 	andi	r5,r5,2047
    c5d0:	0021883a 	mov	r16,zero
    c5d4:	308c703a 	and	r6,r6,r2
    c5d8:	003fee06 	br	c594 <__alt_mem_Flash_flash_data+0xf400c594>

0000c5dc <__clzsi2>:
    c5dc:	00bfffd4 	movui	r2,65535
    c5e0:	11000b36 	bltu	r2,r4,c610 <__clzsi2+0x34>
    c5e4:	00803fc4 	movi	r2,255
    c5e8:	1100122e 	bgeu	r2,r4,c634 <__clzsi2+0x58>
    c5ec:	00c00204 	movi	r3,8
    c5f0:	01400604 	movi	r5,24
    c5f4:	20c8d83a 	srl	r4,r4,r3
    c5f8:	008000b4 	movhi	r2,2
    c5fc:	10a3e004 	addi	r2,r2,-28800
    c600:	1109883a 	add	r4,r2,r4
    c604:	20800003 	ldbu	r2,0(r4)
    c608:	2885c83a 	sub	r2,r5,r2
    c60c:	f800283a 	ret
    c610:	00804034 	movhi	r2,256
    c614:	10bfffc4 	addi	r2,r2,-1
    c618:	11000336 	bltu	r2,r4,c628 <__clzsi2+0x4c>
    c61c:	00c00404 	movi	r3,16
    c620:	180b883a 	mov	r5,r3
    c624:	003ff306 	br	c5f4 <__alt_mem_Flash_flash_data+0xf400c5f4>
    c628:	00c00604 	movi	r3,24
    c62c:	01400204 	movi	r5,8
    c630:	003ff006 	br	c5f4 <__alt_mem_Flash_flash_data+0xf400c5f4>
    c634:	0007883a 	mov	r3,zero
    c638:	01400804 	movi	r5,32
    c63c:	003fed06 	br	c5f4 <__alt_mem_Flash_flash_data+0xf400c5f4>

0000c640 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    c640:	defffe04 	addi	sp,sp,-8
    c644:	dfc00115 	stw	ra,4(sp)
    c648:	df000015 	stw	fp,0(sp)
    c64c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    c650:	008000b4 	movhi	r2,2
    c654:	10ac7e04 	addi	r2,r2,-19976
    c658:	10800017 	ldw	r2,0(r2)
    c65c:	10000526 	beq	r2,zero,c674 <alt_get_errno+0x34>
    c660:	008000b4 	movhi	r2,2
    c664:	10ac7e04 	addi	r2,r2,-19976
    c668:	10800017 	ldw	r2,0(r2)
    c66c:	103ee83a 	callr	r2
    c670:	00000206 	br	c67c <alt_get_errno+0x3c>
    c674:	008000b4 	movhi	r2,2
    c678:	10b47604 	addi	r2,r2,-11816
}
    c67c:	e037883a 	mov	sp,fp
    c680:	dfc00117 	ldw	ra,4(sp)
    c684:	df000017 	ldw	fp,0(sp)
    c688:	dec00204 	addi	sp,sp,8
    c68c:	f800283a 	ret

0000c690 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
    c690:	defffb04 	addi	sp,sp,-20
    c694:	dfc00415 	stw	ra,16(sp)
    c698:	df000315 	stw	fp,12(sp)
    c69c:	df000304 	addi	fp,sp,12
    c6a0:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
    c6a4:	e0bfff17 	ldw	r2,-4(fp)
    c6a8:	10000616 	blt	r2,zero,c6c4 <close+0x34>
    c6ac:	e0bfff17 	ldw	r2,-4(fp)
    c6b0:	10c00324 	muli	r3,r2,12
    c6b4:	008000b4 	movhi	r2,2
    c6b8:	10a71804 	addi	r2,r2,-25504
    c6bc:	1885883a 	add	r2,r3,r2
    c6c0:	00000106 	br	c6c8 <close+0x38>
    c6c4:	0005883a 	mov	r2,zero
    c6c8:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
    c6cc:	e0bffd17 	ldw	r2,-12(fp)
    c6d0:	10001926 	beq	r2,zero,c738 <close+0xa8>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
    c6d4:	e0bffd17 	ldw	r2,-12(fp)
    c6d8:	10800017 	ldw	r2,0(r2)
    c6dc:	10800417 	ldw	r2,16(r2)
    c6e0:	10000626 	beq	r2,zero,c6fc <close+0x6c>
    c6e4:	e0bffd17 	ldw	r2,-12(fp)
    c6e8:	10800017 	ldw	r2,0(r2)
    c6ec:	10800417 	ldw	r2,16(r2)
    c6f0:	e13ffd17 	ldw	r4,-12(fp)
    c6f4:	103ee83a 	callr	r2
    c6f8:	00000106 	br	c700 <close+0x70>
    c6fc:	0005883a 	mov	r2,zero
    c700:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
    c704:	e13fff17 	ldw	r4,-4(fp)
    c708:	000cda80 	call	cda8 <alt_release_fd>
    if (rval < 0)
    c70c:	e0bffe17 	ldw	r2,-8(fp)
    c710:	1000070e 	bge	r2,zero,c730 <close+0xa0>
    {
      ALT_ERRNO = -rval;
    c714:	000c6400 	call	c640 <alt_get_errno>
    c718:	1007883a 	mov	r3,r2
    c71c:	e0bffe17 	ldw	r2,-8(fp)
    c720:	0085c83a 	sub	r2,zero,r2
    c724:	18800015 	stw	r2,0(r3)
      return -1;
    c728:	00bfffc4 	movi	r2,-1
    c72c:	00000706 	br	c74c <close+0xbc>
    }
    return 0;
    c730:	0005883a 	mov	r2,zero
    c734:	00000506 	br	c74c <close+0xbc>
  }
  else
  {
    ALT_ERRNO = EBADFD;
    c738:	000c6400 	call	c640 <alt_get_errno>
    c73c:	1007883a 	mov	r3,r2
    c740:	00801444 	movi	r2,81
    c744:	18800015 	stw	r2,0(r3)
    return -1;
    c748:	00bfffc4 	movi	r2,-1
  }
}
    c74c:	e037883a 	mov	sp,fp
    c750:	dfc00117 	ldw	ra,4(sp)
    c754:	df000017 	ldw	fp,0(sp)
    c758:	dec00204 	addi	sp,sp,8
    c75c:	f800283a 	ret

0000c760 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
    c760:	defffc04 	addi	sp,sp,-16
    c764:	df000315 	stw	fp,12(sp)
    c768:	df000304 	addi	fp,sp,12
    c76c:	e13ffd15 	stw	r4,-12(fp)
    c770:	e17ffe15 	stw	r5,-8(fp)
    c774:	e1bfff15 	stw	r6,-4(fp)
  return len;
    c778:	e0bfff17 	ldw	r2,-4(fp)
}
    c77c:	e037883a 	mov	sp,fp
    c780:	df000017 	ldw	fp,0(sp)
    c784:	dec00104 	addi	sp,sp,4
    c788:	f800283a 	ret

0000c78c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    c78c:	defffe04 	addi	sp,sp,-8
    c790:	dfc00115 	stw	ra,4(sp)
    c794:	df000015 	stw	fp,0(sp)
    c798:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    c79c:	008000b4 	movhi	r2,2
    c7a0:	10ac7e04 	addi	r2,r2,-19976
    c7a4:	10800017 	ldw	r2,0(r2)
    c7a8:	10000526 	beq	r2,zero,c7c0 <alt_get_errno+0x34>
    c7ac:	008000b4 	movhi	r2,2
    c7b0:	10ac7e04 	addi	r2,r2,-19976
    c7b4:	10800017 	ldw	r2,0(r2)
    c7b8:	103ee83a 	callr	r2
    c7bc:	00000206 	br	c7c8 <alt_get_errno+0x3c>
    c7c0:	008000b4 	movhi	r2,2
    c7c4:	10b47604 	addi	r2,r2,-11816
}
    c7c8:	e037883a 	mov	sp,fp
    c7cc:	dfc00117 	ldw	ra,4(sp)
    c7d0:	df000017 	ldw	fp,0(sp)
    c7d4:	dec00204 	addi	sp,sp,8
    c7d8:	f800283a 	ret

0000c7dc <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
    c7dc:	defffb04 	addi	sp,sp,-20
    c7e0:	dfc00415 	stw	ra,16(sp)
    c7e4:	df000315 	stw	fp,12(sp)
    c7e8:	df000304 	addi	fp,sp,12
    c7ec:	e13ffe15 	stw	r4,-8(fp)
    c7f0:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    c7f4:	e0bffe17 	ldw	r2,-8(fp)
    c7f8:	10000616 	blt	r2,zero,c814 <fstat+0x38>
    c7fc:	e0bffe17 	ldw	r2,-8(fp)
    c800:	10c00324 	muli	r3,r2,12
    c804:	008000b4 	movhi	r2,2
    c808:	10a71804 	addi	r2,r2,-25504
    c80c:	1885883a 	add	r2,r3,r2
    c810:	00000106 	br	c818 <fstat+0x3c>
    c814:	0005883a 	mov	r2,zero
    c818:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
    c81c:	e0bffd17 	ldw	r2,-12(fp)
    c820:	10001026 	beq	r2,zero,c864 <fstat+0x88>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
    c824:	e0bffd17 	ldw	r2,-12(fp)
    c828:	10800017 	ldw	r2,0(r2)
    c82c:	10800817 	ldw	r2,32(r2)
    c830:	10000726 	beq	r2,zero,c850 <fstat+0x74>
    {
      return fd->dev->fstat(fd, st);
    c834:	e0bffd17 	ldw	r2,-12(fp)
    c838:	10800017 	ldw	r2,0(r2)
    c83c:	10800817 	ldw	r2,32(r2)
    c840:	e13ffd17 	ldw	r4,-12(fp)
    c844:	e17fff17 	ldw	r5,-4(fp)
    c848:	103ee83a 	callr	r2
    c84c:	00000a06 	br	c878 <fstat+0x9c>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
    c850:	e0bfff17 	ldw	r2,-4(fp)
    c854:	00c80004 	movi	r3,8192
    c858:	10c00115 	stw	r3,4(r2)
      return 0;
    c85c:	0005883a 	mov	r2,zero
    c860:	00000506 	br	c878 <fstat+0x9c>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
    c864:	000c78c0 	call	c78c <alt_get_errno>
    c868:	1007883a 	mov	r3,r2
    c86c:	00801444 	movi	r2,81
    c870:	18800015 	stw	r2,0(r3)
    return -1;
    c874:	00bfffc4 	movi	r2,-1
  }
}
    c878:	e037883a 	mov	sp,fp
    c87c:	dfc00117 	ldw	ra,4(sp)
    c880:	df000017 	ldw	fp,0(sp)
    c884:	dec00204 	addi	sp,sp,8
    c888:	f800283a 	ret

0000c88c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    c88c:	defffe04 	addi	sp,sp,-8
    c890:	dfc00115 	stw	ra,4(sp)
    c894:	df000015 	stw	fp,0(sp)
    c898:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    c89c:	008000b4 	movhi	r2,2
    c8a0:	10ac7e04 	addi	r2,r2,-19976
    c8a4:	10800017 	ldw	r2,0(r2)
    c8a8:	10000526 	beq	r2,zero,c8c0 <alt_get_errno+0x34>
    c8ac:	008000b4 	movhi	r2,2
    c8b0:	10ac7e04 	addi	r2,r2,-19976
    c8b4:	10800017 	ldw	r2,0(r2)
    c8b8:	103ee83a 	callr	r2
    c8bc:	00000206 	br	c8c8 <alt_get_errno+0x3c>
    c8c0:	008000b4 	movhi	r2,2
    c8c4:	10b47604 	addi	r2,r2,-11816
}
    c8c8:	e037883a 	mov	sp,fp
    c8cc:	dfc00117 	ldw	ra,4(sp)
    c8d0:	df000017 	ldw	fp,0(sp)
    c8d4:	dec00204 	addi	sp,sp,8
    c8d8:	f800283a 	ret

0000c8dc <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
    c8dc:	deffed04 	addi	sp,sp,-76
    c8e0:	dfc01215 	stw	ra,72(sp)
    c8e4:	df001115 	stw	fp,68(sp)
    c8e8:	df001104 	addi	fp,sp,68
    c8ec:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    c8f0:	e0bfff17 	ldw	r2,-4(fp)
    c8f4:	10000616 	blt	r2,zero,c910 <isatty+0x34>
    c8f8:	e0bfff17 	ldw	r2,-4(fp)
    c8fc:	10c00324 	muli	r3,r2,12
    c900:	008000b4 	movhi	r2,2
    c904:	10a71804 	addi	r2,r2,-25504
    c908:	1885883a 	add	r2,r3,r2
    c90c:	00000106 	br	c914 <isatty+0x38>
    c910:	0005883a 	mov	r2,zero
    c914:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
    c918:	e0bfef17 	ldw	r2,-68(fp)
    c91c:	10000e26 	beq	r2,zero,c958 <isatty+0x7c>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
    c920:	e0bfef17 	ldw	r2,-68(fp)
    c924:	10800017 	ldw	r2,0(r2)
    c928:	10800817 	ldw	r2,32(r2)
    c92c:	1000021e 	bne	r2,zero,c938 <isatty+0x5c>
    {
      return 1;
    c930:	00800044 	movi	r2,1
    c934:	00000d06 	br	c96c <isatty+0x90>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
    c938:	e0bff004 	addi	r2,fp,-64
    c93c:	e13fff17 	ldw	r4,-4(fp)
    c940:	100b883a 	mov	r5,r2
    c944:	000c7dc0 	call	c7dc <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
    c948:	e0bff117 	ldw	r2,-60(fp)
    c94c:	10880020 	cmpeqi	r2,r2,8192
    c950:	10803fcc 	andi	r2,r2,255
    c954:	00000506 	br	c96c <isatty+0x90>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
    c958:	000c88c0 	call	c88c <alt_get_errno>
    c95c:	1007883a 	mov	r3,r2
    c960:	00801444 	movi	r2,81
    c964:	18800015 	stw	r2,0(r3)
    return 0;
    c968:	0005883a 	mov	r2,zero
  }
}
    c96c:	e037883a 	mov	sp,fp
    c970:	dfc00117 	ldw	ra,4(sp)
    c974:	df000017 	ldw	fp,0(sp)
    c978:	dec00204 	addi	sp,sp,8
    c97c:	f800283a 	ret

0000c980 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
    c980:	defffc04 	addi	sp,sp,-16
    c984:	df000315 	stw	fp,12(sp)
    c988:	df000304 	addi	fp,sp,12
    c98c:	e13ffd15 	stw	r4,-12(fp)
    c990:	e17ffe15 	stw	r5,-8(fp)
    c994:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
    c998:	e0fffe17 	ldw	r3,-8(fp)
    c99c:	e0bffd17 	ldw	r2,-12(fp)
    c9a0:	18800c26 	beq	r3,r2,c9d4 <alt_load_section+0x54>
  {
    while( to != end )
    c9a4:	00000806 	br	c9c8 <alt_load_section+0x48>
    {
      *to++ = *from++;
    c9a8:	e0bffe17 	ldw	r2,-8(fp)
    c9ac:	10c00104 	addi	r3,r2,4
    c9b0:	e0fffe15 	stw	r3,-8(fp)
    c9b4:	e0fffd17 	ldw	r3,-12(fp)
    c9b8:	19000104 	addi	r4,r3,4
    c9bc:	e13ffd15 	stw	r4,-12(fp)
    c9c0:	18c00017 	ldw	r3,0(r3)
    c9c4:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
    c9c8:	e0fffe17 	ldw	r3,-8(fp)
    c9cc:	e0bfff17 	ldw	r2,-4(fp)
    c9d0:	18bff51e 	bne	r3,r2,c9a8 <__alt_mem_Flash_flash_data+0xf400c9a8>
    {
      *to++ = *from++;
    }
  }
}
    c9d4:	e037883a 	mov	sp,fp
    c9d8:	df000017 	ldw	fp,0(sp)
    c9dc:	dec00104 	addi	sp,sp,4
    c9e0:	f800283a 	ret

0000c9e4 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
    c9e4:	defffe04 	addi	sp,sp,-8
    c9e8:	dfc00115 	stw	ra,4(sp)
    c9ec:	df000015 	stw	fp,0(sp)
    c9f0:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
    c9f4:	010000b4 	movhi	r4,2
    c9f8:	212ca204 	addi	r4,r4,-19832
    c9fc:	014000b4 	movhi	r5,2
    ca00:	2964db04 	addi	r5,r5,-27796
    ca04:	018000b4 	movhi	r6,2
    ca08:	31aca204 	addi	r6,r6,-19832
    ca0c:	000c9800 	call	c980 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
    ca10:	01000034 	movhi	r4,0
    ca14:	21000804 	addi	r4,r4,32
    ca18:	01400034 	movhi	r5,0
    ca1c:	29400804 	addi	r5,r5,32
    ca20:	01800034 	movhi	r6,0
    ca24:	31809104 	addi	r6,r6,580
    ca28:	000c9800 	call	c980 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
    ca2c:	010000b4 	movhi	r4,2
    ca30:	21232f04 	addi	r4,r4,-29508
    ca34:	014000b4 	movhi	r5,2
    ca38:	29632f04 	addi	r5,r5,-29508
    ca3c:	018000b4 	movhi	r6,2
    ca40:	31a4db04 	addi	r6,r6,-27796
    ca44:	000c9800 	call	c980 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
    ca48:	00179040 	call	17904 <alt_dcache_flush_all>
  alt_icache_flush_all();
    ca4c:	0017b5c0 	call	17b5c <alt_icache_flush_all>
}
    ca50:	e037883a 	mov	sp,fp
    ca54:	dfc00117 	ldw	ra,4(sp)
    ca58:	df000017 	ldw	fp,0(sp)
    ca5c:	dec00204 	addi	sp,sp,8
    ca60:	f800283a 	ret

0000ca64 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    ca64:	defffe04 	addi	sp,sp,-8
    ca68:	dfc00115 	stw	ra,4(sp)
    ca6c:	df000015 	stw	fp,0(sp)
    ca70:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    ca74:	008000b4 	movhi	r2,2
    ca78:	10ac7e04 	addi	r2,r2,-19976
    ca7c:	10800017 	ldw	r2,0(r2)
    ca80:	10000526 	beq	r2,zero,ca98 <alt_get_errno+0x34>
    ca84:	008000b4 	movhi	r2,2
    ca88:	10ac7e04 	addi	r2,r2,-19976
    ca8c:	10800017 	ldw	r2,0(r2)
    ca90:	103ee83a 	callr	r2
    ca94:	00000206 	br	caa0 <alt_get_errno+0x3c>
    ca98:	008000b4 	movhi	r2,2
    ca9c:	10b47604 	addi	r2,r2,-11816
}
    caa0:	e037883a 	mov	sp,fp
    caa4:	dfc00117 	ldw	ra,4(sp)
    caa8:	df000017 	ldw	fp,0(sp)
    caac:	dec00204 	addi	sp,sp,8
    cab0:	f800283a 	ret

0000cab4 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
    cab4:	defff904 	addi	sp,sp,-28
    cab8:	dfc00615 	stw	ra,24(sp)
    cabc:	df000515 	stw	fp,20(sp)
    cac0:	df000504 	addi	fp,sp,20
    cac4:	e13ffd15 	stw	r4,-12(fp)
    cac8:	e17ffe15 	stw	r5,-8(fp)
    cacc:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
    cad0:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    cad4:	e0bffd17 	ldw	r2,-12(fp)
    cad8:	10000616 	blt	r2,zero,caf4 <lseek+0x40>
    cadc:	e0bffd17 	ldw	r2,-12(fp)
    cae0:	10c00324 	muli	r3,r2,12
    cae4:	008000b4 	movhi	r2,2
    cae8:	10a71804 	addi	r2,r2,-25504
    caec:	1885883a 	add	r2,r3,r2
    caf0:	00000106 	br	caf8 <lseek+0x44>
    caf4:	0005883a 	mov	r2,zero
    caf8:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
    cafc:	e0bffc17 	ldw	r2,-16(fp)
    cb00:	10001026 	beq	r2,zero,cb44 <lseek+0x90>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
    cb04:	e0bffc17 	ldw	r2,-16(fp)
    cb08:	10800017 	ldw	r2,0(r2)
    cb0c:	10800717 	ldw	r2,28(r2)
    cb10:	10000926 	beq	r2,zero,cb38 <lseek+0x84>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
    cb14:	e0bffc17 	ldw	r2,-16(fp)
    cb18:	10800017 	ldw	r2,0(r2)
    cb1c:	10800717 	ldw	r2,28(r2)
    cb20:	e13ffc17 	ldw	r4,-16(fp)
    cb24:	e17ffe17 	ldw	r5,-8(fp)
    cb28:	e1bfff17 	ldw	r6,-4(fp)
    cb2c:	103ee83a 	callr	r2
    cb30:	e0bffb15 	stw	r2,-20(fp)
    cb34:	00000506 	br	cb4c <lseek+0x98>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
    cb38:	00bfde84 	movi	r2,-134
    cb3c:	e0bffb15 	stw	r2,-20(fp)
    cb40:	00000206 	br	cb4c <lseek+0x98>
    }
  }
  else  
  {
    rc = -EBADFD;
    cb44:	00bfebc4 	movi	r2,-81
    cb48:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
    cb4c:	e0bffb17 	ldw	r2,-20(fp)
    cb50:	1000070e 	bge	r2,zero,cb70 <lseek+0xbc>
  {
    ALT_ERRNO = -rc;
    cb54:	000ca640 	call	ca64 <alt_get_errno>
    cb58:	1007883a 	mov	r3,r2
    cb5c:	e0bffb17 	ldw	r2,-20(fp)
    cb60:	0085c83a 	sub	r2,zero,r2
    cb64:	18800015 	stw	r2,0(r3)
    rc = -1;
    cb68:	00bfffc4 	movi	r2,-1
    cb6c:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
    cb70:	e0bffb17 	ldw	r2,-20(fp)
}
    cb74:	e037883a 	mov	sp,fp
    cb78:	dfc00117 	ldw	ra,4(sp)
    cb7c:	df000017 	ldw	fp,0(sp)
    cb80:	dec00204 	addi	sp,sp,8
    cb84:	f800283a 	ret

0000cb88 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
    cb88:	defff904 	addi	sp,sp,-28
    cb8c:	dfc00615 	stw	ra,24(sp)
    cb90:	df000515 	stw	fp,20(sp)
    cb94:	df000504 	addi	fp,sp,20
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
    cb98:	0009883a 	mov	r4,zero
    cb9c:	0014fd40 	call	14fd4 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
    cba0:	000db780 	call	db78 <OSInit>
    cba4:	01000044 	movi	r4,1
    cba8:	00126e80 	call	126e8 <OSSemCreate>
    cbac:	1007883a 	mov	r3,r2
    cbb0:	008000b4 	movhi	r2,2
    cbb4:	10b47c04 	addi	r2,r2,-11792
    cbb8:	10c00015 	stw	r3,0(r2)
    cbbc:	01000044 	movi	r4,1
    cbc0:	00126e80 	call	126e8 <OSSemCreate>
    cbc4:	1007883a 	mov	r3,r2
    cbc8:	008000b4 	movhi	r2,2
    cbcc:	10b47e04 	addi	r2,r2,-11784
    cbd0:	10c00015 	stw	r3,0(r2)
    cbd4:	008000b4 	movhi	r2,2
    cbd8:	10b47704 	addi	r2,r2,-11812
    cbdc:	e0bffc15 	stw	r2,-16(fp)
    cbe0:	00800044 	movi	r2,1
    cbe4:	e0bffd0d 	sth	r2,-12(fp)
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sem_create (OS_EVENT** sem, 
              INT16U value)
{
  *sem = OSSemCreate (value);
    cbe8:	e0bffd0b 	ldhu	r2,-12(fp)
    cbec:	1009883a 	mov	r4,r2
    cbf0:	00126e80 	call	126e8 <OSSemCreate>
    cbf4:	1007883a 	mov	r3,r2
    cbf8:	e0bffc17 	ldw	r2,-16(fp)
    cbfc:	10c00015 	stw	r3,0(r2)
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
    cc00:	00150080 	call	15008 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
    cc04:	010000b4 	movhi	r4,2
    cc08:	21242304 	addi	r4,r4,-28532
    cc0c:	014000b4 	movhi	r5,2
    cc10:	29642304 	addi	r5,r5,-28532
    cc14:	018000b4 	movhi	r6,2
    cc18:	31a42304 	addi	r6,r6,-28532
    cc1c:	0017c4c0 	call	17c4c <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
    cc20:	0017a140 	call	17a14 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
    cc24:	01000074 	movhi	r4,1
    cc28:	211e9c04 	addi	r4,r4,31344
    cc2c:	00189100 	call	18910 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
    cc30:	d1280417 	ldw	r4,-24560(gp)
    cc34:	d0e80517 	ldw	r3,-24556(gp)
    cc38:	d0a80617 	ldw	r2,-24552(gp)
    cc3c:	180b883a 	mov	r5,r3
    cc40:	100d883a 	mov	r6,r2
    cc44:	00005d40 	call	5d4 <main>
    cc48:	e0bffb15 	stw	r2,-20(fp)
  close(STDOUT_FILENO);
    cc4c:	01000044 	movi	r4,1
    cc50:	000c6900 	call	c690 <close>
  exit (result);
    cc54:	e13ffb17 	ldw	r4,-20(fp)
    cc58:	00189240 	call	18924 <exit>

0000cc5c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    cc5c:	defffe04 	addi	sp,sp,-8
    cc60:	dfc00115 	stw	ra,4(sp)
    cc64:	df000015 	stw	fp,0(sp)
    cc68:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    cc6c:	008000b4 	movhi	r2,2
    cc70:	10ac7e04 	addi	r2,r2,-19976
    cc74:	10800017 	ldw	r2,0(r2)
    cc78:	10000526 	beq	r2,zero,cc90 <alt_get_errno+0x34>
    cc7c:	008000b4 	movhi	r2,2
    cc80:	10ac7e04 	addi	r2,r2,-19976
    cc84:	10800017 	ldw	r2,0(r2)
    cc88:	103ee83a 	callr	r2
    cc8c:	00000206 	br	cc98 <alt_get_errno+0x3c>
    cc90:	008000b4 	movhi	r2,2
    cc94:	10b47604 	addi	r2,r2,-11816
}
    cc98:	e037883a 	mov	sp,fp
    cc9c:	dfc00117 	ldw	ra,4(sp)
    cca0:	df000017 	ldw	fp,0(sp)
    cca4:	dec00204 	addi	sp,sp,8
    cca8:	f800283a 	ret

0000ccac <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
    ccac:	defff904 	addi	sp,sp,-28
    ccb0:	dfc00615 	stw	ra,24(sp)
    ccb4:	df000515 	stw	fp,20(sp)
    ccb8:	df000504 	addi	fp,sp,20
    ccbc:	e13ffd15 	stw	r4,-12(fp)
    ccc0:	e17ffe15 	stw	r5,-8(fp)
    ccc4:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    ccc8:	e0bffd17 	ldw	r2,-12(fp)
    cccc:	10000616 	blt	r2,zero,cce8 <read+0x3c>
    ccd0:	e0bffd17 	ldw	r2,-12(fp)
    ccd4:	10c00324 	muli	r3,r2,12
    ccd8:	008000b4 	movhi	r2,2
    ccdc:	10a71804 	addi	r2,r2,-25504
    cce0:	1885883a 	add	r2,r3,r2
    cce4:	00000106 	br	ccec <read+0x40>
    cce8:	0005883a 	mov	r2,zero
    ccec:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
    ccf0:	e0bffb17 	ldw	r2,-20(fp)
    ccf4:	10002226 	beq	r2,zero,cd80 <read+0xd4>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
    ccf8:	e0bffb17 	ldw	r2,-20(fp)
    ccfc:	10800217 	ldw	r2,8(r2)
    cd00:	108000cc 	andi	r2,r2,3
    cd04:	10800060 	cmpeqi	r2,r2,1
    cd08:	1000181e 	bne	r2,zero,cd6c <read+0xc0>
        (fd->dev->read))
    cd0c:	e0bffb17 	ldw	r2,-20(fp)
    cd10:	10800017 	ldw	r2,0(r2)
    cd14:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
    cd18:	10001426 	beq	r2,zero,cd6c <read+0xc0>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
    cd1c:	e0bffb17 	ldw	r2,-20(fp)
    cd20:	10800017 	ldw	r2,0(r2)
    cd24:	10800517 	ldw	r2,20(r2)
    cd28:	e0ffff17 	ldw	r3,-4(fp)
    cd2c:	e13ffb17 	ldw	r4,-20(fp)
    cd30:	e17ffe17 	ldw	r5,-8(fp)
    cd34:	180d883a 	mov	r6,r3
    cd38:	103ee83a 	callr	r2
    cd3c:	e0bffc15 	stw	r2,-16(fp)
    cd40:	e0bffc17 	ldw	r2,-16(fp)
    cd44:	1000070e 	bge	r2,zero,cd64 <read+0xb8>
        {
          ALT_ERRNO = -rval;
    cd48:	000cc5c0 	call	cc5c <alt_get_errno>
    cd4c:	1007883a 	mov	r3,r2
    cd50:	e0bffc17 	ldw	r2,-16(fp)
    cd54:	0085c83a 	sub	r2,zero,r2
    cd58:	18800015 	stw	r2,0(r3)
          return -1;
    cd5c:	00bfffc4 	movi	r2,-1
    cd60:	00000c06 	br	cd94 <read+0xe8>
        }
        return rval;
    cd64:	e0bffc17 	ldw	r2,-16(fp)
    cd68:	00000a06 	br	cd94 <read+0xe8>
      }
      else
      {
        ALT_ERRNO = EACCES;
    cd6c:	000cc5c0 	call	cc5c <alt_get_errno>
    cd70:	1007883a 	mov	r3,r2
    cd74:	00800344 	movi	r2,13
    cd78:	18800015 	stw	r2,0(r3)
    cd7c:	00000406 	br	cd90 <read+0xe4>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
    cd80:	000cc5c0 	call	cc5c <alt_get_errno>
    cd84:	1007883a 	mov	r3,r2
    cd88:	00801444 	movi	r2,81
    cd8c:	18800015 	stw	r2,0(r3)
  }
  return -1;
    cd90:	00bfffc4 	movi	r2,-1
}
    cd94:	e037883a 	mov	sp,fp
    cd98:	dfc00117 	ldw	ra,4(sp)
    cd9c:	df000017 	ldw	fp,0(sp)
    cda0:	dec00204 	addi	sp,sp,8
    cda4:	f800283a 	ret

0000cda8 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
    cda8:	defffe04 	addi	sp,sp,-8
    cdac:	df000115 	stw	fp,4(sp)
    cdb0:	df000104 	addi	fp,sp,4
    cdb4:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
    cdb8:	e0bfff17 	ldw	r2,-4(fp)
    cdbc:	108000d0 	cmplti	r2,r2,3
    cdc0:	10000d1e 	bne	r2,zero,cdf8 <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
    cdc4:	008000b4 	movhi	r2,2
    cdc8:	10a71804 	addi	r2,r2,-25504
    cdcc:	e0ffff17 	ldw	r3,-4(fp)
    cdd0:	18c00324 	muli	r3,r3,12
    cdd4:	18c00204 	addi	r3,r3,8
    cdd8:	10c5883a 	add	r2,r2,r3
    cddc:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
    cde0:	008000b4 	movhi	r2,2
    cde4:	10a71804 	addi	r2,r2,-25504
    cde8:	e0ffff17 	ldw	r3,-4(fp)
    cdec:	18c00324 	muli	r3,r3,12
    cdf0:	10c5883a 	add	r2,r2,r3
    cdf4:	10000015 	stw	zero,0(r2)
  }
}
    cdf8:	e037883a 	mov	sp,fp
    cdfc:	df000017 	ldw	fp,0(sp)
    ce00:	dec00104 	addi	sp,sp,4
    ce04:	f800283a 	ret

0000ce08 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
    ce08:	defff904 	addi	sp,sp,-28
    ce0c:	df000615 	stw	fp,24(sp)
    ce10:	df000604 	addi	fp,sp,24
    ce14:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    ce18:	0005303a 	rdctl	r2,status
    ce1c:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    ce20:	e0fffc17 	ldw	r3,-16(fp)
    ce24:	00bfff84 	movi	r2,-2
    ce28:	1884703a 	and	r2,r3,r2
    ce2c:	1001703a 	wrctl	status,r2
  
  return context;
    ce30:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
    ce34:	e0bffa15 	stw	r2,-24(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
    ce38:	d0a00b17 	ldw	r2,-32724(gp)
    ce3c:	10c000c4 	addi	r3,r2,3
    ce40:	00bfff04 	movi	r2,-4
    ce44:	1884703a 	and	r2,r3,r2
    ce48:	d0a00b15 	stw	r2,-32724(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
    ce4c:	d0e00b17 	ldw	r3,-32724(gp)
    ce50:	e0bfff17 	ldw	r2,-4(fp)
    ce54:	1887883a 	add	r3,r3,r2
    ce58:	00810034 	movhi	r2,1024
    ce5c:	10800004 	addi	r2,r2,0
    ce60:	10c0062e 	bgeu	r2,r3,ce7c <sbrk+0x74>
    ce64:	e0bffa17 	ldw	r2,-24(fp)
    ce68:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    ce6c:	e0bffd17 	ldw	r2,-12(fp)
    ce70:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
    ce74:	00bfffc4 	movi	r2,-1
    ce78:	00000b06 	br	cea8 <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
    ce7c:	d0a00b17 	ldw	r2,-32724(gp)
    ce80:	e0bffb15 	stw	r2,-20(fp)
  heap_end += incr; 
    ce84:	d0e00b17 	ldw	r3,-32724(gp)
    ce88:	e0bfff17 	ldw	r2,-4(fp)
    ce8c:	1885883a 	add	r2,r3,r2
    ce90:	d0a00b15 	stw	r2,-32724(gp)
    ce94:	e0bffa17 	ldw	r2,-24(fp)
    ce98:	e0bffe15 	stw	r2,-8(fp)
    ce9c:	e0bffe17 	ldw	r2,-8(fp)
    cea0:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
    cea4:	e0bffb17 	ldw	r2,-20(fp)
} 
    cea8:	e037883a 	mov	sp,fp
    ceac:	df000017 	ldw	fp,0(sp)
    ceb0:	dec00104 	addi	sp,sp,4
    ceb4:	f800283a 	ret

0000ceb8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    ceb8:	defffe04 	addi	sp,sp,-8
    cebc:	dfc00115 	stw	ra,4(sp)
    cec0:	df000015 	stw	fp,0(sp)
    cec4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    cec8:	008000b4 	movhi	r2,2
    cecc:	10ac7e04 	addi	r2,r2,-19976
    ced0:	10800017 	ldw	r2,0(r2)
    ced4:	10000526 	beq	r2,zero,ceec <alt_get_errno+0x34>
    ced8:	008000b4 	movhi	r2,2
    cedc:	10ac7e04 	addi	r2,r2,-19976
    cee0:	10800017 	ldw	r2,0(r2)
    cee4:	103ee83a 	callr	r2
    cee8:	00000206 	br	cef4 <alt_get_errno+0x3c>
    ceec:	008000b4 	movhi	r2,2
    cef0:	10b47604 	addi	r2,r2,-11816
}
    cef4:	e037883a 	mov	sp,fp
    cef8:	dfc00117 	ldw	ra,4(sp)
    cefc:	df000017 	ldw	fp,0(sp)
    cf00:	dec00204 	addi	sp,sp,8
    cf04:	f800283a 	ret

0000cf08 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
    cf08:	defff904 	addi	sp,sp,-28
    cf0c:	dfc00615 	stw	ra,24(sp)
    cf10:	df000515 	stw	fp,20(sp)
    cf14:	df000504 	addi	fp,sp,20
    cf18:	e13ffd15 	stw	r4,-12(fp)
    cf1c:	e17ffe15 	stw	r5,-8(fp)
    cf20:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    cf24:	e0bffd17 	ldw	r2,-12(fp)
    cf28:	10000616 	blt	r2,zero,cf44 <write+0x3c>
    cf2c:	e0bffd17 	ldw	r2,-12(fp)
    cf30:	10c00324 	muli	r3,r2,12
    cf34:	008000b4 	movhi	r2,2
    cf38:	10a71804 	addi	r2,r2,-25504
    cf3c:	1885883a 	add	r2,r3,r2
    cf40:	00000106 	br	cf48 <write+0x40>
    cf44:	0005883a 	mov	r2,zero
    cf48:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
    cf4c:	e0bffb17 	ldw	r2,-20(fp)
    cf50:	10002126 	beq	r2,zero,cfd8 <write+0xd0>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
    cf54:	e0bffb17 	ldw	r2,-20(fp)
    cf58:	10800217 	ldw	r2,8(r2)
    cf5c:	108000cc 	andi	r2,r2,3
    cf60:	10001826 	beq	r2,zero,cfc4 <write+0xbc>
    cf64:	e0bffb17 	ldw	r2,-20(fp)
    cf68:	10800017 	ldw	r2,0(r2)
    cf6c:	10800617 	ldw	r2,24(r2)
    cf70:	10001426 	beq	r2,zero,cfc4 <write+0xbc>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
    cf74:	e0bffb17 	ldw	r2,-20(fp)
    cf78:	10800017 	ldw	r2,0(r2)
    cf7c:	10800617 	ldw	r2,24(r2)
    cf80:	e0ffff17 	ldw	r3,-4(fp)
    cf84:	e13ffb17 	ldw	r4,-20(fp)
    cf88:	e17ffe17 	ldw	r5,-8(fp)
    cf8c:	180d883a 	mov	r6,r3
    cf90:	103ee83a 	callr	r2
    cf94:	e0bffc15 	stw	r2,-16(fp)
    cf98:	e0bffc17 	ldw	r2,-16(fp)
    cf9c:	1000070e 	bge	r2,zero,cfbc <write+0xb4>
      {
        ALT_ERRNO = -rval;
    cfa0:	000ceb80 	call	ceb8 <alt_get_errno>
    cfa4:	1007883a 	mov	r3,r2
    cfa8:	e0bffc17 	ldw	r2,-16(fp)
    cfac:	0085c83a 	sub	r2,zero,r2
    cfb0:	18800015 	stw	r2,0(r3)
        return -1;
    cfb4:	00bfffc4 	movi	r2,-1
    cfb8:	00000c06 	br	cfec <write+0xe4>
      }
      return rval;
    cfbc:	e0bffc17 	ldw	r2,-16(fp)
    cfc0:	00000a06 	br	cfec <write+0xe4>
    }
    else
    {
      ALT_ERRNO = EACCES;
    cfc4:	000ceb80 	call	ceb8 <alt_get_errno>
    cfc8:	1007883a 	mov	r3,r2
    cfcc:	00800344 	movi	r2,13
    cfd0:	18800015 	stw	r2,0(r3)
    cfd4:	00000406 	br	cfe8 <write+0xe0>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
    cfd8:	000ceb80 	call	ceb8 <alt_get_errno>
    cfdc:	1007883a 	mov	r3,r2
    cfe0:	00801444 	movi	r2,81
    cfe4:	18800015 	stw	r2,0(r3)
  }
  return -1;
    cfe8:	00bfffc4 	movi	r2,-1
}
    cfec:	e037883a 	mov	sp,fp
    cff0:	dfc00117 	ldw	ra,4(sp)
    cff4:	df000017 	ldw	fp,0(sp)
    cff8:	dec00204 	addi	sp,sp,8
    cffc:	f800283a 	ret

0000d000 <__env_lock>:
/*
 *
 */

void __env_lock ( struct _reent *_r )
{
    d000:	deffdf04 	addi	sp,sp,-132
    d004:	dfc02015 	stw	ra,128(sp)
    d008:	df001f15 	stw	fp,124(sp)
    d00c:	df001f04 	addi	fp,sp,124
    d010:	e13fff15 	stw	r4,-4(fp)
  INT8U err;
  int id;

  /* use our priority as a task id */

  err = OSTaskQuery( OS_PRIO_SELF, &tcb );
    d014:	e0bfe204 	addi	r2,fp,-120
    d018:	01003fc4 	movi	r4,255
    d01c:	100b883a 	mov	r5,r2
    d020:	001489c0 	call	1489c <OSTaskQuery>
    d024:	e0bffe85 	stb	r2,-6(fp)
  if (err != OS_NO_ERR)
    d028:	e0bffe83 	ldbu	r2,-6(fp)
    d02c:	10803fcc 	andi	r2,r2,255
    d030:	10000126 	beq	r2,zero,d038 <__env_lock+0x38>
    return;
    d034:	00001d06 	br	d0ac <__env_lock+0xac>

  id = tcb.OSTCBPrio;
    d038:	e0bfee83 	ldbu	r2,-70(fp)
    d03c:	10803fcc 	andi	r2,r2,255
    d040:	e0bfe115 	stw	r2,-124(fp)
   
  /* see if we own the environment already */

  OSSemQuery( alt_envsem, &semdata );
    d044:	d0e80817 	ldw	r3,-24544(gp)
    d048:	e0bffd04 	addi	r2,fp,-12
    d04c:	1809883a 	mov	r4,r3
    d050:	100b883a 	mov	r5,r2
    d054:	0012f340 	call	12f34 <OSSemQuery>
  if( semdata.OSEventGrp && id == lockid ) 
    d058:	e0bffe43 	ldbu	r2,-7(fp)
    d05c:	10803fcc 	andi	r2,r2,255
    d060:	10000726 	beq	r2,zero,d080 <__env_lock+0x80>
    d064:	d0a00c17 	ldw	r2,-32720(gp)
    d068:	e0ffe117 	ldw	r3,-124(fp)
    d06c:	1880041e 	bne	r3,r2,d080 <__env_lock+0x80>
  {
    /* we do; just count the recursion */

    locks++;
    d070:	d0a80717 	ldw	r2,-24548(gp)
    d074:	10800044 	addi	r2,r2,1
    d078:	d0a80715 	stw	r2,-24548(gp)
    d07c:	00000a06 	br	d0a8 <__env_lock+0xa8>
  }
  else 
  {
    /* wait on the other task to yield, then claim ownership */

    OSSemPend( alt_envsem, 0, &err );
    d080:	d0e80817 	ldw	r3,-24544(gp)
    d084:	e0bffe84 	addi	r2,fp,-6
    d088:	1809883a 	mov	r4,r3
    d08c:	000b883a 	mov	r5,zero
    d090:	100d883a 	mov	r6,r2
    d094:	0012a500 	call	12a50 <OSSemPend>
    locks  = 1;
    d098:	00800044 	movi	r2,1
    d09c:	d0a80715 	stw	r2,-24548(gp)
    lockid = id;
    d0a0:	e0bfe117 	ldw	r2,-124(fp)
    d0a4:	d0a00c15 	stw	r2,-32720(gp)
  }

#endif /* OS_THREAD_SAFE_NEWLIB */
  return;
    d0a8:	0001883a 	nop
}
    d0ac:	e037883a 	mov	sp,fp
    d0b0:	dfc00117 	ldw	ra,4(sp)
    d0b4:	df000017 	ldw	fp,0(sp)
    d0b8:	dec00204 	addi	sp,sp,8
    d0bc:	f800283a 	ret

0000d0c0 <__env_unlock>:
/*
 *
 */

void __env_unlock ( struct _reent *_r )
{
    d0c0:	defffd04 	addi	sp,sp,-12
    d0c4:	dfc00215 	stw	ra,8(sp)
    d0c8:	df000115 	stw	fp,4(sp)
    d0cc:	df000104 	addi	fp,sp,4
    d0d0:	e13fff15 	stw	r4,-4(fp)
#if OS_THREAD_SAFE_NEWLIB
  if (locks == 0)
    d0d4:	d0a80717 	ldw	r2,-24548(gp)
    d0d8:	1000011e 	bne	r2,zero,d0e0 <__env_unlock+0x20>
    return;
    d0dc:	00000a06 	br	d108 <__env_unlock+0x48>
   /* 
    * release the environment once the number of locks == the number 
    * of unlocks 
    */

  if( (--locks) == 0 ) 
    d0e0:	d0a80717 	ldw	r2,-24548(gp)
    d0e4:	10bfffc4 	addi	r2,r2,-1
    d0e8:	d0a80715 	stw	r2,-24548(gp)
    d0ec:	d0a80717 	ldw	r2,-24548(gp)
    d0f0:	1000051e 	bne	r2,zero,d108 <__env_unlock+0x48>
  {
    lockid = -1;
    d0f4:	00bfffc4 	movi	r2,-1
    d0f8:	d0a00c15 	stw	r2,-32720(gp)
    OSSemPost( alt_envsem );
    d0fc:	d0a80817 	ldw	r2,-24544(gp)
    d100:	1009883a 	mov	r4,r2
    d104:	0012e240 	call	12e24 <OSSemPost>
  }
#endif /* OS_THREAD_SAFE_NEWLIB */
}
    d108:	e037883a 	mov	sp,fp
    d10c:	dfc00117 	ldw	ra,4(sp)
    d110:	df000017 	ldw	fp,0(sp)
    d114:	dec00204 	addi	sp,sp,8
    d118:	f800283a 	ret

0000d11c <__malloc_lock>:
/*
 *
 */

void __malloc_lock ( struct _reent *_r )
{
    d11c:	deffdb04 	addi	sp,sp,-148
    d120:	dfc02415 	stw	ra,144(sp)
    d124:	df002315 	stw	fp,140(sp)
    d128:	df002304 	addi	fp,sp,140
    d12c:	e13fff15 	stw	r4,-4(fp)
  OS_TCB tcb;
  OS_SEM_DATA semdata;
  INT8U err;
  int id;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
    d130:	e03fdd15 	stw	zero,-140(fp)
#endif  
  
  if (OSRunning != OS_TRUE)
    d134:	008000b4 	movhi	r2,2
    d138:	10b47f44 	addi	r2,r2,-11779
    d13c:	10800003 	ldbu	r2,0(r2)
    d140:	10803fcc 	andi	r2,r2,255
    d144:	10800060 	cmpeqi	r2,r2,1
    d148:	1000011e 	bne	r2,zero,d150 <__malloc_lock+0x34>
      return;
    d14c:	00003606 	br	d228 <__malloc_lock+0x10c>

  /* use our priority as a task id */

  err = OSTaskQuery( OS_PRIO_SELF, &tcb );
    d150:	e0bfe204 	addi	r2,fp,-120
    d154:	01003fc4 	movi	r4,255
    d158:	100b883a 	mov	r5,r2
    d15c:	001489c0 	call	1489c <OSTaskQuery>
    d160:	e0bffe85 	stb	r2,-6(fp)
  if (err != OS_NO_ERR)
    d164:	e0bffe83 	ldbu	r2,-6(fp)
    d168:	10803fcc 	andi	r2,r2,255
    d16c:	10000126 	beq	r2,zero,d174 <__malloc_lock+0x58>
    return;
    d170:	00002d06 	br	d228 <__malloc_lock+0x10c>

  id = tcb.OSTCBPrio;
    d174:	e0bfee83 	ldbu	r2,-70(fp)
    d178:	10803fcc 	andi	r2,r2,255
    d17c:	e0bfde15 	stw	r2,-136(fp)
   
  /* see if we own the heap already */

  OSSemQuery( alt_heapsem, &semdata );
    d180:	d0e80a17 	ldw	r3,-24536(gp)
    d184:	e0bffd04 	addi	r2,fp,-12
    d188:	1809883a 	mov	r4,r3
    d18c:	100b883a 	mov	r5,r2
    d190:	0012f340 	call	12f34 <OSSemQuery>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    d194:	0005303a 	rdctl	r2,status
    d198:	e0bfdf15 	stw	r2,-132(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    d19c:	e0ffdf17 	ldw	r3,-132(fp)
    d1a0:	00bfff84 	movi	r2,-2
    d1a4:	1884703a 	and	r2,r3,r2
    d1a8:	1001703a 	wrctl	status,r2
  
  return context;
    d1ac:	e0bfdf17 	ldw	r2,-132(fp)
  
  OS_ENTER_CRITICAL();
    d1b0:	e0bfdd15 	stw	r2,-140(fp)

  if( !semdata.OSCnt && id == lockid ) 
    d1b4:	e0bffd0b 	ldhu	r2,-12(fp)
    d1b8:	10bfffcc 	andi	r2,r2,65535
    d1bc:	10000b1e 	bne	r2,zero,d1ec <__malloc_lock+0xd0>
    d1c0:	d0a00d17 	ldw	r2,-32716(gp)
    d1c4:	e0ffde17 	ldw	r3,-136(fp)
    d1c8:	1880081e 	bne	r3,r2,d1ec <__malloc_lock+0xd0>
  {
    /* we do; just count the recursion */
    locks++;
    d1cc:	d0a80917 	ldw	r2,-24540(gp)
    d1d0:	10800044 	addi	r2,r2,1
    d1d4:	d0a80915 	stw	r2,-24540(gp)
    d1d8:	e0bfdd17 	ldw	r2,-140(fp)
    d1dc:	e0bfe015 	stw	r2,-128(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    d1e0:	e0bfe017 	ldw	r2,-128(fp)
    d1e4:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    d1e8:	00000e06 	br	d224 <__malloc_lock+0x108>
    d1ec:	e0bfdd17 	ldw	r2,-140(fp)
    d1f0:	e0bfe115 	stw	r2,-124(fp)
    d1f4:	e0bfe117 	ldw	r2,-124(fp)
    d1f8:	1001703a 	wrctl	status,r2
  else 
  {
    /* wait on the other task to yield the heap, then claim ownership of it */
    OS_EXIT_CRITICAL();

    OSSemPend( alt_heapsem, 0, &err );
    d1fc:	d0e80a17 	ldw	r3,-24536(gp)
    d200:	e0bffe84 	addi	r2,fp,-6
    d204:	1809883a 	mov	r4,r3
    d208:	000b883a 	mov	r5,zero
    d20c:	100d883a 	mov	r6,r2
    d210:	0012a500 	call	12a50 <OSSemPend>
    locks  = 1;
    d214:	00800044 	movi	r2,1
    d218:	d0a80915 	stw	r2,-24540(gp)
    lockid = id;
    d21c:	e0bfde17 	ldw	r2,-136(fp)
    d220:	d0a00d15 	stw	r2,-32716(gp)
  }

#endif /* OS_THREAD_SAFE_NEWLIB */
  return;
    d224:	0001883a 	nop
}
    d228:	e037883a 	mov	sp,fp
    d22c:	dfc00117 	ldw	ra,4(sp)
    d230:	df000017 	ldw	fp,0(sp)
    d234:	dec00204 	addi	sp,sp,8
    d238:	f800283a 	ret

0000d23c <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
    d23c:	defff804 	addi	sp,sp,-32
    d240:	dfc00715 	stw	ra,28(sp)
    d244:	df000615 	stw	fp,24(sp)
    d248:	df000604 	addi	fp,sp,24
    d24c:	e13fff15 	stw	r4,-4(fp)
#if OS_THREAD_SAFE_NEWLIB

#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
    d250:	e03ffa15 	stw	zero,-24(fp)
#endif 

  if (OSRunning != OS_TRUE)
    d254:	008000b4 	movhi	r2,2
    d258:	10b47f44 	addi	r2,r2,-11779
    d25c:	10800003 	ldbu	r2,0(r2)
    d260:	10803fcc 	andi	r2,r2,255
    d264:	10800060 	cmpeqi	r2,r2,1
    d268:	1000011e 	bne	r2,zero,d270 <__malloc_unlock+0x34>
      return;
    d26c:	00002206 	br	d2f8 <__malloc_unlock+0xbc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    d270:	0005303a 	rdctl	r2,status
    d274:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    d278:	e0fffb17 	ldw	r3,-20(fp)
    d27c:	00bfff84 	movi	r2,-2
    d280:	1884703a 	and	r2,r3,r2
    d284:	1001703a 	wrctl	status,r2
  
  return context;
    d288:	e0bffb17 	ldw	r2,-20(fp)

  OS_ENTER_CRITICAL();
    d28c:	e0bffa15 	stw	r2,-24(fp)
  if (locks == 0)
    d290:	d0a80917 	ldw	r2,-24540(gp)
    d294:	1000051e 	bne	r2,zero,d2ac <__malloc_unlock+0x70>
    d298:	e0bffa17 	ldw	r2,-24(fp)
    d29c:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    d2a0:	e0bffc17 	ldw	r2,-16(fp)
    d2a4:	1001703a 	wrctl	status,r2
  {
      OS_EXIT_CRITICAL();
      return;
    d2a8:	00001306 	br	d2f8 <__malloc_unlock+0xbc>
  }

  /* release the heap once the number of locks == the number of unlocks */
  if( (--locks) == 0 ) 
    d2ac:	d0a80917 	ldw	r2,-24540(gp)
    d2b0:	10bfffc4 	addi	r2,r2,-1
    d2b4:	d0a80915 	stw	r2,-24540(gp)
    d2b8:	d0a80917 	ldw	r2,-24540(gp)
    d2bc:	10000a1e 	bne	r2,zero,d2e8 <__malloc_unlock+0xac>
  {
    lockid = -1;
    d2c0:	00bfffc4 	movi	r2,-1
    d2c4:	d0a00d15 	stw	r2,-32716(gp)
    d2c8:	e0bffa17 	ldw	r2,-24(fp)
    d2cc:	e0bffd15 	stw	r2,-12(fp)
    d2d0:	e0bffd17 	ldw	r2,-12(fp)
    d2d4:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    OSSemPost( alt_heapsem );
    d2d8:	d0a80a17 	ldw	r2,-24536(gp)
    d2dc:	1009883a 	mov	r4,r2
    d2e0:	0012e240 	call	12e24 <OSSemPost>
    d2e4:	00000406 	br	d2f8 <__malloc_unlock+0xbc>
    d2e8:	e0bffa17 	ldw	r2,-24(fp)
    d2ec:	e0bffe15 	stw	r2,-8(fp)
    d2f0:	e0bffe17 	ldw	r2,-8(fp)
    d2f4:	1001703a 	wrctl	status,r2
  {
      OS_EXIT_CRITICAL();
  }
  
#endif /* OS_THREAD_SAFE_NEWLIB */
}
    d2f8:	e037883a 	mov	sp,fp
    d2fc:	dfc00117 	ldw	ra,4(sp)
    d300:	df000017 	ldw	fp,0(sp)
    d304:	dec00204 	addi	sp,sp,8
    d308:	f800283a 	ret

0000d30c <OSEventNameGet>:
*********************************************************************************************************
*/

#if (OS_EVENT_EN) && (OS_EVENT_NAME_SIZE > 1)
INT8U  OSEventNameGet (OS_EVENT *pevent, INT8U *pname, INT8U *perr)
{
    d30c:	defff704 	addi	sp,sp,-36
    d310:	dfc00815 	stw	ra,32(sp)
    d314:	df000715 	stw	fp,28(sp)
    d318:	df000704 	addi	fp,sp,28
    d31c:	e13ffd15 	stw	r4,-12(fp)
    d320:	e17ffe15 	stw	r5,-8(fp)
    d324:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
    d328:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
    d32c:	e0bfff17 	ldw	r2,-4(fp)
    d330:	1000021e 	bne	r2,zero,d33c <OSEventNameGet+0x30>
        return (0);
    d334:	0005883a 	mov	r2,zero
    d338:	00003706 	br	d418 <OSEventNameGet+0x10c>
    }
    if (pevent == (OS_EVENT *)0) {               /* Is 'pevent' a NULL pointer?                        */
    d33c:	e0bffd17 	ldw	r2,-12(fp)
    d340:	1000051e 	bne	r2,zero,d358 <OSEventNameGet+0x4c>
        *perr = OS_ERR_PEVENT_NULL;
    d344:	e0bfff17 	ldw	r2,-4(fp)
    d348:	00c00104 	movi	r3,4
    d34c:	10c00005 	stb	r3,0(r2)
        return (0);
    d350:	0005883a 	mov	r2,zero
    d354:	00003006 	br	d418 <OSEventNameGet+0x10c>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
    d358:	e0bffe17 	ldw	r2,-8(fp)
    d35c:	1000051e 	bne	r2,zero,d374 <OSEventNameGet+0x68>
        *perr = OS_ERR_PNAME_NULL;
    d360:	e0bfff17 	ldw	r2,-4(fp)
    d364:	00c00304 	movi	r3,12
    d368:	10c00005 	stb	r3,0(r2)
        return (0);
    d36c:	0005883a 	mov	r2,zero
    d370:	00002906 	br	d418 <OSEventNameGet+0x10c>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
    d374:	d0a81903 	ldbu	r2,-24476(gp)
    d378:	10803fcc 	andi	r2,r2,255
    d37c:	10000526 	beq	r2,zero,d394 <OSEventNameGet+0x88>
        *perr  = OS_ERR_NAME_GET_ISR;
    d380:	e0bfff17 	ldw	r2,-4(fp)
    d384:	00c00444 	movi	r3,17
    d388:	10c00005 	stb	r3,0(r2)
        return (0);
    d38c:	0005883a 	mov	r2,zero
    d390:	00002106 	br	d418 <OSEventNameGet+0x10c>
    }
    switch (pevent->OSEventType) {
    d394:	e0bffd17 	ldw	r2,-12(fp)
    d398:	10800003 	ldbu	r2,0(r2)
    d39c:	10803fcc 	andi	r2,r2,255
    d3a0:	10bfffc4 	addi	r2,r2,-1
    d3a4:	10800128 	cmpgeui	r2,r2,4
    d3a8:	10000526 	beq	r2,zero,d3c0 <OSEventNameGet+0xb4>
        case OS_EVENT_TYPE_MBOX:
        case OS_EVENT_TYPE_Q:
             break;

        default:
             *perr = OS_ERR_EVENT_TYPE;
    d3ac:	e0bfff17 	ldw	r2,-4(fp)
    d3b0:	00c00044 	movi	r3,1
    d3b4:	10c00005 	stb	r3,0(r2)
             return (0);
    d3b8:	0005883a 	mov	r2,zero
    d3bc:	00001606 	br	d418 <OSEventNameGet+0x10c>
    switch (pevent->OSEventType) {
        case OS_EVENT_TYPE_SEM:
        case OS_EVENT_TYPE_MUTEX:
        case OS_EVENT_TYPE_MBOX:
        case OS_EVENT_TYPE_Q:
             break;
    d3c0:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    d3c4:	0005303a 	rdctl	r2,status
    d3c8:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    d3cc:	e0fffb17 	ldw	r3,-20(fp)
    d3d0:	00bfff84 	movi	r2,-2
    d3d4:	1884703a 	and	r2,r3,r2
    d3d8:	1001703a 	wrctl	status,r2
  
  return context;
    d3dc:	e0bffb17 	ldw	r2,-20(fp)

        default:
             *perr = OS_ERR_EVENT_TYPE;
             return (0);
    }
    OS_ENTER_CRITICAL();
    d3e0:	e0bff915 	stw	r2,-28(fp)
    len   = OS_StrCopy(pname, pevent->OSEventName);   /* Copy name from OS_EVENT                       */
    d3e4:	e0bffd17 	ldw	r2,-12(fp)
    d3e8:	10800384 	addi	r2,r2,14
    d3ec:	e13ffe17 	ldw	r4,-8(fp)
    d3f0:	100b883a 	mov	r5,r2
    d3f4:	000ed600 	call	ed60 <OS_StrCopy>
    d3f8:	e0bffa05 	stb	r2,-24(fp)
    d3fc:	e0bff917 	ldw	r2,-28(fp)
    d400:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    d404:	e0bffc17 	ldw	r2,-16(fp)
    d408:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
    d40c:	e0bfff17 	ldw	r2,-4(fp)
    d410:	10000005 	stb	zero,0(r2)
    return (len);
    d414:	e0bffa03 	ldbu	r2,-24(fp)
}
    d418:	e037883a 	mov	sp,fp
    d41c:	dfc00117 	ldw	ra,4(sp)
    d420:	df000017 	ldw	fp,0(sp)
    d424:	dec00204 	addi	sp,sp,8
    d428:	f800283a 	ret

0000d42c <OSEventNameSet>:
*********************************************************************************************************
*/

#if (OS_EVENT_EN) && (OS_EVENT_NAME_SIZE > 1)
void  OSEventNameSet (OS_EVENT *pevent, INT8U *pname, INT8U *perr)
{
    d42c:	defff604 	addi	sp,sp,-40
    d430:	dfc00915 	stw	ra,36(sp)
    d434:	df000815 	stw	fp,32(sp)
    d438:	df000804 	addi	fp,sp,32
    d43c:	e13ffd15 	stw	r4,-12(fp)
    d440:	e17ffe15 	stw	r5,-8(fp)
    d444:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
    d448:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
    d44c:	e0bfff17 	ldw	r2,-4(fp)
    d450:	1000011e 	bne	r2,zero,d458 <OSEventNameSet+0x2c>
        return;
    d454:	00003f06 	br	d554 <OSEventNameSet+0x128>
    }
    if (pevent == (OS_EVENT *)0) {               /* Is 'pevent' a NULL pointer?                        */
    d458:	e0bffd17 	ldw	r2,-12(fp)
    d45c:	1000041e 	bne	r2,zero,d470 <OSEventNameSet+0x44>
        *perr = OS_ERR_PEVENT_NULL;
    d460:	e0bfff17 	ldw	r2,-4(fp)
    d464:	00c00104 	movi	r3,4
    d468:	10c00005 	stb	r3,0(r2)
        return;
    d46c:	00003906 	br	d554 <OSEventNameSet+0x128>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
    d470:	e0bffe17 	ldw	r2,-8(fp)
    d474:	1000041e 	bne	r2,zero,d488 <OSEventNameSet+0x5c>
        *perr = OS_ERR_PNAME_NULL;
    d478:	e0bfff17 	ldw	r2,-4(fp)
    d47c:	00c00304 	movi	r3,12
    d480:	10c00005 	stb	r3,0(r2)
        return;
    d484:	00003306 	br	d554 <OSEventNameSet+0x128>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
    d488:	d0a81903 	ldbu	r2,-24476(gp)
    d48c:	10803fcc 	andi	r2,r2,255
    d490:	10000426 	beq	r2,zero,d4a4 <OSEventNameSet+0x78>
        *perr = OS_ERR_NAME_SET_ISR;
    d494:	e0bfff17 	ldw	r2,-4(fp)
    d498:	00c00484 	movi	r3,18
    d49c:	10c00005 	stb	r3,0(r2)
        return;
    d4a0:	00002c06 	br	d554 <OSEventNameSet+0x128>
    }
    switch (pevent->OSEventType) {
    d4a4:	e0bffd17 	ldw	r2,-12(fp)
    d4a8:	10800003 	ldbu	r2,0(r2)
    d4ac:	10803fcc 	andi	r2,r2,255
    d4b0:	10bfffc4 	addi	r2,r2,-1
    d4b4:	10800128 	cmpgeui	r2,r2,4
    d4b8:	10000426 	beq	r2,zero,d4cc <OSEventNameSet+0xa0>
        case OS_EVENT_TYPE_MBOX:
        case OS_EVENT_TYPE_Q:
             break;

        default:
             *perr = OS_ERR_EVENT_TYPE;
    d4bc:	e0bfff17 	ldw	r2,-4(fp)
    d4c0:	00c00044 	movi	r3,1
    d4c4:	10c00005 	stb	r3,0(r2)
             return;
    d4c8:	00002206 	br	d554 <OSEventNameSet+0x128>
    switch (pevent->OSEventType) {
        case OS_EVENT_TYPE_SEM:
        case OS_EVENT_TYPE_MUTEX:
        case OS_EVENT_TYPE_MBOX:
        case OS_EVENT_TYPE_Q:
             break;
    d4cc:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    d4d0:	0005303a 	rdctl	r2,status
    d4d4:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    d4d8:	e0fffa17 	ldw	r3,-24(fp)
    d4dc:	00bfff84 	movi	r2,-2
    d4e0:	1884703a 	and	r2,r3,r2
    d4e4:	1001703a 	wrctl	status,r2
  
  return context;
    d4e8:	e0bffa17 	ldw	r2,-24(fp)

        default:
             *perr = OS_ERR_EVENT_TYPE;
             return;
    }
    OS_ENTER_CRITICAL();
    d4ec:	e0bff815 	stw	r2,-32(fp)
    len = OS_StrLen(pname);                           /* Can we fit the string in the storage area?    */
    d4f0:	e13ffe17 	ldw	r4,-8(fp)
    d4f4:	000edd40 	call	edd4 <OS_StrLen>
    d4f8:	e0bff905 	stb	r2,-28(fp)
    if (len > (OS_EVENT_NAME_SIZE - 1)) {             /* No                                            */
    d4fc:	e0bff903 	ldbu	r2,-28(fp)
    d500:	10800830 	cmpltui	r2,r2,32
    d504:	1000081e 	bne	r2,zero,d528 <OSEventNameSet+0xfc>
    d508:	e0bff817 	ldw	r2,-32(fp)
    d50c:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    d510:	e0bffb17 	ldw	r2,-20(fp)
    d514:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_EVENT_NAME_TOO_LONG;
    d518:	e0bfff17 	ldw	r2,-4(fp)
    d51c:	00c002c4 	movi	r3,11
    d520:	10c00005 	stb	r3,0(r2)
        return;
    d524:	00000b06 	br	d554 <OSEventNameSet+0x128>
    }
    (void)OS_StrCopy(pevent->OSEventName, pname);     /* Yes, copy name to the event control block     */
    d528:	e0bffd17 	ldw	r2,-12(fp)
    d52c:	10800384 	addi	r2,r2,14
    d530:	1009883a 	mov	r4,r2
    d534:	e17ffe17 	ldw	r5,-8(fp)
    d538:	000ed600 	call	ed60 <OS_StrCopy>
    d53c:	e0bff817 	ldw	r2,-32(fp)
    d540:	e0bffc15 	stw	r2,-16(fp)
    d544:	e0bffc17 	ldw	r2,-16(fp)
    d548:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
    d54c:	e0bfff17 	ldw	r2,-4(fp)
    d550:	10000005 	stb	zero,0(r2)
}
    d554:	e037883a 	mov	sp,fp
    d558:	dfc00117 	ldw	ra,4(sp)
    d55c:	df000017 	ldw	fp,0(sp)
    d560:	dec00204 	addi	sp,sp,8
    d564:	f800283a 	ret

0000d568 <OSEventPendMulti>:
*********************************************************************************************************
*/
/*$PAGE*/
#if ((OS_EVENT_EN) && (OS_EVENT_MULTI_EN > 0))
INT16U  OSEventPendMulti (OS_EVENT **pevents_pend, OS_EVENT **pevents_rdy, void **pmsgs_rdy, INT16U timeout, INT8U *perr)
{
    d568:	deffed04 	addi	sp,sp,-76
    d56c:	dfc01215 	stw	ra,72(sp)
    d570:	df001115 	stw	fp,68(sp)
    d574:	df001104 	addi	fp,sp,68
    d578:	e13ffc15 	stw	r4,-16(fp)
    d57c:	e17ffd15 	stw	r5,-12(fp)
    d580:	e1bffe15 	stw	r6,-8(fp)
    d584:	3805883a 	mov	r2,r7
    d588:	e0bfff0d 	sth	r2,-4(fp)
#endif
    BOOLEAN     events_rdy;
    INT16U      events_rdy_nbr;
    INT8U       events_stat;
#if (OS_CRITICAL_METHOD == 3)                           /* Allocate storage for CPU status register    */
    OS_CPU_SR   cpu_sr = 0;
    d58c:	e03ff315 	stw	zero,-52(fp)
#endif



#if (OS_ARG_CHK_EN > 0)
    if (perr == (INT8U *)0) {                           /* Validate 'perr'                             */
    d590:	e0800217 	ldw	r2,8(fp)
    d594:	1000021e 	bne	r2,zero,d5a0 <OSEventPendMulti+0x38>
        return (0);
    d598:	0005883a 	mov	r2,zero
    d59c:	00017106 	br	db64 <OSEventPendMulti+0x5fc>
    }
    if (pevents_pend == (OS_EVENT **)0) {               /* Validate 'pevents_pend'                     */
    d5a0:	e0bffc17 	ldw	r2,-16(fp)
    d5a4:	1000051e 	bne	r2,zero,d5bc <OSEventPendMulti+0x54>
       *perr =  OS_ERR_PEVENT_NULL;
    d5a8:	e0800217 	ldw	r2,8(fp)
    d5ac:	00c00104 	movi	r3,4
    d5b0:	10c00005 	stb	r3,0(r2)
        return (0);
    d5b4:	0005883a 	mov	r2,zero
    d5b8:	00016a06 	br	db64 <OSEventPendMulti+0x5fc>
    }
    if (pevents_rdy  == (OS_EVENT **)0) {               /* Validate 'pevents_rdy'                      */
    d5bc:	e0bffd17 	ldw	r2,-12(fp)
    d5c0:	1000051e 	bne	r2,zero,d5d8 <OSEventPendMulti+0x70>
       *perr =  OS_ERR_PEVENT_NULL;
    d5c4:	e0800217 	ldw	r2,8(fp)
    d5c8:	00c00104 	movi	r3,4
    d5cc:	10c00005 	stb	r3,0(r2)
        return (0);
    d5d0:	0005883a 	mov	r2,zero
    d5d4:	00016306 	br	db64 <OSEventPendMulti+0x5fc>
    }
    if (pmsgs_rdy == (void **)0) {                      /* Validate 'pmsgs_rdy'                        */
    d5d8:	e0bffe17 	ldw	r2,-8(fp)
    d5dc:	1000051e 	bne	r2,zero,d5f4 <OSEventPendMulti+0x8c>
       *perr =  OS_ERR_PEVENT_NULL;
    d5e0:	e0800217 	ldw	r2,8(fp)
    d5e4:	00c00104 	movi	r3,4
    d5e8:	10c00005 	stb	r3,0(r2)
        return (0);
    d5ec:	0005883a 	mov	r2,zero
    d5f0:	00015c06 	br	db64 <OSEventPendMulti+0x5fc>
    }
#endif

   *pevents_rdy = (OS_EVENT *)0;                        /* Init array to NULL in case of errors        */
    d5f4:	e0bffd17 	ldw	r2,-12(fp)
    d5f8:	10000015 	stw	zero,0(r2)

    pevents     =  pevents_pend;
    d5fc:	e0bffc17 	ldw	r2,-16(fp)
    d600:	e0bfef15 	stw	r2,-68(fp)
    pevent      = *pevents;
    d604:	e0bfef17 	ldw	r2,-68(fp)
    d608:	10800017 	ldw	r2,0(r2)
    d60c:	e0bff015 	stw	r2,-64(fp)
    while  (pevent != (OS_EVENT *)0) {
    d610:	00001906 	br	d678 <OSEventPendMulti+0x110>
        switch (pevent->OSEventType) {                  /* Validate event block types                  */
    d614:	e0bff017 	ldw	r2,-64(fp)
    d618:	10800003 	ldbu	r2,0(r2)
    d61c:	10803fcc 	andi	r2,r2,255
    d620:	10c000a0 	cmpeqi	r3,r2,2
    d624:	1800091e 	bne	r3,zero,d64c <OSEventPendMulti+0xe4>
    d628:	10c000e0 	cmpeqi	r3,r2,3
    d62c:	1800091e 	bne	r3,zero,d654 <OSEventPendMulti+0xec>
    d630:	10800060 	cmpeqi	r2,r2,1
    d634:	1000091e 	bne	r2,zero,d65c <OSEventPendMulti+0xf4>
#endif

            case OS_EVENT_TYPE_MUTEX:                                            
            case OS_EVENT_TYPE_FLAG:
            default:           
                *perr = OS_ERR_EVENT_TYPE;
    d638:	e0800217 	ldw	r2,8(fp)
    d63c:	00c00044 	movi	r3,1
    d640:	10c00005 	stb	r3,0(r2)
                 return (0);
    d644:	0005883a 	mov	r2,zero
    d648:	00014606 	br	db64 <OSEventPendMulti+0x5fc>
            case OS_EVENT_TYPE_MBOX:
                 break;
#endif
#if ((OS_Q_EN   > 0) && (OS_MAX_QS > 0))
            case OS_EVENT_TYPE_Q:
                 break;
    d64c:	0001883a 	nop
    d650:	00000306 	br	d660 <OSEventPendMulti+0xf8>
    pevent      = *pevents;
    while  (pevent != (OS_EVENT *)0) {
        switch (pevent->OSEventType) {                  /* Validate event block types                  */
#if (OS_SEM_EN  > 0)
            case OS_EVENT_TYPE_SEM:
                 break;
    d654:	0001883a 	nop
    d658:	00000106 	br	d660 <OSEventPendMulti+0xf8>
#endif
#if (OS_MBOX_EN > 0)
            case OS_EVENT_TYPE_MBOX:
                 break;
    d65c:	0001883a 	nop
            case OS_EVENT_TYPE_FLAG:
            default:           
                *perr = OS_ERR_EVENT_TYPE;
                 return (0);
        }
        pevents++;
    d660:	e0bfef17 	ldw	r2,-68(fp)
    d664:	10800104 	addi	r2,r2,4
    d668:	e0bfef15 	stw	r2,-68(fp)
        pevent = *pevents;
    d66c:	e0bfef17 	ldw	r2,-68(fp)
    d670:	10800017 	ldw	r2,0(r2)
    d674:	e0bff015 	stw	r2,-64(fp)

   *pevents_rdy = (OS_EVENT *)0;                        /* Init array to NULL in case of errors        */

    pevents     =  pevents_pend;
    pevent      = *pevents;
    while  (pevent != (OS_EVENT *)0) {
    d678:	e0bff017 	ldw	r2,-64(fp)
    d67c:	103fe51e 	bne	r2,zero,d614 <__alt_mem_Flash_flash_data+0xf400d614>
        }
        pevents++;
        pevent = *pevents;
    }

    if (OSIntNesting  > 0) {                            /* See if called from ISR ...                  */
    d680:	d0a81903 	ldbu	r2,-24476(gp)
    d684:	10803fcc 	andi	r2,r2,255
    d688:	10000526 	beq	r2,zero,d6a0 <OSEventPendMulti+0x138>
       *perr =  OS_ERR_PEND_ISR;                        /* ... can't PEND from an ISR                  */
    d68c:	e0800217 	ldw	r2,8(fp)
    d690:	00c00084 	movi	r3,2
    d694:	10c00005 	stb	r3,0(r2)
        return (0);
    d698:	0005883a 	mov	r2,zero
    d69c:	00013106 	br	db64 <OSEventPendMulti+0x5fc>
    }
    if (OSLockNesting > 0) {                            /* See if called with scheduler locked ...     */
    d6a0:	d0a80b03 	ldbu	r2,-24532(gp)
    d6a4:	10803fcc 	andi	r2,r2,255
    d6a8:	10000526 	beq	r2,zero,d6c0 <OSEventPendMulti+0x158>
       *perr =  OS_ERR_PEND_LOCKED;                     /* ... can't PEND when locked                  */
    d6ac:	e0800217 	ldw	r2,8(fp)
    d6b0:	00c00344 	movi	r3,13
    d6b4:	10c00005 	stb	r3,0(r2)
        return (0);
    d6b8:	0005883a 	mov	r2,zero
    d6bc:	00012906 	br	db64 <OSEventPendMulti+0x5fc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    d6c0:	0005303a 	rdctl	r2,status
    d6c4:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    d6c8:	e0fff517 	ldw	r3,-44(fp)
    d6cc:	00bfff84 	movi	r2,-2
    d6d0:	1884703a 	and	r2,r3,r2
    d6d4:	1001703a 	wrctl	status,r2
  
  return context;
    d6d8:	e0bff517 	ldw	r2,-44(fp)
    }

/*$PAGE*/
    OS_ENTER_CRITICAL();
    d6dc:	e0bff315 	stw	r2,-52(fp)
    events_rdy     =  OS_FALSE;
    d6e0:	e03ff105 	stb	zero,-60(fp)
    events_rdy_nbr =  0;
    d6e4:	e03ff18d 	sth	zero,-58(fp)
    events_stat    =  OS_STAT_RDY;
    d6e8:	e03ff205 	stb	zero,-56(fp)
    pevents        =  pevents_pend;
    d6ec:	e0bffc17 	ldw	r2,-16(fp)
    d6f0:	e0bfef15 	stw	r2,-68(fp)
    pevent         = *pevents;
    d6f4:	e0bfef17 	ldw	r2,-68(fp)
    d6f8:	10800017 	ldw	r2,0(r2)
    d6fc:	e0bff015 	stw	r2,-64(fp)
    while (pevent != (OS_EVENT *)0) {                   /* See if any events already available         */
    d700:	00008106 	br	d908 <OSEventPendMulti+0x3a0>
        switch (pevent->OSEventType) {
    d704:	e0bff017 	ldw	r2,-64(fp)
    d708:	10800003 	ldbu	r2,0(r2)
    d70c:	10803fcc 	andi	r2,r2,255
    d710:	10c000a0 	cmpeqi	r3,r2,2
    d714:	18003c1e 	bne	r3,zero,d808 <OSEventPendMulti+0x2a0>
    d718:	10c000e0 	cmpeqi	r3,r2,3
    d71c:	1800031e 	bne	r3,zero,d72c <OSEventPendMulti+0x1c4>
    d720:	10800060 	cmpeqi	r2,r2,1
    d724:	10001e1e 	bne	r2,zero,d7a0 <OSEventPendMulti+0x238>
    d728:	00006606 	br	d8c4 <OSEventPendMulti+0x35c>
#if (OS_SEM_EN > 0)
            case OS_EVENT_TYPE_SEM:
                 if (pevent->OSEventCnt > 0) {          /* If semaphore count > 0, resource available; */
    d72c:	e0bff017 	ldw	r2,-64(fp)
    d730:	1080020b 	ldhu	r2,8(r2)
    d734:	10bfffcc 	andi	r2,r2,65535
    d738:	10001526 	beq	r2,zero,d790 <OSEventPendMulti+0x228>
                     pevent->OSEventCnt--;              /* ... decrement semaphore,                ... */
    d73c:	e0bff017 	ldw	r2,-64(fp)
    d740:	1080020b 	ldhu	r2,8(r2)
    d744:	10bfffc4 	addi	r2,r2,-1
    d748:	1007883a 	mov	r3,r2
    d74c:	e0bff017 	ldw	r2,-64(fp)
    d750:	10c0020d 	sth	r3,8(r2)
                    *pevents_rdy++ =  pevent;           /* ... and return available semaphore event    */
    d754:	e0bffd17 	ldw	r2,-12(fp)
    d758:	10c00104 	addi	r3,r2,4
    d75c:	e0fffd15 	stw	r3,-12(fp)
    d760:	e0fff017 	ldw	r3,-64(fp)
    d764:	10c00015 	stw	r3,0(r2)
                      events_rdy   =  OS_TRUE;
    d768:	00800044 	movi	r2,1
    d76c:	e0bff105 	stb	r2,-60(fp)
                    *pmsgs_rdy++   = (void *)0;         /* NO message returned  for semaphores         */
    d770:	e0bffe17 	ldw	r2,-8(fp)
    d774:	10c00104 	addi	r3,r2,4
    d778:	e0fffe15 	stw	r3,-8(fp)
    d77c:	10000015 	stw	zero,0(r2)
                      events_rdy_nbr++;
    d780:	e0bff18b 	ldhu	r2,-58(fp)
    d784:	10800044 	addi	r2,r2,1
    d788:	e0bff18d 	sth	r2,-58(fp)

                 } else {
                      events_stat |=  OS_STAT_SEM;      /* Configure multi-pend for semaphore events   */
                 }
                 break;
    d78c:	00005806 	br	d8f0 <OSEventPendMulti+0x388>
                      events_rdy   =  OS_TRUE;
                    *pmsgs_rdy++   = (void *)0;         /* NO message returned  for semaphores         */
                      events_rdy_nbr++;

                 } else {
                      events_stat |=  OS_STAT_SEM;      /* Configure multi-pend for semaphore events   */
    d790:	e0bff203 	ldbu	r2,-56(fp)
    d794:	10800054 	ori	r2,r2,1
    d798:	e0bff205 	stb	r2,-56(fp)
                 }
                 break;
    d79c:	00005406 	br	d8f0 <OSEventPendMulti+0x388>
#endif

#if (OS_MBOX_EN > 0)
            case OS_EVENT_TYPE_MBOX:
                 if (pevent->OSEventPtr != (void *)0) { /* If mailbox NOT empty;                   ... */
    d7a0:	e0bff017 	ldw	r2,-64(fp)
    d7a4:	10800117 	ldw	r2,4(r2)
    d7a8:	10001326 	beq	r2,zero,d7f8 <OSEventPendMulti+0x290>
                                                        /* ... return available message,           ... */
                    *pmsgs_rdy++         = (void *)pevent->OSEventPtr;
    d7ac:	e0bffe17 	ldw	r2,-8(fp)
    d7b0:	10c00104 	addi	r3,r2,4
    d7b4:	e0fffe15 	stw	r3,-8(fp)
    d7b8:	e0fff017 	ldw	r3,-64(fp)
    d7bc:	18c00117 	ldw	r3,4(r3)
    d7c0:	10c00015 	stw	r3,0(r2)
                     pevent->OSEventPtr  = (void *)0;
    d7c4:	e0bff017 	ldw	r2,-64(fp)
    d7c8:	10000115 	stw	zero,4(r2)
                    *pevents_rdy++       =  pevent;     /* ... and return available mailbox event      */
    d7cc:	e0bffd17 	ldw	r2,-12(fp)
    d7d0:	10c00104 	addi	r3,r2,4
    d7d4:	e0fffd15 	stw	r3,-12(fp)
    d7d8:	e0fff017 	ldw	r3,-64(fp)
    d7dc:	10c00015 	stw	r3,0(r2)
                      events_rdy         =  OS_TRUE;
    d7e0:	00800044 	movi	r2,1
    d7e4:	e0bff105 	stb	r2,-60(fp)
                      events_rdy_nbr++;
    d7e8:	e0bff18b 	ldhu	r2,-58(fp)
    d7ec:	10800044 	addi	r2,r2,1
    d7f0:	e0bff18d 	sth	r2,-58(fp)

                 } else {
                      events_stat |= OS_STAT_MBOX;      /* Configure multi-pend for mailbox events     */
                 }
                 break;
    d7f4:	00003e06 	br	d8f0 <OSEventPendMulti+0x388>
                    *pevents_rdy++       =  pevent;     /* ... and return available mailbox event      */
                      events_rdy         =  OS_TRUE;
                      events_rdy_nbr++;

                 } else {
                      events_stat |= OS_STAT_MBOX;      /* Configure multi-pend for mailbox events     */
    d7f8:	e0bff203 	ldbu	r2,-56(fp)
    d7fc:	10800094 	ori	r2,r2,2
    d800:	e0bff205 	stb	r2,-56(fp)
                 }
                 break;
    d804:	00003a06 	br	d8f0 <OSEventPendMulti+0x388>
#endif

#if ((OS_Q_EN > 0) && (OS_MAX_QS > 0))
            case OS_EVENT_TYPE_Q:
                 pq = (OS_Q *)pevent->OSEventPtr;
    d808:	e0bff017 	ldw	r2,-64(fp)
    d80c:	10800117 	ldw	r2,4(r2)
    d810:	e0bff415 	stw	r2,-48(fp)
                 if (pq->OSQEntries > 0) {              /* If queue NOT empty;                     ... */
    d814:	e0bff417 	ldw	r2,-48(fp)
    d818:	1080058b 	ldhu	r2,22(r2)
    d81c:	10bfffcc 	andi	r2,r2,65535
    d820:	10002426 	beq	r2,zero,d8b4 <OSEventPendMulti+0x34c>
                                                        /* ... return available message,           ... */
                    *pmsgs_rdy++ = (void *)*pq->OSQOut++;
    d824:	e0bffe17 	ldw	r2,-8(fp)
    d828:	10c00104 	addi	r3,r2,4
    d82c:	e0fffe15 	stw	r3,-8(fp)
    d830:	e0fff417 	ldw	r3,-48(fp)
    d834:	18c00417 	ldw	r3,16(r3)
    d838:	19400104 	addi	r5,r3,4
    d83c:	e13ff417 	ldw	r4,-48(fp)
    d840:	21400415 	stw	r5,16(r4)
    d844:	18c00017 	ldw	r3,0(r3)
    d848:	10c00015 	stw	r3,0(r2)
                     if (pq->OSQOut == pq->OSQEnd) {    /* If OUT ptr at queue end, ...                */
    d84c:	e0bff417 	ldw	r2,-48(fp)
    d850:	10c00417 	ldw	r3,16(r2)
    d854:	e0bff417 	ldw	r2,-48(fp)
    d858:	10800217 	ldw	r2,8(r2)
    d85c:	1880041e 	bne	r3,r2,d870 <OSEventPendMulti+0x308>
                         pq->OSQOut  = pq->OSQStart;    /* ... wrap   to queue start                   */
    d860:	e0bff417 	ldw	r2,-48(fp)
    d864:	10c00117 	ldw	r3,4(r2)
    d868:	e0bff417 	ldw	r2,-48(fp)
    d86c:	10c00415 	stw	r3,16(r2)
                     }
                     pq->OSQEntries--;                  /* Update number of queue entries              */
    d870:	e0bff417 	ldw	r2,-48(fp)
    d874:	1080058b 	ldhu	r2,22(r2)
    d878:	10bfffc4 	addi	r2,r2,-1
    d87c:	1007883a 	mov	r3,r2
    d880:	e0bff417 	ldw	r2,-48(fp)
    d884:	10c0058d 	sth	r3,22(r2)
                    *pevents_rdy++ = pevent;            /* ... and return available queue event        */
    d888:	e0bffd17 	ldw	r2,-12(fp)
    d88c:	10c00104 	addi	r3,r2,4
    d890:	e0fffd15 	stw	r3,-12(fp)
    d894:	e0fff017 	ldw	r3,-64(fp)
    d898:	10c00015 	stw	r3,0(r2)
                      events_rdy   = OS_TRUE;
    d89c:	00800044 	movi	r2,1
    d8a0:	e0bff105 	stb	r2,-60(fp)
                      events_rdy_nbr++;
    d8a4:	e0bff18b 	ldhu	r2,-58(fp)
    d8a8:	10800044 	addi	r2,r2,1
    d8ac:	e0bff18d 	sth	r2,-58(fp)

                 } else {
                      events_stat |= OS_STAT_Q;         /* Configure multi-pend for queue events       */
                 }
                 break;
    d8b0:	00000f06 	br	d8f0 <OSEventPendMulti+0x388>
                    *pevents_rdy++ = pevent;            /* ... and return available queue event        */
                      events_rdy   = OS_TRUE;
                      events_rdy_nbr++;

                 } else {
                      events_stat |= OS_STAT_Q;         /* Configure multi-pend for queue events       */
    d8b4:	e0bff203 	ldbu	r2,-56(fp)
    d8b8:	10800114 	ori	r2,r2,4
    d8bc:	e0bff205 	stb	r2,-56(fp)
                 }
                 break;
    d8c0:	00000b06 	br	d8f0 <OSEventPendMulti+0x388>
    d8c4:	e0bff317 	ldw	r2,-52(fp)
    d8c8:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    d8cc:	e0bff617 	ldw	r2,-40(fp)
    d8d0:	1001703a 	wrctl	status,r2

            case OS_EVENT_TYPE_MUTEX:                                            
            case OS_EVENT_TYPE_FLAG:
            default:           
                 OS_EXIT_CRITICAL();
                *pevents_rdy = (OS_EVENT *)0;           /* NULL terminate return event array           */
    d8d4:	e0bffd17 	ldw	r2,-12(fp)
    d8d8:	10000015 	stw	zero,0(r2)
                *perr        =  OS_ERR_EVENT_TYPE;
    d8dc:	e0800217 	ldw	r2,8(fp)
    d8e0:	00c00044 	movi	r3,1
    d8e4:	10c00005 	stb	r3,0(r2)
                 return (events_rdy_nbr);
    d8e8:	e0bff18b 	ldhu	r2,-58(fp)
    d8ec:	00009d06 	br	db64 <OSEventPendMulti+0x5fc>
        }
        pevents++;
    d8f0:	e0bfef17 	ldw	r2,-68(fp)
    d8f4:	10800104 	addi	r2,r2,4
    d8f8:	e0bfef15 	stw	r2,-68(fp)
        pevent = *pevents;
    d8fc:	e0bfef17 	ldw	r2,-68(fp)
    d900:	10800017 	ldw	r2,0(r2)
    d904:	e0bff015 	stw	r2,-64(fp)
    events_rdy     =  OS_FALSE;
    events_rdy_nbr =  0;
    events_stat    =  OS_STAT_RDY;
    pevents        =  pevents_pend;
    pevent         = *pevents;
    while (pevent != (OS_EVENT *)0) {                   /* See if any events already available         */
    d908:	e0bff017 	ldw	r2,-64(fp)
    d90c:	103f7d1e 	bne	r2,zero,d704 <__alt_mem_Flash_flash_data+0xf400d704>
        }
        pevents++;
        pevent = *pevents;
    }

    if ( events_rdy == OS_TRUE) {                       /* Return any events already available         */
    d910:	e0bff103 	ldbu	r2,-60(fp)
    d914:	10800058 	cmpnei	r2,r2,1
    d918:	10000a1e 	bne	r2,zero,d944 <OSEventPendMulti+0x3dc>
       *pevents_rdy = (OS_EVENT *)0;                    /* NULL terminate return event array           */
    d91c:	e0bffd17 	ldw	r2,-12(fp)
    d920:	10000015 	stw	zero,0(r2)
    d924:	e0bff317 	ldw	r2,-52(fp)
    d928:	e0bff715 	stw	r2,-36(fp)
    d92c:	e0bff717 	ldw	r2,-36(fp)
    d930:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
       *perr        =  OS_ERR_NONE;
    d934:	e0800217 	ldw	r2,8(fp)
    d938:	10000005 	stb	zero,0(r2)
        return (events_rdy_nbr);
    d93c:	e0bff18b 	ldhu	r2,-58(fp)
    d940:	00008806 	br	db64 <OSEventPendMulti+0x5fc>
    }
/*$PAGE*/
                                                        /* Otherwise, must wait until any event occurs */
    OSTCBCur->OSTCBStat     |= events_stat  |           /* Resource not available, ...                 */
    d944:	d0a81a17 	ldw	r2,-24472(gp)
    d948:	d0e81a17 	ldw	r3,-24472(gp)
    d94c:	19000c03 	ldbu	r4,48(r3)
    d950:	e0fff203 	ldbu	r3,-56(fp)
    d954:	20c6b03a 	or	r3,r4,r3
    d958:	1809883a 	mov	r4,r3
    d95c:	00ffe004 	movi	r3,-128
    d960:	20c6b03a 	or	r3,r4,r3
    d964:	10c00c05 	stb	r3,48(r2)
                               OS_STAT_MULTI;           /* ... pend on multiple events                 */
    OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
    d968:	d0a81a17 	ldw	r2,-24472(gp)
    d96c:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBDly       = timeout;                 /* Store pend timeout in TCB                   */
    d970:	d0a81a17 	ldw	r2,-24472(gp)
    d974:	e0ffff0b 	ldhu	r3,-4(fp)
    d978:	10c00b8d 	sth	r3,46(r2)
    OS_EventTaskWaitMulti(pevents_pend);                /* Suspend task until events or timeout occurs */
    d97c:	e13ffc17 	ldw	r4,-16(fp)
    d980:	000e4b00 	call	e4b0 <OS_EventTaskWaitMulti>
    d984:	e0bff317 	ldw	r2,-52(fp)
    d988:	e0bff815 	stw	r2,-32(fp)
    d98c:	e0bff817 	ldw	r2,-32(fp)
    d990:	1001703a 	wrctl	status,r2

    OS_EXIT_CRITICAL();
    OS_Sched();                                         /* Find next highest priority task ready       */
    d994:	000ec240 	call	ec24 <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    d998:	0005303a 	rdctl	r2,status
    d99c:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    d9a0:	e0fff917 	ldw	r3,-28(fp)
    d9a4:	00bfff84 	movi	r2,-2
    d9a8:	1884703a 	and	r2,r3,r2
    d9ac:	1001703a 	wrctl	status,r2
  
  return context;
    d9b0:	e0bff917 	ldw	r2,-28(fp)
    OS_ENTER_CRITICAL();
    d9b4:	e0bff315 	stw	r2,-52(fp)

    switch (OSTCBCur->OSTCBStatPend) {                  /* Handle event posted, aborted, or timed-out  */
    d9b8:	d0a81a17 	ldw	r2,-24472(gp)
    d9bc:	10800c43 	ldbu	r2,49(r2)
    d9c0:	10803fcc 	andi	r2,r2,255
    d9c4:	10000226 	beq	r2,zero,d9d0 <OSEventPendMulti+0x468>
    d9c8:	108000a0 	cmpeqi	r2,r2,2
    d9cc:	10001826 	beq	r2,zero,da30 <OSEventPendMulti+0x4c8>
        case OS_STAT_PEND_OK:
        case OS_STAT_PEND_ABORT:
             pevent = OSTCBCur->OSTCBEventPtr;
    d9d0:	d0a81a17 	ldw	r2,-24472(gp)
    d9d4:	10800717 	ldw	r2,28(r2)
    d9d8:	e0bff015 	stw	r2,-64(fp)
             if (pevent != (OS_EVENT *)0) {             /* If task event ptr != NULL, ...              */
    d9dc:	e0bff017 	ldw	r2,-64(fp)
    d9e0:	10000b26 	beq	r2,zero,da10 <OSEventPendMulti+0x4a8>
                *pevents_rdy++ =  pevent;               /* ... return available event ...              */
    d9e4:	e0bffd17 	ldw	r2,-12(fp)
    d9e8:	10c00104 	addi	r3,r2,4
    d9ec:	e0fffd15 	stw	r3,-12(fp)
    d9f0:	e0fff017 	ldw	r3,-64(fp)
    d9f4:	10c00015 	stw	r3,0(r2)
                *pevents_rdy   = (OS_EVENT *)0;         /* ... & NULL terminate return event array     */
    d9f8:	e0bffd17 	ldw	r2,-12(fp)
    d9fc:	10000015 	stw	zero,0(r2)
                  events_rdy_nbr++;
    da00:	e0bff18b 	ldhu	r2,-58(fp)
    da04:	10800044 	addi	r2,r2,1
    da08:	e0bff18d 	sth	r2,-58(fp)

             } else {                                   /* Else NO event available, handle as timeout  */
                 OSTCBCur->OSTCBStatPend = OS_STAT_PEND_TO;
                 OS_EventTaskRemoveMulti(OSTCBCur, pevents_pend);
             }
			 break;
    da0c:	00000d06 	br	da44 <OSEventPendMulti+0x4dc>
                *pevents_rdy++ =  pevent;               /* ... return available event ...              */
                *pevents_rdy   = (OS_EVENT *)0;         /* ... & NULL terminate return event array     */
                  events_rdy_nbr++;

             } else {                                   /* Else NO event available, handle as timeout  */
                 OSTCBCur->OSTCBStatPend = OS_STAT_PEND_TO;
    da10:	d0a81a17 	ldw	r2,-24472(gp)
    da14:	00c00044 	movi	r3,1
    da18:	10c00c45 	stb	r3,49(r2)
                 OS_EventTaskRemoveMulti(OSTCBCur, pevents_pend);
    da1c:	d0a81a17 	ldw	r2,-24472(gp)
    da20:	1009883a 	mov	r4,r2
    da24:	e17ffc17 	ldw	r5,-16(fp)
    da28:	000e6b00 	call	e6b0 <OS_EventTaskRemoveMulti>
             }
			 break;
    da2c:	00000506 	br	da44 <OSEventPendMulti+0x4dc>

        case OS_STAT_PEND_TO:
        default:                                        /* ... remove task from events' wait lists     */
             OS_EventTaskRemoveMulti(OSTCBCur, pevents_pend);
    da30:	d0a81a17 	ldw	r2,-24472(gp)
    da34:	1009883a 	mov	r4,r2
    da38:	e17ffc17 	ldw	r5,-16(fp)
    da3c:	000e6b00 	call	e6b0 <OS_EventTaskRemoveMulti>
             break;
    da40:	0001883a 	nop
    }

    switch (OSTCBCur->OSTCBStatPend) {
    da44:	d0a81a17 	ldw	r2,-24472(gp)
    da48:	10800c43 	ldbu	r2,49(r2)
    da4c:	10803fcc 	andi	r2,r2,255
    da50:	10000326 	beq	r2,zero,da60 <OSEventPendMulti+0x4f8>
    da54:	108000a0 	cmpeqi	r2,r2,2
    da58:	1000231e 	bne	r2,zero,dae8 <OSEventPendMulti+0x580>
    da5c:	00002a06 	br	db08 <OSEventPendMulti+0x5a0>
        case OS_STAT_PEND_OK:
             switch (pevent->OSEventType) {             /* Return event's message                      */
    da60:	e0bff017 	ldw	r2,-64(fp)
    da64:	10800003 	ldbu	r2,0(r2)
    da68:	10803fcc 	andi	r2,r2,255
    da6c:	0080100e 	bge	zero,r2,dab0 <OSEventPendMulti+0x548>
    da70:	10c000d0 	cmplti	r3,r2,3
    da74:	1800071e 	bne	r3,zero,da94 <OSEventPendMulti+0x52c>
    da78:	108000e0 	cmpeqi	r2,r2,3
    da7c:	10000c26 	beq	r2,zero,dab0 <OSEventPendMulti+0x548>
#if (OS_SEM_EN > 0)
                 case OS_EVENT_TYPE_SEM:
                     *pmsgs_rdy++ = (void *)0;          /* NO message returned for semaphores          */
    da80:	e0bffe17 	ldw	r2,-8(fp)
    da84:	10c00104 	addi	r3,r2,4
    da88:	e0fffe15 	stw	r3,-8(fp)
    da8c:	10000015 	stw	zero,0(r2)
                      break;
    da90:	00001206 	br	dadc <OSEventPendMulti+0x574>

#if ((OS_MBOX_EN > 0) ||                 \
    ((OS_Q_EN    > 0) && (OS_MAX_QS > 0)))
                 case OS_EVENT_TYPE_MBOX:
                 case OS_EVENT_TYPE_Q:
                     *pmsgs_rdy++ = (void *)OSTCBCur->OSTCBMsg;     /* Return received message         */
    da94:	e0bffe17 	ldw	r2,-8(fp)
    da98:	10c00104 	addi	r3,r2,4
    da9c:	e0fffe15 	stw	r3,-8(fp)
    daa0:	d0e81a17 	ldw	r3,-24472(gp)
    daa4:	18c00917 	ldw	r3,36(r3)
    daa8:	10c00015 	stw	r3,0(r2)
                      break;
    daac:	00000b06 	br	dadc <OSEventPendMulti+0x574>
    dab0:	e0bff317 	ldw	r2,-52(fp)
    dab4:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    dab8:	e0bffa17 	ldw	r2,-24(fp)
    dabc:	1001703a 	wrctl	status,r2

                 case OS_EVENT_TYPE_MUTEX:                                       
                 case OS_EVENT_TYPE_FLAG:
                 default:           
                      OS_EXIT_CRITICAL();
                     *pevents_rdy = (OS_EVENT *)0;      /* NULL terminate return event array           */
    dac0:	e0bffd17 	ldw	r2,-12(fp)
    dac4:	10000015 	stw	zero,0(r2)
                     *perr        =  OS_ERR_EVENT_TYPE;
    dac8:	e0800217 	ldw	r2,8(fp)
    dacc:	00c00044 	movi	r3,1
    dad0:	10c00005 	stb	r3,0(r2)
                      return (events_rdy_nbr);
    dad4:	e0bff18b 	ldhu	r2,-58(fp)
    dad8:	00002206 	br	db64 <OSEventPendMulti+0x5fc>
             }
            *perr = OS_ERR_NONE;
    dadc:	e0800217 	ldw	r2,8(fp)
    dae0:	10000005 	stb	zero,0(r2)
             break;
    dae4:	00001006 	br	db28 <OSEventPendMulti+0x5c0>

        case OS_STAT_PEND_ABORT:
            *pmsgs_rdy++ = (void *)0;                   /* NO message returned for abort               */
    dae8:	e0bffe17 	ldw	r2,-8(fp)
    daec:	10c00104 	addi	r3,r2,4
    daf0:	e0fffe15 	stw	r3,-8(fp)
    daf4:	10000015 	stw	zero,0(r2)
            *perr        =  OS_ERR_PEND_ABORT;          /* Indicate that event  aborted                */
    daf8:	e0800217 	ldw	r2,8(fp)
    dafc:	00c00384 	movi	r3,14
    db00:	10c00005 	stb	r3,0(r2)
             break;
    db04:	00000806 	br	db28 <OSEventPendMulti+0x5c0>
                                                        
        case OS_STAT_PEND_TO:                                                
        default:        
            *pmsgs_rdy++ = (void *)0;                   /* NO message returned for timeout             */
    db08:	e0bffe17 	ldw	r2,-8(fp)
    db0c:	10c00104 	addi	r3,r2,4
    db10:	e0fffe15 	stw	r3,-8(fp)
    db14:	10000015 	stw	zero,0(r2)
            *perr        =  OS_ERR_TIMEOUT;             /* Indicate that events timed out              */
    db18:	e0800217 	ldw	r2,8(fp)
    db1c:	00c00284 	movi	r3,10
    db20:	10c00005 	stb	r3,0(r2)
             break;
    db24:	0001883a 	nop
    }

    OSTCBCur->OSTCBStat          =  OS_STAT_RDY;        /* Set   task  status to ready                 */
    db28:	d0a81a17 	ldw	r2,-24472(gp)
    db2c:	10000c05 	stb	zero,48(r2)
    OSTCBCur->OSTCBStatPend      =  OS_STAT_PEND_OK;    /* Clear pend  status                          */
    db30:	d0a81a17 	ldw	r2,-24472(gp)
    db34:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;      /* Clear event pointers                        */
    db38:	d0a81a17 	ldw	r2,-24472(gp)
    db3c:	10000715 	stw	zero,28(r2)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
    db40:	d0a81a17 	ldw	r2,-24472(gp)
    db44:	10000815 	stw	zero,32(r2)
    OSTCBCur->OSTCBMsg           = (void      *)0;      /* Clear task  message                         */
    db48:	d0a81a17 	ldw	r2,-24472(gp)
    db4c:	10000915 	stw	zero,36(r2)
    db50:	e0bff317 	ldw	r2,-52(fp)
    db54:	e0bffb15 	stw	r2,-20(fp)
    db58:	e0bffb17 	ldw	r2,-20(fp)
    db5c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();

    return (events_rdy_nbr);
    db60:	e0bff18b 	ldhu	r2,-58(fp)
}
    db64:	e037883a 	mov	sp,fp
    db68:	dfc00117 	ldw	ra,4(sp)
    db6c:	df000017 	ldw	fp,0(sp)
    db70:	dec00204 	addi	sp,sp,8
    db74:	f800283a 	ret

0000db78 <OSInit>:
* Returns    : none
*********************************************************************************************************
*/

void  OSInit (void)
{
    db78:	defffe04 	addi	sp,sp,-8
    db7c:	dfc00115 	stw	ra,4(sp)
    db80:	df000015 	stw	fp,0(sp)
    db84:	d839883a 	mov	fp,sp
    OSInitHookBegin();                                           /* Call port specific initialization code   */
    db88:	00185640 	call	18564 <OSInitHookBegin>

    OS_InitMisc();                                               /* Initialize miscellaneous variables       */
    db8c:	000e8ec0 	call	e8ec <OS_InitMisc>

    OS_InitRdyList();                                            /* Initialize the Ready List                */
    db90:	000e9300 	call	e930 <OS_InitRdyList>

    OS_InitTCBList();                                            /* Initialize the free list of OS_TCBs      */
    db94:	000ea900 	call	ea90 <OS_InitTCBList>

    OS_InitEventList();                                          /* Initialize the free list of OS_EVENTs    */
    db98:	000e8100 	call	e810 <OS_InitEventList>

#if (OS_FLAG_EN > 0) && (OS_MAX_FLAGS > 0)
    OS_FlagInit();                                               /* Initialize the event flag structures     */
    db9c:	0010a100 	call	10a10 <OS_FlagInit>
#endif

#if (OS_MEM_EN > 0) && (OS_MAX_MEM_PART > 0)
    OS_MemInit();                                                /* Initialize the memory manager            */
    dba0:	00113580 	call	11358 <OS_MemInit>
#endif

#if (OS_Q_EN > 0) && (OS_MAX_QS > 0)
    OS_QInit();                                                  /* Initialize the message queue structures  */
    dba4:	001258c0 	call	1258c <OS_QInit>
#endif

    OS_InitTaskIdle();                                           /* Create the Idle Task                     */
    dba8:	000e9980 	call	e998 <OS_InitTaskIdle>
#if OS_TASK_STAT_EN > 0
    OS_InitTaskStat();                                           /* Create the Statistic Task                */
    dbac:	000ea140 	call	ea14 <OS_InitTaskStat>

#if OS_TMR_EN > 0
    OSTmr_Init();                                                /* Initialize the Timer Manager             */
#endif

    OSInitHookEnd();                                             /* Call port specific init. code            */
    dbb0:	00185800 	call	18580 <OSInitHookEnd>

#if OS_DEBUG_EN > 0
    OSDebugInit();
    dbb4:	000f2fc0 	call	f2fc <OSDebugInit>
#endif
}
    dbb8:	e037883a 	mov	sp,fp
    dbbc:	dfc00117 	ldw	ra,4(sp)
    dbc0:	df000017 	ldw	fp,0(sp)
    dbc4:	dec00204 	addi	sp,sp,8
    dbc8:	f800283a 	ret

0000dbcc <OSIntEnter>:
*              5) You are allowed to nest interrupts up to 255 levels deep.
*********************************************************************************************************
*/

void  OSIntEnter (void)
{
    dbcc:	defffc04 	addi	sp,sp,-16
    dbd0:	df000315 	stw	fp,12(sp)
    dbd4:	df000304 	addi	fp,sp,12
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
    dbd8:	e03ffd15 	stw	zero,-12(fp)
#endif

    if (OSRunning == OS_TRUE) {
    dbdc:	d0a80b43 	ldbu	r2,-24531(gp)
    dbe0:	10803fcc 	andi	r2,r2,255
    dbe4:	10800058 	cmpnei	r2,r2,1
    dbe8:	1000131e 	bne	r2,zero,dc38 <OSIntEnter+0x6c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    dbec:	0005303a 	rdctl	r2,status
    dbf0:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    dbf4:	e0fffe17 	ldw	r3,-8(fp)
    dbf8:	00bfff84 	movi	r2,-2
    dbfc:	1884703a 	and	r2,r3,r2
    dc00:	1001703a 	wrctl	status,r2
  
  return context;
    dc04:	e0bffe17 	ldw	r2,-8(fp)
        OS_ENTER_CRITICAL();
    dc08:	e0bffd15 	stw	r2,-12(fp)
        if (OSIntNesting < 255u) {
    dc0c:	d0a81903 	ldbu	r2,-24476(gp)
    dc10:	10803fcc 	andi	r2,r2,255
    dc14:	10803fe0 	cmpeqi	r2,r2,255
    dc18:	1000031e 	bne	r2,zero,dc28 <OSIntEnter+0x5c>
            OSIntNesting++;                      /* Increment ISR nesting level                        */
    dc1c:	d0a81903 	ldbu	r2,-24476(gp)
    dc20:	10800044 	addi	r2,r2,1
    dc24:	d0a81905 	stb	r2,-24476(gp)
    dc28:	e0bffd17 	ldw	r2,-12(fp)
    dc2c:	e0bfff15 	stw	r2,-4(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    dc30:	e0bfff17 	ldw	r2,-4(fp)
    dc34:	1001703a 	wrctl	status,r2
        }
        OS_EXIT_CRITICAL();
    }
}
    dc38:	e037883a 	mov	sp,fp
    dc3c:	df000017 	ldw	fp,0(sp)
    dc40:	dec00104 	addi	sp,sp,4
    dc44:	f800283a 	ret

0000dc48 <OSIntExit>:
*              2) Rescheduling is prevented when the scheduler is locked (see OS_SchedLock())
*********************************************************************************************************
*/

void  OSIntExit (void)
{
    dc48:	defffb04 	addi	sp,sp,-20
    dc4c:	dfc00415 	stw	ra,16(sp)
    dc50:	df000315 	stw	fp,12(sp)
    dc54:	df000304 	addi	fp,sp,12
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
    dc58:	e03ffd15 	stw	zero,-12(fp)
#endif



    if (OSRunning == OS_TRUE) {
    dc5c:	d0a80b43 	ldbu	r2,-24531(gp)
    dc60:	10803fcc 	andi	r2,r2,255
    dc64:	10800058 	cmpnei	r2,r2,1
    dc68:	10002f1e 	bne	r2,zero,dd28 <OSIntExit+0xe0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    dc6c:	0005303a 	rdctl	r2,status
    dc70:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    dc74:	e0fffe17 	ldw	r3,-8(fp)
    dc78:	00bfff84 	movi	r2,-2
    dc7c:	1884703a 	and	r2,r3,r2
    dc80:	1001703a 	wrctl	status,r2
  
  return context;
    dc84:	e0bffe17 	ldw	r2,-8(fp)
        OS_ENTER_CRITICAL();
    dc88:	e0bffd15 	stw	r2,-12(fp)
        if (OSIntNesting > 0) {                            /* Prevent OSIntNesting from wrapping       */
    dc8c:	d0a81903 	ldbu	r2,-24476(gp)
    dc90:	10803fcc 	andi	r2,r2,255
    dc94:	10000326 	beq	r2,zero,dca4 <OSIntExit+0x5c>
            OSIntNesting--;
    dc98:	d0a81903 	ldbu	r2,-24476(gp)
    dc9c:	10bfffc4 	addi	r2,r2,-1
    dca0:	d0a81905 	stb	r2,-24476(gp)
        }
        if (OSIntNesting == 0) {                           /* Reschedule only if all ISRs complete ... */
    dca4:	d0a81903 	ldbu	r2,-24476(gp)
    dca8:	10803fcc 	andi	r2,r2,255
    dcac:	10001a1e 	bne	r2,zero,dd18 <OSIntExit+0xd0>
            if (OSLockNesting == 0) {                      /* ... and not locked.                      */
    dcb0:	d0a80b03 	ldbu	r2,-24532(gp)
    dcb4:	10803fcc 	andi	r2,r2,255
    dcb8:	1000171e 	bne	r2,zero,dd18 <OSIntExit+0xd0>
                OS_SchedNew();
    dcbc:	000ecf00 	call	ecf0 <OS_SchedNew>
                if (OSPrioHighRdy != OSPrioCur) {          /* No Ctx Sw if current task is highest rdy */
    dcc0:	d0e80d03 	ldbu	r3,-24524(gp)
    dcc4:	d0a80d43 	ldbu	r2,-24523(gp)
    dcc8:	18c03fcc 	andi	r3,r3,255
    dccc:	10803fcc 	andi	r2,r2,255
    dcd0:	18801126 	beq	r3,r2,dd18 <OSIntExit+0xd0>
                    OSTCBHighRdy  = OSTCBPrioTbl[OSPrioHighRdy];
    dcd4:	d0a80d03 	ldbu	r2,-24524(gp)
    dcd8:	10c03fcc 	andi	r3,r2,255
    dcdc:	008000f4 	movhi	r2,3
    dce0:	10a11f04 	addi	r2,r2,-31620
    dce4:	18c7883a 	add	r3,r3,r3
    dce8:	18c7883a 	add	r3,r3,r3
    dcec:	10c5883a 	add	r2,r2,r3
    dcf0:	10800017 	ldw	r2,0(r2)
    dcf4:	d0a81515 	stw	r2,-24492(gp)
#if OS_TASK_PROFILE_EN > 0
                    OSTCBHighRdy->OSTCBCtxSwCtr++;         /* Inc. # of context switches to this task  */
    dcf8:	d0a81517 	ldw	r2,-24492(gp)
    dcfc:	10c00e17 	ldw	r3,56(r2)
    dd00:	18c00044 	addi	r3,r3,1
    dd04:	10c00e15 	stw	r3,56(r2)
#endif
                    OSCtxSwCtr++;                          /* Keep track of the number of ctx switches */
    dd08:	d0a81017 	ldw	r2,-24512(gp)
    dd0c:	10800044 	addi	r2,r2,1
    dd10:	d0a81015 	stw	r2,-24512(gp)
                    OSIntCtxSw();                          /* Perform interrupt level ctx switch       */
    dd14:	00182a40 	call	182a4 <OSCtxSw>
    dd18:	e0bffd17 	ldw	r2,-12(fp)
    dd1c:	e0bfff15 	stw	r2,-4(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    dd20:	e0bfff17 	ldw	r2,-4(fp)
    dd24:	1001703a 	wrctl	status,r2
                }
            }
        }
        OS_EXIT_CRITICAL();
    }
}
    dd28:	e037883a 	mov	sp,fp
    dd2c:	dfc00117 	ldw	ra,4(sp)
    dd30:	df000017 	ldw	fp,0(sp)
    dd34:	dec00204 	addi	sp,sp,8
    dd38:	f800283a 	ret

0000dd3c <OSSchedLock>:
*********************************************************************************************************
*/

#if OS_SCHED_LOCK_EN > 0
void  OSSchedLock (void)
{
    dd3c:	defffc04 	addi	sp,sp,-16
    dd40:	df000315 	stw	fp,12(sp)
    dd44:	df000304 	addi	fp,sp,12
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
    dd48:	e03ffd15 	stw	zero,-12(fp)
#endif



    if (OSRunning == OS_TRUE) {                  /* Make sure multitasking is running                  */
    dd4c:	d0a80b43 	ldbu	r2,-24531(gp)
    dd50:	10803fcc 	andi	r2,r2,255
    dd54:	10800058 	cmpnei	r2,r2,1
    dd58:	1000161e 	bne	r2,zero,ddb4 <OSSchedLock+0x78>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    dd5c:	0005303a 	rdctl	r2,status
    dd60:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    dd64:	e0fffe17 	ldw	r3,-8(fp)
    dd68:	00bfff84 	movi	r2,-2
    dd6c:	1884703a 	and	r2,r3,r2
    dd70:	1001703a 	wrctl	status,r2
  
  return context;
    dd74:	e0bffe17 	ldw	r2,-8(fp)
        OS_ENTER_CRITICAL();
    dd78:	e0bffd15 	stw	r2,-12(fp)
        if (OSIntNesting == 0) {                 /* Can't call from an ISR                             */
    dd7c:	d0a81903 	ldbu	r2,-24476(gp)
    dd80:	10803fcc 	andi	r2,r2,255
    dd84:	1000071e 	bne	r2,zero,dda4 <OSSchedLock+0x68>
            if (OSLockNesting < 255u) {          /* Prevent OSLockNesting from wrapping back to 0      */
    dd88:	d0a80b03 	ldbu	r2,-24532(gp)
    dd8c:	10803fcc 	andi	r2,r2,255
    dd90:	10803fe0 	cmpeqi	r2,r2,255
    dd94:	1000031e 	bne	r2,zero,dda4 <OSSchedLock+0x68>
                OSLockNesting++;                 /* Increment lock nesting level                       */
    dd98:	d0a80b03 	ldbu	r2,-24532(gp)
    dd9c:	10800044 	addi	r2,r2,1
    dda0:	d0a80b05 	stb	r2,-24532(gp)
    dda4:	e0bffd17 	ldw	r2,-12(fp)
    dda8:	e0bfff15 	stw	r2,-4(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    ddac:	e0bfff17 	ldw	r2,-4(fp)
    ddb0:	1001703a 	wrctl	status,r2
            }
        }
        OS_EXIT_CRITICAL();
    }
}
    ddb4:	e037883a 	mov	sp,fp
    ddb8:	df000017 	ldw	fp,0(sp)
    ddbc:	dec00104 	addi	sp,sp,4
    ddc0:	f800283a 	ret

0000ddc4 <OSSchedUnlock>:
*********************************************************************************************************
*/

#if OS_SCHED_LOCK_EN > 0
void  OSSchedUnlock (void)
{
    ddc4:	defff804 	addi	sp,sp,-32
    ddc8:	dfc00715 	stw	ra,28(sp)
    ddcc:	df000615 	stw	fp,24(sp)
    ddd0:	df000604 	addi	fp,sp,24
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
    ddd4:	e03ffa15 	stw	zero,-24(fp)
#endif



    if (OSRunning == OS_TRUE) {                            /* Make sure multitasking is running        */
    ddd8:	d0a80b43 	ldbu	r2,-24531(gp)
    dddc:	10803fcc 	andi	r2,r2,255
    dde0:	10800058 	cmpnei	r2,r2,1
    dde4:	1000281e 	bne	r2,zero,de88 <OSSchedUnlock+0xc4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    dde8:	0005303a 	rdctl	r2,status
    ddec:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    ddf0:	e0fffb17 	ldw	r3,-20(fp)
    ddf4:	00bfff84 	movi	r2,-2
    ddf8:	1884703a 	and	r2,r3,r2
    ddfc:	1001703a 	wrctl	status,r2
  
  return context;
    de00:	e0bffb17 	ldw	r2,-20(fp)
        OS_ENTER_CRITICAL();
    de04:	e0bffa15 	stw	r2,-24(fp)
        if (OSLockNesting > 0) {                           /* Do not decrement if already 0            */
    de08:	d0a80b03 	ldbu	r2,-24532(gp)
    de0c:	10803fcc 	andi	r2,r2,255
    de10:	10001926 	beq	r2,zero,de78 <OSSchedUnlock+0xb4>
            OSLockNesting--;                               /* Decrement lock nesting level             */
    de14:	d0a80b03 	ldbu	r2,-24532(gp)
    de18:	10bfffc4 	addi	r2,r2,-1
    de1c:	d0a80b05 	stb	r2,-24532(gp)
            if (OSLockNesting == 0) {                      /* See if scheduler is enabled and ...      */
    de20:	d0a80b03 	ldbu	r2,-24532(gp)
    de24:	10803fcc 	andi	r2,r2,255
    de28:	10000e1e 	bne	r2,zero,de64 <OSSchedUnlock+0xa0>
                if (OSIntNesting == 0) {                   /* ... not in an ISR                        */
    de2c:	d0a81903 	ldbu	r2,-24476(gp)
    de30:	10803fcc 	andi	r2,r2,255
    de34:	1000061e 	bne	r2,zero,de50 <OSSchedUnlock+0x8c>
    de38:	e0bffa17 	ldw	r2,-24(fp)
    de3c:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    de40:	e0bffc17 	ldw	r2,-16(fp)
    de44:	1001703a 	wrctl	status,r2
                    OS_EXIT_CRITICAL();
                    OS_Sched();                            /* See if a HPT is ready                    */
    de48:	000ec240 	call	ec24 <OS_Sched>
    de4c:	00000e06 	br	de88 <OSSchedUnlock+0xc4>
    de50:	e0bffa17 	ldw	r2,-24(fp)
    de54:	e0bffd15 	stw	r2,-12(fp)
    de58:	e0bffd17 	ldw	r2,-12(fp)
    de5c:	1001703a 	wrctl	status,r2
    de60:	00000906 	br	de88 <OSSchedUnlock+0xc4>
    de64:	e0bffa17 	ldw	r2,-24(fp)
    de68:	e0bffe15 	stw	r2,-8(fp)
    de6c:	e0bffe17 	ldw	r2,-8(fp)
    de70:	1001703a 	wrctl	status,r2
    de74:	00000406 	br	de88 <OSSchedUnlock+0xc4>
    de78:	e0bffa17 	ldw	r2,-24(fp)
    de7c:	e0bfff15 	stw	r2,-4(fp)
    de80:	e0bfff17 	ldw	r2,-4(fp)
    de84:	1001703a 	wrctl	status,r2
            }
        } else {
            OS_EXIT_CRITICAL();
        }
    }
}
    de88:	e037883a 	mov	sp,fp
    de8c:	dfc00117 	ldw	ra,4(sp)
    de90:	df000017 	ldw	fp,0(sp)
    de94:	dec00204 	addi	sp,sp,8
    de98:	f800283a 	ret

0000de9c <OSStart>:
*                 d_ Execute the task.
*********************************************************************************************************
*/

void  OSStart (void)
{
    de9c:	defffe04 	addi	sp,sp,-8
    dea0:	dfc00115 	stw	ra,4(sp)
    dea4:	df000015 	stw	fp,0(sp)
    dea8:	d839883a 	mov	fp,sp
    if (OSRunning == OS_FALSE) {
    deac:	d0a80b43 	ldbu	r2,-24531(gp)
    deb0:	10803fcc 	andi	r2,r2,255
    deb4:	10000f1e 	bne	r2,zero,def4 <OSStart+0x58>
        OS_SchedNew();                               /* Find highest priority's task priority number   */
    deb8:	000ecf00 	call	ecf0 <OS_SchedNew>
        OSPrioCur     = OSPrioHighRdy;
    debc:	d0a80d03 	ldbu	r2,-24524(gp)
    dec0:	d0a80d45 	stb	r2,-24523(gp)
        OSTCBHighRdy  = OSTCBPrioTbl[OSPrioHighRdy]; /* Point to highest priority task ready to run    */
    dec4:	d0a80d03 	ldbu	r2,-24524(gp)
    dec8:	10c03fcc 	andi	r3,r2,255
    decc:	008000f4 	movhi	r2,3
    ded0:	10a11f04 	addi	r2,r2,-31620
    ded4:	18c7883a 	add	r3,r3,r3
    ded8:	18c7883a 	add	r3,r3,r3
    dedc:	10c5883a 	add	r2,r2,r3
    dee0:	10800017 	ldw	r2,0(r2)
    dee4:	d0a81515 	stw	r2,-24492(gp)
        OSTCBCur      = OSTCBHighRdy;
    dee8:	d0a81517 	ldw	r2,-24492(gp)
    deec:	d0a81a15 	stw	r2,-24472(gp)
        OSStartHighRdy();                            /* Execute target specific code to start task     */
    def0:	00183300 	call	18330 <OSStartHighRdy>
    }
}
    def4:	e037883a 	mov	sp,fp
    def8:	dfc00117 	ldw	ra,4(sp)
    defc:	df000017 	ldw	fp,0(sp)
    df00:	dec00204 	addi	sp,sp,8
    df04:	f800283a 	ret

0000df08 <OSStatInit>:
*********************************************************************************************************
*/

#if OS_TASK_STAT_EN > 0
void  OSStatInit (void)
{
    df08:	defff904 	addi	sp,sp,-28
    df0c:	dfc00615 	stw	ra,24(sp)
    df10:	df000515 	stw	fp,20(sp)
    df14:	df000504 	addi	fp,sp,20
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
    df18:	e03ffb15 	stw	zero,-20(fp)
#endif



    OSTimeDly(2);                                /* Synchronize with clock tick                        */
    df1c:	01000084 	movi	r4,2
    df20:	0014a340 	call	14a34 <OSTimeDly>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    df24:	0005303a 	rdctl	r2,status
    df28:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    df2c:	e0fffc17 	ldw	r3,-16(fp)
    df30:	00bfff84 	movi	r2,-2
    df34:	1884703a 	and	r2,r3,r2
    df38:	1001703a 	wrctl	status,r2
  
  return context;
    df3c:	e0bffc17 	ldw	r2,-16(fp)
    OS_ENTER_CRITICAL();
    df40:	e0bffb15 	stw	r2,-20(fp)
    OSIdleCtr    = 0L;                           /* Clear idle counter                                 */
    df44:	d0280c15 	stw	zero,-24528(gp)
    df48:	e0bffb17 	ldw	r2,-20(fp)
    df4c:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    df50:	e0bffd17 	ldw	r2,-12(fp)
    df54:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    OSTimeDly(OS_TICKS_PER_SEC / 10);            /* Determine MAX. idle counter value for 1/10 second  */
    df58:	0009883a 	mov	r4,zero
    df5c:	0014a340 	call	14a34 <OSTimeDly>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    df60:	0005303a 	rdctl	r2,status
    df64:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    df68:	e0fffe17 	ldw	r3,-8(fp)
    df6c:	00bfff84 	movi	r2,-2
    df70:	1884703a 	and	r2,r3,r2
    df74:	1001703a 	wrctl	status,r2
  
  return context;
    df78:	e0bffe17 	ldw	r2,-8(fp)
    OS_ENTER_CRITICAL();
    df7c:	e0bffb15 	stw	r2,-20(fp)
    OSIdleCtrMax = OSIdleCtr;                    /* Store maximum idle counter count in 1/10 second    */
    df80:	d0a80c17 	ldw	r2,-24528(gp)
    df84:	d0a81115 	stw	r2,-24508(gp)
    OSStatRdy    = OS_TRUE;
    df88:	00800044 	movi	r2,1
    df8c:	d0a81d05 	stb	r2,-24460(gp)
    df90:	e0bffb17 	ldw	r2,-20(fp)
    df94:	e0bfff15 	stw	r2,-4(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    df98:	e0bfff17 	ldw	r2,-4(fp)
    df9c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
}
    dfa0:	e037883a 	mov	sp,fp
    dfa4:	dfc00117 	ldw	ra,4(sp)
    dfa8:	df000017 	ldw	fp,0(sp)
    dfac:	dec00204 	addi	sp,sp,8
    dfb0:	f800283a 	ret

0000dfb4 <OSTimeTick>:
* Returns    : none
*********************************************************************************************************
*/

void  OSTimeTick (void)
{
    dfb4:	defff704 	addi	sp,sp,-36
    dfb8:	dfc00815 	stw	ra,32(sp)
    dfbc:	df000715 	stw	fp,28(sp)
    dfc0:	df000704 	addi	fp,sp,28
    OS_TCB    *ptcb;
#if OS_TICK_STEP_EN > 0
    BOOLEAN    step;
#endif
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
    dfc4:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_TIME_TICK_HOOK_EN > 0
    OSTimeTickHook();                                      /* Call user definable hook                     */
    dfc8:	00185480 	call	18548 <OSTimeTickHook>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    dfcc:	0005303a 	rdctl	r2,status
    dfd0:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    dfd4:	e0fffc17 	ldw	r3,-16(fp)
    dfd8:	00bfff84 	movi	r2,-2
    dfdc:	1884703a 	and	r2,r3,r2
    dfe0:	1001703a 	wrctl	status,r2
  
  return context;
    dfe4:	e0bffc17 	ldw	r2,-16(fp)
#endif
#if OS_TIME_GET_SET_EN > 0
    OS_ENTER_CRITICAL();                                   /* Update the 32-bit tick counter               */
    dfe8:	e0bffb15 	stw	r2,-20(fp)
    OSTime++;
    dfec:	d0a81b17 	ldw	r2,-24468(gp)
    dff0:	10800044 	addi	r2,r2,1
    dff4:	d0a81b15 	stw	r2,-24468(gp)
    dff8:	e0bffb17 	ldw	r2,-20(fp)
    dffc:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    e000:	e0bffd17 	ldw	r2,-12(fp)
    e004:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
#endif
    if (OSRunning == OS_TRUE) {
    e008:	d0a80b43 	ldbu	r2,-24531(gp)
    e00c:	10803fcc 	andi	r2,r2,255
    e010:	10800058 	cmpnei	r2,r2,1
    e014:	1000691e 	bne	r2,zero,e1bc <OSTimeTick+0x208>
#if OS_TICK_STEP_EN > 0
        switch (OSTickStepState) {                         /* Determine whether we need to process a tick  */
    e018:	d0a80f03 	ldbu	r2,-24516(gp)
    e01c:	10803fcc 	andi	r2,r2,255
    e020:	10c00060 	cmpeqi	r3,r2,1
    e024:	1800061e 	bne	r3,zero,e040 <OSTimeTick+0x8c>
    e028:	10c000a0 	cmpeqi	r3,r2,2
    e02c:	1800061e 	bne	r3,zero,e048 <OSTimeTick+0x94>
    e030:	10000a1e 	bne	r2,zero,e05c <OSTimeTick+0xa8>
            case OS_TICK_STEP_DIS:                         /* Yes, stepping is disabled                    */
                 step = OS_TRUE;
    e034:	00800044 	movi	r2,1
    e038:	e0bffa05 	stb	r2,-24(fp)
                 break;
    e03c:	00000b06 	br	e06c <OSTimeTick+0xb8>

            case OS_TICK_STEP_WAIT:                        /* No,  waiting for uC/OS-View to set ...       */
                 step = OS_FALSE;                          /*      .. OSTickStepState to OS_TICK_STEP_ONCE */
    e040:	e03ffa05 	stb	zero,-24(fp)
                 break;
    e044:	00000906 	br	e06c <OSTimeTick+0xb8>

            case OS_TICK_STEP_ONCE:                        /* Yes, process tick once and wait for next ... */
                 step            = OS_TRUE;                /*      ... step command from uC/OS-View        */
    e048:	00800044 	movi	r2,1
    e04c:	e0bffa05 	stb	r2,-24(fp)
                 OSTickStepState = OS_TICK_STEP_WAIT;
    e050:	00800044 	movi	r2,1
    e054:	d0a80f05 	stb	r2,-24516(gp)
                 break;
    e058:	00000406 	br	e06c <OSTimeTick+0xb8>

            default:                                       /* Invalid case, correct situation              */
                 step            = OS_TRUE;
    e05c:	00800044 	movi	r2,1
    e060:	e0bffa05 	stb	r2,-24(fp)
                 OSTickStepState = OS_TICK_STEP_DIS;
    e064:	d0280f05 	stb	zero,-24516(gp)
                 break;
    e068:	0001883a 	nop
        }
        if (step == OS_FALSE) {                            /* Return if waiting for step command           */
    e06c:	e0bffa03 	ldbu	r2,-24(fp)
    e070:	1000011e 	bne	r2,zero,e078 <OSTimeTick+0xc4>
            return;
    e074:	00005106 	br	e1bc <OSTimeTick+0x208>
        }
#endif
        ptcb = OSTCBList;                                  /* Point at first TCB in TCB list               */
    e078:	d0a80e17 	ldw	r2,-24520(gp)
    e07c:	e0bff915 	stw	r2,-28(fp)
        while (ptcb->OSTCBPrio != OS_TASK_IDLE_PRIO) {     /* Go through all TCBs in TCB list              */
    e080:	00004906 	br	e1a8 <OSTimeTick+0x1f4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    e084:	0005303a 	rdctl	r2,status
    e088:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    e08c:	e0fffe17 	ldw	r3,-8(fp)
    e090:	00bfff84 	movi	r2,-2
    e094:	1884703a 	and	r2,r3,r2
    e098:	1001703a 	wrctl	status,r2
  
  return context;
    e09c:	e0bffe17 	ldw	r2,-8(fp)
            OS_ENTER_CRITICAL();
    e0a0:	e0bffb15 	stw	r2,-20(fp)
            if (ptcb->OSTCBDly != 0) {                     /* No, Delayed or waiting for event with TO     */
    e0a4:	e0bff917 	ldw	r2,-28(fp)
    e0a8:	10800b8b 	ldhu	r2,46(r2)
    e0ac:	10bfffcc 	andi	r2,r2,65535
    e0b0:	10003626 	beq	r2,zero,e18c <OSTimeTick+0x1d8>
                if (--ptcb->OSTCBDly == 0) {               /* Decrement nbr of ticks to end of delay       */
    e0b4:	e0bff917 	ldw	r2,-28(fp)
    e0b8:	10800b8b 	ldhu	r2,46(r2)
    e0bc:	10bfffc4 	addi	r2,r2,-1
    e0c0:	1007883a 	mov	r3,r2
    e0c4:	e0bff917 	ldw	r2,-28(fp)
    e0c8:	10c00b8d 	sth	r3,46(r2)
    e0cc:	e0bff917 	ldw	r2,-28(fp)
    e0d0:	10800b8b 	ldhu	r2,46(r2)
    e0d4:	10bfffcc 	andi	r2,r2,65535
    e0d8:	10002c1e 	bne	r2,zero,e18c <OSTimeTick+0x1d8>
                                                           /* Check for timeout                            */
                    if ((ptcb->OSTCBStat & OS_STAT_PEND_ANY) != OS_STAT_RDY) {
    e0dc:	e0bff917 	ldw	r2,-28(fp)
    e0e0:	10800c03 	ldbu	r2,48(r2)
    e0e4:	10803fcc 	andi	r2,r2,255
    e0e8:	10800dcc 	andi	r2,r2,55
    e0ec:	10000b26 	beq	r2,zero,e11c <OSTimeTick+0x168>
                        ptcb->OSTCBStat  &= ~(INT8U)OS_STAT_PEND_ANY;          /* Yes, Clear status flag   */
    e0f0:	e0bff917 	ldw	r2,-28(fp)
    e0f4:	10c00c03 	ldbu	r3,48(r2)
    e0f8:	00bff204 	movi	r2,-56
    e0fc:	1884703a 	and	r2,r3,r2
    e100:	1007883a 	mov	r3,r2
    e104:	e0bff917 	ldw	r2,-28(fp)
    e108:	10c00c05 	stb	r3,48(r2)
                        ptcb->OSTCBStatPend = OS_STAT_PEND_TO;                 /* Indicate PEND timeout    */
    e10c:	e0bff917 	ldw	r2,-28(fp)
    e110:	00c00044 	movi	r3,1
    e114:	10c00c45 	stb	r3,49(r2)
    e118:	00000206 	br	e124 <OSTimeTick+0x170>
                    } else {
                        ptcb->OSTCBStatPend = OS_STAT_PEND_OK;
    e11c:	e0bff917 	ldw	r2,-28(fp)
    e120:	10000c45 	stb	zero,49(r2)
                    }

                    if ((ptcb->OSTCBStat & OS_STAT_SUSPEND) == OS_STAT_RDY) {  /* Is task suspended?       */
    e124:	e0bff917 	ldw	r2,-28(fp)
    e128:	10800c03 	ldbu	r2,48(r2)
    e12c:	10803fcc 	andi	r2,r2,255
    e130:	1080020c 	andi	r2,r2,8
    e134:	1000151e 	bne	r2,zero,e18c <OSTimeTick+0x1d8>
                        OSRdyGrp               |= ptcb->OSTCBBitY;             /* No,  Make ready          */
    e138:	e0bff917 	ldw	r2,-28(fp)
    e13c:	10c00d83 	ldbu	r3,54(r2)
    e140:	d0a81703 	ldbu	r2,-24484(gp)
    e144:	1884b03a 	or	r2,r3,r2
    e148:	d0a81705 	stb	r2,-24484(gp)
                        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
    e14c:	e0bff917 	ldw	r2,-28(fp)
    e150:	10800d03 	ldbu	r2,52(r2)
    e154:	10c03fcc 	andi	r3,r2,255
    e158:	e0bff917 	ldw	r2,-28(fp)
    e15c:	10800d03 	ldbu	r2,52(r2)
    e160:	11003fcc 	andi	r4,r2,255
    e164:	d0a81744 	addi	r2,gp,-24483
    e168:	2085883a 	add	r2,r4,r2
    e16c:	11000003 	ldbu	r4,0(r2)
    e170:	e0bff917 	ldw	r2,-28(fp)
    e174:	10800d43 	ldbu	r2,53(r2)
    e178:	2084b03a 	or	r2,r4,r2
    e17c:	1009883a 	mov	r4,r2
    e180:	d0a81744 	addi	r2,gp,-24483
    e184:	1885883a 	add	r2,r3,r2
    e188:	11000005 	stb	r4,0(r2)
                    }
                }
            }
            ptcb = ptcb->OSTCBNext;                        /* Point at next TCB in TCB list                */
    e18c:	e0bff917 	ldw	r2,-28(fp)
    e190:	10800517 	ldw	r2,20(r2)
    e194:	e0bff915 	stw	r2,-28(fp)
    e198:	e0bffb17 	ldw	r2,-20(fp)
    e19c:	e0bfff15 	stw	r2,-4(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    e1a0:	e0bfff17 	ldw	r2,-4(fp)
    e1a4:	1001703a 	wrctl	status,r2
        if (step == OS_FALSE) {                            /* Return if waiting for step command           */
            return;
        }
#endif
        ptcb = OSTCBList;                                  /* Point at first TCB in TCB list               */
        while (ptcb->OSTCBPrio != OS_TASK_IDLE_PRIO) {     /* Go through all TCBs in TCB list              */
    e1a8:	e0bff917 	ldw	r2,-28(fp)
    e1ac:	10800c83 	ldbu	r2,50(r2)
    e1b0:	10803fcc 	andi	r2,r2,255
    e1b4:	10800518 	cmpnei	r2,r2,20
    e1b8:	103fb21e 	bne	r2,zero,e084 <__alt_mem_Flash_flash_data+0xf400e084>
            }
            ptcb = ptcb->OSTCBNext;                        /* Point at next TCB in TCB list                */
            OS_EXIT_CRITICAL();
        }
    }
}
    e1bc:	e037883a 	mov	sp,fp
    e1c0:	dfc00117 	ldw	ra,4(sp)
    e1c4:	df000017 	ldw	fp,0(sp)
    e1c8:	dec00204 	addi	sp,sp,8
    e1cc:	f800283a 	ret

0000e1d0 <OSVersion>:
* Returns    : the version number of uC/OS-II multiplied by 100.
*********************************************************************************************************
*/

INT16U  OSVersion (void)
{
    e1d0:	deffff04 	addi	sp,sp,-4
    e1d4:	df000015 	stw	fp,0(sp)
    e1d8:	d839883a 	mov	fp,sp
    return (OS_VERSION);
    e1dc:	00804784 	movi	r2,286
}
    e1e0:	e037883a 	mov	sp,fp
    e1e4:	df000017 	ldw	fp,0(sp)
    e1e8:	dec00104 	addi	sp,sp,4
    e1ec:	f800283a 	ret

0000e1f0 <OS_Dummy>:
*********************************************************************************************************
*/

#if OS_TASK_DEL_EN > 0
void  OS_Dummy (void)
{
    e1f0:	deffff04 	addi	sp,sp,-4
    e1f4:	df000015 	stw	fp,0(sp)
    e1f8:	d839883a 	mov	fp,sp
}
    e1fc:	e037883a 	mov	sp,fp
    e200:	df000017 	ldw	fp,0(sp)
    e204:	dec00104 	addi	sp,sp,4
    e208:	f800283a 	ret

0000e20c <OS_EventTaskRdy>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
INT8U  OS_EventTaskRdy (OS_EVENT *pevent, void *pmsg, INT8U msk, INT8U pend_stat)
{
    e20c:	defff804 	addi	sp,sp,-32
    e210:	dfc00715 	stw	ra,28(sp)
    e214:	df000615 	stw	fp,24(sp)
    e218:	df000604 	addi	fp,sp,24
    e21c:	e13ffc15 	stw	r4,-16(fp)
    e220:	e17ffd15 	stw	r5,-12(fp)
    e224:	3007883a 	mov	r3,r6
    e228:	3805883a 	mov	r2,r7
    e22c:	e0fffe05 	stb	r3,-8(fp)
    e230:	e0bfff05 	stb	r2,-4(fp)
    INT16U  *ptbl;
#endif


#if OS_LOWEST_PRIO <= 63
    y    = OSUnMapTbl[pevent->OSEventGrp];              /* Find HPT waiting for message                */
    e234:	e0bffc17 	ldw	r2,-16(fp)
    e238:	10800283 	ldbu	r2,10(r2)
    e23c:	10c03fcc 	andi	r3,r2,255
    e240:	008000b4 	movhi	r2,2
    e244:	10a42704 	addi	r2,r2,-28516
    e248:	10c5883a 	add	r2,r2,r3
    e24c:	10800003 	ldbu	r2,0(r2)
    e250:	e0bffa05 	stb	r2,-24(fp)
    x    = OSUnMapTbl[pevent->OSEventTbl[y]];
    e254:	e0bffa03 	ldbu	r2,-24(fp)
    e258:	e0fffc17 	ldw	r3,-16(fp)
    e25c:	1885883a 	add	r2,r3,r2
    e260:	10800204 	addi	r2,r2,8
    e264:	108000c3 	ldbu	r2,3(r2)
    e268:	10c03fcc 	andi	r3,r2,255
    e26c:	008000b4 	movhi	r2,2
    e270:	10a42704 	addi	r2,r2,-28516
    e274:	10c5883a 	add	r2,r2,r3
    e278:	10800003 	ldbu	r2,0(r2)
    e27c:	e0bffa45 	stb	r2,-23(fp)
    prio = (INT8U)((y << 3) + x);                       /* Find priority of task getting the msg       */
    e280:	e0bffa03 	ldbu	r2,-24(fp)
    e284:	100490fa 	slli	r2,r2,3
    e288:	1007883a 	mov	r3,r2
    e28c:	e0bffa43 	ldbu	r2,-23(fp)
    e290:	1885883a 	add	r2,r3,r2
    e294:	e0bffa85 	stb	r2,-22(fp)
        x = OSUnMapTbl[(*ptbl >> 8) & 0xFF] + 8;
    }
    prio = (INT8U)((y << 4) + x);                       /* Find priority of task getting the msg       */
#endif

    ptcb                  =  OSTCBPrioTbl[prio];        /* Point to this task's OS_TCB                 */
    e298:	e0fffa83 	ldbu	r3,-22(fp)
    e29c:	008000f4 	movhi	r2,3
    e2a0:	10a11f04 	addi	r2,r2,-31620
    e2a4:	18c7883a 	add	r3,r3,r3
    e2a8:	18c7883a 	add	r3,r3,r3
    e2ac:	10c5883a 	add	r2,r2,r3
    e2b0:	10800017 	ldw	r2,0(r2)
    e2b4:	e0bffb15 	stw	r2,-20(fp)
    ptcb->OSTCBDly        =  0;                         /* Prevent OSTimeTick() from readying task     */
    e2b8:	e0bffb17 	ldw	r2,-20(fp)
    e2bc:	10000b8d 	sth	zero,46(r2)
#if ((OS_Q_EN > 0) && (OS_MAX_QS > 0)) || (OS_MBOX_EN > 0)
    ptcb->OSTCBMsg        =  pmsg;                      /* Send message directly to waiting task       */
    e2c0:	e0bffb17 	ldw	r2,-20(fp)
    e2c4:	e0fffd17 	ldw	r3,-12(fp)
    e2c8:	10c00915 	stw	r3,36(r2)
#else
    pmsg                  =  pmsg;                      /* Prevent compiler warning if not used        */
#endif
    ptcb->OSTCBStat      &= ~msk;                       /* Clear bit associated with event type        */
    e2cc:	e0bffb17 	ldw	r2,-20(fp)
    e2d0:	10800c03 	ldbu	r2,48(r2)
    e2d4:	1007883a 	mov	r3,r2
    e2d8:	e0bffe03 	ldbu	r2,-8(fp)
    e2dc:	0084303a 	nor	r2,zero,r2
    e2e0:	1884703a 	and	r2,r3,r2
    e2e4:	1007883a 	mov	r3,r2
    e2e8:	e0bffb17 	ldw	r2,-20(fp)
    e2ec:	10c00c05 	stb	r3,48(r2)
    ptcb->OSTCBStatPend   =  pend_stat;                 /* Set pend status of post or abort            */
    e2f0:	e0bffb17 	ldw	r2,-20(fp)
    e2f4:	e0ffff03 	ldbu	r3,-4(fp)
    e2f8:	10c00c45 	stb	r3,49(r2)
                                                        /* See if task is ready (could be susp'd)      */
    if ((ptcb->OSTCBStat &   OS_STAT_SUSPEND) == OS_STAT_RDY) {
    e2fc:	e0bffb17 	ldw	r2,-20(fp)
    e300:	10800c03 	ldbu	r2,48(r2)
    e304:	10803fcc 	andi	r2,r2,255
    e308:	1080020c 	andi	r2,r2,8
    e30c:	1000111e 	bne	r2,zero,e354 <OS_EventTaskRdy+0x148>
        OSRdyGrp         |=  ptcb->OSTCBBitY;           /* Put task in the ready to run list           */
    e310:	e0bffb17 	ldw	r2,-20(fp)
    e314:	10c00d83 	ldbu	r3,54(r2)
    e318:	d0a81703 	ldbu	r2,-24484(gp)
    e31c:	1884b03a 	or	r2,r3,r2
    e320:	d0a81705 	stb	r2,-24484(gp)
        OSRdyTbl[y]      |=  ptcb->OSTCBBitX;
    e324:	e0fffa03 	ldbu	r3,-24(fp)
    e328:	e13ffa03 	ldbu	r4,-24(fp)
    e32c:	d0a81744 	addi	r2,gp,-24483
    e330:	2085883a 	add	r2,r4,r2
    e334:	11000003 	ldbu	r4,0(r2)
    e338:	e0bffb17 	ldw	r2,-20(fp)
    e33c:	10800d43 	ldbu	r2,53(r2)
    e340:	2084b03a 	or	r2,r4,r2
    e344:	1009883a 	mov	r4,r2
    e348:	d0a81744 	addi	r2,gp,-24483
    e34c:	1885883a 	add	r2,r3,r2
    e350:	11000005 	stb	r4,0(r2)
    }

    OS_EventTaskRemove(ptcb, pevent);                   /* Remove this task from event   wait list     */
    e354:	e13ffb17 	ldw	r4,-20(fp)
    e358:	e17ffc17 	ldw	r5,-16(fp)
    e35c:	000e5fc0 	call	e5fc <OS_EventTaskRemove>
#if (OS_EVENT_MULTI_EN > 0)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {   /* Remove this task from events' wait lists    */
    e360:	e0bffb17 	ldw	r2,-20(fp)
    e364:	10800817 	ldw	r2,32(r2)
    e368:	10000826 	beq	r2,zero,e38c <OS_EventTaskRdy+0x180>
        OS_EventTaskRemoveMulti(ptcb, ptcb->OSTCBEventMultiPtr);
    e36c:	e0bffb17 	ldw	r2,-20(fp)
    e370:	10800817 	ldw	r2,32(r2)
    e374:	e13ffb17 	ldw	r4,-20(fp)
    e378:	100b883a 	mov	r5,r2
    e37c:	000e6b00 	call	e6b0 <OS_EventTaskRemoveMulti>
        ptcb->OSTCBEventPtr       = (OS_EVENT  *)pevent;/* Return event as first multi-pend event ready*/
    e380:	e0bffb17 	ldw	r2,-20(fp)
    e384:	e0fffc17 	ldw	r3,-16(fp)
    e388:	10c00715 	stw	r3,28(r2)
    }
#endif

    return (prio);
    e38c:	e0bffa83 	ldbu	r2,-22(fp)
}
    e390:	e037883a 	mov	sp,fp
    e394:	dfc00117 	ldw	ra,4(sp)
    e398:	df000017 	ldw	fp,0(sp)
    e39c:	dec00204 	addi	sp,sp,8
    e3a0:	f800283a 	ret

0000e3a4 <OS_EventTaskWait>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
void  OS_EventTaskWait (OS_EVENT *pevent)
{
    e3a4:	defffd04 	addi	sp,sp,-12
    e3a8:	df000215 	stw	fp,8(sp)
    e3ac:	df000204 	addi	fp,sp,8
    e3b0:	e13fff15 	stw	r4,-4(fp)
    INT8U  y;


    OSTCBCur->OSTCBEventPtr               = pevent;                 /* Store ptr to ECB in TCB         */
    e3b4:	d0a81a17 	ldw	r2,-24472(gp)
    e3b8:	e0ffff17 	ldw	r3,-4(fp)
    e3bc:	10c00715 	stw	r3,28(r2)

    pevent->OSEventTbl[OSTCBCur->OSTCBY] |= OSTCBCur->OSTCBBitX;    /* Put task in waiting list        */
    e3c0:	d0a81a17 	ldw	r2,-24472(gp)
    e3c4:	10800d03 	ldbu	r2,52(r2)
    e3c8:	10803fcc 	andi	r2,r2,255
    e3cc:	d0e81a17 	ldw	r3,-24472(gp)
    e3d0:	18c00d03 	ldbu	r3,52(r3)
    e3d4:	18c03fcc 	andi	r3,r3,255
    e3d8:	e13fff17 	ldw	r4,-4(fp)
    e3dc:	20c7883a 	add	r3,r4,r3
    e3e0:	18c00204 	addi	r3,r3,8
    e3e4:	190000c3 	ldbu	r4,3(r3)
    e3e8:	d0e81a17 	ldw	r3,-24472(gp)
    e3ec:	18c00d43 	ldbu	r3,53(r3)
    e3f0:	20c6b03a 	or	r3,r4,r3
    e3f4:	1809883a 	mov	r4,r3
    e3f8:	e0ffff17 	ldw	r3,-4(fp)
    e3fc:	1885883a 	add	r2,r3,r2
    e400:	10800204 	addi	r2,r2,8
    e404:	110000c5 	stb	r4,3(r2)
    pevent->OSEventGrp                   |= OSTCBCur->OSTCBBitY;
    e408:	e0bfff17 	ldw	r2,-4(fp)
    e40c:	10c00283 	ldbu	r3,10(r2)
    e410:	d0a81a17 	ldw	r2,-24472(gp)
    e414:	10800d83 	ldbu	r2,54(r2)
    e418:	1884b03a 	or	r2,r3,r2
    e41c:	1007883a 	mov	r3,r2
    e420:	e0bfff17 	ldw	r2,-4(fp)
    e424:	10c00285 	stb	r3,10(r2)

    y             =  OSTCBCur->OSTCBY;            /* Task no longer ready                              */
    e428:	d0a81a17 	ldw	r2,-24472(gp)
    e42c:	10800d03 	ldbu	r2,52(r2)
    e430:	e0bffe05 	stb	r2,-8(fp)
    OSRdyTbl[y]  &= ~OSTCBCur->OSTCBBitX;
    e434:	e0fffe03 	ldbu	r3,-8(fp)
    e438:	e13ffe03 	ldbu	r4,-8(fp)
    e43c:	d0a81744 	addi	r2,gp,-24483
    e440:	2085883a 	add	r2,r4,r2
    e444:	10800003 	ldbu	r2,0(r2)
    e448:	1009883a 	mov	r4,r2
    e44c:	d0a81a17 	ldw	r2,-24472(gp)
    e450:	10800d43 	ldbu	r2,53(r2)
    e454:	0084303a 	nor	r2,zero,r2
    e458:	2084703a 	and	r2,r4,r2
    e45c:	1009883a 	mov	r4,r2
    e460:	d0a81744 	addi	r2,gp,-24483
    e464:	1885883a 	add	r2,r3,r2
    e468:	11000005 	stb	r4,0(r2)
    if (OSRdyTbl[y] == 0) {
    e46c:	e0fffe03 	ldbu	r3,-8(fp)
    e470:	d0a81744 	addi	r2,gp,-24483
    e474:	1885883a 	add	r2,r3,r2
    e478:	10800003 	ldbu	r2,0(r2)
    e47c:	10803fcc 	andi	r2,r2,255
    e480:	1000071e 	bne	r2,zero,e4a0 <OS_EventTaskWait+0xfc>
        OSRdyGrp &= ~OSTCBCur->OSTCBBitY;         /* Clear event grp bit if this was only task pending */
    e484:	d0a81a17 	ldw	r2,-24472(gp)
    e488:	10800d83 	ldbu	r2,54(r2)
    e48c:	0084303a 	nor	r2,zero,r2
    e490:	1007883a 	mov	r3,r2
    e494:	d0a81703 	ldbu	r2,-24484(gp)
    e498:	1884703a 	and	r2,r3,r2
    e49c:	d0a81705 	stb	r2,-24484(gp)
    }
}
    e4a0:	e037883a 	mov	sp,fp
    e4a4:	df000017 	ldw	fp,0(sp)
    e4a8:	dec00104 	addi	sp,sp,4
    e4ac:	f800283a 	ret

0000e4b0 <OS_EventTaskWaitMulti>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if ((OS_EVENT_EN) && (OS_EVENT_MULTI_EN > 0))
void  OS_EventTaskWaitMulti (OS_EVENT **pevents_wait)
{
    e4b0:	defffb04 	addi	sp,sp,-20
    e4b4:	df000415 	stw	fp,16(sp)
    e4b8:	df000404 	addi	fp,sp,16
    e4bc:	e13fff15 	stw	r4,-4(fp)
    OS_EVENT **pevents;
    OS_EVENT  *pevent;
    INT8U      y;


    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;
    e4c0:	d0a81a17 	ldw	r2,-24472(gp)
    e4c4:	10000715 	stw	zero,28(r2)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)pevents_wait;       /* Store ptr to ECBs in TCB        */
    e4c8:	d0a81a17 	ldw	r2,-24472(gp)
    e4cc:	e0ffff17 	ldw	r3,-4(fp)
    e4d0:	10c00815 	stw	r3,32(r2)

    pevents =  pevents_wait;
    e4d4:	e0bfff17 	ldw	r2,-4(fp)
    e4d8:	e0bffc15 	stw	r2,-16(fp)
    pevent  = *pevents;
    e4dc:	e0bffc17 	ldw	r2,-16(fp)
    e4e0:	10800017 	ldw	r2,0(r2)
    e4e4:	e0bffd15 	stw	r2,-12(fp)
    while (pevent != (OS_EVENT *)0) {                               /* Put task in waiting lists       */
    e4e8:	00002006 	br	e56c <OS_EventTaskWaitMulti+0xbc>
        pevent->OSEventTbl[OSTCBCur->OSTCBY] |= OSTCBCur->OSTCBBitX;
    e4ec:	d0a81a17 	ldw	r2,-24472(gp)
    e4f0:	10800d03 	ldbu	r2,52(r2)
    e4f4:	10803fcc 	andi	r2,r2,255
    e4f8:	d0e81a17 	ldw	r3,-24472(gp)
    e4fc:	18c00d03 	ldbu	r3,52(r3)
    e500:	18c03fcc 	andi	r3,r3,255
    e504:	e13ffd17 	ldw	r4,-12(fp)
    e508:	20c7883a 	add	r3,r4,r3
    e50c:	18c00204 	addi	r3,r3,8
    e510:	190000c3 	ldbu	r4,3(r3)
    e514:	d0e81a17 	ldw	r3,-24472(gp)
    e518:	18c00d43 	ldbu	r3,53(r3)
    e51c:	20c6b03a 	or	r3,r4,r3
    e520:	1809883a 	mov	r4,r3
    e524:	e0fffd17 	ldw	r3,-12(fp)
    e528:	1885883a 	add	r2,r3,r2
    e52c:	10800204 	addi	r2,r2,8
    e530:	110000c5 	stb	r4,3(r2)
        pevent->OSEventGrp                   |= OSTCBCur->OSTCBBitY;
    e534:	e0bffd17 	ldw	r2,-12(fp)
    e538:	10c00283 	ldbu	r3,10(r2)
    e53c:	d0a81a17 	ldw	r2,-24472(gp)
    e540:	10800d83 	ldbu	r2,54(r2)
    e544:	1884b03a 	or	r2,r3,r2
    e548:	1007883a 	mov	r3,r2
    e54c:	e0bffd17 	ldw	r2,-12(fp)
    e550:	10c00285 	stb	r3,10(r2)
        pevents++;
    e554:	e0bffc17 	ldw	r2,-16(fp)
    e558:	10800104 	addi	r2,r2,4
    e55c:	e0bffc15 	stw	r2,-16(fp)
        pevent = *pevents;
    e560:	e0bffc17 	ldw	r2,-16(fp)
    e564:	10800017 	ldw	r2,0(r2)
    e568:	e0bffd15 	stw	r2,-12(fp)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)pevents_wait;       /* Store ptr to ECBs in TCB        */

    pevents =  pevents_wait;
    pevent  = *pevents;
    while (pevent != (OS_EVENT *)0) {                               /* Put task in waiting lists       */
    e56c:	e0bffd17 	ldw	r2,-12(fp)
    e570:	103fde1e 	bne	r2,zero,e4ec <__alt_mem_Flash_flash_data+0xf400e4ec>
        pevent->OSEventGrp                   |= OSTCBCur->OSTCBBitY;
        pevents++;
        pevent = *pevents;
    }

    y             =  OSTCBCur->OSTCBY;            /* Task no longer ready                              */
    e574:	d0a81a17 	ldw	r2,-24472(gp)
    e578:	10800d03 	ldbu	r2,52(r2)
    e57c:	e0bffe05 	stb	r2,-8(fp)
    OSRdyTbl[y]  &= ~OSTCBCur->OSTCBBitX;
    e580:	e0fffe03 	ldbu	r3,-8(fp)
    e584:	e13ffe03 	ldbu	r4,-8(fp)
    e588:	d0a81744 	addi	r2,gp,-24483
    e58c:	2085883a 	add	r2,r4,r2
    e590:	10800003 	ldbu	r2,0(r2)
    e594:	1009883a 	mov	r4,r2
    e598:	d0a81a17 	ldw	r2,-24472(gp)
    e59c:	10800d43 	ldbu	r2,53(r2)
    e5a0:	0084303a 	nor	r2,zero,r2
    e5a4:	2084703a 	and	r2,r4,r2
    e5a8:	1009883a 	mov	r4,r2
    e5ac:	d0a81744 	addi	r2,gp,-24483
    e5b0:	1885883a 	add	r2,r3,r2
    e5b4:	11000005 	stb	r4,0(r2)
    if (OSRdyTbl[y] == 0) {
    e5b8:	e0fffe03 	ldbu	r3,-8(fp)
    e5bc:	d0a81744 	addi	r2,gp,-24483
    e5c0:	1885883a 	add	r2,r3,r2
    e5c4:	10800003 	ldbu	r2,0(r2)
    e5c8:	10803fcc 	andi	r2,r2,255
    e5cc:	1000071e 	bne	r2,zero,e5ec <OS_EventTaskWaitMulti+0x13c>
        OSRdyGrp &= ~OSTCBCur->OSTCBBitY;         /* Clear event grp bit if this was only task pending */
    e5d0:	d0a81a17 	ldw	r2,-24472(gp)
    e5d4:	10800d83 	ldbu	r2,54(r2)
    e5d8:	0084303a 	nor	r2,zero,r2
    e5dc:	1007883a 	mov	r3,r2
    e5e0:	d0a81703 	ldbu	r2,-24484(gp)
    e5e4:	1884703a 	and	r2,r3,r2
    e5e8:	d0a81705 	stb	r2,-24484(gp)
    }
}
    e5ec:	e037883a 	mov	sp,fp
    e5f0:	df000017 	ldw	fp,0(sp)
    e5f4:	dec00104 	addi	sp,sp,4
    e5f8:	f800283a 	ret

0000e5fc <OS_EventTaskRemove>:
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
void  OS_EventTaskRemove (OS_TCB   *ptcb,
                          OS_EVENT *pevent)
{
    e5fc:	defffc04 	addi	sp,sp,-16
    e600:	df000315 	stw	fp,12(sp)
    e604:	df000304 	addi	fp,sp,12
    e608:	e13ffe15 	stw	r4,-8(fp)
    e60c:	e17fff15 	stw	r5,-4(fp)
    INT8U  y;


    y                       =  ptcb->OSTCBY;
    e610:	e0bffe17 	ldw	r2,-8(fp)
    e614:	10800d03 	ldbu	r2,52(r2)
    e618:	e0bffd05 	stb	r2,-12(fp)
    pevent->OSEventTbl[y]  &= ~ptcb->OSTCBBitX;         /* Remove task from wait list                  */
    e61c:	e0bffd03 	ldbu	r2,-12(fp)
    e620:	e0fffd03 	ldbu	r3,-12(fp)
    e624:	e13fff17 	ldw	r4,-4(fp)
    e628:	20c7883a 	add	r3,r4,r3
    e62c:	18c00204 	addi	r3,r3,8
    e630:	18c000c3 	ldbu	r3,3(r3)
    e634:	1809883a 	mov	r4,r3
    e638:	e0fffe17 	ldw	r3,-8(fp)
    e63c:	18c00d43 	ldbu	r3,53(r3)
    e640:	00c6303a 	nor	r3,zero,r3
    e644:	20c6703a 	and	r3,r4,r3
    e648:	1809883a 	mov	r4,r3
    e64c:	e0ffff17 	ldw	r3,-4(fp)
    e650:	1885883a 	add	r2,r3,r2
    e654:	10800204 	addi	r2,r2,8
    e658:	110000c5 	stb	r4,3(r2)
    if (pevent->OSEventTbl[y] == 0) {
    e65c:	e0bffd03 	ldbu	r2,-12(fp)
    e660:	e0ffff17 	ldw	r3,-4(fp)
    e664:	1885883a 	add	r2,r3,r2
    e668:	10800204 	addi	r2,r2,8
    e66c:	108000c3 	ldbu	r2,3(r2)
    e670:	10803fcc 	andi	r2,r2,255
    e674:	10000a1e 	bne	r2,zero,e6a0 <OS_EventTaskRemove+0xa4>
        pevent->OSEventGrp &= ~ptcb->OSTCBBitY;
    e678:	e0bfff17 	ldw	r2,-4(fp)
    e67c:	10800283 	ldbu	r2,10(r2)
    e680:	1007883a 	mov	r3,r2
    e684:	e0bffe17 	ldw	r2,-8(fp)
    e688:	10800d83 	ldbu	r2,54(r2)
    e68c:	0084303a 	nor	r2,zero,r2
    e690:	1884703a 	and	r2,r3,r2
    e694:	1007883a 	mov	r3,r2
    e698:	e0bfff17 	ldw	r2,-4(fp)
    e69c:	10c00285 	stb	r3,10(r2)
    }
}
    e6a0:	e037883a 	mov	sp,fp
    e6a4:	df000017 	ldw	fp,0(sp)
    e6a8:	dec00104 	addi	sp,sp,4
    e6ac:	f800283a 	ret

0000e6b0 <OS_EventTaskRemoveMulti>:
*********************************************************************************************************
*/
#if ((OS_EVENT_EN) && (OS_EVENT_MULTI_EN > 0))
void  OS_EventTaskRemoveMulti (OS_TCB    *ptcb,
                               OS_EVENT **pevents_multi)
{
    e6b0:	defffa04 	addi	sp,sp,-24
    e6b4:	df000515 	stw	fp,20(sp)
    e6b8:	df000504 	addi	fp,sp,20
    e6bc:	e13ffe15 	stw	r4,-8(fp)
    e6c0:	e17fff15 	stw	r5,-4(fp)
    INT16U     bity;
    INT16U     bitx;
#endif


    y       =  ptcb->OSTCBY;
    e6c4:	e0bffe17 	ldw	r2,-8(fp)
    e6c8:	10800d03 	ldbu	r2,52(r2)
    e6cc:	e0bffd05 	stb	r2,-12(fp)
    bity    =  ptcb->OSTCBBitY;
    e6d0:	e0bffe17 	ldw	r2,-8(fp)
    e6d4:	10800d83 	ldbu	r2,54(r2)
    e6d8:	e0bffd45 	stb	r2,-11(fp)
    bitx    =  ptcb->OSTCBBitX;
    e6dc:	e0bffe17 	ldw	r2,-8(fp)
    e6e0:	10800d43 	ldbu	r2,53(r2)
    e6e4:	e0bffd85 	stb	r2,-10(fp)
    pevents =  pevents_multi;
    e6e8:	e0bfff17 	ldw	r2,-4(fp)
    e6ec:	e0bffb15 	stw	r2,-20(fp)
    pevent  = *pevents;
    e6f0:	e0bffb17 	ldw	r2,-20(fp)
    e6f4:	10800017 	ldw	r2,0(r2)
    e6f8:	e0bffc15 	stw	r2,-16(fp)
    while (pevent != (OS_EVENT *)0) {                   /* Remove task from all events' wait lists     */
    e6fc:	00002506 	br	e794 <OS_EventTaskRemoveMulti+0xe4>
        pevent->OSEventTbl[y]  &= ~bitx;
    e700:	e0bffd03 	ldbu	r2,-12(fp)
    e704:	e0fffd03 	ldbu	r3,-12(fp)
    e708:	e13ffc17 	ldw	r4,-16(fp)
    e70c:	20c7883a 	add	r3,r4,r3
    e710:	18c00204 	addi	r3,r3,8
    e714:	18c000c3 	ldbu	r3,3(r3)
    e718:	1809883a 	mov	r4,r3
    e71c:	e0fffd83 	ldbu	r3,-10(fp)
    e720:	00c6303a 	nor	r3,zero,r3
    e724:	20c6703a 	and	r3,r4,r3
    e728:	1809883a 	mov	r4,r3
    e72c:	e0fffc17 	ldw	r3,-16(fp)
    e730:	1885883a 	add	r2,r3,r2
    e734:	10800204 	addi	r2,r2,8
    e738:	110000c5 	stb	r4,3(r2)
        if (pevent->OSEventTbl[y] == 0) {
    e73c:	e0bffd03 	ldbu	r2,-12(fp)
    e740:	e0fffc17 	ldw	r3,-16(fp)
    e744:	1885883a 	add	r2,r3,r2
    e748:	10800204 	addi	r2,r2,8
    e74c:	108000c3 	ldbu	r2,3(r2)
    e750:	10803fcc 	andi	r2,r2,255
    e754:	1000091e 	bne	r2,zero,e77c <OS_EventTaskRemoveMulti+0xcc>
            pevent->OSEventGrp &= ~bity;
    e758:	e0bffc17 	ldw	r2,-16(fp)
    e75c:	10800283 	ldbu	r2,10(r2)
    e760:	1007883a 	mov	r3,r2
    e764:	e0bffd43 	ldbu	r2,-11(fp)
    e768:	0084303a 	nor	r2,zero,r2
    e76c:	1884703a 	and	r2,r3,r2
    e770:	1007883a 	mov	r3,r2
    e774:	e0bffc17 	ldw	r2,-16(fp)
    e778:	10c00285 	stb	r3,10(r2)
        }
        pevents++;
    e77c:	e0bffb17 	ldw	r2,-20(fp)
    e780:	10800104 	addi	r2,r2,4
    e784:	e0bffb15 	stw	r2,-20(fp)
        pevent = *pevents;
    e788:	e0bffb17 	ldw	r2,-20(fp)
    e78c:	10800017 	ldw	r2,0(r2)
    e790:	e0bffc15 	stw	r2,-16(fp)
    y       =  ptcb->OSTCBY;
    bity    =  ptcb->OSTCBBitY;
    bitx    =  ptcb->OSTCBBitX;
    pevents =  pevents_multi;
    pevent  = *pevents;
    while (pevent != (OS_EVENT *)0) {                   /* Remove task from all events' wait lists     */
    e794:	e0bffc17 	ldw	r2,-16(fp)
    e798:	103fd91e 	bne	r2,zero,e700 <__alt_mem_Flash_flash_data+0xf400e700>
            pevent->OSEventGrp &= ~bity;
        }
        pevents++;
        pevent = *pevents;
    }
}
    e79c:	e037883a 	mov	sp,fp
    e7a0:	df000017 	ldw	fp,0(sp)
    e7a4:	dec00104 	addi	sp,sp,4
    e7a8:	f800283a 	ret

0000e7ac <OS_EventWaitListInit>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
void  OS_EventWaitListInit (OS_EVENT *pevent)
{
    e7ac:	defffc04 	addi	sp,sp,-16
    e7b0:	df000315 	stw	fp,12(sp)
    e7b4:	df000304 	addi	fp,sp,12
    e7b8:	e13fff15 	stw	r4,-4(fp)
    INT16U *ptbl;
#endif
    INT8U   i;


    pevent->OSEventGrp = 0;                      /* No task waiting on event                           */
    e7bc:	e0bfff17 	ldw	r2,-4(fp)
    e7c0:	10000285 	stb	zero,10(r2)
    ptbl               = &pevent->OSEventTbl[0];
    e7c4:	e0bfff17 	ldw	r2,-4(fp)
    e7c8:	108002c4 	addi	r2,r2,11
    e7cc:	e0bffd15 	stw	r2,-12(fp)

    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
    e7d0:	e03ffe05 	stb	zero,-8(fp)
    e7d4:	00000706 	br	e7f4 <OS_EventWaitListInit+0x48>
        *ptbl++ = 0;
    e7d8:	e0bffd17 	ldw	r2,-12(fp)
    e7dc:	10c00044 	addi	r3,r2,1
    e7e0:	e0fffd15 	stw	r3,-12(fp)
    e7e4:	10000005 	stb	zero,0(r2)


    pevent->OSEventGrp = 0;                      /* No task waiting on event                           */
    ptbl               = &pevent->OSEventTbl[0];

    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
    e7e8:	e0bffe03 	ldbu	r2,-8(fp)
    e7ec:	10800044 	addi	r2,r2,1
    e7f0:	e0bffe05 	stb	r2,-8(fp)
    e7f4:	e0bffe03 	ldbu	r2,-8(fp)
    e7f8:	108000f0 	cmpltui	r2,r2,3
    e7fc:	103ff61e 	bne	r2,zero,e7d8 <__alt_mem_Flash_flash_data+0xf400e7d8>
        *ptbl++ = 0;
    }
}
    e800:	e037883a 	mov	sp,fp
    e804:	df000017 	ldw	fp,0(sp)
    e808:	dec00104 	addi	sp,sp,4
    e80c:	f800283a 	ret

0000e810 <OS_InitEventList>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitEventList (void)
{
    e810:	defffb04 	addi	sp,sp,-20
    e814:	dfc00415 	stw	ra,16(sp)
    e818:	df000315 	stw	fp,12(sp)
    e81c:	df000304 	addi	fp,sp,12
    INT16U     i;
    OS_EVENT  *pevent1;
    OS_EVENT  *pevent2;


    OS_MemClr((INT8U *)&OSEventTbl[0], sizeof(OSEventTbl)); /* Clear the event table                   */
    e820:	010000b4 	movhi	r4,2
    e824:	211d0b04 	addi	r4,r4,29740
    e828:	0142d004 	movi	r5,2880
    e82c:	000eb700 	call	eb70 <OS_MemClr>
    pevent1 = &OSEventTbl[0];
    e830:	008000b4 	movhi	r2,2
    e834:	109d0b04 	addi	r2,r2,29740
    e838:	e0bffe15 	stw	r2,-8(fp)
    pevent2 = &OSEventTbl[1];
    e83c:	008000b4 	movhi	r2,2
    e840:	109d1704 	addi	r2,r2,29788
    e844:	e0bfff15 	stw	r2,-4(fp)
    for (i = 0; i < (OS_MAX_EVENTS - 1); i++) {             /* Init. list of free EVENT control blocks */
    e848:	e03ffd0d 	sth	zero,-12(fp)
    e84c:	00001306 	br	e89c <OS_InitEventList+0x8c>
        pevent1->OSEventType    = OS_EVENT_TYPE_UNUSED;
    e850:	e0bffe17 	ldw	r2,-8(fp)
    e854:	10000005 	stb	zero,0(r2)
        pevent1->OSEventPtr     = pevent2;
    e858:	e0bffe17 	ldw	r2,-8(fp)
    e85c:	e0ffff17 	ldw	r3,-4(fp)
    e860:	10c00115 	stw	r3,4(r2)
#if OS_EVENT_NAME_SIZE > 1
        pevent1->OSEventName[0] = '?';                      /* Unknown name                            */
    e864:	e0bffe17 	ldw	r2,-8(fp)
    e868:	00c00fc4 	movi	r3,63
    e86c:	10c00385 	stb	r3,14(r2)
        pevent1->OSEventName[1] = OS_ASCII_NUL;
    e870:	e0bffe17 	ldw	r2,-8(fp)
    e874:	100003c5 	stb	zero,15(r2)
#endif
        pevent1++;
    e878:	e0bffe17 	ldw	r2,-8(fp)
    e87c:	10800c04 	addi	r2,r2,48
    e880:	e0bffe15 	stw	r2,-8(fp)
        pevent2++;
    e884:	e0bfff17 	ldw	r2,-4(fp)
    e888:	10800c04 	addi	r2,r2,48
    e88c:	e0bfff15 	stw	r2,-4(fp)


    OS_MemClr((INT8U *)&OSEventTbl[0], sizeof(OSEventTbl)); /* Clear the event table                   */
    pevent1 = &OSEventTbl[0];
    pevent2 = &OSEventTbl[1];
    for (i = 0; i < (OS_MAX_EVENTS - 1); i++) {             /* Init. list of free EVENT control blocks */
    e890:	e0bffd0b 	ldhu	r2,-12(fp)
    e894:	10800044 	addi	r2,r2,1
    e898:	e0bffd0d 	sth	r2,-12(fp)
    e89c:	e0bffd0b 	ldhu	r2,-12(fp)
    e8a0:	10800ef0 	cmpltui	r2,r2,59
    e8a4:	103fea1e 	bne	r2,zero,e850 <__alt_mem_Flash_flash_data+0xf400e850>
        pevent1->OSEventName[1] = OS_ASCII_NUL;
#endif
        pevent1++;
        pevent2++;
    }
    pevent1->OSEventType            = OS_EVENT_TYPE_UNUSED;
    e8a8:	e0bffe17 	ldw	r2,-8(fp)
    e8ac:	10000005 	stb	zero,0(r2)
    pevent1->OSEventPtr             = (OS_EVENT *)0;
    e8b0:	e0bffe17 	ldw	r2,-8(fp)
    e8b4:	10000115 	stw	zero,4(r2)
#if OS_EVENT_NAME_SIZE > 1
    pevent1->OSEventName[0]         = '?';
    e8b8:	e0bffe17 	ldw	r2,-8(fp)
    e8bc:	00c00fc4 	movi	r3,63
    e8c0:	10c00385 	stb	r3,14(r2)
    pevent1->OSEventName[1]         = OS_ASCII_NUL;
    e8c4:	e0bffe17 	ldw	r2,-8(fp)
    e8c8:	100003c5 	stb	zero,15(r2)
#endif
    OSEventFreeList                 = &OSEventTbl[0];
    e8cc:	008000b4 	movhi	r2,2
    e8d0:	109d0b04 	addi	r2,r2,29740
    e8d4:	d0a81815 	stw	r2,-24480(gp)
    OSEventFreeList->OSEventName[0] = '?';                  /* Unknown name                            */
    OSEventFreeList->OSEventName[1] = OS_ASCII_NUL;
#endif
#endif
#endif
}
    e8d8:	e037883a 	mov	sp,fp
    e8dc:	dfc00117 	ldw	ra,4(sp)
    e8e0:	df000017 	ldw	fp,0(sp)
    e8e4:	dec00204 	addi	sp,sp,8
    e8e8:	f800283a 	ret

0000e8ec <OS_InitMisc>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitMisc (void)
{
    e8ec:	deffff04 	addi	sp,sp,-4
    e8f0:	df000015 	stw	fp,0(sp)
    e8f4:	d839883a 	mov	fp,sp
#if OS_TIME_GET_SET_EN > 0
    OSTime        = 0L;                                    /* Clear the 32-bit system clock            */
    e8f8:	d0281b15 	stw	zero,-24468(gp)
#endif

    OSIntNesting  = 0;                                     /* Clear the interrupt nesting counter      */
    e8fc:	d0281905 	stb	zero,-24476(gp)
    OSLockNesting = 0;                                     /* Clear the scheduling lock counter        */
    e900:	d0280b05 	stb	zero,-24532(gp)

    OSTaskCtr     = 0;                                     /* Clear the number of tasks                */
    e904:	d0281345 	stb	zero,-24499(gp)

    OSRunning     = OS_FALSE;                              /* Indicate that multitasking not started   */
    e908:	d0280b45 	stb	zero,-24531(gp)

    OSCtxSwCtr    = 0;                                     /* Clear the context switch counter         */
    e90c:	d0281015 	stw	zero,-24512(gp)
    OSIdleCtr     = 0L;                                    /* Clear the 32-bit idle counter            */
    e910:	d0280c15 	stw	zero,-24528(gp)

#if OS_TASK_STAT_EN > 0
    OSIdleCtrRun  = 0L;
    e914:	d0281e15 	stw	zero,-24456(gp)
    OSIdleCtrMax  = 0L;
    e918:	d0281115 	stw	zero,-24508(gp)
    OSStatRdy     = OS_FALSE;                              /* Statistic task is not ready              */
    e91c:	d0281d05 	stb	zero,-24460(gp)
#endif
}
    e920:	e037883a 	mov	sp,fp
    e924:	df000017 	ldw	fp,0(sp)
    e928:	dec00104 	addi	sp,sp,4
    e92c:	f800283a 	ret

0000e930 <OS_InitRdyList>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitRdyList (void)
{
    e930:	defffd04 	addi	sp,sp,-12
    e934:	df000215 	stw	fp,8(sp)
    e938:	df000204 	addi	fp,sp,8
#else
    INT16U  *prdytbl;
#endif


    OSRdyGrp      = 0;                                     /* Clear the ready list                     */
    e93c:	d0281705 	stb	zero,-24484(gp)
    prdytbl       = &OSRdyTbl[0];
    e940:	d0a81744 	addi	r2,gp,-24483
    e944:	e0bfff15 	stw	r2,-4(fp)
    for (i = 0; i < OS_RDY_TBL_SIZE; i++) {
    e948:	e03ffe05 	stb	zero,-8(fp)
    e94c:	00000706 	br	e96c <OS_InitRdyList+0x3c>
        *prdytbl++ = 0;
    e950:	e0bfff17 	ldw	r2,-4(fp)
    e954:	10c00044 	addi	r3,r2,1
    e958:	e0ffff15 	stw	r3,-4(fp)
    e95c:	10000005 	stb	zero,0(r2)
#endif


    OSRdyGrp      = 0;                                     /* Clear the ready list                     */
    prdytbl       = &OSRdyTbl[0];
    for (i = 0; i < OS_RDY_TBL_SIZE; i++) {
    e960:	e0bffe03 	ldbu	r2,-8(fp)
    e964:	10800044 	addi	r2,r2,1
    e968:	e0bffe05 	stb	r2,-8(fp)
    e96c:	e0bffe03 	ldbu	r2,-8(fp)
    e970:	108000f0 	cmpltui	r2,r2,3
    e974:	103ff61e 	bne	r2,zero,e950 <__alt_mem_Flash_flash_data+0xf400e950>
        *prdytbl++ = 0;
    }

    OSPrioCur     = 0;
    e978:	d0280d45 	stb	zero,-24523(gp)
    OSPrioHighRdy = 0;
    e97c:	d0280d05 	stb	zero,-24524(gp)

    OSTCBHighRdy  = (OS_TCB *)0;
    e980:	d0281515 	stw	zero,-24492(gp)
    OSTCBCur      = (OS_TCB *)0;
    e984:	d0281a15 	stw	zero,-24472(gp)
}
    e988:	e037883a 	mov	sp,fp
    e98c:	df000017 	ldw	fp,0(sp)
    e990:	dec00104 	addi	sp,sp,4
    e994:	f800283a 	ret

0000e998 <OS_InitTaskIdle>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitTaskIdle (void)
{
    e998:	defff804 	addi	sp,sp,-32
    e99c:	dfc00715 	stw	ra,28(sp)
    e9a0:	df000615 	stw	fp,24(sp)
    e9a4:	df000604 	addi	fp,sp,24
#endif


#if OS_TASK_CREATE_EXT_EN > 0
    #if OS_STK_GROWTH == 1
    (void)OSTaskCreateExt(OS_TaskIdle,
    e9a8:	00bfffd4 	movui	r2,65535
    e9ac:	d8800015 	stw	r2,0(sp)
    e9b0:	008000b4 	movhi	r2,2
    e9b4:	109b0b04 	addi	r2,r2,27692
    e9b8:	d8800115 	stw	r2,4(sp)
    e9bc:	00808004 	movi	r2,512
    e9c0:	d8800215 	stw	r2,8(sp)
    e9c4:	d8000315 	stw	zero,12(sp)
    e9c8:	008000c4 	movi	r2,3
    e9cc:	d8800415 	stw	r2,16(sp)
    e9d0:	01000074 	movhi	r4,1
    e9d4:	213b8a04 	addi	r4,r4,-4568
    e9d8:	000b883a 	mov	r5,zero
    e9dc:	018000b4 	movhi	r6,2
    e9e0:	319d0a04 	addi	r6,r6,29736
    e9e4:	01c00504 	movi	r7,20
    e9e8:	001383c0 	call	1383c <OSTaskCreateExt>
                       OS_TASK_IDLE_PRIO);
    #endif
#endif

#if OS_TASK_NAME_SIZE > 14
    OSTaskNameSet(OS_TASK_IDLE_PRIO, (INT8U *)"uC/OS-II Idle", &err);
    e9ec:	01000504 	movi	r4,20
    e9f0:	014000b4 	movhi	r5,2
    e9f4:	29646704 	addi	r5,r5,-28260
    e9f8:	e1bfff04 	addi	r6,fp,-4
    e9fc:	00141080 	call	14108 <OSTaskNameSet>
#else
#if OS_TASK_NAME_SIZE > 7
    OSTaskNameSet(OS_TASK_IDLE_PRIO, (INT8U *)"OS-Idle", &err);
#endif
#endif
}
    ea00:	e037883a 	mov	sp,fp
    ea04:	dfc00117 	ldw	ra,4(sp)
    ea08:	df000017 	ldw	fp,0(sp)
    ea0c:	dec00204 	addi	sp,sp,8
    ea10:	f800283a 	ret

0000ea14 <OS_InitTaskStat>:
*********************************************************************************************************
*/

#if OS_TASK_STAT_EN > 0
static  void  OS_InitTaskStat (void)
{
    ea14:	defff804 	addi	sp,sp,-32
    ea18:	dfc00715 	stw	ra,28(sp)
    ea1c:	df000615 	stw	fp,24(sp)
    ea20:	df000604 	addi	fp,sp,24
#endif


#if OS_TASK_CREATE_EXT_EN > 0
    #if OS_STK_GROWTH == 1
    (void)OSTaskCreateExt(OS_TaskStat,
    ea24:	00bfff94 	movui	r2,65534
    ea28:	d8800015 	stw	r2,0(sp)
    ea2c:	008000b4 	movhi	r2,2
    ea30:	10989304 	addi	r2,r2,25164
    ea34:	d8800115 	stw	r2,4(sp)
    ea38:	00808004 	movi	r2,512
    ea3c:	d8800215 	stw	r2,8(sp)
    ea40:	d8000315 	stw	zero,12(sp)
    ea44:	008000c4 	movi	r2,3
    ea48:	d8800415 	stw	r2,16(sp)
    ea4c:	01000074 	movhi	r4,1
    ea50:	213ba104 	addi	r4,r4,-4476
    ea54:	000b883a 	mov	r5,zero
    ea58:	018000b4 	movhi	r6,2
    ea5c:	319a9204 	addi	r6,r6,27208
    ea60:	01c004c4 	movi	r7,19
    ea64:	001383c0 	call	1383c <OSTaskCreateExt>
                       OS_TASK_STAT_PRIO);                             /* One higher than the idle task  */
    #endif
#endif

#if OS_TASK_NAME_SIZE > 14
    OSTaskNameSet(OS_TASK_STAT_PRIO, (INT8U *)"uC/OS-II Stat", &err);
    ea68:	010004c4 	movi	r4,19
    ea6c:	014000b4 	movhi	r5,2
    ea70:	29646b04 	addi	r5,r5,-28244
    ea74:	e1bfff04 	addi	r6,fp,-4
    ea78:	00141080 	call	14108 <OSTaskNameSet>
#else
#if OS_TASK_NAME_SIZE > 7
    OSTaskNameSet(OS_TASK_STAT_PRIO, (INT8U *)"OS-Stat", &err);
#endif
#endif
}
    ea7c:	e037883a 	mov	sp,fp
    ea80:	dfc00117 	ldw	ra,4(sp)
    ea84:	df000017 	ldw	fp,0(sp)
    ea88:	dec00204 	addi	sp,sp,8
    ea8c:	f800283a 	ret

0000ea90 <OS_InitTCBList>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitTCBList (void)
{
    ea90:	defffb04 	addi	sp,sp,-20
    ea94:	dfc00415 	stw	ra,16(sp)
    ea98:	df000315 	stw	fp,12(sp)
    ea9c:	df000304 	addi	fp,sp,12
    INT8U    i;
    OS_TCB  *ptcb1;
    OS_TCB  *ptcb2;


    OS_MemClr((INT8U *)&OSTCBTbl[0],     sizeof(OSTCBTbl));      /* Clear all the TCBs                 */
    eaa0:	010000b4 	movhi	r4,2
    eaa4:	211fdb04 	addi	r4,r4,32620
    eaa8:	01414404 	movi	r5,1296
    eaac:	000eb700 	call	eb70 <OS_MemClr>
    OS_MemClr((INT8U *)&OSTCBPrioTbl[0], sizeof(OSTCBPrioTbl));  /* Clear the priority table           */
    eab0:	010000f4 	movhi	r4,3
    eab4:	21211f04 	addi	r4,r4,-31620
    eab8:	01401504 	movi	r5,84
    eabc:	000eb700 	call	eb70 <OS_MemClr>
    ptcb1 = &OSTCBTbl[0];
    eac0:	008000b4 	movhi	r2,2
    eac4:	109fdb04 	addi	r2,r2,32620
    eac8:	e0bffe15 	stw	r2,-8(fp)
    ptcb2 = &OSTCBTbl[1];
    eacc:	008000b4 	movhi	r2,2
    ead0:	109ff604 	addi	r2,r2,32728
    ead4:	e0bfff15 	stw	r2,-4(fp)
    for (i = 0; i < (OS_MAX_TASKS + OS_N_SYS_TASKS - 1); i++) {  /* Init. list of free TCBs            */
    ead8:	e03ffd05 	stb	zero,-12(fp)
    eadc:	00001106 	br	eb24 <OS_InitTCBList+0x94>
        ptcb1->OSTCBNext = ptcb2;
    eae0:	e0bffe17 	ldw	r2,-8(fp)
    eae4:	e0ffff17 	ldw	r3,-4(fp)
    eae8:	10c00515 	stw	r3,20(r2)
#if OS_TASK_NAME_SIZE > 1
        ptcb1->OSTCBTaskName[0] = '?';                           /* Unknown name                       */
    eaec:	e0bffe17 	ldw	r2,-8(fp)
    eaf0:	00c00fc4 	movi	r3,63
    eaf4:	10c01305 	stb	r3,76(r2)
        ptcb1->OSTCBTaskName[1] = OS_ASCII_NUL;
    eaf8:	e0bffe17 	ldw	r2,-8(fp)
    eafc:	10001345 	stb	zero,77(r2)
#endif
        ptcb1++;
    eb00:	e0bffe17 	ldw	r2,-8(fp)
    eb04:	10801b04 	addi	r2,r2,108
    eb08:	e0bffe15 	stw	r2,-8(fp)
        ptcb2++;
    eb0c:	e0bfff17 	ldw	r2,-4(fp)
    eb10:	10801b04 	addi	r2,r2,108
    eb14:	e0bfff15 	stw	r2,-4(fp)

    OS_MemClr((INT8U *)&OSTCBTbl[0],     sizeof(OSTCBTbl));      /* Clear all the TCBs                 */
    OS_MemClr((INT8U *)&OSTCBPrioTbl[0], sizeof(OSTCBPrioTbl));  /* Clear the priority table           */
    ptcb1 = &OSTCBTbl[0];
    ptcb2 = &OSTCBTbl[1];
    for (i = 0; i < (OS_MAX_TASKS + OS_N_SYS_TASKS - 1); i++) {  /* Init. list of free TCBs            */
    eb18:	e0bffd03 	ldbu	r2,-12(fp)
    eb1c:	10800044 	addi	r2,r2,1
    eb20:	e0bffd05 	stb	r2,-12(fp)
    eb24:	e0bffd03 	ldbu	r2,-12(fp)
    eb28:	108002f0 	cmpltui	r2,r2,11
    eb2c:	103fec1e 	bne	r2,zero,eae0 <__alt_mem_Flash_flash_data+0xf400eae0>
        ptcb1->OSTCBTaskName[1] = OS_ASCII_NUL;
#endif
        ptcb1++;
        ptcb2++;
    }
    ptcb1->OSTCBNext = (OS_TCB *)0;                              /* Last OS_TCB                        */
    eb30:	e0bffe17 	ldw	r2,-8(fp)
    eb34:	10000515 	stw	zero,20(r2)
#if OS_TASK_NAME_SIZE > 1
    ptcb1->OSTCBTaskName[0] = '?';                               /* Unknown name                       */
    eb38:	e0bffe17 	ldw	r2,-8(fp)
    eb3c:	00c00fc4 	movi	r3,63
    eb40:	10c01305 	stb	r3,76(r2)
    ptcb1->OSTCBTaskName[1] = OS_ASCII_NUL;
    eb44:	e0bffe17 	ldw	r2,-8(fp)
    eb48:	10001345 	stb	zero,77(r2)
#endif
    OSTCBList               = (OS_TCB *)0;                       /* TCB lists initializations          */
    eb4c:	d0280e15 	stw	zero,-24520(gp)
    OSTCBFreeList           = &OSTCBTbl[0];
    eb50:	008000b4 	movhi	r2,2
    eb54:	109fdb04 	addi	r2,r2,32620
    eb58:	d0a81215 	stw	r2,-24504(gp)
}
    eb5c:	e037883a 	mov	sp,fp
    eb60:	dfc00117 	ldw	ra,4(sp)
    eb64:	df000017 	ldw	fp,0(sp)
    eb68:	dec00204 	addi	sp,sp,8
    eb6c:	f800283a 	ret

0000eb70 <OS_MemClr>:
*                 of the alignment of the destination.
*********************************************************************************************************
*/

void  OS_MemClr (INT8U *pdest, INT16U size)
{
    eb70:	defffd04 	addi	sp,sp,-12
    eb74:	df000215 	stw	fp,8(sp)
    eb78:	df000204 	addi	fp,sp,8
    eb7c:	e13ffe15 	stw	r4,-8(fp)
    eb80:	2805883a 	mov	r2,r5
    eb84:	e0bfff0d 	sth	r2,-4(fp)
    while (size > 0) {
    eb88:	00000706 	br	eba8 <OS_MemClr+0x38>
        *pdest++ = (INT8U)0;
    eb8c:	e0bffe17 	ldw	r2,-8(fp)
    eb90:	10c00044 	addi	r3,r2,1
    eb94:	e0fffe15 	stw	r3,-8(fp)
    eb98:	10000005 	stb	zero,0(r2)
        size--;
    eb9c:	e0bfff0b 	ldhu	r2,-4(fp)
    eba0:	10bfffc4 	addi	r2,r2,-1
    eba4:	e0bfff0d 	sth	r2,-4(fp)
*********************************************************************************************************
*/

void  OS_MemClr (INT8U *pdest, INT16U size)
{
    while (size > 0) {
    eba8:	e0bfff0b 	ldhu	r2,-4(fp)
    ebac:	103ff71e 	bne	r2,zero,eb8c <__alt_mem_Flash_flash_data+0xf400eb8c>
        *pdest++ = (INT8U)0;
        size--;
    }
}
    ebb0:	e037883a 	mov	sp,fp
    ebb4:	df000017 	ldw	fp,0(sp)
    ebb8:	dec00104 	addi	sp,sp,4
    ebbc:	f800283a 	ret

0000ebc0 <OS_MemCopy>:
*                 of the alignment of the source and destination.
*********************************************************************************************************
*/

void  OS_MemCopy (INT8U *pdest, INT8U *psrc, INT16U size)
{
    ebc0:	defffc04 	addi	sp,sp,-16
    ebc4:	df000315 	stw	fp,12(sp)
    ebc8:	df000304 	addi	fp,sp,12
    ebcc:	e13ffd15 	stw	r4,-12(fp)
    ebd0:	e17ffe15 	stw	r5,-8(fp)
    ebd4:	3005883a 	mov	r2,r6
    ebd8:	e0bfff0d 	sth	r2,-4(fp)
    while (size > 0) {
    ebdc:	00000b06 	br	ec0c <OS_MemCopy+0x4c>
        *pdest++ = *psrc++;
    ebe0:	e0bffd17 	ldw	r2,-12(fp)
    ebe4:	10c00044 	addi	r3,r2,1
    ebe8:	e0fffd15 	stw	r3,-12(fp)
    ebec:	e0fffe17 	ldw	r3,-8(fp)
    ebf0:	19000044 	addi	r4,r3,1
    ebf4:	e13ffe15 	stw	r4,-8(fp)
    ebf8:	18c00003 	ldbu	r3,0(r3)
    ebfc:	10c00005 	stb	r3,0(r2)
        size--;
    ec00:	e0bfff0b 	ldhu	r2,-4(fp)
    ec04:	10bfffc4 	addi	r2,r2,-1
    ec08:	e0bfff0d 	sth	r2,-4(fp)
*********************************************************************************************************
*/

void  OS_MemCopy (INT8U *pdest, INT8U *psrc, INT16U size)
{
    while (size > 0) {
    ec0c:	e0bfff0b 	ldhu	r2,-4(fp)
    ec10:	103ff31e 	bne	r2,zero,ebe0 <__alt_mem_Flash_flash_data+0xf400ebe0>
        *pdest++ = *psrc++;
        size--;
    }
}
    ec14:	e037883a 	mov	sp,fp
    ec18:	df000017 	ldw	fp,0(sp)
    ec1c:	dec00104 	addi	sp,sp,4
    ec20:	f800283a 	ret

0000ec24 <OS_Sched>:
*              2) Rescheduling is prevented when the scheduler is locked (see OS_SchedLock())
*********************************************************************************************************
*/

void  OS_Sched (void)
{
    ec24:	defffb04 	addi	sp,sp,-20
    ec28:	dfc00415 	stw	ra,16(sp)
    ec2c:	df000315 	stw	fp,12(sp)
    ec30:	df000304 	addi	fp,sp,12
#if OS_CRITICAL_METHOD == 3                            /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
    ec34:	e03ffd15 	stw	zero,-12(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    ec38:	0005303a 	rdctl	r2,status
    ec3c:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    ec40:	e0fffe17 	ldw	r3,-8(fp)
    ec44:	00bfff84 	movi	r2,-2
    ec48:	1884703a 	and	r2,r3,r2
    ec4c:	1001703a 	wrctl	status,r2
  
  return context;
    ec50:	e0bffe17 	ldw	r2,-8(fp)
#endif



    OS_ENTER_CRITICAL();
    ec54:	e0bffd15 	stw	r2,-12(fp)
    if (OSIntNesting == 0) {                           /* Schedule only if all ISRs done and ...       */
    ec58:	d0a81903 	ldbu	r2,-24476(gp)
    ec5c:	10803fcc 	andi	r2,r2,255
    ec60:	10001a1e 	bne	r2,zero,eccc <OS_Sched+0xa8>
        if (OSLockNesting == 0) {                      /* ... scheduler is not locked                  */
    ec64:	d0a80b03 	ldbu	r2,-24532(gp)
    ec68:	10803fcc 	andi	r2,r2,255
    ec6c:	1000171e 	bne	r2,zero,eccc <OS_Sched+0xa8>
            OS_SchedNew();
    ec70:	000ecf00 	call	ecf0 <OS_SchedNew>
            if (OSPrioHighRdy != OSPrioCur) {          /* No Ctx Sw if current task is highest rdy     */
    ec74:	d0e80d03 	ldbu	r3,-24524(gp)
    ec78:	d0a80d43 	ldbu	r2,-24523(gp)
    ec7c:	18c03fcc 	andi	r3,r3,255
    ec80:	10803fcc 	andi	r2,r2,255
    ec84:	18801126 	beq	r3,r2,eccc <OS_Sched+0xa8>
                OSTCBHighRdy = OSTCBPrioTbl[OSPrioHighRdy];
    ec88:	d0a80d03 	ldbu	r2,-24524(gp)
    ec8c:	10c03fcc 	andi	r3,r2,255
    ec90:	008000f4 	movhi	r2,3
    ec94:	10a11f04 	addi	r2,r2,-31620
    ec98:	18c7883a 	add	r3,r3,r3
    ec9c:	18c7883a 	add	r3,r3,r3
    eca0:	10c5883a 	add	r2,r2,r3
    eca4:	10800017 	ldw	r2,0(r2)
    eca8:	d0a81515 	stw	r2,-24492(gp)
#if OS_TASK_PROFILE_EN > 0
                OSTCBHighRdy->OSTCBCtxSwCtr++;         /* Inc. # of context switches to this task      */
    ecac:	d0a81517 	ldw	r2,-24492(gp)
    ecb0:	10c00e17 	ldw	r3,56(r2)
    ecb4:	18c00044 	addi	r3,r3,1
    ecb8:	10c00e15 	stw	r3,56(r2)
#endif
                OSCtxSwCtr++;                          /* Increment context switch counter             */
    ecbc:	d0a81017 	ldw	r2,-24512(gp)
    ecc0:	10800044 	addi	r2,r2,1
    ecc4:	d0a81015 	stw	r2,-24512(gp)
                OS_TASK_SW();                          /* Perform a context switch                     */
    ecc8:	00182a40 	call	182a4 <OSCtxSw>
    eccc:	e0bffd17 	ldw	r2,-12(fp)
    ecd0:	e0bfff15 	stw	r2,-4(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    ecd4:	e0bfff17 	ldw	r2,-4(fp)
    ecd8:	1001703a 	wrctl	status,r2
            }
        }
    }
    OS_EXIT_CRITICAL();
}
    ecdc:	e037883a 	mov	sp,fp
    ece0:	dfc00117 	ldw	ra,4(sp)
    ece4:	df000017 	ldw	fp,0(sp)
    ece8:	dec00204 	addi	sp,sp,8
    ecec:	f800283a 	ret

0000ecf0 <OS_SchedNew>:
*              2) Interrupts are assumed to be disabled when this function is called.
*********************************************************************************************************
*/

static  void  OS_SchedNew (void)
{
    ecf0:	defffe04 	addi	sp,sp,-8
    ecf4:	df000115 	stw	fp,4(sp)
    ecf8:	df000104 	addi	fp,sp,4
#if OS_LOWEST_PRIO <= 63                         /* See if we support up to 64 tasks                   */
    INT8U   y;


    y             = OSUnMapTbl[OSRdyGrp];
    ecfc:	d0a81703 	ldbu	r2,-24484(gp)
    ed00:	10c03fcc 	andi	r3,r2,255
    ed04:	008000b4 	movhi	r2,2
    ed08:	10a42704 	addi	r2,r2,-28516
    ed0c:	10c5883a 	add	r2,r2,r3
    ed10:	10800003 	ldbu	r2,0(r2)
    ed14:	e0bfff05 	stb	r2,-4(fp)
    OSPrioHighRdy = (INT8U)((y << 3) + OSUnMapTbl[OSRdyTbl[y]]);
    ed18:	e0bfff03 	ldbu	r2,-4(fp)
    ed1c:	100490fa 	slli	r2,r2,3
    ed20:	1009883a 	mov	r4,r2
    ed24:	e0ffff03 	ldbu	r3,-4(fp)
    ed28:	d0a81744 	addi	r2,gp,-24483
    ed2c:	1885883a 	add	r2,r3,r2
    ed30:	10800003 	ldbu	r2,0(r2)
    ed34:	10c03fcc 	andi	r3,r2,255
    ed38:	008000b4 	movhi	r2,2
    ed3c:	10a42704 	addi	r2,r2,-28516
    ed40:	10c5883a 	add	r2,r2,r3
    ed44:	10800003 	ldbu	r2,0(r2)
    ed48:	2085883a 	add	r2,r4,r2
    ed4c:	d0a80d05 	stb	r2,-24524(gp)
        OSPrioHighRdy = (INT8U)((y << 4) + OSUnMapTbl[(*ptbl & 0xFF)]);
    } else {
        OSPrioHighRdy = (INT8U)((y << 4) + OSUnMapTbl[(*ptbl >> 8) & 0xFF] + 8);
    }
#endif
}
    ed50:	e037883a 	mov	sp,fp
    ed54:	df000017 	ldw	fp,0(sp)
    ed58:	dec00104 	addi	sp,sp,4
    ed5c:	f800283a 	ret

0000ed60 <OS_StrCopy>:
*********************************************************************************************************
*/

#if (OS_EVENT_NAME_SIZE > 1) || (OS_FLAG_NAME_SIZE > 1) || (OS_MEM_NAME_SIZE > 1) || (OS_TASK_NAME_SIZE > 1) || (OS_TMR_CFG_NAME_SIZE > 1)
INT8U  OS_StrCopy (INT8U *pdest, INT8U *psrc)
{
    ed60:	defffc04 	addi	sp,sp,-16
    ed64:	df000315 	stw	fp,12(sp)
    ed68:	df000304 	addi	fp,sp,12
    ed6c:	e13ffe15 	stw	r4,-8(fp)
    ed70:	e17fff15 	stw	r5,-4(fp)
    INT8U  len;


    len = 0;
    ed74:	e03ffd05 	stb	zero,-12(fp)
    while (*psrc != OS_ASCII_NUL) {
    ed78:	00000b06 	br	eda8 <OS_StrCopy+0x48>
        *pdest++ = *psrc++;
    ed7c:	e0bffe17 	ldw	r2,-8(fp)
    ed80:	10c00044 	addi	r3,r2,1
    ed84:	e0fffe15 	stw	r3,-8(fp)
    ed88:	e0ffff17 	ldw	r3,-4(fp)
    ed8c:	19000044 	addi	r4,r3,1
    ed90:	e13fff15 	stw	r4,-4(fp)
    ed94:	18c00003 	ldbu	r3,0(r3)
    ed98:	10c00005 	stb	r3,0(r2)
        len++;
    ed9c:	e0bffd03 	ldbu	r2,-12(fp)
    eda0:	10800044 	addi	r2,r2,1
    eda4:	e0bffd05 	stb	r2,-12(fp)
{
    INT8U  len;


    len = 0;
    while (*psrc != OS_ASCII_NUL) {
    eda8:	e0bfff17 	ldw	r2,-4(fp)
    edac:	10800003 	ldbu	r2,0(r2)
    edb0:	10803fcc 	andi	r2,r2,255
    edb4:	103ff11e 	bne	r2,zero,ed7c <__alt_mem_Flash_flash_data+0xf400ed7c>
        *pdest++ = *psrc++;
        len++;
    }
    *pdest = OS_ASCII_NUL;
    edb8:	e0bffe17 	ldw	r2,-8(fp)
    edbc:	10000005 	stb	zero,0(r2)
    return (len);
    edc0:	e0bffd03 	ldbu	r2,-12(fp)
}
    edc4:	e037883a 	mov	sp,fp
    edc8:	df000017 	ldw	fp,0(sp)
    edcc:	dec00104 	addi	sp,sp,4
    edd0:	f800283a 	ret

0000edd4 <OS_StrLen>:
*********************************************************************************************************
*/

#if (OS_EVENT_NAME_SIZE > 1) || (OS_FLAG_NAME_SIZE > 1) || (OS_MEM_NAME_SIZE > 1) || (OS_TASK_NAME_SIZE > 1) || (OS_TMR_CFG_NAME_SIZE > 1)
INT8U  OS_StrLen (INT8U *psrc)
{
    edd4:	defffd04 	addi	sp,sp,-12
    edd8:	df000215 	stw	fp,8(sp)
    eddc:	df000204 	addi	fp,sp,8
    ede0:	e13fff15 	stw	r4,-4(fp)
    INT8U  len;


    len = 0;
    ede4:	e03ffe05 	stb	zero,-8(fp)
    while (*psrc != OS_ASCII_NUL) {
    ede8:	00000606 	br	ee04 <OS_StrLen+0x30>
        psrc++;
    edec:	e0bfff17 	ldw	r2,-4(fp)
    edf0:	10800044 	addi	r2,r2,1
    edf4:	e0bfff15 	stw	r2,-4(fp)
        len++;
    edf8:	e0bffe03 	ldbu	r2,-8(fp)
    edfc:	10800044 	addi	r2,r2,1
    ee00:	e0bffe05 	stb	r2,-8(fp)
{
    INT8U  len;


    len = 0;
    while (*psrc != OS_ASCII_NUL) {
    ee04:	e0bfff17 	ldw	r2,-4(fp)
    ee08:	10800003 	ldbu	r2,0(r2)
    ee0c:	10803fcc 	andi	r2,r2,255
    ee10:	103ff61e 	bne	r2,zero,edec <__alt_mem_Flash_flash_data+0xf400edec>
        psrc++;
        len++;
    }
    return (len);
    ee14:	e0bffe03 	ldbu	r2,-8(fp)
}
    ee18:	e037883a 	mov	sp,fp
    ee1c:	df000017 	ldw	fp,0(sp)
    ee20:	dec00104 	addi	sp,sp,4
    ee24:	f800283a 	ret

0000ee28 <OS_TaskIdle>:
*                 power.
*********************************************************************************************************
*/

void  OS_TaskIdle (void *p_arg)
{
    ee28:	defffa04 	addi	sp,sp,-24
    ee2c:	dfc00515 	stw	ra,20(sp)
    ee30:	df000415 	stw	fp,16(sp)
    ee34:	df000404 	addi	fp,sp,16
    ee38:	e13fff15 	stw	r4,-4(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
    ee3c:	e03ffc15 	stw	zero,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    ee40:	0005303a 	rdctl	r2,status
    ee44:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    ee48:	e0fffd17 	ldw	r3,-12(fp)
    ee4c:	00bfff84 	movi	r2,-2
    ee50:	1884703a 	and	r2,r3,r2
    ee54:	1001703a 	wrctl	status,r2
  
  return context;
    ee58:	e0bffd17 	ldw	r2,-12(fp)



    (void)p_arg;                                 /* Prevent compiler warning for not using 'p_arg'     */
    for (;;) {
        OS_ENTER_CRITICAL();
    ee5c:	e0bffc15 	stw	r2,-16(fp)
        OSIdleCtr++;
    ee60:	d0a80c17 	ldw	r2,-24528(gp)
    ee64:	10800044 	addi	r2,r2,1
    ee68:	d0a80c15 	stw	r2,-24528(gp)
    ee6c:	e0bffc17 	ldw	r2,-16(fp)
    ee70:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    ee74:	e0bffe17 	ldw	r2,-8(fp)
    ee78:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OSTaskIdleHook();                        /* Call user definable HOOK                           */
    ee7c:	001859c0 	call	1859c <OSTaskIdleHook>
    }
    ee80:	003fef06 	br	ee40 <__alt_mem_Flash_flash_data+0xf400ee40>

0000ee84 <OS_TaskStat>:
*********************************************************************************************************
*/

#if OS_TASK_STAT_EN > 0
void  OS_TaskStat (void *p_arg)
{
    ee84:	defff804 	addi	sp,sp,-32
    ee88:	dfc00715 	stw	ra,28(sp)
    ee8c:	df000615 	stw	fp,24(sp)
    ee90:	dc400515 	stw	r17,20(sp)
    ee94:	dc000415 	stw	r16,16(sp)
    ee98:	df000604 	addi	fp,sp,24
    ee9c:	e13ffd15 	stw	r4,-12(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
    eea0:	e03ffa15 	stw	zero,-24(fp)
#endif



    (void)p_arg;                                 /* Prevent compiler warning for not using 'p_arg'     */
    while (OSStatRdy == OS_FALSE) {
    eea4:	00000206 	br	eeb0 <OS_TaskStat+0x2c>
        OSTimeDly(2 * OS_TICKS_PER_SEC / 10);    /* Wait until statistic task is ready                 */
    eea8:	01000044 	movi	r4,1
    eeac:	0014a340 	call	14a34 <OSTimeDly>
#endif



    (void)p_arg;                                 /* Prevent compiler warning for not using 'p_arg'     */
    while (OSStatRdy == OS_FALSE) {
    eeb0:	d0a81d03 	ldbu	r2,-24460(gp)
    eeb4:	10803fcc 	andi	r2,r2,255
    eeb8:	103ffb26 	beq	r2,zero,eea8 <__alt_mem_Flash_flash_data+0xf400eea8>
        OSTimeDly(2 * OS_TICKS_PER_SEC / 10);    /* Wait until statistic task is ready                 */
    }
    OSIdleCtrMax /= 100L;
    eebc:	d0e81117 	ldw	r3,-24508(gp)
    eec0:	00947b34 	movhi	r2,20972
    eec4:	10a147c4 	addi	r2,r2,-31457
    eec8:	1888383a 	mulxuu	r4,r3,r2
    eecc:	1885383a 	mul	r2,r3,r2
    eed0:	1021883a 	mov	r16,r2
    eed4:	2023883a 	mov	r17,r4
    eed8:	8804d17a 	srli	r2,r17,5
    eedc:	d0a81115 	stw	r2,-24508(gp)
    if (OSIdleCtrMax == 0L) {
    eee0:	d0a81117 	ldw	r2,-24508(gp)
    eee4:	1000031e 	bne	r2,zero,eef4 <OS_TaskStat+0x70>
        OSCPUUsage = 0;
    eee8:	d0281305 	stb	zero,-24500(gp)
        (void)OSTaskSuspend(OS_PRIO_SELF);
    eeec:	01003fc4 	movi	r4,255
    eef0:	00146880 	call	14688 <OSTaskSuspend>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    eef4:	0005303a 	rdctl	r2,status
    eef8:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    eefc:	e0fffb17 	ldw	r3,-20(fp)
    ef00:	00bfff84 	movi	r2,-2
    ef04:	1884703a 	and	r2,r3,r2
    ef08:	1001703a 	wrctl	status,r2
  
  return context;
    ef0c:	e0bffb17 	ldw	r2,-20(fp)
    }
    for (;;) {
        OS_ENTER_CRITICAL();
    ef10:	e0bffa15 	stw	r2,-24(fp)
        OSIdleCtrRun = OSIdleCtr;                /* Obtain the of the idle counter for the past second */
    ef14:	d0a80c17 	ldw	r2,-24528(gp)
    ef18:	d0a81e15 	stw	r2,-24456(gp)
        OSIdleCtr    = 0L;                       /* Reset the idle counter for the next second         */
    ef1c:	d0280c15 	stw	zero,-24528(gp)
    ef20:	e0bffa17 	ldw	r2,-24(fp)
    ef24:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    ef28:	e0bffc17 	ldw	r2,-16(fp)
    ef2c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OSCPUUsage   = (INT8U)(100L - OSIdleCtrRun / OSIdleCtrMax);
    ef30:	d0e81e17 	ldw	r3,-24456(gp)
    ef34:	d0a81117 	ldw	r2,-24508(gp)
    ef38:	1885203a 	divu	r2,r3,r2
    ef3c:	1007883a 	mov	r3,r2
    ef40:	00801904 	movi	r2,100
    ef44:	10c5c83a 	sub	r2,r2,r3
    ef48:	d0a81305 	stb	r2,-24500(gp)
        OSTaskStatHook();                        /* Invoke user definable hook                         */
    ef4c:	001852c0 	call	1852c <OSTaskStatHook>
#if (OS_TASK_STAT_STK_CHK_EN > 0) && (OS_TASK_CREATE_EXT_EN > 0)
        OS_TaskStatStkChk();                     /* Check the stacks for each task                     */
    ef50:	000ef600 	call	ef60 <OS_TaskStatStkChk>
#endif
        OSTimeDly(OS_TICKS_PER_SEC / 10);        /* Accumulate OSIdleCtr for the next 1/10 second      */
    ef54:	0009883a 	mov	r4,zero
    ef58:	0014a340 	call	14a34 <OSTimeDly>
    }
    ef5c:	003fe506 	br	eef4 <__alt_mem_Flash_flash_data+0xf400eef4>

0000ef60 <OS_TaskStatStkChk>:
*********************************************************************************************************
*/

#if (OS_TASK_STAT_STK_CHK_EN > 0) && (OS_TASK_CREATE_EXT_EN > 0)
void  OS_TaskStatStkChk (void)
{
    ef60:	defffa04 	addi	sp,sp,-24
    ef64:	dfc00515 	stw	ra,20(sp)
    ef68:	df000415 	stw	fp,16(sp)
    ef6c:	df000404 	addi	fp,sp,16
    OS_STK_DATA  stk_data;
    INT8U        err;
    INT8U        prio;


    for (prio = 0; prio <= OS_TASK_IDLE_PRIO; prio++) {
    ef70:	e03ffc05 	stb	zero,-16(fp)
    ef74:	00002406 	br	f008 <OS_TaskStatStkChk+0xa8>
        err = OSTaskStkChk(prio, &stk_data);
    ef78:	e0fffc03 	ldbu	r3,-16(fp)
    ef7c:	e0bffe04 	addi	r2,fp,-8
    ef80:	1809883a 	mov	r4,r3
    ef84:	100b883a 	mov	r5,r2
    ef88:	00144c00 	call	144c0 <OSTaskStkChk>
    ef8c:	e0bffc45 	stb	r2,-15(fp)
        if (err == OS_ERR_NONE) {
    ef90:	e0bffc43 	ldbu	r2,-15(fp)
    ef94:	1000191e 	bne	r2,zero,effc <OS_TaskStatStkChk+0x9c>
            ptcb = OSTCBPrioTbl[prio];
    ef98:	e0fffc03 	ldbu	r3,-16(fp)
    ef9c:	008000f4 	movhi	r2,3
    efa0:	10a11f04 	addi	r2,r2,-31620
    efa4:	18c7883a 	add	r3,r3,r3
    efa8:	18c7883a 	add	r3,r3,r3
    efac:	10c5883a 	add	r2,r2,r3
    efb0:	10800017 	ldw	r2,0(r2)
    efb4:	e0bffd15 	stw	r2,-12(fp)
            if (ptcb != (OS_TCB *)0) {                               /* Make sure task 'ptcb' is ...   */
    efb8:	e0bffd17 	ldw	r2,-12(fp)
    efbc:	10000f26 	beq	r2,zero,effc <OS_TaskStatStkChk+0x9c>
                if (ptcb != OS_TCB_RESERVED) {                       /* ... still valid.               */
    efc0:	e0bffd17 	ldw	r2,-12(fp)
    efc4:	10800060 	cmpeqi	r2,r2,1
    efc8:	10000c1e 	bne	r2,zero,effc <OS_TaskStatStkChk+0x9c>
#if OS_TASK_PROFILE_EN > 0
                    #if OS_STK_GROWTH == 1
                    ptcb->OSTCBStkBase = ptcb->OSTCBStkBottom + ptcb->OSTCBStkSize;
    efcc:	e0bffd17 	ldw	r2,-12(fp)
    efd0:	10c00217 	ldw	r3,8(r2)
    efd4:	e0bffd17 	ldw	r2,-12(fp)
    efd8:	10800317 	ldw	r2,12(r2)
    efdc:	1085883a 	add	r2,r2,r2
    efe0:	1085883a 	add	r2,r2,r2
    efe4:	1887883a 	add	r3,r3,r2
    efe8:	e0bffd17 	ldw	r2,-12(fp)
    efec:	10c01115 	stw	r3,68(r2)
                    #else
                    ptcb->OSTCBStkBase = ptcb->OSTCBStkBottom - ptcb->OSTCBStkSize;
                    #endif
                    ptcb->OSTCBStkUsed = stk_data.OSUsed;            /* Store the number of bytes used */
    eff0:	e0ffff17 	ldw	r3,-4(fp)
    eff4:	e0bffd17 	ldw	r2,-12(fp)
    eff8:	10c01215 	stw	r3,72(r2)
    OS_STK_DATA  stk_data;
    INT8U        err;
    INT8U        prio;


    for (prio = 0; prio <= OS_TASK_IDLE_PRIO; prio++) {
    effc:	e0bffc03 	ldbu	r2,-16(fp)
    f000:	10800044 	addi	r2,r2,1
    f004:	e0bffc05 	stb	r2,-16(fp)
    f008:	e0bffc03 	ldbu	r2,-16(fp)
    f00c:	10800570 	cmpltui	r2,r2,21
    f010:	103fd91e 	bne	r2,zero,ef78 <__alt_mem_Flash_flash_data+0xf400ef78>
#endif
                }
            }
        }
    }
}
    f014:	e037883a 	mov	sp,fp
    f018:	dfc00117 	ldw	ra,4(sp)
    f01c:	df000017 	ldw	fp,0(sp)
    f020:	dec00204 	addi	sp,sp,8
    f024:	f800283a 	ret

0000f028 <OS_TCBInit>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

INT8U  OS_TCBInit (INT8U prio, OS_STK *ptos, OS_STK *pbos, INT16U id, INT32U stk_size, void *pext, INT16U opt)
{
    f028:	defff204 	addi	sp,sp,-56
    f02c:	dfc00d15 	stw	ra,52(sp)
    f030:	df000c15 	stw	fp,48(sp)
    f034:	df000c04 	addi	fp,sp,48
    f038:	e17ffc15 	stw	r5,-16(fp)
    f03c:	e1bffd15 	stw	r6,-12(fp)
    f040:	3807883a 	mov	r3,r7
    f044:	e0800417 	ldw	r2,16(fp)
    f048:	e13ffb05 	stb	r4,-20(fp)
    f04c:	e0fffe0d 	sth	r3,-8(fp)
    f050:	e0bfff0d 	sth	r2,-4(fp)
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
    f054:	e03ff415 	stw	zero,-48(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    f058:	0005303a 	rdctl	r2,status
    f05c:	e0bff615 	stw	r2,-40(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    f060:	e0fff617 	ldw	r3,-40(fp)
    f064:	00bfff84 	movi	r2,-2
    f068:	1884703a 	and	r2,r3,r2
    f06c:	1001703a 	wrctl	status,r2
  
  return context;
    f070:	e0bff617 	ldw	r2,-40(fp)
#endif



    OS_ENTER_CRITICAL();
    f074:	e0bff415 	stw	r2,-48(fp)
    ptcb = OSTCBFreeList;                                  /* Get a free TCB from the free TCB list    */
    f078:	d0a81217 	ldw	r2,-24504(gp)
    f07c:	e0bff515 	stw	r2,-44(fp)
    if (ptcb != (OS_TCB *)0) {
    f080:	e0bff517 	ldw	r2,-44(fp)
    f084:	10009326 	beq	r2,zero,f2d4 <OS_TCBInit+0x2ac>
        OSTCBFreeList            = ptcb->OSTCBNext;        /* Update pointer to free TCB list          */
    f088:	e0bff517 	ldw	r2,-44(fp)
    f08c:	10800517 	ldw	r2,20(r2)
    f090:	d0a81215 	stw	r2,-24504(gp)
    f094:	e0bff417 	ldw	r2,-48(fp)
    f098:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    f09c:	e0bff717 	ldw	r2,-36(fp)
    f0a0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        ptcb->OSTCBStkPtr        = ptos;                   /* Load Stack pointer in TCB                */
    f0a4:	e0bff517 	ldw	r2,-44(fp)
    f0a8:	e0fffc17 	ldw	r3,-16(fp)
    f0ac:	10c00015 	stw	r3,0(r2)
        ptcb->OSTCBPrio          = prio;                   /* Load task priority into TCB              */
    f0b0:	e0bff517 	ldw	r2,-44(fp)
    f0b4:	e0fffb03 	ldbu	r3,-20(fp)
    f0b8:	10c00c85 	stb	r3,50(r2)
        ptcb->OSTCBStat          = OS_STAT_RDY;            /* Task is ready to run                     */
    f0bc:	e0bff517 	ldw	r2,-44(fp)
    f0c0:	10000c05 	stb	zero,48(r2)
        ptcb->OSTCBStatPend      = OS_STAT_PEND_OK;        /* Clear pend status                        */
    f0c4:	e0bff517 	ldw	r2,-44(fp)
    f0c8:	10000c45 	stb	zero,49(r2)
        ptcb->OSTCBDly           = 0;                      /* Task is not delayed                      */
    f0cc:	e0bff517 	ldw	r2,-44(fp)
    f0d0:	10000b8d 	sth	zero,46(r2)

#if OS_TASK_CREATE_EXT_EN > 0
        ptcb->OSTCBExtPtr        = pext;                   /* Store pointer to TCB extension           */
    f0d4:	e0bff517 	ldw	r2,-44(fp)
    f0d8:	e0c00317 	ldw	r3,12(fp)
    f0dc:	10c00115 	stw	r3,4(r2)
        ptcb->OSTCBStkSize       = stk_size;               /* Store stack size                         */
    f0e0:	e0bff517 	ldw	r2,-44(fp)
    f0e4:	e0c00217 	ldw	r3,8(fp)
    f0e8:	10c00315 	stw	r3,12(r2)
        ptcb->OSTCBStkBottom     = pbos;                   /* Store pointer to bottom of stack         */
    f0ec:	e0bff517 	ldw	r2,-44(fp)
    f0f0:	e0fffd17 	ldw	r3,-12(fp)
    f0f4:	10c00215 	stw	r3,8(r2)
        ptcb->OSTCBOpt           = opt;                    /* Store task options                       */
    f0f8:	e0bff517 	ldw	r2,-44(fp)
    f0fc:	e0ffff0b 	ldhu	r3,-4(fp)
    f100:	10c0040d 	sth	r3,16(r2)
        ptcb->OSTCBId            = id;                     /* Store task ID                            */
    f104:	e0bff517 	ldw	r2,-44(fp)
    f108:	e0fffe0b 	ldhu	r3,-8(fp)
    f10c:	10c0048d 	sth	r3,18(r2)
        opt                      = opt;
        id                       = id;
#endif

#if OS_TASK_DEL_EN > 0
        ptcb->OSTCBDelReq        = OS_ERR_NONE;
    f110:	e0bff517 	ldw	r2,-44(fp)
    f114:	10000dc5 	stb	zero,55(r2)
#endif

#if OS_LOWEST_PRIO <= 63
        ptcb->OSTCBY             = (INT8U)(prio >> 3);          /* Pre-compute X, Y, BitX and BitY     */
    f118:	e0bffb03 	ldbu	r2,-20(fp)
    f11c:	1004d0fa 	srli	r2,r2,3
    f120:	1007883a 	mov	r3,r2
    f124:	e0bff517 	ldw	r2,-44(fp)
    f128:	10c00d05 	stb	r3,52(r2)
        ptcb->OSTCBX             = (INT8U)(prio & 0x07);
    f12c:	e0bffb03 	ldbu	r2,-20(fp)
    f130:	108001cc 	andi	r2,r2,7
    f134:	1007883a 	mov	r3,r2
    f138:	e0bff517 	ldw	r2,-44(fp)
    f13c:	10c00cc5 	stb	r3,51(r2)
        ptcb->OSTCBBitY          = (INT8U)(1 << ptcb->OSTCBY);
    f140:	e0bff517 	ldw	r2,-44(fp)
    f144:	10800d03 	ldbu	r2,52(r2)
    f148:	10803fcc 	andi	r2,r2,255
    f14c:	00c00044 	movi	r3,1
    f150:	1884983a 	sll	r2,r3,r2
    f154:	1007883a 	mov	r3,r2
    f158:	e0bff517 	ldw	r2,-44(fp)
    f15c:	10c00d85 	stb	r3,54(r2)
        ptcb->OSTCBBitX          = (INT8U)(1 << ptcb->OSTCBX);
    f160:	e0bff517 	ldw	r2,-44(fp)
    f164:	10800cc3 	ldbu	r2,51(r2)
    f168:	10803fcc 	andi	r2,r2,255
    f16c:	00c00044 	movi	r3,1
    f170:	1884983a 	sll	r2,r3,r2
    f174:	1007883a 	mov	r3,r2
    f178:	e0bff517 	ldw	r2,-44(fp)
    f17c:	10c00d45 	stb	r3,53(r2)
        ptcb->OSTCBBitY          = (INT16U)(1 << ptcb->OSTCBY);
        ptcb->OSTCBBitX          = (INT16U)(1 << ptcb->OSTCBX);
#endif

#if (OS_EVENT_EN)
        ptcb->OSTCBEventPtr      = (OS_EVENT  *)0;         /* Task is not pending on an  event         */
    f180:	e0bff517 	ldw	r2,-44(fp)
    f184:	10000715 	stw	zero,28(r2)
#if (OS_EVENT_MULTI_EN > 0)
        ptcb->OSTCBEventMultiPtr = (OS_EVENT **)0;         /* Task is not pending on any events        */
    f188:	e0bff517 	ldw	r2,-44(fp)
    f18c:	10000815 	stw	zero,32(r2)
#endif
#endif

#if (OS_FLAG_EN > 0) && (OS_MAX_FLAGS > 0) && (OS_TASK_DEL_EN > 0)
        ptcb->OSTCBFlagNode  = (OS_FLAG_NODE *)0;          /* Task is not pending on an event flag     */
    f190:	e0bff517 	ldw	r2,-44(fp)
    f194:	10000a15 	stw	zero,40(r2)
#endif

#if (OS_MBOX_EN > 0) || ((OS_Q_EN > 0) && (OS_MAX_QS > 0))
        ptcb->OSTCBMsg       = (void *)0;                  /* No message received                      */
    f198:	e0bff517 	ldw	r2,-44(fp)
    f19c:	10000915 	stw	zero,36(r2)
#endif

#if OS_TASK_PROFILE_EN > 0
        ptcb->OSTCBCtxSwCtr    = 0L;                       /* Initialize profiling variables           */
    f1a0:	e0bff517 	ldw	r2,-44(fp)
    f1a4:	10000e15 	stw	zero,56(r2)
        ptcb->OSTCBCyclesStart = 0L;
    f1a8:	e0bff517 	ldw	r2,-44(fp)
    f1ac:	10001015 	stw	zero,64(r2)
        ptcb->OSTCBCyclesTot   = 0L;
    f1b0:	e0bff517 	ldw	r2,-44(fp)
    f1b4:	10000f15 	stw	zero,60(r2)
        ptcb->OSTCBStkBase     = (OS_STK *)0;
    f1b8:	e0bff517 	ldw	r2,-44(fp)
    f1bc:	10001115 	stw	zero,68(r2)
        ptcb->OSTCBStkUsed     = 0L;
    f1c0:	e0bff517 	ldw	r2,-44(fp)
    f1c4:	10001215 	stw	zero,72(r2)
#endif

#if OS_TASK_NAME_SIZE > 1
        ptcb->OSTCBTaskName[0] = '?';                      /* Unknown name at task creation            */
    f1c8:	e0bff517 	ldw	r2,-44(fp)
    f1cc:	00c00fc4 	movi	r3,63
    f1d0:	10c01305 	stb	r3,76(r2)
        ptcb->OSTCBTaskName[1] = OS_ASCII_NUL;
    f1d4:	e0bff517 	ldw	r2,-44(fp)
    f1d8:	10001345 	stb	zero,77(r2)
#endif

        OSTCBInitHook(ptcb);
    f1dc:	e13ff517 	ldw	r4,-44(fp)
    f1e0:	00185b80 	call	185b8 <OSTCBInitHook>

        OSTaskCreateHook(ptcb);                            /* Call user defined hook                   */
    f1e4:	e13ff517 	ldw	r4,-44(fp)
    f1e8:	00184d00 	call	184d0 <OSTaskCreateHook>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    f1ec:	0005303a 	rdctl	r2,status
    f1f0:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    f1f4:	e0fff817 	ldw	r3,-32(fp)
    f1f8:	00bfff84 	movi	r2,-2
    f1fc:	1884703a 	and	r2,r3,r2
    f200:	1001703a 	wrctl	status,r2
  
  return context;
    f204:	e0bff817 	ldw	r2,-32(fp)

        OS_ENTER_CRITICAL();
    f208:	e0bff415 	stw	r2,-48(fp)
        OSTCBPrioTbl[prio] = ptcb;
    f20c:	e0fffb03 	ldbu	r3,-20(fp)
    f210:	008000f4 	movhi	r2,3
    f214:	10a11f04 	addi	r2,r2,-31620
    f218:	18c7883a 	add	r3,r3,r3
    f21c:	18c7883a 	add	r3,r3,r3
    f220:	10c5883a 	add	r2,r2,r3
    f224:	e0fff517 	ldw	r3,-44(fp)
    f228:	10c00015 	stw	r3,0(r2)
        ptcb->OSTCBNext    = OSTCBList;                    /* Link into TCB chain                      */
    f22c:	d0e80e17 	ldw	r3,-24520(gp)
    f230:	e0bff517 	ldw	r2,-44(fp)
    f234:	10c00515 	stw	r3,20(r2)
        ptcb->OSTCBPrev    = (OS_TCB *)0;
    f238:	e0bff517 	ldw	r2,-44(fp)
    f23c:	10000615 	stw	zero,24(r2)
        if (OSTCBList != (OS_TCB *)0) {
    f240:	d0a80e17 	ldw	r2,-24520(gp)
    f244:	10000326 	beq	r2,zero,f254 <OS_TCBInit+0x22c>
            OSTCBList->OSTCBPrev = ptcb;
    f248:	d0a80e17 	ldw	r2,-24520(gp)
    f24c:	e0fff517 	ldw	r3,-44(fp)
    f250:	10c00615 	stw	r3,24(r2)
        }
        OSTCBList               = ptcb;
    f254:	e0bff517 	ldw	r2,-44(fp)
    f258:	d0a80e15 	stw	r2,-24520(gp)
        OSRdyGrp               |= ptcb->OSTCBBitY;         /* Make task ready to run                   */
    f25c:	e0bff517 	ldw	r2,-44(fp)
    f260:	10c00d83 	ldbu	r3,54(r2)
    f264:	d0a81703 	ldbu	r2,-24484(gp)
    f268:	1884b03a 	or	r2,r3,r2
    f26c:	d0a81705 	stb	r2,-24484(gp)
        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
    f270:	e0bff517 	ldw	r2,-44(fp)
    f274:	10800d03 	ldbu	r2,52(r2)
    f278:	10c03fcc 	andi	r3,r2,255
    f27c:	e0bff517 	ldw	r2,-44(fp)
    f280:	10800d03 	ldbu	r2,52(r2)
    f284:	11003fcc 	andi	r4,r2,255
    f288:	d0a81744 	addi	r2,gp,-24483
    f28c:	2085883a 	add	r2,r4,r2
    f290:	11000003 	ldbu	r4,0(r2)
    f294:	e0bff517 	ldw	r2,-44(fp)
    f298:	10800d43 	ldbu	r2,53(r2)
    f29c:	2084b03a 	or	r2,r4,r2
    f2a0:	1009883a 	mov	r4,r2
    f2a4:	d0a81744 	addi	r2,gp,-24483
    f2a8:	1885883a 	add	r2,r3,r2
    f2ac:	11000005 	stb	r4,0(r2)
        OSTaskCtr++;                                       /* Increment the #tasks counter             */
    f2b0:	d0a81343 	ldbu	r2,-24499(gp)
    f2b4:	10800044 	addi	r2,r2,1
    f2b8:	d0a81345 	stb	r2,-24499(gp)
    f2bc:	e0bff417 	ldw	r2,-48(fp)
    f2c0:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    f2c4:	e0bff917 	ldw	r2,-28(fp)
    f2c8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_NONE);
    f2cc:	0005883a 	mov	r2,zero
    f2d0:	00000506 	br	f2e8 <OS_TCBInit+0x2c0>
    f2d4:	e0bff417 	ldw	r2,-48(fp)
    f2d8:	e0bffa15 	stw	r2,-24(fp)
    f2dc:	e0bffa17 	ldw	r2,-24(fp)
    f2e0:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_TASK_NO_MORE_TCB);
    f2e4:	00801084 	movi	r2,66
}
    f2e8:	e037883a 	mov	sp,fp
    f2ec:	dfc00117 	ldw	ra,4(sp)
    f2f0:	df000017 	ldw	fp,0(sp)
    f2f4:	dec00204 	addi	sp,sp,8
    f2f8:	f800283a 	ret

0000f2fc <OSDebugInit>:
*********************************************************************************************************
*/

#if OS_DEBUG_EN > 0
void  OSDebugInit (void)
{
    f2fc:	defffe04 	addi	sp,sp,-8
    f300:	df000115 	stw	fp,4(sp)
    f304:	df000104 	addi	fp,sp,4
    void  *ptemp;

    
    ptemp = (void *)&OSDebugEn;
    f308:	d0a00e04 	addi	r2,gp,-32712
    f30c:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSEndiannessTest;
    f310:	d0a00f04 	addi	r2,gp,-32708
    f314:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSEventMax;
    f318:	d0a01084 	addi	r2,gp,-32702
    f31c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventNameSize;
    f320:	d0a01104 	addi	r2,gp,-32700
    f324:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventEn;
    f328:	d0a01004 	addi	r2,gp,-32704
    f32c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventSize;
    f330:	d0a01184 	addi	r2,gp,-32698
    f334:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventTblSize;
    f338:	d0a01204 	addi	r2,gp,-32696
    f33c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventMultiEn;
    f340:	d0a01284 	addi	r2,gp,-32694
    f344:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSFlagEn;
    f348:	d0a01304 	addi	r2,gp,-32692
    f34c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagGrpSize;
    f350:	d0a01384 	addi	r2,gp,-32690
    f354:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagNodeSize;
    f358:	d0a01404 	addi	r2,gp,-32688
    f35c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagWidth;
    f360:	d0a01484 	addi	r2,gp,-32686
    f364:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagMax;
    f368:	d0a01504 	addi	r2,gp,-32684
    f36c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagNameSize;
    f370:	d0a01584 	addi	r2,gp,-32682
    f374:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSLowestPrio;
    f378:	d0a01604 	addi	r2,gp,-32680
    f37c:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSMboxEn;
    f380:	d0a01684 	addi	r2,gp,-32678
    f384:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSMemEn;
    f388:	d0a01704 	addi	r2,gp,-32676
    f38c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSMemMax;
    f390:	d0a01784 	addi	r2,gp,-32674
    f394:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSMemNameSize;
    f398:	d0a01804 	addi	r2,gp,-32672
    f39c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSMemSize;
    f3a0:	d0a01884 	addi	r2,gp,-32670
    f3a4:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSMemTblSize;
    f3a8:	d0a01904 	addi	r2,gp,-32668
    f3ac:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSMutexEn;
    f3b0:	d0a01984 	addi	r2,gp,-32666
    f3b4:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSPtrSize;
    f3b8:	d0a01a04 	addi	r2,gp,-32664
    f3bc:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSQEn;
    f3c0:	d0a01a84 	addi	r2,gp,-32662
    f3c4:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSQMax;
    f3c8:	d0a01b04 	addi	r2,gp,-32660
    f3cc:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSQSize;
    f3d0:	d0a01b84 	addi	r2,gp,-32658
    f3d4:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSRdyTblSize;
    f3d8:	d0a01c04 	addi	r2,gp,-32656
    f3dc:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSSemEn;
    f3e0:	d0a01c84 	addi	r2,gp,-32654
    f3e4:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSStkWidth;
    f3e8:	d0a01d04 	addi	r2,gp,-32652
    f3ec:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSTaskCreateEn;
    f3f0:	d0a01d84 	addi	r2,gp,-32650
    f3f4:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskCreateExtEn;
    f3f8:	d0a01e04 	addi	r2,gp,-32648
    f3fc:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskDelEn;
    f400:	d0a01e84 	addi	r2,gp,-32646
    f404:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskIdleStkSize;
    f408:	d0a01f04 	addi	r2,gp,-32644
    f40c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskProfileEn;
    f410:	d0a01f84 	addi	r2,gp,-32642
    f414:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskMax;
    f418:	d0a02004 	addi	r2,gp,-32640
    f41c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskNameSize;
    f420:	d0a02084 	addi	r2,gp,-32638
    f424:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskStatEn;
    f428:	d0a02104 	addi	r2,gp,-32636
    f42c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskStatStkSize;
    f430:	d0a02184 	addi	r2,gp,-32634
    f434:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskStatStkChkEn;
    f438:	d0a02204 	addi	r2,gp,-32632
    f43c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskSwHookEn;
    f440:	d0a02284 	addi	r2,gp,-32630
    f444:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSTCBPrioTblMax;
    f448:	d0a02304 	addi	r2,gp,-32628
    f44c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTCBSize;
    f450:	d0a02384 	addi	r2,gp,-32626
    f454:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSTicksPerSec;
    f458:	d0a02404 	addi	r2,gp,-32624
    f45c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTimeTickHookEn;
    f460:	d0a02484 	addi	r2,gp,-32622
    f464:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSTmrWheelSize;
    ptemp = (void *)&OSTmrWheelTblSize;
#endif

    ptemp = (void *)&OSVersionNbr;
    f468:	d0a02504 	addi	r2,gp,-32620
    f46c:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSDataSize;
    f470:	d0a02a04 	addi	r2,gp,-32600
    f474:	e0bfff15 	stw	r2,-4(fp)

    ptemp = ptemp;                             /* Prevent compiler warning for 'ptemp' not being used! */
}
    f478:	e037883a 	mov	sp,fp
    f47c:	df000017 	ldw	fp,0(sp)
    f480:	dec00104 	addi	sp,sp,4
    f484:	f800283a 	ret

0000f488 <OSFlagAccept>:
*********************************************************************************************************
*/

#if OS_FLAG_ACCEPT_EN > 0
OS_FLAGS  OSFlagAccept (OS_FLAG_GRP *pgrp, OS_FLAGS flags, INT8U wait_type, INT8U *perr)
{
    f488:	defff204 	addi	sp,sp,-56
    f48c:	df000d15 	stw	fp,52(sp)
    f490:	df000d04 	addi	fp,sp,52
    f494:	e13ffc15 	stw	r4,-16(fp)
    f498:	2807883a 	mov	r3,r5
    f49c:	3005883a 	mov	r2,r6
    f4a0:	e1ffff15 	stw	r7,-4(fp)
    f4a4:	e0fffd0d 	sth	r3,-12(fp)
    f4a8:	e0bffe05 	stb	r2,-8(fp)
    OS_FLAGS      flags_rdy;
    INT8U         result;
    BOOLEAN       consume;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR     cpu_sr = 0;
    f4ac:	e03ff415 	stw	zero,-48(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
    f4b0:	e0bfff17 	ldw	r2,-4(fp)
    f4b4:	1000021e 	bne	r2,zero,f4c0 <OSFlagAccept+0x38>
        return ((OS_FLAGS)0);
    f4b8:	0005883a 	mov	r2,zero
    f4bc:	0000b006 	br	f780 <OSFlagAccept+0x2f8>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {                        /* Validate 'pgrp'                          */
    f4c0:	e0bffc17 	ldw	r2,-16(fp)
    f4c4:	1000051e 	bne	r2,zero,f4dc <OSFlagAccept+0x54>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
    f4c8:	e0bfff17 	ldw	r2,-4(fp)
    f4cc:	00c01b84 	movi	r3,110
    f4d0:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
    f4d4:	0005883a 	mov	r2,zero
    f4d8:	0000a906 	br	f780 <OSFlagAccept+0x2f8>
    }
#endif
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {          /* Validate event block type                */
    f4dc:	e0bffc17 	ldw	r2,-16(fp)
    f4e0:	10800003 	ldbu	r2,0(r2)
    f4e4:	10803fcc 	andi	r2,r2,255
    f4e8:	10800160 	cmpeqi	r2,r2,5
    f4ec:	1000051e 	bne	r2,zero,f504 <OSFlagAccept+0x7c>
        *perr = OS_ERR_EVENT_TYPE;
    f4f0:	e0bfff17 	ldw	r2,-4(fp)
    f4f4:	00c00044 	movi	r3,1
    f4f8:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
    f4fc:	0005883a 	mov	r2,zero
    f500:	00009f06 	br	f780 <OSFlagAccept+0x2f8>
    }
    result = (INT8U)(wait_type & OS_FLAG_CONSUME);
    f504:	e0fffe03 	ldbu	r3,-8(fp)
    f508:	00bfe004 	movi	r2,-128
    f50c:	1884703a 	and	r2,r3,r2
    f510:	e0bff505 	stb	r2,-44(fp)
    if (result != (INT8U)0) {                              /* See if we need to consume the flags      */
    f514:	e0bff503 	ldbu	r2,-44(fp)
    f518:	10000626 	beq	r2,zero,f534 <OSFlagAccept+0xac>
        wait_type &= ~OS_FLAG_CONSUME;
    f51c:	e0bffe03 	ldbu	r2,-8(fp)
    f520:	10801fcc 	andi	r2,r2,127
    f524:	e0bffe05 	stb	r2,-8(fp)
        consume    = OS_TRUE;
    f528:	00800044 	movi	r2,1
    f52c:	e0bff385 	stb	r2,-50(fp)
    f530:	00000106 	br	f538 <OSFlagAccept+0xb0>
    } else {
        consume    = OS_FALSE;
    f534:	e03ff385 	stb	zero,-50(fp)
    }
/*$PAGE*/
    *perr = OS_ERR_NONE;                                   /* Assume NO error until proven otherwise.  */
    f538:	e0bfff17 	ldw	r2,-4(fp)
    f53c:	10000005 	stb	zero,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    f540:	0005303a 	rdctl	r2,status
    f544:	e0bff615 	stw	r2,-40(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    f548:	e0fff617 	ldw	r3,-40(fp)
    f54c:	00bfff84 	movi	r2,-2
    f550:	1884703a 	and	r2,r3,r2
    f554:	1001703a 	wrctl	status,r2
  
  return context;
    f558:	e0bff617 	ldw	r2,-40(fp)
    OS_ENTER_CRITICAL();
    f55c:	e0bff415 	stw	r2,-48(fp)
    switch (wait_type) {
    f560:	e0bffe03 	ldbu	r2,-8(fp)
    f564:	10c00060 	cmpeqi	r3,r2,1
    f568:	18005f1e 	bne	r3,zero,f6e8 <OSFlagAccept+0x260>
    f56c:	10c00088 	cmpgei	r3,r2,2
    f570:	1800021e 	bne	r3,zero,f57c <OSFlagAccept+0xf4>
    f574:	10003f26 	beq	r2,zero,f674 <OSFlagAccept+0x1ec>
    f578:	00007706 	br	f758 <OSFlagAccept+0x2d0>
    f57c:	10c000a0 	cmpeqi	r3,r2,2
    f580:	1800031e 	bne	r3,zero,f590 <OSFlagAccept+0x108>
    f584:	108000e0 	cmpeqi	r2,r2,3
    f588:	10001e1e 	bne	r2,zero,f604 <OSFlagAccept+0x17c>
    f58c:	00007206 	br	f758 <OSFlagAccept+0x2d0>
        case OS_FLAG_WAIT_SET_ALL:                         /* See if all required flags are set        */
             flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);     /* Extract only the bits we want   */
    f590:	e0bffc17 	ldw	r2,-16(fp)
    f594:	10c0020b 	ldhu	r3,8(r2)
    f598:	e0bffd0b 	ldhu	r2,-12(fp)
    f59c:	1884703a 	and	r2,r3,r2
    f5a0:	e0bff30d 	sth	r2,-52(fp)
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
    f5a4:	e0fff30b 	ldhu	r3,-52(fp)
    f5a8:	e0bffd0b 	ldhu	r2,-12(fp)
    f5ac:	18800d1e 	bne	r3,r2,f5e4 <OSFlagAccept+0x15c>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
    f5b0:	e0bff383 	ldbu	r2,-50(fp)
    f5b4:	10800058 	cmpnei	r2,r2,1
    f5b8:	10000d1e 	bne	r2,zero,f5f0 <OSFlagAccept+0x168>
                     pgrp->OSFlagFlags &= ~flags_rdy;      /* Clear ONLY the flags that we wanted      */
    f5bc:	e0bffc17 	ldw	r2,-16(fp)
    f5c0:	1080020b 	ldhu	r2,8(r2)
    f5c4:	1007883a 	mov	r3,r2
    f5c8:	e0bff30b 	ldhu	r2,-52(fp)
    f5cc:	0084303a 	nor	r2,zero,r2
    f5d0:	1884703a 	and	r2,r3,r2
    f5d4:	1007883a 	mov	r3,r2
    f5d8:	e0bffc17 	ldw	r2,-16(fp)
    f5dc:	10c0020d 	sth	r3,8(r2)
    f5e0:	00000306 	br	f5f0 <OSFlagAccept+0x168>
                 }
             } else {
                 *perr = OS_ERR_FLAG_NOT_RDY;
    f5e4:	e0bfff17 	ldw	r2,-4(fp)
    f5e8:	00c01c04 	movi	r3,112
    f5ec:	10c00005 	stb	r3,0(r2)
    f5f0:	e0bff417 	ldw	r2,-48(fp)
    f5f4:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    f5f8:	e0bff717 	ldw	r2,-36(fp)
    f5fc:	1001703a 	wrctl	status,r2
             }
             OS_EXIT_CRITICAL();
             break;
    f600:	00005e06 	br	f77c <OSFlagAccept+0x2f4>

        case OS_FLAG_WAIT_SET_ANY:
             flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);     /* Extract only the bits we want   */
    f604:	e0bffc17 	ldw	r2,-16(fp)
    f608:	10c0020b 	ldhu	r3,8(r2)
    f60c:	e0bffd0b 	ldhu	r2,-12(fp)
    f610:	1884703a 	and	r2,r3,r2
    f614:	e0bff30d 	sth	r2,-52(fp)
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag set                      */
    f618:	e0bff30b 	ldhu	r2,-52(fp)
    f61c:	10000d26 	beq	r2,zero,f654 <OSFlagAccept+0x1cc>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
    f620:	e0bff383 	ldbu	r2,-50(fp)
    f624:	10800058 	cmpnei	r2,r2,1
    f628:	10000d1e 	bne	r2,zero,f660 <OSFlagAccept+0x1d8>
                     pgrp->OSFlagFlags &= ~flags_rdy;      /* Clear ONLY the flags that we got         */
    f62c:	e0bffc17 	ldw	r2,-16(fp)
    f630:	1080020b 	ldhu	r2,8(r2)
    f634:	1007883a 	mov	r3,r2
    f638:	e0bff30b 	ldhu	r2,-52(fp)
    f63c:	0084303a 	nor	r2,zero,r2
    f640:	1884703a 	and	r2,r3,r2
    f644:	1007883a 	mov	r3,r2
    f648:	e0bffc17 	ldw	r2,-16(fp)
    f64c:	10c0020d 	sth	r3,8(r2)
    f650:	00000306 	br	f660 <OSFlagAccept+0x1d8>
                 }
             } else {
                 *perr = OS_ERR_FLAG_NOT_RDY;
    f654:	e0bfff17 	ldw	r2,-4(fp)
    f658:	00c01c04 	movi	r3,112
    f65c:	10c00005 	stb	r3,0(r2)
    f660:	e0bff417 	ldw	r2,-48(fp)
    f664:	e0bff815 	stw	r2,-32(fp)
    f668:	e0bff817 	ldw	r2,-32(fp)
    f66c:	1001703a 	wrctl	status,r2
             }
             OS_EXIT_CRITICAL();
             break;
    f670:	00004206 	br	f77c <OSFlagAccept+0x2f4>

#if OS_FLAG_WAIT_CLR_EN > 0
        case OS_FLAG_WAIT_CLR_ALL:                         /* See if all required flags are cleared    */
             flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags);  /* Extract only the bits we want     */
    f674:	e0bffc17 	ldw	r2,-16(fp)
    f678:	1080020b 	ldhu	r2,8(r2)
    f67c:	0084303a 	nor	r2,zero,r2
    f680:	1007883a 	mov	r3,r2
    f684:	e0bffd0b 	ldhu	r2,-12(fp)
    f688:	1884703a 	and	r2,r3,r2
    f68c:	e0bff30d 	sth	r2,-52(fp)
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
    f690:	e0fff30b 	ldhu	r3,-52(fp)
    f694:	e0bffd0b 	ldhu	r2,-12(fp)
    f698:	18800b1e 	bne	r3,r2,f6c8 <OSFlagAccept+0x240>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
    f69c:	e0bff383 	ldbu	r2,-50(fp)
    f6a0:	10800058 	cmpnei	r2,r2,1
    f6a4:	10000b1e 	bne	r2,zero,f6d4 <OSFlagAccept+0x24c>
                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we wanted        */
    f6a8:	e0bffc17 	ldw	r2,-16(fp)
    f6ac:	10c0020b 	ldhu	r3,8(r2)
    f6b0:	e0bff30b 	ldhu	r2,-52(fp)
    f6b4:	1884b03a 	or	r2,r3,r2
    f6b8:	1007883a 	mov	r3,r2
    f6bc:	e0bffc17 	ldw	r2,-16(fp)
    f6c0:	10c0020d 	sth	r3,8(r2)
    f6c4:	00000306 	br	f6d4 <OSFlagAccept+0x24c>
                 }
             } else {
                 *perr = OS_ERR_FLAG_NOT_RDY;
    f6c8:	e0bfff17 	ldw	r2,-4(fp)
    f6cc:	00c01c04 	movi	r3,112
    f6d0:	10c00005 	stb	r3,0(r2)
    f6d4:	e0bff417 	ldw	r2,-48(fp)
    f6d8:	e0bff915 	stw	r2,-28(fp)
    f6dc:	e0bff917 	ldw	r2,-28(fp)
    f6e0:	1001703a 	wrctl	status,r2
             }
             OS_EXIT_CRITICAL();
             break;
    f6e4:	00002506 	br	f77c <OSFlagAccept+0x2f4>

        case OS_FLAG_WAIT_CLR_ANY:
             flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags); /* Extract only the bits we want      */
    f6e8:	e0bffc17 	ldw	r2,-16(fp)
    f6ec:	1080020b 	ldhu	r2,8(r2)
    f6f0:	0084303a 	nor	r2,zero,r2
    f6f4:	1007883a 	mov	r3,r2
    f6f8:	e0bffd0b 	ldhu	r2,-12(fp)
    f6fc:	1884703a 	and	r2,r3,r2
    f700:	e0bff30d 	sth	r2,-52(fp)
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag cleared                  */
    f704:	e0bff30b 	ldhu	r2,-52(fp)
    f708:	10000b26 	beq	r2,zero,f738 <OSFlagAccept+0x2b0>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
    f70c:	e0bff383 	ldbu	r2,-50(fp)
    f710:	10800058 	cmpnei	r2,r2,1
    f714:	10000b1e 	bne	r2,zero,f744 <OSFlagAccept+0x2bc>
                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we got           */
    f718:	e0bffc17 	ldw	r2,-16(fp)
    f71c:	10c0020b 	ldhu	r3,8(r2)
    f720:	e0bff30b 	ldhu	r2,-52(fp)
    f724:	1884b03a 	or	r2,r3,r2
    f728:	1007883a 	mov	r3,r2
    f72c:	e0bffc17 	ldw	r2,-16(fp)
    f730:	10c0020d 	sth	r3,8(r2)
    f734:	00000306 	br	f744 <OSFlagAccept+0x2bc>
                 }
             } else {
                 *perr = OS_ERR_FLAG_NOT_RDY;
    f738:	e0bfff17 	ldw	r2,-4(fp)
    f73c:	00c01c04 	movi	r3,112
    f740:	10c00005 	stb	r3,0(r2)
    f744:	e0bff417 	ldw	r2,-48(fp)
    f748:	e0bffa15 	stw	r2,-24(fp)
    f74c:	e0bffa17 	ldw	r2,-24(fp)
    f750:	1001703a 	wrctl	status,r2
             }
             OS_EXIT_CRITICAL();
             break;
    f754:	00000906 	br	f77c <OSFlagAccept+0x2f4>
    f758:	e0bff417 	ldw	r2,-48(fp)
    f75c:	e0bffb15 	stw	r2,-20(fp)
    f760:	e0bffb17 	ldw	r2,-20(fp)
    f764:	1001703a 	wrctl	status,r2
#endif

        default:
             OS_EXIT_CRITICAL();
             flags_rdy = (OS_FLAGS)0;
    f768:	e03ff30d 	sth	zero,-52(fp)
             *perr     = OS_ERR_FLAG_WAIT_TYPE;
    f76c:	e0bfff17 	ldw	r2,-4(fp)
    f770:	00c01bc4 	movi	r3,111
    f774:	10c00005 	stb	r3,0(r2)
             break;
    f778:	0001883a 	nop
    }
    return (flags_rdy);
    f77c:	e0bff30b 	ldhu	r2,-52(fp)
}
    f780:	e037883a 	mov	sp,fp
    f784:	df000017 	ldw	fp,0(sp)
    f788:	dec00104 	addi	sp,sp,4
    f78c:	f800283a 	ret

0000f790 <OSFlagCreate>:
* Called from: Task ONLY
*********************************************************************************************************
*/

OS_FLAG_GRP  *OSFlagCreate (OS_FLAGS flags, INT8U *perr)
{
    f790:	defff804 	addi	sp,sp,-32
    f794:	df000715 	stw	fp,28(sp)
    f798:	df000704 	addi	fp,sp,28
    f79c:	2005883a 	mov	r2,r4
    f7a0:	e17fff15 	stw	r5,-4(fp)
    f7a4:	e0bffe0d 	sth	r2,-8(fp)
    OS_FLAG_GRP *pgrp;
#if OS_CRITICAL_METHOD == 3                         /* Allocate storage for CPU status register        */
    OS_CPU_SR    cpu_sr = 0;
    f7a8:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                       /* Validate 'perr'                                 */
    f7ac:	e0bfff17 	ldw	r2,-4(fp)
    f7b0:	1000021e 	bne	r2,zero,f7bc <OSFlagCreate+0x2c>
        return ((OS_FLAG_GRP *)0);
    f7b4:	0005883a 	mov	r2,zero
    f7b8:	00003b06 	br	f8a8 <OSFlagCreate+0x118>
    }
#endif
    if (OSIntNesting > 0) {                         /* See if called from ISR ...                      */
    f7bc:	008000b4 	movhi	r2,2
    f7c0:	10b48d04 	addi	r2,r2,-11724
    f7c4:	10800003 	ldbu	r2,0(r2)
    f7c8:	10803fcc 	andi	r2,r2,255
    f7cc:	10000526 	beq	r2,zero,f7e4 <OSFlagCreate+0x54>
        *perr = OS_ERR_CREATE_ISR;                  /* ... can't CREATE from an ISR                    */
    f7d0:	e0bfff17 	ldw	r2,-4(fp)
    f7d4:	00c00404 	movi	r3,16
    f7d8:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAG_GRP *)0);
    f7dc:	0005883a 	mov	r2,zero
    f7e0:	00003106 	br	f8a8 <OSFlagCreate+0x118>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    f7e4:	0005303a 	rdctl	r2,status
    f7e8:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    f7ec:	e0fffb17 	ldw	r3,-20(fp)
    f7f0:	00bfff84 	movi	r2,-2
    f7f4:	1884703a 	and	r2,r3,r2
    f7f8:	1001703a 	wrctl	status,r2
  
  return context;
    f7fc:	e0bffb17 	ldw	r2,-20(fp)
    }
    OS_ENTER_CRITICAL();
    f800:	e0bff915 	stw	r2,-28(fp)
    pgrp = OSFlagFreeList;                          /* Get next free event flag                        */
    f804:	008000b4 	movhi	r2,2
    f808:	10b49004 	addi	r2,r2,-11712
    f80c:	10800017 	ldw	r2,0(r2)
    f810:	e0bffa15 	stw	r2,-24(fp)
    if (pgrp != (OS_FLAG_GRP *)0) {                 /* See if we have event flag groups available      */
    f814:	e0bffa17 	ldw	r2,-24(fp)
    f818:	10001b26 	beq	r2,zero,f888 <OSFlagCreate+0xf8>
                                                    /* Adjust free list                                */
        OSFlagFreeList       = (OS_FLAG_GRP *)OSFlagFreeList->OSFlagWaitList;
    f81c:	008000b4 	movhi	r2,2
    f820:	10b49004 	addi	r2,r2,-11712
    f824:	10800017 	ldw	r2,0(r2)
    f828:	10c00117 	ldw	r3,4(r2)
    f82c:	008000b4 	movhi	r2,2
    f830:	10b49004 	addi	r2,r2,-11712
    f834:	10c00015 	stw	r3,0(r2)
        pgrp->OSFlagType     = OS_EVENT_TYPE_FLAG;  /* Set to event flag group type                    */
    f838:	e0bffa17 	ldw	r2,-24(fp)
    f83c:	00c00144 	movi	r3,5
    f840:	10c00005 	stb	r3,0(r2)
        pgrp->OSFlagFlags    = flags;               /* Set to desired initial value                    */
    f844:	e0bffa17 	ldw	r2,-24(fp)
    f848:	e0fffe0b 	ldhu	r3,-8(fp)
    f84c:	10c0020d 	sth	r3,8(r2)
        pgrp->OSFlagWaitList = (void *)0;           /* Clear list of tasks waiting on flags            */
    f850:	e0bffa17 	ldw	r2,-24(fp)
    f854:	10000115 	stw	zero,4(r2)
#if OS_FLAG_NAME_SIZE > 1
        pgrp->OSFlagName[0]  = '?';
    f858:	e0bffa17 	ldw	r2,-24(fp)
    f85c:	00c00fc4 	movi	r3,63
    f860:	10c00285 	stb	r3,10(r2)
        pgrp->OSFlagName[1]  = OS_ASCII_NUL;
    f864:	e0bffa17 	ldw	r2,-24(fp)
    f868:	100002c5 	stb	zero,11(r2)
    f86c:	e0bff917 	ldw	r2,-28(fp)
    f870:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    f874:	e0bffc17 	ldw	r2,-16(fp)
    f878:	1001703a 	wrctl	status,r2
#endif
        OS_EXIT_CRITICAL();
        *perr                = OS_ERR_NONE;
    f87c:	e0bfff17 	ldw	r2,-4(fp)
    f880:	10000005 	stb	zero,0(r2)
    f884:	00000706 	br	f8a4 <OSFlagCreate+0x114>
    f888:	e0bff917 	ldw	r2,-28(fp)
    f88c:	e0bffd15 	stw	r2,-12(fp)
    f890:	e0bffd17 	ldw	r2,-12(fp)
    f894:	1001703a 	wrctl	status,r2
    } else {
        OS_EXIT_CRITICAL();
        *perr                = OS_ERR_FLAG_GRP_DEPLETED;
    f898:	e0bfff17 	ldw	r2,-4(fp)
    f89c:	00c01c84 	movi	r3,114
    f8a0:	10c00005 	stb	r3,0(r2)
    }
    return (pgrp);                                  /* Return pointer to event flag group              */
    f8a4:	e0bffa17 	ldw	r2,-24(fp)
}
    f8a8:	e037883a 	mov	sp,fp
    f8ac:	df000017 	ldw	fp,0(sp)
    f8b0:	dec00104 	addi	sp,sp,4
    f8b4:	f800283a 	ret

0000f8b8 <OSFlagDel>:
*********************************************************************************************************
*/

#if OS_FLAG_DEL_EN > 0
OS_FLAG_GRP  *OSFlagDel (OS_FLAG_GRP *pgrp, INT8U opt, INT8U *perr)
{
    f8b8:	defff204 	addi	sp,sp,-56
    f8bc:	dfc00d15 	stw	ra,52(sp)
    f8c0:	df000c15 	stw	fp,48(sp)
    f8c4:	df000c04 	addi	fp,sp,48
    f8c8:	e13ffd15 	stw	r4,-12(fp)
    f8cc:	2805883a 	mov	r2,r5
    f8d0:	e1bfff15 	stw	r6,-4(fp)
    f8d4:	e0bffe05 	stb	r2,-8(fp)
    BOOLEAN       tasks_waiting;
    OS_FLAG_NODE *pnode;
    OS_FLAG_GRP  *pgrp_return;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR     cpu_sr = 0;
    f8d8:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
    f8dc:	e0bfff17 	ldw	r2,-4(fp)
    f8e0:	1000021e 	bne	r2,zero,f8ec <OSFlagDel+0x34>
        return (pgrp);
    f8e4:	e0bffd17 	ldw	r2,-12(fp)
    f8e8:	00008a06 	br	fb14 <OSFlagDel+0x25c>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {                        /* Validate 'pgrp'                          */
    f8ec:	e0bffd17 	ldw	r2,-12(fp)
    f8f0:	1000051e 	bne	r2,zero,f908 <OSFlagDel+0x50>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
    f8f4:	e0bfff17 	ldw	r2,-4(fp)
    f8f8:	00c01b84 	movi	r3,110
    f8fc:	10c00005 	stb	r3,0(r2)
        return (pgrp);
    f900:	e0bffd17 	ldw	r2,-12(fp)
    f904:	00008306 	br	fb14 <OSFlagDel+0x25c>
    }
#endif
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
    f908:	008000b4 	movhi	r2,2
    f90c:	10b48d04 	addi	r2,r2,-11724
    f910:	10800003 	ldbu	r2,0(r2)
    f914:	10803fcc 	andi	r2,r2,255
    f918:	10000526 	beq	r2,zero,f930 <OSFlagDel+0x78>
        *perr = OS_ERR_DEL_ISR;                            /* ... can't DELETE from an ISR             */
    f91c:	e0bfff17 	ldw	r2,-4(fp)
    f920:	00c003c4 	movi	r3,15
    f924:	10c00005 	stb	r3,0(r2)
        return (pgrp);
    f928:	e0bffd17 	ldw	r2,-12(fp)
    f92c:	00007906 	br	fb14 <OSFlagDel+0x25c>
    }
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {          /* Validate event group type                */
    f930:	e0bffd17 	ldw	r2,-12(fp)
    f934:	10800003 	ldbu	r2,0(r2)
    f938:	10803fcc 	andi	r2,r2,255
    f93c:	10800160 	cmpeqi	r2,r2,5
    f940:	1000051e 	bne	r2,zero,f958 <OSFlagDel+0xa0>
        *perr = OS_ERR_EVENT_TYPE;
    f944:	e0bfff17 	ldw	r2,-4(fp)
    f948:	00c00044 	movi	r3,1
    f94c:	10c00005 	stb	r3,0(r2)
        return (pgrp);
    f950:	e0bffd17 	ldw	r2,-12(fp)
    f954:	00006f06 	br	fb14 <OSFlagDel+0x25c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    f958:	0005303a 	rdctl	r2,status
    f95c:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    f960:	e0fff817 	ldw	r3,-32(fp)
    f964:	00bfff84 	movi	r2,-2
    f968:	1884703a 	and	r2,r3,r2
    f96c:	1001703a 	wrctl	status,r2
  
  return context;
    f970:	e0bff817 	ldw	r2,-32(fp)
    }
    OS_ENTER_CRITICAL();
    f974:	e0bff715 	stw	r2,-36(fp)
    if (pgrp->OSFlagWaitList != (void *)0) {               /* See if any tasks waiting on event flags  */
    f978:	e0bffd17 	ldw	r2,-12(fp)
    f97c:	10800117 	ldw	r2,4(r2)
    f980:	10000326 	beq	r2,zero,f990 <OSFlagDel+0xd8>
        tasks_waiting = OS_TRUE;                           /* Yes                                      */
    f984:	00800044 	movi	r2,1
    f988:	e0bff405 	stb	r2,-48(fp)
    f98c:	00000106 	br	f994 <OSFlagDel+0xdc>
    } else {
        tasks_waiting = OS_FALSE;                          /* No                                       */
    f990:	e03ff405 	stb	zero,-48(fp)
    }
    switch (opt) {
    f994:	e0bffe03 	ldbu	r2,-8(fp)
    f998:	10000326 	beq	r2,zero,f9a8 <OSFlagDel+0xf0>
    f99c:	10800060 	cmpeqi	r2,r2,1
    f9a0:	1000271e 	bne	r2,zero,fa40 <OSFlagDel+0x188>
    f9a4:	00005006 	br	fae8 <OSFlagDel+0x230>
        case OS_DEL_NO_PEND:                               /* Delete group if no task waiting          */
             if (tasks_waiting == OS_FALSE) {
    f9a8:	e0bff403 	ldbu	r2,-48(fp)
    f9ac:	10001a1e 	bne	r2,zero,fa18 <OSFlagDel+0x160>
#if OS_FLAG_NAME_SIZE > 1
                 pgrp->OSFlagName[0]  = '?';               /* Unknown name                             */
    f9b0:	e0bffd17 	ldw	r2,-12(fp)
    f9b4:	00c00fc4 	movi	r3,63
    f9b8:	10c00285 	stb	r3,10(r2)
                 pgrp->OSFlagName[1]  = OS_ASCII_NUL;
    f9bc:	e0bffd17 	ldw	r2,-12(fp)
    f9c0:	100002c5 	stb	zero,11(r2)
#endif
                 pgrp->OSFlagType     = OS_EVENT_TYPE_UNUSED;
    f9c4:	e0bffd17 	ldw	r2,-12(fp)
    f9c8:	10000005 	stb	zero,0(r2)
                 pgrp->OSFlagWaitList = (void *)OSFlagFreeList; /* Return group to free list           */
    f9cc:	008000b4 	movhi	r2,2
    f9d0:	10b49004 	addi	r2,r2,-11712
    f9d4:	10c00017 	ldw	r3,0(r2)
    f9d8:	e0bffd17 	ldw	r2,-12(fp)
    f9dc:	10c00115 	stw	r3,4(r2)
                 pgrp->OSFlagFlags    = (OS_FLAGS)0;
    f9e0:	e0bffd17 	ldw	r2,-12(fp)
    f9e4:	1000020d 	sth	zero,8(r2)
                 OSFlagFreeList       = pgrp;
    f9e8:	008000b4 	movhi	r2,2
    f9ec:	10b49004 	addi	r2,r2,-11712
    f9f0:	e0fffd17 	ldw	r3,-12(fp)
    f9f4:	10c00015 	stw	r3,0(r2)
    f9f8:	e0bff717 	ldw	r2,-36(fp)
    f9fc:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    fa00:	e0bff917 	ldw	r2,-28(fp)
    fa04:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                = OS_ERR_NONE;
    fa08:	e0bfff17 	ldw	r2,-4(fp)
    fa0c:	10000005 	stb	zero,0(r2)
                 pgrp_return          = (OS_FLAG_GRP *)0;  /* Event Flag Group has been deleted        */
    fa10:	e03ff615 	stw	zero,-40(fp)
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                = OS_ERR_TASK_WAITING;
                 pgrp_return          = pgrp;
             }
             break;
    fa14:	00003e06 	br	fb10 <OSFlagDel+0x258>
    fa18:	e0bff717 	ldw	r2,-36(fp)
    fa1c:	e0bffa15 	stw	r2,-24(fp)
    fa20:	e0bffa17 	ldw	r2,-24(fp)
    fa24:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                = OS_ERR_NONE;
                 pgrp_return          = (OS_FLAG_GRP *)0;  /* Event Flag Group has been deleted        */
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                = OS_ERR_TASK_WAITING;
    fa28:	e0bfff17 	ldw	r2,-4(fp)
    fa2c:	00c01244 	movi	r3,73
    fa30:	10c00005 	stb	r3,0(r2)
                 pgrp_return          = pgrp;
    fa34:	e0bffd17 	ldw	r2,-12(fp)
    fa38:	e0bff615 	stw	r2,-40(fp)
             }
             break;
    fa3c:	00003406 	br	fb10 <OSFlagDel+0x258>

        case OS_DEL_ALWAYS:                                /* Always delete the event flag group       */
             pnode = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
    fa40:	e0bffd17 	ldw	r2,-12(fp)
    fa44:	10800117 	ldw	r2,4(r2)
    fa48:	e0bff515 	stw	r2,-44(fp)
             while (pnode != (OS_FLAG_NODE *)0) {          /* Ready ALL tasks waiting for flags        */
    fa4c:	00000606 	br	fa68 <OSFlagDel+0x1b0>
                 (void)OS_FlagTaskRdy(pnode, (OS_FLAGS)0);
    fa50:	e13ff517 	ldw	r4,-44(fp)
    fa54:	000b883a 	mov	r5,zero
    fa58:	0010af40 	call	10af4 <OS_FlagTaskRdy>
                 pnode = (OS_FLAG_NODE *)pnode->OSFlagNodeNext;
    fa5c:	e0bff517 	ldw	r2,-44(fp)
    fa60:	10800017 	ldw	r2,0(r2)
    fa64:	e0bff515 	stw	r2,-44(fp)
             }
             break;

        case OS_DEL_ALWAYS:                                /* Always delete the event flag group       */
             pnode = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
             while (pnode != (OS_FLAG_NODE *)0) {          /* Ready ALL tasks waiting for flags        */
    fa68:	e0bff517 	ldw	r2,-44(fp)
    fa6c:	103ff81e 	bne	r2,zero,fa50 <__alt_mem_Flash_flash_data+0xf400fa50>
                 (void)OS_FlagTaskRdy(pnode, (OS_FLAGS)0);
                 pnode = (OS_FLAG_NODE *)pnode->OSFlagNodeNext;
             }
#if OS_FLAG_NAME_SIZE > 1
             pgrp->OSFlagName[0]  = '?';                   /* Unknown name                             */
    fa70:	e0bffd17 	ldw	r2,-12(fp)
    fa74:	00c00fc4 	movi	r3,63
    fa78:	10c00285 	stb	r3,10(r2)
             pgrp->OSFlagName[1]  = OS_ASCII_NUL;
    fa7c:	e0bffd17 	ldw	r2,-12(fp)
    fa80:	100002c5 	stb	zero,11(r2)
#endif
             pgrp->OSFlagType     = OS_EVENT_TYPE_UNUSED;
    fa84:	e0bffd17 	ldw	r2,-12(fp)
    fa88:	10000005 	stb	zero,0(r2)
             pgrp->OSFlagWaitList = (void *)OSFlagFreeList;/* Return group to free list                */
    fa8c:	008000b4 	movhi	r2,2
    fa90:	10b49004 	addi	r2,r2,-11712
    fa94:	10c00017 	ldw	r3,0(r2)
    fa98:	e0bffd17 	ldw	r2,-12(fp)
    fa9c:	10c00115 	stw	r3,4(r2)
             pgrp->OSFlagFlags    = (OS_FLAGS)0;
    faa0:	e0bffd17 	ldw	r2,-12(fp)
    faa4:	1000020d 	sth	zero,8(r2)
             OSFlagFreeList       = pgrp;
    faa8:	008000b4 	movhi	r2,2
    faac:	10b49004 	addi	r2,r2,-11712
    fab0:	e0fffd17 	ldw	r3,-12(fp)
    fab4:	10c00015 	stw	r3,0(r2)
    fab8:	e0bff717 	ldw	r2,-36(fp)
    fabc:	e0bffb15 	stw	r2,-20(fp)
    fac0:	e0bffb17 	ldw	r2,-20(fp)
    fac4:	1001703a 	wrctl	status,r2
             OS_EXIT_CRITICAL();
             if (tasks_waiting == OS_TRUE) {               /* Reschedule only if task(s) were waiting  */
    fac8:	e0bff403 	ldbu	r2,-48(fp)
    facc:	10800058 	cmpnei	r2,r2,1
    fad0:	1000011e 	bne	r2,zero,fad8 <OSFlagDel+0x220>
                 OS_Sched();                               /* Find highest priority task ready to run  */
    fad4:	000ec240 	call	ec24 <OS_Sched>
             }
             *perr = OS_ERR_NONE;
    fad8:	e0bfff17 	ldw	r2,-4(fp)
    fadc:	10000005 	stb	zero,0(r2)
             pgrp_return          = (OS_FLAG_GRP *)0;      /* Event Flag Group has been deleted        */
    fae0:	e03ff615 	stw	zero,-40(fp)
             break;
    fae4:	00000a06 	br	fb10 <OSFlagDel+0x258>
    fae8:	e0bff717 	ldw	r2,-36(fp)
    faec:	e0bffc15 	stw	r2,-16(fp)
    faf0:	e0bffc17 	ldw	r2,-16(fp)
    faf4:	1001703a 	wrctl	status,r2

        default:
             OS_EXIT_CRITICAL();
             *perr                = OS_ERR_INVALID_OPT;
    faf8:	e0bfff17 	ldw	r2,-4(fp)
    fafc:	00c001c4 	movi	r3,7
    fb00:	10c00005 	stb	r3,0(r2)
             pgrp_return          = pgrp;
    fb04:	e0bffd17 	ldw	r2,-12(fp)
    fb08:	e0bff615 	stw	r2,-40(fp)
             break;
    fb0c:	0001883a 	nop
    }
    return (pgrp_return);
    fb10:	e0bff617 	ldw	r2,-40(fp)
}
    fb14:	e037883a 	mov	sp,fp
    fb18:	dfc00117 	ldw	ra,4(sp)
    fb1c:	df000017 	ldw	fp,0(sp)
    fb20:	dec00204 	addi	sp,sp,8
    fb24:	f800283a 	ret

0000fb28 <OSFlagNameGet>:
*********************************************************************************************************
*/

#if OS_FLAG_NAME_SIZE > 1
INT8U  OSFlagNameGet (OS_FLAG_GRP *pgrp, INT8U *pname, INT8U *perr)
{
    fb28:	defff604 	addi	sp,sp,-40
    fb2c:	dfc00915 	stw	ra,36(sp)
    fb30:	df000815 	stw	fp,32(sp)
    fb34:	df000804 	addi	fp,sp,32
    fb38:	e13ffd15 	stw	r4,-12(fp)
    fb3c:	e17ffe15 	stw	r5,-8(fp)
    fb40:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
    fb44:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
    fb48:	e0bfff17 	ldw	r2,-4(fp)
    fb4c:	1000021e 	bne	r2,zero,fb58 <OSFlagNameGet+0x30>
        return (0);
    fb50:	0005883a 	mov	r2,zero
    fb54:	00003b06 	br	fc44 <OSFlagNameGet+0x11c>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {              /* Is 'pgrp' a NULL pointer?                          */
    fb58:	e0bffd17 	ldw	r2,-12(fp)
    fb5c:	1000051e 	bne	r2,zero,fb74 <OSFlagNameGet+0x4c>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
    fb60:	e0bfff17 	ldw	r2,-4(fp)
    fb64:	00c01b84 	movi	r3,110
    fb68:	10c00005 	stb	r3,0(r2)
        return (0);
    fb6c:	0005883a 	mov	r2,zero
    fb70:	00003406 	br	fc44 <OSFlagNameGet+0x11c>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
    fb74:	e0bffe17 	ldw	r2,-8(fp)
    fb78:	1000051e 	bne	r2,zero,fb90 <OSFlagNameGet+0x68>
        *perr = OS_ERR_PNAME_NULL;
    fb7c:	e0bfff17 	ldw	r2,-4(fp)
    fb80:	00c00304 	movi	r3,12
    fb84:	10c00005 	stb	r3,0(r2)
        return (0);
    fb88:	0005883a 	mov	r2,zero
    fb8c:	00002d06 	br	fc44 <OSFlagNameGet+0x11c>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
    fb90:	008000b4 	movhi	r2,2
    fb94:	10b48d04 	addi	r2,r2,-11724
    fb98:	10800003 	ldbu	r2,0(r2)
    fb9c:	10803fcc 	andi	r2,r2,255
    fba0:	10000526 	beq	r2,zero,fbb8 <OSFlagNameGet+0x90>
        *perr = OS_ERR_NAME_GET_ISR;
    fba4:	e0bfff17 	ldw	r2,-4(fp)
    fba8:	00c00444 	movi	r3,17
    fbac:	10c00005 	stb	r3,0(r2)
        return (0);
    fbb0:	0005883a 	mov	r2,zero
    fbb4:	00002306 	br	fc44 <OSFlagNameGet+0x11c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    fbb8:	0005303a 	rdctl	r2,status
    fbbc:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    fbc0:	e0fffa17 	ldw	r3,-24(fp)
    fbc4:	00bfff84 	movi	r2,-2
    fbc8:	1884703a 	and	r2,r3,r2
    fbcc:	1001703a 	wrctl	status,r2
  
  return context;
    fbd0:	e0bffa17 	ldw	r2,-24(fp)
    }
    OS_ENTER_CRITICAL();
    fbd4:	e0bff815 	stw	r2,-32(fp)
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {
    fbd8:	e0bffd17 	ldw	r2,-12(fp)
    fbdc:	10800003 	ldbu	r2,0(r2)
    fbe0:	10803fcc 	andi	r2,r2,255
    fbe4:	10800160 	cmpeqi	r2,r2,5
    fbe8:	1000091e 	bne	r2,zero,fc10 <OSFlagNameGet+0xe8>
    fbec:	e0bff817 	ldw	r2,-32(fp)
    fbf0:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    fbf4:	e0bffb17 	ldw	r2,-20(fp)
    fbf8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_EVENT_TYPE;
    fbfc:	e0bfff17 	ldw	r2,-4(fp)
    fc00:	00c00044 	movi	r3,1
    fc04:	10c00005 	stb	r3,0(r2)
        return (0);
    fc08:	0005883a 	mov	r2,zero
    fc0c:	00000d06 	br	fc44 <OSFlagNameGet+0x11c>
    }
    len   = OS_StrCopy(pname, pgrp->OSFlagName); /* Copy name from OS_FLAG_GRP                         */
    fc10:	e0bffd17 	ldw	r2,-12(fp)
    fc14:	10800284 	addi	r2,r2,10
    fc18:	e13ffe17 	ldw	r4,-8(fp)
    fc1c:	100b883a 	mov	r5,r2
    fc20:	000ed600 	call	ed60 <OS_StrCopy>
    fc24:	e0bff905 	stb	r2,-28(fp)
    fc28:	e0bff817 	ldw	r2,-32(fp)
    fc2c:	e0bffc15 	stw	r2,-16(fp)
    fc30:	e0bffc17 	ldw	r2,-16(fp)
    fc34:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
    fc38:	e0bfff17 	ldw	r2,-4(fp)
    fc3c:	10000005 	stb	zero,0(r2)
    return (len);
    fc40:	e0bff903 	ldbu	r2,-28(fp)
}
    fc44:	e037883a 	mov	sp,fp
    fc48:	dfc00117 	ldw	ra,4(sp)
    fc4c:	df000017 	ldw	fp,0(sp)
    fc50:	dec00204 	addi	sp,sp,8
    fc54:	f800283a 	ret

0000fc58 <OSFlagNameSet>:
*********************************************************************************************************
*/

#if OS_FLAG_NAME_SIZE > 1
void  OSFlagNameSet (OS_FLAG_GRP *pgrp, INT8U *pname, INT8U *perr)
{
    fc58:	defff504 	addi	sp,sp,-44
    fc5c:	dfc00a15 	stw	ra,40(sp)
    fc60:	df000915 	stw	fp,36(sp)
    fc64:	df000904 	addi	fp,sp,36
    fc68:	e13ffd15 	stw	r4,-12(fp)
    fc6c:	e17ffe15 	stw	r5,-8(fp)
    fc70:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
    fc74:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
    fc78:	e0bfff17 	ldw	r2,-4(fp)
    fc7c:	1000011e 	bne	r2,zero,fc84 <OSFlagNameSet+0x2c>
        return;
    fc80:	00004406 	br	fd94 <OSFlagNameSet+0x13c>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {              /* Is 'pgrp' a NULL pointer?                          */
    fc84:	e0bffd17 	ldw	r2,-12(fp)
    fc88:	1000041e 	bne	r2,zero,fc9c <OSFlagNameSet+0x44>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
    fc8c:	e0bfff17 	ldw	r2,-4(fp)
    fc90:	00c01b84 	movi	r3,110
    fc94:	10c00005 	stb	r3,0(r2)
        return;
    fc98:	00003e06 	br	fd94 <OSFlagNameSet+0x13c>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
    fc9c:	e0bffe17 	ldw	r2,-8(fp)
    fca0:	1000041e 	bne	r2,zero,fcb4 <OSFlagNameSet+0x5c>
        *perr = OS_ERR_PNAME_NULL;
    fca4:	e0bfff17 	ldw	r2,-4(fp)
    fca8:	00c00304 	movi	r3,12
    fcac:	10c00005 	stb	r3,0(r2)
        return;
    fcb0:	00003806 	br	fd94 <OSFlagNameSet+0x13c>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
    fcb4:	008000b4 	movhi	r2,2
    fcb8:	10b48d04 	addi	r2,r2,-11724
    fcbc:	10800003 	ldbu	r2,0(r2)
    fcc0:	10803fcc 	andi	r2,r2,255
    fcc4:	10000426 	beq	r2,zero,fcd8 <OSFlagNameSet+0x80>
        *perr = OS_ERR_NAME_SET_ISR;
    fcc8:	e0bfff17 	ldw	r2,-4(fp)
    fccc:	00c00484 	movi	r3,18
    fcd0:	10c00005 	stb	r3,0(r2)
        return;
    fcd4:	00002f06 	br	fd94 <OSFlagNameSet+0x13c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    fcd8:	0005303a 	rdctl	r2,status
    fcdc:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    fce0:	e0fff917 	ldw	r3,-28(fp)
    fce4:	00bfff84 	movi	r2,-2
    fce8:	1884703a 	and	r2,r3,r2
    fcec:	1001703a 	wrctl	status,r2
  
  return context;
    fcf0:	e0bff917 	ldw	r2,-28(fp)
    }
    OS_ENTER_CRITICAL();
    fcf4:	e0bff715 	stw	r2,-36(fp)
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {
    fcf8:	e0bffd17 	ldw	r2,-12(fp)
    fcfc:	10800003 	ldbu	r2,0(r2)
    fd00:	10803fcc 	andi	r2,r2,255
    fd04:	10800160 	cmpeqi	r2,r2,5
    fd08:	1000081e 	bne	r2,zero,fd2c <OSFlagNameSet+0xd4>
    fd0c:	e0bff717 	ldw	r2,-36(fp)
    fd10:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    fd14:	e0bffa17 	ldw	r2,-24(fp)
    fd18:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_EVENT_TYPE;
    fd1c:	e0bfff17 	ldw	r2,-4(fp)
    fd20:	00c00044 	movi	r3,1
    fd24:	10c00005 	stb	r3,0(r2)
        return;
    fd28:	00001a06 	br	fd94 <OSFlagNameSet+0x13c>
    }
    len = OS_StrLen(pname);                      /* Can we fit the string in the storage area?         */
    fd2c:	e13ffe17 	ldw	r4,-8(fp)
    fd30:	000edd40 	call	edd4 <OS_StrLen>
    fd34:	e0bff805 	stb	r2,-32(fp)
    if (len > (OS_FLAG_NAME_SIZE - 1)) {         /* No                                                 */
    fd38:	e0bff803 	ldbu	r2,-32(fp)
    fd3c:	10800830 	cmpltui	r2,r2,32
    fd40:	1000081e 	bne	r2,zero,fd64 <OSFlagNameSet+0x10c>
    fd44:	e0bff717 	ldw	r2,-36(fp)
    fd48:	e0bffb15 	stw	r2,-20(fp)
    fd4c:	e0bffb17 	ldw	r2,-20(fp)
    fd50:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_FLAG_NAME_TOO_LONG;
    fd54:	e0bfff17 	ldw	r2,-4(fp)
    fd58:	00c01cc4 	movi	r3,115
    fd5c:	10c00005 	stb	r3,0(r2)
        return;
    fd60:	00000c06 	br	fd94 <OSFlagNameSet+0x13c>
    }
    (void)OS_StrCopy(pgrp->OSFlagName, pname);   /* Yes, copy name from OS_FLAG_GRP                    */
    fd64:	e0bffd17 	ldw	r2,-12(fp)
    fd68:	10800284 	addi	r2,r2,10
    fd6c:	1009883a 	mov	r4,r2
    fd70:	e17ffe17 	ldw	r5,-8(fp)
    fd74:	000ed600 	call	ed60 <OS_StrCopy>
    fd78:	e0bff717 	ldw	r2,-36(fp)
    fd7c:	e0bffc15 	stw	r2,-16(fp)
    fd80:	e0bffc17 	ldw	r2,-16(fp)
    fd84:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
    fd88:	e0bfff17 	ldw	r2,-4(fp)
    fd8c:	10000005 	stb	zero,0(r2)
    return;
    fd90:	0001883a 	nop
}
    fd94:	e037883a 	mov	sp,fp
    fd98:	dfc00117 	ldw	ra,4(sp)
    fd9c:	df000017 	ldw	fp,0(sp)
    fda0:	dec00204 	addi	sp,sp,8
    fda4:	f800283a 	ret

0000fda8 <OSFlagPend>:
*                 event flags.
*********************************************************************************************************
*/

OS_FLAGS  OSFlagPend (OS_FLAG_GRP *pgrp, OS_FLAGS flags, INT8U wait_type, INT16U timeout, INT8U *perr)
{
    fda8:	deffe204 	addi	sp,sp,-120
    fdac:	dfc01d15 	stw	ra,116(sp)
    fdb0:	df001c15 	stw	fp,112(sp)
    fdb4:	df001c04 	addi	fp,sp,112
    fdb8:	e13ffc15 	stw	r4,-16(fp)
    fdbc:	2809883a 	mov	r4,r5
    fdc0:	3007883a 	mov	r3,r6
    fdc4:	3805883a 	mov	r2,r7
    fdc8:	e13ffd0d 	sth	r4,-12(fp)
    fdcc:	e0fffe05 	stb	r3,-8(fp)
    fdd0:	e0bfff0d 	sth	r2,-4(fp)
    OS_FLAGS      flags_rdy;
    INT8U         result;
    INT8U         pend_stat;
    BOOLEAN       consume;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR     cpu_sr = 0;
    fdd4:	e03fe615 	stw	zero,-104(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
    fdd8:	e0800217 	ldw	r2,8(fp)
    fddc:	1000021e 	bne	r2,zero,fde8 <OSFlagPend+0x40>
        return ((OS_FLAGS)0);
    fde0:	0005883a 	mov	r2,zero
    fde4:	00016706 	br	10384 <OSFlagPend+0x5dc>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {                        /* Validate 'pgrp'                          */
    fde8:	e0bffc17 	ldw	r2,-16(fp)
    fdec:	1000051e 	bne	r2,zero,fe04 <OSFlagPend+0x5c>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
    fdf0:	e0800217 	ldw	r2,8(fp)
    fdf4:	00c01b84 	movi	r3,110
    fdf8:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
    fdfc:	0005883a 	mov	r2,zero
    fe00:	00016006 	br	10384 <OSFlagPend+0x5dc>
    }
#endif
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
    fe04:	008000b4 	movhi	r2,2
    fe08:	10b48d04 	addi	r2,r2,-11724
    fe0c:	10800003 	ldbu	r2,0(r2)
    fe10:	10803fcc 	andi	r2,r2,255
    fe14:	10000526 	beq	r2,zero,fe2c <OSFlagPend+0x84>
        *perr = OS_ERR_PEND_ISR;                           /* ... can't PEND from an ISR               */
    fe18:	e0800217 	ldw	r2,8(fp)
    fe1c:	00c00084 	movi	r3,2
    fe20:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
    fe24:	0005883a 	mov	r2,zero
    fe28:	00015606 	br	10384 <OSFlagPend+0x5dc>
    }
    if (OSLockNesting > 0) {                               /* See if called with scheduler locked ...  */
    fe2c:	008000b4 	movhi	r2,2
    fe30:	10b47f04 	addi	r2,r2,-11780
    fe34:	10800003 	ldbu	r2,0(r2)
    fe38:	10803fcc 	andi	r2,r2,255
    fe3c:	10000526 	beq	r2,zero,fe54 <OSFlagPend+0xac>
        *perr = OS_ERR_PEND_LOCKED;                        /* ... can't PEND when locked               */
    fe40:	e0800217 	ldw	r2,8(fp)
    fe44:	00c00344 	movi	r3,13
    fe48:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
    fe4c:	0005883a 	mov	r2,zero
    fe50:	00014c06 	br	10384 <OSFlagPend+0x5dc>
    }
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {          /* Validate event block type                */
    fe54:	e0bffc17 	ldw	r2,-16(fp)
    fe58:	10800003 	ldbu	r2,0(r2)
    fe5c:	10803fcc 	andi	r2,r2,255
    fe60:	10800160 	cmpeqi	r2,r2,5
    fe64:	1000051e 	bne	r2,zero,fe7c <OSFlagPend+0xd4>
        *perr = OS_ERR_EVENT_TYPE;
    fe68:	e0800217 	ldw	r2,8(fp)
    fe6c:	00c00044 	movi	r3,1
    fe70:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
    fe74:	0005883a 	mov	r2,zero
    fe78:	00014206 	br	10384 <OSFlagPend+0x5dc>
    }
    result = (INT8U)(wait_type & OS_FLAG_CONSUME);
    fe7c:	e0fffe03 	ldbu	r3,-8(fp)
    fe80:	00bfe004 	movi	r2,-128
    fe84:	1884703a 	and	r2,r3,r2
    fe88:	e0bfe705 	stb	r2,-100(fp)
    if (result != (INT8U)0) {                             /* See if we need to consume the flags      */
    fe8c:	e0bfe703 	ldbu	r2,-100(fp)
    fe90:	10000626 	beq	r2,zero,feac <OSFlagPend+0x104>
        wait_type &= ~(INT8U)OS_FLAG_CONSUME;
    fe94:	e0bffe03 	ldbu	r2,-8(fp)
    fe98:	10801fcc 	andi	r2,r2,127
    fe9c:	e0bffe05 	stb	r2,-8(fp)
        consume    = OS_TRUE;
    fea0:	00800044 	movi	r2,1
    fea4:	e0bfe505 	stb	r2,-108(fp)
    fea8:	00000106 	br	feb0 <OSFlagPend+0x108>
    } else {
        consume    = OS_FALSE;
    feac:	e03fe505 	stb	zero,-108(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    feb0:	0005303a 	rdctl	r2,status
    feb4:	e0bfe915 	stw	r2,-92(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    feb8:	e0ffe917 	ldw	r3,-92(fp)
    febc:	00bfff84 	movi	r2,-2
    fec0:	1884703a 	and	r2,r3,r2
    fec4:	1001703a 	wrctl	status,r2
  
  return context;
    fec8:	e0bfe917 	ldw	r2,-92(fp)
    }
/*$PAGE*/
    OS_ENTER_CRITICAL();
    fecc:	e0bfe615 	stw	r2,-104(fp)
    switch (wait_type) {
    fed0:	e0bffe03 	ldbu	r2,-8(fp)
    fed4:	10c00060 	cmpeqi	r3,r2,1
    fed8:	1800921e 	bne	r3,zero,10124 <OSFlagPend+0x37c>
    fedc:	10c00088 	cmpgei	r3,r2,2
    fee0:	1800021e 	bne	r3,zero,feec <OSFlagPend+0x144>
    fee4:	10006126 	beq	r2,zero,1006c <OSFlagPend+0x2c4>
    fee8:	0000bb06 	br	101d8 <OSFlagPend+0x430>
    feec:	10c000a0 	cmpeqi	r3,r2,2
    fef0:	1800031e 	bne	r3,zero,ff00 <OSFlagPend+0x158>
    fef4:	108000e0 	cmpeqi	r2,r2,3
    fef8:	10002f1e 	bne	r2,zero,ffb8 <OSFlagPend+0x210>
    fefc:	0000b606 	br	101d8 <OSFlagPend+0x430>
        case OS_FLAG_WAIT_SET_ALL:                         /* See if all required flags are set        */
             flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);   /* Extract only the bits we want     */
    ff00:	e0bffc17 	ldw	r2,-16(fp)
    ff04:	10c0020b 	ldhu	r3,8(r2)
    ff08:	e0bffd0b 	ldhu	r2,-12(fp)
    ff0c:	1884703a 	and	r2,r3,r2
    ff10:	e0bfe78d 	sth	r2,-98(fp)
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
    ff14:	e0ffe78b 	ldhu	r3,-98(fp)
    ff18:	e0bffd0b 	ldhu	r2,-12(fp)
    ff1c:	1880191e 	bne	r3,r2,ff84 <OSFlagPend+0x1dc>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
    ff20:	e0bfe503 	ldbu	r2,-108(fp)
    ff24:	10800058 	cmpnei	r2,r2,1
    ff28:	1000091e 	bne	r2,zero,ff50 <OSFlagPend+0x1a8>
                     pgrp->OSFlagFlags &= ~flags_rdy;      /* Clear ONLY the flags that we wanted      */
    ff2c:	e0bffc17 	ldw	r2,-16(fp)
    ff30:	1080020b 	ldhu	r2,8(r2)
    ff34:	1007883a 	mov	r3,r2
    ff38:	e0bfe78b 	ldhu	r2,-98(fp)
    ff3c:	0084303a 	nor	r2,zero,r2
    ff40:	1884703a 	and	r2,r3,r2
    ff44:	1007883a 	mov	r3,r2
    ff48:	e0bffc17 	ldw	r2,-16(fp)
    ff4c:	10c0020d 	sth	r3,8(r2)
                 }
                 OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
    ff50:	008000b4 	movhi	r2,2
    ff54:	10b48e04 	addi	r2,r2,-11720
    ff58:	10800017 	ldw	r2,0(r2)
    ff5c:	e0ffe78b 	ldhu	r3,-98(fp)
    ff60:	10c00b0d 	sth	r3,44(r2)
    ff64:	e0bfe617 	ldw	r2,-104(fp)
    ff68:	e0bfea15 	stw	r2,-88(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    ff6c:	e0bfea17 	ldw	r2,-88(fp)
    ff70:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
                 *perr                   = OS_ERR_NONE;
    ff74:	e0800217 	ldw	r2,8(fp)
    ff78:	10000005 	stb	zero,0(r2)
                 return (flags_rdy);
    ff7c:	e0bfe78b 	ldhu	r2,-98(fp)
    ff80:	00010006 	br	10384 <OSFlagPend+0x5dc>
             } else {                                      /* Block task until events occur or timeout */
                 OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
    ff84:	e1bffd0b 	ldhu	r6,-12(fp)
    ff88:	e0fffe03 	ldbu	r3,-8(fp)
    ff8c:	e0bfff0b 	ldhu	r2,-4(fp)
    ff90:	e17ff704 	addi	r5,fp,-36
    ff94:	d8800015 	stw	r2,0(sp)
    ff98:	e13ffc17 	ldw	r4,-16(fp)
    ff9c:	180f883a 	mov	r7,r3
    ffa0:	001084c0 	call	1084c <OS_FlagBlock>
    ffa4:	e0bfe617 	ldw	r2,-104(fp)
    ffa8:	e0bfeb15 	stw	r2,-84(fp)
    ffac:	e0bfeb17 	ldw	r2,-84(fp)
    ffb0:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
             }
             break;
    ffb4:	00009206 	br	10200 <OSFlagPend+0x458>

        case OS_FLAG_WAIT_SET_ANY:
             flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);    /* Extract only the bits we want    */
    ffb8:	e0bffc17 	ldw	r2,-16(fp)
    ffbc:	10c0020b 	ldhu	r3,8(r2)
    ffc0:	e0bffd0b 	ldhu	r2,-12(fp)
    ffc4:	1884703a 	and	r2,r3,r2
    ffc8:	e0bfe78d 	sth	r2,-98(fp)
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag set                      */
    ffcc:	e0bfe78b 	ldhu	r2,-98(fp)
    ffd0:	10001926 	beq	r2,zero,10038 <OSFlagPend+0x290>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
    ffd4:	e0bfe503 	ldbu	r2,-108(fp)
    ffd8:	10800058 	cmpnei	r2,r2,1
    ffdc:	1000091e 	bne	r2,zero,10004 <OSFlagPend+0x25c>
                     pgrp->OSFlagFlags &= ~flags_rdy;      /* Clear ONLY the flags that we got         */
    ffe0:	e0bffc17 	ldw	r2,-16(fp)
    ffe4:	1080020b 	ldhu	r2,8(r2)
    ffe8:	1007883a 	mov	r3,r2
    ffec:	e0bfe78b 	ldhu	r2,-98(fp)
    fff0:	0084303a 	nor	r2,zero,r2
    fff4:	1884703a 	and	r2,r3,r2
    fff8:	1007883a 	mov	r3,r2
    fffc:	e0bffc17 	ldw	r2,-16(fp)
   10000:	10c0020d 	sth	r3,8(r2)
                 }
                 OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
   10004:	008000b4 	movhi	r2,2
   10008:	10b48e04 	addi	r2,r2,-11720
   1000c:	10800017 	ldw	r2,0(r2)
   10010:	e0ffe78b 	ldhu	r3,-98(fp)
   10014:	10c00b0d 	sth	r3,44(r2)
   10018:	e0bfe617 	ldw	r2,-104(fp)
   1001c:	e0bfec15 	stw	r2,-80(fp)
   10020:	e0bfec17 	ldw	r2,-80(fp)
   10024:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
                 *perr                   = OS_ERR_NONE;
   10028:	e0800217 	ldw	r2,8(fp)
   1002c:	10000005 	stb	zero,0(r2)
                 return (flags_rdy);
   10030:	e0bfe78b 	ldhu	r2,-98(fp)
   10034:	0000d306 	br	10384 <OSFlagPend+0x5dc>
             } else {                                      /* Block task until events occur or timeout */
                 OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
   10038:	e1bffd0b 	ldhu	r6,-12(fp)
   1003c:	e0fffe03 	ldbu	r3,-8(fp)
   10040:	e0bfff0b 	ldhu	r2,-4(fp)
   10044:	e17ff704 	addi	r5,fp,-36
   10048:	d8800015 	stw	r2,0(sp)
   1004c:	e13ffc17 	ldw	r4,-16(fp)
   10050:	180f883a 	mov	r7,r3
   10054:	001084c0 	call	1084c <OS_FlagBlock>
   10058:	e0bfe617 	ldw	r2,-104(fp)
   1005c:	e0bfed15 	stw	r2,-76(fp)
   10060:	e0bfed17 	ldw	r2,-76(fp)
   10064:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
             }
             break;
   10068:	00006506 	br	10200 <OSFlagPend+0x458>

#if OS_FLAG_WAIT_CLR_EN > 0
        case OS_FLAG_WAIT_CLR_ALL:                         /* See if all required flags are cleared    */
             flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags);  /* Extract only the bits we want     */
   1006c:	e0bffc17 	ldw	r2,-16(fp)
   10070:	1080020b 	ldhu	r2,8(r2)
   10074:	0084303a 	nor	r2,zero,r2
   10078:	1007883a 	mov	r3,r2
   1007c:	e0bffd0b 	ldhu	r2,-12(fp)
   10080:	1884703a 	and	r2,r3,r2
   10084:	e0bfe78d 	sth	r2,-98(fp)
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
   10088:	e0ffe78b 	ldhu	r3,-98(fp)
   1008c:	e0bffd0b 	ldhu	r2,-12(fp)
   10090:	1880171e 	bne	r3,r2,100f0 <OSFlagPend+0x348>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
   10094:	e0bfe503 	ldbu	r2,-108(fp)
   10098:	10800058 	cmpnei	r2,r2,1
   1009c:	1000071e 	bne	r2,zero,100bc <OSFlagPend+0x314>
                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we wanted        */
   100a0:	e0bffc17 	ldw	r2,-16(fp)
   100a4:	10c0020b 	ldhu	r3,8(r2)
   100a8:	e0bfe78b 	ldhu	r2,-98(fp)
   100ac:	1884b03a 	or	r2,r3,r2
   100b0:	1007883a 	mov	r3,r2
   100b4:	e0bffc17 	ldw	r2,-16(fp)
   100b8:	10c0020d 	sth	r3,8(r2)
                 }
                 OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
   100bc:	008000b4 	movhi	r2,2
   100c0:	10b48e04 	addi	r2,r2,-11720
   100c4:	10800017 	ldw	r2,0(r2)
   100c8:	e0ffe78b 	ldhu	r3,-98(fp)
   100cc:	10c00b0d 	sth	r3,44(r2)
   100d0:	e0bfe617 	ldw	r2,-104(fp)
   100d4:	e0bfee15 	stw	r2,-72(fp)
   100d8:	e0bfee17 	ldw	r2,-72(fp)
   100dc:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
                 *perr                   = OS_ERR_NONE;
   100e0:	e0800217 	ldw	r2,8(fp)
   100e4:	10000005 	stb	zero,0(r2)
                 return (flags_rdy);
   100e8:	e0bfe78b 	ldhu	r2,-98(fp)
   100ec:	0000a506 	br	10384 <OSFlagPend+0x5dc>
             } else {                                      /* Block task until events occur or timeout */
                 OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
   100f0:	e1bffd0b 	ldhu	r6,-12(fp)
   100f4:	e0fffe03 	ldbu	r3,-8(fp)
   100f8:	e0bfff0b 	ldhu	r2,-4(fp)
   100fc:	e17ff704 	addi	r5,fp,-36
   10100:	d8800015 	stw	r2,0(sp)
   10104:	e13ffc17 	ldw	r4,-16(fp)
   10108:	180f883a 	mov	r7,r3
   1010c:	001084c0 	call	1084c <OS_FlagBlock>
   10110:	e0bfe617 	ldw	r2,-104(fp)
   10114:	e0bfef15 	stw	r2,-68(fp)
   10118:	e0bfef17 	ldw	r2,-68(fp)
   1011c:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
             }
             break;
   10120:	00003706 	br	10200 <OSFlagPend+0x458>

        case OS_FLAG_WAIT_CLR_ANY:
             flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags); /* Extract only the bits we want      */
   10124:	e0bffc17 	ldw	r2,-16(fp)
   10128:	1080020b 	ldhu	r2,8(r2)
   1012c:	0084303a 	nor	r2,zero,r2
   10130:	1007883a 	mov	r3,r2
   10134:	e0bffd0b 	ldhu	r2,-12(fp)
   10138:	1884703a 	and	r2,r3,r2
   1013c:	e0bfe78d 	sth	r2,-98(fp)
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag cleared                  */
   10140:	e0bfe78b 	ldhu	r2,-98(fp)
   10144:	10001726 	beq	r2,zero,101a4 <OSFlagPend+0x3fc>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
   10148:	e0bfe503 	ldbu	r2,-108(fp)
   1014c:	10800058 	cmpnei	r2,r2,1
   10150:	1000071e 	bne	r2,zero,10170 <OSFlagPend+0x3c8>
                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we got           */
   10154:	e0bffc17 	ldw	r2,-16(fp)
   10158:	10c0020b 	ldhu	r3,8(r2)
   1015c:	e0bfe78b 	ldhu	r2,-98(fp)
   10160:	1884b03a 	or	r2,r3,r2
   10164:	1007883a 	mov	r3,r2
   10168:	e0bffc17 	ldw	r2,-16(fp)
   1016c:	10c0020d 	sth	r3,8(r2)
                 }
                 OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
   10170:	008000b4 	movhi	r2,2
   10174:	10b48e04 	addi	r2,r2,-11720
   10178:	10800017 	ldw	r2,0(r2)
   1017c:	e0ffe78b 	ldhu	r3,-98(fp)
   10180:	10c00b0d 	sth	r3,44(r2)
   10184:	e0bfe617 	ldw	r2,-104(fp)
   10188:	e0bff015 	stw	r2,-64(fp)
   1018c:	e0bff017 	ldw	r2,-64(fp)
   10190:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
                 *perr                   = OS_ERR_NONE;
   10194:	e0800217 	ldw	r2,8(fp)
   10198:	10000005 	stb	zero,0(r2)
                 return (flags_rdy);
   1019c:	e0bfe78b 	ldhu	r2,-98(fp)
   101a0:	00007806 	br	10384 <OSFlagPend+0x5dc>
             } else {                                      /* Block task until events occur or timeout */
                 OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
   101a4:	e1bffd0b 	ldhu	r6,-12(fp)
   101a8:	e0fffe03 	ldbu	r3,-8(fp)
   101ac:	e0bfff0b 	ldhu	r2,-4(fp)
   101b0:	e17ff704 	addi	r5,fp,-36
   101b4:	d8800015 	stw	r2,0(sp)
   101b8:	e13ffc17 	ldw	r4,-16(fp)
   101bc:	180f883a 	mov	r7,r3
   101c0:	001084c0 	call	1084c <OS_FlagBlock>
   101c4:	e0bfe617 	ldw	r2,-104(fp)
   101c8:	e0bff115 	stw	r2,-60(fp)
   101cc:	e0bff117 	ldw	r2,-60(fp)
   101d0:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
             }
             break;
   101d4:	00000a06 	br	10200 <OSFlagPend+0x458>
   101d8:	e0bfe617 	ldw	r2,-104(fp)
   101dc:	e0bff215 	stw	r2,-56(fp)
   101e0:	e0bff217 	ldw	r2,-56(fp)
   101e4:	1001703a 	wrctl	status,r2
#endif

        default:
             OS_EXIT_CRITICAL();
             flags_rdy = (OS_FLAGS)0;
   101e8:	e03fe78d 	sth	zero,-98(fp)
             *perr      = OS_ERR_FLAG_WAIT_TYPE;
   101ec:	e0800217 	ldw	r2,8(fp)
   101f0:	00c01bc4 	movi	r3,111
   101f4:	10c00005 	stb	r3,0(r2)
             return (flags_rdy);
   101f8:	e0bfe78b 	ldhu	r2,-98(fp)
   101fc:	00006106 	br	10384 <OSFlagPend+0x5dc>
    }
/*$PAGE*/
    OS_Sched();                                            /* Find next HPT ready to run               */
   10200:	000ec240 	call	ec24 <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   10204:	0005303a 	rdctl	r2,status
   10208:	e0bff315 	stw	r2,-52(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1020c:	e0fff317 	ldw	r3,-52(fp)
   10210:	00bfff84 	movi	r2,-2
   10214:	1884703a 	and	r2,r3,r2
   10218:	1001703a 	wrctl	status,r2
  
  return context;
   1021c:	e0bff317 	ldw	r2,-52(fp)
    OS_ENTER_CRITICAL();
   10220:	e0bfe615 	stw	r2,-104(fp)
    if (OSTCBCur->OSTCBStatPend != OS_STAT_PEND_OK) {      /* Have we timed-out or aborted?            */
   10224:	008000b4 	movhi	r2,2
   10228:	10b48e04 	addi	r2,r2,-11720
   1022c:	10800017 	ldw	r2,0(r2)
   10230:	10800c43 	ldbu	r2,49(r2)
   10234:	10803fcc 	andi	r2,r2,255
   10238:	10002226 	beq	r2,zero,102c4 <OSFlagPend+0x51c>
        pend_stat                = OSTCBCur->OSTCBStatPend;
   1023c:	008000b4 	movhi	r2,2
   10240:	10b48e04 	addi	r2,r2,-11720
   10244:	10800017 	ldw	r2,0(r2)
   10248:	10800c43 	ldbu	r2,49(r2)
   1024c:	e0bfe805 	stb	r2,-96(fp)
        OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
   10250:	008000b4 	movhi	r2,2
   10254:	10b48e04 	addi	r2,r2,-11720
   10258:	10800017 	ldw	r2,0(r2)
   1025c:	10000c45 	stb	zero,49(r2)
        OS_FlagUnlink(&node);
   10260:	e0bff704 	addi	r2,fp,-36
   10264:	1009883a 	mov	r4,r2
   10268:	0010c040 	call	10c04 <OS_FlagUnlink>
        OSTCBCur->OSTCBStat      = OS_STAT_RDY;            /* Yes, make task ready-to-run              */
   1026c:	008000b4 	movhi	r2,2
   10270:	10b48e04 	addi	r2,r2,-11720
   10274:	10800017 	ldw	r2,0(r2)
   10278:	10000c05 	stb	zero,48(r2)
   1027c:	e0bfe617 	ldw	r2,-104(fp)
   10280:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   10284:	e0bff417 	ldw	r2,-48(fp)
   10288:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        flags_rdy                = (OS_FLAGS)0;
   1028c:	e03fe78d 	sth	zero,-98(fp)
        switch (pend_stat) {
   10290:	e0bfe803 	ldbu	r2,-96(fp)
   10294:	108000a0 	cmpeqi	r2,r2,2
   10298:	10000426 	beq	r2,zero,102ac <OSFlagPend+0x504>
            case OS_STAT_PEND_ABORT:
                 *perr = OS_ERR_PEND_ABORT;                 /* Indicate that we aborted   waiting       */
   1029c:	e0800217 	ldw	r2,8(fp)
   102a0:	00c00384 	movi	r3,14
   102a4:	10c00005 	stb	r3,0(r2)
                 break;
   102a8:	00000406 	br	102bc <OSFlagPend+0x514>

            case OS_STAT_PEND_TO:
            default:
                 *perr = OS_ERR_TIMEOUT;                    /* Indicate that we timed-out waiting       */
   102ac:	e0800217 	ldw	r2,8(fp)
   102b0:	00c00284 	movi	r3,10
   102b4:	10c00005 	stb	r3,0(r2)
                 break;
   102b8:	0001883a 	nop
        }
        return (flags_rdy);
   102bc:	e0bfe78b 	ldhu	r2,-98(fp)
   102c0:	00003006 	br	10384 <OSFlagPend+0x5dc>
    }
    flags_rdy = OSTCBCur->OSTCBFlagsRdy;
   102c4:	008000b4 	movhi	r2,2
   102c8:	10b48e04 	addi	r2,r2,-11720
   102cc:	10800017 	ldw	r2,0(r2)
   102d0:	10800b0b 	ldhu	r2,44(r2)
   102d4:	e0bfe78d 	sth	r2,-98(fp)
    if (consume == OS_TRUE) {                              /* See if we need to consume the flags      */
   102d8:	e0bfe503 	ldbu	r2,-108(fp)
   102dc:	10800058 	cmpnei	r2,r2,1
   102e0:	1000211e 	bne	r2,zero,10368 <OSFlagPend+0x5c0>
        switch (wait_type) {
   102e4:	e0bffe03 	ldbu	r2,-8(fp)
   102e8:	10001616 	blt	r2,zero,10344 <OSFlagPend+0x59c>
   102ec:	10c00090 	cmplti	r3,r2,2
   102f0:	18000c1e 	bne	r3,zero,10324 <OSFlagPend+0x57c>
   102f4:	10800108 	cmpgei	r2,r2,4
   102f8:	1000121e 	bne	r2,zero,10344 <OSFlagPend+0x59c>
            case OS_FLAG_WAIT_SET_ALL:
            case OS_FLAG_WAIT_SET_ANY:                     /* Clear ONLY the flags we got              */
                 pgrp->OSFlagFlags &= ~flags_rdy;
   102fc:	e0bffc17 	ldw	r2,-16(fp)
   10300:	1080020b 	ldhu	r2,8(r2)
   10304:	1007883a 	mov	r3,r2
   10308:	e0bfe78b 	ldhu	r2,-98(fp)
   1030c:	0084303a 	nor	r2,zero,r2
   10310:	1884703a 	and	r2,r3,r2
   10314:	1007883a 	mov	r3,r2
   10318:	e0bffc17 	ldw	r2,-16(fp)
   1031c:	10c0020d 	sth	r3,8(r2)
                 break;
   10320:	00001106 	br	10368 <OSFlagPend+0x5c0>

#if OS_FLAG_WAIT_CLR_EN > 0
            case OS_FLAG_WAIT_CLR_ALL:
            case OS_FLAG_WAIT_CLR_ANY:                     /* Set   ONLY the flags we got              */
                 pgrp->OSFlagFlags |=  flags_rdy;
   10324:	e0bffc17 	ldw	r2,-16(fp)
   10328:	10c0020b 	ldhu	r3,8(r2)
   1032c:	e0bfe78b 	ldhu	r2,-98(fp)
   10330:	1884b03a 	or	r2,r3,r2
   10334:	1007883a 	mov	r3,r2
   10338:	e0bffc17 	ldw	r2,-16(fp)
   1033c:	10c0020d 	sth	r3,8(r2)
                 break;
   10340:	00000906 	br	10368 <OSFlagPend+0x5c0>
   10344:	e0bfe617 	ldw	r2,-104(fp)
   10348:	e0bff515 	stw	r2,-44(fp)
   1034c:	e0bff517 	ldw	r2,-44(fp)
   10350:	1001703a 	wrctl	status,r2
#endif
            default:
                 OS_EXIT_CRITICAL();
                 *perr = OS_ERR_FLAG_WAIT_TYPE;
   10354:	e0800217 	ldw	r2,8(fp)
   10358:	00c01bc4 	movi	r3,111
   1035c:	10c00005 	stb	r3,0(r2)
                 return ((OS_FLAGS)0);
   10360:	0005883a 	mov	r2,zero
   10364:	00000706 	br	10384 <OSFlagPend+0x5dc>
   10368:	e0bfe617 	ldw	r2,-104(fp)
   1036c:	e0bff615 	stw	r2,-40(fp)
   10370:	e0bff617 	ldw	r2,-40(fp)
   10374:	1001703a 	wrctl	status,r2
        }
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;                                   /* Event(s) must have occurred              */
   10378:	e0800217 	ldw	r2,8(fp)
   1037c:	10000005 	stb	zero,0(r2)
    return (flags_rdy);
   10380:	e0bfe78b 	ldhu	r2,-98(fp)
}
   10384:	e037883a 	mov	sp,fp
   10388:	dfc00117 	ldw	ra,4(sp)
   1038c:	df000017 	ldw	fp,0(sp)
   10390:	dec00204 	addi	sp,sp,8
   10394:	f800283a 	ret

00010398 <OSFlagPendGetFlagsRdy>:
* Called from: Task ONLY
*********************************************************************************************************
*/

OS_FLAGS  OSFlagPendGetFlagsRdy (void)
{
   10398:	defffb04 	addi	sp,sp,-20
   1039c:	df000415 	stw	fp,16(sp)
   103a0:	df000404 	addi	fp,sp,16
    OS_FLAGS      flags;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR     cpu_sr = 0;
   103a4:	e03ffc15 	stw	zero,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   103a8:	0005303a 	rdctl	r2,status
   103ac:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   103b0:	e0fffe17 	ldw	r3,-8(fp)
   103b4:	00bfff84 	movi	r2,-2
   103b8:	1884703a 	and	r2,r3,r2
   103bc:	1001703a 	wrctl	status,r2
  
  return context;
   103c0:	e0bffe17 	ldw	r2,-8(fp)
#endif



    OS_ENTER_CRITICAL();
   103c4:	e0bffc15 	stw	r2,-16(fp)
    flags = OSTCBCur->OSTCBFlagsRdy;
   103c8:	008000b4 	movhi	r2,2
   103cc:	10b48e04 	addi	r2,r2,-11720
   103d0:	10800017 	ldw	r2,0(r2)
   103d4:	10800b0b 	ldhu	r2,44(r2)
   103d8:	e0bffd0d 	sth	r2,-12(fp)
   103dc:	e0bffc17 	ldw	r2,-16(fp)
   103e0:	e0bfff15 	stw	r2,-4(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   103e4:	e0bfff17 	ldw	r2,-4(fp)
   103e8:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (flags);
   103ec:	e0bffd0b 	ldhu	r2,-12(fp)
}
   103f0:	e037883a 	mov	sp,fp
   103f4:	df000017 	ldw	fp,0(sp)
   103f8:	dec00104 	addi	sp,sp,4
   103fc:	f800283a 	ret

00010400 <OSFlagPost>:
*              2) The amount of time interrupts are DISABLED depends on the number of tasks waiting on
*                 the event flag group.
*********************************************************************************************************
*/
OS_FLAGS  OSFlagPost (OS_FLAG_GRP *pgrp, OS_FLAGS flags, INT8U opt, INT8U *perr)
{
   10400:	deffef04 	addi	sp,sp,-68
   10404:	dfc01015 	stw	ra,64(sp)
   10408:	df000f15 	stw	fp,60(sp)
   1040c:	df000f04 	addi	fp,sp,60
   10410:	e13ffc15 	stw	r4,-16(fp)
   10414:	2807883a 	mov	r3,r5
   10418:	3005883a 	mov	r2,r6
   1041c:	e1ffff15 	stw	r7,-4(fp)
   10420:	e0fffd0d 	sth	r3,-12(fp)
   10424:	e0bffe05 	stb	r2,-8(fp)
    BOOLEAN       sched;
    OS_FLAGS      flags_cur;
    OS_FLAGS      flags_rdy;
    BOOLEAN       rdy;
#if OS_CRITICAL_METHOD == 3                          /* Allocate storage for CPU status register       */
    OS_CPU_SR     cpu_sr = 0;
   10428:	e03ff315 	stw	zero,-52(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                        /* Validate 'perr'                                */
   1042c:	e0bfff17 	ldw	r2,-4(fp)
   10430:	1000021e 	bne	r2,zero,1043c <OSFlagPost+0x3c>
        return ((OS_FLAGS)0);
   10434:	0005883a 	mov	r2,zero
   10438:	0000ce06 	br	10774 <OSFlagPost+0x374>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {                  /* Validate 'pgrp'                                */
   1043c:	e0bffc17 	ldw	r2,-16(fp)
   10440:	1000051e 	bne	r2,zero,10458 <OSFlagPost+0x58>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
   10444:	e0bfff17 	ldw	r2,-4(fp)
   10448:	00c01b84 	movi	r3,110
   1044c:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
   10450:	0005883a 	mov	r2,zero
   10454:	0000c706 	br	10774 <OSFlagPost+0x374>
    }
#endif
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {    /* Make sure we are pointing to an event flag grp */
   10458:	e0bffc17 	ldw	r2,-16(fp)
   1045c:	10800003 	ldbu	r2,0(r2)
   10460:	10803fcc 	andi	r2,r2,255
   10464:	10800160 	cmpeqi	r2,r2,5
   10468:	1000051e 	bne	r2,zero,10480 <OSFlagPost+0x80>
        *perr = OS_ERR_EVENT_TYPE;
   1046c:	e0bfff17 	ldw	r2,-4(fp)
   10470:	00c00044 	movi	r3,1
   10474:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
   10478:	0005883a 	mov	r2,zero
   1047c:	0000bd06 	br	10774 <OSFlagPost+0x374>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   10480:	0005303a 	rdctl	r2,status
   10484:	e0bff615 	stw	r2,-40(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   10488:	e0fff617 	ldw	r3,-40(fp)
   1048c:	00bfff84 	movi	r2,-2
   10490:	1884703a 	and	r2,r3,r2
   10494:	1001703a 	wrctl	status,r2
  
  return context;
   10498:	e0bff617 	ldw	r2,-40(fp)
    }
/*$PAGE*/
    OS_ENTER_CRITICAL();
   1049c:	e0bff315 	stw	r2,-52(fp)
    switch (opt) {
   104a0:	e0bffe03 	ldbu	r2,-8(fp)
   104a4:	10000326 	beq	r2,zero,104b4 <OSFlagPost+0xb4>
   104a8:	10800060 	cmpeqi	r2,r2,1
   104ac:	10000b1e 	bne	r2,zero,104dc <OSFlagPost+0xdc>
   104b0:	00001206 	br	104fc <OSFlagPost+0xfc>
        case OS_FLAG_CLR:
             pgrp->OSFlagFlags &= ~flags;            /* Clear the flags specified in the group         */
   104b4:	e0bffc17 	ldw	r2,-16(fp)
   104b8:	1080020b 	ldhu	r2,8(r2)
   104bc:	1007883a 	mov	r3,r2
   104c0:	e0bffd0b 	ldhu	r2,-12(fp)
   104c4:	0084303a 	nor	r2,zero,r2
   104c8:	1884703a 	and	r2,r3,r2
   104cc:	1007883a 	mov	r3,r2
   104d0:	e0bffc17 	ldw	r2,-16(fp)
   104d4:	10c0020d 	sth	r3,8(r2)
             break;
   104d8:	00001106 	br	10520 <OSFlagPost+0x120>

        case OS_FLAG_SET:
             pgrp->OSFlagFlags |=  flags;            /* Set   the flags specified in the group         */
   104dc:	e0bffc17 	ldw	r2,-16(fp)
   104e0:	10c0020b 	ldhu	r3,8(r2)
   104e4:	e0bffd0b 	ldhu	r2,-12(fp)
   104e8:	1884b03a 	or	r2,r3,r2
   104ec:	1007883a 	mov	r3,r2
   104f0:	e0bffc17 	ldw	r2,-16(fp)
   104f4:	10c0020d 	sth	r3,8(r2)
             break;
   104f8:	00000906 	br	10520 <OSFlagPost+0x120>
   104fc:	e0bff317 	ldw	r2,-52(fp)
   10500:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   10504:	e0bff717 	ldw	r2,-36(fp)
   10508:	1001703a 	wrctl	status,r2

        default:
             OS_EXIT_CRITICAL();                     /* INVALID option                                 */
             *perr = OS_ERR_FLAG_INVALID_OPT;
   1050c:	e0bfff17 	ldw	r2,-4(fp)
   10510:	00c01c44 	movi	r3,113
   10514:	10c00005 	stb	r3,0(r2)
             return ((OS_FLAGS)0);
   10518:	0005883a 	mov	r2,zero
   1051c:	00009506 	br	10774 <OSFlagPost+0x374>
    }
    sched = OS_FALSE;                                /* Indicate that we don't need rescheduling       */
   10520:	e03ff205 	stb	zero,-56(fp)
    pnode = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
   10524:	e0bffc17 	ldw	r2,-16(fp)
   10528:	10800117 	ldw	r2,4(r2)
   1052c:	e0bff115 	stw	r2,-60(fp)
    while (pnode != (OS_FLAG_NODE *)0) {             /* Go through all tasks waiting on event flag(s)  */
   10530:	00007406 	br	10704 <OSFlagPost+0x304>
        switch (pnode->OSFlagNodeWaitType) {
   10534:	e0bff117 	ldw	r2,-60(fp)
   10538:	10800483 	ldbu	r2,18(r2)
   1053c:	10803fcc 	andi	r2,r2,255
   10540:	10c00060 	cmpeqi	r3,r2,1
   10544:	18004d1e 	bne	r3,zero,1067c <OSFlagPost+0x27c>
   10548:	10c00088 	cmpgei	r3,r2,2
   1054c:	1800021e 	bne	r3,zero,10558 <OSFlagPost+0x158>
   10550:	10003126 	beq	r2,zero,10618 <OSFlagPost+0x218>
   10554:	00005f06 	br	106d4 <OSFlagPost+0x2d4>
   10558:	10c000a0 	cmpeqi	r3,r2,2
   1055c:	1800031e 	bne	r3,zero,1056c <OSFlagPost+0x16c>
   10560:	108000e0 	cmpeqi	r2,r2,3
   10564:	1000181e 	bne	r2,zero,105c8 <OSFlagPost+0x1c8>
   10568:	00005a06 	br	106d4 <OSFlagPost+0x2d4>
            case OS_FLAG_WAIT_SET_ALL:               /* See if all req. flags are set for current node */
                 flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
   1056c:	e0bffc17 	ldw	r2,-16(fp)
   10570:	10c0020b 	ldhu	r3,8(r2)
   10574:	e0bff117 	ldw	r2,-60(fp)
   10578:	1080040b 	ldhu	r2,16(r2)
   1057c:	1884703a 	and	r2,r3,r2
   10580:	e0bff40d 	sth	r2,-48(fp)
                 if (flags_rdy == pnode->OSFlagNodeFlags) {
   10584:	e0bff117 	ldw	r2,-60(fp)
   10588:	1080040b 	ldhu	r2,16(r2)
   1058c:	10ffffcc 	andi	r3,r2,65535
   10590:	e0bff40b 	ldhu	r2,-48(fp)
   10594:	18800b1e 	bne	r3,r2,105c4 <OSFlagPost+0x1c4>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
   10598:	e0bff40b 	ldhu	r2,-48(fp)
   1059c:	e13ff117 	ldw	r4,-60(fp)
   105a0:	100b883a 	mov	r5,r2
   105a4:	0010af40 	call	10af4 <OS_FlagTaskRdy>
   105a8:	e0bff485 	stb	r2,-46(fp)
                     if (rdy == OS_TRUE) {
   105ac:	e0bff483 	ldbu	r2,-46(fp)
   105b0:	10800058 	cmpnei	r2,r2,1
   105b4:	1000031e 	bne	r2,zero,105c4 <OSFlagPost+0x1c4>
                         sched = OS_TRUE;                     /* When done we will reschedule          */
   105b8:	00800044 	movi	r2,1
   105bc:	e0bff205 	stb	r2,-56(fp)
                     }
                 }
                 break;
   105c0:	00004d06 	br	106f8 <OSFlagPost+0x2f8>
   105c4:	00004c06 	br	106f8 <OSFlagPost+0x2f8>

            case OS_FLAG_WAIT_SET_ANY:               /* See if any flag set                            */
                 flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
   105c8:	e0bffc17 	ldw	r2,-16(fp)
   105cc:	10c0020b 	ldhu	r3,8(r2)
   105d0:	e0bff117 	ldw	r2,-60(fp)
   105d4:	1080040b 	ldhu	r2,16(r2)
   105d8:	1884703a 	and	r2,r3,r2
   105dc:	e0bff40d 	sth	r2,-48(fp)
                 if (flags_rdy != (OS_FLAGS)0) {
   105e0:	e0bff40b 	ldhu	r2,-48(fp)
   105e4:	10000b26 	beq	r2,zero,10614 <OSFlagPost+0x214>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
   105e8:	e0bff40b 	ldhu	r2,-48(fp)
   105ec:	e13ff117 	ldw	r4,-60(fp)
   105f0:	100b883a 	mov	r5,r2
   105f4:	0010af40 	call	10af4 <OS_FlagTaskRdy>
   105f8:	e0bff485 	stb	r2,-46(fp)
                     if (rdy == OS_TRUE) {
   105fc:	e0bff483 	ldbu	r2,-46(fp)
   10600:	10800058 	cmpnei	r2,r2,1
   10604:	1000031e 	bne	r2,zero,10614 <OSFlagPost+0x214>
                         sched = OS_TRUE;                     /* When done we will reschedule          */
   10608:	00800044 	movi	r2,1
   1060c:	e0bff205 	stb	r2,-56(fp)
                     }
                 }
                 break;
   10610:	00003906 	br	106f8 <OSFlagPost+0x2f8>
   10614:	00003806 	br	106f8 <OSFlagPost+0x2f8>

#if OS_FLAG_WAIT_CLR_EN > 0
            case OS_FLAG_WAIT_CLR_ALL:               /* See if all req. flags are set for current node */
                 flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
   10618:	e0bffc17 	ldw	r2,-16(fp)
   1061c:	1080020b 	ldhu	r2,8(r2)
   10620:	0084303a 	nor	r2,zero,r2
   10624:	1007883a 	mov	r3,r2
   10628:	e0bff117 	ldw	r2,-60(fp)
   1062c:	1080040b 	ldhu	r2,16(r2)
   10630:	1884703a 	and	r2,r3,r2
   10634:	e0bff40d 	sth	r2,-48(fp)
                 if (flags_rdy == pnode->OSFlagNodeFlags) {
   10638:	e0bff117 	ldw	r2,-60(fp)
   1063c:	1080040b 	ldhu	r2,16(r2)
   10640:	10ffffcc 	andi	r3,r2,65535
   10644:	e0bff40b 	ldhu	r2,-48(fp)
   10648:	18800b1e 	bne	r3,r2,10678 <OSFlagPost+0x278>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
   1064c:	e0bff40b 	ldhu	r2,-48(fp)
   10650:	e13ff117 	ldw	r4,-60(fp)
   10654:	100b883a 	mov	r5,r2
   10658:	0010af40 	call	10af4 <OS_FlagTaskRdy>
   1065c:	e0bff485 	stb	r2,-46(fp)
                     if (rdy == OS_TRUE) {
   10660:	e0bff483 	ldbu	r2,-46(fp)
   10664:	10800058 	cmpnei	r2,r2,1
   10668:	1000031e 	bne	r2,zero,10678 <OSFlagPost+0x278>
                         sched = OS_TRUE;                     /* When done we will reschedule          */
   1066c:	00800044 	movi	r2,1
   10670:	e0bff205 	stb	r2,-56(fp)
                     }
                 }
                 break;
   10674:	00002006 	br	106f8 <OSFlagPost+0x2f8>
   10678:	00001f06 	br	106f8 <OSFlagPost+0x2f8>

            case OS_FLAG_WAIT_CLR_ANY:               /* See if any flag set                            */
                 flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
   1067c:	e0bffc17 	ldw	r2,-16(fp)
   10680:	1080020b 	ldhu	r2,8(r2)
   10684:	0084303a 	nor	r2,zero,r2
   10688:	1007883a 	mov	r3,r2
   1068c:	e0bff117 	ldw	r2,-60(fp)
   10690:	1080040b 	ldhu	r2,16(r2)
   10694:	1884703a 	and	r2,r3,r2
   10698:	e0bff40d 	sth	r2,-48(fp)
                 if (flags_rdy != (OS_FLAGS)0) {
   1069c:	e0bff40b 	ldhu	r2,-48(fp)
   106a0:	10000b26 	beq	r2,zero,106d0 <OSFlagPost+0x2d0>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
   106a4:	e0bff40b 	ldhu	r2,-48(fp)
   106a8:	e13ff117 	ldw	r4,-60(fp)
   106ac:	100b883a 	mov	r5,r2
   106b0:	0010af40 	call	10af4 <OS_FlagTaskRdy>
   106b4:	e0bff485 	stb	r2,-46(fp)
                     if (rdy == OS_TRUE) {
   106b8:	e0bff483 	ldbu	r2,-46(fp)
   106bc:	10800058 	cmpnei	r2,r2,1
   106c0:	1000031e 	bne	r2,zero,106d0 <OSFlagPost+0x2d0>
                         sched = OS_TRUE;                     /* When done we will reschedule          */
   106c4:	00800044 	movi	r2,1
   106c8:	e0bff205 	stb	r2,-56(fp)
                     }
                 }
                 break;
   106cc:	00000a06 	br	106f8 <OSFlagPost+0x2f8>
   106d0:	00000906 	br	106f8 <OSFlagPost+0x2f8>
   106d4:	e0bff317 	ldw	r2,-52(fp)
   106d8:	e0bff815 	stw	r2,-32(fp)
   106dc:	e0bff817 	ldw	r2,-32(fp)
   106e0:	1001703a 	wrctl	status,r2
#endif
            default:
                 OS_EXIT_CRITICAL();
                 *perr = OS_ERR_FLAG_WAIT_TYPE;
   106e4:	e0bfff17 	ldw	r2,-4(fp)
   106e8:	00c01bc4 	movi	r3,111
   106ec:	10c00005 	stb	r3,0(r2)
                 return ((OS_FLAGS)0);
   106f0:	0005883a 	mov	r2,zero
   106f4:	00001f06 	br	10774 <OSFlagPost+0x374>
        }
        pnode = (OS_FLAG_NODE *)pnode->OSFlagNodeNext; /* Point to next task waiting for event flag(s) */
   106f8:	e0bff117 	ldw	r2,-60(fp)
   106fc:	10800017 	ldw	r2,0(r2)
   10700:	e0bff115 	stw	r2,-60(fp)
             *perr = OS_ERR_FLAG_INVALID_OPT;
             return ((OS_FLAGS)0);
    }
    sched = OS_FALSE;                                /* Indicate that we don't need rescheduling       */
    pnode = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
    while (pnode != (OS_FLAG_NODE *)0) {             /* Go through all tasks waiting on event flag(s)  */
   10704:	e0bff117 	ldw	r2,-60(fp)
   10708:	103f8a1e 	bne	r2,zero,10534 <__alt_mem_Flash_flash_data+0xf4010534>
   1070c:	e0bff317 	ldw	r2,-52(fp)
   10710:	e0bff915 	stw	r2,-28(fp)
   10714:	e0bff917 	ldw	r2,-28(fp)
   10718:	1001703a 	wrctl	status,r2
                 return ((OS_FLAGS)0);
        }
        pnode = (OS_FLAG_NODE *)pnode->OSFlagNodeNext; /* Point to next task waiting for event flag(s) */
    }
    OS_EXIT_CRITICAL();
    if (sched == OS_TRUE) {
   1071c:	e0bff203 	ldbu	r2,-56(fp)
   10720:	10800058 	cmpnei	r2,r2,1
   10724:	1000011e 	bne	r2,zero,1072c <OSFlagPost+0x32c>
        OS_Sched();
   10728:	000ec240 	call	ec24 <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1072c:	0005303a 	rdctl	r2,status
   10730:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   10734:	e0fffa17 	ldw	r3,-24(fp)
   10738:	00bfff84 	movi	r2,-2
   1073c:	1884703a 	and	r2,r3,r2
   10740:	1001703a 	wrctl	status,r2
  
  return context;
   10744:	e0bffa17 	ldw	r2,-24(fp)
    }
    OS_ENTER_CRITICAL();
   10748:	e0bff315 	stw	r2,-52(fp)
    flags_cur = pgrp->OSFlagFlags;
   1074c:	e0bffc17 	ldw	r2,-16(fp)
   10750:	1080020b 	ldhu	r2,8(r2)
   10754:	e0bff50d 	sth	r2,-44(fp)
   10758:	e0bff317 	ldw	r2,-52(fp)
   1075c:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   10760:	e0bffb17 	ldw	r2,-20(fp)
   10764:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr     = OS_ERR_NONE;
   10768:	e0bfff17 	ldw	r2,-4(fp)
   1076c:	10000005 	stb	zero,0(r2)
    return (flags_cur);
   10770:	e0bff50b 	ldhu	r2,-44(fp)
}
   10774:	e037883a 	mov	sp,fp
   10778:	dfc00117 	ldw	ra,4(sp)
   1077c:	df000017 	ldw	fp,0(sp)
   10780:	dec00204 	addi	sp,sp,8
   10784:	f800283a 	ret

00010788 <OSFlagQuery>:
*********************************************************************************************************
*/

#if OS_FLAG_QUERY_EN > 0
OS_FLAGS  OSFlagQuery (OS_FLAG_GRP *pgrp, INT8U *perr)
{
   10788:	defff904 	addi	sp,sp,-28
   1078c:	df000615 	stw	fp,24(sp)
   10790:	df000604 	addi	fp,sp,24
   10794:	e13ffe15 	stw	r4,-8(fp)
   10798:	e17fff15 	stw	r5,-4(fp)
    OS_FLAGS   flags;
#if OS_CRITICAL_METHOD == 3                       /* Allocate storage for CPU status register          */
    OS_CPU_SR  cpu_sr = 0;
   1079c:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                     /* Validate 'perr'                                   */
   107a0:	e0bfff17 	ldw	r2,-4(fp)
   107a4:	1000021e 	bne	r2,zero,107b0 <OSFlagQuery+0x28>
        return ((OS_FLAGS)0);
   107a8:	0005883a 	mov	r2,zero
   107ac:	00002306 	br	1083c <OSFlagQuery+0xb4>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {               /* Validate 'pgrp'                                   */
   107b0:	e0bffe17 	ldw	r2,-8(fp)
   107b4:	1000051e 	bne	r2,zero,107cc <OSFlagQuery+0x44>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
   107b8:	e0bfff17 	ldw	r2,-4(fp)
   107bc:	00c01b84 	movi	r3,110
   107c0:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
   107c4:	0005883a 	mov	r2,zero
   107c8:	00001c06 	br	1083c <OSFlagQuery+0xb4>
    }
#endif
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) { /* Validate event block type                         */
   107cc:	e0bffe17 	ldw	r2,-8(fp)
   107d0:	10800003 	ldbu	r2,0(r2)
   107d4:	10803fcc 	andi	r2,r2,255
   107d8:	10800160 	cmpeqi	r2,r2,5
   107dc:	1000051e 	bne	r2,zero,107f4 <OSFlagQuery+0x6c>
        *perr = OS_ERR_EVENT_TYPE;
   107e0:	e0bfff17 	ldw	r2,-4(fp)
   107e4:	00c00044 	movi	r3,1
   107e8:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
   107ec:	0005883a 	mov	r2,zero
   107f0:	00001206 	br	1083c <OSFlagQuery+0xb4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   107f4:	0005303a 	rdctl	r2,status
   107f8:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   107fc:	e0fffc17 	ldw	r3,-16(fp)
   10800:	00bfff84 	movi	r2,-2
   10804:	1884703a 	and	r2,r3,r2
   10808:	1001703a 	wrctl	status,r2
  
  return context;
   1080c:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
   10810:	e0bffa15 	stw	r2,-24(fp)
    flags = pgrp->OSFlagFlags;
   10814:	e0bffe17 	ldw	r2,-8(fp)
   10818:	1080020b 	ldhu	r2,8(r2)
   1081c:	e0bffb0d 	sth	r2,-20(fp)
   10820:	e0bffa17 	ldw	r2,-24(fp)
   10824:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   10828:	e0bffd17 	ldw	r2,-12(fp)
   1082c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
   10830:	e0bfff17 	ldw	r2,-4(fp)
   10834:	10000005 	stb	zero,0(r2)
    return (flags);                               /* Return the current value of the event flags       */
   10838:	e0bffb0b 	ldhu	r2,-20(fp)
}
   1083c:	e037883a 	mov	sp,fp
   10840:	df000017 	ldw	fp,0(sp)
   10844:	dec00104 	addi	sp,sp,4
   10848:	f800283a 	ret

0001084c <OS_FlagBlock>:
* Note(s)    : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

static  void  OS_FlagBlock (OS_FLAG_GRP *pgrp, OS_FLAG_NODE *pnode, OS_FLAGS flags, INT8U wait_type, INT16U timeout)
{
   1084c:	defff804 	addi	sp,sp,-32
   10850:	df000715 	stw	fp,28(sp)
   10854:	df000704 	addi	fp,sp,28
   10858:	e13ffb15 	stw	r4,-20(fp)
   1085c:	e17ffc15 	stw	r5,-16(fp)
   10860:	3009883a 	mov	r4,r6
   10864:	3807883a 	mov	r3,r7
   10868:	e0800117 	ldw	r2,4(fp)
   1086c:	e13ffd0d 	sth	r4,-12(fp)
   10870:	e0fffe05 	stb	r3,-8(fp)
   10874:	e0bfff0d 	sth	r2,-4(fp)
    OS_FLAG_NODE  *pnode_next;
    INT8U          y;


    OSTCBCur->OSTCBStat      |= OS_STAT_FLAG;
   10878:	008000b4 	movhi	r2,2
   1087c:	10b48e04 	addi	r2,r2,-11720
   10880:	10c00017 	ldw	r3,0(r2)
   10884:	008000b4 	movhi	r2,2
   10888:	10b48e04 	addi	r2,r2,-11720
   1088c:	10800017 	ldw	r2,0(r2)
   10890:	10800c03 	ldbu	r2,48(r2)
   10894:	10800814 	ori	r2,r2,32
   10898:	18800c05 	stb	r2,48(r3)
    OSTCBCur->OSTCBStatPend   = OS_STAT_PEND_OK;
   1089c:	008000b4 	movhi	r2,2
   108a0:	10b48e04 	addi	r2,r2,-11720
   108a4:	10800017 	ldw	r2,0(r2)
   108a8:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBDly        = timeout;              /* Store timeout in task's TCB                   */
   108ac:	008000b4 	movhi	r2,2
   108b0:	10b48e04 	addi	r2,r2,-11720
   108b4:	10800017 	ldw	r2,0(r2)
   108b8:	e0ffff0b 	ldhu	r3,-4(fp)
   108bc:	10c00b8d 	sth	r3,46(r2)
#if OS_TASK_DEL_EN > 0
    OSTCBCur->OSTCBFlagNode   = pnode;                /* TCB to link to node                           */
   108c0:	008000b4 	movhi	r2,2
   108c4:	10b48e04 	addi	r2,r2,-11720
   108c8:	10800017 	ldw	r2,0(r2)
   108cc:	e0fffc17 	ldw	r3,-16(fp)
   108d0:	10c00a15 	stw	r3,40(r2)
#endif
    pnode->OSFlagNodeFlags    = flags;                /* Save the flags that we need to wait for       */
   108d4:	e0bffc17 	ldw	r2,-16(fp)
   108d8:	e0fffd0b 	ldhu	r3,-12(fp)
   108dc:	10c0040d 	sth	r3,16(r2)
    pnode->OSFlagNodeWaitType = wait_type;            /* Save the type of wait we are doing            */
   108e0:	e0bffc17 	ldw	r2,-16(fp)
   108e4:	e0fffe03 	ldbu	r3,-8(fp)
   108e8:	10c00485 	stb	r3,18(r2)
    pnode->OSFlagNodeTCB      = (void *)OSTCBCur;     /* Link to task's TCB                            */
   108ec:	008000b4 	movhi	r2,2
   108f0:	10b48e04 	addi	r2,r2,-11720
   108f4:	10c00017 	ldw	r3,0(r2)
   108f8:	e0bffc17 	ldw	r2,-16(fp)
   108fc:	10c00215 	stw	r3,8(r2)
    pnode->OSFlagNodeNext     = pgrp->OSFlagWaitList; /* Add node at beginning of event flag wait list */
   10900:	e0bffb17 	ldw	r2,-20(fp)
   10904:	10c00117 	ldw	r3,4(r2)
   10908:	e0bffc17 	ldw	r2,-16(fp)
   1090c:	10c00015 	stw	r3,0(r2)
    pnode->OSFlagNodePrev     = (void *)0;
   10910:	e0bffc17 	ldw	r2,-16(fp)
   10914:	10000115 	stw	zero,4(r2)
    pnode->OSFlagNodeFlagGrp  = (void *)pgrp;         /* Link to Event Flag Group                      */
   10918:	e0bffc17 	ldw	r2,-16(fp)
   1091c:	e0fffb17 	ldw	r3,-20(fp)
   10920:	10c00315 	stw	r3,12(r2)
    pnode_next                = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
   10924:	e0bffb17 	ldw	r2,-20(fp)
   10928:	10800117 	ldw	r2,4(r2)
   1092c:	e0bff915 	stw	r2,-28(fp)
    if (pnode_next != (void *)0) {                    /* Is this the first NODE to insert?             */
   10930:	e0bff917 	ldw	r2,-28(fp)
   10934:	10000326 	beq	r2,zero,10944 <OS_FlagBlock+0xf8>
        pnode_next->OSFlagNodePrev = pnode;           /* No, link in doubly linked list                */
   10938:	e0bff917 	ldw	r2,-28(fp)
   1093c:	e0fffc17 	ldw	r3,-16(fp)
   10940:	10c00115 	stw	r3,4(r2)
    }
    pgrp->OSFlagWaitList = (void *)pnode;
   10944:	e0bffb17 	ldw	r2,-20(fp)
   10948:	e0fffc17 	ldw	r3,-16(fp)
   1094c:	10c00115 	stw	r3,4(r2)

    y            =  OSTCBCur->OSTCBY;                 /* Suspend current task until flag(s) received   */
   10950:	008000b4 	movhi	r2,2
   10954:	10b48e04 	addi	r2,r2,-11720
   10958:	10800017 	ldw	r2,0(r2)
   1095c:	10800d03 	ldbu	r2,52(r2)
   10960:	e0bffa05 	stb	r2,-24(fp)
    OSRdyTbl[y] &= ~OSTCBCur->OSTCBBitX;
   10964:	e0fffa03 	ldbu	r3,-24(fp)
   10968:	e13ffa03 	ldbu	r4,-24(fp)
   1096c:	008000b4 	movhi	r2,2
   10970:	10b48b44 	addi	r2,r2,-11731
   10974:	1105883a 	add	r2,r2,r4
   10978:	10800003 	ldbu	r2,0(r2)
   1097c:	1009883a 	mov	r4,r2
   10980:	008000b4 	movhi	r2,2
   10984:	10b48e04 	addi	r2,r2,-11720
   10988:	10800017 	ldw	r2,0(r2)
   1098c:	10800d43 	ldbu	r2,53(r2)
   10990:	0084303a 	nor	r2,zero,r2
   10994:	2084703a 	and	r2,r4,r2
   10998:	1009883a 	mov	r4,r2
   1099c:	008000b4 	movhi	r2,2
   109a0:	10b48b44 	addi	r2,r2,-11731
   109a4:	10c5883a 	add	r2,r2,r3
   109a8:	11000005 	stb	r4,0(r2)
    if (OSRdyTbl[y] == 0x00) {
   109ac:	e0fffa03 	ldbu	r3,-24(fp)
   109b0:	008000b4 	movhi	r2,2
   109b4:	10b48b44 	addi	r2,r2,-11731
   109b8:	10c5883a 	add	r2,r2,r3
   109bc:	10800003 	ldbu	r2,0(r2)
   109c0:	10803fcc 	andi	r2,r2,255
   109c4:	10000e1e 	bne	r2,zero,10a00 <OS_FlagBlock+0x1b4>
        OSRdyGrp &= ~OSTCBCur->OSTCBBitY;
   109c8:	008000b4 	movhi	r2,2
   109cc:	10b48e04 	addi	r2,r2,-11720
   109d0:	10800017 	ldw	r2,0(r2)
   109d4:	10800d83 	ldbu	r2,54(r2)
   109d8:	0084303a 	nor	r2,zero,r2
   109dc:	1007883a 	mov	r3,r2
   109e0:	008000b4 	movhi	r2,2
   109e4:	10b48b04 	addi	r2,r2,-11732
   109e8:	10800003 	ldbu	r2,0(r2)
   109ec:	1884703a 	and	r2,r3,r2
   109f0:	1007883a 	mov	r3,r2
   109f4:	008000b4 	movhi	r2,2
   109f8:	10b48b04 	addi	r2,r2,-11732
   109fc:	10c00005 	stb	r3,0(r2)
    }
}
   10a00:	e037883a 	mov	sp,fp
   10a04:	df000017 	ldw	fp,0(sp)
   10a08:	dec00104 	addi	sp,sp,4
   10a0c:	f800283a 	ret

00010a10 <OS_FlagInit>:
* WARNING    : You MUST NOT call this function from your code.  This is an INTERNAL function to uC/OS-II.
*********************************************************************************************************
*/

void  OS_FlagInit (void)
{
   10a10:	defffb04 	addi	sp,sp,-20
   10a14:	dfc00415 	stw	ra,16(sp)
   10a18:	df000315 	stw	fp,12(sp)
   10a1c:	df000304 	addi	fp,sp,12
    INT16U       i;
    OS_FLAG_GRP *pgrp1;
    OS_FLAG_GRP *pgrp2;


    OS_MemClr((INT8U *)&OSFlagTbl[0], sizeof(OSFlagTbl));           /* Clear the flag group table      */
   10a20:	010000b4 	movhi	r4,2
   10a24:	2114ab04 	addi	r4,r4,21164
   10a28:	0140dc04 	movi	r5,880
   10a2c:	000eb700 	call	eb70 <OS_MemClr>
    pgrp1 = &OSFlagTbl[0];
   10a30:	008000b4 	movhi	r2,2
   10a34:	1094ab04 	addi	r2,r2,21164
   10a38:	e0bffe15 	stw	r2,-8(fp)
    pgrp2 = &OSFlagTbl[1];
   10a3c:	008000b4 	movhi	r2,2
   10a40:	1094b604 	addi	r2,r2,21208
   10a44:	e0bfff15 	stw	r2,-4(fp)
    for (i = 0; i < (OS_MAX_FLAGS - 1); i++) {                      /* Init. list of free EVENT FLAGS  */
   10a48:	e03ffd0d 	sth	zero,-12(fp)
   10a4c:	00001306 	br	10a9c <OS_FlagInit+0x8c>
        pgrp1->OSFlagType     = OS_EVENT_TYPE_UNUSED;
   10a50:	e0bffe17 	ldw	r2,-8(fp)
   10a54:	10000005 	stb	zero,0(r2)
        pgrp1->OSFlagWaitList = (void *)pgrp2;
   10a58:	e0bffe17 	ldw	r2,-8(fp)
   10a5c:	e0ffff17 	ldw	r3,-4(fp)
   10a60:	10c00115 	stw	r3,4(r2)
#if OS_FLAG_NAME_SIZE > 1
        pgrp1->OSFlagName[0]  = '?';                                /* Unknown name                    */
   10a64:	e0bffe17 	ldw	r2,-8(fp)
   10a68:	00c00fc4 	movi	r3,63
   10a6c:	10c00285 	stb	r3,10(r2)
        pgrp1->OSFlagName[1]  = OS_ASCII_NUL;
   10a70:	e0bffe17 	ldw	r2,-8(fp)
   10a74:	100002c5 	stb	zero,11(r2)
#endif
        pgrp1++;
   10a78:	e0bffe17 	ldw	r2,-8(fp)
   10a7c:	10800b04 	addi	r2,r2,44
   10a80:	e0bffe15 	stw	r2,-8(fp)
        pgrp2++;
   10a84:	e0bfff17 	ldw	r2,-4(fp)
   10a88:	10800b04 	addi	r2,r2,44
   10a8c:	e0bfff15 	stw	r2,-4(fp)


    OS_MemClr((INT8U *)&OSFlagTbl[0], sizeof(OSFlagTbl));           /* Clear the flag group table      */
    pgrp1 = &OSFlagTbl[0];
    pgrp2 = &OSFlagTbl[1];
    for (i = 0; i < (OS_MAX_FLAGS - 1); i++) {                      /* Init. list of free EVENT FLAGS  */
   10a90:	e0bffd0b 	ldhu	r2,-12(fp)
   10a94:	10800044 	addi	r2,r2,1
   10a98:	e0bffd0d 	sth	r2,-12(fp)
   10a9c:	e0bffd0b 	ldhu	r2,-12(fp)
   10aa0:	108004f0 	cmpltui	r2,r2,19
   10aa4:	103fea1e 	bne	r2,zero,10a50 <__alt_mem_Flash_flash_data+0xf4010a50>
        pgrp1->OSFlagName[1]  = OS_ASCII_NUL;
#endif
        pgrp1++;
        pgrp2++;
    }
    pgrp1->OSFlagType     = OS_EVENT_TYPE_UNUSED;
   10aa8:	e0bffe17 	ldw	r2,-8(fp)
   10aac:	10000005 	stb	zero,0(r2)
    pgrp1->OSFlagWaitList = (void *)0;
   10ab0:	e0bffe17 	ldw	r2,-8(fp)
   10ab4:	10000115 	stw	zero,4(r2)
#if OS_FLAG_NAME_SIZE > 1
    pgrp1->OSFlagName[0]  = '?';                                    /* Unknown name                    */
   10ab8:	e0bffe17 	ldw	r2,-8(fp)
   10abc:	00c00fc4 	movi	r3,63
   10ac0:	10c00285 	stb	r3,10(r2)
    pgrp1->OSFlagName[1]  = OS_ASCII_NUL;
   10ac4:	e0bffe17 	ldw	r2,-8(fp)
   10ac8:	100002c5 	stb	zero,11(r2)
#endif
    OSFlagFreeList        = &OSFlagTbl[0];
   10acc:	008000b4 	movhi	r2,2
   10ad0:	10b49004 	addi	r2,r2,-11712
   10ad4:	00c000b4 	movhi	r3,2
   10ad8:	18d4ab04 	addi	r3,r3,21164
   10adc:	10c00015 	stw	r3,0(r2)
#endif
}
   10ae0:	e037883a 	mov	sp,fp
   10ae4:	dfc00117 	ldw	ra,4(sp)
   10ae8:	df000017 	ldw	fp,0(sp)
   10aec:	dec00204 	addi	sp,sp,8
   10af0:	f800283a 	ret

00010af4 <OS_FlagTaskRdy>:
*              2) This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

static  BOOLEAN  OS_FlagTaskRdy (OS_FLAG_NODE *pnode, OS_FLAGS flags_rdy)
{
   10af4:	defffa04 	addi	sp,sp,-24
   10af8:	dfc00515 	stw	ra,20(sp)
   10afc:	df000415 	stw	fp,16(sp)
   10b00:	df000404 	addi	fp,sp,16
   10b04:	e13ffe15 	stw	r4,-8(fp)
   10b08:	2805883a 	mov	r2,r5
   10b0c:	e0bfff0d 	sth	r2,-4(fp)
    OS_TCB   *ptcb;
    BOOLEAN   sched;


    ptcb                 = (OS_TCB *)pnode->OSFlagNodeTCB; /* Point to TCB of waiting task             */
   10b10:	e0bffe17 	ldw	r2,-8(fp)
   10b14:	10800217 	ldw	r2,8(r2)
   10b18:	e0bffd15 	stw	r2,-12(fp)
    ptcb->OSTCBDly       = 0;
   10b1c:	e0bffd17 	ldw	r2,-12(fp)
   10b20:	10000b8d 	sth	zero,46(r2)
    ptcb->OSTCBFlagsRdy  = flags_rdy;
   10b24:	e0bffd17 	ldw	r2,-12(fp)
   10b28:	e0ffff0b 	ldhu	r3,-4(fp)
   10b2c:	10c00b0d 	sth	r3,44(r2)
    ptcb->OSTCBStat     &= ~(INT8U)OS_STAT_FLAG;
   10b30:	e0bffd17 	ldw	r2,-12(fp)
   10b34:	10c00c03 	ldbu	r3,48(r2)
   10b38:	00bff7c4 	movi	r2,-33
   10b3c:	1884703a 	and	r2,r3,r2
   10b40:	1007883a 	mov	r3,r2
   10b44:	e0bffd17 	ldw	r2,-12(fp)
   10b48:	10c00c05 	stb	r3,48(r2)
    ptcb->OSTCBStatPend  = OS_STAT_PEND_OK;
   10b4c:	e0bffd17 	ldw	r2,-12(fp)
   10b50:	10000c45 	stb	zero,49(r2)
    if (ptcb->OSTCBStat == OS_STAT_RDY) {                  /* Task now ready?                          */
   10b54:	e0bffd17 	ldw	r2,-12(fp)
   10b58:	10800c03 	ldbu	r2,48(r2)
   10b5c:	10803fcc 	andi	r2,r2,255
   10b60:	10001f1e 	bne	r2,zero,10be0 <OS_FlagTaskRdy+0xec>
        OSRdyGrp               |= ptcb->OSTCBBitY;         /* Put task into ready list                 */
   10b64:	e0bffd17 	ldw	r2,-12(fp)
   10b68:	10c00d83 	ldbu	r3,54(r2)
   10b6c:	008000b4 	movhi	r2,2
   10b70:	10b48b04 	addi	r2,r2,-11732
   10b74:	10800003 	ldbu	r2,0(r2)
   10b78:	1884b03a 	or	r2,r3,r2
   10b7c:	1007883a 	mov	r3,r2
   10b80:	008000b4 	movhi	r2,2
   10b84:	10b48b04 	addi	r2,r2,-11732
   10b88:	10c00005 	stb	r3,0(r2)
        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
   10b8c:	e0bffd17 	ldw	r2,-12(fp)
   10b90:	10800d03 	ldbu	r2,52(r2)
   10b94:	10c03fcc 	andi	r3,r2,255
   10b98:	e0bffd17 	ldw	r2,-12(fp)
   10b9c:	10800d03 	ldbu	r2,52(r2)
   10ba0:	11003fcc 	andi	r4,r2,255
   10ba4:	008000b4 	movhi	r2,2
   10ba8:	10b48b44 	addi	r2,r2,-11731
   10bac:	1105883a 	add	r2,r2,r4
   10bb0:	11000003 	ldbu	r4,0(r2)
   10bb4:	e0bffd17 	ldw	r2,-12(fp)
   10bb8:	10800d43 	ldbu	r2,53(r2)
   10bbc:	2084b03a 	or	r2,r4,r2
   10bc0:	1009883a 	mov	r4,r2
   10bc4:	008000b4 	movhi	r2,2
   10bc8:	10b48b44 	addi	r2,r2,-11731
   10bcc:	10c5883a 	add	r2,r2,r3
   10bd0:	11000005 	stb	r4,0(r2)
        sched                   = OS_TRUE;
   10bd4:	00800044 	movi	r2,1
   10bd8:	e0bffc05 	stb	r2,-16(fp)
   10bdc:	00000106 	br	10be4 <OS_FlagTaskRdy+0xf0>
    } else {
        sched                   = OS_FALSE;
   10be0:	e03ffc05 	stb	zero,-16(fp)
    }
    OS_FlagUnlink(pnode);
   10be4:	e13ffe17 	ldw	r4,-8(fp)
   10be8:	0010c040 	call	10c04 <OS_FlagUnlink>
    return (sched);
   10bec:	e0bffc03 	ldbu	r2,-16(fp)
}
   10bf0:	e037883a 	mov	sp,fp
   10bf4:	dfc00117 	ldw	ra,4(sp)
   10bf8:	df000017 	ldw	fp,0(sp)
   10bfc:	dec00204 	addi	sp,sp,8
   10c00:	f800283a 	ret

00010c04 <OS_FlagUnlink>:
*              2) This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

void  OS_FlagUnlink (OS_FLAG_NODE *pnode)
{
   10c04:	defffa04 	addi	sp,sp,-24
   10c08:	df000515 	stw	fp,20(sp)
   10c0c:	df000504 	addi	fp,sp,20
   10c10:	e13fff15 	stw	r4,-4(fp)
    OS_FLAG_GRP  *pgrp;
    OS_FLAG_NODE *pnode_prev;
    OS_FLAG_NODE *pnode_next;


    pnode_prev = (OS_FLAG_NODE *)pnode->OSFlagNodePrev;
   10c14:	e0bfff17 	ldw	r2,-4(fp)
   10c18:	10800117 	ldw	r2,4(r2)
   10c1c:	e0bffb15 	stw	r2,-20(fp)
    pnode_next = (OS_FLAG_NODE *)pnode->OSFlagNodeNext;
   10c20:	e0bfff17 	ldw	r2,-4(fp)
   10c24:	10800017 	ldw	r2,0(r2)
   10c28:	e0bffc15 	stw	r2,-16(fp)
    if (pnode_prev == (OS_FLAG_NODE *)0) {                      /* Is it first node in wait list?      */
   10c2c:	e0bffb17 	ldw	r2,-20(fp)
   10c30:	10000b1e 	bne	r2,zero,10c60 <OS_FlagUnlink+0x5c>
        pgrp                 = (OS_FLAG_GRP *)pnode->OSFlagNodeFlagGrp;
   10c34:	e0bfff17 	ldw	r2,-4(fp)
   10c38:	10800317 	ldw	r2,12(r2)
   10c3c:	e0bffd15 	stw	r2,-12(fp)
        pgrp->OSFlagWaitList = (void *)pnode_next;              /*      Update list for new 1st node   */
   10c40:	e0bffd17 	ldw	r2,-12(fp)
   10c44:	e0fffc17 	ldw	r3,-16(fp)
   10c48:	10c00115 	stw	r3,4(r2)
        if (pnode_next != (OS_FLAG_NODE *)0) {
   10c4c:	e0bffc17 	ldw	r2,-16(fp)
   10c50:	10000b26 	beq	r2,zero,10c80 <OS_FlagUnlink+0x7c>
            pnode_next->OSFlagNodePrev = (OS_FLAG_NODE *)0;     /*      Link new 1st node PREV to NULL */
   10c54:	e0bffc17 	ldw	r2,-16(fp)
   10c58:	10000115 	stw	zero,4(r2)
   10c5c:	00000806 	br	10c80 <OS_FlagUnlink+0x7c>
        }
    } else {                                                    /* No,  A node somewhere in the list   */
        pnode_prev->OSFlagNodeNext = pnode_next;                /*      Link around the node to unlink */
   10c60:	e0bffb17 	ldw	r2,-20(fp)
   10c64:	e0fffc17 	ldw	r3,-16(fp)
   10c68:	10c00015 	stw	r3,0(r2)
        if (pnode_next != (OS_FLAG_NODE *)0) {                  /*      Was this the LAST node?        */
   10c6c:	e0bffc17 	ldw	r2,-16(fp)
   10c70:	10000326 	beq	r2,zero,10c80 <OS_FlagUnlink+0x7c>
            pnode_next->OSFlagNodePrev = pnode_prev;            /*      No, Link around current node   */
   10c74:	e0bffc17 	ldw	r2,-16(fp)
   10c78:	e0fffb17 	ldw	r3,-20(fp)
   10c7c:	10c00115 	stw	r3,4(r2)
        }
    }
#if OS_TASK_DEL_EN > 0
    ptcb                = (OS_TCB *)pnode->OSFlagNodeTCB;
   10c80:	e0bfff17 	ldw	r2,-4(fp)
   10c84:	10800217 	ldw	r2,8(r2)
   10c88:	e0bffe15 	stw	r2,-8(fp)
    ptcb->OSTCBFlagNode = (OS_FLAG_NODE *)0;
   10c8c:	e0bffe17 	ldw	r2,-8(fp)
   10c90:	10000a15 	stw	zero,40(r2)
#endif
}
   10c94:	e037883a 	mov	sp,fp
   10c98:	df000017 	ldw	fp,0(sp)
   10c9c:	dec00104 	addi	sp,sp,4
   10ca0:	f800283a 	ret

00010ca4 <OSMemCreate>:
*                              free partition is available.
*********************************************************************************************************
*/

OS_MEM  *OSMemCreate (void *addr, INT32U nblks, INT32U blksize, INT8U *perr)
{
   10ca4:	defff404 	addi	sp,sp,-48
   10ca8:	df000b15 	stw	fp,44(sp)
   10cac:	df000b04 	addi	fp,sp,44
   10cb0:	e13ffc15 	stw	r4,-16(fp)
   10cb4:	e17ffd15 	stw	r5,-12(fp)
   10cb8:	e1bffe15 	stw	r6,-8(fp)
   10cbc:	e1ffff15 	stw	r7,-4(fp)
    OS_MEM    *pmem;
    INT8U     *pblk;
    void     **plink;
    INT32U     i;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   10cc0:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0              
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
   10cc4:	e0bfff17 	ldw	r2,-4(fp)
   10cc8:	1000021e 	bne	r2,zero,10cd4 <OSMemCreate+0x30>
        return ((OS_MEM *)0);
   10ccc:	0005883a 	mov	r2,zero
   10cd0:	00006d06 	br	10e88 <OSMemCreate+0x1e4>
    }
    if (addr == (void *)0) {                          /* Must pass a valid address for the memory part.*/
   10cd4:	e0bffc17 	ldw	r2,-16(fp)
   10cd8:	1000051e 	bne	r2,zero,10cf0 <OSMemCreate+0x4c>
        *perr = OS_ERR_MEM_INVALID_ADDR;
   10cdc:	e0bfff17 	ldw	r2,-4(fp)
   10ce0:	00c01884 	movi	r3,98
   10ce4:	10c00005 	stb	r3,0(r2)
        return ((OS_MEM *)0);
   10ce8:	0005883a 	mov	r2,zero
   10cec:	00006606 	br	10e88 <OSMemCreate+0x1e4>
    }
    if (((INT32U)addr & (sizeof(void *) - 1)) != 0){  /* Must be pointer size aligned                  */
   10cf0:	e0bffc17 	ldw	r2,-16(fp)
   10cf4:	108000cc 	andi	r2,r2,3
   10cf8:	10000526 	beq	r2,zero,10d10 <OSMemCreate+0x6c>
        *perr = OS_ERR_MEM_INVALID_ADDR;
   10cfc:	e0bfff17 	ldw	r2,-4(fp)
   10d00:	00c01884 	movi	r3,98
   10d04:	10c00005 	stb	r3,0(r2)
        return ((OS_MEM *)0);
   10d08:	0005883a 	mov	r2,zero
   10d0c:	00005e06 	br	10e88 <OSMemCreate+0x1e4>
    }
    if (nblks < 2) {                                  /* Must have at least 2 blocks per partition     */
   10d10:	e0bffd17 	ldw	r2,-12(fp)
   10d14:	108000a8 	cmpgeui	r2,r2,2
   10d18:	1000051e 	bne	r2,zero,10d30 <OSMemCreate+0x8c>
        *perr = OS_ERR_MEM_INVALID_BLKS;
   10d1c:	e0bfff17 	ldw	r2,-4(fp)
   10d20:	00c016c4 	movi	r3,91
   10d24:	10c00005 	stb	r3,0(r2)
        return ((OS_MEM *)0);
   10d28:	0005883a 	mov	r2,zero
   10d2c:	00005606 	br	10e88 <OSMemCreate+0x1e4>
    }
    if (blksize < sizeof(void *)) {                   /* Must contain space for at least a pointer     */
   10d30:	e0bffe17 	ldw	r2,-8(fp)
   10d34:	10800128 	cmpgeui	r2,r2,4
   10d38:	1000051e 	bne	r2,zero,10d50 <OSMemCreate+0xac>
        *perr = OS_ERR_MEM_INVALID_SIZE;
   10d3c:	e0bfff17 	ldw	r2,-4(fp)
   10d40:	00c01704 	movi	r3,92
   10d44:	10c00005 	stb	r3,0(r2)
        return ((OS_MEM *)0);
   10d48:	0005883a 	mov	r2,zero
   10d4c:	00004e06 	br	10e88 <OSMemCreate+0x1e4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   10d50:	0005303a 	rdctl	r2,status
   10d54:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   10d58:	e0fffa17 	ldw	r3,-24(fp)
   10d5c:	00bfff84 	movi	r2,-2
   10d60:	1884703a 	and	r2,r3,r2
   10d64:	1001703a 	wrctl	status,r2
  
  return context;
   10d68:	e0bffa17 	ldw	r2,-24(fp)
    }
#endif
    OS_ENTER_CRITICAL();
   10d6c:	e0bff815 	stw	r2,-32(fp)
    pmem = OSMemFreeList;                             /* Get next free memory partition                */
   10d70:	008000b4 	movhi	r2,2
   10d74:	10b48804 	addi	r2,r2,-11744
   10d78:	10800017 	ldw	r2,0(r2)
   10d7c:	e0bff915 	stw	r2,-28(fp)
    if (OSMemFreeList != (OS_MEM *)0) {               /* See if pool of free partitions was empty      */
   10d80:	008000b4 	movhi	r2,2
   10d84:	10b48804 	addi	r2,r2,-11744
   10d88:	10800017 	ldw	r2,0(r2)
   10d8c:	10000726 	beq	r2,zero,10dac <OSMemCreate+0x108>
        OSMemFreeList = (OS_MEM *)OSMemFreeList->OSMemFreeList;
   10d90:	008000b4 	movhi	r2,2
   10d94:	10b48804 	addi	r2,r2,-11744
   10d98:	10800017 	ldw	r2,0(r2)
   10d9c:	10c00117 	ldw	r3,4(r2)
   10da0:	008000b4 	movhi	r2,2
   10da4:	10b48804 	addi	r2,r2,-11744
   10da8:	10c00015 	stw	r3,0(r2)
   10dac:	e0bff817 	ldw	r2,-32(fp)
   10db0:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   10db4:	e0bffb17 	ldw	r2,-20(fp)
   10db8:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    if (pmem == (OS_MEM *)0) {                        /* See if we have a memory partition             */
   10dbc:	e0bff917 	ldw	r2,-28(fp)
   10dc0:	1000051e 	bne	r2,zero,10dd8 <OSMemCreate+0x134>
        *perr = OS_ERR_MEM_INVALID_PART;
   10dc4:	e0bfff17 	ldw	r2,-4(fp)
   10dc8:	00c01684 	movi	r3,90
   10dcc:	10c00005 	stb	r3,0(r2)
        return ((OS_MEM *)0);
   10dd0:	0005883a 	mov	r2,zero
   10dd4:	00002c06 	br	10e88 <OSMemCreate+0x1e4>
    }
    plink = (void **)addr;                            /* Create linked list of free memory blocks      */
   10dd8:	e0bffc17 	ldw	r2,-16(fp)
   10ddc:	e0bff615 	stw	r2,-40(fp)
    pblk  = (INT8U *)((INT32U)addr + blksize);
   10de0:	e0fffc17 	ldw	r3,-16(fp)
   10de4:	e0bffe17 	ldw	r2,-8(fp)
   10de8:	1885883a 	add	r2,r3,r2
   10dec:	e0bff515 	stw	r2,-44(fp)
    for (i = 0; i < (nblks - 1); i++) {
   10df0:	e03ff715 	stw	zero,-36(fp)
   10df4:	00000c06 	br	10e28 <OSMemCreate+0x184>
       *plink = (void *)pblk;                         /* Save pointer to NEXT block in CURRENT block   */
   10df8:	e0bff617 	ldw	r2,-40(fp)
   10dfc:	e0fff517 	ldw	r3,-44(fp)
   10e00:	10c00015 	stw	r3,0(r2)
        plink = (void **)pblk;                        /* Position to  NEXT      block                  */
   10e04:	e0bff517 	ldw	r2,-44(fp)
   10e08:	e0bff615 	stw	r2,-40(fp)
        pblk  = (INT8U *)((INT32U)pblk + blksize);    /* Point to the FOLLOWING block                  */
   10e0c:	e0fff517 	ldw	r3,-44(fp)
   10e10:	e0bffe17 	ldw	r2,-8(fp)
   10e14:	1885883a 	add	r2,r3,r2
   10e18:	e0bff515 	stw	r2,-44(fp)
        *perr = OS_ERR_MEM_INVALID_PART;
        return ((OS_MEM *)0);
    }
    plink = (void **)addr;                            /* Create linked list of free memory blocks      */
    pblk  = (INT8U *)((INT32U)addr + blksize);
    for (i = 0; i < (nblks - 1); i++) {
   10e1c:	e0bff717 	ldw	r2,-36(fp)
   10e20:	10800044 	addi	r2,r2,1
   10e24:	e0bff715 	stw	r2,-36(fp)
   10e28:	e0bffd17 	ldw	r2,-12(fp)
   10e2c:	10bfffc4 	addi	r2,r2,-1
   10e30:	e0fff717 	ldw	r3,-36(fp)
   10e34:	18bff036 	bltu	r3,r2,10df8 <__alt_mem_Flash_flash_data+0xf4010df8>
       *plink = (void *)pblk;                         /* Save pointer to NEXT block in CURRENT block   */
        plink = (void **)pblk;                        /* Position to  NEXT      block                  */
        pblk  = (INT8U *)((INT32U)pblk + blksize);    /* Point to the FOLLOWING block                  */
    }
    *plink              = (void *)0;                  /* Last memory block points to NULL              */
   10e38:	e0bff617 	ldw	r2,-40(fp)
   10e3c:	10000015 	stw	zero,0(r2)
    pmem->OSMemAddr     = addr;                       /* Store start address of memory partition       */
   10e40:	e0bff917 	ldw	r2,-28(fp)
   10e44:	e0fffc17 	ldw	r3,-16(fp)
   10e48:	10c00015 	stw	r3,0(r2)
    pmem->OSMemFreeList = addr;                       /* Initialize pointer to pool of free blocks     */
   10e4c:	e0bff917 	ldw	r2,-28(fp)
   10e50:	e0fffc17 	ldw	r3,-16(fp)
   10e54:	10c00115 	stw	r3,4(r2)
    pmem->OSMemNFree    = nblks;                      /* Store number of free blocks in MCB            */
   10e58:	e0bff917 	ldw	r2,-28(fp)
   10e5c:	e0fffd17 	ldw	r3,-12(fp)
   10e60:	10c00415 	stw	r3,16(r2)
    pmem->OSMemNBlks    = nblks;
   10e64:	e0bff917 	ldw	r2,-28(fp)
   10e68:	e0fffd17 	ldw	r3,-12(fp)
   10e6c:	10c00315 	stw	r3,12(r2)
    pmem->OSMemBlkSize  = blksize;                    /* Store block size of each memory blocks        */
   10e70:	e0bff917 	ldw	r2,-28(fp)
   10e74:	e0fffe17 	ldw	r3,-8(fp)
   10e78:	10c00215 	stw	r3,8(r2)
    *perr               = OS_ERR_NONE;
   10e7c:	e0bfff17 	ldw	r2,-4(fp)
   10e80:	10000005 	stb	zero,0(r2)
    return (pmem);
   10e84:	e0bff917 	ldw	r2,-28(fp)
}
   10e88:	e037883a 	mov	sp,fp
   10e8c:	df000017 	ldw	fp,0(sp)
   10e90:	dec00104 	addi	sp,sp,4
   10e94:	f800283a 	ret

00010e98 <OSMemGet>:
*               A pointer to NULL if an error is detected
*********************************************************************************************************
*/

void  *OSMemGet (OS_MEM *pmem, INT8U *perr)
{
   10e98:	defff804 	addi	sp,sp,-32
   10e9c:	df000715 	stw	fp,28(sp)
   10ea0:	df000704 	addi	fp,sp,28
   10ea4:	e13ffe15 	stw	r4,-8(fp)
   10ea8:	e17fff15 	stw	r5,-4(fp)
    void      *pblk;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   10eac:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
   10eb0:	e0bfff17 	ldw	r2,-4(fp)
   10eb4:	1000021e 	bne	r2,zero,10ec0 <OSMemGet+0x28>
        return ((void *)0);
   10eb8:	0005883a 	mov	r2,zero
   10ebc:	00002e06 	br	10f78 <OSMemGet+0xe0>
    }
    if (pmem == (OS_MEM *)0) {                        /* Must point to a valid memory partition        */
   10ec0:	e0bffe17 	ldw	r2,-8(fp)
   10ec4:	1000051e 	bne	r2,zero,10edc <OSMemGet+0x44>
        *perr = OS_ERR_MEM_INVALID_PMEM;
   10ec8:	e0bfff17 	ldw	r2,-4(fp)
   10ecc:	00c01804 	movi	r3,96
   10ed0:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
   10ed4:	0005883a 	mov	r2,zero
   10ed8:	00002706 	br	10f78 <OSMemGet+0xe0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   10edc:	0005303a 	rdctl	r2,status
   10ee0:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   10ee4:	e0fffb17 	ldw	r3,-20(fp)
   10ee8:	00bfff84 	movi	r2,-2
   10eec:	1884703a 	and	r2,r3,r2
   10ef0:	1001703a 	wrctl	status,r2
  
  return context;
   10ef4:	e0bffb17 	ldw	r2,-20(fp)
    }
#endif
    OS_ENTER_CRITICAL();
   10ef8:	e0bff915 	stw	r2,-28(fp)
    if (pmem->OSMemNFree > 0) {                       /* See if there are any free memory blocks       */
   10efc:	e0bffe17 	ldw	r2,-8(fp)
   10f00:	10800417 	ldw	r2,16(r2)
   10f04:	10001426 	beq	r2,zero,10f58 <OSMemGet+0xc0>
        pblk                = pmem->OSMemFreeList;    /* Yes, point to next free memory block          */
   10f08:	e0bffe17 	ldw	r2,-8(fp)
   10f0c:	10800117 	ldw	r2,4(r2)
   10f10:	e0bffa15 	stw	r2,-24(fp)
        pmem->OSMemFreeList = *(void **)pblk;         /*      Adjust pointer to new free list          */
   10f14:	e0bffa17 	ldw	r2,-24(fp)
   10f18:	10c00017 	ldw	r3,0(r2)
   10f1c:	e0bffe17 	ldw	r2,-8(fp)
   10f20:	10c00115 	stw	r3,4(r2)
        pmem->OSMemNFree--;                           /*      One less memory block in this partition  */
   10f24:	e0bffe17 	ldw	r2,-8(fp)
   10f28:	10800417 	ldw	r2,16(r2)
   10f2c:	10ffffc4 	addi	r3,r2,-1
   10f30:	e0bffe17 	ldw	r2,-8(fp)
   10f34:	10c00415 	stw	r3,16(r2)
   10f38:	e0bff917 	ldw	r2,-28(fp)
   10f3c:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   10f40:	e0bffc17 	ldw	r2,-16(fp)
   10f44:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_NONE;                          /*      No error                                 */
   10f48:	e0bfff17 	ldw	r2,-4(fp)
   10f4c:	10000005 	stb	zero,0(r2)
        return (pblk);                                /*      Return memory block to caller            */
   10f50:	e0bffa17 	ldw	r2,-24(fp)
   10f54:	00000806 	br	10f78 <OSMemGet+0xe0>
   10f58:	e0bff917 	ldw	r2,-28(fp)
   10f5c:	e0bffd15 	stw	r2,-12(fp)
   10f60:	e0bffd17 	ldw	r2,-12(fp)
   10f64:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_MEM_NO_FREE_BLKS;                  /* No,  Notify caller of empty memory partition  */
   10f68:	e0bfff17 	ldw	r2,-4(fp)
   10f6c:	00c01744 	movi	r3,93
   10f70:	10c00005 	stb	r3,0(r2)
    return ((void *)0);                               /*      Return NULL pointer to caller            */
   10f74:	0005883a 	mov	r2,zero
}
   10f78:	e037883a 	mov	sp,fp
   10f7c:	df000017 	ldw	fp,0(sp)
   10f80:	dec00104 	addi	sp,sp,4
   10f84:	f800283a 	ret

00010f88 <OSMemNameGet>:
*********************************************************************************************************
*/

#if OS_MEM_NAME_SIZE > 1
INT8U  OSMemNameGet (OS_MEM *pmem, INT8U *pname, INT8U *perr)
{
   10f88:	defff704 	addi	sp,sp,-36
   10f8c:	dfc00815 	stw	ra,32(sp)
   10f90:	df000715 	stw	fp,28(sp)
   10f94:	df000704 	addi	fp,sp,28
   10f98:	e13ffd15 	stw	r4,-12(fp)
   10f9c:	e17ffe15 	stw	r5,-8(fp)
   10fa0:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   10fa4:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
   10fa8:	e0bfff17 	ldw	r2,-4(fp)
   10fac:	1000021e 	bne	r2,zero,10fb8 <OSMemNameGet+0x30>
        return (0);
   10fb0:	0005883a 	mov	r2,zero
   10fb4:	00002d06 	br	1106c <OSMemNameGet+0xe4>
    }
    if (pmem == (OS_MEM *)0) {                   /* Is 'pmem' a NULL pointer?                          */
   10fb8:	e0bffd17 	ldw	r2,-12(fp)
   10fbc:	1000051e 	bne	r2,zero,10fd4 <OSMemNameGet+0x4c>
        *perr = OS_ERR_MEM_INVALID_PMEM;
   10fc0:	e0bfff17 	ldw	r2,-4(fp)
   10fc4:	00c01804 	movi	r3,96
   10fc8:	10c00005 	stb	r3,0(r2)
        return (0);
   10fcc:	0005883a 	mov	r2,zero
   10fd0:	00002606 	br	1106c <OSMemNameGet+0xe4>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
   10fd4:	e0bffe17 	ldw	r2,-8(fp)
   10fd8:	1000051e 	bne	r2,zero,10ff0 <OSMemNameGet+0x68>
        *perr = OS_ERR_PNAME_NULL;
   10fdc:	e0bfff17 	ldw	r2,-4(fp)
   10fe0:	00c00304 	movi	r3,12
   10fe4:	10c00005 	stb	r3,0(r2)
        return (0);
   10fe8:	0005883a 	mov	r2,zero
   10fec:	00001f06 	br	1106c <OSMemNameGet+0xe4>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
   10ff0:	008000b4 	movhi	r2,2
   10ff4:	10b48d04 	addi	r2,r2,-11724
   10ff8:	10800003 	ldbu	r2,0(r2)
   10ffc:	10803fcc 	andi	r2,r2,255
   11000:	10000526 	beq	r2,zero,11018 <OSMemNameGet+0x90>
        *perr = OS_ERR_NAME_GET_ISR;
   11004:	e0bfff17 	ldw	r2,-4(fp)
   11008:	00c00444 	movi	r3,17
   1100c:	10c00005 	stb	r3,0(r2)
        return (0);
   11010:	0005883a 	mov	r2,zero
   11014:	00001506 	br	1106c <OSMemNameGet+0xe4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   11018:	0005303a 	rdctl	r2,status
   1101c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   11020:	e0fffb17 	ldw	r3,-20(fp)
   11024:	00bfff84 	movi	r2,-2
   11028:	1884703a 	and	r2,r3,r2
   1102c:	1001703a 	wrctl	status,r2
  
  return context;
   11030:	e0bffb17 	ldw	r2,-20(fp)
    }
    OS_ENTER_CRITICAL();
   11034:	e0bff915 	stw	r2,-28(fp)
    len   = OS_StrCopy(pname, pmem->OSMemName);  /* Copy name from OS_MEM                              */
   11038:	e0bffd17 	ldw	r2,-12(fp)
   1103c:	10800504 	addi	r2,r2,20
   11040:	e13ffe17 	ldw	r4,-8(fp)
   11044:	100b883a 	mov	r5,r2
   11048:	000ed600 	call	ed60 <OS_StrCopy>
   1104c:	e0bffa05 	stb	r2,-24(fp)
   11050:	e0bff917 	ldw	r2,-28(fp)
   11054:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   11058:	e0bffc17 	ldw	r2,-16(fp)
   1105c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
   11060:	e0bfff17 	ldw	r2,-4(fp)
   11064:	10000005 	stb	zero,0(r2)
    return (len);
   11068:	e0bffa03 	ldbu	r2,-24(fp)
}
   1106c:	e037883a 	mov	sp,fp
   11070:	dfc00117 	ldw	ra,4(sp)
   11074:	df000017 	ldw	fp,0(sp)
   11078:	dec00204 	addi	sp,sp,8
   1107c:	f800283a 	ret

00011080 <OSMemNameSet>:
*********************************************************************************************************
*/

#if OS_MEM_NAME_SIZE > 1
void  OSMemNameSet (OS_MEM *pmem, INT8U *pname, INT8U *perr)
{
   11080:	defff604 	addi	sp,sp,-40
   11084:	dfc00915 	stw	ra,36(sp)
   11088:	df000815 	stw	fp,32(sp)
   1108c:	df000804 	addi	fp,sp,32
   11090:	e13ffd15 	stw	r4,-12(fp)
   11094:	e17ffe15 	stw	r5,-8(fp)
   11098:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   1109c:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
   110a0:	e0bfff17 	ldw	r2,-4(fp)
   110a4:	1000011e 	bne	r2,zero,110ac <OSMemNameSet+0x2c>
        return;
   110a8:	00003606 	br	11184 <OSMemNameSet+0x104>
    }
    if (pmem == (OS_MEM *)0) {                   /* Is 'pmem' a NULL pointer?                          */
   110ac:	e0bffd17 	ldw	r2,-12(fp)
   110b0:	1000041e 	bne	r2,zero,110c4 <OSMemNameSet+0x44>
        *perr = OS_ERR_MEM_INVALID_PMEM;
   110b4:	e0bfff17 	ldw	r2,-4(fp)
   110b8:	00c01804 	movi	r3,96
   110bc:	10c00005 	stb	r3,0(r2)
        return;
   110c0:	00003006 	br	11184 <OSMemNameSet+0x104>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
   110c4:	e0bffe17 	ldw	r2,-8(fp)
   110c8:	1000041e 	bne	r2,zero,110dc <OSMemNameSet+0x5c>
        *perr = OS_ERR_PNAME_NULL;
   110cc:	e0bfff17 	ldw	r2,-4(fp)
   110d0:	00c00304 	movi	r3,12
   110d4:	10c00005 	stb	r3,0(r2)
        return;
   110d8:	00002a06 	br	11184 <OSMemNameSet+0x104>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
   110dc:	008000b4 	movhi	r2,2
   110e0:	10b48d04 	addi	r2,r2,-11724
   110e4:	10800003 	ldbu	r2,0(r2)
   110e8:	10803fcc 	andi	r2,r2,255
   110ec:	10000426 	beq	r2,zero,11100 <OSMemNameSet+0x80>
        *perr = OS_ERR_NAME_SET_ISR;
   110f0:	e0bfff17 	ldw	r2,-4(fp)
   110f4:	00c00484 	movi	r3,18
   110f8:	10c00005 	stb	r3,0(r2)
        return;
   110fc:	00002106 	br	11184 <OSMemNameSet+0x104>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   11100:	0005303a 	rdctl	r2,status
   11104:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   11108:	e0fffa17 	ldw	r3,-24(fp)
   1110c:	00bfff84 	movi	r2,-2
   11110:	1884703a 	and	r2,r3,r2
   11114:	1001703a 	wrctl	status,r2
  
  return context;
   11118:	e0bffa17 	ldw	r2,-24(fp)
    }
    OS_ENTER_CRITICAL();
   1111c:	e0bff815 	stw	r2,-32(fp)
    len = OS_StrLen(pname);                      /* Can we fit the string in the storage area?         */
   11120:	e13ffe17 	ldw	r4,-8(fp)
   11124:	000edd40 	call	edd4 <OS_StrLen>
   11128:	e0bff905 	stb	r2,-28(fp)
    if (len > (OS_MEM_NAME_SIZE - 1)) {          /* No                                                 */
   1112c:	e0bff903 	ldbu	r2,-28(fp)
   11130:	10800830 	cmpltui	r2,r2,32
   11134:	1000081e 	bne	r2,zero,11158 <OSMemNameSet+0xd8>
   11138:	e0bff817 	ldw	r2,-32(fp)
   1113c:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   11140:	e0bffb17 	ldw	r2,-20(fp)
   11144:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_MEM_NAME_TOO_LONG;
   11148:	e0bfff17 	ldw	r2,-4(fp)
   1114c:	00c018c4 	movi	r3,99
   11150:	10c00005 	stb	r3,0(r2)
        return;
   11154:	00000b06 	br	11184 <OSMemNameSet+0x104>
    }
    (void)OS_StrCopy(pmem->OSMemName, pname);    /* Yes, copy name to the memory partition header      */
   11158:	e0bffd17 	ldw	r2,-12(fp)
   1115c:	10800504 	addi	r2,r2,20
   11160:	1009883a 	mov	r4,r2
   11164:	e17ffe17 	ldw	r5,-8(fp)
   11168:	000ed600 	call	ed60 <OS_StrCopy>
   1116c:	e0bff817 	ldw	r2,-32(fp)
   11170:	e0bffc15 	stw	r2,-16(fp)
   11174:	e0bffc17 	ldw	r2,-16(fp)
   11178:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
   1117c:	e0bfff17 	ldw	r2,-4(fp)
   11180:	10000005 	stb	zero,0(r2)
}
   11184:	e037883a 	mov	sp,fp
   11188:	dfc00117 	ldw	ra,4(sp)
   1118c:	df000017 	ldw	fp,0(sp)
   11190:	dec00204 	addi	sp,sp,8
   11194:	f800283a 	ret

00011198 <OSMemPut>:
*               OS_ERR_MEM_INVALID_PBLK  if you passed a NULL pointer for the block to release.
*********************************************************************************************************
*/

INT8U  OSMemPut (OS_MEM *pmem, void *pblk)
{
   11198:	defff904 	addi	sp,sp,-28
   1119c:	df000615 	stw	fp,24(sp)
   111a0:	df000604 	addi	fp,sp,24
   111a4:	e13ffe15 	stw	r4,-8(fp)
   111a8:	e17fff15 	stw	r5,-4(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   111ac:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pmem == (OS_MEM *)0) {                   /* Must point to a valid memory partition             */
   111b0:	e0bffe17 	ldw	r2,-8(fp)
   111b4:	1000021e 	bne	r2,zero,111c0 <OSMemPut+0x28>
        return (OS_ERR_MEM_INVALID_PMEM);
   111b8:	00801804 	movi	r2,96
   111bc:	00002806 	br	11260 <OSMemPut+0xc8>
    }
    if (pblk == (void *)0) {                     /* Must release a valid block                         */
   111c0:	e0bfff17 	ldw	r2,-4(fp)
   111c4:	1000021e 	bne	r2,zero,111d0 <OSMemPut+0x38>
        return (OS_ERR_MEM_INVALID_PBLK);
   111c8:	008017c4 	movi	r2,95
   111cc:	00002406 	br	11260 <OSMemPut+0xc8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   111d0:	0005303a 	rdctl	r2,status
   111d4:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   111d8:	e0fffb17 	ldw	r3,-20(fp)
   111dc:	00bfff84 	movi	r2,-2
   111e0:	1884703a 	and	r2,r3,r2
   111e4:	1001703a 	wrctl	status,r2
  
  return context;
   111e8:	e0bffb17 	ldw	r2,-20(fp)
    }
#endif
    OS_ENTER_CRITICAL();
   111ec:	e0bffa15 	stw	r2,-24(fp)
    if (pmem->OSMemNFree >= pmem->OSMemNBlks) {  /* Make sure all blocks not already returned          */
   111f0:	e0bffe17 	ldw	r2,-8(fp)
   111f4:	10c00417 	ldw	r3,16(r2)
   111f8:	e0bffe17 	ldw	r2,-8(fp)
   111fc:	10800317 	ldw	r2,12(r2)
   11200:	18800636 	bltu	r3,r2,1121c <OSMemPut+0x84>
   11204:	e0bffa17 	ldw	r2,-24(fp)
   11208:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1120c:	e0bffc17 	ldw	r2,-16(fp)
   11210:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_MEM_FULL);
   11214:	00801784 	movi	r2,94
   11218:	00001106 	br	11260 <OSMemPut+0xc8>
    }
    *(void **)pblk      = pmem->OSMemFreeList;   /* Insert released block into free block list         */
   1121c:	e0bffe17 	ldw	r2,-8(fp)
   11220:	10c00117 	ldw	r3,4(r2)
   11224:	e0bfff17 	ldw	r2,-4(fp)
   11228:	10c00015 	stw	r3,0(r2)
    pmem->OSMemFreeList = pblk;
   1122c:	e0bffe17 	ldw	r2,-8(fp)
   11230:	e0ffff17 	ldw	r3,-4(fp)
   11234:	10c00115 	stw	r3,4(r2)
    pmem->OSMemNFree++;                          /* One more memory block in this partition            */
   11238:	e0bffe17 	ldw	r2,-8(fp)
   1123c:	10800417 	ldw	r2,16(r2)
   11240:	10c00044 	addi	r3,r2,1
   11244:	e0bffe17 	ldw	r2,-8(fp)
   11248:	10c00415 	stw	r3,16(r2)
   1124c:	e0bffa17 	ldw	r2,-24(fp)
   11250:	e0bffd15 	stw	r2,-12(fp)
   11254:	e0bffd17 	ldw	r2,-12(fp)
   11258:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);                        /* Notify caller that memory block was released       */
   1125c:	0005883a 	mov	r2,zero
}
   11260:	e037883a 	mov	sp,fp
   11264:	df000017 	ldw	fp,0(sp)
   11268:	dec00104 	addi	sp,sp,4
   1126c:	f800283a 	ret

00011270 <OSMemQuery>:
*********************************************************************************************************
*/

#if OS_MEM_QUERY_EN > 0
INT8U  OSMemQuery (OS_MEM *pmem, OS_MEM_DATA *p_mem_data)
{
   11270:	defffa04 	addi	sp,sp,-24
   11274:	df000515 	stw	fp,20(sp)
   11278:	df000504 	addi	fp,sp,20
   1127c:	e13ffe15 	stw	r4,-8(fp)
   11280:	e17fff15 	stw	r5,-4(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   11284:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pmem == (OS_MEM *)0) {                   /* Must point to a valid memory partition             */
   11288:	e0bffe17 	ldw	r2,-8(fp)
   1128c:	1000021e 	bne	r2,zero,11298 <OSMemQuery+0x28>
        return (OS_ERR_MEM_INVALID_PMEM);
   11290:	00801804 	movi	r2,96
   11294:	00002c06 	br	11348 <OSMemQuery+0xd8>
    }
    if (p_mem_data == (OS_MEM_DATA *)0) {        /* Must release a valid storage area for the data     */
   11298:	e0bfff17 	ldw	r2,-4(fp)
   1129c:	1000021e 	bne	r2,zero,112a8 <OSMemQuery+0x38>
        return (OS_ERR_MEM_INVALID_PDATA);
   112a0:	00801844 	movi	r2,97
   112a4:	00002806 	br	11348 <OSMemQuery+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   112a8:	0005303a 	rdctl	r2,status
   112ac:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   112b0:	e0fffc17 	ldw	r3,-16(fp)
   112b4:	00bfff84 	movi	r2,-2
   112b8:	1884703a 	and	r2,r3,r2
   112bc:	1001703a 	wrctl	status,r2
  
  return context;
   112c0:	e0bffc17 	ldw	r2,-16(fp)
    }
#endif
    OS_ENTER_CRITICAL();
   112c4:	e0bffb15 	stw	r2,-20(fp)
    p_mem_data->OSAddr     = pmem->OSMemAddr;
   112c8:	e0bffe17 	ldw	r2,-8(fp)
   112cc:	10c00017 	ldw	r3,0(r2)
   112d0:	e0bfff17 	ldw	r2,-4(fp)
   112d4:	10c00015 	stw	r3,0(r2)
    p_mem_data->OSFreeList = pmem->OSMemFreeList;
   112d8:	e0bffe17 	ldw	r2,-8(fp)
   112dc:	10c00117 	ldw	r3,4(r2)
   112e0:	e0bfff17 	ldw	r2,-4(fp)
   112e4:	10c00115 	stw	r3,4(r2)
    p_mem_data->OSBlkSize  = pmem->OSMemBlkSize;
   112e8:	e0bffe17 	ldw	r2,-8(fp)
   112ec:	10c00217 	ldw	r3,8(r2)
   112f0:	e0bfff17 	ldw	r2,-4(fp)
   112f4:	10c00215 	stw	r3,8(r2)
    p_mem_data->OSNBlks    = pmem->OSMemNBlks;
   112f8:	e0bffe17 	ldw	r2,-8(fp)
   112fc:	10c00317 	ldw	r3,12(r2)
   11300:	e0bfff17 	ldw	r2,-4(fp)
   11304:	10c00315 	stw	r3,12(r2)
    p_mem_data->OSNFree    = pmem->OSMemNFree;
   11308:	e0bffe17 	ldw	r2,-8(fp)
   1130c:	10c00417 	ldw	r3,16(r2)
   11310:	e0bfff17 	ldw	r2,-4(fp)
   11314:	10c00415 	stw	r3,16(r2)
   11318:	e0bffb17 	ldw	r2,-20(fp)
   1131c:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   11320:	e0bffd17 	ldw	r2,-12(fp)
   11324:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    p_mem_data->OSNUsed    = p_mem_data->OSNBlks - p_mem_data->OSNFree;
   11328:	e0bfff17 	ldw	r2,-4(fp)
   1132c:	10c00317 	ldw	r3,12(r2)
   11330:	e0bfff17 	ldw	r2,-4(fp)
   11334:	10800417 	ldw	r2,16(r2)
   11338:	1887c83a 	sub	r3,r3,r2
   1133c:	e0bfff17 	ldw	r2,-4(fp)
   11340:	10c00515 	stw	r3,20(r2)
    return (OS_ERR_NONE);
   11344:	0005883a 	mov	r2,zero
}
   11348:	e037883a 	mov	sp,fp
   1134c:	df000017 	ldw	fp,0(sp)
   11350:	dec00104 	addi	sp,sp,4
   11354:	f800283a 	ret

00011358 <OS_MemInit>:
* Note(s)    : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

void  OS_MemInit (void)
{
   11358:	defffc04 	addi	sp,sp,-16
   1135c:	dfc00315 	stw	ra,12(sp)
   11360:	df000215 	stw	fp,8(sp)
   11364:	df000204 	addi	fp,sp,8
#if OS_MAX_MEM_PART >= 2
    OS_MEM  *pmem;
    INT16U   i;


    OS_MemClr((INT8U *)&OSMemTbl[0], sizeof(OSMemTbl));   /* Clear the memory partition table          */
   11368:	010000b4 	movhi	r4,2
   1136c:	21158704 	addi	r4,r4,22044
   11370:	01430c04 	movi	r5,3120
   11374:	000eb700 	call	eb70 <OS_MemClr>
    pmem = &OSMemTbl[0];                                  /* Point to memory control block (MCB)       */
   11378:	008000b4 	movhi	r2,2
   1137c:	10958704 	addi	r2,r2,22044
   11380:	e0bffe15 	stw	r2,-8(fp)
    for (i = 0; i < (OS_MAX_MEM_PART - 1); i++) {         /* Init. list of free memory partitions      */
   11384:	e03fff0d 	sth	zero,-4(fp)
   11388:	00001306 	br	113d8 <OS_MemInit+0x80>
        pmem->OSMemFreeList = (void *)&OSMemTbl[i+1];     /* Chain list of free partitions             */
   1138c:	e0bfff0b 	ldhu	r2,-4(fp)
   11390:	10800044 	addi	r2,r2,1
   11394:	10c00d24 	muli	r3,r2,52
   11398:	008000b4 	movhi	r2,2
   1139c:	10958704 	addi	r2,r2,22044
   113a0:	1887883a 	add	r3,r3,r2
   113a4:	e0bffe17 	ldw	r2,-8(fp)
   113a8:	10c00115 	stw	r3,4(r2)
#if OS_MEM_NAME_SIZE > 1
        pmem->OSMemName[0]  = '?';                        /* Unknown name                              */
   113ac:	e0bffe17 	ldw	r2,-8(fp)
   113b0:	00c00fc4 	movi	r3,63
   113b4:	10c00505 	stb	r3,20(r2)
        pmem->OSMemName[1]  = OS_ASCII_NUL;
   113b8:	e0bffe17 	ldw	r2,-8(fp)
   113bc:	10000545 	stb	zero,21(r2)
#endif
        pmem++;
   113c0:	e0bffe17 	ldw	r2,-8(fp)
   113c4:	10800d04 	addi	r2,r2,52
   113c8:	e0bffe15 	stw	r2,-8(fp)
    INT16U   i;


    OS_MemClr((INT8U *)&OSMemTbl[0], sizeof(OSMemTbl));   /* Clear the memory partition table          */
    pmem = &OSMemTbl[0];                                  /* Point to memory control block (MCB)       */
    for (i = 0; i < (OS_MAX_MEM_PART - 1); i++) {         /* Init. list of free memory partitions      */
   113cc:	e0bfff0b 	ldhu	r2,-4(fp)
   113d0:	10800044 	addi	r2,r2,1
   113d4:	e0bfff0d 	sth	r2,-4(fp)
   113d8:	e0bfff0b 	ldhu	r2,-4(fp)
   113dc:	10800ef0 	cmpltui	r2,r2,59
   113e0:	103fea1e 	bne	r2,zero,1138c <__alt_mem_Flash_flash_data+0xf401138c>
        pmem->OSMemName[0]  = '?';                        /* Unknown name                              */
        pmem->OSMemName[1]  = OS_ASCII_NUL;
#endif
        pmem++;
    }
    pmem->OSMemFreeList = (void *)0;                      /* Initialize last node                      */
   113e4:	e0bffe17 	ldw	r2,-8(fp)
   113e8:	10000115 	stw	zero,4(r2)
#if OS_MEM_NAME_SIZE > 1
    pmem->OSMemName[0]  = '?';                            /* Unknown name                              */
   113ec:	e0bffe17 	ldw	r2,-8(fp)
   113f0:	00c00fc4 	movi	r3,63
   113f4:	10c00505 	stb	r3,20(r2)
    pmem->OSMemName[1]  = OS_ASCII_NUL;
   113f8:	e0bffe17 	ldw	r2,-8(fp)
   113fc:	10000545 	stb	zero,21(r2)
#endif

    OSMemFreeList       = &OSMemTbl[0];                   /* Point to beginning of free list           */
   11400:	008000b4 	movhi	r2,2
   11404:	10b48804 	addi	r2,r2,-11744
   11408:	00c000b4 	movhi	r3,2
   1140c:	18d58704 	addi	r3,r3,22044
   11410:	10c00015 	stw	r3,0(r2)
#endif
}
   11414:	e037883a 	mov	sp,fp
   11418:	dfc00117 	ldw	ra,4(sp)
   1141c:	df000017 	ldw	fp,0(sp)
   11420:	dec00204 	addi	sp,sp,8
   11424:	f800283a 	ret

00011428 <OSQAccept>:
*********************************************************************************************************
*/

#if OS_Q_ACCEPT_EN > 0
void  *OSQAccept (OS_EVENT *pevent, INT8U *perr)
{
   11428:	defff804 	addi	sp,sp,-32
   1142c:	df000715 	stw	fp,28(sp)
   11430:	df000704 	addi	fp,sp,28
   11434:	e13ffe15 	stw	r4,-8(fp)
   11438:	e17fff15 	stw	r5,-4(fp)
    void      *pmsg;
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   1143c:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
   11440:	e0bfff17 	ldw	r2,-4(fp)
   11444:	1000021e 	bne	r2,zero,11450 <OSQAccept+0x28>
        return ((void *)0);
   11448:	0005883a 	mov	r2,zero
   1144c:	00004206 	br	11558 <OSQAccept+0x130>
    }
    if (pevent == (OS_EVENT *)0) {               /* Validate 'pevent'                                  */
   11450:	e0bffe17 	ldw	r2,-8(fp)
   11454:	1000051e 	bne	r2,zero,1146c <OSQAccept+0x44>
        *perr = OS_ERR_PEVENT_NULL;
   11458:	e0bfff17 	ldw	r2,-4(fp)
   1145c:	00c00104 	movi	r3,4
   11460:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
   11464:	0005883a 	mov	r2,zero
   11468:	00003b06 	br	11558 <OSQAccept+0x130>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {/* Validate event block type                          */
   1146c:	e0bffe17 	ldw	r2,-8(fp)
   11470:	10800003 	ldbu	r2,0(r2)
   11474:	10803fcc 	andi	r2,r2,255
   11478:	108000a0 	cmpeqi	r2,r2,2
   1147c:	1000051e 	bne	r2,zero,11494 <OSQAccept+0x6c>
        *perr = OS_ERR_EVENT_TYPE;
   11480:	e0bfff17 	ldw	r2,-4(fp)
   11484:	00c00044 	movi	r3,1
   11488:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
   1148c:	0005883a 	mov	r2,zero
   11490:	00003106 	br	11558 <OSQAccept+0x130>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   11494:	0005303a 	rdctl	r2,status
   11498:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1149c:	e0fffc17 	ldw	r3,-16(fp)
   114a0:	00bfff84 	movi	r2,-2
   114a4:	1884703a 	and	r2,r3,r2
   114a8:	1001703a 	wrctl	status,r2
  
  return context;
   114ac:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
   114b0:	e0bffa15 	stw	r2,-24(fp)
    pq = (OS_Q *)pevent->OSEventPtr;             /* Point at queue control block                       */
   114b4:	e0bffe17 	ldw	r2,-8(fp)
   114b8:	10800117 	ldw	r2,4(r2)
   114bc:	e0bffb15 	stw	r2,-20(fp)
    if (pq->OSQEntries > 0) {                    /* See if any messages in the queue                   */
   114c0:	e0bffb17 	ldw	r2,-20(fp)
   114c4:	1080058b 	ldhu	r2,22(r2)
   114c8:	10bfffcc 	andi	r2,r2,65535
   114cc:	10001926 	beq	r2,zero,11534 <OSQAccept+0x10c>
        pmsg = *pq->OSQOut++;                    /* Yes, extract oldest message from the queue         */
   114d0:	e0bffb17 	ldw	r2,-20(fp)
   114d4:	10800417 	ldw	r2,16(r2)
   114d8:	11000104 	addi	r4,r2,4
   114dc:	e0fffb17 	ldw	r3,-20(fp)
   114e0:	19000415 	stw	r4,16(r3)
   114e4:	10800017 	ldw	r2,0(r2)
   114e8:	e0bff915 	stw	r2,-28(fp)
        pq->OSQEntries--;                        /* Update the number of entries in the queue          */
   114ec:	e0bffb17 	ldw	r2,-20(fp)
   114f0:	1080058b 	ldhu	r2,22(r2)
   114f4:	10bfffc4 	addi	r2,r2,-1
   114f8:	1007883a 	mov	r3,r2
   114fc:	e0bffb17 	ldw	r2,-20(fp)
   11500:	10c0058d 	sth	r3,22(r2)
        if (pq->OSQOut == pq->OSQEnd) {          /* Wrap OUT pointer if we are at the end of the queue */
   11504:	e0bffb17 	ldw	r2,-20(fp)
   11508:	10c00417 	ldw	r3,16(r2)
   1150c:	e0bffb17 	ldw	r2,-20(fp)
   11510:	10800217 	ldw	r2,8(r2)
   11514:	1880041e 	bne	r3,r2,11528 <OSQAccept+0x100>
            pq->OSQOut = pq->OSQStart;
   11518:	e0bffb17 	ldw	r2,-20(fp)
   1151c:	10c00117 	ldw	r3,4(r2)
   11520:	e0bffb17 	ldw	r2,-20(fp)
   11524:	10c00415 	stw	r3,16(r2)
        }
        *perr = OS_ERR_NONE;
   11528:	e0bfff17 	ldw	r2,-4(fp)
   1152c:	10000005 	stb	zero,0(r2)
   11530:	00000406 	br	11544 <OSQAccept+0x11c>
    } else {
        *perr = OS_ERR_Q_EMPTY;
   11534:	e0bfff17 	ldw	r2,-4(fp)
   11538:	00c007c4 	movi	r3,31
   1153c:	10c00005 	stb	r3,0(r2)
        pmsg  = (void *)0;                       /* Queue is empty                                     */
   11540:	e03ff915 	stw	zero,-28(fp)
   11544:	e0bffa17 	ldw	r2,-24(fp)
   11548:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1154c:	e0bffd17 	ldw	r2,-12(fp)
   11550:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (pmsg);                               /* Return message received (or NULL)                  */
   11554:	e0bff917 	ldw	r2,-28(fp)
}
   11558:	e037883a 	mov	sp,fp
   1155c:	df000017 	ldw	fp,0(sp)
   11560:	dec00104 	addi	sp,sp,4
   11564:	f800283a 	ret

00011568 <OSQCreate>:
*              == (OS_EVENT *)0  if no event control blocks were available or an error was detected
*********************************************************************************************************
*/

OS_EVENT  *OSQCreate (void **start, INT16U size)
{
   11568:	defff404 	addi	sp,sp,-48
   1156c:	dfc00b15 	stw	ra,44(sp)
   11570:	df000a15 	stw	fp,40(sp)
   11574:	df000a04 	addi	fp,sp,40
   11578:	e13ffe15 	stw	r4,-8(fp)
   1157c:	2805883a 	mov	r2,r5
   11580:	e0bfff0d 	sth	r2,-4(fp)
    OS_EVENT  *pevent;
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   11584:	e03ff715 	stw	zero,-36(fp)
#endif



    if (OSIntNesting > 0) {                      /* See if called from ISR ...                         */
   11588:	008000b4 	movhi	r2,2
   1158c:	10b48d04 	addi	r2,r2,-11724
   11590:	10800003 	ldbu	r2,0(r2)
   11594:	10803fcc 	andi	r2,r2,255
   11598:	10000226 	beq	r2,zero,115a4 <OSQCreate+0x3c>
        return ((OS_EVENT *)0);                  /* ... can't CREATE from an ISR                       */
   1159c:	0005883a 	mov	r2,zero
   115a0:	00006b06 	br	11750 <OSQCreate+0x1e8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   115a4:	0005303a 	rdctl	r2,status
   115a8:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   115ac:	e0fff917 	ldw	r3,-28(fp)
   115b0:	00bfff84 	movi	r2,-2
   115b4:	1884703a 	and	r2,r3,r2
   115b8:	1001703a 	wrctl	status,r2
  
  return context;
   115bc:	e0bff917 	ldw	r2,-28(fp)
    }
    OS_ENTER_CRITICAL();
   115c0:	e0bff715 	stw	r2,-36(fp)
    pevent = OSEventFreeList;                    /* Get next free event control block                  */
   115c4:	008000b4 	movhi	r2,2
   115c8:	10b48c04 	addi	r2,r2,-11728
   115cc:	10800017 	ldw	r2,0(r2)
   115d0:	e0bff615 	stw	r2,-40(fp)
    if (OSEventFreeList != (OS_EVENT *)0) {      /* See if pool of free ECB pool was empty             */
   115d4:	008000b4 	movhi	r2,2
   115d8:	10b48c04 	addi	r2,r2,-11728
   115dc:	10800017 	ldw	r2,0(r2)
   115e0:	10000726 	beq	r2,zero,11600 <OSQCreate+0x98>
        OSEventFreeList = (OS_EVENT *)OSEventFreeList->OSEventPtr;
   115e4:	008000b4 	movhi	r2,2
   115e8:	10b48c04 	addi	r2,r2,-11728
   115ec:	10800017 	ldw	r2,0(r2)
   115f0:	10c00117 	ldw	r3,4(r2)
   115f4:	008000b4 	movhi	r2,2
   115f8:	10b48c04 	addi	r2,r2,-11728
   115fc:	10c00015 	stw	r3,0(r2)
   11600:	e0bff717 	ldw	r2,-36(fp)
   11604:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   11608:	e0bffa17 	ldw	r2,-24(fp)
   1160c:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    if (pevent != (OS_EVENT *)0) {               /* See if we have an event control block              */
   11610:	e0bff617 	ldw	r2,-40(fp)
   11614:	10004d26 	beq	r2,zero,1174c <OSQCreate+0x1e4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   11618:	0005303a 	rdctl	r2,status
   1161c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   11620:	e0fffb17 	ldw	r3,-20(fp)
   11624:	00bfff84 	movi	r2,-2
   11628:	1884703a 	and	r2,r3,r2
   1162c:	1001703a 	wrctl	status,r2
  
  return context;
   11630:	e0bffb17 	ldw	r2,-20(fp)
        OS_ENTER_CRITICAL();
   11634:	e0bff715 	stw	r2,-36(fp)
        pq = OSQFreeList;                        /* Get a free queue control block                     */
   11638:	008000b4 	movhi	r2,2
   1163c:	10b48a04 	addi	r2,r2,-11736
   11640:	10800017 	ldw	r2,0(r2)
   11644:	e0bff815 	stw	r2,-32(fp)
        if (pq != (OS_Q *)0) {                   /* Were we able to get a queue control block ?        */
   11648:	e0bff817 	ldw	r2,-32(fp)
   1164c:	10003126 	beq	r2,zero,11714 <OSQCreate+0x1ac>
            OSQFreeList            = OSQFreeList->OSQPtr; /* Yes, Adjust free list pointer to next free*/
   11650:	008000b4 	movhi	r2,2
   11654:	10b48a04 	addi	r2,r2,-11736
   11658:	10800017 	ldw	r2,0(r2)
   1165c:	10c00017 	ldw	r3,0(r2)
   11660:	008000b4 	movhi	r2,2
   11664:	10b48a04 	addi	r2,r2,-11736
   11668:	10c00015 	stw	r3,0(r2)
   1166c:	e0bff717 	ldw	r2,-36(fp)
   11670:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   11674:	e0bffc17 	ldw	r2,-16(fp)
   11678:	1001703a 	wrctl	status,r2
            OS_EXIT_CRITICAL();
            pq->OSQStart           = start;               /*      Initialize the queue                 */
   1167c:	e0bff817 	ldw	r2,-32(fp)
   11680:	e0fffe17 	ldw	r3,-8(fp)
   11684:	10c00115 	stw	r3,4(r2)
            pq->OSQEnd             = &start[size];
   11688:	e0bfff0b 	ldhu	r2,-4(fp)
   1168c:	1085883a 	add	r2,r2,r2
   11690:	1085883a 	add	r2,r2,r2
   11694:	1007883a 	mov	r3,r2
   11698:	e0bffe17 	ldw	r2,-8(fp)
   1169c:	10c7883a 	add	r3,r2,r3
   116a0:	e0bff817 	ldw	r2,-32(fp)
   116a4:	10c00215 	stw	r3,8(r2)
            pq->OSQIn              = start;
   116a8:	e0bff817 	ldw	r2,-32(fp)
   116ac:	e0fffe17 	ldw	r3,-8(fp)
   116b0:	10c00315 	stw	r3,12(r2)
            pq->OSQOut             = start;
   116b4:	e0bff817 	ldw	r2,-32(fp)
   116b8:	e0fffe17 	ldw	r3,-8(fp)
   116bc:	10c00415 	stw	r3,16(r2)
            pq->OSQSize            = size;
   116c0:	e0bff817 	ldw	r2,-32(fp)
   116c4:	e0ffff0b 	ldhu	r3,-4(fp)
   116c8:	10c0050d 	sth	r3,20(r2)
            pq->OSQEntries         = 0;
   116cc:	e0bff817 	ldw	r2,-32(fp)
   116d0:	1000058d 	sth	zero,22(r2)
            pevent->OSEventType    = OS_EVENT_TYPE_Q;
   116d4:	e0bff617 	ldw	r2,-40(fp)
   116d8:	00c00084 	movi	r3,2
   116dc:	10c00005 	stb	r3,0(r2)
            pevent->OSEventCnt     = 0;
   116e0:	e0bff617 	ldw	r2,-40(fp)
   116e4:	1000020d 	sth	zero,8(r2)
            pevent->OSEventPtr     = pq;
   116e8:	e0bff617 	ldw	r2,-40(fp)
   116ec:	e0fff817 	ldw	r3,-32(fp)
   116f0:	10c00115 	stw	r3,4(r2)
#if OS_EVENT_NAME_SIZE > 1
            pevent->OSEventName[0] = '?';                  /* Unknown name                             */
   116f4:	e0bff617 	ldw	r2,-40(fp)
   116f8:	00c00fc4 	movi	r3,63
   116fc:	10c00385 	stb	r3,14(r2)
            pevent->OSEventName[1] = OS_ASCII_NUL;
   11700:	e0bff617 	ldw	r2,-40(fp)
   11704:	100003c5 	stb	zero,15(r2)
#endif
            OS_EventWaitListInit(pevent);                 /*      Initalize the wait list              */
   11708:	e13ff617 	ldw	r4,-40(fp)
   1170c:	000e7ac0 	call	e7ac <OS_EventWaitListInit>
   11710:	00000e06 	br	1174c <OSQCreate+0x1e4>
        } else {
            pevent->OSEventPtr = (void *)OSEventFreeList; /* No,  Return event control block on error  */
   11714:	008000b4 	movhi	r2,2
   11718:	10b48c04 	addi	r2,r2,-11728
   1171c:	10c00017 	ldw	r3,0(r2)
   11720:	e0bff617 	ldw	r2,-40(fp)
   11724:	10c00115 	stw	r3,4(r2)
            OSEventFreeList    = pevent;
   11728:	008000b4 	movhi	r2,2
   1172c:	10b48c04 	addi	r2,r2,-11728
   11730:	e0fff617 	ldw	r3,-40(fp)
   11734:	10c00015 	stw	r3,0(r2)
   11738:	e0bff717 	ldw	r2,-36(fp)
   1173c:	e0bffd15 	stw	r2,-12(fp)
   11740:	e0bffd17 	ldw	r2,-12(fp)
   11744:	1001703a 	wrctl	status,r2
            OS_EXIT_CRITICAL();
            pevent = (OS_EVENT *)0;
   11748:	e03ff615 	stw	zero,-40(fp)
        }
    }
    return (pevent);
   1174c:	e0bff617 	ldw	r2,-40(fp)
}
   11750:	e037883a 	mov	sp,fp
   11754:	dfc00117 	ldw	ra,4(sp)
   11758:	df000017 	ldw	fp,0(sp)
   1175c:	dec00204 	addi	sp,sp,8
   11760:	f800283a 	ret

00011764 <OSQDel>:
*********************************************************************************************************
*/

#if OS_Q_DEL_EN > 0
OS_EVENT  *OSQDel (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
   11764:	defff204 	addi	sp,sp,-56
   11768:	dfc00d15 	stw	ra,52(sp)
   1176c:	df000c15 	stw	fp,48(sp)
   11770:	df000c04 	addi	fp,sp,48
   11774:	e13ffd15 	stw	r4,-12(fp)
   11778:	2805883a 	mov	r2,r5
   1177c:	e1bfff15 	stw	r6,-4(fp)
   11780:	e0bffe05 	stb	r2,-8(fp)
    BOOLEAN    tasks_waiting;
    OS_EVENT  *pevent_return;
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
   11784:	e03ff615 	stw	zero,-40(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
   11788:	e0bfff17 	ldw	r2,-4(fp)
   1178c:	1000021e 	bne	r2,zero,11798 <OSQDel+0x34>
        return (pevent);
   11790:	e0bffd17 	ldw	r2,-12(fp)
   11794:	0000a006 	br	11a18 <OSQDel+0x2b4>
    }
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
   11798:	e0bffd17 	ldw	r2,-12(fp)
   1179c:	1000051e 	bne	r2,zero,117b4 <OSQDel+0x50>
        *perr = OS_ERR_PEVENT_NULL;
   117a0:	e0bfff17 	ldw	r2,-4(fp)
   117a4:	00c00104 	movi	r3,4
   117a8:	10c00005 	stb	r3,0(r2)
        return (pevent);
   117ac:	e0bffd17 	ldw	r2,-12(fp)
   117b0:	00009906 	br	11a18 <OSQDel+0x2b4>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {          /* Validate event block type                */
   117b4:	e0bffd17 	ldw	r2,-12(fp)
   117b8:	10800003 	ldbu	r2,0(r2)
   117bc:	10803fcc 	andi	r2,r2,255
   117c0:	108000a0 	cmpeqi	r2,r2,2
   117c4:	1000051e 	bne	r2,zero,117dc <OSQDel+0x78>
        *perr = OS_ERR_EVENT_TYPE;
   117c8:	e0bfff17 	ldw	r2,-4(fp)
   117cc:	00c00044 	movi	r3,1
   117d0:	10c00005 	stb	r3,0(r2)
        return (pevent);
   117d4:	e0bffd17 	ldw	r2,-12(fp)
   117d8:	00008f06 	br	11a18 <OSQDel+0x2b4>
    }
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
   117dc:	008000b4 	movhi	r2,2
   117e0:	10b48d04 	addi	r2,r2,-11724
   117e4:	10800003 	ldbu	r2,0(r2)
   117e8:	10803fcc 	andi	r2,r2,255
   117ec:	10000526 	beq	r2,zero,11804 <OSQDel+0xa0>
        *perr = OS_ERR_DEL_ISR;                            /* ... can't DELETE from an ISR             */
   117f0:	e0bfff17 	ldw	r2,-4(fp)
   117f4:	00c003c4 	movi	r3,15
   117f8:	10c00005 	stb	r3,0(r2)
        return (pevent);
   117fc:	e0bffd17 	ldw	r2,-12(fp)
   11800:	00008506 	br	11a18 <OSQDel+0x2b4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   11804:	0005303a 	rdctl	r2,status
   11808:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1180c:	e0fff817 	ldw	r3,-32(fp)
   11810:	00bfff84 	movi	r2,-2
   11814:	1884703a 	and	r2,r3,r2
   11818:	1001703a 	wrctl	status,r2
  
  return context;
   1181c:	e0bff817 	ldw	r2,-32(fp)
    }
    OS_ENTER_CRITICAL();
   11820:	e0bff615 	stw	r2,-40(fp)
    if (pevent->OSEventGrp != 0) {                         /* See if any tasks waiting on queue        */
   11824:	e0bffd17 	ldw	r2,-12(fp)
   11828:	10800283 	ldbu	r2,10(r2)
   1182c:	10803fcc 	andi	r2,r2,255
   11830:	10000326 	beq	r2,zero,11840 <OSQDel+0xdc>
        tasks_waiting = OS_TRUE;                           /* Yes                                      */
   11834:	00800044 	movi	r2,1
   11838:	e0bff405 	stb	r2,-48(fp)
   1183c:	00000106 	br	11844 <OSQDel+0xe0>
    } else {
        tasks_waiting = OS_FALSE;                          /* No                                       */
   11840:	e03ff405 	stb	zero,-48(fp)
    }
    switch (opt) {
   11844:	e0bffe03 	ldbu	r2,-8(fp)
   11848:	10000326 	beq	r2,zero,11858 <OSQDel+0xf4>
   1184c:	10800060 	cmpeqi	r2,r2,1
   11850:	1000381e 	bne	r2,zero,11934 <OSQDel+0x1d0>
   11854:	00006506 	br	119ec <OSQDel+0x288>
        case OS_DEL_NO_PEND:                               /* Delete queue only if no task waiting     */
             if (tasks_waiting == OS_FALSE) {
   11858:	e0bff403 	ldbu	r2,-48(fp)
   1185c:	1000261e 	bne	r2,zero,118f8 <OSQDel+0x194>
#if OS_EVENT_NAME_SIZE > 1
                 pevent->OSEventName[0] = '?';             /* Unknown name                             */
   11860:	e0bffd17 	ldw	r2,-12(fp)
   11864:	00c00fc4 	movi	r3,63
   11868:	10c00385 	stb	r3,14(r2)
                 pevent->OSEventName[1] = OS_ASCII_NUL;
   1186c:	e0bffd17 	ldw	r2,-12(fp)
   11870:	100003c5 	stb	zero,15(r2)
#endif
                 pq                     = (OS_Q *)pevent->OSEventPtr;  /* Return OS_Q to free list     */
   11874:	e0bffd17 	ldw	r2,-12(fp)
   11878:	10800117 	ldw	r2,4(r2)
   1187c:	e0bff715 	stw	r2,-36(fp)
                 pq->OSQPtr             = OSQFreeList;
   11880:	008000b4 	movhi	r2,2
   11884:	10b48a04 	addi	r2,r2,-11736
   11888:	10c00017 	ldw	r3,0(r2)
   1188c:	e0bff717 	ldw	r2,-36(fp)
   11890:	10c00015 	stw	r3,0(r2)
                 OSQFreeList            = pq;
   11894:	008000b4 	movhi	r2,2
   11898:	10b48a04 	addi	r2,r2,-11736
   1189c:	e0fff717 	ldw	r3,-36(fp)
   118a0:	10c00015 	stw	r3,0(r2)
                 pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
   118a4:	e0bffd17 	ldw	r2,-12(fp)
   118a8:	10000005 	stb	zero,0(r2)
                 pevent->OSEventPtr     = OSEventFreeList; /* Return Event Control Block to free list  */
   118ac:	008000b4 	movhi	r2,2
   118b0:	10b48c04 	addi	r2,r2,-11728
   118b4:	10c00017 	ldw	r3,0(r2)
   118b8:	e0bffd17 	ldw	r2,-12(fp)
   118bc:	10c00115 	stw	r3,4(r2)
                 pevent->OSEventCnt     = 0;
   118c0:	e0bffd17 	ldw	r2,-12(fp)
   118c4:	1000020d 	sth	zero,8(r2)
                 OSEventFreeList        = pevent;          /* Get next free event control block        */
   118c8:	008000b4 	movhi	r2,2
   118cc:	10b48c04 	addi	r2,r2,-11728
   118d0:	e0fffd17 	ldw	r3,-12(fp)
   118d4:	10c00015 	stw	r3,0(r2)
   118d8:	e0bff617 	ldw	r2,-40(fp)
   118dc:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   118e0:	e0bff917 	ldw	r2,-28(fp)
   118e4:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_NONE;
   118e8:	e0bfff17 	ldw	r2,-4(fp)
   118ec:	10000005 	stb	zero,0(r2)
                 pevent_return          = (OS_EVENT *)0;   /* Queue has been deleted                   */
   118f0:	e03ff515 	stw	zero,-44(fp)
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_TASK_WAITING;
                 pevent_return          = pevent;
             }
             break;
   118f4:	00004706 	br	11a14 <OSQDel+0x2b0>
   118f8:	e0bff617 	ldw	r2,-40(fp)
   118fc:	e0bffa15 	stw	r2,-24(fp)
   11900:	e0bffa17 	ldw	r2,-24(fp)
   11904:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_NONE;
                 pevent_return          = (OS_EVENT *)0;   /* Queue has been deleted                   */
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_TASK_WAITING;
   11908:	e0bfff17 	ldw	r2,-4(fp)
   1190c:	00c01244 	movi	r3,73
   11910:	10c00005 	stb	r3,0(r2)
                 pevent_return          = pevent;
   11914:	e0bffd17 	ldw	r2,-12(fp)
   11918:	e0bff515 	stw	r2,-44(fp)
             }
             break;
   1191c:	00003d06 	br	11a14 <OSQDel+0x2b0>

        case OS_DEL_ALWAYS:                                /* Always delete the queue                  */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for queue        */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_OK);
   11920:	e13ffd17 	ldw	r4,-12(fp)
   11924:	000b883a 	mov	r5,zero
   11928:	01800104 	movi	r6,4
   1192c:	000f883a 	mov	r7,zero
   11930:	000e20c0 	call	e20c <OS_EventTaskRdy>
                 pevent_return          = pevent;
             }
             break;

        case OS_DEL_ALWAYS:                                /* Always delete the queue                  */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for queue        */
   11934:	e0bffd17 	ldw	r2,-12(fp)
   11938:	10800283 	ldbu	r2,10(r2)
   1193c:	10803fcc 	andi	r2,r2,255
   11940:	103ff71e 	bne	r2,zero,11920 <__alt_mem_Flash_flash_data+0xf4011920>
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_OK);
             }
#if OS_EVENT_NAME_SIZE > 1
             pevent->OSEventName[0] = '?';                 /* Unknown name                             */
   11944:	e0bffd17 	ldw	r2,-12(fp)
   11948:	00c00fc4 	movi	r3,63
   1194c:	10c00385 	stb	r3,14(r2)
             pevent->OSEventName[1] = OS_ASCII_NUL;
   11950:	e0bffd17 	ldw	r2,-12(fp)
   11954:	100003c5 	stb	zero,15(r2)
#endif
             pq                     = (OS_Q *)pevent->OSEventPtr;   /* Return OS_Q to free list        */
   11958:	e0bffd17 	ldw	r2,-12(fp)
   1195c:	10800117 	ldw	r2,4(r2)
   11960:	e0bff715 	stw	r2,-36(fp)
             pq->OSQPtr             = OSQFreeList;
   11964:	008000b4 	movhi	r2,2
   11968:	10b48a04 	addi	r2,r2,-11736
   1196c:	10c00017 	ldw	r3,0(r2)
   11970:	e0bff717 	ldw	r2,-36(fp)
   11974:	10c00015 	stw	r3,0(r2)
             OSQFreeList            = pq;
   11978:	008000b4 	movhi	r2,2
   1197c:	10b48a04 	addi	r2,r2,-11736
   11980:	e0fff717 	ldw	r3,-36(fp)
   11984:	10c00015 	stw	r3,0(r2)
             pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
   11988:	e0bffd17 	ldw	r2,-12(fp)
   1198c:	10000005 	stb	zero,0(r2)
             pevent->OSEventPtr     = OSEventFreeList;     /* Return Event Control Block to free list  */
   11990:	008000b4 	movhi	r2,2
   11994:	10b48c04 	addi	r2,r2,-11728
   11998:	10c00017 	ldw	r3,0(r2)
   1199c:	e0bffd17 	ldw	r2,-12(fp)
   119a0:	10c00115 	stw	r3,4(r2)
             pevent->OSEventCnt     = 0;
   119a4:	e0bffd17 	ldw	r2,-12(fp)
   119a8:	1000020d 	sth	zero,8(r2)
             OSEventFreeList        = pevent;              /* Get next free event control block        */
   119ac:	008000b4 	movhi	r2,2
   119b0:	10b48c04 	addi	r2,r2,-11728
   119b4:	e0fffd17 	ldw	r3,-12(fp)
   119b8:	10c00015 	stw	r3,0(r2)
   119bc:	e0bff617 	ldw	r2,-40(fp)
   119c0:	e0bffb15 	stw	r2,-20(fp)
   119c4:	e0bffb17 	ldw	r2,-20(fp)
   119c8:	1001703a 	wrctl	status,r2
             OS_EXIT_CRITICAL();
             if (tasks_waiting == OS_TRUE) {               /* Reschedule only if task(s) were waiting  */
   119cc:	e0bff403 	ldbu	r2,-48(fp)
   119d0:	10800058 	cmpnei	r2,r2,1
   119d4:	1000011e 	bne	r2,zero,119dc <OSQDel+0x278>
                 OS_Sched();                               /* Find highest priority task ready to run  */
   119d8:	000ec240 	call	ec24 <OS_Sched>
             }
             *perr                  = OS_ERR_NONE;
   119dc:	e0bfff17 	ldw	r2,-4(fp)
   119e0:	10000005 	stb	zero,0(r2)
             pevent_return          = (OS_EVENT *)0;       /* Queue has been deleted                   */
   119e4:	e03ff515 	stw	zero,-44(fp)
             break;
   119e8:	00000a06 	br	11a14 <OSQDel+0x2b0>
   119ec:	e0bff617 	ldw	r2,-40(fp)
   119f0:	e0bffc15 	stw	r2,-16(fp)
   119f4:	e0bffc17 	ldw	r2,-16(fp)
   119f8:	1001703a 	wrctl	status,r2

        default:
             OS_EXIT_CRITICAL();
             *perr                  = OS_ERR_INVALID_OPT;
   119fc:	e0bfff17 	ldw	r2,-4(fp)
   11a00:	00c001c4 	movi	r3,7
   11a04:	10c00005 	stb	r3,0(r2)
             pevent_return          = pevent;
   11a08:	e0bffd17 	ldw	r2,-12(fp)
   11a0c:	e0bff515 	stw	r2,-44(fp)
             break;
   11a10:	0001883a 	nop
    }
    return (pevent_return);
   11a14:	e0bff517 	ldw	r2,-44(fp)
}
   11a18:	e037883a 	mov	sp,fp
   11a1c:	dfc00117 	ldw	ra,4(sp)
   11a20:	df000017 	ldw	fp,0(sp)
   11a24:	dec00204 	addi	sp,sp,8
   11a28:	f800283a 	ret

00011a2c <OSQFlush>:
*********************************************************************************************************
*/

#if OS_Q_FLUSH_EN > 0
INT8U  OSQFlush (OS_EVENT *pevent)
{
   11a2c:	defffa04 	addi	sp,sp,-24
   11a30:	df000515 	stw	fp,20(sp)
   11a34:	df000504 	addi	fp,sp,20
   11a38:	e13fff15 	stw	r4,-4(fp)
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   11a3c:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
   11a40:	e0bfff17 	ldw	r2,-4(fp)
   11a44:	1000021e 	bne	r2,zero,11a50 <OSQFlush+0x24>
        return (OS_ERR_PEVENT_NULL);
   11a48:	00800104 	movi	r2,4
   11a4c:	00002106 	br	11ad4 <OSQFlush+0xa8>
    }
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {     /* Validate event block type                     */
   11a50:	e0bfff17 	ldw	r2,-4(fp)
   11a54:	10800003 	ldbu	r2,0(r2)
   11a58:	10803fcc 	andi	r2,r2,255
   11a5c:	108000a0 	cmpeqi	r2,r2,2
   11a60:	1000021e 	bne	r2,zero,11a6c <OSQFlush+0x40>
        return (OS_ERR_EVENT_TYPE);
   11a64:	00800044 	movi	r2,1
   11a68:	00001a06 	br	11ad4 <OSQFlush+0xa8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   11a6c:	0005303a 	rdctl	r2,status
   11a70:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   11a74:	e0fffd17 	ldw	r3,-12(fp)
   11a78:	00bfff84 	movi	r2,-2
   11a7c:	1884703a 	and	r2,r3,r2
   11a80:	1001703a 	wrctl	status,r2
  
  return context;
   11a84:	e0bffd17 	ldw	r2,-12(fp)
    }
#endif
    OS_ENTER_CRITICAL();
   11a88:	e0bffb15 	stw	r2,-20(fp)
    pq             = (OS_Q *)pevent->OSEventPtr;      /* Point to queue storage structure              */
   11a8c:	e0bfff17 	ldw	r2,-4(fp)
   11a90:	10800117 	ldw	r2,4(r2)
   11a94:	e0bffc15 	stw	r2,-16(fp)
    pq->OSQIn      = pq->OSQStart;
   11a98:	e0bffc17 	ldw	r2,-16(fp)
   11a9c:	10c00117 	ldw	r3,4(r2)
   11aa0:	e0bffc17 	ldw	r2,-16(fp)
   11aa4:	10c00315 	stw	r3,12(r2)
    pq->OSQOut     = pq->OSQStart;
   11aa8:	e0bffc17 	ldw	r2,-16(fp)
   11aac:	10c00117 	ldw	r3,4(r2)
   11ab0:	e0bffc17 	ldw	r2,-16(fp)
   11ab4:	10c00415 	stw	r3,16(r2)
    pq->OSQEntries = 0;
   11ab8:	e0bffc17 	ldw	r2,-16(fp)
   11abc:	1000058d 	sth	zero,22(r2)
   11ac0:	e0bffb17 	ldw	r2,-20(fp)
   11ac4:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   11ac8:	e0bffe17 	ldw	r2,-8(fp)
   11acc:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
   11ad0:	0005883a 	mov	r2,zero
}
   11ad4:	e037883a 	mov	sp,fp
   11ad8:	df000017 	ldw	fp,0(sp)
   11adc:	dec00104 	addi	sp,sp,4
   11ae0:	f800283a 	ret

00011ae4 <OSQPend>:
* Note(s)    : As of V2.60, this function allows you to receive NULL pointer messages.
*********************************************************************************************************
*/

void  *OSQPend (OS_EVENT *pevent, INT16U timeout, INT8U *perr)
{
   11ae4:	defff304 	addi	sp,sp,-52
   11ae8:	dfc00c15 	stw	ra,48(sp)
   11aec:	df000b15 	stw	fp,44(sp)
   11af0:	df000b04 	addi	fp,sp,44
   11af4:	e13ffd15 	stw	r4,-12(fp)
   11af8:	2805883a 	mov	r2,r5
   11afc:	e1bfff15 	stw	r6,-4(fp)
   11b00:	e0bffe0d 	sth	r2,-8(fp)
    void      *pmsg;
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   11b04:	e03ff615 	stw	zero,-40(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
   11b08:	e0bfff17 	ldw	r2,-4(fp)
   11b0c:	1000021e 	bne	r2,zero,11b18 <OSQPend+0x34>
        return ((void *)0);
   11b10:	0005883a 	mov	r2,zero
   11b14:	0000ad06 	br	11dcc <OSQPend+0x2e8>
    }
    if (pevent == (OS_EVENT *)0) {               /* Validate 'pevent'                                  */
   11b18:	e0bffd17 	ldw	r2,-12(fp)
   11b1c:	1000051e 	bne	r2,zero,11b34 <OSQPend+0x50>
        *perr = OS_ERR_PEVENT_NULL;
   11b20:	e0bfff17 	ldw	r2,-4(fp)
   11b24:	00c00104 	movi	r3,4
   11b28:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
   11b2c:	0005883a 	mov	r2,zero
   11b30:	0000a606 	br	11dcc <OSQPend+0x2e8>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {/* Validate event block type                          */
   11b34:	e0bffd17 	ldw	r2,-12(fp)
   11b38:	10800003 	ldbu	r2,0(r2)
   11b3c:	10803fcc 	andi	r2,r2,255
   11b40:	108000a0 	cmpeqi	r2,r2,2
   11b44:	1000051e 	bne	r2,zero,11b5c <OSQPend+0x78>
        *perr = OS_ERR_EVENT_TYPE;
   11b48:	e0bfff17 	ldw	r2,-4(fp)
   11b4c:	00c00044 	movi	r3,1
   11b50:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
   11b54:	0005883a 	mov	r2,zero
   11b58:	00009c06 	br	11dcc <OSQPend+0x2e8>
    }
    if (OSIntNesting > 0) {                      /* See if called from ISR ...                         */
   11b5c:	008000b4 	movhi	r2,2
   11b60:	10b48d04 	addi	r2,r2,-11724
   11b64:	10800003 	ldbu	r2,0(r2)
   11b68:	10803fcc 	andi	r2,r2,255
   11b6c:	10000526 	beq	r2,zero,11b84 <OSQPend+0xa0>
        *perr = OS_ERR_PEND_ISR;                 /* ... can't PEND from an ISR                         */
   11b70:	e0bfff17 	ldw	r2,-4(fp)
   11b74:	00c00084 	movi	r3,2
   11b78:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
   11b7c:	0005883a 	mov	r2,zero
   11b80:	00009206 	br	11dcc <OSQPend+0x2e8>
    }
    if (OSLockNesting > 0) {                     /* See if called with scheduler locked ...            */
   11b84:	008000b4 	movhi	r2,2
   11b88:	10b47f04 	addi	r2,r2,-11780
   11b8c:	10800003 	ldbu	r2,0(r2)
   11b90:	10803fcc 	andi	r2,r2,255
   11b94:	10000526 	beq	r2,zero,11bac <OSQPend+0xc8>
        *perr = OS_ERR_PEND_LOCKED;              /* ... can't PEND when locked                         */
   11b98:	e0bfff17 	ldw	r2,-4(fp)
   11b9c:	00c00344 	movi	r3,13
   11ba0:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
   11ba4:	0005883a 	mov	r2,zero
   11ba8:	00008806 	br	11dcc <OSQPend+0x2e8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   11bac:	0005303a 	rdctl	r2,status
   11bb0:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   11bb4:	e0fff817 	ldw	r3,-32(fp)
   11bb8:	00bfff84 	movi	r2,-2
   11bbc:	1884703a 	and	r2,r3,r2
   11bc0:	1001703a 	wrctl	status,r2
  
  return context;
   11bc4:	e0bff817 	ldw	r2,-32(fp)
    }
    OS_ENTER_CRITICAL();
   11bc8:	e0bff615 	stw	r2,-40(fp)
    pq = (OS_Q *)pevent->OSEventPtr;             /* Point at queue control block                       */
   11bcc:	e0bffd17 	ldw	r2,-12(fp)
   11bd0:	10800117 	ldw	r2,4(r2)
   11bd4:	e0bff715 	stw	r2,-36(fp)
    if (pq->OSQEntries > 0) {                    /* See if any messages in the queue                   */
   11bd8:	e0bff717 	ldw	r2,-36(fp)
   11bdc:	1080058b 	ldhu	r2,22(r2)
   11be0:	10bfffcc 	andi	r2,r2,65535
   11be4:	10001e26 	beq	r2,zero,11c60 <OSQPend+0x17c>
        pmsg = *pq->OSQOut++;                    /* Yes, extract oldest message from the queue         */
   11be8:	e0bff717 	ldw	r2,-36(fp)
   11bec:	10800417 	ldw	r2,16(r2)
   11bf0:	11000104 	addi	r4,r2,4
   11bf4:	e0fff717 	ldw	r3,-36(fp)
   11bf8:	19000415 	stw	r4,16(r3)
   11bfc:	10800017 	ldw	r2,0(r2)
   11c00:	e0bff515 	stw	r2,-44(fp)
        pq->OSQEntries--;                        /* Update the number of entries in the queue          */
   11c04:	e0bff717 	ldw	r2,-36(fp)
   11c08:	1080058b 	ldhu	r2,22(r2)
   11c0c:	10bfffc4 	addi	r2,r2,-1
   11c10:	1007883a 	mov	r3,r2
   11c14:	e0bff717 	ldw	r2,-36(fp)
   11c18:	10c0058d 	sth	r3,22(r2)
        if (pq->OSQOut == pq->OSQEnd) {          /* Wrap OUT pointer if we are at the end of the queue */
   11c1c:	e0bff717 	ldw	r2,-36(fp)
   11c20:	10c00417 	ldw	r3,16(r2)
   11c24:	e0bff717 	ldw	r2,-36(fp)
   11c28:	10800217 	ldw	r2,8(r2)
   11c2c:	1880041e 	bne	r3,r2,11c40 <OSQPend+0x15c>
            pq->OSQOut = pq->OSQStart;
   11c30:	e0bff717 	ldw	r2,-36(fp)
   11c34:	10c00117 	ldw	r3,4(r2)
   11c38:	e0bff717 	ldw	r2,-36(fp)
   11c3c:	10c00415 	stw	r3,16(r2)
   11c40:	e0bff617 	ldw	r2,-40(fp)
   11c44:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   11c48:	e0bff917 	ldw	r2,-28(fp)
   11c4c:	1001703a 	wrctl	status,r2
        }
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_NONE;
   11c50:	e0bfff17 	ldw	r2,-4(fp)
   11c54:	10000005 	stb	zero,0(r2)
        return (pmsg);                           /* Return message received                            */
   11c58:	e0bff517 	ldw	r2,-44(fp)
   11c5c:	00005b06 	br	11dcc <OSQPend+0x2e8>
    }
    OSTCBCur->OSTCBStat     |= OS_STAT_Q;        /* Task will have to pend for a message to be posted  */
   11c60:	008000b4 	movhi	r2,2
   11c64:	10b48e04 	addi	r2,r2,-11720
   11c68:	10c00017 	ldw	r3,0(r2)
   11c6c:	008000b4 	movhi	r2,2
   11c70:	10b48e04 	addi	r2,r2,-11720
   11c74:	10800017 	ldw	r2,0(r2)
   11c78:	10800c03 	ldbu	r2,48(r2)
   11c7c:	10800114 	ori	r2,r2,4
   11c80:	18800c05 	stb	r2,48(r3)
    OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
   11c84:	008000b4 	movhi	r2,2
   11c88:	10b48e04 	addi	r2,r2,-11720
   11c8c:	10800017 	ldw	r2,0(r2)
   11c90:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBDly       = timeout;          /* Load timeout into TCB                              */
   11c94:	008000b4 	movhi	r2,2
   11c98:	10b48e04 	addi	r2,r2,-11720
   11c9c:	10800017 	ldw	r2,0(r2)
   11ca0:	e0fffe0b 	ldhu	r3,-8(fp)
   11ca4:	10c00b8d 	sth	r3,46(r2)
    OS_EventTaskWait(pevent);                    /* Suspend task until event or timeout occurs         */
   11ca8:	e13ffd17 	ldw	r4,-12(fp)
   11cac:	000e3a40 	call	e3a4 <OS_EventTaskWait>
   11cb0:	e0bff617 	ldw	r2,-40(fp)
   11cb4:	e0bffa15 	stw	r2,-24(fp)
   11cb8:	e0bffa17 	ldw	r2,-24(fp)
   11cbc:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    OS_Sched();                                  /* Find next highest priority task ready to run       */
   11cc0:	000ec240 	call	ec24 <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   11cc4:	0005303a 	rdctl	r2,status
   11cc8:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   11ccc:	e0fffb17 	ldw	r3,-20(fp)
   11cd0:	00bfff84 	movi	r2,-2
   11cd4:	1884703a 	and	r2,r3,r2
   11cd8:	1001703a 	wrctl	status,r2
  
  return context;
   11cdc:	e0bffb17 	ldw	r2,-20(fp)
    OS_ENTER_CRITICAL();
   11ce0:	e0bff615 	stw	r2,-40(fp)
    switch (OSTCBCur->OSTCBStatPend) {                /* See if we timed-out or aborted                */
   11ce4:	008000b4 	movhi	r2,2
   11ce8:	10b48e04 	addi	r2,r2,-11720
   11cec:	10800017 	ldw	r2,0(r2)
   11cf0:	10800c43 	ldbu	r2,49(r2)
   11cf4:	10803fcc 	andi	r2,r2,255
   11cf8:	10000326 	beq	r2,zero,11d08 <OSQPend+0x224>
   11cfc:	108000a0 	cmpeqi	r2,r2,2
   11d00:	1000091e 	bne	r2,zero,11d28 <OSQPend+0x244>
   11d04:	00000d06 	br	11d3c <OSQPend+0x258>
        case OS_STAT_PEND_OK:                         /* Extract message from TCB (Put there by QPost) */
             pmsg =  OSTCBCur->OSTCBMsg;
   11d08:	008000b4 	movhi	r2,2
   11d0c:	10b48e04 	addi	r2,r2,-11720
   11d10:	10800017 	ldw	r2,0(r2)
   11d14:	10800917 	ldw	r2,36(r2)
   11d18:	e0bff515 	stw	r2,-44(fp)
            *perr =  OS_ERR_NONE;
   11d1c:	e0bfff17 	ldw	r2,-4(fp)
   11d20:	10000005 	stb	zero,0(r2)
             break;
   11d24:	00001006 	br	11d68 <OSQPend+0x284>

        case OS_STAT_PEND_ABORT:
             pmsg = (void *)0;
   11d28:	e03ff515 	stw	zero,-44(fp)
            *perr =  OS_ERR_PEND_ABORT;               /* Indicate that we aborted                      */
   11d2c:	e0bfff17 	ldw	r2,-4(fp)
   11d30:	00c00384 	movi	r3,14
   11d34:	10c00005 	stb	r3,0(r2)
             break;
   11d38:	00000b06 	br	11d68 <OSQPend+0x284>

        case OS_STAT_PEND_TO:
        default:
             OS_EventTaskRemove(OSTCBCur, pevent);
   11d3c:	008000b4 	movhi	r2,2
   11d40:	10b48e04 	addi	r2,r2,-11720
   11d44:	10800017 	ldw	r2,0(r2)
   11d48:	1009883a 	mov	r4,r2
   11d4c:	e17ffd17 	ldw	r5,-12(fp)
   11d50:	000e5fc0 	call	e5fc <OS_EventTaskRemove>
             pmsg = (void *)0;
   11d54:	e03ff515 	stw	zero,-44(fp)
            *perr =  OS_ERR_TIMEOUT;                  /* Indicate that we didn't get event within TO   */
   11d58:	e0bfff17 	ldw	r2,-4(fp)
   11d5c:	00c00284 	movi	r3,10
   11d60:	10c00005 	stb	r3,0(r2)
             break;
   11d64:	0001883a 	nop
    }
    OSTCBCur->OSTCBStat          =  OS_STAT_RDY;      /* Set   task  status to ready                   */
   11d68:	008000b4 	movhi	r2,2
   11d6c:	10b48e04 	addi	r2,r2,-11720
   11d70:	10800017 	ldw	r2,0(r2)
   11d74:	10000c05 	stb	zero,48(r2)
    OSTCBCur->OSTCBStatPend      =  OS_STAT_PEND_OK;  /* Clear pend  status                            */
   11d78:	008000b4 	movhi	r2,2
   11d7c:	10b48e04 	addi	r2,r2,-11720
   11d80:	10800017 	ldw	r2,0(r2)
   11d84:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;    /* Clear event pointers                          */
   11d88:	008000b4 	movhi	r2,2
   11d8c:	10b48e04 	addi	r2,r2,-11720
   11d90:	10800017 	ldw	r2,0(r2)
   11d94:	10000715 	stw	zero,28(r2)
#if (OS_EVENT_MULTI_EN > 0)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
   11d98:	008000b4 	movhi	r2,2
   11d9c:	10b48e04 	addi	r2,r2,-11720
   11da0:	10800017 	ldw	r2,0(r2)
   11da4:	10000815 	stw	zero,32(r2)
#endif
    OSTCBCur->OSTCBMsg           = (void      *)0;    /* Clear  received message                       */
   11da8:	008000b4 	movhi	r2,2
   11dac:	10b48e04 	addi	r2,r2,-11720
   11db0:	10800017 	ldw	r2,0(r2)
   11db4:	10000915 	stw	zero,36(r2)
   11db8:	e0bff617 	ldw	r2,-40(fp)
   11dbc:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   11dc0:	e0bffc17 	ldw	r2,-16(fp)
   11dc4:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (pmsg);                                    /* Return received message                       */
   11dc8:	e0bff517 	ldw	r2,-44(fp)
}
   11dcc:	e037883a 	mov	sp,fp
   11dd0:	dfc00117 	ldw	ra,4(sp)
   11dd4:	df000017 	ldw	fp,0(sp)
   11dd8:	dec00204 	addi	sp,sp,8
   11ddc:	f800283a 	ret

00011de0 <OSQPendAbort>:
*********************************************************************************************************
*/

#if OS_Q_PEND_ABORT_EN > 0
INT8U  OSQPendAbort (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
   11de0:	defff604 	addi	sp,sp,-40
   11de4:	dfc00915 	stw	ra,36(sp)
   11de8:	df000815 	stw	fp,32(sp)
   11dec:	df000804 	addi	fp,sp,32
   11df0:	e13ffd15 	stw	r4,-12(fp)
   11df4:	2805883a 	mov	r2,r5
   11df8:	e1bfff15 	stw	r6,-4(fp)
   11dfc:	e0bffe05 	stb	r2,-8(fp)
    INT8U      nbr_tasks;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
   11e00:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
   11e04:	e0bfff17 	ldw	r2,-4(fp)
   11e08:	1000021e 	bne	r2,zero,11e14 <OSQPendAbort+0x34>
        return (0);
   11e0c:	0005883a 	mov	r2,zero
   11e10:	00004906 	br	11f38 <OSQPendAbort+0x158>
    }
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
   11e14:	e0bffd17 	ldw	r2,-12(fp)
   11e18:	1000051e 	bne	r2,zero,11e30 <OSQPendAbort+0x50>
        *perr = OS_ERR_PEVENT_NULL;
   11e1c:	e0bfff17 	ldw	r2,-4(fp)
   11e20:	00c00104 	movi	r3,4
   11e24:	10c00005 	stb	r3,0(r2)
        return (0);
   11e28:	0005883a 	mov	r2,zero
   11e2c:	00004206 	br	11f38 <OSQPendAbort+0x158>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {          /* Validate event block type                */
   11e30:	e0bffd17 	ldw	r2,-12(fp)
   11e34:	10800003 	ldbu	r2,0(r2)
   11e38:	10803fcc 	andi	r2,r2,255
   11e3c:	108000a0 	cmpeqi	r2,r2,2
   11e40:	1000051e 	bne	r2,zero,11e58 <OSQPendAbort+0x78>
        *perr = OS_ERR_EVENT_TYPE;
   11e44:	e0bfff17 	ldw	r2,-4(fp)
   11e48:	00c00044 	movi	r3,1
   11e4c:	10c00005 	stb	r3,0(r2)
        return (0);
   11e50:	0005883a 	mov	r2,zero
   11e54:	00003806 	br	11f38 <OSQPendAbort+0x158>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   11e58:	0005303a 	rdctl	r2,status
   11e5c:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   11e60:	e0fffa17 	ldw	r3,-24(fp)
   11e64:	00bfff84 	movi	r2,-2
   11e68:	1884703a 	and	r2,r3,r2
   11e6c:	1001703a 	wrctl	status,r2
  
  return context;
   11e70:	e0bffa17 	ldw	r2,-24(fp)
    }
    OS_ENTER_CRITICAL();
   11e74:	e0bff915 	stw	r2,-28(fp)
    if (pevent->OSEventGrp != 0) {                         /* See if any task waiting on queue?        */
   11e78:	e0bffd17 	ldw	r2,-12(fp)
   11e7c:	10800283 	ldbu	r2,10(r2)
   11e80:	10803fcc 	andi	r2,r2,255
   11e84:	10002526 	beq	r2,zero,11f1c <OSQPendAbort+0x13c>
        nbr_tasks = 0;
   11e88:	e03ff805 	stb	zero,-32(fp)
        switch (opt) {
   11e8c:	e0bffe03 	ldbu	r2,-8(fp)
   11e90:	10800060 	cmpeqi	r2,r2,1
   11e94:	10000e26 	beq	r2,zero,11ed0 <OSQPendAbort+0xf0>
            case OS_PEND_OPT_BROADCAST:                    /* Do we need to abort ALL waiting tasks?   */
                 while (pevent->OSEventGrp != 0) {         /* Yes, ready ALL tasks waiting on queue    */
   11e98:	00000806 	br	11ebc <OSQPendAbort+0xdc>
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_ABORT);
   11e9c:	e13ffd17 	ldw	r4,-12(fp)
   11ea0:	000b883a 	mov	r5,zero
   11ea4:	01800104 	movi	r6,4
   11ea8:	01c00084 	movi	r7,2
   11eac:	000e20c0 	call	e20c <OS_EventTaskRdy>
                     nbr_tasks++;
   11eb0:	e0bff803 	ldbu	r2,-32(fp)
   11eb4:	10800044 	addi	r2,r2,1
   11eb8:	e0bff805 	stb	r2,-32(fp)
    OS_ENTER_CRITICAL();
    if (pevent->OSEventGrp != 0) {                         /* See if any task waiting on queue?        */
        nbr_tasks = 0;
        switch (opt) {
            case OS_PEND_OPT_BROADCAST:                    /* Do we need to abort ALL waiting tasks?   */
                 while (pevent->OSEventGrp != 0) {         /* Yes, ready ALL tasks waiting on queue    */
   11ebc:	e0bffd17 	ldw	r2,-12(fp)
   11ec0:	10800283 	ldbu	r2,10(r2)
   11ec4:	10803fcc 	andi	r2,r2,255
   11ec8:	103ff41e 	bne	r2,zero,11e9c <__alt_mem_Flash_flash_data+0xf4011e9c>
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_ABORT);
                     nbr_tasks++;
                 }
                 break;
   11ecc:	00000906 	br	11ef4 <OSQPendAbort+0x114>
               
            case OS_PEND_OPT_NONE:
            default:                                       /* No,  ready HPT       waiting on queue    */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_ABORT);
   11ed0:	e13ffd17 	ldw	r4,-12(fp)
   11ed4:	000b883a 	mov	r5,zero
   11ed8:	01800104 	movi	r6,4
   11edc:	01c00084 	movi	r7,2
   11ee0:	000e20c0 	call	e20c <OS_EventTaskRdy>
                 nbr_tasks++;
   11ee4:	e0bff803 	ldbu	r2,-32(fp)
   11ee8:	10800044 	addi	r2,r2,1
   11eec:	e0bff805 	stb	r2,-32(fp)
                 break;
   11ef0:	0001883a 	nop
   11ef4:	e0bff917 	ldw	r2,-28(fp)
   11ef8:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   11efc:	e0bffb17 	ldw	r2,-20(fp)
   11f00:	1001703a 	wrctl	status,r2
        }
        OS_EXIT_CRITICAL();
        OS_Sched();                                        /* Find HPT ready to run                    */
   11f04:	000ec240 	call	ec24 <OS_Sched>
        *perr = OS_ERR_PEND_ABORT;
   11f08:	e0bfff17 	ldw	r2,-4(fp)
   11f0c:	00c00384 	movi	r3,14
   11f10:	10c00005 	stb	r3,0(r2)
        return (nbr_tasks);
   11f14:	e0bff803 	ldbu	r2,-32(fp)
   11f18:	00000706 	br	11f38 <OSQPendAbort+0x158>
   11f1c:	e0bff917 	ldw	r2,-28(fp)
   11f20:	e0bffc15 	stw	r2,-16(fp)
   11f24:	e0bffc17 	ldw	r2,-16(fp)
   11f28:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
   11f2c:	e0bfff17 	ldw	r2,-4(fp)
   11f30:	10000005 	stb	zero,0(r2)
    return (0);                                            /* No tasks waiting on queue                */
   11f34:	0005883a 	mov	r2,zero
}
   11f38:	e037883a 	mov	sp,fp
   11f3c:	dfc00117 	ldw	ra,4(sp)
   11f40:	df000017 	ldw	fp,0(sp)
   11f44:	dec00204 	addi	sp,sp,8
   11f48:	f800283a 	ret

00011f4c <OSQPost>:
*********************************************************************************************************
*/

#if OS_Q_POST_EN > 0
INT8U  OSQPost (OS_EVENT *pevent, void *pmsg)
{
   11f4c:	defff604 	addi	sp,sp,-40
   11f50:	dfc00915 	stw	ra,36(sp)
   11f54:	df000815 	stw	fp,32(sp)
   11f58:	df000804 	addi	fp,sp,32
   11f5c:	e13ffe15 	stw	r4,-8(fp)
   11f60:	e17fff15 	stw	r5,-4(fp)
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                            /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
   11f64:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                     /* Validate 'pevent'                            */
   11f68:	e0bffe17 	ldw	r2,-8(fp)
   11f6c:	1000021e 	bne	r2,zero,11f78 <OSQPost+0x2c>
        return (OS_ERR_PEVENT_NULL);
   11f70:	00800104 	movi	r2,4
   11f74:	00004a06 	br	120a0 <OSQPost+0x154>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {      /* Validate event block type                    */
   11f78:	e0bffe17 	ldw	r2,-8(fp)
   11f7c:	10800003 	ldbu	r2,0(r2)
   11f80:	10803fcc 	andi	r2,r2,255
   11f84:	108000a0 	cmpeqi	r2,r2,2
   11f88:	1000021e 	bne	r2,zero,11f94 <OSQPost+0x48>
        return (OS_ERR_EVENT_TYPE);
   11f8c:	00800044 	movi	r2,1
   11f90:	00004306 	br	120a0 <OSQPost+0x154>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   11f94:	0005303a 	rdctl	r2,status
   11f98:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   11f9c:	e0fffa17 	ldw	r3,-24(fp)
   11fa0:	00bfff84 	movi	r2,-2
   11fa4:	1884703a 	and	r2,r3,r2
   11fa8:	1001703a 	wrctl	status,r2
  
  return context;
   11fac:	e0bffa17 	ldw	r2,-24(fp)
    }
    OS_ENTER_CRITICAL();
   11fb0:	e0bff815 	stw	r2,-32(fp)
    if (pevent->OSEventGrp != 0) {                     /* See if any task pending on queue             */
   11fb4:	e0bffe17 	ldw	r2,-8(fp)
   11fb8:	10800283 	ldbu	r2,10(r2)
   11fbc:	10803fcc 	andi	r2,r2,255
   11fc0:	10000c26 	beq	r2,zero,11ff4 <OSQPost+0xa8>
                                                       /* Ready highest priority task waiting on event */
        (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
   11fc4:	e13ffe17 	ldw	r4,-8(fp)
   11fc8:	e17fff17 	ldw	r5,-4(fp)
   11fcc:	01800104 	movi	r6,4
   11fd0:	000f883a 	mov	r7,zero
   11fd4:	000e20c0 	call	e20c <OS_EventTaskRdy>
   11fd8:	e0bff817 	ldw	r2,-32(fp)
   11fdc:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   11fe0:	e0bffb17 	ldw	r2,-20(fp)
   11fe4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                                    /* Find highest priority task ready to run      */
   11fe8:	000ec240 	call	ec24 <OS_Sched>
        return (OS_ERR_NONE);
   11fec:	0005883a 	mov	r2,zero
   11ff0:	00002b06 	br	120a0 <OSQPost+0x154>
    }
    pq = (OS_Q *)pevent->OSEventPtr;                   /* Point to queue control block                 */
   11ff4:	e0bffe17 	ldw	r2,-8(fp)
   11ff8:	10800117 	ldw	r2,4(r2)
   11ffc:	e0bff915 	stw	r2,-28(fp)
    if (pq->OSQEntries >= pq->OSQSize) {               /* Make sure queue is not full                  */
   12000:	e0bff917 	ldw	r2,-28(fp)
   12004:	10c0058b 	ldhu	r3,22(r2)
   12008:	e0bff917 	ldw	r2,-28(fp)
   1200c:	1080050b 	ldhu	r2,20(r2)
   12010:	18ffffcc 	andi	r3,r3,65535
   12014:	10bfffcc 	andi	r2,r2,65535
   12018:	18800636 	bltu	r3,r2,12034 <OSQPost+0xe8>
   1201c:	e0bff817 	ldw	r2,-32(fp)
   12020:	e0bffc15 	stw	r2,-16(fp)
   12024:	e0bffc17 	ldw	r2,-16(fp)
   12028:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_Q_FULL);
   1202c:	00800784 	movi	r2,30
   12030:	00001b06 	br	120a0 <OSQPost+0x154>
    }
    *pq->OSQIn++ = pmsg;                               /* Insert message into queue                    */
   12034:	e0bff917 	ldw	r2,-28(fp)
   12038:	10800317 	ldw	r2,12(r2)
   1203c:	11000104 	addi	r4,r2,4
   12040:	e0fff917 	ldw	r3,-28(fp)
   12044:	19000315 	stw	r4,12(r3)
   12048:	e0ffff17 	ldw	r3,-4(fp)
   1204c:	10c00015 	stw	r3,0(r2)
    pq->OSQEntries++;                                  /* Update the nbr of entries in the queue       */
   12050:	e0bff917 	ldw	r2,-28(fp)
   12054:	1080058b 	ldhu	r2,22(r2)
   12058:	10800044 	addi	r2,r2,1
   1205c:	1007883a 	mov	r3,r2
   12060:	e0bff917 	ldw	r2,-28(fp)
   12064:	10c0058d 	sth	r3,22(r2)
    if (pq->OSQIn == pq->OSQEnd) {                     /* Wrap IN ptr if we are at end of queue        */
   12068:	e0bff917 	ldw	r2,-28(fp)
   1206c:	10c00317 	ldw	r3,12(r2)
   12070:	e0bff917 	ldw	r2,-28(fp)
   12074:	10800217 	ldw	r2,8(r2)
   12078:	1880041e 	bne	r3,r2,1208c <OSQPost+0x140>
        pq->OSQIn = pq->OSQStart;
   1207c:	e0bff917 	ldw	r2,-28(fp)
   12080:	10c00117 	ldw	r3,4(r2)
   12084:	e0bff917 	ldw	r2,-28(fp)
   12088:	10c00315 	stw	r3,12(r2)
   1208c:	e0bff817 	ldw	r2,-32(fp)
   12090:	e0bffd15 	stw	r2,-12(fp)
   12094:	e0bffd17 	ldw	r2,-12(fp)
   12098:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
   1209c:	0005883a 	mov	r2,zero
}
   120a0:	e037883a 	mov	sp,fp
   120a4:	dfc00117 	ldw	ra,4(sp)
   120a8:	df000017 	ldw	fp,0(sp)
   120ac:	dec00204 	addi	sp,sp,8
   120b0:	f800283a 	ret

000120b4 <OSQPostFront>:
*********************************************************************************************************
*/

#if OS_Q_POST_FRONT_EN > 0
INT8U  OSQPostFront (OS_EVENT *pevent, void *pmsg)
{
   120b4:	defff604 	addi	sp,sp,-40
   120b8:	dfc00915 	stw	ra,36(sp)
   120bc:	df000815 	stw	fp,32(sp)
   120c0:	df000804 	addi	fp,sp,32
   120c4:	e13ffe15 	stw	r4,-8(fp)
   120c8:	e17fff15 	stw	r5,-4(fp)
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   120cc:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
   120d0:	e0bffe17 	ldw	r2,-8(fp)
   120d4:	1000021e 	bne	r2,zero,120e0 <OSQPostFront+0x2c>
        return (OS_ERR_PEVENT_NULL);
   120d8:	00800104 	movi	r2,4
   120dc:	00004c06 	br	12210 <OSQPostFront+0x15c>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {     /* Validate event block type                     */
   120e0:	e0bffe17 	ldw	r2,-8(fp)
   120e4:	10800003 	ldbu	r2,0(r2)
   120e8:	10803fcc 	andi	r2,r2,255
   120ec:	108000a0 	cmpeqi	r2,r2,2
   120f0:	1000021e 	bne	r2,zero,120fc <OSQPostFront+0x48>
        return (OS_ERR_EVENT_TYPE);
   120f4:	00800044 	movi	r2,1
   120f8:	00004506 	br	12210 <OSQPostFront+0x15c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   120fc:	0005303a 	rdctl	r2,status
   12100:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   12104:	e0fffa17 	ldw	r3,-24(fp)
   12108:	00bfff84 	movi	r2,-2
   1210c:	1884703a 	and	r2,r3,r2
   12110:	1001703a 	wrctl	status,r2
  
  return context;
   12114:	e0bffa17 	ldw	r2,-24(fp)
    }
    OS_ENTER_CRITICAL();
   12118:	e0bff815 	stw	r2,-32(fp)
    if (pevent->OSEventGrp != 0) {                    /* See if any task pending on queue              */
   1211c:	e0bffe17 	ldw	r2,-8(fp)
   12120:	10800283 	ldbu	r2,10(r2)
   12124:	10803fcc 	andi	r2,r2,255
   12128:	10000c26 	beq	r2,zero,1215c <OSQPostFront+0xa8>
                                                      /* Ready highest priority task waiting on event  */
        (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
   1212c:	e13ffe17 	ldw	r4,-8(fp)
   12130:	e17fff17 	ldw	r5,-4(fp)
   12134:	01800104 	movi	r6,4
   12138:	000f883a 	mov	r7,zero
   1213c:	000e20c0 	call	e20c <OS_EventTaskRdy>
   12140:	e0bff817 	ldw	r2,-32(fp)
   12144:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   12148:	e0bffb17 	ldw	r2,-20(fp)
   1214c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                                   /* Find highest priority task ready to run       */
   12150:	000ec240 	call	ec24 <OS_Sched>
        return (OS_ERR_NONE);
   12154:	0005883a 	mov	r2,zero
   12158:	00002d06 	br	12210 <OSQPostFront+0x15c>
    }
    pq = (OS_Q *)pevent->OSEventPtr;                  /* Point to queue control block                  */
   1215c:	e0bffe17 	ldw	r2,-8(fp)
   12160:	10800117 	ldw	r2,4(r2)
   12164:	e0bff915 	stw	r2,-28(fp)
    if (pq->OSQEntries >= pq->OSQSize) {              /* Make sure queue is not full                   */
   12168:	e0bff917 	ldw	r2,-28(fp)
   1216c:	10c0058b 	ldhu	r3,22(r2)
   12170:	e0bff917 	ldw	r2,-28(fp)
   12174:	1080050b 	ldhu	r2,20(r2)
   12178:	18ffffcc 	andi	r3,r3,65535
   1217c:	10bfffcc 	andi	r2,r2,65535
   12180:	18800636 	bltu	r3,r2,1219c <OSQPostFront+0xe8>
   12184:	e0bff817 	ldw	r2,-32(fp)
   12188:	e0bffc15 	stw	r2,-16(fp)
   1218c:	e0bffc17 	ldw	r2,-16(fp)
   12190:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_Q_FULL);
   12194:	00800784 	movi	r2,30
   12198:	00001d06 	br	12210 <OSQPostFront+0x15c>
    }
    if (pq->OSQOut == pq->OSQStart) {                 /* Wrap OUT ptr if we are at the 1st queue entry */
   1219c:	e0bff917 	ldw	r2,-28(fp)
   121a0:	10c00417 	ldw	r3,16(r2)
   121a4:	e0bff917 	ldw	r2,-28(fp)
   121a8:	10800117 	ldw	r2,4(r2)
   121ac:	1880041e 	bne	r3,r2,121c0 <OSQPostFront+0x10c>
        pq->OSQOut = pq->OSQEnd;
   121b0:	e0bff917 	ldw	r2,-28(fp)
   121b4:	10c00217 	ldw	r3,8(r2)
   121b8:	e0bff917 	ldw	r2,-28(fp)
   121bc:	10c00415 	stw	r3,16(r2)
    }
    pq->OSQOut--;
   121c0:	e0bff917 	ldw	r2,-28(fp)
   121c4:	10800417 	ldw	r2,16(r2)
   121c8:	10ffff04 	addi	r3,r2,-4
   121cc:	e0bff917 	ldw	r2,-28(fp)
   121d0:	10c00415 	stw	r3,16(r2)
    *pq->OSQOut = pmsg;                               /* Insert message into queue                     */
   121d4:	e0bff917 	ldw	r2,-28(fp)
   121d8:	10800417 	ldw	r2,16(r2)
   121dc:	e0ffff17 	ldw	r3,-4(fp)
   121e0:	10c00015 	stw	r3,0(r2)
    pq->OSQEntries++;                                 /* Update the nbr of entries in the queue        */
   121e4:	e0bff917 	ldw	r2,-28(fp)
   121e8:	1080058b 	ldhu	r2,22(r2)
   121ec:	10800044 	addi	r2,r2,1
   121f0:	1007883a 	mov	r3,r2
   121f4:	e0bff917 	ldw	r2,-28(fp)
   121f8:	10c0058d 	sth	r3,22(r2)
   121fc:	e0bff817 	ldw	r2,-32(fp)
   12200:	e0bffd15 	stw	r2,-12(fp)
   12204:	e0bffd17 	ldw	r2,-12(fp)
   12208:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
   1220c:	0005883a 	mov	r2,zero
}
   12210:	e037883a 	mov	sp,fp
   12214:	dfc00117 	ldw	ra,4(sp)
   12218:	df000017 	ldw	fp,0(sp)
   1221c:	dec00204 	addi	sp,sp,8
   12220:	f800283a 	ret

00012224 <OSQPostOpt>:
*********************************************************************************************************
*/

#if OS_Q_POST_OPT_EN > 0
INT8U  OSQPostOpt (OS_EVENT *pevent, void *pmsg, INT8U opt)
{
   12224:	defff504 	addi	sp,sp,-44
   12228:	dfc00a15 	stw	ra,40(sp)
   1222c:	df000915 	stw	fp,36(sp)
   12230:	df000904 	addi	fp,sp,36
   12234:	e13ffd15 	stw	r4,-12(fp)
   12238:	e17ffe15 	stw	r5,-8(fp)
   1223c:	3005883a 	mov	r2,r6
   12240:	e0bfff05 	stb	r2,-4(fp)
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   12244:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
   12248:	e0bffd17 	ldw	r2,-12(fp)
   1224c:	1000021e 	bne	r2,zero,12258 <OSQPostOpt+0x34>
        return (OS_ERR_PEVENT_NULL);
   12250:	00800104 	movi	r2,4
   12254:	00007106 	br	1241c <OSQPostOpt+0x1f8>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {     /* Validate event block type                     */
   12258:	e0bffd17 	ldw	r2,-12(fp)
   1225c:	10800003 	ldbu	r2,0(r2)
   12260:	10803fcc 	andi	r2,r2,255
   12264:	108000a0 	cmpeqi	r2,r2,2
   12268:	1000021e 	bne	r2,zero,12274 <OSQPostOpt+0x50>
        return (OS_ERR_EVENT_TYPE);
   1226c:	00800044 	movi	r2,1
   12270:	00006a06 	br	1241c <OSQPostOpt+0x1f8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   12274:	0005303a 	rdctl	r2,status
   12278:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1227c:	e0fff917 	ldw	r3,-28(fp)
   12280:	00bfff84 	movi	r2,-2
   12284:	1884703a 	and	r2,r3,r2
   12288:	1001703a 	wrctl	status,r2
  
  return context;
   1228c:	e0bff917 	ldw	r2,-28(fp)
    }
    OS_ENTER_CRITICAL();
   12290:	e0bff715 	stw	r2,-36(fp)
    if (pevent->OSEventGrp != 0x00) {                 /* See if any task pending on queue              */
   12294:	e0bffd17 	ldw	r2,-12(fp)
   12298:	10800283 	ldbu	r2,10(r2)
   1229c:	10803fcc 	andi	r2,r2,255
   122a0:	10001d26 	beq	r2,zero,12318 <OSQPostOpt+0xf4>
        if ((opt & OS_POST_OPT_BROADCAST) != 0x00) {  /* Do we need to post msg to ALL waiting tasks ? */
   122a4:	e0bfff03 	ldbu	r2,-4(fp)
   122a8:	1080004c 	andi	r2,r2,1
   122ac:	10000b26 	beq	r2,zero,122dc <OSQPostOpt+0xb8>
            while (pevent->OSEventGrp != 0) {         /* Yes, Post to ALL tasks waiting on queue       */
   122b0:	00000506 	br	122c8 <OSQPostOpt+0xa4>
                (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
   122b4:	e13ffd17 	ldw	r4,-12(fp)
   122b8:	e17ffe17 	ldw	r5,-8(fp)
   122bc:	01800104 	movi	r6,4
   122c0:	000f883a 	mov	r7,zero
   122c4:	000e20c0 	call	e20c <OS_EventTaskRdy>
        return (OS_ERR_EVENT_TYPE);
    }
    OS_ENTER_CRITICAL();
    if (pevent->OSEventGrp != 0x00) {                 /* See if any task pending on queue              */
        if ((opt & OS_POST_OPT_BROADCAST) != 0x00) {  /* Do we need to post msg to ALL waiting tasks ? */
            while (pevent->OSEventGrp != 0) {         /* Yes, Post to ALL tasks waiting on queue       */
   122c8:	e0bffd17 	ldw	r2,-12(fp)
   122cc:	10800283 	ldbu	r2,10(r2)
   122d0:	10803fcc 	andi	r2,r2,255
   122d4:	103ff71e 	bne	r2,zero,122b4 <__alt_mem_Flash_flash_data+0xf40122b4>
   122d8:	00000506 	br	122f0 <OSQPostOpt+0xcc>
                (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
            }
        } else {                                      /* No,  Post to HPT waiting on queue             */
            (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
   122dc:	e13ffd17 	ldw	r4,-12(fp)
   122e0:	e17ffe17 	ldw	r5,-8(fp)
   122e4:	01800104 	movi	r6,4
   122e8:	000f883a 	mov	r7,zero
   122ec:	000e20c0 	call	e20c <OS_EventTaskRdy>
   122f0:	e0bff717 	ldw	r2,-36(fp)
   122f4:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   122f8:	e0bffa17 	ldw	r2,-24(fp)
   122fc:	1001703a 	wrctl	status,r2
        }
        OS_EXIT_CRITICAL();
        if ((opt & OS_POST_OPT_NO_SCHED) == 0) {	  /* See if scheduler needs to be invoked          */
   12300:	e0bfff03 	ldbu	r2,-4(fp)
   12304:	1080010c 	andi	r2,r2,4
   12308:	1000011e 	bne	r2,zero,12310 <OSQPostOpt+0xec>
            OS_Sched();                               /* Find highest priority task ready to run       */
   1230c:	000ec240 	call	ec24 <OS_Sched>
        }
        return (OS_ERR_NONE);
   12310:	0005883a 	mov	r2,zero
   12314:	00004106 	br	1241c <OSQPostOpt+0x1f8>
    }
    pq = (OS_Q *)pevent->OSEventPtr;                  /* Point to queue control block                  */
   12318:	e0bffd17 	ldw	r2,-12(fp)
   1231c:	10800117 	ldw	r2,4(r2)
   12320:	e0bff815 	stw	r2,-32(fp)
    if (pq->OSQEntries >= pq->OSQSize) {              /* Make sure queue is not full                   */
   12324:	e0bff817 	ldw	r2,-32(fp)
   12328:	10c0058b 	ldhu	r3,22(r2)
   1232c:	e0bff817 	ldw	r2,-32(fp)
   12330:	1080050b 	ldhu	r2,20(r2)
   12334:	18ffffcc 	andi	r3,r3,65535
   12338:	10bfffcc 	andi	r2,r2,65535
   1233c:	18800636 	bltu	r3,r2,12358 <OSQPostOpt+0x134>
   12340:	e0bff717 	ldw	r2,-36(fp)
   12344:	e0bffb15 	stw	r2,-20(fp)
   12348:	e0bffb17 	ldw	r2,-20(fp)
   1234c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_Q_FULL);
   12350:	00800784 	movi	r2,30
   12354:	00003106 	br	1241c <OSQPostOpt+0x1f8>
    }
    if ((opt & OS_POST_OPT_FRONT) != 0x00) {          /* Do we post to the FRONT of the queue?         */
   12358:	e0bfff03 	ldbu	r2,-4(fp)
   1235c:	1080008c 	andi	r2,r2,2
   12360:	10001326 	beq	r2,zero,123b0 <OSQPostOpt+0x18c>
        if (pq->OSQOut == pq->OSQStart) {             /* Yes, Post as LIFO, Wrap OUT pointer if we ... */
   12364:	e0bff817 	ldw	r2,-32(fp)
   12368:	10c00417 	ldw	r3,16(r2)
   1236c:	e0bff817 	ldw	r2,-32(fp)
   12370:	10800117 	ldw	r2,4(r2)
   12374:	1880041e 	bne	r3,r2,12388 <OSQPostOpt+0x164>
            pq->OSQOut = pq->OSQEnd;                  /*      ... are at the 1st queue entry           */
   12378:	e0bff817 	ldw	r2,-32(fp)
   1237c:	10c00217 	ldw	r3,8(r2)
   12380:	e0bff817 	ldw	r2,-32(fp)
   12384:	10c00415 	stw	r3,16(r2)
        }
        pq->OSQOut--;
   12388:	e0bff817 	ldw	r2,-32(fp)
   1238c:	10800417 	ldw	r2,16(r2)
   12390:	10ffff04 	addi	r3,r2,-4
   12394:	e0bff817 	ldw	r2,-32(fp)
   12398:	10c00415 	stw	r3,16(r2)
        *pq->OSQOut = pmsg;                           /*      Insert message into queue                */
   1239c:	e0bff817 	ldw	r2,-32(fp)
   123a0:	10800417 	ldw	r2,16(r2)
   123a4:	e0fffe17 	ldw	r3,-8(fp)
   123a8:	10c00015 	stw	r3,0(r2)
   123ac:	00001006 	br	123f0 <OSQPostOpt+0x1cc>
    } else {                                          /* No,  Post as FIFO                             */
        *pq->OSQIn++ = pmsg;                          /*      Insert message into queue                */
   123b0:	e0bff817 	ldw	r2,-32(fp)
   123b4:	10800317 	ldw	r2,12(r2)
   123b8:	11000104 	addi	r4,r2,4
   123bc:	e0fff817 	ldw	r3,-32(fp)
   123c0:	19000315 	stw	r4,12(r3)
   123c4:	e0fffe17 	ldw	r3,-8(fp)
   123c8:	10c00015 	stw	r3,0(r2)
        if (pq->OSQIn == pq->OSQEnd) {                /*      Wrap IN ptr if we are at end of queue    */
   123cc:	e0bff817 	ldw	r2,-32(fp)
   123d0:	10c00317 	ldw	r3,12(r2)
   123d4:	e0bff817 	ldw	r2,-32(fp)
   123d8:	10800217 	ldw	r2,8(r2)
   123dc:	1880041e 	bne	r3,r2,123f0 <OSQPostOpt+0x1cc>
            pq->OSQIn = pq->OSQStart;
   123e0:	e0bff817 	ldw	r2,-32(fp)
   123e4:	10c00117 	ldw	r3,4(r2)
   123e8:	e0bff817 	ldw	r2,-32(fp)
   123ec:	10c00315 	stw	r3,12(r2)
        }
    }
    pq->OSQEntries++;                                 /* Update the nbr of entries in the queue        */
   123f0:	e0bff817 	ldw	r2,-32(fp)
   123f4:	1080058b 	ldhu	r2,22(r2)
   123f8:	10800044 	addi	r2,r2,1
   123fc:	1007883a 	mov	r3,r2
   12400:	e0bff817 	ldw	r2,-32(fp)
   12404:	10c0058d 	sth	r3,22(r2)
   12408:	e0bff717 	ldw	r2,-36(fp)
   1240c:	e0bffc15 	stw	r2,-16(fp)
   12410:	e0bffc17 	ldw	r2,-16(fp)
   12414:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
   12418:	0005883a 	mov	r2,zero
}
   1241c:	e037883a 	mov	sp,fp
   12420:	dfc00117 	ldw	ra,4(sp)
   12424:	df000017 	ldw	fp,0(sp)
   12428:	dec00204 	addi	sp,sp,8
   1242c:	f800283a 	ret

00012430 <OSQQuery>:
*********************************************************************************************************
*/

#if OS_Q_QUERY_EN > 0
INT8U  OSQQuery (OS_EVENT *pevent, OS_Q_DATA *p_q_data)
{
   12430:	defff604 	addi	sp,sp,-40
   12434:	df000915 	stw	fp,36(sp)
   12438:	df000904 	addi	fp,sp,36
   1243c:	e13ffe15 	stw	r4,-8(fp)
   12440:	e17fff15 	stw	r5,-4(fp)
#else
    INT16U    *psrc;
    INT16U    *pdest;
#endif
#if OS_CRITICAL_METHOD == 3                            /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
   12444:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                     /* Validate 'pevent'                            */
   12448:	e0bffe17 	ldw	r2,-8(fp)
   1244c:	1000021e 	bne	r2,zero,12458 <OSQQuery+0x28>
        return (OS_ERR_PEVENT_NULL);
   12450:	00800104 	movi	r2,4
   12454:	00004906 	br	1257c <OSQQuery+0x14c>
    }
    if (p_q_data == (OS_Q_DATA *)0) {                  /* Validate 'p_q_data'                          */
   12458:	e0bfff17 	ldw	r2,-4(fp)
   1245c:	1000021e 	bne	r2,zero,12468 <OSQQuery+0x38>
        return (OS_ERR_PDATA_NULL);
   12460:	00800244 	movi	r2,9
   12464:	00004506 	br	1257c <OSQQuery+0x14c>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {      /* Validate event block type                    */
   12468:	e0bffe17 	ldw	r2,-8(fp)
   1246c:	10800003 	ldbu	r2,0(r2)
   12470:	10803fcc 	andi	r2,r2,255
   12474:	108000a0 	cmpeqi	r2,r2,2
   12478:	1000021e 	bne	r2,zero,12484 <OSQQuery+0x54>
        return (OS_ERR_EVENT_TYPE);
   1247c:	00800044 	movi	r2,1
   12480:	00003e06 	br	1257c <OSQQuery+0x14c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   12484:	0005303a 	rdctl	r2,status
   12488:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1248c:	e0fffc17 	ldw	r3,-16(fp)
   12490:	00bfff84 	movi	r2,-2
   12494:	1884703a 	and	r2,r3,r2
   12498:	1001703a 	wrctl	status,r2
  
  return context;
   1249c:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
   124a0:	e0bffa15 	stw	r2,-24(fp)
    p_q_data->OSEventGrp = pevent->OSEventGrp;         /* Copy message queue wait list                 */
   124a4:	e0bffe17 	ldw	r2,-8(fp)
   124a8:	10c00283 	ldbu	r3,10(r2)
   124ac:	e0bfff17 	ldw	r2,-4(fp)
   124b0:	10c002c5 	stb	r3,11(r2)
    psrc                 = &pevent->OSEventTbl[0];
   124b4:	e0bffe17 	ldw	r2,-8(fp)
   124b8:	108002c4 	addi	r2,r2,11
   124bc:	e0bff815 	stw	r2,-32(fp)
    pdest                = &p_q_data->OSEventTbl[0];
   124c0:	e0bfff17 	ldw	r2,-4(fp)
   124c4:	10800204 	addi	r2,r2,8
   124c8:	e0bff915 	stw	r2,-28(fp)
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
   124cc:	e03ff705 	stb	zero,-36(fp)
   124d0:	00000b06 	br	12500 <OSQQuery+0xd0>
        *pdest++ = *psrc++;
   124d4:	e0bff917 	ldw	r2,-28(fp)
   124d8:	10c00044 	addi	r3,r2,1
   124dc:	e0fff915 	stw	r3,-28(fp)
   124e0:	e0fff817 	ldw	r3,-32(fp)
   124e4:	19000044 	addi	r4,r3,1
   124e8:	e13ff815 	stw	r4,-32(fp)
   124ec:	18c00003 	ldbu	r3,0(r3)
   124f0:	10c00005 	stb	r3,0(r2)
    }
    OS_ENTER_CRITICAL();
    p_q_data->OSEventGrp = pevent->OSEventGrp;         /* Copy message queue wait list                 */
    psrc                 = &pevent->OSEventTbl[0];
    pdest                = &p_q_data->OSEventTbl[0];
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
   124f4:	e0bff703 	ldbu	r2,-36(fp)
   124f8:	10800044 	addi	r2,r2,1
   124fc:	e0bff705 	stb	r2,-36(fp)
   12500:	e0bff703 	ldbu	r2,-36(fp)
   12504:	108000f0 	cmpltui	r2,r2,3
   12508:	103ff21e 	bne	r2,zero,124d4 <__alt_mem_Flash_flash_data+0xf40124d4>
        *pdest++ = *psrc++;
    }
    pq = (OS_Q *)pevent->OSEventPtr;
   1250c:	e0bffe17 	ldw	r2,-8(fp)
   12510:	10800117 	ldw	r2,4(r2)
   12514:	e0bffb15 	stw	r2,-20(fp)
    if (pq->OSQEntries > 0) {
   12518:	e0bffb17 	ldw	r2,-20(fp)
   1251c:	1080058b 	ldhu	r2,22(r2)
   12520:	10bfffcc 	andi	r2,r2,65535
   12524:	10000626 	beq	r2,zero,12540 <OSQQuery+0x110>
        p_q_data->OSMsg = *pq->OSQOut;                 /* Get next message to return if available      */
   12528:	e0bffb17 	ldw	r2,-20(fp)
   1252c:	10800417 	ldw	r2,16(r2)
   12530:	10c00017 	ldw	r3,0(r2)
   12534:	e0bfff17 	ldw	r2,-4(fp)
   12538:	10c00015 	stw	r3,0(r2)
   1253c:	00000206 	br	12548 <OSQQuery+0x118>
    } else {
        p_q_data->OSMsg = (void *)0;
   12540:	e0bfff17 	ldw	r2,-4(fp)
   12544:	10000015 	stw	zero,0(r2)
    }
    p_q_data->OSNMsgs = pq->OSQEntries;
   12548:	e0bffb17 	ldw	r2,-20(fp)
   1254c:	10c0058b 	ldhu	r3,22(r2)
   12550:	e0bfff17 	ldw	r2,-4(fp)
   12554:	10c0010d 	sth	r3,4(r2)
    p_q_data->OSQSize = pq->OSQSize;
   12558:	e0bffb17 	ldw	r2,-20(fp)
   1255c:	10c0050b 	ldhu	r3,20(r2)
   12560:	e0bfff17 	ldw	r2,-4(fp)
   12564:	10c0018d 	sth	r3,6(r2)
   12568:	e0bffa17 	ldw	r2,-24(fp)
   1256c:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   12570:	e0bffd17 	ldw	r2,-12(fp)
   12574:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
   12578:	0005883a 	mov	r2,zero
}
   1257c:	e037883a 	mov	sp,fp
   12580:	df000017 	ldw	fp,0(sp)
   12584:	dec00104 	addi	sp,sp,4
   12588:	f800283a 	ret

0001258c <OS_QInit>:
* Note(s)    : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

void  OS_QInit (void)
{
   1258c:	defffb04 	addi	sp,sp,-20
   12590:	dfc00415 	stw	ra,16(sp)
   12594:	df000315 	stw	fp,12(sp)
   12598:	df000304 	addi	fp,sp,12
    OS_Q   *pq1;
    OS_Q   *pq2;



    OS_MemClr((INT8U *)&OSQTbl[0], sizeof(OSQTbl));  /* Clear the queue table                          */
   1259c:	010000b4 	movhi	r4,2
   125a0:	211a9304 	addi	r4,r4,27212
   125a4:	01407804 	movi	r5,480
   125a8:	000eb700 	call	eb70 <OS_MemClr>
    pq1 = &OSQTbl[0];
   125ac:	008000b4 	movhi	r2,2
   125b0:	109a9304 	addi	r2,r2,27212
   125b4:	e0bffe15 	stw	r2,-8(fp)
    pq2 = &OSQTbl[1];
   125b8:	008000b4 	movhi	r2,2
   125bc:	109a9904 	addi	r2,r2,27236
   125c0:	e0bfff15 	stw	r2,-4(fp)
    for (i = 0; i < (OS_MAX_QS - 1); i++) {          /* Init. list of free QUEUE control blocks        */
   125c4:	e03ffd0d 	sth	zero,-12(fp)
   125c8:	00000c06 	br	125fc <OS_QInit+0x70>
        pq1->OSQPtr = pq2;
   125cc:	e0bffe17 	ldw	r2,-8(fp)
   125d0:	e0ffff17 	ldw	r3,-4(fp)
   125d4:	10c00015 	stw	r3,0(r2)
        pq1++;
   125d8:	e0bffe17 	ldw	r2,-8(fp)
   125dc:	10800604 	addi	r2,r2,24
   125e0:	e0bffe15 	stw	r2,-8(fp)
        pq2++;
   125e4:	e0bfff17 	ldw	r2,-4(fp)
   125e8:	10800604 	addi	r2,r2,24
   125ec:	e0bfff15 	stw	r2,-4(fp)


    OS_MemClr((INT8U *)&OSQTbl[0], sizeof(OSQTbl));  /* Clear the queue table                          */
    pq1 = &OSQTbl[0];
    pq2 = &OSQTbl[1];
    for (i = 0; i < (OS_MAX_QS - 1); i++) {          /* Init. list of free QUEUE control blocks        */
   125f0:	e0bffd0b 	ldhu	r2,-12(fp)
   125f4:	10800044 	addi	r2,r2,1
   125f8:	e0bffd0d 	sth	r2,-12(fp)
   125fc:	e0bffd0b 	ldhu	r2,-12(fp)
   12600:	108004f0 	cmpltui	r2,r2,19
   12604:	103ff11e 	bne	r2,zero,125cc <__alt_mem_Flash_flash_data+0xf40125cc>
        pq1->OSQPtr = pq2;
        pq1++;
        pq2++;
    }
    pq1->OSQPtr = (OS_Q *)0;
   12608:	e0bffe17 	ldw	r2,-8(fp)
   1260c:	10000015 	stw	zero,0(r2)
    OSQFreeList = &OSQTbl[0];
   12610:	008000b4 	movhi	r2,2
   12614:	10b48a04 	addi	r2,r2,-11736
   12618:	00c000b4 	movhi	r3,2
   1261c:	18da9304 	addi	r3,r3,27212
   12620:	10c00015 	stw	r3,0(r2)
#endif
}
   12624:	e037883a 	mov	sp,fp
   12628:	dfc00117 	ldw	ra,4(sp)
   1262c:	df000017 	ldw	fp,0(sp)
   12630:	dec00204 	addi	sp,sp,8
   12634:	f800283a 	ret

00012638 <OSSemAccept>:
*********************************************************************************************************
*/

#if OS_SEM_ACCEPT_EN > 0
INT16U  OSSemAccept (OS_EVENT *pevent)
{
   12638:	defffa04 	addi	sp,sp,-24
   1263c:	df000515 	stw	fp,20(sp)
   12640:	df000504 	addi	fp,sp,20
   12644:	e13fff15 	stw	r4,-4(fp)
    INT16U     cnt;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   12648:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
   1264c:	e0bfff17 	ldw	r2,-4(fp)
   12650:	1000021e 	bne	r2,zero,1265c <OSSemAccept+0x24>
        return (0);
   12654:	0005883a 	mov	r2,zero
   12658:	00001f06 	br	126d8 <OSSemAccept+0xa0>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
   1265c:	e0bfff17 	ldw	r2,-4(fp)
   12660:	10800003 	ldbu	r2,0(r2)
   12664:	10803fcc 	andi	r2,r2,255
   12668:	108000e0 	cmpeqi	r2,r2,3
   1266c:	1000021e 	bne	r2,zero,12678 <OSSemAccept+0x40>
        return (0);
   12670:	0005883a 	mov	r2,zero
   12674:	00001806 	br	126d8 <OSSemAccept+0xa0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   12678:	0005303a 	rdctl	r2,status
   1267c:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   12680:	e0fffd17 	ldw	r3,-12(fp)
   12684:	00bfff84 	movi	r2,-2
   12688:	1884703a 	and	r2,r3,r2
   1268c:	1001703a 	wrctl	status,r2
  
  return context;
   12690:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
   12694:	e0bffb15 	stw	r2,-20(fp)
    cnt = pevent->OSEventCnt;
   12698:	e0bfff17 	ldw	r2,-4(fp)
   1269c:	1080020b 	ldhu	r2,8(r2)
   126a0:	e0bffc0d 	sth	r2,-16(fp)
    if (cnt > 0) {                                    /* See if resource is available                  */
   126a4:	e0bffc0b 	ldhu	r2,-16(fp)
   126a8:	10000626 	beq	r2,zero,126c4 <OSSemAccept+0x8c>
        pevent->OSEventCnt--;                         /* Yes, decrement semaphore and notify caller    */
   126ac:	e0bfff17 	ldw	r2,-4(fp)
   126b0:	1080020b 	ldhu	r2,8(r2)
   126b4:	10bfffc4 	addi	r2,r2,-1
   126b8:	1007883a 	mov	r3,r2
   126bc:	e0bfff17 	ldw	r2,-4(fp)
   126c0:	10c0020d 	sth	r3,8(r2)
   126c4:	e0bffb17 	ldw	r2,-20(fp)
   126c8:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   126cc:	e0bffe17 	ldw	r2,-8(fp)
   126d0:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (cnt);                                     /* Return semaphore count                        */
   126d4:	e0bffc0b 	ldhu	r2,-16(fp)
}
   126d8:	e037883a 	mov	sp,fp
   126dc:	df000017 	ldw	fp,0(sp)
   126e0:	dec00104 	addi	sp,sp,4
   126e4:	f800283a 	ret

000126e8 <OSSemCreate>:
*              == (void *)0  if no event control blocks were available
*********************************************************************************************************
*/

OS_EVENT  *OSSemCreate (INT16U cnt)
{
   126e8:	defff904 	addi	sp,sp,-28
   126ec:	dfc00615 	stw	ra,24(sp)
   126f0:	df000515 	stw	fp,20(sp)
   126f4:	df000504 	addi	fp,sp,20
   126f8:	2005883a 	mov	r2,r4
   126fc:	e0bfff0d 	sth	r2,-4(fp)
    OS_EVENT  *pevent;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
   12700:	e03ffb15 	stw	zero,-20(fp)
#endif



    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
   12704:	008000b4 	movhi	r2,2
   12708:	10b48d04 	addi	r2,r2,-11724
   1270c:	10800003 	ldbu	r2,0(r2)
   12710:	10803fcc 	andi	r2,r2,255
   12714:	10000226 	beq	r2,zero,12720 <OSSemCreate+0x38>
        return ((OS_EVENT *)0);                            /* ... can't CREATE from an ISR             */
   12718:	0005883a 	mov	r2,zero
   1271c:	00002d06 	br	127d4 <OSSemCreate+0xec>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   12720:	0005303a 	rdctl	r2,status
   12724:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   12728:	e0fffd17 	ldw	r3,-12(fp)
   1272c:	00bfff84 	movi	r2,-2
   12730:	1884703a 	and	r2,r3,r2
   12734:	1001703a 	wrctl	status,r2
  
  return context;
   12738:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
   1273c:	e0bffb15 	stw	r2,-20(fp)
    pevent = OSEventFreeList;                              /* Get next free event control block        */
   12740:	008000b4 	movhi	r2,2
   12744:	10b48c04 	addi	r2,r2,-11728
   12748:	10800017 	ldw	r2,0(r2)
   1274c:	e0bffc15 	stw	r2,-16(fp)
    if (OSEventFreeList != (OS_EVENT *)0) {                /* See if pool of free ECB pool was empty   */
   12750:	008000b4 	movhi	r2,2
   12754:	10b48c04 	addi	r2,r2,-11728
   12758:	10800017 	ldw	r2,0(r2)
   1275c:	10000726 	beq	r2,zero,1277c <OSSemCreate+0x94>
        OSEventFreeList = (OS_EVENT *)OSEventFreeList->OSEventPtr;
   12760:	008000b4 	movhi	r2,2
   12764:	10b48c04 	addi	r2,r2,-11728
   12768:	10800017 	ldw	r2,0(r2)
   1276c:	10c00117 	ldw	r3,4(r2)
   12770:	008000b4 	movhi	r2,2
   12774:	10b48c04 	addi	r2,r2,-11728
   12778:	10c00015 	stw	r3,0(r2)
   1277c:	e0bffb17 	ldw	r2,-20(fp)
   12780:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   12784:	e0bffe17 	ldw	r2,-8(fp)
   12788:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    if (pevent != (OS_EVENT *)0) {                         /* Get an event control block               */
   1278c:	e0bffc17 	ldw	r2,-16(fp)
   12790:	10000f26 	beq	r2,zero,127d0 <OSSemCreate+0xe8>
        pevent->OSEventType    = OS_EVENT_TYPE_SEM;
   12794:	e0bffc17 	ldw	r2,-16(fp)
   12798:	00c000c4 	movi	r3,3
   1279c:	10c00005 	stb	r3,0(r2)
        pevent->OSEventCnt     = cnt;                      /* Set semaphore value                      */
   127a0:	e0bffc17 	ldw	r2,-16(fp)
   127a4:	e0ffff0b 	ldhu	r3,-4(fp)
   127a8:	10c0020d 	sth	r3,8(r2)
        pevent->OSEventPtr     = (void *)0;                /* Unlink from ECB free list                */
   127ac:	e0bffc17 	ldw	r2,-16(fp)
   127b0:	10000115 	stw	zero,4(r2)
#if OS_EVENT_NAME_SIZE > 1
        pevent->OSEventName[0] = '?';                      /* Unknown name                             */
   127b4:	e0bffc17 	ldw	r2,-16(fp)
   127b8:	00c00fc4 	movi	r3,63
   127bc:	10c00385 	stb	r3,14(r2)
        pevent->OSEventName[1] = OS_ASCII_NUL;
   127c0:	e0bffc17 	ldw	r2,-16(fp)
   127c4:	100003c5 	stb	zero,15(r2)
#endif
        OS_EventWaitListInit(pevent);                      /* Initialize to 'nobody waiting' on sem.   */
   127c8:	e13ffc17 	ldw	r4,-16(fp)
   127cc:	000e7ac0 	call	e7ac <OS_EventWaitListInit>
    }
    return (pevent);
   127d0:	e0bffc17 	ldw	r2,-16(fp)
}
   127d4:	e037883a 	mov	sp,fp
   127d8:	dfc00117 	ldw	ra,4(sp)
   127dc:	df000017 	ldw	fp,0(sp)
   127e0:	dec00204 	addi	sp,sp,8
   127e4:	f800283a 	ret

000127e8 <OSSemDel>:
*********************************************************************************************************
*/

#if OS_SEM_DEL_EN > 0
OS_EVENT  *OSSemDel (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
   127e8:	defff304 	addi	sp,sp,-52
   127ec:	dfc00c15 	stw	ra,48(sp)
   127f0:	df000b15 	stw	fp,44(sp)
   127f4:	df000b04 	addi	fp,sp,44
   127f8:	e13ffd15 	stw	r4,-12(fp)
   127fc:	2805883a 	mov	r2,r5
   12800:	e1bfff15 	stw	r6,-4(fp)
   12804:	e0bffe05 	stb	r2,-8(fp)
    BOOLEAN    tasks_waiting;
    OS_EVENT  *pevent_return;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
   12808:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
   1280c:	e0bfff17 	ldw	r2,-4(fp)
   12810:	1000021e 	bne	r2,zero,1281c <OSSemDel+0x34>
        return (pevent);
   12814:	e0bffd17 	ldw	r2,-12(fp)
   12818:	00008806 	br	12a3c <OSSemDel+0x254>
    }
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
   1281c:	e0bffd17 	ldw	r2,-12(fp)
   12820:	1000051e 	bne	r2,zero,12838 <OSSemDel+0x50>
        *perr = OS_ERR_PEVENT_NULL;
   12824:	e0bfff17 	ldw	r2,-4(fp)
   12828:	00c00104 	movi	r3,4
   1282c:	10c00005 	stb	r3,0(r2)
        return (pevent);
   12830:	e0bffd17 	ldw	r2,-12(fp)
   12834:	00008106 	br	12a3c <OSSemDel+0x254>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {        /* Validate event block type                */
   12838:	e0bffd17 	ldw	r2,-12(fp)
   1283c:	10800003 	ldbu	r2,0(r2)
   12840:	10803fcc 	andi	r2,r2,255
   12844:	108000e0 	cmpeqi	r2,r2,3
   12848:	1000051e 	bne	r2,zero,12860 <OSSemDel+0x78>
        *perr = OS_ERR_EVENT_TYPE;
   1284c:	e0bfff17 	ldw	r2,-4(fp)
   12850:	00c00044 	movi	r3,1
   12854:	10c00005 	stb	r3,0(r2)
        return (pevent);
   12858:	e0bffd17 	ldw	r2,-12(fp)
   1285c:	00007706 	br	12a3c <OSSemDel+0x254>
    }
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
   12860:	008000b4 	movhi	r2,2
   12864:	10b48d04 	addi	r2,r2,-11724
   12868:	10800003 	ldbu	r2,0(r2)
   1286c:	10803fcc 	andi	r2,r2,255
   12870:	10000526 	beq	r2,zero,12888 <OSSemDel+0xa0>
        *perr = OS_ERR_DEL_ISR;                             /* ... can't DELETE from an ISR             */
   12874:	e0bfff17 	ldw	r2,-4(fp)
   12878:	00c003c4 	movi	r3,15
   1287c:	10c00005 	stb	r3,0(r2)
        return (pevent);
   12880:	e0bffd17 	ldw	r2,-12(fp)
   12884:	00006d06 	br	12a3c <OSSemDel+0x254>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   12888:	0005303a 	rdctl	r2,status
   1288c:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   12890:	e0fff817 	ldw	r3,-32(fp)
   12894:	00bfff84 	movi	r2,-2
   12898:	1884703a 	and	r2,r3,r2
   1289c:	1001703a 	wrctl	status,r2
  
  return context;
   128a0:	e0bff817 	ldw	r2,-32(fp)
    }
    OS_ENTER_CRITICAL();
   128a4:	e0bff715 	stw	r2,-36(fp)
    if (pevent->OSEventGrp != 0) {                         /* See if any tasks waiting on semaphore    */
   128a8:	e0bffd17 	ldw	r2,-12(fp)
   128ac:	10800283 	ldbu	r2,10(r2)
   128b0:	10803fcc 	andi	r2,r2,255
   128b4:	10000326 	beq	r2,zero,128c4 <OSSemDel+0xdc>
        tasks_waiting = OS_TRUE;                           /* Yes                                      */
   128b8:	00800044 	movi	r2,1
   128bc:	e0bff505 	stb	r2,-44(fp)
   128c0:	00000106 	br	128c8 <OSSemDel+0xe0>
    } else {
        tasks_waiting = OS_FALSE;                          /* No                                       */
   128c4:	e03ff505 	stb	zero,-44(fp)
    }
    switch (opt) {
   128c8:	e0bffe03 	ldbu	r2,-8(fp)
   128cc:	10000326 	beq	r2,zero,128dc <OSSemDel+0xf4>
   128d0:	10800060 	cmpeqi	r2,r2,1
   128d4:	10002c1e 	bne	r2,zero,12988 <OSSemDel+0x1a0>
   128d8:	00004d06 	br	12a10 <OSSemDel+0x228>
        case OS_DEL_NO_PEND:                               /* Delete semaphore only if no task waiting */
             if (tasks_waiting == OS_FALSE) {
   128dc:	e0bff503 	ldbu	r2,-44(fp)
   128e0:	10001a1e 	bne	r2,zero,1294c <OSSemDel+0x164>
#if OS_EVENT_NAME_SIZE > 1
                 pevent->OSEventName[0] = '?';             /* Unknown name                             */
   128e4:	e0bffd17 	ldw	r2,-12(fp)
   128e8:	00c00fc4 	movi	r3,63
   128ec:	10c00385 	stb	r3,14(r2)
                 pevent->OSEventName[1] = OS_ASCII_NUL;
   128f0:	e0bffd17 	ldw	r2,-12(fp)
   128f4:	100003c5 	stb	zero,15(r2)
#endif
                 pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
   128f8:	e0bffd17 	ldw	r2,-12(fp)
   128fc:	10000005 	stb	zero,0(r2)
                 pevent->OSEventPtr     = OSEventFreeList; /* Return Event Control Block to free list  */
   12900:	008000b4 	movhi	r2,2
   12904:	10b48c04 	addi	r2,r2,-11728
   12908:	10c00017 	ldw	r3,0(r2)
   1290c:	e0bffd17 	ldw	r2,-12(fp)
   12910:	10c00115 	stw	r3,4(r2)
                 pevent->OSEventCnt     = 0;
   12914:	e0bffd17 	ldw	r2,-12(fp)
   12918:	1000020d 	sth	zero,8(r2)
                 OSEventFreeList        = pevent;          /* Get next free event control block        */
   1291c:	008000b4 	movhi	r2,2
   12920:	10b48c04 	addi	r2,r2,-11728
   12924:	e0fffd17 	ldw	r3,-12(fp)
   12928:	10c00015 	stw	r3,0(r2)
   1292c:	e0bff717 	ldw	r2,-36(fp)
   12930:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   12934:	e0bff917 	ldw	r2,-28(fp)
   12938:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_NONE;
   1293c:	e0bfff17 	ldw	r2,-4(fp)
   12940:	10000005 	stb	zero,0(r2)
                 pevent_return          = (OS_EVENT *)0;   /* Semaphore has been deleted               */
   12944:	e03ff615 	stw	zero,-40(fp)
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_TASK_WAITING;
                 pevent_return          = pevent;
             }
             break;
   12948:	00003b06 	br	12a38 <OSSemDel+0x250>
   1294c:	e0bff717 	ldw	r2,-36(fp)
   12950:	e0bffa15 	stw	r2,-24(fp)
   12954:	e0bffa17 	ldw	r2,-24(fp)
   12958:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_NONE;
                 pevent_return          = (OS_EVENT *)0;   /* Semaphore has been deleted               */
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_TASK_WAITING;
   1295c:	e0bfff17 	ldw	r2,-4(fp)
   12960:	00c01244 	movi	r3,73
   12964:	10c00005 	stb	r3,0(r2)
                 pevent_return          = pevent;
   12968:	e0bffd17 	ldw	r2,-12(fp)
   1296c:	e0bff615 	stw	r2,-40(fp)
             }
             break;
   12970:	00003106 	br	12a38 <OSSemDel+0x250>

        case OS_DEL_ALWAYS:                                /* Always delete the semaphore              */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for semaphore    */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_OK);
   12974:	e13ffd17 	ldw	r4,-12(fp)
   12978:	000b883a 	mov	r5,zero
   1297c:	01800044 	movi	r6,1
   12980:	000f883a 	mov	r7,zero
   12984:	000e20c0 	call	e20c <OS_EventTaskRdy>
                 pevent_return          = pevent;
             }
             break;

        case OS_DEL_ALWAYS:                                /* Always delete the semaphore              */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for semaphore    */
   12988:	e0bffd17 	ldw	r2,-12(fp)
   1298c:	10800283 	ldbu	r2,10(r2)
   12990:	10803fcc 	andi	r2,r2,255
   12994:	103ff71e 	bne	r2,zero,12974 <__alt_mem_Flash_flash_data+0xf4012974>
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_OK);
             }
#if OS_EVENT_NAME_SIZE > 1
             pevent->OSEventName[0] = '?';                 /* Unknown name                             */
   12998:	e0bffd17 	ldw	r2,-12(fp)
   1299c:	00c00fc4 	movi	r3,63
   129a0:	10c00385 	stb	r3,14(r2)
             pevent->OSEventName[1] = OS_ASCII_NUL;
   129a4:	e0bffd17 	ldw	r2,-12(fp)
   129a8:	100003c5 	stb	zero,15(r2)
#endif
             pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
   129ac:	e0bffd17 	ldw	r2,-12(fp)
   129b0:	10000005 	stb	zero,0(r2)
             pevent->OSEventPtr     = OSEventFreeList;     /* Return Event Control Block to free list  */
   129b4:	008000b4 	movhi	r2,2
   129b8:	10b48c04 	addi	r2,r2,-11728
   129bc:	10c00017 	ldw	r3,0(r2)
   129c0:	e0bffd17 	ldw	r2,-12(fp)
   129c4:	10c00115 	stw	r3,4(r2)
             pevent->OSEventCnt     = 0;
   129c8:	e0bffd17 	ldw	r2,-12(fp)
   129cc:	1000020d 	sth	zero,8(r2)
             OSEventFreeList        = pevent;              /* Get next free event control block        */
   129d0:	008000b4 	movhi	r2,2
   129d4:	10b48c04 	addi	r2,r2,-11728
   129d8:	e0fffd17 	ldw	r3,-12(fp)
   129dc:	10c00015 	stw	r3,0(r2)
   129e0:	e0bff717 	ldw	r2,-36(fp)
   129e4:	e0bffb15 	stw	r2,-20(fp)
   129e8:	e0bffb17 	ldw	r2,-20(fp)
   129ec:	1001703a 	wrctl	status,r2
             OS_EXIT_CRITICAL();
             if (tasks_waiting == OS_TRUE) {               /* Reschedule only if task(s) were waiting  */
   129f0:	e0bff503 	ldbu	r2,-44(fp)
   129f4:	10800058 	cmpnei	r2,r2,1
   129f8:	1000011e 	bne	r2,zero,12a00 <OSSemDel+0x218>
                 OS_Sched();                               /* Find highest priority task ready to run  */
   129fc:	000ec240 	call	ec24 <OS_Sched>
             }
             *perr                  = OS_ERR_NONE;
   12a00:	e0bfff17 	ldw	r2,-4(fp)
   12a04:	10000005 	stb	zero,0(r2)
             pevent_return          = (OS_EVENT *)0;       /* Semaphore has been deleted               */
   12a08:	e03ff615 	stw	zero,-40(fp)
             break;
   12a0c:	00000a06 	br	12a38 <OSSemDel+0x250>
   12a10:	e0bff717 	ldw	r2,-36(fp)
   12a14:	e0bffc15 	stw	r2,-16(fp)
   12a18:	e0bffc17 	ldw	r2,-16(fp)
   12a1c:	1001703a 	wrctl	status,r2

        default:
             OS_EXIT_CRITICAL();
             *perr                  = OS_ERR_INVALID_OPT;
   12a20:	e0bfff17 	ldw	r2,-4(fp)
   12a24:	00c001c4 	movi	r3,7
   12a28:	10c00005 	stb	r3,0(r2)
             pevent_return          = pevent;
   12a2c:	e0bffd17 	ldw	r2,-12(fp)
   12a30:	e0bff615 	stw	r2,-40(fp)
             break;
   12a34:	0001883a 	nop
    }
    return (pevent_return);
   12a38:	e0bff617 	ldw	r2,-40(fp)
}
   12a3c:	e037883a 	mov	sp,fp
   12a40:	dfc00117 	ldw	ra,4(sp)
   12a44:	df000017 	ldw	fp,0(sp)
   12a48:	dec00204 	addi	sp,sp,8
   12a4c:	f800283a 	ret

00012a50 <OSSemPend>:
* Returns    : none
*********************************************************************************************************
*/
/*$PAGE*/
void  OSSemPend (OS_EVENT *pevent, INT16U timeout, INT8U *perr)
{
   12a50:	defff504 	addi	sp,sp,-44
   12a54:	dfc00a15 	stw	ra,40(sp)
   12a58:	df000915 	stw	fp,36(sp)
   12a5c:	df000904 	addi	fp,sp,36
   12a60:	e13ffd15 	stw	r4,-12(fp)
   12a64:	2805883a 	mov	r2,r5
   12a68:	e1bfff15 	stw	r6,-4(fp)
   12a6c:	e0bffe0d 	sth	r2,-8(fp)
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   12a70:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
   12a74:	e0bfff17 	ldw	r2,-4(fp)
   12a78:	1000011e 	bne	r2,zero,12a80 <OSSemPend+0x30>
        return;
   12a7c:	00008906 	br	12ca4 <OSSemPend+0x254>
    }
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
   12a80:	e0bffd17 	ldw	r2,-12(fp)
   12a84:	1000041e 	bne	r2,zero,12a98 <OSSemPend+0x48>
        *perr = OS_ERR_PEVENT_NULL;
   12a88:	e0bfff17 	ldw	r2,-4(fp)
   12a8c:	00c00104 	movi	r3,4
   12a90:	10c00005 	stb	r3,0(r2)
        return;
   12a94:	00008306 	br	12ca4 <OSSemPend+0x254>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
   12a98:	e0bffd17 	ldw	r2,-12(fp)
   12a9c:	10800003 	ldbu	r2,0(r2)
   12aa0:	10803fcc 	andi	r2,r2,255
   12aa4:	108000e0 	cmpeqi	r2,r2,3
   12aa8:	1000041e 	bne	r2,zero,12abc <OSSemPend+0x6c>
        *perr = OS_ERR_EVENT_TYPE;
   12aac:	e0bfff17 	ldw	r2,-4(fp)
   12ab0:	00c00044 	movi	r3,1
   12ab4:	10c00005 	stb	r3,0(r2)
        return;
   12ab8:	00007a06 	br	12ca4 <OSSemPend+0x254>
    }
    if (OSIntNesting > 0) {                           /* See if called from ISR ...                    */
   12abc:	008000b4 	movhi	r2,2
   12ac0:	10b48d04 	addi	r2,r2,-11724
   12ac4:	10800003 	ldbu	r2,0(r2)
   12ac8:	10803fcc 	andi	r2,r2,255
   12acc:	10000426 	beq	r2,zero,12ae0 <OSSemPend+0x90>
        *perr = OS_ERR_PEND_ISR;                      /* ... can't PEND from an ISR                    */
   12ad0:	e0bfff17 	ldw	r2,-4(fp)
   12ad4:	00c00084 	movi	r3,2
   12ad8:	10c00005 	stb	r3,0(r2)
        return;
   12adc:	00007106 	br	12ca4 <OSSemPend+0x254>
    }
    if (OSLockNesting > 0) {                          /* See if called with scheduler locked ...       */
   12ae0:	008000b4 	movhi	r2,2
   12ae4:	10b47f04 	addi	r2,r2,-11780
   12ae8:	10800003 	ldbu	r2,0(r2)
   12aec:	10803fcc 	andi	r2,r2,255
   12af0:	10000426 	beq	r2,zero,12b04 <OSSemPend+0xb4>
        *perr = OS_ERR_PEND_LOCKED;                   /* ... can't PEND when locked                    */
   12af4:	e0bfff17 	ldw	r2,-4(fp)
   12af8:	00c00344 	movi	r3,13
   12afc:	10c00005 	stb	r3,0(r2)
        return;
   12b00:	00006806 	br	12ca4 <OSSemPend+0x254>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   12b04:	0005303a 	rdctl	r2,status
   12b08:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   12b0c:	e0fff817 	ldw	r3,-32(fp)
   12b10:	00bfff84 	movi	r2,-2
   12b14:	1884703a 	and	r2,r3,r2
   12b18:	1001703a 	wrctl	status,r2
  
  return context;
   12b1c:	e0bff817 	ldw	r2,-32(fp)
    }
    OS_ENTER_CRITICAL();
   12b20:	e0bff715 	stw	r2,-36(fp)
    if (pevent->OSEventCnt > 0) {                     /* If sem. is positive, resource available ...   */
   12b24:	e0bffd17 	ldw	r2,-12(fp)
   12b28:	1080020b 	ldhu	r2,8(r2)
   12b2c:	10bfffcc 	andi	r2,r2,65535
   12b30:	10000d26 	beq	r2,zero,12b68 <OSSemPend+0x118>
        pevent->OSEventCnt--;                         /* ... decrement semaphore only if positive.     */
   12b34:	e0bffd17 	ldw	r2,-12(fp)
   12b38:	1080020b 	ldhu	r2,8(r2)
   12b3c:	10bfffc4 	addi	r2,r2,-1
   12b40:	1007883a 	mov	r3,r2
   12b44:	e0bffd17 	ldw	r2,-12(fp)
   12b48:	10c0020d 	sth	r3,8(r2)
   12b4c:	e0bff717 	ldw	r2,-36(fp)
   12b50:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   12b54:	e0bff917 	ldw	r2,-28(fp)
   12b58:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_NONE;
   12b5c:	e0bfff17 	ldw	r2,-4(fp)
   12b60:	10000005 	stb	zero,0(r2)
        return;
   12b64:	00004f06 	br	12ca4 <OSSemPend+0x254>
    }
                                                      /* Otherwise, must wait until event occurs       */
    OSTCBCur->OSTCBStat     |= OS_STAT_SEM;           /* Resource not available, pend on semaphore     */
   12b68:	008000b4 	movhi	r2,2
   12b6c:	10b48e04 	addi	r2,r2,-11720
   12b70:	10c00017 	ldw	r3,0(r2)
   12b74:	008000b4 	movhi	r2,2
   12b78:	10b48e04 	addi	r2,r2,-11720
   12b7c:	10800017 	ldw	r2,0(r2)
   12b80:	10800c03 	ldbu	r2,48(r2)
   12b84:	10800054 	ori	r2,r2,1
   12b88:	18800c05 	stb	r2,48(r3)
    OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
   12b8c:	008000b4 	movhi	r2,2
   12b90:	10b48e04 	addi	r2,r2,-11720
   12b94:	10800017 	ldw	r2,0(r2)
   12b98:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBDly       = timeout;               /* Store pend timeout in TCB                     */
   12b9c:	008000b4 	movhi	r2,2
   12ba0:	10b48e04 	addi	r2,r2,-11720
   12ba4:	10800017 	ldw	r2,0(r2)
   12ba8:	e0fffe0b 	ldhu	r3,-8(fp)
   12bac:	10c00b8d 	sth	r3,46(r2)
    OS_EventTaskWait(pevent);                         /* Suspend task until event or timeout occurs    */
   12bb0:	e13ffd17 	ldw	r4,-12(fp)
   12bb4:	000e3a40 	call	e3a4 <OS_EventTaskWait>
   12bb8:	e0bff717 	ldw	r2,-36(fp)
   12bbc:	e0bffa15 	stw	r2,-24(fp)
   12bc0:	e0bffa17 	ldw	r2,-24(fp)
   12bc4:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    OS_Sched();                                       /* Find next highest priority task ready         */
   12bc8:	000ec240 	call	ec24 <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   12bcc:	0005303a 	rdctl	r2,status
   12bd0:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   12bd4:	e0fffb17 	ldw	r3,-20(fp)
   12bd8:	00bfff84 	movi	r2,-2
   12bdc:	1884703a 	and	r2,r3,r2
   12be0:	1001703a 	wrctl	status,r2
  
  return context;
   12be4:	e0bffb17 	ldw	r2,-20(fp)
    OS_ENTER_CRITICAL();
   12be8:	e0bff715 	stw	r2,-36(fp)
    switch (OSTCBCur->OSTCBStatPend) {                /* See if we timed-out or aborted                */
   12bec:	008000b4 	movhi	r2,2
   12bf0:	10b48e04 	addi	r2,r2,-11720
   12bf4:	10800017 	ldw	r2,0(r2)
   12bf8:	10800c43 	ldbu	r2,49(r2)
   12bfc:	10803fcc 	andi	r2,r2,255
   12c00:	10000326 	beq	r2,zero,12c10 <OSSemPend+0x1c0>
   12c04:	108000a0 	cmpeqi	r2,r2,2
   12c08:	1000041e 	bne	r2,zero,12c1c <OSSemPend+0x1cc>
   12c0c:	00000706 	br	12c2c <OSSemPend+0x1dc>
        case OS_STAT_PEND_OK:
             *perr = OS_ERR_NONE;
   12c10:	e0bfff17 	ldw	r2,-4(fp)
   12c14:	10000005 	stb	zero,0(r2)
             break;
   12c18:	00000e06 	br	12c54 <OSSemPend+0x204>

        case OS_STAT_PEND_ABORT:
             *perr = OS_ERR_PEND_ABORT;               /* Indicate that we aborted                      */
   12c1c:	e0bfff17 	ldw	r2,-4(fp)
   12c20:	00c00384 	movi	r3,14
   12c24:	10c00005 	stb	r3,0(r2)
             break;
   12c28:	00000a06 	br	12c54 <OSSemPend+0x204>

        case OS_STAT_PEND_TO:
        default:        
             OS_EventTaskRemove(OSTCBCur, pevent);
   12c2c:	008000b4 	movhi	r2,2
   12c30:	10b48e04 	addi	r2,r2,-11720
   12c34:	10800017 	ldw	r2,0(r2)
   12c38:	1009883a 	mov	r4,r2
   12c3c:	e17ffd17 	ldw	r5,-12(fp)
   12c40:	000e5fc0 	call	e5fc <OS_EventTaskRemove>
             *perr = OS_ERR_TIMEOUT;                  /* Indicate that we didn't get event within TO   */
   12c44:	e0bfff17 	ldw	r2,-4(fp)
   12c48:	00c00284 	movi	r3,10
   12c4c:	10c00005 	stb	r3,0(r2)
             break;
   12c50:	0001883a 	nop
    }
    OSTCBCur->OSTCBStat          =  OS_STAT_RDY;      /* Set   task  status to ready                   */
   12c54:	008000b4 	movhi	r2,2
   12c58:	10b48e04 	addi	r2,r2,-11720
   12c5c:	10800017 	ldw	r2,0(r2)
   12c60:	10000c05 	stb	zero,48(r2)
    OSTCBCur->OSTCBStatPend      =  OS_STAT_PEND_OK;  /* Clear pend  status                            */
   12c64:	008000b4 	movhi	r2,2
   12c68:	10b48e04 	addi	r2,r2,-11720
   12c6c:	10800017 	ldw	r2,0(r2)
   12c70:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;    /* Clear event pointers                          */
   12c74:	008000b4 	movhi	r2,2
   12c78:	10b48e04 	addi	r2,r2,-11720
   12c7c:	10800017 	ldw	r2,0(r2)
   12c80:	10000715 	stw	zero,28(r2)
#if (OS_EVENT_MULTI_EN > 0)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
   12c84:	008000b4 	movhi	r2,2
   12c88:	10b48e04 	addi	r2,r2,-11720
   12c8c:	10800017 	ldw	r2,0(r2)
   12c90:	10000815 	stw	zero,32(r2)
   12c94:	e0bff717 	ldw	r2,-36(fp)
   12c98:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   12c9c:	e0bffc17 	ldw	r2,-16(fp)
   12ca0:	1001703a 	wrctl	status,r2
#endif
    OS_EXIT_CRITICAL();
}
   12ca4:	e037883a 	mov	sp,fp
   12ca8:	dfc00117 	ldw	ra,4(sp)
   12cac:	df000017 	ldw	fp,0(sp)
   12cb0:	dec00204 	addi	sp,sp,8
   12cb4:	f800283a 	ret

00012cb8 <OSSemPendAbort>:
*********************************************************************************************************
*/

#if OS_SEM_PEND_ABORT_EN > 0
INT8U  OSSemPendAbort (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
   12cb8:	defff604 	addi	sp,sp,-40
   12cbc:	dfc00915 	stw	ra,36(sp)
   12cc0:	df000815 	stw	fp,32(sp)
   12cc4:	df000804 	addi	fp,sp,32
   12cc8:	e13ffd15 	stw	r4,-12(fp)
   12ccc:	2805883a 	mov	r2,r5
   12cd0:	e1bfff15 	stw	r6,-4(fp)
   12cd4:	e0bffe05 	stb	r2,-8(fp)
    INT8U      nbr_tasks;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   12cd8:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
   12cdc:	e0bfff17 	ldw	r2,-4(fp)
   12ce0:	1000021e 	bne	r2,zero,12cec <OSSemPendAbort+0x34>
        return (0);
   12ce4:	0005883a 	mov	r2,zero
   12ce8:	00004906 	br	12e10 <OSSemPendAbort+0x158>
    }
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
   12cec:	e0bffd17 	ldw	r2,-12(fp)
   12cf0:	1000051e 	bne	r2,zero,12d08 <OSSemPendAbort+0x50>
        *perr = OS_ERR_PEVENT_NULL;
   12cf4:	e0bfff17 	ldw	r2,-4(fp)
   12cf8:	00c00104 	movi	r3,4
   12cfc:	10c00005 	stb	r3,0(r2)
        return (0);
   12d00:	0005883a 	mov	r2,zero
   12d04:	00004206 	br	12e10 <OSSemPendAbort+0x158>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
   12d08:	e0bffd17 	ldw	r2,-12(fp)
   12d0c:	10800003 	ldbu	r2,0(r2)
   12d10:	10803fcc 	andi	r2,r2,255
   12d14:	108000e0 	cmpeqi	r2,r2,3
   12d18:	1000051e 	bne	r2,zero,12d30 <OSSemPendAbort+0x78>
        *perr = OS_ERR_EVENT_TYPE;
   12d1c:	e0bfff17 	ldw	r2,-4(fp)
   12d20:	00c00044 	movi	r3,1
   12d24:	10c00005 	stb	r3,0(r2)
        return (0);
   12d28:	0005883a 	mov	r2,zero
   12d2c:	00003806 	br	12e10 <OSSemPendAbort+0x158>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   12d30:	0005303a 	rdctl	r2,status
   12d34:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   12d38:	e0fffa17 	ldw	r3,-24(fp)
   12d3c:	00bfff84 	movi	r2,-2
   12d40:	1884703a 	and	r2,r3,r2
   12d44:	1001703a 	wrctl	status,r2
  
  return context;
   12d48:	e0bffa17 	ldw	r2,-24(fp)
    }
    OS_ENTER_CRITICAL();
   12d4c:	e0bff915 	stw	r2,-28(fp)
    if (pevent->OSEventGrp != 0) {                    /* See if any task waiting on semaphore?         */
   12d50:	e0bffd17 	ldw	r2,-12(fp)
   12d54:	10800283 	ldbu	r2,10(r2)
   12d58:	10803fcc 	andi	r2,r2,255
   12d5c:	10002526 	beq	r2,zero,12df4 <OSSemPendAbort+0x13c>
        nbr_tasks = 0;
   12d60:	e03ff805 	stb	zero,-32(fp)
        switch (opt) {
   12d64:	e0bffe03 	ldbu	r2,-8(fp)
   12d68:	10800060 	cmpeqi	r2,r2,1
   12d6c:	10000e26 	beq	r2,zero,12da8 <OSSemPendAbort+0xf0>
            case OS_PEND_OPT_BROADCAST:               /* Do we need to abort ALL waiting tasks?        */
                 while (pevent->OSEventGrp != 0) {    /* Yes, ready ALL tasks waiting on semaphore     */
   12d70:	00000806 	br	12d94 <OSSemPendAbort+0xdc>
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_ABORT);
   12d74:	e13ffd17 	ldw	r4,-12(fp)
   12d78:	000b883a 	mov	r5,zero
   12d7c:	01800044 	movi	r6,1
   12d80:	01c00084 	movi	r7,2
   12d84:	000e20c0 	call	e20c <OS_EventTaskRdy>
                     nbr_tasks++;
   12d88:	e0bff803 	ldbu	r2,-32(fp)
   12d8c:	10800044 	addi	r2,r2,1
   12d90:	e0bff805 	stb	r2,-32(fp)
    OS_ENTER_CRITICAL();
    if (pevent->OSEventGrp != 0) {                    /* See if any task waiting on semaphore?         */
        nbr_tasks = 0;
        switch (opt) {
            case OS_PEND_OPT_BROADCAST:               /* Do we need to abort ALL waiting tasks?        */
                 while (pevent->OSEventGrp != 0) {    /* Yes, ready ALL tasks waiting on semaphore     */
   12d94:	e0bffd17 	ldw	r2,-12(fp)
   12d98:	10800283 	ldbu	r2,10(r2)
   12d9c:	10803fcc 	andi	r2,r2,255
   12da0:	103ff41e 	bne	r2,zero,12d74 <__alt_mem_Flash_flash_data+0xf4012d74>
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_ABORT);
                     nbr_tasks++;
                 }
                 break;
   12da4:	00000906 	br	12dcc <OSSemPendAbort+0x114>
                 
            case OS_PEND_OPT_NONE:
            default:                                  /* No,  ready HPT       waiting on semaphore     */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_ABORT);
   12da8:	e13ffd17 	ldw	r4,-12(fp)
   12dac:	000b883a 	mov	r5,zero
   12db0:	01800044 	movi	r6,1
   12db4:	01c00084 	movi	r7,2
   12db8:	000e20c0 	call	e20c <OS_EventTaskRdy>
                 nbr_tasks++;
   12dbc:	e0bff803 	ldbu	r2,-32(fp)
   12dc0:	10800044 	addi	r2,r2,1
   12dc4:	e0bff805 	stb	r2,-32(fp)
                 break;
   12dc8:	0001883a 	nop
   12dcc:	e0bff917 	ldw	r2,-28(fp)
   12dd0:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   12dd4:	e0bffb17 	ldw	r2,-20(fp)
   12dd8:	1001703a 	wrctl	status,r2
        }
        OS_EXIT_CRITICAL();
        OS_Sched();                                   /* Find HPT ready to run                         */
   12ddc:	000ec240 	call	ec24 <OS_Sched>
        *perr = OS_ERR_PEND_ABORT;
   12de0:	e0bfff17 	ldw	r2,-4(fp)
   12de4:	00c00384 	movi	r3,14
   12de8:	10c00005 	stb	r3,0(r2)
        return (nbr_tasks);
   12dec:	e0bff803 	ldbu	r2,-32(fp)
   12df0:	00000706 	br	12e10 <OSSemPendAbort+0x158>
   12df4:	e0bff917 	ldw	r2,-28(fp)
   12df8:	e0bffc15 	stw	r2,-16(fp)
   12dfc:	e0bffc17 	ldw	r2,-16(fp)
   12e00:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
   12e04:	e0bfff17 	ldw	r2,-4(fp)
   12e08:	10000005 	stb	zero,0(r2)
    return (0);                                       /* No tasks waiting on semaphore                 */
   12e0c:	0005883a 	mov	r2,zero
}
   12e10:	e037883a 	mov	sp,fp
   12e14:	dfc00117 	ldw	ra,4(sp)
   12e18:	df000017 	ldw	fp,0(sp)
   12e1c:	dec00204 	addi	sp,sp,8
   12e20:	f800283a 	ret

00012e24 <OSSemPost>:
*              OS_ERR_PEVENT_NULL  If 'pevent' is a NULL pointer.
*********************************************************************************************************
*/

INT8U  OSSemPost (OS_EVENT *pevent)
{
   12e24:	defff804 	addi	sp,sp,-32
   12e28:	dfc00715 	stw	ra,28(sp)
   12e2c:	df000615 	stw	fp,24(sp)
   12e30:	df000604 	addi	fp,sp,24
   12e34:	e13fff15 	stw	r4,-4(fp)
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   12e38:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
   12e3c:	e0bfff17 	ldw	r2,-4(fp)
   12e40:	1000021e 	bne	r2,zero,12e4c <OSSemPost+0x28>
        return (OS_ERR_PEVENT_NULL);
   12e44:	00800104 	movi	r2,4
   12e48:	00003506 	br	12f20 <OSSemPost+0xfc>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
   12e4c:	e0bfff17 	ldw	r2,-4(fp)
   12e50:	10800003 	ldbu	r2,0(r2)
   12e54:	10803fcc 	andi	r2,r2,255
   12e58:	108000e0 	cmpeqi	r2,r2,3
   12e5c:	1000021e 	bne	r2,zero,12e68 <OSSemPost+0x44>
        return (OS_ERR_EVENT_TYPE);
   12e60:	00800044 	movi	r2,1
   12e64:	00002e06 	br	12f20 <OSSemPost+0xfc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   12e68:	0005303a 	rdctl	r2,status
   12e6c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   12e70:	e0fffb17 	ldw	r3,-20(fp)
   12e74:	00bfff84 	movi	r2,-2
   12e78:	1884703a 	and	r2,r3,r2
   12e7c:	1001703a 	wrctl	status,r2
  
  return context;
   12e80:	e0bffb17 	ldw	r2,-20(fp)
    }
    OS_ENTER_CRITICAL();
   12e84:	e0bffa15 	stw	r2,-24(fp)
    if (pevent->OSEventGrp != 0) {                    /* See if any task waiting for semaphore         */
   12e88:	e0bfff17 	ldw	r2,-4(fp)
   12e8c:	10800283 	ldbu	r2,10(r2)
   12e90:	10803fcc 	andi	r2,r2,255
   12e94:	10000c26 	beq	r2,zero,12ec8 <OSSemPost+0xa4>
                                                      /* Ready HPT waiting on event                    */
        (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_OK);
   12e98:	e13fff17 	ldw	r4,-4(fp)
   12e9c:	000b883a 	mov	r5,zero
   12ea0:	01800044 	movi	r6,1
   12ea4:	000f883a 	mov	r7,zero
   12ea8:	000e20c0 	call	e20c <OS_EventTaskRdy>
   12eac:	e0bffa17 	ldw	r2,-24(fp)
   12eb0:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   12eb4:	e0bffc17 	ldw	r2,-16(fp)
   12eb8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                                   /* Find HPT ready to run                         */
   12ebc:	000ec240 	call	ec24 <OS_Sched>
        return (OS_ERR_NONE);
   12ec0:	0005883a 	mov	r2,zero
   12ec4:	00001606 	br	12f20 <OSSemPost+0xfc>
    }
    if (pevent->OSEventCnt < 65535u) {                /* Make sure semaphore will not overflow         */
   12ec8:	e0bfff17 	ldw	r2,-4(fp)
   12ecc:	1080020b 	ldhu	r2,8(r2)
   12ed0:	10ffffcc 	andi	r3,r2,65535
   12ed4:	00bfffd4 	movui	r2,65535
   12ed8:	18800c26 	beq	r3,r2,12f0c <OSSemPost+0xe8>
        pevent->OSEventCnt++;                         /* Increment semaphore count to register event   */
   12edc:	e0bfff17 	ldw	r2,-4(fp)
   12ee0:	1080020b 	ldhu	r2,8(r2)
   12ee4:	10800044 	addi	r2,r2,1
   12ee8:	1007883a 	mov	r3,r2
   12eec:	e0bfff17 	ldw	r2,-4(fp)
   12ef0:	10c0020d 	sth	r3,8(r2)
   12ef4:	e0bffa17 	ldw	r2,-24(fp)
   12ef8:	e0bffd15 	stw	r2,-12(fp)
   12efc:	e0bffd17 	ldw	r2,-12(fp)
   12f00:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_NONE);
   12f04:	0005883a 	mov	r2,zero
   12f08:	00000506 	br	12f20 <OSSemPost+0xfc>
   12f0c:	e0bffa17 	ldw	r2,-24(fp)
   12f10:	e0bffe15 	stw	r2,-8(fp)
   12f14:	e0bffe17 	ldw	r2,-8(fp)
   12f18:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();                               /* Semaphore value has reached its maximum       */
    return (OS_ERR_SEM_OVF);
   12f1c:	00800c84 	movi	r2,50
}
   12f20:	e037883a 	mov	sp,fp
   12f24:	dfc00117 	ldw	ra,4(sp)
   12f28:	df000017 	ldw	fp,0(sp)
   12f2c:	dec00204 	addi	sp,sp,8
   12f30:	f800283a 	ret

00012f34 <OSSemQuery>:
*********************************************************************************************************
*/

#if OS_SEM_QUERY_EN > 0
INT8U  OSSemQuery (OS_EVENT *pevent, OS_SEM_DATA *p_sem_data)
{
   12f34:	defff704 	addi	sp,sp,-36
   12f38:	df000815 	stw	fp,32(sp)
   12f3c:	df000804 	addi	fp,sp,32
   12f40:	e13ffe15 	stw	r4,-8(fp)
   12f44:	e17fff15 	stw	r5,-4(fp)
    INT16U    *psrc;
    INT16U    *pdest;
#endif
    INT8U      i;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
   12f48:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
   12f4c:	e0bffe17 	ldw	r2,-8(fp)
   12f50:	1000021e 	bne	r2,zero,12f5c <OSSemQuery+0x28>
        return (OS_ERR_PEVENT_NULL);
   12f54:	00800104 	movi	r2,4
   12f58:	00003606 	br	13034 <OSSemQuery+0x100>
    }
    if (p_sem_data == (OS_SEM_DATA *)0) {                  /* Validate 'p_sem_data'                    */
   12f5c:	e0bfff17 	ldw	r2,-4(fp)
   12f60:	1000021e 	bne	r2,zero,12f6c <OSSemQuery+0x38>
        return (OS_ERR_PDATA_NULL);
   12f64:	00800244 	movi	r2,9
   12f68:	00003206 	br	13034 <OSSemQuery+0x100>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {        /* Validate event block type                */
   12f6c:	e0bffe17 	ldw	r2,-8(fp)
   12f70:	10800003 	ldbu	r2,0(r2)
   12f74:	10803fcc 	andi	r2,r2,255
   12f78:	108000e0 	cmpeqi	r2,r2,3
   12f7c:	1000021e 	bne	r2,zero,12f88 <OSSemQuery+0x54>
        return (OS_ERR_EVENT_TYPE);
   12f80:	00800044 	movi	r2,1
   12f84:	00002b06 	br	13034 <OSSemQuery+0x100>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   12f88:	0005303a 	rdctl	r2,status
   12f8c:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   12f90:	e0fffc17 	ldw	r3,-16(fp)
   12f94:	00bfff84 	movi	r2,-2
   12f98:	1884703a 	and	r2,r3,r2
   12f9c:	1001703a 	wrctl	status,r2
  
  return context;
   12fa0:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
   12fa4:	e0bffb15 	stw	r2,-20(fp)
    p_sem_data->OSEventGrp = pevent->OSEventGrp;           /* Copy message mailbox wait list           */
   12fa8:	e0bffe17 	ldw	r2,-8(fp)
   12fac:	10c00283 	ldbu	r3,10(r2)
   12fb0:	e0bfff17 	ldw	r2,-4(fp)
   12fb4:	10c00145 	stb	r3,5(r2)
    psrc                   = &pevent->OSEventTbl[0];
   12fb8:	e0bffe17 	ldw	r2,-8(fp)
   12fbc:	108002c4 	addi	r2,r2,11
   12fc0:	e0bff815 	stw	r2,-32(fp)
    pdest                  = &p_sem_data->OSEventTbl[0];
   12fc4:	e0bfff17 	ldw	r2,-4(fp)
   12fc8:	10800084 	addi	r2,r2,2
   12fcc:	e0bff915 	stw	r2,-28(fp)
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
   12fd0:	e03ffa05 	stb	zero,-24(fp)
   12fd4:	00000b06 	br	13004 <OSSemQuery+0xd0>
        *pdest++ = *psrc++;
   12fd8:	e0bff917 	ldw	r2,-28(fp)
   12fdc:	10c00044 	addi	r3,r2,1
   12fe0:	e0fff915 	stw	r3,-28(fp)
   12fe4:	e0fff817 	ldw	r3,-32(fp)
   12fe8:	19000044 	addi	r4,r3,1
   12fec:	e13ff815 	stw	r4,-32(fp)
   12ff0:	18c00003 	ldbu	r3,0(r3)
   12ff4:	10c00005 	stb	r3,0(r2)
    }
    OS_ENTER_CRITICAL();
    p_sem_data->OSEventGrp = pevent->OSEventGrp;           /* Copy message mailbox wait list           */
    psrc                   = &pevent->OSEventTbl[0];
    pdest                  = &p_sem_data->OSEventTbl[0];
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
   12ff8:	e0bffa03 	ldbu	r2,-24(fp)
   12ffc:	10800044 	addi	r2,r2,1
   13000:	e0bffa05 	stb	r2,-24(fp)
   13004:	e0bffa03 	ldbu	r2,-24(fp)
   13008:	108000f0 	cmpltui	r2,r2,3
   1300c:	103ff21e 	bne	r2,zero,12fd8 <__alt_mem_Flash_flash_data+0xf4012fd8>
        *pdest++ = *psrc++;
    }
    p_sem_data->OSCnt = pevent->OSEventCnt;                /* Get semaphore count                      */
   13010:	e0bffe17 	ldw	r2,-8(fp)
   13014:	10c0020b 	ldhu	r3,8(r2)
   13018:	e0bfff17 	ldw	r2,-4(fp)
   1301c:	10c0000d 	sth	r3,0(r2)
   13020:	e0bffb17 	ldw	r2,-20(fp)
   13024:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   13028:	e0bffd17 	ldw	r2,-12(fp)
   1302c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
   13030:	0005883a 	mov	r2,zero
}
   13034:	e037883a 	mov	sp,fp
   13038:	df000017 	ldw	fp,0(sp)
   1303c:	dec00104 	addi	sp,sp,4
   13040:	f800283a 	ret

00013044 <OSSemSet>:
*********************************************************************************************************
*/

#if OS_SEM_SET_EN > 0
void  OSSemSet (OS_EVENT *pevent, INT16U cnt, INT8U *perr)
{
   13044:	defff904 	addi	sp,sp,-28
   13048:	df000615 	stw	fp,24(sp)
   1304c:	df000604 	addi	fp,sp,24
   13050:	e13ffd15 	stw	r4,-12(fp)
   13054:	2805883a 	mov	r2,r5
   13058:	e1bfff15 	stw	r6,-4(fp)
   1305c:	e0bffe0d 	sth	r2,-8(fp)
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   13060:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
   13064:	e0bfff17 	ldw	r2,-4(fp)
   13068:	1000011e 	bne	r2,zero,13070 <OSSemSet+0x2c>
        return;
   1306c:	00003006 	br	13130 <OSSemSet+0xec>
    }
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
   13070:	e0bffd17 	ldw	r2,-12(fp)
   13074:	1000041e 	bne	r2,zero,13088 <OSSemSet+0x44>
        *perr = OS_ERR_PEVENT_NULL;
   13078:	e0bfff17 	ldw	r2,-4(fp)
   1307c:	00c00104 	movi	r3,4
   13080:	10c00005 	stb	r3,0(r2)
        return;
   13084:	00002a06 	br	13130 <OSSemSet+0xec>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
   13088:	e0bffd17 	ldw	r2,-12(fp)
   1308c:	10800003 	ldbu	r2,0(r2)
   13090:	10803fcc 	andi	r2,r2,255
   13094:	108000e0 	cmpeqi	r2,r2,3
   13098:	1000041e 	bne	r2,zero,130ac <OSSemSet+0x68>
        *perr = OS_ERR_EVENT_TYPE;
   1309c:	e0bfff17 	ldw	r2,-4(fp)
   130a0:	00c00044 	movi	r3,1
   130a4:	10c00005 	stb	r3,0(r2)
        return;
   130a8:	00002106 	br	13130 <OSSemSet+0xec>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   130ac:	0005303a 	rdctl	r2,status
   130b0:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   130b4:	e0fffb17 	ldw	r3,-20(fp)
   130b8:	00bfff84 	movi	r2,-2
   130bc:	1884703a 	and	r2,r3,r2
   130c0:	1001703a 	wrctl	status,r2
  
  return context;
   130c4:	e0bffb17 	ldw	r2,-20(fp)
    }
    OS_ENTER_CRITICAL();
   130c8:	e0bffa15 	stw	r2,-24(fp)
    *perr = OS_ERR_NONE;
   130cc:	e0bfff17 	ldw	r2,-4(fp)
   130d0:	10000005 	stb	zero,0(r2)
    if (pevent->OSEventCnt > 0) {                     /* See if semaphore already has a count          */
   130d4:	e0bffd17 	ldw	r2,-12(fp)
   130d8:	1080020b 	ldhu	r2,8(r2)
   130dc:	10bfffcc 	andi	r2,r2,65535
   130e0:	10000426 	beq	r2,zero,130f4 <OSSemSet+0xb0>
        pevent->OSEventCnt = cnt;                     /* Yes, set it to the new value specified.       */
   130e4:	e0bffd17 	ldw	r2,-12(fp)
   130e8:	e0fffe0b 	ldhu	r3,-8(fp)
   130ec:	10c0020d 	sth	r3,8(r2)
   130f0:	00000b06 	br	13120 <OSSemSet+0xdc>
    } else {                                          /* No                                            */
        if (pevent->OSEventGrp == 0) {                /*      See if task(s) waiting?                  */
   130f4:	e0bffd17 	ldw	r2,-12(fp)
   130f8:	10800283 	ldbu	r2,10(r2)
   130fc:	10803fcc 	andi	r2,r2,255
   13100:	1000041e 	bne	r2,zero,13114 <OSSemSet+0xd0>
            pevent->OSEventCnt = cnt;                 /*      No, OK to set the value                  */
   13104:	e0bffd17 	ldw	r2,-12(fp)
   13108:	e0fffe0b 	ldhu	r3,-8(fp)
   1310c:	10c0020d 	sth	r3,8(r2)
   13110:	00000306 	br	13120 <OSSemSet+0xdc>
        } else {
            *perr              = OS_ERR_TASK_WAITING;
   13114:	e0bfff17 	ldw	r2,-4(fp)
   13118:	00c01244 	movi	r3,73
   1311c:	10c00005 	stb	r3,0(r2)
   13120:	e0bffa17 	ldw	r2,-24(fp)
   13124:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   13128:	e0bffc17 	ldw	r2,-16(fp)
   1312c:	1001703a 	wrctl	status,r2
        }
    }
    OS_EXIT_CRITICAL();
}
   13130:	e037883a 	mov	sp,fp
   13134:	df000017 	ldw	fp,0(sp)
   13138:	dec00104 	addi	sp,sp,4
   1313c:	f800283a 	ret

00013140 <OSTaskChangePrio>:
*********************************************************************************************************
*/

#if OS_TASK_CHANGE_PRIO_EN > 0
INT8U  OSTaskChangePrio (INT8U oldprio, INT8U newprio)
{
   13140:	defff104 	addi	sp,sp,-60
   13144:	dfc00e15 	stw	ra,56(sp)
   13148:	df000d15 	stw	fp,52(sp)
   1314c:	df000d04 	addi	fp,sp,52
   13150:	2007883a 	mov	r3,r4
   13154:	2805883a 	mov	r2,r5
   13158:	e0fffe05 	stb	r3,-8(fp)
   1315c:	e0bfff05 	stb	r2,-4(fp)
    INT16U     bitx_new;
    INT16U     bity_old;
    INT16U     bitx_old;
#endif
#if OS_CRITICAL_METHOD == 3
    OS_CPU_SR  cpu_sr = 0;                                  /* Storage for CPU status register         */
   13160:	e03ff515 	stw	zero,-44(fp)
#endif


/*$PAGE*/
#if OS_ARG_CHK_EN > 0
    if (oldprio >= OS_LOWEST_PRIO) {
   13164:	e0bffe03 	ldbu	r2,-8(fp)
   13168:	10800530 	cmpltui	r2,r2,20
   1316c:	1000051e 	bne	r2,zero,13184 <OSTaskChangePrio+0x44>
        if (oldprio != OS_PRIO_SELF) {
   13170:	e0bffe03 	ldbu	r2,-8(fp)
   13174:	10803fe0 	cmpeqi	r2,r2,255
   13178:	1000021e 	bne	r2,zero,13184 <OSTaskChangePrio+0x44>
            return (OS_ERR_PRIO_INVALID);
   1317c:	00800a84 	movi	r2,42
   13180:	00013a06 	br	1366c <OSTaskChangePrio+0x52c>
        }
    }
    if (newprio >= OS_LOWEST_PRIO) {
   13184:	e0bfff03 	ldbu	r2,-4(fp)
   13188:	10800530 	cmpltui	r2,r2,20
   1318c:	1000021e 	bne	r2,zero,13198 <OSTaskChangePrio+0x58>
        return (OS_ERR_PRIO_INVALID);
   13190:	00800a84 	movi	r2,42
   13194:	00013506 	br	1366c <OSTaskChangePrio+0x52c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   13198:	0005303a 	rdctl	r2,status
   1319c:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   131a0:	e0fff917 	ldw	r3,-28(fp)
   131a4:	00bfff84 	movi	r2,-2
   131a8:	1884703a 	and	r2,r3,r2
   131ac:	1001703a 	wrctl	status,r2
  
  return context;
   131b0:	e0bff917 	ldw	r2,-28(fp)
    }
#endif
    OS_ENTER_CRITICAL();
   131b4:	e0bff515 	stw	r2,-44(fp)
    if (OSTCBPrioTbl[newprio] != (OS_TCB *)0) {             /* New priority must not already exist     */
   131b8:	e0ffff03 	ldbu	r3,-4(fp)
   131bc:	008000f4 	movhi	r2,3
   131c0:	10a11f04 	addi	r2,r2,-31620
   131c4:	18c7883a 	add	r3,r3,r3
   131c8:	18c7883a 	add	r3,r3,r3
   131cc:	10c5883a 	add	r2,r2,r3
   131d0:	10800017 	ldw	r2,0(r2)
   131d4:	10000626 	beq	r2,zero,131f0 <OSTaskChangePrio+0xb0>
   131d8:	e0bff517 	ldw	r2,-44(fp)
   131dc:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   131e0:	e0bffa17 	ldw	r2,-24(fp)
   131e4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_PRIO_EXIST);
   131e8:	00800a04 	movi	r2,40
   131ec:	00011f06 	br	1366c <OSTaskChangePrio+0x52c>
    }
    if (oldprio == OS_PRIO_SELF) {                          /* See if changing self                    */
   131f0:	e0bffe03 	ldbu	r2,-8(fp)
   131f4:	10803fd8 	cmpnei	r2,r2,255
   131f8:	1000051e 	bne	r2,zero,13210 <OSTaskChangePrio+0xd0>
        oldprio = OSTCBCur->OSTCBPrio;                      /* Yes, get priority                       */
   131fc:	008000b4 	movhi	r2,2
   13200:	10b48e04 	addi	r2,r2,-11720
   13204:	10800017 	ldw	r2,0(r2)
   13208:	10800c83 	ldbu	r2,50(r2)
   1320c:	e0bffe05 	stb	r2,-8(fp)
    }
    ptcb = OSTCBPrioTbl[oldprio];
   13210:	e0fffe03 	ldbu	r3,-8(fp)
   13214:	008000f4 	movhi	r2,3
   13218:	10a11f04 	addi	r2,r2,-31620
   1321c:	18c7883a 	add	r3,r3,r3
   13220:	18c7883a 	add	r3,r3,r3
   13224:	10c5883a 	add	r2,r2,r3
   13228:	10800017 	ldw	r2,0(r2)
   1322c:	e0bff615 	stw	r2,-40(fp)
    if (ptcb == (OS_TCB *)0) {                              /* Does task to change exist?              */
   13230:	e0bff617 	ldw	r2,-40(fp)
   13234:	1000061e 	bne	r2,zero,13250 <OSTaskChangePrio+0x110>
   13238:	e0bff517 	ldw	r2,-44(fp)
   1323c:	e0bffb15 	stw	r2,-20(fp)
   13240:	e0bffb17 	ldw	r2,-20(fp)
   13244:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                                 /* No, can't change its priority!          */
        return (OS_ERR_PRIO);
   13248:	00800a44 	movi	r2,41
   1324c:	00010706 	br	1366c <OSTaskChangePrio+0x52c>
    }
    if (ptcb == OS_TCB_RESERVED) {                          /* Is task assigned to Mutex               */
   13250:	e0bff617 	ldw	r2,-40(fp)
   13254:	10800058 	cmpnei	r2,r2,1
   13258:	1000061e 	bne	r2,zero,13274 <OSTaskChangePrio+0x134>
   1325c:	e0bff517 	ldw	r2,-44(fp)
   13260:	e0bffc15 	stw	r2,-16(fp)
   13264:	e0bffc17 	ldw	r2,-16(fp)
   13268:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                                 /* No, can't change its priority!          */
        return (OS_ERR_TASK_NOT_EXIST);
   1326c:	008010c4 	movi	r2,67
   13270:	0000fe06 	br	1366c <OSTaskChangePrio+0x52c>
    }
#if OS_LOWEST_PRIO <= 63
    y_new                 = (INT8U)(newprio >> 3);          /* Yes, compute new TCB fields             */
   13274:	e0bfff03 	ldbu	r2,-4(fp)
   13278:	1004d0fa 	srli	r2,r2,3
   1327c:	e0bff705 	stb	r2,-36(fp)
    x_new                 = (INT8U)(newprio & 0x07);
   13280:	e0bfff03 	ldbu	r2,-4(fp)
   13284:	108001cc 	andi	r2,r2,7
   13288:	e0bff745 	stb	r2,-35(fp)
    bity_new              = (INT8U)(1 << y_new);
   1328c:	e0bff703 	ldbu	r2,-36(fp)
   13290:	00c00044 	movi	r3,1
   13294:	1884983a 	sll	r2,r3,r2
   13298:	e0bff785 	stb	r2,-34(fp)
    bitx_new              = (INT8U)(1 << x_new);
   1329c:	e0bff743 	ldbu	r2,-35(fp)
   132a0:	00c00044 	movi	r3,1
   132a4:	1884983a 	sll	r2,r3,r2
   132a8:	e0bff7c5 	stb	r2,-33(fp)
    x_new                 = (INT8U)( newprio & 0x0F);
    bity_new              = (INT16U)(1 << y_new);
    bitx_new              = (INT16U)(1 << x_new);
#endif

    OSTCBPrioTbl[oldprio] = (OS_TCB *)0;                    /* Remove TCB from old priority            */
   132ac:	e0fffe03 	ldbu	r3,-8(fp)
   132b0:	008000f4 	movhi	r2,3
   132b4:	10a11f04 	addi	r2,r2,-31620
   132b8:	18c7883a 	add	r3,r3,r3
   132bc:	18c7883a 	add	r3,r3,r3
   132c0:	10c5883a 	add	r2,r2,r3
   132c4:	10000015 	stw	zero,0(r2)
    OSTCBPrioTbl[newprio] =  ptcb;                          /* Place pointer to TCB @ new priority     */
   132c8:	e0ffff03 	ldbu	r3,-4(fp)
   132cc:	008000f4 	movhi	r2,3
   132d0:	10a11f04 	addi	r2,r2,-31620
   132d4:	18c7883a 	add	r3,r3,r3
   132d8:	18c7883a 	add	r3,r3,r3
   132dc:	10c5883a 	add	r2,r2,r3
   132e0:	e0fff617 	ldw	r3,-40(fp)
   132e4:	10c00015 	stw	r3,0(r2)
    y_old                 =  ptcb->OSTCBY;
   132e8:	e0bff617 	ldw	r2,-40(fp)
   132ec:	10800d03 	ldbu	r2,52(r2)
   132f0:	e0bff805 	stb	r2,-32(fp)
    bity_old              =  ptcb->OSTCBBitY;
   132f4:	e0bff617 	ldw	r2,-40(fp)
   132f8:	10800d83 	ldbu	r2,54(r2)
   132fc:	e0bff845 	stb	r2,-31(fp)
    bitx_old              =  ptcb->OSTCBBitX;
   13300:	e0bff617 	ldw	r2,-40(fp)
   13304:	10800d43 	ldbu	r2,53(r2)
   13308:	e0bff885 	stb	r2,-30(fp)
    if ((OSRdyTbl[y_old] &   bitx_old) != 0) {              /* If task is ready make it not            */
   1330c:	e0fff803 	ldbu	r3,-32(fp)
   13310:	008000b4 	movhi	r2,2
   13314:	10b48b44 	addi	r2,r2,-11731
   13318:	10c5883a 	add	r2,r2,r3
   1331c:	10c00003 	ldbu	r3,0(r2)
   13320:	e0bff883 	ldbu	r2,-30(fp)
   13324:	1884703a 	and	r2,r3,r2
   13328:	10803fcc 	andi	r2,r2,255
   1332c:	10003726 	beq	r2,zero,1340c <OSTaskChangePrio+0x2cc>
         OSRdyTbl[y_old] &= ~bitx_old;
   13330:	e0fff803 	ldbu	r3,-32(fp)
   13334:	e13ff803 	ldbu	r4,-32(fp)
   13338:	008000b4 	movhi	r2,2
   1333c:	10b48b44 	addi	r2,r2,-11731
   13340:	1105883a 	add	r2,r2,r4
   13344:	10800003 	ldbu	r2,0(r2)
   13348:	1009883a 	mov	r4,r2
   1334c:	e0bff883 	ldbu	r2,-30(fp)
   13350:	0084303a 	nor	r2,zero,r2
   13354:	2084703a 	and	r2,r4,r2
   13358:	1009883a 	mov	r4,r2
   1335c:	008000b4 	movhi	r2,2
   13360:	10b48b44 	addi	r2,r2,-11731
   13364:	10c5883a 	add	r2,r2,r3
   13368:	11000005 	stb	r4,0(r2)
         if (OSRdyTbl[y_old] == 0) {
   1336c:	e0fff803 	ldbu	r3,-32(fp)
   13370:	008000b4 	movhi	r2,2
   13374:	10b48b44 	addi	r2,r2,-11731
   13378:	10c5883a 	add	r2,r2,r3
   1337c:	10800003 	ldbu	r2,0(r2)
   13380:	10803fcc 	andi	r2,r2,255
   13384:	10000b1e 	bne	r2,zero,133b4 <OSTaskChangePrio+0x274>
             OSRdyGrp &= ~bity_old;
   13388:	e0bff843 	ldbu	r2,-31(fp)
   1338c:	0084303a 	nor	r2,zero,r2
   13390:	1007883a 	mov	r3,r2
   13394:	008000b4 	movhi	r2,2
   13398:	10b48b04 	addi	r2,r2,-11732
   1339c:	10800003 	ldbu	r2,0(r2)
   133a0:	1884703a 	and	r2,r3,r2
   133a4:	1007883a 	mov	r3,r2
   133a8:	008000b4 	movhi	r2,2
   133ac:	10b48b04 	addi	r2,r2,-11732
   133b0:	10c00005 	stb	r3,0(r2)
         }
         OSRdyGrp        |= bity_new;                       /* Make new priority ready to run          */
   133b4:	008000b4 	movhi	r2,2
   133b8:	10b48b04 	addi	r2,r2,-11732
   133bc:	10c00003 	ldbu	r3,0(r2)
   133c0:	e0bff783 	ldbu	r2,-34(fp)
   133c4:	1884b03a 	or	r2,r3,r2
   133c8:	1007883a 	mov	r3,r2
   133cc:	008000b4 	movhi	r2,2
   133d0:	10b48b04 	addi	r2,r2,-11732
   133d4:	10c00005 	stb	r3,0(r2)
         OSRdyTbl[y_new] |= bitx_new;
   133d8:	e0fff703 	ldbu	r3,-36(fp)
   133dc:	e13ff703 	ldbu	r4,-36(fp)
   133e0:	008000b4 	movhi	r2,2
   133e4:	10b48b44 	addi	r2,r2,-11731
   133e8:	1105883a 	add	r2,r2,r4
   133ec:	11000003 	ldbu	r4,0(r2)
   133f0:	e0bff7c3 	ldbu	r2,-33(fp)
   133f4:	2084b03a 	or	r2,r4,r2
   133f8:	1009883a 	mov	r4,r2
   133fc:	008000b4 	movhi	r2,2
   13400:	10b48b44 	addi	r2,r2,-11731
   13404:	10c5883a 	add	r2,r2,r3
   13408:	11000005 	stb	r4,0(r2)
    }

#if (OS_EVENT_EN)
    pevent = ptcb->OSTCBEventPtr;
   1340c:	e0bff617 	ldw	r2,-40(fp)
   13410:	10800717 	ldw	r2,28(r2)
   13414:	e0bff315 	stw	r2,-52(fp)
    if (pevent != (OS_EVENT *)0) {
   13418:	e0bff317 	ldw	r2,-52(fp)
   1341c:	10003326 	beq	r2,zero,134ec <OSTaskChangePrio+0x3ac>
        pevent->OSEventTbl[y_old] &= ~bitx_old;             /* Remove old task prio from wait list     */
   13420:	e0bff803 	ldbu	r2,-32(fp)
   13424:	e0fff803 	ldbu	r3,-32(fp)
   13428:	e13ff317 	ldw	r4,-52(fp)
   1342c:	20c7883a 	add	r3,r4,r3
   13430:	18c00204 	addi	r3,r3,8
   13434:	18c000c3 	ldbu	r3,3(r3)
   13438:	1809883a 	mov	r4,r3
   1343c:	e0fff883 	ldbu	r3,-30(fp)
   13440:	00c6303a 	nor	r3,zero,r3
   13444:	20c6703a 	and	r3,r4,r3
   13448:	1809883a 	mov	r4,r3
   1344c:	e0fff317 	ldw	r3,-52(fp)
   13450:	1885883a 	add	r2,r3,r2
   13454:	10800204 	addi	r2,r2,8
   13458:	110000c5 	stb	r4,3(r2)
        if (pevent->OSEventTbl[y_old] == 0) {
   1345c:	e0bff803 	ldbu	r2,-32(fp)
   13460:	e0fff317 	ldw	r3,-52(fp)
   13464:	1885883a 	add	r2,r3,r2
   13468:	10800204 	addi	r2,r2,8
   1346c:	108000c3 	ldbu	r2,3(r2)
   13470:	10803fcc 	andi	r2,r2,255
   13474:	1000091e 	bne	r2,zero,1349c <OSTaskChangePrio+0x35c>
            pevent->OSEventGrp    &= ~bity_old;
   13478:	e0bff317 	ldw	r2,-52(fp)
   1347c:	10800283 	ldbu	r2,10(r2)
   13480:	1007883a 	mov	r3,r2
   13484:	e0bff843 	ldbu	r2,-31(fp)
   13488:	0084303a 	nor	r2,zero,r2
   1348c:	1884703a 	and	r2,r3,r2
   13490:	1007883a 	mov	r3,r2
   13494:	e0bff317 	ldw	r2,-52(fp)
   13498:	10c00285 	stb	r3,10(r2)
        }
        pevent->OSEventGrp        |= bity_new;              /* Add    new task prio to   wait list     */
   1349c:	e0bff317 	ldw	r2,-52(fp)
   134a0:	10c00283 	ldbu	r3,10(r2)
   134a4:	e0bff783 	ldbu	r2,-34(fp)
   134a8:	1884b03a 	or	r2,r3,r2
   134ac:	1007883a 	mov	r3,r2
   134b0:	e0bff317 	ldw	r2,-52(fp)
   134b4:	10c00285 	stb	r3,10(r2)
        pevent->OSEventTbl[y_new] |= bitx_new;
   134b8:	e0bff703 	ldbu	r2,-36(fp)
   134bc:	e0fff703 	ldbu	r3,-36(fp)
   134c0:	e13ff317 	ldw	r4,-52(fp)
   134c4:	20c7883a 	add	r3,r4,r3
   134c8:	18c00204 	addi	r3,r3,8
   134cc:	190000c3 	ldbu	r4,3(r3)
   134d0:	e0fff7c3 	ldbu	r3,-33(fp)
   134d4:	20c6b03a 	or	r3,r4,r3
   134d8:	1809883a 	mov	r4,r3
   134dc:	e0fff317 	ldw	r3,-52(fp)
   134e0:	1885883a 	add	r2,r3,r2
   134e4:	10800204 	addi	r2,r2,8
   134e8:	110000c5 	stb	r4,3(r2)
    }
#if (OS_EVENT_MULTI_EN > 0)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {
   134ec:	e0bff617 	ldw	r2,-40(fp)
   134f0:	10800817 	ldw	r2,32(r2)
   134f4:	10004226 	beq	r2,zero,13600 <OSTaskChangePrio+0x4c0>
        pevents =  ptcb->OSTCBEventMultiPtr;
   134f8:	e0bff617 	ldw	r2,-40(fp)
   134fc:	10800817 	ldw	r2,32(r2)
   13500:	e0bff415 	stw	r2,-48(fp)
        pevent  = *pevents;
   13504:	e0bff417 	ldw	r2,-48(fp)
   13508:	10800017 	ldw	r2,0(r2)
   1350c:	e0bff315 	stw	r2,-52(fp)
        while (pevent != (OS_EVENT *)0) {
   13510:	00003906 	br	135f8 <OSTaskChangePrio+0x4b8>
            pevent->OSEventTbl[y_old] &= ~bitx_old;         /* Remove old task prio from wait lists    */
   13514:	e0bff803 	ldbu	r2,-32(fp)
   13518:	e0fff803 	ldbu	r3,-32(fp)
   1351c:	e13ff317 	ldw	r4,-52(fp)
   13520:	20c7883a 	add	r3,r4,r3
   13524:	18c00204 	addi	r3,r3,8
   13528:	18c000c3 	ldbu	r3,3(r3)
   1352c:	1809883a 	mov	r4,r3
   13530:	e0fff883 	ldbu	r3,-30(fp)
   13534:	00c6303a 	nor	r3,zero,r3
   13538:	20c6703a 	and	r3,r4,r3
   1353c:	1809883a 	mov	r4,r3
   13540:	e0fff317 	ldw	r3,-52(fp)
   13544:	1885883a 	add	r2,r3,r2
   13548:	10800204 	addi	r2,r2,8
   1354c:	110000c5 	stb	r4,3(r2)
            if (pevent->OSEventTbl[y_old] == 0) {
   13550:	e0bff803 	ldbu	r2,-32(fp)
   13554:	e0fff317 	ldw	r3,-52(fp)
   13558:	1885883a 	add	r2,r3,r2
   1355c:	10800204 	addi	r2,r2,8
   13560:	108000c3 	ldbu	r2,3(r2)
   13564:	10803fcc 	andi	r2,r2,255
   13568:	1000091e 	bne	r2,zero,13590 <OSTaskChangePrio+0x450>
                pevent->OSEventGrp    &= ~bity_old;
   1356c:	e0bff317 	ldw	r2,-52(fp)
   13570:	10800283 	ldbu	r2,10(r2)
   13574:	1007883a 	mov	r3,r2
   13578:	e0bff843 	ldbu	r2,-31(fp)
   1357c:	0084303a 	nor	r2,zero,r2
   13580:	1884703a 	and	r2,r3,r2
   13584:	1007883a 	mov	r3,r2
   13588:	e0bff317 	ldw	r2,-52(fp)
   1358c:	10c00285 	stb	r3,10(r2)
            }
            pevent->OSEventGrp        |= bity_new;          /* Add    new task prio to   wait lists    */
   13590:	e0bff317 	ldw	r2,-52(fp)
   13594:	10c00283 	ldbu	r3,10(r2)
   13598:	e0bff783 	ldbu	r2,-34(fp)
   1359c:	1884b03a 	or	r2,r3,r2
   135a0:	1007883a 	mov	r3,r2
   135a4:	e0bff317 	ldw	r2,-52(fp)
   135a8:	10c00285 	stb	r3,10(r2)
            pevent->OSEventTbl[y_new] |= bitx_new;
   135ac:	e0bff703 	ldbu	r2,-36(fp)
   135b0:	e0fff703 	ldbu	r3,-36(fp)
   135b4:	e13ff317 	ldw	r4,-52(fp)
   135b8:	20c7883a 	add	r3,r4,r3
   135bc:	18c00204 	addi	r3,r3,8
   135c0:	190000c3 	ldbu	r4,3(r3)
   135c4:	e0fff7c3 	ldbu	r3,-33(fp)
   135c8:	20c6b03a 	or	r3,r4,r3
   135cc:	1809883a 	mov	r4,r3
   135d0:	e0fff317 	ldw	r3,-52(fp)
   135d4:	1885883a 	add	r2,r3,r2
   135d8:	10800204 	addi	r2,r2,8
   135dc:	110000c5 	stb	r4,3(r2)
            pevents++;
   135e0:	e0bff417 	ldw	r2,-48(fp)
   135e4:	10800104 	addi	r2,r2,4
   135e8:	e0bff415 	stw	r2,-48(fp)
            pevent                     = *pevents;
   135ec:	e0bff417 	ldw	r2,-48(fp)
   135f0:	10800017 	ldw	r2,0(r2)
   135f4:	e0bff315 	stw	r2,-52(fp)
    }
#if (OS_EVENT_MULTI_EN > 0)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {
        pevents =  ptcb->OSTCBEventMultiPtr;
        pevent  = *pevents;
        while (pevent != (OS_EVENT *)0) {
   135f8:	e0bff317 	ldw	r2,-52(fp)
   135fc:	103fc51e 	bne	r2,zero,13514 <__alt_mem_Flash_flash_data+0xf4013514>
        }
    }
#endif
#endif

    ptcb->OSTCBPrio = newprio;                              /* Set new task priority                   */
   13600:	e0bff617 	ldw	r2,-40(fp)
   13604:	e0ffff03 	ldbu	r3,-4(fp)
   13608:	10c00c85 	stb	r3,50(r2)
    ptcb->OSTCBY    = y_new;
   1360c:	e0bff617 	ldw	r2,-40(fp)
   13610:	e0fff703 	ldbu	r3,-36(fp)
   13614:	10c00d05 	stb	r3,52(r2)
    ptcb->OSTCBX    = x_new;
   13618:	e0bff617 	ldw	r2,-40(fp)
   1361c:	e0fff743 	ldbu	r3,-35(fp)
   13620:	10c00cc5 	stb	r3,51(r2)
    ptcb->OSTCBBitY = bity_new;
   13624:	e0bff617 	ldw	r2,-40(fp)
   13628:	e0fff783 	ldbu	r3,-34(fp)
   1362c:	10c00d85 	stb	r3,54(r2)
    ptcb->OSTCBBitX = bitx_new;
   13630:	e0bff617 	ldw	r2,-40(fp)
   13634:	e0fff7c3 	ldbu	r3,-33(fp)
   13638:	10c00d45 	stb	r3,53(r2)
   1363c:	e0bff517 	ldw	r2,-44(fp)
   13640:	e0bffd15 	stw	r2,-12(fp)
   13644:	e0bffd17 	ldw	r2,-12(fp)
   13648:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    if (OSRunning == OS_TRUE) {
   1364c:	008000b4 	movhi	r2,2
   13650:	10b47f44 	addi	r2,r2,-11779
   13654:	10800003 	ldbu	r2,0(r2)
   13658:	10803fcc 	andi	r2,r2,255
   1365c:	10800058 	cmpnei	r2,r2,1
   13660:	1000011e 	bne	r2,zero,13668 <OSTaskChangePrio+0x528>
        OS_Sched();                                         /* Find new highest priority task          */
   13664:	000ec240 	call	ec24 <OS_Sched>
    }
    return (OS_ERR_NONE);
   13668:	0005883a 	mov	r2,zero
}
   1366c:	e037883a 	mov	sp,fp
   13670:	dfc00117 	ldw	ra,4(sp)
   13674:	df000017 	ldw	fp,0(sp)
   13678:	dec00204 	addi	sp,sp,8
   1367c:	f800283a 	ret

00013680 <OSTaskCreate>:
*********************************************************************************************************
*/

#if OS_TASK_CREATE_EN > 0
INT8U  OSTaskCreate (void (*task)(void *p_arg), void *p_arg, OS_STK *ptos, INT8U prio)
{
   13680:	deffee04 	addi	sp,sp,-72
   13684:	dfc01115 	stw	ra,68(sp)
   13688:	df001015 	stw	fp,64(sp)
   1368c:	df001004 	addi	fp,sp,64
   13690:	e13ffc15 	stw	r4,-16(fp)
   13694:	e17ffd15 	stw	r5,-12(fp)
   13698:	e1bffe15 	stw	r6,-8(fp)
   1369c:	3805883a 	mov	r2,r7
   136a0:	e0bfff05 	stb	r2,-4(fp)
    OS_STK    *psp;
    INT8U      err;
#if OS_CRITICAL_METHOD == 3                  /* Allocate storage for CPU status register               */
    OS_CPU_SR  cpu_sr = 0;
   136a4:	e03ff315 	stw	zero,-52(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio > OS_LOWEST_PRIO) {             /* Make sure priority is within allowable range           */
   136a8:	e0bfff03 	ldbu	r2,-4(fp)
   136ac:	10800570 	cmpltui	r2,r2,21
   136b0:	1000021e 	bne	r2,zero,136bc <OSTaskCreate+0x3c>
        return (OS_ERR_PRIO_INVALID);
   136b4:	00800a84 	movi	r2,42
   136b8:	00005b06 	br	13828 <OSTaskCreate+0x1a8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   136bc:	0005303a 	rdctl	r2,status
   136c0:	e0bff615 	stw	r2,-40(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   136c4:	e0fff617 	ldw	r3,-40(fp)
   136c8:	00bfff84 	movi	r2,-2
   136cc:	1884703a 	and	r2,r3,r2
   136d0:	1001703a 	wrctl	status,r2
  
  return context;
   136d4:	e0bff617 	ldw	r2,-40(fp)
    }
#endif
    OS_ENTER_CRITICAL();
   136d8:	e0bff315 	stw	r2,-52(fp)
    if (OSIntNesting > 0) {                  /* Make sure we don't create the task from within an ISR  */
   136dc:	008000b4 	movhi	r2,2
   136e0:	10b48d04 	addi	r2,r2,-11724
   136e4:	10800003 	ldbu	r2,0(r2)
   136e8:	10803fcc 	andi	r2,r2,255
   136ec:	10000626 	beq	r2,zero,13708 <OSTaskCreate+0x88>
   136f0:	e0bff317 	ldw	r2,-52(fp)
   136f4:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   136f8:	e0bff717 	ldw	r2,-36(fp)
   136fc:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_CREATE_ISR);
   13700:	00800f04 	movi	r2,60
   13704:	00004806 	br	13828 <OSTaskCreate+0x1a8>
    }
    if (OSTCBPrioTbl[prio] == (OS_TCB *)0) { /* Make sure task doesn't already exist at this priority  */
   13708:	e0ffff03 	ldbu	r3,-4(fp)
   1370c:	008000f4 	movhi	r2,3
   13710:	10a11f04 	addi	r2,r2,-31620
   13714:	18c7883a 	add	r3,r3,r3
   13718:	18c7883a 	add	r3,r3,r3
   1371c:	10c5883a 	add	r2,r2,r3
   13720:	10800017 	ldw	r2,0(r2)
   13724:	10003b1e 	bne	r2,zero,13814 <OSTaskCreate+0x194>
        OSTCBPrioTbl[prio] = OS_TCB_RESERVED;/* Reserve the priority to prevent others from doing ...  */
   13728:	e0ffff03 	ldbu	r3,-4(fp)
   1372c:	008000f4 	movhi	r2,3
   13730:	10a11f04 	addi	r2,r2,-31620
   13734:	18c7883a 	add	r3,r3,r3
   13738:	18c7883a 	add	r3,r3,r3
   1373c:	10c5883a 	add	r2,r2,r3
   13740:	00c00044 	movi	r3,1
   13744:	10c00015 	stw	r3,0(r2)
   13748:	e0bff317 	ldw	r2,-52(fp)
   1374c:	e0bff815 	stw	r2,-32(fp)
   13750:	e0bff817 	ldw	r2,-32(fp)
   13754:	1001703a 	wrctl	status,r2
                                             /* ... the same thing until task is created.              */
        OS_EXIT_CRITICAL();
        psp = OSTaskStkInit(task, p_arg, ptos, 0);              /* Initialize the task's stack         */
   13758:	e13ffc17 	ldw	r4,-16(fp)
   1375c:	e17ffd17 	ldw	r5,-12(fp)
   13760:	e1bffe17 	ldw	r6,-8(fp)
   13764:	000f883a 	mov	r7,zero
   13768:	00183740 	call	18374 <OSTaskStkInit>
   1376c:	e0bff415 	stw	r2,-48(fp)
        err = OS_TCBInit(prio, psp, (OS_STK *)0, 0, 0, (void *)0, 0);
   13770:	e0bfff03 	ldbu	r2,-4(fp)
   13774:	d8000015 	stw	zero,0(sp)
   13778:	d8000115 	stw	zero,4(sp)
   1377c:	d8000215 	stw	zero,8(sp)
   13780:	1009883a 	mov	r4,r2
   13784:	e17ff417 	ldw	r5,-48(fp)
   13788:	000d883a 	mov	r6,zero
   1378c:	000f883a 	mov	r7,zero
   13790:	000f0280 	call	f028 <OS_TCBInit>
   13794:	e0bff505 	stb	r2,-44(fp)
        if (err == OS_ERR_NONE) {
   13798:	e0bff503 	ldbu	r2,-44(fp)
   1379c:	1000081e 	bne	r2,zero,137c0 <OSTaskCreate+0x140>
            if (OSRunning == OS_TRUE) {      /* Find highest priority task if multitasking has started */
   137a0:	008000b4 	movhi	r2,2
   137a4:	10b47f44 	addi	r2,r2,-11779
   137a8:	10800003 	ldbu	r2,0(r2)
   137ac:	10803fcc 	andi	r2,r2,255
   137b0:	10800058 	cmpnei	r2,r2,1
   137b4:	1000151e 	bne	r2,zero,1380c <OSTaskCreate+0x18c>
                OS_Sched();
   137b8:	000ec240 	call	ec24 <OS_Sched>
   137bc:	00001306 	br	1380c <OSTaskCreate+0x18c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   137c0:	0005303a 	rdctl	r2,status
   137c4:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   137c8:	e0fff917 	ldw	r3,-28(fp)
   137cc:	00bfff84 	movi	r2,-2
   137d0:	1884703a 	and	r2,r3,r2
   137d4:	1001703a 	wrctl	status,r2
  
  return context;
   137d8:	e0bff917 	ldw	r2,-28(fp)
            }
        } else {
            OS_ENTER_CRITICAL();
   137dc:	e0bff315 	stw	r2,-52(fp)
            OSTCBPrioTbl[prio] = (OS_TCB *)0;/* Make this priority available to others                 */
   137e0:	e0ffff03 	ldbu	r3,-4(fp)
   137e4:	008000f4 	movhi	r2,3
   137e8:	10a11f04 	addi	r2,r2,-31620
   137ec:	18c7883a 	add	r3,r3,r3
   137f0:	18c7883a 	add	r3,r3,r3
   137f4:	10c5883a 	add	r2,r2,r3
   137f8:	10000015 	stw	zero,0(r2)
   137fc:	e0bff317 	ldw	r2,-52(fp)
   13800:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   13804:	e0bffa17 	ldw	r2,-24(fp)
   13808:	1001703a 	wrctl	status,r2
            OS_EXIT_CRITICAL();
        }
        return (err);
   1380c:	e0bff503 	ldbu	r2,-44(fp)
   13810:	00000506 	br	13828 <OSTaskCreate+0x1a8>
   13814:	e0bff317 	ldw	r2,-52(fp)
   13818:	e0bffb15 	stw	r2,-20(fp)
   1381c:	e0bffb17 	ldw	r2,-20(fp)
   13820:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_PRIO_EXIST);
   13824:	00800a04 	movi	r2,40
}
   13828:	e037883a 	mov	sp,fp
   1382c:	dfc00117 	ldw	ra,4(sp)
   13830:	df000017 	ldw	fp,0(sp)
   13834:	dec00204 	addi	sp,sp,8
   13838:	f800283a 	ret

0001383c <OSTaskCreateExt>:
                        INT16U   id,
                        OS_STK  *pbos,
                        INT32U   stk_size,
                        void    *pext,
                        INT16U   opt)
{
   1383c:	deffec04 	addi	sp,sp,-80
   13840:	dfc01315 	stw	ra,76(sp)
   13844:	df001215 	stw	fp,72(sp)
   13848:	df001204 	addi	fp,sp,72
   1384c:	e13ffa15 	stw	r4,-24(fp)
   13850:	e17ffb15 	stw	r5,-20(fp)
   13854:	e1bffc15 	stw	r6,-16(fp)
   13858:	3809883a 	mov	r4,r7
   1385c:	e0c00217 	ldw	r3,8(fp)
   13860:	e0800617 	ldw	r2,24(fp)
   13864:	e13ffd05 	stb	r4,-12(fp)
   13868:	e0fffe0d 	sth	r3,-8(fp)
   1386c:	e0bfff0d 	sth	r2,-4(fp)
    OS_STK    *psp;
    INT8U      err;
#if OS_CRITICAL_METHOD == 3                  /* Allocate storage for CPU status register               */
    OS_CPU_SR  cpu_sr = 0;
   13870:	e03ff115 	stw	zero,-60(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio > OS_LOWEST_PRIO) {             /* Make sure priority is within allowable range           */
   13874:	e0bffd03 	ldbu	r2,-12(fp)
   13878:	10800570 	cmpltui	r2,r2,21
   1387c:	1000021e 	bne	r2,zero,13888 <OSTaskCreateExt+0x4c>
        return (OS_ERR_PRIO_INVALID);
   13880:	00800a84 	movi	r2,42
   13884:	00006306 	br	13a14 <OSTaskCreateExt+0x1d8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   13888:	0005303a 	rdctl	r2,status
   1388c:	e0bff415 	stw	r2,-48(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   13890:	e0fff417 	ldw	r3,-48(fp)
   13894:	00bfff84 	movi	r2,-2
   13898:	1884703a 	and	r2,r3,r2
   1389c:	1001703a 	wrctl	status,r2
  
  return context;
   138a0:	e0bff417 	ldw	r2,-48(fp)
    }
#endif
    OS_ENTER_CRITICAL();
   138a4:	e0bff115 	stw	r2,-60(fp)
    if (OSIntNesting > 0) {                  /* Make sure we don't create the task from within an ISR  */
   138a8:	008000b4 	movhi	r2,2
   138ac:	10b48d04 	addi	r2,r2,-11724
   138b0:	10800003 	ldbu	r2,0(r2)
   138b4:	10803fcc 	andi	r2,r2,255
   138b8:	10000626 	beq	r2,zero,138d4 <OSTaskCreateExt+0x98>
   138bc:	e0bff117 	ldw	r2,-60(fp)
   138c0:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   138c4:	e0bff517 	ldw	r2,-44(fp)
   138c8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_CREATE_ISR);
   138cc:	00800f04 	movi	r2,60
   138d0:	00005006 	br	13a14 <OSTaskCreateExt+0x1d8>
    }
    if (OSTCBPrioTbl[prio] == (OS_TCB *)0) { /* Make sure task doesn't already exist at this priority  */
   138d4:	e0fffd03 	ldbu	r3,-12(fp)
   138d8:	008000f4 	movhi	r2,3
   138dc:	10a11f04 	addi	r2,r2,-31620
   138e0:	18c7883a 	add	r3,r3,r3
   138e4:	18c7883a 	add	r3,r3,r3
   138e8:	10c5883a 	add	r2,r2,r3
   138ec:	10800017 	ldw	r2,0(r2)
   138f0:	1000431e 	bne	r2,zero,13a00 <OSTaskCreateExt+0x1c4>
        OSTCBPrioTbl[prio] = OS_TCB_RESERVED;/* Reserve the priority to prevent others from doing ...  */
   138f4:	e0fffd03 	ldbu	r3,-12(fp)
   138f8:	008000f4 	movhi	r2,3
   138fc:	10a11f04 	addi	r2,r2,-31620
   13900:	18c7883a 	add	r3,r3,r3
   13904:	18c7883a 	add	r3,r3,r3
   13908:	10c5883a 	add	r2,r2,r3
   1390c:	00c00044 	movi	r3,1
   13910:	10c00015 	stw	r3,0(r2)
   13914:	e0bff117 	ldw	r2,-60(fp)
   13918:	e0bff615 	stw	r2,-40(fp)
   1391c:	e0bff617 	ldw	r2,-40(fp)
   13920:	1001703a 	wrctl	status,r2
                                             /* ... the same thing until task is created.              */
        OS_EXIT_CRITICAL();

#if (OS_TASK_STAT_STK_CHK_EN > 0)
        OS_TaskStkClr(pbos, stk_size, opt);                    /* Clear the task stack (if needed)     */
   13924:	e0bfff0b 	ldhu	r2,-4(fp)
   13928:	e1000317 	ldw	r4,12(fp)
   1392c:	e1400417 	ldw	r5,16(fp)
   13930:	100d883a 	mov	r6,r2
   13934:	00149c80 	call	149c8 <OS_TaskStkClr>
#endif

        psp = OSTaskStkInit(task, p_arg, ptos, opt);           /* Initialize the task's stack          */
   13938:	e0bfff0b 	ldhu	r2,-4(fp)
   1393c:	e13ffa17 	ldw	r4,-24(fp)
   13940:	e17ffb17 	ldw	r5,-20(fp)
   13944:	e1bffc17 	ldw	r6,-16(fp)
   13948:	100f883a 	mov	r7,r2
   1394c:	00183740 	call	18374 <OSTaskStkInit>
   13950:	e0bff215 	stw	r2,-56(fp)
        err = OS_TCBInit(prio, psp, pbos, id, stk_size, pext, opt);
   13954:	e13ffd03 	ldbu	r4,-12(fp)
   13958:	e1fffe0b 	ldhu	r7,-8(fp)
   1395c:	e0bfff0b 	ldhu	r2,-4(fp)
   13960:	e0c00417 	ldw	r3,16(fp)
   13964:	d8c00015 	stw	r3,0(sp)
   13968:	e0c00517 	ldw	r3,20(fp)
   1396c:	d8c00115 	stw	r3,4(sp)
   13970:	d8800215 	stw	r2,8(sp)
   13974:	e17ff217 	ldw	r5,-56(fp)
   13978:	e1800317 	ldw	r6,12(fp)
   1397c:	000f0280 	call	f028 <OS_TCBInit>
   13980:	e0bff305 	stb	r2,-52(fp)
        if (err == OS_ERR_NONE) {
   13984:	e0bff303 	ldbu	r2,-52(fp)
   13988:	1000081e 	bne	r2,zero,139ac <OSTaskCreateExt+0x170>
            if (OSRunning == OS_TRUE) {                        /* Find HPT if multitasking has started */
   1398c:	008000b4 	movhi	r2,2
   13990:	10b47f44 	addi	r2,r2,-11779
   13994:	10800003 	ldbu	r2,0(r2)
   13998:	10803fcc 	andi	r2,r2,255
   1399c:	10800058 	cmpnei	r2,r2,1
   139a0:	1000151e 	bne	r2,zero,139f8 <OSTaskCreateExt+0x1bc>
                OS_Sched();
   139a4:	000ec240 	call	ec24 <OS_Sched>
   139a8:	00001306 	br	139f8 <OSTaskCreateExt+0x1bc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   139ac:	0005303a 	rdctl	r2,status
   139b0:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   139b4:	e0fff717 	ldw	r3,-36(fp)
   139b8:	00bfff84 	movi	r2,-2
   139bc:	1884703a 	and	r2,r3,r2
   139c0:	1001703a 	wrctl	status,r2
  
  return context;
   139c4:	e0bff717 	ldw	r2,-36(fp)
            }
        } else {
            OS_ENTER_CRITICAL();
   139c8:	e0bff115 	stw	r2,-60(fp)
            OSTCBPrioTbl[prio] = (OS_TCB *)0;                  /* Make this priority avail. to others  */
   139cc:	e0fffd03 	ldbu	r3,-12(fp)
   139d0:	008000f4 	movhi	r2,3
   139d4:	10a11f04 	addi	r2,r2,-31620
   139d8:	18c7883a 	add	r3,r3,r3
   139dc:	18c7883a 	add	r3,r3,r3
   139e0:	10c5883a 	add	r2,r2,r3
   139e4:	10000015 	stw	zero,0(r2)
   139e8:	e0bff117 	ldw	r2,-60(fp)
   139ec:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   139f0:	e0bff817 	ldw	r2,-32(fp)
   139f4:	1001703a 	wrctl	status,r2
            OS_EXIT_CRITICAL();
        }
        return (err);
   139f8:	e0bff303 	ldbu	r2,-52(fp)
   139fc:	00000506 	br	13a14 <OSTaskCreateExt+0x1d8>
   13a00:	e0bff117 	ldw	r2,-60(fp)
   13a04:	e0bff915 	stw	r2,-28(fp)
   13a08:	e0bff917 	ldw	r2,-28(fp)
   13a0c:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_PRIO_EXIST);
   13a10:	00800a04 	movi	r2,40
}
   13a14:	e037883a 	mov	sp,fp
   13a18:	dfc00117 	ldw	ra,4(sp)
   13a1c:	df000017 	ldw	fp,0(sp)
   13a20:	dec00204 	addi	sp,sp,8
   13a24:	f800283a 	ret

00013a28 <OSTaskDel>:
*********************************************************************************************************
*/

#if OS_TASK_DEL_EN > 0
INT8U  OSTaskDel (INT8U prio)
{
   13a28:	defff404 	addi	sp,sp,-48
   13a2c:	dfc00b15 	stw	ra,44(sp)
   13a30:	df000a15 	stw	fp,40(sp)
   13a34:	df000a04 	addi	fp,sp,40
   13a38:	2005883a 	mov	r2,r4
   13a3c:	e0bfff05 	stb	r2,-4(fp)
#if (OS_FLAG_EN > 0) && (OS_MAX_FLAGS > 0)
    OS_FLAG_NODE *pnode;
#endif
    OS_TCB       *ptcb;
#if OS_CRITICAL_METHOD == 3                             /* Allocate storage for CPU status register    */
    OS_CPU_SR     cpu_sr = 0;
   13a40:	e03ff615 	stw	zero,-40(fp)
#endif



    if (OSIntNesting > 0) {                             /* See if trying to delete from ISR            */
   13a44:	008000b4 	movhi	r2,2
   13a48:	10b48d04 	addi	r2,r2,-11724
   13a4c:	10800003 	ldbu	r2,0(r2)
   13a50:	10803fcc 	andi	r2,r2,255
   13a54:	10000226 	beq	r2,zero,13a60 <OSTaskDel+0x38>
        return (OS_ERR_TASK_DEL_ISR);
   13a58:	00801004 	movi	r2,64
   13a5c:	0000e506 	br	13df4 <OSTaskDel+0x3cc>
    }
    if (prio == OS_TASK_IDLE_PRIO) {                    /* Not allowed to delete idle task             */
   13a60:	e0bfff03 	ldbu	r2,-4(fp)
   13a64:	10800518 	cmpnei	r2,r2,20
   13a68:	1000021e 	bne	r2,zero,13a74 <OSTaskDel+0x4c>
        return (OS_ERR_TASK_DEL_IDLE);
   13a6c:	00800f84 	movi	r2,62
   13a70:	0000e006 	br	13df4 <OSTaskDel+0x3cc>
    }
#if OS_ARG_CHK_EN > 0
    if (prio >= OS_LOWEST_PRIO) {                       /* Task priority valid ?                       */
   13a74:	e0bfff03 	ldbu	r2,-4(fp)
   13a78:	10800530 	cmpltui	r2,r2,20
   13a7c:	1000051e 	bne	r2,zero,13a94 <OSTaskDel+0x6c>
        if (prio != OS_PRIO_SELF) {
   13a80:	e0bfff03 	ldbu	r2,-4(fp)
   13a84:	10803fe0 	cmpeqi	r2,r2,255
   13a88:	1000021e 	bne	r2,zero,13a94 <OSTaskDel+0x6c>
            return (OS_ERR_PRIO_INVALID);
   13a8c:	00800a84 	movi	r2,42
   13a90:	0000d806 	br	13df4 <OSTaskDel+0x3cc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   13a94:	0005303a 	rdctl	r2,status
   13a98:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   13a9c:	e0fff917 	ldw	r3,-28(fp)
   13aa0:	00bfff84 	movi	r2,-2
   13aa4:	1884703a 	and	r2,r3,r2
   13aa8:	1001703a 	wrctl	status,r2
  
  return context;
   13aac:	e0bff917 	ldw	r2,-28(fp)
        }
    }
#endif

/*$PAGE*/
    OS_ENTER_CRITICAL();
   13ab0:	e0bff615 	stw	r2,-40(fp)
    if (prio == OS_PRIO_SELF) {                         /* See if requesting to delete self            */
   13ab4:	e0bfff03 	ldbu	r2,-4(fp)
   13ab8:	10803fd8 	cmpnei	r2,r2,255
   13abc:	1000051e 	bne	r2,zero,13ad4 <OSTaskDel+0xac>
        prio = OSTCBCur->OSTCBPrio;                     /* Set priority to delete to current           */
   13ac0:	008000b4 	movhi	r2,2
   13ac4:	10b48e04 	addi	r2,r2,-11720
   13ac8:	10800017 	ldw	r2,0(r2)
   13acc:	10800c83 	ldbu	r2,50(r2)
   13ad0:	e0bfff05 	stb	r2,-4(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
   13ad4:	e0ffff03 	ldbu	r3,-4(fp)
   13ad8:	008000f4 	movhi	r2,3
   13adc:	10a11f04 	addi	r2,r2,-31620
   13ae0:	18c7883a 	add	r3,r3,r3
   13ae4:	18c7883a 	add	r3,r3,r3
   13ae8:	10c5883a 	add	r2,r2,r3
   13aec:	10800017 	ldw	r2,0(r2)
   13af0:	e0bff715 	stw	r2,-36(fp)
    if (ptcb == (OS_TCB *)0) {                          /* Task to delete must exist                   */
   13af4:	e0bff717 	ldw	r2,-36(fp)
   13af8:	1000061e 	bne	r2,zero,13b14 <OSTaskDel+0xec>
   13afc:	e0bff617 	ldw	r2,-40(fp)
   13b00:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   13b04:	e0bffa17 	ldw	r2,-24(fp)
   13b08:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
   13b0c:	008010c4 	movi	r2,67
   13b10:	0000b806 	br	13df4 <OSTaskDel+0x3cc>
    }
    if (ptcb == OS_TCB_RESERVED) {                      /* Must not be assigned to Mutex               */
   13b14:	e0bff717 	ldw	r2,-36(fp)
   13b18:	10800058 	cmpnei	r2,r2,1
   13b1c:	1000061e 	bne	r2,zero,13b38 <OSTaskDel+0x110>
   13b20:	e0bff617 	ldw	r2,-40(fp)
   13b24:	e0bffb15 	stw	r2,-20(fp)
   13b28:	e0bffb17 	ldw	r2,-20(fp)
   13b2c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_DEL);
   13b30:	00800f44 	movi	r2,61
   13b34:	0000af06 	br	13df4 <OSTaskDel+0x3cc>
    }

    OSRdyTbl[ptcb->OSTCBY] &= ~ptcb->OSTCBBitX;
   13b38:	e0bff717 	ldw	r2,-36(fp)
   13b3c:	10800d03 	ldbu	r2,52(r2)
   13b40:	10c03fcc 	andi	r3,r2,255
   13b44:	e0bff717 	ldw	r2,-36(fp)
   13b48:	10800d03 	ldbu	r2,52(r2)
   13b4c:	11003fcc 	andi	r4,r2,255
   13b50:	008000b4 	movhi	r2,2
   13b54:	10b48b44 	addi	r2,r2,-11731
   13b58:	1105883a 	add	r2,r2,r4
   13b5c:	10800003 	ldbu	r2,0(r2)
   13b60:	1009883a 	mov	r4,r2
   13b64:	e0bff717 	ldw	r2,-36(fp)
   13b68:	10800d43 	ldbu	r2,53(r2)
   13b6c:	0084303a 	nor	r2,zero,r2
   13b70:	2084703a 	and	r2,r4,r2
   13b74:	1009883a 	mov	r4,r2
   13b78:	008000b4 	movhi	r2,2
   13b7c:	10b48b44 	addi	r2,r2,-11731
   13b80:	10c5883a 	add	r2,r2,r3
   13b84:	11000005 	stb	r4,0(r2)
    if (OSRdyTbl[ptcb->OSTCBY] == 0) {                  /* Make task not ready                         */
   13b88:	e0bff717 	ldw	r2,-36(fp)
   13b8c:	10800d03 	ldbu	r2,52(r2)
   13b90:	10c03fcc 	andi	r3,r2,255
   13b94:	008000b4 	movhi	r2,2
   13b98:	10b48b44 	addi	r2,r2,-11731
   13b9c:	10c5883a 	add	r2,r2,r3
   13ba0:	10800003 	ldbu	r2,0(r2)
   13ba4:	10803fcc 	andi	r2,r2,255
   13ba8:	10000c1e 	bne	r2,zero,13bdc <OSTaskDel+0x1b4>
        OSRdyGrp           &= ~ptcb->OSTCBBitY;
   13bac:	e0bff717 	ldw	r2,-36(fp)
   13bb0:	10800d83 	ldbu	r2,54(r2)
   13bb4:	0084303a 	nor	r2,zero,r2
   13bb8:	1007883a 	mov	r3,r2
   13bbc:	008000b4 	movhi	r2,2
   13bc0:	10b48b04 	addi	r2,r2,-11732
   13bc4:	10800003 	ldbu	r2,0(r2)
   13bc8:	1884703a 	and	r2,r3,r2
   13bcc:	1007883a 	mov	r3,r2
   13bd0:	008000b4 	movhi	r2,2
   13bd4:	10b48b04 	addi	r2,r2,-11732
   13bd8:	10c00005 	stb	r3,0(r2)
    }
    
#if (OS_EVENT_EN)
    if (ptcb->OSTCBEventPtr != (OS_EVENT *)0) {
   13bdc:	e0bff717 	ldw	r2,-36(fp)
   13be0:	10800717 	ldw	r2,28(r2)
   13be4:	10000526 	beq	r2,zero,13bfc <OSTaskDel+0x1d4>
        OS_EventTaskRemove(ptcb, ptcb->OSTCBEventPtr);  /* Remove this task from any event   wait list */
   13be8:	e0bff717 	ldw	r2,-36(fp)
   13bec:	10800717 	ldw	r2,28(r2)
   13bf0:	e13ff717 	ldw	r4,-36(fp)
   13bf4:	100b883a 	mov	r5,r2
   13bf8:	000e5fc0 	call	e5fc <OS_EventTaskRemove>
    }
#if (OS_EVENT_MULTI_EN > 0)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {   /* Remove this task from any events' wait lists*/
   13bfc:	e0bff717 	ldw	r2,-36(fp)
   13c00:	10800817 	ldw	r2,32(r2)
   13c04:	10000526 	beq	r2,zero,13c1c <OSTaskDel+0x1f4>
        OS_EventTaskRemoveMulti(ptcb, ptcb->OSTCBEventMultiPtr);
   13c08:	e0bff717 	ldw	r2,-36(fp)
   13c0c:	10800817 	ldw	r2,32(r2)
   13c10:	e13ff717 	ldw	r4,-36(fp)
   13c14:	100b883a 	mov	r5,r2
   13c18:	000e6b00 	call	e6b0 <OS_EventTaskRemoveMulti>
    }
#endif
#endif

#if (OS_FLAG_EN > 0) && (OS_MAX_FLAGS > 0)
    pnode = ptcb->OSTCBFlagNode;
   13c1c:	e0bff717 	ldw	r2,-36(fp)
   13c20:	10800a17 	ldw	r2,40(r2)
   13c24:	e0bff815 	stw	r2,-32(fp)
    if (pnode != (OS_FLAG_NODE *)0) {                   /* If task is waiting on event flag            */
   13c28:	e0bff817 	ldw	r2,-32(fp)
   13c2c:	10000226 	beq	r2,zero,13c38 <OSTaskDel+0x210>
        OS_FlagUnlink(pnode);                           /* Remove from wait list                       */
   13c30:	e13ff817 	ldw	r4,-32(fp)
   13c34:	0010c040 	call	10c04 <OS_FlagUnlink>
    }
#endif

    ptcb->OSTCBDly      = 0;                            /* Prevent OSTimeTick() from updating          */
   13c38:	e0bff717 	ldw	r2,-36(fp)
   13c3c:	10000b8d 	sth	zero,46(r2)
    ptcb->OSTCBStat     = OS_STAT_RDY;                  /* Prevent task from being resumed             */
   13c40:	e0bff717 	ldw	r2,-36(fp)
   13c44:	10000c05 	stb	zero,48(r2)
    ptcb->OSTCBStatPend = OS_STAT_PEND_OK;
   13c48:	e0bff717 	ldw	r2,-36(fp)
   13c4c:	10000c45 	stb	zero,49(r2)
    if (OSLockNesting < 255u) {                         /* Make sure we don't context switch           */
   13c50:	008000b4 	movhi	r2,2
   13c54:	10b47f04 	addi	r2,r2,-11780
   13c58:	10800003 	ldbu	r2,0(r2)
   13c5c:	10803fcc 	andi	r2,r2,255
   13c60:	10803fe0 	cmpeqi	r2,r2,255
   13c64:	1000081e 	bne	r2,zero,13c88 <OSTaskDel+0x260>
        OSLockNesting++;
   13c68:	008000b4 	movhi	r2,2
   13c6c:	10b47f04 	addi	r2,r2,-11780
   13c70:	10800003 	ldbu	r2,0(r2)
   13c74:	10800044 	addi	r2,r2,1
   13c78:	1007883a 	mov	r3,r2
   13c7c:	008000b4 	movhi	r2,2
   13c80:	10b47f04 	addi	r2,r2,-11780
   13c84:	10c00005 	stb	r3,0(r2)
   13c88:	e0bff617 	ldw	r2,-40(fp)
   13c8c:	e0bffc15 	stw	r2,-16(fp)
   13c90:	e0bffc17 	ldw	r2,-16(fp)
   13c94:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();                                 /* Enabling INT. ignores next instruc.         */
    OS_Dummy();                                         /* ... Dummy ensures that INTs will be         */
   13c98:	000e1f00 	call	e1f0 <OS_Dummy>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   13c9c:	0005303a 	rdctl	r2,status
   13ca0:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   13ca4:	e0fffd17 	ldw	r3,-12(fp)
   13ca8:	00bfff84 	movi	r2,-2
   13cac:	1884703a 	and	r2,r3,r2
   13cb0:	1001703a 	wrctl	status,r2
  
  return context;
   13cb4:	e0bffd17 	ldw	r2,-12(fp)
    OS_ENTER_CRITICAL();                                /* ... disabled HERE!                          */
   13cb8:	e0bff615 	stw	r2,-40(fp)
    if (OSLockNesting > 0) {                            /* Remove context switch lock                  */
   13cbc:	008000b4 	movhi	r2,2
   13cc0:	10b47f04 	addi	r2,r2,-11780
   13cc4:	10800003 	ldbu	r2,0(r2)
   13cc8:	10803fcc 	andi	r2,r2,255
   13ccc:	10000826 	beq	r2,zero,13cf0 <OSTaskDel+0x2c8>
        OSLockNesting--;
   13cd0:	008000b4 	movhi	r2,2
   13cd4:	10b47f04 	addi	r2,r2,-11780
   13cd8:	10800003 	ldbu	r2,0(r2)
   13cdc:	10bfffc4 	addi	r2,r2,-1
   13ce0:	1007883a 	mov	r3,r2
   13ce4:	008000b4 	movhi	r2,2
   13ce8:	10b47f04 	addi	r2,r2,-11780
   13cec:	10c00005 	stb	r3,0(r2)
    }
    OSTaskDelHook(ptcb);                                /* Call user defined hook                      */
   13cf0:	e13ff717 	ldw	r4,-36(fp)
   13cf4:	00184f00 	call	184f0 <OSTaskDelHook>
    OSTaskCtr--;                                        /* One less task being managed                 */
   13cf8:	008000b4 	movhi	r2,2
   13cfc:	10b48744 	addi	r2,r2,-11747
   13d00:	10800003 	ldbu	r2,0(r2)
   13d04:	10bfffc4 	addi	r2,r2,-1
   13d08:	1007883a 	mov	r3,r2
   13d0c:	008000b4 	movhi	r2,2
   13d10:	10b48744 	addi	r2,r2,-11747
   13d14:	10c00005 	stb	r3,0(r2)
    OSTCBPrioTbl[prio] = (OS_TCB *)0;                   /* Clear old priority entry                    */
   13d18:	e0ffff03 	ldbu	r3,-4(fp)
   13d1c:	008000f4 	movhi	r2,3
   13d20:	10a11f04 	addi	r2,r2,-31620
   13d24:	18c7883a 	add	r3,r3,r3
   13d28:	18c7883a 	add	r3,r3,r3
   13d2c:	10c5883a 	add	r2,r2,r3
   13d30:	10000015 	stw	zero,0(r2)
    if (ptcb->OSTCBPrev == (OS_TCB *)0) {               /* Remove from TCB chain                       */
   13d34:	e0bff717 	ldw	r2,-36(fp)
   13d38:	10800617 	ldw	r2,24(r2)
   13d3c:	1000091e 	bne	r2,zero,13d64 <OSTaskDel+0x33c>
        ptcb->OSTCBNext->OSTCBPrev = (OS_TCB *)0;
   13d40:	e0bff717 	ldw	r2,-36(fp)
   13d44:	10800517 	ldw	r2,20(r2)
   13d48:	10000615 	stw	zero,24(r2)
        OSTCBList                  = ptcb->OSTCBNext;
   13d4c:	e0bff717 	ldw	r2,-36(fp)
   13d50:	10c00517 	ldw	r3,20(r2)
   13d54:	008000b4 	movhi	r2,2
   13d58:	10b48204 	addi	r2,r2,-11768
   13d5c:	10c00015 	stw	r3,0(r2)
   13d60:	00000a06 	br	13d8c <OSTaskDel+0x364>
    } else {
        ptcb->OSTCBPrev->OSTCBNext = ptcb->OSTCBNext;
   13d64:	e0bff717 	ldw	r2,-36(fp)
   13d68:	10800617 	ldw	r2,24(r2)
   13d6c:	e0fff717 	ldw	r3,-36(fp)
   13d70:	18c00517 	ldw	r3,20(r3)
   13d74:	10c00515 	stw	r3,20(r2)
        ptcb->OSTCBNext->OSTCBPrev = ptcb->OSTCBPrev;
   13d78:	e0bff717 	ldw	r2,-36(fp)
   13d7c:	10800517 	ldw	r2,20(r2)
   13d80:	e0fff717 	ldw	r3,-36(fp)
   13d84:	18c00617 	ldw	r3,24(r3)
   13d88:	10c00615 	stw	r3,24(r2)
    }
    ptcb->OSTCBNext   = OSTCBFreeList;                  /* Return TCB to free TCB list                 */
   13d8c:	008000b4 	movhi	r2,2
   13d90:	10b48604 	addi	r2,r2,-11752
   13d94:	10c00017 	ldw	r3,0(r2)
   13d98:	e0bff717 	ldw	r2,-36(fp)
   13d9c:	10c00515 	stw	r3,20(r2)
    OSTCBFreeList     = ptcb;
   13da0:	008000b4 	movhi	r2,2
   13da4:	10b48604 	addi	r2,r2,-11752
   13da8:	e0fff717 	ldw	r3,-36(fp)
   13dac:	10c00015 	stw	r3,0(r2)
#if OS_TASK_NAME_SIZE > 1
    ptcb->OSTCBTaskName[0] = '?';                       /* Unknown name                                */
   13db0:	e0bff717 	ldw	r2,-36(fp)
   13db4:	00c00fc4 	movi	r3,63
   13db8:	10c01305 	stb	r3,76(r2)
    ptcb->OSTCBTaskName[1] = OS_ASCII_NUL;
   13dbc:	e0bff717 	ldw	r2,-36(fp)
   13dc0:	10001345 	stb	zero,77(r2)
   13dc4:	e0bff617 	ldw	r2,-40(fp)
   13dc8:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   13dcc:	e0bffe17 	ldw	r2,-8(fp)
   13dd0:	1001703a 	wrctl	status,r2
#endif
    OS_EXIT_CRITICAL();
    if (OSRunning == OS_TRUE) {
   13dd4:	008000b4 	movhi	r2,2
   13dd8:	10b47f44 	addi	r2,r2,-11779
   13ddc:	10800003 	ldbu	r2,0(r2)
   13de0:	10803fcc 	andi	r2,r2,255
   13de4:	10800058 	cmpnei	r2,r2,1
   13de8:	1000011e 	bne	r2,zero,13df0 <OSTaskDel+0x3c8>
        OS_Sched();                                     /* Find new highest priority task              */
   13dec:	000ec240 	call	ec24 <OS_Sched>
    }
    return (OS_ERR_NONE);
   13df0:	0005883a 	mov	r2,zero
}
   13df4:	e037883a 	mov	sp,fp
   13df8:	dfc00117 	ldw	ra,4(sp)
   13dfc:	df000017 	ldw	fp,0(sp)
   13e00:	dec00204 	addi	sp,sp,8
   13e04:	f800283a 	ret

00013e08 <OSTaskDelReq>:
*********************************************************************************************************
*/
/*$PAGE*/
#if OS_TASK_DEL_EN > 0
INT8U  OSTaskDelReq (INT8U prio)
{
   13e08:	defff504 	addi	sp,sp,-44
   13e0c:	df000a15 	stw	fp,40(sp)
   13e10:	df000a04 	addi	fp,sp,40
   13e14:	2005883a 	mov	r2,r4
   13e18:	e0bfff05 	stb	r2,-4(fp)
    INT8U      stat;
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   13e1c:	e03ff615 	stw	zero,-40(fp)
#endif



    if (prio == OS_TASK_IDLE_PRIO) {                            /* Not allowed to delete idle task     */
   13e20:	e0bfff03 	ldbu	r2,-4(fp)
   13e24:	10800518 	cmpnei	r2,r2,20
   13e28:	1000021e 	bne	r2,zero,13e34 <OSTaskDelReq+0x2c>
        return (OS_ERR_TASK_DEL_IDLE);
   13e2c:	00800f84 	movi	r2,62
   13e30:	00004706 	br	13f50 <OSTaskDelReq+0x148>
    }
#if OS_ARG_CHK_EN > 0
    if (prio >= OS_LOWEST_PRIO) {                               /* Task priority valid ?               */
   13e34:	e0bfff03 	ldbu	r2,-4(fp)
   13e38:	10800530 	cmpltui	r2,r2,20
   13e3c:	1000051e 	bne	r2,zero,13e54 <OSTaskDelReq+0x4c>
        if (prio != OS_PRIO_SELF) {
   13e40:	e0bfff03 	ldbu	r2,-4(fp)
   13e44:	10803fe0 	cmpeqi	r2,r2,255
   13e48:	1000021e 	bne	r2,zero,13e54 <OSTaskDelReq+0x4c>
            return (OS_ERR_PRIO_INVALID);
   13e4c:	00800a84 	movi	r2,42
   13e50:	00003f06 	br	13f50 <OSTaskDelReq+0x148>
        }
    }
#endif
    if (prio == OS_PRIO_SELF) {                                 /* See if a task is requesting to ...  */
   13e54:	e0bfff03 	ldbu	r2,-4(fp)
   13e58:	10803fd8 	cmpnei	r2,r2,255
   13e5c:	1000131e 	bne	r2,zero,13eac <OSTaskDelReq+0xa4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   13e60:	0005303a 	rdctl	r2,status
   13e64:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   13e68:	e0fff917 	ldw	r3,-28(fp)
   13e6c:	00bfff84 	movi	r2,-2
   13e70:	1884703a 	and	r2,r3,r2
   13e74:	1001703a 	wrctl	status,r2
  
  return context;
   13e78:	e0bff917 	ldw	r2,-28(fp)
        OS_ENTER_CRITICAL();                                    /* ... this task to delete itself      */
   13e7c:	e0bff615 	stw	r2,-40(fp)
        stat = OSTCBCur->OSTCBDelReq;                           /* Return request status to caller     */
   13e80:	008000b4 	movhi	r2,2
   13e84:	10b48e04 	addi	r2,r2,-11720
   13e88:	10800017 	ldw	r2,0(r2)
   13e8c:	10800dc3 	ldbu	r2,55(r2)
   13e90:	e0bff705 	stb	r2,-36(fp)
   13e94:	e0bff617 	ldw	r2,-40(fp)
   13e98:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   13e9c:	e0bffa17 	ldw	r2,-24(fp)
   13ea0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (stat);
   13ea4:	e0bff703 	ldbu	r2,-36(fp)
   13ea8:	00002906 	br	13f50 <OSTaskDelReq+0x148>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   13eac:	0005303a 	rdctl	r2,status
   13eb0:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   13eb4:	e0fffb17 	ldw	r3,-20(fp)
   13eb8:	00bfff84 	movi	r2,-2
   13ebc:	1884703a 	and	r2,r3,r2
   13ec0:	1001703a 	wrctl	status,r2
  
  return context;
   13ec4:	e0bffb17 	ldw	r2,-20(fp)
    }
    OS_ENTER_CRITICAL();
   13ec8:	e0bff615 	stw	r2,-40(fp)
    ptcb = OSTCBPrioTbl[prio];
   13ecc:	e0ffff03 	ldbu	r3,-4(fp)
   13ed0:	008000f4 	movhi	r2,3
   13ed4:	10a11f04 	addi	r2,r2,-31620
   13ed8:	18c7883a 	add	r3,r3,r3
   13edc:	18c7883a 	add	r3,r3,r3
   13ee0:	10c5883a 	add	r2,r2,r3
   13ee4:	10800017 	ldw	r2,0(r2)
   13ee8:	e0bff815 	stw	r2,-32(fp)
    if (ptcb == (OS_TCB *)0) {                                  /* Task to delete must exist           */
   13eec:	e0bff817 	ldw	r2,-32(fp)
   13ef0:	1000061e 	bne	r2,zero,13f0c <OSTaskDelReq+0x104>
   13ef4:	e0bff617 	ldw	r2,-40(fp)
   13ef8:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   13efc:	e0bffc17 	ldw	r2,-16(fp)
   13f00:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);                         /* Task must already be deleted        */
   13f04:	008010c4 	movi	r2,67
   13f08:	00001106 	br	13f50 <OSTaskDelReq+0x148>
    }
    if (ptcb == OS_TCB_RESERVED) {                              /* Must NOT be assigned to a Mutex     */
   13f0c:	e0bff817 	ldw	r2,-32(fp)
   13f10:	10800058 	cmpnei	r2,r2,1
   13f14:	1000061e 	bne	r2,zero,13f30 <OSTaskDelReq+0x128>
   13f18:	e0bff617 	ldw	r2,-40(fp)
   13f1c:	e0bffd15 	stw	r2,-12(fp)
   13f20:	e0bffd17 	ldw	r2,-12(fp)
   13f24:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_DEL);
   13f28:	00800f44 	movi	r2,61
   13f2c:	00000806 	br	13f50 <OSTaskDelReq+0x148>
    }
    ptcb->OSTCBDelReq = OS_ERR_TASK_DEL_REQ;                    /* Set flag indicating task to be DEL. */
   13f30:	e0bff817 	ldw	r2,-32(fp)
   13f34:	00c00fc4 	movi	r3,63
   13f38:	10c00dc5 	stb	r3,55(r2)
   13f3c:	e0bff617 	ldw	r2,-40(fp)
   13f40:	e0bffe15 	stw	r2,-8(fp)
   13f44:	e0bffe17 	ldw	r2,-8(fp)
   13f48:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
   13f4c:	0005883a 	mov	r2,zero
}
   13f50:	e037883a 	mov	sp,fp
   13f54:	df000017 	ldw	fp,0(sp)
   13f58:	dec00104 	addi	sp,sp,4
   13f5c:	f800283a 	ret

00013f60 <OSTaskNameGet>:
*********************************************************************************************************
*/

#if OS_TASK_NAME_SIZE > 1
INT8U  OSTaskNameGet (INT8U prio, INT8U *pname, INT8U *perr)
{
   13f60:	defff404 	addi	sp,sp,-48
   13f64:	dfc00b15 	stw	ra,44(sp)
   13f68:	df000a15 	stw	fp,40(sp)
   13f6c:	df000a04 	addi	fp,sp,40
   13f70:	2005883a 	mov	r2,r4
   13f74:	e17ffe15 	stw	r5,-8(fp)
   13f78:	e1bfff15 	stw	r6,-4(fp)
   13f7c:	e0bffd05 	stb	r2,-12(fp)
    OS_TCB    *ptcb;
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                              /* Allocate storage for CPU status register   */
    OS_CPU_SR  cpu_sr = 0;
   13f80:	e03ff615 	stw	zero,-40(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                            /* Validate 'perr'                            */
   13f84:	e0bfff17 	ldw	r2,-4(fp)
   13f88:	1000021e 	bne	r2,zero,13f94 <OSTaskNameGet+0x34>
        return (0);
   13f8c:	0005883a 	mov	r2,zero
   13f90:	00005806 	br	140f4 <OSTaskNameGet+0x194>
    }
    if (prio > OS_LOWEST_PRIO) {                         /* Task priority valid ?                      */
   13f94:	e0bffd03 	ldbu	r2,-12(fp)
   13f98:	10800570 	cmpltui	r2,r2,21
   13f9c:	1000081e 	bne	r2,zero,13fc0 <OSTaskNameGet+0x60>
        if (prio != OS_PRIO_SELF) {
   13fa0:	e0bffd03 	ldbu	r2,-12(fp)
   13fa4:	10803fe0 	cmpeqi	r2,r2,255
   13fa8:	1000051e 	bne	r2,zero,13fc0 <OSTaskNameGet+0x60>
            *perr = OS_ERR_PRIO_INVALID;                 /* No                                         */
   13fac:	e0bfff17 	ldw	r2,-4(fp)
   13fb0:	00c00a84 	movi	r3,42
   13fb4:	10c00005 	stb	r3,0(r2)
            return (0);
   13fb8:	0005883a 	mov	r2,zero
   13fbc:	00004d06 	br	140f4 <OSTaskNameGet+0x194>
        }
    }
    if (pname == (INT8U *)0) {                           /* Is 'pname' a NULL pointer?                 */
   13fc0:	e0bffe17 	ldw	r2,-8(fp)
   13fc4:	1000051e 	bne	r2,zero,13fdc <OSTaskNameGet+0x7c>
        *perr = OS_ERR_PNAME_NULL;                       /* Yes                                        */
   13fc8:	e0bfff17 	ldw	r2,-4(fp)
   13fcc:	00c00304 	movi	r3,12
   13fd0:	10c00005 	stb	r3,0(r2)
        return (0);
   13fd4:	0005883a 	mov	r2,zero
   13fd8:	00004606 	br	140f4 <OSTaskNameGet+0x194>
    }
#endif
    if (OSIntNesting > 0) {                              /* See if trying to call from an ISR          */
   13fdc:	008000b4 	movhi	r2,2
   13fe0:	10b48d04 	addi	r2,r2,-11724
   13fe4:	10800003 	ldbu	r2,0(r2)
   13fe8:	10803fcc 	andi	r2,r2,255
   13fec:	10000526 	beq	r2,zero,14004 <OSTaskNameGet+0xa4>
        *perr = OS_ERR_NAME_GET_ISR;
   13ff0:	e0bfff17 	ldw	r2,-4(fp)
   13ff4:	00c00444 	movi	r3,17
   13ff8:	10c00005 	stb	r3,0(r2)
        return (0);
   13ffc:	0005883a 	mov	r2,zero
   14000:	00003c06 	br	140f4 <OSTaskNameGet+0x194>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   14004:	0005303a 	rdctl	r2,status
   14008:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1400c:	e0fff917 	ldw	r3,-28(fp)
   14010:	00bfff84 	movi	r2,-2
   14014:	1884703a 	and	r2,r3,r2
   14018:	1001703a 	wrctl	status,r2
  
  return context;
   1401c:	e0bff917 	ldw	r2,-28(fp)
    }
    OS_ENTER_CRITICAL();
   14020:	e0bff615 	stw	r2,-40(fp)
    if (prio == OS_PRIO_SELF) {                          /* See if caller desires it's own name        */
   14024:	e0bffd03 	ldbu	r2,-12(fp)
   14028:	10803fd8 	cmpnei	r2,r2,255
   1402c:	1000051e 	bne	r2,zero,14044 <OSTaskNameGet+0xe4>
        prio = OSTCBCur->OSTCBPrio;
   14030:	008000b4 	movhi	r2,2
   14034:	10b48e04 	addi	r2,r2,-11720
   14038:	10800017 	ldw	r2,0(r2)
   1403c:	10800c83 	ldbu	r2,50(r2)
   14040:	e0bffd05 	stb	r2,-12(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
   14044:	e0fffd03 	ldbu	r3,-12(fp)
   14048:	008000f4 	movhi	r2,3
   1404c:	10a11f04 	addi	r2,r2,-31620
   14050:	18c7883a 	add	r3,r3,r3
   14054:	18c7883a 	add	r3,r3,r3
   14058:	10c5883a 	add	r2,r2,r3
   1405c:	10800017 	ldw	r2,0(r2)
   14060:	e0bff715 	stw	r2,-36(fp)
    if (ptcb == (OS_TCB *)0) {                           /* Does task exist?                           */
   14064:	e0bff717 	ldw	r2,-36(fp)
   14068:	1000091e 	bne	r2,zero,14090 <OSTaskNameGet+0x130>
   1406c:	e0bff617 	ldw	r2,-40(fp)
   14070:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   14074:	e0bffa17 	ldw	r2,-24(fp)
   14078:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                              /* No                                         */
        *perr = OS_ERR_TASK_NOT_EXIST;
   1407c:	e0bfff17 	ldw	r2,-4(fp)
   14080:	00c010c4 	movi	r3,67
   14084:	10c00005 	stb	r3,0(r2)
        return (0);
   14088:	0005883a 	mov	r2,zero
   1408c:	00001906 	br	140f4 <OSTaskNameGet+0x194>
    }
    if (ptcb == OS_TCB_RESERVED) {                       /* Task assigned to a Mutex?                  */
   14090:	e0bff717 	ldw	r2,-36(fp)
   14094:	10800058 	cmpnei	r2,r2,1
   14098:	1000091e 	bne	r2,zero,140c0 <OSTaskNameGet+0x160>
   1409c:	e0bff617 	ldw	r2,-40(fp)
   140a0:	e0bffb15 	stw	r2,-20(fp)
   140a4:	e0bffb17 	ldw	r2,-20(fp)
   140a8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                              /* Yes                                        */
        *perr = OS_ERR_TASK_NOT_EXIST;
   140ac:	e0bfff17 	ldw	r2,-4(fp)
   140b0:	00c010c4 	movi	r3,67
   140b4:	10c00005 	stb	r3,0(r2)
        return (0);
   140b8:	0005883a 	mov	r2,zero
   140bc:	00000d06 	br	140f4 <OSTaskNameGet+0x194>
    }
    len   = OS_StrCopy(pname, ptcb->OSTCBTaskName);      /* Yes, copy name from TCB                    */
   140c0:	e0bff717 	ldw	r2,-36(fp)
   140c4:	10801304 	addi	r2,r2,76
   140c8:	e13ffe17 	ldw	r4,-8(fp)
   140cc:	100b883a 	mov	r5,r2
   140d0:	000ed600 	call	ed60 <OS_StrCopy>
   140d4:	e0bff805 	stb	r2,-32(fp)
   140d8:	e0bff617 	ldw	r2,-40(fp)
   140dc:	e0bffc15 	stw	r2,-16(fp)
   140e0:	e0bffc17 	ldw	r2,-16(fp)
   140e4:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
   140e8:	e0bfff17 	ldw	r2,-4(fp)
   140ec:	10000005 	stb	zero,0(r2)
    return (len);
   140f0:	e0bff803 	ldbu	r2,-32(fp)
}
   140f4:	e037883a 	mov	sp,fp
   140f8:	dfc00117 	ldw	ra,4(sp)
   140fc:	df000017 	ldw	fp,0(sp)
   14100:	dec00204 	addi	sp,sp,8
   14104:	f800283a 	ret

00014108 <OSTaskNameSet>:
* Returns    : None
*********************************************************************************************************
*/
#if OS_TASK_NAME_SIZE > 1
void  OSTaskNameSet (INT8U prio, INT8U *pname, INT8U *perr)
{
   14108:	defff304 	addi	sp,sp,-52
   1410c:	dfc00c15 	stw	ra,48(sp)
   14110:	df000b15 	stw	fp,44(sp)
   14114:	df000b04 	addi	fp,sp,44
   14118:	2005883a 	mov	r2,r4
   1411c:	e17ffe15 	stw	r5,-8(fp)
   14120:	e1bfff15 	stw	r6,-4(fp)
   14124:	e0bffd05 	stb	r2,-12(fp)
    INT8U      len;
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                          /* Allocate storage for CPU status register       */
    OS_CPU_SR  cpu_sr = 0;
   14128:	e03ff515 	stw	zero,-44(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                        /* Validate 'perr'                                */
   1412c:	e0bfff17 	ldw	r2,-4(fp)
   14130:	1000011e 	bne	r2,zero,14138 <OSTaskNameSet+0x30>
        return;
   14134:	00005f06 	br	142b4 <OSTaskNameSet+0x1ac>
    }
    if (prio > OS_LOWEST_PRIO) {                     /* Task priority valid ?                          */
   14138:	e0bffd03 	ldbu	r2,-12(fp)
   1413c:	10800570 	cmpltui	r2,r2,21
   14140:	1000071e 	bne	r2,zero,14160 <OSTaskNameSet+0x58>
        if (prio != OS_PRIO_SELF) {
   14144:	e0bffd03 	ldbu	r2,-12(fp)
   14148:	10803fe0 	cmpeqi	r2,r2,255
   1414c:	1000041e 	bne	r2,zero,14160 <OSTaskNameSet+0x58>
            *perr = OS_ERR_PRIO_INVALID;             /* No                                             */
   14150:	e0bfff17 	ldw	r2,-4(fp)
   14154:	00c00a84 	movi	r3,42
   14158:	10c00005 	stb	r3,0(r2)
            return;
   1415c:	00005506 	br	142b4 <OSTaskNameSet+0x1ac>
        }
    }
    if (pname == (INT8U *)0) {                       /* Is 'pname' a NULL pointer?                     */
   14160:	e0bffe17 	ldw	r2,-8(fp)
   14164:	1000041e 	bne	r2,zero,14178 <OSTaskNameSet+0x70>
        *perr = OS_ERR_PNAME_NULL;                   /* Yes                                            */
   14168:	e0bfff17 	ldw	r2,-4(fp)
   1416c:	00c00304 	movi	r3,12
   14170:	10c00005 	stb	r3,0(r2)
        return;
   14174:	00004f06 	br	142b4 <OSTaskNameSet+0x1ac>
    }
#endif
    if (OSIntNesting > 0) {                          /* See if trying to call from an ISR              */
   14178:	008000b4 	movhi	r2,2
   1417c:	10b48d04 	addi	r2,r2,-11724
   14180:	10800003 	ldbu	r2,0(r2)
   14184:	10803fcc 	andi	r2,r2,255
   14188:	10000426 	beq	r2,zero,1419c <OSTaskNameSet+0x94>
        *perr = OS_ERR_NAME_SET_ISR;
   1418c:	e0bfff17 	ldw	r2,-4(fp)
   14190:	00c00484 	movi	r3,18
   14194:	10c00005 	stb	r3,0(r2)
        return;
   14198:	00004606 	br	142b4 <OSTaskNameSet+0x1ac>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1419c:	0005303a 	rdctl	r2,status
   141a0:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   141a4:	e0fff817 	ldw	r3,-32(fp)
   141a8:	00bfff84 	movi	r2,-2
   141ac:	1884703a 	and	r2,r3,r2
   141b0:	1001703a 	wrctl	status,r2
  
  return context;
   141b4:	e0bff817 	ldw	r2,-32(fp)
    }
    OS_ENTER_CRITICAL();
   141b8:	e0bff515 	stw	r2,-44(fp)
    if (prio == OS_PRIO_SELF) {                      /* See if caller desires to set it's own name     */
   141bc:	e0bffd03 	ldbu	r2,-12(fp)
   141c0:	10803fd8 	cmpnei	r2,r2,255
   141c4:	1000051e 	bne	r2,zero,141dc <OSTaskNameSet+0xd4>
        prio = OSTCBCur->OSTCBPrio;
   141c8:	008000b4 	movhi	r2,2
   141cc:	10b48e04 	addi	r2,r2,-11720
   141d0:	10800017 	ldw	r2,0(r2)
   141d4:	10800c83 	ldbu	r2,50(r2)
   141d8:	e0bffd05 	stb	r2,-12(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
   141dc:	e0fffd03 	ldbu	r3,-12(fp)
   141e0:	008000f4 	movhi	r2,3
   141e4:	10a11f04 	addi	r2,r2,-31620
   141e8:	18c7883a 	add	r3,r3,r3
   141ec:	18c7883a 	add	r3,r3,r3
   141f0:	10c5883a 	add	r2,r2,r3
   141f4:	10800017 	ldw	r2,0(r2)
   141f8:	e0bff615 	stw	r2,-40(fp)
    if (ptcb == (OS_TCB *)0) {                       /* Does task exist?                               */
   141fc:	e0bff617 	ldw	r2,-40(fp)
   14200:	1000081e 	bne	r2,zero,14224 <OSTaskNameSet+0x11c>
   14204:	e0bff517 	ldw	r2,-44(fp)
   14208:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1420c:	e0bff917 	ldw	r2,-28(fp)
   14210:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                          /* No                                             */
        *perr = OS_ERR_TASK_NOT_EXIST;
   14214:	e0bfff17 	ldw	r2,-4(fp)
   14218:	00c010c4 	movi	r3,67
   1421c:	10c00005 	stb	r3,0(r2)
        return;
   14220:	00002406 	br	142b4 <OSTaskNameSet+0x1ac>
    }
    if (ptcb == OS_TCB_RESERVED) {                   /* Task assigned to a Mutex?                      */
   14224:	e0bff617 	ldw	r2,-40(fp)
   14228:	10800058 	cmpnei	r2,r2,1
   1422c:	1000081e 	bne	r2,zero,14250 <OSTaskNameSet+0x148>
   14230:	e0bff517 	ldw	r2,-44(fp)
   14234:	e0bffa15 	stw	r2,-24(fp)
   14238:	e0bffa17 	ldw	r2,-24(fp)
   1423c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                          /* Yes                                            */
        *perr = OS_ERR_TASK_NOT_EXIST;
   14240:	e0bfff17 	ldw	r2,-4(fp)
   14244:	00c010c4 	movi	r3,67
   14248:	10c00005 	stb	r3,0(r2)
        return;
   1424c:	00001906 	br	142b4 <OSTaskNameSet+0x1ac>
    }
    len = OS_StrLen(pname);                          /* Yes, Can we fit the string in the TCB?         */
   14250:	e13ffe17 	ldw	r4,-8(fp)
   14254:	000edd40 	call	edd4 <OS_StrLen>
   14258:	e0bff705 	stb	r2,-36(fp)
    if (len > (OS_TASK_NAME_SIZE - 1)) {             /*      No                                        */
   1425c:	e0bff703 	ldbu	r2,-36(fp)
   14260:	10800830 	cmpltui	r2,r2,32
   14264:	1000081e 	bne	r2,zero,14288 <OSTaskNameSet+0x180>
   14268:	e0bff517 	ldw	r2,-44(fp)
   1426c:	e0bffb15 	stw	r2,-20(fp)
   14270:	e0bffb17 	ldw	r2,-20(fp)
   14274:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_TASK_NAME_TOO_LONG;
   14278:	e0bfff17 	ldw	r2,-4(fp)
   1427c:	00c01044 	movi	r3,65
   14280:	10c00005 	stb	r3,0(r2)
        return;
   14284:	00000b06 	br	142b4 <OSTaskNameSet+0x1ac>
    }
    (void)OS_StrCopy(ptcb->OSTCBTaskName, pname);    /*      Yes, copy to TCB                          */
   14288:	e0bff617 	ldw	r2,-40(fp)
   1428c:	10801304 	addi	r2,r2,76
   14290:	1009883a 	mov	r4,r2
   14294:	e17ffe17 	ldw	r5,-8(fp)
   14298:	000ed600 	call	ed60 <OS_StrCopy>
   1429c:	e0bff517 	ldw	r2,-44(fp)
   142a0:	e0bffc15 	stw	r2,-16(fp)
   142a4:	e0bffc17 	ldw	r2,-16(fp)
   142a8:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
   142ac:	e0bfff17 	ldw	r2,-4(fp)
   142b0:	10000005 	stb	zero,0(r2)
}
   142b4:	e037883a 	mov	sp,fp
   142b8:	dfc00117 	ldw	ra,4(sp)
   142bc:	df000017 	ldw	fp,0(sp)
   142c0:	dec00204 	addi	sp,sp,8
   142c4:	f800283a 	ret

000142c8 <OSTaskResume>:
*********************************************************************************************************
*/

#if OS_TASK_SUSPEND_EN > 0
INT8U  OSTaskResume (INT8U prio)
{
   142c8:	defff404 	addi	sp,sp,-48
   142cc:	dfc00b15 	stw	ra,44(sp)
   142d0:	df000a15 	stw	fp,40(sp)
   142d4:	df000a04 	addi	fp,sp,40
   142d8:	2005883a 	mov	r2,r4
   142dc:	e0bfff05 	stb	r2,-4(fp)
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                                   /* Storage for CPU status register       */
    OS_CPU_SR  cpu_sr = 0;
   142e0:	e03ff615 	stw	zero,-40(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio >= OS_LOWEST_PRIO) {                             /* Make sure task priority is valid      */
   142e4:	e0bfff03 	ldbu	r2,-4(fp)
   142e8:	10800530 	cmpltui	r2,r2,20
   142ec:	1000021e 	bne	r2,zero,142f8 <OSTaskResume+0x30>
        return (OS_ERR_PRIO_INVALID);
   142f0:	00800a84 	movi	r2,42
   142f4:	00006d06 	br	144ac <OSTaskResume+0x1e4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   142f8:	0005303a 	rdctl	r2,status
   142fc:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   14300:	e0fff817 	ldw	r3,-32(fp)
   14304:	00bfff84 	movi	r2,-2
   14308:	1884703a 	and	r2,r3,r2
   1430c:	1001703a 	wrctl	status,r2
  
  return context;
   14310:	e0bff817 	ldw	r2,-32(fp)
    }
#endif
    OS_ENTER_CRITICAL();
   14314:	e0bff615 	stw	r2,-40(fp)
    ptcb = OSTCBPrioTbl[prio];
   14318:	e0ffff03 	ldbu	r3,-4(fp)
   1431c:	008000f4 	movhi	r2,3
   14320:	10a11f04 	addi	r2,r2,-31620
   14324:	18c7883a 	add	r3,r3,r3
   14328:	18c7883a 	add	r3,r3,r3
   1432c:	10c5883a 	add	r2,r2,r3
   14330:	10800017 	ldw	r2,0(r2)
   14334:	e0bff715 	stw	r2,-36(fp)
    if (ptcb == (OS_TCB *)0) {                                /* Task to suspend must exist            */
   14338:	e0bff717 	ldw	r2,-36(fp)
   1433c:	1000061e 	bne	r2,zero,14358 <OSTaskResume+0x90>
   14340:	e0bff617 	ldw	r2,-40(fp)
   14344:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   14348:	e0bff917 	ldw	r2,-28(fp)
   1434c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_RESUME_PRIO);
   14350:	00801184 	movi	r2,70
   14354:	00005506 	br	144ac <OSTaskResume+0x1e4>
    }
    if (ptcb == OS_TCB_RESERVED) {                            /* See if assigned to Mutex              */
   14358:	e0bff717 	ldw	r2,-36(fp)
   1435c:	10800058 	cmpnei	r2,r2,1
   14360:	1000061e 	bne	r2,zero,1437c <OSTaskResume+0xb4>
   14364:	e0bff617 	ldw	r2,-40(fp)
   14368:	e0bffa15 	stw	r2,-24(fp)
   1436c:	e0bffa17 	ldw	r2,-24(fp)
   14370:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
   14374:	008010c4 	movi	r2,67
   14378:	00004c06 	br	144ac <OSTaskResume+0x1e4>
    }
    if ((ptcb->OSTCBStat & OS_STAT_SUSPEND) != OS_STAT_RDY) { /* Task must be suspended                */
   1437c:	e0bff717 	ldw	r2,-36(fp)
   14380:	10800c03 	ldbu	r2,48(r2)
   14384:	10803fcc 	andi	r2,r2,255
   14388:	1080020c 	andi	r2,r2,8
   1438c:	10004226 	beq	r2,zero,14498 <OSTaskResume+0x1d0>
        ptcb->OSTCBStat &= ~(INT8U)OS_STAT_SUSPEND;           /* Remove suspension                     */
   14390:	e0bff717 	ldw	r2,-36(fp)
   14394:	10c00c03 	ldbu	r3,48(r2)
   14398:	00bffdc4 	movi	r2,-9
   1439c:	1884703a 	and	r2,r3,r2
   143a0:	1007883a 	mov	r3,r2
   143a4:	e0bff717 	ldw	r2,-36(fp)
   143a8:	10c00c05 	stb	r3,48(r2)
        if (ptcb->OSTCBStat == OS_STAT_RDY) {                 /* See if task is now ready              */
   143ac:	e0bff717 	ldw	r2,-36(fp)
   143b0:	10800c03 	ldbu	r2,48(r2)
   143b4:	10803fcc 	andi	r2,r2,255
   143b8:	1000311e 	bne	r2,zero,14480 <OSTaskResume+0x1b8>
            if (ptcb->OSTCBDly == 0) {
   143bc:	e0bff717 	ldw	r2,-36(fp)
   143c0:	10800b8b 	ldhu	r2,46(r2)
   143c4:	10bfffcc 	andi	r2,r2,65535
   143c8:	1000281e 	bne	r2,zero,1446c <OSTaskResume+0x1a4>
                OSRdyGrp               |= ptcb->OSTCBBitY;    /* Yes, Make task ready to run           */
   143cc:	e0bff717 	ldw	r2,-36(fp)
   143d0:	10c00d83 	ldbu	r3,54(r2)
   143d4:	008000b4 	movhi	r2,2
   143d8:	10b48b04 	addi	r2,r2,-11732
   143dc:	10800003 	ldbu	r2,0(r2)
   143e0:	1884b03a 	or	r2,r3,r2
   143e4:	1007883a 	mov	r3,r2
   143e8:	008000b4 	movhi	r2,2
   143ec:	10b48b04 	addi	r2,r2,-11732
   143f0:	10c00005 	stb	r3,0(r2)
                OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
   143f4:	e0bff717 	ldw	r2,-36(fp)
   143f8:	10800d03 	ldbu	r2,52(r2)
   143fc:	10c03fcc 	andi	r3,r2,255
   14400:	e0bff717 	ldw	r2,-36(fp)
   14404:	10800d03 	ldbu	r2,52(r2)
   14408:	11003fcc 	andi	r4,r2,255
   1440c:	008000b4 	movhi	r2,2
   14410:	10b48b44 	addi	r2,r2,-11731
   14414:	1105883a 	add	r2,r2,r4
   14418:	11000003 	ldbu	r4,0(r2)
   1441c:	e0bff717 	ldw	r2,-36(fp)
   14420:	10800d43 	ldbu	r2,53(r2)
   14424:	2084b03a 	or	r2,r4,r2
   14428:	1009883a 	mov	r4,r2
   1442c:	008000b4 	movhi	r2,2
   14430:	10b48b44 	addi	r2,r2,-11731
   14434:	10c5883a 	add	r2,r2,r3
   14438:	11000005 	stb	r4,0(r2)
   1443c:	e0bff617 	ldw	r2,-40(fp)
   14440:	e0bffb15 	stw	r2,-20(fp)
   14444:	e0bffb17 	ldw	r2,-20(fp)
   14448:	1001703a 	wrctl	status,r2
                OS_EXIT_CRITICAL();
                if (OSRunning == OS_TRUE) {
   1444c:	008000b4 	movhi	r2,2
   14450:	10b47f44 	addi	r2,r2,-11779
   14454:	10800003 	ldbu	r2,0(r2)
   14458:	10803fcc 	andi	r2,r2,255
   1445c:	10800058 	cmpnei	r2,r2,1
   14460:	10000b1e 	bne	r2,zero,14490 <OSTaskResume+0x1c8>
                    OS_Sched();                               /* Find new highest priority task        */
   14464:	000ec240 	call	ec24 <OS_Sched>
   14468:	00000906 	br	14490 <OSTaskResume+0x1c8>
   1446c:	e0bff617 	ldw	r2,-40(fp)
   14470:	e0bffc15 	stw	r2,-16(fp)
   14474:	e0bffc17 	ldw	r2,-16(fp)
   14478:	1001703a 	wrctl	status,r2
   1447c:	00000406 	br	14490 <OSTaskResume+0x1c8>
   14480:	e0bff617 	ldw	r2,-40(fp)
   14484:	e0bffd15 	stw	r2,-12(fp)
   14488:	e0bffd17 	ldw	r2,-12(fp)
   1448c:	1001703a 	wrctl	status,r2
                OS_EXIT_CRITICAL();
            }
        } else {                                              /* Must be pending on event              */
            OS_EXIT_CRITICAL();
        }
        return (OS_ERR_NONE);
   14490:	0005883a 	mov	r2,zero
   14494:	00000506 	br	144ac <OSTaskResume+0x1e4>
   14498:	e0bff617 	ldw	r2,-40(fp)
   1449c:	e0bffe15 	stw	r2,-8(fp)
   144a0:	e0bffe17 	ldw	r2,-8(fp)
   144a4:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_TASK_NOT_SUSPENDED);
   144a8:	00801104 	movi	r2,68
}
   144ac:	e037883a 	mov	sp,fp
   144b0:	dfc00117 	ldw	ra,4(sp)
   144b4:	df000017 	ldw	fp,0(sp)
   144b8:	dec00204 	addi	sp,sp,8
   144bc:	f800283a 	ret

000144c0 <OSTaskStkChk>:
*              OS_ERR_PDATA_NULL      if 'p_stk_data' is a NULL pointer
*********************************************************************************************************
*/
#if (OS_TASK_STAT_STK_CHK_EN > 0) && (OS_TASK_CREATE_EXT_EN > 0)
INT8U  OSTaskStkChk (INT8U prio, OS_STK_DATA *p_stk_data)
{
   144c0:	defff304 	addi	sp,sp,-52
   144c4:	df000c15 	stw	fp,48(sp)
   144c8:	df000c04 	addi	fp,sp,48
   144cc:	2005883a 	mov	r2,r4
   144d0:	e17fff15 	stw	r5,-4(fp)
   144d4:	e0bffe05 	stb	r2,-8(fp)
    OS_TCB    *ptcb;
    OS_STK    *pchk;
    INT32U     nfree;
    INT32U     size;
#if OS_CRITICAL_METHOD == 3                            /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
   144d8:	e03ff615 	stw	zero,-40(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio > OS_LOWEST_PRIO) {                       /* Make sure task priority is valid             */
   144dc:	e0bffe03 	ldbu	r2,-8(fp)
   144e0:	10800570 	cmpltui	r2,r2,21
   144e4:	1000051e 	bne	r2,zero,144fc <OSTaskStkChk+0x3c>
        if (prio != OS_PRIO_SELF) {
   144e8:	e0bffe03 	ldbu	r2,-8(fp)
   144ec:	10803fe0 	cmpeqi	r2,r2,255
   144f0:	1000021e 	bne	r2,zero,144fc <OSTaskStkChk+0x3c>
            return (OS_ERR_PRIO_INVALID);
   144f4:	00800a84 	movi	r2,42
   144f8:	00005f06 	br	14678 <OSTaskStkChk+0x1b8>
        }
    }
    if (p_stk_data == (OS_STK_DATA *)0) {              /* Validate 'p_stk_data'                        */
   144fc:	e0bfff17 	ldw	r2,-4(fp)
   14500:	1000021e 	bne	r2,zero,1450c <OSTaskStkChk+0x4c>
        return (OS_ERR_PDATA_NULL);
   14504:	00800244 	movi	r2,9
   14508:	00005b06 	br	14678 <OSTaskStkChk+0x1b8>
    }
#endif
    p_stk_data->OSFree = 0;                            /* Assume failure, set to 0 size                */
   1450c:	e0bfff17 	ldw	r2,-4(fp)
   14510:	10000015 	stw	zero,0(r2)
    p_stk_data->OSUsed = 0;
   14514:	e0bfff17 	ldw	r2,-4(fp)
   14518:	10000115 	stw	zero,4(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1451c:	0005303a 	rdctl	r2,status
   14520:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   14524:	e0fff917 	ldw	r3,-28(fp)
   14528:	00bfff84 	movi	r2,-2
   1452c:	1884703a 	and	r2,r3,r2
   14530:	1001703a 	wrctl	status,r2
  
  return context;
   14534:	e0bff917 	ldw	r2,-28(fp)
    OS_ENTER_CRITICAL();
   14538:	e0bff615 	stw	r2,-40(fp)
    if (prio == OS_PRIO_SELF) {                        /* See if check for SELF                        */
   1453c:	e0bffe03 	ldbu	r2,-8(fp)
   14540:	10803fd8 	cmpnei	r2,r2,255
   14544:	1000051e 	bne	r2,zero,1455c <OSTaskStkChk+0x9c>
        prio = OSTCBCur->OSTCBPrio;
   14548:	008000b4 	movhi	r2,2
   1454c:	10b48e04 	addi	r2,r2,-11720
   14550:	10800017 	ldw	r2,0(r2)
   14554:	10800c83 	ldbu	r2,50(r2)
   14558:	e0bffe05 	stb	r2,-8(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
   1455c:	e0fffe03 	ldbu	r3,-8(fp)
   14560:	008000f4 	movhi	r2,3
   14564:	10a11f04 	addi	r2,r2,-31620
   14568:	18c7883a 	add	r3,r3,r3
   1456c:	18c7883a 	add	r3,r3,r3
   14570:	10c5883a 	add	r2,r2,r3
   14574:	10800017 	ldw	r2,0(r2)
   14578:	e0bff715 	stw	r2,-36(fp)
    if (ptcb == (OS_TCB *)0) {                         /* Make sure task exist                         */
   1457c:	e0bff717 	ldw	r2,-36(fp)
   14580:	1000061e 	bne	r2,zero,1459c <OSTaskStkChk+0xdc>
   14584:	e0bff617 	ldw	r2,-40(fp)
   14588:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1458c:	e0bffa17 	ldw	r2,-24(fp)
   14590:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
   14594:	008010c4 	movi	r2,67
   14598:	00003706 	br	14678 <OSTaskStkChk+0x1b8>
    }
    if (ptcb == OS_TCB_RESERVED) {
   1459c:	e0bff717 	ldw	r2,-36(fp)
   145a0:	10800058 	cmpnei	r2,r2,1
   145a4:	1000061e 	bne	r2,zero,145c0 <OSTaskStkChk+0x100>
   145a8:	e0bff617 	ldw	r2,-40(fp)
   145ac:	e0bffb15 	stw	r2,-20(fp)
   145b0:	e0bffb17 	ldw	r2,-20(fp)
   145b4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
   145b8:	008010c4 	movi	r2,67
   145bc:	00002e06 	br	14678 <OSTaskStkChk+0x1b8>
    }
    if ((ptcb->OSTCBOpt & OS_TASK_OPT_STK_CHK) == 0) { /* Make sure stack checking option is set       */
   145c0:	e0bff717 	ldw	r2,-36(fp)
   145c4:	1080040b 	ldhu	r2,16(r2)
   145c8:	10bfffcc 	andi	r2,r2,65535
   145cc:	1080004c 	andi	r2,r2,1
   145d0:	1000061e 	bne	r2,zero,145ec <OSTaskStkChk+0x12c>
   145d4:	e0bff617 	ldw	r2,-40(fp)
   145d8:	e0bffc15 	stw	r2,-16(fp)
   145dc:	e0bffc17 	ldw	r2,-16(fp)
   145e0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_OPT);
   145e4:	00801144 	movi	r2,69
   145e8:	00002306 	br	14678 <OSTaskStkChk+0x1b8>
    }
    nfree = 0;
   145ec:	e03ff515 	stw	zero,-44(fp)
    size  = ptcb->OSTCBStkSize;
   145f0:	e0bff717 	ldw	r2,-36(fp)
   145f4:	10800317 	ldw	r2,12(r2)
   145f8:	e0bff815 	stw	r2,-32(fp)
    pchk  = ptcb->OSTCBStkBottom;
   145fc:	e0bff717 	ldw	r2,-36(fp)
   14600:	10800217 	ldw	r2,8(r2)
   14604:	e0bff415 	stw	r2,-48(fp)
   14608:	e0bff617 	ldw	r2,-40(fp)
   1460c:	e0bffd15 	stw	r2,-12(fp)
   14610:	e0bffd17 	ldw	r2,-12(fp)
   14614:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
#if OS_STK_GROWTH == 1
    while (*pchk++ == (OS_STK)0) {                    /* Compute the number of zero entries on the stk */
   14618:	00000306 	br	14628 <OSTaskStkChk+0x168>
        nfree++;
   1461c:	e0bff517 	ldw	r2,-44(fp)
   14620:	10800044 	addi	r2,r2,1
   14624:	e0bff515 	stw	r2,-44(fp)
    nfree = 0;
    size  = ptcb->OSTCBStkSize;
    pchk  = ptcb->OSTCBStkBottom;
    OS_EXIT_CRITICAL();
#if OS_STK_GROWTH == 1
    while (*pchk++ == (OS_STK)0) {                    /* Compute the number of zero entries on the stk */
   14628:	e0bff417 	ldw	r2,-48(fp)
   1462c:	10c00104 	addi	r3,r2,4
   14630:	e0fff415 	stw	r3,-48(fp)
   14634:	10800017 	ldw	r2,0(r2)
   14638:	103ff826 	beq	r2,zero,1461c <__alt_mem_Flash_flash_data+0xf401461c>
#else
    while (*pchk-- == (OS_STK)0) {
        nfree++;
    }
#endif
    p_stk_data->OSFree = nfree * sizeof(OS_STK);          /* Compute number of free bytes on the stack */
   1463c:	e0bff517 	ldw	r2,-44(fp)
   14640:	1085883a 	add	r2,r2,r2
   14644:	1085883a 	add	r2,r2,r2
   14648:	1007883a 	mov	r3,r2
   1464c:	e0bfff17 	ldw	r2,-4(fp)
   14650:	10c00015 	stw	r3,0(r2)
    p_stk_data->OSUsed = (size - nfree) * sizeof(OS_STK); /* Compute number of bytes used on the stack */
   14654:	e0fff817 	ldw	r3,-32(fp)
   14658:	e0bff517 	ldw	r2,-44(fp)
   1465c:	1885c83a 	sub	r2,r3,r2
   14660:	1085883a 	add	r2,r2,r2
   14664:	1085883a 	add	r2,r2,r2
   14668:	1007883a 	mov	r3,r2
   1466c:	e0bfff17 	ldw	r2,-4(fp)
   14670:	10c00115 	stw	r3,4(r2)
    return (OS_ERR_NONE);
   14674:	0005883a 	mov	r2,zero
}
   14678:	e037883a 	mov	sp,fp
   1467c:	df000017 	ldw	fp,0(sp)
   14680:	dec00104 	addi	sp,sp,4
   14684:	f800283a 	ret

00014688 <OSTaskSuspend>:
*********************************************************************************************************
*/

#if OS_TASK_SUSPEND_EN > 0
INT8U  OSTaskSuspend (INT8U prio)
{
   14688:	defff504 	addi	sp,sp,-44
   1468c:	dfc00a15 	stw	ra,40(sp)
   14690:	df000915 	stw	fp,36(sp)
   14694:	df000904 	addi	fp,sp,36
   14698:	2005883a 	mov	r2,r4
   1469c:	e0bfff05 	stb	r2,-4(fp)
    BOOLEAN    self;
    OS_TCB    *ptcb;
    INT8U      y;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   146a0:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio == OS_TASK_IDLE_PRIO) {                            /* Not allowed to suspend idle task    */
   146a4:	e0bfff03 	ldbu	r2,-4(fp)
   146a8:	10800518 	cmpnei	r2,r2,20
   146ac:	1000021e 	bne	r2,zero,146b8 <OSTaskSuspend+0x30>
        return (OS_ERR_TASK_SUSPEND_IDLE);
   146b0:	008011c4 	movi	r2,71
   146b4:	00007406 	br	14888 <OSTaskSuspend+0x200>
    }
    if (prio >= OS_LOWEST_PRIO) {                               /* Task priority valid ?               */
   146b8:	e0bfff03 	ldbu	r2,-4(fp)
   146bc:	10800530 	cmpltui	r2,r2,20
   146c0:	1000051e 	bne	r2,zero,146d8 <OSTaskSuspend+0x50>
        if (prio != OS_PRIO_SELF) {
   146c4:	e0bfff03 	ldbu	r2,-4(fp)
   146c8:	10803fe0 	cmpeqi	r2,r2,255
   146cc:	1000021e 	bne	r2,zero,146d8 <OSTaskSuspend+0x50>
            return (OS_ERR_PRIO_INVALID);
   146d0:	00800a84 	movi	r2,42
   146d4:	00006c06 	br	14888 <OSTaskSuspend+0x200>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   146d8:	0005303a 	rdctl	r2,status
   146dc:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   146e0:	e0fffb17 	ldw	r3,-20(fp)
   146e4:	00bfff84 	movi	r2,-2
   146e8:	1884703a 	and	r2,r3,r2
   146ec:	1001703a 	wrctl	status,r2
  
  return context;
   146f0:	e0bffb17 	ldw	r2,-20(fp)
        }
    }
#endif
    OS_ENTER_CRITICAL();
   146f4:	e0bff815 	stw	r2,-32(fp)
    if (prio == OS_PRIO_SELF) {                                 /* See if suspend SELF                 */
   146f8:	e0bfff03 	ldbu	r2,-4(fp)
   146fc:	10803fd8 	cmpnei	r2,r2,255
   14700:	1000081e 	bne	r2,zero,14724 <OSTaskSuspend+0x9c>
        prio = OSTCBCur->OSTCBPrio;
   14704:	008000b4 	movhi	r2,2
   14708:	10b48e04 	addi	r2,r2,-11720
   1470c:	10800017 	ldw	r2,0(r2)
   14710:	10800c83 	ldbu	r2,50(r2)
   14714:	e0bfff05 	stb	r2,-4(fp)
        self = OS_TRUE;
   14718:	00800044 	movi	r2,1
   1471c:	e0bff705 	stb	r2,-36(fp)
   14720:	00000b06 	br	14750 <OSTaskSuspend+0xc8>
    } else if (prio == OSTCBCur->OSTCBPrio) {                   /* See if suspending self              */
   14724:	008000b4 	movhi	r2,2
   14728:	10b48e04 	addi	r2,r2,-11720
   1472c:	10800017 	ldw	r2,0(r2)
   14730:	10800c83 	ldbu	r2,50(r2)
   14734:	10c03fcc 	andi	r3,r2,255
   14738:	e0bfff03 	ldbu	r2,-4(fp)
   1473c:	1880031e 	bne	r3,r2,1474c <OSTaskSuspend+0xc4>
        self = OS_TRUE;
   14740:	00800044 	movi	r2,1
   14744:	e0bff705 	stb	r2,-36(fp)
   14748:	00000106 	br	14750 <OSTaskSuspend+0xc8>
    } else {
        self = OS_FALSE;                                        /* No suspending another task          */
   1474c:	e03ff705 	stb	zero,-36(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
   14750:	e0ffff03 	ldbu	r3,-4(fp)
   14754:	008000f4 	movhi	r2,3
   14758:	10a11f04 	addi	r2,r2,-31620
   1475c:	18c7883a 	add	r3,r3,r3
   14760:	18c7883a 	add	r3,r3,r3
   14764:	10c5883a 	add	r2,r2,r3
   14768:	10800017 	ldw	r2,0(r2)
   1476c:	e0bff915 	stw	r2,-28(fp)
    if (ptcb == (OS_TCB *)0) {                                  /* Task to suspend must exist          */
   14770:	e0bff917 	ldw	r2,-28(fp)
   14774:	1000061e 	bne	r2,zero,14790 <OSTaskSuspend+0x108>
   14778:	e0bff817 	ldw	r2,-32(fp)
   1477c:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   14780:	e0bffc17 	ldw	r2,-16(fp)
   14784:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_SUSPEND_PRIO);
   14788:	00801204 	movi	r2,72
   1478c:	00003e06 	br	14888 <OSTaskSuspend+0x200>
    }
    if (ptcb == OS_TCB_RESERVED) {                              /* See if assigned to Mutex            */
   14790:	e0bff917 	ldw	r2,-28(fp)
   14794:	10800058 	cmpnei	r2,r2,1
   14798:	1000061e 	bne	r2,zero,147b4 <OSTaskSuspend+0x12c>
   1479c:	e0bff817 	ldw	r2,-32(fp)
   147a0:	e0bffd15 	stw	r2,-12(fp)
   147a4:	e0bffd17 	ldw	r2,-12(fp)
   147a8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
   147ac:	008010c4 	movi	r2,67
   147b0:	00003506 	br	14888 <OSTaskSuspend+0x200>
    }
    y            = ptcb->OSTCBY;
   147b4:	e0bff917 	ldw	r2,-28(fp)
   147b8:	10800d03 	ldbu	r2,52(r2)
   147bc:	e0bffa05 	stb	r2,-24(fp)
    OSRdyTbl[y] &= ~ptcb->OSTCBBitX;                            /* Make task not ready                 */
   147c0:	e0fffa03 	ldbu	r3,-24(fp)
   147c4:	e13ffa03 	ldbu	r4,-24(fp)
   147c8:	008000b4 	movhi	r2,2
   147cc:	10b48b44 	addi	r2,r2,-11731
   147d0:	1105883a 	add	r2,r2,r4
   147d4:	10800003 	ldbu	r2,0(r2)
   147d8:	1009883a 	mov	r4,r2
   147dc:	e0bff917 	ldw	r2,-28(fp)
   147e0:	10800d43 	ldbu	r2,53(r2)
   147e4:	0084303a 	nor	r2,zero,r2
   147e8:	2084703a 	and	r2,r4,r2
   147ec:	1009883a 	mov	r4,r2
   147f0:	008000b4 	movhi	r2,2
   147f4:	10b48b44 	addi	r2,r2,-11731
   147f8:	10c5883a 	add	r2,r2,r3
   147fc:	11000005 	stb	r4,0(r2)
    if (OSRdyTbl[y] == 0) {
   14800:	e0fffa03 	ldbu	r3,-24(fp)
   14804:	008000b4 	movhi	r2,2
   14808:	10b48b44 	addi	r2,r2,-11731
   1480c:	10c5883a 	add	r2,r2,r3
   14810:	10800003 	ldbu	r2,0(r2)
   14814:	10803fcc 	andi	r2,r2,255
   14818:	10000c1e 	bne	r2,zero,1484c <OSTaskSuspend+0x1c4>
        OSRdyGrp &= ~ptcb->OSTCBBitY;
   1481c:	e0bff917 	ldw	r2,-28(fp)
   14820:	10800d83 	ldbu	r2,54(r2)
   14824:	0084303a 	nor	r2,zero,r2
   14828:	1007883a 	mov	r3,r2
   1482c:	008000b4 	movhi	r2,2
   14830:	10b48b04 	addi	r2,r2,-11732
   14834:	10800003 	ldbu	r2,0(r2)
   14838:	1884703a 	and	r2,r3,r2
   1483c:	1007883a 	mov	r3,r2
   14840:	008000b4 	movhi	r2,2
   14844:	10b48b04 	addi	r2,r2,-11732
   14848:	10c00005 	stb	r3,0(r2)
    }
    ptcb->OSTCBStat |= OS_STAT_SUSPEND;                         /* Status of task is 'SUSPENDED'       */
   1484c:	e0bff917 	ldw	r2,-28(fp)
   14850:	10800c03 	ldbu	r2,48(r2)
   14854:	10800214 	ori	r2,r2,8
   14858:	1007883a 	mov	r3,r2
   1485c:	e0bff917 	ldw	r2,-28(fp)
   14860:	10c00c05 	stb	r3,48(r2)
   14864:	e0bff817 	ldw	r2,-32(fp)
   14868:	e0bffe15 	stw	r2,-8(fp)
   1486c:	e0bffe17 	ldw	r2,-8(fp)
   14870:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    if (self == OS_TRUE) {                                      /* Context switch only if SELF         */
   14874:	e0bff703 	ldbu	r2,-36(fp)
   14878:	10800058 	cmpnei	r2,r2,1
   1487c:	1000011e 	bne	r2,zero,14884 <OSTaskSuspend+0x1fc>
        OS_Sched();                                             /* Find new highest priority task      */
   14880:	000ec240 	call	ec24 <OS_Sched>
    }
    return (OS_ERR_NONE);
   14884:	0005883a 	mov	r2,zero
}
   14888:	e037883a 	mov	sp,fp
   1488c:	dfc00117 	ldw	ra,4(sp)
   14890:	df000017 	ldw	fp,0(sp)
   14894:	dec00204 	addi	sp,sp,8
   14898:	f800283a 	ret

0001489c <OSTaskQuery>:
*********************************************************************************************************
*/

#if OS_TASK_QUERY_EN > 0
INT8U  OSTaskQuery (INT8U prio, OS_TCB *p_task_data)
{
   1489c:	defff604 	addi	sp,sp,-40
   148a0:	dfc00915 	stw	ra,36(sp)
   148a4:	df000815 	stw	fp,32(sp)
   148a8:	df000804 	addi	fp,sp,32
   148ac:	2005883a 	mov	r2,r4
   148b0:	e17fff15 	stw	r5,-4(fp)
   148b4:	e0bffe05 	stb	r2,-8(fp)
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   148b8:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio > OS_LOWEST_PRIO) {                 /* Task priority valid ?                              */
   148bc:	e0bffe03 	ldbu	r2,-8(fp)
   148c0:	10800570 	cmpltui	r2,r2,21
   148c4:	1000051e 	bne	r2,zero,148dc <OSTaskQuery+0x40>
        if (prio != OS_PRIO_SELF) {
   148c8:	e0bffe03 	ldbu	r2,-8(fp)
   148cc:	10803fe0 	cmpeqi	r2,r2,255
   148d0:	1000021e 	bne	r2,zero,148dc <OSTaskQuery+0x40>
            return (OS_ERR_PRIO_INVALID);
   148d4:	00800a84 	movi	r2,42
   148d8:	00003606 	br	149b4 <OSTaskQuery+0x118>
        }
    }
    if (p_task_data == (OS_TCB *)0) {            /* Validate 'p_task_data'                             */
   148dc:	e0bfff17 	ldw	r2,-4(fp)
   148e0:	1000021e 	bne	r2,zero,148ec <OSTaskQuery+0x50>
        return (OS_ERR_PDATA_NULL);
   148e4:	00800244 	movi	r2,9
   148e8:	00003206 	br	149b4 <OSTaskQuery+0x118>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   148ec:	0005303a 	rdctl	r2,status
   148f0:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   148f4:	e0fffa17 	ldw	r3,-24(fp)
   148f8:	00bfff84 	movi	r2,-2
   148fc:	1884703a 	and	r2,r3,r2
   14900:	1001703a 	wrctl	status,r2
  
  return context;
   14904:	e0bffa17 	ldw	r2,-24(fp)
    }
#endif
    OS_ENTER_CRITICAL();
   14908:	e0bff815 	stw	r2,-32(fp)
    if (prio == OS_PRIO_SELF) {                  /* See if suspend SELF                                */
   1490c:	e0bffe03 	ldbu	r2,-8(fp)
   14910:	10803fd8 	cmpnei	r2,r2,255
   14914:	1000051e 	bne	r2,zero,1492c <OSTaskQuery+0x90>
        prio = OSTCBCur->OSTCBPrio;
   14918:	008000b4 	movhi	r2,2
   1491c:	10b48e04 	addi	r2,r2,-11720
   14920:	10800017 	ldw	r2,0(r2)
   14924:	10800c83 	ldbu	r2,50(r2)
   14928:	e0bffe05 	stb	r2,-8(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
   1492c:	e0fffe03 	ldbu	r3,-8(fp)
   14930:	008000f4 	movhi	r2,3
   14934:	10a11f04 	addi	r2,r2,-31620
   14938:	18c7883a 	add	r3,r3,r3
   1493c:	18c7883a 	add	r3,r3,r3
   14940:	10c5883a 	add	r2,r2,r3
   14944:	10800017 	ldw	r2,0(r2)
   14948:	e0bff915 	stw	r2,-28(fp)
    if (ptcb == (OS_TCB *)0) {                   /* Task to query must exist                           */
   1494c:	e0bff917 	ldw	r2,-28(fp)
   14950:	1000061e 	bne	r2,zero,1496c <OSTaskQuery+0xd0>
   14954:	e0bff817 	ldw	r2,-32(fp)
   14958:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1495c:	e0bffb17 	ldw	r2,-20(fp)
   14960:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_PRIO);
   14964:	00800a44 	movi	r2,41
   14968:	00001206 	br	149b4 <OSTaskQuery+0x118>
    }
    if (ptcb == OS_TCB_RESERVED) {               /* Task to query must not be assigned to a Mutex      */
   1496c:	e0bff917 	ldw	r2,-28(fp)
   14970:	10800058 	cmpnei	r2,r2,1
   14974:	1000061e 	bne	r2,zero,14990 <OSTaskQuery+0xf4>
   14978:	e0bff817 	ldw	r2,-32(fp)
   1497c:	e0bffc15 	stw	r2,-16(fp)
   14980:	e0bffc17 	ldw	r2,-16(fp)
   14984:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
   14988:	008010c4 	movi	r2,67
   1498c:	00000906 	br	149b4 <OSTaskQuery+0x118>
    }
                                                 /* Copy TCB into user storage area                    */
    OS_MemCopy((INT8U *)p_task_data, (INT8U *)ptcb, sizeof(OS_TCB));
   14990:	e13fff17 	ldw	r4,-4(fp)
   14994:	e17ff917 	ldw	r5,-28(fp)
   14998:	01801b04 	movi	r6,108
   1499c:	000ebc00 	call	ebc0 <OS_MemCopy>
   149a0:	e0bff817 	ldw	r2,-32(fp)
   149a4:	e0bffd15 	stw	r2,-12(fp)
   149a8:	e0bffd17 	ldw	r2,-12(fp)
   149ac:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
   149b0:	0005883a 	mov	r2,zero
}
   149b4:	e037883a 	mov	sp,fp
   149b8:	dfc00117 	ldw	ra,4(sp)
   149bc:	df000017 	ldw	fp,0(sp)
   149c0:	dec00204 	addi	sp,sp,8
   149c4:	f800283a 	ret

000149c8 <OS_TaskStkClr>:
* Returns    : none
*********************************************************************************************************
*/
#if (OS_TASK_STAT_STK_CHK_EN > 0) && (OS_TASK_CREATE_EXT_EN > 0)
void  OS_TaskStkClr (OS_STK *pbos, INT32U size, INT16U opt)
{
   149c8:	defffc04 	addi	sp,sp,-16
   149cc:	df000315 	stw	fp,12(sp)
   149d0:	df000304 	addi	fp,sp,12
   149d4:	e13ffd15 	stw	r4,-12(fp)
   149d8:	e17ffe15 	stw	r5,-8(fp)
   149dc:	3005883a 	mov	r2,r6
   149e0:	e0bfff0d 	sth	r2,-4(fp)
    if ((opt & OS_TASK_OPT_STK_CHK) != 0x0000) {       /* See if stack checking has been enabled       */
   149e4:	e0bfff0b 	ldhu	r2,-4(fp)
   149e8:	1080004c 	andi	r2,r2,1
   149ec:	10000d26 	beq	r2,zero,14a24 <OS_TaskStkClr+0x5c>
        if ((opt & OS_TASK_OPT_STK_CLR) != 0x0000) {   /* See if stack needs to be cleared             */
   149f0:	e0bfff0b 	ldhu	r2,-4(fp)
   149f4:	1080008c 	andi	r2,r2,2
   149f8:	10000a26 	beq	r2,zero,14a24 <OS_TaskStkClr+0x5c>
#if OS_STK_GROWTH == 1
            while (size > 0) {                         /* Stack grows from HIGH to LOW memory          */
   149fc:	00000706 	br	14a1c <OS_TaskStkClr+0x54>
                size--;
   14a00:	e0bffe17 	ldw	r2,-8(fp)
   14a04:	10bfffc4 	addi	r2,r2,-1
   14a08:	e0bffe15 	stw	r2,-8(fp)
                *pbos++ = (OS_STK)0;                   /* Clear from bottom of stack and up!           */
   14a0c:	e0bffd17 	ldw	r2,-12(fp)
   14a10:	10c00104 	addi	r3,r2,4
   14a14:	e0fffd15 	stw	r3,-12(fp)
   14a18:	10000015 	stw	zero,0(r2)
void  OS_TaskStkClr (OS_STK *pbos, INT32U size, INT16U opt)
{
    if ((opt & OS_TASK_OPT_STK_CHK) != 0x0000) {       /* See if stack checking has been enabled       */
        if ((opt & OS_TASK_OPT_STK_CLR) != 0x0000) {   /* See if stack needs to be cleared             */
#if OS_STK_GROWTH == 1
            while (size > 0) {                         /* Stack grows from HIGH to LOW memory          */
   14a1c:	e0bffe17 	ldw	r2,-8(fp)
   14a20:	103ff71e 	bne	r2,zero,14a00 <__alt_mem_Flash_flash_data+0xf4014a00>
                *pbos-- = (OS_STK)0;                   /* Clear from bottom of stack and down          */
            }
#endif
        }
    }
}
   14a24:	e037883a 	mov	sp,fp
   14a28:	df000017 	ldw	fp,0(sp)
   14a2c:	dec00104 	addi	sp,sp,4
   14a30:	f800283a 	ret

00014a34 <OSTimeDly>:
* Returns    : none
*********************************************************************************************************
*/

void  OSTimeDly (INT16U ticks)
{
   14a34:	defff904 	addi	sp,sp,-28
   14a38:	dfc00615 	stw	ra,24(sp)
   14a3c:	df000515 	stw	fp,20(sp)
   14a40:	df000504 	addi	fp,sp,20
   14a44:	2005883a 	mov	r2,r4
   14a48:	e0bfff0d 	sth	r2,-4(fp)
    INT8U      y;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   14a4c:	e03ffb15 	stw	zero,-20(fp)
#endif



    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
   14a50:	008000b4 	movhi	r2,2
   14a54:	10b48d04 	addi	r2,r2,-11724
   14a58:	10800003 	ldbu	r2,0(r2)
   14a5c:	10803fcc 	andi	r2,r2,255
   14a60:	10000126 	beq	r2,zero,14a68 <OSTimeDly+0x34>
        return;
   14a64:	00004006 	br	14b68 <OSTimeDly+0x134>
    }
    if (ticks > 0) {                             /* 0 means no delay!                                  */
   14a68:	e0bfff0b 	ldhu	r2,-4(fp)
   14a6c:	10003e26 	beq	r2,zero,14b68 <OSTimeDly+0x134>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   14a70:	0005303a 	rdctl	r2,status
   14a74:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   14a78:	e0fffd17 	ldw	r3,-12(fp)
   14a7c:	00bfff84 	movi	r2,-2
   14a80:	1884703a 	and	r2,r3,r2
   14a84:	1001703a 	wrctl	status,r2
  
  return context;
   14a88:	e0bffd17 	ldw	r2,-12(fp)
        OS_ENTER_CRITICAL();
   14a8c:	e0bffb15 	stw	r2,-20(fp)
        y            =  OSTCBCur->OSTCBY;        /* Delay current task                                 */
   14a90:	008000b4 	movhi	r2,2
   14a94:	10b48e04 	addi	r2,r2,-11720
   14a98:	10800017 	ldw	r2,0(r2)
   14a9c:	10800d03 	ldbu	r2,52(r2)
   14aa0:	e0bffc05 	stb	r2,-16(fp)
        OSRdyTbl[y] &= ~OSTCBCur->OSTCBBitX;
   14aa4:	e0fffc03 	ldbu	r3,-16(fp)
   14aa8:	e13ffc03 	ldbu	r4,-16(fp)
   14aac:	008000b4 	movhi	r2,2
   14ab0:	10b48b44 	addi	r2,r2,-11731
   14ab4:	1105883a 	add	r2,r2,r4
   14ab8:	10800003 	ldbu	r2,0(r2)
   14abc:	1009883a 	mov	r4,r2
   14ac0:	008000b4 	movhi	r2,2
   14ac4:	10b48e04 	addi	r2,r2,-11720
   14ac8:	10800017 	ldw	r2,0(r2)
   14acc:	10800d43 	ldbu	r2,53(r2)
   14ad0:	0084303a 	nor	r2,zero,r2
   14ad4:	2084703a 	and	r2,r4,r2
   14ad8:	1009883a 	mov	r4,r2
   14adc:	008000b4 	movhi	r2,2
   14ae0:	10b48b44 	addi	r2,r2,-11731
   14ae4:	10c5883a 	add	r2,r2,r3
   14ae8:	11000005 	stb	r4,0(r2)
        if (OSRdyTbl[y] == 0) {
   14aec:	e0fffc03 	ldbu	r3,-16(fp)
   14af0:	008000b4 	movhi	r2,2
   14af4:	10b48b44 	addi	r2,r2,-11731
   14af8:	10c5883a 	add	r2,r2,r3
   14afc:	10800003 	ldbu	r2,0(r2)
   14b00:	10803fcc 	andi	r2,r2,255
   14b04:	10000e1e 	bne	r2,zero,14b40 <OSTimeDly+0x10c>
            OSRdyGrp &= ~OSTCBCur->OSTCBBitY;
   14b08:	008000b4 	movhi	r2,2
   14b0c:	10b48e04 	addi	r2,r2,-11720
   14b10:	10800017 	ldw	r2,0(r2)
   14b14:	10800d83 	ldbu	r2,54(r2)
   14b18:	0084303a 	nor	r2,zero,r2
   14b1c:	1007883a 	mov	r3,r2
   14b20:	008000b4 	movhi	r2,2
   14b24:	10b48b04 	addi	r2,r2,-11732
   14b28:	10800003 	ldbu	r2,0(r2)
   14b2c:	1884703a 	and	r2,r3,r2
   14b30:	1007883a 	mov	r3,r2
   14b34:	008000b4 	movhi	r2,2
   14b38:	10b48b04 	addi	r2,r2,-11732
   14b3c:	10c00005 	stb	r3,0(r2)
        }
        OSTCBCur->OSTCBDly = ticks;              /* Load ticks in TCB                                  */
   14b40:	008000b4 	movhi	r2,2
   14b44:	10b48e04 	addi	r2,r2,-11720
   14b48:	10800017 	ldw	r2,0(r2)
   14b4c:	e0ffff0b 	ldhu	r3,-4(fp)
   14b50:	10c00b8d 	sth	r3,46(r2)
   14b54:	e0bffb17 	ldw	r2,-20(fp)
   14b58:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   14b5c:	e0bffe17 	ldw	r2,-8(fp)
   14b60:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                              /* Find next task to run!                             */
   14b64:	000ec240 	call	ec24 <OS_Sched>
    }
}
   14b68:	e037883a 	mov	sp,fp
   14b6c:	dfc00117 	ldw	ra,4(sp)
   14b70:	df000017 	ldw	fp,0(sp)
   14b74:	dec00204 	addi	sp,sp,8
   14b78:	f800283a 	ret

00014b7c <OSTimeDlyHMSM>:
*********************************************************************************************************
*/

#if OS_TIME_DLY_HMSM_EN > 0
INT8U  OSTimeDlyHMSM (INT8U hours, INT8U minutes, INT8U seconds, INT16U ms)
{
   14b7c:	defff804 	addi	sp,sp,-32
   14b80:	dfc00715 	stw	ra,28(sp)
   14b84:	df000615 	stw	fp,24(sp)
   14b88:	df000604 	addi	fp,sp,24
   14b8c:	2015883a 	mov	r10,r4
   14b90:	2809883a 	mov	r4,r5
   14b94:	3007883a 	mov	r3,r6
   14b98:	3805883a 	mov	r2,r7
   14b9c:	e2bffc05 	stb	r10,-16(fp)
   14ba0:	e13ffd05 	stb	r4,-12(fp)
   14ba4:	e0fffe05 	stb	r3,-8(fp)
   14ba8:	e0bfff0d 	sth	r2,-4(fp)
    INT32U ticks;
    INT16U loops;


    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
   14bac:	008000b4 	movhi	r2,2
   14bb0:	10b48d04 	addi	r2,r2,-11724
   14bb4:	10800003 	ldbu	r2,0(r2)
   14bb8:	10803fcc 	andi	r2,r2,255
   14bbc:	10000226 	beq	r2,zero,14bc8 <OSTimeDlyHMSM+0x4c>
        return (OS_ERR_TIME_DLY_ISR);
   14bc0:	00801544 	movi	r2,85
   14bc4:	00004206 	br	14cd0 <OSTimeDlyHMSM+0x154>
    }
#if OS_ARG_CHK_EN > 0
    if (hours == 0) {
   14bc8:	e0bffc03 	ldbu	r2,-16(fp)
   14bcc:	1000081e 	bne	r2,zero,14bf0 <OSTimeDlyHMSM+0x74>
        if (minutes == 0) {
   14bd0:	e0bffd03 	ldbu	r2,-12(fp)
   14bd4:	1000061e 	bne	r2,zero,14bf0 <OSTimeDlyHMSM+0x74>
            if (seconds == 0) {
   14bd8:	e0bffe03 	ldbu	r2,-8(fp)
   14bdc:	1000041e 	bne	r2,zero,14bf0 <OSTimeDlyHMSM+0x74>
                if (ms == 0) {
   14be0:	e0bfff0b 	ldhu	r2,-4(fp)
   14be4:	1000021e 	bne	r2,zero,14bf0 <OSTimeDlyHMSM+0x74>
                    return (OS_ERR_TIME_ZERO_DLY);
   14be8:	00801504 	movi	r2,84
   14bec:	00003806 	br	14cd0 <OSTimeDlyHMSM+0x154>
                }
            }
        }
    }
    if (minutes > 59) {
   14bf0:	e0bffd03 	ldbu	r2,-12(fp)
   14bf4:	10800f30 	cmpltui	r2,r2,60
   14bf8:	1000021e 	bne	r2,zero,14c04 <OSTimeDlyHMSM+0x88>
        return (OS_ERR_TIME_INVALID_MINUTES);    /* Validate arguments to be within range              */
   14bfc:	00801444 	movi	r2,81
   14c00:	00003306 	br	14cd0 <OSTimeDlyHMSM+0x154>
    }
    if (seconds > 59) {
   14c04:	e0bffe03 	ldbu	r2,-8(fp)
   14c08:	10800f30 	cmpltui	r2,r2,60
   14c0c:	1000021e 	bne	r2,zero,14c18 <OSTimeDlyHMSM+0x9c>
        return (OS_ERR_TIME_INVALID_SECONDS);
   14c10:	00801484 	movi	r2,82
   14c14:	00002e06 	br	14cd0 <OSTimeDlyHMSM+0x154>
    }
    if (ms > 999) {
   14c18:	e0bfff0b 	ldhu	r2,-4(fp)
   14c1c:	1080fa30 	cmpltui	r2,r2,1000
   14c20:	1000021e 	bne	r2,zero,14c2c <OSTimeDlyHMSM+0xb0>
        return (OS_ERR_TIME_INVALID_MS);
   14c24:	008014c4 	movi	r2,83
   14c28:	00002906 	br	14cd0 <OSTimeDlyHMSM+0x154>
    }
#endif
                                                 /* Compute the total number of clock ticks required.. */
                                                 /* .. (rounded to the nearest tick)                   */
    ticks = ((INT32U)hours * 3600L + (INT32U)minutes * 60L + (INT32U)seconds) * OS_TICKS_PER_SEC
   14c2c:	e0bffc03 	ldbu	r2,-16(fp)
   14c30:	10c38424 	muli	r3,r2,3600
   14c34:	e0bffd03 	ldbu	r2,-12(fp)
   14c38:	10800f24 	muli	r2,r2,60
   14c3c:	1887883a 	add	r3,r3,r2
   14c40:	e0bffe03 	ldbu	r2,-8(fp)
   14c44:	1885883a 	add	r2,r3,r2
   14c48:	100890fa 	slli	r4,r2,3
          + OS_TICKS_PER_SEC * ((INT32U)ms + 500L / OS_TICKS_PER_SEC) / 1000L;
   14c4c:	e0bfff0b 	ldhu	r2,-4(fp)
   14c50:	10800f84 	addi	r2,r2,62
   14c54:	100690fa 	slli	r3,r2,3
   14c58:	008418b4 	movhi	r2,4194
   14c5c:	109374c4 	addi	r2,r2,19923
   14c60:	188a383a 	mulxuu	r5,r3,r2
   14c64:	1885383a 	mul	r2,r3,r2
   14c68:	1011883a 	mov	r8,r2
   14c6c:	2813883a 	mov	r9,r5
   14c70:	4804d1ba 	srli	r2,r9,6
        return (OS_ERR_TIME_INVALID_MS);
    }
#endif
                                                 /* Compute the total number of clock ticks required.. */
                                                 /* .. (rounded to the nearest tick)                   */
    ticks = ((INT32U)hours * 3600L + (INT32U)minutes * 60L + (INT32U)seconds) * OS_TICKS_PER_SEC
   14c74:	2085883a 	add	r2,r4,r2
   14c78:	e0bffb15 	stw	r2,-20(fp)
          + OS_TICKS_PER_SEC * ((INT32U)ms + 500L / OS_TICKS_PER_SEC) / 1000L;
    loops = (INT16U)(ticks >> 16);               /* Compute the integral number of 65536 tick delays   */
   14c7c:	e0bffb17 	ldw	r2,-20(fp)
   14c80:	1004d43a 	srli	r2,r2,16
   14c84:	e0bffa0d 	sth	r2,-24(fp)
    ticks = ticks & 0xFFFFL;                     /* Obtain  the fractional number of ticks             */
   14c88:	e0bffb17 	ldw	r2,-20(fp)
   14c8c:	10bfffcc 	andi	r2,r2,65535
   14c90:	e0bffb15 	stw	r2,-20(fp)
    OSTimeDly((INT16U)ticks);
   14c94:	e0bffb17 	ldw	r2,-20(fp)
   14c98:	10bfffcc 	andi	r2,r2,65535
   14c9c:	1009883a 	mov	r4,r2
   14ca0:	0014a340 	call	14a34 <OSTimeDly>
    while (loops > 0) {
   14ca4:	00000706 	br	14cc4 <OSTimeDlyHMSM+0x148>
        OSTimeDly((INT16U)32768u);
   14ca8:	01200014 	movui	r4,32768
   14cac:	0014a340 	call	14a34 <OSTimeDly>
        OSTimeDly((INT16U)32768u);
   14cb0:	01200014 	movui	r4,32768
   14cb4:	0014a340 	call	14a34 <OSTimeDly>
        loops--;
   14cb8:	e0bffa0b 	ldhu	r2,-24(fp)
   14cbc:	10bfffc4 	addi	r2,r2,-1
   14cc0:	e0bffa0d 	sth	r2,-24(fp)
    ticks = ((INT32U)hours * 3600L + (INT32U)minutes * 60L + (INT32U)seconds) * OS_TICKS_PER_SEC
          + OS_TICKS_PER_SEC * ((INT32U)ms + 500L / OS_TICKS_PER_SEC) / 1000L;
    loops = (INT16U)(ticks >> 16);               /* Compute the integral number of 65536 tick delays   */
    ticks = ticks & 0xFFFFL;                     /* Obtain  the fractional number of ticks             */
    OSTimeDly((INT16U)ticks);
    while (loops > 0) {
   14cc4:	e0bffa0b 	ldhu	r2,-24(fp)
   14cc8:	103ff71e 	bne	r2,zero,14ca8 <__alt_mem_Flash_flash_data+0xf4014ca8>
        OSTimeDly((INT16U)32768u);
        OSTimeDly((INT16U)32768u);
        loops--;
    }
    return (OS_ERR_NONE);
   14ccc:	0005883a 	mov	r2,zero
}
   14cd0:	e037883a 	mov	sp,fp
   14cd4:	dfc00117 	ldw	ra,4(sp)
   14cd8:	df000017 	ldw	fp,0(sp)
   14cdc:	dec00204 	addi	sp,sp,8
   14ce0:	f800283a 	ret

00014ce4 <OSTimeDlyResume>:
*********************************************************************************************************
*/

#if OS_TIME_DLY_RESUME_EN > 0
INT8U  OSTimeDlyResume (INT8U prio)
{
   14ce4:	defff504 	addi	sp,sp,-44
   14ce8:	dfc00a15 	stw	ra,40(sp)
   14cec:	df000915 	stw	fp,36(sp)
   14cf0:	df000904 	addi	fp,sp,36
   14cf4:	2005883a 	mov	r2,r4
   14cf8:	e0bfff05 	stb	r2,-4(fp)
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                                    /* Storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   14cfc:	e03ff715 	stw	zero,-36(fp)
#endif



    if (prio >= OS_LOWEST_PRIO) {
   14d00:	e0bfff03 	ldbu	r2,-4(fp)
   14d04:	10800530 	cmpltui	r2,r2,20
   14d08:	1000021e 	bne	r2,zero,14d14 <OSTimeDlyResume+0x30>
        return (OS_ERR_PRIO_INVALID);
   14d0c:	00800a84 	movi	r2,42
   14d10:	00006b06 	br	14ec0 <OSTimeDlyResume+0x1dc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   14d14:	0005303a 	rdctl	r2,status
   14d18:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   14d1c:	e0fff917 	ldw	r3,-28(fp)
   14d20:	00bfff84 	movi	r2,-2
   14d24:	1884703a 	and	r2,r3,r2
   14d28:	1001703a 	wrctl	status,r2
  
  return context;
   14d2c:	e0bff917 	ldw	r2,-28(fp)
    }
    OS_ENTER_CRITICAL();
   14d30:	e0bff715 	stw	r2,-36(fp)
    ptcb = OSTCBPrioTbl[prio];                                 /* Make sure that task exist            */
   14d34:	e0ffff03 	ldbu	r3,-4(fp)
   14d38:	008000f4 	movhi	r2,3
   14d3c:	10a11f04 	addi	r2,r2,-31620
   14d40:	18c7883a 	add	r3,r3,r3
   14d44:	18c7883a 	add	r3,r3,r3
   14d48:	10c5883a 	add	r2,r2,r3
   14d4c:	10800017 	ldw	r2,0(r2)
   14d50:	e0bff815 	stw	r2,-32(fp)
    if (ptcb == (OS_TCB *)0) {
   14d54:	e0bff817 	ldw	r2,-32(fp)
   14d58:	1000061e 	bne	r2,zero,14d74 <OSTimeDlyResume+0x90>
   14d5c:	e0bff717 	ldw	r2,-36(fp)
   14d60:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   14d64:	e0bffa17 	ldw	r2,-24(fp)
   14d68:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);                        /* The task does not exist              */
   14d6c:	008010c4 	movi	r2,67
   14d70:	00005306 	br	14ec0 <OSTimeDlyResume+0x1dc>
    }
    if (ptcb == OS_TCB_RESERVED) {
   14d74:	e0bff817 	ldw	r2,-32(fp)
   14d78:	10800058 	cmpnei	r2,r2,1
   14d7c:	1000061e 	bne	r2,zero,14d98 <OSTimeDlyResume+0xb4>
   14d80:	e0bff717 	ldw	r2,-36(fp)
   14d84:	e0bffb15 	stw	r2,-20(fp)
   14d88:	e0bffb17 	ldw	r2,-20(fp)
   14d8c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);                        /* The task does not exist              */
   14d90:	008010c4 	movi	r2,67
   14d94:	00004a06 	br	14ec0 <OSTimeDlyResume+0x1dc>
    }
    if (ptcb->OSTCBDly == 0) {                                 /* See if task is delayed               */
   14d98:	e0bff817 	ldw	r2,-32(fp)
   14d9c:	10800b8b 	ldhu	r2,46(r2)
   14da0:	10bfffcc 	andi	r2,r2,65535
   14da4:	1000061e 	bne	r2,zero,14dc0 <OSTimeDlyResume+0xdc>
   14da8:	e0bff717 	ldw	r2,-36(fp)
   14dac:	e0bffc15 	stw	r2,-16(fp)
   14db0:	e0bffc17 	ldw	r2,-16(fp)
   14db4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TIME_NOT_DLY);                          /* Indicate that task was not delayed   */
   14db8:	00801404 	movi	r2,80
   14dbc:	00004006 	br	14ec0 <OSTimeDlyResume+0x1dc>
    }

    ptcb->OSTCBDly = 0;                                        /* Clear the time delay                 */
   14dc0:	e0bff817 	ldw	r2,-32(fp)
   14dc4:	10000b8d 	sth	zero,46(r2)
    if ((ptcb->OSTCBStat & OS_STAT_PEND_ANY) != OS_STAT_RDY) {
   14dc8:	e0bff817 	ldw	r2,-32(fp)
   14dcc:	10800c03 	ldbu	r2,48(r2)
   14dd0:	10803fcc 	andi	r2,r2,255
   14dd4:	10800dcc 	andi	r2,r2,55
   14dd8:	10000b26 	beq	r2,zero,14e08 <OSTimeDlyResume+0x124>
        ptcb->OSTCBStat     &= ~OS_STAT_PEND_ANY;              /* Yes, Clear status flag               */
   14ddc:	e0bff817 	ldw	r2,-32(fp)
   14de0:	10c00c03 	ldbu	r3,48(r2)
   14de4:	00bff204 	movi	r2,-56
   14de8:	1884703a 	and	r2,r3,r2
   14dec:	1007883a 	mov	r3,r2
   14df0:	e0bff817 	ldw	r2,-32(fp)
   14df4:	10c00c05 	stb	r3,48(r2)
        ptcb->OSTCBStatPend  =  OS_STAT_PEND_TO;               /* Indicate PEND timeout                */
   14df8:	e0bff817 	ldw	r2,-32(fp)
   14dfc:	00c00044 	movi	r3,1
   14e00:	10c00c45 	stb	r3,49(r2)
   14e04:	00000206 	br	14e10 <OSTimeDlyResume+0x12c>
    } else {
        ptcb->OSTCBStatPend  =  OS_STAT_PEND_OK;
   14e08:	e0bff817 	ldw	r2,-32(fp)
   14e0c:	10000c45 	stb	zero,49(r2)
    }
    if ((ptcb->OSTCBStat & OS_STAT_SUSPEND) == OS_STAT_RDY) {  /* Is task suspended?                   */
   14e10:	e0bff817 	ldw	r2,-32(fp)
   14e14:	10800c03 	ldbu	r2,48(r2)
   14e18:	10803fcc 	andi	r2,r2,255
   14e1c:	1080020c 	andi	r2,r2,8
   14e20:	1000221e 	bne	r2,zero,14eac <OSTimeDlyResume+0x1c8>
        OSRdyGrp               |= ptcb->OSTCBBitY;             /* No,  Make ready                      */
   14e24:	e0bff817 	ldw	r2,-32(fp)
   14e28:	10c00d83 	ldbu	r3,54(r2)
   14e2c:	008000b4 	movhi	r2,2
   14e30:	10b48b04 	addi	r2,r2,-11732
   14e34:	10800003 	ldbu	r2,0(r2)
   14e38:	1884b03a 	or	r2,r3,r2
   14e3c:	1007883a 	mov	r3,r2
   14e40:	008000b4 	movhi	r2,2
   14e44:	10b48b04 	addi	r2,r2,-11732
   14e48:	10c00005 	stb	r3,0(r2)
        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
   14e4c:	e0bff817 	ldw	r2,-32(fp)
   14e50:	10800d03 	ldbu	r2,52(r2)
   14e54:	10c03fcc 	andi	r3,r2,255
   14e58:	e0bff817 	ldw	r2,-32(fp)
   14e5c:	10800d03 	ldbu	r2,52(r2)
   14e60:	11003fcc 	andi	r4,r2,255
   14e64:	008000b4 	movhi	r2,2
   14e68:	10b48b44 	addi	r2,r2,-11731
   14e6c:	1105883a 	add	r2,r2,r4
   14e70:	11000003 	ldbu	r4,0(r2)
   14e74:	e0bff817 	ldw	r2,-32(fp)
   14e78:	10800d43 	ldbu	r2,53(r2)
   14e7c:	2084b03a 	or	r2,r4,r2
   14e80:	1009883a 	mov	r4,r2
   14e84:	008000b4 	movhi	r2,2
   14e88:	10b48b44 	addi	r2,r2,-11731
   14e8c:	10c5883a 	add	r2,r2,r3
   14e90:	11000005 	stb	r4,0(r2)
   14e94:	e0bff717 	ldw	r2,-36(fp)
   14e98:	e0bffd15 	stw	r2,-12(fp)
   14e9c:	e0bffd17 	ldw	r2,-12(fp)
   14ea0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                                            /* See if this is new highest priority  */
   14ea4:	000ec240 	call	ec24 <OS_Sched>
   14ea8:	00000406 	br	14ebc <OSTimeDlyResume+0x1d8>
   14eac:	e0bff717 	ldw	r2,-36(fp)
   14eb0:	e0bffe15 	stw	r2,-8(fp)
   14eb4:	e0bffe17 	ldw	r2,-8(fp)
   14eb8:	1001703a 	wrctl	status,r2
    } else {
        OS_EXIT_CRITICAL();                                    /* Task may be suspended                */
    }
    return (OS_ERR_NONE);
   14ebc:	0005883a 	mov	r2,zero
}
   14ec0:	e037883a 	mov	sp,fp
   14ec4:	dfc00117 	ldw	ra,4(sp)
   14ec8:	df000017 	ldw	fp,0(sp)
   14ecc:	dec00204 	addi	sp,sp,8
   14ed0:	f800283a 	ret

00014ed4 <OSTimeGet>:
*********************************************************************************************************
*/

#if OS_TIME_GET_SET_EN > 0
INT32U  OSTimeGet (void)
{
   14ed4:	defffb04 	addi	sp,sp,-20
   14ed8:	df000415 	stw	fp,16(sp)
   14edc:	df000404 	addi	fp,sp,16
    INT32U     ticks;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   14ee0:	e03ffc15 	stw	zero,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   14ee4:	0005303a 	rdctl	r2,status
   14ee8:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   14eec:	e0fffe17 	ldw	r3,-8(fp)
   14ef0:	00bfff84 	movi	r2,-2
   14ef4:	1884703a 	and	r2,r3,r2
   14ef8:	1001703a 	wrctl	status,r2
  
  return context;
   14efc:	e0bffe17 	ldw	r2,-8(fp)
#endif



    OS_ENTER_CRITICAL();
   14f00:	e0bffc15 	stw	r2,-16(fp)
    ticks = OSTime;
   14f04:	008000b4 	movhi	r2,2
   14f08:	10b48f04 	addi	r2,r2,-11716
   14f0c:	10800017 	ldw	r2,0(r2)
   14f10:	e0bffd15 	stw	r2,-12(fp)
   14f14:	e0bffc17 	ldw	r2,-16(fp)
   14f18:	e0bfff15 	stw	r2,-4(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   14f1c:	e0bfff17 	ldw	r2,-4(fp)
   14f20:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (ticks);
   14f24:	e0bffd17 	ldw	r2,-12(fp)
}
   14f28:	e037883a 	mov	sp,fp
   14f2c:	df000017 	ldw	fp,0(sp)
   14f30:	dec00104 	addi	sp,sp,4
   14f34:	f800283a 	ret

00014f38 <OSTimeSet>:
*********************************************************************************************************
*/

#if OS_TIME_GET_SET_EN > 0
void  OSTimeSet (INT32U ticks)
{
   14f38:	defffb04 	addi	sp,sp,-20
   14f3c:	df000415 	stw	fp,16(sp)
   14f40:	df000404 	addi	fp,sp,16
   14f44:	e13fff15 	stw	r4,-4(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   14f48:	e03ffc15 	stw	zero,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   14f4c:	0005303a 	rdctl	r2,status
   14f50:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   14f54:	e0fffd17 	ldw	r3,-12(fp)
   14f58:	00bfff84 	movi	r2,-2
   14f5c:	1884703a 	and	r2,r3,r2
   14f60:	1001703a 	wrctl	status,r2
  
  return context;
   14f64:	e0bffd17 	ldw	r2,-12(fp)
#endif



    OS_ENTER_CRITICAL();
   14f68:	e0bffc15 	stw	r2,-16(fp)
    OSTime = ticks;
   14f6c:	008000b4 	movhi	r2,2
   14f70:	10b48f04 	addi	r2,r2,-11716
   14f74:	e0ffff17 	ldw	r3,-4(fp)
   14f78:	10c00015 	stw	r3,0(r2)
   14f7c:	e0bffc17 	ldw	r2,-16(fp)
   14f80:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   14f84:	e0bffe17 	ldw	r2,-8(fp)
   14f88:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
}
   14f8c:	e037883a 	mov	sp,fp
   14f90:	df000017 	ldw	fp,0(sp)
   14f94:	dec00104 	addi	sp,sp,4
   14f98:	f800283a 	ret

00014f9c <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
   14f9c:	defffd04 	addi	sp,sp,-12
   14fa0:	dfc00215 	stw	ra,8(sp)
   14fa4:	df000115 	stw	fp,4(sp)
   14fa8:	df000104 	addi	fp,sp,4
   14fac:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
   14fb0:	e13fff17 	ldw	r4,-4(fp)
   14fb4:	014000b4 	movhi	r5,2
   14fb8:	296c7b04 	addi	r5,r5,-19988
   14fbc:	00179700 	call	17970 <alt_dev_llist_insert>
}
   14fc0:	e037883a 	mov	sp,fp
   14fc4:	dfc00117 	ldw	ra,4(sp)
   14fc8:	df000017 	ldw	fp,0(sp)
   14fcc:	dec00204 	addi	sp,sp,8
   14fd0:	f800283a 	ret

00014fd4 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
   14fd4:	defffd04 	addi	sp,sp,-12
   14fd8:	dfc00215 	stw	ra,8(sp)
   14fdc:	df000115 	stw	fp,4(sp)
   14fe0:	df000104 	addi	fp,sp,4
   14fe4:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2, Nios2);
   14fe8:	00182840 	call	18284 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
   14fec:	00800044 	movi	r2,1
   14ff0:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
   14ff4:	e037883a 	mov	sp,fp
   14ff8:	dfc00117 	ldw	ra,4(sp)
   14ffc:	df000017 	ldw	fp,0(sp)
   15000:	dec00204 	addi	sp,sp,8
   15004:	f800283a 	ret

00015008 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
   15008:	defffd04 	addi	sp,sp,-12
   1500c:	dfc00215 	stw	ra,8(sp)
   15010:	df000115 	stw	fp,4(sp)
   15014:	df000104 	addi	fp,sp,4
    ALTERA_AVALON_TIMER_INIT ( INTERVAL_TIMER, Interval_Timer);
   15018:	01040034 	movhi	r4,4096
   1501c:	21080004 	addi	r4,r4,8192
   15020:	000b883a 	mov	r5,zero
   15024:	000d883a 	mov	r6,zero
   15028:	01c00204 	movi	r7,8
   1502c:	001617c0 	call	1617c <alt_avalon_timer_sc_init>
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, JTAG_UART);
   15030:	010000b4 	movhi	r4,2
   15034:	21278204 	addi	r4,r4,-25080
   15038:	000b883a 	mov	r5,zero
   1503c:	01800204 	movi	r6,8
   15040:	00155440 	call	15544 <altera_avalon_jtag_uart_init>
   15044:	010000b4 	movhi	r4,2
   15048:	21277804 	addi	r4,r4,-25120
   1504c:	0014f9c0 	call	14f9c <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID, SysID);
   15050:	0001883a 	nop
    ALTERA_UP_AVALON_AUDIO_AND_VIDEO_CONFIG_INIT ( AV_CONFIG, AV_Config);
   15054:	010000b4 	movhi	r4,2
   15058:	212b9304 	addi	r4,r4,-20916
   1505c:	0014f9c0 	call	14f9c <alt_dev_reg>
    ALTERA_UP_AVALON_AUDIO_INIT ( AUDIO_SUBSYSTEM_AUDIO, Audio_Subsystem_Audio);
   15060:	010000b4 	movhi	r4,2
   15064:	212b9f04 	addi	r4,r4,-20868
   15068:	0014f9c0 	call	14f9c <alt_dev_reg>
    ALTERA_UP_AVALON_CHARACTER_LCD_INIT ( CHAR_LCD_16X2, Char_LCD_16x2);
   1506c:	010000b4 	movhi	r4,2
   15070:	212bab04 	addi	r4,r4,-20820
   15074:	00162ac0 	call	162ac <alt_up_character_lcd_init>
   15078:	010000b4 	movhi	r4,2
   1507c:	212bab04 	addi	r4,r4,-20820
   15080:	0014f9c0 	call	14f9c <alt_dev_reg>
    ALTERA_UP_AVALON_IRDA_INIT ( IRDA, IrDA);
   15084:	010000b4 	movhi	r4,2
   15088:	212bb604 	addi	r4,r4,-20776
   1508c:	0014f9c0 	call	14f9c <alt_dev_reg>
    ALTERA_UP_AVALON_PARALLEL_PORT_INIT ( EXPANSION_JP5, Expansion_JP5);
   15090:	010000b4 	movhi	r4,2
   15094:	212bc104 	addi	r4,r4,-20732
   15098:	0014f9c0 	call	14f9c <alt_dev_reg>
    ALTERA_UP_AVALON_PARALLEL_PORT_INIT ( GREEN_LEDS, Green_LEDs);
   1509c:	010000b4 	movhi	r4,2
   150a0:	212bcc04 	addi	r4,r4,-20688
   150a4:	0014f9c0 	call	14f9c <alt_dev_reg>
    ALTERA_UP_AVALON_PARALLEL_PORT_INIT ( HEX3_HEX0, HEX3_HEX0);
   150a8:	010000b4 	movhi	r4,2
   150ac:	212bd704 	addi	r4,r4,-20644
   150b0:	0014f9c0 	call	14f9c <alt_dev_reg>
    ALTERA_UP_AVALON_PARALLEL_PORT_INIT ( HEX7_HEX4, HEX7_HEX4);
   150b4:	010000b4 	movhi	r4,2
   150b8:	212be204 	addi	r4,r4,-20600
   150bc:	0014f9c0 	call	14f9c <alt_dev_reg>
    ALTERA_UP_AVALON_PARALLEL_PORT_INIT ( PUSHBUTTONS, Pushbuttons);
   150c0:	010000b4 	movhi	r4,2
   150c4:	212bed04 	addi	r4,r4,-20556
   150c8:	0014f9c0 	call	14f9c <alt_dev_reg>
    ALTERA_UP_AVALON_PARALLEL_PORT_INIT ( RED_LEDS, Red_LEDs);
   150cc:	010000b4 	movhi	r4,2
   150d0:	212bf804 	addi	r4,r4,-20512
   150d4:	0014f9c0 	call	14f9c <alt_dev_reg>
    ALTERA_UP_AVALON_PARALLEL_PORT_INIT ( SLIDER_SWITCHES, Slider_Switches);
   150d8:	010000b4 	movhi	r4,2
   150dc:	212c0304 	addi	r4,r4,-20468
   150e0:	0014f9c0 	call	14f9c <alt_dev_reg>
    ALTERA_UP_AVALON_PS2_INIT ( PS2_PORT, PS2_Port);
   150e4:	010000b4 	movhi	r4,2
   150e8:	212c0e04 	addi	r4,r4,-20424
   150ec:	0016bc40 	call	16bc4 <alt_up_ps2_init>
   150f0:	010000b4 	movhi	r4,2
   150f4:	212c0e04 	addi	r4,r4,-20424
   150f8:	0014f9c0 	call	14f9c <alt_dev_reg>
    ALTERA_UP_AVALON_PS2_INIT ( PS2_PORT_DUAL, PS2_Port_Dual);
   150fc:	010000b4 	movhi	r4,2
   15100:	212c1c04 	addi	r4,r4,-20368
   15104:	0016bc40 	call	16bc4 <alt_up_ps2_init>
   15108:	010000b4 	movhi	r4,2
   1510c:	212c1c04 	addi	r4,r4,-20368
   15110:	0014f9c0 	call	14f9c <alt_dev_reg>
    ALTERA_UP_AVALON_RS232_INIT ( SERIAL_PORT, Serial_Port);
   15114:	010000b4 	movhi	r4,2
   15118:	212c2a04 	addi	r4,r4,-20312
   1511c:	0014f9c0 	call	14f9c <alt_dev_reg>
    ALTERA_UP_AVALON_USB_INIT ( USB, USB);
   15120:	010000b4 	movhi	r4,2
   15124:	212c3504 	addi	r4,r4,-20268
   15128:	0014f9c0 	call	14f9c <alt_dev_reg>
    ALTERA_UP_AVALON_VIDEO_CHARACTER_BUFFER_WITH_DMA_INIT ( VGA_SUBSYSTEM_VGA_CHAR_BUFFER, VGA_Subsystem_VGA_Char_Buffer);
   1512c:	008000b4 	movhi	r2,2
   15130:	10ac4204 	addi	r2,r2,-20216
   15134:	10800a17 	ldw	r2,40(r2)
   15138:	10800104 	addi	r2,r2,4
   1513c:	10800017 	ldw	r2,0(r2)
   15140:	10ffffcc 	andi	r3,r2,65535
   15144:	008000b4 	movhi	r2,2
   15148:	10ac4204 	addi	r2,r2,-20216
   1514c:	10c00c15 	stw	r3,48(r2)
   15150:	008000b4 	movhi	r2,2
   15154:	10ac4204 	addi	r2,r2,-20216
   15158:	10800a17 	ldw	r2,40(r2)
   1515c:	10800104 	addi	r2,r2,4
   15160:	10800017 	ldw	r2,0(r2)
   15164:	1006d43a 	srli	r3,r2,16
   15168:	008000b4 	movhi	r2,2
   1516c:	10ac4204 	addi	r2,r2,-20216
   15170:	10c00d15 	stw	r3,52(r2)
   15174:	008000b4 	movhi	r2,2
   15178:	10ac4204 	addi	r2,r2,-20216
   1517c:	10800c17 	ldw	r2,48(r2)
   15180:	10801068 	cmpgeui	r2,r2,65
   15184:	1000081e 	bne	r2,zero,151a8 <alt_sys_init+0x1a0>
   15188:	008000b4 	movhi	r2,2
   1518c:	10ac4204 	addi	r2,r2,-20216
   15190:	00c00fc4 	movi	r3,63
   15194:	10c00f15 	stw	r3,60(r2)
   15198:	008000b4 	movhi	r2,2
   1519c:	10ac4204 	addi	r2,r2,-20216
   151a0:	00c00184 	movi	r3,6
   151a4:	10c01015 	stw	r3,64(r2)
   151a8:	008000b4 	movhi	r2,2
   151ac:	10ac4204 	addi	r2,r2,-20216
   151b0:	10800d17 	ldw	r2,52(r2)
   151b4:	10800868 	cmpgeui	r2,r2,33
   151b8:	1000041e 	bne	r2,zero,151cc <alt_sys_init+0x1c4>
   151bc:	008000b4 	movhi	r2,2
   151c0:	10ac4204 	addi	r2,r2,-20216
   151c4:	00c007c4 	movi	r3,31
   151c8:	10c01115 	stw	r3,68(r2)
   151cc:	010000b4 	movhi	r4,2
   151d0:	212c4204 	addi	r4,r4,-20216
   151d4:	00174dc0 	call	174dc <alt_up_char_buffer_init>
   151d8:	010000b4 	movhi	r4,2
   151dc:	212c4204 	addi	r4,r4,-20216
   151e0:	0014f9c0 	call	14f9c <alt_dev_reg>
    ALTERA_UP_AVALON_VIDEO_PIXEL_BUFFER_DMA_INIT ( VGA_SUBSYSTEM_VGA_PIXEL_DMA, VGA_Subsystem_VGA_Pixel_DMA);
   151e4:	008000b4 	movhi	r2,2
   151e8:	10ac5404 	addi	r2,r2,-20144
   151ec:	10800a17 	ldw	r2,40(r2)
   151f0:	10800017 	ldw	r2,0(r2)
   151f4:	1007883a 	mov	r3,r2
   151f8:	008000b4 	movhi	r2,2
   151fc:	10ac5404 	addi	r2,r2,-20144
   15200:	10c00b15 	stw	r3,44(r2)
   15204:	008000b4 	movhi	r2,2
   15208:	10ac5404 	addi	r2,r2,-20144
   1520c:	10800a17 	ldw	r2,40(r2)
   15210:	10800104 	addi	r2,r2,4
   15214:	10800017 	ldw	r2,0(r2)
   15218:	1007883a 	mov	r3,r2
   1521c:	008000b4 	movhi	r2,2
   15220:	10ac5404 	addi	r2,r2,-20144
   15224:	10c00c15 	stw	r3,48(r2)
   15228:	008000b4 	movhi	r2,2
   1522c:	10ac5404 	addi	r2,r2,-20144
   15230:	10800a17 	ldw	r2,40(r2)
   15234:	10800204 	addi	r2,r2,8
   15238:	10800017 	ldw	r2,0(r2)
   1523c:	10ffffcc 	andi	r3,r2,65535
   15240:	008000b4 	movhi	r2,2
   15244:	10ac5404 	addi	r2,r2,-20144
   15248:	10c00f15 	stw	r3,60(r2)
   1524c:	008000b4 	movhi	r2,2
   15250:	10ac5404 	addi	r2,r2,-20144
   15254:	10800a17 	ldw	r2,40(r2)
   15258:	10800204 	addi	r2,r2,8
   1525c:	10800017 	ldw	r2,0(r2)
   15260:	1006d43a 	srli	r3,r2,16
   15264:	008000b4 	movhi	r2,2
   15268:	10ac5404 	addi	r2,r2,-20144
   1526c:	10c01015 	stw	r3,64(r2)
   15270:	008000b4 	movhi	r2,2
   15274:	10ac5404 	addi	r2,r2,-20144
   15278:	10800a17 	ldw	r2,40(r2)
   1527c:	10800304 	addi	r2,r2,12
   15280:	10800017 	ldw	r2,0(r2)
   15284:	1005d07a 	srai	r2,r2,1
   15288:	10c0004c 	andi	r3,r2,1
   1528c:	008000b4 	movhi	r2,2
   15290:	10ac5404 	addi	r2,r2,-20144
   15294:	10c00d15 	stw	r3,52(r2)
   15298:	008000b4 	movhi	r2,2
   1529c:	10ac5404 	addi	r2,r2,-20144
   152a0:	10800a17 	ldw	r2,40(r2)
   152a4:	10800304 	addi	r2,r2,12
   152a8:	10800017 	ldw	r2,0(r2)
   152ac:	1005d13a 	srai	r2,r2,4
   152b0:	10c003cc 	andi	r3,r2,15
   152b4:	008000b4 	movhi	r2,2
   152b8:	10ac5404 	addi	r2,r2,-20144
   152bc:	10c00e15 	stw	r3,56(r2)
   152c0:	008000b4 	movhi	r2,2
   152c4:	10ac5404 	addi	r2,r2,-20144
   152c8:	10800a17 	ldw	r2,40(r2)
   152cc:	10800304 	addi	r2,r2,12
   152d0:	10800017 	ldw	r2,0(r2)
   152d4:	1005d43a 	srai	r2,r2,16
   152d8:	e0bfff05 	stb	r2,-4(fp)
   152dc:	008000b4 	movhi	r2,2
   152e0:	10ac5404 	addi	r2,r2,-20144
   152e4:	10800a17 	ldw	r2,40(r2)
   152e8:	10800304 	addi	r2,r2,12
   152ec:	10800017 	ldw	r2,0(r2)
   152f0:	1004d63a 	srli	r2,r2,24
   152f4:	e0bfff45 	stb	r2,-3(fp)
   152f8:	008000b4 	movhi	r2,2
   152fc:	10ac5404 	addi	r2,r2,-20144
   15300:	10800e17 	ldw	r2,56(r2)
   15304:	10800058 	cmpnei	r2,r2,1
   15308:	1000041e 	bne	r2,zero,1531c <alt_sys_init+0x314>
   1530c:	008000b4 	movhi	r2,2
   15310:	10ac5404 	addi	r2,r2,-20144
   15314:	10001115 	stw	zero,68(r2)
   15318:	00000e06 	br	15354 <alt_sys_init+0x34c>
   1531c:	008000b4 	movhi	r2,2
   15320:	10ac5404 	addi	r2,r2,-20144
   15324:	10800e17 	ldw	r2,56(r2)
   15328:	10800098 	cmpnei	r2,r2,2
   1532c:	1000051e 	bne	r2,zero,15344 <alt_sys_init+0x33c>
   15330:	008000b4 	movhi	r2,2
   15334:	10ac5404 	addi	r2,r2,-20144
   15338:	00c00044 	movi	r3,1
   1533c:	10c01115 	stw	r3,68(r2)
   15340:	00000406 	br	15354 <alt_sys_init+0x34c>
   15344:	008000b4 	movhi	r2,2
   15348:	10ac5404 	addi	r2,r2,-20144
   1534c:	00c00084 	movi	r3,2
   15350:	10c01115 	stw	r3,68(r2)
   15354:	e0bfff03 	ldbu	r2,-4(fp)
   15358:	00c00804 	movi	r3,32
   1535c:	1885c83a 	sub	r2,r3,r2
   15360:	00ffffc4 	movi	r3,-1
   15364:	1886d83a 	srl	r3,r3,r2
   15368:	008000b4 	movhi	r2,2
   1536c:	10ac5404 	addi	r2,r2,-20144
   15370:	10c01215 	stw	r3,72(r2)
   15374:	e0ffff03 	ldbu	r3,-4(fp)
   15378:	008000b4 	movhi	r2,2
   1537c:	10ac5404 	addi	r2,r2,-20144
   15380:	10801117 	ldw	r2,68(r2)
   15384:	1887883a 	add	r3,r3,r2
   15388:	008000b4 	movhi	r2,2
   1538c:	10ac5404 	addi	r2,r2,-20144
   15390:	10c01315 	stw	r3,76(r2)
   15394:	e0bfff43 	ldbu	r2,-3(fp)
   15398:	00c00804 	movi	r3,32
   1539c:	1885c83a 	sub	r2,r3,r2
   153a0:	00ffffc4 	movi	r3,-1
   153a4:	1886d83a 	srl	r3,r3,r2
   153a8:	008000b4 	movhi	r2,2
   153ac:	10ac5404 	addi	r2,r2,-20144
   153b0:	10c01415 	stw	r3,80(r2)
   153b4:	010000b4 	movhi	r4,2
   153b8:	212c5404 	addi	r4,r4,-20144
   153bc:	0014f9c0 	call	14f9c <alt_dev_reg>
    ALTERA_UP_SD_CARD_AVALON_INTERFACE_INIT ( SD_CARD, SD_Card);
   153c0:	010000b4 	movhi	r4,2
   153c4:	212c6904 	addi	r4,r4,-20060
   153c8:	0014f9c0 	call	14f9c <alt_dev_reg>
}
   153cc:	e037883a 	mov	sp,fp
   153d0:	dfc00117 	ldw	ra,4(sp)
   153d4:	df000017 	ldw	fp,0(sp)
   153d8:	dec00204 	addi	sp,sp,8
   153dc:	f800283a 	ret

000153e0 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
   153e0:	defffa04 	addi	sp,sp,-24
   153e4:	dfc00515 	stw	ra,20(sp)
   153e8:	df000415 	stw	fp,16(sp)
   153ec:	df000404 	addi	fp,sp,16
   153f0:	e13ffd15 	stw	r4,-12(fp)
   153f4:	e17ffe15 	stw	r5,-8(fp)
   153f8:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   153fc:	e0bffd17 	ldw	r2,-12(fp)
   15400:	10800017 	ldw	r2,0(r2)
   15404:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
   15408:	e0bffc17 	ldw	r2,-16(fp)
   1540c:	10c00a04 	addi	r3,r2,40
   15410:	e0bffd17 	ldw	r2,-12(fp)
   15414:	10800217 	ldw	r2,8(r2)
   15418:	1809883a 	mov	r4,r3
   1541c:	e17ffe17 	ldw	r5,-8(fp)
   15420:	e1bfff17 	ldw	r6,-4(fp)
   15424:	100f883a 	mov	r7,r2
   15428:	0015b900 	call	15b90 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
   1542c:	e037883a 	mov	sp,fp
   15430:	dfc00117 	ldw	ra,4(sp)
   15434:	df000017 	ldw	fp,0(sp)
   15438:	dec00204 	addi	sp,sp,8
   1543c:	f800283a 	ret

00015440 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
   15440:	defffa04 	addi	sp,sp,-24
   15444:	dfc00515 	stw	ra,20(sp)
   15448:	df000415 	stw	fp,16(sp)
   1544c:	df000404 	addi	fp,sp,16
   15450:	e13ffd15 	stw	r4,-12(fp)
   15454:	e17ffe15 	stw	r5,-8(fp)
   15458:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   1545c:	e0bffd17 	ldw	r2,-12(fp)
   15460:	10800017 	ldw	r2,0(r2)
   15464:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
   15468:	e0bffc17 	ldw	r2,-16(fp)
   1546c:	10c00a04 	addi	r3,r2,40
   15470:	e0bffd17 	ldw	r2,-12(fp)
   15474:	10800217 	ldw	r2,8(r2)
   15478:	1809883a 	mov	r4,r3
   1547c:	e17ffe17 	ldw	r5,-8(fp)
   15480:	e1bfff17 	ldw	r6,-4(fp)
   15484:	100f883a 	mov	r7,r2
   15488:	0015e440 	call	15e44 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
   1548c:	e037883a 	mov	sp,fp
   15490:	dfc00117 	ldw	ra,4(sp)
   15494:	df000017 	ldw	fp,0(sp)
   15498:	dec00204 	addi	sp,sp,8
   1549c:	f800283a 	ret

000154a0 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
   154a0:	defffc04 	addi	sp,sp,-16
   154a4:	dfc00315 	stw	ra,12(sp)
   154a8:	df000215 	stw	fp,8(sp)
   154ac:	df000204 	addi	fp,sp,8
   154b0:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   154b4:	e0bfff17 	ldw	r2,-4(fp)
   154b8:	10800017 	ldw	r2,0(r2)
   154bc:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
   154c0:	e0bffe17 	ldw	r2,-8(fp)
   154c4:	10c00a04 	addi	r3,r2,40
   154c8:	e0bfff17 	ldw	r2,-4(fp)
   154cc:	10800217 	ldw	r2,8(r2)
   154d0:	1809883a 	mov	r4,r3
   154d4:	100b883a 	mov	r5,r2
   154d8:	0015a3c0 	call	15a3c <altera_avalon_jtag_uart_close>
}
   154dc:	e037883a 	mov	sp,fp
   154e0:	dfc00117 	ldw	ra,4(sp)
   154e4:	df000017 	ldw	fp,0(sp)
   154e8:	dec00204 	addi	sp,sp,8
   154ec:	f800283a 	ret

000154f0 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
   154f0:	defffa04 	addi	sp,sp,-24
   154f4:	dfc00515 	stw	ra,20(sp)
   154f8:	df000415 	stw	fp,16(sp)
   154fc:	df000404 	addi	fp,sp,16
   15500:	e13ffd15 	stw	r4,-12(fp)
   15504:	e17ffe15 	stw	r5,-8(fp)
   15508:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
   1550c:	e0bffd17 	ldw	r2,-12(fp)
   15510:	10800017 	ldw	r2,0(r2)
   15514:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
   15518:	e0bffc17 	ldw	r2,-16(fp)
   1551c:	10800a04 	addi	r2,r2,40
   15520:	1009883a 	mov	r4,r2
   15524:	e17ffe17 	ldw	r5,-8(fp)
   15528:	e1bfff17 	ldw	r6,-4(fp)
   1552c:	0015aa40 	call	15aa4 <altera_avalon_jtag_uart_ioctl>
}
   15530:	e037883a 	mov	sp,fp
   15534:	dfc00117 	ldw	ra,4(sp)
   15538:	df000017 	ldw	fp,0(sp)
   1553c:	dec00204 	addi	sp,sp,8
   15540:	f800283a 	ret

00015544 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
   15544:	defff104 	addi	sp,sp,-60
   15548:	dfc00e15 	stw	ra,56(sp)
   1554c:	df000d15 	stw	fp,52(sp)
   15550:	df000d04 	addi	fp,sp,52
   15554:	e13ff915 	stw	r4,-28(fp)
   15558:	e17ffa15 	stw	r5,-24(fp)
   1555c:	e1bffb15 	stw	r6,-20(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
   15560:	e0bff917 	ldw	r2,-28(fp)
   15564:	10800c04 	addi	r2,r2,48
   15568:	e0bff315 	stw	r2,-52(fp)
   1556c:	e03ff40d 	sth	zero,-48(fp)

static ALT_INLINE int ALT_ALWAYS_INLINE alt_flag_create (OS_FLAG_GRP** pgroup, 
               OS_FLAGS flags)
{
  INT8U err;
  *pgroup = OSFlagCreate (flags, &err);
   15570:	e0fff40b 	ldhu	r3,-48(fp)
   15574:	e0bff884 	addi	r2,fp,-30
   15578:	1809883a 	mov	r4,r3
   1557c:	100b883a 	mov	r5,r2
   15580:	000f7900 	call	f790 <OSFlagCreate>
   15584:	1007883a 	mov	r3,r2
   15588:	e0bff317 	ldw	r2,-52(fp)
   1558c:	10c00015 	stw	r3,0(r2)
  ALT_SEM_CREATE(&sp->read_lock, 1);
   15590:	e0bff917 	ldw	r2,-28(fp)
   15594:	10800a04 	addi	r2,r2,40
   15598:	e0bff515 	stw	r2,-44(fp)
   1559c:	00800044 	movi	r2,1
   155a0:	e0bff60d 	sth	r2,-40(fp)
   155a4:	e0bff60b 	ldhu	r2,-40(fp)
   155a8:	1009883a 	mov	r4,r2
   155ac:	00126e80 	call	126e8 <OSSemCreate>
   155b0:	1007883a 	mov	r3,r2
   155b4:	e0bff517 	ldw	r2,-44(fp)
   155b8:	10c00015 	stw	r3,0(r2)
  ALT_SEM_CREATE(&sp->write_lock, 1);
   155bc:	e0bff917 	ldw	r2,-28(fp)
   155c0:	10800b04 	addi	r2,r2,44
   155c4:	e0bff715 	stw	r2,-36(fp)
   155c8:	00800044 	movi	r2,1
   155cc:	e0bff80d 	sth	r2,-32(fp)
   155d0:	e0bff80b 	ldhu	r2,-32(fp)
   155d4:	1009883a 	mov	r4,r2
   155d8:	00126e80 	call	126e8 <OSSemCreate>
   155dc:	1007883a 	mov	r3,r2
   155e0:	e0bff717 	ldw	r2,-36(fp)
   155e4:	10c00015 	stw	r3,0(r2)

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   155e8:	e0bff917 	ldw	r2,-28(fp)
   155ec:	00c00044 	movi	r3,1
   155f0:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
   155f4:	e0bff917 	ldw	r2,-28(fp)
   155f8:	10800017 	ldw	r2,0(r2)
   155fc:	10800104 	addi	r2,r2,4
   15600:	1007883a 	mov	r3,r2
   15604:	e0bff917 	ldw	r2,-28(fp)
   15608:	10800817 	ldw	r2,32(r2)
   1560c:	18800035 	stwio	r2,0(r3)
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
                      sp, NULL);
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
   15610:	e0bffb17 	ldw	r2,-20(fp)
   15614:	1009883a 	mov	r4,r2
   15618:	e17ff917 	ldw	r5,-28(fp)
   1561c:	01800074 	movhi	r6,1
   15620:	3195a104 	addi	r6,r6,22148
   15624:	0017cc40 	call	17cc4 <alt_irq_register>
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
   15628:	e0bff917 	ldw	r2,-28(fp)
   1562c:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
   15630:	e0bff917 	ldw	r2,-28(fp)
   15634:	10c00204 	addi	r3,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
   15638:	008000b4 	movhi	r2,2
   1563c:	10b49404 	addi	r2,r2,-11696
   15640:	10800017 	ldw	r2,0(r2)
   15644:	1809883a 	mov	r4,r3
   15648:	100b883a 	mov	r5,r2
   1564c:	01800074 	movhi	r6,1
   15650:	31964b04 	addi	r6,r6,22828
   15654:	e1fff917 	ldw	r7,-28(fp)
   15658:	00177c40 	call	177c4 <alt_alarm_start>
   1565c:	1000040e 	bge	r2,zero,15670 <altera_avalon_jtag_uart_init+0x12c>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
   15660:	e0fff917 	ldw	r3,-28(fp)
   15664:	00a00034 	movhi	r2,32768
   15668:	10bfffc4 	addi	r2,r2,-1
   1566c:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
   15670:	e037883a 	mov	sp,fp
   15674:	dfc00117 	ldw	ra,4(sp)
   15678:	df000017 	ldw	fp,0(sp)
   1567c:	dec00204 	addi	sp,sp,8
   15680:	f800283a 	ret

00015684 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
   15684:	defff104 	addi	sp,sp,-60
   15688:	dfc00e15 	stw	ra,56(sp)
   1568c:	df000d15 	stw	fp,52(sp)
   15690:	df000d04 	addi	fp,sp,52
   15694:	e13ffe15 	stw	r4,-8(fp)
   15698:	e17fff15 	stw	r5,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
   1569c:	e0bffe17 	ldw	r2,-8(fp)
   156a0:	e0bff515 	stw	r2,-44(fp)
  unsigned int base = sp->base;
   156a4:	e0bff517 	ldw	r2,-44(fp)
   156a8:	10800017 	ldw	r2,0(r2)
   156ac:	e0bff615 	stw	r2,-40(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   156b0:	e0bff617 	ldw	r2,-40(fp)
   156b4:	10800104 	addi	r2,r2,4
   156b8:	10800037 	ldwio	r2,0(r2)
   156bc:	e0bff715 	stw	r2,-36(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
   156c0:	e0bff717 	ldw	r2,-36(fp)
   156c4:	1080c00c 	andi	r2,r2,768
   156c8:	1000011e 	bne	r2,zero,156d0 <altera_avalon_jtag_uart_irq+0x4c>
      break;
   156cc:	00009206 	br	15918 <altera_avalon_jtag_uart_irq+0x294>

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
   156d0:	e0bff717 	ldw	r2,-36(fp)
   156d4:	1080400c 	andi	r2,r2,256
   156d8:	10004726 	beq	r2,zero,157f8 <altera_avalon_jtag_uart_irq+0x174>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
   156dc:	00800074 	movhi	r2,1
   156e0:	e0bff315 	stw	r2,-52(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   156e4:	e0bff517 	ldw	r2,-44(fp)
   156e8:	10800d17 	ldw	r2,52(r2)
   156ec:	10800044 	addi	r2,r2,1
   156f0:	1081ffcc 	andi	r2,r2,2047
   156f4:	e0bff815 	stw	r2,-32(fp)
        if (next == sp->rx_out)
   156f8:	e0bff517 	ldw	r2,-44(fp)
   156fc:	10c00e17 	ldw	r3,56(r2)
   15700:	e0bff817 	ldw	r2,-32(fp)
   15704:	1880011e 	bne	r3,r2,1570c <altera_avalon_jtag_uart_irq+0x88>
          break;
   15708:	00002906 	br	157b0 <altera_avalon_jtag_uart_irq+0x12c>

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
   1570c:	e0bff617 	ldw	r2,-40(fp)
   15710:	10800037 	ldwio	r2,0(r2)
   15714:	e0bff315 	stw	r2,-52(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
   15718:	e0bff317 	ldw	r2,-52(fp)
   1571c:	10a0000c 	andi	r2,r2,32768
   15720:	1000011e 	bne	r2,zero,15728 <altera_avalon_jtag_uart_irq+0xa4>
          break;
   15724:	00002206 	br	157b0 <altera_avalon_jtag_uart_irq+0x12c>

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
   15728:	e0bff517 	ldw	r2,-44(fp)
   1572c:	10800d17 	ldw	r2,52(r2)
   15730:	e0fff317 	ldw	r3,-52(fp)
   15734:	1809883a 	mov	r4,r3
   15738:	e0fff517 	ldw	r3,-44(fp)
   1573c:	1885883a 	add	r2,r3,r2
   15740:	10801104 	addi	r2,r2,68
   15744:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   15748:	e0bff517 	ldw	r2,-44(fp)
   1574c:	10800d17 	ldw	r2,52(r2)
   15750:	10800044 	addi	r2,r2,1
   15754:	10c1ffcc 	andi	r3,r2,2047
   15758:	e0bff517 	ldw	r2,-44(fp)
   1575c:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
   15760:	e0bff517 	ldw	r2,-44(fp)
   15764:	10800c17 	ldw	r2,48(r2)
   15768:	e0bff915 	stw	r2,-28(fp)
   1576c:	00800044 	movi	r2,1
   15770:	e0bffa0d 	sth	r2,-24(fp)
   15774:	00800044 	movi	r2,1
   15778:	e0bffa85 	stb	r2,-22(fp)
                   OS_FLAGS     flags, 
                   INT8U        opt)
{
  INT8U err;

  if (OSRunning)
   1577c:	008000b4 	movhi	r2,2
   15780:	10b47f44 	addi	r2,r2,-11779
   15784:	10800003 	ldbu	r2,0(r2)
   15788:	10803fcc 	andi	r2,r2,255
   1578c:	103fd526 	beq	r2,zero,156e4 <__alt_mem_Flash_flash_data+0xf40156e4>
  {
    OSFlagPost (group, flags, opt, &err);
   15790:	e17ffa0b 	ldhu	r5,-24(fp)
   15794:	e0fffa83 	ldbu	r3,-22(fp)
   15798:	e0bffcc4 	addi	r2,fp,-13
   1579c:	e13ff917 	ldw	r4,-28(fp)
   157a0:	180d883a 	mov	r6,r3
   157a4:	100f883a 	mov	r7,r2
   157a8:	00104000 	call	10400 <OSFlagPost>
      }
   157ac:	003fcd06 	br	156e4 <__alt_mem_Flash_flash_data+0xf40156e4>

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
   157b0:	e0bff317 	ldw	r2,-52(fp)
   157b4:	10bfffec 	andhi	r2,r2,65535
   157b8:	10000f26 	beq	r2,zero,157f8 <altera_avalon_jtag_uart_irq+0x174>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   157bc:	e0bff517 	ldw	r2,-44(fp)
   157c0:	10c00817 	ldw	r3,32(r2)
   157c4:	00bfff84 	movi	r2,-2
   157c8:	1886703a 	and	r3,r3,r2
   157cc:	e0bff517 	ldw	r2,-44(fp)
   157d0:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
   157d4:	e0bff617 	ldw	r2,-40(fp)
   157d8:	10800104 	addi	r2,r2,4
   157dc:	1007883a 	mov	r3,r2
   157e0:	e0bff517 	ldw	r2,-44(fp)
   157e4:	10800817 	ldw	r2,32(r2)
   157e8:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   157ec:	e0bff617 	ldw	r2,-40(fp)
   157f0:	10800104 	addi	r2,r2,4
   157f4:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
   157f8:	e0bff717 	ldw	r2,-36(fp)
   157fc:	1080800c 	andi	r2,r2,512
   15800:	10004426 	beq	r2,zero,15914 <altera_avalon_jtag_uart_irq+0x290>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
   15804:	e0bff717 	ldw	r2,-36(fp)
   15808:	1004d43a 	srli	r2,r2,16
   1580c:	e0bff415 	stw	r2,-48(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
   15810:	00002706 	br	158b0 <altera_avalon_jtag_uart_irq+0x22c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
   15814:	e0bff617 	ldw	r2,-40(fp)
   15818:	e0fff517 	ldw	r3,-44(fp)
   1581c:	18c01017 	ldw	r3,64(r3)
   15820:	e13ff517 	ldw	r4,-44(fp)
   15824:	20c7883a 	add	r3,r4,r3
   15828:	18c21104 	addi	r3,r3,2116
   1582c:	18c00003 	ldbu	r3,0(r3)
   15830:	18c03fcc 	andi	r3,r3,255
   15834:	18c0201c 	xori	r3,r3,128
   15838:	18ffe004 	addi	r3,r3,-128
   1583c:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   15840:	e0bff517 	ldw	r2,-44(fp)
   15844:	10801017 	ldw	r2,64(r2)
   15848:	10800044 	addi	r2,r2,1
   1584c:	10c1ffcc 	andi	r3,r2,2047
   15850:	e0bff517 	ldw	r2,-44(fp)
   15854:	10c01015 	stw	r3,64(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);
   15858:	e0bff517 	ldw	r2,-44(fp)
   1585c:	10800c17 	ldw	r2,48(r2)
   15860:	e0bffb15 	stw	r2,-20(fp)
   15864:	00800084 	movi	r2,2
   15868:	e0bffc0d 	sth	r2,-16(fp)
   1586c:	00800044 	movi	r2,1
   15870:	e0bffc85 	stb	r2,-14(fp)
                   OS_FLAGS     flags, 
                   INT8U        opt)
{
  INT8U err;

  if (OSRunning)
   15874:	008000b4 	movhi	r2,2
   15878:	10b47f44 	addi	r2,r2,-11779
   1587c:	10800003 	ldbu	r2,0(r2)
   15880:	10803fcc 	andi	r2,r2,255
   15884:	10000726 	beq	r2,zero,158a4 <altera_avalon_jtag_uart_irq+0x220>
  {
    OSFlagPost (group, flags, opt, &err);
   15888:	e17ffc0b 	ldhu	r5,-16(fp)
   1588c:	e0fffc83 	ldbu	r3,-14(fp)
   15890:	e0bffd04 	addi	r2,fp,-12
   15894:	e13ffb17 	ldw	r4,-20(fp)
   15898:	180d883a 	mov	r6,r3
   1589c:	100f883a 	mov	r7,r2
   158a0:	00104000 	call	10400 <OSFlagPost>

        space--;
   158a4:	e0bff417 	ldw	r2,-48(fp)
   158a8:	10bfffc4 	addi	r2,r2,-1
   158ac:	e0bff415 	stw	r2,-48(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
   158b0:	e0bff417 	ldw	r2,-48(fp)
   158b4:	10000526 	beq	r2,zero,158cc <altera_avalon_jtag_uart_irq+0x248>
   158b8:	e0bff517 	ldw	r2,-44(fp)
   158bc:	10c01017 	ldw	r3,64(r2)
   158c0:	e0bff517 	ldw	r2,-44(fp)
   158c4:	10800f17 	ldw	r2,60(r2)
   158c8:	18bfd21e 	bne	r3,r2,15814 <__alt_mem_Flash_flash_data+0xf4015814>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
   158cc:	e0bff417 	ldw	r2,-48(fp)
   158d0:	10001026 	beq	r2,zero,15914 <altera_avalon_jtag_uart_irq+0x290>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   158d4:	e0bff517 	ldw	r2,-44(fp)
   158d8:	10c00817 	ldw	r3,32(r2)
   158dc:	00bfff44 	movi	r2,-3
   158e0:	1886703a 	and	r3,r3,r2
   158e4:	e0bff517 	ldw	r2,-44(fp)
   158e8:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   158ec:	e0bff517 	ldw	r2,-44(fp)
   158f0:	10800017 	ldw	r2,0(r2)
   158f4:	10800104 	addi	r2,r2,4
   158f8:	1007883a 	mov	r3,r2
   158fc:	e0bff517 	ldw	r2,-44(fp)
   15900:	10800817 	ldw	r2,32(r2)
   15904:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   15908:	e0bff617 	ldw	r2,-40(fp)
   1590c:	10800104 	addi	r2,r2,4
   15910:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
   15914:	003f6606 	br	156b0 <__alt_mem_Flash_flash_data+0xf40156b0>
}
   15918:	e037883a 	mov	sp,fp
   1591c:	dfc00117 	ldw	ra,4(sp)
   15920:	df000017 	ldw	fp,0(sp)
   15924:	dec00204 	addi	sp,sp,8
   15928:	f800283a 	ret

0001592c <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
   1592c:	defff904 	addi	sp,sp,-28
   15930:	dfc00615 	stw	ra,24(sp)
   15934:	df000515 	stw	fp,20(sp)
   15938:	df000504 	addi	fp,sp,20
   1593c:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
   15940:	e0bfff17 	ldw	r2,-4(fp)
   15944:	e0bffb15 	stw	r2,-20(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
   15948:	e0bffb17 	ldw	r2,-20(fp)
   1594c:	10800017 	ldw	r2,0(r2)
   15950:	10800104 	addi	r2,r2,4
   15954:	10800037 	ldwio	r2,0(r2)
   15958:	e0bffc15 	stw	r2,-16(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
   1595c:	e0bffc17 	ldw	r2,-16(fp)
   15960:	1081000c 	andi	r2,r2,1024
   15964:	10000b26 	beq	r2,zero,15994 <altera_avalon_jtag_uart_timeout+0x68>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
   15968:	e0bffb17 	ldw	r2,-20(fp)
   1596c:	10800017 	ldw	r2,0(r2)
   15970:	10800104 	addi	r2,r2,4
   15974:	1007883a 	mov	r3,r2
   15978:	e0bffb17 	ldw	r2,-20(fp)
   1597c:	10800817 	ldw	r2,32(r2)
   15980:	10810014 	ori	r2,r2,1024
   15984:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
   15988:	e0bffb17 	ldw	r2,-20(fp)
   1598c:	10000915 	stw	zero,36(r2)
   15990:	00002206 	br	15a1c <altera_avalon_jtag_uart_timeout+0xf0>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
   15994:	e0bffb17 	ldw	r2,-20(fp)
   15998:	10c00917 	ldw	r3,36(r2)
   1599c:	00a00034 	movhi	r2,32768
   159a0:	10bfff04 	addi	r2,r2,-4
   159a4:	10c01d36 	bltu	r2,r3,15a1c <altera_avalon_jtag_uart_timeout+0xf0>
    sp->host_inactive++;
   159a8:	e0bffb17 	ldw	r2,-20(fp)
   159ac:	10800917 	ldw	r2,36(r2)
   159b0:	10c00044 	addi	r3,r2,1
   159b4:	e0bffb17 	ldw	r2,-20(fp)
   159b8:	10c00915 	stw	r3,36(r2)
    
    if (sp->host_inactive >= sp->timeout) {
   159bc:	e0bffb17 	ldw	r2,-20(fp)
   159c0:	10c00917 	ldw	r3,36(r2)
   159c4:	e0bffb17 	ldw	r2,-20(fp)
   159c8:	10800117 	ldw	r2,4(r2)
   159cc:	18801336 	bltu	r3,r2,15a1c <altera_avalon_jtag_uart_timeout+0xf0>
      /* Post an event to indicate host is inactive (for jtag_uart_read */
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
   159d0:	e0bffb17 	ldw	r2,-20(fp)
   159d4:	10800c17 	ldw	r2,48(r2)
   159d8:	e0bffd15 	stw	r2,-12(fp)
   159dc:	00800104 	movi	r2,4
   159e0:	e0bffe0d 	sth	r2,-8(fp)
   159e4:	00800044 	movi	r2,1
   159e8:	e0bffe85 	stb	r2,-6(fp)
                   OS_FLAGS     flags, 
                   INT8U        opt)
{
  INT8U err;

  if (OSRunning)
   159ec:	008000b4 	movhi	r2,2
   159f0:	10b47f44 	addi	r2,r2,-11779
   159f4:	10800003 	ldbu	r2,0(r2)
   159f8:	10803fcc 	andi	r2,r2,255
   159fc:	10000726 	beq	r2,zero,15a1c <altera_avalon_jtag_uart_timeout+0xf0>
  {
    OSFlagPost (group, flags, opt, &err);
   15a00:	e17ffe0b 	ldhu	r5,-8(fp)
   15a04:	e0fffe83 	ldbu	r3,-6(fp)
   15a08:	e0bffec4 	addi	r2,fp,-5
   15a0c:	e13ffd17 	ldw	r4,-12(fp)
   15a10:	180d883a 	mov	r6,r3
   15a14:	100f883a 	mov	r7,r2
   15a18:	00104000 	call	10400 <OSFlagPost>
   15a1c:	008000b4 	movhi	r2,2
   15a20:	10b49404 	addi	r2,r2,-11696
   15a24:	10800017 	ldw	r2,0(r2)
    }
  }

  return alt_ticks_per_second();
}
   15a28:	e037883a 	mov	sp,fp
   15a2c:	dfc00117 	ldw	ra,4(sp)
   15a30:	df000017 	ldw	fp,0(sp)
   15a34:	dec00204 	addi	sp,sp,8
   15a38:	f800283a 	ret

00015a3c <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
   15a3c:	defffd04 	addi	sp,sp,-12
   15a40:	df000215 	stw	fp,8(sp)
   15a44:	df000204 	addi	fp,sp,8
   15a48:	e13ffe15 	stw	r4,-8(fp)
   15a4c:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   15a50:	00000506 	br	15a68 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
   15a54:	e0bfff17 	ldw	r2,-4(fp)
   15a58:	1090000c 	andi	r2,r2,16384
   15a5c:	10000226 	beq	r2,zero,15a68 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
   15a60:	00bffd44 	movi	r2,-11
   15a64:	00000b06 	br	15a94 <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   15a68:	e0bffe17 	ldw	r2,-8(fp)
   15a6c:	10c01017 	ldw	r3,64(r2)
   15a70:	e0bffe17 	ldw	r2,-8(fp)
   15a74:	10800f17 	ldw	r2,60(r2)
   15a78:	18800526 	beq	r3,r2,15a90 <altera_avalon_jtag_uart_close+0x54>
   15a7c:	e0bffe17 	ldw	r2,-8(fp)
   15a80:	10c00917 	ldw	r3,36(r2)
   15a84:	e0bffe17 	ldw	r2,-8(fp)
   15a88:	10800117 	ldw	r2,4(r2)
   15a8c:	18bff136 	bltu	r3,r2,15a54 <__alt_mem_Flash_flash_data+0xf4015a54>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
   15a90:	0005883a 	mov	r2,zero
}
   15a94:	e037883a 	mov	sp,fp
   15a98:	df000017 	ldw	fp,0(sp)
   15a9c:	dec00104 	addi	sp,sp,4
   15aa0:	f800283a 	ret

00015aa4 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
   15aa4:	defffa04 	addi	sp,sp,-24
   15aa8:	df000515 	stw	fp,20(sp)
   15aac:	df000504 	addi	fp,sp,20
   15ab0:	e13ffd15 	stw	r4,-12(fp)
   15ab4:	e17ffe15 	stw	r5,-8(fp)
   15ab8:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
   15abc:	00bff9c4 	movi	r2,-25
   15ac0:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
   15ac4:	e0bffe17 	ldw	r2,-8(fp)
   15ac8:	10da8060 	cmpeqi	r3,r2,27137
   15acc:	1800031e 	bne	r3,zero,15adc <altera_avalon_jtag_uart_ioctl+0x38>
   15ad0:	109a80a0 	cmpeqi	r2,r2,27138
   15ad4:	1000191e 	bne	r2,zero,15b3c <altera_avalon_jtag_uart_ioctl+0x98>
      rc = 0;
    }
    break;

  default:
    break;
   15ad8:	00002806 	br	15b7c <altera_avalon_jtag_uart_ioctl+0xd8>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
   15adc:	e0bffd17 	ldw	r2,-12(fp)
   15ae0:	10c00117 	ldw	r3,4(r2)
   15ae4:	00a00034 	movhi	r2,32768
   15ae8:	10bfffc4 	addi	r2,r2,-1
   15aec:	18801226 	beq	r3,r2,15b38 <altera_avalon_jtag_uart_ioctl+0x94>
    {
      int timeout = *((int *)arg);
   15af0:	e0bfff17 	ldw	r2,-4(fp)
   15af4:	10800017 	ldw	r2,0(r2)
   15af8:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
   15afc:	e0bffc17 	ldw	r2,-16(fp)
   15b00:	10800090 	cmplti	r2,r2,2
   15b04:	1000061e 	bne	r2,zero,15b20 <altera_avalon_jtag_uart_ioctl+0x7c>
   15b08:	e0fffc17 	ldw	r3,-16(fp)
   15b0c:	00a00034 	movhi	r2,32768
   15b10:	10bfffc4 	addi	r2,r2,-1
   15b14:	18800226 	beq	r3,r2,15b20 <altera_avalon_jtag_uart_ioctl+0x7c>
   15b18:	e0bffc17 	ldw	r2,-16(fp)
   15b1c:	00000206 	br	15b28 <altera_avalon_jtag_uart_ioctl+0x84>
   15b20:	00a00034 	movhi	r2,32768
   15b24:	10bfff84 	addi	r2,r2,-2
   15b28:	e0fffd17 	ldw	r3,-12(fp)
   15b2c:	18800115 	stw	r2,4(r3)
      rc = 0;
   15b30:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
   15b34:	00001106 	br	15b7c <altera_avalon_jtag_uart_ioctl+0xd8>
   15b38:	00001006 	br	15b7c <altera_avalon_jtag_uart_ioctl+0xd8>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
   15b3c:	e0bffd17 	ldw	r2,-12(fp)
   15b40:	10c00117 	ldw	r3,4(r2)
   15b44:	00a00034 	movhi	r2,32768
   15b48:	10bfffc4 	addi	r2,r2,-1
   15b4c:	18800a26 	beq	r3,r2,15b78 <altera_avalon_jtag_uart_ioctl+0xd4>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
   15b50:	e0bffd17 	ldw	r2,-12(fp)
   15b54:	10c00917 	ldw	r3,36(r2)
   15b58:	e0bffd17 	ldw	r2,-12(fp)
   15b5c:	10800117 	ldw	r2,4(r2)
   15b60:	1885803a 	cmpltu	r2,r3,r2
   15b64:	10c03fcc 	andi	r3,r2,255
   15b68:	e0bfff17 	ldw	r2,-4(fp)
   15b6c:	10c00015 	stw	r3,0(r2)
      rc = 0;
   15b70:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
   15b74:	00000006 	br	15b78 <altera_avalon_jtag_uart_ioctl+0xd4>
   15b78:	0001883a 	nop

  default:
    break;
  }

  return rc;
   15b7c:	e0bffb17 	ldw	r2,-20(fp)
}
   15b80:	e037883a 	mov	sp,fp
   15b84:	df000017 	ldw	fp,0(sp)
   15b88:	dec00104 	addi	sp,sp,4
   15b8c:	f800283a 	ret

00015b90 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
   15b90:	deffec04 	addi	sp,sp,-80
   15b94:	dfc01315 	stw	ra,76(sp)
   15b98:	df001215 	stw	fp,72(sp)
   15b9c:	df001204 	addi	fp,sp,72
   15ba0:	e13ffc15 	stw	r4,-16(fp)
   15ba4:	e17ffd15 	stw	r5,-12(fp)
   15ba8:	e1bffe15 	stw	r6,-8(fp)
   15bac:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
   15bb0:	e0bffd17 	ldw	r2,-12(fp)
   15bb4:	e0bfef15 	stw	r2,-68(fp)

  /*
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);
   15bb8:	e0bffc17 	ldw	r2,-16(fp)
   15bbc:	10800a17 	ldw	r2,40(r2)
   15bc0:	e0bff415 	stw	r2,-48(fp)
   15bc4:	e03ff50d 	sth	zero,-44(fp)

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sem_pend (OS_EVENT* sem, 
                  INT16U timeout)
{
  INT8U err;
  OSSemPend (sem, timeout, &err);
   15bc8:	e0fff50b 	ldhu	r3,-44(fp)
   15bcc:	e0bffb04 	addi	r2,fp,-20
   15bd0:	e13ff417 	ldw	r4,-48(fp)
   15bd4:	180b883a 	mov	r5,r3
   15bd8:	100d883a 	mov	r6,r2
   15bdc:	0012a500 	call	12a50 <OSSemPend>

  while (space > 0)
   15be0:	00006506 	br	15d78 <altera_avalon_jtag_uart_read+0x1e8>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
   15be4:	e0bffc17 	ldw	r2,-16(fp)
   15be8:	10800d17 	ldw	r2,52(r2)
   15bec:	e0bff115 	stw	r2,-60(fp)
      out = sp->rx_out;
   15bf0:	e0bffc17 	ldw	r2,-16(fp)
   15bf4:	10800e17 	ldw	r2,56(r2)
   15bf8:	e0bff215 	stw	r2,-56(fp)

      if (in >= out)
   15bfc:	e0fff117 	ldw	r3,-60(fp)
   15c00:	e0bff217 	ldw	r2,-56(fp)
   15c04:	18800536 	bltu	r3,r2,15c1c <altera_avalon_jtag_uart_read+0x8c>
        n = in - out;
   15c08:	e0fff117 	ldw	r3,-60(fp)
   15c0c:	e0bff217 	ldw	r2,-56(fp)
   15c10:	1885c83a 	sub	r2,r3,r2
   15c14:	e0bff015 	stw	r2,-64(fp)
   15c18:	00000406 	br	15c2c <altera_avalon_jtag_uart_read+0x9c>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
   15c1c:	00c20004 	movi	r3,2048
   15c20:	e0bff217 	ldw	r2,-56(fp)
   15c24:	1885c83a 	sub	r2,r3,r2
   15c28:	e0bff015 	stw	r2,-64(fp)

      if (n == 0)
   15c2c:	e0bff017 	ldw	r2,-64(fp)
   15c30:	1000011e 	bne	r2,zero,15c38 <altera_avalon_jtag_uart_read+0xa8>
        break; /* No more data available */
   15c34:	00001d06 	br	15cac <altera_avalon_jtag_uart_read+0x11c>

      if (n > space)
   15c38:	e0fffe17 	ldw	r3,-8(fp)
   15c3c:	e0bff017 	ldw	r2,-64(fp)
   15c40:	1880022e 	bgeu	r3,r2,15c4c <altera_avalon_jtag_uart_read+0xbc>
        n = space;
   15c44:	e0bffe17 	ldw	r2,-8(fp)
   15c48:	e0bff015 	stw	r2,-64(fp)

      memcpy(ptr, sp->rx_buf + out, n);
   15c4c:	e0bff217 	ldw	r2,-56(fp)
   15c50:	10801104 	addi	r2,r2,68
   15c54:	e0fffc17 	ldw	r3,-16(fp)
   15c58:	1885883a 	add	r2,r3,r2
   15c5c:	e13fef17 	ldw	r4,-68(fp)
   15c60:	100b883a 	mov	r5,r2
   15c64:	e1bff017 	ldw	r6,-64(fp)
   15c68:	00053a00 	call	53a0 <memcpy>
      ptr   += n;
   15c6c:	e0ffef17 	ldw	r3,-68(fp)
   15c70:	e0bff017 	ldw	r2,-64(fp)
   15c74:	1885883a 	add	r2,r3,r2
   15c78:	e0bfef15 	stw	r2,-68(fp)
      space -= n;
   15c7c:	e0fffe17 	ldw	r3,-8(fp)
   15c80:	e0bff017 	ldw	r2,-64(fp)
   15c84:	1885c83a 	sub	r2,r3,r2
   15c88:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   15c8c:	e0fff217 	ldw	r3,-56(fp)
   15c90:	e0bff017 	ldw	r2,-64(fp)
   15c94:	1885883a 	add	r2,r3,r2
   15c98:	10c1ffcc 	andi	r3,r2,2047
   15c9c:	e0bffc17 	ldw	r2,-16(fp)
   15ca0:	10c00e15 	stw	r3,56(r2)
    }
    while (space > 0);
   15ca4:	e0bffe17 	ldw	r2,-8(fp)
   15ca8:	00bfce16 	blt	zero,r2,15be4 <__alt_mem_Flash_flash_data+0xf4015be4>

    /* If we read any data then return it */
    if (ptr != buffer)
   15cac:	e0ffef17 	ldw	r3,-68(fp)
   15cb0:	e0bffd17 	ldw	r2,-12(fp)
   15cb4:	18800126 	beq	r3,r2,15cbc <altera_avalon_jtag_uart_read+0x12c>
      break;
   15cb8:	00003106 	br	15d80 <altera_avalon_jtag_uart_read+0x1f0>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
   15cbc:	e0bfff17 	ldw	r2,-4(fp)
   15cc0:	1090000c 	andi	r2,r2,16384
   15cc4:	10000126 	beq	r2,zero,15ccc <altera_avalon_jtag_uart_read+0x13c>
      break;
   15cc8:	00002d06 	br	15d80 <altera_avalon_jtag_uart_read+0x1f0>

#ifdef __ucosii__
    /* OS Present: Pend on a flag if the OS is running, otherwise spin */
    if(OSRunning == OS_TRUE) {
   15ccc:	008000b4 	movhi	r2,2
   15cd0:	10b47f44 	addi	r2,r2,-11779
   15cd4:	10800003 	ldbu	r2,0(r2)
   15cd8:	10803fcc 	andi	r2,r2,255
   15cdc:	10800058 	cmpnei	r2,r2,1
   15ce0:	1000161e 	bne	r2,zero,15d3c <altera_avalon_jtag_uart_read+0x1ac>
       * When running in a multi-threaded mode, we pend on the read event
       * flag set and timeout event flag set in the isr. This avoids wasting CPU
       * cycles waiting in this thread, when we could be doing something more
       * profitable elsewhere.
       */
      ALT_FLAG_PEND (sp->events,
   15ce4:	e0bffc17 	ldw	r2,-16(fp)
   15ce8:	10800c17 	ldw	r2,48(r2)
   15cec:	e0bff615 	stw	r2,-40(fp)
   15cf0:	00800144 	movi	r2,5
   15cf4:	e0bff70d 	sth	r2,-36(fp)
   15cf8:	00bfe0c4 	movi	r2,-125
   15cfc:	e0bff785 	stb	r2,-34(fp)
   15d00:	e03ff80d 	sth	zero,-32(fp)
                   OS_FLAGS flags, 
                   INT8U wait_type, 
                   INT16U timeout)
{
  INT8U err;
  if (OSRunning)
   15d04:	008000b4 	movhi	r2,2
   15d08:	10b47f44 	addi	r2,r2,-11779
   15d0c:	10800003 	ldbu	r2,0(r2)
   15d10:	10803fcc 	andi	r2,r2,255
   15d14:	10001326 	beq	r2,zero,15d64 <altera_avalon_jtag_uart_read+0x1d4>
  {
    OSFlagPend (group, flags, wait_type, timeout, &err);
   15d18:	e17ff70b 	ldhu	r5,-36(fp)
   15d1c:	e1bff783 	ldbu	r6,-34(fp)
   15d20:	e0fff80b 	ldhu	r3,-32(fp)
   15d24:	e0bffb44 	addi	r2,fp,-19
   15d28:	d8800015 	stw	r2,0(sp)
   15d2c:	e13ff617 	ldw	r4,-40(fp)
   15d30:	180f883a 	mov	r7,r3
   15d34:	000fda80 	call	fda8 <OSFlagPend>
   15d38:	00000a06 	br	15d64 <altera_avalon_jtag_uart_read+0x1d4>
                     OS_FLAG_WAIT_SET_ANY + OS_FLAG_CONSUME,
                     0);
    }
    else {
      /* Spin until more data arrives or until host disconnects */
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
   15d3c:	0001883a 	nop
   15d40:	e0bffc17 	ldw	r2,-16(fp)
   15d44:	10c00d17 	ldw	r3,52(r2)
   15d48:	e0bff117 	ldw	r2,-60(fp)
   15d4c:	1880051e 	bne	r3,r2,15d64 <altera_avalon_jtag_uart_read+0x1d4>
   15d50:	e0bffc17 	ldw	r2,-16(fp)
   15d54:	10c00917 	ldw	r3,36(r2)
   15d58:	e0bffc17 	ldw	r2,-16(fp)
   15d5c:	10800117 	ldw	r2,4(r2)
   15d60:	18bff736 	bltu	r3,r2,15d40 <__alt_mem_Flash_flash_data+0xf4015d40>
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
   15d64:	e0bffc17 	ldw	r2,-16(fp)
   15d68:	10c00d17 	ldw	r3,52(r2)
   15d6c:	e0bff117 	ldw	r2,-60(fp)
   15d70:	1880011e 	bne	r3,r2,15d78 <altera_avalon_jtag_uart_read+0x1e8>
      break;
   15d74:	00000206 	br	15d80 <altera_avalon_jtag_uart_read+0x1f0>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   15d78:	e0bffe17 	ldw	r2,-8(fp)
   15d7c:	00bf9916 	blt	zero,r2,15be4 <__alt_mem_Flash_flash_data+0xf4015be4>
  /*
   * Now that access to the circular buffer is complete, release the read
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);
   15d80:	e0bffc17 	ldw	r2,-16(fp)
   15d84:	10800a17 	ldw	r2,40(r2)
   15d88:	1009883a 	mov	r4,r2
   15d8c:	0012e240 	call	12e24 <OSSemPost>

  if (ptr != buffer)
   15d90:	e0ffef17 	ldw	r3,-68(fp)
   15d94:	e0bffd17 	ldw	r2,-12(fp)
   15d98:	18801826 	beq	r3,r2,15dfc <altera_avalon_jtag_uart_read+0x26c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   15d9c:	0005303a 	rdctl	r2,status
   15da0:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   15da4:	e0fff917 	ldw	r3,-28(fp)
   15da8:	00bfff84 	movi	r2,-2
   15dac:	1884703a 	and	r2,r3,r2
   15db0:	1001703a 	wrctl	status,r2
  
  return context;
   15db4:	e0bff917 	ldw	r2,-28(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
   15db8:	e0bff315 	stw	r2,-52(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   15dbc:	e0bffc17 	ldw	r2,-16(fp)
   15dc0:	10800817 	ldw	r2,32(r2)
   15dc4:	10c00054 	ori	r3,r2,1
   15dc8:	e0bffc17 	ldw	r2,-16(fp)
   15dcc:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   15dd0:	e0bffc17 	ldw	r2,-16(fp)
   15dd4:	10800017 	ldw	r2,0(r2)
   15dd8:	10800104 	addi	r2,r2,4
   15ddc:	1007883a 	mov	r3,r2
   15de0:	e0bffc17 	ldw	r2,-16(fp)
   15de4:	10800817 	ldw	r2,32(r2)
   15de8:	18800035 	stwio	r2,0(r3)
   15dec:	e0bff317 	ldw	r2,-52(fp)
   15df0:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   15df4:	e0bffa17 	ldw	r2,-24(fp)
   15df8:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
   15dfc:	e0ffef17 	ldw	r3,-68(fp)
   15e00:	e0bffd17 	ldw	r2,-12(fp)
   15e04:	18800426 	beq	r3,r2,15e18 <altera_avalon_jtag_uart_read+0x288>
    return ptr - buffer;
   15e08:	e0ffef17 	ldw	r3,-68(fp)
   15e0c:	e0bffd17 	ldw	r2,-12(fp)
   15e10:	1885c83a 	sub	r2,r3,r2
   15e14:	00000606 	br	15e30 <altera_avalon_jtag_uart_read+0x2a0>
  else if (flags & O_NONBLOCK)
   15e18:	e0bfff17 	ldw	r2,-4(fp)
   15e1c:	1090000c 	andi	r2,r2,16384
   15e20:	10000226 	beq	r2,zero,15e2c <altera_avalon_jtag_uart_read+0x29c>
    return -EWOULDBLOCK;
   15e24:	00bffd44 	movi	r2,-11
   15e28:	00000106 	br	15e30 <altera_avalon_jtag_uart_read+0x2a0>
  else
    return -EIO;
   15e2c:	00bffec4 	movi	r2,-5
}
   15e30:	e037883a 	mov	sp,fp
   15e34:	dfc00117 	ldw	ra,4(sp)
   15e38:	df000017 	ldw	fp,0(sp)
   15e3c:	dec00204 	addi	sp,sp,8
   15e40:	f800283a 	ret

00015e44 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
   15e44:	deffed04 	addi	sp,sp,-76
   15e48:	dfc01215 	stw	ra,72(sp)
   15e4c:	df001115 	stw	fp,68(sp)
   15e50:	df001104 	addi	fp,sp,68
   15e54:	e13ffc15 	stw	r4,-16(fp)
   15e58:	e17ffd15 	stw	r5,-12(fp)
   15e5c:	e1bffe15 	stw	r6,-8(fp)
   15e60:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
   15e64:	e03ff015 	stw	zero,-64(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
   15e68:	e0bffd17 	ldw	r2,-12(fp)
   15e6c:	e0bff215 	stw	r2,-56(fp)

  /*
   * When running in a multi threaded environment, obtain the "write_lock"
   * semaphore. This ensures that writing to the device is thread-safe.
   */
  ALT_SEM_PEND (sp->write_lock, 0);
   15e70:	e0bffc17 	ldw	r2,-16(fp)
   15e74:	10800b17 	ldw	r2,44(r2)
   15e78:	e0bff515 	stw	r2,-44(fp)
   15e7c:	e03ff60d 	sth	zero,-40(fp)
   15e80:	e0fff60b 	ldhu	r3,-40(fp)
   15e84:	e0bffbc4 	addi	r2,fp,-17
   15e88:	e13ff517 	ldw	r4,-44(fp)
   15e8c:	180b883a 	mov	r5,r3
   15e90:	100d883a 	mov	r6,r2
   15e94:	0012a500 	call	12a50 <OSSemPend>

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   15e98:	00003806 	br	15f7c <altera_avalon_jtag_uart_write+0x138>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
   15e9c:	e0bffc17 	ldw	r2,-16(fp)
   15ea0:	10800f17 	ldw	r2,60(r2)
   15ea4:	e0bff315 	stw	r2,-52(fp)
      out = sp->tx_out;
   15ea8:	e0bffc17 	ldw	r2,-16(fp)
   15eac:	10801017 	ldw	r2,64(r2)
   15eb0:	e0bff015 	stw	r2,-64(fp)

      if (in < out)
   15eb4:	e0fff317 	ldw	r3,-52(fp)
   15eb8:	e0bff017 	ldw	r2,-64(fp)
   15ebc:	1880062e 	bgeu	r3,r2,15ed8 <altera_avalon_jtag_uart_write+0x94>
        n = out - 1 - in;
   15ec0:	e0fff017 	ldw	r3,-64(fp)
   15ec4:	e0bff317 	ldw	r2,-52(fp)
   15ec8:	1885c83a 	sub	r2,r3,r2
   15ecc:	10bfffc4 	addi	r2,r2,-1
   15ed0:	e0bff115 	stw	r2,-60(fp)
   15ed4:	00000b06 	br	15f04 <altera_avalon_jtag_uart_write+0xc0>
      else if (out > 0)
   15ed8:	e0bff017 	ldw	r2,-64(fp)
   15edc:	10000526 	beq	r2,zero,15ef4 <altera_avalon_jtag_uart_write+0xb0>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
   15ee0:	00c20004 	movi	r3,2048
   15ee4:	e0bff317 	ldw	r2,-52(fp)
   15ee8:	1885c83a 	sub	r2,r3,r2
   15eec:	e0bff115 	stw	r2,-60(fp)
   15ef0:	00000406 	br	15f04 <altera_avalon_jtag_uart_write+0xc0>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
   15ef4:	00c1ffc4 	movi	r3,2047
   15ef8:	e0bff317 	ldw	r2,-52(fp)
   15efc:	1885c83a 	sub	r2,r3,r2
   15f00:	e0bff115 	stw	r2,-60(fp)

      if (n == 0)
   15f04:	e0bff117 	ldw	r2,-60(fp)
   15f08:	1000011e 	bne	r2,zero,15f10 <altera_avalon_jtag_uart_write+0xcc>
        break;
   15f0c:	00001d06 	br	15f84 <altera_avalon_jtag_uart_write+0x140>

      if (n > count)
   15f10:	e0fffe17 	ldw	r3,-8(fp)
   15f14:	e0bff117 	ldw	r2,-60(fp)
   15f18:	1880022e 	bgeu	r3,r2,15f24 <altera_avalon_jtag_uart_write+0xe0>
        n = count;
   15f1c:	e0bffe17 	ldw	r2,-8(fp)
   15f20:	e0bff115 	stw	r2,-60(fp)

      memcpy(sp->tx_buf + in, ptr, n);
   15f24:	e0bff317 	ldw	r2,-52(fp)
   15f28:	10821104 	addi	r2,r2,2116
   15f2c:	e0fffc17 	ldw	r3,-16(fp)
   15f30:	1885883a 	add	r2,r3,r2
   15f34:	1009883a 	mov	r4,r2
   15f38:	e17ffd17 	ldw	r5,-12(fp)
   15f3c:	e1bff117 	ldw	r6,-60(fp)
   15f40:	00053a00 	call	53a0 <memcpy>
      ptr   += n;
   15f44:	e0fffd17 	ldw	r3,-12(fp)
   15f48:	e0bff117 	ldw	r2,-60(fp)
   15f4c:	1885883a 	add	r2,r3,r2
   15f50:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
   15f54:	e0fffe17 	ldw	r3,-8(fp)
   15f58:	e0bff117 	ldw	r2,-60(fp)
   15f5c:	1885c83a 	sub	r2,r3,r2
   15f60:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   15f64:	e0fff317 	ldw	r3,-52(fp)
   15f68:	e0bff117 	ldw	r2,-60(fp)
   15f6c:	1885883a 	add	r2,r3,r2
   15f70:	10c1ffcc 	andi	r3,r2,2047
   15f74:	e0bffc17 	ldw	r2,-16(fp)
   15f78:	10c00f15 	stw	r3,60(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   15f7c:	e0bffe17 	ldw	r2,-8(fp)
   15f80:	00bfc616 	blt	zero,r2,15e9c <__alt_mem_Flash_flash_data+0xf4015e9c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   15f84:	0005303a 	rdctl	r2,status
   15f88:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   15f8c:	e0fff717 	ldw	r3,-36(fp)
   15f90:	00bfff84 	movi	r2,-2
   15f94:	1884703a 	and	r2,r3,r2
   15f98:	1001703a 	wrctl	status,r2
  
  return context;
   15f9c:	e0bff717 	ldw	r2,-36(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
   15fa0:	e0bff415 	stw	r2,-48(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   15fa4:	e0bffc17 	ldw	r2,-16(fp)
   15fa8:	10800817 	ldw	r2,32(r2)
   15fac:	10c00094 	ori	r3,r2,2
   15fb0:	e0bffc17 	ldw	r2,-16(fp)
   15fb4:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   15fb8:	e0bffc17 	ldw	r2,-16(fp)
   15fbc:	10800017 	ldw	r2,0(r2)
   15fc0:	10800104 	addi	r2,r2,4
   15fc4:	1007883a 	mov	r3,r2
   15fc8:	e0bffc17 	ldw	r2,-16(fp)
   15fcc:	10800817 	ldw	r2,32(r2)
   15fd0:	18800035 	stwio	r2,0(r3)
   15fd4:	e0bff417 	ldw	r2,-48(fp)
   15fd8:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   15fdc:	e0bff817 	ldw	r2,-32(fp)
   15fe0:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
   15fe4:	e0bffe17 	ldw	r2,-8(fp)
   15fe8:	00802e0e 	bge	zero,r2,160a4 <altera_avalon_jtag_uart_write+0x260>
    {
      if (flags & O_NONBLOCK)
   15fec:	e0bfff17 	ldw	r2,-4(fp)
   15ff0:	1090000c 	andi	r2,r2,16384
   15ff4:	10000126 	beq	r2,zero,15ffc <altera_avalon_jtag_uart_write+0x1b8>
        break;
   15ff8:	00002c06 	br	160ac <altera_avalon_jtag_uart_write+0x268>

#ifdef __ucosii__
      /* OS Present: Pend on a flag if the OS is running, otherwise spin */
      if(OSRunning == OS_TRUE) {
   15ffc:	008000b4 	movhi	r2,2
   16000:	10b47f44 	addi	r2,r2,-11779
   16004:	10800003 	ldbu	r2,0(r2)
   16008:	10803fcc 	andi	r2,r2,255
   1600c:	10800058 	cmpnei	r2,r2,1
   16010:	1000161e 	bne	r2,zero,1606c <altera_avalon_jtag_uart_write+0x228>
         * more profitable elsewhere.
         */
#ifdef ALTERA_AVALON_JTAG_UART_IGNORE_FIFO_FULL_ERROR
        if(!sp->host_inactive)
#endif
        ALT_FLAG_PEND (sp->events,
   16014:	e0bffc17 	ldw	r2,-16(fp)
   16018:	10800c17 	ldw	r2,48(r2)
   1601c:	e0bff915 	stw	r2,-28(fp)
   16020:	00800184 	movi	r2,6
   16024:	e0bffa0d 	sth	r2,-24(fp)
   16028:	00bfe0c4 	movi	r2,-125
   1602c:	e0bffa85 	stb	r2,-22(fp)
   16030:	e03ffb0d 	sth	zero,-20(fp)
                   OS_FLAGS flags, 
                   INT8U wait_type, 
                   INT16U timeout)
{
  INT8U err;
  if (OSRunning)
   16034:	008000b4 	movhi	r2,2
   16038:	10b47f44 	addi	r2,r2,-11779
   1603c:	10800003 	ldbu	r2,0(r2)
   16040:	10803fcc 	andi	r2,r2,255
   16044:	10001326 	beq	r2,zero,16094 <altera_avalon_jtag_uart_write+0x250>
  {
    OSFlagPend (group, flags, wait_type, timeout, &err);
   16048:	e17ffa0b 	ldhu	r5,-24(fp)
   1604c:	e1bffa83 	ldbu	r6,-22(fp)
   16050:	e0fffb0b 	ldhu	r3,-20(fp)
   16054:	e0bffb84 	addi	r2,fp,-18
   16058:	d8800015 	stw	r2,0(sp)
   1605c:	e13ff917 	ldw	r4,-28(fp)
   16060:	180f883a 	mov	r7,r3
   16064:	000fda80 	call	fda8 <OSFlagPend>
   16068:	00000a06 	br	16094 <altera_avalon_jtag_uart_write+0x250>
        /*
         * OS not running: Wait for data to be removed from buffer.
         * Once the interrupt routine has removed some data then we
         * will be able to insert some more.
         */
        while (out == sp->tx_out && sp->host_inactive < sp->timeout)
   1606c:	0001883a 	nop
   16070:	e0bffc17 	ldw	r2,-16(fp)
   16074:	10c01017 	ldw	r3,64(r2)
   16078:	e0bff017 	ldw	r2,-64(fp)
   1607c:	1880051e 	bne	r3,r2,16094 <altera_avalon_jtag_uart_write+0x250>
   16080:	e0bffc17 	ldw	r2,-16(fp)
   16084:	10c00917 	ldw	r3,36(r2)
   16088:	e0bffc17 	ldw	r2,-16(fp)
   1608c:	10800117 	ldw	r2,4(r2)
   16090:	18bff736 	bltu	r3,r2,16070 <__alt_mem_Flash_flash_data+0xf4016070>
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
   16094:	e0bffc17 	ldw	r2,-16(fp)
   16098:	10800917 	ldw	r2,36(r2)
   1609c:	10000126 	beq	r2,zero,160a4 <altera_avalon_jtag_uart_write+0x260>
         break;
   160a0:	00000206 	br	160ac <altera_avalon_jtag_uart_write+0x268>
    }
  }
  while (count > 0);
   160a4:	e0bffe17 	ldw	r2,-8(fp)
   160a8:	00bf7b16 	blt	zero,r2,15e98 <__alt_mem_Flash_flash_data+0xf4015e98>

  /*
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);
   160ac:	e0bffc17 	ldw	r2,-16(fp)
   160b0:	10800b17 	ldw	r2,44(r2)
   160b4:	1009883a 	mov	r4,r2
   160b8:	0012e240 	call	12e24 <OSSemPost>

  if (ptr != start)
   160bc:	e0fffd17 	ldw	r3,-12(fp)
   160c0:	e0bff217 	ldw	r2,-56(fp)
   160c4:	18800426 	beq	r3,r2,160d8 <altera_avalon_jtag_uart_write+0x294>
    return ptr - start;
   160c8:	e0fffd17 	ldw	r3,-12(fp)
   160cc:	e0bff217 	ldw	r2,-56(fp)
   160d0:	1885c83a 	sub	r2,r3,r2
   160d4:	00000606 	br	160f0 <altera_avalon_jtag_uart_write+0x2ac>
  else if (flags & O_NONBLOCK)
   160d8:	e0bfff17 	ldw	r2,-4(fp)
   160dc:	1090000c 	andi	r2,r2,16384
   160e0:	10000226 	beq	r2,zero,160ec <altera_avalon_jtag_uart_write+0x2a8>
    return -EWOULDBLOCK;
   160e4:	00bffd44 	movi	r2,-11
   160e8:	00000106 	br	160f0 <altera_avalon_jtag_uart_write+0x2ac>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
   160ec:	00bffec4 	movi	r2,-5
}
   160f0:	e037883a 	mov	sp,fp
   160f4:	dfc00117 	ldw	ra,4(sp)
   160f8:	df000017 	ldw	fp,0(sp)
   160fc:	dec00204 	addi	sp,sp,8
   16100:	f800283a 	ret

00016104 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
   16104:	defff904 	addi	sp,sp,-28
   16108:	dfc00615 	stw	ra,24(sp)
   1610c:	df000515 	stw	fp,20(sp)
   16110:	df000504 	addi	fp,sp,20
   16114:	e13ffe15 	stw	r4,-8(fp)
   16118:	e17fff15 	stw	r5,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
   1611c:	0007883a 	mov	r3,zero
   16120:	e0bffe17 	ldw	r2,-8(fp)
   16124:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
   16128:	e0bffe17 	ldw	r2,-8(fp)
   1612c:	10800104 	addi	r2,r2,4
   16130:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   16134:	0005303a 	rdctl	r2,status
   16138:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1613c:	e0fffc17 	ldw	r3,-16(fp)
   16140:	00bfff84 	movi	r2,-2
   16144:	1884703a 	and	r2,r3,r2
   16148:	1001703a 	wrctl	status,r2
  
  return context;
   1614c:	e0bffc17 	ldw	r2,-16(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
   16150:	e0bffb15 	stw	r2,-20(fp)
  alt_tick ();
   16154:	00181800 	call	18180 <alt_tick>
   16158:	e0bffb17 	ldw	r2,-20(fp)
   1615c:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   16160:	e0bffd17 	ldw	r2,-12(fp)
   16164:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
   16168:	e037883a 	mov	sp,fp
   1616c:	dfc00117 	ldw	ra,4(sp)
   16170:	df000017 	ldw	fp,0(sp)
   16174:	dec00204 	addi	sp,sp,8
   16178:	f800283a 	ret

0001617c <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
   1617c:	defff904 	addi	sp,sp,-28
   16180:	dfc00615 	stw	ra,24(sp)
   16184:	df000515 	stw	fp,20(sp)
   16188:	df000504 	addi	fp,sp,20
   1618c:	e13ffc15 	stw	r4,-16(fp)
   16190:	e17ffd15 	stw	r5,-12(fp)
   16194:	e1bffe15 	stw	r6,-8(fp)
   16198:	e1ffff15 	stw	r7,-4(fp)
   1619c:	e0bfff17 	ldw	r2,-4(fp)
   161a0:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
   161a4:	008000b4 	movhi	r2,2
   161a8:	10b49404 	addi	r2,r2,-11696
   161ac:	10800017 	ldw	r2,0(r2)
   161b0:	1000041e 	bne	r2,zero,161c4 <alt_avalon_timer_sc_init+0x48>
  {
    _alt_tick_rate = nticks;
   161b4:	008000b4 	movhi	r2,2
   161b8:	10b49404 	addi	r2,r2,-11696
   161bc:	e0fffb17 	ldw	r3,-20(fp)
   161c0:	10c00015 	stw	r3,0(r2)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
   161c4:	e0bffc17 	ldw	r2,-16(fp)
   161c8:	10800104 	addi	r2,r2,4
   161cc:	00c001c4 	movi	r3,7
   161d0:	10c00035 	stwio	r3,0(r2)
  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
   161d4:	e13ffe17 	ldw	r4,-8(fp)
   161d8:	e17ffc17 	ldw	r5,-16(fp)
   161dc:	01800074 	movhi	r6,1
   161e0:	31984104 	addi	r6,r6,24836
   161e4:	0017cc40 	call	17cc4 <alt_irq_register>
#endif  
}
   161e8:	e037883a 	mov	sp,fp
   161ec:	dfc00117 	ldw	ra,4(sp)
   161f0:	df000017 	ldw	fp,0(sp)
   161f4:	dec00204 	addi	sp,sp,8
   161f8:	f800283a 	ret

000161fc <get_DDRAM_addr>:
 * @sa the datasheet for the LCD Display Controller on the DE2 Board
 * @note the function requires that the input are in the valid range
 *
 **/
unsigned char get_DDRAM_addr(unsigned x_pos, unsigned y_pos)
{
   161fc:	defffc04 	addi	sp,sp,-16
   16200:	df000315 	stw	fp,12(sp)
   16204:	df000304 	addi	fp,sp,12
   16208:	e13ffe15 	stw	r4,-8(fp)
   1620c:	e17fff15 	stw	r5,-4(fp)
	//assume valid inputs
	unsigned char addr = 0x00000000;
   16210:	e03ffd05 	stb	zero,-12(fp)
	if (y_pos == 0)
   16214:	e0bfff17 	ldw	r2,-4(fp)
   16218:	1000061e 	bne	r2,zero,16234 <get_DDRAM_addr+0x38>
	{
		addr |= x_pos;
   1621c:	e0bffe17 	ldw	r2,-8(fp)
   16220:	1007883a 	mov	r3,r2
   16224:	e0bffd03 	ldbu	r2,-12(fp)
   16228:	1884b03a 	or	r2,r3,r2
   1622c:	e0bffd05 	stb	r2,-12(fp)
   16230:	00000806 	br	16254 <get_DDRAM_addr+0x58>
	}
	else
	{
		addr |= x_pos;
   16234:	e0bffe17 	ldw	r2,-8(fp)
   16238:	1007883a 	mov	r3,r2
   1623c:	e0bffd03 	ldbu	r2,-12(fp)
   16240:	1884b03a 	or	r2,r3,r2
   16244:	e0bffd05 	stb	r2,-12(fp)
		addr |= 0x00000040;
   16248:	e0bffd03 	ldbu	r2,-12(fp)
   1624c:	10801014 	ori	r2,r2,64
   16250:	e0bffd05 	stb	r2,-12(fp)
	}
	// b_7 is always 1 for DDRAM address, see datasheet
	return (addr | 0x00000080);
   16254:	e0fffd03 	ldbu	r3,-12(fp)
   16258:	00bfe004 	movi	r2,-128
   1625c:	1884b03a 	or	r2,r3,r2
}
   16260:	e037883a 	mov	sp,fp
   16264:	df000017 	ldw	fp,0(sp)
   16268:	dec00104 	addi	sp,sp,4
   1626c:	f800283a 	ret

00016270 <alt_up_character_lcd_send_cmd>:
 * @param cmd -- the command bits 
 *
 * @return nothing
 **/
void alt_up_character_lcd_send_cmd(alt_up_character_lcd_dev *lcd, unsigned char cmd)
{
   16270:	defffd04 	addi	sp,sp,-12
   16274:	df000215 	stw	fp,8(sp)
   16278:	df000204 	addi	fp,sp,8
   1627c:	e13ffe15 	stw	r4,-8(fp)
   16280:	2805883a 	mov	r2,r5
   16284:	e0bfff05 	stb	r2,-4(fp)
 	// NOTE: We use the term Instruction Register and Control Register interchangeably
	IOWR_ALT_UP_CHARACTER_LCD_COMMAND(lcd->base, cmd);
   16288:	e0bffe17 	ldw	r2,-8(fp)
   1628c:	10800a17 	ldw	r2,40(r2)
   16290:	1007883a 	mov	r3,r2
   16294:	e0bfff03 	ldbu	r2,-4(fp)
   16298:	18800025 	stbio	r2,0(r3)
}
   1629c:	e037883a 	mov	sp,fp
   162a0:	df000017 	ldw	fp,0(sp)
   162a4:	dec00104 	addi	sp,sp,4
   162a8:	f800283a 	ret

000162ac <alt_up_character_lcd_init>:
 * file for a detailed description of each function
 */
////////////////////////////////////////////////////////////////////////////

void alt_up_character_lcd_init(alt_up_character_lcd_dev *lcd)
{
   162ac:	defffe04 	addi	sp,sp,-8
   162b0:	df000115 	stw	fp,4(sp)
   162b4:	df000104 	addi	fp,sp,4
   162b8:	e13fff15 	stw	r4,-4(fp)
	IOWR_ALT_UP_CHARACTER_LCD_COMMAND(lcd->base, ALT_UP_CHARACTER_LCD_COMM_CLEAR_DISPLAY);
   162bc:	e0bfff17 	ldw	r2,-4(fp)
   162c0:	10800a17 	ldw	r2,40(r2)
   162c4:	1007883a 	mov	r3,r2
   162c8:	00800044 	movi	r2,1
   162cc:	18800025 	stbio	r2,0(r3)
	// register the device 
	// see "Developing Device Drivers for the HAL" in "Nios II Software Developer's Handbook"
}
   162d0:	e037883a 	mov	sp,fp
   162d4:	df000017 	ldw	fp,0(sp)
   162d8:	dec00104 	addi	sp,sp,4
   162dc:	f800283a 	ret

000162e0 <alt_up_character_lcd_open_dev>:

alt_up_character_lcd_dev* alt_up_character_lcd_open_dev(const char* name)
{
   162e0:	defffc04 	addi	sp,sp,-16
   162e4:	dfc00315 	stw	ra,12(sp)
   162e8:	df000215 	stw	fp,8(sp)
   162ec:	df000204 	addi	fp,sp,8
   162f0:	e13fff15 	stw	r4,-4(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_character_lcd_dev *dev = (alt_up_character_lcd_dev*)alt_find_dev(name, &alt_dev_list);
   162f4:	e13fff17 	ldw	r4,-4(fp)
   162f8:	014000b4 	movhi	r5,2
   162fc:	296c7b04 	addi	r5,r5,-19988
   16300:	0017acc0 	call	17acc <alt_find_dev>
   16304:	e0bffe15 	stw	r2,-8(fp)

  return dev;
   16308:	e0bffe17 	ldw	r2,-8(fp)
}
   1630c:	e037883a 	mov	sp,fp
   16310:	dfc00117 	ldw	ra,4(sp)
   16314:	df000017 	ldw	fp,0(sp)
   16318:	dec00204 	addi	sp,sp,8
   1631c:	f800283a 	ret

00016320 <alt_up_character_lcd_write>:

void alt_up_character_lcd_write(alt_up_character_lcd_dev *dev, const char *ptr, unsigned int len)
{
   16320:	defffb04 	addi	sp,sp,-20
   16324:	df000415 	stw	fp,16(sp)
   16328:	df000404 	addi	fp,sp,16
   1632c:	e13ffd15 	stw	r4,-12(fp)
   16330:	e17ffe15 	stw	r5,-8(fp)
   16334:	e1bfff15 	stw	r6,-4(fp)
	unsigned int i;
	for (i = 0; i < len; i++)
   16338:	e03ffc15 	stw	zero,-16(fp)
   1633c:	00000f06 	br	1637c <alt_up_character_lcd_write+0x5c>
	{
		IOWR_ALT_UP_CHARACTER_LCD_DATA(dev->base, *(ptr+i));
   16340:	e0bffd17 	ldw	r2,-12(fp)
   16344:	10800a17 	ldw	r2,40(r2)
   16348:	10800044 	addi	r2,r2,1
   1634c:	1009883a 	mov	r4,r2
   16350:	e0fffe17 	ldw	r3,-8(fp)
   16354:	e0bffc17 	ldw	r2,-16(fp)
   16358:	1885883a 	add	r2,r3,r2
   1635c:	10800003 	ldbu	r2,0(r2)
   16360:	10803fcc 	andi	r2,r2,255
   16364:	1080201c 	xori	r2,r2,128
   16368:	10bfe004 	addi	r2,r2,-128
   1636c:	20800025 	stbio	r2,0(r4)
}

void alt_up_character_lcd_write(alt_up_character_lcd_dev *dev, const char *ptr, unsigned int len)
{
	unsigned int i;
	for (i = 0; i < len; i++)
   16370:	e0bffc17 	ldw	r2,-16(fp)
   16374:	10800044 	addi	r2,r2,1
   16378:	e0bffc15 	stw	r2,-16(fp)
   1637c:	e0fffc17 	ldw	r3,-16(fp)
   16380:	e0bfff17 	ldw	r2,-4(fp)
   16384:	18bfee36 	bltu	r3,r2,16340 <__alt_mem_Flash_flash_data+0xf4016340>
	{
		IOWR_ALT_UP_CHARACTER_LCD_DATA(dev->base, *(ptr+i));
	}
}
   16388:	e037883a 	mov	sp,fp
   1638c:	df000017 	ldw	fp,0(sp)
   16390:	dec00104 	addi	sp,sp,4
   16394:	f800283a 	ret

00016398 <alt_up_character_lcd_string>:

void alt_up_character_lcd_string(alt_up_character_lcd_dev *dev, const char *ptr)
{
   16398:	defffd04 	addi	sp,sp,-12
   1639c:	df000215 	stw	fp,8(sp)
   163a0:	df000204 	addi	fp,sp,8
   163a4:	e13ffe15 	stw	r4,-8(fp)
   163a8:	e17fff15 	stw	r5,-4(fp)
	while ( *ptr )
   163ac:	00000d06 	br	163e4 <alt_up_character_lcd_string+0x4c>
	{
		IOWR_ALT_UP_CHARACTER_LCD_DATA(dev->base, *(ptr));
   163b0:	e0bffe17 	ldw	r2,-8(fp)
   163b4:	10800a17 	ldw	r2,40(r2)
   163b8:	10800044 	addi	r2,r2,1
   163bc:	1007883a 	mov	r3,r2
   163c0:	e0bfff17 	ldw	r2,-4(fp)
   163c4:	10800003 	ldbu	r2,0(r2)
   163c8:	10803fcc 	andi	r2,r2,255
   163cc:	1080201c 	xori	r2,r2,128
   163d0:	10bfe004 	addi	r2,r2,-128
   163d4:	18800025 	stbio	r2,0(r3)
		++ptr;
   163d8:	e0bfff17 	ldw	r2,-4(fp)
   163dc:	10800044 	addi	r2,r2,1
   163e0:	e0bfff15 	stw	r2,-4(fp)
	}
}

void alt_up_character_lcd_string(alt_up_character_lcd_dev *dev, const char *ptr)
{
	while ( *ptr )
   163e4:	e0bfff17 	ldw	r2,-4(fp)
   163e8:	10800003 	ldbu	r2,0(r2)
   163ec:	10803fcc 	andi	r2,r2,255
   163f0:	1080201c 	xori	r2,r2,128
   163f4:	10bfe004 	addi	r2,r2,-128
   163f8:	103fed1e 	bne	r2,zero,163b0 <__alt_mem_Flash_flash_data+0xf40163b0>
	{
		IOWR_ALT_UP_CHARACTER_LCD_DATA(dev->base, *(ptr));
		++ptr;
	}
}
   163fc:	e037883a 	mov	sp,fp
   16400:	df000017 	ldw	fp,0(sp)
   16404:	dec00104 	addi	sp,sp,4
   16408:	f800283a 	ret

0001640c <alt_up_character_lcd_write_fd>:

// this function isn't used, and is included for future upgrades
int alt_up_character_lcd_write_fd(alt_fd *fd, const char *ptr, int len)
{
   1640c:	defffb04 	addi	sp,sp,-20
   16410:	dfc00415 	stw	ra,16(sp)
   16414:	df000315 	stw	fp,12(sp)
   16418:	df000304 	addi	fp,sp,12
   1641c:	e13ffd15 	stw	r4,-12(fp)
   16420:	e17ffe15 	stw	r5,-8(fp)
   16424:	e1bfff15 	stw	r6,-4(fp)
	alt_up_character_lcd_write( (alt_up_character_lcd_dev *) fd->dev, ptr, (unsigned int) len);
   16428:	e0bffd17 	ldw	r2,-12(fp)
   1642c:	10c00017 	ldw	r3,0(r2)
   16430:	e0bfff17 	ldw	r2,-4(fp)
   16434:	1809883a 	mov	r4,r3
   16438:	e17ffe17 	ldw	r5,-8(fp)
   1643c:	100d883a 	mov	r6,r2
   16440:	00163200 	call	16320 <alt_up_character_lcd_write>
	return 0;
   16444:	0005883a 	mov	r2,zero
}
   16448:	e037883a 	mov	sp,fp
   1644c:	dfc00117 	ldw	ra,4(sp)
   16450:	df000017 	ldw	fp,0(sp)
   16454:	dec00204 	addi	sp,sp,8
   16458:	f800283a 	ret

0001645c <alt_up_character_lcd_set_cursor_pos>:

int alt_up_character_lcd_set_cursor_pos(alt_up_character_lcd_dev *lcd, unsigned x_pos, 
	 unsigned y_pos)
{
   1645c:	defffa04 	addi	sp,sp,-24
   16460:	dfc00515 	stw	ra,20(sp)
   16464:	df000415 	stw	fp,16(sp)
   16468:	df000404 	addi	fp,sp,16
   1646c:	e13ffd15 	stw	r4,-12(fp)
   16470:	e17ffe15 	stw	r5,-8(fp)
   16474:	e1bfff15 	stw	r6,-4(fp)
	//boundary check
	if (x_pos > 39 || y_pos > 1 )
   16478:	e0bffe17 	ldw	r2,-8(fp)
   1647c:	10800a28 	cmpgeui	r2,r2,40
   16480:	1000031e 	bne	r2,zero,16490 <alt_up_character_lcd_set_cursor_pos+0x34>
   16484:	e0bfff17 	ldw	r2,-4(fp)
   16488:	108000b0 	cmpltui	r2,r2,2
   1648c:	1000021e 	bne	r2,zero,16498 <alt_up_character_lcd_set_cursor_pos+0x3c>
		// invalid argument
		return -1;
   16490:	00bfffc4 	movi	r2,-1
   16494:	00000906 	br	164bc <alt_up_character_lcd_set_cursor_pos+0x60>
	// calculate address
	unsigned char addr = get_DDRAM_addr(x_pos, y_pos);
   16498:	e13ffe17 	ldw	r4,-8(fp)
   1649c:	e17fff17 	ldw	r5,-4(fp)
   164a0:	00161fc0 	call	161fc <get_DDRAM_addr>
   164a4:	e0bffc05 	stb	r2,-16(fp)
	// set the cursor
	alt_up_character_lcd_send_cmd(lcd, addr);
   164a8:	e0bffc03 	ldbu	r2,-16(fp)
   164ac:	e13ffd17 	ldw	r4,-12(fp)
   164b0:	100b883a 	mov	r5,r2
   164b4:	00162700 	call	16270 <alt_up_character_lcd_send_cmd>
	return 0;
   164b8:	0005883a 	mov	r2,zero
}
   164bc:	e037883a 	mov	sp,fp
   164c0:	dfc00117 	ldw	ra,4(sp)
   164c4:	df000017 	ldw	fp,0(sp)
   164c8:	dec00204 	addi	sp,sp,8
   164cc:	f800283a 	ret

000164d0 <alt_up_character_lcd_shift_cursor>:

void alt_up_character_lcd_shift_cursor(alt_up_character_lcd_dev *lcd, int x_right_shift_offset)
{
   164d0:	defffb04 	addi	sp,sp,-20
   164d4:	dfc00415 	stw	ra,16(sp)
   164d8:	df000315 	stw	fp,12(sp)
   164dc:	df000304 	addi	fp,sp,12
   164e0:	e13ffe15 	stw	r4,-8(fp)
   164e4:	e17fff15 	stw	r5,-4(fp)
	if (x_right_shift_offset == 0) 
   164e8:	e0bfff17 	ldw	r2,-4(fp)
   164ec:	1000011e 	bne	r2,zero,164f4 <alt_up_character_lcd_shift_cursor+0x24>
		// don't ask me to do nothing 
		return;
   164f0:	00001406 	br	16544 <alt_up_character_lcd_shift_cursor+0x74>

	// see shift right or left
	unsigned char shift_cmd = (x_right_shift_offset > 0) ? 
   164f4:	e0bfff17 	ldw	r2,-4(fp)
   164f8:	0080020e 	bge	zero,r2,16504 <alt_up_character_lcd_shift_cursor+0x34>
   164fc:	00800504 	movi	r2,20
   16500:	00000106 	br	16508 <alt_up_character_lcd_shift_cursor+0x38>
   16504:	00800404 	movi	r2,16
   16508:	e0bffd45 	stb	r2,-11(fp)
		ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_LEFT;
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
   1650c:	e0bfff17 	ldw	r2,-4(fp)
   16510:	1000010e 	bge	r2,zero,16518 <alt_up_character_lcd_shift_cursor+0x48>
   16514:	0085c83a 	sub	r2,zero,r2
   16518:	e0bffd05 	stb	r2,-12(fp)
		-x_right_shift_offset;
	// do the shift
	while (num_offset-- > 0)
   1651c:	00000406 	br	16530 <alt_up_character_lcd_shift_cursor+0x60>
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
   16520:	e0bffd43 	ldbu	r2,-11(fp)
   16524:	e13ffe17 	ldw	r4,-8(fp)
   16528:	100b883a 	mov	r5,r2
   1652c:	00162700 	call	16270 <alt_up_character_lcd_send_cmd>
		ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_LEFT;
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
		-x_right_shift_offset;
	// do the shift
	while (num_offset-- > 0)
   16530:	e0bffd03 	ldbu	r2,-12(fp)
   16534:	10ffffc4 	addi	r3,r2,-1
   16538:	e0fffd05 	stb	r3,-12(fp)
   1653c:	10803fcc 	andi	r2,r2,255
   16540:	103ff71e 	bne	r2,zero,16520 <__alt_mem_Flash_flash_data+0xf4016520>
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
}
   16544:	e037883a 	mov	sp,fp
   16548:	dfc00117 	ldw	ra,4(sp)
   1654c:	df000017 	ldw	fp,0(sp)
   16550:	dec00204 	addi	sp,sp,8
   16554:	f800283a 	ret

00016558 <alt_up_character_lcd_shift_display>:

void alt_up_character_lcd_shift_display(alt_up_character_lcd_dev *lcd, int x_right_shift_offset)
{
   16558:	defffb04 	addi	sp,sp,-20
   1655c:	dfc00415 	stw	ra,16(sp)
   16560:	df000315 	stw	fp,12(sp)
   16564:	df000304 	addi	fp,sp,12
   16568:	e13ffe15 	stw	r4,-8(fp)
   1656c:	e17fff15 	stw	r5,-4(fp)
	if (x_right_shift_offset == 0) 
   16570:	e0bfff17 	ldw	r2,-4(fp)
   16574:	1000011e 	bne	r2,zero,1657c <alt_up_character_lcd_shift_display+0x24>
		// don't ask me to do nothing 
		return;
   16578:	00001406 	br	165cc <alt_up_character_lcd_shift_display+0x74>

	// see shift right or left
	unsigned char shift_cmd = (x_right_shift_offset > 0) ? 
   1657c:	e0bfff17 	ldw	r2,-4(fp)
   16580:	0080020e 	bge	zero,r2,1658c <alt_up_character_lcd_shift_display+0x34>
   16584:	00800704 	movi	r2,28
   16588:	00000106 	br	16590 <alt_up_character_lcd_shift_display+0x38>
   1658c:	00800604 	movi	r2,24
   16590:	e0bffd45 	stb	r2,-11(fp)
		ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_LEFT;
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
   16594:	e0bfff17 	ldw	r2,-4(fp)
   16598:	1000010e 	bge	r2,zero,165a0 <alt_up_character_lcd_shift_display+0x48>
   1659c:	0085c83a 	sub	r2,zero,r2
   165a0:	e0bffd05 	stb	r2,-12(fp)
		-x_right_shift_offset;
	// do the shift
	while (num_offset-- > 0)
   165a4:	00000406 	br	165b8 <alt_up_character_lcd_shift_display+0x60>
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
   165a8:	e0bffd43 	ldbu	r2,-11(fp)
   165ac:	e13ffe17 	ldw	r4,-8(fp)
   165b0:	100b883a 	mov	r5,r2
   165b4:	00162700 	call	16270 <alt_up_character_lcd_send_cmd>
		ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_LEFT;
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
		-x_right_shift_offset;
	// do the shift
	while (num_offset-- > 0)
   165b8:	e0bffd03 	ldbu	r2,-12(fp)
   165bc:	10ffffc4 	addi	r3,r2,-1
   165c0:	e0fffd05 	stb	r3,-12(fp)
   165c4:	10803fcc 	andi	r2,r2,255
   165c8:	103ff71e 	bne	r2,zero,165a8 <__alt_mem_Flash_flash_data+0xf40165a8>
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
}
   165cc:	e037883a 	mov	sp,fp
   165d0:	dfc00117 	ldw	ra,4(sp)
   165d4:	df000017 	ldw	fp,0(sp)
   165d8:	dec00204 	addi	sp,sp,8
   165dc:	f800283a 	ret

000165e0 <alt_up_character_lcd_erase_pos>:

int alt_up_character_lcd_erase_pos(alt_up_character_lcd_dev *lcd, unsigned x_pos, unsigned y_pos)
{
   165e0:	defffa04 	addi	sp,sp,-24
   165e4:	dfc00515 	stw	ra,20(sp)
   165e8:	df000415 	stw	fp,16(sp)
   165ec:	df000404 	addi	fp,sp,16
   165f0:	e13ffd15 	stw	r4,-12(fp)
   165f4:	e17ffe15 	stw	r5,-8(fp)
   165f8:	e1bfff15 	stw	r6,-4(fp)
	// boundary check
	if (x_pos > 39 || y_pos > 1 )
   165fc:	e0bffe17 	ldw	r2,-8(fp)
   16600:	10800a28 	cmpgeui	r2,r2,40
   16604:	1000031e 	bne	r2,zero,16614 <alt_up_character_lcd_erase_pos+0x34>
   16608:	e0bfff17 	ldw	r2,-4(fp)
   1660c:	108000b0 	cmpltui	r2,r2,2
   16610:	1000021e 	bne	r2,zero,1661c <alt_up_character_lcd_erase_pos+0x3c>
		return -1;
   16614:	00bfffc4 	movi	r2,-1
   16618:	00000f06 	br	16658 <alt_up_character_lcd_erase_pos+0x78>

	// get address
	unsigned char addr = get_DDRAM_addr(x_pos, y_pos);
   1661c:	e13ffe17 	ldw	r4,-8(fp)
   16620:	e17fff17 	ldw	r5,-4(fp)
   16624:	00161fc0 	call	161fc <get_DDRAM_addr>
   16628:	e0bffc05 	stb	r2,-16(fp)
	// set cursor to dest point
	alt_up_character_lcd_send_cmd(lcd, addr);
   1662c:	e0bffc03 	ldbu	r2,-16(fp)
   16630:	e13ffd17 	ldw	r4,-12(fp)
   16634:	100b883a 	mov	r5,r2
   16638:	00162700 	call	16270 <alt_up_character_lcd_send_cmd>
	//send an empty char as erase (refer to the Character Generator ROM part of the Datasheet)
	IOWR_ALT_UP_CHARACTER_LCD_DATA(lcd->base, (0x00000002) );
   1663c:	e0bffd17 	ldw	r2,-12(fp)
   16640:	10800a17 	ldw	r2,40(r2)
   16644:	10800044 	addi	r2,r2,1
   16648:	1007883a 	mov	r3,r2
   1664c:	00800084 	movi	r2,2
   16650:	18800025 	stbio	r2,0(r3)
	return 0;
   16654:	0005883a 	mov	r2,zero
}
   16658:	e037883a 	mov	sp,fp
   1665c:	dfc00117 	ldw	ra,4(sp)
   16660:	df000017 	ldw	fp,0(sp)
   16664:	dec00204 	addi	sp,sp,8
   16668:	f800283a 	ret

0001666c <alt_up_character_lcd_cursor_off>:

void alt_up_character_lcd_cursor_off(alt_up_character_lcd_dev *lcd)
{
   1666c:	defffd04 	addi	sp,sp,-12
   16670:	dfc00215 	stw	ra,8(sp)
   16674:	df000115 	stw	fp,4(sp)
   16678:	df000104 	addi	fp,sp,4
   1667c:	e13fff15 	stw	r4,-4(fp)
	alt_up_character_lcd_send_cmd(lcd, ALT_UP_CHARACTER_LCD_COMM_CURSOR_OFF);
   16680:	e13fff17 	ldw	r4,-4(fp)
   16684:	01400304 	movi	r5,12
   16688:	00162700 	call	16270 <alt_up_character_lcd_send_cmd>
}
   1668c:	e037883a 	mov	sp,fp
   16690:	dfc00117 	ldw	ra,4(sp)
   16694:	df000017 	ldw	fp,0(sp)
   16698:	dec00204 	addi	sp,sp,8
   1669c:	f800283a 	ret

000166a0 <alt_up_character_lcd_cursor_blink_on>:

void alt_up_character_lcd_cursor_blink_on(alt_up_character_lcd_dev *lcd)
{
   166a0:	defffd04 	addi	sp,sp,-12
   166a4:	dfc00215 	stw	ra,8(sp)
   166a8:	df000115 	stw	fp,4(sp)
   166ac:	df000104 	addi	fp,sp,4
   166b0:	e13fff15 	stw	r4,-4(fp)
	alt_up_character_lcd_send_cmd(lcd, ALT_UP_CHARACTER_LCD_COMM_CURSOR_BLINK_ON);
   166b4:	e13fff17 	ldw	r4,-4(fp)
   166b8:	014003c4 	movi	r5,15
   166bc:	00162700 	call	16270 <alt_up_character_lcd_send_cmd>
}
   166c0:	e037883a 	mov	sp,fp
   166c4:	dfc00117 	ldw	ra,4(sp)
   166c8:	df000017 	ldw	fp,0(sp)
   166cc:	dec00204 	addi	sp,sp,8
   166d0:	f800283a 	ret

000166d4 <alt_up_irda_enable_read_interrupt>:
#include "altera_up_avalon_irda.h"
#include "altera_up_avalon_irda_regs.h"


void alt_up_irda_enable_read_interrupt(alt_up_irda_dev *irda)
{
   166d4:	defffd04 	addi	sp,sp,-12
   166d8:	df000215 	stw	fp,8(sp)
   166dc:	df000204 	addi	fp,sp,8
   166e0:	e13fff15 	stw	r4,-4(fp)
	alt_u32 ctrl_reg;
	ctrl_reg = IORD_ALT_UP_IRDA_CONTROL(irda->base); 
   166e4:	e0bfff17 	ldw	r2,-4(fp)
   166e8:	10800a17 	ldw	r2,40(r2)
   166ec:	10800104 	addi	r2,r2,4
   166f0:	10800037 	ldwio	r2,0(r2)
   166f4:	e0bffe15 	stw	r2,-8(fp)
	// set RE to 1 while maintaining other bits the same
	ctrl_reg |= ALT_UP_IRDA_CONTROL_RE_MSK;
   166f8:	e0bffe17 	ldw	r2,-8(fp)
   166fc:	10800054 	ori	r2,r2,1
   16700:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_IRDA_CONTROL(irda->base, ctrl_reg);
   16704:	e0bfff17 	ldw	r2,-4(fp)
   16708:	10800a17 	ldw	r2,40(r2)
   1670c:	10800104 	addi	r2,r2,4
   16710:	1007883a 	mov	r3,r2
   16714:	e0bffe17 	ldw	r2,-8(fp)
   16718:	18800035 	stwio	r2,0(r3)
}
   1671c:	e037883a 	mov	sp,fp
   16720:	df000017 	ldw	fp,0(sp)
   16724:	dec00104 	addi	sp,sp,4
   16728:	f800283a 	ret

0001672c <alt_up_irda_disable_read_interrupt>:

void alt_up_irda_disable_read_interrupt(alt_up_irda_dev *irda)
{
   1672c:	defffd04 	addi	sp,sp,-12
   16730:	df000215 	stw	fp,8(sp)
   16734:	df000204 	addi	fp,sp,8
   16738:	e13fff15 	stw	r4,-4(fp)
	alt_u32 ctrl_reg;
	ctrl_reg = IORD_ALT_UP_IRDA_CONTROL(irda->base); 
   1673c:	e0bfff17 	ldw	r2,-4(fp)
   16740:	10800a17 	ldw	r2,40(r2)
   16744:	10800104 	addi	r2,r2,4
   16748:	10800037 	ldwio	r2,0(r2)
   1674c:	e0bffe15 	stw	r2,-8(fp)
	// set RE to 0 while maintaining other bits the same
	ctrl_reg &= ~ALT_UP_IRDA_CONTROL_RE_MSK;
   16750:	e0fffe17 	ldw	r3,-8(fp)
   16754:	00bfff84 	movi	r2,-2
   16758:	1884703a 	and	r2,r3,r2
   1675c:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_IRDA_CONTROL(irda->base, ctrl_reg);
   16760:	e0bfff17 	ldw	r2,-4(fp)
   16764:	10800a17 	ldw	r2,40(r2)
   16768:	10800104 	addi	r2,r2,4
   1676c:	1007883a 	mov	r3,r2
   16770:	e0bffe17 	ldw	r2,-8(fp)
   16774:	18800035 	stwio	r2,0(r3)
}
   16778:	e037883a 	mov	sp,fp
   1677c:	df000017 	ldw	fp,0(sp)
   16780:	dec00104 	addi	sp,sp,4
   16784:	f800283a 	ret

00016788 <alt_up_irda_get_used_space_in_read_FIFO>:

unsigned alt_up_irda_get_used_space_in_read_FIFO(alt_up_irda_dev *irda)
{
   16788:	defffd04 	addi	sp,sp,-12
   1678c:	df000215 	stw	fp,8(sp)
   16790:	df000204 	addi	fp,sp,8
   16794:	e13fff15 	stw	r4,-4(fp)
	alt_u16 ravail = 0;
   16798:	e03ffe0d 	sth	zero,-8(fp)
	// we can only read the 16 bits for RAVAIL --- a read of DATA will discard the data
//	ravail = IORD_16DIRECT(IOADDR_ALT_UP_IRDA_DATA(irda->base), 2); 
//	return ravail;
	ravail = IORD_ALT_UP_IRDA_RAVAIL(irda->base); 
   1679c:	e0bfff17 	ldw	r2,-4(fp)
   167a0:	10800a17 	ldw	r2,40(r2)
   167a4:	10800084 	addi	r2,r2,2
   167a8:	1080002b 	ldhuio	r2,0(r2)
   167ac:	10bfffcc 	andi	r2,r2,65535
   167b0:	e0bffe0d 	sth	r2,-8(fp)
	return (ravail & ALT_UP_IRDA_RAVAIL_MSK) >> ALT_UP_IRDA_RAVAIL_OFST;
   167b4:	e0bffe0b 	ldhu	r2,-8(fp)
}
   167b8:	e037883a 	mov	sp,fp
   167bc:	df000017 	ldw	fp,0(sp)
   167c0:	dec00104 	addi	sp,sp,4
   167c4:	f800283a 	ret

000167c8 <alt_up_irda_get_available_space_in_write_FIFO>:

unsigned alt_up_irda_get_available_space_in_write_FIFO(alt_up_irda_dev *irda)
{
   167c8:	defffd04 	addi	sp,sp,-12
   167cc:	df000215 	stw	fp,8(sp)
   167d0:	df000204 	addi	fp,sp,8
   167d4:	e13fff15 	stw	r4,-4(fp)
	alt_u32 ctrl_reg;
	ctrl_reg = IORD_ALT_UP_IRDA_CONTROL(irda->base); 
   167d8:	e0bfff17 	ldw	r2,-4(fp)
   167dc:	10800a17 	ldw	r2,40(r2)
   167e0:	10800104 	addi	r2,r2,4
   167e4:	10800037 	ldwio	r2,0(r2)
   167e8:	e0bffe15 	stw	r2,-8(fp)
	return (ctrl_reg & ALT_UP_IRDA_CONTROL_WSPACE_MSK) >> ALT_UP_IRDA_CONTROL_WSPACE_OFST;
   167ec:	e0bffe17 	ldw	r2,-8(fp)
   167f0:	1004d43a 	srli	r2,r2,16
}
   167f4:	e037883a 	mov	sp,fp
   167f8:	df000017 	ldw	fp,0(sp)
   167fc:	dec00104 	addi	sp,sp,4
   16800:	f800283a 	ret

00016804 <alt_up_irda_check_parity>:

int alt_up_irda_check_parity(alt_u32 data_reg)
{
   16804:	defffd04 	addi	sp,sp,-12
   16808:	df000215 	stw	fp,8(sp)
   1680c:	df000204 	addi	fp,sp,8
   16810:	e13fff15 	stw	r4,-4(fp)
	unsigned parity_error = (data_reg & ALT_UP_IRDA_DATA_PE_MSK) >> ALT_UP_IRDA_DATA_PE_OFST;
   16814:	e0bfff17 	ldw	r2,-4(fp)
   16818:	1080800c 	andi	r2,r2,512
   1681c:	1004d27a 	srli	r2,r2,9
   16820:	e0bffe15 	stw	r2,-8(fp)
	return (parity_error ? -1 : 0);
   16824:	e0bffe17 	ldw	r2,-8(fp)
   16828:	10000226 	beq	r2,zero,16834 <alt_up_irda_check_parity+0x30>
   1682c:	00bfffc4 	movi	r2,-1
   16830:	00000106 	br	16838 <alt_up_irda_check_parity+0x34>
   16834:	0005883a 	mov	r2,zero
}
   16838:	e037883a 	mov	sp,fp
   1683c:	df000017 	ldw	fp,0(sp)
   16840:	dec00104 	addi	sp,sp,4
   16844:	f800283a 	ret

00016848 <alt_up_irda_write_data>:

int alt_up_irda_write_data(alt_up_irda_dev *irda, alt_u8 data)
{
   16848:	defffd04 	addi	sp,sp,-12
   1684c:	df000215 	stw	fp,8(sp)
   16850:	df000204 	addi	fp,sp,8
   16854:	e13ffe15 	stw	r4,-8(fp)
   16858:	2805883a 	mov	r2,r5
   1685c:	e0bfff05 	stb	r2,-4(fp)
	data_reg = IORD_ALT_UP_IRDA_DATA(irda->base);
    */

	// we can write directly without thinking about other bit fields for this
	// case ONLY, because only DATA field of the data register is writable
	IOWR_ALT_UP_IRDA_DATA(irda->base, (data>>ALT_UP_IRDA_DATA_DATA_OFST) & ALT_UP_IRDA_DATA_DATA_MSK);
   16860:	e0bffe17 	ldw	r2,-8(fp)
   16864:	10800a17 	ldw	r2,40(r2)
   16868:	1007883a 	mov	r3,r2
   1686c:	e0bfff03 	ldbu	r2,-4(fp)
   16870:	18800035 	stwio	r2,0(r3)
	return 0;
   16874:	0005883a 	mov	r2,zero
}
   16878:	e037883a 	mov	sp,fp
   1687c:	df000017 	ldw	fp,0(sp)
   16880:	dec00104 	addi	sp,sp,4
   16884:	f800283a 	ret

00016888 <alt_up_irda_read_data>:

int alt_up_irda_read_data(alt_up_irda_dev *irda, alt_u8 *data, alt_u8 *parity_error)
{
   16888:	defffa04 	addi	sp,sp,-24
   1688c:	dfc00515 	stw	ra,20(sp)
   16890:	df000415 	stw	fp,16(sp)
   16894:	df000404 	addi	fp,sp,16
   16898:	e13ffd15 	stw	r4,-12(fp)
   1689c:	e17ffe15 	stw	r5,-8(fp)
   168a0:	e1bfff15 	stw	r6,-4(fp)
	alt_u32 data_reg;
	data_reg = IORD_ALT_UP_IRDA_DATA(irda->base);
   168a4:	e0bffd17 	ldw	r2,-12(fp)
   168a8:	10800a17 	ldw	r2,40(r2)
   168ac:	10800037 	ldwio	r2,0(r2)
   168b0:	e0bffc15 	stw	r2,-16(fp)
	*data = (data_reg & ALT_UP_IRDA_DATA_DATA_MSK) >> ALT_UP_IRDA_DATA_DATA_OFST;
   168b4:	e0bffc17 	ldw	r2,-16(fp)
   168b8:	1007883a 	mov	r3,r2
   168bc:	e0bffe17 	ldw	r2,-8(fp)
   168c0:	10c00005 	stb	r3,0(r2)
	*parity_error = alt_up_irda_check_parity(data_reg);
   168c4:	e13ffc17 	ldw	r4,-16(fp)
   168c8:	00168040 	call	16804 <alt_up_irda_check_parity>
   168cc:	1007883a 	mov	r3,r2
   168d0:	e0bfff17 	ldw	r2,-4(fp)
   168d4:	10c00005 	stb	r3,0(r2)
	return (((data_reg & ALT_UP_IRDA_DATA_RVALID_MSK) >> ALT_UP_IRDA_DATA_RVALID_OFST) - 1);
   168d8:	e0bffc17 	ldw	r2,-16(fp)
   168dc:	10a0000c 	andi	r2,r2,32768
   168e0:	1004d3fa 	srli	r2,r2,15
   168e4:	10bfffc4 	addi	r2,r2,-1
}
   168e8:	e037883a 	mov	sp,fp
   168ec:	dfc00117 	ldw	ra,4(sp)
   168f0:	df000017 	ldw	fp,0(sp)
   168f4:	dec00204 	addi	sp,sp,8
   168f8:	f800283a 	ret

000168fc <alt_up_irda_read_fd>:

int alt_up_irda_read_fd (alt_fd* fd, char* ptr, int len)
{
   168fc:	defff804 	addi	sp,sp,-32
   16900:	dfc00715 	stw	ra,28(sp)
   16904:	df000615 	stw	fp,24(sp)
   16908:	df000604 	addi	fp,sp,24
   1690c:	e13ffd15 	stw	r4,-12(fp)
   16910:	e17ffe15 	stw	r5,-8(fp)
   16914:	e1bfff15 	stw	r6,-4(fp)
	alt_up_irda_dev *irda = (alt_up_irda_dev*)fd->dev;
   16918:	e0bffd17 	ldw	r2,-12(fp)
   1691c:	10800017 	ldw	r2,0(r2)
   16920:	e0bffb15 	stw	r2,-20(fp)
	int count = 0;
   16924:	e03ffa15 	stw	zero,-24(fp)
	alt_u8 parity_error;
	while(len--)
   16928:	00000e06 	br	16964 <alt_up_irda_read_fd+0x68>
	{
		if (alt_up_irda_read_data(irda, (alt_u8 *)ptr++, &parity_error)==0)
   1692c:	e0bffe17 	ldw	r2,-8(fp)
   16930:	10c00044 	addi	r3,r2,1
   16934:	e0fffe15 	stw	r3,-8(fp)
   16938:	e0fffc04 	addi	r3,fp,-16
   1693c:	e13ffb17 	ldw	r4,-20(fp)
   16940:	100b883a 	mov	r5,r2
   16944:	180d883a 	mov	r6,r3
   16948:	00168880 	call	16888 <alt_up_irda_read_data>
   1694c:	1000041e 	bne	r2,zero,16960 <alt_up_irda_read_fd+0x64>
			count++;
   16950:	e0bffa17 	ldw	r2,-24(fp)
   16954:	10800044 	addi	r2,r2,1
   16958:	e0bffa15 	stw	r2,-24(fp)
   1695c:	00000106 	br	16964 <alt_up_irda_read_fd+0x68>
		else
			break;
   16960:	00000406 	br	16974 <alt_up_irda_read_fd+0x78>
int alt_up_irda_read_fd (alt_fd* fd, char* ptr, int len)
{
	alt_up_irda_dev *irda = (alt_up_irda_dev*)fd->dev;
	int count = 0;
	alt_u8 parity_error;
	while(len--)
   16964:	e0bfff17 	ldw	r2,-4(fp)
   16968:	10ffffc4 	addi	r3,r2,-1
   1696c:	e0ffff15 	stw	r3,-4(fp)
   16970:	103fee1e 	bne	r2,zero,1692c <__alt_mem_Flash_flash_data+0xf401692c>
		if (alt_up_irda_read_data(irda, (alt_u8 *)ptr++, &parity_error)==0)
			count++;
		else
			break;
	}
	return count;
   16974:	e0bffa17 	ldw	r2,-24(fp)
}
   16978:	e037883a 	mov	sp,fp
   1697c:	dfc00117 	ldw	ra,4(sp)
   16980:	df000017 	ldw	fp,0(sp)
   16984:	dec00204 	addi	sp,sp,8
   16988:	f800283a 	ret

0001698c <alt_up_irda_write_fd>:

int alt_up_irda_write_fd (alt_fd* fd, const char* ptr, int len)
{
   1698c:	defff904 	addi	sp,sp,-28
   16990:	dfc00615 	stw	ra,24(sp)
   16994:	df000515 	stw	fp,20(sp)
   16998:	df000504 	addi	fp,sp,20
   1699c:	e13ffd15 	stw	r4,-12(fp)
   169a0:	e17ffe15 	stw	r5,-8(fp)
   169a4:	e1bfff15 	stw	r6,-4(fp)
	alt_up_irda_dev *irda = (alt_up_irda_dev*)fd->dev;
   169a8:	e0bffd17 	ldw	r2,-12(fp)
   169ac:	10800017 	ldw	r2,0(r2)
   169b0:	e0bffc15 	stw	r2,-16(fp)
	int count = 0;
   169b4:	e03ffb15 	stw	zero,-20(fp)
	while(len--)
   169b8:	00000e06 	br	169f4 <alt_up_irda_write_fd+0x68>
	{
		if (alt_up_irda_write_data(irda, (alt_u8) *ptr++)==0)
   169bc:	e0bffe17 	ldw	r2,-8(fp)
   169c0:	10c00044 	addi	r3,r2,1
   169c4:	e0fffe15 	stw	r3,-8(fp)
   169c8:	10800003 	ldbu	r2,0(r2)
   169cc:	10803fcc 	andi	r2,r2,255
   169d0:	e13ffc17 	ldw	r4,-16(fp)
   169d4:	100b883a 	mov	r5,r2
   169d8:	00168480 	call	16848 <alt_up_irda_write_data>
   169dc:	1000041e 	bne	r2,zero,169f0 <alt_up_irda_write_fd+0x64>
			count++;
   169e0:	e0bffb17 	ldw	r2,-20(fp)
   169e4:	10800044 	addi	r2,r2,1
   169e8:	e0bffb15 	stw	r2,-20(fp)
   169ec:	00000106 	br	169f4 <alt_up_irda_write_fd+0x68>
		else
			break;
   169f0:	00000406 	br	16a04 <alt_up_irda_write_fd+0x78>

int alt_up_irda_write_fd (alt_fd* fd, const char* ptr, int len)
{
	alt_up_irda_dev *irda = (alt_up_irda_dev*)fd->dev;
	int count = 0;
	while(len--)
   169f4:	e0bfff17 	ldw	r2,-4(fp)
   169f8:	10ffffc4 	addi	r3,r2,-1
   169fc:	e0ffff15 	stw	r3,-4(fp)
   16a00:	103fee1e 	bne	r2,zero,169bc <__alt_mem_Flash_flash_data+0xf40169bc>
		if (alt_up_irda_write_data(irda, (alt_u8) *ptr++)==0)
			count++;
		else
			break;
	}
	return count;
   16a04:	e0bffb17 	ldw	r2,-20(fp)
}
   16a08:	e037883a 	mov	sp,fp
   16a0c:	dfc00117 	ldw	ra,4(sp)
   16a10:	df000017 	ldw	fp,0(sp)
   16a14:	dec00204 	addi	sp,sp,8
   16a18:	f800283a 	ret

00016a1c <alt_up_irda_open_dev>:

alt_up_irda_dev* alt_up_irda_open_dev(const char* name)
{
   16a1c:	defffc04 	addi	sp,sp,-16
   16a20:	dfc00315 	stw	ra,12(sp)
   16a24:	df000215 	stw	fp,8(sp)
   16a28:	df000204 	addi	fp,sp,8
   16a2c:	e13fff15 	stw	r4,-4(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_irda_dev *dev = (alt_up_irda_dev*)alt_find_dev(name, &alt_dev_list);
   16a30:	e13fff17 	ldw	r4,-4(fp)
   16a34:	014000b4 	movhi	r5,2
   16a38:	296c7b04 	addi	r5,r5,-19988
   16a3c:	0017acc0 	call	17acc <alt_find_dev>
   16a40:	e0bffe15 	stw	r2,-8(fp)

  return dev;
   16a44:	e0bffe17 	ldw	r2,-8(fp)
}
   16a48:	e037883a 	mov	sp,fp
   16a4c:	dfc00117 	ldw	ra,4(sp)
   16a50:	df000017 	ldw	fp,0(sp)
   16a54:	dec00204 	addi	sp,sp,8
   16a58:	f800283a 	ret

00016a5c <alt_up_parallel_port_open_dev>:

#include "altera_up_avalon_parallel_port.h"
#include "altera_up_avalon_parallel_port_regs.h"

alt_up_parallel_port_dev* alt_up_parallel_port_open_dev(const char* name)
{
   16a5c:	defffc04 	addi	sp,sp,-16
   16a60:	dfc00315 	stw	ra,12(sp)
   16a64:	df000215 	stw	fp,8(sp)
   16a68:	df000204 	addi	fp,sp,8
   16a6c:	e13fff15 	stw	r4,-4(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_parallel_port_dev *dev = (alt_up_parallel_port_dev*)alt_find_dev(name, &alt_dev_list);
   16a70:	e13fff17 	ldw	r4,-4(fp)
   16a74:	014000b4 	movhi	r5,2
   16a78:	296c7b04 	addi	r5,r5,-19988
   16a7c:	0017acc0 	call	17acc <alt_find_dev>
   16a80:	e0bffe15 	stw	r2,-8(fp)

  return dev;
   16a84:	e0bffe17 	ldw	r2,-8(fp)
}
   16a88:	e037883a 	mov	sp,fp
   16a8c:	dfc00117 	ldw	ra,4(sp)
   16a90:	df000017 	ldw	fp,0(sp)
   16a94:	dec00204 	addi	sp,sp,8
   16a98:	f800283a 	ret

00016a9c <read_RI_bit>:


//////////////////////////////////////////////////////////////////////////////////////////////
// Internal Functions
alt_u8 read_RI_bit(alt_u32 ctrl_reg)
{
   16a9c:	defffd04 	addi	sp,sp,-12
   16aa0:	df000215 	stw	fp,8(sp)
   16aa4:	df000204 	addi	fp,sp,8
   16aa8:	e13fff15 	stw	r4,-4(fp)
	alt_u8 ri = (alt_u8) ((ctrl_reg & ALT_UP_PS2_PORT_CTRL_REG_RI_MSK) >> ALT_UP_PS2_PORT_CTRL_REG_RI_OFST);
   16aac:	e0bfff17 	ldw	r2,-4(fp)
   16ab0:	1080400c 	andi	r2,r2,256
   16ab4:	1004d23a 	srli	r2,r2,8
   16ab8:	e0bffe05 	stb	r2,-8(fp)
	return ri;
   16abc:	e0bffe03 	ldbu	r2,-8(fp)
}
   16ac0:	e037883a 	mov	sp,fp
   16ac4:	df000017 	ldw	fp,0(sp)
   16ac8:	dec00104 	addi	sp,sp,4
   16acc:	f800283a 	ret

00016ad0 <read_RE_bit>:

alt_u8 read_RE_bit(alt_u32 ctrl_reg)
{
   16ad0:	defffd04 	addi	sp,sp,-12
   16ad4:	df000215 	stw	fp,8(sp)
   16ad8:	df000204 	addi	fp,sp,8
   16adc:	e13fff15 	stw	r4,-4(fp)
	alt_u8 re = (alt_u8) ((ctrl_reg & ALT_UP_PS2_PORT_CTRL_REG_RE_MSK) >> ALT_UP_PS2_PORT_CTRL_REG_RE_OFST);
   16ae0:	e0bfff17 	ldw	r2,-4(fp)
   16ae4:	1080004c 	andi	r2,r2,1
   16ae8:	e0bffe05 	stb	r2,-8(fp)
	return re;
   16aec:	e0bffe03 	ldbu	r2,-8(fp)
}
   16af0:	e037883a 	mov	sp,fp
   16af4:	df000017 	ldw	fp,0(sp)
   16af8:	dec00104 	addi	sp,sp,4
   16afc:	f800283a 	ret

00016b00 <read_CE_bit>:

alt_u8 read_CE_bit(alt_u32 ctrl_reg)
{
   16b00:	defffd04 	addi	sp,sp,-12
   16b04:	df000215 	stw	fp,8(sp)
   16b08:	df000204 	addi	fp,sp,8
   16b0c:	e13fff15 	stw	r4,-4(fp)
	alt_u8 re = (alt_u8) ((ctrl_reg & ALT_UP_PS2_PORT_CTRL_REG_CE_MSK) >> ALT_UP_PS2_PORT_CTRL_REG_CE_OFST);
   16b10:	e0bfff17 	ldw	r2,-4(fp)
   16b14:	1081000c 	andi	r2,r2,1024
   16b18:	1004d2ba 	srli	r2,r2,10
   16b1c:	e0bffe05 	stb	r2,-8(fp)
	return re;
   16b20:	e0bffe03 	ldbu	r2,-8(fp)
}
   16b24:	e037883a 	mov	sp,fp
   16b28:	df000017 	ldw	fp,0(sp)
   16b2c:	dec00104 	addi	sp,sp,4
   16b30:	f800283a 	ret

00016b34 <read_num_bytes_available>:

alt_u16 read_num_bytes_available(alt_u32 data_reg)
{
   16b34:	defffd04 	addi	sp,sp,-12
   16b38:	df000215 	stw	fp,8(sp)
   16b3c:	df000204 	addi	fp,sp,8
   16b40:	e13fff15 	stw	r4,-4(fp)
	alt_u16 ravail = (alt_u16)((data_reg & ALT_UP_PS2_PORT_DATA_REG_RAVAIL_MSK ) >> ALT_UP_PS2_PORT_DATA_REG_RAVAIL_OFST);
   16b44:	e0bfff17 	ldw	r2,-4(fp)
   16b48:	1004d43a 	srli	r2,r2,16
   16b4c:	e0bffe0d 	sth	r2,-8(fp)
	return ravail;
   16b50:	e0bffe0b 	ldhu	r2,-8(fp)
}
   16b54:	e037883a 	mov	sp,fp
   16b58:	df000017 	ldw	fp,0(sp)
   16b5c:	dec00104 	addi	sp,sp,4
   16b60:	f800283a 	ret

00016b64 <read_data_valid>:

alt_u8 read_data_valid(alt_u32 data_reg)
{
   16b64:	defffd04 	addi	sp,sp,-12
   16b68:	df000215 	stw	fp,8(sp)
   16b6c:	df000204 	addi	fp,sp,8
   16b70:	e13fff15 	stw	r4,-4(fp)
	alt_u8 rvalid = (alt_u8)((data_reg & ALT_UP_PS2_PORT_DATA_REG_RVALID_MSK ) >> ALT_UP_PS2_PORT_DATA_REG_RVALID_OFST);
   16b74:	e0bfff17 	ldw	r2,-4(fp)
   16b78:	10a0000c 	andi	r2,r2,32768
   16b7c:	1004d3fa 	srli	r2,r2,15
   16b80:	e0bffe05 	stb	r2,-8(fp)
	return rvalid;
   16b84:	e0bffe03 	ldbu	r2,-8(fp)
}
   16b88:	e037883a 	mov	sp,fp
   16b8c:	df000017 	ldw	fp,0(sp)
   16b90:	dec00104 	addi	sp,sp,4
   16b94:	f800283a 	ret

00016b98 <read_data_byte>:

alt_u8 read_data_byte(alt_u32 data_reg)
{
   16b98:	defffd04 	addi	sp,sp,-12
   16b9c:	df000215 	stw	fp,8(sp)
   16ba0:	df000204 	addi	fp,sp,8
   16ba4:	e13fff15 	stw	r4,-4(fp)
	alt_u8 data = (alt_u8) ( (data_reg & ALT_UP_PS2_PORT_DATA_REG_DATA_MSK) >> ALT_UP_PS2_PORT_DATA_REG_DATA_OFST) ;
   16ba8:	e0bfff17 	ldw	r2,-4(fp)
   16bac:	e0bffe05 	stb	r2,-8(fp)
	return data;
   16bb0:	e0bffe03 	ldbu	r2,-8(fp)
}
   16bb4:	e037883a 	mov	sp,fp
   16bb8:	df000017 	ldw	fp,0(sp)
   16bbc:	dec00104 	addi	sp,sp,4
   16bc0:	f800283a 	ret

00016bc4 <alt_up_ps2_init>:

//////////////////////////////////////////////////////////////////////////////////////////////
// HAL Functions
void alt_up_ps2_init(alt_up_ps2_dev *ps2)
{
   16bc4:	defffb04 	addi	sp,sp,-20
   16bc8:	dfc00415 	stw	ra,16(sp)
   16bcc:	df000315 	stw	fp,12(sp)
   16bd0:	df000304 	addi	fp,sp,12
   16bd4:	e13fff15 	stw	r4,-4(fp)
	// initialize the device
	unsigned char byte;
	//send the reset request, wait for ACK
	int status = alt_up_ps2_write_data_byte_with_ack(ps2, 0xff);
   16bd8:	e13fff17 	ldw	r4,-4(fp)
   16bdc:	01403fc4 	movi	r5,255
   16be0:	0016e200 	call	16e20 <alt_up_ps2_write_data_byte_with_ack>
   16be4:	e0bffd15 	stw	r2,-12(fp)
	if (status == 0)
   16be8:	e0bffd17 	ldw	r2,-12(fp)
   16bec:	1000211e 	bne	r2,zero,16c74 <alt_up_ps2_init+0xb0>
	{
		// reset succeed, now try to get the BAT result, AA means passed
		status = alt_up_ps2_read_data_byte_timeout(ps2, &byte);
   16bf0:	e0bffe04 	addi	r2,fp,-8
   16bf4:	e13fff17 	ldw	r4,-4(fp)
   16bf8:	100b883a 	mov	r5,r2
   16bfc:	0016e840 	call	16e84 <alt_up_ps2_read_data_byte_timeout>
   16c00:	e0bffd15 	stw	r2,-12(fp)
		if (status == 0 && byte == 0xAA)
   16c04:	e0bffd17 	ldw	r2,-12(fp)
   16c08:	10001a1e 	bne	r2,zero,16c74 <alt_up_ps2_init+0xb0>
   16c0c:	e0bffe03 	ldbu	r2,-8(fp)
   16c10:	10803fcc 	andi	r2,r2,255
   16c14:	10802a98 	cmpnei	r2,r2,170
   16c18:	1000161e 	bne	r2,zero,16c74 <alt_up_ps2_init+0xb0>
		{
			//get the 2nd byte
			status = alt_up_ps2_read_data_byte_timeout(ps2, &byte);
   16c1c:	e0bffe04 	addi	r2,fp,-8
   16c20:	e13fff17 	ldw	r4,-4(fp)
   16c24:	100b883a 	mov	r5,r2
   16c28:	0016e840 	call	16e84 <alt_up_ps2_read_data_byte_timeout>
   16c2c:	e0bffd15 	stw	r2,-12(fp)
			if (status == -ETIMEDOUT)
   16c30:	e0bffd17 	ldw	r2,-12(fp)
   16c34:	10bfe318 	cmpnei	r2,r2,-116
   16c38:	1000041e 	bne	r2,zero,16c4c <alt_up_ps2_init+0x88>
			{
				//for keyboard, only 2 bytes are sent(ACK, PASS/FAIL), so timeout
				ps2->device_type = PS2_KEYBOARD;
   16c3c:	e0bfff17 	ldw	r2,-4(fp)
   16c40:	00c00044 	movi	r3,1
   16c44:	10c00d15 	stw	r3,52(r2)
   16c48:	00000a06 	br	16c74 <alt_up_ps2_init+0xb0>
			}
			else if (status == 0 && byte == 0x00)
   16c4c:	e0bffd17 	ldw	r2,-12(fp)
   16c50:	1000081e 	bne	r2,zero,16c74 <alt_up_ps2_init+0xb0>
   16c54:	e0bffe03 	ldbu	r2,-8(fp)
   16c58:	10803fcc 	andi	r2,r2,255
   16c5c:	1000051e 	bne	r2,zero,16c74 <alt_up_ps2_init+0xb0>
			{
				//for mouse, it will sent out 0x00 after sending out ACK and PASS/FAIL.
				ps2->device_type = PS2_MOUSE;
   16c60:	e0bfff17 	ldw	r2,-4(fp)
   16c64:	10000d15 	stw	zero,52(r2)
				(void) alt_up_ps2_write_data_byte (ps2, 0xf4); // enable data from mouse
   16c68:	e13fff17 	ldw	r4,-4(fp)
   16c6c:	01403d04 	movi	r5,244
   16c70:	0016d3c0 	call	16d3c <alt_up_ps2_write_data_byte>
			}
		}
	}
}
   16c74:	e037883a 	mov	sp,fp
   16c78:	dfc00117 	ldw	ra,4(sp)
   16c7c:	df000017 	ldw	fp,0(sp)
   16c80:	dec00204 	addi	sp,sp,8
   16c84:	f800283a 	ret

00016c88 <alt_up_ps2_enable_read_interrupt>:

void alt_up_ps2_enable_read_interrupt(alt_up_ps2_dev *ps2)
{
   16c88:	defffd04 	addi	sp,sp,-12
   16c8c:	df000215 	stw	fp,8(sp)
   16c90:	df000204 	addi	fp,sp,8
   16c94:	e13fff15 	stw	r4,-4(fp)
	unsigned int ctrl_reg;
	ctrl_reg = IORD_ALT_UP_PS2_PORT_CTRL_REG(ps2->base); 
   16c98:	e0bfff17 	ldw	r2,-4(fp)
   16c9c:	10800a17 	ldw	r2,40(r2)
   16ca0:	10800104 	addi	r2,r2,4
   16ca4:	10800037 	ldwio	r2,0(r2)
   16ca8:	e0bffe15 	stw	r2,-8(fp)
	// set RE to 1 while maintaining other bits the same
	ctrl_reg |= ALT_UP_PS2_PORT_CTRL_REG_RE_MSK;
   16cac:	e0bffe17 	ldw	r2,-8(fp)
   16cb0:	10800054 	ori	r2,r2,1
   16cb4:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_PS2_PORT_CTRL_REG(ps2->base, ctrl_reg);
   16cb8:	e0bfff17 	ldw	r2,-4(fp)
   16cbc:	10800a17 	ldw	r2,40(r2)
   16cc0:	10800104 	addi	r2,r2,4
   16cc4:	1007883a 	mov	r3,r2
   16cc8:	e0bffe17 	ldw	r2,-8(fp)
   16ccc:	18800035 	stwio	r2,0(r3)
}
   16cd0:	e037883a 	mov	sp,fp
   16cd4:	df000017 	ldw	fp,0(sp)
   16cd8:	dec00104 	addi	sp,sp,4
   16cdc:	f800283a 	ret

00016ce0 <alt_up_ps2_disable_read_interrupt>:

void alt_up_ps2_disable_read_interrupt(alt_up_ps2_dev *ps2)
{
   16ce0:	defffd04 	addi	sp,sp,-12
   16ce4:	df000215 	stw	fp,8(sp)
   16ce8:	df000204 	addi	fp,sp,8
   16cec:	e13fff15 	stw	r4,-4(fp)
	unsigned int ctrl_reg;
	ctrl_reg = IORD_ALT_UP_PS2_PORT_CTRL_REG(ps2->base); 
   16cf0:	e0bfff17 	ldw	r2,-4(fp)
   16cf4:	10800a17 	ldw	r2,40(r2)
   16cf8:	10800104 	addi	r2,r2,4
   16cfc:	10800037 	ldwio	r2,0(r2)
   16d00:	e0bffe15 	stw	r2,-8(fp)
	// set RE to 0 while maintaining other bits the same
	ctrl_reg &= ~ALT_UP_PS2_PORT_CTRL_REG_RE_MSK;
   16d04:	e0fffe17 	ldw	r3,-8(fp)
   16d08:	00bfff84 	movi	r2,-2
   16d0c:	1884703a 	and	r2,r3,r2
   16d10:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_PS2_PORT_CTRL_REG(ps2->base, ctrl_reg);
   16d14:	e0bfff17 	ldw	r2,-4(fp)
   16d18:	10800a17 	ldw	r2,40(r2)
   16d1c:	10800104 	addi	r2,r2,4
   16d20:	1007883a 	mov	r3,r2
   16d24:	e0bffe17 	ldw	r2,-8(fp)
   16d28:	18800035 	stwio	r2,0(r3)
}
   16d2c:	e037883a 	mov	sp,fp
   16d30:	df000017 	ldw	fp,0(sp)
   16d34:	dec00104 	addi	sp,sp,4
   16d38:	f800283a 	ret

00016d3c <alt_up_ps2_write_data_byte>:

int alt_up_ps2_write_data_byte(alt_up_ps2_dev *ps2, unsigned char byte)
{
   16d3c:	defffb04 	addi	sp,sp,-20
   16d40:	dfc00415 	stw	ra,16(sp)
   16d44:	df000315 	stw	fp,12(sp)
   16d48:	df000304 	addi	fp,sp,12
   16d4c:	e13ffe15 	stw	r4,-8(fp)
   16d50:	2805883a 	mov	r2,r5
   16d54:	e0bfff05 	stb	r2,-4(fp)
	//note: data are only located at the lower 8 bits
	//note: the software send command to the PS2 peripheral through the data
	//		register rather than the control register
	IOWR_ALT_UP_PS2_PORT_DATA(ps2->base, byte);
   16d58:	e0bffe17 	ldw	r2,-8(fp)
   16d5c:	10800a17 	ldw	r2,40(r2)
   16d60:	1007883a 	mov	r3,r2
   16d64:	e0bfff03 	ldbu	r2,-4(fp)
   16d68:	18800025 	stbio	r2,0(r3)
	alt_u32 ctrl_reg = IORD_ALT_UP_PS2_PORT_CTRL_REG(ps2->base);
   16d6c:	e0bffe17 	ldw	r2,-8(fp)
   16d70:	10800a17 	ldw	r2,40(r2)
   16d74:	10800104 	addi	r2,r2,4
   16d78:	10800037 	ldwio	r2,0(r2)
   16d7c:	e0bffd15 	stw	r2,-12(fp)
	if (read_CE_bit(ctrl_reg))
   16d80:	e13ffd17 	ldw	r4,-12(fp)
   16d84:	0016b000 	call	16b00 <read_CE_bit>
   16d88:	10803fcc 	andi	r2,r2,255
   16d8c:	10000226 	beq	r2,zero,16d98 <alt_up_ps2_write_data_byte+0x5c>
	{
		//CE bit is set --> error occurs on sending commands
		return -EIO;
   16d90:	00bffec4 	movi	r2,-5
   16d94:	00000106 	br	16d9c <alt_up_ps2_write_data_byte+0x60>
	}
	return 0;
   16d98:	0005883a 	mov	r2,zero
}
   16d9c:	e037883a 	mov	sp,fp
   16da0:	dfc00117 	ldw	ra,4(sp)
   16da4:	df000017 	ldw	fp,0(sp)
   16da8:	dec00204 	addi	sp,sp,8
   16dac:	f800283a 	ret

00016db0 <alt_up_ps2_wait_for_ack>:

int alt_up_ps2_wait_for_ack(alt_up_ps2_dev *ps2)
{
   16db0:	defffc04 	addi	sp,sp,-16
   16db4:	dfc00315 	stw	ra,12(sp)
   16db8:	df000215 	stw	fp,8(sp)
   16dbc:	df000204 	addi	fp,sp,8
   16dc0:	e13fff15 	stw	r4,-4(fp)
	unsigned char data = 0;
   16dc4:	e03ffe45 	stb	zero,-7(fp)
	unsigned char status = 0;
   16dc8:	e03ffe05 	stb	zero,-8(fp)
	do
	{
		status = alt_up_ps2_read_data_byte_timeout(ps2, &data); 
   16dcc:	e0bffe44 	addi	r2,fp,-7
   16dd0:	e13fff17 	ldw	r4,-4(fp)
   16dd4:	100b883a 	mov	r5,r2
   16dd8:	0016e840 	call	16e84 <alt_up_ps2_read_data_byte_timeout>
   16ddc:	e0bffe05 	stb	r2,-8(fp)
		if ( status == 0)
   16de0:	e0bffe03 	ldbu	r2,-8(fp)
   16de4:	1000061e 	bne	r2,zero,16e00 <alt_up_ps2_wait_for_ack+0x50>
		{
			if (data == PS2_ACK)
   16de8:	e0bffe43 	ldbu	r2,-7(fp)
   16dec:	10803fcc 	andi	r2,r2,255
   16df0:	10803e98 	cmpnei	r2,r2,250
   16df4:	1000041e 	bne	r2,zero,16e08 <alt_up_ps2_wait_for_ack+0x58>
				return 0;
   16df8:	0005883a 	mov	r2,zero
   16dfc:	00000306 	br	16e0c <alt_up_ps2_wait_for_ack+0x5c>
		}
		else 
		{
			return status;
   16e00:	e0bffe03 	ldbu	r2,-8(fp)
   16e04:	00000106 	br	16e0c <alt_up_ps2_wait_for_ack+0x5c>
		}
	} while(1);
   16e08:	003ff006 	br	16dcc <__alt_mem_Flash_flash_data+0xf4016dcc>
	return -ETIMEDOUT;
}
   16e0c:	e037883a 	mov	sp,fp
   16e10:	dfc00117 	ldw	ra,4(sp)
   16e14:	df000017 	ldw	fp,0(sp)
   16e18:	dec00204 	addi	sp,sp,8
   16e1c:	f800283a 	ret

00016e20 <alt_up_ps2_write_data_byte_with_ack>:

int alt_up_ps2_write_data_byte_with_ack(alt_up_ps2_dev *ps2, unsigned char byte)
{
   16e20:	defffa04 	addi	sp,sp,-24
   16e24:	dfc00515 	stw	ra,20(sp)
   16e28:	df000415 	stw	fp,16(sp)
   16e2c:	df000404 	addi	fp,sp,16
   16e30:	e13ffe15 	stw	r4,-8(fp)
   16e34:	2805883a 	mov	r2,r5
   16e38:	e0bfff05 	stb	r2,-4(fp)
	int send_status = alt_up_ps2_write_data_byte(ps2, byte);
   16e3c:	e0bfff03 	ldbu	r2,-4(fp)
   16e40:	e13ffe17 	ldw	r4,-8(fp)
   16e44:	100b883a 	mov	r5,r2
   16e48:	0016d3c0 	call	16d3c <alt_up_ps2_write_data_byte>
   16e4c:	e0bffc15 	stw	r2,-16(fp)
	if ( send_status != 0)
   16e50:	e0bffc17 	ldw	r2,-16(fp)
   16e54:	10000226 	beq	r2,zero,16e60 <alt_up_ps2_write_data_byte_with_ack+0x40>
		// return on sending error
		return send_status;
   16e58:	e0bffc17 	ldw	r2,-16(fp)
   16e5c:	00000406 	br	16e70 <alt_up_ps2_write_data_byte_with_ack+0x50>

	int ack_status = alt_up_ps2_wait_for_ack(ps2);
   16e60:	e13ffe17 	ldw	r4,-8(fp)
   16e64:	0016db00 	call	16db0 <alt_up_ps2_wait_for_ack>
   16e68:	e0bffd15 	stw	r2,-12(fp)
	return ack_status;
   16e6c:	e0bffd17 	ldw	r2,-12(fp)
}
   16e70:	e037883a 	mov	sp,fp
   16e74:	dfc00117 	ldw	ra,4(sp)
   16e78:	df000017 	ldw	fp,0(sp)
   16e7c:	dec00204 	addi	sp,sp,8
   16e80:	f800283a 	ret

00016e84 <alt_up_ps2_read_data_byte_timeout>:

int alt_up_ps2_read_data_byte_timeout(alt_up_ps2_dev *ps2, unsigned char *byte)
{
   16e84:	defffa04 	addi	sp,sp,-24
   16e88:	dfc00515 	stw	ra,20(sp)
   16e8c:	df000415 	stw	fp,16(sp)
   16e90:	df000404 	addi	fp,sp,16
   16e94:	e13ffe15 	stw	r4,-8(fp)
   16e98:	e17fff15 	stw	r5,-4(fp)
	unsigned int data_reg = 0; 
   16e9c:	e03ffd15 	stw	zero,-12(fp)
	unsigned int count = 0;
   16ea0:	e03ffc15 	stw	zero,-16(fp)
	do {
		count++;
   16ea4:	e0bffc17 	ldw	r2,-16(fp)
   16ea8:	10800044 	addi	r2,r2,1
   16eac:	e0bffc15 	stw	r2,-16(fp)
		data_reg = IORD_ALT_UP_PS2_PORT_DATA_REG(ps2->base);
   16eb0:	e0bffe17 	ldw	r2,-8(fp)
   16eb4:	10800a17 	ldw	r2,40(r2)
   16eb8:	10800037 	ldwio	r2,0(r2)
   16ebc:	e0bffd15 	stw	r2,-12(fp)
		if (read_data_valid(data_reg))
   16ec0:	e13ffd17 	ldw	r4,-12(fp)
   16ec4:	0016b640 	call	16b64 <read_data_valid>
   16ec8:	10803fcc 	andi	r2,r2,255
   16ecc:	10000726 	beq	r2,zero,16eec <alt_up_ps2_read_data_byte_timeout+0x68>
		{
			*byte = read_data_byte(data_reg);
   16ed0:	e13ffd17 	ldw	r4,-12(fp)
   16ed4:	0016b980 	call	16b98 <read_data_byte>
   16ed8:	1007883a 	mov	r3,r2
   16edc:	e0bfff17 	ldw	r2,-4(fp)
   16ee0:	10c00005 	stb	r3,0(r2)
			return 0;
   16ee4:	0005883a 	mov	r2,zero
   16ee8:	00000a06 	br	16f14 <alt_up_ps2_read_data_byte_timeout+0x90>
		}
		//timeout = 0 means to disable the timeout
		if ( ps2->timeout != 0 && count > ps2->timeout)
   16eec:	e0bffe17 	ldw	r2,-8(fp)
   16ef0:	10800c17 	ldw	r2,48(r2)
   16ef4:	10000626 	beq	r2,zero,16f10 <alt_up_ps2_read_data_byte_timeout+0x8c>
   16ef8:	e0bffe17 	ldw	r2,-8(fp)
   16efc:	10c00c17 	ldw	r3,48(r2)
   16f00:	e0bffc17 	ldw	r2,-16(fp)
   16f04:	1880022e 	bgeu	r3,r2,16f10 <alt_up_ps2_read_data_byte_timeout+0x8c>
		{
			return -ETIMEDOUT;
   16f08:	00bfe304 	movi	r2,-116
   16f0c:	00000106 	br	16f14 <alt_up_ps2_read_data_byte_timeout+0x90>
		}
	} while (1);
   16f10:	003fe406 	br	16ea4 <__alt_mem_Flash_flash_data+0xf4016ea4>
}
   16f14:	e037883a 	mov	sp,fp
   16f18:	dfc00117 	ldw	ra,4(sp)
   16f1c:	df000017 	ldw	fp,0(sp)
   16f20:	dec00204 	addi	sp,sp,8
   16f24:	f800283a 	ret

00016f28 <alt_up_ps2_read_data_byte>:

int alt_up_ps2_read_data_byte(alt_up_ps2_dev *ps2, unsigned char *byte)
{
   16f28:	defffb04 	addi	sp,sp,-20
   16f2c:	dfc00415 	stw	ra,16(sp)
   16f30:	df000315 	stw	fp,12(sp)
   16f34:	df000304 	addi	fp,sp,12
   16f38:	e13ffe15 	stw	r4,-8(fp)
   16f3c:	e17fff15 	stw	r5,-4(fp)
	unsigned int data_reg = 0; 
   16f40:	e03ffd15 	stw	zero,-12(fp)
	data_reg = IORD_ALT_UP_PS2_PORT_DATA_REG(ps2->base);
   16f44:	e0bffe17 	ldw	r2,-8(fp)
   16f48:	10800a17 	ldw	r2,40(r2)
   16f4c:	10800037 	ldwio	r2,0(r2)
   16f50:	e0bffd15 	stw	r2,-12(fp)
	if (read_data_valid(data_reg))
   16f54:	e13ffd17 	ldw	r4,-12(fp)
   16f58:	0016b640 	call	16b64 <read_data_valid>
   16f5c:	10803fcc 	andi	r2,r2,255
   16f60:	10000726 	beq	r2,zero,16f80 <alt_up_ps2_read_data_byte+0x58>
	{
		*byte = read_data_byte(data_reg);
   16f64:	e13ffd17 	ldw	r4,-12(fp)
   16f68:	0016b980 	call	16b98 <read_data_byte>
   16f6c:	1007883a 	mov	r3,r2
   16f70:	e0bfff17 	ldw	r2,-4(fp)
   16f74:	10c00005 	stb	r3,0(r2)
		return 0;
   16f78:	0005883a 	mov	r2,zero
   16f7c:	00000106 	br	16f84 <alt_up_ps2_read_data_byte+0x5c>
	}
	return -1;
   16f80:	00bfffc4 	movi	r2,-1
}
   16f84:	e037883a 	mov	sp,fp
   16f88:	dfc00117 	ldw	ra,4(sp)
   16f8c:	df000017 	ldw	fp,0(sp)
   16f90:	dec00204 	addi	sp,sp,8
   16f94:	f800283a 	ret

00016f98 <alt_up_ps2_clear_fifo>:

void alt_up_ps2_clear_fifo(alt_up_ps2_dev *ps2)
{
   16f98:	defffb04 	addi	sp,sp,-20
   16f9c:	dfc00415 	stw	ra,16(sp)
   16fa0:	df000315 	stw	fp,12(sp)
   16fa4:	df000304 	addi	fp,sp,12
   16fa8:	e13fff15 	stw	r4,-4(fp)
	// The DATA byte of the data register will be automatically cleared after a read
	// So we simply keep reading it until there are no available bytes
	alt_u16 num = 0;
   16fac:	e03ffd0d 	sth	zero,-12(fp)
	unsigned int data_reg = 0;
   16fb0:	e03ffe15 	stw	zero,-8(fp)
	do
	{
		// read the data register (the DATA byte is cleared)
		data_reg = IORD_ALT_UP_PS2_PORT_DATA_REG(ps2->base);
   16fb4:	e0bfff17 	ldw	r2,-4(fp)
   16fb8:	10800a17 	ldw	r2,40(r2)
   16fbc:	10800037 	ldwio	r2,0(r2)
   16fc0:	e0bffe15 	stw	r2,-8(fp)
		// get the number of available bytes from the RAVAIL part of data register
		num = read_num_bytes_available(data_reg);
   16fc4:	e13ffe17 	ldw	r4,-8(fp)
   16fc8:	0016b340 	call	16b34 <read_num_bytes_available>
   16fcc:	e0bffd0d 	sth	r2,-12(fp)
	} while (num > 0);
   16fd0:	e0bffd0b 	ldhu	r2,-12(fp)
   16fd4:	103ff71e 	bne	r2,zero,16fb4 <__alt_mem_Flash_flash_data+0xf4016fb4>
}
   16fd8:	e037883a 	mov	sp,fp
   16fdc:	dfc00117 	ldw	ra,4(sp)
   16fe0:	df000017 	ldw	fp,0(sp)
   16fe4:	dec00204 	addi	sp,sp,8
   16fe8:	f800283a 	ret

00016fec <alt_up_ps2_read_fd>:

//////////////////////////////////////////////////////////////
// FD Functions
int alt_up_ps2_read_fd (alt_fd* fd, char* ptr, int len)
{
   16fec:	defff804 	addi	sp,sp,-32
   16ff0:	dfc00715 	stw	ra,28(sp)
   16ff4:	df000615 	stw	fp,24(sp)
   16ff8:	df000604 	addi	fp,sp,24
   16ffc:	e13ffd15 	stw	r4,-12(fp)
   17000:	e17ffe15 	stw	r5,-8(fp)
   17004:	e1bfff15 	stw	r6,-4(fp)
	alt_up_ps2_dev *ps2 = (alt_up_ps2_dev*) fd->dev;
   17008:	e0bffd17 	ldw	r2,-12(fp)
   1700c:	10800017 	ldw	r2,0(r2)
   17010:	e0bffa15 	stw	r2,-24(fp)
	int status = 0;
   17014:	e03ffb15 	stw	zero,-20(fp)
	int count = 0;
   17018:	e03ffc15 	stw	zero,-16(fp)
	while (count < len);
   1701c:	e0fffc17 	ldw	r3,-16(fp)
   17020:	e0bfff17 	ldw	r2,-4(fp)
   17024:	18bffd16 	blt	r3,r2,1701c <__alt_mem_Flash_flash_data+0xf401701c>
	{
		status = alt_up_ps2_read_data_byte_timeout(ps2, (unsigned char *)ptr++);
   17028:	e0bffe17 	ldw	r2,-8(fp)
   1702c:	10c00044 	addi	r3,r2,1
   17030:	e0fffe15 	stw	r3,-8(fp)
   17034:	e13ffa17 	ldw	r4,-24(fp)
   17038:	100b883a 	mov	r5,r2
   1703c:	0016e840 	call	16e84 <alt_up_ps2_read_data_byte_timeout>
   17040:	e0bffb15 	stw	r2,-20(fp)
		if (status!=0)
   17044:	e0bffb17 	ldw	r2,-20(fp)
   17048:	10000226 	beq	r2,zero,17054 <alt_up_ps2_read_fd+0x68>
			return count;
   1704c:	e0bffc17 	ldw	r2,-16(fp)
   17050:	00000406 	br	17064 <alt_up_ps2_read_fd+0x78>
		count++;
   17054:	e0bffc17 	ldw	r2,-16(fp)
   17058:	10800044 	addi	r2,r2,1
   1705c:	e0bffc15 	stw	r2,-16(fp)
	} 
	return count;
   17060:	e0bffc17 	ldw	r2,-16(fp)
}
   17064:	e037883a 	mov	sp,fp
   17068:	dfc00117 	ldw	ra,4(sp)
   1706c:	df000017 	ldw	fp,0(sp)
   17070:	dec00204 	addi	sp,sp,8
   17074:	f800283a 	ret

00017078 <alt_up_ps2_write_fd>:

int alt_up_ps2_write_fd (alt_fd* fd, const char* ptr, int len)
{
   17078:	defff804 	addi	sp,sp,-32
   1707c:	dfc00715 	stw	ra,28(sp)
   17080:	df000615 	stw	fp,24(sp)
   17084:	df000604 	addi	fp,sp,24
   17088:	e13ffd15 	stw	r4,-12(fp)
   1708c:	e17ffe15 	stw	r5,-8(fp)
   17090:	e1bfff15 	stw	r6,-4(fp)
	alt_up_ps2_dev *ps2 = (alt_up_ps2_dev*) fd->dev;
   17094:	e0bffd17 	ldw	r2,-12(fp)
   17098:	10800017 	ldw	r2,0(r2)
   1709c:	e0bffb15 	stw	r2,-20(fp)
	int status = 0;
   170a0:	e03ffc15 	stw	zero,-16(fp)
	int count = 0;
   170a4:	e03ffa15 	stw	zero,-24(fp)
	while (count < len)
   170a8:	00001006 	br	170ec <alt_up_ps2_write_fd+0x74>
	{
		status = alt_up_ps2_write_data_byte(ps2, *(ptr++) );
   170ac:	e0bffe17 	ldw	r2,-8(fp)
   170b0:	10c00044 	addi	r3,r2,1
   170b4:	e0fffe15 	stw	r3,-8(fp)
   170b8:	10800003 	ldbu	r2,0(r2)
   170bc:	10803fcc 	andi	r2,r2,255
   170c0:	e13ffb17 	ldw	r4,-20(fp)
   170c4:	100b883a 	mov	r5,r2
   170c8:	0016d3c0 	call	16d3c <alt_up_ps2_write_data_byte>
   170cc:	e0bffc15 	stw	r2,-16(fp)
		if (status!=0)
   170d0:	e0bffc17 	ldw	r2,-16(fp)
   170d4:	10000226 	beq	r2,zero,170e0 <alt_up_ps2_write_fd+0x68>
			return count;
   170d8:	e0bffa17 	ldw	r2,-24(fp)
   170dc:	00000706 	br	170fc <alt_up_ps2_write_fd+0x84>
		count++;
   170e0:	e0bffa17 	ldw	r2,-24(fp)
   170e4:	10800044 	addi	r2,r2,1
   170e8:	e0bffa15 	stw	r2,-24(fp)
int alt_up_ps2_write_fd (alt_fd* fd, const char* ptr, int len)
{
	alt_up_ps2_dev *ps2 = (alt_up_ps2_dev*) fd->dev;
	int status = 0;
	int count = 0;
	while (count < len)
   170ec:	e0fffa17 	ldw	r3,-24(fp)
   170f0:	e0bfff17 	ldw	r2,-4(fp)
   170f4:	18bfed16 	blt	r3,r2,170ac <__alt_mem_Flash_flash_data+0xf40170ac>
		status = alt_up_ps2_write_data_byte(ps2, *(ptr++) );
		if (status!=0)
			return count;
		count++;
	}
	return count;
   170f8:	e0bffa17 	ldw	r2,-24(fp)
}
   170fc:	e037883a 	mov	sp,fp
   17100:	dfc00117 	ldw	ra,4(sp)
   17104:	df000017 	ldw	fp,0(sp)
   17108:	dec00204 	addi	sp,sp,8
   1710c:	f800283a 	ret

00017110 <alt_up_ps2_open_dev>:

alt_up_ps2_dev* alt_up_ps2_open_dev(const char* name)
{
   17110:	defffc04 	addi	sp,sp,-16
   17114:	dfc00315 	stw	ra,12(sp)
   17118:	df000215 	stw	fp,8(sp)
   1711c:	df000204 	addi	fp,sp,8
   17120:	e13fff15 	stw	r4,-4(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_ps2_dev *dev = (alt_up_ps2_dev*)alt_find_dev(name, &alt_dev_list);
   17124:	e13fff17 	ldw	r4,-4(fp)
   17128:	014000b4 	movhi	r5,2
   1712c:	296c7b04 	addi	r5,r5,-19988
   17130:	0017acc0 	call	17acc <alt_find_dev>
   17134:	e0bffe15 	stw	r2,-8(fp)

  return dev;
   17138:	e0bffe17 	ldw	r2,-8(fp)
}
   1713c:	e037883a 	mov	sp,fp
   17140:	dfc00117 	ldw	ra,4(sp)
   17144:	df000017 	ldw	fp,0(sp)
   17148:	dec00204 	addi	sp,sp,8
   1714c:	f800283a 	ret

00017150 <alt_up_rs232_enable_read_interrupt>:
#include "altera_up_avalon_rs232.h"
#include "altera_up_avalon_rs232_regs.h"


void alt_up_rs232_enable_read_interrupt(alt_up_rs232_dev *rs232)
{
   17150:	defffd04 	addi	sp,sp,-12
   17154:	df000215 	stw	fp,8(sp)
   17158:	df000204 	addi	fp,sp,8
   1715c:	e13fff15 	stw	r4,-4(fp)
	alt_u32 ctrl_reg;
	ctrl_reg = IORD_ALT_UP_RS232_CONTROL(rs232->base); 
   17160:	e0bfff17 	ldw	r2,-4(fp)
   17164:	10800a17 	ldw	r2,40(r2)
   17168:	10800104 	addi	r2,r2,4
   1716c:	10800037 	ldwio	r2,0(r2)
   17170:	e0bffe15 	stw	r2,-8(fp)
	// set RE to 1 while maintaining other bits the same
	ctrl_reg |= ALT_UP_RS232_CONTROL_RE_MSK;
   17174:	e0bffe17 	ldw	r2,-8(fp)
   17178:	10800054 	ori	r2,r2,1
   1717c:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_RS232_CONTROL(rs232->base, ctrl_reg);
   17180:	e0bfff17 	ldw	r2,-4(fp)
   17184:	10800a17 	ldw	r2,40(r2)
   17188:	10800104 	addi	r2,r2,4
   1718c:	1007883a 	mov	r3,r2
   17190:	e0bffe17 	ldw	r2,-8(fp)
   17194:	18800035 	stwio	r2,0(r3)
}
   17198:	e037883a 	mov	sp,fp
   1719c:	df000017 	ldw	fp,0(sp)
   171a0:	dec00104 	addi	sp,sp,4
   171a4:	f800283a 	ret

000171a8 <alt_up_rs232_disable_read_interrupt>:

void alt_up_rs232_disable_read_interrupt(alt_up_rs232_dev *rs232)
{
   171a8:	defffd04 	addi	sp,sp,-12
   171ac:	df000215 	stw	fp,8(sp)
   171b0:	df000204 	addi	fp,sp,8
   171b4:	e13fff15 	stw	r4,-4(fp)
	alt_u32 ctrl_reg;
	ctrl_reg = IORD_ALT_UP_RS232_CONTROL(rs232->base); 
   171b8:	e0bfff17 	ldw	r2,-4(fp)
   171bc:	10800a17 	ldw	r2,40(r2)
   171c0:	10800104 	addi	r2,r2,4
   171c4:	10800037 	ldwio	r2,0(r2)
   171c8:	e0bffe15 	stw	r2,-8(fp)
	// set RE to 0 while maintaining other bits the same
	ctrl_reg &= ~ALT_UP_RS232_CONTROL_RE_MSK;
   171cc:	e0fffe17 	ldw	r3,-8(fp)
   171d0:	00bfff84 	movi	r2,-2
   171d4:	1884703a 	and	r2,r3,r2
   171d8:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_RS232_CONTROL(rs232->base, ctrl_reg);
   171dc:	e0bfff17 	ldw	r2,-4(fp)
   171e0:	10800a17 	ldw	r2,40(r2)
   171e4:	10800104 	addi	r2,r2,4
   171e8:	1007883a 	mov	r3,r2
   171ec:	e0bffe17 	ldw	r2,-8(fp)
   171f0:	18800035 	stwio	r2,0(r3)
}
   171f4:	e037883a 	mov	sp,fp
   171f8:	df000017 	ldw	fp,0(sp)
   171fc:	dec00104 	addi	sp,sp,4
   17200:	f800283a 	ret

00017204 <alt_up_rs232_get_used_space_in_read_FIFO>:

unsigned alt_up_rs232_get_used_space_in_read_FIFO(alt_up_rs232_dev *rs232)
{
   17204:	defffd04 	addi	sp,sp,-12
   17208:	df000215 	stw	fp,8(sp)
   1720c:	df000204 	addi	fp,sp,8
   17210:	e13fff15 	stw	r4,-4(fp)
	alt_u16 ravail = 0;
   17214:	e03ffe0d 	sth	zero,-8(fp)
	// we can only read the 16 bits for RAVAIL --- a read of DATA will discard the data
//	ravail = IORD_16DIRECT(IOADDR_ALT_UP_RS232_DATA(rs232->base), 2); 
	ravail = IORD_ALT_UP_RS232_RAVAIL(rs232->base); 
   17218:	e0bfff17 	ldw	r2,-4(fp)
   1721c:	10800a17 	ldw	r2,40(r2)
   17220:	10800084 	addi	r2,r2,2
   17224:	1080002b 	ldhuio	r2,0(r2)
   17228:	10bfffcc 	andi	r2,r2,65535
   1722c:	e0bffe0d 	sth	r2,-8(fp)
//	return ravail;
	return (ravail & ALT_UP_RS232_RAVAIL_MSK) >> ALT_UP_RS232_RAVAIL_OFST;
   17230:	e0bffe0b 	ldhu	r2,-8(fp)
}
   17234:	e037883a 	mov	sp,fp
   17238:	df000017 	ldw	fp,0(sp)
   1723c:	dec00104 	addi	sp,sp,4
   17240:	f800283a 	ret

00017244 <alt_up_rs232_get_available_space_in_write_FIFO>:

unsigned alt_up_rs232_get_available_space_in_write_FIFO(alt_up_rs232_dev *rs232)
{
   17244:	defffd04 	addi	sp,sp,-12
   17248:	df000215 	stw	fp,8(sp)
   1724c:	df000204 	addi	fp,sp,8
   17250:	e13fff15 	stw	r4,-4(fp)
	alt_u32 ctrl_reg;
	ctrl_reg = IORD_ALT_UP_RS232_CONTROL(rs232->base); 
   17254:	e0bfff17 	ldw	r2,-4(fp)
   17258:	10800a17 	ldw	r2,40(r2)
   1725c:	10800104 	addi	r2,r2,4
   17260:	10800037 	ldwio	r2,0(r2)
   17264:	e0bffe15 	stw	r2,-8(fp)
	return (ctrl_reg & ALT_UP_RS232_CONTROL_WSPACE_MSK) >> ALT_UP_RS232_CONTROL_WSPACE_OFST;
   17268:	e0bffe17 	ldw	r2,-8(fp)
   1726c:	1004d43a 	srli	r2,r2,16
}
   17270:	e037883a 	mov	sp,fp
   17274:	df000017 	ldw	fp,0(sp)
   17278:	dec00104 	addi	sp,sp,4
   1727c:	f800283a 	ret

00017280 <alt_up_rs232_check_parity>:

int alt_up_rs232_check_parity(alt_u32 data_reg)
{
   17280:	defffd04 	addi	sp,sp,-12
   17284:	df000215 	stw	fp,8(sp)
   17288:	df000204 	addi	fp,sp,8
   1728c:	e13fff15 	stw	r4,-4(fp)
	unsigned parity_error = (data_reg & ALT_UP_RS232_DATA_PE_MSK) >> ALT_UP_RS232_DATA_PE_OFST;
   17290:	e0bfff17 	ldw	r2,-4(fp)
   17294:	1080800c 	andi	r2,r2,512
   17298:	1004d27a 	srli	r2,r2,9
   1729c:	e0bffe15 	stw	r2,-8(fp)
	return (parity_error ? -1 : 0);
   172a0:	e0bffe17 	ldw	r2,-8(fp)
   172a4:	10000226 	beq	r2,zero,172b0 <alt_up_rs232_check_parity+0x30>
   172a8:	00bfffc4 	movi	r2,-1
   172ac:	00000106 	br	172b4 <alt_up_rs232_check_parity+0x34>
   172b0:	0005883a 	mov	r2,zero
}
   172b4:	e037883a 	mov	sp,fp
   172b8:	df000017 	ldw	fp,0(sp)
   172bc:	dec00104 	addi	sp,sp,4
   172c0:	f800283a 	ret

000172c4 <alt_up_rs232_write_data>:

int alt_up_rs232_write_data(alt_up_rs232_dev *rs232, alt_u8 data)
{
   172c4:	defffd04 	addi	sp,sp,-12
   172c8:	df000215 	stw	fp,8(sp)
   172cc:	df000204 	addi	fp,sp,8
   172d0:	e13ffe15 	stw	r4,-8(fp)
   172d4:	2805883a 	mov	r2,r5
   172d8:	e0bfff05 	stb	r2,-4(fp)
	/*alt_u32 data_reg;
	data_reg = IORD_ALT_UP_RS232_DATA(rs232->base);*/
    
	// we can write directly without thinking about other bit fields for this
	// case ONLY, because only DATA field of the data register is writable
	IOWR_ALT_UP_RS232_DATA(rs232->base, (data>>ALT_UP_RS232_DATA_DATA_OFST) & ALT_UP_RS232_DATA_DATA_MSK);
   172dc:	e0bffe17 	ldw	r2,-8(fp)
   172e0:	10800a17 	ldw	r2,40(r2)
   172e4:	1007883a 	mov	r3,r2
   172e8:	e0bfff03 	ldbu	r2,-4(fp)
   172ec:	18800035 	stwio	r2,0(r3)
	return 0;
   172f0:	0005883a 	mov	r2,zero
}
   172f4:	e037883a 	mov	sp,fp
   172f8:	df000017 	ldw	fp,0(sp)
   172fc:	dec00104 	addi	sp,sp,4
   17300:	f800283a 	ret

00017304 <alt_up_rs232_read_data>:

int alt_up_rs232_read_data(alt_up_rs232_dev *rs232, alt_u8 *data, alt_u8 *parity_error)
{
   17304:	defffa04 	addi	sp,sp,-24
   17308:	dfc00515 	stw	ra,20(sp)
   1730c:	df000415 	stw	fp,16(sp)
   17310:	df000404 	addi	fp,sp,16
   17314:	e13ffd15 	stw	r4,-12(fp)
   17318:	e17ffe15 	stw	r5,-8(fp)
   1731c:	e1bfff15 	stw	r6,-4(fp)
	alt_u32 data_reg;
	data_reg = IORD_ALT_UP_RS232_DATA(rs232->base);
   17320:	e0bffd17 	ldw	r2,-12(fp)
   17324:	10800a17 	ldw	r2,40(r2)
   17328:	10800037 	ldwio	r2,0(r2)
   1732c:	e0bffc15 	stw	r2,-16(fp)
	*data = (data_reg & ALT_UP_RS232_DATA_DATA_MSK) >> ALT_UP_RS232_DATA_DATA_OFST;
   17330:	e0bffc17 	ldw	r2,-16(fp)
   17334:	1007883a 	mov	r3,r2
   17338:	e0bffe17 	ldw	r2,-8(fp)
   1733c:	10c00005 	stb	r3,0(r2)
	*parity_error = alt_up_rs232_check_parity(data_reg);
   17340:	e13ffc17 	ldw	r4,-16(fp)
   17344:	00172800 	call	17280 <alt_up_rs232_check_parity>
   17348:	1007883a 	mov	r3,r2
   1734c:	e0bfff17 	ldw	r2,-4(fp)
   17350:	10c00005 	stb	r3,0(r2)
	return (((data_reg & ALT_UP_RS232_DATA_RVALID_MSK) >> ALT_UP_RS232_DATA_RVALID_OFST) - 1);
   17354:	e0bffc17 	ldw	r2,-16(fp)
   17358:	10a0000c 	andi	r2,r2,32768
   1735c:	1004d3fa 	srli	r2,r2,15
   17360:	10bfffc4 	addi	r2,r2,-1
}
   17364:	e037883a 	mov	sp,fp
   17368:	dfc00117 	ldw	ra,4(sp)
   1736c:	df000017 	ldw	fp,0(sp)
   17370:	dec00204 	addi	sp,sp,8
   17374:	f800283a 	ret

00017378 <alt_up_rs232_read_fd>:

int alt_up_rs232_read_fd (alt_fd* fd, char* ptr, int len)
{
   17378:	defff804 	addi	sp,sp,-32
   1737c:	dfc00715 	stw	ra,28(sp)
   17380:	df000615 	stw	fp,24(sp)
   17384:	df000604 	addi	fp,sp,24
   17388:	e13ffd15 	stw	r4,-12(fp)
   1738c:	e17ffe15 	stw	r5,-8(fp)
   17390:	e1bfff15 	stw	r6,-4(fp)
	alt_up_rs232_dev *rs232 = (alt_up_rs232_dev*)fd->dev;
   17394:	e0bffd17 	ldw	r2,-12(fp)
   17398:	10800017 	ldw	r2,0(r2)
   1739c:	e0bffb15 	stw	r2,-20(fp)
	int count = 0;
   173a0:	e03ffa15 	stw	zero,-24(fp)
	alt_u8 parity_error;
	while(len--)
   173a4:	00000e06 	br	173e0 <alt_up_rs232_read_fd+0x68>
	{
		if (alt_up_rs232_read_data(rs232, (alt_u8 *)ptr++, &parity_error)==0)
   173a8:	e0bffe17 	ldw	r2,-8(fp)
   173ac:	10c00044 	addi	r3,r2,1
   173b0:	e0fffe15 	stw	r3,-8(fp)
   173b4:	e0fffc04 	addi	r3,fp,-16
   173b8:	e13ffb17 	ldw	r4,-20(fp)
   173bc:	100b883a 	mov	r5,r2
   173c0:	180d883a 	mov	r6,r3
   173c4:	00173040 	call	17304 <alt_up_rs232_read_data>
   173c8:	1000041e 	bne	r2,zero,173dc <alt_up_rs232_read_fd+0x64>
			count++;
   173cc:	e0bffa17 	ldw	r2,-24(fp)
   173d0:	10800044 	addi	r2,r2,1
   173d4:	e0bffa15 	stw	r2,-24(fp)
   173d8:	00000106 	br	173e0 <alt_up_rs232_read_fd+0x68>
		else
			break;
   173dc:	00000406 	br	173f0 <alt_up_rs232_read_fd+0x78>
int alt_up_rs232_read_fd (alt_fd* fd, char* ptr, int len)
{
	alt_up_rs232_dev *rs232 = (alt_up_rs232_dev*)fd->dev;
	int count = 0;
	alt_u8 parity_error;
	while(len--)
   173e0:	e0bfff17 	ldw	r2,-4(fp)
   173e4:	10ffffc4 	addi	r3,r2,-1
   173e8:	e0ffff15 	stw	r3,-4(fp)
   173ec:	103fee1e 	bne	r2,zero,173a8 <__alt_mem_Flash_flash_data+0xf40173a8>
		if (alt_up_rs232_read_data(rs232, (alt_u8 *)ptr++, &parity_error)==0)
			count++;
		else
			break;
	}
	return count;
   173f0:	e0bffa17 	ldw	r2,-24(fp)
}
   173f4:	e037883a 	mov	sp,fp
   173f8:	dfc00117 	ldw	ra,4(sp)
   173fc:	df000017 	ldw	fp,0(sp)
   17400:	dec00204 	addi	sp,sp,8
   17404:	f800283a 	ret

00017408 <alt_up_rs232_write_fd>:

int alt_up_rs232_write_fd (alt_fd* fd, const char* ptr, int len)
{
   17408:	defff904 	addi	sp,sp,-28
   1740c:	dfc00615 	stw	ra,24(sp)
   17410:	df000515 	stw	fp,20(sp)
   17414:	df000504 	addi	fp,sp,20
   17418:	e13ffd15 	stw	r4,-12(fp)
   1741c:	e17ffe15 	stw	r5,-8(fp)
   17420:	e1bfff15 	stw	r6,-4(fp)
	alt_up_rs232_dev *rs232 = (alt_up_rs232_dev*)fd->dev;
   17424:	e0bffd17 	ldw	r2,-12(fp)
   17428:	10800017 	ldw	r2,0(r2)
   1742c:	e0bffc15 	stw	r2,-16(fp)
	int count = 0;
   17430:	e03ffb15 	stw	zero,-20(fp)
	while(len--)
   17434:	00000f06 	br	17474 <alt_up_rs232_write_fd+0x6c>
	{
		if (alt_up_rs232_write_data(rs232, *ptr)==0)
   17438:	e0bffe17 	ldw	r2,-8(fp)
   1743c:	10800003 	ldbu	r2,0(r2)
   17440:	10803fcc 	andi	r2,r2,255
   17444:	e13ffc17 	ldw	r4,-16(fp)
   17448:	100b883a 	mov	r5,r2
   1744c:	00172c40 	call	172c4 <alt_up_rs232_write_data>
   17450:	1000071e 	bne	r2,zero,17470 <alt_up_rs232_write_fd+0x68>
		{
			count++;
   17454:	e0bffb17 	ldw	r2,-20(fp)
   17458:	10800044 	addi	r2,r2,1
   1745c:	e0bffb15 	stw	r2,-20(fp)
			ptr++;
   17460:	e0bffe17 	ldw	r2,-8(fp)
   17464:	10800044 	addi	r2,r2,1
   17468:	e0bffe15 	stw	r2,-8(fp)
   1746c:	00000106 	br	17474 <alt_up_rs232_write_fd+0x6c>
		}
		else
			break;
   17470:	00000406 	br	17484 <alt_up_rs232_write_fd+0x7c>

int alt_up_rs232_write_fd (alt_fd* fd, const char* ptr, int len)
{
	alt_up_rs232_dev *rs232 = (alt_up_rs232_dev*)fd->dev;
	int count = 0;
	while(len--)
   17474:	e0bfff17 	ldw	r2,-4(fp)
   17478:	10ffffc4 	addi	r3,r2,-1
   1747c:	e0ffff15 	stw	r3,-4(fp)
   17480:	103fed1e 	bne	r2,zero,17438 <__alt_mem_Flash_flash_data+0xf4017438>
			ptr++;
		}
		else
			break;
	}
	return count;
   17484:	e0bffb17 	ldw	r2,-20(fp)
}
   17488:	e037883a 	mov	sp,fp
   1748c:	dfc00117 	ldw	ra,4(sp)
   17490:	df000017 	ldw	fp,0(sp)
   17494:	dec00204 	addi	sp,sp,8
   17498:	f800283a 	ret

0001749c <alt_up_rs232_open_dev>:

alt_up_rs232_dev* alt_up_rs232_open_dev(const char* name)
{
   1749c:	defffc04 	addi	sp,sp,-16
   174a0:	dfc00315 	stw	ra,12(sp)
   174a4:	df000215 	stw	fp,8(sp)
   174a8:	df000204 	addi	fp,sp,8
   174ac:	e13fff15 	stw	r4,-4(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_rs232_dev *dev = (alt_up_rs232_dev*)alt_find_dev(name, &alt_dev_list);
   174b0:	e13fff17 	ldw	r4,-4(fp)
   174b4:	014000b4 	movhi	r5,2
   174b8:	296c7b04 	addi	r5,r5,-19988
   174bc:	0017acc0 	call	17acc <alt_find_dev>
   174c0:	e0bffe15 	stw	r2,-8(fp)

  return dev;
   174c4:	e0bffe17 	ldw	r2,-8(fp)
}
   174c8:	e037883a 	mov	sp,fp
   174cc:	dfc00117 	ldw	ra,4(sp)
   174d0:	df000017 	ldw	fp,0(sp)
   174d4:	dec00204 	addi	sp,sp,8
   174d8:	f800283a 	ret

000174dc <alt_up_char_buffer_init>:
#include <priv/alt_file.h>

#include "altera_up_avalon_video_character_buffer_with_dma.h"
#include "altera_up_avalon_video_character_buffer_with_dma_regs.h"

void alt_up_char_buffer_init(alt_up_char_buffer_dev *char_buffer) {
   174dc:	defffc04 	addi	sp,sp,-16
   174e0:	dfc00315 	stw	ra,12(sp)
   174e4:	df000215 	stw	fp,8(sp)
   174e8:	df000204 	addi	fp,sp,8
   174ec:	e13fff15 	stw	r4,-4(fp)
	char * name;
	name = (char *) char_buffer->dev.name;
   174f0:	e0bfff17 	ldw	r2,-4(fp)
   174f4:	10800217 	ldw	r2,8(r2)
   174f8:	e0bffe15 	stw	r2,-8(fp)

	for ( ; (*name) != '\0'; name++) {
   174fc:	00000b06 	br	1752c <alt_up_char_buffer_init+0x50>
		if (strcmp(name, "_avalon_char_buffer_slave") == 0) {
   17500:	e13ffe17 	ldw	r4,-8(fp)
   17504:	014000b4 	movhi	r5,2
   17508:	2964d304 	addi	r5,r5,-27828
   1750c:	0006c040 	call	6c04 <strcmp>
   17510:	1000031e 	bne	r2,zero,17520 <alt_up_char_buffer_init+0x44>
			(*name) = '\0';
   17514:	e0bffe17 	ldw	r2,-8(fp)
   17518:	10000005 	stb	zero,0(r2)
			break;
   1751c:	00000906 	br	17544 <alt_up_char_buffer_init+0x68>

void alt_up_char_buffer_init(alt_up_char_buffer_dev *char_buffer) {
	char * name;
	name = (char *) char_buffer->dev.name;

	for ( ; (*name) != '\0'; name++) {
   17520:	e0bffe17 	ldw	r2,-8(fp)
   17524:	10800044 	addi	r2,r2,1
   17528:	e0bffe15 	stw	r2,-8(fp)
   1752c:	e0bffe17 	ldw	r2,-8(fp)
   17530:	10800003 	ldbu	r2,0(r2)
   17534:	10803fcc 	andi	r2,r2,255
   17538:	1080201c 	xori	r2,r2,128
   1753c:	10bfe004 	addi	r2,r2,-128
   17540:	103fef1e 	bne	r2,zero,17500 <__alt_mem_Flash_flash_data+0xf4017500>
			(*name) = '\0';
			break;
		}
	}
	
	return;
   17544:	0001883a 	nop
}
   17548:	e037883a 	mov	sp,fp
   1754c:	dfc00117 	ldw	ra,4(sp)
   17550:	df000017 	ldw	fp,0(sp)
   17554:	dec00204 	addi	sp,sp,8
   17558:	f800283a 	ret

0001755c <alt_up_char_buffer_open_dev>:

alt_up_char_buffer_dev* alt_up_char_buffer_open_dev(const char* name) {
   1755c:	defffc04 	addi	sp,sp,-16
   17560:	dfc00315 	stw	ra,12(sp)
   17564:	df000215 	stw	fp,8(sp)
   17568:	df000204 	addi	fp,sp,8
   1756c:	e13fff15 	stw	r4,-4(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_char_buffer_dev *dev = (alt_up_char_buffer_dev *)alt_find_dev(name, &alt_dev_list);
   17570:	e13fff17 	ldw	r4,-4(fp)
   17574:	014000b4 	movhi	r5,2
   17578:	296c7b04 	addi	r5,r5,-19988
   1757c:	0017acc0 	call	17acc <alt_find_dev>
   17580:	e0bffe15 	stw	r2,-8(fp)

  return dev;
   17584:	e0bffe17 	ldw	r2,-8(fp)
}
   17588:	e037883a 	mov	sp,fp
   1758c:	dfc00117 	ldw	ra,4(sp)
   17590:	df000017 	ldw	fp,0(sp)
   17594:	dec00204 	addi	sp,sp,8
   17598:	f800283a 	ret

0001759c <alt_up_char_buffer_draw>:

int alt_up_char_buffer_draw(alt_up_char_buffer_dev *char_buffer, unsigned char ch, 
	unsigned int x, unsigned int y) {
   1759c:	defffa04 	addi	sp,sp,-24
   175a0:	df000515 	stw	fp,20(sp)
   175a4:	df000504 	addi	fp,sp,20
   175a8:	e13ffc15 	stw	r4,-16(fp)
   175ac:	2805883a 	mov	r2,r5
   175b0:	e1bffe15 	stw	r6,-8(fp)
   175b4:	e1ffff15 	stw	r7,-4(fp)
   175b8:	e0bffd05 	stb	r2,-12(fp)
	// boundary check
	if (x >= char_buffer->x_resolution || y >= char_buffer->y_resolution )
   175bc:	e0bffc17 	ldw	r2,-16(fp)
   175c0:	10800c17 	ldw	r2,48(r2)
   175c4:	e0fffe17 	ldw	r3,-8(fp)
   175c8:	1880042e 	bgeu	r3,r2,175dc <alt_up_char_buffer_draw+0x40>
   175cc:	e0bffc17 	ldw	r2,-16(fp)
   175d0:	10800d17 	ldw	r2,52(r2)
   175d4:	e0ffff17 	ldw	r3,-4(fp)
   175d8:	18800236 	bltu	r3,r2,175e4 <alt_up_char_buffer_draw+0x48>
		return -1;
   175dc:	00bfffc4 	movi	r2,-1
   175e0:	00001d06 	br	17658 <alt_up_char_buffer_draw+0xbc>
	
	unsigned int addr = 0;
   175e4:	e03ffb15 	stw	zero,-20(fp)
	addr |= ((x & char_buffer->x_coord_mask) << char_buffer->x_coord_offset);
   175e8:	e0bffc17 	ldw	r2,-16(fp)
   175ec:	10c00f17 	ldw	r3,60(r2)
   175f0:	e0bffe17 	ldw	r2,-8(fp)
   175f4:	1884703a 	and	r2,r3,r2
   175f8:	e0fffc17 	ldw	r3,-16(fp)
   175fc:	18c00e17 	ldw	r3,56(r3)
   17600:	10c4983a 	sll	r2,r2,r3
   17604:	e0fffb17 	ldw	r3,-20(fp)
   17608:	1884b03a 	or	r2,r3,r2
   1760c:	e0bffb15 	stw	r2,-20(fp)
	addr |= ((y & char_buffer->y_coord_mask) << char_buffer->y_coord_offset);
   17610:	e0bffc17 	ldw	r2,-16(fp)
   17614:	10c01117 	ldw	r3,68(r2)
   17618:	e0bfff17 	ldw	r2,-4(fp)
   1761c:	1884703a 	and	r2,r3,r2
   17620:	e0fffc17 	ldw	r3,-16(fp)
   17624:	18c01017 	ldw	r3,64(r3)
   17628:	10c4983a 	sll	r2,r2,r3
   1762c:	e0fffb17 	ldw	r3,-20(fp)
   17630:	1884b03a 	or	r2,r3,r2
   17634:	e0bffb15 	stw	r2,-20(fp)
	IOWR_8DIRECT(char_buffer->buffer_base, addr, ch);
   17638:	e0bffc17 	ldw	r2,-16(fp)
   1763c:	10c00b17 	ldw	r3,44(r2)
   17640:	e0bffb17 	ldw	r2,-20(fp)
   17644:	1885883a 	add	r2,r3,r2
   17648:	1007883a 	mov	r3,r2
   1764c:	e0bffd03 	ldbu	r2,-12(fp)
   17650:	18800025 	stbio	r2,0(r3)

	return 0;
   17654:	0005883a 	mov	r2,zero
}
   17658:	e037883a 	mov	sp,fp
   1765c:	df000017 	ldw	fp,0(sp)
   17660:	dec00104 	addi	sp,sp,4
   17664:	f800283a 	ret

00017668 <alt_up_char_buffer_string>:

int alt_up_char_buffer_string(alt_up_char_buffer_dev *char_buffer, const char *ptr, 
	unsigned int x, unsigned int y) {
   17668:	defffa04 	addi	sp,sp,-24
   1766c:	df000515 	stw	fp,20(sp)
   17670:	df000504 	addi	fp,sp,20
   17674:	e13ffc15 	stw	r4,-16(fp)
   17678:	e17ffd15 	stw	r5,-12(fp)
   1767c:	e1bffe15 	stw	r6,-8(fp)
   17680:	e1ffff15 	stw	r7,-4(fp)
	// boundary check
	if (x >= char_buffer->x_resolution || y >= char_buffer->y_resolution )
   17684:	e0bffc17 	ldw	r2,-16(fp)
   17688:	10800c17 	ldw	r2,48(r2)
   1768c:	e0fffe17 	ldw	r3,-8(fp)
   17690:	1880042e 	bgeu	r3,r2,176a4 <alt_up_char_buffer_string+0x3c>
   17694:	e0bffc17 	ldw	r2,-16(fp)
   17698:	10800d17 	ldw	r2,52(r2)
   1769c:	e0ffff17 	ldw	r3,-4(fp)
   176a0:	18800236 	bltu	r3,r2,176ac <alt_up_char_buffer_string+0x44>
		return -1;
   176a4:	00bfffc4 	movi	r2,-1
   176a8:	00002b06 	br	17758 <alt_up_char_buffer_string+0xf0>
	
	unsigned int offset = 0;
   176ac:	e03ffb15 	stw	zero,-20(fp)
	offset = (y << char_buffer->y_coord_offset) + x;
   176b0:	e0bffc17 	ldw	r2,-16(fp)
   176b4:	10801017 	ldw	r2,64(r2)
   176b8:	1007883a 	mov	r3,r2
   176bc:	e0bfff17 	ldw	r2,-4(fp)
   176c0:	10c6983a 	sll	r3,r2,r3
   176c4:	e0bffe17 	ldw	r2,-8(fp)
   176c8:	1885883a 	add	r2,r3,r2
   176cc:	e0bffb15 	stw	r2,-20(fp)

	while ( *ptr )
   176d0:	00001a06 	br	1773c <alt_up_char_buffer_string+0xd4>
	{
		IOWR_8DIRECT(char_buffer->buffer_base, offset, *ptr);
   176d4:	e0bffc17 	ldw	r2,-16(fp)
   176d8:	10c00b17 	ldw	r3,44(r2)
   176dc:	e0bffb17 	ldw	r2,-20(fp)
   176e0:	1885883a 	add	r2,r3,r2
   176e4:	1007883a 	mov	r3,r2
   176e8:	e0bffd17 	ldw	r2,-12(fp)
   176ec:	10800003 	ldbu	r2,0(r2)
   176f0:	10803fcc 	andi	r2,r2,255
   176f4:	1080201c 	xori	r2,r2,128
   176f8:	10bfe004 	addi	r2,r2,-128
   176fc:	18800025 	stbio	r2,0(r3)
		++ptr;
   17700:	e0bffd17 	ldw	r2,-12(fp)
   17704:	10800044 	addi	r2,r2,1
   17708:	e0bffd15 	stw	r2,-12(fp)
		if (++x >= char_buffer->x_resolution)
   1770c:	e0bffe17 	ldw	r2,-8(fp)
   17710:	10800044 	addi	r2,r2,1
   17714:	e0bffe15 	stw	r2,-8(fp)
   17718:	e0bffc17 	ldw	r2,-16(fp)
   1771c:	10800c17 	ldw	r2,48(r2)
   17720:	e0fffe17 	ldw	r3,-8(fp)
   17724:	18800236 	bltu	r3,r2,17730 <alt_up_char_buffer_string+0xc8>
			return -1;
   17728:	00bfffc4 	movi	r2,-1
   1772c:	00000a06 	br	17758 <alt_up_char_buffer_string+0xf0>
		++offset;
   17730:	e0bffb17 	ldw	r2,-20(fp)
   17734:	10800044 	addi	r2,r2,1
   17738:	e0bffb15 	stw	r2,-20(fp)
		return -1;
	
	unsigned int offset = 0;
	offset = (y << char_buffer->y_coord_offset) + x;

	while ( *ptr )
   1773c:	e0bffd17 	ldw	r2,-12(fp)
   17740:	10800003 	ldbu	r2,0(r2)
   17744:	10803fcc 	andi	r2,r2,255
   17748:	1080201c 	xori	r2,r2,128
   1774c:	10bfe004 	addi	r2,r2,-128
   17750:	103fe01e 	bne	r2,zero,176d4 <__alt_mem_Flash_flash_data+0xf40176d4>
		++ptr;
		if (++x >= char_buffer->x_resolution)
			return -1;
		++offset;
	}
	return 0;
   17754:	0005883a 	mov	r2,zero
}
   17758:	e037883a 	mov	sp,fp
   1775c:	df000017 	ldw	fp,0(sp)
   17760:	dec00104 	addi	sp,sp,4
   17764:	f800283a 	ret

00017768 <alt_up_char_buffer_clear>:

int alt_up_char_buffer_clear(alt_up_char_buffer_dev *char_buffer) {
   17768:	defffe04 	addi	sp,sp,-8
   1776c:	df000115 	stw	fp,4(sp)
   17770:	df000104 	addi	fp,sp,4
   17774:	e13fff15 	stw	r4,-4(fp)
	IOWR_ALT_UP_CHAR_BUFFER_CLR_SCRN(char_buffer->ctrl_reg_base, 1);
   17778:	e0bfff17 	ldw	r2,-4(fp)
   1777c:	10800a17 	ldw	r2,40(r2)
   17780:	10800084 	addi	r2,r2,2
   17784:	1007883a 	mov	r3,r2
   17788:	00800044 	movi	r2,1
   1778c:	18800025 	stbio	r2,0(r3)
	while ((IORD_ALT_UP_CHAR_BUFFER_CLR_SCRN(char_buffer->ctrl_reg_base) & ALT_UP_CHAR_BUFFER_CLR_SCRN_MSK) >> ALT_UP_CHAR_BUFFER_CLR_SCRN_OFST);
   17790:	0001883a 	nop
   17794:	e0bfff17 	ldw	r2,-4(fp)
   17798:	10800a17 	ldw	r2,40(r2)
   1779c:	10800084 	addi	r2,r2,2
   177a0:	10800023 	ldbuio	r2,0(r2)
   177a4:	10803fcc 	andi	r2,r2,255
   177a8:	1080004c 	andi	r2,r2,1
   177ac:	103ff91e 	bne	r2,zero,17794 <__alt_mem_Flash_flash_data+0xf4017794>
	return 0;
   177b0:	0005883a 	mov	r2,zero
}
   177b4:	e037883a 	mov	sp,fp
   177b8:	df000017 	ldw	fp,0(sp)
   177bc:	dec00104 	addi	sp,sp,4
   177c0:	f800283a 	ret

000177c4 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
   177c4:	defff504 	addi	sp,sp,-44
   177c8:	df000a15 	stw	fp,40(sp)
   177cc:	df000a04 	addi	fp,sp,40
   177d0:	e13ffc15 	stw	r4,-16(fp)
   177d4:	e17ffd15 	stw	r5,-12(fp)
   177d8:	e1bffe15 	stw	r6,-8(fp)
   177dc:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
   177e0:	e03ff615 	stw	zero,-40(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
   177e4:	008000b4 	movhi	r2,2
   177e8:	10b49404 	addi	r2,r2,-11696
   177ec:	10800017 	ldw	r2,0(r2)
  
  if (alt_ticks_per_second ())
   177f0:	10003f26 	beq	r2,zero,178f0 <alt_alarm_start+0x12c>
  {
    if (alarm)
   177f4:	e0bffc17 	ldw	r2,-16(fp)
   177f8:	10003b26 	beq	r2,zero,178e8 <alt_alarm_start+0x124>
    {
      alarm->callback = callback;
   177fc:	e0bffc17 	ldw	r2,-16(fp)
   17800:	e0fffe17 	ldw	r3,-8(fp)
   17804:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
   17808:	e0bffc17 	ldw	r2,-16(fp)
   1780c:	e0ffff17 	ldw	r3,-4(fp)
   17810:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   17814:	0005303a 	rdctl	r2,status
   17818:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1781c:	e0fff817 	ldw	r3,-32(fp)
   17820:	00bfff84 	movi	r2,-2
   17824:	1884703a 	and	r2,r3,r2
   17828:	1001703a 	wrctl	status,r2
  
  return context;
   1782c:	e0bff817 	ldw	r2,-32(fp)
 
      irq_context = alt_irq_disable_all ();
   17830:	e0bff715 	stw	r2,-36(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
   17834:	008000b4 	movhi	r2,2
   17838:	10b49504 	addi	r2,r2,-11692
   1783c:	10800017 	ldw	r2,0(r2)
      
      current_nticks = alt_nticks();
   17840:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
   17844:	e0fffd17 	ldw	r3,-12(fp)
   17848:	e0bff617 	ldw	r2,-40(fp)
   1784c:	1885883a 	add	r2,r3,r2
   17850:	10c00044 	addi	r3,r2,1
   17854:	e0bffc17 	ldw	r2,-16(fp)
   17858:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
   1785c:	e0bffc17 	ldw	r2,-16(fp)
   17860:	10c00217 	ldw	r3,8(r2)
   17864:	e0bff617 	ldw	r2,-40(fp)
   17868:	1880042e 	bgeu	r3,r2,1787c <alt_alarm_start+0xb8>
      {
        alarm->rollover = 1;
   1786c:	e0bffc17 	ldw	r2,-16(fp)
   17870:	00c00044 	movi	r3,1
   17874:	10c00405 	stb	r3,16(r2)
   17878:	00000206 	br	17884 <alt_alarm_start+0xc0>
      }
      else
      {
        alarm->rollover = 0;
   1787c:	e0bffc17 	ldw	r2,-16(fp)
   17880:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
   17884:	e0fffc17 	ldw	r3,-16(fp)
   17888:	008000b4 	movhi	r2,2
   1788c:	10aca004 	addi	r2,r2,-19840
   17890:	e0bff915 	stw	r2,-28(fp)
   17894:	e0fffa15 	stw	r3,-24(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   17898:	e0bffa17 	ldw	r2,-24(fp)
   1789c:	e0fff917 	ldw	r3,-28(fp)
   178a0:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   178a4:	e0bff917 	ldw	r2,-28(fp)
   178a8:	10c00017 	ldw	r3,0(r2)
   178ac:	e0bffa17 	ldw	r2,-24(fp)
   178b0:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   178b4:	e0bff917 	ldw	r2,-28(fp)
   178b8:	10800017 	ldw	r2,0(r2)
   178bc:	e0fffa17 	ldw	r3,-24(fp)
   178c0:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   178c4:	e0bff917 	ldw	r2,-28(fp)
   178c8:	e0fffa17 	ldw	r3,-24(fp)
   178cc:	10c00015 	stw	r3,0(r2)
   178d0:	e0bff717 	ldw	r2,-36(fp)
   178d4:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   178d8:	e0bffb17 	ldw	r2,-20(fp)
   178dc:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
   178e0:	0005883a 	mov	r2,zero
   178e4:	00000306 	br	178f4 <alt_alarm_start+0x130>
    }
    else
    {
      return -EINVAL;
   178e8:	00bffa84 	movi	r2,-22
   178ec:	00000106 	br	178f4 <alt_alarm_start+0x130>
    }
  }
  else
  {
    return -ENOTSUP;
   178f0:	00bfde84 	movi	r2,-134
  }
}
   178f4:	e037883a 	mov	sp,fp
   178f8:	df000017 	ldw	fp,0(sp)
   178fc:	dec00104 	addi	sp,sp,4
   17900:	f800283a 	ret

00017904 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
   17904:	deffff04 	addi	sp,sp,-4
   17908:	df000015 	stw	fp,0(sp)
   1790c:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
   17910:	e037883a 	mov	sp,fp
   17914:	df000017 	ldw	fp,0(sp)
   17918:	dec00104 	addi	sp,sp,4
   1791c:	f800283a 	ret

00017920 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   17920:	defffe04 	addi	sp,sp,-8
   17924:	dfc00115 	stw	ra,4(sp)
   17928:	df000015 	stw	fp,0(sp)
   1792c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   17930:	008000b4 	movhi	r2,2
   17934:	10ac7e04 	addi	r2,r2,-19976
   17938:	10800017 	ldw	r2,0(r2)
   1793c:	10000526 	beq	r2,zero,17954 <alt_get_errno+0x34>
   17940:	008000b4 	movhi	r2,2
   17944:	10ac7e04 	addi	r2,r2,-19976
   17948:	10800017 	ldw	r2,0(r2)
   1794c:	103ee83a 	callr	r2
   17950:	00000206 	br	1795c <alt_get_errno+0x3c>
   17954:	008000b4 	movhi	r2,2
   17958:	10b47604 	addi	r2,r2,-11816
}
   1795c:	e037883a 	mov	sp,fp
   17960:	dfc00117 	ldw	ra,4(sp)
   17964:	df000017 	ldw	fp,0(sp)
   17968:	dec00204 	addi	sp,sp,8
   1796c:	f800283a 	ret

00017970 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
   17970:	defffa04 	addi	sp,sp,-24
   17974:	dfc00515 	stw	ra,20(sp)
   17978:	df000415 	stw	fp,16(sp)
   1797c:	df000404 	addi	fp,sp,16
   17980:	e13ffe15 	stw	r4,-8(fp)
   17984:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
   17988:	e0bffe17 	ldw	r2,-8(fp)
   1798c:	10000326 	beq	r2,zero,1799c <alt_dev_llist_insert+0x2c>
   17990:	e0bffe17 	ldw	r2,-8(fp)
   17994:	10800217 	ldw	r2,8(r2)
   17998:	1000061e 	bne	r2,zero,179b4 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
   1799c:	00179200 	call	17920 <alt_get_errno>
   179a0:	1007883a 	mov	r3,r2
   179a4:	00800584 	movi	r2,22
   179a8:	18800015 	stw	r2,0(r3)
    return -EINVAL;
   179ac:	00bffa84 	movi	r2,-22
   179b0:	00001306 	br	17a00 <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
   179b4:	e0bffe17 	ldw	r2,-8(fp)
   179b8:	e0ffff17 	ldw	r3,-4(fp)
   179bc:	e0fffc15 	stw	r3,-16(fp)
   179c0:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   179c4:	e0bffd17 	ldw	r2,-12(fp)
   179c8:	e0fffc17 	ldw	r3,-16(fp)
   179cc:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   179d0:	e0bffc17 	ldw	r2,-16(fp)
   179d4:	10c00017 	ldw	r3,0(r2)
   179d8:	e0bffd17 	ldw	r2,-12(fp)
   179dc:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   179e0:	e0bffc17 	ldw	r2,-16(fp)
   179e4:	10800017 	ldw	r2,0(r2)
   179e8:	e0fffd17 	ldw	r3,-12(fp)
   179ec:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   179f0:	e0bffc17 	ldw	r2,-16(fp)
   179f4:	e0fffd17 	ldw	r3,-12(fp)
   179f8:	10c00015 	stw	r3,0(r2)

  return 0;  
   179fc:	0005883a 	mov	r2,zero
}
   17a00:	e037883a 	mov	sp,fp
   17a04:	dfc00117 	ldw	ra,4(sp)
   17a08:	df000017 	ldw	fp,0(sp)
   17a0c:	dec00204 	addi	sp,sp,8
   17a10:	f800283a 	ret

00017a14 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
   17a14:	defffd04 	addi	sp,sp,-12
   17a18:	dfc00215 	stw	ra,8(sp)
   17a1c:	df000115 	stw	fp,4(sp)
   17a20:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   17a24:	008000b4 	movhi	r2,2
   17a28:	10a32e04 	addi	r2,r2,-29512
   17a2c:	e0bfff15 	stw	r2,-4(fp)
   17a30:	00000606 	br	17a4c <_do_ctors+0x38>
        (*ctor) (); 
   17a34:	e0bfff17 	ldw	r2,-4(fp)
   17a38:	10800017 	ldw	r2,0(r2)
   17a3c:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   17a40:	e0bfff17 	ldw	r2,-4(fp)
   17a44:	10bfff04 	addi	r2,r2,-4
   17a48:	e0bfff15 	stw	r2,-4(fp)
   17a4c:	e0ffff17 	ldw	r3,-4(fp)
   17a50:	008000b4 	movhi	r2,2
   17a54:	10a32f04 	addi	r2,r2,-29508
   17a58:	18bff62e 	bgeu	r3,r2,17a34 <__alt_mem_Flash_flash_data+0xf4017a34>
        (*ctor) (); 
}
   17a5c:	e037883a 	mov	sp,fp
   17a60:	dfc00117 	ldw	ra,4(sp)
   17a64:	df000017 	ldw	fp,0(sp)
   17a68:	dec00204 	addi	sp,sp,8
   17a6c:	f800283a 	ret

00017a70 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
   17a70:	defffd04 	addi	sp,sp,-12
   17a74:	dfc00215 	stw	ra,8(sp)
   17a78:	df000115 	stw	fp,4(sp)
   17a7c:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   17a80:	008000b4 	movhi	r2,2
   17a84:	10a32e04 	addi	r2,r2,-29512
   17a88:	e0bfff15 	stw	r2,-4(fp)
   17a8c:	00000606 	br	17aa8 <_do_dtors+0x38>
        (*dtor) (); 
   17a90:	e0bfff17 	ldw	r2,-4(fp)
   17a94:	10800017 	ldw	r2,0(r2)
   17a98:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   17a9c:	e0bfff17 	ldw	r2,-4(fp)
   17aa0:	10bfff04 	addi	r2,r2,-4
   17aa4:	e0bfff15 	stw	r2,-4(fp)
   17aa8:	e0ffff17 	ldw	r3,-4(fp)
   17aac:	008000b4 	movhi	r2,2
   17ab0:	10a32f04 	addi	r2,r2,-29508
   17ab4:	18bff62e 	bgeu	r3,r2,17a90 <__alt_mem_Flash_flash_data+0xf4017a90>
        (*dtor) (); 
}
   17ab8:	e037883a 	mov	sp,fp
   17abc:	dfc00117 	ldw	ra,4(sp)
   17ac0:	df000017 	ldw	fp,0(sp)
   17ac4:	dec00204 	addi	sp,sp,8
   17ac8:	f800283a 	ret

00017acc <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
   17acc:	defffa04 	addi	sp,sp,-24
   17ad0:	dfc00515 	stw	ra,20(sp)
   17ad4:	df000415 	stw	fp,16(sp)
   17ad8:	df000404 	addi	fp,sp,16
   17adc:	e13ffe15 	stw	r4,-8(fp)
   17ae0:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
   17ae4:	e0bfff17 	ldw	r2,-4(fp)
   17ae8:	10800017 	ldw	r2,0(r2)
   17aec:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
   17af0:	e13ffe17 	ldw	r4,-8(fp)
   17af4:	0000c200 	call	c20 <strlen>
   17af8:	10800044 	addi	r2,r2,1
   17afc:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   17b00:	00000d06 	br	17b38 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
   17b04:	e0bffc17 	ldw	r2,-16(fp)
   17b08:	10c00217 	ldw	r3,8(r2)
   17b0c:	e0bffd17 	ldw	r2,-12(fp)
   17b10:	1809883a 	mov	r4,r3
   17b14:	e17ffe17 	ldw	r5,-8(fp)
   17b18:	100d883a 	mov	r6,r2
   17b1c:	001895c0 	call	1895c <memcmp>
   17b20:	1000021e 	bne	r2,zero,17b2c <alt_find_dev+0x60>
    {
      /* match found */

      return next;
   17b24:	e0bffc17 	ldw	r2,-16(fp)
   17b28:	00000706 	br	17b48 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
   17b2c:	e0bffc17 	ldw	r2,-16(fp)
   17b30:	10800017 	ldw	r2,0(r2)
   17b34:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   17b38:	e0fffc17 	ldw	r3,-16(fp)
   17b3c:	e0bfff17 	ldw	r2,-4(fp)
   17b40:	18bff01e 	bne	r3,r2,17b04 <__alt_mem_Flash_flash_data+0xf4017b04>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
   17b44:	0005883a 	mov	r2,zero
}
   17b48:	e037883a 	mov	sp,fp
   17b4c:	dfc00117 	ldw	ra,4(sp)
   17b50:	df000017 	ldw	fp,0(sp)
   17b54:	dec00204 	addi	sp,sp,8
   17b58:	f800283a 	ret

00017b5c <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
   17b5c:	defffe04 	addi	sp,sp,-8
   17b60:	dfc00115 	stw	ra,4(sp)
   17b64:	df000015 	stw	fp,0(sp)
   17b68:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
   17b6c:	0009883a 	mov	r4,zero
   17b70:	01440004 	movi	r5,4096
   17b74:	00187e80 	call	187e8 <alt_icache_flush>
#endif
}
   17b78:	e037883a 	mov	sp,fp
   17b7c:	dfc00117 	ldw	ra,4(sp)
   17b80:	df000017 	ldw	fp,0(sp)
   17b84:	dec00204 	addi	sp,sp,8
   17b88:	f800283a 	ret

00017b8c <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
   17b8c:	defff904 	addi	sp,sp,-28
   17b90:	dfc00615 	stw	ra,24(sp)
   17b94:	df000515 	stw	fp,20(sp)
   17b98:	df000504 	addi	fp,sp,20
   17b9c:	e13ffc15 	stw	r4,-16(fp)
   17ba0:	e17ffd15 	stw	r5,-12(fp)
   17ba4:	e1bffe15 	stw	r6,-8(fp)
   17ba8:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
   17bac:	e13ffd17 	ldw	r4,-12(fp)
   17bb0:	e17ffe17 	ldw	r5,-8(fp)
   17bb4:	e1bfff17 	ldw	r6,-4(fp)
   17bb8:	0017f900 	call	17f90 <open>
   17bbc:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
   17bc0:	e0bffb17 	ldw	r2,-20(fp)
   17bc4:	10001c16 	blt	r2,zero,17c38 <alt_open_fd+0xac>
  {
    fd->dev      = alt_fd_list[old].dev;
   17bc8:	008000b4 	movhi	r2,2
   17bcc:	10a71804 	addi	r2,r2,-25504
   17bd0:	e0fffb17 	ldw	r3,-20(fp)
   17bd4:	18c00324 	muli	r3,r3,12
   17bd8:	10c5883a 	add	r2,r2,r3
   17bdc:	10c00017 	ldw	r3,0(r2)
   17be0:	e0bffc17 	ldw	r2,-16(fp)
   17be4:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
   17be8:	008000b4 	movhi	r2,2
   17bec:	10a71804 	addi	r2,r2,-25504
   17bf0:	e0fffb17 	ldw	r3,-20(fp)
   17bf4:	18c00324 	muli	r3,r3,12
   17bf8:	18c00104 	addi	r3,r3,4
   17bfc:	10c5883a 	add	r2,r2,r3
   17c00:	10c00017 	ldw	r3,0(r2)
   17c04:	e0bffc17 	ldw	r2,-16(fp)
   17c08:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
   17c0c:	008000b4 	movhi	r2,2
   17c10:	10a71804 	addi	r2,r2,-25504
   17c14:	e0fffb17 	ldw	r3,-20(fp)
   17c18:	18c00324 	muli	r3,r3,12
   17c1c:	18c00204 	addi	r3,r3,8
   17c20:	10c5883a 	add	r2,r2,r3
   17c24:	10c00017 	ldw	r3,0(r2)
   17c28:	e0bffc17 	ldw	r2,-16(fp)
   17c2c:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
   17c30:	e13ffb17 	ldw	r4,-20(fp)
   17c34:	000cda80 	call	cda8 <alt_release_fd>
  }
} 
   17c38:	e037883a 	mov	sp,fp
   17c3c:	dfc00117 	ldw	ra,4(sp)
   17c40:	df000017 	ldw	fp,0(sp)
   17c44:	dec00204 	addi	sp,sp,8
   17c48:	f800283a 	ret

00017c4c <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
   17c4c:	defffb04 	addi	sp,sp,-20
   17c50:	dfc00415 	stw	ra,16(sp)
   17c54:	df000315 	stw	fp,12(sp)
   17c58:	df000304 	addi	fp,sp,12
   17c5c:	e13ffd15 	stw	r4,-12(fp)
   17c60:	e17ffe15 	stw	r5,-8(fp)
   17c64:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
   17c68:	010000b4 	movhi	r4,2
   17c6c:	21271b04 	addi	r4,r4,-25492
   17c70:	e17ffd17 	ldw	r5,-12(fp)
   17c74:	01800044 	movi	r6,1
   17c78:	01c07fc4 	movi	r7,511
   17c7c:	0017b8c0 	call	17b8c <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
   17c80:	010000b4 	movhi	r4,2
   17c84:	21271804 	addi	r4,r4,-25504
   17c88:	e17ffe17 	ldw	r5,-8(fp)
   17c8c:	000d883a 	mov	r6,zero
   17c90:	01c07fc4 	movi	r7,511
   17c94:	0017b8c0 	call	17b8c <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
   17c98:	010000b4 	movhi	r4,2
   17c9c:	21271e04 	addi	r4,r4,-25480
   17ca0:	e17fff17 	ldw	r5,-4(fp)
   17ca4:	01800044 	movi	r6,1
   17ca8:	01c07fc4 	movi	r7,511
   17cac:	0017b8c0 	call	17b8c <alt_open_fd>
}  
   17cb0:	e037883a 	mov	sp,fp
   17cb4:	dfc00117 	ldw	ra,4(sp)
   17cb8:	df000017 	ldw	fp,0(sp)
   17cbc:	dec00204 	addi	sp,sp,8
   17cc0:	f800283a 	ret

00017cc4 <alt_irq_register>:
 */
 
int alt_irq_register (alt_u32 id, 
                      void* context, 
                      alt_isr_func handler)
{
   17cc4:	defff004 	addi	sp,sp,-64
   17cc8:	df000f15 	stw	fp,60(sp)
   17ccc:	df000f04 	addi	fp,sp,60
   17cd0:	e13ffd15 	stw	r4,-12(fp)
   17cd4:	e17ffe15 	stw	r5,-8(fp)
   17cd8:	e1bfff15 	stw	r6,-4(fp)
  int rc = -EINVAL;  
   17cdc:	00bffa84 	movi	r2,-22
   17ce0:	e0bff115 	stw	r2,-60(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
   17ce4:	e0bffd17 	ldw	r2,-12(fp)
   17ce8:	10800828 	cmpgeui	r2,r2,32
   17cec:	10005c1e 	bne	r2,zero,17e60 <alt_irq_register+0x19c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   17cf0:	0005303a 	rdctl	r2,status
   17cf4:	e0bff315 	stw	r2,-52(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   17cf8:	e0fff317 	ldw	r3,-52(fp)
   17cfc:	00bfff84 	movi	r2,-2
   17d00:	1884703a 	and	r2,r3,r2
   17d04:	1001703a 	wrctl	status,r2
  
  return context;
   17d08:	e0bff317 	ldw	r2,-52(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all ();
   17d0c:	e0bff215 	stw	r2,-56(fp)

    alt_irq[id].handler = handler;
   17d10:	008000f4 	movhi	r2,3
   17d14:	10a13404 	addi	r2,r2,-31536
   17d18:	e0fffd17 	ldw	r3,-12(fp)
   17d1c:	180690fa 	slli	r3,r3,3
   17d20:	10c5883a 	add	r2,r2,r3
   17d24:	e0ffff17 	ldw	r3,-4(fp)
   17d28:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = context;
   17d2c:	008000f4 	movhi	r2,3
   17d30:	10a13404 	addi	r2,r2,-31536
   17d34:	e0fffd17 	ldw	r3,-12(fp)
   17d38:	180690fa 	slli	r3,r3,3
   17d3c:	18c00104 	addi	r3,r3,4
   17d40:	10c5883a 	add	r2,r2,r3
   17d44:	e0fffe17 	ldw	r3,-8(fp)
   17d48:	10c00015 	stw	r3,0(r2)

    rc = (handler) ? alt_irq_enable (id): alt_irq_disable (id);
   17d4c:	e0bfff17 	ldw	r2,-4(fp)
   17d50:	10001f26 	beq	r2,zero,17dd0 <alt_irq_register+0x10c>
   17d54:	e0bffd17 	ldw	r2,-12(fp)
   17d58:	e0bff415 	stw	r2,-48(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   17d5c:	0005303a 	rdctl	r2,status
   17d60:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   17d64:	e0fff517 	ldw	r3,-44(fp)
   17d68:	00bfff84 	movi	r2,-2
   17d6c:	1884703a 	and	r2,r3,r2
   17d70:	1001703a 	wrctl	status,r2
  
  return context;
   17d74:	e0bff517 	ldw	r2,-44(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   17d78:	e0bff615 	stw	r2,-40(fp)

  alt_irq_active |= (1 << id);
   17d7c:	e0bff417 	ldw	r2,-48(fp)
   17d80:	00c00044 	movi	r3,1
   17d84:	1884983a 	sll	r2,r3,r2
   17d88:	1007883a 	mov	r3,r2
   17d8c:	008000b4 	movhi	r2,2
   17d90:	10b49304 	addi	r2,r2,-11700
   17d94:	10800017 	ldw	r2,0(r2)
   17d98:	1886b03a 	or	r3,r3,r2
   17d9c:	008000b4 	movhi	r2,2
   17da0:	10b49304 	addi	r2,r2,-11700
   17da4:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   17da8:	008000b4 	movhi	r2,2
   17dac:	10b49304 	addi	r2,r2,-11700
   17db0:	10800017 	ldw	r2,0(r2)
   17db4:	100170fa 	wrctl	ienable,r2
   17db8:	e0bff617 	ldw	r2,-40(fp)
   17dbc:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   17dc0:	e0bff717 	ldw	r2,-36(fp)
   17dc4:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   17dc8:	0005883a 	mov	r2,zero
   17dcc:	00001f06 	br	17e4c <alt_irq_register+0x188>
   17dd0:	e0bffd17 	ldw	r2,-12(fp)
   17dd4:	e0bff815 	stw	r2,-32(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   17dd8:	0005303a 	rdctl	r2,status
   17ddc:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   17de0:	e0fff917 	ldw	r3,-28(fp)
   17de4:	00bfff84 	movi	r2,-2
   17de8:	1884703a 	and	r2,r3,r2
   17dec:	1001703a 	wrctl	status,r2
  
  return context;
   17df0:	e0bff917 	ldw	r2,-28(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   17df4:	e0bffa15 	stw	r2,-24(fp)

  alt_irq_active &= ~(1 << id);
   17df8:	e0bff817 	ldw	r2,-32(fp)
   17dfc:	00c00044 	movi	r3,1
   17e00:	1884983a 	sll	r2,r3,r2
   17e04:	0084303a 	nor	r2,zero,r2
   17e08:	1007883a 	mov	r3,r2
   17e0c:	008000b4 	movhi	r2,2
   17e10:	10b49304 	addi	r2,r2,-11700
   17e14:	10800017 	ldw	r2,0(r2)
   17e18:	1886703a 	and	r3,r3,r2
   17e1c:	008000b4 	movhi	r2,2
   17e20:	10b49304 	addi	r2,r2,-11700
   17e24:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   17e28:	008000b4 	movhi	r2,2
   17e2c:	10b49304 	addi	r2,r2,-11700
   17e30:	10800017 	ldw	r2,0(r2)
   17e34:	100170fa 	wrctl	ienable,r2
   17e38:	e0bffa17 	ldw	r2,-24(fp)
   17e3c:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   17e40:	e0bffb17 	ldw	r2,-20(fp)
   17e44:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   17e48:	0005883a 	mov	r2,zero
   17e4c:	e0bff115 	stw	r2,-60(fp)
   17e50:	e0bff217 	ldw	r2,-56(fp)
   17e54:	e0bffc15 	stw	r2,-16(fp)
   17e58:	e0bffc17 	ldw	r2,-16(fp)
   17e5c:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }
  return rc; 
   17e60:	e0bff117 	ldw	r2,-60(fp)
}
   17e64:	e037883a 	mov	sp,fp
   17e68:	df000017 	ldw	fp,0(sp)
   17e6c:	dec00104 	addi	sp,sp,4
   17e70:	f800283a 	ret

00017e74 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   17e74:	defffe04 	addi	sp,sp,-8
   17e78:	dfc00115 	stw	ra,4(sp)
   17e7c:	df000015 	stw	fp,0(sp)
   17e80:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   17e84:	008000b4 	movhi	r2,2
   17e88:	10ac7e04 	addi	r2,r2,-19976
   17e8c:	10800017 	ldw	r2,0(r2)
   17e90:	10000526 	beq	r2,zero,17ea8 <alt_get_errno+0x34>
   17e94:	008000b4 	movhi	r2,2
   17e98:	10ac7e04 	addi	r2,r2,-19976
   17e9c:	10800017 	ldw	r2,0(r2)
   17ea0:	103ee83a 	callr	r2
   17ea4:	00000206 	br	17eb0 <alt_get_errno+0x3c>
   17ea8:	008000b4 	movhi	r2,2
   17eac:	10b47604 	addi	r2,r2,-11816
}
   17eb0:	e037883a 	mov	sp,fp
   17eb4:	dfc00117 	ldw	ra,4(sp)
   17eb8:	df000017 	ldw	fp,0(sp)
   17ebc:	dec00204 	addi	sp,sp,8
   17ec0:	f800283a 	ret

00017ec4 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
   17ec4:	defffd04 	addi	sp,sp,-12
   17ec8:	df000215 	stw	fp,8(sp)
   17ecc:	df000204 	addi	fp,sp,8
   17ed0:	e13fff15 	stw	r4,-4(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
   17ed4:	e0bfff17 	ldw	r2,-4(fp)
   17ed8:	10800217 	ldw	r2,8(r2)
   17edc:	10d00034 	orhi	r3,r2,16384
   17ee0:	e0bfff17 	ldw	r2,-4(fp)
   17ee4:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   17ee8:	e03ffe15 	stw	zero,-8(fp)
   17eec:	00001d06 	br	17f64 <alt_file_locked+0xa0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   17ef0:	008000b4 	movhi	r2,2
   17ef4:	10a71804 	addi	r2,r2,-25504
   17ef8:	e0fffe17 	ldw	r3,-8(fp)
   17efc:	18c00324 	muli	r3,r3,12
   17f00:	10c5883a 	add	r2,r2,r3
   17f04:	10c00017 	ldw	r3,0(r2)
   17f08:	e0bfff17 	ldw	r2,-4(fp)
   17f0c:	10800017 	ldw	r2,0(r2)
   17f10:	1880111e 	bne	r3,r2,17f58 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   17f14:	008000b4 	movhi	r2,2
   17f18:	10a71804 	addi	r2,r2,-25504
   17f1c:	e0fffe17 	ldw	r3,-8(fp)
   17f20:	18c00324 	muli	r3,r3,12
   17f24:	18c00204 	addi	r3,r3,8
   17f28:	10c5883a 	add	r2,r2,r3
   17f2c:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   17f30:	1000090e 	bge	r2,zero,17f58 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
   17f34:	e0bffe17 	ldw	r2,-8(fp)
   17f38:	10c00324 	muli	r3,r2,12
   17f3c:	008000b4 	movhi	r2,2
   17f40:	10a71804 	addi	r2,r2,-25504
   17f44:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   17f48:	e0bfff17 	ldw	r2,-4(fp)
   17f4c:	18800226 	beq	r3,r2,17f58 <alt_file_locked+0x94>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
   17f50:	00bffcc4 	movi	r2,-13
   17f54:	00000a06 	br	17f80 <alt_file_locked+0xbc>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   17f58:	e0bffe17 	ldw	r2,-8(fp)
   17f5c:	10800044 	addi	r2,r2,1
   17f60:	e0bffe15 	stw	r2,-8(fp)
   17f64:	008000b4 	movhi	r2,2
   17f68:	10ac7d04 	addi	r2,r2,-19980
   17f6c:	10800017 	ldw	r2,0(r2)
   17f70:	1007883a 	mov	r3,r2
   17f74:	e0bffe17 	ldw	r2,-8(fp)
   17f78:	18bfdd2e 	bgeu	r3,r2,17ef0 <__alt_mem_Flash_flash_data+0xf4017ef0>
    }
  }
  
  /* The device is not locked */
 
  return 0;
   17f7c:	0005883a 	mov	r2,zero
}
   17f80:	e037883a 	mov	sp,fp
   17f84:	df000017 	ldw	fp,0(sp)
   17f88:	dec00104 	addi	sp,sp,4
   17f8c:	f800283a 	ret

00017f90 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
   17f90:	defff604 	addi	sp,sp,-40
   17f94:	dfc00915 	stw	ra,36(sp)
   17f98:	df000815 	stw	fp,32(sp)
   17f9c:	df000804 	addi	fp,sp,32
   17fa0:	e13ffd15 	stw	r4,-12(fp)
   17fa4:	e17ffe15 	stw	r5,-8(fp)
   17fa8:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
   17fac:	00bfffc4 	movi	r2,-1
   17fb0:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
   17fb4:	00bffb44 	movi	r2,-19
   17fb8:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
   17fbc:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
   17fc0:	e13ffd17 	ldw	r4,-12(fp)
   17fc4:	014000b4 	movhi	r5,2
   17fc8:	296c7b04 	addi	r5,r5,-19988
   17fcc:	0017acc0 	call	17acc <alt_find_dev>
   17fd0:	e0bff815 	stw	r2,-32(fp)
   17fd4:	e0bff817 	ldw	r2,-32(fp)
   17fd8:	1000051e 	bne	r2,zero,17ff0 <open+0x60>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
   17fdc:	e13ffd17 	ldw	r4,-12(fp)
   17fe0:	00185d80 	call	185d8 <alt_find_file>
   17fe4:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
   17fe8:	00800044 	movi	r2,1
   17fec:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
   17ff0:	e0bff817 	ldw	r2,-32(fp)
   17ff4:	10002926 	beq	r2,zero,1809c <open+0x10c>
  {
    if ((index = alt_get_fd (dev)) < 0)
   17ff8:	e13ff817 	ldw	r4,-32(fp)
   17ffc:	00186ec0 	call	186ec <alt_get_fd>
   18000:	e0bff915 	stw	r2,-28(fp)
   18004:	e0bff917 	ldw	r2,-28(fp)
   18008:	1000030e 	bge	r2,zero,18018 <open+0x88>
    {
      status = index;
   1800c:	e0bff917 	ldw	r2,-28(fp)
   18010:	e0bffa15 	stw	r2,-24(fp)
   18014:	00002306 	br	180a4 <open+0x114>
    }
    else
    {
      fd = &alt_fd_list[index];
   18018:	e0bff917 	ldw	r2,-28(fp)
   1801c:	10c00324 	muli	r3,r2,12
   18020:	008000b4 	movhi	r2,2
   18024:	10a71804 	addi	r2,r2,-25504
   18028:	1885883a 	add	r2,r3,r2
   1802c:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
   18030:	e0fffe17 	ldw	r3,-8(fp)
   18034:	00900034 	movhi	r2,16384
   18038:	10bfffc4 	addi	r2,r2,-1
   1803c:	1886703a 	and	r3,r3,r2
   18040:	e0bffc17 	ldw	r2,-16(fp)
   18044:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
   18048:	e0bffb17 	ldw	r2,-20(fp)
   1804c:	1000051e 	bne	r2,zero,18064 <open+0xd4>
   18050:	e13ffc17 	ldw	r4,-16(fp)
   18054:	0017ec40 	call	17ec4 <alt_file_locked>
   18058:	e0bffa15 	stw	r2,-24(fp)
   1805c:	e0bffa17 	ldw	r2,-24(fp)
   18060:	10001016 	blt	r2,zero,180a4 <open+0x114>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
   18064:	e0bff817 	ldw	r2,-32(fp)
   18068:	10800317 	ldw	r2,12(r2)
   1806c:	10000826 	beq	r2,zero,18090 <open+0x100>
   18070:	e0bff817 	ldw	r2,-32(fp)
   18074:	10800317 	ldw	r2,12(r2)
   18078:	e13ffc17 	ldw	r4,-16(fp)
   1807c:	e17ffd17 	ldw	r5,-12(fp)
   18080:	e1bffe17 	ldw	r6,-8(fp)
   18084:	e1ffff17 	ldw	r7,-4(fp)
   18088:	103ee83a 	callr	r2
   1808c:	00000106 	br	18094 <open+0x104>
   18090:	0005883a 	mov	r2,zero
   18094:	e0bffa15 	stw	r2,-24(fp)
   18098:	00000206 	br	180a4 <open+0x114>
      }
    }
  }
  else
  {
    status = -ENODEV;
   1809c:	00bffb44 	movi	r2,-19
   180a0:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
   180a4:	e0bffa17 	ldw	r2,-24(fp)
   180a8:	1000090e 	bge	r2,zero,180d0 <open+0x140>
  {
    alt_release_fd (index);  
   180ac:	e13ff917 	ldw	r4,-28(fp)
   180b0:	000cda80 	call	cda8 <alt_release_fd>
    ALT_ERRNO = -status;
   180b4:	0017e740 	call	17e74 <alt_get_errno>
   180b8:	1007883a 	mov	r3,r2
   180bc:	e0bffa17 	ldw	r2,-24(fp)
   180c0:	0085c83a 	sub	r2,zero,r2
   180c4:	18800015 	stw	r2,0(r3)
    return -1;
   180c8:	00bfffc4 	movi	r2,-1
   180cc:	00000106 	br	180d4 <open+0x144>
  }
  
  /* return the reference upon success */

  return index;
   180d0:	e0bff917 	ldw	r2,-28(fp)
}
   180d4:	e037883a 	mov	sp,fp
   180d8:	dfc00117 	ldw	ra,4(sp)
   180dc:	df000017 	ldw	fp,0(sp)
   180e0:	dec00204 	addi	sp,sp,8
   180e4:	f800283a 	ret

000180e8 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
   180e8:	defffa04 	addi	sp,sp,-24
   180ec:	df000515 	stw	fp,20(sp)
   180f0:	df000504 	addi	fp,sp,20
   180f4:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   180f8:	0005303a 	rdctl	r2,status
   180fc:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   18100:	e0fffc17 	ldw	r3,-16(fp)
   18104:	00bfff84 	movi	r2,-2
   18108:	1884703a 	and	r2,r3,r2
   1810c:	1001703a 	wrctl	status,r2
  
  return context;
   18110:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
   18114:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
   18118:	e0bfff17 	ldw	r2,-4(fp)
   1811c:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
   18120:	e0bffd17 	ldw	r2,-12(fp)
   18124:	10800017 	ldw	r2,0(r2)
   18128:	e0fffd17 	ldw	r3,-12(fp)
   1812c:	18c00117 	ldw	r3,4(r3)
   18130:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
   18134:	e0bffd17 	ldw	r2,-12(fp)
   18138:	10800117 	ldw	r2,4(r2)
   1813c:	e0fffd17 	ldw	r3,-12(fp)
   18140:	18c00017 	ldw	r3,0(r3)
   18144:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
   18148:	e0bffd17 	ldw	r2,-12(fp)
   1814c:	e0fffd17 	ldw	r3,-12(fp)
   18150:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
   18154:	e0bffd17 	ldw	r2,-12(fp)
   18158:	e0fffd17 	ldw	r3,-12(fp)
   1815c:	10c00015 	stw	r3,0(r2)
   18160:	e0bffb17 	ldw	r2,-20(fp)
   18164:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   18168:	e0bffe17 	ldw	r2,-8(fp)
   1816c:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
   18170:	e037883a 	mov	sp,fp
   18174:	df000017 	ldw	fp,0(sp)
   18178:	dec00104 	addi	sp,sp,4
   1817c:	f800283a 	ret

00018180 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
   18180:	defffb04 	addi	sp,sp,-20
   18184:	dfc00415 	stw	ra,16(sp)
   18188:	df000315 	stw	fp,12(sp)
   1818c:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
   18190:	d0a02c17 	ldw	r2,-32592(gp)
   18194:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
   18198:	d0a82117 	ldw	r2,-24444(gp)
   1819c:	10800044 	addi	r2,r2,1
   181a0:	d0a82115 	stw	r2,-24444(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   181a4:	00002e06 	br	18260 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
   181a8:	e0bffd17 	ldw	r2,-12(fp)
   181ac:	10800017 	ldw	r2,0(r2)
   181b0:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
   181b4:	e0bffd17 	ldw	r2,-12(fp)
   181b8:	10800403 	ldbu	r2,16(r2)
   181bc:	10803fcc 	andi	r2,r2,255
   181c0:	10000426 	beq	r2,zero,181d4 <alt_tick+0x54>
   181c4:	d0a82117 	ldw	r2,-24444(gp)
   181c8:	1000021e 	bne	r2,zero,181d4 <alt_tick+0x54>
    {
      alarm->rollover = 0;
   181cc:	e0bffd17 	ldw	r2,-12(fp)
   181d0:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
   181d4:	e0bffd17 	ldw	r2,-12(fp)
   181d8:	10800217 	ldw	r2,8(r2)
   181dc:	d0e82117 	ldw	r3,-24444(gp)
   181e0:	18801d36 	bltu	r3,r2,18258 <alt_tick+0xd8>
   181e4:	e0bffd17 	ldw	r2,-12(fp)
   181e8:	10800403 	ldbu	r2,16(r2)
   181ec:	10803fcc 	andi	r2,r2,255
   181f0:	1000191e 	bne	r2,zero,18258 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
   181f4:	e0bffd17 	ldw	r2,-12(fp)
   181f8:	10800317 	ldw	r2,12(r2)
   181fc:	e0fffd17 	ldw	r3,-12(fp)
   18200:	18c00517 	ldw	r3,20(r3)
   18204:	1809883a 	mov	r4,r3
   18208:	103ee83a 	callr	r2
   1820c:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
   18210:	e0bfff17 	ldw	r2,-4(fp)
   18214:	1000031e 	bne	r2,zero,18224 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
   18218:	e13ffd17 	ldw	r4,-12(fp)
   1821c:	00180e80 	call	180e8 <alt_alarm_stop>
   18220:	00000d06 	br	18258 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
   18224:	e0bffd17 	ldw	r2,-12(fp)
   18228:	10c00217 	ldw	r3,8(r2)
   1822c:	e0bfff17 	ldw	r2,-4(fp)
   18230:	1887883a 	add	r3,r3,r2
   18234:	e0bffd17 	ldw	r2,-12(fp)
   18238:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
   1823c:	e0bffd17 	ldw	r2,-12(fp)
   18240:	10c00217 	ldw	r3,8(r2)
   18244:	d0a82117 	ldw	r2,-24444(gp)
   18248:	1880032e 	bgeu	r3,r2,18258 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
   1824c:	e0bffd17 	ldw	r2,-12(fp)
   18250:	00c00044 	movi	r3,1
   18254:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
   18258:	e0bffe17 	ldw	r2,-8(fp)
   1825c:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   18260:	e0fffd17 	ldw	r3,-12(fp)
   18264:	d0a02c04 	addi	r2,gp,-32592
   18268:	18bfcf1e 	bne	r3,r2,181a8 <__alt_mem_Flash_flash_data+0xf40181a8>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
   1826c:	000dfb40 	call	dfb4 <OSTimeTick>
}
   18270:	e037883a 	mov	sp,fp
   18274:	dfc00117 	ldw	ra,4(sp)
   18278:	df000017 	ldw	fp,0(sp)
   1827c:	dec00204 	addi	sp,sp,8
   18280:	f800283a 	ret

00018284 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
   18284:	deffff04 	addi	sp,sp,-4
   18288:	df000015 	stw	fp,0(sp)
   1828c:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
   18290:	000170fa 	wrctl	ienable,zero
}
   18294:	e037883a 	mov	sp,fp
   18298:	df000017 	ldw	fp,0(sp)
   1829c:	dec00104 	addi	sp,sp,4
   182a0:	f800283a 	ret

000182a4 <OSCtxSw>:

      /* 
       * Save the remaining registers to the stack. 
       */

      addi sp, sp, -44
   182a4:	defff504 	addi	sp,sp,-44
      bltu  sp, et, .Lstack_overflow

#endif

#if OS_THREAD_SAFE_NEWLIB
      ldw r3, %gprel(_impure_ptr)(gp)   /* load the pointer */
   182a8:	d0e00117 	ldw	r3,-32764(gp)
#endif /* OS_THREAD_SAFE_NEWLIB */

      ldw r4, %gprel(OSTCBCur)(gp)
   182ac:	d1281a17 	ldw	r4,-24472(gp)

      stw ra,  0(sp)
   182b0:	dfc00015 	stw	ra,0(sp)
      stw fp,  4(sp)
   182b4:	df000115 	stw	fp,4(sp)
      stw r23, 8(sp)
   182b8:	ddc00215 	stw	r23,8(sp)
      stw r22, 12(sp)
   182bc:	dd800315 	stw	r22,12(sp)
      stw r21, 16(sp)
   182c0:	dd400415 	stw	r21,16(sp)
      stw r20, 20(sp)
   182c4:	dd000515 	stw	r20,20(sp)
      stw r19, 24(sp)
   182c8:	dcc00615 	stw	r19,24(sp)
      stw r18, 28(sp)
   182cc:	dc800715 	stw	r18,28(sp)
      stw r17, 32(sp)
   182d0:	dc400815 	stw	r17,32(sp)
      stw r16, 36(sp)
   182d4:	dc000915 	stw	r16,36(sp)
       * store the current value of _impure_ptr so it can be restored
       * later; _impure_ptr is asigned on a per task basis. It is used
       * by Newlib to achieve reentrancy.	
       */

      stw r3, 40(sp)                  /* save the impure pointer */
   182d8:	d8c00a15 	stw	r3,40(sp)
      /* 
       * Save the current tasks stack pointer into the current tasks OS_TCB.
       * i.e. OSTCBCur->OSTCBStkPtr = sp;
       */

      stw sp, (r4)                  /* save the stack pointer (OSTCBStkPtr */
   182dc:	26c00015 	stw	sp,0(r4)

      /*
       * Call the user definable OSTaskSWHook()
       */

      call OSTaskSwHook
   182e0:	00185100 	call	18510 <OSTaskSwHook>
      /*
       * OSTCBCur = OSTCBHighRdy; 
       * OSPrioCur = OSPrioHighRdy; 
       */

      ldw r4, %gprel(OSTCBHighRdy)(gp)
   182e4:	d1281517 	ldw	r4,-24492(gp)
      ldb r5, %gprel(OSPrioHighRdy)(gp)
   182e8:	d1680d07 	ldb	r5,-24524(gp)

      stw r4, %gprel(OSTCBCur)(gp)     /* set the current task to be the new task */
   182ec:	d1281a15 	stw	r4,-24472(gp)
      stb r5, %gprel(OSPrioCur)(gp)    /* store the new task's priority as the current */
   182f0:	d1680d45 	stb	r5,-24523(gp)

      /*
       * Set the stack pointer to point to the new task's stack
       */

      ldw sp, (r4) /* the stack pointer is the first entry in the OS_TCB structure */
   182f4:	26c00017 	ldw	sp,0(r4)
      /*
       * restore the value of _impure_ptr ; _impure_ptr is asigned on a 
       * per task basis. It is used by Newlib to achieve reentrancy.	
       */

      ldw r3, 40(sp)                  /* load the new impure pointer */
   182f8:	d8c00a17 	ldw	r3,40(sp)

      /*
       * Restore the saved registers for the new task.
       */

      ldw ra,  0(sp)
   182fc:	dfc00017 	ldw	ra,0(sp)
      ldw fp,  4(sp)
   18300:	df000117 	ldw	fp,4(sp)
      ldw r23, 8(sp)
   18304:	ddc00217 	ldw	r23,8(sp)
      ldw r22, 12(sp)
   18308:	dd800317 	ldw	r22,12(sp)
      ldw r21, 16(sp)
   1830c:	dd400417 	ldw	r21,16(sp)
      ldw r20, 20(sp)
   18310:	dd000517 	ldw	r20,20(sp)
      ldw r19, 24(sp)
   18314:	dcc00617 	ldw	r19,24(sp)
      ldw r18, 28(sp)
   18318:	dc800717 	ldw	r18,28(sp)
      ldw r17, 32(sp)
   1831c:	dc400817 	ldw	r17,32(sp)
      ldw r16, 36(sp)
   18320:	dc000917 	ldw	r16,36(sp)

#if OS_THREAD_SAFE_NEWLIB

      stw r3, %gprel(_impure_ptr)(gp) /* update _impure_ptr */
   18324:	d0e00115 	stw	r3,-32764(gp)

      stw et, %gprel(alt_stack_limit_value)(gp)

#endif

      addi sp, sp, 44
   18328:	dec00b04 	addi	sp,sp,44

      /*
       * resume execution of the new task.
       */

      ret
   1832c:	f800283a 	ret

00018330 <OSStartHighRdy>:

      /*
       * disable interrupts so that the scheduler doesn't run while
       * we're initialising this task.
       */  
      rdctl r18, status
   18330:	0025303a 	rdctl	r18,status
      subi  r17, zero, 2   /* r17 = 0xfffffffe */
   18334:	047fff84 	movi	r17,-2
      and   r18, r18, r17
   18338:	9464703a 	and	r18,r18,r17
      wrctl status, r18
   1833c:	9001703a 	wrctl	status,r18

      /*
       * Call the user definable OSTaskSWHook()
       */

      call OSTaskSwHook
   18340:	00185100 	call	18510 <OSTaskSwHook>

      /* 
       * set OSRunning = TRUE.
       */

      movi r18, 1                    /* set r18 to the value 'TRUE' */
   18344:	04800044 	movi	r18,1
      stb r18, %gprel(OSRunning)(gp) /* save this to OSRunning */
   18348:	d4a80b45 	stb	r18,-24531(gp)

      /*
       * start execution of the new task.
       */

      br 9b
   1834c:	003fe506 	br	182e4 <__alt_mem_Flash_flash_data+0xf40182e4>

00018350 <OSStartTsk>:

OSStartTsk:
      /* This instruction is never executed.  Its here to make the
       * backtrace work right 
       */
      movi sp, 0
   18350:	06c00004 	movi	sp,0

      /* Enable interrupts */
      rdctl r2, status
   18354:	0005303a 	rdctl	r2,status
      ori   r2, r2, 0x1
   18358:	10800054 	ori	r2,r2,1
      wrctl status, r2
   1835c:	1001703a 	wrctl	status,r2

      ldw r2, 4(sp)
   18360:	d8800117 	ldw	r2,4(sp)
      ldw r4, 0(sp)
   18364:	d9000017 	ldw	r4,0(sp)

      addi sp, sp, 8
   18368:	dec00204 	addi	sp,sp,8

      callr r2
   1836c:	103ee83a 	callr	r2

      nop
   18370:	0001883a 	nop

00018374 <OSTaskStkInit>:
 *              been placed on the stack in the proper order.
 *
 ***********************************************************************************************/

OS_STK *OSTaskStkInit(void (*task)(void *pd), void *pdata, OS_STK *pstk, INT16U opt)
{
   18374:	defff704 	addi	sp,sp,-36
   18378:	dfc00815 	stw	ra,32(sp)
   1837c:	df000715 	stw	fp,28(sp)
   18380:	df000704 	addi	fp,sp,28
   18384:	e13ffc15 	stw	r4,-16(fp)
   18388:	e17ffd15 	stw	r5,-12(fp)
   1838c:	e1bffe15 	stw	r6,-8(fp)
   18390:	3805883a 	mov	r2,r7
   18394:	e0bfff0d 	sth	r2,-4(fp)
    * create and initialise the impure pointer used for Newlib thread local storage.
    * This is only done if the C library is being used in a thread safe mode. Otherwise
    * a single reent structure is used for all threads, which saves memory.
    */

   local_impure_ptr = (struct _reent*)((((INT32U)(pstk)) & ~0x3) - sizeof(struct _reent));
   18398:	e0fffe17 	ldw	r3,-8(fp)
   1839c:	00bfff04 	movi	r2,-4
   183a0:	1884703a 	and	r2,r3,r2
   183a4:	10bef704 	addi	r2,r2,-1060
   183a8:	e0bff915 	stw	r2,-28(fp)

   _REENT_INIT_PTR (local_impure_ptr);
   183ac:	e13ff917 	ldw	r4,-28(fp)
   183b0:	000b883a 	mov	r5,zero
   183b4:	01810904 	movi	r6,1060
   183b8:	0008e4c0 	call	8e4c <memset>
   183bc:	e0bff917 	ldw	r2,-28(fp)
   183c0:	10c0bb04 	addi	r3,r2,748
   183c4:	e0bff917 	ldw	r2,-28(fp)
   183c8:	10c00115 	stw	r3,4(r2)
   183cc:	e0bff917 	ldw	r2,-28(fp)
   183d0:	10c0d504 	addi	r3,r2,852
   183d4:	e0bff917 	ldw	r2,-28(fp)
   183d8:	10c00215 	stw	r3,8(r2)
   183dc:	e0bff917 	ldw	r2,-28(fp)
   183e0:	10c0ef04 	addi	r3,r2,956
   183e4:	e0bff917 	ldw	r2,-28(fp)
   183e8:	10c00315 	stw	r3,12(r2)
   183ec:	e0fff917 	ldw	r3,-28(fp)
   183f0:	008000b4 	movhi	r2,2
   183f4:	10a4da04 	addi	r2,r2,-27800
   183f8:	18800d15 	stw	r2,52(r3)
   183fc:	e0bff917 	ldw	r2,-28(fp)
   18400:	00c00044 	movi	r3,1
   18404:	10c02915 	stw	r3,164(r2)
   18408:	10002a15 	stw	zero,168(r2)
   1840c:	e0bff917 	ldw	r2,-28(fp)
   18410:	00ccc384 	movi	r3,13070
   18414:	10c02b0d 	sth	r3,172(r2)
   18418:	e0bff917 	ldw	r2,-28(fp)
   1841c:	00eaf344 	movi	r3,-21555
   18420:	10c02b8d 	sth	r3,174(r2)
   18424:	e0bff917 	ldw	r2,-28(fp)
   18428:	00c48d04 	movi	r3,4660
   1842c:	10c02c0d 	sth	r3,176(r2)
   18430:	e0bff917 	ldw	r2,-28(fp)
   18434:	00f99b44 	movi	r3,-6547
   18438:	10c02c8d 	sth	r3,178(r2)
   1843c:	e0bff917 	ldw	r2,-28(fp)
   18440:	00f7bb04 	movi	r3,-8468
   18444:	10c02d0d 	sth	r3,180(r2)
   18448:	e0bff917 	ldw	r2,-28(fp)
   1844c:	00c00144 	movi	r3,5
   18450:	10c02d8d 	sth	r3,182(r2)
   18454:	e0bff917 	ldw	r2,-28(fp)
   18458:	00c002c4 	movi	r3,11
   1845c:	10c02e0d 	sth	r3,184(r2)
   /* 
    * create a stack frame at the top of the stack (leaving space for the 
    * reentrant data structure).
    */

   frame_pointer = (INT32U*) local_impure_ptr;
   18460:	e0bff917 	ldw	r2,-28(fp)
   18464:	e0bffa15 	stw	r2,-24(fp)
#else
   frame_pointer =   (INT32U*) (((INT32U)(pstk)) & ~0x3);
#endif /* OS_THREAD_SAFE_NEWLIB */
   stk = frame_pointer - 13;
   18468:	e0bffa17 	ldw	r2,-24(fp)
   1846c:	10bff304 	addi	r2,r2,-52
   18470:	e0bffb15 	stw	r2,-20(fp)

   /* Now fill the stack frame. */

   stk[12] = (INT32U)task;            /* task address (ra) */
   18474:	e0bffb17 	ldw	r2,-20(fp)
   18478:	10800c04 	addi	r2,r2,48
   1847c:	e0fffc17 	ldw	r3,-16(fp)
   18480:	10c00015 	stw	r3,0(r2)
   stk[11] = (INT32U) pdata;          /* first register argument (r4) */
   18484:	e0bffb17 	ldw	r2,-20(fp)
   18488:	10800b04 	addi	r2,r2,44
   1848c:	e0fffd17 	ldw	r3,-12(fp)
   18490:	10c00015 	stw	r3,0(r2)

#if OS_THREAD_SAFE_NEWLIB
   stk[10] = (INT32U) local_impure_ptr; /* value of _impure_ptr for this thread */
   18494:	e0bffb17 	ldw	r2,-20(fp)
   18498:	10800a04 	addi	r2,r2,40
   1849c:	e0fff917 	ldw	r3,-28(fp)
   184a0:	10c00015 	stw	r3,0(r2)
#endif /* OS_THREAD_SAFE_NEWLIB */
   stk[0]  = ((INT32U)&OSStartTsk) + 4;/* exception return address (ea) */  
   184a4:	008000b4 	movhi	r2,2
   184a8:	10a0d404 	addi	r2,r2,-31920
   184ac:	10c00104 	addi	r3,r2,4
   184b0:	e0bffb17 	ldw	r2,-20(fp)
   184b4:	10c00015 	stw	r3,0(r2)
    */
   __asm__ (".set OSTCBNext_OFFSET,%0" :: "i" (offsetof(OS_TCB, OSTCBNext)));
   __asm__ (".set OSTCBPrio_OFFSET,%0" :: "i" (offsetof(OS_TCB, OSTCBPrio)));
   __asm__ (".set OSTCBStkPtr_OFFSET,%0" :: "i" (offsetof(OS_TCB, OSTCBStkPtr)));
  
   return((OS_STK *)stk);
   184b8:	e0bffb17 	ldw	r2,-20(fp)
}
   184bc:	e037883a 	mov	sp,fp
   184c0:	dfc00117 	ldw	ra,4(sp)
   184c4:	df000017 	ldw	fp,0(sp)
   184c8:	dec00204 	addi	sp,sp,8
   184cc:	f800283a 	ret

000184d0 <OSTaskCreateHook>:
*
* Note(s)    : 1) Interrupts are disabled during this call.
*********************************************************************************************************
*/
void OSTaskCreateHook (OS_TCB *ptcb)
{
   184d0:	defffe04 	addi	sp,sp,-8
   184d4:	df000115 	stw	fp,4(sp)
   184d8:	df000104 	addi	fp,sp,4
   184dc:	e13fff15 	stw	r4,-4(fp)
    ptcb = ptcb;                       /* Prevent compiler warning */
}
   184e0:	e037883a 	mov	sp,fp
   184e4:	df000017 	ldw	fp,0(sp)
   184e8:	dec00104 	addi	sp,sp,4
   184ec:	f800283a 	ret

000184f0 <OSTaskDelHook>:
*
* Note(s)    : 1) Interrupts are disabled during this call.
*********************************************************************************************************
*/
void OSTaskDelHook (OS_TCB *ptcb)
{
   184f0:	defffe04 	addi	sp,sp,-8
   184f4:	df000115 	stw	fp,4(sp)
   184f8:	df000104 	addi	fp,sp,4
   184fc:	e13fff15 	stw	r4,-4(fp)
    ptcb = ptcb;                       /* Prevent compiler warning                                     */
}
   18500:	e037883a 	mov	sp,fp
   18504:	df000017 	ldw	fp,0(sp)
   18508:	dec00104 	addi	sp,sp,4
   1850c:	f800283a 	ret

00018510 <OSTaskSwHook>:
*                 will be 'switched in' (i.e. the highest priority task) and, 'OSTCBCur' points to the
*                 task being switched out (i.e. the preempted task).
*********************************************************************************************************
*/
void OSTaskSwHook (void)
{
   18510:	deffff04 	addi	sp,sp,-4
   18514:	df000015 	stw	fp,0(sp)
   18518:	d839883a 	mov	fp,sp
}
   1851c:	e037883a 	mov	sp,fp
   18520:	df000017 	ldw	fp,0(sp)
   18524:	dec00104 	addi	sp,sp,4
   18528:	f800283a 	ret

0001852c <OSTaskStatHook>:
*
* Arguments  : none
*********************************************************************************************************
*/
void OSTaskStatHook (void)
{
   1852c:	deffff04 	addi	sp,sp,-4
   18530:	df000015 	stw	fp,0(sp)
   18534:	d839883a 	mov	fp,sp
}
   18538:	e037883a 	mov	sp,fp
   1853c:	df000017 	ldw	fp,0(sp)
   18540:	dec00104 	addi	sp,sp,4
   18544:	f800283a 	ret

00018548 <OSTimeTickHook>:
#ifdef ALT_INICHE
void cticks_hook(void);
#endif

void OSTimeTickHook (void)
{
   18548:	deffff04 	addi	sp,sp,-4
   1854c:	df000015 	stw	fp,0(sp)
   18550:	d839883a 	mov	fp,sp
    
#ifdef ALT_INICHE
    /* Service the Interniche timer */
    cticks_hook();
#endif
}
   18554:	e037883a 	mov	sp,fp
   18558:	df000017 	ldw	fp,0(sp)
   1855c:	dec00104 	addi	sp,sp,4
   18560:	f800283a 	ret

00018564 <OSInitHookBegin>:

void OSInitHookBegin(void)
{
   18564:	deffff04 	addi	sp,sp,-4
   18568:	df000015 	stw	fp,0(sp)
   1856c:	d839883a 	mov	fp,sp
#if OS_TMR_EN > 0
    OSTmrCtr = 0;
#endif
}
   18570:	e037883a 	mov	sp,fp
   18574:	df000017 	ldw	fp,0(sp)
   18578:	dec00104 	addi	sp,sp,4
   1857c:	f800283a 	ret

00018580 <OSInitHookEnd>:

void OSInitHookEnd(void)
{
   18580:	deffff04 	addi	sp,sp,-4
   18584:	df000015 	stw	fp,0(sp)
   18588:	d839883a 	mov	fp,sp
}
   1858c:	e037883a 	mov	sp,fp
   18590:	df000017 	ldw	fp,0(sp)
   18594:	dec00104 	addi	sp,sp,4
   18598:	f800283a 	ret

0001859c <OSTaskIdleHook>:

void OSTaskIdleHook(void)
{
   1859c:	deffff04 	addi	sp,sp,-4
   185a0:	df000015 	stw	fp,0(sp)
   185a4:	d839883a 	mov	fp,sp
}
   185a8:	e037883a 	mov	sp,fp
   185ac:	df000017 	ldw	fp,0(sp)
   185b0:	dec00104 	addi	sp,sp,4
   185b4:	f800283a 	ret

000185b8 <OSTCBInitHook>:

void OSTCBInitHook(OS_TCB *ptcb)
{
   185b8:	defffe04 	addi	sp,sp,-8
   185bc:	df000115 	stw	fp,4(sp)
   185c0:	df000104 	addi	fp,sp,4
   185c4:	e13fff15 	stw	r4,-4(fp)
}
   185c8:	e037883a 	mov	sp,fp
   185cc:	df000017 	ldw	fp,0(sp)
   185d0:	dec00104 	addi	sp,sp,4
   185d4:	f800283a 	ret

000185d8 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
   185d8:	defffb04 	addi	sp,sp,-20
   185dc:	dfc00415 	stw	ra,16(sp)
   185e0:	df000315 	stw	fp,12(sp)
   185e4:	df000304 	addi	fp,sp,12
   185e8:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
   185ec:	008000b4 	movhi	r2,2
   185f0:	10ac7904 	addi	r2,r2,-19996
   185f4:	10800017 	ldw	r2,0(r2)
   185f8:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   185fc:	00003106 	br	186c4 <alt_find_file+0xec>
  {
    len = strlen(next->name);
   18600:	e0bffd17 	ldw	r2,-12(fp)
   18604:	10800217 	ldw	r2,8(r2)
   18608:	1009883a 	mov	r4,r2
   1860c:	0000c200 	call	c20 <strlen>
   18610:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
   18614:	e0bffd17 	ldw	r2,-12(fp)
   18618:	10c00217 	ldw	r3,8(r2)
   1861c:	e0bffe17 	ldw	r2,-8(fp)
   18620:	10bfffc4 	addi	r2,r2,-1
   18624:	1885883a 	add	r2,r3,r2
   18628:	10800003 	ldbu	r2,0(r2)
   1862c:	10803fcc 	andi	r2,r2,255
   18630:	1080201c 	xori	r2,r2,128
   18634:	10bfe004 	addi	r2,r2,-128
   18638:	10800bd8 	cmpnei	r2,r2,47
   1863c:	1000031e 	bne	r2,zero,1864c <alt_find_file+0x74>
    {
      len -= 1;
   18640:	e0bffe17 	ldw	r2,-8(fp)
   18644:	10bfffc4 	addi	r2,r2,-1
   18648:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   1864c:	e0bffe17 	ldw	r2,-8(fp)
   18650:	e0ffff17 	ldw	r3,-4(fp)
   18654:	1885883a 	add	r2,r3,r2
   18658:	10800003 	ldbu	r2,0(r2)
   1865c:	10803fcc 	andi	r2,r2,255
   18660:	1080201c 	xori	r2,r2,128
   18664:	10bfe004 	addi	r2,r2,-128
   18668:	10800be0 	cmpeqi	r2,r2,47
   1866c:	1000081e 	bne	r2,zero,18690 <alt_find_file+0xb8>
   18670:	e0bffe17 	ldw	r2,-8(fp)
   18674:	e0ffff17 	ldw	r3,-4(fp)
   18678:	1885883a 	add	r2,r3,r2
   1867c:	10800003 	ldbu	r2,0(r2)
   18680:	10803fcc 	andi	r2,r2,255
   18684:	1080201c 	xori	r2,r2,128
   18688:	10bfe004 	addi	r2,r2,-128
   1868c:	10000a1e 	bne	r2,zero,186b8 <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
   18690:	e0bffd17 	ldw	r2,-12(fp)
   18694:	10c00217 	ldw	r3,8(r2)
   18698:	e0bffe17 	ldw	r2,-8(fp)
   1869c:	1809883a 	mov	r4,r3
   186a0:	e17fff17 	ldw	r5,-4(fp)
   186a4:	100d883a 	mov	r6,r2
   186a8:	001895c0 	call	1895c <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   186ac:	1000021e 	bne	r2,zero,186b8 <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
   186b0:	e0bffd17 	ldw	r2,-12(fp)
   186b4:	00000806 	br	186d8 <alt_find_file+0x100>
    }
    next = (alt_dev*) next->llist.next;
   186b8:	e0bffd17 	ldw	r2,-12(fp)
   186bc:	10800017 	ldw	r2,0(r2)
   186c0:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   186c4:	e0fffd17 	ldw	r3,-12(fp)
   186c8:	008000b4 	movhi	r2,2
   186cc:	10ac7904 	addi	r2,r2,-19996
   186d0:	18bfcb1e 	bne	r3,r2,18600 <__alt_mem_Flash_flash_data+0xf4018600>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
   186d4:	0005883a 	mov	r2,zero
}
   186d8:	e037883a 	mov	sp,fp
   186dc:	dfc00117 	ldw	ra,4(sp)
   186e0:	df000017 	ldw	fp,0(sp)
   186e4:	dec00204 	addi	sp,sp,8
   186e8:	f800283a 	ret

000186ec <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
   186ec:	defff904 	addi	sp,sp,-28
   186f0:	dfc00615 	stw	ra,24(sp)
   186f4:	df000515 	stw	fp,20(sp)
   186f8:	df000504 	addi	fp,sp,20
   186fc:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
   18700:	00bffa04 	movi	r2,-24
   18704:	e0bffc15 	stw	r2,-16(fp)
  /* 
   * Take the alt_fd_list_lock semaphore in order to avoid races when 
   * accessing the file descriptor pool.
   */
  
  ALT_SEM_PEND(alt_fd_list_lock, 0);
   18708:	008000b4 	movhi	r2,2
   1870c:	10b47704 	addi	r2,r2,-11812
   18710:	10800017 	ldw	r2,0(r2)
   18714:	e0bffd15 	stw	r2,-12(fp)
   18718:	e03ffe0d 	sth	zero,-8(fp)
   1871c:	e0fffe0b 	ldhu	r3,-8(fp)
   18720:	e0bffe84 	addi	r2,fp,-6
   18724:	e13ffd17 	ldw	r4,-12(fp)
   18728:	180b883a 	mov	r5,r3
   1872c:	100d883a 	mov	r6,r2
   18730:	0012a500 	call	12a50 <OSSemPend>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   18734:	e03ffb15 	stw	zero,-20(fp)
   18738:	00001d06 	br	187b0 <alt_get_fd+0xc4>
  {
    if (!alt_fd_list[i].dev)
   1873c:	008000b4 	movhi	r2,2
   18740:	10a71804 	addi	r2,r2,-25504
   18744:	e0fffb17 	ldw	r3,-20(fp)
   18748:	18c00324 	muli	r3,r3,12
   1874c:	10c5883a 	add	r2,r2,r3
   18750:	10800017 	ldw	r2,0(r2)
   18754:	1000131e 	bne	r2,zero,187a4 <alt_get_fd+0xb8>
    {
      alt_fd_list[i].dev = dev;
   18758:	008000b4 	movhi	r2,2
   1875c:	10a71804 	addi	r2,r2,-25504
   18760:	e0fffb17 	ldw	r3,-20(fp)
   18764:	18c00324 	muli	r3,r3,12
   18768:	10c5883a 	add	r2,r2,r3
   1876c:	e0ffff17 	ldw	r3,-4(fp)
   18770:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
   18774:	008000b4 	movhi	r2,2
   18778:	10ac7d04 	addi	r2,r2,-19980
   1877c:	10c00017 	ldw	r3,0(r2)
   18780:	e0bffb17 	ldw	r2,-20(fp)
   18784:	1880040e 	bge	r3,r2,18798 <alt_get_fd+0xac>
      {
        alt_max_fd = i;
   18788:	008000b4 	movhi	r2,2
   1878c:	10ac7d04 	addi	r2,r2,-19980
   18790:	e0fffb17 	ldw	r3,-20(fp)
   18794:	10c00015 	stw	r3,0(r2)
      }
      rc = i;
   18798:	e0bffb17 	ldw	r2,-20(fp)
   1879c:	e0bffc15 	stw	r2,-16(fp)
      goto alt_get_fd_exit;
   187a0:	00000606 	br	187bc <alt_get_fd+0xd0>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   187a4:	e0bffb17 	ldw	r2,-20(fp)
   187a8:	10800044 	addi	r2,r2,1
   187ac:	e0bffb15 	stw	r2,-20(fp)
   187b0:	e0bffb17 	ldw	r2,-20(fp)
   187b4:	10800810 	cmplti	r2,r2,32
   187b8:	103fe01e 	bne	r2,zero,1873c <__alt_mem_Flash_flash_data+0xf401873c>
  /*
   * Release the alt_fd_list_lock semaphore now that we are done with the
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);
   187bc:	008000b4 	movhi	r2,2
   187c0:	10b47704 	addi	r2,r2,-11812
   187c4:	10800017 	ldw	r2,0(r2)
   187c8:	1009883a 	mov	r4,r2
   187cc:	0012e240 	call	12e24 <OSSemPost>

  return rc;
   187d0:	e0bffc17 	ldw	r2,-16(fp)
}
   187d4:	e037883a 	mov	sp,fp
   187d8:	dfc00117 	ldw	ra,4(sp)
   187dc:	df000017 	ldw	fp,0(sp)
   187e0:	dec00204 	addi	sp,sp,8
   187e4:	f800283a 	ret

000187e8 <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
   187e8:	defffb04 	addi	sp,sp,-20
   187ec:	df000415 	stw	fp,16(sp)
   187f0:	df000404 	addi	fp,sp,16
   187f4:	e13ffe15 	stw	r4,-8(fp)
   187f8:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
   187fc:	e0bfff17 	ldw	r2,-4(fp)
   18800:	10840070 	cmpltui	r2,r2,4097
   18804:	1000021e 	bne	r2,zero,18810 <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
   18808:	00840004 	movi	r2,4096
   1880c:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
   18810:	e0fffe17 	ldw	r3,-8(fp)
   18814:	e0bfff17 	ldw	r2,-4(fp)
   18818:	1885883a 	add	r2,r3,r2
   1881c:	e0bffd15 	stw	r2,-12(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
   18820:	e0bffe17 	ldw	r2,-8(fp)
   18824:	e0bffc15 	stw	r2,-16(fp)
   18828:	00000506 	br	18840 <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
   1882c:	e0bffc17 	ldw	r2,-16(fp)
   18830:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
   18834:	e0bffc17 	ldw	r2,-16(fp)
   18838:	10800804 	addi	r2,r2,32
   1883c:	e0bffc15 	stw	r2,-16(fp)
   18840:	e0fffc17 	ldw	r3,-16(fp)
   18844:	e0bffd17 	ldw	r2,-12(fp)
   18848:	18bff836 	bltu	r3,r2,1882c <__alt_mem_Flash_flash_data+0xf401882c>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
   1884c:	e0bffe17 	ldw	r2,-8(fp)
   18850:	108007cc 	andi	r2,r2,31
   18854:	10000226 	beq	r2,zero,18860 <alt_icache_flush+0x78>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
   18858:	e0bffc17 	ldw	r2,-16(fp)
   1885c:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
   18860:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
   18864:	e037883a 	mov	sp,fp
   18868:	df000017 	ldw	fp,0(sp)
   1886c:	dec00104 	addi	sp,sp,4
   18870:	f800283a 	ret

00018874 <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
   18874:	defffe04 	addi	sp,sp,-8
   18878:	df000115 	stw	fp,4(sp)
   1887c:	df000104 	addi	fp,sp,4
   18880:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
   18884:	e0bfff17 	ldw	r2,-4(fp)
   18888:	10bffe84 	addi	r2,r2,-6
   1888c:	10c00428 	cmpgeui	r3,r2,16
   18890:	18001a1e 	bne	r3,zero,188fc <alt_exception_cause_generated_bad_addr+0x88>
   18894:	100690ba 	slli	r3,r2,2
   18898:	008000b4 	movhi	r2,2
   1889c:	10a22b04 	addi	r2,r2,-30548
   188a0:	1885883a 	add	r2,r3,r2
   188a4:	10800017 	ldw	r2,0(r2)
   188a8:	1000683a 	jmp	r2
   188ac:	000188ec 	andhi	zero,zero,1571
   188b0:	000188ec 	andhi	zero,zero,1571
   188b4:	000188fc 	xorhi	zero,zero,1571
   188b8:	000188fc 	xorhi	zero,zero,1571
   188bc:	000188fc 	xorhi	zero,zero,1571
   188c0:	000188ec 	andhi	zero,zero,1571
   188c4:	000188f4 	movhi	zero,1571
   188c8:	000188fc 	xorhi	zero,zero,1571
   188cc:	000188ec 	andhi	zero,zero,1571
   188d0:	000188ec 	andhi	zero,zero,1571
   188d4:	000188fc 	xorhi	zero,zero,1571
   188d8:	000188ec 	andhi	zero,zero,1571
   188dc:	000188f4 	movhi	zero,1571
   188e0:	000188fc 	xorhi	zero,zero,1571
   188e4:	000188fc 	xorhi	zero,zero,1571
   188e8:	000188ec 	andhi	zero,zero,1571
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
   188ec:	00800044 	movi	r2,1
   188f0:	00000306 	br	18900 <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
   188f4:	0005883a 	mov	r2,zero
   188f8:	00000106 	br	18900 <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
   188fc:	0005883a 	mov	r2,zero
  }
}
   18900:	e037883a 	mov	sp,fp
   18904:	df000017 	ldw	fp,0(sp)
   18908:	dec00104 	addi	sp,sp,4
   1890c:	f800283a 	ret

00018910 <atexit>:
   18910:	200b883a 	mov	r5,r4
   18914:	000d883a 	mov	r6,zero
   18918:	0009883a 	mov	r4,zero
   1891c:	000f883a 	mov	r7,zero
   18920:	00189d81 	jmpi	189d8 <__register_exitproc>

00018924 <exit>:
   18924:	defffe04 	addi	sp,sp,-8
   18928:	000b883a 	mov	r5,zero
   1892c:	dc000015 	stw	r16,0(sp)
   18930:	dfc00115 	stw	ra,4(sp)
   18934:	2021883a 	mov	r16,r4
   18938:	0018aec0 	call	18aec <__call_exitprocs>
   1893c:	008000b4 	movhi	r2,2
   18940:	10ac7404 	addi	r2,r2,-20016
   18944:	11000017 	ldw	r4,0(r2)
   18948:	20800f17 	ldw	r2,60(r4)
   1894c:	10000126 	beq	r2,zero,18954 <exit+0x30>
   18950:	103ee83a 	callr	r2
   18954:	8009883a 	mov	r4,r16
   18958:	0018c800 	call	18c80 <_exit>

0001895c <memcmp>:
   1895c:	01c000c4 	movi	r7,3
   18960:	3980192e 	bgeu	r7,r6,189c8 <memcmp+0x6c>
   18964:	2144b03a 	or	r2,r4,r5
   18968:	11c4703a 	and	r2,r2,r7
   1896c:	10000f26 	beq	r2,zero,189ac <memcmp+0x50>
   18970:	20800003 	ldbu	r2,0(r4)
   18974:	28c00003 	ldbu	r3,0(r5)
   18978:	10c0151e 	bne	r2,r3,189d0 <memcmp+0x74>
   1897c:	31bfff84 	addi	r6,r6,-2
   18980:	01ffffc4 	movi	r7,-1
   18984:	00000406 	br	18998 <memcmp+0x3c>
   18988:	20800003 	ldbu	r2,0(r4)
   1898c:	28c00003 	ldbu	r3,0(r5)
   18990:	31bfffc4 	addi	r6,r6,-1
   18994:	10c00e1e 	bne	r2,r3,189d0 <memcmp+0x74>
   18998:	21000044 	addi	r4,r4,1
   1899c:	29400044 	addi	r5,r5,1
   189a0:	31fff91e 	bne	r6,r7,18988 <__alt_mem_Flash_flash_data+0xf4018988>
   189a4:	0005883a 	mov	r2,zero
   189a8:	f800283a 	ret
   189ac:	20c00017 	ldw	r3,0(r4)
   189b0:	28800017 	ldw	r2,0(r5)
   189b4:	1880041e 	bne	r3,r2,189c8 <memcmp+0x6c>
   189b8:	31bfff04 	addi	r6,r6,-4
   189bc:	21000104 	addi	r4,r4,4
   189c0:	29400104 	addi	r5,r5,4
   189c4:	39bff936 	bltu	r7,r6,189ac <__alt_mem_Flash_flash_data+0xf40189ac>
   189c8:	303fe91e 	bne	r6,zero,18970 <__alt_mem_Flash_flash_data+0xf4018970>
   189cc:	003ff506 	br	189a4 <__alt_mem_Flash_flash_data+0xf40189a4>
   189d0:	10c5c83a 	sub	r2,r2,r3
   189d4:	f800283a 	ret

000189d8 <__register_exitproc>:
   189d8:	008000b4 	movhi	r2,2
   189dc:	defffa04 	addi	sp,sp,-24
   189e0:	10ac7404 	addi	r2,r2,-20016
   189e4:	dc000315 	stw	r16,12(sp)
   189e8:	14000017 	ldw	r16,0(r2)
   189ec:	dc400415 	stw	r17,16(sp)
   189f0:	dfc00515 	stw	ra,20(sp)
   189f4:	80805217 	ldw	r2,328(r16)
   189f8:	2023883a 	mov	r17,r4
   189fc:	10003626 	beq	r2,zero,18ad8 <__register_exitproc+0x100>
   18a00:	10c00117 	ldw	r3,4(r2)
   18a04:	010007c4 	movi	r4,31
   18a08:	20c00e16 	blt	r4,r3,18a44 <__register_exitproc+0x6c>
   18a0c:	1a400044 	addi	r9,r3,1
   18a10:	8800211e 	bne	r17,zero,18a98 <__register_exitproc+0xc0>
   18a14:	18c00084 	addi	r3,r3,2
   18a18:	18c7883a 	add	r3,r3,r3
   18a1c:	18c7883a 	add	r3,r3,r3
   18a20:	12400115 	stw	r9,4(r2)
   18a24:	10c7883a 	add	r3,r2,r3
   18a28:	19400015 	stw	r5,0(r3)
   18a2c:	0005883a 	mov	r2,zero
   18a30:	dfc00517 	ldw	ra,20(sp)
   18a34:	dc400417 	ldw	r17,16(sp)
   18a38:	dc000317 	ldw	r16,12(sp)
   18a3c:	dec00604 	addi	sp,sp,24
   18a40:	f800283a 	ret
   18a44:	00800034 	movhi	r2,0
   18a48:	10800004 	addi	r2,r2,0
   18a4c:	10002526 	beq	r2,zero,18ae4 <__register_exitproc+0x10c>
   18a50:	01006404 	movi	r4,400
   18a54:	d9400015 	stw	r5,0(sp)
   18a58:	d9800115 	stw	r6,4(sp)
   18a5c:	d9c00215 	stw	r7,8(sp)
   18a60:	00000000 	call	0 <__alt_mem_SDRAM>
   18a64:	d9400017 	ldw	r5,0(sp)
   18a68:	d9800117 	ldw	r6,4(sp)
   18a6c:	d9c00217 	ldw	r7,8(sp)
   18a70:	10001c26 	beq	r2,zero,18ae4 <__register_exitproc+0x10c>
   18a74:	80c05217 	ldw	r3,328(r16)
   18a78:	10000115 	stw	zero,4(r2)
   18a7c:	02400044 	movi	r9,1
   18a80:	10c00015 	stw	r3,0(r2)
   18a84:	80805215 	stw	r2,328(r16)
   18a88:	10006215 	stw	zero,392(r2)
   18a8c:	10006315 	stw	zero,396(r2)
   18a90:	0007883a 	mov	r3,zero
   18a94:	883fdf26 	beq	r17,zero,18a14 <__alt_mem_Flash_flash_data+0xf4018a14>
   18a98:	18d1883a 	add	r8,r3,r3
   18a9c:	4211883a 	add	r8,r8,r8
   18aa0:	1211883a 	add	r8,r2,r8
   18aa4:	41802215 	stw	r6,136(r8)
   18aa8:	01000044 	movi	r4,1
   18aac:	11806217 	ldw	r6,392(r2)
   18ab0:	20c8983a 	sll	r4,r4,r3
   18ab4:	310cb03a 	or	r6,r6,r4
   18ab8:	11806215 	stw	r6,392(r2)
   18abc:	41c04215 	stw	r7,264(r8)
   18ac0:	01800084 	movi	r6,2
   18ac4:	89bfd31e 	bne	r17,r6,18a14 <__alt_mem_Flash_flash_data+0xf4018a14>
   18ac8:	11806317 	ldw	r6,396(r2)
   18acc:	3108b03a 	or	r4,r6,r4
   18ad0:	11006315 	stw	r4,396(r2)
   18ad4:	003fcf06 	br	18a14 <__alt_mem_Flash_flash_data+0xf4018a14>
   18ad8:	80805304 	addi	r2,r16,332
   18adc:	80805215 	stw	r2,328(r16)
   18ae0:	003fc706 	br	18a00 <__alt_mem_Flash_flash_data+0xf4018a00>
   18ae4:	00bfffc4 	movi	r2,-1
   18ae8:	003fd106 	br	18a30 <__alt_mem_Flash_flash_data+0xf4018a30>

00018aec <__call_exitprocs>:
   18aec:	008000b4 	movhi	r2,2
   18af0:	10ac7404 	addi	r2,r2,-20016
   18af4:	10800017 	ldw	r2,0(r2)
   18af8:	defff404 	addi	sp,sp,-48
   18afc:	dd800815 	stw	r22,32(sp)
   18b00:	d8800015 	stw	r2,0(sp)
   18b04:	10805204 	addi	r2,r2,328
   18b08:	dd000615 	stw	r20,24(sp)
   18b0c:	dc800415 	stw	r18,16(sp)
   18b10:	dfc00b15 	stw	ra,44(sp)
   18b14:	df000a15 	stw	fp,40(sp)
   18b18:	ddc00915 	stw	r23,36(sp)
   18b1c:	dd400715 	stw	r21,28(sp)
   18b20:	dcc00515 	stw	r19,20(sp)
   18b24:	dc400315 	stw	r17,12(sp)
   18b28:	dc000215 	stw	r16,8(sp)
   18b2c:	2025883a 	mov	r18,r4
   18b30:	2829883a 	mov	r20,r5
   18b34:	d8800115 	stw	r2,4(sp)
   18b38:	05bfffc4 	movi	r22,-1
   18b3c:	d8800017 	ldw	r2,0(sp)
   18b40:	14c05217 	ldw	r19,328(r2)
   18b44:	98001d26 	beq	r19,zero,18bbc <__call_exitprocs+0xd0>
   18b48:	dd400117 	ldw	r21,4(sp)
   18b4c:	98800117 	ldw	r2,4(r19)
   18b50:	173fffc4 	addi	fp,r2,-1
   18b54:	e0000d16 	blt	fp,zero,18b8c <__call_exitprocs+0xa0>
   18b58:	14000044 	addi	r16,r2,1
   18b5c:	8421883a 	add	r16,r16,r16
   18b60:	8421883a 	add	r16,r16,r16
   18b64:	84402004 	addi	r17,r16,128
   18b68:	9c63883a 	add	r17,r19,r17
   18b6c:	9c21883a 	add	r16,r19,r16
   18b70:	a0001e26 	beq	r20,zero,18bec <__call_exitprocs+0x100>
   18b74:	80804017 	ldw	r2,256(r16)
   18b78:	15001c26 	beq	r2,r20,18bec <__call_exitprocs+0x100>
   18b7c:	e73fffc4 	addi	fp,fp,-1
   18b80:	843fff04 	addi	r16,r16,-4
   18b84:	8c7fff04 	addi	r17,r17,-4
   18b88:	e5bff91e 	bne	fp,r22,18b70 <__alt_mem_Flash_flash_data+0xf4018b70>
   18b8c:	00800034 	movhi	r2,0
   18b90:	10800004 	addi	r2,r2,0
   18b94:	10000926 	beq	r2,zero,18bbc <__call_exitprocs+0xd0>
   18b98:	98800117 	ldw	r2,4(r19)
   18b9c:	1000311e 	bne	r2,zero,18c64 <__call_exitprocs+0x178>
   18ba0:	98800017 	ldw	r2,0(r19)
   18ba4:	10003426 	beq	r2,zero,18c78 <__call_exitprocs+0x18c>
   18ba8:	9809883a 	mov	r4,r19
   18bac:	a8800015 	stw	r2,0(r21)
   18bb0:	00000000 	call	0 <__alt_mem_SDRAM>
   18bb4:	acc00017 	ldw	r19,0(r21)
   18bb8:	983fe41e 	bne	r19,zero,18b4c <__alt_mem_Flash_flash_data+0xf4018b4c>
   18bbc:	dfc00b17 	ldw	ra,44(sp)
   18bc0:	df000a17 	ldw	fp,40(sp)
   18bc4:	ddc00917 	ldw	r23,36(sp)
   18bc8:	dd800817 	ldw	r22,32(sp)
   18bcc:	dd400717 	ldw	r21,28(sp)
   18bd0:	dd000617 	ldw	r20,24(sp)
   18bd4:	dcc00517 	ldw	r19,20(sp)
   18bd8:	dc800417 	ldw	r18,16(sp)
   18bdc:	dc400317 	ldw	r17,12(sp)
   18be0:	dc000217 	ldw	r16,8(sp)
   18be4:	dec00c04 	addi	sp,sp,48
   18be8:	f800283a 	ret
   18bec:	98800117 	ldw	r2,4(r19)
   18bf0:	80c00017 	ldw	r3,0(r16)
   18bf4:	10bfffc4 	addi	r2,r2,-1
   18bf8:	17001526 	beq	r2,fp,18c50 <__call_exitprocs+0x164>
   18bfc:	80000015 	stw	zero,0(r16)
   18c00:	183fde26 	beq	r3,zero,18b7c <__alt_mem_Flash_flash_data+0xf4018b7c>
   18c04:	00800044 	movi	r2,1
   18c08:	1708983a 	sll	r4,r2,fp
   18c0c:	98806217 	ldw	r2,392(r19)
   18c10:	9dc00117 	ldw	r23,4(r19)
   18c14:	2084703a 	and	r2,r4,r2
   18c18:	1000061e 	bne	r2,zero,18c34 <__call_exitprocs+0x148>
   18c1c:	183ee83a 	callr	r3
   18c20:	98800117 	ldw	r2,4(r19)
   18c24:	15ffc51e 	bne	r2,r23,18b3c <__alt_mem_Flash_flash_data+0xf4018b3c>
   18c28:	a8800017 	ldw	r2,0(r21)
   18c2c:	14ffd326 	beq	r2,r19,18b7c <__alt_mem_Flash_flash_data+0xf4018b7c>
   18c30:	003fc206 	br	18b3c <__alt_mem_Flash_flash_data+0xf4018b3c>
   18c34:	98806317 	ldw	r2,396(r19)
   18c38:	2084703a 	and	r2,r4,r2
   18c3c:	1000061e 	bne	r2,zero,18c58 <__call_exitprocs+0x16c>
   18c40:	89400017 	ldw	r5,0(r17)
   18c44:	9009883a 	mov	r4,r18
   18c48:	183ee83a 	callr	r3
   18c4c:	003ff406 	br	18c20 <__alt_mem_Flash_flash_data+0xf4018c20>
   18c50:	9f000115 	stw	fp,4(r19)
   18c54:	003fea06 	br	18c00 <__alt_mem_Flash_flash_data+0xf4018c00>
   18c58:	89000017 	ldw	r4,0(r17)
   18c5c:	183ee83a 	callr	r3
   18c60:	003fef06 	br	18c20 <__alt_mem_Flash_flash_data+0xf4018c20>
   18c64:	98800017 	ldw	r2,0(r19)
   18c68:	982b883a 	mov	r21,r19
   18c6c:	1027883a 	mov	r19,r2
   18c70:	983fb61e 	bne	r19,zero,18b4c <__alt_mem_Flash_flash_data+0xf4018b4c>
   18c74:	003fd106 	br	18bbc <__alt_mem_Flash_flash_data+0xf4018bbc>
   18c78:	0005883a 	mov	r2,zero
   18c7c:	003ffa06 	br	18c68 <__alt_mem_Flash_flash_data+0xf4018c68>

00018c80 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
   18c80:	defffd04 	addi	sp,sp,-12
   18c84:	df000215 	stw	fp,8(sp)
   18c88:	df000204 	addi	fp,sp,8
   18c8c:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
   18c90:	008000b4 	movhi	r2,2
   18c94:	10b47f44 	addi	r2,r2,-11779
   18c98:	10000005 	stb	zero,0(r2)
   18c9c:	e0bfff17 	ldw	r2,-4(fp)
   18ca0:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
   18ca4:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
   18ca8:	10000226 	beq	r2,zero,18cb4 <_exit+0x34>
    ALT_SIM_FAIL();
   18cac:	002af070 	cmpltui	zero,zero,43969
   18cb0:	00000106 	br	18cb8 <_exit+0x38>
  } else {
    ALT_SIM_PASS();
   18cb4:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
   18cb8:	003fff06 	br	18cb8 <__alt_mem_Flash_flash_data+0xf4018cb8>
