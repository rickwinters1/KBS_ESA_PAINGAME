
KBS_ESA.elf:     file format elf32-littlenios2
KBS_ESA.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00000244

Program Header:
    LOAD off    0x00001000 vaddr 0x00000000 paddr 0x00000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00000020 paddr 0x00000020 align 2**12
         filesz 0x00019c60 memsz 0x00019c60 flags r-x
    LOAD off    0x0001ac80 vaddr 0x00019c80 paddr 0x0001bba0 align 2**12
         filesz 0x00001f20 memsz 0x00001f20 flags rw-
    LOAD off    0x0001dac0 vaddr 0x0001dac0 paddr 0x0001dac0 align 2**12
         filesz 0x00000000 memsz 0x000093f4 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00000000  00000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000224  00000020  00000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         0001940c  00000244  00000244  00001244  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000630  00019650  00019650  0001a650  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001f20  00019c80  0001bba0  0001ac80  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          000093f4  0001dac0  0001dac0  0001dac0  2**2
                  ALLOC, SMALL_DATA
  6 .SDRAM        00000000  00026eb4  00026eb4  0001cba0  2**0
                  CONTENTS
  7 .Flash_flash_data 00000000  0c000000  0c000000  0001cba0  2**0
                  CONTENTS
  8 .comment      00000023  00000000  00000000  0001cba0  2**0
                  CONTENTS, READONLY
  9 .debug_aranges 000010e8  00000000  00000000  0001cbc8  2**3
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_info   0002f7a6  00000000  00000000  0001dcb0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 0000b2aa  00000000  00000000  0004d456  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0000e73b  00000000  00000000  00058700  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame  00003a5c  00000000  00000000  00066e3c  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00005404  00000000  00000000  0006a898  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    00016df9  00000000  00000000  0006fc9c  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_alt_sim_info 00000020  00000000  00000000  00086a98  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 000017d8  00000000  00000000  00086ab8  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .thread_model 00000006  00000000  00000000  0008dbdc  2**0
                  CONTENTS, READONLY
 19 .cpu          00000005  00000000  00000000  0008dbe2  2**0
                  CONTENTS, READONLY
 20 .qsys         00000001  00000000  00000000  0008dbe7  2**0
                  CONTENTS, READONLY
 21 .simulation_enabled 00000001  00000000  00000000  0008dbe8  2**0
                  CONTENTS, READONLY
 22 .sysid_hash   00000004  00000000  00000000  0008dbe9  2**0
                  CONTENTS, READONLY
 23 .sysid_base   00000004  00000000  00000000  0008dbed  2**0
                  CONTENTS, READONLY
 24 .sysid_time   00000004  00000000  00000000  0008dbf1  2**0
                  CONTENTS, READONLY
 25 .stderr_dev   00000009  00000000  00000000  0008dbf5  2**0
                  CONTENTS, READONLY
 26 .stdin_dev    00000009  00000000  00000000  0008dbfe  2**0
                  CONTENTS, READONLY
 27 .stdout_dev   00000009  00000000  00000000  0008dc07  2**0
                  CONTENTS, READONLY
 28 .sopc_system_name 0000000b  00000000  00000000  0008dc10  2**0
                  CONTENTS, READONLY
 29 .quartus_project_dir 0000005e  00000000  00000000  0008dc1b  2**0
                  CONTENTS, READONLY
 30 .jdi          0000abc5  00000000  00000000  0008dc79  2**0
                  CONTENTS, READONLY
 31 .sopcinfo     001878b7  00000000  00000000  0009883e  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00000000 l    d  .entry	00000000 .entry
00000020 l    d  .exceptions	00000000 .exceptions
00000244 l    d  .text	00000000 .text
00019650 l    d  .rodata	00000000 .rodata
00019c80 l    d  .rwdata	00000000 .rwdata
0001dac0 l    d  .bss	00000000 .bss
00026eb4 l    d  .SDRAM	00000000 .SDRAM
0c000000 l    d  .Flash_flash_data	00000000 .Flash_flash_data
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 C:/Users/rickert/Documents/GitHub/KBS_ESA_bsp//obj/HAL/src/crt0.o
0000027c l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 specs.cpp
00000000 l    df *ABS*	00000000 spec.c
00000000 l    df *ABS*	00000000 Controller.c
00000000 l    df *ABS*	00000000 Game.c
00000000 l    df *ABS*	00000000 Menu.c
00000000 l    df *ABS*	00000000 hello_ucosii.c
00000000 l    df *ABS*	00000000 specs.cpp
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 vfprintf.c
0001970e l     O .rodata	00000010 zeroes.4255
00002cac l     F .text	000000bc __sbprintf
0001971e l     O .rodata	00000010 blanks.4254
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 dtoa.c
00002ebc l     F .text	00000200 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
00004a78 l     F .text	00000008 __fp_lock
00004a80 l     F .text	00000008 __fp_unlock
00004a94 l     F .text	0000019c __sinit.part.1
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 impure.c
00019c80 l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 locale.c
0001a0c4 l     O .rwdata	00000020 lc_ctype_charset
0001a0a4 l     O .rwdata	00000020 lc_message_charset
0001a0e4 l     O .rwdata	00000038 lconv
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mprec.c
00019750 l     O .rodata	0000000c p05.2710
00000000 l    df *ABS*	00000000 s_fpclassify.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
00007418 l     F .text	000000fc __sprint_r.part.0
00019884 l     O .rodata	00000010 blanks.4199
00019874 l     O .rodata	00000010 zeroes.4200
00008820 l     F .text	000000bc __sbprintf
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fputwc.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 wcrtomb.c
00000000 l    df *ABS*	00000000 wctomb_r.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
0000a8a8 l     F .text	0000006c udivmodsi4
00000000 l    df *ABS*	00000000 adddf3.c
00000000 l    df *ABS*	00000000 divdf3.c
00000000 l    df *ABS*	00000000 eqdf2.c
00000000 l    df *ABS*	00000000 gedf2.c
00000000 l    df *ABS*	00000000 ledf2.c
00000000 l    df *ABS*	00000000 muldf3.c
00000000 l    df *ABS*	00000000 subdf3.c
00000000 l    df *ABS*	00000000 fixdfsi.c
00000000 l    df *ABS*	00000000 floatsidf.c
00000000 l    df *ABS*	00000000 floatunsidf.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 alt_close.c
0000cfd4 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
0000d0f4 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
0000d120 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
0000d220 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
0000d314 l     F .text	00000064 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
0000d3f8 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_read.c
0000d5f0 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
0001bb14 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_write.c
0000d84c l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_env_lock.c
0001bb18 l     O .rwdata	00000004 lockid
0001daf8 l     O .bss	00000004 locks
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
0001bb1c l     O .rwdata	00000004 lockid
0001db00 l     O .bss	00000004 locks
00000000 l    df *ABS*	00000000 os_core.c
0000f280 l     F .text	00000044 OS_InitMisc
0000f2c4 l     F .text	00000068 OS_InitRdyList
0000f424 l     F .text	000000e0 OS_InitTCBList
0000f1a4 l     F .text	000000dc OS_InitEventList
0000f32c l     F .text	0000007c OS_InitTaskIdle
0000f3a8 l     F .text	0000007c OS_InitTaskStat
0000f684 l     F .text	00000070 OS_SchedNew
00000000 l    df *ABS*	00000000 os_dbg.c
00000000 l    df *ABS*	00000000 os_flag.c
00011488 l     F .text	00000110 OS_FlagTaskRdy
000111e0 l     F .text	000001c4 OS_FlagBlock
00000000 l    df *ABS*	00000000 os_mem.c
00000000 l    df *ABS*	00000000 os_q.c
00000000 l    df *ABS*	00000000 os_sem.c
00000000 l    df *ABS*	00000000 os_task.c
00000000 l    df *ABS*	00000000 os_time.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
00015930 l     F .text	00000038 alt_dev_reg
0001a6cc l     O .rwdata	0000106c JTAG_UART
0001b738 l     O .rwdata	00000030 AV_Config
0001b768 l     O .rwdata	00000030 Audio_Subsystem_Audio
0001b798 l     O .rwdata	0000002c Char_LCD_16x2
0001b7c4 l     O .rwdata	0000002c IrDA
0001b7f0 l     O .rwdata	0000002c Expansion_JP5
0001b81c l     O .rwdata	0000002c Green_LEDs
0001b848 l     O .rwdata	0000002c HEX3_HEX0
0001b874 l     O .rwdata	0000002c HEX7_HEX4
0001b8a0 l     O .rwdata	0000002c Pushbuttons
0001b8cc l     O .rwdata	0000002c Red_LEDs
0001b8f8 l     O .rwdata	0000002c Slider_Switches
0001b924 l     O .rwdata	00000038 PS2_Port
0001b95c l     O .rwdata	00000038 PS2_Port_Dual
0001b994 l     O .rwdata	0000002c Serial_Port
0001b9c0 l     O .rwdata	00000034 USB
0001b9f4 l     O .rwdata	00000048 VGA_Subsystem_VGA_Char_Buffer
0001ba3c l     O .rwdata	00000054 VGA_Subsystem_VGA_Pixel_DMA
0001ba90 l     O .rwdata	0000002c SD_Card
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
00016018 l     F .text	000002a8 altera_avalon_jtag_uart_irq
000162c0 l     F .text	00000110 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
00016a98 l     F .text	00000078 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 altera_up_avalon_character_lcd.c
00000000 l    df *ABS*	00000000 altera_up_avalon_irda.c
00000000 l    df *ABS*	00000000 altera_up_avalon_parallel_port.c
00000000 l    df *ABS*	00000000 altera_up_avalon_ps2.c
00000000 l    df *ABS*	00000000 altera_up_avalon_rs232.c
00000000 l    df *ABS*	00000000 altera_up_avalon_video_character_buffer_with_dma.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
000182b4 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
00018520 l     F .text	000000c0 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_register.c
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
00018808 l     F .text	00000050 alt_get_errno
00018858 l     F .text	000000cc alt_file_locked
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 os_cpu_a.o
00000040 l       *ABS*	00000000 OSCtxSw_SWITCH_PC
00000000 l    df *ABS*	00000000 os_cpu_c.c
00000014 l       *ABS*	00000000 OSTCBNext_OFFSET
00000032 l       *ABS*	00000000 OSTCBPrio_OFFSET
00000000 l       *ABS*	00000000 OSTCBStkPtr_OFFSET
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
0001db64 g     O .bss	00000004 alt_instruction_exception_handler
00006f60 g     F .text	00000074 _mprec_log10
0001bb6a g     O .rwdata	00000002 OSTaskNameSize
0000704c g     F .text	0000008c __any_on
0000924c g     F .text	00000054 _isatty_r
0001975c g     O .rodata	00000028 __mprec_tinytens
0000d51c g     F .text	000000d4 alt_main
00026db4 g     O .bss	00000100 alt_irq
00017674 g     F .text	0000005c alt_up_ps2_disable_read_interrupt
000092a0 g     F .text	0000005c _lseek_r
00011cec g     F .text	000000d0 OS_MemInit
0001bba0 g       *ABS*	00000000 __flash_rwdata_start
000158cc g     F .text	00000064 OSTimeSet
00016c04 g     F .text	0000003c alt_up_character_lcd_send_cmd
0000bb3c g     F .text	00000084 .hidden __eqdf2
0000defc g     F .text	00000610 OSEventPendMulti
00026eb4 g       *ABS*	00000000 __alt_heap_start
00018e64 g     F .text	00000020 OSTaskCreateHook
00000cfc g     F .text	0000003c printf
0001bb42 g     O .rwdata	00000002 OSMboxEn
0000e560 g     F .text	0000007c OSIntEnter
00009b70 g     F .text	0000009c _wcrtomb_r
00007278 g     F .text	0000005c __sseek
00004dc8 g     F .text	00000010 __sinit
00017ffc g     F .text	00000100 alt_up_char_buffer_string
00009a1c g     F .text	00000138 __swbuf_r
00017494 g     F .text	00000034 read_CE_bit
0001bb52 g     O .rwdata	00000002 OSQEn
000053b4 g     F .text	0000007c _setlocale_r
00004c30 g     F .text	00000068 __sfmoreglue
0000dbd0 g     F .text	000000d0 __malloc_unlock
00018ec0 g     F .text	0000001c OSTaskStatHook
00017818 g     F .text	000000a4 alt_up_ps2_read_data_byte_timeout
00017d0c g     F .text	00000090 alt_up_rs232_read_fd
0001db08 g     O .bss	00000001 OSLockNesting
000006e8 g     F .text	0000008c menu
0001bb90 g     O .rwdata	00000002 OSDataSize
0001db09 g     O .bss	00000001 OSRunning
00017f30 g     F .text	000000cc alt_up_char_buffer_draw
000092fc g     F .text	0000015c memmove
00018ef8 g     F .text	0000001c OSInitHookBegin
0001bb88 g     O .rwdata	00000002 OSTmrSize
00004db0 g     F .text	00000018 _cleanup
00006138 g     F .text	000000a8 _Balloc
0001bac4 g     O .rwdata	00000004 gameModeMenu
0001db0c g     O .bss	00000004 OSIdleCtr
0000bbc0 g     F .text	000000e0 .hidden __gtdf2
0001bad0 g     O .rwdata	00000004 xRechts
00018c18 g     F .text	00000020 altera_nios2_gen2_irq_init
00018ce4 g       .text	00000000 OSStartTsk
00000000  w      *UND*	00000000 __errno
00016b90 g     F .text	00000074 get_DDRAM_addr
0000f9bc g     F .text	000002d4 OS_TCBInit
0001bae0 g     O .rwdata	00000004 yMenu
00000000 g     F .entry	0000001c __reset
0001bb8e g     O .rwdata	00000002 OSTmrWheelTblSize
00000020 g       *ABS*	00000000 __flash_exceptions_start
0001bb2e g     O .rwdata	00000002 OSEventSize
0001db10 g     O .bss	00000001 OSPrioHighRdy
00008d34 g     F .text	00000058 _fstat_r
00018e84 g     F .text	00000020 OSTaskDelHook
0001dae4 g     O .bss	00000004 errno
000071f4 g     F .text	00000008 __seofread
00018cc4 g       .text	00000000 OSStartHighRdy
000141d0 g     F .text	000001ec OSTaskCreateExt
00010d2c g     F .text	00000068 OSFlagPendGetFlagsRdy
0001bb6e g     O .rwdata	00000002 OSTaskStatStkSize
0000fe1c g     F .text	00000308 OSFlagAccept
000123c0 g     F .text	000000b8 OSQFlush
00011dbc g     F .text	00000140 OSQAccept
0001daf0 g     O .bss	00000004 alt_argv
00023abc g       *ABS*	00000000 _gp
00014014 g     F .text	000001bc OSTaskCreate
00013ad4 g     F .text	00000540 OSTaskChangePrio
0001db04 g     O .bss	00000004 alt_heapsem
0000fc90 g     F .text	0000018c OSDebugInit
000143bc g     F .text	000003e0 OSTaskDel
0001bad4 g     O .rwdata	00000004 xBoven
0001a54c g     O .rwdata	00000180 alt_fd_list
00023b90 g     O .bss	00000370 OSFlagTbl
0000ef90 g     F .text	000000b4 OS_EventTaskRemove
00018460 g     F .text	00000090 alt_find_dev
00005edc g     F .text	00000138 memcpy
0001bb58 g     O .rwdata	00000002 OSRdyTblSize
00016da0 g     F .text	00000050 alt_up_character_lcd_write_fd
000180fc g     F .text	0000005c alt_up_char_buffer_clear
00004a88 g     F .text	0000000c _cleanup_r
0000cdfc g     F .text	000000d0 .hidden __floatsidf
000185e0 g     F .text	00000078 alt_io_redirect
0000bca0 g     F .text	000000e0 .hidden __ltdf2
00019650 g       *ABS*	00000000 __DTOR_END__
00017320 g     F .text	00000090 alt_up_irda_write_fd
00017c98 g     F .text	00000074 alt_up_rs232_read_data
00019208 g     F .text	0000009c alt_exception_cause_generated_bad_addr
0000dca0 g     F .text	00000120 OSEventNameGet
0001bb3c g     O .rwdata	00000002 OSFlagMax
000070d8 g     F .text	00000074 __fpclassifyd
00006ebc g     F .text	000000a4 __ratio
0000e5dc g     F .text	000000f4 OSIntExit
000087fc g     F .text	00000024 __vfiprintf_internal
0001bb76 g     O .rwdata	00000002 OSTCBSize
0001db11 g     O .bss	00000001 OSPrioCur
0001711c g     F .text	00000040 alt_up_irda_get_used_space_in_read_FIFO
00016524 g     F .text	000002b4 altera_avalon_jtag_uart_read
00000000  w      *UND*	00000000 malloc
00000cd0 g     F .text	0000002c _printf_r
0000a9c4 g     F .text	00000008 .hidden __udivsi3
0000d270 g     F .text	000000a4 isatty
0001bb5c g     O .rwdata	00000002 OSStkWidth
000197ac g     O .rodata	000000c8 __mprec_tens
0001bb50 g     O .rwdata	00000002 OSPtrSize
00005430 g     F .text	0000000c __locale_charset
0001bb30 g     O .rwdata	00000002 OSEventTblSize
000170c0 g     F .text	0000005c alt_up_irda_disable_read_interrupt
0001badc g     O .rwdata	00000004 xMenu
00018c38 g       .text	00000000 OSCtxSw
0001917c g     F .text	0000008c alt_icache_flush
0001dae0 g     O .bss	00000004 __malloc_top_pad
000005cc g     F .text	0000011c moveDown
0001db14 g     O .bss	00000004 OSTCBList
0001dae8 g     O .bss	00000004 alt_fd_list_lock
0001baec g     O .rwdata	00000004 __mb_cur_max
00005460 g     F .text	0000000c _localeconv_r
00008d8c g     F .text	000004c0 __sfvwrite_r
00006544 g     F .text	0000003c __i2b
00023f00 g     O .bss	00000c30 OSMemTbl
0001db18 g     O .bss	00000001 OSTickStepState
0000714c g     F .text	00000054 _sbrk_r
0001db90 g     O .bss	00002000 menu_stk
0001bb54 g     O .rwdata	00000002 OSQMax
00024b30 g     O .bss	00000800 OSTaskStatStk
0001191c g     F .text	000000f8 OSMemNameGet
0001bb34 g     O .rwdata	00000002 OSFlagEn
00009458 g     F .text	0000005c _read_r
0001bb7a g     O .rwdata	00000002 OSTimeTickHookEn
000128e0 g     F .text	00000168 OSQPost
00011598 g     F .text	000000a0 OS_FlagUnlink
0001bb0c g     O .rwdata	00000004 alt_max_fd
00017c14 g     F .text	00000044 alt_up_rs232_check_parity
0000f554 g     F .text	00000064 OS_MemCopy
0000f5b8 g     F .text	000000cc OS_Sched
00008a50 g     F .text	000000f0 _fclose_r
0001182c g     F .text	000000f0 OSMemGet
00014a9c g     F .text	000001c0 OSTaskNameSet
000174c8 g     F .text	00000030 read_num_bytes_available
00004a48 g     F .text	00000030 fflush
0001dadc g     O .bss	00000004 __malloc_max_sbrked_mem
0001db1c g     O .bss	00000004 OSCtxSwCtr
00018edc g     F .text	0000001c OSTimeTickHook
00018658 g     F .text	000001b0 alt_irq_register
0001bb3e g     O .rwdata	00000002 OSFlagNameSize
00017430 g     F .text	00000034 read_RI_bit
0000f044 g     F .text	000000fc OS_EventTaskRemoveMulti
0001dac4 g     O .bss	00000004 controllerSem
0000a9d4 g     F .text	0000089c .hidden __adddf3
0000ee44 g     F .text	0000014c OS_EventTaskWaitMulti
00006c64 g     F .text	0000011c __b2d
0001bb56 g     O .rwdata	00000002 OSQSize
0000a318 g     F .text	00000590 .hidden __umoddi3
0000d448 g     F .text	000000d4 lseek
000133e4 g     F .text	00000268 OSSemPend
0001bae4 g     O .rwdata	00000004 _global_impure_ptr
000094b4 g     F .text	00000568 _realloc_r
0001dac8 g     O .bss	00000004 vorige
0001bb40 g     O .rwdata	00000002 OSLowestPrio
00026eb4 g       *ABS*	00000000 __bss_end
00018f4c g     F .text	00000020 OSTCBInitHook
0001bb86 g     O .rwdata	00000002 OSTmrCfgTicksPerSec
00018b14 g     F .text	00000104 alt_tick
00009d58 g     F .text	000005c0 .hidden __udivdi3
00008b54 g     F .text	00000184 _fputwc_r
0001bb28 g     O .rwdata	00000002 OSEventEn
00019784 g     O .rodata	00000028 __mprec_bigtens
00006328 g     F .text	00000104 __s2b
0001bb82 g     O .rwdata	00000002 OSTmrCfgNameSize
0000cecc g     F .text	000000a4 .hidden __floatunsidf
00006a0c g     F .text	00000060 __mcmp
0c000000 g       *ABS*	00000000 __alt_mem_Flash_flash_data
0001752c g     F .text	0000002c read_data_byte
00004de8 g     F .text	00000018 __fp_lock_all
000113a4 g     F .text	000000e4 OS_FlagInit
00018a7c g     F .text	00000098 alt_alarm_stop
00017464 g     F .text	00000030 read_RE_bit
0001bb64 g     O .rwdata	00000002 OSTaskIdleStkSize
0001db58 g     O .bss	00000004 alt_irq_active
00012fcc g     F .text	000000b0 OSSemAccept
00000c40 g     F .text	00000090 VGA_text
00011b2c g     F .text	000000d8 OSMemPut
00011638 g     F .text	000001f4 OSMemCreate
0001db20 g     O .bss	00000004 OSIdleCtrMax
0001fb90 g     O .bss	00002000 controller1_stk
0001715c g     F .text	0000003c alt_up_irda_get_available_space_in_write_FIFO
000000fc g     F .exceptions	000000d4 alt_irq_handler
0001a524 g     O .rwdata	00000028 alt_dev_null
0001bb78 g     O .rwdata	00000002 OSTicksPerSec
00017034 g     F .text	00000034 alt_up_character_lcd_cursor_blink_on
000173f0 g     F .text	00000040 alt_up_parallel_port_open_dev
00018c38 g       .text	00000000 OSIntCtxSw
000176d0 g     F .text	00000074 alt_up_ps2_write_data_byte
00018298 g     F .text	0000001c alt_dcache_flush_all
0000642c g     F .text	00000068 __hi0bits
0000cd74 g     F .text	00000088 .hidden __fixdfsi
0001db24 g     O .bss	00000004 OSTCBFreeList
0001bba0 g       *ABS*	00000000 __ram_rwdata_end
0001364c g     F .text	0000016c OSSemPendAbort
0001bb04 g     O .rwdata	00000008 alt_dev_list
0000d89c g     F .text	000000f8 write
0001bb7c g     O .rwdata	00000002 OSVersionNbr
00019c80 g       *ABS*	00000000 __ram_rodata_end
0000d170 g     F .text	000000b0 fstat
00017d9c g     F .text	00000094 alt_up_rs232_write_fd
00000774 g     F .text	0000021c selecteerMenu
00000000 g       *ABS*	00000000 __alt_mem_SDRAM
0000bca0 g     F .text	000000e0 .hidden __ledf2
0001bb24 g     O .rwdata	00000004 OSEndiannessTest
0000677c g     F .text	00000140 __pow5mult
0000752c g     F .text	000012d0 ___vfiprintf_internal_r
0001dad4 g     O .bss	00000004 __nlocale_changed
0000a9cc g     F .text	00000008 .hidden __umodsi3
0001bb36 g     O .rwdata	00000002 OSFlagGrpSize
00000280 g     F .text	000000c0 controllers
00026eb4 g       *ABS*	00000000 end
00017a0c g     F .text	00000098 alt_up_ps2_write_fd
00017198 g     F .text	00000044 alt_up_irda_check_parity
00017e70 g     F .text	00000080 alt_up_char_buffer_init
00015ed8 g     F .text	00000140 altera_avalon_jtag_uart_init
0000f818 g     F .text	000000dc OS_TaskStat
000001d0 g     F .exceptions	00000074 alt_instruction_exception_entry
00019650 g       *ABS*	00000000 __CTOR_LIST__
04000000 g       *ABS*	00000000 __alt_stack_pointer
00016b10 g     F .text	00000080 alt_avalon_timer_sc_init
0000cf70 g     F .text	00000064 .hidden __clzsi2
000167d8 g     F .text	000002c0 altera_avalon_jtag_uart_write
00004dd8 g     F .text	00000004 __sfp_lock_acquire
00005df4 g     F .text	000000e8 memchr
0000f504 g     F .text	00000050 OS_MemClr
00016cb4 g     F .text	00000078 alt_up_character_lcd_write
00000d38 g     F .text	00001f50 ___vfprintf_internal_r
00018d08 g     F .text	0000015c OSTaskStkInit
00004f3c g     F .text	000002f0 _free_r
0000543c g     F .text	00000010 __locale_mb_cur_max
0000eba0 g     F .text	00000198 OS_EventTaskRdy
00019480 g     F .text	00000194 __call_exitprocs
0001db28 g     O .bss	00000001 OSCPUUsage
0001dad0 g     O .bss	00000004 __mlocale_changed
0001baf0 g     O .rwdata	00000004 __malloc_sbrk_base
00000244 g     F .text	0000003c _start
0001db5c g     O .bss	00000004 _alt_tick_rate
00012478 g     F .text	000002fc OSQPend
000153c8 g     F .text	00000148 OSTimeDly
00021b90 g     O .bss	00002000 controller2_stk
000068bc g     F .text	00000150 __lshift
0001db60 g     O .bss	00000004 _alt_nticks
0000d640 g     F .text	000000fc read
0001599c g     F .text	000003d8 alt_sys_init
00016eec g     F .text	00000088 alt_up_character_lcd_shift_display
0001936c g     F .text	00000114 __register_exitproc
0001db29 g     O .bss	00000001 OSTaskCtr
0001792c g     F .text	00000054 alt_up_ps2_clear_fifo
00017bd8 g     F .text	0000003c alt_up_rs232_get_available_space_in_write_FIFO
00000b8c g     F .text	000000b4 VGA_box
00015510 g     F .text	00000168 OSTimeDlyHMSM
00006580 g     F .text	000001fc __multiply
00016f74 g     F .text	0000008c alt_up_character_lcd_erase_pos
000163d0 g     F .text	00000068 altera_avalon_jtag_uart_close
00019c80 g       *ABS*	00000000 __ram_rwdata_start
00019650 g       *ABS*	00000000 __ram_rodata_start
0001db68 g     O .bss	00000028 __malloc_current_mallinfo
0001bb2a g     O .rwdata	00000002 OSEventMax
00006d80 g     F .text	0000013c __d2b
000137b8 g     F .text	00000110 OSSemPost
0000e758 g     F .text	000000d8 OSSchedUnlock
00015d74 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
00019080 g     F .text	000000fc alt_get_fd
0001db2c g     O .bss	00000004 OSMemFreeList
0000e89c g     F .text	000000ac OSStatInit
0001111c g     F .text	000000c4 OSFlagQuery
0001bb60 g     O .rwdata	00000002 OSTaskCreateExtEn
00008938 g     F .text	00000054 _close_r
000192f0 g     F .text	0000007c memcmp
0000eb84 g     F .text	0000001c OS_Dummy
00015e34 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
00026eb4 g       *ABS*	00000000 __alt_stack_base
00015e84 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
00017068 g     F .text	00000058 alt_up_irda_enable_read_interrupt
00002d68 g     F .text	00000154 __swsetup_r
00025330 g     O .bss	000001e0 OSQTbl
00000340 g     F .text	00000128 controller
0000b270 g     F .text	000008cc .hidden __divdf3
00004c98 g     F .text	00000118 __sfp
00006fd4 g     F .text	00000078 __copybits
0001a11c g     O .rwdata	00000408 __malloc_av_
00004de4 g     F .text	00000004 __sinit_lock_release
0001db30 g     O .bss	00000004 OSTCBHighRdy
0000bd80 g     F .text	00000724 .hidden __muldf3
000071a0 g     F .text	00000054 __sread
0001db34 g     O .bss	00000004 OSQFreeList
00017b3c g     F .text	0000005c alt_up_rs232_disable_read_interrupt
00018f6c g     F .text	00000114 alt_find_file
00018304 g     F .text	000000a4 alt_dev_llist_insert
0000dab0 g     F .text	00000120 __malloc_lock
0000d79c g     F .text	000000b0 sbrk
0000ddc0 g     F .text	0000013c OSEventNameSet
000049ec g     F .text	0000005c _fflush_r
0000898c g     F .text	000000c4 _calloc_r
0001db38 g     O .bss	00000001 OSRdyGrp
0001dac0 g       *ABS*	00000000 __bss_start
00006014 g     F .text	00000124 memset
00000a70 g     F .text	0000011c main
0001daf4 g     O .bss	00000004 alt_envp
0001dad8 g     O .bss	00000004 __malloc_max_total_mem
00017ef0 g     F .text	00000040 alt_up_char_buffer_open_dev
00015dd4 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
00009b54 g     F .text	0000001c __swbuf
000199b0 g     O .rodata	00000100 OSUnMapTbl
0001bb5a g     O .rwdata	00000002 OSSemEn
00016e64 g     F .text	00000088 alt_up_character_lcd_shift_cursor
00010d94 g     F .text	00000388 OSFlagPost
000072d4 g     F .text	00000008 __sclose
04000000 g       *ABS*	00000000 __alt_heap_limit
00008b40 g     F .text	00000014 fclose
0000ed38 g     F .text	0000010c OS_EventTaskWait
000178bc g     F .text	00000070 alt_up_ps2_read_data_byte
0001dac0 g     O .bss	00000004 timeout
0000f8f4 g     F .text	000000c8 OS_TaskStatStkChk
0001479c g     F .text	00000158 OSTaskDelReq
000030bc g     F .text	00001728 _dtoa_r
0000564c g     F .text	000007a8 _malloc_r
00009ccc g     F .text	00000030 __ascii_wctomb
0001bb10 g     O .rwdata	00000004 alt_errno
0000e830 g     F .text	0000006c OSStart
0000da54 g     F .text	0000005c __env_unlock
0000522c g     F .text	000000c4 _fwalk
00014c5c g     F .text	000001f8 OSTaskResume
00011c04 g     F .text	000000e8 OSMemQuery
0001bb6c g     O .rwdata	00000002 OSTaskStatEn
0001bac8 g     O .rwdata	00000002 menuTextKleur
000171dc g     F .text	00000040 alt_up_irda_write_data
0001bb46 g     O .rwdata	00000002 OSMemMax
00012a48 g     F .text	00000170 OSQPostFront
00017aa4 g     F .text	00000040 alt_up_ps2_open_dev
0000a914 g     F .text	00000054 .hidden __divsi3
0001db39 g     O .bss	00000003 OSRdyTbl
0001bb20 g     O .rwdata	00000002 OSDebugEn
00016c74 g     F .text	00000040 alt_up_character_lcd_open_dev
00004e18 g     F .text	00000124 _malloc_trim_r
0001761c g     F .text	00000058 alt_up_ps2_enable_read_interrupt
00019650 g       *ABS*	00000000 __CTOR_END__
0001bb38 g     O .rwdata	00000002 OSFlagNodeSize
0001bb80 g     O .rwdata	00000002 OSTmrCfgMax
00016c40 g     F .text	00000034 alt_up_character_lcd_init
000072dc g     F .text	000000a4 strcmp
00011efc g     F .text	000001fc OSQCreate
000148f4 g     F .text	000001a8 OSTaskNameGet
00019650 g       *ABS*	00000000 __flash_rodata_start
00012bb8 g     F .text	0000020c OSQPostOpt
0000e948 g     F .text	0000021c OSTimeTick
0001bb68 g     O .rwdata	00000002 OSTaskMax
00019650 g       *ABS*	00000000 __DTOR_LIST__
0001307c g     F .text	00000100 OSSemCreate
0001bb8c g     O .rwdata	00000002 OSTmrWheelSize
00017e30 g     F .text	00000040 alt_up_rs232_open_dev
0000bb3c g     F .text	00000084 .hidden __nedf2
0001bb62 g     O .rwdata	00000002 OSTaskDelEn
000138c8 g     F .text	00000110 OSSemQuery
000120f8 g     F .text	000002c8 OSQDel
00012774 g     F .text	0000016c OSQPendAbort
00015968 g     F .text	00000034 alt_irq_init
0000d73c g     F .text	00000060 alt_release_fd
00000468 g     F .text	0000004c checkID
000174f8 g     F .text	00000034 read_data_valid
00017000 g     F .text	00000034 alt_up_character_lcd_cursor_off
00019894 g     O .rodata	00000100 .hidden __clz_tab
0001dacc g     O .bss	00000004 _PathLocale
000177b4 g     F .text	00000064 alt_up_ps2_write_data_byte_with_ack
000192a4 g     F .text	00000014 atexit
000088dc g     F .text	0000005c _write_r
0000e6d0 g     F .text	00000088 OSSchedLock
0000546c g     F .text	0000001c setlocale
00010124 g     F .text	00000128 OSFlagCreate
0001bae8 g     O .rwdata	00000004 _impure_ptr
0001daec g     O .bss	00000004 alt_argc
000047e4 g     F .text	00000208 __sflush_r
00018404 g     F .text	0000005c _do_dtors
00005458 g     F .text	00000008 __locale_cjk_lang
0001bb32 g     O .rwdata	00000002 OSEventMultiEn
0001024c g     F .text	00000270 OSFlagDel
0001db3c g     O .bss	00000004 OSEventFreeList
00000020 g       .exceptions	00000000 alt_irq_entry
00006c04 g     F .text	00000060 __ulp
0001073c g     F .text	000005f0 OSFlagPend
0001bb7e g     O .rwdata	00000002 OSTmrEn
00004e00 g     F .text	00000018 __fp_unlock_all
0001bafc g     O .rwdata	00000008 alt_fs_list
0000f6f4 g     F .text	00000074 OS_StrCopy
00017ae4 g     F .text	00000058 alt_up_rs232_enable_read_interrupt
00017c58 g     F .text	00000040 alt_up_rs232_write_data
000004b4 g     F .text	00000118 moveUp
0001bb48 g     O .rwdata	00000002 OSMemNameSize
00018f14 g     F .text	0000001c OSInitHookEnd
00000020 g       *ABS*	00000000 __ram_exceptions_start
0001bb74 g     O .rwdata	00000002 OSTCBPrioTblMax
00005488 g     F .text	0000000c localeconv
0001bb70 g     O .rwdata	00000002 OSTaskStatStkChkEn
0001bb44 g     O .rwdata	00000002 OSMemEn
0001bb4e g     O .rwdata	00000002 OSMutexEn
0001bba0 g       *ABS*	00000000 _edata
0001bac0 g     O .rwdata	00000004 interval_timer_ptr
00026eb4 g       *ABS*	00000000 _end
0001db40 g     O .bss	00000001 OSIntNesting
00000244 g       *ABS*	00000000 __ram_exceptions_end
00016438 g     F .text	000000ec altera_avalon_jtag_uart_ioctl
00015678 g     F .text	000001f0 OSTimeDlyResume
000105ec g     F .text	00000150 OSFlagNameSet
00014e54 g     F .text	000001c8 OSTaskStkChk
0001bb4a g     O .rwdata	00000002 OSMemSize
000071fc g     F .text	0000007c __swrite
0001baf4 g     O .rwdata	00000004 __malloc_trim_threshold
0000544c g     F .text	0000000c __locale_msgcharset
0001db44 g     O .bss	00000004 OSTCBCur
000192b8 g     F .text	00000038 exit
0001721c g     F .text	00000074 alt_up_irda_read_data
0001bb4c g     O .rwdata	00000002 OSMemTblSize
000052f0 g     F .text	000000c4 _fwalk_reent
00017558 g     F .text	000000c4 alt_up_ps2_init
00006a6c g     F .text	00000198 __mdiff
0000a968 g     F .text	0000005c .hidden __modsi3
04000000 g       *ABS*	00000000 __alt_data_end
00000020 g     F .exceptions	00000000 alt_exception
00004ddc g     F .text	00000004 __sfp_lock_release
0000e50c g     F .text	00000054 OSInit
00015230 g     F .text	0000012c OSTaskQuery
00016d2c g     F .text	00000074 alt_up_character_lcd_string
00012f20 g     F .text	000000ac OS_QInit
0000f768 g     F .text	00000054 OS_StrLen
000173b0 g     F .text	00000040 alt_up_irda_open_dev
00011a14 g     F .text	00000118 OSMemNameSet
0001bb66 g     O .rwdata	00000002 OSTaskProfileEn
0001db48 g     O .bss	00000004 OSTime
00000990 g     F .text	00000058 tekenBox
00025510 g     O .bss	00000800 OSTaskIdleStk
00019614 g     F .text	0000003c _exit
00018158 g     F .text	00000140 alt_alarm_start
000104bc g     F .text	00000130 OSFlagNameGet
00015868 g     F .text	00000064 OSTimeGet
00005494 g     F .text	000001b8 __smakebuf_r
00017744 g     F .text	00000070 alt_up_ps2_wait_for_ack
00007380 g     F .text	00000098 strlen
00018ea4 g     F .text	0000001c OSTaskSwHook
00018924 g     F .text	00000158 open
00025d10 g     O .bss	00000b40 OSEventTbl
0000bbc0 g     F .text	000000e0 .hidden __gedf2
00026850 g     O .bss	00000510 OSTCBTbl
000139d8 g     F .text	000000fc OSSemSet
0001baf8 g     O .rwdata	00000004 __wctomb
00007514 g     F .text	00000018 __sprint_r
000184f0 g     F .text	00000030 alt_icache_flush_all
00016df0 g     F .text	00000074 alt_up_character_lcd_set_cursor_pos
0001bb94 g     O .rwdata	00000004 alt_priority_mask
0001317c g     F .text	00000268 OSSemDel
0001db4c g     O .bss	00000004 OSFlagFreeList
0001bb2c g     O .rwdata	00000002 OSEventNameSize
00002c88 g     F .text	00000024 __vfprintf_internal
0001db50 g     O .bss	00000001 OSStatRdy
00026d60 g     O .bss	00000054 OSTCBPrioTbl
00009cfc g     F .text	0000005c _wctomb_r
0000d994 g     F .text	000000c0 __env_lock
00017980 g     F .text	0000008c alt_up_ps2_read_fd
0001bb72 g     O .rwdata	00000002 OSTaskSwHookEn
0001bacc g     O .rwdata	00000004 xLinks
0000c4a4 g     F .text	000008d0 .hidden __subdf3
00017290 g     F .text	00000090 alt_up_irda_read_fd
00006494 g     F .text	000000b0 __lo0bits
0001bb98 g     O .rwdata	00000008 alt_alarm_list
0001bb3a g     O .rwdata	00000002 OSFlagWidth
000183a8 g     F .text	0000005c _do_ctors
0001babc g     O .rwdata	00000002 kleur
00017b98 g     F .text	00000040 alt_up_rs232_get_used_space_in_read_FIFO
00009c0c g     F .text	000000c0 wcrtomb
0000d024 g     F .text	000000d0 close
0001dafc g     O .bss	00000004 alt_envsem
0001db54 g     O .bss	00000004 OSIdleCtrRun
0001bad8 g     O .rwdata	00000004 xOnder
0000eb64 g     F .text	00000020 OSVersion
0001bb84 g     O .rwdata	00000002 OSTmrCfgWheelSize
0000d378 g     F .text	00000080 alt_load
0001535c g     F .text	0000006c OS_TaskStkClr
000009e8 g     F .text	00000088 tekenBox2
0001bb5e g     O .rwdata	00000002 OSTaskCreateEn
0000f140 g     F .text	00000064 OS_EventWaitListInit
00008cd8 g     F .text	0000005c fputwc
00018f30 g     F .text	0000001c OSTaskIdleHook
00000000  w      *UND*	00000000 free
00004de0 g     F .text	00000004 __sinit_lock_acquire
00006208 g     F .text	00000120 __multadd
0001501c g     F .text	00000214 OSTaskSuspend
000061e0 g     F .text	00000028 _Bfree
0000f7bc g     F .text	0000005c OS_TaskIdle
0001bb8a g     O .rwdata	00000002 OSTmrTblSize
00012dc4 g     F .text	0000015c OSQQuery



Disassembly of section .entry:

00000000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && (!defined(ALT_SIM_OPTIMIZE) || defined(NIOS2_ECC_PRESENT))
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
   0:	00840014 	movui	r2,4096
#endif

0:
    initi r2
   4:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
   8:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
   c:	00bffd16 	blt	zero,r2,4 <__alt_mem_Flash_flash_data+0xf4000004>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
  10:	00400034 	movhi	at,0
    ori r1, r1, %lo(_start)
  14:	08409114 	ori	at,at,580
    jmp r1
  18:	0800683a 	jmp	at
  1c:	00000000 	call	0 <__reset>

Disassembly of section .exceptions:

00000020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
  20:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
  24:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
  28:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
  2c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
  30:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
  34:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
  38:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
  3c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
  40:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
  44:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
  48:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
  4c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
  50:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
  54:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
  58:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
  5c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
  60:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
  64:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
  68:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
  6c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  70:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
  74:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
  78:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
  7c:	10000326 	beq	r2,zero,8c <OSCtxSw_SWITCH_PC+0x4c>
        beq   r4, zero, .Lnot_irq
  80:	20000226 	beq	r4,zero,8c <OSCtxSw_SWITCH_PC+0x4c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
  84:	00000fc0 	call	fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
  88:	00000706 	br	a8 <OSCtxSw_SWITCH_PC+0x68>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
  8c:	df401215 	stw	ea,72(sp)
        ldhu.n  r2, 0(r4)
        ldhu.n  r3, 2(r4)
        slli.n  r3, r3, 16
        or.n    r2, r2, r3 /* Instruction that caused exception */
#else
        ldw   r2, -4(ea)   /* Instruction that caused exception */
  90:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
  94:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
  98:	00001d00 	call	1d0 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
  9c:	1000021e 	bne	r2,zero,a8 <OSCtxSw_SWITCH_PC+0x68>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
  a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
  a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
  ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
  b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
  b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
  b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
  bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
  c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
  c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
  c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
  cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
  d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
  d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
  d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
  dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
  e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
  e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
  e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
  ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
  f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
  f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
  f8:	ef80083a 	eret

000000fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
  fc:	defff904 	addi	sp,sp,-28
 100:	dfc00615 	stw	ra,24(sp)
 104:	df000515 	stw	fp,20(sp)
 108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
 10c:	000e5600 	call	e560 <OSIntEnter>
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 110:	0005313a 	rdctl	r2,ipending
 114:	e0bffe15 	stw	r2,-8(fp)

  return active;
 118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 11c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
 120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 124:	00800044 	movi	r2,1
 128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 12c:	e0fffb17 	ldw	r3,-20(fp)
 130:	e0bffc17 	ldw	r2,-16(fp)
 134:	1884703a 	and	r2,r3,r2
 138:	10001526 	beq	r2,zero,190 <alt_irq_handler+0x94>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
 13c:	008000b4 	movhi	r2,2
 140:	109b6d04 	addi	r2,r2,28084
 144:	e0fffd17 	ldw	r3,-12(fp)
 148:	180690fa 	slli	r3,r3,3
 14c:	10c5883a 	add	r2,r2,r3
 150:	10c00017 	ldw	r3,0(r2)
 154:	008000b4 	movhi	r2,2
 158:	109b6d04 	addi	r2,r2,28084
 15c:	e13ffd17 	ldw	r4,-12(fp)
 160:	200890fa 	slli	r4,r4,3
 164:	21000104 	addi	r4,r4,4
 168:	1105883a 	add	r2,r2,r4
 16c:	10800017 	ldw	r2,0(r2)
 170:	1009883a 	mov	r4,r2
 174:	e17ffd17 	ldw	r5,-12(fp)
 178:	183ee83a 	callr	r3
#endif
        break;
 17c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 180:	0005313a 	rdctl	r2,ipending
 184:	e0bfff15 	stw	r2,-4(fp)

  return active;
 188:	e0bfff17 	ldw	r2,-4(fp)
 18c:	00000706 	br	1ac <alt_irq_handler+0xb0>
      }
      mask <<= 1;
 190:	e0bffc17 	ldw	r2,-16(fp)
 194:	1085883a 	add	r2,r2,r2
 198:	e0bffc15 	stw	r2,-16(fp)
      i++;
 19c:	e0bffd17 	ldw	r2,-12(fp)
 1a0:	10800044 	addi	r2,r2,1
 1a4:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
 1a8:	003fe006 	br	12c <__alt_mem_Flash_flash_data+0xf400012c>

    active = alt_irq_pending ();
 1ac:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
 1b0:	e0bffb17 	ldw	r2,-20(fp)
 1b4:	103fda1e 	bne	r2,zero,120 <__alt_mem_Flash_flash_data+0xf4000120>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
 1b8:	000e5dc0 	call	e5dc <OSIntExit>
}
 1bc:	e037883a 	mov	sp,fp
 1c0:	dfc00117 	ldw	ra,4(sp)
 1c4:	df000017 	ldw	fp,0(sp)
 1c8:	dec00204 	addi	sp,sp,8
 1cc:	f800283a 	ret

000001d0 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
 1d0:	defffb04 	addi	sp,sp,-20
 1d4:	dfc00415 	stw	ra,16(sp)
 1d8:	df000315 	stw	fp,12(sp)
 1dc:	df000304 	addi	fp,sp,12
 1e0:	e13fff15 	stw	r4,-4(fp)
 * NIOS2_EXCEPTION_CAUSE_NOT_PRESENT. Your handling routine should
 * check the validity of the cause argument before proceeding.
 */
#ifdef NIOS2_HAS_EXTRA_EXCEPTION_INFO
  /* Get exception cause & "badaddr" */
  NIOS2_READ_EXCEPTION(cause);
 1e4:	000531fa 	rdctl	r2,exception
 1e8:	e0bffd15 	stw	r2,-12(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
 1ec:	e0bffd17 	ldw	r2,-12(fp)
 1f0:	10801f0c 	andi	r2,r2,124
 1f4:	1004d0ba 	srli	r2,r2,2
 1f8:	e0bffd15 	stw	r2,-12(fp)
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
 1fc:	0005333a 	rdctl	r2,badaddr
 200:	e0bffe15 	stw	r2,-8(fp)
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
  badaddr = 0;
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
 204:	d0a82a17 	ldw	r2,-24408(gp)
 208:	10000726 	beq	r2,zero,228 <alt_instruction_exception_entry+0x58>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
 20c:	d0a82a17 	ldw	r2,-24408(gp)
 210:	e0fffd17 	ldw	r3,-12(fp)
 214:	1809883a 	mov	r4,r3
 218:	e17fff17 	ldw	r5,-4(fp)
 21c:	e1bffe17 	ldw	r6,-8(fp)
 220:	103ee83a 	callr	r2
 224:	00000206 	br	230 <alt_instruction_exception_entry+0x60>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
 228:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
 22c:	0005883a 	mov	r2,zero
}
 230:	e037883a 	mov	sp,fp
 234:	dfc00117 	ldw	ra,4(sp)
 238:	df000017 	ldw	fp,0(sp)
 23c:	dec00204 	addi	sp,sp,8
 240:	f800283a 	ret

Disassembly of section .text:

00000244 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
     244:	06c10034 	movhi	sp,1024
    ori sp, sp, %lo(__alt_stack_pointer)
     248:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
     24c:	068000b4 	movhi	gp,2
    ori gp, gp, %lo(_gp)
     250:	d68eaf14 	ori	gp,gp,15036
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
     254:	00800074 	movhi	r2,1
    ori r2, r2, %lo(__bss_start)
     258:	10b6b014 	ori	r2,r2,56000

    movhi r3, %hi(__bss_end)
     25c:	00c000b4 	movhi	r3,2
    ori r3, r3, %lo(__bss_end)
     260:	18dbad14 	ori	r3,r3,28340

    beq r2, r3, 1f
     264:	10c00326 	beq	r2,r3,274 <_start+0x30>

0:
    stw zero, (r2)
     268:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
     26c:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
     270:	10fffd36 	bltu	r2,r3,268 <__alt_mem_Flash_flash_data+0xf4000268>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
     274:	000d3780 	call	d378 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
     278:	000d51c0 	call	d51c <alt_main>

0000027c <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
     27c:	003fff06 	br	27c <__alt_mem_Flash_flash_data+0xf400027c>

00000280 <controllers>:
extern volatile int timeout = 0;							// used to synchronize with the timer
volatile int * interval_timer_ptr = (int *) 0x10002000;	// interal timer base address



void controllers(void* pdata){
     280:	defffa04 	addi	sp,sp,-24
     284:	dfc00515 	stw	ra,20(sp)
     288:	df000415 	stw	fp,16(sp)
     28c:	df000404 	addi	fp,sp,16
     290:	e13fff15 	stw	r4,-4(fp)
	int counter = 0x96000;				// 1/(50 MHz) x (0x960000) ~= 200 msec
     294:	00800274 	movhi	r2,9
     298:	10980004 	addi	r2,r2,24576
     29c:	e0bffd15 	stw	r2,-12(fp)
	*(interval_timer_ptr + 0x2) = (counter & 0xFFFF);
     2a0:	d0a00117 	ldw	r2,-32764(gp)
     2a4:	10800204 	addi	r2,r2,8
     2a8:	e0fffd17 	ldw	r3,-12(fp)
     2ac:	18ffffcc 	andi	r3,r3,65535
     2b0:	10c00015 	stw	r3,0(r2)
	*(interval_timer_ptr + 0x3) = (counter >> 16) & 0xFFFF;
     2b4:	d0a00117 	ldw	r2,-32764(gp)
     2b8:	10800304 	addi	r2,r2,12
     2bc:	e0fffd17 	ldw	r3,-12(fp)
     2c0:	1806d43a 	srli	r3,r3,16
     2c4:	10c00015 	stw	r3,0(r2)

	*(interval_timer_ptr + 1) = 0x7;	// STOP = 0, START = 1, CONT = 1, ITO = 1
     2c8:	d0a00117 	ldw	r2,-32764(gp)
     2cc:	10800104 	addi	r2,r2,4
     2d0:	00c001c4 	movi	r3,7
     2d4:	10c00015 	stw	r3,0(r2)


	int ID = (int*)pdata;
     2d8:	e0bfff17 	ldw	r2,-4(fp)
     2dc:	e0bffe15 	stw	r2,-8(fp)
	int hoogte = 50;
     2e0:	00800c84 	movi	r2,50
     2e4:	e0bffc15 	stw	r2,-16(fp)

	while (1){
//		while (!timeout)
//					;
		if (controller(ID) == 1){
     2e8:	e13ffe17 	ldw	r4,-8(fp)
     2ec:	00003400 	call	340 <controller>
     2f0:	10800058 	cmpnei	r2,r2,1
     2f4:	1000051e 	bne	r2,zero,30c <controllers+0x8c>
			hoogte = moveDown(ID, hoogte);
     2f8:	e13ffe17 	ldw	r4,-8(fp)
     2fc:	e17ffc17 	ldw	r5,-16(fp)
     300:	00005cc0 	call	5cc <moveDown>
     304:	e0bffc15 	stw	r2,-16(fp)
     308:	00000706 	br	328 <controllers+0xa8>
		}else if(controller(ID) == 0){
     30c:	e13ffe17 	ldw	r4,-8(fp)
     310:	00003400 	call	340 <controller>
     314:	1000041e 	bne	r2,zero,328 <controllers+0xa8>
			hoogte = moveUp(ID, hoogte);
     318:	e13ffe17 	ldw	r4,-8(fp)
     31c:	e17ffc17 	ldw	r5,-16(fp)
     320:	00004b40 	call	4b4 <moveUp>
     324:	e0bffc15 	stw	r2,-16(fp)
		}

		OSTimeDlyHMSM(0,0,0,50);
     328:	0009883a 	mov	r4,zero
     32c:	000b883a 	mov	r5,zero
     330:	000d883a 	mov	r6,zero
     334:	01c00c84 	movi	r7,50
     338:	00155100 	call	15510 <OSTimeDlyHMSM>
	}
     33c:	003fea06 	br	2e8 <__alt_mem_Flash_flash_data+0xf40002e8>

00000340 <controller>:


}

int controller(int ID){
     340:	defff904 	addi	sp,sp,-28
     344:	dfc00615 	stw	ra,24(sp)
     348:	df000515 	stw	fp,20(sp)
     34c:	df000504 	addi	fp,sp,20
     350:	e13fff15 	stw	r4,-4(fp)
	alt_up_parallel_port_dev * KEY_ptr = alt_up_parallel_port_open_dev ("/dev/Pushbuttons");
     354:	010000b4 	movhi	r4,2
     358:	21259404 	addi	r4,r4,-27056
     35c:	00173f00 	call	173f0 <alt_up_parallel_port_open_dev>
     360:	e0bffb15 	stw	r2,-20(fp)
	alt_up_parallel_port_dev * SW_switch_ptr	= alt_up_parallel_port_open_dev ("/dev/Slider_Switches");
     364:	010000b4 	movhi	r4,2
     368:	21259904 	addi	r4,r4,-27036
     36c:	00173f00 	call	173f0 <alt_up_parallel_port_open_dev>
     370:	e0bffc15 	stw	r2,-16(fp)

	int KEY_value, SW_value;
	INT8U err;

	SW_value = alt_up_parallel_port_read_data(SW_switch_ptr);
     374:	e0bffc17 	ldw	r2,-16(fp)
     378:	10800a17 	ldw	r2,40(r2)
     37c:	10800037 	ldwio	r2,0(r2)
     380:	e0bffd15 	stw	r2,-12(fp)
	KEY_value = alt_up_parallel_port_read_data(KEY_ptr); 		// read the pushbutton KEY values
     384:	e0bffb17 	ldw	r2,-20(fp)
     388:	10800a17 	ldw	r2,40(r2)
     38c:	10800037 	ldwio	r2,0(r2)
     390:	e0bffe15 	stw	r2,-8(fp)

	if(ID == 2){
     394:	e0bfff17 	ldw	r2,-4(fp)
     398:	10800098 	cmpnei	r2,r2,2
     39c:	1000131e 	bne	r2,zero,3ec <controller+0xac>
		if(KEY_value != 0){
     3a0:	e0bffe17 	ldw	r2,-8(fp)
     3a4:	10000f26 	beq	r2,zero,3e4 <controller+0xa4>
			while(KEY_value == 8){
     3a8:	e0bffe17 	ldw	r2,-8(fp)
     3ac:	10800218 	cmpnei	r2,r2,8
     3b0:	1000021e 	bne	r2,zero,3bc <controller+0x7c>
				return 1;
     3b4:	00800044 	movi	r2,1
     3b8:	00002606 	br	454 <controller+0x114>
			}
			while(KEY_value == 4){
     3bc:	e0bffe17 	ldw	r2,-8(fp)
     3c0:	10800118 	cmpnei	r2,r2,4
     3c4:	1000021e 	bne	r2,zero,3d0 <controller+0x90>
				return 0;
     3c8:	0005883a 	mov	r2,zero
     3cc:	00002106 	br	454 <controller+0x114>
			}
			while(KEY_value == 2){
     3d0:	e0bffe17 	ldw	r2,-8(fp)
     3d4:	10800098 	cmpnei	r2,r2,2
     3d8:	10001e1e 	bne	r2,zero,454 <controller+0x114>
				return 2;
     3dc:	00800084 	movi	r2,2
     3e0:	00001c06 	br	454 <controller+0x114>
			}
		}else{
			return 3;
     3e4:	008000c4 	movi	r2,3
     3e8:	00001a06 	br	454 <controller+0x114>
		}

	}else if(ID == 1){
     3ec:	e0bfff17 	ldw	r2,-4(fp)
     3f0:	10800058 	cmpnei	r2,r2,1
     3f4:	1000171e 	bne	r2,zero,454 <controller+0x114>
		if(SW_value != 0){
     3f8:	e0bffd17 	ldw	r2,-12(fp)
     3fc:	10001326 	beq	r2,zero,44c <controller+0x10c>
			printf("waarde van switches is: %d\n", SW_value);
     400:	010000b4 	movhi	r4,2
     404:	21259f04 	addi	r4,r4,-27012
     408:	e17ffd17 	ldw	r5,-12(fp)
     40c:	0000cfc0 	call	cfc <printf>
			while(SW_value == 2){
     410:	e0bffd17 	ldw	r2,-12(fp)
     414:	10800098 	cmpnei	r2,r2,2
     418:	1000021e 	bne	r2,zero,424 <controller+0xe4>
				return 1;
     41c:	00800044 	movi	r2,1
     420:	00000c06 	br	454 <controller+0x114>
			}
			while(SW_value == 1){
     424:	e0bffd17 	ldw	r2,-12(fp)
     428:	10800058 	cmpnei	r2,r2,1
     42c:	1000021e 	bne	r2,zero,438 <controller+0xf8>
				return 0;
     430:	0005883a 	mov	r2,zero
     434:	00000706 	br	454 <controller+0x114>
			}
			while(SW_value >= 3){
     438:	e0bffd17 	ldw	r2,-12(fp)
     43c:	108000d0 	cmplti	r2,r2,3
     440:	1000041e 	bne	r2,zero,454 <controller+0x114>
				return 2;
     444:	00800084 	movi	r2,2
     448:	00000206 	br	454 <controller+0x114>
			}
		}else{
			return 3;
     44c:	008000c4 	movi	r2,3
     450:	00000006 	br	454 <controller+0x114>
		}
	}

}
     454:	e037883a 	mov	sp,fp
     458:	dfc00117 	ldw	ra,4(sp)
     45c:	df000017 	ldw	fp,0(sp)
     460:	dec00204 	addi	sp,sp,8
     464:	f800283a 	ret

00000468 <checkID>:

int checkID(int ID){
     468:	defffe04 	addi	sp,sp,-8
     46c:	df000115 	stw	fp,4(sp)
     470:	df000104 	addi	fp,sp,4
     474:	e13fff15 	stw	r4,-4(fp)
	if(ID == 1){
     478:	e0bfff17 	ldw	r2,-4(fp)
     47c:	10800058 	cmpnei	r2,r2,1
     480:	1000021e 	bne	r2,zero,48c <checkID+0x24>
		return 15;
     484:	008003c4 	movi	r2,15
     488:	00000606 	br	4a4 <checkID+0x3c>
	}else if(ID == 2){
     48c:	e0bfff17 	ldw	r2,-4(fp)
     490:	10800098 	cmpnei	r2,r2,2
     494:	1000021e 	bne	r2,zero,4a0 <checkID+0x38>
		return 300;
     498:	00804b04 	movi	r2,300
     49c:	00000106 	br	4a4 <checkID+0x3c>

	}
	return 0;
     4a0:	0005883a 	mov	r2,zero
}
     4a4:	e037883a 	mov	sp,fp
     4a8:	df000017 	ldw	fp,0(sp)
     4ac:	dec00104 	addi	sp,sp,4
     4b0:	f800283a 	ret

000004b4 <moveUp>:

int moveUp(int ID, int current){
     4b4:	defff904 	addi	sp,sp,-28
     4b8:	dfc00615 	stw	ra,24(sp)
     4bc:	df000515 	stw	fp,20(sp)
     4c0:	df000504 	addi	fp,sp,20
     4c4:	e13ffe15 	stw	r4,-8(fp)
     4c8:	e17fff15 	stw	r5,-4(fp)
	int boven = current;
     4cc:	e0bfff17 	ldw	r2,-4(fp)
     4d0:	e0bffc15 	stw	r2,-16(fp)

	int X = checkID(ID);
     4d4:	e13ffe17 	ldw	r4,-8(fp)
     4d8:	00004680 	call	468 <checkID>
     4dc:	e0bffd15 	stw	r2,-12(fp)

	if(boven >= 4 && boven <= 184){
     4e0:	e0bffc17 	ldw	r2,-16(fp)
     4e4:	10800110 	cmplti	r2,r2,4
     4e8:	10001f1e 	bne	r2,zero,568 <moveUp+0xb4>
     4ec:	e0bffc17 	ldw	r2,-16(fp)
     4f0:	10802e48 	cmpgei	r2,r2,185
     4f4:	10001c1e 	bne	r2,zero,568 <moveUp+0xb4>
		VGA_box(X, boven, X + 5, boven + 1, kleur);
     4f8:	e0bffd17 	ldw	r2,-12(fp)
     4fc:	11800144 	addi	r6,r2,5
     500:	e0bffc17 	ldw	r2,-16(fp)
     504:	10c00044 	addi	r3,r2,1
     508:	d0a0000b 	ldhu	r2,-32768(gp)
     50c:	10bfffcc 	andi	r2,r2,65535
     510:	10a0001c 	xori	r2,r2,32768
     514:	10a00004 	addi	r2,r2,-32768
     518:	d8800015 	stw	r2,0(sp)
     51c:	e13ffd17 	ldw	r4,-12(fp)
     520:	e17ffc17 	ldw	r5,-16(fp)
     524:	180f883a 	mov	r7,r3
     528:	0000b8c0 	call	b8c <VGA_box>
		VGA_box(X, boven +50, X + 5, boven + 51, 0);
     52c:	e0bffc17 	ldw	r2,-16(fp)
     530:	11400c84 	addi	r5,r2,50
     534:	e0bffd17 	ldw	r2,-12(fp)
     538:	10c00144 	addi	r3,r2,5
     53c:	e0bffc17 	ldw	r2,-16(fp)
     540:	10800cc4 	addi	r2,r2,51
     544:	d8000015 	stw	zero,0(sp)
     548:	e13ffd17 	ldw	r4,-12(fp)
     54c:	180d883a 	mov	r6,r3
     550:	100f883a 	mov	r7,r2
     554:	0000b8c0 	call	b8c <VGA_box>
		boven--;
     558:	e0bffc17 	ldw	r2,-16(fp)
     55c:	10bfffc4 	addi	r2,r2,-1
     560:	e0bffc15 	stw	r2,-16(fp)
int moveUp(int ID, int current){
	int boven = current;

	int X = checkID(ID);

	if(boven >= 4 && boven <= 184){
     564:	00001306 	br	5b4 <moveUp+0x100>
		VGA_box(X, boven, X + 5, boven + 1, kleur);
		VGA_box(X, boven +50, X + 5, boven + 51, 0);
		boven--;
	}else if(boven > 184){
     568:	e0bffc17 	ldw	r2,-16(fp)
     56c:	10802e50 	cmplti	r2,r2,185
     570:	1000101e 	bne	r2,zero,5b4 <moveUp+0x100>
		VGA_box(X, boven, X + 5, boven + 1, kleur);
     574:	e0bffd17 	ldw	r2,-12(fp)
     578:	11800144 	addi	r6,r2,5
     57c:	e0bffc17 	ldw	r2,-16(fp)
     580:	10c00044 	addi	r3,r2,1
     584:	d0a0000b 	ldhu	r2,-32768(gp)
     588:	10bfffcc 	andi	r2,r2,65535
     58c:	10a0001c 	xori	r2,r2,32768
     590:	10a00004 	addi	r2,r2,-32768
     594:	d8800015 	stw	r2,0(sp)
     598:	e13ffd17 	ldw	r4,-12(fp)
     59c:	e17ffc17 	ldw	r5,-16(fp)
     5a0:	180f883a 	mov	r7,r3
     5a4:	0000b8c0 	call	b8c <VGA_box>
		boven--;
     5a8:	e0bffc17 	ldw	r2,-16(fp)
     5ac:	10bfffc4 	addi	r2,r2,-1
     5b0:	e0bffc15 	stw	r2,-16(fp)
	}
	return boven;
     5b4:	e0bffc17 	ldw	r2,-16(fp)

}
     5b8:	e037883a 	mov	sp,fp
     5bc:	dfc00117 	ldw	ra,4(sp)
     5c0:	df000017 	ldw	fp,0(sp)
     5c4:	dec00204 	addi	sp,sp,8
     5c8:	f800283a 	ret

000005cc <moveDown>:
int moveDown(int ID, int current){
     5cc:	defff904 	addi	sp,sp,-28
     5d0:	dfc00615 	stw	ra,24(sp)
     5d4:	df000515 	stw	fp,20(sp)
     5d8:	df000504 	addi	fp,sp,20
     5dc:	e13ffe15 	stw	r4,-8(fp)
     5e0:	e17fff15 	stw	r5,-4(fp)
	int boven = current;
     5e4:	e0bfff17 	ldw	r2,-4(fp)
     5e8:	e0bffc15 	stw	r2,-16(fp)

	int X = checkID(ID);
     5ec:	e13ffe17 	ldw	r4,-8(fp)
     5f0:	00004680 	call	468 <checkID>
     5f4:	e0bffd15 	stw	r2,-12(fp)

	if(boven <= 184 && boven >= 4){
     5f8:	e0bffc17 	ldw	r2,-16(fp)
     5fc:	10802e48 	cmpgei	r2,r2,185
     600:	10001f1e 	bne	r2,zero,680 <moveDown+0xb4>
     604:	e0bffc17 	ldw	r2,-16(fp)
     608:	10800110 	cmplti	r2,r2,4
     60c:	10001c1e 	bne	r2,zero,680 <moveDown+0xb4>
		VGA_box(X, boven + 50, X + 5, boven + 51, kleur);
     610:	e0bffc17 	ldw	r2,-16(fp)
     614:	11400c84 	addi	r5,r2,50
     618:	e0bffd17 	ldw	r2,-12(fp)
     61c:	11800144 	addi	r6,r2,5
     620:	e0bffc17 	ldw	r2,-16(fp)
     624:	10c00cc4 	addi	r3,r2,51
     628:	d0a0000b 	ldhu	r2,-32768(gp)
     62c:	10bfffcc 	andi	r2,r2,65535
     630:	10a0001c 	xori	r2,r2,32768
     634:	10a00004 	addi	r2,r2,-32768
     638:	d8800015 	stw	r2,0(sp)
     63c:	e13ffd17 	ldw	r4,-12(fp)
     640:	180f883a 	mov	r7,r3
     644:	0000b8c0 	call	b8c <VGA_box>
		VGA_box(X, boven, X + 5, boven + 1, 0);
     648:	e0bffd17 	ldw	r2,-12(fp)
     64c:	10c00144 	addi	r3,r2,5
     650:	e0bffc17 	ldw	r2,-16(fp)
     654:	10800044 	addi	r2,r2,1
     658:	d8000015 	stw	zero,0(sp)
     65c:	e13ffd17 	ldw	r4,-12(fp)
     660:	e17ffc17 	ldw	r5,-16(fp)
     664:	180d883a 	mov	r6,r3
     668:	100f883a 	mov	r7,r2
     66c:	0000b8c0 	call	b8c <VGA_box>
		boven++;
     670:	e0bffc17 	ldw	r2,-16(fp)
     674:	10800044 	addi	r2,r2,1
     678:	e0bffc15 	stw	r2,-16(fp)
int moveDown(int ID, int current){
	int boven = current;

	int X = checkID(ID);

	if(boven <= 184 && boven >= 4){
     67c:	00001406 	br	6d0 <moveDown+0x104>
		VGA_box(X, boven + 50, X + 5, boven + 51, kleur);
		VGA_box(X, boven, X + 5, boven + 1, 0);
		boven++;
	}else if(boven < 4){
     680:	e0bffc17 	ldw	r2,-16(fp)
     684:	10800108 	cmpgei	r2,r2,4
     688:	1000111e 	bne	r2,zero,6d0 <moveDown+0x104>
		VGA_box(X, boven + 50, X+5, boven + 51, kleur);
     68c:	e0bffc17 	ldw	r2,-16(fp)
     690:	11400c84 	addi	r5,r2,50
     694:	e0bffd17 	ldw	r2,-12(fp)
     698:	11800144 	addi	r6,r2,5
     69c:	e0bffc17 	ldw	r2,-16(fp)
     6a0:	10c00cc4 	addi	r3,r2,51
     6a4:	d0a0000b 	ldhu	r2,-32768(gp)
     6a8:	10bfffcc 	andi	r2,r2,65535
     6ac:	10a0001c 	xori	r2,r2,32768
     6b0:	10a00004 	addi	r2,r2,-32768
     6b4:	d8800015 	stw	r2,0(sp)
     6b8:	e13ffd17 	ldw	r4,-12(fp)
     6bc:	180f883a 	mov	r7,r3
     6c0:	0000b8c0 	call	b8c <VGA_box>
		boven++;
     6c4:	e0bffc17 	ldw	r2,-16(fp)
     6c8:	10800044 	addi	r2,r2,1
     6cc:	e0bffc15 	stw	r2,-16(fp)
	}
	return boven;
     6d0:	e0bffc17 	ldw	r2,-16(fp)

}
     6d4:	e037883a 	mov	sp,fp
     6d8:	dfc00117 	ldw	ra,4(sp)
     6dc:	df000017 	ldw	fp,0(sp)
     6e0:	dec00204 	addi	sp,sp,8
     6e4:	f800283a 	ret

000006e8 <menu>:
// 0xffff00 = wit
// 0x000000 = zwart
	int xMenu = 32;
	int yMenu = 18;

void menu(void* pdata){
     6e8:	defffc04 	addi	sp,sp,-16
     6ec:	dfc00315 	stw	ra,12(sp)
     6f0:	df000215 	stw	fp,8(sp)
     6f4:	df000204 	addi	fp,sp,8
     6f8:	e13fff15 	stw	r4,-4(fp)
	int ID = (int*)pdata;
     6fc:	e0bfff17 	ldw	r2,-4(fp)
     700:	e0bffe15 	stw	r2,-8(fp)




	while(1){
		if (gameModeMenu <= 0){
     704:	d0a00217 	ldw	r2,-32760(gp)
     708:	00800316 	blt	zero,r2,718 <menu+0x30>
			gameModeMenu = 4;
     70c:	00800104 	movi	r2,4
     710:	d0a00215 	stw	r2,-32760(gp)
     714:	00000506 	br	72c <menu+0x44>
		} else if (gameModeMenu >= 5){
     718:	d0a00217 	ldw	r2,-32760(gp)
     71c:	10800150 	cmplti	r2,r2,5
     720:	1000021e 	bne	r2,zero,72c <menu+0x44>
			gameModeMenu = 1;
     724:	00800044 	movi	r2,1
     728:	d0a00215 	stw	r2,-32760(gp)
		}

		if (controller(ID) == 1){
     72c:	e13ffe17 	ldw	r4,-8(fp)
     730:	00003400 	call	340 <controller>
     734:	10800058 	cmpnei	r2,r2,1
     738:	1000041e 	bne	r2,zero,74c <menu+0x64>
			gameModeMenu++;
     73c:	d0a00217 	ldw	r2,-32760(gp)
     740:	10800044 	addi	r2,r2,1
     744:	d0a00215 	stw	r2,-32760(gp)
     748:	00000606 	br	764 <menu+0x7c>
		} else if (controller(ID) == 0){
     74c:	e13ffe17 	ldw	r4,-8(fp)
     750:	00003400 	call	340 <controller>
     754:	1000031e 	bne	r2,zero,764 <menu+0x7c>
			gameModeMenu--;
     758:	d0a00217 	ldw	r2,-32760(gp)
     75c:	10bfffc4 	addi	r2,r2,-1
     760:	d0a00215 	stw	r2,-32760(gp)
		}


		selecteerMenu();
     764:	00007740 	call	774 <selecteerMenu>
		OSTimeDly(10);
     768:	01000284 	movi	r4,10
     76c:	00153c80 	call	153c8 <OSTimeDly>
	}
     770:	003fe406 	br	704 <__alt_mem_Flash_flash_data+0xf4000704>

00000774 <selecteerMenu>:
	VGA_text (xMenu, yMenu+8, "Highscores");
	VGA_text (xMenu, yMenu+12, "Tutorial");
}


void selecteerMenu(){
     774:	defffd04 	addi	sp,sp,-12
     778:	dfc00215 	stw	ra,8(sp)
     77c:	df000115 	stw	fp,4(sp)
     780:	df000104 	addi	fp,sp,4

	//  VGA_box(x1, y1, x2, y2, menuTextKleur);
	if (gameModeMenu == 1){
     784:	d0a00217 	ldw	r2,-32760(gp)
     788:	10800058 	cmpnei	r2,r2,1
     78c:	1000191e 	bne	r2,zero,7f4 <selecteerMenu+0x80>
		tekenBox(xLinks, xBoven, xRechts, xOnder, 0xffff00);
     790:	d1200417 	ldw	r4,-32752(gp)
     794:	d1600617 	ldw	r5,-32744(gp)
     798:	d1a00517 	ldw	r6,-32748(gp)
     79c:	d0e00717 	ldw	r3,-32740(gp)
     7a0:	00804034 	movhi	r2,256
     7a4:	10bfc004 	addi	r2,r2,-256
     7a8:	d8800015 	stw	r2,0(sp)
     7ac:	180f883a 	mov	r7,r3
     7b0:	00009900 	call	990 <tekenBox>
		tekenBox2(xLinks, xBoven, xRechts, xOnder, 0x000000);
     7b4:	d1200417 	ldw	r4,-32752(gp)
     7b8:	d1600617 	ldw	r5,-32744(gp)
     7bc:	d0e00517 	ldw	r3,-32748(gp)
     7c0:	d0a00717 	ldw	r2,-32740(gp)
     7c4:	d8000015 	stw	zero,0(sp)
     7c8:	180d883a 	mov	r6,r3
     7cc:	100f883a 	mov	r7,r2
     7d0:	00009e80 	call	9e8 <tekenBox2>
		VGA_text (xMenu, yMenu, "Singleplayer");
     7d4:	d0e00817 	ldw	r3,-32736(gp)
     7d8:	d0a00917 	ldw	r2,-32732(gp)
     7dc:	1809883a 	mov	r4,r3
     7e0:	100b883a 	mov	r5,r2
     7e4:	018000b4 	movhi	r6,2
     7e8:	31a5a604 	addi	r6,r6,-26984
     7ec:	0000c400 	call	c40 <VGA_text>
     7f0:	00006206 	br	97c <selecteerMenu+0x208>
	} else if (gameModeMenu == 2){
     7f4:	d0a00217 	ldw	r2,-32760(gp)
     7f8:	10800098 	cmpnei	r2,r2,2
     7fc:	10001e1e 	bne	r2,zero,878 <selecteerMenu+0x104>
		tekenBox(xLinks, xBoven+20, xRechts, xOnder+20, 0xffff00);
     800:	d1200417 	ldw	r4,-32752(gp)
     804:	d0a00617 	ldw	r2,-32744(gp)
     808:	11400504 	addi	r5,r2,20
     80c:	d1a00517 	ldw	r6,-32748(gp)
     810:	d0a00717 	ldw	r2,-32740(gp)
     814:	10c00504 	addi	r3,r2,20
     818:	00804034 	movhi	r2,256
     81c:	10bfc004 	addi	r2,r2,-256
     820:	d8800015 	stw	r2,0(sp)
     824:	180f883a 	mov	r7,r3
     828:	00009900 	call	990 <tekenBox>
		tekenBox2(xLinks, xBoven+20, xRechts, xOnder+20, 0x000000);
     82c:	d1200417 	ldw	r4,-32752(gp)
     830:	d0a00617 	ldw	r2,-32744(gp)
     834:	11400504 	addi	r5,r2,20
     838:	d0e00517 	ldw	r3,-32748(gp)
     83c:	d0a00717 	ldw	r2,-32740(gp)
     840:	10800504 	addi	r2,r2,20
     844:	d8000015 	stw	zero,0(sp)
     848:	180d883a 	mov	r6,r3
     84c:	100f883a 	mov	r7,r2
     850:	00009e80 	call	9e8 <tekenBox2>
		VGA_text (xMenu, yMenu+4, "Multiplayer");
     854:	d0e00817 	ldw	r3,-32736(gp)
     858:	d0a00917 	ldw	r2,-32732(gp)
     85c:	10800104 	addi	r2,r2,4
     860:	1809883a 	mov	r4,r3
     864:	100b883a 	mov	r5,r2
     868:	018000b4 	movhi	r6,2
     86c:	31a5aa04 	addi	r6,r6,-26968
     870:	0000c400 	call	c40 <VGA_text>
     874:	00004106 	br	97c <selecteerMenu+0x208>
	} else if (gameModeMenu == 3){
     878:	d0a00217 	ldw	r2,-32760(gp)
     87c:	108000d8 	cmpnei	r2,r2,3
     880:	10001e1e 	bne	r2,zero,8fc <selecteerMenu+0x188>
		tekenBox(xLinks, xBoven+40, xRechts, xOnder+40, 0xffff00);
     884:	d1200417 	ldw	r4,-32752(gp)
     888:	d0a00617 	ldw	r2,-32744(gp)
     88c:	11400a04 	addi	r5,r2,40
     890:	d1a00517 	ldw	r6,-32748(gp)
     894:	d0a00717 	ldw	r2,-32740(gp)
     898:	10c00a04 	addi	r3,r2,40
     89c:	00804034 	movhi	r2,256
     8a0:	10bfc004 	addi	r2,r2,-256
     8a4:	d8800015 	stw	r2,0(sp)
     8a8:	180f883a 	mov	r7,r3
     8ac:	00009900 	call	990 <tekenBox>
		tekenBox2(xLinks, xBoven+40, xRechts, xOnder+40, 0x000000);
     8b0:	d1200417 	ldw	r4,-32752(gp)
     8b4:	d0a00617 	ldw	r2,-32744(gp)
     8b8:	11400a04 	addi	r5,r2,40
     8bc:	d0e00517 	ldw	r3,-32748(gp)
     8c0:	d0a00717 	ldw	r2,-32740(gp)
     8c4:	10800a04 	addi	r2,r2,40
     8c8:	d8000015 	stw	zero,0(sp)
     8cc:	180d883a 	mov	r6,r3
     8d0:	100f883a 	mov	r7,r2
     8d4:	00009e80 	call	9e8 <tekenBox2>
		VGA_text (xMenu, yMenu+8, "Highscores");
     8d8:	d0e00817 	ldw	r3,-32736(gp)
     8dc:	d0a00917 	ldw	r2,-32732(gp)
     8e0:	10800204 	addi	r2,r2,8
     8e4:	1809883a 	mov	r4,r3
     8e8:	100b883a 	mov	r5,r2
     8ec:	018000b4 	movhi	r6,2
     8f0:	31a5ad04 	addi	r6,r6,-26956
     8f4:	0000c400 	call	c40 <VGA_text>
     8f8:	00002006 	br	97c <selecteerMenu+0x208>
	} else if (gameModeMenu == 4){
     8fc:	d0a00217 	ldw	r2,-32760(gp)
     900:	10800118 	cmpnei	r2,r2,4
     904:	10001d1e 	bne	r2,zero,97c <selecteerMenu+0x208>
		tekenBox(xLinks, xBoven+60, xRechts, xOnder+60, 0xffff00);
     908:	d1200417 	ldw	r4,-32752(gp)
     90c:	d0a00617 	ldw	r2,-32744(gp)
     910:	11400f04 	addi	r5,r2,60
     914:	d1a00517 	ldw	r6,-32748(gp)
     918:	d0a00717 	ldw	r2,-32740(gp)
     91c:	10c00f04 	addi	r3,r2,60
     920:	00804034 	movhi	r2,256
     924:	10bfc004 	addi	r2,r2,-256
     928:	d8800015 	stw	r2,0(sp)
     92c:	180f883a 	mov	r7,r3
     930:	00009900 	call	990 <tekenBox>
		tekenBox2(xLinks, xBoven+60, xRechts, xOnder+60, 0x000000);
     934:	d1200417 	ldw	r4,-32752(gp)
     938:	d0a00617 	ldw	r2,-32744(gp)
     93c:	11400f04 	addi	r5,r2,60
     940:	d0e00517 	ldw	r3,-32748(gp)
     944:	d0a00717 	ldw	r2,-32740(gp)
     948:	10800f04 	addi	r2,r2,60
     94c:	d8000015 	stw	zero,0(sp)
     950:	180d883a 	mov	r6,r3
     954:	100f883a 	mov	r7,r2
     958:	00009e80 	call	9e8 <tekenBox2>
		VGA_text (xMenu, yMenu+12, "Tutorial");
     95c:	d0e00817 	ldw	r3,-32736(gp)
     960:	d0a00917 	ldw	r2,-32732(gp)
     964:	10800304 	addi	r2,r2,12
     968:	1809883a 	mov	r4,r3
     96c:	100b883a 	mov	r5,r2
     970:	018000b4 	movhi	r6,2
     974:	31a5b004 	addi	r6,r6,-26944
     978:	0000c400 	call	c40 <VGA_text>
	}
	
}
     97c:	e037883a 	mov	sp,fp
     980:	dfc00117 	ldw	ra,4(sp)
     984:	df000017 	ldw	fp,0(sp)
     988:	dec00204 	addi	sp,sp,8
     98c:	f800283a 	ret

00000990 <tekenBox>:

void tekenBox(int Links, int Boven, int Rechts, int Onder, short Kleur){
     990:	defff804 	addi	sp,sp,-32
     994:	dfc00715 	stw	ra,28(sp)
     998:	df000615 	stw	fp,24(sp)
     99c:	df000604 	addi	fp,sp,24
     9a0:	e13ffb15 	stw	r4,-20(fp)
     9a4:	e17ffc15 	stw	r5,-16(fp)
     9a8:	e1bffd15 	stw	r6,-12(fp)
     9ac:	e1fffe15 	stw	r7,-8(fp)
     9b0:	e0800217 	ldw	r2,8(fp)
     9b4:	e0bfff0d 	sth	r2,-4(fp)
	
	VGA_box(Links, Boven, Rechts, Onder, Kleur);
     9b8:	e0bfff0f 	ldh	r2,-4(fp)
     9bc:	d8800015 	stw	r2,0(sp)
     9c0:	e13ffb17 	ldw	r4,-20(fp)
     9c4:	e17ffc17 	ldw	r5,-16(fp)
     9c8:	e1bffd17 	ldw	r6,-12(fp)
     9cc:	e1fffe17 	ldw	r7,-8(fp)
     9d0:	0000b8c0 	call	b8c <VGA_box>
	
}
     9d4:	e037883a 	mov	sp,fp
     9d8:	dfc00117 	ldw	ra,4(sp)
     9dc:	df000017 	ldw	fp,0(sp)
     9e0:	dec00204 	addi	sp,sp,8
     9e4:	f800283a 	ret

000009e8 <tekenBox2>:

void tekenBox2(int Links, int Boven, int Rechts, int Onder, short Kleur){
     9e8:	defff804 	addi	sp,sp,-32
     9ec:	dfc00715 	stw	ra,28(sp)
     9f0:	df000615 	stw	fp,24(sp)
     9f4:	df000604 	addi	fp,sp,24
     9f8:	e13ffb15 	stw	r4,-20(fp)
     9fc:	e17ffc15 	stw	r5,-16(fp)
     a00:	e1bffd15 	stw	r6,-12(fp)
     a04:	e1fffe15 	stw	r7,-8(fp)
     a08:	e0800217 	ldw	r2,8(fp)
     a0c:	e0bfff0d 	sth	r2,-4(fp)
	Links = Links - 1;
     a10:	e0bffb17 	ldw	r2,-20(fp)
     a14:	10bfffc4 	addi	r2,r2,-1
     a18:	e0bffb15 	stw	r2,-20(fp)
	Boven = Boven - 1;
     a1c:	e0bffc17 	ldw	r2,-16(fp)
     a20:	10bfffc4 	addi	r2,r2,-1
     a24:	e0bffc15 	stw	r2,-16(fp)
	Rechts = Rechts - 1;
     a28:	e0bffd17 	ldw	r2,-12(fp)
     a2c:	10bfffc4 	addi	r2,r2,-1
     a30:	e0bffd15 	stw	r2,-12(fp)
	Onder = Onder -1;
     a34:	e0bffe17 	ldw	r2,-8(fp)
     a38:	10bfffc4 	addi	r2,r2,-1
     a3c:	e0bffe15 	stw	r2,-8(fp)
	
	VGA_box(Links, Boven, Rechts, Onder, Kleur);
     a40:	e0bfff0f 	ldh	r2,-4(fp)
     a44:	d8800015 	stw	r2,0(sp)
     a48:	e13ffb17 	ldw	r4,-20(fp)
     a4c:	e17ffc17 	ldw	r5,-16(fp)
     a50:	e1bffd17 	ldw	r6,-12(fp)
     a54:	e1fffe17 	ldw	r7,-8(fp)
     a58:	0000b8c0 	call	b8c <VGA_box>
}
     a5c:	e037883a 	mov	sp,fp
     a60:	dfc00117 	ldw	ra,4(sp)
     a64:	df000017 	ldw	fp,0(sp)
     a68:	dec00204 	addi	sp,sp,8
     a6c:	f800283a 	ret

00000a70 <main>:
void controllers(void* pdata);
void menu(void* pdata);

/* The main function creates two task and starts multi-tasking */
int main(void)
{
     a70:	defffd04 	addi	sp,sp,-12
     a74:	dfc00215 	stw	ra,8(sp)
     a78:	df000115 	stw	fp,4(sp)
     a7c:	df000104 	addi	fp,sp,4

	controllerSem = OSSemCreate(1);
     a80:	01000044 	movi	r4,1
     a84:	001307c0 	call	1307c <OSSemCreate>
     a88:	d0a80215 	stw	r2,-24568(gp)
	VGA_box (0, 0, 319, 239, 0);						//clear screen
     a8c:	d8000015 	stw	zero,0(sp)
     a90:	0009883a 	mov	r4,zero
     a94:	000b883a 	mov	r5,zero
     a98:	01804fc4 	movi	r6,319
     a9c:	01c03bc4 	movi	r7,239
     aa0:	0000b8c0 	call	b8c <VGA_box>
	VGA_box (15, 50, 20, 100, 0x0000ff);				// links
     aa4:	00803fc4 	movi	r2,255
     aa8:	d8800015 	stw	r2,0(sp)
     aac:	010003c4 	movi	r4,15
     ab0:	01400c84 	movi	r5,50
     ab4:	01800504 	movi	r6,20
     ab8:	01c01904 	movi	r7,100
     abc:	0000b8c0 	call	b8c <VGA_box>
	VGA_box (300, 50, 305, 100, 0x0000ff);				// rechts
     ac0:	00803fc4 	movi	r2,255
     ac4:	d8800015 	stw	r2,0(sp)
     ac8:	01004b04 	movi	r4,300
     acc:	01400c84 	movi	r5,50
     ad0:	01804c44 	movi	r6,305
     ad4:	01c01904 	movi	r7,100
     ad8:	0000b8c0 	call	b8c <VGA_box>

	VGA_box (0, 0, 319, 3, 0xFFFFFF);					// boven
     adc:	00804034 	movhi	r2,256
     ae0:	10bfffc4 	addi	r2,r2,-1
     ae4:	d8800015 	stw	r2,0(sp)
     ae8:	0009883a 	mov	r4,zero
     aec:	000b883a 	mov	r5,zero
     af0:	01804fc4 	movi	r6,319
     af4:	01c000c4 	movi	r7,3
     af8:	0000b8c0 	call	b8c <VGA_box>
	VGA_box (0, 236, 319, 239, 0xFFFFFF);				// onder
     afc:	00804034 	movhi	r2,256
     b00:	10bfffc4 	addi	r2,r2,-1
     b04:	d8800015 	stw	r2,0(sp)
     b08:	0009883a 	mov	r4,zero
     b0c:	01403b04 	movi	r5,236
     b10:	01804fc4 	movi	r6,319
     b14:	01c03bc4 	movi	r7,239
     b18:	0000b8c0 	call	b8c <VGA_box>

//	VGA_box (159, 0, 160, 239, 0xFFFFFF);				// middenlijntje

	OSTaskCreate(controllers,(void*) 1,&controller1_stk[TASK_STACKSIZE-1],controller1_PRIORITY);
     b1c:	01000034 	movhi	r4,0
     b20:	2100a004 	addi	r4,r4,640
     b24:	01400044 	movi	r5,1
     b28:	018000b4 	movhi	r6,2
     b2c:	3186e304 	addi	r6,r6,7052
     b30:	01c00184 	movi	r7,6
     b34:	00140140 	call	14014 <OSTaskCreate>
	OSTaskCreate(controllers,(void*) 2,&controller2_stk[TASK_STACKSIZE-1],controller2_PRIORITY);
     b38:	01000034 	movhi	r4,0
     b3c:	2100a004 	addi	r4,r4,640
     b40:	01400084 	movi	r5,2
     b44:	018000b4 	movhi	r6,2
     b48:	318ee304 	addi	r6,r6,15244
     b4c:	01c001c4 	movi	r7,7
     b50:	00140140 	call	14014 <OSTaskCreate>
	OSTaskCreate(menu, (void*) 2, &menu_stk[TASK_STACKSIZE-1],menu_PRIORITY);
     b54:	01000034 	movhi	r4,0
     b58:	2101ba04 	addi	r4,r4,1768
     b5c:	01400084 	movi	r5,2
     b60:	018000b4 	movhi	r6,2
     b64:	31bee304 	addi	r6,r6,-1140
     b68:	01c00204 	movi	r7,8
     b6c:	00140140 	call	14014 <OSTaskCreate>
               
	OSStart();
     b70:	000e8300 	call	e830 <OSStart>
	return 0;
     b74:	0005883a 	mov	r2,zero
}
     b78:	e037883a 	mov	sp,fp
     b7c:	dfc00117 	ldw	ra,4(sp)
     b80:	df000017 	ldw	fp,0(sp)
     b84:	dec00204 	addi	sp,sp,8
     b88:	f800283a 	ret

00000b8c <VGA_box>:

void VGA_box(int x1, int y1, int x2, int y2, short pixel_color)
{
     b8c:	defff604 	addi	sp,sp,-40
     b90:	df000915 	stw	fp,36(sp)
     b94:	df000904 	addi	fp,sp,36
     b98:	e13ffb15 	stw	r4,-20(fp)
     b9c:	e17ffc15 	stw	r5,-16(fp)
     ba0:	e1bffd15 	stw	r6,-12(fp)
     ba4:	e1fffe15 	stw	r7,-8(fp)
     ba8:	e0800117 	ldw	r2,4(fp)
     bac:	e0bfff0d 	sth	r2,-4(fp)
	int offset, row, col;
  	volatile short * pixel_buffer = (short *) 0x08000000;	// VGA pixel buffer
     bb0:	00820034 	movhi	r2,2048
     bb4:	e0bff915 	stw	r2,-28(fp)

	/* assume that the box coordinates are valid */
	for (row = y1; row <= y2; row++)
     bb8:	e0bffc17 	ldw	r2,-16(fp)
     bbc:	e0bff715 	stw	r2,-36(fp)
     bc0:	00001806 	br	c24 <VGA_box+0x98>
	{
		col = x1;
     bc4:	e0bffb17 	ldw	r2,-20(fp)
     bc8:	e0bff815 	stw	r2,-32(fp)
		while (col <= x2)
     bcc:	00000f06 	br	c0c <VGA_box+0x80>
		{
			offset = (row << 9) + col;
     bd0:	e0bff717 	ldw	r2,-36(fp)
     bd4:	1006927a 	slli	r3,r2,9
     bd8:	e0bff817 	ldw	r2,-32(fp)
     bdc:	1885883a 	add	r2,r3,r2
     be0:	e0bffa15 	stw	r2,-24(fp)
			*(pixel_buffer + offset) = pixel_color;	// compute halfword address, set pixel
     be4:	e0bffa17 	ldw	r2,-24(fp)
     be8:	1085883a 	add	r2,r2,r2
     bec:	1007883a 	mov	r3,r2
     bf0:	e0bff917 	ldw	r2,-28(fp)
     bf4:	10c5883a 	add	r2,r2,r3
     bf8:	e0ffff0b 	ldhu	r3,-4(fp)
     bfc:	10c0000d 	sth	r3,0(r2)
			++col;
     c00:	e0bff817 	ldw	r2,-32(fp)
     c04:	10800044 	addi	r2,r2,1
     c08:	e0bff815 	stw	r2,-32(fp)

	/* assume that the box coordinates are valid */
	for (row = y1; row <= y2; row++)
	{
		col = x1;
		while (col <= x2)
     c0c:	e0bff817 	ldw	r2,-32(fp)
     c10:	e0fffd17 	ldw	r3,-12(fp)
     c14:	18bfee0e 	bge	r3,r2,bd0 <__alt_mem_Flash_flash_data+0xf4000bd0>
{
	int offset, row, col;
  	volatile short * pixel_buffer = (short *) 0x08000000;	// VGA pixel buffer

	/* assume that the box coordinates are valid */
	for (row = y1; row <= y2; row++)
     c18:	e0bff717 	ldw	r2,-36(fp)
     c1c:	10800044 	addi	r2,r2,1
     c20:	e0bff715 	stw	r2,-36(fp)
     c24:	e0bff717 	ldw	r2,-36(fp)
     c28:	e0fffe17 	ldw	r3,-8(fp)
     c2c:	18bfe50e 	bge	r3,r2,bc4 <__alt_mem_Flash_flash_data+0xf4000bc4>
			offset = (row << 9) + col;
			*(pixel_buffer + offset) = pixel_color;	// compute halfword address, set pixel
			++col;
		}
	}
}
     c30:	e037883a 	mov	sp,fp
     c34:	df000017 	ldw	fp,0(sp)
     c38:	dec00104 	addi	sp,sp,4
     c3c:	f800283a 	ret

00000c40 <VGA_text>:

void VGA_text(int x, int y, char * text_ptr)
{
     c40:	defffa04 	addi	sp,sp,-24
     c44:	df000515 	stw	fp,20(sp)
     c48:	df000504 	addi	fp,sp,20
     c4c:	e13ffd15 	stw	r4,-12(fp)
     c50:	e17ffe15 	stw	r5,-8(fp)
     c54:	e1bfff15 	stw	r6,-4(fp)
	int offset;
  	volatile char * character_buffer = (char *) 0x09000000;	// VGA character buffer
     c58:	00824034 	movhi	r2,2304
     c5c:	e0bffc15 	stw	r2,-16(fp)

	/* assume that the text string fits on one line */
	offset = (y << 7) + x;
     c60:	e0bffe17 	ldw	r2,-8(fp)
     c64:	100691fa 	slli	r3,r2,7
     c68:	e0bffd17 	ldw	r2,-12(fp)
     c6c:	1885883a 	add	r2,r3,r2
     c70:	e0bffb15 	stw	r2,-20(fp)
	while ( *(text_ptr) )
     c74:	00000c06 	br	ca8 <VGA_text+0x68>
	{
		*(character_buffer + offset) = *(text_ptr);	// write to the character buffer
     c78:	e0bffb17 	ldw	r2,-20(fp)
     c7c:	e0fffc17 	ldw	r3,-16(fp)
     c80:	1885883a 	add	r2,r3,r2
     c84:	e0ffff17 	ldw	r3,-4(fp)
     c88:	18c00003 	ldbu	r3,0(r3)
     c8c:	10c00005 	stb	r3,0(r2)
		++text_ptr;
     c90:	e0bfff17 	ldw	r2,-4(fp)
     c94:	10800044 	addi	r2,r2,1
     c98:	e0bfff15 	stw	r2,-4(fp)
		++offset;
     c9c:	e0bffb17 	ldw	r2,-20(fp)
     ca0:	10800044 	addi	r2,r2,1
     ca4:	e0bffb15 	stw	r2,-20(fp)
	int offset;
  	volatile char * character_buffer = (char *) 0x09000000;	// VGA character buffer

	/* assume that the text string fits on one line */
	offset = (y << 7) + x;
	while ( *(text_ptr) )
     ca8:	e0bfff17 	ldw	r2,-4(fp)
     cac:	10800003 	ldbu	r2,0(r2)
     cb0:	10803fcc 	andi	r2,r2,255
     cb4:	1080201c 	xori	r2,r2,128
     cb8:	10bfe004 	addi	r2,r2,-128
     cbc:	103fee1e 	bne	r2,zero,c78 <__alt_mem_Flash_flash_data+0xf4000c78>
	{
		*(character_buffer + offset) = *(text_ptr);	// write to the character buffer
		++text_ptr;
		++offset;
	}
}
     cc0:	e037883a 	mov	sp,fp
     cc4:	df000017 	ldw	fp,0(sp)
     cc8:	dec00104 	addi	sp,sp,4
     ccc:	f800283a 	ret

00000cd0 <_printf_r>:
     cd0:	defffd04 	addi	sp,sp,-12
     cd4:	dfc00015 	stw	ra,0(sp)
     cd8:	d9800115 	stw	r6,4(sp)
     cdc:	d9c00215 	stw	r7,8(sp)
     ce0:	280d883a 	mov	r6,r5
     ce4:	21400217 	ldw	r5,8(r4)
     ce8:	d9c00104 	addi	r7,sp,4
     cec:	0000d380 	call	d38 <___vfprintf_internal_r>
     cf0:	dfc00017 	ldw	ra,0(sp)
     cf4:	dec00304 	addi	sp,sp,12
     cf8:	f800283a 	ret

00000cfc <printf>:
     cfc:	defffc04 	addi	sp,sp,-16
     d00:	dfc00015 	stw	ra,0(sp)
     d04:	d9400115 	stw	r5,4(sp)
     d08:	d9800215 	stw	r6,8(sp)
     d0c:	d9c00315 	stw	r7,12(sp)
     d10:	008000b4 	movhi	r2,2
     d14:	10aeba04 	addi	r2,r2,-17688
     d18:	10800017 	ldw	r2,0(r2)
     d1c:	200b883a 	mov	r5,r4
     d20:	d9800104 	addi	r6,sp,4
     d24:	11000217 	ldw	r4,8(r2)
     d28:	0002c880 	call	2c88 <__vfprintf_internal>
     d2c:	dfc00017 	ldw	ra,0(sp)
     d30:	dec00404 	addi	sp,sp,16
     d34:	f800283a 	ret

00000d38 <___vfprintf_internal_r>:
     d38:	deffb604 	addi	sp,sp,-296
     d3c:	dfc04915 	stw	ra,292(sp)
     d40:	ddc04715 	stw	r23,284(sp)
     d44:	dd804615 	stw	r22,280(sp)
     d48:	282f883a 	mov	r23,r5
     d4c:	202d883a 	mov	r22,r4
     d50:	d9802a15 	stw	r6,168(sp)
     d54:	d9c02d15 	stw	r7,180(sp)
     d58:	df004815 	stw	fp,288(sp)
     d5c:	dd404515 	stw	r21,276(sp)
     d60:	dd004415 	stw	r20,272(sp)
     d64:	dcc04315 	stw	r19,268(sp)
     d68:	dc804215 	stw	r18,264(sp)
     d6c:	dc404115 	stw	r17,260(sp)
     d70:	dc004015 	stw	r16,256(sp)
     d74:	00054600 	call	5460 <_localeconv_r>
     d78:	10800017 	ldw	r2,0(r2)
     d7c:	1009883a 	mov	r4,r2
     d80:	d8803515 	stw	r2,212(sp)
     d84:	00073800 	call	7380 <strlen>
     d88:	d8803815 	stw	r2,224(sp)
     d8c:	b0000226 	beq	r22,zero,d98 <___vfprintf_internal_r+0x60>
     d90:	b0800e17 	ldw	r2,56(r22)
     d94:	1000e126 	beq	r2,zero,111c <___vfprintf_internal_r+0x3e4>
     d98:	b880030b 	ldhu	r2,12(r23)
     d9c:	10c8000c 	andi	r3,r2,8192
     da0:	1800061e 	bne	r3,zero,dbc <___vfprintf_internal_r+0x84>
     da4:	b9001917 	ldw	r4,100(r23)
     da8:	00f7ffc4 	movi	r3,-8193
     dac:	10880014 	ori	r2,r2,8192
     db0:	20c6703a 	and	r3,r4,r3
     db4:	b880030d 	sth	r2,12(r23)
     db8:	b8c01915 	stw	r3,100(r23)
     dbc:	10c0020c 	andi	r3,r2,8
     dc0:	1800a726 	beq	r3,zero,1060 <___vfprintf_internal_r+0x328>
     dc4:	b8c00417 	ldw	r3,16(r23)
     dc8:	1800a526 	beq	r3,zero,1060 <___vfprintf_internal_r+0x328>
     dcc:	1080068c 	andi	r2,r2,26
     dd0:	00c00284 	movi	r3,10
     dd4:	10c0aa26 	beq	r2,r3,1080 <___vfprintf_internal_r+0x348>
     dd8:	dac01e04 	addi	r11,sp,120
     ddc:	db001dc4 	addi	r12,sp,119
     de0:	d8800404 	addi	r2,sp,16
     de4:	050000b4 	movhi	r20,2
     de8:	dac02815 	stw	r11,160(sp)
     dec:	5b17c83a 	sub	r11,r11,r12
     df0:	a525c384 	addi	r20,r20,-26866
     df4:	db002915 	stw	r12,164(sp)
     df8:	d8801e15 	stw	r2,120(sp)
     dfc:	d8002015 	stw	zero,128(sp)
     e00:	d8001f15 	stw	zero,124(sp)
     e04:	d8003315 	stw	zero,204(sp)
     e08:	d8003715 	stw	zero,220(sp)
     e0c:	d8003915 	stw	zero,228(sp)
     e10:	1011883a 	mov	r8,r2
     e14:	d8003b15 	stw	zero,236(sp)
     e18:	d8003a15 	stw	zero,232(sp)
     e1c:	d8002f15 	stw	zero,188(sp)
     e20:	dac03c15 	stw	r11,240(sp)
     e24:	db002a17 	ldw	r12,168(sp)
     e28:	60800007 	ldb	r2,0(r12)
     e2c:	1000be26 	beq	r2,zero,1128 <___vfprintf_internal_r+0x3f0>
     e30:	00c00944 	movi	r3,37
     e34:	10c0bc26 	beq	r2,r3,1128 <___vfprintf_internal_r+0x3f0>
     e38:	6021883a 	mov	r16,r12
     e3c:	00000106 	br	e44 <___vfprintf_internal_r+0x10c>
     e40:	10c08426 	beq	r2,r3,1054 <___vfprintf_internal_r+0x31c>
     e44:	84000044 	addi	r16,r16,1
     e48:	80800007 	ldb	r2,0(r16)
     e4c:	103ffc1e 	bne	r2,zero,e40 <__alt_mem_Flash_flash_data+0xf4000e40>
     e50:	dac02a17 	ldw	r11,168(sp)
     e54:	82e3c83a 	sub	r17,r16,r11
     e58:	88000f26 	beq	r17,zero,e98 <___vfprintf_internal_r+0x160>
     e5c:	d8c02017 	ldw	r3,128(sp)
     e60:	d8801f17 	ldw	r2,124(sp)
     e64:	dac02a17 	ldw	r11,168(sp)
     e68:	1c47883a 	add	r3,r3,r17
     e6c:	10800044 	addi	r2,r2,1
     e70:	d8c02015 	stw	r3,128(sp)
     e74:	42c00015 	stw	r11,0(r8)
     e78:	44400115 	stw	r17,4(r8)
     e7c:	d8801f15 	stw	r2,124(sp)
     e80:	00c001c4 	movi	r3,7
     e84:	18809316 	blt	r3,r2,10d4 <___vfprintf_internal_r+0x39c>
     e88:	42000204 	addi	r8,r8,8
     e8c:	db002f17 	ldw	r12,188(sp)
     e90:	6459883a 	add	r12,r12,r17
     e94:	db002f15 	stw	r12,188(sp)
     e98:	80800007 	ldb	r2,0(r16)
     e9c:	10009426 	beq	r2,zero,10f0 <___vfprintf_internal_r+0x3b8>
     ea0:	80800044 	addi	r2,r16,1
     ea4:	84000047 	ldb	r16,1(r16)
     ea8:	d8002785 	stb	zero,158(sp)
     eac:	000d883a 	mov	r6,zero
     eb0:	027fffc4 	movi	r9,-1
     eb4:	d8002e15 	stw	zero,184(sp)
     eb8:	0023883a 	mov	r17,zero
     ebc:	01001604 	movi	r4,88
     ec0:	01400244 	movi	r5,9
     ec4:	02800a84 	movi	r10,42
     ec8:	01c01b04 	movi	r7,108
     ecc:	10c00044 	addi	r3,r2,1
     ed0:	80bff804 	addi	r2,r16,-32
     ed4:	2082cd36 	bltu	r4,r2,1a0c <___vfprintf_internal_r+0xcd4>
     ed8:	100490ba 	slli	r2,r2,2
     edc:	02c00034 	movhi	r11,0
     ee0:	5ac3bc04 	addi	r11,r11,3824
     ee4:	12c5883a 	add	r2,r2,r11
     ee8:	10800017 	ldw	r2,0(r2)
     eec:	1000683a 	jmp	r2
     ef0:	00001824 	muli	zero,zero,96
     ef4:	00001a0c 	andi	zero,zero,104
     ef8:	00001a0c 	andi	zero,zero,104
     efc:	00001974 	movhi	zero,101
     f00:	00001a0c 	andi	zero,zero,104
     f04:	00001a0c 	andi	zero,zero,104
     f08:	00001a0c 	andi	zero,zero,104
     f0c:	00001a0c 	andi	zero,zero,104
     f10:	00001a0c 	andi	zero,zero,104
     f14:	00001a0c 	andi	zero,zero,104
     f18:	00001844 	movi	zero,97
     f1c:	00001870 	cmpltui	zero,zero,97
     f20:	00001a0c 	andi	zero,zero,104
     f24:	00001130 	cmpltui	zero,zero,68
     f28:	00001140 	call	114 <alt_irq_handler+0x18>
     f2c:	00001a0c 	andi	zero,zero,104
     f30:	00001180 	call	118 <alt_irq_handler+0x1c>
     f34:	00001190 	cmplti	zero,zero,70
     f38:	00001190 	cmplti	zero,zero,70
     f3c:	00001190 	cmplti	zero,zero,70
     f40:	00001190 	cmplti	zero,zero,70
     f44:	00001190 	cmplti	zero,zero,70
     f48:	00001190 	cmplti	zero,zero,70
     f4c:	00001190 	cmplti	zero,zero,70
     f50:	00001190 	cmplti	zero,zero,70
     f54:	00001190 	cmplti	zero,zero,70
     f58:	00001a0c 	andi	zero,zero,104
     f5c:	00001a0c 	andi	zero,zero,104
     f60:	00001a0c 	andi	zero,zero,104
     f64:	00001a0c 	andi	zero,zero,104
     f68:	00001a0c 	andi	zero,zero,104
     f6c:	00001a0c 	andi	zero,zero,104
     f70:	00001a0c 	andi	zero,zero,104
     f74:	00001a0c 	andi	zero,zero,104
     f78:	00001a0c 	andi	zero,zero,104
     f7c:	00001a0c 	andi	zero,zero,104
     f80:	000011c4 	movi	zero,71
     f84:	00001634 	movhi	zero,88
     f88:	00001a0c 	andi	zero,zero,104
     f8c:	00001634 	movhi	zero,88
     f90:	00001a0c 	andi	zero,zero,104
     f94:	00001a0c 	andi	zero,zero,104
     f98:	00001a0c 	andi	zero,zero,104
     f9c:	00001a0c 	andi	zero,zero,104
     fa0:	00001720 	cmpeqi	zero,zero,92
     fa4:	00001a0c 	andi	zero,zero,104
     fa8:	00001a0c 	andi	zero,zero,104
     fac:	000015c8 	cmpgei	zero,zero,87
     fb0:	00001a0c 	andi	zero,zero,104
     fb4:	00001a0c 	andi	zero,zero,104
     fb8:	00001a0c 	andi	zero,zero,104
     fbc:	00001a0c 	andi	zero,zero,104
     fc0:	00001a0c 	andi	zero,zero,104
     fc4:	00001604 	movi	zero,88
     fc8:	00001a0c 	andi	zero,zero,104
     fcc:	00001a0c 	andi	zero,zero,104
     fd0:	000017c8 	cmpgei	zero,zero,95
     fd4:	00001a0c 	andi	zero,zero,104
     fd8:	00001a0c 	andi	zero,zero,104
     fdc:	00001a0c 	andi	zero,zero,104
     fe0:	00001a0c 	andi	zero,zero,104
     fe4:	00001a0c 	andi	zero,zero,104
     fe8:	00001a0c 	andi	zero,zero,104
     fec:	00001a0c 	andi	zero,zero,104
     ff0:	00001a0c 	andi	zero,zero,104
     ff4:	00001a0c 	andi	zero,zero,104
     ff8:	00001a0c 	andi	zero,zero,104
     ffc:	00001880 	call	188 <alt_irq_handler+0x8c>
    1000:	00001730 	cmpltui	zero,zero,92
    1004:	00001634 	movhi	zero,88
    1008:	00001634 	movhi	zero,88
    100c:	00001634 	movhi	zero,88
    1010:	00001770 	cmpltui	zero,zero,93
    1014:	00001730 	cmpltui	zero,zero,92
    1018:	00001a0c 	andi	zero,zero,104
    101c:	00001a0c 	andi	zero,zero,104
    1020:	00001780 	call	178 <alt_irq_handler+0x7c>
    1024:	00001a0c 	andi	zero,zero,104
    1028:	00001794 	movui	zero,94
    102c:	000019d0 	cmplti	zero,zero,103
    1030:	000016d8 	cmpnei	zero,zero,91
    1034:	00001984 	movi	zero,102
    1038:	00001a0c 	andi	zero,zero,104
    103c:	000018c0 	call	18c <alt_irq_handler+0x90>
    1040:	00001a0c 	andi	zero,zero,104
    1044:	00001994 	movui	zero,102
    1048:	00001a0c 	andi	zero,zero,104
    104c:	00001a0c 	andi	zero,zero,104
    1050:	00001934 	movhi	zero,100
    1054:	db002a17 	ldw	r12,168(sp)
    1058:	8323c83a 	sub	r17,r16,r12
    105c:	003f7e06 	br	e58 <__alt_mem_Flash_flash_data+0xf4000e58>
    1060:	b009883a 	mov	r4,r22
    1064:	b80b883a 	mov	r5,r23
    1068:	0002d680 	call	2d68 <__swsetup_r>
    106c:	10000c1e 	bne	r2,zero,10a0 <___vfprintf_internal_r+0x368>
    1070:	b880030b 	ldhu	r2,12(r23)
    1074:	00c00284 	movi	r3,10
    1078:	1080068c 	andi	r2,r2,26
    107c:	10ff561e 	bne	r2,r3,dd8 <__alt_mem_Flash_flash_data+0xf4000dd8>
    1080:	b880038f 	ldh	r2,14(r23)
    1084:	103f5416 	blt	r2,zero,dd8 <__alt_mem_Flash_flash_data+0xf4000dd8>
    1088:	d9802a17 	ldw	r6,168(sp)
    108c:	d9c02d17 	ldw	r7,180(sp)
    1090:	b009883a 	mov	r4,r22
    1094:	b80b883a 	mov	r5,r23
    1098:	0002cac0 	call	2cac <__sbprintf>
    109c:	00000106 	br	10a4 <___vfprintf_internal_r+0x36c>
    10a0:	00bfffc4 	movi	r2,-1
    10a4:	dfc04917 	ldw	ra,292(sp)
    10a8:	df004817 	ldw	fp,288(sp)
    10ac:	ddc04717 	ldw	r23,284(sp)
    10b0:	dd804617 	ldw	r22,280(sp)
    10b4:	dd404517 	ldw	r21,276(sp)
    10b8:	dd004417 	ldw	r20,272(sp)
    10bc:	dcc04317 	ldw	r19,268(sp)
    10c0:	dc804217 	ldw	r18,264(sp)
    10c4:	dc404117 	ldw	r17,260(sp)
    10c8:	dc004017 	ldw	r16,256(sp)
    10cc:	dec04a04 	addi	sp,sp,296
    10d0:	f800283a 	ret
    10d4:	b009883a 	mov	r4,r22
    10d8:	b80b883a 	mov	r5,r23
    10dc:	d9801e04 	addi	r6,sp,120
    10e0:	00075140 	call	7514 <__sprint_r>
    10e4:	1000081e 	bne	r2,zero,1108 <___vfprintf_internal_r+0x3d0>
    10e8:	da000404 	addi	r8,sp,16
    10ec:	003f6706 	br	e8c <__alt_mem_Flash_flash_data+0xf4000e8c>
    10f0:	d8802017 	ldw	r2,128(sp)
    10f4:	10000426 	beq	r2,zero,1108 <___vfprintf_internal_r+0x3d0>
    10f8:	b009883a 	mov	r4,r22
    10fc:	b80b883a 	mov	r5,r23
    1100:	d9801e04 	addi	r6,sp,120
    1104:	00075140 	call	7514 <__sprint_r>
    1108:	b880030b 	ldhu	r2,12(r23)
    110c:	1080100c 	andi	r2,r2,64
    1110:	103fe31e 	bne	r2,zero,10a0 <__alt_mem_Flash_flash_data+0xf40010a0>
    1114:	d8802f17 	ldw	r2,188(sp)
    1118:	003fe206 	br	10a4 <__alt_mem_Flash_flash_data+0xf40010a4>
    111c:	b009883a 	mov	r4,r22
    1120:	0004dc80 	call	4dc8 <__sinit>
    1124:	003f1c06 	br	d98 <__alt_mem_Flash_flash_data+0xf4000d98>
    1128:	dc002a17 	ldw	r16,168(sp)
    112c:	003f5a06 	br	e98 <__alt_mem_Flash_flash_data+0xf4000e98>
    1130:	1805883a 	mov	r2,r3
    1134:	8c400114 	ori	r17,r17,4
    1138:	1c000007 	ldb	r16,0(r3)
    113c:	003f6306 	br	ecc <__alt_mem_Flash_flash_data+0xf4000ecc>
    1140:	1c000007 	ldb	r16,0(r3)
    1144:	18800044 	addi	r2,r3,1
    1148:	8286ad26 	beq	r16,r10,2c00 <___vfprintf_internal_r+0x1ec8>
    114c:	82fff404 	addi	r11,r16,-48
    1150:	1007883a 	mov	r3,r2
    1154:	0013883a 	mov	r9,zero
    1158:	2aff5d36 	bltu	r5,r11,ed0 <__alt_mem_Flash_flash_data+0xf4000ed0>
    115c:	1c000007 	ldb	r16,0(r3)
    1160:	4a4002a4 	muli	r9,r9,10
    1164:	18c00044 	addi	r3,r3,1
    1168:	5a53883a 	add	r9,r11,r9
    116c:	82fff404 	addi	r11,r16,-48
    1170:	2afffa2e 	bgeu	r5,r11,115c <__alt_mem_Flash_flash_data+0xf400115c>
    1174:	483f560e 	bge	r9,zero,ed0 <__alt_mem_Flash_flash_data+0xf4000ed0>
    1178:	027fffc4 	movi	r9,-1
    117c:	003f5406 	br	ed0 <__alt_mem_Flash_flash_data+0xf4000ed0>
    1180:	8c402014 	ori	r17,r17,128
    1184:	1805883a 	mov	r2,r3
    1188:	1c000007 	ldb	r16,0(r3)
    118c:	003f4f06 	br	ecc <__alt_mem_Flash_flash_data+0xf4000ecc>
    1190:	1805883a 	mov	r2,r3
    1194:	d8002e15 	stw	zero,184(sp)
    1198:	82fff404 	addi	r11,r16,-48
    119c:	0019883a 	mov	r12,zero
    11a0:	14000007 	ldb	r16,0(r2)
    11a4:	630002a4 	muli	r12,r12,10
    11a8:	18c00044 	addi	r3,r3,1
    11ac:	1805883a 	mov	r2,r3
    11b0:	62d9883a 	add	r12,r12,r11
    11b4:	82fff404 	addi	r11,r16,-48
    11b8:	2afff92e 	bgeu	r5,r11,11a0 <__alt_mem_Flash_flash_data+0xf40011a0>
    11bc:	db002e15 	stw	r12,184(sp)
    11c0:	003f4306 	br	ed0 <__alt_mem_Flash_flash_data+0xf4000ed0>
    11c4:	8c400414 	ori	r17,r17,16
    11c8:	d8c02a15 	stw	r3,168(sp)
    11cc:	d9802785 	stb	r6,158(sp)
    11d0:	8880080c 	andi	r2,r17,32
    11d4:	d8c02d17 	ldw	r3,180(sp)
    11d8:	10015a26 	beq	r2,zero,1744 <___vfprintf_internal_r+0xa0c>
    11dc:	db002d17 	ldw	r12,180(sp)
    11e0:	18800117 	ldw	r2,4(r3)
    11e4:	1cc00017 	ldw	r19,0(r3)
    11e8:	63000204 	addi	r12,r12,8
    11ec:	db002d15 	stw	r12,180(sp)
    11f0:	1039883a 	mov	fp,r2
    11f4:	10044516 	blt	r2,zero,230c <___vfprintf_internal_r+0x15d4>
    11f8:	dd402783 	ldbu	r21,158(sp)
    11fc:	da403215 	stw	r9,200(sp)
    1200:	00800044 	movi	r2,1
    1204:	9f06b03a 	or	r3,r19,fp
    1208:	48000216 	blt	r9,zero,1214 <___vfprintf_internal_r+0x4dc>
    120c:	013fdfc4 	movi	r4,-129
    1210:	8922703a 	and	r17,r17,r4
    1214:	1802071e 	bne	r3,zero,1a34 <___vfprintf_internal_r+0xcfc>
    1218:	4802fa26 	beq	r9,zero,1e04 <___vfprintf_internal_r+0x10cc>
    121c:	10803fcc 	andi	r2,r2,255
    1220:	00c00044 	movi	r3,1
    1224:	10c22926 	beq	r2,r3,1acc <___vfprintf_internal_r+0xd94>
    1228:	00c00084 	movi	r3,2
    122c:	10c31726 	beq	r2,r3,1e8c <___vfprintf_internal_r+0x1154>
    1230:	d8c01e04 	addi	r3,sp,120
    1234:	9808d0fa 	srli	r4,r19,3
    1238:	e00a977a 	slli	r5,fp,29
    123c:	e038d0fa 	srli	fp,fp,3
    1240:	9cc001cc 	andi	r19,r19,7
    1244:	98800c04 	addi	r2,r19,48
    1248:	18ffffc4 	addi	r3,r3,-1
    124c:	2926b03a 	or	r19,r5,r4
    1250:	18800005 	stb	r2,0(r3)
    1254:	9f08b03a 	or	r4,r19,fp
    1258:	203ff61e 	bne	r4,zero,1234 <__alt_mem_Flash_flash_data+0xf4001234>
    125c:	8900004c 	andi	r4,r17,1
    1260:	d8c03115 	stw	r3,196(sp)
    1264:	2003931e 	bne	r4,zero,20b4 <___vfprintf_internal_r+0x137c>
    1268:	dac02817 	ldw	r11,160(sp)
    126c:	58e5c83a 	sub	r18,r11,r3
    1270:	9005883a 	mov	r2,r18
    1274:	9240010e 	bge	r18,r9,127c <___vfprintf_internal_r+0x544>
    1278:	4805883a 	mov	r2,r9
    127c:	d8802b15 	stw	r2,172(sp)
    1280:	d8003415 	stw	zero,208(sp)
    1284:	a8803fcc 	andi	r2,r21,255
    1288:	1080201c 	xori	r2,r2,128
    128c:	10bfe004 	addi	r2,r2,-128
    1290:	10000326 	beq	r2,zero,12a0 <___vfprintf_internal_r+0x568>
    1294:	db002b17 	ldw	r12,172(sp)
    1298:	63000044 	addi	r12,r12,1
    129c:	db002b15 	stw	r12,172(sp)
    12a0:	88c0008c 	andi	r3,r17,2
    12a4:	d8c02c15 	stw	r3,176(sp)
    12a8:	18000326 	beq	r3,zero,12b8 <___vfprintf_internal_r+0x580>
    12ac:	dac02b17 	ldw	r11,172(sp)
    12b0:	5ac00084 	addi	r11,r11,2
    12b4:	dac02b15 	stw	r11,172(sp)
    12b8:	8b00210c 	andi	r12,r17,132
    12bc:	db003015 	stw	r12,192(sp)
    12c0:	6001da1e 	bne	r12,zero,1a2c <___vfprintf_internal_r+0xcf4>
    12c4:	dac02e17 	ldw	r11,184(sp)
    12c8:	db002b17 	ldw	r12,172(sp)
    12cc:	5b39c83a 	sub	fp,r11,r12
    12d0:	0701d60e 	bge	zero,fp,1a2c <___vfprintf_internal_r+0xcf4>
    12d4:	02400404 	movi	r9,16
    12d8:	d8c02017 	ldw	r3,128(sp)
    12dc:	d8801f17 	ldw	r2,124(sp)
    12e0:	4f053c0e 	bge	r9,fp,27d4 <___vfprintf_internal_r+0x1a9c>
    12e4:	014000b4 	movhi	r5,2
    12e8:	2965c784 	addi	r5,r5,-26850
    12ec:	d9403615 	stw	r5,216(sp)
    12f0:	482b883a 	mov	r21,r9
    12f4:	04c001c4 	movi	r19,7
    12f8:	00000306 	br	1308 <___vfprintf_internal_r+0x5d0>
    12fc:	e73ffc04 	addi	fp,fp,-16
    1300:	42000204 	addi	r8,r8,8
    1304:	af00130e 	bge	r21,fp,1354 <___vfprintf_internal_r+0x61c>
    1308:	02c000b4 	movhi	r11,2
    130c:	18c00404 	addi	r3,r3,16
    1310:	10800044 	addi	r2,r2,1
    1314:	5ae5c784 	addi	r11,r11,-26850
    1318:	42c00015 	stw	r11,0(r8)
    131c:	45400115 	stw	r21,4(r8)
    1320:	d8c02015 	stw	r3,128(sp)
    1324:	d8801f15 	stw	r2,124(sp)
    1328:	98bff40e 	bge	r19,r2,12fc <__alt_mem_Flash_flash_data+0xf40012fc>
    132c:	b009883a 	mov	r4,r22
    1330:	b80b883a 	mov	r5,r23
    1334:	d9801e04 	addi	r6,sp,120
    1338:	00075140 	call	7514 <__sprint_r>
    133c:	103f721e 	bne	r2,zero,1108 <__alt_mem_Flash_flash_data+0xf4001108>
    1340:	e73ffc04 	addi	fp,fp,-16
    1344:	d8c02017 	ldw	r3,128(sp)
    1348:	d8801f17 	ldw	r2,124(sp)
    134c:	da000404 	addi	r8,sp,16
    1350:	af3fed16 	blt	r21,fp,1308 <__alt_mem_Flash_flash_data+0xf4001308>
    1354:	db003617 	ldw	r12,216(sp)
    1358:	e0c7883a 	add	r3,fp,r3
    135c:	10800044 	addi	r2,r2,1
    1360:	43000015 	stw	r12,0(r8)
    1364:	47000115 	stw	fp,4(r8)
    1368:	d8c02015 	stw	r3,128(sp)
    136c:	d8801f15 	stw	r2,124(sp)
    1370:	010001c4 	movi	r4,7
    1374:	20830e16 	blt	r4,r2,1fb0 <___vfprintf_internal_r+0x1278>
    1378:	d8802787 	ldb	r2,158(sp)
    137c:	42000204 	addi	r8,r8,8
    1380:	10000c26 	beq	r2,zero,13b4 <___vfprintf_internal_r+0x67c>
    1384:	d8801f17 	ldw	r2,124(sp)
    1388:	d9002784 	addi	r4,sp,158
    138c:	18c00044 	addi	r3,r3,1
    1390:	10800044 	addi	r2,r2,1
    1394:	41000015 	stw	r4,0(r8)
    1398:	01000044 	movi	r4,1
    139c:	41000115 	stw	r4,4(r8)
    13a0:	d8c02015 	stw	r3,128(sp)
    13a4:	d8801f15 	stw	r2,124(sp)
    13a8:	010001c4 	movi	r4,7
    13ac:	2082a716 	blt	r4,r2,1e4c <___vfprintf_internal_r+0x1114>
    13b0:	42000204 	addi	r8,r8,8
    13b4:	dac02c17 	ldw	r11,176(sp)
    13b8:	58000c26 	beq	r11,zero,13ec <___vfprintf_internal_r+0x6b4>
    13bc:	d8801f17 	ldw	r2,124(sp)
    13c0:	d9002704 	addi	r4,sp,156
    13c4:	18c00084 	addi	r3,r3,2
    13c8:	10800044 	addi	r2,r2,1
    13cc:	41000015 	stw	r4,0(r8)
    13d0:	01000084 	movi	r4,2
    13d4:	41000115 	stw	r4,4(r8)
    13d8:	d8c02015 	stw	r3,128(sp)
    13dc:	d8801f15 	stw	r2,124(sp)
    13e0:	010001c4 	movi	r4,7
    13e4:	2082a116 	blt	r4,r2,1e6c <___vfprintf_internal_r+0x1134>
    13e8:	42000204 	addi	r8,r8,8
    13ec:	db003017 	ldw	r12,192(sp)
    13f0:	00802004 	movi	r2,128
    13f4:	60820326 	beq	r12,r2,1c04 <___vfprintf_internal_r+0xecc>
    13f8:	db003217 	ldw	r12,200(sp)
    13fc:	64abc83a 	sub	r21,r12,r18
    1400:	0540260e 	bge	zero,r21,149c <___vfprintf_internal_r+0x764>
    1404:	07000404 	movi	fp,16
    1408:	d8801f17 	ldw	r2,124(sp)
    140c:	e544570e 	bge	fp,r21,256c <___vfprintf_internal_r+0x1834>
    1410:	014000b4 	movhi	r5,2
    1414:	2965c384 	addi	r5,r5,-26866
    1418:	d9402c15 	stw	r5,176(sp)
    141c:	04c001c4 	movi	r19,7
    1420:	00000306 	br	1430 <___vfprintf_internal_r+0x6f8>
    1424:	ad7ffc04 	addi	r21,r21,-16
    1428:	42000204 	addi	r8,r8,8
    142c:	e540110e 	bge	fp,r21,1474 <___vfprintf_internal_r+0x73c>
    1430:	18c00404 	addi	r3,r3,16
    1434:	10800044 	addi	r2,r2,1
    1438:	45000015 	stw	r20,0(r8)
    143c:	47000115 	stw	fp,4(r8)
    1440:	d8c02015 	stw	r3,128(sp)
    1444:	d8801f15 	stw	r2,124(sp)
    1448:	98bff60e 	bge	r19,r2,1424 <__alt_mem_Flash_flash_data+0xf4001424>
    144c:	b009883a 	mov	r4,r22
    1450:	b80b883a 	mov	r5,r23
    1454:	d9801e04 	addi	r6,sp,120
    1458:	00075140 	call	7514 <__sprint_r>
    145c:	103f2a1e 	bne	r2,zero,1108 <__alt_mem_Flash_flash_data+0xf4001108>
    1460:	ad7ffc04 	addi	r21,r21,-16
    1464:	d8c02017 	ldw	r3,128(sp)
    1468:	d8801f17 	ldw	r2,124(sp)
    146c:	da000404 	addi	r8,sp,16
    1470:	e57fef16 	blt	fp,r21,1430 <__alt_mem_Flash_flash_data+0xf4001430>
    1474:	dac02c17 	ldw	r11,176(sp)
    1478:	1d47883a 	add	r3,r3,r21
    147c:	10800044 	addi	r2,r2,1
    1480:	42c00015 	stw	r11,0(r8)
    1484:	45400115 	stw	r21,4(r8)
    1488:	d8c02015 	stw	r3,128(sp)
    148c:	d8801f15 	stw	r2,124(sp)
    1490:	010001c4 	movi	r4,7
    1494:	20826516 	blt	r4,r2,1e2c <___vfprintf_internal_r+0x10f4>
    1498:	42000204 	addi	r8,r8,8
    149c:	8880400c 	andi	r2,r17,256
    14a0:	1001901e 	bne	r2,zero,1ae4 <___vfprintf_internal_r+0xdac>
    14a4:	d8801f17 	ldw	r2,124(sp)
    14a8:	db003117 	ldw	r12,196(sp)
    14ac:	1c87883a 	add	r3,r3,r18
    14b0:	10800044 	addi	r2,r2,1
    14b4:	43000015 	stw	r12,0(r8)
    14b8:	44800115 	stw	r18,4(r8)
    14bc:	d8c02015 	stw	r3,128(sp)
    14c0:	d8801f15 	stw	r2,124(sp)
    14c4:	010001c4 	movi	r4,7
    14c8:	20824016 	blt	r4,r2,1dcc <___vfprintf_internal_r+0x1094>
    14cc:	42000204 	addi	r8,r8,8
    14d0:	8c40010c 	andi	r17,r17,4
    14d4:	88003126 	beq	r17,zero,159c <___vfprintf_internal_r+0x864>
    14d8:	db002e17 	ldw	r12,184(sp)
    14dc:	dac02b17 	ldw	r11,172(sp)
    14e0:	62e1c83a 	sub	r16,r12,r11
    14e4:	04002d0e 	bge	zero,r16,159c <___vfprintf_internal_r+0x864>
    14e8:	04400404 	movi	r17,16
    14ec:	d8801f17 	ldw	r2,124(sp)
    14f0:	8c05150e 	bge	r17,r16,2948 <___vfprintf_internal_r+0x1c10>
    14f4:	010000b4 	movhi	r4,2
    14f8:	2125c784 	addi	r4,r4,-26850
    14fc:	d9003615 	stw	r4,216(sp)
    1500:	048001c4 	movi	r18,7
    1504:	00000306 	br	1514 <___vfprintf_internal_r+0x7dc>
    1508:	843ffc04 	addi	r16,r16,-16
    150c:	42000204 	addi	r8,r8,8
    1510:	8c00130e 	bge	r17,r16,1560 <___vfprintf_internal_r+0x828>
    1514:	014000b4 	movhi	r5,2
    1518:	18c00404 	addi	r3,r3,16
    151c:	10800044 	addi	r2,r2,1
    1520:	2965c784 	addi	r5,r5,-26850
    1524:	41400015 	stw	r5,0(r8)
    1528:	44400115 	stw	r17,4(r8)
    152c:	d8c02015 	stw	r3,128(sp)
    1530:	d8801f15 	stw	r2,124(sp)
    1534:	90bff40e 	bge	r18,r2,1508 <__alt_mem_Flash_flash_data+0xf4001508>
    1538:	b009883a 	mov	r4,r22
    153c:	b80b883a 	mov	r5,r23
    1540:	d9801e04 	addi	r6,sp,120
    1544:	00075140 	call	7514 <__sprint_r>
    1548:	103eef1e 	bne	r2,zero,1108 <__alt_mem_Flash_flash_data+0xf4001108>
    154c:	843ffc04 	addi	r16,r16,-16
    1550:	d8c02017 	ldw	r3,128(sp)
    1554:	d8801f17 	ldw	r2,124(sp)
    1558:	da000404 	addi	r8,sp,16
    155c:	8c3fed16 	blt	r17,r16,1514 <__alt_mem_Flash_flash_data+0xf4001514>
    1560:	dac03617 	ldw	r11,216(sp)
    1564:	1c07883a 	add	r3,r3,r16
    1568:	10800044 	addi	r2,r2,1
    156c:	42c00015 	stw	r11,0(r8)
    1570:	44000115 	stw	r16,4(r8)
    1574:	d8c02015 	stw	r3,128(sp)
    1578:	d8801f15 	stw	r2,124(sp)
    157c:	010001c4 	movi	r4,7
    1580:	2080060e 	bge	r4,r2,159c <___vfprintf_internal_r+0x864>
    1584:	b009883a 	mov	r4,r22
    1588:	b80b883a 	mov	r5,r23
    158c:	d9801e04 	addi	r6,sp,120
    1590:	00075140 	call	7514 <__sprint_r>
    1594:	103edc1e 	bne	r2,zero,1108 <__alt_mem_Flash_flash_data+0xf4001108>
    1598:	d8c02017 	ldw	r3,128(sp)
    159c:	d8802b17 	ldw	r2,172(sp)
    15a0:	db002e17 	ldw	r12,184(sp)
    15a4:	1300010e 	bge	r2,r12,15ac <___vfprintf_internal_r+0x874>
    15a8:	6005883a 	mov	r2,r12
    15ac:	dac02f17 	ldw	r11,188(sp)
    15b0:	5897883a 	add	r11,r11,r2
    15b4:	dac02f15 	stw	r11,188(sp)
    15b8:	18020c1e 	bne	r3,zero,1dec <___vfprintf_internal_r+0x10b4>
    15bc:	d8001f15 	stw	zero,124(sp)
    15c0:	da000404 	addi	r8,sp,16
    15c4:	003e1706 	br	e24 <__alt_mem_Flash_flash_data+0xf4000e24>
    15c8:	8c400414 	ori	r17,r17,16
    15cc:	d8c02a15 	stw	r3,168(sp)
    15d0:	8880080c 	andi	r2,r17,32
    15d4:	10010126 	beq	r2,zero,19dc <___vfprintf_internal_r+0xca4>
    15d8:	db002d17 	ldw	r12,180(sp)
    15dc:	0005883a 	mov	r2,zero
    15e0:	64c00017 	ldw	r19,0(r12)
    15e4:	67000117 	ldw	fp,4(r12)
    15e8:	63000204 	addi	r12,r12,8
    15ec:	db002d15 	stw	r12,180(sp)
    15f0:	9f06b03a 	or	r3,r19,fp
    15f4:	d8002785 	stb	zero,158(sp)
    15f8:	da403215 	stw	r9,200(sp)
    15fc:	002b883a 	mov	r21,zero
    1600:	003f0106 	br	1208 <__alt_mem_Flash_flash_data+0xf4001208>
    1604:	8c400414 	ori	r17,r17,16
    1608:	d8c02a15 	stw	r3,168(sp)
    160c:	8880080c 	andi	r2,r17,32
    1610:	1000e326 	beq	r2,zero,19a0 <___vfprintf_internal_r+0xc68>
    1614:	dac02d17 	ldw	r11,180(sp)
    1618:	00800044 	movi	r2,1
    161c:	5cc00017 	ldw	r19,0(r11)
    1620:	5f000117 	ldw	fp,4(r11)
    1624:	5ac00204 	addi	r11,r11,8
    1628:	dac02d15 	stw	r11,180(sp)
    162c:	9f06b03a 	or	r3,r19,fp
    1630:	003ff006 	br	15f4 <__alt_mem_Flash_flash_data+0xf40015f4>
    1634:	db002d17 	ldw	r12,180(sp)
    1638:	dac02d17 	ldw	r11,180(sp)
    163c:	d8c02a15 	stw	r3,168(sp)
    1640:	63000017 	ldw	r12,0(r12)
    1644:	5ac00117 	ldw	r11,4(r11)
    1648:	d9802785 	stb	r6,158(sp)
    164c:	6009883a 	mov	r4,r12
    1650:	580b883a 	mov	r5,r11
    1654:	db003715 	stw	r12,220(sp)
    1658:	da003f15 	stw	r8,252(sp)
    165c:	da403e15 	stw	r9,248(sp)
    1660:	dac03915 	stw	r11,228(sp)
    1664:	00070d80 	call	70d8 <__fpclassifyd>
    1668:	db002d17 	ldw	r12,180(sp)
    166c:	04800044 	movi	r18,1
    1670:	da003f17 	ldw	r8,252(sp)
    1674:	64c00204 	addi	r19,r12,8
    1678:	da403e17 	ldw	r9,248(sp)
    167c:	d9003717 	ldw	r4,220(sp)
    1680:	d9403917 	ldw	r5,228(sp)
    1684:	14832b1e 	bne	r2,r18,2334 <___vfprintf_internal_r+0x15fc>
    1688:	000d883a 	mov	r6,zero
    168c:	000f883a 	mov	r7,zero
    1690:	000bca00 	call	bca0 <__ledf2>
    1694:	da003f17 	ldw	r8,252(sp)
    1698:	1004b716 	blt	r2,zero,2978 <___vfprintf_internal_r+0x1c40>
    169c:	dd402783 	ldbu	r21,158(sp)
    16a0:	008011c4 	movi	r2,71
    16a4:	14040e0e 	bge	r2,r16,26e0 <___vfprintf_internal_r+0x19a8>
    16a8:	00c000b4 	movhi	r3,2
    16ac:	18e5b404 	addi	r3,r3,-26928
    16b0:	d8c03115 	stw	r3,196(sp)
    16b4:	02c000c4 	movi	r11,3
    16b8:	00bfdfc4 	movi	r2,-129
    16bc:	dac02b15 	stw	r11,172(sp)
    16c0:	88a2703a 	and	r17,r17,r2
    16c4:	dcc02d15 	stw	r19,180(sp)
    16c8:	5825883a 	mov	r18,r11
    16cc:	d8003215 	stw	zero,200(sp)
    16d0:	d8003415 	stw	zero,208(sp)
    16d4:	003eeb06 	br	1284 <__alt_mem_Flash_flash_data+0xf4001284>
    16d8:	db002d17 	ldw	r12,180(sp)
    16dc:	00800c04 	movi	r2,48
    16e0:	d8802705 	stb	r2,156(sp)
    16e4:	64c00017 	ldw	r19,0(r12)
    16e8:	00801e04 	movi	r2,120
    16ec:	d8802745 	stb	r2,157(sp)
    16f0:	008000b4 	movhi	r2,2
    16f4:	10a5bc04 	addi	r2,r2,-26896
    16f8:	63000104 	addi	r12,r12,4
    16fc:	d8c02a15 	stw	r3,168(sp)
    1700:	d8803b15 	stw	r2,236(sp)
    1704:	0039883a 	mov	fp,zero
    1708:	8c400094 	ori	r17,r17,2
    170c:	db002d15 	stw	r12,180(sp)
    1710:	00800084 	movi	r2,2
    1714:	04001e04 	movi	r16,120
    1718:	9807883a 	mov	r3,r19
    171c:	003fb506 	br	15f4 <__alt_mem_Flash_flash_data+0xf40015f4>
    1720:	8c400214 	ori	r17,r17,8
    1724:	1805883a 	mov	r2,r3
    1728:	1c000007 	ldb	r16,0(r3)
    172c:	003de706 	br	ecc <__alt_mem_Flash_flash_data+0xf4000ecc>
    1730:	d8c02a15 	stw	r3,168(sp)
    1734:	d9802785 	stb	r6,158(sp)
    1738:	8880080c 	andi	r2,r17,32
    173c:	d8c02d17 	ldw	r3,180(sp)
    1740:	103ea61e 	bne	r2,zero,11dc <__alt_mem_Flash_flash_data+0xf40011dc>
    1744:	8880040c 	andi	r2,r17,16
    1748:	1002221e 	bne	r2,zero,1fd4 <___vfprintf_internal_r+0x129c>
    174c:	8880100c 	andi	r2,r17,64
    1750:	10022026 	beq	r2,zero,1fd4 <___vfprintf_internal_r+0x129c>
    1754:	1cc0000f 	ldh	r19,0(r3)
    1758:	db002d17 	ldw	r12,180(sp)
    175c:	9839d7fa 	srai	fp,r19,31
    1760:	63000104 	addi	r12,r12,4
    1764:	db002d15 	stw	r12,180(sp)
    1768:	e005883a 	mov	r2,fp
    176c:	003ea106 	br	11f4 <__alt_mem_Flash_flash_data+0xf40011f4>
    1770:	8c401014 	ori	r17,r17,64
    1774:	1805883a 	mov	r2,r3
    1778:	1c000007 	ldb	r16,0(r3)
    177c:	003dd306 	br	ecc <__alt_mem_Flash_flash_data+0xf4000ecc>
    1780:	1c000007 	ldb	r16,0(r3)
    1784:	81c3e926 	beq	r16,r7,272c <___vfprintf_internal_r+0x19f4>
    1788:	8c400414 	ori	r17,r17,16
    178c:	1805883a 	mov	r2,r3
    1790:	003dce06 	br	ecc <__alt_mem_Flash_flash_data+0xf4000ecc>
    1794:	d8c02a15 	stw	r3,168(sp)
    1798:	d9802785 	stb	r6,158(sp)
    179c:	8880080c 	andi	r2,r17,32
    17a0:	10034726 	beq	r2,zero,24c0 <___vfprintf_internal_r+0x1788>
    17a4:	db002d17 	ldw	r12,180(sp)
    17a8:	dac02f17 	ldw	r11,188(sp)
    17ac:	60800017 	ldw	r2,0(r12)
    17b0:	5807d7fa 	srai	r3,r11,31
    17b4:	63000104 	addi	r12,r12,4
    17b8:	db002d15 	stw	r12,180(sp)
    17bc:	12c00015 	stw	r11,0(r2)
    17c0:	10c00115 	stw	r3,4(r2)
    17c4:	003d9706 	br	e24 <__alt_mem_Flash_flash_data+0xf4000e24>
    17c8:	030000b4 	movhi	r12,2
    17cc:	6325b704 	addi	r12,r12,-26916
    17d0:	d8c02a15 	stw	r3,168(sp)
    17d4:	d9802785 	stb	r6,158(sp)
    17d8:	db003b15 	stw	r12,236(sp)
    17dc:	88c0080c 	andi	r3,r17,32
    17e0:	d8802d17 	ldw	r2,180(sp)
    17e4:	18005b26 	beq	r3,zero,1954 <___vfprintf_internal_r+0xc1c>
    17e8:	dac02d17 	ldw	r11,180(sp)
    17ec:	14c00017 	ldw	r19,0(r2)
    17f0:	17000117 	ldw	fp,4(r2)
    17f4:	5ac00204 	addi	r11,r11,8
    17f8:	dac02d15 	stw	r11,180(sp)
    17fc:	8880004c 	andi	r2,r17,1
    1800:	10022926 	beq	r2,zero,20a8 <___vfprintf_internal_r+0x1370>
    1804:	9f06b03a 	or	r3,r19,fp
    1808:	18032b26 	beq	r3,zero,24b8 <___vfprintf_internal_r+0x1780>
    180c:	00800c04 	movi	r2,48
    1810:	d8802705 	stb	r2,156(sp)
    1814:	dc002745 	stb	r16,157(sp)
    1818:	8c400094 	ori	r17,r17,2
    181c:	00800084 	movi	r2,2
    1820:	003f7406 	br	15f4 <__alt_mem_Flash_flash_data+0xf40015f4>
    1824:	30803fcc 	andi	r2,r6,255
    1828:	1080201c 	xori	r2,r2,128
    182c:	10bfe004 	addi	r2,r2,-128
    1830:	1003351e 	bne	r2,zero,2508 <___vfprintf_internal_r+0x17d0>
    1834:	1805883a 	mov	r2,r3
    1838:	01800804 	movi	r6,32
    183c:	1c000007 	ldb	r16,0(r3)
    1840:	003da206 	br	ecc <__alt_mem_Flash_flash_data+0xf4000ecc>
    1844:	dac02d17 	ldw	r11,180(sp)
    1848:	db002d17 	ldw	r12,180(sp)
    184c:	5ac00017 	ldw	r11,0(r11)
    1850:	dac02e15 	stw	r11,184(sp)
    1854:	62c00104 	addi	r11,r12,4
    1858:	db002e17 	ldw	r12,184(sp)
    185c:	6003ad16 	blt	r12,zero,2714 <___vfprintf_internal_r+0x19dc>
    1860:	dac02d15 	stw	r11,180(sp)
    1864:	1805883a 	mov	r2,r3
    1868:	1c000007 	ldb	r16,0(r3)
    186c:	003d9706 	br	ecc <__alt_mem_Flash_flash_data+0xf4000ecc>
    1870:	1805883a 	mov	r2,r3
    1874:	01800ac4 	movi	r6,43
    1878:	1c000007 	ldb	r16,0(r3)
    187c:	003d9306 	br	ecc <__alt_mem_Flash_flash_data+0xf4000ecc>
    1880:	db002d17 	ldw	r12,180(sp)
    1884:	d8c02a15 	stw	r3,168(sp)
    1888:	00c00044 	movi	r3,1
    188c:	60800017 	ldw	r2,0(r12)
    1890:	63000104 	addi	r12,r12,4
    1894:	d8c02b15 	stw	r3,172(sp)
    1898:	d8002785 	stb	zero,158(sp)
    189c:	d8801405 	stb	r2,80(sp)
    18a0:	db002d15 	stw	r12,180(sp)
    18a4:	dac01404 	addi	r11,sp,80
    18a8:	1825883a 	mov	r18,r3
    18ac:	d8003215 	stw	zero,200(sp)
    18b0:	d8003415 	stw	zero,208(sp)
    18b4:	dac03115 	stw	r11,196(sp)
    18b8:	0005883a 	mov	r2,zero
    18bc:	003e7806 	br	12a0 <__alt_mem_Flash_flash_data+0xf40012a0>
    18c0:	dac02d17 	ldw	r11,180(sp)
    18c4:	db002d17 	ldw	r12,180(sp)
    18c8:	d8c02a15 	stw	r3,168(sp)
    18cc:	5ac00017 	ldw	r11,0(r11)
    18d0:	d8002785 	stb	zero,158(sp)
    18d4:	64c00104 	addi	r19,r12,4
    18d8:	dac03115 	stw	r11,196(sp)
    18dc:	5803fe26 	beq	r11,zero,28d8 <___vfprintf_internal_r+0x1ba0>
    18e0:	d9003117 	ldw	r4,196(sp)
    18e4:	4803b416 	blt	r9,zero,27b8 <___vfprintf_internal_r+0x1a80>
    18e8:	480d883a 	mov	r6,r9
    18ec:	000b883a 	mov	r5,zero
    18f0:	da003f15 	stw	r8,252(sp)
    18f4:	da403e15 	stw	r9,248(sp)
    18f8:	0005df40 	call	5df4 <memchr>
    18fc:	da003f17 	ldw	r8,252(sp)
    1900:	da403e17 	ldw	r9,248(sp)
    1904:	10043026 	beq	r2,zero,29c8 <___vfprintf_internal_r+0x1c90>
    1908:	d8c03117 	ldw	r3,196(sp)
    190c:	10e5c83a 	sub	r18,r2,r3
    1910:	4c836b16 	blt	r9,r18,26c0 <___vfprintf_internal_r+0x1988>
    1914:	9005883a 	mov	r2,r18
    1918:	9003ac16 	blt	r18,zero,27cc <___vfprintf_internal_r+0x1a94>
    191c:	dd402783 	ldbu	r21,158(sp)
    1920:	d8802b15 	stw	r2,172(sp)
    1924:	dcc02d15 	stw	r19,180(sp)
    1928:	d8003215 	stw	zero,200(sp)
    192c:	d8003415 	stw	zero,208(sp)
    1930:	003e5406 	br	1284 <__alt_mem_Flash_flash_data+0xf4001284>
    1934:	008000b4 	movhi	r2,2
    1938:	10a5bc04 	addi	r2,r2,-26896
    193c:	d8c02a15 	stw	r3,168(sp)
    1940:	d8803b15 	stw	r2,236(sp)
    1944:	d9802785 	stb	r6,158(sp)
    1948:	88c0080c 	andi	r3,r17,32
    194c:	d8802d17 	ldw	r2,180(sp)
    1950:	183fa51e 	bne	r3,zero,17e8 <__alt_mem_Flash_flash_data+0xf40017e8>
    1954:	88c0040c 	andi	r3,r17,16
    1958:	1802ee26 	beq	r3,zero,2514 <___vfprintf_internal_r+0x17dc>
    195c:	db002d17 	ldw	r12,180(sp)
    1960:	14c00017 	ldw	r19,0(r2)
    1964:	0039883a 	mov	fp,zero
    1968:	63000104 	addi	r12,r12,4
    196c:	db002d15 	stw	r12,180(sp)
    1970:	003fa206 	br	17fc <__alt_mem_Flash_flash_data+0xf40017fc>
    1974:	8c400054 	ori	r17,r17,1
    1978:	1805883a 	mov	r2,r3
    197c:	1c000007 	ldb	r16,0(r3)
    1980:	003d5206 	br	ecc <__alt_mem_Flash_flash_data+0xf4000ecc>
    1984:	8c400814 	ori	r17,r17,32
    1988:	1805883a 	mov	r2,r3
    198c:	1c000007 	ldb	r16,0(r3)
    1990:	003d4e06 	br	ecc <__alt_mem_Flash_flash_data+0xf4000ecc>
    1994:	d8c02a15 	stw	r3,168(sp)
    1998:	8880080c 	andi	r2,r17,32
    199c:	103f1d1e 	bne	r2,zero,1614 <__alt_mem_Flash_flash_data+0xf4001614>
    19a0:	8880040c 	andi	r2,r17,16
    19a4:	1001b81e 	bne	r2,zero,2088 <___vfprintf_internal_r+0x1350>
    19a8:	8880100c 	andi	r2,r17,64
    19ac:	1001b626 	beq	r2,zero,2088 <___vfprintf_internal_r+0x1350>
    19b0:	dac02d17 	ldw	r11,180(sp)
    19b4:	0039883a 	mov	fp,zero
    19b8:	00800044 	movi	r2,1
    19bc:	5cc0000b 	ldhu	r19,0(r11)
    19c0:	5ac00104 	addi	r11,r11,4
    19c4:	dac02d15 	stw	r11,180(sp)
    19c8:	9807883a 	mov	r3,r19
    19cc:	003f0906 	br	15f4 <__alt_mem_Flash_flash_data+0xf40015f4>
    19d0:	d8c02a15 	stw	r3,168(sp)
    19d4:	8880080c 	andi	r2,r17,32
    19d8:	103eff1e 	bne	r2,zero,15d8 <__alt_mem_Flash_flash_data+0xf40015d8>
    19dc:	8880040c 	andi	r2,r17,16
    19e0:	1001a11e 	bne	r2,zero,2068 <___vfprintf_internal_r+0x1330>
    19e4:	8880100c 	andi	r2,r17,64
    19e8:	10019f26 	beq	r2,zero,2068 <___vfprintf_internal_r+0x1330>
    19ec:	db002d17 	ldw	r12,180(sp)
    19f0:	0039883a 	mov	fp,zero
    19f4:	0005883a 	mov	r2,zero
    19f8:	64c0000b 	ldhu	r19,0(r12)
    19fc:	63000104 	addi	r12,r12,4
    1a00:	db002d15 	stw	r12,180(sp)
    1a04:	9807883a 	mov	r3,r19
    1a08:	003efa06 	br	15f4 <__alt_mem_Flash_flash_data+0xf40015f4>
    1a0c:	d8c02a15 	stw	r3,168(sp)
    1a10:	d9802785 	stb	r6,158(sp)
    1a14:	803db626 	beq	r16,zero,10f0 <__alt_mem_Flash_flash_data+0xf40010f0>
    1a18:	00c00044 	movi	r3,1
    1a1c:	d8c02b15 	stw	r3,172(sp)
    1a20:	dc001405 	stb	r16,80(sp)
    1a24:	d8002785 	stb	zero,158(sp)
    1a28:	003f9e06 	br	18a4 <__alt_mem_Flash_flash_data+0xf40018a4>
    1a2c:	d8c02017 	ldw	r3,128(sp)
    1a30:	003e5306 	br	1380 <__alt_mem_Flash_flash_data+0xf4001380>
    1a34:	10803fcc 	andi	r2,r2,255
    1a38:	00c00044 	movi	r3,1
    1a3c:	10fdfa1e 	bne	r2,r3,1228 <__alt_mem_Flash_flash_data+0xf4001228>
    1a40:	e000021e 	bne	fp,zero,1a4c <___vfprintf_internal_r+0xd14>
    1a44:	00800244 	movi	r2,9
    1a48:	14c0202e 	bgeu	r2,r19,1acc <___vfprintf_internal_r+0xd94>
    1a4c:	dc002b15 	stw	r16,172(sp)
    1a50:	dc402c15 	stw	r17,176(sp)
    1a54:	9821883a 	mov	r16,r19
    1a58:	e023883a 	mov	r17,fp
    1a5c:	dc801e04 	addi	r18,sp,120
    1a60:	4827883a 	mov	r19,r9
    1a64:	4039883a 	mov	fp,r8
    1a68:	8009883a 	mov	r4,r16
    1a6c:	880b883a 	mov	r5,r17
    1a70:	01800284 	movi	r6,10
    1a74:	000f883a 	mov	r7,zero
    1a78:	000a3180 	call	a318 <__umoddi3>
    1a7c:	10800c04 	addi	r2,r2,48
    1a80:	94bfffc4 	addi	r18,r18,-1
    1a84:	8009883a 	mov	r4,r16
    1a88:	880b883a 	mov	r5,r17
    1a8c:	01800284 	movi	r6,10
    1a90:	000f883a 	mov	r7,zero
    1a94:	90800005 	stb	r2,0(r18)
    1a98:	0009d580 	call	9d58 <__udivdi3>
    1a9c:	1021883a 	mov	r16,r2
    1aa0:	10c4b03a 	or	r2,r2,r3
    1aa4:	1823883a 	mov	r17,r3
    1aa8:	103fef1e 	bne	r2,zero,1a68 <__alt_mem_Flash_flash_data+0xf4001a68>
    1aac:	dac02817 	ldw	r11,160(sp)
    1ab0:	dc803115 	stw	r18,196(sp)
    1ab4:	dc002b17 	ldw	r16,172(sp)
    1ab8:	dc402c17 	ldw	r17,176(sp)
    1abc:	9813883a 	mov	r9,r19
    1ac0:	e011883a 	mov	r8,fp
    1ac4:	5ca5c83a 	sub	r18,r11,r18
    1ac8:	003de906 	br	1270 <__alt_mem_Flash_flash_data+0xf4001270>
    1acc:	9cc00c04 	addi	r19,r19,48
    1ad0:	d8c01dc4 	addi	r3,sp,119
    1ad4:	dcc01dc5 	stb	r19,119(sp)
    1ad8:	dc803c17 	ldw	r18,240(sp)
    1adc:	d8c03115 	stw	r3,196(sp)
    1ae0:	003de306 	br	1270 <__alt_mem_Flash_flash_data+0xf4001270>
    1ae4:	00801944 	movi	r2,101
    1ae8:	1400710e 	bge	r2,r16,1cb0 <___vfprintf_internal_r+0xf78>
    1aec:	d9003717 	ldw	r4,220(sp)
    1af0:	d9403917 	ldw	r5,228(sp)
    1af4:	000d883a 	mov	r6,zero
    1af8:	000f883a 	mov	r7,zero
    1afc:	d8c03d15 	stw	r3,244(sp)
    1b00:	da003f15 	stw	r8,252(sp)
    1b04:	000bb3c0 	call	bb3c <__eqdf2>
    1b08:	d8c03d17 	ldw	r3,244(sp)
    1b0c:	da003f17 	ldw	r8,252(sp)
    1b10:	1000ef1e 	bne	r2,zero,1ed0 <___vfprintf_internal_r+0x1198>
    1b14:	d8801f17 	ldw	r2,124(sp)
    1b18:	010000b4 	movhi	r4,2
    1b1c:	2125c304 	addi	r4,r4,-26868
    1b20:	18c00044 	addi	r3,r3,1
    1b24:	10800044 	addi	r2,r2,1
    1b28:	41000015 	stw	r4,0(r8)
    1b2c:	01000044 	movi	r4,1
    1b30:	41000115 	stw	r4,4(r8)
    1b34:	d8c02015 	stw	r3,128(sp)
    1b38:	d8801f15 	stw	r2,124(sp)
    1b3c:	010001c4 	movi	r4,7
    1b40:	20828e16 	blt	r4,r2,257c <___vfprintf_internal_r+0x1844>
    1b44:	42000204 	addi	r8,r8,8
    1b48:	d8802617 	ldw	r2,152(sp)
    1b4c:	dac03317 	ldw	r11,204(sp)
    1b50:	12c00216 	blt	r2,r11,1b5c <___vfprintf_internal_r+0xe24>
    1b54:	8880004c 	andi	r2,r17,1
    1b58:	103e5d26 	beq	r2,zero,14d0 <__alt_mem_Flash_flash_data+0xf40014d0>
    1b5c:	db003817 	ldw	r12,224(sp)
    1b60:	d8801f17 	ldw	r2,124(sp)
    1b64:	dac03517 	ldw	r11,212(sp)
    1b68:	1b07883a 	add	r3,r3,r12
    1b6c:	10800044 	addi	r2,r2,1
    1b70:	42c00015 	stw	r11,0(r8)
    1b74:	43000115 	stw	r12,4(r8)
    1b78:	d8c02015 	stw	r3,128(sp)
    1b7c:	d8801f15 	stw	r2,124(sp)
    1b80:	010001c4 	movi	r4,7
    1b84:	2082ed16 	blt	r4,r2,273c <___vfprintf_internal_r+0x1a04>
    1b88:	42000204 	addi	r8,r8,8
    1b8c:	db003317 	ldw	r12,204(sp)
    1b90:	643fffc4 	addi	r16,r12,-1
    1b94:	043e4e0e 	bge	zero,r16,14d0 <__alt_mem_Flash_flash_data+0xf40014d0>
    1b98:	04800404 	movi	r18,16
    1b9c:	d8801f17 	ldw	r2,124(sp)
    1ba0:	94007e0e 	bge	r18,r16,1d9c <___vfprintf_internal_r+0x1064>
    1ba4:	014000b4 	movhi	r5,2
    1ba8:	2965c384 	addi	r5,r5,-26866
    1bac:	d9402c15 	stw	r5,176(sp)
    1bb0:	054001c4 	movi	r21,7
    1bb4:	00000306 	br	1bc4 <___vfprintf_internal_r+0xe8c>
    1bb8:	42000204 	addi	r8,r8,8
    1bbc:	843ffc04 	addi	r16,r16,-16
    1bc0:	9400790e 	bge	r18,r16,1da8 <___vfprintf_internal_r+0x1070>
    1bc4:	18c00404 	addi	r3,r3,16
    1bc8:	10800044 	addi	r2,r2,1
    1bcc:	45000015 	stw	r20,0(r8)
    1bd0:	44800115 	stw	r18,4(r8)
    1bd4:	d8c02015 	stw	r3,128(sp)
    1bd8:	d8801f15 	stw	r2,124(sp)
    1bdc:	a8bff60e 	bge	r21,r2,1bb8 <__alt_mem_Flash_flash_data+0xf4001bb8>
    1be0:	b009883a 	mov	r4,r22
    1be4:	b80b883a 	mov	r5,r23
    1be8:	d9801e04 	addi	r6,sp,120
    1bec:	00075140 	call	7514 <__sprint_r>
    1bf0:	103d451e 	bne	r2,zero,1108 <__alt_mem_Flash_flash_data+0xf4001108>
    1bf4:	d8c02017 	ldw	r3,128(sp)
    1bf8:	d8801f17 	ldw	r2,124(sp)
    1bfc:	da000404 	addi	r8,sp,16
    1c00:	003fee06 	br	1bbc <__alt_mem_Flash_flash_data+0xf4001bbc>
    1c04:	dac02e17 	ldw	r11,184(sp)
    1c08:	db002b17 	ldw	r12,172(sp)
    1c0c:	5b2bc83a 	sub	r21,r11,r12
    1c10:	057df90e 	bge	zero,r21,13f8 <__alt_mem_Flash_flash_data+0xf40013f8>
    1c14:	07000404 	movi	fp,16
    1c18:	d8801f17 	ldw	r2,124(sp)
    1c1c:	e543640e 	bge	fp,r21,29b0 <___vfprintf_internal_r+0x1c78>
    1c20:	014000b4 	movhi	r5,2
    1c24:	2965c384 	addi	r5,r5,-26866
    1c28:	d9402c15 	stw	r5,176(sp)
    1c2c:	04c001c4 	movi	r19,7
    1c30:	00000306 	br	1c40 <___vfprintf_internal_r+0xf08>
    1c34:	ad7ffc04 	addi	r21,r21,-16
    1c38:	42000204 	addi	r8,r8,8
    1c3c:	e540110e 	bge	fp,r21,1c84 <___vfprintf_internal_r+0xf4c>
    1c40:	18c00404 	addi	r3,r3,16
    1c44:	10800044 	addi	r2,r2,1
    1c48:	45000015 	stw	r20,0(r8)
    1c4c:	47000115 	stw	fp,4(r8)
    1c50:	d8c02015 	stw	r3,128(sp)
    1c54:	d8801f15 	stw	r2,124(sp)
    1c58:	98bff60e 	bge	r19,r2,1c34 <__alt_mem_Flash_flash_data+0xf4001c34>
    1c5c:	b009883a 	mov	r4,r22
    1c60:	b80b883a 	mov	r5,r23
    1c64:	d9801e04 	addi	r6,sp,120
    1c68:	00075140 	call	7514 <__sprint_r>
    1c6c:	103d261e 	bne	r2,zero,1108 <__alt_mem_Flash_flash_data+0xf4001108>
    1c70:	ad7ffc04 	addi	r21,r21,-16
    1c74:	d8c02017 	ldw	r3,128(sp)
    1c78:	d8801f17 	ldw	r2,124(sp)
    1c7c:	da000404 	addi	r8,sp,16
    1c80:	e57fef16 	blt	fp,r21,1c40 <__alt_mem_Flash_flash_data+0xf4001c40>
    1c84:	dac02c17 	ldw	r11,176(sp)
    1c88:	1d47883a 	add	r3,r3,r21
    1c8c:	10800044 	addi	r2,r2,1
    1c90:	42c00015 	stw	r11,0(r8)
    1c94:	45400115 	stw	r21,4(r8)
    1c98:	d8c02015 	stw	r3,128(sp)
    1c9c:	d8801f15 	stw	r2,124(sp)
    1ca0:	010001c4 	movi	r4,7
    1ca4:	20819116 	blt	r4,r2,22ec <___vfprintf_internal_r+0x15b4>
    1ca8:	42000204 	addi	r8,r8,8
    1cac:	003dd206 	br	13f8 <__alt_mem_Flash_flash_data+0xf40013f8>
    1cb0:	db003317 	ldw	r12,204(sp)
    1cb4:	00800044 	movi	r2,1
    1cb8:	18c00044 	addi	r3,r3,1
    1cbc:	1301530e 	bge	r2,r12,220c <___vfprintf_internal_r+0x14d4>
    1cc0:	dc001f17 	ldw	r16,124(sp)
    1cc4:	dac03117 	ldw	r11,196(sp)
    1cc8:	00800044 	movi	r2,1
    1ccc:	84000044 	addi	r16,r16,1
    1cd0:	40800115 	stw	r2,4(r8)
    1cd4:	42c00015 	stw	r11,0(r8)
    1cd8:	d8c02015 	stw	r3,128(sp)
    1cdc:	dc001f15 	stw	r16,124(sp)
    1ce0:	008001c4 	movi	r2,7
    1ce4:	14016b16 	blt	r2,r16,2294 <___vfprintf_internal_r+0x155c>
    1ce8:	42000204 	addi	r8,r8,8
    1cec:	db003817 	ldw	r12,224(sp)
    1cf0:	dac03517 	ldw	r11,212(sp)
    1cf4:	84000044 	addi	r16,r16,1
    1cf8:	1b07883a 	add	r3,r3,r12
    1cfc:	42c00015 	stw	r11,0(r8)
    1d00:	43000115 	stw	r12,4(r8)
    1d04:	d8c02015 	stw	r3,128(sp)
    1d08:	dc001f15 	stw	r16,124(sp)
    1d0c:	008001c4 	movi	r2,7
    1d10:	14016916 	blt	r2,r16,22b8 <___vfprintf_internal_r+0x1580>
    1d14:	44800204 	addi	r18,r8,8
    1d18:	d9003717 	ldw	r4,220(sp)
    1d1c:	d9403917 	ldw	r5,228(sp)
    1d20:	000d883a 	mov	r6,zero
    1d24:	000f883a 	mov	r7,zero
    1d28:	d8c03d15 	stw	r3,244(sp)
    1d2c:	000bb3c0 	call	bb3c <__eqdf2>
    1d30:	d8c03d17 	ldw	r3,244(sp)
    1d34:	db003317 	ldw	r12,204(sp)
    1d38:	1000ad26 	beq	r2,zero,1ff0 <___vfprintf_internal_r+0x12b8>
    1d3c:	dac03117 	ldw	r11,196(sp)
    1d40:	60bfffc4 	addi	r2,r12,-1
    1d44:	1887883a 	add	r3,r3,r2
    1d48:	59000044 	addi	r4,r11,1
    1d4c:	84000044 	addi	r16,r16,1
    1d50:	90800115 	stw	r2,4(r18)
    1d54:	91000015 	stw	r4,0(r18)
    1d58:	d8c02015 	stw	r3,128(sp)
    1d5c:	dc001f15 	stw	r16,124(sp)
    1d60:	008001c4 	movi	r2,7
    1d64:	14014216 	blt	r2,r16,2270 <___vfprintf_internal_r+0x1538>
    1d68:	94800204 	addi	r18,r18,8
    1d6c:	dac03a17 	ldw	r11,232(sp)
    1d70:	dd4022c4 	addi	r21,sp,139
    1d74:	84000044 	addi	r16,r16,1
    1d78:	1ac7883a 	add	r3,r3,r11
    1d7c:	95400015 	stw	r21,0(r18)
    1d80:	92c00115 	stw	r11,4(r18)
    1d84:	d8c02015 	stw	r3,128(sp)
    1d88:	dc001f15 	stw	r16,124(sp)
    1d8c:	008001c4 	movi	r2,7
    1d90:	14000e16 	blt	r2,r16,1dcc <___vfprintf_internal_r+0x1094>
    1d94:	92000204 	addi	r8,r18,8
    1d98:	003dcd06 	br	14d0 <__alt_mem_Flash_flash_data+0xf40014d0>
    1d9c:	010000b4 	movhi	r4,2
    1da0:	2125c384 	addi	r4,r4,-26866
    1da4:	d9002c15 	stw	r4,176(sp)
    1da8:	dac02c17 	ldw	r11,176(sp)
    1dac:	1c07883a 	add	r3,r3,r16
    1db0:	44000115 	stw	r16,4(r8)
    1db4:	42c00015 	stw	r11,0(r8)
    1db8:	10800044 	addi	r2,r2,1
    1dbc:	d8c02015 	stw	r3,128(sp)
    1dc0:	d8801f15 	stw	r2,124(sp)
    1dc4:	010001c4 	movi	r4,7
    1dc8:	20bdc00e 	bge	r4,r2,14cc <__alt_mem_Flash_flash_data+0xf40014cc>
    1dcc:	b009883a 	mov	r4,r22
    1dd0:	b80b883a 	mov	r5,r23
    1dd4:	d9801e04 	addi	r6,sp,120
    1dd8:	00075140 	call	7514 <__sprint_r>
    1ddc:	103cca1e 	bne	r2,zero,1108 <__alt_mem_Flash_flash_data+0xf4001108>
    1de0:	d8c02017 	ldw	r3,128(sp)
    1de4:	da000404 	addi	r8,sp,16
    1de8:	003db906 	br	14d0 <__alt_mem_Flash_flash_data+0xf40014d0>
    1dec:	b009883a 	mov	r4,r22
    1df0:	b80b883a 	mov	r5,r23
    1df4:	d9801e04 	addi	r6,sp,120
    1df8:	00075140 	call	7514 <__sprint_r>
    1dfc:	103def26 	beq	r2,zero,15bc <__alt_mem_Flash_flash_data+0xf40015bc>
    1e00:	003cc106 	br	1108 <__alt_mem_Flash_flash_data+0xf4001108>
    1e04:	10803fcc 	andi	r2,r2,255
    1e08:	1000651e 	bne	r2,zero,1fa0 <___vfprintf_internal_r+0x1268>
    1e0c:	8880004c 	andi	r2,r17,1
    1e10:	10013226 	beq	r2,zero,22dc <___vfprintf_internal_r+0x15a4>
    1e14:	00800c04 	movi	r2,48
    1e18:	d8c01dc4 	addi	r3,sp,119
    1e1c:	d8801dc5 	stb	r2,119(sp)
    1e20:	dc803c17 	ldw	r18,240(sp)
    1e24:	d8c03115 	stw	r3,196(sp)
    1e28:	003d1106 	br	1270 <__alt_mem_Flash_flash_data+0xf4001270>
    1e2c:	b009883a 	mov	r4,r22
    1e30:	b80b883a 	mov	r5,r23
    1e34:	d9801e04 	addi	r6,sp,120
    1e38:	00075140 	call	7514 <__sprint_r>
    1e3c:	103cb21e 	bne	r2,zero,1108 <__alt_mem_Flash_flash_data+0xf4001108>
    1e40:	d8c02017 	ldw	r3,128(sp)
    1e44:	da000404 	addi	r8,sp,16
    1e48:	003d9406 	br	149c <__alt_mem_Flash_flash_data+0xf400149c>
    1e4c:	b009883a 	mov	r4,r22
    1e50:	b80b883a 	mov	r5,r23
    1e54:	d9801e04 	addi	r6,sp,120
    1e58:	00075140 	call	7514 <__sprint_r>
    1e5c:	103caa1e 	bne	r2,zero,1108 <__alt_mem_Flash_flash_data+0xf4001108>
    1e60:	d8c02017 	ldw	r3,128(sp)
    1e64:	da000404 	addi	r8,sp,16
    1e68:	003d5206 	br	13b4 <__alt_mem_Flash_flash_data+0xf40013b4>
    1e6c:	b009883a 	mov	r4,r22
    1e70:	b80b883a 	mov	r5,r23
    1e74:	d9801e04 	addi	r6,sp,120
    1e78:	00075140 	call	7514 <__sprint_r>
    1e7c:	103ca21e 	bne	r2,zero,1108 <__alt_mem_Flash_flash_data+0xf4001108>
    1e80:	d8c02017 	ldw	r3,128(sp)
    1e84:	da000404 	addi	r8,sp,16
    1e88:	003d5806 	br	13ec <__alt_mem_Flash_flash_data+0xf40013ec>
    1e8c:	d9403b17 	ldw	r5,236(sp)
    1e90:	d8c01e04 	addi	r3,sp,120
    1e94:	988003cc 	andi	r2,r19,15
    1e98:	e008973a 	slli	r4,fp,28
    1e9c:	2885883a 	add	r2,r5,r2
    1ea0:	9826d13a 	srli	r19,r19,4
    1ea4:	10800003 	ldbu	r2,0(r2)
    1ea8:	e038d13a 	srli	fp,fp,4
    1eac:	18ffffc4 	addi	r3,r3,-1
    1eb0:	24e6b03a 	or	r19,r4,r19
    1eb4:	18800005 	stb	r2,0(r3)
    1eb8:	9f04b03a 	or	r2,r19,fp
    1ebc:	103ff51e 	bne	r2,zero,1e94 <__alt_mem_Flash_flash_data+0xf4001e94>
    1ec0:	db002817 	ldw	r12,160(sp)
    1ec4:	d8c03115 	stw	r3,196(sp)
    1ec8:	60e5c83a 	sub	r18,r12,r3
    1ecc:	003ce806 	br	1270 <__alt_mem_Flash_flash_data+0xf4001270>
    1ed0:	dc002617 	ldw	r16,152(sp)
    1ed4:	0401b10e 	bge	zero,r16,259c <___vfprintf_internal_r+0x1864>
    1ed8:	db003117 	ldw	r12,196(sp)
    1edc:	dac03317 	ldw	r11,204(sp)
    1ee0:	62e1883a 	add	r16,r12,r11
    1ee4:	db003417 	ldw	r12,208(sp)
    1ee8:	5825883a 	mov	r18,r11
    1eec:	62c0010e 	bge	r12,r11,1ef4 <___vfprintf_internal_r+0x11bc>
    1ef0:	6025883a 	mov	r18,r12
    1ef4:	04800b0e 	bge	zero,r18,1f24 <___vfprintf_internal_r+0x11ec>
    1ef8:	d8801f17 	ldw	r2,124(sp)
    1efc:	dac03117 	ldw	r11,196(sp)
    1f00:	1c87883a 	add	r3,r3,r18
    1f04:	10800044 	addi	r2,r2,1
    1f08:	42c00015 	stw	r11,0(r8)
    1f0c:	44800115 	stw	r18,4(r8)
    1f10:	d8c02015 	stw	r3,128(sp)
    1f14:	d8801f15 	stw	r2,124(sp)
    1f18:	010001c4 	movi	r4,7
    1f1c:	20824f16 	blt	r4,r2,285c <___vfprintf_internal_r+0x1b24>
    1f20:	42000204 	addi	r8,r8,8
    1f24:	90024b16 	blt	r18,zero,2854 <___vfprintf_internal_r+0x1b1c>
    1f28:	db003417 	ldw	r12,208(sp)
    1f2c:	64a5c83a 	sub	r18,r12,r18
    1f30:	0480730e 	bge	zero,r18,2100 <___vfprintf_internal_r+0x13c8>
    1f34:	05400404 	movi	r21,16
    1f38:	d8801f17 	ldw	r2,124(sp)
    1f3c:	ac817d0e 	bge	r21,r18,2534 <___vfprintf_internal_r+0x17fc>
    1f40:	014000b4 	movhi	r5,2
    1f44:	2965c384 	addi	r5,r5,-26866
    1f48:	d9402c15 	stw	r5,176(sp)
    1f4c:	070001c4 	movi	fp,7
    1f50:	00000306 	br	1f60 <___vfprintf_internal_r+0x1228>
    1f54:	42000204 	addi	r8,r8,8
    1f58:	94bffc04 	addi	r18,r18,-16
    1f5c:	ac81780e 	bge	r21,r18,2540 <___vfprintf_internal_r+0x1808>
    1f60:	18c00404 	addi	r3,r3,16
    1f64:	10800044 	addi	r2,r2,1
    1f68:	45000015 	stw	r20,0(r8)
    1f6c:	45400115 	stw	r21,4(r8)
    1f70:	d8c02015 	stw	r3,128(sp)
    1f74:	d8801f15 	stw	r2,124(sp)
    1f78:	e0bff60e 	bge	fp,r2,1f54 <__alt_mem_Flash_flash_data+0xf4001f54>
    1f7c:	b009883a 	mov	r4,r22
    1f80:	b80b883a 	mov	r5,r23
    1f84:	d9801e04 	addi	r6,sp,120
    1f88:	00075140 	call	7514 <__sprint_r>
    1f8c:	103c5e1e 	bne	r2,zero,1108 <__alt_mem_Flash_flash_data+0xf4001108>
    1f90:	d8c02017 	ldw	r3,128(sp)
    1f94:	d8801f17 	ldw	r2,124(sp)
    1f98:	da000404 	addi	r8,sp,16
    1f9c:	003fee06 	br	1f58 <__alt_mem_Flash_flash_data+0xf4001f58>
    1fa0:	dac01e04 	addi	r11,sp,120
    1fa4:	0025883a 	mov	r18,zero
    1fa8:	dac03115 	stw	r11,196(sp)
    1fac:	003cb006 	br	1270 <__alt_mem_Flash_flash_data+0xf4001270>
    1fb0:	b009883a 	mov	r4,r22
    1fb4:	b80b883a 	mov	r5,r23
    1fb8:	d9801e04 	addi	r6,sp,120
    1fbc:	00075140 	call	7514 <__sprint_r>
    1fc0:	103c511e 	bne	r2,zero,1108 <__alt_mem_Flash_flash_data+0xf4001108>
    1fc4:	d8c02017 	ldw	r3,128(sp)
    1fc8:	d8802787 	ldb	r2,158(sp)
    1fcc:	da000404 	addi	r8,sp,16
    1fd0:	003ceb06 	br	1380 <__alt_mem_Flash_flash_data+0xf4001380>
    1fd4:	1cc00017 	ldw	r19,0(r3)
    1fd8:	dac02d17 	ldw	r11,180(sp)
    1fdc:	9839d7fa 	srai	fp,r19,31
    1fe0:	5ac00104 	addi	r11,r11,4
    1fe4:	dac02d15 	stw	r11,180(sp)
    1fe8:	e005883a 	mov	r2,fp
    1fec:	003c8106 	br	11f4 <__alt_mem_Flash_flash_data+0xf40011f4>
    1ff0:	657fffc4 	addi	r21,r12,-1
    1ff4:	057f5d0e 	bge	zero,r21,1d6c <__alt_mem_Flash_flash_data+0xf4001d6c>
    1ff8:	07000404 	movi	fp,16
    1ffc:	e540900e 	bge	fp,r21,2240 <___vfprintf_internal_r+0x1508>
    2000:	010000b4 	movhi	r4,2
    2004:	2125c384 	addi	r4,r4,-26866
    2008:	d9002c15 	stw	r4,176(sp)
    200c:	01c001c4 	movi	r7,7
    2010:	00000306 	br	2020 <___vfprintf_internal_r+0x12e8>
    2014:	94800204 	addi	r18,r18,8
    2018:	ad7ffc04 	addi	r21,r21,-16
    201c:	e5408b0e 	bge	fp,r21,224c <___vfprintf_internal_r+0x1514>
    2020:	18c00404 	addi	r3,r3,16
    2024:	84000044 	addi	r16,r16,1
    2028:	95000015 	stw	r20,0(r18)
    202c:	97000115 	stw	fp,4(r18)
    2030:	d8c02015 	stw	r3,128(sp)
    2034:	dc001f15 	stw	r16,124(sp)
    2038:	3c3ff60e 	bge	r7,r16,2014 <__alt_mem_Flash_flash_data+0xf4002014>
    203c:	b009883a 	mov	r4,r22
    2040:	b80b883a 	mov	r5,r23
    2044:	d9801e04 	addi	r6,sp,120
    2048:	d9c03d15 	stw	r7,244(sp)
    204c:	00075140 	call	7514 <__sprint_r>
    2050:	d9c03d17 	ldw	r7,244(sp)
    2054:	103c2c1e 	bne	r2,zero,1108 <__alt_mem_Flash_flash_data+0xf4001108>
    2058:	d8c02017 	ldw	r3,128(sp)
    205c:	dc001f17 	ldw	r16,124(sp)
    2060:	dc800404 	addi	r18,sp,16
    2064:	003fec06 	br	2018 <__alt_mem_Flash_flash_data+0xf4002018>
    2068:	dac02d17 	ldw	r11,180(sp)
    206c:	0039883a 	mov	fp,zero
    2070:	0005883a 	mov	r2,zero
    2074:	5cc00017 	ldw	r19,0(r11)
    2078:	5ac00104 	addi	r11,r11,4
    207c:	dac02d15 	stw	r11,180(sp)
    2080:	9807883a 	mov	r3,r19
    2084:	003d5b06 	br	15f4 <__alt_mem_Flash_flash_data+0xf40015f4>
    2088:	db002d17 	ldw	r12,180(sp)
    208c:	0039883a 	mov	fp,zero
    2090:	00800044 	movi	r2,1
    2094:	64c00017 	ldw	r19,0(r12)
    2098:	63000104 	addi	r12,r12,4
    209c:	db002d15 	stw	r12,180(sp)
    20a0:	9807883a 	mov	r3,r19
    20a4:	003d5306 	br	15f4 <__alt_mem_Flash_flash_data+0xf40015f4>
    20a8:	00800084 	movi	r2,2
    20ac:	9f06b03a 	or	r3,r19,fp
    20b0:	003d5006 	br	15f4 <__alt_mem_Flash_flash_data+0xf40015f4>
    20b4:	10803fcc 	andi	r2,r2,255
    20b8:	1080201c 	xori	r2,r2,128
    20bc:	10bfe004 	addi	r2,r2,-128
    20c0:	01000c04 	movi	r4,48
    20c4:	1101a526 	beq	r2,r4,275c <___vfprintf_internal_r+0x1a24>
    20c8:	dac03117 	ldw	r11,196(sp)
    20cc:	db002817 	ldw	r12,160(sp)
    20d0:	193fffc5 	stb	r4,-1(r3)
    20d4:	5affffc4 	addi	r11,r11,-1
    20d8:	dac03115 	stw	r11,196(sp)
    20dc:	62e5c83a 	sub	r18,r12,r11
    20e0:	003c6306 	br	1270 <__alt_mem_Flash_flash_data+0xf4001270>
    20e4:	b009883a 	mov	r4,r22
    20e8:	b80b883a 	mov	r5,r23
    20ec:	d9801e04 	addi	r6,sp,120
    20f0:	00075140 	call	7514 <__sprint_r>
    20f4:	103c041e 	bne	r2,zero,1108 <__alt_mem_Flash_flash_data+0xf4001108>
    20f8:	d8c02017 	ldw	r3,128(sp)
    20fc:	da000404 	addi	r8,sp,16
    2100:	db003117 	ldw	r12,196(sp)
    2104:	dac03417 	ldw	r11,208(sp)
    2108:	d8802617 	ldw	r2,152(sp)
    210c:	62e5883a 	add	r18,r12,r11
    2110:	db003317 	ldw	r12,204(sp)
    2114:	13000216 	blt	r2,r12,2120 <___vfprintf_internal_r+0x13e8>
    2118:	8900004c 	andi	r4,r17,1
    211c:	20000c26 	beq	r4,zero,2150 <___vfprintf_internal_r+0x1418>
    2120:	dac03817 	ldw	r11,224(sp)
    2124:	d9001f17 	ldw	r4,124(sp)
    2128:	db003517 	ldw	r12,212(sp)
    212c:	1ac7883a 	add	r3,r3,r11
    2130:	21000044 	addi	r4,r4,1
    2134:	43000015 	stw	r12,0(r8)
    2138:	42c00115 	stw	r11,4(r8)
    213c:	d8c02015 	stw	r3,128(sp)
    2140:	d9001f15 	stw	r4,124(sp)
    2144:	014001c4 	movi	r5,7
    2148:	2901cc16 	blt	r5,r4,287c <___vfprintf_internal_r+0x1b44>
    214c:	42000204 	addi	r8,r8,8
    2150:	dac03317 	ldw	r11,204(sp)
    2154:	8489c83a 	sub	r4,r16,r18
    2158:	5885c83a 	sub	r2,r11,r2
    215c:	1021883a 	mov	r16,r2
    2160:	2080010e 	bge	r4,r2,2168 <___vfprintf_internal_r+0x1430>
    2164:	2021883a 	mov	r16,r4
    2168:	04000a0e 	bge	zero,r16,2194 <___vfprintf_internal_r+0x145c>
    216c:	d9001f17 	ldw	r4,124(sp)
    2170:	1c07883a 	add	r3,r3,r16
    2174:	44800015 	stw	r18,0(r8)
    2178:	21000044 	addi	r4,r4,1
    217c:	44000115 	stw	r16,4(r8)
    2180:	d8c02015 	stw	r3,128(sp)
    2184:	d9001f15 	stw	r4,124(sp)
    2188:	014001c4 	movi	r5,7
    218c:	2901e316 	blt	r5,r4,291c <___vfprintf_internal_r+0x1be4>
    2190:	42000204 	addi	r8,r8,8
    2194:	8001df16 	blt	r16,zero,2914 <___vfprintf_internal_r+0x1bdc>
    2198:	1421c83a 	sub	r16,r2,r16
    219c:	043ccc0e 	bge	zero,r16,14d0 <__alt_mem_Flash_flash_data+0xf40014d0>
    21a0:	04800404 	movi	r18,16
    21a4:	d8801f17 	ldw	r2,124(sp)
    21a8:	943efc0e 	bge	r18,r16,1d9c <__alt_mem_Flash_flash_data+0xf4001d9c>
    21ac:	014000b4 	movhi	r5,2
    21b0:	2965c384 	addi	r5,r5,-26866
    21b4:	d9402c15 	stw	r5,176(sp)
    21b8:	054001c4 	movi	r21,7
    21bc:	00000306 	br	21cc <___vfprintf_internal_r+0x1494>
    21c0:	42000204 	addi	r8,r8,8
    21c4:	843ffc04 	addi	r16,r16,-16
    21c8:	943ef70e 	bge	r18,r16,1da8 <__alt_mem_Flash_flash_data+0xf4001da8>
    21cc:	18c00404 	addi	r3,r3,16
    21d0:	10800044 	addi	r2,r2,1
    21d4:	45000015 	stw	r20,0(r8)
    21d8:	44800115 	stw	r18,4(r8)
    21dc:	d8c02015 	stw	r3,128(sp)
    21e0:	d8801f15 	stw	r2,124(sp)
    21e4:	a8bff60e 	bge	r21,r2,21c0 <__alt_mem_Flash_flash_data+0xf40021c0>
    21e8:	b009883a 	mov	r4,r22
    21ec:	b80b883a 	mov	r5,r23
    21f0:	d9801e04 	addi	r6,sp,120
    21f4:	00075140 	call	7514 <__sprint_r>
    21f8:	103bc31e 	bne	r2,zero,1108 <__alt_mem_Flash_flash_data+0xf4001108>
    21fc:	d8c02017 	ldw	r3,128(sp)
    2200:	d8801f17 	ldw	r2,124(sp)
    2204:	da000404 	addi	r8,sp,16
    2208:	003fee06 	br	21c4 <__alt_mem_Flash_flash_data+0xf40021c4>
    220c:	8888703a 	and	r4,r17,r2
    2210:	203eab1e 	bne	r4,zero,1cc0 <__alt_mem_Flash_flash_data+0xf4001cc0>
    2214:	dc001f17 	ldw	r16,124(sp)
    2218:	db003117 	ldw	r12,196(sp)
    221c:	40800115 	stw	r2,4(r8)
    2220:	84000044 	addi	r16,r16,1
    2224:	43000015 	stw	r12,0(r8)
    2228:	d8c02015 	stw	r3,128(sp)
    222c:	dc001f15 	stw	r16,124(sp)
    2230:	008001c4 	movi	r2,7
    2234:	14000e16 	blt	r2,r16,2270 <___vfprintf_internal_r+0x1538>
    2238:	44800204 	addi	r18,r8,8
    223c:	003ecb06 	br	1d6c <__alt_mem_Flash_flash_data+0xf4001d6c>
    2240:	008000b4 	movhi	r2,2
    2244:	10a5c384 	addi	r2,r2,-26866
    2248:	d8802c15 	stw	r2,176(sp)
    224c:	dac02c17 	ldw	r11,176(sp)
    2250:	1d47883a 	add	r3,r3,r21
    2254:	84000044 	addi	r16,r16,1
    2258:	92c00015 	stw	r11,0(r18)
    225c:	95400115 	stw	r21,4(r18)
    2260:	d8c02015 	stw	r3,128(sp)
    2264:	dc001f15 	stw	r16,124(sp)
    2268:	008001c4 	movi	r2,7
    226c:	143ebe0e 	bge	r2,r16,1d68 <__alt_mem_Flash_flash_data+0xf4001d68>
    2270:	b009883a 	mov	r4,r22
    2274:	b80b883a 	mov	r5,r23
    2278:	d9801e04 	addi	r6,sp,120
    227c:	00075140 	call	7514 <__sprint_r>
    2280:	103ba11e 	bne	r2,zero,1108 <__alt_mem_Flash_flash_data+0xf4001108>
    2284:	d8c02017 	ldw	r3,128(sp)
    2288:	dc001f17 	ldw	r16,124(sp)
    228c:	dc800404 	addi	r18,sp,16
    2290:	003eb606 	br	1d6c <__alt_mem_Flash_flash_data+0xf4001d6c>
    2294:	b009883a 	mov	r4,r22
    2298:	b80b883a 	mov	r5,r23
    229c:	d9801e04 	addi	r6,sp,120
    22a0:	00075140 	call	7514 <__sprint_r>
    22a4:	103b981e 	bne	r2,zero,1108 <__alt_mem_Flash_flash_data+0xf4001108>
    22a8:	d8c02017 	ldw	r3,128(sp)
    22ac:	dc001f17 	ldw	r16,124(sp)
    22b0:	da000404 	addi	r8,sp,16
    22b4:	003e8d06 	br	1cec <__alt_mem_Flash_flash_data+0xf4001cec>
    22b8:	b009883a 	mov	r4,r22
    22bc:	b80b883a 	mov	r5,r23
    22c0:	d9801e04 	addi	r6,sp,120
    22c4:	00075140 	call	7514 <__sprint_r>
    22c8:	103b8f1e 	bne	r2,zero,1108 <__alt_mem_Flash_flash_data+0xf4001108>
    22cc:	d8c02017 	ldw	r3,128(sp)
    22d0:	dc001f17 	ldw	r16,124(sp)
    22d4:	dc800404 	addi	r18,sp,16
    22d8:	003e8f06 	br	1d18 <__alt_mem_Flash_flash_data+0xf4001d18>
    22dc:	db001e04 	addi	r12,sp,120
    22e0:	0025883a 	mov	r18,zero
    22e4:	db003115 	stw	r12,196(sp)
    22e8:	003be106 	br	1270 <__alt_mem_Flash_flash_data+0xf4001270>
    22ec:	b009883a 	mov	r4,r22
    22f0:	b80b883a 	mov	r5,r23
    22f4:	d9801e04 	addi	r6,sp,120
    22f8:	00075140 	call	7514 <__sprint_r>
    22fc:	103b821e 	bne	r2,zero,1108 <__alt_mem_Flash_flash_data+0xf4001108>
    2300:	d8c02017 	ldw	r3,128(sp)
    2304:	da000404 	addi	r8,sp,16
    2308:	003c3b06 	br	13f8 <__alt_mem_Flash_flash_data+0xf40013f8>
    230c:	04e7c83a 	sub	r19,zero,r19
    2310:	9804c03a 	cmpne	r2,r19,zero
    2314:	0739c83a 	sub	fp,zero,fp
    2318:	e0b9c83a 	sub	fp,fp,r2
    231c:	05400b44 	movi	r21,45
    2320:	dd402785 	stb	r21,158(sp)
    2324:	da403215 	stw	r9,200(sp)
    2328:	00800044 	movi	r2,1
    232c:	9f06b03a 	or	r3,r19,fp
    2330:	003bb506 	br	1208 <__alt_mem_Flash_flash_data+0xf4001208>
    2334:	da003f15 	stw	r8,252(sp)
    2338:	da403e15 	stw	r9,248(sp)
    233c:	00070d80 	call	70d8 <__fpclassifyd>
    2340:	da003f17 	ldw	r8,252(sp)
    2344:	da403e17 	ldw	r9,248(sp)
    2348:	1000ce26 	beq	r2,zero,2684 <___vfprintf_internal_r+0x194c>
    234c:	057ff7c4 	movi	r21,-33
    2350:	00bfffc4 	movi	r2,-1
    2354:	856a703a 	and	r21,r16,r21
    2358:	4881e826 	beq	r9,r2,2afc <___vfprintf_internal_r+0x1dc4>
    235c:	008011c4 	movi	r2,71
    2360:	a881e326 	beq	r21,r2,2af0 <___vfprintf_internal_r+0x1db8>
    2364:	db003917 	ldw	r12,228(sp)
    2368:	8ac04014 	ori	r11,r17,256
    236c:	dac02d15 	stw	r11,180(sp)
    2370:	6001ed16 	blt	r12,zero,2b28 <___vfprintf_internal_r+0x1df0>
    2374:	dc803917 	ldw	r18,228(sp)
    2378:	d8002b05 	stb	zero,172(sp)
    237c:	00801984 	movi	r2,102
    2380:	80811826 	beq	r16,r2,27e4 <___vfprintf_internal_r+0x1aac>
    2384:	00801184 	movi	r2,70
    2388:	80811626 	beq	r16,r2,27e4 <___vfprintf_internal_r+0x1aac>
    238c:	00801144 	movi	r2,69
    2390:	a881e926 	beq	r21,r2,2b38 <___vfprintf_internal_r+0x1e00>
    2394:	4839883a 	mov	fp,r9
    2398:	d8802604 	addi	r2,sp,152
    239c:	d8800115 	stw	r2,4(sp)
    23a0:	d9403717 	ldw	r5,220(sp)
    23a4:	d8802504 	addi	r2,sp,148
    23a8:	d8800215 	stw	r2,8(sp)
    23ac:	d8802104 	addi	r2,sp,132
    23b0:	df000015 	stw	fp,0(sp)
    23b4:	d8800315 	stw	r2,12(sp)
    23b8:	b009883a 	mov	r4,r22
    23bc:	900d883a 	mov	r6,r18
    23c0:	01c00084 	movi	r7,2
    23c4:	da003f15 	stw	r8,252(sp)
    23c8:	da403e15 	stw	r9,248(sp)
    23cc:	00030bc0 	call	30bc <_dtoa_r>
    23d0:	d8803115 	stw	r2,196(sp)
    23d4:	008019c4 	movi	r2,103
    23d8:	da003f17 	ldw	r8,252(sp)
    23dc:	da403e17 	ldw	r9,248(sp)
    23e0:	80800226 	beq	r16,r2,23ec <___vfprintf_internal_r+0x16b4>
    23e4:	008011c4 	movi	r2,71
    23e8:	8081101e 	bne	r16,r2,282c <___vfprintf_internal_r+0x1af4>
    23ec:	8880004c 	andi	r2,r17,1
    23f0:	1001dd26 	beq	r2,zero,2b68 <___vfprintf_internal_r+0x1e30>
    23f4:	db003117 	ldw	r12,196(sp)
    23f8:	6715883a 	add	r10,r12,fp
    23fc:	d9003717 	ldw	r4,220(sp)
    2400:	900b883a 	mov	r5,r18
    2404:	000d883a 	mov	r6,zero
    2408:	000f883a 	mov	r7,zero
    240c:	da003f15 	stw	r8,252(sp)
    2410:	da403e15 	stw	r9,248(sp)
    2414:	da803d15 	stw	r10,244(sp)
    2418:	000bb3c0 	call	bb3c <__eqdf2>
    241c:	da003f17 	ldw	r8,252(sp)
    2420:	da403e17 	ldw	r9,248(sp)
    2424:	da803d17 	ldw	r10,244(sp)
    2428:	10016526 	beq	r2,zero,29c0 <___vfprintf_internal_r+0x1c88>
    242c:	d8802117 	ldw	r2,132(sp)
    2430:	1280062e 	bgeu	r2,r10,244c <___vfprintf_internal_r+0x1714>
    2434:	01000c04 	movi	r4,48
    2438:	10c00044 	addi	r3,r2,1
    243c:	d8c02115 	stw	r3,132(sp)
    2440:	11000005 	stb	r4,0(r2)
    2444:	d8802117 	ldw	r2,132(sp)
    2448:	12bffb36 	bltu	r2,r10,2438 <__alt_mem_Flash_flash_data+0xf4002438>
    244c:	db003117 	ldw	r12,196(sp)
    2450:	1305c83a 	sub	r2,r2,r12
    2454:	d8803315 	stw	r2,204(sp)
    2458:	008011c4 	movi	r2,71
    245c:	a8814d26 	beq	r21,r2,2994 <___vfprintf_internal_r+0x1c5c>
    2460:	00801944 	movi	r2,101
    2464:	1402060e 	bge	r2,r16,2c80 <___vfprintf_internal_r+0x1f48>
    2468:	00801984 	movi	r2,102
    246c:	8081b426 	beq	r16,r2,2b40 <___vfprintf_internal_r+0x1e08>
    2470:	db002617 	ldw	r12,152(sp)
    2474:	db003415 	stw	r12,208(sp)
    2478:	db003417 	ldw	r12,208(sp)
    247c:	dac03317 	ldw	r11,204(sp)
    2480:	62c1a016 	blt	r12,r11,2b04 <___vfprintf_internal_r+0x1dcc>
    2484:	8c40004c 	andi	r17,r17,1
    2488:	8801bf1e 	bne	r17,zero,2b88 <___vfprintf_internal_r+0x1e50>
    248c:	6005883a 	mov	r2,r12
    2490:	6001b316 	blt	r12,zero,2b60 <___vfprintf_internal_r+0x1e28>
    2494:	dc803417 	ldw	r18,208(sp)
    2498:	df002b07 	ldb	fp,172(sp)
    249c:	e0012e1e 	bne	fp,zero,2958 <___vfprintf_internal_r+0x1c20>
    24a0:	dc402d17 	ldw	r17,180(sp)
    24a4:	dd402783 	ldbu	r21,158(sp)
    24a8:	d8802b15 	stw	r2,172(sp)
    24ac:	dcc02d15 	stw	r19,180(sp)
    24b0:	d8003215 	stw	zero,200(sp)
    24b4:	003b7306 	br	1284 <__alt_mem_Flash_flash_data+0xf4001284>
    24b8:	00800084 	movi	r2,2
    24bc:	003c4d06 	br	15f4 <__alt_mem_Flash_flash_data+0xf40015f4>
    24c0:	8880040c 	andi	r2,r17,16
    24c4:	1000091e 	bne	r2,zero,24ec <___vfprintf_internal_r+0x17b4>
    24c8:	8c40100c 	andi	r17,r17,64
    24cc:	88000726 	beq	r17,zero,24ec <___vfprintf_internal_r+0x17b4>
    24d0:	db002d17 	ldw	r12,180(sp)
    24d4:	dac02f17 	ldw	r11,188(sp)
    24d8:	60800017 	ldw	r2,0(r12)
    24dc:	63000104 	addi	r12,r12,4
    24e0:	db002d15 	stw	r12,180(sp)
    24e4:	12c0000d 	sth	r11,0(r2)
    24e8:	003a4e06 	br	e24 <__alt_mem_Flash_flash_data+0xf4000e24>
    24ec:	db002d17 	ldw	r12,180(sp)
    24f0:	dac02f17 	ldw	r11,188(sp)
    24f4:	60800017 	ldw	r2,0(r12)
    24f8:	63000104 	addi	r12,r12,4
    24fc:	db002d15 	stw	r12,180(sp)
    2500:	12c00015 	stw	r11,0(r2)
    2504:	003a4706 	br	e24 <__alt_mem_Flash_flash_data+0xf4000e24>
    2508:	1c000007 	ldb	r16,0(r3)
    250c:	1805883a 	mov	r2,r3
    2510:	003a6e06 	br	ecc <__alt_mem_Flash_flash_data+0xf4000ecc>
    2514:	88c0100c 	andi	r3,r17,64
    2518:	18006b26 	beq	r3,zero,26c8 <___vfprintf_internal_r+0x1990>
    251c:	dac02d17 	ldw	r11,180(sp)
    2520:	14c0000b 	ldhu	r19,0(r2)
    2524:	0039883a 	mov	fp,zero
    2528:	5ac00104 	addi	r11,r11,4
    252c:	dac02d15 	stw	r11,180(sp)
    2530:	003cb206 	br	17fc <__alt_mem_Flash_flash_data+0xf40017fc>
    2534:	010000b4 	movhi	r4,2
    2538:	2125c384 	addi	r4,r4,-26866
    253c:	d9002c15 	stw	r4,176(sp)
    2540:	dac02c17 	ldw	r11,176(sp)
    2544:	1c87883a 	add	r3,r3,r18
    2548:	10800044 	addi	r2,r2,1
    254c:	42c00015 	stw	r11,0(r8)
    2550:	44800115 	stw	r18,4(r8)
    2554:	d8c02015 	stw	r3,128(sp)
    2558:	d8801f15 	stw	r2,124(sp)
    255c:	010001c4 	movi	r4,7
    2560:	20bee016 	blt	r4,r2,20e4 <__alt_mem_Flash_flash_data+0xf40020e4>
    2564:	42000204 	addi	r8,r8,8
    2568:	003ee506 	br	2100 <__alt_mem_Flash_flash_data+0xf4002100>
    256c:	010000b4 	movhi	r4,2
    2570:	2125c384 	addi	r4,r4,-26866
    2574:	d9002c15 	stw	r4,176(sp)
    2578:	003bbe06 	br	1474 <__alt_mem_Flash_flash_data+0xf4001474>
    257c:	b009883a 	mov	r4,r22
    2580:	b80b883a 	mov	r5,r23
    2584:	d9801e04 	addi	r6,sp,120
    2588:	00075140 	call	7514 <__sprint_r>
    258c:	103ade1e 	bne	r2,zero,1108 <__alt_mem_Flash_flash_data+0xf4001108>
    2590:	d8c02017 	ldw	r3,128(sp)
    2594:	da000404 	addi	r8,sp,16
    2598:	003d6b06 	br	1b48 <__alt_mem_Flash_flash_data+0xf4001b48>
    259c:	d8801f17 	ldw	r2,124(sp)
    25a0:	030000b4 	movhi	r12,2
    25a4:	01000044 	movi	r4,1
    25a8:	18c00044 	addi	r3,r3,1
    25ac:	10800044 	addi	r2,r2,1
    25b0:	6325c304 	addi	r12,r12,-26868
    25b4:	41000115 	stw	r4,4(r8)
    25b8:	43000015 	stw	r12,0(r8)
    25bc:	d8c02015 	stw	r3,128(sp)
    25c0:	d8801f15 	stw	r2,124(sp)
    25c4:	010001c4 	movi	r4,7
    25c8:	20804916 	blt	r4,r2,26f0 <___vfprintf_internal_r+0x19b8>
    25cc:	42000204 	addi	r8,r8,8
    25d0:	8000041e 	bne	r16,zero,25e4 <___vfprintf_internal_r+0x18ac>
    25d4:	dac03317 	ldw	r11,204(sp)
    25d8:	5800021e 	bne	r11,zero,25e4 <___vfprintf_internal_r+0x18ac>
    25dc:	8880004c 	andi	r2,r17,1
    25e0:	103bbb26 	beq	r2,zero,14d0 <__alt_mem_Flash_flash_data+0xf40014d0>
    25e4:	db003817 	ldw	r12,224(sp)
    25e8:	d8801f17 	ldw	r2,124(sp)
    25ec:	dac03517 	ldw	r11,212(sp)
    25f0:	1b07883a 	add	r3,r3,r12
    25f4:	10800044 	addi	r2,r2,1
    25f8:	42c00015 	stw	r11,0(r8)
    25fc:	43000115 	stw	r12,4(r8)
    2600:	d8c02015 	stw	r3,128(sp)
    2604:	d8801f15 	stw	r2,124(sp)
    2608:	010001c4 	movi	r4,7
    260c:	20812e16 	blt	r4,r2,2ac8 <___vfprintf_internal_r+0x1d90>
    2610:	42000204 	addi	r8,r8,8
    2614:	0421c83a 	sub	r16,zero,r16
    2618:	04005c0e 	bge	zero,r16,278c <___vfprintf_internal_r+0x1a54>
    261c:	04800404 	movi	r18,16
    2620:	94009f0e 	bge	r18,r16,28a0 <___vfprintf_internal_r+0x1b68>
    2624:	010000b4 	movhi	r4,2
    2628:	2125c384 	addi	r4,r4,-26866
    262c:	d9002c15 	stw	r4,176(sp)
    2630:	054001c4 	movi	r21,7
    2634:	00000306 	br	2644 <___vfprintf_internal_r+0x190c>
    2638:	42000204 	addi	r8,r8,8
    263c:	843ffc04 	addi	r16,r16,-16
    2640:	94009a0e 	bge	r18,r16,28ac <___vfprintf_internal_r+0x1b74>
    2644:	18c00404 	addi	r3,r3,16
    2648:	10800044 	addi	r2,r2,1
    264c:	45000015 	stw	r20,0(r8)
    2650:	44800115 	stw	r18,4(r8)
    2654:	d8c02015 	stw	r3,128(sp)
    2658:	d8801f15 	stw	r2,124(sp)
    265c:	a8bff60e 	bge	r21,r2,2638 <__alt_mem_Flash_flash_data+0xf4002638>
    2660:	b009883a 	mov	r4,r22
    2664:	b80b883a 	mov	r5,r23
    2668:	d9801e04 	addi	r6,sp,120
    266c:	00075140 	call	7514 <__sprint_r>
    2670:	103aa51e 	bne	r2,zero,1108 <__alt_mem_Flash_flash_data+0xf4001108>
    2674:	d8c02017 	ldw	r3,128(sp)
    2678:	d8801f17 	ldw	r2,124(sp)
    267c:	da000404 	addi	r8,sp,16
    2680:	003fee06 	br	263c <__alt_mem_Flash_flash_data+0xf400263c>
    2684:	008011c4 	movi	r2,71
    2688:	1400be16 	blt	r2,r16,2984 <___vfprintf_internal_r+0x1c4c>
    268c:	030000b4 	movhi	r12,2
    2690:	6325b504 	addi	r12,r12,-26924
    2694:	db003115 	stw	r12,196(sp)
    2698:	00c000c4 	movi	r3,3
    269c:	00bfdfc4 	movi	r2,-129
    26a0:	d8c02b15 	stw	r3,172(sp)
    26a4:	88a2703a 	and	r17,r17,r2
    26a8:	dd402783 	ldbu	r21,158(sp)
    26ac:	dcc02d15 	stw	r19,180(sp)
    26b0:	1825883a 	mov	r18,r3
    26b4:	d8003215 	stw	zero,200(sp)
    26b8:	d8003415 	stw	zero,208(sp)
    26bc:	003af106 	br	1284 <__alt_mem_Flash_flash_data+0xf4001284>
    26c0:	4825883a 	mov	r18,r9
    26c4:	003c9306 	br	1914 <__alt_mem_Flash_flash_data+0xf4001914>
    26c8:	db002d17 	ldw	r12,180(sp)
    26cc:	14c00017 	ldw	r19,0(r2)
    26d0:	0039883a 	mov	fp,zero
    26d4:	63000104 	addi	r12,r12,4
    26d8:	db002d15 	stw	r12,180(sp)
    26dc:	003c4706 	br	17fc <__alt_mem_Flash_flash_data+0xf40017fc>
    26e0:	008000b4 	movhi	r2,2
    26e4:	10a5b304 	addi	r2,r2,-26932
    26e8:	d8803115 	stw	r2,196(sp)
    26ec:	003bf106 	br	16b4 <__alt_mem_Flash_flash_data+0xf40016b4>
    26f0:	b009883a 	mov	r4,r22
    26f4:	b80b883a 	mov	r5,r23
    26f8:	d9801e04 	addi	r6,sp,120
    26fc:	00075140 	call	7514 <__sprint_r>
    2700:	103a811e 	bne	r2,zero,1108 <__alt_mem_Flash_flash_data+0xf4001108>
    2704:	dc002617 	ldw	r16,152(sp)
    2708:	d8c02017 	ldw	r3,128(sp)
    270c:	da000404 	addi	r8,sp,16
    2710:	003faf06 	br	25d0 <__alt_mem_Flash_flash_data+0xf40025d0>
    2714:	db002e17 	ldw	r12,184(sp)
    2718:	1805883a 	mov	r2,r3
    271c:	dac02d15 	stw	r11,180(sp)
    2720:	0319c83a 	sub	r12,zero,r12
    2724:	db002e15 	stw	r12,184(sp)
    2728:	003a8206 	br	1134 <__alt_mem_Flash_flash_data+0xf4001134>
    272c:	18800044 	addi	r2,r3,1
    2730:	8c400814 	ori	r17,r17,32
    2734:	1c000047 	ldb	r16,1(r3)
    2738:	0039e406 	br	ecc <__alt_mem_Flash_flash_data+0xf4000ecc>
    273c:	b009883a 	mov	r4,r22
    2740:	b80b883a 	mov	r5,r23
    2744:	d9801e04 	addi	r6,sp,120
    2748:	00075140 	call	7514 <__sprint_r>
    274c:	103a6e1e 	bne	r2,zero,1108 <__alt_mem_Flash_flash_data+0xf4001108>
    2750:	d8c02017 	ldw	r3,128(sp)
    2754:	da000404 	addi	r8,sp,16
    2758:	003d0c06 	br	1b8c <__alt_mem_Flash_flash_data+0xf4001b8c>
    275c:	db002817 	ldw	r12,160(sp)
    2760:	d8c03117 	ldw	r3,196(sp)
    2764:	60e5c83a 	sub	r18,r12,r3
    2768:	003ac106 	br	1270 <__alt_mem_Flash_flash_data+0xf4001270>
    276c:	b009883a 	mov	r4,r22
    2770:	b80b883a 	mov	r5,r23
    2774:	d9801e04 	addi	r6,sp,120
    2778:	00075140 	call	7514 <__sprint_r>
    277c:	103a621e 	bne	r2,zero,1108 <__alt_mem_Flash_flash_data+0xf4001108>
    2780:	d8c02017 	ldw	r3,128(sp)
    2784:	d8801f17 	ldw	r2,124(sp)
    2788:	da000404 	addi	r8,sp,16
    278c:	db003317 	ldw	r12,204(sp)
    2790:	dac03117 	ldw	r11,196(sp)
    2794:	10800044 	addi	r2,r2,1
    2798:	1b07883a 	add	r3,r3,r12
    279c:	42c00015 	stw	r11,0(r8)
    27a0:	43000115 	stw	r12,4(r8)
    27a4:	d8c02015 	stw	r3,128(sp)
    27a8:	d8801f15 	stw	r2,124(sp)
    27ac:	010001c4 	movi	r4,7
    27b0:	20bb460e 	bge	r4,r2,14cc <__alt_mem_Flash_flash_data+0xf40014cc>
    27b4:	003d8506 	br	1dcc <__alt_mem_Flash_flash_data+0xf4001dcc>
    27b8:	da003f15 	stw	r8,252(sp)
    27bc:	00073800 	call	7380 <strlen>
    27c0:	1025883a 	mov	r18,r2
    27c4:	da003f17 	ldw	r8,252(sp)
    27c8:	903c540e 	bge	r18,zero,191c <__alt_mem_Flash_flash_data+0xf400191c>
    27cc:	0005883a 	mov	r2,zero
    27d0:	003c5206 	br	191c <__alt_mem_Flash_flash_data+0xf400191c>
    27d4:	010000b4 	movhi	r4,2
    27d8:	2125c784 	addi	r4,r4,-26850
    27dc:	d9003615 	stw	r4,216(sp)
    27e0:	003adc06 	br	1354 <__alt_mem_Flash_flash_data+0xf4001354>
    27e4:	d8802604 	addi	r2,sp,152
    27e8:	d8800115 	stw	r2,4(sp)
    27ec:	d9403717 	ldw	r5,220(sp)
    27f0:	d8802504 	addi	r2,sp,148
    27f4:	d8800215 	stw	r2,8(sp)
    27f8:	d8802104 	addi	r2,sp,132
    27fc:	da400015 	stw	r9,0(sp)
    2800:	d8800315 	stw	r2,12(sp)
    2804:	b009883a 	mov	r4,r22
    2808:	900d883a 	mov	r6,r18
    280c:	01c000c4 	movi	r7,3
    2810:	da003f15 	stw	r8,252(sp)
    2814:	da403e15 	stw	r9,248(sp)
    2818:	00030bc0 	call	30bc <_dtoa_r>
    281c:	da403e17 	ldw	r9,248(sp)
    2820:	da003f17 	ldw	r8,252(sp)
    2824:	d8803115 	stw	r2,196(sp)
    2828:	4839883a 	mov	fp,r9
    282c:	dac03117 	ldw	r11,196(sp)
    2830:	00801184 	movi	r2,70
    2834:	5f15883a 	add	r10,r11,fp
    2838:	a8bef01e 	bne	r21,r2,23fc <__alt_mem_Flash_flash_data+0xf40023fc>
    283c:	59000007 	ldb	r4,0(r11)
    2840:	00800c04 	movi	r2,48
    2844:	2080d526 	beq	r4,r2,2b9c <___vfprintf_internal_r+0x1e64>
    2848:	d8c02617 	ldw	r3,152(sp)
    284c:	50d5883a 	add	r10,r10,r3
    2850:	003eea06 	br	23fc <__alt_mem_Flash_flash_data+0xf40023fc>
    2854:	0025883a 	mov	r18,zero
    2858:	003db306 	br	1f28 <__alt_mem_Flash_flash_data+0xf4001f28>
    285c:	b009883a 	mov	r4,r22
    2860:	b80b883a 	mov	r5,r23
    2864:	d9801e04 	addi	r6,sp,120
    2868:	00075140 	call	7514 <__sprint_r>
    286c:	103a261e 	bne	r2,zero,1108 <__alt_mem_Flash_flash_data+0xf4001108>
    2870:	d8c02017 	ldw	r3,128(sp)
    2874:	da000404 	addi	r8,sp,16
    2878:	003daa06 	br	1f24 <__alt_mem_Flash_flash_data+0xf4001f24>
    287c:	b009883a 	mov	r4,r22
    2880:	b80b883a 	mov	r5,r23
    2884:	d9801e04 	addi	r6,sp,120
    2888:	00075140 	call	7514 <__sprint_r>
    288c:	103a1e1e 	bne	r2,zero,1108 <__alt_mem_Flash_flash_data+0xf4001108>
    2890:	d8802617 	ldw	r2,152(sp)
    2894:	d8c02017 	ldw	r3,128(sp)
    2898:	da000404 	addi	r8,sp,16
    289c:	003e2c06 	br	2150 <__alt_mem_Flash_flash_data+0xf4002150>
    28a0:	030000b4 	movhi	r12,2
    28a4:	6325c384 	addi	r12,r12,-26866
    28a8:	db002c15 	stw	r12,176(sp)
    28ac:	dac02c17 	ldw	r11,176(sp)
    28b0:	1c07883a 	add	r3,r3,r16
    28b4:	10800044 	addi	r2,r2,1
    28b8:	42c00015 	stw	r11,0(r8)
    28bc:	44000115 	stw	r16,4(r8)
    28c0:	d8c02015 	stw	r3,128(sp)
    28c4:	d8801f15 	stw	r2,124(sp)
    28c8:	010001c4 	movi	r4,7
    28cc:	20bfa716 	blt	r4,r2,276c <__alt_mem_Flash_flash_data+0xf400276c>
    28d0:	42000204 	addi	r8,r8,8
    28d4:	003fad06 	br	278c <__alt_mem_Flash_flash_data+0xf400278c>
    28d8:	00800184 	movi	r2,6
    28dc:	1240012e 	bgeu	r2,r9,28e4 <___vfprintf_internal_r+0x1bac>
    28e0:	1013883a 	mov	r9,r2
    28e4:	4825883a 	mov	r18,r9
    28e8:	4805883a 	mov	r2,r9
    28ec:	4800c216 	blt	r9,zero,2bf8 <___vfprintf_internal_r+0x1ec0>
    28f0:	d8802b15 	stw	r2,172(sp)
    28f4:	008000b4 	movhi	r2,2
    28f8:	10a5c104 	addi	r2,r2,-26876
    28fc:	d8803115 	stw	r2,196(sp)
    2900:	dcc02d15 	stw	r19,180(sp)
    2904:	d8003215 	stw	zero,200(sp)
    2908:	d8003415 	stw	zero,208(sp)
    290c:	0005883a 	mov	r2,zero
    2910:	003a6306 	br	12a0 <__alt_mem_Flash_flash_data+0xf40012a0>
    2914:	0021883a 	mov	r16,zero
    2918:	003e1f06 	br	2198 <__alt_mem_Flash_flash_data+0xf4002198>
    291c:	b009883a 	mov	r4,r22
    2920:	b80b883a 	mov	r5,r23
    2924:	d9801e04 	addi	r6,sp,120
    2928:	00075140 	call	7514 <__sprint_r>
    292c:	1039f61e 	bne	r2,zero,1108 <__alt_mem_Flash_flash_data+0xf4001108>
    2930:	d8802617 	ldw	r2,152(sp)
    2934:	db003317 	ldw	r12,204(sp)
    2938:	d8c02017 	ldw	r3,128(sp)
    293c:	da000404 	addi	r8,sp,16
    2940:	6085c83a 	sub	r2,r12,r2
    2944:	003e1306 	br	2194 <__alt_mem_Flash_flash_data+0xf4002194>
    2948:	030000b4 	movhi	r12,2
    294c:	6325c784 	addi	r12,r12,-26850
    2950:	db003615 	stw	r12,216(sp)
    2954:	003b0206 	br	1560 <__alt_mem_Flash_flash_data+0xf4001560>
    2958:	00c00b44 	movi	r3,45
    295c:	d8802b15 	stw	r2,172(sp)
    2960:	dc402d17 	ldw	r17,180(sp)
    2964:	d8c02785 	stb	r3,158(sp)
    2968:	dcc02d15 	stw	r19,180(sp)
    296c:	d8003215 	stw	zero,200(sp)
    2970:	00800b44 	movi	r2,45
    2974:	003a4706 	br	1294 <__alt_mem_Flash_flash_data+0xf4001294>
    2978:	05400b44 	movi	r21,45
    297c:	dd402785 	stb	r21,158(sp)
    2980:	003b4706 	br	16a0 <__alt_mem_Flash_flash_data+0xf40016a0>
    2984:	008000b4 	movhi	r2,2
    2988:	10a5b604 	addi	r2,r2,-26920
    298c:	d8803115 	stw	r2,196(sp)
    2990:	003f4106 	br	2698 <__alt_mem_Flash_flash_data+0xf4002698>
    2994:	d8c02617 	ldw	r3,152(sp)
    2998:	00bfff44 	movi	r2,-3
    299c:	18801116 	blt	r3,r2,29e4 <___vfprintf_internal_r+0x1cac>
    29a0:	48c01016 	blt	r9,r3,29e4 <___vfprintf_internal_r+0x1cac>
    29a4:	d8c03415 	stw	r3,208(sp)
    29a8:	040019c4 	movi	r16,103
    29ac:	003eb206 	br	2478 <__alt_mem_Flash_flash_data+0xf4002478>
    29b0:	010000b4 	movhi	r4,2
    29b4:	2125c384 	addi	r4,r4,-26866
    29b8:	d9002c15 	stw	r4,176(sp)
    29bc:	003cb106 	br	1c84 <__alt_mem_Flash_flash_data+0xf4001c84>
    29c0:	5005883a 	mov	r2,r10
    29c4:	003ea106 	br	244c <__alt_mem_Flash_flash_data+0xf400244c>
    29c8:	da402b15 	stw	r9,172(sp)
    29cc:	dd402783 	ldbu	r21,158(sp)
    29d0:	4825883a 	mov	r18,r9
    29d4:	dcc02d15 	stw	r19,180(sp)
    29d8:	d8003215 	stw	zero,200(sp)
    29dc:	d8003415 	stw	zero,208(sp)
    29e0:	003a2806 	br	1284 <__alt_mem_Flash_flash_data+0xf4001284>
    29e4:	843fff84 	addi	r16,r16,-2
    29e8:	1f3fffc4 	addi	fp,r3,-1
    29ec:	df002615 	stw	fp,152(sp)
    29f0:	dc0022c5 	stb	r16,139(sp)
    29f4:	e0009816 	blt	fp,zero,2c58 <___vfprintf_internal_r+0x1f20>
    29f8:	00800ac4 	movi	r2,43
    29fc:	d8802305 	stb	r2,140(sp)
    2a00:	00800244 	movi	r2,9
    2a04:	1700750e 	bge	r2,fp,2bdc <___vfprintf_internal_r+0x1ea4>
    2a08:	dd4022c4 	addi	r21,sp,139
    2a0c:	dc002c15 	stw	r16,176(sp)
    2a10:	4025883a 	mov	r18,r8
    2a14:	a821883a 	mov	r16,r21
    2a18:	e009883a 	mov	r4,fp
    2a1c:	01400284 	movi	r5,10
    2a20:	000a9680 	call	a968 <__modsi3>
    2a24:	10800c04 	addi	r2,r2,48
    2a28:	843fffc4 	addi	r16,r16,-1
    2a2c:	e009883a 	mov	r4,fp
    2a30:	01400284 	movi	r5,10
    2a34:	80800005 	stb	r2,0(r16)
    2a38:	000a9140 	call	a914 <__divsi3>
    2a3c:	1039883a 	mov	fp,r2
    2a40:	00800244 	movi	r2,9
    2a44:	173ff416 	blt	r2,fp,2a18 <__alt_mem_Flash_flash_data+0xf4002a18>
    2a48:	9011883a 	mov	r8,r18
    2a4c:	e0800c04 	addi	r2,fp,48
    2a50:	8025883a 	mov	r18,r16
    2a54:	913fffc4 	addi	r4,r18,-1
    2a58:	90bfffc5 	stb	r2,-1(r18)
    2a5c:	dc002c17 	ldw	r16,176(sp)
    2a60:	2540852e 	bgeu	r4,r21,2c78 <___vfprintf_internal_r+0x1f40>
    2a64:	d9402384 	addi	r5,sp,142
    2a68:	2c8bc83a 	sub	r5,r5,r18
    2a6c:	d8c02344 	addi	r3,sp,141
    2a70:	a94b883a 	add	r5,r21,r5
    2a74:	00000106 	br	2a7c <___vfprintf_internal_r+0x1d44>
    2a78:	20800003 	ldbu	r2,0(r4)
    2a7c:	18800005 	stb	r2,0(r3)
    2a80:	18c00044 	addi	r3,r3,1
    2a84:	21000044 	addi	r4,r4,1
    2a88:	197ffb1e 	bne	r3,r5,2a78 <__alt_mem_Flash_flash_data+0xf4002a78>
    2a8c:	d8802304 	addi	r2,sp,140
    2a90:	1485c83a 	sub	r2,r2,r18
    2a94:	d8c02344 	addi	r3,sp,141
    2a98:	1885883a 	add	r2,r3,r2
    2a9c:	dac03317 	ldw	r11,204(sp)
    2aa0:	156bc83a 	sub	r21,r2,r21
    2aa4:	dd403a15 	stw	r21,232(sp)
    2aa8:	00800044 	movi	r2,1
    2aac:	5d65883a 	add	r18,r11,r21
    2ab0:	12c0660e 	bge	r2,r11,2c4c <___vfprintf_internal_r+0x1f14>
    2ab4:	94800044 	addi	r18,r18,1
    2ab8:	9005883a 	mov	r2,r18
    2abc:	90006116 	blt	r18,zero,2c44 <___vfprintf_internal_r+0x1f0c>
    2ac0:	d8003415 	stw	zero,208(sp)
    2ac4:	003e7406 	br	2498 <__alt_mem_Flash_flash_data+0xf4002498>
    2ac8:	b009883a 	mov	r4,r22
    2acc:	b80b883a 	mov	r5,r23
    2ad0:	d9801e04 	addi	r6,sp,120
    2ad4:	00075140 	call	7514 <__sprint_r>
    2ad8:	10398b1e 	bne	r2,zero,1108 <__alt_mem_Flash_flash_data+0xf4001108>
    2adc:	dc002617 	ldw	r16,152(sp)
    2ae0:	d8c02017 	ldw	r3,128(sp)
    2ae4:	d8801f17 	ldw	r2,124(sp)
    2ae8:	da000404 	addi	r8,sp,16
    2aec:	003ec906 	br	2614 <__alt_mem_Flash_flash_data+0xf4002614>
    2af0:	483e1c1e 	bne	r9,zero,2364 <__alt_mem_Flash_flash_data+0xf4002364>
    2af4:	9013883a 	mov	r9,r18
    2af8:	003e1a06 	br	2364 <__alt_mem_Flash_flash_data+0xf4002364>
    2afc:	02400184 	movi	r9,6
    2b00:	003e1806 	br	2364 <__alt_mem_Flash_flash_data+0xf4002364>
    2b04:	d8c03417 	ldw	r3,208(sp)
    2b08:	00c04b0e 	bge	zero,r3,2c38 <___vfprintf_internal_r+0x1f00>
    2b0c:	04800044 	movi	r18,1
    2b10:	dac03317 	ldw	r11,204(sp)
    2b14:	92e5883a 	add	r18,r18,r11
    2b18:	9005883a 	mov	r2,r18
    2b1c:	903e5e0e 	bge	r18,zero,2498 <__alt_mem_Flash_flash_data+0xf4002498>
    2b20:	0005883a 	mov	r2,zero
    2b24:	003e5c06 	br	2498 <__alt_mem_Flash_flash_data+0xf4002498>
    2b28:	00c00b44 	movi	r3,45
    2b2c:	64a0003c 	xorhi	r18,r12,32768
    2b30:	d8c02b05 	stb	r3,172(sp)
    2b34:	003e1106 	br	237c <__alt_mem_Flash_flash_data+0xf400237c>
    2b38:	4f000044 	addi	fp,r9,1
    2b3c:	003e1606 	br	2398 <__alt_mem_Flash_flash_data+0xf4002398>
    2b40:	d8c02617 	ldw	r3,152(sp)
    2b44:	d8c03415 	stw	r3,208(sp)
    2b48:	00c0350e 	bge	zero,r3,2c20 <___vfprintf_internal_r+0x1ee8>
    2b4c:	4800081e 	bne	r9,zero,2b70 <___vfprintf_internal_r+0x1e38>
    2b50:	8c40004c 	andi	r17,r17,1
    2b54:	8800061e 	bne	r17,zero,2b70 <___vfprintf_internal_r+0x1e38>
    2b58:	1805883a 	mov	r2,r3
    2b5c:	183e4d0e 	bge	r3,zero,2494 <__alt_mem_Flash_flash_data+0xf4002494>
    2b60:	0005883a 	mov	r2,zero
    2b64:	003e4b06 	br	2494 <__alt_mem_Flash_flash_data+0xf4002494>
    2b68:	d8802117 	ldw	r2,132(sp)
    2b6c:	003e3706 	br	244c <__alt_mem_Flash_flash_data+0xf400244c>
    2b70:	dac03417 	ldw	r11,208(sp)
    2b74:	4a400044 	addi	r9,r9,1
    2b78:	5a65883a 	add	r18,r11,r9
    2b7c:	9005883a 	mov	r2,r18
    2b80:	903e450e 	bge	r18,zero,2498 <__alt_mem_Flash_flash_data+0xf4002498>
    2b84:	003fe606 	br	2b20 <__alt_mem_Flash_flash_data+0xf4002b20>
    2b88:	db003417 	ldw	r12,208(sp)
    2b8c:	64800044 	addi	r18,r12,1
    2b90:	9005883a 	mov	r2,r18
    2b94:	903e400e 	bge	r18,zero,2498 <__alt_mem_Flash_flash_data+0xf4002498>
    2b98:	003fe106 	br	2b20 <__alt_mem_Flash_flash_data+0xf4002b20>
    2b9c:	d9003717 	ldw	r4,220(sp)
    2ba0:	900b883a 	mov	r5,r18
    2ba4:	000d883a 	mov	r6,zero
    2ba8:	000f883a 	mov	r7,zero
    2bac:	da003f15 	stw	r8,252(sp)
    2bb0:	da403e15 	stw	r9,248(sp)
    2bb4:	da803d15 	stw	r10,244(sp)
    2bb8:	000bb3c0 	call	bb3c <__eqdf2>
    2bbc:	da003f17 	ldw	r8,252(sp)
    2bc0:	da403e17 	ldw	r9,248(sp)
    2bc4:	da803d17 	ldw	r10,244(sp)
    2bc8:	103f1f26 	beq	r2,zero,2848 <__alt_mem_Flash_flash_data+0xf4002848>
    2bcc:	00800044 	movi	r2,1
    2bd0:	1707c83a 	sub	r3,r2,fp
    2bd4:	d8c02615 	stw	r3,152(sp)
    2bd8:	003f1c06 	br	284c <__alt_mem_Flash_flash_data+0xf400284c>
    2bdc:	00800c04 	movi	r2,48
    2be0:	e0c00c04 	addi	r3,fp,48
    2be4:	d8802345 	stb	r2,141(sp)
    2be8:	d8c02385 	stb	r3,142(sp)
    2bec:	d88023c4 	addi	r2,sp,143
    2bf0:	dd4022c4 	addi	r21,sp,139
    2bf4:	003fa906 	br	2a9c <__alt_mem_Flash_flash_data+0xf4002a9c>
    2bf8:	0005883a 	mov	r2,zero
    2bfc:	003f3c06 	br	28f0 <__alt_mem_Flash_flash_data+0xf40028f0>
    2c00:	dac02d17 	ldw	r11,180(sp)
    2c04:	5a400017 	ldw	r9,0(r11)
    2c08:	5ac00104 	addi	r11,r11,4
    2c0c:	dac02d15 	stw	r11,180(sp)
    2c10:	483ec80e 	bge	r9,zero,2734 <__alt_mem_Flash_flash_data+0xf4002734>
    2c14:	027fffc4 	movi	r9,-1
    2c18:	1c000047 	ldb	r16,1(r3)
    2c1c:	0038ab06 	br	ecc <__alt_mem_Flash_flash_data+0xf4000ecc>
    2c20:	4800111e 	bne	r9,zero,2c68 <___vfprintf_internal_r+0x1f30>
    2c24:	8c40004c 	andi	r17,r17,1
    2c28:	88000f1e 	bne	r17,zero,2c68 <___vfprintf_internal_r+0x1f30>
    2c2c:	00800044 	movi	r2,1
    2c30:	1025883a 	mov	r18,r2
    2c34:	003e1806 	br	2498 <__alt_mem_Flash_flash_data+0xf4002498>
    2c38:	04800084 	movi	r18,2
    2c3c:	90e5c83a 	sub	r18,r18,r3
    2c40:	003fb306 	br	2b10 <__alt_mem_Flash_flash_data+0xf4002b10>
    2c44:	0005883a 	mov	r2,zero
    2c48:	003f9d06 	br	2ac0 <__alt_mem_Flash_flash_data+0xf4002ac0>
    2c4c:	88a2703a 	and	r17,r17,r2
    2c50:	883f9926 	beq	r17,zero,2ab8 <__alt_mem_Flash_flash_data+0xf4002ab8>
    2c54:	003f9706 	br	2ab4 <__alt_mem_Flash_flash_data+0xf4002ab4>
    2c58:	00800b44 	movi	r2,45
    2c5c:	0739c83a 	sub	fp,zero,fp
    2c60:	d8802305 	stb	r2,140(sp)
    2c64:	003f6606 	br	2a00 <__alt_mem_Flash_flash_data+0xf4002a00>
    2c68:	4c800084 	addi	r18,r9,2
    2c6c:	9005883a 	mov	r2,r18
    2c70:	903e090e 	bge	r18,zero,2498 <__alt_mem_Flash_flash_data+0xf4002498>
    2c74:	003faa06 	br	2b20 <__alt_mem_Flash_flash_data+0xf4002b20>
    2c78:	d8802344 	addi	r2,sp,141
    2c7c:	003f8706 	br	2a9c <__alt_mem_Flash_flash_data+0xf4002a9c>
    2c80:	d8c02617 	ldw	r3,152(sp)
    2c84:	003f5806 	br	29e8 <__alt_mem_Flash_flash_data+0xf40029e8>

00002c88 <__vfprintf_internal>:
    2c88:	2007883a 	mov	r3,r4
    2c8c:	010000b4 	movhi	r4,2
    2c90:	212eba04 	addi	r4,r4,-17688
    2c94:	21000017 	ldw	r4,0(r4)
    2c98:	2805883a 	mov	r2,r5
    2c9c:	300f883a 	mov	r7,r6
    2ca0:	180b883a 	mov	r5,r3
    2ca4:	100d883a 	mov	r6,r2
    2ca8:	0000d381 	jmpi	d38 <___vfprintf_internal_r>

00002cac <__sbprintf>:
    2cac:	2880030b 	ldhu	r2,12(r5)
    2cb0:	2ac01917 	ldw	r11,100(r5)
    2cb4:	2a80038b 	ldhu	r10,14(r5)
    2cb8:	2a400717 	ldw	r9,28(r5)
    2cbc:	2a000917 	ldw	r8,36(r5)
    2cc0:	defee204 	addi	sp,sp,-1144
    2cc4:	00c10004 	movi	r3,1024
    2cc8:	dc011a15 	stw	r16,1128(sp)
    2ccc:	10bfff4c 	andi	r2,r2,65533
    2cd0:	2821883a 	mov	r16,r5
    2cd4:	d8cb883a 	add	r5,sp,r3
    2cd8:	dc811c15 	stw	r18,1136(sp)
    2cdc:	dc411b15 	stw	r17,1132(sp)
    2ce0:	dfc11d15 	stw	ra,1140(sp)
    2ce4:	2025883a 	mov	r18,r4
    2ce8:	d881030d 	sth	r2,1036(sp)
    2cec:	dac11915 	stw	r11,1124(sp)
    2cf0:	da81038d 	sth	r10,1038(sp)
    2cf4:	da410715 	stw	r9,1052(sp)
    2cf8:	da010915 	stw	r8,1060(sp)
    2cfc:	dec10015 	stw	sp,1024(sp)
    2d00:	dec10415 	stw	sp,1040(sp)
    2d04:	d8c10215 	stw	r3,1032(sp)
    2d08:	d8c10515 	stw	r3,1044(sp)
    2d0c:	d8010615 	stw	zero,1048(sp)
    2d10:	0000d380 	call	d38 <___vfprintf_internal_r>
    2d14:	1023883a 	mov	r17,r2
    2d18:	10000416 	blt	r2,zero,2d2c <__sbprintf+0x80>
    2d1c:	9009883a 	mov	r4,r18
    2d20:	d9410004 	addi	r5,sp,1024
    2d24:	00049ec0 	call	49ec <_fflush_r>
    2d28:	10000d1e 	bne	r2,zero,2d60 <__sbprintf+0xb4>
    2d2c:	d8c1030b 	ldhu	r3,1036(sp)
    2d30:	18c0100c 	andi	r3,r3,64
    2d34:	18000326 	beq	r3,zero,2d44 <__sbprintf+0x98>
    2d38:	8080030b 	ldhu	r2,12(r16)
    2d3c:	10801014 	ori	r2,r2,64
    2d40:	8080030d 	sth	r2,12(r16)
    2d44:	8805883a 	mov	r2,r17
    2d48:	dfc11d17 	ldw	ra,1140(sp)
    2d4c:	dc811c17 	ldw	r18,1136(sp)
    2d50:	dc411b17 	ldw	r17,1132(sp)
    2d54:	dc011a17 	ldw	r16,1128(sp)
    2d58:	dec11e04 	addi	sp,sp,1144
    2d5c:	f800283a 	ret
    2d60:	047fffc4 	movi	r17,-1
    2d64:	003ff106 	br	2d2c <__alt_mem_Flash_flash_data+0xf4002d2c>

00002d68 <__swsetup_r>:
    2d68:	008000b4 	movhi	r2,2
    2d6c:	defffd04 	addi	sp,sp,-12
    2d70:	10aeba04 	addi	r2,r2,-17688
    2d74:	dc400115 	stw	r17,4(sp)
    2d78:	2023883a 	mov	r17,r4
    2d7c:	11000017 	ldw	r4,0(r2)
    2d80:	dc000015 	stw	r16,0(sp)
    2d84:	dfc00215 	stw	ra,8(sp)
    2d88:	2821883a 	mov	r16,r5
    2d8c:	20000226 	beq	r4,zero,2d98 <__swsetup_r+0x30>
    2d90:	20c00e17 	ldw	r3,56(r4)
    2d94:	18003126 	beq	r3,zero,2e5c <__swsetup_r+0xf4>
    2d98:	8080030b 	ldhu	r2,12(r16)
    2d9c:	10c0020c 	andi	r3,r2,8
    2da0:	100d883a 	mov	r6,r2
    2da4:	18000f26 	beq	r3,zero,2de4 <__swsetup_r+0x7c>
    2da8:	80c00417 	ldw	r3,16(r16)
    2dac:	18001526 	beq	r3,zero,2e04 <__swsetup_r+0x9c>
    2db0:	1100004c 	andi	r4,r2,1
    2db4:	20001c1e 	bne	r4,zero,2e28 <__swsetup_r+0xc0>
    2db8:	1080008c 	andi	r2,r2,2
    2dbc:	1000291e 	bne	r2,zero,2e64 <__swsetup_r+0xfc>
    2dc0:	80800517 	ldw	r2,20(r16)
    2dc4:	80800215 	stw	r2,8(r16)
    2dc8:	18001c26 	beq	r3,zero,2e3c <__swsetup_r+0xd4>
    2dcc:	0005883a 	mov	r2,zero
    2dd0:	dfc00217 	ldw	ra,8(sp)
    2dd4:	dc400117 	ldw	r17,4(sp)
    2dd8:	dc000017 	ldw	r16,0(sp)
    2ddc:	dec00304 	addi	sp,sp,12
    2de0:	f800283a 	ret
    2de4:	3080040c 	andi	r2,r6,16
    2de8:	10002e26 	beq	r2,zero,2ea4 <__swsetup_r+0x13c>
    2dec:	3080010c 	andi	r2,r6,4
    2df0:	10001e1e 	bne	r2,zero,2e6c <__swsetup_r+0x104>
    2df4:	80c00417 	ldw	r3,16(r16)
    2df8:	30800214 	ori	r2,r6,8
    2dfc:	8080030d 	sth	r2,12(r16)
    2e00:	183feb1e 	bne	r3,zero,2db0 <__alt_mem_Flash_flash_data+0xf4002db0>
    2e04:	1140a00c 	andi	r5,r2,640
    2e08:	01008004 	movi	r4,512
    2e0c:	293fe826 	beq	r5,r4,2db0 <__alt_mem_Flash_flash_data+0xf4002db0>
    2e10:	8809883a 	mov	r4,r17
    2e14:	800b883a 	mov	r5,r16
    2e18:	00054940 	call	5494 <__smakebuf_r>
    2e1c:	8080030b 	ldhu	r2,12(r16)
    2e20:	80c00417 	ldw	r3,16(r16)
    2e24:	003fe206 	br	2db0 <__alt_mem_Flash_flash_data+0xf4002db0>
    2e28:	80800517 	ldw	r2,20(r16)
    2e2c:	80000215 	stw	zero,8(r16)
    2e30:	0085c83a 	sub	r2,zero,r2
    2e34:	80800615 	stw	r2,24(r16)
    2e38:	183fe41e 	bne	r3,zero,2dcc <__alt_mem_Flash_flash_data+0xf4002dcc>
    2e3c:	80c0030b 	ldhu	r3,12(r16)
    2e40:	0005883a 	mov	r2,zero
    2e44:	1900200c 	andi	r4,r3,128
    2e48:	203fe126 	beq	r4,zero,2dd0 <__alt_mem_Flash_flash_data+0xf4002dd0>
    2e4c:	18c01014 	ori	r3,r3,64
    2e50:	80c0030d 	sth	r3,12(r16)
    2e54:	00bfffc4 	movi	r2,-1
    2e58:	003fdd06 	br	2dd0 <__alt_mem_Flash_flash_data+0xf4002dd0>
    2e5c:	0004dc80 	call	4dc8 <__sinit>
    2e60:	003fcd06 	br	2d98 <__alt_mem_Flash_flash_data+0xf4002d98>
    2e64:	0005883a 	mov	r2,zero
    2e68:	003fd606 	br	2dc4 <__alt_mem_Flash_flash_data+0xf4002dc4>
    2e6c:	81400c17 	ldw	r5,48(r16)
    2e70:	28000626 	beq	r5,zero,2e8c <__swsetup_r+0x124>
    2e74:	80801004 	addi	r2,r16,64
    2e78:	28800326 	beq	r5,r2,2e88 <__swsetup_r+0x120>
    2e7c:	8809883a 	mov	r4,r17
    2e80:	0004f3c0 	call	4f3c <_free_r>
    2e84:	8180030b 	ldhu	r6,12(r16)
    2e88:	80000c15 	stw	zero,48(r16)
    2e8c:	80c00417 	ldw	r3,16(r16)
    2e90:	00bff6c4 	movi	r2,-37
    2e94:	118c703a 	and	r6,r2,r6
    2e98:	80000115 	stw	zero,4(r16)
    2e9c:	80c00015 	stw	r3,0(r16)
    2ea0:	003fd506 	br	2df8 <__alt_mem_Flash_flash_data+0xf4002df8>
    2ea4:	00800244 	movi	r2,9
    2ea8:	88800015 	stw	r2,0(r17)
    2eac:	30801014 	ori	r2,r6,64
    2eb0:	8080030d 	sth	r2,12(r16)
    2eb4:	00bfffc4 	movi	r2,-1
    2eb8:	003fc506 	br	2dd0 <__alt_mem_Flash_flash_data+0xf4002dd0>

00002ebc <quorem>:
    2ebc:	defff704 	addi	sp,sp,-36
    2ec0:	dc800215 	stw	r18,8(sp)
    2ec4:	20800417 	ldw	r2,16(r4)
    2ec8:	2c800417 	ldw	r18,16(r5)
    2ecc:	dfc00815 	stw	ra,32(sp)
    2ed0:	ddc00715 	stw	r23,28(sp)
    2ed4:	dd800615 	stw	r22,24(sp)
    2ed8:	dd400515 	stw	r21,20(sp)
    2edc:	dd000415 	stw	r20,16(sp)
    2ee0:	dcc00315 	stw	r19,12(sp)
    2ee4:	dc400115 	stw	r17,4(sp)
    2ee8:	dc000015 	stw	r16,0(sp)
    2eec:	14807116 	blt	r2,r18,30b4 <quorem+0x1f8>
    2ef0:	94bfffc4 	addi	r18,r18,-1
    2ef4:	94ad883a 	add	r22,r18,r18
    2ef8:	b5ad883a 	add	r22,r22,r22
    2efc:	2c400504 	addi	r17,r5,20
    2f00:	8da9883a 	add	r20,r17,r22
    2f04:	25400504 	addi	r21,r4,20
    2f08:	282f883a 	mov	r23,r5
    2f0c:	adad883a 	add	r22,r21,r22
    2f10:	a1400017 	ldw	r5,0(r20)
    2f14:	2021883a 	mov	r16,r4
    2f18:	b1000017 	ldw	r4,0(r22)
    2f1c:	29400044 	addi	r5,r5,1
    2f20:	000a9c40 	call	a9c4 <__udivsi3>
    2f24:	1027883a 	mov	r19,r2
    2f28:	10002c26 	beq	r2,zero,2fdc <quorem+0x120>
    2f2c:	a813883a 	mov	r9,r21
    2f30:	8811883a 	mov	r8,r17
    2f34:	0009883a 	mov	r4,zero
    2f38:	000d883a 	mov	r6,zero
    2f3c:	41c00017 	ldw	r7,0(r8)
    2f40:	49400017 	ldw	r5,0(r9)
    2f44:	42000104 	addi	r8,r8,4
    2f48:	38bfffcc 	andi	r2,r7,65535
    2f4c:	14c5383a 	mul	r2,r2,r19
    2f50:	380ed43a 	srli	r7,r7,16
    2f54:	28ffffcc 	andi	r3,r5,65535
    2f58:	2085883a 	add	r2,r4,r2
    2f5c:	1008d43a 	srli	r4,r2,16
    2f60:	3ccf383a 	mul	r7,r7,r19
    2f64:	198d883a 	add	r6,r3,r6
    2f68:	10ffffcc 	andi	r3,r2,65535
    2f6c:	30c7c83a 	sub	r3,r6,r3
    2f70:	280ad43a 	srli	r5,r5,16
    2f74:	21c9883a 	add	r4,r4,r7
    2f78:	180dd43a 	srai	r6,r3,16
    2f7c:	20bfffcc 	andi	r2,r4,65535
    2f80:	288bc83a 	sub	r5,r5,r2
    2f84:	298b883a 	add	r5,r5,r6
    2f88:	280e943a 	slli	r7,r5,16
    2f8c:	18ffffcc 	andi	r3,r3,65535
    2f90:	2008d43a 	srli	r4,r4,16
    2f94:	38ceb03a 	or	r7,r7,r3
    2f98:	49c00015 	stw	r7,0(r9)
    2f9c:	280dd43a 	srai	r6,r5,16
    2fa0:	4a400104 	addi	r9,r9,4
    2fa4:	a23fe52e 	bgeu	r20,r8,2f3c <__alt_mem_Flash_flash_data+0xf4002f3c>
    2fa8:	b0800017 	ldw	r2,0(r22)
    2fac:	10000b1e 	bne	r2,zero,2fdc <quorem+0x120>
    2fb0:	b0bfff04 	addi	r2,r22,-4
    2fb4:	a880082e 	bgeu	r21,r2,2fd8 <quorem+0x11c>
    2fb8:	b0ffff17 	ldw	r3,-4(r22)
    2fbc:	18000326 	beq	r3,zero,2fcc <quorem+0x110>
    2fc0:	00000506 	br	2fd8 <quorem+0x11c>
    2fc4:	10c00017 	ldw	r3,0(r2)
    2fc8:	1800031e 	bne	r3,zero,2fd8 <quorem+0x11c>
    2fcc:	10bfff04 	addi	r2,r2,-4
    2fd0:	94bfffc4 	addi	r18,r18,-1
    2fd4:	a8bffb36 	bltu	r21,r2,2fc4 <__alt_mem_Flash_flash_data+0xf4002fc4>
    2fd8:	84800415 	stw	r18,16(r16)
    2fdc:	8009883a 	mov	r4,r16
    2fe0:	b80b883a 	mov	r5,r23
    2fe4:	0006a0c0 	call	6a0c <__mcmp>
    2fe8:	10002616 	blt	r2,zero,3084 <quorem+0x1c8>
    2fec:	9cc00044 	addi	r19,r19,1
    2ff0:	a80d883a 	mov	r6,r21
    2ff4:	000b883a 	mov	r5,zero
    2ff8:	31000017 	ldw	r4,0(r6)
    2ffc:	88800017 	ldw	r2,0(r17)
    3000:	31800104 	addi	r6,r6,4
    3004:	20ffffcc 	andi	r3,r4,65535
    3008:	194b883a 	add	r5,r3,r5
    300c:	10ffffcc 	andi	r3,r2,65535
    3010:	28c7c83a 	sub	r3,r5,r3
    3014:	1004d43a 	srli	r2,r2,16
    3018:	2008d43a 	srli	r4,r4,16
    301c:	180bd43a 	srai	r5,r3,16
    3020:	18ffffcc 	andi	r3,r3,65535
    3024:	2089c83a 	sub	r4,r4,r2
    3028:	2149883a 	add	r4,r4,r5
    302c:	2004943a 	slli	r2,r4,16
    3030:	8c400104 	addi	r17,r17,4
    3034:	200bd43a 	srai	r5,r4,16
    3038:	10c6b03a 	or	r3,r2,r3
    303c:	30ffff15 	stw	r3,-4(r6)
    3040:	a47fed2e 	bgeu	r20,r17,2ff8 <__alt_mem_Flash_flash_data+0xf4002ff8>
    3044:	9485883a 	add	r2,r18,r18
    3048:	1085883a 	add	r2,r2,r2
    304c:	a887883a 	add	r3,r21,r2
    3050:	18800017 	ldw	r2,0(r3)
    3054:	10000b1e 	bne	r2,zero,3084 <quorem+0x1c8>
    3058:	18bfff04 	addi	r2,r3,-4
    305c:	a880082e 	bgeu	r21,r2,3080 <quorem+0x1c4>
    3060:	18ffff17 	ldw	r3,-4(r3)
    3064:	18000326 	beq	r3,zero,3074 <quorem+0x1b8>
    3068:	00000506 	br	3080 <quorem+0x1c4>
    306c:	10c00017 	ldw	r3,0(r2)
    3070:	1800031e 	bne	r3,zero,3080 <quorem+0x1c4>
    3074:	10bfff04 	addi	r2,r2,-4
    3078:	94bfffc4 	addi	r18,r18,-1
    307c:	a8bffb36 	bltu	r21,r2,306c <__alt_mem_Flash_flash_data+0xf400306c>
    3080:	84800415 	stw	r18,16(r16)
    3084:	9805883a 	mov	r2,r19
    3088:	dfc00817 	ldw	ra,32(sp)
    308c:	ddc00717 	ldw	r23,28(sp)
    3090:	dd800617 	ldw	r22,24(sp)
    3094:	dd400517 	ldw	r21,20(sp)
    3098:	dd000417 	ldw	r20,16(sp)
    309c:	dcc00317 	ldw	r19,12(sp)
    30a0:	dc800217 	ldw	r18,8(sp)
    30a4:	dc400117 	ldw	r17,4(sp)
    30a8:	dc000017 	ldw	r16,0(sp)
    30ac:	dec00904 	addi	sp,sp,36
    30b0:	f800283a 	ret
    30b4:	0005883a 	mov	r2,zero
    30b8:	003ff306 	br	3088 <__alt_mem_Flash_flash_data+0xf4003088>

000030bc <_dtoa_r>:
    30bc:	20801017 	ldw	r2,64(r4)
    30c0:	deffde04 	addi	sp,sp,-136
    30c4:	dd401d15 	stw	r21,116(sp)
    30c8:	dcc01b15 	stw	r19,108(sp)
    30cc:	dc801a15 	stw	r18,104(sp)
    30d0:	dc401915 	stw	r17,100(sp)
    30d4:	dc001815 	stw	r16,96(sp)
    30d8:	dfc02115 	stw	ra,132(sp)
    30dc:	df002015 	stw	fp,128(sp)
    30e0:	ddc01f15 	stw	r23,124(sp)
    30e4:	dd801e15 	stw	r22,120(sp)
    30e8:	dd001c15 	stw	r20,112(sp)
    30ec:	d9c00315 	stw	r7,12(sp)
    30f0:	2021883a 	mov	r16,r4
    30f4:	302b883a 	mov	r21,r6
    30f8:	2825883a 	mov	r18,r5
    30fc:	dc402417 	ldw	r17,144(sp)
    3100:	3027883a 	mov	r19,r6
    3104:	10000826 	beq	r2,zero,3128 <_dtoa_r+0x6c>
    3108:	21801117 	ldw	r6,68(r4)
    310c:	00c00044 	movi	r3,1
    3110:	100b883a 	mov	r5,r2
    3114:	1986983a 	sll	r3,r3,r6
    3118:	11800115 	stw	r6,4(r2)
    311c:	10c00215 	stw	r3,8(r2)
    3120:	00061e00 	call	61e0 <_Bfree>
    3124:	80001015 	stw	zero,64(r16)
    3128:	a8002d16 	blt	r21,zero,31e0 <_dtoa_r+0x124>
    312c:	88000015 	stw	zero,0(r17)
    3130:	a8dffc2c 	andhi	r3,r21,32752
    3134:	009ffc34 	movhi	r2,32752
    3138:	18801b26 	beq	r3,r2,31a8 <_dtoa_r+0xec>
    313c:	9009883a 	mov	r4,r18
    3140:	980b883a 	mov	r5,r19
    3144:	000d883a 	mov	r6,zero
    3148:	000f883a 	mov	r7,zero
    314c:	000bb3c0 	call	bb3c <__eqdf2>
    3150:	10002a1e 	bne	r2,zero,31fc <_dtoa_r+0x140>
    3154:	d8c02317 	ldw	r3,140(sp)
    3158:	d9002517 	ldw	r4,148(sp)
    315c:	00800044 	movi	r2,1
    3160:	18800015 	stw	r2,0(r3)
    3164:	2001a226 	beq	r4,zero,37f0 <_dtoa_r+0x734>
    3168:	008000b4 	movhi	r2,2
    316c:	10a5c344 	addi	r2,r2,-26867
    3170:	20800015 	stw	r2,0(r4)
    3174:	10bfffc4 	addi	r2,r2,-1
    3178:	dfc02117 	ldw	ra,132(sp)
    317c:	df002017 	ldw	fp,128(sp)
    3180:	ddc01f17 	ldw	r23,124(sp)
    3184:	dd801e17 	ldw	r22,120(sp)
    3188:	dd401d17 	ldw	r21,116(sp)
    318c:	dd001c17 	ldw	r20,112(sp)
    3190:	dcc01b17 	ldw	r19,108(sp)
    3194:	dc801a17 	ldw	r18,104(sp)
    3198:	dc401917 	ldw	r17,100(sp)
    319c:	dc001817 	ldw	r16,96(sp)
    31a0:	dec02204 	addi	sp,sp,136
    31a4:	f800283a 	ret
    31a8:	d8c02317 	ldw	r3,140(sp)
    31ac:	0089c3c4 	movi	r2,9999
    31b0:	18800015 	stw	r2,0(r3)
    31b4:	90017c26 	beq	r18,zero,37a8 <_dtoa_r+0x6ec>
    31b8:	008000b4 	movhi	r2,2
    31bc:	10a5cf04 	addi	r2,r2,-26820
    31c0:	d9002517 	ldw	r4,148(sp)
    31c4:	203fec26 	beq	r4,zero,3178 <__alt_mem_Flash_flash_data+0xf4003178>
    31c8:	10c000c7 	ldb	r3,3(r2)
    31cc:	18017d1e 	bne	r3,zero,37c4 <_dtoa_r+0x708>
    31d0:	10c000c4 	addi	r3,r2,3
    31d4:	d9802517 	ldw	r6,148(sp)
    31d8:	30c00015 	stw	r3,0(r6)
    31dc:	003fe606 	br	3178 <__alt_mem_Flash_flash_data+0xf4003178>
    31e0:	04e00034 	movhi	r19,32768
    31e4:	9cffffc4 	addi	r19,r19,-1
    31e8:	00800044 	movi	r2,1
    31ec:	ace6703a 	and	r19,r21,r19
    31f0:	88800015 	stw	r2,0(r17)
    31f4:	982b883a 	mov	r21,r19
    31f8:	003fcd06 	br	3130 <__alt_mem_Flash_flash_data+0xf4003130>
    31fc:	d8800204 	addi	r2,sp,8
    3200:	a822d53a 	srli	r17,r21,20
    3204:	d8800015 	stw	r2,0(sp)
    3208:	8009883a 	mov	r4,r16
    320c:	900b883a 	mov	r5,r18
    3210:	980d883a 	mov	r6,r19
    3214:	d9c00104 	addi	r7,sp,4
    3218:	0006d800 	call	6d80 <__d2b>
    321c:	1039883a 	mov	fp,r2
    3220:	88016a1e 	bne	r17,zero,37cc <_dtoa_r+0x710>
    3224:	dd000217 	ldw	r20,8(sp)
    3228:	dc400117 	ldw	r17,4(sp)
    322c:	00befbc4 	movi	r2,-1041
    3230:	a463883a 	add	r17,r20,r17
    3234:	8882ea16 	blt	r17,r2,3de0 <_dtoa_r+0xd24>
    3238:	00bf0384 	movi	r2,-1010
    323c:	1445c83a 	sub	r2,r2,r17
    3240:	89010484 	addi	r4,r17,1042
    3244:	a8aa983a 	sll	r21,r21,r2
    3248:	9108d83a 	srl	r4,r18,r4
    324c:	a908b03a 	or	r4,r21,r4
    3250:	000cecc0 	call	cecc <__floatunsidf>
    3254:	017f8434 	movhi	r5,65040
    3258:	01800044 	movi	r6,1
    325c:	1009883a 	mov	r4,r2
    3260:	194b883a 	add	r5,r3,r5
    3264:	8c7fffc4 	addi	r17,r17,-1
    3268:	d9800f15 	stw	r6,60(sp)
    326c:	000d883a 	mov	r6,zero
    3270:	01cffe34 	movhi	r7,16376
    3274:	000c4a40 	call	c4a4 <__subdf3>
    3278:	0198dbf4 	movhi	r6,25455
    327c:	01cff4f4 	movhi	r7,16339
    3280:	1009883a 	mov	r4,r2
    3284:	180b883a 	mov	r5,r3
    3288:	3190d844 	addi	r6,r6,17249
    328c:	39e1e9c4 	addi	r7,r7,-30809
    3290:	000bd800 	call	bd80 <__muldf3>
    3294:	01a2d874 	movhi	r6,35681
    3298:	01cff1f4 	movhi	r7,16327
    329c:	180b883a 	mov	r5,r3
    32a0:	31b22cc4 	addi	r6,r6,-14157
    32a4:	39e28a04 	addi	r7,r7,-30168
    32a8:	1009883a 	mov	r4,r2
    32ac:	000a9d40 	call	a9d4 <__adddf3>
    32b0:	8809883a 	mov	r4,r17
    32b4:	102d883a 	mov	r22,r2
    32b8:	182b883a 	mov	r21,r3
    32bc:	000cdfc0 	call	cdfc <__floatsidf>
    32c0:	019427f4 	movhi	r6,20639
    32c4:	01cff4f4 	movhi	r7,16339
    32c8:	1009883a 	mov	r4,r2
    32cc:	180b883a 	mov	r5,r3
    32d0:	319e7ec4 	addi	r6,r6,31227
    32d4:	39d104c4 	addi	r7,r7,17427
    32d8:	000bd800 	call	bd80 <__muldf3>
    32dc:	b009883a 	mov	r4,r22
    32e0:	a80b883a 	mov	r5,r21
    32e4:	100d883a 	mov	r6,r2
    32e8:	180f883a 	mov	r7,r3
    32ec:	000a9d40 	call	a9d4 <__adddf3>
    32f0:	1009883a 	mov	r4,r2
    32f4:	180b883a 	mov	r5,r3
    32f8:	102d883a 	mov	r22,r2
    32fc:	182b883a 	mov	r21,r3
    3300:	000cd740 	call	cd74 <__fixdfsi>
    3304:	b009883a 	mov	r4,r22
    3308:	a80b883a 	mov	r5,r21
    330c:	000d883a 	mov	r6,zero
    3310:	000f883a 	mov	r7,zero
    3314:	d8800515 	stw	r2,20(sp)
    3318:	000bca00 	call	bca0 <__ledf2>
    331c:	10023116 	blt	r2,zero,3be4 <_dtoa_r+0xb28>
    3320:	d8c00517 	ldw	r3,20(sp)
    3324:	00800584 	movi	r2,22
    3328:	10c21f36 	bltu	r2,r3,3ba8 <_dtoa_r+0xaec>
    332c:	180490fa 	slli	r2,r3,3
    3330:	00c000b4 	movhi	r3,2
    3334:	18e5eb04 	addi	r3,r3,-26708
    3338:	1885883a 	add	r2,r3,r2
    333c:	11000017 	ldw	r4,0(r2)
    3340:	11400117 	ldw	r5,4(r2)
    3344:	900d883a 	mov	r6,r18
    3348:	980f883a 	mov	r7,r19
    334c:	000bbc00 	call	bbc0 <__gedf2>
    3350:	0082a70e 	bge	zero,r2,3df0 <_dtoa_r+0xd34>
    3354:	d9000517 	ldw	r4,20(sp)
    3358:	d8000d15 	stw	zero,52(sp)
    335c:	213fffc4 	addi	r4,r4,-1
    3360:	d9000515 	stw	r4,20(sp)
    3364:	a463c83a 	sub	r17,r20,r17
    3368:	8dbfffc4 	addi	r22,r17,-1
    336c:	b0021916 	blt	r22,zero,3bd4 <_dtoa_r+0xb18>
    3370:	d8000815 	stw	zero,32(sp)
    3374:	d8800517 	ldw	r2,20(sp)
    3378:	10020e16 	blt	r2,zero,3bb4 <_dtoa_r+0xaf8>
    337c:	b0ad883a 	add	r22,r22,r2
    3380:	d8800a15 	stw	r2,40(sp)
    3384:	d8000915 	stw	zero,36(sp)
    3388:	d8c00317 	ldw	r3,12(sp)
    338c:	00800244 	movi	r2,9
    3390:	10c11a36 	bltu	r2,r3,37fc <_dtoa_r+0x740>
    3394:	00800144 	movi	r2,5
    3398:	10c4fc0e 	bge	r2,r3,478c <_dtoa_r+0x16d0>
    339c:	18ffff04 	addi	r3,r3,-4
    33a0:	d8c00315 	stw	r3,12(sp)
    33a4:	0029883a 	mov	r20,zero
    33a8:	d9800317 	ldw	r6,12(sp)
    33ac:	008000c4 	movi	r2,3
    33b0:	3083bd26 	beq	r6,r2,42a8 <_dtoa_r+0x11ec>
    33b4:	1183670e 	bge	r2,r6,4154 <_dtoa_r+0x1098>
    33b8:	d8c00317 	ldw	r3,12(sp)
    33bc:	00800104 	movi	r2,4
    33c0:	1882e726 	beq	r3,r2,3f60 <_dtoa_r+0xea4>
    33c4:	00800144 	movi	r2,5
    33c8:	1884f21e 	bne	r3,r2,4794 <_dtoa_r+0x16d8>
    33cc:	00800044 	movi	r2,1
    33d0:	d8800b15 	stw	r2,44(sp)
    33d4:	d8c02217 	ldw	r3,136(sp)
    33d8:	d9000517 	ldw	r4,20(sp)
    33dc:	1907883a 	add	r3,r3,r4
    33e0:	19800044 	addi	r6,r3,1
    33e4:	d8c00c15 	stw	r3,48(sp)
    33e8:	d9800615 	stw	r6,24(sp)
    33ec:	0183c30e 	bge	zero,r6,42fc <_dtoa_r+0x1240>
    33f0:	d9800617 	ldw	r6,24(sp)
    33f4:	3023883a 	mov	r17,r6
    33f8:	80001115 	stw	zero,68(r16)
    33fc:	008005c4 	movi	r2,23
    3400:	1184f62e 	bgeu	r2,r6,47dc <_dtoa_r+0x1720>
    3404:	00c00044 	movi	r3,1
    3408:	00800104 	movi	r2,4
    340c:	1085883a 	add	r2,r2,r2
    3410:	11000504 	addi	r4,r2,20
    3414:	180b883a 	mov	r5,r3
    3418:	18c00044 	addi	r3,r3,1
    341c:	313ffb2e 	bgeu	r6,r4,340c <__alt_mem_Flash_flash_data+0xf400340c>
    3420:	81401115 	stw	r5,68(r16)
    3424:	8009883a 	mov	r4,r16
    3428:	00061380 	call	6138 <_Balloc>
    342c:	d8800715 	stw	r2,28(sp)
    3430:	80801015 	stw	r2,64(r16)
    3434:	00800384 	movi	r2,14
    3438:	1440fd36 	bltu	r2,r17,3830 <_dtoa_r+0x774>
    343c:	a000fc26 	beq	r20,zero,3830 <_dtoa_r+0x774>
    3440:	d8800517 	ldw	r2,20(sp)
    3444:	0083b90e 	bge	zero,r2,432c <_dtoa_r+0x1270>
    3448:	d8c00517 	ldw	r3,20(sp)
    344c:	108003cc 	andi	r2,r2,15
    3450:	100490fa 	slli	r2,r2,3
    3454:	182fd13a 	srai	r23,r3,4
    3458:	00c000b4 	movhi	r3,2
    345c:	18e5eb04 	addi	r3,r3,-26708
    3460:	1885883a 	add	r2,r3,r2
    3464:	b8c0040c 	andi	r3,r23,16
    3468:	12c00017 	ldw	r11,0(r2)
    346c:	12800117 	ldw	r10,4(r2)
    3470:	18039726 	beq	r3,zero,42d0 <_dtoa_r+0x1214>
    3474:	008000b4 	movhi	r2,2
    3478:	10a5e104 	addi	r2,r2,-26748
    347c:	11800817 	ldw	r6,32(r2)
    3480:	11c00917 	ldw	r7,36(r2)
    3484:	9009883a 	mov	r4,r18
    3488:	980b883a 	mov	r5,r19
    348c:	da801615 	stw	r10,88(sp)
    3490:	dac01515 	stw	r11,84(sp)
    3494:	000b2700 	call	b270 <__divdf3>
    3498:	da801617 	ldw	r10,88(sp)
    349c:	dac01517 	ldw	r11,84(sp)
    34a0:	bdc003cc 	andi	r23,r23,15
    34a4:	044000c4 	movi	r17,3
    34a8:	d8800e15 	stw	r2,56(sp)
    34ac:	182b883a 	mov	r21,r3
    34b0:	b8001126 	beq	r23,zero,34f8 <_dtoa_r+0x43c>
    34b4:	050000b4 	movhi	r20,2
    34b8:	a525e104 	addi	r20,r20,-26748
    34bc:	5805883a 	mov	r2,r11
    34c0:	5007883a 	mov	r3,r10
    34c4:	b980004c 	andi	r6,r23,1
    34c8:	1009883a 	mov	r4,r2
    34cc:	b82fd07a 	srai	r23,r23,1
    34d0:	180b883a 	mov	r5,r3
    34d4:	30000426 	beq	r6,zero,34e8 <_dtoa_r+0x42c>
    34d8:	a1800017 	ldw	r6,0(r20)
    34dc:	a1c00117 	ldw	r7,4(r20)
    34e0:	8c400044 	addi	r17,r17,1
    34e4:	000bd800 	call	bd80 <__muldf3>
    34e8:	a5000204 	addi	r20,r20,8
    34ec:	b83ff51e 	bne	r23,zero,34c4 <__alt_mem_Flash_flash_data+0xf40034c4>
    34f0:	1017883a 	mov	r11,r2
    34f4:	1815883a 	mov	r10,r3
    34f8:	d9000e17 	ldw	r4,56(sp)
    34fc:	a80b883a 	mov	r5,r21
    3500:	580d883a 	mov	r6,r11
    3504:	500f883a 	mov	r7,r10
    3508:	000b2700 	call	b270 <__divdf3>
    350c:	1029883a 	mov	r20,r2
    3510:	182b883a 	mov	r21,r3
    3514:	d9800d17 	ldw	r6,52(sp)
    3518:	30000626 	beq	r6,zero,3534 <_dtoa_r+0x478>
    351c:	a009883a 	mov	r4,r20
    3520:	a80b883a 	mov	r5,r21
    3524:	000d883a 	mov	r6,zero
    3528:	01cffc34 	movhi	r7,16368
    352c:	000bca00 	call	bca0 <__ledf2>
    3530:	10043216 	blt	r2,zero,45fc <_dtoa_r+0x1540>
    3534:	8809883a 	mov	r4,r17
    3538:	000cdfc0 	call	cdfc <__floatsidf>
    353c:	1009883a 	mov	r4,r2
    3540:	180b883a 	mov	r5,r3
    3544:	a00d883a 	mov	r6,r20
    3548:	a80f883a 	mov	r7,r21
    354c:	000bd800 	call	bd80 <__muldf3>
    3550:	000d883a 	mov	r6,zero
    3554:	1009883a 	mov	r4,r2
    3558:	180b883a 	mov	r5,r3
    355c:	01d00734 	movhi	r7,16412
    3560:	000a9d40 	call	a9d4 <__adddf3>
    3564:	1023883a 	mov	r17,r2
    3568:	d9800617 	ldw	r6,24(sp)
    356c:	00bf3034 	movhi	r2,64704
    3570:	1885883a 	add	r2,r3,r2
    3574:	d8800e15 	stw	r2,56(sp)
    3578:	30032e26 	beq	r6,zero,4234 <_dtoa_r+0x1178>
    357c:	d8c00517 	ldw	r3,20(sp)
    3580:	da800617 	ldw	r10,24(sp)
    3584:	d8c01215 	stw	r3,72(sp)
    3588:	d9000b17 	ldw	r4,44(sp)
    358c:	2003b026 	beq	r4,zero,4450 <_dtoa_r+0x1394>
    3590:	50bfffc4 	addi	r2,r10,-1
    3594:	100490fa 	slli	r2,r2,3
    3598:	00c000b4 	movhi	r3,2
    359c:	18e5eb04 	addi	r3,r3,-26708
    35a0:	1885883a 	add	r2,r3,r2
    35a4:	11800017 	ldw	r6,0(r2)
    35a8:	11c00117 	ldw	r7,4(r2)
    35ac:	d8800717 	ldw	r2,28(sp)
    35b0:	0009883a 	mov	r4,zero
    35b4:	014ff834 	movhi	r5,16352
    35b8:	da801615 	stw	r10,88(sp)
    35bc:	15c00044 	addi	r23,r2,1
    35c0:	000b2700 	call	b270 <__divdf3>
    35c4:	d9c00e17 	ldw	r7,56(sp)
    35c8:	880d883a 	mov	r6,r17
    35cc:	1009883a 	mov	r4,r2
    35d0:	180b883a 	mov	r5,r3
    35d4:	000c4a40 	call	c4a4 <__subdf3>
    35d8:	a80b883a 	mov	r5,r21
    35dc:	a009883a 	mov	r4,r20
    35e0:	d8c01015 	stw	r3,64(sp)
    35e4:	d8800e15 	stw	r2,56(sp)
    35e8:	000cd740 	call	cd74 <__fixdfsi>
    35ec:	1009883a 	mov	r4,r2
    35f0:	d8801715 	stw	r2,92(sp)
    35f4:	000cdfc0 	call	cdfc <__floatsidf>
    35f8:	a009883a 	mov	r4,r20
    35fc:	a80b883a 	mov	r5,r21
    3600:	100d883a 	mov	r6,r2
    3604:	180f883a 	mov	r7,r3
    3608:	000c4a40 	call	c4a4 <__subdf3>
    360c:	da001717 	ldw	r8,92(sp)
    3610:	1829883a 	mov	r20,r3
    3614:	d8c00717 	ldw	r3,28(sp)
    3618:	d9000e17 	ldw	r4,56(sp)
    361c:	d9401017 	ldw	r5,64(sp)
    3620:	42000c04 	addi	r8,r8,48
    3624:	1023883a 	mov	r17,r2
    3628:	1a000005 	stb	r8,0(r3)
    362c:	880d883a 	mov	r6,r17
    3630:	a00f883a 	mov	r7,r20
    3634:	402b883a 	mov	r21,r8
    3638:	000bbc00 	call	bbc0 <__gedf2>
    363c:	00844516 	blt	zero,r2,4754 <_dtoa_r+0x1698>
    3640:	0009883a 	mov	r4,zero
    3644:	014ffc34 	movhi	r5,16368
    3648:	880d883a 	mov	r6,r17
    364c:	a00f883a 	mov	r7,r20
    3650:	000c4a40 	call	c4a4 <__subdf3>
    3654:	d9000e17 	ldw	r4,56(sp)
    3658:	d9401017 	ldw	r5,64(sp)
    365c:	100d883a 	mov	r6,r2
    3660:	180f883a 	mov	r7,r3
    3664:	000bbc00 	call	bbc0 <__gedf2>
    3668:	da801617 	ldw	r10,88(sp)
    366c:	00843616 	blt	zero,r2,4748 <_dtoa_r+0x168c>
    3670:	00800044 	movi	r2,1
    3674:	12806e0e 	bge	r2,r10,3830 <_dtoa_r+0x774>
    3678:	d9000717 	ldw	r4,28(sp)
    367c:	dd801315 	stw	r22,76(sp)
    3680:	dc001115 	stw	r16,68(sp)
    3684:	2295883a 	add	r10,r4,r10
    3688:	dcc01415 	stw	r19,80(sp)
    368c:	502d883a 	mov	r22,r10
    3690:	dcc01017 	ldw	r19,64(sp)
    3694:	b821883a 	mov	r16,r23
    3698:	dc801015 	stw	r18,64(sp)
    369c:	dc800e17 	ldw	r18,56(sp)
    36a0:	00000906 	br	36c8 <_dtoa_r+0x60c>
    36a4:	000c4a40 	call	c4a4 <__subdf3>
    36a8:	1009883a 	mov	r4,r2
    36ac:	180b883a 	mov	r5,r3
    36b0:	900d883a 	mov	r6,r18
    36b4:	980f883a 	mov	r7,r19
    36b8:	000bca00 	call	bca0 <__ledf2>
    36bc:	10040e16 	blt	r2,zero,46f8 <_dtoa_r+0x163c>
    36c0:	b821883a 	mov	r16,r23
    36c4:	bd841026 	beq	r23,r22,4708 <_dtoa_r+0x164c>
    36c8:	9009883a 	mov	r4,r18
    36cc:	980b883a 	mov	r5,r19
    36d0:	000d883a 	mov	r6,zero
    36d4:	01d00934 	movhi	r7,16420
    36d8:	000bd800 	call	bd80 <__muldf3>
    36dc:	000d883a 	mov	r6,zero
    36e0:	01d00934 	movhi	r7,16420
    36e4:	8809883a 	mov	r4,r17
    36e8:	a00b883a 	mov	r5,r20
    36ec:	1025883a 	mov	r18,r2
    36f0:	1827883a 	mov	r19,r3
    36f4:	000bd800 	call	bd80 <__muldf3>
    36f8:	180b883a 	mov	r5,r3
    36fc:	1009883a 	mov	r4,r2
    3700:	1823883a 	mov	r17,r3
    3704:	1029883a 	mov	r20,r2
    3708:	000cd740 	call	cd74 <__fixdfsi>
    370c:	1009883a 	mov	r4,r2
    3710:	102b883a 	mov	r21,r2
    3714:	000cdfc0 	call	cdfc <__floatsidf>
    3718:	a009883a 	mov	r4,r20
    371c:	880b883a 	mov	r5,r17
    3720:	100d883a 	mov	r6,r2
    3724:	180f883a 	mov	r7,r3
    3728:	000c4a40 	call	c4a4 <__subdf3>
    372c:	ad400c04 	addi	r21,r21,48
    3730:	1009883a 	mov	r4,r2
    3734:	180b883a 	mov	r5,r3
    3738:	900d883a 	mov	r6,r18
    373c:	980f883a 	mov	r7,r19
    3740:	85400005 	stb	r21,0(r16)
    3744:	1023883a 	mov	r17,r2
    3748:	1829883a 	mov	r20,r3
    374c:	000bca00 	call	bca0 <__ledf2>
    3750:	bdc00044 	addi	r23,r23,1
    3754:	0009883a 	mov	r4,zero
    3758:	014ffc34 	movhi	r5,16368
    375c:	880d883a 	mov	r6,r17
    3760:	a00f883a 	mov	r7,r20
    3764:	103fcf0e 	bge	r2,zero,36a4 <__alt_mem_Flash_flash_data+0xf40036a4>
    3768:	d9801217 	ldw	r6,72(sp)
    376c:	dc001117 	ldw	r16,68(sp)
    3770:	d9800515 	stw	r6,20(sp)
    3774:	8009883a 	mov	r4,r16
    3778:	e00b883a 	mov	r5,fp
    377c:	00061e00 	call	61e0 <_Bfree>
    3780:	d8c00517 	ldw	r3,20(sp)
    3784:	d9002317 	ldw	r4,140(sp)
    3788:	d9802517 	ldw	r6,148(sp)
    378c:	b8000005 	stb	zero,0(r23)
    3790:	18800044 	addi	r2,r3,1
    3794:	20800015 	stw	r2,0(r4)
    3798:	30027226 	beq	r6,zero,4164 <_dtoa_r+0x10a8>
    379c:	35c00015 	stw	r23,0(r6)
    37a0:	d8800717 	ldw	r2,28(sp)
    37a4:	003e7406 	br	3178 <__alt_mem_Flash_flash_data+0xf4003178>
    37a8:	00800434 	movhi	r2,16
    37ac:	10bfffc4 	addi	r2,r2,-1
    37b0:	a8aa703a 	and	r21,r21,r2
    37b4:	a83e801e 	bne	r21,zero,31b8 <__alt_mem_Flash_flash_data+0xf40031b8>
    37b8:	008000b4 	movhi	r2,2
    37bc:	10a5cc04 	addi	r2,r2,-26832
    37c0:	003e7f06 	br	31c0 <__alt_mem_Flash_flash_data+0xf40031c0>
    37c4:	10c00204 	addi	r3,r2,8
    37c8:	003e8206 	br	31d4 <__alt_mem_Flash_flash_data+0xf40031d4>
    37cc:	01400434 	movhi	r5,16
    37d0:	297fffc4 	addi	r5,r5,-1
    37d4:	994a703a 	and	r5,r19,r5
    37d8:	9009883a 	mov	r4,r18
    37dc:	8c7f0044 	addi	r17,r17,-1023
    37e0:	294ffc34 	orhi	r5,r5,16368
    37e4:	dd000217 	ldw	r20,8(sp)
    37e8:	d8000f15 	stw	zero,60(sp)
    37ec:	003e9f06 	br	326c <__alt_mem_Flash_flash_data+0xf400326c>
    37f0:	008000b4 	movhi	r2,2
    37f4:	10a5c304 	addi	r2,r2,-26868
    37f8:	003e5f06 	br	3178 <__alt_mem_Flash_flash_data+0xf4003178>
    37fc:	80001115 	stw	zero,68(r16)
    3800:	8009883a 	mov	r4,r16
    3804:	000b883a 	mov	r5,zero
    3808:	00061380 	call	6138 <_Balloc>
    380c:	01bfffc4 	movi	r6,-1
    3810:	d8800715 	stw	r2,28(sp)
    3814:	80801015 	stw	r2,64(r16)
    3818:	00800044 	movi	r2,1
    381c:	d9800c15 	stw	r6,48(sp)
    3820:	d8800b15 	stw	r2,44(sp)
    3824:	d9800615 	stw	r6,24(sp)
    3828:	d8002215 	stw	zero,136(sp)
    382c:	d8000315 	stw	zero,12(sp)
    3830:	d8800117 	ldw	r2,4(sp)
    3834:	10008e16 	blt	r2,zero,3a70 <_dtoa_r+0x9b4>
    3838:	d9000517 	ldw	r4,20(sp)
    383c:	00c00384 	movi	r3,14
    3840:	19008b16 	blt	r3,r4,3a70 <_dtoa_r+0x9b4>
    3844:	200490fa 	slli	r2,r4,3
    3848:	00c000b4 	movhi	r3,2
    384c:	d9802217 	ldw	r6,136(sp)
    3850:	18e5eb04 	addi	r3,r3,-26708
    3854:	1885883a 	add	r2,r3,r2
    3858:	14400017 	ldw	r17,0(r2)
    385c:	15000117 	ldw	r20,4(r2)
    3860:	3001c716 	blt	r6,zero,3f80 <_dtoa_r+0xec4>
    3864:	880d883a 	mov	r6,r17
    3868:	a00f883a 	mov	r7,r20
    386c:	9009883a 	mov	r4,r18
    3870:	980b883a 	mov	r5,r19
    3874:	000b2700 	call	b270 <__divdf3>
    3878:	180b883a 	mov	r5,r3
    387c:	1009883a 	mov	r4,r2
    3880:	000cd740 	call	cd74 <__fixdfsi>
    3884:	1009883a 	mov	r4,r2
    3888:	102d883a 	mov	r22,r2
    388c:	000cdfc0 	call	cdfc <__floatsidf>
    3890:	1009883a 	mov	r4,r2
    3894:	180b883a 	mov	r5,r3
    3898:	880d883a 	mov	r6,r17
    389c:	a00f883a 	mov	r7,r20
    38a0:	000bd800 	call	bd80 <__muldf3>
    38a4:	9009883a 	mov	r4,r18
    38a8:	980b883a 	mov	r5,r19
    38ac:	100d883a 	mov	r6,r2
    38b0:	180f883a 	mov	r7,r3
    38b4:	000c4a40 	call	c4a4 <__subdf3>
    38b8:	d9000717 	ldw	r4,28(sp)
    38bc:	d9800617 	ldw	r6,24(sp)
    38c0:	180b883a 	mov	r5,r3
    38c4:	b0c00c04 	addi	r3,r22,48
    38c8:	20c00005 	stb	r3,0(r4)
    38cc:	25c00044 	addi	r23,r4,1
    38d0:	01000044 	movi	r4,1
    38d4:	1011883a 	mov	r8,r2
    38d8:	2807883a 	mov	r3,r5
    38dc:	31003d26 	beq	r6,r4,39d4 <_dtoa_r+0x918>
    38e0:	000d883a 	mov	r6,zero
    38e4:	01d00934 	movhi	r7,16420
    38e8:	1009883a 	mov	r4,r2
    38ec:	000bd800 	call	bd80 <__muldf3>
    38f0:	1009883a 	mov	r4,r2
    38f4:	180b883a 	mov	r5,r3
    38f8:	000d883a 	mov	r6,zero
    38fc:	000f883a 	mov	r7,zero
    3900:	1027883a 	mov	r19,r2
    3904:	182b883a 	mov	r21,r3
    3908:	000bb3c0 	call	bb3c <__eqdf2>
    390c:	103f9926 	beq	r2,zero,3774 <__alt_mem_Flash_flash_data+0xf4003774>
    3910:	d8c00617 	ldw	r3,24(sp)
    3914:	d9000717 	ldw	r4,28(sp)
    3918:	b825883a 	mov	r18,r23
    391c:	18bfffc4 	addi	r2,r3,-1
    3920:	20ad883a 	add	r22,r4,r2
    3924:	dc000315 	stw	r16,12(sp)
    3928:	00000a06 	br	3954 <_dtoa_r+0x898>
    392c:	000bd800 	call	bd80 <__muldf3>
    3930:	1009883a 	mov	r4,r2
    3934:	180b883a 	mov	r5,r3
    3938:	000d883a 	mov	r6,zero
    393c:	000f883a 	mov	r7,zero
    3940:	1027883a 	mov	r19,r2
    3944:	182b883a 	mov	r21,r3
    3948:	b825883a 	mov	r18,r23
    394c:	000bb3c0 	call	bb3c <__eqdf2>
    3950:	10022626 	beq	r2,zero,41ec <_dtoa_r+0x1130>
    3954:	880d883a 	mov	r6,r17
    3958:	a00f883a 	mov	r7,r20
    395c:	9809883a 	mov	r4,r19
    3960:	a80b883a 	mov	r5,r21
    3964:	000b2700 	call	b270 <__divdf3>
    3968:	180b883a 	mov	r5,r3
    396c:	1009883a 	mov	r4,r2
    3970:	000cd740 	call	cd74 <__fixdfsi>
    3974:	1009883a 	mov	r4,r2
    3978:	1021883a 	mov	r16,r2
    397c:	000cdfc0 	call	cdfc <__floatsidf>
    3980:	1009883a 	mov	r4,r2
    3984:	180b883a 	mov	r5,r3
    3988:	880d883a 	mov	r6,r17
    398c:	a00f883a 	mov	r7,r20
    3990:	000bd800 	call	bd80 <__muldf3>
    3994:	9809883a 	mov	r4,r19
    3998:	a80b883a 	mov	r5,r21
    399c:	100d883a 	mov	r6,r2
    39a0:	180f883a 	mov	r7,r3
    39a4:	000c4a40 	call	c4a4 <__subdf3>
    39a8:	82000c04 	addi	r8,r16,48
    39ac:	92000005 	stb	r8,0(r18)
    39b0:	1009883a 	mov	r4,r2
    39b4:	180b883a 	mov	r5,r3
    39b8:	000d883a 	mov	r6,zero
    39bc:	01d00934 	movhi	r7,16420
    39c0:	1011883a 	mov	r8,r2
    39c4:	bdc00044 	addi	r23,r23,1
    39c8:	95bfd81e 	bne	r18,r22,392c <__alt_mem_Flash_flash_data+0xf400392c>
    39cc:	802d883a 	mov	r22,r16
    39d0:	dc000317 	ldw	r16,12(sp)
    39d4:	4009883a 	mov	r4,r8
    39d8:	180b883a 	mov	r5,r3
    39dc:	400d883a 	mov	r6,r8
    39e0:	180f883a 	mov	r7,r3
    39e4:	000a9d40 	call	a9d4 <__adddf3>
    39e8:	8809883a 	mov	r4,r17
    39ec:	a00b883a 	mov	r5,r20
    39f0:	100d883a 	mov	r6,r2
    39f4:	180f883a 	mov	r7,r3
    39f8:	1027883a 	mov	r19,r2
    39fc:	1825883a 	mov	r18,r3
    3a00:	000bca00 	call	bca0 <__ledf2>
    3a04:	10000816 	blt	r2,zero,3a28 <_dtoa_r+0x96c>
    3a08:	8809883a 	mov	r4,r17
    3a0c:	a00b883a 	mov	r5,r20
    3a10:	980d883a 	mov	r6,r19
    3a14:	900f883a 	mov	r7,r18
    3a18:	000bb3c0 	call	bb3c <__eqdf2>
    3a1c:	103f551e 	bne	r2,zero,3774 <__alt_mem_Flash_flash_data+0xf4003774>
    3a20:	b580004c 	andi	r22,r22,1
    3a24:	b03f5326 	beq	r22,zero,3774 <__alt_mem_Flash_flash_data+0xf4003774>
    3a28:	bd7fffc3 	ldbu	r21,-1(r23)
    3a2c:	b8bfffc4 	addi	r2,r23,-1
    3a30:	1007883a 	mov	r3,r2
    3a34:	01400e44 	movi	r5,57
    3a38:	d9800717 	ldw	r6,28(sp)
    3a3c:	00000506 	br	3a54 <_dtoa_r+0x998>
    3a40:	18ffffc4 	addi	r3,r3,-1
    3a44:	30825e26 	beq	r6,r2,43c0 <_dtoa_r+0x1304>
    3a48:	1d400003 	ldbu	r21,0(r3)
    3a4c:	102f883a 	mov	r23,r2
    3a50:	10bfffc4 	addi	r2,r2,-1
    3a54:	a9003fcc 	andi	r4,r21,255
    3a58:	2100201c 	xori	r4,r4,128
    3a5c:	213fe004 	addi	r4,r4,-128
    3a60:	217ff726 	beq	r4,r5,3a40 <__alt_mem_Flash_flash_data+0xf4003a40>
    3a64:	aa000044 	addi	r8,r21,1
    3a68:	12000005 	stb	r8,0(r2)
    3a6c:	003f4106 	br	3774 <__alt_mem_Flash_flash_data+0xf4003774>
    3a70:	d8c00b17 	ldw	r3,44(sp)
    3a74:	18006726 	beq	r3,zero,3c14 <_dtoa_r+0xb58>
    3a78:	d9000317 	ldw	r4,12(sp)
    3a7c:	00c00044 	movi	r3,1
    3a80:	19016a0e 	bge	r3,r4,402c <_dtoa_r+0xf70>
    3a84:	d8800617 	ldw	r2,24(sp)
    3a88:	d8c00917 	ldw	r3,36(sp)
    3a8c:	157fffc4 	addi	r21,r2,-1
    3a90:	1d420716 	blt	r3,r21,42b0 <_dtoa_r+0x11f4>
    3a94:	1d6bc83a 	sub	r21,r3,r21
    3a98:	d8800617 	ldw	r2,24(sp)
    3a9c:	1002c716 	blt	r2,zero,45bc <_dtoa_r+0x1500>
    3aa0:	dd000817 	ldw	r20,32(sp)
    3aa4:	d8800617 	ldw	r2,24(sp)
    3aa8:	d9800817 	ldw	r6,32(sp)
    3aac:	8009883a 	mov	r4,r16
    3ab0:	01400044 	movi	r5,1
    3ab4:	308d883a 	add	r6,r6,r2
    3ab8:	d9800815 	stw	r6,32(sp)
    3abc:	b0ad883a 	add	r22,r22,r2
    3ac0:	00065440 	call	6544 <__i2b>
    3ac4:	1023883a 	mov	r17,r2
    3ac8:	a0000826 	beq	r20,zero,3aec <_dtoa_r+0xa30>
    3acc:	0580070e 	bge	zero,r22,3aec <_dtoa_r+0xa30>
    3ad0:	b005883a 	mov	r2,r22
    3ad4:	a5812016 	blt	r20,r22,3f58 <_dtoa_r+0xe9c>
    3ad8:	d8c00817 	ldw	r3,32(sp)
    3adc:	a0a9c83a 	sub	r20,r20,r2
    3ae0:	b0adc83a 	sub	r22,r22,r2
    3ae4:	1887c83a 	sub	r3,r3,r2
    3ae8:	d8c00815 	stw	r3,32(sp)
    3aec:	d9000917 	ldw	r4,36(sp)
    3af0:	0100140e 	bge	zero,r4,3b44 <_dtoa_r+0xa88>
    3af4:	d9800b17 	ldw	r6,44(sp)
    3af8:	3001e526 	beq	r6,zero,4290 <_dtoa_r+0x11d4>
    3afc:	05400e0e 	bge	zero,r21,3b38 <_dtoa_r+0xa7c>
    3b00:	880b883a 	mov	r5,r17
    3b04:	8009883a 	mov	r4,r16
    3b08:	a80d883a 	mov	r6,r21
    3b0c:	000677c0 	call	677c <__pow5mult>
    3b10:	e00d883a 	mov	r6,fp
    3b14:	8009883a 	mov	r4,r16
    3b18:	100b883a 	mov	r5,r2
    3b1c:	1023883a 	mov	r17,r2
    3b20:	00065800 	call	6580 <__multiply>
    3b24:	102f883a 	mov	r23,r2
    3b28:	e00b883a 	mov	r5,fp
    3b2c:	8009883a 	mov	r4,r16
    3b30:	00061e00 	call	61e0 <_Bfree>
    3b34:	b839883a 	mov	fp,r23
    3b38:	d8800917 	ldw	r2,36(sp)
    3b3c:	154dc83a 	sub	r6,r2,r21
    3b40:	3001281e 	bne	r6,zero,3fe4 <_dtoa_r+0xf28>
    3b44:	05c00044 	movi	r23,1
    3b48:	8009883a 	mov	r4,r16
    3b4c:	b80b883a 	mov	r5,r23
    3b50:	00065440 	call	6544 <__i2b>
    3b54:	d8c00a17 	ldw	r3,40(sp)
    3b58:	102b883a 	mov	r21,r2
    3b5c:	00c0310e 	bge	zero,r3,3c24 <_dtoa_r+0xb68>
    3b60:	8009883a 	mov	r4,r16
    3b64:	100b883a 	mov	r5,r2
    3b68:	180d883a 	mov	r6,r3
    3b6c:	000677c0 	call	677c <__pow5mult>
    3b70:	d9000317 	ldw	r4,12(sp)
    3b74:	102b883a 	mov	r21,r2
    3b78:	b9011f0e 	bge	r23,r4,3ff8 <_dtoa_r+0xf3c>
    3b7c:	0027883a 	mov	r19,zero
    3b80:	a8800417 	ldw	r2,16(r21)
    3b84:	10800104 	addi	r2,r2,4
    3b88:	1085883a 	add	r2,r2,r2
    3b8c:	1085883a 	add	r2,r2,r2
    3b90:	a885883a 	add	r2,r21,r2
    3b94:	11000017 	ldw	r4,0(r2)
    3b98:	000642c0 	call	642c <__hi0bits>
    3b9c:	00c00804 	movi	r3,32
    3ba0:	1885c83a 	sub	r2,r3,r2
    3ba4:	00002506 	br	3c3c <_dtoa_r+0xb80>
    3ba8:	01800044 	movi	r6,1
    3bac:	d9800d15 	stw	r6,52(sp)
    3bb0:	003dec06 	br	3364 <__alt_mem_Flash_flash_data+0xf4003364>
    3bb4:	d8c00817 	ldw	r3,32(sp)
    3bb8:	d9000517 	ldw	r4,20(sp)
    3bbc:	d8000a15 	stw	zero,40(sp)
    3bc0:	1907c83a 	sub	r3,r3,r4
    3bc4:	010dc83a 	sub	r6,zero,r4
    3bc8:	d8c00815 	stw	r3,32(sp)
    3bcc:	d9800915 	stw	r6,36(sp)
    3bd0:	003ded06 	br	3388 <__alt_mem_Flash_flash_data+0xf4003388>
    3bd4:	05adc83a 	sub	r22,zero,r22
    3bd8:	dd800815 	stw	r22,32(sp)
    3bdc:	002d883a 	mov	r22,zero
    3be0:	003de406 	br	3374 <__alt_mem_Flash_flash_data+0xf4003374>
    3be4:	d9000517 	ldw	r4,20(sp)
    3be8:	000cdfc0 	call	cdfc <__floatsidf>
    3bec:	1009883a 	mov	r4,r2
    3bf0:	180b883a 	mov	r5,r3
    3bf4:	b00d883a 	mov	r6,r22
    3bf8:	a80f883a 	mov	r7,r21
    3bfc:	000bb3c0 	call	bb3c <__eqdf2>
    3c00:	103dc726 	beq	r2,zero,3320 <__alt_mem_Flash_flash_data+0xf4003320>
    3c04:	d8800517 	ldw	r2,20(sp)
    3c08:	10bfffc4 	addi	r2,r2,-1
    3c0c:	d8800515 	stw	r2,20(sp)
    3c10:	003dc306 	br	3320 <__alt_mem_Flash_flash_data+0xf4003320>
    3c14:	dd400917 	ldw	r21,36(sp)
    3c18:	dd000817 	ldw	r20,32(sp)
    3c1c:	0023883a 	mov	r17,zero
    3c20:	003fa906 	br	3ac8 <__alt_mem_Flash_flash_data+0xf4003ac8>
    3c24:	d9800317 	ldw	r6,12(sp)
    3c28:	b981670e 	bge	r23,r6,41c8 <_dtoa_r+0x110c>
    3c2c:	0027883a 	mov	r19,zero
    3c30:	d8c00a17 	ldw	r3,40(sp)
    3c34:	183fd21e 	bne	r3,zero,3b80 <__alt_mem_Flash_flash_data+0xf4003b80>
    3c38:	00800044 	movi	r2,1
    3c3c:	1585883a 	add	r2,r2,r22
    3c40:	108007cc 	andi	r2,r2,31
    3c44:	10005f26 	beq	r2,zero,3dc4 <_dtoa_r+0xd08>
    3c48:	00c00804 	movi	r3,32
    3c4c:	1887c83a 	sub	r3,r3,r2
    3c50:	01000104 	movi	r4,4
    3c54:	20c2dd0e 	bge	r4,r3,47cc <_dtoa_r+0x1710>
    3c58:	d9000817 	ldw	r4,32(sp)
    3c5c:	00c00704 	movi	r3,28
    3c60:	1885c83a 	sub	r2,r3,r2
    3c64:	2089883a 	add	r4,r4,r2
    3c68:	d9000815 	stw	r4,32(sp)
    3c6c:	a0a9883a 	add	r20,r20,r2
    3c70:	b0ad883a 	add	r22,r22,r2
    3c74:	d8800817 	ldw	r2,32(sp)
    3c78:	0080050e 	bge	zero,r2,3c90 <_dtoa_r+0xbd4>
    3c7c:	e00b883a 	mov	r5,fp
    3c80:	8009883a 	mov	r4,r16
    3c84:	100d883a 	mov	r6,r2
    3c88:	00068bc0 	call	68bc <__lshift>
    3c8c:	1039883a 	mov	fp,r2
    3c90:	0580050e 	bge	zero,r22,3ca8 <_dtoa_r+0xbec>
    3c94:	a80b883a 	mov	r5,r21
    3c98:	8009883a 	mov	r4,r16
    3c9c:	b00d883a 	mov	r6,r22
    3ca0:	00068bc0 	call	68bc <__lshift>
    3ca4:	102b883a 	mov	r21,r2
    3ca8:	d8c00d17 	ldw	r3,52(sp)
    3cac:	1801161e 	bne	r3,zero,4108 <_dtoa_r+0x104c>
    3cb0:	d8c00617 	ldw	r3,24(sp)
    3cb4:	00c12d0e 	bge	zero,r3,416c <_dtoa_r+0x10b0>
    3cb8:	d8c00b17 	ldw	r3,44(sp)
    3cbc:	1800571e 	bne	r3,zero,3e1c <_dtoa_r+0xd60>
    3cc0:	dc800717 	ldw	r18,28(sp)
    3cc4:	dcc00617 	ldw	r19,24(sp)
    3cc8:	9029883a 	mov	r20,r18
    3ccc:	00000206 	br	3cd8 <_dtoa_r+0xc1c>
    3cd0:	00062080 	call	6208 <__multadd>
    3cd4:	1039883a 	mov	fp,r2
    3cd8:	e009883a 	mov	r4,fp
    3cdc:	a80b883a 	mov	r5,r21
    3ce0:	0002ebc0 	call	2ebc <quorem>
    3ce4:	10800c04 	addi	r2,r2,48
    3ce8:	90800005 	stb	r2,0(r18)
    3cec:	94800044 	addi	r18,r18,1
    3cf0:	9507c83a 	sub	r3,r18,r20
    3cf4:	8009883a 	mov	r4,r16
    3cf8:	e00b883a 	mov	r5,fp
    3cfc:	01800284 	movi	r6,10
    3d00:	000f883a 	mov	r7,zero
    3d04:	1cfff216 	blt	r3,r19,3cd0 <__alt_mem_Flash_flash_data+0xf4003cd0>
    3d08:	1011883a 	mov	r8,r2
    3d0c:	d8800617 	ldw	r2,24(sp)
    3d10:	00822e0e 	bge	zero,r2,45cc <_dtoa_r+0x1510>
    3d14:	d9000717 	ldw	r4,28(sp)
    3d18:	0025883a 	mov	r18,zero
    3d1c:	20af883a 	add	r23,r4,r2
    3d20:	e00b883a 	mov	r5,fp
    3d24:	01800044 	movi	r6,1
    3d28:	8009883a 	mov	r4,r16
    3d2c:	da001715 	stw	r8,92(sp)
    3d30:	00068bc0 	call	68bc <__lshift>
    3d34:	1009883a 	mov	r4,r2
    3d38:	a80b883a 	mov	r5,r21
    3d3c:	1039883a 	mov	fp,r2
    3d40:	0006a0c0 	call	6a0c <__mcmp>
    3d44:	da001717 	ldw	r8,92(sp)
    3d48:	00816e0e 	bge	zero,r2,4304 <_dtoa_r+0x1248>
    3d4c:	b93fffc3 	ldbu	r4,-1(r23)
    3d50:	b8bfffc4 	addi	r2,r23,-1
    3d54:	1007883a 	mov	r3,r2
    3d58:	01800e44 	movi	r6,57
    3d5c:	d9c00717 	ldw	r7,28(sp)
    3d60:	00000506 	br	3d78 <_dtoa_r+0xcbc>
    3d64:	18ffffc4 	addi	r3,r3,-1
    3d68:	38811926 	beq	r7,r2,41d0 <_dtoa_r+0x1114>
    3d6c:	19000003 	ldbu	r4,0(r3)
    3d70:	102f883a 	mov	r23,r2
    3d74:	10bfffc4 	addi	r2,r2,-1
    3d78:	21403fcc 	andi	r5,r4,255
    3d7c:	2940201c 	xori	r5,r5,128
    3d80:	297fe004 	addi	r5,r5,-128
    3d84:	29bff726 	beq	r5,r6,3d64 <__alt_mem_Flash_flash_data+0xf4003d64>
    3d88:	21000044 	addi	r4,r4,1
    3d8c:	11000005 	stb	r4,0(r2)
    3d90:	8009883a 	mov	r4,r16
    3d94:	a80b883a 	mov	r5,r21
    3d98:	00061e00 	call	61e0 <_Bfree>
    3d9c:	883e7526 	beq	r17,zero,3774 <__alt_mem_Flash_flash_data+0xf4003774>
    3da0:	90000426 	beq	r18,zero,3db4 <_dtoa_r+0xcf8>
    3da4:	94400326 	beq	r18,r17,3db4 <_dtoa_r+0xcf8>
    3da8:	8009883a 	mov	r4,r16
    3dac:	900b883a 	mov	r5,r18
    3db0:	00061e00 	call	61e0 <_Bfree>
    3db4:	8009883a 	mov	r4,r16
    3db8:	880b883a 	mov	r5,r17
    3dbc:	00061e00 	call	61e0 <_Bfree>
    3dc0:	003e6c06 	br	3774 <__alt_mem_Flash_flash_data+0xf4003774>
    3dc4:	00800704 	movi	r2,28
    3dc8:	d9800817 	ldw	r6,32(sp)
    3dcc:	a0a9883a 	add	r20,r20,r2
    3dd0:	b0ad883a 	add	r22,r22,r2
    3dd4:	308d883a 	add	r6,r6,r2
    3dd8:	d9800815 	stw	r6,32(sp)
    3ddc:	003fa506 	br	3c74 <__alt_mem_Flash_flash_data+0xf4003c74>
    3de0:	013efb84 	movi	r4,-1042
    3de4:	246bc83a 	sub	r21,r4,r17
    3de8:	9548983a 	sll	r4,r18,r21
    3dec:	003d1806 	br	3250 <__alt_mem_Flash_flash_data+0xf4003250>
    3df0:	d8000d15 	stw	zero,52(sp)
    3df4:	003d5b06 	br	3364 <__alt_mem_Flash_flash_data+0xf4003364>
    3df8:	880b883a 	mov	r5,r17
    3dfc:	8009883a 	mov	r4,r16
    3e00:	01800284 	movi	r6,10
    3e04:	000f883a 	mov	r7,zero
    3e08:	00062080 	call	6208 <__multadd>
    3e0c:	1023883a 	mov	r17,r2
    3e10:	d8800c17 	ldw	r2,48(sp)
    3e14:	0082550e 	bge	zero,r2,476c <_dtoa_r+0x16b0>
    3e18:	d8800615 	stw	r2,24(sp)
    3e1c:	0500050e 	bge	zero,r20,3e34 <_dtoa_r+0xd78>
    3e20:	880b883a 	mov	r5,r17
    3e24:	8009883a 	mov	r4,r16
    3e28:	a00d883a 	mov	r6,r20
    3e2c:	00068bc0 	call	68bc <__lshift>
    3e30:	1023883a 	mov	r17,r2
    3e34:	98016a1e 	bne	r19,zero,43e0 <_dtoa_r+0x1324>
    3e38:	8829883a 	mov	r20,r17
    3e3c:	d9000617 	ldw	r4,24(sp)
    3e40:	dcc00717 	ldw	r19,28(sp)
    3e44:	9480004c 	andi	r18,r18,1
    3e48:	20bfffc4 	addi	r2,r4,-1
    3e4c:	9885883a 	add	r2,r19,r2
    3e50:	d8800415 	stw	r2,16(sp)
    3e54:	dc800615 	stw	r18,24(sp)
    3e58:	e009883a 	mov	r4,fp
    3e5c:	a80b883a 	mov	r5,r21
    3e60:	0002ebc0 	call	2ebc <quorem>
    3e64:	e009883a 	mov	r4,fp
    3e68:	880b883a 	mov	r5,r17
    3e6c:	102f883a 	mov	r23,r2
    3e70:	0006a0c0 	call	6a0c <__mcmp>
    3e74:	8009883a 	mov	r4,r16
    3e78:	a80b883a 	mov	r5,r21
    3e7c:	a00d883a 	mov	r6,r20
    3e80:	102d883a 	mov	r22,r2
    3e84:	0006a6c0 	call	6a6c <__mdiff>
    3e88:	1007883a 	mov	r3,r2
    3e8c:	10800317 	ldw	r2,12(r2)
    3e90:	bc800c04 	addi	r18,r23,48
    3e94:	1000971e 	bne	r2,zero,40f4 <_dtoa_r+0x1038>
    3e98:	180b883a 	mov	r5,r3
    3e9c:	e009883a 	mov	r4,fp
    3ea0:	d8c01515 	stw	r3,84(sp)
    3ea4:	0006a0c0 	call	6a0c <__mcmp>
    3ea8:	d8c01517 	ldw	r3,84(sp)
    3eac:	8009883a 	mov	r4,r16
    3eb0:	d8801515 	stw	r2,84(sp)
    3eb4:	180b883a 	mov	r5,r3
    3eb8:	00061e00 	call	61e0 <_Bfree>
    3ebc:	d8801517 	ldw	r2,84(sp)
    3ec0:	1000041e 	bne	r2,zero,3ed4 <_dtoa_r+0xe18>
    3ec4:	d9800317 	ldw	r6,12(sp)
    3ec8:	3000021e 	bne	r6,zero,3ed4 <_dtoa_r+0xe18>
    3ecc:	d8c00617 	ldw	r3,24(sp)
    3ed0:	18007626 	beq	r3,zero,40ac <_dtoa_r+0xff0>
    3ed4:	b0005b16 	blt	r22,zero,4044 <_dtoa_r+0xf88>
    3ed8:	b000041e 	bne	r22,zero,3eec <_dtoa_r+0xe30>
    3edc:	d9000317 	ldw	r4,12(sp)
    3ee0:	2000021e 	bne	r4,zero,3eec <_dtoa_r+0xe30>
    3ee4:	d8c00617 	ldw	r3,24(sp)
    3ee8:	18005626 	beq	r3,zero,4044 <_dtoa_r+0xf88>
    3eec:	00814d16 	blt	zero,r2,4424 <_dtoa_r+0x1368>
    3ef0:	d8c00417 	ldw	r3,16(sp)
    3ef4:	9d800044 	addi	r22,r19,1
    3ef8:	9c800005 	stb	r18,0(r19)
    3efc:	b02f883a 	mov	r23,r22
    3f00:	98c14c26 	beq	r19,r3,4434 <_dtoa_r+0x1378>
    3f04:	e00b883a 	mov	r5,fp
    3f08:	8009883a 	mov	r4,r16
    3f0c:	01800284 	movi	r6,10
    3f10:	000f883a 	mov	r7,zero
    3f14:	00062080 	call	6208 <__multadd>
    3f18:	1039883a 	mov	fp,r2
    3f1c:	8d006d26 	beq	r17,r20,40d4 <_dtoa_r+0x1018>
    3f20:	880b883a 	mov	r5,r17
    3f24:	01800284 	movi	r6,10
    3f28:	000f883a 	mov	r7,zero
    3f2c:	8009883a 	mov	r4,r16
    3f30:	00062080 	call	6208 <__multadd>
    3f34:	a00b883a 	mov	r5,r20
    3f38:	8009883a 	mov	r4,r16
    3f3c:	01800284 	movi	r6,10
    3f40:	000f883a 	mov	r7,zero
    3f44:	1023883a 	mov	r17,r2
    3f48:	00062080 	call	6208 <__multadd>
    3f4c:	1029883a 	mov	r20,r2
    3f50:	b027883a 	mov	r19,r22
    3f54:	003fc006 	br	3e58 <__alt_mem_Flash_flash_data+0xf4003e58>
    3f58:	a005883a 	mov	r2,r20
    3f5c:	003ede06 	br	3ad8 <__alt_mem_Flash_flash_data+0xf4003ad8>
    3f60:	01000044 	movi	r4,1
    3f64:	d9000b15 	stw	r4,44(sp)
    3f68:	d9802217 	ldw	r6,136(sp)
    3f6c:	0180dc0e 	bge	zero,r6,42e0 <_dtoa_r+0x1224>
    3f70:	3023883a 	mov	r17,r6
    3f74:	d9800c15 	stw	r6,48(sp)
    3f78:	d9800615 	stw	r6,24(sp)
    3f7c:	003d1e06 	br	33f8 <__alt_mem_Flash_flash_data+0xf40033f8>
    3f80:	d8800617 	ldw	r2,24(sp)
    3f84:	00be3716 	blt	zero,r2,3864 <__alt_mem_Flash_flash_data+0xf4003864>
    3f88:	1000be1e 	bne	r2,zero,4284 <_dtoa_r+0x11c8>
    3f8c:	8809883a 	mov	r4,r17
    3f90:	a00b883a 	mov	r5,r20
    3f94:	000d883a 	mov	r6,zero
    3f98:	01d00534 	movhi	r7,16404
    3f9c:	000bd800 	call	bd80 <__muldf3>
    3fa0:	1009883a 	mov	r4,r2
    3fa4:	180b883a 	mov	r5,r3
    3fa8:	900d883a 	mov	r6,r18
    3fac:	980f883a 	mov	r7,r19
    3fb0:	000bbc00 	call	bbc0 <__gedf2>
    3fb4:	002b883a 	mov	r21,zero
    3fb8:	0023883a 	mov	r17,zero
    3fbc:	10007a16 	blt	r2,zero,41a8 <_dtoa_r+0x10ec>
    3fc0:	d9002217 	ldw	r4,136(sp)
    3fc4:	ddc00717 	ldw	r23,28(sp)
    3fc8:	0108303a 	nor	r4,zero,r4
    3fcc:	d9000515 	stw	r4,20(sp)
    3fd0:	8009883a 	mov	r4,r16
    3fd4:	a80b883a 	mov	r5,r21
    3fd8:	00061e00 	call	61e0 <_Bfree>
    3fdc:	883f751e 	bne	r17,zero,3db4 <__alt_mem_Flash_flash_data+0xf4003db4>
    3fe0:	003de406 	br	3774 <__alt_mem_Flash_flash_data+0xf4003774>
    3fe4:	e00b883a 	mov	r5,fp
    3fe8:	8009883a 	mov	r4,r16
    3fec:	000677c0 	call	677c <__pow5mult>
    3ff0:	1039883a 	mov	fp,r2
    3ff4:	003ed306 	br	3b44 <__alt_mem_Flash_flash_data+0xf4003b44>
    3ff8:	903ee01e 	bne	r18,zero,3b7c <__alt_mem_Flash_flash_data+0xf4003b7c>
    3ffc:	00800434 	movhi	r2,16
    4000:	10bfffc4 	addi	r2,r2,-1
    4004:	9884703a 	and	r2,r19,r2
    4008:	103f081e 	bne	r2,zero,3c2c <__alt_mem_Flash_flash_data+0xf4003c2c>
    400c:	9cdffc2c 	andhi	r19,r19,32752
    4010:	983f0626 	beq	r19,zero,3c2c <__alt_mem_Flash_flash_data+0xf4003c2c>
    4014:	d8800817 	ldw	r2,32(sp)
    4018:	b5800044 	addi	r22,r22,1
    401c:	04c00044 	movi	r19,1
    4020:	10800044 	addi	r2,r2,1
    4024:	d8800815 	stw	r2,32(sp)
    4028:	003f0106 	br	3c30 <__alt_mem_Flash_flash_data+0xf4003c30>
    402c:	d9800f17 	ldw	r6,60(sp)
    4030:	30016826 	beq	r6,zero,45d4 <_dtoa_r+0x1518>
    4034:	10810cc4 	addi	r2,r2,1075
    4038:	dd400917 	ldw	r21,36(sp)
    403c:	dd000817 	ldw	r20,32(sp)
    4040:	003e9906 	br	3aa8 <__alt_mem_Flash_flash_data+0xf4003aa8>
    4044:	9011883a 	mov	r8,r18
    4048:	4007883a 	mov	r3,r8
    404c:	e02d883a 	mov	r22,fp
    4050:	0080100e 	bge	zero,r2,4094 <_dtoa_r+0xfd8>
    4054:	01800044 	movi	r6,1
    4058:	8009883a 	mov	r4,r16
    405c:	e00b883a 	mov	r5,fp
    4060:	da001515 	stw	r8,84(sp)
    4064:	da001715 	stw	r8,92(sp)
    4068:	00068bc0 	call	68bc <__lshift>
    406c:	1009883a 	mov	r4,r2
    4070:	a80b883a 	mov	r5,r21
    4074:	102d883a 	mov	r22,r2
    4078:	0006a0c0 	call	6a0c <__mcmp>
    407c:	d8c01517 	ldw	r3,84(sp)
    4080:	da001717 	ldw	r8,92(sp)
    4084:	0081a50e 	bge	zero,r2,471c <_dtoa_r+0x1660>
    4088:	00800e44 	movi	r2,57
    408c:	40817b26 	beq	r8,r2,467c <_dtoa_r+0x15c0>
    4090:	40c00044 	addi	r3,r8,1
    4094:	8825883a 	mov	r18,r17
    4098:	9dc00044 	addi	r23,r19,1
    409c:	98c00005 	stb	r3,0(r19)
    40a0:	a023883a 	mov	r17,r20
    40a4:	b039883a 	mov	fp,r22
    40a8:	003f3906 	br	3d90 <__alt_mem_Flash_flash_data+0xf4003d90>
    40ac:	00800e44 	movi	r2,57
    40b0:	9011883a 	mov	r8,r18
    40b4:	90817226 	beq	r18,r2,4680 <_dtoa_r+0x15c4>
    40b8:	0580010e 	bge	zero,r22,40c0 <_dtoa_r+0x1004>
    40bc:	ba000c44 	addi	r8,r23,49
    40c0:	8825883a 	mov	r18,r17
    40c4:	9dc00044 	addi	r23,r19,1
    40c8:	9a000005 	stb	r8,0(r19)
    40cc:	a023883a 	mov	r17,r20
    40d0:	003f2f06 	br	3d90 <__alt_mem_Flash_flash_data+0xf4003d90>
    40d4:	880b883a 	mov	r5,r17
    40d8:	8009883a 	mov	r4,r16
    40dc:	01800284 	movi	r6,10
    40e0:	000f883a 	mov	r7,zero
    40e4:	00062080 	call	6208 <__multadd>
    40e8:	1023883a 	mov	r17,r2
    40ec:	1029883a 	mov	r20,r2
    40f0:	003f9706 	br	3f50 <__alt_mem_Flash_flash_data+0xf4003f50>
    40f4:	8009883a 	mov	r4,r16
    40f8:	180b883a 	mov	r5,r3
    40fc:	00061e00 	call	61e0 <_Bfree>
    4100:	00800044 	movi	r2,1
    4104:	003f7306 	br	3ed4 <__alt_mem_Flash_flash_data+0xf4003ed4>
    4108:	e009883a 	mov	r4,fp
    410c:	a80b883a 	mov	r5,r21
    4110:	0006a0c0 	call	6a0c <__mcmp>
    4114:	103ee60e 	bge	r2,zero,3cb0 <__alt_mem_Flash_flash_data+0xf4003cb0>
    4118:	8009883a 	mov	r4,r16
    411c:	e00b883a 	mov	r5,fp
    4120:	01800284 	movi	r6,10
    4124:	000f883a 	mov	r7,zero
    4128:	00062080 	call	6208 <__multadd>
    412c:	d9000517 	ldw	r4,20(sp)
    4130:	d9800b17 	ldw	r6,44(sp)
    4134:	1039883a 	mov	fp,r2
    4138:	213fffc4 	addi	r4,r4,-1
    413c:	d9000515 	stw	r4,20(sp)
    4140:	303f2d1e 	bne	r6,zero,3df8 <__alt_mem_Flash_flash_data+0xf4003df8>
    4144:	d9000c17 	ldw	r4,48(sp)
    4148:	0101780e 	bge	zero,r4,472c <_dtoa_r+0x1670>
    414c:	d9000615 	stw	r4,24(sp)
    4150:	003edb06 	br	3cc0 <__alt_mem_Flash_flash_data+0xf4003cc0>
    4154:	00800084 	movi	r2,2
    4158:	30818e1e 	bne	r6,r2,4794 <_dtoa_r+0x16d8>
    415c:	d8000b15 	stw	zero,44(sp)
    4160:	003f8106 	br	3f68 <__alt_mem_Flash_flash_data+0xf4003f68>
    4164:	d8800717 	ldw	r2,28(sp)
    4168:	003c0306 	br	3178 <__alt_mem_Flash_flash_data+0xf4003178>
    416c:	d9000317 	ldw	r4,12(sp)
    4170:	00800084 	movi	r2,2
    4174:	113ed00e 	bge	r2,r4,3cb8 <__alt_mem_Flash_flash_data+0xf4003cb8>
    4178:	d8c00617 	ldw	r3,24(sp)
    417c:	183f901e 	bne	r3,zero,3fc0 <__alt_mem_Flash_flash_data+0xf4003fc0>
    4180:	a80b883a 	mov	r5,r21
    4184:	8009883a 	mov	r4,r16
    4188:	01800144 	movi	r6,5
    418c:	000f883a 	mov	r7,zero
    4190:	00062080 	call	6208 <__multadd>
    4194:	e009883a 	mov	r4,fp
    4198:	100b883a 	mov	r5,r2
    419c:	102b883a 	mov	r21,r2
    41a0:	0006a0c0 	call	6a0c <__mcmp>
    41a4:	00bf860e 	bge	zero,r2,3fc0 <__alt_mem_Flash_flash_data+0xf4003fc0>
    41a8:	d9800717 	ldw	r6,28(sp)
    41ac:	00800c44 	movi	r2,49
    41b0:	30800005 	stb	r2,0(r6)
    41b4:	d8800517 	ldw	r2,20(sp)
    41b8:	35c00044 	addi	r23,r6,1
    41bc:	10800044 	addi	r2,r2,1
    41c0:	d8800515 	stw	r2,20(sp)
    41c4:	003f8206 	br	3fd0 <__alt_mem_Flash_flash_data+0xf4003fd0>
    41c8:	903e981e 	bne	r18,zero,3c2c <__alt_mem_Flash_flash_data+0xf4003c2c>
    41cc:	003f8b06 	br	3ffc <__alt_mem_Flash_flash_data+0xf4003ffc>
    41d0:	d9800517 	ldw	r6,20(sp)
    41d4:	d8c00717 	ldw	r3,28(sp)
    41d8:	00800c44 	movi	r2,49
    41dc:	31800044 	addi	r6,r6,1
    41e0:	d9800515 	stw	r6,20(sp)
    41e4:	18800005 	stb	r2,0(r3)
    41e8:	003ee906 	br	3d90 <__alt_mem_Flash_flash_data+0xf4003d90>
    41ec:	dc000317 	ldw	r16,12(sp)
    41f0:	003d6006 	br	3774 <__alt_mem_Flash_flash_data+0xf4003774>
    41f4:	8809883a 	mov	r4,r17
    41f8:	000cdfc0 	call	cdfc <__floatsidf>
    41fc:	a009883a 	mov	r4,r20
    4200:	a80b883a 	mov	r5,r21
    4204:	100d883a 	mov	r6,r2
    4208:	180f883a 	mov	r7,r3
    420c:	000bd800 	call	bd80 <__muldf3>
    4210:	1009883a 	mov	r4,r2
    4214:	180b883a 	mov	r5,r3
    4218:	000d883a 	mov	r6,zero
    421c:	01d00734 	movhi	r7,16412
    4220:	000a9d40 	call	a9d4 <__adddf3>
    4224:	1023883a 	mov	r17,r2
    4228:	00bf3034 	movhi	r2,64704
    422c:	1885883a 	add	r2,r3,r2
    4230:	d8800e15 	stw	r2,56(sp)
    4234:	a009883a 	mov	r4,r20
    4238:	a80b883a 	mov	r5,r21
    423c:	000d883a 	mov	r6,zero
    4240:	01d00534 	movhi	r7,16404
    4244:	000c4a40 	call	c4a4 <__subdf3>
    4248:	d9c00e17 	ldw	r7,56(sp)
    424c:	1009883a 	mov	r4,r2
    4250:	180b883a 	mov	r5,r3
    4254:	880d883a 	mov	r6,r17
    4258:	102b883a 	mov	r21,r2
    425c:	1829883a 	mov	r20,r3
    4260:	000bbc00 	call	bbc0 <__gedf2>
    4264:	00807716 	blt	zero,r2,4444 <_dtoa_r+0x1388>
    4268:	d8800e17 	ldw	r2,56(sp)
    426c:	a809883a 	mov	r4,r21
    4270:	a00b883a 	mov	r5,r20
    4274:	11e0003c 	xorhi	r7,r2,32768
    4278:	880d883a 	mov	r6,r17
    427c:	000bca00 	call	bca0 <__ledf2>
    4280:	103d6b0e 	bge	r2,zero,3830 <__alt_mem_Flash_flash_data+0xf4003830>
    4284:	002b883a 	mov	r21,zero
    4288:	0023883a 	mov	r17,zero
    428c:	003f4c06 	br	3fc0 <__alt_mem_Flash_flash_data+0xf4003fc0>
    4290:	d9800917 	ldw	r6,36(sp)
    4294:	e00b883a 	mov	r5,fp
    4298:	8009883a 	mov	r4,r16
    429c:	000677c0 	call	677c <__pow5mult>
    42a0:	1039883a 	mov	fp,r2
    42a4:	003e2706 	br	3b44 <__alt_mem_Flash_flash_data+0xf4003b44>
    42a8:	d8000b15 	stw	zero,44(sp)
    42ac:	003c4906 	br	33d4 <__alt_mem_Flash_flash_data+0xf40033d4>
    42b0:	d9000917 	ldw	r4,36(sp)
    42b4:	d9800a17 	ldw	r6,40(sp)
    42b8:	dd400915 	stw	r21,36(sp)
    42bc:	a905c83a 	sub	r2,r21,r4
    42c0:	308d883a 	add	r6,r6,r2
    42c4:	d9800a15 	stw	r6,40(sp)
    42c8:	002b883a 	mov	r21,zero
    42cc:	003df206 	br	3a98 <__alt_mem_Flash_flash_data+0xf4003a98>
    42d0:	dc800e15 	stw	r18,56(sp)
    42d4:	982b883a 	mov	r21,r19
    42d8:	04400084 	movi	r17,2
    42dc:	003c7406 	br	34b0 <__alt_mem_Flash_flash_data+0xf40034b0>
    42e0:	04400044 	movi	r17,1
    42e4:	dc400c15 	stw	r17,48(sp)
    42e8:	dc400615 	stw	r17,24(sp)
    42ec:	dc402215 	stw	r17,136(sp)
    42f0:	80001115 	stw	zero,68(r16)
    42f4:	000b883a 	mov	r5,zero
    42f8:	003c4a06 	br	3424 <__alt_mem_Flash_flash_data+0xf4003424>
    42fc:	3023883a 	mov	r17,r6
    4300:	003ffb06 	br	42f0 <__alt_mem_Flash_flash_data+0xf40042f0>
    4304:	1000021e 	bne	r2,zero,4310 <_dtoa_r+0x1254>
    4308:	4200004c 	andi	r8,r8,1
    430c:	403e8f1e 	bne	r8,zero,3d4c <__alt_mem_Flash_flash_data+0xf4003d4c>
    4310:	01000c04 	movi	r4,48
    4314:	00000106 	br	431c <_dtoa_r+0x1260>
    4318:	102f883a 	mov	r23,r2
    431c:	b8bfffc4 	addi	r2,r23,-1
    4320:	10c00007 	ldb	r3,0(r2)
    4324:	193ffc26 	beq	r3,r4,4318 <__alt_mem_Flash_flash_data+0xf4004318>
    4328:	003e9906 	br	3d90 <__alt_mem_Flash_flash_data+0xf4003d90>
    432c:	d9000517 	ldw	r4,20(sp)
    4330:	012fc83a 	sub	r23,zero,r4
    4334:	b800ad26 	beq	r23,zero,45ec <_dtoa_r+0x1530>
    4338:	b88003cc 	andi	r2,r23,15
    433c:	100490fa 	slli	r2,r2,3
    4340:	00c000b4 	movhi	r3,2
    4344:	18e5eb04 	addi	r3,r3,-26708
    4348:	1885883a 	add	r2,r3,r2
    434c:	11800017 	ldw	r6,0(r2)
    4350:	11c00117 	ldw	r7,4(r2)
    4354:	b82fd13a 	srai	r23,r23,4
    4358:	9009883a 	mov	r4,r18
    435c:	980b883a 	mov	r5,r19
    4360:	000bd800 	call	bd80 <__muldf3>
    4364:	1029883a 	mov	r20,r2
    4368:	182b883a 	mov	r21,r3
    436c:	b800f426 	beq	r23,zero,4740 <_dtoa_r+0x1684>
    4370:	020000b4 	movhi	r8,2
    4374:	4225e104 	addi	r8,r8,-26748
    4378:	8029883a 	mov	r20,r16
    437c:	04400084 	movi	r17,2
    4380:	4021883a 	mov	r16,r8
    4384:	b980004c 	andi	r6,r23,1
    4388:	1009883a 	mov	r4,r2
    438c:	b82fd07a 	srai	r23,r23,1
    4390:	180b883a 	mov	r5,r3
    4394:	30000426 	beq	r6,zero,43a8 <_dtoa_r+0x12ec>
    4398:	81800017 	ldw	r6,0(r16)
    439c:	81c00117 	ldw	r7,4(r16)
    43a0:	8c400044 	addi	r17,r17,1
    43a4:	000bd800 	call	bd80 <__muldf3>
    43a8:	84000204 	addi	r16,r16,8
    43ac:	b83ff51e 	bne	r23,zero,4384 <__alt_mem_Flash_flash_data+0xf4004384>
    43b0:	a021883a 	mov	r16,r20
    43b4:	182b883a 	mov	r21,r3
    43b8:	1029883a 	mov	r20,r2
    43bc:	003c5506 	br	3514 <__alt_mem_Flash_flash_data+0xf4003514>
    43c0:	d9800517 	ldw	r6,20(sp)
    43c4:	d9000717 	ldw	r4,28(sp)
    43c8:	00c00c04 	movi	r3,48
    43cc:	31800044 	addi	r6,r6,1
    43d0:	d9800515 	stw	r6,20(sp)
    43d4:	20c00005 	stb	r3,0(r4)
    43d8:	02000c44 	movi	r8,49
    43dc:	003da206 	br	3a68 <__alt_mem_Flash_flash_data+0xf4003a68>
    43e0:	89400117 	ldw	r5,4(r17)
    43e4:	8009883a 	mov	r4,r16
    43e8:	00061380 	call	6138 <_Balloc>
    43ec:	89800417 	ldw	r6,16(r17)
    43f0:	11000304 	addi	r4,r2,12
    43f4:	89400304 	addi	r5,r17,12
    43f8:	31800084 	addi	r6,r6,2
    43fc:	318d883a 	add	r6,r6,r6
    4400:	318d883a 	add	r6,r6,r6
    4404:	1027883a 	mov	r19,r2
    4408:	0005edc0 	call	5edc <memcpy>
    440c:	8009883a 	mov	r4,r16
    4410:	980b883a 	mov	r5,r19
    4414:	01800044 	movi	r6,1
    4418:	00068bc0 	call	68bc <__lshift>
    441c:	1029883a 	mov	r20,r2
    4420:	003e8606 	br	3e3c <__alt_mem_Flash_flash_data+0xf4003e3c>
    4424:	00800e44 	movi	r2,57
    4428:	90809526 	beq	r18,r2,4680 <_dtoa_r+0x15c4>
    442c:	92000044 	addi	r8,r18,1
    4430:	003f2306 	br	40c0 <__alt_mem_Flash_flash_data+0xf40040c0>
    4434:	9011883a 	mov	r8,r18
    4438:	8825883a 	mov	r18,r17
    443c:	a023883a 	mov	r17,r20
    4440:	003e3706 	br	3d20 <__alt_mem_Flash_flash_data+0xf4003d20>
    4444:	002b883a 	mov	r21,zero
    4448:	0023883a 	mov	r17,zero
    444c:	003f5606 	br	41a8 <__alt_mem_Flash_flash_data+0xf40041a8>
    4450:	51bfffc4 	addi	r6,r10,-1
    4454:	300490fa 	slli	r2,r6,3
    4458:	00c000b4 	movhi	r3,2
    445c:	18e5eb04 	addi	r3,r3,-26708
    4460:	1885883a 	add	r2,r3,r2
    4464:	d9c00e17 	ldw	r7,56(sp)
    4468:	11000017 	ldw	r4,0(r2)
    446c:	11400117 	ldw	r5,4(r2)
    4470:	d8800717 	ldw	r2,28(sp)
    4474:	d9801015 	stw	r6,64(sp)
    4478:	880d883a 	mov	r6,r17
    447c:	da801615 	stw	r10,88(sp)
    4480:	15c00044 	addi	r23,r2,1
    4484:	000bd800 	call	bd80 <__muldf3>
    4488:	a80b883a 	mov	r5,r21
    448c:	a009883a 	mov	r4,r20
    4490:	d8c01115 	stw	r3,68(sp)
    4494:	d8800e15 	stw	r2,56(sp)
    4498:	000cd740 	call	cd74 <__fixdfsi>
    449c:	1009883a 	mov	r4,r2
    44a0:	1023883a 	mov	r17,r2
    44a4:	000cdfc0 	call	cdfc <__floatsidf>
    44a8:	a009883a 	mov	r4,r20
    44ac:	a80b883a 	mov	r5,r21
    44b0:	100d883a 	mov	r6,r2
    44b4:	180f883a 	mov	r7,r3
    44b8:	000c4a40 	call	c4a4 <__subdf3>
    44bc:	1813883a 	mov	r9,r3
    44c0:	d8c00717 	ldw	r3,28(sp)
    44c4:	8c400c04 	addi	r17,r17,48
    44c8:	1011883a 	mov	r8,r2
    44cc:	1c400005 	stb	r17,0(r3)
    44d0:	da801617 	ldw	r10,88(sp)
    44d4:	00800044 	movi	r2,1
    44d8:	50802326 	beq	r10,r2,4568 <_dtoa_r+0x14ac>
    44dc:	d8800717 	ldw	r2,28(sp)
    44e0:	b82b883a 	mov	r21,r23
    44e4:	dc001315 	stw	r16,76(sp)
    44e8:	12a9883a 	add	r20,r2,r10
    44ec:	4807883a 	mov	r3,r9
    44f0:	4005883a 	mov	r2,r8
    44f4:	dc801415 	stw	r18,80(sp)
    44f8:	000d883a 	mov	r6,zero
    44fc:	01d00934 	movhi	r7,16420
    4500:	1009883a 	mov	r4,r2
    4504:	180b883a 	mov	r5,r3
    4508:	000bd800 	call	bd80 <__muldf3>
    450c:	180b883a 	mov	r5,r3
    4510:	1009883a 	mov	r4,r2
    4514:	1821883a 	mov	r16,r3
    4518:	1025883a 	mov	r18,r2
    451c:	000cd740 	call	cd74 <__fixdfsi>
    4520:	1009883a 	mov	r4,r2
    4524:	1023883a 	mov	r17,r2
    4528:	000cdfc0 	call	cdfc <__floatsidf>
    452c:	9009883a 	mov	r4,r18
    4530:	800b883a 	mov	r5,r16
    4534:	100d883a 	mov	r6,r2
    4538:	180f883a 	mov	r7,r3
    453c:	8c400c04 	addi	r17,r17,48
    4540:	000c4a40 	call	c4a4 <__subdf3>
    4544:	ad400044 	addi	r21,r21,1
    4548:	ac7fffc5 	stb	r17,-1(r21)
    454c:	ad3fea1e 	bne	r21,r20,44f8 <__alt_mem_Flash_flash_data+0xf40044f8>
    4550:	1813883a 	mov	r9,r3
    4554:	d8c01017 	ldw	r3,64(sp)
    4558:	dc001317 	ldw	r16,76(sp)
    455c:	dc801417 	ldw	r18,80(sp)
    4560:	1011883a 	mov	r8,r2
    4564:	b8ef883a 	add	r23,r23,r3
    4568:	d9000e17 	ldw	r4,56(sp)
    456c:	d9401117 	ldw	r5,68(sp)
    4570:	000d883a 	mov	r6,zero
    4574:	01cff834 	movhi	r7,16352
    4578:	da001715 	stw	r8,92(sp)
    457c:	da401515 	stw	r9,84(sp)
    4580:	000a9d40 	call	a9d4 <__adddf3>
    4584:	da001717 	ldw	r8,92(sp)
    4588:	da401517 	ldw	r9,84(sp)
    458c:	1009883a 	mov	r4,r2
    4590:	400d883a 	mov	r6,r8
    4594:	480f883a 	mov	r7,r9
    4598:	180b883a 	mov	r5,r3
    459c:	000bca00 	call	bca0 <__ledf2>
    45a0:	da001717 	ldw	r8,92(sp)
    45a4:	da401517 	ldw	r9,84(sp)
    45a8:	10003b0e 	bge	r2,zero,4698 <_dtoa_r+0x15dc>
    45ac:	d9001217 	ldw	r4,72(sp)
    45b0:	bd7fffc3 	ldbu	r21,-1(r23)
    45b4:	d9000515 	stw	r4,20(sp)
    45b8:	003d1c06 	br	3a2c <__alt_mem_Flash_flash_data+0xf4003a2c>
    45bc:	d8c00817 	ldw	r3,32(sp)
    45c0:	18a9c83a 	sub	r20,r3,r2
    45c4:	0005883a 	mov	r2,zero
    45c8:	003d3706 	br	3aa8 <__alt_mem_Flash_flash_data+0xf4003aa8>
    45cc:	00800044 	movi	r2,1
    45d0:	003dd006 	br	3d14 <__alt_mem_Flash_flash_data+0xf4003d14>
    45d4:	d8c00217 	ldw	r3,8(sp)
    45d8:	00800d84 	movi	r2,54
    45dc:	dd400917 	ldw	r21,36(sp)
    45e0:	10c5c83a 	sub	r2,r2,r3
    45e4:	dd000817 	ldw	r20,32(sp)
    45e8:	003d2f06 	br	3aa8 <__alt_mem_Flash_flash_data+0xf4003aa8>
    45ec:	9029883a 	mov	r20,r18
    45f0:	982b883a 	mov	r21,r19
    45f4:	04400084 	movi	r17,2
    45f8:	003bc606 	br	3514 <__alt_mem_Flash_flash_data+0xf4003514>
    45fc:	d8800617 	ldw	r2,24(sp)
    4600:	103efc26 	beq	r2,zero,41f4 <__alt_mem_Flash_flash_data+0xf40041f4>
    4604:	d8c00c17 	ldw	r3,48(sp)
    4608:	00fc890e 	bge	zero,r3,3830 <__alt_mem_Flash_flash_data+0xf4003830>
    460c:	a80b883a 	mov	r5,r21
    4610:	a009883a 	mov	r4,r20
    4614:	000d883a 	mov	r6,zero
    4618:	01d00934 	movhi	r7,16420
    461c:	000bd800 	call	bd80 <__muldf3>
    4620:	89000044 	addi	r4,r17,1
    4624:	1029883a 	mov	r20,r2
    4628:	182b883a 	mov	r21,r3
    462c:	000cdfc0 	call	cdfc <__floatsidf>
    4630:	a009883a 	mov	r4,r20
    4634:	a80b883a 	mov	r5,r21
    4638:	100d883a 	mov	r6,r2
    463c:	180f883a 	mov	r7,r3
    4640:	000bd800 	call	bd80 <__muldf3>
    4644:	1009883a 	mov	r4,r2
    4648:	180b883a 	mov	r5,r3
    464c:	000d883a 	mov	r6,zero
    4650:	01d00734 	movhi	r7,16412
    4654:	000a9d40 	call	a9d4 <__adddf3>
    4658:	d9000517 	ldw	r4,20(sp)
    465c:	1023883a 	mov	r17,r2
    4660:	00bf3034 	movhi	r2,64704
    4664:	213fffc4 	addi	r4,r4,-1
    4668:	1885883a 	add	r2,r3,r2
    466c:	d9001215 	stw	r4,72(sp)
    4670:	d8800e15 	stw	r2,56(sp)
    4674:	da800c17 	ldw	r10,48(sp)
    4678:	003bc306 	br	3588 <__alt_mem_Flash_flash_data+0xf4003588>
    467c:	b039883a 	mov	fp,r22
    4680:	01000e44 	movi	r4,57
    4684:	8825883a 	mov	r18,r17
    4688:	9dc00044 	addi	r23,r19,1
    468c:	99000005 	stb	r4,0(r19)
    4690:	a023883a 	mov	r17,r20
    4694:	003dae06 	br	3d50 <__alt_mem_Flash_flash_data+0xf4003d50>
    4698:	d9800e17 	ldw	r6,56(sp)
    469c:	d9c01117 	ldw	r7,68(sp)
    46a0:	0009883a 	mov	r4,zero
    46a4:	014ff834 	movhi	r5,16352
    46a8:	da001715 	stw	r8,92(sp)
    46ac:	da401515 	stw	r9,84(sp)
    46b0:	000c4a40 	call	c4a4 <__subdf3>
    46b4:	da001717 	ldw	r8,92(sp)
    46b8:	da401517 	ldw	r9,84(sp)
    46bc:	1009883a 	mov	r4,r2
    46c0:	180b883a 	mov	r5,r3
    46c4:	400d883a 	mov	r6,r8
    46c8:	480f883a 	mov	r7,r9
    46cc:	000bbc00 	call	bbc0 <__gedf2>
    46d0:	00bc570e 	bge	zero,r2,3830 <__alt_mem_Flash_flash_data+0xf4003830>
    46d4:	01000c04 	movi	r4,48
    46d8:	00000106 	br	46e0 <_dtoa_r+0x1624>
    46dc:	102f883a 	mov	r23,r2
    46e0:	b8bfffc4 	addi	r2,r23,-1
    46e4:	10c00007 	ldb	r3,0(r2)
    46e8:	193ffc26 	beq	r3,r4,46dc <__alt_mem_Flash_flash_data+0xf40046dc>
    46ec:	d9801217 	ldw	r6,72(sp)
    46f0:	d9800515 	stw	r6,20(sp)
    46f4:	003c1f06 	br	3774 <__alt_mem_Flash_flash_data+0xf4003774>
    46f8:	d8801217 	ldw	r2,72(sp)
    46fc:	dc001117 	ldw	r16,68(sp)
    4700:	d8800515 	stw	r2,20(sp)
    4704:	003cc906 	br	3a2c <__alt_mem_Flash_flash_data+0xf4003a2c>
    4708:	dd801317 	ldw	r22,76(sp)
    470c:	dc001117 	ldw	r16,68(sp)
    4710:	dcc01417 	ldw	r19,80(sp)
    4714:	dc801017 	ldw	r18,64(sp)
    4718:	003c4506 	br	3830 <__alt_mem_Flash_flash_data+0xf4003830>
    471c:	103e5d1e 	bne	r2,zero,4094 <__alt_mem_Flash_flash_data+0xf4004094>
    4720:	4080004c 	andi	r2,r8,1
    4724:	103e5b26 	beq	r2,zero,4094 <__alt_mem_Flash_flash_data+0xf4004094>
    4728:	003e5706 	br	4088 <__alt_mem_Flash_flash_data+0xf4004088>
    472c:	d8c00317 	ldw	r3,12(sp)
    4730:	00800084 	movi	r2,2
    4734:	10c00a16 	blt	r2,r3,4760 <_dtoa_r+0x16a4>
    4738:	d9000c17 	ldw	r4,48(sp)
    473c:	003e8306 	br	414c <__alt_mem_Flash_flash_data+0xf400414c>
    4740:	04400084 	movi	r17,2
    4744:	003b7306 	br	3514 <__alt_mem_Flash_flash_data+0xf4003514>
    4748:	d9801217 	ldw	r6,72(sp)
    474c:	d9800515 	stw	r6,20(sp)
    4750:	003cb606 	br	3a2c <__alt_mem_Flash_flash_data+0xf4003a2c>
    4754:	d9001217 	ldw	r4,72(sp)
    4758:	d9000515 	stw	r4,20(sp)
    475c:	003c0506 	br	3774 <__alt_mem_Flash_flash_data+0xf4003774>
    4760:	d9800c17 	ldw	r6,48(sp)
    4764:	d9800615 	stw	r6,24(sp)
    4768:	003e8306 	br	4178 <__alt_mem_Flash_flash_data+0xf4004178>
    476c:	d9800317 	ldw	r6,12(sp)
    4770:	00800084 	movi	r2,2
    4774:	11800216 	blt	r2,r6,4780 <_dtoa_r+0x16c4>
    4778:	d8800c17 	ldw	r2,48(sp)
    477c:	003da606 	br	3e18 <__alt_mem_Flash_flash_data+0xf4003e18>
    4780:	d8800c17 	ldw	r2,48(sp)
    4784:	d8800615 	stw	r2,24(sp)
    4788:	003e7b06 	br	4178 <__alt_mem_Flash_flash_data+0xf4004178>
    478c:	05000044 	movi	r20,1
    4790:	003b0506 	br	33a8 <__alt_mem_Flash_flash_data+0xf40033a8>
    4794:	8009883a 	mov	r4,r16
    4798:	80001115 	stw	zero,68(r16)
    479c:	000b883a 	mov	r5,zero
    47a0:	00061380 	call	6138 <_Balloc>
    47a4:	d8800715 	stw	r2,28(sp)
    47a8:	d8c00717 	ldw	r3,28(sp)
    47ac:	00bfffc4 	movi	r2,-1
    47b0:	01000044 	movi	r4,1
    47b4:	d8800c15 	stw	r2,48(sp)
    47b8:	80c01015 	stw	r3,64(r16)
    47bc:	d9000b15 	stw	r4,44(sp)
    47c0:	d8800615 	stw	r2,24(sp)
    47c4:	d8002215 	stw	zero,136(sp)
    47c8:	003c1906 	br	3830 <__alt_mem_Flash_flash_data+0xf4003830>
    47cc:	193d2926 	beq	r3,r4,3c74 <__alt_mem_Flash_flash_data+0xf4003c74>
    47d0:	00c00f04 	movi	r3,60
    47d4:	1885c83a 	sub	r2,r3,r2
    47d8:	003d7b06 	br	3dc8 <__alt_mem_Flash_flash_data+0xf4003dc8>
    47dc:	000b883a 	mov	r5,zero
    47e0:	003b1006 	br	3424 <__alt_mem_Flash_flash_data+0xf4003424>

000047e4 <__sflush_r>:
    47e4:	2880030b 	ldhu	r2,12(r5)
    47e8:	defffb04 	addi	sp,sp,-20
    47ec:	dcc00315 	stw	r19,12(sp)
    47f0:	dc400115 	stw	r17,4(sp)
    47f4:	dfc00415 	stw	ra,16(sp)
    47f8:	dc800215 	stw	r18,8(sp)
    47fc:	dc000015 	stw	r16,0(sp)
    4800:	10c0020c 	andi	r3,r2,8
    4804:	2823883a 	mov	r17,r5
    4808:	2027883a 	mov	r19,r4
    480c:	1800311e 	bne	r3,zero,48d4 <__sflush_r+0xf0>
    4810:	28c00117 	ldw	r3,4(r5)
    4814:	10820014 	ori	r2,r2,2048
    4818:	2880030d 	sth	r2,12(r5)
    481c:	00c04b0e 	bge	zero,r3,494c <__sflush_r+0x168>
    4820:	8a000a17 	ldw	r8,40(r17)
    4824:	40002326 	beq	r8,zero,48b4 <__sflush_r+0xd0>
    4828:	9c000017 	ldw	r16,0(r19)
    482c:	10c4000c 	andi	r3,r2,4096
    4830:	98000015 	stw	zero,0(r19)
    4834:	18004826 	beq	r3,zero,4958 <__sflush_r+0x174>
    4838:	89801417 	ldw	r6,80(r17)
    483c:	10c0010c 	andi	r3,r2,4
    4840:	18000626 	beq	r3,zero,485c <__sflush_r+0x78>
    4844:	88c00117 	ldw	r3,4(r17)
    4848:	88800c17 	ldw	r2,48(r17)
    484c:	30cdc83a 	sub	r6,r6,r3
    4850:	10000226 	beq	r2,zero,485c <__sflush_r+0x78>
    4854:	88800f17 	ldw	r2,60(r17)
    4858:	308dc83a 	sub	r6,r6,r2
    485c:	89400717 	ldw	r5,28(r17)
    4860:	9809883a 	mov	r4,r19
    4864:	000f883a 	mov	r7,zero
    4868:	403ee83a 	callr	r8
    486c:	00ffffc4 	movi	r3,-1
    4870:	10c04426 	beq	r2,r3,4984 <__sflush_r+0x1a0>
    4874:	88c0030b 	ldhu	r3,12(r17)
    4878:	89000417 	ldw	r4,16(r17)
    487c:	88000115 	stw	zero,4(r17)
    4880:	197dffcc 	andi	r5,r3,63487
    4884:	8940030d 	sth	r5,12(r17)
    4888:	89000015 	stw	r4,0(r17)
    488c:	18c4000c 	andi	r3,r3,4096
    4890:	18002c1e 	bne	r3,zero,4944 <__sflush_r+0x160>
    4894:	89400c17 	ldw	r5,48(r17)
    4898:	9c000015 	stw	r16,0(r19)
    489c:	28000526 	beq	r5,zero,48b4 <__sflush_r+0xd0>
    48a0:	88801004 	addi	r2,r17,64
    48a4:	28800226 	beq	r5,r2,48b0 <__sflush_r+0xcc>
    48a8:	9809883a 	mov	r4,r19
    48ac:	0004f3c0 	call	4f3c <_free_r>
    48b0:	88000c15 	stw	zero,48(r17)
    48b4:	0005883a 	mov	r2,zero
    48b8:	dfc00417 	ldw	ra,16(sp)
    48bc:	dcc00317 	ldw	r19,12(sp)
    48c0:	dc800217 	ldw	r18,8(sp)
    48c4:	dc400117 	ldw	r17,4(sp)
    48c8:	dc000017 	ldw	r16,0(sp)
    48cc:	dec00504 	addi	sp,sp,20
    48d0:	f800283a 	ret
    48d4:	2c800417 	ldw	r18,16(r5)
    48d8:	903ff626 	beq	r18,zero,48b4 <__alt_mem_Flash_flash_data+0xf40048b4>
    48dc:	2c000017 	ldw	r16,0(r5)
    48e0:	108000cc 	andi	r2,r2,3
    48e4:	2c800015 	stw	r18,0(r5)
    48e8:	84a1c83a 	sub	r16,r16,r18
    48ec:	1000131e 	bne	r2,zero,493c <__sflush_r+0x158>
    48f0:	28800517 	ldw	r2,20(r5)
    48f4:	88800215 	stw	r2,8(r17)
    48f8:	04000316 	blt	zero,r16,4908 <__sflush_r+0x124>
    48fc:	003fed06 	br	48b4 <__alt_mem_Flash_flash_data+0xf40048b4>
    4900:	90a5883a 	add	r18,r18,r2
    4904:	043feb0e 	bge	zero,r16,48b4 <__alt_mem_Flash_flash_data+0xf40048b4>
    4908:	88800917 	ldw	r2,36(r17)
    490c:	89400717 	ldw	r5,28(r17)
    4910:	800f883a 	mov	r7,r16
    4914:	900d883a 	mov	r6,r18
    4918:	9809883a 	mov	r4,r19
    491c:	103ee83a 	callr	r2
    4920:	80a1c83a 	sub	r16,r16,r2
    4924:	00bff616 	blt	zero,r2,4900 <__alt_mem_Flash_flash_data+0xf4004900>
    4928:	88c0030b 	ldhu	r3,12(r17)
    492c:	00bfffc4 	movi	r2,-1
    4930:	18c01014 	ori	r3,r3,64
    4934:	88c0030d 	sth	r3,12(r17)
    4938:	003fdf06 	br	48b8 <__alt_mem_Flash_flash_data+0xf40048b8>
    493c:	0005883a 	mov	r2,zero
    4940:	003fec06 	br	48f4 <__alt_mem_Flash_flash_data+0xf40048f4>
    4944:	88801415 	stw	r2,80(r17)
    4948:	003fd206 	br	4894 <__alt_mem_Flash_flash_data+0xf4004894>
    494c:	28c00f17 	ldw	r3,60(r5)
    4950:	00ffb316 	blt	zero,r3,4820 <__alt_mem_Flash_flash_data+0xf4004820>
    4954:	003fd706 	br	48b4 <__alt_mem_Flash_flash_data+0xf40048b4>
    4958:	89400717 	ldw	r5,28(r17)
    495c:	000d883a 	mov	r6,zero
    4960:	9809883a 	mov	r4,r19
    4964:	01c00044 	movi	r7,1
    4968:	403ee83a 	callr	r8
    496c:	100d883a 	mov	r6,r2
    4970:	00bfffc4 	movi	r2,-1
    4974:	30801426 	beq	r6,r2,49c8 <__sflush_r+0x1e4>
    4978:	8880030b 	ldhu	r2,12(r17)
    497c:	8a000a17 	ldw	r8,40(r17)
    4980:	003fae06 	br	483c <__alt_mem_Flash_flash_data+0xf400483c>
    4984:	98c00017 	ldw	r3,0(r19)
    4988:	183fba26 	beq	r3,zero,4874 <__alt_mem_Flash_flash_data+0xf4004874>
    498c:	01000744 	movi	r4,29
    4990:	19000626 	beq	r3,r4,49ac <__sflush_r+0x1c8>
    4994:	01000584 	movi	r4,22
    4998:	19000426 	beq	r3,r4,49ac <__sflush_r+0x1c8>
    499c:	88c0030b 	ldhu	r3,12(r17)
    49a0:	18c01014 	ori	r3,r3,64
    49a4:	88c0030d 	sth	r3,12(r17)
    49a8:	003fc306 	br	48b8 <__alt_mem_Flash_flash_data+0xf40048b8>
    49ac:	8880030b 	ldhu	r2,12(r17)
    49b0:	88c00417 	ldw	r3,16(r17)
    49b4:	88000115 	stw	zero,4(r17)
    49b8:	10bdffcc 	andi	r2,r2,63487
    49bc:	8880030d 	sth	r2,12(r17)
    49c0:	88c00015 	stw	r3,0(r17)
    49c4:	003fb306 	br	4894 <__alt_mem_Flash_flash_data+0xf4004894>
    49c8:	98800017 	ldw	r2,0(r19)
    49cc:	103fea26 	beq	r2,zero,4978 <__alt_mem_Flash_flash_data+0xf4004978>
    49d0:	00c00744 	movi	r3,29
    49d4:	10c00226 	beq	r2,r3,49e0 <__sflush_r+0x1fc>
    49d8:	00c00584 	movi	r3,22
    49dc:	10ffd21e 	bne	r2,r3,4928 <__alt_mem_Flash_flash_data+0xf4004928>
    49e0:	9c000015 	stw	r16,0(r19)
    49e4:	0005883a 	mov	r2,zero
    49e8:	003fb306 	br	48b8 <__alt_mem_Flash_flash_data+0xf40048b8>

000049ec <_fflush_r>:
    49ec:	defffd04 	addi	sp,sp,-12
    49f0:	dc000115 	stw	r16,4(sp)
    49f4:	dfc00215 	stw	ra,8(sp)
    49f8:	2021883a 	mov	r16,r4
    49fc:	20000226 	beq	r4,zero,4a08 <_fflush_r+0x1c>
    4a00:	20800e17 	ldw	r2,56(r4)
    4a04:	10000c26 	beq	r2,zero,4a38 <_fflush_r+0x4c>
    4a08:	2880030f 	ldh	r2,12(r5)
    4a0c:	1000051e 	bne	r2,zero,4a24 <_fflush_r+0x38>
    4a10:	0005883a 	mov	r2,zero
    4a14:	dfc00217 	ldw	ra,8(sp)
    4a18:	dc000117 	ldw	r16,4(sp)
    4a1c:	dec00304 	addi	sp,sp,12
    4a20:	f800283a 	ret
    4a24:	8009883a 	mov	r4,r16
    4a28:	dfc00217 	ldw	ra,8(sp)
    4a2c:	dc000117 	ldw	r16,4(sp)
    4a30:	dec00304 	addi	sp,sp,12
    4a34:	00047e41 	jmpi	47e4 <__sflush_r>
    4a38:	d9400015 	stw	r5,0(sp)
    4a3c:	0004dc80 	call	4dc8 <__sinit>
    4a40:	d9400017 	ldw	r5,0(sp)
    4a44:	003ff006 	br	4a08 <__alt_mem_Flash_flash_data+0xf4004a08>

00004a48 <fflush>:
    4a48:	20000526 	beq	r4,zero,4a60 <fflush+0x18>
    4a4c:	008000b4 	movhi	r2,2
    4a50:	10aeba04 	addi	r2,r2,-17688
    4a54:	200b883a 	mov	r5,r4
    4a58:	11000017 	ldw	r4,0(r2)
    4a5c:	00049ec1 	jmpi	49ec <_fflush_r>
    4a60:	008000b4 	movhi	r2,2
    4a64:	10aeb904 	addi	r2,r2,-17692
    4a68:	11000017 	ldw	r4,0(r2)
    4a6c:	01400034 	movhi	r5,0
    4a70:	29527b04 	addi	r5,r5,18924
    4a74:	00052f01 	jmpi	52f0 <_fwalk_reent>

00004a78 <__fp_lock>:
    4a78:	0005883a 	mov	r2,zero
    4a7c:	f800283a 	ret

00004a80 <__fp_unlock>:
    4a80:	0005883a 	mov	r2,zero
    4a84:	f800283a 	ret

00004a88 <_cleanup_r>:
    4a88:	01400074 	movhi	r5,1
    4a8c:	29629404 	addi	r5,r5,-30128
    4a90:	00052f01 	jmpi	52f0 <_fwalk_reent>

00004a94 <__sinit.part.1>:
    4a94:	defff704 	addi	sp,sp,-36
    4a98:	00c00034 	movhi	r3,0
    4a9c:	dfc00815 	stw	ra,32(sp)
    4aa0:	ddc00715 	stw	r23,28(sp)
    4aa4:	dd800615 	stw	r22,24(sp)
    4aa8:	dd400515 	stw	r21,20(sp)
    4aac:	dd000415 	stw	r20,16(sp)
    4ab0:	dcc00315 	stw	r19,12(sp)
    4ab4:	dc800215 	stw	r18,8(sp)
    4ab8:	dc400115 	stw	r17,4(sp)
    4abc:	dc000015 	stw	r16,0(sp)
    4ac0:	18d2a204 	addi	r3,r3,19080
    4ac4:	24000117 	ldw	r16,4(r4)
    4ac8:	20c00f15 	stw	r3,60(r4)
    4acc:	2080bb04 	addi	r2,r4,748
    4ad0:	00c000c4 	movi	r3,3
    4ad4:	20c0b915 	stw	r3,740(r4)
    4ad8:	2080ba15 	stw	r2,744(r4)
    4adc:	2000b815 	stw	zero,736(r4)
    4ae0:	05c00204 	movi	r23,8
    4ae4:	00800104 	movi	r2,4
    4ae8:	2025883a 	mov	r18,r4
    4aec:	b80d883a 	mov	r6,r23
    4af0:	81001704 	addi	r4,r16,92
    4af4:	000b883a 	mov	r5,zero
    4af8:	80000015 	stw	zero,0(r16)
    4afc:	80000115 	stw	zero,4(r16)
    4b00:	80000215 	stw	zero,8(r16)
    4b04:	8080030d 	sth	r2,12(r16)
    4b08:	80001915 	stw	zero,100(r16)
    4b0c:	8000038d 	sth	zero,14(r16)
    4b10:	80000415 	stw	zero,16(r16)
    4b14:	80000515 	stw	zero,20(r16)
    4b18:	80000615 	stw	zero,24(r16)
    4b1c:	00060140 	call	6014 <memset>
    4b20:	05800034 	movhi	r22,0
    4b24:	94400217 	ldw	r17,8(r18)
    4b28:	05400034 	movhi	r21,0
    4b2c:	05000034 	movhi	r20,0
    4b30:	04c00034 	movhi	r19,0
    4b34:	b59c6804 	addi	r22,r22,29088
    4b38:	ad5c7f04 	addi	r21,r21,29180
    4b3c:	a51c9e04 	addi	r20,r20,29304
    4b40:	9cdcb504 	addi	r19,r19,29396
    4b44:	85800815 	stw	r22,32(r16)
    4b48:	85400915 	stw	r21,36(r16)
    4b4c:	85000a15 	stw	r20,40(r16)
    4b50:	84c00b15 	stw	r19,44(r16)
    4b54:	84000715 	stw	r16,28(r16)
    4b58:	00800284 	movi	r2,10
    4b5c:	8880030d 	sth	r2,12(r17)
    4b60:	00800044 	movi	r2,1
    4b64:	89001704 	addi	r4,r17,92
    4b68:	b80d883a 	mov	r6,r23
    4b6c:	000b883a 	mov	r5,zero
    4b70:	88000015 	stw	zero,0(r17)
    4b74:	88000115 	stw	zero,4(r17)
    4b78:	88000215 	stw	zero,8(r17)
    4b7c:	88001915 	stw	zero,100(r17)
    4b80:	8880038d 	sth	r2,14(r17)
    4b84:	88000415 	stw	zero,16(r17)
    4b88:	88000515 	stw	zero,20(r17)
    4b8c:	88000615 	stw	zero,24(r17)
    4b90:	00060140 	call	6014 <memset>
    4b94:	94000317 	ldw	r16,12(r18)
    4b98:	00800484 	movi	r2,18
    4b9c:	8c400715 	stw	r17,28(r17)
    4ba0:	8d800815 	stw	r22,32(r17)
    4ba4:	8d400915 	stw	r21,36(r17)
    4ba8:	8d000a15 	stw	r20,40(r17)
    4bac:	8cc00b15 	stw	r19,44(r17)
    4bb0:	8080030d 	sth	r2,12(r16)
    4bb4:	00800084 	movi	r2,2
    4bb8:	80000015 	stw	zero,0(r16)
    4bbc:	80000115 	stw	zero,4(r16)
    4bc0:	80000215 	stw	zero,8(r16)
    4bc4:	80001915 	stw	zero,100(r16)
    4bc8:	8080038d 	sth	r2,14(r16)
    4bcc:	80000415 	stw	zero,16(r16)
    4bd0:	80000515 	stw	zero,20(r16)
    4bd4:	80000615 	stw	zero,24(r16)
    4bd8:	81001704 	addi	r4,r16,92
    4bdc:	000b883a 	mov	r5,zero
    4be0:	b80d883a 	mov	r6,r23
    4be4:	00060140 	call	6014 <memset>
    4be8:	00800044 	movi	r2,1
    4bec:	84000715 	stw	r16,28(r16)
    4bf0:	85800815 	stw	r22,32(r16)
    4bf4:	85400915 	stw	r21,36(r16)
    4bf8:	85000a15 	stw	r20,40(r16)
    4bfc:	84c00b15 	stw	r19,44(r16)
    4c00:	90800e15 	stw	r2,56(r18)
    4c04:	dfc00817 	ldw	ra,32(sp)
    4c08:	ddc00717 	ldw	r23,28(sp)
    4c0c:	dd800617 	ldw	r22,24(sp)
    4c10:	dd400517 	ldw	r21,20(sp)
    4c14:	dd000417 	ldw	r20,16(sp)
    4c18:	dcc00317 	ldw	r19,12(sp)
    4c1c:	dc800217 	ldw	r18,8(sp)
    4c20:	dc400117 	ldw	r17,4(sp)
    4c24:	dc000017 	ldw	r16,0(sp)
    4c28:	dec00904 	addi	sp,sp,36
    4c2c:	f800283a 	ret

00004c30 <__sfmoreglue>:
    4c30:	defffc04 	addi	sp,sp,-16
    4c34:	dc400115 	stw	r17,4(sp)
    4c38:	2c7fffc4 	addi	r17,r5,-1
    4c3c:	8c401a24 	muli	r17,r17,104
    4c40:	dc800215 	stw	r18,8(sp)
    4c44:	2825883a 	mov	r18,r5
    4c48:	89401d04 	addi	r5,r17,116
    4c4c:	dc000015 	stw	r16,0(sp)
    4c50:	dfc00315 	stw	ra,12(sp)
    4c54:	000564c0 	call	564c <_malloc_r>
    4c58:	1021883a 	mov	r16,r2
    4c5c:	10000726 	beq	r2,zero,4c7c <__sfmoreglue+0x4c>
    4c60:	11000304 	addi	r4,r2,12
    4c64:	10000015 	stw	zero,0(r2)
    4c68:	14800115 	stw	r18,4(r2)
    4c6c:	11000215 	stw	r4,8(r2)
    4c70:	000b883a 	mov	r5,zero
    4c74:	89801a04 	addi	r6,r17,104
    4c78:	00060140 	call	6014 <memset>
    4c7c:	8005883a 	mov	r2,r16
    4c80:	dfc00317 	ldw	ra,12(sp)
    4c84:	dc800217 	ldw	r18,8(sp)
    4c88:	dc400117 	ldw	r17,4(sp)
    4c8c:	dc000017 	ldw	r16,0(sp)
    4c90:	dec00404 	addi	sp,sp,16
    4c94:	f800283a 	ret

00004c98 <__sfp>:
    4c98:	008000b4 	movhi	r2,2
    4c9c:	defffb04 	addi	sp,sp,-20
    4ca0:	10aeb904 	addi	r2,r2,-17692
    4ca4:	dc800215 	stw	r18,8(sp)
    4ca8:	14800017 	ldw	r18,0(r2)
    4cac:	dcc00315 	stw	r19,12(sp)
    4cb0:	dfc00415 	stw	ra,16(sp)
    4cb4:	90800e17 	ldw	r2,56(r18)
    4cb8:	dc400115 	stw	r17,4(sp)
    4cbc:	dc000015 	stw	r16,0(sp)
    4cc0:	2027883a 	mov	r19,r4
    4cc4:	1000021e 	bne	r2,zero,4cd0 <__sfp+0x38>
    4cc8:	9009883a 	mov	r4,r18
    4ccc:	0004a940 	call	4a94 <__sinit.part.1>
    4cd0:	9480b804 	addi	r18,r18,736
    4cd4:	047fffc4 	movi	r17,-1
    4cd8:	91400117 	ldw	r5,4(r18)
    4cdc:	94000217 	ldw	r16,8(r18)
    4ce0:	297fffc4 	addi	r5,r5,-1
    4ce4:	28000a16 	blt	r5,zero,4d10 <__sfp+0x78>
    4ce8:	8080030f 	ldh	r2,12(r16)
    4cec:	10000c26 	beq	r2,zero,4d20 <__sfp+0x88>
    4cf0:	80c01d04 	addi	r3,r16,116
    4cf4:	00000206 	br	4d00 <__sfp+0x68>
    4cf8:	18bfe60f 	ldh	r2,-104(r3)
    4cfc:	10000826 	beq	r2,zero,4d20 <__sfp+0x88>
    4d00:	297fffc4 	addi	r5,r5,-1
    4d04:	1c3ffd04 	addi	r16,r3,-12
    4d08:	18c01a04 	addi	r3,r3,104
    4d0c:	2c7ffa1e 	bne	r5,r17,4cf8 <__alt_mem_Flash_flash_data+0xf4004cf8>
    4d10:	90800017 	ldw	r2,0(r18)
    4d14:	10001d26 	beq	r2,zero,4d8c <__sfp+0xf4>
    4d18:	1025883a 	mov	r18,r2
    4d1c:	003fee06 	br	4cd8 <__alt_mem_Flash_flash_data+0xf4004cd8>
    4d20:	00bfffc4 	movi	r2,-1
    4d24:	8080038d 	sth	r2,14(r16)
    4d28:	00800044 	movi	r2,1
    4d2c:	8080030d 	sth	r2,12(r16)
    4d30:	80001915 	stw	zero,100(r16)
    4d34:	80000015 	stw	zero,0(r16)
    4d38:	80000215 	stw	zero,8(r16)
    4d3c:	80000115 	stw	zero,4(r16)
    4d40:	80000415 	stw	zero,16(r16)
    4d44:	80000515 	stw	zero,20(r16)
    4d48:	80000615 	stw	zero,24(r16)
    4d4c:	81001704 	addi	r4,r16,92
    4d50:	000b883a 	mov	r5,zero
    4d54:	01800204 	movi	r6,8
    4d58:	00060140 	call	6014 <memset>
    4d5c:	8005883a 	mov	r2,r16
    4d60:	80000c15 	stw	zero,48(r16)
    4d64:	80000d15 	stw	zero,52(r16)
    4d68:	80001115 	stw	zero,68(r16)
    4d6c:	80001215 	stw	zero,72(r16)
    4d70:	dfc00417 	ldw	ra,16(sp)
    4d74:	dcc00317 	ldw	r19,12(sp)
    4d78:	dc800217 	ldw	r18,8(sp)
    4d7c:	dc400117 	ldw	r17,4(sp)
    4d80:	dc000017 	ldw	r16,0(sp)
    4d84:	dec00504 	addi	sp,sp,20
    4d88:	f800283a 	ret
    4d8c:	9809883a 	mov	r4,r19
    4d90:	01400104 	movi	r5,4
    4d94:	0004c300 	call	4c30 <__sfmoreglue>
    4d98:	90800015 	stw	r2,0(r18)
    4d9c:	103fde1e 	bne	r2,zero,4d18 <__alt_mem_Flash_flash_data+0xf4004d18>
    4da0:	00800304 	movi	r2,12
    4da4:	98800015 	stw	r2,0(r19)
    4da8:	0005883a 	mov	r2,zero
    4dac:	003ff006 	br	4d70 <__alt_mem_Flash_flash_data+0xf4004d70>

00004db0 <_cleanup>:
    4db0:	008000b4 	movhi	r2,2
    4db4:	10aeb904 	addi	r2,r2,-17692
    4db8:	11000017 	ldw	r4,0(r2)
    4dbc:	01400074 	movhi	r5,1
    4dc0:	29629404 	addi	r5,r5,-30128
    4dc4:	00052f01 	jmpi	52f0 <_fwalk_reent>

00004dc8 <__sinit>:
    4dc8:	20800e17 	ldw	r2,56(r4)
    4dcc:	10000126 	beq	r2,zero,4dd4 <__sinit+0xc>
    4dd0:	f800283a 	ret
    4dd4:	0004a941 	jmpi	4a94 <__sinit.part.1>

00004dd8 <__sfp_lock_acquire>:
    4dd8:	f800283a 	ret

00004ddc <__sfp_lock_release>:
    4ddc:	f800283a 	ret

00004de0 <__sinit_lock_acquire>:
    4de0:	f800283a 	ret

00004de4 <__sinit_lock_release>:
    4de4:	f800283a 	ret

00004de8 <__fp_lock_all>:
    4de8:	008000b4 	movhi	r2,2
    4dec:	10aeba04 	addi	r2,r2,-17688
    4df0:	11000017 	ldw	r4,0(r2)
    4df4:	01400034 	movhi	r5,0
    4df8:	29529e04 	addi	r5,r5,19064
    4dfc:	000522c1 	jmpi	522c <_fwalk>

00004e00 <__fp_unlock_all>:
    4e00:	008000b4 	movhi	r2,2
    4e04:	10aeba04 	addi	r2,r2,-17688
    4e08:	11000017 	ldw	r4,0(r2)
    4e0c:	01400034 	movhi	r5,0
    4e10:	2952a004 	addi	r5,r5,19072
    4e14:	000522c1 	jmpi	522c <_fwalk>

00004e18 <_malloc_trim_r>:
    4e18:	defffb04 	addi	sp,sp,-20
    4e1c:	dcc00315 	stw	r19,12(sp)
    4e20:	04c000b4 	movhi	r19,2
    4e24:	dc800215 	stw	r18,8(sp)
    4e28:	dc400115 	stw	r17,4(sp)
    4e2c:	dc000015 	stw	r16,0(sp)
    4e30:	dfc00415 	stw	ra,16(sp)
    4e34:	2821883a 	mov	r16,r5
    4e38:	9ce84704 	addi	r19,r19,-24292
    4e3c:	2025883a 	mov	r18,r4
    4e40:	000dab00 	call	dab0 <__malloc_lock>
    4e44:	98800217 	ldw	r2,8(r19)
    4e48:	14400117 	ldw	r17,4(r2)
    4e4c:	00bfff04 	movi	r2,-4
    4e50:	88a2703a 	and	r17,r17,r2
    4e54:	8c21c83a 	sub	r16,r17,r16
    4e58:	8403fbc4 	addi	r16,r16,4079
    4e5c:	8020d33a 	srli	r16,r16,12
    4e60:	0083ffc4 	movi	r2,4095
    4e64:	843fffc4 	addi	r16,r16,-1
    4e68:	8020933a 	slli	r16,r16,12
    4e6c:	1400060e 	bge	r2,r16,4e88 <_malloc_trim_r+0x70>
    4e70:	9009883a 	mov	r4,r18
    4e74:	000b883a 	mov	r5,zero
    4e78:	000714c0 	call	714c <_sbrk_r>
    4e7c:	98c00217 	ldw	r3,8(r19)
    4e80:	1c47883a 	add	r3,r3,r17
    4e84:	10c00a26 	beq	r2,r3,4eb0 <_malloc_trim_r+0x98>
    4e88:	9009883a 	mov	r4,r18
    4e8c:	000dbd00 	call	dbd0 <__malloc_unlock>
    4e90:	0005883a 	mov	r2,zero
    4e94:	dfc00417 	ldw	ra,16(sp)
    4e98:	dcc00317 	ldw	r19,12(sp)
    4e9c:	dc800217 	ldw	r18,8(sp)
    4ea0:	dc400117 	ldw	r17,4(sp)
    4ea4:	dc000017 	ldw	r16,0(sp)
    4ea8:	dec00504 	addi	sp,sp,20
    4eac:	f800283a 	ret
    4eb0:	9009883a 	mov	r4,r18
    4eb4:	040bc83a 	sub	r5,zero,r16
    4eb8:	000714c0 	call	714c <_sbrk_r>
    4ebc:	00ffffc4 	movi	r3,-1
    4ec0:	10c00d26 	beq	r2,r3,4ef8 <_malloc_trim_r+0xe0>
    4ec4:	00c000b4 	movhi	r3,2
    4ec8:	18f6da04 	addi	r3,r3,-9368
    4ecc:	18800017 	ldw	r2,0(r3)
    4ed0:	99000217 	ldw	r4,8(r19)
    4ed4:	8c23c83a 	sub	r17,r17,r16
    4ed8:	8c400054 	ori	r17,r17,1
    4edc:	1421c83a 	sub	r16,r2,r16
    4ee0:	24400115 	stw	r17,4(r4)
    4ee4:	9009883a 	mov	r4,r18
    4ee8:	1c000015 	stw	r16,0(r3)
    4eec:	000dbd00 	call	dbd0 <__malloc_unlock>
    4ef0:	00800044 	movi	r2,1
    4ef4:	003fe706 	br	4e94 <__alt_mem_Flash_flash_data+0xf4004e94>
    4ef8:	9009883a 	mov	r4,r18
    4efc:	000b883a 	mov	r5,zero
    4f00:	000714c0 	call	714c <_sbrk_r>
    4f04:	99000217 	ldw	r4,8(r19)
    4f08:	014003c4 	movi	r5,15
    4f0c:	1107c83a 	sub	r3,r2,r4
    4f10:	28ffdd0e 	bge	r5,r3,4e88 <__alt_mem_Flash_flash_data+0xf4004e88>
    4f14:	014000b4 	movhi	r5,2
    4f18:	296ebc04 	addi	r5,r5,-17680
    4f1c:	29400017 	ldw	r5,0(r5)
    4f20:	18c00054 	ori	r3,r3,1
    4f24:	20c00115 	stw	r3,4(r4)
    4f28:	00c000b4 	movhi	r3,2
    4f2c:	1145c83a 	sub	r2,r2,r5
    4f30:	18f6da04 	addi	r3,r3,-9368
    4f34:	18800015 	stw	r2,0(r3)
    4f38:	003fd306 	br	4e88 <__alt_mem_Flash_flash_data+0xf4004e88>

00004f3c <_free_r>:
    4f3c:	28004c26 	beq	r5,zero,5070 <_free_r+0x134>
    4f40:	defffd04 	addi	sp,sp,-12
    4f44:	dc400115 	stw	r17,4(sp)
    4f48:	dc000015 	stw	r16,0(sp)
    4f4c:	2023883a 	mov	r17,r4
    4f50:	2821883a 	mov	r16,r5
    4f54:	dfc00215 	stw	ra,8(sp)
    4f58:	000dab00 	call	dab0 <__malloc_lock>
    4f5c:	813fff17 	ldw	r4,-4(r16)
    4f60:	00bfff84 	movi	r2,-2
    4f64:	024000b4 	movhi	r9,2
    4f68:	81bffe04 	addi	r6,r16,-8
    4f6c:	2084703a 	and	r2,r4,r2
    4f70:	4a684704 	addi	r9,r9,-24292
    4f74:	308b883a 	add	r5,r6,r2
    4f78:	2a000117 	ldw	r8,4(r5)
    4f7c:	49c00217 	ldw	r7,8(r9)
    4f80:	00ffff04 	movi	r3,-4
    4f84:	40c6703a 	and	r3,r8,r3
    4f88:	39405326 	beq	r7,r5,50d8 <_free_r+0x19c>
    4f8c:	28c00115 	stw	r3,4(r5)
    4f90:	2100004c 	andi	r4,r4,1
    4f94:	2000091e 	bne	r4,zero,4fbc <_free_r+0x80>
    4f98:	81fffe17 	ldw	r7,-8(r16)
    4f9c:	4a000204 	addi	r8,r9,8
    4fa0:	31cdc83a 	sub	r6,r6,r7
    4fa4:	31000217 	ldw	r4,8(r6)
    4fa8:	11c5883a 	add	r2,r2,r7
    4fac:	22006126 	beq	r4,r8,5134 <_free_r+0x1f8>
    4fb0:	31c00317 	ldw	r7,12(r6)
    4fb4:	21c00315 	stw	r7,12(r4)
    4fb8:	39000215 	stw	r4,8(r7)
    4fbc:	28c9883a 	add	r4,r5,r3
    4fc0:	21c00117 	ldw	r7,4(r4)
    4fc4:	39c0004c 	andi	r7,r7,1
    4fc8:	38000d1e 	bne	r7,zero,5000 <_free_r+0xc4>
    4fcc:	29000217 	ldw	r4,8(r5)
    4fd0:	10c5883a 	add	r2,r2,r3
    4fd4:	00c000b4 	movhi	r3,2
    4fd8:	18e84904 	addi	r3,r3,-24284
    4fdc:	20c07526 	beq	r4,r3,51b4 <_free_r+0x278>
    4fe0:	29c00317 	ldw	r7,12(r5)
    4fe4:	11400054 	ori	r5,r2,1
    4fe8:	3087883a 	add	r3,r6,r2
    4fec:	21c00315 	stw	r7,12(r4)
    4ff0:	39000215 	stw	r4,8(r7)
    4ff4:	31400115 	stw	r5,4(r6)
    4ff8:	18800015 	stw	r2,0(r3)
    4ffc:	00000406 	br	5010 <_free_r+0xd4>
    5000:	10c00054 	ori	r3,r2,1
    5004:	30c00115 	stw	r3,4(r6)
    5008:	3087883a 	add	r3,r6,r2
    500c:	18800015 	stw	r2,0(r3)
    5010:	00c07fc4 	movi	r3,511
    5014:	18801736 	bltu	r3,r2,5074 <_free_r+0x138>
    5018:	1004d0fa 	srli	r2,r2,3
    501c:	01400044 	movi	r5,1
    5020:	49000117 	ldw	r4,4(r9)
    5024:	1087883a 	add	r3,r2,r2
    5028:	18c7883a 	add	r3,r3,r3
    502c:	1005d0ba 	srai	r2,r2,2
    5030:	18c7883a 	add	r3,r3,r3
    5034:	1a47883a 	add	r3,r3,r9
    5038:	19c00217 	ldw	r7,8(r3)
    503c:	2884983a 	sll	r2,r5,r2
    5040:	30c00315 	stw	r3,12(r6)
    5044:	31c00215 	stw	r7,8(r6)
    5048:	1104b03a 	or	r2,r2,r4
    504c:	19800215 	stw	r6,8(r3)
    5050:	48800115 	stw	r2,4(r9)
    5054:	39800315 	stw	r6,12(r7)
    5058:	8809883a 	mov	r4,r17
    505c:	dfc00217 	ldw	ra,8(sp)
    5060:	dc400117 	ldw	r17,4(sp)
    5064:	dc000017 	ldw	r16,0(sp)
    5068:	dec00304 	addi	sp,sp,12
    506c:	000dbd01 	jmpi	dbd0 <__malloc_unlock>
    5070:	f800283a 	ret
    5074:	1006d27a 	srli	r3,r2,9
    5078:	01000104 	movi	r4,4
    507c:	20c04036 	bltu	r4,r3,5180 <_free_r+0x244>
    5080:	1006d1ba 	srli	r3,r2,6
    5084:	19400e04 	addi	r5,r3,56
    5088:	2947883a 	add	r3,r5,r5
    508c:	18c7883a 	add	r3,r3,r3
    5090:	18c7883a 	add	r3,r3,r3
    5094:	1a49883a 	add	r4,r3,r9
    5098:	20c00217 	ldw	r3,8(r4)
    509c:	01c000b4 	movhi	r7,2
    50a0:	39e84704 	addi	r7,r7,-24292
    50a4:	19003b26 	beq	r3,r4,5194 <_free_r+0x258>
    50a8:	01ffff04 	movi	r7,-4
    50ac:	19400117 	ldw	r5,4(r3)
    50b0:	29ca703a 	and	r5,r5,r7
    50b4:	1140022e 	bgeu	r2,r5,50c0 <_free_r+0x184>
    50b8:	18c00217 	ldw	r3,8(r3)
    50bc:	20fffb1e 	bne	r4,r3,50ac <__alt_mem_Flash_flash_data+0xf40050ac>
    50c0:	18800317 	ldw	r2,12(r3)
    50c4:	30800315 	stw	r2,12(r6)
    50c8:	30c00215 	stw	r3,8(r6)
    50cc:	11800215 	stw	r6,8(r2)
    50d0:	19800315 	stw	r6,12(r3)
    50d4:	003fe006 	br	5058 <__alt_mem_Flash_flash_data+0xf4005058>
    50d8:	2100004c 	andi	r4,r4,1
    50dc:	1885883a 	add	r2,r3,r2
    50e0:	2000071e 	bne	r4,zero,5100 <_free_r+0x1c4>
    50e4:	817ffe17 	ldw	r5,-8(r16)
    50e8:	314dc83a 	sub	r6,r6,r5
    50ec:	30c00317 	ldw	r3,12(r6)
    50f0:	31000217 	ldw	r4,8(r6)
    50f4:	1145883a 	add	r2,r2,r5
    50f8:	20c00315 	stw	r3,12(r4)
    50fc:	19000215 	stw	r4,8(r3)
    5100:	10c00054 	ori	r3,r2,1
    5104:	30c00115 	stw	r3,4(r6)
    5108:	00c000b4 	movhi	r3,2
    510c:	18eebd04 	addi	r3,r3,-17676
    5110:	18c00017 	ldw	r3,0(r3)
    5114:	49800215 	stw	r6,8(r9)
    5118:	10ffcf36 	bltu	r2,r3,5058 <__alt_mem_Flash_flash_data+0xf4005058>
    511c:	008000b4 	movhi	r2,2
    5120:	10b6b804 	addi	r2,r2,-9504
    5124:	11400017 	ldw	r5,0(r2)
    5128:	8809883a 	mov	r4,r17
    512c:	0004e180 	call	4e18 <_malloc_trim_r>
    5130:	003fc906 	br	5058 <__alt_mem_Flash_flash_data+0xf4005058>
    5134:	28c9883a 	add	r4,r5,r3
    5138:	21000117 	ldw	r4,4(r4)
    513c:	2100004c 	andi	r4,r4,1
    5140:	20000a1e 	bne	r4,zero,516c <_free_r+0x230>
    5144:	29000317 	ldw	r4,12(r5)
    5148:	29400217 	ldw	r5,8(r5)
    514c:	10c5883a 	add	r2,r2,r3
    5150:	10c00054 	ori	r3,r2,1
    5154:	29000315 	stw	r4,12(r5)
    5158:	21400215 	stw	r5,8(r4)
    515c:	30c00115 	stw	r3,4(r6)
    5160:	308d883a 	add	r6,r6,r2
    5164:	30800015 	stw	r2,0(r6)
    5168:	003fbb06 	br	5058 <__alt_mem_Flash_flash_data+0xf4005058>
    516c:	10c00054 	ori	r3,r2,1
    5170:	30c00115 	stw	r3,4(r6)
    5174:	308d883a 	add	r6,r6,r2
    5178:	30800015 	stw	r2,0(r6)
    517c:	003fb606 	br	5058 <__alt_mem_Flash_flash_data+0xf4005058>
    5180:	01000504 	movi	r4,20
    5184:	20c01436 	bltu	r4,r3,51d8 <_free_r+0x29c>
    5188:	194016c4 	addi	r5,r3,91
    518c:	2947883a 	add	r3,r5,r5
    5190:	003fbe06 	br	508c <__alt_mem_Flash_flash_data+0xf400508c>
    5194:	280bd0ba 	srai	r5,r5,2
    5198:	00800044 	movi	r2,1
    519c:	39000117 	ldw	r4,4(r7)
    51a0:	114a983a 	sll	r5,r2,r5
    51a4:	1805883a 	mov	r2,r3
    51a8:	2908b03a 	or	r4,r5,r4
    51ac:	39000115 	stw	r4,4(r7)
    51b0:	003fc406 	br	50c4 <__alt_mem_Flash_flash_data+0xf40050c4>
    51b4:	49800515 	stw	r6,20(r9)
    51b8:	49800415 	stw	r6,16(r9)
    51bc:	10c00054 	ori	r3,r2,1
    51c0:	31000315 	stw	r4,12(r6)
    51c4:	31000215 	stw	r4,8(r6)
    51c8:	30c00115 	stw	r3,4(r6)
    51cc:	308d883a 	add	r6,r6,r2
    51d0:	30800015 	stw	r2,0(r6)
    51d4:	003fa006 	br	5058 <__alt_mem_Flash_flash_data+0xf4005058>
    51d8:	01001504 	movi	r4,84
    51dc:	20c00436 	bltu	r4,r3,51f0 <_free_r+0x2b4>
    51e0:	1006d33a 	srli	r3,r2,12
    51e4:	19401b84 	addi	r5,r3,110
    51e8:	2947883a 	add	r3,r5,r5
    51ec:	003fa706 	br	508c <__alt_mem_Flash_flash_data+0xf400508c>
    51f0:	01005504 	movi	r4,340
    51f4:	20c00436 	bltu	r4,r3,5208 <_free_r+0x2cc>
    51f8:	1006d3fa 	srli	r3,r2,15
    51fc:	19401dc4 	addi	r5,r3,119
    5200:	2947883a 	add	r3,r5,r5
    5204:	003fa106 	br	508c <__alt_mem_Flash_flash_data+0xf400508c>
    5208:	01015504 	movi	r4,1364
    520c:	20c00436 	bltu	r4,r3,5220 <_free_r+0x2e4>
    5210:	1006d4ba 	srli	r3,r2,18
    5214:	19401f04 	addi	r5,r3,124
    5218:	2947883a 	add	r3,r5,r5
    521c:	003f9b06 	br	508c <__alt_mem_Flash_flash_data+0xf400508c>
    5220:	00c03f04 	movi	r3,252
    5224:	01401f84 	movi	r5,126
    5228:	003f9806 	br	508c <__alt_mem_Flash_flash_data+0xf400508c>

0000522c <_fwalk>:
    522c:	defff704 	addi	sp,sp,-36
    5230:	dd000415 	stw	r20,16(sp)
    5234:	dfc00815 	stw	ra,32(sp)
    5238:	ddc00715 	stw	r23,28(sp)
    523c:	dd800615 	stw	r22,24(sp)
    5240:	dd400515 	stw	r21,20(sp)
    5244:	dcc00315 	stw	r19,12(sp)
    5248:	dc800215 	stw	r18,8(sp)
    524c:	dc400115 	stw	r17,4(sp)
    5250:	dc000015 	stw	r16,0(sp)
    5254:	2500b804 	addi	r20,r4,736
    5258:	a0002326 	beq	r20,zero,52e8 <_fwalk+0xbc>
    525c:	282b883a 	mov	r21,r5
    5260:	002f883a 	mov	r23,zero
    5264:	05800044 	movi	r22,1
    5268:	04ffffc4 	movi	r19,-1
    526c:	a4400117 	ldw	r17,4(r20)
    5270:	a4800217 	ldw	r18,8(r20)
    5274:	8c7fffc4 	addi	r17,r17,-1
    5278:	88000d16 	blt	r17,zero,52b0 <_fwalk+0x84>
    527c:	94000304 	addi	r16,r18,12
    5280:	94800384 	addi	r18,r18,14
    5284:	80c0000b 	ldhu	r3,0(r16)
    5288:	8c7fffc4 	addi	r17,r17,-1
    528c:	813ffd04 	addi	r4,r16,-12
    5290:	b0c0042e 	bgeu	r22,r3,52a4 <_fwalk+0x78>
    5294:	90c0000f 	ldh	r3,0(r18)
    5298:	1cc00226 	beq	r3,r19,52a4 <_fwalk+0x78>
    529c:	a83ee83a 	callr	r21
    52a0:	b8aeb03a 	or	r23,r23,r2
    52a4:	84001a04 	addi	r16,r16,104
    52a8:	94801a04 	addi	r18,r18,104
    52ac:	8cfff51e 	bne	r17,r19,5284 <__alt_mem_Flash_flash_data+0xf4005284>
    52b0:	a5000017 	ldw	r20,0(r20)
    52b4:	a03fed1e 	bne	r20,zero,526c <__alt_mem_Flash_flash_data+0xf400526c>
    52b8:	b805883a 	mov	r2,r23
    52bc:	dfc00817 	ldw	ra,32(sp)
    52c0:	ddc00717 	ldw	r23,28(sp)
    52c4:	dd800617 	ldw	r22,24(sp)
    52c8:	dd400517 	ldw	r21,20(sp)
    52cc:	dd000417 	ldw	r20,16(sp)
    52d0:	dcc00317 	ldw	r19,12(sp)
    52d4:	dc800217 	ldw	r18,8(sp)
    52d8:	dc400117 	ldw	r17,4(sp)
    52dc:	dc000017 	ldw	r16,0(sp)
    52e0:	dec00904 	addi	sp,sp,36
    52e4:	f800283a 	ret
    52e8:	002f883a 	mov	r23,zero
    52ec:	003ff206 	br	52b8 <__alt_mem_Flash_flash_data+0xf40052b8>

000052f0 <_fwalk_reent>:
    52f0:	defff704 	addi	sp,sp,-36
    52f4:	dd400515 	stw	r21,20(sp)
    52f8:	dfc00815 	stw	ra,32(sp)
    52fc:	ddc00715 	stw	r23,28(sp)
    5300:	dd800615 	stw	r22,24(sp)
    5304:	dd000415 	stw	r20,16(sp)
    5308:	dcc00315 	stw	r19,12(sp)
    530c:	dc800215 	stw	r18,8(sp)
    5310:	dc400115 	stw	r17,4(sp)
    5314:	dc000015 	stw	r16,0(sp)
    5318:	2540b804 	addi	r21,r4,736
    531c:	a8002326 	beq	r21,zero,53ac <_fwalk_reent+0xbc>
    5320:	2829883a 	mov	r20,r5
    5324:	202d883a 	mov	r22,r4
    5328:	002f883a 	mov	r23,zero
    532c:	04c00044 	movi	r19,1
    5330:	04bfffc4 	movi	r18,-1
    5334:	ac400117 	ldw	r17,4(r21)
    5338:	ac000217 	ldw	r16,8(r21)
    533c:	8c7fffc4 	addi	r17,r17,-1
    5340:	88000c16 	blt	r17,zero,5374 <_fwalk_reent+0x84>
    5344:	84000304 	addi	r16,r16,12
    5348:	80c0000b 	ldhu	r3,0(r16)
    534c:	8c7fffc4 	addi	r17,r17,-1
    5350:	817ffd04 	addi	r5,r16,-12
    5354:	98c0052e 	bgeu	r19,r3,536c <_fwalk_reent+0x7c>
    5358:	80c0008f 	ldh	r3,2(r16)
    535c:	b009883a 	mov	r4,r22
    5360:	1c800226 	beq	r3,r18,536c <_fwalk_reent+0x7c>
    5364:	a03ee83a 	callr	r20
    5368:	b8aeb03a 	or	r23,r23,r2
    536c:	84001a04 	addi	r16,r16,104
    5370:	8cbff51e 	bne	r17,r18,5348 <__alt_mem_Flash_flash_data+0xf4005348>
    5374:	ad400017 	ldw	r21,0(r21)
    5378:	a83fee1e 	bne	r21,zero,5334 <__alt_mem_Flash_flash_data+0xf4005334>
    537c:	b805883a 	mov	r2,r23
    5380:	dfc00817 	ldw	ra,32(sp)
    5384:	ddc00717 	ldw	r23,28(sp)
    5388:	dd800617 	ldw	r22,24(sp)
    538c:	dd400517 	ldw	r21,20(sp)
    5390:	dd000417 	ldw	r20,16(sp)
    5394:	dcc00317 	ldw	r19,12(sp)
    5398:	dc800217 	ldw	r18,8(sp)
    539c:	dc400117 	ldw	r17,4(sp)
    53a0:	dc000017 	ldw	r16,0(sp)
    53a4:	dec00904 	addi	sp,sp,36
    53a8:	f800283a 	ret
    53ac:	002f883a 	mov	r23,zero
    53b0:	003ff206 	br	537c <__alt_mem_Flash_flash_data+0xf400537c>

000053b4 <_setlocale_r>:
    53b4:	30001b26 	beq	r6,zero,5424 <_setlocale_r+0x70>
    53b8:	014000b4 	movhi	r5,2
    53bc:	defffe04 	addi	sp,sp,-8
    53c0:	2965d104 	addi	r5,r5,-26812
    53c4:	3009883a 	mov	r4,r6
    53c8:	dc000015 	stw	r16,0(sp)
    53cc:	dfc00115 	stw	ra,4(sp)
    53d0:	3021883a 	mov	r16,r6
    53d4:	00072dc0 	call	72dc <strcmp>
    53d8:	1000061e 	bne	r2,zero,53f4 <_setlocale_r+0x40>
    53dc:	008000b4 	movhi	r2,2
    53e0:	10a5d004 	addi	r2,r2,-26816
    53e4:	dfc00117 	ldw	ra,4(sp)
    53e8:	dc000017 	ldw	r16,0(sp)
    53ec:	dec00204 	addi	sp,sp,8
    53f0:	f800283a 	ret
    53f4:	014000b4 	movhi	r5,2
    53f8:	2965d004 	addi	r5,r5,-26816
    53fc:	8009883a 	mov	r4,r16
    5400:	00072dc0 	call	72dc <strcmp>
    5404:	103ff526 	beq	r2,zero,53dc <__alt_mem_Flash_flash_data+0xf40053dc>
    5408:	014000b4 	movhi	r5,2
    540c:	2965bb04 	addi	r5,r5,-26900
    5410:	8009883a 	mov	r4,r16
    5414:	00072dc0 	call	72dc <strcmp>
    5418:	103ff026 	beq	r2,zero,53dc <__alt_mem_Flash_flash_data+0xf40053dc>
    541c:	0005883a 	mov	r2,zero
    5420:	003ff006 	br	53e4 <__alt_mem_Flash_flash_data+0xf40053e4>
    5424:	008000b4 	movhi	r2,2
    5428:	10a5d004 	addi	r2,r2,-26816
    542c:	f800283a 	ret

00005430 <__locale_charset>:
    5430:	008000b4 	movhi	r2,2
    5434:	10a83104 	addi	r2,r2,-24380
    5438:	f800283a 	ret

0000543c <__locale_mb_cur_max>:
    543c:	008000b4 	movhi	r2,2
    5440:	10aebb04 	addi	r2,r2,-17684
    5444:	10800017 	ldw	r2,0(r2)
    5448:	f800283a 	ret

0000544c <__locale_msgcharset>:
    544c:	008000b4 	movhi	r2,2
    5450:	10a82904 	addi	r2,r2,-24412
    5454:	f800283a 	ret

00005458 <__locale_cjk_lang>:
    5458:	0005883a 	mov	r2,zero
    545c:	f800283a 	ret

00005460 <_localeconv_r>:
    5460:	008000b4 	movhi	r2,2
    5464:	10a83904 	addi	r2,r2,-24348
    5468:	f800283a 	ret

0000546c <setlocale>:
    546c:	00c000b4 	movhi	r3,2
    5470:	18eeba04 	addi	r3,r3,-17688
    5474:	2005883a 	mov	r2,r4
    5478:	19000017 	ldw	r4,0(r3)
    547c:	280d883a 	mov	r6,r5
    5480:	100b883a 	mov	r5,r2
    5484:	00053b41 	jmpi	53b4 <_setlocale_r>

00005488 <localeconv>:
    5488:	008000b4 	movhi	r2,2
    548c:	10a83904 	addi	r2,r2,-24348
    5490:	f800283a 	ret

00005494 <__smakebuf_r>:
    5494:	2880030b 	ldhu	r2,12(r5)
    5498:	10c0008c 	andi	r3,r2,2
    549c:	1800401e 	bne	r3,zero,55a0 <__smakebuf_r+0x10c>
    54a0:	deffec04 	addi	sp,sp,-80
    54a4:	dc000f15 	stw	r16,60(sp)
    54a8:	2821883a 	mov	r16,r5
    54ac:	2940038f 	ldh	r5,14(r5)
    54b0:	dc401015 	stw	r17,64(sp)
    54b4:	dfc01315 	stw	ra,76(sp)
    54b8:	dcc01215 	stw	r19,72(sp)
    54bc:	dc801115 	stw	r18,68(sp)
    54c0:	2023883a 	mov	r17,r4
    54c4:	28001b16 	blt	r5,zero,5534 <__smakebuf_r+0xa0>
    54c8:	d80d883a 	mov	r6,sp
    54cc:	0008d340 	call	8d34 <_fstat_r>
    54d0:	10001716 	blt	r2,zero,5530 <__smakebuf_r+0x9c>
    54d4:	d8800117 	ldw	r2,4(sp)
    54d8:	00e00014 	movui	r3,32768
    54dc:	10bc000c 	andi	r2,r2,61440
    54e0:	10c03726 	beq	r2,r3,55c0 <__smakebuf_r+0x12c>
    54e4:	80c0030b 	ldhu	r3,12(r16)
    54e8:	18c20014 	ori	r3,r3,2048
    54ec:	80c0030d 	sth	r3,12(r16)
    54f0:	00c80004 	movi	r3,8192
    54f4:	10c03c1e 	bne	r2,r3,55e8 <__smakebuf_r+0x154>
    54f8:	8140038f 	ldh	r5,14(r16)
    54fc:	8809883a 	mov	r4,r17
    5500:	000924c0 	call	924c <_isatty_r>
    5504:	10004e26 	beq	r2,zero,5640 <__smakebuf_r+0x1ac>
    5508:	8080030b 	ldhu	r2,12(r16)
    550c:	04c00044 	movi	r19,1
    5510:	80c010c4 	addi	r3,r16,67
    5514:	14c4b03a 	or	r2,r2,r19
    5518:	8080030d 	sth	r2,12(r16)
    551c:	80c00015 	stw	r3,0(r16)
    5520:	80c00415 	stw	r3,16(r16)
    5524:	84c00515 	stw	r19,20(r16)
    5528:	04810004 	movi	r18,1024
    552c:	00000706 	br	554c <__smakebuf_r+0xb8>
    5530:	8080030b 	ldhu	r2,12(r16)
    5534:	10c0200c 	andi	r3,r2,128
    5538:	18001f1e 	bne	r3,zero,55b8 <__smakebuf_r+0x124>
    553c:	04810004 	movi	r18,1024
    5540:	10820014 	ori	r2,r2,2048
    5544:	8080030d 	sth	r2,12(r16)
    5548:	0027883a 	mov	r19,zero
    554c:	8809883a 	mov	r4,r17
    5550:	900b883a 	mov	r5,r18
    5554:	000564c0 	call	564c <_malloc_r>
    5558:	10002e26 	beq	r2,zero,5614 <__smakebuf_r+0x180>
    555c:	80c0030b 	ldhu	r3,12(r16)
    5560:	01000034 	movhi	r4,0
    5564:	2112a204 	addi	r4,r4,19080
    5568:	89000f15 	stw	r4,60(r17)
    556c:	18c02014 	ori	r3,r3,128
    5570:	80c0030d 	sth	r3,12(r16)
    5574:	80800015 	stw	r2,0(r16)
    5578:	80800415 	stw	r2,16(r16)
    557c:	84800515 	stw	r18,20(r16)
    5580:	98001c1e 	bne	r19,zero,55f4 <__smakebuf_r+0x160>
    5584:	dfc01317 	ldw	ra,76(sp)
    5588:	dcc01217 	ldw	r19,72(sp)
    558c:	dc801117 	ldw	r18,68(sp)
    5590:	dc401017 	ldw	r17,64(sp)
    5594:	dc000f17 	ldw	r16,60(sp)
    5598:	dec01404 	addi	sp,sp,80
    559c:	f800283a 	ret
    55a0:	288010c4 	addi	r2,r5,67
    55a4:	28800015 	stw	r2,0(r5)
    55a8:	28800415 	stw	r2,16(r5)
    55ac:	00800044 	movi	r2,1
    55b0:	28800515 	stw	r2,20(r5)
    55b4:	f800283a 	ret
    55b8:	04801004 	movi	r18,64
    55bc:	003fe006 	br	5540 <__alt_mem_Flash_flash_data+0xf4005540>
    55c0:	81000a17 	ldw	r4,40(r16)
    55c4:	00c00034 	movhi	r3,0
    55c8:	18dc9e04 	addi	r3,r3,29304
    55cc:	20ffc51e 	bne	r4,r3,54e4 <__alt_mem_Flash_flash_data+0xf40054e4>
    55d0:	80c0030b 	ldhu	r3,12(r16)
    55d4:	01010004 	movi	r4,1024
    55d8:	81001315 	stw	r4,76(r16)
    55dc:	1906b03a 	or	r3,r3,r4
    55e0:	80c0030d 	sth	r3,12(r16)
    55e4:	003fc206 	br	54f0 <__alt_mem_Flash_flash_data+0xf40054f0>
    55e8:	0027883a 	mov	r19,zero
    55ec:	04810004 	movi	r18,1024
    55f0:	003fd606 	br	554c <__alt_mem_Flash_flash_data+0xf400554c>
    55f4:	8140038f 	ldh	r5,14(r16)
    55f8:	8809883a 	mov	r4,r17
    55fc:	000924c0 	call	924c <_isatty_r>
    5600:	103fe026 	beq	r2,zero,5584 <__alt_mem_Flash_flash_data+0xf4005584>
    5604:	8080030b 	ldhu	r2,12(r16)
    5608:	10800054 	ori	r2,r2,1
    560c:	8080030d 	sth	r2,12(r16)
    5610:	003fdc06 	br	5584 <__alt_mem_Flash_flash_data+0xf4005584>
    5614:	8080030b 	ldhu	r2,12(r16)
    5618:	10c0800c 	andi	r3,r2,512
    561c:	183fd91e 	bne	r3,zero,5584 <__alt_mem_Flash_flash_data+0xf4005584>
    5620:	10800094 	ori	r2,r2,2
    5624:	80c010c4 	addi	r3,r16,67
    5628:	8080030d 	sth	r2,12(r16)
    562c:	00800044 	movi	r2,1
    5630:	80c00015 	stw	r3,0(r16)
    5634:	80c00415 	stw	r3,16(r16)
    5638:	80800515 	stw	r2,20(r16)
    563c:	003fd106 	br	5584 <__alt_mem_Flash_flash_data+0xf4005584>
    5640:	04c00044 	movi	r19,1
    5644:	04810004 	movi	r18,1024
    5648:	003fc006 	br	554c <__alt_mem_Flash_flash_data+0xf400554c>

0000564c <_malloc_r>:
    564c:	defff504 	addi	sp,sp,-44
    5650:	dc800315 	stw	r18,12(sp)
    5654:	dfc00a15 	stw	ra,40(sp)
    5658:	df000915 	stw	fp,36(sp)
    565c:	ddc00815 	stw	r23,32(sp)
    5660:	dd800715 	stw	r22,28(sp)
    5664:	dd400615 	stw	r21,24(sp)
    5668:	dd000515 	stw	r20,20(sp)
    566c:	dcc00415 	stw	r19,16(sp)
    5670:	dc400215 	stw	r17,8(sp)
    5674:	dc000115 	stw	r16,4(sp)
    5678:	288002c4 	addi	r2,r5,11
    567c:	00c00584 	movi	r3,22
    5680:	2025883a 	mov	r18,r4
    5684:	18802a2e 	bgeu	r3,r2,5730 <_malloc_r+0xe4>
    5688:	047ffe04 	movi	r17,-8
    568c:	1462703a 	and	r17,r2,r17
    5690:	88009e16 	blt	r17,zero,590c <_malloc_r+0x2c0>
    5694:	89409d36 	bltu	r17,r5,590c <_malloc_r+0x2c0>
    5698:	000dab00 	call	dab0 <__malloc_lock>
    569c:	00807dc4 	movi	r2,503
    56a0:	14402736 	bltu	r2,r17,5740 <_malloc_r+0xf4>
    56a4:	8806d0fa 	srli	r3,r17,3
    56a8:	04c000b4 	movhi	r19,2
    56ac:	9ce84704 	addi	r19,r19,-24292
    56b0:	18c5883a 	add	r2,r3,r3
    56b4:	1085883a 	add	r2,r2,r2
    56b8:	1085883a 	add	r2,r2,r2
    56bc:	9885883a 	add	r2,r19,r2
    56c0:	14000317 	ldw	r16,12(r2)
    56c4:	80814a26 	beq	r16,r2,5bf0 <_malloc_r+0x5a4>
    56c8:	80c00117 	ldw	r3,4(r16)
    56cc:	81000317 	ldw	r4,12(r16)
    56d0:	00bfff04 	movi	r2,-4
    56d4:	1884703a 	and	r2,r3,r2
    56d8:	81400217 	ldw	r5,8(r16)
    56dc:	8085883a 	add	r2,r16,r2
    56e0:	10c00117 	ldw	r3,4(r2)
    56e4:	29000315 	stw	r4,12(r5)
    56e8:	21400215 	stw	r5,8(r4)
    56ec:	18c00054 	ori	r3,r3,1
    56f0:	10c00115 	stw	r3,4(r2)
    56f4:	9009883a 	mov	r4,r18
    56f8:	000dbd00 	call	dbd0 <__malloc_unlock>
    56fc:	80800204 	addi	r2,r16,8
    5700:	dfc00a17 	ldw	ra,40(sp)
    5704:	df000917 	ldw	fp,36(sp)
    5708:	ddc00817 	ldw	r23,32(sp)
    570c:	dd800717 	ldw	r22,28(sp)
    5710:	dd400617 	ldw	r21,24(sp)
    5714:	dd000517 	ldw	r20,20(sp)
    5718:	dcc00417 	ldw	r19,16(sp)
    571c:	dc800317 	ldw	r18,12(sp)
    5720:	dc400217 	ldw	r17,8(sp)
    5724:	dc000117 	ldw	r16,4(sp)
    5728:	dec00b04 	addi	sp,sp,44
    572c:	f800283a 	ret
    5730:	04400404 	movi	r17,16
    5734:	89407536 	bltu	r17,r5,590c <_malloc_r+0x2c0>
    5738:	000dab00 	call	dab0 <__malloc_lock>
    573c:	003fd906 	br	56a4 <__alt_mem_Flash_flash_data+0xf40056a4>
    5740:	8806d27a 	srli	r3,r17,9
    5744:	18007526 	beq	r3,zero,591c <_malloc_r+0x2d0>
    5748:	00800104 	movi	r2,4
    574c:	10c0ef36 	bltu	r2,r3,5b0c <_malloc_r+0x4c0>
    5750:	8806d1ba 	srli	r3,r17,6
    5754:	19c00e04 	addi	r7,r3,56
    5758:	39cb883a 	add	r5,r7,r7
    575c:	04c000b4 	movhi	r19,2
    5760:	294b883a 	add	r5,r5,r5
    5764:	9ce84704 	addi	r19,r19,-24292
    5768:	294b883a 	add	r5,r5,r5
    576c:	994b883a 	add	r5,r19,r5
    5770:	2c000317 	ldw	r16,12(r5)
    5774:	2c000e26 	beq	r5,r16,57b0 <_malloc_r+0x164>
    5778:	80800117 	ldw	r2,4(r16)
    577c:	01bfff04 	movi	r6,-4
    5780:	010003c4 	movi	r4,15
    5784:	1184703a 	and	r2,r2,r6
    5788:	1447c83a 	sub	r3,r2,r17
    578c:	20c00716 	blt	r4,r3,57ac <_malloc_r+0x160>
    5790:	1800650e 	bge	r3,zero,5928 <_malloc_r+0x2dc>
    5794:	84000317 	ldw	r16,12(r16)
    5798:	2c000526 	beq	r5,r16,57b0 <_malloc_r+0x164>
    579c:	80800117 	ldw	r2,4(r16)
    57a0:	1184703a 	and	r2,r2,r6
    57a4:	1447c83a 	sub	r3,r2,r17
    57a8:	20fff90e 	bge	r4,r3,5790 <__alt_mem_Flash_flash_data+0xf4005790>
    57ac:	39ffffc4 	addi	r7,r7,-1
    57b0:	38c00044 	addi	r3,r7,1
    57b4:	018000b4 	movhi	r6,2
    57b8:	9c000417 	ldw	r16,16(r19)
    57bc:	31a84704 	addi	r6,r6,-24292
    57c0:	32400204 	addi	r9,r6,8
    57c4:	82410326 	beq	r16,r9,5bd4 <_malloc_r+0x588>
    57c8:	81000117 	ldw	r4,4(r16)
    57cc:	00bfff04 	movi	r2,-4
    57d0:	208e703a 	and	r7,r4,r2
    57d4:	3c45c83a 	sub	r2,r7,r17
    57d8:	010003c4 	movi	r4,15
    57dc:	2080ee16 	blt	r4,r2,5b98 <_malloc_r+0x54c>
    57e0:	32400515 	stw	r9,20(r6)
    57e4:	32400415 	stw	r9,16(r6)
    57e8:	1000510e 	bge	r2,zero,5930 <_malloc_r+0x2e4>
    57ec:	00807fc4 	movi	r2,511
    57f0:	11c0ce36 	bltu	r2,r7,5b2c <_malloc_r+0x4e0>
    57f4:	3808d0fa 	srli	r4,r7,3
    57f8:	01c00044 	movi	r7,1
    57fc:	30800117 	ldw	r2,4(r6)
    5800:	210b883a 	add	r5,r4,r4
    5804:	294b883a 	add	r5,r5,r5
    5808:	2009d0ba 	srai	r4,r4,2
    580c:	294b883a 	add	r5,r5,r5
    5810:	298b883a 	add	r5,r5,r6
    5814:	2a000217 	ldw	r8,8(r5)
    5818:	3908983a 	sll	r4,r7,r4
    581c:	81400315 	stw	r5,12(r16)
    5820:	82000215 	stw	r8,8(r16)
    5824:	2088b03a 	or	r4,r4,r2
    5828:	2c000215 	stw	r16,8(r5)
    582c:	31000115 	stw	r4,4(r6)
    5830:	44000315 	stw	r16,12(r8)
    5834:	1805d0ba 	srai	r2,r3,2
    5838:	01400044 	movi	r5,1
    583c:	288a983a 	sll	r5,r5,r2
    5840:	21404336 	bltu	r4,r5,5950 <_malloc_r+0x304>
    5844:	2144703a 	and	r2,r4,r5
    5848:	10000a1e 	bne	r2,zero,5874 <_malloc_r+0x228>
    584c:	00bfff04 	movi	r2,-4
    5850:	294b883a 	add	r5,r5,r5
    5854:	1886703a 	and	r3,r3,r2
    5858:	2144703a 	and	r2,r4,r5
    585c:	18c00104 	addi	r3,r3,4
    5860:	1000041e 	bne	r2,zero,5874 <_malloc_r+0x228>
    5864:	294b883a 	add	r5,r5,r5
    5868:	2144703a 	and	r2,r4,r5
    586c:	18c00104 	addi	r3,r3,4
    5870:	103ffc26 	beq	r2,zero,5864 <__alt_mem_Flash_flash_data+0xf4005864>
    5874:	023fff04 	movi	r8,-4
    5878:	01c003c4 	movi	r7,15
    587c:	18c5883a 	add	r2,r3,r3
    5880:	1085883a 	add	r2,r2,r2
    5884:	1085883a 	add	r2,r2,r2
    5888:	9895883a 	add	r10,r19,r2
    588c:	52c00304 	addi	r11,r10,12
    5890:	1819883a 	mov	r12,r3
    5894:	5c000017 	ldw	r16,0(r11)
    5898:	59bffd04 	addi	r6,r11,-12
    589c:	8180041e 	bne	r16,r6,58b0 <_malloc_r+0x264>
    58a0:	0000ce06 	br	5bdc <_malloc_r+0x590>
    58a4:	2000d70e 	bge	r4,zero,5c04 <_malloc_r+0x5b8>
    58a8:	84000317 	ldw	r16,12(r16)
    58ac:	8180cb26 	beq	r16,r6,5bdc <_malloc_r+0x590>
    58b0:	80800117 	ldw	r2,4(r16)
    58b4:	1204703a 	and	r2,r2,r8
    58b8:	1449c83a 	sub	r4,r2,r17
    58bc:	393ff90e 	bge	r7,r4,58a4 <__alt_mem_Flash_flash_data+0xf40058a4>
    58c0:	80800317 	ldw	r2,12(r16)
    58c4:	80c00217 	ldw	r3,8(r16)
    58c8:	89400054 	ori	r5,r17,1
    58cc:	81400115 	stw	r5,4(r16)
    58d0:	18800315 	stw	r2,12(r3)
    58d4:	10c00215 	stw	r3,8(r2)
    58d8:	8463883a 	add	r17,r16,r17
    58dc:	9c400515 	stw	r17,20(r19)
    58e0:	9c400415 	stw	r17,16(r19)
    58e4:	20800054 	ori	r2,r4,1
    58e8:	88800115 	stw	r2,4(r17)
    58ec:	8a400315 	stw	r9,12(r17)
    58f0:	8a400215 	stw	r9,8(r17)
    58f4:	8923883a 	add	r17,r17,r4
    58f8:	89000015 	stw	r4,0(r17)
    58fc:	9009883a 	mov	r4,r18
    5900:	000dbd00 	call	dbd0 <__malloc_unlock>
    5904:	80800204 	addi	r2,r16,8
    5908:	003f7d06 	br	5700 <__alt_mem_Flash_flash_data+0xf4005700>
    590c:	00800304 	movi	r2,12
    5910:	90800015 	stw	r2,0(r18)
    5914:	0005883a 	mov	r2,zero
    5918:	003f7906 	br	5700 <__alt_mem_Flash_flash_data+0xf4005700>
    591c:	01401f84 	movi	r5,126
    5920:	01c00fc4 	movi	r7,63
    5924:	003f8d06 	br	575c <__alt_mem_Flash_flash_data+0xf400575c>
    5928:	81000317 	ldw	r4,12(r16)
    592c:	003f6a06 	br	56d8 <__alt_mem_Flash_flash_data+0xf40056d8>
    5930:	81c5883a 	add	r2,r16,r7
    5934:	10c00117 	ldw	r3,4(r2)
    5938:	9009883a 	mov	r4,r18
    593c:	18c00054 	ori	r3,r3,1
    5940:	10c00115 	stw	r3,4(r2)
    5944:	000dbd00 	call	dbd0 <__malloc_unlock>
    5948:	80800204 	addi	r2,r16,8
    594c:	003f6c06 	br	5700 <__alt_mem_Flash_flash_data+0xf4005700>
    5950:	9c000217 	ldw	r16,8(r19)
    5954:	00bfff04 	movi	r2,-4
    5958:	85800117 	ldw	r22,4(r16)
    595c:	b0ac703a 	and	r22,r22,r2
    5960:	b4400336 	bltu	r22,r17,5970 <_malloc_r+0x324>
    5964:	b445c83a 	sub	r2,r22,r17
    5968:	00c003c4 	movi	r3,15
    596c:	18805d16 	blt	r3,r2,5ae4 <_malloc_r+0x498>
    5970:	05c000b4 	movhi	r23,2
    5974:	008000b4 	movhi	r2,2
    5978:	bdeebc04 	addi	r23,r23,-17680
    597c:	10b6b804 	addi	r2,r2,-9504
    5980:	15400017 	ldw	r21,0(r2)
    5984:	b9000017 	ldw	r4,0(r23)
    5988:	00ffffc4 	movi	r3,-1
    598c:	858d883a 	add	r6,r16,r22
    5990:	8d6b883a 	add	r21,r17,r21
    5994:	20c0e426 	beq	r4,r3,5d28 <_malloc_r+0x6dc>
    5998:	ad4403c4 	addi	r21,r21,4111
    599c:	00fc0004 	movi	r3,-4096
    59a0:	a8ea703a 	and	r21,r21,r3
    59a4:	9009883a 	mov	r4,r18
    59a8:	a80b883a 	mov	r5,r21
    59ac:	d9800015 	stw	r6,0(sp)
    59b0:	000714c0 	call	714c <_sbrk_r>
    59b4:	00ffffc4 	movi	r3,-1
    59b8:	1029883a 	mov	r20,r2
    59bc:	d9800017 	ldw	r6,0(sp)
    59c0:	10c0a426 	beq	r2,r3,5c54 <_malloc_r+0x608>
    59c4:	1180a236 	bltu	r2,r6,5c50 <_malloc_r+0x604>
    59c8:	070000b4 	movhi	fp,2
    59cc:	e736da04 	addi	fp,fp,-9368
    59d0:	e0c00017 	ldw	r3,0(fp)
    59d4:	a8c7883a 	add	r3,r21,r3
    59d8:	e0c00015 	stw	r3,0(fp)
    59dc:	3500da26 	beq	r6,r20,5d48 <_malloc_r+0x6fc>
    59e0:	b9000017 	ldw	r4,0(r23)
    59e4:	00bfffc4 	movi	r2,-1
    59e8:	2080e426 	beq	r4,r2,5d7c <_malloc_r+0x730>
    59ec:	a185c83a 	sub	r2,r20,r6
    59f0:	1885883a 	add	r2,r3,r2
    59f4:	e0800015 	stw	r2,0(fp)
    59f8:	a0c001cc 	andi	r3,r20,7
    59fc:	1800b526 	beq	r3,zero,5cd4 <_malloc_r+0x688>
    5a00:	a0e9c83a 	sub	r20,r20,r3
    5a04:	00840204 	movi	r2,4104
    5a08:	a5000204 	addi	r20,r20,8
    5a0c:	10c7c83a 	sub	r3,r2,r3
    5a10:	a545883a 	add	r2,r20,r21
    5a14:	1083ffcc 	andi	r2,r2,4095
    5a18:	18abc83a 	sub	r21,r3,r2
    5a1c:	9009883a 	mov	r4,r18
    5a20:	a80b883a 	mov	r5,r21
    5a24:	000714c0 	call	714c <_sbrk_r>
    5a28:	00ffffc4 	movi	r3,-1
    5a2c:	10c0d026 	beq	r2,r3,5d70 <_malloc_r+0x724>
    5a30:	1507c83a 	sub	r3,r2,r20
    5a34:	a8c7883a 	add	r3,r21,r3
    5a38:	18c00054 	ori	r3,r3,1
    5a3c:	e0800017 	ldw	r2,0(fp)
    5a40:	9d000215 	stw	r20,8(r19)
    5a44:	a0c00115 	stw	r3,4(r20)
    5a48:	a887883a 	add	r3,r21,r2
    5a4c:	e0c00015 	stw	r3,0(fp)
    5a50:	84c00e26 	beq	r16,r19,5a8c <_malloc_r+0x440>
    5a54:	018003c4 	movi	r6,15
    5a58:	3580a02e 	bgeu	r6,r22,5cdc <_malloc_r+0x690>
    5a5c:	81400117 	ldw	r5,4(r16)
    5a60:	013ffe04 	movi	r4,-8
    5a64:	b0bffd04 	addi	r2,r22,-12
    5a68:	1104703a 	and	r2,r2,r4
    5a6c:	2900004c 	andi	r4,r5,1
    5a70:	1108b03a 	or	r4,r2,r4
    5a74:	81000115 	stw	r4,4(r16)
    5a78:	01400144 	movi	r5,5
    5a7c:	8089883a 	add	r4,r16,r2
    5a80:	21400115 	stw	r5,4(r4)
    5a84:	21400215 	stw	r5,8(r4)
    5a88:	3080c036 	bltu	r6,r2,5d8c <_malloc_r+0x740>
    5a8c:	008000b4 	movhi	r2,2
    5a90:	10b6b704 	addi	r2,r2,-9508
    5a94:	11000017 	ldw	r4,0(r2)
    5a98:	20c0012e 	bgeu	r4,r3,5aa0 <_malloc_r+0x454>
    5a9c:	10c00015 	stw	r3,0(r2)
    5aa0:	008000b4 	movhi	r2,2
    5aa4:	10b6b604 	addi	r2,r2,-9512
    5aa8:	11000017 	ldw	r4,0(r2)
    5aac:	9c000217 	ldw	r16,8(r19)
    5ab0:	20c0012e 	bgeu	r4,r3,5ab8 <_malloc_r+0x46c>
    5ab4:	10c00015 	stw	r3,0(r2)
    5ab8:	80c00117 	ldw	r3,4(r16)
    5abc:	00bfff04 	movi	r2,-4
    5ac0:	1886703a 	and	r3,r3,r2
    5ac4:	1c45c83a 	sub	r2,r3,r17
    5ac8:	1c400236 	bltu	r3,r17,5ad4 <_malloc_r+0x488>
    5acc:	00c003c4 	movi	r3,15
    5ad0:	18800416 	blt	r3,r2,5ae4 <_malloc_r+0x498>
    5ad4:	9009883a 	mov	r4,r18
    5ad8:	000dbd00 	call	dbd0 <__malloc_unlock>
    5adc:	0005883a 	mov	r2,zero
    5ae0:	003f0706 	br	5700 <__alt_mem_Flash_flash_data+0xf4005700>
    5ae4:	88c00054 	ori	r3,r17,1
    5ae8:	80c00115 	stw	r3,4(r16)
    5aec:	8463883a 	add	r17,r16,r17
    5af0:	10800054 	ori	r2,r2,1
    5af4:	9c400215 	stw	r17,8(r19)
    5af8:	88800115 	stw	r2,4(r17)
    5afc:	9009883a 	mov	r4,r18
    5b00:	000dbd00 	call	dbd0 <__malloc_unlock>
    5b04:	80800204 	addi	r2,r16,8
    5b08:	003efd06 	br	5700 <__alt_mem_Flash_flash_data+0xf4005700>
    5b0c:	00800504 	movi	r2,20
    5b10:	10c0482e 	bgeu	r2,r3,5c34 <_malloc_r+0x5e8>
    5b14:	00801504 	movi	r2,84
    5b18:	10c06836 	bltu	r2,r3,5cbc <_malloc_r+0x670>
    5b1c:	8806d33a 	srli	r3,r17,12
    5b20:	19c01b84 	addi	r7,r3,110
    5b24:	39cb883a 	add	r5,r7,r7
    5b28:	003f0c06 	br	575c <__alt_mem_Flash_flash_data+0xf400575c>
    5b2c:	3804d27a 	srli	r2,r7,9
    5b30:	01000104 	movi	r4,4
    5b34:	2080422e 	bgeu	r4,r2,5c40 <_malloc_r+0x5f4>
    5b38:	01000504 	movi	r4,20
    5b3c:	20807c36 	bltu	r4,r2,5d30 <_malloc_r+0x6e4>
    5b40:	110016c4 	addi	r4,r2,91
    5b44:	210b883a 	add	r5,r4,r4
    5b48:	294b883a 	add	r5,r5,r5
    5b4c:	294b883a 	add	r5,r5,r5
    5b50:	994b883a 	add	r5,r19,r5
    5b54:	28800217 	ldw	r2,8(r5)
    5b58:	020000b4 	movhi	r8,2
    5b5c:	42284704 	addi	r8,r8,-24292
    5b60:	11406326 	beq	r2,r5,5cf0 <_malloc_r+0x6a4>
    5b64:	01bfff04 	movi	r6,-4
    5b68:	11000117 	ldw	r4,4(r2)
    5b6c:	2188703a 	and	r4,r4,r6
    5b70:	3900022e 	bgeu	r7,r4,5b7c <_malloc_r+0x530>
    5b74:	10800217 	ldw	r2,8(r2)
    5b78:	28bffb1e 	bne	r5,r2,5b68 <__alt_mem_Flash_flash_data+0xf4005b68>
    5b7c:	11800317 	ldw	r6,12(r2)
    5b80:	99000117 	ldw	r4,4(r19)
    5b84:	81800315 	stw	r6,12(r16)
    5b88:	80800215 	stw	r2,8(r16)
    5b8c:	34000215 	stw	r16,8(r6)
    5b90:	14000315 	stw	r16,12(r2)
    5b94:	003f2706 	br	5834 <__alt_mem_Flash_flash_data+0xf4005834>
    5b98:	88c00054 	ori	r3,r17,1
    5b9c:	80c00115 	stw	r3,4(r16)
    5ba0:	8463883a 	add	r17,r16,r17
    5ba4:	34400515 	stw	r17,20(r6)
    5ba8:	34400415 	stw	r17,16(r6)
    5bac:	10c00054 	ori	r3,r2,1
    5bb0:	8a400315 	stw	r9,12(r17)
    5bb4:	8a400215 	stw	r9,8(r17)
    5bb8:	88c00115 	stw	r3,4(r17)
    5bbc:	88a3883a 	add	r17,r17,r2
    5bc0:	88800015 	stw	r2,0(r17)
    5bc4:	9009883a 	mov	r4,r18
    5bc8:	000dbd00 	call	dbd0 <__malloc_unlock>
    5bcc:	80800204 	addi	r2,r16,8
    5bd0:	003ecb06 	br	5700 <__alt_mem_Flash_flash_data+0xf4005700>
    5bd4:	31000117 	ldw	r4,4(r6)
    5bd8:	003f1606 	br	5834 <__alt_mem_Flash_flash_data+0xf4005834>
    5bdc:	63000044 	addi	r12,r12,1
    5be0:	608000cc 	andi	r2,r12,3
    5be4:	5ac00204 	addi	r11,r11,8
    5be8:	103f2a1e 	bne	r2,zero,5894 <__alt_mem_Flash_flash_data+0xf4005894>
    5bec:	00002106 	br	5c74 <_malloc_r+0x628>
    5bf0:	80800204 	addi	r2,r16,8
    5bf4:	84000517 	ldw	r16,20(r16)
    5bf8:	143eb31e 	bne	r2,r16,56c8 <__alt_mem_Flash_flash_data+0xf40056c8>
    5bfc:	18c00084 	addi	r3,r3,2
    5c00:	003eec06 	br	57b4 <__alt_mem_Flash_flash_data+0xf40057b4>
    5c04:	8085883a 	add	r2,r16,r2
    5c08:	10c00117 	ldw	r3,4(r2)
    5c0c:	81000317 	ldw	r4,12(r16)
    5c10:	81400217 	ldw	r5,8(r16)
    5c14:	18c00054 	ori	r3,r3,1
    5c18:	10c00115 	stw	r3,4(r2)
    5c1c:	29000315 	stw	r4,12(r5)
    5c20:	21400215 	stw	r5,8(r4)
    5c24:	9009883a 	mov	r4,r18
    5c28:	000dbd00 	call	dbd0 <__malloc_unlock>
    5c2c:	80800204 	addi	r2,r16,8
    5c30:	003eb306 	br	5700 <__alt_mem_Flash_flash_data+0xf4005700>
    5c34:	19c016c4 	addi	r7,r3,91
    5c38:	39cb883a 	add	r5,r7,r7
    5c3c:	003ec706 	br	575c <__alt_mem_Flash_flash_data+0xf400575c>
    5c40:	3804d1ba 	srli	r2,r7,6
    5c44:	11000e04 	addi	r4,r2,56
    5c48:	210b883a 	add	r5,r4,r4
    5c4c:	003fbe06 	br	5b48 <__alt_mem_Flash_flash_data+0xf4005b48>
    5c50:	84ff5d26 	beq	r16,r19,59c8 <__alt_mem_Flash_flash_data+0xf40059c8>
    5c54:	9c000217 	ldw	r16,8(r19)
    5c58:	00bfff04 	movi	r2,-4
    5c5c:	80c00117 	ldw	r3,4(r16)
    5c60:	1886703a 	and	r3,r3,r2
    5c64:	003f9706 	br	5ac4 <__alt_mem_Flash_flash_data+0xf4005ac4>
    5c68:	52800017 	ldw	r10,0(r10)
    5c6c:	18ffffc4 	addi	r3,r3,-1
    5c70:	50805c1e 	bne	r10,r2,5de4 <_malloc_r+0x798>
    5c74:	190000cc 	andi	r4,r3,3
    5c78:	50bffe04 	addi	r2,r10,-8
    5c7c:	203ffa1e 	bne	r4,zero,5c68 <__alt_mem_Flash_flash_data+0xf4005c68>
    5c80:	98800117 	ldw	r2,4(r19)
    5c84:	0146303a 	nor	r3,zero,r5
    5c88:	1884703a 	and	r2,r3,r2
    5c8c:	98800115 	stw	r2,4(r19)
    5c90:	294b883a 	add	r5,r5,r5
    5c94:	117f2e36 	bltu	r2,r5,5950 <__alt_mem_Flash_flash_data+0xf4005950>
    5c98:	283f2d26 	beq	r5,zero,5950 <__alt_mem_Flash_flash_data+0xf4005950>
    5c9c:	1146703a 	and	r3,r2,r5
    5ca0:	1800521e 	bne	r3,zero,5dec <_malloc_r+0x7a0>
    5ca4:	6007883a 	mov	r3,r12
    5ca8:	294b883a 	add	r5,r5,r5
    5cac:	1148703a 	and	r4,r2,r5
    5cb0:	18c00104 	addi	r3,r3,4
    5cb4:	203ffc26 	beq	r4,zero,5ca8 <__alt_mem_Flash_flash_data+0xf4005ca8>
    5cb8:	003ef006 	br	587c <__alt_mem_Flash_flash_data+0xf400587c>
    5cbc:	00805504 	movi	r2,340
    5cc0:	10c01336 	bltu	r2,r3,5d10 <_malloc_r+0x6c4>
    5cc4:	8806d3fa 	srli	r3,r17,15
    5cc8:	19c01dc4 	addi	r7,r3,119
    5ccc:	39cb883a 	add	r5,r7,r7
    5cd0:	003ea206 	br	575c <__alt_mem_Flash_flash_data+0xf400575c>
    5cd4:	00c40004 	movi	r3,4096
    5cd8:	003f4d06 	br	5a10 <__alt_mem_Flash_flash_data+0xf4005a10>
    5cdc:	00800044 	movi	r2,1
    5ce0:	a0800115 	stw	r2,4(r20)
    5ce4:	a021883a 	mov	r16,r20
    5ce8:	0007883a 	mov	r3,zero
    5cec:	003f7506 	br	5ac4 <__alt_mem_Flash_flash_data+0xf4005ac4>
    5cf0:	200bd0ba 	srai	r5,r4,2
    5cf4:	01800044 	movi	r6,1
    5cf8:	41000117 	ldw	r4,4(r8)
    5cfc:	314a983a 	sll	r5,r6,r5
    5d00:	100d883a 	mov	r6,r2
    5d04:	2908b03a 	or	r4,r5,r4
    5d08:	41000115 	stw	r4,4(r8)
    5d0c:	003f9d06 	br	5b84 <__alt_mem_Flash_flash_data+0xf4005b84>
    5d10:	00815504 	movi	r2,1364
    5d14:	10c01336 	bltu	r2,r3,5d64 <_malloc_r+0x718>
    5d18:	8806d4ba 	srli	r3,r17,18
    5d1c:	19c01f04 	addi	r7,r3,124
    5d20:	39cb883a 	add	r5,r7,r7
    5d24:	003e8d06 	br	575c <__alt_mem_Flash_flash_data+0xf400575c>
    5d28:	ad400404 	addi	r21,r21,16
    5d2c:	003f1d06 	br	59a4 <__alt_mem_Flash_flash_data+0xf40059a4>
    5d30:	01001504 	movi	r4,84
    5d34:	20801c36 	bltu	r4,r2,5da8 <_malloc_r+0x75c>
    5d38:	3804d33a 	srli	r2,r7,12
    5d3c:	11001b84 	addi	r4,r2,110
    5d40:	210b883a 	add	r5,r4,r4
    5d44:	003f8006 	br	5b48 <__alt_mem_Flash_flash_data+0xf4005b48>
    5d48:	3083ffcc 	andi	r2,r6,4095
    5d4c:	103f241e 	bne	r2,zero,59e0 <__alt_mem_Flash_flash_data+0xf40059e0>
    5d50:	99000217 	ldw	r4,8(r19)
    5d54:	ad85883a 	add	r2,r21,r22
    5d58:	10800054 	ori	r2,r2,1
    5d5c:	20800115 	stw	r2,4(r4)
    5d60:	003f4a06 	br	5a8c <__alt_mem_Flash_flash_data+0xf4005a8c>
    5d64:	01403f04 	movi	r5,252
    5d68:	01c01f84 	movi	r7,126
    5d6c:	003e7b06 	br	575c <__alt_mem_Flash_flash_data+0xf400575c>
    5d70:	00c00044 	movi	r3,1
    5d74:	002b883a 	mov	r21,zero
    5d78:	003f3006 	br	5a3c <__alt_mem_Flash_flash_data+0xf4005a3c>
    5d7c:	008000b4 	movhi	r2,2
    5d80:	10aebc04 	addi	r2,r2,-17680
    5d84:	15000015 	stw	r20,0(r2)
    5d88:	003f1b06 	br	59f8 <__alt_mem_Flash_flash_data+0xf40059f8>
    5d8c:	9009883a 	mov	r4,r18
    5d90:	81400204 	addi	r5,r16,8
    5d94:	0004f3c0 	call	4f3c <_free_r>
    5d98:	008000b4 	movhi	r2,2
    5d9c:	10b6da04 	addi	r2,r2,-9368
    5da0:	10c00017 	ldw	r3,0(r2)
    5da4:	003f3906 	br	5a8c <__alt_mem_Flash_flash_data+0xf4005a8c>
    5da8:	01005504 	movi	r4,340
    5dac:	20800436 	bltu	r4,r2,5dc0 <_malloc_r+0x774>
    5db0:	3804d3fa 	srli	r2,r7,15
    5db4:	11001dc4 	addi	r4,r2,119
    5db8:	210b883a 	add	r5,r4,r4
    5dbc:	003f6206 	br	5b48 <__alt_mem_Flash_flash_data+0xf4005b48>
    5dc0:	01015504 	movi	r4,1364
    5dc4:	20800436 	bltu	r4,r2,5dd8 <_malloc_r+0x78c>
    5dc8:	3804d4ba 	srli	r2,r7,18
    5dcc:	11001f04 	addi	r4,r2,124
    5dd0:	210b883a 	add	r5,r4,r4
    5dd4:	003f5c06 	br	5b48 <__alt_mem_Flash_flash_data+0xf4005b48>
    5dd8:	01403f04 	movi	r5,252
    5ddc:	01001f84 	movi	r4,126
    5de0:	003f5906 	br	5b48 <__alt_mem_Flash_flash_data+0xf4005b48>
    5de4:	98800117 	ldw	r2,4(r19)
    5de8:	003fa906 	br	5c90 <__alt_mem_Flash_flash_data+0xf4005c90>
    5dec:	6007883a 	mov	r3,r12
    5df0:	003ea206 	br	587c <__alt_mem_Flash_flash_data+0xf400587c>

00005df4 <memchr>:
    5df4:	208000cc 	andi	r2,r4,3
    5df8:	280f883a 	mov	r7,r5
    5dfc:	10003526 	beq	r2,zero,5ed4 <memchr+0xe0>
    5e00:	30bfffc4 	addi	r2,r6,-1
    5e04:	30001b26 	beq	r6,zero,5e74 <memchr+0x80>
    5e08:	21800003 	ldbu	r6,0(r4)
    5e0c:	28c03fcc 	andi	r3,r5,255
    5e10:	30c01a26 	beq	r6,r3,5e7c <memchr+0x88>
    5e14:	180d883a 	mov	r6,r3
    5e18:	00000406 	br	5e2c <memchr+0x38>
    5e1c:	10001526 	beq	r2,zero,5e74 <memchr+0x80>
    5e20:	20c00003 	ldbu	r3,0(r4)
    5e24:	10bfffc4 	addi	r2,r2,-1
    5e28:	19801426 	beq	r3,r6,5e7c <memchr+0x88>
    5e2c:	21000044 	addi	r4,r4,1
    5e30:	20c000cc 	andi	r3,r4,3
    5e34:	183ff91e 	bne	r3,zero,5e1c <__alt_mem_Flash_flash_data+0xf4005e1c>
    5e38:	024000c4 	movi	r9,3
    5e3c:	48801136 	bltu	r9,r2,5e84 <memchr+0x90>
    5e40:	10000c26 	beq	r2,zero,5e74 <memchr+0x80>
    5e44:	20c00003 	ldbu	r3,0(r4)
    5e48:	29403fcc 	andi	r5,r5,255
    5e4c:	19400b26 	beq	r3,r5,5e7c <memchr+0x88>
    5e50:	20c00044 	addi	r3,r4,1
    5e54:	2085883a 	add	r2,r4,r2
    5e58:	39803fcc 	andi	r6,r7,255
    5e5c:	00000306 	br	5e6c <memchr+0x78>
    5e60:	18c00044 	addi	r3,r3,1
    5e64:	197fffc3 	ldbu	r5,-1(r3)
    5e68:	29800426 	beq	r5,r6,5e7c <memchr+0x88>
    5e6c:	1809883a 	mov	r4,r3
    5e70:	18bffb1e 	bne	r3,r2,5e60 <__alt_mem_Flash_flash_data+0xf4005e60>
    5e74:	0005883a 	mov	r2,zero
    5e78:	f800283a 	ret
    5e7c:	2005883a 	mov	r2,r4
    5e80:	f800283a 	ret
    5e84:	28c03fcc 	andi	r3,r5,255
    5e88:	1810923a 	slli	r8,r3,8
    5e8c:	02ffbff4 	movhi	r11,65279
    5e90:	02a02074 	movhi	r10,32897
    5e94:	40c6b03a 	or	r3,r8,r3
    5e98:	1810943a 	slli	r8,r3,16
    5e9c:	5affbfc4 	addi	r11,r11,-257
    5ea0:	52a02004 	addi	r10,r10,-32640
    5ea4:	40d0b03a 	or	r8,r8,r3
    5ea8:	20c00017 	ldw	r3,0(r4)
    5eac:	40c6f03a 	xor	r3,r8,r3
    5eb0:	1acd883a 	add	r6,r3,r11
    5eb4:	00c6303a 	nor	r3,zero,r3
    5eb8:	30c6703a 	and	r3,r6,r3
    5ebc:	1a86703a 	and	r3,r3,r10
    5ec0:	183fdf1e 	bne	r3,zero,5e40 <__alt_mem_Flash_flash_data+0xf4005e40>
    5ec4:	10bfff04 	addi	r2,r2,-4
    5ec8:	21000104 	addi	r4,r4,4
    5ecc:	48bff636 	bltu	r9,r2,5ea8 <__alt_mem_Flash_flash_data+0xf4005ea8>
    5ed0:	003fdb06 	br	5e40 <__alt_mem_Flash_flash_data+0xf4005e40>
    5ed4:	3005883a 	mov	r2,r6
    5ed8:	003fd706 	br	5e38 <__alt_mem_Flash_flash_data+0xf4005e38>

00005edc <memcpy>:
    5edc:	deffff04 	addi	sp,sp,-4
    5ee0:	dc000015 	stw	r16,0(sp)
    5ee4:	00c003c4 	movi	r3,15
    5ee8:	2005883a 	mov	r2,r4
    5eec:	1980432e 	bgeu	r3,r6,5ffc <memcpy+0x120>
    5ef0:	2146b03a 	or	r3,r4,r5
    5ef4:	18c000cc 	andi	r3,r3,3
    5ef8:	1800421e 	bne	r3,zero,6004 <memcpy+0x128>
    5efc:	343ffc04 	addi	r16,r6,-16
    5f00:	8020d13a 	srli	r16,r16,4
    5f04:	28c00104 	addi	r3,r5,4
    5f08:	23400104 	addi	r13,r4,4
    5f0c:	801e913a 	slli	r15,r16,4
    5f10:	2b000204 	addi	r12,r5,8
    5f14:	22c00204 	addi	r11,r4,8
    5f18:	7bc00504 	addi	r15,r15,20
    5f1c:	2a800304 	addi	r10,r5,12
    5f20:	22400304 	addi	r9,r4,12
    5f24:	2bdf883a 	add	r15,r5,r15
    5f28:	2811883a 	mov	r8,r5
    5f2c:	200f883a 	mov	r7,r4
    5f30:	41000017 	ldw	r4,0(r8)
    5f34:	39c00404 	addi	r7,r7,16
    5f38:	18c00404 	addi	r3,r3,16
    5f3c:	393ffc15 	stw	r4,-16(r7)
    5f40:	1bbffc17 	ldw	r14,-16(r3)
    5f44:	6b400404 	addi	r13,r13,16
    5f48:	5ac00404 	addi	r11,r11,16
    5f4c:	6bbffc15 	stw	r14,-16(r13)
    5f50:	63800017 	ldw	r14,0(r12)
    5f54:	4a400404 	addi	r9,r9,16
    5f58:	42000404 	addi	r8,r8,16
    5f5c:	5bbffc15 	stw	r14,-16(r11)
    5f60:	53800017 	ldw	r14,0(r10)
    5f64:	63000404 	addi	r12,r12,16
    5f68:	52800404 	addi	r10,r10,16
    5f6c:	4bbffc15 	stw	r14,-16(r9)
    5f70:	1bffef1e 	bne	r3,r15,5f30 <__alt_mem_Flash_flash_data+0xf4005f30>
    5f74:	81c00044 	addi	r7,r16,1
    5f78:	380e913a 	slli	r7,r7,4
    5f7c:	310003cc 	andi	r4,r6,15
    5f80:	02c000c4 	movi	r11,3
    5f84:	11c7883a 	add	r3,r2,r7
    5f88:	29cb883a 	add	r5,r5,r7
    5f8c:	59001f2e 	bgeu	r11,r4,600c <memcpy+0x130>
    5f90:	1813883a 	mov	r9,r3
    5f94:	2811883a 	mov	r8,r5
    5f98:	200f883a 	mov	r7,r4
    5f9c:	42800017 	ldw	r10,0(r8)
    5fa0:	4a400104 	addi	r9,r9,4
    5fa4:	39ffff04 	addi	r7,r7,-4
    5fa8:	4abfff15 	stw	r10,-4(r9)
    5fac:	42000104 	addi	r8,r8,4
    5fb0:	59fffa36 	bltu	r11,r7,5f9c <__alt_mem_Flash_flash_data+0xf4005f9c>
    5fb4:	213fff04 	addi	r4,r4,-4
    5fb8:	2008d0ba 	srli	r4,r4,2
    5fbc:	318000cc 	andi	r6,r6,3
    5fc0:	21000044 	addi	r4,r4,1
    5fc4:	2109883a 	add	r4,r4,r4
    5fc8:	2109883a 	add	r4,r4,r4
    5fcc:	1907883a 	add	r3,r3,r4
    5fd0:	290b883a 	add	r5,r5,r4
    5fd4:	30000626 	beq	r6,zero,5ff0 <memcpy+0x114>
    5fd8:	198d883a 	add	r6,r3,r6
    5fdc:	29c00003 	ldbu	r7,0(r5)
    5fe0:	18c00044 	addi	r3,r3,1
    5fe4:	29400044 	addi	r5,r5,1
    5fe8:	19ffffc5 	stb	r7,-1(r3)
    5fec:	19bffb1e 	bne	r3,r6,5fdc <__alt_mem_Flash_flash_data+0xf4005fdc>
    5ff0:	dc000017 	ldw	r16,0(sp)
    5ff4:	dec00104 	addi	sp,sp,4
    5ff8:	f800283a 	ret
    5ffc:	2007883a 	mov	r3,r4
    6000:	003ff406 	br	5fd4 <__alt_mem_Flash_flash_data+0xf4005fd4>
    6004:	2007883a 	mov	r3,r4
    6008:	003ff306 	br	5fd8 <__alt_mem_Flash_flash_data+0xf4005fd8>
    600c:	200d883a 	mov	r6,r4
    6010:	003ff006 	br	5fd4 <__alt_mem_Flash_flash_data+0xf4005fd4>

00006014 <memset>:
    6014:	20c000cc 	andi	r3,r4,3
    6018:	2005883a 	mov	r2,r4
    601c:	18004326 	beq	r3,zero,612c <memset+0x118>
    6020:	31ffffc4 	addi	r7,r6,-1
    6024:	30004026 	beq	r6,zero,6128 <memset+0x114>
    6028:	2813883a 	mov	r9,r5
    602c:	200d883a 	mov	r6,r4
    6030:	2007883a 	mov	r3,r4
    6034:	00000406 	br	6048 <memset+0x34>
    6038:	3a3fffc4 	addi	r8,r7,-1
    603c:	31800044 	addi	r6,r6,1
    6040:	38003926 	beq	r7,zero,6128 <memset+0x114>
    6044:	400f883a 	mov	r7,r8
    6048:	18c00044 	addi	r3,r3,1
    604c:	32400005 	stb	r9,0(r6)
    6050:	1a0000cc 	andi	r8,r3,3
    6054:	403ff81e 	bne	r8,zero,6038 <__alt_mem_Flash_flash_data+0xf4006038>
    6058:	010000c4 	movi	r4,3
    605c:	21c02d2e 	bgeu	r4,r7,6114 <memset+0x100>
    6060:	29803fcc 	andi	r6,r5,255
    6064:	3008923a 	slli	r4,r6,8
    6068:	218cb03a 	or	r6,r4,r6
    606c:	3008943a 	slli	r4,r6,16
    6070:	218cb03a 	or	r6,r4,r6
    6074:	010003c4 	movi	r4,15
    6078:	21c0182e 	bgeu	r4,r7,60dc <memset+0xc8>
    607c:	3b3ffc04 	addi	r12,r7,-16
    6080:	6018d13a 	srli	r12,r12,4
    6084:	1a000104 	addi	r8,r3,4
    6088:	1ac00204 	addi	r11,r3,8
    608c:	6008913a 	slli	r4,r12,4
    6090:	1a800304 	addi	r10,r3,12
    6094:	1813883a 	mov	r9,r3
    6098:	21000504 	addi	r4,r4,20
    609c:	1909883a 	add	r4,r3,r4
    60a0:	49800015 	stw	r6,0(r9)
    60a4:	41800015 	stw	r6,0(r8)
    60a8:	59800015 	stw	r6,0(r11)
    60ac:	51800015 	stw	r6,0(r10)
    60b0:	42000404 	addi	r8,r8,16
    60b4:	4a400404 	addi	r9,r9,16
    60b8:	5ac00404 	addi	r11,r11,16
    60bc:	52800404 	addi	r10,r10,16
    60c0:	413ff71e 	bne	r8,r4,60a0 <__alt_mem_Flash_flash_data+0xf40060a0>
    60c4:	63000044 	addi	r12,r12,1
    60c8:	6018913a 	slli	r12,r12,4
    60cc:	39c003cc 	andi	r7,r7,15
    60d0:	010000c4 	movi	r4,3
    60d4:	1b07883a 	add	r3,r3,r12
    60d8:	21c00e2e 	bgeu	r4,r7,6114 <memset+0x100>
    60dc:	1813883a 	mov	r9,r3
    60e0:	3811883a 	mov	r8,r7
    60e4:	010000c4 	movi	r4,3
    60e8:	49800015 	stw	r6,0(r9)
    60ec:	423fff04 	addi	r8,r8,-4
    60f0:	4a400104 	addi	r9,r9,4
    60f4:	223ffc36 	bltu	r4,r8,60e8 <__alt_mem_Flash_flash_data+0xf40060e8>
    60f8:	393fff04 	addi	r4,r7,-4
    60fc:	2008d0ba 	srli	r4,r4,2
    6100:	39c000cc 	andi	r7,r7,3
    6104:	21000044 	addi	r4,r4,1
    6108:	2109883a 	add	r4,r4,r4
    610c:	2109883a 	add	r4,r4,r4
    6110:	1907883a 	add	r3,r3,r4
    6114:	38000426 	beq	r7,zero,6128 <memset+0x114>
    6118:	19cf883a 	add	r7,r3,r7
    611c:	19400005 	stb	r5,0(r3)
    6120:	18c00044 	addi	r3,r3,1
    6124:	19fffd1e 	bne	r3,r7,611c <__alt_mem_Flash_flash_data+0xf400611c>
    6128:	f800283a 	ret
    612c:	2007883a 	mov	r3,r4
    6130:	300f883a 	mov	r7,r6
    6134:	003fc806 	br	6058 <__alt_mem_Flash_flash_data+0xf4006058>

00006138 <_Balloc>:
    6138:	20801317 	ldw	r2,76(r4)
    613c:	defffc04 	addi	sp,sp,-16
    6140:	dc400115 	stw	r17,4(sp)
    6144:	dc000015 	stw	r16,0(sp)
    6148:	dfc00315 	stw	ra,12(sp)
    614c:	dc800215 	stw	r18,8(sp)
    6150:	2023883a 	mov	r17,r4
    6154:	2821883a 	mov	r16,r5
    6158:	10000f26 	beq	r2,zero,6198 <_Balloc+0x60>
    615c:	8407883a 	add	r3,r16,r16
    6160:	18c7883a 	add	r3,r3,r3
    6164:	10c7883a 	add	r3,r2,r3
    6168:	18800017 	ldw	r2,0(r3)
    616c:	10001126 	beq	r2,zero,61b4 <_Balloc+0x7c>
    6170:	11000017 	ldw	r4,0(r2)
    6174:	19000015 	stw	r4,0(r3)
    6178:	10000415 	stw	zero,16(r2)
    617c:	10000315 	stw	zero,12(r2)
    6180:	dfc00317 	ldw	ra,12(sp)
    6184:	dc800217 	ldw	r18,8(sp)
    6188:	dc400117 	ldw	r17,4(sp)
    618c:	dc000017 	ldw	r16,0(sp)
    6190:	dec00404 	addi	sp,sp,16
    6194:	f800283a 	ret
    6198:	01400104 	movi	r5,4
    619c:	01800844 	movi	r6,33
    61a0:	000898c0 	call	898c <_calloc_r>
    61a4:	88801315 	stw	r2,76(r17)
    61a8:	103fec1e 	bne	r2,zero,615c <__alt_mem_Flash_flash_data+0xf400615c>
    61ac:	0005883a 	mov	r2,zero
    61b0:	003ff306 	br	6180 <__alt_mem_Flash_flash_data+0xf4006180>
    61b4:	01400044 	movi	r5,1
    61b8:	2c24983a 	sll	r18,r5,r16
    61bc:	8809883a 	mov	r4,r17
    61c0:	91800144 	addi	r6,r18,5
    61c4:	318d883a 	add	r6,r6,r6
    61c8:	318d883a 	add	r6,r6,r6
    61cc:	000898c0 	call	898c <_calloc_r>
    61d0:	103ff626 	beq	r2,zero,61ac <__alt_mem_Flash_flash_data+0xf40061ac>
    61d4:	14000115 	stw	r16,4(r2)
    61d8:	14800215 	stw	r18,8(r2)
    61dc:	003fe606 	br	6178 <__alt_mem_Flash_flash_data+0xf4006178>

000061e0 <_Bfree>:
    61e0:	28000826 	beq	r5,zero,6204 <_Bfree+0x24>
    61e4:	28c00117 	ldw	r3,4(r5)
    61e8:	20801317 	ldw	r2,76(r4)
    61ec:	18c7883a 	add	r3,r3,r3
    61f0:	18c7883a 	add	r3,r3,r3
    61f4:	10c5883a 	add	r2,r2,r3
    61f8:	10c00017 	ldw	r3,0(r2)
    61fc:	28c00015 	stw	r3,0(r5)
    6200:	11400015 	stw	r5,0(r2)
    6204:	f800283a 	ret

00006208 <__multadd>:
    6208:	defffa04 	addi	sp,sp,-24
    620c:	dc000115 	stw	r16,4(sp)
    6210:	2c000417 	ldw	r16,16(r5)
    6214:	dc800315 	stw	r18,12(sp)
    6218:	dc400215 	stw	r17,8(sp)
    621c:	dfc00515 	stw	ra,20(sp)
    6220:	dcc00415 	stw	r19,16(sp)
    6224:	2823883a 	mov	r17,r5
    6228:	2025883a 	mov	r18,r4
    622c:	2a400504 	addi	r9,r5,20
    6230:	0015883a 	mov	r10,zero
    6234:	4a000017 	ldw	r8,0(r9)
    6238:	4a400104 	addi	r9,r9,4
    623c:	52800044 	addi	r10,r10,1
    6240:	40ffffcc 	andi	r3,r8,65535
    6244:	1987383a 	mul	r3,r3,r6
    6248:	4010d43a 	srli	r8,r8,16
    624c:	19cf883a 	add	r7,r3,r7
    6250:	4191383a 	mul	r8,r8,r6
    6254:	3816d43a 	srli	r11,r7,16
    6258:	38ffffcc 	andi	r3,r7,65535
    625c:	5a0f883a 	add	r7,r11,r8
    6260:	3810943a 	slli	r8,r7,16
    6264:	380ed43a 	srli	r7,r7,16
    6268:	40c7883a 	add	r3,r8,r3
    626c:	48ffff15 	stw	r3,-4(r9)
    6270:	543ff016 	blt	r10,r16,6234 <__alt_mem_Flash_flash_data+0xf4006234>
    6274:	38000926 	beq	r7,zero,629c <__multadd+0x94>
    6278:	88800217 	ldw	r2,8(r17)
    627c:	80800f0e 	bge	r16,r2,62bc <__multadd+0xb4>
    6280:	80800144 	addi	r2,r16,5
    6284:	1085883a 	add	r2,r2,r2
    6288:	1085883a 	add	r2,r2,r2
    628c:	8885883a 	add	r2,r17,r2
    6290:	11c00015 	stw	r7,0(r2)
    6294:	84000044 	addi	r16,r16,1
    6298:	8c000415 	stw	r16,16(r17)
    629c:	8805883a 	mov	r2,r17
    62a0:	dfc00517 	ldw	ra,20(sp)
    62a4:	dcc00417 	ldw	r19,16(sp)
    62a8:	dc800317 	ldw	r18,12(sp)
    62ac:	dc400217 	ldw	r17,8(sp)
    62b0:	dc000117 	ldw	r16,4(sp)
    62b4:	dec00604 	addi	sp,sp,24
    62b8:	f800283a 	ret
    62bc:	89400117 	ldw	r5,4(r17)
    62c0:	9009883a 	mov	r4,r18
    62c4:	d9c00015 	stw	r7,0(sp)
    62c8:	29400044 	addi	r5,r5,1
    62cc:	00061380 	call	6138 <_Balloc>
    62d0:	89800417 	ldw	r6,16(r17)
    62d4:	11000304 	addi	r4,r2,12
    62d8:	89400304 	addi	r5,r17,12
    62dc:	31800084 	addi	r6,r6,2
    62e0:	318d883a 	add	r6,r6,r6
    62e4:	318d883a 	add	r6,r6,r6
    62e8:	1027883a 	mov	r19,r2
    62ec:	0005edc0 	call	5edc <memcpy>
    62f0:	d9c00017 	ldw	r7,0(sp)
    62f4:	88000a26 	beq	r17,zero,6320 <__multadd+0x118>
    62f8:	89000117 	ldw	r4,4(r17)
    62fc:	90c01317 	ldw	r3,76(r18)
    6300:	2109883a 	add	r4,r4,r4
    6304:	2109883a 	add	r4,r4,r4
    6308:	1907883a 	add	r3,r3,r4
    630c:	18800017 	ldw	r2,0(r3)
    6310:	88800015 	stw	r2,0(r17)
    6314:	1c400015 	stw	r17,0(r3)
    6318:	9823883a 	mov	r17,r19
    631c:	003fd806 	br	6280 <__alt_mem_Flash_flash_data+0xf4006280>
    6320:	9823883a 	mov	r17,r19
    6324:	003fd606 	br	6280 <__alt_mem_Flash_flash_data+0xf4006280>

00006328 <__s2b>:
    6328:	defff904 	addi	sp,sp,-28
    632c:	dc400115 	stw	r17,4(sp)
    6330:	dc000015 	stw	r16,0(sp)
    6334:	2023883a 	mov	r17,r4
    6338:	2821883a 	mov	r16,r5
    633c:	39000204 	addi	r4,r7,8
    6340:	01400244 	movi	r5,9
    6344:	dcc00315 	stw	r19,12(sp)
    6348:	dc800215 	stw	r18,8(sp)
    634c:	dfc00615 	stw	ra,24(sp)
    6350:	dd400515 	stw	r21,20(sp)
    6354:	dd000415 	stw	r20,16(sp)
    6358:	3825883a 	mov	r18,r7
    635c:	3027883a 	mov	r19,r6
    6360:	000a9140 	call	a914 <__divsi3>
    6364:	00c00044 	movi	r3,1
    6368:	000b883a 	mov	r5,zero
    636c:	1880030e 	bge	r3,r2,637c <__s2b+0x54>
    6370:	18c7883a 	add	r3,r3,r3
    6374:	29400044 	addi	r5,r5,1
    6378:	18bffd16 	blt	r3,r2,6370 <__alt_mem_Flash_flash_data+0xf4006370>
    637c:	8809883a 	mov	r4,r17
    6380:	00061380 	call	6138 <_Balloc>
    6384:	d8c00717 	ldw	r3,28(sp)
    6388:	10c00515 	stw	r3,20(r2)
    638c:	00c00044 	movi	r3,1
    6390:	10c00415 	stw	r3,16(r2)
    6394:	00c00244 	movi	r3,9
    6398:	1cc0210e 	bge	r3,r19,6420 <__s2b+0xf8>
    639c:	80eb883a 	add	r21,r16,r3
    63a0:	a829883a 	mov	r20,r21
    63a4:	84e1883a 	add	r16,r16,r19
    63a8:	a1c00007 	ldb	r7,0(r20)
    63ac:	8809883a 	mov	r4,r17
    63b0:	a5000044 	addi	r20,r20,1
    63b4:	100b883a 	mov	r5,r2
    63b8:	01800284 	movi	r6,10
    63bc:	39fff404 	addi	r7,r7,-48
    63c0:	00062080 	call	6208 <__multadd>
    63c4:	a43ff81e 	bne	r20,r16,63a8 <__alt_mem_Flash_flash_data+0xf40063a8>
    63c8:	ace1883a 	add	r16,r21,r19
    63cc:	843ffe04 	addi	r16,r16,-8
    63d0:	9c800a0e 	bge	r19,r18,63fc <__s2b+0xd4>
    63d4:	94e5c83a 	sub	r18,r18,r19
    63d8:	84a5883a 	add	r18,r16,r18
    63dc:	81c00007 	ldb	r7,0(r16)
    63e0:	8809883a 	mov	r4,r17
    63e4:	84000044 	addi	r16,r16,1
    63e8:	100b883a 	mov	r5,r2
    63ec:	01800284 	movi	r6,10
    63f0:	39fff404 	addi	r7,r7,-48
    63f4:	00062080 	call	6208 <__multadd>
    63f8:	84bff81e 	bne	r16,r18,63dc <__alt_mem_Flash_flash_data+0xf40063dc>
    63fc:	dfc00617 	ldw	ra,24(sp)
    6400:	dd400517 	ldw	r21,20(sp)
    6404:	dd000417 	ldw	r20,16(sp)
    6408:	dcc00317 	ldw	r19,12(sp)
    640c:	dc800217 	ldw	r18,8(sp)
    6410:	dc400117 	ldw	r17,4(sp)
    6414:	dc000017 	ldw	r16,0(sp)
    6418:	dec00704 	addi	sp,sp,28
    641c:	f800283a 	ret
    6420:	84000284 	addi	r16,r16,10
    6424:	1827883a 	mov	r19,r3
    6428:	003fe906 	br	63d0 <__alt_mem_Flash_flash_data+0xf40063d0>

0000642c <__hi0bits>:
    642c:	20bfffec 	andhi	r2,r4,65535
    6430:	1000141e 	bne	r2,zero,6484 <__hi0bits+0x58>
    6434:	2008943a 	slli	r4,r4,16
    6438:	00800404 	movi	r2,16
    643c:	20ffc02c 	andhi	r3,r4,65280
    6440:	1800021e 	bne	r3,zero,644c <__hi0bits+0x20>
    6444:	2008923a 	slli	r4,r4,8
    6448:	10800204 	addi	r2,r2,8
    644c:	20fc002c 	andhi	r3,r4,61440
    6450:	1800021e 	bne	r3,zero,645c <__hi0bits+0x30>
    6454:	2008913a 	slli	r4,r4,4
    6458:	10800104 	addi	r2,r2,4
    645c:	20f0002c 	andhi	r3,r4,49152
    6460:	1800031e 	bne	r3,zero,6470 <__hi0bits+0x44>
    6464:	2109883a 	add	r4,r4,r4
    6468:	10800084 	addi	r2,r2,2
    646c:	2109883a 	add	r4,r4,r4
    6470:	20000316 	blt	r4,zero,6480 <__hi0bits+0x54>
    6474:	2110002c 	andhi	r4,r4,16384
    6478:	2000041e 	bne	r4,zero,648c <__hi0bits+0x60>
    647c:	00800804 	movi	r2,32
    6480:	f800283a 	ret
    6484:	0005883a 	mov	r2,zero
    6488:	003fec06 	br	643c <__alt_mem_Flash_flash_data+0xf400643c>
    648c:	10800044 	addi	r2,r2,1
    6490:	f800283a 	ret

00006494 <__lo0bits>:
    6494:	20c00017 	ldw	r3,0(r4)
    6498:	188001cc 	andi	r2,r3,7
    649c:	10000826 	beq	r2,zero,64c0 <__lo0bits+0x2c>
    64a0:	1880004c 	andi	r2,r3,1
    64a4:	1000211e 	bne	r2,zero,652c <__lo0bits+0x98>
    64a8:	1880008c 	andi	r2,r3,2
    64ac:	1000211e 	bne	r2,zero,6534 <__lo0bits+0xa0>
    64b0:	1806d0ba 	srli	r3,r3,2
    64b4:	00800084 	movi	r2,2
    64b8:	20c00015 	stw	r3,0(r4)
    64bc:	f800283a 	ret
    64c0:	18bfffcc 	andi	r2,r3,65535
    64c4:	10001326 	beq	r2,zero,6514 <__lo0bits+0x80>
    64c8:	0005883a 	mov	r2,zero
    64cc:	19403fcc 	andi	r5,r3,255
    64d0:	2800021e 	bne	r5,zero,64dc <__lo0bits+0x48>
    64d4:	1806d23a 	srli	r3,r3,8
    64d8:	10800204 	addi	r2,r2,8
    64dc:	194003cc 	andi	r5,r3,15
    64e0:	2800021e 	bne	r5,zero,64ec <__lo0bits+0x58>
    64e4:	1806d13a 	srli	r3,r3,4
    64e8:	10800104 	addi	r2,r2,4
    64ec:	194000cc 	andi	r5,r3,3
    64f0:	2800021e 	bne	r5,zero,64fc <__lo0bits+0x68>
    64f4:	1806d0ba 	srli	r3,r3,2
    64f8:	10800084 	addi	r2,r2,2
    64fc:	1940004c 	andi	r5,r3,1
    6500:	2800081e 	bne	r5,zero,6524 <__lo0bits+0x90>
    6504:	1806d07a 	srli	r3,r3,1
    6508:	1800051e 	bne	r3,zero,6520 <__lo0bits+0x8c>
    650c:	00800804 	movi	r2,32
    6510:	f800283a 	ret
    6514:	1806d43a 	srli	r3,r3,16
    6518:	00800404 	movi	r2,16
    651c:	003feb06 	br	64cc <__alt_mem_Flash_flash_data+0xf40064cc>
    6520:	10800044 	addi	r2,r2,1
    6524:	20c00015 	stw	r3,0(r4)
    6528:	f800283a 	ret
    652c:	0005883a 	mov	r2,zero
    6530:	f800283a 	ret
    6534:	1806d07a 	srli	r3,r3,1
    6538:	00800044 	movi	r2,1
    653c:	20c00015 	stw	r3,0(r4)
    6540:	f800283a 	ret

00006544 <__i2b>:
    6544:	defffd04 	addi	sp,sp,-12
    6548:	dc000015 	stw	r16,0(sp)
    654c:	04000044 	movi	r16,1
    6550:	dc400115 	stw	r17,4(sp)
    6554:	2823883a 	mov	r17,r5
    6558:	800b883a 	mov	r5,r16
    655c:	dfc00215 	stw	ra,8(sp)
    6560:	00061380 	call	6138 <_Balloc>
    6564:	14400515 	stw	r17,20(r2)
    6568:	14000415 	stw	r16,16(r2)
    656c:	dfc00217 	ldw	ra,8(sp)
    6570:	dc400117 	ldw	r17,4(sp)
    6574:	dc000017 	ldw	r16,0(sp)
    6578:	dec00304 	addi	sp,sp,12
    657c:	f800283a 	ret

00006580 <__multiply>:
    6580:	defffa04 	addi	sp,sp,-24
    6584:	dcc00315 	stw	r19,12(sp)
    6588:	dc800215 	stw	r18,8(sp)
    658c:	2cc00417 	ldw	r19,16(r5)
    6590:	34800417 	ldw	r18,16(r6)
    6594:	dd000415 	stw	r20,16(sp)
    6598:	dc400115 	stw	r17,4(sp)
    659c:	dfc00515 	stw	ra,20(sp)
    65a0:	dc000015 	stw	r16,0(sp)
    65a4:	2829883a 	mov	r20,r5
    65a8:	3023883a 	mov	r17,r6
    65ac:	9c807016 	blt	r19,r18,6770 <__multiply+0x1f0>
    65b0:	9005883a 	mov	r2,r18
    65b4:	9825883a 	mov	r18,r19
    65b8:	1027883a 	mov	r19,r2
    65bc:	a0800217 	ldw	r2,8(r20)
    65c0:	94e1883a 	add	r16,r18,r19
    65c4:	a1400117 	ldw	r5,4(r20)
    65c8:	1400010e 	bge	r2,r16,65d0 <__multiply+0x50>
    65cc:	29400044 	addi	r5,r5,1
    65d0:	00061380 	call	6138 <_Balloc>
    65d4:	8417883a 	add	r11,r16,r16
    65d8:	13000504 	addi	r12,r2,20
    65dc:	5ad7883a 	add	r11,r11,r11
    65e0:	62d7883a 	add	r11,r12,r11
    65e4:	6007883a 	mov	r3,r12
    65e8:	62c0032e 	bgeu	r12,r11,65f8 <__multiply+0x78>
    65ec:	18000015 	stw	zero,0(r3)
    65f0:	18c00104 	addi	r3,r3,4
    65f4:	1afffd36 	bltu	r3,r11,65ec <__alt_mem_Flash_flash_data+0xf40065ec>
    65f8:	9ce7883a 	add	r19,r19,r19
    65fc:	94a5883a 	add	r18,r18,r18
    6600:	89800504 	addi	r6,r17,20
    6604:	9ce7883a 	add	r19,r19,r19
    6608:	a3800504 	addi	r14,r20,20
    660c:	94a5883a 	add	r18,r18,r18
    6610:	34db883a 	add	r13,r6,r19
    6614:	7495883a 	add	r10,r14,r18
    6618:	3340422e 	bgeu	r6,r13,6724 <__multiply+0x1a4>
    661c:	34400017 	ldw	r17,0(r6)
    6620:	8cbfffcc 	andi	r18,r17,65535
    6624:	90001b26 	beq	r18,zero,6694 <__multiply+0x114>
    6628:	6013883a 	mov	r9,r12
    662c:	7023883a 	mov	r17,r14
    6630:	0011883a 	mov	r8,zero
    6634:	88c00017 	ldw	r3,0(r17)
    6638:	4bc00017 	ldw	r15,0(r9)
    663c:	8c400104 	addi	r17,r17,4
    6640:	19ffffcc 	andi	r7,r3,65535
    6644:	3c8f383a 	mul	r7,r7,r18
    6648:	1808d43a 	srli	r4,r3,16
    664c:	797fffcc 	andi	r5,r15,65535
    6650:	29cb883a 	add	r5,r5,r7
    6654:	2a0b883a 	add	r5,r5,r8
    6658:	2489383a 	mul	r4,r4,r18
    665c:	7806d43a 	srli	r3,r15,16
    6660:	2810d43a 	srli	r8,r5,16
    6664:	297fffcc 	andi	r5,r5,65535
    6668:	1907883a 	add	r3,r3,r4
    666c:	1a07883a 	add	r3,r3,r8
    6670:	1808943a 	slli	r4,r3,16
    6674:	480f883a 	mov	r7,r9
    6678:	1810d43a 	srli	r8,r3,16
    667c:	214ab03a 	or	r5,r4,r5
    6680:	49400015 	stw	r5,0(r9)
    6684:	4a400104 	addi	r9,r9,4
    6688:	8abfea36 	bltu	r17,r10,6634 <__alt_mem_Flash_flash_data+0xf4006634>
    668c:	3a000115 	stw	r8,4(r7)
    6690:	34400017 	ldw	r17,0(r6)
    6694:	8822d43a 	srli	r17,r17,16
    6698:	88001f26 	beq	r17,zero,6718 <__multiply+0x198>
    669c:	60c00017 	ldw	r3,0(r12)
    66a0:	7013883a 	mov	r9,r14
    66a4:	601f883a 	mov	r15,r12
    66a8:	1811883a 	mov	r8,r3
    66ac:	6027883a 	mov	r19,r12
    66b0:	000f883a 	mov	r7,zero
    66b4:	00000106 	br	66bc <__multiply+0x13c>
    66b8:	9027883a 	mov	r19,r18
    66bc:	4940000b 	ldhu	r5,0(r9)
    66c0:	4010d43a 	srli	r8,r8,16
    66c4:	193fffcc 	andi	r4,r3,65535
    66c8:	2c4b383a 	mul	r5,r5,r17
    66cc:	7bc00104 	addi	r15,r15,4
    66d0:	4a400104 	addi	r9,r9,4
    66d4:	2a0b883a 	add	r5,r5,r8
    66d8:	29cb883a 	add	r5,r5,r7
    66dc:	2806943a 	slli	r3,r5,16
    66e0:	9c800104 	addi	r18,r19,4
    66e4:	280ad43a 	srli	r5,r5,16
    66e8:	1908b03a 	or	r4,r3,r4
    66ec:	793fff15 	stw	r4,-4(r15)
    66f0:	48ffff17 	ldw	r3,-4(r9)
    66f4:	92000017 	ldw	r8,0(r18)
    66f8:	1806d43a 	srli	r3,r3,16
    66fc:	413fffcc 	andi	r4,r8,65535
    6700:	1c47383a 	mul	r3,r3,r17
    6704:	1907883a 	add	r3,r3,r4
    6708:	1947883a 	add	r3,r3,r5
    670c:	180ed43a 	srli	r7,r3,16
    6710:	4abfe936 	bltu	r9,r10,66b8 <__alt_mem_Flash_flash_data+0xf40066b8>
    6714:	98c00115 	stw	r3,4(r19)
    6718:	31800104 	addi	r6,r6,4
    671c:	63000104 	addi	r12,r12,4
    6720:	337fbe36 	bltu	r6,r13,661c <__alt_mem_Flash_flash_data+0xf400661c>
    6724:	0400090e 	bge	zero,r16,674c <__multiply+0x1cc>
    6728:	58ffff17 	ldw	r3,-4(r11)
    672c:	5affff04 	addi	r11,r11,-4
    6730:	18000326 	beq	r3,zero,6740 <__multiply+0x1c0>
    6734:	00000506 	br	674c <__multiply+0x1cc>
    6738:	58c00017 	ldw	r3,0(r11)
    673c:	1800031e 	bne	r3,zero,674c <__multiply+0x1cc>
    6740:	843fffc4 	addi	r16,r16,-1
    6744:	5affff04 	addi	r11,r11,-4
    6748:	803ffb1e 	bne	r16,zero,6738 <__alt_mem_Flash_flash_data+0xf4006738>
    674c:	14000415 	stw	r16,16(r2)
    6750:	dfc00517 	ldw	ra,20(sp)
    6754:	dd000417 	ldw	r20,16(sp)
    6758:	dcc00317 	ldw	r19,12(sp)
    675c:	dc800217 	ldw	r18,8(sp)
    6760:	dc400117 	ldw	r17,4(sp)
    6764:	dc000017 	ldw	r16,0(sp)
    6768:	dec00604 	addi	sp,sp,24
    676c:	f800283a 	ret
    6770:	3029883a 	mov	r20,r6
    6774:	2823883a 	mov	r17,r5
    6778:	003f9006 	br	65bc <__alt_mem_Flash_flash_data+0xf40065bc>

0000677c <__pow5mult>:
    677c:	defffa04 	addi	sp,sp,-24
    6780:	dcc00315 	stw	r19,12(sp)
    6784:	dc800215 	stw	r18,8(sp)
    6788:	dc000015 	stw	r16,0(sp)
    678c:	dfc00515 	stw	ra,20(sp)
    6790:	dd000415 	stw	r20,16(sp)
    6794:	dc400115 	stw	r17,4(sp)
    6798:	308000cc 	andi	r2,r6,3
    679c:	3021883a 	mov	r16,r6
    67a0:	2027883a 	mov	r19,r4
    67a4:	2825883a 	mov	r18,r5
    67a8:	10002e1e 	bne	r2,zero,6864 <__pow5mult+0xe8>
    67ac:	8021d0ba 	srai	r16,r16,2
    67b0:	80001a26 	beq	r16,zero,681c <__pow5mult+0xa0>
    67b4:	9c401217 	ldw	r17,72(r19)
    67b8:	8800061e 	bne	r17,zero,67d4 <__pow5mult+0x58>
    67bc:	00003406 	br	6890 <__pow5mult+0x114>
    67c0:	8021d07a 	srai	r16,r16,1
    67c4:	80001526 	beq	r16,zero,681c <__pow5mult+0xa0>
    67c8:	88800017 	ldw	r2,0(r17)
    67cc:	10001c26 	beq	r2,zero,6840 <__pow5mult+0xc4>
    67d0:	1023883a 	mov	r17,r2
    67d4:	80c0004c 	andi	r3,r16,1
    67d8:	183ff926 	beq	r3,zero,67c0 <__alt_mem_Flash_flash_data+0xf40067c0>
    67dc:	900b883a 	mov	r5,r18
    67e0:	880d883a 	mov	r6,r17
    67e4:	9809883a 	mov	r4,r19
    67e8:	00065800 	call	6580 <__multiply>
    67ec:	90001b26 	beq	r18,zero,685c <__pow5mult+0xe0>
    67f0:	91c00117 	ldw	r7,4(r18)
    67f4:	98c01317 	ldw	r3,76(r19)
    67f8:	8021d07a 	srai	r16,r16,1
    67fc:	39cf883a 	add	r7,r7,r7
    6800:	39cf883a 	add	r7,r7,r7
    6804:	19c7883a 	add	r3,r3,r7
    6808:	19000017 	ldw	r4,0(r3)
    680c:	91000015 	stw	r4,0(r18)
    6810:	1c800015 	stw	r18,0(r3)
    6814:	1025883a 	mov	r18,r2
    6818:	803feb1e 	bne	r16,zero,67c8 <__alt_mem_Flash_flash_data+0xf40067c8>
    681c:	9005883a 	mov	r2,r18
    6820:	dfc00517 	ldw	ra,20(sp)
    6824:	dd000417 	ldw	r20,16(sp)
    6828:	dcc00317 	ldw	r19,12(sp)
    682c:	dc800217 	ldw	r18,8(sp)
    6830:	dc400117 	ldw	r17,4(sp)
    6834:	dc000017 	ldw	r16,0(sp)
    6838:	dec00604 	addi	sp,sp,24
    683c:	f800283a 	ret
    6840:	9809883a 	mov	r4,r19
    6844:	880b883a 	mov	r5,r17
    6848:	880d883a 	mov	r6,r17
    684c:	00065800 	call	6580 <__multiply>
    6850:	88800015 	stw	r2,0(r17)
    6854:	10000015 	stw	zero,0(r2)
    6858:	003fdd06 	br	67d0 <__alt_mem_Flash_flash_data+0xf40067d0>
    685c:	1025883a 	mov	r18,r2
    6860:	003fd706 	br	67c0 <__alt_mem_Flash_flash_data+0xf40067c0>
    6864:	10bfffc4 	addi	r2,r2,-1
    6868:	1085883a 	add	r2,r2,r2
    686c:	00c000b4 	movhi	r3,2
    6870:	18e5d404 	addi	r3,r3,-26800
    6874:	1085883a 	add	r2,r2,r2
    6878:	1885883a 	add	r2,r3,r2
    687c:	11800017 	ldw	r6,0(r2)
    6880:	000f883a 	mov	r7,zero
    6884:	00062080 	call	6208 <__multadd>
    6888:	1025883a 	mov	r18,r2
    688c:	003fc706 	br	67ac <__alt_mem_Flash_flash_data+0xf40067ac>
    6890:	05000044 	movi	r20,1
    6894:	9809883a 	mov	r4,r19
    6898:	a00b883a 	mov	r5,r20
    689c:	00061380 	call	6138 <_Balloc>
    68a0:	1023883a 	mov	r17,r2
    68a4:	00809c44 	movi	r2,625
    68a8:	88800515 	stw	r2,20(r17)
    68ac:	8d000415 	stw	r20,16(r17)
    68b0:	9c401215 	stw	r17,72(r19)
    68b4:	88000015 	stw	zero,0(r17)
    68b8:	003fc606 	br	67d4 <__alt_mem_Flash_flash_data+0xf40067d4>

000068bc <__lshift>:
    68bc:	defff904 	addi	sp,sp,-28
    68c0:	dd000415 	stw	r20,16(sp)
    68c4:	dcc00315 	stw	r19,12(sp)
    68c8:	3029d17a 	srai	r20,r6,5
    68cc:	2cc00417 	ldw	r19,16(r5)
    68d0:	28800217 	ldw	r2,8(r5)
    68d4:	dd400515 	stw	r21,20(sp)
    68d8:	a4e7883a 	add	r19,r20,r19
    68dc:	dc800215 	stw	r18,8(sp)
    68e0:	dc400115 	stw	r17,4(sp)
    68e4:	dc000015 	stw	r16,0(sp)
    68e8:	dfc00615 	stw	ra,24(sp)
    68ec:	9c000044 	addi	r16,r19,1
    68f0:	2823883a 	mov	r17,r5
    68f4:	302b883a 	mov	r21,r6
    68f8:	2025883a 	mov	r18,r4
    68fc:	29400117 	ldw	r5,4(r5)
    6900:	1400030e 	bge	r2,r16,6910 <__lshift+0x54>
    6904:	1085883a 	add	r2,r2,r2
    6908:	29400044 	addi	r5,r5,1
    690c:	143ffd16 	blt	r2,r16,6904 <__alt_mem_Flash_flash_data+0xf4006904>
    6910:	9009883a 	mov	r4,r18
    6914:	00061380 	call	6138 <_Balloc>
    6918:	11c00504 	addi	r7,r2,20
    691c:	0500090e 	bge	zero,r20,6944 <__lshift+0x88>
    6920:	3811883a 	mov	r8,r7
    6924:	0007883a 	mov	r3,zero
    6928:	40000015 	stw	zero,0(r8)
    692c:	18c00044 	addi	r3,r3,1
    6930:	42000104 	addi	r8,r8,4
    6934:	1d3ffc1e 	bne	r3,r20,6928 <__alt_mem_Flash_flash_data+0xf4006928>
    6938:	18c7883a 	add	r3,r3,r3
    693c:	18c7883a 	add	r3,r3,r3
    6940:	38cf883a 	add	r7,r7,r3
    6944:	89000417 	ldw	r4,16(r17)
    6948:	88c00504 	addi	r3,r17,20
    694c:	a98007cc 	andi	r6,r21,31
    6950:	2109883a 	add	r4,r4,r4
    6954:	2109883a 	add	r4,r4,r4
    6958:	1909883a 	add	r4,r3,r4
    695c:	30002326 	beq	r6,zero,69ec <__lshift+0x130>
    6960:	01400804 	movi	r5,32
    6964:	298bc83a 	sub	r5,r5,r6
    6968:	0013883a 	mov	r9,zero
    696c:	1a000017 	ldw	r8,0(r3)
    6970:	3815883a 	mov	r10,r7
    6974:	39c00104 	addi	r7,r7,4
    6978:	4190983a 	sll	r8,r8,r6
    697c:	18c00104 	addi	r3,r3,4
    6980:	4a10b03a 	or	r8,r9,r8
    6984:	3a3fff15 	stw	r8,-4(r7)
    6988:	1a3fff17 	ldw	r8,-4(r3)
    698c:	4152d83a 	srl	r9,r8,r5
    6990:	193ff636 	bltu	r3,r4,696c <__alt_mem_Flash_flash_data+0xf400696c>
    6994:	52400115 	stw	r9,4(r10)
    6998:	48001a1e 	bne	r9,zero,6a04 <__lshift+0x148>
    699c:	843fffc4 	addi	r16,r16,-1
    69a0:	14000415 	stw	r16,16(r2)
    69a4:	88000826 	beq	r17,zero,69c8 <__lshift+0x10c>
    69a8:	89000117 	ldw	r4,4(r17)
    69ac:	90c01317 	ldw	r3,76(r18)
    69b0:	2109883a 	add	r4,r4,r4
    69b4:	2109883a 	add	r4,r4,r4
    69b8:	1907883a 	add	r3,r3,r4
    69bc:	19000017 	ldw	r4,0(r3)
    69c0:	89000015 	stw	r4,0(r17)
    69c4:	1c400015 	stw	r17,0(r3)
    69c8:	dfc00617 	ldw	ra,24(sp)
    69cc:	dd400517 	ldw	r21,20(sp)
    69d0:	dd000417 	ldw	r20,16(sp)
    69d4:	dcc00317 	ldw	r19,12(sp)
    69d8:	dc800217 	ldw	r18,8(sp)
    69dc:	dc400117 	ldw	r17,4(sp)
    69e0:	dc000017 	ldw	r16,0(sp)
    69e4:	dec00704 	addi	sp,sp,28
    69e8:	f800283a 	ret
    69ec:	19400017 	ldw	r5,0(r3)
    69f0:	39c00104 	addi	r7,r7,4
    69f4:	18c00104 	addi	r3,r3,4
    69f8:	397fff15 	stw	r5,-4(r7)
    69fc:	193ffb36 	bltu	r3,r4,69ec <__alt_mem_Flash_flash_data+0xf40069ec>
    6a00:	003fe606 	br	699c <__alt_mem_Flash_flash_data+0xf400699c>
    6a04:	9c000084 	addi	r16,r19,2
    6a08:	003fe406 	br	699c <__alt_mem_Flash_flash_data+0xf400699c>

00006a0c <__mcmp>:
    6a0c:	20800417 	ldw	r2,16(r4)
    6a10:	28c00417 	ldw	r3,16(r5)
    6a14:	10c5c83a 	sub	r2,r2,r3
    6a18:	1000111e 	bne	r2,zero,6a60 <__mcmp+0x54>
    6a1c:	18c7883a 	add	r3,r3,r3
    6a20:	18c7883a 	add	r3,r3,r3
    6a24:	21000504 	addi	r4,r4,20
    6a28:	29400504 	addi	r5,r5,20
    6a2c:	20c5883a 	add	r2,r4,r3
    6a30:	28cb883a 	add	r5,r5,r3
    6a34:	00000106 	br	6a3c <__mcmp+0x30>
    6a38:	20800a2e 	bgeu	r4,r2,6a64 <__mcmp+0x58>
    6a3c:	10bfff04 	addi	r2,r2,-4
    6a40:	297fff04 	addi	r5,r5,-4
    6a44:	11800017 	ldw	r6,0(r2)
    6a48:	28c00017 	ldw	r3,0(r5)
    6a4c:	30fffa26 	beq	r6,r3,6a38 <__alt_mem_Flash_flash_data+0xf4006a38>
    6a50:	30c00236 	bltu	r6,r3,6a5c <__mcmp+0x50>
    6a54:	00800044 	movi	r2,1
    6a58:	f800283a 	ret
    6a5c:	00bfffc4 	movi	r2,-1
    6a60:	f800283a 	ret
    6a64:	0005883a 	mov	r2,zero
    6a68:	f800283a 	ret

00006a6c <__mdiff>:
    6a6c:	defffb04 	addi	sp,sp,-20
    6a70:	dc000015 	stw	r16,0(sp)
    6a74:	2821883a 	mov	r16,r5
    6a78:	dcc00315 	stw	r19,12(sp)
    6a7c:	300b883a 	mov	r5,r6
    6a80:	2027883a 	mov	r19,r4
    6a84:	8009883a 	mov	r4,r16
    6a88:	dc800215 	stw	r18,8(sp)
    6a8c:	dfc00415 	stw	ra,16(sp)
    6a90:	dc400115 	stw	r17,4(sp)
    6a94:	3025883a 	mov	r18,r6
    6a98:	0006a0c0 	call	6a0c <__mcmp>
    6a9c:	10005226 	beq	r2,zero,6be8 <__mdiff+0x17c>
    6aa0:	10004c16 	blt	r2,zero,6bd4 <__mdiff+0x168>
    6aa4:	0023883a 	mov	r17,zero
    6aa8:	81400117 	ldw	r5,4(r16)
    6aac:	9809883a 	mov	r4,r19
    6ab0:	00061380 	call	6138 <_Balloc>
    6ab4:	83400417 	ldw	r13,16(r16)
    6ab8:	93800417 	ldw	r14,16(r18)
    6abc:	81000504 	addi	r4,r16,20
    6ac0:	6b59883a 	add	r12,r13,r13
    6ac4:	739d883a 	add	r14,r14,r14
    6ac8:	6319883a 	add	r12,r12,r12
    6acc:	91800504 	addi	r6,r18,20
    6ad0:	739d883a 	add	r14,r14,r14
    6ad4:	14400315 	stw	r17,12(r2)
    6ad8:	2319883a 	add	r12,r4,r12
    6adc:	339d883a 	add	r14,r6,r14
    6ae0:	12400504 	addi	r9,r2,20
    6ae4:	0007883a 	mov	r3,zero
    6ae8:	22000017 	ldw	r8,0(r4)
    6aec:	32800017 	ldw	r10,0(r6)
    6af0:	4ac00104 	addi	r11,r9,4
    6af4:	41ffffcc 	andi	r7,r8,65535
    6af8:	38c7883a 	add	r3,r7,r3
    6afc:	51ffffcc 	andi	r7,r10,65535
    6b00:	19cfc83a 	sub	r7,r3,r7
    6b04:	4010d43a 	srli	r8,r8,16
    6b08:	5014d43a 	srli	r10,r10,16
    6b0c:	3807d43a 	srai	r3,r7,16
    6b10:	39ffffcc 	andi	r7,r7,65535
    6b14:	4291c83a 	sub	r8,r8,r10
    6b18:	40c7883a 	add	r3,r8,r3
    6b1c:	1810943a 	slli	r8,r3,16
    6b20:	31800104 	addi	r6,r6,4
    6b24:	21000104 	addi	r4,r4,4
    6b28:	41ceb03a 	or	r7,r8,r7
    6b2c:	49c00015 	stw	r7,0(r9)
    6b30:	1807d43a 	srai	r3,r3,16
    6b34:	580b883a 	mov	r5,r11
    6b38:	5813883a 	mov	r9,r11
    6b3c:	33bfea36 	bltu	r6,r14,6ae8 <__alt_mem_Flash_flash_data+0xf4006ae8>
    6b40:	2011883a 	mov	r8,r4
    6b44:	2300152e 	bgeu	r4,r12,6b9c <__mdiff+0x130>
    6b48:	21400017 	ldw	r5,0(r4)
    6b4c:	4a400104 	addi	r9,r9,4
    6b50:	21000104 	addi	r4,r4,4
    6b54:	29ffffcc 	andi	r7,r5,65535
    6b58:	38c7883a 	add	r3,r7,r3
    6b5c:	280ad43a 	srli	r5,r5,16
    6b60:	180dd43a 	srai	r6,r3,16
    6b64:	19ffffcc 	andi	r7,r3,65535
    6b68:	3147883a 	add	r3,r6,r5
    6b6c:	180a943a 	slli	r5,r3,16
    6b70:	1807d43a 	srai	r3,r3,16
    6b74:	29ceb03a 	or	r7,r5,r7
    6b78:	49ffff15 	stw	r7,-4(r9)
    6b7c:	233ff236 	bltu	r4,r12,6b48 <__alt_mem_Flash_flash_data+0xf4006b48>
    6b80:	0206303a 	nor	r3,zero,r8
    6b84:	1b07883a 	add	r3,r3,r12
    6b88:	1806d0ba 	srli	r3,r3,2
    6b8c:	18c00044 	addi	r3,r3,1
    6b90:	18c7883a 	add	r3,r3,r3
    6b94:	18c7883a 	add	r3,r3,r3
    6b98:	58cb883a 	add	r5,r11,r3
    6b9c:	28ffff04 	addi	r3,r5,-4
    6ba0:	3800041e 	bne	r7,zero,6bb4 <__mdiff+0x148>
    6ba4:	18ffff04 	addi	r3,r3,-4
    6ba8:	19000017 	ldw	r4,0(r3)
    6bac:	6b7fffc4 	addi	r13,r13,-1
    6bb0:	203ffc26 	beq	r4,zero,6ba4 <__alt_mem_Flash_flash_data+0xf4006ba4>
    6bb4:	13400415 	stw	r13,16(r2)
    6bb8:	dfc00417 	ldw	ra,16(sp)
    6bbc:	dcc00317 	ldw	r19,12(sp)
    6bc0:	dc800217 	ldw	r18,8(sp)
    6bc4:	dc400117 	ldw	r17,4(sp)
    6bc8:	dc000017 	ldw	r16,0(sp)
    6bcc:	dec00504 	addi	sp,sp,20
    6bd0:	f800283a 	ret
    6bd4:	8005883a 	mov	r2,r16
    6bd8:	04400044 	movi	r17,1
    6bdc:	9021883a 	mov	r16,r18
    6be0:	1025883a 	mov	r18,r2
    6be4:	003fb006 	br	6aa8 <__alt_mem_Flash_flash_data+0xf4006aa8>
    6be8:	9809883a 	mov	r4,r19
    6bec:	000b883a 	mov	r5,zero
    6bf0:	00061380 	call	6138 <_Balloc>
    6bf4:	00c00044 	movi	r3,1
    6bf8:	10c00415 	stw	r3,16(r2)
    6bfc:	10000515 	stw	zero,20(r2)
    6c00:	003fed06 	br	6bb8 <__alt_mem_Flash_flash_data+0xf4006bb8>

00006c04 <__ulp>:
    6c04:	295ffc2c 	andhi	r5,r5,32752
    6c08:	00bf3034 	movhi	r2,64704
    6c0c:	2887883a 	add	r3,r5,r2
    6c10:	00c0020e 	bge	zero,r3,6c1c <__ulp+0x18>
    6c14:	0005883a 	mov	r2,zero
    6c18:	f800283a 	ret
    6c1c:	00c7c83a 	sub	r3,zero,r3
    6c20:	180bd53a 	srai	r5,r3,20
    6c24:	008004c4 	movi	r2,19
    6c28:	11400a0e 	bge	r2,r5,6c54 <__ulp+0x50>
    6c2c:	00800c84 	movi	r2,50
    6c30:	0007883a 	mov	r3,zero
    6c34:	11400516 	blt	r2,r5,6c4c <__ulp+0x48>
    6c38:	00800cc4 	movi	r2,51
    6c3c:	114bc83a 	sub	r5,r2,r5
    6c40:	00800044 	movi	r2,1
    6c44:	1144983a 	sll	r2,r2,r5
    6c48:	f800283a 	ret
    6c4c:	00800044 	movi	r2,1
    6c50:	f800283a 	ret
    6c54:	00800234 	movhi	r2,8
    6c58:	1147d83a 	sra	r3,r2,r5
    6c5c:	0005883a 	mov	r2,zero
    6c60:	f800283a 	ret

00006c64 <__b2d>:
    6c64:	defffa04 	addi	sp,sp,-24
    6c68:	dc000015 	stw	r16,0(sp)
    6c6c:	24000417 	ldw	r16,16(r4)
    6c70:	dc400115 	stw	r17,4(sp)
    6c74:	24400504 	addi	r17,r4,20
    6c78:	8421883a 	add	r16,r16,r16
    6c7c:	8421883a 	add	r16,r16,r16
    6c80:	8c21883a 	add	r16,r17,r16
    6c84:	dc800215 	stw	r18,8(sp)
    6c88:	84bfff17 	ldw	r18,-4(r16)
    6c8c:	dd000415 	stw	r20,16(sp)
    6c90:	dcc00315 	stw	r19,12(sp)
    6c94:	9009883a 	mov	r4,r18
    6c98:	2829883a 	mov	r20,r5
    6c9c:	dfc00515 	stw	ra,20(sp)
    6ca0:	000642c0 	call	642c <__hi0bits>
    6ca4:	00c00804 	movi	r3,32
    6ca8:	1887c83a 	sub	r3,r3,r2
    6cac:	a0c00015 	stw	r3,0(r20)
    6cb0:	00c00284 	movi	r3,10
    6cb4:	84ffff04 	addi	r19,r16,-4
    6cb8:	18801216 	blt	r3,r2,6d04 <__b2d+0xa0>
    6cbc:	014002c4 	movi	r5,11
    6cc0:	2889c83a 	sub	r4,r5,r2
    6cc4:	9106d83a 	srl	r3,r18,r4
    6cc8:	18cffc34 	orhi	r3,r3,16368
    6ccc:	8cc0282e 	bgeu	r17,r19,6d70 <__b2d+0x10c>
    6cd0:	817ffe17 	ldw	r5,-8(r16)
    6cd4:	290ad83a 	srl	r5,r5,r4
    6cd8:	10800544 	addi	r2,r2,21
    6cdc:	9084983a 	sll	r2,r18,r2
    6ce0:	2884b03a 	or	r2,r5,r2
    6ce4:	dfc00517 	ldw	ra,20(sp)
    6ce8:	dd000417 	ldw	r20,16(sp)
    6cec:	dcc00317 	ldw	r19,12(sp)
    6cf0:	dc800217 	ldw	r18,8(sp)
    6cf4:	dc400117 	ldw	r17,4(sp)
    6cf8:	dc000017 	ldw	r16,0(sp)
    6cfc:	dec00604 	addi	sp,sp,24
    6d00:	f800283a 	ret
    6d04:	113ffd44 	addi	r4,r2,-11
    6d08:	8cc00f2e 	bgeu	r17,r19,6d48 <__b2d+0xe4>
    6d0c:	81bffe04 	addi	r6,r16,-8
    6d10:	817ffe17 	ldw	r5,-8(r16)
    6d14:	20001326 	beq	r4,zero,6d64 <__b2d+0x100>
    6d18:	00c00ac4 	movi	r3,43
    6d1c:	1885c83a 	sub	r2,r3,r2
    6d20:	2886d83a 	srl	r3,r5,r2
    6d24:	9124983a 	sll	r18,r18,r4
    6d28:	90e4b03a 	or	r18,r18,r3
    6d2c:	90cffc34 	orhi	r3,r18,16368
    6d30:	8980112e 	bgeu	r17,r6,6d78 <__b2d+0x114>
    6d34:	81bffd17 	ldw	r6,-12(r16)
    6d38:	308cd83a 	srl	r6,r6,r2
    6d3c:	2904983a 	sll	r2,r5,r4
    6d40:	1184b03a 	or	r2,r2,r6
    6d44:	003fe706 	br	6ce4 <__alt_mem_Flash_flash_data+0xf4006ce4>
    6d48:	20000526 	beq	r4,zero,6d60 <__b2d+0xfc>
    6d4c:	9124983a 	sll	r18,r18,r4
    6d50:	000d883a 	mov	r6,zero
    6d54:	000b883a 	mov	r5,zero
    6d58:	90cffc34 	orhi	r3,r18,16368
    6d5c:	003ff706 	br	6d3c <__alt_mem_Flash_flash_data+0xf4006d3c>
    6d60:	000b883a 	mov	r5,zero
    6d64:	90cffc34 	orhi	r3,r18,16368
    6d68:	2805883a 	mov	r2,r5
    6d6c:	003fdd06 	br	6ce4 <__alt_mem_Flash_flash_data+0xf4006ce4>
    6d70:	000b883a 	mov	r5,zero
    6d74:	003fd806 	br	6cd8 <__alt_mem_Flash_flash_data+0xf4006cd8>
    6d78:	000d883a 	mov	r6,zero
    6d7c:	003fef06 	br	6d3c <__alt_mem_Flash_flash_data+0xf4006d3c>

00006d80 <__d2b>:
    6d80:	defff704 	addi	sp,sp,-36
    6d84:	dc000215 	stw	r16,8(sp)
    6d88:	3021883a 	mov	r16,r6
    6d8c:	dc400315 	stw	r17,12(sp)
    6d90:	8022907a 	slli	r17,r16,1
    6d94:	dd400715 	stw	r21,28(sp)
    6d98:	282b883a 	mov	r21,r5
    6d9c:	01400044 	movi	r5,1
    6da0:	dd000615 	stw	r20,24(sp)
    6da4:	dcc00515 	stw	r19,20(sp)
    6da8:	dc800415 	stw	r18,16(sp)
    6dac:	dfc00815 	stw	ra,32(sp)
    6db0:	3829883a 	mov	r20,r7
    6db4:	dc800917 	ldw	r18,36(sp)
    6db8:	8822d57a 	srli	r17,r17,21
    6dbc:	00061380 	call	6138 <_Balloc>
    6dc0:	1027883a 	mov	r19,r2
    6dc4:	00800434 	movhi	r2,16
    6dc8:	10bfffc4 	addi	r2,r2,-1
    6dcc:	808c703a 	and	r6,r16,r2
    6dd0:	88000126 	beq	r17,zero,6dd8 <__d2b+0x58>
    6dd4:	31800434 	orhi	r6,r6,16
    6dd8:	d9800015 	stw	r6,0(sp)
    6ddc:	a8001f26 	beq	r21,zero,6e5c <__d2b+0xdc>
    6de0:	d9000104 	addi	r4,sp,4
    6de4:	dd400115 	stw	r21,4(sp)
    6de8:	00064940 	call	6494 <__lo0bits>
    6dec:	d8c00017 	ldw	r3,0(sp)
    6df0:	1000291e 	bne	r2,zero,6e98 <__d2b+0x118>
    6df4:	d9000117 	ldw	r4,4(sp)
    6df8:	99000515 	stw	r4,20(r19)
    6dfc:	1820c03a 	cmpne	r16,r3,zero
    6e00:	84000044 	addi	r16,r16,1
    6e04:	98c00615 	stw	r3,24(r19)
    6e08:	9c000415 	stw	r16,16(r19)
    6e0c:	88001b1e 	bne	r17,zero,6e7c <__d2b+0xfc>
    6e10:	800690ba 	slli	r3,r16,2
    6e14:	10bef384 	addi	r2,r2,-1074
    6e18:	a0800015 	stw	r2,0(r20)
    6e1c:	98c5883a 	add	r2,r19,r3
    6e20:	11000417 	ldw	r4,16(r2)
    6e24:	8020917a 	slli	r16,r16,5
    6e28:	000642c0 	call	642c <__hi0bits>
    6e2c:	8085c83a 	sub	r2,r16,r2
    6e30:	90800015 	stw	r2,0(r18)
    6e34:	9805883a 	mov	r2,r19
    6e38:	dfc00817 	ldw	ra,32(sp)
    6e3c:	dd400717 	ldw	r21,28(sp)
    6e40:	dd000617 	ldw	r20,24(sp)
    6e44:	dcc00517 	ldw	r19,20(sp)
    6e48:	dc800417 	ldw	r18,16(sp)
    6e4c:	dc400317 	ldw	r17,12(sp)
    6e50:	dc000217 	ldw	r16,8(sp)
    6e54:	dec00904 	addi	sp,sp,36
    6e58:	f800283a 	ret
    6e5c:	d809883a 	mov	r4,sp
    6e60:	00064940 	call	6494 <__lo0bits>
    6e64:	d8c00017 	ldw	r3,0(sp)
    6e68:	04000044 	movi	r16,1
    6e6c:	9c000415 	stw	r16,16(r19)
    6e70:	98c00515 	stw	r3,20(r19)
    6e74:	10800804 	addi	r2,r2,32
    6e78:	883fe526 	beq	r17,zero,6e10 <__alt_mem_Flash_flash_data+0xf4006e10>
    6e7c:	8c7ef344 	addi	r17,r17,-1075
    6e80:	88a3883a 	add	r17,r17,r2
    6e84:	00c00d44 	movi	r3,53
    6e88:	a4400015 	stw	r17,0(r20)
    6e8c:	1885c83a 	sub	r2,r3,r2
    6e90:	90800015 	stw	r2,0(r18)
    6e94:	003fe706 	br	6e34 <__alt_mem_Flash_flash_data+0xf4006e34>
    6e98:	01000804 	movi	r4,32
    6e9c:	2089c83a 	sub	r4,r4,r2
    6ea0:	1908983a 	sll	r4,r3,r4
    6ea4:	d9400117 	ldw	r5,4(sp)
    6ea8:	1886d83a 	srl	r3,r3,r2
    6eac:	2148b03a 	or	r4,r4,r5
    6eb0:	99000515 	stw	r4,20(r19)
    6eb4:	d8c00015 	stw	r3,0(sp)
    6eb8:	003fd006 	br	6dfc <__alt_mem_Flash_flash_data+0xf4006dfc>

00006ebc <__ratio>:
    6ebc:	defff904 	addi	sp,sp,-28
    6ec0:	dc400315 	stw	r17,12(sp)
    6ec4:	2823883a 	mov	r17,r5
    6ec8:	d9400104 	addi	r5,sp,4
    6ecc:	dfc00615 	stw	ra,24(sp)
    6ed0:	dcc00515 	stw	r19,20(sp)
    6ed4:	dc800415 	stw	r18,16(sp)
    6ed8:	2027883a 	mov	r19,r4
    6edc:	dc000215 	stw	r16,8(sp)
    6ee0:	0006c640 	call	6c64 <__b2d>
    6ee4:	8809883a 	mov	r4,r17
    6ee8:	d80b883a 	mov	r5,sp
    6eec:	1025883a 	mov	r18,r2
    6ef0:	1821883a 	mov	r16,r3
    6ef4:	0006c640 	call	6c64 <__b2d>
    6ef8:	8a400417 	ldw	r9,16(r17)
    6efc:	9a000417 	ldw	r8,16(r19)
    6f00:	100d883a 	mov	r6,r2
    6f04:	d8800017 	ldw	r2,0(sp)
    6f08:	4251c83a 	sub	r8,r8,r9
    6f0c:	4012917a 	slli	r9,r8,5
    6f10:	da000117 	ldw	r8,4(sp)
    6f14:	4091c83a 	sub	r8,r8,r2
    6f18:	4251883a 	add	r8,r8,r9
    6f1c:	02000d0e 	bge	zero,r8,6f54 <__ratio+0x98>
    6f20:	4010953a 	slli	r8,r8,20
    6f24:	4421883a 	add	r16,r8,r16
    6f28:	9009883a 	mov	r4,r18
    6f2c:	800b883a 	mov	r5,r16
    6f30:	180f883a 	mov	r7,r3
    6f34:	000b2700 	call	b270 <__divdf3>
    6f38:	dfc00617 	ldw	ra,24(sp)
    6f3c:	dcc00517 	ldw	r19,20(sp)
    6f40:	dc800417 	ldw	r18,16(sp)
    6f44:	dc400317 	ldw	r17,12(sp)
    6f48:	dc000217 	ldw	r16,8(sp)
    6f4c:	dec00704 	addi	sp,sp,28
    6f50:	f800283a 	ret
    6f54:	4010953a 	slli	r8,r8,20
    6f58:	1a07c83a 	sub	r3,r3,r8
    6f5c:	003ff206 	br	6f28 <__alt_mem_Flash_flash_data+0xf4006f28>

00006f60 <_mprec_log10>:
    6f60:	defffe04 	addi	sp,sp,-8
    6f64:	dc000015 	stw	r16,0(sp)
    6f68:	dfc00115 	stw	ra,4(sp)
    6f6c:	008005c4 	movi	r2,23
    6f70:	2021883a 	mov	r16,r4
    6f74:	11000d0e 	bge	r2,r4,6fac <_mprec_log10+0x4c>
    6f78:	0005883a 	mov	r2,zero
    6f7c:	00cffc34 	movhi	r3,16368
    6f80:	843fffc4 	addi	r16,r16,-1
    6f84:	1009883a 	mov	r4,r2
    6f88:	180b883a 	mov	r5,r3
    6f8c:	000d883a 	mov	r6,zero
    6f90:	01d00934 	movhi	r7,16420
    6f94:	000bd800 	call	bd80 <__muldf3>
    6f98:	803ff91e 	bne	r16,zero,6f80 <__alt_mem_Flash_flash_data+0xf4006f80>
    6f9c:	dfc00117 	ldw	ra,4(sp)
    6fa0:	dc000017 	ldw	r16,0(sp)
    6fa4:	dec00204 	addi	sp,sp,8
    6fa8:	f800283a 	ret
    6fac:	202090fa 	slli	r16,r4,3
    6fb0:	008000b4 	movhi	r2,2
    6fb4:	10a5eb04 	addi	r2,r2,-26708
    6fb8:	1421883a 	add	r16,r2,r16
    6fbc:	80800017 	ldw	r2,0(r16)
    6fc0:	80c00117 	ldw	r3,4(r16)
    6fc4:	dfc00117 	ldw	ra,4(sp)
    6fc8:	dc000017 	ldw	r16,0(sp)
    6fcc:	dec00204 	addi	sp,sp,8
    6fd0:	f800283a 	ret

00006fd4 <__copybits>:
    6fd4:	297fffc4 	addi	r5,r5,-1
    6fd8:	280fd17a 	srai	r7,r5,5
    6fdc:	30c00417 	ldw	r3,16(r6)
    6fe0:	30800504 	addi	r2,r6,20
    6fe4:	39c00044 	addi	r7,r7,1
    6fe8:	18c7883a 	add	r3,r3,r3
    6fec:	39cf883a 	add	r7,r7,r7
    6ff0:	18c7883a 	add	r3,r3,r3
    6ff4:	39cf883a 	add	r7,r7,r7
    6ff8:	10c7883a 	add	r3,r2,r3
    6ffc:	21cf883a 	add	r7,r4,r7
    7000:	10c00d2e 	bgeu	r2,r3,7038 <__copybits+0x64>
    7004:	200b883a 	mov	r5,r4
    7008:	12000017 	ldw	r8,0(r2)
    700c:	29400104 	addi	r5,r5,4
    7010:	10800104 	addi	r2,r2,4
    7014:	2a3fff15 	stw	r8,-4(r5)
    7018:	10fffb36 	bltu	r2,r3,7008 <__alt_mem_Flash_flash_data+0xf4007008>
    701c:	1985c83a 	sub	r2,r3,r6
    7020:	10bffac4 	addi	r2,r2,-21
    7024:	1004d0ba 	srli	r2,r2,2
    7028:	10800044 	addi	r2,r2,1
    702c:	1085883a 	add	r2,r2,r2
    7030:	1085883a 	add	r2,r2,r2
    7034:	2089883a 	add	r4,r4,r2
    7038:	21c0032e 	bgeu	r4,r7,7048 <__copybits+0x74>
    703c:	20000015 	stw	zero,0(r4)
    7040:	21000104 	addi	r4,r4,4
    7044:	21fffd36 	bltu	r4,r7,703c <__alt_mem_Flash_flash_data+0xf400703c>
    7048:	f800283a 	ret

0000704c <__any_on>:
    704c:	20c00417 	ldw	r3,16(r4)
    7050:	2805d17a 	srai	r2,r5,5
    7054:	21000504 	addi	r4,r4,20
    7058:	18800d0e 	bge	r3,r2,7090 <__any_on+0x44>
    705c:	18c7883a 	add	r3,r3,r3
    7060:	18c7883a 	add	r3,r3,r3
    7064:	20c7883a 	add	r3,r4,r3
    7068:	20c0192e 	bgeu	r4,r3,70d0 <__any_on+0x84>
    706c:	18bfff17 	ldw	r2,-4(r3)
    7070:	18ffff04 	addi	r3,r3,-4
    7074:	1000041e 	bne	r2,zero,7088 <__any_on+0x3c>
    7078:	20c0142e 	bgeu	r4,r3,70cc <__any_on+0x80>
    707c:	18ffff04 	addi	r3,r3,-4
    7080:	19400017 	ldw	r5,0(r3)
    7084:	283ffc26 	beq	r5,zero,7078 <__alt_mem_Flash_flash_data+0xf4007078>
    7088:	00800044 	movi	r2,1
    708c:	f800283a 	ret
    7090:	10c00a0e 	bge	r2,r3,70bc <__any_on+0x70>
    7094:	1085883a 	add	r2,r2,r2
    7098:	1085883a 	add	r2,r2,r2
    709c:	294007cc 	andi	r5,r5,31
    70a0:	2087883a 	add	r3,r4,r2
    70a4:	283ff026 	beq	r5,zero,7068 <__alt_mem_Flash_flash_data+0xf4007068>
    70a8:	19800017 	ldw	r6,0(r3)
    70ac:	3144d83a 	srl	r2,r6,r5
    70b0:	114a983a 	sll	r5,r2,r5
    70b4:	29bff41e 	bne	r5,r6,7088 <__alt_mem_Flash_flash_data+0xf4007088>
    70b8:	003feb06 	br	7068 <__alt_mem_Flash_flash_data+0xf4007068>
    70bc:	1085883a 	add	r2,r2,r2
    70c0:	1085883a 	add	r2,r2,r2
    70c4:	2087883a 	add	r3,r4,r2
    70c8:	003fe706 	br	7068 <__alt_mem_Flash_flash_data+0xf4007068>
    70cc:	f800283a 	ret
    70d0:	0005883a 	mov	r2,zero
    70d4:	f800283a 	ret

000070d8 <__fpclassifyd>:
    70d8:	00a00034 	movhi	r2,32768
    70dc:	10bfffc4 	addi	r2,r2,-1
    70e0:	2884703a 	and	r2,r5,r2
    70e4:	10000726 	beq	r2,zero,7104 <__fpclassifyd+0x2c>
    70e8:	00fffc34 	movhi	r3,65520
    70ec:	019ff834 	movhi	r6,32736
    70f0:	28c7883a 	add	r3,r5,r3
    70f4:	31bfffc4 	addi	r6,r6,-1
    70f8:	30c00536 	bltu	r6,r3,7110 <__fpclassifyd+0x38>
    70fc:	00800104 	movi	r2,4
    7100:	f800283a 	ret
    7104:	2000021e 	bne	r4,zero,7110 <__fpclassifyd+0x38>
    7108:	00800084 	movi	r2,2
    710c:	f800283a 	ret
    7110:	00dffc34 	movhi	r3,32752
    7114:	019ff834 	movhi	r6,32736
    7118:	28cb883a 	add	r5,r5,r3
    711c:	31bfffc4 	addi	r6,r6,-1
    7120:	317ff62e 	bgeu	r6,r5,70fc <__alt_mem_Flash_flash_data+0xf40070fc>
    7124:	01400434 	movhi	r5,16
    7128:	297fffc4 	addi	r5,r5,-1
    712c:	28800236 	bltu	r5,r2,7138 <__fpclassifyd+0x60>
    7130:	008000c4 	movi	r2,3
    7134:	f800283a 	ret
    7138:	10c00226 	beq	r2,r3,7144 <__fpclassifyd+0x6c>
    713c:	0005883a 	mov	r2,zero
    7140:	f800283a 	ret
    7144:	2005003a 	cmpeq	r2,r4,zero
    7148:	f800283a 	ret

0000714c <_sbrk_r>:
    714c:	defffd04 	addi	sp,sp,-12
    7150:	dc000015 	stw	r16,0(sp)
    7154:	040000b4 	movhi	r16,2
    7158:	dc400115 	stw	r17,4(sp)
    715c:	8436b904 	addi	r16,r16,-9500
    7160:	2023883a 	mov	r17,r4
    7164:	2809883a 	mov	r4,r5
    7168:	dfc00215 	stw	ra,8(sp)
    716c:	80000015 	stw	zero,0(r16)
    7170:	000d79c0 	call	d79c <sbrk>
    7174:	00ffffc4 	movi	r3,-1
    7178:	10c00526 	beq	r2,r3,7190 <_sbrk_r+0x44>
    717c:	dfc00217 	ldw	ra,8(sp)
    7180:	dc400117 	ldw	r17,4(sp)
    7184:	dc000017 	ldw	r16,0(sp)
    7188:	dec00304 	addi	sp,sp,12
    718c:	f800283a 	ret
    7190:	80c00017 	ldw	r3,0(r16)
    7194:	183ff926 	beq	r3,zero,717c <__alt_mem_Flash_flash_data+0xf400717c>
    7198:	88c00015 	stw	r3,0(r17)
    719c:	003ff706 	br	717c <__alt_mem_Flash_flash_data+0xf400717c>

000071a0 <__sread>:
    71a0:	defffe04 	addi	sp,sp,-8
    71a4:	dc000015 	stw	r16,0(sp)
    71a8:	2821883a 	mov	r16,r5
    71ac:	2940038f 	ldh	r5,14(r5)
    71b0:	dfc00115 	stw	ra,4(sp)
    71b4:	00094580 	call	9458 <_read_r>
    71b8:	10000716 	blt	r2,zero,71d8 <__sread+0x38>
    71bc:	80c01417 	ldw	r3,80(r16)
    71c0:	1887883a 	add	r3,r3,r2
    71c4:	80c01415 	stw	r3,80(r16)
    71c8:	dfc00117 	ldw	ra,4(sp)
    71cc:	dc000017 	ldw	r16,0(sp)
    71d0:	dec00204 	addi	sp,sp,8
    71d4:	f800283a 	ret
    71d8:	80c0030b 	ldhu	r3,12(r16)
    71dc:	18fbffcc 	andi	r3,r3,61439
    71e0:	80c0030d 	sth	r3,12(r16)
    71e4:	dfc00117 	ldw	ra,4(sp)
    71e8:	dc000017 	ldw	r16,0(sp)
    71ec:	dec00204 	addi	sp,sp,8
    71f0:	f800283a 	ret

000071f4 <__seofread>:
    71f4:	0005883a 	mov	r2,zero
    71f8:	f800283a 	ret

000071fc <__swrite>:
    71fc:	2880030b 	ldhu	r2,12(r5)
    7200:	defffb04 	addi	sp,sp,-20
    7204:	dcc00315 	stw	r19,12(sp)
    7208:	dc800215 	stw	r18,8(sp)
    720c:	dc400115 	stw	r17,4(sp)
    7210:	dc000015 	stw	r16,0(sp)
    7214:	dfc00415 	stw	ra,16(sp)
    7218:	10c0400c 	andi	r3,r2,256
    721c:	2821883a 	mov	r16,r5
    7220:	2027883a 	mov	r19,r4
    7224:	3025883a 	mov	r18,r6
    7228:	3823883a 	mov	r17,r7
    722c:	18000526 	beq	r3,zero,7244 <__swrite+0x48>
    7230:	2940038f 	ldh	r5,14(r5)
    7234:	000d883a 	mov	r6,zero
    7238:	01c00084 	movi	r7,2
    723c:	00092a00 	call	92a0 <_lseek_r>
    7240:	8080030b 	ldhu	r2,12(r16)
    7244:	8140038f 	ldh	r5,14(r16)
    7248:	10bbffcc 	andi	r2,r2,61439
    724c:	9809883a 	mov	r4,r19
    7250:	900d883a 	mov	r6,r18
    7254:	880f883a 	mov	r7,r17
    7258:	8080030d 	sth	r2,12(r16)
    725c:	dfc00417 	ldw	ra,16(sp)
    7260:	dcc00317 	ldw	r19,12(sp)
    7264:	dc800217 	ldw	r18,8(sp)
    7268:	dc400117 	ldw	r17,4(sp)
    726c:	dc000017 	ldw	r16,0(sp)
    7270:	dec00504 	addi	sp,sp,20
    7274:	00088dc1 	jmpi	88dc <_write_r>

00007278 <__sseek>:
    7278:	defffe04 	addi	sp,sp,-8
    727c:	dc000015 	stw	r16,0(sp)
    7280:	2821883a 	mov	r16,r5
    7284:	2940038f 	ldh	r5,14(r5)
    7288:	dfc00115 	stw	ra,4(sp)
    728c:	00092a00 	call	92a0 <_lseek_r>
    7290:	00ffffc4 	movi	r3,-1
    7294:	10c00826 	beq	r2,r3,72b8 <__sseek+0x40>
    7298:	80c0030b 	ldhu	r3,12(r16)
    729c:	80801415 	stw	r2,80(r16)
    72a0:	18c40014 	ori	r3,r3,4096
    72a4:	80c0030d 	sth	r3,12(r16)
    72a8:	dfc00117 	ldw	ra,4(sp)
    72ac:	dc000017 	ldw	r16,0(sp)
    72b0:	dec00204 	addi	sp,sp,8
    72b4:	f800283a 	ret
    72b8:	80c0030b 	ldhu	r3,12(r16)
    72bc:	18fbffcc 	andi	r3,r3,61439
    72c0:	80c0030d 	sth	r3,12(r16)
    72c4:	dfc00117 	ldw	ra,4(sp)
    72c8:	dc000017 	ldw	r16,0(sp)
    72cc:	dec00204 	addi	sp,sp,8
    72d0:	f800283a 	ret

000072d4 <__sclose>:
    72d4:	2940038f 	ldh	r5,14(r5)
    72d8:	00089381 	jmpi	8938 <_close_r>

000072dc <strcmp>:
    72dc:	2144b03a 	or	r2,r4,r5
    72e0:	108000cc 	andi	r2,r2,3
    72e4:	1000171e 	bne	r2,zero,7344 <strcmp+0x68>
    72e8:	20800017 	ldw	r2,0(r4)
    72ec:	28c00017 	ldw	r3,0(r5)
    72f0:	10c0141e 	bne	r2,r3,7344 <strcmp+0x68>
    72f4:	027fbff4 	movhi	r9,65279
    72f8:	4a7fbfc4 	addi	r9,r9,-257
    72fc:	0086303a 	nor	r3,zero,r2
    7300:	02202074 	movhi	r8,32897
    7304:	1245883a 	add	r2,r2,r9
    7308:	42202004 	addi	r8,r8,-32640
    730c:	10c4703a 	and	r2,r2,r3
    7310:	1204703a 	and	r2,r2,r8
    7314:	10000226 	beq	r2,zero,7320 <strcmp+0x44>
    7318:	00001706 	br	7378 <strcmp+0x9c>
    731c:	1000161e 	bne	r2,zero,7378 <strcmp+0x9c>
    7320:	21000104 	addi	r4,r4,4
    7324:	20c00017 	ldw	r3,0(r4)
    7328:	29400104 	addi	r5,r5,4
    732c:	29800017 	ldw	r6,0(r5)
    7330:	1a4f883a 	add	r7,r3,r9
    7334:	00c4303a 	nor	r2,zero,r3
    7338:	3884703a 	and	r2,r7,r2
    733c:	1204703a 	and	r2,r2,r8
    7340:	19bff626 	beq	r3,r6,731c <__alt_mem_Flash_flash_data+0xf400731c>
    7344:	20800007 	ldb	r2,0(r4)
    7348:	1000051e 	bne	r2,zero,7360 <strcmp+0x84>
    734c:	00000606 	br	7368 <strcmp+0x8c>
    7350:	21000044 	addi	r4,r4,1
    7354:	20800007 	ldb	r2,0(r4)
    7358:	29400044 	addi	r5,r5,1
    735c:	10000226 	beq	r2,zero,7368 <strcmp+0x8c>
    7360:	28c00007 	ldb	r3,0(r5)
    7364:	10fffa26 	beq	r2,r3,7350 <__alt_mem_Flash_flash_data+0xf4007350>
    7368:	20800003 	ldbu	r2,0(r4)
    736c:	28c00003 	ldbu	r3,0(r5)
    7370:	10c5c83a 	sub	r2,r2,r3
    7374:	f800283a 	ret
    7378:	0005883a 	mov	r2,zero
    737c:	f800283a 	ret

00007380 <strlen>:
    7380:	208000cc 	andi	r2,r4,3
    7384:	10002026 	beq	r2,zero,7408 <strlen+0x88>
    7388:	20800007 	ldb	r2,0(r4)
    738c:	10002026 	beq	r2,zero,7410 <strlen+0x90>
    7390:	2005883a 	mov	r2,r4
    7394:	00000206 	br	73a0 <strlen+0x20>
    7398:	10c00007 	ldb	r3,0(r2)
    739c:	18001826 	beq	r3,zero,7400 <strlen+0x80>
    73a0:	10800044 	addi	r2,r2,1
    73a4:	10c000cc 	andi	r3,r2,3
    73a8:	183ffb1e 	bne	r3,zero,7398 <__alt_mem_Flash_flash_data+0xf4007398>
    73ac:	10c00017 	ldw	r3,0(r2)
    73b0:	01ffbff4 	movhi	r7,65279
    73b4:	39ffbfc4 	addi	r7,r7,-257
    73b8:	00ca303a 	nor	r5,zero,r3
    73bc:	01a02074 	movhi	r6,32897
    73c0:	19c7883a 	add	r3,r3,r7
    73c4:	31a02004 	addi	r6,r6,-32640
    73c8:	1946703a 	and	r3,r3,r5
    73cc:	1986703a 	and	r3,r3,r6
    73d0:	1800091e 	bne	r3,zero,73f8 <strlen+0x78>
    73d4:	10800104 	addi	r2,r2,4
    73d8:	10c00017 	ldw	r3,0(r2)
    73dc:	19cb883a 	add	r5,r3,r7
    73e0:	00c6303a 	nor	r3,zero,r3
    73e4:	28c6703a 	and	r3,r5,r3
    73e8:	1986703a 	and	r3,r3,r6
    73ec:	183ff926 	beq	r3,zero,73d4 <__alt_mem_Flash_flash_data+0xf40073d4>
    73f0:	00000106 	br	73f8 <strlen+0x78>
    73f4:	10800044 	addi	r2,r2,1
    73f8:	10c00007 	ldb	r3,0(r2)
    73fc:	183ffd1e 	bne	r3,zero,73f4 <__alt_mem_Flash_flash_data+0xf40073f4>
    7400:	1105c83a 	sub	r2,r2,r4
    7404:	f800283a 	ret
    7408:	2005883a 	mov	r2,r4
    740c:	003fe706 	br	73ac <__alt_mem_Flash_flash_data+0xf40073ac>
    7410:	0005883a 	mov	r2,zero
    7414:	f800283a 	ret

00007418 <__sprint_r.part.0>:
    7418:	28801917 	ldw	r2,100(r5)
    741c:	defff604 	addi	sp,sp,-40
    7420:	dd400515 	stw	r21,20(sp)
    7424:	dcc00315 	stw	r19,12(sp)
    7428:	dfc00915 	stw	ra,36(sp)
    742c:	df000815 	stw	fp,32(sp)
    7430:	ddc00715 	stw	r23,28(sp)
    7434:	dd800615 	stw	r22,24(sp)
    7438:	dd000415 	stw	r20,16(sp)
    743c:	dc800215 	stw	r18,8(sp)
    7440:	dc400115 	stw	r17,4(sp)
    7444:	dc000015 	stw	r16,0(sp)
    7448:	1088000c 	andi	r2,r2,8192
    744c:	2827883a 	mov	r19,r5
    7450:	302b883a 	mov	r21,r6
    7454:	10002d26 	beq	r2,zero,750c <__sprint_r.part.0+0xf4>
    7458:	30800217 	ldw	r2,8(r6)
    745c:	35800017 	ldw	r22,0(r6)
    7460:	10002826 	beq	r2,zero,7504 <__sprint_r.part.0+0xec>
    7464:	2029883a 	mov	r20,r4
    7468:	b5c00104 	addi	r23,r22,4
    746c:	04bfffc4 	movi	r18,-1
    7470:	bc400017 	ldw	r17,0(r23)
    7474:	b4000017 	ldw	r16,0(r22)
    7478:	0039883a 	mov	fp,zero
    747c:	8822d0ba 	srli	r17,r17,2
    7480:	04400316 	blt	zero,r17,7490 <__sprint_r.part.0+0x78>
    7484:	00001806 	br	74e8 <__sprint_r.part.0+0xd0>
    7488:	84000104 	addi	r16,r16,4
    748c:	8f001526 	beq	r17,fp,74e4 <__sprint_r.part.0+0xcc>
    7490:	81400017 	ldw	r5,0(r16)
    7494:	a009883a 	mov	r4,r20
    7498:	980d883a 	mov	r6,r19
    749c:	0008b540 	call	8b54 <_fputwc_r>
    74a0:	e7000044 	addi	fp,fp,1
    74a4:	14bff81e 	bne	r2,r18,7488 <__alt_mem_Flash_flash_data+0xf4007488>
    74a8:	9005883a 	mov	r2,r18
    74ac:	a8000215 	stw	zero,8(r21)
    74b0:	a8000115 	stw	zero,4(r21)
    74b4:	dfc00917 	ldw	ra,36(sp)
    74b8:	df000817 	ldw	fp,32(sp)
    74bc:	ddc00717 	ldw	r23,28(sp)
    74c0:	dd800617 	ldw	r22,24(sp)
    74c4:	dd400517 	ldw	r21,20(sp)
    74c8:	dd000417 	ldw	r20,16(sp)
    74cc:	dcc00317 	ldw	r19,12(sp)
    74d0:	dc800217 	ldw	r18,8(sp)
    74d4:	dc400117 	ldw	r17,4(sp)
    74d8:	dc000017 	ldw	r16,0(sp)
    74dc:	dec00a04 	addi	sp,sp,40
    74e0:	f800283a 	ret
    74e4:	a8800217 	ldw	r2,8(r21)
    74e8:	8c63883a 	add	r17,r17,r17
    74ec:	8c63883a 	add	r17,r17,r17
    74f0:	1445c83a 	sub	r2,r2,r17
    74f4:	a8800215 	stw	r2,8(r21)
    74f8:	b5800204 	addi	r22,r22,8
    74fc:	bdc00204 	addi	r23,r23,8
    7500:	103fdb1e 	bne	r2,zero,7470 <__alt_mem_Flash_flash_data+0xf4007470>
    7504:	0005883a 	mov	r2,zero
    7508:	003fe806 	br	74ac <__alt_mem_Flash_flash_data+0xf40074ac>
    750c:	0008d8c0 	call	8d8c <__sfvwrite_r>
    7510:	003fe606 	br	74ac <__alt_mem_Flash_flash_data+0xf40074ac>

00007514 <__sprint_r>:
    7514:	30c00217 	ldw	r3,8(r6)
    7518:	18000126 	beq	r3,zero,7520 <__sprint_r+0xc>
    751c:	00074181 	jmpi	7418 <__sprint_r.part.0>
    7520:	30000115 	stw	zero,4(r6)
    7524:	0005883a 	mov	r2,zero
    7528:	f800283a 	ret

0000752c <___vfiprintf_internal_r>:
    752c:	deffca04 	addi	sp,sp,-216
    7530:	dd803215 	stw	r22,200(sp)
    7534:	dd403115 	stw	r21,196(sp)
    7538:	dfc03515 	stw	ra,212(sp)
    753c:	df003415 	stw	fp,208(sp)
    7540:	ddc03315 	stw	r23,204(sp)
    7544:	dd003015 	stw	r20,192(sp)
    7548:	dcc02f15 	stw	r19,188(sp)
    754c:	dc802e15 	stw	r18,184(sp)
    7550:	dc402d15 	stw	r17,180(sp)
    7554:	dc002c15 	stw	r16,176(sp)
    7558:	d9002015 	stw	r4,128(sp)
    755c:	d9c02215 	stw	r7,136(sp)
    7560:	282b883a 	mov	r21,r5
    7564:	302d883a 	mov	r22,r6
    7568:	20000226 	beq	r4,zero,7574 <___vfiprintf_internal_r+0x48>
    756c:	20800e17 	ldw	r2,56(r4)
    7570:	1001b126 	beq	r2,zero,7c38 <___vfiprintf_internal_r+0x70c>
    7574:	a880030b 	ldhu	r2,12(r21)
    7578:	10c8000c 	andi	r3,r2,8192
    757c:	1800061e 	bne	r3,zero,7598 <___vfiprintf_internal_r+0x6c>
    7580:	a9001917 	ldw	r4,100(r21)
    7584:	00f7ffc4 	movi	r3,-8193
    7588:	10880014 	ori	r2,r2,8192
    758c:	20c6703a 	and	r3,r4,r3
    7590:	a880030d 	sth	r2,12(r21)
    7594:	a8c01915 	stw	r3,100(r21)
    7598:	10c0020c 	andi	r3,r2,8
    759c:	18018926 	beq	r3,zero,7bc4 <___vfiprintf_internal_r+0x698>
    75a0:	a8c00417 	ldw	r3,16(r21)
    75a4:	18018726 	beq	r3,zero,7bc4 <___vfiprintf_internal_r+0x698>
    75a8:	1080068c 	andi	r2,r2,26
    75ac:	00c00284 	movi	r3,10
    75b0:	10c18c26 	beq	r2,r3,7be4 <___vfiprintf_internal_r+0x6b8>
    75b4:	d8801a04 	addi	r2,sp,104
    75b8:	d8c019c4 	addi	r3,sp,103
    75bc:	070000b4 	movhi	fp,2
    75c0:	05c000b4 	movhi	r23,2
    75c4:	10c9c83a 	sub	r4,r2,r3
    75c8:	e7262104 	addi	fp,fp,-26492
    75cc:	bde61d04 	addi	r23,r23,-26508
    75d0:	d8801e15 	stw	r2,120(sp)
    75d4:	d8c01f15 	stw	r3,124(sp)
    75d8:	dec01a15 	stw	sp,104(sp)
    75dc:	d8001c15 	stw	zero,112(sp)
    75e0:	d8001b15 	stw	zero,108(sp)
    75e4:	d8002615 	stw	zero,152(sp)
    75e8:	d8002315 	stw	zero,140(sp)
    75ec:	d9002715 	stw	r4,156(sp)
    75f0:	d811883a 	mov	r8,sp
    75f4:	dd402115 	stw	r21,132(sp)
    75f8:	b021883a 	mov	r16,r22
    75fc:	80800007 	ldb	r2,0(r16)
    7600:	10037226 	beq	r2,zero,83cc <___vfiprintf_internal_r+0xea0>
    7604:	01000944 	movi	r4,37
    7608:	11037026 	beq	r2,r4,83cc <___vfiprintf_internal_r+0xea0>
    760c:	8005883a 	mov	r2,r16
    7610:	00000106 	br	7618 <___vfiprintf_internal_r+0xec>
    7614:	19000326 	beq	r3,r4,7624 <___vfiprintf_internal_r+0xf8>
    7618:	10800044 	addi	r2,r2,1
    761c:	10c00007 	ldb	r3,0(r2)
    7620:	183ffc1e 	bne	r3,zero,7614 <__alt_mem_Flash_flash_data+0xf4007614>
    7624:	1425c83a 	sub	r18,r2,r16
    7628:	1023883a 	mov	r17,r2
    762c:	90001026 	beq	r18,zero,7670 <___vfiprintf_internal_r+0x144>
    7630:	d8c01c17 	ldw	r3,112(sp)
    7634:	d8801b17 	ldw	r2,108(sp)
    7638:	44000015 	stw	r16,0(r8)
    763c:	90c7883a 	add	r3,r18,r3
    7640:	10800044 	addi	r2,r2,1
    7644:	44800115 	stw	r18,4(r8)
    7648:	d8c01c15 	stw	r3,112(sp)
    764c:	d8801b15 	stw	r2,108(sp)
    7650:	010001c4 	movi	r4,7
    7654:	2080750e 	bge	r4,r2,782c <___vfiprintf_internal_r+0x300>
    7658:	18036f1e 	bne	r3,zero,8418 <___vfiprintf_internal_r+0xeec>
    765c:	d8802317 	ldw	r2,140(sp)
    7660:	d8001b15 	stw	zero,108(sp)
    7664:	d811883a 	mov	r8,sp
    7668:	1485883a 	add	r2,r2,r18
    766c:	d8802315 	stw	r2,140(sp)
    7670:	88800007 	ldb	r2,0(r17)
    7674:	10041026 	beq	r2,zero,86b8 <___vfiprintf_internal_r+0x118c>
    7678:	88c00047 	ldb	r3,1(r17)
    767c:	88800044 	addi	r2,r17,1
    7680:	d8001d85 	stb	zero,118(sp)
    7684:	000f883a 	mov	r7,zero
    7688:	027fffc4 	movi	r9,-1
    768c:	0025883a 	mov	r18,zero
    7690:	002b883a 	mov	r21,zero
    7694:	01401604 	movi	r5,88
    7698:	01800244 	movi	r6,9
    769c:	03400a84 	movi	r13,42
    76a0:	03001b04 	movi	r12,108
    76a4:	14000044 	addi	r16,r2,1
    76a8:	18bff804 	addi	r2,r3,-32
    76ac:	28825536 	bltu	r5,r2,8004 <___vfiprintf_internal_r+0xad8>
    76b0:	100490ba 	slli	r2,r2,2
    76b4:	01000034 	movhi	r4,0
    76b8:	211db204 	addi	r4,r4,30408
    76bc:	1105883a 	add	r2,r2,r4
    76c0:	10800017 	ldw	r2,0(r2)
    76c4:	1000683a 	jmp	r2
    76c8:	00007dc8 	cmpgei	zero,zero,503
    76cc:	00008004 	movi	zero,512
    76d0:	00008004 	movi	zero,512
    76d4:	00007de8 	cmpgeui	zero,zero,503
    76d8:	00008004 	movi	zero,512
    76dc:	00008004 	movi	zero,512
    76e0:	00008004 	movi	zero,512
    76e4:	00008004 	movi	zero,512
    76e8:	00008004 	movi	zero,512
    76ec:	00008004 	movi	zero,512
    76f0:	00007df8 	rdprs	zero,zero,503
    76f4:	00007e18 	cmpnei	zero,zero,504
    76f8:	00008004 	movi	zero,512
    76fc:	00007c40 	call	7c4 <selecteerMenu+0x50>
    7700:	00007d2c 	andhi	zero,zero,500
    7704:	00008004 	movi	zero,512
    7708:	00007cac 	andhi	zero,zero,498
    770c:	00007cbc 	xorhi	zero,zero,498
    7710:	00007cbc 	xorhi	zero,zero,498
    7714:	00007cbc 	xorhi	zero,zero,498
    7718:	00007cbc 	xorhi	zero,zero,498
    771c:	00007cbc 	xorhi	zero,zero,498
    7720:	00007cbc 	xorhi	zero,zero,498
    7724:	00007cbc 	xorhi	zero,zero,498
    7728:	00007cbc 	xorhi	zero,zero,498
    772c:	00007cbc 	xorhi	zero,zero,498
    7730:	00008004 	movi	zero,512
    7734:	00008004 	movi	zero,512
    7738:	00008004 	movi	zero,512
    773c:	00008004 	movi	zero,512
    7740:	00008004 	movi	zero,512
    7744:	00008004 	movi	zero,512
    7748:	00008004 	movi	zero,512
    774c:	00008004 	movi	zero,512
    7750:	00008004 	movi	zero,512
    7754:	00008004 	movi	zero,512
    7758:	00007ce8 	cmpgeui	zero,zero,499
    775c:	00008004 	movi	zero,512
    7760:	00008004 	movi	zero,512
    7764:	00008004 	movi	zero,512
    7768:	00008004 	movi	zero,512
    776c:	00008004 	movi	zero,512
    7770:	00008004 	movi	zero,512
    7774:	00008004 	movi	zero,512
    7778:	00008004 	movi	zero,512
    777c:	00008004 	movi	zero,512
    7780:	00008004 	movi	zero,512
    7784:	00007874 	movhi	zero,481
    7788:	00008004 	movi	zero,512
    778c:	00008004 	movi	zero,512
    7790:	00008004 	movi	zero,512
    7794:	00008004 	movi	zero,512
    7798:	00008004 	movi	zero,512
    779c:	00007840 	call	784 <selecteerMenu+0x10>
    77a0:	00008004 	movi	zero,512
    77a4:	00008004 	movi	zero,512
    77a8:	00007e88 	cmpgei	zero,zero,506
    77ac:	00008004 	movi	zero,512
    77b0:	00008004 	movi	zero,512
    77b4:	00008004 	movi	zero,512
    77b8:	00008004 	movi	zero,512
    77bc:	00008004 	movi	zero,512
    77c0:	00008004 	movi	zero,512
    77c4:	00008004 	movi	zero,512
    77c8:	00008004 	movi	zero,512
    77cc:	00008004 	movi	zero,512
    77d0:	00008004 	movi	zero,512
    77d4:	00007e28 	cmpgeui	zero,zero,504
    77d8:	00007e54 	movui	zero,505
    77dc:	00008004 	movi	zero,512
    77e0:	00008004 	movi	zero,512
    77e4:	00008004 	movi	zero,512
    77e8:	00007f30 	cmpltui	zero,zero,508
    77ec:	00007e54 	movui	zero,505
    77f0:	00008004 	movi	zero,512
    77f4:	00008004 	movi	zero,512
    77f8:	00007f40 	call	7f4 <selecteerMenu+0x80>
    77fc:	00008004 	movi	zero,512
    7800:	00007d6c 	andhi	zero,zero,501
    7804:	00007878 	rdprs	zero,zero,481
    7808:	00007f54 	movui	zero,509
    780c:	00007f94 	movui	zero,510
    7810:	00008004 	movi	zero,512
    7814:	00007edc 	xori	zero,zero,507
    7818:	00008004 	movi	zero,512
    781c:	00007844 	movi	zero,481
    7820:	00008004 	movi	zero,512
    7824:	00008004 	movi	zero,512
    7828:	00007fa4 	muli	zero,zero,510
    782c:	42000204 	addi	r8,r8,8
    7830:	d8802317 	ldw	r2,140(sp)
    7834:	1485883a 	add	r2,r2,r18
    7838:	d8802315 	stw	r2,140(sp)
    783c:	003f8c06 	br	7670 <__alt_mem_Flash_flash_data+0xf4007670>
    7840:	ad400414 	ori	r21,r21,16
    7844:	a880080c 	andi	r2,r21,32
    7848:	1001e61e 	bne	r2,zero,7fe4 <___vfiprintf_internal_r+0xab8>
    784c:	a880040c 	andi	r2,r21,16
    7850:	10034726 	beq	r2,zero,8570 <___vfiprintf_internal_r+0x1044>
    7854:	d8802217 	ldw	r2,136(sp)
    7858:	001b883a 	mov	r13,zero
    785c:	15800017 	ldw	r22,0(r2)
    7860:	10800104 	addi	r2,r2,4
    7864:	d8802215 	stw	r2,136(sp)
    7868:	b009883a 	mov	r4,r22
    786c:	00800044 	movi	r2,1
    7870:	00000c06 	br	78a4 <___vfiprintf_internal_r+0x378>
    7874:	ad400414 	ori	r21,r21,16
    7878:	a880080c 	andi	r2,r21,32
    787c:	1001491e 	bne	r2,zero,7da4 <___vfiprintf_internal_r+0x878>
    7880:	a880040c 	andi	r2,r21,16
    7884:	10032d26 	beq	r2,zero,853c <___vfiprintf_internal_r+0x1010>
    7888:	d9002217 	ldw	r4,136(sp)
    788c:	001b883a 	mov	r13,zero
    7890:	0005883a 	mov	r2,zero
    7894:	25800017 	ldw	r22,0(r4)
    7898:	21000104 	addi	r4,r4,4
    789c:	d9002215 	stw	r4,136(sp)
    78a0:	b009883a 	mov	r4,r22
    78a4:	d8001d85 	stb	zero,118(sp)
    78a8:	4827883a 	mov	r19,r9
    78ac:	001d883a 	mov	r14,zero
    78b0:	48000216 	blt	r9,zero,78bc <___vfiprintf_internal_r+0x390>
    78b4:	00ffdfc4 	movi	r3,-129
    78b8:	a8ea703a 	and	r21,r21,r3
    78bc:	2002071e 	bne	r4,zero,80dc <___vfiprintf_internal_r+0xbb0>
    78c0:	4802ad26 	beq	r9,zero,8378 <___vfiprintf_internal_r+0xe4c>
    78c4:	10803fcc 	andi	r2,r2,255
    78c8:	00c00044 	movi	r3,1
    78cc:	10c22b26 	beq	r2,r3,817c <___vfiprintf_internal_r+0xc50>
    78d0:	00c00084 	movi	r3,2
    78d4:	dd001a04 	addi	r20,sp,104
    78d8:	10c0dd1e 	bne	r2,r3,7c50 <___vfiprintf_internal_r+0x724>
    78dc:	d9002617 	ldw	r4,152(sp)
    78e0:	b08003cc 	andi	r2,r22,15
    78e4:	6806973a 	slli	r3,r13,28
    78e8:	2085883a 	add	r2,r4,r2
    78ec:	b02cd13a 	srli	r22,r22,4
    78f0:	10800003 	ldbu	r2,0(r2)
    78f4:	681ad13a 	srli	r13,r13,4
    78f8:	a53fffc4 	addi	r20,r20,-1
    78fc:	1dacb03a 	or	r22,r3,r22
    7900:	a0800005 	stb	r2,0(r20)
    7904:	b344b03a 	or	r2,r22,r13
    7908:	103ff51e 	bne	r2,zero,78e0 <__alt_mem_Flash_flash_data+0xf40078e0>
    790c:	d9001e17 	ldw	r4,120(sp)
    7910:	2527c83a 	sub	r19,r4,r20
    7914:	9823883a 	mov	r17,r19
    7918:	9a40010e 	bge	r19,r9,7920 <___vfiprintf_internal_r+0x3f4>
    791c:	4823883a 	mov	r17,r9
    7920:	73803fcc 	andi	r14,r14,255
    7924:	7380201c 	xori	r14,r14,128
    7928:	73bfe004 	addi	r14,r14,-128
    792c:	70000126 	beq	r14,zero,7934 <___vfiprintf_internal_r+0x408>
    7930:	8c400044 	addi	r17,r17,1
    7934:	ab40008c 	andi	r13,r21,2
    7938:	68000126 	beq	r13,zero,7940 <___vfiprintf_internal_r+0x414>
    793c:	8c400084 	addi	r17,r17,2
    7940:	ad80210c 	andi	r22,r21,132
    7944:	b001c51e 	bne	r22,zero,805c <___vfiprintf_internal_r+0xb30>
    7948:	9447c83a 	sub	r3,r18,r17
    794c:	00c1c30e 	bge	zero,r3,805c <___vfiprintf_internal_r+0xb30>
    7950:	01c00404 	movi	r7,16
    7954:	d8801c17 	ldw	r2,112(sp)
    7958:	38c37b0e 	bge	r7,r3,8748 <___vfiprintf_internal_r+0x121c>
    795c:	010000b4 	movhi	r4,2
    7960:	21262104 	addi	r4,r4,-26492
    7964:	dc002915 	stw	r16,164(sp)
    7968:	d9801b17 	ldw	r6,108(sp)
    796c:	d9002415 	stw	r4,144(sp)
    7970:	03c001c4 	movi	r15,7
    7974:	da402515 	stw	r9,148(sp)
    7978:	db402815 	stw	r13,160(sp)
    797c:	1821883a 	mov	r16,r3
    7980:	00000506 	br	7998 <___vfiprintf_internal_r+0x46c>
    7984:	31400084 	addi	r5,r6,2
    7988:	42000204 	addi	r8,r8,8
    798c:	200d883a 	mov	r6,r4
    7990:	843ffc04 	addi	r16,r16,-16
    7994:	3c000d0e 	bge	r7,r16,79cc <___vfiprintf_internal_r+0x4a0>
    7998:	10800404 	addi	r2,r2,16
    799c:	31000044 	addi	r4,r6,1
    79a0:	47000015 	stw	fp,0(r8)
    79a4:	41c00115 	stw	r7,4(r8)
    79a8:	d8801c15 	stw	r2,112(sp)
    79ac:	d9001b15 	stw	r4,108(sp)
    79b0:	793ff40e 	bge	r15,r4,7984 <__alt_mem_Flash_flash_data+0xf4007984>
    79b4:	10019b1e 	bne	r2,zero,8024 <___vfiprintf_internal_r+0xaf8>
    79b8:	843ffc04 	addi	r16,r16,-16
    79bc:	000d883a 	mov	r6,zero
    79c0:	01400044 	movi	r5,1
    79c4:	d811883a 	mov	r8,sp
    79c8:	3c3ff316 	blt	r7,r16,7998 <__alt_mem_Flash_flash_data+0xf4007998>
    79cc:	8007883a 	mov	r3,r16
    79d0:	da402517 	ldw	r9,148(sp)
    79d4:	db402817 	ldw	r13,160(sp)
    79d8:	dc002917 	ldw	r16,164(sp)
    79dc:	d9002417 	ldw	r4,144(sp)
    79e0:	1885883a 	add	r2,r3,r2
    79e4:	40c00115 	stw	r3,4(r8)
    79e8:	41000015 	stw	r4,0(r8)
    79ec:	d8801c15 	stw	r2,112(sp)
    79f0:	d9401b15 	stw	r5,108(sp)
    79f4:	00c001c4 	movi	r3,7
    79f8:	19426a16 	blt	r3,r5,83a4 <___vfiprintf_internal_r+0xe78>
    79fc:	d8c01d87 	ldb	r3,118(sp)
    7a00:	42000204 	addi	r8,r8,8
    7a04:	29000044 	addi	r4,r5,1
    7a08:	1801991e 	bne	r3,zero,8070 <___vfiprintf_internal_r+0xb44>
    7a0c:	68000c26 	beq	r13,zero,7a40 <___vfiprintf_internal_r+0x514>
    7a10:	d8c01d04 	addi	r3,sp,116
    7a14:	10800084 	addi	r2,r2,2
    7a18:	40c00015 	stw	r3,0(r8)
    7a1c:	00c00084 	movi	r3,2
    7a20:	40c00115 	stw	r3,4(r8)
    7a24:	d8801c15 	stw	r2,112(sp)
    7a28:	d9001b15 	stw	r4,108(sp)
    7a2c:	00c001c4 	movi	r3,7
    7a30:	19024c16 	blt	r3,r4,8364 <___vfiprintf_internal_r+0xe38>
    7a34:	200b883a 	mov	r5,r4
    7a38:	42000204 	addi	r8,r8,8
    7a3c:	21000044 	addi	r4,r4,1
    7a40:	00c02004 	movi	r3,128
    7a44:	b0c20126 	beq	r22,r3,824c <___vfiprintf_internal_r+0xd20>
    7a48:	4cedc83a 	sub	r22,r9,r19
    7a4c:	0580230e 	bge	zero,r22,7adc <___vfiprintf_internal_r+0x5b0>
    7a50:	01c00404 	movi	r7,16
    7a54:	3d83140e 	bge	r7,r22,86a8 <___vfiprintf_internal_r+0x117c>
    7a58:	010000b4 	movhi	r4,2
    7a5c:	21261d04 	addi	r4,r4,-26508
    7a60:	d9002415 	stw	r4,144(sp)
    7a64:	034001c4 	movi	r13,7
    7a68:	00000506 	br	7a80 <___vfiprintf_internal_r+0x554>
    7a6c:	29000084 	addi	r4,r5,2
    7a70:	42000204 	addi	r8,r8,8
    7a74:	180b883a 	mov	r5,r3
    7a78:	b5bffc04 	addi	r22,r22,-16
    7a7c:	3d800d0e 	bge	r7,r22,7ab4 <___vfiprintf_internal_r+0x588>
    7a80:	10800404 	addi	r2,r2,16
    7a84:	28c00044 	addi	r3,r5,1
    7a88:	45c00015 	stw	r23,0(r8)
    7a8c:	41c00115 	stw	r7,4(r8)
    7a90:	d8801c15 	stw	r2,112(sp)
    7a94:	d8c01b15 	stw	r3,108(sp)
    7a98:	68fff40e 	bge	r13,r3,7a6c <__alt_mem_Flash_flash_data+0xf4007a6c>
    7a9c:	1001811e 	bne	r2,zero,80a4 <___vfiprintf_internal_r+0xb78>
    7aa0:	b5bffc04 	addi	r22,r22,-16
    7aa4:	01000044 	movi	r4,1
    7aa8:	000b883a 	mov	r5,zero
    7aac:	d811883a 	mov	r8,sp
    7ab0:	3dbff316 	blt	r7,r22,7a80 <__alt_mem_Flash_flash_data+0xf4007a80>
    7ab4:	d8c02417 	ldw	r3,144(sp)
    7ab8:	1585883a 	add	r2,r2,r22
    7abc:	45800115 	stw	r22,4(r8)
    7ac0:	40c00015 	stw	r3,0(r8)
    7ac4:	d8801c15 	stw	r2,112(sp)
    7ac8:	d9001b15 	stw	r4,108(sp)
    7acc:	00c001c4 	movi	r3,7
    7ad0:	1901d016 	blt	r3,r4,8214 <___vfiprintf_internal_r+0xce8>
    7ad4:	42000204 	addi	r8,r8,8
    7ad8:	21000044 	addi	r4,r4,1
    7adc:	14c5883a 	add	r2,r2,r19
    7ae0:	45000015 	stw	r20,0(r8)
    7ae4:	44c00115 	stw	r19,4(r8)
    7ae8:	d8801c15 	stw	r2,112(sp)
    7aec:	d9001b15 	stw	r4,108(sp)
    7af0:	00c001c4 	movi	r3,7
    7af4:	1901cf0e 	bge	r3,r4,8234 <___vfiprintf_internal_r+0xd08>
    7af8:	1002361e 	bne	r2,zero,83d4 <___vfiprintf_internal_r+0xea8>
    7afc:	d8001b15 	stw	zero,108(sp)
    7b00:	aac0010c 	andi	r11,r21,4
    7b04:	58002826 	beq	r11,zero,7ba8 <___vfiprintf_internal_r+0x67c>
    7b08:	9467c83a 	sub	r19,r18,r17
    7b0c:	d811883a 	mov	r8,sp
    7b10:	04c3340e 	bge	zero,r19,87e4 <___vfiprintf_internal_r+0x12b8>
    7b14:	01c00404 	movi	r7,16
    7b18:	3cc31b0e 	bge	r7,r19,8788 <___vfiprintf_internal_r+0x125c>
    7b1c:	00c000b4 	movhi	r3,2
    7b20:	18e62104 	addi	r3,r3,-26492
    7b24:	d9001b17 	ldw	r4,108(sp)
    7b28:	d8c02415 	stw	r3,144(sp)
    7b2c:	382b883a 	mov	r21,r7
    7b30:	050001c4 	movi	r20,7
    7b34:	dd802017 	ldw	r22,128(sp)
    7b38:	00000506 	br	7b50 <___vfiprintf_internal_r+0x624>
    7b3c:	21400084 	addi	r5,r4,2
    7b40:	42000204 	addi	r8,r8,8
    7b44:	1809883a 	mov	r4,r3
    7b48:	9cfffc04 	addi	r19,r19,-16
    7b4c:	acc00d0e 	bge	r21,r19,7b84 <___vfiprintf_internal_r+0x658>
    7b50:	10800404 	addi	r2,r2,16
    7b54:	20c00044 	addi	r3,r4,1
    7b58:	47000015 	stw	fp,0(r8)
    7b5c:	45400115 	stw	r21,4(r8)
    7b60:	d8801c15 	stw	r2,112(sp)
    7b64:	d8c01b15 	stw	r3,108(sp)
    7b68:	a0fff40e 	bge	r20,r3,7b3c <__alt_mem_Flash_flash_data+0xf4007b3c>
    7b6c:	10019f1e 	bne	r2,zero,81ec <___vfiprintf_internal_r+0xcc0>
    7b70:	9cfffc04 	addi	r19,r19,-16
    7b74:	01400044 	movi	r5,1
    7b78:	0009883a 	mov	r4,zero
    7b7c:	d811883a 	mov	r8,sp
    7b80:	acfff316 	blt	r21,r19,7b50 <__alt_mem_Flash_flash_data+0xf4007b50>
    7b84:	d8c02417 	ldw	r3,144(sp)
    7b88:	14c5883a 	add	r2,r2,r19
    7b8c:	44c00115 	stw	r19,4(r8)
    7b90:	40c00015 	stw	r3,0(r8)
    7b94:	d8801c15 	stw	r2,112(sp)
    7b98:	d9401b15 	stw	r5,108(sp)
    7b9c:	00c001c4 	movi	r3,7
    7ba0:	1941810e 	bge	r3,r5,81a8 <___vfiprintf_internal_r+0xc7c>
    7ba4:	10017a1e 	bne	r2,zero,8190 <___vfiprintf_internal_r+0xc64>
    7ba8:	8c82a416 	blt	r17,r18,863c <___vfiprintf_internal_r+0x1110>
    7bac:	d9002317 	ldw	r4,140(sp)
    7bb0:	2449883a 	add	r4,r4,r17
    7bb4:	d9002315 	stw	r4,140(sp)
    7bb8:	d8001b15 	stw	zero,108(sp)
    7bbc:	d811883a 	mov	r8,sp
    7bc0:	003e8e06 	br	75fc <__alt_mem_Flash_flash_data+0xf40075fc>
    7bc4:	d9002017 	ldw	r4,128(sp)
    7bc8:	a80b883a 	mov	r5,r21
    7bcc:	0002d680 	call	2d68 <__swsetup_r>
    7bd0:	10000c1e 	bne	r2,zero,7c04 <___vfiprintf_internal_r+0x6d8>
    7bd4:	a880030b 	ldhu	r2,12(r21)
    7bd8:	00c00284 	movi	r3,10
    7bdc:	1080068c 	andi	r2,r2,26
    7be0:	10fe741e 	bne	r2,r3,75b4 <__alt_mem_Flash_flash_data+0xf40075b4>
    7be4:	a880038f 	ldh	r2,14(r21)
    7be8:	103e7216 	blt	r2,zero,75b4 <__alt_mem_Flash_flash_data+0xf40075b4>
    7bec:	d9002017 	ldw	r4,128(sp)
    7bf0:	d9c02217 	ldw	r7,136(sp)
    7bf4:	a80b883a 	mov	r5,r21
    7bf8:	b00d883a 	mov	r6,r22
    7bfc:	00088200 	call	8820 <__sbprintf>
    7c00:	00000106 	br	7c08 <___vfiprintf_internal_r+0x6dc>
    7c04:	00bfffc4 	movi	r2,-1
    7c08:	dfc03517 	ldw	ra,212(sp)
    7c0c:	df003417 	ldw	fp,208(sp)
    7c10:	ddc03317 	ldw	r23,204(sp)
    7c14:	dd803217 	ldw	r22,200(sp)
    7c18:	dd403117 	ldw	r21,196(sp)
    7c1c:	dd003017 	ldw	r20,192(sp)
    7c20:	dcc02f17 	ldw	r19,188(sp)
    7c24:	dc802e17 	ldw	r18,184(sp)
    7c28:	dc402d17 	ldw	r17,180(sp)
    7c2c:	dc002c17 	ldw	r16,176(sp)
    7c30:	dec03604 	addi	sp,sp,216
    7c34:	f800283a 	ret
    7c38:	0004dc80 	call	4dc8 <__sinit>
    7c3c:	003e4d06 	br	7574 <__alt_mem_Flash_flash_data+0xf4007574>
    7c40:	8005883a 	mov	r2,r16
    7c44:	ad400114 	ori	r21,r21,4
    7c48:	80c00007 	ldb	r3,0(r16)
    7c4c:	003e9506 	br	76a4 <__alt_mem_Flash_flash_data+0xf40076a4>
    7c50:	b006d0fa 	srli	r3,r22,3
    7c54:	6808977a 	slli	r4,r13,29
    7c58:	681ad0fa 	srli	r13,r13,3
    7c5c:	b58001cc 	andi	r22,r22,7
    7c60:	b0800c04 	addi	r2,r22,48
    7c64:	a53fffc4 	addi	r20,r20,-1
    7c68:	20ecb03a 	or	r22,r4,r3
    7c6c:	a0800005 	stb	r2,0(r20)
    7c70:	b346b03a 	or	r3,r22,r13
    7c74:	183ff61e 	bne	r3,zero,7c50 <__alt_mem_Flash_flash_data+0xf4007c50>
    7c78:	a8c0004c 	andi	r3,r21,1
    7c7c:	a009883a 	mov	r4,r20
    7c80:	18013b26 	beq	r3,zero,8170 <___vfiprintf_internal_r+0xc44>
    7c84:	10803fcc 	andi	r2,r2,255
    7c88:	1080201c 	xori	r2,r2,128
    7c8c:	10bfe004 	addi	r2,r2,-128
    7c90:	00c00c04 	movi	r3,48
    7c94:	10ff1d26 	beq	r2,r3,790c <__alt_mem_Flash_flash_data+0xf400790c>
    7c98:	d8801e17 	ldw	r2,120(sp)
    7c9c:	a53fffc4 	addi	r20,r20,-1
    7ca0:	20ffffc5 	stb	r3,-1(r4)
    7ca4:	1527c83a 	sub	r19,r2,r20
    7ca8:	003f1a06 	br	7914 <__alt_mem_Flash_flash_data+0xf4007914>
    7cac:	ad402014 	ori	r21,r21,128
    7cb0:	8005883a 	mov	r2,r16
    7cb4:	80c00007 	ldb	r3,0(r16)
    7cb8:	003e7a06 	br	76a4 <__alt_mem_Flash_flash_data+0xf40076a4>
    7cbc:	8005883a 	mov	r2,r16
    7cc0:	0025883a 	mov	r18,zero
    7cc4:	193ff404 	addi	r4,r3,-48
    7cc8:	10c00007 	ldb	r3,0(r2)
    7ccc:	948002a4 	muli	r18,r18,10
    7cd0:	84000044 	addi	r16,r16,1
    7cd4:	8005883a 	mov	r2,r16
    7cd8:	9125883a 	add	r18,r18,r4
    7cdc:	193ff404 	addi	r4,r3,-48
    7ce0:	313ff92e 	bgeu	r6,r4,7cc8 <__alt_mem_Flash_flash_data+0xf4007cc8>
    7ce4:	003e7006 	br	76a8 <__alt_mem_Flash_flash_data+0xf40076a8>
    7ce8:	ad400414 	ori	r21,r21,16
    7cec:	d9c01d85 	stb	r7,118(sp)
    7cf0:	a880080c 	andi	r2,r21,32
    7cf4:	d8c02217 	ldw	r3,136(sp)
    7cf8:	10005a26 	beq	r2,zero,7e64 <___vfiprintf_internal_r+0x938>
    7cfc:	d9002217 	ldw	r4,136(sp)
    7d00:	18800117 	ldw	r2,4(r3)
    7d04:	1d800017 	ldw	r22,0(r3)
    7d08:	21000204 	addi	r4,r4,8
    7d0c:	d9002215 	stw	r4,136(sp)
    7d10:	101b883a 	mov	r13,r2
    7d14:	1001f416 	blt	r2,zero,84e8 <___vfiprintf_internal_r+0xfbc>
    7d18:	db801d83 	ldbu	r14,118(sp)
    7d1c:	4827883a 	mov	r19,r9
    7d20:	00800044 	movi	r2,1
    7d24:	b348b03a 	or	r4,r22,r13
    7d28:	003ee106 	br	78b0 <__alt_mem_Flash_flash_data+0xf40078b0>
    7d2c:	80c00007 	ldb	r3,0(r16)
    7d30:	80800044 	addi	r2,r16,1
    7d34:	1b42a326 	beq	r3,r13,87c4 <___vfiprintf_internal_r+0x1298>
    7d38:	193ff404 	addi	r4,r3,-48
    7d3c:	1021883a 	mov	r16,r2
    7d40:	0013883a 	mov	r9,zero
    7d44:	313e5836 	bltu	r6,r4,76a8 <__alt_mem_Flash_flash_data+0xf40076a8>
    7d48:	80c00007 	ldb	r3,0(r16)
    7d4c:	4a4002a4 	muli	r9,r9,10
    7d50:	84000044 	addi	r16,r16,1
    7d54:	2253883a 	add	r9,r4,r9
    7d58:	193ff404 	addi	r4,r3,-48
    7d5c:	313ffa2e 	bgeu	r6,r4,7d48 <__alt_mem_Flash_flash_data+0xf4007d48>
    7d60:	483e510e 	bge	r9,zero,76a8 <__alt_mem_Flash_flash_data+0xf40076a8>
    7d64:	027fffc4 	movi	r9,-1
    7d68:	003e4f06 	br	76a8 <__alt_mem_Flash_flash_data+0xf40076a8>
    7d6c:	d9c01d85 	stb	r7,118(sp)
    7d70:	a880080c 	andi	r2,r21,32
    7d74:	10020826 	beq	r2,zero,8598 <___vfiprintf_internal_r+0x106c>
    7d78:	d8c02217 	ldw	r3,136(sp)
    7d7c:	d9002317 	ldw	r4,140(sp)
    7d80:	18800017 	ldw	r2,0(r3)
    7d84:	2007d7fa 	srai	r3,r4,31
    7d88:	d9002217 	ldw	r4,136(sp)
    7d8c:	10c00115 	stw	r3,4(r2)
    7d90:	21000104 	addi	r4,r4,4
    7d94:	d9002215 	stw	r4,136(sp)
    7d98:	d9002317 	ldw	r4,140(sp)
    7d9c:	11000015 	stw	r4,0(r2)
    7da0:	003e1606 	br	75fc <__alt_mem_Flash_flash_data+0xf40075fc>
    7da4:	d8802217 	ldw	r2,136(sp)
    7da8:	d8c02217 	ldw	r3,136(sp)
    7dac:	15800017 	ldw	r22,0(r2)
    7db0:	13400117 	ldw	r13,4(r2)
    7db4:	18c00204 	addi	r3,r3,8
    7db8:	0005883a 	mov	r2,zero
    7dbc:	d8c02215 	stw	r3,136(sp)
    7dc0:	b348b03a 	or	r4,r22,r13
    7dc4:	003eb706 	br	78a4 <__alt_mem_Flash_flash_data+0xf40078a4>
    7dc8:	38803fcc 	andi	r2,r7,255
    7dcc:	1080201c 	xori	r2,r2,128
    7dd0:	10bfe004 	addi	r2,r2,-128
    7dd4:	1001e31e 	bne	r2,zero,8564 <___vfiprintf_internal_r+0x1038>
    7dd8:	8005883a 	mov	r2,r16
    7ddc:	01c00804 	movi	r7,32
    7de0:	80c00007 	ldb	r3,0(r16)
    7de4:	003e2f06 	br	76a4 <__alt_mem_Flash_flash_data+0xf40076a4>
    7de8:	ad400054 	ori	r21,r21,1
    7dec:	8005883a 	mov	r2,r16
    7df0:	80c00007 	ldb	r3,0(r16)
    7df4:	003e2b06 	br	76a4 <__alt_mem_Flash_flash_data+0xf40076a4>
    7df8:	d8c02217 	ldw	r3,136(sp)
    7dfc:	1c800017 	ldw	r18,0(r3)
    7e00:	18c00104 	addi	r3,r3,4
    7e04:	90023816 	blt	r18,zero,86e8 <___vfiprintf_internal_r+0x11bc>
    7e08:	d8c02215 	stw	r3,136(sp)
    7e0c:	8005883a 	mov	r2,r16
    7e10:	80c00007 	ldb	r3,0(r16)
    7e14:	003e2306 	br	76a4 <__alt_mem_Flash_flash_data+0xf40076a4>
    7e18:	8005883a 	mov	r2,r16
    7e1c:	01c00ac4 	movi	r7,43
    7e20:	80c00007 	ldb	r3,0(r16)
    7e24:	003e1f06 	br	76a4 <__alt_mem_Flash_flash_data+0xf40076a4>
    7e28:	d8c02217 	ldw	r3,136(sp)
    7e2c:	04400044 	movi	r17,1
    7e30:	d8001d85 	stb	zero,118(sp)
    7e34:	18800017 	ldw	r2,0(r3)
    7e38:	18c00104 	addi	r3,r3,4
    7e3c:	d8c02215 	stw	r3,136(sp)
    7e40:	d8801005 	stb	r2,64(sp)
    7e44:	8827883a 	mov	r19,r17
    7e48:	dd001004 	addi	r20,sp,64
    7e4c:	0013883a 	mov	r9,zero
    7e50:	003eb806 	br	7934 <__alt_mem_Flash_flash_data+0xf4007934>
    7e54:	d9c01d85 	stb	r7,118(sp)
    7e58:	a880080c 	andi	r2,r21,32
    7e5c:	d8c02217 	ldw	r3,136(sp)
    7e60:	103fa61e 	bne	r2,zero,7cfc <__alt_mem_Flash_flash_data+0xf4007cfc>
    7e64:	a880040c 	andi	r2,r21,16
    7e68:	1001dd26 	beq	r2,zero,85e0 <___vfiprintf_internal_r+0x10b4>
    7e6c:	1d800017 	ldw	r22,0(r3)
    7e70:	d8802217 	ldw	r2,136(sp)
    7e74:	b01bd7fa 	srai	r13,r22,31
    7e78:	10800104 	addi	r2,r2,4
    7e7c:	d8802215 	stw	r2,136(sp)
    7e80:	6805883a 	mov	r2,r13
    7e84:	003fa306 	br	7d14 <__alt_mem_Flash_flash_data+0xf4007d14>
    7e88:	008000b4 	movhi	r2,2
    7e8c:	10a5b704 	addi	r2,r2,-26916
    7e90:	d8802615 	stw	r2,152(sp)
    7e94:	d9c01d85 	stb	r7,118(sp)
    7e98:	a880080c 	andi	r2,r21,32
    7e9c:	10004726 	beq	r2,zero,7fbc <___vfiprintf_internal_r+0xa90>
    7ea0:	d9002217 	ldw	r4,136(sp)
    7ea4:	25800017 	ldw	r22,0(r4)
    7ea8:	23400117 	ldw	r13,4(r4)
    7eac:	21000204 	addi	r4,r4,8
    7eb0:	d9002215 	stw	r4,136(sp)
    7eb4:	a880004c 	andi	r2,r21,1
    7eb8:	10014e26 	beq	r2,zero,83f4 <___vfiprintf_internal_r+0xec8>
    7ebc:	b348b03a 	or	r4,r22,r13
    7ec0:	20019c26 	beq	r4,zero,8534 <___vfiprintf_internal_r+0x1008>
    7ec4:	00800c04 	movi	r2,48
    7ec8:	d8801d05 	stb	r2,116(sp)
    7ecc:	d8c01d45 	stb	r3,117(sp)
    7ed0:	ad400094 	ori	r21,r21,2
    7ed4:	00800084 	movi	r2,2
    7ed8:	003e7206 	br	78a4 <__alt_mem_Flash_flash_data+0xf40078a4>
    7edc:	d8c02217 	ldw	r3,136(sp)
    7ee0:	d8001d85 	stb	zero,118(sp)
    7ee4:	1d000017 	ldw	r20,0(r3)
    7ee8:	1d800104 	addi	r22,r3,4
    7eec:	a0021c26 	beq	r20,zero,8760 <___vfiprintf_internal_r+0x1234>
    7ef0:	a009883a 	mov	r4,r20
    7ef4:	48020016 	blt	r9,zero,86f8 <___vfiprintf_internal_r+0x11cc>
    7ef8:	480d883a 	mov	r6,r9
    7efc:	000b883a 	mov	r5,zero
    7f00:	da002a15 	stw	r8,168(sp)
    7f04:	da402b15 	stw	r9,172(sp)
    7f08:	0005df40 	call	5df4 <memchr>
    7f0c:	da002a17 	ldw	r8,168(sp)
    7f10:	da402b17 	ldw	r9,172(sp)
    7f14:	10022226 	beq	r2,zero,87a0 <___vfiprintf_internal_r+0x1274>
    7f18:	1527c83a 	sub	r19,r2,r20
    7f1c:	4cc1c916 	blt	r9,r19,8644 <___vfiprintf_internal_r+0x1118>
    7f20:	db801d83 	ldbu	r14,118(sp)
    7f24:	dd802215 	stw	r22,136(sp)
    7f28:	0013883a 	mov	r9,zero
    7f2c:	003e7906 	br	7914 <__alt_mem_Flash_flash_data+0xf4007914>
    7f30:	ad401014 	ori	r21,r21,64
    7f34:	8005883a 	mov	r2,r16
    7f38:	80c00007 	ldb	r3,0(r16)
    7f3c:	003dd906 	br	76a4 <__alt_mem_Flash_flash_data+0xf40076a4>
    7f40:	80c00007 	ldb	r3,0(r16)
    7f44:	8005883a 	mov	r2,r16
    7f48:	1b01e326 	beq	r3,r12,86d8 <___vfiprintf_internal_r+0x11ac>
    7f4c:	ad400414 	ori	r21,r21,16
    7f50:	003dd406 	br	76a4 <__alt_mem_Flash_flash_data+0xf40076a4>
    7f54:	d9002217 	ldw	r4,136(sp)
    7f58:	00800c04 	movi	r2,48
    7f5c:	d8801d05 	stb	r2,116(sp)
    7f60:	25800017 	ldw	r22,0(r4)
    7f64:	00801e04 	movi	r2,120
    7f68:	d8801d45 	stb	r2,117(sp)
    7f6c:	008000b4 	movhi	r2,2
    7f70:	21000104 	addi	r4,r4,4
    7f74:	10a5bc04 	addi	r2,r2,-26896
    7f78:	d9002215 	stw	r4,136(sp)
    7f7c:	d8802615 	stw	r2,152(sp)
    7f80:	001b883a 	mov	r13,zero
    7f84:	ad400094 	ori	r21,r21,2
    7f88:	00800084 	movi	r2,2
    7f8c:	b009883a 	mov	r4,r22
    7f90:	003e4406 	br	78a4 <__alt_mem_Flash_flash_data+0xf40078a4>
    7f94:	ad400814 	ori	r21,r21,32
    7f98:	8005883a 	mov	r2,r16
    7f9c:	80c00007 	ldb	r3,0(r16)
    7fa0:	003dc006 	br	76a4 <__alt_mem_Flash_flash_data+0xf40076a4>
    7fa4:	008000b4 	movhi	r2,2
    7fa8:	10a5bc04 	addi	r2,r2,-26896
    7fac:	d8802615 	stw	r2,152(sp)
    7fb0:	d9c01d85 	stb	r7,118(sp)
    7fb4:	a880080c 	andi	r2,r21,32
    7fb8:	103fb91e 	bne	r2,zero,7ea0 <__alt_mem_Flash_flash_data+0xf4007ea0>
    7fbc:	a880040c 	andi	r2,r21,16
    7fc0:	10010f1e 	bne	r2,zero,8400 <___vfiprintf_internal_r+0xed4>
    7fc4:	a880100c 	andi	r2,r21,64
    7fc8:	10010d26 	beq	r2,zero,8400 <___vfiprintf_internal_r+0xed4>
    7fcc:	d9002217 	ldw	r4,136(sp)
    7fd0:	001b883a 	mov	r13,zero
    7fd4:	2580000b 	ldhu	r22,0(r4)
    7fd8:	21000104 	addi	r4,r4,4
    7fdc:	d9002215 	stw	r4,136(sp)
    7fe0:	003fb406 	br	7eb4 <__alt_mem_Flash_flash_data+0xf4007eb4>
    7fe4:	d9002217 	ldw	r4,136(sp)
    7fe8:	00800044 	movi	r2,1
    7fec:	25800017 	ldw	r22,0(r4)
    7ff0:	23400117 	ldw	r13,4(r4)
    7ff4:	21000204 	addi	r4,r4,8
    7ff8:	d9002215 	stw	r4,136(sp)
    7ffc:	b348b03a 	or	r4,r22,r13
    8000:	003e2806 	br	78a4 <__alt_mem_Flash_flash_data+0xf40078a4>
    8004:	d9c01d85 	stb	r7,118(sp)
    8008:	1801ab26 	beq	r3,zero,86b8 <___vfiprintf_internal_r+0x118c>
    800c:	04400044 	movi	r17,1
    8010:	d8c01005 	stb	r3,64(sp)
    8014:	d8001d85 	stb	zero,118(sp)
    8018:	8827883a 	mov	r19,r17
    801c:	dd001004 	addi	r20,sp,64
    8020:	003f8a06 	br	7e4c <__alt_mem_Flash_flash_data+0xf4007e4c>
    8024:	d9002017 	ldw	r4,128(sp)
    8028:	d9402117 	ldw	r5,132(sp)
    802c:	d9801a04 	addi	r6,sp,104
    8030:	d9c02b15 	stw	r7,172(sp)
    8034:	dbc02a15 	stw	r15,168(sp)
    8038:	00074180 	call	7418 <__sprint_r.part.0>
    803c:	d9c02b17 	ldw	r7,172(sp)
    8040:	dbc02a17 	ldw	r15,168(sp)
    8044:	1000631e 	bne	r2,zero,81d4 <___vfiprintf_internal_r+0xca8>
    8048:	d9801b17 	ldw	r6,108(sp)
    804c:	d8801c17 	ldw	r2,112(sp)
    8050:	d811883a 	mov	r8,sp
    8054:	31400044 	addi	r5,r6,1
    8058:	003e4d06 	br	7990 <__alt_mem_Flash_flash_data+0xf4007990>
    805c:	d9401b17 	ldw	r5,108(sp)
    8060:	d8801c17 	ldw	r2,112(sp)
    8064:	29000044 	addi	r4,r5,1
    8068:	d8c01d87 	ldb	r3,118(sp)
    806c:	183e6726 	beq	r3,zero,7a0c <__alt_mem_Flash_flash_data+0xf4007a0c>
    8070:	00c00044 	movi	r3,1
    8074:	d9401d84 	addi	r5,sp,118
    8078:	10c5883a 	add	r2,r2,r3
    807c:	41400015 	stw	r5,0(r8)
    8080:	40c00115 	stw	r3,4(r8)
    8084:	d8801c15 	stw	r2,112(sp)
    8088:	d9001b15 	stw	r4,108(sp)
    808c:	014001c4 	movi	r5,7
    8090:	2900ab16 	blt	r5,r4,8340 <___vfiprintf_internal_r+0xe14>
    8094:	200b883a 	mov	r5,r4
    8098:	42000204 	addi	r8,r8,8
    809c:	21000044 	addi	r4,r4,1
    80a0:	003e5a06 	br	7a0c <__alt_mem_Flash_flash_data+0xf4007a0c>
    80a4:	d9002017 	ldw	r4,128(sp)
    80a8:	d9402117 	ldw	r5,132(sp)
    80ac:	d9801a04 	addi	r6,sp,104
    80b0:	d9c02b15 	stw	r7,172(sp)
    80b4:	db402a15 	stw	r13,168(sp)
    80b8:	00074180 	call	7418 <__sprint_r.part.0>
    80bc:	d9c02b17 	ldw	r7,172(sp)
    80c0:	db402a17 	ldw	r13,168(sp)
    80c4:	1000431e 	bne	r2,zero,81d4 <___vfiprintf_internal_r+0xca8>
    80c8:	d9401b17 	ldw	r5,108(sp)
    80cc:	d8801c17 	ldw	r2,112(sp)
    80d0:	d811883a 	mov	r8,sp
    80d4:	29000044 	addi	r4,r5,1
    80d8:	003e6706 	br	7a78 <__alt_mem_Flash_flash_data+0xf4007a78>
    80dc:	10803fcc 	andi	r2,r2,255
    80e0:	00c00044 	movi	r3,1
    80e4:	10fdfa1e 	bne	r2,r3,78d0 <__alt_mem_Flash_flash_data+0xf40078d0>
    80e8:	6800021e 	bne	r13,zero,80f4 <___vfiprintf_internal_r+0xbc8>
    80ec:	00800244 	movi	r2,9
    80f0:	1580222e 	bgeu	r2,r22,817c <___vfiprintf_internal_r+0xc50>
    80f4:	dc802415 	stw	r18,144(sp)
    80f8:	dc002515 	stw	r16,148(sp)
    80fc:	dc401a04 	addi	r17,sp,104
    8100:	b021883a 	mov	r16,r22
    8104:	4827883a 	mov	r19,r9
    8108:	4029883a 	mov	r20,r8
    810c:	702d883a 	mov	r22,r14
    8110:	6825883a 	mov	r18,r13
    8114:	8009883a 	mov	r4,r16
    8118:	900b883a 	mov	r5,r18
    811c:	01800284 	movi	r6,10
    8120:	000f883a 	mov	r7,zero
    8124:	000a3180 	call	a318 <__umoddi3>
    8128:	10800c04 	addi	r2,r2,48
    812c:	8c7fffc4 	addi	r17,r17,-1
    8130:	8009883a 	mov	r4,r16
    8134:	900b883a 	mov	r5,r18
    8138:	01800284 	movi	r6,10
    813c:	000f883a 	mov	r7,zero
    8140:	88800005 	stb	r2,0(r17)
    8144:	0009d580 	call	9d58 <__udivdi3>
    8148:	1021883a 	mov	r16,r2
    814c:	10c4b03a 	or	r2,r2,r3
    8150:	1825883a 	mov	r18,r3
    8154:	103fef1e 	bne	r2,zero,8114 <__alt_mem_Flash_flash_data+0xf4008114>
    8158:	dc802417 	ldw	r18,144(sp)
    815c:	dc002517 	ldw	r16,148(sp)
    8160:	a011883a 	mov	r8,r20
    8164:	9813883a 	mov	r9,r19
    8168:	b01d883a 	mov	r14,r22
    816c:	8829883a 	mov	r20,r17
    8170:	d8c01e17 	ldw	r3,120(sp)
    8174:	1d27c83a 	sub	r19,r3,r20
    8178:	003de606 	br	7914 <__alt_mem_Flash_flash_data+0xf4007914>
    817c:	b5800c04 	addi	r22,r22,48
    8180:	dd8019c5 	stb	r22,103(sp)
    8184:	dcc02717 	ldw	r19,156(sp)
    8188:	dd0019c4 	addi	r20,sp,103
    818c:	003de106 	br	7914 <__alt_mem_Flash_flash_data+0xf4007914>
    8190:	d9002017 	ldw	r4,128(sp)
    8194:	d9402117 	ldw	r5,132(sp)
    8198:	d9801a04 	addi	r6,sp,104
    819c:	00074180 	call	7418 <__sprint_r.part.0>
    81a0:	10000c1e 	bne	r2,zero,81d4 <___vfiprintf_internal_r+0xca8>
    81a4:	d8801c17 	ldw	r2,112(sp)
    81a8:	8c80010e 	bge	r17,r18,81b0 <___vfiprintf_internal_r+0xc84>
    81ac:	9023883a 	mov	r17,r18
    81b0:	d8c02317 	ldw	r3,140(sp)
    81b4:	1c47883a 	add	r3,r3,r17
    81b8:	d8c02315 	stw	r3,140(sp)
    81bc:	103e7e26 	beq	r2,zero,7bb8 <__alt_mem_Flash_flash_data+0xf4007bb8>
    81c0:	d9002017 	ldw	r4,128(sp)
    81c4:	d9402117 	ldw	r5,132(sp)
    81c8:	d9801a04 	addi	r6,sp,104
    81cc:	00074180 	call	7418 <__sprint_r.part.0>
    81d0:	103e7926 	beq	r2,zero,7bb8 <__alt_mem_Flash_flash_data+0xf4007bb8>
    81d4:	dd402117 	ldw	r21,132(sp)
    81d8:	a880030b 	ldhu	r2,12(r21)
    81dc:	1080100c 	andi	r2,r2,64
    81e0:	103e881e 	bne	r2,zero,7c04 <__alt_mem_Flash_flash_data+0xf4007c04>
    81e4:	d8802317 	ldw	r2,140(sp)
    81e8:	003e8706 	br	7c08 <__alt_mem_Flash_flash_data+0xf4007c08>
    81ec:	d9402117 	ldw	r5,132(sp)
    81f0:	b009883a 	mov	r4,r22
    81f4:	d9801a04 	addi	r6,sp,104
    81f8:	00074180 	call	7418 <__sprint_r.part.0>
    81fc:	103ff51e 	bne	r2,zero,81d4 <__alt_mem_Flash_flash_data+0xf40081d4>
    8200:	d9001b17 	ldw	r4,108(sp)
    8204:	d8801c17 	ldw	r2,112(sp)
    8208:	d811883a 	mov	r8,sp
    820c:	21400044 	addi	r5,r4,1
    8210:	003e4d06 	br	7b48 <__alt_mem_Flash_flash_data+0xf4007b48>
    8214:	1000aa1e 	bne	r2,zero,84c0 <___vfiprintf_internal_r+0xf94>
    8218:	00c00044 	movi	r3,1
    821c:	9805883a 	mov	r2,r19
    8220:	dd000015 	stw	r20,0(sp)
    8224:	dcc00115 	stw	r19,4(sp)
    8228:	dcc01c15 	stw	r19,112(sp)
    822c:	d8c01b15 	stw	r3,108(sp)
    8230:	d811883a 	mov	r8,sp
    8234:	42000204 	addi	r8,r8,8
    8238:	aac0010c 	andi	r11,r21,4
    823c:	583fda26 	beq	r11,zero,81a8 <__alt_mem_Flash_flash_data+0xf40081a8>
    8240:	9467c83a 	sub	r19,r18,r17
    8244:	04fe3316 	blt	zero,r19,7b14 <__alt_mem_Flash_flash_data+0xf4007b14>
    8248:	003fd706 	br	81a8 <__alt_mem_Flash_flash_data+0xf40081a8>
    824c:	946dc83a 	sub	r22,r18,r17
    8250:	05bdfd0e 	bge	zero,r22,7a48 <__alt_mem_Flash_flash_data+0xf4007a48>
    8254:	00c000b4 	movhi	r3,2
    8258:	18e61d04 	addi	r3,r3,-26508
    825c:	01c00404 	movi	r7,16
    8260:	d8c02415 	stw	r3,144(sp)
    8264:	3d81530e 	bge	r7,r22,87b4 <___vfiprintf_internal_r+0x1288>
    8268:	8007883a 	mov	r3,r16
    826c:	034001c4 	movi	r13,7
    8270:	b021883a 	mov	r16,r22
    8274:	da402515 	stw	r9,148(sp)
    8278:	182d883a 	mov	r22,r3
    827c:	00000506 	br	8294 <___vfiprintf_internal_r+0xd68>
    8280:	29800084 	addi	r6,r5,2
    8284:	42000204 	addi	r8,r8,8
    8288:	180b883a 	mov	r5,r3
    828c:	843ffc04 	addi	r16,r16,-16
    8290:	3c000d0e 	bge	r7,r16,82c8 <___vfiprintf_internal_r+0xd9c>
    8294:	10800404 	addi	r2,r2,16
    8298:	28c00044 	addi	r3,r5,1
    829c:	45c00015 	stw	r23,0(r8)
    82a0:	41c00115 	stw	r7,4(r8)
    82a4:	d8801c15 	stw	r2,112(sp)
    82a8:	d8c01b15 	stw	r3,108(sp)
    82ac:	68fff40e 	bge	r13,r3,8280 <__alt_mem_Flash_flash_data+0xf4008280>
    82b0:	1000151e 	bne	r2,zero,8308 <___vfiprintf_internal_r+0xddc>
    82b4:	843ffc04 	addi	r16,r16,-16
    82b8:	01800044 	movi	r6,1
    82bc:	000b883a 	mov	r5,zero
    82c0:	d811883a 	mov	r8,sp
    82c4:	3c3ff316 	blt	r7,r16,8294 <__alt_mem_Flash_flash_data+0xf4008294>
    82c8:	da402517 	ldw	r9,148(sp)
    82cc:	b007883a 	mov	r3,r22
    82d0:	802d883a 	mov	r22,r16
    82d4:	1821883a 	mov	r16,r3
    82d8:	d8c02417 	ldw	r3,144(sp)
    82dc:	1585883a 	add	r2,r2,r22
    82e0:	45800115 	stw	r22,4(r8)
    82e4:	40c00015 	stw	r3,0(r8)
    82e8:	d8801c15 	stw	r2,112(sp)
    82ec:	d9801b15 	stw	r6,108(sp)
    82f0:	00c001c4 	movi	r3,7
    82f4:	19806d16 	blt	r3,r6,84ac <___vfiprintf_internal_r+0xf80>
    82f8:	42000204 	addi	r8,r8,8
    82fc:	31000044 	addi	r4,r6,1
    8300:	300b883a 	mov	r5,r6
    8304:	003dd006 	br	7a48 <__alt_mem_Flash_flash_data+0xf4007a48>
    8308:	d9002017 	ldw	r4,128(sp)
    830c:	d9402117 	ldw	r5,132(sp)
    8310:	d9801a04 	addi	r6,sp,104
    8314:	d9c02b15 	stw	r7,172(sp)
    8318:	db402a15 	stw	r13,168(sp)
    831c:	00074180 	call	7418 <__sprint_r.part.0>
    8320:	d9c02b17 	ldw	r7,172(sp)
    8324:	db402a17 	ldw	r13,168(sp)
    8328:	103faa1e 	bne	r2,zero,81d4 <__alt_mem_Flash_flash_data+0xf40081d4>
    832c:	d9401b17 	ldw	r5,108(sp)
    8330:	d8801c17 	ldw	r2,112(sp)
    8334:	d811883a 	mov	r8,sp
    8338:	29800044 	addi	r6,r5,1
    833c:	003fd306 	br	828c <__alt_mem_Flash_flash_data+0xf400828c>
    8340:	1000401e 	bne	r2,zero,8444 <___vfiprintf_internal_r+0xf18>
    8344:	68003b26 	beq	r13,zero,8434 <___vfiprintf_internal_r+0xf08>
    8348:	d9001d04 	addi	r4,sp,116
    834c:	00800084 	movi	r2,2
    8350:	d9000015 	stw	r4,0(sp)
    8354:	d8800115 	stw	r2,4(sp)
    8358:	1809883a 	mov	r4,r3
    835c:	d811883a 	mov	r8,sp
    8360:	003db406 	br	7a34 <__alt_mem_Flash_flash_data+0xf4007a34>
    8364:	1000451e 	bne	r2,zero,847c <___vfiprintf_internal_r+0xf50>
    8368:	01000044 	movi	r4,1
    836c:	000b883a 	mov	r5,zero
    8370:	d811883a 	mov	r8,sp
    8374:	003db206 	br	7a40 <__alt_mem_Flash_flash_data+0xf4007a40>
    8378:	10803fcc 	andi	r2,r2,255
    837c:	1000071e 	bne	r2,zero,839c <___vfiprintf_internal_r+0xe70>
    8380:	a880004c 	andi	r2,r21,1
    8384:	10000526 	beq	r2,zero,839c <___vfiprintf_internal_r+0xe70>
    8388:	00800c04 	movi	r2,48
    838c:	d88019c5 	stb	r2,103(sp)
    8390:	dcc02717 	ldw	r19,156(sp)
    8394:	dd0019c4 	addi	r20,sp,103
    8398:	003d5e06 	br	7914 <__alt_mem_Flash_flash_data+0xf4007914>
    839c:	dd001a04 	addi	r20,sp,104
    83a0:	003d5c06 	br	7914 <__alt_mem_Flash_flash_data+0xf4007914>
    83a4:	1000971e 	bne	r2,zero,8604 <___vfiprintf_internal_r+0x10d8>
    83a8:	d8c01d87 	ldb	r3,118(sp)
    83ac:	18005826 	beq	r3,zero,8510 <___vfiprintf_internal_r+0xfe4>
    83b0:	00800044 	movi	r2,1
    83b4:	d8c01d84 	addi	r3,sp,118
    83b8:	1009883a 	mov	r4,r2
    83bc:	d8c00015 	stw	r3,0(sp)
    83c0:	d8800115 	stw	r2,4(sp)
    83c4:	d811883a 	mov	r8,sp
    83c8:	003f3206 	br	8094 <__alt_mem_Flash_flash_data+0xf4008094>
    83cc:	8023883a 	mov	r17,r16
    83d0:	003ca706 	br	7670 <__alt_mem_Flash_flash_data+0xf4007670>
    83d4:	d9002017 	ldw	r4,128(sp)
    83d8:	d9402117 	ldw	r5,132(sp)
    83dc:	d9801a04 	addi	r6,sp,104
    83e0:	00074180 	call	7418 <__sprint_r.part.0>
    83e4:	103f7b1e 	bne	r2,zero,81d4 <__alt_mem_Flash_flash_data+0xf40081d4>
    83e8:	d8801c17 	ldw	r2,112(sp)
    83ec:	d811883a 	mov	r8,sp
    83f0:	003f9106 	br	8238 <__alt_mem_Flash_flash_data+0xf4008238>
    83f4:	00800084 	movi	r2,2
    83f8:	b348b03a 	or	r4,r22,r13
    83fc:	003d2906 	br	78a4 <__alt_mem_Flash_flash_data+0xf40078a4>
    8400:	d8802217 	ldw	r2,136(sp)
    8404:	001b883a 	mov	r13,zero
    8408:	15800017 	ldw	r22,0(r2)
    840c:	10800104 	addi	r2,r2,4
    8410:	d8802215 	stw	r2,136(sp)
    8414:	003ea706 	br	7eb4 <__alt_mem_Flash_flash_data+0xf4007eb4>
    8418:	d9002017 	ldw	r4,128(sp)
    841c:	d9402117 	ldw	r5,132(sp)
    8420:	d9801a04 	addi	r6,sp,104
    8424:	00074180 	call	7418 <__sprint_r.part.0>
    8428:	103f6a1e 	bne	r2,zero,81d4 <__alt_mem_Flash_flash_data+0xf40081d4>
    842c:	d811883a 	mov	r8,sp
    8430:	003cff06 	br	7830 <__alt_mem_Flash_flash_data+0xf4007830>
    8434:	000b883a 	mov	r5,zero
    8438:	1809883a 	mov	r4,r3
    843c:	d811883a 	mov	r8,sp
    8440:	003d7f06 	br	7a40 <__alt_mem_Flash_flash_data+0xf4007a40>
    8444:	d9002017 	ldw	r4,128(sp)
    8448:	d9402117 	ldw	r5,132(sp)
    844c:	d9801a04 	addi	r6,sp,104
    8450:	da402b15 	stw	r9,172(sp)
    8454:	db402a15 	stw	r13,168(sp)
    8458:	00074180 	call	7418 <__sprint_r.part.0>
    845c:	da402b17 	ldw	r9,172(sp)
    8460:	db402a17 	ldw	r13,168(sp)
    8464:	103f5b1e 	bne	r2,zero,81d4 <__alt_mem_Flash_flash_data+0xf40081d4>
    8468:	d9401b17 	ldw	r5,108(sp)
    846c:	d8801c17 	ldw	r2,112(sp)
    8470:	d811883a 	mov	r8,sp
    8474:	29000044 	addi	r4,r5,1
    8478:	003d6406 	br	7a0c <__alt_mem_Flash_flash_data+0xf4007a0c>
    847c:	d9002017 	ldw	r4,128(sp)
    8480:	d9402117 	ldw	r5,132(sp)
    8484:	d9801a04 	addi	r6,sp,104
    8488:	da402b15 	stw	r9,172(sp)
    848c:	00074180 	call	7418 <__sprint_r.part.0>
    8490:	da402b17 	ldw	r9,172(sp)
    8494:	103f4f1e 	bne	r2,zero,81d4 <__alt_mem_Flash_flash_data+0xf40081d4>
    8498:	d9401b17 	ldw	r5,108(sp)
    849c:	d8801c17 	ldw	r2,112(sp)
    84a0:	d811883a 	mov	r8,sp
    84a4:	29000044 	addi	r4,r5,1
    84a8:	003d6506 	br	7a40 <__alt_mem_Flash_flash_data+0xf4007a40>
    84ac:	10009a1e 	bne	r2,zero,8718 <___vfiprintf_internal_r+0x11ec>
    84b0:	01000044 	movi	r4,1
    84b4:	000b883a 	mov	r5,zero
    84b8:	d811883a 	mov	r8,sp
    84bc:	003d6206 	br	7a48 <__alt_mem_Flash_flash_data+0xf4007a48>
    84c0:	d9002017 	ldw	r4,128(sp)
    84c4:	d9402117 	ldw	r5,132(sp)
    84c8:	d9801a04 	addi	r6,sp,104
    84cc:	00074180 	call	7418 <__sprint_r.part.0>
    84d0:	103f401e 	bne	r2,zero,81d4 <__alt_mem_Flash_flash_data+0xf40081d4>
    84d4:	d9001b17 	ldw	r4,108(sp)
    84d8:	d8801c17 	ldw	r2,112(sp)
    84dc:	d811883a 	mov	r8,sp
    84e0:	21000044 	addi	r4,r4,1
    84e4:	003d7d06 	br	7adc <__alt_mem_Flash_flash_data+0xf4007adc>
    84e8:	05adc83a 	sub	r22,zero,r22
    84ec:	b004c03a 	cmpne	r2,r22,zero
    84f0:	035bc83a 	sub	r13,zero,r13
    84f4:	689bc83a 	sub	r13,r13,r2
    84f8:	03800b44 	movi	r14,45
    84fc:	db801d85 	stb	r14,118(sp)
    8500:	4827883a 	mov	r19,r9
    8504:	00800044 	movi	r2,1
    8508:	b348b03a 	or	r4,r22,r13
    850c:	003ce806 	br	78b0 <__alt_mem_Flash_flash_data+0xf40078b0>
    8510:	000b883a 	mov	r5,zero
    8514:	01000044 	movi	r4,1
    8518:	d811883a 	mov	r8,sp
    851c:	683d4826 	beq	r13,zero,7a40 <__alt_mem_Flash_flash_data+0xf4007a40>
    8520:	00800084 	movi	r2,2
    8524:	d8c01d04 	addi	r3,sp,116
    8528:	d8c00015 	stw	r3,0(sp)
    852c:	d8800115 	stw	r2,4(sp)
    8530:	003d4006 	br	7a34 <__alt_mem_Flash_flash_data+0xf4007a34>
    8534:	00800084 	movi	r2,2
    8538:	003cda06 	br	78a4 <__alt_mem_Flash_flash_data+0xf40078a4>
    853c:	a880100c 	andi	r2,r21,64
    8540:	10004226 	beq	r2,zero,864c <___vfiprintf_internal_r+0x1120>
    8544:	d8802217 	ldw	r2,136(sp)
    8548:	001b883a 	mov	r13,zero
    854c:	1580000b 	ldhu	r22,0(r2)
    8550:	10800104 	addi	r2,r2,4
    8554:	d8802215 	stw	r2,136(sp)
    8558:	b009883a 	mov	r4,r22
    855c:	0005883a 	mov	r2,zero
    8560:	003cd006 	br	78a4 <__alt_mem_Flash_flash_data+0xf40078a4>
    8564:	80c00007 	ldb	r3,0(r16)
    8568:	8005883a 	mov	r2,r16
    856c:	003c4d06 	br	76a4 <__alt_mem_Flash_flash_data+0xf40076a4>
    8570:	a880100c 	andi	r2,r21,64
    8574:	10004426 	beq	r2,zero,8688 <___vfiprintf_internal_r+0x115c>
    8578:	d8c02217 	ldw	r3,136(sp)
    857c:	001b883a 	mov	r13,zero
    8580:	00800044 	movi	r2,1
    8584:	1d80000b 	ldhu	r22,0(r3)
    8588:	18c00104 	addi	r3,r3,4
    858c:	d8c02215 	stw	r3,136(sp)
    8590:	b009883a 	mov	r4,r22
    8594:	003cc306 	br	78a4 <__alt_mem_Flash_flash_data+0xf40078a4>
    8598:	a880040c 	andi	r2,r21,16
    859c:	1000091e 	bne	r2,zero,85c4 <___vfiprintf_internal_r+0x1098>
    85a0:	aac0100c 	andi	r11,r21,64
    85a4:	58000726 	beq	r11,zero,85c4 <___vfiprintf_internal_r+0x1098>
    85a8:	d8c02217 	ldw	r3,136(sp)
    85ac:	d9002317 	ldw	r4,140(sp)
    85b0:	18800017 	ldw	r2,0(r3)
    85b4:	18c00104 	addi	r3,r3,4
    85b8:	d8c02215 	stw	r3,136(sp)
    85bc:	1100000d 	sth	r4,0(r2)
    85c0:	003c0e06 	br	75fc <__alt_mem_Flash_flash_data+0xf40075fc>
    85c4:	d8c02217 	ldw	r3,136(sp)
    85c8:	d9002317 	ldw	r4,140(sp)
    85cc:	18800017 	ldw	r2,0(r3)
    85d0:	18c00104 	addi	r3,r3,4
    85d4:	d8c02215 	stw	r3,136(sp)
    85d8:	11000015 	stw	r4,0(r2)
    85dc:	003c0706 	br	75fc <__alt_mem_Flash_flash_data+0xf40075fc>
    85e0:	a880100c 	andi	r2,r21,64
    85e4:	10002126 	beq	r2,zero,866c <___vfiprintf_internal_r+0x1140>
    85e8:	1d80000f 	ldh	r22,0(r3)
    85ec:	d8c02217 	ldw	r3,136(sp)
    85f0:	b01bd7fa 	srai	r13,r22,31
    85f4:	18c00104 	addi	r3,r3,4
    85f8:	d8c02215 	stw	r3,136(sp)
    85fc:	6805883a 	mov	r2,r13
    8600:	003dc406 	br	7d14 <__alt_mem_Flash_flash_data+0xf4007d14>
    8604:	d9002017 	ldw	r4,128(sp)
    8608:	d9402117 	ldw	r5,132(sp)
    860c:	d9801a04 	addi	r6,sp,104
    8610:	da402b15 	stw	r9,172(sp)
    8614:	db402a15 	stw	r13,168(sp)
    8618:	00074180 	call	7418 <__sprint_r.part.0>
    861c:	da402b17 	ldw	r9,172(sp)
    8620:	db402a17 	ldw	r13,168(sp)
    8624:	103eeb1e 	bne	r2,zero,81d4 <__alt_mem_Flash_flash_data+0xf40081d4>
    8628:	d9401b17 	ldw	r5,108(sp)
    862c:	d8801c17 	ldw	r2,112(sp)
    8630:	d811883a 	mov	r8,sp
    8634:	29000044 	addi	r4,r5,1
    8638:	003e8b06 	br	8068 <__alt_mem_Flash_flash_data+0xf4008068>
    863c:	9023883a 	mov	r17,r18
    8640:	003d5a06 	br	7bac <__alt_mem_Flash_flash_data+0xf4007bac>
    8644:	4827883a 	mov	r19,r9
    8648:	003e3506 	br	7f20 <__alt_mem_Flash_flash_data+0xf4007f20>
    864c:	d8c02217 	ldw	r3,136(sp)
    8650:	001b883a 	mov	r13,zero
    8654:	0005883a 	mov	r2,zero
    8658:	1d800017 	ldw	r22,0(r3)
    865c:	18c00104 	addi	r3,r3,4
    8660:	d8c02215 	stw	r3,136(sp)
    8664:	b009883a 	mov	r4,r22
    8668:	003c8e06 	br	78a4 <__alt_mem_Flash_flash_data+0xf40078a4>
    866c:	1d800017 	ldw	r22,0(r3)
    8670:	d9002217 	ldw	r4,136(sp)
    8674:	b01bd7fa 	srai	r13,r22,31
    8678:	21000104 	addi	r4,r4,4
    867c:	d9002215 	stw	r4,136(sp)
    8680:	6805883a 	mov	r2,r13
    8684:	003da306 	br	7d14 <__alt_mem_Flash_flash_data+0xf4007d14>
    8688:	d9002217 	ldw	r4,136(sp)
    868c:	001b883a 	mov	r13,zero
    8690:	00800044 	movi	r2,1
    8694:	25800017 	ldw	r22,0(r4)
    8698:	21000104 	addi	r4,r4,4
    869c:	d9002215 	stw	r4,136(sp)
    86a0:	b009883a 	mov	r4,r22
    86a4:	003c7f06 	br	78a4 <__alt_mem_Flash_flash_data+0xf40078a4>
    86a8:	00c000b4 	movhi	r3,2
    86ac:	18e61d04 	addi	r3,r3,-26508
    86b0:	d8c02415 	stw	r3,144(sp)
    86b4:	003cff06 	br	7ab4 <__alt_mem_Flash_flash_data+0xf4007ab4>
    86b8:	d8801c17 	ldw	r2,112(sp)
    86bc:	dd402117 	ldw	r21,132(sp)
    86c0:	103ec526 	beq	r2,zero,81d8 <__alt_mem_Flash_flash_data+0xf40081d8>
    86c4:	d9002017 	ldw	r4,128(sp)
    86c8:	a80b883a 	mov	r5,r21
    86cc:	d9801a04 	addi	r6,sp,104
    86d0:	00074180 	call	7418 <__sprint_r.part.0>
    86d4:	003ec006 	br	81d8 <__alt_mem_Flash_flash_data+0xf40081d8>
    86d8:	80800044 	addi	r2,r16,1
    86dc:	ad400814 	ori	r21,r21,32
    86e0:	80c00047 	ldb	r3,1(r16)
    86e4:	003bef06 	br	76a4 <__alt_mem_Flash_flash_data+0xf40076a4>
    86e8:	04a5c83a 	sub	r18,zero,r18
    86ec:	8005883a 	mov	r2,r16
    86f0:	d8c02215 	stw	r3,136(sp)
    86f4:	003d5306 	br	7c44 <__alt_mem_Flash_flash_data+0xf4007c44>
    86f8:	da002a15 	stw	r8,168(sp)
    86fc:	00073800 	call	7380 <strlen>
    8700:	1027883a 	mov	r19,r2
    8704:	db801d83 	ldbu	r14,118(sp)
    8708:	dd802215 	stw	r22,136(sp)
    870c:	0013883a 	mov	r9,zero
    8710:	da002a17 	ldw	r8,168(sp)
    8714:	003c7f06 	br	7914 <__alt_mem_Flash_flash_data+0xf4007914>
    8718:	d9002017 	ldw	r4,128(sp)
    871c:	d9402117 	ldw	r5,132(sp)
    8720:	d9801a04 	addi	r6,sp,104
    8724:	da402b15 	stw	r9,172(sp)
    8728:	00074180 	call	7418 <__sprint_r.part.0>
    872c:	da402b17 	ldw	r9,172(sp)
    8730:	103ea81e 	bne	r2,zero,81d4 <__alt_mem_Flash_flash_data+0xf40081d4>
    8734:	d9401b17 	ldw	r5,108(sp)
    8738:	d8801c17 	ldw	r2,112(sp)
    873c:	d811883a 	mov	r8,sp
    8740:	29000044 	addi	r4,r5,1
    8744:	003cc006 	br	7a48 <__alt_mem_Flash_flash_data+0xf4007a48>
    8748:	d9401b17 	ldw	r5,108(sp)
    874c:	010000b4 	movhi	r4,2
    8750:	21262104 	addi	r4,r4,-26492
    8754:	d9002415 	stw	r4,144(sp)
    8758:	29400044 	addi	r5,r5,1
    875c:	003c9f06 	br	79dc <__alt_mem_Flash_flash_data+0xf40079dc>
    8760:	00800184 	movi	r2,6
    8764:	1240012e 	bgeu	r2,r9,876c <___vfiprintf_internal_r+0x1240>
    8768:	1013883a 	mov	r9,r2
    876c:	4827883a 	mov	r19,r9
    8770:	4823883a 	mov	r17,r9
    8774:	48001116 	blt	r9,zero,87bc <___vfiprintf_internal_r+0x1290>
    8778:	050000b4 	movhi	r20,2
    877c:	dd802215 	stw	r22,136(sp)
    8780:	a525c104 	addi	r20,r20,-26876
    8784:	003db106 	br	7e4c <__alt_mem_Flash_flash_data+0xf4007e4c>
    8788:	d9401b17 	ldw	r5,108(sp)
    878c:	010000b4 	movhi	r4,2
    8790:	21262104 	addi	r4,r4,-26492
    8794:	d9002415 	stw	r4,144(sp)
    8798:	29400044 	addi	r5,r5,1
    879c:	003cf906 	br	7b84 <__alt_mem_Flash_flash_data+0xf4007b84>
    87a0:	4827883a 	mov	r19,r9
    87a4:	db801d83 	ldbu	r14,118(sp)
    87a8:	dd802215 	stw	r22,136(sp)
    87ac:	0013883a 	mov	r9,zero
    87b0:	003c5806 	br	7914 <__alt_mem_Flash_flash_data+0xf4007914>
    87b4:	200d883a 	mov	r6,r4
    87b8:	003ec706 	br	82d8 <__alt_mem_Flash_flash_data+0xf40082d8>
    87bc:	0023883a 	mov	r17,zero
    87c0:	003fed06 	br	8778 <__alt_mem_Flash_flash_data+0xf4008778>
    87c4:	d9002217 	ldw	r4,136(sp)
    87c8:	22400017 	ldw	r9,0(r4)
    87cc:	20c00104 	addi	r3,r4,4
    87d0:	d8c02215 	stw	r3,136(sp)
    87d4:	483fc20e 	bge	r9,zero,86e0 <__alt_mem_Flash_flash_data+0xf40086e0>
    87d8:	027fffc4 	movi	r9,-1
    87dc:	80c00047 	ldb	r3,1(r16)
    87e0:	003bb006 	br	76a4 <__alt_mem_Flash_flash_data+0xf40076a4>
    87e4:	8c80010e 	bge	r17,r18,87ec <___vfiprintf_internal_r+0x12c0>
    87e8:	9023883a 	mov	r17,r18
    87ec:	d8802317 	ldw	r2,140(sp)
    87f0:	1445883a 	add	r2,r2,r17
    87f4:	d8802315 	stw	r2,140(sp)
    87f8:	003cef06 	br	7bb8 <__alt_mem_Flash_flash_data+0xf4007bb8>

000087fc <__vfiprintf_internal>:
    87fc:	2007883a 	mov	r3,r4
    8800:	010000b4 	movhi	r4,2
    8804:	212eba04 	addi	r4,r4,-17688
    8808:	21000017 	ldw	r4,0(r4)
    880c:	2805883a 	mov	r2,r5
    8810:	300f883a 	mov	r7,r6
    8814:	180b883a 	mov	r5,r3
    8818:	100d883a 	mov	r6,r2
    881c:	000752c1 	jmpi	752c <___vfiprintf_internal_r>

00008820 <__sbprintf>:
    8820:	2880030b 	ldhu	r2,12(r5)
    8824:	2ac01917 	ldw	r11,100(r5)
    8828:	2a80038b 	ldhu	r10,14(r5)
    882c:	2a400717 	ldw	r9,28(r5)
    8830:	2a000917 	ldw	r8,36(r5)
    8834:	defee204 	addi	sp,sp,-1144
    8838:	00c10004 	movi	r3,1024
    883c:	dc011a15 	stw	r16,1128(sp)
    8840:	10bfff4c 	andi	r2,r2,65533
    8844:	2821883a 	mov	r16,r5
    8848:	d8cb883a 	add	r5,sp,r3
    884c:	dc811c15 	stw	r18,1136(sp)
    8850:	dc411b15 	stw	r17,1132(sp)
    8854:	dfc11d15 	stw	ra,1140(sp)
    8858:	2025883a 	mov	r18,r4
    885c:	d881030d 	sth	r2,1036(sp)
    8860:	dac11915 	stw	r11,1124(sp)
    8864:	da81038d 	sth	r10,1038(sp)
    8868:	da410715 	stw	r9,1052(sp)
    886c:	da010915 	stw	r8,1060(sp)
    8870:	dec10015 	stw	sp,1024(sp)
    8874:	dec10415 	stw	sp,1040(sp)
    8878:	d8c10215 	stw	r3,1032(sp)
    887c:	d8c10515 	stw	r3,1044(sp)
    8880:	d8010615 	stw	zero,1048(sp)
    8884:	000752c0 	call	752c <___vfiprintf_internal_r>
    8888:	1023883a 	mov	r17,r2
    888c:	10000416 	blt	r2,zero,88a0 <__sbprintf+0x80>
    8890:	9009883a 	mov	r4,r18
    8894:	d9410004 	addi	r5,sp,1024
    8898:	00049ec0 	call	49ec <_fflush_r>
    889c:	10000d1e 	bne	r2,zero,88d4 <__sbprintf+0xb4>
    88a0:	d8c1030b 	ldhu	r3,1036(sp)
    88a4:	18c0100c 	andi	r3,r3,64
    88a8:	18000326 	beq	r3,zero,88b8 <__sbprintf+0x98>
    88ac:	8080030b 	ldhu	r2,12(r16)
    88b0:	10801014 	ori	r2,r2,64
    88b4:	8080030d 	sth	r2,12(r16)
    88b8:	8805883a 	mov	r2,r17
    88bc:	dfc11d17 	ldw	ra,1140(sp)
    88c0:	dc811c17 	ldw	r18,1136(sp)
    88c4:	dc411b17 	ldw	r17,1132(sp)
    88c8:	dc011a17 	ldw	r16,1128(sp)
    88cc:	dec11e04 	addi	sp,sp,1144
    88d0:	f800283a 	ret
    88d4:	047fffc4 	movi	r17,-1
    88d8:	003ff106 	br	88a0 <__alt_mem_Flash_flash_data+0xf40088a0>

000088dc <_write_r>:
    88dc:	defffd04 	addi	sp,sp,-12
    88e0:	dc000015 	stw	r16,0(sp)
    88e4:	040000b4 	movhi	r16,2
    88e8:	dc400115 	stw	r17,4(sp)
    88ec:	8436b904 	addi	r16,r16,-9500
    88f0:	2023883a 	mov	r17,r4
    88f4:	2809883a 	mov	r4,r5
    88f8:	300b883a 	mov	r5,r6
    88fc:	380d883a 	mov	r6,r7
    8900:	dfc00215 	stw	ra,8(sp)
    8904:	80000015 	stw	zero,0(r16)
    8908:	000d89c0 	call	d89c <write>
    890c:	00ffffc4 	movi	r3,-1
    8910:	10c00526 	beq	r2,r3,8928 <_write_r+0x4c>
    8914:	dfc00217 	ldw	ra,8(sp)
    8918:	dc400117 	ldw	r17,4(sp)
    891c:	dc000017 	ldw	r16,0(sp)
    8920:	dec00304 	addi	sp,sp,12
    8924:	f800283a 	ret
    8928:	80c00017 	ldw	r3,0(r16)
    892c:	183ff926 	beq	r3,zero,8914 <__alt_mem_Flash_flash_data+0xf4008914>
    8930:	88c00015 	stw	r3,0(r17)
    8934:	003ff706 	br	8914 <__alt_mem_Flash_flash_data+0xf4008914>

00008938 <_close_r>:
    8938:	defffd04 	addi	sp,sp,-12
    893c:	dc000015 	stw	r16,0(sp)
    8940:	040000b4 	movhi	r16,2
    8944:	dc400115 	stw	r17,4(sp)
    8948:	8436b904 	addi	r16,r16,-9500
    894c:	2023883a 	mov	r17,r4
    8950:	2809883a 	mov	r4,r5
    8954:	dfc00215 	stw	ra,8(sp)
    8958:	80000015 	stw	zero,0(r16)
    895c:	000d0240 	call	d024 <close>
    8960:	00ffffc4 	movi	r3,-1
    8964:	10c00526 	beq	r2,r3,897c <_close_r+0x44>
    8968:	dfc00217 	ldw	ra,8(sp)
    896c:	dc400117 	ldw	r17,4(sp)
    8970:	dc000017 	ldw	r16,0(sp)
    8974:	dec00304 	addi	sp,sp,12
    8978:	f800283a 	ret
    897c:	80c00017 	ldw	r3,0(r16)
    8980:	183ff926 	beq	r3,zero,8968 <__alt_mem_Flash_flash_data+0xf4008968>
    8984:	88c00015 	stw	r3,0(r17)
    8988:	003ff706 	br	8968 <__alt_mem_Flash_flash_data+0xf4008968>

0000898c <_calloc_r>:
    898c:	298b383a 	mul	r5,r5,r6
    8990:	defffe04 	addi	sp,sp,-8
    8994:	dc000015 	stw	r16,0(sp)
    8998:	dfc00115 	stw	ra,4(sp)
    899c:	000564c0 	call	564c <_malloc_r>
    89a0:	1021883a 	mov	r16,r2
    89a4:	10002826 	beq	r2,zero,8a48 <_calloc_r+0xbc>
    89a8:	11bfff17 	ldw	r6,-4(r2)
    89ac:	00bfff04 	movi	r2,-4
    89b0:	00c00904 	movi	r3,36
    89b4:	308c703a 	and	r6,r6,r2
    89b8:	308d883a 	add	r6,r6,r2
    89bc:	19801436 	bltu	r3,r6,8a10 <_calloc_r+0x84>
    89c0:	008004c4 	movi	r2,19
    89c4:	11800936 	bltu	r2,r6,89ec <_calloc_r+0x60>
    89c8:	8005883a 	mov	r2,r16
    89cc:	10000015 	stw	zero,0(r2)
    89d0:	10000115 	stw	zero,4(r2)
    89d4:	10000215 	stw	zero,8(r2)
    89d8:	8005883a 	mov	r2,r16
    89dc:	dfc00117 	ldw	ra,4(sp)
    89e0:	dc000017 	ldw	r16,0(sp)
    89e4:	dec00204 	addi	sp,sp,8
    89e8:	f800283a 	ret
    89ec:	80000015 	stw	zero,0(r16)
    89f0:	80000115 	stw	zero,4(r16)
    89f4:	008006c4 	movi	r2,27
    89f8:	11800d2e 	bgeu	r2,r6,8a30 <_calloc_r+0xa4>
    89fc:	80000215 	stw	zero,8(r16)
    8a00:	80000315 	stw	zero,12(r16)
    8a04:	30c00c26 	beq	r6,r3,8a38 <_calloc_r+0xac>
    8a08:	80800404 	addi	r2,r16,16
    8a0c:	003fef06 	br	89cc <__alt_mem_Flash_flash_data+0xf40089cc>
    8a10:	8009883a 	mov	r4,r16
    8a14:	000b883a 	mov	r5,zero
    8a18:	00060140 	call	6014 <memset>
    8a1c:	8005883a 	mov	r2,r16
    8a20:	dfc00117 	ldw	ra,4(sp)
    8a24:	dc000017 	ldw	r16,0(sp)
    8a28:	dec00204 	addi	sp,sp,8
    8a2c:	f800283a 	ret
    8a30:	80800204 	addi	r2,r16,8
    8a34:	003fe506 	br	89cc <__alt_mem_Flash_flash_data+0xf40089cc>
    8a38:	80000415 	stw	zero,16(r16)
    8a3c:	80800604 	addi	r2,r16,24
    8a40:	80000515 	stw	zero,20(r16)
    8a44:	003fe106 	br	89cc <__alt_mem_Flash_flash_data+0xf40089cc>
    8a48:	0005883a 	mov	r2,zero
    8a4c:	003fe306 	br	89dc <__alt_mem_Flash_flash_data+0xf40089dc>

00008a50 <_fclose_r>:
    8a50:	28003926 	beq	r5,zero,8b38 <_fclose_r+0xe8>
    8a54:	defffc04 	addi	sp,sp,-16
    8a58:	dc400115 	stw	r17,4(sp)
    8a5c:	dc000015 	stw	r16,0(sp)
    8a60:	dfc00315 	stw	ra,12(sp)
    8a64:	dc800215 	stw	r18,8(sp)
    8a68:	2023883a 	mov	r17,r4
    8a6c:	2821883a 	mov	r16,r5
    8a70:	20000226 	beq	r4,zero,8a7c <_fclose_r+0x2c>
    8a74:	20800e17 	ldw	r2,56(r4)
    8a78:	10002726 	beq	r2,zero,8b18 <_fclose_r+0xc8>
    8a7c:	8080030f 	ldh	r2,12(r16)
    8a80:	1000071e 	bne	r2,zero,8aa0 <_fclose_r+0x50>
    8a84:	0005883a 	mov	r2,zero
    8a88:	dfc00317 	ldw	ra,12(sp)
    8a8c:	dc800217 	ldw	r18,8(sp)
    8a90:	dc400117 	ldw	r17,4(sp)
    8a94:	dc000017 	ldw	r16,0(sp)
    8a98:	dec00404 	addi	sp,sp,16
    8a9c:	f800283a 	ret
    8aa0:	8809883a 	mov	r4,r17
    8aa4:	800b883a 	mov	r5,r16
    8aa8:	00047e40 	call	47e4 <__sflush_r>
    8aac:	1025883a 	mov	r18,r2
    8ab0:	80800b17 	ldw	r2,44(r16)
    8ab4:	10000426 	beq	r2,zero,8ac8 <_fclose_r+0x78>
    8ab8:	81400717 	ldw	r5,28(r16)
    8abc:	8809883a 	mov	r4,r17
    8ac0:	103ee83a 	callr	r2
    8ac4:	10001616 	blt	r2,zero,8b20 <_fclose_r+0xd0>
    8ac8:	8080030b 	ldhu	r2,12(r16)
    8acc:	1080200c 	andi	r2,r2,128
    8ad0:	1000151e 	bne	r2,zero,8b28 <_fclose_r+0xd8>
    8ad4:	81400c17 	ldw	r5,48(r16)
    8ad8:	28000526 	beq	r5,zero,8af0 <_fclose_r+0xa0>
    8adc:	80801004 	addi	r2,r16,64
    8ae0:	28800226 	beq	r5,r2,8aec <_fclose_r+0x9c>
    8ae4:	8809883a 	mov	r4,r17
    8ae8:	0004f3c0 	call	4f3c <_free_r>
    8aec:	80000c15 	stw	zero,48(r16)
    8af0:	81401117 	ldw	r5,68(r16)
    8af4:	28000326 	beq	r5,zero,8b04 <_fclose_r+0xb4>
    8af8:	8809883a 	mov	r4,r17
    8afc:	0004f3c0 	call	4f3c <_free_r>
    8b00:	80001115 	stw	zero,68(r16)
    8b04:	0004dd80 	call	4dd8 <__sfp_lock_acquire>
    8b08:	8000030d 	sth	zero,12(r16)
    8b0c:	0004ddc0 	call	4ddc <__sfp_lock_release>
    8b10:	9005883a 	mov	r2,r18
    8b14:	003fdc06 	br	8a88 <__alt_mem_Flash_flash_data+0xf4008a88>
    8b18:	0004dc80 	call	4dc8 <__sinit>
    8b1c:	003fd706 	br	8a7c <__alt_mem_Flash_flash_data+0xf4008a7c>
    8b20:	04bfffc4 	movi	r18,-1
    8b24:	003fe806 	br	8ac8 <__alt_mem_Flash_flash_data+0xf4008ac8>
    8b28:	81400417 	ldw	r5,16(r16)
    8b2c:	8809883a 	mov	r4,r17
    8b30:	0004f3c0 	call	4f3c <_free_r>
    8b34:	003fe706 	br	8ad4 <__alt_mem_Flash_flash_data+0xf4008ad4>
    8b38:	0005883a 	mov	r2,zero
    8b3c:	f800283a 	ret

00008b40 <fclose>:
    8b40:	008000b4 	movhi	r2,2
    8b44:	10aeba04 	addi	r2,r2,-17688
    8b48:	200b883a 	mov	r5,r4
    8b4c:	11000017 	ldw	r4,0(r2)
    8b50:	0008a501 	jmpi	8a50 <_fclose_r>

00008b54 <_fputwc_r>:
    8b54:	3080030b 	ldhu	r2,12(r6)
    8b58:	defff804 	addi	sp,sp,-32
    8b5c:	dcc00415 	stw	r19,16(sp)
    8b60:	dc800315 	stw	r18,12(sp)
    8b64:	dc000115 	stw	r16,4(sp)
    8b68:	dfc00715 	stw	ra,28(sp)
    8b6c:	dd400615 	stw	r21,24(sp)
    8b70:	dd000515 	stw	r20,20(sp)
    8b74:	dc400215 	stw	r17,8(sp)
    8b78:	10c8000c 	andi	r3,r2,8192
    8b7c:	3021883a 	mov	r16,r6
    8b80:	2027883a 	mov	r19,r4
    8b84:	2825883a 	mov	r18,r5
    8b88:	1800051e 	bne	r3,zero,8ba0 <_fputwc_r+0x4c>
    8b8c:	30c01917 	ldw	r3,100(r6)
    8b90:	10880014 	ori	r2,r2,8192
    8b94:	3080030d 	sth	r2,12(r6)
    8b98:	18880014 	ori	r2,r3,8192
    8b9c:	30801915 	stw	r2,100(r6)
    8ba0:	000543c0 	call	543c <__locale_mb_cur_max>
    8ba4:	00c00044 	movi	r3,1
    8ba8:	10c03e26 	beq	r2,r3,8ca4 <_fputwc_r+0x150>
    8bac:	9809883a 	mov	r4,r19
    8bb0:	d80b883a 	mov	r5,sp
    8bb4:	900d883a 	mov	r6,r18
    8bb8:	81c01704 	addi	r7,r16,92
    8bbc:	0009b700 	call	9b70 <_wcrtomb_r>
    8bc0:	1029883a 	mov	r20,r2
    8bc4:	00bfffc4 	movi	r2,-1
    8bc8:	a0802026 	beq	r20,r2,8c4c <_fputwc_r+0xf8>
    8bcc:	d9400003 	ldbu	r5,0(sp)
    8bd0:	a0001c26 	beq	r20,zero,8c44 <_fputwc_r+0xf0>
    8bd4:	0023883a 	mov	r17,zero
    8bd8:	05400284 	movi	r21,10
    8bdc:	00000906 	br	8c04 <_fputwc_r+0xb0>
    8be0:	80800017 	ldw	r2,0(r16)
    8be4:	11400005 	stb	r5,0(r2)
    8be8:	80c00017 	ldw	r3,0(r16)
    8bec:	18c00044 	addi	r3,r3,1
    8bf0:	80c00015 	stw	r3,0(r16)
    8bf4:	8c400044 	addi	r17,r17,1
    8bf8:	dc45883a 	add	r2,sp,r17
    8bfc:	8d00112e 	bgeu	r17,r20,8c44 <_fputwc_r+0xf0>
    8c00:	11400003 	ldbu	r5,0(r2)
    8c04:	80c00217 	ldw	r3,8(r16)
    8c08:	18ffffc4 	addi	r3,r3,-1
    8c0c:	80c00215 	stw	r3,8(r16)
    8c10:	183ff30e 	bge	r3,zero,8be0 <__alt_mem_Flash_flash_data+0xf4008be0>
    8c14:	80800617 	ldw	r2,24(r16)
    8c18:	18801916 	blt	r3,r2,8c80 <_fputwc_r+0x12c>
    8c1c:	80800017 	ldw	r2,0(r16)
    8c20:	11400005 	stb	r5,0(r2)
    8c24:	80800017 	ldw	r2,0(r16)
    8c28:	10c00003 	ldbu	r3,0(r2)
    8c2c:	10800044 	addi	r2,r2,1
    8c30:	1d402326 	beq	r3,r21,8cc0 <_fputwc_r+0x16c>
    8c34:	80800015 	stw	r2,0(r16)
    8c38:	8c400044 	addi	r17,r17,1
    8c3c:	dc45883a 	add	r2,sp,r17
    8c40:	8d3fef36 	bltu	r17,r20,8c00 <__alt_mem_Flash_flash_data+0xf4008c00>
    8c44:	9005883a 	mov	r2,r18
    8c48:	00000406 	br	8c5c <_fputwc_r+0x108>
    8c4c:	80c0030b 	ldhu	r3,12(r16)
    8c50:	a005883a 	mov	r2,r20
    8c54:	18c01014 	ori	r3,r3,64
    8c58:	80c0030d 	sth	r3,12(r16)
    8c5c:	dfc00717 	ldw	ra,28(sp)
    8c60:	dd400617 	ldw	r21,24(sp)
    8c64:	dd000517 	ldw	r20,20(sp)
    8c68:	dcc00417 	ldw	r19,16(sp)
    8c6c:	dc800317 	ldw	r18,12(sp)
    8c70:	dc400217 	ldw	r17,8(sp)
    8c74:	dc000117 	ldw	r16,4(sp)
    8c78:	dec00804 	addi	sp,sp,32
    8c7c:	f800283a 	ret
    8c80:	9809883a 	mov	r4,r19
    8c84:	29403fcc 	andi	r5,r5,255
    8c88:	800d883a 	mov	r6,r16
    8c8c:	0009a1c0 	call	9a1c <__swbuf_r>
    8c90:	10bfffe0 	cmpeqi	r2,r2,-1
    8c94:	10803fcc 	andi	r2,r2,255
    8c98:	103fd626 	beq	r2,zero,8bf4 <__alt_mem_Flash_flash_data+0xf4008bf4>
    8c9c:	00bfffc4 	movi	r2,-1
    8ca0:	003fee06 	br	8c5c <__alt_mem_Flash_flash_data+0xf4008c5c>
    8ca4:	90ffffc4 	addi	r3,r18,-1
    8ca8:	01003f84 	movi	r4,254
    8cac:	20ffbf36 	bltu	r4,r3,8bac <__alt_mem_Flash_flash_data+0xf4008bac>
    8cb0:	900b883a 	mov	r5,r18
    8cb4:	dc800005 	stb	r18,0(sp)
    8cb8:	1029883a 	mov	r20,r2
    8cbc:	003fc506 	br	8bd4 <__alt_mem_Flash_flash_data+0xf4008bd4>
    8cc0:	9809883a 	mov	r4,r19
    8cc4:	a80b883a 	mov	r5,r21
    8cc8:	800d883a 	mov	r6,r16
    8ccc:	0009a1c0 	call	9a1c <__swbuf_r>
    8cd0:	10bfffe0 	cmpeqi	r2,r2,-1
    8cd4:	003fef06 	br	8c94 <__alt_mem_Flash_flash_data+0xf4008c94>

00008cd8 <fputwc>:
    8cd8:	008000b4 	movhi	r2,2
    8cdc:	defffc04 	addi	sp,sp,-16
    8ce0:	10aeba04 	addi	r2,r2,-17688
    8ce4:	dc000115 	stw	r16,4(sp)
    8ce8:	14000017 	ldw	r16,0(r2)
    8cec:	dc400215 	stw	r17,8(sp)
    8cf0:	dfc00315 	stw	ra,12(sp)
    8cf4:	2023883a 	mov	r17,r4
    8cf8:	280d883a 	mov	r6,r5
    8cfc:	80000626 	beq	r16,zero,8d18 <fputwc+0x40>
    8d00:	80800e17 	ldw	r2,56(r16)
    8d04:	1000041e 	bne	r2,zero,8d18 <fputwc+0x40>
    8d08:	8009883a 	mov	r4,r16
    8d0c:	d9400015 	stw	r5,0(sp)
    8d10:	0004dc80 	call	4dc8 <__sinit>
    8d14:	d9800017 	ldw	r6,0(sp)
    8d18:	8009883a 	mov	r4,r16
    8d1c:	880b883a 	mov	r5,r17
    8d20:	dfc00317 	ldw	ra,12(sp)
    8d24:	dc400217 	ldw	r17,8(sp)
    8d28:	dc000117 	ldw	r16,4(sp)
    8d2c:	dec00404 	addi	sp,sp,16
    8d30:	0008b541 	jmpi	8b54 <_fputwc_r>

00008d34 <_fstat_r>:
    8d34:	defffd04 	addi	sp,sp,-12
    8d38:	dc000015 	stw	r16,0(sp)
    8d3c:	040000b4 	movhi	r16,2
    8d40:	dc400115 	stw	r17,4(sp)
    8d44:	8436b904 	addi	r16,r16,-9500
    8d48:	2023883a 	mov	r17,r4
    8d4c:	2809883a 	mov	r4,r5
    8d50:	300b883a 	mov	r5,r6
    8d54:	dfc00215 	stw	ra,8(sp)
    8d58:	80000015 	stw	zero,0(r16)
    8d5c:	000d1700 	call	d170 <fstat>
    8d60:	00ffffc4 	movi	r3,-1
    8d64:	10c00526 	beq	r2,r3,8d7c <_fstat_r+0x48>
    8d68:	dfc00217 	ldw	ra,8(sp)
    8d6c:	dc400117 	ldw	r17,4(sp)
    8d70:	dc000017 	ldw	r16,0(sp)
    8d74:	dec00304 	addi	sp,sp,12
    8d78:	f800283a 	ret
    8d7c:	80c00017 	ldw	r3,0(r16)
    8d80:	183ff926 	beq	r3,zero,8d68 <__alt_mem_Flash_flash_data+0xf4008d68>
    8d84:	88c00015 	stw	r3,0(r17)
    8d88:	003ff706 	br	8d68 <__alt_mem_Flash_flash_data+0xf4008d68>

00008d8c <__sfvwrite_r>:
    8d8c:	30800217 	ldw	r2,8(r6)
    8d90:	10006726 	beq	r2,zero,8f30 <__sfvwrite_r+0x1a4>
    8d94:	defff404 	addi	sp,sp,-48
    8d98:	dd000615 	stw	r20,24(sp)
    8d9c:	2029883a 	mov	r20,r4
    8da0:	2900030b 	ldhu	r4,12(r5)
    8da4:	ddc00915 	stw	r23,36(sp)
    8da8:	dc000215 	stw	r16,8(sp)
    8dac:	dfc00b15 	stw	ra,44(sp)
    8db0:	df000a15 	stw	fp,40(sp)
    8db4:	dd800815 	stw	r22,32(sp)
    8db8:	dd400715 	stw	r21,28(sp)
    8dbc:	dcc00515 	stw	r19,20(sp)
    8dc0:	dc800415 	stw	r18,16(sp)
    8dc4:	dc400315 	stw	r17,12(sp)
    8dc8:	2080020c 	andi	r2,r4,8
    8dcc:	2821883a 	mov	r16,r5
    8dd0:	302f883a 	mov	r23,r6
    8dd4:	10002726 	beq	r2,zero,8e74 <__sfvwrite_r+0xe8>
    8dd8:	28800417 	ldw	r2,16(r5)
    8ddc:	10002526 	beq	r2,zero,8e74 <__sfvwrite_r+0xe8>
    8de0:	2080008c 	andi	r2,r4,2
    8de4:	bc400017 	ldw	r17,0(r23)
    8de8:	10002a26 	beq	r2,zero,8e94 <__sfvwrite_r+0x108>
    8dec:	05600034 	movhi	r21,32768
    8df0:	0027883a 	mov	r19,zero
    8df4:	0025883a 	mov	r18,zero
    8df8:	ad7f0004 	addi	r21,r21,-1024
    8dfc:	980d883a 	mov	r6,r19
    8e00:	a009883a 	mov	r4,r20
    8e04:	90004626 	beq	r18,zero,8f20 <__sfvwrite_r+0x194>
    8e08:	900f883a 	mov	r7,r18
    8e0c:	81400717 	ldw	r5,28(r16)
    8e10:	ac80022e 	bgeu	r21,r18,8e1c <__sfvwrite_r+0x90>
    8e14:	01e00034 	movhi	r7,32768
    8e18:	39ff0004 	addi	r7,r7,-1024
    8e1c:	80800917 	ldw	r2,36(r16)
    8e20:	103ee83a 	callr	r2
    8e24:	0080520e 	bge	zero,r2,8f70 <__sfvwrite_r+0x1e4>
    8e28:	b8c00217 	ldw	r3,8(r23)
    8e2c:	98a7883a 	add	r19,r19,r2
    8e30:	90a5c83a 	sub	r18,r18,r2
    8e34:	1885c83a 	sub	r2,r3,r2
    8e38:	b8800215 	stw	r2,8(r23)
    8e3c:	103fef1e 	bne	r2,zero,8dfc <__alt_mem_Flash_flash_data+0xf4008dfc>
    8e40:	0005883a 	mov	r2,zero
    8e44:	dfc00b17 	ldw	ra,44(sp)
    8e48:	df000a17 	ldw	fp,40(sp)
    8e4c:	ddc00917 	ldw	r23,36(sp)
    8e50:	dd800817 	ldw	r22,32(sp)
    8e54:	dd400717 	ldw	r21,28(sp)
    8e58:	dd000617 	ldw	r20,24(sp)
    8e5c:	dcc00517 	ldw	r19,20(sp)
    8e60:	dc800417 	ldw	r18,16(sp)
    8e64:	dc400317 	ldw	r17,12(sp)
    8e68:	dc000217 	ldw	r16,8(sp)
    8e6c:	dec00c04 	addi	sp,sp,48
    8e70:	f800283a 	ret
    8e74:	a009883a 	mov	r4,r20
    8e78:	800b883a 	mov	r5,r16
    8e7c:	0002d680 	call	2d68 <__swsetup_r>
    8e80:	1000ec1e 	bne	r2,zero,9234 <__sfvwrite_r+0x4a8>
    8e84:	8100030b 	ldhu	r4,12(r16)
    8e88:	bc400017 	ldw	r17,0(r23)
    8e8c:	2080008c 	andi	r2,r4,2
    8e90:	103fd61e 	bne	r2,zero,8dec <__alt_mem_Flash_flash_data+0xf4008dec>
    8e94:	2080004c 	andi	r2,r4,1
    8e98:	10003a1e 	bne	r2,zero,8f84 <__sfvwrite_r+0x1f8>
    8e9c:	0039883a 	mov	fp,zero
    8ea0:	0025883a 	mov	r18,zero
    8ea4:	90001a26 	beq	r18,zero,8f10 <__sfvwrite_r+0x184>
    8ea8:	2080800c 	andi	r2,r4,512
    8eac:	85800217 	ldw	r22,8(r16)
    8eb0:	10007626 	beq	r2,zero,908c <__sfvwrite_r+0x300>
    8eb4:	b027883a 	mov	r19,r22
    8eb8:	95809436 	bltu	r18,r22,910c <__sfvwrite_r+0x380>
    8ebc:	2081200c 	andi	r2,r4,1152
    8ec0:	10009f1e 	bne	r2,zero,9140 <__sfvwrite_r+0x3b4>
    8ec4:	81000017 	ldw	r4,0(r16)
    8ec8:	e00b883a 	mov	r5,fp
    8ecc:	980d883a 	mov	r6,r19
    8ed0:	00092fc0 	call	92fc <memmove>
    8ed4:	81000217 	ldw	r4,8(r16)
    8ed8:	81400017 	ldw	r5,0(r16)
    8edc:	9005883a 	mov	r2,r18
    8ee0:	2587c83a 	sub	r3,r4,r22
    8ee4:	2ce7883a 	add	r19,r5,r19
    8ee8:	80c00215 	stw	r3,8(r16)
    8eec:	84c00015 	stw	r19,0(r16)
    8ef0:	b8c00217 	ldw	r3,8(r23)
    8ef4:	e0b9883a 	add	fp,fp,r2
    8ef8:	90a5c83a 	sub	r18,r18,r2
    8efc:	1885c83a 	sub	r2,r3,r2
    8f00:	b8800215 	stw	r2,8(r23)
    8f04:	103fce26 	beq	r2,zero,8e40 <__alt_mem_Flash_flash_data+0xf4008e40>
    8f08:	8100030b 	ldhu	r4,12(r16)
    8f0c:	903fe61e 	bne	r18,zero,8ea8 <__alt_mem_Flash_flash_data+0xf4008ea8>
    8f10:	8f000017 	ldw	fp,0(r17)
    8f14:	8c800117 	ldw	r18,4(r17)
    8f18:	8c400204 	addi	r17,r17,8
    8f1c:	003fe106 	br	8ea4 <__alt_mem_Flash_flash_data+0xf4008ea4>
    8f20:	8cc00017 	ldw	r19,0(r17)
    8f24:	8c800117 	ldw	r18,4(r17)
    8f28:	8c400204 	addi	r17,r17,8
    8f2c:	003fb306 	br	8dfc <__alt_mem_Flash_flash_data+0xf4008dfc>
    8f30:	0005883a 	mov	r2,zero
    8f34:	f800283a 	ret
    8f38:	00a00034 	movhi	r2,32768
    8f3c:	10bfffc4 	addi	r2,r2,-1
    8f40:	9009883a 	mov	r4,r18
    8f44:	1480012e 	bgeu	r2,r18,8f4c <__sfvwrite_r+0x1c0>
    8f48:	1009883a 	mov	r4,r2
    8f4c:	980b883a 	mov	r5,r19
    8f50:	000a9140 	call	a914 <__divsi3>
    8f54:	81400717 	ldw	r5,28(r16)
    8f58:	80c00917 	ldw	r3,36(r16)
    8f5c:	988f383a 	mul	r7,r19,r2
    8f60:	a009883a 	mov	r4,r20
    8f64:	e00d883a 	mov	r6,fp
    8f68:	183ee83a 	callr	r3
    8f6c:	00bfe016 	blt	zero,r2,8ef0 <__alt_mem_Flash_flash_data+0xf4008ef0>
    8f70:	8080030b 	ldhu	r2,12(r16)
    8f74:	10801014 	ori	r2,r2,64
    8f78:	8080030d 	sth	r2,12(r16)
    8f7c:	00bfffc4 	movi	r2,-1
    8f80:	003fb006 	br	8e44 <__alt_mem_Flash_flash_data+0xf4008e44>
    8f84:	0027883a 	mov	r19,zero
    8f88:	0011883a 	mov	r8,zero
    8f8c:	0039883a 	mov	fp,zero
    8f90:	0025883a 	mov	r18,zero
    8f94:	90001f26 	beq	r18,zero,9014 <__sfvwrite_r+0x288>
    8f98:	40006026 	beq	r8,zero,911c <__sfvwrite_r+0x390>
    8f9c:	982b883a 	mov	r21,r19
    8fa0:	94c0012e 	bgeu	r18,r19,8fa8 <__sfvwrite_r+0x21c>
    8fa4:	902b883a 	mov	r21,r18
    8fa8:	81000017 	ldw	r4,0(r16)
    8fac:	80800417 	ldw	r2,16(r16)
    8fb0:	a82d883a 	mov	r22,r21
    8fb4:	81800217 	ldw	r6,8(r16)
    8fb8:	81c00517 	ldw	r7,20(r16)
    8fbc:	1100022e 	bgeu	r2,r4,8fc8 <__sfvwrite_r+0x23c>
    8fc0:	31c7883a 	add	r3,r6,r7
    8fc4:	1d401816 	blt	r3,r21,9028 <__sfvwrite_r+0x29c>
    8fc8:	a9c04416 	blt	r21,r7,90dc <__sfvwrite_r+0x350>
    8fcc:	80800917 	ldw	r2,36(r16)
    8fd0:	81400717 	ldw	r5,28(r16)
    8fd4:	a009883a 	mov	r4,r20
    8fd8:	da000115 	stw	r8,4(sp)
    8fdc:	e00d883a 	mov	r6,fp
    8fe0:	103ee83a 	callr	r2
    8fe4:	102d883a 	mov	r22,r2
    8fe8:	da000117 	ldw	r8,4(sp)
    8fec:	00bfe00e 	bge	zero,r2,8f70 <__alt_mem_Flash_flash_data+0xf4008f70>
    8ff0:	9da7c83a 	sub	r19,r19,r22
    8ff4:	98001f26 	beq	r19,zero,9074 <__sfvwrite_r+0x2e8>
    8ff8:	b8800217 	ldw	r2,8(r23)
    8ffc:	e5b9883a 	add	fp,fp,r22
    9000:	95a5c83a 	sub	r18,r18,r22
    9004:	15adc83a 	sub	r22,r2,r22
    9008:	bd800215 	stw	r22,8(r23)
    900c:	b03f8c26 	beq	r22,zero,8e40 <__alt_mem_Flash_flash_data+0xf4008e40>
    9010:	903fe11e 	bne	r18,zero,8f98 <__alt_mem_Flash_flash_data+0xf4008f98>
    9014:	8f000017 	ldw	fp,0(r17)
    9018:	8c800117 	ldw	r18,4(r17)
    901c:	0011883a 	mov	r8,zero
    9020:	8c400204 	addi	r17,r17,8
    9024:	003fdb06 	br	8f94 <__alt_mem_Flash_flash_data+0xf4008f94>
    9028:	180d883a 	mov	r6,r3
    902c:	e00b883a 	mov	r5,fp
    9030:	da000115 	stw	r8,4(sp)
    9034:	d8c00015 	stw	r3,0(sp)
    9038:	00092fc0 	call	92fc <memmove>
    903c:	d8c00017 	ldw	r3,0(sp)
    9040:	80800017 	ldw	r2,0(r16)
    9044:	a009883a 	mov	r4,r20
    9048:	800b883a 	mov	r5,r16
    904c:	10c5883a 	add	r2,r2,r3
    9050:	80800015 	stw	r2,0(r16)
    9054:	d8c00015 	stw	r3,0(sp)
    9058:	00049ec0 	call	49ec <_fflush_r>
    905c:	d8c00017 	ldw	r3,0(sp)
    9060:	da000117 	ldw	r8,4(sp)
    9064:	103fc21e 	bne	r2,zero,8f70 <__alt_mem_Flash_flash_data+0xf4008f70>
    9068:	182d883a 	mov	r22,r3
    906c:	9da7c83a 	sub	r19,r19,r22
    9070:	983fe11e 	bne	r19,zero,8ff8 <__alt_mem_Flash_flash_data+0xf4008ff8>
    9074:	a009883a 	mov	r4,r20
    9078:	800b883a 	mov	r5,r16
    907c:	00049ec0 	call	49ec <_fflush_r>
    9080:	103fbb1e 	bne	r2,zero,8f70 <__alt_mem_Flash_flash_data+0xf4008f70>
    9084:	0011883a 	mov	r8,zero
    9088:	003fdb06 	br	8ff8 <__alt_mem_Flash_flash_data+0xf4008ff8>
    908c:	81000017 	ldw	r4,0(r16)
    9090:	80800417 	ldw	r2,16(r16)
    9094:	11000236 	bltu	r2,r4,90a0 <__sfvwrite_r+0x314>
    9098:	84c00517 	ldw	r19,20(r16)
    909c:	94ffa62e 	bgeu	r18,r19,8f38 <__alt_mem_Flash_flash_data+0xf4008f38>
    90a0:	9027883a 	mov	r19,r18
    90a4:	b480012e 	bgeu	r22,r18,90ac <__sfvwrite_r+0x320>
    90a8:	b027883a 	mov	r19,r22
    90ac:	e00b883a 	mov	r5,fp
    90b0:	980d883a 	mov	r6,r19
    90b4:	00092fc0 	call	92fc <memmove>
    90b8:	80800217 	ldw	r2,8(r16)
    90bc:	80c00017 	ldw	r3,0(r16)
    90c0:	14c5c83a 	sub	r2,r2,r19
    90c4:	1cc7883a 	add	r3,r3,r19
    90c8:	80800215 	stw	r2,8(r16)
    90cc:	80c00015 	stw	r3,0(r16)
    90d0:	10004326 	beq	r2,zero,91e0 <__sfvwrite_r+0x454>
    90d4:	9805883a 	mov	r2,r19
    90d8:	003f8506 	br	8ef0 <__alt_mem_Flash_flash_data+0xf4008ef0>
    90dc:	a80d883a 	mov	r6,r21
    90e0:	e00b883a 	mov	r5,fp
    90e4:	da000115 	stw	r8,4(sp)
    90e8:	00092fc0 	call	92fc <memmove>
    90ec:	80800217 	ldw	r2,8(r16)
    90f0:	80c00017 	ldw	r3,0(r16)
    90f4:	da000117 	ldw	r8,4(sp)
    90f8:	1545c83a 	sub	r2,r2,r21
    90fc:	1d6b883a 	add	r21,r3,r21
    9100:	80800215 	stw	r2,8(r16)
    9104:	85400015 	stw	r21,0(r16)
    9108:	003fb906 	br	8ff0 <__alt_mem_Flash_flash_data+0xf4008ff0>
    910c:	81000017 	ldw	r4,0(r16)
    9110:	902d883a 	mov	r22,r18
    9114:	9027883a 	mov	r19,r18
    9118:	003f6b06 	br	8ec8 <__alt_mem_Flash_flash_data+0xf4008ec8>
    911c:	e009883a 	mov	r4,fp
    9120:	01400284 	movi	r5,10
    9124:	900d883a 	mov	r6,r18
    9128:	0005df40 	call	5df4 <memchr>
    912c:	10003e26 	beq	r2,zero,9228 <__sfvwrite_r+0x49c>
    9130:	10800044 	addi	r2,r2,1
    9134:	1727c83a 	sub	r19,r2,fp
    9138:	02000044 	movi	r8,1
    913c:	003f9706 	br	8f9c <__alt_mem_Flash_flash_data+0xf4008f9c>
    9140:	80800517 	ldw	r2,20(r16)
    9144:	81400417 	ldw	r5,16(r16)
    9148:	80c00017 	ldw	r3,0(r16)
    914c:	10a7883a 	add	r19,r2,r2
    9150:	9885883a 	add	r2,r19,r2
    9154:	1026d7fa 	srli	r19,r2,31
    9158:	196bc83a 	sub	r21,r3,r5
    915c:	a9800044 	addi	r6,r21,1
    9160:	9885883a 	add	r2,r19,r2
    9164:	1027d07a 	srai	r19,r2,1
    9168:	3485883a 	add	r2,r6,r18
    916c:	980d883a 	mov	r6,r19
    9170:	9880022e 	bgeu	r19,r2,917c <__sfvwrite_r+0x3f0>
    9174:	1027883a 	mov	r19,r2
    9178:	100d883a 	mov	r6,r2
    917c:	2101000c 	andi	r4,r4,1024
    9180:	20001c26 	beq	r4,zero,91f4 <__sfvwrite_r+0x468>
    9184:	a009883a 	mov	r4,r20
    9188:	300b883a 	mov	r5,r6
    918c:	000564c0 	call	564c <_malloc_r>
    9190:	102d883a 	mov	r22,r2
    9194:	10002926 	beq	r2,zero,923c <__sfvwrite_r+0x4b0>
    9198:	81400417 	ldw	r5,16(r16)
    919c:	1009883a 	mov	r4,r2
    91a0:	a80d883a 	mov	r6,r21
    91a4:	0005edc0 	call	5edc <memcpy>
    91a8:	8080030b 	ldhu	r2,12(r16)
    91ac:	00fedfc4 	movi	r3,-1153
    91b0:	10c4703a 	and	r2,r2,r3
    91b4:	10802014 	ori	r2,r2,128
    91b8:	8080030d 	sth	r2,12(r16)
    91bc:	b549883a 	add	r4,r22,r21
    91c0:	9d4bc83a 	sub	r5,r19,r21
    91c4:	85800415 	stw	r22,16(r16)
    91c8:	84c00515 	stw	r19,20(r16)
    91cc:	81000015 	stw	r4,0(r16)
    91d0:	902d883a 	mov	r22,r18
    91d4:	81400215 	stw	r5,8(r16)
    91d8:	9027883a 	mov	r19,r18
    91dc:	003f3a06 	br	8ec8 <__alt_mem_Flash_flash_data+0xf4008ec8>
    91e0:	a009883a 	mov	r4,r20
    91e4:	800b883a 	mov	r5,r16
    91e8:	00049ec0 	call	49ec <_fflush_r>
    91ec:	103fb926 	beq	r2,zero,90d4 <__alt_mem_Flash_flash_data+0xf40090d4>
    91f0:	003f5f06 	br	8f70 <__alt_mem_Flash_flash_data+0xf4008f70>
    91f4:	a009883a 	mov	r4,r20
    91f8:	00094b40 	call	94b4 <_realloc_r>
    91fc:	102d883a 	mov	r22,r2
    9200:	103fee1e 	bne	r2,zero,91bc <__alt_mem_Flash_flash_data+0xf40091bc>
    9204:	81400417 	ldw	r5,16(r16)
    9208:	a009883a 	mov	r4,r20
    920c:	0004f3c0 	call	4f3c <_free_r>
    9210:	8080030b 	ldhu	r2,12(r16)
    9214:	00ffdfc4 	movi	r3,-129
    9218:	1884703a 	and	r2,r3,r2
    921c:	00c00304 	movi	r3,12
    9220:	a0c00015 	stw	r3,0(r20)
    9224:	003f5306 	br	8f74 <__alt_mem_Flash_flash_data+0xf4008f74>
    9228:	94c00044 	addi	r19,r18,1
    922c:	02000044 	movi	r8,1
    9230:	003f5a06 	br	8f9c <__alt_mem_Flash_flash_data+0xf4008f9c>
    9234:	00bfffc4 	movi	r2,-1
    9238:	003f0206 	br	8e44 <__alt_mem_Flash_flash_data+0xf4008e44>
    923c:	00800304 	movi	r2,12
    9240:	a0800015 	stw	r2,0(r20)
    9244:	8080030b 	ldhu	r2,12(r16)
    9248:	003f4a06 	br	8f74 <__alt_mem_Flash_flash_data+0xf4008f74>

0000924c <_isatty_r>:
    924c:	defffd04 	addi	sp,sp,-12
    9250:	dc000015 	stw	r16,0(sp)
    9254:	040000b4 	movhi	r16,2
    9258:	dc400115 	stw	r17,4(sp)
    925c:	8436b904 	addi	r16,r16,-9500
    9260:	2023883a 	mov	r17,r4
    9264:	2809883a 	mov	r4,r5
    9268:	dfc00215 	stw	ra,8(sp)
    926c:	80000015 	stw	zero,0(r16)
    9270:	000d2700 	call	d270 <isatty>
    9274:	00ffffc4 	movi	r3,-1
    9278:	10c00526 	beq	r2,r3,9290 <_isatty_r+0x44>
    927c:	dfc00217 	ldw	ra,8(sp)
    9280:	dc400117 	ldw	r17,4(sp)
    9284:	dc000017 	ldw	r16,0(sp)
    9288:	dec00304 	addi	sp,sp,12
    928c:	f800283a 	ret
    9290:	80c00017 	ldw	r3,0(r16)
    9294:	183ff926 	beq	r3,zero,927c <__alt_mem_Flash_flash_data+0xf400927c>
    9298:	88c00015 	stw	r3,0(r17)
    929c:	003ff706 	br	927c <__alt_mem_Flash_flash_data+0xf400927c>

000092a0 <_lseek_r>:
    92a0:	defffd04 	addi	sp,sp,-12
    92a4:	dc000015 	stw	r16,0(sp)
    92a8:	040000b4 	movhi	r16,2
    92ac:	dc400115 	stw	r17,4(sp)
    92b0:	8436b904 	addi	r16,r16,-9500
    92b4:	2023883a 	mov	r17,r4
    92b8:	2809883a 	mov	r4,r5
    92bc:	300b883a 	mov	r5,r6
    92c0:	380d883a 	mov	r6,r7
    92c4:	dfc00215 	stw	ra,8(sp)
    92c8:	80000015 	stw	zero,0(r16)
    92cc:	000d4480 	call	d448 <lseek>
    92d0:	00ffffc4 	movi	r3,-1
    92d4:	10c00526 	beq	r2,r3,92ec <_lseek_r+0x4c>
    92d8:	dfc00217 	ldw	ra,8(sp)
    92dc:	dc400117 	ldw	r17,4(sp)
    92e0:	dc000017 	ldw	r16,0(sp)
    92e4:	dec00304 	addi	sp,sp,12
    92e8:	f800283a 	ret
    92ec:	80c00017 	ldw	r3,0(r16)
    92f0:	183ff926 	beq	r3,zero,92d8 <__alt_mem_Flash_flash_data+0xf40092d8>
    92f4:	88c00015 	stw	r3,0(r17)
    92f8:	003ff706 	br	92d8 <__alt_mem_Flash_flash_data+0xf40092d8>

000092fc <memmove>:
    92fc:	2005883a 	mov	r2,r4
    9300:	29000b2e 	bgeu	r5,r4,9330 <memmove+0x34>
    9304:	298f883a 	add	r7,r5,r6
    9308:	21c0092e 	bgeu	r4,r7,9330 <memmove+0x34>
    930c:	2187883a 	add	r3,r4,r6
    9310:	198bc83a 	sub	r5,r3,r6
    9314:	30004b26 	beq	r6,zero,9444 <memmove+0x148>
    9318:	39ffffc4 	addi	r7,r7,-1
    931c:	39000003 	ldbu	r4,0(r7)
    9320:	18ffffc4 	addi	r3,r3,-1
    9324:	19000005 	stb	r4,0(r3)
    9328:	197ffb1e 	bne	r3,r5,9318 <__alt_mem_Flash_flash_data+0xf4009318>
    932c:	f800283a 	ret
    9330:	00c003c4 	movi	r3,15
    9334:	1980412e 	bgeu	r3,r6,943c <memmove+0x140>
    9338:	1146b03a 	or	r3,r2,r5
    933c:	18c000cc 	andi	r3,r3,3
    9340:	1800411e 	bne	r3,zero,9448 <memmove+0x14c>
    9344:	33fffc04 	addi	r15,r6,-16
    9348:	781ed13a 	srli	r15,r15,4
    934c:	28c00104 	addi	r3,r5,4
    9350:	13400104 	addi	r13,r2,4
    9354:	781c913a 	slli	r14,r15,4
    9358:	2b000204 	addi	r12,r5,8
    935c:	12c00204 	addi	r11,r2,8
    9360:	73800504 	addi	r14,r14,20
    9364:	2a800304 	addi	r10,r5,12
    9368:	12400304 	addi	r9,r2,12
    936c:	2b9d883a 	add	r14,r5,r14
    9370:	2811883a 	mov	r8,r5
    9374:	100f883a 	mov	r7,r2
    9378:	41000017 	ldw	r4,0(r8)
    937c:	39c00404 	addi	r7,r7,16
    9380:	18c00404 	addi	r3,r3,16
    9384:	393ffc15 	stw	r4,-16(r7)
    9388:	193ffc17 	ldw	r4,-16(r3)
    938c:	6b400404 	addi	r13,r13,16
    9390:	5ac00404 	addi	r11,r11,16
    9394:	693ffc15 	stw	r4,-16(r13)
    9398:	61000017 	ldw	r4,0(r12)
    939c:	4a400404 	addi	r9,r9,16
    93a0:	42000404 	addi	r8,r8,16
    93a4:	593ffc15 	stw	r4,-16(r11)
    93a8:	51000017 	ldw	r4,0(r10)
    93ac:	63000404 	addi	r12,r12,16
    93b0:	52800404 	addi	r10,r10,16
    93b4:	493ffc15 	stw	r4,-16(r9)
    93b8:	1bbfef1e 	bne	r3,r14,9378 <__alt_mem_Flash_flash_data+0xf4009378>
    93bc:	79000044 	addi	r4,r15,1
    93c0:	2008913a 	slli	r4,r4,4
    93c4:	328003cc 	andi	r10,r6,15
    93c8:	02c000c4 	movi	r11,3
    93cc:	1107883a 	add	r3,r2,r4
    93d0:	290b883a 	add	r5,r5,r4
    93d4:	5a801e2e 	bgeu	r11,r10,9450 <memmove+0x154>
    93d8:	1813883a 	mov	r9,r3
    93dc:	2811883a 	mov	r8,r5
    93e0:	500f883a 	mov	r7,r10
    93e4:	41000017 	ldw	r4,0(r8)
    93e8:	4a400104 	addi	r9,r9,4
    93ec:	39ffff04 	addi	r7,r7,-4
    93f0:	493fff15 	stw	r4,-4(r9)
    93f4:	42000104 	addi	r8,r8,4
    93f8:	59fffa36 	bltu	r11,r7,93e4 <__alt_mem_Flash_flash_data+0xf40093e4>
    93fc:	513fff04 	addi	r4,r10,-4
    9400:	2008d0ba 	srli	r4,r4,2
    9404:	318000cc 	andi	r6,r6,3
    9408:	21000044 	addi	r4,r4,1
    940c:	2109883a 	add	r4,r4,r4
    9410:	2109883a 	add	r4,r4,r4
    9414:	1907883a 	add	r3,r3,r4
    9418:	290b883a 	add	r5,r5,r4
    941c:	30000926 	beq	r6,zero,9444 <memmove+0x148>
    9420:	198d883a 	add	r6,r3,r6
    9424:	29c00003 	ldbu	r7,0(r5)
    9428:	18c00044 	addi	r3,r3,1
    942c:	29400044 	addi	r5,r5,1
    9430:	19ffffc5 	stb	r7,-1(r3)
    9434:	19bffb1e 	bne	r3,r6,9424 <__alt_mem_Flash_flash_data+0xf4009424>
    9438:	f800283a 	ret
    943c:	1007883a 	mov	r3,r2
    9440:	003ff606 	br	941c <__alt_mem_Flash_flash_data+0xf400941c>
    9444:	f800283a 	ret
    9448:	1007883a 	mov	r3,r2
    944c:	003ff406 	br	9420 <__alt_mem_Flash_flash_data+0xf4009420>
    9450:	500d883a 	mov	r6,r10
    9454:	003ff106 	br	941c <__alt_mem_Flash_flash_data+0xf400941c>

00009458 <_read_r>:
    9458:	defffd04 	addi	sp,sp,-12
    945c:	dc000015 	stw	r16,0(sp)
    9460:	040000b4 	movhi	r16,2
    9464:	dc400115 	stw	r17,4(sp)
    9468:	8436b904 	addi	r16,r16,-9500
    946c:	2023883a 	mov	r17,r4
    9470:	2809883a 	mov	r4,r5
    9474:	300b883a 	mov	r5,r6
    9478:	380d883a 	mov	r6,r7
    947c:	dfc00215 	stw	ra,8(sp)
    9480:	80000015 	stw	zero,0(r16)
    9484:	000d6400 	call	d640 <read>
    9488:	00ffffc4 	movi	r3,-1
    948c:	10c00526 	beq	r2,r3,94a4 <_read_r+0x4c>
    9490:	dfc00217 	ldw	ra,8(sp)
    9494:	dc400117 	ldw	r17,4(sp)
    9498:	dc000017 	ldw	r16,0(sp)
    949c:	dec00304 	addi	sp,sp,12
    94a0:	f800283a 	ret
    94a4:	80c00017 	ldw	r3,0(r16)
    94a8:	183ff926 	beq	r3,zero,9490 <__alt_mem_Flash_flash_data+0xf4009490>
    94ac:	88c00015 	stw	r3,0(r17)
    94b0:	003ff706 	br	9490 <__alt_mem_Flash_flash_data+0xf4009490>

000094b4 <_realloc_r>:
    94b4:	defff604 	addi	sp,sp,-40
    94b8:	dd000415 	stw	r20,16(sp)
    94bc:	dc400115 	stw	r17,4(sp)
    94c0:	dfc00915 	stw	ra,36(sp)
    94c4:	df000815 	stw	fp,32(sp)
    94c8:	ddc00715 	stw	r23,28(sp)
    94cc:	dd800615 	stw	r22,24(sp)
    94d0:	dd400515 	stw	r21,20(sp)
    94d4:	dcc00315 	stw	r19,12(sp)
    94d8:	dc800215 	stw	r18,8(sp)
    94dc:	dc000015 	stw	r16,0(sp)
    94e0:	2829883a 	mov	r20,r5
    94e4:	3023883a 	mov	r17,r6
    94e8:	2800ad26 	beq	r5,zero,97a0 <_realloc_r+0x2ec>
    94ec:	2025883a 	mov	r18,r4
    94f0:	000dab00 	call	dab0 <__malloc_lock>
    94f4:	a0ffff17 	ldw	r3,-4(r20)
    94f8:	043fff04 	movi	r16,-4
    94fc:	890002c4 	addi	r4,r17,11
    9500:	01c00584 	movi	r7,22
    9504:	a57ffe04 	addi	r21,r20,-8
    9508:	1c20703a 	and	r16,r3,r16
    950c:	39001d2e 	bgeu	r7,r4,9584 <_realloc_r+0xd0>
    9510:	05bffe04 	movi	r22,-8
    9514:	25ac703a 	and	r22,r4,r22
    9518:	b00f883a 	mov	r7,r22
    951c:	b0006516 	blt	r22,zero,96b4 <_realloc_r+0x200>
    9520:	b4406436 	bltu	r22,r17,96b4 <_realloc_r+0x200>
    9524:	81c01a0e 	bge	r16,r7,9590 <_realloc_r+0xdc>
    9528:	070000b4 	movhi	fp,2
    952c:	e7284704 	addi	fp,fp,-24292
    9530:	e1400217 	ldw	r5,8(fp)
    9534:	ac11883a 	add	r8,r21,r16
    9538:	2a006226 	beq	r5,r8,96c4 <_realloc_r+0x210>
    953c:	41800117 	ldw	r6,4(r8)
    9540:	027fff84 	movi	r9,-2
    9544:	3252703a 	and	r9,r6,r9
    9548:	4253883a 	add	r9,r8,r9
    954c:	49000117 	ldw	r4,4(r9)
    9550:	2100004c 	andi	r4,r4,1
    9554:	2000281e 	bne	r4,zero,95f8 <_realloc_r+0x144>
    9558:	00bfff04 	movi	r2,-4
    955c:	3084703a 	and	r2,r6,r2
    9560:	1409883a 	add	r4,r2,r16
    9564:	21c05e16 	blt	r4,r7,96e0 <_realloc_r+0x22c>
    9568:	40800317 	ldw	r2,12(r8)
    956c:	41400217 	ldw	r5,8(r8)
    9570:	a023883a 	mov	r17,r20
    9574:	2021883a 	mov	r16,r4
    9578:	28800315 	stw	r2,12(r5)
    957c:	11400215 	stw	r5,8(r2)
    9580:	00000406 	br	9594 <_realloc_r+0xe0>
    9584:	01c00404 	movi	r7,16
    9588:	382d883a 	mov	r22,r7
    958c:	003fe406 	br	9520 <__alt_mem_Flash_flash_data+0xf4009520>
    9590:	a023883a 	mov	r17,r20
    9594:	858fc83a 	sub	r7,r16,r22
    9598:	008003c4 	movi	r2,15
    959c:	18c0004c 	andi	r3,r3,1
    95a0:	11c07236 	bltu	r2,r7,976c <_realloc_r+0x2b8>
    95a4:	1c06b03a 	or	r3,r3,r16
    95a8:	a8c00115 	stw	r3,4(r21)
    95ac:	ac21883a 	add	r16,r21,r16
    95b0:	80800117 	ldw	r2,4(r16)
    95b4:	10800054 	ori	r2,r2,1
    95b8:	80800115 	stw	r2,4(r16)
    95bc:	9009883a 	mov	r4,r18
    95c0:	000dbd00 	call	dbd0 <__malloc_unlock>
    95c4:	8805883a 	mov	r2,r17
    95c8:	dfc00917 	ldw	ra,36(sp)
    95cc:	df000817 	ldw	fp,32(sp)
    95d0:	ddc00717 	ldw	r23,28(sp)
    95d4:	dd800617 	ldw	r22,24(sp)
    95d8:	dd400517 	ldw	r21,20(sp)
    95dc:	dd000417 	ldw	r20,16(sp)
    95e0:	dcc00317 	ldw	r19,12(sp)
    95e4:	dc800217 	ldw	r18,8(sp)
    95e8:	dc400117 	ldw	r17,4(sp)
    95ec:	dc000017 	ldw	r16,0(sp)
    95f0:	dec00a04 	addi	sp,sp,40
    95f4:	f800283a 	ret
    95f8:	18c0004c 	andi	r3,r3,1
    95fc:	1800081e 	bne	r3,zero,9620 <_realloc_r+0x16c>
    9600:	a4fffe17 	ldw	r19,-8(r20)
    9604:	00bfff04 	movi	r2,-4
    9608:	ace7c83a 	sub	r19,r21,r19
    960c:	98c00117 	ldw	r3,4(r19)
    9610:	1886703a 	and	r3,r3,r2
    9614:	98000226 	beq	r19,zero,9620 <_realloc_r+0x16c>
    9618:	1c2f883a 	add	r23,r3,r16
    961c:	b9c06d0e 	bge	r23,r7,97d4 <_realloc_r+0x320>
    9620:	880b883a 	mov	r5,r17
    9624:	9009883a 	mov	r4,r18
    9628:	000564c0 	call	564c <_malloc_r>
    962c:	1023883a 	mov	r17,r2
    9630:	1000ef26 	beq	r2,zero,99f0 <_realloc_r+0x53c>
    9634:	a0ffff17 	ldw	r3,-4(r20)
    9638:	113ffe04 	addi	r4,r2,-8
    963c:	00bfff84 	movi	r2,-2
    9640:	1884703a 	and	r2,r3,r2
    9644:	a885883a 	add	r2,r21,r2
    9648:	2080bf26 	beq	r4,r2,9948 <_realloc_r+0x494>
    964c:	81bfff04 	addi	r6,r16,-4
    9650:	00800904 	movi	r2,36
    9654:	11808936 	bltu	r2,r6,987c <_realloc_r+0x3c8>
    9658:	00c004c4 	movi	r3,19
    965c:	19806c2e 	bgeu	r3,r6,9810 <_realloc_r+0x35c>
    9660:	a0c00017 	ldw	r3,0(r20)
    9664:	88c00015 	stw	r3,0(r17)
    9668:	a0c00117 	ldw	r3,4(r20)
    966c:	88c00115 	stw	r3,4(r17)
    9670:	00c006c4 	movi	r3,27
    9674:	1980ac36 	bltu	r3,r6,9928 <_realloc_r+0x474>
    9678:	88800204 	addi	r2,r17,8
    967c:	a0c00204 	addi	r3,r20,8
    9680:	19000017 	ldw	r4,0(r3)
    9684:	11000015 	stw	r4,0(r2)
    9688:	19000117 	ldw	r4,4(r3)
    968c:	11000115 	stw	r4,4(r2)
    9690:	18c00217 	ldw	r3,8(r3)
    9694:	10c00215 	stw	r3,8(r2)
    9698:	a00b883a 	mov	r5,r20
    969c:	9009883a 	mov	r4,r18
    96a0:	0004f3c0 	call	4f3c <_free_r>
    96a4:	9009883a 	mov	r4,r18
    96a8:	000dbd00 	call	dbd0 <__malloc_unlock>
    96ac:	8805883a 	mov	r2,r17
    96b0:	003fc506 	br	95c8 <__alt_mem_Flash_flash_data+0xf40095c8>
    96b4:	00800304 	movi	r2,12
    96b8:	90800015 	stw	r2,0(r18)
    96bc:	0005883a 	mov	r2,zero
    96c0:	003fc106 	br	95c8 <__alt_mem_Flash_flash_data+0xf40095c8>
    96c4:	29800117 	ldw	r6,4(r5)
    96c8:	00bfff04 	movi	r2,-4
    96cc:	b1000404 	addi	r4,r22,16
    96d0:	3084703a 	and	r2,r6,r2
    96d4:	140d883a 	add	r6,r2,r16
    96d8:	31005b0e 	bge	r6,r4,9848 <_realloc_r+0x394>
    96dc:	2811883a 	mov	r8,r5
    96e0:	18c0004c 	andi	r3,r3,1
    96e4:	183fce1e 	bne	r3,zero,9620 <__alt_mem_Flash_flash_data+0xf4009620>
    96e8:	a4fffe17 	ldw	r19,-8(r20)
    96ec:	00ffff04 	movi	r3,-4
    96f0:	ace7c83a 	sub	r19,r21,r19
    96f4:	99000117 	ldw	r4,4(r19)
    96f8:	20c6703a 	and	r3,r4,r3
    96fc:	403fc526 	beq	r8,zero,9614 <__alt_mem_Flash_flash_data+0xf4009614>
    9700:	1c2f883a 	add	r23,r3,r16
    9704:	b8af883a 	add	r23,r23,r2
    9708:	41406026 	beq	r8,r5,988c <_realloc_r+0x3d8>
    970c:	b9ffc116 	blt	r23,r7,9614 <__alt_mem_Flash_flash_data+0xf4009614>
    9710:	40c00217 	ldw	r3,8(r8)
    9714:	40800317 	ldw	r2,12(r8)
    9718:	81bfff04 	addi	r6,r16,-4
    971c:	01000904 	movi	r4,36
    9720:	18800315 	stw	r2,12(r3)
    9724:	10c00215 	stw	r3,8(r2)
    9728:	99400217 	ldw	r5,8(r19)
    972c:	98c00317 	ldw	r3,12(r19)
    9730:	9c400204 	addi	r17,r19,8
    9734:	28c00315 	stw	r3,12(r5)
    9738:	19400215 	stw	r5,8(r3)
    973c:	21802d36 	bltu	r4,r6,97f4 <_realloc_r+0x340>
    9740:	008004c4 	movi	r2,19
    9744:	1180352e 	bgeu	r2,r6,981c <_realloc_r+0x368>
    9748:	a0800017 	ldw	r2,0(r20)
    974c:	98800215 	stw	r2,8(r19)
    9750:	a0800117 	ldw	r2,4(r20)
    9754:	98800315 	stw	r2,12(r19)
    9758:	008006c4 	movi	r2,27
    975c:	11808036 	bltu	r2,r6,9960 <_realloc_r+0x4ac>
    9760:	98c00404 	addi	r3,r19,16
    9764:	a5000204 	addi	r20,r20,8
    9768:	00002d06 	br	9820 <_realloc_r+0x36c>
    976c:	1d86b03a 	or	r3,r3,r22
    9770:	ad8b883a 	add	r5,r21,r22
    9774:	a8c00115 	stw	r3,4(r21)
    9778:	38800054 	ori	r2,r7,1
    977c:	28800115 	stw	r2,4(r5)
    9780:	29cf883a 	add	r7,r5,r7
    9784:	38800117 	ldw	r2,4(r7)
    9788:	9009883a 	mov	r4,r18
    978c:	29400204 	addi	r5,r5,8
    9790:	10800054 	ori	r2,r2,1
    9794:	38800115 	stw	r2,4(r7)
    9798:	0004f3c0 	call	4f3c <_free_r>
    979c:	003f8706 	br	95bc <__alt_mem_Flash_flash_data+0xf40095bc>
    97a0:	300b883a 	mov	r5,r6
    97a4:	dfc00917 	ldw	ra,36(sp)
    97a8:	df000817 	ldw	fp,32(sp)
    97ac:	ddc00717 	ldw	r23,28(sp)
    97b0:	dd800617 	ldw	r22,24(sp)
    97b4:	dd400517 	ldw	r21,20(sp)
    97b8:	dd000417 	ldw	r20,16(sp)
    97bc:	dcc00317 	ldw	r19,12(sp)
    97c0:	dc800217 	ldw	r18,8(sp)
    97c4:	dc400117 	ldw	r17,4(sp)
    97c8:	dc000017 	ldw	r16,0(sp)
    97cc:	dec00a04 	addi	sp,sp,40
    97d0:	000564c1 	jmpi	564c <_malloc_r>
    97d4:	98800317 	ldw	r2,12(r19)
    97d8:	98c00217 	ldw	r3,8(r19)
    97dc:	81bfff04 	addi	r6,r16,-4
    97e0:	01000904 	movi	r4,36
    97e4:	18800315 	stw	r2,12(r3)
    97e8:	10c00215 	stw	r3,8(r2)
    97ec:	9c400204 	addi	r17,r19,8
    97f0:	21bfd32e 	bgeu	r4,r6,9740 <__alt_mem_Flash_flash_data+0xf4009740>
    97f4:	8809883a 	mov	r4,r17
    97f8:	a00b883a 	mov	r5,r20
    97fc:	00092fc0 	call	92fc <memmove>
    9800:	98c00117 	ldw	r3,4(r19)
    9804:	b821883a 	mov	r16,r23
    9808:	982b883a 	mov	r21,r19
    980c:	003f6106 	br	9594 <__alt_mem_Flash_flash_data+0xf4009594>
    9810:	8805883a 	mov	r2,r17
    9814:	a007883a 	mov	r3,r20
    9818:	003f9906 	br	9680 <__alt_mem_Flash_flash_data+0xf4009680>
    981c:	8807883a 	mov	r3,r17
    9820:	a0800017 	ldw	r2,0(r20)
    9824:	b821883a 	mov	r16,r23
    9828:	982b883a 	mov	r21,r19
    982c:	18800015 	stw	r2,0(r3)
    9830:	a0800117 	ldw	r2,4(r20)
    9834:	18800115 	stw	r2,4(r3)
    9838:	a0800217 	ldw	r2,8(r20)
    983c:	18800215 	stw	r2,8(r3)
    9840:	98c00117 	ldw	r3,4(r19)
    9844:	003f5306 	br	9594 <__alt_mem_Flash_flash_data+0xf4009594>
    9848:	adab883a 	add	r21,r21,r22
    984c:	3585c83a 	sub	r2,r6,r22
    9850:	e5400215 	stw	r21,8(fp)
    9854:	10800054 	ori	r2,r2,1
    9858:	a8800115 	stw	r2,4(r21)
    985c:	a0bfff17 	ldw	r2,-4(r20)
    9860:	9009883a 	mov	r4,r18
    9864:	1080004c 	andi	r2,r2,1
    9868:	b0acb03a 	or	r22,r22,r2
    986c:	a5bfff15 	stw	r22,-4(r20)
    9870:	000dbd00 	call	dbd0 <__malloc_unlock>
    9874:	a005883a 	mov	r2,r20
    9878:	003f5306 	br	95c8 <__alt_mem_Flash_flash_data+0xf40095c8>
    987c:	8809883a 	mov	r4,r17
    9880:	a00b883a 	mov	r5,r20
    9884:	00092fc0 	call	92fc <memmove>
    9888:	003f8306 	br	9698 <__alt_mem_Flash_flash_data+0xf4009698>
    988c:	b0800404 	addi	r2,r22,16
    9890:	b8bf6016 	blt	r23,r2,9614 <__alt_mem_Flash_flash_data+0xf4009614>
    9894:	98800317 	ldw	r2,12(r19)
    9898:	98c00217 	ldw	r3,8(r19)
    989c:	81bfff04 	addi	r6,r16,-4
    98a0:	01000904 	movi	r4,36
    98a4:	18800315 	stw	r2,12(r3)
    98a8:	10c00215 	stw	r3,8(r2)
    98ac:	9c400204 	addi	r17,r19,8
    98b0:	21804336 	bltu	r4,r6,99c0 <_realloc_r+0x50c>
    98b4:	008004c4 	movi	r2,19
    98b8:	11803f2e 	bgeu	r2,r6,99b8 <_realloc_r+0x504>
    98bc:	a0800017 	ldw	r2,0(r20)
    98c0:	98800215 	stw	r2,8(r19)
    98c4:	a0800117 	ldw	r2,4(r20)
    98c8:	98800315 	stw	r2,12(r19)
    98cc:	008006c4 	movi	r2,27
    98d0:	11803f36 	bltu	r2,r6,99d0 <_realloc_r+0x51c>
    98d4:	98800404 	addi	r2,r19,16
    98d8:	a5000204 	addi	r20,r20,8
    98dc:	a0c00017 	ldw	r3,0(r20)
    98e0:	10c00015 	stw	r3,0(r2)
    98e4:	a0c00117 	ldw	r3,4(r20)
    98e8:	10c00115 	stw	r3,4(r2)
    98ec:	a0c00217 	ldw	r3,8(r20)
    98f0:	10c00215 	stw	r3,8(r2)
    98f4:	9d87883a 	add	r3,r19,r22
    98f8:	bd85c83a 	sub	r2,r23,r22
    98fc:	e0c00215 	stw	r3,8(fp)
    9900:	10800054 	ori	r2,r2,1
    9904:	18800115 	stw	r2,4(r3)
    9908:	98800117 	ldw	r2,4(r19)
    990c:	9009883a 	mov	r4,r18
    9910:	1080004c 	andi	r2,r2,1
    9914:	b0acb03a 	or	r22,r22,r2
    9918:	9d800115 	stw	r22,4(r19)
    991c:	000dbd00 	call	dbd0 <__malloc_unlock>
    9920:	8805883a 	mov	r2,r17
    9924:	003f2806 	br	95c8 <__alt_mem_Flash_flash_data+0xf40095c8>
    9928:	a0c00217 	ldw	r3,8(r20)
    992c:	88c00215 	stw	r3,8(r17)
    9930:	a0c00317 	ldw	r3,12(r20)
    9934:	88c00315 	stw	r3,12(r17)
    9938:	30801126 	beq	r6,r2,9980 <_realloc_r+0x4cc>
    993c:	88800404 	addi	r2,r17,16
    9940:	a0c00404 	addi	r3,r20,16
    9944:	003f4e06 	br	9680 <__alt_mem_Flash_flash_data+0xf4009680>
    9948:	893fff17 	ldw	r4,-4(r17)
    994c:	00bfff04 	movi	r2,-4
    9950:	a023883a 	mov	r17,r20
    9954:	2084703a 	and	r2,r4,r2
    9958:	80a1883a 	add	r16,r16,r2
    995c:	003f0d06 	br	9594 <__alt_mem_Flash_flash_data+0xf4009594>
    9960:	a0800217 	ldw	r2,8(r20)
    9964:	98800415 	stw	r2,16(r19)
    9968:	a0800317 	ldw	r2,12(r20)
    996c:	98800515 	stw	r2,20(r19)
    9970:	31000a26 	beq	r6,r4,999c <_realloc_r+0x4e8>
    9974:	98c00604 	addi	r3,r19,24
    9978:	a5000404 	addi	r20,r20,16
    997c:	003fa806 	br	9820 <__alt_mem_Flash_flash_data+0xf4009820>
    9980:	a1000417 	ldw	r4,16(r20)
    9984:	88800604 	addi	r2,r17,24
    9988:	a0c00604 	addi	r3,r20,24
    998c:	89000415 	stw	r4,16(r17)
    9990:	a1000517 	ldw	r4,20(r20)
    9994:	89000515 	stw	r4,20(r17)
    9998:	003f3906 	br	9680 <__alt_mem_Flash_flash_data+0xf4009680>
    999c:	a0800417 	ldw	r2,16(r20)
    99a0:	a5000604 	addi	r20,r20,24
    99a4:	98c00804 	addi	r3,r19,32
    99a8:	98800615 	stw	r2,24(r19)
    99ac:	a0bfff17 	ldw	r2,-4(r20)
    99b0:	98800715 	stw	r2,28(r19)
    99b4:	003f9a06 	br	9820 <__alt_mem_Flash_flash_data+0xf4009820>
    99b8:	8805883a 	mov	r2,r17
    99bc:	003fc706 	br	98dc <__alt_mem_Flash_flash_data+0xf40098dc>
    99c0:	8809883a 	mov	r4,r17
    99c4:	a00b883a 	mov	r5,r20
    99c8:	00092fc0 	call	92fc <memmove>
    99cc:	003fc906 	br	98f4 <__alt_mem_Flash_flash_data+0xf40098f4>
    99d0:	a0800217 	ldw	r2,8(r20)
    99d4:	98800415 	stw	r2,16(r19)
    99d8:	a0800317 	ldw	r2,12(r20)
    99dc:	98800515 	stw	r2,20(r19)
    99e0:	31000726 	beq	r6,r4,9a00 <_realloc_r+0x54c>
    99e4:	98800604 	addi	r2,r19,24
    99e8:	a5000404 	addi	r20,r20,16
    99ec:	003fbb06 	br	98dc <__alt_mem_Flash_flash_data+0xf40098dc>
    99f0:	9009883a 	mov	r4,r18
    99f4:	000dbd00 	call	dbd0 <__malloc_unlock>
    99f8:	0005883a 	mov	r2,zero
    99fc:	003ef206 	br	95c8 <__alt_mem_Flash_flash_data+0xf40095c8>
    9a00:	a0c00417 	ldw	r3,16(r20)
    9a04:	a5000604 	addi	r20,r20,24
    9a08:	98800804 	addi	r2,r19,32
    9a0c:	98c00615 	stw	r3,24(r19)
    9a10:	a0ffff17 	ldw	r3,-4(r20)
    9a14:	98c00715 	stw	r3,28(r19)
    9a18:	003fb006 	br	98dc <__alt_mem_Flash_flash_data+0xf40098dc>

00009a1c <__swbuf_r>:
    9a1c:	defffc04 	addi	sp,sp,-16
    9a20:	dc800215 	stw	r18,8(sp)
    9a24:	dc400115 	stw	r17,4(sp)
    9a28:	dc000015 	stw	r16,0(sp)
    9a2c:	dfc00315 	stw	ra,12(sp)
    9a30:	2025883a 	mov	r18,r4
    9a34:	2823883a 	mov	r17,r5
    9a38:	3021883a 	mov	r16,r6
    9a3c:	20000226 	beq	r4,zero,9a48 <__swbuf_r+0x2c>
    9a40:	20800e17 	ldw	r2,56(r4)
    9a44:	10004126 	beq	r2,zero,9b4c <__swbuf_r+0x130>
    9a48:	80c00617 	ldw	r3,24(r16)
    9a4c:	8180030b 	ldhu	r6,12(r16)
    9a50:	80c00215 	stw	r3,8(r16)
    9a54:	30c0020c 	andi	r3,r6,8
    9a58:	18003526 	beq	r3,zero,9b30 <__swbuf_r+0x114>
    9a5c:	80c00417 	ldw	r3,16(r16)
    9a60:	18003326 	beq	r3,zero,9b30 <__swbuf_r+0x114>
    9a64:	3088000c 	andi	r2,r6,8192
    9a68:	8c403fcc 	andi	r17,r17,255
    9a6c:	10001726 	beq	r2,zero,9acc <__swbuf_r+0xb0>
    9a70:	80800017 	ldw	r2,0(r16)
    9a74:	81000517 	ldw	r4,20(r16)
    9a78:	10c7c83a 	sub	r3,r2,r3
    9a7c:	19001d0e 	bge	r3,r4,9af4 <__swbuf_r+0xd8>
    9a80:	18c00044 	addi	r3,r3,1
    9a84:	81400217 	ldw	r5,8(r16)
    9a88:	11000044 	addi	r4,r2,1
    9a8c:	81000015 	stw	r4,0(r16)
    9a90:	297fffc4 	addi	r5,r5,-1
    9a94:	81400215 	stw	r5,8(r16)
    9a98:	14400005 	stb	r17,0(r2)
    9a9c:	80800517 	ldw	r2,20(r16)
    9aa0:	10c01d26 	beq	r2,r3,9b18 <__swbuf_r+0xfc>
    9aa4:	8080030b 	ldhu	r2,12(r16)
    9aa8:	1080004c 	andi	r2,r2,1
    9aac:	1000181e 	bne	r2,zero,9b10 <__swbuf_r+0xf4>
    9ab0:	8805883a 	mov	r2,r17
    9ab4:	dfc00317 	ldw	ra,12(sp)
    9ab8:	dc800217 	ldw	r18,8(sp)
    9abc:	dc400117 	ldw	r17,4(sp)
    9ac0:	dc000017 	ldw	r16,0(sp)
    9ac4:	dec00404 	addi	sp,sp,16
    9ac8:	f800283a 	ret
    9acc:	81001917 	ldw	r4,100(r16)
    9ad0:	00b7ffc4 	movi	r2,-8193
    9ad4:	31880014 	ori	r6,r6,8192
    9ad8:	2084703a 	and	r2,r4,r2
    9adc:	80801915 	stw	r2,100(r16)
    9ae0:	80800017 	ldw	r2,0(r16)
    9ae4:	81000517 	ldw	r4,20(r16)
    9ae8:	8180030d 	sth	r6,12(r16)
    9aec:	10c7c83a 	sub	r3,r2,r3
    9af0:	193fe316 	blt	r3,r4,9a80 <__alt_mem_Flash_flash_data+0xf4009a80>
    9af4:	9009883a 	mov	r4,r18
    9af8:	800b883a 	mov	r5,r16
    9afc:	00049ec0 	call	49ec <_fflush_r>
    9b00:	1000091e 	bne	r2,zero,9b28 <__swbuf_r+0x10c>
    9b04:	80800017 	ldw	r2,0(r16)
    9b08:	00c00044 	movi	r3,1
    9b0c:	003fdd06 	br	9a84 <__alt_mem_Flash_flash_data+0xf4009a84>
    9b10:	00800284 	movi	r2,10
    9b14:	88bfe61e 	bne	r17,r2,9ab0 <__alt_mem_Flash_flash_data+0xf4009ab0>
    9b18:	9009883a 	mov	r4,r18
    9b1c:	800b883a 	mov	r5,r16
    9b20:	00049ec0 	call	49ec <_fflush_r>
    9b24:	103fe226 	beq	r2,zero,9ab0 <__alt_mem_Flash_flash_data+0xf4009ab0>
    9b28:	00bfffc4 	movi	r2,-1
    9b2c:	003fe106 	br	9ab4 <__alt_mem_Flash_flash_data+0xf4009ab4>
    9b30:	9009883a 	mov	r4,r18
    9b34:	800b883a 	mov	r5,r16
    9b38:	0002d680 	call	2d68 <__swsetup_r>
    9b3c:	103ffa1e 	bne	r2,zero,9b28 <__alt_mem_Flash_flash_data+0xf4009b28>
    9b40:	8180030b 	ldhu	r6,12(r16)
    9b44:	80c00417 	ldw	r3,16(r16)
    9b48:	003fc606 	br	9a64 <__alt_mem_Flash_flash_data+0xf4009a64>
    9b4c:	0004dc80 	call	4dc8 <__sinit>
    9b50:	003fbd06 	br	9a48 <__alt_mem_Flash_flash_data+0xf4009a48>

00009b54 <__swbuf>:
    9b54:	00c000b4 	movhi	r3,2
    9b58:	18eeba04 	addi	r3,r3,-17688
    9b5c:	2005883a 	mov	r2,r4
    9b60:	19000017 	ldw	r4,0(r3)
    9b64:	280d883a 	mov	r6,r5
    9b68:	100b883a 	mov	r5,r2
    9b6c:	0009a1c1 	jmpi	9a1c <__swbuf_r>

00009b70 <_wcrtomb_r>:
    9b70:	defff604 	addi	sp,sp,-40
    9b74:	008000b4 	movhi	r2,2
    9b78:	dc800815 	stw	r18,32(sp)
    9b7c:	dc400715 	stw	r17,28(sp)
    9b80:	dc000615 	stw	r16,24(sp)
    9b84:	10aebe04 	addi	r2,r2,-17672
    9b88:	dfc00915 	stw	ra,36(sp)
    9b8c:	2021883a 	mov	r16,r4
    9b90:	3823883a 	mov	r17,r7
    9b94:	14800017 	ldw	r18,0(r2)
    9b98:	28001426 	beq	r5,zero,9bec <_wcrtomb_r+0x7c>
    9b9c:	d9400415 	stw	r5,16(sp)
    9ba0:	d9800515 	stw	r6,20(sp)
    9ba4:	00054300 	call	5430 <__locale_charset>
    9ba8:	d9400417 	ldw	r5,16(sp)
    9bac:	d9800517 	ldw	r6,20(sp)
    9bb0:	8009883a 	mov	r4,r16
    9bb4:	dc400015 	stw	r17,0(sp)
    9bb8:	100f883a 	mov	r7,r2
    9bbc:	903ee83a 	callr	r18
    9bc0:	00ffffc4 	movi	r3,-1
    9bc4:	10c0031e 	bne	r2,r3,9bd4 <_wcrtomb_r+0x64>
    9bc8:	88000015 	stw	zero,0(r17)
    9bcc:	00c02284 	movi	r3,138
    9bd0:	80c00015 	stw	r3,0(r16)
    9bd4:	dfc00917 	ldw	ra,36(sp)
    9bd8:	dc800817 	ldw	r18,32(sp)
    9bdc:	dc400717 	ldw	r17,28(sp)
    9be0:	dc000617 	ldw	r16,24(sp)
    9be4:	dec00a04 	addi	sp,sp,40
    9be8:	f800283a 	ret
    9bec:	00054300 	call	5430 <__locale_charset>
    9bf0:	8009883a 	mov	r4,r16
    9bf4:	dc400015 	stw	r17,0(sp)
    9bf8:	d9400104 	addi	r5,sp,4
    9bfc:	000d883a 	mov	r6,zero
    9c00:	100f883a 	mov	r7,r2
    9c04:	903ee83a 	callr	r18
    9c08:	003fed06 	br	9bc0 <__alt_mem_Flash_flash_data+0xf4009bc0>

00009c0c <wcrtomb>:
    9c0c:	defff604 	addi	sp,sp,-40
    9c10:	008000b4 	movhi	r2,2
    9c14:	dc800615 	stw	r18,24(sp)
    9c18:	dc400515 	stw	r17,20(sp)
    9c1c:	dc000415 	stw	r16,16(sp)
    9c20:	10aeba04 	addi	r2,r2,-17688
    9c24:	dfc00915 	stw	ra,36(sp)
    9c28:	dd000815 	stw	r20,32(sp)
    9c2c:	dcc00715 	stw	r19,28(sp)
    9c30:	2021883a 	mov	r16,r4
    9c34:	3025883a 	mov	r18,r6
    9c38:	14400017 	ldw	r17,0(r2)
    9c3c:	20001826 	beq	r4,zero,9ca0 <wcrtomb+0x94>
    9c40:	008000b4 	movhi	r2,2
    9c44:	10aebe04 	addi	r2,r2,-17672
    9c48:	15000017 	ldw	r20,0(r2)
    9c4c:	2827883a 	mov	r19,r5
    9c50:	00054300 	call	5430 <__locale_charset>
    9c54:	8809883a 	mov	r4,r17
    9c58:	dc800015 	stw	r18,0(sp)
    9c5c:	800b883a 	mov	r5,r16
    9c60:	980d883a 	mov	r6,r19
    9c64:	100f883a 	mov	r7,r2
    9c68:	a03ee83a 	callr	r20
    9c6c:	00ffffc4 	movi	r3,-1
    9c70:	10c0031e 	bne	r2,r3,9c80 <wcrtomb+0x74>
    9c74:	90000015 	stw	zero,0(r18)
    9c78:	00c02284 	movi	r3,138
    9c7c:	88c00015 	stw	r3,0(r17)
    9c80:	dfc00917 	ldw	ra,36(sp)
    9c84:	dd000817 	ldw	r20,32(sp)
    9c88:	dcc00717 	ldw	r19,28(sp)
    9c8c:	dc800617 	ldw	r18,24(sp)
    9c90:	dc400517 	ldw	r17,20(sp)
    9c94:	dc000417 	ldw	r16,16(sp)
    9c98:	dec00a04 	addi	sp,sp,40
    9c9c:	f800283a 	ret
    9ca0:	008000b4 	movhi	r2,2
    9ca4:	10aebe04 	addi	r2,r2,-17672
    9ca8:	14000017 	ldw	r16,0(r2)
    9cac:	00054300 	call	5430 <__locale_charset>
    9cb0:	8809883a 	mov	r4,r17
    9cb4:	dc800015 	stw	r18,0(sp)
    9cb8:	d9400104 	addi	r5,sp,4
    9cbc:	000d883a 	mov	r6,zero
    9cc0:	100f883a 	mov	r7,r2
    9cc4:	803ee83a 	callr	r16
    9cc8:	003fe806 	br	9c6c <__alt_mem_Flash_flash_data+0xf4009c6c>

00009ccc <__ascii_wctomb>:
    9ccc:	28000526 	beq	r5,zero,9ce4 <__ascii_wctomb+0x18>
    9cd0:	00803fc4 	movi	r2,255
    9cd4:	11800536 	bltu	r2,r6,9cec <__ascii_wctomb+0x20>
    9cd8:	29800005 	stb	r6,0(r5)
    9cdc:	00800044 	movi	r2,1
    9ce0:	f800283a 	ret
    9ce4:	0005883a 	mov	r2,zero
    9ce8:	f800283a 	ret
    9cec:	00802284 	movi	r2,138
    9cf0:	20800015 	stw	r2,0(r4)
    9cf4:	00bfffc4 	movi	r2,-1
    9cf8:	f800283a 	ret

00009cfc <_wctomb_r>:
    9cfc:	008000b4 	movhi	r2,2
    9d00:	defff904 	addi	sp,sp,-28
    9d04:	10aebe04 	addi	r2,r2,-17672
    9d08:	dfc00615 	stw	ra,24(sp)
    9d0c:	dc400515 	stw	r17,20(sp)
    9d10:	dc000415 	stw	r16,16(sp)
    9d14:	3823883a 	mov	r17,r7
    9d18:	14000017 	ldw	r16,0(r2)
    9d1c:	d9000115 	stw	r4,4(sp)
    9d20:	d9400215 	stw	r5,8(sp)
    9d24:	d9800315 	stw	r6,12(sp)
    9d28:	00054300 	call	5430 <__locale_charset>
    9d2c:	d9000117 	ldw	r4,4(sp)
    9d30:	d9400217 	ldw	r5,8(sp)
    9d34:	d9800317 	ldw	r6,12(sp)
    9d38:	dc400015 	stw	r17,0(sp)
    9d3c:	100f883a 	mov	r7,r2
    9d40:	803ee83a 	callr	r16
    9d44:	dfc00617 	ldw	ra,24(sp)
    9d48:	dc400517 	ldw	r17,20(sp)
    9d4c:	dc000417 	ldw	r16,16(sp)
    9d50:	dec00704 	addi	sp,sp,28
    9d54:	f800283a 	ret

00009d58 <__udivdi3>:
    9d58:	defff504 	addi	sp,sp,-44
    9d5c:	dcc00415 	stw	r19,16(sp)
    9d60:	dc000115 	stw	r16,4(sp)
    9d64:	dfc00a15 	stw	ra,40(sp)
    9d68:	df000915 	stw	fp,36(sp)
    9d6c:	ddc00815 	stw	r23,32(sp)
    9d70:	dd800715 	stw	r22,28(sp)
    9d74:	dd400615 	stw	r21,24(sp)
    9d78:	dd000515 	stw	r20,20(sp)
    9d7c:	dc800315 	stw	r18,12(sp)
    9d80:	dc400215 	stw	r17,8(sp)
    9d84:	2027883a 	mov	r19,r4
    9d88:	2821883a 	mov	r16,r5
    9d8c:	3800421e 	bne	r7,zero,9e98 <__udivdi3+0x140>
    9d90:	3025883a 	mov	r18,r6
    9d94:	2023883a 	mov	r17,r4
    9d98:	2980542e 	bgeu	r5,r6,9eec <__udivdi3+0x194>
    9d9c:	00bfffd4 	movui	r2,65535
    9da0:	282d883a 	mov	r22,r5
    9da4:	1180a836 	bltu	r2,r6,a048 <__udivdi3+0x2f0>
    9da8:	00803fc4 	movi	r2,255
    9dac:	1181422e 	bgeu	r2,r6,a2b8 <__udivdi3+0x560>
    9db0:	00800204 	movi	r2,8
    9db4:	1007883a 	mov	r3,r2
    9db8:	3084d83a 	srl	r2,r6,r2
    9dbc:	010000b4 	movhi	r4,2
    9dc0:	21262504 	addi	r4,r4,-26476
    9dc4:	2085883a 	add	r2,r4,r2
    9dc8:	10800003 	ldbu	r2,0(r2)
    9dcc:	10c7883a 	add	r3,r2,r3
    9dd0:	00800804 	movi	r2,32
    9dd4:	10c5c83a 	sub	r2,r2,r3
    9dd8:	10000526 	beq	r2,zero,9df0 <__udivdi3+0x98>
    9ddc:	80a0983a 	sll	r16,r16,r2
    9de0:	98c6d83a 	srl	r3,r19,r3
    9de4:	30a4983a 	sll	r18,r6,r2
    9de8:	98a2983a 	sll	r17,r19,r2
    9dec:	80ecb03a 	or	r22,r16,r3
    9df0:	902ad43a 	srli	r21,r18,16
    9df4:	b009883a 	mov	r4,r22
    9df8:	953fffcc 	andi	r20,r18,65535
    9dfc:	a80b883a 	mov	r5,r21
    9e00:	000a9cc0 	call	a9cc <__umodsi3>
    9e04:	b009883a 	mov	r4,r22
    9e08:	a80b883a 	mov	r5,r21
    9e0c:	1027883a 	mov	r19,r2
    9e10:	000a9c40 	call	a9c4 <__udivsi3>
    9e14:	1021883a 	mov	r16,r2
    9e18:	8806d43a 	srli	r3,r17,16
    9e1c:	9804943a 	slli	r2,r19,16
    9e20:	8527383a 	mul	r19,r16,r20
    9e24:	10c4b03a 	or	r2,r2,r3
    9e28:	14c0052e 	bgeu	r2,r19,9e40 <__udivdi3+0xe8>
    9e2c:	1485883a 	add	r2,r2,r18
    9e30:	80ffffc4 	addi	r3,r16,-1
    9e34:	14800136 	bltu	r2,r18,9e3c <__udivdi3+0xe4>
    9e38:	14c13436 	bltu	r2,r19,a30c <__udivdi3+0x5b4>
    9e3c:	1821883a 	mov	r16,r3
    9e40:	14e7c83a 	sub	r19,r2,r19
    9e44:	9809883a 	mov	r4,r19
    9e48:	a80b883a 	mov	r5,r21
    9e4c:	000a9cc0 	call	a9cc <__umodsi3>
    9e50:	102d883a 	mov	r22,r2
    9e54:	9809883a 	mov	r4,r19
    9e58:	a80b883a 	mov	r5,r21
    9e5c:	000a9c40 	call	a9c4 <__udivsi3>
    9e60:	b02c943a 	slli	r22,r22,16
    9e64:	1529383a 	mul	r20,r2,r20
    9e68:	8c7fffcc 	andi	r17,r17,65535
    9e6c:	b462b03a 	or	r17,r22,r17
    9e70:	8d00052e 	bgeu	r17,r20,9e88 <__udivdi3+0x130>
    9e74:	8ca3883a 	add	r17,r17,r18
    9e78:	10ffffc4 	addi	r3,r2,-1
    9e7c:	8c80f636 	bltu	r17,r18,a258 <__udivdi3+0x500>
    9e80:	8d00f52e 	bgeu	r17,r20,a258 <__udivdi3+0x500>
    9e84:	10bfff84 	addi	r2,r2,-2
    9e88:	8020943a 	slli	r16,r16,16
    9e8c:	0007883a 	mov	r3,zero
    9e90:	1404b03a 	or	r2,r2,r16
    9e94:	00005b06 	br	a004 <__udivdi3+0x2ac>
    9e98:	29c05836 	bltu	r5,r7,9ffc <__udivdi3+0x2a4>
    9e9c:	00bfffd4 	movui	r2,65535
    9ea0:	11c0642e 	bgeu	r2,r7,a034 <__udivdi3+0x2dc>
    9ea4:	00804034 	movhi	r2,256
    9ea8:	10bfffc4 	addi	r2,r2,-1
    9eac:	11c0f32e 	bgeu	r2,r7,a27c <__udivdi3+0x524>
    9eb0:	00c00604 	movi	r3,24
    9eb4:	180b883a 	mov	r5,r3
    9eb8:	38c6d83a 	srl	r3,r7,r3
    9ebc:	008000b4 	movhi	r2,2
    9ec0:	10a62504 	addi	r2,r2,-26476
    9ec4:	10c7883a 	add	r3,r2,r3
    9ec8:	18c00003 	ldbu	r3,0(r3)
    9ecc:	01000804 	movi	r4,32
    9ed0:	1947883a 	add	r3,r3,r5
    9ed4:	20e5c83a 	sub	r18,r4,r3
    9ed8:	9000661e 	bne	r18,zero,a074 <__udivdi3+0x31c>
    9edc:	3c00f936 	bltu	r7,r16,a2c4 <__udivdi3+0x56c>
    9ee0:	9985403a 	cmpgeu	r2,r19,r6
    9ee4:	0007883a 	mov	r3,zero
    9ee8:	00004606 	br	a004 <__udivdi3+0x2ac>
    9eec:	3000041e 	bne	r6,zero,9f00 <__udivdi3+0x1a8>
    9ef0:	01000044 	movi	r4,1
    9ef4:	000b883a 	mov	r5,zero
    9ef8:	000a9c40 	call	a9c4 <__udivsi3>
    9efc:	1025883a 	mov	r18,r2
    9f00:	00bfffd4 	movui	r2,65535
    9f04:	1480562e 	bgeu	r2,r18,a060 <__udivdi3+0x308>
    9f08:	00804034 	movhi	r2,256
    9f0c:	10bfffc4 	addi	r2,r2,-1
    9f10:	1480e32e 	bgeu	r2,r18,a2a0 <__udivdi3+0x548>
    9f14:	00800604 	movi	r2,24
    9f18:	1007883a 	mov	r3,r2
    9f1c:	9084d83a 	srl	r2,r18,r2
    9f20:	010000b4 	movhi	r4,2
    9f24:	21262504 	addi	r4,r4,-26476
    9f28:	2085883a 	add	r2,r4,r2
    9f2c:	10800003 	ldbu	r2,0(r2)
    9f30:	10c5883a 	add	r2,r2,r3
    9f34:	00c00804 	movi	r3,32
    9f38:	1887c83a 	sub	r3,r3,r2
    9f3c:	1800911e 	bne	r3,zero,a184 <__udivdi3+0x42c>
    9f40:	9028d43a 	srli	r20,r18,16
    9f44:	84a1c83a 	sub	r16,r16,r18
    9f48:	957fffcc 	andi	r21,r18,65535
    9f4c:	00c00044 	movi	r3,1
    9f50:	8009883a 	mov	r4,r16
    9f54:	a00b883a 	mov	r5,r20
    9f58:	d8c00015 	stw	r3,0(sp)
    9f5c:	000a9cc0 	call	a9cc <__umodsi3>
    9f60:	8009883a 	mov	r4,r16
    9f64:	a00b883a 	mov	r5,r20
    9f68:	1027883a 	mov	r19,r2
    9f6c:	000a9c40 	call	a9c4 <__udivsi3>
    9f70:	1021883a 	mov	r16,r2
    9f74:	880cd43a 	srli	r6,r17,16
    9f78:	9804943a 	slli	r2,r19,16
    9f7c:	8567383a 	mul	r19,r16,r21
    9f80:	d8c00017 	ldw	r3,0(sp)
    9f84:	1188b03a 	or	r4,r2,r6
    9f88:	24c0052e 	bgeu	r4,r19,9fa0 <__udivdi3+0x248>
    9f8c:	2489883a 	add	r4,r4,r18
    9f90:	80bfffc4 	addi	r2,r16,-1
    9f94:	24800136 	bltu	r4,r18,9f9c <__udivdi3+0x244>
    9f98:	24c0d936 	bltu	r4,r19,a300 <__udivdi3+0x5a8>
    9f9c:	1021883a 	mov	r16,r2
    9fa0:	24e7c83a 	sub	r19,r4,r19
    9fa4:	9809883a 	mov	r4,r19
    9fa8:	a00b883a 	mov	r5,r20
    9fac:	d8c00015 	stw	r3,0(sp)
    9fb0:	000a9cc0 	call	a9cc <__umodsi3>
    9fb4:	102d883a 	mov	r22,r2
    9fb8:	9809883a 	mov	r4,r19
    9fbc:	a00b883a 	mov	r5,r20
    9fc0:	000a9c40 	call	a9c4 <__udivsi3>
    9fc4:	b02c943a 	slli	r22,r22,16
    9fc8:	156b383a 	mul	r21,r2,r21
    9fcc:	8c7fffcc 	andi	r17,r17,65535
    9fd0:	b462b03a 	or	r17,r22,r17
    9fd4:	d8c00017 	ldw	r3,0(sp)
    9fd8:	8d40052e 	bgeu	r17,r21,9ff0 <__udivdi3+0x298>
    9fdc:	8ca3883a 	add	r17,r17,r18
    9fe0:	113fffc4 	addi	r4,r2,-1
    9fe4:	8c809a36 	bltu	r17,r18,a250 <__udivdi3+0x4f8>
    9fe8:	8d40992e 	bgeu	r17,r21,a250 <__udivdi3+0x4f8>
    9fec:	10bfff84 	addi	r2,r2,-2
    9ff0:	8020943a 	slli	r16,r16,16
    9ff4:	1404b03a 	or	r2,r2,r16
    9ff8:	00000206 	br	a004 <__udivdi3+0x2ac>
    9ffc:	0007883a 	mov	r3,zero
    a000:	0005883a 	mov	r2,zero
    a004:	dfc00a17 	ldw	ra,40(sp)
    a008:	df000917 	ldw	fp,36(sp)
    a00c:	ddc00817 	ldw	r23,32(sp)
    a010:	dd800717 	ldw	r22,28(sp)
    a014:	dd400617 	ldw	r21,24(sp)
    a018:	dd000517 	ldw	r20,20(sp)
    a01c:	dcc00417 	ldw	r19,16(sp)
    a020:	dc800317 	ldw	r18,12(sp)
    a024:	dc400217 	ldw	r17,8(sp)
    a028:	dc000117 	ldw	r16,4(sp)
    a02c:	dec00b04 	addi	sp,sp,44
    a030:	f800283a 	ret
    a034:	00803fc4 	movi	r2,255
    a038:	11c0932e 	bgeu	r2,r7,a288 <__udivdi3+0x530>
    a03c:	00c00204 	movi	r3,8
    a040:	180b883a 	mov	r5,r3
    a044:	003f9c06 	br	9eb8 <__alt_mem_Flash_flash_data+0xf4009eb8>
    a048:	00804034 	movhi	r2,256
    a04c:	10bfffc4 	addi	r2,r2,-1
    a050:	1180902e 	bgeu	r2,r6,a294 <__udivdi3+0x53c>
    a054:	00800604 	movi	r2,24
    a058:	1007883a 	mov	r3,r2
    a05c:	003f5606 	br	9db8 <__alt_mem_Flash_flash_data+0xf4009db8>
    a060:	00803fc4 	movi	r2,255
    a064:	1480912e 	bgeu	r2,r18,a2ac <__udivdi3+0x554>
    a068:	00800204 	movi	r2,8
    a06c:	1007883a 	mov	r3,r2
    a070:	003faa06 	br	9f1c <__alt_mem_Flash_flash_data+0xf4009f1c>
    a074:	30eed83a 	srl	r23,r6,r3
    a078:	3c8e983a 	sll	r7,r7,r18
    a07c:	80f8d83a 	srl	fp,r16,r3
    a080:	98c6d83a 	srl	r3,r19,r3
    a084:	3deeb03a 	or	r23,r7,r23
    a088:	b828d43a 	srli	r20,r23,16
    a08c:	84a0983a 	sll	r16,r16,r18
    a090:	e009883a 	mov	r4,fp
    a094:	a00b883a 	mov	r5,r20
    a098:	80e2b03a 	or	r17,r16,r3
    a09c:	34aa983a 	sll	r21,r6,r18
    a0a0:	000a9cc0 	call	a9cc <__umodsi3>
    a0a4:	e009883a 	mov	r4,fp
    a0a8:	a00b883a 	mov	r5,r20
    a0ac:	102d883a 	mov	r22,r2
    a0b0:	000a9c40 	call	a9c4 <__udivsi3>
    a0b4:	1021883a 	mov	r16,r2
    a0b8:	bf3fffcc 	andi	fp,r23,65535
    a0bc:	b004943a 	slli	r2,r22,16
    a0c0:	8808d43a 	srli	r4,r17,16
    a0c4:	872d383a 	mul	r22,r16,fp
    a0c8:	1104b03a 	or	r2,r2,r4
    a0cc:	1580042e 	bgeu	r2,r22,a0e0 <__udivdi3+0x388>
    a0d0:	15c5883a 	add	r2,r2,r23
    a0d4:	80ffffc4 	addi	r3,r16,-1
    a0d8:	15c0812e 	bgeu	r2,r23,a2e0 <__udivdi3+0x588>
    a0dc:	1821883a 	mov	r16,r3
    a0e0:	15adc83a 	sub	r22,r2,r22
    a0e4:	b009883a 	mov	r4,r22
    a0e8:	a00b883a 	mov	r5,r20
    a0ec:	000a9cc0 	call	a9cc <__umodsi3>
    a0f0:	a00b883a 	mov	r5,r20
    a0f4:	b009883a 	mov	r4,r22
    a0f8:	d8800015 	stw	r2,0(sp)
    a0fc:	000a9c40 	call	a9c4 <__udivsi3>
    a100:	d8c00017 	ldw	r3,0(sp)
    a104:	170b383a 	mul	r5,r2,fp
    a108:	8c7fffcc 	andi	r17,r17,65535
    a10c:	1806943a 	slli	r3,r3,16
    a110:	1c46b03a 	or	r3,r3,r17
    a114:	1940042e 	bgeu	r3,r5,a128 <__udivdi3+0x3d0>
    a118:	1dc7883a 	add	r3,r3,r23
    a11c:	113fffc4 	addi	r4,r2,-1
    a120:	1dc06b2e 	bgeu	r3,r23,a2d0 <__udivdi3+0x578>
    a124:	2005883a 	mov	r2,r4
    a128:	8020943a 	slli	r16,r16,16
    a12c:	a9ffffcc 	andi	r7,r21,65535
    a130:	a82ad43a 	srli	r21,r21,16
    a134:	1404b03a 	or	r2,r2,r16
    a138:	113fffcc 	andi	r4,r2,65535
    a13c:	100cd43a 	srli	r6,r2,16
    a140:	21d3383a 	mul	r9,r4,r7
    a144:	2549383a 	mul	r4,r4,r21
    a148:	31cf383a 	mul	r7,r6,r7
    a14c:	4810d43a 	srli	r8,r9,16
    a150:	1947c83a 	sub	r3,r3,r5
    a154:	3909883a 	add	r4,r7,r4
    a158:	2209883a 	add	r4,r4,r8
    a15c:	354d383a 	mul	r6,r6,r21
    a160:	21c0022e 	bgeu	r4,r7,a16c <__udivdi3+0x414>
    a164:	01400074 	movhi	r5,1
    a168:	314d883a 	add	r6,r6,r5
    a16c:	202ad43a 	srli	r21,r4,16
    a170:	354d883a 	add	r6,r6,r21
    a174:	19803f36 	bltu	r3,r6,a274 <__udivdi3+0x51c>
    a178:	19803926 	beq	r3,r6,a260 <__udivdi3+0x508>
    a17c:	0007883a 	mov	r3,zero
    a180:	003fa006 	br	a004 <__alt_mem_Flash_flash_data+0xf400a004>
    a184:	90e4983a 	sll	r18,r18,r3
    a188:	80aad83a 	srl	r21,r16,r2
    a18c:	80e0983a 	sll	r16,r16,r3
    a190:	9028d43a 	srli	r20,r18,16
    a194:	9884d83a 	srl	r2,r19,r2
    a198:	a809883a 	mov	r4,r21
    a19c:	a00b883a 	mov	r5,r20
    a1a0:	80acb03a 	or	r22,r16,r2
    a1a4:	98e2983a 	sll	r17,r19,r3
    a1a8:	000a9cc0 	call	a9cc <__umodsi3>
    a1ac:	a809883a 	mov	r4,r21
    a1b0:	a00b883a 	mov	r5,r20
    a1b4:	1021883a 	mov	r16,r2
    a1b8:	000a9c40 	call	a9c4 <__udivsi3>
    a1bc:	957fffcc 	andi	r21,r18,65535
    a1c0:	8020943a 	slli	r16,r16,16
    a1c4:	b00ad43a 	srli	r5,r22,16
    a1c8:	1567383a 	mul	r19,r2,r21
    a1cc:	102f883a 	mov	r23,r2
    a1d0:	8148b03a 	or	r4,r16,r5
    a1d4:	24c0062e 	bgeu	r4,r19,a1f0 <__udivdi3+0x498>
    a1d8:	2489883a 	add	r4,r4,r18
    a1dc:	10bfffc4 	addi	r2,r2,-1
    a1e0:	24804536 	bltu	r4,r18,a2f8 <__udivdi3+0x5a0>
    a1e4:	24c0442e 	bgeu	r4,r19,a2f8 <__udivdi3+0x5a0>
    a1e8:	bdffff84 	addi	r23,r23,-2
    a1ec:	2489883a 	add	r4,r4,r18
    a1f0:	24e7c83a 	sub	r19,r4,r19
    a1f4:	9809883a 	mov	r4,r19
    a1f8:	a00b883a 	mov	r5,r20
    a1fc:	000a9cc0 	call	a9cc <__umodsi3>
    a200:	1021883a 	mov	r16,r2
    a204:	9809883a 	mov	r4,r19
    a208:	a00b883a 	mov	r5,r20
    a20c:	000a9c40 	call	a9c4 <__udivsi3>
    a210:	8020943a 	slli	r16,r16,16
    a214:	1007883a 	mov	r3,r2
    a218:	1545383a 	mul	r2,r2,r21
    a21c:	b13fffcc 	andi	r4,r22,65535
    a220:	8108b03a 	or	r4,r16,r4
    a224:	2080062e 	bgeu	r4,r2,a240 <__udivdi3+0x4e8>
    a228:	2489883a 	add	r4,r4,r18
    a22c:	197fffc4 	addi	r5,r3,-1
    a230:	24802f36 	bltu	r4,r18,a2f0 <__udivdi3+0x598>
    a234:	20802e2e 	bgeu	r4,r2,a2f0 <__udivdi3+0x598>
    a238:	18ffff84 	addi	r3,r3,-2
    a23c:	2489883a 	add	r4,r4,r18
    a240:	b82e943a 	slli	r23,r23,16
    a244:	20a1c83a 	sub	r16,r4,r2
    a248:	1dc6b03a 	or	r3,r3,r23
    a24c:	003f4006 	br	9f50 <__alt_mem_Flash_flash_data+0xf4009f50>
    a250:	2005883a 	mov	r2,r4
    a254:	003f6606 	br	9ff0 <__alt_mem_Flash_flash_data+0xf4009ff0>
    a258:	1805883a 	mov	r2,r3
    a25c:	003f0a06 	br	9e88 <__alt_mem_Flash_flash_data+0xf4009e88>
    a260:	2006943a 	slli	r3,r4,16
    a264:	9c88983a 	sll	r4,r19,r18
    a268:	4a7fffcc 	andi	r9,r9,65535
    a26c:	1a47883a 	add	r3,r3,r9
    a270:	20ffc22e 	bgeu	r4,r3,a17c <__alt_mem_Flash_flash_data+0xf400a17c>
    a274:	10bfffc4 	addi	r2,r2,-1
    a278:	003fc006 	br	a17c <__alt_mem_Flash_flash_data+0xf400a17c>
    a27c:	00c00404 	movi	r3,16
    a280:	180b883a 	mov	r5,r3
    a284:	003f0c06 	br	9eb8 <__alt_mem_Flash_flash_data+0xf4009eb8>
    a288:	0007883a 	mov	r3,zero
    a28c:	000b883a 	mov	r5,zero
    a290:	003f0906 	br	9eb8 <__alt_mem_Flash_flash_data+0xf4009eb8>
    a294:	00800404 	movi	r2,16
    a298:	1007883a 	mov	r3,r2
    a29c:	003ec606 	br	9db8 <__alt_mem_Flash_flash_data+0xf4009db8>
    a2a0:	00800404 	movi	r2,16
    a2a4:	1007883a 	mov	r3,r2
    a2a8:	003f1c06 	br	9f1c <__alt_mem_Flash_flash_data+0xf4009f1c>
    a2ac:	0005883a 	mov	r2,zero
    a2b0:	0007883a 	mov	r3,zero
    a2b4:	003f1906 	br	9f1c <__alt_mem_Flash_flash_data+0xf4009f1c>
    a2b8:	0005883a 	mov	r2,zero
    a2bc:	0007883a 	mov	r3,zero
    a2c0:	003ebd06 	br	9db8 <__alt_mem_Flash_flash_data+0xf4009db8>
    a2c4:	0007883a 	mov	r3,zero
    a2c8:	00800044 	movi	r2,1
    a2cc:	003f4d06 	br	a004 <__alt_mem_Flash_flash_data+0xf400a004>
    a2d0:	197f942e 	bgeu	r3,r5,a124 <__alt_mem_Flash_flash_data+0xf400a124>
    a2d4:	10bfff84 	addi	r2,r2,-2
    a2d8:	1dc7883a 	add	r3,r3,r23
    a2dc:	003f9206 	br	a128 <__alt_mem_Flash_flash_data+0xf400a128>
    a2e0:	15bf7e2e 	bgeu	r2,r22,a0dc <__alt_mem_Flash_flash_data+0xf400a0dc>
    a2e4:	843fff84 	addi	r16,r16,-2
    a2e8:	15c5883a 	add	r2,r2,r23
    a2ec:	003f7c06 	br	a0e0 <__alt_mem_Flash_flash_data+0xf400a0e0>
    a2f0:	2807883a 	mov	r3,r5
    a2f4:	003fd206 	br	a240 <__alt_mem_Flash_flash_data+0xf400a240>
    a2f8:	102f883a 	mov	r23,r2
    a2fc:	003fbc06 	br	a1f0 <__alt_mem_Flash_flash_data+0xf400a1f0>
    a300:	843fff84 	addi	r16,r16,-2
    a304:	2489883a 	add	r4,r4,r18
    a308:	003f2506 	br	9fa0 <__alt_mem_Flash_flash_data+0xf4009fa0>
    a30c:	843fff84 	addi	r16,r16,-2
    a310:	1485883a 	add	r2,r2,r18
    a314:	003eca06 	br	9e40 <__alt_mem_Flash_flash_data+0xf4009e40>

0000a318 <__umoddi3>:
    a318:	defff404 	addi	sp,sp,-48
    a31c:	ddc00915 	stw	r23,36(sp)
    a320:	dc400315 	stw	r17,12(sp)
    a324:	dc000215 	stw	r16,8(sp)
    a328:	dfc00b15 	stw	ra,44(sp)
    a32c:	df000a15 	stw	fp,40(sp)
    a330:	dd800815 	stw	r22,32(sp)
    a334:	dd400715 	stw	r21,28(sp)
    a338:	dd000615 	stw	r20,24(sp)
    a33c:	dcc00515 	stw	r19,20(sp)
    a340:	dc800415 	stw	r18,16(sp)
    a344:	2021883a 	mov	r16,r4
    a348:	2823883a 	mov	r17,r5
    a34c:	282f883a 	mov	r23,r5
    a350:	3800381e 	bne	r7,zero,a434 <__umoddi3+0x11c>
    a354:	3027883a 	mov	r19,r6
    a358:	2029883a 	mov	r20,r4
    a35c:	29804e2e 	bgeu	r5,r6,a498 <__umoddi3+0x180>
    a360:	00bfffd4 	movui	r2,65535
    a364:	11809c36 	bltu	r2,r6,a5d8 <__umoddi3+0x2c0>
    a368:	00803fc4 	movi	r2,255
    a36c:	11813b2e 	bgeu	r2,r6,a85c <__umoddi3+0x544>
    a370:	01400204 	movi	r5,8
    a374:	2805883a 	mov	r2,r5
    a378:	314ad83a 	srl	r5,r6,r5
    a37c:	00c000b4 	movhi	r3,2
    a380:	18e62504 	addi	r3,r3,-26476
    a384:	194b883a 	add	r5,r3,r5
    a388:	29000003 	ldbu	r4,0(r5)
    a38c:	2089883a 	add	r4,r4,r2
    a390:	00800804 	movi	r2,32
    a394:	1105c83a 	sub	r2,r2,r4
    a398:	1000ec26 	beq	r2,zero,a74c <__umoddi3+0x434>
    a39c:	88a2983a 	sll	r17,r17,r2
    a3a0:	8108d83a 	srl	r4,r16,r4
    a3a4:	30a6983a 	sll	r19,r6,r2
    a3a8:	80a8983a 	sll	r20,r16,r2
    a3ac:	1025883a 	mov	r18,r2
    a3b0:	892eb03a 	or	r23,r17,r4
    a3b4:	982cd43a 	srli	r22,r19,16
    a3b8:	b809883a 	mov	r4,r23
    a3bc:	9d7fffcc 	andi	r21,r19,65535
    a3c0:	b00b883a 	mov	r5,r22
    a3c4:	000a9cc0 	call	a9cc <__umodsi3>
    a3c8:	b809883a 	mov	r4,r23
    a3cc:	b00b883a 	mov	r5,r22
    a3d0:	1021883a 	mov	r16,r2
    a3d4:	000a9c40 	call	a9c4 <__udivsi3>
    a3d8:	8020943a 	slli	r16,r16,16
    a3dc:	a00cd43a 	srli	r6,r20,16
    a3e0:	1545383a 	mul	r2,r2,r21
    a3e4:	8188b03a 	or	r4,r16,r6
    a3e8:	2080042e 	bgeu	r4,r2,a3fc <__umoddi3+0xe4>
    a3ec:	24c9883a 	add	r4,r4,r19
    a3f0:	24c00236 	bltu	r4,r19,a3fc <__umoddi3+0xe4>
    a3f4:	2080012e 	bgeu	r4,r2,a3fc <__umoddi3+0xe4>
    a3f8:	24c9883a 	add	r4,r4,r19
    a3fc:	20a3c83a 	sub	r17,r4,r2
    a400:	8809883a 	mov	r4,r17
    a404:	b00b883a 	mov	r5,r22
    a408:	000a9cc0 	call	a9cc <__umodsi3>
    a40c:	8809883a 	mov	r4,r17
    a410:	b00b883a 	mov	r5,r22
    a414:	1021883a 	mov	r16,r2
    a418:	000a9c40 	call	a9c4 <__udivsi3>
    a41c:	8006943a 	slli	r3,r16,16
    a420:	1545383a 	mul	r2,r2,r21
    a424:	a13fffcc 	andi	r4,r20,65535
    a428:	1906b03a 	or	r3,r3,r4
    a42c:	1880532e 	bgeu	r3,r2,a57c <__umoddi3+0x264>
    a430:	00004e06 	br	a56c <__umoddi3+0x254>
    a434:	29c05536 	bltu	r5,r7,a58c <__umoddi3+0x274>
    a438:	00bfffd4 	movui	r2,65535
    a43c:	11c0612e 	bgeu	r2,r7,a5c4 <__umoddi3+0x2ac>
    a440:	00804034 	movhi	r2,256
    a444:	10bfffc4 	addi	r2,r2,-1
    a448:	11c0f82e 	bgeu	r2,r7,a82c <__umoddi3+0x514>
    a44c:	01400604 	movi	r5,24
    a450:	282b883a 	mov	r21,r5
    a454:	394ad83a 	srl	r5,r7,r5
    a458:	00c000b4 	movhi	r3,2
    a45c:	18e62504 	addi	r3,r3,-26476
    a460:	194b883a 	add	r5,r3,r5
    a464:	28800003 	ldbu	r2,0(r5)
    a468:	00c00804 	movi	r3,32
    a46c:	156b883a 	add	r21,r2,r21
    a470:	1d69c83a 	sub	r20,r3,r21
    a474:	a000631e 	bne	r20,zero,a604 <__umoddi3+0x2ec>
    a478:	3c400136 	bltu	r7,r17,a480 <__umoddi3+0x168>
    a47c:	81810436 	bltu	r16,r6,a890 <__umoddi3+0x578>
    a480:	8185c83a 	sub	r2,r16,r6
    a484:	89e3c83a 	sub	r17,r17,r7
    a488:	8087803a 	cmpltu	r3,r16,r2
    a48c:	88efc83a 	sub	r23,r17,r3
    a490:	b807883a 	mov	r3,r23
    a494:	00003f06 	br	a594 <__umoddi3+0x27c>
    a498:	3000041e 	bne	r6,zero,a4ac <__umoddi3+0x194>
    a49c:	01000044 	movi	r4,1
    a4a0:	000b883a 	mov	r5,zero
    a4a4:	000a9c40 	call	a9c4 <__udivsi3>
    a4a8:	1027883a 	mov	r19,r2
    a4ac:	00bfffd4 	movui	r2,65535
    a4b0:	14c04f2e 	bgeu	r2,r19,a5f0 <__umoddi3+0x2d8>
    a4b4:	00804034 	movhi	r2,256
    a4b8:	10bfffc4 	addi	r2,r2,-1
    a4bc:	14c0e42e 	bgeu	r2,r19,a850 <__umoddi3+0x538>
    a4c0:	00800604 	movi	r2,24
    a4c4:	1007883a 	mov	r3,r2
    a4c8:	9884d83a 	srl	r2,r19,r2
    a4cc:	010000b4 	movhi	r4,2
    a4d0:	21262504 	addi	r4,r4,-26476
    a4d4:	2085883a 	add	r2,r4,r2
    a4d8:	11000003 	ldbu	r4,0(r2)
    a4dc:	00800804 	movi	r2,32
    a4e0:	20c7883a 	add	r3,r4,r3
    a4e4:	10c5c83a 	sub	r2,r2,r3
    a4e8:	10009a1e 	bne	r2,zero,a754 <__umoddi3+0x43c>
    a4ec:	982cd43a 	srli	r22,r19,16
    a4f0:	8ce3c83a 	sub	r17,r17,r19
    a4f4:	9c3fffcc 	andi	r16,r19,65535
    a4f8:	0025883a 	mov	r18,zero
    a4fc:	8809883a 	mov	r4,r17
    a500:	b00b883a 	mov	r5,r22
    a504:	000a9cc0 	call	a9cc <__umodsi3>
    a508:	8809883a 	mov	r4,r17
    a50c:	b00b883a 	mov	r5,r22
    a510:	102b883a 	mov	r21,r2
    a514:	000a9c40 	call	a9c4 <__udivsi3>
    a518:	a806943a 	slli	r3,r21,16
    a51c:	a008d43a 	srli	r4,r20,16
    a520:	1405383a 	mul	r2,r2,r16
    a524:	190cb03a 	or	r6,r3,r4
    a528:	3080032e 	bgeu	r6,r2,a538 <__umoddi3+0x220>
    a52c:	34cd883a 	add	r6,r6,r19
    a530:	34c00136 	bltu	r6,r19,a538 <__umoddi3+0x220>
    a534:	3080d436 	bltu	r6,r2,a888 <__umoddi3+0x570>
    a538:	30abc83a 	sub	r21,r6,r2
    a53c:	a809883a 	mov	r4,r21
    a540:	b00b883a 	mov	r5,r22
    a544:	000a9cc0 	call	a9cc <__umodsi3>
    a548:	1023883a 	mov	r17,r2
    a54c:	a809883a 	mov	r4,r21
    a550:	b00b883a 	mov	r5,r22
    a554:	000a9c40 	call	a9c4 <__udivsi3>
    a558:	8822943a 	slli	r17,r17,16
    a55c:	1405383a 	mul	r2,r2,r16
    a560:	a13fffcc 	andi	r4,r20,65535
    a564:	8906b03a 	or	r3,r17,r4
    a568:	1880042e 	bgeu	r3,r2,a57c <__umoddi3+0x264>
    a56c:	1cc7883a 	add	r3,r3,r19
    a570:	1cc00236 	bltu	r3,r19,a57c <__umoddi3+0x264>
    a574:	1880012e 	bgeu	r3,r2,a57c <__umoddi3+0x264>
    a578:	1cc7883a 	add	r3,r3,r19
    a57c:	1887c83a 	sub	r3,r3,r2
    a580:	1c84d83a 	srl	r2,r3,r18
    a584:	0007883a 	mov	r3,zero
    a588:	00000206 	br	a594 <__umoddi3+0x27c>
    a58c:	2005883a 	mov	r2,r4
    a590:	2807883a 	mov	r3,r5
    a594:	dfc00b17 	ldw	ra,44(sp)
    a598:	df000a17 	ldw	fp,40(sp)
    a59c:	ddc00917 	ldw	r23,36(sp)
    a5a0:	dd800817 	ldw	r22,32(sp)
    a5a4:	dd400717 	ldw	r21,28(sp)
    a5a8:	dd000617 	ldw	r20,24(sp)
    a5ac:	dcc00517 	ldw	r19,20(sp)
    a5b0:	dc800417 	ldw	r18,16(sp)
    a5b4:	dc400317 	ldw	r17,12(sp)
    a5b8:	dc000217 	ldw	r16,8(sp)
    a5bc:	dec00c04 	addi	sp,sp,48
    a5c0:	f800283a 	ret
    a5c4:	00803fc4 	movi	r2,255
    a5c8:	11c0952e 	bgeu	r2,r7,a820 <__umoddi3+0x508>
    a5cc:	01400204 	movi	r5,8
    a5d0:	282b883a 	mov	r21,r5
    a5d4:	003f9f06 	br	a454 <__alt_mem_Flash_flash_data+0xf400a454>
    a5d8:	00804034 	movhi	r2,256
    a5dc:	10bfffc4 	addi	r2,r2,-1
    a5e0:	1180952e 	bgeu	r2,r6,a838 <__umoddi3+0x520>
    a5e4:	01400604 	movi	r5,24
    a5e8:	2805883a 	mov	r2,r5
    a5ec:	003f6206 	br	a378 <__alt_mem_Flash_flash_data+0xf400a378>
    a5f0:	00803fc4 	movi	r2,255
    a5f4:	14c0932e 	bgeu	r2,r19,a844 <__umoddi3+0x52c>
    a5f8:	00800204 	movi	r2,8
    a5fc:	1007883a 	mov	r3,r2
    a600:	003fb106 	br	a4c8 <__alt_mem_Flash_flash_data+0xf400a4c8>
    a604:	3548d83a 	srl	r4,r6,r21
    a608:	3d0e983a 	sll	r7,r7,r20
    a60c:	8d10983a 	sll	r8,r17,r20
    a610:	8d6cd83a 	srl	r22,r17,r21
    a614:	3922b03a 	or	r17,r7,r4
    a618:	882ed43a 	srli	r23,r17,16
    a61c:	8564d83a 	srl	r18,r16,r21
    a620:	b009883a 	mov	r4,r22
    a624:	b80b883a 	mov	r5,r23
    a628:	44a4b03a 	or	r18,r8,r18
    a62c:	3526983a 	sll	r19,r6,r20
    a630:	000a9cc0 	call	a9cc <__umodsi3>
    a634:	b009883a 	mov	r4,r22
    a638:	b80b883a 	mov	r5,r23
    a63c:	1039883a 	mov	fp,r2
    a640:	000a9c40 	call	a9c4 <__udivsi3>
    a644:	102d883a 	mov	r22,r2
    a648:	8a3fffcc 	andi	r8,r17,65535
    a64c:	e004943a 	slli	r2,fp,16
    a650:	900cd43a 	srli	r6,r18,16
    a654:	b239383a 	mul	fp,r22,r8
    a658:	8520983a 	sll	r16,r16,r20
    a65c:	118ab03a 	or	r5,r2,r6
    a660:	2f00042e 	bgeu	r5,fp,a674 <__umoddi3+0x35c>
    a664:	2c4b883a 	add	r5,r5,r17
    a668:	b0bfffc4 	addi	r2,r22,-1
    a66c:	2c40822e 	bgeu	r5,r17,a878 <__umoddi3+0x560>
    a670:	102d883a 	mov	r22,r2
    a674:	2f39c83a 	sub	fp,r5,fp
    a678:	e009883a 	mov	r4,fp
    a67c:	b80b883a 	mov	r5,r23
    a680:	da000115 	stw	r8,4(sp)
    a684:	000a9cc0 	call	a9cc <__umodsi3>
    a688:	e009883a 	mov	r4,fp
    a68c:	b80b883a 	mov	r5,r23
    a690:	d8800015 	stw	r2,0(sp)
    a694:	000a9c40 	call	a9c4 <__udivsi3>
    a698:	d9800017 	ldw	r6,0(sp)
    a69c:	da000117 	ldw	r8,4(sp)
    a6a0:	94bfffcc 	andi	r18,r18,65535
    a6a4:	300c943a 	slli	r6,r6,16
    a6a8:	1209383a 	mul	r4,r2,r8
    a6ac:	3490b03a 	or	r8,r6,r18
    a6b0:	4100042e 	bgeu	r8,r4,a6c4 <__umoddi3+0x3ac>
    a6b4:	4451883a 	add	r8,r8,r17
    a6b8:	10ffffc4 	addi	r3,r2,-1
    a6bc:	44406a2e 	bgeu	r8,r17,a868 <__umoddi3+0x550>
    a6c0:	1805883a 	mov	r2,r3
    a6c4:	b012943a 	slli	r9,r22,16
    a6c8:	9abfffcc 	andi	r10,r19,65535
    a6cc:	980ed43a 	srli	r7,r19,16
    a6d0:	124ab03a 	or	r5,r2,r9
    a6d4:	2a7fffcc 	andi	r9,r5,65535
    a6d8:	280ad43a 	srli	r5,r5,16
    a6dc:	4a8d383a 	mul	r6,r9,r10
    a6e0:	49d3383a 	mul	r9,r9,r7
    a6e4:	2a95383a 	mul	r10,r5,r10
    a6e8:	3004d43a 	srli	r2,r6,16
    a6ec:	4111c83a 	sub	r8,r8,r4
    a6f0:	5253883a 	add	r9,r10,r9
    a6f4:	4893883a 	add	r9,r9,r2
    a6f8:	29cb383a 	mul	r5,r5,r7
    a6fc:	4a80022e 	bgeu	r9,r10,a708 <__umoddi3+0x3f0>
    a700:	00800074 	movhi	r2,1
    a704:	288b883a 	add	r5,r5,r2
    a708:	4808d43a 	srli	r4,r9,16
    a70c:	4812943a 	slli	r9,r9,16
    a710:	31bfffcc 	andi	r6,r6,65535
    a714:	290b883a 	add	r5,r5,r4
    a718:	498d883a 	add	r6,r9,r6
    a71c:	41403a36 	bltu	r8,r5,a808 <__umoddi3+0x4f0>
    a720:	41405d26 	beq	r8,r5,a898 <__umoddi3+0x580>
    a724:	4149c83a 	sub	r4,r8,r5
    a728:	300f883a 	mov	r7,r6
    a72c:	81cfc83a 	sub	r7,r16,r7
    a730:	81c7803a 	cmpltu	r3,r16,r7
    a734:	20c7c83a 	sub	r3,r4,r3
    a738:	1d44983a 	sll	r2,r3,r21
    a73c:	3d0ed83a 	srl	r7,r7,r20
    a740:	1d06d83a 	srl	r3,r3,r20
    a744:	11c4b03a 	or	r2,r2,r7
    a748:	003f9206 	br	a594 <__alt_mem_Flash_flash_data+0xf400a594>
    a74c:	0025883a 	mov	r18,zero
    a750:	003f1806 	br	a3b4 <__alt_mem_Flash_flash_data+0xf400a3b4>
    a754:	98a6983a 	sll	r19,r19,r2
    a758:	88e8d83a 	srl	r20,r17,r3
    a75c:	80c6d83a 	srl	r3,r16,r3
    a760:	982cd43a 	srli	r22,r19,16
    a764:	88a2983a 	sll	r17,r17,r2
    a768:	a009883a 	mov	r4,r20
    a76c:	b00b883a 	mov	r5,r22
    a770:	88eab03a 	or	r21,r17,r3
    a774:	1025883a 	mov	r18,r2
    a778:	000a9cc0 	call	a9cc <__umodsi3>
    a77c:	a009883a 	mov	r4,r20
    a780:	b00b883a 	mov	r5,r22
    a784:	1023883a 	mov	r17,r2
    a788:	000a9c40 	call	a9c4 <__udivsi3>
    a78c:	9f3fffcc 	andi	fp,r19,65535
    a790:	8822943a 	slli	r17,r17,16
    a794:	a80ad43a 	srli	r5,r21,16
    a798:	1705383a 	mul	r2,r2,fp
    a79c:	84a8983a 	sll	r20,r16,r18
    a7a0:	8948b03a 	or	r4,r17,r5
    a7a4:	2080042e 	bgeu	r4,r2,a7b8 <__umoddi3+0x4a0>
    a7a8:	24c9883a 	add	r4,r4,r19
    a7ac:	24c00236 	bltu	r4,r19,a7b8 <__umoddi3+0x4a0>
    a7b0:	2080012e 	bgeu	r4,r2,a7b8 <__umoddi3+0x4a0>
    a7b4:	24c9883a 	add	r4,r4,r19
    a7b8:	20afc83a 	sub	r23,r4,r2
    a7bc:	b809883a 	mov	r4,r23
    a7c0:	b00b883a 	mov	r5,r22
    a7c4:	000a9cc0 	call	a9cc <__umodsi3>
    a7c8:	1023883a 	mov	r17,r2
    a7cc:	b809883a 	mov	r4,r23
    a7d0:	b00b883a 	mov	r5,r22
    a7d4:	000a9c40 	call	a9c4 <__udivsi3>
    a7d8:	8822943a 	slli	r17,r17,16
    a7dc:	1705383a 	mul	r2,r2,fp
    a7e0:	a93fffcc 	andi	r4,r21,65535
    a7e4:	8908b03a 	or	r4,r17,r4
    a7e8:	2080042e 	bgeu	r4,r2,a7fc <__umoddi3+0x4e4>
    a7ec:	24c9883a 	add	r4,r4,r19
    a7f0:	24c00236 	bltu	r4,r19,a7fc <__umoddi3+0x4e4>
    a7f4:	2080012e 	bgeu	r4,r2,a7fc <__umoddi3+0x4e4>
    a7f8:	24c9883a 	add	r4,r4,r19
    a7fc:	20a3c83a 	sub	r17,r4,r2
    a800:	e021883a 	mov	r16,fp
    a804:	003f3d06 	br	a4fc <__alt_mem_Flash_flash_data+0xf400a4fc>
    a808:	34cfc83a 	sub	r7,r6,r19
    a80c:	2c4bc83a 	sub	r5,r5,r17
    a810:	31cd803a 	cmpltu	r6,r6,r7
    a814:	298dc83a 	sub	r6,r5,r6
    a818:	4189c83a 	sub	r4,r8,r6
    a81c:	003fc306 	br	a72c <__alt_mem_Flash_flash_data+0xf400a72c>
    a820:	000b883a 	mov	r5,zero
    a824:	002b883a 	mov	r21,zero
    a828:	003f0a06 	br	a454 <__alt_mem_Flash_flash_data+0xf400a454>
    a82c:	01400404 	movi	r5,16
    a830:	282b883a 	mov	r21,r5
    a834:	003f0706 	br	a454 <__alt_mem_Flash_flash_data+0xf400a454>
    a838:	01400404 	movi	r5,16
    a83c:	2805883a 	mov	r2,r5
    a840:	003ecd06 	br	a378 <__alt_mem_Flash_flash_data+0xf400a378>
    a844:	0005883a 	mov	r2,zero
    a848:	0007883a 	mov	r3,zero
    a84c:	003f1e06 	br	a4c8 <__alt_mem_Flash_flash_data+0xf400a4c8>
    a850:	00800404 	movi	r2,16
    a854:	1007883a 	mov	r3,r2
    a858:	003f1b06 	br	a4c8 <__alt_mem_Flash_flash_data+0xf400a4c8>
    a85c:	000b883a 	mov	r5,zero
    a860:	0005883a 	mov	r2,zero
    a864:	003ec406 	br	a378 <__alt_mem_Flash_flash_data+0xf400a378>
    a868:	413f952e 	bgeu	r8,r4,a6c0 <__alt_mem_Flash_flash_data+0xf400a6c0>
    a86c:	10bfff84 	addi	r2,r2,-2
    a870:	4451883a 	add	r8,r8,r17
    a874:	003f9306 	br	a6c4 <__alt_mem_Flash_flash_data+0xf400a6c4>
    a878:	2f3f7d2e 	bgeu	r5,fp,a670 <__alt_mem_Flash_flash_data+0xf400a670>
    a87c:	b5bfff84 	addi	r22,r22,-2
    a880:	2c4b883a 	add	r5,r5,r17
    a884:	003f7b06 	br	a674 <__alt_mem_Flash_flash_data+0xf400a674>
    a888:	34cd883a 	add	r6,r6,r19
    a88c:	003f2a06 	br	a538 <__alt_mem_Flash_flash_data+0xf400a538>
    a890:	8005883a 	mov	r2,r16
    a894:	003efe06 	br	a490 <__alt_mem_Flash_flash_data+0xf400a490>
    a898:	81bfdb36 	bltu	r16,r6,a808 <__alt_mem_Flash_flash_data+0xf400a808>
    a89c:	300f883a 	mov	r7,r6
    a8a0:	0009883a 	mov	r4,zero
    a8a4:	003fa106 	br	a72c <__alt_mem_Flash_flash_data+0xf400a72c>

0000a8a8 <udivmodsi4>:
    a8a8:	2900182e 	bgeu	r5,r4,a90c <udivmodsi4+0x64>
    a8ac:	28001716 	blt	r5,zero,a90c <udivmodsi4+0x64>
    a8b0:	00800804 	movi	r2,32
    a8b4:	00c00044 	movi	r3,1
    a8b8:	00000206 	br	a8c4 <udivmodsi4+0x1c>
    a8bc:	10001126 	beq	r2,zero,a904 <udivmodsi4+0x5c>
    a8c0:	28000516 	blt	r5,zero,a8d8 <udivmodsi4+0x30>
    a8c4:	294b883a 	add	r5,r5,r5
    a8c8:	10bfffc4 	addi	r2,r2,-1
    a8cc:	18c7883a 	add	r3,r3,r3
    a8d0:	293ffa36 	bltu	r5,r4,a8bc <__alt_mem_Flash_flash_data+0xf400a8bc>
    a8d4:	18000b26 	beq	r3,zero,a904 <udivmodsi4+0x5c>
    a8d8:	0005883a 	mov	r2,zero
    a8dc:	21400236 	bltu	r4,r5,a8e8 <udivmodsi4+0x40>
    a8e0:	2149c83a 	sub	r4,r4,r5
    a8e4:	10c4b03a 	or	r2,r2,r3
    a8e8:	1806d07a 	srli	r3,r3,1
    a8ec:	280ad07a 	srli	r5,r5,1
    a8f0:	183ffa1e 	bne	r3,zero,a8dc <__alt_mem_Flash_flash_data+0xf400a8dc>
    a8f4:	3000011e 	bne	r6,zero,a8fc <udivmodsi4+0x54>
    a8f8:	f800283a 	ret
    a8fc:	2005883a 	mov	r2,r4
    a900:	f800283a 	ret
    a904:	0005883a 	mov	r2,zero
    a908:	003ffa06 	br	a8f4 <__alt_mem_Flash_flash_data+0xf400a8f4>
    a90c:	00c00044 	movi	r3,1
    a910:	003ff106 	br	a8d8 <__alt_mem_Flash_flash_data+0xf400a8d8>

0000a914 <__divsi3>:
    a914:	defffe04 	addi	sp,sp,-8
    a918:	dfc00115 	stw	ra,4(sp)
    a91c:	dc000015 	stw	r16,0(sp)
    a920:	20000b16 	blt	r4,zero,a950 <__divsi3+0x3c>
    a924:	0021883a 	mov	r16,zero
    a928:	28000c16 	blt	r5,zero,a95c <__divsi3+0x48>
    a92c:	000d883a 	mov	r6,zero
    a930:	000a8a80 	call	a8a8 <udivmodsi4>
    a934:	0407c83a 	sub	r3,zero,r16
    a938:	1884f03a 	xor	r2,r3,r2
    a93c:	1405883a 	add	r2,r2,r16
    a940:	dfc00117 	ldw	ra,4(sp)
    a944:	dc000017 	ldw	r16,0(sp)
    a948:	dec00204 	addi	sp,sp,8
    a94c:	f800283a 	ret
    a950:	0109c83a 	sub	r4,zero,r4
    a954:	04000044 	movi	r16,1
    a958:	283ff40e 	bge	r5,zero,a92c <__alt_mem_Flash_flash_data+0xf400a92c>
    a95c:	014bc83a 	sub	r5,zero,r5
    a960:	8400005c 	xori	r16,r16,1
    a964:	003ff106 	br	a92c <__alt_mem_Flash_flash_data+0xf400a92c>

0000a968 <__modsi3>:
    a968:	defffd04 	addi	sp,sp,-12
    a96c:	dfc00215 	stw	ra,8(sp)
    a970:	dc400115 	stw	r17,4(sp)
    a974:	dc000015 	stw	r16,0(sp)
    a978:	20000c16 	blt	r4,zero,a9ac <__modsi3+0x44>
    a97c:	0023883a 	mov	r17,zero
    a980:	0021883a 	mov	r16,zero
    a984:	28000d16 	blt	r5,zero,a9bc <__modsi3+0x54>
    a988:	01800044 	movi	r6,1
    a98c:	000a8a80 	call	a8a8 <udivmodsi4>
    a990:	1404f03a 	xor	r2,r2,r16
    a994:	8885883a 	add	r2,r17,r2
    a998:	dfc00217 	ldw	ra,8(sp)
    a99c:	dc400117 	ldw	r17,4(sp)
    a9a0:	dc000017 	ldw	r16,0(sp)
    a9a4:	dec00304 	addi	sp,sp,12
    a9a8:	f800283a 	ret
    a9ac:	0109c83a 	sub	r4,zero,r4
    a9b0:	04400044 	movi	r17,1
    a9b4:	043fffc4 	movi	r16,-1
    a9b8:	283ff30e 	bge	r5,zero,a988 <__alt_mem_Flash_flash_data+0xf400a988>
    a9bc:	014bc83a 	sub	r5,zero,r5
    a9c0:	003ff106 	br	a988 <__alt_mem_Flash_flash_data+0xf400a988>

0000a9c4 <__udivsi3>:
    a9c4:	000d883a 	mov	r6,zero
    a9c8:	000a8a81 	jmpi	a8a8 <udivmodsi4>

0000a9cc <__umodsi3>:
    a9cc:	01800044 	movi	r6,1
    a9d0:	000a8a81 	jmpi	a8a8 <udivmodsi4>

0000a9d4 <__adddf3>:
    a9d4:	02000434 	movhi	r8,16
    a9d8:	423fffc4 	addi	r8,r8,-1
    a9dc:	defffb04 	addi	sp,sp,-20
    a9e0:	2a12703a 	and	r9,r5,r8
    a9e4:	2806d7fa 	srli	r3,r5,31
    a9e8:	3a10703a 	and	r8,r7,r8
    a9ec:	3804d53a 	srli	r2,r7,20
    a9f0:	3014d77a 	srli	r10,r6,29
    a9f4:	dc000015 	stw	r16,0(sp)
    a9f8:	481290fa 	slli	r9,r9,3
    a9fc:	2820d53a 	srli	r16,r5,20
    aa00:	401090fa 	slli	r8,r8,3
    aa04:	200ad77a 	srli	r5,r4,29
    aa08:	380ed7fa 	srli	r7,r7,31
    aa0c:	dc800215 	stw	r18,8(sp)
    aa10:	dc400115 	stw	r17,4(sp)
    aa14:	dfc00415 	stw	ra,16(sp)
    aa18:	dcc00315 	stw	r19,12(sp)
    aa1c:	1c803fcc 	andi	r18,r3,255
    aa20:	8401ffcc 	andi	r16,r16,2047
    aa24:	494ab03a 	or	r5,r9,r5
    aa28:	202290fa 	slli	r17,r4,3
    aa2c:	1081ffcc 	andi	r2,r2,2047
    aa30:	4290b03a 	or	r8,r8,r10
    aa34:	300c90fa 	slli	r6,r6,3
    aa38:	91c07026 	beq	r18,r7,abfc <__adddf3+0x228>
    aa3c:	8087c83a 	sub	r3,r16,r2
    aa40:	00c0b30e 	bge	zero,r3,ad10 <__adddf3+0x33c>
    aa44:	10002a1e 	bne	r2,zero,aaf0 <__adddf3+0x11c>
    aa48:	4184b03a 	or	r2,r8,r6
    aa4c:	1000991e 	bne	r2,zero,acb4 <__adddf3+0x2e0>
    aa50:	888001cc 	andi	r2,r17,7
    aa54:	10005b26 	beq	r2,zero,abc4 <__adddf3+0x1f0>
    aa58:	88c003cc 	andi	r3,r17,15
    aa5c:	00800104 	movi	r2,4
    aa60:	18805826 	beq	r3,r2,abc4 <__adddf3+0x1f0>
    aa64:	89800104 	addi	r6,r17,4
    aa68:	3463803a 	cmpltu	r17,r6,r17
    aa6c:	2c4b883a 	add	r5,r5,r17
    aa70:	2880202c 	andhi	r2,r5,128
    aa74:	9007883a 	mov	r3,r18
    aa78:	3023883a 	mov	r17,r6
    aa7c:	10005426 	beq	r2,zero,abd0 <__adddf3+0x1fc>
    aa80:	84000044 	addi	r16,r16,1
    aa84:	0081ffc4 	movi	r2,2047
    aa88:	8080c126 	beq	r16,r2,ad90 <__adddf3+0x3bc>
    aa8c:	013fe034 	movhi	r4,65408
    aa90:	213fffc4 	addi	r4,r4,-1
    aa94:	290a703a 	and	r5,r5,r4
    aa98:	2804977a 	slli	r2,r5,29
    aa9c:	280a927a 	slli	r5,r5,9
    aaa0:	8822d0fa 	srli	r17,r17,3
    aaa4:	8401ffcc 	andi	r16,r16,2047
    aaa8:	2808d33a 	srli	r4,r5,12
    aaac:	1444b03a 	or	r2,r2,r17
    aab0:	8401ffcc 	andi	r16,r16,2047
    aab4:	800a953a 	slli	r5,r16,20
    aab8:	18c03fcc 	andi	r3,r3,255
    aabc:	04000434 	movhi	r16,16
    aac0:	180697fa 	slli	r3,r3,31
    aac4:	843fffc4 	addi	r16,r16,-1
    aac8:	2420703a 	and	r16,r4,r16
    aacc:	8160b03a 	or	r16,r16,r5
    aad0:	80c6b03a 	or	r3,r16,r3
    aad4:	dfc00417 	ldw	ra,16(sp)
    aad8:	dcc00317 	ldw	r19,12(sp)
    aadc:	dc800217 	ldw	r18,8(sp)
    aae0:	dc400117 	ldw	r17,4(sp)
    aae4:	dc000017 	ldw	r16,0(sp)
    aae8:	dec00504 	addi	sp,sp,20
    aaec:	f800283a 	ret
    aaf0:	0081ffc4 	movi	r2,2047
    aaf4:	80bfd626 	beq	r16,r2,aa50 <__alt_mem_Flash_flash_data+0xf400aa50>
    aaf8:	42002034 	orhi	r8,r8,128
    aafc:	00800e04 	movi	r2,56
    ab00:	10c0a616 	blt	r2,r3,ad9c <__adddf3+0x3c8>
    ab04:	008007c4 	movi	r2,31
    ab08:	10c0c916 	blt	r2,r3,ae30 <__adddf3+0x45c>
    ab0c:	00800804 	movi	r2,32
    ab10:	10c5c83a 	sub	r2,r2,r3
    ab14:	408e983a 	sll	r7,r8,r2
    ab18:	30c8d83a 	srl	r4,r6,r3
    ab1c:	3084983a 	sll	r2,r6,r2
    ab20:	40c6d83a 	srl	r3,r8,r3
    ab24:	390cb03a 	or	r6,r7,r4
    ab28:	1004c03a 	cmpne	r2,r2,zero
    ab2c:	308cb03a 	or	r6,r6,r2
    ab30:	898dc83a 	sub	r6,r17,r6
    ab34:	89a3803a 	cmpltu	r17,r17,r6
    ab38:	28cbc83a 	sub	r5,r5,r3
    ab3c:	2c4bc83a 	sub	r5,r5,r17
    ab40:	3023883a 	mov	r17,r6
    ab44:	2880202c 	andhi	r2,r5,128
    ab48:	10006d26 	beq	r2,zero,ad00 <__adddf3+0x32c>
    ab4c:	04c02034 	movhi	r19,128
    ab50:	9cffffc4 	addi	r19,r19,-1
    ab54:	2ce6703a 	and	r19,r5,r19
    ab58:	98007e26 	beq	r19,zero,ad54 <__adddf3+0x380>
    ab5c:	9809883a 	mov	r4,r19
    ab60:	000cf700 	call	cf70 <__clzsi2>
    ab64:	10fffe04 	addi	r3,r2,-8
    ab68:	010007c4 	movi	r4,31
    ab6c:	20c07f16 	blt	r4,r3,ad6c <__adddf3+0x398>
    ab70:	01400a04 	movi	r5,40
    ab74:	2885c83a 	sub	r2,r5,r2
    ab78:	888ad83a 	srl	r5,r17,r2
    ab7c:	98e6983a 	sll	r19,r19,r3
    ab80:	88e2983a 	sll	r17,r17,r3
    ab84:	2ce6b03a 	or	r19,r5,r19
    ab88:	1c007c16 	blt	r3,r16,ad7c <__adddf3+0x3a8>
    ab8c:	1c21c83a 	sub	r16,r3,r16
    ab90:	81400044 	addi	r5,r16,1
    ab94:	00c007c4 	movi	r3,31
    ab98:	19409816 	blt	r3,r5,adfc <__adddf3+0x428>
    ab9c:	1c21c83a 	sub	r16,r3,r16
    aba0:	8c08983a 	sll	r4,r17,r16
    aba4:	8946d83a 	srl	r3,r17,r5
    aba8:	9c20983a 	sll	r16,r19,r16
    abac:	2008c03a 	cmpne	r4,r4,zero
    abb0:	994ad83a 	srl	r5,r19,r5
    abb4:	1c06b03a 	or	r3,r3,r16
    abb8:	1922b03a 	or	r17,r3,r4
    abbc:	0021883a 	mov	r16,zero
    abc0:	003fa306 	br	aa50 <__alt_mem_Flash_flash_data+0xf400aa50>
    abc4:	2880202c 	andhi	r2,r5,128
    abc8:	9007883a 	mov	r3,r18
    abcc:	103fac1e 	bne	r2,zero,aa80 <__alt_mem_Flash_flash_data+0xf400aa80>
    abd0:	2804977a 	slli	r2,r5,29
    abd4:	8822d0fa 	srli	r17,r17,3
    abd8:	0101ffc4 	movi	r4,2047
    abdc:	280ad0fa 	srli	r5,r5,3
    abe0:	1444b03a 	or	r2,r2,r17
    abe4:	81002c26 	beq	r16,r4,ac98 <__adddf3+0x2c4>
    abe8:	8120703a 	and	r16,r16,r4
    abec:	01000434 	movhi	r4,16
    abf0:	213fffc4 	addi	r4,r4,-1
    abf4:	2908703a 	and	r4,r5,r4
    abf8:	003fad06 	br	aab0 <__alt_mem_Flash_flash_data+0xf400aab0>
    abfc:	8089c83a 	sub	r4,r16,r2
    ac00:	01006a0e 	bge	zero,r4,adac <__adddf3+0x3d8>
    ac04:	10003326 	beq	r2,zero,acd4 <__adddf3+0x300>
    ac08:	0081ffc4 	movi	r2,2047
    ac0c:	80bf9026 	beq	r16,r2,aa50 <__alt_mem_Flash_flash_data+0xf400aa50>
    ac10:	42002034 	orhi	r8,r8,128
    ac14:	00800e04 	movi	r2,56
    ac18:	1100b116 	blt	r2,r4,aee0 <__adddf3+0x50c>
    ac1c:	008007c4 	movi	r2,31
    ac20:	1100e216 	blt	r2,r4,afac <__adddf3+0x5d8>
    ac24:	00800804 	movi	r2,32
    ac28:	1105c83a 	sub	r2,r2,r4
    ac2c:	4092983a 	sll	r9,r8,r2
    ac30:	310ed83a 	srl	r7,r6,r4
    ac34:	3084983a 	sll	r2,r6,r2
    ac38:	4110d83a 	srl	r8,r8,r4
    ac3c:	49ccb03a 	or	r6,r9,r7
    ac40:	1004c03a 	cmpne	r2,r2,zero
    ac44:	308cb03a 	or	r6,r6,r2
    ac48:	344d883a 	add	r6,r6,r17
    ac4c:	3463803a 	cmpltu	r17,r6,r17
    ac50:	414b883a 	add	r5,r8,r5
    ac54:	2c4b883a 	add	r5,r5,r17
    ac58:	3023883a 	mov	r17,r6
    ac5c:	2880202c 	andhi	r2,r5,128
    ac60:	10002726 	beq	r2,zero,ad00 <__adddf3+0x32c>
    ac64:	84000044 	addi	r16,r16,1
    ac68:	0081ffc4 	movi	r2,2047
    ac6c:	8080ae26 	beq	r16,r2,af28 <__adddf3+0x554>
    ac70:	00bfe034 	movhi	r2,65408
    ac74:	10bfffc4 	addi	r2,r2,-1
    ac78:	288a703a 	and	r5,r5,r2
    ac7c:	880cd07a 	srli	r6,r17,1
    ac80:	280897fa 	slli	r4,r5,31
    ac84:	88c0004c 	andi	r3,r17,1
    ac88:	30e2b03a 	or	r17,r6,r3
    ac8c:	280ad07a 	srli	r5,r5,1
    ac90:	8922b03a 	or	r17,r17,r4
    ac94:	003f6e06 	br	aa50 <__alt_mem_Flash_flash_data+0xf400aa50>
    ac98:	1148b03a 	or	r4,r2,r5
    ac9c:	20003c26 	beq	r4,zero,ad90 <__adddf3+0x3bc>
    aca0:	29000234 	orhi	r4,r5,8
    aca4:	01400434 	movhi	r5,16
    aca8:	297fffc4 	addi	r5,r5,-1
    acac:	2148703a 	and	r4,r4,r5
    acb0:	003f7f06 	br	aab0 <__alt_mem_Flash_flash_data+0xf400aab0>
    acb4:	18ffffc4 	addi	r3,r3,-1
    acb8:	18004d1e 	bne	r3,zero,adf0 <__adddf3+0x41c>
    acbc:	898dc83a 	sub	r6,r17,r6
    acc0:	89a3803a 	cmpltu	r17,r17,r6
    acc4:	2a0bc83a 	sub	r5,r5,r8
    acc8:	2c4bc83a 	sub	r5,r5,r17
    accc:	3023883a 	mov	r17,r6
    acd0:	003f9c06 	br	ab44 <__alt_mem_Flash_flash_data+0xf400ab44>
    acd4:	4184b03a 	or	r2,r8,r6
    acd8:	103f5d26 	beq	r2,zero,aa50 <__alt_mem_Flash_flash_data+0xf400aa50>
    acdc:	213fffc4 	addi	r4,r4,-1
    ace0:	203fd926 	beq	r4,zero,ac48 <__alt_mem_Flash_flash_data+0xf400ac48>
    ace4:	0081ffc4 	movi	r2,2047
    ace8:	80bfca1e 	bne	r16,r2,ac14 <__alt_mem_Flash_flash_data+0xf400ac14>
    acec:	003f5806 	br	aa50 <__alt_mem_Flash_flash_data+0xf400aa50>
    acf0:	10c8b03a 	or	r4,r2,r3
    acf4:	20008b26 	beq	r4,zero,af24 <__adddf3+0x550>
    acf8:	100b883a 	mov	r5,r2
    acfc:	1823883a 	mov	r17,r3
    ad00:	888001cc 	andi	r2,r17,7
    ad04:	103f541e 	bne	r2,zero,aa58 <__alt_mem_Flash_flash_data+0xf400aa58>
    ad08:	9007883a 	mov	r3,r18
    ad0c:	003fb006 	br	abd0 <__alt_mem_Flash_flash_data+0xf400abd0>
    ad10:	1800531e 	bne	r3,zero,ae60 <__adddf3+0x48c>
    ad14:	80800044 	addi	r2,r16,1
    ad18:	1081ffcc 	andi	r2,r2,2047
    ad1c:	00c00044 	movi	r3,1
    ad20:	1880990e 	bge	r3,r2,af88 <__adddf3+0x5b4>
    ad24:	8985c83a 	sub	r2,r17,r6
    ad28:	8887803a 	cmpltu	r3,r17,r2
    ad2c:	2a27c83a 	sub	r19,r5,r8
    ad30:	98e7c83a 	sub	r19,r19,r3
    ad34:	98c0202c 	andhi	r3,r19,128
    ad38:	18006226 	beq	r3,zero,aec4 <__adddf3+0x4f0>
    ad3c:	3463c83a 	sub	r17,r6,r17
    ad40:	4151c83a 	sub	r8,r8,r5
    ad44:	344d803a 	cmpltu	r6,r6,r17
    ad48:	41a7c83a 	sub	r19,r8,r6
    ad4c:	3825883a 	mov	r18,r7
    ad50:	983f821e 	bne	r19,zero,ab5c <__alt_mem_Flash_flash_data+0xf400ab5c>
    ad54:	8809883a 	mov	r4,r17
    ad58:	000cf700 	call	cf70 <__clzsi2>
    ad5c:	10800804 	addi	r2,r2,32
    ad60:	10fffe04 	addi	r3,r2,-8
    ad64:	010007c4 	movi	r4,31
    ad68:	20ff810e 	bge	r4,r3,ab70 <__alt_mem_Flash_flash_data+0xf400ab70>
    ad6c:	14fff604 	addi	r19,r2,-40
    ad70:	8ce6983a 	sll	r19,r17,r19
    ad74:	0023883a 	mov	r17,zero
    ad78:	1c3f840e 	bge	r3,r16,ab8c <__alt_mem_Flash_flash_data+0xf400ab8c>
    ad7c:	017fe034 	movhi	r5,65408
    ad80:	297fffc4 	addi	r5,r5,-1
    ad84:	80e1c83a 	sub	r16,r16,r3
    ad88:	994a703a 	and	r5,r19,r5
    ad8c:	003f3006 	br	aa50 <__alt_mem_Flash_flash_data+0xf400aa50>
    ad90:	0009883a 	mov	r4,zero
    ad94:	0005883a 	mov	r2,zero
    ad98:	003f4506 	br	aab0 <__alt_mem_Flash_flash_data+0xf400aab0>
    ad9c:	418cb03a 	or	r6,r8,r6
    ada0:	300cc03a 	cmpne	r6,r6,zero
    ada4:	0007883a 	mov	r3,zero
    ada8:	003f6106 	br	ab30 <__alt_mem_Flash_flash_data+0xf400ab30>
    adac:	2000921e 	bne	r4,zero,aff8 <__adddf3+0x624>
    adb0:	80800044 	addi	r2,r16,1
    adb4:	11c1ffcc 	andi	r7,r2,2047
    adb8:	01000044 	movi	r4,1
    adbc:	21c0610e 	bge	r4,r7,af44 <__adddf3+0x570>
    adc0:	0101ffc4 	movi	r4,2047
    adc4:	1100a326 	beq	r2,r4,b054 <__adddf3+0x680>
    adc8:	344d883a 	add	r6,r6,r17
    adcc:	3463803a 	cmpltu	r17,r6,r17
    add0:	414b883a 	add	r5,r8,r5
    add4:	2c4b883a 	add	r5,r5,r17
    add8:	282297fa 	slli	r17,r5,31
    addc:	300cd07a 	srli	r6,r6,1
    ade0:	280ad07a 	srli	r5,r5,1
    ade4:	1021883a 	mov	r16,r2
    ade8:	89a2b03a 	or	r17,r17,r6
    adec:	003f1806 	br	aa50 <__alt_mem_Flash_flash_data+0xf400aa50>
    adf0:	0081ffc4 	movi	r2,2047
    adf4:	80bf411e 	bne	r16,r2,aafc <__alt_mem_Flash_flash_data+0xf400aafc>
    adf8:	003f1506 	br	aa50 <__alt_mem_Flash_flash_data+0xf400aa50>
    adfc:	80bff844 	addi	r2,r16,-31
    ae00:	00c00804 	movi	r3,32
    ae04:	9884d83a 	srl	r2,r19,r2
    ae08:	28c04a26 	beq	r5,r3,af34 <__adddf3+0x560>
    ae0c:	00c00fc4 	movi	r3,63
    ae10:	1c21c83a 	sub	r16,r3,r16
    ae14:	9c26983a 	sll	r19,r19,r16
    ae18:	9c62b03a 	or	r17,r19,r17
    ae1c:	8822c03a 	cmpne	r17,r17,zero
    ae20:	88a2b03a 	or	r17,r17,r2
    ae24:	000b883a 	mov	r5,zero
    ae28:	0021883a 	mov	r16,zero
    ae2c:	003fb406 	br	ad00 <__alt_mem_Flash_flash_data+0xf400ad00>
    ae30:	18bff804 	addi	r2,r3,-32
    ae34:	01000804 	movi	r4,32
    ae38:	4084d83a 	srl	r2,r8,r2
    ae3c:	19003f26 	beq	r3,r4,af3c <__adddf3+0x568>
    ae40:	01001004 	movi	r4,64
    ae44:	20c7c83a 	sub	r3,r4,r3
    ae48:	40d0983a 	sll	r8,r8,r3
    ae4c:	418cb03a 	or	r6,r8,r6
    ae50:	300cc03a 	cmpne	r6,r6,zero
    ae54:	308cb03a 	or	r6,r6,r2
    ae58:	0007883a 	mov	r3,zero
    ae5c:	003f3406 	br	ab30 <__alt_mem_Flash_flash_data+0xf400ab30>
    ae60:	80002326 	beq	r16,zero,aef0 <__adddf3+0x51c>
    ae64:	0101ffc4 	movi	r4,2047
    ae68:	11005e26 	beq	r2,r4,afe4 <__adddf3+0x610>
    ae6c:	00c7c83a 	sub	r3,zero,r3
    ae70:	29402034 	orhi	r5,r5,128
    ae74:	01000e04 	movi	r4,56
    ae78:	20c07216 	blt	r4,r3,b044 <__adddf3+0x670>
    ae7c:	010007c4 	movi	r4,31
    ae80:	20c0ce16 	blt	r4,r3,b1bc <__adddf3+0x7e8>
    ae84:	01000804 	movi	r4,32
    ae88:	20c9c83a 	sub	r4,r4,r3
    ae8c:	2914983a 	sll	r10,r5,r4
    ae90:	88d2d83a 	srl	r9,r17,r3
    ae94:	8908983a 	sll	r4,r17,r4
    ae98:	28c6d83a 	srl	r3,r5,r3
    ae9c:	5262b03a 	or	r17,r10,r9
    aea0:	2008c03a 	cmpne	r4,r4,zero
    aea4:	8922b03a 	or	r17,r17,r4
    aea8:	3463c83a 	sub	r17,r6,r17
    aeac:	40c7c83a 	sub	r3,r8,r3
    aeb0:	344d803a 	cmpltu	r6,r6,r17
    aeb4:	198bc83a 	sub	r5,r3,r6
    aeb8:	1021883a 	mov	r16,r2
    aebc:	3825883a 	mov	r18,r7
    aec0:	003f2006 	br	ab44 <__alt_mem_Flash_flash_data+0xf400ab44>
    aec4:	9886b03a 	or	r3,r19,r2
    aec8:	1800141e 	bne	r3,zero,af1c <__adddf3+0x548>
    aecc:	0007883a 	mov	r3,zero
    aed0:	000b883a 	mov	r5,zero
    aed4:	0023883a 	mov	r17,zero
    aed8:	0021883a 	mov	r16,zero
    aedc:	003f3c06 	br	abd0 <__alt_mem_Flash_flash_data+0xf400abd0>
    aee0:	418cb03a 	or	r6,r8,r6
    aee4:	300cc03a 	cmpne	r6,r6,zero
    aee8:	0011883a 	mov	r8,zero
    aeec:	003f5606 	br	ac48 <__alt_mem_Flash_flash_data+0xf400ac48>
    aef0:	2c48b03a 	or	r4,r5,r17
    aef4:	20003b26 	beq	r4,zero,afe4 <__adddf3+0x610>
    aef8:	00c6303a 	nor	r3,zero,r3
    aefc:	1800371e 	bne	r3,zero,afdc <__adddf3+0x608>
    af00:	3463c83a 	sub	r17,r6,r17
    af04:	414bc83a 	sub	r5,r8,r5
    af08:	344d803a 	cmpltu	r6,r6,r17
    af0c:	298bc83a 	sub	r5,r5,r6
    af10:	1021883a 	mov	r16,r2
    af14:	3825883a 	mov	r18,r7
    af18:	003f0a06 	br	ab44 <__alt_mem_Flash_flash_data+0xf400ab44>
    af1c:	1023883a 	mov	r17,r2
    af20:	003f0d06 	br	ab58 <__alt_mem_Flash_flash_data+0xf400ab58>
    af24:	0007883a 	mov	r3,zero
    af28:	000b883a 	mov	r5,zero
    af2c:	0023883a 	mov	r17,zero
    af30:	003f2706 	br	abd0 <__alt_mem_Flash_flash_data+0xf400abd0>
    af34:	0027883a 	mov	r19,zero
    af38:	003fb706 	br	ae18 <__alt_mem_Flash_flash_data+0xf400ae18>
    af3c:	0011883a 	mov	r8,zero
    af40:	003fc206 	br	ae4c <__alt_mem_Flash_flash_data+0xf400ae4c>
    af44:	2c44b03a 	or	r2,r5,r17
    af48:	8000871e 	bne	r16,zero,b168 <__adddf3+0x794>
    af4c:	1000b126 	beq	r2,zero,b214 <__adddf3+0x840>
    af50:	4184b03a 	or	r2,r8,r6
    af54:	103ebe26 	beq	r2,zero,aa50 <__alt_mem_Flash_flash_data+0xf400aa50>
    af58:	3445883a 	add	r2,r6,r17
    af5c:	1463803a 	cmpltu	r17,r2,r17
    af60:	414b883a 	add	r5,r8,r5
    af64:	2c4b883a 	add	r5,r5,r17
    af68:	28c0202c 	andhi	r3,r5,128
    af6c:	1023883a 	mov	r17,r2
    af70:	183f6326 	beq	r3,zero,ad00 <__alt_mem_Flash_flash_data+0xf400ad00>
    af74:	00bfe034 	movhi	r2,65408
    af78:	10bfffc4 	addi	r2,r2,-1
    af7c:	2021883a 	mov	r16,r4
    af80:	288a703a 	and	r5,r5,r2
    af84:	003eb206 	br	aa50 <__alt_mem_Flash_flash_data+0xf400aa50>
    af88:	2c44b03a 	or	r2,r5,r17
    af8c:	8000251e 	bne	r16,zero,b024 <__adddf3+0x650>
    af90:	10004b1e 	bne	r2,zero,b0c0 <__adddf3+0x6ec>
    af94:	4184b03a 	or	r2,r8,r6
    af98:	103fe226 	beq	r2,zero,af24 <__alt_mem_Flash_flash_data+0xf400af24>
    af9c:	400b883a 	mov	r5,r8
    afa0:	3023883a 	mov	r17,r6
    afa4:	3825883a 	mov	r18,r7
    afa8:	003ea906 	br	aa50 <__alt_mem_Flash_flash_data+0xf400aa50>
    afac:	20bff804 	addi	r2,r4,-32
    afb0:	01c00804 	movi	r7,32
    afb4:	4084d83a 	srl	r2,r8,r2
    afb8:	21c07e26 	beq	r4,r7,b1b4 <__adddf3+0x7e0>
    afbc:	01c01004 	movi	r7,64
    afc0:	3909c83a 	sub	r4,r7,r4
    afc4:	4110983a 	sll	r8,r8,r4
    afc8:	418cb03a 	or	r6,r8,r6
    afcc:	300cc03a 	cmpne	r6,r6,zero
    afd0:	308cb03a 	or	r6,r6,r2
    afd4:	0011883a 	mov	r8,zero
    afd8:	003f1b06 	br	ac48 <__alt_mem_Flash_flash_data+0xf400ac48>
    afdc:	0101ffc4 	movi	r4,2047
    afe0:	113fa41e 	bne	r2,r4,ae74 <__alt_mem_Flash_flash_data+0xf400ae74>
    afe4:	400b883a 	mov	r5,r8
    afe8:	3023883a 	mov	r17,r6
    afec:	1021883a 	mov	r16,r2
    aff0:	3825883a 	mov	r18,r7
    aff4:	003e9606 	br	aa50 <__alt_mem_Flash_flash_data+0xf400aa50>
    aff8:	80001a1e 	bne	r16,zero,b064 <__adddf3+0x690>
    affc:	2c4eb03a 	or	r7,r5,r17
    b000:	38005526 	beq	r7,zero,b158 <__adddf3+0x784>
    b004:	0108303a 	nor	r4,zero,r4
    b008:	2000511e 	bne	r4,zero,b150 <__adddf3+0x77c>
    b00c:	89a3883a 	add	r17,r17,r6
    b010:	414b883a 	add	r5,r8,r5
    b014:	898d803a 	cmpltu	r6,r17,r6
    b018:	298b883a 	add	r5,r5,r6
    b01c:	1021883a 	mov	r16,r2
    b020:	003f0e06 	br	ac5c <__alt_mem_Flash_flash_data+0xf400ac5c>
    b024:	1000341e 	bne	r2,zero,b0f8 <__adddf3+0x724>
    b028:	4184b03a 	or	r2,r8,r6
    b02c:	10006f26 	beq	r2,zero,b1ec <__adddf3+0x818>
    b030:	400b883a 	mov	r5,r8
    b034:	3023883a 	mov	r17,r6
    b038:	3825883a 	mov	r18,r7
    b03c:	0401ffc4 	movi	r16,2047
    b040:	003e8306 	br	aa50 <__alt_mem_Flash_flash_data+0xf400aa50>
    b044:	2c62b03a 	or	r17,r5,r17
    b048:	8822c03a 	cmpne	r17,r17,zero
    b04c:	0007883a 	mov	r3,zero
    b050:	003f9506 	br	aea8 <__alt_mem_Flash_flash_data+0xf400aea8>
    b054:	1021883a 	mov	r16,r2
    b058:	000b883a 	mov	r5,zero
    b05c:	0023883a 	mov	r17,zero
    b060:	003edb06 	br	abd0 <__alt_mem_Flash_flash_data+0xf400abd0>
    b064:	01c1ffc4 	movi	r7,2047
    b068:	11c03b26 	beq	r2,r7,b158 <__adddf3+0x784>
    b06c:	0109c83a 	sub	r4,zero,r4
    b070:	29402034 	orhi	r5,r5,128
    b074:	01c00e04 	movi	r7,56
    b078:	39006216 	blt	r7,r4,b204 <__adddf3+0x830>
    b07c:	01c007c4 	movi	r7,31
    b080:	39006b16 	blt	r7,r4,b230 <__adddf3+0x85c>
    b084:	01c00804 	movi	r7,32
    b088:	390fc83a 	sub	r7,r7,r4
    b08c:	29d4983a 	sll	r10,r5,r7
    b090:	8912d83a 	srl	r9,r17,r4
    b094:	89ce983a 	sll	r7,r17,r7
    b098:	2908d83a 	srl	r4,r5,r4
    b09c:	5262b03a 	or	r17,r10,r9
    b0a0:	380ac03a 	cmpne	r5,r7,zero
    b0a4:	8962b03a 	or	r17,r17,r5
    b0a8:	89a3883a 	add	r17,r17,r6
    b0ac:	2211883a 	add	r8,r4,r8
    b0b0:	898d803a 	cmpltu	r6,r17,r6
    b0b4:	418b883a 	add	r5,r8,r6
    b0b8:	1021883a 	mov	r16,r2
    b0bc:	003ee706 	br	ac5c <__alt_mem_Flash_flash_data+0xf400ac5c>
    b0c0:	4184b03a 	or	r2,r8,r6
    b0c4:	103e6226 	beq	r2,zero,aa50 <__alt_mem_Flash_flash_data+0xf400aa50>
    b0c8:	8987c83a 	sub	r3,r17,r6
    b0cc:	88c9803a 	cmpltu	r4,r17,r3
    b0d0:	2a05c83a 	sub	r2,r5,r8
    b0d4:	1105c83a 	sub	r2,r2,r4
    b0d8:	1100202c 	andhi	r4,r2,128
    b0dc:	203f0426 	beq	r4,zero,acf0 <__alt_mem_Flash_flash_data+0xf400acf0>
    b0e0:	3463c83a 	sub	r17,r6,r17
    b0e4:	414bc83a 	sub	r5,r8,r5
    b0e8:	344d803a 	cmpltu	r6,r6,r17
    b0ec:	298bc83a 	sub	r5,r5,r6
    b0f0:	3825883a 	mov	r18,r7
    b0f4:	003e5606 	br	aa50 <__alt_mem_Flash_flash_data+0xf400aa50>
    b0f8:	4184b03a 	or	r2,r8,r6
    b0fc:	10002b26 	beq	r2,zero,b1ac <__adddf3+0x7d8>
    b100:	2804d0fa 	srli	r2,r5,3
    b104:	8822d0fa 	srli	r17,r17,3
    b108:	280a977a 	slli	r5,r5,29
    b10c:	10c0022c 	andhi	r3,r2,8
    b110:	2c62b03a 	or	r17,r5,r17
    b114:	18000826 	beq	r3,zero,b138 <__adddf3+0x764>
    b118:	4008d0fa 	srli	r4,r8,3
    b11c:	20c0022c 	andhi	r3,r4,8
    b120:	1800051e 	bne	r3,zero,b138 <__adddf3+0x764>
    b124:	300cd0fa 	srli	r6,r6,3
    b128:	4010977a 	slli	r8,r8,29
    b12c:	2005883a 	mov	r2,r4
    b130:	3825883a 	mov	r18,r7
    b134:	41a2b03a 	or	r17,r8,r6
    b138:	880ad77a 	srli	r5,r17,29
    b13c:	100490fa 	slli	r2,r2,3
    b140:	882290fa 	slli	r17,r17,3
    b144:	0401ffc4 	movi	r16,2047
    b148:	288ab03a 	or	r5,r5,r2
    b14c:	003e4006 	br	aa50 <__alt_mem_Flash_flash_data+0xf400aa50>
    b150:	01c1ffc4 	movi	r7,2047
    b154:	11ffc71e 	bne	r2,r7,b074 <__alt_mem_Flash_flash_data+0xf400b074>
    b158:	400b883a 	mov	r5,r8
    b15c:	3023883a 	mov	r17,r6
    b160:	1021883a 	mov	r16,r2
    b164:	003e3a06 	br	aa50 <__alt_mem_Flash_flash_data+0xf400aa50>
    b168:	10002d26 	beq	r2,zero,b220 <__adddf3+0x84c>
    b16c:	4184b03a 	or	r2,r8,r6
    b170:	10000e26 	beq	r2,zero,b1ac <__adddf3+0x7d8>
    b174:	2804d0fa 	srli	r2,r5,3
    b178:	8822d0fa 	srli	r17,r17,3
    b17c:	280a977a 	slli	r5,r5,29
    b180:	10c0022c 	andhi	r3,r2,8
    b184:	2c62b03a 	or	r17,r5,r17
    b188:	183feb26 	beq	r3,zero,b138 <__alt_mem_Flash_flash_data+0xf400b138>
    b18c:	4008d0fa 	srli	r4,r8,3
    b190:	20c0022c 	andhi	r3,r4,8
    b194:	183fe81e 	bne	r3,zero,b138 <__alt_mem_Flash_flash_data+0xf400b138>
    b198:	300cd0fa 	srli	r6,r6,3
    b19c:	4010977a 	slli	r8,r8,29
    b1a0:	2005883a 	mov	r2,r4
    b1a4:	41a2b03a 	or	r17,r8,r6
    b1a8:	003fe306 	br	b138 <__alt_mem_Flash_flash_data+0xf400b138>
    b1ac:	0401ffc4 	movi	r16,2047
    b1b0:	003e2706 	br	aa50 <__alt_mem_Flash_flash_data+0xf400aa50>
    b1b4:	0011883a 	mov	r8,zero
    b1b8:	003f8306 	br	afc8 <__alt_mem_Flash_flash_data+0xf400afc8>
    b1bc:	193ff804 	addi	r4,r3,-32
    b1c0:	02400804 	movi	r9,32
    b1c4:	2908d83a 	srl	r4,r5,r4
    b1c8:	1a402526 	beq	r3,r9,b260 <__adddf3+0x88c>
    b1cc:	02401004 	movi	r9,64
    b1d0:	48c7c83a 	sub	r3,r9,r3
    b1d4:	28ca983a 	sll	r5,r5,r3
    b1d8:	2c62b03a 	or	r17,r5,r17
    b1dc:	8822c03a 	cmpne	r17,r17,zero
    b1e0:	8922b03a 	or	r17,r17,r4
    b1e4:	0007883a 	mov	r3,zero
    b1e8:	003f2f06 	br	aea8 <__alt_mem_Flash_flash_data+0xf400aea8>
    b1ec:	01402034 	movhi	r5,128
    b1f0:	0007883a 	mov	r3,zero
    b1f4:	297fffc4 	addi	r5,r5,-1
    b1f8:	047ffe04 	movi	r17,-8
    b1fc:	0401ffc4 	movi	r16,2047
    b200:	003e7306 	br	abd0 <__alt_mem_Flash_flash_data+0xf400abd0>
    b204:	2c62b03a 	or	r17,r5,r17
    b208:	8822c03a 	cmpne	r17,r17,zero
    b20c:	0009883a 	mov	r4,zero
    b210:	003fa506 	br	b0a8 <__alt_mem_Flash_flash_data+0xf400b0a8>
    b214:	400b883a 	mov	r5,r8
    b218:	3023883a 	mov	r17,r6
    b21c:	003e0c06 	br	aa50 <__alt_mem_Flash_flash_data+0xf400aa50>
    b220:	400b883a 	mov	r5,r8
    b224:	3023883a 	mov	r17,r6
    b228:	0401ffc4 	movi	r16,2047
    b22c:	003e0806 	br	aa50 <__alt_mem_Flash_flash_data+0xf400aa50>
    b230:	21fff804 	addi	r7,r4,-32
    b234:	02400804 	movi	r9,32
    b238:	29ced83a 	srl	r7,r5,r7
    b23c:	22400a26 	beq	r4,r9,b268 <__adddf3+0x894>
    b240:	02401004 	movi	r9,64
    b244:	4909c83a 	sub	r4,r9,r4
    b248:	290a983a 	sll	r5,r5,r4
    b24c:	2c62b03a 	or	r17,r5,r17
    b250:	8822c03a 	cmpne	r17,r17,zero
    b254:	89e2b03a 	or	r17,r17,r7
    b258:	0009883a 	mov	r4,zero
    b25c:	003f9206 	br	b0a8 <__alt_mem_Flash_flash_data+0xf400b0a8>
    b260:	000b883a 	mov	r5,zero
    b264:	003fdc06 	br	b1d8 <__alt_mem_Flash_flash_data+0xf400b1d8>
    b268:	000b883a 	mov	r5,zero
    b26c:	003ff706 	br	b24c <__alt_mem_Flash_flash_data+0xf400b24c>

0000b270 <__divdf3>:
    b270:	defff204 	addi	sp,sp,-56
    b274:	dd000815 	stw	r20,32(sp)
    b278:	2828d53a 	srli	r20,r5,20
    b27c:	dd800a15 	stw	r22,40(sp)
    b280:	282cd7fa 	srli	r22,r5,31
    b284:	dc000415 	stw	r16,16(sp)
    b288:	04000434 	movhi	r16,16
    b28c:	df000c15 	stw	fp,48(sp)
    b290:	dcc00715 	stw	r19,28(sp)
    b294:	dc800615 	stw	r18,24(sp)
    b298:	dc400515 	stw	r17,20(sp)
    b29c:	843fffc4 	addi	r16,r16,-1
    b2a0:	dfc00d15 	stw	ra,52(sp)
    b2a4:	ddc00b15 	stw	r23,44(sp)
    b2a8:	dd400915 	stw	r21,36(sp)
    b2ac:	a501ffcc 	andi	r20,r20,2047
    b2b0:	2025883a 	mov	r18,r4
    b2b4:	2027883a 	mov	r19,r4
    b2b8:	2c22703a 	and	r17,r5,r16
    b2bc:	b7003fcc 	andi	fp,r22,255
    b2c0:	a0005e26 	beq	r20,zero,b43c <__divdf3+0x1cc>
    b2c4:	0081ffc4 	movi	r2,2047
    b2c8:	a0803526 	beq	r20,r2,b3a0 <__divdf3+0x130>
    b2cc:	8c000434 	orhi	r16,r17,16
    b2d0:	2004d77a 	srli	r2,r4,29
    b2d4:	802090fa 	slli	r16,r16,3
    b2d8:	202690fa 	slli	r19,r4,3
    b2dc:	a53f0044 	addi	r20,r20,-1023
    b2e0:	80a2b03a 	or	r17,r16,r2
    b2e4:	0025883a 	mov	r18,zero
    b2e8:	0011883a 	mov	r8,zero
    b2ec:	380ad53a 	srli	r5,r7,20
    b2f0:	382ed7fa 	srli	r23,r7,31
    b2f4:	04000434 	movhi	r16,16
    b2f8:	843fffc4 	addi	r16,r16,-1
    b2fc:	2941ffcc 	andi	r5,r5,2047
    b300:	302b883a 	mov	r21,r6
    b304:	3c20703a 	and	r16,r7,r16
    b308:	ba403fcc 	andi	r9,r23,255
    b30c:	28006726 	beq	r5,zero,b4ac <__divdf3+0x23c>
    b310:	0081ffc4 	movi	r2,2047
    b314:	28805f26 	beq	r5,r2,b494 <__divdf3+0x224>
    b318:	84000434 	orhi	r16,r16,16
    b31c:	3004d77a 	srli	r2,r6,29
    b320:	802090fa 	slli	r16,r16,3
    b324:	302a90fa 	slli	r21,r6,3
    b328:	297f0044 	addi	r5,r5,-1023
    b32c:	80a0b03a 	or	r16,r16,r2
    b330:	000f883a 	mov	r7,zero
    b334:	3c86b03a 	or	r3,r7,r18
    b338:	180690ba 	slli	r3,r3,2
    b33c:	00800074 	movhi	r2,1
    b340:	10acd804 	addi	r2,r2,-19616
    b344:	1887883a 	add	r3,r3,r2
    b348:	18c00017 	ldw	r3,0(r3)
    b34c:	b5c8f03a 	xor	r4,r22,r23
    b350:	200d883a 	mov	r6,r4
    b354:	24803fcc 	andi	r18,r4,255
    b358:	a169c83a 	sub	r20,r20,r5
    b35c:	1800683a 	jmp	r3
    b360:	0000b5a8 	cmpgeui	zero,zero,726
    b364:	0000b3d8 	cmpnei	zero,zero,719
    b368:	0000b56c 	andhi	zero,zero,725
    b36c:	0000b3bc 	xorhi	zero,zero,718
    b370:	0000b56c 	andhi	zero,zero,725
    b374:	0000b540 	call	b54 <main+0xe4>
    b378:	0000b56c 	andhi	zero,zero,725
    b37c:	0000b3bc 	xorhi	zero,zero,718
    b380:	0000b3d8 	cmpnei	zero,zero,719
    b384:	0000b3d8 	cmpnei	zero,zero,719
    b388:	0000b540 	call	b54 <main+0xe4>
    b38c:	0000b3bc 	xorhi	zero,zero,718
    b390:	0000b3cc 	andi	zero,zero,719
    b394:	0000b3cc 	andi	zero,zero,719
    b398:	0000b3cc 	andi	zero,zero,719
    b39c:	0000b57c 	xorhi	zero,zero,725
    b3a0:	8904b03a 	or	r2,r17,r4
    b3a4:	1000631e 	bne	r2,zero,b534 <__divdf3+0x2c4>
    b3a8:	04800204 	movi	r18,8
    b3ac:	0023883a 	mov	r17,zero
    b3b0:	0027883a 	mov	r19,zero
    b3b4:	02000084 	movi	r8,2
    b3b8:	003fcc06 	br	b2ec <__alt_mem_Flash_flash_data+0xf400b2ec>
    b3bc:	8023883a 	mov	r17,r16
    b3c0:	a827883a 	mov	r19,r21
    b3c4:	4839883a 	mov	fp,r9
    b3c8:	3811883a 	mov	r8,r7
    b3cc:	00800084 	movi	r2,2
    b3d0:	40812a1e 	bne	r8,r2,b87c <__divdf3+0x60c>
    b3d4:	e025883a 	mov	r18,fp
    b3d8:	9180004c 	andi	r6,r18,1
    b3dc:	0101ffc4 	movi	r4,2047
    b3e0:	000b883a 	mov	r5,zero
    b3e4:	0027883a 	mov	r19,zero
    b3e8:	2008953a 	slli	r4,r4,20
    b3ec:	30c03fcc 	andi	r3,r6,255
    b3f0:	04000434 	movhi	r16,16
    b3f4:	180697fa 	slli	r3,r3,31
    b3f8:	843fffc4 	addi	r16,r16,-1
    b3fc:	2c20703a 	and	r16,r5,r16
    b400:	8120b03a 	or	r16,r16,r4
    b404:	80c6b03a 	or	r3,r16,r3
    b408:	9805883a 	mov	r2,r19
    b40c:	dfc00d17 	ldw	ra,52(sp)
    b410:	df000c17 	ldw	fp,48(sp)
    b414:	ddc00b17 	ldw	r23,44(sp)
    b418:	dd800a17 	ldw	r22,40(sp)
    b41c:	dd400917 	ldw	r21,36(sp)
    b420:	dd000817 	ldw	r20,32(sp)
    b424:	dcc00717 	ldw	r19,28(sp)
    b428:	dc800617 	ldw	r18,24(sp)
    b42c:	dc400517 	ldw	r17,20(sp)
    b430:	dc000417 	ldw	r16,16(sp)
    b434:	dec00e04 	addi	sp,sp,56
    b438:	f800283a 	ret
    b43c:	8904b03a 	or	r2,r17,r4
    b440:	10003726 	beq	r2,zero,b520 <__divdf3+0x2b0>
    b444:	88011c26 	beq	r17,zero,b8b8 <__divdf3+0x648>
    b448:	8809883a 	mov	r4,r17
    b44c:	d9800315 	stw	r6,12(sp)
    b450:	d9c00115 	stw	r7,4(sp)
    b454:	000cf700 	call	cf70 <__clzsi2>
    b458:	d9800317 	ldw	r6,12(sp)
    b45c:	d9c00117 	ldw	r7,4(sp)
    b460:	1007883a 	mov	r3,r2
    b464:	01000a04 	movi	r4,40
    b468:	1cfffe04 	addi	r19,r3,-8
    b46c:	20c9c83a 	sub	r4,r4,r3
    b470:	8cca983a 	sll	r5,r17,r19
    b474:	9108d83a 	srl	r4,r18,r4
    b478:	94e6983a 	sll	r19,r18,r19
    b47c:	2162b03a 	or	r17,r4,r5
    b480:	053f0344 	movi	r20,-1011
    b484:	a0e9c83a 	sub	r20,r20,r3
    b488:	0025883a 	mov	r18,zero
    b48c:	0011883a 	mov	r8,zero
    b490:	003f9606 	br	b2ec <__alt_mem_Flash_flash_data+0xf400b2ec>
    b494:	8184b03a 	or	r2,r16,r6
    b498:	10001f1e 	bne	r2,zero,b518 <__divdf3+0x2a8>
    b49c:	0021883a 	mov	r16,zero
    b4a0:	002b883a 	mov	r21,zero
    b4a4:	01c00084 	movi	r7,2
    b4a8:	003fa206 	br	b334 <__alt_mem_Flash_flash_data+0xf400b334>
    b4ac:	8184b03a 	or	r2,r16,r6
    b4b0:	10001526 	beq	r2,zero,b508 <__divdf3+0x298>
    b4b4:	80010c26 	beq	r16,zero,b8e8 <__divdf3+0x678>
    b4b8:	8009883a 	mov	r4,r16
    b4bc:	d9800315 	stw	r6,12(sp)
    b4c0:	da000215 	stw	r8,8(sp)
    b4c4:	da400015 	stw	r9,0(sp)
    b4c8:	000cf700 	call	cf70 <__clzsi2>
    b4cc:	d9800317 	ldw	r6,12(sp)
    b4d0:	da000217 	ldw	r8,8(sp)
    b4d4:	da400017 	ldw	r9,0(sp)
    b4d8:	1007883a 	mov	r3,r2
    b4dc:	01000a04 	movi	r4,40
    b4e0:	1d7ffe04 	addi	r21,r3,-8
    b4e4:	20c9c83a 	sub	r4,r4,r3
    b4e8:	8560983a 	sll	r16,r16,r21
    b4ec:	3108d83a 	srl	r4,r6,r4
    b4f0:	356a983a 	sll	r21,r6,r21
    b4f4:	2420b03a 	or	r16,r4,r16
    b4f8:	017f0344 	movi	r5,-1011
    b4fc:	28cbc83a 	sub	r5,r5,r3
    b500:	000f883a 	mov	r7,zero
    b504:	003f8b06 	br	b334 <__alt_mem_Flash_flash_data+0xf400b334>
    b508:	0021883a 	mov	r16,zero
    b50c:	002b883a 	mov	r21,zero
    b510:	01c00044 	movi	r7,1
    b514:	003f8706 	br	b334 <__alt_mem_Flash_flash_data+0xf400b334>
    b518:	01c000c4 	movi	r7,3
    b51c:	003f8506 	br	b334 <__alt_mem_Flash_flash_data+0xf400b334>
    b520:	04800104 	movi	r18,4
    b524:	0023883a 	mov	r17,zero
    b528:	0027883a 	mov	r19,zero
    b52c:	02000044 	movi	r8,1
    b530:	003f6e06 	br	b2ec <__alt_mem_Flash_flash_data+0xf400b2ec>
    b534:	04800304 	movi	r18,12
    b538:	020000c4 	movi	r8,3
    b53c:	003f6b06 	br	b2ec <__alt_mem_Flash_flash_data+0xf400b2ec>
    b540:	01400434 	movhi	r5,16
    b544:	000d883a 	mov	r6,zero
    b548:	297fffc4 	addi	r5,r5,-1
    b54c:	04ffffc4 	movi	r19,-1
    b550:	0101ffc4 	movi	r4,2047
    b554:	003fa406 	br	b3e8 <__alt_mem_Flash_flash_data+0xf400b3e8>
    b558:	043f0084 	movi	r16,-1022
    b55c:	8521c83a 	sub	r16,r16,r20
    b560:	00800e04 	movi	r2,56
    b564:	1401200e 	bge	r2,r16,b9e8 <__divdf3+0x778>
    b568:	9180004c 	andi	r6,r18,1
    b56c:	0009883a 	mov	r4,zero
    b570:	000b883a 	mov	r5,zero
    b574:	0027883a 	mov	r19,zero
    b578:	003f9b06 	br	b3e8 <__alt_mem_Flash_flash_data+0xf400b3e8>
    b57c:	8880022c 	andhi	r2,r17,8
    b580:	1000c726 	beq	r2,zero,b8a0 <__divdf3+0x630>
    b584:	8080022c 	andhi	r2,r16,8
    b588:	1000c51e 	bne	r2,zero,b8a0 <__divdf3+0x630>
    b58c:	00800434 	movhi	r2,16
    b590:	81400234 	orhi	r5,r16,8
    b594:	10bfffc4 	addi	r2,r2,-1
    b598:	b80d883a 	mov	r6,r23
    b59c:	288a703a 	and	r5,r5,r2
    b5a0:	a827883a 	mov	r19,r21
    b5a4:	003fea06 	br	b550 <__alt_mem_Flash_flash_data+0xf400b550>
    b5a8:	8440ea36 	bltu	r16,r17,b954 <__divdf3+0x6e4>
    b5ac:	8c00e826 	beq	r17,r16,b950 <__divdf3+0x6e0>
    b5b0:	a53fffc4 	addi	r20,r20,-1
    b5b4:	882d883a 	mov	r22,r17
    b5b8:	000d883a 	mov	r6,zero
    b5bc:	a804d63a 	srli	r2,r21,24
    b5c0:	8020923a 	slli	r16,r16,8
    b5c4:	b009883a 	mov	r4,r22
    b5c8:	d9800315 	stw	r6,12(sp)
    b5cc:	1420b03a 	or	r16,r2,r16
    b5d0:	802ed43a 	srli	r23,r16,16
    b5d4:	873fffcc 	andi	fp,r16,65535
    b5d8:	a82a923a 	slli	r21,r21,8
    b5dc:	b80b883a 	mov	r5,r23
    b5e0:	000a9c40 	call	a9c4 <__udivsi3>
    b5e4:	b009883a 	mov	r4,r22
    b5e8:	b80b883a 	mov	r5,r23
    b5ec:	1023883a 	mov	r17,r2
    b5f0:	000a9cc0 	call	a9cc <__umodsi3>
    b5f4:	1004943a 	slli	r2,r2,16
    b5f8:	9808d43a 	srli	r4,r19,16
    b5fc:	8f2d383a 	mul	r22,r17,fp
    b600:	d9800317 	ldw	r6,12(sp)
    b604:	1106b03a 	or	r3,r2,r4
    b608:	1d80062e 	bgeu	r3,r22,b624 <__divdf3+0x3b4>
    b60c:	1c07883a 	add	r3,r3,r16
    b610:	88bfffc4 	addi	r2,r17,-1
    b614:	1c00dc36 	bltu	r3,r16,b988 <__divdf3+0x718>
    b618:	1d80db2e 	bgeu	r3,r22,b988 <__divdf3+0x718>
    b61c:	8c7fff84 	addi	r17,r17,-2
    b620:	1c07883a 	add	r3,r3,r16
    b624:	1dadc83a 	sub	r22,r3,r22
    b628:	b009883a 	mov	r4,r22
    b62c:	b80b883a 	mov	r5,r23
    b630:	d9800315 	stw	r6,12(sp)
    b634:	000a9c40 	call	a9c4 <__udivsi3>
    b638:	b009883a 	mov	r4,r22
    b63c:	b80b883a 	mov	r5,r23
    b640:	d8800015 	stw	r2,0(sp)
    b644:	000a9cc0 	call	a9cc <__umodsi3>
    b648:	da400017 	ldw	r9,0(sp)
    b64c:	1004943a 	slli	r2,r2,16
    b650:	9cffffcc 	andi	r19,r19,65535
    b654:	4f07383a 	mul	r3,r9,fp
    b658:	14c8b03a 	or	r4,r2,r19
    b65c:	d9800317 	ldw	r6,12(sp)
    b660:	20c0062e 	bgeu	r4,r3,b67c <__divdf3+0x40c>
    b664:	2409883a 	add	r4,r4,r16
    b668:	48bfffc4 	addi	r2,r9,-1
    b66c:	2400c436 	bltu	r4,r16,b980 <__divdf3+0x710>
    b670:	20c0c32e 	bgeu	r4,r3,b980 <__divdf3+0x710>
    b674:	4a7fff84 	addi	r9,r9,-2
    b678:	2409883a 	add	r4,r4,r16
    b67c:	8822943a 	slli	r17,r17,16
    b680:	a80ed43a 	srli	r7,r21,16
    b684:	aa3fffcc 	andi	r8,r21,65535
    b688:	4c62b03a 	or	r17,r9,r17
    b68c:	8816d43a 	srli	r11,r17,16
    b690:	897fffcc 	andi	r5,r17,65535
    b694:	2a15383a 	mul	r10,r5,r8
    b698:	5a19383a 	mul	r12,r11,r8
    b69c:	29cb383a 	mul	r5,r5,r7
    b6a0:	5012d43a 	srli	r9,r10,16
    b6a4:	20c5c83a 	sub	r2,r4,r3
    b6a8:	614b883a 	add	r5,r12,r5
    b6ac:	2a4b883a 	add	r5,r5,r9
    b6b0:	59c7383a 	mul	r3,r11,r7
    b6b4:	2b00022e 	bgeu	r5,r12,b6c0 <__divdf3+0x450>
    b6b8:	01000074 	movhi	r4,1
    b6bc:	1907883a 	add	r3,r3,r4
    b6c0:	2808d43a 	srli	r4,r5,16
    b6c4:	280a943a 	slli	r5,r5,16
    b6c8:	54ffffcc 	andi	r19,r10,65535
    b6cc:	1907883a 	add	r3,r3,r4
    b6d0:	2ccb883a 	add	r5,r5,r19
    b6d4:	10c09336 	bltu	r2,r3,b924 <__divdf3+0x6b4>
    b6d8:	10c0ad26 	beq	r2,r3,b990 <__divdf3+0x720>
    b6dc:	10c7c83a 	sub	r3,r2,r3
    b6e0:	3167c83a 	sub	r19,r6,r5
    b6e4:	34ed803a 	cmpltu	r22,r6,r19
    b6e8:	1dadc83a 	sub	r22,r3,r22
    b6ec:	b400b226 	beq	r22,r16,b9b8 <__divdf3+0x748>
    b6f0:	b009883a 	mov	r4,r22
    b6f4:	b80b883a 	mov	r5,r23
    b6f8:	d9c00115 	stw	r7,4(sp)
    b6fc:	da000215 	stw	r8,8(sp)
    b700:	000a9c40 	call	a9c4 <__udivsi3>
    b704:	b009883a 	mov	r4,r22
    b708:	b80b883a 	mov	r5,r23
    b70c:	d8800315 	stw	r2,12(sp)
    b710:	000a9cc0 	call	a9cc <__umodsi3>
    b714:	d9800317 	ldw	r6,12(sp)
    b718:	1004943a 	slli	r2,r2,16
    b71c:	9808d43a 	srli	r4,r19,16
    b720:	372d383a 	mul	r22,r6,fp
    b724:	d9c00117 	ldw	r7,4(sp)
    b728:	1106b03a 	or	r3,r2,r4
    b72c:	da000217 	ldw	r8,8(sp)
    b730:	1d80062e 	bgeu	r3,r22,b74c <__divdf3+0x4dc>
    b734:	1c07883a 	add	r3,r3,r16
    b738:	30bfffc4 	addi	r2,r6,-1
    b73c:	1c00a036 	bltu	r3,r16,b9c0 <__divdf3+0x750>
    b740:	1d809f2e 	bgeu	r3,r22,b9c0 <__divdf3+0x750>
    b744:	31bfff84 	addi	r6,r6,-2
    b748:	1c07883a 	add	r3,r3,r16
    b74c:	1dadc83a 	sub	r22,r3,r22
    b750:	b009883a 	mov	r4,r22
    b754:	b80b883a 	mov	r5,r23
    b758:	d9800315 	stw	r6,12(sp)
    b75c:	d9c00115 	stw	r7,4(sp)
    b760:	da000215 	stw	r8,8(sp)
    b764:	000a9c40 	call	a9c4 <__udivsi3>
    b768:	b009883a 	mov	r4,r22
    b76c:	b80b883a 	mov	r5,r23
    b770:	d8800015 	stw	r2,0(sp)
    b774:	000a9cc0 	call	a9cc <__umodsi3>
    b778:	da400017 	ldw	r9,0(sp)
    b77c:	1004943a 	slli	r2,r2,16
    b780:	993fffcc 	andi	r4,r19,65535
    b784:	4f39383a 	mul	fp,r9,fp
    b788:	1106b03a 	or	r3,r2,r4
    b78c:	d9800317 	ldw	r6,12(sp)
    b790:	d9c00117 	ldw	r7,4(sp)
    b794:	da000217 	ldw	r8,8(sp)
    b798:	1f00062e 	bgeu	r3,fp,b7b4 <__divdf3+0x544>
    b79c:	1c07883a 	add	r3,r3,r16
    b7a0:	48bfffc4 	addi	r2,r9,-1
    b7a4:	1c008836 	bltu	r3,r16,b9c8 <__divdf3+0x758>
    b7a8:	1f00872e 	bgeu	r3,fp,b9c8 <__divdf3+0x758>
    b7ac:	4a7fff84 	addi	r9,r9,-2
    b7b0:	1c07883a 	add	r3,r3,r16
    b7b4:	3008943a 	slli	r4,r6,16
    b7b8:	1f07c83a 	sub	r3,r3,fp
    b7bc:	4926b03a 	or	r19,r9,r4
    b7c0:	993fffcc 	andi	r4,r19,65535
    b7c4:	980cd43a 	srli	r6,r19,16
    b7c8:	220b383a 	mul	r5,r4,r8
    b7cc:	21c5383a 	mul	r2,r4,r7
    b7d0:	3211383a 	mul	r8,r6,r8
    b7d4:	2808d43a 	srli	r4,r5,16
    b7d8:	31cf383a 	mul	r7,r6,r7
    b7dc:	4085883a 	add	r2,r8,r2
    b7e0:	1105883a 	add	r2,r2,r4
    b7e4:	1200022e 	bgeu	r2,r8,b7f0 <__divdf3+0x580>
    b7e8:	01000074 	movhi	r4,1
    b7ec:	390f883a 	add	r7,r7,r4
    b7f0:	1008d43a 	srli	r4,r2,16
    b7f4:	1004943a 	slli	r2,r2,16
    b7f8:	297fffcc 	andi	r5,r5,65535
    b7fc:	390f883a 	add	r7,r7,r4
    b800:	1145883a 	add	r2,r2,r5
    b804:	19c06536 	bltu	r3,r7,b99c <__divdf3+0x72c>
    b808:	19c09f26 	beq	r3,r7,ba88 <__divdf3+0x818>
    b80c:	9cc00054 	ori	r19,r19,1
    b810:	a100ffc4 	addi	r4,r20,1023
    b814:	013f500e 	bge	zero,r4,b558 <__alt_mem_Flash_flash_data+0xf400b558>
    b818:	988001cc 	andi	r2,r19,7
    b81c:	10000726 	beq	r2,zero,b83c <__divdf3+0x5cc>
    b820:	98c003cc 	andi	r3,r19,15
    b824:	00800104 	movi	r2,4
    b828:	18800426 	beq	r3,r2,b83c <__divdf3+0x5cc>
    b82c:	9885883a 	add	r2,r19,r2
    b830:	14e1803a 	cmpltu	r16,r2,r19
    b834:	8c23883a 	add	r17,r17,r16
    b838:	1027883a 	mov	r19,r2
    b83c:	8880402c 	andhi	r2,r17,256
    b840:	10000426 	beq	r2,zero,b854 <__divdf3+0x5e4>
    b844:	00bfc034 	movhi	r2,65280
    b848:	10bfffc4 	addi	r2,r2,-1
    b84c:	a1010004 	addi	r4,r20,1024
    b850:	88a2703a 	and	r17,r17,r2
    b854:	0081ff84 	movi	r2,2046
    b858:	113edf16 	blt	r2,r4,b3d8 <__alt_mem_Flash_flash_data+0xf400b3d8>
    b85c:	9826d0fa 	srli	r19,r19,3
    b860:	8804977a 	slli	r2,r17,29
    b864:	8820927a 	slli	r16,r17,9
    b868:	2101ffcc 	andi	r4,r4,2047
    b86c:	14e6b03a 	or	r19,r2,r19
    b870:	800ad33a 	srli	r5,r16,12
    b874:	9180004c 	andi	r6,r18,1
    b878:	003edb06 	br	b3e8 <__alt_mem_Flash_flash_data+0xf400b3e8>
    b87c:	008000c4 	movi	r2,3
    b880:	4080a826 	beq	r8,r2,bb24 <__divdf3+0x8b4>
    b884:	00800044 	movi	r2,1
    b888:	4080551e 	bne	r8,r2,b9e0 <__divdf3+0x770>
    b88c:	e00d883a 	mov	r6,fp
    b890:	0009883a 	mov	r4,zero
    b894:	000b883a 	mov	r5,zero
    b898:	0027883a 	mov	r19,zero
    b89c:	003ed206 	br	b3e8 <__alt_mem_Flash_flash_data+0xf400b3e8>
    b8a0:	00800434 	movhi	r2,16
    b8a4:	89400234 	orhi	r5,r17,8
    b8a8:	10bfffc4 	addi	r2,r2,-1
    b8ac:	b00d883a 	mov	r6,r22
    b8b0:	288a703a 	and	r5,r5,r2
    b8b4:	003f2606 	br	b550 <__alt_mem_Flash_flash_data+0xf400b550>
    b8b8:	d9800315 	stw	r6,12(sp)
    b8bc:	d9c00115 	stw	r7,4(sp)
    b8c0:	000cf700 	call	cf70 <__clzsi2>
    b8c4:	10c00804 	addi	r3,r2,32
    b8c8:	010009c4 	movi	r4,39
    b8cc:	d9800317 	ldw	r6,12(sp)
    b8d0:	d9c00117 	ldw	r7,4(sp)
    b8d4:	20fee30e 	bge	r4,r3,b464 <__alt_mem_Flash_flash_data+0xf400b464>
    b8d8:	117ffe04 	addi	r5,r2,-8
    b8dc:	9162983a 	sll	r17,r18,r5
    b8e0:	0027883a 	mov	r19,zero
    b8e4:	003ee606 	br	b480 <__alt_mem_Flash_flash_data+0xf400b480>
    b8e8:	3009883a 	mov	r4,r6
    b8ec:	d9800315 	stw	r6,12(sp)
    b8f0:	da000215 	stw	r8,8(sp)
    b8f4:	da400015 	stw	r9,0(sp)
    b8f8:	000cf700 	call	cf70 <__clzsi2>
    b8fc:	10c00804 	addi	r3,r2,32
    b900:	010009c4 	movi	r4,39
    b904:	d9800317 	ldw	r6,12(sp)
    b908:	da000217 	ldw	r8,8(sp)
    b90c:	da400017 	ldw	r9,0(sp)
    b910:	20fef20e 	bge	r4,r3,b4dc <__alt_mem_Flash_flash_data+0xf400b4dc>
    b914:	10bffe04 	addi	r2,r2,-8
    b918:	a8a0983a 	sll	r16,r21,r2
    b91c:	002b883a 	mov	r21,zero
    b920:	003ef506 	br	b4f8 <__alt_mem_Flash_flash_data+0xf400b4f8>
    b924:	354d883a 	add	r6,r6,r21
    b928:	3549803a 	cmpltu	r4,r6,r21
    b92c:	2409883a 	add	r4,r4,r16
    b930:	2089883a 	add	r4,r4,r2
    b934:	88bfffc4 	addi	r2,r17,-1
    b938:	81000c2e 	bgeu	r16,r4,b96c <__divdf3+0x6fc>
    b93c:	20c04436 	bltu	r4,r3,ba50 <__divdf3+0x7e0>
    b940:	19006f26 	beq	r3,r4,bb00 <__divdf3+0x890>
    b944:	20c7c83a 	sub	r3,r4,r3
    b948:	1023883a 	mov	r17,r2
    b94c:	003f6406 	br	b6e0 <__alt_mem_Flash_flash_data+0xf400b6e0>
    b950:	9d7f1736 	bltu	r19,r21,b5b0 <__alt_mem_Flash_flash_data+0xf400b5b0>
    b954:	9806d07a 	srli	r3,r19,1
    b958:	880497fa 	slli	r2,r17,31
    b95c:	980c97fa 	slli	r6,r19,31
    b960:	882cd07a 	srli	r22,r17,1
    b964:	18a6b03a 	or	r19,r3,r2
    b968:	003f1406 	br	b5bc <__alt_mem_Flash_flash_data+0xf400b5bc>
    b96c:	243ff51e 	bne	r4,r16,b944 <__alt_mem_Flash_flash_data+0xf400b944>
    b970:	357ff22e 	bgeu	r6,r21,b93c <__alt_mem_Flash_flash_data+0xf400b93c>
    b974:	80c7c83a 	sub	r3,r16,r3
    b978:	1023883a 	mov	r17,r2
    b97c:	003f5806 	br	b6e0 <__alt_mem_Flash_flash_data+0xf400b6e0>
    b980:	1013883a 	mov	r9,r2
    b984:	003f3d06 	br	b67c <__alt_mem_Flash_flash_data+0xf400b67c>
    b988:	1023883a 	mov	r17,r2
    b98c:	003f2506 	br	b624 <__alt_mem_Flash_flash_data+0xf400b624>
    b990:	317fe436 	bltu	r6,r5,b924 <__alt_mem_Flash_flash_data+0xf400b924>
    b994:	0007883a 	mov	r3,zero
    b998:	003f5106 	br	b6e0 <__alt_mem_Flash_flash_data+0xf400b6e0>
    b99c:	1c07883a 	add	r3,r3,r16
    b9a0:	993fffc4 	addi	r4,r19,-1
    b9a4:	1c000a2e 	bgeu	r3,r16,b9d0 <__divdf3+0x760>
    b9a8:	2027883a 	mov	r19,r4
    b9ac:	19ff971e 	bne	r3,r7,b80c <__alt_mem_Flash_flash_data+0xf400b80c>
    b9b0:	a8bf961e 	bne	r21,r2,b80c <__alt_mem_Flash_flash_data+0xf400b80c>
    b9b4:	003f9606 	br	b810 <__alt_mem_Flash_flash_data+0xf400b810>
    b9b8:	04ffffc4 	movi	r19,-1
    b9bc:	003f9406 	br	b810 <__alt_mem_Flash_flash_data+0xf400b810>
    b9c0:	100d883a 	mov	r6,r2
    b9c4:	003f6106 	br	b74c <__alt_mem_Flash_flash_data+0xf400b74c>
    b9c8:	1013883a 	mov	r9,r2
    b9cc:	003f7906 	br	b7b4 <__alt_mem_Flash_flash_data+0xf400b7b4>
    b9d0:	19c02636 	bltu	r3,r7,ba6c <__divdf3+0x7fc>
    b9d4:	38c04d26 	beq	r7,r3,bb0c <__divdf3+0x89c>
    b9d8:	2027883a 	mov	r19,r4
    b9dc:	003f8b06 	br	b80c <__alt_mem_Flash_flash_data+0xf400b80c>
    b9e0:	e025883a 	mov	r18,fp
    b9e4:	003f8a06 	br	b810 <__alt_mem_Flash_flash_data+0xf400b810>
    b9e8:	008007c4 	movi	r2,31
    b9ec:	14002a16 	blt	r2,r16,ba98 <__divdf3+0x828>
    b9f0:	a5010784 	addi	r20,r20,1054
    b9f4:	8d04983a 	sll	r2,r17,r20
    b9f8:	9c06d83a 	srl	r3,r19,r16
    b9fc:	9d28983a 	sll	r20,r19,r20
    ba00:	8c20d83a 	srl	r16,r17,r16
    ba04:	1886b03a 	or	r3,r3,r2
    ba08:	a004c03a 	cmpne	r2,r20,zero
    ba0c:	1884b03a 	or	r2,r3,r2
    ba10:	10c001cc 	andi	r3,r2,7
    ba14:	18000726 	beq	r3,zero,ba34 <__divdf3+0x7c4>
    ba18:	110003cc 	andi	r4,r2,15
    ba1c:	00c00104 	movi	r3,4
    ba20:	20c00426 	beq	r4,r3,ba34 <__divdf3+0x7c4>
    ba24:	10c00104 	addi	r3,r2,4
    ba28:	1885803a 	cmpltu	r2,r3,r2
    ba2c:	80a1883a 	add	r16,r16,r2
    ba30:	1805883a 	mov	r2,r3
    ba34:	80c0202c 	andhi	r3,r16,128
    ba38:	18002d26 	beq	r3,zero,baf0 <__divdf3+0x880>
    ba3c:	9180004c 	andi	r6,r18,1
    ba40:	01000044 	movi	r4,1
    ba44:	000b883a 	mov	r5,zero
    ba48:	0027883a 	mov	r19,zero
    ba4c:	003e6606 	br	b3e8 <__alt_mem_Flash_flash_data+0xf400b3e8>
    ba50:	354d883a 	add	r6,r6,r21
    ba54:	356d803a 	cmpltu	r22,r6,r21
    ba58:	b42d883a 	add	r22,r22,r16
    ba5c:	b12d883a 	add	r22,r22,r4
    ba60:	8c7fff84 	addi	r17,r17,-2
    ba64:	b0c7c83a 	sub	r3,r22,r3
    ba68:	003f1d06 	br	b6e0 <__alt_mem_Flash_flash_data+0xf400b6e0>
    ba6c:	ad4b883a 	add	r5,r21,r21
    ba70:	2d6b803a 	cmpltu	r21,r5,r21
    ba74:	ac2b883a 	add	r21,r21,r16
    ba78:	1d47883a 	add	r3,r3,r21
    ba7c:	993fff84 	addi	r4,r19,-2
    ba80:	282b883a 	mov	r21,r5
    ba84:	003fc806 	br	b9a8 <__alt_mem_Flash_flash_data+0xf400b9a8>
    ba88:	103fc41e 	bne	r2,zero,b99c <__alt_mem_Flash_flash_data+0xf400b99c>
    ba8c:	002b883a 	mov	r21,zero
    ba90:	a8bf5e1e 	bne	r21,r2,b80c <__alt_mem_Flash_flash_data+0xf400b80c>
    ba94:	003f5e06 	br	b810 <__alt_mem_Flash_flash_data+0xf400b810>
    ba98:	00bef884 	movi	r2,-1054
    ba9c:	1505c83a 	sub	r2,r2,r20
    baa0:	00c00804 	movi	r3,32
    baa4:	8884d83a 	srl	r2,r17,r2
    baa8:	80c01c26 	beq	r16,r3,bb1c <__divdf3+0x8ac>
    baac:	a0c10f84 	addi	r3,r20,1086
    bab0:	88c6983a 	sll	r3,r17,r3
    bab4:	1cc6b03a 	or	r3,r3,r19
    bab8:	1806c03a 	cmpne	r3,r3,zero
    babc:	1884b03a 	or	r2,r3,r2
    bac0:	140001cc 	andi	r16,r2,7
    bac4:	8000061e 	bne	r16,zero,bae0 <__divdf3+0x870>
    bac8:	000b883a 	mov	r5,zero
    bacc:	1004d0fa 	srli	r2,r2,3
    bad0:	9180004c 	andi	r6,r18,1
    bad4:	0009883a 	mov	r4,zero
    bad8:	1426b03a 	or	r19,r2,r16
    badc:	003e4206 	br	b3e8 <__alt_mem_Flash_flash_data+0xf400b3e8>
    bae0:	110003cc 	andi	r4,r2,15
    bae4:	00c00104 	movi	r3,4
    bae8:	0021883a 	mov	r16,zero
    baec:	20ffcd1e 	bne	r4,r3,ba24 <__alt_mem_Flash_flash_data+0xf400ba24>
    baf0:	800a927a 	slli	r5,r16,9
    baf4:	8020977a 	slli	r16,r16,29
    baf8:	280ad33a 	srli	r5,r5,12
    bafc:	003ff306 	br	bacc <__alt_mem_Flash_flash_data+0xf400bacc>
    bb00:	317fd336 	bltu	r6,r5,ba50 <__alt_mem_Flash_flash_data+0xf400ba50>
    bb04:	1023883a 	mov	r17,r2
    bb08:	003fa206 	br	b994 <__alt_mem_Flash_flash_data+0xf400b994>
    bb0c:	a8bfd736 	bltu	r21,r2,ba6c <__alt_mem_Flash_flash_data+0xf400ba6c>
    bb10:	2027883a 	mov	r19,r4
    bb14:	a8bf3d1e 	bne	r21,r2,b80c <__alt_mem_Flash_flash_data+0xf400b80c>
    bb18:	003f3d06 	br	b810 <__alt_mem_Flash_flash_data+0xf400b810>
    bb1c:	0007883a 	mov	r3,zero
    bb20:	003fe406 	br	bab4 <__alt_mem_Flash_flash_data+0xf400bab4>
    bb24:	00800434 	movhi	r2,16
    bb28:	89400234 	orhi	r5,r17,8
    bb2c:	10bfffc4 	addi	r2,r2,-1
    bb30:	e00d883a 	mov	r6,fp
    bb34:	288a703a 	and	r5,r5,r2
    bb38:	003e8506 	br	b550 <__alt_mem_Flash_flash_data+0xf400b550>

0000bb3c <__eqdf2>:
    bb3c:	2804d53a 	srli	r2,r5,20
    bb40:	3806d53a 	srli	r3,r7,20
    bb44:	02000434 	movhi	r8,16
    bb48:	423fffc4 	addi	r8,r8,-1
    bb4c:	1081ffcc 	andi	r2,r2,2047
    bb50:	0241ffc4 	movi	r9,2047
    bb54:	2a14703a 	and	r10,r5,r8
    bb58:	18c1ffcc 	andi	r3,r3,2047
    bb5c:	3a10703a 	and	r8,r7,r8
    bb60:	280ad7fa 	srli	r5,r5,31
    bb64:	380ed7fa 	srli	r7,r7,31
    bb68:	12400f26 	beq	r2,r9,bba8 <__eqdf2+0x6c>
    bb6c:	0241ffc4 	movi	r9,2047
    bb70:	1a400326 	beq	r3,r9,bb80 <__eqdf2+0x44>
    bb74:	10c00526 	beq	r2,r3,bb8c <__eqdf2+0x50>
    bb78:	00800044 	movi	r2,1
    bb7c:	f800283a 	ret
    bb80:	4192b03a 	or	r9,r8,r6
    bb84:	483ffc1e 	bne	r9,zero,bb78 <__alt_mem_Flash_flash_data+0xf400bb78>
    bb88:	10fffb1e 	bne	r2,r3,bb78 <__alt_mem_Flash_flash_data+0xf400bb78>
    bb8c:	523ffa1e 	bne	r10,r8,bb78 <__alt_mem_Flash_flash_data+0xf400bb78>
    bb90:	21bff91e 	bne	r4,r6,bb78 <__alt_mem_Flash_flash_data+0xf400bb78>
    bb94:	29c00826 	beq	r5,r7,bbb8 <__eqdf2+0x7c>
    bb98:	103ff71e 	bne	r2,zero,bb78 <__alt_mem_Flash_flash_data+0xf400bb78>
    bb9c:	5104b03a 	or	r2,r10,r4
    bba0:	1004c03a 	cmpne	r2,r2,zero
    bba4:	f800283a 	ret
    bba8:	5112b03a 	or	r9,r10,r4
    bbac:	483fef26 	beq	r9,zero,bb6c <__alt_mem_Flash_flash_data+0xf400bb6c>
    bbb0:	00800044 	movi	r2,1
    bbb4:	f800283a 	ret
    bbb8:	0005883a 	mov	r2,zero
    bbbc:	f800283a 	ret

0000bbc0 <__gedf2>:
    bbc0:	2804d53a 	srli	r2,r5,20
    bbc4:	3806d53a 	srli	r3,r7,20
    bbc8:	02000434 	movhi	r8,16
    bbcc:	423fffc4 	addi	r8,r8,-1
    bbd0:	0241ffc4 	movi	r9,2047
    bbd4:	1081ffcc 	andi	r2,r2,2047
    bbd8:	2a14703a 	and	r10,r5,r8
    bbdc:	1a46703a 	and	r3,r3,r9
    bbe0:	3a10703a 	and	r8,r7,r8
    bbe4:	280ad7fa 	srli	r5,r5,31
    bbe8:	380ed7fa 	srli	r7,r7,31
    bbec:	12400b26 	beq	r2,r9,bc1c <__gedf2+0x5c>
    bbf0:	1a401626 	beq	r3,r9,bc4c <__gedf2+0x8c>
    bbf4:	10000c1e 	bne	r2,zero,bc28 <__gedf2+0x68>
    bbf8:	5112b03a 	or	r9,r10,r4
    bbfc:	4813003a 	cmpeq	r9,r9,zero
    bc00:	4817883a 	mov	r11,r9
    bc04:	18000c1e 	bne	r3,zero,bc38 <__gedf2+0x78>
    bc08:	4198b03a 	or	r12,r8,r6
    bc0c:	60000a1e 	bne	r12,zero,bc38 <__gedf2+0x78>
    bc10:	48001326 	beq	r9,zero,bc60 <__gedf2+0xa0>
    bc14:	0005883a 	mov	r2,zero
    bc18:	f800283a 	ret
    bc1c:	5112b03a 	or	r9,r10,r4
    bc20:	4800191e 	bne	r9,zero,bc88 <__gedf2+0xc8>
    bc24:	18800926 	beq	r3,r2,bc4c <__gedf2+0x8c>
    bc28:	18000b1e 	bne	r3,zero,bc58 <__gedf2+0x98>
    bc2c:	4192b03a 	or	r9,r8,r6
    bc30:	0017883a 	mov	r11,zero
    bc34:	48000a26 	beq	r9,zero,bc60 <__gedf2+0xa0>
    bc38:	39c03fcc 	andi	r7,r7,255
    bc3c:	58000726 	beq	r11,zero,bc5c <__gedf2+0x9c>
    bc40:	3800081e 	bne	r7,zero,bc64 <__gedf2+0xa4>
    bc44:	00bfffc4 	movi	r2,-1
    bc48:	f800283a 	ret
    bc4c:	4192b03a 	or	r9,r8,r6
    bc50:	48000d1e 	bne	r9,zero,bc88 <__gedf2+0xc8>
    bc54:	103fe826 	beq	r2,zero,bbf8 <__alt_mem_Flash_flash_data+0xf400bbf8>
    bc58:	39c03fcc 	andi	r7,r7,255
    bc5c:	29c00326 	beq	r5,r7,bc6c <__gedf2+0xac>
    bc60:	283ff81e 	bne	r5,zero,bc44 <__alt_mem_Flash_flash_data+0xf400bc44>
    bc64:	00800044 	movi	r2,1
    bc68:	f800283a 	ret
    bc6c:	18bffc16 	blt	r3,r2,bc60 <__alt_mem_Flash_flash_data+0xf400bc60>
    bc70:	10c00316 	blt	r2,r3,bc80 <__gedf2+0xc0>
    bc74:	42bffa36 	bltu	r8,r10,bc60 <__alt_mem_Flash_flash_data+0xf400bc60>
    bc78:	52000526 	beq	r10,r8,bc90 <__gedf2+0xd0>
    bc7c:	523fe52e 	bgeu	r10,r8,bc14 <__alt_mem_Flash_flash_data+0xf400bc14>
    bc80:	283ff026 	beq	r5,zero,bc44 <__alt_mem_Flash_flash_data+0xf400bc44>
    bc84:	003ff706 	br	bc64 <__alt_mem_Flash_flash_data+0xf400bc64>
    bc88:	00bfff84 	movi	r2,-2
    bc8c:	f800283a 	ret
    bc90:	313ff336 	bltu	r6,r4,bc60 <__alt_mem_Flash_flash_data+0xf400bc60>
    bc94:	21bfdf2e 	bgeu	r4,r6,bc14 <__alt_mem_Flash_flash_data+0xf400bc14>
    bc98:	283fea26 	beq	r5,zero,bc44 <__alt_mem_Flash_flash_data+0xf400bc44>
    bc9c:	003ff106 	br	bc64 <__alt_mem_Flash_flash_data+0xf400bc64>

0000bca0 <__ledf2>:
    bca0:	2804d53a 	srli	r2,r5,20
    bca4:	3810d53a 	srli	r8,r7,20
    bca8:	00c00434 	movhi	r3,16
    bcac:	18ffffc4 	addi	r3,r3,-1
    bcb0:	0241ffc4 	movi	r9,2047
    bcb4:	1081ffcc 	andi	r2,r2,2047
    bcb8:	28d4703a 	and	r10,r5,r3
    bcbc:	4250703a 	and	r8,r8,r9
    bcc0:	38c6703a 	and	r3,r7,r3
    bcc4:	280ad7fa 	srli	r5,r5,31
    bcc8:	380ed7fa 	srli	r7,r7,31
    bccc:	12400b26 	beq	r2,r9,bcfc <__ledf2+0x5c>
    bcd0:	42401926 	beq	r8,r9,bd38 <__ledf2+0x98>
    bcd4:	10000c1e 	bne	r2,zero,bd08 <__ledf2+0x68>
    bcd8:	5112b03a 	or	r9,r10,r4
    bcdc:	4813003a 	cmpeq	r9,r9,zero
    bce0:	4817883a 	mov	r11,r9
    bce4:	40000f26 	beq	r8,zero,bd24 <__ledf2+0x84>
    bce8:	39c03fcc 	andi	r7,r7,255
    bcec:	58001826 	beq	r11,zero,bd50 <__ledf2+0xb0>
    bcf0:	38000a1e 	bne	r7,zero,bd1c <__ledf2+0x7c>
    bcf4:	00bfffc4 	movi	r2,-1
    bcf8:	f800283a 	ret
    bcfc:	5112b03a 	or	r9,r10,r4
    bd00:	48000f1e 	bne	r9,zero,bd40 <__ledf2+0xa0>
    bd04:	40800c26 	beq	r8,r2,bd38 <__ledf2+0x98>
    bd08:	4000101e 	bne	r8,zero,bd4c <__ledf2+0xac>
    bd0c:	1992b03a 	or	r9,r3,r6
    bd10:	0017883a 	mov	r11,zero
    bd14:	483ff41e 	bne	r9,zero,bce8 <__alt_mem_Flash_flash_data+0xf400bce8>
    bd18:	283ff61e 	bne	r5,zero,bcf4 <__alt_mem_Flash_flash_data+0xf400bcf4>
    bd1c:	00800044 	movi	r2,1
    bd20:	f800283a 	ret
    bd24:	1998b03a 	or	r12,r3,r6
    bd28:	603fef1e 	bne	r12,zero,bce8 <__alt_mem_Flash_flash_data+0xf400bce8>
    bd2c:	483ffa26 	beq	r9,zero,bd18 <__alt_mem_Flash_flash_data+0xf400bd18>
    bd30:	0005883a 	mov	r2,zero
    bd34:	f800283a 	ret
    bd38:	1992b03a 	or	r9,r3,r6
    bd3c:	48000226 	beq	r9,zero,bd48 <__ledf2+0xa8>
    bd40:	00800084 	movi	r2,2
    bd44:	f800283a 	ret
    bd48:	103fe326 	beq	r2,zero,bcd8 <__alt_mem_Flash_flash_data+0xf400bcd8>
    bd4c:	39c03fcc 	andi	r7,r7,255
    bd50:	29fff11e 	bne	r5,r7,bd18 <__alt_mem_Flash_flash_data+0xf400bd18>
    bd54:	40bff016 	blt	r8,r2,bd18 <__alt_mem_Flash_flash_data+0xf400bd18>
    bd58:	12000316 	blt	r2,r8,bd68 <__ledf2+0xc8>
    bd5c:	1abfee36 	bltu	r3,r10,bd18 <__alt_mem_Flash_flash_data+0xf400bd18>
    bd60:	50c00326 	beq	r10,r3,bd70 <__ledf2+0xd0>
    bd64:	50fff22e 	bgeu	r10,r3,bd30 <__alt_mem_Flash_flash_data+0xf400bd30>
    bd68:	283fe226 	beq	r5,zero,bcf4 <__alt_mem_Flash_flash_data+0xf400bcf4>
    bd6c:	003feb06 	br	bd1c <__alt_mem_Flash_flash_data+0xf400bd1c>
    bd70:	313fe936 	bltu	r6,r4,bd18 <__alt_mem_Flash_flash_data+0xf400bd18>
    bd74:	21bfee2e 	bgeu	r4,r6,bd30 <__alt_mem_Flash_flash_data+0xf400bd30>
    bd78:	283fde26 	beq	r5,zero,bcf4 <__alt_mem_Flash_flash_data+0xf400bcf4>
    bd7c:	003fe706 	br	bd1c <__alt_mem_Flash_flash_data+0xf400bd1c>

0000bd80 <__muldf3>:
    bd80:	defff204 	addi	sp,sp,-56
    bd84:	2804d53a 	srli	r2,r5,20
    bd88:	dd800a15 	stw	r22,40(sp)
    bd8c:	282cd7fa 	srli	r22,r5,31
    bd90:	dc000415 	stw	r16,16(sp)
    bd94:	04000434 	movhi	r16,16
    bd98:	df000c15 	stw	fp,48(sp)
    bd9c:	dd000815 	stw	r20,32(sp)
    bda0:	dcc00715 	stw	r19,28(sp)
    bda4:	dc800615 	stw	r18,24(sp)
    bda8:	dc400515 	stw	r17,20(sp)
    bdac:	843fffc4 	addi	r16,r16,-1
    bdb0:	dfc00d15 	stw	ra,52(sp)
    bdb4:	ddc00b15 	stw	r23,44(sp)
    bdb8:	dd400915 	stw	r21,36(sp)
    bdbc:	1501ffcc 	andi	r20,r2,2047
    bdc0:	2023883a 	mov	r17,r4
    bdc4:	2025883a 	mov	r18,r4
    bdc8:	2c20703a 	and	r16,r5,r16
    bdcc:	b027883a 	mov	r19,r22
    bdd0:	b7003fcc 	andi	fp,r22,255
    bdd4:	a0005926 	beq	r20,zero,bf3c <__muldf3+0x1bc>
    bdd8:	0081ffc4 	movi	r2,2047
    bddc:	a0803426 	beq	r20,r2,beb0 <__muldf3+0x130>
    bde0:	84000434 	orhi	r16,r16,16
    bde4:	2004d77a 	srli	r2,r4,29
    bde8:	802090fa 	slli	r16,r16,3
    bdec:	202490fa 	slli	r18,r4,3
    bdf0:	a53f0044 	addi	r20,r20,-1023
    bdf4:	80a0b03a 	or	r16,r16,r2
    bdf8:	002b883a 	mov	r21,zero
    bdfc:	0015883a 	mov	r10,zero
    be00:	3812d53a 	srli	r9,r7,20
    be04:	3806d7fa 	srli	r3,r7,31
    be08:	02000434 	movhi	r8,16
    be0c:	423fffc4 	addi	r8,r8,-1
    be10:	4941ffcc 	andi	r5,r9,2047
    be14:	302f883a 	mov	r23,r6
    be18:	3a22703a 	and	r17,r7,r8
    be1c:	1ac03fcc 	andi	r11,r3,255
    be20:	28006226 	beq	r5,zero,bfac <__muldf3+0x22c>
    be24:	0081ffc4 	movi	r2,2047
    be28:	28805a26 	beq	r5,r2,bf94 <__muldf3+0x214>
    be2c:	8a000434 	orhi	r8,r17,16
    be30:	3004d77a 	srli	r2,r6,29
    be34:	401090fa 	slli	r8,r8,3
    be38:	302e90fa 	slli	r23,r6,3
    be3c:	297f0044 	addi	r5,r5,-1023
    be40:	40a2b03a 	or	r17,r8,r2
    be44:	0013883a 	mov	r9,zero
    be48:	4d4cb03a 	or	r6,r9,r21
    be4c:	300c90ba 	slli	r6,r6,2
    be50:	02000074 	movhi	r8,1
    be54:	422f9c04 	addi	r8,r8,-16784
    be58:	320d883a 	add	r6,r6,r8
    be5c:	31800017 	ldw	r6,0(r6)
    be60:	a14b883a 	add	r5,r20,r5
    be64:	1dacf03a 	xor	r22,r3,r22
    be68:	2b000044 	addi	r12,r5,1
    be6c:	3000683a 	jmp	r6
    be70:	0000c0ac 	andhi	zero,zero,770
    be74:	0000c098 	cmpnei	zero,zero,770
    be78:	0000c098 	cmpnei	zero,zero,770
    be7c:	0000c084 	movi	zero,770
    be80:	0000becc 	andi	zero,zero,763
    be84:	0000becc 	andi	zero,zero,763
    be88:	0000c06c 	andhi	zero,zero,769
    be8c:	0000c084 	movi	zero,770
    be90:	0000becc 	andi	zero,zero,763
    be94:	0000c06c 	andhi	zero,zero,769
    be98:	0000becc 	andi	zero,zero,763
    be9c:	0000c084 	movi	zero,770
    bea0:	0000bed0 	cmplti	zero,zero,763
    bea4:	0000bed0 	cmplti	zero,zero,763
    bea8:	0000bed0 	cmplti	zero,zero,763
    beac:	0000c2a8 	cmpgeui	zero,zero,778
    beb0:	8104b03a 	or	r2,r16,r4
    beb4:	10006a1e 	bne	r2,zero,c060 <__muldf3+0x2e0>
    beb8:	05400204 	movi	r21,8
    bebc:	0021883a 	mov	r16,zero
    bec0:	0025883a 	mov	r18,zero
    bec4:	02800084 	movi	r10,2
    bec8:	003fcd06 	br	be00 <__alt_mem_Flash_flash_data+0xf400be00>
    becc:	b039883a 	mov	fp,r22
    bed0:	00800084 	movi	r2,2
    bed4:	50804e1e 	bne	r10,r2,c010 <__muldf3+0x290>
    bed8:	e4c0004c 	andi	r19,fp,1
    bedc:	0101ffc4 	movi	r4,2047
    bee0:	0021883a 	mov	r16,zero
    bee4:	0025883a 	mov	r18,zero
    bee8:	2008953a 	slli	r4,r4,20
    beec:	98c03fcc 	andi	r3,r19,255
    bef0:	01400434 	movhi	r5,16
    bef4:	297fffc4 	addi	r5,r5,-1
    bef8:	180697fa 	slli	r3,r3,31
    befc:	8160703a 	and	r16,r16,r5
    bf00:	8120b03a 	or	r16,r16,r4
    bf04:	80c6b03a 	or	r3,r16,r3
    bf08:	9005883a 	mov	r2,r18
    bf0c:	dfc00d17 	ldw	ra,52(sp)
    bf10:	df000c17 	ldw	fp,48(sp)
    bf14:	ddc00b17 	ldw	r23,44(sp)
    bf18:	dd800a17 	ldw	r22,40(sp)
    bf1c:	dd400917 	ldw	r21,36(sp)
    bf20:	dd000817 	ldw	r20,32(sp)
    bf24:	dcc00717 	ldw	r19,28(sp)
    bf28:	dc800617 	ldw	r18,24(sp)
    bf2c:	dc400517 	ldw	r17,20(sp)
    bf30:	dc000417 	ldw	r16,16(sp)
    bf34:	dec00e04 	addi	sp,sp,56
    bf38:	f800283a 	ret
    bf3c:	8104b03a 	or	r2,r16,r4
    bf40:	10004226 	beq	r2,zero,c04c <__muldf3+0x2cc>
    bf44:	8000f926 	beq	r16,zero,c32c <__muldf3+0x5ac>
    bf48:	8009883a 	mov	r4,r16
    bf4c:	d9800315 	stw	r6,12(sp)
    bf50:	d9c00015 	stw	r7,0(sp)
    bf54:	000cf700 	call	cf70 <__clzsi2>
    bf58:	d9800317 	ldw	r6,12(sp)
    bf5c:	d9c00017 	ldw	r7,0(sp)
    bf60:	1007883a 	mov	r3,r2
    bf64:	01000a04 	movi	r4,40
    bf68:	18bffe04 	addi	r2,r3,-8
    bf6c:	20c9c83a 	sub	r4,r4,r3
    bf70:	80a0983a 	sll	r16,r16,r2
    bf74:	8908d83a 	srl	r4,r17,r4
    bf78:	88a4983a 	sll	r18,r17,r2
    bf7c:	2420b03a 	or	r16,r4,r16
    bf80:	017f0344 	movi	r5,-1011
    bf84:	28e9c83a 	sub	r20,r5,r3
    bf88:	002b883a 	mov	r21,zero
    bf8c:	0015883a 	mov	r10,zero
    bf90:	003f9b06 	br	be00 <__alt_mem_Flash_flash_data+0xf400be00>
    bf94:	8984b03a 	or	r2,r17,r6
    bf98:	10002a1e 	bne	r2,zero,c044 <__muldf3+0x2c4>
    bf9c:	0023883a 	mov	r17,zero
    bfa0:	002f883a 	mov	r23,zero
    bfa4:	02400084 	movi	r9,2
    bfa8:	003fa706 	br	be48 <__alt_mem_Flash_flash_data+0xf400be48>
    bfac:	8984b03a 	or	r2,r17,r6
    bfb0:	10002026 	beq	r2,zero,c034 <__muldf3+0x2b4>
    bfb4:	8800cc26 	beq	r17,zero,c2e8 <__muldf3+0x568>
    bfb8:	8809883a 	mov	r4,r17
    bfbc:	d8c00215 	stw	r3,8(sp)
    bfc0:	d9800315 	stw	r6,12(sp)
    bfc4:	da800015 	stw	r10,0(sp)
    bfc8:	dac00115 	stw	r11,4(sp)
    bfcc:	000cf700 	call	cf70 <__clzsi2>
    bfd0:	d8c00217 	ldw	r3,8(sp)
    bfd4:	d9800317 	ldw	r6,12(sp)
    bfd8:	da800017 	ldw	r10,0(sp)
    bfdc:	dac00117 	ldw	r11,4(sp)
    bfe0:	1009883a 	mov	r4,r2
    bfe4:	01400a04 	movi	r5,40
    bfe8:	25fffe04 	addi	r23,r4,-8
    bfec:	290bc83a 	sub	r5,r5,r4
    bff0:	8dd0983a 	sll	r8,r17,r23
    bff4:	314ad83a 	srl	r5,r6,r5
    bff8:	35ee983a 	sll	r23,r6,r23
    bffc:	2a22b03a 	or	r17,r5,r8
    c000:	017f0344 	movi	r5,-1011
    c004:	290bc83a 	sub	r5,r5,r4
    c008:	0013883a 	mov	r9,zero
    c00c:	003f8e06 	br	be48 <__alt_mem_Flash_flash_data+0xf400be48>
    c010:	008000c4 	movi	r2,3
    c014:	50811d26 	beq	r10,r2,c48c <__muldf3+0x70c>
    c018:	00800044 	movi	r2,1
    c01c:	5080e01e 	bne	r10,r2,c3a0 <__muldf3+0x620>
    c020:	e0a6703a 	and	r19,fp,r2
    c024:	0009883a 	mov	r4,zero
    c028:	0021883a 	mov	r16,zero
    c02c:	0025883a 	mov	r18,zero
    c030:	003fad06 	br	bee8 <__alt_mem_Flash_flash_data+0xf400bee8>
    c034:	0023883a 	mov	r17,zero
    c038:	002f883a 	mov	r23,zero
    c03c:	02400044 	movi	r9,1
    c040:	003f8106 	br	be48 <__alt_mem_Flash_flash_data+0xf400be48>
    c044:	024000c4 	movi	r9,3
    c048:	003f7f06 	br	be48 <__alt_mem_Flash_flash_data+0xf400be48>
    c04c:	05400104 	movi	r21,4
    c050:	0021883a 	mov	r16,zero
    c054:	0025883a 	mov	r18,zero
    c058:	02800044 	movi	r10,1
    c05c:	003f6806 	br	be00 <__alt_mem_Flash_flash_data+0xf400be00>
    c060:	05400304 	movi	r21,12
    c064:	028000c4 	movi	r10,3
    c068:	003f6506 	br	be00 <__alt_mem_Flash_flash_data+0xf400be00>
    c06c:	04000434 	movhi	r16,16
    c070:	0027883a 	mov	r19,zero
    c074:	843fffc4 	addi	r16,r16,-1
    c078:	04bfffc4 	movi	r18,-1
    c07c:	0101ffc4 	movi	r4,2047
    c080:	003f9906 	br	bee8 <__alt_mem_Flash_flash_data+0xf400bee8>
    c084:	8821883a 	mov	r16,r17
    c088:	b825883a 	mov	r18,r23
    c08c:	5839883a 	mov	fp,r11
    c090:	4815883a 	mov	r10,r9
    c094:	003f8e06 	br	bed0 <__alt_mem_Flash_flash_data+0xf400bed0>
    c098:	8821883a 	mov	r16,r17
    c09c:	b825883a 	mov	r18,r23
    c0a0:	b039883a 	mov	fp,r22
    c0a4:	4815883a 	mov	r10,r9
    c0a8:	003f8906 	br	bed0 <__alt_mem_Flash_flash_data+0xf400bed0>
    c0ac:	b80cd43a 	srli	r6,r23,16
    c0b0:	9006d43a 	srli	r3,r18,16
    c0b4:	90bfffcc 	andi	r2,r18,65535
    c0b8:	bdffffcc 	andi	r23,r23,65535
    c0bc:	b891383a 	mul	r8,r23,r2
    c0c0:	b8c9383a 	mul	r4,r23,r3
    c0c4:	309b383a 	mul	r13,r6,r2
    c0c8:	400ed43a 	srli	r7,r8,16
    c0cc:	30df383a 	mul	r15,r6,r3
    c0d0:	235b883a 	add	r13,r4,r13
    c0d4:	69db883a 	add	r13,r13,r7
    c0d8:	6900022e 	bgeu	r13,r4,c0e4 <__muldf3+0x364>
    c0dc:	01000074 	movhi	r4,1
    c0e0:	791f883a 	add	r15,r15,r4
    c0e4:	8828d43a 	srli	r20,r17,16
    c0e8:	8c7fffcc 	andi	r17,r17,65535
    c0ec:	888f383a 	mul	r7,r17,r2
    c0f0:	88d3383a 	mul	r9,r17,r3
    c0f4:	a0a5383a 	mul	r18,r20,r2
    c0f8:	3816d43a 	srli	r11,r7,16
    c0fc:	6814943a 	slli	r10,r13,16
    c100:	4ca5883a 	add	r18,r9,r18
    c104:	423fffcc 	andi	r8,r8,65535
    c108:	92e5883a 	add	r18,r18,r11
    c10c:	6808d43a 	srli	r4,r13,16
    c110:	5215883a 	add	r10,r10,r8
    c114:	a0c7383a 	mul	r3,r20,r3
    c118:	9240022e 	bgeu	r18,r9,c124 <__muldf3+0x3a4>
    c11c:	00800074 	movhi	r2,1
    c120:	1887883a 	add	r3,r3,r2
    c124:	802ad43a 	srli	r21,r16,16
    c128:	80bfffcc 	andi	r2,r16,65535
    c12c:	b893383a 	mul	r9,r23,r2
    c130:	3091383a 	mul	r8,r6,r2
    c134:	bd6f383a 	mul	r23,r23,r21
    c138:	9026943a 	slli	r19,r18,16
    c13c:	481ad43a 	srli	r13,r9,16
    c140:	9024d43a 	srli	r18,r18,16
    c144:	39ffffcc 	andi	r7,r7,65535
    c148:	ba11883a 	add	r8,r23,r8
    c14c:	99e7883a 	add	r19,r19,r7
    c150:	4351883a 	add	r8,r8,r13
    c154:	1c97883a 	add	r11,r3,r18
    c158:	354d383a 	mul	r6,r6,r21
    c15c:	9925883a 	add	r18,r19,r4
    c160:	45c0022e 	bgeu	r8,r23,c16c <__muldf3+0x3ec>
    c164:	00c00074 	movhi	r3,1
    c168:	30cd883a 	add	r6,r6,r3
    c16c:	8889383a 	mul	r4,r17,r2
    c170:	8d63383a 	mul	r17,r17,r21
    c174:	a085383a 	mul	r2,r20,r2
    c178:	200ed43a 	srli	r7,r4,16
    c17c:	401cd43a 	srli	r14,r8,16
    c180:	401a943a 	slli	r13,r8,16
    c184:	8885883a 	add	r2,r17,r2
    c188:	4a3fffcc 	andi	r8,r9,65535
    c18c:	11c5883a 	add	r2,r2,r7
    c190:	339d883a 	add	r14,r6,r14
    c194:	6a11883a 	add	r8,r13,r8
    c198:	a561383a 	mul	r16,r20,r21
    c19c:	1440022e 	bgeu	r2,r17,c1a8 <__muldf3+0x428>
    c1a0:	00c00074 	movhi	r3,1
    c1a4:	80e1883a 	add	r16,r16,r3
    c1a8:	1006943a 	slli	r3,r2,16
    c1ac:	213fffcc 	andi	r4,r4,65535
    c1b0:	93db883a 	add	r13,r18,r15
    c1b4:	1909883a 	add	r4,r3,r4
    c1b8:	22c7883a 	add	r3,r4,r11
    c1bc:	6cd3803a 	cmpltu	r9,r13,r19
    c1c0:	6a09883a 	add	r4,r13,r8
    c1c4:	1a5b883a 	add	r13,r3,r9
    c1c8:	2211803a 	cmpltu	r8,r4,r8
    c1cc:	734d883a 	add	r6,r14,r13
    c1d0:	100ed43a 	srli	r7,r2,16
    c1d4:	6a53803a 	cmpltu	r9,r13,r9
    c1d8:	3205883a 	add	r2,r6,r8
    c1dc:	1ac7803a 	cmpltu	r3,r3,r11
    c1e0:	1211803a 	cmpltu	r8,r2,r8
    c1e4:	48c6b03a 	or	r3,r9,r3
    c1e8:	338d803a 	cmpltu	r6,r6,r14
    c1ec:	19c7883a 	add	r3,r3,r7
    c1f0:	418cb03a 	or	r6,r8,r6
    c1f4:	1987883a 	add	r3,r3,r6
    c1f8:	2024927a 	slli	r18,r4,9
    c1fc:	1c07883a 	add	r3,r3,r16
    c200:	1806927a 	slli	r3,r3,9
    c204:	1020d5fa 	srli	r16,r2,23
    c208:	2008d5fa 	srli	r4,r4,23
    c20c:	9294b03a 	or	r10,r18,r10
    c210:	1004927a 	slli	r2,r2,9
    c214:	5024c03a 	cmpne	r18,r10,zero
    c218:	1c20b03a 	or	r16,r3,r16
    c21c:	9108b03a 	or	r4,r18,r4
    c220:	80c0402c 	andhi	r3,r16,256
    c224:	20a4b03a 	or	r18,r4,r2
    c228:	18000726 	beq	r3,zero,c248 <__muldf3+0x4c8>
    c22c:	9006d07a 	srli	r3,r18,1
    c230:	800897fa 	slli	r4,r16,31
    c234:	9080004c 	andi	r2,r18,1
    c238:	8020d07a 	srli	r16,r16,1
    c23c:	10c4b03a 	or	r2,r2,r3
    c240:	1124b03a 	or	r18,r2,r4
    c244:	600b883a 	mov	r5,r12
    c248:	2900ffc4 	addi	r4,r5,1023
    c24c:	01004b0e 	bge	zero,r4,c37c <__muldf3+0x5fc>
    c250:	908001cc 	andi	r2,r18,7
    c254:	10000726 	beq	r2,zero,c274 <__muldf3+0x4f4>
    c258:	90c003cc 	andi	r3,r18,15
    c25c:	00800104 	movi	r2,4
    c260:	18800426 	beq	r3,r2,c274 <__muldf3+0x4f4>
    c264:	9087883a 	add	r3,r18,r2
    c268:	1c85803a 	cmpltu	r2,r3,r18
    c26c:	80a1883a 	add	r16,r16,r2
    c270:	1825883a 	mov	r18,r3
    c274:	8080402c 	andhi	r2,r16,256
    c278:	10000426 	beq	r2,zero,c28c <__muldf3+0x50c>
    c27c:	00bfc034 	movhi	r2,65280
    c280:	10bfffc4 	addi	r2,r2,-1
    c284:	29010004 	addi	r4,r5,1024
    c288:	80a0703a 	and	r16,r16,r2
    c28c:	0081ff84 	movi	r2,2046
    c290:	1100320e 	bge	r2,r4,c35c <__muldf3+0x5dc>
    c294:	b4c0004c 	andi	r19,r22,1
    c298:	0101ffc4 	movi	r4,2047
    c29c:	0021883a 	mov	r16,zero
    c2a0:	0025883a 	mov	r18,zero
    c2a4:	003f1006 	br	bee8 <__alt_mem_Flash_flash_data+0xf400bee8>
    c2a8:	8080022c 	andhi	r2,r16,8
    c2ac:	10000926 	beq	r2,zero,c2d4 <__muldf3+0x554>
    c2b0:	8880022c 	andhi	r2,r17,8
    c2b4:	1000071e 	bne	r2,zero,c2d4 <__muldf3+0x554>
    c2b8:	00800434 	movhi	r2,16
    c2bc:	8c000234 	orhi	r16,r17,8
    c2c0:	10bfffc4 	addi	r2,r2,-1
    c2c4:	1827883a 	mov	r19,r3
    c2c8:	80a0703a 	and	r16,r16,r2
    c2cc:	b825883a 	mov	r18,r23
    c2d0:	003f6a06 	br	c07c <__alt_mem_Flash_flash_data+0xf400c07c>
    c2d4:	00800434 	movhi	r2,16
    c2d8:	84000234 	orhi	r16,r16,8
    c2dc:	10bfffc4 	addi	r2,r2,-1
    c2e0:	80a0703a 	and	r16,r16,r2
    c2e4:	003f6506 	br	c07c <__alt_mem_Flash_flash_data+0xf400c07c>
    c2e8:	3009883a 	mov	r4,r6
    c2ec:	d8c00215 	stw	r3,8(sp)
    c2f0:	d9800315 	stw	r6,12(sp)
    c2f4:	da800015 	stw	r10,0(sp)
    c2f8:	dac00115 	stw	r11,4(sp)
    c2fc:	000cf700 	call	cf70 <__clzsi2>
    c300:	11000804 	addi	r4,r2,32
    c304:	014009c4 	movi	r5,39
    c308:	d8c00217 	ldw	r3,8(sp)
    c30c:	d9800317 	ldw	r6,12(sp)
    c310:	da800017 	ldw	r10,0(sp)
    c314:	dac00117 	ldw	r11,4(sp)
    c318:	293f320e 	bge	r5,r4,bfe4 <__alt_mem_Flash_flash_data+0xf400bfe4>
    c31c:	10bffe04 	addi	r2,r2,-8
    c320:	b8a2983a 	sll	r17,r23,r2
    c324:	002f883a 	mov	r23,zero
    c328:	003f3506 	br	c000 <__alt_mem_Flash_flash_data+0xf400c000>
    c32c:	d9800315 	stw	r6,12(sp)
    c330:	d9c00015 	stw	r7,0(sp)
    c334:	000cf700 	call	cf70 <__clzsi2>
    c338:	10c00804 	addi	r3,r2,32
    c33c:	010009c4 	movi	r4,39
    c340:	d9800317 	ldw	r6,12(sp)
    c344:	d9c00017 	ldw	r7,0(sp)
    c348:	20ff060e 	bge	r4,r3,bf64 <__alt_mem_Flash_flash_data+0xf400bf64>
    c34c:	10bffe04 	addi	r2,r2,-8
    c350:	88a0983a 	sll	r16,r17,r2
    c354:	0025883a 	mov	r18,zero
    c358:	003f0906 	br	bf80 <__alt_mem_Flash_flash_data+0xf400bf80>
    c35c:	9004d0fa 	srli	r2,r18,3
    c360:	8024977a 	slli	r18,r16,29
    c364:	8020927a 	slli	r16,r16,9
    c368:	2101ffcc 	andi	r4,r4,2047
    c36c:	90a4b03a 	or	r18,r18,r2
    c370:	8020d33a 	srli	r16,r16,12
    c374:	b4c0004c 	andi	r19,r22,1
    c378:	003edb06 	br	bee8 <__alt_mem_Flash_flash_data+0xf400bee8>
    c37c:	00ff0084 	movi	r3,-1022
    c380:	1947c83a 	sub	r3,r3,r5
    c384:	00800e04 	movi	r2,56
    c388:	10c0080e 	bge	r2,r3,c3ac <__muldf3+0x62c>
    c38c:	b4c0004c 	andi	r19,r22,1
    c390:	0009883a 	mov	r4,zero
    c394:	0021883a 	mov	r16,zero
    c398:	0025883a 	mov	r18,zero
    c39c:	003ed206 	br	bee8 <__alt_mem_Flash_flash_data+0xf400bee8>
    c3a0:	600b883a 	mov	r5,r12
    c3a4:	e02d883a 	mov	r22,fp
    c3a8:	003fa706 	br	c248 <__alt_mem_Flash_flash_data+0xf400c248>
    c3ac:	008007c4 	movi	r2,31
    c3b0:	10c01816 	blt	r2,r3,c414 <__muldf3+0x694>
    c3b4:	29410784 	addi	r5,r5,1054
    c3b8:	8144983a 	sll	r2,r16,r5
    c3bc:	90c8d83a 	srl	r4,r18,r3
    c3c0:	914a983a 	sll	r5,r18,r5
    c3c4:	80c6d83a 	srl	r3,r16,r3
    c3c8:	2088b03a 	or	r4,r4,r2
    c3cc:	2804c03a 	cmpne	r2,r5,zero
    c3d0:	2084b03a 	or	r2,r4,r2
    c3d4:	110001cc 	andi	r4,r2,7
    c3d8:	20000726 	beq	r4,zero,c3f8 <__muldf3+0x678>
    c3dc:	114003cc 	andi	r5,r2,15
    c3e0:	01000104 	movi	r4,4
    c3e4:	29000426 	beq	r5,r4,c3f8 <__muldf3+0x678>
    c3e8:	11000104 	addi	r4,r2,4
    c3ec:	2085803a 	cmpltu	r2,r4,r2
    c3f0:	1887883a 	add	r3,r3,r2
    c3f4:	2005883a 	mov	r2,r4
    c3f8:	1900202c 	andhi	r4,r3,128
    c3fc:	20001826 	beq	r4,zero,c460 <__muldf3+0x6e0>
    c400:	b4c0004c 	andi	r19,r22,1
    c404:	01000044 	movi	r4,1
    c408:	0021883a 	mov	r16,zero
    c40c:	0025883a 	mov	r18,zero
    c410:	003eb506 	br	bee8 <__alt_mem_Flash_flash_data+0xf400bee8>
    c414:	00bef884 	movi	r2,-1054
    c418:	1145c83a 	sub	r2,r2,r5
    c41c:	8088d83a 	srl	r4,r16,r2
    c420:	00800804 	movi	r2,32
    c424:	18801726 	beq	r3,r2,c484 <__muldf3+0x704>
    c428:	28810f84 	addi	r2,r5,1086
    c42c:	8084983a 	sll	r2,r16,r2
    c430:	1484b03a 	or	r2,r2,r18
    c434:	1004c03a 	cmpne	r2,r2,zero
    c438:	1104b03a 	or	r2,r2,r4
    c43c:	10c001cc 	andi	r3,r2,7
    c440:	18000b1e 	bne	r3,zero,c470 <__muldf3+0x6f0>
    c444:	0021883a 	mov	r16,zero
    c448:	1004d0fa 	srli	r2,r2,3
    c44c:	b4c0004c 	andi	r19,r22,1
    c450:	0009883a 	mov	r4,zero
    c454:	10e4b03a 	or	r18,r2,r3
    c458:	003ea306 	br	bee8 <__alt_mem_Flash_flash_data+0xf400bee8>
    c45c:	0007883a 	mov	r3,zero
    c460:	1820927a 	slli	r16,r3,9
    c464:	1806977a 	slli	r3,r3,29
    c468:	8020d33a 	srli	r16,r16,12
    c46c:	003ff606 	br	c448 <__alt_mem_Flash_flash_data+0xf400c448>
    c470:	110003cc 	andi	r4,r2,15
    c474:	00c00104 	movi	r3,4
    c478:	20fff826 	beq	r4,r3,c45c <__alt_mem_Flash_flash_data+0xf400c45c>
    c47c:	0007883a 	mov	r3,zero
    c480:	003fd906 	br	c3e8 <__alt_mem_Flash_flash_data+0xf400c3e8>
    c484:	0005883a 	mov	r2,zero
    c488:	003fe906 	br	c430 <__alt_mem_Flash_flash_data+0xf400c430>
    c48c:	00800434 	movhi	r2,16
    c490:	84000234 	orhi	r16,r16,8
    c494:	10bfffc4 	addi	r2,r2,-1
    c498:	e4c0004c 	andi	r19,fp,1
    c49c:	80a0703a 	and	r16,r16,r2
    c4a0:	003ef606 	br	c07c <__alt_mem_Flash_flash_data+0xf400c07c>

0000c4a4 <__subdf3>:
    c4a4:	00c00434 	movhi	r3,16
    c4a8:	18ffffc4 	addi	r3,r3,-1
    c4ac:	defffb04 	addi	sp,sp,-20
    c4b0:	28d2703a 	and	r9,r5,r3
    c4b4:	3814d53a 	srli	r10,r7,20
    c4b8:	38c6703a 	and	r3,r7,r3
    c4bc:	3004d77a 	srli	r2,r6,29
    c4c0:	dc800215 	stw	r18,8(sp)
    c4c4:	dc000015 	stw	r16,0(sp)
    c4c8:	2824d7fa 	srli	r18,r5,31
    c4cc:	2820d53a 	srli	r16,r5,20
    c4d0:	481290fa 	slli	r9,r9,3
    c4d4:	200ad77a 	srli	r5,r4,29
    c4d8:	180690fa 	slli	r3,r3,3
    c4dc:	dc400115 	stw	r17,4(sp)
    c4e0:	dfc00415 	stw	ra,16(sp)
    c4e4:	202290fa 	slli	r17,r4,3
    c4e8:	dcc00315 	stw	r19,12(sp)
    c4ec:	5281ffcc 	andi	r10,r10,2047
    c4f0:	0101ffc4 	movi	r4,2047
    c4f4:	9011883a 	mov	r8,r18
    c4f8:	8401ffcc 	andi	r16,r16,2047
    c4fc:	94803fcc 	andi	r18,r18,255
    c500:	494ab03a 	or	r5,r9,r5
    c504:	380ed7fa 	srli	r7,r7,31
    c508:	1886b03a 	or	r3,r3,r2
    c50c:	300c90fa 	slli	r6,r6,3
    c510:	51009026 	beq	r10,r4,c754 <__subdf3+0x2b0>
    c514:	39c0005c 	xori	r7,r7,1
    c518:	8285c83a 	sub	r2,r16,r10
    c51c:	91c06f26 	beq	r18,r7,c6dc <__subdf3+0x238>
    c520:	0080b10e 	bge	zero,r2,c7e8 <__subdf3+0x344>
    c524:	50002a1e 	bne	r10,zero,c5d0 <__subdf3+0x12c>
    c528:	1988b03a 	or	r4,r3,r6
    c52c:	2000941e 	bne	r4,zero,c780 <__subdf3+0x2dc>
    c530:	888001cc 	andi	r2,r17,7
    c534:	10005b26 	beq	r2,zero,c6a4 <__subdf3+0x200>
    c538:	88c003cc 	andi	r3,r17,15
    c53c:	00800104 	movi	r2,4
    c540:	18805826 	beq	r3,r2,c6a4 <__subdf3+0x200>
    c544:	88c00104 	addi	r3,r17,4
    c548:	1c63803a 	cmpltu	r17,r3,r17
    c54c:	2c4b883a 	add	r5,r5,r17
    c550:	2880202c 	andhi	r2,r5,128
    c554:	9200004c 	andi	r8,r18,1
    c558:	1823883a 	mov	r17,r3
    c55c:	10005426 	beq	r2,zero,c6b0 <__subdf3+0x20c>
    c560:	84000044 	addi	r16,r16,1
    c564:	0081ffc4 	movi	r2,2047
    c568:	8080bf26 	beq	r16,r2,c868 <__subdf3+0x3c4>
    c56c:	013fe034 	movhi	r4,65408
    c570:	213fffc4 	addi	r4,r4,-1
    c574:	290a703a 	and	r5,r5,r4
    c578:	2804977a 	slli	r2,r5,29
    c57c:	280a927a 	slli	r5,r5,9
    c580:	8822d0fa 	srli	r17,r17,3
    c584:	8401ffcc 	andi	r16,r16,2047
    c588:	2808d33a 	srli	r4,r5,12
    c58c:	1444b03a 	or	r2,r2,r17
    c590:	8401ffcc 	andi	r16,r16,2047
    c594:	800a953a 	slli	r5,r16,20
    c598:	40c03fcc 	andi	r3,r8,255
    c59c:	04000434 	movhi	r16,16
    c5a0:	180697fa 	slli	r3,r3,31
    c5a4:	843fffc4 	addi	r16,r16,-1
    c5a8:	2420703a 	and	r16,r4,r16
    c5ac:	8160b03a 	or	r16,r16,r5
    c5b0:	80c6b03a 	or	r3,r16,r3
    c5b4:	dfc00417 	ldw	ra,16(sp)
    c5b8:	dcc00317 	ldw	r19,12(sp)
    c5bc:	dc800217 	ldw	r18,8(sp)
    c5c0:	dc400117 	ldw	r17,4(sp)
    c5c4:	dc000017 	ldw	r16,0(sp)
    c5c8:	dec00504 	addi	sp,sp,20
    c5cc:	f800283a 	ret
    c5d0:	0101ffc4 	movi	r4,2047
    c5d4:	813fd626 	beq	r16,r4,c530 <__alt_mem_Flash_flash_data+0xf400c530>
    c5d8:	18c02034 	orhi	r3,r3,128
    c5dc:	01000e04 	movi	r4,56
    c5e0:	2080a416 	blt	r4,r2,c874 <__subdf3+0x3d0>
    c5e4:	010007c4 	movi	r4,31
    c5e8:	2080c716 	blt	r4,r2,c908 <__subdf3+0x464>
    c5ec:	01000804 	movi	r4,32
    c5f0:	2089c83a 	sub	r4,r4,r2
    c5f4:	1910983a 	sll	r8,r3,r4
    c5f8:	308ed83a 	srl	r7,r6,r2
    c5fc:	3108983a 	sll	r4,r6,r4
    c600:	1884d83a 	srl	r2,r3,r2
    c604:	41ccb03a 	or	r6,r8,r7
    c608:	2008c03a 	cmpne	r4,r4,zero
    c60c:	310cb03a 	or	r6,r6,r4
    c610:	898dc83a 	sub	r6,r17,r6
    c614:	89a3803a 	cmpltu	r17,r17,r6
    c618:	288bc83a 	sub	r5,r5,r2
    c61c:	2c4bc83a 	sub	r5,r5,r17
    c620:	3023883a 	mov	r17,r6
    c624:	2880202c 	andhi	r2,r5,128
    c628:	10006b26 	beq	r2,zero,c7d8 <__subdf3+0x334>
    c62c:	04c02034 	movhi	r19,128
    c630:	9cffffc4 	addi	r19,r19,-1
    c634:	2ce6703a 	and	r19,r5,r19
    c638:	98007c26 	beq	r19,zero,c82c <__subdf3+0x388>
    c63c:	9809883a 	mov	r4,r19
    c640:	000cf700 	call	cf70 <__clzsi2>
    c644:	10fffe04 	addi	r3,r2,-8
    c648:	010007c4 	movi	r4,31
    c64c:	20c07d16 	blt	r4,r3,c844 <__subdf3+0x3a0>
    c650:	01400a04 	movi	r5,40
    c654:	2885c83a 	sub	r2,r5,r2
    c658:	888ad83a 	srl	r5,r17,r2
    c65c:	98e6983a 	sll	r19,r19,r3
    c660:	88e2983a 	sll	r17,r17,r3
    c664:	2ce6b03a 	or	r19,r5,r19
    c668:	1c007a16 	blt	r3,r16,c854 <__subdf3+0x3b0>
    c66c:	1c21c83a 	sub	r16,r3,r16
    c670:	81400044 	addi	r5,r16,1
    c674:	00c007c4 	movi	r3,31
    c678:	19409616 	blt	r3,r5,c8d4 <__subdf3+0x430>
    c67c:	1c21c83a 	sub	r16,r3,r16
    c680:	8c08983a 	sll	r4,r17,r16
    c684:	8946d83a 	srl	r3,r17,r5
    c688:	9c20983a 	sll	r16,r19,r16
    c68c:	2008c03a 	cmpne	r4,r4,zero
    c690:	994ad83a 	srl	r5,r19,r5
    c694:	1c06b03a 	or	r3,r3,r16
    c698:	1922b03a 	or	r17,r3,r4
    c69c:	0021883a 	mov	r16,zero
    c6a0:	003fa306 	br	c530 <__alt_mem_Flash_flash_data+0xf400c530>
    c6a4:	2880202c 	andhi	r2,r5,128
    c6a8:	9200004c 	andi	r8,r18,1
    c6ac:	103fac1e 	bne	r2,zero,c560 <__alt_mem_Flash_flash_data+0xf400c560>
    c6b0:	2804977a 	slli	r2,r5,29
    c6b4:	8822d0fa 	srli	r17,r17,3
    c6b8:	00c1ffc4 	movi	r3,2047
    c6bc:	280ad0fa 	srli	r5,r5,3
    c6c0:	1444b03a 	or	r2,r2,r17
    c6c4:	80c02726 	beq	r16,r3,c764 <__subdf3+0x2c0>
    c6c8:	01000434 	movhi	r4,16
    c6cc:	213fffc4 	addi	r4,r4,-1
    c6d0:	80e0703a 	and	r16,r16,r3
    c6d4:	2908703a 	and	r4,r5,r4
    c6d8:	003fad06 	br	c590 <__alt_mem_Flash_flash_data+0xf400c590>
    c6dc:	0080690e 	bge	zero,r2,c884 <__subdf3+0x3e0>
    c6e0:	50002f26 	beq	r10,zero,c7a0 <__subdf3+0x2fc>
    c6e4:	0101ffc4 	movi	r4,2047
    c6e8:	813f9126 	beq	r16,r4,c530 <__alt_mem_Flash_flash_data+0xf400c530>
    c6ec:	18c02034 	orhi	r3,r3,128
    c6f0:	01000e04 	movi	r4,56
    c6f4:	2080b00e 	bge	r4,r2,c9b8 <__subdf3+0x514>
    c6f8:	198cb03a 	or	r6,r3,r6
    c6fc:	300ec03a 	cmpne	r7,r6,zero
    c700:	0005883a 	mov	r2,zero
    c704:	3c4f883a 	add	r7,r7,r17
    c708:	3c63803a 	cmpltu	r17,r7,r17
    c70c:	114b883a 	add	r5,r2,r5
    c710:	2c4b883a 	add	r5,r5,r17
    c714:	3823883a 	mov	r17,r7
    c718:	2880202c 	andhi	r2,r5,128
    c71c:	10002e26 	beq	r2,zero,c7d8 <__subdf3+0x334>
    c720:	84000044 	addi	r16,r16,1
    c724:	0081ffc4 	movi	r2,2047
    c728:	8080de26 	beq	r16,r2,caa4 <__subdf3+0x600>
    c72c:	00bfe034 	movhi	r2,65408
    c730:	10bfffc4 	addi	r2,r2,-1
    c734:	288a703a 	and	r5,r5,r2
    c738:	880cd07a 	srli	r6,r17,1
    c73c:	280897fa 	slli	r4,r5,31
    c740:	88c0004c 	andi	r3,r17,1
    c744:	30e2b03a 	or	r17,r6,r3
    c748:	280ad07a 	srli	r5,r5,1
    c74c:	8922b03a 	or	r17,r17,r4
    c750:	003f7706 	br	c530 <__alt_mem_Flash_flash_data+0xf400c530>
    c754:	1984b03a 	or	r2,r3,r6
    c758:	103f6e26 	beq	r2,zero,c514 <__alt_mem_Flash_flash_data+0xf400c514>
    c75c:	39c03fcc 	andi	r7,r7,255
    c760:	003f6d06 	br	c518 <__alt_mem_Flash_flash_data+0xf400c518>
    c764:	1146b03a 	or	r3,r2,r5
    c768:	18003f26 	beq	r3,zero,c868 <__subdf3+0x3c4>
    c76c:	00c00434 	movhi	r3,16
    c770:	29000234 	orhi	r4,r5,8
    c774:	18ffffc4 	addi	r3,r3,-1
    c778:	20c8703a 	and	r4,r4,r3
    c77c:	003f8406 	br	c590 <__alt_mem_Flash_flash_data+0xf400c590>
    c780:	10bfffc4 	addi	r2,r2,-1
    c784:	1000501e 	bne	r2,zero,c8c8 <__subdf3+0x424>
    c788:	898fc83a 	sub	r7,r17,r6
    c78c:	89e3803a 	cmpltu	r17,r17,r7
    c790:	28cbc83a 	sub	r5,r5,r3
    c794:	2c4bc83a 	sub	r5,r5,r17
    c798:	3823883a 	mov	r17,r7
    c79c:	003fa106 	br	c624 <__alt_mem_Flash_flash_data+0xf400c624>
    c7a0:	1988b03a 	or	r4,r3,r6
    c7a4:	203f6226 	beq	r4,zero,c530 <__alt_mem_Flash_flash_data+0xf400c530>
    c7a8:	10bfffc4 	addi	r2,r2,-1
    c7ac:	10009b1e 	bne	r2,zero,ca1c <__subdf3+0x578>
    c7b0:	344d883a 	add	r6,r6,r17
    c7b4:	3463803a 	cmpltu	r17,r6,r17
    c7b8:	194b883a 	add	r5,r3,r5
    c7bc:	2c4b883a 	add	r5,r5,r17
    c7c0:	3023883a 	mov	r17,r6
    c7c4:	003fd406 	br	c718 <__alt_mem_Flash_flash_data+0xf400c718>
    c7c8:	1106b03a 	or	r3,r2,r4
    c7cc:	1800b426 	beq	r3,zero,caa0 <__subdf3+0x5fc>
    c7d0:	100b883a 	mov	r5,r2
    c7d4:	2023883a 	mov	r17,r4
    c7d8:	888001cc 	andi	r2,r17,7
    c7dc:	103f561e 	bne	r2,zero,c538 <__alt_mem_Flash_flash_data+0xf400c538>
    c7e0:	9200004c 	andi	r8,r18,1
    c7e4:	003fb206 	br	c6b0 <__alt_mem_Flash_flash_data+0xf400c6b0>
    c7e8:	1000531e 	bne	r2,zero,c938 <__subdf3+0x494>
    c7ec:	80800044 	addi	r2,r16,1
    c7f0:	1081ffcc 	andi	r2,r2,2047
    c7f4:	01000044 	movi	r4,1
    c7f8:	2080a00e 	bge	r4,r2,ca7c <__subdf3+0x5d8>
    c7fc:	8985c83a 	sub	r2,r17,r6
    c800:	8889803a 	cmpltu	r4,r17,r2
    c804:	28e7c83a 	sub	r19,r5,r3
    c808:	9927c83a 	sub	r19,r19,r4
    c80c:	9900202c 	andhi	r4,r19,128
    c810:	20006226 	beq	r4,zero,c99c <__subdf3+0x4f8>
    c814:	3463c83a 	sub	r17,r6,r17
    c818:	194bc83a 	sub	r5,r3,r5
    c81c:	344d803a 	cmpltu	r6,r6,r17
    c820:	29a7c83a 	sub	r19,r5,r6
    c824:	3825883a 	mov	r18,r7
    c828:	983f841e 	bne	r19,zero,c63c <__alt_mem_Flash_flash_data+0xf400c63c>
    c82c:	8809883a 	mov	r4,r17
    c830:	000cf700 	call	cf70 <__clzsi2>
    c834:	10800804 	addi	r2,r2,32
    c838:	10fffe04 	addi	r3,r2,-8
    c83c:	010007c4 	movi	r4,31
    c840:	20ff830e 	bge	r4,r3,c650 <__alt_mem_Flash_flash_data+0xf400c650>
    c844:	14fff604 	addi	r19,r2,-40
    c848:	8ce6983a 	sll	r19,r17,r19
    c84c:	0023883a 	mov	r17,zero
    c850:	1c3f860e 	bge	r3,r16,c66c <__alt_mem_Flash_flash_data+0xf400c66c>
    c854:	017fe034 	movhi	r5,65408
    c858:	297fffc4 	addi	r5,r5,-1
    c85c:	80e1c83a 	sub	r16,r16,r3
    c860:	994a703a 	and	r5,r19,r5
    c864:	003f3206 	br	c530 <__alt_mem_Flash_flash_data+0xf400c530>
    c868:	0009883a 	mov	r4,zero
    c86c:	0005883a 	mov	r2,zero
    c870:	003f4706 	br	c590 <__alt_mem_Flash_flash_data+0xf400c590>
    c874:	198cb03a 	or	r6,r3,r6
    c878:	300cc03a 	cmpne	r6,r6,zero
    c87c:	0005883a 	mov	r2,zero
    c880:	003f6306 	br	c610 <__alt_mem_Flash_flash_data+0xf400c610>
    c884:	10009d1e 	bne	r2,zero,cafc <__subdf3+0x658>
    c888:	81c00044 	addi	r7,r16,1
    c88c:	3881ffcc 	andi	r2,r7,2047
    c890:	02400044 	movi	r9,1
    c894:	4880680e 	bge	r9,r2,ca38 <__subdf3+0x594>
    c898:	0081ffc4 	movi	r2,2047
    c89c:	3880ae26 	beq	r7,r2,cb58 <__subdf3+0x6b4>
    c8a0:	344d883a 	add	r6,r6,r17
    c8a4:	3463803a 	cmpltu	r17,r6,r17
    c8a8:	194b883a 	add	r5,r3,r5
    c8ac:	2c4b883a 	add	r5,r5,r17
    c8b0:	282297fa 	slli	r17,r5,31
    c8b4:	300cd07a 	srli	r6,r6,1
    c8b8:	280ad07a 	srli	r5,r5,1
    c8bc:	3821883a 	mov	r16,r7
    c8c0:	89a2b03a 	or	r17,r17,r6
    c8c4:	003f1a06 	br	c530 <__alt_mem_Flash_flash_data+0xf400c530>
    c8c8:	0101ffc4 	movi	r4,2047
    c8cc:	813f431e 	bne	r16,r4,c5dc <__alt_mem_Flash_flash_data+0xf400c5dc>
    c8d0:	003f1706 	br	c530 <__alt_mem_Flash_flash_data+0xf400c530>
    c8d4:	80bff844 	addi	r2,r16,-31
    c8d8:	00c00804 	movi	r3,32
    c8dc:	9884d83a 	srl	r2,r19,r2
    c8e0:	28c05126 	beq	r5,r3,ca28 <__subdf3+0x584>
    c8e4:	00c00fc4 	movi	r3,63
    c8e8:	1c21c83a 	sub	r16,r3,r16
    c8ec:	9c26983a 	sll	r19,r19,r16
    c8f0:	9c62b03a 	or	r17,r19,r17
    c8f4:	8822c03a 	cmpne	r17,r17,zero
    c8f8:	88a2b03a 	or	r17,r17,r2
    c8fc:	000b883a 	mov	r5,zero
    c900:	0021883a 	mov	r16,zero
    c904:	003fb406 	br	c7d8 <__alt_mem_Flash_flash_data+0xf400c7d8>
    c908:	113ff804 	addi	r4,r2,-32
    c90c:	01c00804 	movi	r7,32
    c910:	1908d83a 	srl	r4,r3,r4
    c914:	11c04626 	beq	r2,r7,ca30 <__subdf3+0x58c>
    c918:	01c01004 	movi	r7,64
    c91c:	3885c83a 	sub	r2,r7,r2
    c920:	1884983a 	sll	r2,r3,r2
    c924:	118cb03a 	or	r6,r2,r6
    c928:	300cc03a 	cmpne	r6,r6,zero
    c92c:	310cb03a 	or	r6,r6,r4
    c930:	0005883a 	mov	r2,zero
    c934:	003f3606 	br	c610 <__alt_mem_Flash_flash_data+0xf400c610>
    c938:	80002b26 	beq	r16,zero,c9e8 <__subdf3+0x544>
    c93c:	0101ffc4 	movi	r4,2047
    c940:	51006926 	beq	r10,r4,cae8 <__subdf3+0x644>
    c944:	0085c83a 	sub	r2,zero,r2
    c948:	29402034 	orhi	r5,r5,128
    c94c:	01000e04 	movi	r4,56
    c950:	20807d16 	blt	r4,r2,cb48 <__subdf3+0x6a4>
    c954:	010007c4 	movi	r4,31
    c958:	2080d916 	blt	r4,r2,ccc0 <__subdf3+0x81c>
    c95c:	01000804 	movi	r4,32
    c960:	2089c83a 	sub	r4,r4,r2
    c964:	2912983a 	sll	r9,r5,r4
    c968:	8890d83a 	srl	r8,r17,r2
    c96c:	8908983a 	sll	r4,r17,r4
    c970:	2884d83a 	srl	r2,r5,r2
    c974:	4a22b03a 	or	r17,r9,r8
    c978:	2008c03a 	cmpne	r4,r4,zero
    c97c:	8922b03a 	or	r17,r17,r4
    c980:	3463c83a 	sub	r17,r6,r17
    c984:	1885c83a 	sub	r2,r3,r2
    c988:	344d803a 	cmpltu	r6,r6,r17
    c98c:	118bc83a 	sub	r5,r2,r6
    c990:	5021883a 	mov	r16,r10
    c994:	3825883a 	mov	r18,r7
    c998:	003f2206 	br	c624 <__alt_mem_Flash_flash_data+0xf400c624>
    c99c:	9886b03a 	or	r3,r19,r2
    c9a0:	18001c1e 	bne	r3,zero,ca14 <__subdf3+0x570>
    c9a4:	0011883a 	mov	r8,zero
    c9a8:	000b883a 	mov	r5,zero
    c9ac:	0023883a 	mov	r17,zero
    c9b0:	0021883a 	mov	r16,zero
    c9b4:	003f3e06 	br	c6b0 <__alt_mem_Flash_flash_data+0xf400c6b0>
    c9b8:	010007c4 	movi	r4,31
    c9bc:	20803c16 	blt	r4,r2,cab0 <__subdf3+0x60c>
    c9c0:	01000804 	movi	r4,32
    c9c4:	2089c83a 	sub	r4,r4,r2
    c9c8:	1912983a 	sll	r9,r3,r4
    c9cc:	308ed83a 	srl	r7,r6,r2
    c9d0:	3108983a 	sll	r4,r6,r4
    c9d4:	1884d83a 	srl	r2,r3,r2
    c9d8:	49ceb03a 	or	r7,r9,r7
    c9dc:	2008c03a 	cmpne	r4,r4,zero
    c9e0:	390eb03a 	or	r7,r7,r4
    c9e4:	003f4706 	br	c704 <__alt_mem_Flash_flash_data+0xf400c704>
    c9e8:	2c48b03a 	or	r4,r5,r17
    c9ec:	20003e26 	beq	r4,zero,cae8 <__subdf3+0x644>
    c9f0:	0084303a 	nor	r2,zero,r2
    c9f4:	10003a1e 	bne	r2,zero,cae0 <__subdf3+0x63c>
    c9f8:	3463c83a 	sub	r17,r6,r17
    c9fc:	194bc83a 	sub	r5,r3,r5
    ca00:	344d803a 	cmpltu	r6,r6,r17
    ca04:	298bc83a 	sub	r5,r5,r6
    ca08:	5021883a 	mov	r16,r10
    ca0c:	3825883a 	mov	r18,r7
    ca10:	003f0406 	br	c624 <__alt_mem_Flash_flash_data+0xf400c624>
    ca14:	1023883a 	mov	r17,r2
    ca18:	003f0706 	br	c638 <__alt_mem_Flash_flash_data+0xf400c638>
    ca1c:	0101ffc4 	movi	r4,2047
    ca20:	813f331e 	bne	r16,r4,c6f0 <__alt_mem_Flash_flash_data+0xf400c6f0>
    ca24:	003ec206 	br	c530 <__alt_mem_Flash_flash_data+0xf400c530>
    ca28:	0027883a 	mov	r19,zero
    ca2c:	003fb006 	br	c8f0 <__alt_mem_Flash_flash_data+0xf400c8f0>
    ca30:	0005883a 	mov	r2,zero
    ca34:	003fbb06 	br	c924 <__alt_mem_Flash_flash_data+0xf400c924>
    ca38:	2c44b03a 	or	r2,r5,r17
    ca3c:	80008b1e 	bne	r16,zero,cc6c <__subdf3+0x7c8>
    ca40:	1000b526 	beq	r2,zero,cd18 <__subdf3+0x874>
    ca44:	1984b03a 	or	r2,r3,r6
    ca48:	103eb926 	beq	r2,zero,c530 <__alt_mem_Flash_flash_data+0xf400c530>
    ca4c:	3449883a 	add	r4,r6,r17
    ca50:	2463803a 	cmpltu	r17,r4,r17
    ca54:	194b883a 	add	r5,r3,r5
    ca58:	2c4b883a 	add	r5,r5,r17
    ca5c:	2880202c 	andhi	r2,r5,128
    ca60:	2023883a 	mov	r17,r4
    ca64:	103f5c26 	beq	r2,zero,c7d8 <__alt_mem_Flash_flash_data+0xf400c7d8>
    ca68:	00bfe034 	movhi	r2,65408
    ca6c:	10bfffc4 	addi	r2,r2,-1
    ca70:	4821883a 	mov	r16,r9
    ca74:	288a703a 	and	r5,r5,r2
    ca78:	003ead06 	br	c530 <__alt_mem_Flash_flash_data+0xf400c530>
    ca7c:	2c44b03a 	or	r2,r5,r17
    ca80:	8000291e 	bne	r16,zero,cb28 <__subdf3+0x684>
    ca84:	10004f1e 	bne	r2,zero,cbc4 <__subdf3+0x720>
    ca88:	1984b03a 	or	r2,r3,r6
    ca8c:	10000426 	beq	r2,zero,caa0 <__subdf3+0x5fc>
    ca90:	180b883a 	mov	r5,r3
    ca94:	3023883a 	mov	r17,r6
    ca98:	3825883a 	mov	r18,r7
    ca9c:	003ea406 	br	c530 <__alt_mem_Flash_flash_data+0xf400c530>
    caa0:	0011883a 	mov	r8,zero
    caa4:	000b883a 	mov	r5,zero
    caa8:	0023883a 	mov	r17,zero
    caac:	003f0006 	br	c6b0 <__alt_mem_Flash_flash_data+0xf400c6b0>
    cab0:	11fff804 	addi	r7,r2,-32
    cab4:	19c8d83a 	srl	r4,r3,r7
    cab8:	01c00804 	movi	r7,32
    cabc:	11c07e26 	beq	r2,r7,ccb8 <__subdf3+0x814>
    cac0:	01c01004 	movi	r7,64
    cac4:	3885c83a 	sub	r2,r7,r2
    cac8:	1884983a 	sll	r2,r3,r2
    cacc:	118cb03a 	or	r6,r2,r6
    cad0:	300ec03a 	cmpne	r7,r6,zero
    cad4:	390eb03a 	or	r7,r7,r4
    cad8:	0005883a 	mov	r2,zero
    cadc:	003f0906 	br	c704 <__alt_mem_Flash_flash_data+0xf400c704>
    cae0:	0101ffc4 	movi	r4,2047
    cae4:	513f991e 	bne	r10,r4,c94c <__alt_mem_Flash_flash_data+0xf400c94c>
    cae8:	180b883a 	mov	r5,r3
    caec:	3023883a 	mov	r17,r6
    caf0:	5021883a 	mov	r16,r10
    caf4:	3825883a 	mov	r18,r7
    caf8:	003e8d06 	br	c530 <__alt_mem_Flash_flash_data+0xf400c530>
    cafc:	80001a1e 	bne	r16,zero,cb68 <__subdf3+0x6c4>
    cb00:	2c48b03a 	or	r4,r5,r17
    cb04:	20005526 	beq	r4,zero,cc5c <__subdf3+0x7b8>
    cb08:	0084303a 	nor	r2,zero,r2
    cb0c:	1000511e 	bne	r2,zero,cc54 <__subdf3+0x7b0>
    cb10:	89a3883a 	add	r17,r17,r6
    cb14:	194b883a 	add	r5,r3,r5
    cb18:	898d803a 	cmpltu	r6,r17,r6
    cb1c:	298b883a 	add	r5,r5,r6
    cb20:	5021883a 	mov	r16,r10
    cb24:	003efc06 	br	c718 <__alt_mem_Flash_flash_data+0xf400c718>
    cb28:	1000341e 	bne	r2,zero,cbfc <__subdf3+0x758>
    cb2c:	1984b03a 	or	r2,r3,r6
    cb30:	10006f26 	beq	r2,zero,ccf0 <__subdf3+0x84c>
    cb34:	180b883a 	mov	r5,r3
    cb38:	3023883a 	mov	r17,r6
    cb3c:	3825883a 	mov	r18,r7
    cb40:	0401ffc4 	movi	r16,2047
    cb44:	003e7a06 	br	c530 <__alt_mem_Flash_flash_data+0xf400c530>
    cb48:	2c62b03a 	or	r17,r5,r17
    cb4c:	8822c03a 	cmpne	r17,r17,zero
    cb50:	0005883a 	mov	r2,zero
    cb54:	003f8a06 	br	c980 <__alt_mem_Flash_flash_data+0xf400c980>
    cb58:	3821883a 	mov	r16,r7
    cb5c:	000b883a 	mov	r5,zero
    cb60:	0023883a 	mov	r17,zero
    cb64:	003ed206 	br	c6b0 <__alt_mem_Flash_flash_data+0xf400c6b0>
    cb68:	0101ffc4 	movi	r4,2047
    cb6c:	51003b26 	beq	r10,r4,cc5c <__subdf3+0x7b8>
    cb70:	0085c83a 	sub	r2,zero,r2
    cb74:	29402034 	orhi	r5,r5,128
    cb78:	01000e04 	movi	r4,56
    cb7c:	20806216 	blt	r4,r2,cd08 <__subdf3+0x864>
    cb80:	010007c4 	movi	r4,31
    cb84:	20806b16 	blt	r4,r2,cd34 <__subdf3+0x890>
    cb88:	01000804 	movi	r4,32
    cb8c:	2089c83a 	sub	r4,r4,r2
    cb90:	2912983a 	sll	r9,r5,r4
    cb94:	888ed83a 	srl	r7,r17,r2
    cb98:	8908983a 	sll	r4,r17,r4
    cb9c:	2884d83a 	srl	r2,r5,r2
    cba0:	49e2b03a 	or	r17,r9,r7
    cba4:	2008c03a 	cmpne	r4,r4,zero
    cba8:	8922b03a 	or	r17,r17,r4
    cbac:	89a3883a 	add	r17,r17,r6
    cbb0:	10c5883a 	add	r2,r2,r3
    cbb4:	898d803a 	cmpltu	r6,r17,r6
    cbb8:	118b883a 	add	r5,r2,r6
    cbbc:	5021883a 	mov	r16,r10
    cbc0:	003ed506 	br	c718 <__alt_mem_Flash_flash_data+0xf400c718>
    cbc4:	1984b03a 	or	r2,r3,r6
    cbc8:	103e5926 	beq	r2,zero,c530 <__alt_mem_Flash_flash_data+0xf400c530>
    cbcc:	8989c83a 	sub	r4,r17,r6
    cbd0:	8911803a 	cmpltu	r8,r17,r4
    cbd4:	28c5c83a 	sub	r2,r5,r3
    cbd8:	1205c83a 	sub	r2,r2,r8
    cbdc:	1200202c 	andhi	r8,r2,128
    cbe0:	403ef926 	beq	r8,zero,c7c8 <__alt_mem_Flash_flash_data+0xf400c7c8>
    cbe4:	3463c83a 	sub	r17,r6,r17
    cbe8:	194bc83a 	sub	r5,r3,r5
    cbec:	344d803a 	cmpltu	r6,r6,r17
    cbf0:	298bc83a 	sub	r5,r5,r6
    cbf4:	3825883a 	mov	r18,r7
    cbf8:	003e4d06 	br	c530 <__alt_mem_Flash_flash_data+0xf400c530>
    cbfc:	1984b03a 	or	r2,r3,r6
    cc00:	10002b26 	beq	r2,zero,ccb0 <__subdf3+0x80c>
    cc04:	2808d0fa 	srli	r4,r5,3
    cc08:	8822d0fa 	srli	r17,r17,3
    cc0c:	280a977a 	slli	r5,r5,29
    cc10:	2080022c 	andhi	r2,r4,8
    cc14:	2c62b03a 	or	r17,r5,r17
    cc18:	10000826 	beq	r2,zero,cc3c <__subdf3+0x798>
    cc1c:	1810d0fa 	srli	r8,r3,3
    cc20:	4080022c 	andhi	r2,r8,8
    cc24:	1000051e 	bne	r2,zero,cc3c <__subdf3+0x798>
    cc28:	300cd0fa 	srli	r6,r6,3
    cc2c:	1804977a 	slli	r2,r3,29
    cc30:	4009883a 	mov	r4,r8
    cc34:	3825883a 	mov	r18,r7
    cc38:	11a2b03a 	or	r17,r2,r6
    cc3c:	880ad77a 	srli	r5,r17,29
    cc40:	200890fa 	slli	r4,r4,3
    cc44:	882290fa 	slli	r17,r17,3
    cc48:	0401ffc4 	movi	r16,2047
    cc4c:	290ab03a 	or	r5,r5,r4
    cc50:	003e3706 	br	c530 <__alt_mem_Flash_flash_data+0xf400c530>
    cc54:	0101ffc4 	movi	r4,2047
    cc58:	513fc71e 	bne	r10,r4,cb78 <__alt_mem_Flash_flash_data+0xf400cb78>
    cc5c:	180b883a 	mov	r5,r3
    cc60:	3023883a 	mov	r17,r6
    cc64:	5021883a 	mov	r16,r10
    cc68:	003e3106 	br	c530 <__alt_mem_Flash_flash_data+0xf400c530>
    cc6c:	10002d26 	beq	r2,zero,cd24 <__subdf3+0x880>
    cc70:	1984b03a 	or	r2,r3,r6
    cc74:	10000e26 	beq	r2,zero,ccb0 <__subdf3+0x80c>
    cc78:	2808d0fa 	srli	r4,r5,3
    cc7c:	8822d0fa 	srli	r17,r17,3
    cc80:	280a977a 	slli	r5,r5,29
    cc84:	2080022c 	andhi	r2,r4,8
    cc88:	2c62b03a 	or	r17,r5,r17
    cc8c:	103feb26 	beq	r2,zero,cc3c <__alt_mem_Flash_flash_data+0xf400cc3c>
    cc90:	180ed0fa 	srli	r7,r3,3
    cc94:	3880022c 	andhi	r2,r7,8
    cc98:	103fe81e 	bne	r2,zero,cc3c <__alt_mem_Flash_flash_data+0xf400cc3c>
    cc9c:	300cd0fa 	srli	r6,r6,3
    cca0:	1804977a 	slli	r2,r3,29
    cca4:	3809883a 	mov	r4,r7
    cca8:	11a2b03a 	or	r17,r2,r6
    ccac:	003fe306 	br	cc3c <__alt_mem_Flash_flash_data+0xf400cc3c>
    ccb0:	0401ffc4 	movi	r16,2047
    ccb4:	003e1e06 	br	c530 <__alt_mem_Flash_flash_data+0xf400c530>
    ccb8:	0005883a 	mov	r2,zero
    ccbc:	003f8306 	br	cacc <__alt_mem_Flash_flash_data+0xf400cacc>
    ccc0:	113ff804 	addi	r4,r2,-32
    ccc4:	02000804 	movi	r8,32
    ccc8:	2908d83a 	srl	r4,r5,r4
    cccc:	12002526 	beq	r2,r8,cd64 <__subdf3+0x8c0>
    ccd0:	02001004 	movi	r8,64
    ccd4:	4085c83a 	sub	r2,r8,r2
    ccd8:	288a983a 	sll	r5,r5,r2
    ccdc:	2c62b03a 	or	r17,r5,r17
    cce0:	8822c03a 	cmpne	r17,r17,zero
    cce4:	8922b03a 	or	r17,r17,r4
    cce8:	0005883a 	mov	r2,zero
    ccec:	003f2406 	br	c980 <__alt_mem_Flash_flash_data+0xf400c980>
    ccf0:	01402034 	movhi	r5,128
    ccf4:	0011883a 	mov	r8,zero
    ccf8:	297fffc4 	addi	r5,r5,-1
    ccfc:	047ffe04 	movi	r17,-8
    cd00:	0401ffc4 	movi	r16,2047
    cd04:	003e6a06 	br	c6b0 <__alt_mem_Flash_flash_data+0xf400c6b0>
    cd08:	2c62b03a 	or	r17,r5,r17
    cd0c:	8822c03a 	cmpne	r17,r17,zero
    cd10:	0005883a 	mov	r2,zero
    cd14:	003fa506 	br	cbac <__alt_mem_Flash_flash_data+0xf400cbac>
    cd18:	180b883a 	mov	r5,r3
    cd1c:	3023883a 	mov	r17,r6
    cd20:	003e0306 	br	c530 <__alt_mem_Flash_flash_data+0xf400c530>
    cd24:	180b883a 	mov	r5,r3
    cd28:	3023883a 	mov	r17,r6
    cd2c:	0401ffc4 	movi	r16,2047
    cd30:	003dff06 	br	c530 <__alt_mem_Flash_flash_data+0xf400c530>
    cd34:	113ff804 	addi	r4,r2,-32
    cd38:	01c00804 	movi	r7,32
    cd3c:	2908d83a 	srl	r4,r5,r4
    cd40:	11c00a26 	beq	r2,r7,cd6c <__subdf3+0x8c8>
    cd44:	01c01004 	movi	r7,64
    cd48:	3885c83a 	sub	r2,r7,r2
    cd4c:	288a983a 	sll	r5,r5,r2
    cd50:	2c62b03a 	or	r17,r5,r17
    cd54:	8822c03a 	cmpne	r17,r17,zero
    cd58:	8922b03a 	or	r17,r17,r4
    cd5c:	0005883a 	mov	r2,zero
    cd60:	003f9206 	br	cbac <__alt_mem_Flash_flash_data+0xf400cbac>
    cd64:	000b883a 	mov	r5,zero
    cd68:	003fdc06 	br	ccdc <__alt_mem_Flash_flash_data+0xf400ccdc>
    cd6c:	000b883a 	mov	r5,zero
    cd70:	003ff706 	br	cd50 <__alt_mem_Flash_flash_data+0xf400cd50>

0000cd74 <__fixdfsi>:
    cd74:	2806d53a 	srli	r3,r5,20
    cd78:	00800434 	movhi	r2,16
    cd7c:	10bfffc4 	addi	r2,r2,-1
    cd80:	18c1ffcc 	andi	r3,r3,2047
    cd84:	0180ff84 	movi	r6,1022
    cd88:	2884703a 	and	r2,r5,r2
    cd8c:	280ad7fa 	srli	r5,r5,31
    cd90:	30c0130e 	bge	r6,r3,cde0 <__fixdfsi+0x6c>
    cd94:	01810744 	movi	r6,1053
    cd98:	30c00d16 	blt	r6,r3,cdd0 <__fixdfsi+0x5c>
    cd9c:	01810cc4 	movi	r6,1075
    cda0:	30cdc83a 	sub	r6,r6,r3
    cda4:	01c007c4 	movi	r7,31
    cda8:	10800434 	orhi	r2,r2,16
    cdac:	39800e0e 	bge	r7,r6,cde8 <__fixdfsi+0x74>
    cdb0:	010104c4 	movi	r4,1043
    cdb4:	20c7c83a 	sub	r3,r4,r3
    cdb8:	10c6d83a 	srl	r3,r2,r3
    cdbc:	29403fcc 	andi	r5,r5,255
    cdc0:	0145c83a 	sub	r2,zero,r5
    cdc4:	1884f03a 	xor	r2,r3,r2
    cdc8:	1145883a 	add	r2,r2,r5
    cdcc:	f800283a 	ret
    cdd0:	00a00034 	movhi	r2,32768
    cdd4:	10bfffc4 	addi	r2,r2,-1
    cdd8:	2885883a 	add	r2,r5,r2
    cddc:	f800283a 	ret
    cde0:	0005883a 	mov	r2,zero
    cde4:	f800283a 	ret
    cde8:	18fefb44 	addi	r3,r3,-1043
    cdec:	2188d83a 	srl	r4,r4,r6
    cdf0:	10c6983a 	sll	r3,r2,r3
    cdf4:	20c6b03a 	or	r3,r4,r3
    cdf8:	003ff006 	br	cdbc <__alt_mem_Flash_flash_data+0xf400cdbc>

0000cdfc <__floatsidf>:
    cdfc:	defffd04 	addi	sp,sp,-12
    ce00:	dc400115 	stw	r17,4(sp)
    ce04:	dfc00215 	stw	ra,8(sp)
    ce08:	dc000015 	stw	r16,0(sp)
    ce0c:	2023883a 	mov	r17,r4
    ce10:	20001426 	beq	r4,zero,ce64 <__floatsidf+0x68>
    ce14:	2020d7fa 	srli	r16,r4,31
    ce18:	80000126 	beq	r16,zero,ce20 <__floatsidf+0x24>
    ce1c:	0123c83a 	sub	r17,zero,r4
    ce20:	8809883a 	mov	r4,r17
    ce24:	000cf700 	call	cf70 <__clzsi2>
    ce28:	01410784 	movi	r5,1054
    ce2c:	00c00284 	movi	r3,10
    ce30:	288bc83a 	sub	r5,r5,r2
    ce34:	18801c16 	blt	r3,r2,cea8 <__floatsidf+0xac>
    ce38:	00c002c4 	movi	r3,11
    ce3c:	1887c83a 	sub	r3,r3,r2
    ce40:	88c8d83a 	srl	r4,r17,r3
    ce44:	00c00434 	movhi	r3,16
    ce48:	18ffffc4 	addi	r3,r3,-1
    ce4c:	10800544 	addi	r2,r2,21
    ce50:	20c8703a 	and	r4,r4,r3
    ce54:	8884983a 	sll	r2,r17,r2
    ce58:	28c1ffcc 	andi	r3,r5,2047
    ce5c:	800d883a 	mov	r6,r16
    ce60:	00000406 	br	ce74 <__floatsidf+0x78>
    ce64:	000d883a 	mov	r6,zero
    ce68:	0007883a 	mov	r3,zero
    ce6c:	0009883a 	mov	r4,zero
    ce70:	0005883a 	mov	r2,zero
    ce74:	180a953a 	slli	r5,r3,20
    ce78:	31803fcc 	andi	r6,r6,255
    ce7c:	00c00434 	movhi	r3,16
    ce80:	300c97fa 	slli	r6,r6,31
    ce84:	18ffffc4 	addi	r3,r3,-1
    ce88:	20c6703a 	and	r3,r4,r3
    ce8c:	1946b03a 	or	r3,r3,r5
    ce90:	1986b03a 	or	r3,r3,r6
    ce94:	dfc00217 	ldw	ra,8(sp)
    ce98:	dc400117 	ldw	r17,4(sp)
    ce9c:	dc000017 	ldw	r16,0(sp)
    cea0:	dec00304 	addi	sp,sp,12
    cea4:	f800283a 	ret
    cea8:	10fffd44 	addi	r3,r2,-11
    ceac:	88c8983a 	sll	r4,r17,r3
    ceb0:	00800434 	movhi	r2,16
    ceb4:	10bfffc4 	addi	r2,r2,-1
    ceb8:	2088703a 	and	r4,r4,r2
    cebc:	28c1ffcc 	andi	r3,r5,2047
    cec0:	800d883a 	mov	r6,r16
    cec4:	0005883a 	mov	r2,zero
    cec8:	003fea06 	br	ce74 <__alt_mem_Flash_flash_data+0xf400ce74>

0000cecc <__floatunsidf>:
    cecc:	defffe04 	addi	sp,sp,-8
    ced0:	dc000015 	stw	r16,0(sp)
    ced4:	dfc00115 	stw	ra,4(sp)
    ced8:	2021883a 	mov	r16,r4
    cedc:	20001026 	beq	r4,zero,cf20 <__floatunsidf+0x54>
    cee0:	000cf700 	call	cf70 <__clzsi2>
    cee4:	01410784 	movi	r5,1054
    cee8:	100d883a 	mov	r6,r2
    ceec:	288bc83a 	sub	r5,r5,r2
    cef0:	00800284 	movi	r2,10
    cef4:	11801616 	blt	r2,r6,cf50 <__floatunsidf+0x84>
    cef8:	008002c4 	movi	r2,11
    cefc:	1185c83a 	sub	r2,r2,r6
    cf00:	8084d83a 	srl	r2,r16,r2
    cf04:	00c00434 	movhi	r3,16
    cf08:	31c00544 	addi	r7,r6,21
    cf0c:	18ffffc4 	addi	r3,r3,-1
    cf10:	81e0983a 	sll	r16,r16,r7
    cf14:	10cc703a 	and	r6,r2,r3
    cf18:	2941ffcc 	andi	r5,r5,2047
    cf1c:	00000206 	br	cf28 <__floatunsidf+0x5c>
    cf20:	000b883a 	mov	r5,zero
    cf24:	000d883a 	mov	r6,zero
    cf28:	280a953a 	slli	r5,r5,20
    cf2c:	00c00434 	movhi	r3,16
    cf30:	18ffffc4 	addi	r3,r3,-1
    cf34:	30c6703a 	and	r3,r6,r3
    cf38:	8005883a 	mov	r2,r16
    cf3c:	1946b03a 	or	r3,r3,r5
    cf40:	dfc00117 	ldw	ra,4(sp)
    cf44:	dc000017 	ldw	r16,0(sp)
    cf48:	dec00204 	addi	sp,sp,8
    cf4c:	f800283a 	ret
    cf50:	31bffd44 	addi	r6,r6,-11
    cf54:	818c983a 	sll	r6,r16,r6
    cf58:	00800434 	movhi	r2,16
    cf5c:	10bfffc4 	addi	r2,r2,-1
    cf60:	2941ffcc 	andi	r5,r5,2047
    cf64:	0021883a 	mov	r16,zero
    cf68:	308c703a 	and	r6,r6,r2
    cf6c:	003fee06 	br	cf28 <__alt_mem_Flash_flash_data+0xf400cf28>

0000cf70 <__clzsi2>:
    cf70:	00bfffd4 	movui	r2,65535
    cf74:	11000b36 	bltu	r2,r4,cfa4 <__clzsi2+0x34>
    cf78:	00803fc4 	movi	r2,255
    cf7c:	1100122e 	bgeu	r2,r4,cfc8 <__clzsi2+0x58>
    cf80:	00c00204 	movi	r3,8
    cf84:	01400604 	movi	r5,24
    cf88:	20c8d83a 	srl	r4,r4,r3
    cf8c:	008000b4 	movhi	r2,2
    cf90:	10a62504 	addi	r2,r2,-26476
    cf94:	1109883a 	add	r4,r2,r4
    cf98:	20800003 	ldbu	r2,0(r4)
    cf9c:	2885c83a 	sub	r2,r5,r2
    cfa0:	f800283a 	ret
    cfa4:	00804034 	movhi	r2,256
    cfa8:	10bfffc4 	addi	r2,r2,-1
    cfac:	11000336 	bltu	r2,r4,cfbc <__clzsi2+0x4c>
    cfb0:	00c00404 	movi	r3,16
    cfb4:	180b883a 	mov	r5,r3
    cfb8:	003ff306 	br	cf88 <__alt_mem_Flash_flash_data+0xf400cf88>
    cfbc:	00c00604 	movi	r3,24
    cfc0:	01400204 	movi	r5,8
    cfc4:	003ff006 	br	cf88 <__alt_mem_Flash_flash_data+0xf400cf88>
    cfc8:	0007883a 	mov	r3,zero
    cfcc:	01400804 	movi	r5,32
    cfd0:	003fed06 	br	cf88 <__alt_mem_Flash_flash_data+0xf400cf88>

0000cfd4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    cfd4:	defffe04 	addi	sp,sp,-8
    cfd8:	dfc00115 	stw	ra,4(sp)
    cfdc:	df000015 	stw	fp,0(sp)
    cfe0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    cfe4:	008000b4 	movhi	r2,2
    cfe8:	10aec404 	addi	r2,r2,-17648
    cfec:	10800017 	ldw	r2,0(r2)
    cff0:	10000526 	beq	r2,zero,d008 <alt_get_errno+0x34>
    cff4:	008000b4 	movhi	r2,2
    cff8:	10aec404 	addi	r2,r2,-17648
    cffc:	10800017 	ldw	r2,0(r2)
    d000:	103ee83a 	callr	r2
    d004:	00000206 	br	d010 <alt_get_errno+0x3c>
    d008:	008000b4 	movhi	r2,2
    d00c:	10b6b904 	addi	r2,r2,-9500
}
    d010:	e037883a 	mov	sp,fp
    d014:	dfc00117 	ldw	ra,4(sp)
    d018:	df000017 	ldw	fp,0(sp)
    d01c:	dec00204 	addi	sp,sp,8
    d020:	f800283a 	ret

0000d024 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
    d024:	defffb04 	addi	sp,sp,-20
    d028:	dfc00415 	stw	ra,16(sp)
    d02c:	df000315 	stw	fp,12(sp)
    d030:	df000304 	addi	fp,sp,12
    d034:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
    d038:	e0bfff17 	ldw	r2,-4(fp)
    d03c:	10000616 	blt	r2,zero,d058 <close+0x34>
    d040:	e0bfff17 	ldw	r2,-4(fp)
    d044:	10c00324 	muli	r3,r2,12
    d048:	008000b4 	movhi	r2,2
    d04c:	10a95304 	addi	r2,r2,-23220
    d050:	1885883a 	add	r2,r3,r2
    d054:	00000106 	br	d05c <close+0x38>
    d058:	0005883a 	mov	r2,zero
    d05c:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
    d060:	e0bffd17 	ldw	r2,-12(fp)
    d064:	10001926 	beq	r2,zero,d0cc <close+0xa8>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
    d068:	e0bffd17 	ldw	r2,-12(fp)
    d06c:	10800017 	ldw	r2,0(r2)
    d070:	10800417 	ldw	r2,16(r2)
    d074:	10000626 	beq	r2,zero,d090 <close+0x6c>
    d078:	e0bffd17 	ldw	r2,-12(fp)
    d07c:	10800017 	ldw	r2,0(r2)
    d080:	10800417 	ldw	r2,16(r2)
    d084:	e13ffd17 	ldw	r4,-12(fp)
    d088:	103ee83a 	callr	r2
    d08c:	00000106 	br	d094 <close+0x70>
    d090:	0005883a 	mov	r2,zero
    d094:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
    d098:	e13fff17 	ldw	r4,-4(fp)
    d09c:	000d73c0 	call	d73c <alt_release_fd>
    if (rval < 0)
    d0a0:	e0bffe17 	ldw	r2,-8(fp)
    d0a4:	1000070e 	bge	r2,zero,d0c4 <close+0xa0>
    {
      ALT_ERRNO = -rval;
    d0a8:	000cfd40 	call	cfd4 <alt_get_errno>
    d0ac:	1007883a 	mov	r3,r2
    d0b0:	e0bffe17 	ldw	r2,-8(fp)
    d0b4:	0085c83a 	sub	r2,zero,r2
    d0b8:	18800015 	stw	r2,0(r3)
      return -1;
    d0bc:	00bfffc4 	movi	r2,-1
    d0c0:	00000706 	br	d0e0 <close+0xbc>
    }
    return 0;
    d0c4:	0005883a 	mov	r2,zero
    d0c8:	00000506 	br	d0e0 <close+0xbc>
  }
  else
  {
    ALT_ERRNO = EBADFD;
    d0cc:	000cfd40 	call	cfd4 <alt_get_errno>
    d0d0:	1007883a 	mov	r3,r2
    d0d4:	00801444 	movi	r2,81
    d0d8:	18800015 	stw	r2,0(r3)
    return -1;
    d0dc:	00bfffc4 	movi	r2,-1
  }
}
    d0e0:	e037883a 	mov	sp,fp
    d0e4:	dfc00117 	ldw	ra,4(sp)
    d0e8:	df000017 	ldw	fp,0(sp)
    d0ec:	dec00204 	addi	sp,sp,8
    d0f0:	f800283a 	ret

0000d0f4 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
    d0f4:	defffc04 	addi	sp,sp,-16
    d0f8:	df000315 	stw	fp,12(sp)
    d0fc:	df000304 	addi	fp,sp,12
    d100:	e13ffd15 	stw	r4,-12(fp)
    d104:	e17ffe15 	stw	r5,-8(fp)
    d108:	e1bfff15 	stw	r6,-4(fp)
  return len;
    d10c:	e0bfff17 	ldw	r2,-4(fp)
}
    d110:	e037883a 	mov	sp,fp
    d114:	df000017 	ldw	fp,0(sp)
    d118:	dec00104 	addi	sp,sp,4
    d11c:	f800283a 	ret

0000d120 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    d120:	defffe04 	addi	sp,sp,-8
    d124:	dfc00115 	stw	ra,4(sp)
    d128:	df000015 	stw	fp,0(sp)
    d12c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    d130:	008000b4 	movhi	r2,2
    d134:	10aec404 	addi	r2,r2,-17648
    d138:	10800017 	ldw	r2,0(r2)
    d13c:	10000526 	beq	r2,zero,d154 <alt_get_errno+0x34>
    d140:	008000b4 	movhi	r2,2
    d144:	10aec404 	addi	r2,r2,-17648
    d148:	10800017 	ldw	r2,0(r2)
    d14c:	103ee83a 	callr	r2
    d150:	00000206 	br	d15c <alt_get_errno+0x3c>
    d154:	008000b4 	movhi	r2,2
    d158:	10b6b904 	addi	r2,r2,-9500
}
    d15c:	e037883a 	mov	sp,fp
    d160:	dfc00117 	ldw	ra,4(sp)
    d164:	df000017 	ldw	fp,0(sp)
    d168:	dec00204 	addi	sp,sp,8
    d16c:	f800283a 	ret

0000d170 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
    d170:	defffb04 	addi	sp,sp,-20
    d174:	dfc00415 	stw	ra,16(sp)
    d178:	df000315 	stw	fp,12(sp)
    d17c:	df000304 	addi	fp,sp,12
    d180:	e13ffe15 	stw	r4,-8(fp)
    d184:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    d188:	e0bffe17 	ldw	r2,-8(fp)
    d18c:	10000616 	blt	r2,zero,d1a8 <fstat+0x38>
    d190:	e0bffe17 	ldw	r2,-8(fp)
    d194:	10c00324 	muli	r3,r2,12
    d198:	008000b4 	movhi	r2,2
    d19c:	10a95304 	addi	r2,r2,-23220
    d1a0:	1885883a 	add	r2,r3,r2
    d1a4:	00000106 	br	d1ac <fstat+0x3c>
    d1a8:	0005883a 	mov	r2,zero
    d1ac:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
    d1b0:	e0bffd17 	ldw	r2,-12(fp)
    d1b4:	10001026 	beq	r2,zero,d1f8 <fstat+0x88>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
    d1b8:	e0bffd17 	ldw	r2,-12(fp)
    d1bc:	10800017 	ldw	r2,0(r2)
    d1c0:	10800817 	ldw	r2,32(r2)
    d1c4:	10000726 	beq	r2,zero,d1e4 <fstat+0x74>
    {
      return fd->dev->fstat(fd, st);
    d1c8:	e0bffd17 	ldw	r2,-12(fp)
    d1cc:	10800017 	ldw	r2,0(r2)
    d1d0:	10800817 	ldw	r2,32(r2)
    d1d4:	e13ffd17 	ldw	r4,-12(fp)
    d1d8:	e17fff17 	ldw	r5,-4(fp)
    d1dc:	103ee83a 	callr	r2
    d1e0:	00000a06 	br	d20c <fstat+0x9c>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
    d1e4:	e0bfff17 	ldw	r2,-4(fp)
    d1e8:	00c80004 	movi	r3,8192
    d1ec:	10c00115 	stw	r3,4(r2)
      return 0;
    d1f0:	0005883a 	mov	r2,zero
    d1f4:	00000506 	br	d20c <fstat+0x9c>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
    d1f8:	000d1200 	call	d120 <alt_get_errno>
    d1fc:	1007883a 	mov	r3,r2
    d200:	00801444 	movi	r2,81
    d204:	18800015 	stw	r2,0(r3)
    return -1;
    d208:	00bfffc4 	movi	r2,-1
  }
}
    d20c:	e037883a 	mov	sp,fp
    d210:	dfc00117 	ldw	ra,4(sp)
    d214:	df000017 	ldw	fp,0(sp)
    d218:	dec00204 	addi	sp,sp,8
    d21c:	f800283a 	ret

0000d220 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    d220:	defffe04 	addi	sp,sp,-8
    d224:	dfc00115 	stw	ra,4(sp)
    d228:	df000015 	stw	fp,0(sp)
    d22c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    d230:	008000b4 	movhi	r2,2
    d234:	10aec404 	addi	r2,r2,-17648
    d238:	10800017 	ldw	r2,0(r2)
    d23c:	10000526 	beq	r2,zero,d254 <alt_get_errno+0x34>
    d240:	008000b4 	movhi	r2,2
    d244:	10aec404 	addi	r2,r2,-17648
    d248:	10800017 	ldw	r2,0(r2)
    d24c:	103ee83a 	callr	r2
    d250:	00000206 	br	d25c <alt_get_errno+0x3c>
    d254:	008000b4 	movhi	r2,2
    d258:	10b6b904 	addi	r2,r2,-9500
}
    d25c:	e037883a 	mov	sp,fp
    d260:	dfc00117 	ldw	ra,4(sp)
    d264:	df000017 	ldw	fp,0(sp)
    d268:	dec00204 	addi	sp,sp,8
    d26c:	f800283a 	ret

0000d270 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
    d270:	deffed04 	addi	sp,sp,-76
    d274:	dfc01215 	stw	ra,72(sp)
    d278:	df001115 	stw	fp,68(sp)
    d27c:	df001104 	addi	fp,sp,68
    d280:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    d284:	e0bfff17 	ldw	r2,-4(fp)
    d288:	10000616 	blt	r2,zero,d2a4 <isatty+0x34>
    d28c:	e0bfff17 	ldw	r2,-4(fp)
    d290:	10c00324 	muli	r3,r2,12
    d294:	008000b4 	movhi	r2,2
    d298:	10a95304 	addi	r2,r2,-23220
    d29c:	1885883a 	add	r2,r3,r2
    d2a0:	00000106 	br	d2a8 <isatty+0x38>
    d2a4:	0005883a 	mov	r2,zero
    d2a8:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
    d2ac:	e0bfef17 	ldw	r2,-68(fp)
    d2b0:	10000e26 	beq	r2,zero,d2ec <isatty+0x7c>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
    d2b4:	e0bfef17 	ldw	r2,-68(fp)
    d2b8:	10800017 	ldw	r2,0(r2)
    d2bc:	10800817 	ldw	r2,32(r2)
    d2c0:	1000021e 	bne	r2,zero,d2cc <isatty+0x5c>
    {
      return 1;
    d2c4:	00800044 	movi	r2,1
    d2c8:	00000d06 	br	d300 <isatty+0x90>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
    d2cc:	e0bff004 	addi	r2,fp,-64
    d2d0:	e13fff17 	ldw	r4,-4(fp)
    d2d4:	100b883a 	mov	r5,r2
    d2d8:	000d1700 	call	d170 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
    d2dc:	e0bff117 	ldw	r2,-60(fp)
    d2e0:	10880020 	cmpeqi	r2,r2,8192
    d2e4:	10803fcc 	andi	r2,r2,255
    d2e8:	00000506 	br	d300 <isatty+0x90>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
    d2ec:	000d2200 	call	d220 <alt_get_errno>
    d2f0:	1007883a 	mov	r3,r2
    d2f4:	00801444 	movi	r2,81
    d2f8:	18800015 	stw	r2,0(r3)
    return 0;
    d2fc:	0005883a 	mov	r2,zero
  }
}
    d300:	e037883a 	mov	sp,fp
    d304:	dfc00117 	ldw	ra,4(sp)
    d308:	df000017 	ldw	fp,0(sp)
    d30c:	dec00204 	addi	sp,sp,8
    d310:	f800283a 	ret

0000d314 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
    d314:	defffc04 	addi	sp,sp,-16
    d318:	df000315 	stw	fp,12(sp)
    d31c:	df000304 	addi	fp,sp,12
    d320:	e13ffd15 	stw	r4,-12(fp)
    d324:	e17ffe15 	stw	r5,-8(fp)
    d328:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
    d32c:	e0fffe17 	ldw	r3,-8(fp)
    d330:	e0bffd17 	ldw	r2,-12(fp)
    d334:	18800c26 	beq	r3,r2,d368 <alt_load_section+0x54>
  {
    while( to != end )
    d338:	00000806 	br	d35c <alt_load_section+0x48>
    {
      *to++ = *from++;
    d33c:	e0bffe17 	ldw	r2,-8(fp)
    d340:	10c00104 	addi	r3,r2,4
    d344:	e0fffe15 	stw	r3,-8(fp)
    d348:	e0fffd17 	ldw	r3,-12(fp)
    d34c:	19000104 	addi	r4,r3,4
    d350:	e13ffd15 	stw	r4,-12(fp)
    d354:	18c00017 	ldw	r3,0(r3)
    d358:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
    d35c:	e0fffe17 	ldw	r3,-8(fp)
    d360:	e0bfff17 	ldw	r2,-4(fp)
    d364:	18bff51e 	bne	r3,r2,d33c <__alt_mem_Flash_flash_data+0xf400d33c>
    {
      *to++ = *from++;
    }
  }
}
    d368:	e037883a 	mov	sp,fp
    d36c:	df000017 	ldw	fp,0(sp)
    d370:	dec00104 	addi	sp,sp,4
    d374:	f800283a 	ret

0000d378 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
    d378:	defffe04 	addi	sp,sp,-8
    d37c:	dfc00115 	stw	ra,4(sp)
    d380:	df000015 	stw	fp,0(sp)
    d384:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
    d388:	010000b4 	movhi	r4,2
    d38c:	212ee804 	addi	r4,r4,-17504
    d390:	014000b4 	movhi	r5,2
    d394:	29672004 	addi	r5,r5,-25472
    d398:	018000b4 	movhi	r6,2
    d39c:	31aee804 	addi	r6,r6,-17504
    d3a0:	000d3140 	call	d314 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
    d3a4:	01000034 	movhi	r4,0
    d3a8:	21000804 	addi	r4,r4,32
    d3ac:	01400034 	movhi	r5,0
    d3b0:	29400804 	addi	r5,r5,32
    d3b4:	01800034 	movhi	r6,0
    d3b8:	31809104 	addi	r6,r6,580
    d3bc:	000d3140 	call	d314 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
    d3c0:	010000b4 	movhi	r4,2
    d3c4:	21259404 	addi	r4,r4,-27056
    d3c8:	014000b4 	movhi	r5,2
    d3cc:	29659404 	addi	r5,r5,-27056
    d3d0:	018000b4 	movhi	r6,2
    d3d4:	31a72004 	addi	r6,r6,-25472
    d3d8:	000d3140 	call	d314 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
    d3dc:	00182980 	call	18298 <alt_dcache_flush_all>
  alt_icache_flush_all();
    d3e0:	00184f00 	call	184f0 <alt_icache_flush_all>
}
    d3e4:	e037883a 	mov	sp,fp
    d3e8:	dfc00117 	ldw	ra,4(sp)
    d3ec:	df000017 	ldw	fp,0(sp)
    d3f0:	dec00204 	addi	sp,sp,8
    d3f4:	f800283a 	ret

0000d3f8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    d3f8:	defffe04 	addi	sp,sp,-8
    d3fc:	dfc00115 	stw	ra,4(sp)
    d400:	df000015 	stw	fp,0(sp)
    d404:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    d408:	008000b4 	movhi	r2,2
    d40c:	10aec404 	addi	r2,r2,-17648
    d410:	10800017 	ldw	r2,0(r2)
    d414:	10000526 	beq	r2,zero,d42c <alt_get_errno+0x34>
    d418:	008000b4 	movhi	r2,2
    d41c:	10aec404 	addi	r2,r2,-17648
    d420:	10800017 	ldw	r2,0(r2)
    d424:	103ee83a 	callr	r2
    d428:	00000206 	br	d434 <alt_get_errno+0x3c>
    d42c:	008000b4 	movhi	r2,2
    d430:	10b6b904 	addi	r2,r2,-9500
}
    d434:	e037883a 	mov	sp,fp
    d438:	dfc00117 	ldw	ra,4(sp)
    d43c:	df000017 	ldw	fp,0(sp)
    d440:	dec00204 	addi	sp,sp,8
    d444:	f800283a 	ret

0000d448 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
    d448:	defff904 	addi	sp,sp,-28
    d44c:	dfc00615 	stw	ra,24(sp)
    d450:	df000515 	stw	fp,20(sp)
    d454:	df000504 	addi	fp,sp,20
    d458:	e13ffd15 	stw	r4,-12(fp)
    d45c:	e17ffe15 	stw	r5,-8(fp)
    d460:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
    d464:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    d468:	e0bffd17 	ldw	r2,-12(fp)
    d46c:	10000616 	blt	r2,zero,d488 <lseek+0x40>
    d470:	e0bffd17 	ldw	r2,-12(fp)
    d474:	10c00324 	muli	r3,r2,12
    d478:	008000b4 	movhi	r2,2
    d47c:	10a95304 	addi	r2,r2,-23220
    d480:	1885883a 	add	r2,r3,r2
    d484:	00000106 	br	d48c <lseek+0x44>
    d488:	0005883a 	mov	r2,zero
    d48c:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
    d490:	e0bffc17 	ldw	r2,-16(fp)
    d494:	10001026 	beq	r2,zero,d4d8 <lseek+0x90>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
    d498:	e0bffc17 	ldw	r2,-16(fp)
    d49c:	10800017 	ldw	r2,0(r2)
    d4a0:	10800717 	ldw	r2,28(r2)
    d4a4:	10000926 	beq	r2,zero,d4cc <lseek+0x84>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
    d4a8:	e0bffc17 	ldw	r2,-16(fp)
    d4ac:	10800017 	ldw	r2,0(r2)
    d4b0:	10800717 	ldw	r2,28(r2)
    d4b4:	e13ffc17 	ldw	r4,-16(fp)
    d4b8:	e17ffe17 	ldw	r5,-8(fp)
    d4bc:	e1bfff17 	ldw	r6,-4(fp)
    d4c0:	103ee83a 	callr	r2
    d4c4:	e0bffb15 	stw	r2,-20(fp)
    d4c8:	00000506 	br	d4e0 <lseek+0x98>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
    d4cc:	00bfde84 	movi	r2,-134
    d4d0:	e0bffb15 	stw	r2,-20(fp)
    d4d4:	00000206 	br	d4e0 <lseek+0x98>
    }
  }
  else  
  {
    rc = -EBADFD;
    d4d8:	00bfebc4 	movi	r2,-81
    d4dc:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
    d4e0:	e0bffb17 	ldw	r2,-20(fp)
    d4e4:	1000070e 	bge	r2,zero,d504 <lseek+0xbc>
  {
    ALT_ERRNO = -rc;
    d4e8:	000d3f80 	call	d3f8 <alt_get_errno>
    d4ec:	1007883a 	mov	r3,r2
    d4f0:	e0bffb17 	ldw	r2,-20(fp)
    d4f4:	0085c83a 	sub	r2,zero,r2
    d4f8:	18800015 	stw	r2,0(r3)
    rc = -1;
    d4fc:	00bfffc4 	movi	r2,-1
    d500:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
    d504:	e0bffb17 	ldw	r2,-20(fp)
}
    d508:	e037883a 	mov	sp,fp
    d50c:	dfc00117 	ldw	ra,4(sp)
    d510:	df000017 	ldw	fp,0(sp)
    d514:	dec00204 	addi	sp,sp,8
    d518:	f800283a 	ret

0000d51c <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
    d51c:	defff904 	addi	sp,sp,-28
    d520:	dfc00615 	stw	ra,24(sp)
    d524:	df000515 	stw	fp,20(sp)
    d528:	df000504 	addi	fp,sp,20
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
    d52c:	0009883a 	mov	r4,zero
    d530:	00159680 	call	15968 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
    d534:	000e50c0 	call	e50c <OSInit>
    d538:	01000044 	movi	r4,1
    d53c:	001307c0 	call	1307c <OSSemCreate>
    d540:	1007883a 	mov	r3,r2
    d544:	008000b4 	movhi	r2,2
    d548:	10b6bf04 	addi	r2,r2,-9476
    d54c:	10c00015 	stw	r3,0(r2)
    d550:	01000044 	movi	r4,1
    d554:	001307c0 	call	1307c <OSSemCreate>
    d558:	1007883a 	mov	r3,r2
    d55c:	008000b4 	movhi	r2,2
    d560:	10b6c104 	addi	r2,r2,-9468
    d564:	10c00015 	stw	r3,0(r2)
    d568:	008000b4 	movhi	r2,2
    d56c:	10b6ba04 	addi	r2,r2,-9496
    d570:	e0bffc15 	stw	r2,-16(fp)
    d574:	00800044 	movi	r2,1
    d578:	e0bffd0d 	sth	r2,-12(fp)
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sem_create (OS_EVENT** sem, 
              INT16U value)
{
  *sem = OSSemCreate (value);
    d57c:	e0bffd0b 	ldhu	r2,-12(fp)
    d580:	1009883a 	mov	r4,r2
    d584:	001307c0 	call	1307c <OSSemCreate>
    d588:	1007883a 	mov	r3,r2
    d58c:	e0bffc17 	ldw	r2,-16(fp)
    d590:	10c00015 	stw	r3,0(r2)
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
    d594:	001599c0 	call	1599c <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
    d598:	010000b4 	movhi	r4,2
    d59c:	21266804 	addi	r4,r4,-26208
    d5a0:	014000b4 	movhi	r5,2
    d5a4:	29666804 	addi	r5,r5,-26208
    d5a8:	018000b4 	movhi	r6,2
    d5ac:	31a66804 	addi	r6,r6,-26208
    d5b0:	00185e00 	call	185e0 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
    d5b4:	00183a80 	call	183a8 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
    d5b8:	010000b4 	movhi	r4,2
    d5bc:	21210104 	addi	r4,r4,-31740
    d5c0:	00192a40 	call	192a4 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
    d5c4:	d1280c17 	ldw	r4,-24528(gp)
    d5c8:	d0e80d17 	ldw	r3,-24524(gp)
    d5cc:	d0a80e17 	ldw	r2,-24520(gp)
    d5d0:	180b883a 	mov	r5,r3
    d5d4:	100d883a 	mov	r6,r2
    d5d8:	0000a700 	call	a70 <main>
    d5dc:	e0bffb15 	stw	r2,-20(fp)
  close(STDOUT_FILENO);
    d5e0:	01000044 	movi	r4,1
    d5e4:	000d0240 	call	d024 <close>
  exit (result);
    d5e8:	e13ffb17 	ldw	r4,-20(fp)
    d5ec:	00192b80 	call	192b8 <exit>

0000d5f0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    d5f0:	defffe04 	addi	sp,sp,-8
    d5f4:	dfc00115 	stw	ra,4(sp)
    d5f8:	df000015 	stw	fp,0(sp)
    d5fc:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    d600:	008000b4 	movhi	r2,2
    d604:	10aec404 	addi	r2,r2,-17648
    d608:	10800017 	ldw	r2,0(r2)
    d60c:	10000526 	beq	r2,zero,d624 <alt_get_errno+0x34>
    d610:	008000b4 	movhi	r2,2
    d614:	10aec404 	addi	r2,r2,-17648
    d618:	10800017 	ldw	r2,0(r2)
    d61c:	103ee83a 	callr	r2
    d620:	00000206 	br	d62c <alt_get_errno+0x3c>
    d624:	008000b4 	movhi	r2,2
    d628:	10b6b904 	addi	r2,r2,-9500
}
    d62c:	e037883a 	mov	sp,fp
    d630:	dfc00117 	ldw	ra,4(sp)
    d634:	df000017 	ldw	fp,0(sp)
    d638:	dec00204 	addi	sp,sp,8
    d63c:	f800283a 	ret

0000d640 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
    d640:	defff904 	addi	sp,sp,-28
    d644:	dfc00615 	stw	ra,24(sp)
    d648:	df000515 	stw	fp,20(sp)
    d64c:	df000504 	addi	fp,sp,20
    d650:	e13ffd15 	stw	r4,-12(fp)
    d654:	e17ffe15 	stw	r5,-8(fp)
    d658:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    d65c:	e0bffd17 	ldw	r2,-12(fp)
    d660:	10000616 	blt	r2,zero,d67c <read+0x3c>
    d664:	e0bffd17 	ldw	r2,-12(fp)
    d668:	10c00324 	muli	r3,r2,12
    d66c:	008000b4 	movhi	r2,2
    d670:	10a95304 	addi	r2,r2,-23220
    d674:	1885883a 	add	r2,r3,r2
    d678:	00000106 	br	d680 <read+0x40>
    d67c:	0005883a 	mov	r2,zero
    d680:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
    d684:	e0bffb17 	ldw	r2,-20(fp)
    d688:	10002226 	beq	r2,zero,d714 <read+0xd4>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
    d68c:	e0bffb17 	ldw	r2,-20(fp)
    d690:	10800217 	ldw	r2,8(r2)
    d694:	108000cc 	andi	r2,r2,3
    d698:	10800060 	cmpeqi	r2,r2,1
    d69c:	1000181e 	bne	r2,zero,d700 <read+0xc0>
        (fd->dev->read))
    d6a0:	e0bffb17 	ldw	r2,-20(fp)
    d6a4:	10800017 	ldw	r2,0(r2)
    d6a8:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
    d6ac:	10001426 	beq	r2,zero,d700 <read+0xc0>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
    d6b0:	e0bffb17 	ldw	r2,-20(fp)
    d6b4:	10800017 	ldw	r2,0(r2)
    d6b8:	10800517 	ldw	r2,20(r2)
    d6bc:	e0ffff17 	ldw	r3,-4(fp)
    d6c0:	e13ffb17 	ldw	r4,-20(fp)
    d6c4:	e17ffe17 	ldw	r5,-8(fp)
    d6c8:	180d883a 	mov	r6,r3
    d6cc:	103ee83a 	callr	r2
    d6d0:	e0bffc15 	stw	r2,-16(fp)
    d6d4:	e0bffc17 	ldw	r2,-16(fp)
    d6d8:	1000070e 	bge	r2,zero,d6f8 <read+0xb8>
        {
          ALT_ERRNO = -rval;
    d6dc:	000d5f00 	call	d5f0 <alt_get_errno>
    d6e0:	1007883a 	mov	r3,r2
    d6e4:	e0bffc17 	ldw	r2,-16(fp)
    d6e8:	0085c83a 	sub	r2,zero,r2
    d6ec:	18800015 	stw	r2,0(r3)
          return -1;
    d6f0:	00bfffc4 	movi	r2,-1
    d6f4:	00000c06 	br	d728 <read+0xe8>
        }
        return rval;
    d6f8:	e0bffc17 	ldw	r2,-16(fp)
    d6fc:	00000a06 	br	d728 <read+0xe8>
      }
      else
      {
        ALT_ERRNO = EACCES;
    d700:	000d5f00 	call	d5f0 <alt_get_errno>
    d704:	1007883a 	mov	r3,r2
    d708:	00800344 	movi	r2,13
    d70c:	18800015 	stw	r2,0(r3)
    d710:	00000406 	br	d724 <read+0xe4>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
    d714:	000d5f00 	call	d5f0 <alt_get_errno>
    d718:	1007883a 	mov	r3,r2
    d71c:	00801444 	movi	r2,81
    d720:	18800015 	stw	r2,0(r3)
  }
  return -1;
    d724:	00bfffc4 	movi	r2,-1
}
    d728:	e037883a 	mov	sp,fp
    d72c:	dfc00117 	ldw	ra,4(sp)
    d730:	df000017 	ldw	fp,0(sp)
    d734:	dec00204 	addi	sp,sp,8
    d738:	f800283a 	ret

0000d73c <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
    d73c:	defffe04 	addi	sp,sp,-8
    d740:	df000115 	stw	fp,4(sp)
    d744:	df000104 	addi	fp,sp,4
    d748:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
    d74c:	e0bfff17 	ldw	r2,-4(fp)
    d750:	108000d0 	cmplti	r2,r2,3
    d754:	10000d1e 	bne	r2,zero,d78c <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
    d758:	008000b4 	movhi	r2,2
    d75c:	10a95304 	addi	r2,r2,-23220
    d760:	e0ffff17 	ldw	r3,-4(fp)
    d764:	18c00324 	muli	r3,r3,12
    d768:	18c00204 	addi	r3,r3,8
    d76c:	10c5883a 	add	r2,r2,r3
    d770:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
    d774:	008000b4 	movhi	r2,2
    d778:	10a95304 	addi	r2,r2,-23220
    d77c:	e0ffff17 	ldw	r3,-4(fp)
    d780:	18c00324 	muli	r3,r3,12
    d784:	10c5883a 	add	r2,r2,r3
    d788:	10000015 	stw	zero,0(r2)
  }
}
    d78c:	e037883a 	mov	sp,fp
    d790:	df000017 	ldw	fp,0(sp)
    d794:	dec00104 	addi	sp,sp,4
    d798:	f800283a 	ret

0000d79c <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
    d79c:	defff904 	addi	sp,sp,-28
    d7a0:	df000615 	stw	fp,24(sp)
    d7a4:	df000604 	addi	fp,sp,24
    d7a8:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    d7ac:	0005303a 	rdctl	r2,status
    d7b0:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    d7b4:	e0fffc17 	ldw	r3,-16(fp)
    d7b8:	00bfff84 	movi	r2,-2
    d7bc:	1884703a 	and	r2,r3,r2
    d7c0:	1001703a 	wrctl	status,r2
  
  return context;
    d7c4:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
    d7c8:	e0bffa15 	stw	r2,-24(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
    d7cc:	d0a01617 	ldw	r2,-32680(gp)
    d7d0:	10c000c4 	addi	r3,r2,3
    d7d4:	00bfff04 	movi	r2,-4
    d7d8:	1884703a 	and	r2,r3,r2
    d7dc:	d0a01615 	stw	r2,-32680(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
    d7e0:	d0e01617 	ldw	r3,-32680(gp)
    d7e4:	e0bfff17 	ldw	r2,-4(fp)
    d7e8:	1887883a 	add	r3,r3,r2
    d7ec:	00810034 	movhi	r2,1024
    d7f0:	10800004 	addi	r2,r2,0
    d7f4:	10c0062e 	bgeu	r2,r3,d810 <sbrk+0x74>
    d7f8:	e0bffa17 	ldw	r2,-24(fp)
    d7fc:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    d800:	e0bffd17 	ldw	r2,-12(fp)
    d804:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
    d808:	00bfffc4 	movi	r2,-1
    d80c:	00000b06 	br	d83c <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
    d810:	d0a01617 	ldw	r2,-32680(gp)
    d814:	e0bffb15 	stw	r2,-20(fp)
  heap_end += incr; 
    d818:	d0e01617 	ldw	r3,-32680(gp)
    d81c:	e0bfff17 	ldw	r2,-4(fp)
    d820:	1885883a 	add	r2,r3,r2
    d824:	d0a01615 	stw	r2,-32680(gp)
    d828:	e0bffa17 	ldw	r2,-24(fp)
    d82c:	e0bffe15 	stw	r2,-8(fp)
    d830:	e0bffe17 	ldw	r2,-8(fp)
    d834:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
    d838:	e0bffb17 	ldw	r2,-20(fp)
} 
    d83c:	e037883a 	mov	sp,fp
    d840:	df000017 	ldw	fp,0(sp)
    d844:	dec00104 	addi	sp,sp,4
    d848:	f800283a 	ret

0000d84c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    d84c:	defffe04 	addi	sp,sp,-8
    d850:	dfc00115 	stw	ra,4(sp)
    d854:	df000015 	stw	fp,0(sp)
    d858:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    d85c:	008000b4 	movhi	r2,2
    d860:	10aec404 	addi	r2,r2,-17648
    d864:	10800017 	ldw	r2,0(r2)
    d868:	10000526 	beq	r2,zero,d880 <alt_get_errno+0x34>
    d86c:	008000b4 	movhi	r2,2
    d870:	10aec404 	addi	r2,r2,-17648
    d874:	10800017 	ldw	r2,0(r2)
    d878:	103ee83a 	callr	r2
    d87c:	00000206 	br	d888 <alt_get_errno+0x3c>
    d880:	008000b4 	movhi	r2,2
    d884:	10b6b904 	addi	r2,r2,-9500
}
    d888:	e037883a 	mov	sp,fp
    d88c:	dfc00117 	ldw	ra,4(sp)
    d890:	df000017 	ldw	fp,0(sp)
    d894:	dec00204 	addi	sp,sp,8
    d898:	f800283a 	ret

0000d89c <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
    d89c:	defff904 	addi	sp,sp,-28
    d8a0:	dfc00615 	stw	ra,24(sp)
    d8a4:	df000515 	stw	fp,20(sp)
    d8a8:	df000504 	addi	fp,sp,20
    d8ac:	e13ffd15 	stw	r4,-12(fp)
    d8b0:	e17ffe15 	stw	r5,-8(fp)
    d8b4:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    d8b8:	e0bffd17 	ldw	r2,-12(fp)
    d8bc:	10000616 	blt	r2,zero,d8d8 <write+0x3c>
    d8c0:	e0bffd17 	ldw	r2,-12(fp)
    d8c4:	10c00324 	muli	r3,r2,12
    d8c8:	008000b4 	movhi	r2,2
    d8cc:	10a95304 	addi	r2,r2,-23220
    d8d0:	1885883a 	add	r2,r3,r2
    d8d4:	00000106 	br	d8dc <write+0x40>
    d8d8:	0005883a 	mov	r2,zero
    d8dc:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
    d8e0:	e0bffb17 	ldw	r2,-20(fp)
    d8e4:	10002126 	beq	r2,zero,d96c <write+0xd0>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
    d8e8:	e0bffb17 	ldw	r2,-20(fp)
    d8ec:	10800217 	ldw	r2,8(r2)
    d8f0:	108000cc 	andi	r2,r2,3
    d8f4:	10001826 	beq	r2,zero,d958 <write+0xbc>
    d8f8:	e0bffb17 	ldw	r2,-20(fp)
    d8fc:	10800017 	ldw	r2,0(r2)
    d900:	10800617 	ldw	r2,24(r2)
    d904:	10001426 	beq	r2,zero,d958 <write+0xbc>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
    d908:	e0bffb17 	ldw	r2,-20(fp)
    d90c:	10800017 	ldw	r2,0(r2)
    d910:	10800617 	ldw	r2,24(r2)
    d914:	e0ffff17 	ldw	r3,-4(fp)
    d918:	e13ffb17 	ldw	r4,-20(fp)
    d91c:	e17ffe17 	ldw	r5,-8(fp)
    d920:	180d883a 	mov	r6,r3
    d924:	103ee83a 	callr	r2
    d928:	e0bffc15 	stw	r2,-16(fp)
    d92c:	e0bffc17 	ldw	r2,-16(fp)
    d930:	1000070e 	bge	r2,zero,d950 <write+0xb4>
      {
        ALT_ERRNO = -rval;
    d934:	000d84c0 	call	d84c <alt_get_errno>
    d938:	1007883a 	mov	r3,r2
    d93c:	e0bffc17 	ldw	r2,-16(fp)
    d940:	0085c83a 	sub	r2,zero,r2
    d944:	18800015 	stw	r2,0(r3)
        return -1;
    d948:	00bfffc4 	movi	r2,-1
    d94c:	00000c06 	br	d980 <write+0xe4>
      }
      return rval;
    d950:	e0bffc17 	ldw	r2,-16(fp)
    d954:	00000a06 	br	d980 <write+0xe4>
    }
    else
    {
      ALT_ERRNO = EACCES;
    d958:	000d84c0 	call	d84c <alt_get_errno>
    d95c:	1007883a 	mov	r3,r2
    d960:	00800344 	movi	r2,13
    d964:	18800015 	stw	r2,0(r3)
    d968:	00000406 	br	d97c <write+0xe0>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
    d96c:	000d84c0 	call	d84c <alt_get_errno>
    d970:	1007883a 	mov	r3,r2
    d974:	00801444 	movi	r2,81
    d978:	18800015 	stw	r2,0(r3)
  }
  return -1;
    d97c:	00bfffc4 	movi	r2,-1
}
    d980:	e037883a 	mov	sp,fp
    d984:	dfc00117 	ldw	ra,4(sp)
    d988:	df000017 	ldw	fp,0(sp)
    d98c:	dec00204 	addi	sp,sp,8
    d990:	f800283a 	ret

0000d994 <__env_lock>:
/*
 *
 */

void __env_lock ( struct _reent *_r )
{
    d994:	deffdf04 	addi	sp,sp,-132
    d998:	dfc02015 	stw	ra,128(sp)
    d99c:	df001f15 	stw	fp,124(sp)
    d9a0:	df001f04 	addi	fp,sp,124
    d9a4:	e13fff15 	stw	r4,-4(fp)
  INT8U err;
  int id;

  /* use our priority as a task id */

  err = OSTaskQuery( OS_PRIO_SELF, &tcb );
    d9a8:	e0bfe204 	addi	r2,fp,-120
    d9ac:	01003fc4 	movi	r4,255
    d9b0:	100b883a 	mov	r5,r2
    d9b4:	00152300 	call	15230 <OSTaskQuery>
    d9b8:	e0bffe85 	stb	r2,-6(fp)
  if (err != OS_NO_ERR)
    d9bc:	e0bffe83 	ldbu	r2,-6(fp)
    d9c0:	10803fcc 	andi	r2,r2,255
    d9c4:	10000126 	beq	r2,zero,d9cc <__env_lock+0x38>
    return;
    d9c8:	00001d06 	br	da40 <__env_lock+0xac>

  id = tcb.OSTCBPrio;
    d9cc:	e0bfee83 	ldbu	r2,-70(fp)
    d9d0:	10803fcc 	andi	r2,r2,255
    d9d4:	e0bfe115 	stw	r2,-124(fp)
   
  /* see if we own the environment already */

  OSSemQuery( alt_envsem, &semdata );
    d9d8:	d0e81017 	ldw	r3,-24512(gp)
    d9dc:	e0bffd04 	addi	r2,fp,-12
    d9e0:	1809883a 	mov	r4,r3
    d9e4:	100b883a 	mov	r5,r2
    d9e8:	00138c80 	call	138c8 <OSSemQuery>
  if( semdata.OSEventGrp && id == lockid ) 
    d9ec:	e0bffe43 	ldbu	r2,-7(fp)
    d9f0:	10803fcc 	andi	r2,r2,255
    d9f4:	10000726 	beq	r2,zero,da14 <__env_lock+0x80>
    d9f8:	d0a01717 	ldw	r2,-32676(gp)
    d9fc:	e0ffe117 	ldw	r3,-124(fp)
    da00:	1880041e 	bne	r3,r2,da14 <__env_lock+0x80>
  {
    /* we do; just count the recursion */

    locks++;
    da04:	d0a80f17 	ldw	r2,-24516(gp)
    da08:	10800044 	addi	r2,r2,1
    da0c:	d0a80f15 	stw	r2,-24516(gp)
    da10:	00000a06 	br	da3c <__env_lock+0xa8>
  }
  else 
  {
    /* wait on the other task to yield, then claim ownership */

    OSSemPend( alt_envsem, 0, &err );
    da14:	d0e81017 	ldw	r3,-24512(gp)
    da18:	e0bffe84 	addi	r2,fp,-6
    da1c:	1809883a 	mov	r4,r3
    da20:	000b883a 	mov	r5,zero
    da24:	100d883a 	mov	r6,r2
    da28:	00133e40 	call	133e4 <OSSemPend>
    locks  = 1;
    da2c:	00800044 	movi	r2,1
    da30:	d0a80f15 	stw	r2,-24516(gp)
    lockid = id;
    da34:	e0bfe117 	ldw	r2,-124(fp)
    da38:	d0a01715 	stw	r2,-32676(gp)
  }

#endif /* OS_THREAD_SAFE_NEWLIB */
  return;
    da3c:	0001883a 	nop
}
    da40:	e037883a 	mov	sp,fp
    da44:	dfc00117 	ldw	ra,4(sp)
    da48:	df000017 	ldw	fp,0(sp)
    da4c:	dec00204 	addi	sp,sp,8
    da50:	f800283a 	ret

0000da54 <__env_unlock>:
/*
 *
 */

void __env_unlock ( struct _reent *_r )
{
    da54:	defffd04 	addi	sp,sp,-12
    da58:	dfc00215 	stw	ra,8(sp)
    da5c:	df000115 	stw	fp,4(sp)
    da60:	df000104 	addi	fp,sp,4
    da64:	e13fff15 	stw	r4,-4(fp)
#if OS_THREAD_SAFE_NEWLIB
  if (locks == 0)
    da68:	d0a80f17 	ldw	r2,-24516(gp)
    da6c:	1000011e 	bne	r2,zero,da74 <__env_unlock+0x20>
    return;
    da70:	00000a06 	br	da9c <__env_unlock+0x48>
   /* 
    * release the environment once the number of locks == the number 
    * of unlocks 
    */

  if( (--locks) == 0 ) 
    da74:	d0a80f17 	ldw	r2,-24516(gp)
    da78:	10bfffc4 	addi	r2,r2,-1
    da7c:	d0a80f15 	stw	r2,-24516(gp)
    da80:	d0a80f17 	ldw	r2,-24516(gp)
    da84:	1000051e 	bne	r2,zero,da9c <__env_unlock+0x48>
  {
    lockid = -1;
    da88:	00bfffc4 	movi	r2,-1
    da8c:	d0a01715 	stw	r2,-32676(gp)
    OSSemPost( alt_envsem );
    da90:	d0a81017 	ldw	r2,-24512(gp)
    da94:	1009883a 	mov	r4,r2
    da98:	00137b80 	call	137b8 <OSSemPost>
  }
#endif /* OS_THREAD_SAFE_NEWLIB */
}
    da9c:	e037883a 	mov	sp,fp
    daa0:	dfc00117 	ldw	ra,4(sp)
    daa4:	df000017 	ldw	fp,0(sp)
    daa8:	dec00204 	addi	sp,sp,8
    daac:	f800283a 	ret

0000dab0 <__malloc_lock>:
/*
 *
 */

void __malloc_lock ( struct _reent *_r )
{
    dab0:	deffdb04 	addi	sp,sp,-148
    dab4:	dfc02415 	stw	ra,144(sp)
    dab8:	df002315 	stw	fp,140(sp)
    dabc:	df002304 	addi	fp,sp,140
    dac0:	e13fff15 	stw	r4,-4(fp)
  OS_TCB tcb;
  OS_SEM_DATA semdata;
  INT8U err;
  int id;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
    dac4:	e03fdd15 	stw	zero,-140(fp)
#endif  
  
  if (OSRunning != OS_TRUE)
    dac8:	008000b4 	movhi	r2,2
    dacc:	10b6c244 	addi	r2,r2,-9463
    dad0:	10800003 	ldbu	r2,0(r2)
    dad4:	10803fcc 	andi	r2,r2,255
    dad8:	10800060 	cmpeqi	r2,r2,1
    dadc:	1000011e 	bne	r2,zero,dae4 <__malloc_lock+0x34>
      return;
    dae0:	00003606 	br	dbbc <__malloc_lock+0x10c>

  /* use our priority as a task id */

  err = OSTaskQuery( OS_PRIO_SELF, &tcb );
    dae4:	e0bfe204 	addi	r2,fp,-120
    dae8:	01003fc4 	movi	r4,255
    daec:	100b883a 	mov	r5,r2
    daf0:	00152300 	call	15230 <OSTaskQuery>
    daf4:	e0bffe85 	stb	r2,-6(fp)
  if (err != OS_NO_ERR)
    daf8:	e0bffe83 	ldbu	r2,-6(fp)
    dafc:	10803fcc 	andi	r2,r2,255
    db00:	10000126 	beq	r2,zero,db08 <__malloc_lock+0x58>
    return;
    db04:	00002d06 	br	dbbc <__malloc_lock+0x10c>

  id = tcb.OSTCBPrio;
    db08:	e0bfee83 	ldbu	r2,-70(fp)
    db0c:	10803fcc 	andi	r2,r2,255
    db10:	e0bfde15 	stw	r2,-136(fp)
   
  /* see if we own the heap already */

  OSSemQuery( alt_heapsem, &semdata );
    db14:	d0e81217 	ldw	r3,-24504(gp)
    db18:	e0bffd04 	addi	r2,fp,-12
    db1c:	1809883a 	mov	r4,r3
    db20:	100b883a 	mov	r5,r2
    db24:	00138c80 	call	138c8 <OSSemQuery>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    db28:	0005303a 	rdctl	r2,status
    db2c:	e0bfdf15 	stw	r2,-132(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    db30:	e0ffdf17 	ldw	r3,-132(fp)
    db34:	00bfff84 	movi	r2,-2
    db38:	1884703a 	and	r2,r3,r2
    db3c:	1001703a 	wrctl	status,r2
  
  return context;
    db40:	e0bfdf17 	ldw	r2,-132(fp)
  
  OS_ENTER_CRITICAL();
    db44:	e0bfdd15 	stw	r2,-140(fp)

  if( !semdata.OSCnt && id == lockid ) 
    db48:	e0bffd0b 	ldhu	r2,-12(fp)
    db4c:	10bfffcc 	andi	r2,r2,65535
    db50:	10000b1e 	bne	r2,zero,db80 <__malloc_lock+0xd0>
    db54:	d0a01817 	ldw	r2,-32672(gp)
    db58:	e0ffde17 	ldw	r3,-136(fp)
    db5c:	1880081e 	bne	r3,r2,db80 <__malloc_lock+0xd0>
  {
    /* we do; just count the recursion */
    locks++;
    db60:	d0a81117 	ldw	r2,-24508(gp)
    db64:	10800044 	addi	r2,r2,1
    db68:	d0a81115 	stw	r2,-24508(gp)
    db6c:	e0bfdd17 	ldw	r2,-140(fp)
    db70:	e0bfe015 	stw	r2,-128(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    db74:	e0bfe017 	ldw	r2,-128(fp)
    db78:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    db7c:	00000e06 	br	dbb8 <__malloc_lock+0x108>
    db80:	e0bfdd17 	ldw	r2,-140(fp)
    db84:	e0bfe115 	stw	r2,-124(fp)
    db88:	e0bfe117 	ldw	r2,-124(fp)
    db8c:	1001703a 	wrctl	status,r2
  else 
  {
    /* wait on the other task to yield the heap, then claim ownership of it */
    OS_EXIT_CRITICAL();

    OSSemPend( alt_heapsem, 0, &err );
    db90:	d0e81217 	ldw	r3,-24504(gp)
    db94:	e0bffe84 	addi	r2,fp,-6
    db98:	1809883a 	mov	r4,r3
    db9c:	000b883a 	mov	r5,zero
    dba0:	100d883a 	mov	r6,r2
    dba4:	00133e40 	call	133e4 <OSSemPend>
    locks  = 1;
    dba8:	00800044 	movi	r2,1
    dbac:	d0a81115 	stw	r2,-24508(gp)
    lockid = id;
    dbb0:	e0bfde17 	ldw	r2,-136(fp)
    dbb4:	d0a01815 	stw	r2,-32672(gp)
  }

#endif /* OS_THREAD_SAFE_NEWLIB */
  return;
    dbb8:	0001883a 	nop
}
    dbbc:	e037883a 	mov	sp,fp
    dbc0:	dfc00117 	ldw	ra,4(sp)
    dbc4:	df000017 	ldw	fp,0(sp)
    dbc8:	dec00204 	addi	sp,sp,8
    dbcc:	f800283a 	ret

0000dbd0 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
    dbd0:	defff804 	addi	sp,sp,-32
    dbd4:	dfc00715 	stw	ra,28(sp)
    dbd8:	df000615 	stw	fp,24(sp)
    dbdc:	df000604 	addi	fp,sp,24
    dbe0:	e13fff15 	stw	r4,-4(fp)
#if OS_THREAD_SAFE_NEWLIB

#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
    dbe4:	e03ffa15 	stw	zero,-24(fp)
#endif 

  if (OSRunning != OS_TRUE)
    dbe8:	008000b4 	movhi	r2,2
    dbec:	10b6c244 	addi	r2,r2,-9463
    dbf0:	10800003 	ldbu	r2,0(r2)
    dbf4:	10803fcc 	andi	r2,r2,255
    dbf8:	10800060 	cmpeqi	r2,r2,1
    dbfc:	1000011e 	bne	r2,zero,dc04 <__malloc_unlock+0x34>
      return;
    dc00:	00002206 	br	dc8c <__malloc_unlock+0xbc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    dc04:	0005303a 	rdctl	r2,status
    dc08:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    dc0c:	e0fffb17 	ldw	r3,-20(fp)
    dc10:	00bfff84 	movi	r2,-2
    dc14:	1884703a 	and	r2,r3,r2
    dc18:	1001703a 	wrctl	status,r2
  
  return context;
    dc1c:	e0bffb17 	ldw	r2,-20(fp)

  OS_ENTER_CRITICAL();
    dc20:	e0bffa15 	stw	r2,-24(fp)
  if (locks == 0)
    dc24:	d0a81117 	ldw	r2,-24508(gp)
    dc28:	1000051e 	bne	r2,zero,dc40 <__malloc_unlock+0x70>
    dc2c:	e0bffa17 	ldw	r2,-24(fp)
    dc30:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    dc34:	e0bffc17 	ldw	r2,-16(fp)
    dc38:	1001703a 	wrctl	status,r2
  {
      OS_EXIT_CRITICAL();
      return;
    dc3c:	00001306 	br	dc8c <__malloc_unlock+0xbc>
  }

  /* release the heap once the number of locks == the number of unlocks */
  if( (--locks) == 0 ) 
    dc40:	d0a81117 	ldw	r2,-24508(gp)
    dc44:	10bfffc4 	addi	r2,r2,-1
    dc48:	d0a81115 	stw	r2,-24508(gp)
    dc4c:	d0a81117 	ldw	r2,-24508(gp)
    dc50:	10000a1e 	bne	r2,zero,dc7c <__malloc_unlock+0xac>
  {
    lockid = -1;
    dc54:	00bfffc4 	movi	r2,-1
    dc58:	d0a01815 	stw	r2,-32672(gp)
    dc5c:	e0bffa17 	ldw	r2,-24(fp)
    dc60:	e0bffd15 	stw	r2,-12(fp)
    dc64:	e0bffd17 	ldw	r2,-12(fp)
    dc68:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    OSSemPost( alt_heapsem );
    dc6c:	d0a81217 	ldw	r2,-24504(gp)
    dc70:	1009883a 	mov	r4,r2
    dc74:	00137b80 	call	137b8 <OSSemPost>
    dc78:	00000406 	br	dc8c <__malloc_unlock+0xbc>
    dc7c:	e0bffa17 	ldw	r2,-24(fp)
    dc80:	e0bffe15 	stw	r2,-8(fp)
    dc84:	e0bffe17 	ldw	r2,-8(fp)
    dc88:	1001703a 	wrctl	status,r2
  {
      OS_EXIT_CRITICAL();
  }
  
#endif /* OS_THREAD_SAFE_NEWLIB */
}
    dc8c:	e037883a 	mov	sp,fp
    dc90:	dfc00117 	ldw	ra,4(sp)
    dc94:	df000017 	ldw	fp,0(sp)
    dc98:	dec00204 	addi	sp,sp,8
    dc9c:	f800283a 	ret

0000dca0 <OSEventNameGet>:
*********************************************************************************************************
*/

#if (OS_EVENT_EN) && (OS_EVENT_NAME_SIZE > 1)
INT8U  OSEventNameGet (OS_EVENT *pevent, INT8U *pname, INT8U *perr)
{
    dca0:	defff704 	addi	sp,sp,-36
    dca4:	dfc00815 	stw	ra,32(sp)
    dca8:	df000715 	stw	fp,28(sp)
    dcac:	df000704 	addi	fp,sp,28
    dcb0:	e13ffd15 	stw	r4,-12(fp)
    dcb4:	e17ffe15 	stw	r5,-8(fp)
    dcb8:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
    dcbc:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
    dcc0:	e0bfff17 	ldw	r2,-4(fp)
    dcc4:	1000021e 	bne	r2,zero,dcd0 <OSEventNameGet+0x30>
        return (0);
    dcc8:	0005883a 	mov	r2,zero
    dccc:	00003706 	br	ddac <OSEventNameGet+0x10c>
    }
    if (pevent == (OS_EVENT *)0) {               /* Is 'pevent' a NULL pointer?                        */
    dcd0:	e0bffd17 	ldw	r2,-12(fp)
    dcd4:	1000051e 	bne	r2,zero,dcec <OSEventNameGet+0x4c>
        *perr = OS_ERR_PEVENT_NULL;
    dcd8:	e0bfff17 	ldw	r2,-4(fp)
    dcdc:	00c00104 	movi	r3,4
    dce0:	10c00005 	stb	r3,0(r2)
        return (0);
    dce4:	0005883a 	mov	r2,zero
    dce8:	00003006 	br	ddac <OSEventNameGet+0x10c>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
    dcec:	e0bffe17 	ldw	r2,-8(fp)
    dcf0:	1000051e 	bne	r2,zero,dd08 <OSEventNameGet+0x68>
        *perr = OS_ERR_PNAME_NULL;
    dcf4:	e0bfff17 	ldw	r2,-4(fp)
    dcf8:	00c00304 	movi	r3,12
    dcfc:	10c00005 	stb	r3,0(r2)
        return (0);
    dd00:	0005883a 	mov	r2,zero
    dd04:	00002906 	br	ddac <OSEventNameGet+0x10c>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
    dd08:	d0a82103 	ldbu	r2,-24444(gp)
    dd0c:	10803fcc 	andi	r2,r2,255
    dd10:	10000526 	beq	r2,zero,dd28 <OSEventNameGet+0x88>
        *perr  = OS_ERR_NAME_GET_ISR;
    dd14:	e0bfff17 	ldw	r2,-4(fp)
    dd18:	00c00444 	movi	r3,17
    dd1c:	10c00005 	stb	r3,0(r2)
        return (0);
    dd20:	0005883a 	mov	r2,zero
    dd24:	00002106 	br	ddac <OSEventNameGet+0x10c>
    }
    switch (pevent->OSEventType) {
    dd28:	e0bffd17 	ldw	r2,-12(fp)
    dd2c:	10800003 	ldbu	r2,0(r2)
    dd30:	10803fcc 	andi	r2,r2,255
    dd34:	10bfffc4 	addi	r2,r2,-1
    dd38:	10800128 	cmpgeui	r2,r2,4
    dd3c:	10000526 	beq	r2,zero,dd54 <OSEventNameGet+0xb4>
        case OS_EVENT_TYPE_MBOX:
        case OS_EVENT_TYPE_Q:
             break;

        default:
             *perr = OS_ERR_EVENT_TYPE;
    dd40:	e0bfff17 	ldw	r2,-4(fp)
    dd44:	00c00044 	movi	r3,1
    dd48:	10c00005 	stb	r3,0(r2)
             return (0);
    dd4c:	0005883a 	mov	r2,zero
    dd50:	00001606 	br	ddac <OSEventNameGet+0x10c>
    switch (pevent->OSEventType) {
        case OS_EVENT_TYPE_SEM:
        case OS_EVENT_TYPE_MUTEX:
        case OS_EVENT_TYPE_MBOX:
        case OS_EVENT_TYPE_Q:
             break;
    dd54:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    dd58:	0005303a 	rdctl	r2,status
    dd5c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    dd60:	e0fffb17 	ldw	r3,-20(fp)
    dd64:	00bfff84 	movi	r2,-2
    dd68:	1884703a 	and	r2,r3,r2
    dd6c:	1001703a 	wrctl	status,r2
  
  return context;
    dd70:	e0bffb17 	ldw	r2,-20(fp)

        default:
             *perr = OS_ERR_EVENT_TYPE;
             return (0);
    }
    OS_ENTER_CRITICAL();
    dd74:	e0bff915 	stw	r2,-28(fp)
    len   = OS_StrCopy(pname, pevent->OSEventName);   /* Copy name from OS_EVENT                       */
    dd78:	e0bffd17 	ldw	r2,-12(fp)
    dd7c:	10800384 	addi	r2,r2,14
    dd80:	e13ffe17 	ldw	r4,-8(fp)
    dd84:	100b883a 	mov	r5,r2
    dd88:	000f6f40 	call	f6f4 <OS_StrCopy>
    dd8c:	e0bffa05 	stb	r2,-24(fp)
    dd90:	e0bff917 	ldw	r2,-28(fp)
    dd94:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    dd98:	e0bffc17 	ldw	r2,-16(fp)
    dd9c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
    dda0:	e0bfff17 	ldw	r2,-4(fp)
    dda4:	10000005 	stb	zero,0(r2)
    return (len);
    dda8:	e0bffa03 	ldbu	r2,-24(fp)
}
    ddac:	e037883a 	mov	sp,fp
    ddb0:	dfc00117 	ldw	ra,4(sp)
    ddb4:	df000017 	ldw	fp,0(sp)
    ddb8:	dec00204 	addi	sp,sp,8
    ddbc:	f800283a 	ret

0000ddc0 <OSEventNameSet>:
*********************************************************************************************************
*/

#if (OS_EVENT_EN) && (OS_EVENT_NAME_SIZE > 1)
void  OSEventNameSet (OS_EVENT *pevent, INT8U *pname, INT8U *perr)
{
    ddc0:	defff604 	addi	sp,sp,-40
    ddc4:	dfc00915 	stw	ra,36(sp)
    ddc8:	df000815 	stw	fp,32(sp)
    ddcc:	df000804 	addi	fp,sp,32
    ddd0:	e13ffd15 	stw	r4,-12(fp)
    ddd4:	e17ffe15 	stw	r5,-8(fp)
    ddd8:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
    dddc:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
    dde0:	e0bfff17 	ldw	r2,-4(fp)
    dde4:	1000011e 	bne	r2,zero,ddec <OSEventNameSet+0x2c>
        return;
    dde8:	00003f06 	br	dee8 <OSEventNameSet+0x128>
    }
    if (pevent == (OS_EVENT *)0) {               /* Is 'pevent' a NULL pointer?                        */
    ddec:	e0bffd17 	ldw	r2,-12(fp)
    ddf0:	1000041e 	bne	r2,zero,de04 <OSEventNameSet+0x44>
        *perr = OS_ERR_PEVENT_NULL;
    ddf4:	e0bfff17 	ldw	r2,-4(fp)
    ddf8:	00c00104 	movi	r3,4
    ddfc:	10c00005 	stb	r3,0(r2)
        return;
    de00:	00003906 	br	dee8 <OSEventNameSet+0x128>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
    de04:	e0bffe17 	ldw	r2,-8(fp)
    de08:	1000041e 	bne	r2,zero,de1c <OSEventNameSet+0x5c>
        *perr = OS_ERR_PNAME_NULL;
    de0c:	e0bfff17 	ldw	r2,-4(fp)
    de10:	00c00304 	movi	r3,12
    de14:	10c00005 	stb	r3,0(r2)
        return;
    de18:	00003306 	br	dee8 <OSEventNameSet+0x128>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
    de1c:	d0a82103 	ldbu	r2,-24444(gp)
    de20:	10803fcc 	andi	r2,r2,255
    de24:	10000426 	beq	r2,zero,de38 <OSEventNameSet+0x78>
        *perr = OS_ERR_NAME_SET_ISR;
    de28:	e0bfff17 	ldw	r2,-4(fp)
    de2c:	00c00484 	movi	r3,18
    de30:	10c00005 	stb	r3,0(r2)
        return;
    de34:	00002c06 	br	dee8 <OSEventNameSet+0x128>
    }
    switch (pevent->OSEventType) {
    de38:	e0bffd17 	ldw	r2,-12(fp)
    de3c:	10800003 	ldbu	r2,0(r2)
    de40:	10803fcc 	andi	r2,r2,255
    de44:	10bfffc4 	addi	r2,r2,-1
    de48:	10800128 	cmpgeui	r2,r2,4
    de4c:	10000426 	beq	r2,zero,de60 <OSEventNameSet+0xa0>
        case OS_EVENT_TYPE_MBOX:
        case OS_EVENT_TYPE_Q:
             break;

        default:
             *perr = OS_ERR_EVENT_TYPE;
    de50:	e0bfff17 	ldw	r2,-4(fp)
    de54:	00c00044 	movi	r3,1
    de58:	10c00005 	stb	r3,0(r2)
             return;
    de5c:	00002206 	br	dee8 <OSEventNameSet+0x128>
    switch (pevent->OSEventType) {
        case OS_EVENT_TYPE_SEM:
        case OS_EVENT_TYPE_MUTEX:
        case OS_EVENT_TYPE_MBOX:
        case OS_EVENT_TYPE_Q:
             break;
    de60:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    de64:	0005303a 	rdctl	r2,status
    de68:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    de6c:	e0fffa17 	ldw	r3,-24(fp)
    de70:	00bfff84 	movi	r2,-2
    de74:	1884703a 	and	r2,r3,r2
    de78:	1001703a 	wrctl	status,r2
  
  return context;
    de7c:	e0bffa17 	ldw	r2,-24(fp)

        default:
             *perr = OS_ERR_EVENT_TYPE;
             return;
    }
    OS_ENTER_CRITICAL();
    de80:	e0bff815 	stw	r2,-32(fp)
    len = OS_StrLen(pname);                           /* Can we fit the string in the storage area?    */
    de84:	e13ffe17 	ldw	r4,-8(fp)
    de88:	000f7680 	call	f768 <OS_StrLen>
    de8c:	e0bff905 	stb	r2,-28(fp)
    if (len > (OS_EVENT_NAME_SIZE - 1)) {             /* No                                            */
    de90:	e0bff903 	ldbu	r2,-28(fp)
    de94:	10800830 	cmpltui	r2,r2,32
    de98:	1000081e 	bne	r2,zero,debc <OSEventNameSet+0xfc>
    de9c:	e0bff817 	ldw	r2,-32(fp)
    dea0:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    dea4:	e0bffb17 	ldw	r2,-20(fp)
    dea8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_EVENT_NAME_TOO_LONG;
    deac:	e0bfff17 	ldw	r2,-4(fp)
    deb0:	00c002c4 	movi	r3,11
    deb4:	10c00005 	stb	r3,0(r2)
        return;
    deb8:	00000b06 	br	dee8 <OSEventNameSet+0x128>
    }
    (void)OS_StrCopy(pevent->OSEventName, pname);     /* Yes, copy name to the event control block     */
    debc:	e0bffd17 	ldw	r2,-12(fp)
    dec0:	10800384 	addi	r2,r2,14
    dec4:	1009883a 	mov	r4,r2
    dec8:	e17ffe17 	ldw	r5,-8(fp)
    decc:	000f6f40 	call	f6f4 <OS_StrCopy>
    ded0:	e0bff817 	ldw	r2,-32(fp)
    ded4:	e0bffc15 	stw	r2,-16(fp)
    ded8:	e0bffc17 	ldw	r2,-16(fp)
    dedc:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
    dee0:	e0bfff17 	ldw	r2,-4(fp)
    dee4:	10000005 	stb	zero,0(r2)
}
    dee8:	e037883a 	mov	sp,fp
    deec:	dfc00117 	ldw	ra,4(sp)
    def0:	df000017 	ldw	fp,0(sp)
    def4:	dec00204 	addi	sp,sp,8
    def8:	f800283a 	ret

0000defc <OSEventPendMulti>:
*********************************************************************************************************
*/
/*$PAGE*/
#if ((OS_EVENT_EN) && (OS_EVENT_MULTI_EN > 0))
INT16U  OSEventPendMulti (OS_EVENT **pevents_pend, OS_EVENT **pevents_rdy, void **pmsgs_rdy, INT16U timeout, INT8U *perr)
{
    defc:	deffed04 	addi	sp,sp,-76
    df00:	dfc01215 	stw	ra,72(sp)
    df04:	df001115 	stw	fp,68(sp)
    df08:	df001104 	addi	fp,sp,68
    df0c:	e13ffc15 	stw	r4,-16(fp)
    df10:	e17ffd15 	stw	r5,-12(fp)
    df14:	e1bffe15 	stw	r6,-8(fp)
    df18:	3805883a 	mov	r2,r7
    df1c:	e0bfff0d 	sth	r2,-4(fp)
#endif
    BOOLEAN     events_rdy;
    INT16U      events_rdy_nbr;
    INT8U       events_stat;
#if (OS_CRITICAL_METHOD == 3)                           /* Allocate storage for CPU status register    */
    OS_CPU_SR   cpu_sr = 0;
    df20:	e03ff315 	stw	zero,-52(fp)
#endif



#if (OS_ARG_CHK_EN > 0)
    if (perr == (INT8U *)0) {                           /* Validate 'perr'                             */
    df24:	e0800217 	ldw	r2,8(fp)
    df28:	1000021e 	bne	r2,zero,df34 <OSEventPendMulti+0x38>
        return (0);
    df2c:	0005883a 	mov	r2,zero
    df30:	00017106 	br	e4f8 <OSEventPendMulti+0x5fc>
    }
    if (pevents_pend == (OS_EVENT **)0) {               /* Validate 'pevents_pend'                     */
    df34:	e0bffc17 	ldw	r2,-16(fp)
    df38:	1000051e 	bne	r2,zero,df50 <OSEventPendMulti+0x54>
       *perr =  OS_ERR_PEVENT_NULL;
    df3c:	e0800217 	ldw	r2,8(fp)
    df40:	00c00104 	movi	r3,4
    df44:	10c00005 	stb	r3,0(r2)
        return (0);
    df48:	0005883a 	mov	r2,zero
    df4c:	00016a06 	br	e4f8 <OSEventPendMulti+0x5fc>
    }
    if (pevents_rdy  == (OS_EVENT **)0) {               /* Validate 'pevents_rdy'                      */
    df50:	e0bffd17 	ldw	r2,-12(fp)
    df54:	1000051e 	bne	r2,zero,df6c <OSEventPendMulti+0x70>
       *perr =  OS_ERR_PEVENT_NULL;
    df58:	e0800217 	ldw	r2,8(fp)
    df5c:	00c00104 	movi	r3,4
    df60:	10c00005 	stb	r3,0(r2)
        return (0);
    df64:	0005883a 	mov	r2,zero
    df68:	00016306 	br	e4f8 <OSEventPendMulti+0x5fc>
    }
    if (pmsgs_rdy == (void **)0) {                      /* Validate 'pmsgs_rdy'                        */
    df6c:	e0bffe17 	ldw	r2,-8(fp)
    df70:	1000051e 	bne	r2,zero,df88 <OSEventPendMulti+0x8c>
       *perr =  OS_ERR_PEVENT_NULL;
    df74:	e0800217 	ldw	r2,8(fp)
    df78:	00c00104 	movi	r3,4
    df7c:	10c00005 	stb	r3,0(r2)
        return (0);
    df80:	0005883a 	mov	r2,zero
    df84:	00015c06 	br	e4f8 <OSEventPendMulti+0x5fc>
    }
#endif

   *pevents_rdy = (OS_EVENT *)0;                        /* Init array to NULL in case of errors        */
    df88:	e0bffd17 	ldw	r2,-12(fp)
    df8c:	10000015 	stw	zero,0(r2)

    pevents     =  pevents_pend;
    df90:	e0bffc17 	ldw	r2,-16(fp)
    df94:	e0bfef15 	stw	r2,-68(fp)
    pevent      = *pevents;
    df98:	e0bfef17 	ldw	r2,-68(fp)
    df9c:	10800017 	ldw	r2,0(r2)
    dfa0:	e0bff015 	stw	r2,-64(fp)
    while  (pevent != (OS_EVENT *)0) {
    dfa4:	00001906 	br	e00c <OSEventPendMulti+0x110>
        switch (pevent->OSEventType) {                  /* Validate event block types                  */
    dfa8:	e0bff017 	ldw	r2,-64(fp)
    dfac:	10800003 	ldbu	r2,0(r2)
    dfb0:	10803fcc 	andi	r2,r2,255
    dfb4:	10c000a0 	cmpeqi	r3,r2,2
    dfb8:	1800091e 	bne	r3,zero,dfe0 <OSEventPendMulti+0xe4>
    dfbc:	10c000e0 	cmpeqi	r3,r2,3
    dfc0:	1800091e 	bne	r3,zero,dfe8 <OSEventPendMulti+0xec>
    dfc4:	10800060 	cmpeqi	r2,r2,1
    dfc8:	1000091e 	bne	r2,zero,dff0 <OSEventPendMulti+0xf4>
#endif

            case OS_EVENT_TYPE_MUTEX:                                            
            case OS_EVENT_TYPE_FLAG:
            default:           
                *perr = OS_ERR_EVENT_TYPE;
    dfcc:	e0800217 	ldw	r2,8(fp)
    dfd0:	00c00044 	movi	r3,1
    dfd4:	10c00005 	stb	r3,0(r2)
                 return (0);
    dfd8:	0005883a 	mov	r2,zero
    dfdc:	00014606 	br	e4f8 <OSEventPendMulti+0x5fc>
            case OS_EVENT_TYPE_MBOX:
                 break;
#endif
#if ((OS_Q_EN   > 0) && (OS_MAX_QS > 0))
            case OS_EVENT_TYPE_Q:
                 break;
    dfe0:	0001883a 	nop
    dfe4:	00000306 	br	dff4 <OSEventPendMulti+0xf8>
    pevent      = *pevents;
    while  (pevent != (OS_EVENT *)0) {
        switch (pevent->OSEventType) {                  /* Validate event block types                  */
#if (OS_SEM_EN  > 0)
            case OS_EVENT_TYPE_SEM:
                 break;
    dfe8:	0001883a 	nop
    dfec:	00000106 	br	dff4 <OSEventPendMulti+0xf8>
#endif
#if (OS_MBOX_EN > 0)
            case OS_EVENT_TYPE_MBOX:
                 break;
    dff0:	0001883a 	nop
            case OS_EVENT_TYPE_FLAG:
            default:           
                *perr = OS_ERR_EVENT_TYPE;
                 return (0);
        }
        pevents++;
    dff4:	e0bfef17 	ldw	r2,-68(fp)
    dff8:	10800104 	addi	r2,r2,4
    dffc:	e0bfef15 	stw	r2,-68(fp)
        pevent = *pevents;
    e000:	e0bfef17 	ldw	r2,-68(fp)
    e004:	10800017 	ldw	r2,0(r2)
    e008:	e0bff015 	stw	r2,-64(fp)

   *pevents_rdy = (OS_EVENT *)0;                        /* Init array to NULL in case of errors        */

    pevents     =  pevents_pend;
    pevent      = *pevents;
    while  (pevent != (OS_EVENT *)0) {
    e00c:	e0bff017 	ldw	r2,-64(fp)
    e010:	103fe51e 	bne	r2,zero,dfa8 <__alt_mem_Flash_flash_data+0xf400dfa8>
        }
        pevents++;
        pevent = *pevents;
    }

    if (OSIntNesting  > 0) {                            /* See if called from ISR ...                  */
    e014:	d0a82103 	ldbu	r2,-24444(gp)
    e018:	10803fcc 	andi	r2,r2,255
    e01c:	10000526 	beq	r2,zero,e034 <OSEventPendMulti+0x138>
       *perr =  OS_ERR_PEND_ISR;                        /* ... can't PEND from an ISR                  */
    e020:	e0800217 	ldw	r2,8(fp)
    e024:	00c00084 	movi	r3,2
    e028:	10c00005 	stb	r3,0(r2)
        return (0);
    e02c:	0005883a 	mov	r2,zero
    e030:	00013106 	br	e4f8 <OSEventPendMulti+0x5fc>
    }
    if (OSLockNesting > 0) {                            /* See if called with scheduler locked ...     */
    e034:	d0a81303 	ldbu	r2,-24500(gp)
    e038:	10803fcc 	andi	r2,r2,255
    e03c:	10000526 	beq	r2,zero,e054 <OSEventPendMulti+0x158>
       *perr =  OS_ERR_PEND_LOCKED;                     /* ... can't PEND when locked                  */
    e040:	e0800217 	ldw	r2,8(fp)
    e044:	00c00344 	movi	r3,13
    e048:	10c00005 	stb	r3,0(r2)
        return (0);
    e04c:	0005883a 	mov	r2,zero
    e050:	00012906 	br	e4f8 <OSEventPendMulti+0x5fc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    e054:	0005303a 	rdctl	r2,status
    e058:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    e05c:	e0fff517 	ldw	r3,-44(fp)
    e060:	00bfff84 	movi	r2,-2
    e064:	1884703a 	and	r2,r3,r2
    e068:	1001703a 	wrctl	status,r2
  
  return context;
    e06c:	e0bff517 	ldw	r2,-44(fp)
    }

/*$PAGE*/
    OS_ENTER_CRITICAL();
    e070:	e0bff315 	stw	r2,-52(fp)
    events_rdy     =  OS_FALSE;
    e074:	e03ff105 	stb	zero,-60(fp)
    events_rdy_nbr =  0;
    e078:	e03ff18d 	sth	zero,-58(fp)
    events_stat    =  OS_STAT_RDY;
    e07c:	e03ff205 	stb	zero,-56(fp)
    pevents        =  pevents_pend;
    e080:	e0bffc17 	ldw	r2,-16(fp)
    e084:	e0bfef15 	stw	r2,-68(fp)
    pevent         = *pevents;
    e088:	e0bfef17 	ldw	r2,-68(fp)
    e08c:	10800017 	ldw	r2,0(r2)
    e090:	e0bff015 	stw	r2,-64(fp)
    while (pevent != (OS_EVENT *)0) {                   /* See if any events already available         */
    e094:	00008106 	br	e29c <OSEventPendMulti+0x3a0>
        switch (pevent->OSEventType) {
    e098:	e0bff017 	ldw	r2,-64(fp)
    e09c:	10800003 	ldbu	r2,0(r2)
    e0a0:	10803fcc 	andi	r2,r2,255
    e0a4:	10c000a0 	cmpeqi	r3,r2,2
    e0a8:	18003c1e 	bne	r3,zero,e19c <OSEventPendMulti+0x2a0>
    e0ac:	10c000e0 	cmpeqi	r3,r2,3
    e0b0:	1800031e 	bne	r3,zero,e0c0 <OSEventPendMulti+0x1c4>
    e0b4:	10800060 	cmpeqi	r2,r2,1
    e0b8:	10001e1e 	bne	r2,zero,e134 <OSEventPendMulti+0x238>
    e0bc:	00006606 	br	e258 <OSEventPendMulti+0x35c>
#if (OS_SEM_EN > 0)
            case OS_EVENT_TYPE_SEM:
                 if (pevent->OSEventCnt > 0) {          /* If semaphore count > 0, resource available; */
    e0c0:	e0bff017 	ldw	r2,-64(fp)
    e0c4:	1080020b 	ldhu	r2,8(r2)
    e0c8:	10bfffcc 	andi	r2,r2,65535
    e0cc:	10001526 	beq	r2,zero,e124 <OSEventPendMulti+0x228>
                     pevent->OSEventCnt--;              /* ... decrement semaphore,                ... */
    e0d0:	e0bff017 	ldw	r2,-64(fp)
    e0d4:	1080020b 	ldhu	r2,8(r2)
    e0d8:	10bfffc4 	addi	r2,r2,-1
    e0dc:	1007883a 	mov	r3,r2
    e0e0:	e0bff017 	ldw	r2,-64(fp)
    e0e4:	10c0020d 	sth	r3,8(r2)
                    *pevents_rdy++ =  pevent;           /* ... and return available semaphore event    */
    e0e8:	e0bffd17 	ldw	r2,-12(fp)
    e0ec:	10c00104 	addi	r3,r2,4
    e0f0:	e0fffd15 	stw	r3,-12(fp)
    e0f4:	e0fff017 	ldw	r3,-64(fp)
    e0f8:	10c00015 	stw	r3,0(r2)
                      events_rdy   =  OS_TRUE;
    e0fc:	00800044 	movi	r2,1
    e100:	e0bff105 	stb	r2,-60(fp)
                    *pmsgs_rdy++   = (void *)0;         /* NO message returned  for semaphores         */
    e104:	e0bffe17 	ldw	r2,-8(fp)
    e108:	10c00104 	addi	r3,r2,4
    e10c:	e0fffe15 	stw	r3,-8(fp)
    e110:	10000015 	stw	zero,0(r2)
                      events_rdy_nbr++;
    e114:	e0bff18b 	ldhu	r2,-58(fp)
    e118:	10800044 	addi	r2,r2,1
    e11c:	e0bff18d 	sth	r2,-58(fp)

                 } else {
                      events_stat |=  OS_STAT_SEM;      /* Configure multi-pend for semaphore events   */
                 }
                 break;
    e120:	00005806 	br	e284 <OSEventPendMulti+0x388>
                      events_rdy   =  OS_TRUE;
                    *pmsgs_rdy++   = (void *)0;         /* NO message returned  for semaphores         */
                      events_rdy_nbr++;

                 } else {
                      events_stat |=  OS_STAT_SEM;      /* Configure multi-pend for semaphore events   */
    e124:	e0bff203 	ldbu	r2,-56(fp)
    e128:	10800054 	ori	r2,r2,1
    e12c:	e0bff205 	stb	r2,-56(fp)
                 }
                 break;
    e130:	00005406 	br	e284 <OSEventPendMulti+0x388>
#endif

#if (OS_MBOX_EN > 0)
            case OS_EVENT_TYPE_MBOX:
                 if (pevent->OSEventPtr != (void *)0) { /* If mailbox NOT empty;                   ... */
    e134:	e0bff017 	ldw	r2,-64(fp)
    e138:	10800117 	ldw	r2,4(r2)
    e13c:	10001326 	beq	r2,zero,e18c <OSEventPendMulti+0x290>
                                                        /* ... return available message,           ... */
                    *pmsgs_rdy++         = (void *)pevent->OSEventPtr;
    e140:	e0bffe17 	ldw	r2,-8(fp)
    e144:	10c00104 	addi	r3,r2,4
    e148:	e0fffe15 	stw	r3,-8(fp)
    e14c:	e0fff017 	ldw	r3,-64(fp)
    e150:	18c00117 	ldw	r3,4(r3)
    e154:	10c00015 	stw	r3,0(r2)
                     pevent->OSEventPtr  = (void *)0;
    e158:	e0bff017 	ldw	r2,-64(fp)
    e15c:	10000115 	stw	zero,4(r2)
                    *pevents_rdy++       =  pevent;     /* ... and return available mailbox event      */
    e160:	e0bffd17 	ldw	r2,-12(fp)
    e164:	10c00104 	addi	r3,r2,4
    e168:	e0fffd15 	stw	r3,-12(fp)
    e16c:	e0fff017 	ldw	r3,-64(fp)
    e170:	10c00015 	stw	r3,0(r2)
                      events_rdy         =  OS_TRUE;
    e174:	00800044 	movi	r2,1
    e178:	e0bff105 	stb	r2,-60(fp)
                      events_rdy_nbr++;
    e17c:	e0bff18b 	ldhu	r2,-58(fp)
    e180:	10800044 	addi	r2,r2,1
    e184:	e0bff18d 	sth	r2,-58(fp)

                 } else {
                      events_stat |= OS_STAT_MBOX;      /* Configure multi-pend for mailbox events     */
                 }
                 break;
    e188:	00003e06 	br	e284 <OSEventPendMulti+0x388>
                    *pevents_rdy++       =  pevent;     /* ... and return available mailbox event      */
                      events_rdy         =  OS_TRUE;
                      events_rdy_nbr++;

                 } else {
                      events_stat |= OS_STAT_MBOX;      /* Configure multi-pend for mailbox events     */
    e18c:	e0bff203 	ldbu	r2,-56(fp)
    e190:	10800094 	ori	r2,r2,2
    e194:	e0bff205 	stb	r2,-56(fp)
                 }
                 break;
    e198:	00003a06 	br	e284 <OSEventPendMulti+0x388>
#endif

#if ((OS_Q_EN > 0) && (OS_MAX_QS > 0))
            case OS_EVENT_TYPE_Q:
                 pq = (OS_Q *)pevent->OSEventPtr;
    e19c:	e0bff017 	ldw	r2,-64(fp)
    e1a0:	10800117 	ldw	r2,4(r2)
    e1a4:	e0bff415 	stw	r2,-48(fp)
                 if (pq->OSQEntries > 0) {              /* If queue NOT empty;                     ... */
    e1a8:	e0bff417 	ldw	r2,-48(fp)
    e1ac:	1080058b 	ldhu	r2,22(r2)
    e1b0:	10bfffcc 	andi	r2,r2,65535
    e1b4:	10002426 	beq	r2,zero,e248 <OSEventPendMulti+0x34c>
                                                        /* ... return available message,           ... */
                    *pmsgs_rdy++ = (void *)*pq->OSQOut++;
    e1b8:	e0bffe17 	ldw	r2,-8(fp)
    e1bc:	10c00104 	addi	r3,r2,4
    e1c0:	e0fffe15 	stw	r3,-8(fp)
    e1c4:	e0fff417 	ldw	r3,-48(fp)
    e1c8:	18c00417 	ldw	r3,16(r3)
    e1cc:	19400104 	addi	r5,r3,4
    e1d0:	e13ff417 	ldw	r4,-48(fp)
    e1d4:	21400415 	stw	r5,16(r4)
    e1d8:	18c00017 	ldw	r3,0(r3)
    e1dc:	10c00015 	stw	r3,0(r2)
                     if (pq->OSQOut == pq->OSQEnd) {    /* If OUT ptr at queue end, ...                */
    e1e0:	e0bff417 	ldw	r2,-48(fp)
    e1e4:	10c00417 	ldw	r3,16(r2)
    e1e8:	e0bff417 	ldw	r2,-48(fp)
    e1ec:	10800217 	ldw	r2,8(r2)
    e1f0:	1880041e 	bne	r3,r2,e204 <OSEventPendMulti+0x308>
                         pq->OSQOut  = pq->OSQStart;    /* ... wrap   to queue start                   */
    e1f4:	e0bff417 	ldw	r2,-48(fp)
    e1f8:	10c00117 	ldw	r3,4(r2)
    e1fc:	e0bff417 	ldw	r2,-48(fp)
    e200:	10c00415 	stw	r3,16(r2)
                     }
                     pq->OSQEntries--;                  /* Update number of queue entries              */
    e204:	e0bff417 	ldw	r2,-48(fp)
    e208:	1080058b 	ldhu	r2,22(r2)
    e20c:	10bfffc4 	addi	r2,r2,-1
    e210:	1007883a 	mov	r3,r2
    e214:	e0bff417 	ldw	r2,-48(fp)
    e218:	10c0058d 	sth	r3,22(r2)
                    *pevents_rdy++ = pevent;            /* ... and return available queue event        */
    e21c:	e0bffd17 	ldw	r2,-12(fp)
    e220:	10c00104 	addi	r3,r2,4
    e224:	e0fffd15 	stw	r3,-12(fp)
    e228:	e0fff017 	ldw	r3,-64(fp)
    e22c:	10c00015 	stw	r3,0(r2)
                      events_rdy   = OS_TRUE;
    e230:	00800044 	movi	r2,1
    e234:	e0bff105 	stb	r2,-60(fp)
                      events_rdy_nbr++;
    e238:	e0bff18b 	ldhu	r2,-58(fp)
    e23c:	10800044 	addi	r2,r2,1
    e240:	e0bff18d 	sth	r2,-58(fp)

                 } else {
                      events_stat |= OS_STAT_Q;         /* Configure multi-pend for queue events       */
                 }
                 break;
    e244:	00000f06 	br	e284 <OSEventPendMulti+0x388>
                    *pevents_rdy++ = pevent;            /* ... and return available queue event        */
                      events_rdy   = OS_TRUE;
                      events_rdy_nbr++;

                 } else {
                      events_stat |= OS_STAT_Q;         /* Configure multi-pend for queue events       */
    e248:	e0bff203 	ldbu	r2,-56(fp)
    e24c:	10800114 	ori	r2,r2,4
    e250:	e0bff205 	stb	r2,-56(fp)
                 }
                 break;
    e254:	00000b06 	br	e284 <OSEventPendMulti+0x388>
    e258:	e0bff317 	ldw	r2,-52(fp)
    e25c:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    e260:	e0bff617 	ldw	r2,-40(fp)
    e264:	1001703a 	wrctl	status,r2

            case OS_EVENT_TYPE_MUTEX:                                            
            case OS_EVENT_TYPE_FLAG:
            default:           
                 OS_EXIT_CRITICAL();
                *pevents_rdy = (OS_EVENT *)0;           /* NULL terminate return event array           */
    e268:	e0bffd17 	ldw	r2,-12(fp)
    e26c:	10000015 	stw	zero,0(r2)
                *perr        =  OS_ERR_EVENT_TYPE;
    e270:	e0800217 	ldw	r2,8(fp)
    e274:	00c00044 	movi	r3,1
    e278:	10c00005 	stb	r3,0(r2)
                 return (events_rdy_nbr);
    e27c:	e0bff18b 	ldhu	r2,-58(fp)
    e280:	00009d06 	br	e4f8 <OSEventPendMulti+0x5fc>
        }
        pevents++;
    e284:	e0bfef17 	ldw	r2,-68(fp)
    e288:	10800104 	addi	r2,r2,4
    e28c:	e0bfef15 	stw	r2,-68(fp)
        pevent = *pevents;
    e290:	e0bfef17 	ldw	r2,-68(fp)
    e294:	10800017 	ldw	r2,0(r2)
    e298:	e0bff015 	stw	r2,-64(fp)
    events_rdy     =  OS_FALSE;
    events_rdy_nbr =  0;
    events_stat    =  OS_STAT_RDY;
    pevents        =  pevents_pend;
    pevent         = *pevents;
    while (pevent != (OS_EVENT *)0) {                   /* See if any events already available         */
    e29c:	e0bff017 	ldw	r2,-64(fp)
    e2a0:	103f7d1e 	bne	r2,zero,e098 <__alt_mem_Flash_flash_data+0xf400e098>
        }
        pevents++;
        pevent = *pevents;
    }

    if ( events_rdy == OS_TRUE) {                       /* Return any events already available         */
    e2a4:	e0bff103 	ldbu	r2,-60(fp)
    e2a8:	10800058 	cmpnei	r2,r2,1
    e2ac:	10000a1e 	bne	r2,zero,e2d8 <OSEventPendMulti+0x3dc>
       *pevents_rdy = (OS_EVENT *)0;                    /* NULL terminate return event array           */
    e2b0:	e0bffd17 	ldw	r2,-12(fp)
    e2b4:	10000015 	stw	zero,0(r2)
    e2b8:	e0bff317 	ldw	r2,-52(fp)
    e2bc:	e0bff715 	stw	r2,-36(fp)
    e2c0:	e0bff717 	ldw	r2,-36(fp)
    e2c4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
       *perr        =  OS_ERR_NONE;
    e2c8:	e0800217 	ldw	r2,8(fp)
    e2cc:	10000005 	stb	zero,0(r2)
        return (events_rdy_nbr);
    e2d0:	e0bff18b 	ldhu	r2,-58(fp)
    e2d4:	00008806 	br	e4f8 <OSEventPendMulti+0x5fc>
    }
/*$PAGE*/
                                                        /* Otherwise, must wait until any event occurs */
    OSTCBCur->OSTCBStat     |= events_stat  |           /* Resource not available, ...                 */
    e2d8:	d0a82217 	ldw	r2,-24440(gp)
    e2dc:	d0e82217 	ldw	r3,-24440(gp)
    e2e0:	19000c03 	ldbu	r4,48(r3)
    e2e4:	e0fff203 	ldbu	r3,-56(fp)
    e2e8:	20c6b03a 	or	r3,r4,r3
    e2ec:	1809883a 	mov	r4,r3
    e2f0:	00ffe004 	movi	r3,-128
    e2f4:	20c6b03a 	or	r3,r4,r3
    e2f8:	10c00c05 	stb	r3,48(r2)
                               OS_STAT_MULTI;           /* ... pend on multiple events                 */
    OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
    e2fc:	d0a82217 	ldw	r2,-24440(gp)
    e300:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBDly       = timeout;                 /* Store pend timeout in TCB                   */
    e304:	d0a82217 	ldw	r2,-24440(gp)
    e308:	e0ffff0b 	ldhu	r3,-4(fp)
    e30c:	10c00b8d 	sth	r3,46(r2)
    OS_EventTaskWaitMulti(pevents_pend);                /* Suspend task until events or timeout occurs */
    e310:	e13ffc17 	ldw	r4,-16(fp)
    e314:	000ee440 	call	ee44 <OS_EventTaskWaitMulti>
    e318:	e0bff317 	ldw	r2,-52(fp)
    e31c:	e0bff815 	stw	r2,-32(fp)
    e320:	e0bff817 	ldw	r2,-32(fp)
    e324:	1001703a 	wrctl	status,r2

    OS_EXIT_CRITICAL();
    OS_Sched();                                         /* Find next highest priority task ready       */
    e328:	000f5b80 	call	f5b8 <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    e32c:	0005303a 	rdctl	r2,status
    e330:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    e334:	e0fff917 	ldw	r3,-28(fp)
    e338:	00bfff84 	movi	r2,-2
    e33c:	1884703a 	and	r2,r3,r2
    e340:	1001703a 	wrctl	status,r2
  
  return context;
    e344:	e0bff917 	ldw	r2,-28(fp)
    OS_ENTER_CRITICAL();
    e348:	e0bff315 	stw	r2,-52(fp)

    switch (OSTCBCur->OSTCBStatPend) {                  /* Handle event posted, aborted, or timed-out  */
    e34c:	d0a82217 	ldw	r2,-24440(gp)
    e350:	10800c43 	ldbu	r2,49(r2)
    e354:	10803fcc 	andi	r2,r2,255
    e358:	10000226 	beq	r2,zero,e364 <OSEventPendMulti+0x468>
    e35c:	108000a0 	cmpeqi	r2,r2,2
    e360:	10001826 	beq	r2,zero,e3c4 <OSEventPendMulti+0x4c8>
        case OS_STAT_PEND_OK:
        case OS_STAT_PEND_ABORT:
             pevent = OSTCBCur->OSTCBEventPtr;
    e364:	d0a82217 	ldw	r2,-24440(gp)
    e368:	10800717 	ldw	r2,28(r2)
    e36c:	e0bff015 	stw	r2,-64(fp)
             if (pevent != (OS_EVENT *)0) {             /* If task event ptr != NULL, ...              */
    e370:	e0bff017 	ldw	r2,-64(fp)
    e374:	10000b26 	beq	r2,zero,e3a4 <OSEventPendMulti+0x4a8>
                *pevents_rdy++ =  pevent;               /* ... return available event ...              */
    e378:	e0bffd17 	ldw	r2,-12(fp)
    e37c:	10c00104 	addi	r3,r2,4
    e380:	e0fffd15 	stw	r3,-12(fp)
    e384:	e0fff017 	ldw	r3,-64(fp)
    e388:	10c00015 	stw	r3,0(r2)
                *pevents_rdy   = (OS_EVENT *)0;         /* ... & NULL terminate return event array     */
    e38c:	e0bffd17 	ldw	r2,-12(fp)
    e390:	10000015 	stw	zero,0(r2)
                  events_rdy_nbr++;
    e394:	e0bff18b 	ldhu	r2,-58(fp)
    e398:	10800044 	addi	r2,r2,1
    e39c:	e0bff18d 	sth	r2,-58(fp)

             } else {                                   /* Else NO event available, handle as timeout  */
                 OSTCBCur->OSTCBStatPend = OS_STAT_PEND_TO;
                 OS_EventTaskRemoveMulti(OSTCBCur, pevents_pend);
             }
			 break;
    e3a0:	00000d06 	br	e3d8 <OSEventPendMulti+0x4dc>
                *pevents_rdy++ =  pevent;               /* ... return available event ...              */
                *pevents_rdy   = (OS_EVENT *)0;         /* ... & NULL terminate return event array     */
                  events_rdy_nbr++;

             } else {                                   /* Else NO event available, handle as timeout  */
                 OSTCBCur->OSTCBStatPend = OS_STAT_PEND_TO;
    e3a4:	d0a82217 	ldw	r2,-24440(gp)
    e3a8:	00c00044 	movi	r3,1
    e3ac:	10c00c45 	stb	r3,49(r2)
                 OS_EventTaskRemoveMulti(OSTCBCur, pevents_pend);
    e3b0:	d0a82217 	ldw	r2,-24440(gp)
    e3b4:	1009883a 	mov	r4,r2
    e3b8:	e17ffc17 	ldw	r5,-16(fp)
    e3bc:	000f0440 	call	f044 <OS_EventTaskRemoveMulti>
             }
			 break;
    e3c0:	00000506 	br	e3d8 <OSEventPendMulti+0x4dc>

        case OS_STAT_PEND_TO:
        default:                                        /* ... remove task from events' wait lists     */
             OS_EventTaskRemoveMulti(OSTCBCur, pevents_pend);
    e3c4:	d0a82217 	ldw	r2,-24440(gp)
    e3c8:	1009883a 	mov	r4,r2
    e3cc:	e17ffc17 	ldw	r5,-16(fp)
    e3d0:	000f0440 	call	f044 <OS_EventTaskRemoveMulti>
             break;
    e3d4:	0001883a 	nop
    }

    switch (OSTCBCur->OSTCBStatPend) {
    e3d8:	d0a82217 	ldw	r2,-24440(gp)
    e3dc:	10800c43 	ldbu	r2,49(r2)
    e3e0:	10803fcc 	andi	r2,r2,255
    e3e4:	10000326 	beq	r2,zero,e3f4 <OSEventPendMulti+0x4f8>
    e3e8:	108000a0 	cmpeqi	r2,r2,2
    e3ec:	1000231e 	bne	r2,zero,e47c <OSEventPendMulti+0x580>
    e3f0:	00002a06 	br	e49c <OSEventPendMulti+0x5a0>
        case OS_STAT_PEND_OK:
             switch (pevent->OSEventType) {             /* Return event's message                      */
    e3f4:	e0bff017 	ldw	r2,-64(fp)
    e3f8:	10800003 	ldbu	r2,0(r2)
    e3fc:	10803fcc 	andi	r2,r2,255
    e400:	0080100e 	bge	zero,r2,e444 <OSEventPendMulti+0x548>
    e404:	10c000d0 	cmplti	r3,r2,3
    e408:	1800071e 	bne	r3,zero,e428 <OSEventPendMulti+0x52c>
    e40c:	108000e0 	cmpeqi	r2,r2,3
    e410:	10000c26 	beq	r2,zero,e444 <OSEventPendMulti+0x548>
#if (OS_SEM_EN > 0)
                 case OS_EVENT_TYPE_SEM:
                     *pmsgs_rdy++ = (void *)0;          /* NO message returned for semaphores          */
    e414:	e0bffe17 	ldw	r2,-8(fp)
    e418:	10c00104 	addi	r3,r2,4
    e41c:	e0fffe15 	stw	r3,-8(fp)
    e420:	10000015 	stw	zero,0(r2)
                      break;
    e424:	00001206 	br	e470 <OSEventPendMulti+0x574>

#if ((OS_MBOX_EN > 0) ||                 \
    ((OS_Q_EN    > 0) && (OS_MAX_QS > 0)))
                 case OS_EVENT_TYPE_MBOX:
                 case OS_EVENT_TYPE_Q:
                     *pmsgs_rdy++ = (void *)OSTCBCur->OSTCBMsg;     /* Return received message         */
    e428:	e0bffe17 	ldw	r2,-8(fp)
    e42c:	10c00104 	addi	r3,r2,4
    e430:	e0fffe15 	stw	r3,-8(fp)
    e434:	d0e82217 	ldw	r3,-24440(gp)
    e438:	18c00917 	ldw	r3,36(r3)
    e43c:	10c00015 	stw	r3,0(r2)
                      break;
    e440:	00000b06 	br	e470 <OSEventPendMulti+0x574>
    e444:	e0bff317 	ldw	r2,-52(fp)
    e448:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    e44c:	e0bffa17 	ldw	r2,-24(fp)
    e450:	1001703a 	wrctl	status,r2

                 case OS_EVENT_TYPE_MUTEX:                                       
                 case OS_EVENT_TYPE_FLAG:
                 default:           
                      OS_EXIT_CRITICAL();
                     *pevents_rdy = (OS_EVENT *)0;      /* NULL terminate return event array           */
    e454:	e0bffd17 	ldw	r2,-12(fp)
    e458:	10000015 	stw	zero,0(r2)
                     *perr        =  OS_ERR_EVENT_TYPE;
    e45c:	e0800217 	ldw	r2,8(fp)
    e460:	00c00044 	movi	r3,1
    e464:	10c00005 	stb	r3,0(r2)
                      return (events_rdy_nbr);
    e468:	e0bff18b 	ldhu	r2,-58(fp)
    e46c:	00002206 	br	e4f8 <OSEventPendMulti+0x5fc>
             }
            *perr = OS_ERR_NONE;
    e470:	e0800217 	ldw	r2,8(fp)
    e474:	10000005 	stb	zero,0(r2)
             break;
    e478:	00001006 	br	e4bc <OSEventPendMulti+0x5c0>

        case OS_STAT_PEND_ABORT:
            *pmsgs_rdy++ = (void *)0;                   /* NO message returned for abort               */
    e47c:	e0bffe17 	ldw	r2,-8(fp)
    e480:	10c00104 	addi	r3,r2,4
    e484:	e0fffe15 	stw	r3,-8(fp)
    e488:	10000015 	stw	zero,0(r2)
            *perr        =  OS_ERR_PEND_ABORT;          /* Indicate that event  aborted                */
    e48c:	e0800217 	ldw	r2,8(fp)
    e490:	00c00384 	movi	r3,14
    e494:	10c00005 	stb	r3,0(r2)
             break;
    e498:	00000806 	br	e4bc <OSEventPendMulti+0x5c0>
                                                        
        case OS_STAT_PEND_TO:                                                
        default:        
            *pmsgs_rdy++ = (void *)0;                   /* NO message returned for timeout             */
    e49c:	e0bffe17 	ldw	r2,-8(fp)
    e4a0:	10c00104 	addi	r3,r2,4
    e4a4:	e0fffe15 	stw	r3,-8(fp)
    e4a8:	10000015 	stw	zero,0(r2)
            *perr        =  OS_ERR_TIMEOUT;             /* Indicate that events timed out              */
    e4ac:	e0800217 	ldw	r2,8(fp)
    e4b0:	00c00284 	movi	r3,10
    e4b4:	10c00005 	stb	r3,0(r2)
             break;
    e4b8:	0001883a 	nop
    }

    OSTCBCur->OSTCBStat          =  OS_STAT_RDY;        /* Set   task  status to ready                 */
    e4bc:	d0a82217 	ldw	r2,-24440(gp)
    e4c0:	10000c05 	stb	zero,48(r2)
    OSTCBCur->OSTCBStatPend      =  OS_STAT_PEND_OK;    /* Clear pend  status                          */
    e4c4:	d0a82217 	ldw	r2,-24440(gp)
    e4c8:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;      /* Clear event pointers                        */
    e4cc:	d0a82217 	ldw	r2,-24440(gp)
    e4d0:	10000715 	stw	zero,28(r2)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
    e4d4:	d0a82217 	ldw	r2,-24440(gp)
    e4d8:	10000815 	stw	zero,32(r2)
    OSTCBCur->OSTCBMsg           = (void      *)0;      /* Clear task  message                         */
    e4dc:	d0a82217 	ldw	r2,-24440(gp)
    e4e0:	10000915 	stw	zero,36(r2)
    e4e4:	e0bff317 	ldw	r2,-52(fp)
    e4e8:	e0bffb15 	stw	r2,-20(fp)
    e4ec:	e0bffb17 	ldw	r2,-20(fp)
    e4f0:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();

    return (events_rdy_nbr);
    e4f4:	e0bff18b 	ldhu	r2,-58(fp)
}
    e4f8:	e037883a 	mov	sp,fp
    e4fc:	dfc00117 	ldw	ra,4(sp)
    e500:	df000017 	ldw	fp,0(sp)
    e504:	dec00204 	addi	sp,sp,8
    e508:	f800283a 	ret

0000e50c <OSInit>:
* Returns    : none
*********************************************************************************************************
*/

void  OSInit (void)
{
    e50c:	defffe04 	addi	sp,sp,-8
    e510:	dfc00115 	stw	ra,4(sp)
    e514:	df000015 	stw	fp,0(sp)
    e518:	d839883a 	mov	fp,sp
    OSInitHookBegin();                                           /* Call port specific initialization code   */
    e51c:	0018ef80 	call	18ef8 <OSInitHookBegin>

    OS_InitMisc();                                               /* Initialize miscellaneous variables       */
    e520:	000f2800 	call	f280 <OS_InitMisc>

    OS_InitRdyList();                                            /* Initialize the Ready List                */
    e524:	000f2c40 	call	f2c4 <OS_InitRdyList>

    OS_InitTCBList();                                            /* Initialize the free list of OS_TCBs      */
    e528:	000f4240 	call	f424 <OS_InitTCBList>

    OS_InitEventList();                                          /* Initialize the free list of OS_EVENTs    */
    e52c:	000f1a40 	call	f1a4 <OS_InitEventList>

#if (OS_FLAG_EN > 0) && (OS_MAX_FLAGS > 0)
    OS_FlagInit();                                               /* Initialize the event flag structures     */
    e530:	00113a40 	call	113a4 <OS_FlagInit>
#endif

#if (OS_MEM_EN > 0) && (OS_MAX_MEM_PART > 0)
    OS_MemInit();                                                /* Initialize the memory manager            */
    e534:	0011cec0 	call	11cec <OS_MemInit>
#endif

#if (OS_Q_EN > 0) && (OS_MAX_QS > 0)
    OS_QInit();                                                  /* Initialize the message queue structures  */
    e538:	0012f200 	call	12f20 <OS_QInit>
#endif

    OS_InitTaskIdle();                                           /* Create the Idle Task                     */
    e53c:	000f32c0 	call	f32c <OS_InitTaskIdle>
#if OS_TASK_STAT_EN > 0
    OS_InitTaskStat();                                           /* Create the Statistic Task                */
    e540:	000f3a80 	call	f3a8 <OS_InitTaskStat>

#if OS_TMR_EN > 0
    OSTmr_Init();                                                /* Initialize the Timer Manager             */
#endif

    OSInitHookEnd();                                             /* Call port specific init. code            */
    e544:	0018f140 	call	18f14 <OSInitHookEnd>

#if OS_DEBUG_EN > 0
    OSDebugInit();
    e548:	000fc900 	call	fc90 <OSDebugInit>
#endif
}
    e54c:	e037883a 	mov	sp,fp
    e550:	dfc00117 	ldw	ra,4(sp)
    e554:	df000017 	ldw	fp,0(sp)
    e558:	dec00204 	addi	sp,sp,8
    e55c:	f800283a 	ret

0000e560 <OSIntEnter>:
*              5) You are allowed to nest interrupts up to 255 levels deep.
*********************************************************************************************************
*/

void  OSIntEnter (void)
{
    e560:	defffc04 	addi	sp,sp,-16
    e564:	df000315 	stw	fp,12(sp)
    e568:	df000304 	addi	fp,sp,12
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
    e56c:	e03ffd15 	stw	zero,-12(fp)
#endif

    if (OSRunning == OS_TRUE) {
    e570:	d0a81343 	ldbu	r2,-24499(gp)
    e574:	10803fcc 	andi	r2,r2,255
    e578:	10800058 	cmpnei	r2,r2,1
    e57c:	1000131e 	bne	r2,zero,e5cc <OSIntEnter+0x6c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    e580:	0005303a 	rdctl	r2,status
    e584:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    e588:	e0fffe17 	ldw	r3,-8(fp)
    e58c:	00bfff84 	movi	r2,-2
    e590:	1884703a 	and	r2,r3,r2
    e594:	1001703a 	wrctl	status,r2
  
  return context;
    e598:	e0bffe17 	ldw	r2,-8(fp)
        OS_ENTER_CRITICAL();
    e59c:	e0bffd15 	stw	r2,-12(fp)
        if (OSIntNesting < 255u) {
    e5a0:	d0a82103 	ldbu	r2,-24444(gp)
    e5a4:	10803fcc 	andi	r2,r2,255
    e5a8:	10803fe0 	cmpeqi	r2,r2,255
    e5ac:	1000031e 	bne	r2,zero,e5bc <OSIntEnter+0x5c>
            OSIntNesting++;                      /* Increment ISR nesting level                        */
    e5b0:	d0a82103 	ldbu	r2,-24444(gp)
    e5b4:	10800044 	addi	r2,r2,1
    e5b8:	d0a82105 	stb	r2,-24444(gp)
    e5bc:	e0bffd17 	ldw	r2,-12(fp)
    e5c0:	e0bfff15 	stw	r2,-4(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    e5c4:	e0bfff17 	ldw	r2,-4(fp)
    e5c8:	1001703a 	wrctl	status,r2
        }
        OS_EXIT_CRITICAL();
    }
}
    e5cc:	e037883a 	mov	sp,fp
    e5d0:	df000017 	ldw	fp,0(sp)
    e5d4:	dec00104 	addi	sp,sp,4
    e5d8:	f800283a 	ret

0000e5dc <OSIntExit>:
*              2) Rescheduling is prevented when the scheduler is locked (see OS_SchedLock())
*********************************************************************************************************
*/

void  OSIntExit (void)
{
    e5dc:	defffb04 	addi	sp,sp,-20
    e5e0:	dfc00415 	stw	ra,16(sp)
    e5e4:	df000315 	stw	fp,12(sp)
    e5e8:	df000304 	addi	fp,sp,12
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
    e5ec:	e03ffd15 	stw	zero,-12(fp)
#endif



    if (OSRunning == OS_TRUE) {
    e5f0:	d0a81343 	ldbu	r2,-24499(gp)
    e5f4:	10803fcc 	andi	r2,r2,255
    e5f8:	10800058 	cmpnei	r2,r2,1
    e5fc:	10002f1e 	bne	r2,zero,e6bc <OSIntExit+0xe0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    e600:	0005303a 	rdctl	r2,status
    e604:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    e608:	e0fffe17 	ldw	r3,-8(fp)
    e60c:	00bfff84 	movi	r2,-2
    e610:	1884703a 	and	r2,r3,r2
    e614:	1001703a 	wrctl	status,r2
  
  return context;
    e618:	e0bffe17 	ldw	r2,-8(fp)
        OS_ENTER_CRITICAL();
    e61c:	e0bffd15 	stw	r2,-12(fp)
        if (OSIntNesting > 0) {                            /* Prevent OSIntNesting from wrapping       */
    e620:	d0a82103 	ldbu	r2,-24444(gp)
    e624:	10803fcc 	andi	r2,r2,255
    e628:	10000326 	beq	r2,zero,e638 <OSIntExit+0x5c>
            OSIntNesting--;
    e62c:	d0a82103 	ldbu	r2,-24444(gp)
    e630:	10bfffc4 	addi	r2,r2,-1
    e634:	d0a82105 	stb	r2,-24444(gp)
        }
        if (OSIntNesting == 0) {                           /* Reschedule only if all ISRs complete ... */
    e638:	d0a82103 	ldbu	r2,-24444(gp)
    e63c:	10803fcc 	andi	r2,r2,255
    e640:	10001a1e 	bne	r2,zero,e6ac <OSIntExit+0xd0>
            if (OSLockNesting == 0) {                      /* ... and not locked.                      */
    e644:	d0a81303 	ldbu	r2,-24500(gp)
    e648:	10803fcc 	andi	r2,r2,255
    e64c:	1000171e 	bne	r2,zero,e6ac <OSIntExit+0xd0>
                OS_SchedNew();
    e650:	000f6840 	call	f684 <OS_SchedNew>
                if (OSPrioHighRdy != OSPrioCur) {          /* No Ctx Sw if current task is highest rdy */
    e654:	d0e81503 	ldbu	r3,-24492(gp)
    e658:	d0a81543 	ldbu	r2,-24491(gp)
    e65c:	18c03fcc 	andi	r3,r3,255
    e660:	10803fcc 	andi	r2,r2,255
    e664:	18801126 	beq	r3,r2,e6ac <OSIntExit+0xd0>
                    OSTCBHighRdy  = OSTCBPrioTbl[OSPrioHighRdy];
    e668:	d0a81503 	ldbu	r2,-24492(gp)
    e66c:	10c03fcc 	andi	r3,r2,255
    e670:	008000b4 	movhi	r2,2
    e674:	109b5804 	addi	r2,r2,28000
    e678:	18c7883a 	add	r3,r3,r3
    e67c:	18c7883a 	add	r3,r3,r3
    e680:	10c5883a 	add	r2,r2,r3
    e684:	10800017 	ldw	r2,0(r2)
    e688:	d0a81d15 	stw	r2,-24460(gp)
#if OS_TASK_PROFILE_EN > 0
                    OSTCBHighRdy->OSTCBCtxSwCtr++;         /* Inc. # of context switches to this task  */
    e68c:	d0a81d17 	ldw	r2,-24460(gp)
    e690:	10c00e17 	ldw	r3,56(r2)
    e694:	18c00044 	addi	r3,r3,1
    e698:	10c00e15 	stw	r3,56(r2)
#endif
                    OSCtxSwCtr++;                          /* Keep track of the number of ctx switches */
    e69c:	d0a81817 	ldw	r2,-24480(gp)
    e6a0:	10800044 	addi	r2,r2,1
    e6a4:	d0a81815 	stw	r2,-24480(gp)
                    OSIntCtxSw();                          /* Perform interrupt level ctx switch       */
    e6a8:	0018c380 	call	18c38 <OSCtxSw>
    e6ac:	e0bffd17 	ldw	r2,-12(fp)
    e6b0:	e0bfff15 	stw	r2,-4(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    e6b4:	e0bfff17 	ldw	r2,-4(fp)
    e6b8:	1001703a 	wrctl	status,r2
                }
            }
        }
        OS_EXIT_CRITICAL();
    }
}
    e6bc:	e037883a 	mov	sp,fp
    e6c0:	dfc00117 	ldw	ra,4(sp)
    e6c4:	df000017 	ldw	fp,0(sp)
    e6c8:	dec00204 	addi	sp,sp,8
    e6cc:	f800283a 	ret

0000e6d0 <OSSchedLock>:
*********************************************************************************************************
*/

#if OS_SCHED_LOCK_EN > 0
void  OSSchedLock (void)
{
    e6d0:	defffc04 	addi	sp,sp,-16
    e6d4:	df000315 	stw	fp,12(sp)
    e6d8:	df000304 	addi	fp,sp,12
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
    e6dc:	e03ffd15 	stw	zero,-12(fp)
#endif



    if (OSRunning == OS_TRUE) {                  /* Make sure multitasking is running                  */
    e6e0:	d0a81343 	ldbu	r2,-24499(gp)
    e6e4:	10803fcc 	andi	r2,r2,255
    e6e8:	10800058 	cmpnei	r2,r2,1
    e6ec:	1000161e 	bne	r2,zero,e748 <OSSchedLock+0x78>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    e6f0:	0005303a 	rdctl	r2,status
    e6f4:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    e6f8:	e0fffe17 	ldw	r3,-8(fp)
    e6fc:	00bfff84 	movi	r2,-2
    e700:	1884703a 	and	r2,r3,r2
    e704:	1001703a 	wrctl	status,r2
  
  return context;
    e708:	e0bffe17 	ldw	r2,-8(fp)
        OS_ENTER_CRITICAL();
    e70c:	e0bffd15 	stw	r2,-12(fp)
        if (OSIntNesting == 0) {                 /* Can't call from an ISR                             */
    e710:	d0a82103 	ldbu	r2,-24444(gp)
    e714:	10803fcc 	andi	r2,r2,255
    e718:	1000071e 	bne	r2,zero,e738 <OSSchedLock+0x68>
            if (OSLockNesting < 255u) {          /* Prevent OSLockNesting from wrapping back to 0      */
    e71c:	d0a81303 	ldbu	r2,-24500(gp)
    e720:	10803fcc 	andi	r2,r2,255
    e724:	10803fe0 	cmpeqi	r2,r2,255
    e728:	1000031e 	bne	r2,zero,e738 <OSSchedLock+0x68>
                OSLockNesting++;                 /* Increment lock nesting level                       */
    e72c:	d0a81303 	ldbu	r2,-24500(gp)
    e730:	10800044 	addi	r2,r2,1
    e734:	d0a81305 	stb	r2,-24500(gp)
    e738:	e0bffd17 	ldw	r2,-12(fp)
    e73c:	e0bfff15 	stw	r2,-4(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    e740:	e0bfff17 	ldw	r2,-4(fp)
    e744:	1001703a 	wrctl	status,r2
            }
        }
        OS_EXIT_CRITICAL();
    }
}
    e748:	e037883a 	mov	sp,fp
    e74c:	df000017 	ldw	fp,0(sp)
    e750:	dec00104 	addi	sp,sp,4
    e754:	f800283a 	ret

0000e758 <OSSchedUnlock>:
*********************************************************************************************************
*/

#if OS_SCHED_LOCK_EN > 0
void  OSSchedUnlock (void)
{
    e758:	defff804 	addi	sp,sp,-32
    e75c:	dfc00715 	stw	ra,28(sp)
    e760:	df000615 	stw	fp,24(sp)
    e764:	df000604 	addi	fp,sp,24
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
    e768:	e03ffa15 	stw	zero,-24(fp)
#endif



    if (OSRunning == OS_TRUE) {                            /* Make sure multitasking is running        */
    e76c:	d0a81343 	ldbu	r2,-24499(gp)
    e770:	10803fcc 	andi	r2,r2,255
    e774:	10800058 	cmpnei	r2,r2,1
    e778:	1000281e 	bne	r2,zero,e81c <OSSchedUnlock+0xc4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    e77c:	0005303a 	rdctl	r2,status
    e780:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    e784:	e0fffb17 	ldw	r3,-20(fp)
    e788:	00bfff84 	movi	r2,-2
    e78c:	1884703a 	and	r2,r3,r2
    e790:	1001703a 	wrctl	status,r2
  
  return context;
    e794:	e0bffb17 	ldw	r2,-20(fp)
        OS_ENTER_CRITICAL();
    e798:	e0bffa15 	stw	r2,-24(fp)
        if (OSLockNesting > 0) {                           /* Do not decrement if already 0            */
    e79c:	d0a81303 	ldbu	r2,-24500(gp)
    e7a0:	10803fcc 	andi	r2,r2,255
    e7a4:	10001926 	beq	r2,zero,e80c <OSSchedUnlock+0xb4>
            OSLockNesting--;                               /* Decrement lock nesting level             */
    e7a8:	d0a81303 	ldbu	r2,-24500(gp)
    e7ac:	10bfffc4 	addi	r2,r2,-1
    e7b0:	d0a81305 	stb	r2,-24500(gp)
            if (OSLockNesting == 0) {                      /* See if scheduler is enabled and ...      */
    e7b4:	d0a81303 	ldbu	r2,-24500(gp)
    e7b8:	10803fcc 	andi	r2,r2,255
    e7bc:	10000e1e 	bne	r2,zero,e7f8 <OSSchedUnlock+0xa0>
                if (OSIntNesting == 0) {                   /* ... not in an ISR                        */
    e7c0:	d0a82103 	ldbu	r2,-24444(gp)
    e7c4:	10803fcc 	andi	r2,r2,255
    e7c8:	1000061e 	bne	r2,zero,e7e4 <OSSchedUnlock+0x8c>
    e7cc:	e0bffa17 	ldw	r2,-24(fp)
    e7d0:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    e7d4:	e0bffc17 	ldw	r2,-16(fp)
    e7d8:	1001703a 	wrctl	status,r2
                    OS_EXIT_CRITICAL();
                    OS_Sched();                            /* See if a HPT is ready                    */
    e7dc:	000f5b80 	call	f5b8 <OS_Sched>
    e7e0:	00000e06 	br	e81c <OSSchedUnlock+0xc4>
    e7e4:	e0bffa17 	ldw	r2,-24(fp)
    e7e8:	e0bffd15 	stw	r2,-12(fp)
    e7ec:	e0bffd17 	ldw	r2,-12(fp)
    e7f0:	1001703a 	wrctl	status,r2
    e7f4:	00000906 	br	e81c <OSSchedUnlock+0xc4>
    e7f8:	e0bffa17 	ldw	r2,-24(fp)
    e7fc:	e0bffe15 	stw	r2,-8(fp)
    e800:	e0bffe17 	ldw	r2,-8(fp)
    e804:	1001703a 	wrctl	status,r2
    e808:	00000406 	br	e81c <OSSchedUnlock+0xc4>
    e80c:	e0bffa17 	ldw	r2,-24(fp)
    e810:	e0bfff15 	stw	r2,-4(fp)
    e814:	e0bfff17 	ldw	r2,-4(fp)
    e818:	1001703a 	wrctl	status,r2
            }
        } else {
            OS_EXIT_CRITICAL();
        }
    }
}
    e81c:	e037883a 	mov	sp,fp
    e820:	dfc00117 	ldw	ra,4(sp)
    e824:	df000017 	ldw	fp,0(sp)
    e828:	dec00204 	addi	sp,sp,8
    e82c:	f800283a 	ret

0000e830 <OSStart>:
*                 d_ Execute the task.
*********************************************************************************************************
*/

void  OSStart (void)
{
    e830:	defffe04 	addi	sp,sp,-8
    e834:	dfc00115 	stw	ra,4(sp)
    e838:	df000015 	stw	fp,0(sp)
    e83c:	d839883a 	mov	fp,sp
    if (OSRunning == OS_FALSE) {
    e840:	d0a81343 	ldbu	r2,-24499(gp)
    e844:	10803fcc 	andi	r2,r2,255
    e848:	10000f1e 	bne	r2,zero,e888 <OSStart+0x58>
        OS_SchedNew();                               /* Find highest priority's task priority number   */
    e84c:	000f6840 	call	f684 <OS_SchedNew>
        OSPrioCur     = OSPrioHighRdy;
    e850:	d0a81503 	ldbu	r2,-24492(gp)
    e854:	d0a81545 	stb	r2,-24491(gp)
        OSTCBHighRdy  = OSTCBPrioTbl[OSPrioHighRdy]; /* Point to highest priority task ready to run    */
    e858:	d0a81503 	ldbu	r2,-24492(gp)
    e85c:	10c03fcc 	andi	r3,r2,255
    e860:	008000b4 	movhi	r2,2
    e864:	109b5804 	addi	r2,r2,28000
    e868:	18c7883a 	add	r3,r3,r3
    e86c:	18c7883a 	add	r3,r3,r3
    e870:	10c5883a 	add	r2,r2,r3
    e874:	10800017 	ldw	r2,0(r2)
    e878:	d0a81d15 	stw	r2,-24460(gp)
        OSTCBCur      = OSTCBHighRdy;
    e87c:	d0a81d17 	ldw	r2,-24460(gp)
    e880:	d0a82215 	stw	r2,-24440(gp)
        OSStartHighRdy();                            /* Execute target specific code to start task     */
    e884:	0018cc40 	call	18cc4 <OSStartHighRdy>
    }
}
    e888:	e037883a 	mov	sp,fp
    e88c:	dfc00117 	ldw	ra,4(sp)
    e890:	df000017 	ldw	fp,0(sp)
    e894:	dec00204 	addi	sp,sp,8
    e898:	f800283a 	ret

0000e89c <OSStatInit>:
*********************************************************************************************************
*/

#if OS_TASK_STAT_EN > 0
void  OSStatInit (void)
{
    e89c:	defff904 	addi	sp,sp,-28
    e8a0:	dfc00615 	stw	ra,24(sp)
    e8a4:	df000515 	stw	fp,20(sp)
    e8a8:	df000504 	addi	fp,sp,20
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
    e8ac:	e03ffb15 	stw	zero,-20(fp)
#endif



    OSTimeDly(2);                                /* Synchronize with clock tick                        */
    e8b0:	01000084 	movi	r4,2
    e8b4:	00153c80 	call	153c8 <OSTimeDly>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    e8b8:	0005303a 	rdctl	r2,status
    e8bc:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    e8c0:	e0fffc17 	ldw	r3,-16(fp)
    e8c4:	00bfff84 	movi	r2,-2
    e8c8:	1884703a 	and	r2,r3,r2
    e8cc:	1001703a 	wrctl	status,r2
  
  return context;
    e8d0:	e0bffc17 	ldw	r2,-16(fp)
    OS_ENTER_CRITICAL();
    e8d4:	e0bffb15 	stw	r2,-20(fp)
    OSIdleCtr    = 0L;                           /* Clear idle counter                                 */
    e8d8:	d0281415 	stw	zero,-24496(gp)
    e8dc:	e0bffb17 	ldw	r2,-20(fp)
    e8e0:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    e8e4:	e0bffd17 	ldw	r2,-12(fp)
    e8e8:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    OSTimeDly(OS_TICKS_PER_SEC / 10);            /* Determine MAX. idle counter value for 1/10 second  */
    e8ec:	0009883a 	mov	r4,zero
    e8f0:	00153c80 	call	153c8 <OSTimeDly>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    e8f4:	0005303a 	rdctl	r2,status
    e8f8:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    e8fc:	e0fffe17 	ldw	r3,-8(fp)
    e900:	00bfff84 	movi	r2,-2
    e904:	1884703a 	and	r2,r3,r2
    e908:	1001703a 	wrctl	status,r2
  
  return context;
    e90c:	e0bffe17 	ldw	r2,-8(fp)
    OS_ENTER_CRITICAL();
    e910:	e0bffb15 	stw	r2,-20(fp)
    OSIdleCtrMax = OSIdleCtr;                    /* Store maximum idle counter count in 1/10 second    */
    e914:	d0a81417 	ldw	r2,-24496(gp)
    e918:	d0a81915 	stw	r2,-24476(gp)
    OSStatRdy    = OS_TRUE;
    e91c:	00800044 	movi	r2,1
    e920:	d0a82505 	stb	r2,-24428(gp)
    e924:	e0bffb17 	ldw	r2,-20(fp)
    e928:	e0bfff15 	stw	r2,-4(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    e92c:	e0bfff17 	ldw	r2,-4(fp)
    e930:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
}
    e934:	e037883a 	mov	sp,fp
    e938:	dfc00117 	ldw	ra,4(sp)
    e93c:	df000017 	ldw	fp,0(sp)
    e940:	dec00204 	addi	sp,sp,8
    e944:	f800283a 	ret

0000e948 <OSTimeTick>:
* Returns    : none
*********************************************************************************************************
*/

void  OSTimeTick (void)
{
    e948:	defff704 	addi	sp,sp,-36
    e94c:	dfc00815 	stw	ra,32(sp)
    e950:	df000715 	stw	fp,28(sp)
    e954:	df000704 	addi	fp,sp,28
    OS_TCB    *ptcb;
#if OS_TICK_STEP_EN > 0
    BOOLEAN    step;
#endif
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
    e958:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_TIME_TICK_HOOK_EN > 0
    OSTimeTickHook();                                      /* Call user definable hook                     */
    e95c:	0018edc0 	call	18edc <OSTimeTickHook>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    e960:	0005303a 	rdctl	r2,status
    e964:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    e968:	e0fffc17 	ldw	r3,-16(fp)
    e96c:	00bfff84 	movi	r2,-2
    e970:	1884703a 	and	r2,r3,r2
    e974:	1001703a 	wrctl	status,r2
  
  return context;
    e978:	e0bffc17 	ldw	r2,-16(fp)
#endif
#if OS_TIME_GET_SET_EN > 0
    OS_ENTER_CRITICAL();                                   /* Update the 32-bit tick counter               */
    e97c:	e0bffb15 	stw	r2,-20(fp)
    OSTime++;
    e980:	d0a82317 	ldw	r2,-24436(gp)
    e984:	10800044 	addi	r2,r2,1
    e988:	d0a82315 	stw	r2,-24436(gp)
    e98c:	e0bffb17 	ldw	r2,-20(fp)
    e990:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    e994:	e0bffd17 	ldw	r2,-12(fp)
    e998:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
#endif
    if (OSRunning == OS_TRUE) {
    e99c:	d0a81343 	ldbu	r2,-24499(gp)
    e9a0:	10803fcc 	andi	r2,r2,255
    e9a4:	10800058 	cmpnei	r2,r2,1
    e9a8:	1000691e 	bne	r2,zero,eb50 <OSTimeTick+0x208>
#if OS_TICK_STEP_EN > 0
        switch (OSTickStepState) {                         /* Determine whether we need to process a tick  */
    e9ac:	d0a81703 	ldbu	r2,-24484(gp)
    e9b0:	10803fcc 	andi	r2,r2,255
    e9b4:	10c00060 	cmpeqi	r3,r2,1
    e9b8:	1800061e 	bne	r3,zero,e9d4 <OSTimeTick+0x8c>
    e9bc:	10c000a0 	cmpeqi	r3,r2,2
    e9c0:	1800061e 	bne	r3,zero,e9dc <OSTimeTick+0x94>
    e9c4:	10000a1e 	bne	r2,zero,e9f0 <OSTimeTick+0xa8>
            case OS_TICK_STEP_DIS:                         /* Yes, stepping is disabled                    */
                 step = OS_TRUE;
    e9c8:	00800044 	movi	r2,1
    e9cc:	e0bffa05 	stb	r2,-24(fp)
                 break;
    e9d0:	00000b06 	br	ea00 <OSTimeTick+0xb8>

            case OS_TICK_STEP_WAIT:                        /* No,  waiting for uC/OS-View to set ...       */
                 step = OS_FALSE;                          /*      .. OSTickStepState to OS_TICK_STEP_ONCE */
    e9d4:	e03ffa05 	stb	zero,-24(fp)
                 break;
    e9d8:	00000906 	br	ea00 <OSTimeTick+0xb8>

            case OS_TICK_STEP_ONCE:                        /* Yes, process tick once and wait for next ... */
                 step            = OS_TRUE;                /*      ... step command from uC/OS-View        */
    e9dc:	00800044 	movi	r2,1
    e9e0:	e0bffa05 	stb	r2,-24(fp)
                 OSTickStepState = OS_TICK_STEP_WAIT;
    e9e4:	00800044 	movi	r2,1
    e9e8:	d0a81705 	stb	r2,-24484(gp)
                 break;
    e9ec:	00000406 	br	ea00 <OSTimeTick+0xb8>

            default:                                       /* Invalid case, correct situation              */
                 step            = OS_TRUE;
    e9f0:	00800044 	movi	r2,1
    e9f4:	e0bffa05 	stb	r2,-24(fp)
                 OSTickStepState = OS_TICK_STEP_DIS;
    e9f8:	d0281705 	stb	zero,-24484(gp)
                 break;
    e9fc:	0001883a 	nop
        }
        if (step == OS_FALSE) {                            /* Return if waiting for step command           */
    ea00:	e0bffa03 	ldbu	r2,-24(fp)
    ea04:	1000011e 	bne	r2,zero,ea0c <OSTimeTick+0xc4>
            return;
    ea08:	00005106 	br	eb50 <OSTimeTick+0x208>
        }
#endif
        ptcb = OSTCBList;                                  /* Point at first TCB in TCB list               */
    ea0c:	d0a81617 	ldw	r2,-24488(gp)
    ea10:	e0bff915 	stw	r2,-28(fp)
        while (ptcb->OSTCBPrio != OS_TASK_IDLE_PRIO) {     /* Go through all TCBs in TCB list              */
    ea14:	00004906 	br	eb3c <OSTimeTick+0x1f4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    ea18:	0005303a 	rdctl	r2,status
    ea1c:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    ea20:	e0fffe17 	ldw	r3,-8(fp)
    ea24:	00bfff84 	movi	r2,-2
    ea28:	1884703a 	and	r2,r3,r2
    ea2c:	1001703a 	wrctl	status,r2
  
  return context;
    ea30:	e0bffe17 	ldw	r2,-8(fp)
            OS_ENTER_CRITICAL();
    ea34:	e0bffb15 	stw	r2,-20(fp)
            if (ptcb->OSTCBDly != 0) {                     /* No, Delayed or waiting for event with TO     */
    ea38:	e0bff917 	ldw	r2,-28(fp)
    ea3c:	10800b8b 	ldhu	r2,46(r2)
    ea40:	10bfffcc 	andi	r2,r2,65535
    ea44:	10003626 	beq	r2,zero,eb20 <OSTimeTick+0x1d8>
                if (--ptcb->OSTCBDly == 0) {               /* Decrement nbr of ticks to end of delay       */
    ea48:	e0bff917 	ldw	r2,-28(fp)
    ea4c:	10800b8b 	ldhu	r2,46(r2)
    ea50:	10bfffc4 	addi	r2,r2,-1
    ea54:	1007883a 	mov	r3,r2
    ea58:	e0bff917 	ldw	r2,-28(fp)
    ea5c:	10c00b8d 	sth	r3,46(r2)
    ea60:	e0bff917 	ldw	r2,-28(fp)
    ea64:	10800b8b 	ldhu	r2,46(r2)
    ea68:	10bfffcc 	andi	r2,r2,65535
    ea6c:	10002c1e 	bne	r2,zero,eb20 <OSTimeTick+0x1d8>
                                                           /* Check for timeout                            */
                    if ((ptcb->OSTCBStat & OS_STAT_PEND_ANY) != OS_STAT_RDY) {
    ea70:	e0bff917 	ldw	r2,-28(fp)
    ea74:	10800c03 	ldbu	r2,48(r2)
    ea78:	10803fcc 	andi	r2,r2,255
    ea7c:	10800dcc 	andi	r2,r2,55
    ea80:	10000b26 	beq	r2,zero,eab0 <OSTimeTick+0x168>
                        ptcb->OSTCBStat  &= ~(INT8U)OS_STAT_PEND_ANY;          /* Yes, Clear status flag   */
    ea84:	e0bff917 	ldw	r2,-28(fp)
    ea88:	10c00c03 	ldbu	r3,48(r2)
    ea8c:	00bff204 	movi	r2,-56
    ea90:	1884703a 	and	r2,r3,r2
    ea94:	1007883a 	mov	r3,r2
    ea98:	e0bff917 	ldw	r2,-28(fp)
    ea9c:	10c00c05 	stb	r3,48(r2)
                        ptcb->OSTCBStatPend = OS_STAT_PEND_TO;                 /* Indicate PEND timeout    */
    eaa0:	e0bff917 	ldw	r2,-28(fp)
    eaa4:	00c00044 	movi	r3,1
    eaa8:	10c00c45 	stb	r3,49(r2)
    eaac:	00000206 	br	eab8 <OSTimeTick+0x170>
                    } else {
                        ptcb->OSTCBStatPend = OS_STAT_PEND_OK;
    eab0:	e0bff917 	ldw	r2,-28(fp)
    eab4:	10000c45 	stb	zero,49(r2)
                    }

                    if ((ptcb->OSTCBStat & OS_STAT_SUSPEND) == OS_STAT_RDY) {  /* Is task suspended?       */
    eab8:	e0bff917 	ldw	r2,-28(fp)
    eabc:	10800c03 	ldbu	r2,48(r2)
    eac0:	10803fcc 	andi	r2,r2,255
    eac4:	1080020c 	andi	r2,r2,8
    eac8:	1000151e 	bne	r2,zero,eb20 <OSTimeTick+0x1d8>
                        OSRdyGrp               |= ptcb->OSTCBBitY;             /* No,  Make ready          */
    eacc:	e0bff917 	ldw	r2,-28(fp)
    ead0:	10c00d83 	ldbu	r3,54(r2)
    ead4:	d0a81f03 	ldbu	r2,-24452(gp)
    ead8:	1884b03a 	or	r2,r3,r2
    eadc:	d0a81f05 	stb	r2,-24452(gp)
                        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
    eae0:	e0bff917 	ldw	r2,-28(fp)
    eae4:	10800d03 	ldbu	r2,52(r2)
    eae8:	10c03fcc 	andi	r3,r2,255
    eaec:	e0bff917 	ldw	r2,-28(fp)
    eaf0:	10800d03 	ldbu	r2,52(r2)
    eaf4:	11003fcc 	andi	r4,r2,255
    eaf8:	d0a81f44 	addi	r2,gp,-24451
    eafc:	2085883a 	add	r2,r4,r2
    eb00:	11000003 	ldbu	r4,0(r2)
    eb04:	e0bff917 	ldw	r2,-28(fp)
    eb08:	10800d43 	ldbu	r2,53(r2)
    eb0c:	2084b03a 	or	r2,r4,r2
    eb10:	1009883a 	mov	r4,r2
    eb14:	d0a81f44 	addi	r2,gp,-24451
    eb18:	1885883a 	add	r2,r3,r2
    eb1c:	11000005 	stb	r4,0(r2)
                    }
                }
            }
            ptcb = ptcb->OSTCBNext;                        /* Point at next TCB in TCB list                */
    eb20:	e0bff917 	ldw	r2,-28(fp)
    eb24:	10800517 	ldw	r2,20(r2)
    eb28:	e0bff915 	stw	r2,-28(fp)
    eb2c:	e0bffb17 	ldw	r2,-20(fp)
    eb30:	e0bfff15 	stw	r2,-4(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    eb34:	e0bfff17 	ldw	r2,-4(fp)
    eb38:	1001703a 	wrctl	status,r2
        if (step == OS_FALSE) {                            /* Return if waiting for step command           */
            return;
        }
#endif
        ptcb = OSTCBList;                                  /* Point at first TCB in TCB list               */
        while (ptcb->OSTCBPrio != OS_TASK_IDLE_PRIO) {     /* Go through all TCBs in TCB list              */
    eb3c:	e0bff917 	ldw	r2,-28(fp)
    eb40:	10800c83 	ldbu	r2,50(r2)
    eb44:	10803fcc 	andi	r2,r2,255
    eb48:	10800518 	cmpnei	r2,r2,20
    eb4c:	103fb21e 	bne	r2,zero,ea18 <__alt_mem_Flash_flash_data+0xf400ea18>
            }
            ptcb = ptcb->OSTCBNext;                        /* Point at next TCB in TCB list                */
            OS_EXIT_CRITICAL();
        }
    }
}
    eb50:	e037883a 	mov	sp,fp
    eb54:	dfc00117 	ldw	ra,4(sp)
    eb58:	df000017 	ldw	fp,0(sp)
    eb5c:	dec00204 	addi	sp,sp,8
    eb60:	f800283a 	ret

0000eb64 <OSVersion>:
* Returns    : the version number of uC/OS-II multiplied by 100.
*********************************************************************************************************
*/

INT16U  OSVersion (void)
{
    eb64:	deffff04 	addi	sp,sp,-4
    eb68:	df000015 	stw	fp,0(sp)
    eb6c:	d839883a 	mov	fp,sp
    return (OS_VERSION);
    eb70:	00804784 	movi	r2,286
}
    eb74:	e037883a 	mov	sp,fp
    eb78:	df000017 	ldw	fp,0(sp)
    eb7c:	dec00104 	addi	sp,sp,4
    eb80:	f800283a 	ret

0000eb84 <OS_Dummy>:
*********************************************************************************************************
*/

#if OS_TASK_DEL_EN > 0
void  OS_Dummy (void)
{
    eb84:	deffff04 	addi	sp,sp,-4
    eb88:	df000015 	stw	fp,0(sp)
    eb8c:	d839883a 	mov	fp,sp
}
    eb90:	e037883a 	mov	sp,fp
    eb94:	df000017 	ldw	fp,0(sp)
    eb98:	dec00104 	addi	sp,sp,4
    eb9c:	f800283a 	ret

0000eba0 <OS_EventTaskRdy>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
INT8U  OS_EventTaskRdy (OS_EVENT *pevent, void *pmsg, INT8U msk, INT8U pend_stat)
{
    eba0:	defff804 	addi	sp,sp,-32
    eba4:	dfc00715 	stw	ra,28(sp)
    eba8:	df000615 	stw	fp,24(sp)
    ebac:	df000604 	addi	fp,sp,24
    ebb0:	e13ffc15 	stw	r4,-16(fp)
    ebb4:	e17ffd15 	stw	r5,-12(fp)
    ebb8:	3007883a 	mov	r3,r6
    ebbc:	3805883a 	mov	r2,r7
    ebc0:	e0fffe05 	stb	r3,-8(fp)
    ebc4:	e0bfff05 	stb	r2,-4(fp)
    INT16U  *ptbl;
#endif


#if OS_LOWEST_PRIO <= 63
    y    = OSUnMapTbl[pevent->OSEventGrp];              /* Find HPT waiting for message                */
    ebc8:	e0bffc17 	ldw	r2,-16(fp)
    ebcc:	10800283 	ldbu	r2,10(r2)
    ebd0:	10c03fcc 	andi	r3,r2,255
    ebd4:	008000b4 	movhi	r2,2
    ebd8:	10a66c04 	addi	r2,r2,-26192
    ebdc:	10c5883a 	add	r2,r2,r3
    ebe0:	10800003 	ldbu	r2,0(r2)
    ebe4:	e0bffa05 	stb	r2,-24(fp)
    x    = OSUnMapTbl[pevent->OSEventTbl[y]];
    ebe8:	e0bffa03 	ldbu	r2,-24(fp)
    ebec:	e0fffc17 	ldw	r3,-16(fp)
    ebf0:	1885883a 	add	r2,r3,r2
    ebf4:	10800204 	addi	r2,r2,8
    ebf8:	108000c3 	ldbu	r2,3(r2)
    ebfc:	10c03fcc 	andi	r3,r2,255
    ec00:	008000b4 	movhi	r2,2
    ec04:	10a66c04 	addi	r2,r2,-26192
    ec08:	10c5883a 	add	r2,r2,r3
    ec0c:	10800003 	ldbu	r2,0(r2)
    ec10:	e0bffa45 	stb	r2,-23(fp)
    prio = (INT8U)((y << 3) + x);                       /* Find priority of task getting the msg       */
    ec14:	e0bffa03 	ldbu	r2,-24(fp)
    ec18:	100490fa 	slli	r2,r2,3
    ec1c:	1007883a 	mov	r3,r2
    ec20:	e0bffa43 	ldbu	r2,-23(fp)
    ec24:	1885883a 	add	r2,r3,r2
    ec28:	e0bffa85 	stb	r2,-22(fp)
        x = OSUnMapTbl[(*ptbl >> 8) & 0xFF] + 8;
    }
    prio = (INT8U)((y << 4) + x);                       /* Find priority of task getting the msg       */
#endif

    ptcb                  =  OSTCBPrioTbl[prio];        /* Point to this task's OS_TCB                 */
    ec2c:	e0fffa83 	ldbu	r3,-22(fp)
    ec30:	008000b4 	movhi	r2,2
    ec34:	109b5804 	addi	r2,r2,28000
    ec38:	18c7883a 	add	r3,r3,r3
    ec3c:	18c7883a 	add	r3,r3,r3
    ec40:	10c5883a 	add	r2,r2,r3
    ec44:	10800017 	ldw	r2,0(r2)
    ec48:	e0bffb15 	stw	r2,-20(fp)
    ptcb->OSTCBDly        =  0;                         /* Prevent OSTimeTick() from readying task     */
    ec4c:	e0bffb17 	ldw	r2,-20(fp)
    ec50:	10000b8d 	sth	zero,46(r2)
#if ((OS_Q_EN > 0) && (OS_MAX_QS > 0)) || (OS_MBOX_EN > 0)
    ptcb->OSTCBMsg        =  pmsg;                      /* Send message directly to waiting task       */
    ec54:	e0bffb17 	ldw	r2,-20(fp)
    ec58:	e0fffd17 	ldw	r3,-12(fp)
    ec5c:	10c00915 	stw	r3,36(r2)
#else
    pmsg                  =  pmsg;                      /* Prevent compiler warning if not used        */
#endif
    ptcb->OSTCBStat      &= ~msk;                       /* Clear bit associated with event type        */
    ec60:	e0bffb17 	ldw	r2,-20(fp)
    ec64:	10800c03 	ldbu	r2,48(r2)
    ec68:	1007883a 	mov	r3,r2
    ec6c:	e0bffe03 	ldbu	r2,-8(fp)
    ec70:	0084303a 	nor	r2,zero,r2
    ec74:	1884703a 	and	r2,r3,r2
    ec78:	1007883a 	mov	r3,r2
    ec7c:	e0bffb17 	ldw	r2,-20(fp)
    ec80:	10c00c05 	stb	r3,48(r2)
    ptcb->OSTCBStatPend   =  pend_stat;                 /* Set pend status of post or abort            */
    ec84:	e0bffb17 	ldw	r2,-20(fp)
    ec88:	e0ffff03 	ldbu	r3,-4(fp)
    ec8c:	10c00c45 	stb	r3,49(r2)
                                                        /* See if task is ready (could be susp'd)      */
    if ((ptcb->OSTCBStat &   OS_STAT_SUSPEND) == OS_STAT_RDY) {
    ec90:	e0bffb17 	ldw	r2,-20(fp)
    ec94:	10800c03 	ldbu	r2,48(r2)
    ec98:	10803fcc 	andi	r2,r2,255
    ec9c:	1080020c 	andi	r2,r2,8
    eca0:	1000111e 	bne	r2,zero,ece8 <OS_EventTaskRdy+0x148>
        OSRdyGrp         |=  ptcb->OSTCBBitY;           /* Put task in the ready to run list           */
    eca4:	e0bffb17 	ldw	r2,-20(fp)
    eca8:	10c00d83 	ldbu	r3,54(r2)
    ecac:	d0a81f03 	ldbu	r2,-24452(gp)
    ecb0:	1884b03a 	or	r2,r3,r2
    ecb4:	d0a81f05 	stb	r2,-24452(gp)
        OSRdyTbl[y]      |=  ptcb->OSTCBBitX;
    ecb8:	e0fffa03 	ldbu	r3,-24(fp)
    ecbc:	e13ffa03 	ldbu	r4,-24(fp)
    ecc0:	d0a81f44 	addi	r2,gp,-24451
    ecc4:	2085883a 	add	r2,r4,r2
    ecc8:	11000003 	ldbu	r4,0(r2)
    eccc:	e0bffb17 	ldw	r2,-20(fp)
    ecd0:	10800d43 	ldbu	r2,53(r2)
    ecd4:	2084b03a 	or	r2,r4,r2
    ecd8:	1009883a 	mov	r4,r2
    ecdc:	d0a81f44 	addi	r2,gp,-24451
    ece0:	1885883a 	add	r2,r3,r2
    ece4:	11000005 	stb	r4,0(r2)
    }

    OS_EventTaskRemove(ptcb, pevent);                   /* Remove this task from event   wait list     */
    ece8:	e13ffb17 	ldw	r4,-20(fp)
    ecec:	e17ffc17 	ldw	r5,-16(fp)
    ecf0:	000ef900 	call	ef90 <OS_EventTaskRemove>
#if (OS_EVENT_MULTI_EN > 0)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {   /* Remove this task from events' wait lists    */
    ecf4:	e0bffb17 	ldw	r2,-20(fp)
    ecf8:	10800817 	ldw	r2,32(r2)
    ecfc:	10000826 	beq	r2,zero,ed20 <OS_EventTaskRdy+0x180>
        OS_EventTaskRemoveMulti(ptcb, ptcb->OSTCBEventMultiPtr);
    ed00:	e0bffb17 	ldw	r2,-20(fp)
    ed04:	10800817 	ldw	r2,32(r2)
    ed08:	e13ffb17 	ldw	r4,-20(fp)
    ed0c:	100b883a 	mov	r5,r2
    ed10:	000f0440 	call	f044 <OS_EventTaskRemoveMulti>
        ptcb->OSTCBEventPtr       = (OS_EVENT  *)pevent;/* Return event as first multi-pend event ready*/
    ed14:	e0bffb17 	ldw	r2,-20(fp)
    ed18:	e0fffc17 	ldw	r3,-16(fp)
    ed1c:	10c00715 	stw	r3,28(r2)
    }
#endif

    return (prio);
    ed20:	e0bffa83 	ldbu	r2,-22(fp)
}
    ed24:	e037883a 	mov	sp,fp
    ed28:	dfc00117 	ldw	ra,4(sp)
    ed2c:	df000017 	ldw	fp,0(sp)
    ed30:	dec00204 	addi	sp,sp,8
    ed34:	f800283a 	ret

0000ed38 <OS_EventTaskWait>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
void  OS_EventTaskWait (OS_EVENT *pevent)
{
    ed38:	defffd04 	addi	sp,sp,-12
    ed3c:	df000215 	stw	fp,8(sp)
    ed40:	df000204 	addi	fp,sp,8
    ed44:	e13fff15 	stw	r4,-4(fp)
    INT8U  y;


    OSTCBCur->OSTCBEventPtr               = pevent;                 /* Store ptr to ECB in TCB         */
    ed48:	d0a82217 	ldw	r2,-24440(gp)
    ed4c:	e0ffff17 	ldw	r3,-4(fp)
    ed50:	10c00715 	stw	r3,28(r2)

    pevent->OSEventTbl[OSTCBCur->OSTCBY] |= OSTCBCur->OSTCBBitX;    /* Put task in waiting list        */
    ed54:	d0a82217 	ldw	r2,-24440(gp)
    ed58:	10800d03 	ldbu	r2,52(r2)
    ed5c:	10803fcc 	andi	r2,r2,255
    ed60:	d0e82217 	ldw	r3,-24440(gp)
    ed64:	18c00d03 	ldbu	r3,52(r3)
    ed68:	18c03fcc 	andi	r3,r3,255
    ed6c:	e13fff17 	ldw	r4,-4(fp)
    ed70:	20c7883a 	add	r3,r4,r3
    ed74:	18c00204 	addi	r3,r3,8
    ed78:	190000c3 	ldbu	r4,3(r3)
    ed7c:	d0e82217 	ldw	r3,-24440(gp)
    ed80:	18c00d43 	ldbu	r3,53(r3)
    ed84:	20c6b03a 	or	r3,r4,r3
    ed88:	1809883a 	mov	r4,r3
    ed8c:	e0ffff17 	ldw	r3,-4(fp)
    ed90:	1885883a 	add	r2,r3,r2
    ed94:	10800204 	addi	r2,r2,8
    ed98:	110000c5 	stb	r4,3(r2)
    pevent->OSEventGrp                   |= OSTCBCur->OSTCBBitY;
    ed9c:	e0bfff17 	ldw	r2,-4(fp)
    eda0:	10c00283 	ldbu	r3,10(r2)
    eda4:	d0a82217 	ldw	r2,-24440(gp)
    eda8:	10800d83 	ldbu	r2,54(r2)
    edac:	1884b03a 	or	r2,r3,r2
    edb0:	1007883a 	mov	r3,r2
    edb4:	e0bfff17 	ldw	r2,-4(fp)
    edb8:	10c00285 	stb	r3,10(r2)

    y             =  OSTCBCur->OSTCBY;            /* Task no longer ready                              */
    edbc:	d0a82217 	ldw	r2,-24440(gp)
    edc0:	10800d03 	ldbu	r2,52(r2)
    edc4:	e0bffe05 	stb	r2,-8(fp)
    OSRdyTbl[y]  &= ~OSTCBCur->OSTCBBitX;
    edc8:	e0fffe03 	ldbu	r3,-8(fp)
    edcc:	e13ffe03 	ldbu	r4,-8(fp)
    edd0:	d0a81f44 	addi	r2,gp,-24451
    edd4:	2085883a 	add	r2,r4,r2
    edd8:	10800003 	ldbu	r2,0(r2)
    eddc:	1009883a 	mov	r4,r2
    ede0:	d0a82217 	ldw	r2,-24440(gp)
    ede4:	10800d43 	ldbu	r2,53(r2)
    ede8:	0084303a 	nor	r2,zero,r2
    edec:	2084703a 	and	r2,r4,r2
    edf0:	1009883a 	mov	r4,r2
    edf4:	d0a81f44 	addi	r2,gp,-24451
    edf8:	1885883a 	add	r2,r3,r2
    edfc:	11000005 	stb	r4,0(r2)
    if (OSRdyTbl[y] == 0) {
    ee00:	e0fffe03 	ldbu	r3,-8(fp)
    ee04:	d0a81f44 	addi	r2,gp,-24451
    ee08:	1885883a 	add	r2,r3,r2
    ee0c:	10800003 	ldbu	r2,0(r2)
    ee10:	10803fcc 	andi	r2,r2,255
    ee14:	1000071e 	bne	r2,zero,ee34 <OS_EventTaskWait+0xfc>
        OSRdyGrp &= ~OSTCBCur->OSTCBBitY;         /* Clear event grp bit if this was only task pending */
    ee18:	d0a82217 	ldw	r2,-24440(gp)
    ee1c:	10800d83 	ldbu	r2,54(r2)
    ee20:	0084303a 	nor	r2,zero,r2
    ee24:	1007883a 	mov	r3,r2
    ee28:	d0a81f03 	ldbu	r2,-24452(gp)
    ee2c:	1884703a 	and	r2,r3,r2
    ee30:	d0a81f05 	stb	r2,-24452(gp)
    }
}
    ee34:	e037883a 	mov	sp,fp
    ee38:	df000017 	ldw	fp,0(sp)
    ee3c:	dec00104 	addi	sp,sp,4
    ee40:	f800283a 	ret

0000ee44 <OS_EventTaskWaitMulti>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if ((OS_EVENT_EN) && (OS_EVENT_MULTI_EN > 0))
void  OS_EventTaskWaitMulti (OS_EVENT **pevents_wait)
{
    ee44:	defffb04 	addi	sp,sp,-20
    ee48:	df000415 	stw	fp,16(sp)
    ee4c:	df000404 	addi	fp,sp,16
    ee50:	e13fff15 	stw	r4,-4(fp)
    OS_EVENT **pevents;
    OS_EVENT  *pevent;
    INT8U      y;


    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;
    ee54:	d0a82217 	ldw	r2,-24440(gp)
    ee58:	10000715 	stw	zero,28(r2)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)pevents_wait;       /* Store ptr to ECBs in TCB        */
    ee5c:	d0a82217 	ldw	r2,-24440(gp)
    ee60:	e0ffff17 	ldw	r3,-4(fp)
    ee64:	10c00815 	stw	r3,32(r2)

    pevents =  pevents_wait;
    ee68:	e0bfff17 	ldw	r2,-4(fp)
    ee6c:	e0bffc15 	stw	r2,-16(fp)
    pevent  = *pevents;
    ee70:	e0bffc17 	ldw	r2,-16(fp)
    ee74:	10800017 	ldw	r2,0(r2)
    ee78:	e0bffd15 	stw	r2,-12(fp)
    while (pevent != (OS_EVENT *)0) {                               /* Put task in waiting lists       */
    ee7c:	00002006 	br	ef00 <OS_EventTaskWaitMulti+0xbc>
        pevent->OSEventTbl[OSTCBCur->OSTCBY] |= OSTCBCur->OSTCBBitX;
    ee80:	d0a82217 	ldw	r2,-24440(gp)
    ee84:	10800d03 	ldbu	r2,52(r2)
    ee88:	10803fcc 	andi	r2,r2,255
    ee8c:	d0e82217 	ldw	r3,-24440(gp)
    ee90:	18c00d03 	ldbu	r3,52(r3)
    ee94:	18c03fcc 	andi	r3,r3,255
    ee98:	e13ffd17 	ldw	r4,-12(fp)
    ee9c:	20c7883a 	add	r3,r4,r3
    eea0:	18c00204 	addi	r3,r3,8
    eea4:	190000c3 	ldbu	r4,3(r3)
    eea8:	d0e82217 	ldw	r3,-24440(gp)
    eeac:	18c00d43 	ldbu	r3,53(r3)
    eeb0:	20c6b03a 	or	r3,r4,r3
    eeb4:	1809883a 	mov	r4,r3
    eeb8:	e0fffd17 	ldw	r3,-12(fp)
    eebc:	1885883a 	add	r2,r3,r2
    eec0:	10800204 	addi	r2,r2,8
    eec4:	110000c5 	stb	r4,3(r2)
        pevent->OSEventGrp                   |= OSTCBCur->OSTCBBitY;
    eec8:	e0bffd17 	ldw	r2,-12(fp)
    eecc:	10c00283 	ldbu	r3,10(r2)
    eed0:	d0a82217 	ldw	r2,-24440(gp)
    eed4:	10800d83 	ldbu	r2,54(r2)
    eed8:	1884b03a 	or	r2,r3,r2
    eedc:	1007883a 	mov	r3,r2
    eee0:	e0bffd17 	ldw	r2,-12(fp)
    eee4:	10c00285 	stb	r3,10(r2)
        pevents++;
    eee8:	e0bffc17 	ldw	r2,-16(fp)
    eeec:	10800104 	addi	r2,r2,4
    eef0:	e0bffc15 	stw	r2,-16(fp)
        pevent = *pevents;
    eef4:	e0bffc17 	ldw	r2,-16(fp)
    eef8:	10800017 	ldw	r2,0(r2)
    eefc:	e0bffd15 	stw	r2,-12(fp)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)pevents_wait;       /* Store ptr to ECBs in TCB        */

    pevents =  pevents_wait;
    pevent  = *pevents;
    while (pevent != (OS_EVENT *)0) {                               /* Put task in waiting lists       */
    ef00:	e0bffd17 	ldw	r2,-12(fp)
    ef04:	103fde1e 	bne	r2,zero,ee80 <__alt_mem_Flash_flash_data+0xf400ee80>
        pevent->OSEventGrp                   |= OSTCBCur->OSTCBBitY;
        pevents++;
        pevent = *pevents;
    }

    y             =  OSTCBCur->OSTCBY;            /* Task no longer ready                              */
    ef08:	d0a82217 	ldw	r2,-24440(gp)
    ef0c:	10800d03 	ldbu	r2,52(r2)
    ef10:	e0bffe05 	stb	r2,-8(fp)
    OSRdyTbl[y]  &= ~OSTCBCur->OSTCBBitX;
    ef14:	e0fffe03 	ldbu	r3,-8(fp)
    ef18:	e13ffe03 	ldbu	r4,-8(fp)
    ef1c:	d0a81f44 	addi	r2,gp,-24451
    ef20:	2085883a 	add	r2,r4,r2
    ef24:	10800003 	ldbu	r2,0(r2)
    ef28:	1009883a 	mov	r4,r2
    ef2c:	d0a82217 	ldw	r2,-24440(gp)
    ef30:	10800d43 	ldbu	r2,53(r2)
    ef34:	0084303a 	nor	r2,zero,r2
    ef38:	2084703a 	and	r2,r4,r2
    ef3c:	1009883a 	mov	r4,r2
    ef40:	d0a81f44 	addi	r2,gp,-24451
    ef44:	1885883a 	add	r2,r3,r2
    ef48:	11000005 	stb	r4,0(r2)
    if (OSRdyTbl[y] == 0) {
    ef4c:	e0fffe03 	ldbu	r3,-8(fp)
    ef50:	d0a81f44 	addi	r2,gp,-24451
    ef54:	1885883a 	add	r2,r3,r2
    ef58:	10800003 	ldbu	r2,0(r2)
    ef5c:	10803fcc 	andi	r2,r2,255
    ef60:	1000071e 	bne	r2,zero,ef80 <OS_EventTaskWaitMulti+0x13c>
        OSRdyGrp &= ~OSTCBCur->OSTCBBitY;         /* Clear event grp bit if this was only task pending */
    ef64:	d0a82217 	ldw	r2,-24440(gp)
    ef68:	10800d83 	ldbu	r2,54(r2)
    ef6c:	0084303a 	nor	r2,zero,r2
    ef70:	1007883a 	mov	r3,r2
    ef74:	d0a81f03 	ldbu	r2,-24452(gp)
    ef78:	1884703a 	and	r2,r3,r2
    ef7c:	d0a81f05 	stb	r2,-24452(gp)
    }
}
    ef80:	e037883a 	mov	sp,fp
    ef84:	df000017 	ldw	fp,0(sp)
    ef88:	dec00104 	addi	sp,sp,4
    ef8c:	f800283a 	ret

0000ef90 <OS_EventTaskRemove>:
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
void  OS_EventTaskRemove (OS_TCB   *ptcb,
                          OS_EVENT *pevent)
{
    ef90:	defffc04 	addi	sp,sp,-16
    ef94:	df000315 	stw	fp,12(sp)
    ef98:	df000304 	addi	fp,sp,12
    ef9c:	e13ffe15 	stw	r4,-8(fp)
    efa0:	e17fff15 	stw	r5,-4(fp)
    INT8U  y;


    y                       =  ptcb->OSTCBY;
    efa4:	e0bffe17 	ldw	r2,-8(fp)
    efa8:	10800d03 	ldbu	r2,52(r2)
    efac:	e0bffd05 	stb	r2,-12(fp)
    pevent->OSEventTbl[y]  &= ~ptcb->OSTCBBitX;         /* Remove task from wait list                  */
    efb0:	e0bffd03 	ldbu	r2,-12(fp)
    efb4:	e0fffd03 	ldbu	r3,-12(fp)
    efb8:	e13fff17 	ldw	r4,-4(fp)
    efbc:	20c7883a 	add	r3,r4,r3
    efc0:	18c00204 	addi	r3,r3,8
    efc4:	18c000c3 	ldbu	r3,3(r3)
    efc8:	1809883a 	mov	r4,r3
    efcc:	e0fffe17 	ldw	r3,-8(fp)
    efd0:	18c00d43 	ldbu	r3,53(r3)
    efd4:	00c6303a 	nor	r3,zero,r3
    efd8:	20c6703a 	and	r3,r4,r3
    efdc:	1809883a 	mov	r4,r3
    efe0:	e0ffff17 	ldw	r3,-4(fp)
    efe4:	1885883a 	add	r2,r3,r2
    efe8:	10800204 	addi	r2,r2,8
    efec:	110000c5 	stb	r4,3(r2)
    if (pevent->OSEventTbl[y] == 0) {
    eff0:	e0bffd03 	ldbu	r2,-12(fp)
    eff4:	e0ffff17 	ldw	r3,-4(fp)
    eff8:	1885883a 	add	r2,r3,r2
    effc:	10800204 	addi	r2,r2,8
    f000:	108000c3 	ldbu	r2,3(r2)
    f004:	10803fcc 	andi	r2,r2,255
    f008:	10000a1e 	bne	r2,zero,f034 <OS_EventTaskRemove+0xa4>
        pevent->OSEventGrp &= ~ptcb->OSTCBBitY;
    f00c:	e0bfff17 	ldw	r2,-4(fp)
    f010:	10800283 	ldbu	r2,10(r2)
    f014:	1007883a 	mov	r3,r2
    f018:	e0bffe17 	ldw	r2,-8(fp)
    f01c:	10800d83 	ldbu	r2,54(r2)
    f020:	0084303a 	nor	r2,zero,r2
    f024:	1884703a 	and	r2,r3,r2
    f028:	1007883a 	mov	r3,r2
    f02c:	e0bfff17 	ldw	r2,-4(fp)
    f030:	10c00285 	stb	r3,10(r2)
    }
}
    f034:	e037883a 	mov	sp,fp
    f038:	df000017 	ldw	fp,0(sp)
    f03c:	dec00104 	addi	sp,sp,4
    f040:	f800283a 	ret

0000f044 <OS_EventTaskRemoveMulti>:
*********************************************************************************************************
*/
#if ((OS_EVENT_EN) && (OS_EVENT_MULTI_EN > 0))
void  OS_EventTaskRemoveMulti (OS_TCB    *ptcb,
                               OS_EVENT **pevents_multi)
{
    f044:	defffa04 	addi	sp,sp,-24
    f048:	df000515 	stw	fp,20(sp)
    f04c:	df000504 	addi	fp,sp,20
    f050:	e13ffe15 	stw	r4,-8(fp)
    f054:	e17fff15 	stw	r5,-4(fp)
    INT16U     bity;
    INT16U     bitx;
#endif


    y       =  ptcb->OSTCBY;
    f058:	e0bffe17 	ldw	r2,-8(fp)
    f05c:	10800d03 	ldbu	r2,52(r2)
    f060:	e0bffd05 	stb	r2,-12(fp)
    bity    =  ptcb->OSTCBBitY;
    f064:	e0bffe17 	ldw	r2,-8(fp)
    f068:	10800d83 	ldbu	r2,54(r2)
    f06c:	e0bffd45 	stb	r2,-11(fp)
    bitx    =  ptcb->OSTCBBitX;
    f070:	e0bffe17 	ldw	r2,-8(fp)
    f074:	10800d43 	ldbu	r2,53(r2)
    f078:	e0bffd85 	stb	r2,-10(fp)
    pevents =  pevents_multi;
    f07c:	e0bfff17 	ldw	r2,-4(fp)
    f080:	e0bffb15 	stw	r2,-20(fp)
    pevent  = *pevents;
    f084:	e0bffb17 	ldw	r2,-20(fp)
    f088:	10800017 	ldw	r2,0(r2)
    f08c:	e0bffc15 	stw	r2,-16(fp)
    while (pevent != (OS_EVENT *)0) {                   /* Remove task from all events' wait lists     */
    f090:	00002506 	br	f128 <OS_EventTaskRemoveMulti+0xe4>
        pevent->OSEventTbl[y]  &= ~bitx;
    f094:	e0bffd03 	ldbu	r2,-12(fp)
    f098:	e0fffd03 	ldbu	r3,-12(fp)
    f09c:	e13ffc17 	ldw	r4,-16(fp)
    f0a0:	20c7883a 	add	r3,r4,r3
    f0a4:	18c00204 	addi	r3,r3,8
    f0a8:	18c000c3 	ldbu	r3,3(r3)
    f0ac:	1809883a 	mov	r4,r3
    f0b0:	e0fffd83 	ldbu	r3,-10(fp)
    f0b4:	00c6303a 	nor	r3,zero,r3
    f0b8:	20c6703a 	and	r3,r4,r3
    f0bc:	1809883a 	mov	r4,r3
    f0c0:	e0fffc17 	ldw	r3,-16(fp)
    f0c4:	1885883a 	add	r2,r3,r2
    f0c8:	10800204 	addi	r2,r2,8
    f0cc:	110000c5 	stb	r4,3(r2)
        if (pevent->OSEventTbl[y] == 0) {
    f0d0:	e0bffd03 	ldbu	r2,-12(fp)
    f0d4:	e0fffc17 	ldw	r3,-16(fp)
    f0d8:	1885883a 	add	r2,r3,r2
    f0dc:	10800204 	addi	r2,r2,8
    f0e0:	108000c3 	ldbu	r2,3(r2)
    f0e4:	10803fcc 	andi	r2,r2,255
    f0e8:	1000091e 	bne	r2,zero,f110 <OS_EventTaskRemoveMulti+0xcc>
            pevent->OSEventGrp &= ~bity;
    f0ec:	e0bffc17 	ldw	r2,-16(fp)
    f0f0:	10800283 	ldbu	r2,10(r2)
    f0f4:	1007883a 	mov	r3,r2
    f0f8:	e0bffd43 	ldbu	r2,-11(fp)
    f0fc:	0084303a 	nor	r2,zero,r2
    f100:	1884703a 	and	r2,r3,r2
    f104:	1007883a 	mov	r3,r2
    f108:	e0bffc17 	ldw	r2,-16(fp)
    f10c:	10c00285 	stb	r3,10(r2)
        }
        pevents++;
    f110:	e0bffb17 	ldw	r2,-20(fp)
    f114:	10800104 	addi	r2,r2,4
    f118:	e0bffb15 	stw	r2,-20(fp)
        pevent = *pevents;
    f11c:	e0bffb17 	ldw	r2,-20(fp)
    f120:	10800017 	ldw	r2,0(r2)
    f124:	e0bffc15 	stw	r2,-16(fp)
    y       =  ptcb->OSTCBY;
    bity    =  ptcb->OSTCBBitY;
    bitx    =  ptcb->OSTCBBitX;
    pevents =  pevents_multi;
    pevent  = *pevents;
    while (pevent != (OS_EVENT *)0) {                   /* Remove task from all events' wait lists     */
    f128:	e0bffc17 	ldw	r2,-16(fp)
    f12c:	103fd91e 	bne	r2,zero,f094 <__alt_mem_Flash_flash_data+0xf400f094>
            pevent->OSEventGrp &= ~bity;
        }
        pevents++;
        pevent = *pevents;
    }
}
    f130:	e037883a 	mov	sp,fp
    f134:	df000017 	ldw	fp,0(sp)
    f138:	dec00104 	addi	sp,sp,4
    f13c:	f800283a 	ret

0000f140 <OS_EventWaitListInit>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
void  OS_EventWaitListInit (OS_EVENT *pevent)
{
    f140:	defffc04 	addi	sp,sp,-16
    f144:	df000315 	stw	fp,12(sp)
    f148:	df000304 	addi	fp,sp,12
    f14c:	e13fff15 	stw	r4,-4(fp)
    INT16U *ptbl;
#endif
    INT8U   i;


    pevent->OSEventGrp = 0;                      /* No task waiting on event                           */
    f150:	e0bfff17 	ldw	r2,-4(fp)
    f154:	10000285 	stb	zero,10(r2)
    ptbl               = &pevent->OSEventTbl[0];
    f158:	e0bfff17 	ldw	r2,-4(fp)
    f15c:	108002c4 	addi	r2,r2,11
    f160:	e0bffd15 	stw	r2,-12(fp)

    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
    f164:	e03ffe05 	stb	zero,-8(fp)
    f168:	00000706 	br	f188 <OS_EventWaitListInit+0x48>
        *ptbl++ = 0;
    f16c:	e0bffd17 	ldw	r2,-12(fp)
    f170:	10c00044 	addi	r3,r2,1
    f174:	e0fffd15 	stw	r3,-12(fp)
    f178:	10000005 	stb	zero,0(r2)


    pevent->OSEventGrp = 0;                      /* No task waiting on event                           */
    ptbl               = &pevent->OSEventTbl[0];

    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
    f17c:	e0bffe03 	ldbu	r2,-8(fp)
    f180:	10800044 	addi	r2,r2,1
    f184:	e0bffe05 	stb	r2,-8(fp)
    f188:	e0bffe03 	ldbu	r2,-8(fp)
    f18c:	108000f0 	cmpltui	r2,r2,3
    f190:	103ff61e 	bne	r2,zero,f16c <__alt_mem_Flash_flash_data+0xf400f16c>
        *ptbl++ = 0;
    }
}
    f194:	e037883a 	mov	sp,fp
    f198:	df000017 	ldw	fp,0(sp)
    f19c:	dec00104 	addi	sp,sp,4
    f1a0:	f800283a 	ret

0000f1a4 <OS_InitEventList>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitEventList (void)
{
    f1a4:	defffb04 	addi	sp,sp,-20
    f1a8:	dfc00415 	stw	ra,16(sp)
    f1ac:	df000315 	stw	fp,12(sp)
    f1b0:	df000304 	addi	fp,sp,12
    INT16U     i;
    OS_EVENT  *pevent1;
    OS_EVENT  *pevent2;


    OS_MemClr((INT8U *)&OSEventTbl[0], sizeof(OSEventTbl)); /* Clear the event table                   */
    f1b4:	010000b4 	movhi	r4,2
    f1b8:	21174404 	addi	r4,r4,23824
    f1bc:	0142d004 	movi	r5,2880
    f1c0:	000f5040 	call	f504 <OS_MemClr>
    pevent1 = &OSEventTbl[0];
    f1c4:	008000b4 	movhi	r2,2
    f1c8:	10974404 	addi	r2,r2,23824
    f1cc:	e0bffe15 	stw	r2,-8(fp)
    pevent2 = &OSEventTbl[1];
    f1d0:	008000b4 	movhi	r2,2
    f1d4:	10975004 	addi	r2,r2,23872
    f1d8:	e0bfff15 	stw	r2,-4(fp)
    for (i = 0; i < (OS_MAX_EVENTS - 1); i++) {             /* Init. list of free EVENT control blocks */
    f1dc:	e03ffd0d 	sth	zero,-12(fp)
    f1e0:	00001306 	br	f230 <OS_InitEventList+0x8c>
        pevent1->OSEventType    = OS_EVENT_TYPE_UNUSED;
    f1e4:	e0bffe17 	ldw	r2,-8(fp)
    f1e8:	10000005 	stb	zero,0(r2)
        pevent1->OSEventPtr     = pevent2;
    f1ec:	e0bffe17 	ldw	r2,-8(fp)
    f1f0:	e0ffff17 	ldw	r3,-4(fp)
    f1f4:	10c00115 	stw	r3,4(r2)
#if OS_EVENT_NAME_SIZE > 1
        pevent1->OSEventName[0] = '?';                      /* Unknown name                            */
    f1f8:	e0bffe17 	ldw	r2,-8(fp)
    f1fc:	00c00fc4 	movi	r3,63
    f200:	10c00385 	stb	r3,14(r2)
        pevent1->OSEventName[1] = OS_ASCII_NUL;
    f204:	e0bffe17 	ldw	r2,-8(fp)
    f208:	100003c5 	stb	zero,15(r2)
#endif
        pevent1++;
    f20c:	e0bffe17 	ldw	r2,-8(fp)
    f210:	10800c04 	addi	r2,r2,48
    f214:	e0bffe15 	stw	r2,-8(fp)
        pevent2++;
    f218:	e0bfff17 	ldw	r2,-4(fp)
    f21c:	10800c04 	addi	r2,r2,48
    f220:	e0bfff15 	stw	r2,-4(fp)


    OS_MemClr((INT8U *)&OSEventTbl[0], sizeof(OSEventTbl)); /* Clear the event table                   */
    pevent1 = &OSEventTbl[0];
    pevent2 = &OSEventTbl[1];
    for (i = 0; i < (OS_MAX_EVENTS - 1); i++) {             /* Init. list of free EVENT control blocks */
    f224:	e0bffd0b 	ldhu	r2,-12(fp)
    f228:	10800044 	addi	r2,r2,1
    f22c:	e0bffd0d 	sth	r2,-12(fp)
    f230:	e0bffd0b 	ldhu	r2,-12(fp)
    f234:	10800ef0 	cmpltui	r2,r2,59
    f238:	103fea1e 	bne	r2,zero,f1e4 <__alt_mem_Flash_flash_data+0xf400f1e4>
        pevent1->OSEventName[1] = OS_ASCII_NUL;
#endif
        pevent1++;
        pevent2++;
    }
    pevent1->OSEventType            = OS_EVENT_TYPE_UNUSED;
    f23c:	e0bffe17 	ldw	r2,-8(fp)
    f240:	10000005 	stb	zero,0(r2)
    pevent1->OSEventPtr             = (OS_EVENT *)0;
    f244:	e0bffe17 	ldw	r2,-8(fp)
    f248:	10000115 	stw	zero,4(r2)
#if OS_EVENT_NAME_SIZE > 1
    pevent1->OSEventName[0]         = '?';
    f24c:	e0bffe17 	ldw	r2,-8(fp)
    f250:	00c00fc4 	movi	r3,63
    f254:	10c00385 	stb	r3,14(r2)
    pevent1->OSEventName[1]         = OS_ASCII_NUL;
    f258:	e0bffe17 	ldw	r2,-8(fp)
    f25c:	100003c5 	stb	zero,15(r2)
#endif
    OSEventFreeList                 = &OSEventTbl[0];
    f260:	008000b4 	movhi	r2,2
    f264:	10974404 	addi	r2,r2,23824
    f268:	d0a82015 	stw	r2,-24448(gp)
    OSEventFreeList->OSEventName[0] = '?';                  /* Unknown name                            */
    OSEventFreeList->OSEventName[1] = OS_ASCII_NUL;
#endif
#endif
#endif
}
    f26c:	e037883a 	mov	sp,fp
    f270:	dfc00117 	ldw	ra,4(sp)
    f274:	df000017 	ldw	fp,0(sp)
    f278:	dec00204 	addi	sp,sp,8
    f27c:	f800283a 	ret

0000f280 <OS_InitMisc>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitMisc (void)
{
    f280:	deffff04 	addi	sp,sp,-4
    f284:	df000015 	stw	fp,0(sp)
    f288:	d839883a 	mov	fp,sp
#if OS_TIME_GET_SET_EN > 0
    OSTime        = 0L;                                    /* Clear the 32-bit system clock            */
    f28c:	d0282315 	stw	zero,-24436(gp)
#endif

    OSIntNesting  = 0;                                     /* Clear the interrupt nesting counter      */
    f290:	d0282105 	stb	zero,-24444(gp)
    OSLockNesting = 0;                                     /* Clear the scheduling lock counter        */
    f294:	d0281305 	stb	zero,-24500(gp)

    OSTaskCtr     = 0;                                     /* Clear the number of tasks                */
    f298:	d0281b45 	stb	zero,-24467(gp)

    OSRunning     = OS_FALSE;                              /* Indicate that multitasking not started   */
    f29c:	d0281345 	stb	zero,-24499(gp)

    OSCtxSwCtr    = 0;                                     /* Clear the context switch counter         */
    f2a0:	d0281815 	stw	zero,-24480(gp)
    OSIdleCtr     = 0L;                                    /* Clear the 32-bit idle counter            */
    f2a4:	d0281415 	stw	zero,-24496(gp)

#if OS_TASK_STAT_EN > 0
    OSIdleCtrRun  = 0L;
    f2a8:	d0282615 	stw	zero,-24424(gp)
    OSIdleCtrMax  = 0L;
    f2ac:	d0281915 	stw	zero,-24476(gp)
    OSStatRdy     = OS_FALSE;                              /* Statistic task is not ready              */
    f2b0:	d0282505 	stb	zero,-24428(gp)
#endif
}
    f2b4:	e037883a 	mov	sp,fp
    f2b8:	df000017 	ldw	fp,0(sp)
    f2bc:	dec00104 	addi	sp,sp,4
    f2c0:	f800283a 	ret

0000f2c4 <OS_InitRdyList>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitRdyList (void)
{
    f2c4:	defffd04 	addi	sp,sp,-12
    f2c8:	df000215 	stw	fp,8(sp)
    f2cc:	df000204 	addi	fp,sp,8
#else
    INT16U  *prdytbl;
#endif


    OSRdyGrp      = 0;                                     /* Clear the ready list                     */
    f2d0:	d0281f05 	stb	zero,-24452(gp)
    prdytbl       = &OSRdyTbl[0];
    f2d4:	d0a81f44 	addi	r2,gp,-24451
    f2d8:	e0bfff15 	stw	r2,-4(fp)
    for (i = 0; i < OS_RDY_TBL_SIZE; i++) {
    f2dc:	e03ffe05 	stb	zero,-8(fp)
    f2e0:	00000706 	br	f300 <OS_InitRdyList+0x3c>
        *prdytbl++ = 0;
    f2e4:	e0bfff17 	ldw	r2,-4(fp)
    f2e8:	10c00044 	addi	r3,r2,1
    f2ec:	e0ffff15 	stw	r3,-4(fp)
    f2f0:	10000005 	stb	zero,0(r2)
#endif


    OSRdyGrp      = 0;                                     /* Clear the ready list                     */
    prdytbl       = &OSRdyTbl[0];
    for (i = 0; i < OS_RDY_TBL_SIZE; i++) {
    f2f4:	e0bffe03 	ldbu	r2,-8(fp)
    f2f8:	10800044 	addi	r2,r2,1
    f2fc:	e0bffe05 	stb	r2,-8(fp)
    f300:	e0bffe03 	ldbu	r2,-8(fp)
    f304:	108000f0 	cmpltui	r2,r2,3
    f308:	103ff61e 	bne	r2,zero,f2e4 <__alt_mem_Flash_flash_data+0xf400f2e4>
        *prdytbl++ = 0;
    }

    OSPrioCur     = 0;
    f30c:	d0281545 	stb	zero,-24491(gp)
    OSPrioHighRdy = 0;
    f310:	d0281505 	stb	zero,-24492(gp)

    OSTCBHighRdy  = (OS_TCB *)0;
    f314:	d0281d15 	stw	zero,-24460(gp)
    OSTCBCur      = (OS_TCB *)0;
    f318:	d0282215 	stw	zero,-24440(gp)
}
    f31c:	e037883a 	mov	sp,fp
    f320:	df000017 	ldw	fp,0(sp)
    f324:	dec00104 	addi	sp,sp,4
    f328:	f800283a 	ret

0000f32c <OS_InitTaskIdle>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitTaskIdle (void)
{
    f32c:	defff804 	addi	sp,sp,-32
    f330:	dfc00715 	stw	ra,28(sp)
    f334:	df000615 	stw	fp,24(sp)
    f338:	df000604 	addi	fp,sp,24
#endif


#if OS_TASK_CREATE_EXT_EN > 0
    #if OS_STK_GROWTH == 1
    (void)OSTaskCreateExt(OS_TaskIdle,
    f33c:	00bfffd4 	movui	r2,65535
    f340:	d8800015 	stw	r2,0(sp)
    f344:	008000b4 	movhi	r2,2
    f348:	10954404 	addi	r2,r2,21776
    f34c:	d8800115 	stw	r2,4(sp)
    f350:	00808004 	movi	r2,512
    f354:	d8800215 	stw	r2,8(sp)
    f358:	d8000315 	stw	zero,12(sp)
    f35c:	008000c4 	movi	r2,3
    f360:	d8800415 	stw	r2,16(sp)
    f364:	01000074 	movhi	r4,1
    f368:	213def04 	addi	r4,r4,-2116
    f36c:	000b883a 	mov	r5,zero
    f370:	018000b4 	movhi	r6,2
    f374:	31974304 	addi	r6,r6,23820
    f378:	01c00504 	movi	r7,20
    f37c:	00141d00 	call	141d0 <OSTaskCreateExt>
                       OS_TASK_IDLE_PRIO);
    #endif
#endif

#if OS_TASK_NAME_SIZE > 14
    OSTaskNameSet(OS_TASK_IDLE_PRIO, (INT8U *)"uC/OS-II Idle", &err);
    f380:	01000504 	movi	r4,20
    f384:	014000b4 	movhi	r5,2
    f388:	2966ac04 	addi	r5,r5,-25936
    f38c:	e1bfff04 	addi	r6,fp,-4
    f390:	0014a9c0 	call	14a9c <OSTaskNameSet>
#else
#if OS_TASK_NAME_SIZE > 7
    OSTaskNameSet(OS_TASK_IDLE_PRIO, (INT8U *)"OS-Idle", &err);
#endif
#endif
}
    f394:	e037883a 	mov	sp,fp
    f398:	dfc00117 	ldw	ra,4(sp)
    f39c:	df000017 	ldw	fp,0(sp)
    f3a0:	dec00204 	addi	sp,sp,8
    f3a4:	f800283a 	ret

0000f3a8 <OS_InitTaskStat>:
*********************************************************************************************************
*/

#if OS_TASK_STAT_EN > 0
static  void  OS_InitTaskStat (void)
{
    f3a8:	defff804 	addi	sp,sp,-32
    f3ac:	dfc00715 	stw	ra,28(sp)
    f3b0:	df000615 	stw	fp,24(sp)
    f3b4:	df000604 	addi	fp,sp,24
#endif


#if OS_TASK_CREATE_EXT_EN > 0
    #if OS_STK_GROWTH == 1
    (void)OSTaskCreateExt(OS_TaskStat,
    f3b8:	00bfff94 	movui	r2,65534
    f3bc:	d8800015 	stw	r2,0(sp)
    f3c0:	008000b4 	movhi	r2,2
    f3c4:	1092cc04 	addi	r2,r2,19248
    f3c8:	d8800115 	stw	r2,4(sp)
    f3cc:	00808004 	movi	r2,512
    f3d0:	d8800215 	stw	r2,8(sp)
    f3d4:	d8000315 	stw	zero,12(sp)
    f3d8:	008000c4 	movi	r2,3
    f3dc:	d8800415 	stw	r2,16(sp)
    f3e0:	01000074 	movhi	r4,1
    f3e4:	213e0604 	addi	r4,r4,-2024
    f3e8:	000b883a 	mov	r5,zero
    f3ec:	018000b4 	movhi	r6,2
    f3f0:	3194cb04 	addi	r6,r6,21292
    f3f4:	01c004c4 	movi	r7,19
    f3f8:	00141d00 	call	141d0 <OSTaskCreateExt>
                       OS_TASK_STAT_PRIO);                             /* One higher than the idle task  */
    #endif
#endif

#if OS_TASK_NAME_SIZE > 14
    OSTaskNameSet(OS_TASK_STAT_PRIO, (INT8U *)"uC/OS-II Stat", &err);
    f3fc:	010004c4 	movi	r4,19
    f400:	014000b4 	movhi	r5,2
    f404:	2966b004 	addi	r5,r5,-25920
    f408:	e1bfff04 	addi	r6,fp,-4
    f40c:	0014a9c0 	call	14a9c <OSTaskNameSet>
#else
#if OS_TASK_NAME_SIZE > 7
    OSTaskNameSet(OS_TASK_STAT_PRIO, (INT8U *)"OS-Stat", &err);
#endif
#endif
}
    f410:	e037883a 	mov	sp,fp
    f414:	dfc00117 	ldw	ra,4(sp)
    f418:	df000017 	ldw	fp,0(sp)
    f41c:	dec00204 	addi	sp,sp,8
    f420:	f800283a 	ret

0000f424 <OS_InitTCBList>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitTCBList (void)
{
    f424:	defffb04 	addi	sp,sp,-20
    f428:	dfc00415 	stw	ra,16(sp)
    f42c:	df000315 	stw	fp,12(sp)
    f430:	df000304 	addi	fp,sp,12
    INT8U    i;
    OS_TCB  *ptcb1;
    OS_TCB  *ptcb2;


    OS_MemClr((INT8U *)&OSTCBTbl[0],     sizeof(OSTCBTbl));      /* Clear all the TCBs                 */
    f434:	010000b4 	movhi	r4,2
    f438:	211a1404 	addi	r4,r4,26704
    f43c:	01414404 	movi	r5,1296
    f440:	000f5040 	call	f504 <OS_MemClr>
    OS_MemClr((INT8U *)&OSTCBPrioTbl[0], sizeof(OSTCBPrioTbl));  /* Clear the priority table           */
    f444:	010000b4 	movhi	r4,2
    f448:	211b5804 	addi	r4,r4,28000
    f44c:	01401504 	movi	r5,84
    f450:	000f5040 	call	f504 <OS_MemClr>
    ptcb1 = &OSTCBTbl[0];
    f454:	008000b4 	movhi	r2,2
    f458:	109a1404 	addi	r2,r2,26704
    f45c:	e0bffe15 	stw	r2,-8(fp)
    ptcb2 = &OSTCBTbl[1];
    f460:	008000b4 	movhi	r2,2
    f464:	109a2f04 	addi	r2,r2,26812
    f468:	e0bfff15 	stw	r2,-4(fp)
    for (i = 0; i < (OS_MAX_TASKS + OS_N_SYS_TASKS - 1); i++) {  /* Init. list of free TCBs            */
    f46c:	e03ffd05 	stb	zero,-12(fp)
    f470:	00001106 	br	f4b8 <OS_InitTCBList+0x94>
        ptcb1->OSTCBNext = ptcb2;
    f474:	e0bffe17 	ldw	r2,-8(fp)
    f478:	e0ffff17 	ldw	r3,-4(fp)
    f47c:	10c00515 	stw	r3,20(r2)
#if OS_TASK_NAME_SIZE > 1
        ptcb1->OSTCBTaskName[0] = '?';                           /* Unknown name                       */
    f480:	e0bffe17 	ldw	r2,-8(fp)
    f484:	00c00fc4 	movi	r3,63
    f488:	10c01305 	stb	r3,76(r2)
        ptcb1->OSTCBTaskName[1] = OS_ASCII_NUL;
    f48c:	e0bffe17 	ldw	r2,-8(fp)
    f490:	10001345 	stb	zero,77(r2)
#endif
        ptcb1++;
    f494:	e0bffe17 	ldw	r2,-8(fp)
    f498:	10801b04 	addi	r2,r2,108
    f49c:	e0bffe15 	stw	r2,-8(fp)
        ptcb2++;
    f4a0:	e0bfff17 	ldw	r2,-4(fp)
    f4a4:	10801b04 	addi	r2,r2,108
    f4a8:	e0bfff15 	stw	r2,-4(fp)

    OS_MemClr((INT8U *)&OSTCBTbl[0],     sizeof(OSTCBTbl));      /* Clear all the TCBs                 */
    OS_MemClr((INT8U *)&OSTCBPrioTbl[0], sizeof(OSTCBPrioTbl));  /* Clear the priority table           */
    ptcb1 = &OSTCBTbl[0];
    ptcb2 = &OSTCBTbl[1];
    for (i = 0; i < (OS_MAX_TASKS + OS_N_SYS_TASKS - 1); i++) {  /* Init. list of free TCBs            */
    f4ac:	e0bffd03 	ldbu	r2,-12(fp)
    f4b0:	10800044 	addi	r2,r2,1
    f4b4:	e0bffd05 	stb	r2,-12(fp)
    f4b8:	e0bffd03 	ldbu	r2,-12(fp)
    f4bc:	108002f0 	cmpltui	r2,r2,11
    f4c0:	103fec1e 	bne	r2,zero,f474 <__alt_mem_Flash_flash_data+0xf400f474>
        ptcb1->OSTCBTaskName[1] = OS_ASCII_NUL;
#endif
        ptcb1++;
        ptcb2++;
    }
    ptcb1->OSTCBNext = (OS_TCB *)0;                              /* Last OS_TCB                        */
    f4c4:	e0bffe17 	ldw	r2,-8(fp)
    f4c8:	10000515 	stw	zero,20(r2)
#if OS_TASK_NAME_SIZE > 1
    ptcb1->OSTCBTaskName[0] = '?';                               /* Unknown name                       */
    f4cc:	e0bffe17 	ldw	r2,-8(fp)
    f4d0:	00c00fc4 	movi	r3,63
    f4d4:	10c01305 	stb	r3,76(r2)
    ptcb1->OSTCBTaskName[1] = OS_ASCII_NUL;
    f4d8:	e0bffe17 	ldw	r2,-8(fp)
    f4dc:	10001345 	stb	zero,77(r2)
#endif
    OSTCBList               = (OS_TCB *)0;                       /* TCB lists initializations          */
    f4e0:	d0281615 	stw	zero,-24488(gp)
    OSTCBFreeList           = &OSTCBTbl[0];
    f4e4:	008000b4 	movhi	r2,2
    f4e8:	109a1404 	addi	r2,r2,26704
    f4ec:	d0a81a15 	stw	r2,-24472(gp)
}
    f4f0:	e037883a 	mov	sp,fp
    f4f4:	dfc00117 	ldw	ra,4(sp)
    f4f8:	df000017 	ldw	fp,0(sp)
    f4fc:	dec00204 	addi	sp,sp,8
    f500:	f800283a 	ret

0000f504 <OS_MemClr>:
*                 of the alignment of the destination.
*********************************************************************************************************
*/

void  OS_MemClr (INT8U *pdest, INT16U size)
{
    f504:	defffd04 	addi	sp,sp,-12
    f508:	df000215 	stw	fp,8(sp)
    f50c:	df000204 	addi	fp,sp,8
    f510:	e13ffe15 	stw	r4,-8(fp)
    f514:	2805883a 	mov	r2,r5
    f518:	e0bfff0d 	sth	r2,-4(fp)
    while (size > 0) {
    f51c:	00000706 	br	f53c <OS_MemClr+0x38>
        *pdest++ = (INT8U)0;
    f520:	e0bffe17 	ldw	r2,-8(fp)
    f524:	10c00044 	addi	r3,r2,1
    f528:	e0fffe15 	stw	r3,-8(fp)
    f52c:	10000005 	stb	zero,0(r2)
        size--;
    f530:	e0bfff0b 	ldhu	r2,-4(fp)
    f534:	10bfffc4 	addi	r2,r2,-1
    f538:	e0bfff0d 	sth	r2,-4(fp)
*********************************************************************************************************
*/

void  OS_MemClr (INT8U *pdest, INT16U size)
{
    while (size > 0) {
    f53c:	e0bfff0b 	ldhu	r2,-4(fp)
    f540:	103ff71e 	bne	r2,zero,f520 <__alt_mem_Flash_flash_data+0xf400f520>
        *pdest++ = (INT8U)0;
        size--;
    }
}
    f544:	e037883a 	mov	sp,fp
    f548:	df000017 	ldw	fp,0(sp)
    f54c:	dec00104 	addi	sp,sp,4
    f550:	f800283a 	ret

0000f554 <OS_MemCopy>:
*                 of the alignment of the source and destination.
*********************************************************************************************************
*/

void  OS_MemCopy (INT8U *pdest, INT8U *psrc, INT16U size)
{
    f554:	defffc04 	addi	sp,sp,-16
    f558:	df000315 	stw	fp,12(sp)
    f55c:	df000304 	addi	fp,sp,12
    f560:	e13ffd15 	stw	r4,-12(fp)
    f564:	e17ffe15 	stw	r5,-8(fp)
    f568:	3005883a 	mov	r2,r6
    f56c:	e0bfff0d 	sth	r2,-4(fp)
    while (size > 0) {
    f570:	00000b06 	br	f5a0 <OS_MemCopy+0x4c>
        *pdest++ = *psrc++;
    f574:	e0bffd17 	ldw	r2,-12(fp)
    f578:	10c00044 	addi	r3,r2,1
    f57c:	e0fffd15 	stw	r3,-12(fp)
    f580:	e0fffe17 	ldw	r3,-8(fp)
    f584:	19000044 	addi	r4,r3,1
    f588:	e13ffe15 	stw	r4,-8(fp)
    f58c:	18c00003 	ldbu	r3,0(r3)
    f590:	10c00005 	stb	r3,0(r2)
        size--;
    f594:	e0bfff0b 	ldhu	r2,-4(fp)
    f598:	10bfffc4 	addi	r2,r2,-1
    f59c:	e0bfff0d 	sth	r2,-4(fp)
*********************************************************************************************************
*/

void  OS_MemCopy (INT8U *pdest, INT8U *psrc, INT16U size)
{
    while (size > 0) {
    f5a0:	e0bfff0b 	ldhu	r2,-4(fp)
    f5a4:	103ff31e 	bne	r2,zero,f574 <__alt_mem_Flash_flash_data+0xf400f574>
        *pdest++ = *psrc++;
        size--;
    }
}
    f5a8:	e037883a 	mov	sp,fp
    f5ac:	df000017 	ldw	fp,0(sp)
    f5b0:	dec00104 	addi	sp,sp,4
    f5b4:	f800283a 	ret

0000f5b8 <OS_Sched>:
*              2) Rescheduling is prevented when the scheduler is locked (see OS_SchedLock())
*********************************************************************************************************
*/

void  OS_Sched (void)
{
    f5b8:	defffb04 	addi	sp,sp,-20
    f5bc:	dfc00415 	stw	ra,16(sp)
    f5c0:	df000315 	stw	fp,12(sp)
    f5c4:	df000304 	addi	fp,sp,12
#if OS_CRITICAL_METHOD == 3                            /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
    f5c8:	e03ffd15 	stw	zero,-12(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    f5cc:	0005303a 	rdctl	r2,status
    f5d0:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    f5d4:	e0fffe17 	ldw	r3,-8(fp)
    f5d8:	00bfff84 	movi	r2,-2
    f5dc:	1884703a 	and	r2,r3,r2
    f5e0:	1001703a 	wrctl	status,r2
  
  return context;
    f5e4:	e0bffe17 	ldw	r2,-8(fp)
#endif



    OS_ENTER_CRITICAL();
    f5e8:	e0bffd15 	stw	r2,-12(fp)
    if (OSIntNesting == 0) {                           /* Schedule only if all ISRs done and ...       */
    f5ec:	d0a82103 	ldbu	r2,-24444(gp)
    f5f0:	10803fcc 	andi	r2,r2,255
    f5f4:	10001a1e 	bne	r2,zero,f660 <OS_Sched+0xa8>
        if (OSLockNesting == 0) {                      /* ... scheduler is not locked                  */
    f5f8:	d0a81303 	ldbu	r2,-24500(gp)
    f5fc:	10803fcc 	andi	r2,r2,255
    f600:	1000171e 	bne	r2,zero,f660 <OS_Sched+0xa8>
            OS_SchedNew();
    f604:	000f6840 	call	f684 <OS_SchedNew>
            if (OSPrioHighRdy != OSPrioCur) {          /* No Ctx Sw if current task is highest rdy     */
    f608:	d0e81503 	ldbu	r3,-24492(gp)
    f60c:	d0a81543 	ldbu	r2,-24491(gp)
    f610:	18c03fcc 	andi	r3,r3,255
    f614:	10803fcc 	andi	r2,r2,255
    f618:	18801126 	beq	r3,r2,f660 <OS_Sched+0xa8>
                OSTCBHighRdy = OSTCBPrioTbl[OSPrioHighRdy];
    f61c:	d0a81503 	ldbu	r2,-24492(gp)
    f620:	10c03fcc 	andi	r3,r2,255
    f624:	008000b4 	movhi	r2,2
    f628:	109b5804 	addi	r2,r2,28000
    f62c:	18c7883a 	add	r3,r3,r3
    f630:	18c7883a 	add	r3,r3,r3
    f634:	10c5883a 	add	r2,r2,r3
    f638:	10800017 	ldw	r2,0(r2)
    f63c:	d0a81d15 	stw	r2,-24460(gp)
#if OS_TASK_PROFILE_EN > 0
                OSTCBHighRdy->OSTCBCtxSwCtr++;         /* Inc. # of context switches to this task      */
    f640:	d0a81d17 	ldw	r2,-24460(gp)
    f644:	10c00e17 	ldw	r3,56(r2)
    f648:	18c00044 	addi	r3,r3,1
    f64c:	10c00e15 	stw	r3,56(r2)
#endif
                OSCtxSwCtr++;                          /* Increment context switch counter             */
    f650:	d0a81817 	ldw	r2,-24480(gp)
    f654:	10800044 	addi	r2,r2,1
    f658:	d0a81815 	stw	r2,-24480(gp)
                OS_TASK_SW();                          /* Perform a context switch                     */
    f65c:	0018c380 	call	18c38 <OSCtxSw>
    f660:	e0bffd17 	ldw	r2,-12(fp)
    f664:	e0bfff15 	stw	r2,-4(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    f668:	e0bfff17 	ldw	r2,-4(fp)
    f66c:	1001703a 	wrctl	status,r2
            }
        }
    }
    OS_EXIT_CRITICAL();
}
    f670:	e037883a 	mov	sp,fp
    f674:	dfc00117 	ldw	ra,4(sp)
    f678:	df000017 	ldw	fp,0(sp)
    f67c:	dec00204 	addi	sp,sp,8
    f680:	f800283a 	ret

0000f684 <OS_SchedNew>:
*              2) Interrupts are assumed to be disabled when this function is called.
*********************************************************************************************************
*/

static  void  OS_SchedNew (void)
{
    f684:	defffe04 	addi	sp,sp,-8
    f688:	df000115 	stw	fp,4(sp)
    f68c:	df000104 	addi	fp,sp,4
#if OS_LOWEST_PRIO <= 63                         /* See if we support up to 64 tasks                   */
    INT8U   y;


    y             = OSUnMapTbl[OSRdyGrp];
    f690:	d0a81f03 	ldbu	r2,-24452(gp)
    f694:	10c03fcc 	andi	r3,r2,255
    f698:	008000b4 	movhi	r2,2
    f69c:	10a66c04 	addi	r2,r2,-26192
    f6a0:	10c5883a 	add	r2,r2,r3
    f6a4:	10800003 	ldbu	r2,0(r2)
    f6a8:	e0bfff05 	stb	r2,-4(fp)
    OSPrioHighRdy = (INT8U)((y << 3) + OSUnMapTbl[OSRdyTbl[y]]);
    f6ac:	e0bfff03 	ldbu	r2,-4(fp)
    f6b0:	100490fa 	slli	r2,r2,3
    f6b4:	1009883a 	mov	r4,r2
    f6b8:	e0ffff03 	ldbu	r3,-4(fp)
    f6bc:	d0a81f44 	addi	r2,gp,-24451
    f6c0:	1885883a 	add	r2,r3,r2
    f6c4:	10800003 	ldbu	r2,0(r2)
    f6c8:	10c03fcc 	andi	r3,r2,255
    f6cc:	008000b4 	movhi	r2,2
    f6d0:	10a66c04 	addi	r2,r2,-26192
    f6d4:	10c5883a 	add	r2,r2,r3
    f6d8:	10800003 	ldbu	r2,0(r2)
    f6dc:	2085883a 	add	r2,r4,r2
    f6e0:	d0a81505 	stb	r2,-24492(gp)
        OSPrioHighRdy = (INT8U)((y << 4) + OSUnMapTbl[(*ptbl & 0xFF)]);
    } else {
        OSPrioHighRdy = (INT8U)((y << 4) + OSUnMapTbl[(*ptbl >> 8) & 0xFF] + 8);
    }
#endif
}
    f6e4:	e037883a 	mov	sp,fp
    f6e8:	df000017 	ldw	fp,0(sp)
    f6ec:	dec00104 	addi	sp,sp,4
    f6f0:	f800283a 	ret

0000f6f4 <OS_StrCopy>:
*********************************************************************************************************
*/

#if (OS_EVENT_NAME_SIZE > 1) || (OS_FLAG_NAME_SIZE > 1) || (OS_MEM_NAME_SIZE > 1) || (OS_TASK_NAME_SIZE > 1) || (OS_TMR_CFG_NAME_SIZE > 1)
INT8U  OS_StrCopy (INT8U *pdest, INT8U *psrc)
{
    f6f4:	defffc04 	addi	sp,sp,-16
    f6f8:	df000315 	stw	fp,12(sp)
    f6fc:	df000304 	addi	fp,sp,12
    f700:	e13ffe15 	stw	r4,-8(fp)
    f704:	e17fff15 	stw	r5,-4(fp)
    INT8U  len;


    len = 0;
    f708:	e03ffd05 	stb	zero,-12(fp)
    while (*psrc != OS_ASCII_NUL) {
    f70c:	00000b06 	br	f73c <OS_StrCopy+0x48>
        *pdest++ = *psrc++;
    f710:	e0bffe17 	ldw	r2,-8(fp)
    f714:	10c00044 	addi	r3,r2,1
    f718:	e0fffe15 	stw	r3,-8(fp)
    f71c:	e0ffff17 	ldw	r3,-4(fp)
    f720:	19000044 	addi	r4,r3,1
    f724:	e13fff15 	stw	r4,-4(fp)
    f728:	18c00003 	ldbu	r3,0(r3)
    f72c:	10c00005 	stb	r3,0(r2)
        len++;
    f730:	e0bffd03 	ldbu	r2,-12(fp)
    f734:	10800044 	addi	r2,r2,1
    f738:	e0bffd05 	stb	r2,-12(fp)
{
    INT8U  len;


    len = 0;
    while (*psrc != OS_ASCII_NUL) {
    f73c:	e0bfff17 	ldw	r2,-4(fp)
    f740:	10800003 	ldbu	r2,0(r2)
    f744:	10803fcc 	andi	r2,r2,255
    f748:	103ff11e 	bne	r2,zero,f710 <__alt_mem_Flash_flash_data+0xf400f710>
        *pdest++ = *psrc++;
        len++;
    }
    *pdest = OS_ASCII_NUL;
    f74c:	e0bffe17 	ldw	r2,-8(fp)
    f750:	10000005 	stb	zero,0(r2)
    return (len);
    f754:	e0bffd03 	ldbu	r2,-12(fp)
}
    f758:	e037883a 	mov	sp,fp
    f75c:	df000017 	ldw	fp,0(sp)
    f760:	dec00104 	addi	sp,sp,4
    f764:	f800283a 	ret

0000f768 <OS_StrLen>:
*********************************************************************************************************
*/

#if (OS_EVENT_NAME_SIZE > 1) || (OS_FLAG_NAME_SIZE > 1) || (OS_MEM_NAME_SIZE > 1) || (OS_TASK_NAME_SIZE > 1) || (OS_TMR_CFG_NAME_SIZE > 1)
INT8U  OS_StrLen (INT8U *psrc)
{
    f768:	defffd04 	addi	sp,sp,-12
    f76c:	df000215 	stw	fp,8(sp)
    f770:	df000204 	addi	fp,sp,8
    f774:	e13fff15 	stw	r4,-4(fp)
    INT8U  len;


    len = 0;
    f778:	e03ffe05 	stb	zero,-8(fp)
    while (*psrc != OS_ASCII_NUL) {
    f77c:	00000606 	br	f798 <OS_StrLen+0x30>
        psrc++;
    f780:	e0bfff17 	ldw	r2,-4(fp)
    f784:	10800044 	addi	r2,r2,1
    f788:	e0bfff15 	stw	r2,-4(fp)
        len++;
    f78c:	e0bffe03 	ldbu	r2,-8(fp)
    f790:	10800044 	addi	r2,r2,1
    f794:	e0bffe05 	stb	r2,-8(fp)
{
    INT8U  len;


    len = 0;
    while (*psrc != OS_ASCII_NUL) {
    f798:	e0bfff17 	ldw	r2,-4(fp)
    f79c:	10800003 	ldbu	r2,0(r2)
    f7a0:	10803fcc 	andi	r2,r2,255
    f7a4:	103ff61e 	bne	r2,zero,f780 <__alt_mem_Flash_flash_data+0xf400f780>
        psrc++;
        len++;
    }
    return (len);
    f7a8:	e0bffe03 	ldbu	r2,-8(fp)
}
    f7ac:	e037883a 	mov	sp,fp
    f7b0:	df000017 	ldw	fp,0(sp)
    f7b4:	dec00104 	addi	sp,sp,4
    f7b8:	f800283a 	ret

0000f7bc <OS_TaskIdle>:
*                 power.
*********************************************************************************************************
*/

void  OS_TaskIdle (void *p_arg)
{
    f7bc:	defffa04 	addi	sp,sp,-24
    f7c0:	dfc00515 	stw	ra,20(sp)
    f7c4:	df000415 	stw	fp,16(sp)
    f7c8:	df000404 	addi	fp,sp,16
    f7cc:	e13fff15 	stw	r4,-4(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
    f7d0:	e03ffc15 	stw	zero,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    f7d4:	0005303a 	rdctl	r2,status
    f7d8:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    f7dc:	e0fffd17 	ldw	r3,-12(fp)
    f7e0:	00bfff84 	movi	r2,-2
    f7e4:	1884703a 	and	r2,r3,r2
    f7e8:	1001703a 	wrctl	status,r2
  
  return context;
    f7ec:	e0bffd17 	ldw	r2,-12(fp)



    (void)p_arg;                                 /* Prevent compiler warning for not using 'p_arg'     */
    for (;;) {
        OS_ENTER_CRITICAL();
    f7f0:	e0bffc15 	stw	r2,-16(fp)
        OSIdleCtr++;
    f7f4:	d0a81417 	ldw	r2,-24496(gp)
    f7f8:	10800044 	addi	r2,r2,1
    f7fc:	d0a81415 	stw	r2,-24496(gp)
    f800:	e0bffc17 	ldw	r2,-16(fp)
    f804:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    f808:	e0bffe17 	ldw	r2,-8(fp)
    f80c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OSTaskIdleHook();                        /* Call user definable HOOK                           */
    f810:	0018f300 	call	18f30 <OSTaskIdleHook>
    }
    f814:	003fef06 	br	f7d4 <__alt_mem_Flash_flash_data+0xf400f7d4>

0000f818 <OS_TaskStat>:
*********************************************************************************************************
*/

#if OS_TASK_STAT_EN > 0
void  OS_TaskStat (void *p_arg)
{
    f818:	defff804 	addi	sp,sp,-32
    f81c:	dfc00715 	stw	ra,28(sp)
    f820:	df000615 	stw	fp,24(sp)
    f824:	dc400515 	stw	r17,20(sp)
    f828:	dc000415 	stw	r16,16(sp)
    f82c:	df000604 	addi	fp,sp,24
    f830:	e13ffd15 	stw	r4,-12(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
    f834:	e03ffa15 	stw	zero,-24(fp)
#endif



    (void)p_arg;                                 /* Prevent compiler warning for not using 'p_arg'     */
    while (OSStatRdy == OS_FALSE) {
    f838:	00000206 	br	f844 <OS_TaskStat+0x2c>
        OSTimeDly(2 * OS_TICKS_PER_SEC / 10);    /* Wait until statistic task is ready                 */
    f83c:	01000044 	movi	r4,1
    f840:	00153c80 	call	153c8 <OSTimeDly>
#endif



    (void)p_arg;                                 /* Prevent compiler warning for not using 'p_arg'     */
    while (OSStatRdy == OS_FALSE) {
    f844:	d0a82503 	ldbu	r2,-24428(gp)
    f848:	10803fcc 	andi	r2,r2,255
    f84c:	103ffb26 	beq	r2,zero,f83c <__alt_mem_Flash_flash_data+0xf400f83c>
        OSTimeDly(2 * OS_TICKS_PER_SEC / 10);    /* Wait until statistic task is ready                 */
    }
    OSIdleCtrMax /= 100L;
    f850:	d0e81917 	ldw	r3,-24476(gp)
    f854:	00947b34 	movhi	r2,20972
    f858:	10a147c4 	addi	r2,r2,-31457
    f85c:	1888383a 	mulxuu	r4,r3,r2
    f860:	1885383a 	mul	r2,r3,r2
    f864:	1021883a 	mov	r16,r2
    f868:	2023883a 	mov	r17,r4
    f86c:	8804d17a 	srli	r2,r17,5
    f870:	d0a81915 	stw	r2,-24476(gp)
    if (OSIdleCtrMax == 0L) {
    f874:	d0a81917 	ldw	r2,-24476(gp)
    f878:	1000031e 	bne	r2,zero,f888 <OS_TaskStat+0x70>
        OSCPUUsage = 0;
    f87c:	d0281b05 	stb	zero,-24468(gp)
        (void)OSTaskSuspend(OS_PRIO_SELF);
    f880:	01003fc4 	movi	r4,255
    f884:	001501c0 	call	1501c <OSTaskSuspend>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    f888:	0005303a 	rdctl	r2,status
    f88c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    f890:	e0fffb17 	ldw	r3,-20(fp)
    f894:	00bfff84 	movi	r2,-2
    f898:	1884703a 	and	r2,r3,r2
    f89c:	1001703a 	wrctl	status,r2
  
  return context;
    f8a0:	e0bffb17 	ldw	r2,-20(fp)
    }
    for (;;) {
        OS_ENTER_CRITICAL();
    f8a4:	e0bffa15 	stw	r2,-24(fp)
        OSIdleCtrRun = OSIdleCtr;                /* Obtain the of the idle counter for the past second */
    f8a8:	d0a81417 	ldw	r2,-24496(gp)
    f8ac:	d0a82615 	stw	r2,-24424(gp)
        OSIdleCtr    = 0L;                       /* Reset the idle counter for the next second         */
    f8b0:	d0281415 	stw	zero,-24496(gp)
    f8b4:	e0bffa17 	ldw	r2,-24(fp)
    f8b8:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    f8bc:	e0bffc17 	ldw	r2,-16(fp)
    f8c0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OSCPUUsage   = (INT8U)(100L - OSIdleCtrRun / OSIdleCtrMax);
    f8c4:	d0e82617 	ldw	r3,-24424(gp)
    f8c8:	d0a81917 	ldw	r2,-24476(gp)
    f8cc:	1885203a 	divu	r2,r3,r2
    f8d0:	1007883a 	mov	r3,r2
    f8d4:	00801904 	movi	r2,100
    f8d8:	10c5c83a 	sub	r2,r2,r3
    f8dc:	d0a81b05 	stb	r2,-24468(gp)
        OSTaskStatHook();                        /* Invoke user definable hook                         */
    f8e0:	0018ec00 	call	18ec0 <OSTaskStatHook>
#if (OS_TASK_STAT_STK_CHK_EN > 0) && (OS_TASK_CREATE_EXT_EN > 0)
        OS_TaskStatStkChk();                     /* Check the stacks for each task                     */
    f8e4:	000f8f40 	call	f8f4 <OS_TaskStatStkChk>
#endif
        OSTimeDly(OS_TICKS_PER_SEC / 10);        /* Accumulate OSIdleCtr for the next 1/10 second      */
    f8e8:	0009883a 	mov	r4,zero
    f8ec:	00153c80 	call	153c8 <OSTimeDly>
    }
    f8f0:	003fe506 	br	f888 <__alt_mem_Flash_flash_data+0xf400f888>

0000f8f4 <OS_TaskStatStkChk>:
*********************************************************************************************************
*/

#if (OS_TASK_STAT_STK_CHK_EN > 0) && (OS_TASK_CREATE_EXT_EN > 0)
void  OS_TaskStatStkChk (void)
{
    f8f4:	defffa04 	addi	sp,sp,-24
    f8f8:	dfc00515 	stw	ra,20(sp)
    f8fc:	df000415 	stw	fp,16(sp)
    f900:	df000404 	addi	fp,sp,16
    OS_STK_DATA  stk_data;
    INT8U        err;
    INT8U        prio;


    for (prio = 0; prio <= OS_TASK_IDLE_PRIO; prio++) {
    f904:	e03ffc05 	stb	zero,-16(fp)
    f908:	00002406 	br	f99c <OS_TaskStatStkChk+0xa8>
        err = OSTaskStkChk(prio, &stk_data);
    f90c:	e0fffc03 	ldbu	r3,-16(fp)
    f910:	e0bffe04 	addi	r2,fp,-8
    f914:	1809883a 	mov	r4,r3
    f918:	100b883a 	mov	r5,r2
    f91c:	0014e540 	call	14e54 <OSTaskStkChk>
    f920:	e0bffc45 	stb	r2,-15(fp)
        if (err == OS_ERR_NONE) {
    f924:	e0bffc43 	ldbu	r2,-15(fp)
    f928:	1000191e 	bne	r2,zero,f990 <OS_TaskStatStkChk+0x9c>
            ptcb = OSTCBPrioTbl[prio];
    f92c:	e0fffc03 	ldbu	r3,-16(fp)
    f930:	008000b4 	movhi	r2,2
    f934:	109b5804 	addi	r2,r2,28000
    f938:	18c7883a 	add	r3,r3,r3
    f93c:	18c7883a 	add	r3,r3,r3
    f940:	10c5883a 	add	r2,r2,r3
    f944:	10800017 	ldw	r2,0(r2)
    f948:	e0bffd15 	stw	r2,-12(fp)
            if (ptcb != (OS_TCB *)0) {                               /* Make sure task 'ptcb' is ...   */
    f94c:	e0bffd17 	ldw	r2,-12(fp)
    f950:	10000f26 	beq	r2,zero,f990 <OS_TaskStatStkChk+0x9c>
                if (ptcb != OS_TCB_RESERVED) {                       /* ... still valid.               */
    f954:	e0bffd17 	ldw	r2,-12(fp)
    f958:	10800060 	cmpeqi	r2,r2,1
    f95c:	10000c1e 	bne	r2,zero,f990 <OS_TaskStatStkChk+0x9c>
#if OS_TASK_PROFILE_EN > 0
                    #if OS_STK_GROWTH == 1
                    ptcb->OSTCBStkBase = ptcb->OSTCBStkBottom + ptcb->OSTCBStkSize;
    f960:	e0bffd17 	ldw	r2,-12(fp)
    f964:	10c00217 	ldw	r3,8(r2)
    f968:	e0bffd17 	ldw	r2,-12(fp)
    f96c:	10800317 	ldw	r2,12(r2)
    f970:	1085883a 	add	r2,r2,r2
    f974:	1085883a 	add	r2,r2,r2
    f978:	1887883a 	add	r3,r3,r2
    f97c:	e0bffd17 	ldw	r2,-12(fp)
    f980:	10c01115 	stw	r3,68(r2)
                    #else
                    ptcb->OSTCBStkBase = ptcb->OSTCBStkBottom - ptcb->OSTCBStkSize;
                    #endif
                    ptcb->OSTCBStkUsed = stk_data.OSUsed;            /* Store the number of bytes used */
    f984:	e0ffff17 	ldw	r3,-4(fp)
    f988:	e0bffd17 	ldw	r2,-12(fp)
    f98c:	10c01215 	stw	r3,72(r2)
    OS_STK_DATA  stk_data;
    INT8U        err;
    INT8U        prio;


    for (prio = 0; prio <= OS_TASK_IDLE_PRIO; prio++) {
    f990:	e0bffc03 	ldbu	r2,-16(fp)
    f994:	10800044 	addi	r2,r2,1
    f998:	e0bffc05 	stb	r2,-16(fp)
    f99c:	e0bffc03 	ldbu	r2,-16(fp)
    f9a0:	10800570 	cmpltui	r2,r2,21
    f9a4:	103fd91e 	bne	r2,zero,f90c <__alt_mem_Flash_flash_data+0xf400f90c>
#endif
                }
            }
        }
    }
}
    f9a8:	e037883a 	mov	sp,fp
    f9ac:	dfc00117 	ldw	ra,4(sp)
    f9b0:	df000017 	ldw	fp,0(sp)
    f9b4:	dec00204 	addi	sp,sp,8
    f9b8:	f800283a 	ret

0000f9bc <OS_TCBInit>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

INT8U  OS_TCBInit (INT8U prio, OS_STK *ptos, OS_STK *pbos, INT16U id, INT32U stk_size, void *pext, INT16U opt)
{
    f9bc:	defff204 	addi	sp,sp,-56
    f9c0:	dfc00d15 	stw	ra,52(sp)
    f9c4:	df000c15 	stw	fp,48(sp)
    f9c8:	df000c04 	addi	fp,sp,48
    f9cc:	e17ffc15 	stw	r5,-16(fp)
    f9d0:	e1bffd15 	stw	r6,-12(fp)
    f9d4:	3807883a 	mov	r3,r7
    f9d8:	e0800417 	ldw	r2,16(fp)
    f9dc:	e13ffb05 	stb	r4,-20(fp)
    f9e0:	e0fffe0d 	sth	r3,-8(fp)
    f9e4:	e0bfff0d 	sth	r2,-4(fp)
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
    f9e8:	e03ff415 	stw	zero,-48(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    f9ec:	0005303a 	rdctl	r2,status
    f9f0:	e0bff615 	stw	r2,-40(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    f9f4:	e0fff617 	ldw	r3,-40(fp)
    f9f8:	00bfff84 	movi	r2,-2
    f9fc:	1884703a 	and	r2,r3,r2
    fa00:	1001703a 	wrctl	status,r2
  
  return context;
    fa04:	e0bff617 	ldw	r2,-40(fp)
#endif



    OS_ENTER_CRITICAL();
    fa08:	e0bff415 	stw	r2,-48(fp)
    ptcb = OSTCBFreeList;                                  /* Get a free TCB from the free TCB list    */
    fa0c:	d0a81a17 	ldw	r2,-24472(gp)
    fa10:	e0bff515 	stw	r2,-44(fp)
    if (ptcb != (OS_TCB *)0) {
    fa14:	e0bff517 	ldw	r2,-44(fp)
    fa18:	10009326 	beq	r2,zero,fc68 <OS_TCBInit+0x2ac>
        OSTCBFreeList            = ptcb->OSTCBNext;        /* Update pointer to free TCB list          */
    fa1c:	e0bff517 	ldw	r2,-44(fp)
    fa20:	10800517 	ldw	r2,20(r2)
    fa24:	d0a81a15 	stw	r2,-24472(gp)
    fa28:	e0bff417 	ldw	r2,-48(fp)
    fa2c:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    fa30:	e0bff717 	ldw	r2,-36(fp)
    fa34:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        ptcb->OSTCBStkPtr        = ptos;                   /* Load Stack pointer in TCB                */
    fa38:	e0bff517 	ldw	r2,-44(fp)
    fa3c:	e0fffc17 	ldw	r3,-16(fp)
    fa40:	10c00015 	stw	r3,0(r2)
        ptcb->OSTCBPrio          = prio;                   /* Load task priority into TCB              */
    fa44:	e0bff517 	ldw	r2,-44(fp)
    fa48:	e0fffb03 	ldbu	r3,-20(fp)
    fa4c:	10c00c85 	stb	r3,50(r2)
        ptcb->OSTCBStat          = OS_STAT_RDY;            /* Task is ready to run                     */
    fa50:	e0bff517 	ldw	r2,-44(fp)
    fa54:	10000c05 	stb	zero,48(r2)
        ptcb->OSTCBStatPend      = OS_STAT_PEND_OK;        /* Clear pend status                        */
    fa58:	e0bff517 	ldw	r2,-44(fp)
    fa5c:	10000c45 	stb	zero,49(r2)
        ptcb->OSTCBDly           = 0;                      /* Task is not delayed                      */
    fa60:	e0bff517 	ldw	r2,-44(fp)
    fa64:	10000b8d 	sth	zero,46(r2)

#if OS_TASK_CREATE_EXT_EN > 0
        ptcb->OSTCBExtPtr        = pext;                   /* Store pointer to TCB extension           */
    fa68:	e0bff517 	ldw	r2,-44(fp)
    fa6c:	e0c00317 	ldw	r3,12(fp)
    fa70:	10c00115 	stw	r3,4(r2)
        ptcb->OSTCBStkSize       = stk_size;               /* Store stack size                         */
    fa74:	e0bff517 	ldw	r2,-44(fp)
    fa78:	e0c00217 	ldw	r3,8(fp)
    fa7c:	10c00315 	stw	r3,12(r2)
        ptcb->OSTCBStkBottom     = pbos;                   /* Store pointer to bottom of stack         */
    fa80:	e0bff517 	ldw	r2,-44(fp)
    fa84:	e0fffd17 	ldw	r3,-12(fp)
    fa88:	10c00215 	stw	r3,8(r2)
        ptcb->OSTCBOpt           = opt;                    /* Store task options                       */
    fa8c:	e0bff517 	ldw	r2,-44(fp)
    fa90:	e0ffff0b 	ldhu	r3,-4(fp)
    fa94:	10c0040d 	sth	r3,16(r2)
        ptcb->OSTCBId            = id;                     /* Store task ID                            */
    fa98:	e0bff517 	ldw	r2,-44(fp)
    fa9c:	e0fffe0b 	ldhu	r3,-8(fp)
    faa0:	10c0048d 	sth	r3,18(r2)
        opt                      = opt;
        id                       = id;
#endif

#if OS_TASK_DEL_EN > 0
        ptcb->OSTCBDelReq        = OS_ERR_NONE;
    faa4:	e0bff517 	ldw	r2,-44(fp)
    faa8:	10000dc5 	stb	zero,55(r2)
#endif

#if OS_LOWEST_PRIO <= 63
        ptcb->OSTCBY             = (INT8U)(prio >> 3);          /* Pre-compute X, Y, BitX and BitY     */
    faac:	e0bffb03 	ldbu	r2,-20(fp)
    fab0:	1004d0fa 	srli	r2,r2,3
    fab4:	1007883a 	mov	r3,r2
    fab8:	e0bff517 	ldw	r2,-44(fp)
    fabc:	10c00d05 	stb	r3,52(r2)
        ptcb->OSTCBX             = (INT8U)(prio & 0x07);
    fac0:	e0bffb03 	ldbu	r2,-20(fp)
    fac4:	108001cc 	andi	r2,r2,7
    fac8:	1007883a 	mov	r3,r2
    facc:	e0bff517 	ldw	r2,-44(fp)
    fad0:	10c00cc5 	stb	r3,51(r2)
        ptcb->OSTCBBitY          = (INT8U)(1 << ptcb->OSTCBY);
    fad4:	e0bff517 	ldw	r2,-44(fp)
    fad8:	10800d03 	ldbu	r2,52(r2)
    fadc:	10803fcc 	andi	r2,r2,255
    fae0:	00c00044 	movi	r3,1
    fae4:	1884983a 	sll	r2,r3,r2
    fae8:	1007883a 	mov	r3,r2
    faec:	e0bff517 	ldw	r2,-44(fp)
    faf0:	10c00d85 	stb	r3,54(r2)
        ptcb->OSTCBBitX          = (INT8U)(1 << ptcb->OSTCBX);
    faf4:	e0bff517 	ldw	r2,-44(fp)
    faf8:	10800cc3 	ldbu	r2,51(r2)
    fafc:	10803fcc 	andi	r2,r2,255
    fb00:	00c00044 	movi	r3,1
    fb04:	1884983a 	sll	r2,r3,r2
    fb08:	1007883a 	mov	r3,r2
    fb0c:	e0bff517 	ldw	r2,-44(fp)
    fb10:	10c00d45 	stb	r3,53(r2)
        ptcb->OSTCBBitY          = (INT16U)(1 << ptcb->OSTCBY);
        ptcb->OSTCBBitX          = (INT16U)(1 << ptcb->OSTCBX);
#endif

#if (OS_EVENT_EN)
        ptcb->OSTCBEventPtr      = (OS_EVENT  *)0;         /* Task is not pending on an  event         */
    fb14:	e0bff517 	ldw	r2,-44(fp)
    fb18:	10000715 	stw	zero,28(r2)
#if (OS_EVENT_MULTI_EN > 0)
        ptcb->OSTCBEventMultiPtr = (OS_EVENT **)0;         /* Task is not pending on any events        */
    fb1c:	e0bff517 	ldw	r2,-44(fp)
    fb20:	10000815 	stw	zero,32(r2)
#endif
#endif

#if (OS_FLAG_EN > 0) && (OS_MAX_FLAGS > 0) && (OS_TASK_DEL_EN > 0)
        ptcb->OSTCBFlagNode  = (OS_FLAG_NODE *)0;          /* Task is not pending on an event flag     */
    fb24:	e0bff517 	ldw	r2,-44(fp)
    fb28:	10000a15 	stw	zero,40(r2)
#endif

#if (OS_MBOX_EN > 0) || ((OS_Q_EN > 0) && (OS_MAX_QS > 0))
        ptcb->OSTCBMsg       = (void *)0;                  /* No message received                      */
    fb2c:	e0bff517 	ldw	r2,-44(fp)
    fb30:	10000915 	stw	zero,36(r2)
#endif

#if OS_TASK_PROFILE_EN > 0
        ptcb->OSTCBCtxSwCtr    = 0L;                       /* Initialize profiling variables           */
    fb34:	e0bff517 	ldw	r2,-44(fp)
    fb38:	10000e15 	stw	zero,56(r2)
        ptcb->OSTCBCyclesStart = 0L;
    fb3c:	e0bff517 	ldw	r2,-44(fp)
    fb40:	10001015 	stw	zero,64(r2)
        ptcb->OSTCBCyclesTot   = 0L;
    fb44:	e0bff517 	ldw	r2,-44(fp)
    fb48:	10000f15 	stw	zero,60(r2)
        ptcb->OSTCBStkBase     = (OS_STK *)0;
    fb4c:	e0bff517 	ldw	r2,-44(fp)
    fb50:	10001115 	stw	zero,68(r2)
        ptcb->OSTCBStkUsed     = 0L;
    fb54:	e0bff517 	ldw	r2,-44(fp)
    fb58:	10001215 	stw	zero,72(r2)
#endif

#if OS_TASK_NAME_SIZE > 1
        ptcb->OSTCBTaskName[0] = '?';                      /* Unknown name at task creation            */
    fb5c:	e0bff517 	ldw	r2,-44(fp)
    fb60:	00c00fc4 	movi	r3,63
    fb64:	10c01305 	stb	r3,76(r2)
        ptcb->OSTCBTaskName[1] = OS_ASCII_NUL;
    fb68:	e0bff517 	ldw	r2,-44(fp)
    fb6c:	10001345 	stb	zero,77(r2)
#endif

        OSTCBInitHook(ptcb);
    fb70:	e13ff517 	ldw	r4,-44(fp)
    fb74:	0018f4c0 	call	18f4c <OSTCBInitHook>

        OSTaskCreateHook(ptcb);                            /* Call user defined hook                   */
    fb78:	e13ff517 	ldw	r4,-44(fp)
    fb7c:	0018e640 	call	18e64 <OSTaskCreateHook>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    fb80:	0005303a 	rdctl	r2,status
    fb84:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    fb88:	e0fff817 	ldw	r3,-32(fp)
    fb8c:	00bfff84 	movi	r2,-2
    fb90:	1884703a 	and	r2,r3,r2
    fb94:	1001703a 	wrctl	status,r2
  
  return context;
    fb98:	e0bff817 	ldw	r2,-32(fp)

        OS_ENTER_CRITICAL();
    fb9c:	e0bff415 	stw	r2,-48(fp)
        OSTCBPrioTbl[prio] = ptcb;
    fba0:	e0fffb03 	ldbu	r3,-20(fp)
    fba4:	008000b4 	movhi	r2,2
    fba8:	109b5804 	addi	r2,r2,28000
    fbac:	18c7883a 	add	r3,r3,r3
    fbb0:	18c7883a 	add	r3,r3,r3
    fbb4:	10c5883a 	add	r2,r2,r3
    fbb8:	e0fff517 	ldw	r3,-44(fp)
    fbbc:	10c00015 	stw	r3,0(r2)
        ptcb->OSTCBNext    = OSTCBList;                    /* Link into TCB chain                      */
    fbc0:	d0e81617 	ldw	r3,-24488(gp)
    fbc4:	e0bff517 	ldw	r2,-44(fp)
    fbc8:	10c00515 	stw	r3,20(r2)
        ptcb->OSTCBPrev    = (OS_TCB *)0;
    fbcc:	e0bff517 	ldw	r2,-44(fp)
    fbd0:	10000615 	stw	zero,24(r2)
        if (OSTCBList != (OS_TCB *)0) {
    fbd4:	d0a81617 	ldw	r2,-24488(gp)
    fbd8:	10000326 	beq	r2,zero,fbe8 <OS_TCBInit+0x22c>
            OSTCBList->OSTCBPrev = ptcb;
    fbdc:	d0a81617 	ldw	r2,-24488(gp)
    fbe0:	e0fff517 	ldw	r3,-44(fp)
    fbe4:	10c00615 	stw	r3,24(r2)
        }
        OSTCBList               = ptcb;
    fbe8:	e0bff517 	ldw	r2,-44(fp)
    fbec:	d0a81615 	stw	r2,-24488(gp)
        OSRdyGrp               |= ptcb->OSTCBBitY;         /* Make task ready to run                   */
    fbf0:	e0bff517 	ldw	r2,-44(fp)
    fbf4:	10c00d83 	ldbu	r3,54(r2)
    fbf8:	d0a81f03 	ldbu	r2,-24452(gp)
    fbfc:	1884b03a 	or	r2,r3,r2
    fc00:	d0a81f05 	stb	r2,-24452(gp)
        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
    fc04:	e0bff517 	ldw	r2,-44(fp)
    fc08:	10800d03 	ldbu	r2,52(r2)
    fc0c:	10c03fcc 	andi	r3,r2,255
    fc10:	e0bff517 	ldw	r2,-44(fp)
    fc14:	10800d03 	ldbu	r2,52(r2)
    fc18:	11003fcc 	andi	r4,r2,255
    fc1c:	d0a81f44 	addi	r2,gp,-24451
    fc20:	2085883a 	add	r2,r4,r2
    fc24:	11000003 	ldbu	r4,0(r2)
    fc28:	e0bff517 	ldw	r2,-44(fp)
    fc2c:	10800d43 	ldbu	r2,53(r2)
    fc30:	2084b03a 	or	r2,r4,r2
    fc34:	1009883a 	mov	r4,r2
    fc38:	d0a81f44 	addi	r2,gp,-24451
    fc3c:	1885883a 	add	r2,r3,r2
    fc40:	11000005 	stb	r4,0(r2)
        OSTaskCtr++;                                       /* Increment the #tasks counter             */
    fc44:	d0a81b43 	ldbu	r2,-24467(gp)
    fc48:	10800044 	addi	r2,r2,1
    fc4c:	d0a81b45 	stb	r2,-24467(gp)
    fc50:	e0bff417 	ldw	r2,-48(fp)
    fc54:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    fc58:	e0bff917 	ldw	r2,-28(fp)
    fc5c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_NONE);
    fc60:	0005883a 	mov	r2,zero
    fc64:	00000506 	br	fc7c <OS_TCBInit+0x2c0>
    fc68:	e0bff417 	ldw	r2,-48(fp)
    fc6c:	e0bffa15 	stw	r2,-24(fp)
    fc70:	e0bffa17 	ldw	r2,-24(fp)
    fc74:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_TASK_NO_MORE_TCB);
    fc78:	00801084 	movi	r2,66
}
    fc7c:	e037883a 	mov	sp,fp
    fc80:	dfc00117 	ldw	ra,4(sp)
    fc84:	df000017 	ldw	fp,0(sp)
    fc88:	dec00204 	addi	sp,sp,8
    fc8c:	f800283a 	ret

0000fc90 <OSDebugInit>:
*********************************************************************************************************
*/

#if OS_DEBUG_EN > 0
void  OSDebugInit (void)
{
    fc90:	defffe04 	addi	sp,sp,-8
    fc94:	df000115 	stw	fp,4(sp)
    fc98:	df000104 	addi	fp,sp,4
    void  *ptemp;

    
    ptemp = (void *)&OSDebugEn;
    fc9c:	d0a01904 	addi	r2,gp,-32668
    fca0:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSEndiannessTest;
    fca4:	d0a01a04 	addi	r2,gp,-32664
    fca8:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSEventMax;
    fcac:	d0a01b84 	addi	r2,gp,-32658
    fcb0:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventNameSize;
    fcb4:	d0a01c04 	addi	r2,gp,-32656
    fcb8:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventEn;
    fcbc:	d0a01b04 	addi	r2,gp,-32660
    fcc0:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventSize;
    fcc4:	d0a01c84 	addi	r2,gp,-32654
    fcc8:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventTblSize;
    fccc:	d0a01d04 	addi	r2,gp,-32652
    fcd0:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventMultiEn;
    fcd4:	d0a01d84 	addi	r2,gp,-32650
    fcd8:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSFlagEn;
    fcdc:	d0a01e04 	addi	r2,gp,-32648
    fce0:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagGrpSize;
    fce4:	d0a01e84 	addi	r2,gp,-32646
    fce8:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagNodeSize;
    fcec:	d0a01f04 	addi	r2,gp,-32644
    fcf0:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagWidth;
    fcf4:	d0a01f84 	addi	r2,gp,-32642
    fcf8:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagMax;
    fcfc:	d0a02004 	addi	r2,gp,-32640
    fd00:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagNameSize;
    fd04:	d0a02084 	addi	r2,gp,-32638
    fd08:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSLowestPrio;
    fd0c:	d0a02104 	addi	r2,gp,-32636
    fd10:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSMboxEn;
    fd14:	d0a02184 	addi	r2,gp,-32634
    fd18:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSMemEn;
    fd1c:	d0a02204 	addi	r2,gp,-32632
    fd20:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSMemMax;
    fd24:	d0a02284 	addi	r2,gp,-32630
    fd28:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSMemNameSize;
    fd2c:	d0a02304 	addi	r2,gp,-32628
    fd30:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSMemSize;
    fd34:	d0a02384 	addi	r2,gp,-32626
    fd38:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSMemTblSize;
    fd3c:	d0a02404 	addi	r2,gp,-32624
    fd40:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSMutexEn;
    fd44:	d0a02484 	addi	r2,gp,-32622
    fd48:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSPtrSize;
    fd4c:	d0a02504 	addi	r2,gp,-32620
    fd50:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSQEn;
    fd54:	d0a02584 	addi	r2,gp,-32618
    fd58:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSQMax;
    fd5c:	d0a02604 	addi	r2,gp,-32616
    fd60:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSQSize;
    fd64:	d0a02684 	addi	r2,gp,-32614
    fd68:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSRdyTblSize;
    fd6c:	d0a02704 	addi	r2,gp,-32612
    fd70:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSSemEn;
    fd74:	d0a02784 	addi	r2,gp,-32610
    fd78:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSStkWidth;
    fd7c:	d0a02804 	addi	r2,gp,-32608
    fd80:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSTaskCreateEn;
    fd84:	d0a02884 	addi	r2,gp,-32606
    fd88:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskCreateExtEn;
    fd8c:	d0a02904 	addi	r2,gp,-32604
    fd90:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskDelEn;
    fd94:	d0a02984 	addi	r2,gp,-32602
    fd98:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskIdleStkSize;
    fd9c:	d0a02a04 	addi	r2,gp,-32600
    fda0:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskProfileEn;
    fda4:	d0a02a84 	addi	r2,gp,-32598
    fda8:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskMax;
    fdac:	d0a02b04 	addi	r2,gp,-32596
    fdb0:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskNameSize;
    fdb4:	d0a02b84 	addi	r2,gp,-32594
    fdb8:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskStatEn;
    fdbc:	d0a02c04 	addi	r2,gp,-32592
    fdc0:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskStatStkSize;
    fdc4:	d0a02c84 	addi	r2,gp,-32590
    fdc8:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskStatStkChkEn;
    fdcc:	d0a02d04 	addi	r2,gp,-32588
    fdd0:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskSwHookEn;
    fdd4:	d0a02d84 	addi	r2,gp,-32586
    fdd8:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSTCBPrioTblMax;
    fddc:	d0a02e04 	addi	r2,gp,-32584
    fde0:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTCBSize;
    fde4:	d0a02e84 	addi	r2,gp,-32582
    fde8:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSTicksPerSec;
    fdec:	d0a02f04 	addi	r2,gp,-32580
    fdf0:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTimeTickHookEn;
    fdf4:	d0a02f84 	addi	r2,gp,-32578
    fdf8:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSTmrWheelSize;
    ptemp = (void *)&OSTmrWheelTblSize;
#endif

    ptemp = (void *)&OSVersionNbr;
    fdfc:	d0a03004 	addi	r2,gp,-32576
    fe00:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSDataSize;
    fe04:	d0a03504 	addi	r2,gp,-32556
    fe08:	e0bfff15 	stw	r2,-4(fp)

    ptemp = ptemp;                             /* Prevent compiler warning for 'ptemp' not being used! */
}
    fe0c:	e037883a 	mov	sp,fp
    fe10:	df000017 	ldw	fp,0(sp)
    fe14:	dec00104 	addi	sp,sp,4
    fe18:	f800283a 	ret

0000fe1c <OSFlagAccept>:
*********************************************************************************************************
*/

#if OS_FLAG_ACCEPT_EN > 0
OS_FLAGS  OSFlagAccept (OS_FLAG_GRP *pgrp, OS_FLAGS flags, INT8U wait_type, INT8U *perr)
{
    fe1c:	defff204 	addi	sp,sp,-56
    fe20:	df000d15 	stw	fp,52(sp)
    fe24:	df000d04 	addi	fp,sp,52
    fe28:	e13ffc15 	stw	r4,-16(fp)
    fe2c:	2807883a 	mov	r3,r5
    fe30:	3005883a 	mov	r2,r6
    fe34:	e1ffff15 	stw	r7,-4(fp)
    fe38:	e0fffd0d 	sth	r3,-12(fp)
    fe3c:	e0bffe05 	stb	r2,-8(fp)
    OS_FLAGS      flags_rdy;
    INT8U         result;
    BOOLEAN       consume;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR     cpu_sr = 0;
    fe40:	e03ff415 	stw	zero,-48(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
    fe44:	e0bfff17 	ldw	r2,-4(fp)
    fe48:	1000021e 	bne	r2,zero,fe54 <OSFlagAccept+0x38>
        return ((OS_FLAGS)0);
    fe4c:	0005883a 	mov	r2,zero
    fe50:	0000b006 	br	10114 <OSFlagAccept+0x2f8>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {                        /* Validate 'pgrp'                          */
    fe54:	e0bffc17 	ldw	r2,-16(fp)
    fe58:	1000051e 	bne	r2,zero,fe70 <OSFlagAccept+0x54>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
    fe5c:	e0bfff17 	ldw	r2,-4(fp)
    fe60:	00c01b84 	movi	r3,110
    fe64:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
    fe68:	0005883a 	mov	r2,zero
    fe6c:	0000a906 	br	10114 <OSFlagAccept+0x2f8>
    }
#endif
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {          /* Validate event block type                */
    fe70:	e0bffc17 	ldw	r2,-16(fp)
    fe74:	10800003 	ldbu	r2,0(r2)
    fe78:	10803fcc 	andi	r2,r2,255
    fe7c:	10800160 	cmpeqi	r2,r2,5
    fe80:	1000051e 	bne	r2,zero,fe98 <OSFlagAccept+0x7c>
        *perr = OS_ERR_EVENT_TYPE;
    fe84:	e0bfff17 	ldw	r2,-4(fp)
    fe88:	00c00044 	movi	r3,1
    fe8c:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
    fe90:	0005883a 	mov	r2,zero
    fe94:	00009f06 	br	10114 <OSFlagAccept+0x2f8>
    }
    result = (INT8U)(wait_type & OS_FLAG_CONSUME);
    fe98:	e0fffe03 	ldbu	r3,-8(fp)
    fe9c:	00bfe004 	movi	r2,-128
    fea0:	1884703a 	and	r2,r3,r2
    fea4:	e0bff505 	stb	r2,-44(fp)
    if (result != (INT8U)0) {                              /* See if we need to consume the flags      */
    fea8:	e0bff503 	ldbu	r2,-44(fp)
    feac:	10000626 	beq	r2,zero,fec8 <OSFlagAccept+0xac>
        wait_type &= ~OS_FLAG_CONSUME;
    feb0:	e0bffe03 	ldbu	r2,-8(fp)
    feb4:	10801fcc 	andi	r2,r2,127
    feb8:	e0bffe05 	stb	r2,-8(fp)
        consume    = OS_TRUE;
    febc:	00800044 	movi	r2,1
    fec0:	e0bff385 	stb	r2,-50(fp)
    fec4:	00000106 	br	fecc <OSFlagAccept+0xb0>
    } else {
        consume    = OS_FALSE;
    fec8:	e03ff385 	stb	zero,-50(fp)
    }
/*$PAGE*/
    *perr = OS_ERR_NONE;                                   /* Assume NO error until proven otherwise.  */
    fecc:	e0bfff17 	ldw	r2,-4(fp)
    fed0:	10000005 	stb	zero,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    fed4:	0005303a 	rdctl	r2,status
    fed8:	e0bff615 	stw	r2,-40(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    fedc:	e0fff617 	ldw	r3,-40(fp)
    fee0:	00bfff84 	movi	r2,-2
    fee4:	1884703a 	and	r2,r3,r2
    fee8:	1001703a 	wrctl	status,r2
  
  return context;
    feec:	e0bff617 	ldw	r2,-40(fp)
    OS_ENTER_CRITICAL();
    fef0:	e0bff415 	stw	r2,-48(fp)
    switch (wait_type) {
    fef4:	e0bffe03 	ldbu	r2,-8(fp)
    fef8:	10c00060 	cmpeqi	r3,r2,1
    fefc:	18005f1e 	bne	r3,zero,1007c <OSFlagAccept+0x260>
    ff00:	10c00088 	cmpgei	r3,r2,2
    ff04:	1800021e 	bne	r3,zero,ff10 <OSFlagAccept+0xf4>
    ff08:	10003f26 	beq	r2,zero,10008 <OSFlagAccept+0x1ec>
    ff0c:	00007706 	br	100ec <OSFlagAccept+0x2d0>
    ff10:	10c000a0 	cmpeqi	r3,r2,2
    ff14:	1800031e 	bne	r3,zero,ff24 <OSFlagAccept+0x108>
    ff18:	108000e0 	cmpeqi	r2,r2,3
    ff1c:	10001e1e 	bne	r2,zero,ff98 <OSFlagAccept+0x17c>
    ff20:	00007206 	br	100ec <OSFlagAccept+0x2d0>
        case OS_FLAG_WAIT_SET_ALL:                         /* See if all required flags are set        */
             flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);     /* Extract only the bits we want   */
    ff24:	e0bffc17 	ldw	r2,-16(fp)
    ff28:	10c0020b 	ldhu	r3,8(r2)
    ff2c:	e0bffd0b 	ldhu	r2,-12(fp)
    ff30:	1884703a 	and	r2,r3,r2
    ff34:	e0bff30d 	sth	r2,-52(fp)
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
    ff38:	e0fff30b 	ldhu	r3,-52(fp)
    ff3c:	e0bffd0b 	ldhu	r2,-12(fp)
    ff40:	18800d1e 	bne	r3,r2,ff78 <OSFlagAccept+0x15c>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
    ff44:	e0bff383 	ldbu	r2,-50(fp)
    ff48:	10800058 	cmpnei	r2,r2,1
    ff4c:	10000d1e 	bne	r2,zero,ff84 <OSFlagAccept+0x168>
                     pgrp->OSFlagFlags &= ~flags_rdy;      /* Clear ONLY the flags that we wanted      */
    ff50:	e0bffc17 	ldw	r2,-16(fp)
    ff54:	1080020b 	ldhu	r2,8(r2)
    ff58:	1007883a 	mov	r3,r2
    ff5c:	e0bff30b 	ldhu	r2,-52(fp)
    ff60:	0084303a 	nor	r2,zero,r2
    ff64:	1884703a 	and	r2,r3,r2
    ff68:	1007883a 	mov	r3,r2
    ff6c:	e0bffc17 	ldw	r2,-16(fp)
    ff70:	10c0020d 	sth	r3,8(r2)
    ff74:	00000306 	br	ff84 <OSFlagAccept+0x168>
                 }
             } else {
                 *perr = OS_ERR_FLAG_NOT_RDY;
    ff78:	e0bfff17 	ldw	r2,-4(fp)
    ff7c:	00c01c04 	movi	r3,112
    ff80:	10c00005 	stb	r3,0(r2)
    ff84:	e0bff417 	ldw	r2,-48(fp)
    ff88:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    ff8c:	e0bff717 	ldw	r2,-36(fp)
    ff90:	1001703a 	wrctl	status,r2
             }
             OS_EXIT_CRITICAL();
             break;
    ff94:	00005e06 	br	10110 <OSFlagAccept+0x2f4>

        case OS_FLAG_WAIT_SET_ANY:
             flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);     /* Extract only the bits we want   */
    ff98:	e0bffc17 	ldw	r2,-16(fp)
    ff9c:	10c0020b 	ldhu	r3,8(r2)
    ffa0:	e0bffd0b 	ldhu	r2,-12(fp)
    ffa4:	1884703a 	and	r2,r3,r2
    ffa8:	e0bff30d 	sth	r2,-52(fp)
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag set                      */
    ffac:	e0bff30b 	ldhu	r2,-52(fp)
    ffb0:	10000d26 	beq	r2,zero,ffe8 <OSFlagAccept+0x1cc>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
    ffb4:	e0bff383 	ldbu	r2,-50(fp)
    ffb8:	10800058 	cmpnei	r2,r2,1
    ffbc:	10000d1e 	bne	r2,zero,fff4 <OSFlagAccept+0x1d8>
                     pgrp->OSFlagFlags &= ~flags_rdy;      /* Clear ONLY the flags that we got         */
    ffc0:	e0bffc17 	ldw	r2,-16(fp)
    ffc4:	1080020b 	ldhu	r2,8(r2)
    ffc8:	1007883a 	mov	r3,r2
    ffcc:	e0bff30b 	ldhu	r2,-52(fp)
    ffd0:	0084303a 	nor	r2,zero,r2
    ffd4:	1884703a 	and	r2,r3,r2
    ffd8:	1007883a 	mov	r3,r2
    ffdc:	e0bffc17 	ldw	r2,-16(fp)
    ffe0:	10c0020d 	sth	r3,8(r2)
    ffe4:	00000306 	br	fff4 <OSFlagAccept+0x1d8>
                 }
             } else {
                 *perr = OS_ERR_FLAG_NOT_RDY;
    ffe8:	e0bfff17 	ldw	r2,-4(fp)
    ffec:	00c01c04 	movi	r3,112
    fff0:	10c00005 	stb	r3,0(r2)
    fff4:	e0bff417 	ldw	r2,-48(fp)
    fff8:	e0bff815 	stw	r2,-32(fp)
    fffc:	e0bff817 	ldw	r2,-32(fp)
   10000:	1001703a 	wrctl	status,r2
             }
             OS_EXIT_CRITICAL();
             break;
   10004:	00004206 	br	10110 <OSFlagAccept+0x2f4>

#if OS_FLAG_WAIT_CLR_EN > 0
        case OS_FLAG_WAIT_CLR_ALL:                         /* See if all required flags are cleared    */
             flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags);  /* Extract only the bits we want     */
   10008:	e0bffc17 	ldw	r2,-16(fp)
   1000c:	1080020b 	ldhu	r2,8(r2)
   10010:	0084303a 	nor	r2,zero,r2
   10014:	1007883a 	mov	r3,r2
   10018:	e0bffd0b 	ldhu	r2,-12(fp)
   1001c:	1884703a 	and	r2,r3,r2
   10020:	e0bff30d 	sth	r2,-52(fp)
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
   10024:	e0fff30b 	ldhu	r3,-52(fp)
   10028:	e0bffd0b 	ldhu	r2,-12(fp)
   1002c:	18800b1e 	bne	r3,r2,1005c <OSFlagAccept+0x240>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
   10030:	e0bff383 	ldbu	r2,-50(fp)
   10034:	10800058 	cmpnei	r2,r2,1
   10038:	10000b1e 	bne	r2,zero,10068 <OSFlagAccept+0x24c>
                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we wanted        */
   1003c:	e0bffc17 	ldw	r2,-16(fp)
   10040:	10c0020b 	ldhu	r3,8(r2)
   10044:	e0bff30b 	ldhu	r2,-52(fp)
   10048:	1884b03a 	or	r2,r3,r2
   1004c:	1007883a 	mov	r3,r2
   10050:	e0bffc17 	ldw	r2,-16(fp)
   10054:	10c0020d 	sth	r3,8(r2)
   10058:	00000306 	br	10068 <OSFlagAccept+0x24c>
                 }
             } else {
                 *perr = OS_ERR_FLAG_NOT_RDY;
   1005c:	e0bfff17 	ldw	r2,-4(fp)
   10060:	00c01c04 	movi	r3,112
   10064:	10c00005 	stb	r3,0(r2)
   10068:	e0bff417 	ldw	r2,-48(fp)
   1006c:	e0bff915 	stw	r2,-28(fp)
   10070:	e0bff917 	ldw	r2,-28(fp)
   10074:	1001703a 	wrctl	status,r2
             }
             OS_EXIT_CRITICAL();
             break;
   10078:	00002506 	br	10110 <OSFlagAccept+0x2f4>

        case OS_FLAG_WAIT_CLR_ANY:
             flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags); /* Extract only the bits we want      */
   1007c:	e0bffc17 	ldw	r2,-16(fp)
   10080:	1080020b 	ldhu	r2,8(r2)
   10084:	0084303a 	nor	r2,zero,r2
   10088:	1007883a 	mov	r3,r2
   1008c:	e0bffd0b 	ldhu	r2,-12(fp)
   10090:	1884703a 	and	r2,r3,r2
   10094:	e0bff30d 	sth	r2,-52(fp)
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag cleared                  */
   10098:	e0bff30b 	ldhu	r2,-52(fp)
   1009c:	10000b26 	beq	r2,zero,100cc <OSFlagAccept+0x2b0>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
   100a0:	e0bff383 	ldbu	r2,-50(fp)
   100a4:	10800058 	cmpnei	r2,r2,1
   100a8:	10000b1e 	bne	r2,zero,100d8 <OSFlagAccept+0x2bc>
                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we got           */
   100ac:	e0bffc17 	ldw	r2,-16(fp)
   100b0:	10c0020b 	ldhu	r3,8(r2)
   100b4:	e0bff30b 	ldhu	r2,-52(fp)
   100b8:	1884b03a 	or	r2,r3,r2
   100bc:	1007883a 	mov	r3,r2
   100c0:	e0bffc17 	ldw	r2,-16(fp)
   100c4:	10c0020d 	sth	r3,8(r2)
   100c8:	00000306 	br	100d8 <OSFlagAccept+0x2bc>
                 }
             } else {
                 *perr = OS_ERR_FLAG_NOT_RDY;
   100cc:	e0bfff17 	ldw	r2,-4(fp)
   100d0:	00c01c04 	movi	r3,112
   100d4:	10c00005 	stb	r3,0(r2)
   100d8:	e0bff417 	ldw	r2,-48(fp)
   100dc:	e0bffa15 	stw	r2,-24(fp)
   100e0:	e0bffa17 	ldw	r2,-24(fp)
   100e4:	1001703a 	wrctl	status,r2
             }
             OS_EXIT_CRITICAL();
             break;
   100e8:	00000906 	br	10110 <OSFlagAccept+0x2f4>
   100ec:	e0bff417 	ldw	r2,-48(fp)
   100f0:	e0bffb15 	stw	r2,-20(fp)
   100f4:	e0bffb17 	ldw	r2,-20(fp)
   100f8:	1001703a 	wrctl	status,r2
#endif

        default:
             OS_EXIT_CRITICAL();
             flags_rdy = (OS_FLAGS)0;
   100fc:	e03ff30d 	sth	zero,-52(fp)
             *perr     = OS_ERR_FLAG_WAIT_TYPE;
   10100:	e0bfff17 	ldw	r2,-4(fp)
   10104:	00c01bc4 	movi	r3,111
   10108:	10c00005 	stb	r3,0(r2)
             break;
   1010c:	0001883a 	nop
    }
    return (flags_rdy);
   10110:	e0bff30b 	ldhu	r2,-52(fp)
}
   10114:	e037883a 	mov	sp,fp
   10118:	df000017 	ldw	fp,0(sp)
   1011c:	dec00104 	addi	sp,sp,4
   10120:	f800283a 	ret

00010124 <OSFlagCreate>:
* Called from: Task ONLY
*********************************************************************************************************
*/

OS_FLAG_GRP  *OSFlagCreate (OS_FLAGS flags, INT8U *perr)
{
   10124:	defff804 	addi	sp,sp,-32
   10128:	df000715 	stw	fp,28(sp)
   1012c:	df000704 	addi	fp,sp,28
   10130:	2005883a 	mov	r2,r4
   10134:	e17fff15 	stw	r5,-4(fp)
   10138:	e0bffe0d 	sth	r2,-8(fp)
    OS_FLAG_GRP *pgrp;
#if OS_CRITICAL_METHOD == 3                         /* Allocate storage for CPU status register        */
    OS_CPU_SR    cpu_sr = 0;
   1013c:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                       /* Validate 'perr'                                 */
   10140:	e0bfff17 	ldw	r2,-4(fp)
   10144:	1000021e 	bne	r2,zero,10150 <OSFlagCreate+0x2c>
        return ((OS_FLAG_GRP *)0);
   10148:	0005883a 	mov	r2,zero
   1014c:	00003b06 	br	1023c <OSFlagCreate+0x118>
    }
#endif
    if (OSIntNesting > 0) {                         /* See if called from ISR ...                      */
   10150:	008000b4 	movhi	r2,2
   10154:	10b6d004 	addi	r2,r2,-9408
   10158:	10800003 	ldbu	r2,0(r2)
   1015c:	10803fcc 	andi	r2,r2,255
   10160:	10000526 	beq	r2,zero,10178 <OSFlagCreate+0x54>
        *perr = OS_ERR_CREATE_ISR;                  /* ... can't CREATE from an ISR                    */
   10164:	e0bfff17 	ldw	r2,-4(fp)
   10168:	00c00404 	movi	r3,16
   1016c:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAG_GRP *)0);
   10170:	0005883a 	mov	r2,zero
   10174:	00003106 	br	1023c <OSFlagCreate+0x118>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   10178:	0005303a 	rdctl	r2,status
   1017c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   10180:	e0fffb17 	ldw	r3,-20(fp)
   10184:	00bfff84 	movi	r2,-2
   10188:	1884703a 	and	r2,r3,r2
   1018c:	1001703a 	wrctl	status,r2
  
  return context;
   10190:	e0bffb17 	ldw	r2,-20(fp)
    }
    OS_ENTER_CRITICAL();
   10194:	e0bff915 	stw	r2,-28(fp)
    pgrp = OSFlagFreeList;                          /* Get next free event flag                        */
   10198:	008000b4 	movhi	r2,2
   1019c:	10b6d304 	addi	r2,r2,-9396
   101a0:	10800017 	ldw	r2,0(r2)
   101a4:	e0bffa15 	stw	r2,-24(fp)
    if (pgrp != (OS_FLAG_GRP *)0) {                 /* See if we have event flag groups available      */
   101a8:	e0bffa17 	ldw	r2,-24(fp)
   101ac:	10001b26 	beq	r2,zero,1021c <OSFlagCreate+0xf8>
                                                    /* Adjust free list                                */
        OSFlagFreeList       = (OS_FLAG_GRP *)OSFlagFreeList->OSFlagWaitList;
   101b0:	008000b4 	movhi	r2,2
   101b4:	10b6d304 	addi	r2,r2,-9396
   101b8:	10800017 	ldw	r2,0(r2)
   101bc:	10c00117 	ldw	r3,4(r2)
   101c0:	008000b4 	movhi	r2,2
   101c4:	10b6d304 	addi	r2,r2,-9396
   101c8:	10c00015 	stw	r3,0(r2)
        pgrp->OSFlagType     = OS_EVENT_TYPE_FLAG;  /* Set to event flag group type                    */
   101cc:	e0bffa17 	ldw	r2,-24(fp)
   101d0:	00c00144 	movi	r3,5
   101d4:	10c00005 	stb	r3,0(r2)
        pgrp->OSFlagFlags    = flags;               /* Set to desired initial value                    */
   101d8:	e0bffa17 	ldw	r2,-24(fp)
   101dc:	e0fffe0b 	ldhu	r3,-8(fp)
   101e0:	10c0020d 	sth	r3,8(r2)
        pgrp->OSFlagWaitList = (void *)0;           /* Clear list of tasks waiting on flags            */
   101e4:	e0bffa17 	ldw	r2,-24(fp)
   101e8:	10000115 	stw	zero,4(r2)
#if OS_FLAG_NAME_SIZE > 1
        pgrp->OSFlagName[0]  = '?';
   101ec:	e0bffa17 	ldw	r2,-24(fp)
   101f0:	00c00fc4 	movi	r3,63
   101f4:	10c00285 	stb	r3,10(r2)
        pgrp->OSFlagName[1]  = OS_ASCII_NUL;
   101f8:	e0bffa17 	ldw	r2,-24(fp)
   101fc:	100002c5 	stb	zero,11(r2)
   10200:	e0bff917 	ldw	r2,-28(fp)
   10204:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   10208:	e0bffc17 	ldw	r2,-16(fp)
   1020c:	1001703a 	wrctl	status,r2
#endif
        OS_EXIT_CRITICAL();
        *perr                = OS_ERR_NONE;
   10210:	e0bfff17 	ldw	r2,-4(fp)
   10214:	10000005 	stb	zero,0(r2)
   10218:	00000706 	br	10238 <OSFlagCreate+0x114>
   1021c:	e0bff917 	ldw	r2,-28(fp)
   10220:	e0bffd15 	stw	r2,-12(fp)
   10224:	e0bffd17 	ldw	r2,-12(fp)
   10228:	1001703a 	wrctl	status,r2
    } else {
        OS_EXIT_CRITICAL();
        *perr                = OS_ERR_FLAG_GRP_DEPLETED;
   1022c:	e0bfff17 	ldw	r2,-4(fp)
   10230:	00c01c84 	movi	r3,114
   10234:	10c00005 	stb	r3,0(r2)
    }
    return (pgrp);                                  /* Return pointer to event flag group              */
   10238:	e0bffa17 	ldw	r2,-24(fp)
}
   1023c:	e037883a 	mov	sp,fp
   10240:	df000017 	ldw	fp,0(sp)
   10244:	dec00104 	addi	sp,sp,4
   10248:	f800283a 	ret

0001024c <OSFlagDel>:
*********************************************************************************************************
*/

#if OS_FLAG_DEL_EN > 0
OS_FLAG_GRP  *OSFlagDel (OS_FLAG_GRP *pgrp, INT8U opt, INT8U *perr)
{
   1024c:	defff204 	addi	sp,sp,-56
   10250:	dfc00d15 	stw	ra,52(sp)
   10254:	df000c15 	stw	fp,48(sp)
   10258:	df000c04 	addi	fp,sp,48
   1025c:	e13ffd15 	stw	r4,-12(fp)
   10260:	2805883a 	mov	r2,r5
   10264:	e1bfff15 	stw	r6,-4(fp)
   10268:	e0bffe05 	stb	r2,-8(fp)
    BOOLEAN       tasks_waiting;
    OS_FLAG_NODE *pnode;
    OS_FLAG_GRP  *pgrp_return;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR     cpu_sr = 0;
   1026c:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
   10270:	e0bfff17 	ldw	r2,-4(fp)
   10274:	1000021e 	bne	r2,zero,10280 <OSFlagDel+0x34>
        return (pgrp);
   10278:	e0bffd17 	ldw	r2,-12(fp)
   1027c:	00008a06 	br	104a8 <OSFlagDel+0x25c>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {                        /* Validate 'pgrp'                          */
   10280:	e0bffd17 	ldw	r2,-12(fp)
   10284:	1000051e 	bne	r2,zero,1029c <OSFlagDel+0x50>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
   10288:	e0bfff17 	ldw	r2,-4(fp)
   1028c:	00c01b84 	movi	r3,110
   10290:	10c00005 	stb	r3,0(r2)
        return (pgrp);
   10294:	e0bffd17 	ldw	r2,-12(fp)
   10298:	00008306 	br	104a8 <OSFlagDel+0x25c>
    }
#endif
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
   1029c:	008000b4 	movhi	r2,2
   102a0:	10b6d004 	addi	r2,r2,-9408
   102a4:	10800003 	ldbu	r2,0(r2)
   102a8:	10803fcc 	andi	r2,r2,255
   102ac:	10000526 	beq	r2,zero,102c4 <OSFlagDel+0x78>
        *perr = OS_ERR_DEL_ISR;                            /* ... can't DELETE from an ISR             */
   102b0:	e0bfff17 	ldw	r2,-4(fp)
   102b4:	00c003c4 	movi	r3,15
   102b8:	10c00005 	stb	r3,0(r2)
        return (pgrp);
   102bc:	e0bffd17 	ldw	r2,-12(fp)
   102c0:	00007906 	br	104a8 <OSFlagDel+0x25c>
    }
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {          /* Validate event group type                */
   102c4:	e0bffd17 	ldw	r2,-12(fp)
   102c8:	10800003 	ldbu	r2,0(r2)
   102cc:	10803fcc 	andi	r2,r2,255
   102d0:	10800160 	cmpeqi	r2,r2,5
   102d4:	1000051e 	bne	r2,zero,102ec <OSFlagDel+0xa0>
        *perr = OS_ERR_EVENT_TYPE;
   102d8:	e0bfff17 	ldw	r2,-4(fp)
   102dc:	00c00044 	movi	r3,1
   102e0:	10c00005 	stb	r3,0(r2)
        return (pgrp);
   102e4:	e0bffd17 	ldw	r2,-12(fp)
   102e8:	00006f06 	br	104a8 <OSFlagDel+0x25c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   102ec:	0005303a 	rdctl	r2,status
   102f0:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   102f4:	e0fff817 	ldw	r3,-32(fp)
   102f8:	00bfff84 	movi	r2,-2
   102fc:	1884703a 	and	r2,r3,r2
   10300:	1001703a 	wrctl	status,r2
  
  return context;
   10304:	e0bff817 	ldw	r2,-32(fp)
    }
    OS_ENTER_CRITICAL();
   10308:	e0bff715 	stw	r2,-36(fp)
    if (pgrp->OSFlagWaitList != (void *)0) {               /* See if any tasks waiting on event flags  */
   1030c:	e0bffd17 	ldw	r2,-12(fp)
   10310:	10800117 	ldw	r2,4(r2)
   10314:	10000326 	beq	r2,zero,10324 <OSFlagDel+0xd8>
        tasks_waiting = OS_TRUE;                           /* Yes                                      */
   10318:	00800044 	movi	r2,1
   1031c:	e0bff405 	stb	r2,-48(fp)
   10320:	00000106 	br	10328 <OSFlagDel+0xdc>
    } else {
        tasks_waiting = OS_FALSE;                          /* No                                       */
   10324:	e03ff405 	stb	zero,-48(fp)
    }
    switch (opt) {
   10328:	e0bffe03 	ldbu	r2,-8(fp)
   1032c:	10000326 	beq	r2,zero,1033c <OSFlagDel+0xf0>
   10330:	10800060 	cmpeqi	r2,r2,1
   10334:	1000271e 	bne	r2,zero,103d4 <OSFlagDel+0x188>
   10338:	00005006 	br	1047c <OSFlagDel+0x230>
        case OS_DEL_NO_PEND:                               /* Delete group if no task waiting          */
             if (tasks_waiting == OS_FALSE) {
   1033c:	e0bff403 	ldbu	r2,-48(fp)
   10340:	10001a1e 	bne	r2,zero,103ac <OSFlagDel+0x160>
#if OS_FLAG_NAME_SIZE > 1
                 pgrp->OSFlagName[0]  = '?';               /* Unknown name                             */
   10344:	e0bffd17 	ldw	r2,-12(fp)
   10348:	00c00fc4 	movi	r3,63
   1034c:	10c00285 	stb	r3,10(r2)
                 pgrp->OSFlagName[1]  = OS_ASCII_NUL;
   10350:	e0bffd17 	ldw	r2,-12(fp)
   10354:	100002c5 	stb	zero,11(r2)
#endif
                 pgrp->OSFlagType     = OS_EVENT_TYPE_UNUSED;
   10358:	e0bffd17 	ldw	r2,-12(fp)
   1035c:	10000005 	stb	zero,0(r2)
                 pgrp->OSFlagWaitList = (void *)OSFlagFreeList; /* Return group to free list           */
   10360:	008000b4 	movhi	r2,2
   10364:	10b6d304 	addi	r2,r2,-9396
   10368:	10c00017 	ldw	r3,0(r2)
   1036c:	e0bffd17 	ldw	r2,-12(fp)
   10370:	10c00115 	stw	r3,4(r2)
                 pgrp->OSFlagFlags    = (OS_FLAGS)0;
   10374:	e0bffd17 	ldw	r2,-12(fp)
   10378:	1000020d 	sth	zero,8(r2)
                 OSFlagFreeList       = pgrp;
   1037c:	008000b4 	movhi	r2,2
   10380:	10b6d304 	addi	r2,r2,-9396
   10384:	e0fffd17 	ldw	r3,-12(fp)
   10388:	10c00015 	stw	r3,0(r2)
   1038c:	e0bff717 	ldw	r2,-36(fp)
   10390:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   10394:	e0bff917 	ldw	r2,-28(fp)
   10398:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                = OS_ERR_NONE;
   1039c:	e0bfff17 	ldw	r2,-4(fp)
   103a0:	10000005 	stb	zero,0(r2)
                 pgrp_return          = (OS_FLAG_GRP *)0;  /* Event Flag Group has been deleted        */
   103a4:	e03ff615 	stw	zero,-40(fp)
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                = OS_ERR_TASK_WAITING;
                 pgrp_return          = pgrp;
             }
             break;
   103a8:	00003e06 	br	104a4 <OSFlagDel+0x258>
   103ac:	e0bff717 	ldw	r2,-36(fp)
   103b0:	e0bffa15 	stw	r2,-24(fp)
   103b4:	e0bffa17 	ldw	r2,-24(fp)
   103b8:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                = OS_ERR_NONE;
                 pgrp_return          = (OS_FLAG_GRP *)0;  /* Event Flag Group has been deleted        */
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                = OS_ERR_TASK_WAITING;
   103bc:	e0bfff17 	ldw	r2,-4(fp)
   103c0:	00c01244 	movi	r3,73
   103c4:	10c00005 	stb	r3,0(r2)
                 pgrp_return          = pgrp;
   103c8:	e0bffd17 	ldw	r2,-12(fp)
   103cc:	e0bff615 	stw	r2,-40(fp)
             }
             break;
   103d0:	00003406 	br	104a4 <OSFlagDel+0x258>

        case OS_DEL_ALWAYS:                                /* Always delete the event flag group       */
             pnode = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
   103d4:	e0bffd17 	ldw	r2,-12(fp)
   103d8:	10800117 	ldw	r2,4(r2)
   103dc:	e0bff515 	stw	r2,-44(fp)
             while (pnode != (OS_FLAG_NODE *)0) {          /* Ready ALL tasks waiting for flags        */
   103e0:	00000606 	br	103fc <OSFlagDel+0x1b0>
                 (void)OS_FlagTaskRdy(pnode, (OS_FLAGS)0);
   103e4:	e13ff517 	ldw	r4,-44(fp)
   103e8:	000b883a 	mov	r5,zero
   103ec:	00114880 	call	11488 <OS_FlagTaskRdy>
                 pnode = (OS_FLAG_NODE *)pnode->OSFlagNodeNext;
   103f0:	e0bff517 	ldw	r2,-44(fp)
   103f4:	10800017 	ldw	r2,0(r2)
   103f8:	e0bff515 	stw	r2,-44(fp)
             }
             break;

        case OS_DEL_ALWAYS:                                /* Always delete the event flag group       */
             pnode = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
             while (pnode != (OS_FLAG_NODE *)0) {          /* Ready ALL tasks waiting for flags        */
   103fc:	e0bff517 	ldw	r2,-44(fp)
   10400:	103ff81e 	bne	r2,zero,103e4 <__alt_mem_Flash_flash_data+0xf40103e4>
                 (void)OS_FlagTaskRdy(pnode, (OS_FLAGS)0);
                 pnode = (OS_FLAG_NODE *)pnode->OSFlagNodeNext;
             }
#if OS_FLAG_NAME_SIZE > 1
             pgrp->OSFlagName[0]  = '?';                   /* Unknown name                             */
   10404:	e0bffd17 	ldw	r2,-12(fp)
   10408:	00c00fc4 	movi	r3,63
   1040c:	10c00285 	stb	r3,10(r2)
             pgrp->OSFlagName[1]  = OS_ASCII_NUL;
   10410:	e0bffd17 	ldw	r2,-12(fp)
   10414:	100002c5 	stb	zero,11(r2)
#endif
             pgrp->OSFlagType     = OS_EVENT_TYPE_UNUSED;
   10418:	e0bffd17 	ldw	r2,-12(fp)
   1041c:	10000005 	stb	zero,0(r2)
             pgrp->OSFlagWaitList = (void *)OSFlagFreeList;/* Return group to free list                */
   10420:	008000b4 	movhi	r2,2
   10424:	10b6d304 	addi	r2,r2,-9396
   10428:	10c00017 	ldw	r3,0(r2)
   1042c:	e0bffd17 	ldw	r2,-12(fp)
   10430:	10c00115 	stw	r3,4(r2)
             pgrp->OSFlagFlags    = (OS_FLAGS)0;
   10434:	e0bffd17 	ldw	r2,-12(fp)
   10438:	1000020d 	sth	zero,8(r2)
             OSFlagFreeList       = pgrp;
   1043c:	008000b4 	movhi	r2,2
   10440:	10b6d304 	addi	r2,r2,-9396
   10444:	e0fffd17 	ldw	r3,-12(fp)
   10448:	10c00015 	stw	r3,0(r2)
   1044c:	e0bff717 	ldw	r2,-36(fp)
   10450:	e0bffb15 	stw	r2,-20(fp)
   10454:	e0bffb17 	ldw	r2,-20(fp)
   10458:	1001703a 	wrctl	status,r2
             OS_EXIT_CRITICAL();
             if (tasks_waiting == OS_TRUE) {               /* Reschedule only if task(s) were waiting  */
   1045c:	e0bff403 	ldbu	r2,-48(fp)
   10460:	10800058 	cmpnei	r2,r2,1
   10464:	1000011e 	bne	r2,zero,1046c <OSFlagDel+0x220>
                 OS_Sched();                               /* Find highest priority task ready to run  */
   10468:	000f5b80 	call	f5b8 <OS_Sched>
             }
             *perr = OS_ERR_NONE;
   1046c:	e0bfff17 	ldw	r2,-4(fp)
   10470:	10000005 	stb	zero,0(r2)
             pgrp_return          = (OS_FLAG_GRP *)0;      /* Event Flag Group has been deleted        */
   10474:	e03ff615 	stw	zero,-40(fp)
             break;
   10478:	00000a06 	br	104a4 <OSFlagDel+0x258>
   1047c:	e0bff717 	ldw	r2,-36(fp)
   10480:	e0bffc15 	stw	r2,-16(fp)
   10484:	e0bffc17 	ldw	r2,-16(fp)
   10488:	1001703a 	wrctl	status,r2

        default:
             OS_EXIT_CRITICAL();
             *perr                = OS_ERR_INVALID_OPT;
   1048c:	e0bfff17 	ldw	r2,-4(fp)
   10490:	00c001c4 	movi	r3,7
   10494:	10c00005 	stb	r3,0(r2)
             pgrp_return          = pgrp;
   10498:	e0bffd17 	ldw	r2,-12(fp)
   1049c:	e0bff615 	stw	r2,-40(fp)
             break;
   104a0:	0001883a 	nop
    }
    return (pgrp_return);
   104a4:	e0bff617 	ldw	r2,-40(fp)
}
   104a8:	e037883a 	mov	sp,fp
   104ac:	dfc00117 	ldw	ra,4(sp)
   104b0:	df000017 	ldw	fp,0(sp)
   104b4:	dec00204 	addi	sp,sp,8
   104b8:	f800283a 	ret

000104bc <OSFlagNameGet>:
*********************************************************************************************************
*/

#if OS_FLAG_NAME_SIZE > 1
INT8U  OSFlagNameGet (OS_FLAG_GRP *pgrp, INT8U *pname, INT8U *perr)
{
   104bc:	defff604 	addi	sp,sp,-40
   104c0:	dfc00915 	stw	ra,36(sp)
   104c4:	df000815 	stw	fp,32(sp)
   104c8:	df000804 	addi	fp,sp,32
   104cc:	e13ffd15 	stw	r4,-12(fp)
   104d0:	e17ffe15 	stw	r5,-8(fp)
   104d4:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   104d8:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
   104dc:	e0bfff17 	ldw	r2,-4(fp)
   104e0:	1000021e 	bne	r2,zero,104ec <OSFlagNameGet+0x30>
        return (0);
   104e4:	0005883a 	mov	r2,zero
   104e8:	00003b06 	br	105d8 <OSFlagNameGet+0x11c>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {              /* Is 'pgrp' a NULL pointer?                          */
   104ec:	e0bffd17 	ldw	r2,-12(fp)
   104f0:	1000051e 	bne	r2,zero,10508 <OSFlagNameGet+0x4c>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
   104f4:	e0bfff17 	ldw	r2,-4(fp)
   104f8:	00c01b84 	movi	r3,110
   104fc:	10c00005 	stb	r3,0(r2)
        return (0);
   10500:	0005883a 	mov	r2,zero
   10504:	00003406 	br	105d8 <OSFlagNameGet+0x11c>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
   10508:	e0bffe17 	ldw	r2,-8(fp)
   1050c:	1000051e 	bne	r2,zero,10524 <OSFlagNameGet+0x68>
        *perr = OS_ERR_PNAME_NULL;
   10510:	e0bfff17 	ldw	r2,-4(fp)
   10514:	00c00304 	movi	r3,12
   10518:	10c00005 	stb	r3,0(r2)
        return (0);
   1051c:	0005883a 	mov	r2,zero
   10520:	00002d06 	br	105d8 <OSFlagNameGet+0x11c>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
   10524:	008000b4 	movhi	r2,2
   10528:	10b6d004 	addi	r2,r2,-9408
   1052c:	10800003 	ldbu	r2,0(r2)
   10530:	10803fcc 	andi	r2,r2,255
   10534:	10000526 	beq	r2,zero,1054c <OSFlagNameGet+0x90>
        *perr = OS_ERR_NAME_GET_ISR;
   10538:	e0bfff17 	ldw	r2,-4(fp)
   1053c:	00c00444 	movi	r3,17
   10540:	10c00005 	stb	r3,0(r2)
        return (0);
   10544:	0005883a 	mov	r2,zero
   10548:	00002306 	br	105d8 <OSFlagNameGet+0x11c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1054c:	0005303a 	rdctl	r2,status
   10550:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   10554:	e0fffa17 	ldw	r3,-24(fp)
   10558:	00bfff84 	movi	r2,-2
   1055c:	1884703a 	and	r2,r3,r2
   10560:	1001703a 	wrctl	status,r2
  
  return context;
   10564:	e0bffa17 	ldw	r2,-24(fp)
    }
    OS_ENTER_CRITICAL();
   10568:	e0bff815 	stw	r2,-32(fp)
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {
   1056c:	e0bffd17 	ldw	r2,-12(fp)
   10570:	10800003 	ldbu	r2,0(r2)
   10574:	10803fcc 	andi	r2,r2,255
   10578:	10800160 	cmpeqi	r2,r2,5
   1057c:	1000091e 	bne	r2,zero,105a4 <OSFlagNameGet+0xe8>
   10580:	e0bff817 	ldw	r2,-32(fp)
   10584:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   10588:	e0bffb17 	ldw	r2,-20(fp)
   1058c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_EVENT_TYPE;
   10590:	e0bfff17 	ldw	r2,-4(fp)
   10594:	00c00044 	movi	r3,1
   10598:	10c00005 	stb	r3,0(r2)
        return (0);
   1059c:	0005883a 	mov	r2,zero
   105a0:	00000d06 	br	105d8 <OSFlagNameGet+0x11c>
    }
    len   = OS_StrCopy(pname, pgrp->OSFlagName); /* Copy name from OS_FLAG_GRP                         */
   105a4:	e0bffd17 	ldw	r2,-12(fp)
   105a8:	10800284 	addi	r2,r2,10
   105ac:	e13ffe17 	ldw	r4,-8(fp)
   105b0:	100b883a 	mov	r5,r2
   105b4:	000f6f40 	call	f6f4 <OS_StrCopy>
   105b8:	e0bff905 	stb	r2,-28(fp)
   105bc:	e0bff817 	ldw	r2,-32(fp)
   105c0:	e0bffc15 	stw	r2,-16(fp)
   105c4:	e0bffc17 	ldw	r2,-16(fp)
   105c8:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
   105cc:	e0bfff17 	ldw	r2,-4(fp)
   105d0:	10000005 	stb	zero,0(r2)
    return (len);
   105d4:	e0bff903 	ldbu	r2,-28(fp)
}
   105d8:	e037883a 	mov	sp,fp
   105dc:	dfc00117 	ldw	ra,4(sp)
   105e0:	df000017 	ldw	fp,0(sp)
   105e4:	dec00204 	addi	sp,sp,8
   105e8:	f800283a 	ret

000105ec <OSFlagNameSet>:
*********************************************************************************************************
*/

#if OS_FLAG_NAME_SIZE > 1
void  OSFlagNameSet (OS_FLAG_GRP *pgrp, INT8U *pname, INT8U *perr)
{
   105ec:	defff504 	addi	sp,sp,-44
   105f0:	dfc00a15 	stw	ra,40(sp)
   105f4:	df000915 	stw	fp,36(sp)
   105f8:	df000904 	addi	fp,sp,36
   105fc:	e13ffd15 	stw	r4,-12(fp)
   10600:	e17ffe15 	stw	r5,-8(fp)
   10604:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   10608:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
   1060c:	e0bfff17 	ldw	r2,-4(fp)
   10610:	1000011e 	bne	r2,zero,10618 <OSFlagNameSet+0x2c>
        return;
   10614:	00004406 	br	10728 <OSFlagNameSet+0x13c>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {              /* Is 'pgrp' a NULL pointer?                          */
   10618:	e0bffd17 	ldw	r2,-12(fp)
   1061c:	1000041e 	bne	r2,zero,10630 <OSFlagNameSet+0x44>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
   10620:	e0bfff17 	ldw	r2,-4(fp)
   10624:	00c01b84 	movi	r3,110
   10628:	10c00005 	stb	r3,0(r2)
        return;
   1062c:	00003e06 	br	10728 <OSFlagNameSet+0x13c>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
   10630:	e0bffe17 	ldw	r2,-8(fp)
   10634:	1000041e 	bne	r2,zero,10648 <OSFlagNameSet+0x5c>
        *perr = OS_ERR_PNAME_NULL;
   10638:	e0bfff17 	ldw	r2,-4(fp)
   1063c:	00c00304 	movi	r3,12
   10640:	10c00005 	stb	r3,0(r2)
        return;
   10644:	00003806 	br	10728 <OSFlagNameSet+0x13c>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
   10648:	008000b4 	movhi	r2,2
   1064c:	10b6d004 	addi	r2,r2,-9408
   10650:	10800003 	ldbu	r2,0(r2)
   10654:	10803fcc 	andi	r2,r2,255
   10658:	10000426 	beq	r2,zero,1066c <OSFlagNameSet+0x80>
        *perr = OS_ERR_NAME_SET_ISR;
   1065c:	e0bfff17 	ldw	r2,-4(fp)
   10660:	00c00484 	movi	r3,18
   10664:	10c00005 	stb	r3,0(r2)
        return;
   10668:	00002f06 	br	10728 <OSFlagNameSet+0x13c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1066c:	0005303a 	rdctl	r2,status
   10670:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   10674:	e0fff917 	ldw	r3,-28(fp)
   10678:	00bfff84 	movi	r2,-2
   1067c:	1884703a 	and	r2,r3,r2
   10680:	1001703a 	wrctl	status,r2
  
  return context;
   10684:	e0bff917 	ldw	r2,-28(fp)
    }
    OS_ENTER_CRITICAL();
   10688:	e0bff715 	stw	r2,-36(fp)
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {
   1068c:	e0bffd17 	ldw	r2,-12(fp)
   10690:	10800003 	ldbu	r2,0(r2)
   10694:	10803fcc 	andi	r2,r2,255
   10698:	10800160 	cmpeqi	r2,r2,5
   1069c:	1000081e 	bne	r2,zero,106c0 <OSFlagNameSet+0xd4>
   106a0:	e0bff717 	ldw	r2,-36(fp)
   106a4:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   106a8:	e0bffa17 	ldw	r2,-24(fp)
   106ac:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_EVENT_TYPE;
   106b0:	e0bfff17 	ldw	r2,-4(fp)
   106b4:	00c00044 	movi	r3,1
   106b8:	10c00005 	stb	r3,0(r2)
        return;
   106bc:	00001a06 	br	10728 <OSFlagNameSet+0x13c>
    }
    len = OS_StrLen(pname);                      /* Can we fit the string in the storage area?         */
   106c0:	e13ffe17 	ldw	r4,-8(fp)
   106c4:	000f7680 	call	f768 <OS_StrLen>
   106c8:	e0bff805 	stb	r2,-32(fp)
    if (len > (OS_FLAG_NAME_SIZE - 1)) {         /* No                                                 */
   106cc:	e0bff803 	ldbu	r2,-32(fp)
   106d0:	10800830 	cmpltui	r2,r2,32
   106d4:	1000081e 	bne	r2,zero,106f8 <OSFlagNameSet+0x10c>
   106d8:	e0bff717 	ldw	r2,-36(fp)
   106dc:	e0bffb15 	stw	r2,-20(fp)
   106e0:	e0bffb17 	ldw	r2,-20(fp)
   106e4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_FLAG_NAME_TOO_LONG;
   106e8:	e0bfff17 	ldw	r2,-4(fp)
   106ec:	00c01cc4 	movi	r3,115
   106f0:	10c00005 	stb	r3,0(r2)
        return;
   106f4:	00000c06 	br	10728 <OSFlagNameSet+0x13c>
    }
    (void)OS_StrCopy(pgrp->OSFlagName, pname);   /* Yes, copy name from OS_FLAG_GRP                    */
   106f8:	e0bffd17 	ldw	r2,-12(fp)
   106fc:	10800284 	addi	r2,r2,10
   10700:	1009883a 	mov	r4,r2
   10704:	e17ffe17 	ldw	r5,-8(fp)
   10708:	000f6f40 	call	f6f4 <OS_StrCopy>
   1070c:	e0bff717 	ldw	r2,-36(fp)
   10710:	e0bffc15 	stw	r2,-16(fp)
   10714:	e0bffc17 	ldw	r2,-16(fp)
   10718:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
   1071c:	e0bfff17 	ldw	r2,-4(fp)
   10720:	10000005 	stb	zero,0(r2)
    return;
   10724:	0001883a 	nop
}
   10728:	e037883a 	mov	sp,fp
   1072c:	dfc00117 	ldw	ra,4(sp)
   10730:	df000017 	ldw	fp,0(sp)
   10734:	dec00204 	addi	sp,sp,8
   10738:	f800283a 	ret

0001073c <OSFlagPend>:
*                 event flags.
*********************************************************************************************************
*/

OS_FLAGS  OSFlagPend (OS_FLAG_GRP *pgrp, OS_FLAGS flags, INT8U wait_type, INT16U timeout, INT8U *perr)
{
   1073c:	deffe204 	addi	sp,sp,-120
   10740:	dfc01d15 	stw	ra,116(sp)
   10744:	df001c15 	stw	fp,112(sp)
   10748:	df001c04 	addi	fp,sp,112
   1074c:	e13ffc15 	stw	r4,-16(fp)
   10750:	2809883a 	mov	r4,r5
   10754:	3007883a 	mov	r3,r6
   10758:	3805883a 	mov	r2,r7
   1075c:	e13ffd0d 	sth	r4,-12(fp)
   10760:	e0fffe05 	stb	r3,-8(fp)
   10764:	e0bfff0d 	sth	r2,-4(fp)
    OS_FLAGS      flags_rdy;
    INT8U         result;
    INT8U         pend_stat;
    BOOLEAN       consume;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR     cpu_sr = 0;
   10768:	e03fe615 	stw	zero,-104(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
   1076c:	e0800217 	ldw	r2,8(fp)
   10770:	1000021e 	bne	r2,zero,1077c <OSFlagPend+0x40>
        return ((OS_FLAGS)0);
   10774:	0005883a 	mov	r2,zero
   10778:	00016706 	br	10d18 <OSFlagPend+0x5dc>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {                        /* Validate 'pgrp'                          */
   1077c:	e0bffc17 	ldw	r2,-16(fp)
   10780:	1000051e 	bne	r2,zero,10798 <OSFlagPend+0x5c>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
   10784:	e0800217 	ldw	r2,8(fp)
   10788:	00c01b84 	movi	r3,110
   1078c:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
   10790:	0005883a 	mov	r2,zero
   10794:	00016006 	br	10d18 <OSFlagPend+0x5dc>
    }
#endif
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
   10798:	008000b4 	movhi	r2,2
   1079c:	10b6d004 	addi	r2,r2,-9408
   107a0:	10800003 	ldbu	r2,0(r2)
   107a4:	10803fcc 	andi	r2,r2,255
   107a8:	10000526 	beq	r2,zero,107c0 <OSFlagPend+0x84>
        *perr = OS_ERR_PEND_ISR;                           /* ... can't PEND from an ISR               */
   107ac:	e0800217 	ldw	r2,8(fp)
   107b0:	00c00084 	movi	r3,2
   107b4:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
   107b8:	0005883a 	mov	r2,zero
   107bc:	00015606 	br	10d18 <OSFlagPend+0x5dc>
    }
    if (OSLockNesting > 0) {                               /* See if called with scheduler locked ...  */
   107c0:	008000b4 	movhi	r2,2
   107c4:	10b6c204 	addi	r2,r2,-9464
   107c8:	10800003 	ldbu	r2,0(r2)
   107cc:	10803fcc 	andi	r2,r2,255
   107d0:	10000526 	beq	r2,zero,107e8 <OSFlagPend+0xac>
        *perr = OS_ERR_PEND_LOCKED;                        /* ... can't PEND when locked               */
   107d4:	e0800217 	ldw	r2,8(fp)
   107d8:	00c00344 	movi	r3,13
   107dc:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
   107e0:	0005883a 	mov	r2,zero
   107e4:	00014c06 	br	10d18 <OSFlagPend+0x5dc>
    }
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {          /* Validate event block type                */
   107e8:	e0bffc17 	ldw	r2,-16(fp)
   107ec:	10800003 	ldbu	r2,0(r2)
   107f0:	10803fcc 	andi	r2,r2,255
   107f4:	10800160 	cmpeqi	r2,r2,5
   107f8:	1000051e 	bne	r2,zero,10810 <OSFlagPend+0xd4>
        *perr = OS_ERR_EVENT_TYPE;
   107fc:	e0800217 	ldw	r2,8(fp)
   10800:	00c00044 	movi	r3,1
   10804:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
   10808:	0005883a 	mov	r2,zero
   1080c:	00014206 	br	10d18 <OSFlagPend+0x5dc>
    }
    result = (INT8U)(wait_type & OS_FLAG_CONSUME);
   10810:	e0fffe03 	ldbu	r3,-8(fp)
   10814:	00bfe004 	movi	r2,-128
   10818:	1884703a 	and	r2,r3,r2
   1081c:	e0bfe705 	stb	r2,-100(fp)
    if (result != (INT8U)0) {                             /* See if we need to consume the flags      */
   10820:	e0bfe703 	ldbu	r2,-100(fp)
   10824:	10000626 	beq	r2,zero,10840 <OSFlagPend+0x104>
        wait_type &= ~(INT8U)OS_FLAG_CONSUME;
   10828:	e0bffe03 	ldbu	r2,-8(fp)
   1082c:	10801fcc 	andi	r2,r2,127
   10830:	e0bffe05 	stb	r2,-8(fp)
        consume    = OS_TRUE;
   10834:	00800044 	movi	r2,1
   10838:	e0bfe505 	stb	r2,-108(fp)
   1083c:	00000106 	br	10844 <OSFlagPend+0x108>
    } else {
        consume    = OS_FALSE;
   10840:	e03fe505 	stb	zero,-108(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   10844:	0005303a 	rdctl	r2,status
   10848:	e0bfe915 	stw	r2,-92(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1084c:	e0ffe917 	ldw	r3,-92(fp)
   10850:	00bfff84 	movi	r2,-2
   10854:	1884703a 	and	r2,r3,r2
   10858:	1001703a 	wrctl	status,r2
  
  return context;
   1085c:	e0bfe917 	ldw	r2,-92(fp)
    }
/*$PAGE*/
    OS_ENTER_CRITICAL();
   10860:	e0bfe615 	stw	r2,-104(fp)
    switch (wait_type) {
   10864:	e0bffe03 	ldbu	r2,-8(fp)
   10868:	10c00060 	cmpeqi	r3,r2,1
   1086c:	1800921e 	bne	r3,zero,10ab8 <OSFlagPend+0x37c>
   10870:	10c00088 	cmpgei	r3,r2,2
   10874:	1800021e 	bne	r3,zero,10880 <OSFlagPend+0x144>
   10878:	10006126 	beq	r2,zero,10a00 <OSFlagPend+0x2c4>
   1087c:	0000bb06 	br	10b6c <OSFlagPend+0x430>
   10880:	10c000a0 	cmpeqi	r3,r2,2
   10884:	1800031e 	bne	r3,zero,10894 <OSFlagPend+0x158>
   10888:	108000e0 	cmpeqi	r2,r2,3
   1088c:	10002f1e 	bne	r2,zero,1094c <OSFlagPend+0x210>
   10890:	0000b606 	br	10b6c <OSFlagPend+0x430>
        case OS_FLAG_WAIT_SET_ALL:                         /* See if all required flags are set        */
             flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);   /* Extract only the bits we want     */
   10894:	e0bffc17 	ldw	r2,-16(fp)
   10898:	10c0020b 	ldhu	r3,8(r2)
   1089c:	e0bffd0b 	ldhu	r2,-12(fp)
   108a0:	1884703a 	and	r2,r3,r2
   108a4:	e0bfe78d 	sth	r2,-98(fp)
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
   108a8:	e0ffe78b 	ldhu	r3,-98(fp)
   108ac:	e0bffd0b 	ldhu	r2,-12(fp)
   108b0:	1880191e 	bne	r3,r2,10918 <OSFlagPend+0x1dc>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
   108b4:	e0bfe503 	ldbu	r2,-108(fp)
   108b8:	10800058 	cmpnei	r2,r2,1
   108bc:	1000091e 	bne	r2,zero,108e4 <OSFlagPend+0x1a8>
                     pgrp->OSFlagFlags &= ~flags_rdy;      /* Clear ONLY the flags that we wanted      */
   108c0:	e0bffc17 	ldw	r2,-16(fp)
   108c4:	1080020b 	ldhu	r2,8(r2)
   108c8:	1007883a 	mov	r3,r2
   108cc:	e0bfe78b 	ldhu	r2,-98(fp)
   108d0:	0084303a 	nor	r2,zero,r2
   108d4:	1884703a 	and	r2,r3,r2
   108d8:	1007883a 	mov	r3,r2
   108dc:	e0bffc17 	ldw	r2,-16(fp)
   108e0:	10c0020d 	sth	r3,8(r2)
                 }
                 OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
   108e4:	008000b4 	movhi	r2,2
   108e8:	10b6d104 	addi	r2,r2,-9404
   108ec:	10800017 	ldw	r2,0(r2)
   108f0:	e0ffe78b 	ldhu	r3,-98(fp)
   108f4:	10c00b0d 	sth	r3,44(r2)
   108f8:	e0bfe617 	ldw	r2,-104(fp)
   108fc:	e0bfea15 	stw	r2,-88(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   10900:	e0bfea17 	ldw	r2,-88(fp)
   10904:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
                 *perr                   = OS_ERR_NONE;
   10908:	e0800217 	ldw	r2,8(fp)
   1090c:	10000005 	stb	zero,0(r2)
                 return (flags_rdy);
   10910:	e0bfe78b 	ldhu	r2,-98(fp)
   10914:	00010006 	br	10d18 <OSFlagPend+0x5dc>
             } else {                                      /* Block task until events occur or timeout */
                 OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
   10918:	e1bffd0b 	ldhu	r6,-12(fp)
   1091c:	e0fffe03 	ldbu	r3,-8(fp)
   10920:	e0bfff0b 	ldhu	r2,-4(fp)
   10924:	e17ff704 	addi	r5,fp,-36
   10928:	d8800015 	stw	r2,0(sp)
   1092c:	e13ffc17 	ldw	r4,-16(fp)
   10930:	180f883a 	mov	r7,r3
   10934:	00111e00 	call	111e0 <OS_FlagBlock>
   10938:	e0bfe617 	ldw	r2,-104(fp)
   1093c:	e0bfeb15 	stw	r2,-84(fp)
   10940:	e0bfeb17 	ldw	r2,-84(fp)
   10944:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
             }
             break;
   10948:	00009206 	br	10b94 <OSFlagPend+0x458>

        case OS_FLAG_WAIT_SET_ANY:
             flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);    /* Extract only the bits we want    */
   1094c:	e0bffc17 	ldw	r2,-16(fp)
   10950:	10c0020b 	ldhu	r3,8(r2)
   10954:	e0bffd0b 	ldhu	r2,-12(fp)
   10958:	1884703a 	and	r2,r3,r2
   1095c:	e0bfe78d 	sth	r2,-98(fp)
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag set                      */
   10960:	e0bfe78b 	ldhu	r2,-98(fp)
   10964:	10001926 	beq	r2,zero,109cc <OSFlagPend+0x290>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
   10968:	e0bfe503 	ldbu	r2,-108(fp)
   1096c:	10800058 	cmpnei	r2,r2,1
   10970:	1000091e 	bne	r2,zero,10998 <OSFlagPend+0x25c>
                     pgrp->OSFlagFlags &= ~flags_rdy;      /* Clear ONLY the flags that we got         */
   10974:	e0bffc17 	ldw	r2,-16(fp)
   10978:	1080020b 	ldhu	r2,8(r2)
   1097c:	1007883a 	mov	r3,r2
   10980:	e0bfe78b 	ldhu	r2,-98(fp)
   10984:	0084303a 	nor	r2,zero,r2
   10988:	1884703a 	and	r2,r3,r2
   1098c:	1007883a 	mov	r3,r2
   10990:	e0bffc17 	ldw	r2,-16(fp)
   10994:	10c0020d 	sth	r3,8(r2)
                 }
                 OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
   10998:	008000b4 	movhi	r2,2
   1099c:	10b6d104 	addi	r2,r2,-9404
   109a0:	10800017 	ldw	r2,0(r2)
   109a4:	e0ffe78b 	ldhu	r3,-98(fp)
   109a8:	10c00b0d 	sth	r3,44(r2)
   109ac:	e0bfe617 	ldw	r2,-104(fp)
   109b0:	e0bfec15 	stw	r2,-80(fp)
   109b4:	e0bfec17 	ldw	r2,-80(fp)
   109b8:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
                 *perr                   = OS_ERR_NONE;
   109bc:	e0800217 	ldw	r2,8(fp)
   109c0:	10000005 	stb	zero,0(r2)
                 return (flags_rdy);
   109c4:	e0bfe78b 	ldhu	r2,-98(fp)
   109c8:	0000d306 	br	10d18 <OSFlagPend+0x5dc>
             } else {                                      /* Block task until events occur or timeout */
                 OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
   109cc:	e1bffd0b 	ldhu	r6,-12(fp)
   109d0:	e0fffe03 	ldbu	r3,-8(fp)
   109d4:	e0bfff0b 	ldhu	r2,-4(fp)
   109d8:	e17ff704 	addi	r5,fp,-36
   109dc:	d8800015 	stw	r2,0(sp)
   109e0:	e13ffc17 	ldw	r4,-16(fp)
   109e4:	180f883a 	mov	r7,r3
   109e8:	00111e00 	call	111e0 <OS_FlagBlock>
   109ec:	e0bfe617 	ldw	r2,-104(fp)
   109f0:	e0bfed15 	stw	r2,-76(fp)
   109f4:	e0bfed17 	ldw	r2,-76(fp)
   109f8:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
             }
             break;
   109fc:	00006506 	br	10b94 <OSFlagPend+0x458>

#if OS_FLAG_WAIT_CLR_EN > 0
        case OS_FLAG_WAIT_CLR_ALL:                         /* See if all required flags are cleared    */
             flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags);  /* Extract only the bits we want     */
   10a00:	e0bffc17 	ldw	r2,-16(fp)
   10a04:	1080020b 	ldhu	r2,8(r2)
   10a08:	0084303a 	nor	r2,zero,r2
   10a0c:	1007883a 	mov	r3,r2
   10a10:	e0bffd0b 	ldhu	r2,-12(fp)
   10a14:	1884703a 	and	r2,r3,r2
   10a18:	e0bfe78d 	sth	r2,-98(fp)
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
   10a1c:	e0ffe78b 	ldhu	r3,-98(fp)
   10a20:	e0bffd0b 	ldhu	r2,-12(fp)
   10a24:	1880171e 	bne	r3,r2,10a84 <OSFlagPend+0x348>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
   10a28:	e0bfe503 	ldbu	r2,-108(fp)
   10a2c:	10800058 	cmpnei	r2,r2,1
   10a30:	1000071e 	bne	r2,zero,10a50 <OSFlagPend+0x314>
                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we wanted        */
   10a34:	e0bffc17 	ldw	r2,-16(fp)
   10a38:	10c0020b 	ldhu	r3,8(r2)
   10a3c:	e0bfe78b 	ldhu	r2,-98(fp)
   10a40:	1884b03a 	or	r2,r3,r2
   10a44:	1007883a 	mov	r3,r2
   10a48:	e0bffc17 	ldw	r2,-16(fp)
   10a4c:	10c0020d 	sth	r3,8(r2)
                 }
                 OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
   10a50:	008000b4 	movhi	r2,2
   10a54:	10b6d104 	addi	r2,r2,-9404
   10a58:	10800017 	ldw	r2,0(r2)
   10a5c:	e0ffe78b 	ldhu	r3,-98(fp)
   10a60:	10c00b0d 	sth	r3,44(r2)
   10a64:	e0bfe617 	ldw	r2,-104(fp)
   10a68:	e0bfee15 	stw	r2,-72(fp)
   10a6c:	e0bfee17 	ldw	r2,-72(fp)
   10a70:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
                 *perr                   = OS_ERR_NONE;
   10a74:	e0800217 	ldw	r2,8(fp)
   10a78:	10000005 	stb	zero,0(r2)
                 return (flags_rdy);
   10a7c:	e0bfe78b 	ldhu	r2,-98(fp)
   10a80:	0000a506 	br	10d18 <OSFlagPend+0x5dc>
             } else {                                      /* Block task until events occur or timeout */
                 OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
   10a84:	e1bffd0b 	ldhu	r6,-12(fp)
   10a88:	e0fffe03 	ldbu	r3,-8(fp)
   10a8c:	e0bfff0b 	ldhu	r2,-4(fp)
   10a90:	e17ff704 	addi	r5,fp,-36
   10a94:	d8800015 	stw	r2,0(sp)
   10a98:	e13ffc17 	ldw	r4,-16(fp)
   10a9c:	180f883a 	mov	r7,r3
   10aa0:	00111e00 	call	111e0 <OS_FlagBlock>
   10aa4:	e0bfe617 	ldw	r2,-104(fp)
   10aa8:	e0bfef15 	stw	r2,-68(fp)
   10aac:	e0bfef17 	ldw	r2,-68(fp)
   10ab0:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
             }
             break;
   10ab4:	00003706 	br	10b94 <OSFlagPend+0x458>

        case OS_FLAG_WAIT_CLR_ANY:
             flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags); /* Extract only the bits we want      */
   10ab8:	e0bffc17 	ldw	r2,-16(fp)
   10abc:	1080020b 	ldhu	r2,8(r2)
   10ac0:	0084303a 	nor	r2,zero,r2
   10ac4:	1007883a 	mov	r3,r2
   10ac8:	e0bffd0b 	ldhu	r2,-12(fp)
   10acc:	1884703a 	and	r2,r3,r2
   10ad0:	e0bfe78d 	sth	r2,-98(fp)
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag cleared                  */
   10ad4:	e0bfe78b 	ldhu	r2,-98(fp)
   10ad8:	10001726 	beq	r2,zero,10b38 <OSFlagPend+0x3fc>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
   10adc:	e0bfe503 	ldbu	r2,-108(fp)
   10ae0:	10800058 	cmpnei	r2,r2,1
   10ae4:	1000071e 	bne	r2,zero,10b04 <OSFlagPend+0x3c8>
                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we got           */
   10ae8:	e0bffc17 	ldw	r2,-16(fp)
   10aec:	10c0020b 	ldhu	r3,8(r2)
   10af0:	e0bfe78b 	ldhu	r2,-98(fp)
   10af4:	1884b03a 	or	r2,r3,r2
   10af8:	1007883a 	mov	r3,r2
   10afc:	e0bffc17 	ldw	r2,-16(fp)
   10b00:	10c0020d 	sth	r3,8(r2)
                 }
                 OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
   10b04:	008000b4 	movhi	r2,2
   10b08:	10b6d104 	addi	r2,r2,-9404
   10b0c:	10800017 	ldw	r2,0(r2)
   10b10:	e0ffe78b 	ldhu	r3,-98(fp)
   10b14:	10c00b0d 	sth	r3,44(r2)
   10b18:	e0bfe617 	ldw	r2,-104(fp)
   10b1c:	e0bff015 	stw	r2,-64(fp)
   10b20:	e0bff017 	ldw	r2,-64(fp)
   10b24:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
                 *perr                   = OS_ERR_NONE;
   10b28:	e0800217 	ldw	r2,8(fp)
   10b2c:	10000005 	stb	zero,0(r2)
                 return (flags_rdy);
   10b30:	e0bfe78b 	ldhu	r2,-98(fp)
   10b34:	00007806 	br	10d18 <OSFlagPend+0x5dc>
             } else {                                      /* Block task until events occur or timeout */
                 OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
   10b38:	e1bffd0b 	ldhu	r6,-12(fp)
   10b3c:	e0fffe03 	ldbu	r3,-8(fp)
   10b40:	e0bfff0b 	ldhu	r2,-4(fp)
   10b44:	e17ff704 	addi	r5,fp,-36
   10b48:	d8800015 	stw	r2,0(sp)
   10b4c:	e13ffc17 	ldw	r4,-16(fp)
   10b50:	180f883a 	mov	r7,r3
   10b54:	00111e00 	call	111e0 <OS_FlagBlock>
   10b58:	e0bfe617 	ldw	r2,-104(fp)
   10b5c:	e0bff115 	stw	r2,-60(fp)
   10b60:	e0bff117 	ldw	r2,-60(fp)
   10b64:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
             }
             break;
   10b68:	00000a06 	br	10b94 <OSFlagPend+0x458>
   10b6c:	e0bfe617 	ldw	r2,-104(fp)
   10b70:	e0bff215 	stw	r2,-56(fp)
   10b74:	e0bff217 	ldw	r2,-56(fp)
   10b78:	1001703a 	wrctl	status,r2
#endif

        default:
             OS_EXIT_CRITICAL();
             flags_rdy = (OS_FLAGS)0;
   10b7c:	e03fe78d 	sth	zero,-98(fp)
             *perr      = OS_ERR_FLAG_WAIT_TYPE;
   10b80:	e0800217 	ldw	r2,8(fp)
   10b84:	00c01bc4 	movi	r3,111
   10b88:	10c00005 	stb	r3,0(r2)
             return (flags_rdy);
   10b8c:	e0bfe78b 	ldhu	r2,-98(fp)
   10b90:	00006106 	br	10d18 <OSFlagPend+0x5dc>
    }
/*$PAGE*/
    OS_Sched();                                            /* Find next HPT ready to run               */
   10b94:	000f5b80 	call	f5b8 <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   10b98:	0005303a 	rdctl	r2,status
   10b9c:	e0bff315 	stw	r2,-52(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   10ba0:	e0fff317 	ldw	r3,-52(fp)
   10ba4:	00bfff84 	movi	r2,-2
   10ba8:	1884703a 	and	r2,r3,r2
   10bac:	1001703a 	wrctl	status,r2
  
  return context;
   10bb0:	e0bff317 	ldw	r2,-52(fp)
    OS_ENTER_CRITICAL();
   10bb4:	e0bfe615 	stw	r2,-104(fp)
    if (OSTCBCur->OSTCBStatPend != OS_STAT_PEND_OK) {      /* Have we timed-out or aborted?            */
   10bb8:	008000b4 	movhi	r2,2
   10bbc:	10b6d104 	addi	r2,r2,-9404
   10bc0:	10800017 	ldw	r2,0(r2)
   10bc4:	10800c43 	ldbu	r2,49(r2)
   10bc8:	10803fcc 	andi	r2,r2,255
   10bcc:	10002226 	beq	r2,zero,10c58 <OSFlagPend+0x51c>
        pend_stat                = OSTCBCur->OSTCBStatPend;
   10bd0:	008000b4 	movhi	r2,2
   10bd4:	10b6d104 	addi	r2,r2,-9404
   10bd8:	10800017 	ldw	r2,0(r2)
   10bdc:	10800c43 	ldbu	r2,49(r2)
   10be0:	e0bfe805 	stb	r2,-96(fp)
        OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
   10be4:	008000b4 	movhi	r2,2
   10be8:	10b6d104 	addi	r2,r2,-9404
   10bec:	10800017 	ldw	r2,0(r2)
   10bf0:	10000c45 	stb	zero,49(r2)
        OS_FlagUnlink(&node);
   10bf4:	e0bff704 	addi	r2,fp,-36
   10bf8:	1009883a 	mov	r4,r2
   10bfc:	00115980 	call	11598 <OS_FlagUnlink>
        OSTCBCur->OSTCBStat      = OS_STAT_RDY;            /* Yes, make task ready-to-run              */
   10c00:	008000b4 	movhi	r2,2
   10c04:	10b6d104 	addi	r2,r2,-9404
   10c08:	10800017 	ldw	r2,0(r2)
   10c0c:	10000c05 	stb	zero,48(r2)
   10c10:	e0bfe617 	ldw	r2,-104(fp)
   10c14:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   10c18:	e0bff417 	ldw	r2,-48(fp)
   10c1c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        flags_rdy                = (OS_FLAGS)0;
   10c20:	e03fe78d 	sth	zero,-98(fp)
        switch (pend_stat) {
   10c24:	e0bfe803 	ldbu	r2,-96(fp)
   10c28:	108000a0 	cmpeqi	r2,r2,2
   10c2c:	10000426 	beq	r2,zero,10c40 <OSFlagPend+0x504>
            case OS_STAT_PEND_ABORT:
                 *perr = OS_ERR_PEND_ABORT;                 /* Indicate that we aborted   waiting       */
   10c30:	e0800217 	ldw	r2,8(fp)
   10c34:	00c00384 	movi	r3,14
   10c38:	10c00005 	stb	r3,0(r2)
                 break;
   10c3c:	00000406 	br	10c50 <OSFlagPend+0x514>

            case OS_STAT_PEND_TO:
            default:
                 *perr = OS_ERR_TIMEOUT;                    /* Indicate that we timed-out waiting       */
   10c40:	e0800217 	ldw	r2,8(fp)
   10c44:	00c00284 	movi	r3,10
   10c48:	10c00005 	stb	r3,0(r2)
                 break;
   10c4c:	0001883a 	nop
        }
        return (flags_rdy);
   10c50:	e0bfe78b 	ldhu	r2,-98(fp)
   10c54:	00003006 	br	10d18 <OSFlagPend+0x5dc>
    }
    flags_rdy = OSTCBCur->OSTCBFlagsRdy;
   10c58:	008000b4 	movhi	r2,2
   10c5c:	10b6d104 	addi	r2,r2,-9404
   10c60:	10800017 	ldw	r2,0(r2)
   10c64:	10800b0b 	ldhu	r2,44(r2)
   10c68:	e0bfe78d 	sth	r2,-98(fp)
    if (consume == OS_TRUE) {                              /* See if we need to consume the flags      */
   10c6c:	e0bfe503 	ldbu	r2,-108(fp)
   10c70:	10800058 	cmpnei	r2,r2,1
   10c74:	1000211e 	bne	r2,zero,10cfc <OSFlagPend+0x5c0>
        switch (wait_type) {
   10c78:	e0bffe03 	ldbu	r2,-8(fp)
   10c7c:	10001616 	blt	r2,zero,10cd8 <OSFlagPend+0x59c>
   10c80:	10c00090 	cmplti	r3,r2,2
   10c84:	18000c1e 	bne	r3,zero,10cb8 <OSFlagPend+0x57c>
   10c88:	10800108 	cmpgei	r2,r2,4
   10c8c:	1000121e 	bne	r2,zero,10cd8 <OSFlagPend+0x59c>
            case OS_FLAG_WAIT_SET_ALL:
            case OS_FLAG_WAIT_SET_ANY:                     /* Clear ONLY the flags we got              */
                 pgrp->OSFlagFlags &= ~flags_rdy;
   10c90:	e0bffc17 	ldw	r2,-16(fp)
   10c94:	1080020b 	ldhu	r2,8(r2)
   10c98:	1007883a 	mov	r3,r2
   10c9c:	e0bfe78b 	ldhu	r2,-98(fp)
   10ca0:	0084303a 	nor	r2,zero,r2
   10ca4:	1884703a 	and	r2,r3,r2
   10ca8:	1007883a 	mov	r3,r2
   10cac:	e0bffc17 	ldw	r2,-16(fp)
   10cb0:	10c0020d 	sth	r3,8(r2)
                 break;
   10cb4:	00001106 	br	10cfc <OSFlagPend+0x5c0>

#if OS_FLAG_WAIT_CLR_EN > 0
            case OS_FLAG_WAIT_CLR_ALL:
            case OS_FLAG_WAIT_CLR_ANY:                     /* Set   ONLY the flags we got              */
                 pgrp->OSFlagFlags |=  flags_rdy;
   10cb8:	e0bffc17 	ldw	r2,-16(fp)
   10cbc:	10c0020b 	ldhu	r3,8(r2)
   10cc0:	e0bfe78b 	ldhu	r2,-98(fp)
   10cc4:	1884b03a 	or	r2,r3,r2
   10cc8:	1007883a 	mov	r3,r2
   10ccc:	e0bffc17 	ldw	r2,-16(fp)
   10cd0:	10c0020d 	sth	r3,8(r2)
                 break;
   10cd4:	00000906 	br	10cfc <OSFlagPend+0x5c0>
   10cd8:	e0bfe617 	ldw	r2,-104(fp)
   10cdc:	e0bff515 	stw	r2,-44(fp)
   10ce0:	e0bff517 	ldw	r2,-44(fp)
   10ce4:	1001703a 	wrctl	status,r2
#endif
            default:
                 OS_EXIT_CRITICAL();
                 *perr = OS_ERR_FLAG_WAIT_TYPE;
   10ce8:	e0800217 	ldw	r2,8(fp)
   10cec:	00c01bc4 	movi	r3,111
   10cf0:	10c00005 	stb	r3,0(r2)
                 return ((OS_FLAGS)0);
   10cf4:	0005883a 	mov	r2,zero
   10cf8:	00000706 	br	10d18 <OSFlagPend+0x5dc>
   10cfc:	e0bfe617 	ldw	r2,-104(fp)
   10d00:	e0bff615 	stw	r2,-40(fp)
   10d04:	e0bff617 	ldw	r2,-40(fp)
   10d08:	1001703a 	wrctl	status,r2
        }
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;                                   /* Event(s) must have occurred              */
   10d0c:	e0800217 	ldw	r2,8(fp)
   10d10:	10000005 	stb	zero,0(r2)
    return (flags_rdy);
   10d14:	e0bfe78b 	ldhu	r2,-98(fp)
}
   10d18:	e037883a 	mov	sp,fp
   10d1c:	dfc00117 	ldw	ra,4(sp)
   10d20:	df000017 	ldw	fp,0(sp)
   10d24:	dec00204 	addi	sp,sp,8
   10d28:	f800283a 	ret

00010d2c <OSFlagPendGetFlagsRdy>:
* Called from: Task ONLY
*********************************************************************************************************
*/

OS_FLAGS  OSFlagPendGetFlagsRdy (void)
{
   10d2c:	defffb04 	addi	sp,sp,-20
   10d30:	df000415 	stw	fp,16(sp)
   10d34:	df000404 	addi	fp,sp,16
    OS_FLAGS      flags;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR     cpu_sr = 0;
   10d38:	e03ffc15 	stw	zero,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   10d3c:	0005303a 	rdctl	r2,status
   10d40:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   10d44:	e0fffe17 	ldw	r3,-8(fp)
   10d48:	00bfff84 	movi	r2,-2
   10d4c:	1884703a 	and	r2,r3,r2
   10d50:	1001703a 	wrctl	status,r2
  
  return context;
   10d54:	e0bffe17 	ldw	r2,-8(fp)
#endif



    OS_ENTER_CRITICAL();
   10d58:	e0bffc15 	stw	r2,-16(fp)
    flags = OSTCBCur->OSTCBFlagsRdy;
   10d5c:	008000b4 	movhi	r2,2
   10d60:	10b6d104 	addi	r2,r2,-9404
   10d64:	10800017 	ldw	r2,0(r2)
   10d68:	10800b0b 	ldhu	r2,44(r2)
   10d6c:	e0bffd0d 	sth	r2,-12(fp)
   10d70:	e0bffc17 	ldw	r2,-16(fp)
   10d74:	e0bfff15 	stw	r2,-4(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   10d78:	e0bfff17 	ldw	r2,-4(fp)
   10d7c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (flags);
   10d80:	e0bffd0b 	ldhu	r2,-12(fp)
}
   10d84:	e037883a 	mov	sp,fp
   10d88:	df000017 	ldw	fp,0(sp)
   10d8c:	dec00104 	addi	sp,sp,4
   10d90:	f800283a 	ret

00010d94 <OSFlagPost>:
*              2) The amount of time interrupts are DISABLED depends on the number of tasks waiting on
*                 the event flag group.
*********************************************************************************************************
*/
OS_FLAGS  OSFlagPost (OS_FLAG_GRP *pgrp, OS_FLAGS flags, INT8U opt, INT8U *perr)
{
   10d94:	deffef04 	addi	sp,sp,-68
   10d98:	dfc01015 	stw	ra,64(sp)
   10d9c:	df000f15 	stw	fp,60(sp)
   10da0:	df000f04 	addi	fp,sp,60
   10da4:	e13ffc15 	stw	r4,-16(fp)
   10da8:	2807883a 	mov	r3,r5
   10dac:	3005883a 	mov	r2,r6
   10db0:	e1ffff15 	stw	r7,-4(fp)
   10db4:	e0fffd0d 	sth	r3,-12(fp)
   10db8:	e0bffe05 	stb	r2,-8(fp)
    BOOLEAN       sched;
    OS_FLAGS      flags_cur;
    OS_FLAGS      flags_rdy;
    BOOLEAN       rdy;
#if OS_CRITICAL_METHOD == 3                          /* Allocate storage for CPU status register       */
    OS_CPU_SR     cpu_sr = 0;
   10dbc:	e03ff315 	stw	zero,-52(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                        /* Validate 'perr'                                */
   10dc0:	e0bfff17 	ldw	r2,-4(fp)
   10dc4:	1000021e 	bne	r2,zero,10dd0 <OSFlagPost+0x3c>
        return ((OS_FLAGS)0);
   10dc8:	0005883a 	mov	r2,zero
   10dcc:	0000ce06 	br	11108 <OSFlagPost+0x374>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {                  /* Validate 'pgrp'                                */
   10dd0:	e0bffc17 	ldw	r2,-16(fp)
   10dd4:	1000051e 	bne	r2,zero,10dec <OSFlagPost+0x58>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
   10dd8:	e0bfff17 	ldw	r2,-4(fp)
   10ddc:	00c01b84 	movi	r3,110
   10de0:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
   10de4:	0005883a 	mov	r2,zero
   10de8:	0000c706 	br	11108 <OSFlagPost+0x374>
    }
#endif
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {    /* Make sure we are pointing to an event flag grp */
   10dec:	e0bffc17 	ldw	r2,-16(fp)
   10df0:	10800003 	ldbu	r2,0(r2)
   10df4:	10803fcc 	andi	r2,r2,255
   10df8:	10800160 	cmpeqi	r2,r2,5
   10dfc:	1000051e 	bne	r2,zero,10e14 <OSFlagPost+0x80>
        *perr = OS_ERR_EVENT_TYPE;
   10e00:	e0bfff17 	ldw	r2,-4(fp)
   10e04:	00c00044 	movi	r3,1
   10e08:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
   10e0c:	0005883a 	mov	r2,zero
   10e10:	0000bd06 	br	11108 <OSFlagPost+0x374>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   10e14:	0005303a 	rdctl	r2,status
   10e18:	e0bff615 	stw	r2,-40(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   10e1c:	e0fff617 	ldw	r3,-40(fp)
   10e20:	00bfff84 	movi	r2,-2
   10e24:	1884703a 	and	r2,r3,r2
   10e28:	1001703a 	wrctl	status,r2
  
  return context;
   10e2c:	e0bff617 	ldw	r2,-40(fp)
    }
/*$PAGE*/
    OS_ENTER_CRITICAL();
   10e30:	e0bff315 	stw	r2,-52(fp)
    switch (opt) {
   10e34:	e0bffe03 	ldbu	r2,-8(fp)
   10e38:	10000326 	beq	r2,zero,10e48 <OSFlagPost+0xb4>
   10e3c:	10800060 	cmpeqi	r2,r2,1
   10e40:	10000b1e 	bne	r2,zero,10e70 <OSFlagPost+0xdc>
   10e44:	00001206 	br	10e90 <OSFlagPost+0xfc>
        case OS_FLAG_CLR:
             pgrp->OSFlagFlags &= ~flags;            /* Clear the flags specified in the group         */
   10e48:	e0bffc17 	ldw	r2,-16(fp)
   10e4c:	1080020b 	ldhu	r2,8(r2)
   10e50:	1007883a 	mov	r3,r2
   10e54:	e0bffd0b 	ldhu	r2,-12(fp)
   10e58:	0084303a 	nor	r2,zero,r2
   10e5c:	1884703a 	and	r2,r3,r2
   10e60:	1007883a 	mov	r3,r2
   10e64:	e0bffc17 	ldw	r2,-16(fp)
   10e68:	10c0020d 	sth	r3,8(r2)
             break;
   10e6c:	00001106 	br	10eb4 <OSFlagPost+0x120>

        case OS_FLAG_SET:
             pgrp->OSFlagFlags |=  flags;            /* Set   the flags specified in the group         */
   10e70:	e0bffc17 	ldw	r2,-16(fp)
   10e74:	10c0020b 	ldhu	r3,8(r2)
   10e78:	e0bffd0b 	ldhu	r2,-12(fp)
   10e7c:	1884b03a 	or	r2,r3,r2
   10e80:	1007883a 	mov	r3,r2
   10e84:	e0bffc17 	ldw	r2,-16(fp)
   10e88:	10c0020d 	sth	r3,8(r2)
             break;
   10e8c:	00000906 	br	10eb4 <OSFlagPost+0x120>
   10e90:	e0bff317 	ldw	r2,-52(fp)
   10e94:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   10e98:	e0bff717 	ldw	r2,-36(fp)
   10e9c:	1001703a 	wrctl	status,r2

        default:
             OS_EXIT_CRITICAL();                     /* INVALID option                                 */
             *perr = OS_ERR_FLAG_INVALID_OPT;
   10ea0:	e0bfff17 	ldw	r2,-4(fp)
   10ea4:	00c01c44 	movi	r3,113
   10ea8:	10c00005 	stb	r3,0(r2)
             return ((OS_FLAGS)0);
   10eac:	0005883a 	mov	r2,zero
   10eb0:	00009506 	br	11108 <OSFlagPost+0x374>
    }
    sched = OS_FALSE;                                /* Indicate that we don't need rescheduling       */
   10eb4:	e03ff205 	stb	zero,-56(fp)
    pnode = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
   10eb8:	e0bffc17 	ldw	r2,-16(fp)
   10ebc:	10800117 	ldw	r2,4(r2)
   10ec0:	e0bff115 	stw	r2,-60(fp)
    while (pnode != (OS_FLAG_NODE *)0) {             /* Go through all tasks waiting on event flag(s)  */
   10ec4:	00007406 	br	11098 <OSFlagPost+0x304>
        switch (pnode->OSFlagNodeWaitType) {
   10ec8:	e0bff117 	ldw	r2,-60(fp)
   10ecc:	10800483 	ldbu	r2,18(r2)
   10ed0:	10803fcc 	andi	r2,r2,255
   10ed4:	10c00060 	cmpeqi	r3,r2,1
   10ed8:	18004d1e 	bne	r3,zero,11010 <OSFlagPost+0x27c>
   10edc:	10c00088 	cmpgei	r3,r2,2
   10ee0:	1800021e 	bne	r3,zero,10eec <OSFlagPost+0x158>
   10ee4:	10003126 	beq	r2,zero,10fac <OSFlagPost+0x218>
   10ee8:	00005f06 	br	11068 <OSFlagPost+0x2d4>
   10eec:	10c000a0 	cmpeqi	r3,r2,2
   10ef0:	1800031e 	bne	r3,zero,10f00 <OSFlagPost+0x16c>
   10ef4:	108000e0 	cmpeqi	r2,r2,3
   10ef8:	1000181e 	bne	r2,zero,10f5c <OSFlagPost+0x1c8>
   10efc:	00005a06 	br	11068 <OSFlagPost+0x2d4>
            case OS_FLAG_WAIT_SET_ALL:               /* See if all req. flags are set for current node */
                 flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
   10f00:	e0bffc17 	ldw	r2,-16(fp)
   10f04:	10c0020b 	ldhu	r3,8(r2)
   10f08:	e0bff117 	ldw	r2,-60(fp)
   10f0c:	1080040b 	ldhu	r2,16(r2)
   10f10:	1884703a 	and	r2,r3,r2
   10f14:	e0bff40d 	sth	r2,-48(fp)
                 if (flags_rdy == pnode->OSFlagNodeFlags) {
   10f18:	e0bff117 	ldw	r2,-60(fp)
   10f1c:	1080040b 	ldhu	r2,16(r2)
   10f20:	10ffffcc 	andi	r3,r2,65535
   10f24:	e0bff40b 	ldhu	r2,-48(fp)
   10f28:	18800b1e 	bne	r3,r2,10f58 <OSFlagPost+0x1c4>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
   10f2c:	e0bff40b 	ldhu	r2,-48(fp)
   10f30:	e13ff117 	ldw	r4,-60(fp)
   10f34:	100b883a 	mov	r5,r2
   10f38:	00114880 	call	11488 <OS_FlagTaskRdy>
   10f3c:	e0bff485 	stb	r2,-46(fp)
                     if (rdy == OS_TRUE) {
   10f40:	e0bff483 	ldbu	r2,-46(fp)
   10f44:	10800058 	cmpnei	r2,r2,1
   10f48:	1000031e 	bne	r2,zero,10f58 <OSFlagPost+0x1c4>
                         sched = OS_TRUE;                     /* When done we will reschedule          */
   10f4c:	00800044 	movi	r2,1
   10f50:	e0bff205 	stb	r2,-56(fp)
                     }
                 }
                 break;
   10f54:	00004d06 	br	1108c <OSFlagPost+0x2f8>
   10f58:	00004c06 	br	1108c <OSFlagPost+0x2f8>

            case OS_FLAG_WAIT_SET_ANY:               /* See if any flag set                            */
                 flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
   10f5c:	e0bffc17 	ldw	r2,-16(fp)
   10f60:	10c0020b 	ldhu	r3,8(r2)
   10f64:	e0bff117 	ldw	r2,-60(fp)
   10f68:	1080040b 	ldhu	r2,16(r2)
   10f6c:	1884703a 	and	r2,r3,r2
   10f70:	e0bff40d 	sth	r2,-48(fp)
                 if (flags_rdy != (OS_FLAGS)0) {
   10f74:	e0bff40b 	ldhu	r2,-48(fp)
   10f78:	10000b26 	beq	r2,zero,10fa8 <OSFlagPost+0x214>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
   10f7c:	e0bff40b 	ldhu	r2,-48(fp)
   10f80:	e13ff117 	ldw	r4,-60(fp)
   10f84:	100b883a 	mov	r5,r2
   10f88:	00114880 	call	11488 <OS_FlagTaskRdy>
   10f8c:	e0bff485 	stb	r2,-46(fp)
                     if (rdy == OS_TRUE) {
   10f90:	e0bff483 	ldbu	r2,-46(fp)
   10f94:	10800058 	cmpnei	r2,r2,1
   10f98:	1000031e 	bne	r2,zero,10fa8 <OSFlagPost+0x214>
                         sched = OS_TRUE;                     /* When done we will reschedule          */
   10f9c:	00800044 	movi	r2,1
   10fa0:	e0bff205 	stb	r2,-56(fp)
                     }
                 }
                 break;
   10fa4:	00003906 	br	1108c <OSFlagPost+0x2f8>
   10fa8:	00003806 	br	1108c <OSFlagPost+0x2f8>

#if OS_FLAG_WAIT_CLR_EN > 0
            case OS_FLAG_WAIT_CLR_ALL:               /* See if all req. flags are set for current node */
                 flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
   10fac:	e0bffc17 	ldw	r2,-16(fp)
   10fb0:	1080020b 	ldhu	r2,8(r2)
   10fb4:	0084303a 	nor	r2,zero,r2
   10fb8:	1007883a 	mov	r3,r2
   10fbc:	e0bff117 	ldw	r2,-60(fp)
   10fc0:	1080040b 	ldhu	r2,16(r2)
   10fc4:	1884703a 	and	r2,r3,r2
   10fc8:	e0bff40d 	sth	r2,-48(fp)
                 if (flags_rdy == pnode->OSFlagNodeFlags) {
   10fcc:	e0bff117 	ldw	r2,-60(fp)
   10fd0:	1080040b 	ldhu	r2,16(r2)
   10fd4:	10ffffcc 	andi	r3,r2,65535
   10fd8:	e0bff40b 	ldhu	r2,-48(fp)
   10fdc:	18800b1e 	bne	r3,r2,1100c <OSFlagPost+0x278>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
   10fe0:	e0bff40b 	ldhu	r2,-48(fp)
   10fe4:	e13ff117 	ldw	r4,-60(fp)
   10fe8:	100b883a 	mov	r5,r2
   10fec:	00114880 	call	11488 <OS_FlagTaskRdy>
   10ff0:	e0bff485 	stb	r2,-46(fp)
                     if (rdy == OS_TRUE) {
   10ff4:	e0bff483 	ldbu	r2,-46(fp)
   10ff8:	10800058 	cmpnei	r2,r2,1
   10ffc:	1000031e 	bne	r2,zero,1100c <OSFlagPost+0x278>
                         sched = OS_TRUE;                     /* When done we will reschedule          */
   11000:	00800044 	movi	r2,1
   11004:	e0bff205 	stb	r2,-56(fp)
                     }
                 }
                 break;
   11008:	00002006 	br	1108c <OSFlagPost+0x2f8>
   1100c:	00001f06 	br	1108c <OSFlagPost+0x2f8>

            case OS_FLAG_WAIT_CLR_ANY:               /* See if any flag set                            */
                 flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
   11010:	e0bffc17 	ldw	r2,-16(fp)
   11014:	1080020b 	ldhu	r2,8(r2)
   11018:	0084303a 	nor	r2,zero,r2
   1101c:	1007883a 	mov	r3,r2
   11020:	e0bff117 	ldw	r2,-60(fp)
   11024:	1080040b 	ldhu	r2,16(r2)
   11028:	1884703a 	and	r2,r3,r2
   1102c:	e0bff40d 	sth	r2,-48(fp)
                 if (flags_rdy != (OS_FLAGS)0) {
   11030:	e0bff40b 	ldhu	r2,-48(fp)
   11034:	10000b26 	beq	r2,zero,11064 <OSFlagPost+0x2d0>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
   11038:	e0bff40b 	ldhu	r2,-48(fp)
   1103c:	e13ff117 	ldw	r4,-60(fp)
   11040:	100b883a 	mov	r5,r2
   11044:	00114880 	call	11488 <OS_FlagTaskRdy>
   11048:	e0bff485 	stb	r2,-46(fp)
                     if (rdy == OS_TRUE) {
   1104c:	e0bff483 	ldbu	r2,-46(fp)
   11050:	10800058 	cmpnei	r2,r2,1
   11054:	1000031e 	bne	r2,zero,11064 <OSFlagPost+0x2d0>
                         sched = OS_TRUE;                     /* When done we will reschedule          */
   11058:	00800044 	movi	r2,1
   1105c:	e0bff205 	stb	r2,-56(fp)
                     }
                 }
                 break;
   11060:	00000a06 	br	1108c <OSFlagPost+0x2f8>
   11064:	00000906 	br	1108c <OSFlagPost+0x2f8>
   11068:	e0bff317 	ldw	r2,-52(fp)
   1106c:	e0bff815 	stw	r2,-32(fp)
   11070:	e0bff817 	ldw	r2,-32(fp)
   11074:	1001703a 	wrctl	status,r2
#endif
            default:
                 OS_EXIT_CRITICAL();
                 *perr = OS_ERR_FLAG_WAIT_TYPE;
   11078:	e0bfff17 	ldw	r2,-4(fp)
   1107c:	00c01bc4 	movi	r3,111
   11080:	10c00005 	stb	r3,0(r2)
                 return ((OS_FLAGS)0);
   11084:	0005883a 	mov	r2,zero
   11088:	00001f06 	br	11108 <OSFlagPost+0x374>
        }
        pnode = (OS_FLAG_NODE *)pnode->OSFlagNodeNext; /* Point to next task waiting for event flag(s) */
   1108c:	e0bff117 	ldw	r2,-60(fp)
   11090:	10800017 	ldw	r2,0(r2)
   11094:	e0bff115 	stw	r2,-60(fp)
             *perr = OS_ERR_FLAG_INVALID_OPT;
             return ((OS_FLAGS)0);
    }
    sched = OS_FALSE;                                /* Indicate that we don't need rescheduling       */
    pnode = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
    while (pnode != (OS_FLAG_NODE *)0) {             /* Go through all tasks waiting on event flag(s)  */
   11098:	e0bff117 	ldw	r2,-60(fp)
   1109c:	103f8a1e 	bne	r2,zero,10ec8 <__alt_mem_Flash_flash_data+0xf4010ec8>
   110a0:	e0bff317 	ldw	r2,-52(fp)
   110a4:	e0bff915 	stw	r2,-28(fp)
   110a8:	e0bff917 	ldw	r2,-28(fp)
   110ac:	1001703a 	wrctl	status,r2
                 return ((OS_FLAGS)0);
        }
        pnode = (OS_FLAG_NODE *)pnode->OSFlagNodeNext; /* Point to next task waiting for event flag(s) */
    }
    OS_EXIT_CRITICAL();
    if (sched == OS_TRUE) {
   110b0:	e0bff203 	ldbu	r2,-56(fp)
   110b4:	10800058 	cmpnei	r2,r2,1
   110b8:	1000011e 	bne	r2,zero,110c0 <OSFlagPost+0x32c>
        OS_Sched();
   110bc:	000f5b80 	call	f5b8 <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   110c0:	0005303a 	rdctl	r2,status
   110c4:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   110c8:	e0fffa17 	ldw	r3,-24(fp)
   110cc:	00bfff84 	movi	r2,-2
   110d0:	1884703a 	and	r2,r3,r2
   110d4:	1001703a 	wrctl	status,r2
  
  return context;
   110d8:	e0bffa17 	ldw	r2,-24(fp)
    }
    OS_ENTER_CRITICAL();
   110dc:	e0bff315 	stw	r2,-52(fp)
    flags_cur = pgrp->OSFlagFlags;
   110e0:	e0bffc17 	ldw	r2,-16(fp)
   110e4:	1080020b 	ldhu	r2,8(r2)
   110e8:	e0bff50d 	sth	r2,-44(fp)
   110ec:	e0bff317 	ldw	r2,-52(fp)
   110f0:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   110f4:	e0bffb17 	ldw	r2,-20(fp)
   110f8:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr     = OS_ERR_NONE;
   110fc:	e0bfff17 	ldw	r2,-4(fp)
   11100:	10000005 	stb	zero,0(r2)
    return (flags_cur);
   11104:	e0bff50b 	ldhu	r2,-44(fp)
}
   11108:	e037883a 	mov	sp,fp
   1110c:	dfc00117 	ldw	ra,4(sp)
   11110:	df000017 	ldw	fp,0(sp)
   11114:	dec00204 	addi	sp,sp,8
   11118:	f800283a 	ret

0001111c <OSFlagQuery>:
*********************************************************************************************************
*/

#if OS_FLAG_QUERY_EN > 0
OS_FLAGS  OSFlagQuery (OS_FLAG_GRP *pgrp, INT8U *perr)
{
   1111c:	defff904 	addi	sp,sp,-28
   11120:	df000615 	stw	fp,24(sp)
   11124:	df000604 	addi	fp,sp,24
   11128:	e13ffe15 	stw	r4,-8(fp)
   1112c:	e17fff15 	stw	r5,-4(fp)
    OS_FLAGS   flags;
#if OS_CRITICAL_METHOD == 3                       /* Allocate storage for CPU status register          */
    OS_CPU_SR  cpu_sr = 0;
   11130:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                     /* Validate 'perr'                                   */
   11134:	e0bfff17 	ldw	r2,-4(fp)
   11138:	1000021e 	bne	r2,zero,11144 <OSFlagQuery+0x28>
        return ((OS_FLAGS)0);
   1113c:	0005883a 	mov	r2,zero
   11140:	00002306 	br	111d0 <OSFlagQuery+0xb4>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {               /* Validate 'pgrp'                                   */
   11144:	e0bffe17 	ldw	r2,-8(fp)
   11148:	1000051e 	bne	r2,zero,11160 <OSFlagQuery+0x44>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
   1114c:	e0bfff17 	ldw	r2,-4(fp)
   11150:	00c01b84 	movi	r3,110
   11154:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
   11158:	0005883a 	mov	r2,zero
   1115c:	00001c06 	br	111d0 <OSFlagQuery+0xb4>
    }
#endif
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) { /* Validate event block type                         */
   11160:	e0bffe17 	ldw	r2,-8(fp)
   11164:	10800003 	ldbu	r2,0(r2)
   11168:	10803fcc 	andi	r2,r2,255
   1116c:	10800160 	cmpeqi	r2,r2,5
   11170:	1000051e 	bne	r2,zero,11188 <OSFlagQuery+0x6c>
        *perr = OS_ERR_EVENT_TYPE;
   11174:	e0bfff17 	ldw	r2,-4(fp)
   11178:	00c00044 	movi	r3,1
   1117c:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
   11180:	0005883a 	mov	r2,zero
   11184:	00001206 	br	111d0 <OSFlagQuery+0xb4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   11188:	0005303a 	rdctl	r2,status
   1118c:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   11190:	e0fffc17 	ldw	r3,-16(fp)
   11194:	00bfff84 	movi	r2,-2
   11198:	1884703a 	and	r2,r3,r2
   1119c:	1001703a 	wrctl	status,r2
  
  return context;
   111a0:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
   111a4:	e0bffa15 	stw	r2,-24(fp)
    flags = pgrp->OSFlagFlags;
   111a8:	e0bffe17 	ldw	r2,-8(fp)
   111ac:	1080020b 	ldhu	r2,8(r2)
   111b0:	e0bffb0d 	sth	r2,-20(fp)
   111b4:	e0bffa17 	ldw	r2,-24(fp)
   111b8:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   111bc:	e0bffd17 	ldw	r2,-12(fp)
   111c0:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
   111c4:	e0bfff17 	ldw	r2,-4(fp)
   111c8:	10000005 	stb	zero,0(r2)
    return (flags);                               /* Return the current value of the event flags       */
   111cc:	e0bffb0b 	ldhu	r2,-20(fp)
}
   111d0:	e037883a 	mov	sp,fp
   111d4:	df000017 	ldw	fp,0(sp)
   111d8:	dec00104 	addi	sp,sp,4
   111dc:	f800283a 	ret

000111e0 <OS_FlagBlock>:
* Note(s)    : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

static  void  OS_FlagBlock (OS_FLAG_GRP *pgrp, OS_FLAG_NODE *pnode, OS_FLAGS flags, INT8U wait_type, INT16U timeout)
{
   111e0:	defff804 	addi	sp,sp,-32
   111e4:	df000715 	stw	fp,28(sp)
   111e8:	df000704 	addi	fp,sp,28
   111ec:	e13ffb15 	stw	r4,-20(fp)
   111f0:	e17ffc15 	stw	r5,-16(fp)
   111f4:	3009883a 	mov	r4,r6
   111f8:	3807883a 	mov	r3,r7
   111fc:	e0800117 	ldw	r2,4(fp)
   11200:	e13ffd0d 	sth	r4,-12(fp)
   11204:	e0fffe05 	stb	r3,-8(fp)
   11208:	e0bfff0d 	sth	r2,-4(fp)
    OS_FLAG_NODE  *pnode_next;
    INT8U          y;


    OSTCBCur->OSTCBStat      |= OS_STAT_FLAG;
   1120c:	008000b4 	movhi	r2,2
   11210:	10b6d104 	addi	r2,r2,-9404
   11214:	10c00017 	ldw	r3,0(r2)
   11218:	008000b4 	movhi	r2,2
   1121c:	10b6d104 	addi	r2,r2,-9404
   11220:	10800017 	ldw	r2,0(r2)
   11224:	10800c03 	ldbu	r2,48(r2)
   11228:	10800814 	ori	r2,r2,32
   1122c:	18800c05 	stb	r2,48(r3)
    OSTCBCur->OSTCBStatPend   = OS_STAT_PEND_OK;
   11230:	008000b4 	movhi	r2,2
   11234:	10b6d104 	addi	r2,r2,-9404
   11238:	10800017 	ldw	r2,0(r2)
   1123c:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBDly        = timeout;              /* Store timeout in task's TCB                   */
   11240:	008000b4 	movhi	r2,2
   11244:	10b6d104 	addi	r2,r2,-9404
   11248:	10800017 	ldw	r2,0(r2)
   1124c:	e0ffff0b 	ldhu	r3,-4(fp)
   11250:	10c00b8d 	sth	r3,46(r2)
#if OS_TASK_DEL_EN > 0
    OSTCBCur->OSTCBFlagNode   = pnode;                /* TCB to link to node                           */
   11254:	008000b4 	movhi	r2,2
   11258:	10b6d104 	addi	r2,r2,-9404
   1125c:	10800017 	ldw	r2,0(r2)
   11260:	e0fffc17 	ldw	r3,-16(fp)
   11264:	10c00a15 	stw	r3,40(r2)
#endif
    pnode->OSFlagNodeFlags    = flags;                /* Save the flags that we need to wait for       */
   11268:	e0bffc17 	ldw	r2,-16(fp)
   1126c:	e0fffd0b 	ldhu	r3,-12(fp)
   11270:	10c0040d 	sth	r3,16(r2)
    pnode->OSFlagNodeWaitType = wait_type;            /* Save the type of wait we are doing            */
   11274:	e0bffc17 	ldw	r2,-16(fp)
   11278:	e0fffe03 	ldbu	r3,-8(fp)
   1127c:	10c00485 	stb	r3,18(r2)
    pnode->OSFlagNodeTCB      = (void *)OSTCBCur;     /* Link to task's TCB                            */
   11280:	008000b4 	movhi	r2,2
   11284:	10b6d104 	addi	r2,r2,-9404
   11288:	10c00017 	ldw	r3,0(r2)
   1128c:	e0bffc17 	ldw	r2,-16(fp)
   11290:	10c00215 	stw	r3,8(r2)
    pnode->OSFlagNodeNext     = pgrp->OSFlagWaitList; /* Add node at beginning of event flag wait list */
   11294:	e0bffb17 	ldw	r2,-20(fp)
   11298:	10c00117 	ldw	r3,4(r2)
   1129c:	e0bffc17 	ldw	r2,-16(fp)
   112a0:	10c00015 	stw	r3,0(r2)
    pnode->OSFlagNodePrev     = (void *)0;
   112a4:	e0bffc17 	ldw	r2,-16(fp)
   112a8:	10000115 	stw	zero,4(r2)
    pnode->OSFlagNodeFlagGrp  = (void *)pgrp;         /* Link to Event Flag Group                      */
   112ac:	e0bffc17 	ldw	r2,-16(fp)
   112b0:	e0fffb17 	ldw	r3,-20(fp)
   112b4:	10c00315 	stw	r3,12(r2)
    pnode_next                = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
   112b8:	e0bffb17 	ldw	r2,-20(fp)
   112bc:	10800117 	ldw	r2,4(r2)
   112c0:	e0bff915 	stw	r2,-28(fp)
    if (pnode_next != (void *)0) {                    /* Is this the first NODE to insert?             */
   112c4:	e0bff917 	ldw	r2,-28(fp)
   112c8:	10000326 	beq	r2,zero,112d8 <OS_FlagBlock+0xf8>
        pnode_next->OSFlagNodePrev = pnode;           /* No, link in doubly linked list                */
   112cc:	e0bff917 	ldw	r2,-28(fp)
   112d0:	e0fffc17 	ldw	r3,-16(fp)
   112d4:	10c00115 	stw	r3,4(r2)
    }
    pgrp->OSFlagWaitList = (void *)pnode;
   112d8:	e0bffb17 	ldw	r2,-20(fp)
   112dc:	e0fffc17 	ldw	r3,-16(fp)
   112e0:	10c00115 	stw	r3,4(r2)

    y            =  OSTCBCur->OSTCBY;                 /* Suspend current task until flag(s) received   */
   112e4:	008000b4 	movhi	r2,2
   112e8:	10b6d104 	addi	r2,r2,-9404
   112ec:	10800017 	ldw	r2,0(r2)
   112f0:	10800d03 	ldbu	r2,52(r2)
   112f4:	e0bffa05 	stb	r2,-24(fp)
    OSRdyTbl[y] &= ~OSTCBCur->OSTCBBitX;
   112f8:	e0fffa03 	ldbu	r3,-24(fp)
   112fc:	e13ffa03 	ldbu	r4,-24(fp)
   11300:	008000b4 	movhi	r2,2
   11304:	10b6ce44 	addi	r2,r2,-9415
   11308:	1105883a 	add	r2,r2,r4
   1130c:	10800003 	ldbu	r2,0(r2)
   11310:	1009883a 	mov	r4,r2
   11314:	008000b4 	movhi	r2,2
   11318:	10b6d104 	addi	r2,r2,-9404
   1131c:	10800017 	ldw	r2,0(r2)
   11320:	10800d43 	ldbu	r2,53(r2)
   11324:	0084303a 	nor	r2,zero,r2
   11328:	2084703a 	and	r2,r4,r2
   1132c:	1009883a 	mov	r4,r2
   11330:	008000b4 	movhi	r2,2
   11334:	10b6ce44 	addi	r2,r2,-9415
   11338:	10c5883a 	add	r2,r2,r3
   1133c:	11000005 	stb	r4,0(r2)
    if (OSRdyTbl[y] == 0x00) {
   11340:	e0fffa03 	ldbu	r3,-24(fp)
   11344:	008000b4 	movhi	r2,2
   11348:	10b6ce44 	addi	r2,r2,-9415
   1134c:	10c5883a 	add	r2,r2,r3
   11350:	10800003 	ldbu	r2,0(r2)
   11354:	10803fcc 	andi	r2,r2,255
   11358:	10000e1e 	bne	r2,zero,11394 <OS_FlagBlock+0x1b4>
        OSRdyGrp &= ~OSTCBCur->OSTCBBitY;
   1135c:	008000b4 	movhi	r2,2
   11360:	10b6d104 	addi	r2,r2,-9404
   11364:	10800017 	ldw	r2,0(r2)
   11368:	10800d83 	ldbu	r2,54(r2)
   1136c:	0084303a 	nor	r2,zero,r2
   11370:	1007883a 	mov	r3,r2
   11374:	008000b4 	movhi	r2,2
   11378:	10b6ce04 	addi	r2,r2,-9416
   1137c:	10800003 	ldbu	r2,0(r2)
   11380:	1884703a 	and	r2,r3,r2
   11384:	1007883a 	mov	r3,r2
   11388:	008000b4 	movhi	r2,2
   1138c:	10b6ce04 	addi	r2,r2,-9416
   11390:	10c00005 	stb	r3,0(r2)
    }
}
   11394:	e037883a 	mov	sp,fp
   11398:	df000017 	ldw	fp,0(sp)
   1139c:	dec00104 	addi	sp,sp,4
   113a0:	f800283a 	ret

000113a4 <OS_FlagInit>:
* WARNING    : You MUST NOT call this function from your code.  This is an INTERNAL function to uC/OS-II.
*********************************************************************************************************
*/

void  OS_FlagInit (void)
{
   113a4:	defffb04 	addi	sp,sp,-20
   113a8:	dfc00415 	stw	ra,16(sp)
   113ac:	df000315 	stw	fp,12(sp)
   113b0:	df000304 	addi	fp,sp,12
    INT16U       i;
    OS_FLAG_GRP *pgrp1;
    OS_FLAG_GRP *pgrp2;


    OS_MemClr((INT8U *)&OSFlagTbl[0], sizeof(OSFlagTbl));           /* Clear the flag group table      */
   113b4:	010000b4 	movhi	r4,2
   113b8:	210ee404 	addi	r4,r4,15248
   113bc:	0140dc04 	movi	r5,880
   113c0:	000f5040 	call	f504 <OS_MemClr>
    pgrp1 = &OSFlagTbl[0];
   113c4:	008000b4 	movhi	r2,2
   113c8:	108ee404 	addi	r2,r2,15248
   113cc:	e0bffe15 	stw	r2,-8(fp)
    pgrp2 = &OSFlagTbl[1];
   113d0:	008000b4 	movhi	r2,2
   113d4:	108eef04 	addi	r2,r2,15292
   113d8:	e0bfff15 	stw	r2,-4(fp)
    for (i = 0; i < (OS_MAX_FLAGS - 1); i++) {                      /* Init. list of free EVENT FLAGS  */
   113dc:	e03ffd0d 	sth	zero,-12(fp)
   113e0:	00001306 	br	11430 <OS_FlagInit+0x8c>
        pgrp1->OSFlagType     = OS_EVENT_TYPE_UNUSED;
   113e4:	e0bffe17 	ldw	r2,-8(fp)
   113e8:	10000005 	stb	zero,0(r2)
        pgrp1->OSFlagWaitList = (void *)pgrp2;
   113ec:	e0bffe17 	ldw	r2,-8(fp)
   113f0:	e0ffff17 	ldw	r3,-4(fp)
   113f4:	10c00115 	stw	r3,4(r2)
#if OS_FLAG_NAME_SIZE > 1
        pgrp1->OSFlagName[0]  = '?';                                /* Unknown name                    */
   113f8:	e0bffe17 	ldw	r2,-8(fp)
   113fc:	00c00fc4 	movi	r3,63
   11400:	10c00285 	stb	r3,10(r2)
        pgrp1->OSFlagName[1]  = OS_ASCII_NUL;
   11404:	e0bffe17 	ldw	r2,-8(fp)
   11408:	100002c5 	stb	zero,11(r2)
#endif
        pgrp1++;
   1140c:	e0bffe17 	ldw	r2,-8(fp)
   11410:	10800b04 	addi	r2,r2,44
   11414:	e0bffe15 	stw	r2,-8(fp)
        pgrp2++;
   11418:	e0bfff17 	ldw	r2,-4(fp)
   1141c:	10800b04 	addi	r2,r2,44
   11420:	e0bfff15 	stw	r2,-4(fp)


    OS_MemClr((INT8U *)&OSFlagTbl[0], sizeof(OSFlagTbl));           /* Clear the flag group table      */
    pgrp1 = &OSFlagTbl[0];
    pgrp2 = &OSFlagTbl[1];
    for (i = 0; i < (OS_MAX_FLAGS - 1); i++) {                      /* Init. list of free EVENT FLAGS  */
   11424:	e0bffd0b 	ldhu	r2,-12(fp)
   11428:	10800044 	addi	r2,r2,1
   1142c:	e0bffd0d 	sth	r2,-12(fp)
   11430:	e0bffd0b 	ldhu	r2,-12(fp)
   11434:	108004f0 	cmpltui	r2,r2,19
   11438:	103fea1e 	bne	r2,zero,113e4 <__alt_mem_Flash_flash_data+0xf40113e4>
        pgrp1->OSFlagName[1]  = OS_ASCII_NUL;
#endif
        pgrp1++;
        pgrp2++;
    }
    pgrp1->OSFlagType     = OS_EVENT_TYPE_UNUSED;
   1143c:	e0bffe17 	ldw	r2,-8(fp)
   11440:	10000005 	stb	zero,0(r2)
    pgrp1->OSFlagWaitList = (void *)0;
   11444:	e0bffe17 	ldw	r2,-8(fp)
   11448:	10000115 	stw	zero,4(r2)
#if OS_FLAG_NAME_SIZE > 1
    pgrp1->OSFlagName[0]  = '?';                                    /* Unknown name                    */
   1144c:	e0bffe17 	ldw	r2,-8(fp)
   11450:	00c00fc4 	movi	r3,63
   11454:	10c00285 	stb	r3,10(r2)
    pgrp1->OSFlagName[1]  = OS_ASCII_NUL;
   11458:	e0bffe17 	ldw	r2,-8(fp)
   1145c:	100002c5 	stb	zero,11(r2)
#endif
    OSFlagFreeList        = &OSFlagTbl[0];
   11460:	008000b4 	movhi	r2,2
   11464:	10b6d304 	addi	r2,r2,-9396
   11468:	00c000b4 	movhi	r3,2
   1146c:	18cee404 	addi	r3,r3,15248
   11470:	10c00015 	stw	r3,0(r2)
#endif
}
   11474:	e037883a 	mov	sp,fp
   11478:	dfc00117 	ldw	ra,4(sp)
   1147c:	df000017 	ldw	fp,0(sp)
   11480:	dec00204 	addi	sp,sp,8
   11484:	f800283a 	ret

00011488 <OS_FlagTaskRdy>:
*              2) This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

static  BOOLEAN  OS_FlagTaskRdy (OS_FLAG_NODE *pnode, OS_FLAGS flags_rdy)
{
   11488:	defffa04 	addi	sp,sp,-24
   1148c:	dfc00515 	stw	ra,20(sp)
   11490:	df000415 	stw	fp,16(sp)
   11494:	df000404 	addi	fp,sp,16
   11498:	e13ffe15 	stw	r4,-8(fp)
   1149c:	2805883a 	mov	r2,r5
   114a0:	e0bfff0d 	sth	r2,-4(fp)
    OS_TCB   *ptcb;
    BOOLEAN   sched;


    ptcb                 = (OS_TCB *)pnode->OSFlagNodeTCB; /* Point to TCB of waiting task             */
   114a4:	e0bffe17 	ldw	r2,-8(fp)
   114a8:	10800217 	ldw	r2,8(r2)
   114ac:	e0bffd15 	stw	r2,-12(fp)
    ptcb->OSTCBDly       = 0;
   114b0:	e0bffd17 	ldw	r2,-12(fp)
   114b4:	10000b8d 	sth	zero,46(r2)
    ptcb->OSTCBFlagsRdy  = flags_rdy;
   114b8:	e0bffd17 	ldw	r2,-12(fp)
   114bc:	e0ffff0b 	ldhu	r3,-4(fp)
   114c0:	10c00b0d 	sth	r3,44(r2)
    ptcb->OSTCBStat     &= ~(INT8U)OS_STAT_FLAG;
   114c4:	e0bffd17 	ldw	r2,-12(fp)
   114c8:	10c00c03 	ldbu	r3,48(r2)
   114cc:	00bff7c4 	movi	r2,-33
   114d0:	1884703a 	and	r2,r3,r2
   114d4:	1007883a 	mov	r3,r2
   114d8:	e0bffd17 	ldw	r2,-12(fp)
   114dc:	10c00c05 	stb	r3,48(r2)
    ptcb->OSTCBStatPend  = OS_STAT_PEND_OK;
   114e0:	e0bffd17 	ldw	r2,-12(fp)
   114e4:	10000c45 	stb	zero,49(r2)
    if (ptcb->OSTCBStat == OS_STAT_RDY) {                  /* Task now ready?                          */
   114e8:	e0bffd17 	ldw	r2,-12(fp)
   114ec:	10800c03 	ldbu	r2,48(r2)
   114f0:	10803fcc 	andi	r2,r2,255
   114f4:	10001f1e 	bne	r2,zero,11574 <OS_FlagTaskRdy+0xec>
        OSRdyGrp               |= ptcb->OSTCBBitY;         /* Put task into ready list                 */
   114f8:	e0bffd17 	ldw	r2,-12(fp)
   114fc:	10c00d83 	ldbu	r3,54(r2)
   11500:	008000b4 	movhi	r2,2
   11504:	10b6ce04 	addi	r2,r2,-9416
   11508:	10800003 	ldbu	r2,0(r2)
   1150c:	1884b03a 	or	r2,r3,r2
   11510:	1007883a 	mov	r3,r2
   11514:	008000b4 	movhi	r2,2
   11518:	10b6ce04 	addi	r2,r2,-9416
   1151c:	10c00005 	stb	r3,0(r2)
        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
   11520:	e0bffd17 	ldw	r2,-12(fp)
   11524:	10800d03 	ldbu	r2,52(r2)
   11528:	10c03fcc 	andi	r3,r2,255
   1152c:	e0bffd17 	ldw	r2,-12(fp)
   11530:	10800d03 	ldbu	r2,52(r2)
   11534:	11003fcc 	andi	r4,r2,255
   11538:	008000b4 	movhi	r2,2
   1153c:	10b6ce44 	addi	r2,r2,-9415
   11540:	1105883a 	add	r2,r2,r4
   11544:	11000003 	ldbu	r4,0(r2)
   11548:	e0bffd17 	ldw	r2,-12(fp)
   1154c:	10800d43 	ldbu	r2,53(r2)
   11550:	2084b03a 	or	r2,r4,r2
   11554:	1009883a 	mov	r4,r2
   11558:	008000b4 	movhi	r2,2
   1155c:	10b6ce44 	addi	r2,r2,-9415
   11560:	10c5883a 	add	r2,r2,r3
   11564:	11000005 	stb	r4,0(r2)
        sched                   = OS_TRUE;
   11568:	00800044 	movi	r2,1
   1156c:	e0bffc05 	stb	r2,-16(fp)
   11570:	00000106 	br	11578 <OS_FlagTaskRdy+0xf0>
    } else {
        sched                   = OS_FALSE;
   11574:	e03ffc05 	stb	zero,-16(fp)
    }
    OS_FlagUnlink(pnode);
   11578:	e13ffe17 	ldw	r4,-8(fp)
   1157c:	00115980 	call	11598 <OS_FlagUnlink>
    return (sched);
   11580:	e0bffc03 	ldbu	r2,-16(fp)
}
   11584:	e037883a 	mov	sp,fp
   11588:	dfc00117 	ldw	ra,4(sp)
   1158c:	df000017 	ldw	fp,0(sp)
   11590:	dec00204 	addi	sp,sp,8
   11594:	f800283a 	ret

00011598 <OS_FlagUnlink>:
*              2) This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

void  OS_FlagUnlink (OS_FLAG_NODE *pnode)
{
   11598:	defffa04 	addi	sp,sp,-24
   1159c:	df000515 	stw	fp,20(sp)
   115a0:	df000504 	addi	fp,sp,20
   115a4:	e13fff15 	stw	r4,-4(fp)
    OS_FLAG_GRP  *pgrp;
    OS_FLAG_NODE *pnode_prev;
    OS_FLAG_NODE *pnode_next;


    pnode_prev = (OS_FLAG_NODE *)pnode->OSFlagNodePrev;
   115a8:	e0bfff17 	ldw	r2,-4(fp)
   115ac:	10800117 	ldw	r2,4(r2)
   115b0:	e0bffb15 	stw	r2,-20(fp)
    pnode_next = (OS_FLAG_NODE *)pnode->OSFlagNodeNext;
   115b4:	e0bfff17 	ldw	r2,-4(fp)
   115b8:	10800017 	ldw	r2,0(r2)
   115bc:	e0bffc15 	stw	r2,-16(fp)
    if (pnode_prev == (OS_FLAG_NODE *)0) {                      /* Is it first node in wait list?      */
   115c0:	e0bffb17 	ldw	r2,-20(fp)
   115c4:	10000b1e 	bne	r2,zero,115f4 <OS_FlagUnlink+0x5c>
        pgrp                 = (OS_FLAG_GRP *)pnode->OSFlagNodeFlagGrp;
   115c8:	e0bfff17 	ldw	r2,-4(fp)
   115cc:	10800317 	ldw	r2,12(r2)
   115d0:	e0bffd15 	stw	r2,-12(fp)
        pgrp->OSFlagWaitList = (void *)pnode_next;              /*      Update list for new 1st node   */
   115d4:	e0bffd17 	ldw	r2,-12(fp)
   115d8:	e0fffc17 	ldw	r3,-16(fp)
   115dc:	10c00115 	stw	r3,4(r2)
        if (pnode_next != (OS_FLAG_NODE *)0) {
   115e0:	e0bffc17 	ldw	r2,-16(fp)
   115e4:	10000b26 	beq	r2,zero,11614 <OS_FlagUnlink+0x7c>
            pnode_next->OSFlagNodePrev = (OS_FLAG_NODE *)0;     /*      Link new 1st node PREV to NULL */
   115e8:	e0bffc17 	ldw	r2,-16(fp)
   115ec:	10000115 	stw	zero,4(r2)
   115f0:	00000806 	br	11614 <OS_FlagUnlink+0x7c>
        }
    } else {                                                    /* No,  A node somewhere in the list   */
        pnode_prev->OSFlagNodeNext = pnode_next;                /*      Link around the node to unlink */
   115f4:	e0bffb17 	ldw	r2,-20(fp)
   115f8:	e0fffc17 	ldw	r3,-16(fp)
   115fc:	10c00015 	stw	r3,0(r2)
        if (pnode_next != (OS_FLAG_NODE *)0) {                  /*      Was this the LAST node?        */
   11600:	e0bffc17 	ldw	r2,-16(fp)
   11604:	10000326 	beq	r2,zero,11614 <OS_FlagUnlink+0x7c>
            pnode_next->OSFlagNodePrev = pnode_prev;            /*      No, Link around current node   */
   11608:	e0bffc17 	ldw	r2,-16(fp)
   1160c:	e0fffb17 	ldw	r3,-20(fp)
   11610:	10c00115 	stw	r3,4(r2)
        }
    }
#if OS_TASK_DEL_EN > 0
    ptcb                = (OS_TCB *)pnode->OSFlagNodeTCB;
   11614:	e0bfff17 	ldw	r2,-4(fp)
   11618:	10800217 	ldw	r2,8(r2)
   1161c:	e0bffe15 	stw	r2,-8(fp)
    ptcb->OSTCBFlagNode = (OS_FLAG_NODE *)0;
   11620:	e0bffe17 	ldw	r2,-8(fp)
   11624:	10000a15 	stw	zero,40(r2)
#endif
}
   11628:	e037883a 	mov	sp,fp
   1162c:	df000017 	ldw	fp,0(sp)
   11630:	dec00104 	addi	sp,sp,4
   11634:	f800283a 	ret

00011638 <OSMemCreate>:
*                              free partition is available.
*********************************************************************************************************
*/

OS_MEM  *OSMemCreate (void *addr, INT32U nblks, INT32U blksize, INT8U *perr)
{
   11638:	defff404 	addi	sp,sp,-48
   1163c:	df000b15 	stw	fp,44(sp)
   11640:	df000b04 	addi	fp,sp,44
   11644:	e13ffc15 	stw	r4,-16(fp)
   11648:	e17ffd15 	stw	r5,-12(fp)
   1164c:	e1bffe15 	stw	r6,-8(fp)
   11650:	e1ffff15 	stw	r7,-4(fp)
    OS_MEM    *pmem;
    INT8U     *pblk;
    void     **plink;
    INT32U     i;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   11654:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0              
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
   11658:	e0bfff17 	ldw	r2,-4(fp)
   1165c:	1000021e 	bne	r2,zero,11668 <OSMemCreate+0x30>
        return ((OS_MEM *)0);
   11660:	0005883a 	mov	r2,zero
   11664:	00006d06 	br	1181c <OSMemCreate+0x1e4>
    }
    if (addr == (void *)0) {                          /* Must pass a valid address for the memory part.*/
   11668:	e0bffc17 	ldw	r2,-16(fp)
   1166c:	1000051e 	bne	r2,zero,11684 <OSMemCreate+0x4c>
        *perr = OS_ERR_MEM_INVALID_ADDR;
   11670:	e0bfff17 	ldw	r2,-4(fp)
   11674:	00c01884 	movi	r3,98
   11678:	10c00005 	stb	r3,0(r2)
        return ((OS_MEM *)0);
   1167c:	0005883a 	mov	r2,zero
   11680:	00006606 	br	1181c <OSMemCreate+0x1e4>
    }
    if (((INT32U)addr & (sizeof(void *) - 1)) != 0){  /* Must be pointer size aligned                  */
   11684:	e0bffc17 	ldw	r2,-16(fp)
   11688:	108000cc 	andi	r2,r2,3
   1168c:	10000526 	beq	r2,zero,116a4 <OSMemCreate+0x6c>
        *perr = OS_ERR_MEM_INVALID_ADDR;
   11690:	e0bfff17 	ldw	r2,-4(fp)
   11694:	00c01884 	movi	r3,98
   11698:	10c00005 	stb	r3,0(r2)
        return ((OS_MEM *)0);
   1169c:	0005883a 	mov	r2,zero
   116a0:	00005e06 	br	1181c <OSMemCreate+0x1e4>
    }
    if (nblks < 2) {                                  /* Must have at least 2 blocks per partition     */
   116a4:	e0bffd17 	ldw	r2,-12(fp)
   116a8:	108000a8 	cmpgeui	r2,r2,2
   116ac:	1000051e 	bne	r2,zero,116c4 <OSMemCreate+0x8c>
        *perr = OS_ERR_MEM_INVALID_BLKS;
   116b0:	e0bfff17 	ldw	r2,-4(fp)
   116b4:	00c016c4 	movi	r3,91
   116b8:	10c00005 	stb	r3,0(r2)
        return ((OS_MEM *)0);
   116bc:	0005883a 	mov	r2,zero
   116c0:	00005606 	br	1181c <OSMemCreate+0x1e4>
    }
    if (blksize < sizeof(void *)) {                   /* Must contain space for at least a pointer     */
   116c4:	e0bffe17 	ldw	r2,-8(fp)
   116c8:	10800128 	cmpgeui	r2,r2,4
   116cc:	1000051e 	bne	r2,zero,116e4 <OSMemCreate+0xac>
        *perr = OS_ERR_MEM_INVALID_SIZE;
   116d0:	e0bfff17 	ldw	r2,-4(fp)
   116d4:	00c01704 	movi	r3,92
   116d8:	10c00005 	stb	r3,0(r2)
        return ((OS_MEM *)0);
   116dc:	0005883a 	mov	r2,zero
   116e0:	00004e06 	br	1181c <OSMemCreate+0x1e4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   116e4:	0005303a 	rdctl	r2,status
   116e8:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   116ec:	e0fffa17 	ldw	r3,-24(fp)
   116f0:	00bfff84 	movi	r2,-2
   116f4:	1884703a 	and	r2,r3,r2
   116f8:	1001703a 	wrctl	status,r2
  
  return context;
   116fc:	e0bffa17 	ldw	r2,-24(fp)
    }
#endif
    OS_ENTER_CRITICAL();
   11700:	e0bff815 	stw	r2,-32(fp)
    pmem = OSMemFreeList;                             /* Get next free memory partition                */
   11704:	008000b4 	movhi	r2,2
   11708:	10b6cb04 	addi	r2,r2,-9428
   1170c:	10800017 	ldw	r2,0(r2)
   11710:	e0bff915 	stw	r2,-28(fp)
    if (OSMemFreeList != (OS_MEM *)0) {               /* See if pool of free partitions was empty      */
   11714:	008000b4 	movhi	r2,2
   11718:	10b6cb04 	addi	r2,r2,-9428
   1171c:	10800017 	ldw	r2,0(r2)
   11720:	10000726 	beq	r2,zero,11740 <OSMemCreate+0x108>
        OSMemFreeList = (OS_MEM *)OSMemFreeList->OSMemFreeList;
   11724:	008000b4 	movhi	r2,2
   11728:	10b6cb04 	addi	r2,r2,-9428
   1172c:	10800017 	ldw	r2,0(r2)
   11730:	10c00117 	ldw	r3,4(r2)
   11734:	008000b4 	movhi	r2,2
   11738:	10b6cb04 	addi	r2,r2,-9428
   1173c:	10c00015 	stw	r3,0(r2)
   11740:	e0bff817 	ldw	r2,-32(fp)
   11744:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   11748:	e0bffb17 	ldw	r2,-20(fp)
   1174c:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    if (pmem == (OS_MEM *)0) {                        /* See if we have a memory partition             */
   11750:	e0bff917 	ldw	r2,-28(fp)
   11754:	1000051e 	bne	r2,zero,1176c <OSMemCreate+0x134>
        *perr = OS_ERR_MEM_INVALID_PART;
   11758:	e0bfff17 	ldw	r2,-4(fp)
   1175c:	00c01684 	movi	r3,90
   11760:	10c00005 	stb	r3,0(r2)
        return ((OS_MEM *)0);
   11764:	0005883a 	mov	r2,zero
   11768:	00002c06 	br	1181c <OSMemCreate+0x1e4>
    }
    plink = (void **)addr;                            /* Create linked list of free memory blocks      */
   1176c:	e0bffc17 	ldw	r2,-16(fp)
   11770:	e0bff615 	stw	r2,-40(fp)
    pblk  = (INT8U *)((INT32U)addr + blksize);
   11774:	e0fffc17 	ldw	r3,-16(fp)
   11778:	e0bffe17 	ldw	r2,-8(fp)
   1177c:	1885883a 	add	r2,r3,r2
   11780:	e0bff515 	stw	r2,-44(fp)
    for (i = 0; i < (nblks - 1); i++) {
   11784:	e03ff715 	stw	zero,-36(fp)
   11788:	00000c06 	br	117bc <OSMemCreate+0x184>
       *plink = (void *)pblk;                         /* Save pointer to NEXT block in CURRENT block   */
   1178c:	e0bff617 	ldw	r2,-40(fp)
   11790:	e0fff517 	ldw	r3,-44(fp)
   11794:	10c00015 	stw	r3,0(r2)
        plink = (void **)pblk;                        /* Position to  NEXT      block                  */
   11798:	e0bff517 	ldw	r2,-44(fp)
   1179c:	e0bff615 	stw	r2,-40(fp)
        pblk  = (INT8U *)((INT32U)pblk + blksize);    /* Point to the FOLLOWING block                  */
   117a0:	e0fff517 	ldw	r3,-44(fp)
   117a4:	e0bffe17 	ldw	r2,-8(fp)
   117a8:	1885883a 	add	r2,r3,r2
   117ac:	e0bff515 	stw	r2,-44(fp)
        *perr = OS_ERR_MEM_INVALID_PART;
        return ((OS_MEM *)0);
    }
    plink = (void **)addr;                            /* Create linked list of free memory blocks      */
    pblk  = (INT8U *)((INT32U)addr + blksize);
    for (i = 0; i < (nblks - 1); i++) {
   117b0:	e0bff717 	ldw	r2,-36(fp)
   117b4:	10800044 	addi	r2,r2,1
   117b8:	e0bff715 	stw	r2,-36(fp)
   117bc:	e0bffd17 	ldw	r2,-12(fp)
   117c0:	10bfffc4 	addi	r2,r2,-1
   117c4:	e0fff717 	ldw	r3,-36(fp)
   117c8:	18bff036 	bltu	r3,r2,1178c <__alt_mem_Flash_flash_data+0xf401178c>
       *plink = (void *)pblk;                         /* Save pointer to NEXT block in CURRENT block   */
        plink = (void **)pblk;                        /* Position to  NEXT      block                  */
        pblk  = (INT8U *)((INT32U)pblk + blksize);    /* Point to the FOLLOWING block                  */
    }
    *plink              = (void *)0;                  /* Last memory block points to NULL              */
   117cc:	e0bff617 	ldw	r2,-40(fp)
   117d0:	10000015 	stw	zero,0(r2)
    pmem->OSMemAddr     = addr;                       /* Store start address of memory partition       */
   117d4:	e0bff917 	ldw	r2,-28(fp)
   117d8:	e0fffc17 	ldw	r3,-16(fp)
   117dc:	10c00015 	stw	r3,0(r2)
    pmem->OSMemFreeList = addr;                       /* Initialize pointer to pool of free blocks     */
   117e0:	e0bff917 	ldw	r2,-28(fp)
   117e4:	e0fffc17 	ldw	r3,-16(fp)
   117e8:	10c00115 	stw	r3,4(r2)
    pmem->OSMemNFree    = nblks;                      /* Store number of free blocks in MCB            */
   117ec:	e0bff917 	ldw	r2,-28(fp)
   117f0:	e0fffd17 	ldw	r3,-12(fp)
   117f4:	10c00415 	stw	r3,16(r2)
    pmem->OSMemNBlks    = nblks;
   117f8:	e0bff917 	ldw	r2,-28(fp)
   117fc:	e0fffd17 	ldw	r3,-12(fp)
   11800:	10c00315 	stw	r3,12(r2)
    pmem->OSMemBlkSize  = blksize;                    /* Store block size of each memory blocks        */
   11804:	e0bff917 	ldw	r2,-28(fp)
   11808:	e0fffe17 	ldw	r3,-8(fp)
   1180c:	10c00215 	stw	r3,8(r2)
    *perr               = OS_ERR_NONE;
   11810:	e0bfff17 	ldw	r2,-4(fp)
   11814:	10000005 	stb	zero,0(r2)
    return (pmem);
   11818:	e0bff917 	ldw	r2,-28(fp)
}
   1181c:	e037883a 	mov	sp,fp
   11820:	df000017 	ldw	fp,0(sp)
   11824:	dec00104 	addi	sp,sp,4
   11828:	f800283a 	ret

0001182c <OSMemGet>:
*               A pointer to NULL if an error is detected
*********************************************************************************************************
*/

void  *OSMemGet (OS_MEM *pmem, INT8U *perr)
{
   1182c:	defff804 	addi	sp,sp,-32
   11830:	df000715 	stw	fp,28(sp)
   11834:	df000704 	addi	fp,sp,28
   11838:	e13ffe15 	stw	r4,-8(fp)
   1183c:	e17fff15 	stw	r5,-4(fp)
    void      *pblk;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   11840:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
   11844:	e0bfff17 	ldw	r2,-4(fp)
   11848:	1000021e 	bne	r2,zero,11854 <OSMemGet+0x28>
        return ((void *)0);
   1184c:	0005883a 	mov	r2,zero
   11850:	00002e06 	br	1190c <OSMemGet+0xe0>
    }
    if (pmem == (OS_MEM *)0) {                        /* Must point to a valid memory partition        */
   11854:	e0bffe17 	ldw	r2,-8(fp)
   11858:	1000051e 	bne	r2,zero,11870 <OSMemGet+0x44>
        *perr = OS_ERR_MEM_INVALID_PMEM;
   1185c:	e0bfff17 	ldw	r2,-4(fp)
   11860:	00c01804 	movi	r3,96
   11864:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
   11868:	0005883a 	mov	r2,zero
   1186c:	00002706 	br	1190c <OSMemGet+0xe0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   11870:	0005303a 	rdctl	r2,status
   11874:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   11878:	e0fffb17 	ldw	r3,-20(fp)
   1187c:	00bfff84 	movi	r2,-2
   11880:	1884703a 	and	r2,r3,r2
   11884:	1001703a 	wrctl	status,r2
  
  return context;
   11888:	e0bffb17 	ldw	r2,-20(fp)
    }
#endif
    OS_ENTER_CRITICAL();
   1188c:	e0bff915 	stw	r2,-28(fp)
    if (pmem->OSMemNFree > 0) {                       /* See if there are any free memory blocks       */
   11890:	e0bffe17 	ldw	r2,-8(fp)
   11894:	10800417 	ldw	r2,16(r2)
   11898:	10001426 	beq	r2,zero,118ec <OSMemGet+0xc0>
        pblk                = pmem->OSMemFreeList;    /* Yes, point to next free memory block          */
   1189c:	e0bffe17 	ldw	r2,-8(fp)
   118a0:	10800117 	ldw	r2,4(r2)
   118a4:	e0bffa15 	stw	r2,-24(fp)
        pmem->OSMemFreeList = *(void **)pblk;         /*      Adjust pointer to new free list          */
   118a8:	e0bffa17 	ldw	r2,-24(fp)
   118ac:	10c00017 	ldw	r3,0(r2)
   118b0:	e0bffe17 	ldw	r2,-8(fp)
   118b4:	10c00115 	stw	r3,4(r2)
        pmem->OSMemNFree--;                           /*      One less memory block in this partition  */
   118b8:	e0bffe17 	ldw	r2,-8(fp)
   118bc:	10800417 	ldw	r2,16(r2)
   118c0:	10ffffc4 	addi	r3,r2,-1
   118c4:	e0bffe17 	ldw	r2,-8(fp)
   118c8:	10c00415 	stw	r3,16(r2)
   118cc:	e0bff917 	ldw	r2,-28(fp)
   118d0:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   118d4:	e0bffc17 	ldw	r2,-16(fp)
   118d8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_NONE;                          /*      No error                                 */
   118dc:	e0bfff17 	ldw	r2,-4(fp)
   118e0:	10000005 	stb	zero,0(r2)
        return (pblk);                                /*      Return memory block to caller            */
   118e4:	e0bffa17 	ldw	r2,-24(fp)
   118e8:	00000806 	br	1190c <OSMemGet+0xe0>
   118ec:	e0bff917 	ldw	r2,-28(fp)
   118f0:	e0bffd15 	stw	r2,-12(fp)
   118f4:	e0bffd17 	ldw	r2,-12(fp)
   118f8:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_MEM_NO_FREE_BLKS;                  /* No,  Notify caller of empty memory partition  */
   118fc:	e0bfff17 	ldw	r2,-4(fp)
   11900:	00c01744 	movi	r3,93
   11904:	10c00005 	stb	r3,0(r2)
    return ((void *)0);                               /*      Return NULL pointer to caller            */
   11908:	0005883a 	mov	r2,zero
}
   1190c:	e037883a 	mov	sp,fp
   11910:	df000017 	ldw	fp,0(sp)
   11914:	dec00104 	addi	sp,sp,4
   11918:	f800283a 	ret

0001191c <OSMemNameGet>:
*********************************************************************************************************
*/

#if OS_MEM_NAME_SIZE > 1
INT8U  OSMemNameGet (OS_MEM *pmem, INT8U *pname, INT8U *perr)
{
   1191c:	defff704 	addi	sp,sp,-36
   11920:	dfc00815 	stw	ra,32(sp)
   11924:	df000715 	stw	fp,28(sp)
   11928:	df000704 	addi	fp,sp,28
   1192c:	e13ffd15 	stw	r4,-12(fp)
   11930:	e17ffe15 	stw	r5,-8(fp)
   11934:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   11938:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
   1193c:	e0bfff17 	ldw	r2,-4(fp)
   11940:	1000021e 	bne	r2,zero,1194c <OSMemNameGet+0x30>
        return (0);
   11944:	0005883a 	mov	r2,zero
   11948:	00002d06 	br	11a00 <OSMemNameGet+0xe4>
    }
    if (pmem == (OS_MEM *)0) {                   /* Is 'pmem' a NULL pointer?                          */
   1194c:	e0bffd17 	ldw	r2,-12(fp)
   11950:	1000051e 	bne	r2,zero,11968 <OSMemNameGet+0x4c>
        *perr = OS_ERR_MEM_INVALID_PMEM;
   11954:	e0bfff17 	ldw	r2,-4(fp)
   11958:	00c01804 	movi	r3,96
   1195c:	10c00005 	stb	r3,0(r2)
        return (0);
   11960:	0005883a 	mov	r2,zero
   11964:	00002606 	br	11a00 <OSMemNameGet+0xe4>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
   11968:	e0bffe17 	ldw	r2,-8(fp)
   1196c:	1000051e 	bne	r2,zero,11984 <OSMemNameGet+0x68>
        *perr = OS_ERR_PNAME_NULL;
   11970:	e0bfff17 	ldw	r2,-4(fp)
   11974:	00c00304 	movi	r3,12
   11978:	10c00005 	stb	r3,0(r2)
        return (0);
   1197c:	0005883a 	mov	r2,zero
   11980:	00001f06 	br	11a00 <OSMemNameGet+0xe4>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
   11984:	008000b4 	movhi	r2,2
   11988:	10b6d004 	addi	r2,r2,-9408
   1198c:	10800003 	ldbu	r2,0(r2)
   11990:	10803fcc 	andi	r2,r2,255
   11994:	10000526 	beq	r2,zero,119ac <OSMemNameGet+0x90>
        *perr = OS_ERR_NAME_GET_ISR;
   11998:	e0bfff17 	ldw	r2,-4(fp)
   1199c:	00c00444 	movi	r3,17
   119a0:	10c00005 	stb	r3,0(r2)
        return (0);
   119a4:	0005883a 	mov	r2,zero
   119a8:	00001506 	br	11a00 <OSMemNameGet+0xe4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   119ac:	0005303a 	rdctl	r2,status
   119b0:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   119b4:	e0fffb17 	ldw	r3,-20(fp)
   119b8:	00bfff84 	movi	r2,-2
   119bc:	1884703a 	and	r2,r3,r2
   119c0:	1001703a 	wrctl	status,r2
  
  return context;
   119c4:	e0bffb17 	ldw	r2,-20(fp)
    }
    OS_ENTER_CRITICAL();
   119c8:	e0bff915 	stw	r2,-28(fp)
    len   = OS_StrCopy(pname, pmem->OSMemName);  /* Copy name from OS_MEM                              */
   119cc:	e0bffd17 	ldw	r2,-12(fp)
   119d0:	10800504 	addi	r2,r2,20
   119d4:	e13ffe17 	ldw	r4,-8(fp)
   119d8:	100b883a 	mov	r5,r2
   119dc:	000f6f40 	call	f6f4 <OS_StrCopy>
   119e0:	e0bffa05 	stb	r2,-24(fp)
   119e4:	e0bff917 	ldw	r2,-28(fp)
   119e8:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   119ec:	e0bffc17 	ldw	r2,-16(fp)
   119f0:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
   119f4:	e0bfff17 	ldw	r2,-4(fp)
   119f8:	10000005 	stb	zero,0(r2)
    return (len);
   119fc:	e0bffa03 	ldbu	r2,-24(fp)
}
   11a00:	e037883a 	mov	sp,fp
   11a04:	dfc00117 	ldw	ra,4(sp)
   11a08:	df000017 	ldw	fp,0(sp)
   11a0c:	dec00204 	addi	sp,sp,8
   11a10:	f800283a 	ret

00011a14 <OSMemNameSet>:
*********************************************************************************************************
*/

#if OS_MEM_NAME_SIZE > 1
void  OSMemNameSet (OS_MEM *pmem, INT8U *pname, INT8U *perr)
{
   11a14:	defff604 	addi	sp,sp,-40
   11a18:	dfc00915 	stw	ra,36(sp)
   11a1c:	df000815 	stw	fp,32(sp)
   11a20:	df000804 	addi	fp,sp,32
   11a24:	e13ffd15 	stw	r4,-12(fp)
   11a28:	e17ffe15 	stw	r5,-8(fp)
   11a2c:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   11a30:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
   11a34:	e0bfff17 	ldw	r2,-4(fp)
   11a38:	1000011e 	bne	r2,zero,11a40 <OSMemNameSet+0x2c>
        return;
   11a3c:	00003606 	br	11b18 <OSMemNameSet+0x104>
    }
    if (pmem == (OS_MEM *)0) {                   /* Is 'pmem' a NULL pointer?                          */
   11a40:	e0bffd17 	ldw	r2,-12(fp)
   11a44:	1000041e 	bne	r2,zero,11a58 <OSMemNameSet+0x44>
        *perr = OS_ERR_MEM_INVALID_PMEM;
   11a48:	e0bfff17 	ldw	r2,-4(fp)
   11a4c:	00c01804 	movi	r3,96
   11a50:	10c00005 	stb	r3,0(r2)
        return;
   11a54:	00003006 	br	11b18 <OSMemNameSet+0x104>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
   11a58:	e0bffe17 	ldw	r2,-8(fp)
   11a5c:	1000041e 	bne	r2,zero,11a70 <OSMemNameSet+0x5c>
        *perr = OS_ERR_PNAME_NULL;
   11a60:	e0bfff17 	ldw	r2,-4(fp)
   11a64:	00c00304 	movi	r3,12
   11a68:	10c00005 	stb	r3,0(r2)
        return;
   11a6c:	00002a06 	br	11b18 <OSMemNameSet+0x104>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
   11a70:	008000b4 	movhi	r2,2
   11a74:	10b6d004 	addi	r2,r2,-9408
   11a78:	10800003 	ldbu	r2,0(r2)
   11a7c:	10803fcc 	andi	r2,r2,255
   11a80:	10000426 	beq	r2,zero,11a94 <OSMemNameSet+0x80>
        *perr = OS_ERR_NAME_SET_ISR;
   11a84:	e0bfff17 	ldw	r2,-4(fp)
   11a88:	00c00484 	movi	r3,18
   11a8c:	10c00005 	stb	r3,0(r2)
        return;
   11a90:	00002106 	br	11b18 <OSMemNameSet+0x104>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   11a94:	0005303a 	rdctl	r2,status
   11a98:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   11a9c:	e0fffa17 	ldw	r3,-24(fp)
   11aa0:	00bfff84 	movi	r2,-2
   11aa4:	1884703a 	and	r2,r3,r2
   11aa8:	1001703a 	wrctl	status,r2
  
  return context;
   11aac:	e0bffa17 	ldw	r2,-24(fp)
    }
    OS_ENTER_CRITICAL();
   11ab0:	e0bff815 	stw	r2,-32(fp)
    len = OS_StrLen(pname);                      /* Can we fit the string in the storage area?         */
   11ab4:	e13ffe17 	ldw	r4,-8(fp)
   11ab8:	000f7680 	call	f768 <OS_StrLen>
   11abc:	e0bff905 	stb	r2,-28(fp)
    if (len > (OS_MEM_NAME_SIZE - 1)) {          /* No                                                 */
   11ac0:	e0bff903 	ldbu	r2,-28(fp)
   11ac4:	10800830 	cmpltui	r2,r2,32
   11ac8:	1000081e 	bne	r2,zero,11aec <OSMemNameSet+0xd8>
   11acc:	e0bff817 	ldw	r2,-32(fp)
   11ad0:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   11ad4:	e0bffb17 	ldw	r2,-20(fp)
   11ad8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_MEM_NAME_TOO_LONG;
   11adc:	e0bfff17 	ldw	r2,-4(fp)
   11ae0:	00c018c4 	movi	r3,99
   11ae4:	10c00005 	stb	r3,0(r2)
        return;
   11ae8:	00000b06 	br	11b18 <OSMemNameSet+0x104>
    }
    (void)OS_StrCopy(pmem->OSMemName, pname);    /* Yes, copy name to the memory partition header      */
   11aec:	e0bffd17 	ldw	r2,-12(fp)
   11af0:	10800504 	addi	r2,r2,20
   11af4:	1009883a 	mov	r4,r2
   11af8:	e17ffe17 	ldw	r5,-8(fp)
   11afc:	000f6f40 	call	f6f4 <OS_StrCopy>
   11b00:	e0bff817 	ldw	r2,-32(fp)
   11b04:	e0bffc15 	stw	r2,-16(fp)
   11b08:	e0bffc17 	ldw	r2,-16(fp)
   11b0c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
   11b10:	e0bfff17 	ldw	r2,-4(fp)
   11b14:	10000005 	stb	zero,0(r2)
}
   11b18:	e037883a 	mov	sp,fp
   11b1c:	dfc00117 	ldw	ra,4(sp)
   11b20:	df000017 	ldw	fp,0(sp)
   11b24:	dec00204 	addi	sp,sp,8
   11b28:	f800283a 	ret

00011b2c <OSMemPut>:
*               OS_ERR_MEM_INVALID_PBLK  if you passed a NULL pointer for the block to release.
*********************************************************************************************************
*/

INT8U  OSMemPut (OS_MEM *pmem, void *pblk)
{
   11b2c:	defff904 	addi	sp,sp,-28
   11b30:	df000615 	stw	fp,24(sp)
   11b34:	df000604 	addi	fp,sp,24
   11b38:	e13ffe15 	stw	r4,-8(fp)
   11b3c:	e17fff15 	stw	r5,-4(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   11b40:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pmem == (OS_MEM *)0) {                   /* Must point to a valid memory partition             */
   11b44:	e0bffe17 	ldw	r2,-8(fp)
   11b48:	1000021e 	bne	r2,zero,11b54 <OSMemPut+0x28>
        return (OS_ERR_MEM_INVALID_PMEM);
   11b4c:	00801804 	movi	r2,96
   11b50:	00002806 	br	11bf4 <OSMemPut+0xc8>
    }
    if (pblk == (void *)0) {                     /* Must release a valid block                         */
   11b54:	e0bfff17 	ldw	r2,-4(fp)
   11b58:	1000021e 	bne	r2,zero,11b64 <OSMemPut+0x38>
        return (OS_ERR_MEM_INVALID_PBLK);
   11b5c:	008017c4 	movi	r2,95
   11b60:	00002406 	br	11bf4 <OSMemPut+0xc8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   11b64:	0005303a 	rdctl	r2,status
   11b68:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   11b6c:	e0fffb17 	ldw	r3,-20(fp)
   11b70:	00bfff84 	movi	r2,-2
   11b74:	1884703a 	and	r2,r3,r2
   11b78:	1001703a 	wrctl	status,r2
  
  return context;
   11b7c:	e0bffb17 	ldw	r2,-20(fp)
    }
#endif
    OS_ENTER_CRITICAL();
   11b80:	e0bffa15 	stw	r2,-24(fp)
    if (pmem->OSMemNFree >= pmem->OSMemNBlks) {  /* Make sure all blocks not already returned          */
   11b84:	e0bffe17 	ldw	r2,-8(fp)
   11b88:	10c00417 	ldw	r3,16(r2)
   11b8c:	e0bffe17 	ldw	r2,-8(fp)
   11b90:	10800317 	ldw	r2,12(r2)
   11b94:	18800636 	bltu	r3,r2,11bb0 <OSMemPut+0x84>
   11b98:	e0bffa17 	ldw	r2,-24(fp)
   11b9c:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   11ba0:	e0bffc17 	ldw	r2,-16(fp)
   11ba4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_MEM_FULL);
   11ba8:	00801784 	movi	r2,94
   11bac:	00001106 	br	11bf4 <OSMemPut+0xc8>
    }
    *(void **)pblk      = pmem->OSMemFreeList;   /* Insert released block into free block list         */
   11bb0:	e0bffe17 	ldw	r2,-8(fp)
   11bb4:	10c00117 	ldw	r3,4(r2)
   11bb8:	e0bfff17 	ldw	r2,-4(fp)
   11bbc:	10c00015 	stw	r3,0(r2)
    pmem->OSMemFreeList = pblk;
   11bc0:	e0bffe17 	ldw	r2,-8(fp)
   11bc4:	e0ffff17 	ldw	r3,-4(fp)
   11bc8:	10c00115 	stw	r3,4(r2)
    pmem->OSMemNFree++;                          /* One more memory block in this partition            */
   11bcc:	e0bffe17 	ldw	r2,-8(fp)
   11bd0:	10800417 	ldw	r2,16(r2)
   11bd4:	10c00044 	addi	r3,r2,1
   11bd8:	e0bffe17 	ldw	r2,-8(fp)
   11bdc:	10c00415 	stw	r3,16(r2)
   11be0:	e0bffa17 	ldw	r2,-24(fp)
   11be4:	e0bffd15 	stw	r2,-12(fp)
   11be8:	e0bffd17 	ldw	r2,-12(fp)
   11bec:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);                        /* Notify caller that memory block was released       */
   11bf0:	0005883a 	mov	r2,zero
}
   11bf4:	e037883a 	mov	sp,fp
   11bf8:	df000017 	ldw	fp,0(sp)
   11bfc:	dec00104 	addi	sp,sp,4
   11c00:	f800283a 	ret

00011c04 <OSMemQuery>:
*********************************************************************************************************
*/

#if OS_MEM_QUERY_EN > 0
INT8U  OSMemQuery (OS_MEM *pmem, OS_MEM_DATA *p_mem_data)
{
   11c04:	defffa04 	addi	sp,sp,-24
   11c08:	df000515 	stw	fp,20(sp)
   11c0c:	df000504 	addi	fp,sp,20
   11c10:	e13ffe15 	stw	r4,-8(fp)
   11c14:	e17fff15 	stw	r5,-4(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   11c18:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pmem == (OS_MEM *)0) {                   /* Must point to a valid memory partition             */
   11c1c:	e0bffe17 	ldw	r2,-8(fp)
   11c20:	1000021e 	bne	r2,zero,11c2c <OSMemQuery+0x28>
        return (OS_ERR_MEM_INVALID_PMEM);
   11c24:	00801804 	movi	r2,96
   11c28:	00002c06 	br	11cdc <OSMemQuery+0xd8>
    }
    if (p_mem_data == (OS_MEM_DATA *)0) {        /* Must release a valid storage area for the data     */
   11c2c:	e0bfff17 	ldw	r2,-4(fp)
   11c30:	1000021e 	bne	r2,zero,11c3c <OSMemQuery+0x38>
        return (OS_ERR_MEM_INVALID_PDATA);
   11c34:	00801844 	movi	r2,97
   11c38:	00002806 	br	11cdc <OSMemQuery+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   11c3c:	0005303a 	rdctl	r2,status
   11c40:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   11c44:	e0fffc17 	ldw	r3,-16(fp)
   11c48:	00bfff84 	movi	r2,-2
   11c4c:	1884703a 	and	r2,r3,r2
   11c50:	1001703a 	wrctl	status,r2
  
  return context;
   11c54:	e0bffc17 	ldw	r2,-16(fp)
    }
#endif
    OS_ENTER_CRITICAL();
   11c58:	e0bffb15 	stw	r2,-20(fp)
    p_mem_data->OSAddr     = pmem->OSMemAddr;
   11c5c:	e0bffe17 	ldw	r2,-8(fp)
   11c60:	10c00017 	ldw	r3,0(r2)
   11c64:	e0bfff17 	ldw	r2,-4(fp)
   11c68:	10c00015 	stw	r3,0(r2)
    p_mem_data->OSFreeList = pmem->OSMemFreeList;
   11c6c:	e0bffe17 	ldw	r2,-8(fp)
   11c70:	10c00117 	ldw	r3,4(r2)
   11c74:	e0bfff17 	ldw	r2,-4(fp)
   11c78:	10c00115 	stw	r3,4(r2)
    p_mem_data->OSBlkSize  = pmem->OSMemBlkSize;
   11c7c:	e0bffe17 	ldw	r2,-8(fp)
   11c80:	10c00217 	ldw	r3,8(r2)
   11c84:	e0bfff17 	ldw	r2,-4(fp)
   11c88:	10c00215 	stw	r3,8(r2)
    p_mem_data->OSNBlks    = pmem->OSMemNBlks;
   11c8c:	e0bffe17 	ldw	r2,-8(fp)
   11c90:	10c00317 	ldw	r3,12(r2)
   11c94:	e0bfff17 	ldw	r2,-4(fp)
   11c98:	10c00315 	stw	r3,12(r2)
    p_mem_data->OSNFree    = pmem->OSMemNFree;
   11c9c:	e0bffe17 	ldw	r2,-8(fp)
   11ca0:	10c00417 	ldw	r3,16(r2)
   11ca4:	e0bfff17 	ldw	r2,-4(fp)
   11ca8:	10c00415 	stw	r3,16(r2)
   11cac:	e0bffb17 	ldw	r2,-20(fp)
   11cb0:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   11cb4:	e0bffd17 	ldw	r2,-12(fp)
   11cb8:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    p_mem_data->OSNUsed    = p_mem_data->OSNBlks - p_mem_data->OSNFree;
   11cbc:	e0bfff17 	ldw	r2,-4(fp)
   11cc0:	10c00317 	ldw	r3,12(r2)
   11cc4:	e0bfff17 	ldw	r2,-4(fp)
   11cc8:	10800417 	ldw	r2,16(r2)
   11ccc:	1887c83a 	sub	r3,r3,r2
   11cd0:	e0bfff17 	ldw	r2,-4(fp)
   11cd4:	10c00515 	stw	r3,20(r2)
    return (OS_ERR_NONE);
   11cd8:	0005883a 	mov	r2,zero
}
   11cdc:	e037883a 	mov	sp,fp
   11ce0:	df000017 	ldw	fp,0(sp)
   11ce4:	dec00104 	addi	sp,sp,4
   11ce8:	f800283a 	ret

00011cec <OS_MemInit>:
* Note(s)    : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

void  OS_MemInit (void)
{
   11cec:	defffc04 	addi	sp,sp,-16
   11cf0:	dfc00315 	stw	ra,12(sp)
   11cf4:	df000215 	stw	fp,8(sp)
   11cf8:	df000204 	addi	fp,sp,8
#if OS_MAX_MEM_PART >= 2
    OS_MEM  *pmem;
    INT16U   i;


    OS_MemClr((INT8U *)&OSMemTbl[0], sizeof(OSMemTbl));   /* Clear the memory partition table          */
   11cfc:	010000b4 	movhi	r4,2
   11d00:	210fc004 	addi	r4,r4,16128
   11d04:	01430c04 	movi	r5,3120
   11d08:	000f5040 	call	f504 <OS_MemClr>
    pmem = &OSMemTbl[0];                                  /* Point to memory control block (MCB)       */
   11d0c:	008000b4 	movhi	r2,2
   11d10:	108fc004 	addi	r2,r2,16128
   11d14:	e0bffe15 	stw	r2,-8(fp)
    for (i = 0; i < (OS_MAX_MEM_PART - 1); i++) {         /* Init. list of free memory partitions      */
   11d18:	e03fff0d 	sth	zero,-4(fp)
   11d1c:	00001306 	br	11d6c <OS_MemInit+0x80>
        pmem->OSMemFreeList = (void *)&OSMemTbl[i+1];     /* Chain list of free partitions             */
   11d20:	e0bfff0b 	ldhu	r2,-4(fp)
   11d24:	10800044 	addi	r2,r2,1
   11d28:	10c00d24 	muli	r3,r2,52
   11d2c:	008000b4 	movhi	r2,2
   11d30:	108fc004 	addi	r2,r2,16128
   11d34:	1887883a 	add	r3,r3,r2
   11d38:	e0bffe17 	ldw	r2,-8(fp)
   11d3c:	10c00115 	stw	r3,4(r2)
#if OS_MEM_NAME_SIZE > 1
        pmem->OSMemName[0]  = '?';                        /* Unknown name                              */
   11d40:	e0bffe17 	ldw	r2,-8(fp)
   11d44:	00c00fc4 	movi	r3,63
   11d48:	10c00505 	stb	r3,20(r2)
        pmem->OSMemName[1]  = OS_ASCII_NUL;
   11d4c:	e0bffe17 	ldw	r2,-8(fp)
   11d50:	10000545 	stb	zero,21(r2)
#endif
        pmem++;
   11d54:	e0bffe17 	ldw	r2,-8(fp)
   11d58:	10800d04 	addi	r2,r2,52
   11d5c:	e0bffe15 	stw	r2,-8(fp)
    INT16U   i;


    OS_MemClr((INT8U *)&OSMemTbl[0], sizeof(OSMemTbl));   /* Clear the memory partition table          */
    pmem = &OSMemTbl[0];                                  /* Point to memory control block (MCB)       */
    for (i = 0; i < (OS_MAX_MEM_PART - 1); i++) {         /* Init. list of free memory partitions      */
   11d60:	e0bfff0b 	ldhu	r2,-4(fp)
   11d64:	10800044 	addi	r2,r2,1
   11d68:	e0bfff0d 	sth	r2,-4(fp)
   11d6c:	e0bfff0b 	ldhu	r2,-4(fp)
   11d70:	10800ef0 	cmpltui	r2,r2,59
   11d74:	103fea1e 	bne	r2,zero,11d20 <__alt_mem_Flash_flash_data+0xf4011d20>
        pmem->OSMemName[0]  = '?';                        /* Unknown name                              */
        pmem->OSMemName[1]  = OS_ASCII_NUL;
#endif
        pmem++;
    }
    pmem->OSMemFreeList = (void *)0;                      /* Initialize last node                      */
   11d78:	e0bffe17 	ldw	r2,-8(fp)
   11d7c:	10000115 	stw	zero,4(r2)
#if OS_MEM_NAME_SIZE > 1
    pmem->OSMemName[0]  = '?';                            /* Unknown name                              */
   11d80:	e0bffe17 	ldw	r2,-8(fp)
   11d84:	00c00fc4 	movi	r3,63
   11d88:	10c00505 	stb	r3,20(r2)
    pmem->OSMemName[1]  = OS_ASCII_NUL;
   11d8c:	e0bffe17 	ldw	r2,-8(fp)
   11d90:	10000545 	stb	zero,21(r2)
#endif

    OSMemFreeList       = &OSMemTbl[0];                   /* Point to beginning of free list           */
   11d94:	008000b4 	movhi	r2,2
   11d98:	10b6cb04 	addi	r2,r2,-9428
   11d9c:	00c000b4 	movhi	r3,2
   11da0:	18cfc004 	addi	r3,r3,16128
   11da4:	10c00015 	stw	r3,0(r2)
#endif
}
   11da8:	e037883a 	mov	sp,fp
   11dac:	dfc00117 	ldw	ra,4(sp)
   11db0:	df000017 	ldw	fp,0(sp)
   11db4:	dec00204 	addi	sp,sp,8
   11db8:	f800283a 	ret

00011dbc <OSQAccept>:
*********************************************************************************************************
*/

#if OS_Q_ACCEPT_EN > 0
void  *OSQAccept (OS_EVENT *pevent, INT8U *perr)
{
   11dbc:	defff804 	addi	sp,sp,-32
   11dc0:	df000715 	stw	fp,28(sp)
   11dc4:	df000704 	addi	fp,sp,28
   11dc8:	e13ffe15 	stw	r4,-8(fp)
   11dcc:	e17fff15 	stw	r5,-4(fp)
    void      *pmsg;
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   11dd0:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
   11dd4:	e0bfff17 	ldw	r2,-4(fp)
   11dd8:	1000021e 	bne	r2,zero,11de4 <OSQAccept+0x28>
        return ((void *)0);
   11ddc:	0005883a 	mov	r2,zero
   11de0:	00004206 	br	11eec <OSQAccept+0x130>
    }
    if (pevent == (OS_EVENT *)0) {               /* Validate 'pevent'                                  */
   11de4:	e0bffe17 	ldw	r2,-8(fp)
   11de8:	1000051e 	bne	r2,zero,11e00 <OSQAccept+0x44>
        *perr = OS_ERR_PEVENT_NULL;
   11dec:	e0bfff17 	ldw	r2,-4(fp)
   11df0:	00c00104 	movi	r3,4
   11df4:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
   11df8:	0005883a 	mov	r2,zero
   11dfc:	00003b06 	br	11eec <OSQAccept+0x130>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {/* Validate event block type                          */
   11e00:	e0bffe17 	ldw	r2,-8(fp)
   11e04:	10800003 	ldbu	r2,0(r2)
   11e08:	10803fcc 	andi	r2,r2,255
   11e0c:	108000a0 	cmpeqi	r2,r2,2
   11e10:	1000051e 	bne	r2,zero,11e28 <OSQAccept+0x6c>
        *perr = OS_ERR_EVENT_TYPE;
   11e14:	e0bfff17 	ldw	r2,-4(fp)
   11e18:	00c00044 	movi	r3,1
   11e1c:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
   11e20:	0005883a 	mov	r2,zero
   11e24:	00003106 	br	11eec <OSQAccept+0x130>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   11e28:	0005303a 	rdctl	r2,status
   11e2c:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   11e30:	e0fffc17 	ldw	r3,-16(fp)
   11e34:	00bfff84 	movi	r2,-2
   11e38:	1884703a 	and	r2,r3,r2
   11e3c:	1001703a 	wrctl	status,r2
  
  return context;
   11e40:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
   11e44:	e0bffa15 	stw	r2,-24(fp)
    pq = (OS_Q *)pevent->OSEventPtr;             /* Point at queue control block                       */
   11e48:	e0bffe17 	ldw	r2,-8(fp)
   11e4c:	10800117 	ldw	r2,4(r2)
   11e50:	e0bffb15 	stw	r2,-20(fp)
    if (pq->OSQEntries > 0) {                    /* See if any messages in the queue                   */
   11e54:	e0bffb17 	ldw	r2,-20(fp)
   11e58:	1080058b 	ldhu	r2,22(r2)
   11e5c:	10bfffcc 	andi	r2,r2,65535
   11e60:	10001926 	beq	r2,zero,11ec8 <OSQAccept+0x10c>
        pmsg = *pq->OSQOut++;                    /* Yes, extract oldest message from the queue         */
   11e64:	e0bffb17 	ldw	r2,-20(fp)
   11e68:	10800417 	ldw	r2,16(r2)
   11e6c:	11000104 	addi	r4,r2,4
   11e70:	e0fffb17 	ldw	r3,-20(fp)
   11e74:	19000415 	stw	r4,16(r3)
   11e78:	10800017 	ldw	r2,0(r2)
   11e7c:	e0bff915 	stw	r2,-28(fp)
        pq->OSQEntries--;                        /* Update the number of entries in the queue          */
   11e80:	e0bffb17 	ldw	r2,-20(fp)
   11e84:	1080058b 	ldhu	r2,22(r2)
   11e88:	10bfffc4 	addi	r2,r2,-1
   11e8c:	1007883a 	mov	r3,r2
   11e90:	e0bffb17 	ldw	r2,-20(fp)
   11e94:	10c0058d 	sth	r3,22(r2)
        if (pq->OSQOut == pq->OSQEnd) {          /* Wrap OUT pointer if we are at the end of the queue */
   11e98:	e0bffb17 	ldw	r2,-20(fp)
   11e9c:	10c00417 	ldw	r3,16(r2)
   11ea0:	e0bffb17 	ldw	r2,-20(fp)
   11ea4:	10800217 	ldw	r2,8(r2)
   11ea8:	1880041e 	bne	r3,r2,11ebc <OSQAccept+0x100>
            pq->OSQOut = pq->OSQStart;
   11eac:	e0bffb17 	ldw	r2,-20(fp)
   11eb0:	10c00117 	ldw	r3,4(r2)
   11eb4:	e0bffb17 	ldw	r2,-20(fp)
   11eb8:	10c00415 	stw	r3,16(r2)
        }
        *perr = OS_ERR_NONE;
   11ebc:	e0bfff17 	ldw	r2,-4(fp)
   11ec0:	10000005 	stb	zero,0(r2)
   11ec4:	00000406 	br	11ed8 <OSQAccept+0x11c>
    } else {
        *perr = OS_ERR_Q_EMPTY;
   11ec8:	e0bfff17 	ldw	r2,-4(fp)
   11ecc:	00c007c4 	movi	r3,31
   11ed0:	10c00005 	stb	r3,0(r2)
        pmsg  = (void *)0;                       /* Queue is empty                                     */
   11ed4:	e03ff915 	stw	zero,-28(fp)
   11ed8:	e0bffa17 	ldw	r2,-24(fp)
   11edc:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   11ee0:	e0bffd17 	ldw	r2,-12(fp)
   11ee4:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (pmsg);                               /* Return message received (or NULL)                  */
   11ee8:	e0bff917 	ldw	r2,-28(fp)
}
   11eec:	e037883a 	mov	sp,fp
   11ef0:	df000017 	ldw	fp,0(sp)
   11ef4:	dec00104 	addi	sp,sp,4
   11ef8:	f800283a 	ret

00011efc <OSQCreate>:
*              == (OS_EVENT *)0  if no event control blocks were available or an error was detected
*********************************************************************************************************
*/

OS_EVENT  *OSQCreate (void **start, INT16U size)
{
   11efc:	defff404 	addi	sp,sp,-48
   11f00:	dfc00b15 	stw	ra,44(sp)
   11f04:	df000a15 	stw	fp,40(sp)
   11f08:	df000a04 	addi	fp,sp,40
   11f0c:	e13ffe15 	stw	r4,-8(fp)
   11f10:	2805883a 	mov	r2,r5
   11f14:	e0bfff0d 	sth	r2,-4(fp)
    OS_EVENT  *pevent;
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   11f18:	e03ff715 	stw	zero,-36(fp)
#endif



    if (OSIntNesting > 0) {                      /* See if called from ISR ...                         */
   11f1c:	008000b4 	movhi	r2,2
   11f20:	10b6d004 	addi	r2,r2,-9408
   11f24:	10800003 	ldbu	r2,0(r2)
   11f28:	10803fcc 	andi	r2,r2,255
   11f2c:	10000226 	beq	r2,zero,11f38 <OSQCreate+0x3c>
        return ((OS_EVENT *)0);                  /* ... can't CREATE from an ISR                       */
   11f30:	0005883a 	mov	r2,zero
   11f34:	00006b06 	br	120e4 <OSQCreate+0x1e8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   11f38:	0005303a 	rdctl	r2,status
   11f3c:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   11f40:	e0fff917 	ldw	r3,-28(fp)
   11f44:	00bfff84 	movi	r2,-2
   11f48:	1884703a 	and	r2,r3,r2
   11f4c:	1001703a 	wrctl	status,r2
  
  return context;
   11f50:	e0bff917 	ldw	r2,-28(fp)
    }
    OS_ENTER_CRITICAL();
   11f54:	e0bff715 	stw	r2,-36(fp)
    pevent = OSEventFreeList;                    /* Get next free event control block                  */
   11f58:	008000b4 	movhi	r2,2
   11f5c:	10b6cf04 	addi	r2,r2,-9412
   11f60:	10800017 	ldw	r2,0(r2)
   11f64:	e0bff615 	stw	r2,-40(fp)
    if (OSEventFreeList != (OS_EVENT *)0) {      /* See if pool of free ECB pool was empty             */
   11f68:	008000b4 	movhi	r2,2
   11f6c:	10b6cf04 	addi	r2,r2,-9412
   11f70:	10800017 	ldw	r2,0(r2)
   11f74:	10000726 	beq	r2,zero,11f94 <OSQCreate+0x98>
        OSEventFreeList = (OS_EVENT *)OSEventFreeList->OSEventPtr;
   11f78:	008000b4 	movhi	r2,2
   11f7c:	10b6cf04 	addi	r2,r2,-9412
   11f80:	10800017 	ldw	r2,0(r2)
   11f84:	10c00117 	ldw	r3,4(r2)
   11f88:	008000b4 	movhi	r2,2
   11f8c:	10b6cf04 	addi	r2,r2,-9412
   11f90:	10c00015 	stw	r3,0(r2)
   11f94:	e0bff717 	ldw	r2,-36(fp)
   11f98:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   11f9c:	e0bffa17 	ldw	r2,-24(fp)
   11fa0:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    if (pevent != (OS_EVENT *)0) {               /* See if we have an event control block              */
   11fa4:	e0bff617 	ldw	r2,-40(fp)
   11fa8:	10004d26 	beq	r2,zero,120e0 <OSQCreate+0x1e4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   11fac:	0005303a 	rdctl	r2,status
   11fb0:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   11fb4:	e0fffb17 	ldw	r3,-20(fp)
   11fb8:	00bfff84 	movi	r2,-2
   11fbc:	1884703a 	and	r2,r3,r2
   11fc0:	1001703a 	wrctl	status,r2
  
  return context;
   11fc4:	e0bffb17 	ldw	r2,-20(fp)
        OS_ENTER_CRITICAL();
   11fc8:	e0bff715 	stw	r2,-36(fp)
        pq = OSQFreeList;                        /* Get a free queue control block                     */
   11fcc:	008000b4 	movhi	r2,2
   11fd0:	10b6cd04 	addi	r2,r2,-9420
   11fd4:	10800017 	ldw	r2,0(r2)
   11fd8:	e0bff815 	stw	r2,-32(fp)
        if (pq != (OS_Q *)0) {                   /* Were we able to get a queue control block ?        */
   11fdc:	e0bff817 	ldw	r2,-32(fp)
   11fe0:	10003126 	beq	r2,zero,120a8 <OSQCreate+0x1ac>
            OSQFreeList            = OSQFreeList->OSQPtr; /* Yes, Adjust free list pointer to next free*/
   11fe4:	008000b4 	movhi	r2,2
   11fe8:	10b6cd04 	addi	r2,r2,-9420
   11fec:	10800017 	ldw	r2,0(r2)
   11ff0:	10c00017 	ldw	r3,0(r2)
   11ff4:	008000b4 	movhi	r2,2
   11ff8:	10b6cd04 	addi	r2,r2,-9420
   11ffc:	10c00015 	stw	r3,0(r2)
   12000:	e0bff717 	ldw	r2,-36(fp)
   12004:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   12008:	e0bffc17 	ldw	r2,-16(fp)
   1200c:	1001703a 	wrctl	status,r2
            OS_EXIT_CRITICAL();
            pq->OSQStart           = start;               /*      Initialize the queue                 */
   12010:	e0bff817 	ldw	r2,-32(fp)
   12014:	e0fffe17 	ldw	r3,-8(fp)
   12018:	10c00115 	stw	r3,4(r2)
            pq->OSQEnd             = &start[size];
   1201c:	e0bfff0b 	ldhu	r2,-4(fp)
   12020:	1085883a 	add	r2,r2,r2
   12024:	1085883a 	add	r2,r2,r2
   12028:	1007883a 	mov	r3,r2
   1202c:	e0bffe17 	ldw	r2,-8(fp)
   12030:	10c7883a 	add	r3,r2,r3
   12034:	e0bff817 	ldw	r2,-32(fp)
   12038:	10c00215 	stw	r3,8(r2)
            pq->OSQIn              = start;
   1203c:	e0bff817 	ldw	r2,-32(fp)
   12040:	e0fffe17 	ldw	r3,-8(fp)
   12044:	10c00315 	stw	r3,12(r2)
            pq->OSQOut             = start;
   12048:	e0bff817 	ldw	r2,-32(fp)
   1204c:	e0fffe17 	ldw	r3,-8(fp)
   12050:	10c00415 	stw	r3,16(r2)
            pq->OSQSize            = size;
   12054:	e0bff817 	ldw	r2,-32(fp)
   12058:	e0ffff0b 	ldhu	r3,-4(fp)
   1205c:	10c0050d 	sth	r3,20(r2)
            pq->OSQEntries         = 0;
   12060:	e0bff817 	ldw	r2,-32(fp)
   12064:	1000058d 	sth	zero,22(r2)
            pevent->OSEventType    = OS_EVENT_TYPE_Q;
   12068:	e0bff617 	ldw	r2,-40(fp)
   1206c:	00c00084 	movi	r3,2
   12070:	10c00005 	stb	r3,0(r2)
            pevent->OSEventCnt     = 0;
   12074:	e0bff617 	ldw	r2,-40(fp)
   12078:	1000020d 	sth	zero,8(r2)
            pevent->OSEventPtr     = pq;
   1207c:	e0bff617 	ldw	r2,-40(fp)
   12080:	e0fff817 	ldw	r3,-32(fp)
   12084:	10c00115 	stw	r3,4(r2)
#if OS_EVENT_NAME_SIZE > 1
            pevent->OSEventName[0] = '?';                  /* Unknown name                             */
   12088:	e0bff617 	ldw	r2,-40(fp)
   1208c:	00c00fc4 	movi	r3,63
   12090:	10c00385 	stb	r3,14(r2)
            pevent->OSEventName[1] = OS_ASCII_NUL;
   12094:	e0bff617 	ldw	r2,-40(fp)
   12098:	100003c5 	stb	zero,15(r2)
#endif
            OS_EventWaitListInit(pevent);                 /*      Initalize the wait list              */
   1209c:	e13ff617 	ldw	r4,-40(fp)
   120a0:	000f1400 	call	f140 <OS_EventWaitListInit>
   120a4:	00000e06 	br	120e0 <OSQCreate+0x1e4>
        } else {
            pevent->OSEventPtr = (void *)OSEventFreeList; /* No,  Return event control block on error  */
   120a8:	008000b4 	movhi	r2,2
   120ac:	10b6cf04 	addi	r2,r2,-9412
   120b0:	10c00017 	ldw	r3,0(r2)
   120b4:	e0bff617 	ldw	r2,-40(fp)
   120b8:	10c00115 	stw	r3,4(r2)
            OSEventFreeList    = pevent;
   120bc:	008000b4 	movhi	r2,2
   120c0:	10b6cf04 	addi	r2,r2,-9412
   120c4:	e0fff617 	ldw	r3,-40(fp)
   120c8:	10c00015 	stw	r3,0(r2)
   120cc:	e0bff717 	ldw	r2,-36(fp)
   120d0:	e0bffd15 	stw	r2,-12(fp)
   120d4:	e0bffd17 	ldw	r2,-12(fp)
   120d8:	1001703a 	wrctl	status,r2
            OS_EXIT_CRITICAL();
            pevent = (OS_EVENT *)0;
   120dc:	e03ff615 	stw	zero,-40(fp)
        }
    }
    return (pevent);
   120e0:	e0bff617 	ldw	r2,-40(fp)
}
   120e4:	e037883a 	mov	sp,fp
   120e8:	dfc00117 	ldw	ra,4(sp)
   120ec:	df000017 	ldw	fp,0(sp)
   120f0:	dec00204 	addi	sp,sp,8
   120f4:	f800283a 	ret

000120f8 <OSQDel>:
*********************************************************************************************************
*/

#if OS_Q_DEL_EN > 0
OS_EVENT  *OSQDel (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
   120f8:	defff204 	addi	sp,sp,-56
   120fc:	dfc00d15 	stw	ra,52(sp)
   12100:	df000c15 	stw	fp,48(sp)
   12104:	df000c04 	addi	fp,sp,48
   12108:	e13ffd15 	stw	r4,-12(fp)
   1210c:	2805883a 	mov	r2,r5
   12110:	e1bfff15 	stw	r6,-4(fp)
   12114:	e0bffe05 	stb	r2,-8(fp)
    BOOLEAN    tasks_waiting;
    OS_EVENT  *pevent_return;
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
   12118:	e03ff615 	stw	zero,-40(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
   1211c:	e0bfff17 	ldw	r2,-4(fp)
   12120:	1000021e 	bne	r2,zero,1212c <OSQDel+0x34>
        return (pevent);
   12124:	e0bffd17 	ldw	r2,-12(fp)
   12128:	0000a006 	br	123ac <OSQDel+0x2b4>
    }
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
   1212c:	e0bffd17 	ldw	r2,-12(fp)
   12130:	1000051e 	bne	r2,zero,12148 <OSQDel+0x50>
        *perr = OS_ERR_PEVENT_NULL;
   12134:	e0bfff17 	ldw	r2,-4(fp)
   12138:	00c00104 	movi	r3,4
   1213c:	10c00005 	stb	r3,0(r2)
        return (pevent);
   12140:	e0bffd17 	ldw	r2,-12(fp)
   12144:	00009906 	br	123ac <OSQDel+0x2b4>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {          /* Validate event block type                */
   12148:	e0bffd17 	ldw	r2,-12(fp)
   1214c:	10800003 	ldbu	r2,0(r2)
   12150:	10803fcc 	andi	r2,r2,255
   12154:	108000a0 	cmpeqi	r2,r2,2
   12158:	1000051e 	bne	r2,zero,12170 <OSQDel+0x78>
        *perr = OS_ERR_EVENT_TYPE;
   1215c:	e0bfff17 	ldw	r2,-4(fp)
   12160:	00c00044 	movi	r3,1
   12164:	10c00005 	stb	r3,0(r2)
        return (pevent);
   12168:	e0bffd17 	ldw	r2,-12(fp)
   1216c:	00008f06 	br	123ac <OSQDel+0x2b4>
    }
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
   12170:	008000b4 	movhi	r2,2
   12174:	10b6d004 	addi	r2,r2,-9408
   12178:	10800003 	ldbu	r2,0(r2)
   1217c:	10803fcc 	andi	r2,r2,255
   12180:	10000526 	beq	r2,zero,12198 <OSQDel+0xa0>
        *perr = OS_ERR_DEL_ISR;                            /* ... can't DELETE from an ISR             */
   12184:	e0bfff17 	ldw	r2,-4(fp)
   12188:	00c003c4 	movi	r3,15
   1218c:	10c00005 	stb	r3,0(r2)
        return (pevent);
   12190:	e0bffd17 	ldw	r2,-12(fp)
   12194:	00008506 	br	123ac <OSQDel+0x2b4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   12198:	0005303a 	rdctl	r2,status
   1219c:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   121a0:	e0fff817 	ldw	r3,-32(fp)
   121a4:	00bfff84 	movi	r2,-2
   121a8:	1884703a 	and	r2,r3,r2
   121ac:	1001703a 	wrctl	status,r2
  
  return context;
   121b0:	e0bff817 	ldw	r2,-32(fp)
    }
    OS_ENTER_CRITICAL();
   121b4:	e0bff615 	stw	r2,-40(fp)
    if (pevent->OSEventGrp != 0) {                         /* See if any tasks waiting on queue        */
   121b8:	e0bffd17 	ldw	r2,-12(fp)
   121bc:	10800283 	ldbu	r2,10(r2)
   121c0:	10803fcc 	andi	r2,r2,255
   121c4:	10000326 	beq	r2,zero,121d4 <OSQDel+0xdc>
        tasks_waiting = OS_TRUE;                           /* Yes                                      */
   121c8:	00800044 	movi	r2,1
   121cc:	e0bff405 	stb	r2,-48(fp)
   121d0:	00000106 	br	121d8 <OSQDel+0xe0>
    } else {
        tasks_waiting = OS_FALSE;                          /* No                                       */
   121d4:	e03ff405 	stb	zero,-48(fp)
    }
    switch (opt) {
   121d8:	e0bffe03 	ldbu	r2,-8(fp)
   121dc:	10000326 	beq	r2,zero,121ec <OSQDel+0xf4>
   121e0:	10800060 	cmpeqi	r2,r2,1
   121e4:	1000381e 	bne	r2,zero,122c8 <OSQDel+0x1d0>
   121e8:	00006506 	br	12380 <OSQDel+0x288>
        case OS_DEL_NO_PEND:                               /* Delete queue only if no task waiting     */
             if (tasks_waiting == OS_FALSE) {
   121ec:	e0bff403 	ldbu	r2,-48(fp)
   121f0:	1000261e 	bne	r2,zero,1228c <OSQDel+0x194>
#if OS_EVENT_NAME_SIZE > 1
                 pevent->OSEventName[0] = '?';             /* Unknown name                             */
   121f4:	e0bffd17 	ldw	r2,-12(fp)
   121f8:	00c00fc4 	movi	r3,63
   121fc:	10c00385 	stb	r3,14(r2)
                 pevent->OSEventName[1] = OS_ASCII_NUL;
   12200:	e0bffd17 	ldw	r2,-12(fp)
   12204:	100003c5 	stb	zero,15(r2)
#endif
                 pq                     = (OS_Q *)pevent->OSEventPtr;  /* Return OS_Q to free list     */
   12208:	e0bffd17 	ldw	r2,-12(fp)
   1220c:	10800117 	ldw	r2,4(r2)
   12210:	e0bff715 	stw	r2,-36(fp)
                 pq->OSQPtr             = OSQFreeList;
   12214:	008000b4 	movhi	r2,2
   12218:	10b6cd04 	addi	r2,r2,-9420
   1221c:	10c00017 	ldw	r3,0(r2)
   12220:	e0bff717 	ldw	r2,-36(fp)
   12224:	10c00015 	stw	r3,0(r2)
                 OSQFreeList            = pq;
   12228:	008000b4 	movhi	r2,2
   1222c:	10b6cd04 	addi	r2,r2,-9420
   12230:	e0fff717 	ldw	r3,-36(fp)
   12234:	10c00015 	stw	r3,0(r2)
                 pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
   12238:	e0bffd17 	ldw	r2,-12(fp)
   1223c:	10000005 	stb	zero,0(r2)
                 pevent->OSEventPtr     = OSEventFreeList; /* Return Event Control Block to free list  */
   12240:	008000b4 	movhi	r2,2
   12244:	10b6cf04 	addi	r2,r2,-9412
   12248:	10c00017 	ldw	r3,0(r2)
   1224c:	e0bffd17 	ldw	r2,-12(fp)
   12250:	10c00115 	stw	r3,4(r2)
                 pevent->OSEventCnt     = 0;
   12254:	e0bffd17 	ldw	r2,-12(fp)
   12258:	1000020d 	sth	zero,8(r2)
                 OSEventFreeList        = pevent;          /* Get next free event control block        */
   1225c:	008000b4 	movhi	r2,2
   12260:	10b6cf04 	addi	r2,r2,-9412
   12264:	e0fffd17 	ldw	r3,-12(fp)
   12268:	10c00015 	stw	r3,0(r2)
   1226c:	e0bff617 	ldw	r2,-40(fp)
   12270:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   12274:	e0bff917 	ldw	r2,-28(fp)
   12278:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_NONE;
   1227c:	e0bfff17 	ldw	r2,-4(fp)
   12280:	10000005 	stb	zero,0(r2)
                 pevent_return          = (OS_EVENT *)0;   /* Queue has been deleted                   */
   12284:	e03ff515 	stw	zero,-44(fp)
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_TASK_WAITING;
                 pevent_return          = pevent;
             }
             break;
   12288:	00004706 	br	123a8 <OSQDel+0x2b0>
   1228c:	e0bff617 	ldw	r2,-40(fp)
   12290:	e0bffa15 	stw	r2,-24(fp)
   12294:	e0bffa17 	ldw	r2,-24(fp)
   12298:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_NONE;
                 pevent_return          = (OS_EVENT *)0;   /* Queue has been deleted                   */
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_TASK_WAITING;
   1229c:	e0bfff17 	ldw	r2,-4(fp)
   122a0:	00c01244 	movi	r3,73
   122a4:	10c00005 	stb	r3,0(r2)
                 pevent_return          = pevent;
   122a8:	e0bffd17 	ldw	r2,-12(fp)
   122ac:	e0bff515 	stw	r2,-44(fp)
             }
             break;
   122b0:	00003d06 	br	123a8 <OSQDel+0x2b0>

        case OS_DEL_ALWAYS:                                /* Always delete the queue                  */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for queue        */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_OK);
   122b4:	e13ffd17 	ldw	r4,-12(fp)
   122b8:	000b883a 	mov	r5,zero
   122bc:	01800104 	movi	r6,4
   122c0:	000f883a 	mov	r7,zero
   122c4:	000eba00 	call	eba0 <OS_EventTaskRdy>
                 pevent_return          = pevent;
             }
             break;

        case OS_DEL_ALWAYS:                                /* Always delete the queue                  */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for queue        */
   122c8:	e0bffd17 	ldw	r2,-12(fp)
   122cc:	10800283 	ldbu	r2,10(r2)
   122d0:	10803fcc 	andi	r2,r2,255
   122d4:	103ff71e 	bne	r2,zero,122b4 <__alt_mem_Flash_flash_data+0xf40122b4>
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_OK);
             }
#if OS_EVENT_NAME_SIZE > 1
             pevent->OSEventName[0] = '?';                 /* Unknown name                             */
   122d8:	e0bffd17 	ldw	r2,-12(fp)
   122dc:	00c00fc4 	movi	r3,63
   122e0:	10c00385 	stb	r3,14(r2)
             pevent->OSEventName[1] = OS_ASCII_NUL;
   122e4:	e0bffd17 	ldw	r2,-12(fp)
   122e8:	100003c5 	stb	zero,15(r2)
#endif
             pq                     = (OS_Q *)pevent->OSEventPtr;   /* Return OS_Q to free list        */
   122ec:	e0bffd17 	ldw	r2,-12(fp)
   122f0:	10800117 	ldw	r2,4(r2)
   122f4:	e0bff715 	stw	r2,-36(fp)
             pq->OSQPtr             = OSQFreeList;
   122f8:	008000b4 	movhi	r2,2
   122fc:	10b6cd04 	addi	r2,r2,-9420
   12300:	10c00017 	ldw	r3,0(r2)
   12304:	e0bff717 	ldw	r2,-36(fp)
   12308:	10c00015 	stw	r3,0(r2)
             OSQFreeList            = pq;
   1230c:	008000b4 	movhi	r2,2
   12310:	10b6cd04 	addi	r2,r2,-9420
   12314:	e0fff717 	ldw	r3,-36(fp)
   12318:	10c00015 	stw	r3,0(r2)
             pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
   1231c:	e0bffd17 	ldw	r2,-12(fp)
   12320:	10000005 	stb	zero,0(r2)
             pevent->OSEventPtr     = OSEventFreeList;     /* Return Event Control Block to free list  */
   12324:	008000b4 	movhi	r2,2
   12328:	10b6cf04 	addi	r2,r2,-9412
   1232c:	10c00017 	ldw	r3,0(r2)
   12330:	e0bffd17 	ldw	r2,-12(fp)
   12334:	10c00115 	stw	r3,4(r2)
             pevent->OSEventCnt     = 0;
   12338:	e0bffd17 	ldw	r2,-12(fp)
   1233c:	1000020d 	sth	zero,8(r2)
             OSEventFreeList        = pevent;              /* Get next free event control block        */
   12340:	008000b4 	movhi	r2,2
   12344:	10b6cf04 	addi	r2,r2,-9412
   12348:	e0fffd17 	ldw	r3,-12(fp)
   1234c:	10c00015 	stw	r3,0(r2)
   12350:	e0bff617 	ldw	r2,-40(fp)
   12354:	e0bffb15 	stw	r2,-20(fp)
   12358:	e0bffb17 	ldw	r2,-20(fp)
   1235c:	1001703a 	wrctl	status,r2
             OS_EXIT_CRITICAL();
             if (tasks_waiting == OS_TRUE) {               /* Reschedule only if task(s) were waiting  */
   12360:	e0bff403 	ldbu	r2,-48(fp)
   12364:	10800058 	cmpnei	r2,r2,1
   12368:	1000011e 	bne	r2,zero,12370 <OSQDel+0x278>
                 OS_Sched();                               /* Find highest priority task ready to run  */
   1236c:	000f5b80 	call	f5b8 <OS_Sched>
             }
             *perr                  = OS_ERR_NONE;
   12370:	e0bfff17 	ldw	r2,-4(fp)
   12374:	10000005 	stb	zero,0(r2)
             pevent_return          = (OS_EVENT *)0;       /* Queue has been deleted                   */
   12378:	e03ff515 	stw	zero,-44(fp)
             break;
   1237c:	00000a06 	br	123a8 <OSQDel+0x2b0>
   12380:	e0bff617 	ldw	r2,-40(fp)
   12384:	e0bffc15 	stw	r2,-16(fp)
   12388:	e0bffc17 	ldw	r2,-16(fp)
   1238c:	1001703a 	wrctl	status,r2

        default:
             OS_EXIT_CRITICAL();
             *perr                  = OS_ERR_INVALID_OPT;
   12390:	e0bfff17 	ldw	r2,-4(fp)
   12394:	00c001c4 	movi	r3,7
   12398:	10c00005 	stb	r3,0(r2)
             pevent_return          = pevent;
   1239c:	e0bffd17 	ldw	r2,-12(fp)
   123a0:	e0bff515 	stw	r2,-44(fp)
             break;
   123a4:	0001883a 	nop
    }
    return (pevent_return);
   123a8:	e0bff517 	ldw	r2,-44(fp)
}
   123ac:	e037883a 	mov	sp,fp
   123b0:	dfc00117 	ldw	ra,4(sp)
   123b4:	df000017 	ldw	fp,0(sp)
   123b8:	dec00204 	addi	sp,sp,8
   123bc:	f800283a 	ret

000123c0 <OSQFlush>:
*********************************************************************************************************
*/

#if OS_Q_FLUSH_EN > 0
INT8U  OSQFlush (OS_EVENT *pevent)
{
   123c0:	defffa04 	addi	sp,sp,-24
   123c4:	df000515 	stw	fp,20(sp)
   123c8:	df000504 	addi	fp,sp,20
   123cc:	e13fff15 	stw	r4,-4(fp)
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   123d0:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
   123d4:	e0bfff17 	ldw	r2,-4(fp)
   123d8:	1000021e 	bne	r2,zero,123e4 <OSQFlush+0x24>
        return (OS_ERR_PEVENT_NULL);
   123dc:	00800104 	movi	r2,4
   123e0:	00002106 	br	12468 <OSQFlush+0xa8>
    }
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {     /* Validate event block type                     */
   123e4:	e0bfff17 	ldw	r2,-4(fp)
   123e8:	10800003 	ldbu	r2,0(r2)
   123ec:	10803fcc 	andi	r2,r2,255
   123f0:	108000a0 	cmpeqi	r2,r2,2
   123f4:	1000021e 	bne	r2,zero,12400 <OSQFlush+0x40>
        return (OS_ERR_EVENT_TYPE);
   123f8:	00800044 	movi	r2,1
   123fc:	00001a06 	br	12468 <OSQFlush+0xa8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   12400:	0005303a 	rdctl	r2,status
   12404:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   12408:	e0fffd17 	ldw	r3,-12(fp)
   1240c:	00bfff84 	movi	r2,-2
   12410:	1884703a 	and	r2,r3,r2
   12414:	1001703a 	wrctl	status,r2
  
  return context;
   12418:	e0bffd17 	ldw	r2,-12(fp)
    }
#endif
    OS_ENTER_CRITICAL();
   1241c:	e0bffb15 	stw	r2,-20(fp)
    pq             = (OS_Q *)pevent->OSEventPtr;      /* Point to queue storage structure              */
   12420:	e0bfff17 	ldw	r2,-4(fp)
   12424:	10800117 	ldw	r2,4(r2)
   12428:	e0bffc15 	stw	r2,-16(fp)
    pq->OSQIn      = pq->OSQStart;
   1242c:	e0bffc17 	ldw	r2,-16(fp)
   12430:	10c00117 	ldw	r3,4(r2)
   12434:	e0bffc17 	ldw	r2,-16(fp)
   12438:	10c00315 	stw	r3,12(r2)
    pq->OSQOut     = pq->OSQStart;
   1243c:	e0bffc17 	ldw	r2,-16(fp)
   12440:	10c00117 	ldw	r3,4(r2)
   12444:	e0bffc17 	ldw	r2,-16(fp)
   12448:	10c00415 	stw	r3,16(r2)
    pq->OSQEntries = 0;
   1244c:	e0bffc17 	ldw	r2,-16(fp)
   12450:	1000058d 	sth	zero,22(r2)
   12454:	e0bffb17 	ldw	r2,-20(fp)
   12458:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1245c:	e0bffe17 	ldw	r2,-8(fp)
   12460:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
   12464:	0005883a 	mov	r2,zero
}
   12468:	e037883a 	mov	sp,fp
   1246c:	df000017 	ldw	fp,0(sp)
   12470:	dec00104 	addi	sp,sp,4
   12474:	f800283a 	ret

00012478 <OSQPend>:
* Note(s)    : As of V2.60, this function allows you to receive NULL pointer messages.
*********************************************************************************************************
*/

void  *OSQPend (OS_EVENT *pevent, INT16U timeout, INT8U *perr)
{
   12478:	defff304 	addi	sp,sp,-52
   1247c:	dfc00c15 	stw	ra,48(sp)
   12480:	df000b15 	stw	fp,44(sp)
   12484:	df000b04 	addi	fp,sp,44
   12488:	e13ffd15 	stw	r4,-12(fp)
   1248c:	2805883a 	mov	r2,r5
   12490:	e1bfff15 	stw	r6,-4(fp)
   12494:	e0bffe0d 	sth	r2,-8(fp)
    void      *pmsg;
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   12498:	e03ff615 	stw	zero,-40(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
   1249c:	e0bfff17 	ldw	r2,-4(fp)
   124a0:	1000021e 	bne	r2,zero,124ac <OSQPend+0x34>
        return ((void *)0);
   124a4:	0005883a 	mov	r2,zero
   124a8:	0000ad06 	br	12760 <OSQPend+0x2e8>
    }
    if (pevent == (OS_EVENT *)0) {               /* Validate 'pevent'                                  */
   124ac:	e0bffd17 	ldw	r2,-12(fp)
   124b0:	1000051e 	bne	r2,zero,124c8 <OSQPend+0x50>
        *perr = OS_ERR_PEVENT_NULL;
   124b4:	e0bfff17 	ldw	r2,-4(fp)
   124b8:	00c00104 	movi	r3,4
   124bc:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
   124c0:	0005883a 	mov	r2,zero
   124c4:	0000a606 	br	12760 <OSQPend+0x2e8>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {/* Validate event block type                          */
   124c8:	e0bffd17 	ldw	r2,-12(fp)
   124cc:	10800003 	ldbu	r2,0(r2)
   124d0:	10803fcc 	andi	r2,r2,255
   124d4:	108000a0 	cmpeqi	r2,r2,2
   124d8:	1000051e 	bne	r2,zero,124f0 <OSQPend+0x78>
        *perr = OS_ERR_EVENT_TYPE;
   124dc:	e0bfff17 	ldw	r2,-4(fp)
   124e0:	00c00044 	movi	r3,1
   124e4:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
   124e8:	0005883a 	mov	r2,zero
   124ec:	00009c06 	br	12760 <OSQPend+0x2e8>
    }
    if (OSIntNesting > 0) {                      /* See if called from ISR ...                         */
   124f0:	008000b4 	movhi	r2,2
   124f4:	10b6d004 	addi	r2,r2,-9408
   124f8:	10800003 	ldbu	r2,0(r2)
   124fc:	10803fcc 	andi	r2,r2,255
   12500:	10000526 	beq	r2,zero,12518 <OSQPend+0xa0>
        *perr = OS_ERR_PEND_ISR;                 /* ... can't PEND from an ISR                         */
   12504:	e0bfff17 	ldw	r2,-4(fp)
   12508:	00c00084 	movi	r3,2
   1250c:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
   12510:	0005883a 	mov	r2,zero
   12514:	00009206 	br	12760 <OSQPend+0x2e8>
    }
    if (OSLockNesting > 0) {                     /* See if called with scheduler locked ...            */
   12518:	008000b4 	movhi	r2,2
   1251c:	10b6c204 	addi	r2,r2,-9464
   12520:	10800003 	ldbu	r2,0(r2)
   12524:	10803fcc 	andi	r2,r2,255
   12528:	10000526 	beq	r2,zero,12540 <OSQPend+0xc8>
        *perr = OS_ERR_PEND_LOCKED;              /* ... can't PEND when locked                         */
   1252c:	e0bfff17 	ldw	r2,-4(fp)
   12530:	00c00344 	movi	r3,13
   12534:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
   12538:	0005883a 	mov	r2,zero
   1253c:	00008806 	br	12760 <OSQPend+0x2e8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   12540:	0005303a 	rdctl	r2,status
   12544:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   12548:	e0fff817 	ldw	r3,-32(fp)
   1254c:	00bfff84 	movi	r2,-2
   12550:	1884703a 	and	r2,r3,r2
   12554:	1001703a 	wrctl	status,r2
  
  return context;
   12558:	e0bff817 	ldw	r2,-32(fp)
    }
    OS_ENTER_CRITICAL();
   1255c:	e0bff615 	stw	r2,-40(fp)
    pq = (OS_Q *)pevent->OSEventPtr;             /* Point at queue control block                       */
   12560:	e0bffd17 	ldw	r2,-12(fp)
   12564:	10800117 	ldw	r2,4(r2)
   12568:	e0bff715 	stw	r2,-36(fp)
    if (pq->OSQEntries > 0) {                    /* See if any messages in the queue                   */
   1256c:	e0bff717 	ldw	r2,-36(fp)
   12570:	1080058b 	ldhu	r2,22(r2)
   12574:	10bfffcc 	andi	r2,r2,65535
   12578:	10001e26 	beq	r2,zero,125f4 <OSQPend+0x17c>
        pmsg = *pq->OSQOut++;                    /* Yes, extract oldest message from the queue         */
   1257c:	e0bff717 	ldw	r2,-36(fp)
   12580:	10800417 	ldw	r2,16(r2)
   12584:	11000104 	addi	r4,r2,4
   12588:	e0fff717 	ldw	r3,-36(fp)
   1258c:	19000415 	stw	r4,16(r3)
   12590:	10800017 	ldw	r2,0(r2)
   12594:	e0bff515 	stw	r2,-44(fp)
        pq->OSQEntries--;                        /* Update the number of entries in the queue          */
   12598:	e0bff717 	ldw	r2,-36(fp)
   1259c:	1080058b 	ldhu	r2,22(r2)
   125a0:	10bfffc4 	addi	r2,r2,-1
   125a4:	1007883a 	mov	r3,r2
   125a8:	e0bff717 	ldw	r2,-36(fp)
   125ac:	10c0058d 	sth	r3,22(r2)
        if (pq->OSQOut == pq->OSQEnd) {          /* Wrap OUT pointer if we are at the end of the queue */
   125b0:	e0bff717 	ldw	r2,-36(fp)
   125b4:	10c00417 	ldw	r3,16(r2)
   125b8:	e0bff717 	ldw	r2,-36(fp)
   125bc:	10800217 	ldw	r2,8(r2)
   125c0:	1880041e 	bne	r3,r2,125d4 <OSQPend+0x15c>
            pq->OSQOut = pq->OSQStart;
   125c4:	e0bff717 	ldw	r2,-36(fp)
   125c8:	10c00117 	ldw	r3,4(r2)
   125cc:	e0bff717 	ldw	r2,-36(fp)
   125d0:	10c00415 	stw	r3,16(r2)
   125d4:	e0bff617 	ldw	r2,-40(fp)
   125d8:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   125dc:	e0bff917 	ldw	r2,-28(fp)
   125e0:	1001703a 	wrctl	status,r2
        }
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_NONE;
   125e4:	e0bfff17 	ldw	r2,-4(fp)
   125e8:	10000005 	stb	zero,0(r2)
        return (pmsg);                           /* Return message received                            */
   125ec:	e0bff517 	ldw	r2,-44(fp)
   125f0:	00005b06 	br	12760 <OSQPend+0x2e8>
    }
    OSTCBCur->OSTCBStat     |= OS_STAT_Q;        /* Task will have to pend for a message to be posted  */
   125f4:	008000b4 	movhi	r2,2
   125f8:	10b6d104 	addi	r2,r2,-9404
   125fc:	10c00017 	ldw	r3,0(r2)
   12600:	008000b4 	movhi	r2,2
   12604:	10b6d104 	addi	r2,r2,-9404
   12608:	10800017 	ldw	r2,0(r2)
   1260c:	10800c03 	ldbu	r2,48(r2)
   12610:	10800114 	ori	r2,r2,4
   12614:	18800c05 	stb	r2,48(r3)
    OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
   12618:	008000b4 	movhi	r2,2
   1261c:	10b6d104 	addi	r2,r2,-9404
   12620:	10800017 	ldw	r2,0(r2)
   12624:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBDly       = timeout;          /* Load timeout into TCB                              */
   12628:	008000b4 	movhi	r2,2
   1262c:	10b6d104 	addi	r2,r2,-9404
   12630:	10800017 	ldw	r2,0(r2)
   12634:	e0fffe0b 	ldhu	r3,-8(fp)
   12638:	10c00b8d 	sth	r3,46(r2)
    OS_EventTaskWait(pevent);                    /* Suspend task until event or timeout occurs         */
   1263c:	e13ffd17 	ldw	r4,-12(fp)
   12640:	000ed380 	call	ed38 <OS_EventTaskWait>
   12644:	e0bff617 	ldw	r2,-40(fp)
   12648:	e0bffa15 	stw	r2,-24(fp)
   1264c:	e0bffa17 	ldw	r2,-24(fp)
   12650:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    OS_Sched();                                  /* Find next highest priority task ready to run       */
   12654:	000f5b80 	call	f5b8 <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   12658:	0005303a 	rdctl	r2,status
   1265c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   12660:	e0fffb17 	ldw	r3,-20(fp)
   12664:	00bfff84 	movi	r2,-2
   12668:	1884703a 	and	r2,r3,r2
   1266c:	1001703a 	wrctl	status,r2
  
  return context;
   12670:	e0bffb17 	ldw	r2,-20(fp)
    OS_ENTER_CRITICAL();
   12674:	e0bff615 	stw	r2,-40(fp)
    switch (OSTCBCur->OSTCBStatPend) {                /* See if we timed-out or aborted                */
   12678:	008000b4 	movhi	r2,2
   1267c:	10b6d104 	addi	r2,r2,-9404
   12680:	10800017 	ldw	r2,0(r2)
   12684:	10800c43 	ldbu	r2,49(r2)
   12688:	10803fcc 	andi	r2,r2,255
   1268c:	10000326 	beq	r2,zero,1269c <OSQPend+0x224>
   12690:	108000a0 	cmpeqi	r2,r2,2
   12694:	1000091e 	bne	r2,zero,126bc <OSQPend+0x244>
   12698:	00000d06 	br	126d0 <OSQPend+0x258>
        case OS_STAT_PEND_OK:                         /* Extract message from TCB (Put there by QPost) */
             pmsg =  OSTCBCur->OSTCBMsg;
   1269c:	008000b4 	movhi	r2,2
   126a0:	10b6d104 	addi	r2,r2,-9404
   126a4:	10800017 	ldw	r2,0(r2)
   126a8:	10800917 	ldw	r2,36(r2)
   126ac:	e0bff515 	stw	r2,-44(fp)
            *perr =  OS_ERR_NONE;
   126b0:	e0bfff17 	ldw	r2,-4(fp)
   126b4:	10000005 	stb	zero,0(r2)
             break;
   126b8:	00001006 	br	126fc <OSQPend+0x284>

        case OS_STAT_PEND_ABORT:
             pmsg = (void *)0;
   126bc:	e03ff515 	stw	zero,-44(fp)
            *perr =  OS_ERR_PEND_ABORT;               /* Indicate that we aborted                      */
   126c0:	e0bfff17 	ldw	r2,-4(fp)
   126c4:	00c00384 	movi	r3,14
   126c8:	10c00005 	stb	r3,0(r2)
             break;
   126cc:	00000b06 	br	126fc <OSQPend+0x284>

        case OS_STAT_PEND_TO:
        default:
             OS_EventTaskRemove(OSTCBCur, pevent);
   126d0:	008000b4 	movhi	r2,2
   126d4:	10b6d104 	addi	r2,r2,-9404
   126d8:	10800017 	ldw	r2,0(r2)
   126dc:	1009883a 	mov	r4,r2
   126e0:	e17ffd17 	ldw	r5,-12(fp)
   126e4:	000ef900 	call	ef90 <OS_EventTaskRemove>
             pmsg = (void *)0;
   126e8:	e03ff515 	stw	zero,-44(fp)
            *perr =  OS_ERR_TIMEOUT;                  /* Indicate that we didn't get event within TO   */
   126ec:	e0bfff17 	ldw	r2,-4(fp)
   126f0:	00c00284 	movi	r3,10
   126f4:	10c00005 	stb	r3,0(r2)
             break;
   126f8:	0001883a 	nop
    }
    OSTCBCur->OSTCBStat          =  OS_STAT_RDY;      /* Set   task  status to ready                   */
   126fc:	008000b4 	movhi	r2,2
   12700:	10b6d104 	addi	r2,r2,-9404
   12704:	10800017 	ldw	r2,0(r2)
   12708:	10000c05 	stb	zero,48(r2)
    OSTCBCur->OSTCBStatPend      =  OS_STAT_PEND_OK;  /* Clear pend  status                            */
   1270c:	008000b4 	movhi	r2,2
   12710:	10b6d104 	addi	r2,r2,-9404
   12714:	10800017 	ldw	r2,0(r2)
   12718:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;    /* Clear event pointers                          */
   1271c:	008000b4 	movhi	r2,2
   12720:	10b6d104 	addi	r2,r2,-9404
   12724:	10800017 	ldw	r2,0(r2)
   12728:	10000715 	stw	zero,28(r2)
#if (OS_EVENT_MULTI_EN > 0)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
   1272c:	008000b4 	movhi	r2,2
   12730:	10b6d104 	addi	r2,r2,-9404
   12734:	10800017 	ldw	r2,0(r2)
   12738:	10000815 	stw	zero,32(r2)
#endif
    OSTCBCur->OSTCBMsg           = (void      *)0;    /* Clear  received message                       */
   1273c:	008000b4 	movhi	r2,2
   12740:	10b6d104 	addi	r2,r2,-9404
   12744:	10800017 	ldw	r2,0(r2)
   12748:	10000915 	stw	zero,36(r2)
   1274c:	e0bff617 	ldw	r2,-40(fp)
   12750:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   12754:	e0bffc17 	ldw	r2,-16(fp)
   12758:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (pmsg);                                    /* Return received message                       */
   1275c:	e0bff517 	ldw	r2,-44(fp)
}
   12760:	e037883a 	mov	sp,fp
   12764:	dfc00117 	ldw	ra,4(sp)
   12768:	df000017 	ldw	fp,0(sp)
   1276c:	dec00204 	addi	sp,sp,8
   12770:	f800283a 	ret

00012774 <OSQPendAbort>:
*********************************************************************************************************
*/

#if OS_Q_PEND_ABORT_EN > 0
INT8U  OSQPendAbort (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
   12774:	defff604 	addi	sp,sp,-40
   12778:	dfc00915 	stw	ra,36(sp)
   1277c:	df000815 	stw	fp,32(sp)
   12780:	df000804 	addi	fp,sp,32
   12784:	e13ffd15 	stw	r4,-12(fp)
   12788:	2805883a 	mov	r2,r5
   1278c:	e1bfff15 	stw	r6,-4(fp)
   12790:	e0bffe05 	stb	r2,-8(fp)
    INT8U      nbr_tasks;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
   12794:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
   12798:	e0bfff17 	ldw	r2,-4(fp)
   1279c:	1000021e 	bne	r2,zero,127a8 <OSQPendAbort+0x34>
        return (0);
   127a0:	0005883a 	mov	r2,zero
   127a4:	00004906 	br	128cc <OSQPendAbort+0x158>
    }
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
   127a8:	e0bffd17 	ldw	r2,-12(fp)
   127ac:	1000051e 	bne	r2,zero,127c4 <OSQPendAbort+0x50>
        *perr = OS_ERR_PEVENT_NULL;
   127b0:	e0bfff17 	ldw	r2,-4(fp)
   127b4:	00c00104 	movi	r3,4
   127b8:	10c00005 	stb	r3,0(r2)
        return (0);
   127bc:	0005883a 	mov	r2,zero
   127c0:	00004206 	br	128cc <OSQPendAbort+0x158>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {          /* Validate event block type                */
   127c4:	e0bffd17 	ldw	r2,-12(fp)
   127c8:	10800003 	ldbu	r2,0(r2)
   127cc:	10803fcc 	andi	r2,r2,255
   127d0:	108000a0 	cmpeqi	r2,r2,2
   127d4:	1000051e 	bne	r2,zero,127ec <OSQPendAbort+0x78>
        *perr = OS_ERR_EVENT_TYPE;
   127d8:	e0bfff17 	ldw	r2,-4(fp)
   127dc:	00c00044 	movi	r3,1
   127e0:	10c00005 	stb	r3,0(r2)
        return (0);
   127e4:	0005883a 	mov	r2,zero
   127e8:	00003806 	br	128cc <OSQPendAbort+0x158>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   127ec:	0005303a 	rdctl	r2,status
   127f0:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   127f4:	e0fffa17 	ldw	r3,-24(fp)
   127f8:	00bfff84 	movi	r2,-2
   127fc:	1884703a 	and	r2,r3,r2
   12800:	1001703a 	wrctl	status,r2
  
  return context;
   12804:	e0bffa17 	ldw	r2,-24(fp)
    }
    OS_ENTER_CRITICAL();
   12808:	e0bff915 	stw	r2,-28(fp)
    if (pevent->OSEventGrp != 0) {                         /* See if any task waiting on queue?        */
   1280c:	e0bffd17 	ldw	r2,-12(fp)
   12810:	10800283 	ldbu	r2,10(r2)
   12814:	10803fcc 	andi	r2,r2,255
   12818:	10002526 	beq	r2,zero,128b0 <OSQPendAbort+0x13c>
        nbr_tasks = 0;
   1281c:	e03ff805 	stb	zero,-32(fp)
        switch (opt) {
   12820:	e0bffe03 	ldbu	r2,-8(fp)
   12824:	10800060 	cmpeqi	r2,r2,1
   12828:	10000e26 	beq	r2,zero,12864 <OSQPendAbort+0xf0>
            case OS_PEND_OPT_BROADCAST:                    /* Do we need to abort ALL waiting tasks?   */
                 while (pevent->OSEventGrp != 0) {         /* Yes, ready ALL tasks waiting on queue    */
   1282c:	00000806 	br	12850 <OSQPendAbort+0xdc>
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_ABORT);
   12830:	e13ffd17 	ldw	r4,-12(fp)
   12834:	000b883a 	mov	r5,zero
   12838:	01800104 	movi	r6,4
   1283c:	01c00084 	movi	r7,2
   12840:	000eba00 	call	eba0 <OS_EventTaskRdy>
                     nbr_tasks++;
   12844:	e0bff803 	ldbu	r2,-32(fp)
   12848:	10800044 	addi	r2,r2,1
   1284c:	e0bff805 	stb	r2,-32(fp)
    OS_ENTER_CRITICAL();
    if (pevent->OSEventGrp != 0) {                         /* See if any task waiting on queue?        */
        nbr_tasks = 0;
        switch (opt) {
            case OS_PEND_OPT_BROADCAST:                    /* Do we need to abort ALL waiting tasks?   */
                 while (pevent->OSEventGrp != 0) {         /* Yes, ready ALL tasks waiting on queue    */
   12850:	e0bffd17 	ldw	r2,-12(fp)
   12854:	10800283 	ldbu	r2,10(r2)
   12858:	10803fcc 	andi	r2,r2,255
   1285c:	103ff41e 	bne	r2,zero,12830 <__alt_mem_Flash_flash_data+0xf4012830>
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_ABORT);
                     nbr_tasks++;
                 }
                 break;
   12860:	00000906 	br	12888 <OSQPendAbort+0x114>
               
            case OS_PEND_OPT_NONE:
            default:                                       /* No,  ready HPT       waiting on queue    */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_ABORT);
   12864:	e13ffd17 	ldw	r4,-12(fp)
   12868:	000b883a 	mov	r5,zero
   1286c:	01800104 	movi	r6,4
   12870:	01c00084 	movi	r7,2
   12874:	000eba00 	call	eba0 <OS_EventTaskRdy>
                 nbr_tasks++;
   12878:	e0bff803 	ldbu	r2,-32(fp)
   1287c:	10800044 	addi	r2,r2,1
   12880:	e0bff805 	stb	r2,-32(fp)
                 break;
   12884:	0001883a 	nop
   12888:	e0bff917 	ldw	r2,-28(fp)
   1288c:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   12890:	e0bffb17 	ldw	r2,-20(fp)
   12894:	1001703a 	wrctl	status,r2
        }
        OS_EXIT_CRITICAL();
        OS_Sched();                                        /* Find HPT ready to run                    */
   12898:	000f5b80 	call	f5b8 <OS_Sched>
        *perr = OS_ERR_PEND_ABORT;
   1289c:	e0bfff17 	ldw	r2,-4(fp)
   128a0:	00c00384 	movi	r3,14
   128a4:	10c00005 	stb	r3,0(r2)
        return (nbr_tasks);
   128a8:	e0bff803 	ldbu	r2,-32(fp)
   128ac:	00000706 	br	128cc <OSQPendAbort+0x158>
   128b0:	e0bff917 	ldw	r2,-28(fp)
   128b4:	e0bffc15 	stw	r2,-16(fp)
   128b8:	e0bffc17 	ldw	r2,-16(fp)
   128bc:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
   128c0:	e0bfff17 	ldw	r2,-4(fp)
   128c4:	10000005 	stb	zero,0(r2)
    return (0);                                            /* No tasks waiting on queue                */
   128c8:	0005883a 	mov	r2,zero
}
   128cc:	e037883a 	mov	sp,fp
   128d0:	dfc00117 	ldw	ra,4(sp)
   128d4:	df000017 	ldw	fp,0(sp)
   128d8:	dec00204 	addi	sp,sp,8
   128dc:	f800283a 	ret

000128e0 <OSQPost>:
*********************************************************************************************************
*/

#if OS_Q_POST_EN > 0
INT8U  OSQPost (OS_EVENT *pevent, void *pmsg)
{
   128e0:	defff604 	addi	sp,sp,-40
   128e4:	dfc00915 	stw	ra,36(sp)
   128e8:	df000815 	stw	fp,32(sp)
   128ec:	df000804 	addi	fp,sp,32
   128f0:	e13ffe15 	stw	r4,-8(fp)
   128f4:	e17fff15 	stw	r5,-4(fp)
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                            /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
   128f8:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                     /* Validate 'pevent'                            */
   128fc:	e0bffe17 	ldw	r2,-8(fp)
   12900:	1000021e 	bne	r2,zero,1290c <OSQPost+0x2c>
        return (OS_ERR_PEVENT_NULL);
   12904:	00800104 	movi	r2,4
   12908:	00004a06 	br	12a34 <OSQPost+0x154>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {      /* Validate event block type                    */
   1290c:	e0bffe17 	ldw	r2,-8(fp)
   12910:	10800003 	ldbu	r2,0(r2)
   12914:	10803fcc 	andi	r2,r2,255
   12918:	108000a0 	cmpeqi	r2,r2,2
   1291c:	1000021e 	bne	r2,zero,12928 <OSQPost+0x48>
        return (OS_ERR_EVENT_TYPE);
   12920:	00800044 	movi	r2,1
   12924:	00004306 	br	12a34 <OSQPost+0x154>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   12928:	0005303a 	rdctl	r2,status
   1292c:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   12930:	e0fffa17 	ldw	r3,-24(fp)
   12934:	00bfff84 	movi	r2,-2
   12938:	1884703a 	and	r2,r3,r2
   1293c:	1001703a 	wrctl	status,r2
  
  return context;
   12940:	e0bffa17 	ldw	r2,-24(fp)
    }
    OS_ENTER_CRITICAL();
   12944:	e0bff815 	stw	r2,-32(fp)
    if (pevent->OSEventGrp != 0) {                     /* See if any task pending on queue             */
   12948:	e0bffe17 	ldw	r2,-8(fp)
   1294c:	10800283 	ldbu	r2,10(r2)
   12950:	10803fcc 	andi	r2,r2,255
   12954:	10000c26 	beq	r2,zero,12988 <OSQPost+0xa8>
                                                       /* Ready highest priority task waiting on event */
        (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
   12958:	e13ffe17 	ldw	r4,-8(fp)
   1295c:	e17fff17 	ldw	r5,-4(fp)
   12960:	01800104 	movi	r6,4
   12964:	000f883a 	mov	r7,zero
   12968:	000eba00 	call	eba0 <OS_EventTaskRdy>
   1296c:	e0bff817 	ldw	r2,-32(fp)
   12970:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   12974:	e0bffb17 	ldw	r2,-20(fp)
   12978:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                                    /* Find highest priority task ready to run      */
   1297c:	000f5b80 	call	f5b8 <OS_Sched>
        return (OS_ERR_NONE);
   12980:	0005883a 	mov	r2,zero
   12984:	00002b06 	br	12a34 <OSQPost+0x154>
    }
    pq = (OS_Q *)pevent->OSEventPtr;                   /* Point to queue control block                 */
   12988:	e0bffe17 	ldw	r2,-8(fp)
   1298c:	10800117 	ldw	r2,4(r2)
   12990:	e0bff915 	stw	r2,-28(fp)
    if (pq->OSQEntries >= pq->OSQSize) {               /* Make sure queue is not full                  */
   12994:	e0bff917 	ldw	r2,-28(fp)
   12998:	10c0058b 	ldhu	r3,22(r2)
   1299c:	e0bff917 	ldw	r2,-28(fp)
   129a0:	1080050b 	ldhu	r2,20(r2)
   129a4:	18ffffcc 	andi	r3,r3,65535
   129a8:	10bfffcc 	andi	r2,r2,65535
   129ac:	18800636 	bltu	r3,r2,129c8 <OSQPost+0xe8>
   129b0:	e0bff817 	ldw	r2,-32(fp)
   129b4:	e0bffc15 	stw	r2,-16(fp)
   129b8:	e0bffc17 	ldw	r2,-16(fp)
   129bc:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_Q_FULL);
   129c0:	00800784 	movi	r2,30
   129c4:	00001b06 	br	12a34 <OSQPost+0x154>
    }
    *pq->OSQIn++ = pmsg;                               /* Insert message into queue                    */
   129c8:	e0bff917 	ldw	r2,-28(fp)
   129cc:	10800317 	ldw	r2,12(r2)
   129d0:	11000104 	addi	r4,r2,4
   129d4:	e0fff917 	ldw	r3,-28(fp)
   129d8:	19000315 	stw	r4,12(r3)
   129dc:	e0ffff17 	ldw	r3,-4(fp)
   129e0:	10c00015 	stw	r3,0(r2)
    pq->OSQEntries++;                                  /* Update the nbr of entries in the queue       */
   129e4:	e0bff917 	ldw	r2,-28(fp)
   129e8:	1080058b 	ldhu	r2,22(r2)
   129ec:	10800044 	addi	r2,r2,1
   129f0:	1007883a 	mov	r3,r2
   129f4:	e0bff917 	ldw	r2,-28(fp)
   129f8:	10c0058d 	sth	r3,22(r2)
    if (pq->OSQIn == pq->OSQEnd) {                     /* Wrap IN ptr if we are at end of queue        */
   129fc:	e0bff917 	ldw	r2,-28(fp)
   12a00:	10c00317 	ldw	r3,12(r2)
   12a04:	e0bff917 	ldw	r2,-28(fp)
   12a08:	10800217 	ldw	r2,8(r2)
   12a0c:	1880041e 	bne	r3,r2,12a20 <OSQPost+0x140>
        pq->OSQIn = pq->OSQStart;
   12a10:	e0bff917 	ldw	r2,-28(fp)
   12a14:	10c00117 	ldw	r3,4(r2)
   12a18:	e0bff917 	ldw	r2,-28(fp)
   12a1c:	10c00315 	stw	r3,12(r2)
   12a20:	e0bff817 	ldw	r2,-32(fp)
   12a24:	e0bffd15 	stw	r2,-12(fp)
   12a28:	e0bffd17 	ldw	r2,-12(fp)
   12a2c:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
   12a30:	0005883a 	mov	r2,zero
}
   12a34:	e037883a 	mov	sp,fp
   12a38:	dfc00117 	ldw	ra,4(sp)
   12a3c:	df000017 	ldw	fp,0(sp)
   12a40:	dec00204 	addi	sp,sp,8
   12a44:	f800283a 	ret

00012a48 <OSQPostFront>:
*********************************************************************************************************
*/

#if OS_Q_POST_FRONT_EN > 0
INT8U  OSQPostFront (OS_EVENT *pevent, void *pmsg)
{
   12a48:	defff604 	addi	sp,sp,-40
   12a4c:	dfc00915 	stw	ra,36(sp)
   12a50:	df000815 	stw	fp,32(sp)
   12a54:	df000804 	addi	fp,sp,32
   12a58:	e13ffe15 	stw	r4,-8(fp)
   12a5c:	e17fff15 	stw	r5,-4(fp)
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   12a60:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
   12a64:	e0bffe17 	ldw	r2,-8(fp)
   12a68:	1000021e 	bne	r2,zero,12a74 <OSQPostFront+0x2c>
        return (OS_ERR_PEVENT_NULL);
   12a6c:	00800104 	movi	r2,4
   12a70:	00004c06 	br	12ba4 <OSQPostFront+0x15c>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {     /* Validate event block type                     */
   12a74:	e0bffe17 	ldw	r2,-8(fp)
   12a78:	10800003 	ldbu	r2,0(r2)
   12a7c:	10803fcc 	andi	r2,r2,255
   12a80:	108000a0 	cmpeqi	r2,r2,2
   12a84:	1000021e 	bne	r2,zero,12a90 <OSQPostFront+0x48>
        return (OS_ERR_EVENT_TYPE);
   12a88:	00800044 	movi	r2,1
   12a8c:	00004506 	br	12ba4 <OSQPostFront+0x15c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   12a90:	0005303a 	rdctl	r2,status
   12a94:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   12a98:	e0fffa17 	ldw	r3,-24(fp)
   12a9c:	00bfff84 	movi	r2,-2
   12aa0:	1884703a 	and	r2,r3,r2
   12aa4:	1001703a 	wrctl	status,r2
  
  return context;
   12aa8:	e0bffa17 	ldw	r2,-24(fp)
    }
    OS_ENTER_CRITICAL();
   12aac:	e0bff815 	stw	r2,-32(fp)
    if (pevent->OSEventGrp != 0) {                    /* See if any task pending on queue              */
   12ab0:	e0bffe17 	ldw	r2,-8(fp)
   12ab4:	10800283 	ldbu	r2,10(r2)
   12ab8:	10803fcc 	andi	r2,r2,255
   12abc:	10000c26 	beq	r2,zero,12af0 <OSQPostFront+0xa8>
                                                      /* Ready highest priority task waiting on event  */
        (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
   12ac0:	e13ffe17 	ldw	r4,-8(fp)
   12ac4:	e17fff17 	ldw	r5,-4(fp)
   12ac8:	01800104 	movi	r6,4
   12acc:	000f883a 	mov	r7,zero
   12ad0:	000eba00 	call	eba0 <OS_EventTaskRdy>
   12ad4:	e0bff817 	ldw	r2,-32(fp)
   12ad8:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   12adc:	e0bffb17 	ldw	r2,-20(fp)
   12ae0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                                   /* Find highest priority task ready to run       */
   12ae4:	000f5b80 	call	f5b8 <OS_Sched>
        return (OS_ERR_NONE);
   12ae8:	0005883a 	mov	r2,zero
   12aec:	00002d06 	br	12ba4 <OSQPostFront+0x15c>
    }
    pq = (OS_Q *)pevent->OSEventPtr;                  /* Point to queue control block                  */
   12af0:	e0bffe17 	ldw	r2,-8(fp)
   12af4:	10800117 	ldw	r2,4(r2)
   12af8:	e0bff915 	stw	r2,-28(fp)
    if (pq->OSQEntries >= pq->OSQSize) {              /* Make sure queue is not full                   */
   12afc:	e0bff917 	ldw	r2,-28(fp)
   12b00:	10c0058b 	ldhu	r3,22(r2)
   12b04:	e0bff917 	ldw	r2,-28(fp)
   12b08:	1080050b 	ldhu	r2,20(r2)
   12b0c:	18ffffcc 	andi	r3,r3,65535
   12b10:	10bfffcc 	andi	r2,r2,65535
   12b14:	18800636 	bltu	r3,r2,12b30 <OSQPostFront+0xe8>
   12b18:	e0bff817 	ldw	r2,-32(fp)
   12b1c:	e0bffc15 	stw	r2,-16(fp)
   12b20:	e0bffc17 	ldw	r2,-16(fp)
   12b24:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_Q_FULL);
   12b28:	00800784 	movi	r2,30
   12b2c:	00001d06 	br	12ba4 <OSQPostFront+0x15c>
    }
    if (pq->OSQOut == pq->OSQStart) {                 /* Wrap OUT ptr if we are at the 1st queue entry */
   12b30:	e0bff917 	ldw	r2,-28(fp)
   12b34:	10c00417 	ldw	r3,16(r2)
   12b38:	e0bff917 	ldw	r2,-28(fp)
   12b3c:	10800117 	ldw	r2,4(r2)
   12b40:	1880041e 	bne	r3,r2,12b54 <OSQPostFront+0x10c>
        pq->OSQOut = pq->OSQEnd;
   12b44:	e0bff917 	ldw	r2,-28(fp)
   12b48:	10c00217 	ldw	r3,8(r2)
   12b4c:	e0bff917 	ldw	r2,-28(fp)
   12b50:	10c00415 	stw	r3,16(r2)
    }
    pq->OSQOut--;
   12b54:	e0bff917 	ldw	r2,-28(fp)
   12b58:	10800417 	ldw	r2,16(r2)
   12b5c:	10ffff04 	addi	r3,r2,-4
   12b60:	e0bff917 	ldw	r2,-28(fp)
   12b64:	10c00415 	stw	r3,16(r2)
    *pq->OSQOut = pmsg;                               /* Insert message into queue                     */
   12b68:	e0bff917 	ldw	r2,-28(fp)
   12b6c:	10800417 	ldw	r2,16(r2)
   12b70:	e0ffff17 	ldw	r3,-4(fp)
   12b74:	10c00015 	stw	r3,0(r2)
    pq->OSQEntries++;                                 /* Update the nbr of entries in the queue        */
   12b78:	e0bff917 	ldw	r2,-28(fp)
   12b7c:	1080058b 	ldhu	r2,22(r2)
   12b80:	10800044 	addi	r2,r2,1
   12b84:	1007883a 	mov	r3,r2
   12b88:	e0bff917 	ldw	r2,-28(fp)
   12b8c:	10c0058d 	sth	r3,22(r2)
   12b90:	e0bff817 	ldw	r2,-32(fp)
   12b94:	e0bffd15 	stw	r2,-12(fp)
   12b98:	e0bffd17 	ldw	r2,-12(fp)
   12b9c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
   12ba0:	0005883a 	mov	r2,zero
}
   12ba4:	e037883a 	mov	sp,fp
   12ba8:	dfc00117 	ldw	ra,4(sp)
   12bac:	df000017 	ldw	fp,0(sp)
   12bb0:	dec00204 	addi	sp,sp,8
   12bb4:	f800283a 	ret

00012bb8 <OSQPostOpt>:
*********************************************************************************************************
*/

#if OS_Q_POST_OPT_EN > 0
INT8U  OSQPostOpt (OS_EVENT *pevent, void *pmsg, INT8U opt)
{
   12bb8:	defff504 	addi	sp,sp,-44
   12bbc:	dfc00a15 	stw	ra,40(sp)
   12bc0:	df000915 	stw	fp,36(sp)
   12bc4:	df000904 	addi	fp,sp,36
   12bc8:	e13ffd15 	stw	r4,-12(fp)
   12bcc:	e17ffe15 	stw	r5,-8(fp)
   12bd0:	3005883a 	mov	r2,r6
   12bd4:	e0bfff05 	stb	r2,-4(fp)
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   12bd8:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
   12bdc:	e0bffd17 	ldw	r2,-12(fp)
   12be0:	1000021e 	bne	r2,zero,12bec <OSQPostOpt+0x34>
        return (OS_ERR_PEVENT_NULL);
   12be4:	00800104 	movi	r2,4
   12be8:	00007106 	br	12db0 <OSQPostOpt+0x1f8>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {     /* Validate event block type                     */
   12bec:	e0bffd17 	ldw	r2,-12(fp)
   12bf0:	10800003 	ldbu	r2,0(r2)
   12bf4:	10803fcc 	andi	r2,r2,255
   12bf8:	108000a0 	cmpeqi	r2,r2,2
   12bfc:	1000021e 	bne	r2,zero,12c08 <OSQPostOpt+0x50>
        return (OS_ERR_EVENT_TYPE);
   12c00:	00800044 	movi	r2,1
   12c04:	00006a06 	br	12db0 <OSQPostOpt+0x1f8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   12c08:	0005303a 	rdctl	r2,status
   12c0c:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   12c10:	e0fff917 	ldw	r3,-28(fp)
   12c14:	00bfff84 	movi	r2,-2
   12c18:	1884703a 	and	r2,r3,r2
   12c1c:	1001703a 	wrctl	status,r2
  
  return context;
   12c20:	e0bff917 	ldw	r2,-28(fp)
    }
    OS_ENTER_CRITICAL();
   12c24:	e0bff715 	stw	r2,-36(fp)
    if (pevent->OSEventGrp != 0x00) {                 /* See if any task pending on queue              */
   12c28:	e0bffd17 	ldw	r2,-12(fp)
   12c2c:	10800283 	ldbu	r2,10(r2)
   12c30:	10803fcc 	andi	r2,r2,255
   12c34:	10001d26 	beq	r2,zero,12cac <OSQPostOpt+0xf4>
        if ((opt & OS_POST_OPT_BROADCAST) != 0x00) {  /* Do we need to post msg to ALL waiting tasks ? */
   12c38:	e0bfff03 	ldbu	r2,-4(fp)
   12c3c:	1080004c 	andi	r2,r2,1
   12c40:	10000b26 	beq	r2,zero,12c70 <OSQPostOpt+0xb8>
            while (pevent->OSEventGrp != 0) {         /* Yes, Post to ALL tasks waiting on queue       */
   12c44:	00000506 	br	12c5c <OSQPostOpt+0xa4>
                (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
   12c48:	e13ffd17 	ldw	r4,-12(fp)
   12c4c:	e17ffe17 	ldw	r5,-8(fp)
   12c50:	01800104 	movi	r6,4
   12c54:	000f883a 	mov	r7,zero
   12c58:	000eba00 	call	eba0 <OS_EventTaskRdy>
        return (OS_ERR_EVENT_TYPE);
    }
    OS_ENTER_CRITICAL();
    if (pevent->OSEventGrp != 0x00) {                 /* See if any task pending on queue              */
        if ((opt & OS_POST_OPT_BROADCAST) != 0x00) {  /* Do we need to post msg to ALL waiting tasks ? */
            while (pevent->OSEventGrp != 0) {         /* Yes, Post to ALL tasks waiting on queue       */
   12c5c:	e0bffd17 	ldw	r2,-12(fp)
   12c60:	10800283 	ldbu	r2,10(r2)
   12c64:	10803fcc 	andi	r2,r2,255
   12c68:	103ff71e 	bne	r2,zero,12c48 <__alt_mem_Flash_flash_data+0xf4012c48>
   12c6c:	00000506 	br	12c84 <OSQPostOpt+0xcc>
                (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
            }
        } else {                                      /* No,  Post to HPT waiting on queue             */
            (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
   12c70:	e13ffd17 	ldw	r4,-12(fp)
   12c74:	e17ffe17 	ldw	r5,-8(fp)
   12c78:	01800104 	movi	r6,4
   12c7c:	000f883a 	mov	r7,zero
   12c80:	000eba00 	call	eba0 <OS_EventTaskRdy>
   12c84:	e0bff717 	ldw	r2,-36(fp)
   12c88:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   12c8c:	e0bffa17 	ldw	r2,-24(fp)
   12c90:	1001703a 	wrctl	status,r2
        }
        OS_EXIT_CRITICAL();
        if ((opt & OS_POST_OPT_NO_SCHED) == 0) {	  /* See if scheduler needs to be invoked          */
   12c94:	e0bfff03 	ldbu	r2,-4(fp)
   12c98:	1080010c 	andi	r2,r2,4
   12c9c:	1000011e 	bne	r2,zero,12ca4 <OSQPostOpt+0xec>
            OS_Sched();                               /* Find highest priority task ready to run       */
   12ca0:	000f5b80 	call	f5b8 <OS_Sched>
        }
        return (OS_ERR_NONE);
   12ca4:	0005883a 	mov	r2,zero
   12ca8:	00004106 	br	12db0 <OSQPostOpt+0x1f8>
    }
    pq = (OS_Q *)pevent->OSEventPtr;                  /* Point to queue control block                  */
   12cac:	e0bffd17 	ldw	r2,-12(fp)
   12cb0:	10800117 	ldw	r2,4(r2)
   12cb4:	e0bff815 	stw	r2,-32(fp)
    if (pq->OSQEntries >= pq->OSQSize) {              /* Make sure queue is not full                   */
   12cb8:	e0bff817 	ldw	r2,-32(fp)
   12cbc:	10c0058b 	ldhu	r3,22(r2)
   12cc0:	e0bff817 	ldw	r2,-32(fp)
   12cc4:	1080050b 	ldhu	r2,20(r2)
   12cc8:	18ffffcc 	andi	r3,r3,65535
   12ccc:	10bfffcc 	andi	r2,r2,65535
   12cd0:	18800636 	bltu	r3,r2,12cec <OSQPostOpt+0x134>
   12cd4:	e0bff717 	ldw	r2,-36(fp)
   12cd8:	e0bffb15 	stw	r2,-20(fp)
   12cdc:	e0bffb17 	ldw	r2,-20(fp)
   12ce0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_Q_FULL);
   12ce4:	00800784 	movi	r2,30
   12ce8:	00003106 	br	12db0 <OSQPostOpt+0x1f8>
    }
    if ((opt & OS_POST_OPT_FRONT) != 0x00) {          /* Do we post to the FRONT of the queue?         */
   12cec:	e0bfff03 	ldbu	r2,-4(fp)
   12cf0:	1080008c 	andi	r2,r2,2
   12cf4:	10001326 	beq	r2,zero,12d44 <OSQPostOpt+0x18c>
        if (pq->OSQOut == pq->OSQStart) {             /* Yes, Post as LIFO, Wrap OUT pointer if we ... */
   12cf8:	e0bff817 	ldw	r2,-32(fp)
   12cfc:	10c00417 	ldw	r3,16(r2)
   12d00:	e0bff817 	ldw	r2,-32(fp)
   12d04:	10800117 	ldw	r2,4(r2)
   12d08:	1880041e 	bne	r3,r2,12d1c <OSQPostOpt+0x164>
            pq->OSQOut = pq->OSQEnd;                  /*      ... are at the 1st queue entry           */
   12d0c:	e0bff817 	ldw	r2,-32(fp)
   12d10:	10c00217 	ldw	r3,8(r2)
   12d14:	e0bff817 	ldw	r2,-32(fp)
   12d18:	10c00415 	stw	r3,16(r2)
        }
        pq->OSQOut--;
   12d1c:	e0bff817 	ldw	r2,-32(fp)
   12d20:	10800417 	ldw	r2,16(r2)
   12d24:	10ffff04 	addi	r3,r2,-4
   12d28:	e0bff817 	ldw	r2,-32(fp)
   12d2c:	10c00415 	stw	r3,16(r2)
        *pq->OSQOut = pmsg;                           /*      Insert message into queue                */
   12d30:	e0bff817 	ldw	r2,-32(fp)
   12d34:	10800417 	ldw	r2,16(r2)
   12d38:	e0fffe17 	ldw	r3,-8(fp)
   12d3c:	10c00015 	stw	r3,0(r2)
   12d40:	00001006 	br	12d84 <OSQPostOpt+0x1cc>
    } else {                                          /* No,  Post as FIFO                             */
        *pq->OSQIn++ = pmsg;                          /*      Insert message into queue                */
   12d44:	e0bff817 	ldw	r2,-32(fp)
   12d48:	10800317 	ldw	r2,12(r2)
   12d4c:	11000104 	addi	r4,r2,4
   12d50:	e0fff817 	ldw	r3,-32(fp)
   12d54:	19000315 	stw	r4,12(r3)
   12d58:	e0fffe17 	ldw	r3,-8(fp)
   12d5c:	10c00015 	stw	r3,0(r2)
        if (pq->OSQIn == pq->OSQEnd) {                /*      Wrap IN ptr if we are at end of queue    */
   12d60:	e0bff817 	ldw	r2,-32(fp)
   12d64:	10c00317 	ldw	r3,12(r2)
   12d68:	e0bff817 	ldw	r2,-32(fp)
   12d6c:	10800217 	ldw	r2,8(r2)
   12d70:	1880041e 	bne	r3,r2,12d84 <OSQPostOpt+0x1cc>
            pq->OSQIn = pq->OSQStart;
   12d74:	e0bff817 	ldw	r2,-32(fp)
   12d78:	10c00117 	ldw	r3,4(r2)
   12d7c:	e0bff817 	ldw	r2,-32(fp)
   12d80:	10c00315 	stw	r3,12(r2)
        }
    }
    pq->OSQEntries++;                                 /* Update the nbr of entries in the queue        */
   12d84:	e0bff817 	ldw	r2,-32(fp)
   12d88:	1080058b 	ldhu	r2,22(r2)
   12d8c:	10800044 	addi	r2,r2,1
   12d90:	1007883a 	mov	r3,r2
   12d94:	e0bff817 	ldw	r2,-32(fp)
   12d98:	10c0058d 	sth	r3,22(r2)
   12d9c:	e0bff717 	ldw	r2,-36(fp)
   12da0:	e0bffc15 	stw	r2,-16(fp)
   12da4:	e0bffc17 	ldw	r2,-16(fp)
   12da8:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
   12dac:	0005883a 	mov	r2,zero
}
   12db0:	e037883a 	mov	sp,fp
   12db4:	dfc00117 	ldw	ra,4(sp)
   12db8:	df000017 	ldw	fp,0(sp)
   12dbc:	dec00204 	addi	sp,sp,8
   12dc0:	f800283a 	ret

00012dc4 <OSQQuery>:
*********************************************************************************************************
*/

#if OS_Q_QUERY_EN > 0
INT8U  OSQQuery (OS_EVENT *pevent, OS_Q_DATA *p_q_data)
{
   12dc4:	defff604 	addi	sp,sp,-40
   12dc8:	df000915 	stw	fp,36(sp)
   12dcc:	df000904 	addi	fp,sp,36
   12dd0:	e13ffe15 	stw	r4,-8(fp)
   12dd4:	e17fff15 	stw	r5,-4(fp)
#else
    INT16U    *psrc;
    INT16U    *pdest;
#endif
#if OS_CRITICAL_METHOD == 3                            /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
   12dd8:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                     /* Validate 'pevent'                            */
   12ddc:	e0bffe17 	ldw	r2,-8(fp)
   12de0:	1000021e 	bne	r2,zero,12dec <OSQQuery+0x28>
        return (OS_ERR_PEVENT_NULL);
   12de4:	00800104 	movi	r2,4
   12de8:	00004906 	br	12f10 <OSQQuery+0x14c>
    }
    if (p_q_data == (OS_Q_DATA *)0) {                  /* Validate 'p_q_data'                          */
   12dec:	e0bfff17 	ldw	r2,-4(fp)
   12df0:	1000021e 	bne	r2,zero,12dfc <OSQQuery+0x38>
        return (OS_ERR_PDATA_NULL);
   12df4:	00800244 	movi	r2,9
   12df8:	00004506 	br	12f10 <OSQQuery+0x14c>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {      /* Validate event block type                    */
   12dfc:	e0bffe17 	ldw	r2,-8(fp)
   12e00:	10800003 	ldbu	r2,0(r2)
   12e04:	10803fcc 	andi	r2,r2,255
   12e08:	108000a0 	cmpeqi	r2,r2,2
   12e0c:	1000021e 	bne	r2,zero,12e18 <OSQQuery+0x54>
        return (OS_ERR_EVENT_TYPE);
   12e10:	00800044 	movi	r2,1
   12e14:	00003e06 	br	12f10 <OSQQuery+0x14c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   12e18:	0005303a 	rdctl	r2,status
   12e1c:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   12e20:	e0fffc17 	ldw	r3,-16(fp)
   12e24:	00bfff84 	movi	r2,-2
   12e28:	1884703a 	and	r2,r3,r2
   12e2c:	1001703a 	wrctl	status,r2
  
  return context;
   12e30:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
   12e34:	e0bffa15 	stw	r2,-24(fp)
    p_q_data->OSEventGrp = pevent->OSEventGrp;         /* Copy message queue wait list                 */
   12e38:	e0bffe17 	ldw	r2,-8(fp)
   12e3c:	10c00283 	ldbu	r3,10(r2)
   12e40:	e0bfff17 	ldw	r2,-4(fp)
   12e44:	10c002c5 	stb	r3,11(r2)
    psrc                 = &pevent->OSEventTbl[0];
   12e48:	e0bffe17 	ldw	r2,-8(fp)
   12e4c:	108002c4 	addi	r2,r2,11
   12e50:	e0bff815 	stw	r2,-32(fp)
    pdest                = &p_q_data->OSEventTbl[0];
   12e54:	e0bfff17 	ldw	r2,-4(fp)
   12e58:	10800204 	addi	r2,r2,8
   12e5c:	e0bff915 	stw	r2,-28(fp)
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
   12e60:	e03ff705 	stb	zero,-36(fp)
   12e64:	00000b06 	br	12e94 <OSQQuery+0xd0>
        *pdest++ = *psrc++;
   12e68:	e0bff917 	ldw	r2,-28(fp)
   12e6c:	10c00044 	addi	r3,r2,1
   12e70:	e0fff915 	stw	r3,-28(fp)
   12e74:	e0fff817 	ldw	r3,-32(fp)
   12e78:	19000044 	addi	r4,r3,1
   12e7c:	e13ff815 	stw	r4,-32(fp)
   12e80:	18c00003 	ldbu	r3,0(r3)
   12e84:	10c00005 	stb	r3,0(r2)
    }
    OS_ENTER_CRITICAL();
    p_q_data->OSEventGrp = pevent->OSEventGrp;         /* Copy message queue wait list                 */
    psrc                 = &pevent->OSEventTbl[0];
    pdest                = &p_q_data->OSEventTbl[0];
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
   12e88:	e0bff703 	ldbu	r2,-36(fp)
   12e8c:	10800044 	addi	r2,r2,1
   12e90:	e0bff705 	stb	r2,-36(fp)
   12e94:	e0bff703 	ldbu	r2,-36(fp)
   12e98:	108000f0 	cmpltui	r2,r2,3
   12e9c:	103ff21e 	bne	r2,zero,12e68 <__alt_mem_Flash_flash_data+0xf4012e68>
        *pdest++ = *psrc++;
    }
    pq = (OS_Q *)pevent->OSEventPtr;
   12ea0:	e0bffe17 	ldw	r2,-8(fp)
   12ea4:	10800117 	ldw	r2,4(r2)
   12ea8:	e0bffb15 	stw	r2,-20(fp)
    if (pq->OSQEntries > 0) {
   12eac:	e0bffb17 	ldw	r2,-20(fp)
   12eb0:	1080058b 	ldhu	r2,22(r2)
   12eb4:	10bfffcc 	andi	r2,r2,65535
   12eb8:	10000626 	beq	r2,zero,12ed4 <OSQQuery+0x110>
        p_q_data->OSMsg = *pq->OSQOut;                 /* Get next message to return if available      */
   12ebc:	e0bffb17 	ldw	r2,-20(fp)
   12ec0:	10800417 	ldw	r2,16(r2)
   12ec4:	10c00017 	ldw	r3,0(r2)
   12ec8:	e0bfff17 	ldw	r2,-4(fp)
   12ecc:	10c00015 	stw	r3,0(r2)
   12ed0:	00000206 	br	12edc <OSQQuery+0x118>
    } else {
        p_q_data->OSMsg = (void *)0;
   12ed4:	e0bfff17 	ldw	r2,-4(fp)
   12ed8:	10000015 	stw	zero,0(r2)
    }
    p_q_data->OSNMsgs = pq->OSQEntries;
   12edc:	e0bffb17 	ldw	r2,-20(fp)
   12ee0:	10c0058b 	ldhu	r3,22(r2)
   12ee4:	e0bfff17 	ldw	r2,-4(fp)
   12ee8:	10c0010d 	sth	r3,4(r2)
    p_q_data->OSQSize = pq->OSQSize;
   12eec:	e0bffb17 	ldw	r2,-20(fp)
   12ef0:	10c0050b 	ldhu	r3,20(r2)
   12ef4:	e0bfff17 	ldw	r2,-4(fp)
   12ef8:	10c0018d 	sth	r3,6(r2)
   12efc:	e0bffa17 	ldw	r2,-24(fp)
   12f00:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   12f04:	e0bffd17 	ldw	r2,-12(fp)
   12f08:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
   12f0c:	0005883a 	mov	r2,zero
}
   12f10:	e037883a 	mov	sp,fp
   12f14:	df000017 	ldw	fp,0(sp)
   12f18:	dec00104 	addi	sp,sp,4
   12f1c:	f800283a 	ret

00012f20 <OS_QInit>:
* Note(s)    : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

void  OS_QInit (void)
{
   12f20:	defffb04 	addi	sp,sp,-20
   12f24:	dfc00415 	stw	ra,16(sp)
   12f28:	df000315 	stw	fp,12(sp)
   12f2c:	df000304 	addi	fp,sp,12
    OS_Q   *pq1;
    OS_Q   *pq2;



    OS_MemClr((INT8U *)&OSQTbl[0], sizeof(OSQTbl));  /* Clear the queue table                          */
   12f30:	010000b4 	movhi	r4,2
   12f34:	2114cc04 	addi	r4,r4,21296
   12f38:	01407804 	movi	r5,480
   12f3c:	000f5040 	call	f504 <OS_MemClr>
    pq1 = &OSQTbl[0];
   12f40:	008000b4 	movhi	r2,2
   12f44:	1094cc04 	addi	r2,r2,21296
   12f48:	e0bffe15 	stw	r2,-8(fp)
    pq2 = &OSQTbl[1];
   12f4c:	008000b4 	movhi	r2,2
   12f50:	1094d204 	addi	r2,r2,21320
   12f54:	e0bfff15 	stw	r2,-4(fp)
    for (i = 0; i < (OS_MAX_QS - 1); i++) {          /* Init. list of free QUEUE control blocks        */
   12f58:	e03ffd0d 	sth	zero,-12(fp)
   12f5c:	00000c06 	br	12f90 <OS_QInit+0x70>
        pq1->OSQPtr = pq2;
   12f60:	e0bffe17 	ldw	r2,-8(fp)
   12f64:	e0ffff17 	ldw	r3,-4(fp)
   12f68:	10c00015 	stw	r3,0(r2)
        pq1++;
   12f6c:	e0bffe17 	ldw	r2,-8(fp)
   12f70:	10800604 	addi	r2,r2,24
   12f74:	e0bffe15 	stw	r2,-8(fp)
        pq2++;
   12f78:	e0bfff17 	ldw	r2,-4(fp)
   12f7c:	10800604 	addi	r2,r2,24
   12f80:	e0bfff15 	stw	r2,-4(fp)


    OS_MemClr((INT8U *)&OSQTbl[0], sizeof(OSQTbl));  /* Clear the queue table                          */
    pq1 = &OSQTbl[0];
    pq2 = &OSQTbl[1];
    for (i = 0; i < (OS_MAX_QS - 1); i++) {          /* Init. list of free QUEUE control blocks        */
   12f84:	e0bffd0b 	ldhu	r2,-12(fp)
   12f88:	10800044 	addi	r2,r2,1
   12f8c:	e0bffd0d 	sth	r2,-12(fp)
   12f90:	e0bffd0b 	ldhu	r2,-12(fp)
   12f94:	108004f0 	cmpltui	r2,r2,19
   12f98:	103ff11e 	bne	r2,zero,12f60 <__alt_mem_Flash_flash_data+0xf4012f60>
        pq1->OSQPtr = pq2;
        pq1++;
        pq2++;
    }
    pq1->OSQPtr = (OS_Q *)0;
   12f9c:	e0bffe17 	ldw	r2,-8(fp)
   12fa0:	10000015 	stw	zero,0(r2)
    OSQFreeList = &OSQTbl[0];
   12fa4:	008000b4 	movhi	r2,2
   12fa8:	10b6cd04 	addi	r2,r2,-9420
   12fac:	00c000b4 	movhi	r3,2
   12fb0:	18d4cc04 	addi	r3,r3,21296
   12fb4:	10c00015 	stw	r3,0(r2)
#endif
}
   12fb8:	e037883a 	mov	sp,fp
   12fbc:	dfc00117 	ldw	ra,4(sp)
   12fc0:	df000017 	ldw	fp,0(sp)
   12fc4:	dec00204 	addi	sp,sp,8
   12fc8:	f800283a 	ret

00012fcc <OSSemAccept>:
*********************************************************************************************************
*/

#if OS_SEM_ACCEPT_EN > 0
INT16U  OSSemAccept (OS_EVENT *pevent)
{
   12fcc:	defffa04 	addi	sp,sp,-24
   12fd0:	df000515 	stw	fp,20(sp)
   12fd4:	df000504 	addi	fp,sp,20
   12fd8:	e13fff15 	stw	r4,-4(fp)
    INT16U     cnt;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   12fdc:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
   12fe0:	e0bfff17 	ldw	r2,-4(fp)
   12fe4:	1000021e 	bne	r2,zero,12ff0 <OSSemAccept+0x24>
        return (0);
   12fe8:	0005883a 	mov	r2,zero
   12fec:	00001f06 	br	1306c <OSSemAccept+0xa0>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
   12ff0:	e0bfff17 	ldw	r2,-4(fp)
   12ff4:	10800003 	ldbu	r2,0(r2)
   12ff8:	10803fcc 	andi	r2,r2,255
   12ffc:	108000e0 	cmpeqi	r2,r2,3
   13000:	1000021e 	bne	r2,zero,1300c <OSSemAccept+0x40>
        return (0);
   13004:	0005883a 	mov	r2,zero
   13008:	00001806 	br	1306c <OSSemAccept+0xa0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1300c:	0005303a 	rdctl	r2,status
   13010:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   13014:	e0fffd17 	ldw	r3,-12(fp)
   13018:	00bfff84 	movi	r2,-2
   1301c:	1884703a 	and	r2,r3,r2
   13020:	1001703a 	wrctl	status,r2
  
  return context;
   13024:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
   13028:	e0bffb15 	stw	r2,-20(fp)
    cnt = pevent->OSEventCnt;
   1302c:	e0bfff17 	ldw	r2,-4(fp)
   13030:	1080020b 	ldhu	r2,8(r2)
   13034:	e0bffc0d 	sth	r2,-16(fp)
    if (cnt > 0) {                                    /* See if resource is available                  */
   13038:	e0bffc0b 	ldhu	r2,-16(fp)
   1303c:	10000626 	beq	r2,zero,13058 <OSSemAccept+0x8c>
        pevent->OSEventCnt--;                         /* Yes, decrement semaphore and notify caller    */
   13040:	e0bfff17 	ldw	r2,-4(fp)
   13044:	1080020b 	ldhu	r2,8(r2)
   13048:	10bfffc4 	addi	r2,r2,-1
   1304c:	1007883a 	mov	r3,r2
   13050:	e0bfff17 	ldw	r2,-4(fp)
   13054:	10c0020d 	sth	r3,8(r2)
   13058:	e0bffb17 	ldw	r2,-20(fp)
   1305c:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   13060:	e0bffe17 	ldw	r2,-8(fp)
   13064:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (cnt);                                     /* Return semaphore count                        */
   13068:	e0bffc0b 	ldhu	r2,-16(fp)
}
   1306c:	e037883a 	mov	sp,fp
   13070:	df000017 	ldw	fp,0(sp)
   13074:	dec00104 	addi	sp,sp,4
   13078:	f800283a 	ret

0001307c <OSSemCreate>:
*              == (void *)0  if no event control blocks were available
*********************************************************************************************************
*/

OS_EVENT  *OSSemCreate (INT16U cnt)
{
   1307c:	defff904 	addi	sp,sp,-28
   13080:	dfc00615 	stw	ra,24(sp)
   13084:	df000515 	stw	fp,20(sp)
   13088:	df000504 	addi	fp,sp,20
   1308c:	2005883a 	mov	r2,r4
   13090:	e0bfff0d 	sth	r2,-4(fp)
    OS_EVENT  *pevent;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
   13094:	e03ffb15 	stw	zero,-20(fp)
#endif



    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
   13098:	008000b4 	movhi	r2,2
   1309c:	10b6d004 	addi	r2,r2,-9408
   130a0:	10800003 	ldbu	r2,0(r2)
   130a4:	10803fcc 	andi	r2,r2,255
   130a8:	10000226 	beq	r2,zero,130b4 <OSSemCreate+0x38>
        return ((OS_EVENT *)0);                            /* ... can't CREATE from an ISR             */
   130ac:	0005883a 	mov	r2,zero
   130b0:	00002d06 	br	13168 <OSSemCreate+0xec>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   130b4:	0005303a 	rdctl	r2,status
   130b8:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   130bc:	e0fffd17 	ldw	r3,-12(fp)
   130c0:	00bfff84 	movi	r2,-2
   130c4:	1884703a 	and	r2,r3,r2
   130c8:	1001703a 	wrctl	status,r2
  
  return context;
   130cc:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
   130d0:	e0bffb15 	stw	r2,-20(fp)
    pevent = OSEventFreeList;                              /* Get next free event control block        */
   130d4:	008000b4 	movhi	r2,2
   130d8:	10b6cf04 	addi	r2,r2,-9412
   130dc:	10800017 	ldw	r2,0(r2)
   130e0:	e0bffc15 	stw	r2,-16(fp)
    if (OSEventFreeList != (OS_EVENT *)0) {                /* See if pool of free ECB pool was empty   */
   130e4:	008000b4 	movhi	r2,2
   130e8:	10b6cf04 	addi	r2,r2,-9412
   130ec:	10800017 	ldw	r2,0(r2)
   130f0:	10000726 	beq	r2,zero,13110 <OSSemCreate+0x94>
        OSEventFreeList = (OS_EVENT *)OSEventFreeList->OSEventPtr;
   130f4:	008000b4 	movhi	r2,2
   130f8:	10b6cf04 	addi	r2,r2,-9412
   130fc:	10800017 	ldw	r2,0(r2)
   13100:	10c00117 	ldw	r3,4(r2)
   13104:	008000b4 	movhi	r2,2
   13108:	10b6cf04 	addi	r2,r2,-9412
   1310c:	10c00015 	stw	r3,0(r2)
   13110:	e0bffb17 	ldw	r2,-20(fp)
   13114:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   13118:	e0bffe17 	ldw	r2,-8(fp)
   1311c:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    if (pevent != (OS_EVENT *)0) {                         /* Get an event control block               */
   13120:	e0bffc17 	ldw	r2,-16(fp)
   13124:	10000f26 	beq	r2,zero,13164 <OSSemCreate+0xe8>
        pevent->OSEventType    = OS_EVENT_TYPE_SEM;
   13128:	e0bffc17 	ldw	r2,-16(fp)
   1312c:	00c000c4 	movi	r3,3
   13130:	10c00005 	stb	r3,0(r2)
        pevent->OSEventCnt     = cnt;                      /* Set semaphore value                      */
   13134:	e0bffc17 	ldw	r2,-16(fp)
   13138:	e0ffff0b 	ldhu	r3,-4(fp)
   1313c:	10c0020d 	sth	r3,8(r2)
        pevent->OSEventPtr     = (void *)0;                /* Unlink from ECB free list                */
   13140:	e0bffc17 	ldw	r2,-16(fp)
   13144:	10000115 	stw	zero,4(r2)
#if OS_EVENT_NAME_SIZE > 1
        pevent->OSEventName[0] = '?';                      /* Unknown name                             */
   13148:	e0bffc17 	ldw	r2,-16(fp)
   1314c:	00c00fc4 	movi	r3,63
   13150:	10c00385 	stb	r3,14(r2)
        pevent->OSEventName[1] = OS_ASCII_NUL;
   13154:	e0bffc17 	ldw	r2,-16(fp)
   13158:	100003c5 	stb	zero,15(r2)
#endif
        OS_EventWaitListInit(pevent);                      /* Initialize to 'nobody waiting' on sem.   */
   1315c:	e13ffc17 	ldw	r4,-16(fp)
   13160:	000f1400 	call	f140 <OS_EventWaitListInit>
    }
    return (pevent);
   13164:	e0bffc17 	ldw	r2,-16(fp)
}
   13168:	e037883a 	mov	sp,fp
   1316c:	dfc00117 	ldw	ra,4(sp)
   13170:	df000017 	ldw	fp,0(sp)
   13174:	dec00204 	addi	sp,sp,8
   13178:	f800283a 	ret

0001317c <OSSemDel>:
*********************************************************************************************************
*/

#if OS_SEM_DEL_EN > 0
OS_EVENT  *OSSemDel (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
   1317c:	defff304 	addi	sp,sp,-52
   13180:	dfc00c15 	stw	ra,48(sp)
   13184:	df000b15 	stw	fp,44(sp)
   13188:	df000b04 	addi	fp,sp,44
   1318c:	e13ffd15 	stw	r4,-12(fp)
   13190:	2805883a 	mov	r2,r5
   13194:	e1bfff15 	stw	r6,-4(fp)
   13198:	e0bffe05 	stb	r2,-8(fp)
    BOOLEAN    tasks_waiting;
    OS_EVENT  *pevent_return;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
   1319c:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
   131a0:	e0bfff17 	ldw	r2,-4(fp)
   131a4:	1000021e 	bne	r2,zero,131b0 <OSSemDel+0x34>
        return (pevent);
   131a8:	e0bffd17 	ldw	r2,-12(fp)
   131ac:	00008806 	br	133d0 <OSSemDel+0x254>
    }
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
   131b0:	e0bffd17 	ldw	r2,-12(fp)
   131b4:	1000051e 	bne	r2,zero,131cc <OSSemDel+0x50>
        *perr = OS_ERR_PEVENT_NULL;
   131b8:	e0bfff17 	ldw	r2,-4(fp)
   131bc:	00c00104 	movi	r3,4
   131c0:	10c00005 	stb	r3,0(r2)
        return (pevent);
   131c4:	e0bffd17 	ldw	r2,-12(fp)
   131c8:	00008106 	br	133d0 <OSSemDel+0x254>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {        /* Validate event block type                */
   131cc:	e0bffd17 	ldw	r2,-12(fp)
   131d0:	10800003 	ldbu	r2,0(r2)
   131d4:	10803fcc 	andi	r2,r2,255
   131d8:	108000e0 	cmpeqi	r2,r2,3
   131dc:	1000051e 	bne	r2,zero,131f4 <OSSemDel+0x78>
        *perr = OS_ERR_EVENT_TYPE;
   131e0:	e0bfff17 	ldw	r2,-4(fp)
   131e4:	00c00044 	movi	r3,1
   131e8:	10c00005 	stb	r3,0(r2)
        return (pevent);
   131ec:	e0bffd17 	ldw	r2,-12(fp)
   131f0:	00007706 	br	133d0 <OSSemDel+0x254>
    }
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
   131f4:	008000b4 	movhi	r2,2
   131f8:	10b6d004 	addi	r2,r2,-9408
   131fc:	10800003 	ldbu	r2,0(r2)
   13200:	10803fcc 	andi	r2,r2,255
   13204:	10000526 	beq	r2,zero,1321c <OSSemDel+0xa0>
        *perr = OS_ERR_DEL_ISR;                             /* ... can't DELETE from an ISR             */
   13208:	e0bfff17 	ldw	r2,-4(fp)
   1320c:	00c003c4 	movi	r3,15
   13210:	10c00005 	stb	r3,0(r2)
        return (pevent);
   13214:	e0bffd17 	ldw	r2,-12(fp)
   13218:	00006d06 	br	133d0 <OSSemDel+0x254>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1321c:	0005303a 	rdctl	r2,status
   13220:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   13224:	e0fff817 	ldw	r3,-32(fp)
   13228:	00bfff84 	movi	r2,-2
   1322c:	1884703a 	and	r2,r3,r2
   13230:	1001703a 	wrctl	status,r2
  
  return context;
   13234:	e0bff817 	ldw	r2,-32(fp)
    }
    OS_ENTER_CRITICAL();
   13238:	e0bff715 	stw	r2,-36(fp)
    if (pevent->OSEventGrp != 0) {                         /* See if any tasks waiting on semaphore    */
   1323c:	e0bffd17 	ldw	r2,-12(fp)
   13240:	10800283 	ldbu	r2,10(r2)
   13244:	10803fcc 	andi	r2,r2,255
   13248:	10000326 	beq	r2,zero,13258 <OSSemDel+0xdc>
        tasks_waiting = OS_TRUE;                           /* Yes                                      */
   1324c:	00800044 	movi	r2,1
   13250:	e0bff505 	stb	r2,-44(fp)
   13254:	00000106 	br	1325c <OSSemDel+0xe0>
    } else {
        tasks_waiting = OS_FALSE;                          /* No                                       */
   13258:	e03ff505 	stb	zero,-44(fp)
    }
    switch (opt) {
   1325c:	e0bffe03 	ldbu	r2,-8(fp)
   13260:	10000326 	beq	r2,zero,13270 <OSSemDel+0xf4>
   13264:	10800060 	cmpeqi	r2,r2,1
   13268:	10002c1e 	bne	r2,zero,1331c <OSSemDel+0x1a0>
   1326c:	00004d06 	br	133a4 <OSSemDel+0x228>
        case OS_DEL_NO_PEND:                               /* Delete semaphore only if no task waiting */
             if (tasks_waiting == OS_FALSE) {
   13270:	e0bff503 	ldbu	r2,-44(fp)
   13274:	10001a1e 	bne	r2,zero,132e0 <OSSemDel+0x164>
#if OS_EVENT_NAME_SIZE > 1
                 pevent->OSEventName[0] = '?';             /* Unknown name                             */
   13278:	e0bffd17 	ldw	r2,-12(fp)
   1327c:	00c00fc4 	movi	r3,63
   13280:	10c00385 	stb	r3,14(r2)
                 pevent->OSEventName[1] = OS_ASCII_NUL;
   13284:	e0bffd17 	ldw	r2,-12(fp)
   13288:	100003c5 	stb	zero,15(r2)
#endif
                 pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
   1328c:	e0bffd17 	ldw	r2,-12(fp)
   13290:	10000005 	stb	zero,0(r2)
                 pevent->OSEventPtr     = OSEventFreeList; /* Return Event Control Block to free list  */
   13294:	008000b4 	movhi	r2,2
   13298:	10b6cf04 	addi	r2,r2,-9412
   1329c:	10c00017 	ldw	r3,0(r2)
   132a0:	e0bffd17 	ldw	r2,-12(fp)
   132a4:	10c00115 	stw	r3,4(r2)
                 pevent->OSEventCnt     = 0;
   132a8:	e0bffd17 	ldw	r2,-12(fp)
   132ac:	1000020d 	sth	zero,8(r2)
                 OSEventFreeList        = pevent;          /* Get next free event control block        */
   132b0:	008000b4 	movhi	r2,2
   132b4:	10b6cf04 	addi	r2,r2,-9412
   132b8:	e0fffd17 	ldw	r3,-12(fp)
   132bc:	10c00015 	stw	r3,0(r2)
   132c0:	e0bff717 	ldw	r2,-36(fp)
   132c4:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   132c8:	e0bff917 	ldw	r2,-28(fp)
   132cc:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_NONE;
   132d0:	e0bfff17 	ldw	r2,-4(fp)
   132d4:	10000005 	stb	zero,0(r2)
                 pevent_return          = (OS_EVENT *)0;   /* Semaphore has been deleted               */
   132d8:	e03ff615 	stw	zero,-40(fp)
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_TASK_WAITING;
                 pevent_return          = pevent;
             }
             break;
   132dc:	00003b06 	br	133cc <OSSemDel+0x250>
   132e0:	e0bff717 	ldw	r2,-36(fp)
   132e4:	e0bffa15 	stw	r2,-24(fp)
   132e8:	e0bffa17 	ldw	r2,-24(fp)
   132ec:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_NONE;
                 pevent_return          = (OS_EVENT *)0;   /* Semaphore has been deleted               */
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_TASK_WAITING;
   132f0:	e0bfff17 	ldw	r2,-4(fp)
   132f4:	00c01244 	movi	r3,73
   132f8:	10c00005 	stb	r3,0(r2)
                 pevent_return          = pevent;
   132fc:	e0bffd17 	ldw	r2,-12(fp)
   13300:	e0bff615 	stw	r2,-40(fp)
             }
             break;
   13304:	00003106 	br	133cc <OSSemDel+0x250>

        case OS_DEL_ALWAYS:                                /* Always delete the semaphore              */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for semaphore    */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_OK);
   13308:	e13ffd17 	ldw	r4,-12(fp)
   1330c:	000b883a 	mov	r5,zero
   13310:	01800044 	movi	r6,1
   13314:	000f883a 	mov	r7,zero
   13318:	000eba00 	call	eba0 <OS_EventTaskRdy>
                 pevent_return          = pevent;
             }
             break;

        case OS_DEL_ALWAYS:                                /* Always delete the semaphore              */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for semaphore    */
   1331c:	e0bffd17 	ldw	r2,-12(fp)
   13320:	10800283 	ldbu	r2,10(r2)
   13324:	10803fcc 	andi	r2,r2,255
   13328:	103ff71e 	bne	r2,zero,13308 <__alt_mem_Flash_flash_data+0xf4013308>
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_OK);
             }
#if OS_EVENT_NAME_SIZE > 1
             pevent->OSEventName[0] = '?';                 /* Unknown name                             */
   1332c:	e0bffd17 	ldw	r2,-12(fp)
   13330:	00c00fc4 	movi	r3,63
   13334:	10c00385 	stb	r3,14(r2)
             pevent->OSEventName[1] = OS_ASCII_NUL;
   13338:	e0bffd17 	ldw	r2,-12(fp)
   1333c:	100003c5 	stb	zero,15(r2)
#endif
             pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
   13340:	e0bffd17 	ldw	r2,-12(fp)
   13344:	10000005 	stb	zero,0(r2)
             pevent->OSEventPtr     = OSEventFreeList;     /* Return Event Control Block to free list  */
   13348:	008000b4 	movhi	r2,2
   1334c:	10b6cf04 	addi	r2,r2,-9412
   13350:	10c00017 	ldw	r3,0(r2)
   13354:	e0bffd17 	ldw	r2,-12(fp)
   13358:	10c00115 	stw	r3,4(r2)
             pevent->OSEventCnt     = 0;
   1335c:	e0bffd17 	ldw	r2,-12(fp)
   13360:	1000020d 	sth	zero,8(r2)
             OSEventFreeList        = pevent;              /* Get next free event control block        */
   13364:	008000b4 	movhi	r2,2
   13368:	10b6cf04 	addi	r2,r2,-9412
   1336c:	e0fffd17 	ldw	r3,-12(fp)
   13370:	10c00015 	stw	r3,0(r2)
   13374:	e0bff717 	ldw	r2,-36(fp)
   13378:	e0bffb15 	stw	r2,-20(fp)
   1337c:	e0bffb17 	ldw	r2,-20(fp)
   13380:	1001703a 	wrctl	status,r2
             OS_EXIT_CRITICAL();
             if (tasks_waiting == OS_TRUE) {               /* Reschedule only if task(s) were waiting  */
   13384:	e0bff503 	ldbu	r2,-44(fp)
   13388:	10800058 	cmpnei	r2,r2,1
   1338c:	1000011e 	bne	r2,zero,13394 <OSSemDel+0x218>
                 OS_Sched();                               /* Find highest priority task ready to run  */
   13390:	000f5b80 	call	f5b8 <OS_Sched>
             }
             *perr                  = OS_ERR_NONE;
   13394:	e0bfff17 	ldw	r2,-4(fp)
   13398:	10000005 	stb	zero,0(r2)
             pevent_return          = (OS_EVENT *)0;       /* Semaphore has been deleted               */
   1339c:	e03ff615 	stw	zero,-40(fp)
             break;
   133a0:	00000a06 	br	133cc <OSSemDel+0x250>
   133a4:	e0bff717 	ldw	r2,-36(fp)
   133a8:	e0bffc15 	stw	r2,-16(fp)
   133ac:	e0bffc17 	ldw	r2,-16(fp)
   133b0:	1001703a 	wrctl	status,r2

        default:
             OS_EXIT_CRITICAL();
             *perr                  = OS_ERR_INVALID_OPT;
   133b4:	e0bfff17 	ldw	r2,-4(fp)
   133b8:	00c001c4 	movi	r3,7
   133bc:	10c00005 	stb	r3,0(r2)
             pevent_return          = pevent;
   133c0:	e0bffd17 	ldw	r2,-12(fp)
   133c4:	e0bff615 	stw	r2,-40(fp)
             break;
   133c8:	0001883a 	nop
    }
    return (pevent_return);
   133cc:	e0bff617 	ldw	r2,-40(fp)
}
   133d0:	e037883a 	mov	sp,fp
   133d4:	dfc00117 	ldw	ra,4(sp)
   133d8:	df000017 	ldw	fp,0(sp)
   133dc:	dec00204 	addi	sp,sp,8
   133e0:	f800283a 	ret

000133e4 <OSSemPend>:
* Returns    : none
*********************************************************************************************************
*/
/*$PAGE*/
void  OSSemPend (OS_EVENT *pevent, INT16U timeout, INT8U *perr)
{
   133e4:	defff504 	addi	sp,sp,-44
   133e8:	dfc00a15 	stw	ra,40(sp)
   133ec:	df000915 	stw	fp,36(sp)
   133f0:	df000904 	addi	fp,sp,36
   133f4:	e13ffd15 	stw	r4,-12(fp)
   133f8:	2805883a 	mov	r2,r5
   133fc:	e1bfff15 	stw	r6,-4(fp)
   13400:	e0bffe0d 	sth	r2,-8(fp)
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   13404:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
   13408:	e0bfff17 	ldw	r2,-4(fp)
   1340c:	1000011e 	bne	r2,zero,13414 <OSSemPend+0x30>
        return;
   13410:	00008906 	br	13638 <OSSemPend+0x254>
    }
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
   13414:	e0bffd17 	ldw	r2,-12(fp)
   13418:	1000041e 	bne	r2,zero,1342c <OSSemPend+0x48>
        *perr = OS_ERR_PEVENT_NULL;
   1341c:	e0bfff17 	ldw	r2,-4(fp)
   13420:	00c00104 	movi	r3,4
   13424:	10c00005 	stb	r3,0(r2)
        return;
   13428:	00008306 	br	13638 <OSSemPend+0x254>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
   1342c:	e0bffd17 	ldw	r2,-12(fp)
   13430:	10800003 	ldbu	r2,0(r2)
   13434:	10803fcc 	andi	r2,r2,255
   13438:	108000e0 	cmpeqi	r2,r2,3
   1343c:	1000041e 	bne	r2,zero,13450 <OSSemPend+0x6c>
        *perr = OS_ERR_EVENT_TYPE;
   13440:	e0bfff17 	ldw	r2,-4(fp)
   13444:	00c00044 	movi	r3,1
   13448:	10c00005 	stb	r3,0(r2)
        return;
   1344c:	00007a06 	br	13638 <OSSemPend+0x254>
    }
    if (OSIntNesting > 0) {                           /* See if called from ISR ...                    */
   13450:	008000b4 	movhi	r2,2
   13454:	10b6d004 	addi	r2,r2,-9408
   13458:	10800003 	ldbu	r2,0(r2)
   1345c:	10803fcc 	andi	r2,r2,255
   13460:	10000426 	beq	r2,zero,13474 <OSSemPend+0x90>
        *perr = OS_ERR_PEND_ISR;                      /* ... can't PEND from an ISR                    */
   13464:	e0bfff17 	ldw	r2,-4(fp)
   13468:	00c00084 	movi	r3,2
   1346c:	10c00005 	stb	r3,0(r2)
        return;
   13470:	00007106 	br	13638 <OSSemPend+0x254>
    }
    if (OSLockNesting > 0) {                          /* See if called with scheduler locked ...       */
   13474:	008000b4 	movhi	r2,2
   13478:	10b6c204 	addi	r2,r2,-9464
   1347c:	10800003 	ldbu	r2,0(r2)
   13480:	10803fcc 	andi	r2,r2,255
   13484:	10000426 	beq	r2,zero,13498 <OSSemPend+0xb4>
        *perr = OS_ERR_PEND_LOCKED;                   /* ... can't PEND when locked                    */
   13488:	e0bfff17 	ldw	r2,-4(fp)
   1348c:	00c00344 	movi	r3,13
   13490:	10c00005 	stb	r3,0(r2)
        return;
   13494:	00006806 	br	13638 <OSSemPend+0x254>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   13498:	0005303a 	rdctl	r2,status
   1349c:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   134a0:	e0fff817 	ldw	r3,-32(fp)
   134a4:	00bfff84 	movi	r2,-2
   134a8:	1884703a 	and	r2,r3,r2
   134ac:	1001703a 	wrctl	status,r2
  
  return context;
   134b0:	e0bff817 	ldw	r2,-32(fp)
    }
    OS_ENTER_CRITICAL();
   134b4:	e0bff715 	stw	r2,-36(fp)
    if (pevent->OSEventCnt > 0) {                     /* If sem. is positive, resource available ...   */
   134b8:	e0bffd17 	ldw	r2,-12(fp)
   134bc:	1080020b 	ldhu	r2,8(r2)
   134c0:	10bfffcc 	andi	r2,r2,65535
   134c4:	10000d26 	beq	r2,zero,134fc <OSSemPend+0x118>
        pevent->OSEventCnt--;                         /* ... decrement semaphore only if positive.     */
   134c8:	e0bffd17 	ldw	r2,-12(fp)
   134cc:	1080020b 	ldhu	r2,8(r2)
   134d0:	10bfffc4 	addi	r2,r2,-1
   134d4:	1007883a 	mov	r3,r2
   134d8:	e0bffd17 	ldw	r2,-12(fp)
   134dc:	10c0020d 	sth	r3,8(r2)
   134e0:	e0bff717 	ldw	r2,-36(fp)
   134e4:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   134e8:	e0bff917 	ldw	r2,-28(fp)
   134ec:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_NONE;
   134f0:	e0bfff17 	ldw	r2,-4(fp)
   134f4:	10000005 	stb	zero,0(r2)
        return;
   134f8:	00004f06 	br	13638 <OSSemPend+0x254>
    }
                                                      /* Otherwise, must wait until event occurs       */
    OSTCBCur->OSTCBStat     |= OS_STAT_SEM;           /* Resource not available, pend on semaphore     */
   134fc:	008000b4 	movhi	r2,2
   13500:	10b6d104 	addi	r2,r2,-9404
   13504:	10c00017 	ldw	r3,0(r2)
   13508:	008000b4 	movhi	r2,2
   1350c:	10b6d104 	addi	r2,r2,-9404
   13510:	10800017 	ldw	r2,0(r2)
   13514:	10800c03 	ldbu	r2,48(r2)
   13518:	10800054 	ori	r2,r2,1
   1351c:	18800c05 	stb	r2,48(r3)
    OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
   13520:	008000b4 	movhi	r2,2
   13524:	10b6d104 	addi	r2,r2,-9404
   13528:	10800017 	ldw	r2,0(r2)
   1352c:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBDly       = timeout;               /* Store pend timeout in TCB                     */
   13530:	008000b4 	movhi	r2,2
   13534:	10b6d104 	addi	r2,r2,-9404
   13538:	10800017 	ldw	r2,0(r2)
   1353c:	e0fffe0b 	ldhu	r3,-8(fp)
   13540:	10c00b8d 	sth	r3,46(r2)
    OS_EventTaskWait(pevent);                         /* Suspend task until event or timeout occurs    */
   13544:	e13ffd17 	ldw	r4,-12(fp)
   13548:	000ed380 	call	ed38 <OS_EventTaskWait>
   1354c:	e0bff717 	ldw	r2,-36(fp)
   13550:	e0bffa15 	stw	r2,-24(fp)
   13554:	e0bffa17 	ldw	r2,-24(fp)
   13558:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    OS_Sched();                                       /* Find next highest priority task ready         */
   1355c:	000f5b80 	call	f5b8 <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   13560:	0005303a 	rdctl	r2,status
   13564:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   13568:	e0fffb17 	ldw	r3,-20(fp)
   1356c:	00bfff84 	movi	r2,-2
   13570:	1884703a 	and	r2,r3,r2
   13574:	1001703a 	wrctl	status,r2
  
  return context;
   13578:	e0bffb17 	ldw	r2,-20(fp)
    OS_ENTER_CRITICAL();
   1357c:	e0bff715 	stw	r2,-36(fp)
    switch (OSTCBCur->OSTCBStatPend) {                /* See if we timed-out or aborted                */
   13580:	008000b4 	movhi	r2,2
   13584:	10b6d104 	addi	r2,r2,-9404
   13588:	10800017 	ldw	r2,0(r2)
   1358c:	10800c43 	ldbu	r2,49(r2)
   13590:	10803fcc 	andi	r2,r2,255
   13594:	10000326 	beq	r2,zero,135a4 <OSSemPend+0x1c0>
   13598:	108000a0 	cmpeqi	r2,r2,2
   1359c:	1000041e 	bne	r2,zero,135b0 <OSSemPend+0x1cc>
   135a0:	00000706 	br	135c0 <OSSemPend+0x1dc>
        case OS_STAT_PEND_OK:
             *perr = OS_ERR_NONE;
   135a4:	e0bfff17 	ldw	r2,-4(fp)
   135a8:	10000005 	stb	zero,0(r2)
             break;
   135ac:	00000e06 	br	135e8 <OSSemPend+0x204>

        case OS_STAT_PEND_ABORT:
             *perr = OS_ERR_PEND_ABORT;               /* Indicate that we aborted                      */
   135b0:	e0bfff17 	ldw	r2,-4(fp)
   135b4:	00c00384 	movi	r3,14
   135b8:	10c00005 	stb	r3,0(r2)
             break;
   135bc:	00000a06 	br	135e8 <OSSemPend+0x204>

        case OS_STAT_PEND_TO:
        default:        
             OS_EventTaskRemove(OSTCBCur, pevent);
   135c0:	008000b4 	movhi	r2,2
   135c4:	10b6d104 	addi	r2,r2,-9404
   135c8:	10800017 	ldw	r2,0(r2)
   135cc:	1009883a 	mov	r4,r2
   135d0:	e17ffd17 	ldw	r5,-12(fp)
   135d4:	000ef900 	call	ef90 <OS_EventTaskRemove>
             *perr = OS_ERR_TIMEOUT;                  /* Indicate that we didn't get event within TO   */
   135d8:	e0bfff17 	ldw	r2,-4(fp)
   135dc:	00c00284 	movi	r3,10
   135e0:	10c00005 	stb	r3,0(r2)
             break;
   135e4:	0001883a 	nop
    }
    OSTCBCur->OSTCBStat          =  OS_STAT_RDY;      /* Set   task  status to ready                   */
   135e8:	008000b4 	movhi	r2,2
   135ec:	10b6d104 	addi	r2,r2,-9404
   135f0:	10800017 	ldw	r2,0(r2)
   135f4:	10000c05 	stb	zero,48(r2)
    OSTCBCur->OSTCBStatPend      =  OS_STAT_PEND_OK;  /* Clear pend  status                            */
   135f8:	008000b4 	movhi	r2,2
   135fc:	10b6d104 	addi	r2,r2,-9404
   13600:	10800017 	ldw	r2,0(r2)
   13604:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;    /* Clear event pointers                          */
   13608:	008000b4 	movhi	r2,2
   1360c:	10b6d104 	addi	r2,r2,-9404
   13610:	10800017 	ldw	r2,0(r2)
   13614:	10000715 	stw	zero,28(r2)
#if (OS_EVENT_MULTI_EN > 0)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
   13618:	008000b4 	movhi	r2,2
   1361c:	10b6d104 	addi	r2,r2,-9404
   13620:	10800017 	ldw	r2,0(r2)
   13624:	10000815 	stw	zero,32(r2)
   13628:	e0bff717 	ldw	r2,-36(fp)
   1362c:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   13630:	e0bffc17 	ldw	r2,-16(fp)
   13634:	1001703a 	wrctl	status,r2
#endif
    OS_EXIT_CRITICAL();
}
   13638:	e037883a 	mov	sp,fp
   1363c:	dfc00117 	ldw	ra,4(sp)
   13640:	df000017 	ldw	fp,0(sp)
   13644:	dec00204 	addi	sp,sp,8
   13648:	f800283a 	ret

0001364c <OSSemPendAbort>:
*********************************************************************************************************
*/

#if OS_SEM_PEND_ABORT_EN > 0
INT8U  OSSemPendAbort (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
   1364c:	defff604 	addi	sp,sp,-40
   13650:	dfc00915 	stw	ra,36(sp)
   13654:	df000815 	stw	fp,32(sp)
   13658:	df000804 	addi	fp,sp,32
   1365c:	e13ffd15 	stw	r4,-12(fp)
   13660:	2805883a 	mov	r2,r5
   13664:	e1bfff15 	stw	r6,-4(fp)
   13668:	e0bffe05 	stb	r2,-8(fp)
    INT8U      nbr_tasks;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   1366c:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
   13670:	e0bfff17 	ldw	r2,-4(fp)
   13674:	1000021e 	bne	r2,zero,13680 <OSSemPendAbort+0x34>
        return (0);
   13678:	0005883a 	mov	r2,zero
   1367c:	00004906 	br	137a4 <OSSemPendAbort+0x158>
    }
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
   13680:	e0bffd17 	ldw	r2,-12(fp)
   13684:	1000051e 	bne	r2,zero,1369c <OSSemPendAbort+0x50>
        *perr = OS_ERR_PEVENT_NULL;
   13688:	e0bfff17 	ldw	r2,-4(fp)
   1368c:	00c00104 	movi	r3,4
   13690:	10c00005 	stb	r3,0(r2)
        return (0);
   13694:	0005883a 	mov	r2,zero
   13698:	00004206 	br	137a4 <OSSemPendAbort+0x158>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
   1369c:	e0bffd17 	ldw	r2,-12(fp)
   136a0:	10800003 	ldbu	r2,0(r2)
   136a4:	10803fcc 	andi	r2,r2,255
   136a8:	108000e0 	cmpeqi	r2,r2,3
   136ac:	1000051e 	bne	r2,zero,136c4 <OSSemPendAbort+0x78>
        *perr = OS_ERR_EVENT_TYPE;
   136b0:	e0bfff17 	ldw	r2,-4(fp)
   136b4:	00c00044 	movi	r3,1
   136b8:	10c00005 	stb	r3,0(r2)
        return (0);
   136bc:	0005883a 	mov	r2,zero
   136c0:	00003806 	br	137a4 <OSSemPendAbort+0x158>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   136c4:	0005303a 	rdctl	r2,status
   136c8:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   136cc:	e0fffa17 	ldw	r3,-24(fp)
   136d0:	00bfff84 	movi	r2,-2
   136d4:	1884703a 	and	r2,r3,r2
   136d8:	1001703a 	wrctl	status,r2
  
  return context;
   136dc:	e0bffa17 	ldw	r2,-24(fp)
    }
    OS_ENTER_CRITICAL();
   136e0:	e0bff915 	stw	r2,-28(fp)
    if (pevent->OSEventGrp != 0) {                    /* See if any task waiting on semaphore?         */
   136e4:	e0bffd17 	ldw	r2,-12(fp)
   136e8:	10800283 	ldbu	r2,10(r2)
   136ec:	10803fcc 	andi	r2,r2,255
   136f0:	10002526 	beq	r2,zero,13788 <OSSemPendAbort+0x13c>
        nbr_tasks = 0;
   136f4:	e03ff805 	stb	zero,-32(fp)
        switch (opt) {
   136f8:	e0bffe03 	ldbu	r2,-8(fp)
   136fc:	10800060 	cmpeqi	r2,r2,1
   13700:	10000e26 	beq	r2,zero,1373c <OSSemPendAbort+0xf0>
            case OS_PEND_OPT_BROADCAST:               /* Do we need to abort ALL waiting tasks?        */
                 while (pevent->OSEventGrp != 0) {    /* Yes, ready ALL tasks waiting on semaphore     */
   13704:	00000806 	br	13728 <OSSemPendAbort+0xdc>
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_ABORT);
   13708:	e13ffd17 	ldw	r4,-12(fp)
   1370c:	000b883a 	mov	r5,zero
   13710:	01800044 	movi	r6,1
   13714:	01c00084 	movi	r7,2
   13718:	000eba00 	call	eba0 <OS_EventTaskRdy>
                     nbr_tasks++;
   1371c:	e0bff803 	ldbu	r2,-32(fp)
   13720:	10800044 	addi	r2,r2,1
   13724:	e0bff805 	stb	r2,-32(fp)
    OS_ENTER_CRITICAL();
    if (pevent->OSEventGrp != 0) {                    /* See if any task waiting on semaphore?         */
        nbr_tasks = 0;
        switch (opt) {
            case OS_PEND_OPT_BROADCAST:               /* Do we need to abort ALL waiting tasks?        */
                 while (pevent->OSEventGrp != 0) {    /* Yes, ready ALL tasks waiting on semaphore     */
   13728:	e0bffd17 	ldw	r2,-12(fp)
   1372c:	10800283 	ldbu	r2,10(r2)
   13730:	10803fcc 	andi	r2,r2,255
   13734:	103ff41e 	bne	r2,zero,13708 <__alt_mem_Flash_flash_data+0xf4013708>
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_ABORT);
                     nbr_tasks++;
                 }
                 break;
   13738:	00000906 	br	13760 <OSSemPendAbort+0x114>
                 
            case OS_PEND_OPT_NONE:
            default:                                  /* No,  ready HPT       waiting on semaphore     */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_ABORT);
   1373c:	e13ffd17 	ldw	r4,-12(fp)
   13740:	000b883a 	mov	r5,zero
   13744:	01800044 	movi	r6,1
   13748:	01c00084 	movi	r7,2
   1374c:	000eba00 	call	eba0 <OS_EventTaskRdy>
                 nbr_tasks++;
   13750:	e0bff803 	ldbu	r2,-32(fp)
   13754:	10800044 	addi	r2,r2,1
   13758:	e0bff805 	stb	r2,-32(fp)
                 break;
   1375c:	0001883a 	nop
   13760:	e0bff917 	ldw	r2,-28(fp)
   13764:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   13768:	e0bffb17 	ldw	r2,-20(fp)
   1376c:	1001703a 	wrctl	status,r2
        }
        OS_EXIT_CRITICAL();
        OS_Sched();                                   /* Find HPT ready to run                         */
   13770:	000f5b80 	call	f5b8 <OS_Sched>
        *perr = OS_ERR_PEND_ABORT;
   13774:	e0bfff17 	ldw	r2,-4(fp)
   13778:	00c00384 	movi	r3,14
   1377c:	10c00005 	stb	r3,0(r2)
        return (nbr_tasks);
   13780:	e0bff803 	ldbu	r2,-32(fp)
   13784:	00000706 	br	137a4 <OSSemPendAbort+0x158>
   13788:	e0bff917 	ldw	r2,-28(fp)
   1378c:	e0bffc15 	stw	r2,-16(fp)
   13790:	e0bffc17 	ldw	r2,-16(fp)
   13794:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
   13798:	e0bfff17 	ldw	r2,-4(fp)
   1379c:	10000005 	stb	zero,0(r2)
    return (0);                                       /* No tasks waiting on semaphore                 */
   137a0:	0005883a 	mov	r2,zero
}
   137a4:	e037883a 	mov	sp,fp
   137a8:	dfc00117 	ldw	ra,4(sp)
   137ac:	df000017 	ldw	fp,0(sp)
   137b0:	dec00204 	addi	sp,sp,8
   137b4:	f800283a 	ret

000137b8 <OSSemPost>:
*              OS_ERR_PEVENT_NULL  If 'pevent' is a NULL pointer.
*********************************************************************************************************
*/

INT8U  OSSemPost (OS_EVENT *pevent)
{
   137b8:	defff804 	addi	sp,sp,-32
   137bc:	dfc00715 	stw	ra,28(sp)
   137c0:	df000615 	stw	fp,24(sp)
   137c4:	df000604 	addi	fp,sp,24
   137c8:	e13fff15 	stw	r4,-4(fp)
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   137cc:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
   137d0:	e0bfff17 	ldw	r2,-4(fp)
   137d4:	1000021e 	bne	r2,zero,137e0 <OSSemPost+0x28>
        return (OS_ERR_PEVENT_NULL);
   137d8:	00800104 	movi	r2,4
   137dc:	00003506 	br	138b4 <OSSemPost+0xfc>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
   137e0:	e0bfff17 	ldw	r2,-4(fp)
   137e4:	10800003 	ldbu	r2,0(r2)
   137e8:	10803fcc 	andi	r2,r2,255
   137ec:	108000e0 	cmpeqi	r2,r2,3
   137f0:	1000021e 	bne	r2,zero,137fc <OSSemPost+0x44>
        return (OS_ERR_EVENT_TYPE);
   137f4:	00800044 	movi	r2,1
   137f8:	00002e06 	br	138b4 <OSSemPost+0xfc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   137fc:	0005303a 	rdctl	r2,status
   13800:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   13804:	e0fffb17 	ldw	r3,-20(fp)
   13808:	00bfff84 	movi	r2,-2
   1380c:	1884703a 	and	r2,r3,r2
   13810:	1001703a 	wrctl	status,r2
  
  return context;
   13814:	e0bffb17 	ldw	r2,-20(fp)
    }
    OS_ENTER_CRITICAL();
   13818:	e0bffa15 	stw	r2,-24(fp)
    if (pevent->OSEventGrp != 0) {                    /* See if any task waiting for semaphore         */
   1381c:	e0bfff17 	ldw	r2,-4(fp)
   13820:	10800283 	ldbu	r2,10(r2)
   13824:	10803fcc 	andi	r2,r2,255
   13828:	10000c26 	beq	r2,zero,1385c <OSSemPost+0xa4>
                                                      /* Ready HPT waiting on event                    */
        (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_OK);
   1382c:	e13fff17 	ldw	r4,-4(fp)
   13830:	000b883a 	mov	r5,zero
   13834:	01800044 	movi	r6,1
   13838:	000f883a 	mov	r7,zero
   1383c:	000eba00 	call	eba0 <OS_EventTaskRdy>
   13840:	e0bffa17 	ldw	r2,-24(fp)
   13844:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   13848:	e0bffc17 	ldw	r2,-16(fp)
   1384c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                                   /* Find HPT ready to run                         */
   13850:	000f5b80 	call	f5b8 <OS_Sched>
        return (OS_ERR_NONE);
   13854:	0005883a 	mov	r2,zero
   13858:	00001606 	br	138b4 <OSSemPost+0xfc>
    }
    if (pevent->OSEventCnt < 65535u) {                /* Make sure semaphore will not overflow         */
   1385c:	e0bfff17 	ldw	r2,-4(fp)
   13860:	1080020b 	ldhu	r2,8(r2)
   13864:	10ffffcc 	andi	r3,r2,65535
   13868:	00bfffd4 	movui	r2,65535
   1386c:	18800c26 	beq	r3,r2,138a0 <OSSemPost+0xe8>
        pevent->OSEventCnt++;                         /* Increment semaphore count to register event   */
   13870:	e0bfff17 	ldw	r2,-4(fp)
   13874:	1080020b 	ldhu	r2,8(r2)
   13878:	10800044 	addi	r2,r2,1
   1387c:	1007883a 	mov	r3,r2
   13880:	e0bfff17 	ldw	r2,-4(fp)
   13884:	10c0020d 	sth	r3,8(r2)
   13888:	e0bffa17 	ldw	r2,-24(fp)
   1388c:	e0bffd15 	stw	r2,-12(fp)
   13890:	e0bffd17 	ldw	r2,-12(fp)
   13894:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_NONE);
   13898:	0005883a 	mov	r2,zero
   1389c:	00000506 	br	138b4 <OSSemPost+0xfc>
   138a0:	e0bffa17 	ldw	r2,-24(fp)
   138a4:	e0bffe15 	stw	r2,-8(fp)
   138a8:	e0bffe17 	ldw	r2,-8(fp)
   138ac:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();                               /* Semaphore value has reached its maximum       */
    return (OS_ERR_SEM_OVF);
   138b0:	00800c84 	movi	r2,50
}
   138b4:	e037883a 	mov	sp,fp
   138b8:	dfc00117 	ldw	ra,4(sp)
   138bc:	df000017 	ldw	fp,0(sp)
   138c0:	dec00204 	addi	sp,sp,8
   138c4:	f800283a 	ret

000138c8 <OSSemQuery>:
*********************************************************************************************************
*/

#if OS_SEM_QUERY_EN > 0
INT8U  OSSemQuery (OS_EVENT *pevent, OS_SEM_DATA *p_sem_data)
{
   138c8:	defff704 	addi	sp,sp,-36
   138cc:	df000815 	stw	fp,32(sp)
   138d0:	df000804 	addi	fp,sp,32
   138d4:	e13ffe15 	stw	r4,-8(fp)
   138d8:	e17fff15 	stw	r5,-4(fp)
    INT16U    *psrc;
    INT16U    *pdest;
#endif
    INT8U      i;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
   138dc:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
   138e0:	e0bffe17 	ldw	r2,-8(fp)
   138e4:	1000021e 	bne	r2,zero,138f0 <OSSemQuery+0x28>
        return (OS_ERR_PEVENT_NULL);
   138e8:	00800104 	movi	r2,4
   138ec:	00003606 	br	139c8 <OSSemQuery+0x100>
    }
    if (p_sem_data == (OS_SEM_DATA *)0) {                  /* Validate 'p_sem_data'                    */
   138f0:	e0bfff17 	ldw	r2,-4(fp)
   138f4:	1000021e 	bne	r2,zero,13900 <OSSemQuery+0x38>
        return (OS_ERR_PDATA_NULL);
   138f8:	00800244 	movi	r2,9
   138fc:	00003206 	br	139c8 <OSSemQuery+0x100>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {        /* Validate event block type                */
   13900:	e0bffe17 	ldw	r2,-8(fp)
   13904:	10800003 	ldbu	r2,0(r2)
   13908:	10803fcc 	andi	r2,r2,255
   1390c:	108000e0 	cmpeqi	r2,r2,3
   13910:	1000021e 	bne	r2,zero,1391c <OSSemQuery+0x54>
        return (OS_ERR_EVENT_TYPE);
   13914:	00800044 	movi	r2,1
   13918:	00002b06 	br	139c8 <OSSemQuery+0x100>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1391c:	0005303a 	rdctl	r2,status
   13920:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   13924:	e0fffc17 	ldw	r3,-16(fp)
   13928:	00bfff84 	movi	r2,-2
   1392c:	1884703a 	and	r2,r3,r2
   13930:	1001703a 	wrctl	status,r2
  
  return context;
   13934:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
   13938:	e0bffb15 	stw	r2,-20(fp)
    p_sem_data->OSEventGrp = pevent->OSEventGrp;           /* Copy message mailbox wait list           */
   1393c:	e0bffe17 	ldw	r2,-8(fp)
   13940:	10c00283 	ldbu	r3,10(r2)
   13944:	e0bfff17 	ldw	r2,-4(fp)
   13948:	10c00145 	stb	r3,5(r2)
    psrc                   = &pevent->OSEventTbl[0];
   1394c:	e0bffe17 	ldw	r2,-8(fp)
   13950:	108002c4 	addi	r2,r2,11
   13954:	e0bff815 	stw	r2,-32(fp)
    pdest                  = &p_sem_data->OSEventTbl[0];
   13958:	e0bfff17 	ldw	r2,-4(fp)
   1395c:	10800084 	addi	r2,r2,2
   13960:	e0bff915 	stw	r2,-28(fp)
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
   13964:	e03ffa05 	stb	zero,-24(fp)
   13968:	00000b06 	br	13998 <OSSemQuery+0xd0>
        *pdest++ = *psrc++;
   1396c:	e0bff917 	ldw	r2,-28(fp)
   13970:	10c00044 	addi	r3,r2,1
   13974:	e0fff915 	stw	r3,-28(fp)
   13978:	e0fff817 	ldw	r3,-32(fp)
   1397c:	19000044 	addi	r4,r3,1
   13980:	e13ff815 	stw	r4,-32(fp)
   13984:	18c00003 	ldbu	r3,0(r3)
   13988:	10c00005 	stb	r3,0(r2)
    }
    OS_ENTER_CRITICAL();
    p_sem_data->OSEventGrp = pevent->OSEventGrp;           /* Copy message mailbox wait list           */
    psrc                   = &pevent->OSEventTbl[0];
    pdest                  = &p_sem_data->OSEventTbl[0];
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
   1398c:	e0bffa03 	ldbu	r2,-24(fp)
   13990:	10800044 	addi	r2,r2,1
   13994:	e0bffa05 	stb	r2,-24(fp)
   13998:	e0bffa03 	ldbu	r2,-24(fp)
   1399c:	108000f0 	cmpltui	r2,r2,3
   139a0:	103ff21e 	bne	r2,zero,1396c <__alt_mem_Flash_flash_data+0xf401396c>
        *pdest++ = *psrc++;
    }
    p_sem_data->OSCnt = pevent->OSEventCnt;                /* Get semaphore count                      */
   139a4:	e0bffe17 	ldw	r2,-8(fp)
   139a8:	10c0020b 	ldhu	r3,8(r2)
   139ac:	e0bfff17 	ldw	r2,-4(fp)
   139b0:	10c0000d 	sth	r3,0(r2)
   139b4:	e0bffb17 	ldw	r2,-20(fp)
   139b8:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   139bc:	e0bffd17 	ldw	r2,-12(fp)
   139c0:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
   139c4:	0005883a 	mov	r2,zero
}
   139c8:	e037883a 	mov	sp,fp
   139cc:	df000017 	ldw	fp,0(sp)
   139d0:	dec00104 	addi	sp,sp,4
   139d4:	f800283a 	ret

000139d8 <OSSemSet>:
*********************************************************************************************************
*/

#if OS_SEM_SET_EN > 0
void  OSSemSet (OS_EVENT *pevent, INT16U cnt, INT8U *perr)
{
   139d8:	defff904 	addi	sp,sp,-28
   139dc:	df000615 	stw	fp,24(sp)
   139e0:	df000604 	addi	fp,sp,24
   139e4:	e13ffd15 	stw	r4,-12(fp)
   139e8:	2805883a 	mov	r2,r5
   139ec:	e1bfff15 	stw	r6,-4(fp)
   139f0:	e0bffe0d 	sth	r2,-8(fp)
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   139f4:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
   139f8:	e0bfff17 	ldw	r2,-4(fp)
   139fc:	1000011e 	bne	r2,zero,13a04 <OSSemSet+0x2c>
        return;
   13a00:	00003006 	br	13ac4 <OSSemSet+0xec>
    }
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
   13a04:	e0bffd17 	ldw	r2,-12(fp)
   13a08:	1000041e 	bne	r2,zero,13a1c <OSSemSet+0x44>
        *perr = OS_ERR_PEVENT_NULL;
   13a0c:	e0bfff17 	ldw	r2,-4(fp)
   13a10:	00c00104 	movi	r3,4
   13a14:	10c00005 	stb	r3,0(r2)
        return;
   13a18:	00002a06 	br	13ac4 <OSSemSet+0xec>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
   13a1c:	e0bffd17 	ldw	r2,-12(fp)
   13a20:	10800003 	ldbu	r2,0(r2)
   13a24:	10803fcc 	andi	r2,r2,255
   13a28:	108000e0 	cmpeqi	r2,r2,3
   13a2c:	1000041e 	bne	r2,zero,13a40 <OSSemSet+0x68>
        *perr = OS_ERR_EVENT_TYPE;
   13a30:	e0bfff17 	ldw	r2,-4(fp)
   13a34:	00c00044 	movi	r3,1
   13a38:	10c00005 	stb	r3,0(r2)
        return;
   13a3c:	00002106 	br	13ac4 <OSSemSet+0xec>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   13a40:	0005303a 	rdctl	r2,status
   13a44:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   13a48:	e0fffb17 	ldw	r3,-20(fp)
   13a4c:	00bfff84 	movi	r2,-2
   13a50:	1884703a 	and	r2,r3,r2
   13a54:	1001703a 	wrctl	status,r2
  
  return context;
   13a58:	e0bffb17 	ldw	r2,-20(fp)
    }
    OS_ENTER_CRITICAL();
   13a5c:	e0bffa15 	stw	r2,-24(fp)
    *perr = OS_ERR_NONE;
   13a60:	e0bfff17 	ldw	r2,-4(fp)
   13a64:	10000005 	stb	zero,0(r2)
    if (pevent->OSEventCnt > 0) {                     /* See if semaphore already has a count          */
   13a68:	e0bffd17 	ldw	r2,-12(fp)
   13a6c:	1080020b 	ldhu	r2,8(r2)
   13a70:	10bfffcc 	andi	r2,r2,65535
   13a74:	10000426 	beq	r2,zero,13a88 <OSSemSet+0xb0>
        pevent->OSEventCnt = cnt;                     /* Yes, set it to the new value specified.       */
   13a78:	e0bffd17 	ldw	r2,-12(fp)
   13a7c:	e0fffe0b 	ldhu	r3,-8(fp)
   13a80:	10c0020d 	sth	r3,8(r2)
   13a84:	00000b06 	br	13ab4 <OSSemSet+0xdc>
    } else {                                          /* No                                            */
        if (pevent->OSEventGrp == 0) {                /*      See if task(s) waiting?                  */
   13a88:	e0bffd17 	ldw	r2,-12(fp)
   13a8c:	10800283 	ldbu	r2,10(r2)
   13a90:	10803fcc 	andi	r2,r2,255
   13a94:	1000041e 	bne	r2,zero,13aa8 <OSSemSet+0xd0>
            pevent->OSEventCnt = cnt;                 /*      No, OK to set the value                  */
   13a98:	e0bffd17 	ldw	r2,-12(fp)
   13a9c:	e0fffe0b 	ldhu	r3,-8(fp)
   13aa0:	10c0020d 	sth	r3,8(r2)
   13aa4:	00000306 	br	13ab4 <OSSemSet+0xdc>
        } else {
            *perr              = OS_ERR_TASK_WAITING;
   13aa8:	e0bfff17 	ldw	r2,-4(fp)
   13aac:	00c01244 	movi	r3,73
   13ab0:	10c00005 	stb	r3,0(r2)
   13ab4:	e0bffa17 	ldw	r2,-24(fp)
   13ab8:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   13abc:	e0bffc17 	ldw	r2,-16(fp)
   13ac0:	1001703a 	wrctl	status,r2
        }
    }
    OS_EXIT_CRITICAL();
}
   13ac4:	e037883a 	mov	sp,fp
   13ac8:	df000017 	ldw	fp,0(sp)
   13acc:	dec00104 	addi	sp,sp,4
   13ad0:	f800283a 	ret

00013ad4 <OSTaskChangePrio>:
*********************************************************************************************************
*/

#if OS_TASK_CHANGE_PRIO_EN > 0
INT8U  OSTaskChangePrio (INT8U oldprio, INT8U newprio)
{
   13ad4:	defff104 	addi	sp,sp,-60
   13ad8:	dfc00e15 	stw	ra,56(sp)
   13adc:	df000d15 	stw	fp,52(sp)
   13ae0:	df000d04 	addi	fp,sp,52
   13ae4:	2007883a 	mov	r3,r4
   13ae8:	2805883a 	mov	r2,r5
   13aec:	e0fffe05 	stb	r3,-8(fp)
   13af0:	e0bfff05 	stb	r2,-4(fp)
    INT16U     bitx_new;
    INT16U     bity_old;
    INT16U     bitx_old;
#endif
#if OS_CRITICAL_METHOD == 3
    OS_CPU_SR  cpu_sr = 0;                                  /* Storage for CPU status register         */
   13af4:	e03ff515 	stw	zero,-44(fp)
#endif


/*$PAGE*/
#if OS_ARG_CHK_EN > 0
    if (oldprio >= OS_LOWEST_PRIO) {
   13af8:	e0bffe03 	ldbu	r2,-8(fp)
   13afc:	10800530 	cmpltui	r2,r2,20
   13b00:	1000051e 	bne	r2,zero,13b18 <OSTaskChangePrio+0x44>
        if (oldprio != OS_PRIO_SELF) {
   13b04:	e0bffe03 	ldbu	r2,-8(fp)
   13b08:	10803fe0 	cmpeqi	r2,r2,255
   13b0c:	1000021e 	bne	r2,zero,13b18 <OSTaskChangePrio+0x44>
            return (OS_ERR_PRIO_INVALID);
   13b10:	00800a84 	movi	r2,42
   13b14:	00013a06 	br	14000 <OSTaskChangePrio+0x52c>
        }
    }
    if (newprio >= OS_LOWEST_PRIO) {
   13b18:	e0bfff03 	ldbu	r2,-4(fp)
   13b1c:	10800530 	cmpltui	r2,r2,20
   13b20:	1000021e 	bne	r2,zero,13b2c <OSTaskChangePrio+0x58>
        return (OS_ERR_PRIO_INVALID);
   13b24:	00800a84 	movi	r2,42
   13b28:	00013506 	br	14000 <OSTaskChangePrio+0x52c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   13b2c:	0005303a 	rdctl	r2,status
   13b30:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   13b34:	e0fff917 	ldw	r3,-28(fp)
   13b38:	00bfff84 	movi	r2,-2
   13b3c:	1884703a 	and	r2,r3,r2
   13b40:	1001703a 	wrctl	status,r2
  
  return context;
   13b44:	e0bff917 	ldw	r2,-28(fp)
    }
#endif
    OS_ENTER_CRITICAL();
   13b48:	e0bff515 	stw	r2,-44(fp)
    if (OSTCBPrioTbl[newprio] != (OS_TCB *)0) {             /* New priority must not already exist     */
   13b4c:	e0ffff03 	ldbu	r3,-4(fp)
   13b50:	008000b4 	movhi	r2,2
   13b54:	109b5804 	addi	r2,r2,28000
   13b58:	18c7883a 	add	r3,r3,r3
   13b5c:	18c7883a 	add	r3,r3,r3
   13b60:	10c5883a 	add	r2,r2,r3
   13b64:	10800017 	ldw	r2,0(r2)
   13b68:	10000626 	beq	r2,zero,13b84 <OSTaskChangePrio+0xb0>
   13b6c:	e0bff517 	ldw	r2,-44(fp)
   13b70:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   13b74:	e0bffa17 	ldw	r2,-24(fp)
   13b78:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_PRIO_EXIST);
   13b7c:	00800a04 	movi	r2,40
   13b80:	00011f06 	br	14000 <OSTaskChangePrio+0x52c>
    }
    if (oldprio == OS_PRIO_SELF) {                          /* See if changing self                    */
   13b84:	e0bffe03 	ldbu	r2,-8(fp)
   13b88:	10803fd8 	cmpnei	r2,r2,255
   13b8c:	1000051e 	bne	r2,zero,13ba4 <OSTaskChangePrio+0xd0>
        oldprio = OSTCBCur->OSTCBPrio;                      /* Yes, get priority                       */
   13b90:	008000b4 	movhi	r2,2
   13b94:	10b6d104 	addi	r2,r2,-9404
   13b98:	10800017 	ldw	r2,0(r2)
   13b9c:	10800c83 	ldbu	r2,50(r2)
   13ba0:	e0bffe05 	stb	r2,-8(fp)
    }
    ptcb = OSTCBPrioTbl[oldprio];
   13ba4:	e0fffe03 	ldbu	r3,-8(fp)
   13ba8:	008000b4 	movhi	r2,2
   13bac:	109b5804 	addi	r2,r2,28000
   13bb0:	18c7883a 	add	r3,r3,r3
   13bb4:	18c7883a 	add	r3,r3,r3
   13bb8:	10c5883a 	add	r2,r2,r3
   13bbc:	10800017 	ldw	r2,0(r2)
   13bc0:	e0bff615 	stw	r2,-40(fp)
    if (ptcb == (OS_TCB *)0) {                              /* Does task to change exist?              */
   13bc4:	e0bff617 	ldw	r2,-40(fp)
   13bc8:	1000061e 	bne	r2,zero,13be4 <OSTaskChangePrio+0x110>
   13bcc:	e0bff517 	ldw	r2,-44(fp)
   13bd0:	e0bffb15 	stw	r2,-20(fp)
   13bd4:	e0bffb17 	ldw	r2,-20(fp)
   13bd8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                                 /* No, can't change its priority!          */
        return (OS_ERR_PRIO);
   13bdc:	00800a44 	movi	r2,41
   13be0:	00010706 	br	14000 <OSTaskChangePrio+0x52c>
    }
    if (ptcb == OS_TCB_RESERVED) {                          /* Is task assigned to Mutex               */
   13be4:	e0bff617 	ldw	r2,-40(fp)
   13be8:	10800058 	cmpnei	r2,r2,1
   13bec:	1000061e 	bne	r2,zero,13c08 <OSTaskChangePrio+0x134>
   13bf0:	e0bff517 	ldw	r2,-44(fp)
   13bf4:	e0bffc15 	stw	r2,-16(fp)
   13bf8:	e0bffc17 	ldw	r2,-16(fp)
   13bfc:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                                 /* No, can't change its priority!          */
        return (OS_ERR_TASK_NOT_EXIST);
   13c00:	008010c4 	movi	r2,67
   13c04:	0000fe06 	br	14000 <OSTaskChangePrio+0x52c>
    }
#if OS_LOWEST_PRIO <= 63
    y_new                 = (INT8U)(newprio >> 3);          /* Yes, compute new TCB fields             */
   13c08:	e0bfff03 	ldbu	r2,-4(fp)
   13c0c:	1004d0fa 	srli	r2,r2,3
   13c10:	e0bff705 	stb	r2,-36(fp)
    x_new                 = (INT8U)(newprio & 0x07);
   13c14:	e0bfff03 	ldbu	r2,-4(fp)
   13c18:	108001cc 	andi	r2,r2,7
   13c1c:	e0bff745 	stb	r2,-35(fp)
    bity_new              = (INT8U)(1 << y_new);
   13c20:	e0bff703 	ldbu	r2,-36(fp)
   13c24:	00c00044 	movi	r3,1
   13c28:	1884983a 	sll	r2,r3,r2
   13c2c:	e0bff785 	stb	r2,-34(fp)
    bitx_new              = (INT8U)(1 << x_new);
   13c30:	e0bff743 	ldbu	r2,-35(fp)
   13c34:	00c00044 	movi	r3,1
   13c38:	1884983a 	sll	r2,r3,r2
   13c3c:	e0bff7c5 	stb	r2,-33(fp)
    x_new                 = (INT8U)( newprio & 0x0F);
    bity_new              = (INT16U)(1 << y_new);
    bitx_new              = (INT16U)(1 << x_new);
#endif

    OSTCBPrioTbl[oldprio] = (OS_TCB *)0;                    /* Remove TCB from old priority            */
   13c40:	e0fffe03 	ldbu	r3,-8(fp)
   13c44:	008000b4 	movhi	r2,2
   13c48:	109b5804 	addi	r2,r2,28000
   13c4c:	18c7883a 	add	r3,r3,r3
   13c50:	18c7883a 	add	r3,r3,r3
   13c54:	10c5883a 	add	r2,r2,r3
   13c58:	10000015 	stw	zero,0(r2)
    OSTCBPrioTbl[newprio] =  ptcb;                          /* Place pointer to TCB @ new priority     */
   13c5c:	e0ffff03 	ldbu	r3,-4(fp)
   13c60:	008000b4 	movhi	r2,2
   13c64:	109b5804 	addi	r2,r2,28000
   13c68:	18c7883a 	add	r3,r3,r3
   13c6c:	18c7883a 	add	r3,r3,r3
   13c70:	10c5883a 	add	r2,r2,r3
   13c74:	e0fff617 	ldw	r3,-40(fp)
   13c78:	10c00015 	stw	r3,0(r2)
    y_old                 =  ptcb->OSTCBY;
   13c7c:	e0bff617 	ldw	r2,-40(fp)
   13c80:	10800d03 	ldbu	r2,52(r2)
   13c84:	e0bff805 	stb	r2,-32(fp)
    bity_old              =  ptcb->OSTCBBitY;
   13c88:	e0bff617 	ldw	r2,-40(fp)
   13c8c:	10800d83 	ldbu	r2,54(r2)
   13c90:	e0bff845 	stb	r2,-31(fp)
    bitx_old              =  ptcb->OSTCBBitX;
   13c94:	e0bff617 	ldw	r2,-40(fp)
   13c98:	10800d43 	ldbu	r2,53(r2)
   13c9c:	e0bff885 	stb	r2,-30(fp)
    if ((OSRdyTbl[y_old] &   bitx_old) != 0) {              /* If task is ready make it not            */
   13ca0:	e0fff803 	ldbu	r3,-32(fp)
   13ca4:	008000b4 	movhi	r2,2
   13ca8:	10b6ce44 	addi	r2,r2,-9415
   13cac:	10c5883a 	add	r2,r2,r3
   13cb0:	10c00003 	ldbu	r3,0(r2)
   13cb4:	e0bff883 	ldbu	r2,-30(fp)
   13cb8:	1884703a 	and	r2,r3,r2
   13cbc:	10803fcc 	andi	r2,r2,255
   13cc0:	10003726 	beq	r2,zero,13da0 <OSTaskChangePrio+0x2cc>
         OSRdyTbl[y_old] &= ~bitx_old;
   13cc4:	e0fff803 	ldbu	r3,-32(fp)
   13cc8:	e13ff803 	ldbu	r4,-32(fp)
   13ccc:	008000b4 	movhi	r2,2
   13cd0:	10b6ce44 	addi	r2,r2,-9415
   13cd4:	1105883a 	add	r2,r2,r4
   13cd8:	10800003 	ldbu	r2,0(r2)
   13cdc:	1009883a 	mov	r4,r2
   13ce0:	e0bff883 	ldbu	r2,-30(fp)
   13ce4:	0084303a 	nor	r2,zero,r2
   13ce8:	2084703a 	and	r2,r4,r2
   13cec:	1009883a 	mov	r4,r2
   13cf0:	008000b4 	movhi	r2,2
   13cf4:	10b6ce44 	addi	r2,r2,-9415
   13cf8:	10c5883a 	add	r2,r2,r3
   13cfc:	11000005 	stb	r4,0(r2)
         if (OSRdyTbl[y_old] == 0) {
   13d00:	e0fff803 	ldbu	r3,-32(fp)
   13d04:	008000b4 	movhi	r2,2
   13d08:	10b6ce44 	addi	r2,r2,-9415
   13d0c:	10c5883a 	add	r2,r2,r3
   13d10:	10800003 	ldbu	r2,0(r2)
   13d14:	10803fcc 	andi	r2,r2,255
   13d18:	10000b1e 	bne	r2,zero,13d48 <OSTaskChangePrio+0x274>
             OSRdyGrp &= ~bity_old;
   13d1c:	e0bff843 	ldbu	r2,-31(fp)
   13d20:	0084303a 	nor	r2,zero,r2
   13d24:	1007883a 	mov	r3,r2
   13d28:	008000b4 	movhi	r2,2
   13d2c:	10b6ce04 	addi	r2,r2,-9416
   13d30:	10800003 	ldbu	r2,0(r2)
   13d34:	1884703a 	and	r2,r3,r2
   13d38:	1007883a 	mov	r3,r2
   13d3c:	008000b4 	movhi	r2,2
   13d40:	10b6ce04 	addi	r2,r2,-9416
   13d44:	10c00005 	stb	r3,0(r2)
         }
         OSRdyGrp        |= bity_new;                       /* Make new priority ready to run          */
   13d48:	008000b4 	movhi	r2,2
   13d4c:	10b6ce04 	addi	r2,r2,-9416
   13d50:	10c00003 	ldbu	r3,0(r2)
   13d54:	e0bff783 	ldbu	r2,-34(fp)
   13d58:	1884b03a 	or	r2,r3,r2
   13d5c:	1007883a 	mov	r3,r2
   13d60:	008000b4 	movhi	r2,2
   13d64:	10b6ce04 	addi	r2,r2,-9416
   13d68:	10c00005 	stb	r3,0(r2)
         OSRdyTbl[y_new] |= bitx_new;
   13d6c:	e0fff703 	ldbu	r3,-36(fp)
   13d70:	e13ff703 	ldbu	r4,-36(fp)
   13d74:	008000b4 	movhi	r2,2
   13d78:	10b6ce44 	addi	r2,r2,-9415
   13d7c:	1105883a 	add	r2,r2,r4
   13d80:	11000003 	ldbu	r4,0(r2)
   13d84:	e0bff7c3 	ldbu	r2,-33(fp)
   13d88:	2084b03a 	or	r2,r4,r2
   13d8c:	1009883a 	mov	r4,r2
   13d90:	008000b4 	movhi	r2,2
   13d94:	10b6ce44 	addi	r2,r2,-9415
   13d98:	10c5883a 	add	r2,r2,r3
   13d9c:	11000005 	stb	r4,0(r2)
    }

#if (OS_EVENT_EN)
    pevent = ptcb->OSTCBEventPtr;
   13da0:	e0bff617 	ldw	r2,-40(fp)
   13da4:	10800717 	ldw	r2,28(r2)
   13da8:	e0bff315 	stw	r2,-52(fp)
    if (pevent != (OS_EVENT *)0) {
   13dac:	e0bff317 	ldw	r2,-52(fp)
   13db0:	10003326 	beq	r2,zero,13e80 <OSTaskChangePrio+0x3ac>
        pevent->OSEventTbl[y_old] &= ~bitx_old;             /* Remove old task prio from wait list     */
   13db4:	e0bff803 	ldbu	r2,-32(fp)
   13db8:	e0fff803 	ldbu	r3,-32(fp)
   13dbc:	e13ff317 	ldw	r4,-52(fp)
   13dc0:	20c7883a 	add	r3,r4,r3
   13dc4:	18c00204 	addi	r3,r3,8
   13dc8:	18c000c3 	ldbu	r3,3(r3)
   13dcc:	1809883a 	mov	r4,r3
   13dd0:	e0fff883 	ldbu	r3,-30(fp)
   13dd4:	00c6303a 	nor	r3,zero,r3
   13dd8:	20c6703a 	and	r3,r4,r3
   13ddc:	1809883a 	mov	r4,r3
   13de0:	e0fff317 	ldw	r3,-52(fp)
   13de4:	1885883a 	add	r2,r3,r2
   13de8:	10800204 	addi	r2,r2,8
   13dec:	110000c5 	stb	r4,3(r2)
        if (pevent->OSEventTbl[y_old] == 0) {
   13df0:	e0bff803 	ldbu	r2,-32(fp)
   13df4:	e0fff317 	ldw	r3,-52(fp)
   13df8:	1885883a 	add	r2,r3,r2
   13dfc:	10800204 	addi	r2,r2,8
   13e00:	108000c3 	ldbu	r2,3(r2)
   13e04:	10803fcc 	andi	r2,r2,255
   13e08:	1000091e 	bne	r2,zero,13e30 <OSTaskChangePrio+0x35c>
            pevent->OSEventGrp    &= ~bity_old;
   13e0c:	e0bff317 	ldw	r2,-52(fp)
   13e10:	10800283 	ldbu	r2,10(r2)
   13e14:	1007883a 	mov	r3,r2
   13e18:	e0bff843 	ldbu	r2,-31(fp)
   13e1c:	0084303a 	nor	r2,zero,r2
   13e20:	1884703a 	and	r2,r3,r2
   13e24:	1007883a 	mov	r3,r2
   13e28:	e0bff317 	ldw	r2,-52(fp)
   13e2c:	10c00285 	stb	r3,10(r2)
        }
        pevent->OSEventGrp        |= bity_new;              /* Add    new task prio to   wait list     */
   13e30:	e0bff317 	ldw	r2,-52(fp)
   13e34:	10c00283 	ldbu	r3,10(r2)
   13e38:	e0bff783 	ldbu	r2,-34(fp)
   13e3c:	1884b03a 	or	r2,r3,r2
   13e40:	1007883a 	mov	r3,r2
   13e44:	e0bff317 	ldw	r2,-52(fp)
   13e48:	10c00285 	stb	r3,10(r2)
        pevent->OSEventTbl[y_new] |= bitx_new;
   13e4c:	e0bff703 	ldbu	r2,-36(fp)
   13e50:	e0fff703 	ldbu	r3,-36(fp)
   13e54:	e13ff317 	ldw	r4,-52(fp)
   13e58:	20c7883a 	add	r3,r4,r3
   13e5c:	18c00204 	addi	r3,r3,8
   13e60:	190000c3 	ldbu	r4,3(r3)
   13e64:	e0fff7c3 	ldbu	r3,-33(fp)
   13e68:	20c6b03a 	or	r3,r4,r3
   13e6c:	1809883a 	mov	r4,r3
   13e70:	e0fff317 	ldw	r3,-52(fp)
   13e74:	1885883a 	add	r2,r3,r2
   13e78:	10800204 	addi	r2,r2,8
   13e7c:	110000c5 	stb	r4,3(r2)
    }
#if (OS_EVENT_MULTI_EN > 0)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {
   13e80:	e0bff617 	ldw	r2,-40(fp)
   13e84:	10800817 	ldw	r2,32(r2)
   13e88:	10004226 	beq	r2,zero,13f94 <OSTaskChangePrio+0x4c0>
        pevents =  ptcb->OSTCBEventMultiPtr;
   13e8c:	e0bff617 	ldw	r2,-40(fp)
   13e90:	10800817 	ldw	r2,32(r2)
   13e94:	e0bff415 	stw	r2,-48(fp)
        pevent  = *pevents;
   13e98:	e0bff417 	ldw	r2,-48(fp)
   13e9c:	10800017 	ldw	r2,0(r2)
   13ea0:	e0bff315 	stw	r2,-52(fp)
        while (pevent != (OS_EVENT *)0) {
   13ea4:	00003906 	br	13f8c <OSTaskChangePrio+0x4b8>
            pevent->OSEventTbl[y_old] &= ~bitx_old;         /* Remove old task prio from wait lists    */
   13ea8:	e0bff803 	ldbu	r2,-32(fp)
   13eac:	e0fff803 	ldbu	r3,-32(fp)
   13eb0:	e13ff317 	ldw	r4,-52(fp)
   13eb4:	20c7883a 	add	r3,r4,r3
   13eb8:	18c00204 	addi	r3,r3,8
   13ebc:	18c000c3 	ldbu	r3,3(r3)
   13ec0:	1809883a 	mov	r4,r3
   13ec4:	e0fff883 	ldbu	r3,-30(fp)
   13ec8:	00c6303a 	nor	r3,zero,r3
   13ecc:	20c6703a 	and	r3,r4,r3
   13ed0:	1809883a 	mov	r4,r3
   13ed4:	e0fff317 	ldw	r3,-52(fp)
   13ed8:	1885883a 	add	r2,r3,r2
   13edc:	10800204 	addi	r2,r2,8
   13ee0:	110000c5 	stb	r4,3(r2)
            if (pevent->OSEventTbl[y_old] == 0) {
   13ee4:	e0bff803 	ldbu	r2,-32(fp)
   13ee8:	e0fff317 	ldw	r3,-52(fp)
   13eec:	1885883a 	add	r2,r3,r2
   13ef0:	10800204 	addi	r2,r2,8
   13ef4:	108000c3 	ldbu	r2,3(r2)
   13ef8:	10803fcc 	andi	r2,r2,255
   13efc:	1000091e 	bne	r2,zero,13f24 <OSTaskChangePrio+0x450>
                pevent->OSEventGrp    &= ~bity_old;
   13f00:	e0bff317 	ldw	r2,-52(fp)
   13f04:	10800283 	ldbu	r2,10(r2)
   13f08:	1007883a 	mov	r3,r2
   13f0c:	e0bff843 	ldbu	r2,-31(fp)
   13f10:	0084303a 	nor	r2,zero,r2
   13f14:	1884703a 	and	r2,r3,r2
   13f18:	1007883a 	mov	r3,r2
   13f1c:	e0bff317 	ldw	r2,-52(fp)
   13f20:	10c00285 	stb	r3,10(r2)
            }
            pevent->OSEventGrp        |= bity_new;          /* Add    new task prio to   wait lists    */
   13f24:	e0bff317 	ldw	r2,-52(fp)
   13f28:	10c00283 	ldbu	r3,10(r2)
   13f2c:	e0bff783 	ldbu	r2,-34(fp)
   13f30:	1884b03a 	or	r2,r3,r2
   13f34:	1007883a 	mov	r3,r2
   13f38:	e0bff317 	ldw	r2,-52(fp)
   13f3c:	10c00285 	stb	r3,10(r2)
            pevent->OSEventTbl[y_new] |= bitx_new;
   13f40:	e0bff703 	ldbu	r2,-36(fp)
   13f44:	e0fff703 	ldbu	r3,-36(fp)
   13f48:	e13ff317 	ldw	r4,-52(fp)
   13f4c:	20c7883a 	add	r3,r4,r3
   13f50:	18c00204 	addi	r3,r3,8
   13f54:	190000c3 	ldbu	r4,3(r3)
   13f58:	e0fff7c3 	ldbu	r3,-33(fp)
   13f5c:	20c6b03a 	or	r3,r4,r3
   13f60:	1809883a 	mov	r4,r3
   13f64:	e0fff317 	ldw	r3,-52(fp)
   13f68:	1885883a 	add	r2,r3,r2
   13f6c:	10800204 	addi	r2,r2,8
   13f70:	110000c5 	stb	r4,3(r2)
            pevents++;
   13f74:	e0bff417 	ldw	r2,-48(fp)
   13f78:	10800104 	addi	r2,r2,4
   13f7c:	e0bff415 	stw	r2,-48(fp)
            pevent                     = *pevents;
   13f80:	e0bff417 	ldw	r2,-48(fp)
   13f84:	10800017 	ldw	r2,0(r2)
   13f88:	e0bff315 	stw	r2,-52(fp)
    }
#if (OS_EVENT_MULTI_EN > 0)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {
        pevents =  ptcb->OSTCBEventMultiPtr;
        pevent  = *pevents;
        while (pevent != (OS_EVENT *)0) {
   13f8c:	e0bff317 	ldw	r2,-52(fp)
   13f90:	103fc51e 	bne	r2,zero,13ea8 <__alt_mem_Flash_flash_data+0xf4013ea8>
        }
    }
#endif
#endif

    ptcb->OSTCBPrio = newprio;                              /* Set new task priority                   */
   13f94:	e0bff617 	ldw	r2,-40(fp)
   13f98:	e0ffff03 	ldbu	r3,-4(fp)
   13f9c:	10c00c85 	stb	r3,50(r2)
    ptcb->OSTCBY    = y_new;
   13fa0:	e0bff617 	ldw	r2,-40(fp)
   13fa4:	e0fff703 	ldbu	r3,-36(fp)
   13fa8:	10c00d05 	stb	r3,52(r2)
    ptcb->OSTCBX    = x_new;
   13fac:	e0bff617 	ldw	r2,-40(fp)
   13fb0:	e0fff743 	ldbu	r3,-35(fp)
   13fb4:	10c00cc5 	stb	r3,51(r2)
    ptcb->OSTCBBitY = bity_new;
   13fb8:	e0bff617 	ldw	r2,-40(fp)
   13fbc:	e0fff783 	ldbu	r3,-34(fp)
   13fc0:	10c00d85 	stb	r3,54(r2)
    ptcb->OSTCBBitX = bitx_new;
   13fc4:	e0bff617 	ldw	r2,-40(fp)
   13fc8:	e0fff7c3 	ldbu	r3,-33(fp)
   13fcc:	10c00d45 	stb	r3,53(r2)
   13fd0:	e0bff517 	ldw	r2,-44(fp)
   13fd4:	e0bffd15 	stw	r2,-12(fp)
   13fd8:	e0bffd17 	ldw	r2,-12(fp)
   13fdc:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    if (OSRunning == OS_TRUE) {
   13fe0:	008000b4 	movhi	r2,2
   13fe4:	10b6c244 	addi	r2,r2,-9463
   13fe8:	10800003 	ldbu	r2,0(r2)
   13fec:	10803fcc 	andi	r2,r2,255
   13ff0:	10800058 	cmpnei	r2,r2,1
   13ff4:	1000011e 	bne	r2,zero,13ffc <OSTaskChangePrio+0x528>
        OS_Sched();                                         /* Find new highest priority task          */
   13ff8:	000f5b80 	call	f5b8 <OS_Sched>
    }
    return (OS_ERR_NONE);
   13ffc:	0005883a 	mov	r2,zero
}
   14000:	e037883a 	mov	sp,fp
   14004:	dfc00117 	ldw	ra,4(sp)
   14008:	df000017 	ldw	fp,0(sp)
   1400c:	dec00204 	addi	sp,sp,8
   14010:	f800283a 	ret

00014014 <OSTaskCreate>:
*********************************************************************************************************
*/

#if OS_TASK_CREATE_EN > 0
INT8U  OSTaskCreate (void (*task)(void *p_arg), void *p_arg, OS_STK *ptos, INT8U prio)
{
   14014:	deffee04 	addi	sp,sp,-72
   14018:	dfc01115 	stw	ra,68(sp)
   1401c:	df001015 	stw	fp,64(sp)
   14020:	df001004 	addi	fp,sp,64
   14024:	e13ffc15 	stw	r4,-16(fp)
   14028:	e17ffd15 	stw	r5,-12(fp)
   1402c:	e1bffe15 	stw	r6,-8(fp)
   14030:	3805883a 	mov	r2,r7
   14034:	e0bfff05 	stb	r2,-4(fp)
    OS_STK    *psp;
    INT8U      err;
#if OS_CRITICAL_METHOD == 3                  /* Allocate storage for CPU status register               */
    OS_CPU_SR  cpu_sr = 0;
   14038:	e03ff315 	stw	zero,-52(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio > OS_LOWEST_PRIO) {             /* Make sure priority is within allowable range           */
   1403c:	e0bfff03 	ldbu	r2,-4(fp)
   14040:	10800570 	cmpltui	r2,r2,21
   14044:	1000021e 	bne	r2,zero,14050 <OSTaskCreate+0x3c>
        return (OS_ERR_PRIO_INVALID);
   14048:	00800a84 	movi	r2,42
   1404c:	00005b06 	br	141bc <OSTaskCreate+0x1a8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   14050:	0005303a 	rdctl	r2,status
   14054:	e0bff615 	stw	r2,-40(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   14058:	e0fff617 	ldw	r3,-40(fp)
   1405c:	00bfff84 	movi	r2,-2
   14060:	1884703a 	and	r2,r3,r2
   14064:	1001703a 	wrctl	status,r2
  
  return context;
   14068:	e0bff617 	ldw	r2,-40(fp)
    }
#endif
    OS_ENTER_CRITICAL();
   1406c:	e0bff315 	stw	r2,-52(fp)
    if (OSIntNesting > 0) {                  /* Make sure we don't create the task from within an ISR  */
   14070:	008000b4 	movhi	r2,2
   14074:	10b6d004 	addi	r2,r2,-9408
   14078:	10800003 	ldbu	r2,0(r2)
   1407c:	10803fcc 	andi	r2,r2,255
   14080:	10000626 	beq	r2,zero,1409c <OSTaskCreate+0x88>
   14084:	e0bff317 	ldw	r2,-52(fp)
   14088:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1408c:	e0bff717 	ldw	r2,-36(fp)
   14090:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_CREATE_ISR);
   14094:	00800f04 	movi	r2,60
   14098:	00004806 	br	141bc <OSTaskCreate+0x1a8>
    }
    if (OSTCBPrioTbl[prio] == (OS_TCB *)0) { /* Make sure task doesn't already exist at this priority  */
   1409c:	e0ffff03 	ldbu	r3,-4(fp)
   140a0:	008000b4 	movhi	r2,2
   140a4:	109b5804 	addi	r2,r2,28000
   140a8:	18c7883a 	add	r3,r3,r3
   140ac:	18c7883a 	add	r3,r3,r3
   140b0:	10c5883a 	add	r2,r2,r3
   140b4:	10800017 	ldw	r2,0(r2)
   140b8:	10003b1e 	bne	r2,zero,141a8 <OSTaskCreate+0x194>
        OSTCBPrioTbl[prio] = OS_TCB_RESERVED;/* Reserve the priority to prevent others from doing ...  */
   140bc:	e0ffff03 	ldbu	r3,-4(fp)
   140c0:	008000b4 	movhi	r2,2
   140c4:	109b5804 	addi	r2,r2,28000
   140c8:	18c7883a 	add	r3,r3,r3
   140cc:	18c7883a 	add	r3,r3,r3
   140d0:	10c5883a 	add	r2,r2,r3
   140d4:	00c00044 	movi	r3,1
   140d8:	10c00015 	stw	r3,0(r2)
   140dc:	e0bff317 	ldw	r2,-52(fp)
   140e0:	e0bff815 	stw	r2,-32(fp)
   140e4:	e0bff817 	ldw	r2,-32(fp)
   140e8:	1001703a 	wrctl	status,r2
                                             /* ... the same thing until task is created.              */
        OS_EXIT_CRITICAL();
        psp = OSTaskStkInit(task, p_arg, ptos, 0);              /* Initialize the task's stack         */
   140ec:	e13ffc17 	ldw	r4,-16(fp)
   140f0:	e17ffd17 	ldw	r5,-12(fp)
   140f4:	e1bffe17 	ldw	r6,-8(fp)
   140f8:	000f883a 	mov	r7,zero
   140fc:	0018d080 	call	18d08 <OSTaskStkInit>
   14100:	e0bff415 	stw	r2,-48(fp)
        err = OS_TCBInit(prio, psp, (OS_STK *)0, 0, 0, (void *)0, 0);
   14104:	e0bfff03 	ldbu	r2,-4(fp)
   14108:	d8000015 	stw	zero,0(sp)
   1410c:	d8000115 	stw	zero,4(sp)
   14110:	d8000215 	stw	zero,8(sp)
   14114:	1009883a 	mov	r4,r2
   14118:	e17ff417 	ldw	r5,-48(fp)
   1411c:	000d883a 	mov	r6,zero
   14120:	000f883a 	mov	r7,zero
   14124:	000f9bc0 	call	f9bc <OS_TCBInit>
   14128:	e0bff505 	stb	r2,-44(fp)
        if (err == OS_ERR_NONE) {
   1412c:	e0bff503 	ldbu	r2,-44(fp)
   14130:	1000081e 	bne	r2,zero,14154 <OSTaskCreate+0x140>
            if (OSRunning == OS_TRUE) {      /* Find highest priority task if multitasking has started */
   14134:	008000b4 	movhi	r2,2
   14138:	10b6c244 	addi	r2,r2,-9463
   1413c:	10800003 	ldbu	r2,0(r2)
   14140:	10803fcc 	andi	r2,r2,255
   14144:	10800058 	cmpnei	r2,r2,1
   14148:	1000151e 	bne	r2,zero,141a0 <OSTaskCreate+0x18c>
                OS_Sched();
   1414c:	000f5b80 	call	f5b8 <OS_Sched>
   14150:	00001306 	br	141a0 <OSTaskCreate+0x18c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   14154:	0005303a 	rdctl	r2,status
   14158:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1415c:	e0fff917 	ldw	r3,-28(fp)
   14160:	00bfff84 	movi	r2,-2
   14164:	1884703a 	and	r2,r3,r2
   14168:	1001703a 	wrctl	status,r2
  
  return context;
   1416c:	e0bff917 	ldw	r2,-28(fp)
            }
        } else {
            OS_ENTER_CRITICAL();
   14170:	e0bff315 	stw	r2,-52(fp)
            OSTCBPrioTbl[prio] = (OS_TCB *)0;/* Make this priority available to others                 */
   14174:	e0ffff03 	ldbu	r3,-4(fp)
   14178:	008000b4 	movhi	r2,2
   1417c:	109b5804 	addi	r2,r2,28000
   14180:	18c7883a 	add	r3,r3,r3
   14184:	18c7883a 	add	r3,r3,r3
   14188:	10c5883a 	add	r2,r2,r3
   1418c:	10000015 	stw	zero,0(r2)
   14190:	e0bff317 	ldw	r2,-52(fp)
   14194:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   14198:	e0bffa17 	ldw	r2,-24(fp)
   1419c:	1001703a 	wrctl	status,r2
            OS_EXIT_CRITICAL();
        }
        return (err);
   141a0:	e0bff503 	ldbu	r2,-44(fp)
   141a4:	00000506 	br	141bc <OSTaskCreate+0x1a8>
   141a8:	e0bff317 	ldw	r2,-52(fp)
   141ac:	e0bffb15 	stw	r2,-20(fp)
   141b0:	e0bffb17 	ldw	r2,-20(fp)
   141b4:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_PRIO_EXIST);
   141b8:	00800a04 	movi	r2,40
}
   141bc:	e037883a 	mov	sp,fp
   141c0:	dfc00117 	ldw	ra,4(sp)
   141c4:	df000017 	ldw	fp,0(sp)
   141c8:	dec00204 	addi	sp,sp,8
   141cc:	f800283a 	ret

000141d0 <OSTaskCreateExt>:
                        INT16U   id,
                        OS_STK  *pbos,
                        INT32U   stk_size,
                        void    *pext,
                        INT16U   opt)
{
   141d0:	deffec04 	addi	sp,sp,-80
   141d4:	dfc01315 	stw	ra,76(sp)
   141d8:	df001215 	stw	fp,72(sp)
   141dc:	df001204 	addi	fp,sp,72
   141e0:	e13ffa15 	stw	r4,-24(fp)
   141e4:	e17ffb15 	stw	r5,-20(fp)
   141e8:	e1bffc15 	stw	r6,-16(fp)
   141ec:	3809883a 	mov	r4,r7
   141f0:	e0c00217 	ldw	r3,8(fp)
   141f4:	e0800617 	ldw	r2,24(fp)
   141f8:	e13ffd05 	stb	r4,-12(fp)
   141fc:	e0fffe0d 	sth	r3,-8(fp)
   14200:	e0bfff0d 	sth	r2,-4(fp)
    OS_STK    *psp;
    INT8U      err;
#if OS_CRITICAL_METHOD == 3                  /* Allocate storage for CPU status register               */
    OS_CPU_SR  cpu_sr = 0;
   14204:	e03ff115 	stw	zero,-60(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio > OS_LOWEST_PRIO) {             /* Make sure priority is within allowable range           */
   14208:	e0bffd03 	ldbu	r2,-12(fp)
   1420c:	10800570 	cmpltui	r2,r2,21
   14210:	1000021e 	bne	r2,zero,1421c <OSTaskCreateExt+0x4c>
        return (OS_ERR_PRIO_INVALID);
   14214:	00800a84 	movi	r2,42
   14218:	00006306 	br	143a8 <OSTaskCreateExt+0x1d8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1421c:	0005303a 	rdctl	r2,status
   14220:	e0bff415 	stw	r2,-48(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   14224:	e0fff417 	ldw	r3,-48(fp)
   14228:	00bfff84 	movi	r2,-2
   1422c:	1884703a 	and	r2,r3,r2
   14230:	1001703a 	wrctl	status,r2
  
  return context;
   14234:	e0bff417 	ldw	r2,-48(fp)
    }
#endif
    OS_ENTER_CRITICAL();
   14238:	e0bff115 	stw	r2,-60(fp)
    if (OSIntNesting > 0) {                  /* Make sure we don't create the task from within an ISR  */
   1423c:	008000b4 	movhi	r2,2
   14240:	10b6d004 	addi	r2,r2,-9408
   14244:	10800003 	ldbu	r2,0(r2)
   14248:	10803fcc 	andi	r2,r2,255
   1424c:	10000626 	beq	r2,zero,14268 <OSTaskCreateExt+0x98>
   14250:	e0bff117 	ldw	r2,-60(fp)
   14254:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   14258:	e0bff517 	ldw	r2,-44(fp)
   1425c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_CREATE_ISR);
   14260:	00800f04 	movi	r2,60
   14264:	00005006 	br	143a8 <OSTaskCreateExt+0x1d8>
    }
    if (OSTCBPrioTbl[prio] == (OS_TCB *)0) { /* Make sure task doesn't already exist at this priority  */
   14268:	e0fffd03 	ldbu	r3,-12(fp)
   1426c:	008000b4 	movhi	r2,2
   14270:	109b5804 	addi	r2,r2,28000
   14274:	18c7883a 	add	r3,r3,r3
   14278:	18c7883a 	add	r3,r3,r3
   1427c:	10c5883a 	add	r2,r2,r3
   14280:	10800017 	ldw	r2,0(r2)
   14284:	1000431e 	bne	r2,zero,14394 <OSTaskCreateExt+0x1c4>
        OSTCBPrioTbl[prio] = OS_TCB_RESERVED;/* Reserve the priority to prevent others from doing ...  */
   14288:	e0fffd03 	ldbu	r3,-12(fp)
   1428c:	008000b4 	movhi	r2,2
   14290:	109b5804 	addi	r2,r2,28000
   14294:	18c7883a 	add	r3,r3,r3
   14298:	18c7883a 	add	r3,r3,r3
   1429c:	10c5883a 	add	r2,r2,r3
   142a0:	00c00044 	movi	r3,1
   142a4:	10c00015 	stw	r3,0(r2)
   142a8:	e0bff117 	ldw	r2,-60(fp)
   142ac:	e0bff615 	stw	r2,-40(fp)
   142b0:	e0bff617 	ldw	r2,-40(fp)
   142b4:	1001703a 	wrctl	status,r2
                                             /* ... the same thing until task is created.              */
        OS_EXIT_CRITICAL();

#if (OS_TASK_STAT_STK_CHK_EN > 0)
        OS_TaskStkClr(pbos, stk_size, opt);                    /* Clear the task stack (if needed)     */
   142b8:	e0bfff0b 	ldhu	r2,-4(fp)
   142bc:	e1000317 	ldw	r4,12(fp)
   142c0:	e1400417 	ldw	r5,16(fp)
   142c4:	100d883a 	mov	r6,r2
   142c8:	001535c0 	call	1535c <OS_TaskStkClr>
#endif

        psp = OSTaskStkInit(task, p_arg, ptos, opt);           /* Initialize the task's stack          */
   142cc:	e0bfff0b 	ldhu	r2,-4(fp)
   142d0:	e13ffa17 	ldw	r4,-24(fp)
   142d4:	e17ffb17 	ldw	r5,-20(fp)
   142d8:	e1bffc17 	ldw	r6,-16(fp)
   142dc:	100f883a 	mov	r7,r2
   142e0:	0018d080 	call	18d08 <OSTaskStkInit>
   142e4:	e0bff215 	stw	r2,-56(fp)
        err = OS_TCBInit(prio, psp, pbos, id, stk_size, pext, opt);
   142e8:	e13ffd03 	ldbu	r4,-12(fp)
   142ec:	e1fffe0b 	ldhu	r7,-8(fp)
   142f0:	e0bfff0b 	ldhu	r2,-4(fp)
   142f4:	e0c00417 	ldw	r3,16(fp)
   142f8:	d8c00015 	stw	r3,0(sp)
   142fc:	e0c00517 	ldw	r3,20(fp)
   14300:	d8c00115 	stw	r3,4(sp)
   14304:	d8800215 	stw	r2,8(sp)
   14308:	e17ff217 	ldw	r5,-56(fp)
   1430c:	e1800317 	ldw	r6,12(fp)
   14310:	000f9bc0 	call	f9bc <OS_TCBInit>
   14314:	e0bff305 	stb	r2,-52(fp)
        if (err == OS_ERR_NONE) {
   14318:	e0bff303 	ldbu	r2,-52(fp)
   1431c:	1000081e 	bne	r2,zero,14340 <OSTaskCreateExt+0x170>
            if (OSRunning == OS_TRUE) {                        /* Find HPT if multitasking has started */
   14320:	008000b4 	movhi	r2,2
   14324:	10b6c244 	addi	r2,r2,-9463
   14328:	10800003 	ldbu	r2,0(r2)
   1432c:	10803fcc 	andi	r2,r2,255
   14330:	10800058 	cmpnei	r2,r2,1
   14334:	1000151e 	bne	r2,zero,1438c <OSTaskCreateExt+0x1bc>
                OS_Sched();
   14338:	000f5b80 	call	f5b8 <OS_Sched>
   1433c:	00001306 	br	1438c <OSTaskCreateExt+0x1bc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   14340:	0005303a 	rdctl	r2,status
   14344:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   14348:	e0fff717 	ldw	r3,-36(fp)
   1434c:	00bfff84 	movi	r2,-2
   14350:	1884703a 	and	r2,r3,r2
   14354:	1001703a 	wrctl	status,r2
  
  return context;
   14358:	e0bff717 	ldw	r2,-36(fp)
            }
        } else {
            OS_ENTER_CRITICAL();
   1435c:	e0bff115 	stw	r2,-60(fp)
            OSTCBPrioTbl[prio] = (OS_TCB *)0;                  /* Make this priority avail. to others  */
   14360:	e0fffd03 	ldbu	r3,-12(fp)
   14364:	008000b4 	movhi	r2,2
   14368:	109b5804 	addi	r2,r2,28000
   1436c:	18c7883a 	add	r3,r3,r3
   14370:	18c7883a 	add	r3,r3,r3
   14374:	10c5883a 	add	r2,r2,r3
   14378:	10000015 	stw	zero,0(r2)
   1437c:	e0bff117 	ldw	r2,-60(fp)
   14380:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   14384:	e0bff817 	ldw	r2,-32(fp)
   14388:	1001703a 	wrctl	status,r2
            OS_EXIT_CRITICAL();
        }
        return (err);
   1438c:	e0bff303 	ldbu	r2,-52(fp)
   14390:	00000506 	br	143a8 <OSTaskCreateExt+0x1d8>
   14394:	e0bff117 	ldw	r2,-60(fp)
   14398:	e0bff915 	stw	r2,-28(fp)
   1439c:	e0bff917 	ldw	r2,-28(fp)
   143a0:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_PRIO_EXIST);
   143a4:	00800a04 	movi	r2,40
}
   143a8:	e037883a 	mov	sp,fp
   143ac:	dfc00117 	ldw	ra,4(sp)
   143b0:	df000017 	ldw	fp,0(sp)
   143b4:	dec00204 	addi	sp,sp,8
   143b8:	f800283a 	ret

000143bc <OSTaskDel>:
*********************************************************************************************************
*/

#if OS_TASK_DEL_EN > 0
INT8U  OSTaskDel (INT8U prio)
{
   143bc:	defff404 	addi	sp,sp,-48
   143c0:	dfc00b15 	stw	ra,44(sp)
   143c4:	df000a15 	stw	fp,40(sp)
   143c8:	df000a04 	addi	fp,sp,40
   143cc:	2005883a 	mov	r2,r4
   143d0:	e0bfff05 	stb	r2,-4(fp)
#if (OS_FLAG_EN > 0) && (OS_MAX_FLAGS > 0)
    OS_FLAG_NODE *pnode;
#endif
    OS_TCB       *ptcb;
#if OS_CRITICAL_METHOD == 3                             /* Allocate storage for CPU status register    */
    OS_CPU_SR     cpu_sr = 0;
   143d4:	e03ff615 	stw	zero,-40(fp)
#endif



    if (OSIntNesting > 0) {                             /* See if trying to delete from ISR            */
   143d8:	008000b4 	movhi	r2,2
   143dc:	10b6d004 	addi	r2,r2,-9408
   143e0:	10800003 	ldbu	r2,0(r2)
   143e4:	10803fcc 	andi	r2,r2,255
   143e8:	10000226 	beq	r2,zero,143f4 <OSTaskDel+0x38>
        return (OS_ERR_TASK_DEL_ISR);
   143ec:	00801004 	movi	r2,64
   143f0:	0000e506 	br	14788 <OSTaskDel+0x3cc>
    }
    if (prio == OS_TASK_IDLE_PRIO) {                    /* Not allowed to delete idle task             */
   143f4:	e0bfff03 	ldbu	r2,-4(fp)
   143f8:	10800518 	cmpnei	r2,r2,20
   143fc:	1000021e 	bne	r2,zero,14408 <OSTaskDel+0x4c>
        return (OS_ERR_TASK_DEL_IDLE);
   14400:	00800f84 	movi	r2,62
   14404:	0000e006 	br	14788 <OSTaskDel+0x3cc>
    }
#if OS_ARG_CHK_EN > 0
    if (prio >= OS_LOWEST_PRIO) {                       /* Task priority valid ?                       */
   14408:	e0bfff03 	ldbu	r2,-4(fp)
   1440c:	10800530 	cmpltui	r2,r2,20
   14410:	1000051e 	bne	r2,zero,14428 <OSTaskDel+0x6c>
        if (prio != OS_PRIO_SELF) {
   14414:	e0bfff03 	ldbu	r2,-4(fp)
   14418:	10803fe0 	cmpeqi	r2,r2,255
   1441c:	1000021e 	bne	r2,zero,14428 <OSTaskDel+0x6c>
            return (OS_ERR_PRIO_INVALID);
   14420:	00800a84 	movi	r2,42
   14424:	0000d806 	br	14788 <OSTaskDel+0x3cc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   14428:	0005303a 	rdctl	r2,status
   1442c:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   14430:	e0fff917 	ldw	r3,-28(fp)
   14434:	00bfff84 	movi	r2,-2
   14438:	1884703a 	and	r2,r3,r2
   1443c:	1001703a 	wrctl	status,r2
  
  return context;
   14440:	e0bff917 	ldw	r2,-28(fp)
        }
    }
#endif

/*$PAGE*/
    OS_ENTER_CRITICAL();
   14444:	e0bff615 	stw	r2,-40(fp)
    if (prio == OS_PRIO_SELF) {                         /* See if requesting to delete self            */
   14448:	e0bfff03 	ldbu	r2,-4(fp)
   1444c:	10803fd8 	cmpnei	r2,r2,255
   14450:	1000051e 	bne	r2,zero,14468 <OSTaskDel+0xac>
        prio = OSTCBCur->OSTCBPrio;                     /* Set priority to delete to current           */
   14454:	008000b4 	movhi	r2,2
   14458:	10b6d104 	addi	r2,r2,-9404
   1445c:	10800017 	ldw	r2,0(r2)
   14460:	10800c83 	ldbu	r2,50(r2)
   14464:	e0bfff05 	stb	r2,-4(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
   14468:	e0ffff03 	ldbu	r3,-4(fp)
   1446c:	008000b4 	movhi	r2,2
   14470:	109b5804 	addi	r2,r2,28000
   14474:	18c7883a 	add	r3,r3,r3
   14478:	18c7883a 	add	r3,r3,r3
   1447c:	10c5883a 	add	r2,r2,r3
   14480:	10800017 	ldw	r2,0(r2)
   14484:	e0bff715 	stw	r2,-36(fp)
    if (ptcb == (OS_TCB *)0) {                          /* Task to delete must exist                   */
   14488:	e0bff717 	ldw	r2,-36(fp)
   1448c:	1000061e 	bne	r2,zero,144a8 <OSTaskDel+0xec>
   14490:	e0bff617 	ldw	r2,-40(fp)
   14494:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   14498:	e0bffa17 	ldw	r2,-24(fp)
   1449c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
   144a0:	008010c4 	movi	r2,67
   144a4:	0000b806 	br	14788 <OSTaskDel+0x3cc>
    }
    if (ptcb == OS_TCB_RESERVED) {                      /* Must not be assigned to Mutex               */
   144a8:	e0bff717 	ldw	r2,-36(fp)
   144ac:	10800058 	cmpnei	r2,r2,1
   144b0:	1000061e 	bne	r2,zero,144cc <OSTaskDel+0x110>
   144b4:	e0bff617 	ldw	r2,-40(fp)
   144b8:	e0bffb15 	stw	r2,-20(fp)
   144bc:	e0bffb17 	ldw	r2,-20(fp)
   144c0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_DEL);
   144c4:	00800f44 	movi	r2,61
   144c8:	0000af06 	br	14788 <OSTaskDel+0x3cc>
    }

    OSRdyTbl[ptcb->OSTCBY] &= ~ptcb->OSTCBBitX;
   144cc:	e0bff717 	ldw	r2,-36(fp)
   144d0:	10800d03 	ldbu	r2,52(r2)
   144d4:	10c03fcc 	andi	r3,r2,255
   144d8:	e0bff717 	ldw	r2,-36(fp)
   144dc:	10800d03 	ldbu	r2,52(r2)
   144e0:	11003fcc 	andi	r4,r2,255
   144e4:	008000b4 	movhi	r2,2
   144e8:	10b6ce44 	addi	r2,r2,-9415
   144ec:	1105883a 	add	r2,r2,r4
   144f0:	10800003 	ldbu	r2,0(r2)
   144f4:	1009883a 	mov	r4,r2
   144f8:	e0bff717 	ldw	r2,-36(fp)
   144fc:	10800d43 	ldbu	r2,53(r2)
   14500:	0084303a 	nor	r2,zero,r2
   14504:	2084703a 	and	r2,r4,r2
   14508:	1009883a 	mov	r4,r2
   1450c:	008000b4 	movhi	r2,2
   14510:	10b6ce44 	addi	r2,r2,-9415
   14514:	10c5883a 	add	r2,r2,r3
   14518:	11000005 	stb	r4,0(r2)
    if (OSRdyTbl[ptcb->OSTCBY] == 0) {                  /* Make task not ready                         */
   1451c:	e0bff717 	ldw	r2,-36(fp)
   14520:	10800d03 	ldbu	r2,52(r2)
   14524:	10c03fcc 	andi	r3,r2,255
   14528:	008000b4 	movhi	r2,2
   1452c:	10b6ce44 	addi	r2,r2,-9415
   14530:	10c5883a 	add	r2,r2,r3
   14534:	10800003 	ldbu	r2,0(r2)
   14538:	10803fcc 	andi	r2,r2,255
   1453c:	10000c1e 	bne	r2,zero,14570 <OSTaskDel+0x1b4>
        OSRdyGrp           &= ~ptcb->OSTCBBitY;
   14540:	e0bff717 	ldw	r2,-36(fp)
   14544:	10800d83 	ldbu	r2,54(r2)
   14548:	0084303a 	nor	r2,zero,r2
   1454c:	1007883a 	mov	r3,r2
   14550:	008000b4 	movhi	r2,2
   14554:	10b6ce04 	addi	r2,r2,-9416
   14558:	10800003 	ldbu	r2,0(r2)
   1455c:	1884703a 	and	r2,r3,r2
   14560:	1007883a 	mov	r3,r2
   14564:	008000b4 	movhi	r2,2
   14568:	10b6ce04 	addi	r2,r2,-9416
   1456c:	10c00005 	stb	r3,0(r2)
    }
    
#if (OS_EVENT_EN)
    if (ptcb->OSTCBEventPtr != (OS_EVENT *)0) {
   14570:	e0bff717 	ldw	r2,-36(fp)
   14574:	10800717 	ldw	r2,28(r2)
   14578:	10000526 	beq	r2,zero,14590 <OSTaskDel+0x1d4>
        OS_EventTaskRemove(ptcb, ptcb->OSTCBEventPtr);  /* Remove this task from any event   wait list */
   1457c:	e0bff717 	ldw	r2,-36(fp)
   14580:	10800717 	ldw	r2,28(r2)
   14584:	e13ff717 	ldw	r4,-36(fp)
   14588:	100b883a 	mov	r5,r2
   1458c:	000ef900 	call	ef90 <OS_EventTaskRemove>
    }
#if (OS_EVENT_MULTI_EN > 0)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {   /* Remove this task from any events' wait lists*/
   14590:	e0bff717 	ldw	r2,-36(fp)
   14594:	10800817 	ldw	r2,32(r2)
   14598:	10000526 	beq	r2,zero,145b0 <OSTaskDel+0x1f4>
        OS_EventTaskRemoveMulti(ptcb, ptcb->OSTCBEventMultiPtr);
   1459c:	e0bff717 	ldw	r2,-36(fp)
   145a0:	10800817 	ldw	r2,32(r2)
   145a4:	e13ff717 	ldw	r4,-36(fp)
   145a8:	100b883a 	mov	r5,r2
   145ac:	000f0440 	call	f044 <OS_EventTaskRemoveMulti>
    }
#endif
#endif

#if (OS_FLAG_EN > 0) && (OS_MAX_FLAGS > 0)
    pnode = ptcb->OSTCBFlagNode;
   145b0:	e0bff717 	ldw	r2,-36(fp)
   145b4:	10800a17 	ldw	r2,40(r2)
   145b8:	e0bff815 	stw	r2,-32(fp)
    if (pnode != (OS_FLAG_NODE *)0) {                   /* If task is waiting on event flag            */
   145bc:	e0bff817 	ldw	r2,-32(fp)
   145c0:	10000226 	beq	r2,zero,145cc <OSTaskDel+0x210>
        OS_FlagUnlink(pnode);                           /* Remove from wait list                       */
   145c4:	e13ff817 	ldw	r4,-32(fp)
   145c8:	00115980 	call	11598 <OS_FlagUnlink>
    }
#endif

    ptcb->OSTCBDly      = 0;                            /* Prevent OSTimeTick() from updating          */
   145cc:	e0bff717 	ldw	r2,-36(fp)
   145d0:	10000b8d 	sth	zero,46(r2)
    ptcb->OSTCBStat     = OS_STAT_RDY;                  /* Prevent task from being resumed             */
   145d4:	e0bff717 	ldw	r2,-36(fp)
   145d8:	10000c05 	stb	zero,48(r2)
    ptcb->OSTCBStatPend = OS_STAT_PEND_OK;
   145dc:	e0bff717 	ldw	r2,-36(fp)
   145e0:	10000c45 	stb	zero,49(r2)
    if (OSLockNesting < 255u) {                         /* Make sure we don't context switch           */
   145e4:	008000b4 	movhi	r2,2
   145e8:	10b6c204 	addi	r2,r2,-9464
   145ec:	10800003 	ldbu	r2,0(r2)
   145f0:	10803fcc 	andi	r2,r2,255
   145f4:	10803fe0 	cmpeqi	r2,r2,255
   145f8:	1000081e 	bne	r2,zero,1461c <OSTaskDel+0x260>
        OSLockNesting++;
   145fc:	008000b4 	movhi	r2,2
   14600:	10b6c204 	addi	r2,r2,-9464
   14604:	10800003 	ldbu	r2,0(r2)
   14608:	10800044 	addi	r2,r2,1
   1460c:	1007883a 	mov	r3,r2
   14610:	008000b4 	movhi	r2,2
   14614:	10b6c204 	addi	r2,r2,-9464
   14618:	10c00005 	stb	r3,0(r2)
   1461c:	e0bff617 	ldw	r2,-40(fp)
   14620:	e0bffc15 	stw	r2,-16(fp)
   14624:	e0bffc17 	ldw	r2,-16(fp)
   14628:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();                                 /* Enabling INT. ignores next instruc.         */
    OS_Dummy();                                         /* ... Dummy ensures that INTs will be         */
   1462c:	000eb840 	call	eb84 <OS_Dummy>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   14630:	0005303a 	rdctl	r2,status
   14634:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   14638:	e0fffd17 	ldw	r3,-12(fp)
   1463c:	00bfff84 	movi	r2,-2
   14640:	1884703a 	and	r2,r3,r2
   14644:	1001703a 	wrctl	status,r2
  
  return context;
   14648:	e0bffd17 	ldw	r2,-12(fp)
    OS_ENTER_CRITICAL();                                /* ... disabled HERE!                          */
   1464c:	e0bff615 	stw	r2,-40(fp)
    if (OSLockNesting > 0) {                            /* Remove context switch lock                  */
   14650:	008000b4 	movhi	r2,2
   14654:	10b6c204 	addi	r2,r2,-9464
   14658:	10800003 	ldbu	r2,0(r2)
   1465c:	10803fcc 	andi	r2,r2,255
   14660:	10000826 	beq	r2,zero,14684 <OSTaskDel+0x2c8>
        OSLockNesting--;
   14664:	008000b4 	movhi	r2,2
   14668:	10b6c204 	addi	r2,r2,-9464
   1466c:	10800003 	ldbu	r2,0(r2)
   14670:	10bfffc4 	addi	r2,r2,-1
   14674:	1007883a 	mov	r3,r2
   14678:	008000b4 	movhi	r2,2
   1467c:	10b6c204 	addi	r2,r2,-9464
   14680:	10c00005 	stb	r3,0(r2)
    }
    OSTaskDelHook(ptcb);                                /* Call user defined hook                      */
   14684:	e13ff717 	ldw	r4,-36(fp)
   14688:	0018e840 	call	18e84 <OSTaskDelHook>
    OSTaskCtr--;                                        /* One less task being managed                 */
   1468c:	008000b4 	movhi	r2,2
   14690:	10b6ca44 	addi	r2,r2,-9431
   14694:	10800003 	ldbu	r2,0(r2)
   14698:	10bfffc4 	addi	r2,r2,-1
   1469c:	1007883a 	mov	r3,r2
   146a0:	008000b4 	movhi	r2,2
   146a4:	10b6ca44 	addi	r2,r2,-9431
   146a8:	10c00005 	stb	r3,0(r2)
    OSTCBPrioTbl[prio] = (OS_TCB *)0;                   /* Clear old priority entry                    */
   146ac:	e0ffff03 	ldbu	r3,-4(fp)
   146b0:	008000b4 	movhi	r2,2
   146b4:	109b5804 	addi	r2,r2,28000
   146b8:	18c7883a 	add	r3,r3,r3
   146bc:	18c7883a 	add	r3,r3,r3
   146c0:	10c5883a 	add	r2,r2,r3
   146c4:	10000015 	stw	zero,0(r2)
    if (ptcb->OSTCBPrev == (OS_TCB *)0) {               /* Remove from TCB chain                       */
   146c8:	e0bff717 	ldw	r2,-36(fp)
   146cc:	10800617 	ldw	r2,24(r2)
   146d0:	1000091e 	bne	r2,zero,146f8 <OSTaskDel+0x33c>
        ptcb->OSTCBNext->OSTCBPrev = (OS_TCB *)0;
   146d4:	e0bff717 	ldw	r2,-36(fp)
   146d8:	10800517 	ldw	r2,20(r2)
   146dc:	10000615 	stw	zero,24(r2)
        OSTCBList                  = ptcb->OSTCBNext;
   146e0:	e0bff717 	ldw	r2,-36(fp)
   146e4:	10c00517 	ldw	r3,20(r2)
   146e8:	008000b4 	movhi	r2,2
   146ec:	10b6c504 	addi	r2,r2,-9452
   146f0:	10c00015 	stw	r3,0(r2)
   146f4:	00000a06 	br	14720 <OSTaskDel+0x364>
    } else {
        ptcb->OSTCBPrev->OSTCBNext = ptcb->OSTCBNext;
   146f8:	e0bff717 	ldw	r2,-36(fp)
   146fc:	10800617 	ldw	r2,24(r2)
   14700:	e0fff717 	ldw	r3,-36(fp)
   14704:	18c00517 	ldw	r3,20(r3)
   14708:	10c00515 	stw	r3,20(r2)
        ptcb->OSTCBNext->OSTCBPrev = ptcb->OSTCBPrev;
   1470c:	e0bff717 	ldw	r2,-36(fp)
   14710:	10800517 	ldw	r2,20(r2)
   14714:	e0fff717 	ldw	r3,-36(fp)
   14718:	18c00617 	ldw	r3,24(r3)
   1471c:	10c00615 	stw	r3,24(r2)
    }
    ptcb->OSTCBNext   = OSTCBFreeList;                  /* Return TCB to free TCB list                 */
   14720:	008000b4 	movhi	r2,2
   14724:	10b6c904 	addi	r2,r2,-9436
   14728:	10c00017 	ldw	r3,0(r2)
   1472c:	e0bff717 	ldw	r2,-36(fp)
   14730:	10c00515 	stw	r3,20(r2)
    OSTCBFreeList     = ptcb;
   14734:	008000b4 	movhi	r2,2
   14738:	10b6c904 	addi	r2,r2,-9436
   1473c:	e0fff717 	ldw	r3,-36(fp)
   14740:	10c00015 	stw	r3,0(r2)
#if OS_TASK_NAME_SIZE > 1
    ptcb->OSTCBTaskName[0] = '?';                       /* Unknown name                                */
   14744:	e0bff717 	ldw	r2,-36(fp)
   14748:	00c00fc4 	movi	r3,63
   1474c:	10c01305 	stb	r3,76(r2)
    ptcb->OSTCBTaskName[1] = OS_ASCII_NUL;
   14750:	e0bff717 	ldw	r2,-36(fp)
   14754:	10001345 	stb	zero,77(r2)
   14758:	e0bff617 	ldw	r2,-40(fp)
   1475c:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   14760:	e0bffe17 	ldw	r2,-8(fp)
   14764:	1001703a 	wrctl	status,r2
#endif
    OS_EXIT_CRITICAL();
    if (OSRunning == OS_TRUE) {
   14768:	008000b4 	movhi	r2,2
   1476c:	10b6c244 	addi	r2,r2,-9463
   14770:	10800003 	ldbu	r2,0(r2)
   14774:	10803fcc 	andi	r2,r2,255
   14778:	10800058 	cmpnei	r2,r2,1
   1477c:	1000011e 	bne	r2,zero,14784 <OSTaskDel+0x3c8>
        OS_Sched();                                     /* Find new highest priority task              */
   14780:	000f5b80 	call	f5b8 <OS_Sched>
    }
    return (OS_ERR_NONE);
   14784:	0005883a 	mov	r2,zero
}
   14788:	e037883a 	mov	sp,fp
   1478c:	dfc00117 	ldw	ra,4(sp)
   14790:	df000017 	ldw	fp,0(sp)
   14794:	dec00204 	addi	sp,sp,8
   14798:	f800283a 	ret

0001479c <OSTaskDelReq>:
*********************************************************************************************************
*/
/*$PAGE*/
#if OS_TASK_DEL_EN > 0
INT8U  OSTaskDelReq (INT8U prio)
{
   1479c:	defff504 	addi	sp,sp,-44
   147a0:	df000a15 	stw	fp,40(sp)
   147a4:	df000a04 	addi	fp,sp,40
   147a8:	2005883a 	mov	r2,r4
   147ac:	e0bfff05 	stb	r2,-4(fp)
    INT8U      stat;
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   147b0:	e03ff615 	stw	zero,-40(fp)
#endif



    if (prio == OS_TASK_IDLE_PRIO) {                            /* Not allowed to delete idle task     */
   147b4:	e0bfff03 	ldbu	r2,-4(fp)
   147b8:	10800518 	cmpnei	r2,r2,20
   147bc:	1000021e 	bne	r2,zero,147c8 <OSTaskDelReq+0x2c>
        return (OS_ERR_TASK_DEL_IDLE);
   147c0:	00800f84 	movi	r2,62
   147c4:	00004706 	br	148e4 <OSTaskDelReq+0x148>
    }
#if OS_ARG_CHK_EN > 0
    if (prio >= OS_LOWEST_PRIO) {                               /* Task priority valid ?               */
   147c8:	e0bfff03 	ldbu	r2,-4(fp)
   147cc:	10800530 	cmpltui	r2,r2,20
   147d0:	1000051e 	bne	r2,zero,147e8 <OSTaskDelReq+0x4c>
        if (prio != OS_PRIO_SELF) {
   147d4:	e0bfff03 	ldbu	r2,-4(fp)
   147d8:	10803fe0 	cmpeqi	r2,r2,255
   147dc:	1000021e 	bne	r2,zero,147e8 <OSTaskDelReq+0x4c>
            return (OS_ERR_PRIO_INVALID);
   147e0:	00800a84 	movi	r2,42
   147e4:	00003f06 	br	148e4 <OSTaskDelReq+0x148>
        }
    }
#endif
    if (prio == OS_PRIO_SELF) {                                 /* See if a task is requesting to ...  */
   147e8:	e0bfff03 	ldbu	r2,-4(fp)
   147ec:	10803fd8 	cmpnei	r2,r2,255
   147f0:	1000131e 	bne	r2,zero,14840 <OSTaskDelReq+0xa4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   147f4:	0005303a 	rdctl	r2,status
   147f8:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   147fc:	e0fff917 	ldw	r3,-28(fp)
   14800:	00bfff84 	movi	r2,-2
   14804:	1884703a 	and	r2,r3,r2
   14808:	1001703a 	wrctl	status,r2
  
  return context;
   1480c:	e0bff917 	ldw	r2,-28(fp)
        OS_ENTER_CRITICAL();                                    /* ... this task to delete itself      */
   14810:	e0bff615 	stw	r2,-40(fp)
        stat = OSTCBCur->OSTCBDelReq;                           /* Return request status to caller     */
   14814:	008000b4 	movhi	r2,2
   14818:	10b6d104 	addi	r2,r2,-9404
   1481c:	10800017 	ldw	r2,0(r2)
   14820:	10800dc3 	ldbu	r2,55(r2)
   14824:	e0bff705 	stb	r2,-36(fp)
   14828:	e0bff617 	ldw	r2,-40(fp)
   1482c:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   14830:	e0bffa17 	ldw	r2,-24(fp)
   14834:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (stat);
   14838:	e0bff703 	ldbu	r2,-36(fp)
   1483c:	00002906 	br	148e4 <OSTaskDelReq+0x148>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   14840:	0005303a 	rdctl	r2,status
   14844:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   14848:	e0fffb17 	ldw	r3,-20(fp)
   1484c:	00bfff84 	movi	r2,-2
   14850:	1884703a 	and	r2,r3,r2
   14854:	1001703a 	wrctl	status,r2
  
  return context;
   14858:	e0bffb17 	ldw	r2,-20(fp)
    }
    OS_ENTER_CRITICAL();
   1485c:	e0bff615 	stw	r2,-40(fp)
    ptcb = OSTCBPrioTbl[prio];
   14860:	e0ffff03 	ldbu	r3,-4(fp)
   14864:	008000b4 	movhi	r2,2
   14868:	109b5804 	addi	r2,r2,28000
   1486c:	18c7883a 	add	r3,r3,r3
   14870:	18c7883a 	add	r3,r3,r3
   14874:	10c5883a 	add	r2,r2,r3
   14878:	10800017 	ldw	r2,0(r2)
   1487c:	e0bff815 	stw	r2,-32(fp)
    if (ptcb == (OS_TCB *)0) {                                  /* Task to delete must exist           */
   14880:	e0bff817 	ldw	r2,-32(fp)
   14884:	1000061e 	bne	r2,zero,148a0 <OSTaskDelReq+0x104>
   14888:	e0bff617 	ldw	r2,-40(fp)
   1488c:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   14890:	e0bffc17 	ldw	r2,-16(fp)
   14894:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);                         /* Task must already be deleted        */
   14898:	008010c4 	movi	r2,67
   1489c:	00001106 	br	148e4 <OSTaskDelReq+0x148>
    }
    if (ptcb == OS_TCB_RESERVED) {                              /* Must NOT be assigned to a Mutex     */
   148a0:	e0bff817 	ldw	r2,-32(fp)
   148a4:	10800058 	cmpnei	r2,r2,1
   148a8:	1000061e 	bne	r2,zero,148c4 <OSTaskDelReq+0x128>
   148ac:	e0bff617 	ldw	r2,-40(fp)
   148b0:	e0bffd15 	stw	r2,-12(fp)
   148b4:	e0bffd17 	ldw	r2,-12(fp)
   148b8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_DEL);
   148bc:	00800f44 	movi	r2,61
   148c0:	00000806 	br	148e4 <OSTaskDelReq+0x148>
    }
    ptcb->OSTCBDelReq = OS_ERR_TASK_DEL_REQ;                    /* Set flag indicating task to be DEL. */
   148c4:	e0bff817 	ldw	r2,-32(fp)
   148c8:	00c00fc4 	movi	r3,63
   148cc:	10c00dc5 	stb	r3,55(r2)
   148d0:	e0bff617 	ldw	r2,-40(fp)
   148d4:	e0bffe15 	stw	r2,-8(fp)
   148d8:	e0bffe17 	ldw	r2,-8(fp)
   148dc:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
   148e0:	0005883a 	mov	r2,zero
}
   148e4:	e037883a 	mov	sp,fp
   148e8:	df000017 	ldw	fp,0(sp)
   148ec:	dec00104 	addi	sp,sp,4
   148f0:	f800283a 	ret

000148f4 <OSTaskNameGet>:
*********************************************************************************************************
*/

#if OS_TASK_NAME_SIZE > 1
INT8U  OSTaskNameGet (INT8U prio, INT8U *pname, INT8U *perr)
{
   148f4:	defff404 	addi	sp,sp,-48
   148f8:	dfc00b15 	stw	ra,44(sp)
   148fc:	df000a15 	stw	fp,40(sp)
   14900:	df000a04 	addi	fp,sp,40
   14904:	2005883a 	mov	r2,r4
   14908:	e17ffe15 	stw	r5,-8(fp)
   1490c:	e1bfff15 	stw	r6,-4(fp)
   14910:	e0bffd05 	stb	r2,-12(fp)
    OS_TCB    *ptcb;
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                              /* Allocate storage for CPU status register   */
    OS_CPU_SR  cpu_sr = 0;
   14914:	e03ff615 	stw	zero,-40(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                            /* Validate 'perr'                            */
   14918:	e0bfff17 	ldw	r2,-4(fp)
   1491c:	1000021e 	bne	r2,zero,14928 <OSTaskNameGet+0x34>
        return (0);
   14920:	0005883a 	mov	r2,zero
   14924:	00005806 	br	14a88 <OSTaskNameGet+0x194>
    }
    if (prio > OS_LOWEST_PRIO) {                         /* Task priority valid ?                      */
   14928:	e0bffd03 	ldbu	r2,-12(fp)
   1492c:	10800570 	cmpltui	r2,r2,21
   14930:	1000081e 	bne	r2,zero,14954 <OSTaskNameGet+0x60>
        if (prio != OS_PRIO_SELF) {
   14934:	e0bffd03 	ldbu	r2,-12(fp)
   14938:	10803fe0 	cmpeqi	r2,r2,255
   1493c:	1000051e 	bne	r2,zero,14954 <OSTaskNameGet+0x60>
            *perr = OS_ERR_PRIO_INVALID;                 /* No                                         */
   14940:	e0bfff17 	ldw	r2,-4(fp)
   14944:	00c00a84 	movi	r3,42
   14948:	10c00005 	stb	r3,0(r2)
            return (0);
   1494c:	0005883a 	mov	r2,zero
   14950:	00004d06 	br	14a88 <OSTaskNameGet+0x194>
        }
    }
    if (pname == (INT8U *)0) {                           /* Is 'pname' a NULL pointer?                 */
   14954:	e0bffe17 	ldw	r2,-8(fp)
   14958:	1000051e 	bne	r2,zero,14970 <OSTaskNameGet+0x7c>
        *perr = OS_ERR_PNAME_NULL;                       /* Yes                                        */
   1495c:	e0bfff17 	ldw	r2,-4(fp)
   14960:	00c00304 	movi	r3,12
   14964:	10c00005 	stb	r3,0(r2)
        return (0);
   14968:	0005883a 	mov	r2,zero
   1496c:	00004606 	br	14a88 <OSTaskNameGet+0x194>
    }
#endif
    if (OSIntNesting > 0) {                              /* See if trying to call from an ISR          */
   14970:	008000b4 	movhi	r2,2
   14974:	10b6d004 	addi	r2,r2,-9408
   14978:	10800003 	ldbu	r2,0(r2)
   1497c:	10803fcc 	andi	r2,r2,255
   14980:	10000526 	beq	r2,zero,14998 <OSTaskNameGet+0xa4>
        *perr = OS_ERR_NAME_GET_ISR;
   14984:	e0bfff17 	ldw	r2,-4(fp)
   14988:	00c00444 	movi	r3,17
   1498c:	10c00005 	stb	r3,0(r2)
        return (0);
   14990:	0005883a 	mov	r2,zero
   14994:	00003c06 	br	14a88 <OSTaskNameGet+0x194>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   14998:	0005303a 	rdctl	r2,status
   1499c:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   149a0:	e0fff917 	ldw	r3,-28(fp)
   149a4:	00bfff84 	movi	r2,-2
   149a8:	1884703a 	and	r2,r3,r2
   149ac:	1001703a 	wrctl	status,r2
  
  return context;
   149b0:	e0bff917 	ldw	r2,-28(fp)
    }
    OS_ENTER_CRITICAL();
   149b4:	e0bff615 	stw	r2,-40(fp)
    if (prio == OS_PRIO_SELF) {                          /* See if caller desires it's own name        */
   149b8:	e0bffd03 	ldbu	r2,-12(fp)
   149bc:	10803fd8 	cmpnei	r2,r2,255
   149c0:	1000051e 	bne	r2,zero,149d8 <OSTaskNameGet+0xe4>
        prio = OSTCBCur->OSTCBPrio;
   149c4:	008000b4 	movhi	r2,2
   149c8:	10b6d104 	addi	r2,r2,-9404
   149cc:	10800017 	ldw	r2,0(r2)
   149d0:	10800c83 	ldbu	r2,50(r2)
   149d4:	e0bffd05 	stb	r2,-12(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
   149d8:	e0fffd03 	ldbu	r3,-12(fp)
   149dc:	008000b4 	movhi	r2,2
   149e0:	109b5804 	addi	r2,r2,28000
   149e4:	18c7883a 	add	r3,r3,r3
   149e8:	18c7883a 	add	r3,r3,r3
   149ec:	10c5883a 	add	r2,r2,r3
   149f0:	10800017 	ldw	r2,0(r2)
   149f4:	e0bff715 	stw	r2,-36(fp)
    if (ptcb == (OS_TCB *)0) {                           /* Does task exist?                           */
   149f8:	e0bff717 	ldw	r2,-36(fp)
   149fc:	1000091e 	bne	r2,zero,14a24 <OSTaskNameGet+0x130>
   14a00:	e0bff617 	ldw	r2,-40(fp)
   14a04:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   14a08:	e0bffa17 	ldw	r2,-24(fp)
   14a0c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                              /* No                                         */
        *perr = OS_ERR_TASK_NOT_EXIST;
   14a10:	e0bfff17 	ldw	r2,-4(fp)
   14a14:	00c010c4 	movi	r3,67
   14a18:	10c00005 	stb	r3,0(r2)
        return (0);
   14a1c:	0005883a 	mov	r2,zero
   14a20:	00001906 	br	14a88 <OSTaskNameGet+0x194>
    }
    if (ptcb == OS_TCB_RESERVED) {                       /* Task assigned to a Mutex?                  */
   14a24:	e0bff717 	ldw	r2,-36(fp)
   14a28:	10800058 	cmpnei	r2,r2,1
   14a2c:	1000091e 	bne	r2,zero,14a54 <OSTaskNameGet+0x160>
   14a30:	e0bff617 	ldw	r2,-40(fp)
   14a34:	e0bffb15 	stw	r2,-20(fp)
   14a38:	e0bffb17 	ldw	r2,-20(fp)
   14a3c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                              /* Yes                                        */
        *perr = OS_ERR_TASK_NOT_EXIST;
   14a40:	e0bfff17 	ldw	r2,-4(fp)
   14a44:	00c010c4 	movi	r3,67
   14a48:	10c00005 	stb	r3,0(r2)
        return (0);
   14a4c:	0005883a 	mov	r2,zero
   14a50:	00000d06 	br	14a88 <OSTaskNameGet+0x194>
    }
    len   = OS_StrCopy(pname, ptcb->OSTCBTaskName);      /* Yes, copy name from TCB                    */
   14a54:	e0bff717 	ldw	r2,-36(fp)
   14a58:	10801304 	addi	r2,r2,76
   14a5c:	e13ffe17 	ldw	r4,-8(fp)
   14a60:	100b883a 	mov	r5,r2
   14a64:	000f6f40 	call	f6f4 <OS_StrCopy>
   14a68:	e0bff805 	stb	r2,-32(fp)
   14a6c:	e0bff617 	ldw	r2,-40(fp)
   14a70:	e0bffc15 	stw	r2,-16(fp)
   14a74:	e0bffc17 	ldw	r2,-16(fp)
   14a78:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
   14a7c:	e0bfff17 	ldw	r2,-4(fp)
   14a80:	10000005 	stb	zero,0(r2)
    return (len);
   14a84:	e0bff803 	ldbu	r2,-32(fp)
}
   14a88:	e037883a 	mov	sp,fp
   14a8c:	dfc00117 	ldw	ra,4(sp)
   14a90:	df000017 	ldw	fp,0(sp)
   14a94:	dec00204 	addi	sp,sp,8
   14a98:	f800283a 	ret

00014a9c <OSTaskNameSet>:
* Returns    : None
*********************************************************************************************************
*/
#if OS_TASK_NAME_SIZE > 1
void  OSTaskNameSet (INT8U prio, INT8U *pname, INT8U *perr)
{
   14a9c:	defff304 	addi	sp,sp,-52
   14aa0:	dfc00c15 	stw	ra,48(sp)
   14aa4:	df000b15 	stw	fp,44(sp)
   14aa8:	df000b04 	addi	fp,sp,44
   14aac:	2005883a 	mov	r2,r4
   14ab0:	e17ffe15 	stw	r5,-8(fp)
   14ab4:	e1bfff15 	stw	r6,-4(fp)
   14ab8:	e0bffd05 	stb	r2,-12(fp)
    INT8U      len;
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                          /* Allocate storage for CPU status register       */
    OS_CPU_SR  cpu_sr = 0;
   14abc:	e03ff515 	stw	zero,-44(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                        /* Validate 'perr'                                */
   14ac0:	e0bfff17 	ldw	r2,-4(fp)
   14ac4:	1000011e 	bne	r2,zero,14acc <OSTaskNameSet+0x30>
        return;
   14ac8:	00005f06 	br	14c48 <OSTaskNameSet+0x1ac>
    }
    if (prio > OS_LOWEST_PRIO) {                     /* Task priority valid ?                          */
   14acc:	e0bffd03 	ldbu	r2,-12(fp)
   14ad0:	10800570 	cmpltui	r2,r2,21
   14ad4:	1000071e 	bne	r2,zero,14af4 <OSTaskNameSet+0x58>
        if (prio != OS_PRIO_SELF) {
   14ad8:	e0bffd03 	ldbu	r2,-12(fp)
   14adc:	10803fe0 	cmpeqi	r2,r2,255
   14ae0:	1000041e 	bne	r2,zero,14af4 <OSTaskNameSet+0x58>
            *perr = OS_ERR_PRIO_INVALID;             /* No                                             */
   14ae4:	e0bfff17 	ldw	r2,-4(fp)
   14ae8:	00c00a84 	movi	r3,42
   14aec:	10c00005 	stb	r3,0(r2)
            return;
   14af0:	00005506 	br	14c48 <OSTaskNameSet+0x1ac>
        }
    }
    if (pname == (INT8U *)0) {                       /* Is 'pname' a NULL pointer?                     */
   14af4:	e0bffe17 	ldw	r2,-8(fp)
   14af8:	1000041e 	bne	r2,zero,14b0c <OSTaskNameSet+0x70>
        *perr = OS_ERR_PNAME_NULL;                   /* Yes                                            */
   14afc:	e0bfff17 	ldw	r2,-4(fp)
   14b00:	00c00304 	movi	r3,12
   14b04:	10c00005 	stb	r3,0(r2)
        return;
   14b08:	00004f06 	br	14c48 <OSTaskNameSet+0x1ac>
    }
#endif
    if (OSIntNesting > 0) {                          /* See if trying to call from an ISR              */
   14b0c:	008000b4 	movhi	r2,2
   14b10:	10b6d004 	addi	r2,r2,-9408
   14b14:	10800003 	ldbu	r2,0(r2)
   14b18:	10803fcc 	andi	r2,r2,255
   14b1c:	10000426 	beq	r2,zero,14b30 <OSTaskNameSet+0x94>
        *perr = OS_ERR_NAME_SET_ISR;
   14b20:	e0bfff17 	ldw	r2,-4(fp)
   14b24:	00c00484 	movi	r3,18
   14b28:	10c00005 	stb	r3,0(r2)
        return;
   14b2c:	00004606 	br	14c48 <OSTaskNameSet+0x1ac>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   14b30:	0005303a 	rdctl	r2,status
   14b34:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   14b38:	e0fff817 	ldw	r3,-32(fp)
   14b3c:	00bfff84 	movi	r2,-2
   14b40:	1884703a 	and	r2,r3,r2
   14b44:	1001703a 	wrctl	status,r2
  
  return context;
   14b48:	e0bff817 	ldw	r2,-32(fp)
    }
    OS_ENTER_CRITICAL();
   14b4c:	e0bff515 	stw	r2,-44(fp)
    if (prio == OS_PRIO_SELF) {                      /* See if caller desires to set it's own name     */
   14b50:	e0bffd03 	ldbu	r2,-12(fp)
   14b54:	10803fd8 	cmpnei	r2,r2,255
   14b58:	1000051e 	bne	r2,zero,14b70 <OSTaskNameSet+0xd4>
        prio = OSTCBCur->OSTCBPrio;
   14b5c:	008000b4 	movhi	r2,2
   14b60:	10b6d104 	addi	r2,r2,-9404
   14b64:	10800017 	ldw	r2,0(r2)
   14b68:	10800c83 	ldbu	r2,50(r2)
   14b6c:	e0bffd05 	stb	r2,-12(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
   14b70:	e0fffd03 	ldbu	r3,-12(fp)
   14b74:	008000b4 	movhi	r2,2
   14b78:	109b5804 	addi	r2,r2,28000
   14b7c:	18c7883a 	add	r3,r3,r3
   14b80:	18c7883a 	add	r3,r3,r3
   14b84:	10c5883a 	add	r2,r2,r3
   14b88:	10800017 	ldw	r2,0(r2)
   14b8c:	e0bff615 	stw	r2,-40(fp)
    if (ptcb == (OS_TCB *)0) {                       /* Does task exist?                               */
   14b90:	e0bff617 	ldw	r2,-40(fp)
   14b94:	1000081e 	bne	r2,zero,14bb8 <OSTaskNameSet+0x11c>
   14b98:	e0bff517 	ldw	r2,-44(fp)
   14b9c:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   14ba0:	e0bff917 	ldw	r2,-28(fp)
   14ba4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                          /* No                                             */
        *perr = OS_ERR_TASK_NOT_EXIST;
   14ba8:	e0bfff17 	ldw	r2,-4(fp)
   14bac:	00c010c4 	movi	r3,67
   14bb0:	10c00005 	stb	r3,0(r2)
        return;
   14bb4:	00002406 	br	14c48 <OSTaskNameSet+0x1ac>
    }
    if (ptcb == OS_TCB_RESERVED) {                   /* Task assigned to a Mutex?                      */
   14bb8:	e0bff617 	ldw	r2,-40(fp)
   14bbc:	10800058 	cmpnei	r2,r2,1
   14bc0:	1000081e 	bne	r2,zero,14be4 <OSTaskNameSet+0x148>
   14bc4:	e0bff517 	ldw	r2,-44(fp)
   14bc8:	e0bffa15 	stw	r2,-24(fp)
   14bcc:	e0bffa17 	ldw	r2,-24(fp)
   14bd0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                          /* Yes                                            */
        *perr = OS_ERR_TASK_NOT_EXIST;
   14bd4:	e0bfff17 	ldw	r2,-4(fp)
   14bd8:	00c010c4 	movi	r3,67
   14bdc:	10c00005 	stb	r3,0(r2)
        return;
   14be0:	00001906 	br	14c48 <OSTaskNameSet+0x1ac>
    }
    len = OS_StrLen(pname);                          /* Yes, Can we fit the string in the TCB?         */
   14be4:	e13ffe17 	ldw	r4,-8(fp)
   14be8:	000f7680 	call	f768 <OS_StrLen>
   14bec:	e0bff705 	stb	r2,-36(fp)
    if (len > (OS_TASK_NAME_SIZE - 1)) {             /*      No                                        */
   14bf0:	e0bff703 	ldbu	r2,-36(fp)
   14bf4:	10800830 	cmpltui	r2,r2,32
   14bf8:	1000081e 	bne	r2,zero,14c1c <OSTaskNameSet+0x180>
   14bfc:	e0bff517 	ldw	r2,-44(fp)
   14c00:	e0bffb15 	stw	r2,-20(fp)
   14c04:	e0bffb17 	ldw	r2,-20(fp)
   14c08:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_TASK_NAME_TOO_LONG;
   14c0c:	e0bfff17 	ldw	r2,-4(fp)
   14c10:	00c01044 	movi	r3,65
   14c14:	10c00005 	stb	r3,0(r2)
        return;
   14c18:	00000b06 	br	14c48 <OSTaskNameSet+0x1ac>
    }
    (void)OS_StrCopy(ptcb->OSTCBTaskName, pname);    /*      Yes, copy to TCB                          */
   14c1c:	e0bff617 	ldw	r2,-40(fp)
   14c20:	10801304 	addi	r2,r2,76
   14c24:	1009883a 	mov	r4,r2
   14c28:	e17ffe17 	ldw	r5,-8(fp)
   14c2c:	000f6f40 	call	f6f4 <OS_StrCopy>
   14c30:	e0bff517 	ldw	r2,-44(fp)
   14c34:	e0bffc15 	stw	r2,-16(fp)
   14c38:	e0bffc17 	ldw	r2,-16(fp)
   14c3c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
   14c40:	e0bfff17 	ldw	r2,-4(fp)
   14c44:	10000005 	stb	zero,0(r2)
}
   14c48:	e037883a 	mov	sp,fp
   14c4c:	dfc00117 	ldw	ra,4(sp)
   14c50:	df000017 	ldw	fp,0(sp)
   14c54:	dec00204 	addi	sp,sp,8
   14c58:	f800283a 	ret

00014c5c <OSTaskResume>:
*********************************************************************************************************
*/

#if OS_TASK_SUSPEND_EN > 0
INT8U  OSTaskResume (INT8U prio)
{
   14c5c:	defff404 	addi	sp,sp,-48
   14c60:	dfc00b15 	stw	ra,44(sp)
   14c64:	df000a15 	stw	fp,40(sp)
   14c68:	df000a04 	addi	fp,sp,40
   14c6c:	2005883a 	mov	r2,r4
   14c70:	e0bfff05 	stb	r2,-4(fp)
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                                   /* Storage for CPU status register       */
    OS_CPU_SR  cpu_sr = 0;
   14c74:	e03ff615 	stw	zero,-40(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio >= OS_LOWEST_PRIO) {                             /* Make sure task priority is valid      */
   14c78:	e0bfff03 	ldbu	r2,-4(fp)
   14c7c:	10800530 	cmpltui	r2,r2,20
   14c80:	1000021e 	bne	r2,zero,14c8c <OSTaskResume+0x30>
        return (OS_ERR_PRIO_INVALID);
   14c84:	00800a84 	movi	r2,42
   14c88:	00006d06 	br	14e40 <OSTaskResume+0x1e4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   14c8c:	0005303a 	rdctl	r2,status
   14c90:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   14c94:	e0fff817 	ldw	r3,-32(fp)
   14c98:	00bfff84 	movi	r2,-2
   14c9c:	1884703a 	and	r2,r3,r2
   14ca0:	1001703a 	wrctl	status,r2
  
  return context;
   14ca4:	e0bff817 	ldw	r2,-32(fp)
    }
#endif
    OS_ENTER_CRITICAL();
   14ca8:	e0bff615 	stw	r2,-40(fp)
    ptcb = OSTCBPrioTbl[prio];
   14cac:	e0ffff03 	ldbu	r3,-4(fp)
   14cb0:	008000b4 	movhi	r2,2
   14cb4:	109b5804 	addi	r2,r2,28000
   14cb8:	18c7883a 	add	r3,r3,r3
   14cbc:	18c7883a 	add	r3,r3,r3
   14cc0:	10c5883a 	add	r2,r2,r3
   14cc4:	10800017 	ldw	r2,0(r2)
   14cc8:	e0bff715 	stw	r2,-36(fp)
    if (ptcb == (OS_TCB *)0) {                                /* Task to suspend must exist            */
   14ccc:	e0bff717 	ldw	r2,-36(fp)
   14cd0:	1000061e 	bne	r2,zero,14cec <OSTaskResume+0x90>
   14cd4:	e0bff617 	ldw	r2,-40(fp)
   14cd8:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   14cdc:	e0bff917 	ldw	r2,-28(fp)
   14ce0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_RESUME_PRIO);
   14ce4:	00801184 	movi	r2,70
   14ce8:	00005506 	br	14e40 <OSTaskResume+0x1e4>
    }
    if (ptcb == OS_TCB_RESERVED) {                            /* See if assigned to Mutex              */
   14cec:	e0bff717 	ldw	r2,-36(fp)
   14cf0:	10800058 	cmpnei	r2,r2,1
   14cf4:	1000061e 	bne	r2,zero,14d10 <OSTaskResume+0xb4>
   14cf8:	e0bff617 	ldw	r2,-40(fp)
   14cfc:	e0bffa15 	stw	r2,-24(fp)
   14d00:	e0bffa17 	ldw	r2,-24(fp)
   14d04:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
   14d08:	008010c4 	movi	r2,67
   14d0c:	00004c06 	br	14e40 <OSTaskResume+0x1e4>
    }
    if ((ptcb->OSTCBStat & OS_STAT_SUSPEND) != OS_STAT_RDY) { /* Task must be suspended                */
   14d10:	e0bff717 	ldw	r2,-36(fp)
   14d14:	10800c03 	ldbu	r2,48(r2)
   14d18:	10803fcc 	andi	r2,r2,255
   14d1c:	1080020c 	andi	r2,r2,8
   14d20:	10004226 	beq	r2,zero,14e2c <OSTaskResume+0x1d0>
        ptcb->OSTCBStat &= ~(INT8U)OS_STAT_SUSPEND;           /* Remove suspension                     */
   14d24:	e0bff717 	ldw	r2,-36(fp)
   14d28:	10c00c03 	ldbu	r3,48(r2)
   14d2c:	00bffdc4 	movi	r2,-9
   14d30:	1884703a 	and	r2,r3,r2
   14d34:	1007883a 	mov	r3,r2
   14d38:	e0bff717 	ldw	r2,-36(fp)
   14d3c:	10c00c05 	stb	r3,48(r2)
        if (ptcb->OSTCBStat == OS_STAT_RDY) {                 /* See if task is now ready              */
   14d40:	e0bff717 	ldw	r2,-36(fp)
   14d44:	10800c03 	ldbu	r2,48(r2)
   14d48:	10803fcc 	andi	r2,r2,255
   14d4c:	1000311e 	bne	r2,zero,14e14 <OSTaskResume+0x1b8>
            if (ptcb->OSTCBDly == 0) {
   14d50:	e0bff717 	ldw	r2,-36(fp)
   14d54:	10800b8b 	ldhu	r2,46(r2)
   14d58:	10bfffcc 	andi	r2,r2,65535
   14d5c:	1000281e 	bne	r2,zero,14e00 <OSTaskResume+0x1a4>
                OSRdyGrp               |= ptcb->OSTCBBitY;    /* Yes, Make task ready to run           */
   14d60:	e0bff717 	ldw	r2,-36(fp)
   14d64:	10c00d83 	ldbu	r3,54(r2)
   14d68:	008000b4 	movhi	r2,2
   14d6c:	10b6ce04 	addi	r2,r2,-9416
   14d70:	10800003 	ldbu	r2,0(r2)
   14d74:	1884b03a 	or	r2,r3,r2
   14d78:	1007883a 	mov	r3,r2
   14d7c:	008000b4 	movhi	r2,2
   14d80:	10b6ce04 	addi	r2,r2,-9416
   14d84:	10c00005 	stb	r3,0(r2)
                OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
   14d88:	e0bff717 	ldw	r2,-36(fp)
   14d8c:	10800d03 	ldbu	r2,52(r2)
   14d90:	10c03fcc 	andi	r3,r2,255
   14d94:	e0bff717 	ldw	r2,-36(fp)
   14d98:	10800d03 	ldbu	r2,52(r2)
   14d9c:	11003fcc 	andi	r4,r2,255
   14da0:	008000b4 	movhi	r2,2
   14da4:	10b6ce44 	addi	r2,r2,-9415
   14da8:	1105883a 	add	r2,r2,r4
   14dac:	11000003 	ldbu	r4,0(r2)
   14db0:	e0bff717 	ldw	r2,-36(fp)
   14db4:	10800d43 	ldbu	r2,53(r2)
   14db8:	2084b03a 	or	r2,r4,r2
   14dbc:	1009883a 	mov	r4,r2
   14dc0:	008000b4 	movhi	r2,2
   14dc4:	10b6ce44 	addi	r2,r2,-9415
   14dc8:	10c5883a 	add	r2,r2,r3
   14dcc:	11000005 	stb	r4,0(r2)
   14dd0:	e0bff617 	ldw	r2,-40(fp)
   14dd4:	e0bffb15 	stw	r2,-20(fp)
   14dd8:	e0bffb17 	ldw	r2,-20(fp)
   14ddc:	1001703a 	wrctl	status,r2
                OS_EXIT_CRITICAL();
                if (OSRunning == OS_TRUE) {
   14de0:	008000b4 	movhi	r2,2
   14de4:	10b6c244 	addi	r2,r2,-9463
   14de8:	10800003 	ldbu	r2,0(r2)
   14dec:	10803fcc 	andi	r2,r2,255
   14df0:	10800058 	cmpnei	r2,r2,1
   14df4:	10000b1e 	bne	r2,zero,14e24 <OSTaskResume+0x1c8>
                    OS_Sched();                               /* Find new highest priority task        */
   14df8:	000f5b80 	call	f5b8 <OS_Sched>
   14dfc:	00000906 	br	14e24 <OSTaskResume+0x1c8>
   14e00:	e0bff617 	ldw	r2,-40(fp)
   14e04:	e0bffc15 	stw	r2,-16(fp)
   14e08:	e0bffc17 	ldw	r2,-16(fp)
   14e0c:	1001703a 	wrctl	status,r2
   14e10:	00000406 	br	14e24 <OSTaskResume+0x1c8>
   14e14:	e0bff617 	ldw	r2,-40(fp)
   14e18:	e0bffd15 	stw	r2,-12(fp)
   14e1c:	e0bffd17 	ldw	r2,-12(fp)
   14e20:	1001703a 	wrctl	status,r2
                OS_EXIT_CRITICAL();
            }
        } else {                                              /* Must be pending on event              */
            OS_EXIT_CRITICAL();
        }
        return (OS_ERR_NONE);
   14e24:	0005883a 	mov	r2,zero
   14e28:	00000506 	br	14e40 <OSTaskResume+0x1e4>
   14e2c:	e0bff617 	ldw	r2,-40(fp)
   14e30:	e0bffe15 	stw	r2,-8(fp)
   14e34:	e0bffe17 	ldw	r2,-8(fp)
   14e38:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_TASK_NOT_SUSPENDED);
   14e3c:	00801104 	movi	r2,68
}
   14e40:	e037883a 	mov	sp,fp
   14e44:	dfc00117 	ldw	ra,4(sp)
   14e48:	df000017 	ldw	fp,0(sp)
   14e4c:	dec00204 	addi	sp,sp,8
   14e50:	f800283a 	ret

00014e54 <OSTaskStkChk>:
*              OS_ERR_PDATA_NULL      if 'p_stk_data' is a NULL pointer
*********************************************************************************************************
*/
#if (OS_TASK_STAT_STK_CHK_EN > 0) && (OS_TASK_CREATE_EXT_EN > 0)
INT8U  OSTaskStkChk (INT8U prio, OS_STK_DATA *p_stk_data)
{
   14e54:	defff304 	addi	sp,sp,-52
   14e58:	df000c15 	stw	fp,48(sp)
   14e5c:	df000c04 	addi	fp,sp,48
   14e60:	2005883a 	mov	r2,r4
   14e64:	e17fff15 	stw	r5,-4(fp)
   14e68:	e0bffe05 	stb	r2,-8(fp)
    OS_TCB    *ptcb;
    OS_STK    *pchk;
    INT32U     nfree;
    INT32U     size;
#if OS_CRITICAL_METHOD == 3                            /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
   14e6c:	e03ff615 	stw	zero,-40(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio > OS_LOWEST_PRIO) {                       /* Make sure task priority is valid             */
   14e70:	e0bffe03 	ldbu	r2,-8(fp)
   14e74:	10800570 	cmpltui	r2,r2,21
   14e78:	1000051e 	bne	r2,zero,14e90 <OSTaskStkChk+0x3c>
        if (prio != OS_PRIO_SELF) {
   14e7c:	e0bffe03 	ldbu	r2,-8(fp)
   14e80:	10803fe0 	cmpeqi	r2,r2,255
   14e84:	1000021e 	bne	r2,zero,14e90 <OSTaskStkChk+0x3c>
            return (OS_ERR_PRIO_INVALID);
   14e88:	00800a84 	movi	r2,42
   14e8c:	00005f06 	br	1500c <OSTaskStkChk+0x1b8>
        }
    }
    if (p_stk_data == (OS_STK_DATA *)0) {              /* Validate 'p_stk_data'                        */
   14e90:	e0bfff17 	ldw	r2,-4(fp)
   14e94:	1000021e 	bne	r2,zero,14ea0 <OSTaskStkChk+0x4c>
        return (OS_ERR_PDATA_NULL);
   14e98:	00800244 	movi	r2,9
   14e9c:	00005b06 	br	1500c <OSTaskStkChk+0x1b8>
    }
#endif
    p_stk_data->OSFree = 0;                            /* Assume failure, set to 0 size                */
   14ea0:	e0bfff17 	ldw	r2,-4(fp)
   14ea4:	10000015 	stw	zero,0(r2)
    p_stk_data->OSUsed = 0;
   14ea8:	e0bfff17 	ldw	r2,-4(fp)
   14eac:	10000115 	stw	zero,4(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   14eb0:	0005303a 	rdctl	r2,status
   14eb4:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   14eb8:	e0fff917 	ldw	r3,-28(fp)
   14ebc:	00bfff84 	movi	r2,-2
   14ec0:	1884703a 	and	r2,r3,r2
   14ec4:	1001703a 	wrctl	status,r2
  
  return context;
   14ec8:	e0bff917 	ldw	r2,-28(fp)
    OS_ENTER_CRITICAL();
   14ecc:	e0bff615 	stw	r2,-40(fp)
    if (prio == OS_PRIO_SELF) {                        /* See if check for SELF                        */
   14ed0:	e0bffe03 	ldbu	r2,-8(fp)
   14ed4:	10803fd8 	cmpnei	r2,r2,255
   14ed8:	1000051e 	bne	r2,zero,14ef0 <OSTaskStkChk+0x9c>
        prio = OSTCBCur->OSTCBPrio;
   14edc:	008000b4 	movhi	r2,2
   14ee0:	10b6d104 	addi	r2,r2,-9404
   14ee4:	10800017 	ldw	r2,0(r2)
   14ee8:	10800c83 	ldbu	r2,50(r2)
   14eec:	e0bffe05 	stb	r2,-8(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
   14ef0:	e0fffe03 	ldbu	r3,-8(fp)
   14ef4:	008000b4 	movhi	r2,2
   14ef8:	109b5804 	addi	r2,r2,28000
   14efc:	18c7883a 	add	r3,r3,r3
   14f00:	18c7883a 	add	r3,r3,r3
   14f04:	10c5883a 	add	r2,r2,r3
   14f08:	10800017 	ldw	r2,0(r2)
   14f0c:	e0bff715 	stw	r2,-36(fp)
    if (ptcb == (OS_TCB *)0) {                         /* Make sure task exist                         */
   14f10:	e0bff717 	ldw	r2,-36(fp)
   14f14:	1000061e 	bne	r2,zero,14f30 <OSTaskStkChk+0xdc>
   14f18:	e0bff617 	ldw	r2,-40(fp)
   14f1c:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   14f20:	e0bffa17 	ldw	r2,-24(fp)
   14f24:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
   14f28:	008010c4 	movi	r2,67
   14f2c:	00003706 	br	1500c <OSTaskStkChk+0x1b8>
    }
    if (ptcb == OS_TCB_RESERVED) {
   14f30:	e0bff717 	ldw	r2,-36(fp)
   14f34:	10800058 	cmpnei	r2,r2,1
   14f38:	1000061e 	bne	r2,zero,14f54 <OSTaskStkChk+0x100>
   14f3c:	e0bff617 	ldw	r2,-40(fp)
   14f40:	e0bffb15 	stw	r2,-20(fp)
   14f44:	e0bffb17 	ldw	r2,-20(fp)
   14f48:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
   14f4c:	008010c4 	movi	r2,67
   14f50:	00002e06 	br	1500c <OSTaskStkChk+0x1b8>
    }
    if ((ptcb->OSTCBOpt & OS_TASK_OPT_STK_CHK) == 0) { /* Make sure stack checking option is set       */
   14f54:	e0bff717 	ldw	r2,-36(fp)
   14f58:	1080040b 	ldhu	r2,16(r2)
   14f5c:	10bfffcc 	andi	r2,r2,65535
   14f60:	1080004c 	andi	r2,r2,1
   14f64:	1000061e 	bne	r2,zero,14f80 <OSTaskStkChk+0x12c>
   14f68:	e0bff617 	ldw	r2,-40(fp)
   14f6c:	e0bffc15 	stw	r2,-16(fp)
   14f70:	e0bffc17 	ldw	r2,-16(fp)
   14f74:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_OPT);
   14f78:	00801144 	movi	r2,69
   14f7c:	00002306 	br	1500c <OSTaskStkChk+0x1b8>
    }
    nfree = 0;
   14f80:	e03ff515 	stw	zero,-44(fp)
    size  = ptcb->OSTCBStkSize;
   14f84:	e0bff717 	ldw	r2,-36(fp)
   14f88:	10800317 	ldw	r2,12(r2)
   14f8c:	e0bff815 	stw	r2,-32(fp)
    pchk  = ptcb->OSTCBStkBottom;
   14f90:	e0bff717 	ldw	r2,-36(fp)
   14f94:	10800217 	ldw	r2,8(r2)
   14f98:	e0bff415 	stw	r2,-48(fp)
   14f9c:	e0bff617 	ldw	r2,-40(fp)
   14fa0:	e0bffd15 	stw	r2,-12(fp)
   14fa4:	e0bffd17 	ldw	r2,-12(fp)
   14fa8:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
#if OS_STK_GROWTH == 1
    while (*pchk++ == (OS_STK)0) {                    /* Compute the number of zero entries on the stk */
   14fac:	00000306 	br	14fbc <OSTaskStkChk+0x168>
        nfree++;
   14fb0:	e0bff517 	ldw	r2,-44(fp)
   14fb4:	10800044 	addi	r2,r2,1
   14fb8:	e0bff515 	stw	r2,-44(fp)
    nfree = 0;
    size  = ptcb->OSTCBStkSize;
    pchk  = ptcb->OSTCBStkBottom;
    OS_EXIT_CRITICAL();
#if OS_STK_GROWTH == 1
    while (*pchk++ == (OS_STK)0) {                    /* Compute the number of zero entries on the stk */
   14fbc:	e0bff417 	ldw	r2,-48(fp)
   14fc0:	10c00104 	addi	r3,r2,4
   14fc4:	e0fff415 	stw	r3,-48(fp)
   14fc8:	10800017 	ldw	r2,0(r2)
   14fcc:	103ff826 	beq	r2,zero,14fb0 <__alt_mem_Flash_flash_data+0xf4014fb0>
#else
    while (*pchk-- == (OS_STK)0) {
        nfree++;
    }
#endif
    p_stk_data->OSFree = nfree * sizeof(OS_STK);          /* Compute number of free bytes on the stack */
   14fd0:	e0bff517 	ldw	r2,-44(fp)
   14fd4:	1085883a 	add	r2,r2,r2
   14fd8:	1085883a 	add	r2,r2,r2
   14fdc:	1007883a 	mov	r3,r2
   14fe0:	e0bfff17 	ldw	r2,-4(fp)
   14fe4:	10c00015 	stw	r3,0(r2)
    p_stk_data->OSUsed = (size - nfree) * sizeof(OS_STK); /* Compute number of bytes used on the stack */
   14fe8:	e0fff817 	ldw	r3,-32(fp)
   14fec:	e0bff517 	ldw	r2,-44(fp)
   14ff0:	1885c83a 	sub	r2,r3,r2
   14ff4:	1085883a 	add	r2,r2,r2
   14ff8:	1085883a 	add	r2,r2,r2
   14ffc:	1007883a 	mov	r3,r2
   15000:	e0bfff17 	ldw	r2,-4(fp)
   15004:	10c00115 	stw	r3,4(r2)
    return (OS_ERR_NONE);
   15008:	0005883a 	mov	r2,zero
}
   1500c:	e037883a 	mov	sp,fp
   15010:	df000017 	ldw	fp,0(sp)
   15014:	dec00104 	addi	sp,sp,4
   15018:	f800283a 	ret

0001501c <OSTaskSuspend>:
*********************************************************************************************************
*/

#if OS_TASK_SUSPEND_EN > 0
INT8U  OSTaskSuspend (INT8U prio)
{
   1501c:	defff504 	addi	sp,sp,-44
   15020:	dfc00a15 	stw	ra,40(sp)
   15024:	df000915 	stw	fp,36(sp)
   15028:	df000904 	addi	fp,sp,36
   1502c:	2005883a 	mov	r2,r4
   15030:	e0bfff05 	stb	r2,-4(fp)
    BOOLEAN    self;
    OS_TCB    *ptcb;
    INT8U      y;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   15034:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio == OS_TASK_IDLE_PRIO) {                            /* Not allowed to suspend idle task    */
   15038:	e0bfff03 	ldbu	r2,-4(fp)
   1503c:	10800518 	cmpnei	r2,r2,20
   15040:	1000021e 	bne	r2,zero,1504c <OSTaskSuspend+0x30>
        return (OS_ERR_TASK_SUSPEND_IDLE);
   15044:	008011c4 	movi	r2,71
   15048:	00007406 	br	1521c <OSTaskSuspend+0x200>
    }
    if (prio >= OS_LOWEST_PRIO) {                               /* Task priority valid ?               */
   1504c:	e0bfff03 	ldbu	r2,-4(fp)
   15050:	10800530 	cmpltui	r2,r2,20
   15054:	1000051e 	bne	r2,zero,1506c <OSTaskSuspend+0x50>
        if (prio != OS_PRIO_SELF) {
   15058:	e0bfff03 	ldbu	r2,-4(fp)
   1505c:	10803fe0 	cmpeqi	r2,r2,255
   15060:	1000021e 	bne	r2,zero,1506c <OSTaskSuspend+0x50>
            return (OS_ERR_PRIO_INVALID);
   15064:	00800a84 	movi	r2,42
   15068:	00006c06 	br	1521c <OSTaskSuspend+0x200>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1506c:	0005303a 	rdctl	r2,status
   15070:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   15074:	e0fffb17 	ldw	r3,-20(fp)
   15078:	00bfff84 	movi	r2,-2
   1507c:	1884703a 	and	r2,r3,r2
   15080:	1001703a 	wrctl	status,r2
  
  return context;
   15084:	e0bffb17 	ldw	r2,-20(fp)
        }
    }
#endif
    OS_ENTER_CRITICAL();
   15088:	e0bff815 	stw	r2,-32(fp)
    if (prio == OS_PRIO_SELF) {                                 /* See if suspend SELF                 */
   1508c:	e0bfff03 	ldbu	r2,-4(fp)
   15090:	10803fd8 	cmpnei	r2,r2,255
   15094:	1000081e 	bne	r2,zero,150b8 <OSTaskSuspend+0x9c>
        prio = OSTCBCur->OSTCBPrio;
   15098:	008000b4 	movhi	r2,2
   1509c:	10b6d104 	addi	r2,r2,-9404
   150a0:	10800017 	ldw	r2,0(r2)
   150a4:	10800c83 	ldbu	r2,50(r2)
   150a8:	e0bfff05 	stb	r2,-4(fp)
        self = OS_TRUE;
   150ac:	00800044 	movi	r2,1
   150b0:	e0bff705 	stb	r2,-36(fp)
   150b4:	00000b06 	br	150e4 <OSTaskSuspend+0xc8>
    } else if (prio == OSTCBCur->OSTCBPrio) {                   /* See if suspending self              */
   150b8:	008000b4 	movhi	r2,2
   150bc:	10b6d104 	addi	r2,r2,-9404
   150c0:	10800017 	ldw	r2,0(r2)
   150c4:	10800c83 	ldbu	r2,50(r2)
   150c8:	10c03fcc 	andi	r3,r2,255
   150cc:	e0bfff03 	ldbu	r2,-4(fp)
   150d0:	1880031e 	bne	r3,r2,150e0 <OSTaskSuspend+0xc4>
        self = OS_TRUE;
   150d4:	00800044 	movi	r2,1
   150d8:	e0bff705 	stb	r2,-36(fp)
   150dc:	00000106 	br	150e4 <OSTaskSuspend+0xc8>
    } else {
        self = OS_FALSE;                                        /* No suspending another task          */
   150e0:	e03ff705 	stb	zero,-36(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
   150e4:	e0ffff03 	ldbu	r3,-4(fp)
   150e8:	008000b4 	movhi	r2,2
   150ec:	109b5804 	addi	r2,r2,28000
   150f0:	18c7883a 	add	r3,r3,r3
   150f4:	18c7883a 	add	r3,r3,r3
   150f8:	10c5883a 	add	r2,r2,r3
   150fc:	10800017 	ldw	r2,0(r2)
   15100:	e0bff915 	stw	r2,-28(fp)
    if (ptcb == (OS_TCB *)0) {                                  /* Task to suspend must exist          */
   15104:	e0bff917 	ldw	r2,-28(fp)
   15108:	1000061e 	bne	r2,zero,15124 <OSTaskSuspend+0x108>
   1510c:	e0bff817 	ldw	r2,-32(fp)
   15110:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   15114:	e0bffc17 	ldw	r2,-16(fp)
   15118:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_SUSPEND_PRIO);
   1511c:	00801204 	movi	r2,72
   15120:	00003e06 	br	1521c <OSTaskSuspend+0x200>
    }
    if (ptcb == OS_TCB_RESERVED) {                              /* See if assigned to Mutex            */
   15124:	e0bff917 	ldw	r2,-28(fp)
   15128:	10800058 	cmpnei	r2,r2,1
   1512c:	1000061e 	bne	r2,zero,15148 <OSTaskSuspend+0x12c>
   15130:	e0bff817 	ldw	r2,-32(fp)
   15134:	e0bffd15 	stw	r2,-12(fp)
   15138:	e0bffd17 	ldw	r2,-12(fp)
   1513c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
   15140:	008010c4 	movi	r2,67
   15144:	00003506 	br	1521c <OSTaskSuspend+0x200>
    }
    y            = ptcb->OSTCBY;
   15148:	e0bff917 	ldw	r2,-28(fp)
   1514c:	10800d03 	ldbu	r2,52(r2)
   15150:	e0bffa05 	stb	r2,-24(fp)
    OSRdyTbl[y] &= ~ptcb->OSTCBBitX;                            /* Make task not ready                 */
   15154:	e0fffa03 	ldbu	r3,-24(fp)
   15158:	e13ffa03 	ldbu	r4,-24(fp)
   1515c:	008000b4 	movhi	r2,2
   15160:	10b6ce44 	addi	r2,r2,-9415
   15164:	1105883a 	add	r2,r2,r4
   15168:	10800003 	ldbu	r2,0(r2)
   1516c:	1009883a 	mov	r4,r2
   15170:	e0bff917 	ldw	r2,-28(fp)
   15174:	10800d43 	ldbu	r2,53(r2)
   15178:	0084303a 	nor	r2,zero,r2
   1517c:	2084703a 	and	r2,r4,r2
   15180:	1009883a 	mov	r4,r2
   15184:	008000b4 	movhi	r2,2
   15188:	10b6ce44 	addi	r2,r2,-9415
   1518c:	10c5883a 	add	r2,r2,r3
   15190:	11000005 	stb	r4,0(r2)
    if (OSRdyTbl[y] == 0) {
   15194:	e0fffa03 	ldbu	r3,-24(fp)
   15198:	008000b4 	movhi	r2,2
   1519c:	10b6ce44 	addi	r2,r2,-9415
   151a0:	10c5883a 	add	r2,r2,r3
   151a4:	10800003 	ldbu	r2,0(r2)
   151a8:	10803fcc 	andi	r2,r2,255
   151ac:	10000c1e 	bne	r2,zero,151e0 <OSTaskSuspend+0x1c4>
        OSRdyGrp &= ~ptcb->OSTCBBitY;
   151b0:	e0bff917 	ldw	r2,-28(fp)
   151b4:	10800d83 	ldbu	r2,54(r2)
   151b8:	0084303a 	nor	r2,zero,r2
   151bc:	1007883a 	mov	r3,r2
   151c0:	008000b4 	movhi	r2,2
   151c4:	10b6ce04 	addi	r2,r2,-9416
   151c8:	10800003 	ldbu	r2,0(r2)
   151cc:	1884703a 	and	r2,r3,r2
   151d0:	1007883a 	mov	r3,r2
   151d4:	008000b4 	movhi	r2,2
   151d8:	10b6ce04 	addi	r2,r2,-9416
   151dc:	10c00005 	stb	r3,0(r2)
    }
    ptcb->OSTCBStat |= OS_STAT_SUSPEND;                         /* Status of task is 'SUSPENDED'       */
   151e0:	e0bff917 	ldw	r2,-28(fp)
   151e4:	10800c03 	ldbu	r2,48(r2)
   151e8:	10800214 	ori	r2,r2,8
   151ec:	1007883a 	mov	r3,r2
   151f0:	e0bff917 	ldw	r2,-28(fp)
   151f4:	10c00c05 	stb	r3,48(r2)
   151f8:	e0bff817 	ldw	r2,-32(fp)
   151fc:	e0bffe15 	stw	r2,-8(fp)
   15200:	e0bffe17 	ldw	r2,-8(fp)
   15204:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    if (self == OS_TRUE) {                                      /* Context switch only if SELF         */
   15208:	e0bff703 	ldbu	r2,-36(fp)
   1520c:	10800058 	cmpnei	r2,r2,1
   15210:	1000011e 	bne	r2,zero,15218 <OSTaskSuspend+0x1fc>
        OS_Sched();                                             /* Find new highest priority task      */
   15214:	000f5b80 	call	f5b8 <OS_Sched>
    }
    return (OS_ERR_NONE);
   15218:	0005883a 	mov	r2,zero
}
   1521c:	e037883a 	mov	sp,fp
   15220:	dfc00117 	ldw	ra,4(sp)
   15224:	df000017 	ldw	fp,0(sp)
   15228:	dec00204 	addi	sp,sp,8
   1522c:	f800283a 	ret

00015230 <OSTaskQuery>:
*********************************************************************************************************
*/

#if OS_TASK_QUERY_EN > 0
INT8U  OSTaskQuery (INT8U prio, OS_TCB *p_task_data)
{
   15230:	defff604 	addi	sp,sp,-40
   15234:	dfc00915 	stw	ra,36(sp)
   15238:	df000815 	stw	fp,32(sp)
   1523c:	df000804 	addi	fp,sp,32
   15240:	2005883a 	mov	r2,r4
   15244:	e17fff15 	stw	r5,-4(fp)
   15248:	e0bffe05 	stb	r2,-8(fp)
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   1524c:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio > OS_LOWEST_PRIO) {                 /* Task priority valid ?                              */
   15250:	e0bffe03 	ldbu	r2,-8(fp)
   15254:	10800570 	cmpltui	r2,r2,21
   15258:	1000051e 	bne	r2,zero,15270 <OSTaskQuery+0x40>
        if (prio != OS_PRIO_SELF) {
   1525c:	e0bffe03 	ldbu	r2,-8(fp)
   15260:	10803fe0 	cmpeqi	r2,r2,255
   15264:	1000021e 	bne	r2,zero,15270 <OSTaskQuery+0x40>
            return (OS_ERR_PRIO_INVALID);
   15268:	00800a84 	movi	r2,42
   1526c:	00003606 	br	15348 <OSTaskQuery+0x118>
        }
    }
    if (p_task_data == (OS_TCB *)0) {            /* Validate 'p_task_data'                             */
   15270:	e0bfff17 	ldw	r2,-4(fp)
   15274:	1000021e 	bne	r2,zero,15280 <OSTaskQuery+0x50>
        return (OS_ERR_PDATA_NULL);
   15278:	00800244 	movi	r2,9
   1527c:	00003206 	br	15348 <OSTaskQuery+0x118>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   15280:	0005303a 	rdctl	r2,status
   15284:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   15288:	e0fffa17 	ldw	r3,-24(fp)
   1528c:	00bfff84 	movi	r2,-2
   15290:	1884703a 	and	r2,r3,r2
   15294:	1001703a 	wrctl	status,r2
  
  return context;
   15298:	e0bffa17 	ldw	r2,-24(fp)
    }
#endif
    OS_ENTER_CRITICAL();
   1529c:	e0bff815 	stw	r2,-32(fp)
    if (prio == OS_PRIO_SELF) {                  /* See if suspend SELF                                */
   152a0:	e0bffe03 	ldbu	r2,-8(fp)
   152a4:	10803fd8 	cmpnei	r2,r2,255
   152a8:	1000051e 	bne	r2,zero,152c0 <OSTaskQuery+0x90>
        prio = OSTCBCur->OSTCBPrio;
   152ac:	008000b4 	movhi	r2,2
   152b0:	10b6d104 	addi	r2,r2,-9404
   152b4:	10800017 	ldw	r2,0(r2)
   152b8:	10800c83 	ldbu	r2,50(r2)
   152bc:	e0bffe05 	stb	r2,-8(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
   152c0:	e0fffe03 	ldbu	r3,-8(fp)
   152c4:	008000b4 	movhi	r2,2
   152c8:	109b5804 	addi	r2,r2,28000
   152cc:	18c7883a 	add	r3,r3,r3
   152d0:	18c7883a 	add	r3,r3,r3
   152d4:	10c5883a 	add	r2,r2,r3
   152d8:	10800017 	ldw	r2,0(r2)
   152dc:	e0bff915 	stw	r2,-28(fp)
    if (ptcb == (OS_TCB *)0) {                   /* Task to query must exist                           */
   152e0:	e0bff917 	ldw	r2,-28(fp)
   152e4:	1000061e 	bne	r2,zero,15300 <OSTaskQuery+0xd0>
   152e8:	e0bff817 	ldw	r2,-32(fp)
   152ec:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   152f0:	e0bffb17 	ldw	r2,-20(fp)
   152f4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_PRIO);
   152f8:	00800a44 	movi	r2,41
   152fc:	00001206 	br	15348 <OSTaskQuery+0x118>
    }
    if (ptcb == OS_TCB_RESERVED) {               /* Task to query must not be assigned to a Mutex      */
   15300:	e0bff917 	ldw	r2,-28(fp)
   15304:	10800058 	cmpnei	r2,r2,1
   15308:	1000061e 	bne	r2,zero,15324 <OSTaskQuery+0xf4>
   1530c:	e0bff817 	ldw	r2,-32(fp)
   15310:	e0bffc15 	stw	r2,-16(fp)
   15314:	e0bffc17 	ldw	r2,-16(fp)
   15318:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
   1531c:	008010c4 	movi	r2,67
   15320:	00000906 	br	15348 <OSTaskQuery+0x118>
    }
                                                 /* Copy TCB into user storage area                    */
    OS_MemCopy((INT8U *)p_task_data, (INT8U *)ptcb, sizeof(OS_TCB));
   15324:	e13fff17 	ldw	r4,-4(fp)
   15328:	e17ff917 	ldw	r5,-28(fp)
   1532c:	01801b04 	movi	r6,108
   15330:	000f5540 	call	f554 <OS_MemCopy>
   15334:	e0bff817 	ldw	r2,-32(fp)
   15338:	e0bffd15 	stw	r2,-12(fp)
   1533c:	e0bffd17 	ldw	r2,-12(fp)
   15340:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
   15344:	0005883a 	mov	r2,zero
}
   15348:	e037883a 	mov	sp,fp
   1534c:	dfc00117 	ldw	ra,4(sp)
   15350:	df000017 	ldw	fp,0(sp)
   15354:	dec00204 	addi	sp,sp,8
   15358:	f800283a 	ret

0001535c <OS_TaskStkClr>:
* Returns    : none
*********************************************************************************************************
*/
#if (OS_TASK_STAT_STK_CHK_EN > 0) && (OS_TASK_CREATE_EXT_EN > 0)
void  OS_TaskStkClr (OS_STK *pbos, INT32U size, INT16U opt)
{
   1535c:	defffc04 	addi	sp,sp,-16
   15360:	df000315 	stw	fp,12(sp)
   15364:	df000304 	addi	fp,sp,12
   15368:	e13ffd15 	stw	r4,-12(fp)
   1536c:	e17ffe15 	stw	r5,-8(fp)
   15370:	3005883a 	mov	r2,r6
   15374:	e0bfff0d 	sth	r2,-4(fp)
    if ((opt & OS_TASK_OPT_STK_CHK) != 0x0000) {       /* See if stack checking has been enabled       */
   15378:	e0bfff0b 	ldhu	r2,-4(fp)
   1537c:	1080004c 	andi	r2,r2,1
   15380:	10000d26 	beq	r2,zero,153b8 <OS_TaskStkClr+0x5c>
        if ((opt & OS_TASK_OPT_STK_CLR) != 0x0000) {   /* See if stack needs to be cleared             */
   15384:	e0bfff0b 	ldhu	r2,-4(fp)
   15388:	1080008c 	andi	r2,r2,2
   1538c:	10000a26 	beq	r2,zero,153b8 <OS_TaskStkClr+0x5c>
#if OS_STK_GROWTH == 1
            while (size > 0) {                         /* Stack grows from HIGH to LOW memory          */
   15390:	00000706 	br	153b0 <OS_TaskStkClr+0x54>
                size--;
   15394:	e0bffe17 	ldw	r2,-8(fp)
   15398:	10bfffc4 	addi	r2,r2,-1
   1539c:	e0bffe15 	stw	r2,-8(fp)
                *pbos++ = (OS_STK)0;                   /* Clear from bottom of stack and up!           */
   153a0:	e0bffd17 	ldw	r2,-12(fp)
   153a4:	10c00104 	addi	r3,r2,4
   153a8:	e0fffd15 	stw	r3,-12(fp)
   153ac:	10000015 	stw	zero,0(r2)
void  OS_TaskStkClr (OS_STK *pbos, INT32U size, INT16U opt)
{
    if ((opt & OS_TASK_OPT_STK_CHK) != 0x0000) {       /* See if stack checking has been enabled       */
        if ((opt & OS_TASK_OPT_STK_CLR) != 0x0000) {   /* See if stack needs to be cleared             */
#if OS_STK_GROWTH == 1
            while (size > 0) {                         /* Stack grows from HIGH to LOW memory          */
   153b0:	e0bffe17 	ldw	r2,-8(fp)
   153b4:	103ff71e 	bne	r2,zero,15394 <__alt_mem_Flash_flash_data+0xf4015394>
                *pbos-- = (OS_STK)0;                   /* Clear from bottom of stack and down          */
            }
#endif
        }
    }
}
   153b8:	e037883a 	mov	sp,fp
   153bc:	df000017 	ldw	fp,0(sp)
   153c0:	dec00104 	addi	sp,sp,4
   153c4:	f800283a 	ret

000153c8 <OSTimeDly>:
* Returns    : none
*********************************************************************************************************
*/

void  OSTimeDly (INT16U ticks)
{
   153c8:	defff904 	addi	sp,sp,-28
   153cc:	dfc00615 	stw	ra,24(sp)
   153d0:	df000515 	stw	fp,20(sp)
   153d4:	df000504 	addi	fp,sp,20
   153d8:	2005883a 	mov	r2,r4
   153dc:	e0bfff0d 	sth	r2,-4(fp)
    INT8U      y;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   153e0:	e03ffb15 	stw	zero,-20(fp)
#endif



    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
   153e4:	008000b4 	movhi	r2,2
   153e8:	10b6d004 	addi	r2,r2,-9408
   153ec:	10800003 	ldbu	r2,0(r2)
   153f0:	10803fcc 	andi	r2,r2,255
   153f4:	10000126 	beq	r2,zero,153fc <OSTimeDly+0x34>
        return;
   153f8:	00004006 	br	154fc <OSTimeDly+0x134>
    }
    if (ticks > 0) {                             /* 0 means no delay!                                  */
   153fc:	e0bfff0b 	ldhu	r2,-4(fp)
   15400:	10003e26 	beq	r2,zero,154fc <OSTimeDly+0x134>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   15404:	0005303a 	rdctl	r2,status
   15408:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1540c:	e0fffd17 	ldw	r3,-12(fp)
   15410:	00bfff84 	movi	r2,-2
   15414:	1884703a 	and	r2,r3,r2
   15418:	1001703a 	wrctl	status,r2
  
  return context;
   1541c:	e0bffd17 	ldw	r2,-12(fp)
        OS_ENTER_CRITICAL();
   15420:	e0bffb15 	stw	r2,-20(fp)
        y            =  OSTCBCur->OSTCBY;        /* Delay current task                                 */
   15424:	008000b4 	movhi	r2,2
   15428:	10b6d104 	addi	r2,r2,-9404
   1542c:	10800017 	ldw	r2,0(r2)
   15430:	10800d03 	ldbu	r2,52(r2)
   15434:	e0bffc05 	stb	r2,-16(fp)
        OSRdyTbl[y] &= ~OSTCBCur->OSTCBBitX;
   15438:	e0fffc03 	ldbu	r3,-16(fp)
   1543c:	e13ffc03 	ldbu	r4,-16(fp)
   15440:	008000b4 	movhi	r2,2
   15444:	10b6ce44 	addi	r2,r2,-9415
   15448:	1105883a 	add	r2,r2,r4
   1544c:	10800003 	ldbu	r2,0(r2)
   15450:	1009883a 	mov	r4,r2
   15454:	008000b4 	movhi	r2,2
   15458:	10b6d104 	addi	r2,r2,-9404
   1545c:	10800017 	ldw	r2,0(r2)
   15460:	10800d43 	ldbu	r2,53(r2)
   15464:	0084303a 	nor	r2,zero,r2
   15468:	2084703a 	and	r2,r4,r2
   1546c:	1009883a 	mov	r4,r2
   15470:	008000b4 	movhi	r2,2
   15474:	10b6ce44 	addi	r2,r2,-9415
   15478:	10c5883a 	add	r2,r2,r3
   1547c:	11000005 	stb	r4,0(r2)
        if (OSRdyTbl[y] == 0) {
   15480:	e0fffc03 	ldbu	r3,-16(fp)
   15484:	008000b4 	movhi	r2,2
   15488:	10b6ce44 	addi	r2,r2,-9415
   1548c:	10c5883a 	add	r2,r2,r3
   15490:	10800003 	ldbu	r2,0(r2)
   15494:	10803fcc 	andi	r2,r2,255
   15498:	10000e1e 	bne	r2,zero,154d4 <OSTimeDly+0x10c>
            OSRdyGrp &= ~OSTCBCur->OSTCBBitY;
   1549c:	008000b4 	movhi	r2,2
   154a0:	10b6d104 	addi	r2,r2,-9404
   154a4:	10800017 	ldw	r2,0(r2)
   154a8:	10800d83 	ldbu	r2,54(r2)
   154ac:	0084303a 	nor	r2,zero,r2
   154b0:	1007883a 	mov	r3,r2
   154b4:	008000b4 	movhi	r2,2
   154b8:	10b6ce04 	addi	r2,r2,-9416
   154bc:	10800003 	ldbu	r2,0(r2)
   154c0:	1884703a 	and	r2,r3,r2
   154c4:	1007883a 	mov	r3,r2
   154c8:	008000b4 	movhi	r2,2
   154cc:	10b6ce04 	addi	r2,r2,-9416
   154d0:	10c00005 	stb	r3,0(r2)
        }
        OSTCBCur->OSTCBDly = ticks;              /* Load ticks in TCB                                  */
   154d4:	008000b4 	movhi	r2,2
   154d8:	10b6d104 	addi	r2,r2,-9404
   154dc:	10800017 	ldw	r2,0(r2)
   154e0:	e0ffff0b 	ldhu	r3,-4(fp)
   154e4:	10c00b8d 	sth	r3,46(r2)
   154e8:	e0bffb17 	ldw	r2,-20(fp)
   154ec:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   154f0:	e0bffe17 	ldw	r2,-8(fp)
   154f4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                              /* Find next task to run!                             */
   154f8:	000f5b80 	call	f5b8 <OS_Sched>
    }
}
   154fc:	e037883a 	mov	sp,fp
   15500:	dfc00117 	ldw	ra,4(sp)
   15504:	df000017 	ldw	fp,0(sp)
   15508:	dec00204 	addi	sp,sp,8
   1550c:	f800283a 	ret

00015510 <OSTimeDlyHMSM>:
*********************************************************************************************************
*/

#if OS_TIME_DLY_HMSM_EN > 0
INT8U  OSTimeDlyHMSM (INT8U hours, INT8U minutes, INT8U seconds, INT16U ms)
{
   15510:	defff804 	addi	sp,sp,-32
   15514:	dfc00715 	stw	ra,28(sp)
   15518:	df000615 	stw	fp,24(sp)
   1551c:	df000604 	addi	fp,sp,24
   15520:	2015883a 	mov	r10,r4
   15524:	2809883a 	mov	r4,r5
   15528:	3007883a 	mov	r3,r6
   1552c:	3805883a 	mov	r2,r7
   15530:	e2bffc05 	stb	r10,-16(fp)
   15534:	e13ffd05 	stb	r4,-12(fp)
   15538:	e0fffe05 	stb	r3,-8(fp)
   1553c:	e0bfff0d 	sth	r2,-4(fp)
    INT32U ticks;
    INT16U loops;


    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
   15540:	008000b4 	movhi	r2,2
   15544:	10b6d004 	addi	r2,r2,-9408
   15548:	10800003 	ldbu	r2,0(r2)
   1554c:	10803fcc 	andi	r2,r2,255
   15550:	10000226 	beq	r2,zero,1555c <OSTimeDlyHMSM+0x4c>
        return (OS_ERR_TIME_DLY_ISR);
   15554:	00801544 	movi	r2,85
   15558:	00004206 	br	15664 <OSTimeDlyHMSM+0x154>
    }
#if OS_ARG_CHK_EN > 0
    if (hours == 0) {
   1555c:	e0bffc03 	ldbu	r2,-16(fp)
   15560:	1000081e 	bne	r2,zero,15584 <OSTimeDlyHMSM+0x74>
        if (minutes == 0) {
   15564:	e0bffd03 	ldbu	r2,-12(fp)
   15568:	1000061e 	bne	r2,zero,15584 <OSTimeDlyHMSM+0x74>
            if (seconds == 0) {
   1556c:	e0bffe03 	ldbu	r2,-8(fp)
   15570:	1000041e 	bne	r2,zero,15584 <OSTimeDlyHMSM+0x74>
                if (ms == 0) {
   15574:	e0bfff0b 	ldhu	r2,-4(fp)
   15578:	1000021e 	bne	r2,zero,15584 <OSTimeDlyHMSM+0x74>
                    return (OS_ERR_TIME_ZERO_DLY);
   1557c:	00801504 	movi	r2,84
   15580:	00003806 	br	15664 <OSTimeDlyHMSM+0x154>
                }
            }
        }
    }
    if (minutes > 59) {
   15584:	e0bffd03 	ldbu	r2,-12(fp)
   15588:	10800f30 	cmpltui	r2,r2,60
   1558c:	1000021e 	bne	r2,zero,15598 <OSTimeDlyHMSM+0x88>
        return (OS_ERR_TIME_INVALID_MINUTES);    /* Validate arguments to be within range              */
   15590:	00801444 	movi	r2,81
   15594:	00003306 	br	15664 <OSTimeDlyHMSM+0x154>
    }
    if (seconds > 59) {
   15598:	e0bffe03 	ldbu	r2,-8(fp)
   1559c:	10800f30 	cmpltui	r2,r2,60
   155a0:	1000021e 	bne	r2,zero,155ac <OSTimeDlyHMSM+0x9c>
        return (OS_ERR_TIME_INVALID_SECONDS);
   155a4:	00801484 	movi	r2,82
   155a8:	00002e06 	br	15664 <OSTimeDlyHMSM+0x154>
    }
    if (ms > 999) {
   155ac:	e0bfff0b 	ldhu	r2,-4(fp)
   155b0:	1080fa30 	cmpltui	r2,r2,1000
   155b4:	1000021e 	bne	r2,zero,155c0 <OSTimeDlyHMSM+0xb0>
        return (OS_ERR_TIME_INVALID_MS);
   155b8:	008014c4 	movi	r2,83
   155bc:	00002906 	br	15664 <OSTimeDlyHMSM+0x154>
    }
#endif
                                                 /* Compute the total number of clock ticks required.. */
                                                 /* .. (rounded to the nearest tick)                   */
    ticks = ((INT32U)hours * 3600L + (INT32U)minutes * 60L + (INT32U)seconds) * OS_TICKS_PER_SEC
   155c0:	e0bffc03 	ldbu	r2,-16(fp)
   155c4:	10c38424 	muli	r3,r2,3600
   155c8:	e0bffd03 	ldbu	r2,-12(fp)
   155cc:	10800f24 	muli	r2,r2,60
   155d0:	1887883a 	add	r3,r3,r2
   155d4:	e0bffe03 	ldbu	r2,-8(fp)
   155d8:	1885883a 	add	r2,r3,r2
   155dc:	100890fa 	slli	r4,r2,3
          + OS_TICKS_PER_SEC * ((INT32U)ms + 500L / OS_TICKS_PER_SEC) / 1000L;
   155e0:	e0bfff0b 	ldhu	r2,-4(fp)
   155e4:	10800f84 	addi	r2,r2,62
   155e8:	100690fa 	slli	r3,r2,3
   155ec:	008418b4 	movhi	r2,4194
   155f0:	109374c4 	addi	r2,r2,19923
   155f4:	188a383a 	mulxuu	r5,r3,r2
   155f8:	1885383a 	mul	r2,r3,r2
   155fc:	1011883a 	mov	r8,r2
   15600:	2813883a 	mov	r9,r5
   15604:	4804d1ba 	srli	r2,r9,6
        return (OS_ERR_TIME_INVALID_MS);
    }
#endif
                                                 /* Compute the total number of clock ticks required.. */
                                                 /* .. (rounded to the nearest tick)                   */
    ticks = ((INT32U)hours * 3600L + (INT32U)minutes * 60L + (INT32U)seconds) * OS_TICKS_PER_SEC
   15608:	2085883a 	add	r2,r4,r2
   1560c:	e0bffb15 	stw	r2,-20(fp)
          + OS_TICKS_PER_SEC * ((INT32U)ms + 500L / OS_TICKS_PER_SEC) / 1000L;
    loops = (INT16U)(ticks >> 16);               /* Compute the integral number of 65536 tick delays   */
   15610:	e0bffb17 	ldw	r2,-20(fp)
   15614:	1004d43a 	srli	r2,r2,16
   15618:	e0bffa0d 	sth	r2,-24(fp)
    ticks = ticks & 0xFFFFL;                     /* Obtain  the fractional number of ticks             */
   1561c:	e0bffb17 	ldw	r2,-20(fp)
   15620:	10bfffcc 	andi	r2,r2,65535
   15624:	e0bffb15 	stw	r2,-20(fp)
    OSTimeDly((INT16U)ticks);
   15628:	e0bffb17 	ldw	r2,-20(fp)
   1562c:	10bfffcc 	andi	r2,r2,65535
   15630:	1009883a 	mov	r4,r2
   15634:	00153c80 	call	153c8 <OSTimeDly>
    while (loops > 0) {
   15638:	00000706 	br	15658 <OSTimeDlyHMSM+0x148>
        OSTimeDly((INT16U)32768u);
   1563c:	01200014 	movui	r4,32768
   15640:	00153c80 	call	153c8 <OSTimeDly>
        OSTimeDly((INT16U)32768u);
   15644:	01200014 	movui	r4,32768
   15648:	00153c80 	call	153c8 <OSTimeDly>
        loops--;
   1564c:	e0bffa0b 	ldhu	r2,-24(fp)
   15650:	10bfffc4 	addi	r2,r2,-1
   15654:	e0bffa0d 	sth	r2,-24(fp)
    ticks = ((INT32U)hours * 3600L + (INT32U)minutes * 60L + (INT32U)seconds) * OS_TICKS_PER_SEC
          + OS_TICKS_PER_SEC * ((INT32U)ms + 500L / OS_TICKS_PER_SEC) / 1000L;
    loops = (INT16U)(ticks >> 16);               /* Compute the integral number of 65536 tick delays   */
    ticks = ticks & 0xFFFFL;                     /* Obtain  the fractional number of ticks             */
    OSTimeDly((INT16U)ticks);
    while (loops > 0) {
   15658:	e0bffa0b 	ldhu	r2,-24(fp)
   1565c:	103ff71e 	bne	r2,zero,1563c <__alt_mem_Flash_flash_data+0xf401563c>
        OSTimeDly((INT16U)32768u);
        OSTimeDly((INT16U)32768u);
        loops--;
    }
    return (OS_ERR_NONE);
   15660:	0005883a 	mov	r2,zero
}
   15664:	e037883a 	mov	sp,fp
   15668:	dfc00117 	ldw	ra,4(sp)
   1566c:	df000017 	ldw	fp,0(sp)
   15670:	dec00204 	addi	sp,sp,8
   15674:	f800283a 	ret

00015678 <OSTimeDlyResume>:
*********************************************************************************************************
*/

#if OS_TIME_DLY_RESUME_EN > 0
INT8U  OSTimeDlyResume (INT8U prio)
{
   15678:	defff504 	addi	sp,sp,-44
   1567c:	dfc00a15 	stw	ra,40(sp)
   15680:	df000915 	stw	fp,36(sp)
   15684:	df000904 	addi	fp,sp,36
   15688:	2005883a 	mov	r2,r4
   1568c:	e0bfff05 	stb	r2,-4(fp)
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                                    /* Storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   15690:	e03ff715 	stw	zero,-36(fp)
#endif



    if (prio >= OS_LOWEST_PRIO) {
   15694:	e0bfff03 	ldbu	r2,-4(fp)
   15698:	10800530 	cmpltui	r2,r2,20
   1569c:	1000021e 	bne	r2,zero,156a8 <OSTimeDlyResume+0x30>
        return (OS_ERR_PRIO_INVALID);
   156a0:	00800a84 	movi	r2,42
   156a4:	00006b06 	br	15854 <OSTimeDlyResume+0x1dc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   156a8:	0005303a 	rdctl	r2,status
   156ac:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   156b0:	e0fff917 	ldw	r3,-28(fp)
   156b4:	00bfff84 	movi	r2,-2
   156b8:	1884703a 	and	r2,r3,r2
   156bc:	1001703a 	wrctl	status,r2
  
  return context;
   156c0:	e0bff917 	ldw	r2,-28(fp)
    }
    OS_ENTER_CRITICAL();
   156c4:	e0bff715 	stw	r2,-36(fp)
    ptcb = OSTCBPrioTbl[prio];                                 /* Make sure that task exist            */
   156c8:	e0ffff03 	ldbu	r3,-4(fp)
   156cc:	008000b4 	movhi	r2,2
   156d0:	109b5804 	addi	r2,r2,28000
   156d4:	18c7883a 	add	r3,r3,r3
   156d8:	18c7883a 	add	r3,r3,r3
   156dc:	10c5883a 	add	r2,r2,r3
   156e0:	10800017 	ldw	r2,0(r2)
   156e4:	e0bff815 	stw	r2,-32(fp)
    if (ptcb == (OS_TCB *)0) {
   156e8:	e0bff817 	ldw	r2,-32(fp)
   156ec:	1000061e 	bne	r2,zero,15708 <OSTimeDlyResume+0x90>
   156f0:	e0bff717 	ldw	r2,-36(fp)
   156f4:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   156f8:	e0bffa17 	ldw	r2,-24(fp)
   156fc:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);                        /* The task does not exist              */
   15700:	008010c4 	movi	r2,67
   15704:	00005306 	br	15854 <OSTimeDlyResume+0x1dc>
    }
    if (ptcb == OS_TCB_RESERVED) {
   15708:	e0bff817 	ldw	r2,-32(fp)
   1570c:	10800058 	cmpnei	r2,r2,1
   15710:	1000061e 	bne	r2,zero,1572c <OSTimeDlyResume+0xb4>
   15714:	e0bff717 	ldw	r2,-36(fp)
   15718:	e0bffb15 	stw	r2,-20(fp)
   1571c:	e0bffb17 	ldw	r2,-20(fp)
   15720:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);                        /* The task does not exist              */
   15724:	008010c4 	movi	r2,67
   15728:	00004a06 	br	15854 <OSTimeDlyResume+0x1dc>
    }
    if (ptcb->OSTCBDly == 0) {                                 /* See if task is delayed               */
   1572c:	e0bff817 	ldw	r2,-32(fp)
   15730:	10800b8b 	ldhu	r2,46(r2)
   15734:	10bfffcc 	andi	r2,r2,65535
   15738:	1000061e 	bne	r2,zero,15754 <OSTimeDlyResume+0xdc>
   1573c:	e0bff717 	ldw	r2,-36(fp)
   15740:	e0bffc15 	stw	r2,-16(fp)
   15744:	e0bffc17 	ldw	r2,-16(fp)
   15748:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TIME_NOT_DLY);                          /* Indicate that task was not delayed   */
   1574c:	00801404 	movi	r2,80
   15750:	00004006 	br	15854 <OSTimeDlyResume+0x1dc>
    }

    ptcb->OSTCBDly = 0;                                        /* Clear the time delay                 */
   15754:	e0bff817 	ldw	r2,-32(fp)
   15758:	10000b8d 	sth	zero,46(r2)
    if ((ptcb->OSTCBStat & OS_STAT_PEND_ANY) != OS_STAT_RDY) {
   1575c:	e0bff817 	ldw	r2,-32(fp)
   15760:	10800c03 	ldbu	r2,48(r2)
   15764:	10803fcc 	andi	r2,r2,255
   15768:	10800dcc 	andi	r2,r2,55
   1576c:	10000b26 	beq	r2,zero,1579c <OSTimeDlyResume+0x124>
        ptcb->OSTCBStat     &= ~OS_STAT_PEND_ANY;              /* Yes, Clear status flag               */
   15770:	e0bff817 	ldw	r2,-32(fp)
   15774:	10c00c03 	ldbu	r3,48(r2)
   15778:	00bff204 	movi	r2,-56
   1577c:	1884703a 	and	r2,r3,r2
   15780:	1007883a 	mov	r3,r2
   15784:	e0bff817 	ldw	r2,-32(fp)
   15788:	10c00c05 	stb	r3,48(r2)
        ptcb->OSTCBStatPend  =  OS_STAT_PEND_TO;               /* Indicate PEND timeout                */
   1578c:	e0bff817 	ldw	r2,-32(fp)
   15790:	00c00044 	movi	r3,1
   15794:	10c00c45 	stb	r3,49(r2)
   15798:	00000206 	br	157a4 <OSTimeDlyResume+0x12c>
    } else {
        ptcb->OSTCBStatPend  =  OS_STAT_PEND_OK;
   1579c:	e0bff817 	ldw	r2,-32(fp)
   157a0:	10000c45 	stb	zero,49(r2)
    }
    if ((ptcb->OSTCBStat & OS_STAT_SUSPEND) == OS_STAT_RDY) {  /* Is task suspended?                   */
   157a4:	e0bff817 	ldw	r2,-32(fp)
   157a8:	10800c03 	ldbu	r2,48(r2)
   157ac:	10803fcc 	andi	r2,r2,255
   157b0:	1080020c 	andi	r2,r2,8
   157b4:	1000221e 	bne	r2,zero,15840 <OSTimeDlyResume+0x1c8>
        OSRdyGrp               |= ptcb->OSTCBBitY;             /* No,  Make ready                      */
   157b8:	e0bff817 	ldw	r2,-32(fp)
   157bc:	10c00d83 	ldbu	r3,54(r2)
   157c0:	008000b4 	movhi	r2,2
   157c4:	10b6ce04 	addi	r2,r2,-9416
   157c8:	10800003 	ldbu	r2,0(r2)
   157cc:	1884b03a 	or	r2,r3,r2
   157d0:	1007883a 	mov	r3,r2
   157d4:	008000b4 	movhi	r2,2
   157d8:	10b6ce04 	addi	r2,r2,-9416
   157dc:	10c00005 	stb	r3,0(r2)
        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
   157e0:	e0bff817 	ldw	r2,-32(fp)
   157e4:	10800d03 	ldbu	r2,52(r2)
   157e8:	10c03fcc 	andi	r3,r2,255
   157ec:	e0bff817 	ldw	r2,-32(fp)
   157f0:	10800d03 	ldbu	r2,52(r2)
   157f4:	11003fcc 	andi	r4,r2,255
   157f8:	008000b4 	movhi	r2,2
   157fc:	10b6ce44 	addi	r2,r2,-9415
   15800:	1105883a 	add	r2,r2,r4
   15804:	11000003 	ldbu	r4,0(r2)
   15808:	e0bff817 	ldw	r2,-32(fp)
   1580c:	10800d43 	ldbu	r2,53(r2)
   15810:	2084b03a 	or	r2,r4,r2
   15814:	1009883a 	mov	r4,r2
   15818:	008000b4 	movhi	r2,2
   1581c:	10b6ce44 	addi	r2,r2,-9415
   15820:	10c5883a 	add	r2,r2,r3
   15824:	11000005 	stb	r4,0(r2)
   15828:	e0bff717 	ldw	r2,-36(fp)
   1582c:	e0bffd15 	stw	r2,-12(fp)
   15830:	e0bffd17 	ldw	r2,-12(fp)
   15834:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                                            /* See if this is new highest priority  */
   15838:	000f5b80 	call	f5b8 <OS_Sched>
   1583c:	00000406 	br	15850 <OSTimeDlyResume+0x1d8>
   15840:	e0bff717 	ldw	r2,-36(fp)
   15844:	e0bffe15 	stw	r2,-8(fp)
   15848:	e0bffe17 	ldw	r2,-8(fp)
   1584c:	1001703a 	wrctl	status,r2
    } else {
        OS_EXIT_CRITICAL();                                    /* Task may be suspended                */
    }
    return (OS_ERR_NONE);
   15850:	0005883a 	mov	r2,zero
}
   15854:	e037883a 	mov	sp,fp
   15858:	dfc00117 	ldw	ra,4(sp)
   1585c:	df000017 	ldw	fp,0(sp)
   15860:	dec00204 	addi	sp,sp,8
   15864:	f800283a 	ret

00015868 <OSTimeGet>:
*********************************************************************************************************
*/

#if OS_TIME_GET_SET_EN > 0
INT32U  OSTimeGet (void)
{
   15868:	defffb04 	addi	sp,sp,-20
   1586c:	df000415 	stw	fp,16(sp)
   15870:	df000404 	addi	fp,sp,16
    INT32U     ticks;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   15874:	e03ffc15 	stw	zero,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   15878:	0005303a 	rdctl	r2,status
   1587c:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   15880:	e0fffe17 	ldw	r3,-8(fp)
   15884:	00bfff84 	movi	r2,-2
   15888:	1884703a 	and	r2,r3,r2
   1588c:	1001703a 	wrctl	status,r2
  
  return context;
   15890:	e0bffe17 	ldw	r2,-8(fp)
#endif



    OS_ENTER_CRITICAL();
   15894:	e0bffc15 	stw	r2,-16(fp)
    ticks = OSTime;
   15898:	008000b4 	movhi	r2,2
   1589c:	10b6d204 	addi	r2,r2,-9400
   158a0:	10800017 	ldw	r2,0(r2)
   158a4:	e0bffd15 	stw	r2,-12(fp)
   158a8:	e0bffc17 	ldw	r2,-16(fp)
   158ac:	e0bfff15 	stw	r2,-4(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   158b0:	e0bfff17 	ldw	r2,-4(fp)
   158b4:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (ticks);
   158b8:	e0bffd17 	ldw	r2,-12(fp)
}
   158bc:	e037883a 	mov	sp,fp
   158c0:	df000017 	ldw	fp,0(sp)
   158c4:	dec00104 	addi	sp,sp,4
   158c8:	f800283a 	ret

000158cc <OSTimeSet>:
*********************************************************************************************************
*/

#if OS_TIME_GET_SET_EN > 0
void  OSTimeSet (INT32U ticks)
{
   158cc:	defffb04 	addi	sp,sp,-20
   158d0:	df000415 	stw	fp,16(sp)
   158d4:	df000404 	addi	fp,sp,16
   158d8:	e13fff15 	stw	r4,-4(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   158dc:	e03ffc15 	stw	zero,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   158e0:	0005303a 	rdctl	r2,status
   158e4:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   158e8:	e0fffd17 	ldw	r3,-12(fp)
   158ec:	00bfff84 	movi	r2,-2
   158f0:	1884703a 	and	r2,r3,r2
   158f4:	1001703a 	wrctl	status,r2
  
  return context;
   158f8:	e0bffd17 	ldw	r2,-12(fp)
#endif



    OS_ENTER_CRITICAL();
   158fc:	e0bffc15 	stw	r2,-16(fp)
    OSTime = ticks;
   15900:	008000b4 	movhi	r2,2
   15904:	10b6d204 	addi	r2,r2,-9400
   15908:	e0ffff17 	ldw	r3,-4(fp)
   1590c:	10c00015 	stw	r3,0(r2)
   15910:	e0bffc17 	ldw	r2,-16(fp)
   15914:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   15918:	e0bffe17 	ldw	r2,-8(fp)
   1591c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
}
   15920:	e037883a 	mov	sp,fp
   15924:	df000017 	ldw	fp,0(sp)
   15928:	dec00104 	addi	sp,sp,4
   1592c:	f800283a 	ret

00015930 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
   15930:	defffd04 	addi	sp,sp,-12
   15934:	dfc00215 	stw	ra,8(sp)
   15938:	df000115 	stw	fp,4(sp)
   1593c:	df000104 	addi	fp,sp,4
   15940:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
   15944:	e13fff17 	ldw	r4,-4(fp)
   15948:	014000b4 	movhi	r5,2
   1594c:	296ec104 	addi	r5,r5,-17660
   15950:	00183040 	call	18304 <alt_dev_llist_insert>
}
   15954:	e037883a 	mov	sp,fp
   15958:	dfc00117 	ldw	ra,4(sp)
   1595c:	df000017 	ldw	fp,0(sp)
   15960:	dec00204 	addi	sp,sp,8
   15964:	f800283a 	ret

00015968 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
   15968:	defffd04 	addi	sp,sp,-12
   1596c:	dfc00215 	stw	ra,8(sp)
   15970:	df000115 	stw	fp,4(sp)
   15974:	df000104 	addi	fp,sp,4
   15978:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2, Nios2);
   1597c:	0018c180 	call	18c18 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
   15980:	00800044 	movi	r2,1
   15984:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
   15988:	e037883a 	mov	sp,fp
   1598c:	dfc00117 	ldw	ra,4(sp)
   15990:	df000017 	ldw	fp,0(sp)
   15994:	dec00204 	addi	sp,sp,8
   15998:	f800283a 	ret

0001599c <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
   1599c:	defffd04 	addi	sp,sp,-12
   159a0:	dfc00215 	stw	ra,8(sp)
   159a4:	df000115 	stw	fp,4(sp)
   159a8:	df000104 	addi	fp,sp,4
    ALTERA_AVALON_TIMER_INIT ( INTERVAL_TIMER, Interval_Timer);
   159ac:	01040034 	movhi	r4,4096
   159b0:	21080004 	addi	r4,r4,8192
   159b4:	000b883a 	mov	r5,zero
   159b8:	000d883a 	mov	r6,zero
   159bc:	01c00204 	movi	r7,8
   159c0:	0016b100 	call	16b10 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, JTAG_UART);
   159c4:	010000b4 	movhi	r4,2
   159c8:	2129bd04 	addi	r4,r4,-22796
   159cc:	000b883a 	mov	r5,zero
   159d0:	01800204 	movi	r6,8
   159d4:	0015ed80 	call	15ed8 <altera_avalon_jtag_uart_init>
   159d8:	010000b4 	movhi	r4,2
   159dc:	2129b304 	addi	r4,r4,-22836
   159e0:	00159300 	call	15930 <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID, SysID);
   159e4:	0001883a 	nop
    ALTERA_UP_AVALON_AUDIO_AND_VIDEO_CONFIG_INIT ( AV_CONFIG, AV_Config);
   159e8:	010000b4 	movhi	r4,2
   159ec:	212dce04 	addi	r4,r4,-18632
   159f0:	00159300 	call	15930 <alt_dev_reg>
    ALTERA_UP_AVALON_AUDIO_INIT ( AUDIO_SUBSYSTEM_AUDIO, Audio_Subsystem_Audio);
   159f4:	010000b4 	movhi	r4,2
   159f8:	212dda04 	addi	r4,r4,-18584
   159fc:	00159300 	call	15930 <alt_dev_reg>
    ALTERA_UP_AVALON_CHARACTER_LCD_INIT ( CHAR_LCD_16X2, Char_LCD_16x2);
   15a00:	010000b4 	movhi	r4,2
   15a04:	212de604 	addi	r4,r4,-18536
   15a08:	0016c400 	call	16c40 <alt_up_character_lcd_init>
   15a0c:	010000b4 	movhi	r4,2
   15a10:	212de604 	addi	r4,r4,-18536
   15a14:	00159300 	call	15930 <alt_dev_reg>
    ALTERA_UP_AVALON_IRDA_INIT ( IRDA, IrDA);
   15a18:	010000b4 	movhi	r4,2
   15a1c:	212df104 	addi	r4,r4,-18492
   15a20:	00159300 	call	15930 <alt_dev_reg>
    ALTERA_UP_AVALON_PARALLEL_PORT_INIT ( EXPANSION_JP5, Expansion_JP5);
   15a24:	010000b4 	movhi	r4,2
   15a28:	212dfc04 	addi	r4,r4,-18448
   15a2c:	00159300 	call	15930 <alt_dev_reg>
    ALTERA_UP_AVALON_PARALLEL_PORT_INIT ( GREEN_LEDS, Green_LEDs);
   15a30:	010000b4 	movhi	r4,2
   15a34:	212e0704 	addi	r4,r4,-18404
   15a38:	00159300 	call	15930 <alt_dev_reg>
    ALTERA_UP_AVALON_PARALLEL_PORT_INIT ( HEX3_HEX0, HEX3_HEX0);
   15a3c:	010000b4 	movhi	r4,2
   15a40:	212e1204 	addi	r4,r4,-18360
   15a44:	00159300 	call	15930 <alt_dev_reg>
    ALTERA_UP_AVALON_PARALLEL_PORT_INIT ( HEX7_HEX4, HEX7_HEX4);
   15a48:	010000b4 	movhi	r4,2
   15a4c:	212e1d04 	addi	r4,r4,-18316
   15a50:	00159300 	call	15930 <alt_dev_reg>
    ALTERA_UP_AVALON_PARALLEL_PORT_INIT ( PUSHBUTTONS, Pushbuttons);
   15a54:	010000b4 	movhi	r4,2
   15a58:	212e2804 	addi	r4,r4,-18272
   15a5c:	00159300 	call	15930 <alt_dev_reg>
    ALTERA_UP_AVALON_PARALLEL_PORT_INIT ( RED_LEDS, Red_LEDs);
   15a60:	010000b4 	movhi	r4,2
   15a64:	212e3304 	addi	r4,r4,-18228
   15a68:	00159300 	call	15930 <alt_dev_reg>
    ALTERA_UP_AVALON_PARALLEL_PORT_INIT ( SLIDER_SWITCHES, Slider_Switches);
   15a6c:	010000b4 	movhi	r4,2
   15a70:	212e3e04 	addi	r4,r4,-18184
   15a74:	00159300 	call	15930 <alt_dev_reg>
    ALTERA_UP_AVALON_PS2_INIT ( PS2_PORT, PS2_Port);
   15a78:	010000b4 	movhi	r4,2
   15a7c:	212e4904 	addi	r4,r4,-18140
   15a80:	00175580 	call	17558 <alt_up_ps2_init>
   15a84:	010000b4 	movhi	r4,2
   15a88:	212e4904 	addi	r4,r4,-18140
   15a8c:	00159300 	call	15930 <alt_dev_reg>
    ALTERA_UP_AVALON_PS2_INIT ( PS2_PORT_DUAL, PS2_Port_Dual);
   15a90:	010000b4 	movhi	r4,2
   15a94:	212e5704 	addi	r4,r4,-18084
   15a98:	00175580 	call	17558 <alt_up_ps2_init>
   15a9c:	010000b4 	movhi	r4,2
   15aa0:	212e5704 	addi	r4,r4,-18084
   15aa4:	00159300 	call	15930 <alt_dev_reg>
    ALTERA_UP_AVALON_RS232_INIT ( SERIAL_PORT, Serial_Port);
   15aa8:	010000b4 	movhi	r4,2
   15aac:	212e6504 	addi	r4,r4,-18028
   15ab0:	00159300 	call	15930 <alt_dev_reg>
    ALTERA_UP_AVALON_USB_INIT ( USB, USB);
   15ab4:	010000b4 	movhi	r4,2
   15ab8:	212e7004 	addi	r4,r4,-17984
   15abc:	00159300 	call	15930 <alt_dev_reg>
    ALTERA_UP_AVALON_VIDEO_CHARACTER_BUFFER_WITH_DMA_INIT ( VGA_SUBSYSTEM_VGA_CHAR_BUFFER, VGA_Subsystem_VGA_Char_Buffer);
   15ac0:	008000b4 	movhi	r2,2
   15ac4:	10ae7d04 	addi	r2,r2,-17932
   15ac8:	10800a17 	ldw	r2,40(r2)
   15acc:	10800104 	addi	r2,r2,4
   15ad0:	10800017 	ldw	r2,0(r2)
   15ad4:	10ffffcc 	andi	r3,r2,65535
   15ad8:	008000b4 	movhi	r2,2
   15adc:	10ae7d04 	addi	r2,r2,-17932
   15ae0:	10c00c15 	stw	r3,48(r2)
   15ae4:	008000b4 	movhi	r2,2
   15ae8:	10ae7d04 	addi	r2,r2,-17932
   15aec:	10800a17 	ldw	r2,40(r2)
   15af0:	10800104 	addi	r2,r2,4
   15af4:	10800017 	ldw	r2,0(r2)
   15af8:	1006d43a 	srli	r3,r2,16
   15afc:	008000b4 	movhi	r2,2
   15b00:	10ae7d04 	addi	r2,r2,-17932
   15b04:	10c00d15 	stw	r3,52(r2)
   15b08:	008000b4 	movhi	r2,2
   15b0c:	10ae7d04 	addi	r2,r2,-17932
   15b10:	10800c17 	ldw	r2,48(r2)
   15b14:	10801068 	cmpgeui	r2,r2,65
   15b18:	1000081e 	bne	r2,zero,15b3c <alt_sys_init+0x1a0>
   15b1c:	008000b4 	movhi	r2,2
   15b20:	10ae7d04 	addi	r2,r2,-17932
   15b24:	00c00fc4 	movi	r3,63
   15b28:	10c00f15 	stw	r3,60(r2)
   15b2c:	008000b4 	movhi	r2,2
   15b30:	10ae7d04 	addi	r2,r2,-17932
   15b34:	00c00184 	movi	r3,6
   15b38:	10c01015 	stw	r3,64(r2)
   15b3c:	008000b4 	movhi	r2,2
   15b40:	10ae7d04 	addi	r2,r2,-17932
   15b44:	10800d17 	ldw	r2,52(r2)
   15b48:	10800868 	cmpgeui	r2,r2,33
   15b4c:	1000041e 	bne	r2,zero,15b60 <alt_sys_init+0x1c4>
   15b50:	008000b4 	movhi	r2,2
   15b54:	10ae7d04 	addi	r2,r2,-17932
   15b58:	00c007c4 	movi	r3,31
   15b5c:	10c01115 	stw	r3,68(r2)
   15b60:	010000b4 	movhi	r4,2
   15b64:	212e7d04 	addi	r4,r4,-17932
   15b68:	0017e700 	call	17e70 <alt_up_char_buffer_init>
   15b6c:	010000b4 	movhi	r4,2
   15b70:	212e7d04 	addi	r4,r4,-17932
   15b74:	00159300 	call	15930 <alt_dev_reg>
    ALTERA_UP_AVALON_VIDEO_PIXEL_BUFFER_DMA_INIT ( VGA_SUBSYSTEM_VGA_PIXEL_DMA, VGA_Subsystem_VGA_Pixel_DMA);
   15b78:	008000b4 	movhi	r2,2
   15b7c:	10ae8f04 	addi	r2,r2,-17860
   15b80:	10800a17 	ldw	r2,40(r2)
   15b84:	10800017 	ldw	r2,0(r2)
   15b88:	1007883a 	mov	r3,r2
   15b8c:	008000b4 	movhi	r2,2
   15b90:	10ae8f04 	addi	r2,r2,-17860
   15b94:	10c00b15 	stw	r3,44(r2)
   15b98:	008000b4 	movhi	r2,2
   15b9c:	10ae8f04 	addi	r2,r2,-17860
   15ba0:	10800a17 	ldw	r2,40(r2)
   15ba4:	10800104 	addi	r2,r2,4
   15ba8:	10800017 	ldw	r2,0(r2)
   15bac:	1007883a 	mov	r3,r2
   15bb0:	008000b4 	movhi	r2,2
   15bb4:	10ae8f04 	addi	r2,r2,-17860
   15bb8:	10c00c15 	stw	r3,48(r2)
   15bbc:	008000b4 	movhi	r2,2
   15bc0:	10ae8f04 	addi	r2,r2,-17860
   15bc4:	10800a17 	ldw	r2,40(r2)
   15bc8:	10800204 	addi	r2,r2,8
   15bcc:	10800017 	ldw	r2,0(r2)
   15bd0:	10ffffcc 	andi	r3,r2,65535
   15bd4:	008000b4 	movhi	r2,2
   15bd8:	10ae8f04 	addi	r2,r2,-17860
   15bdc:	10c00f15 	stw	r3,60(r2)
   15be0:	008000b4 	movhi	r2,2
   15be4:	10ae8f04 	addi	r2,r2,-17860
   15be8:	10800a17 	ldw	r2,40(r2)
   15bec:	10800204 	addi	r2,r2,8
   15bf0:	10800017 	ldw	r2,0(r2)
   15bf4:	1006d43a 	srli	r3,r2,16
   15bf8:	008000b4 	movhi	r2,2
   15bfc:	10ae8f04 	addi	r2,r2,-17860
   15c00:	10c01015 	stw	r3,64(r2)
   15c04:	008000b4 	movhi	r2,2
   15c08:	10ae8f04 	addi	r2,r2,-17860
   15c0c:	10800a17 	ldw	r2,40(r2)
   15c10:	10800304 	addi	r2,r2,12
   15c14:	10800017 	ldw	r2,0(r2)
   15c18:	1005d07a 	srai	r2,r2,1
   15c1c:	10c0004c 	andi	r3,r2,1
   15c20:	008000b4 	movhi	r2,2
   15c24:	10ae8f04 	addi	r2,r2,-17860
   15c28:	10c00d15 	stw	r3,52(r2)
   15c2c:	008000b4 	movhi	r2,2
   15c30:	10ae8f04 	addi	r2,r2,-17860
   15c34:	10800a17 	ldw	r2,40(r2)
   15c38:	10800304 	addi	r2,r2,12
   15c3c:	10800017 	ldw	r2,0(r2)
   15c40:	1005d13a 	srai	r2,r2,4
   15c44:	10c003cc 	andi	r3,r2,15
   15c48:	008000b4 	movhi	r2,2
   15c4c:	10ae8f04 	addi	r2,r2,-17860
   15c50:	10c00e15 	stw	r3,56(r2)
   15c54:	008000b4 	movhi	r2,2
   15c58:	10ae8f04 	addi	r2,r2,-17860
   15c5c:	10800a17 	ldw	r2,40(r2)
   15c60:	10800304 	addi	r2,r2,12
   15c64:	10800017 	ldw	r2,0(r2)
   15c68:	1005d43a 	srai	r2,r2,16
   15c6c:	e0bfff05 	stb	r2,-4(fp)
   15c70:	008000b4 	movhi	r2,2
   15c74:	10ae8f04 	addi	r2,r2,-17860
   15c78:	10800a17 	ldw	r2,40(r2)
   15c7c:	10800304 	addi	r2,r2,12
   15c80:	10800017 	ldw	r2,0(r2)
   15c84:	1004d63a 	srli	r2,r2,24
   15c88:	e0bfff45 	stb	r2,-3(fp)
   15c8c:	008000b4 	movhi	r2,2
   15c90:	10ae8f04 	addi	r2,r2,-17860
   15c94:	10800e17 	ldw	r2,56(r2)
   15c98:	10800058 	cmpnei	r2,r2,1
   15c9c:	1000041e 	bne	r2,zero,15cb0 <alt_sys_init+0x314>
   15ca0:	008000b4 	movhi	r2,2
   15ca4:	10ae8f04 	addi	r2,r2,-17860
   15ca8:	10001115 	stw	zero,68(r2)
   15cac:	00000e06 	br	15ce8 <alt_sys_init+0x34c>
   15cb0:	008000b4 	movhi	r2,2
   15cb4:	10ae8f04 	addi	r2,r2,-17860
   15cb8:	10800e17 	ldw	r2,56(r2)
   15cbc:	10800098 	cmpnei	r2,r2,2
   15cc0:	1000051e 	bne	r2,zero,15cd8 <alt_sys_init+0x33c>
   15cc4:	008000b4 	movhi	r2,2
   15cc8:	10ae8f04 	addi	r2,r2,-17860
   15ccc:	00c00044 	movi	r3,1
   15cd0:	10c01115 	stw	r3,68(r2)
   15cd4:	00000406 	br	15ce8 <alt_sys_init+0x34c>
   15cd8:	008000b4 	movhi	r2,2
   15cdc:	10ae8f04 	addi	r2,r2,-17860
   15ce0:	00c00084 	movi	r3,2
   15ce4:	10c01115 	stw	r3,68(r2)
   15ce8:	e0bfff03 	ldbu	r2,-4(fp)
   15cec:	00c00804 	movi	r3,32
   15cf0:	1885c83a 	sub	r2,r3,r2
   15cf4:	00ffffc4 	movi	r3,-1
   15cf8:	1886d83a 	srl	r3,r3,r2
   15cfc:	008000b4 	movhi	r2,2
   15d00:	10ae8f04 	addi	r2,r2,-17860
   15d04:	10c01215 	stw	r3,72(r2)
   15d08:	e0ffff03 	ldbu	r3,-4(fp)
   15d0c:	008000b4 	movhi	r2,2
   15d10:	10ae8f04 	addi	r2,r2,-17860
   15d14:	10801117 	ldw	r2,68(r2)
   15d18:	1887883a 	add	r3,r3,r2
   15d1c:	008000b4 	movhi	r2,2
   15d20:	10ae8f04 	addi	r2,r2,-17860
   15d24:	10c01315 	stw	r3,76(r2)
   15d28:	e0bfff43 	ldbu	r2,-3(fp)
   15d2c:	00c00804 	movi	r3,32
   15d30:	1885c83a 	sub	r2,r3,r2
   15d34:	00ffffc4 	movi	r3,-1
   15d38:	1886d83a 	srl	r3,r3,r2
   15d3c:	008000b4 	movhi	r2,2
   15d40:	10ae8f04 	addi	r2,r2,-17860
   15d44:	10c01415 	stw	r3,80(r2)
   15d48:	010000b4 	movhi	r4,2
   15d4c:	212e8f04 	addi	r4,r4,-17860
   15d50:	00159300 	call	15930 <alt_dev_reg>
    ALTERA_UP_SD_CARD_AVALON_INTERFACE_INIT ( SD_CARD, SD_Card);
   15d54:	010000b4 	movhi	r4,2
   15d58:	212ea404 	addi	r4,r4,-17776
   15d5c:	00159300 	call	15930 <alt_dev_reg>
}
   15d60:	e037883a 	mov	sp,fp
   15d64:	dfc00117 	ldw	ra,4(sp)
   15d68:	df000017 	ldw	fp,0(sp)
   15d6c:	dec00204 	addi	sp,sp,8
   15d70:	f800283a 	ret

00015d74 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
   15d74:	defffa04 	addi	sp,sp,-24
   15d78:	dfc00515 	stw	ra,20(sp)
   15d7c:	df000415 	stw	fp,16(sp)
   15d80:	df000404 	addi	fp,sp,16
   15d84:	e13ffd15 	stw	r4,-12(fp)
   15d88:	e17ffe15 	stw	r5,-8(fp)
   15d8c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   15d90:	e0bffd17 	ldw	r2,-12(fp)
   15d94:	10800017 	ldw	r2,0(r2)
   15d98:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
   15d9c:	e0bffc17 	ldw	r2,-16(fp)
   15da0:	10c00a04 	addi	r3,r2,40
   15da4:	e0bffd17 	ldw	r2,-12(fp)
   15da8:	10800217 	ldw	r2,8(r2)
   15dac:	1809883a 	mov	r4,r3
   15db0:	e17ffe17 	ldw	r5,-8(fp)
   15db4:	e1bfff17 	ldw	r6,-4(fp)
   15db8:	100f883a 	mov	r7,r2
   15dbc:	00165240 	call	16524 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
   15dc0:	e037883a 	mov	sp,fp
   15dc4:	dfc00117 	ldw	ra,4(sp)
   15dc8:	df000017 	ldw	fp,0(sp)
   15dcc:	dec00204 	addi	sp,sp,8
   15dd0:	f800283a 	ret

00015dd4 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
   15dd4:	defffa04 	addi	sp,sp,-24
   15dd8:	dfc00515 	stw	ra,20(sp)
   15ddc:	df000415 	stw	fp,16(sp)
   15de0:	df000404 	addi	fp,sp,16
   15de4:	e13ffd15 	stw	r4,-12(fp)
   15de8:	e17ffe15 	stw	r5,-8(fp)
   15dec:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   15df0:	e0bffd17 	ldw	r2,-12(fp)
   15df4:	10800017 	ldw	r2,0(r2)
   15df8:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
   15dfc:	e0bffc17 	ldw	r2,-16(fp)
   15e00:	10c00a04 	addi	r3,r2,40
   15e04:	e0bffd17 	ldw	r2,-12(fp)
   15e08:	10800217 	ldw	r2,8(r2)
   15e0c:	1809883a 	mov	r4,r3
   15e10:	e17ffe17 	ldw	r5,-8(fp)
   15e14:	e1bfff17 	ldw	r6,-4(fp)
   15e18:	100f883a 	mov	r7,r2
   15e1c:	00167d80 	call	167d8 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
   15e20:	e037883a 	mov	sp,fp
   15e24:	dfc00117 	ldw	ra,4(sp)
   15e28:	df000017 	ldw	fp,0(sp)
   15e2c:	dec00204 	addi	sp,sp,8
   15e30:	f800283a 	ret

00015e34 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
   15e34:	defffc04 	addi	sp,sp,-16
   15e38:	dfc00315 	stw	ra,12(sp)
   15e3c:	df000215 	stw	fp,8(sp)
   15e40:	df000204 	addi	fp,sp,8
   15e44:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   15e48:	e0bfff17 	ldw	r2,-4(fp)
   15e4c:	10800017 	ldw	r2,0(r2)
   15e50:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
   15e54:	e0bffe17 	ldw	r2,-8(fp)
   15e58:	10c00a04 	addi	r3,r2,40
   15e5c:	e0bfff17 	ldw	r2,-4(fp)
   15e60:	10800217 	ldw	r2,8(r2)
   15e64:	1809883a 	mov	r4,r3
   15e68:	100b883a 	mov	r5,r2
   15e6c:	00163d00 	call	163d0 <altera_avalon_jtag_uart_close>
}
   15e70:	e037883a 	mov	sp,fp
   15e74:	dfc00117 	ldw	ra,4(sp)
   15e78:	df000017 	ldw	fp,0(sp)
   15e7c:	dec00204 	addi	sp,sp,8
   15e80:	f800283a 	ret

00015e84 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
   15e84:	defffa04 	addi	sp,sp,-24
   15e88:	dfc00515 	stw	ra,20(sp)
   15e8c:	df000415 	stw	fp,16(sp)
   15e90:	df000404 	addi	fp,sp,16
   15e94:	e13ffd15 	stw	r4,-12(fp)
   15e98:	e17ffe15 	stw	r5,-8(fp)
   15e9c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
   15ea0:	e0bffd17 	ldw	r2,-12(fp)
   15ea4:	10800017 	ldw	r2,0(r2)
   15ea8:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
   15eac:	e0bffc17 	ldw	r2,-16(fp)
   15eb0:	10800a04 	addi	r2,r2,40
   15eb4:	1009883a 	mov	r4,r2
   15eb8:	e17ffe17 	ldw	r5,-8(fp)
   15ebc:	e1bfff17 	ldw	r6,-4(fp)
   15ec0:	00164380 	call	16438 <altera_avalon_jtag_uart_ioctl>
}
   15ec4:	e037883a 	mov	sp,fp
   15ec8:	dfc00117 	ldw	ra,4(sp)
   15ecc:	df000017 	ldw	fp,0(sp)
   15ed0:	dec00204 	addi	sp,sp,8
   15ed4:	f800283a 	ret

00015ed8 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
   15ed8:	defff104 	addi	sp,sp,-60
   15edc:	dfc00e15 	stw	ra,56(sp)
   15ee0:	df000d15 	stw	fp,52(sp)
   15ee4:	df000d04 	addi	fp,sp,52
   15ee8:	e13ff915 	stw	r4,-28(fp)
   15eec:	e17ffa15 	stw	r5,-24(fp)
   15ef0:	e1bffb15 	stw	r6,-20(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
   15ef4:	e0bff917 	ldw	r2,-28(fp)
   15ef8:	10800c04 	addi	r2,r2,48
   15efc:	e0bff315 	stw	r2,-52(fp)
   15f00:	e03ff40d 	sth	zero,-48(fp)

static ALT_INLINE int ALT_ALWAYS_INLINE alt_flag_create (OS_FLAG_GRP** pgroup, 
               OS_FLAGS flags)
{
  INT8U err;
  *pgroup = OSFlagCreate (flags, &err);
   15f04:	e0fff40b 	ldhu	r3,-48(fp)
   15f08:	e0bff884 	addi	r2,fp,-30
   15f0c:	1809883a 	mov	r4,r3
   15f10:	100b883a 	mov	r5,r2
   15f14:	00101240 	call	10124 <OSFlagCreate>
   15f18:	1007883a 	mov	r3,r2
   15f1c:	e0bff317 	ldw	r2,-52(fp)
   15f20:	10c00015 	stw	r3,0(r2)
  ALT_SEM_CREATE(&sp->read_lock, 1);
   15f24:	e0bff917 	ldw	r2,-28(fp)
   15f28:	10800a04 	addi	r2,r2,40
   15f2c:	e0bff515 	stw	r2,-44(fp)
   15f30:	00800044 	movi	r2,1
   15f34:	e0bff60d 	sth	r2,-40(fp)
   15f38:	e0bff60b 	ldhu	r2,-40(fp)
   15f3c:	1009883a 	mov	r4,r2
   15f40:	001307c0 	call	1307c <OSSemCreate>
   15f44:	1007883a 	mov	r3,r2
   15f48:	e0bff517 	ldw	r2,-44(fp)
   15f4c:	10c00015 	stw	r3,0(r2)
  ALT_SEM_CREATE(&sp->write_lock, 1);
   15f50:	e0bff917 	ldw	r2,-28(fp)
   15f54:	10800b04 	addi	r2,r2,44
   15f58:	e0bff715 	stw	r2,-36(fp)
   15f5c:	00800044 	movi	r2,1
   15f60:	e0bff80d 	sth	r2,-32(fp)
   15f64:	e0bff80b 	ldhu	r2,-32(fp)
   15f68:	1009883a 	mov	r4,r2
   15f6c:	001307c0 	call	1307c <OSSemCreate>
   15f70:	1007883a 	mov	r3,r2
   15f74:	e0bff717 	ldw	r2,-36(fp)
   15f78:	10c00015 	stw	r3,0(r2)

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   15f7c:	e0bff917 	ldw	r2,-28(fp)
   15f80:	00c00044 	movi	r3,1
   15f84:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
   15f88:	e0bff917 	ldw	r2,-28(fp)
   15f8c:	10800017 	ldw	r2,0(r2)
   15f90:	10800104 	addi	r2,r2,4
   15f94:	1007883a 	mov	r3,r2
   15f98:	e0bff917 	ldw	r2,-28(fp)
   15f9c:	10800817 	ldw	r2,32(r2)
   15fa0:	18800035 	stwio	r2,0(r3)
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
                      sp, NULL);
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
   15fa4:	e0bffb17 	ldw	r2,-20(fp)
   15fa8:	1009883a 	mov	r4,r2
   15fac:	e17ff917 	ldw	r5,-28(fp)
   15fb0:	01800074 	movhi	r6,1
   15fb4:	31980604 	addi	r6,r6,24600
   15fb8:	00186580 	call	18658 <alt_irq_register>
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
   15fbc:	e0bff917 	ldw	r2,-28(fp)
   15fc0:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
   15fc4:	e0bff917 	ldw	r2,-28(fp)
   15fc8:	10c00204 	addi	r3,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
   15fcc:	008000b4 	movhi	r2,2
   15fd0:	10b6d704 	addi	r2,r2,-9380
   15fd4:	10800017 	ldw	r2,0(r2)
   15fd8:	1809883a 	mov	r4,r3
   15fdc:	100b883a 	mov	r5,r2
   15fe0:	01800074 	movhi	r6,1
   15fe4:	3198b004 	addi	r6,r6,25280
   15fe8:	e1fff917 	ldw	r7,-28(fp)
   15fec:	00181580 	call	18158 <alt_alarm_start>
   15ff0:	1000040e 	bge	r2,zero,16004 <altera_avalon_jtag_uart_init+0x12c>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
   15ff4:	e0fff917 	ldw	r3,-28(fp)
   15ff8:	00a00034 	movhi	r2,32768
   15ffc:	10bfffc4 	addi	r2,r2,-1
   16000:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
   16004:	e037883a 	mov	sp,fp
   16008:	dfc00117 	ldw	ra,4(sp)
   1600c:	df000017 	ldw	fp,0(sp)
   16010:	dec00204 	addi	sp,sp,8
   16014:	f800283a 	ret

00016018 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
   16018:	defff104 	addi	sp,sp,-60
   1601c:	dfc00e15 	stw	ra,56(sp)
   16020:	df000d15 	stw	fp,52(sp)
   16024:	df000d04 	addi	fp,sp,52
   16028:	e13ffe15 	stw	r4,-8(fp)
   1602c:	e17fff15 	stw	r5,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
   16030:	e0bffe17 	ldw	r2,-8(fp)
   16034:	e0bff515 	stw	r2,-44(fp)
  unsigned int base = sp->base;
   16038:	e0bff517 	ldw	r2,-44(fp)
   1603c:	10800017 	ldw	r2,0(r2)
   16040:	e0bff615 	stw	r2,-40(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   16044:	e0bff617 	ldw	r2,-40(fp)
   16048:	10800104 	addi	r2,r2,4
   1604c:	10800037 	ldwio	r2,0(r2)
   16050:	e0bff715 	stw	r2,-36(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
   16054:	e0bff717 	ldw	r2,-36(fp)
   16058:	1080c00c 	andi	r2,r2,768
   1605c:	1000011e 	bne	r2,zero,16064 <altera_avalon_jtag_uart_irq+0x4c>
      break;
   16060:	00009206 	br	162ac <altera_avalon_jtag_uart_irq+0x294>

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
   16064:	e0bff717 	ldw	r2,-36(fp)
   16068:	1080400c 	andi	r2,r2,256
   1606c:	10004726 	beq	r2,zero,1618c <altera_avalon_jtag_uart_irq+0x174>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
   16070:	00800074 	movhi	r2,1
   16074:	e0bff315 	stw	r2,-52(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   16078:	e0bff517 	ldw	r2,-44(fp)
   1607c:	10800d17 	ldw	r2,52(r2)
   16080:	10800044 	addi	r2,r2,1
   16084:	1081ffcc 	andi	r2,r2,2047
   16088:	e0bff815 	stw	r2,-32(fp)
        if (next == sp->rx_out)
   1608c:	e0bff517 	ldw	r2,-44(fp)
   16090:	10c00e17 	ldw	r3,56(r2)
   16094:	e0bff817 	ldw	r2,-32(fp)
   16098:	1880011e 	bne	r3,r2,160a0 <altera_avalon_jtag_uart_irq+0x88>
          break;
   1609c:	00002906 	br	16144 <altera_avalon_jtag_uart_irq+0x12c>

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
   160a0:	e0bff617 	ldw	r2,-40(fp)
   160a4:	10800037 	ldwio	r2,0(r2)
   160a8:	e0bff315 	stw	r2,-52(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
   160ac:	e0bff317 	ldw	r2,-52(fp)
   160b0:	10a0000c 	andi	r2,r2,32768
   160b4:	1000011e 	bne	r2,zero,160bc <altera_avalon_jtag_uart_irq+0xa4>
          break;
   160b8:	00002206 	br	16144 <altera_avalon_jtag_uart_irq+0x12c>

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
   160bc:	e0bff517 	ldw	r2,-44(fp)
   160c0:	10800d17 	ldw	r2,52(r2)
   160c4:	e0fff317 	ldw	r3,-52(fp)
   160c8:	1809883a 	mov	r4,r3
   160cc:	e0fff517 	ldw	r3,-44(fp)
   160d0:	1885883a 	add	r2,r3,r2
   160d4:	10801104 	addi	r2,r2,68
   160d8:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   160dc:	e0bff517 	ldw	r2,-44(fp)
   160e0:	10800d17 	ldw	r2,52(r2)
   160e4:	10800044 	addi	r2,r2,1
   160e8:	10c1ffcc 	andi	r3,r2,2047
   160ec:	e0bff517 	ldw	r2,-44(fp)
   160f0:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
   160f4:	e0bff517 	ldw	r2,-44(fp)
   160f8:	10800c17 	ldw	r2,48(r2)
   160fc:	e0bff915 	stw	r2,-28(fp)
   16100:	00800044 	movi	r2,1
   16104:	e0bffa0d 	sth	r2,-24(fp)
   16108:	00800044 	movi	r2,1
   1610c:	e0bffa85 	stb	r2,-22(fp)
                   OS_FLAGS     flags, 
                   INT8U        opt)
{
  INT8U err;

  if (OSRunning)
   16110:	008000b4 	movhi	r2,2
   16114:	10b6c244 	addi	r2,r2,-9463
   16118:	10800003 	ldbu	r2,0(r2)
   1611c:	10803fcc 	andi	r2,r2,255
   16120:	103fd526 	beq	r2,zero,16078 <__alt_mem_Flash_flash_data+0xf4016078>
  {
    OSFlagPost (group, flags, opt, &err);
   16124:	e17ffa0b 	ldhu	r5,-24(fp)
   16128:	e0fffa83 	ldbu	r3,-22(fp)
   1612c:	e0bffcc4 	addi	r2,fp,-13
   16130:	e13ff917 	ldw	r4,-28(fp)
   16134:	180d883a 	mov	r6,r3
   16138:	100f883a 	mov	r7,r2
   1613c:	0010d940 	call	10d94 <OSFlagPost>
      }
   16140:	003fcd06 	br	16078 <__alt_mem_Flash_flash_data+0xf4016078>

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
   16144:	e0bff317 	ldw	r2,-52(fp)
   16148:	10bfffec 	andhi	r2,r2,65535
   1614c:	10000f26 	beq	r2,zero,1618c <altera_avalon_jtag_uart_irq+0x174>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   16150:	e0bff517 	ldw	r2,-44(fp)
   16154:	10c00817 	ldw	r3,32(r2)
   16158:	00bfff84 	movi	r2,-2
   1615c:	1886703a 	and	r3,r3,r2
   16160:	e0bff517 	ldw	r2,-44(fp)
   16164:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
   16168:	e0bff617 	ldw	r2,-40(fp)
   1616c:	10800104 	addi	r2,r2,4
   16170:	1007883a 	mov	r3,r2
   16174:	e0bff517 	ldw	r2,-44(fp)
   16178:	10800817 	ldw	r2,32(r2)
   1617c:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   16180:	e0bff617 	ldw	r2,-40(fp)
   16184:	10800104 	addi	r2,r2,4
   16188:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
   1618c:	e0bff717 	ldw	r2,-36(fp)
   16190:	1080800c 	andi	r2,r2,512
   16194:	10004426 	beq	r2,zero,162a8 <altera_avalon_jtag_uart_irq+0x290>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
   16198:	e0bff717 	ldw	r2,-36(fp)
   1619c:	1004d43a 	srli	r2,r2,16
   161a0:	e0bff415 	stw	r2,-48(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
   161a4:	00002706 	br	16244 <altera_avalon_jtag_uart_irq+0x22c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
   161a8:	e0bff617 	ldw	r2,-40(fp)
   161ac:	e0fff517 	ldw	r3,-44(fp)
   161b0:	18c01017 	ldw	r3,64(r3)
   161b4:	e13ff517 	ldw	r4,-44(fp)
   161b8:	20c7883a 	add	r3,r4,r3
   161bc:	18c21104 	addi	r3,r3,2116
   161c0:	18c00003 	ldbu	r3,0(r3)
   161c4:	18c03fcc 	andi	r3,r3,255
   161c8:	18c0201c 	xori	r3,r3,128
   161cc:	18ffe004 	addi	r3,r3,-128
   161d0:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   161d4:	e0bff517 	ldw	r2,-44(fp)
   161d8:	10801017 	ldw	r2,64(r2)
   161dc:	10800044 	addi	r2,r2,1
   161e0:	10c1ffcc 	andi	r3,r2,2047
   161e4:	e0bff517 	ldw	r2,-44(fp)
   161e8:	10c01015 	stw	r3,64(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);
   161ec:	e0bff517 	ldw	r2,-44(fp)
   161f0:	10800c17 	ldw	r2,48(r2)
   161f4:	e0bffb15 	stw	r2,-20(fp)
   161f8:	00800084 	movi	r2,2
   161fc:	e0bffc0d 	sth	r2,-16(fp)
   16200:	00800044 	movi	r2,1
   16204:	e0bffc85 	stb	r2,-14(fp)
                   OS_FLAGS     flags, 
                   INT8U        opt)
{
  INT8U err;

  if (OSRunning)
   16208:	008000b4 	movhi	r2,2
   1620c:	10b6c244 	addi	r2,r2,-9463
   16210:	10800003 	ldbu	r2,0(r2)
   16214:	10803fcc 	andi	r2,r2,255
   16218:	10000726 	beq	r2,zero,16238 <altera_avalon_jtag_uart_irq+0x220>
  {
    OSFlagPost (group, flags, opt, &err);
   1621c:	e17ffc0b 	ldhu	r5,-16(fp)
   16220:	e0fffc83 	ldbu	r3,-14(fp)
   16224:	e0bffd04 	addi	r2,fp,-12
   16228:	e13ffb17 	ldw	r4,-20(fp)
   1622c:	180d883a 	mov	r6,r3
   16230:	100f883a 	mov	r7,r2
   16234:	0010d940 	call	10d94 <OSFlagPost>

        space--;
   16238:	e0bff417 	ldw	r2,-48(fp)
   1623c:	10bfffc4 	addi	r2,r2,-1
   16240:	e0bff415 	stw	r2,-48(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
   16244:	e0bff417 	ldw	r2,-48(fp)
   16248:	10000526 	beq	r2,zero,16260 <altera_avalon_jtag_uart_irq+0x248>
   1624c:	e0bff517 	ldw	r2,-44(fp)
   16250:	10c01017 	ldw	r3,64(r2)
   16254:	e0bff517 	ldw	r2,-44(fp)
   16258:	10800f17 	ldw	r2,60(r2)
   1625c:	18bfd21e 	bne	r3,r2,161a8 <__alt_mem_Flash_flash_data+0xf40161a8>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
   16260:	e0bff417 	ldw	r2,-48(fp)
   16264:	10001026 	beq	r2,zero,162a8 <altera_avalon_jtag_uart_irq+0x290>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   16268:	e0bff517 	ldw	r2,-44(fp)
   1626c:	10c00817 	ldw	r3,32(r2)
   16270:	00bfff44 	movi	r2,-3
   16274:	1886703a 	and	r3,r3,r2
   16278:	e0bff517 	ldw	r2,-44(fp)
   1627c:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   16280:	e0bff517 	ldw	r2,-44(fp)
   16284:	10800017 	ldw	r2,0(r2)
   16288:	10800104 	addi	r2,r2,4
   1628c:	1007883a 	mov	r3,r2
   16290:	e0bff517 	ldw	r2,-44(fp)
   16294:	10800817 	ldw	r2,32(r2)
   16298:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   1629c:	e0bff617 	ldw	r2,-40(fp)
   162a0:	10800104 	addi	r2,r2,4
   162a4:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
   162a8:	003f6606 	br	16044 <__alt_mem_Flash_flash_data+0xf4016044>
}
   162ac:	e037883a 	mov	sp,fp
   162b0:	dfc00117 	ldw	ra,4(sp)
   162b4:	df000017 	ldw	fp,0(sp)
   162b8:	dec00204 	addi	sp,sp,8
   162bc:	f800283a 	ret

000162c0 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
   162c0:	defff904 	addi	sp,sp,-28
   162c4:	dfc00615 	stw	ra,24(sp)
   162c8:	df000515 	stw	fp,20(sp)
   162cc:	df000504 	addi	fp,sp,20
   162d0:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
   162d4:	e0bfff17 	ldw	r2,-4(fp)
   162d8:	e0bffb15 	stw	r2,-20(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
   162dc:	e0bffb17 	ldw	r2,-20(fp)
   162e0:	10800017 	ldw	r2,0(r2)
   162e4:	10800104 	addi	r2,r2,4
   162e8:	10800037 	ldwio	r2,0(r2)
   162ec:	e0bffc15 	stw	r2,-16(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
   162f0:	e0bffc17 	ldw	r2,-16(fp)
   162f4:	1081000c 	andi	r2,r2,1024
   162f8:	10000b26 	beq	r2,zero,16328 <altera_avalon_jtag_uart_timeout+0x68>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
   162fc:	e0bffb17 	ldw	r2,-20(fp)
   16300:	10800017 	ldw	r2,0(r2)
   16304:	10800104 	addi	r2,r2,4
   16308:	1007883a 	mov	r3,r2
   1630c:	e0bffb17 	ldw	r2,-20(fp)
   16310:	10800817 	ldw	r2,32(r2)
   16314:	10810014 	ori	r2,r2,1024
   16318:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
   1631c:	e0bffb17 	ldw	r2,-20(fp)
   16320:	10000915 	stw	zero,36(r2)
   16324:	00002206 	br	163b0 <altera_avalon_jtag_uart_timeout+0xf0>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
   16328:	e0bffb17 	ldw	r2,-20(fp)
   1632c:	10c00917 	ldw	r3,36(r2)
   16330:	00a00034 	movhi	r2,32768
   16334:	10bfff04 	addi	r2,r2,-4
   16338:	10c01d36 	bltu	r2,r3,163b0 <altera_avalon_jtag_uart_timeout+0xf0>
    sp->host_inactive++;
   1633c:	e0bffb17 	ldw	r2,-20(fp)
   16340:	10800917 	ldw	r2,36(r2)
   16344:	10c00044 	addi	r3,r2,1
   16348:	e0bffb17 	ldw	r2,-20(fp)
   1634c:	10c00915 	stw	r3,36(r2)
    
    if (sp->host_inactive >= sp->timeout) {
   16350:	e0bffb17 	ldw	r2,-20(fp)
   16354:	10c00917 	ldw	r3,36(r2)
   16358:	e0bffb17 	ldw	r2,-20(fp)
   1635c:	10800117 	ldw	r2,4(r2)
   16360:	18801336 	bltu	r3,r2,163b0 <altera_avalon_jtag_uart_timeout+0xf0>
      /* Post an event to indicate host is inactive (for jtag_uart_read */
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
   16364:	e0bffb17 	ldw	r2,-20(fp)
   16368:	10800c17 	ldw	r2,48(r2)
   1636c:	e0bffd15 	stw	r2,-12(fp)
   16370:	00800104 	movi	r2,4
   16374:	e0bffe0d 	sth	r2,-8(fp)
   16378:	00800044 	movi	r2,1
   1637c:	e0bffe85 	stb	r2,-6(fp)
                   OS_FLAGS     flags, 
                   INT8U        opt)
{
  INT8U err;

  if (OSRunning)
   16380:	008000b4 	movhi	r2,2
   16384:	10b6c244 	addi	r2,r2,-9463
   16388:	10800003 	ldbu	r2,0(r2)
   1638c:	10803fcc 	andi	r2,r2,255
   16390:	10000726 	beq	r2,zero,163b0 <altera_avalon_jtag_uart_timeout+0xf0>
  {
    OSFlagPost (group, flags, opt, &err);
   16394:	e17ffe0b 	ldhu	r5,-8(fp)
   16398:	e0fffe83 	ldbu	r3,-6(fp)
   1639c:	e0bffec4 	addi	r2,fp,-5
   163a0:	e13ffd17 	ldw	r4,-12(fp)
   163a4:	180d883a 	mov	r6,r3
   163a8:	100f883a 	mov	r7,r2
   163ac:	0010d940 	call	10d94 <OSFlagPost>
   163b0:	008000b4 	movhi	r2,2
   163b4:	10b6d704 	addi	r2,r2,-9380
   163b8:	10800017 	ldw	r2,0(r2)
    }
  }

  return alt_ticks_per_second();
}
   163bc:	e037883a 	mov	sp,fp
   163c0:	dfc00117 	ldw	ra,4(sp)
   163c4:	df000017 	ldw	fp,0(sp)
   163c8:	dec00204 	addi	sp,sp,8
   163cc:	f800283a 	ret

000163d0 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
   163d0:	defffd04 	addi	sp,sp,-12
   163d4:	df000215 	stw	fp,8(sp)
   163d8:	df000204 	addi	fp,sp,8
   163dc:	e13ffe15 	stw	r4,-8(fp)
   163e0:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   163e4:	00000506 	br	163fc <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
   163e8:	e0bfff17 	ldw	r2,-4(fp)
   163ec:	1090000c 	andi	r2,r2,16384
   163f0:	10000226 	beq	r2,zero,163fc <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
   163f4:	00bffd44 	movi	r2,-11
   163f8:	00000b06 	br	16428 <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   163fc:	e0bffe17 	ldw	r2,-8(fp)
   16400:	10c01017 	ldw	r3,64(r2)
   16404:	e0bffe17 	ldw	r2,-8(fp)
   16408:	10800f17 	ldw	r2,60(r2)
   1640c:	18800526 	beq	r3,r2,16424 <altera_avalon_jtag_uart_close+0x54>
   16410:	e0bffe17 	ldw	r2,-8(fp)
   16414:	10c00917 	ldw	r3,36(r2)
   16418:	e0bffe17 	ldw	r2,-8(fp)
   1641c:	10800117 	ldw	r2,4(r2)
   16420:	18bff136 	bltu	r3,r2,163e8 <__alt_mem_Flash_flash_data+0xf40163e8>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
   16424:	0005883a 	mov	r2,zero
}
   16428:	e037883a 	mov	sp,fp
   1642c:	df000017 	ldw	fp,0(sp)
   16430:	dec00104 	addi	sp,sp,4
   16434:	f800283a 	ret

00016438 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
   16438:	defffa04 	addi	sp,sp,-24
   1643c:	df000515 	stw	fp,20(sp)
   16440:	df000504 	addi	fp,sp,20
   16444:	e13ffd15 	stw	r4,-12(fp)
   16448:	e17ffe15 	stw	r5,-8(fp)
   1644c:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
   16450:	00bff9c4 	movi	r2,-25
   16454:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
   16458:	e0bffe17 	ldw	r2,-8(fp)
   1645c:	10da8060 	cmpeqi	r3,r2,27137
   16460:	1800031e 	bne	r3,zero,16470 <altera_avalon_jtag_uart_ioctl+0x38>
   16464:	109a80a0 	cmpeqi	r2,r2,27138
   16468:	1000191e 	bne	r2,zero,164d0 <altera_avalon_jtag_uart_ioctl+0x98>
      rc = 0;
    }
    break;

  default:
    break;
   1646c:	00002806 	br	16510 <altera_avalon_jtag_uart_ioctl+0xd8>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
   16470:	e0bffd17 	ldw	r2,-12(fp)
   16474:	10c00117 	ldw	r3,4(r2)
   16478:	00a00034 	movhi	r2,32768
   1647c:	10bfffc4 	addi	r2,r2,-1
   16480:	18801226 	beq	r3,r2,164cc <altera_avalon_jtag_uart_ioctl+0x94>
    {
      int timeout = *((int *)arg);
   16484:	e0bfff17 	ldw	r2,-4(fp)
   16488:	10800017 	ldw	r2,0(r2)
   1648c:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
   16490:	e0bffc17 	ldw	r2,-16(fp)
   16494:	10800090 	cmplti	r2,r2,2
   16498:	1000061e 	bne	r2,zero,164b4 <altera_avalon_jtag_uart_ioctl+0x7c>
   1649c:	e0fffc17 	ldw	r3,-16(fp)
   164a0:	00a00034 	movhi	r2,32768
   164a4:	10bfffc4 	addi	r2,r2,-1
   164a8:	18800226 	beq	r3,r2,164b4 <altera_avalon_jtag_uart_ioctl+0x7c>
   164ac:	e0bffc17 	ldw	r2,-16(fp)
   164b0:	00000206 	br	164bc <altera_avalon_jtag_uart_ioctl+0x84>
   164b4:	00a00034 	movhi	r2,32768
   164b8:	10bfff84 	addi	r2,r2,-2
   164bc:	e0fffd17 	ldw	r3,-12(fp)
   164c0:	18800115 	stw	r2,4(r3)
      rc = 0;
   164c4:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
   164c8:	00001106 	br	16510 <altera_avalon_jtag_uart_ioctl+0xd8>
   164cc:	00001006 	br	16510 <altera_avalon_jtag_uart_ioctl+0xd8>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
   164d0:	e0bffd17 	ldw	r2,-12(fp)
   164d4:	10c00117 	ldw	r3,4(r2)
   164d8:	00a00034 	movhi	r2,32768
   164dc:	10bfffc4 	addi	r2,r2,-1
   164e0:	18800a26 	beq	r3,r2,1650c <altera_avalon_jtag_uart_ioctl+0xd4>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
   164e4:	e0bffd17 	ldw	r2,-12(fp)
   164e8:	10c00917 	ldw	r3,36(r2)
   164ec:	e0bffd17 	ldw	r2,-12(fp)
   164f0:	10800117 	ldw	r2,4(r2)
   164f4:	1885803a 	cmpltu	r2,r3,r2
   164f8:	10c03fcc 	andi	r3,r2,255
   164fc:	e0bfff17 	ldw	r2,-4(fp)
   16500:	10c00015 	stw	r3,0(r2)
      rc = 0;
   16504:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
   16508:	00000006 	br	1650c <altera_avalon_jtag_uart_ioctl+0xd4>
   1650c:	0001883a 	nop

  default:
    break;
  }

  return rc;
   16510:	e0bffb17 	ldw	r2,-20(fp)
}
   16514:	e037883a 	mov	sp,fp
   16518:	df000017 	ldw	fp,0(sp)
   1651c:	dec00104 	addi	sp,sp,4
   16520:	f800283a 	ret

00016524 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
   16524:	deffec04 	addi	sp,sp,-80
   16528:	dfc01315 	stw	ra,76(sp)
   1652c:	df001215 	stw	fp,72(sp)
   16530:	df001204 	addi	fp,sp,72
   16534:	e13ffc15 	stw	r4,-16(fp)
   16538:	e17ffd15 	stw	r5,-12(fp)
   1653c:	e1bffe15 	stw	r6,-8(fp)
   16540:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
   16544:	e0bffd17 	ldw	r2,-12(fp)
   16548:	e0bfef15 	stw	r2,-68(fp)

  /*
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);
   1654c:	e0bffc17 	ldw	r2,-16(fp)
   16550:	10800a17 	ldw	r2,40(r2)
   16554:	e0bff415 	stw	r2,-48(fp)
   16558:	e03ff50d 	sth	zero,-44(fp)

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sem_pend (OS_EVENT* sem, 
                  INT16U timeout)
{
  INT8U err;
  OSSemPend (sem, timeout, &err);
   1655c:	e0fff50b 	ldhu	r3,-44(fp)
   16560:	e0bffb04 	addi	r2,fp,-20
   16564:	e13ff417 	ldw	r4,-48(fp)
   16568:	180b883a 	mov	r5,r3
   1656c:	100d883a 	mov	r6,r2
   16570:	00133e40 	call	133e4 <OSSemPend>

  while (space > 0)
   16574:	00006506 	br	1670c <altera_avalon_jtag_uart_read+0x1e8>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
   16578:	e0bffc17 	ldw	r2,-16(fp)
   1657c:	10800d17 	ldw	r2,52(r2)
   16580:	e0bff115 	stw	r2,-60(fp)
      out = sp->rx_out;
   16584:	e0bffc17 	ldw	r2,-16(fp)
   16588:	10800e17 	ldw	r2,56(r2)
   1658c:	e0bff215 	stw	r2,-56(fp)

      if (in >= out)
   16590:	e0fff117 	ldw	r3,-60(fp)
   16594:	e0bff217 	ldw	r2,-56(fp)
   16598:	18800536 	bltu	r3,r2,165b0 <altera_avalon_jtag_uart_read+0x8c>
        n = in - out;
   1659c:	e0fff117 	ldw	r3,-60(fp)
   165a0:	e0bff217 	ldw	r2,-56(fp)
   165a4:	1885c83a 	sub	r2,r3,r2
   165a8:	e0bff015 	stw	r2,-64(fp)
   165ac:	00000406 	br	165c0 <altera_avalon_jtag_uart_read+0x9c>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
   165b0:	00c20004 	movi	r3,2048
   165b4:	e0bff217 	ldw	r2,-56(fp)
   165b8:	1885c83a 	sub	r2,r3,r2
   165bc:	e0bff015 	stw	r2,-64(fp)

      if (n == 0)
   165c0:	e0bff017 	ldw	r2,-64(fp)
   165c4:	1000011e 	bne	r2,zero,165cc <altera_avalon_jtag_uart_read+0xa8>
        break; /* No more data available */
   165c8:	00001d06 	br	16640 <altera_avalon_jtag_uart_read+0x11c>

      if (n > space)
   165cc:	e0fffe17 	ldw	r3,-8(fp)
   165d0:	e0bff017 	ldw	r2,-64(fp)
   165d4:	1880022e 	bgeu	r3,r2,165e0 <altera_avalon_jtag_uart_read+0xbc>
        n = space;
   165d8:	e0bffe17 	ldw	r2,-8(fp)
   165dc:	e0bff015 	stw	r2,-64(fp)

      memcpy(ptr, sp->rx_buf + out, n);
   165e0:	e0bff217 	ldw	r2,-56(fp)
   165e4:	10801104 	addi	r2,r2,68
   165e8:	e0fffc17 	ldw	r3,-16(fp)
   165ec:	1885883a 	add	r2,r3,r2
   165f0:	e13fef17 	ldw	r4,-68(fp)
   165f4:	100b883a 	mov	r5,r2
   165f8:	e1bff017 	ldw	r6,-64(fp)
   165fc:	0005edc0 	call	5edc <memcpy>
      ptr   += n;
   16600:	e0ffef17 	ldw	r3,-68(fp)
   16604:	e0bff017 	ldw	r2,-64(fp)
   16608:	1885883a 	add	r2,r3,r2
   1660c:	e0bfef15 	stw	r2,-68(fp)
      space -= n;
   16610:	e0fffe17 	ldw	r3,-8(fp)
   16614:	e0bff017 	ldw	r2,-64(fp)
   16618:	1885c83a 	sub	r2,r3,r2
   1661c:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   16620:	e0fff217 	ldw	r3,-56(fp)
   16624:	e0bff017 	ldw	r2,-64(fp)
   16628:	1885883a 	add	r2,r3,r2
   1662c:	10c1ffcc 	andi	r3,r2,2047
   16630:	e0bffc17 	ldw	r2,-16(fp)
   16634:	10c00e15 	stw	r3,56(r2)
    }
    while (space > 0);
   16638:	e0bffe17 	ldw	r2,-8(fp)
   1663c:	00bfce16 	blt	zero,r2,16578 <__alt_mem_Flash_flash_data+0xf4016578>

    /* If we read any data then return it */
    if (ptr != buffer)
   16640:	e0ffef17 	ldw	r3,-68(fp)
   16644:	e0bffd17 	ldw	r2,-12(fp)
   16648:	18800126 	beq	r3,r2,16650 <altera_avalon_jtag_uart_read+0x12c>
      break;
   1664c:	00003106 	br	16714 <altera_avalon_jtag_uart_read+0x1f0>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
   16650:	e0bfff17 	ldw	r2,-4(fp)
   16654:	1090000c 	andi	r2,r2,16384
   16658:	10000126 	beq	r2,zero,16660 <altera_avalon_jtag_uart_read+0x13c>
      break;
   1665c:	00002d06 	br	16714 <altera_avalon_jtag_uart_read+0x1f0>

#ifdef __ucosii__
    /* OS Present: Pend on a flag if the OS is running, otherwise spin */
    if(OSRunning == OS_TRUE) {
   16660:	008000b4 	movhi	r2,2
   16664:	10b6c244 	addi	r2,r2,-9463
   16668:	10800003 	ldbu	r2,0(r2)
   1666c:	10803fcc 	andi	r2,r2,255
   16670:	10800058 	cmpnei	r2,r2,1
   16674:	1000161e 	bne	r2,zero,166d0 <altera_avalon_jtag_uart_read+0x1ac>
       * When running in a multi-threaded mode, we pend on the read event
       * flag set and timeout event flag set in the isr. This avoids wasting CPU
       * cycles waiting in this thread, when we could be doing something more
       * profitable elsewhere.
       */
      ALT_FLAG_PEND (sp->events,
   16678:	e0bffc17 	ldw	r2,-16(fp)
   1667c:	10800c17 	ldw	r2,48(r2)
   16680:	e0bff615 	stw	r2,-40(fp)
   16684:	00800144 	movi	r2,5
   16688:	e0bff70d 	sth	r2,-36(fp)
   1668c:	00bfe0c4 	movi	r2,-125
   16690:	e0bff785 	stb	r2,-34(fp)
   16694:	e03ff80d 	sth	zero,-32(fp)
                   OS_FLAGS flags, 
                   INT8U wait_type, 
                   INT16U timeout)
{
  INT8U err;
  if (OSRunning)
   16698:	008000b4 	movhi	r2,2
   1669c:	10b6c244 	addi	r2,r2,-9463
   166a0:	10800003 	ldbu	r2,0(r2)
   166a4:	10803fcc 	andi	r2,r2,255
   166a8:	10001326 	beq	r2,zero,166f8 <altera_avalon_jtag_uart_read+0x1d4>
  {
    OSFlagPend (group, flags, wait_type, timeout, &err);
   166ac:	e17ff70b 	ldhu	r5,-36(fp)
   166b0:	e1bff783 	ldbu	r6,-34(fp)
   166b4:	e0fff80b 	ldhu	r3,-32(fp)
   166b8:	e0bffb44 	addi	r2,fp,-19
   166bc:	d8800015 	stw	r2,0(sp)
   166c0:	e13ff617 	ldw	r4,-40(fp)
   166c4:	180f883a 	mov	r7,r3
   166c8:	001073c0 	call	1073c <OSFlagPend>
   166cc:	00000a06 	br	166f8 <altera_avalon_jtag_uart_read+0x1d4>
                     OS_FLAG_WAIT_SET_ANY + OS_FLAG_CONSUME,
                     0);
    }
    else {
      /* Spin until more data arrives or until host disconnects */
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
   166d0:	0001883a 	nop
   166d4:	e0bffc17 	ldw	r2,-16(fp)
   166d8:	10c00d17 	ldw	r3,52(r2)
   166dc:	e0bff117 	ldw	r2,-60(fp)
   166e0:	1880051e 	bne	r3,r2,166f8 <altera_avalon_jtag_uart_read+0x1d4>
   166e4:	e0bffc17 	ldw	r2,-16(fp)
   166e8:	10c00917 	ldw	r3,36(r2)
   166ec:	e0bffc17 	ldw	r2,-16(fp)
   166f0:	10800117 	ldw	r2,4(r2)
   166f4:	18bff736 	bltu	r3,r2,166d4 <__alt_mem_Flash_flash_data+0xf40166d4>
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
   166f8:	e0bffc17 	ldw	r2,-16(fp)
   166fc:	10c00d17 	ldw	r3,52(r2)
   16700:	e0bff117 	ldw	r2,-60(fp)
   16704:	1880011e 	bne	r3,r2,1670c <altera_avalon_jtag_uart_read+0x1e8>
      break;
   16708:	00000206 	br	16714 <altera_avalon_jtag_uart_read+0x1f0>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   1670c:	e0bffe17 	ldw	r2,-8(fp)
   16710:	00bf9916 	blt	zero,r2,16578 <__alt_mem_Flash_flash_data+0xf4016578>
  /*
   * Now that access to the circular buffer is complete, release the read
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);
   16714:	e0bffc17 	ldw	r2,-16(fp)
   16718:	10800a17 	ldw	r2,40(r2)
   1671c:	1009883a 	mov	r4,r2
   16720:	00137b80 	call	137b8 <OSSemPost>

  if (ptr != buffer)
   16724:	e0ffef17 	ldw	r3,-68(fp)
   16728:	e0bffd17 	ldw	r2,-12(fp)
   1672c:	18801826 	beq	r3,r2,16790 <altera_avalon_jtag_uart_read+0x26c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   16730:	0005303a 	rdctl	r2,status
   16734:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   16738:	e0fff917 	ldw	r3,-28(fp)
   1673c:	00bfff84 	movi	r2,-2
   16740:	1884703a 	and	r2,r3,r2
   16744:	1001703a 	wrctl	status,r2
  
  return context;
   16748:	e0bff917 	ldw	r2,-28(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
   1674c:	e0bff315 	stw	r2,-52(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   16750:	e0bffc17 	ldw	r2,-16(fp)
   16754:	10800817 	ldw	r2,32(r2)
   16758:	10c00054 	ori	r3,r2,1
   1675c:	e0bffc17 	ldw	r2,-16(fp)
   16760:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   16764:	e0bffc17 	ldw	r2,-16(fp)
   16768:	10800017 	ldw	r2,0(r2)
   1676c:	10800104 	addi	r2,r2,4
   16770:	1007883a 	mov	r3,r2
   16774:	e0bffc17 	ldw	r2,-16(fp)
   16778:	10800817 	ldw	r2,32(r2)
   1677c:	18800035 	stwio	r2,0(r3)
   16780:	e0bff317 	ldw	r2,-52(fp)
   16784:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   16788:	e0bffa17 	ldw	r2,-24(fp)
   1678c:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
   16790:	e0ffef17 	ldw	r3,-68(fp)
   16794:	e0bffd17 	ldw	r2,-12(fp)
   16798:	18800426 	beq	r3,r2,167ac <altera_avalon_jtag_uart_read+0x288>
    return ptr - buffer;
   1679c:	e0ffef17 	ldw	r3,-68(fp)
   167a0:	e0bffd17 	ldw	r2,-12(fp)
   167a4:	1885c83a 	sub	r2,r3,r2
   167a8:	00000606 	br	167c4 <altera_avalon_jtag_uart_read+0x2a0>
  else if (flags & O_NONBLOCK)
   167ac:	e0bfff17 	ldw	r2,-4(fp)
   167b0:	1090000c 	andi	r2,r2,16384
   167b4:	10000226 	beq	r2,zero,167c0 <altera_avalon_jtag_uart_read+0x29c>
    return -EWOULDBLOCK;
   167b8:	00bffd44 	movi	r2,-11
   167bc:	00000106 	br	167c4 <altera_avalon_jtag_uart_read+0x2a0>
  else
    return -EIO;
   167c0:	00bffec4 	movi	r2,-5
}
   167c4:	e037883a 	mov	sp,fp
   167c8:	dfc00117 	ldw	ra,4(sp)
   167cc:	df000017 	ldw	fp,0(sp)
   167d0:	dec00204 	addi	sp,sp,8
   167d4:	f800283a 	ret

000167d8 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
   167d8:	deffed04 	addi	sp,sp,-76
   167dc:	dfc01215 	stw	ra,72(sp)
   167e0:	df001115 	stw	fp,68(sp)
   167e4:	df001104 	addi	fp,sp,68
   167e8:	e13ffc15 	stw	r4,-16(fp)
   167ec:	e17ffd15 	stw	r5,-12(fp)
   167f0:	e1bffe15 	stw	r6,-8(fp)
   167f4:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
   167f8:	e03ff015 	stw	zero,-64(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
   167fc:	e0bffd17 	ldw	r2,-12(fp)
   16800:	e0bff215 	stw	r2,-56(fp)

  /*
   * When running in a multi threaded environment, obtain the "write_lock"
   * semaphore. This ensures that writing to the device is thread-safe.
   */
  ALT_SEM_PEND (sp->write_lock, 0);
   16804:	e0bffc17 	ldw	r2,-16(fp)
   16808:	10800b17 	ldw	r2,44(r2)
   1680c:	e0bff515 	stw	r2,-44(fp)
   16810:	e03ff60d 	sth	zero,-40(fp)
   16814:	e0fff60b 	ldhu	r3,-40(fp)
   16818:	e0bffbc4 	addi	r2,fp,-17
   1681c:	e13ff517 	ldw	r4,-44(fp)
   16820:	180b883a 	mov	r5,r3
   16824:	100d883a 	mov	r6,r2
   16828:	00133e40 	call	133e4 <OSSemPend>

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   1682c:	00003806 	br	16910 <altera_avalon_jtag_uart_write+0x138>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
   16830:	e0bffc17 	ldw	r2,-16(fp)
   16834:	10800f17 	ldw	r2,60(r2)
   16838:	e0bff315 	stw	r2,-52(fp)
      out = sp->tx_out;
   1683c:	e0bffc17 	ldw	r2,-16(fp)
   16840:	10801017 	ldw	r2,64(r2)
   16844:	e0bff015 	stw	r2,-64(fp)

      if (in < out)
   16848:	e0fff317 	ldw	r3,-52(fp)
   1684c:	e0bff017 	ldw	r2,-64(fp)
   16850:	1880062e 	bgeu	r3,r2,1686c <altera_avalon_jtag_uart_write+0x94>
        n = out - 1 - in;
   16854:	e0fff017 	ldw	r3,-64(fp)
   16858:	e0bff317 	ldw	r2,-52(fp)
   1685c:	1885c83a 	sub	r2,r3,r2
   16860:	10bfffc4 	addi	r2,r2,-1
   16864:	e0bff115 	stw	r2,-60(fp)
   16868:	00000b06 	br	16898 <altera_avalon_jtag_uart_write+0xc0>
      else if (out > 0)
   1686c:	e0bff017 	ldw	r2,-64(fp)
   16870:	10000526 	beq	r2,zero,16888 <altera_avalon_jtag_uart_write+0xb0>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
   16874:	00c20004 	movi	r3,2048
   16878:	e0bff317 	ldw	r2,-52(fp)
   1687c:	1885c83a 	sub	r2,r3,r2
   16880:	e0bff115 	stw	r2,-60(fp)
   16884:	00000406 	br	16898 <altera_avalon_jtag_uart_write+0xc0>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
   16888:	00c1ffc4 	movi	r3,2047
   1688c:	e0bff317 	ldw	r2,-52(fp)
   16890:	1885c83a 	sub	r2,r3,r2
   16894:	e0bff115 	stw	r2,-60(fp)

      if (n == 0)
   16898:	e0bff117 	ldw	r2,-60(fp)
   1689c:	1000011e 	bne	r2,zero,168a4 <altera_avalon_jtag_uart_write+0xcc>
        break;
   168a0:	00001d06 	br	16918 <altera_avalon_jtag_uart_write+0x140>

      if (n > count)
   168a4:	e0fffe17 	ldw	r3,-8(fp)
   168a8:	e0bff117 	ldw	r2,-60(fp)
   168ac:	1880022e 	bgeu	r3,r2,168b8 <altera_avalon_jtag_uart_write+0xe0>
        n = count;
   168b0:	e0bffe17 	ldw	r2,-8(fp)
   168b4:	e0bff115 	stw	r2,-60(fp)

      memcpy(sp->tx_buf + in, ptr, n);
   168b8:	e0bff317 	ldw	r2,-52(fp)
   168bc:	10821104 	addi	r2,r2,2116
   168c0:	e0fffc17 	ldw	r3,-16(fp)
   168c4:	1885883a 	add	r2,r3,r2
   168c8:	1009883a 	mov	r4,r2
   168cc:	e17ffd17 	ldw	r5,-12(fp)
   168d0:	e1bff117 	ldw	r6,-60(fp)
   168d4:	0005edc0 	call	5edc <memcpy>
      ptr   += n;
   168d8:	e0fffd17 	ldw	r3,-12(fp)
   168dc:	e0bff117 	ldw	r2,-60(fp)
   168e0:	1885883a 	add	r2,r3,r2
   168e4:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
   168e8:	e0fffe17 	ldw	r3,-8(fp)
   168ec:	e0bff117 	ldw	r2,-60(fp)
   168f0:	1885c83a 	sub	r2,r3,r2
   168f4:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   168f8:	e0fff317 	ldw	r3,-52(fp)
   168fc:	e0bff117 	ldw	r2,-60(fp)
   16900:	1885883a 	add	r2,r3,r2
   16904:	10c1ffcc 	andi	r3,r2,2047
   16908:	e0bffc17 	ldw	r2,-16(fp)
   1690c:	10c00f15 	stw	r3,60(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   16910:	e0bffe17 	ldw	r2,-8(fp)
   16914:	00bfc616 	blt	zero,r2,16830 <__alt_mem_Flash_flash_data+0xf4016830>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   16918:	0005303a 	rdctl	r2,status
   1691c:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   16920:	e0fff717 	ldw	r3,-36(fp)
   16924:	00bfff84 	movi	r2,-2
   16928:	1884703a 	and	r2,r3,r2
   1692c:	1001703a 	wrctl	status,r2
  
  return context;
   16930:	e0bff717 	ldw	r2,-36(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
   16934:	e0bff415 	stw	r2,-48(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   16938:	e0bffc17 	ldw	r2,-16(fp)
   1693c:	10800817 	ldw	r2,32(r2)
   16940:	10c00094 	ori	r3,r2,2
   16944:	e0bffc17 	ldw	r2,-16(fp)
   16948:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   1694c:	e0bffc17 	ldw	r2,-16(fp)
   16950:	10800017 	ldw	r2,0(r2)
   16954:	10800104 	addi	r2,r2,4
   16958:	1007883a 	mov	r3,r2
   1695c:	e0bffc17 	ldw	r2,-16(fp)
   16960:	10800817 	ldw	r2,32(r2)
   16964:	18800035 	stwio	r2,0(r3)
   16968:	e0bff417 	ldw	r2,-48(fp)
   1696c:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   16970:	e0bff817 	ldw	r2,-32(fp)
   16974:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
   16978:	e0bffe17 	ldw	r2,-8(fp)
   1697c:	00802e0e 	bge	zero,r2,16a38 <altera_avalon_jtag_uart_write+0x260>
    {
      if (flags & O_NONBLOCK)
   16980:	e0bfff17 	ldw	r2,-4(fp)
   16984:	1090000c 	andi	r2,r2,16384
   16988:	10000126 	beq	r2,zero,16990 <altera_avalon_jtag_uart_write+0x1b8>
        break;
   1698c:	00002c06 	br	16a40 <altera_avalon_jtag_uart_write+0x268>

#ifdef __ucosii__
      /* OS Present: Pend on a flag if the OS is running, otherwise spin */
      if(OSRunning == OS_TRUE) {
   16990:	008000b4 	movhi	r2,2
   16994:	10b6c244 	addi	r2,r2,-9463
   16998:	10800003 	ldbu	r2,0(r2)
   1699c:	10803fcc 	andi	r2,r2,255
   169a0:	10800058 	cmpnei	r2,r2,1
   169a4:	1000161e 	bne	r2,zero,16a00 <altera_avalon_jtag_uart_write+0x228>
         * more profitable elsewhere.
         */
#ifdef ALTERA_AVALON_JTAG_UART_IGNORE_FIFO_FULL_ERROR
        if(!sp->host_inactive)
#endif
        ALT_FLAG_PEND (sp->events,
   169a8:	e0bffc17 	ldw	r2,-16(fp)
   169ac:	10800c17 	ldw	r2,48(r2)
   169b0:	e0bff915 	stw	r2,-28(fp)
   169b4:	00800184 	movi	r2,6
   169b8:	e0bffa0d 	sth	r2,-24(fp)
   169bc:	00bfe0c4 	movi	r2,-125
   169c0:	e0bffa85 	stb	r2,-22(fp)
   169c4:	e03ffb0d 	sth	zero,-20(fp)
                   OS_FLAGS flags, 
                   INT8U wait_type, 
                   INT16U timeout)
{
  INT8U err;
  if (OSRunning)
   169c8:	008000b4 	movhi	r2,2
   169cc:	10b6c244 	addi	r2,r2,-9463
   169d0:	10800003 	ldbu	r2,0(r2)
   169d4:	10803fcc 	andi	r2,r2,255
   169d8:	10001326 	beq	r2,zero,16a28 <altera_avalon_jtag_uart_write+0x250>
  {
    OSFlagPend (group, flags, wait_type, timeout, &err);
   169dc:	e17ffa0b 	ldhu	r5,-24(fp)
   169e0:	e1bffa83 	ldbu	r6,-22(fp)
   169e4:	e0fffb0b 	ldhu	r3,-20(fp)
   169e8:	e0bffb84 	addi	r2,fp,-18
   169ec:	d8800015 	stw	r2,0(sp)
   169f0:	e13ff917 	ldw	r4,-28(fp)
   169f4:	180f883a 	mov	r7,r3
   169f8:	001073c0 	call	1073c <OSFlagPend>
   169fc:	00000a06 	br	16a28 <altera_avalon_jtag_uart_write+0x250>
        /*
         * OS not running: Wait for data to be removed from buffer.
         * Once the interrupt routine has removed some data then we
         * will be able to insert some more.
         */
        while (out == sp->tx_out && sp->host_inactive < sp->timeout)
   16a00:	0001883a 	nop
   16a04:	e0bffc17 	ldw	r2,-16(fp)
   16a08:	10c01017 	ldw	r3,64(r2)
   16a0c:	e0bff017 	ldw	r2,-64(fp)
   16a10:	1880051e 	bne	r3,r2,16a28 <altera_avalon_jtag_uart_write+0x250>
   16a14:	e0bffc17 	ldw	r2,-16(fp)
   16a18:	10c00917 	ldw	r3,36(r2)
   16a1c:	e0bffc17 	ldw	r2,-16(fp)
   16a20:	10800117 	ldw	r2,4(r2)
   16a24:	18bff736 	bltu	r3,r2,16a04 <__alt_mem_Flash_flash_data+0xf4016a04>
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
   16a28:	e0bffc17 	ldw	r2,-16(fp)
   16a2c:	10800917 	ldw	r2,36(r2)
   16a30:	10000126 	beq	r2,zero,16a38 <altera_avalon_jtag_uart_write+0x260>
         break;
   16a34:	00000206 	br	16a40 <altera_avalon_jtag_uart_write+0x268>
    }
  }
  while (count > 0);
   16a38:	e0bffe17 	ldw	r2,-8(fp)
   16a3c:	00bf7b16 	blt	zero,r2,1682c <__alt_mem_Flash_flash_data+0xf401682c>

  /*
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);
   16a40:	e0bffc17 	ldw	r2,-16(fp)
   16a44:	10800b17 	ldw	r2,44(r2)
   16a48:	1009883a 	mov	r4,r2
   16a4c:	00137b80 	call	137b8 <OSSemPost>

  if (ptr != start)
   16a50:	e0fffd17 	ldw	r3,-12(fp)
   16a54:	e0bff217 	ldw	r2,-56(fp)
   16a58:	18800426 	beq	r3,r2,16a6c <altera_avalon_jtag_uart_write+0x294>
    return ptr - start;
   16a5c:	e0fffd17 	ldw	r3,-12(fp)
   16a60:	e0bff217 	ldw	r2,-56(fp)
   16a64:	1885c83a 	sub	r2,r3,r2
   16a68:	00000606 	br	16a84 <altera_avalon_jtag_uart_write+0x2ac>
  else if (flags & O_NONBLOCK)
   16a6c:	e0bfff17 	ldw	r2,-4(fp)
   16a70:	1090000c 	andi	r2,r2,16384
   16a74:	10000226 	beq	r2,zero,16a80 <altera_avalon_jtag_uart_write+0x2a8>
    return -EWOULDBLOCK;
   16a78:	00bffd44 	movi	r2,-11
   16a7c:	00000106 	br	16a84 <altera_avalon_jtag_uart_write+0x2ac>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
   16a80:	00bffec4 	movi	r2,-5
}
   16a84:	e037883a 	mov	sp,fp
   16a88:	dfc00117 	ldw	ra,4(sp)
   16a8c:	df000017 	ldw	fp,0(sp)
   16a90:	dec00204 	addi	sp,sp,8
   16a94:	f800283a 	ret

00016a98 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
   16a98:	defff904 	addi	sp,sp,-28
   16a9c:	dfc00615 	stw	ra,24(sp)
   16aa0:	df000515 	stw	fp,20(sp)
   16aa4:	df000504 	addi	fp,sp,20
   16aa8:	e13ffe15 	stw	r4,-8(fp)
   16aac:	e17fff15 	stw	r5,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
   16ab0:	0007883a 	mov	r3,zero
   16ab4:	e0bffe17 	ldw	r2,-8(fp)
   16ab8:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
   16abc:	e0bffe17 	ldw	r2,-8(fp)
   16ac0:	10800104 	addi	r2,r2,4
   16ac4:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   16ac8:	0005303a 	rdctl	r2,status
   16acc:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   16ad0:	e0fffc17 	ldw	r3,-16(fp)
   16ad4:	00bfff84 	movi	r2,-2
   16ad8:	1884703a 	and	r2,r3,r2
   16adc:	1001703a 	wrctl	status,r2
  
  return context;
   16ae0:	e0bffc17 	ldw	r2,-16(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
   16ae4:	e0bffb15 	stw	r2,-20(fp)
  alt_tick ();
   16ae8:	0018b140 	call	18b14 <alt_tick>
   16aec:	e0bffb17 	ldw	r2,-20(fp)
   16af0:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   16af4:	e0bffd17 	ldw	r2,-12(fp)
   16af8:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
   16afc:	e037883a 	mov	sp,fp
   16b00:	dfc00117 	ldw	ra,4(sp)
   16b04:	df000017 	ldw	fp,0(sp)
   16b08:	dec00204 	addi	sp,sp,8
   16b0c:	f800283a 	ret

00016b10 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
   16b10:	defff904 	addi	sp,sp,-28
   16b14:	dfc00615 	stw	ra,24(sp)
   16b18:	df000515 	stw	fp,20(sp)
   16b1c:	df000504 	addi	fp,sp,20
   16b20:	e13ffc15 	stw	r4,-16(fp)
   16b24:	e17ffd15 	stw	r5,-12(fp)
   16b28:	e1bffe15 	stw	r6,-8(fp)
   16b2c:	e1ffff15 	stw	r7,-4(fp)
   16b30:	e0bfff17 	ldw	r2,-4(fp)
   16b34:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
   16b38:	008000b4 	movhi	r2,2
   16b3c:	10b6d704 	addi	r2,r2,-9380
   16b40:	10800017 	ldw	r2,0(r2)
   16b44:	1000041e 	bne	r2,zero,16b58 <alt_avalon_timer_sc_init+0x48>
  {
    _alt_tick_rate = nticks;
   16b48:	008000b4 	movhi	r2,2
   16b4c:	10b6d704 	addi	r2,r2,-9380
   16b50:	e0fffb17 	ldw	r3,-20(fp)
   16b54:	10c00015 	stw	r3,0(r2)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
   16b58:	e0bffc17 	ldw	r2,-16(fp)
   16b5c:	10800104 	addi	r2,r2,4
   16b60:	00c001c4 	movi	r3,7
   16b64:	10c00035 	stwio	r3,0(r2)
  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
   16b68:	e13ffe17 	ldw	r4,-8(fp)
   16b6c:	e17ffc17 	ldw	r5,-16(fp)
   16b70:	01800074 	movhi	r6,1
   16b74:	319aa604 	addi	r6,r6,27288
   16b78:	00186580 	call	18658 <alt_irq_register>
#endif  
}
   16b7c:	e037883a 	mov	sp,fp
   16b80:	dfc00117 	ldw	ra,4(sp)
   16b84:	df000017 	ldw	fp,0(sp)
   16b88:	dec00204 	addi	sp,sp,8
   16b8c:	f800283a 	ret

00016b90 <get_DDRAM_addr>:
 * @sa the datasheet for the LCD Display Controller on the DE2 Board
 * @note the function requires that the input are in the valid range
 *
 **/
unsigned char get_DDRAM_addr(unsigned x_pos, unsigned y_pos)
{
   16b90:	defffc04 	addi	sp,sp,-16
   16b94:	df000315 	stw	fp,12(sp)
   16b98:	df000304 	addi	fp,sp,12
   16b9c:	e13ffe15 	stw	r4,-8(fp)
   16ba0:	e17fff15 	stw	r5,-4(fp)
	//assume valid inputs
	unsigned char addr = 0x00000000;
   16ba4:	e03ffd05 	stb	zero,-12(fp)
	if (y_pos == 0)
   16ba8:	e0bfff17 	ldw	r2,-4(fp)
   16bac:	1000061e 	bne	r2,zero,16bc8 <get_DDRAM_addr+0x38>
	{
		addr |= x_pos;
   16bb0:	e0bffe17 	ldw	r2,-8(fp)
   16bb4:	1007883a 	mov	r3,r2
   16bb8:	e0bffd03 	ldbu	r2,-12(fp)
   16bbc:	1884b03a 	or	r2,r3,r2
   16bc0:	e0bffd05 	stb	r2,-12(fp)
   16bc4:	00000806 	br	16be8 <get_DDRAM_addr+0x58>
	}
	else
	{
		addr |= x_pos;
   16bc8:	e0bffe17 	ldw	r2,-8(fp)
   16bcc:	1007883a 	mov	r3,r2
   16bd0:	e0bffd03 	ldbu	r2,-12(fp)
   16bd4:	1884b03a 	or	r2,r3,r2
   16bd8:	e0bffd05 	stb	r2,-12(fp)
		addr |= 0x00000040;
   16bdc:	e0bffd03 	ldbu	r2,-12(fp)
   16be0:	10801014 	ori	r2,r2,64
   16be4:	e0bffd05 	stb	r2,-12(fp)
	}
	// b_7 is always 1 for DDRAM address, see datasheet
	return (addr | 0x00000080);
   16be8:	e0fffd03 	ldbu	r3,-12(fp)
   16bec:	00bfe004 	movi	r2,-128
   16bf0:	1884b03a 	or	r2,r3,r2
}
   16bf4:	e037883a 	mov	sp,fp
   16bf8:	df000017 	ldw	fp,0(sp)
   16bfc:	dec00104 	addi	sp,sp,4
   16c00:	f800283a 	ret

00016c04 <alt_up_character_lcd_send_cmd>:
 * @param cmd -- the command bits 
 *
 * @return nothing
 **/
void alt_up_character_lcd_send_cmd(alt_up_character_lcd_dev *lcd, unsigned char cmd)
{
   16c04:	defffd04 	addi	sp,sp,-12
   16c08:	df000215 	stw	fp,8(sp)
   16c0c:	df000204 	addi	fp,sp,8
   16c10:	e13ffe15 	stw	r4,-8(fp)
   16c14:	2805883a 	mov	r2,r5
   16c18:	e0bfff05 	stb	r2,-4(fp)
 	// NOTE: We use the term Instruction Register and Control Register interchangeably
	IOWR_ALT_UP_CHARACTER_LCD_COMMAND(lcd->base, cmd);
   16c1c:	e0bffe17 	ldw	r2,-8(fp)
   16c20:	10800a17 	ldw	r2,40(r2)
   16c24:	1007883a 	mov	r3,r2
   16c28:	e0bfff03 	ldbu	r2,-4(fp)
   16c2c:	18800025 	stbio	r2,0(r3)
}
   16c30:	e037883a 	mov	sp,fp
   16c34:	df000017 	ldw	fp,0(sp)
   16c38:	dec00104 	addi	sp,sp,4
   16c3c:	f800283a 	ret

00016c40 <alt_up_character_lcd_init>:
 * file for a detailed description of each function
 */
////////////////////////////////////////////////////////////////////////////

void alt_up_character_lcd_init(alt_up_character_lcd_dev *lcd)
{
   16c40:	defffe04 	addi	sp,sp,-8
   16c44:	df000115 	stw	fp,4(sp)
   16c48:	df000104 	addi	fp,sp,4
   16c4c:	e13fff15 	stw	r4,-4(fp)
	IOWR_ALT_UP_CHARACTER_LCD_COMMAND(lcd->base, ALT_UP_CHARACTER_LCD_COMM_CLEAR_DISPLAY);
   16c50:	e0bfff17 	ldw	r2,-4(fp)
   16c54:	10800a17 	ldw	r2,40(r2)
   16c58:	1007883a 	mov	r3,r2
   16c5c:	00800044 	movi	r2,1
   16c60:	18800025 	stbio	r2,0(r3)
	// register the device 
	// see "Developing Device Drivers for the HAL" in "Nios II Software Developer's Handbook"
}
   16c64:	e037883a 	mov	sp,fp
   16c68:	df000017 	ldw	fp,0(sp)
   16c6c:	dec00104 	addi	sp,sp,4
   16c70:	f800283a 	ret

00016c74 <alt_up_character_lcd_open_dev>:

alt_up_character_lcd_dev* alt_up_character_lcd_open_dev(const char* name)
{
   16c74:	defffc04 	addi	sp,sp,-16
   16c78:	dfc00315 	stw	ra,12(sp)
   16c7c:	df000215 	stw	fp,8(sp)
   16c80:	df000204 	addi	fp,sp,8
   16c84:	e13fff15 	stw	r4,-4(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_character_lcd_dev *dev = (alt_up_character_lcd_dev*)alt_find_dev(name, &alt_dev_list);
   16c88:	e13fff17 	ldw	r4,-4(fp)
   16c8c:	014000b4 	movhi	r5,2
   16c90:	296ec104 	addi	r5,r5,-17660
   16c94:	00184600 	call	18460 <alt_find_dev>
   16c98:	e0bffe15 	stw	r2,-8(fp)

  return dev;
   16c9c:	e0bffe17 	ldw	r2,-8(fp)
}
   16ca0:	e037883a 	mov	sp,fp
   16ca4:	dfc00117 	ldw	ra,4(sp)
   16ca8:	df000017 	ldw	fp,0(sp)
   16cac:	dec00204 	addi	sp,sp,8
   16cb0:	f800283a 	ret

00016cb4 <alt_up_character_lcd_write>:

void alt_up_character_lcd_write(alt_up_character_lcd_dev *dev, const char *ptr, unsigned int len)
{
   16cb4:	defffb04 	addi	sp,sp,-20
   16cb8:	df000415 	stw	fp,16(sp)
   16cbc:	df000404 	addi	fp,sp,16
   16cc0:	e13ffd15 	stw	r4,-12(fp)
   16cc4:	e17ffe15 	stw	r5,-8(fp)
   16cc8:	e1bfff15 	stw	r6,-4(fp)
	unsigned int i;
	for (i = 0; i < len; i++)
   16ccc:	e03ffc15 	stw	zero,-16(fp)
   16cd0:	00000f06 	br	16d10 <alt_up_character_lcd_write+0x5c>
	{
		IOWR_ALT_UP_CHARACTER_LCD_DATA(dev->base, *(ptr+i));
   16cd4:	e0bffd17 	ldw	r2,-12(fp)
   16cd8:	10800a17 	ldw	r2,40(r2)
   16cdc:	10800044 	addi	r2,r2,1
   16ce0:	1009883a 	mov	r4,r2
   16ce4:	e0fffe17 	ldw	r3,-8(fp)
   16ce8:	e0bffc17 	ldw	r2,-16(fp)
   16cec:	1885883a 	add	r2,r3,r2
   16cf0:	10800003 	ldbu	r2,0(r2)
   16cf4:	10803fcc 	andi	r2,r2,255
   16cf8:	1080201c 	xori	r2,r2,128
   16cfc:	10bfe004 	addi	r2,r2,-128
   16d00:	20800025 	stbio	r2,0(r4)
}

void alt_up_character_lcd_write(alt_up_character_lcd_dev *dev, const char *ptr, unsigned int len)
{
	unsigned int i;
	for (i = 0; i < len; i++)
   16d04:	e0bffc17 	ldw	r2,-16(fp)
   16d08:	10800044 	addi	r2,r2,1
   16d0c:	e0bffc15 	stw	r2,-16(fp)
   16d10:	e0fffc17 	ldw	r3,-16(fp)
   16d14:	e0bfff17 	ldw	r2,-4(fp)
   16d18:	18bfee36 	bltu	r3,r2,16cd4 <__alt_mem_Flash_flash_data+0xf4016cd4>
	{
		IOWR_ALT_UP_CHARACTER_LCD_DATA(dev->base, *(ptr+i));
	}
}
   16d1c:	e037883a 	mov	sp,fp
   16d20:	df000017 	ldw	fp,0(sp)
   16d24:	dec00104 	addi	sp,sp,4
   16d28:	f800283a 	ret

00016d2c <alt_up_character_lcd_string>:

void alt_up_character_lcd_string(alt_up_character_lcd_dev *dev, const char *ptr)
{
   16d2c:	defffd04 	addi	sp,sp,-12
   16d30:	df000215 	stw	fp,8(sp)
   16d34:	df000204 	addi	fp,sp,8
   16d38:	e13ffe15 	stw	r4,-8(fp)
   16d3c:	e17fff15 	stw	r5,-4(fp)
	while ( *ptr )
   16d40:	00000d06 	br	16d78 <alt_up_character_lcd_string+0x4c>
	{
		IOWR_ALT_UP_CHARACTER_LCD_DATA(dev->base, *(ptr));
   16d44:	e0bffe17 	ldw	r2,-8(fp)
   16d48:	10800a17 	ldw	r2,40(r2)
   16d4c:	10800044 	addi	r2,r2,1
   16d50:	1007883a 	mov	r3,r2
   16d54:	e0bfff17 	ldw	r2,-4(fp)
   16d58:	10800003 	ldbu	r2,0(r2)
   16d5c:	10803fcc 	andi	r2,r2,255
   16d60:	1080201c 	xori	r2,r2,128
   16d64:	10bfe004 	addi	r2,r2,-128
   16d68:	18800025 	stbio	r2,0(r3)
		++ptr;
   16d6c:	e0bfff17 	ldw	r2,-4(fp)
   16d70:	10800044 	addi	r2,r2,1
   16d74:	e0bfff15 	stw	r2,-4(fp)
	}
}

void alt_up_character_lcd_string(alt_up_character_lcd_dev *dev, const char *ptr)
{
	while ( *ptr )
   16d78:	e0bfff17 	ldw	r2,-4(fp)
   16d7c:	10800003 	ldbu	r2,0(r2)
   16d80:	10803fcc 	andi	r2,r2,255
   16d84:	1080201c 	xori	r2,r2,128
   16d88:	10bfe004 	addi	r2,r2,-128
   16d8c:	103fed1e 	bne	r2,zero,16d44 <__alt_mem_Flash_flash_data+0xf4016d44>
	{
		IOWR_ALT_UP_CHARACTER_LCD_DATA(dev->base, *(ptr));
		++ptr;
	}
}
   16d90:	e037883a 	mov	sp,fp
   16d94:	df000017 	ldw	fp,0(sp)
   16d98:	dec00104 	addi	sp,sp,4
   16d9c:	f800283a 	ret

00016da0 <alt_up_character_lcd_write_fd>:

// this function isn't used, and is included for future upgrades
int alt_up_character_lcd_write_fd(alt_fd *fd, const char *ptr, int len)
{
   16da0:	defffb04 	addi	sp,sp,-20
   16da4:	dfc00415 	stw	ra,16(sp)
   16da8:	df000315 	stw	fp,12(sp)
   16dac:	df000304 	addi	fp,sp,12
   16db0:	e13ffd15 	stw	r4,-12(fp)
   16db4:	e17ffe15 	stw	r5,-8(fp)
   16db8:	e1bfff15 	stw	r6,-4(fp)
	alt_up_character_lcd_write( (alt_up_character_lcd_dev *) fd->dev, ptr, (unsigned int) len);
   16dbc:	e0bffd17 	ldw	r2,-12(fp)
   16dc0:	10c00017 	ldw	r3,0(r2)
   16dc4:	e0bfff17 	ldw	r2,-4(fp)
   16dc8:	1809883a 	mov	r4,r3
   16dcc:	e17ffe17 	ldw	r5,-8(fp)
   16dd0:	100d883a 	mov	r6,r2
   16dd4:	0016cb40 	call	16cb4 <alt_up_character_lcd_write>
	return 0;
   16dd8:	0005883a 	mov	r2,zero
}
   16ddc:	e037883a 	mov	sp,fp
   16de0:	dfc00117 	ldw	ra,4(sp)
   16de4:	df000017 	ldw	fp,0(sp)
   16de8:	dec00204 	addi	sp,sp,8
   16dec:	f800283a 	ret

00016df0 <alt_up_character_lcd_set_cursor_pos>:

int alt_up_character_lcd_set_cursor_pos(alt_up_character_lcd_dev *lcd, unsigned x_pos, 
	 unsigned y_pos)
{
   16df0:	defffa04 	addi	sp,sp,-24
   16df4:	dfc00515 	stw	ra,20(sp)
   16df8:	df000415 	stw	fp,16(sp)
   16dfc:	df000404 	addi	fp,sp,16
   16e00:	e13ffd15 	stw	r4,-12(fp)
   16e04:	e17ffe15 	stw	r5,-8(fp)
   16e08:	e1bfff15 	stw	r6,-4(fp)
	//boundary check
	if (x_pos > 39 || y_pos > 1 )
   16e0c:	e0bffe17 	ldw	r2,-8(fp)
   16e10:	10800a28 	cmpgeui	r2,r2,40
   16e14:	1000031e 	bne	r2,zero,16e24 <alt_up_character_lcd_set_cursor_pos+0x34>
   16e18:	e0bfff17 	ldw	r2,-4(fp)
   16e1c:	108000b0 	cmpltui	r2,r2,2
   16e20:	1000021e 	bne	r2,zero,16e2c <alt_up_character_lcd_set_cursor_pos+0x3c>
		// invalid argument
		return -1;
   16e24:	00bfffc4 	movi	r2,-1
   16e28:	00000906 	br	16e50 <alt_up_character_lcd_set_cursor_pos+0x60>
	// calculate address
	unsigned char addr = get_DDRAM_addr(x_pos, y_pos);
   16e2c:	e13ffe17 	ldw	r4,-8(fp)
   16e30:	e17fff17 	ldw	r5,-4(fp)
   16e34:	0016b900 	call	16b90 <get_DDRAM_addr>
   16e38:	e0bffc05 	stb	r2,-16(fp)
	// set the cursor
	alt_up_character_lcd_send_cmd(lcd, addr);
   16e3c:	e0bffc03 	ldbu	r2,-16(fp)
   16e40:	e13ffd17 	ldw	r4,-12(fp)
   16e44:	100b883a 	mov	r5,r2
   16e48:	0016c040 	call	16c04 <alt_up_character_lcd_send_cmd>
	return 0;
   16e4c:	0005883a 	mov	r2,zero
}
   16e50:	e037883a 	mov	sp,fp
   16e54:	dfc00117 	ldw	ra,4(sp)
   16e58:	df000017 	ldw	fp,0(sp)
   16e5c:	dec00204 	addi	sp,sp,8
   16e60:	f800283a 	ret

00016e64 <alt_up_character_lcd_shift_cursor>:

void alt_up_character_lcd_shift_cursor(alt_up_character_lcd_dev *lcd, int x_right_shift_offset)
{
   16e64:	defffb04 	addi	sp,sp,-20
   16e68:	dfc00415 	stw	ra,16(sp)
   16e6c:	df000315 	stw	fp,12(sp)
   16e70:	df000304 	addi	fp,sp,12
   16e74:	e13ffe15 	stw	r4,-8(fp)
   16e78:	e17fff15 	stw	r5,-4(fp)
	if (x_right_shift_offset == 0) 
   16e7c:	e0bfff17 	ldw	r2,-4(fp)
   16e80:	1000011e 	bne	r2,zero,16e88 <alt_up_character_lcd_shift_cursor+0x24>
		// don't ask me to do nothing 
		return;
   16e84:	00001406 	br	16ed8 <alt_up_character_lcd_shift_cursor+0x74>

	// see shift right or left
	unsigned char shift_cmd = (x_right_shift_offset > 0) ? 
   16e88:	e0bfff17 	ldw	r2,-4(fp)
   16e8c:	0080020e 	bge	zero,r2,16e98 <alt_up_character_lcd_shift_cursor+0x34>
   16e90:	00800504 	movi	r2,20
   16e94:	00000106 	br	16e9c <alt_up_character_lcd_shift_cursor+0x38>
   16e98:	00800404 	movi	r2,16
   16e9c:	e0bffd45 	stb	r2,-11(fp)
		ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_LEFT;
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
   16ea0:	e0bfff17 	ldw	r2,-4(fp)
   16ea4:	1000010e 	bge	r2,zero,16eac <alt_up_character_lcd_shift_cursor+0x48>
   16ea8:	0085c83a 	sub	r2,zero,r2
   16eac:	e0bffd05 	stb	r2,-12(fp)
		-x_right_shift_offset;
	// do the shift
	while (num_offset-- > 0)
   16eb0:	00000406 	br	16ec4 <alt_up_character_lcd_shift_cursor+0x60>
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
   16eb4:	e0bffd43 	ldbu	r2,-11(fp)
   16eb8:	e13ffe17 	ldw	r4,-8(fp)
   16ebc:	100b883a 	mov	r5,r2
   16ec0:	0016c040 	call	16c04 <alt_up_character_lcd_send_cmd>
		ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_LEFT;
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
		-x_right_shift_offset;
	// do the shift
	while (num_offset-- > 0)
   16ec4:	e0bffd03 	ldbu	r2,-12(fp)
   16ec8:	10ffffc4 	addi	r3,r2,-1
   16ecc:	e0fffd05 	stb	r3,-12(fp)
   16ed0:	10803fcc 	andi	r2,r2,255
   16ed4:	103ff71e 	bne	r2,zero,16eb4 <__alt_mem_Flash_flash_data+0xf4016eb4>
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
}
   16ed8:	e037883a 	mov	sp,fp
   16edc:	dfc00117 	ldw	ra,4(sp)
   16ee0:	df000017 	ldw	fp,0(sp)
   16ee4:	dec00204 	addi	sp,sp,8
   16ee8:	f800283a 	ret

00016eec <alt_up_character_lcd_shift_display>:

void alt_up_character_lcd_shift_display(alt_up_character_lcd_dev *lcd, int x_right_shift_offset)
{
   16eec:	defffb04 	addi	sp,sp,-20
   16ef0:	dfc00415 	stw	ra,16(sp)
   16ef4:	df000315 	stw	fp,12(sp)
   16ef8:	df000304 	addi	fp,sp,12
   16efc:	e13ffe15 	stw	r4,-8(fp)
   16f00:	e17fff15 	stw	r5,-4(fp)
	if (x_right_shift_offset == 0) 
   16f04:	e0bfff17 	ldw	r2,-4(fp)
   16f08:	1000011e 	bne	r2,zero,16f10 <alt_up_character_lcd_shift_display+0x24>
		// don't ask me to do nothing 
		return;
   16f0c:	00001406 	br	16f60 <alt_up_character_lcd_shift_display+0x74>

	// see shift right or left
	unsigned char shift_cmd = (x_right_shift_offset > 0) ? 
   16f10:	e0bfff17 	ldw	r2,-4(fp)
   16f14:	0080020e 	bge	zero,r2,16f20 <alt_up_character_lcd_shift_display+0x34>
   16f18:	00800704 	movi	r2,28
   16f1c:	00000106 	br	16f24 <alt_up_character_lcd_shift_display+0x38>
   16f20:	00800604 	movi	r2,24
   16f24:	e0bffd45 	stb	r2,-11(fp)
		ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_LEFT;
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
   16f28:	e0bfff17 	ldw	r2,-4(fp)
   16f2c:	1000010e 	bge	r2,zero,16f34 <alt_up_character_lcd_shift_display+0x48>
   16f30:	0085c83a 	sub	r2,zero,r2
   16f34:	e0bffd05 	stb	r2,-12(fp)
		-x_right_shift_offset;
	// do the shift
	while (num_offset-- > 0)
   16f38:	00000406 	br	16f4c <alt_up_character_lcd_shift_display+0x60>
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
   16f3c:	e0bffd43 	ldbu	r2,-11(fp)
   16f40:	e13ffe17 	ldw	r4,-8(fp)
   16f44:	100b883a 	mov	r5,r2
   16f48:	0016c040 	call	16c04 <alt_up_character_lcd_send_cmd>
		ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_LEFT;
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
		-x_right_shift_offset;
	// do the shift
	while (num_offset-- > 0)
   16f4c:	e0bffd03 	ldbu	r2,-12(fp)
   16f50:	10ffffc4 	addi	r3,r2,-1
   16f54:	e0fffd05 	stb	r3,-12(fp)
   16f58:	10803fcc 	andi	r2,r2,255
   16f5c:	103ff71e 	bne	r2,zero,16f3c <__alt_mem_Flash_flash_data+0xf4016f3c>
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
}
   16f60:	e037883a 	mov	sp,fp
   16f64:	dfc00117 	ldw	ra,4(sp)
   16f68:	df000017 	ldw	fp,0(sp)
   16f6c:	dec00204 	addi	sp,sp,8
   16f70:	f800283a 	ret

00016f74 <alt_up_character_lcd_erase_pos>:

int alt_up_character_lcd_erase_pos(alt_up_character_lcd_dev *lcd, unsigned x_pos, unsigned y_pos)
{
   16f74:	defffa04 	addi	sp,sp,-24
   16f78:	dfc00515 	stw	ra,20(sp)
   16f7c:	df000415 	stw	fp,16(sp)
   16f80:	df000404 	addi	fp,sp,16
   16f84:	e13ffd15 	stw	r4,-12(fp)
   16f88:	e17ffe15 	stw	r5,-8(fp)
   16f8c:	e1bfff15 	stw	r6,-4(fp)
	// boundary check
	if (x_pos > 39 || y_pos > 1 )
   16f90:	e0bffe17 	ldw	r2,-8(fp)
   16f94:	10800a28 	cmpgeui	r2,r2,40
   16f98:	1000031e 	bne	r2,zero,16fa8 <alt_up_character_lcd_erase_pos+0x34>
   16f9c:	e0bfff17 	ldw	r2,-4(fp)
   16fa0:	108000b0 	cmpltui	r2,r2,2
   16fa4:	1000021e 	bne	r2,zero,16fb0 <alt_up_character_lcd_erase_pos+0x3c>
		return -1;
   16fa8:	00bfffc4 	movi	r2,-1
   16fac:	00000f06 	br	16fec <alt_up_character_lcd_erase_pos+0x78>

	// get address
	unsigned char addr = get_DDRAM_addr(x_pos, y_pos);
   16fb0:	e13ffe17 	ldw	r4,-8(fp)
   16fb4:	e17fff17 	ldw	r5,-4(fp)
   16fb8:	0016b900 	call	16b90 <get_DDRAM_addr>
   16fbc:	e0bffc05 	stb	r2,-16(fp)
	// set cursor to dest point
	alt_up_character_lcd_send_cmd(lcd, addr);
   16fc0:	e0bffc03 	ldbu	r2,-16(fp)
   16fc4:	e13ffd17 	ldw	r4,-12(fp)
   16fc8:	100b883a 	mov	r5,r2
   16fcc:	0016c040 	call	16c04 <alt_up_character_lcd_send_cmd>
	//send an empty char as erase (refer to the Character Generator ROM part of the Datasheet)
	IOWR_ALT_UP_CHARACTER_LCD_DATA(lcd->base, (0x00000002) );
   16fd0:	e0bffd17 	ldw	r2,-12(fp)
   16fd4:	10800a17 	ldw	r2,40(r2)
   16fd8:	10800044 	addi	r2,r2,1
   16fdc:	1007883a 	mov	r3,r2
   16fe0:	00800084 	movi	r2,2
   16fe4:	18800025 	stbio	r2,0(r3)
	return 0;
   16fe8:	0005883a 	mov	r2,zero
}
   16fec:	e037883a 	mov	sp,fp
   16ff0:	dfc00117 	ldw	ra,4(sp)
   16ff4:	df000017 	ldw	fp,0(sp)
   16ff8:	dec00204 	addi	sp,sp,8
   16ffc:	f800283a 	ret

00017000 <alt_up_character_lcd_cursor_off>:

void alt_up_character_lcd_cursor_off(alt_up_character_lcd_dev *lcd)
{
   17000:	defffd04 	addi	sp,sp,-12
   17004:	dfc00215 	stw	ra,8(sp)
   17008:	df000115 	stw	fp,4(sp)
   1700c:	df000104 	addi	fp,sp,4
   17010:	e13fff15 	stw	r4,-4(fp)
	alt_up_character_lcd_send_cmd(lcd, ALT_UP_CHARACTER_LCD_COMM_CURSOR_OFF);
   17014:	e13fff17 	ldw	r4,-4(fp)
   17018:	01400304 	movi	r5,12
   1701c:	0016c040 	call	16c04 <alt_up_character_lcd_send_cmd>
}
   17020:	e037883a 	mov	sp,fp
   17024:	dfc00117 	ldw	ra,4(sp)
   17028:	df000017 	ldw	fp,0(sp)
   1702c:	dec00204 	addi	sp,sp,8
   17030:	f800283a 	ret

00017034 <alt_up_character_lcd_cursor_blink_on>:

void alt_up_character_lcd_cursor_blink_on(alt_up_character_lcd_dev *lcd)
{
   17034:	defffd04 	addi	sp,sp,-12
   17038:	dfc00215 	stw	ra,8(sp)
   1703c:	df000115 	stw	fp,4(sp)
   17040:	df000104 	addi	fp,sp,4
   17044:	e13fff15 	stw	r4,-4(fp)
	alt_up_character_lcd_send_cmd(lcd, ALT_UP_CHARACTER_LCD_COMM_CURSOR_BLINK_ON);
   17048:	e13fff17 	ldw	r4,-4(fp)
   1704c:	014003c4 	movi	r5,15
   17050:	0016c040 	call	16c04 <alt_up_character_lcd_send_cmd>
}
   17054:	e037883a 	mov	sp,fp
   17058:	dfc00117 	ldw	ra,4(sp)
   1705c:	df000017 	ldw	fp,0(sp)
   17060:	dec00204 	addi	sp,sp,8
   17064:	f800283a 	ret

00017068 <alt_up_irda_enable_read_interrupt>:
#include "altera_up_avalon_irda.h"
#include "altera_up_avalon_irda_regs.h"


void alt_up_irda_enable_read_interrupt(alt_up_irda_dev *irda)
{
   17068:	defffd04 	addi	sp,sp,-12
   1706c:	df000215 	stw	fp,8(sp)
   17070:	df000204 	addi	fp,sp,8
   17074:	e13fff15 	stw	r4,-4(fp)
	alt_u32 ctrl_reg;
	ctrl_reg = IORD_ALT_UP_IRDA_CONTROL(irda->base); 
   17078:	e0bfff17 	ldw	r2,-4(fp)
   1707c:	10800a17 	ldw	r2,40(r2)
   17080:	10800104 	addi	r2,r2,4
   17084:	10800037 	ldwio	r2,0(r2)
   17088:	e0bffe15 	stw	r2,-8(fp)
	// set RE to 1 while maintaining other bits the same
	ctrl_reg |= ALT_UP_IRDA_CONTROL_RE_MSK;
   1708c:	e0bffe17 	ldw	r2,-8(fp)
   17090:	10800054 	ori	r2,r2,1
   17094:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_IRDA_CONTROL(irda->base, ctrl_reg);
   17098:	e0bfff17 	ldw	r2,-4(fp)
   1709c:	10800a17 	ldw	r2,40(r2)
   170a0:	10800104 	addi	r2,r2,4
   170a4:	1007883a 	mov	r3,r2
   170a8:	e0bffe17 	ldw	r2,-8(fp)
   170ac:	18800035 	stwio	r2,0(r3)
}
   170b0:	e037883a 	mov	sp,fp
   170b4:	df000017 	ldw	fp,0(sp)
   170b8:	dec00104 	addi	sp,sp,4
   170bc:	f800283a 	ret

000170c0 <alt_up_irda_disable_read_interrupt>:

void alt_up_irda_disable_read_interrupt(alt_up_irda_dev *irda)
{
   170c0:	defffd04 	addi	sp,sp,-12
   170c4:	df000215 	stw	fp,8(sp)
   170c8:	df000204 	addi	fp,sp,8
   170cc:	e13fff15 	stw	r4,-4(fp)
	alt_u32 ctrl_reg;
	ctrl_reg = IORD_ALT_UP_IRDA_CONTROL(irda->base); 
   170d0:	e0bfff17 	ldw	r2,-4(fp)
   170d4:	10800a17 	ldw	r2,40(r2)
   170d8:	10800104 	addi	r2,r2,4
   170dc:	10800037 	ldwio	r2,0(r2)
   170e0:	e0bffe15 	stw	r2,-8(fp)
	// set RE to 0 while maintaining other bits the same
	ctrl_reg &= ~ALT_UP_IRDA_CONTROL_RE_MSK;
   170e4:	e0fffe17 	ldw	r3,-8(fp)
   170e8:	00bfff84 	movi	r2,-2
   170ec:	1884703a 	and	r2,r3,r2
   170f0:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_IRDA_CONTROL(irda->base, ctrl_reg);
   170f4:	e0bfff17 	ldw	r2,-4(fp)
   170f8:	10800a17 	ldw	r2,40(r2)
   170fc:	10800104 	addi	r2,r2,4
   17100:	1007883a 	mov	r3,r2
   17104:	e0bffe17 	ldw	r2,-8(fp)
   17108:	18800035 	stwio	r2,0(r3)
}
   1710c:	e037883a 	mov	sp,fp
   17110:	df000017 	ldw	fp,0(sp)
   17114:	dec00104 	addi	sp,sp,4
   17118:	f800283a 	ret

0001711c <alt_up_irda_get_used_space_in_read_FIFO>:

unsigned alt_up_irda_get_used_space_in_read_FIFO(alt_up_irda_dev *irda)
{
   1711c:	defffd04 	addi	sp,sp,-12
   17120:	df000215 	stw	fp,8(sp)
   17124:	df000204 	addi	fp,sp,8
   17128:	e13fff15 	stw	r4,-4(fp)
	alt_u16 ravail = 0;
   1712c:	e03ffe0d 	sth	zero,-8(fp)
	// we can only read the 16 bits for RAVAIL --- a read of DATA will discard the data
//	ravail = IORD_16DIRECT(IOADDR_ALT_UP_IRDA_DATA(irda->base), 2); 
//	return ravail;
	ravail = IORD_ALT_UP_IRDA_RAVAIL(irda->base); 
   17130:	e0bfff17 	ldw	r2,-4(fp)
   17134:	10800a17 	ldw	r2,40(r2)
   17138:	10800084 	addi	r2,r2,2
   1713c:	1080002b 	ldhuio	r2,0(r2)
   17140:	10bfffcc 	andi	r2,r2,65535
   17144:	e0bffe0d 	sth	r2,-8(fp)
	return (ravail & ALT_UP_IRDA_RAVAIL_MSK) >> ALT_UP_IRDA_RAVAIL_OFST;
   17148:	e0bffe0b 	ldhu	r2,-8(fp)
}
   1714c:	e037883a 	mov	sp,fp
   17150:	df000017 	ldw	fp,0(sp)
   17154:	dec00104 	addi	sp,sp,4
   17158:	f800283a 	ret

0001715c <alt_up_irda_get_available_space_in_write_FIFO>:

unsigned alt_up_irda_get_available_space_in_write_FIFO(alt_up_irda_dev *irda)
{
   1715c:	defffd04 	addi	sp,sp,-12
   17160:	df000215 	stw	fp,8(sp)
   17164:	df000204 	addi	fp,sp,8
   17168:	e13fff15 	stw	r4,-4(fp)
	alt_u32 ctrl_reg;
	ctrl_reg = IORD_ALT_UP_IRDA_CONTROL(irda->base); 
   1716c:	e0bfff17 	ldw	r2,-4(fp)
   17170:	10800a17 	ldw	r2,40(r2)
   17174:	10800104 	addi	r2,r2,4
   17178:	10800037 	ldwio	r2,0(r2)
   1717c:	e0bffe15 	stw	r2,-8(fp)
	return (ctrl_reg & ALT_UP_IRDA_CONTROL_WSPACE_MSK) >> ALT_UP_IRDA_CONTROL_WSPACE_OFST;
   17180:	e0bffe17 	ldw	r2,-8(fp)
   17184:	1004d43a 	srli	r2,r2,16
}
   17188:	e037883a 	mov	sp,fp
   1718c:	df000017 	ldw	fp,0(sp)
   17190:	dec00104 	addi	sp,sp,4
   17194:	f800283a 	ret

00017198 <alt_up_irda_check_parity>:

int alt_up_irda_check_parity(alt_u32 data_reg)
{
   17198:	defffd04 	addi	sp,sp,-12
   1719c:	df000215 	stw	fp,8(sp)
   171a0:	df000204 	addi	fp,sp,8
   171a4:	e13fff15 	stw	r4,-4(fp)
	unsigned parity_error = (data_reg & ALT_UP_IRDA_DATA_PE_MSK) >> ALT_UP_IRDA_DATA_PE_OFST;
   171a8:	e0bfff17 	ldw	r2,-4(fp)
   171ac:	1080800c 	andi	r2,r2,512
   171b0:	1004d27a 	srli	r2,r2,9
   171b4:	e0bffe15 	stw	r2,-8(fp)
	return (parity_error ? -1 : 0);
   171b8:	e0bffe17 	ldw	r2,-8(fp)
   171bc:	10000226 	beq	r2,zero,171c8 <alt_up_irda_check_parity+0x30>
   171c0:	00bfffc4 	movi	r2,-1
   171c4:	00000106 	br	171cc <alt_up_irda_check_parity+0x34>
   171c8:	0005883a 	mov	r2,zero
}
   171cc:	e037883a 	mov	sp,fp
   171d0:	df000017 	ldw	fp,0(sp)
   171d4:	dec00104 	addi	sp,sp,4
   171d8:	f800283a 	ret

000171dc <alt_up_irda_write_data>:

int alt_up_irda_write_data(alt_up_irda_dev *irda, alt_u8 data)
{
   171dc:	defffd04 	addi	sp,sp,-12
   171e0:	df000215 	stw	fp,8(sp)
   171e4:	df000204 	addi	fp,sp,8
   171e8:	e13ffe15 	stw	r4,-8(fp)
   171ec:	2805883a 	mov	r2,r5
   171f0:	e0bfff05 	stb	r2,-4(fp)
	data_reg = IORD_ALT_UP_IRDA_DATA(irda->base);
    */

	// we can write directly without thinking about other bit fields for this
	// case ONLY, because only DATA field of the data register is writable
	IOWR_ALT_UP_IRDA_DATA(irda->base, (data>>ALT_UP_IRDA_DATA_DATA_OFST) & ALT_UP_IRDA_DATA_DATA_MSK);
   171f4:	e0bffe17 	ldw	r2,-8(fp)
   171f8:	10800a17 	ldw	r2,40(r2)
   171fc:	1007883a 	mov	r3,r2
   17200:	e0bfff03 	ldbu	r2,-4(fp)
   17204:	18800035 	stwio	r2,0(r3)
	return 0;
   17208:	0005883a 	mov	r2,zero
}
   1720c:	e037883a 	mov	sp,fp
   17210:	df000017 	ldw	fp,0(sp)
   17214:	dec00104 	addi	sp,sp,4
   17218:	f800283a 	ret

0001721c <alt_up_irda_read_data>:

int alt_up_irda_read_data(alt_up_irda_dev *irda, alt_u8 *data, alt_u8 *parity_error)
{
   1721c:	defffa04 	addi	sp,sp,-24
   17220:	dfc00515 	stw	ra,20(sp)
   17224:	df000415 	stw	fp,16(sp)
   17228:	df000404 	addi	fp,sp,16
   1722c:	e13ffd15 	stw	r4,-12(fp)
   17230:	e17ffe15 	stw	r5,-8(fp)
   17234:	e1bfff15 	stw	r6,-4(fp)
	alt_u32 data_reg;
	data_reg = IORD_ALT_UP_IRDA_DATA(irda->base);
   17238:	e0bffd17 	ldw	r2,-12(fp)
   1723c:	10800a17 	ldw	r2,40(r2)
   17240:	10800037 	ldwio	r2,0(r2)
   17244:	e0bffc15 	stw	r2,-16(fp)
	*data = (data_reg & ALT_UP_IRDA_DATA_DATA_MSK) >> ALT_UP_IRDA_DATA_DATA_OFST;
   17248:	e0bffc17 	ldw	r2,-16(fp)
   1724c:	1007883a 	mov	r3,r2
   17250:	e0bffe17 	ldw	r2,-8(fp)
   17254:	10c00005 	stb	r3,0(r2)
	*parity_error = alt_up_irda_check_parity(data_reg);
   17258:	e13ffc17 	ldw	r4,-16(fp)
   1725c:	00171980 	call	17198 <alt_up_irda_check_parity>
   17260:	1007883a 	mov	r3,r2
   17264:	e0bfff17 	ldw	r2,-4(fp)
   17268:	10c00005 	stb	r3,0(r2)
	return (((data_reg & ALT_UP_IRDA_DATA_RVALID_MSK) >> ALT_UP_IRDA_DATA_RVALID_OFST) - 1);
   1726c:	e0bffc17 	ldw	r2,-16(fp)
   17270:	10a0000c 	andi	r2,r2,32768
   17274:	1004d3fa 	srli	r2,r2,15
   17278:	10bfffc4 	addi	r2,r2,-1
}
   1727c:	e037883a 	mov	sp,fp
   17280:	dfc00117 	ldw	ra,4(sp)
   17284:	df000017 	ldw	fp,0(sp)
   17288:	dec00204 	addi	sp,sp,8
   1728c:	f800283a 	ret

00017290 <alt_up_irda_read_fd>:

int alt_up_irda_read_fd (alt_fd* fd, char* ptr, int len)
{
   17290:	defff804 	addi	sp,sp,-32
   17294:	dfc00715 	stw	ra,28(sp)
   17298:	df000615 	stw	fp,24(sp)
   1729c:	df000604 	addi	fp,sp,24
   172a0:	e13ffd15 	stw	r4,-12(fp)
   172a4:	e17ffe15 	stw	r5,-8(fp)
   172a8:	e1bfff15 	stw	r6,-4(fp)
	alt_up_irda_dev *irda = (alt_up_irda_dev*)fd->dev;
   172ac:	e0bffd17 	ldw	r2,-12(fp)
   172b0:	10800017 	ldw	r2,0(r2)
   172b4:	e0bffb15 	stw	r2,-20(fp)
	int count = 0;
   172b8:	e03ffa15 	stw	zero,-24(fp)
	alt_u8 parity_error;
	while(len--)
   172bc:	00000e06 	br	172f8 <alt_up_irda_read_fd+0x68>
	{
		if (alt_up_irda_read_data(irda, (alt_u8 *)ptr++, &parity_error)==0)
   172c0:	e0bffe17 	ldw	r2,-8(fp)
   172c4:	10c00044 	addi	r3,r2,1
   172c8:	e0fffe15 	stw	r3,-8(fp)
   172cc:	e0fffc04 	addi	r3,fp,-16
   172d0:	e13ffb17 	ldw	r4,-20(fp)
   172d4:	100b883a 	mov	r5,r2
   172d8:	180d883a 	mov	r6,r3
   172dc:	001721c0 	call	1721c <alt_up_irda_read_data>
   172e0:	1000041e 	bne	r2,zero,172f4 <alt_up_irda_read_fd+0x64>
			count++;
   172e4:	e0bffa17 	ldw	r2,-24(fp)
   172e8:	10800044 	addi	r2,r2,1
   172ec:	e0bffa15 	stw	r2,-24(fp)
   172f0:	00000106 	br	172f8 <alt_up_irda_read_fd+0x68>
		else
			break;
   172f4:	00000406 	br	17308 <alt_up_irda_read_fd+0x78>
int alt_up_irda_read_fd (alt_fd* fd, char* ptr, int len)
{
	alt_up_irda_dev *irda = (alt_up_irda_dev*)fd->dev;
	int count = 0;
	alt_u8 parity_error;
	while(len--)
   172f8:	e0bfff17 	ldw	r2,-4(fp)
   172fc:	10ffffc4 	addi	r3,r2,-1
   17300:	e0ffff15 	stw	r3,-4(fp)
   17304:	103fee1e 	bne	r2,zero,172c0 <__alt_mem_Flash_flash_data+0xf40172c0>
		if (alt_up_irda_read_data(irda, (alt_u8 *)ptr++, &parity_error)==0)
			count++;
		else
			break;
	}
	return count;
   17308:	e0bffa17 	ldw	r2,-24(fp)
}
   1730c:	e037883a 	mov	sp,fp
   17310:	dfc00117 	ldw	ra,4(sp)
   17314:	df000017 	ldw	fp,0(sp)
   17318:	dec00204 	addi	sp,sp,8
   1731c:	f800283a 	ret

00017320 <alt_up_irda_write_fd>:

int alt_up_irda_write_fd (alt_fd* fd, const char* ptr, int len)
{
   17320:	defff904 	addi	sp,sp,-28
   17324:	dfc00615 	stw	ra,24(sp)
   17328:	df000515 	stw	fp,20(sp)
   1732c:	df000504 	addi	fp,sp,20
   17330:	e13ffd15 	stw	r4,-12(fp)
   17334:	e17ffe15 	stw	r5,-8(fp)
   17338:	e1bfff15 	stw	r6,-4(fp)
	alt_up_irda_dev *irda = (alt_up_irda_dev*)fd->dev;
   1733c:	e0bffd17 	ldw	r2,-12(fp)
   17340:	10800017 	ldw	r2,0(r2)
   17344:	e0bffc15 	stw	r2,-16(fp)
	int count = 0;
   17348:	e03ffb15 	stw	zero,-20(fp)
	while(len--)
   1734c:	00000e06 	br	17388 <alt_up_irda_write_fd+0x68>
	{
		if (alt_up_irda_write_data(irda, (alt_u8) *ptr++)==0)
   17350:	e0bffe17 	ldw	r2,-8(fp)
   17354:	10c00044 	addi	r3,r2,1
   17358:	e0fffe15 	stw	r3,-8(fp)
   1735c:	10800003 	ldbu	r2,0(r2)
   17360:	10803fcc 	andi	r2,r2,255
   17364:	e13ffc17 	ldw	r4,-16(fp)
   17368:	100b883a 	mov	r5,r2
   1736c:	00171dc0 	call	171dc <alt_up_irda_write_data>
   17370:	1000041e 	bne	r2,zero,17384 <alt_up_irda_write_fd+0x64>
			count++;
   17374:	e0bffb17 	ldw	r2,-20(fp)
   17378:	10800044 	addi	r2,r2,1
   1737c:	e0bffb15 	stw	r2,-20(fp)
   17380:	00000106 	br	17388 <alt_up_irda_write_fd+0x68>
		else
			break;
   17384:	00000406 	br	17398 <alt_up_irda_write_fd+0x78>

int alt_up_irda_write_fd (alt_fd* fd, const char* ptr, int len)
{
	alt_up_irda_dev *irda = (alt_up_irda_dev*)fd->dev;
	int count = 0;
	while(len--)
   17388:	e0bfff17 	ldw	r2,-4(fp)
   1738c:	10ffffc4 	addi	r3,r2,-1
   17390:	e0ffff15 	stw	r3,-4(fp)
   17394:	103fee1e 	bne	r2,zero,17350 <__alt_mem_Flash_flash_data+0xf4017350>
		if (alt_up_irda_write_data(irda, (alt_u8) *ptr++)==0)
			count++;
		else
			break;
	}
	return count;
   17398:	e0bffb17 	ldw	r2,-20(fp)
}
   1739c:	e037883a 	mov	sp,fp
   173a0:	dfc00117 	ldw	ra,4(sp)
   173a4:	df000017 	ldw	fp,0(sp)
   173a8:	dec00204 	addi	sp,sp,8
   173ac:	f800283a 	ret

000173b0 <alt_up_irda_open_dev>:

alt_up_irda_dev* alt_up_irda_open_dev(const char* name)
{
   173b0:	defffc04 	addi	sp,sp,-16
   173b4:	dfc00315 	stw	ra,12(sp)
   173b8:	df000215 	stw	fp,8(sp)
   173bc:	df000204 	addi	fp,sp,8
   173c0:	e13fff15 	stw	r4,-4(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_irda_dev *dev = (alt_up_irda_dev*)alt_find_dev(name, &alt_dev_list);
   173c4:	e13fff17 	ldw	r4,-4(fp)
   173c8:	014000b4 	movhi	r5,2
   173cc:	296ec104 	addi	r5,r5,-17660
   173d0:	00184600 	call	18460 <alt_find_dev>
   173d4:	e0bffe15 	stw	r2,-8(fp)

  return dev;
   173d8:	e0bffe17 	ldw	r2,-8(fp)
}
   173dc:	e037883a 	mov	sp,fp
   173e0:	dfc00117 	ldw	ra,4(sp)
   173e4:	df000017 	ldw	fp,0(sp)
   173e8:	dec00204 	addi	sp,sp,8
   173ec:	f800283a 	ret

000173f0 <alt_up_parallel_port_open_dev>:

#include "altera_up_avalon_parallel_port.h"
#include "altera_up_avalon_parallel_port_regs.h"

alt_up_parallel_port_dev* alt_up_parallel_port_open_dev(const char* name)
{
   173f0:	defffc04 	addi	sp,sp,-16
   173f4:	dfc00315 	stw	ra,12(sp)
   173f8:	df000215 	stw	fp,8(sp)
   173fc:	df000204 	addi	fp,sp,8
   17400:	e13fff15 	stw	r4,-4(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_parallel_port_dev *dev = (alt_up_parallel_port_dev*)alt_find_dev(name, &alt_dev_list);
   17404:	e13fff17 	ldw	r4,-4(fp)
   17408:	014000b4 	movhi	r5,2
   1740c:	296ec104 	addi	r5,r5,-17660
   17410:	00184600 	call	18460 <alt_find_dev>
   17414:	e0bffe15 	stw	r2,-8(fp)

  return dev;
   17418:	e0bffe17 	ldw	r2,-8(fp)
}
   1741c:	e037883a 	mov	sp,fp
   17420:	dfc00117 	ldw	ra,4(sp)
   17424:	df000017 	ldw	fp,0(sp)
   17428:	dec00204 	addi	sp,sp,8
   1742c:	f800283a 	ret

00017430 <read_RI_bit>:


//////////////////////////////////////////////////////////////////////////////////////////////
// Internal Functions
alt_u8 read_RI_bit(alt_u32 ctrl_reg)
{
   17430:	defffd04 	addi	sp,sp,-12
   17434:	df000215 	stw	fp,8(sp)
   17438:	df000204 	addi	fp,sp,8
   1743c:	e13fff15 	stw	r4,-4(fp)
	alt_u8 ri = (alt_u8) ((ctrl_reg & ALT_UP_PS2_PORT_CTRL_REG_RI_MSK) >> ALT_UP_PS2_PORT_CTRL_REG_RI_OFST);
   17440:	e0bfff17 	ldw	r2,-4(fp)
   17444:	1080400c 	andi	r2,r2,256
   17448:	1004d23a 	srli	r2,r2,8
   1744c:	e0bffe05 	stb	r2,-8(fp)
	return ri;
   17450:	e0bffe03 	ldbu	r2,-8(fp)
}
   17454:	e037883a 	mov	sp,fp
   17458:	df000017 	ldw	fp,0(sp)
   1745c:	dec00104 	addi	sp,sp,4
   17460:	f800283a 	ret

00017464 <read_RE_bit>:

alt_u8 read_RE_bit(alt_u32 ctrl_reg)
{
   17464:	defffd04 	addi	sp,sp,-12
   17468:	df000215 	stw	fp,8(sp)
   1746c:	df000204 	addi	fp,sp,8
   17470:	e13fff15 	stw	r4,-4(fp)
	alt_u8 re = (alt_u8) ((ctrl_reg & ALT_UP_PS2_PORT_CTRL_REG_RE_MSK) >> ALT_UP_PS2_PORT_CTRL_REG_RE_OFST);
   17474:	e0bfff17 	ldw	r2,-4(fp)
   17478:	1080004c 	andi	r2,r2,1
   1747c:	e0bffe05 	stb	r2,-8(fp)
	return re;
   17480:	e0bffe03 	ldbu	r2,-8(fp)
}
   17484:	e037883a 	mov	sp,fp
   17488:	df000017 	ldw	fp,0(sp)
   1748c:	dec00104 	addi	sp,sp,4
   17490:	f800283a 	ret

00017494 <read_CE_bit>:

alt_u8 read_CE_bit(alt_u32 ctrl_reg)
{
   17494:	defffd04 	addi	sp,sp,-12
   17498:	df000215 	stw	fp,8(sp)
   1749c:	df000204 	addi	fp,sp,8
   174a0:	e13fff15 	stw	r4,-4(fp)
	alt_u8 re = (alt_u8) ((ctrl_reg & ALT_UP_PS2_PORT_CTRL_REG_CE_MSK) >> ALT_UP_PS2_PORT_CTRL_REG_CE_OFST);
   174a4:	e0bfff17 	ldw	r2,-4(fp)
   174a8:	1081000c 	andi	r2,r2,1024
   174ac:	1004d2ba 	srli	r2,r2,10
   174b0:	e0bffe05 	stb	r2,-8(fp)
	return re;
   174b4:	e0bffe03 	ldbu	r2,-8(fp)
}
   174b8:	e037883a 	mov	sp,fp
   174bc:	df000017 	ldw	fp,0(sp)
   174c0:	dec00104 	addi	sp,sp,4
   174c4:	f800283a 	ret

000174c8 <read_num_bytes_available>:

alt_u16 read_num_bytes_available(alt_u32 data_reg)
{
   174c8:	defffd04 	addi	sp,sp,-12
   174cc:	df000215 	stw	fp,8(sp)
   174d0:	df000204 	addi	fp,sp,8
   174d4:	e13fff15 	stw	r4,-4(fp)
	alt_u16 ravail = (alt_u16)((data_reg & ALT_UP_PS2_PORT_DATA_REG_RAVAIL_MSK ) >> ALT_UP_PS2_PORT_DATA_REG_RAVAIL_OFST);
   174d8:	e0bfff17 	ldw	r2,-4(fp)
   174dc:	1004d43a 	srli	r2,r2,16
   174e0:	e0bffe0d 	sth	r2,-8(fp)
	return ravail;
   174e4:	e0bffe0b 	ldhu	r2,-8(fp)
}
   174e8:	e037883a 	mov	sp,fp
   174ec:	df000017 	ldw	fp,0(sp)
   174f0:	dec00104 	addi	sp,sp,4
   174f4:	f800283a 	ret

000174f8 <read_data_valid>:

alt_u8 read_data_valid(alt_u32 data_reg)
{
   174f8:	defffd04 	addi	sp,sp,-12
   174fc:	df000215 	stw	fp,8(sp)
   17500:	df000204 	addi	fp,sp,8
   17504:	e13fff15 	stw	r4,-4(fp)
	alt_u8 rvalid = (alt_u8)((data_reg & ALT_UP_PS2_PORT_DATA_REG_RVALID_MSK ) >> ALT_UP_PS2_PORT_DATA_REG_RVALID_OFST);
   17508:	e0bfff17 	ldw	r2,-4(fp)
   1750c:	10a0000c 	andi	r2,r2,32768
   17510:	1004d3fa 	srli	r2,r2,15
   17514:	e0bffe05 	stb	r2,-8(fp)
	return rvalid;
   17518:	e0bffe03 	ldbu	r2,-8(fp)
}
   1751c:	e037883a 	mov	sp,fp
   17520:	df000017 	ldw	fp,0(sp)
   17524:	dec00104 	addi	sp,sp,4
   17528:	f800283a 	ret

0001752c <read_data_byte>:

alt_u8 read_data_byte(alt_u32 data_reg)
{
   1752c:	defffd04 	addi	sp,sp,-12
   17530:	df000215 	stw	fp,8(sp)
   17534:	df000204 	addi	fp,sp,8
   17538:	e13fff15 	stw	r4,-4(fp)
	alt_u8 data = (alt_u8) ( (data_reg & ALT_UP_PS2_PORT_DATA_REG_DATA_MSK) >> ALT_UP_PS2_PORT_DATA_REG_DATA_OFST) ;
   1753c:	e0bfff17 	ldw	r2,-4(fp)
   17540:	e0bffe05 	stb	r2,-8(fp)
	return data;
   17544:	e0bffe03 	ldbu	r2,-8(fp)
}
   17548:	e037883a 	mov	sp,fp
   1754c:	df000017 	ldw	fp,0(sp)
   17550:	dec00104 	addi	sp,sp,4
   17554:	f800283a 	ret

00017558 <alt_up_ps2_init>:

//////////////////////////////////////////////////////////////////////////////////////////////
// HAL Functions
void alt_up_ps2_init(alt_up_ps2_dev *ps2)
{
   17558:	defffb04 	addi	sp,sp,-20
   1755c:	dfc00415 	stw	ra,16(sp)
   17560:	df000315 	stw	fp,12(sp)
   17564:	df000304 	addi	fp,sp,12
   17568:	e13fff15 	stw	r4,-4(fp)
	// initialize the device
	unsigned char byte;
	//send the reset request, wait for ACK
	int status = alt_up_ps2_write_data_byte_with_ack(ps2, 0xff);
   1756c:	e13fff17 	ldw	r4,-4(fp)
   17570:	01403fc4 	movi	r5,255
   17574:	00177b40 	call	177b4 <alt_up_ps2_write_data_byte_with_ack>
   17578:	e0bffd15 	stw	r2,-12(fp)
	if (status == 0)
   1757c:	e0bffd17 	ldw	r2,-12(fp)
   17580:	1000211e 	bne	r2,zero,17608 <alt_up_ps2_init+0xb0>
	{
		// reset succeed, now try to get the BAT result, AA means passed
		status = alt_up_ps2_read_data_byte_timeout(ps2, &byte);
   17584:	e0bffe04 	addi	r2,fp,-8
   17588:	e13fff17 	ldw	r4,-4(fp)
   1758c:	100b883a 	mov	r5,r2
   17590:	00178180 	call	17818 <alt_up_ps2_read_data_byte_timeout>
   17594:	e0bffd15 	stw	r2,-12(fp)
		if (status == 0 && byte == 0xAA)
   17598:	e0bffd17 	ldw	r2,-12(fp)
   1759c:	10001a1e 	bne	r2,zero,17608 <alt_up_ps2_init+0xb0>
   175a0:	e0bffe03 	ldbu	r2,-8(fp)
   175a4:	10803fcc 	andi	r2,r2,255
   175a8:	10802a98 	cmpnei	r2,r2,170
   175ac:	1000161e 	bne	r2,zero,17608 <alt_up_ps2_init+0xb0>
		{
			//get the 2nd byte
			status = alt_up_ps2_read_data_byte_timeout(ps2, &byte);
   175b0:	e0bffe04 	addi	r2,fp,-8
   175b4:	e13fff17 	ldw	r4,-4(fp)
   175b8:	100b883a 	mov	r5,r2
   175bc:	00178180 	call	17818 <alt_up_ps2_read_data_byte_timeout>
   175c0:	e0bffd15 	stw	r2,-12(fp)
			if (status == -ETIMEDOUT)
   175c4:	e0bffd17 	ldw	r2,-12(fp)
   175c8:	10bfe318 	cmpnei	r2,r2,-116
   175cc:	1000041e 	bne	r2,zero,175e0 <alt_up_ps2_init+0x88>
			{
				//for keyboard, only 2 bytes are sent(ACK, PASS/FAIL), so timeout
				ps2->device_type = PS2_KEYBOARD;
   175d0:	e0bfff17 	ldw	r2,-4(fp)
   175d4:	00c00044 	movi	r3,1
   175d8:	10c00d15 	stw	r3,52(r2)
   175dc:	00000a06 	br	17608 <alt_up_ps2_init+0xb0>
			}
			else if (status == 0 && byte == 0x00)
   175e0:	e0bffd17 	ldw	r2,-12(fp)
   175e4:	1000081e 	bne	r2,zero,17608 <alt_up_ps2_init+0xb0>
   175e8:	e0bffe03 	ldbu	r2,-8(fp)
   175ec:	10803fcc 	andi	r2,r2,255
   175f0:	1000051e 	bne	r2,zero,17608 <alt_up_ps2_init+0xb0>
			{
				//for mouse, it will sent out 0x00 after sending out ACK and PASS/FAIL.
				ps2->device_type = PS2_MOUSE;
   175f4:	e0bfff17 	ldw	r2,-4(fp)
   175f8:	10000d15 	stw	zero,52(r2)
				(void) alt_up_ps2_write_data_byte (ps2, 0xf4); // enable data from mouse
   175fc:	e13fff17 	ldw	r4,-4(fp)
   17600:	01403d04 	movi	r5,244
   17604:	00176d00 	call	176d0 <alt_up_ps2_write_data_byte>
			}
		}
	}
}
   17608:	e037883a 	mov	sp,fp
   1760c:	dfc00117 	ldw	ra,4(sp)
   17610:	df000017 	ldw	fp,0(sp)
   17614:	dec00204 	addi	sp,sp,8
   17618:	f800283a 	ret

0001761c <alt_up_ps2_enable_read_interrupt>:

void alt_up_ps2_enable_read_interrupt(alt_up_ps2_dev *ps2)
{
   1761c:	defffd04 	addi	sp,sp,-12
   17620:	df000215 	stw	fp,8(sp)
   17624:	df000204 	addi	fp,sp,8
   17628:	e13fff15 	stw	r4,-4(fp)
	unsigned int ctrl_reg;
	ctrl_reg = IORD_ALT_UP_PS2_PORT_CTRL_REG(ps2->base); 
   1762c:	e0bfff17 	ldw	r2,-4(fp)
   17630:	10800a17 	ldw	r2,40(r2)
   17634:	10800104 	addi	r2,r2,4
   17638:	10800037 	ldwio	r2,0(r2)
   1763c:	e0bffe15 	stw	r2,-8(fp)
	// set RE to 1 while maintaining other bits the same
	ctrl_reg |= ALT_UP_PS2_PORT_CTRL_REG_RE_MSK;
   17640:	e0bffe17 	ldw	r2,-8(fp)
   17644:	10800054 	ori	r2,r2,1
   17648:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_PS2_PORT_CTRL_REG(ps2->base, ctrl_reg);
   1764c:	e0bfff17 	ldw	r2,-4(fp)
   17650:	10800a17 	ldw	r2,40(r2)
   17654:	10800104 	addi	r2,r2,4
   17658:	1007883a 	mov	r3,r2
   1765c:	e0bffe17 	ldw	r2,-8(fp)
   17660:	18800035 	stwio	r2,0(r3)
}
   17664:	e037883a 	mov	sp,fp
   17668:	df000017 	ldw	fp,0(sp)
   1766c:	dec00104 	addi	sp,sp,4
   17670:	f800283a 	ret

00017674 <alt_up_ps2_disable_read_interrupt>:

void alt_up_ps2_disable_read_interrupt(alt_up_ps2_dev *ps2)
{
   17674:	defffd04 	addi	sp,sp,-12
   17678:	df000215 	stw	fp,8(sp)
   1767c:	df000204 	addi	fp,sp,8
   17680:	e13fff15 	stw	r4,-4(fp)
	unsigned int ctrl_reg;
	ctrl_reg = IORD_ALT_UP_PS2_PORT_CTRL_REG(ps2->base); 
   17684:	e0bfff17 	ldw	r2,-4(fp)
   17688:	10800a17 	ldw	r2,40(r2)
   1768c:	10800104 	addi	r2,r2,4
   17690:	10800037 	ldwio	r2,0(r2)
   17694:	e0bffe15 	stw	r2,-8(fp)
	// set RE to 0 while maintaining other bits the same
	ctrl_reg &= ~ALT_UP_PS2_PORT_CTRL_REG_RE_MSK;
   17698:	e0fffe17 	ldw	r3,-8(fp)
   1769c:	00bfff84 	movi	r2,-2
   176a0:	1884703a 	and	r2,r3,r2
   176a4:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_PS2_PORT_CTRL_REG(ps2->base, ctrl_reg);
   176a8:	e0bfff17 	ldw	r2,-4(fp)
   176ac:	10800a17 	ldw	r2,40(r2)
   176b0:	10800104 	addi	r2,r2,4
   176b4:	1007883a 	mov	r3,r2
   176b8:	e0bffe17 	ldw	r2,-8(fp)
   176bc:	18800035 	stwio	r2,0(r3)
}
   176c0:	e037883a 	mov	sp,fp
   176c4:	df000017 	ldw	fp,0(sp)
   176c8:	dec00104 	addi	sp,sp,4
   176cc:	f800283a 	ret

000176d0 <alt_up_ps2_write_data_byte>:

int alt_up_ps2_write_data_byte(alt_up_ps2_dev *ps2, unsigned char byte)
{
   176d0:	defffb04 	addi	sp,sp,-20
   176d4:	dfc00415 	stw	ra,16(sp)
   176d8:	df000315 	stw	fp,12(sp)
   176dc:	df000304 	addi	fp,sp,12
   176e0:	e13ffe15 	stw	r4,-8(fp)
   176e4:	2805883a 	mov	r2,r5
   176e8:	e0bfff05 	stb	r2,-4(fp)
	//note: data are only located at the lower 8 bits
	//note: the software send command to the PS2 peripheral through the data
	//		register rather than the control register
	IOWR_ALT_UP_PS2_PORT_DATA(ps2->base, byte);
   176ec:	e0bffe17 	ldw	r2,-8(fp)
   176f0:	10800a17 	ldw	r2,40(r2)
   176f4:	1007883a 	mov	r3,r2
   176f8:	e0bfff03 	ldbu	r2,-4(fp)
   176fc:	18800025 	stbio	r2,0(r3)
	alt_u32 ctrl_reg = IORD_ALT_UP_PS2_PORT_CTRL_REG(ps2->base);
   17700:	e0bffe17 	ldw	r2,-8(fp)
   17704:	10800a17 	ldw	r2,40(r2)
   17708:	10800104 	addi	r2,r2,4
   1770c:	10800037 	ldwio	r2,0(r2)
   17710:	e0bffd15 	stw	r2,-12(fp)
	if (read_CE_bit(ctrl_reg))
   17714:	e13ffd17 	ldw	r4,-12(fp)
   17718:	00174940 	call	17494 <read_CE_bit>
   1771c:	10803fcc 	andi	r2,r2,255
   17720:	10000226 	beq	r2,zero,1772c <alt_up_ps2_write_data_byte+0x5c>
	{
		//CE bit is set --> error occurs on sending commands
		return -EIO;
   17724:	00bffec4 	movi	r2,-5
   17728:	00000106 	br	17730 <alt_up_ps2_write_data_byte+0x60>
	}
	return 0;
   1772c:	0005883a 	mov	r2,zero
}
   17730:	e037883a 	mov	sp,fp
   17734:	dfc00117 	ldw	ra,4(sp)
   17738:	df000017 	ldw	fp,0(sp)
   1773c:	dec00204 	addi	sp,sp,8
   17740:	f800283a 	ret

00017744 <alt_up_ps2_wait_for_ack>:

int alt_up_ps2_wait_for_ack(alt_up_ps2_dev *ps2)
{
   17744:	defffc04 	addi	sp,sp,-16
   17748:	dfc00315 	stw	ra,12(sp)
   1774c:	df000215 	stw	fp,8(sp)
   17750:	df000204 	addi	fp,sp,8
   17754:	e13fff15 	stw	r4,-4(fp)
	unsigned char data = 0;
   17758:	e03ffe45 	stb	zero,-7(fp)
	unsigned char status = 0;
   1775c:	e03ffe05 	stb	zero,-8(fp)
	do
	{
		status = alt_up_ps2_read_data_byte_timeout(ps2, &data); 
   17760:	e0bffe44 	addi	r2,fp,-7
   17764:	e13fff17 	ldw	r4,-4(fp)
   17768:	100b883a 	mov	r5,r2
   1776c:	00178180 	call	17818 <alt_up_ps2_read_data_byte_timeout>
   17770:	e0bffe05 	stb	r2,-8(fp)
		if ( status == 0)
   17774:	e0bffe03 	ldbu	r2,-8(fp)
   17778:	1000061e 	bne	r2,zero,17794 <alt_up_ps2_wait_for_ack+0x50>
		{
			if (data == PS2_ACK)
   1777c:	e0bffe43 	ldbu	r2,-7(fp)
   17780:	10803fcc 	andi	r2,r2,255
   17784:	10803e98 	cmpnei	r2,r2,250
   17788:	1000041e 	bne	r2,zero,1779c <alt_up_ps2_wait_for_ack+0x58>
				return 0;
   1778c:	0005883a 	mov	r2,zero
   17790:	00000306 	br	177a0 <alt_up_ps2_wait_for_ack+0x5c>
		}
		else 
		{
			return status;
   17794:	e0bffe03 	ldbu	r2,-8(fp)
   17798:	00000106 	br	177a0 <alt_up_ps2_wait_for_ack+0x5c>
		}
	} while(1);
   1779c:	003ff006 	br	17760 <__alt_mem_Flash_flash_data+0xf4017760>
	return -ETIMEDOUT;
}
   177a0:	e037883a 	mov	sp,fp
   177a4:	dfc00117 	ldw	ra,4(sp)
   177a8:	df000017 	ldw	fp,0(sp)
   177ac:	dec00204 	addi	sp,sp,8
   177b0:	f800283a 	ret

000177b4 <alt_up_ps2_write_data_byte_with_ack>:

int alt_up_ps2_write_data_byte_with_ack(alt_up_ps2_dev *ps2, unsigned char byte)
{
   177b4:	defffa04 	addi	sp,sp,-24
   177b8:	dfc00515 	stw	ra,20(sp)
   177bc:	df000415 	stw	fp,16(sp)
   177c0:	df000404 	addi	fp,sp,16
   177c4:	e13ffe15 	stw	r4,-8(fp)
   177c8:	2805883a 	mov	r2,r5
   177cc:	e0bfff05 	stb	r2,-4(fp)
	int send_status = alt_up_ps2_write_data_byte(ps2, byte);
   177d0:	e0bfff03 	ldbu	r2,-4(fp)
   177d4:	e13ffe17 	ldw	r4,-8(fp)
   177d8:	100b883a 	mov	r5,r2
   177dc:	00176d00 	call	176d0 <alt_up_ps2_write_data_byte>
   177e0:	e0bffc15 	stw	r2,-16(fp)
	if ( send_status != 0)
   177e4:	e0bffc17 	ldw	r2,-16(fp)
   177e8:	10000226 	beq	r2,zero,177f4 <alt_up_ps2_write_data_byte_with_ack+0x40>
		// return on sending error
		return send_status;
   177ec:	e0bffc17 	ldw	r2,-16(fp)
   177f0:	00000406 	br	17804 <alt_up_ps2_write_data_byte_with_ack+0x50>

	int ack_status = alt_up_ps2_wait_for_ack(ps2);
   177f4:	e13ffe17 	ldw	r4,-8(fp)
   177f8:	00177440 	call	17744 <alt_up_ps2_wait_for_ack>
   177fc:	e0bffd15 	stw	r2,-12(fp)
	return ack_status;
   17800:	e0bffd17 	ldw	r2,-12(fp)
}
   17804:	e037883a 	mov	sp,fp
   17808:	dfc00117 	ldw	ra,4(sp)
   1780c:	df000017 	ldw	fp,0(sp)
   17810:	dec00204 	addi	sp,sp,8
   17814:	f800283a 	ret

00017818 <alt_up_ps2_read_data_byte_timeout>:

int alt_up_ps2_read_data_byte_timeout(alt_up_ps2_dev *ps2, unsigned char *byte)
{
   17818:	defffa04 	addi	sp,sp,-24
   1781c:	dfc00515 	stw	ra,20(sp)
   17820:	df000415 	stw	fp,16(sp)
   17824:	df000404 	addi	fp,sp,16
   17828:	e13ffe15 	stw	r4,-8(fp)
   1782c:	e17fff15 	stw	r5,-4(fp)
	unsigned int data_reg = 0; 
   17830:	e03ffd15 	stw	zero,-12(fp)
	unsigned int count = 0;
   17834:	e03ffc15 	stw	zero,-16(fp)
	do {
		count++;
   17838:	e0bffc17 	ldw	r2,-16(fp)
   1783c:	10800044 	addi	r2,r2,1
   17840:	e0bffc15 	stw	r2,-16(fp)
		data_reg = IORD_ALT_UP_PS2_PORT_DATA_REG(ps2->base);
   17844:	e0bffe17 	ldw	r2,-8(fp)
   17848:	10800a17 	ldw	r2,40(r2)
   1784c:	10800037 	ldwio	r2,0(r2)
   17850:	e0bffd15 	stw	r2,-12(fp)
		if (read_data_valid(data_reg))
   17854:	e13ffd17 	ldw	r4,-12(fp)
   17858:	00174f80 	call	174f8 <read_data_valid>
   1785c:	10803fcc 	andi	r2,r2,255
   17860:	10000726 	beq	r2,zero,17880 <alt_up_ps2_read_data_byte_timeout+0x68>
		{
			*byte = read_data_byte(data_reg);
   17864:	e13ffd17 	ldw	r4,-12(fp)
   17868:	001752c0 	call	1752c <read_data_byte>
   1786c:	1007883a 	mov	r3,r2
   17870:	e0bfff17 	ldw	r2,-4(fp)
   17874:	10c00005 	stb	r3,0(r2)
			return 0;
   17878:	0005883a 	mov	r2,zero
   1787c:	00000a06 	br	178a8 <alt_up_ps2_read_data_byte_timeout+0x90>
		}
		//timeout = 0 means to disable the timeout
		if ( ps2->timeout != 0 && count > ps2->timeout)
   17880:	e0bffe17 	ldw	r2,-8(fp)
   17884:	10800c17 	ldw	r2,48(r2)
   17888:	10000626 	beq	r2,zero,178a4 <alt_up_ps2_read_data_byte_timeout+0x8c>
   1788c:	e0bffe17 	ldw	r2,-8(fp)
   17890:	10c00c17 	ldw	r3,48(r2)
   17894:	e0bffc17 	ldw	r2,-16(fp)
   17898:	1880022e 	bgeu	r3,r2,178a4 <alt_up_ps2_read_data_byte_timeout+0x8c>
		{
			return -ETIMEDOUT;
   1789c:	00bfe304 	movi	r2,-116
   178a0:	00000106 	br	178a8 <alt_up_ps2_read_data_byte_timeout+0x90>
		}
	} while (1);
   178a4:	003fe406 	br	17838 <__alt_mem_Flash_flash_data+0xf4017838>
}
   178a8:	e037883a 	mov	sp,fp
   178ac:	dfc00117 	ldw	ra,4(sp)
   178b0:	df000017 	ldw	fp,0(sp)
   178b4:	dec00204 	addi	sp,sp,8
   178b8:	f800283a 	ret

000178bc <alt_up_ps2_read_data_byte>:

int alt_up_ps2_read_data_byte(alt_up_ps2_dev *ps2, unsigned char *byte)
{
   178bc:	defffb04 	addi	sp,sp,-20
   178c0:	dfc00415 	stw	ra,16(sp)
   178c4:	df000315 	stw	fp,12(sp)
   178c8:	df000304 	addi	fp,sp,12
   178cc:	e13ffe15 	stw	r4,-8(fp)
   178d0:	e17fff15 	stw	r5,-4(fp)
	unsigned int data_reg = 0; 
   178d4:	e03ffd15 	stw	zero,-12(fp)
	data_reg = IORD_ALT_UP_PS2_PORT_DATA_REG(ps2->base);
   178d8:	e0bffe17 	ldw	r2,-8(fp)
   178dc:	10800a17 	ldw	r2,40(r2)
   178e0:	10800037 	ldwio	r2,0(r2)
   178e4:	e0bffd15 	stw	r2,-12(fp)
	if (read_data_valid(data_reg))
   178e8:	e13ffd17 	ldw	r4,-12(fp)
   178ec:	00174f80 	call	174f8 <read_data_valid>
   178f0:	10803fcc 	andi	r2,r2,255
   178f4:	10000726 	beq	r2,zero,17914 <alt_up_ps2_read_data_byte+0x58>
	{
		*byte = read_data_byte(data_reg);
   178f8:	e13ffd17 	ldw	r4,-12(fp)
   178fc:	001752c0 	call	1752c <read_data_byte>
   17900:	1007883a 	mov	r3,r2
   17904:	e0bfff17 	ldw	r2,-4(fp)
   17908:	10c00005 	stb	r3,0(r2)
		return 0;
   1790c:	0005883a 	mov	r2,zero
   17910:	00000106 	br	17918 <alt_up_ps2_read_data_byte+0x5c>
	}
	return -1;
   17914:	00bfffc4 	movi	r2,-1
}
   17918:	e037883a 	mov	sp,fp
   1791c:	dfc00117 	ldw	ra,4(sp)
   17920:	df000017 	ldw	fp,0(sp)
   17924:	dec00204 	addi	sp,sp,8
   17928:	f800283a 	ret

0001792c <alt_up_ps2_clear_fifo>:

void alt_up_ps2_clear_fifo(alt_up_ps2_dev *ps2)
{
   1792c:	defffb04 	addi	sp,sp,-20
   17930:	dfc00415 	stw	ra,16(sp)
   17934:	df000315 	stw	fp,12(sp)
   17938:	df000304 	addi	fp,sp,12
   1793c:	e13fff15 	stw	r4,-4(fp)
	// The DATA byte of the data register will be automatically cleared after a read
	// So we simply keep reading it until there are no available bytes
	alt_u16 num = 0;
   17940:	e03ffd0d 	sth	zero,-12(fp)
	unsigned int data_reg = 0;
   17944:	e03ffe15 	stw	zero,-8(fp)
	do
	{
		// read the data register (the DATA byte is cleared)
		data_reg = IORD_ALT_UP_PS2_PORT_DATA_REG(ps2->base);
   17948:	e0bfff17 	ldw	r2,-4(fp)
   1794c:	10800a17 	ldw	r2,40(r2)
   17950:	10800037 	ldwio	r2,0(r2)
   17954:	e0bffe15 	stw	r2,-8(fp)
		// get the number of available bytes from the RAVAIL part of data register
		num = read_num_bytes_available(data_reg);
   17958:	e13ffe17 	ldw	r4,-8(fp)
   1795c:	00174c80 	call	174c8 <read_num_bytes_available>
   17960:	e0bffd0d 	sth	r2,-12(fp)
	} while (num > 0);
   17964:	e0bffd0b 	ldhu	r2,-12(fp)
   17968:	103ff71e 	bne	r2,zero,17948 <__alt_mem_Flash_flash_data+0xf4017948>
}
   1796c:	e037883a 	mov	sp,fp
   17970:	dfc00117 	ldw	ra,4(sp)
   17974:	df000017 	ldw	fp,0(sp)
   17978:	dec00204 	addi	sp,sp,8
   1797c:	f800283a 	ret

00017980 <alt_up_ps2_read_fd>:

//////////////////////////////////////////////////////////////
// FD Functions
int alt_up_ps2_read_fd (alt_fd* fd, char* ptr, int len)
{
   17980:	defff804 	addi	sp,sp,-32
   17984:	dfc00715 	stw	ra,28(sp)
   17988:	df000615 	stw	fp,24(sp)
   1798c:	df000604 	addi	fp,sp,24
   17990:	e13ffd15 	stw	r4,-12(fp)
   17994:	e17ffe15 	stw	r5,-8(fp)
   17998:	e1bfff15 	stw	r6,-4(fp)
	alt_up_ps2_dev *ps2 = (alt_up_ps2_dev*) fd->dev;
   1799c:	e0bffd17 	ldw	r2,-12(fp)
   179a0:	10800017 	ldw	r2,0(r2)
   179a4:	e0bffa15 	stw	r2,-24(fp)
	int status = 0;
   179a8:	e03ffb15 	stw	zero,-20(fp)
	int count = 0;
   179ac:	e03ffc15 	stw	zero,-16(fp)
	while (count < len);
   179b0:	e0fffc17 	ldw	r3,-16(fp)
   179b4:	e0bfff17 	ldw	r2,-4(fp)
   179b8:	18bffd16 	blt	r3,r2,179b0 <__alt_mem_Flash_flash_data+0xf40179b0>
	{
		status = alt_up_ps2_read_data_byte_timeout(ps2, (unsigned char *)ptr++);
   179bc:	e0bffe17 	ldw	r2,-8(fp)
   179c0:	10c00044 	addi	r3,r2,1
   179c4:	e0fffe15 	stw	r3,-8(fp)
   179c8:	e13ffa17 	ldw	r4,-24(fp)
   179cc:	100b883a 	mov	r5,r2
   179d0:	00178180 	call	17818 <alt_up_ps2_read_data_byte_timeout>
   179d4:	e0bffb15 	stw	r2,-20(fp)
		if (status!=0)
   179d8:	e0bffb17 	ldw	r2,-20(fp)
   179dc:	10000226 	beq	r2,zero,179e8 <alt_up_ps2_read_fd+0x68>
			return count;
   179e0:	e0bffc17 	ldw	r2,-16(fp)
   179e4:	00000406 	br	179f8 <alt_up_ps2_read_fd+0x78>
		count++;
   179e8:	e0bffc17 	ldw	r2,-16(fp)
   179ec:	10800044 	addi	r2,r2,1
   179f0:	e0bffc15 	stw	r2,-16(fp)
	} 
	return count;
   179f4:	e0bffc17 	ldw	r2,-16(fp)
}
   179f8:	e037883a 	mov	sp,fp
   179fc:	dfc00117 	ldw	ra,4(sp)
   17a00:	df000017 	ldw	fp,0(sp)
   17a04:	dec00204 	addi	sp,sp,8
   17a08:	f800283a 	ret

00017a0c <alt_up_ps2_write_fd>:

int alt_up_ps2_write_fd (alt_fd* fd, const char* ptr, int len)
{
   17a0c:	defff804 	addi	sp,sp,-32
   17a10:	dfc00715 	stw	ra,28(sp)
   17a14:	df000615 	stw	fp,24(sp)
   17a18:	df000604 	addi	fp,sp,24
   17a1c:	e13ffd15 	stw	r4,-12(fp)
   17a20:	e17ffe15 	stw	r5,-8(fp)
   17a24:	e1bfff15 	stw	r6,-4(fp)
	alt_up_ps2_dev *ps2 = (alt_up_ps2_dev*) fd->dev;
   17a28:	e0bffd17 	ldw	r2,-12(fp)
   17a2c:	10800017 	ldw	r2,0(r2)
   17a30:	e0bffb15 	stw	r2,-20(fp)
	int status = 0;
   17a34:	e03ffc15 	stw	zero,-16(fp)
	int count = 0;
   17a38:	e03ffa15 	stw	zero,-24(fp)
	while (count < len)
   17a3c:	00001006 	br	17a80 <alt_up_ps2_write_fd+0x74>
	{
		status = alt_up_ps2_write_data_byte(ps2, *(ptr++) );
   17a40:	e0bffe17 	ldw	r2,-8(fp)
   17a44:	10c00044 	addi	r3,r2,1
   17a48:	e0fffe15 	stw	r3,-8(fp)
   17a4c:	10800003 	ldbu	r2,0(r2)
   17a50:	10803fcc 	andi	r2,r2,255
   17a54:	e13ffb17 	ldw	r4,-20(fp)
   17a58:	100b883a 	mov	r5,r2
   17a5c:	00176d00 	call	176d0 <alt_up_ps2_write_data_byte>
   17a60:	e0bffc15 	stw	r2,-16(fp)
		if (status!=0)
   17a64:	e0bffc17 	ldw	r2,-16(fp)
   17a68:	10000226 	beq	r2,zero,17a74 <alt_up_ps2_write_fd+0x68>
			return count;
   17a6c:	e0bffa17 	ldw	r2,-24(fp)
   17a70:	00000706 	br	17a90 <alt_up_ps2_write_fd+0x84>
		count++;
   17a74:	e0bffa17 	ldw	r2,-24(fp)
   17a78:	10800044 	addi	r2,r2,1
   17a7c:	e0bffa15 	stw	r2,-24(fp)
int alt_up_ps2_write_fd (alt_fd* fd, const char* ptr, int len)
{
	alt_up_ps2_dev *ps2 = (alt_up_ps2_dev*) fd->dev;
	int status = 0;
	int count = 0;
	while (count < len)
   17a80:	e0fffa17 	ldw	r3,-24(fp)
   17a84:	e0bfff17 	ldw	r2,-4(fp)
   17a88:	18bfed16 	blt	r3,r2,17a40 <__alt_mem_Flash_flash_data+0xf4017a40>
		status = alt_up_ps2_write_data_byte(ps2, *(ptr++) );
		if (status!=0)
			return count;
		count++;
	}
	return count;
   17a8c:	e0bffa17 	ldw	r2,-24(fp)
}
   17a90:	e037883a 	mov	sp,fp
   17a94:	dfc00117 	ldw	ra,4(sp)
   17a98:	df000017 	ldw	fp,0(sp)
   17a9c:	dec00204 	addi	sp,sp,8
   17aa0:	f800283a 	ret

00017aa4 <alt_up_ps2_open_dev>:

alt_up_ps2_dev* alt_up_ps2_open_dev(const char* name)
{
   17aa4:	defffc04 	addi	sp,sp,-16
   17aa8:	dfc00315 	stw	ra,12(sp)
   17aac:	df000215 	stw	fp,8(sp)
   17ab0:	df000204 	addi	fp,sp,8
   17ab4:	e13fff15 	stw	r4,-4(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_ps2_dev *dev = (alt_up_ps2_dev*)alt_find_dev(name, &alt_dev_list);
   17ab8:	e13fff17 	ldw	r4,-4(fp)
   17abc:	014000b4 	movhi	r5,2
   17ac0:	296ec104 	addi	r5,r5,-17660
   17ac4:	00184600 	call	18460 <alt_find_dev>
   17ac8:	e0bffe15 	stw	r2,-8(fp)

  return dev;
   17acc:	e0bffe17 	ldw	r2,-8(fp)
}
   17ad0:	e037883a 	mov	sp,fp
   17ad4:	dfc00117 	ldw	ra,4(sp)
   17ad8:	df000017 	ldw	fp,0(sp)
   17adc:	dec00204 	addi	sp,sp,8
   17ae0:	f800283a 	ret

00017ae4 <alt_up_rs232_enable_read_interrupt>:
#include "altera_up_avalon_rs232.h"
#include "altera_up_avalon_rs232_regs.h"


void alt_up_rs232_enable_read_interrupt(alt_up_rs232_dev *rs232)
{
   17ae4:	defffd04 	addi	sp,sp,-12
   17ae8:	df000215 	stw	fp,8(sp)
   17aec:	df000204 	addi	fp,sp,8
   17af0:	e13fff15 	stw	r4,-4(fp)
	alt_u32 ctrl_reg;
	ctrl_reg = IORD_ALT_UP_RS232_CONTROL(rs232->base); 
   17af4:	e0bfff17 	ldw	r2,-4(fp)
   17af8:	10800a17 	ldw	r2,40(r2)
   17afc:	10800104 	addi	r2,r2,4
   17b00:	10800037 	ldwio	r2,0(r2)
   17b04:	e0bffe15 	stw	r2,-8(fp)
	// set RE to 1 while maintaining other bits the same
	ctrl_reg |= ALT_UP_RS232_CONTROL_RE_MSK;
   17b08:	e0bffe17 	ldw	r2,-8(fp)
   17b0c:	10800054 	ori	r2,r2,1
   17b10:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_RS232_CONTROL(rs232->base, ctrl_reg);
   17b14:	e0bfff17 	ldw	r2,-4(fp)
   17b18:	10800a17 	ldw	r2,40(r2)
   17b1c:	10800104 	addi	r2,r2,4
   17b20:	1007883a 	mov	r3,r2
   17b24:	e0bffe17 	ldw	r2,-8(fp)
   17b28:	18800035 	stwio	r2,0(r3)
}
   17b2c:	e037883a 	mov	sp,fp
   17b30:	df000017 	ldw	fp,0(sp)
   17b34:	dec00104 	addi	sp,sp,4
   17b38:	f800283a 	ret

00017b3c <alt_up_rs232_disable_read_interrupt>:

void alt_up_rs232_disable_read_interrupt(alt_up_rs232_dev *rs232)
{
   17b3c:	defffd04 	addi	sp,sp,-12
   17b40:	df000215 	stw	fp,8(sp)
   17b44:	df000204 	addi	fp,sp,8
   17b48:	e13fff15 	stw	r4,-4(fp)
	alt_u32 ctrl_reg;
	ctrl_reg = IORD_ALT_UP_RS232_CONTROL(rs232->base); 
   17b4c:	e0bfff17 	ldw	r2,-4(fp)
   17b50:	10800a17 	ldw	r2,40(r2)
   17b54:	10800104 	addi	r2,r2,4
   17b58:	10800037 	ldwio	r2,0(r2)
   17b5c:	e0bffe15 	stw	r2,-8(fp)
	// set RE to 0 while maintaining other bits the same
	ctrl_reg &= ~ALT_UP_RS232_CONTROL_RE_MSK;
   17b60:	e0fffe17 	ldw	r3,-8(fp)
   17b64:	00bfff84 	movi	r2,-2
   17b68:	1884703a 	and	r2,r3,r2
   17b6c:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_RS232_CONTROL(rs232->base, ctrl_reg);
   17b70:	e0bfff17 	ldw	r2,-4(fp)
   17b74:	10800a17 	ldw	r2,40(r2)
   17b78:	10800104 	addi	r2,r2,4
   17b7c:	1007883a 	mov	r3,r2
   17b80:	e0bffe17 	ldw	r2,-8(fp)
   17b84:	18800035 	stwio	r2,0(r3)
}
   17b88:	e037883a 	mov	sp,fp
   17b8c:	df000017 	ldw	fp,0(sp)
   17b90:	dec00104 	addi	sp,sp,4
   17b94:	f800283a 	ret

00017b98 <alt_up_rs232_get_used_space_in_read_FIFO>:

unsigned alt_up_rs232_get_used_space_in_read_FIFO(alt_up_rs232_dev *rs232)
{
   17b98:	defffd04 	addi	sp,sp,-12
   17b9c:	df000215 	stw	fp,8(sp)
   17ba0:	df000204 	addi	fp,sp,8
   17ba4:	e13fff15 	stw	r4,-4(fp)
	alt_u16 ravail = 0;
   17ba8:	e03ffe0d 	sth	zero,-8(fp)
	// we can only read the 16 bits for RAVAIL --- a read of DATA will discard the data
//	ravail = IORD_16DIRECT(IOADDR_ALT_UP_RS232_DATA(rs232->base), 2); 
	ravail = IORD_ALT_UP_RS232_RAVAIL(rs232->base); 
   17bac:	e0bfff17 	ldw	r2,-4(fp)
   17bb0:	10800a17 	ldw	r2,40(r2)
   17bb4:	10800084 	addi	r2,r2,2
   17bb8:	1080002b 	ldhuio	r2,0(r2)
   17bbc:	10bfffcc 	andi	r2,r2,65535
   17bc0:	e0bffe0d 	sth	r2,-8(fp)
//	return ravail;
	return (ravail & ALT_UP_RS232_RAVAIL_MSK) >> ALT_UP_RS232_RAVAIL_OFST;
   17bc4:	e0bffe0b 	ldhu	r2,-8(fp)
}
   17bc8:	e037883a 	mov	sp,fp
   17bcc:	df000017 	ldw	fp,0(sp)
   17bd0:	dec00104 	addi	sp,sp,4
   17bd4:	f800283a 	ret

00017bd8 <alt_up_rs232_get_available_space_in_write_FIFO>:

unsigned alt_up_rs232_get_available_space_in_write_FIFO(alt_up_rs232_dev *rs232)
{
   17bd8:	defffd04 	addi	sp,sp,-12
   17bdc:	df000215 	stw	fp,8(sp)
   17be0:	df000204 	addi	fp,sp,8
   17be4:	e13fff15 	stw	r4,-4(fp)
	alt_u32 ctrl_reg;
	ctrl_reg = IORD_ALT_UP_RS232_CONTROL(rs232->base); 
   17be8:	e0bfff17 	ldw	r2,-4(fp)
   17bec:	10800a17 	ldw	r2,40(r2)
   17bf0:	10800104 	addi	r2,r2,4
   17bf4:	10800037 	ldwio	r2,0(r2)
   17bf8:	e0bffe15 	stw	r2,-8(fp)
	return (ctrl_reg & ALT_UP_RS232_CONTROL_WSPACE_MSK) >> ALT_UP_RS232_CONTROL_WSPACE_OFST;
   17bfc:	e0bffe17 	ldw	r2,-8(fp)
   17c00:	1004d43a 	srli	r2,r2,16
}
   17c04:	e037883a 	mov	sp,fp
   17c08:	df000017 	ldw	fp,0(sp)
   17c0c:	dec00104 	addi	sp,sp,4
   17c10:	f800283a 	ret

00017c14 <alt_up_rs232_check_parity>:

int alt_up_rs232_check_parity(alt_u32 data_reg)
{
   17c14:	defffd04 	addi	sp,sp,-12
   17c18:	df000215 	stw	fp,8(sp)
   17c1c:	df000204 	addi	fp,sp,8
   17c20:	e13fff15 	stw	r4,-4(fp)
	unsigned parity_error = (data_reg & ALT_UP_RS232_DATA_PE_MSK) >> ALT_UP_RS232_DATA_PE_OFST;
   17c24:	e0bfff17 	ldw	r2,-4(fp)
   17c28:	1080800c 	andi	r2,r2,512
   17c2c:	1004d27a 	srli	r2,r2,9
   17c30:	e0bffe15 	stw	r2,-8(fp)
	return (parity_error ? -1 : 0);
   17c34:	e0bffe17 	ldw	r2,-8(fp)
   17c38:	10000226 	beq	r2,zero,17c44 <alt_up_rs232_check_parity+0x30>
   17c3c:	00bfffc4 	movi	r2,-1
   17c40:	00000106 	br	17c48 <alt_up_rs232_check_parity+0x34>
   17c44:	0005883a 	mov	r2,zero
}
   17c48:	e037883a 	mov	sp,fp
   17c4c:	df000017 	ldw	fp,0(sp)
   17c50:	dec00104 	addi	sp,sp,4
   17c54:	f800283a 	ret

00017c58 <alt_up_rs232_write_data>:

int alt_up_rs232_write_data(alt_up_rs232_dev *rs232, alt_u8 data)
{
   17c58:	defffd04 	addi	sp,sp,-12
   17c5c:	df000215 	stw	fp,8(sp)
   17c60:	df000204 	addi	fp,sp,8
   17c64:	e13ffe15 	stw	r4,-8(fp)
   17c68:	2805883a 	mov	r2,r5
   17c6c:	e0bfff05 	stb	r2,-4(fp)
	/*alt_u32 data_reg;
	data_reg = IORD_ALT_UP_RS232_DATA(rs232->base);*/
    
	// we can write directly without thinking about other bit fields for this
	// case ONLY, because only DATA field of the data register is writable
	IOWR_ALT_UP_RS232_DATA(rs232->base, (data>>ALT_UP_RS232_DATA_DATA_OFST) & ALT_UP_RS232_DATA_DATA_MSK);
   17c70:	e0bffe17 	ldw	r2,-8(fp)
   17c74:	10800a17 	ldw	r2,40(r2)
   17c78:	1007883a 	mov	r3,r2
   17c7c:	e0bfff03 	ldbu	r2,-4(fp)
   17c80:	18800035 	stwio	r2,0(r3)
	return 0;
   17c84:	0005883a 	mov	r2,zero
}
   17c88:	e037883a 	mov	sp,fp
   17c8c:	df000017 	ldw	fp,0(sp)
   17c90:	dec00104 	addi	sp,sp,4
   17c94:	f800283a 	ret

00017c98 <alt_up_rs232_read_data>:

int alt_up_rs232_read_data(alt_up_rs232_dev *rs232, alt_u8 *data, alt_u8 *parity_error)
{
   17c98:	defffa04 	addi	sp,sp,-24
   17c9c:	dfc00515 	stw	ra,20(sp)
   17ca0:	df000415 	stw	fp,16(sp)
   17ca4:	df000404 	addi	fp,sp,16
   17ca8:	e13ffd15 	stw	r4,-12(fp)
   17cac:	e17ffe15 	stw	r5,-8(fp)
   17cb0:	e1bfff15 	stw	r6,-4(fp)
	alt_u32 data_reg;
	data_reg = IORD_ALT_UP_RS232_DATA(rs232->base);
   17cb4:	e0bffd17 	ldw	r2,-12(fp)
   17cb8:	10800a17 	ldw	r2,40(r2)
   17cbc:	10800037 	ldwio	r2,0(r2)
   17cc0:	e0bffc15 	stw	r2,-16(fp)
	*data = (data_reg & ALT_UP_RS232_DATA_DATA_MSK) >> ALT_UP_RS232_DATA_DATA_OFST;
   17cc4:	e0bffc17 	ldw	r2,-16(fp)
   17cc8:	1007883a 	mov	r3,r2
   17ccc:	e0bffe17 	ldw	r2,-8(fp)
   17cd0:	10c00005 	stb	r3,0(r2)
	*parity_error = alt_up_rs232_check_parity(data_reg);
   17cd4:	e13ffc17 	ldw	r4,-16(fp)
   17cd8:	0017c140 	call	17c14 <alt_up_rs232_check_parity>
   17cdc:	1007883a 	mov	r3,r2
   17ce0:	e0bfff17 	ldw	r2,-4(fp)
   17ce4:	10c00005 	stb	r3,0(r2)
	return (((data_reg & ALT_UP_RS232_DATA_RVALID_MSK) >> ALT_UP_RS232_DATA_RVALID_OFST) - 1);
   17ce8:	e0bffc17 	ldw	r2,-16(fp)
   17cec:	10a0000c 	andi	r2,r2,32768
   17cf0:	1004d3fa 	srli	r2,r2,15
   17cf4:	10bfffc4 	addi	r2,r2,-1
}
   17cf8:	e037883a 	mov	sp,fp
   17cfc:	dfc00117 	ldw	ra,4(sp)
   17d00:	df000017 	ldw	fp,0(sp)
   17d04:	dec00204 	addi	sp,sp,8
   17d08:	f800283a 	ret

00017d0c <alt_up_rs232_read_fd>:

int alt_up_rs232_read_fd (alt_fd* fd, char* ptr, int len)
{
   17d0c:	defff804 	addi	sp,sp,-32
   17d10:	dfc00715 	stw	ra,28(sp)
   17d14:	df000615 	stw	fp,24(sp)
   17d18:	df000604 	addi	fp,sp,24
   17d1c:	e13ffd15 	stw	r4,-12(fp)
   17d20:	e17ffe15 	stw	r5,-8(fp)
   17d24:	e1bfff15 	stw	r6,-4(fp)
	alt_up_rs232_dev *rs232 = (alt_up_rs232_dev*)fd->dev;
   17d28:	e0bffd17 	ldw	r2,-12(fp)
   17d2c:	10800017 	ldw	r2,0(r2)
   17d30:	e0bffb15 	stw	r2,-20(fp)
	int count = 0;
   17d34:	e03ffa15 	stw	zero,-24(fp)
	alt_u8 parity_error;
	while(len--)
   17d38:	00000e06 	br	17d74 <alt_up_rs232_read_fd+0x68>
	{
		if (alt_up_rs232_read_data(rs232, (alt_u8 *)ptr++, &parity_error)==0)
   17d3c:	e0bffe17 	ldw	r2,-8(fp)
   17d40:	10c00044 	addi	r3,r2,1
   17d44:	e0fffe15 	stw	r3,-8(fp)
   17d48:	e0fffc04 	addi	r3,fp,-16
   17d4c:	e13ffb17 	ldw	r4,-20(fp)
   17d50:	100b883a 	mov	r5,r2
   17d54:	180d883a 	mov	r6,r3
   17d58:	0017c980 	call	17c98 <alt_up_rs232_read_data>
   17d5c:	1000041e 	bne	r2,zero,17d70 <alt_up_rs232_read_fd+0x64>
			count++;
   17d60:	e0bffa17 	ldw	r2,-24(fp)
   17d64:	10800044 	addi	r2,r2,1
   17d68:	e0bffa15 	stw	r2,-24(fp)
   17d6c:	00000106 	br	17d74 <alt_up_rs232_read_fd+0x68>
		else
			break;
   17d70:	00000406 	br	17d84 <alt_up_rs232_read_fd+0x78>
int alt_up_rs232_read_fd (alt_fd* fd, char* ptr, int len)
{
	alt_up_rs232_dev *rs232 = (alt_up_rs232_dev*)fd->dev;
	int count = 0;
	alt_u8 parity_error;
	while(len--)
   17d74:	e0bfff17 	ldw	r2,-4(fp)
   17d78:	10ffffc4 	addi	r3,r2,-1
   17d7c:	e0ffff15 	stw	r3,-4(fp)
   17d80:	103fee1e 	bne	r2,zero,17d3c <__alt_mem_Flash_flash_data+0xf4017d3c>
		if (alt_up_rs232_read_data(rs232, (alt_u8 *)ptr++, &parity_error)==0)
			count++;
		else
			break;
	}
	return count;
   17d84:	e0bffa17 	ldw	r2,-24(fp)
}
   17d88:	e037883a 	mov	sp,fp
   17d8c:	dfc00117 	ldw	ra,4(sp)
   17d90:	df000017 	ldw	fp,0(sp)
   17d94:	dec00204 	addi	sp,sp,8
   17d98:	f800283a 	ret

00017d9c <alt_up_rs232_write_fd>:

int alt_up_rs232_write_fd (alt_fd* fd, const char* ptr, int len)
{
   17d9c:	defff904 	addi	sp,sp,-28
   17da0:	dfc00615 	stw	ra,24(sp)
   17da4:	df000515 	stw	fp,20(sp)
   17da8:	df000504 	addi	fp,sp,20
   17dac:	e13ffd15 	stw	r4,-12(fp)
   17db0:	e17ffe15 	stw	r5,-8(fp)
   17db4:	e1bfff15 	stw	r6,-4(fp)
	alt_up_rs232_dev *rs232 = (alt_up_rs232_dev*)fd->dev;
   17db8:	e0bffd17 	ldw	r2,-12(fp)
   17dbc:	10800017 	ldw	r2,0(r2)
   17dc0:	e0bffc15 	stw	r2,-16(fp)
	int count = 0;
   17dc4:	e03ffb15 	stw	zero,-20(fp)
	while(len--)
   17dc8:	00000f06 	br	17e08 <alt_up_rs232_write_fd+0x6c>
	{
		if (alt_up_rs232_write_data(rs232, *ptr)==0)
   17dcc:	e0bffe17 	ldw	r2,-8(fp)
   17dd0:	10800003 	ldbu	r2,0(r2)
   17dd4:	10803fcc 	andi	r2,r2,255
   17dd8:	e13ffc17 	ldw	r4,-16(fp)
   17ddc:	100b883a 	mov	r5,r2
   17de0:	0017c580 	call	17c58 <alt_up_rs232_write_data>
   17de4:	1000071e 	bne	r2,zero,17e04 <alt_up_rs232_write_fd+0x68>
		{
			count++;
   17de8:	e0bffb17 	ldw	r2,-20(fp)
   17dec:	10800044 	addi	r2,r2,1
   17df0:	e0bffb15 	stw	r2,-20(fp)
			ptr++;
   17df4:	e0bffe17 	ldw	r2,-8(fp)
   17df8:	10800044 	addi	r2,r2,1
   17dfc:	e0bffe15 	stw	r2,-8(fp)
   17e00:	00000106 	br	17e08 <alt_up_rs232_write_fd+0x6c>
		}
		else
			break;
   17e04:	00000406 	br	17e18 <alt_up_rs232_write_fd+0x7c>

int alt_up_rs232_write_fd (alt_fd* fd, const char* ptr, int len)
{
	alt_up_rs232_dev *rs232 = (alt_up_rs232_dev*)fd->dev;
	int count = 0;
	while(len--)
   17e08:	e0bfff17 	ldw	r2,-4(fp)
   17e0c:	10ffffc4 	addi	r3,r2,-1
   17e10:	e0ffff15 	stw	r3,-4(fp)
   17e14:	103fed1e 	bne	r2,zero,17dcc <__alt_mem_Flash_flash_data+0xf4017dcc>
			ptr++;
		}
		else
			break;
	}
	return count;
   17e18:	e0bffb17 	ldw	r2,-20(fp)
}
   17e1c:	e037883a 	mov	sp,fp
   17e20:	dfc00117 	ldw	ra,4(sp)
   17e24:	df000017 	ldw	fp,0(sp)
   17e28:	dec00204 	addi	sp,sp,8
   17e2c:	f800283a 	ret

00017e30 <alt_up_rs232_open_dev>:

alt_up_rs232_dev* alt_up_rs232_open_dev(const char* name)
{
   17e30:	defffc04 	addi	sp,sp,-16
   17e34:	dfc00315 	stw	ra,12(sp)
   17e38:	df000215 	stw	fp,8(sp)
   17e3c:	df000204 	addi	fp,sp,8
   17e40:	e13fff15 	stw	r4,-4(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_rs232_dev *dev = (alt_up_rs232_dev*)alt_find_dev(name, &alt_dev_list);
   17e44:	e13fff17 	ldw	r4,-4(fp)
   17e48:	014000b4 	movhi	r5,2
   17e4c:	296ec104 	addi	r5,r5,-17660
   17e50:	00184600 	call	18460 <alt_find_dev>
   17e54:	e0bffe15 	stw	r2,-8(fp)

  return dev;
   17e58:	e0bffe17 	ldw	r2,-8(fp)
}
   17e5c:	e037883a 	mov	sp,fp
   17e60:	dfc00117 	ldw	ra,4(sp)
   17e64:	df000017 	ldw	fp,0(sp)
   17e68:	dec00204 	addi	sp,sp,8
   17e6c:	f800283a 	ret

00017e70 <alt_up_char_buffer_init>:
#include <priv/alt_file.h>

#include "altera_up_avalon_video_character_buffer_with_dma.h"
#include "altera_up_avalon_video_character_buffer_with_dma_regs.h"

void alt_up_char_buffer_init(alt_up_char_buffer_dev *char_buffer) {
   17e70:	defffc04 	addi	sp,sp,-16
   17e74:	dfc00315 	stw	ra,12(sp)
   17e78:	df000215 	stw	fp,8(sp)
   17e7c:	df000204 	addi	fp,sp,8
   17e80:	e13fff15 	stw	r4,-4(fp)
	char * name;
	name = (char *) char_buffer->dev.name;
   17e84:	e0bfff17 	ldw	r2,-4(fp)
   17e88:	10800217 	ldw	r2,8(r2)
   17e8c:	e0bffe15 	stw	r2,-8(fp)

	for ( ; (*name) != '\0'; name++) {
   17e90:	00000b06 	br	17ec0 <alt_up_char_buffer_init+0x50>
		if (strcmp(name, "_avalon_char_buffer_slave") == 0) {
   17e94:	e13ffe17 	ldw	r4,-8(fp)
   17e98:	014000b4 	movhi	r5,2
   17e9c:	29671804 	addi	r5,r5,-25504
   17ea0:	00072dc0 	call	72dc <strcmp>
   17ea4:	1000031e 	bne	r2,zero,17eb4 <alt_up_char_buffer_init+0x44>
			(*name) = '\0';
   17ea8:	e0bffe17 	ldw	r2,-8(fp)
   17eac:	10000005 	stb	zero,0(r2)
			break;
   17eb0:	00000906 	br	17ed8 <alt_up_char_buffer_init+0x68>

void alt_up_char_buffer_init(alt_up_char_buffer_dev *char_buffer) {
	char * name;
	name = (char *) char_buffer->dev.name;

	for ( ; (*name) != '\0'; name++) {
   17eb4:	e0bffe17 	ldw	r2,-8(fp)
   17eb8:	10800044 	addi	r2,r2,1
   17ebc:	e0bffe15 	stw	r2,-8(fp)
   17ec0:	e0bffe17 	ldw	r2,-8(fp)
   17ec4:	10800003 	ldbu	r2,0(r2)
   17ec8:	10803fcc 	andi	r2,r2,255
   17ecc:	1080201c 	xori	r2,r2,128
   17ed0:	10bfe004 	addi	r2,r2,-128
   17ed4:	103fef1e 	bne	r2,zero,17e94 <__alt_mem_Flash_flash_data+0xf4017e94>
			(*name) = '\0';
			break;
		}
	}
	
	return;
   17ed8:	0001883a 	nop
}
   17edc:	e037883a 	mov	sp,fp
   17ee0:	dfc00117 	ldw	ra,4(sp)
   17ee4:	df000017 	ldw	fp,0(sp)
   17ee8:	dec00204 	addi	sp,sp,8
   17eec:	f800283a 	ret

00017ef0 <alt_up_char_buffer_open_dev>:

alt_up_char_buffer_dev* alt_up_char_buffer_open_dev(const char* name) {
   17ef0:	defffc04 	addi	sp,sp,-16
   17ef4:	dfc00315 	stw	ra,12(sp)
   17ef8:	df000215 	stw	fp,8(sp)
   17efc:	df000204 	addi	fp,sp,8
   17f00:	e13fff15 	stw	r4,-4(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_char_buffer_dev *dev = (alt_up_char_buffer_dev *)alt_find_dev(name, &alt_dev_list);
   17f04:	e13fff17 	ldw	r4,-4(fp)
   17f08:	014000b4 	movhi	r5,2
   17f0c:	296ec104 	addi	r5,r5,-17660
   17f10:	00184600 	call	18460 <alt_find_dev>
   17f14:	e0bffe15 	stw	r2,-8(fp)

  return dev;
   17f18:	e0bffe17 	ldw	r2,-8(fp)
}
   17f1c:	e037883a 	mov	sp,fp
   17f20:	dfc00117 	ldw	ra,4(sp)
   17f24:	df000017 	ldw	fp,0(sp)
   17f28:	dec00204 	addi	sp,sp,8
   17f2c:	f800283a 	ret

00017f30 <alt_up_char_buffer_draw>:

int alt_up_char_buffer_draw(alt_up_char_buffer_dev *char_buffer, unsigned char ch, 
	unsigned int x, unsigned int y) {
   17f30:	defffa04 	addi	sp,sp,-24
   17f34:	df000515 	stw	fp,20(sp)
   17f38:	df000504 	addi	fp,sp,20
   17f3c:	e13ffc15 	stw	r4,-16(fp)
   17f40:	2805883a 	mov	r2,r5
   17f44:	e1bffe15 	stw	r6,-8(fp)
   17f48:	e1ffff15 	stw	r7,-4(fp)
   17f4c:	e0bffd05 	stb	r2,-12(fp)
	// boundary check
	if (x >= char_buffer->x_resolution || y >= char_buffer->y_resolution )
   17f50:	e0bffc17 	ldw	r2,-16(fp)
   17f54:	10800c17 	ldw	r2,48(r2)
   17f58:	e0fffe17 	ldw	r3,-8(fp)
   17f5c:	1880042e 	bgeu	r3,r2,17f70 <alt_up_char_buffer_draw+0x40>
   17f60:	e0bffc17 	ldw	r2,-16(fp)
   17f64:	10800d17 	ldw	r2,52(r2)
   17f68:	e0ffff17 	ldw	r3,-4(fp)
   17f6c:	18800236 	bltu	r3,r2,17f78 <alt_up_char_buffer_draw+0x48>
		return -1;
   17f70:	00bfffc4 	movi	r2,-1
   17f74:	00001d06 	br	17fec <alt_up_char_buffer_draw+0xbc>
	
	unsigned int addr = 0;
   17f78:	e03ffb15 	stw	zero,-20(fp)
	addr |= ((x & char_buffer->x_coord_mask) << char_buffer->x_coord_offset);
   17f7c:	e0bffc17 	ldw	r2,-16(fp)
   17f80:	10c00f17 	ldw	r3,60(r2)
   17f84:	e0bffe17 	ldw	r2,-8(fp)
   17f88:	1884703a 	and	r2,r3,r2
   17f8c:	e0fffc17 	ldw	r3,-16(fp)
   17f90:	18c00e17 	ldw	r3,56(r3)
   17f94:	10c4983a 	sll	r2,r2,r3
   17f98:	e0fffb17 	ldw	r3,-20(fp)
   17f9c:	1884b03a 	or	r2,r3,r2
   17fa0:	e0bffb15 	stw	r2,-20(fp)
	addr |= ((y & char_buffer->y_coord_mask) << char_buffer->y_coord_offset);
   17fa4:	e0bffc17 	ldw	r2,-16(fp)
   17fa8:	10c01117 	ldw	r3,68(r2)
   17fac:	e0bfff17 	ldw	r2,-4(fp)
   17fb0:	1884703a 	and	r2,r3,r2
   17fb4:	e0fffc17 	ldw	r3,-16(fp)
   17fb8:	18c01017 	ldw	r3,64(r3)
   17fbc:	10c4983a 	sll	r2,r2,r3
   17fc0:	e0fffb17 	ldw	r3,-20(fp)
   17fc4:	1884b03a 	or	r2,r3,r2
   17fc8:	e0bffb15 	stw	r2,-20(fp)
	IOWR_8DIRECT(char_buffer->buffer_base, addr, ch);
   17fcc:	e0bffc17 	ldw	r2,-16(fp)
   17fd0:	10c00b17 	ldw	r3,44(r2)
   17fd4:	e0bffb17 	ldw	r2,-20(fp)
   17fd8:	1885883a 	add	r2,r3,r2
   17fdc:	1007883a 	mov	r3,r2
   17fe0:	e0bffd03 	ldbu	r2,-12(fp)
   17fe4:	18800025 	stbio	r2,0(r3)

	return 0;
   17fe8:	0005883a 	mov	r2,zero
}
   17fec:	e037883a 	mov	sp,fp
   17ff0:	df000017 	ldw	fp,0(sp)
   17ff4:	dec00104 	addi	sp,sp,4
   17ff8:	f800283a 	ret

00017ffc <alt_up_char_buffer_string>:

int alt_up_char_buffer_string(alt_up_char_buffer_dev *char_buffer, const char *ptr, 
	unsigned int x, unsigned int y) {
   17ffc:	defffa04 	addi	sp,sp,-24
   18000:	df000515 	stw	fp,20(sp)
   18004:	df000504 	addi	fp,sp,20
   18008:	e13ffc15 	stw	r4,-16(fp)
   1800c:	e17ffd15 	stw	r5,-12(fp)
   18010:	e1bffe15 	stw	r6,-8(fp)
   18014:	e1ffff15 	stw	r7,-4(fp)
	// boundary check
	if (x >= char_buffer->x_resolution || y >= char_buffer->y_resolution )
   18018:	e0bffc17 	ldw	r2,-16(fp)
   1801c:	10800c17 	ldw	r2,48(r2)
   18020:	e0fffe17 	ldw	r3,-8(fp)
   18024:	1880042e 	bgeu	r3,r2,18038 <alt_up_char_buffer_string+0x3c>
   18028:	e0bffc17 	ldw	r2,-16(fp)
   1802c:	10800d17 	ldw	r2,52(r2)
   18030:	e0ffff17 	ldw	r3,-4(fp)
   18034:	18800236 	bltu	r3,r2,18040 <alt_up_char_buffer_string+0x44>
		return -1;
   18038:	00bfffc4 	movi	r2,-1
   1803c:	00002b06 	br	180ec <alt_up_char_buffer_string+0xf0>
	
	unsigned int offset = 0;
   18040:	e03ffb15 	stw	zero,-20(fp)
	offset = (y << char_buffer->y_coord_offset) + x;
   18044:	e0bffc17 	ldw	r2,-16(fp)
   18048:	10801017 	ldw	r2,64(r2)
   1804c:	1007883a 	mov	r3,r2
   18050:	e0bfff17 	ldw	r2,-4(fp)
   18054:	10c6983a 	sll	r3,r2,r3
   18058:	e0bffe17 	ldw	r2,-8(fp)
   1805c:	1885883a 	add	r2,r3,r2
   18060:	e0bffb15 	stw	r2,-20(fp)

	while ( *ptr )
   18064:	00001a06 	br	180d0 <alt_up_char_buffer_string+0xd4>
	{
		IOWR_8DIRECT(char_buffer->buffer_base, offset, *ptr);
   18068:	e0bffc17 	ldw	r2,-16(fp)
   1806c:	10c00b17 	ldw	r3,44(r2)
   18070:	e0bffb17 	ldw	r2,-20(fp)
   18074:	1885883a 	add	r2,r3,r2
   18078:	1007883a 	mov	r3,r2
   1807c:	e0bffd17 	ldw	r2,-12(fp)
   18080:	10800003 	ldbu	r2,0(r2)
   18084:	10803fcc 	andi	r2,r2,255
   18088:	1080201c 	xori	r2,r2,128
   1808c:	10bfe004 	addi	r2,r2,-128
   18090:	18800025 	stbio	r2,0(r3)
		++ptr;
   18094:	e0bffd17 	ldw	r2,-12(fp)
   18098:	10800044 	addi	r2,r2,1
   1809c:	e0bffd15 	stw	r2,-12(fp)
		if (++x >= char_buffer->x_resolution)
   180a0:	e0bffe17 	ldw	r2,-8(fp)
   180a4:	10800044 	addi	r2,r2,1
   180a8:	e0bffe15 	stw	r2,-8(fp)
   180ac:	e0bffc17 	ldw	r2,-16(fp)
   180b0:	10800c17 	ldw	r2,48(r2)
   180b4:	e0fffe17 	ldw	r3,-8(fp)
   180b8:	18800236 	bltu	r3,r2,180c4 <alt_up_char_buffer_string+0xc8>
			return -1;
   180bc:	00bfffc4 	movi	r2,-1
   180c0:	00000a06 	br	180ec <alt_up_char_buffer_string+0xf0>
		++offset;
   180c4:	e0bffb17 	ldw	r2,-20(fp)
   180c8:	10800044 	addi	r2,r2,1
   180cc:	e0bffb15 	stw	r2,-20(fp)
		return -1;
	
	unsigned int offset = 0;
	offset = (y << char_buffer->y_coord_offset) + x;

	while ( *ptr )
   180d0:	e0bffd17 	ldw	r2,-12(fp)
   180d4:	10800003 	ldbu	r2,0(r2)
   180d8:	10803fcc 	andi	r2,r2,255
   180dc:	1080201c 	xori	r2,r2,128
   180e0:	10bfe004 	addi	r2,r2,-128
   180e4:	103fe01e 	bne	r2,zero,18068 <__alt_mem_Flash_flash_data+0xf4018068>
		++ptr;
		if (++x >= char_buffer->x_resolution)
			return -1;
		++offset;
	}
	return 0;
   180e8:	0005883a 	mov	r2,zero
}
   180ec:	e037883a 	mov	sp,fp
   180f0:	df000017 	ldw	fp,0(sp)
   180f4:	dec00104 	addi	sp,sp,4
   180f8:	f800283a 	ret

000180fc <alt_up_char_buffer_clear>:

int alt_up_char_buffer_clear(alt_up_char_buffer_dev *char_buffer) {
   180fc:	defffe04 	addi	sp,sp,-8
   18100:	df000115 	stw	fp,4(sp)
   18104:	df000104 	addi	fp,sp,4
   18108:	e13fff15 	stw	r4,-4(fp)
	IOWR_ALT_UP_CHAR_BUFFER_CLR_SCRN(char_buffer->ctrl_reg_base, 1);
   1810c:	e0bfff17 	ldw	r2,-4(fp)
   18110:	10800a17 	ldw	r2,40(r2)
   18114:	10800084 	addi	r2,r2,2
   18118:	1007883a 	mov	r3,r2
   1811c:	00800044 	movi	r2,1
   18120:	18800025 	stbio	r2,0(r3)
	while ((IORD_ALT_UP_CHAR_BUFFER_CLR_SCRN(char_buffer->ctrl_reg_base) & ALT_UP_CHAR_BUFFER_CLR_SCRN_MSK) >> ALT_UP_CHAR_BUFFER_CLR_SCRN_OFST);
   18124:	0001883a 	nop
   18128:	e0bfff17 	ldw	r2,-4(fp)
   1812c:	10800a17 	ldw	r2,40(r2)
   18130:	10800084 	addi	r2,r2,2
   18134:	10800023 	ldbuio	r2,0(r2)
   18138:	10803fcc 	andi	r2,r2,255
   1813c:	1080004c 	andi	r2,r2,1
   18140:	103ff91e 	bne	r2,zero,18128 <__alt_mem_Flash_flash_data+0xf4018128>
	return 0;
   18144:	0005883a 	mov	r2,zero
}
   18148:	e037883a 	mov	sp,fp
   1814c:	df000017 	ldw	fp,0(sp)
   18150:	dec00104 	addi	sp,sp,4
   18154:	f800283a 	ret

00018158 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
   18158:	defff504 	addi	sp,sp,-44
   1815c:	df000a15 	stw	fp,40(sp)
   18160:	df000a04 	addi	fp,sp,40
   18164:	e13ffc15 	stw	r4,-16(fp)
   18168:	e17ffd15 	stw	r5,-12(fp)
   1816c:	e1bffe15 	stw	r6,-8(fp)
   18170:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
   18174:	e03ff615 	stw	zero,-40(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
   18178:	008000b4 	movhi	r2,2
   1817c:	10b6d704 	addi	r2,r2,-9380
   18180:	10800017 	ldw	r2,0(r2)
  
  if (alt_ticks_per_second ())
   18184:	10003f26 	beq	r2,zero,18284 <alt_alarm_start+0x12c>
  {
    if (alarm)
   18188:	e0bffc17 	ldw	r2,-16(fp)
   1818c:	10003b26 	beq	r2,zero,1827c <alt_alarm_start+0x124>
    {
      alarm->callback = callback;
   18190:	e0bffc17 	ldw	r2,-16(fp)
   18194:	e0fffe17 	ldw	r3,-8(fp)
   18198:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
   1819c:	e0bffc17 	ldw	r2,-16(fp)
   181a0:	e0ffff17 	ldw	r3,-4(fp)
   181a4:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   181a8:	0005303a 	rdctl	r2,status
   181ac:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   181b0:	e0fff817 	ldw	r3,-32(fp)
   181b4:	00bfff84 	movi	r2,-2
   181b8:	1884703a 	and	r2,r3,r2
   181bc:	1001703a 	wrctl	status,r2
  
  return context;
   181c0:	e0bff817 	ldw	r2,-32(fp)
 
      irq_context = alt_irq_disable_all ();
   181c4:	e0bff715 	stw	r2,-36(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
   181c8:	008000b4 	movhi	r2,2
   181cc:	10b6d804 	addi	r2,r2,-9376
   181d0:	10800017 	ldw	r2,0(r2)
      
      current_nticks = alt_nticks();
   181d4:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
   181d8:	e0fffd17 	ldw	r3,-12(fp)
   181dc:	e0bff617 	ldw	r2,-40(fp)
   181e0:	1885883a 	add	r2,r3,r2
   181e4:	10c00044 	addi	r3,r2,1
   181e8:	e0bffc17 	ldw	r2,-16(fp)
   181ec:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
   181f0:	e0bffc17 	ldw	r2,-16(fp)
   181f4:	10c00217 	ldw	r3,8(r2)
   181f8:	e0bff617 	ldw	r2,-40(fp)
   181fc:	1880042e 	bgeu	r3,r2,18210 <alt_alarm_start+0xb8>
      {
        alarm->rollover = 1;
   18200:	e0bffc17 	ldw	r2,-16(fp)
   18204:	00c00044 	movi	r3,1
   18208:	10c00405 	stb	r3,16(r2)
   1820c:	00000206 	br	18218 <alt_alarm_start+0xc0>
      }
      else
      {
        alarm->rollover = 0;
   18210:	e0bffc17 	ldw	r2,-16(fp)
   18214:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
   18218:	e0fffc17 	ldw	r3,-16(fp)
   1821c:	008000b4 	movhi	r2,2
   18220:	10aee604 	addi	r2,r2,-17512
   18224:	e0bff915 	stw	r2,-28(fp)
   18228:	e0fffa15 	stw	r3,-24(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   1822c:	e0bffa17 	ldw	r2,-24(fp)
   18230:	e0fff917 	ldw	r3,-28(fp)
   18234:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   18238:	e0bff917 	ldw	r2,-28(fp)
   1823c:	10c00017 	ldw	r3,0(r2)
   18240:	e0bffa17 	ldw	r2,-24(fp)
   18244:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   18248:	e0bff917 	ldw	r2,-28(fp)
   1824c:	10800017 	ldw	r2,0(r2)
   18250:	e0fffa17 	ldw	r3,-24(fp)
   18254:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   18258:	e0bff917 	ldw	r2,-28(fp)
   1825c:	e0fffa17 	ldw	r3,-24(fp)
   18260:	10c00015 	stw	r3,0(r2)
   18264:	e0bff717 	ldw	r2,-36(fp)
   18268:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1826c:	e0bffb17 	ldw	r2,-20(fp)
   18270:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
   18274:	0005883a 	mov	r2,zero
   18278:	00000306 	br	18288 <alt_alarm_start+0x130>
    }
    else
    {
      return -EINVAL;
   1827c:	00bffa84 	movi	r2,-22
   18280:	00000106 	br	18288 <alt_alarm_start+0x130>
    }
  }
  else
  {
    return -ENOTSUP;
   18284:	00bfde84 	movi	r2,-134
  }
}
   18288:	e037883a 	mov	sp,fp
   1828c:	df000017 	ldw	fp,0(sp)
   18290:	dec00104 	addi	sp,sp,4
   18294:	f800283a 	ret

00018298 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
   18298:	deffff04 	addi	sp,sp,-4
   1829c:	df000015 	stw	fp,0(sp)
   182a0:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
   182a4:	e037883a 	mov	sp,fp
   182a8:	df000017 	ldw	fp,0(sp)
   182ac:	dec00104 	addi	sp,sp,4
   182b0:	f800283a 	ret

000182b4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   182b4:	defffe04 	addi	sp,sp,-8
   182b8:	dfc00115 	stw	ra,4(sp)
   182bc:	df000015 	stw	fp,0(sp)
   182c0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   182c4:	008000b4 	movhi	r2,2
   182c8:	10aec404 	addi	r2,r2,-17648
   182cc:	10800017 	ldw	r2,0(r2)
   182d0:	10000526 	beq	r2,zero,182e8 <alt_get_errno+0x34>
   182d4:	008000b4 	movhi	r2,2
   182d8:	10aec404 	addi	r2,r2,-17648
   182dc:	10800017 	ldw	r2,0(r2)
   182e0:	103ee83a 	callr	r2
   182e4:	00000206 	br	182f0 <alt_get_errno+0x3c>
   182e8:	008000b4 	movhi	r2,2
   182ec:	10b6b904 	addi	r2,r2,-9500
}
   182f0:	e037883a 	mov	sp,fp
   182f4:	dfc00117 	ldw	ra,4(sp)
   182f8:	df000017 	ldw	fp,0(sp)
   182fc:	dec00204 	addi	sp,sp,8
   18300:	f800283a 	ret

00018304 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
   18304:	defffa04 	addi	sp,sp,-24
   18308:	dfc00515 	stw	ra,20(sp)
   1830c:	df000415 	stw	fp,16(sp)
   18310:	df000404 	addi	fp,sp,16
   18314:	e13ffe15 	stw	r4,-8(fp)
   18318:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
   1831c:	e0bffe17 	ldw	r2,-8(fp)
   18320:	10000326 	beq	r2,zero,18330 <alt_dev_llist_insert+0x2c>
   18324:	e0bffe17 	ldw	r2,-8(fp)
   18328:	10800217 	ldw	r2,8(r2)
   1832c:	1000061e 	bne	r2,zero,18348 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
   18330:	00182b40 	call	182b4 <alt_get_errno>
   18334:	1007883a 	mov	r3,r2
   18338:	00800584 	movi	r2,22
   1833c:	18800015 	stw	r2,0(r3)
    return -EINVAL;
   18340:	00bffa84 	movi	r2,-22
   18344:	00001306 	br	18394 <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
   18348:	e0bffe17 	ldw	r2,-8(fp)
   1834c:	e0ffff17 	ldw	r3,-4(fp)
   18350:	e0fffc15 	stw	r3,-16(fp)
   18354:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   18358:	e0bffd17 	ldw	r2,-12(fp)
   1835c:	e0fffc17 	ldw	r3,-16(fp)
   18360:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   18364:	e0bffc17 	ldw	r2,-16(fp)
   18368:	10c00017 	ldw	r3,0(r2)
   1836c:	e0bffd17 	ldw	r2,-12(fp)
   18370:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   18374:	e0bffc17 	ldw	r2,-16(fp)
   18378:	10800017 	ldw	r2,0(r2)
   1837c:	e0fffd17 	ldw	r3,-12(fp)
   18380:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   18384:	e0bffc17 	ldw	r2,-16(fp)
   18388:	e0fffd17 	ldw	r3,-12(fp)
   1838c:	10c00015 	stw	r3,0(r2)

  return 0;  
   18390:	0005883a 	mov	r2,zero
}
   18394:	e037883a 	mov	sp,fp
   18398:	dfc00117 	ldw	ra,4(sp)
   1839c:	df000017 	ldw	fp,0(sp)
   183a0:	dec00204 	addi	sp,sp,8
   183a4:	f800283a 	ret

000183a8 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
   183a8:	defffd04 	addi	sp,sp,-12
   183ac:	dfc00215 	stw	ra,8(sp)
   183b0:	df000115 	stw	fp,4(sp)
   183b4:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   183b8:	008000b4 	movhi	r2,2
   183bc:	10a59304 	addi	r2,r2,-27060
   183c0:	e0bfff15 	stw	r2,-4(fp)
   183c4:	00000606 	br	183e0 <_do_ctors+0x38>
        (*ctor) (); 
   183c8:	e0bfff17 	ldw	r2,-4(fp)
   183cc:	10800017 	ldw	r2,0(r2)
   183d0:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   183d4:	e0bfff17 	ldw	r2,-4(fp)
   183d8:	10bfff04 	addi	r2,r2,-4
   183dc:	e0bfff15 	stw	r2,-4(fp)
   183e0:	e0ffff17 	ldw	r3,-4(fp)
   183e4:	008000b4 	movhi	r2,2
   183e8:	10a59404 	addi	r2,r2,-27056
   183ec:	18bff62e 	bgeu	r3,r2,183c8 <__alt_mem_Flash_flash_data+0xf40183c8>
        (*ctor) (); 
}
   183f0:	e037883a 	mov	sp,fp
   183f4:	dfc00117 	ldw	ra,4(sp)
   183f8:	df000017 	ldw	fp,0(sp)
   183fc:	dec00204 	addi	sp,sp,8
   18400:	f800283a 	ret

00018404 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
   18404:	defffd04 	addi	sp,sp,-12
   18408:	dfc00215 	stw	ra,8(sp)
   1840c:	df000115 	stw	fp,4(sp)
   18410:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   18414:	008000b4 	movhi	r2,2
   18418:	10a59304 	addi	r2,r2,-27060
   1841c:	e0bfff15 	stw	r2,-4(fp)
   18420:	00000606 	br	1843c <_do_dtors+0x38>
        (*dtor) (); 
   18424:	e0bfff17 	ldw	r2,-4(fp)
   18428:	10800017 	ldw	r2,0(r2)
   1842c:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   18430:	e0bfff17 	ldw	r2,-4(fp)
   18434:	10bfff04 	addi	r2,r2,-4
   18438:	e0bfff15 	stw	r2,-4(fp)
   1843c:	e0ffff17 	ldw	r3,-4(fp)
   18440:	008000b4 	movhi	r2,2
   18444:	10a59404 	addi	r2,r2,-27056
   18448:	18bff62e 	bgeu	r3,r2,18424 <__alt_mem_Flash_flash_data+0xf4018424>
        (*dtor) (); 
}
   1844c:	e037883a 	mov	sp,fp
   18450:	dfc00117 	ldw	ra,4(sp)
   18454:	df000017 	ldw	fp,0(sp)
   18458:	dec00204 	addi	sp,sp,8
   1845c:	f800283a 	ret

00018460 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
   18460:	defffa04 	addi	sp,sp,-24
   18464:	dfc00515 	stw	ra,20(sp)
   18468:	df000415 	stw	fp,16(sp)
   1846c:	df000404 	addi	fp,sp,16
   18470:	e13ffe15 	stw	r4,-8(fp)
   18474:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
   18478:	e0bfff17 	ldw	r2,-4(fp)
   1847c:	10800017 	ldw	r2,0(r2)
   18480:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
   18484:	e13ffe17 	ldw	r4,-8(fp)
   18488:	00073800 	call	7380 <strlen>
   1848c:	10800044 	addi	r2,r2,1
   18490:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   18494:	00000d06 	br	184cc <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
   18498:	e0bffc17 	ldw	r2,-16(fp)
   1849c:	10c00217 	ldw	r3,8(r2)
   184a0:	e0bffd17 	ldw	r2,-12(fp)
   184a4:	1809883a 	mov	r4,r3
   184a8:	e17ffe17 	ldw	r5,-8(fp)
   184ac:	100d883a 	mov	r6,r2
   184b0:	00192f00 	call	192f0 <memcmp>
   184b4:	1000021e 	bne	r2,zero,184c0 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
   184b8:	e0bffc17 	ldw	r2,-16(fp)
   184bc:	00000706 	br	184dc <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
   184c0:	e0bffc17 	ldw	r2,-16(fp)
   184c4:	10800017 	ldw	r2,0(r2)
   184c8:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   184cc:	e0fffc17 	ldw	r3,-16(fp)
   184d0:	e0bfff17 	ldw	r2,-4(fp)
   184d4:	18bff01e 	bne	r3,r2,18498 <__alt_mem_Flash_flash_data+0xf4018498>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
   184d8:	0005883a 	mov	r2,zero
}
   184dc:	e037883a 	mov	sp,fp
   184e0:	dfc00117 	ldw	ra,4(sp)
   184e4:	df000017 	ldw	fp,0(sp)
   184e8:	dec00204 	addi	sp,sp,8
   184ec:	f800283a 	ret

000184f0 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
   184f0:	defffe04 	addi	sp,sp,-8
   184f4:	dfc00115 	stw	ra,4(sp)
   184f8:	df000015 	stw	fp,0(sp)
   184fc:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
   18500:	0009883a 	mov	r4,zero
   18504:	01440004 	movi	r5,4096
   18508:	001917c0 	call	1917c <alt_icache_flush>
#endif
}
   1850c:	e037883a 	mov	sp,fp
   18510:	dfc00117 	ldw	ra,4(sp)
   18514:	df000017 	ldw	fp,0(sp)
   18518:	dec00204 	addi	sp,sp,8
   1851c:	f800283a 	ret

00018520 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
   18520:	defff904 	addi	sp,sp,-28
   18524:	dfc00615 	stw	ra,24(sp)
   18528:	df000515 	stw	fp,20(sp)
   1852c:	df000504 	addi	fp,sp,20
   18530:	e13ffc15 	stw	r4,-16(fp)
   18534:	e17ffd15 	stw	r5,-12(fp)
   18538:	e1bffe15 	stw	r6,-8(fp)
   1853c:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
   18540:	e13ffd17 	ldw	r4,-12(fp)
   18544:	e17ffe17 	ldw	r5,-8(fp)
   18548:	e1bfff17 	ldw	r6,-4(fp)
   1854c:	00189240 	call	18924 <open>
   18550:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
   18554:	e0bffb17 	ldw	r2,-20(fp)
   18558:	10001c16 	blt	r2,zero,185cc <alt_open_fd+0xac>
  {
    fd->dev      = alt_fd_list[old].dev;
   1855c:	008000b4 	movhi	r2,2
   18560:	10a95304 	addi	r2,r2,-23220
   18564:	e0fffb17 	ldw	r3,-20(fp)
   18568:	18c00324 	muli	r3,r3,12
   1856c:	10c5883a 	add	r2,r2,r3
   18570:	10c00017 	ldw	r3,0(r2)
   18574:	e0bffc17 	ldw	r2,-16(fp)
   18578:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
   1857c:	008000b4 	movhi	r2,2
   18580:	10a95304 	addi	r2,r2,-23220
   18584:	e0fffb17 	ldw	r3,-20(fp)
   18588:	18c00324 	muli	r3,r3,12
   1858c:	18c00104 	addi	r3,r3,4
   18590:	10c5883a 	add	r2,r2,r3
   18594:	10c00017 	ldw	r3,0(r2)
   18598:	e0bffc17 	ldw	r2,-16(fp)
   1859c:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
   185a0:	008000b4 	movhi	r2,2
   185a4:	10a95304 	addi	r2,r2,-23220
   185a8:	e0fffb17 	ldw	r3,-20(fp)
   185ac:	18c00324 	muli	r3,r3,12
   185b0:	18c00204 	addi	r3,r3,8
   185b4:	10c5883a 	add	r2,r2,r3
   185b8:	10c00017 	ldw	r3,0(r2)
   185bc:	e0bffc17 	ldw	r2,-16(fp)
   185c0:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
   185c4:	e13ffb17 	ldw	r4,-20(fp)
   185c8:	000d73c0 	call	d73c <alt_release_fd>
  }
} 
   185cc:	e037883a 	mov	sp,fp
   185d0:	dfc00117 	ldw	ra,4(sp)
   185d4:	df000017 	ldw	fp,0(sp)
   185d8:	dec00204 	addi	sp,sp,8
   185dc:	f800283a 	ret

000185e0 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
   185e0:	defffb04 	addi	sp,sp,-20
   185e4:	dfc00415 	stw	ra,16(sp)
   185e8:	df000315 	stw	fp,12(sp)
   185ec:	df000304 	addi	fp,sp,12
   185f0:	e13ffd15 	stw	r4,-12(fp)
   185f4:	e17ffe15 	stw	r5,-8(fp)
   185f8:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
   185fc:	010000b4 	movhi	r4,2
   18600:	21295604 	addi	r4,r4,-23208
   18604:	e17ffd17 	ldw	r5,-12(fp)
   18608:	01800044 	movi	r6,1
   1860c:	01c07fc4 	movi	r7,511
   18610:	00185200 	call	18520 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
   18614:	010000b4 	movhi	r4,2
   18618:	21295304 	addi	r4,r4,-23220
   1861c:	e17ffe17 	ldw	r5,-8(fp)
   18620:	000d883a 	mov	r6,zero
   18624:	01c07fc4 	movi	r7,511
   18628:	00185200 	call	18520 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
   1862c:	010000b4 	movhi	r4,2
   18630:	21295904 	addi	r4,r4,-23196
   18634:	e17fff17 	ldw	r5,-4(fp)
   18638:	01800044 	movi	r6,1
   1863c:	01c07fc4 	movi	r7,511
   18640:	00185200 	call	18520 <alt_open_fd>
}  
   18644:	e037883a 	mov	sp,fp
   18648:	dfc00117 	ldw	ra,4(sp)
   1864c:	df000017 	ldw	fp,0(sp)
   18650:	dec00204 	addi	sp,sp,8
   18654:	f800283a 	ret

00018658 <alt_irq_register>:
 */
 
int alt_irq_register (alt_u32 id, 
                      void* context, 
                      alt_isr_func handler)
{
   18658:	defff004 	addi	sp,sp,-64
   1865c:	df000f15 	stw	fp,60(sp)
   18660:	df000f04 	addi	fp,sp,60
   18664:	e13ffd15 	stw	r4,-12(fp)
   18668:	e17ffe15 	stw	r5,-8(fp)
   1866c:	e1bfff15 	stw	r6,-4(fp)
  int rc = -EINVAL;  
   18670:	00bffa84 	movi	r2,-22
   18674:	e0bff115 	stw	r2,-60(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
   18678:	e0bffd17 	ldw	r2,-12(fp)
   1867c:	10800828 	cmpgeui	r2,r2,32
   18680:	10005c1e 	bne	r2,zero,187f4 <alt_irq_register+0x19c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   18684:	0005303a 	rdctl	r2,status
   18688:	e0bff315 	stw	r2,-52(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1868c:	e0fff317 	ldw	r3,-52(fp)
   18690:	00bfff84 	movi	r2,-2
   18694:	1884703a 	and	r2,r3,r2
   18698:	1001703a 	wrctl	status,r2
  
  return context;
   1869c:	e0bff317 	ldw	r2,-52(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all ();
   186a0:	e0bff215 	stw	r2,-56(fp)

    alt_irq[id].handler = handler;
   186a4:	008000b4 	movhi	r2,2
   186a8:	109b6d04 	addi	r2,r2,28084
   186ac:	e0fffd17 	ldw	r3,-12(fp)
   186b0:	180690fa 	slli	r3,r3,3
   186b4:	10c5883a 	add	r2,r2,r3
   186b8:	e0ffff17 	ldw	r3,-4(fp)
   186bc:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = context;
   186c0:	008000b4 	movhi	r2,2
   186c4:	109b6d04 	addi	r2,r2,28084
   186c8:	e0fffd17 	ldw	r3,-12(fp)
   186cc:	180690fa 	slli	r3,r3,3
   186d0:	18c00104 	addi	r3,r3,4
   186d4:	10c5883a 	add	r2,r2,r3
   186d8:	e0fffe17 	ldw	r3,-8(fp)
   186dc:	10c00015 	stw	r3,0(r2)

    rc = (handler) ? alt_irq_enable (id): alt_irq_disable (id);
   186e0:	e0bfff17 	ldw	r2,-4(fp)
   186e4:	10001f26 	beq	r2,zero,18764 <alt_irq_register+0x10c>
   186e8:	e0bffd17 	ldw	r2,-12(fp)
   186ec:	e0bff415 	stw	r2,-48(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   186f0:	0005303a 	rdctl	r2,status
   186f4:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   186f8:	e0fff517 	ldw	r3,-44(fp)
   186fc:	00bfff84 	movi	r2,-2
   18700:	1884703a 	and	r2,r3,r2
   18704:	1001703a 	wrctl	status,r2
  
  return context;
   18708:	e0bff517 	ldw	r2,-44(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   1870c:	e0bff615 	stw	r2,-40(fp)

  alt_irq_active |= (1 << id);
   18710:	e0bff417 	ldw	r2,-48(fp)
   18714:	00c00044 	movi	r3,1
   18718:	1884983a 	sll	r2,r3,r2
   1871c:	1007883a 	mov	r3,r2
   18720:	008000b4 	movhi	r2,2
   18724:	10b6d604 	addi	r2,r2,-9384
   18728:	10800017 	ldw	r2,0(r2)
   1872c:	1886b03a 	or	r3,r3,r2
   18730:	008000b4 	movhi	r2,2
   18734:	10b6d604 	addi	r2,r2,-9384
   18738:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   1873c:	008000b4 	movhi	r2,2
   18740:	10b6d604 	addi	r2,r2,-9384
   18744:	10800017 	ldw	r2,0(r2)
   18748:	100170fa 	wrctl	ienable,r2
   1874c:	e0bff617 	ldw	r2,-40(fp)
   18750:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   18754:	e0bff717 	ldw	r2,-36(fp)
   18758:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   1875c:	0005883a 	mov	r2,zero
   18760:	00001f06 	br	187e0 <alt_irq_register+0x188>
   18764:	e0bffd17 	ldw	r2,-12(fp)
   18768:	e0bff815 	stw	r2,-32(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1876c:	0005303a 	rdctl	r2,status
   18770:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   18774:	e0fff917 	ldw	r3,-28(fp)
   18778:	00bfff84 	movi	r2,-2
   1877c:	1884703a 	and	r2,r3,r2
   18780:	1001703a 	wrctl	status,r2
  
  return context;
   18784:	e0bff917 	ldw	r2,-28(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   18788:	e0bffa15 	stw	r2,-24(fp)

  alt_irq_active &= ~(1 << id);
   1878c:	e0bff817 	ldw	r2,-32(fp)
   18790:	00c00044 	movi	r3,1
   18794:	1884983a 	sll	r2,r3,r2
   18798:	0084303a 	nor	r2,zero,r2
   1879c:	1007883a 	mov	r3,r2
   187a0:	008000b4 	movhi	r2,2
   187a4:	10b6d604 	addi	r2,r2,-9384
   187a8:	10800017 	ldw	r2,0(r2)
   187ac:	1886703a 	and	r3,r3,r2
   187b0:	008000b4 	movhi	r2,2
   187b4:	10b6d604 	addi	r2,r2,-9384
   187b8:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   187bc:	008000b4 	movhi	r2,2
   187c0:	10b6d604 	addi	r2,r2,-9384
   187c4:	10800017 	ldw	r2,0(r2)
   187c8:	100170fa 	wrctl	ienable,r2
   187cc:	e0bffa17 	ldw	r2,-24(fp)
   187d0:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   187d4:	e0bffb17 	ldw	r2,-20(fp)
   187d8:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   187dc:	0005883a 	mov	r2,zero
   187e0:	e0bff115 	stw	r2,-60(fp)
   187e4:	e0bff217 	ldw	r2,-56(fp)
   187e8:	e0bffc15 	stw	r2,-16(fp)
   187ec:	e0bffc17 	ldw	r2,-16(fp)
   187f0:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }
  return rc; 
   187f4:	e0bff117 	ldw	r2,-60(fp)
}
   187f8:	e037883a 	mov	sp,fp
   187fc:	df000017 	ldw	fp,0(sp)
   18800:	dec00104 	addi	sp,sp,4
   18804:	f800283a 	ret

00018808 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   18808:	defffe04 	addi	sp,sp,-8
   1880c:	dfc00115 	stw	ra,4(sp)
   18810:	df000015 	stw	fp,0(sp)
   18814:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   18818:	008000b4 	movhi	r2,2
   1881c:	10aec404 	addi	r2,r2,-17648
   18820:	10800017 	ldw	r2,0(r2)
   18824:	10000526 	beq	r2,zero,1883c <alt_get_errno+0x34>
   18828:	008000b4 	movhi	r2,2
   1882c:	10aec404 	addi	r2,r2,-17648
   18830:	10800017 	ldw	r2,0(r2)
   18834:	103ee83a 	callr	r2
   18838:	00000206 	br	18844 <alt_get_errno+0x3c>
   1883c:	008000b4 	movhi	r2,2
   18840:	10b6b904 	addi	r2,r2,-9500
}
   18844:	e037883a 	mov	sp,fp
   18848:	dfc00117 	ldw	ra,4(sp)
   1884c:	df000017 	ldw	fp,0(sp)
   18850:	dec00204 	addi	sp,sp,8
   18854:	f800283a 	ret

00018858 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
   18858:	defffd04 	addi	sp,sp,-12
   1885c:	df000215 	stw	fp,8(sp)
   18860:	df000204 	addi	fp,sp,8
   18864:	e13fff15 	stw	r4,-4(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
   18868:	e0bfff17 	ldw	r2,-4(fp)
   1886c:	10800217 	ldw	r2,8(r2)
   18870:	10d00034 	orhi	r3,r2,16384
   18874:	e0bfff17 	ldw	r2,-4(fp)
   18878:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   1887c:	e03ffe15 	stw	zero,-8(fp)
   18880:	00001d06 	br	188f8 <alt_file_locked+0xa0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   18884:	008000b4 	movhi	r2,2
   18888:	10a95304 	addi	r2,r2,-23220
   1888c:	e0fffe17 	ldw	r3,-8(fp)
   18890:	18c00324 	muli	r3,r3,12
   18894:	10c5883a 	add	r2,r2,r3
   18898:	10c00017 	ldw	r3,0(r2)
   1889c:	e0bfff17 	ldw	r2,-4(fp)
   188a0:	10800017 	ldw	r2,0(r2)
   188a4:	1880111e 	bne	r3,r2,188ec <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   188a8:	008000b4 	movhi	r2,2
   188ac:	10a95304 	addi	r2,r2,-23220
   188b0:	e0fffe17 	ldw	r3,-8(fp)
   188b4:	18c00324 	muli	r3,r3,12
   188b8:	18c00204 	addi	r3,r3,8
   188bc:	10c5883a 	add	r2,r2,r3
   188c0:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   188c4:	1000090e 	bge	r2,zero,188ec <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
   188c8:	e0bffe17 	ldw	r2,-8(fp)
   188cc:	10c00324 	muli	r3,r2,12
   188d0:	008000b4 	movhi	r2,2
   188d4:	10a95304 	addi	r2,r2,-23220
   188d8:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   188dc:	e0bfff17 	ldw	r2,-4(fp)
   188e0:	18800226 	beq	r3,r2,188ec <alt_file_locked+0x94>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
   188e4:	00bffcc4 	movi	r2,-13
   188e8:	00000a06 	br	18914 <alt_file_locked+0xbc>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   188ec:	e0bffe17 	ldw	r2,-8(fp)
   188f0:	10800044 	addi	r2,r2,1
   188f4:	e0bffe15 	stw	r2,-8(fp)
   188f8:	008000b4 	movhi	r2,2
   188fc:	10aec304 	addi	r2,r2,-17652
   18900:	10800017 	ldw	r2,0(r2)
   18904:	1007883a 	mov	r3,r2
   18908:	e0bffe17 	ldw	r2,-8(fp)
   1890c:	18bfdd2e 	bgeu	r3,r2,18884 <__alt_mem_Flash_flash_data+0xf4018884>
    }
  }
  
  /* The device is not locked */
 
  return 0;
   18910:	0005883a 	mov	r2,zero
}
   18914:	e037883a 	mov	sp,fp
   18918:	df000017 	ldw	fp,0(sp)
   1891c:	dec00104 	addi	sp,sp,4
   18920:	f800283a 	ret

00018924 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
   18924:	defff604 	addi	sp,sp,-40
   18928:	dfc00915 	stw	ra,36(sp)
   1892c:	df000815 	stw	fp,32(sp)
   18930:	df000804 	addi	fp,sp,32
   18934:	e13ffd15 	stw	r4,-12(fp)
   18938:	e17ffe15 	stw	r5,-8(fp)
   1893c:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
   18940:	00bfffc4 	movi	r2,-1
   18944:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
   18948:	00bffb44 	movi	r2,-19
   1894c:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
   18950:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
   18954:	e13ffd17 	ldw	r4,-12(fp)
   18958:	014000b4 	movhi	r5,2
   1895c:	296ec104 	addi	r5,r5,-17660
   18960:	00184600 	call	18460 <alt_find_dev>
   18964:	e0bff815 	stw	r2,-32(fp)
   18968:	e0bff817 	ldw	r2,-32(fp)
   1896c:	1000051e 	bne	r2,zero,18984 <open+0x60>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
   18970:	e13ffd17 	ldw	r4,-12(fp)
   18974:	0018f6c0 	call	18f6c <alt_find_file>
   18978:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
   1897c:	00800044 	movi	r2,1
   18980:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
   18984:	e0bff817 	ldw	r2,-32(fp)
   18988:	10002926 	beq	r2,zero,18a30 <open+0x10c>
  {
    if ((index = alt_get_fd (dev)) < 0)
   1898c:	e13ff817 	ldw	r4,-32(fp)
   18990:	00190800 	call	19080 <alt_get_fd>
   18994:	e0bff915 	stw	r2,-28(fp)
   18998:	e0bff917 	ldw	r2,-28(fp)
   1899c:	1000030e 	bge	r2,zero,189ac <open+0x88>
    {
      status = index;
   189a0:	e0bff917 	ldw	r2,-28(fp)
   189a4:	e0bffa15 	stw	r2,-24(fp)
   189a8:	00002306 	br	18a38 <open+0x114>
    }
    else
    {
      fd = &alt_fd_list[index];
   189ac:	e0bff917 	ldw	r2,-28(fp)
   189b0:	10c00324 	muli	r3,r2,12
   189b4:	008000b4 	movhi	r2,2
   189b8:	10a95304 	addi	r2,r2,-23220
   189bc:	1885883a 	add	r2,r3,r2
   189c0:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
   189c4:	e0fffe17 	ldw	r3,-8(fp)
   189c8:	00900034 	movhi	r2,16384
   189cc:	10bfffc4 	addi	r2,r2,-1
   189d0:	1886703a 	and	r3,r3,r2
   189d4:	e0bffc17 	ldw	r2,-16(fp)
   189d8:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
   189dc:	e0bffb17 	ldw	r2,-20(fp)
   189e0:	1000051e 	bne	r2,zero,189f8 <open+0xd4>
   189e4:	e13ffc17 	ldw	r4,-16(fp)
   189e8:	00188580 	call	18858 <alt_file_locked>
   189ec:	e0bffa15 	stw	r2,-24(fp)
   189f0:	e0bffa17 	ldw	r2,-24(fp)
   189f4:	10001016 	blt	r2,zero,18a38 <open+0x114>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
   189f8:	e0bff817 	ldw	r2,-32(fp)
   189fc:	10800317 	ldw	r2,12(r2)
   18a00:	10000826 	beq	r2,zero,18a24 <open+0x100>
   18a04:	e0bff817 	ldw	r2,-32(fp)
   18a08:	10800317 	ldw	r2,12(r2)
   18a0c:	e13ffc17 	ldw	r4,-16(fp)
   18a10:	e17ffd17 	ldw	r5,-12(fp)
   18a14:	e1bffe17 	ldw	r6,-8(fp)
   18a18:	e1ffff17 	ldw	r7,-4(fp)
   18a1c:	103ee83a 	callr	r2
   18a20:	00000106 	br	18a28 <open+0x104>
   18a24:	0005883a 	mov	r2,zero
   18a28:	e0bffa15 	stw	r2,-24(fp)
   18a2c:	00000206 	br	18a38 <open+0x114>
      }
    }
  }
  else
  {
    status = -ENODEV;
   18a30:	00bffb44 	movi	r2,-19
   18a34:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
   18a38:	e0bffa17 	ldw	r2,-24(fp)
   18a3c:	1000090e 	bge	r2,zero,18a64 <open+0x140>
  {
    alt_release_fd (index);  
   18a40:	e13ff917 	ldw	r4,-28(fp)
   18a44:	000d73c0 	call	d73c <alt_release_fd>
    ALT_ERRNO = -status;
   18a48:	00188080 	call	18808 <alt_get_errno>
   18a4c:	1007883a 	mov	r3,r2
   18a50:	e0bffa17 	ldw	r2,-24(fp)
   18a54:	0085c83a 	sub	r2,zero,r2
   18a58:	18800015 	stw	r2,0(r3)
    return -1;
   18a5c:	00bfffc4 	movi	r2,-1
   18a60:	00000106 	br	18a68 <open+0x144>
  }
  
  /* return the reference upon success */

  return index;
   18a64:	e0bff917 	ldw	r2,-28(fp)
}
   18a68:	e037883a 	mov	sp,fp
   18a6c:	dfc00117 	ldw	ra,4(sp)
   18a70:	df000017 	ldw	fp,0(sp)
   18a74:	dec00204 	addi	sp,sp,8
   18a78:	f800283a 	ret

00018a7c <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
   18a7c:	defffa04 	addi	sp,sp,-24
   18a80:	df000515 	stw	fp,20(sp)
   18a84:	df000504 	addi	fp,sp,20
   18a88:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   18a8c:	0005303a 	rdctl	r2,status
   18a90:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   18a94:	e0fffc17 	ldw	r3,-16(fp)
   18a98:	00bfff84 	movi	r2,-2
   18a9c:	1884703a 	and	r2,r3,r2
   18aa0:	1001703a 	wrctl	status,r2
  
  return context;
   18aa4:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
   18aa8:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
   18aac:	e0bfff17 	ldw	r2,-4(fp)
   18ab0:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
   18ab4:	e0bffd17 	ldw	r2,-12(fp)
   18ab8:	10800017 	ldw	r2,0(r2)
   18abc:	e0fffd17 	ldw	r3,-12(fp)
   18ac0:	18c00117 	ldw	r3,4(r3)
   18ac4:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
   18ac8:	e0bffd17 	ldw	r2,-12(fp)
   18acc:	10800117 	ldw	r2,4(r2)
   18ad0:	e0fffd17 	ldw	r3,-12(fp)
   18ad4:	18c00017 	ldw	r3,0(r3)
   18ad8:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
   18adc:	e0bffd17 	ldw	r2,-12(fp)
   18ae0:	e0fffd17 	ldw	r3,-12(fp)
   18ae4:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
   18ae8:	e0bffd17 	ldw	r2,-12(fp)
   18aec:	e0fffd17 	ldw	r3,-12(fp)
   18af0:	10c00015 	stw	r3,0(r2)
   18af4:	e0bffb17 	ldw	r2,-20(fp)
   18af8:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   18afc:	e0bffe17 	ldw	r2,-8(fp)
   18b00:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
   18b04:	e037883a 	mov	sp,fp
   18b08:	df000017 	ldw	fp,0(sp)
   18b0c:	dec00104 	addi	sp,sp,4
   18b10:	f800283a 	ret

00018b14 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
   18b14:	defffb04 	addi	sp,sp,-20
   18b18:	dfc00415 	stw	ra,16(sp)
   18b1c:	df000315 	stw	fp,12(sp)
   18b20:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
   18b24:	d0a03717 	ldw	r2,-32548(gp)
   18b28:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
   18b2c:	d0a82917 	ldw	r2,-24412(gp)
   18b30:	10800044 	addi	r2,r2,1
   18b34:	d0a82915 	stw	r2,-24412(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   18b38:	00002e06 	br	18bf4 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
   18b3c:	e0bffd17 	ldw	r2,-12(fp)
   18b40:	10800017 	ldw	r2,0(r2)
   18b44:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
   18b48:	e0bffd17 	ldw	r2,-12(fp)
   18b4c:	10800403 	ldbu	r2,16(r2)
   18b50:	10803fcc 	andi	r2,r2,255
   18b54:	10000426 	beq	r2,zero,18b68 <alt_tick+0x54>
   18b58:	d0a82917 	ldw	r2,-24412(gp)
   18b5c:	1000021e 	bne	r2,zero,18b68 <alt_tick+0x54>
    {
      alarm->rollover = 0;
   18b60:	e0bffd17 	ldw	r2,-12(fp)
   18b64:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
   18b68:	e0bffd17 	ldw	r2,-12(fp)
   18b6c:	10800217 	ldw	r2,8(r2)
   18b70:	d0e82917 	ldw	r3,-24412(gp)
   18b74:	18801d36 	bltu	r3,r2,18bec <alt_tick+0xd8>
   18b78:	e0bffd17 	ldw	r2,-12(fp)
   18b7c:	10800403 	ldbu	r2,16(r2)
   18b80:	10803fcc 	andi	r2,r2,255
   18b84:	1000191e 	bne	r2,zero,18bec <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
   18b88:	e0bffd17 	ldw	r2,-12(fp)
   18b8c:	10800317 	ldw	r2,12(r2)
   18b90:	e0fffd17 	ldw	r3,-12(fp)
   18b94:	18c00517 	ldw	r3,20(r3)
   18b98:	1809883a 	mov	r4,r3
   18b9c:	103ee83a 	callr	r2
   18ba0:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
   18ba4:	e0bfff17 	ldw	r2,-4(fp)
   18ba8:	1000031e 	bne	r2,zero,18bb8 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
   18bac:	e13ffd17 	ldw	r4,-12(fp)
   18bb0:	0018a7c0 	call	18a7c <alt_alarm_stop>
   18bb4:	00000d06 	br	18bec <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
   18bb8:	e0bffd17 	ldw	r2,-12(fp)
   18bbc:	10c00217 	ldw	r3,8(r2)
   18bc0:	e0bfff17 	ldw	r2,-4(fp)
   18bc4:	1887883a 	add	r3,r3,r2
   18bc8:	e0bffd17 	ldw	r2,-12(fp)
   18bcc:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
   18bd0:	e0bffd17 	ldw	r2,-12(fp)
   18bd4:	10c00217 	ldw	r3,8(r2)
   18bd8:	d0a82917 	ldw	r2,-24412(gp)
   18bdc:	1880032e 	bgeu	r3,r2,18bec <alt_tick+0xd8>
        {
          alarm->rollover = 1;
   18be0:	e0bffd17 	ldw	r2,-12(fp)
   18be4:	00c00044 	movi	r3,1
   18be8:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
   18bec:	e0bffe17 	ldw	r2,-8(fp)
   18bf0:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   18bf4:	e0fffd17 	ldw	r3,-12(fp)
   18bf8:	d0a03704 	addi	r2,gp,-32548
   18bfc:	18bfcf1e 	bne	r3,r2,18b3c <__alt_mem_Flash_flash_data+0xf4018b3c>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
   18c00:	000e9480 	call	e948 <OSTimeTick>
}
   18c04:	e037883a 	mov	sp,fp
   18c08:	dfc00117 	ldw	ra,4(sp)
   18c0c:	df000017 	ldw	fp,0(sp)
   18c10:	dec00204 	addi	sp,sp,8
   18c14:	f800283a 	ret

00018c18 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
   18c18:	deffff04 	addi	sp,sp,-4
   18c1c:	df000015 	stw	fp,0(sp)
   18c20:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
   18c24:	000170fa 	wrctl	ienable,zero
}
   18c28:	e037883a 	mov	sp,fp
   18c2c:	df000017 	ldw	fp,0(sp)
   18c30:	dec00104 	addi	sp,sp,4
   18c34:	f800283a 	ret

00018c38 <OSCtxSw>:

      /* 
       * Save the remaining registers to the stack. 
       */

      addi sp, sp, -44
   18c38:	defff504 	addi	sp,sp,-44
      bltu  sp, et, .Lstack_overflow

#endif

#if OS_THREAD_SAFE_NEWLIB
      ldw r3, %gprel(_impure_ptr)(gp)   /* load the pointer */
   18c3c:	d0e00b17 	ldw	r3,-32724(gp)
#endif /* OS_THREAD_SAFE_NEWLIB */

      ldw r4, %gprel(OSTCBCur)(gp)
   18c40:	d1282217 	ldw	r4,-24440(gp)

      stw ra,  0(sp)
   18c44:	dfc00015 	stw	ra,0(sp)
      stw fp,  4(sp)
   18c48:	df000115 	stw	fp,4(sp)
      stw r23, 8(sp)
   18c4c:	ddc00215 	stw	r23,8(sp)
      stw r22, 12(sp)
   18c50:	dd800315 	stw	r22,12(sp)
      stw r21, 16(sp)
   18c54:	dd400415 	stw	r21,16(sp)
      stw r20, 20(sp)
   18c58:	dd000515 	stw	r20,20(sp)
      stw r19, 24(sp)
   18c5c:	dcc00615 	stw	r19,24(sp)
      stw r18, 28(sp)
   18c60:	dc800715 	stw	r18,28(sp)
      stw r17, 32(sp)
   18c64:	dc400815 	stw	r17,32(sp)
      stw r16, 36(sp)
   18c68:	dc000915 	stw	r16,36(sp)
       * store the current value of _impure_ptr so it can be restored
       * later; _impure_ptr is asigned on a per task basis. It is used
       * by Newlib to achieve reentrancy.	
       */

      stw r3, 40(sp)                  /* save the impure pointer */
   18c6c:	d8c00a15 	stw	r3,40(sp)
      /* 
       * Save the current tasks stack pointer into the current tasks OS_TCB.
       * i.e. OSTCBCur->OSTCBStkPtr = sp;
       */

      stw sp, (r4)                  /* save the stack pointer (OSTCBStkPtr */
   18c70:	26c00015 	stw	sp,0(r4)

      /*
       * Call the user definable OSTaskSWHook()
       */

      call OSTaskSwHook
   18c74:	0018ea40 	call	18ea4 <OSTaskSwHook>
      /*
       * OSTCBCur = OSTCBHighRdy; 
       * OSPrioCur = OSPrioHighRdy; 
       */

      ldw r4, %gprel(OSTCBHighRdy)(gp)
   18c78:	d1281d17 	ldw	r4,-24460(gp)
      ldb r5, %gprel(OSPrioHighRdy)(gp)
   18c7c:	d1681507 	ldb	r5,-24492(gp)

      stw r4, %gprel(OSTCBCur)(gp)     /* set the current task to be the new task */
   18c80:	d1282215 	stw	r4,-24440(gp)
      stb r5, %gprel(OSPrioCur)(gp)    /* store the new task's priority as the current */
   18c84:	d1681545 	stb	r5,-24491(gp)

      /*
       * Set the stack pointer to point to the new task's stack
       */

      ldw sp, (r4) /* the stack pointer is the first entry in the OS_TCB structure */
   18c88:	26c00017 	ldw	sp,0(r4)
      /*
       * restore the value of _impure_ptr ; _impure_ptr is asigned on a 
       * per task basis. It is used by Newlib to achieve reentrancy.	
       */

      ldw r3, 40(sp)                  /* load the new impure pointer */
   18c8c:	d8c00a17 	ldw	r3,40(sp)

      /*
       * Restore the saved registers for the new task.
       */

      ldw ra,  0(sp)
   18c90:	dfc00017 	ldw	ra,0(sp)
      ldw fp,  4(sp)
   18c94:	df000117 	ldw	fp,4(sp)
      ldw r23, 8(sp)
   18c98:	ddc00217 	ldw	r23,8(sp)
      ldw r22, 12(sp)
   18c9c:	dd800317 	ldw	r22,12(sp)
      ldw r21, 16(sp)
   18ca0:	dd400417 	ldw	r21,16(sp)
      ldw r20, 20(sp)
   18ca4:	dd000517 	ldw	r20,20(sp)
      ldw r19, 24(sp)
   18ca8:	dcc00617 	ldw	r19,24(sp)
      ldw r18, 28(sp)
   18cac:	dc800717 	ldw	r18,28(sp)
      ldw r17, 32(sp)
   18cb0:	dc400817 	ldw	r17,32(sp)
      ldw r16, 36(sp)
   18cb4:	dc000917 	ldw	r16,36(sp)

#if OS_THREAD_SAFE_NEWLIB

      stw r3, %gprel(_impure_ptr)(gp) /* update _impure_ptr */
   18cb8:	d0e00b15 	stw	r3,-32724(gp)

      stw et, %gprel(alt_stack_limit_value)(gp)

#endif

      addi sp, sp, 44
   18cbc:	dec00b04 	addi	sp,sp,44

      /*
       * resume execution of the new task.
       */

      ret
   18cc0:	f800283a 	ret

00018cc4 <OSStartHighRdy>:

      /*
       * disable interrupts so that the scheduler doesn't run while
       * we're initialising this task.
       */  
      rdctl r18, status
   18cc4:	0025303a 	rdctl	r18,status
      subi  r17, zero, 2   /* r17 = 0xfffffffe */
   18cc8:	047fff84 	movi	r17,-2
      and   r18, r18, r17
   18ccc:	9464703a 	and	r18,r18,r17
      wrctl status, r18
   18cd0:	9001703a 	wrctl	status,r18

      /*
       * Call the user definable OSTaskSWHook()
       */

      call OSTaskSwHook
   18cd4:	0018ea40 	call	18ea4 <OSTaskSwHook>

      /* 
       * set OSRunning = TRUE.
       */

      movi r18, 1                    /* set r18 to the value 'TRUE' */
   18cd8:	04800044 	movi	r18,1
      stb r18, %gprel(OSRunning)(gp) /* save this to OSRunning */
   18cdc:	d4a81345 	stb	r18,-24499(gp)

      /*
       * start execution of the new task.
       */

      br 9b
   18ce0:	003fe506 	br	18c78 <__alt_mem_Flash_flash_data+0xf4018c78>

00018ce4 <OSStartTsk>:

OSStartTsk:
      /* This instruction is never executed.  Its here to make the
       * backtrace work right 
       */
      movi sp, 0
   18ce4:	06c00004 	movi	sp,0

      /* Enable interrupts */
      rdctl r2, status
   18ce8:	0005303a 	rdctl	r2,status
      ori   r2, r2, 0x1
   18cec:	10800054 	ori	r2,r2,1
      wrctl status, r2
   18cf0:	1001703a 	wrctl	status,r2

      ldw r2, 4(sp)
   18cf4:	d8800117 	ldw	r2,4(sp)
      ldw r4, 0(sp)
   18cf8:	d9000017 	ldw	r4,0(sp)

      addi sp, sp, 8
   18cfc:	dec00204 	addi	sp,sp,8

      callr r2
   18d00:	103ee83a 	callr	r2

      nop
   18d04:	0001883a 	nop

00018d08 <OSTaskStkInit>:
 *              been placed on the stack in the proper order.
 *
 ***********************************************************************************************/

OS_STK *OSTaskStkInit(void (*task)(void *pd), void *pdata, OS_STK *pstk, INT16U opt)
{
   18d08:	defff704 	addi	sp,sp,-36
   18d0c:	dfc00815 	stw	ra,32(sp)
   18d10:	df000715 	stw	fp,28(sp)
   18d14:	df000704 	addi	fp,sp,28
   18d18:	e13ffc15 	stw	r4,-16(fp)
   18d1c:	e17ffd15 	stw	r5,-12(fp)
   18d20:	e1bffe15 	stw	r6,-8(fp)
   18d24:	3805883a 	mov	r2,r7
   18d28:	e0bfff0d 	sth	r2,-4(fp)
    * create and initialise the impure pointer used for Newlib thread local storage.
    * This is only done if the C library is being used in a thread safe mode. Otherwise
    * a single reent structure is used for all threads, which saves memory.
    */

   local_impure_ptr = (struct _reent*)((((INT32U)(pstk)) & ~0x3) - sizeof(struct _reent));
   18d2c:	e0fffe17 	ldw	r3,-8(fp)
   18d30:	00bfff04 	movi	r2,-4
   18d34:	1884703a 	and	r2,r3,r2
   18d38:	10bef704 	addi	r2,r2,-1060
   18d3c:	e0bff915 	stw	r2,-28(fp)

   _REENT_INIT_PTR (local_impure_ptr);
   18d40:	e13ff917 	ldw	r4,-28(fp)
   18d44:	000b883a 	mov	r5,zero
   18d48:	01810904 	movi	r6,1060
   18d4c:	00060140 	call	6014 <memset>
   18d50:	e0bff917 	ldw	r2,-28(fp)
   18d54:	10c0bb04 	addi	r3,r2,748
   18d58:	e0bff917 	ldw	r2,-28(fp)
   18d5c:	10c00115 	stw	r3,4(r2)
   18d60:	e0bff917 	ldw	r2,-28(fp)
   18d64:	10c0d504 	addi	r3,r2,852
   18d68:	e0bff917 	ldw	r2,-28(fp)
   18d6c:	10c00215 	stw	r3,8(r2)
   18d70:	e0bff917 	ldw	r2,-28(fp)
   18d74:	10c0ef04 	addi	r3,r2,956
   18d78:	e0bff917 	ldw	r2,-28(fp)
   18d7c:	10c00315 	stw	r3,12(r2)
   18d80:	e0fff917 	ldw	r3,-28(fp)
   18d84:	008000b4 	movhi	r2,2
   18d88:	10a71f04 	addi	r2,r2,-25476
   18d8c:	18800d15 	stw	r2,52(r3)
   18d90:	e0bff917 	ldw	r2,-28(fp)
   18d94:	00c00044 	movi	r3,1
   18d98:	10c02915 	stw	r3,164(r2)
   18d9c:	10002a15 	stw	zero,168(r2)
   18da0:	e0bff917 	ldw	r2,-28(fp)
   18da4:	00ccc384 	movi	r3,13070
   18da8:	10c02b0d 	sth	r3,172(r2)
   18dac:	e0bff917 	ldw	r2,-28(fp)
   18db0:	00eaf344 	movi	r3,-21555
   18db4:	10c02b8d 	sth	r3,174(r2)
   18db8:	e0bff917 	ldw	r2,-28(fp)
   18dbc:	00c48d04 	movi	r3,4660
   18dc0:	10c02c0d 	sth	r3,176(r2)
   18dc4:	e0bff917 	ldw	r2,-28(fp)
   18dc8:	00f99b44 	movi	r3,-6547
   18dcc:	10c02c8d 	sth	r3,178(r2)
   18dd0:	e0bff917 	ldw	r2,-28(fp)
   18dd4:	00f7bb04 	movi	r3,-8468
   18dd8:	10c02d0d 	sth	r3,180(r2)
   18ddc:	e0bff917 	ldw	r2,-28(fp)
   18de0:	00c00144 	movi	r3,5
   18de4:	10c02d8d 	sth	r3,182(r2)
   18de8:	e0bff917 	ldw	r2,-28(fp)
   18dec:	00c002c4 	movi	r3,11
   18df0:	10c02e0d 	sth	r3,184(r2)
   /* 
    * create a stack frame at the top of the stack (leaving space for the 
    * reentrant data structure).
    */

   frame_pointer = (INT32U*) local_impure_ptr;
   18df4:	e0bff917 	ldw	r2,-28(fp)
   18df8:	e0bffa15 	stw	r2,-24(fp)
#else
   frame_pointer =   (INT32U*) (((INT32U)(pstk)) & ~0x3);
#endif /* OS_THREAD_SAFE_NEWLIB */
   stk = frame_pointer - 13;
   18dfc:	e0bffa17 	ldw	r2,-24(fp)
   18e00:	10bff304 	addi	r2,r2,-52
   18e04:	e0bffb15 	stw	r2,-20(fp)

   /* Now fill the stack frame. */

   stk[12] = (INT32U)task;            /* task address (ra) */
   18e08:	e0bffb17 	ldw	r2,-20(fp)
   18e0c:	10800c04 	addi	r2,r2,48
   18e10:	e0fffc17 	ldw	r3,-16(fp)
   18e14:	10c00015 	stw	r3,0(r2)
   stk[11] = (INT32U) pdata;          /* first register argument (r4) */
   18e18:	e0bffb17 	ldw	r2,-20(fp)
   18e1c:	10800b04 	addi	r2,r2,44
   18e20:	e0fffd17 	ldw	r3,-12(fp)
   18e24:	10c00015 	stw	r3,0(r2)

#if OS_THREAD_SAFE_NEWLIB
   stk[10] = (INT32U) local_impure_ptr; /* value of _impure_ptr for this thread */
   18e28:	e0bffb17 	ldw	r2,-20(fp)
   18e2c:	10800a04 	addi	r2,r2,40
   18e30:	e0fff917 	ldw	r3,-28(fp)
   18e34:	10c00015 	stw	r3,0(r2)
#endif /* OS_THREAD_SAFE_NEWLIB */
   stk[0]  = ((INT32U)&OSStartTsk) + 4;/* exception return address (ea) */  
   18e38:	008000b4 	movhi	r2,2
   18e3c:	10a33904 	addi	r2,r2,-29468
   18e40:	10c00104 	addi	r3,r2,4
   18e44:	e0bffb17 	ldw	r2,-20(fp)
   18e48:	10c00015 	stw	r3,0(r2)
    */
   __asm__ (".set OSTCBNext_OFFSET,%0" :: "i" (offsetof(OS_TCB, OSTCBNext)));
   __asm__ (".set OSTCBPrio_OFFSET,%0" :: "i" (offsetof(OS_TCB, OSTCBPrio)));
   __asm__ (".set OSTCBStkPtr_OFFSET,%0" :: "i" (offsetof(OS_TCB, OSTCBStkPtr)));
  
   return((OS_STK *)stk);
   18e4c:	e0bffb17 	ldw	r2,-20(fp)
}
   18e50:	e037883a 	mov	sp,fp
   18e54:	dfc00117 	ldw	ra,4(sp)
   18e58:	df000017 	ldw	fp,0(sp)
   18e5c:	dec00204 	addi	sp,sp,8
   18e60:	f800283a 	ret

00018e64 <OSTaskCreateHook>:
*
* Note(s)    : 1) Interrupts are disabled during this call.
*********************************************************************************************************
*/
void OSTaskCreateHook (OS_TCB *ptcb)
{
   18e64:	defffe04 	addi	sp,sp,-8
   18e68:	df000115 	stw	fp,4(sp)
   18e6c:	df000104 	addi	fp,sp,4
   18e70:	e13fff15 	stw	r4,-4(fp)
    ptcb = ptcb;                       /* Prevent compiler warning */
}
   18e74:	e037883a 	mov	sp,fp
   18e78:	df000017 	ldw	fp,0(sp)
   18e7c:	dec00104 	addi	sp,sp,4
   18e80:	f800283a 	ret

00018e84 <OSTaskDelHook>:
*
* Note(s)    : 1) Interrupts are disabled during this call.
*********************************************************************************************************
*/
void OSTaskDelHook (OS_TCB *ptcb)
{
   18e84:	defffe04 	addi	sp,sp,-8
   18e88:	df000115 	stw	fp,4(sp)
   18e8c:	df000104 	addi	fp,sp,4
   18e90:	e13fff15 	stw	r4,-4(fp)
    ptcb = ptcb;                       /* Prevent compiler warning                                     */
}
   18e94:	e037883a 	mov	sp,fp
   18e98:	df000017 	ldw	fp,0(sp)
   18e9c:	dec00104 	addi	sp,sp,4
   18ea0:	f800283a 	ret

00018ea4 <OSTaskSwHook>:
*                 will be 'switched in' (i.e. the highest priority task) and, 'OSTCBCur' points to the
*                 task being switched out (i.e. the preempted task).
*********************************************************************************************************
*/
void OSTaskSwHook (void)
{
   18ea4:	deffff04 	addi	sp,sp,-4
   18ea8:	df000015 	stw	fp,0(sp)
   18eac:	d839883a 	mov	fp,sp
}
   18eb0:	e037883a 	mov	sp,fp
   18eb4:	df000017 	ldw	fp,0(sp)
   18eb8:	dec00104 	addi	sp,sp,4
   18ebc:	f800283a 	ret

00018ec0 <OSTaskStatHook>:
*
* Arguments  : none
*********************************************************************************************************
*/
void OSTaskStatHook (void)
{
   18ec0:	deffff04 	addi	sp,sp,-4
   18ec4:	df000015 	stw	fp,0(sp)
   18ec8:	d839883a 	mov	fp,sp
}
   18ecc:	e037883a 	mov	sp,fp
   18ed0:	df000017 	ldw	fp,0(sp)
   18ed4:	dec00104 	addi	sp,sp,4
   18ed8:	f800283a 	ret

00018edc <OSTimeTickHook>:
#ifdef ALT_INICHE
void cticks_hook(void);
#endif

void OSTimeTickHook (void)
{
   18edc:	deffff04 	addi	sp,sp,-4
   18ee0:	df000015 	stw	fp,0(sp)
   18ee4:	d839883a 	mov	fp,sp
    
#ifdef ALT_INICHE
    /* Service the Interniche timer */
    cticks_hook();
#endif
}
   18ee8:	e037883a 	mov	sp,fp
   18eec:	df000017 	ldw	fp,0(sp)
   18ef0:	dec00104 	addi	sp,sp,4
   18ef4:	f800283a 	ret

00018ef8 <OSInitHookBegin>:

void OSInitHookBegin(void)
{
   18ef8:	deffff04 	addi	sp,sp,-4
   18efc:	df000015 	stw	fp,0(sp)
   18f00:	d839883a 	mov	fp,sp
#if OS_TMR_EN > 0
    OSTmrCtr = 0;
#endif
}
   18f04:	e037883a 	mov	sp,fp
   18f08:	df000017 	ldw	fp,0(sp)
   18f0c:	dec00104 	addi	sp,sp,4
   18f10:	f800283a 	ret

00018f14 <OSInitHookEnd>:

void OSInitHookEnd(void)
{
   18f14:	deffff04 	addi	sp,sp,-4
   18f18:	df000015 	stw	fp,0(sp)
   18f1c:	d839883a 	mov	fp,sp
}
   18f20:	e037883a 	mov	sp,fp
   18f24:	df000017 	ldw	fp,0(sp)
   18f28:	dec00104 	addi	sp,sp,4
   18f2c:	f800283a 	ret

00018f30 <OSTaskIdleHook>:

void OSTaskIdleHook(void)
{
   18f30:	deffff04 	addi	sp,sp,-4
   18f34:	df000015 	stw	fp,0(sp)
   18f38:	d839883a 	mov	fp,sp
}
   18f3c:	e037883a 	mov	sp,fp
   18f40:	df000017 	ldw	fp,0(sp)
   18f44:	dec00104 	addi	sp,sp,4
   18f48:	f800283a 	ret

00018f4c <OSTCBInitHook>:

void OSTCBInitHook(OS_TCB *ptcb)
{
   18f4c:	defffe04 	addi	sp,sp,-8
   18f50:	df000115 	stw	fp,4(sp)
   18f54:	df000104 	addi	fp,sp,4
   18f58:	e13fff15 	stw	r4,-4(fp)
}
   18f5c:	e037883a 	mov	sp,fp
   18f60:	df000017 	ldw	fp,0(sp)
   18f64:	dec00104 	addi	sp,sp,4
   18f68:	f800283a 	ret

00018f6c <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
   18f6c:	defffb04 	addi	sp,sp,-20
   18f70:	dfc00415 	stw	ra,16(sp)
   18f74:	df000315 	stw	fp,12(sp)
   18f78:	df000304 	addi	fp,sp,12
   18f7c:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
   18f80:	008000b4 	movhi	r2,2
   18f84:	10aebf04 	addi	r2,r2,-17668
   18f88:	10800017 	ldw	r2,0(r2)
   18f8c:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   18f90:	00003106 	br	19058 <alt_find_file+0xec>
  {
    len = strlen(next->name);
   18f94:	e0bffd17 	ldw	r2,-12(fp)
   18f98:	10800217 	ldw	r2,8(r2)
   18f9c:	1009883a 	mov	r4,r2
   18fa0:	00073800 	call	7380 <strlen>
   18fa4:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
   18fa8:	e0bffd17 	ldw	r2,-12(fp)
   18fac:	10c00217 	ldw	r3,8(r2)
   18fb0:	e0bffe17 	ldw	r2,-8(fp)
   18fb4:	10bfffc4 	addi	r2,r2,-1
   18fb8:	1885883a 	add	r2,r3,r2
   18fbc:	10800003 	ldbu	r2,0(r2)
   18fc0:	10803fcc 	andi	r2,r2,255
   18fc4:	1080201c 	xori	r2,r2,128
   18fc8:	10bfe004 	addi	r2,r2,-128
   18fcc:	10800bd8 	cmpnei	r2,r2,47
   18fd0:	1000031e 	bne	r2,zero,18fe0 <alt_find_file+0x74>
    {
      len -= 1;
   18fd4:	e0bffe17 	ldw	r2,-8(fp)
   18fd8:	10bfffc4 	addi	r2,r2,-1
   18fdc:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   18fe0:	e0bffe17 	ldw	r2,-8(fp)
   18fe4:	e0ffff17 	ldw	r3,-4(fp)
   18fe8:	1885883a 	add	r2,r3,r2
   18fec:	10800003 	ldbu	r2,0(r2)
   18ff0:	10803fcc 	andi	r2,r2,255
   18ff4:	1080201c 	xori	r2,r2,128
   18ff8:	10bfe004 	addi	r2,r2,-128
   18ffc:	10800be0 	cmpeqi	r2,r2,47
   19000:	1000081e 	bne	r2,zero,19024 <alt_find_file+0xb8>
   19004:	e0bffe17 	ldw	r2,-8(fp)
   19008:	e0ffff17 	ldw	r3,-4(fp)
   1900c:	1885883a 	add	r2,r3,r2
   19010:	10800003 	ldbu	r2,0(r2)
   19014:	10803fcc 	andi	r2,r2,255
   19018:	1080201c 	xori	r2,r2,128
   1901c:	10bfe004 	addi	r2,r2,-128
   19020:	10000a1e 	bne	r2,zero,1904c <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
   19024:	e0bffd17 	ldw	r2,-12(fp)
   19028:	10c00217 	ldw	r3,8(r2)
   1902c:	e0bffe17 	ldw	r2,-8(fp)
   19030:	1809883a 	mov	r4,r3
   19034:	e17fff17 	ldw	r5,-4(fp)
   19038:	100d883a 	mov	r6,r2
   1903c:	00192f00 	call	192f0 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   19040:	1000021e 	bne	r2,zero,1904c <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
   19044:	e0bffd17 	ldw	r2,-12(fp)
   19048:	00000806 	br	1906c <alt_find_file+0x100>
    }
    next = (alt_dev*) next->llist.next;
   1904c:	e0bffd17 	ldw	r2,-12(fp)
   19050:	10800017 	ldw	r2,0(r2)
   19054:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   19058:	e0fffd17 	ldw	r3,-12(fp)
   1905c:	008000b4 	movhi	r2,2
   19060:	10aebf04 	addi	r2,r2,-17668
   19064:	18bfcb1e 	bne	r3,r2,18f94 <__alt_mem_Flash_flash_data+0xf4018f94>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
   19068:	0005883a 	mov	r2,zero
}
   1906c:	e037883a 	mov	sp,fp
   19070:	dfc00117 	ldw	ra,4(sp)
   19074:	df000017 	ldw	fp,0(sp)
   19078:	dec00204 	addi	sp,sp,8
   1907c:	f800283a 	ret

00019080 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
   19080:	defff904 	addi	sp,sp,-28
   19084:	dfc00615 	stw	ra,24(sp)
   19088:	df000515 	stw	fp,20(sp)
   1908c:	df000504 	addi	fp,sp,20
   19090:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
   19094:	00bffa04 	movi	r2,-24
   19098:	e0bffc15 	stw	r2,-16(fp)
  /* 
   * Take the alt_fd_list_lock semaphore in order to avoid races when 
   * accessing the file descriptor pool.
   */
  
  ALT_SEM_PEND(alt_fd_list_lock, 0);
   1909c:	008000b4 	movhi	r2,2
   190a0:	10b6ba04 	addi	r2,r2,-9496
   190a4:	10800017 	ldw	r2,0(r2)
   190a8:	e0bffd15 	stw	r2,-12(fp)
   190ac:	e03ffe0d 	sth	zero,-8(fp)
   190b0:	e0fffe0b 	ldhu	r3,-8(fp)
   190b4:	e0bffe84 	addi	r2,fp,-6
   190b8:	e13ffd17 	ldw	r4,-12(fp)
   190bc:	180b883a 	mov	r5,r3
   190c0:	100d883a 	mov	r6,r2
   190c4:	00133e40 	call	133e4 <OSSemPend>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   190c8:	e03ffb15 	stw	zero,-20(fp)
   190cc:	00001d06 	br	19144 <alt_get_fd+0xc4>
  {
    if (!alt_fd_list[i].dev)
   190d0:	008000b4 	movhi	r2,2
   190d4:	10a95304 	addi	r2,r2,-23220
   190d8:	e0fffb17 	ldw	r3,-20(fp)
   190dc:	18c00324 	muli	r3,r3,12
   190e0:	10c5883a 	add	r2,r2,r3
   190e4:	10800017 	ldw	r2,0(r2)
   190e8:	1000131e 	bne	r2,zero,19138 <alt_get_fd+0xb8>
    {
      alt_fd_list[i].dev = dev;
   190ec:	008000b4 	movhi	r2,2
   190f0:	10a95304 	addi	r2,r2,-23220
   190f4:	e0fffb17 	ldw	r3,-20(fp)
   190f8:	18c00324 	muli	r3,r3,12
   190fc:	10c5883a 	add	r2,r2,r3
   19100:	e0ffff17 	ldw	r3,-4(fp)
   19104:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
   19108:	008000b4 	movhi	r2,2
   1910c:	10aec304 	addi	r2,r2,-17652
   19110:	10c00017 	ldw	r3,0(r2)
   19114:	e0bffb17 	ldw	r2,-20(fp)
   19118:	1880040e 	bge	r3,r2,1912c <alt_get_fd+0xac>
      {
        alt_max_fd = i;
   1911c:	008000b4 	movhi	r2,2
   19120:	10aec304 	addi	r2,r2,-17652
   19124:	e0fffb17 	ldw	r3,-20(fp)
   19128:	10c00015 	stw	r3,0(r2)
      }
      rc = i;
   1912c:	e0bffb17 	ldw	r2,-20(fp)
   19130:	e0bffc15 	stw	r2,-16(fp)
      goto alt_get_fd_exit;
   19134:	00000606 	br	19150 <alt_get_fd+0xd0>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   19138:	e0bffb17 	ldw	r2,-20(fp)
   1913c:	10800044 	addi	r2,r2,1
   19140:	e0bffb15 	stw	r2,-20(fp)
   19144:	e0bffb17 	ldw	r2,-20(fp)
   19148:	10800810 	cmplti	r2,r2,32
   1914c:	103fe01e 	bne	r2,zero,190d0 <__alt_mem_Flash_flash_data+0xf40190d0>
  /*
   * Release the alt_fd_list_lock semaphore now that we are done with the
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);
   19150:	008000b4 	movhi	r2,2
   19154:	10b6ba04 	addi	r2,r2,-9496
   19158:	10800017 	ldw	r2,0(r2)
   1915c:	1009883a 	mov	r4,r2
   19160:	00137b80 	call	137b8 <OSSemPost>

  return rc;
   19164:	e0bffc17 	ldw	r2,-16(fp)
}
   19168:	e037883a 	mov	sp,fp
   1916c:	dfc00117 	ldw	ra,4(sp)
   19170:	df000017 	ldw	fp,0(sp)
   19174:	dec00204 	addi	sp,sp,8
   19178:	f800283a 	ret

0001917c <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
   1917c:	defffb04 	addi	sp,sp,-20
   19180:	df000415 	stw	fp,16(sp)
   19184:	df000404 	addi	fp,sp,16
   19188:	e13ffe15 	stw	r4,-8(fp)
   1918c:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
   19190:	e0bfff17 	ldw	r2,-4(fp)
   19194:	10840070 	cmpltui	r2,r2,4097
   19198:	1000021e 	bne	r2,zero,191a4 <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
   1919c:	00840004 	movi	r2,4096
   191a0:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
   191a4:	e0fffe17 	ldw	r3,-8(fp)
   191a8:	e0bfff17 	ldw	r2,-4(fp)
   191ac:	1885883a 	add	r2,r3,r2
   191b0:	e0bffd15 	stw	r2,-12(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
   191b4:	e0bffe17 	ldw	r2,-8(fp)
   191b8:	e0bffc15 	stw	r2,-16(fp)
   191bc:	00000506 	br	191d4 <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
   191c0:	e0bffc17 	ldw	r2,-16(fp)
   191c4:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
   191c8:	e0bffc17 	ldw	r2,-16(fp)
   191cc:	10800804 	addi	r2,r2,32
   191d0:	e0bffc15 	stw	r2,-16(fp)
   191d4:	e0fffc17 	ldw	r3,-16(fp)
   191d8:	e0bffd17 	ldw	r2,-12(fp)
   191dc:	18bff836 	bltu	r3,r2,191c0 <__alt_mem_Flash_flash_data+0xf40191c0>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
   191e0:	e0bffe17 	ldw	r2,-8(fp)
   191e4:	108007cc 	andi	r2,r2,31
   191e8:	10000226 	beq	r2,zero,191f4 <alt_icache_flush+0x78>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
   191ec:	e0bffc17 	ldw	r2,-16(fp)
   191f0:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
   191f4:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
   191f8:	e037883a 	mov	sp,fp
   191fc:	df000017 	ldw	fp,0(sp)
   19200:	dec00104 	addi	sp,sp,4
   19204:	f800283a 	ret

00019208 <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
   19208:	defffe04 	addi	sp,sp,-8
   1920c:	df000115 	stw	fp,4(sp)
   19210:	df000104 	addi	fp,sp,4
   19214:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
   19218:	e0bfff17 	ldw	r2,-4(fp)
   1921c:	10bffe84 	addi	r2,r2,-6
   19220:	10c00428 	cmpgeui	r3,r2,16
   19224:	18001a1e 	bne	r3,zero,19290 <alt_exception_cause_generated_bad_addr+0x88>
   19228:	100690ba 	slli	r3,r2,2
   1922c:	008000b4 	movhi	r2,2
   19230:	10a49004 	addi	r2,r2,-28096
   19234:	1885883a 	add	r2,r3,r2
   19238:	10800017 	ldw	r2,0(r2)
   1923c:	1000683a 	jmp	r2
   19240:	00019280 	call	1928 <___vfprintf_internal_r+0xbf0>
   19244:	00019280 	call	1928 <___vfprintf_internal_r+0xbf0>
   19248:	00019290 	cmplti	zero,zero,1610
   1924c:	00019290 	cmplti	zero,zero,1610
   19250:	00019290 	cmplti	zero,zero,1610
   19254:	00019280 	call	1928 <___vfprintf_internal_r+0xbf0>
   19258:	00019288 	cmpgei	zero,zero,1610
   1925c:	00019290 	cmplti	zero,zero,1610
   19260:	00019280 	call	1928 <___vfprintf_internal_r+0xbf0>
   19264:	00019280 	call	1928 <___vfprintf_internal_r+0xbf0>
   19268:	00019290 	cmplti	zero,zero,1610
   1926c:	00019280 	call	1928 <___vfprintf_internal_r+0xbf0>
   19270:	00019288 	cmpgei	zero,zero,1610
   19274:	00019290 	cmplti	zero,zero,1610
   19278:	00019290 	cmplti	zero,zero,1610
   1927c:	00019280 	call	1928 <___vfprintf_internal_r+0xbf0>
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
   19280:	00800044 	movi	r2,1
   19284:	00000306 	br	19294 <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
   19288:	0005883a 	mov	r2,zero
   1928c:	00000106 	br	19294 <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
   19290:	0005883a 	mov	r2,zero
  }
}
   19294:	e037883a 	mov	sp,fp
   19298:	df000017 	ldw	fp,0(sp)
   1929c:	dec00104 	addi	sp,sp,4
   192a0:	f800283a 	ret

000192a4 <atexit>:
   192a4:	200b883a 	mov	r5,r4
   192a8:	000d883a 	mov	r6,zero
   192ac:	0009883a 	mov	r4,zero
   192b0:	000f883a 	mov	r7,zero
   192b4:	001936c1 	jmpi	1936c <__register_exitproc>

000192b8 <exit>:
   192b8:	defffe04 	addi	sp,sp,-8
   192bc:	000b883a 	mov	r5,zero
   192c0:	dc000015 	stw	r16,0(sp)
   192c4:	dfc00115 	stw	ra,4(sp)
   192c8:	2021883a 	mov	r16,r4
   192cc:	00194800 	call	19480 <__call_exitprocs>
   192d0:	008000b4 	movhi	r2,2
   192d4:	10aeb904 	addi	r2,r2,-17692
   192d8:	11000017 	ldw	r4,0(r2)
   192dc:	20800f17 	ldw	r2,60(r4)
   192e0:	10000126 	beq	r2,zero,192e8 <exit+0x30>
   192e4:	103ee83a 	callr	r2
   192e8:	8009883a 	mov	r4,r16
   192ec:	00196140 	call	19614 <_exit>

000192f0 <memcmp>:
   192f0:	01c000c4 	movi	r7,3
   192f4:	3980192e 	bgeu	r7,r6,1935c <memcmp+0x6c>
   192f8:	2144b03a 	or	r2,r4,r5
   192fc:	11c4703a 	and	r2,r2,r7
   19300:	10000f26 	beq	r2,zero,19340 <memcmp+0x50>
   19304:	20800003 	ldbu	r2,0(r4)
   19308:	28c00003 	ldbu	r3,0(r5)
   1930c:	10c0151e 	bne	r2,r3,19364 <memcmp+0x74>
   19310:	31bfff84 	addi	r6,r6,-2
   19314:	01ffffc4 	movi	r7,-1
   19318:	00000406 	br	1932c <memcmp+0x3c>
   1931c:	20800003 	ldbu	r2,0(r4)
   19320:	28c00003 	ldbu	r3,0(r5)
   19324:	31bfffc4 	addi	r6,r6,-1
   19328:	10c00e1e 	bne	r2,r3,19364 <memcmp+0x74>
   1932c:	21000044 	addi	r4,r4,1
   19330:	29400044 	addi	r5,r5,1
   19334:	31fff91e 	bne	r6,r7,1931c <__alt_mem_Flash_flash_data+0xf401931c>
   19338:	0005883a 	mov	r2,zero
   1933c:	f800283a 	ret
   19340:	20c00017 	ldw	r3,0(r4)
   19344:	28800017 	ldw	r2,0(r5)
   19348:	1880041e 	bne	r3,r2,1935c <memcmp+0x6c>
   1934c:	31bfff04 	addi	r6,r6,-4
   19350:	21000104 	addi	r4,r4,4
   19354:	29400104 	addi	r5,r5,4
   19358:	39bff936 	bltu	r7,r6,19340 <__alt_mem_Flash_flash_data+0xf4019340>
   1935c:	303fe91e 	bne	r6,zero,19304 <__alt_mem_Flash_flash_data+0xf4019304>
   19360:	003ff506 	br	19338 <__alt_mem_Flash_flash_data+0xf4019338>
   19364:	10c5c83a 	sub	r2,r2,r3
   19368:	f800283a 	ret

0001936c <__register_exitproc>:
   1936c:	008000b4 	movhi	r2,2
   19370:	defffa04 	addi	sp,sp,-24
   19374:	10aeb904 	addi	r2,r2,-17692
   19378:	dc000315 	stw	r16,12(sp)
   1937c:	14000017 	ldw	r16,0(r2)
   19380:	dc400415 	stw	r17,16(sp)
   19384:	dfc00515 	stw	ra,20(sp)
   19388:	80805217 	ldw	r2,328(r16)
   1938c:	2023883a 	mov	r17,r4
   19390:	10003626 	beq	r2,zero,1946c <__register_exitproc+0x100>
   19394:	10c00117 	ldw	r3,4(r2)
   19398:	010007c4 	movi	r4,31
   1939c:	20c00e16 	blt	r4,r3,193d8 <__register_exitproc+0x6c>
   193a0:	1a400044 	addi	r9,r3,1
   193a4:	8800211e 	bne	r17,zero,1942c <__register_exitproc+0xc0>
   193a8:	18c00084 	addi	r3,r3,2
   193ac:	18c7883a 	add	r3,r3,r3
   193b0:	18c7883a 	add	r3,r3,r3
   193b4:	12400115 	stw	r9,4(r2)
   193b8:	10c7883a 	add	r3,r2,r3
   193bc:	19400015 	stw	r5,0(r3)
   193c0:	0005883a 	mov	r2,zero
   193c4:	dfc00517 	ldw	ra,20(sp)
   193c8:	dc400417 	ldw	r17,16(sp)
   193cc:	dc000317 	ldw	r16,12(sp)
   193d0:	dec00604 	addi	sp,sp,24
   193d4:	f800283a 	ret
   193d8:	00800034 	movhi	r2,0
   193dc:	10800004 	addi	r2,r2,0
   193e0:	10002526 	beq	r2,zero,19478 <__register_exitproc+0x10c>
   193e4:	01006404 	movi	r4,400
   193e8:	d9400015 	stw	r5,0(sp)
   193ec:	d9800115 	stw	r6,4(sp)
   193f0:	d9c00215 	stw	r7,8(sp)
   193f4:	00000000 	call	0 <__reset>
   193f8:	d9400017 	ldw	r5,0(sp)
   193fc:	d9800117 	ldw	r6,4(sp)
   19400:	d9c00217 	ldw	r7,8(sp)
   19404:	10001c26 	beq	r2,zero,19478 <__register_exitproc+0x10c>
   19408:	80c05217 	ldw	r3,328(r16)
   1940c:	10000115 	stw	zero,4(r2)
   19410:	02400044 	movi	r9,1
   19414:	10c00015 	stw	r3,0(r2)
   19418:	80805215 	stw	r2,328(r16)
   1941c:	10006215 	stw	zero,392(r2)
   19420:	10006315 	stw	zero,396(r2)
   19424:	0007883a 	mov	r3,zero
   19428:	883fdf26 	beq	r17,zero,193a8 <__alt_mem_Flash_flash_data+0xf40193a8>
   1942c:	18d1883a 	add	r8,r3,r3
   19430:	4211883a 	add	r8,r8,r8
   19434:	1211883a 	add	r8,r2,r8
   19438:	41802215 	stw	r6,136(r8)
   1943c:	01000044 	movi	r4,1
   19440:	11806217 	ldw	r6,392(r2)
   19444:	20c8983a 	sll	r4,r4,r3
   19448:	310cb03a 	or	r6,r6,r4
   1944c:	11806215 	stw	r6,392(r2)
   19450:	41c04215 	stw	r7,264(r8)
   19454:	01800084 	movi	r6,2
   19458:	89bfd31e 	bne	r17,r6,193a8 <__alt_mem_Flash_flash_data+0xf40193a8>
   1945c:	11806317 	ldw	r6,396(r2)
   19460:	3108b03a 	or	r4,r6,r4
   19464:	11006315 	stw	r4,396(r2)
   19468:	003fcf06 	br	193a8 <__alt_mem_Flash_flash_data+0xf40193a8>
   1946c:	80805304 	addi	r2,r16,332
   19470:	80805215 	stw	r2,328(r16)
   19474:	003fc706 	br	19394 <__alt_mem_Flash_flash_data+0xf4019394>
   19478:	00bfffc4 	movi	r2,-1
   1947c:	003fd106 	br	193c4 <__alt_mem_Flash_flash_data+0xf40193c4>

00019480 <__call_exitprocs>:
   19480:	008000b4 	movhi	r2,2
   19484:	10aeb904 	addi	r2,r2,-17692
   19488:	10800017 	ldw	r2,0(r2)
   1948c:	defff404 	addi	sp,sp,-48
   19490:	dd800815 	stw	r22,32(sp)
   19494:	d8800015 	stw	r2,0(sp)
   19498:	10805204 	addi	r2,r2,328
   1949c:	dd000615 	stw	r20,24(sp)
   194a0:	dc800415 	stw	r18,16(sp)
   194a4:	dfc00b15 	stw	ra,44(sp)
   194a8:	df000a15 	stw	fp,40(sp)
   194ac:	ddc00915 	stw	r23,36(sp)
   194b0:	dd400715 	stw	r21,28(sp)
   194b4:	dcc00515 	stw	r19,20(sp)
   194b8:	dc400315 	stw	r17,12(sp)
   194bc:	dc000215 	stw	r16,8(sp)
   194c0:	2025883a 	mov	r18,r4
   194c4:	2829883a 	mov	r20,r5
   194c8:	d8800115 	stw	r2,4(sp)
   194cc:	05bfffc4 	movi	r22,-1
   194d0:	d8800017 	ldw	r2,0(sp)
   194d4:	14c05217 	ldw	r19,328(r2)
   194d8:	98001d26 	beq	r19,zero,19550 <__call_exitprocs+0xd0>
   194dc:	dd400117 	ldw	r21,4(sp)
   194e0:	98800117 	ldw	r2,4(r19)
   194e4:	173fffc4 	addi	fp,r2,-1
   194e8:	e0000d16 	blt	fp,zero,19520 <__call_exitprocs+0xa0>
   194ec:	14000044 	addi	r16,r2,1
   194f0:	8421883a 	add	r16,r16,r16
   194f4:	8421883a 	add	r16,r16,r16
   194f8:	84402004 	addi	r17,r16,128
   194fc:	9c63883a 	add	r17,r19,r17
   19500:	9c21883a 	add	r16,r19,r16
   19504:	a0001e26 	beq	r20,zero,19580 <__call_exitprocs+0x100>
   19508:	80804017 	ldw	r2,256(r16)
   1950c:	15001c26 	beq	r2,r20,19580 <__call_exitprocs+0x100>
   19510:	e73fffc4 	addi	fp,fp,-1
   19514:	843fff04 	addi	r16,r16,-4
   19518:	8c7fff04 	addi	r17,r17,-4
   1951c:	e5bff91e 	bne	fp,r22,19504 <__alt_mem_Flash_flash_data+0xf4019504>
   19520:	00800034 	movhi	r2,0
   19524:	10800004 	addi	r2,r2,0
   19528:	10000926 	beq	r2,zero,19550 <__call_exitprocs+0xd0>
   1952c:	98800117 	ldw	r2,4(r19)
   19530:	1000311e 	bne	r2,zero,195f8 <__call_exitprocs+0x178>
   19534:	98800017 	ldw	r2,0(r19)
   19538:	10003426 	beq	r2,zero,1960c <__call_exitprocs+0x18c>
   1953c:	9809883a 	mov	r4,r19
   19540:	a8800015 	stw	r2,0(r21)
   19544:	00000000 	call	0 <__reset>
   19548:	acc00017 	ldw	r19,0(r21)
   1954c:	983fe41e 	bne	r19,zero,194e0 <__alt_mem_Flash_flash_data+0xf40194e0>
   19550:	dfc00b17 	ldw	ra,44(sp)
   19554:	df000a17 	ldw	fp,40(sp)
   19558:	ddc00917 	ldw	r23,36(sp)
   1955c:	dd800817 	ldw	r22,32(sp)
   19560:	dd400717 	ldw	r21,28(sp)
   19564:	dd000617 	ldw	r20,24(sp)
   19568:	dcc00517 	ldw	r19,20(sp)
   1956c:	dc800417 	ldw	r18,16(sp)
   19570:	dc400317 	ldw	r17,12(sp)
   19574:	dc000217 	ldw	r16,8(sp)
   19578:	dec00c04 	addi	sp,sp,48
   1957c:	f800283a 	ret
   19580:	98800117 	ldw	r2,4(r19)
   19584:	80c00017 	ldw	r3,0(r16)
   19588:	10bfffc4 	addi	r2,r2,-1
   1958c:	17001526 	beq	r2,fp,195e4 <__call_exitprocs+0x164>
   19590:	80000015 	stw	zero,0(r16)
   19594:	183fde26 	beq	r3,zero,19510 <__alt_mem_Flash_flash_data+0xf4019510>
   19598:	00800044 	movi	r2,1
   1959c:	1708983a 	sll	r4,r2,fp
   195a0:	98806217 	ldw	r2,392(r19)
   195a4:	9dc00117 	ldw	r23,4(r19)
   195a8:	2084703a 	and	r2,r4,r2
   195ac:	1000061e 	bne	r2,zero,195c8 <__call_exitprocs+0x148>
   195b0:	183ee83a 	callr	r3
   195b4:	98800117 	ldw	r2,4(r19)
   195b8:	15ffc51e 	bne	r2,r23,194d0 <__alt_mem_Flash_flash_data+0xf40194d0>
   195bc:	a8800017 	ldw	r2,0(r21)
   195c0:	14ffd326 	beq	r2,r19,19510 <__alt_mem_Flash_flash_data+0xf4019510>
   195c4:	003fc206 	br	194d0 <__alt_mem_Flash_flash_data+0xf40194d0>
   195c8:	98806317 	ldw	r2,396(r19)
   195cc:	2084703a 	and	r2,r4,r2
   195d0:	1000061e 	bne	r2,zero,195ec <__call_exitprocs+0x16c>
   195d4:	89400017 	ldw	r5,0(r17)
   195d8:	9009883a 	mov	r4,r18
   195dc:	183ee83a 	callr	r3
   195e0:	003ff406 	br	195b4 <__alt_mem_Flash_flash_data+0xf40195b4>
   195e4:	9f000115 	stw	fp,4(r19)
   195e8:	003fea06 	br	19594 <__alt_mem_Flash_flash_data+0xf4019594>
   195ec:	89000017 	ldw	r4,0(r17)
   195f0:	183ee83a 	callr	r3
   195f4:	003fef06 	br	195b4 <__alt_mem_Flash_flash_data+0xf40195b4>
   195f8:	98800017 	ldw	r2,0(r19)
   195fc:	982b883a 	mov	r21,r19
   19600:	1027883a 	mov	r19,r2
   19604:	983fb61e 	bne	r19,zero,194e0 <__alt_mem_Flash_flash_data+0xf40194e0>
   19608:	003fd106 	br	19550 <__alt_mem_Flash_flash_data+0xf4019550>
   1960c:	0005883a 	mov	r2,zero
   19610:	003ffa06 	br	195fc <__alt_mem_Flash_flash_data+0xf40195fc>

00019614 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
   19614:	defffd04 	addi	sp,sp,-12
   19618:	df000215 	stw	fp,8(sp)
   1961c:	df000204 	addi	fp,sp,8
   19620:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
   19624:	008000b4 	movhi	r2,2
   19628:	10b6c244 	addi	r2,r2,-9463
   1962c:	10000005 	stb	zero,0(r2)
   19630:	e0bfff17 	ldw	r2,-4(fp)
   19634:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
   19638:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
   1963c:	10000226 	beq	r2,zero,19648 <_exit+0x34>
    ALT_SIM_FAIL();
   19640:	002af070 	cmpltui	zero,zero,43969
   19644:	00000106 	br	1964c <_exit+0x38>
  } else {
    ALT_SIM_PASS();
   19648:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
   1964c:	003fff06 	br	1964c <__alt_mem_Flash_flash_data+0xf401964c>
