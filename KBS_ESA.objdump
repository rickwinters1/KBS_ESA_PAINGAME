
KBS_ESA.elf:     file format elf32-littlenios2
KBS_ESA.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00000244

Program Header:
    LOAD off    0x00001000 vaddr 0x00000000 paddr 0x00000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00000020 paddr 0x00000020 align 2**12
         filesz 0x00019bd0 memsz 0x00019bd0 flags r-x
    LOAD off    0x0001abf0 vaddr 0x00019bf0 paddr 0x0001baf0 align 2**12
         filesz 0x00001f00 memsz 0x00001f00 flags rw-
    LOAD off    0x0001d9f0 vaddr 0x0001d9f0 paddr 0x0001d9f0 align 2**12
         filesz 0x00000000 memsz 0x000093ec flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00000000  00000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000224  00000020  00000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         000193b0  00000244  00000244  00001244  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       000005fc  000195f4  000195f4  0001a5f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001f00  00019bf0  0001baf0  0001abf0  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          000093ec  0001d9f0  0001d9f0  0001d9f0  2**2
                  ALLOC, SMALL_DATA
  6 .SDRAM        00000000  00026ddc  00026ddc  0001caf0  2**0
                  CONTENTS
  7 .Flash_flash_data 00000000  0c000000  0c000000  0001caf0  2**0
                  CONTENTS
  8 .comment      00000023  00000000  00000000  0001caf0  2**0
                  CONTENTS, READONLY
  9 .debug_aranges 000010e8  00000000  00000000  0001cb18  2**3
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_info   0002f5eb  00000000  00000000  0001dc00  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 0000b2b9  00000000  00000000  0004d1eb  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0000e735  00000000  00000000  000584a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame  00003a0c  00000000  00000000  00066bdc  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    000053cf  00000000  00000000  0006a5e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    00016df9  00000000  00000000  0006f9b7  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_alt_sim_info 00000020  00000000  00000000  000867b0  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 000017d8  00000000  00000000  000867d0  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .thread_model 00000006  00000000  00000000  0008d7c8  2**0
                  CONTENTS, READONLY
 19 .cpu          00000005  00000000  00000000  0008d7ce  2**0
                  CONTENTS, READONLY
 20 .qsys         00000001  00000000  00000000  0008d7d3  2**0
                  CONTENTS, READONLY
 21 .simulation_enabled 00000001  00000000  00000000  0008d7d4  2**0
                  CONTENTS, READONLY
 22 .sysid_hash   00000004  00000000  00000000  0008d7d5  2**0
                  CONTENTS, READONLY
 23 .sysid_base   00000004  00000000  00000000  0008d7d9  2**0
                  CONTENTS, READONLY
 24 .sysid_time   00000004  00000000  00000000  0008d7dd  2**0
                  CONTENTS, READONLY
 25 .stderr_dev   00000009  00000000  00000000  0008d7e1  2**0
                  CONTENTS, READONLY
 26 .stdin_dev    00000009  00000000  00000000  0008d7ea  2**0
                  CONTENTS, READONLY
 27 .stdout_dev   00000009  00000000  00000000  0008d7f3  2**0
                  CONTENTS, READONLY
 28 .sopc_system_name 0000000b  00000000  00000000  0008d7fc  2**0
                  CONTENTS, READONLY
 29 .quartus_project_dir 0000005e  00000000  00000000  0008d807  2**0
                  CONTENTS, READONLY
 30 .jdi          0000abc5  00000000  00000000  0008d865  2**0
                  CONTENTS, READONLY
 31 .sopcinfo     001878b7  00000000  00000000  0009842a  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00000000 l    d  .entry	00000000 .entry
00000020 l    d  .exceptions	00000000 .exceptions
00000244 l    d  .text	00000000 .text
000195f4 l    d  .rodata	00000000 .rodata
00019bf0 l    d  .rwdata	00000000 .rwdata
0001d9f0 l    d  .bss	00000000 .bss
00026ddc l    d  .SDRAM	00000000 .SDRAM
0c000000 l    d  .Flash_flash_data	00000000 .Flash_flash_data
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 C:/Users/rickert/Documents/GitHub/KBS_ESA_bsp//obj/HAL/src/crt0.o
0000027c l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 specs.cpp
00000000 l    df *ABS*	00000000 spec.c
00000000 l    df *ABS*	00000000 Controller.c
00000000 l    df *ABS*	00000000 Game.c
00000000 l    df *ABS*	00000000 Menu.c
00000000 l    df *ABS*	00000000 hello_ucosii.c
00000000 l    df *ABS*	00000000 specs.cpp
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 vfprintf.c
0001967e l     O .rodata	00000010 zeroes.4255
00002c50 l     F .text	000000bc __sbprintf
0001968e l     O .rodata	00000010 blanks.4254
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 dtoa.c
00002e60 l     F .text	00000200 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
00004a1c l     F .text	00000008 __fp_lock
00004a24 l     F .text	00000008 __fp_unlock
00004a38 l     F .text	0000019c __sinit.part.1
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 impure.c
00019bf0 l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 locale.c
0001a034 l     O .rwdata	00000020 lc_ctype_charset
0001a014 l     O .rwdata	00000020 lc_message_charset
0001a054 l     O .rwdata	00000038 lconv
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mprec.c
000196c0 l     O .rodata	0000000c p05.2710
00000000 l    df *ABS*	00000000 s_fpclassify.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
000073bc l     F .text	000000fc __sprint_r.part.0
000197f4 l     O .rodata	00000010 blanks.4199
000197e4 l     O .rodata	00000010 zeroes.4200
000087c4 l     F .text	000000bc __sbprintf
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fputwc.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 wcrtomb.c
00000000 l    df *ABS*	00000000 wctomb_r.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
0000a84c l     F .text	0000006c udivmodsi4
00000000 l    df *ABS*	00000000 adddf3.c
00000000 l    df *ABS*	00000000 divdf3.c
00000000 l    df *ABS*	00000000 eqdf2.c
00000000 l    df *ABS*	00000000 gedf2.c
00000000 l    df *ABS*	00000000 ledf2.c
00000000 l    df *ABS*	00000000 muldf3.c
00000000 l    df *ABS*	00000000 subdf3.c
00000000 l    df *ABS*	00000000 fixdfsi.c
00000000 l    df *ABS*	00000000 floatsidf.c
00000000 l    df *ABS*	00000000 floatunsidf.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 alt_close.c
0000cf78 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
0000d098 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
0000d0c4 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
0000d1c4 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
0000d2b8 l     F .text	00000064 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
0000d39c l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_read.c
0000d594 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
0001ba64 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_write.c
0000d7f0 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_env_lock.c
0001ba68 l     O .rwdata	00000004 lockid
0001da20 l     O .bss	00000004 locks
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
0001ba6c l     O .rwdata	00000004 lockid
0001da28 l     O .bss	00000004 locks
00000000 l    df *ABS*	00000000 os_core.c
0000f224 l     F .text	00000044 OS_InitMisc
0000f268 l     F .text	00000068 OS_InitRdyList
0000f3c8 l     F .text	000000e0 OS_InitTCBList
0000f148 l     F .text	000000dc OS_InitEventList
0000f2d0 l     F .text	0000007c OS_InitTaskIdle
0000f34c l     F .text	0000007c OS_InitTaskStat
0000f628 l     F .text	00000070 OS_SchedNew
00000000 l    df *ABS*	00000000 os_dbg.c
00000000 l    df *ABS*	00000000 os_flag.c
0001142c l     F .text	00000110 OS_FlagTaskRdy
00011184 l     F .text	000001c4 OS_FlagBlock
00000000 l    df *ABS*	00000000 os_mem.c
00000000 l    df *ABS*	00000000 os_q.c
00000000 l    df *ABS*	00000000 os_sem.c
00000000 l    df *ABS*	00000000 os_task.c
00000000 l    df *ABS*	00000000 os_time.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
000158d4 l     F .text	00000038 alt_dev_reg
0001a63c l     O .rwdata	0000106c JTAG_UART
0001b6a8 l     O .rwdata	00000030 AV_Config
0001b6d8 l     O .rwdata	00000030 Audio_Subsystem_Audio
0001b708 l     O .rwdata	0000002c Char_LCD_16x2
0001b734 l     O .rwdata	0000002c IrDA
0001b760 l     O .rwdata	0000002c Expansion_JP5
0001b78c l     O .rwdata	0000002c Green_LEDs
0001b7b8 l     O .rwdata	0000002c HEX3_HEX0
0001b7e4 l     O .rwdata	0000002c HEX7_HEX4
0001b810 l     O .rwdata	0000002c Pushbuttons
0001b83c l     O .rwdata	0000002c Red_LEDs
0001b868 l     O .rwdata	0000002c Slider_Switches
0001b894 l     O .rwdata	00000038 PS2_Port
0001b8cc l     O .rwdata	00000038 PS2_Port_Dual
0001b904 l     O .rwdata	0000002c Serial_Port
0001b930 l     O .rwdata	00000034 USB
0001b964 l     O .rwdata	00000048 VGA_Subsystem_VGA_Char_Buffer
0001b9ac l     O .rwdata	00000054 VGA_Subsystem_VGA_Pixel_DMA
0001ba00 l     O .rwdata	0000002c SD_Card
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
00015fbc l     F .text	000002a8 altera_avalon_jtag_uart_irq
00016264 l     F .text	00000110 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
00016a3c l     F .text	00000078 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 altera_up_avalon_character_lcd.c
00000000 l    df *ABS*	00000000 altera_up_avalon_irda.c
00000000 l    df *ABS*	00000000 altera_up_avalon_parallel_port.c
00000000 l    df *ABS*	00000000 altera_up_avalon_ps2.c
00000000 l    df *ABS*	00000000 altera_up_avalon_rs232.c
00000000 l    df *ABS*	00000000 altera_up_avalon_video_character_buffer_with_dma.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
00018258 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
000184c4 l     F .text	000000c0 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_register.c
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
000187ac l     F .text	00000050 alt_get_errno
000187fc l     F .text	000000cc alt_file_locked
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 os_cpu_a.o
00000040 l       *ABS*	00000000 OSCtxSw_SWITCH_PC
00000000 l    df *ABS*	00000000 os_cpu_c.c
00000014 l       *ABS*	00000000 OSTCBNext_OFFSET
00000032 l       *ABS*	00000000 OSTCBPrio_OFFSET
00000000 l       *ABS*	00000000 OSTCBStkPtr_OFFSET
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
0001da8c g     O .bss	00000004 alt_instruction_exception_handler
00006f04 g     F .text	00000074 _mprec_log10
0001baba g     O .rwdata	00000002 OSTaskNameSize
00006ff0 g     F .text	0000008c __any_on
000091f0 g     F .text	00000054 _isatty_r
000196cc g     O .rodata	00000028 __mprec_tinytens
0000d4c0 g     F .text	000000d4 alt_main
00026cdc g     O .bss	00000100 alt_irq
00017618 g     F .text	0000005c alt_up_ps2_disable_read_interrupt
00009244 g     F .text	0000005c _lseek_r
00011c90 g     F .text	000000d0 OS_MemInit
0001baf0 g       *ABS*	00000000 __flash_rwdata_start
00015870 g     F .text	00000064 OSTimeSet
00016ba8 g     F .text	0000003c alt_up_character_lcd_send_cmd
0000bae0 g     F .text	00000084 .hidden __eqdf2
0000dea0 g     F .text	00000610 OSEventPendMulti
00026ddc g       *ABS*	00000000 __alt_heap_start
00018e08 g     F .text	00000020 OSTaskCreateHook
00000ca0 g     F .text	0000003c printf
0001ba92 g     O .rwdata	00000002 OSMboxEn
0000e504 g     F .text	0000007c OSIntEnter
00009b14 g     F .text	0000009c _wcrtomb_r
0000721c g     F .text	0000005c __sseek
00004d6c g     F .text	00000010 __sinit
00017fa0 g     F .text	00000100 alt_up_char_buffer_string
000099c0 g     F .text	00000138 __swbuf_r
00017438 g     F .text	00000034 read_CE_bit
0001baa2 g     O .rwdata	00000002 OSQEn
00005358 g     F .text	0000007c _setlocale_r
00004bd4 g     F .text	00000068 __sfmoreglue
0000db74 g     F .text	000000d0 __malloc_unlock
00018e64 g     F .text	0000001c OSTaskStatHook
000177bc g     F .text	000000a4 alt_up_ps2_read_data_byte_timeout
00017cb0 g     F .text	00000090 alt_up_rs232_read_fd
0001da30 g     O .bss	00000001 OSLockNesting
000006a4 g     F .text	0000009c menu
0001bae0 g     O .rwdata	00000002 OSDataSize
0001da31 g     O .bss	00000001 OSRunning
00017ed4 g     F .text	000000cc alt_up_char_buffer_draw
000092a0 g     F .text	0000015c memmove
00018e9c g     F .text	0000001c OSInitHookBegin
0001bad8 g     O .rwdata	00000002 OSTmrSize
00004d54 g     F .text	00000018 _cleanup
000060dc g     F .text	000000a8 _Balloc
0001ba30 g     O .rwdata	00000004 gameModeMenu
0001da34 g     O .bss	00000004 OSIdleCtr
0000bb64 g     F .text	000000e0 .hidden __gtdf2
00018bbc g     F .text	00000020 altera_nios2_gen2_irq_init
00018c88 g       .text	00000000 OSStartTsk
00000000  w      *UND*	00000000 __errno
00016b34 g     F .text	00000074 get_DDRAM_addr
0000f960 g     F .text	000002d4 OS_TCBInit
00000000 g     F .entry	0000001c __reset
0001bade g     O .rwdata	00000002 OSTmrWheelTblSize
00000020 g       *ABS*	00000000 __flash_exceptions_start
0001ba7e g     O .rwdata	00000002 OSEventSize
0001da38 g     O .bss	00000001 OSPrioHighRdy
00008cd8 g     F .text	00000058 _fstat_r
00018e28 g     F .text	00000020 OSTaskDelHook
0001da0c g     O .bss	00000004 errno
00007198 g     F .text	00000008 __seofread
00018c68 g       .text	00000000 OSStartHighRdy
00014174 g     F .text	000001ec OSTaskCreateExt
00010cd0 g     F .text	00000068 OSFlagPendGetFlagsRdy
0001babe g     O .rwdata	00000002 OSTaskStatStkSize
0000fdc0 g     F .text	00000308 OSFlagAccept
00012364 g     F .text	000000b8 OSQFlush
00011d60 g     F .text	00000140 OSQAccept
0001da18 g     O .bss	00000004 alt_argv
00023a2c g       *ABS*	00000000 _gp
00013fb8 g     F .text	000001bc OSTaskCreate
00013a78 g     F .text	00000540 OSTaskChangePrio
0001da2c g     O .bss	00000004 alt_heapsem
0000fc34 g     F .text	0000018c OSDebugInit
00014360 g     F .text	000003e0 OSTaskDel
0001a4bc g     O .rwdata	00000180 alt_fd_list
00023ab8 g     O .bss	00000370 OSFlagTbl
0000ef34 g     F .text	000000b4 OS_EventTaskRemove
00018404 g     F .text	00000090 alt_find_dev
00005e80 g     F .text	00000138 memcpy
0001baa8 g     O .rwdata	00000002 OSRdyTblSize
00016d44 g     F .text	00000050 alt_up_character_lcd_write_fd
000180a0 g     F .text	0000005c alt_up_char_buffer_clear
00004a2c g     F .text	0000000c _cleanup_r
0000cda0 g     F .text	000000d0 .hidden __floatsidf
00018584 g     F .text	00000078 alt_io_redirect
0000bc44 g     F .text	000000e0 .hidden __ltdf2
000195f4 g       *ABS*	00000000 __DTOR_END__
000172c4 g     F .text	00000090 alt_up_irda_write_fd
00017c3c g     F .text	00000074 alt_up_rs232_read_data
000191ac g     F .text	0000009c alt_exception_cause_generated_bad_addr
0000dc44 g     F .text	00000120 OSEventNameGet
0001ba8c g     O .rwdata	00000002 OSFlagMax
0000707c g     F .text	00000074 __fpclassifyd
00006e60 g     F .text	000000a4 __ratio
0000e580 g     F .text	000000f4 OSIntExit
000087a0 g     F .text	00000024 __vfiprintf_internal
0001bac6 g     O .rwdata	00000002 OSTCBSize
0001da39 g     O .bss	00000001 OSPrioCur
000170c0 g     F .text	00000040 alt_up_irda_get_used_space_in_read_FIFO
000164c8 g     F .text	000002b4 altera_avalon_jtag_uart_read
00000000  w      *UND*	00000000 malloc
00000c74 g     F .text	0000002c _printf_r
0000a968 g     F .text	00000008 .hidden __udivsi3
0000d214 g     F .text	000000a4 isatty
0001baac g     O .rwdata	00000002 OSStkWidth
0001971c g     O .rodata	000000c8 __mprec_tens
0001baa0 g     O .rwdata	00000002 OSPtrSize
000053d4 g     F .text	0000000c __locale_charset
0001ba80 g     O .rwdata	00000002 OSEventTblSize
00017064 g     F .text	0000005c alt_up_irda_disable_read_interrupt
00018bdc g       .text	00000000 OSCtxSw
00019120 g     F .text	0000008c alt_icache_flush
0001da08 g     O .bss	00000004 __malloc_top_pad
00000588 g     F .text	0000011c moveDown
0001da3c g     O .bss	00000004 OSTCBList
0001da10 g     O .bss	00000004 alt_fd_list_lock
0001ba3c g     O .rwdata	00000004 __mb_cur_max
00005404 g     F .text	0000000c _localeconv_r
00008d30 g     F .text	000004c0 __sfvwrite_r
000064e8 g     F .text	0000003c __i2b
00023e28 g     O .bss	00000c30 OSMemTbl
0001da40 g     O .bss	00000001 OSTickStepState
000070f0 g     F .text	00000054 _sbrk_r
0001dab8 g     O .bss	00002000 menu_stk
0001baa4 g     O .rwdata	00000002 OSQMax
00024a58 g     O .bss	00000800 OSTaskStatStk
000118c0 g     F .text	000000f8 OSMemNameGet
0001ba84 g     O .rwdata	00000002 OSFlagEn
000093fc g     F .text	0000005c _read_r
0001baca g     O .rwdata	00000002 OSTimeTickHookEn
00012884 g     F .text	00000168 OSQPost
0001153c g     F .text	000000a0 OS_FlagUnlink
0001ba5c g     O .rwdata	00000004 alt_max_fd
00017bb8 g     F .text	00000044 alt_up_rs232_check_parity
0000f4f8 g     F .text	00000064 OS_MemCopy
0000f55c g     F .text	000000cc OS_Sched
000089f4 g     F .text	000000f0 _fclose_r
000117d0 g     F .text	000000f0 OSMemGet
00014a40 g     F .text	000001c0 OSTaskNameSet
0001746c g     F .text	00000030 read_num_bytes_available
000049ec g     F .text	00000030 fflush
0001da04 g     O .bss	00000004 __malloc_max_sbrked_mem
0001da44 g     O .bss	00000004 OSCtxSwCtr
00018e80 g     F .text	0000001c OSTimeTickHook
000185fc g     F .text	000001b0 alt_irq_register
0001ba8e g     O .rwdata	00000002 OSFlagNameSize
000173d4 g     F .text	00000034 read_RI_bit
0000efe8 g     F .text	000000fc OS_EventTaskRemoveMulti
0001d9f0 g     O .bss	00000004 controllerSem
0000a978 g     F .text	0000089c .hidden __adddf3
0000ede8 g     F .text	0000014c OS_EventTaskWaitMulti
00006c08 g     F .text	0000011c __b2d
0001baa6 g     O .rwdata	00000002 OSQSize
0000a2bc g     F .text	00000590 .hidden __umoddi3
0000d3ec g     F .text	000000d4 lseek
00013388 g     F .text	00000268 OSSemPend
0001ba34 g     O .rwdata	00000004 _global_impure_ptr
00009458 g     F .text	00000568 _realloc_r
0001ba90 g     O .rwdata	00000002 OSLowestPrio
00026ddc g       *ABS*	00000000 __bss_end
00018ef0 g     F .text	00000020 OSTCBInitHook
0001bad6 g     O .rwdata	00000002 OSTmrCfgTicksPerSec
00018ab8 g     F .text	00000104 alt_tick
00009cfc g     F .text	000005c0 .hidden __udivdi3
00008af8 g     F .text	00000184 _fputwc_r
0001ba78 g     O .rwdata	00000002 OSEventEn
000196f4 g     O .rodata	00000028 __mprec_bigtens
000062cc g     F .text	00000104 __s2b
0001bad2 g     O .rwdata	00000002 OSTmrCfgNameSize
0000ce70 g     F .text	000000a4 .hidden __floatunsidf
000069b0 g     F .text	00000060 __mcmp
0c000000 g       *ABS*	00000000 __alt_mem_Flash_flash_data
000174d0 g     F .text	0000002c read_data_byte
00004d8c g     F .text	00000018 __fp_lock_all
00011348 g     F .text	000000e4 OS_FlagInit
00018a20 g     F .text	00000098 alt_alarm_stop
00017408 g     F .text	00000030 read_RE_bit
0001bab4 g     O .rwdata	00000002 OSTaskIdleStkSize
0001da80 g     O .bss	00000004 alt_irq_active
00012f70 g     F .text	000000b0 OSSemAccept
00000be4 g     F .text	00000090 VGA_text
00011ad0 g     F .text	000000d8 OSMemPut
000115dc g     F .text	000001f4 OSMemCreate
0001da48 g     O .bss	00000004 OSIdleCtrMax
0001fab8 g     O .bss	00002000 controller1_stk
00017100 g     F .text	0000003c alt_up_irda_get_available_space_in_write_FIFO
000000fc g     F .exceptions	000000d4 alt_irq_handler
0001a494 g     O .rwdata	00000028 alt_dev_null
0001bac8 g     O .rwdata	00000002 OSTicksPerSec
00016fd8 g     F .text	00000034 alt_up_character_lcd_cursor_blink_on
00017394 g     F .text	00000040 alt_up_parallel_port_open_dev
00018bdc g       .text	00000000 OSIntCtxSw
00017674 g     F .text	00000074 alt_up_ps2_write_data_byte
0001823c g     F .text	0000001c alt_dcache_flush_all
000063d0 g     F .text	00000068 __hi0bits
0000cd18 g     F .text	00000088 .hidden __fixdfsi
0001da4c g     O .bss	00000004 OSTCBFreeList
0001baf0 g       *ABS*	00000000 __ram_rwdata_end
000135f0 g     F .text	0000016c OSSemPendAbort
0001ba54 g     O .rwdata	00000008 alt_dev_list
0000d840 g     F .text	000000f8 write
0001bacc g     O .rwdata	00000002 OSVersionNbr
00019bf0 g       *ABS*	00000000 __ram_rodata_end
0000d114 g     F .text	000000b0 fstat
00017d40 g     F .text	00000094 alt_up_rs232_write_fd
00000740 g     F .text	0000030c selecteerMenu
00000000 g       *ABS*	00000000 __alt_mem_SDRAM
0000bc44 g     F .text	000000e0 .hidden __ledf2
0001ba74 g     O .rwdata	00000004 OSEndiannessTest
00006720 g     F .text	00000140 __pow5mult
000074d0 g     F .text	000012d0 ___vfiprintf_internal_r
0001d9fc g     O .bss	00000004 __nlocale_changed
0000a970 g     F .text	00000008 .hidden __umodsi3
0001ba86 g     O .rwdata	00000002 OSFlagGrpSize
00000280 g     F .text	0000007c controllers
00026ddc g       *ABS*	00000000 end
000179b0 g     F .text	00000098 alt_up_ps2_write_fd
0001713c g     F .text	00000044 alt_up_irda_check_parity
00017e14 g     F .text	00000080 alt_up_char_buffer_init
00015e7c g     F .text	00000140 altera_avalon_jtag_uart_init
0000f7bc g     F .text	000000dc OS_TaskStat
000001d0 g     F .exceptions	00000074 alt_instruction_exception_entry
000195f4 g       *ABS*	00000000 __CTOR_LIST__
04000000 g       *ABS*	00000000 __alt_stack_pointer
00016ab4 g     F .text	00000080 alt_avalon_timer_sc_init
0000cf14 g     F .text	00000064 .hidden __clzsi2
0001677c g     F .text	000002c0 altera_avalon_jtag_uart_write
00004d7c g     F .text	00000004 __sfp_lock_acquire
00005d98 g     F .text	000000e8 memchr
0000f4a8 g     F .text	00000050 OS_MemClr
00016c58 g     F .text	00000078 alt_up_character_lcd_write
00000cdc g     F .text	00001f50 ___vfprintf_internal_r
00018cac g     F .text	0000015c OSTaskStkInit
00004ee0 g     F .text	000002f0 _free_r
000053e0 g     F .text	00000010 __locale_mb_cur_max
0000eb44 g     F .text	00000198 OS_EventTaskRdy
00019424 g     F .text	00000194 __call_exitprocs
0001da50 g     O .bss	00000001 OSCPUUsage
0001d9f8 g     O .bss	00000004 __mlocale_changed
0001ba40 g     O .rwdata	00000004 __malloc_sbrk_base
00000244 g     F .text	0000003c _start
0001da84 g     O .bss	00000004 _alt_tick_rate
0001241c g     F .text	000002fc OSQPend
0001536c g     F .text	00000148 OSTimeDly
00021ab8 g     O .bss	00002000 controller2_stk
00006860 g     F .text	00000150 __lshift
0001da88 g     O .bss	00000004 _alt_nticks
0000d5e4 g     F .text	000000fc read
00015940 g     F .text	000003d8 alt_sys_init
00016e90 g     F .text	00000088 alt_up_character_lcd_shift_display
00019310 g     F .text	00000114 __register_exitproc
0001da51 g     O .bss	00000001 OSTaskCtr
000178d0 g     F .text	00000054 alt_up_ps2_clear_fifo
00017b7c g     F .text	0000003c alt_up_rs232_get_available_space_in_write_FIFO
00000b30 g     F .text	000000b4 VGA_box
000154b4 g     F .text	00000168 OSTimeDlyHMSM
00006524 g     F .text	000001fc __multiply
00016f18 g     F .text	0000008c alt_up_character_lcd_erase_pos
00016374 g     F .text	00000068 altera_avalon_jtag_uart_close
00019bf0 g       *ABS*	00000000 __ram_rwdata_start
000195f4 g       *ABS*	00000000 __ram_rodata_start
0001da90 g     O .bss	00000028 __malloc_current_mallinfo
0001ba7a g     O .rwdata	00000002 OSEventMax
00006d24 g     F .text	0000013c __d2b
0001375c g     F .text	00000110 OSSemPost
0000e6fc g     F .text	000000d8 OSSchedUnlock
00015d18 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
00019024 g     F .text	000000fc alt_get_fd
0001da54 g     O .bss	00000004 OSMemFreeList
0000e840 g     F .text	000000ac OSStatInit
000110c0 g     F .text	000000c4 OSFlagQuery
0001bab0 g     O .rwdata	00000002 OSTaskCreateExtEn
000088dc g     F .text	00000054 _close_r
00019294 g     F .text	0000007c memcmp
0000eb28 g     F .text	0000001c OS_Dummy
00015dd8 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
00026ddc g       *ABS*	00000000 __alt_stack_base
00015e28 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
0001700c g     F .text	00000058 alt_up_irda_enable_read_interrupt
00002d0c g     F .text	00000154 __swsetup_r
00025258 g     O .bss	000001e0 OSQTbl
000002fc g     F .text	00000128 controller
0000b214 g     F .text	000008cc .hidden __divdf3
00004c3c g     F .text	00000118 __sfp
00006f78 g     F .text	00000078 __copybits
0001a08c g     O .rwdata	00000408 __malloc_av_
00004d88 g     F .text	00000004 __sinit_lock_release
0001da58 g     O .bss	00000004 OSTCBHighRdy
0000bd24 g     F .text	00000724 .hidden __muldf3
00007144 g     F .text	00000054 __sread
0001da5c g     O .bss	00000004 OSQFreeList
00017ae0 g     F .text	0000005c alt_up_rs232_disable_read_interrupt
00018f10 g     F .text	00000114 alt_find_file
000182a8 g     F .text	000000a4 alt_dev_llist_insert
0000da54 g     F .text	00000120 __malloc_lock
0000d740 g     F .text	000000b0 sbrk
0000dd64 g     F .text	0000013c OSEventNameSet
00004990 g     F .text	0000005c _fflush_r
00008930 g     F .text	000000c4 _calloc_r
0001da60 g     O .bss	00000001 OSRdyGrp
0001d9f0 g       *ABS*	00000000 __bss_start
00005fb8 g     F .text	00000124 memset
00000a4c g     F .text	000000e4 main
0001da1c g     O .bss	00000004 alt_envp
0001da00 g     O .bss	00000004 __malloc_max_total_mem
00017e94 g     F .text	00000040 alt_up_char_buffer_open_dev
00015d78 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
00009af8 g     F .text	0000001c __swbuf
00019920 g     O .rodata	00000100 OSUnMapTbl
0001baaa g     O .rwdata	00000002 OSSemEn
00016e08 g     F .text	00000088 alt_up_character_lcd_shift_cursor
00010d38 g     F .text	00000388 OSFlagPost
00007278 g     F .text	00000008 __sclose
04000000 g       *ABS*	00000000 __alt_heap_limit
00008ae4 g     F .text	00000014 fclose
0000ecdc g     F .text	0000010c OS_EventTaskWait
00017860 g     F .text	00000070 alt_up_ps2_read_data_byte
0000f898 g     F .text	000000c8 OS_TaskStatStkChk
00014740 g     F .text	00000158 OSTaskDelReq
00003060 g     F .text	00001728 _dtoa_r
000055f0 g     F .text	000007a8 _malloc_r
00009c70 g     F .text	00000030 __ascii_wctomb
0001ba60 g     O .rwdata	00000004 alt_errno
0000e7d4 g     F .text	0000006c OSStart
0000d9f8 g     F .text	0000005c __env_unlock
000051d0 g     F .text	000000c4 _fwalk
00014c00 g     F .text	000001f8 OSTaskResume
00011ba8 g     F .text	000000e8 OSMemQuery
0001babc g     O .rwdata	00000002 OSTaskStatEn
00017180 g     F .text	00000040 alt_up_irda_write_data
0001ba96 g     O .rwdata	00000002 OSMemMax
000129ec g     F .text	00000170 OSQPostFront
00017a48 g     F .text	00000040 alt_up_ps2_open_dev
0000a8b8 g     F .text	00000054 .hidden __divsi3
0001da61 g     O .bss	00000003 OSRdyTbl
0001ba70 g     O .rwdata	00000002 OSDebugEn
00016c18 g     F .text	00000040 alt_up_character_lcd_open_dev
00004dbc g     F .text	00000124 _malloc_trim_r
000175c0 g     F .text	00000058 alt_up_ps2_enable_read_interrupt
000195f4 g       *ABS*	00000000 __CTOR_END__
0001ba88 g     O .rwdata	00000002 OSFlagNodeSize
0001bad0 g     O .rwdata	00000002 OSTmrCfgMax
00016be4 g     F .text	00000034 alt_up_character_lcd_init
00007280 g     F .text	000000a4 strcmp
00011ea0 g     F .text	000001fc OSQCreate
00014898 g     F .text	000001a8 OSTaskNameGet
000195f4 g       *ABS*	00000000 __flash_rodata_start
00012b5c g     F .text	0000020c OSQPostOpt
0000e8ec g     F .text	0000021c OSTimeTick
0001bab8 g     O .rwdata	00000002 OSTaskMax
000195f4 g       *ABS*	00000000 __DTOR_LIST__
00013020 g     F .text	00000100 OSSemCreate
0001badc g     O .rwdata	00000002 OSTmrWheelSize
00017dd4 g     F .text	00000040 alt_up_rs232_open_dev
0000bae0 g     F .text	00000084 .hidden __nedf2
0001bab2 g     O .rwdata	00000002 OSTaskDelEn
0001386c g     F .text	00000110 OSSemQuery
0001209c g     F .text	000002c8 OSQDel
00012718 g     F .text	0000016c OSQPendAbort
0001590c g     F .text	00000034 alt_irq_init
0000d6e0 g     F .text	00000060 alt_release_fd
00000424 g     F .text	0000004c checkID
0001749c g     F .text	00000034 read_data_valid
00016fa4 g     F .text	00000034 alt_up_character_lcd_cursor_off
00019804 g     O .rodata	00000100 .hidden __clz_tab
0001d9f4 g     O .bss	00000004 _PathLocale
00017758 g     F .text	00000064 alt_up_ps2_write_data_byte_with_ack
00019248 g     F .text	00000014 atexit
00008880 g     F .text	0000005c _write_r
0000e674 g     F .text	00000088 OSSchedLock
00005410 g     F .text	0000001c setlocale
000100c8 g     F .text	00000128 OSFlagCreate
0001ba38 g     O .rwdata	00000004 _impure_ptr
0001da14 g     O .bss	00000004 alt_argc
00004788 g     F .text	00000208 __sflush_r
000183a8 g     F .text	0000005c _do_dtors
000053fc g     F .text	00000008 __locale_cjk_lang
0001ba82 g     O .rwdata	00000002 OSEventMultiEn
000101f0 g     F .text	00000270 OSFlagDel
0001da64 g     O .bss	00000004 OSEventFreeList
00000020 g       .exceptions	00000000 alt_irq_entry
00006ba8 g     F .text	00000060 __ulp
000106e0 g     F .text	000005f0 OSFlagPend
0001bace g     O .rwdata	00000002 OSTmrEn
00004da4 g     F .text	00000018 __fp_unlock_all
0001ba4c g     O .rwdata	00000008 alt_fs_list
0000f698 g     F .text	00000074 OS_StrCopy
00017a88 g     F .text	00000058 alt_up_rs232_enable_read_interrupt
00017bfc g     F .text	00000040 alt_up_rs232_write_data
00000470 g     F .text	00000118 moveUp
0001ba98 g     O .rwdata	00000002 OSMemNameSize
00018eb8 g     F .text	0000001c OSInitHookEnd
00000020 g       *ABS*	00000000 __ram_exceptions_start
0001bac4 g     O .rwdata	00000002 OSTCBPrioTblMax
0000542c g     F .text	0000000c localeconv
0001bac0 g     O .rwdata	00000002 OSTaskStatStkChkEn
0001ba94 g     O .rwdata	00000002 OSMemEn
0001ba9e g     O .rwdata	00000002 OSMutexEn
0001baf0 g       *ABS*	00000000 _edata
00026ddc g       *ABS*	00000000 _end
0001da68 g     O .bss	00000001 OSIntNesting
00000244 g       *ABS*	00000000 __ram_exceptions_end
000163dc g     F .text	000000ec altera_avalon_jtag_uart_ioctl
0001561c g     F .text	000001f0 OSTimeDlyResume
00010590 g     F .text	00000150 OSFlagNameSet
00014df8 g     F .text	000001c8 OSTaskStkChk
0001ba9a g     O .rwdata	00000002 OSMemSize
000071a0 g     F .text	0000007c __swrite
0001ba44 g     O .rwdata	00000004 __malloc_trim_threshold
000053f0 g     F .text	0000000c __locale_msgcharset
0001da6c g     O .bss	00000004 OSTCBCur
0001925c g     F .text	00000038 exit
000171c0 g     F .text	00000074 alt_up_irda_read_data
0001ba9c g     O .rwdata	00000002 OSMemTblSize
00005294 g     F .text	000000c4 _fwalk_reent
000174fc g     F .text	000000c4 alt_up_ps2_init
00006a10 g     F .text	00000198 __mdiff
0000a90c g     F .text	0000005c .hidden __modsi3
04000000 g       *ABS*	00000000 __alt_data_end
00000020 g     F .exceptions	00000000 alt_exception
00004d80 g     F .text	00000004 __sfp_lock_release
0000e4b0 g     F .text	00000054 OSInit
000151d4 g     F .text	0000012c OSTaskQuery
00016cd0 g     F .text	00000074 alt_up_character_lcd_string
00012ec4 g     F .text	000000ac OS_QInit
0000f70c g     F .text	00000054 OS_StrLen
00017354 g     F .text	00000040 alt_up_irda_open_dev
000119b8 g     F .text	00000118 OSMemNameSet
0001bab6 g     O .rwdata	00000002 OSTaskProfileEn
0001da70 g     O .bss	00000004 OSTime
00025438 g     O .bss	00000800 OSTaskIdleStk
000195b8 g     F .text	0000003c _exit
000180fc g     F .text	00000140 alt_alarm_start
00010460 g     F .text	00000130 OSFlagNameGet
0001580c g     F .text	00000064 OSTimeGet
00005438 g     F .text	000001b8 __smakebuf_r
000176e8 g     F .text	00000070 alt_up_ps2_wait_for_ack
00007324 g     F .text	00000098 strlen
00018e48 g     F .text	0000001c OSTaskSwHook
000188c8 g     F .text	00000158 open
00025c38 g     O .bss	00000b40 OSEventTbl
0000bb64 g     F .text	000000e0 .hidden __gedf2
00026778 g     O .bss	00000510 OSTCBTbl
0001397c g     F .text	000000fc OSSemSet
0001ba48 g     O .rwdata	00000004 __wctomb
000074b8 g     F .text	00000018 __sprint_r
00018494 g     F .text	00000030 alt_icache_flush_all
00016d94 g     F .text	00000074 alt_up_character_lcd_set_cursor_pos
0001bae4 g     O .rwdata	00000004 alt_priority_mask
00013120 g     F .text	00000268 OSSemDel
0001da74 g     O .bss	00000004 OSFlagFreeList
0001ba7c g     O .rwdata	00000002 OSEventNameSize
00002c2c g     F .text	00000024 __vfprintf_internal
0001da78 g     O .bss	00000001 OSStatRdy
00026c88 g     O .bss	00000054 OSTCBPrioTbl
00009ca0 g     F .text	0000005c _wctomb_r
0000d938 g     F .text	000000c0 __env_lock
00017924 g     F .text	0000008c alt_up_ps2_read_fd
0001bac2 g     O .rwdata	00000002 OSTaskSwHookEn
0000c448 g     F .text	000008d0 .hidden __subdf3
00017234 g     F .text	00000090 alt_up_irda_read_fd
00006438 g     F .text	000000b0 __lo0bits
0001bae8 g     O .rwdata	00000008 alt_alarm_list
0001ba8a g     O .rwdata	00000002 OSFlagWidth
0001834c g     F .text	0000005c _do_ctors
0001ba2c g     O .rwdata	00000002 kleur
00017b3c g     F .text	00000040 alt_up_rs232_get_used_space_in_read_FIFO
00009bb0 g     F .text	000000c0 wcrtomb
0000cfc8 g     F .text	000000d0 close
0001da24 g     O .bss	00000004 alt_envsem
0001da7c g     O .bss	00000004 OSIdleCtrRun
0000eb08 g     F .text	00000020 OSVersion
0001bad4 g     O .rwdata	00000002 OSTmrCfgWheelSize
0000d31c g     F .text	00000080 alt_load
00015300 g     F .text	0000006c OS_TaskStkClr
0001baae g     O .rwdata	00000002 OSTaskCreateEn
0000f0e4 g     F .text	00000064 OS_EventWaitListInit
00008c7c g     F .text	0000005c fputwc
00018ed4 g     F .text	0000001c OSTaskIdleHook
00000000  w      *UND*	00000000 free
00004d84 g     F .text	00000004 __sinit_lock_acquire
000061ac g     F .text	00000120 __multadd
00014fc0 g     F .text	00000214 OSTaskSuspend
00006184 g     F .text	00000028 _Bfree
0000f760 g     F .text	0000005c OS_TaskIdle
0001bada g     O .rwdata	00000002 OSTmrTblSize
00012d68 g     F .text	0000015c OSQQuery



Disassembly of section .entry:

00000000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && (!defined(ALT_SIM_OPTIMIZE) || defined(NIOS2_ECC_PRESENT))
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
   0:	00840014 	movui	r2,4096
#endif

0:
    initi r2
   4:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
   8:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
   c:	00bffd16 	blt	zero,r2,4 <__alt_mem_Flash_flash_data+0xf4000004>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
  10:	00400034 	movhi	at,0
    ori r1, r1, %lo(_start)
  14:	08409114 	ori	at,at,580
    jmp r1
  18:	0800683a 	jmp	at
  1c:	00000000 	call	0 <__reset>

Disassembly of section .exceptions:

00000020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
  20:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
  24:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
  28:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
  2c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
  30:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
  34:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
  38:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
  3c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
  40:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
  44:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
  48:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
  4c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
  50:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
  54:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
  58:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
  5c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
  60:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
  64:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
  68:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
  6c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  70:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
  74:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
  78:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
  7c:	10000326 	beq	r2,zero,8c <OSCtxSw_SWITCH_PC+0x4c>
        beq   r4, zero, .Lnot_irq
  80:	20000226 	beq	r4,zero,8c <OSCtxSw_SWITCH_PC+0x4c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
  84:	00000fc0 	call	fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
  88:	00000706 	br	a8 <OSCtxSw_SWITCH_PC+0x68>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
  8c:	df401215 	stw	ea,72(sp)
        ldhu.n  r2, 0(r4)
        ldhu.n  r3, 2(r4)
        slli.n  r3, r3, 16
        or.n    r2, r2, r3 /* Instruction that caused exception */
#else
        ldw   r2, -4(ea)   /* Instruction that caused exception */
  90:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
  94:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
  98:	00001d00 	call	1d0 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
  9c:	1000021e 	bne	r2,zero,a8 <OSCtxSw_SWITCH_PC+0x68>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
  a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
  a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
  ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
  b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
  b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
  b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
  bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
  c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
  c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
  c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
  cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
  d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
  d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
  d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
  dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
  e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
  e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
  e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
  ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
  f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
  f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
  f8:	ef80083a 	eret

000000fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
  fc:	defff904 	addi	sp,sp,-28
 100:	dfc00615 	stw	ra,24(sp)
 104:	df000515 	stw	fp,20(sp)
 108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
 10c:	000e5040 	call	e504 <OSIntEnter>
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 110:	0005313a 	rdctl	r2,ipending
 114:	e0bffe15 	stw	r2,-8(fp)

  return active;
 118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 11c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
 120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 124:	00800044 	movi	r2,1
 128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 12c:	e0fffb17 	ldw	r3,-20(fp)
 130:	e0bffc17 	ldw	r2,-16(fp)
 134:	1884703a 	and	r2,r3,r2
 138:	10001526 	beq	r2,zero,190 <alt_irq_handler+0x94>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
 13c:	008000b4 	movhi	r2,2
 140:	109b3704 	addi	r2,r2,27868
 144:	e0fffd17 	ldw	r3,-12(fp)
 148:	180690fa 	slli	r3,r3,3
 14c:	10c5883a 	add	r2,r2,r3
 150:	10c00017 	ldw	r3,0(r2)
 154:	008000b4 	movhi	r2,2
 158:	109b3704 	addi	r2,r2,27868
 15c:	e13ffd17 	ldw	r4,-12(fp)
 160:	200890fa 	slli	r4,r4,3
 164:	21000104 	addi	r4,r4,4
 168:	1105883a 	add	r2,r2,r4
 16c:	10800017 	ldw	r2,0(r2)
 170:	1009883a 	mov	r4,r2
 174:	e17ffd17 	ldw	r5,-12(fp)
 178:	183ee83a 	callr	r3
#endif
        break;
 17c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 180:	0005313a 	rdctl	r2,ipending
 184:	e0bfff15 	stw	r2,-4(fp)

  return active;
 188:	e0bfff17 	ldw	r2,-4(fp)
 18c:	00000706 	br	1ac <alt_irq_handler+0xb0>
      }
      mask <<= 1;
 190:	e0bffc17 	ldw	r2,-16(fp)
 194:	1085883a 	add	r2,r2,r2
 198:	e0bffc15 	stw	r2,-16(fp)
      i++;
 19c:	e0bffd17 	ldw	r2,-12(fp)
 1a0:	10800044 	addi	r2,r2,1
 1a4:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
 1a8:	003fe006 	br	12c <__alt_mem_Flash_flash_data+0xf400012c>

    active = alt_irq_pending ();
 1ac:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
 1b0:	e0bffb17 	ldw	r2,-20(fp)
 1b4:	103fda1e 	bne	r2,zero,120 <__alt_mem_Flash_flash_data+0xf4000120>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
 1b8:	000e5800 	call	e580 <OSIntExit>
}
 1bc:	e037883a 	mov	sp,fp
 1c0:	dfc00117 	ldw	ra,4(sp)
 1c4:	df000017 	ldw	fp,0(sp)
 1c8:	dec00204 	addi	sp,sp,8
 1cc:	f800283a 	ret

000001d0 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
 1d0:	defffb04 	addi	sp,sp,-20
 1d4:	dfc00415 	stw	ra,16(sp)
 1d8:	df000315 	stw	fp,12(sp)
 1dc:	df000304 	addi	fp,sp,12
 1e0:	e13fff15 	stw	r4,-4(fp)
 * NIOS2_EXCEPTION_CAUSE_NOT_PRESENT. Your handling routine should
 * check the validity of the cause argument before proceeding.
 */
#ifdef NIOS2_HAS_EXTRA_EXCEPTION_INFO
  /* Get exception cause & "badaddr" */
  NIOS2_READ_EXCEPTION(cause);
 1e4:	000531fa 	rdctl	r2,exception
 1e8:	e0bffd15 	stw	r2,-12(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
 1ec:	e0bffd17 	ldw	r2,-12(fp)
 1f0:	10801f0c 	andi	r2,r2,124
 1f4:	1004d0ba 	srli	r2,r2,2
 1f8:	e0bffd15 	stw	r2,-12(fp)
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
 1fc:	0005333a 	rdctl	r2,badaddr
 200:	e0bffe15 	stw	r2,-8(fp)
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
  badaddr = 0;
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
 204:	d0a81817 	ldw	r2,-24480(gp)
 208:	10000726 	beq	r2,zero,228 <alt_instruction_exception_entry+0x58>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
 20c:	d0a81817 	ldw	r2,-24480(gp)
 210:	e0fffd17 	ldw	r3,-12(fp)
 214:	1809883a 	mov	r4,r3
 218:	e17fff17 	ldw	r5,-4(fp)
 21c:	e1bffe17 	ldw	r6,-8(fp)
 220:	103ee83a 	callr	r2
 224:	00000206 	br	230 <alt_instruction_exception_entry+0x60>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
 228:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
 22c:	0005883a 	mov	r2,zero
}
 230:	e037883a 	mov	sp,fp
 234:	dfc00117 	ldw	ra,4(sp)
 238:	df000017 	ldw	fp,0(sp)
 23c:	dec00204 	addi	sp,sp,8
 240:	f800283a 	ret

Disassembly of section .text:

00000244 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
     244:	06c10034 	movhi	sp,1024
    ori sp, sp, %lo(__alt_stack_pointer)
     248:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
     24c:	068000b4 	movhi	gp,2
    ori gp, gp, %lo(_gp)
     250:	d68e8b14 	ori	gp,gp,14892
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
     254:	00800074 	movhi	r2,1
    ori r2, r2, %lo(__bss_start)
     258:	10b67c14 	ori	r2,r2,55792

    movhi r3, %hi(__bss_end)
     25c:	00c000b4 	movhi	r3,2
    ori r3, r3, %lo(__bss_end)
     260:	18db7714 	ori	r3,r3,28124

    beq r2, r3, 1f
     264:	10c00326 	beq	r2,r3,274 <_start+0x30>

0:
    stw zero, (r2)
     268:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
     26c:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
     270:	10fffd36 	bltu	r2,r3,268 <__alt_mem_Flash_flash_data+0xf4000268>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
     274:	000d31c0 	call	d31c <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
     278:	000d4c00 	call	d4c0 <alt_main>

0000027c <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
     27c:	003fff06 	br	27c <__alt_mem_Flash_flash_data+0xf400027c>

00000280 <controllers>:
OS_EVENT* controllerSem;

short kleur = 0x0000ff;


void controllers(void* pdata){
     280:	defffb04 	addi	sp,sp,-20
     284:	dfc00415 	stw	ra,16(sp)
     288:	df000315 	stw	fp,12(sp)
     28c:	df000304 	addi	fp,sp,12
     290:	e13fff15 	stw	r4,-4(fp)
	int ID = (int*)pdata;
     294:	e0bfff17 	ldw	r2,-4(fp)
     298:	e0bffe15 	stw	r2,-8(fp)
	int hoogte = 50;
     29c:	00800c84 	movi	r2,50
     2a0:	e0bffd15 	stw	r2,-12(fp)

	while (1){
		if (controller(ID) == 1){
     2a4:	e13ffe17 	ldw	r4,-8(fp)
     2a8:	00002fc0 	call	2fc <controller>
     2ac:	10800058 	cmpnei	r2,r2,1
     2b0:	1000051e 	bne	r2,zero,2c8 <controllers+0x48>
			hoogte = moveDown(ID, hoogte);
     2b4:	e13ffe17 	ldw	r4,-8(fp)
     2b8:	e17ffd17 	ldw	r5,-12(fp)
     2bc:	00005880 	call	588 <moveDown>
     2c0:	e0bffd15 	stw	r2,-12(fp)
     2c4:	00000706 	br	2e4 <controllers+0x64>
		}else if(controller(ID) == 0){
     2c8:	e13ffe17 	ldw	r4,-8(fp)
     2cc:	00002fc0 	call	2fc <controller>
     2d0:	1000041e 	bne	r2,zero,2e4 <controllers+0x64>
			hoogte = moveUp(ID, hoogte);
     2d4:	e13ffe17 	ldw	r4,-8(fp)
     2d8:	e17ffd17 	ldw	r5,-12(fp)
     2dc:	00004700 	call	470 <moveUp>
     2e0:	e0bffd15 	stw	r2,-12(fp)
		}

		OSTimeDlyHMSM(0,0,0,63);
     2e4:	0009883a 	mov	r4,zero
     2e8:	000b883a 	mov	r5,zero
     2ec:	000d883a 	mov	r6,zero
     2f0:	01c00fc4 	movi	r7,63
     2f4:	00154b40 	call	154b4 <OSTimeDlyHMSM>
	}
     2f8:	003fea06 	br	2a4 <__alt_mem_Flash_flash_data+0xf40002a4>

000002fc <controller>:


}

int controller(int ID){
     2fc:	defff904 	addi	sp,sp,-28
     300:	dfc00615 	stw	ra,24(sp)
     304:	df000515 	stw	fp,20(sp)
     308:	df000504 	addi	fp,sp,20
     30c:	e13fff15 	stw	r4,-4(fp)
	alt_up_parallel_port_dev * KEY_ptr = alt_up_parallel_port_open_dev ("/dev/Pushbuttons");
     310:	010000b4 	movhi	r4,2
     314:	21257d04 	addi	r4,r4,-27148
     318:	00173940 	call	17394 <alt_up_parallel_port_open_dev>
     31c:	e0bffb15 	stw	r2,-20(fp)
	alt_up_parallel_port_dev * SW_switch_ptr	= alt_up_parallel_port_open_dev ("/dev/Slider_Switches");
     320:	010000b4 	movhi	r4,2
     324:	21258204 	addi	r4,r4,-27128
     328:	00173940 	call	17394 <alt_up_parallel_port_open_dev>
     32c:	e0bffc15 	stw	r2,-16(fp)

	int KEY_value, SW_value;
	INT8U err;

	SW_value = alt_up_parallel_port_read_data(SW_switch_ptr);
     330:	e0bffc17 	ldw	r2,-16(fp)
     334:	10800a17 	ldw	r2,40(r2)
     338:	10800037 	ldwio	r2,0(r2)
     33c:	e0bffd15 	stw	r2,-12(fp)
	KEY_value = alt_up_parallel_port_read_data(KEY_ptr); 		// read the pushbutton KEY values
     340:	e0bffb17 	ldw	r2,-20(fp)
     344:	10800a17 	ldw	r2,40(r2)
     348:	10800037 	ldwio	r2,0(r2)
     34c:	e0bffe15 	stw	r2,-8(fp)

	if(ID == 2){
     350:	e0bfff17 	ldw	r2,-4(fp)
     354:	10800098 	cmpnei	r2,r2,2
     358:	1000131e 	bne	r2,zero,3a8 <controller+0xac>
		if(KEY_value != 0){
     35c:	e0bffe17 	ldw	r2,-8(fp)
     360:	10000f26 	beq	r2,zero,3a0 <controller+0xa4>
			while(KEY_value == 8){
     364:	e0bffe17 	ldw	r2,-8(fp)
     368:	10800218 	cmpnei	r2,r2,8
     36c:	1000021e 	bne	r2,zero,378 <controller+0x7c>
				return 1;
     370:	00800044 	movi	r2,1
     374:	00002606 	br	410 <controller+0x114>
			}
			while(KEY_value == 4){
     378:	e0bffe17 	ldw	r2,-8(fp)
     37c:	10800118 	cmpnei	r2,r2,4
     380:	1000021e 	bne	r2,zero,38c <controller+0x90>
				return 0;
     384:	0005883a 	mov	r2,zero
     388:	00002106 	br	410 <controller+0x114>
			}
			while(KEY_value == 2){
     38c:	e0bffe17 	ldw	r2,-8(fp)
     390:	10800098 	cmpnei	r2,r2,2
     394:	10001e1e 	bne	r2,zero,410 <controller+0x114>
				return 2;
     398:	00800084 	movi	r2,2
     39c:	00001c06 	br	410 <controller+0x114>
			}
		}else{
			return 3;
     3a0:	008000c4 	movi	r2,3
     3a4:	00001a06 	br	410 <controller+0x114>
		}

	}else if(ID == 1){
     3a8:	e0bfff17 	ldw	r2,-4(fp)
     3ac:	10800058 	cmpnei	r2,r2,1
     3b0:	1000171e 	bne	r2,zero,410 <controller+0x114>
		if(SW_value != 0){
     3b4:	e0bffd17 	ldw	r2,-12(fp)
     3b8:	10001326 	beq	r2,zero,408 <controller+0x10c>
			printf("waarde van switches is: %d\n", SW_value);
     3bc:	010000b4 	movhi	r4,2
     3c0:	21258804 	addi	r4,r4,-27104
     3c4:	e17ffd17 	ldw	r5,-12(fp)
     3c8:	0000ca00 	call	ca0 <printf>
			while(SW_value == 2){
     3cc:	e0bffd17 	ldw	r2,-12(fp)
     3d0:	10800098 	cmpnei	r2,r2,2
     3d4:	1000021e 	bne	r2,zero,3e0 <controller+0xe4>
				return 1;
     3d8:	00800044 	movi	r2,1
     3dc:	00000c06 	br	410 <controller+0x114>
			}
			while(SW_value == 1){
     3e0:	e0bffd17 	ldw	r2,-12(fp)
     3e4:	10800058 	cmpnei	r2,r2,1
     3e8:	1000021e 	bne	r2,zero,3f4 <controller+0xf8>
				return 0;
     3ec:	0005883a 	mov	r2,zero
     3f0:	00000706 	br	410 <controller+0x114>
			}
			while(SW_value >= 3){
     3f4:	e0bffd17 	ldw	r2,-12(fp)
     3f8:	108000d0 	cmplti	r2,r2,3
     3fc:	1000041e 	bne	r2,zero,410 <controller+0x114>
				return 2;
     400:	00800084 	movi	r2,2
     404:	00000206 	br	410 <controller+0x114>
			}
		}else{
			return 3;
     408:	008000c4 	movi	r2,3
     40c:	00000006 	br	410 <controller+0x114>
		}
	}

}
     410:	e037883a 	mov	sp,fp
     414:	dfc00117 	ldw	ra,4(sp)
     418:	df000017 	ldw	fp,0(sp)
     41c:	dec00204 	addi	sp,sp,8
     420:	f800283a 	ret

00000424 <checkID>:

int checkID(int ID){
     424:	defffe04 	addi	sp,sp,-8
     428:	df000115 	stw	fp,4(sp)
     42c:	df000104 	addi	fp,sp,4
     430:	e13fff15 	stw	r4,-4(fp)
	if(ID == 1){
     434:	e0bfff17 	ldw	r2,-4(fp)
     438:	10800058 	cmpnei	r2,r2,1
     43c:	1000021e 	bne	r2,zero,448 <checkID+0x24>
		return 15;
     440:	008003c4 	movi	r2,15
     444:	00000606 	br	460 <checkID+0x3c>
	}else if(ID == 2){
     448:	e0bfff17 	ldw	r2,-4(fp)
     44c:	10800098 	cmpnei	r2,r2,2
     450:	1000021e 	bne	r2,zero,45c <checkID+0x38>
		return 300;
     454:	00804b04 	movi	r2,300
     458:	00000106 	br	460 <checkID+0x3c>

	}
	return 0;
     45c:	0005883a 	mov	r2,zero
}
     460:	e037883a 	mov	sp,fp
     464:	df000017 	ldw	fp,0(sp)
     468:	dec00104 	addi	sp,sp,4
     46c:	f800283a 	ret

00000470 <moveUp>:

int moveUp(int ID, int current){
     470:	defff904 	addi	sp,sp,-28
     474:	dfc00615 	stw	ra,24(sp)
     478:	df000515 	stw	fp,20(sp)
     47c:	df000504 	addi	fp,sp,20
     480:	e13ffe15 	stw	r4,-8(fp)
     484:	e17fff15 	stw	r5,-4(fp)
	int boven = current;
     488:	e0bfff17 	ldw	r2,-4(fp)
     48c:	e0bffc15 	stw	r2,-16(fp)

	int X = checkID(ID);
     490:	e13ffe17 	ldw	r4,-8(fp)
     494:	00004240 	call	424 <checkID>
     498:	e0bffd15 	stw	r2,-12(fp)

	if(boven >= 4 && boven <= 184){
     49c:	e0bffc17 	ldw	r2,-16(fp)
     4a0:	10800110 	cmplti	r2,r2,4
     4a4:	10001f1e 	bne	r2,zero,524 <moveUp+0xb4>
     4a8:	e0bffc17 	ldw	r2,-16(fp)
     4ac:	10802e48 	cmpgei	r2,r2,185
     4b0:	10001c1e 	bne	r2,zero,524 <moveUp+0xb4>
		VGA_box(X, boven, X + 5, boven + 1, kleur);
     4b4:	e0bffd17 	ldw	r2,-12(fp)
     4b8:	11800144 	addi	r6,r2,5
     4bc:	e0bffc17 	ldw	r2,-16(fp)
     4c0:	10c00044 	addi	r3,r2,1
     4c4:	d0a0000b 	ldhu	r2,-32768(gp)
     4c8:	10bfffcc 	andi	r2,r2,65535
     4cc:	10a0001c 	xori	r2,r2,32768
     4d0:	10a00004 	addi	r2,r2,-32768
     4d4:	d8800015 	stw	r2,0(sp)
     4d8:	e13ffd17 	ldw	r4,-12(fp)
     4dc:	e17ffc17 	ldw	r5,-16(fp)
     4e0:	180f883a 	mov	r7,r3
     4e4:	0000b300 	call	b30 <VGA_box>
		VGA_box(X, boven +50, X + 5, boven + 51, 0);
     4e8:	e0bffc17 	ldw	r2,-16(fp)
     4ec:	11400c84 	addi	r5,r2,50
     4f0:	e0bffd17 	ldw	r2,-12(fp)
     4f4:	10c00144 	addi	r3,r2,5
     4f8:	e0bffc17 	ldw	r2,-16(fp)
     4fc:	10800cc4 	addi	r2,r2,51
     500:	d8000015 	stw	zero,0(sp)
     504:	e13ffd17 	ldw	r4,-12(fp)
     508:	180d883a 	mov	r6,r3
     50c:	100f883a 	mov	r7,r2
     510:	0000b300 	call	b30 <VGA_box>
		boven--;
     514:	e0bffc17 	ldw	r2,-16(fp)
     518:	10bfffc4 	addi	r2,r2,-1
     51c:	e0bffc15 	stw	r2,-16(fp)
int moveUp(int ID, int current){
	int boven = current;

	int X = checkID(ID);

	if(boven >= 4 && boven <= 184){
     520:	00001306 	br	570 <moveUp+0x100>
		VGA_box(X, boven, X + 5, boven + 1, kleur);
		VGA_box(X, boven +50, X + 5, boven + 51, 0);
		boven--;
	}else if(boven > 184){
     524:	e0bffc17 	ldw	r2,-16(fp)
     528:	10802e50 	cmplti	r2,r2,185
     52c:	1000101e 	bne	r2,zero,570 <moveUp+0x100>
		VGA_box(X, boven, X + 5, boven + 1, kleur);
     530:	e0bffd17 	ldw	r2,-12(fp)
     534:	11800144 	addi	r6,r2,5
     538:	e0bffc17 	ldw	r2,-16(fp)
     53c:	10c00044 	addi	r3,r2,1
     540:	d0a0000b 	ldhu	r2,-32768(gp)
     544:	10bfffcc 	andi	r2,r2,65535
     548:	10a0001c 	xori	r2,r2,32768
     54c:	10a00004 	addi	r2,r2,-32768
     550:	d8800015 	stw	r2,0(sp)
     554:	e13ffd17 	ldw	r4,-12(fp)
     558:	e17ffc17 	ldw	r5,-16(fp)
     55c:	180f883a 	mov	r7,r3
     560:	0000b300 	call	b30 <VGA_box>
		boven--;
     564:	e0bffc17 	ldw	r2,-16(fp)
     568:	10bfffc4 	addi	r2,r2,-1
     56c:	e0bffc15 	stw	r2,-16(fp)
	}
	return boven;
     570:	e0bffc17 	ldw	r2,-16(fp)

}
     574:	e037883a 	mov	sp,fp
     578:	dfc00117 	ldw	ra,4(sp)
     57c:	df000017 	ldw	fp,0(sp)
     580:	dec00204 	addi	sp,sp,8
     584:	f800283a 	ret

00000588 <moveDown>:
int moveDown(int ID, int current){
     588:	defff904 	addi	sp,sp,-28
     58c:	dfc00615 	stw	ra,24(sp)
     590:	df000515 	stw	fp,20(sp)
     594:	df000504 	addi	fp,sp,20
     598:	e13ffe15 	stw	r4,-8(fp)
     59c:	e17fff15 	stw	r5,-4(fp)
	int boven = current;
     5a0:	e0bfff17 	ldw	r2,-4(fp)
     5a4:	e0bffc15 	stw	r2,-16(fp)

	int X = checkID(ID);
     5a8:	e13ffe17 	ldw	r4,-8(fp)
     5ac:	00004240 	call	424 <checkID>
     5b0:	e0bffd15 	stw	r2,-12(fp)

	if(boven <= 184 && boven >= 4){
     5b4:	e0bffc17 	ldw	r2,-16(fp)
     5b8:	10802e48 	cmpgei	r2,r2,185
     5bc:	10001f1e 	bne	r2,zero,63c <moveDown+0xb4>
     5c0:	e0bffc17 	ldw	r2,-16(fp)
     5c4:	10800110 	cmplti	r2,r2,4
     5c8:	10001c1e 	bne	r2,zero,63c <moveDown+0xb4>
		VGA_box(X, boven + 50, X + 5, boven + 51, kleur);
     5cc:	e0bffc17 	ldw	r2,-16(fp)
     5d0:	11400c84 	addi	r5,r2,50
     5d4:	e0bffd17 	ldw	r2,-12(fp)
     5d8:	11800144 	addi	r6,r2,5
     5dc:	e0bffc17 	ldw	r2,-16(fp)
     5e0:	10c00cc4 	addi	r3,r2,51
     5e4:	d0a0000b 	ldhu	r2,-32768(gp)
     5e8:	10bfffcc 	andi	r2,r2,65535
     5ec:	10a0001c 	xori	r2,r2,32768
     5f0:	10a00004 	addi	r2,r2,-32768
     5f4:	d8800015 	stw	r2,0(sp)
     5f8:	e13ffd17 	ldw	r4,-12(fp)
     5fc:	180f883a 	mov	r7,r3
     600:	0000b300 	call	b30 <VGA_box>
		VGA_box(X, boven, X + 5, boven + 1, 0);
     604:	e0bffd17 	ldw	r2,-12(fp)
     608:	10c00144 	addi	r3,r2,5
     60c:	e0bffc17 	ldw	r2,-16(fp)
     610:	10800044 	addi	r2,r2,1
     614:	d8000015 	stw	zero,0(sp)
     618:	e13ffd17 	ldw	r4,-12(fp)
     61c:	e17ffc17 	ldw	r5,-16(fp)
     620:	180d883a 	mov	r6,r3
     624:	100f883a 	mov	r7,r2
     628:	0000b300 	call	b30 <VGA_box>
		boven++;
     62c:	e0bffc17 	ldw	r2,-16(fp)
     630:	10800044 	addi	r2,r2,1
     634:	e0bffc15 	stw	r2,-16(fp)
int moveDown(int ID, int current){
	int boven = current;

	int X = checkID(ID);

	if(boven <= 184 && boven >= 4){
     638:	00001406 	br	68c <moveDown+0x104>
		VGA_box(X, boven + 50, X + 5, boven + 51, kleur);
		VGA_box(X, boven, X + 5, boven + 1, 0);
		boven++;
	}else if(boven < 4){
     63c:	e0bffc17 	ldw	r2,-16(fp)
     640:	10800108 	cmpgei	r2,r2,4
     644:	1000111e 	bne	r2,zero,68c <moveDown+0x104>
		VGA_box(X, boven + 50, X+5, boven + 51, kleur);
     648:	e0bffc17 	ldw	r2,-16(fp)
     64c:	11400c84 	addi	r5,r2,50
     650:	e0bffd17 	ldw	r2,-12(fp)
     654:	11800144 	addi	r6,r2,5
     658:	e0bffc17 	ldw	r2,-16(fp)
     65c:	10c00cc4 	addi	r3,r2,51
     660:	d0a0000b 	ldhu	r2,-32768(gp)
     664:	10bfffcc 	andi	r2,r2,65535
     668:	10a0001c 	xori	r2,r2,32768
     66c:	10a00004 	addi	r2,r2,-32768
     670:	d8800015 	stw	r2,0(sp)
     674:	e13ffd17 	ldw	r4,-12(fp)
     678:	180f883a 	mov	r7,r3
     67c:	0000b300 	call	b30 <VGA_box>
		boven++;
     680:	e0bffc17 	ldw	r2,-16(fp)
     684:	10800044 	addi	r2,r2,1
     688:	e0bffc15 	stw	r2,-16(fp)
	}
	return boven;
     68c:	e0bffc17 	ldw	r2,-16(fp)

}
     690:	e037883a 	mov	sp,fp
     694:	dfc00117 	ldw	ra,4(sp)
     698:	df000017 	ldw	fp,0(sp)
     69c:	dec00204 	addi	sp,sp,8
     6a0:	f800283a 	ret

000006a4 <menu>:

int gameModeMenu = 1;

int controller(int ID);

void menu(void* pdata){
     6a4:	defffa04 	addi	sp,sp,-24
     6a8:	dfc00515 	stw	ra,20(sp)
     6ac:	df000415 	stw	fp,16(sp)
     6b0:	df000404 	addi	fp,sp,16
     6b4:	e13fff15 	stw	r4,-4(fp)
	int ID = (int*)pdata;
     6b8:	e0bfff17 	ldw	r2,-4(fp)
     6bc:	e0bffc15 	stw	r2,-16(fp)

	int xMenu = 32;
     6c0:	00800804 	movi	r2,32
     6c4:	e0bffd15 	stw	r2,-12(fp)
	int yMenu = 18;
     6c8:	00800484 	movi	r2,18
     6cc:	e0bffe15 	stw	r2,-8(fp)


	while(1){
		if (gameModeMenu <= 0){
     6d0:	d0a00117 	ldw	r2,-32764(gp)
     6d4:	00800316 	blt	zero,r2,6e4 <menu+0x40>
			gameModeMenu = 4;
     6d8:	00800104 	movi	r2,4
     6dc:	d0a00115 	stw	r2,-32764(gp)
     6e0:	00000506 	br	6f8 <menu+0x54>
		} else if (gameModeMenu >= 5){
     6e4:	d0a00117 	ldw	r2,-32764(gp)
     6e8:	10800150 	cmplti	r2,r2,5
     6ec:	1000021e 	bne	r2,zero,6f8 <menu+0x54>
			gameModeMenu = 1;
     6f0:	00800044 	movi	r2,1
     6f4:	d0a00115 	stw	r2,-32764(gp)
		}

		if (controller(ID) == 1){
     6f8:	e13ffc17 	ldw	r4,-16(fp)
     6fc:	00002fc0 	call	2fc <controller>
     700:	10800058 	cmpnei	r2,r2,1
     704:	1000041e 	bne	r2,zero,718 <menu+0x74>
			gameModeMenu++;
     708:	d0a00117 	ldw	r2,-32764(gp)
     70c:	10800044 	addi	r2,r2,1
     710:	d0a00115 	stw	r2,-32764(gp)
     714:	00000606 	br	730 <menu+0x8c>
		} else if (controller(ID) == 0){
     718:	e13ffc17 	ldw	r4,-16(fp)
     71c:	00002fc0 	call	2fc <controller>
     720:	1000031e 	bne	r2,zero,730 <menu+0x8c>
			gameModeMenu--;
     724:	d0a00117 	ldw	r2,-32764(gp)
     728:	10bfffc4 	addi	r2,r2,-1
     72c:	d0a00115 	stw	r2,-32764(gp)
		}


		selecteerMenu();
     730:	00007400 	call	740 <selecteerMenu>
		OSTimeDly(1);
     734:	01000044 	movi	r4,1
     738:	001536c0 	call	1536c <OSTimeDly>
	}
     73c:	003fe406 	br	6d0 <__alt_mem_Flash_flash_data+0xf40006d0>

00000740 <selecteerMenu>:


}


void selecteerMenu(){
     740:	defff804 	addi	sp,sp,-32
     744:	dfc00715 	stw	ra,28(sp)
     748:	df000615 	stw	fp,24(sp)
     74c:	df000604 	addi	fp,sp,24
	short menuTextKleur = 0xffff00;
     750:	00bfc004 	movi	r2,-256
     754:	e0bffb0d 	sth	r2,-20(fp)
	
	int xLinks = 100;
     758:	00801904 	movi	r2,100
     75c:	e0bffc15 	stw	r2,-16(fp)
	int xRechts = 180;
     760:	00802d04 	movi	r2,180
     764:	e0bffd15 	stw	r2,-12(fp)
	int xBoven = 70;
     768:	00801184 	movi	r2,70
     76c:	e0bffe15 	stw	r2,-8(fp)
	int xOnder = 90;
     770:	00801684 	movi	r2,90
     774:	e0bfff15 	stw	r2,-4(fp)
	//  VGA_box(x1, y1, x2, y2, menuTextKleur);
	if (gameModeMenu == 1){
     778:	d0a00117 	ldw	r2,-32764(gp)
     77c:	10800058 	cmpnei	r2,r2,1
     780:	1000251e 	bne	r2,zero,818 <selecteerMenu+0xd8>
		VGA_box(xLinks, xBoven, xRechts, xBoven + 1, menuTextKleur); // bovenste
     784:	e0bffe17 	ldw	r2,-8(fp)
     788:	10c00044 	addi	r3,r2,1
     78c:	e0bffb0f 	ldh	r2,-20(fp)
     790:	d8800015 	stw	r2,0(sp)
     794:	e13ffc17 	ldw	r4,-16(fp)
     798:	e17ffe17 	ldw	r5,-8(fp)
     79c:	e1bffd17 	ldw	r6,-12(fp)
     7a0:	180f883a 	mov	r7,r3
     7a4:	0000b300 	call	b30 <VGA_box>
		VGA_box(xLinks, xOnder, xRechts, xOnder + 1, menuTextKleur); // onderste
     7a8:	e0bfff17 	ldw	r2,-4(fp)
     7ac:	10c00044 	addi	r3,r2,1
     7b0:	e0bffb0f 	ldh	r2,-20(fp)
     7b4:	d8800015 	stw	r2,0(sp)
     7b8:	e13ffc17 	ldw	r4,-16(fp)
     7bc:	e17fff17 	ldw	r5,-4(fp)
     7c0:	e1bffd17 	ldw	r6,-12(fp)
     7c4:	180f883a 	mov	r7,r3
     7c8:	0000b300 	call	b30 <VGA_box>
		VGA_box(xLinks, xBoven, xLinks + 1, xOnder, menuTextKleur); // linkse
     7cc:	e0bffc17 	ldw	r2,-16(fp)
     7d0:	10c00044 	addi	r3,r2,1
     7d4:	e0bffb0f 	ldh	r2,-20(fp)
     7d8:	d8800015 	stw	r2,0(sp)
     7dc:	e13ffc17 	ldw	r4,-16(fp)
     7e0:	e17ffe17 	ldw	r5,-8(fp)
     7e4:	180d883a 	mov	r6,r3
     7e8:	e1ffff17 	ldw	r7,-4(fp)
     7ec:	0000b300 	call	b30 <VGA_box>
		VGA_box(xRechts, xBoven, xRechts + 1, xOnder, menuTextKleur); // rechtse
     7f0:	e0bffd17 	ldw	r2,-12(fp)
     7f4:	10c00044 	addi	r3,r2,1
     7f8:	e0bffb0f 	ldh	r2,-20(fp)
     7fc:	d8800015 	stw	r2,0(sp)
     800:	e13ffd17 	ldw	r4,-12(fp)
     804:	e17ffe17 	ldw	r5,-8(fp)
     808:	180d883a 	mov	r6,r3
     80c:	e1ffff17 	ldw	r7,-4(fp)
     810:	0000b300 	call	b30 <VGA_box>
     814:	00008806 	br	a38 <selecteerMenu+0x2f8>
	} else if (gameModeMenu == 2){
     818:	d0a00117 	ldw	r2,-32764(gp)
     81c:	10800098 	cmpnei	r2,r2,2
     820:	10002a1e 	bne	r2,zero,8cc <selecteerMenu+0x18c>
		VGA_box(xLinks, xOnder, xRechts, xOnder + 1, menuTextKleur); // bovenste
     824:	e0bfff17 	ldw	r2,-4(fp)
     828:	10c00044 	addi	r3,r2,1
     82c:	e0bffb0f 	ldh	r2,-20(fp)
     830:	d8800015 	stw	r2,0(sp)
     834:	e13ffc17 	ldw	r4,-16(fp)
     838:	e17fff17 	ldw	r5,-4(fp)
     83c:	e1bffd17 	ldw	r6,-12(fp)
     840:	180f883a 	mov	r7,r3
     844:	0000b300 	call	b30 <VGA_box>
		VGA_box(xLinks, xOnder + 20, xRechts, xOnder + 1 + 20, menuTextKleur); // onderste
     848:	e0bfff17 	ldw	r2,-4(fp)
     84c:	11400504 	addi	r5,r2,20
     850:	e0bfff17 	ldw	r2,-4(fp)
     854:	10c00544 	addi	r3,r2,21
     858:	e0bffb0f 	ldh	r2,-20(fp)
     85c:	d8800015 	stw	r2,0(sp)
     860:	e13ffc17 	ldw	r4,-16(fp)
     864:	e1bffd17 	ldw	r6,-12(fp)
     868:	180f883a 	mov	r7,r3
     86c:	0000b300 	call	b30 <VGA_box>
		VGA_box(xLinks, xBoven + 20, xLinks + 1 , xOnder + 20, menuTextKleur); // linkse
     870:	e0bffe17 	ldw	r2,-8(fp)
     874:	11400504 	addi	r5,r2,20
     878:	e0bffc17 	ldw	r2,-16(fp)
     87c:	11800044 	addi	r6,r2,1
     880:	e0bfff17 	ldw	r2,-4(fp)
     884:	10c00504 	addi	r3,r2,20
     888:	e0bffb0f 	ldh	r2,-20(fp)
     88c:	d8800015 	stw	r2,0(sp)
     890:	e13ffc17 	ldw	r4,-16(fp)
     894:	180f883a 	mov	r7,r3
     898:	0000b300 	call	b30 <VGA_box>
		VGA_box(xRechts, xBoven + 20, xRechts + 1, xOnder + 20, menuTextKleur); // rechtse
     89c:	e0bffe17 	ldw	r2,-8(fp)
     8a0:	11400504 	addi	r5,r2,20
     8a4:	e0bffd17 	ldw	r2,-12(fp)
     8a8:	11800044 	addi	r6,r2,1
     8ac:	e0bfff17 	ldw	r2,-4(fp)
     8b0:	10c00504 	addi	r3,r2,20
     8b4:	e0bffb0f 	ldh	r2,-20(fp)
     8b8:	d8800015 	stw	r2,0(sp)
     8bc:	e13ffd17 	ldw	r4,-12(fp)
     8c0:	180f883a 	mov	r7,r3
     8c4:	0000b300 	call	b30 <VGA_box>
     8c8:	00005b06 	br	a38 <selecteerMenu+0x2f8>
	} else if (gameModeMenu == 3){
     8cc:	d0a00117 	ldw	r2,-32764(gp)
     8d0:	108000d8 	cmpnei	r2,r2,3
     8d4:	10002b1e 	bne	r2,zero,984 <selecteerMenu+0x244>
		VGA_box(xLinks, xOnder + 20, xRechts, xOnder + 1 + 20, menuTextKleur); // bovenste
     8d8:	e0bfff17 	ldw	r2,-4(fp)
     8dc:	11400504 	addi	r5,r2,20
     8e0:	e0bfff17 	ldw	r2,-4(fp)
     8e4:	10c00544 	addi	r3,r2,21
     8e8:	e0bffb0f 	ldh	r2,-20(fp)
     8ec:	d8800015 	stw	r2,0(sp)
     8f0:	e13ffc17 	ldw	r4,-16(fp)
     8f4:	e1bffd17 	ldw	r6,-12(fp)
     8f8:	180f883a 	mov	r7,r3
     8fc:	0000b300 	call	b30 <VGA_box>
		VGA_box(xLinks, xOnder + 40, xRechts, xOnder + 1 + 40, menuTextKleur); // onderste
     900:	e0bfff17 	ldw	r2,-4(fp)
     904:	11400a04 	addi	r5,r2,40
     908:	e0bfff17 	ldw	r2,-4(fp)
     90c:	10c00a44 	addi	r3,r2,41
     910:	e0bffb0f 	ldh	r2,-20(fp)
     914:	d8800015 	stw	r2,0(sp)
     918:	e13ffc17 	ldw	r4,-16(fp)
     91c:	e1bffd17 	ldw	r6,-12(fp)
     920:	180f883a 	mov	r7,r3
     924:	0000b300 	call	b30 <VGA_box>
		VGA_box(xLinks, xBoven + 40, xLinks + 1 , xOnder + 40, menuTextKleur); // linkse
     928:	e0bffe17 	ldw	r2,-8(fp)
     92c:	11400a04 	addi	r5,r2,40
     930:	e0bffc17 	ldw	r2,-16(fp)
     934:	11800044 	addi	r6,r2,1
     938:	e0bfff17 	ldw	r2,-4(fp)
     93c:	10c00a04 	addi	r3,r2,40
     940:	e0bffb0f 	ldh	r2,-20(fp)
     944:	d8800015 	stw	r2,0(sp)
     948:	e13ffc17 	ldw	r4,-16(fp)
     94c:	180f883a 	mov	r7,r3
     950:	0000b300 	call	b30 <VGA_box>
		VGA_box(xRechts, xBoven + 40, xRechts + 1, xOnder + 40, menuTextKleur); // rechtse
     954:	e0bffe17 	ldw	r2,-8(fp)
     958:	11400a04 	addi	r5,r2,40
     95c:	e0bffd17 	ldw	r2,-12(fp)
     960:	11800044 	addi	r6,r2,1
     964:	e0bfff17 	ldw	r2,-4(fp)
     968:	10c00a04 	addi	r3,r2,40
     96c:	e0bffb0f 	ldh	r2,-20(fp)
     970:	d8800015 	stw	r2,0(sp)
     974:	e13ffd17 	ldw	r4,-12(fp)
     978:	180f883a 	mov	r7,r3
     97c:	0000b300 	call	b30 <VGA_box>
     980:	00002d06 	br	a38 <selecteerMenu+0x2f8>
	} else if (gameModeMenu == 4){
     984:	d0a00117 	ldw	r2,-32764(gp)
     988:	10800118 	cmpnei	r2,r2,4
     98c:	10002a1e 	bne	r2,zero,a38 <selecteerMenu+0x2f8>
		VGA_box(xLinks, xOnder + 40, xRechts, xOnder + 1 + 40, menuTextKleur); // bovenste
     990:	e0bfff17 	ldw	r2,-4(fp)
     994:	11400a04 	addi	r5,r2,40
     998:	e0bfff17 	ldw	r2,-4(fp)
     99c:	10c00a44 	addi	r3,r2,41
     9a0:	e0bffb0f 	ldh	r2,-20(fp)
     9a4:	d8800015 	stw	r2,0(sp)
     9a8:	e13ffc17 	ldw	r4,-16(fp)
     9ac:	e1bffd17 	ldw	r6,-12(fp)
     9b0:	180f883a 	mov	r7,r3
     9b4:	0000b300 	call	b30 <VGA_box>
		VGA_box(xLinks, xOnder + 60, xRechts, xOnder + 1 + 60, menuTextKleur); // onderste
     9b8:	e0bfff17 	ldw	r2,-4(fp)
     9bc:	11400f04 	addi	r5,r2,60
     9c0:	e0bfff17 	ldw	r2,-4(fp)
     9c4:	10c00f44 	addi	r3,r2,61
     9c8:	e0bffb0f 	ldh	r2,-20(fp)
     9cc:	d8800015 	stw	r2,0(sp)
     9d0:	e13ffc17 	ldw	r4,-16(fp)
     9d4:	e1bffd17 	ldw	r6,-12(fp)
     9d8:	180f883a 	mov	r7,r3
     9dc:	0000b300 	call	b30 <VGA_box>
		VGA_box(xLinks, xBoven + 60, xLinks + 1 , xOnder + 60, menuTextKleur); // linkse
     9e0:	e0bffe17 	ldw	r2,-8(fp)
     9e4:	11400f04 	addi	r5,r2,60
     9e8:	e0bffc17 	ldw	r2,-16(fp)
     9ec:	11800044 	addi	r6,r2,1
     9f0:	e0bfff17 	ldw	r2,-4(fp)
     9f4:	10c00f04 	addi	r3,r2,60
     9f8:	e0bffb0f 	ldh	r2,-20(fp)
     9fc:	d8800015 	stw	r2,0(sp)
     a00:	e13ffc17 	ldw	r4,-16(fp)
     a04:	180f883a 	mov	r7,r3
     a08:	0000b300 	call	b30 <VGA_box>
		VGA_box(xRechts, xBoven + 60, xRechts + 1, xOnder + 60, menuTextKleur); // rechtse
     a0c:	e0bffe17 	ldw	r2,-8(fp)
     a10:	11400f04 	addi	r5,r2,60
     a14:	e0bffd17 	ldw	r2,-12(fp)
     a18:	11800044 	addi	r6,r2,1
     a1c:	e0bfff17 	ldw	r2,-4(fp)
     a20:	10c00f04 	addi	r3,r2,60
     a24:	e0bffb0f 	ldh	r2,-20(fp)
     a28:	d8800015 	stw	r2,0(sp)
     a2c:	e13ffd17 	ldw	r4,-12(fp)
     a30:	180f883a 	mov	r7,r3
     a34:	0000b300 	call	b30 <VGA_box>
	}
	
}
     a38:	e037883a 	mov	sp,fp
     a3c:	dfc00117 	ldw	ra,4(sp)
     a40:	df000017 	ldw	fp,0(sp)
     a44:	dec00204 	addi	sp,sp,8
     a48:	f800283a 	ret

00000a4c <main>:
void controllers(void* pdata);
void menu(void* pdata);

/* The main function creates two task and starts multi-tasking */
int main(void)
{
     a4c:	defffd04 	addi	sp,sp,-12
     a50:	dfc00215 	stw	ra,8(sp)
     a54:	df000115 	stw	fp,4(sp)
     a58:	df000104 	addi	fp,sp,4
	controllerSem = OSSemCreate(1);
     a5c:	01000044 	movi	r4,1
     a60:	00130200 	call	13020 <OSSemCreate>
     a64:	d0a7f115 	stw	r2,-24636(gp)
	VGA_box (0, 0, 319, 239, 0);						//clear screen
     a68:	d8000015 	stw	zero,0(sp)
     a6c:	0009883a 	mov	r4,zero
     a70:	000b883a 	mov	r5,zero
     a74:	01804fc4 	movi	r6,319
     a78:	01c03bc4 	movi	r7,239
     a7c:	0000b300 	call	b30 <VGA_box>
	VGA_box (15, 50, 20, 100, 0x0000ff);				// links
     a80:	00803fc4 	movi	r2,255
     a84:	d8800015 	stw	r2,0(sp)
     a88:	010003c4 	movi	r4,15
     a8c:	01400c84 	movi	r5,50
     a90:	01800504 	movi	r6,20
     a94:	01c01904 	movi	r7,100
     a98:	0000b300 	call	b30 <VGA_box>
	VGA_box (300, 50, 305, 100, 0x0000ff);				// rechts
     a9c:	00803fc4 	movi	r2,255
     aa0:	d8800015 	stw	r2,0(sp)
     aa4:	01004b04 	movi	r4,300
     aa8:	01400c84 	movi	r5,50
     aac:	01804c44 	movi	r6,305
     ab0:	01c01904 	movi	r7,100
     ab4:	0000b300 	call	b30 <VGA_box>

	VGA_box (0, 0, 319, 3, 0xFFFFFF);					// boven
     ab8:	00804034 	movhi	r2,256
     abc:	10bfffc4 	addi	r2,r2,-1
     ac0:	d8800015 	stw	r2,0(sp)
     ac4:	0009883a 	mov	r4,zero
     ac8:	000b883a 	mov	r5,zero
     acc:	01804fc4 	movi	r6,319
     ad0:	01c000c4 	movi	r7,3
     ad4:	0000b300 	call	b30 <VGA_box>
	VGA_box (0, 236, 319, 239, 0xFFFFFF);				// onder
     ad8:	00804034 	movhi	r2,256
     adc:	10bfffc4 	addi	r2,r2,-1
     ae0:	d8800015 	stw	r2,0(sp)
     ae4:	0009883a 	mov	r4,zero
     ae8:	01403b04 	movi	r5,236
     aec:	01804fc4 	movi	r6,319
     af0:	01c03bc4 	movi	r7,239
     af4:	0000b300 	call	b30 <VGA_box>

//	VGA_box (159, 0, 160, 239, 0xFFFFFF);				// middenlijntje

	 //OSTaskCreate(controllers,(void*) 1,&controller1_stk[TASK_STACKSIZE-1],controller1_PRIORITY);
	 //OSTaskCreate(controllers,(void*) 2,&controller2_stk[TASK_STACKSIZE-1],controller2_PRIORITY);
	OSTaskCreate(menu, (void*) 2, &menu_stk[TASK_STACKSIZE-1],menu_PRIORITY);
     af8:	01000034 	movhi	r4,0
     afc:	2101a904 	addi	r4,r4,1700
     b00:	01400084 	movi	r5,2
     b04:	018000b4 	movhi	r6,2
     b08:	31bead04 	addi	r6,r6,-1356
     b0c:	01c00204 	movi	r7,8
     b10:	0013fb80 	call	13fb8 <OSTaskCreate>
               
	OSStart();
     b14:	000e7d40 	call	e7d4 <OSStart>
	return 0;
     b18:	0005883a 	mov	r2,zero
}
     b1c:	e037883a 	mov	sp,fp
     b20:	dfc00117 	ldw	ra,4(sp)
     b24:	df000017 	ldw	fp,0(sp)
     b28:	dec00204 	addi	sp,sp,8
     b2c:	f800283a 	ret

00000b30 <VGA_box>:

void VGA_box(int x1, int y1, int x2, int y2, short pixel_color)
{
     b30:	defff604 	addi	sp,sp,-40
     b34:	df000915 	stw	fp,36(sp)
     b38:	df000904 	addi	fp,sp,36
     b3c:	e13ffb15 	stw	r4,-20(fp)
     b40:	e17ffc15 	stw	r5,-16(fp)
     b44:	e1bffd15 	stw	r6,-12(fp)
     b48:	e1fffe15 	stw	r7,-8(fp)
     b4c:	e0800117 	ldw	r2,4(fp)
     b50:	e0bfff0d 	sth	r2,-4(fp)
	int offset, row, col;
  	volatile short * pixel_buffer = (short *) 0x08000000;	// VGA pixel buffer
     b54:	00820034 	movhi	r2,2048
     b58:	e0bff915 	stw	r2,-28(fp)

	/* assume that the box coordinates are valid */
	for (row = y1; row <= y2; row++)
     b5c:	e0bffc17 	ldw	r2,-16(fp)
     b60:	e0bff715 	stw	r2,-36(fp)
     b64:	00001806 	br	bc8 <VGA_box+0x98>
	{
		col = x1;
     b68:	e0bffb17 	ldw	r2,-20(fp)
     b6c:	e0bff815 	stw	r2,-32(fp)
		while (col <= x2)
     b70:	00000f06 	br	bb0 <VGA_box+0x80>
		{
			offset = (row << 9) + col;
     b74:	e0bff717 	ldw	r2,-36(fp)
     b78:	1006927a 	slli	r3,r2,9
     b7c:	e0bff817 	ldw	r2,-32(fp)
     b80:	1885883a 	add	r2,r3,r2
     b84:	e0bffa15 	stw	r2,-24(fp)
			*(pixel_buffer + offset) = pixel_color;	// compute halfword address, set pixel
     b88:	e0bffa17 	ldw	r2,-24(fp)
     b8c:	1085883a 	add	r2,r2,r2
     b90:	1007883a 	mov	r3,r2
     b94:	e0bff917 	ldw	r2,-28(fp)
     b98:	10c5883a 	add	r2,r2,r3
     b9c:	e0ffff0b 	ldhu	r3,-4(fp)
     ba0:	10c0000d 	sth	r3,0(r2)
			++col;
     ba4:	e0bff817 	ldw	r2,-32(fp)
     ba8:	10800044 	addi	r2,r2,1
     bac:	e0bff815 	stw	r2,-32(fp)

	/* assume that the box coordinates are valid */
	for (row = y1; row <= y2; row++)
	{
		col = x1;
		while (col <= x2)
     bb0:	e0bff817 	ldw	r2,-32(fp)
     bb4:	e0fffd17 	ldw	r3,-12(fp)
     bb8:	18bfee0e 	bge	r3,r2,b74 <__alt_mem_Flash_flash_data+0xf4000b74>
{
	int offset, row, col;
  	volatile short * pixel_buffer = (short *) 0x08000000;	// VGA pixel buffer

	/* assume that the box coordinates are valid */
	for (row = y1; row <= y2; row++)
     bbc:	e0bff717 	ldw	r2,-36(fp)
     bc0:	10800044 	addi	r2,r2,1
     bc4:	e0bff715 	stw	r2,-36(fp)
     bc8:	e0bff717 	ldw	r2,-36(fp)
     bcc:	e0fffe17 	ldw	r3,-8(fp)
     bd0:	18bfe50e 	bge	r3,r2,b68 <__alt_mem_Flash_flash_data+0xf4000b68>
			offset = (row << 9) + col;
			*(pixel_buffer + offset) = pixel_color;	// compute halfword address, set pixel
			++col;
		}
	}
}
     bd4:	e037883a 	mov	sp,fp
     bd8:	df000017 	ldw	fp,0(sp)
     bdc:	dec00104 	addi	sp,sp,4
     be0:	f800283a 	ret

00000be4 <VGA_text>:

void VGA_text(int x, int y, char * text_ptr)
{
     be4:	defffa04 	addi	sp,sp,-24
     be8:	df000515 	stw	fp,20(sp)
     bec:	df000504 	addi	fp,sp,20
     bf0:	e13ffd15 	stw	r4,-12(fp)
     bf4:	e17ffe15 	stw	r5,-8(fp)
     bf8:	e1bfff15 	stw	r6,-4(fp)
	int offset;
  	volatile char * character_buffer = (char *) 0x09000000;	// VGA character buffer
     bfc:	00824034 	movhi	r2,2304
     c00:	e0bffc15 	stw	r2,-16(fp)

	/* assume that the text string fits on one line */
	offset = (y << 7) + x;
     c04:	e0bffe17 	ldw	r2,-8(fp)
     c08:	100691fa 	slli	r3,r2,7
     c0c:	e0bffd17 	ldw	r2,-12(fp)
     c10:	1885883a 	add	r2,r3,r2
     c14:	e0bffb15 	stw	r2,-20(fp)
	while ( *(text_ptr) )
     c18:	00000c06 	br	c4c <VGA_text+0x68>
	{
		*(character_buffer + offset) = *(text_ptr);	// write to the character buffer
     c1c:	e0bffb17 	ldw	r2,-20(fp)
     c20:	e0fffc17 	ldw	r3,-16(fp)
     c24:	1885883a 	add	r2,r3,r2
     c28:	e0ffff17 	ldw	r3,-4(fp)
     c2c:	18c00003 	ldbu	r3,0(r3)
     c30:	10c00005 	stb	r3,0(r2)
		++text_ptr;
     c34:	e0bfff17 	ldw	r2,-4(fp)
     c38:	10800044 	addi	r2,r2,1
     c3c:	e0bfff15 	stw	r2,-4(fp)
		++offset;
     c40:	e0bffb17 	ldw	r2,-20(fp)
     c44:	10800044 	addi	r2,r2,1
     c48:	e0bffb15 	stw	r2,-20(fp)
	int offset;
  	volatile char * character_buffer = (char *) 0x09000000;	// VGA character buffer

	/* assume that the text string fits on one line */
	offset = (y << 7) + x;
	while ( *(text_ptr) )
     c4c:	e0bfff17 	ldw	r2,-4(fp)
     c50:	10800003 	ldbu	r2,0(r2)
     c54:	10803fcc 	andi	r2,r2,255
     c58:	1080201c 	xori	r2,r2,128
     c5c:	10bfe004 	addi	r2,r2,-128
     c60:	103fee1e 	bne	r2,zero,c1c <__alt_mem_Flash_flash_data+0xf4000c1c>
	{
		*(character_buffer + offset) = *(text_ptr);	// write to the character buffer
		++text_ptr;
		++offset;
	}
}
     c64:	e037883a 	mov	sp,fp
     c68:	df000017 	ldw	fp,0(sp)
     c6c:	dec00104 	addi	sp,sp,4
     c70:	f800283a 	ret

00000c74 <_printf_r>:
     c74:	defffd04 	addi	sp,sp,-12
     c78:	dfc00015 	stw	ra,0(sp)
     c7c:	d9800115 	stw	r6,4(sp)
     c80:	d9c00215 	stw	r7,8(sp)
     c84:	280d883a 	mov	r6,r5
     c88:	21400217 	ldw	r5,8(r4)
     c8c:	d9c00104 	addi	r7,sp,4
     c90:	0000cdc0 	call	cdc <___vfprintf_internal_r>
     c94:	dfc00017 	ldw	ra,0(sp)
     c98:	dec00304 	addi	sp,sp,12
     c9c:	f800283a 	ret

00000ca0 <printf>:
     ca0:	defffc04 	addi	sp,sp,-16
     ca4:	dfc00015 	stw	ra,0(sp)
     ca8:	d9400115 	stw	r5,4(sp)
     cac:	d9800215 	stw	r6,8(sp)
     cb0:	d9c00315 	stw	r7,12(sp)
     cb4:	008000b4 	movhi	r2,2
     cb8:	10ae8e04 	addi	r2,r2,-17864
     cbc:	10800017 	ldw	r2,0(r2)
     cc0:	200b883a 	mov	r5,r4
     cc4:	d9800104 	addi	r6,sp,4
     cc8:	11000217 	ldw	r4,8(r2)
     ccc:	0002c2c0 	call	2c2c <__vfprintf_internal>
     cd0:	dfc00017 	ldw	ra,0(sp)
     cd4:	dec00404 	addi	sp,sp,16
     cd8:	f800283a 	ret

00000cdc <___vfprintf_internal_r>:
     cdc:	deffb604 	addi	sp,sp,-296
     ce0:	dfc04915 	stw	ra,292(sp)
     ce4:	ddc04715 	stw	r23,284(sp)
     ce8:	dd804615 	stw	r22,280(sp)
     cec:	282f883a 	mov	r23,r5
     cf0:	202d883a 	mov	r22,r4
     cf4:	d9802a15 	stw	r6,168(sp)
     cf8:	d9c02d15 	stw	r7,180(sp)
     cfc:	df004815 	stw	fp,288(sp)
     d00:	dd404515 	stw	r21,276(sp)
     d04:	dd004415 	stw	r20,272(sp)
     d08:	dcc04315 	stw	r19,268(sp)
     d0c:	dc804215 	stw	r18,264(sp)
     d10:	dc404115 	stw	r17,260(sp)
     d14:	dc004015 	stw	r16,256(sp)
     d18:	00054040 	call	5404 <_localeconv_r>
     d1c:	10800017 	ldw	r2,0(r2)
     d20:	1009883a 	mov	r4,r2
     d24:	d8803515 	stw	r2,212(sp)
     d28:	00073240 	call	7324 <strlen>
     d2c:	d8803815 	stw	r2,224(sp)
     d30:	b0000226 	beq	r22,zero,d3c <___vfprintf_internal_r+0x60>
     d34:	b0800e17 	ldw	r2,56(r22)
     d38:	1000e126 	beq	r2,zero,10c0 <___vfprintf_internal_r+0x3e4>
     d3c:	b880030b 	ldhu	r2,12(r23)
     d40:	10c8000c 	andi	r3,r2,8192
     d44:	1800061e 	bne	r3,zero,d60 <___vfprintf_internal_r+0x84>
     d48:	b9001917 	ldw	r4,100(r23)
     d4c:	00f7ffc4 	movi	r3,-8193
     d50:	10880014 	ori	r2,r2,8192
     d54:	20c6703a 	and	r3,r4,r3
     d58:	b880030d 	sth	r2,12(r23)
     d5c:	b8c01915 	stw	r3,100(r23)
     d60:	10c0020c 	andi	r3,r2,8
     d64:	1800a726 	beq	r3,zero,1004 <___vfprintf_internal_r+0x328>
     d68:	b8c00417 	ldw	r3,16(r23)
     d6c:	1800a526 	beq	r3,zero,1004 <___vfprintf_internal_r+0x328>
     d70:	1080068c 	andi	r2,r2,26
     d74:	00c00284 	movi	r3,10
     d78:	10c0aa26 	beq	r2,r3,1024 <___vfprintf_internal_r+0x348>
     d7c:	dac01e04 	addi	r11,sp,120
     d80:	db001dc4 	addi	r12,sp,119
     d84:	d8800404 	addi	r2,sp,16
     d88:	050000b4 	movhi	r20,2
     d8c:	dac02815 	stw	r11,160(sp)
     d90:	5b17c83a 	sub	r11,r11,r12
     d94:	a5259f84 	addi	r20,r20,-27010
     d98:	db002915 	stw	r12,164(sp)
     d9c:	d8801e15 	stw	r2,120(sp)
     da0:	d8002015 	stw	zero,128(sp)
     da4:	d8001f15 	stw	zero,124(sp)
     da8:	d8003315 	stw	zero,204(sp)
     dac:	d8003715 	stw	zero,220(sp)
     db0:	d8003915 	stw	zero,228(sp)
     db4:	1011883a 	mov	r8,r2
     db8:	d8003b15 	stw	zero,236(sp)
     dbc:	d8003a15 	stw	zero,232(sp)
     dc0:	d8002f15 	stw	zero,188(sp)
     dc4:	dac03c15 	stw	r11,240(sp)
     dc8:	db002a17 	ldw	r12,168(sp)
     dcc:	60800007 	ldb	r2,0(r12)
     dd0:	1000be26 	beq	r2,zero,10cc <___vfprintf_internal_r+0x3f0>
     dd4:	00c00944 	movi	r3,37
     dd8:	10c0bc26 	beq	r2,r3,10cc <___vfprintf_internal_r+0x3f0>
     ddc:	6021883a 	mov	r16,r12
     de0:	00000106 	br	de8 <___vfprintf_internal_r+0x10c>
     de4:	10c08426 	beq	r2,r3,ff8 <___vfprintf_internal_r+0x31c>
     de8:	84000044 	addi	r16,r16,1
     dec:	80800007 	ldb	r2,0(r16)
     df0:	103ffc1e 	bne	r2,zero,de4 <__alt_mem_Flash_flash_data+0xf4000de4>
     df4:	dac02a17 	ldw	r11,168(sp)
     df8:	82e3c83a 	sub	r17,r16,r11
     dfc:	88000f26 	beq	r17,zero,e3c <___vfprintf_internal_r+0x160>
     e00:	d8c02017 	ldw	r3,128(sp)
     e04:	d8801f17 	ldw	r2,124(sp)
     e08:	dac02a17 	ldw	r11,168(sp)
     e0c:	1c47883a 	add	r3,r3,r17
     e10:	10800044 	addi	r2,r2,1
     e14:	d8c02015 	stw	r3,128(sp)
     e18:	42c00015 	stw	r11,0(r8)
     e1c:	44400115 	stw	r17,4(r8)
     e20:	d8801f15 	stw	r2,124(sp)
     e24:	00c001c4 	movi	r3,7
     e28:	18809316 	blt	r3,r2,1078 <___vfprintf_internal_r+0x39c>
     e2c:	42000204 	addi	r8,r8,8
     e30:	db002f17 	ldw	r12,188(sp)
     e34:	6459883a 	add	r12,r12,r17
     e38:	db002f15 	stw	r12,188(sp)
     e3c:	80800007 	ldb	r2,0(r16)
     e40:	10009426 	beq	r2,zero,1094 <___vfprintf_internal_r+0x3b8>
     e44:	80800044 	addi	r2,r16,1
     e48:	84000047 	ldb	r16,1(r16)
     e4c:	d8002785 	stb	zero,158(sp)
     e50:	000d883a 	mov	r6,zero
     e54:	027fffc4 	movi	r9,-1
     e58:	d8002e15 	stw	zero,184(sp)
     e5c:	0023883a 	mov	r17,zero
     e60:	01001604 	movi	r4,88
     e64:	01400244 	movi	r5,9
     e68:	02800a84 	movi	r10,42
     e6c:	01c01b04 	movi	r7,108
     e70:	10c00044 	addi	r3,r2,1
     e74:	80bff804 	addi	r2,r16,-32
     e78:	2082cd36 	bltu	r4,r2,19b0 <___vfprintf_internal_r+0xcd4>
     e7c:	100490ba 	slli	r2,r2,2
     e80:	02c00034 	movhi	r11,0
     e84:	5ac3a504 	addi	r11,r11,3732
     e88:	12c5883a 	add	r2,r2,r11
     e8c:	10800017 	ldw	r2,0(r2)
     e90:	1000683a 	jmp	r2
     e94:	000017c8 	cmpgei	zero,zero,95
     e98:	000019b0 	cmpltui	zero,zero,102
     e9c:	000019b0 	cmpltui	zero,zero,102
     ea0:	00001918 	cmpnei	zero,zero,100
     ea4:	000019b0 	cmpltui	zero,zero,102
     ea8:	000019b0 	cmpltui	zero,zero,102
     eac:	000019b0 	cmpltui	zero,zero,102
     eb0:	000019b0 	cmpltui	zero,zero,102
     eb4:	000019b0 	cmpltui	zero,zero,102
     eb8:	000019b0 	cmpltui	zero,zero,102
     ebc:	000017e8 	cmpgeui	zero,zero,95
     ec0:	00001814 	movui	zero,96
     ec4:	000019b0 	cmpltui	zero,zero,102
     ec8:	000010d4 	movui	zero,67
     ecc:	000010e4 	muli	zero,zero,67
     ed0:	000019b0 	cmpltui	zero,zero,102
     ed4:	00001124 	muli	zero,zero,68
     ed8:	00001134 	movhi	zero,68
     edc:	00001134 	movhi	zero,68
     ee0:	00001134 	movhi	zero,68
     ee4:	00001134 	movhi	zero,68
     ee8:	00001134 	movhi	zero,68
     eec:	00001134 	movhi	zero,68
     ef0:	00001134 	movhi	zero,68
     ef4:	00001134 	movhi	zero,68
     ef8:	00001134 	movhi	zero,68
     efc:	000019b0 	cmpltui	zero,zero,102
     f00:	000019b0 	cmpltui	zero,zero,102
     f04:	000019b0 	cmpltui	zero,zero,102
     f08:	000019b0 	cmpltui	zero,zero,102
     f0c:	000019b0 	cmpltui	zero,zero,102
     f10:	000019b0 	cmpltui	zero,zero,102
     f14:	000019b0 	cmpltui	zero,zero,102
     f18:	000019b0 	cmpltui	zero,zero,102
     f1c:	000019b0 	cmpltui	zero,zero,102
     f20:	000019b0 	cmpltui	zero,zero,102
     f24:	00001168 	cmpgeui	zero,zero,69
     f28:	000015d8 	cmpnei	zero,zero,87
     f2c:	000019b0 	cmpltui	zero,zero,102
     f30:	000015d8 	cmpnei	zero,zero,87
     f34:	000019b0 	cmpltui	zero,zero,102
     f38:	000019b0 	cmpltui	zero,zero,102
     f3c:	000019b0 	cmpltui	zero,zero,102
     f40:	000019b0 	cmpltui	zero,zero,102
     f44:	000016c4 	movi	zero,91
     f48:	000019b0 	cmpltui	zero,zero,102
     f4c:	000019b0 	cmpltui	zero,zero,102
     f50:	0000156c 	andhi	zero,zero,85
     f54:	000019b0 	cmpltui	zero,zero,102
     f58:	000019b0 	cmpltui	zero,zero,102
     f5c:	000019b0 	cmpltui	zero,zero,102
     f60:	000019b0 	cmpltui	zero,zero,102
     f64:	000019b0 	cmpltui	zero,zero,102
     f68:	000015a8 	cmpgeui	zero,zero,86
     f6c:	000019b0 	cmpltui	zero,zero,102
     f70:	000019b0 	cmpltui	zero,zero,102
     f74:	0000176c 	andhi	zero,zero,93
     f78:	000019b0 	cmpltui	zero,zero,102
     f7c:	000019b0 	cmpltui	zero,zero,102
     f80:	000019b0 	cmpltui	zero,zero,102
     f84:	000019b0 	cmpltui	zero,zero,102
     f88:	000019b0 	cmpltui	zero,zero,102
     f8c:	000019b0 	cmpltui	zero,zero,102
     f90:	000019b0 	cmpltui	zero,zero,102
     f94:	000019b0 	cmpltui	zero,zero,102
     f98:	000019b0 	cmpltui	zero,zero,102
     f9c:	000019b0 	cmpltui	zero,zero,102
     fa0:	00001824 	muli	zero,zero,96
     fa4:	000016d4 	movui	zero,91
     fa8:	000015d8 	cmpnei	zero,zero,87
     fac:	000015d8 	cmpnei	zero,zero,87
     fb0:	000015d8 	cmpnei	zero,zero,87
     fb4:	00001714 	movui	zero,92
     fb8:	000016d4 	movui	zero,91
     fbc:	000019b0 	cmpltui	zero,zero,102
     fc0:	000019b0 	cmpltui	zero,zero,102
     fc4:	00001724 	muli	zero,zero,92
     fc8:	000019b0 	cmpltui	zero,zero,102
     fcc:	00001738 	rdprs	zero,zero,92
     fd0:	00001974 	movhi	zero,101
     fd4:	0000167c 	xorhi	zero,zero,89
     fd8:	00001928 	cmpgeui	zero,zero,100
     fdc:	000019b0 	cmpltui	zero,zero,102
     fe0:	00001864 	muli	zero,zero,97
     fe4:	000019b0 	cmpltui	zero,zero,102
     fe8:	00001938 	rdprs	zero,zero,100
     fec:	000019b0 	cmpltui	zero,zero,102
     ff0:	000019b0 	cmpltui	zero,zero,102
     ff4:	000018d8 	cmpnei	zero,zero,99
     ff8:	db002a17 	ldw	r12,168(sp)
     ffc:	8323c83a 	sub	r17,r16,r12
    1000:	003f7e06 	br	dfc <__alt_mem_Flash_flash_data+0xf4000dfc>
    1004:	b009883a 	mov	r4,r22
    1008:	b80b883a 	mov	r5,r23
    100c:	0002d0c0 	call	2d0c <__swsetup_r>
    1010:	10000c1e 	bne	r2,zero,1044 <___vfprintf_internal_r+0x368>
    1014:	b880030b 	ldhu	r2,12(r23)
    1018:	00c00284 	movi	r3,10
    101c:	1080068c 	andi	r2,r2,26
    1020:	10ff561e 	bne	r2,r3,d7c <__alt_mem_Flash_flash_data+0xf4000d7c>
    1024:	b880038f 	ldh	r2,14(r23)
    1028:	103f5416 	blt	r2,zero,d7c <__alt_mem_Flash_flash_data+0xf4000d7c>
    102c:	d9802a17 	ldw	r6,168(sp)
    1030:	d9c02d17 	ldw	r7,180(sp)
    1034:	b009883a 	mov	r4,r22
    1038:	b80b883a 	mov	r5,r23
    103c:	0002c500 	call	2c50 <__sbprintf>
    1040:	00000106 	br	1048 <___vfprintf_internal_r+0x36c>
    1044:	00bfffc4 	movi	r2,-1
    1048:	dfc04917 	ldw	ra,292(sp)
    104c:	df004817 	ldw	fp,288(sp)
    1050:	ddc04717 	ldw	r23,284(sp)
    1054:	dd804617 	ldw	r22,280(sp)
    1058:	dd404517 	ldw	r21,276(sp)
    105c:	dd004417 	ldw	r20,272(sp)
    1060:	dcc04317 	ldw	r19,268(sp)
    1064:	dc804217 	ldw	r18,264(sp)
    1068:	dc404117 	ldw	r17,260(sp)
    106c:	dc004017 	ldw	r16,256(sp)
    1070:	dec04a04 	addi	sp,sp,296
    1074:	f800283a 	ret
    1078:	b009883a 	mov	r4,r22
    107c:	b80b883a 	mov	r5,r23
    1080:	d9801e04 	addi	r6,sp,120
    1084:	00074b80 	call	74b8 <__sprint_r>
    1088:	1000081e 	bne	r2,zero,10ac <___vfprintf_internal_r+0x3d0>
    108c:	da000404 	addi	r8,sp,16
    1090:	003f6706 	br	e30 <__alt_mem_Flash_flash_data+0xf4000e30>
    1094:	d8802017 	ldw	r2,128(sp)
    1098:	10000426 	beq	r2,zero,10ac <___vfprintf_internal_r+0x3d0>
    109c:	b009883a 	mov	r4,r22
    10a0:	b80b883a 	mov	r5,r23
    10a4:	d9801e04 	addi	r6,sp,120
    10a8:	00074b80 	call	74b8 <__sprint_r>
    10ac:	b880030b 	ldhu	r2,12(r23)
    10b0:	1080100c 	andi	r2,r2,64
    10b4:	103fe31e 	bne	r2,zero,1044 <__alt_mem_Flash_flash_data+0xf4001044>
    10b8:	d8802f17 	ldw	r2,188(sp)
    10bc:	003fe206 	br	1048 <__alt_mem_Flash_flash_data+0xf4001048>
    10c0:	b009883a 	mov	r4,r22
    10c4:	0004d6c0 	call	4d6c <__sinit>
    10c8:	003f1c06 	br	d3c <__alt_mem_Flash_flash_data+0xf4000d3c>
    10cc:	dc002a17 	ldw	r16,168(sp)
    10d0:	003f5a06 	br	e3c <__alt_mem_Flash_flash_data+0xf4000e3c>
    10d4:	1805883a 	mov	r2,r3
    10d8:	8c400114 	ori	r17,r17,4
    10dc:	1c000007 	ldb	r16,0(r3)
    10e0:	003f6306 	br	e70 <__alt_mem_Flash_flash_data+0xf4000e70>
    10e4:	1c000007 	ldb	r16,0(r3)
    10e8:	18800044 	addi	r2,r3,1
    10ec:	8286ad26 	beq	r16,r10,2ba4 <___vfprintf_internal_r+0x1ec8>
    10f0:	82fff404 	addi	r11,r16,-48
    10f4:	1007883a 	mov	r3,r2
    10f8:	0013883a 	mov	r9,zero
    10fc:	2aff5d36 	bltu	r5,r11,e74 <__alt_mem_Flash_flash_data+0xf4000e74>
    1100:	1c000007 	ldb	r16,0(r3)
    1104:	4a4002a4 	muli	r9,r9,10
    1108:	18c00044 	addi	r3,r3,1
    110c:	5a53883a 	add	r9,r11,r9
    1110:	82fff404 	addi	r11,r16,-48
    1114:	2afffa2e 	bgeu	r5,r11,1100 <__alt_mem_Flash_flash_data+0xf4001100>
    1118:	483f560e 	bge	r9,zero,e74 <__alt_mem_Flash_flash_data+0xf4000e74>
    111c:	027fffc4 	movi	r9,-1
    1120:	003f5406 	br	e74 <__alt_mem_Flash_flash_data+0xf4000e74>
    1124:	8c402014 	ori	r17,r17,128
    1128:	1805883a 	mov	r2,r3
    112c:	1c000007 	ldb	r16,0(r3)
    1130:	003f4f06 	br	e70 <__alt_mem_Flash_flash_data+0xf4000e70>
    1134:	1805883a 	mov	r2,r3
    1138:	d8002e15 	stw	zero,184(sp)
    113c:	82fff404 	addi	r11,r16,-48
    1140:	0019883a 	mov	r12,zero
    1144:	14000007 	ldb	r16,0(r2)
    1148:	630002a4 	muli	r12,r12,10
    114c:	18c00044 	addi	r3,r3,1
    1150:	1805883a 	mov	r2,r3
    1154:	62d9883a 	add	r12,r12,r11
    1158:	82fff404 	addi	r11,r16,-48
    115c:	2afff92e 	bgeu	r5,r11,1144 <__alt_mem_Flash_flash_data+0xf4001144>
    1160:	db002e15 	stw	r12,184(sp)
    1164:	003f4306 	br	e74 <__alt_mem_Flash_flash_data+0xf4000e74>
    1168:	8c400414 	ori	r17,r17,16
    116c:	d8c02a15 	stw	r3,168(sp)
    1170:	d9802785 	stb	r6,158(sp)
    1174:	8880080c 	andi	r2,r17,32
    1178:	d8c02d17 	ldw	r3,180(sp)
    117c:	10015a26 	beq	r2,zero,16e8 <___vfprintf_internal_r+0xa0c>
    1180:	db002d17 	ldw	r12,180(sp)
    1184:	18800117 	ldw	r2,4(r3)
    1188:	1cc00017 	ldw	r19,0(r3)
    118c:	63000204 	addi	r12,r12,8
    1190:	db002d15 	stw	r12,180(sp)
    1194:	1039883a 	mov	fp,r2
    1198:	10044516 	blt	r2,zero,22b0 <___vfprintf_internal_r+0x15d4>
    119c:	dd402783 	ldbu	r21,158(sp)
    11a0:	da403215 	stw	r9,200(sp)
    11a4:	00800044 	movi	r2,1
    11a8:	9f06b03a 	or	r3,r19,fp
    11ac:	48000216 	blt	r9,zero,11b8 <___vfprintf_internal_r+0x4dc>
    11b0:	013fdfc4 	movi	r4,-129
    11b4:	8922703a 	and	r17,r17,r4
    11b8:	1802071e 	bne	r3,zero,19d8 <___vfprintf_internal_r+0xcfc>
    11bc:	4802fa26 	beq	r9,zero,1da8 <___vfprintf_internal_r+0x10cc>
    11c0:	10803fcc 	andi	r2,r2,255
    11c4:	00c00044 	movi	r3,1
    11c8:	10c22926 	beq	r2,r3,1a70 <___vfprintf_internal_r+0xd94>
    11cc:	00c00084 	movi	r3,2
    11d0:	10c31726 	beq	r2,r3,1e30 <___vfprintf_internal_r+0x1154>
    11d4:	d8c01e04 	addi	r3,sp,120
    11d8:	9808d0fa 	srli	r4,r19,3
    11dc:	e00a977a 	slli	r5,fp,29
    11e0:	e038d0fa 	srli	fp,fp,3
    11e4:	9cc001cc 	andi	r19,r19,7
    11e8:	98800c04 	addi	r2,r19,48
    11ec:	18ffffc4 	addi	r3,r3,-1
    11f0:	2926b03a 	or	r19,r5,r4
    11f4:	18800005 	stb	r2,0(r3)
    11f8:	9f08b03a 	or	r4,r19,fp
    11fc:	203ff61e 	bne	r4,zero,11d8 <__alt_mem_Flash_flash_data+0xf40011d8>
    1200:	8900004c 	andi	r4,r17,1
    1204:	d8c03115 	stw	r3,196(sp)
    1208:	2003931e 	bne	r4,zero,2058 <___vfprintf_internal_r+0x137c>
    120c:	dac02817 	ldw	r11,160(sp)
    1210:	58e5c83a 	sub	r18,r11,r3
    1214:	9005883a 	mov	r2,r18
    1218:	9240010e 	bge	r18,r9,1220 <___vfprintf_internal_r+0x544>
    121c:	4805883a 	mov	r2,r9
    1220:	d8802b15 	stw	r2,172(sp)
    1224:	d8003415 	stw	zero,208(sp)
    1228:	a8803fcc 	andi	r2,r21,255
    122c:	1080201c 	xori	r2,r2,128
    1230:	10bfe004 	addi	r2,r2,-128
    1234:	10000326 	beq	r2,zero,1244 <___vfprintf_internal_r+0x568>
    1238:	db002b17 	ldw	r12,172(sp)
    123c:	63000044 	addi	r12,r12,1
    1240:	db002b15 	stw	r12,172(sp)
    1244:	88c0008c 	andi	r3,r17,2
    1248:	d8c02c15 	stw	r3,176(sp)
    124c:	18000326 	beq	r3,zero,125c <___vfprintf_internal_r+0x580>
    1250:	dac02b17 	ldw	r11,172(sp)
    1254:	5ac00084 	addi	r11,r11,2
    1258:	dac02b15 	stw	r11,172(sp)
    125c:	8b00210c 	andi	r12,r17,132
    1260:	db003015 	stw	r12,192(sp)
    1264:	6001da1e 	bne	r12,zero,19d0 <___vfprintf_internal_r+0xcf4>
    1268:	dac02e17 	ldw	r11,184(sp)
    126c:	db002b17 	ldw	r12,172(sp)
    1270:	5b39c83a 	sub	fp,r11,r12
    1274:	0701d60e 	bge	zero,fp,19d0 <___vfprintf_internal_r+0xcf4>
    1278:	02400404 	movi	r9,16
    127c:	d8c02017 	ldw	r3,128(sp)
    1280:	d8801f17 	ldw	r2,124(sp)
    1284:	4f053c0e 	bge	r9,fp,2778 <___vfprintf_internal_r+0x1a9c>
    1288:	014000b4 	movhi	r5,2
    128c:	2965a384 	addi	r5,r5,-26994
    1290:	d9403615 	stw	r5,216(sp)
    1294:	482b883a 	mov	r21,r9
    1298:	04c001c4 	movi	r19,7
    129c:	00000306 	br	12ac <___vfprintf_internal_r+0x5d0>
    12a0:	e73ffc04 	addi	fp,fp,-16
    12a4:	42000204 	addi	r8,r8,8
    12a8:	af00130e 	bge	r21,fp,12f8 <___vfprintf_internal_r+0x61c>
    12ac:	02c000b4 	movhi	r11,2
    12b0:	18c00404 	addi	r3,r3,16
    12b4:	10800044 	addi	r2,r2,1
    12b8:	5ae5a384 	addi	r11,r11,-26994
    12bc:	42c00015 	stw	r11,0(r8)
    12c0:	45400115 	stw	r21,4(r8)
    12c4:	d8c02015 	stw	r3,128(sp)
    12c8:	d8801f15 	stw	r2,124(sp)
    12cc:	98bff40e 	bge	r19,r2,12a0 <__alt_mem_Flash_flash_data+0xf40012a0>
    12d0:	b009883a 	mov	r4,r22
    12d4:	b80b883a 	mov	r5,r23
    12d8:	d9801e04 	addi	r6,sp,120
    12dc:	00074b80 	call	74b8 <__sprint_r>
    12e0:	103f721e 	bne	r2,zero,10ac <__alt_mem_Flash_flash_data+0xf40010ac>
    12e4:	e73ffc04 	addi	fp,fp,-16
    12e8:	d8c02017 	ldw	r3,128(sp)
    12ec:	d8801f17 	ldw	r2,124(sp)
    12f0:	da000404 	addi	r8,sp,16
    12f4:	af3fed16 	blt	r21,fp,12ac <__alt_mem_Flash_flash_data+0xf40012ac>
    12f8:	db003617 	ldw	r12,216(sp)
    12fc:	e0c7883a 	add	r3,fp,r3
    1300:	10800044 	addi	r2,r2,1
    1304:	43000015 	stw	r12,0(r8)
    1308:	47000115 	stw	fp,4(r8)
    130c:	d8c02015 	stw	r3,128(sp)
    1310:	d8801f15 	stw	r2,124(sp)
    1314:	010001c4 	movi	r4,7
    1318:	20830e16 	blt	r4,r2,1f54 <___vfprintf_internal_r+0x1278>
    131c:	d8802787 	ldb	r2,158(sp)
    1320:	42000204 	addi	r8,r8,8
    1324:	10000c26 	beq	r2,zero,1358 <___vfprintf_internal_r+0x67c>
    1328:	d8801f17 	ldw	r2,124(sp)
    132c:	d9002784 	addi	r4,sp,158
    1330:	18c00044 	addi	r3,r3,1
    1334:	10800044 	addi	r2,r2,1
    1338:	41000015 	stw	r4,0(r8)
    133c:	01000044 	movi	r4,1
    1340:	41000115 	stw	r4,4(r8)
    1344:	d8c02015 	stw	r3,128(sp)
    1348:	d8801f15 	stw	r2,124(sp)
    134c:	010001c4 	movi	r4,7
    1350:	2082a716 	blt	r4,r2,1df0 <___vfprintf_internal_r+0x1114>
    1354:	42000204 	addi	r8,r8,8
    1358:	dac02c17 	ldw	r11,176(sp)
    135c:	58000c26 	beq	r11,zero,1390 <___vfprintf_internal_r+0x6b4>
    1360:	d8801f17 	ldw	r2,124(sp)
    1364:	d9002704 	addi	r4,sp,156
    1368:	18c00084 	addi	r3,r3,2
    136c:	10800044 	addi	r2,r2,1
    1370:	41000015 	stw	r4,0(r8)
    1374:	01000084 	movi	r4,2
    1378:	41000115 	stw	r4,4(r8)
    137c:	d8c02015 	stw	r3,128(sp)
    1380:	d8801f15 	stw	r2,124(sp)
    1384:	010001c4 	movi	r4,7
    1388:	2082a116 	blt	r4,r2,1e10 <___vfprintf_internal_r+0x1134>
    138c:	42000204 	addi	r8,r8,8
    1390:	db003017 	ldw	r12,192(sp)
    1394:	00802004 	movi	r2,128
    1398:	60820326 	beq	r12,r2,1ba8 <___vfprintf_internal_r+0xecc>
    139c:	db003217 	ldw	r12,200(sp)
    13a0:	64abc83a 	sub	r21,r12,r18
    13a4:	0540260e 	bge	zero,r21,1440 <___vfprintf_internal_r+0x764>
    13a8:	07000404 	movi	fp,16
    13ac:	d8801f17 	ldw	r2,124(sp)
    13b0:	e544570e 	bge	fp,r21,2510 <___vfprintf_internal_r+0x1834>
    13b4:	014000b4 	movhi	r5,2
    13b8:	29659f84 	addi	r5,r5,-27010
    13bc:	d9402c15 	stw	r5,176(sp)
    13c0:	04c001c4 	movi	r19,7
    13c4:	00000306 	br	13d4 <___vfprintf_internal_r+0x6f8>
    13c8:	ad7ffc04 	addi	r21,r21,-16
    13cc:	42000204 	addi	r8,r8,8
    13d0:	e540110e 	bge	fp,r21,1418 <___vfprintf_internal_r+0x73c>
    13d4:	18c00404 	addi	r3,r3,16
    13d8:	10800044 	addi	r2,r2,1
    13dc:	45000015 	stw	r20,0(r8)
    13e0:	47000115 	stw	fp,4(r8)
    13e4:	d8c02015 	stw	r3,128(sp)
    13e8:	d8801f15 	stw	r2,124(sp)
    13ec:	98bff60e 	bge	r19,r2,13c8 <__alt_mem_Flash_flash_data+0xf40013c8>
    13f0:	b009883a 	mov	r4,r22
    13f4:	b80b883a 	mov	r5,r23
    13f8:	d9801e04 	addi	r6,sp,120
    13fc:	00074b80 	call	74b8 <__sprint_r>
    1400:	103f2a1e 	bne	r2,zero,10ac <__alt_mem_Flash_flash_data+0xf40010ac>
    1404:	ad7ffc04 	addi	r21,r21,-16
    1408:	d8c02017 	ldw	r3,128(sp)
    140c:	d8801f17 	ldw	r2,124(sp)
    1410:	da000404 	addi	r8,sp,16
    1414:	e57fef16 	blt	fp,r21,13d4 <__alt_mem_Flash_flash_data+0xf40013d4>
    1418:	dac02c17 	ldw	r11,176(sp)
    141c:	1d47883a 	add	r3,r3,r21
    1420:	10800044 	addi	r2,r2,1
    1424:	42c00015 	stw	r11,0(r8)
    1428:	45400115 	stw	r21,4(r8)
    142c:	d8c02015 	stw	r3,128(sp)
    1430:	d8801f15 	stw	r2,124(sp)
    1434:	010001c4 	movi	r4,7
    1438:	20826516 	blt	r4,r2,1dd0 <___vfprintf_internal_r+0x10f4>
    143c:	42000204 	addi	r8,r8,8
    1440:	8880400c 	andi	r2,r17,256
    1444:	1001901e 	bne	r2,zero,1a88 <___vfprintf_internal_r+0xdac>
    1448:	d8801f17 	ldw	r2,124(sp)
    144c:	db003117 	ldw	r12,196(sp)
    1450:	1c87883a 	add	r3,r3,r18
    1454:	10800044 	addi	r2,r2,1
    1458:	43000015 	stw	r12,0(r8)
    145c:	44800115 	stw	r18,4(r8)
    1460:	d8c02015 	stw	r3,128(sp)
    1464:	d8801f15 	stw	r2,124(sp)
    1468:	010001c4 	movi	r4,7
    146c:	20824016 	blt	r4,r2,1d70 <___vfprintf_internal_r+0x1094>
    1470:	42000204 	addi	r8,r8,8
    1474:	8c40010c 	andi	r17,r17,4
    1478:	88003126 	beq	r17,zero,1540 <___vfprintf_internal_r+0x864>
    147c:	db002e17 	ldw	r12,184(sp)
    1480:	dac02b17 	ldw	r11,172(sp)
    1484:	62e1c83a 	sub	r16,r12,r11
    1488:	04002d0e 	bge	zero,r16,1540 <___vfprintf_internal_r+0x864>
    148c:	04400404 	movi	r17,16
    1490:	d8801f17 	ldw	r2,124(sp)
    1494:	8c05150e 	bge	r17,r16,28ec <___vfprintf_internal_r+0x1c10>
    1498:	010000b4 	movhi	r4,2
    149c:	2125a384 	addi	r4,r4,-26994
    14a0:	d9003615 	stw	r4,216(sp)
    14a4:	048001c4 	movi	r18,7
    14a8:	00000306 	br	14b8 <___vfprintf_internal_r+0x7dc>
    14ac:	843ffc04 	addi	r16,r16,-16
    14b0:	42000204 	addi	r8,r8,8
    14b4:	8c00130e 	bge	r17,r16,1504 <___vfprintf_internal_r+0x828>
    14b8:	014000b4 	movhi	r5,2
    14bc:	18c00404 	addi	r3,r3,16
    14c0:	10800044 	addi	r2,r2,1
    14c4:	2965a384 	addi	r5,r5,-26994
    14c8:	41400015 	stw	r5,0(r8)
    14cc:	44400115 	stw	r17,4(r8)
    14d0:	d8c02015 	stw	r3,128(sp)
    14d4:	d8801f15 	stw	r2,124(sp)
    14d8:	90bff40e 	bge	r18,r2,14ac <__alt_mem_Flash_flash_data+0xf40014ac>
    14dc:	b009883a 	mov	r4,r22
    14e0:	b80b883a 	mov	r5,r23
    14e4:	d9801e04 	addi	r6,sp,120
    14e8:	00074b80 	call	74b8 <__sprint_r>
    14ec:	103eef1e 	bne	r2,zero,10ac <__alt_mem_Flash_flash_data+0xf40010ac>
    14f0:	843ffc04 	addi	r16,r16,-16
    14f4:	d8c02017 	ldw	r3,128(sp)
    14f8:	d8801f17 	ldw	r2,124(sp)
    14fc:	da000404 	addi	r8,sp,16
    1500:	8c3fed16 	blt	r17,r16,14b8 <__alt_mem_Flash_flash_data+0xf40014b8>
    1504:	dac03617 	ldw	r11,216(sp)
    1508:	1c07883a 	add	r3,r3,r16
    150c:	10800044 	addi	r2,r2,1
    1510:	42c00015 	stw	r11,0(r8)
    1514:	44000115 	stw	r16,4(r8)
    1518:	d8c02015 	stw	r3,128(sp)
    151c:	d8801f15 	stw	r2,124(sp)
    1520:	010001c4 	movi	r4,7
    1524:	2080060e 	bge	r4,r2,1540 <___vfprintf_internal_r+0x864>
    1528:	b009883a 	mov	r4,r22
    152c:	b80b883a 	mov	r5,r23
    1530:	d9801e04 	addi	r6,sp,120
    1534:	00074b80 	call	74b8 <__sprint_r>
    1538:	103edc1e 	bne	r2,zero,10ac <__alt_mem_Flash_flash_data+0xf40010ac>
    153c:	d8c02017 	ldw	r3,128(sp)
    1540:	d8802b17 	ldw	r2,172(sp)
    1544:	db002e17 	ldw	r12,184(sp)
    1548:	1300010e 	bge	r2,r12,1550 <___vfprintf_internal_r+0x874>
    154c:	6005883a 	mov	r2,r12
    1550:	dac02f17 	ldw	r11,188(sp)
    1554:	5897883a 	add	r11,r11,r2
    1558:	dac02f15 	stw	r11,188(sp)
    155c:	18020c1e 	bne	r3,zero,1d90 <___vfprintf_internal_r+0x10b4>
    1560:	d8001f15 	stw	zero,124(sp)
    1564:	da000404 	addi	r8,sp,16
    1568:	003e1706 	br	dc8 <__alt_mem_Flash_flash_data+0xf4000dc8>
    156c:	8c400414 	ori	r17,r17,16
    1570:	d8c02a15 	stw	r3,168(sp)
    1574:	8880080c 	andi	r2,r17,32
    1578:	10010126 	beq	r2,zero,1980 <___vfprintf_internal_r+0xca4>
    157c:	db002d17 	ldw	r12,180(sp)
    1580:	0005883a 	mov	r2,zero
    1584:	64c00017 	ldw	r19,0(r12)
    1588:	67000117 	ldw	fp,4(r12)
    158c:	63000204 	addi	r12,r12,8
    1590:	db002d15 	stw	r12,180(sp)
    1594:	9f06b03a 	or	r3,r19,fp
    1598:	d8002785 	stb	zero,158(sp)
    159c:	da403215 	stw	r9,200(sp)
    15a0:	002b883a 	mov	r21,zero
    15a4:	003f0106 	br	11ac <__alt_mem_Flash_flash_data+0xf40011ac>
    15a8:	8c400414 	ori	r17,r17,16
    15ac:	d8c02a15 	stw	r3,168(sp)
    15b0:	8880080c 	andi	r2,r17,32
    15b4:	1000e326 	beq	r2,zero,1944 <___vfprintf_internal_r+0xc68>
    15b8:	dac02d17 	ldw	r11,180(sp)
    15bc:	00800044 	movi	r2,1
    15c0:	5cc00017 	ldw	r19,0(r11)
    15c4:	5f000117 	ldw	fp,4(r11)
    15c8:	5ac00204 	addi	r11,r11,8
    15cc:	dac02d15 	stw	r11,180(sp)
    15d0:	9f06b03a 	or	r3,r19,fp
    15d4:	003ff006 	br	1598 <__alt_mem_Flash_flash_data+0xf4001598>
    15d8:	db002d17 	ldw	r12,180(sp)
    15dc:	dac02d17 	ldw	r11,180(sp)
    15e0:	d8c02a15 	stw	r3,168(sp)
    15e4:	63000017 	ldw	r12,0(r12)
    15e8:	5ac00117 	ldw	r11,4(r11)
    15ec:	d9802785 	stb	r6,158(sp)
    15f0:	6009883a 	mov	r4,r12
    15f4:	580b883a 	mov	r5,r11
    15f8:	db003715 	stw	r12,220(sp)
    15fc:	da003f15 	stw	r8,252(sp)
    1600:	da403e15 	stw	r9,248(sp)
    1604:	dac03915 	stw	r11,228(sp)
    1608:	000707c0 	call	707c <__fpclassifyd>
    160c:	db002d17 	ldw	r12,180(sp)
    1610:	04800044 	movi	r18,1
    1614:	da003f17 	ldw	r8,252(sp)
    1618:	64c00204 	addi	r19,r12,8
    161c:	da403e17 	ldw	r9,248(sp)
    1620:	d9003717 	ldw	r4,220(sp)
    1624:	d9403917 	ldw	r5,228(sp)
    1628:	14832b1e 	bne	r2,r18,22d8 <___vfprintf_internal_r+0x15fc>
    162c:	000d883a 	mov	r6,zero
    1630:	000f883a 	mov	r7,zero
    1634:	000bc440 	call	bc44 <__ledf2>
    1638:	da003f17 	ldw	r8,252(sp)
    163c:	1004b716 	blt	r2,zero,291c <___vfprintf_internal_r+0x1c40>
    1640:	dd402783 	ldbu	r21,158(sp)
    1644:	008011c4 	movi	r2,71
    1648:	14040e0e 	bge	r2,r16,2684 <___vfprintf_internal_r+0x19a8>
    164c:	00c000b4 	movhi	r3,2
    1650:	18e59004 	addi	r3,r3,-27072
    1654:	d8c03115 	stw	r3,196(sp)
    1658:	02c000c4 	movi	r11,3
    165c:	00bfdfc4 	movi	r2,-129
    1660:	dac02b15 	stw	r11,172(sp)
    1664:	88a2703a 	and	r17,r17,r2
    1668:	dcc02d15 	stw	r19,180(sp)
    166c:	5825883a 	mov	r18,r11
    1670:	d8003215 	stw	zero,200(sp)
    1674:	d8003415 	stw	zero,208(sp)
    1678:	003eeb06 	br	1228 <__alt_mem_Flash_flash_data+0xf4001228>
    167c:	db002d17 	ldw	r12,180(sp)
    1680:	00800c04 	movi	r2,48
    1684:	d8802705 	stb	r2,156(sp)
    1688:	64c00017 	ldw	r19,0(r12)
    168c:	00801e04 	movi	r2,120
    1690:	d8802745 	stb	r2,157(sp)
    1694:	008000b4 	movhi	r2,2
    1698:	10a59804 	addi	r2,r2,-27040
    169c:	63000104 	addi	r12,r12,4
    16a0:	d8c02a15 	stw	r3,168(sp)
    16a4:	d8803b15 	stw	r2,236(sp)
    16a8:	0039883a 	mov	fp,zero
    16ac:	8c400094 	ori	r17,r17,2
    16b0:	db002d15 	stw	r12,180(sp)
    16b4:	00800084 	movi	r2,2
    16b8:	04001e04 	movi	r16,120
    16bc:	9807883a 	mov	r3,r19
    16c0:	003fb506 	br	1598 <__alt_mem_Flash_flash_data+0xf4001598>
    16c4:	8c400214 	ori	r17,r17,8
    16c8:	1805883a 	mov	r2,r3
    16cc:	1c000007 	ldb	r16,0(r3)
    16d0:	003de706 	br	e70 <__alt_mem_Flash_flash_data+0xf4000e70>
    16d4:	d8c02a15 	stw	r3,168(sp)
    16d8:	d9802785 	stb	r6,158(sp)
    16dc:	8880080c 	andi	r2,r17,32
    16e0:	d8c02d17 	ldw	r3,180(sp)
    16e4:	103ea61e 	bne	r2,zero,1180 <__alt_mem_Flash_flash_data+0xf4001180>
    16e8:	8880040c 	andi	r2,r17,16
    16ec:	1002221e 	bne	r2,zero,1f78 <___vfprintf_internal_r+0x129c>
    16f0:	8880100c 	andi	r2,r17,64
    16f4:	10022026 	beq	r2,zero,1f78 <___vfprintf_internal_r+0x129c>
    16f8:	1cc0000f 	ldh	r19,0(r3)
    16fc:	db002d17 	ldw	r12,180(sp)
    1700:	9839d7fa 	srai	fp,r19,31
    1704:	63000104 	addi	r12,r12,4
    1708:	db002d15 	stw	r12,180(sp)
    170c:	e005883a 	mov	r2,fp
    1710:	003ea106 	br	1198 <__alt_mem_Flash_flash_data+0xf4001198>
    1714:	8c401014 	ori	r17,r17,64
    1718:	1805883a 	mov	r2,r3
    171c:	1c000007 	ldb	r16,0(r3)
    1720:	003dd306 	br	e70 <__alt_mem_Flash_flash_data+0xf4000e70>
    1724:	1c000007 	ldb	r16,0(r3)
    1728:	81c3e926 	beq	r16,r7,26d0 <___vfprintf_internal_r+0x19f4>
    172c:	8c400414 	ori	r17,r17,16
    1730:	1805883a 	mov	r2,r3
    1734:	003dce06 	br	e70 <__alt_mem_Flash_flash_data+0xf4000e70>
    1738:	d8c02a15 	stw	r3,168(sp)
    173c:	d9802785 	stb	r6,158(sp)
    1740:	8880080c 	andi	r2,r17,32
    1744:	10034726 	beq	r2,zero,2464 <___vfprintf_internal_r+0x1788>
    1748:	db002d17 	ldw	r12,180(sp)
    174c:	dac02f17 	ldw	r11,188(sp)
    1750:	60800017 	ldw	r2,0(r12)
    1754:	5807d7fa 	srai	r3,r11,31
    1758:	63000104 	addi	r12,r12,4
    175c:	db002d15 	stw	r12,180(sp)
    1760:	12c00015 	stw	r11,0(r2)
    1764:	10c00115 	stw	r3,4(r2)
    1768:	003d9706 	br	dc8 <__alt_mem_Flash_flash_data+0xf4000dc8>
    176c:	030000b4 	movhi	r12,2
    1770:	63259304 	addi	r12,r12,-27060
    1774:	d8c02a15 	stw	r3,168(sp)
    1778:	d9802785 	stb	r6,158(sp)
    177c:	db003b15 	stw	r12,236(sp)
    1780:	88c0080c 	andi	r3,r17,32
    1784:	d8802d17 	ldw	r2,180(sp)
    1788:	18005b26 	beq	r3,zero,18f8 <___vfprintf_internal_r+0xc1c>
    178c:	dac02d17 	ldw	r11,180(sp)
    1790:	14c00017 	ldw	r19,0(r2)
    1794:	17000117 	ldw	fp,4(r2)
    1798:	5ac00204 	addi	r11,r11,8
    179c:	dac02d15 	stw	r11,180(sp)
    17a0:	8880004c 	andi	r2,r17,1
    17a4:	10022926 	beq	r2,zero,204c <___vfprintf_internal_r+0x1370>
    17a8:	9f06b03a 	or	r3,r19,fp
    17ac:	18032b26 	beq	r3,zero,245c <___vfprintf_internal_r+0x1780>
    17b0:	00800c04 	movi	r2,48
    17b4:	d8802705 	stb	r2,156(sp)
    17b8:	dc002745 	stb	r16,157(sp)
    17bc:	8c400094 	ori	r17,r17,2
    17c0:	00800084 	movi	r2,2
    17c4:	003f7406 	br	1598 <__alt_mem_Flash_flash_data+0xf4001598>
    17c8:	30803fcc 	andi	r2,r6,255
    17cc:	1080201c 	xori	r2,r2,128
    17d0:	10bfe004 	addi	r2,r2,-128
    17d4:	1003351e 	bne	r2,zero,24ac <___vfprintf_internal_r+0x17d0>
    17d8:	1805883a 	mov	r2,r3
    17dc:	01800804 	movi	r6,32
    17e0:	1c000007 	ldb	r16,0(r3)
    17e4:	003da206 	br	e70 <__alt_mem_Flash_flash_data+0xf4000e70>
    17e8:	dac02d17 	ldw	r11,180(sp)
    17ec:	db002d17 	ldw	r12,180(sp)
    17f0:	5ac00017 	ldw	r11,0(r11)
    17f4:	dac02e15 	stw	r11,184(sp)
    17f8:	62c00104 	addi	r11,r12,4
    17fc:	db002e17 	ldw	r12,184(sp)
    1800:	6003ad16 	blt	r12,zero,26b8 <___vfprintf_internal_r+0x19dc>
    1804:	dac02d15 	stw	r11,180(sp)
    1808:	1805883a 	mov	r2,r3
    180c:	1c000007 	ldb	r16,0(r3)
    1810:	003d9706 	br	e70 <__alt_mem_Flash_flash_data+0xf4000e70>
    1814:	1805883a 	mov	r2,r3
    1818:	01800ac4 	movi	r6,43
    181c:	1c000007 	ldb	r16,0(r3)
    1820:	003d9306 	br	e70 <__alt_mem_Flash_flash_data+0xf4000e70>
    1824:	db002d17 	ldw	r12,180(sp)
    1828:	d8c02a15 	stw	r3,168(sp)
    182c:	00c00044 	movi	r3,1
    1830:	60800017 	ldw	r2,0(r12)
    1834:	63000104 	addi	r12,r12,4
    1838:	d8c02b15 	stw	r3,172(sp)
    183c:	d8002785 	stb	zero,158(sp)
    1840:	d8801405 	stb	r2,80(sp)
    1844:	db002d15 	stw	r12,180(sp)
    1848:	dac01404 	addi	r11,sp,80
    184c:	1825883a 	mov	r18,r3
    1850:	d8003215 	stw	zero,200(sp)
    1854:	d8003415 	stw	zero,208(sp)
    1858:	dac03115 	stw	r11,196(sp)
    185c:	0005883a 	mov	r2,zero
    1860:	003e7806 	br	1244 <__alt_mem_Flash_flash_data+0xf4001244>
    1864:	dac02d17 	ldw	r11,180(sp)
    1868:	db002d17 	ldw	r12,180(sp)
    186c:	d8c02a15 	stw	r3,168(sp)
    1870:	5ac00017 	ldw	r11,0(r11)
    1874:	d8002785 	stb	zero,158(sp)
    1878:	64c00104 	addi	r19,r12,4
    187c:	dac03115 	stw	r11,196(sp)
    1880:	5803fe26 	beq	r11,zero,287c <___vfprintf_internal_r+0x1ba0>
    1884:	d9003117 	ldw	r4,196(sp)
    1888:	4803b416 	blt	r9,zero,275c <___vfprintf_internal_r+0x1a80>
    188c:	480d883a 	mov	r6,r9
    1890:	000b883a 	mov	r5,zero
    1894:	da003f15 	stw	r8,252(sp)
    1898:	da403e15 	stw	r9,248(sp)
    189c:	0005d980 	call	5d98 <memchr>
    18a0:	da003f17 	ldw	r8,252(sp)
    18a4:	da403e17 	ldw	r9,248(sp)
    18a8:	10043026 	beq	r2,zero,296c <___vfprintf_internal_r+0x1c90>
    18ac:	d8c03117 	ldw	r3,196(sp)
    18b0:	10e5c83a 	sub	r18,r2,r3
    18b4:	4c836b16 	blt	r9,r18,2664 <___vfprintf_internal_r+0x1988>
    18b8:	9005883a 	mov	r2,r18
    18bc:	9003ac16 	blt	r18,zero,2770 <___vfprintf_internal_r+0x1a94>
    18c0:	dd402783 	ldbu	r21,158(sp)
    18c4:	d8802b15 	stw	r2,172(sp)
    18c8:	dcc02d15 	stw	r19,180(sp)
    18cc:	d8003215 	stw	zero,200(sp)
    18d0:	d8003415 	stw	zero,208(sp)
    18d4:	003e5406 	br	1228 <__alt_mem_Flash_flash_data+0xf4001228>
    18d8:	008000b4 	movhi	r2,2
    18dc:	10a59804 	addi	r2,r2,-27040
    18e0:	d8c02a15 	stw	r3,168(sp)
    18e4:	d8803b15 	stw	r2,236(sp)
    18e8:	d9802785 	stb	r6,158(sp)
    18ec:	88c0080c 	andi	r3,r17,32
    18f0:	d8802d17 	ldw	r2,180(sp)
    18f4:	183fa51e 	bne	r3,zero,178c <__alt_mem_Flash_flash_data+0xf400178c>
    18f8:	88c0040c 	andi	r3,r17,16
    18fc:	1802ee26 	beq	r3,zero,24b8 <___vfprintf_internal_r+0x17dc>
    1900:	db002d17 	ldw	r12,180(sp)
    1904:	14c00017 	ldw	r19,0(r2)
    1908:	0039883a 	mov	fp,zero
    190c:	63000104 	addi	r12,r12,4
    1910:	db002d15 	stw	r12,180(sp)
    1914:	003fa206 	br	17a0 <__alt_mem_Flash_flash_data+0xf40017a0>
    1918:	8c400054 	ori	r17,r17,1
    191c:	1805883a 	mov	r2,r3
    1920:	1c000007 	ldb	r16,0(r3)
    1924:	003d5206 	br	e70 <__alt_mem_Flash_flash_data+0xf4000e70>
    1928:	8c400814 	ori	r17,r17,32
    192c:	1805883a 	mov	r2,r3
    1930:	1c000007 	ldb	r16,0(r3)
    1934:	003d4e06 	br	e70 <__alt_mem_Flash_flash_data+0xf4000e70>
    1938:	d8c02a15 	stw	r3,168(sp)
    193c:	8880080c 	andi	r2,r17,32
    1940:	103f1d1e 	bne	r2,zero,15b8 <__alt_mem_Flash_flash_data+0xf40015b8>
    1944:	8880040c 	andi	r2,r17,16
    1948:	1001b81e 	bne	r2,zero,202c <___vfprintf_internal_r+0x1350>
    194c:	8880100c 	andi	r2,r17,64
    1950:	1001b626 	beq	r2,zero,202c <___vfprintf_internal_r+0x1350>
    1954:	dac02d17 	ldw	r11,180(sp)
    1958:	0039883a 	mov	fp,zero
    195c:	00800044 	movi	r2,1
    1960:	5cc0000b 	ldhu	r19,0(r11)
    1964:	5ac00104 	addi	r11,r11,4
    1968:	dac02d15 	stw	r11,180(sp)
    196c:	9807883a 	mov	r3,r19
    1970:	003f0906 	br	1598 <__alt_mem_Flash_flash_data+0xf4001598>
    1974:	d8c02a15 	stw	r3,168(sp)
    1978:	8880080c 	andi	r2,r17,32
    197c:	103eff1e 	bne	r2,zero,157c <__alt_mem_Flash_flash_data+0xf400157c>
    1980:	8880040c 	andi	r2,r17,16
    1984:	1001a11e 	bne	r2,zero,200c <___vfprintf_internal_r+0x1330>
    1988:	8880100c 	andi	r2,r17,64
    198c:	10019f26 	beq	r2,zero,200c <___vfprintf_internal_r+0x1330>
    1990:	db002d17 	ldw	r12,180(sp)
    1994:	0039883a 	mov	fp,zero
    1998:	0005883a 	mov	r2,zero
    199c:	64c0000b 	ldhu	r19,0(r12)
    19a0:	63000104 	addi	r12,r12,4
    19a4:	db002d15 	stw	r12,180(sp)
    19a8:	9807883a 	mov	r3,r19
    19ac:	003efa06 	br	1598 <__alt_mem_Flash_flash_data+0xf4001598>
    19b0:	d8c02a15 	stw	r3,168(sp)
    19b4:	d9802785 	stb	r6,158(sp)
    19b8:	803db626 	beq	r16,zero,1094 <__alt_mem_Flash_flash_data+0xf4001094>
    19bc:	00c00044 	movi	r3,1
    19c0:	d8c02b15 	stw	r3,172(sp)
    19c4:	dc001405 	stb	r16,80(sp)
    19c8:	d8002785 	stb	zero,158(sp)
    19cc:	003f9e06 	br	1848 <__alt_mem_Flash_flash_data+0xf4001848>
    19d0:	d8c02017 	ldw	r3,128(sp)
    19d4:	003e5306 	br	1324 <__alt_mem_Flash_flash_data+0xf4001324>
    19d8:	10803fcc 	andi	r2,r2,255
    19dc:	00c00044 	movi	r3,1
    19e0:	10fdfa1e 	bne	r2,r3,11cc <__alt_mem_Flash_flash_data+0xf40011cc>
    19e4:	e000021e 	bne	fp,zero,19f0 <___vfprintf_internal_r+0xd14>
    19e8:	00800244 	movi	r2,9
    19ec:	14c0202e 	bgeu	r2,r19,1a70 <___vfprintf_internal_r+0xd94>
    19f0:	dc002b15 	stw	r16,172(sp)
    19f4:	dc402c15 	stw	r17,176(sp)
    19f8:	9821883a 	mov	r16,r19
    19fc:	e023883a 	mov	r17,fp
    1a00:	dc801e04 	addi	r18,sp,120
    1a04:	4827883a 	mov	r19,r9
    1a08:	4039883a 	mov	fp,r8
    1a0c:	8009883a 	mov	r4,r16
    1a10:	880b883a 	mov	r5,r17
    1a14:	01800284 	movi	r6,10
    1a18:	000f883a 	mov	r7,zero
    1a1c:	000a2bc0 	call	a2bc <__umoddi3>
    1a20:	10800c04 	addi	r2,r2,48
    1a24:	94bfffc4 	addi	r18,r18,-1
    1a28:	8009883a 	mov	r4,r16
    1a2c:	880b883a 	mov	r5,r17
    1a30:	01800284 	movi	r6,10
    1a34:	000f883a 	mov	r7,zero
    1a38:	90800005 	stb	r2,0(r18)
    1a3c:	0009cfc0 	call	9cfc <__udivdi3>
    1a40:	1021883a 	mov	r16,r2
    1a44:	10c4b03a 	or	r2,r2,r3
    1a48:	1823883a 	mov	r17,r3
    1a4c:	103fef1e 	bne	r2,zero,1a0c <__alt_mem_Flash_flash_data+0xf4001a0c>
    1a50:	dac02817 	ldw	r11,160(sp)
    1a54:	dc803115 	stw	r18,196(sp)
    1a58:	dc002b17 	ldw	r16,172(sp)
    1a5c:	dc402c17 	ldw	r17,176(sp)
    1a60:	9813883a 	mov	r9,r19
    1a64:	e011883a 	mov	r8,fp
    1a68:	5ca5c83a 	sub	r18,r11,r18
    1a6c:	003de906 	br	1214 <__alt_mem_Flash_flash_data+0xf4001214>
    1a70:	9cc00c04 	addi	r19,r19,48
    1a74:	d8c01dc4 	addi	r3,sp,119
    1a78:	dcc01dc5 	stb	r19,119(sp)
    1a7c:	dc803c17 	ldw	r18,240(sp)
    1a80:	d8c03115 	stw	r3,196(sp)
    1a84:	003de306 	br	1214 <__alt_mem_Flash_flash_data+0xf4001214>
    1a88:	00801944 	movi	r2,101
    1a8c:	1400710e 	bge	r2,r16,1c54 <___vfprintf_internal_r+0xf78>
    1a90:	d9003717 	ldw	r4,220(sp)
    1a94:	d9403917 	ldw	r5,228(sp)
    1a98:	000d883a 	mov	r6,zero
    1a9c:	000f883a 	mov	r7,zero
    1aa0:	d8c03d15 	stw	r3,244(sp)
    1aa4:	da003f15 	stw	r8,252(sp)
    1aa8:	000bae00 	call	bae0 <__eqdf2>
    1aac:	d8c03d17 	ldw	r3,244(sp)
    1ab0:	da003f17 	ldw	r8,252(sp)
    1ab4:	1000ef1e 	bne	r2,zero,1e74 <___vfprintf_internal_r+0x1198>
    1ab8:	d8801f17 	ldw	r2,124(sp)
    1abc:	010000b4 	movhi	r4,2
    1ac0:	21259f04 	addi	r4,r4,-27012
    1ac4:	18c00044 	addi	r3,r3,1
    1ac8:	10800044 	addi	r2,r2,1
    1acc:	41000015 	stw	r4,0(r8)
    1ad0:	01000044 	movi	r4,1
    1ad4:	41000115 	stw	r4,4(r8)
    1ad8:	d8c02015 	stw	r3,128(sp)
    1adc:	d8801f15 	stw	r2,124(sp)
    1ae0:	010001c4 	movi	r4,7
    1ae4:	20828e16 	blt	r4,r2,2520 <___vfprintf_internal_r+0x1844>
    1ae8:	42000204 	addi	r8,r8,8
    1aec:	d8802617 	ldw	r2,152(sp)
    1af0:	dac03317 	ldw	r11,204(sp)
    1af4:	12c00216 	blt	r2,r11,1b00 <___vfprintf_internal_r+0xe24>
    1af8:	8880004c 	andi	r2,r17,1
    1afc:	103e5d26 	beq	r2,zero,1474 <__alt_mem_Flash_flash_data+0xf4001474>
    1b00:	db003817 	ldw	r12,224(sp)
    1b04:	d8801f17 	ldw	r2,124(sp)
    1b08:	dac03517 	ldw	r11,212(sp)
    1b0c:	1b07883a 	add	r3,r3,r12
    1b10:	10800044 	addi	r2,r2,1
    1b14:	42c00015 	stw	r11,0(r8)
    1b18:	43000115 	stw	r12,4(r8)
    1b1c:	d8c02015 	stw	r3,128(sp)
    1b20:	d8801f15 	stw	r2,124(sp)
    1b24:	010001c4 	movi	r4,7
    1b28:	2082ed16 	blt	r4,r2,26e0 <___vfprintf_internal_r+0x1a04>
    1b2c:	42000204 	addi	r8,r8,8
    1b30:	db003317 	ldw	r12,204(sp)
    1b34:	643fffc4 	addi	r16,r12,-1
    1b38:	043e4e0e 	bge	zero,r16,1474 <__alt_mem_Flash_flash_data+0xf4001474>
    1b3c:	04800404 	movi	r18,16
    1b40:	d8801f17 	ldw	r2,124(sp)
    1b44:	94007e0e 	bge	r18,r16,1d40 <___vfprintf_internal_r+0x1064>
    1b48:	014000b4 	movhi	r5,2
    1b4c:	29659f84 	addi	r5,r5,-27010
    1b50:	d9402c15 	stw	r5,176(sp)
    1b54:	054001c4 	movi	r21,7
    1b58:	00000306 	br	1b68 <___vfprintf_internal_r+0xe8c>
    1b5c:	42000204 	addi	r8,r8,8
    1b60:	843ffc04 	addi	r16,r16,-16
    1b64:	9400790e 	bge	r18,r16,1d4c <___vfprintf_internal_r+0x1070>
    1b68:	18c00404 	addi	r3,r3,16
    1b6c:	10800044 	addi	r2,r2,1
    1b70:	45000015 	stw	r20,0(r8)
    1b74:	44800115 	stw	r18,4(r8)
    1b78:	d8c02015 	stw	r3,128(sp)
    1b7c:	d8801f15 	stw	r2,124(sp)
    1b80:	a8bff60e 	bge	r21,r2,1b5c <__alt_mem_Flash_flash_data+0xf4001b5c>
    1b84:	b009883a 	mov	r4,r22
    1b88:	b80b883a 	mov	r5,r23
    1b8c:	d9801e04 	addi	r6,sp,120
    1b90:	00074b80 	call	74b8 <__sprint_r>
    1b94:	103d451e 	bne	r2,zero,10ac <__alt_mem_Flash_flash_data+0xf40010ac>
    1b98:	d8c02017 	ldw	r3,128(sp)
    1b9c:	d8801f17 	ldw	r2,124(sp)
    1ba0:	da000404 	addi	r8,sp,16
    1ba4:	003fee06 	br	1b60 <__alt_mem_Flash_flash_data+0xf4001b60>
    1ba8:	dac02e17 	ldw	r11,184(sp)
    1bac:	db002b17 	ldw	r12,172(sp)
    1bb0:	5b2bc83a 	sub	r21,r11,r12
    1bb4:	057df90e 	bge	zero,r21,139c <__alt_mem_Flash_flash_data+0xf400139c>
    1bb8:	07000404 	movi	fp,16
    1bbc:	d8801f17 	ldw	r2,124(sp)
    1bc0:	e543640e 	bge	fp,r21,2954 <___vfprintf_internal_r+0x1c78>
    1bc4:	014000b4 	movhi	r5,2
    1bc8:	29659f84 	addi	r5,r5,-27010
    1bcc:	d9402c15 	stw	r5,176(sp)
    1bd0:	04c001c4 	movi	r19,7
    1bd4:	00000306 	br	1be4 <___vfprintf_internal_r+0xf08>
    1bd8:	ad7ffc04 	addi	r21,r21,-16
    1bdc:	42000204 	addi	r8,r8,8
    1be0:	e540110e 	bge	fp,r21,1c28 <___vfprintf_internal_r+0xf4c>
    1be4:	18c00404 	addi	r3,r3,16
    1be8:	10800044 	addi	r2,r2,1
    1bec:	45000015 	stw	r20,0(r8)
    1bf0:	47000115 	stw	fp,4(r8)
    1bf4:	d8c02015 	stw	r3,128(sp)
    1bf8:	d8801f15 	stw	r2,124(sp)
    1bfc:	98bff60e 	bge	r19,r2,1bd8 <__alt_mem_Flash_flash_data+0xf4001bd8>
    1c00:	b009883a 	mov	r4,r22
    1c04:	b80b883a 	mov	r5,r23
    1c08:	d9801e04 	addi	r6,sp,120
    1c0c:	00074b80 	call	74b8 <__sprint_r>
    1c10:	103d261e 	bne	r2,zero,10ac <__alt_mem_Flash_flash_data+0xf40010ac>
    1c14:	ad7ffc04 	addi	r21,r21,-16
    1c18:	d8c02017 	ldw	r3,128(sp)
    1c1c:	d8801f17 	ldw	r2,124(sp)
    1c20:	da000404 	addi	r8,sp,16
    1c24:	e57fef16 	blt	fp,r21,1be4 <__alt_mem_Flash_flash_data+0xf4001be4>
    1c28:	dac02c17 	ldw	r11,176(sp)
    1c2c:	1d47883a 	add	r3,r3,r21
    1c30:	10800044 	addi	r2,r2,1
    1c34:	42c00015 	stw	r11,0(r8)
    1c38:	45400115 	stw	r21,4(r8)
    1c3c:	d8c02015 	stw	r3,128(sp)
    1c40:	d8801f15 	stw	r2,124(sp)
    1c44:	010001c4 	movi	r4,7
    1c48:	20819116 	blt	r4,r2,2290 <___vfprintf_internal_r+0x15b4>
    1c4c:	42000204 	addi	r8,r8,8
    1c50:	003dd206 	br	139c <__alt_mem_Flash_flash_data+0xf400139c>
    1c54:	db003317 	ldw	r12,204(sp)
    1c58:	00800044 	movi	r2,1
    1c5c:	18c00044 	addi	r3,r3,1
    1c60:	1301530e 	bge	r2,r12,21b0 <___vfprintf_internal_r+0x14d4>
    1c64:	dc001f17 	ldw	r16,124(sp)
    1c68:	dac03117 	ldw	r11,196(sp)
    1c6c:	00800044 	movi	r2,1
    1c70:	84000044 	addi	r16,r16,1
    1c74:	40800115 	stw	r2,4(r8)
    1c78:	42c00015 	stw	r11,0(r8)
    1c7c:	d8c02015 	stw	r3,128(sp)
    1c80:	dc001f15 	stw	r16,124(sp)
    1c84:	008001c4 	movi	r2,7
    1c88:	14016b16 	blt	r2,r16,2238 <___vfprintf_internal_r+0x155c>
    1c8c:	42000204 	addi	r8,r8,8
    1c90:	db003817 	ldw	r12,224(sp)
    1c94:	dac03517 	ldw	r11,212(sp)
    1c98:	84000044 	addi	r16,r16,1
    1c9c:	1b07883a 	add	r3,r3,r12
    1ca0:	42c00015 	stw	r11,0(r8)
    1ca4:	43000115 	stw	r12,4(r8)
    1ca8:	d8c02015 	stw	r3,128(sp)
    1cac:	dc001f15 	stw	r16,124(sp)
    1cb0:	008001c4 	movi	r2,7
    1cb4:	14016916 	blt	r2,r16,225c <___vfprintf_internal_r+0x1580>
    1cb8:	44800204 	addi	r18,r8,8
    1cbc:	d9003717 	ldw	r4,220(sp)
    1cc0:	d9403917 	ldw	r5,228(sp)
    1cc4:	000d883a 	mov	r6,zero
    1cc8:	000f883a 	mov	r7,zero
    1ccc:	d8c03d15 	stw	r3,244(sp)
    1cd0:	000bae00 	call	bae0 <__eqdf2>
    1cd4:	d8c03d17 	ldw	r3,244(sp)
    1cd8:	db003317 	ldw	r12,204(sp)
    1cdc:	1000ad26 	beq	r2,zero,1f94 <___vfprintf_internal_r+0x12b8>
    1ce0:	dac03117 	ldw	r11,196(sp)
    1ce4:	60bfffc4 	addi	r2,r12,-1
    1ce8:	1887883a 	add	r3,r3,r2
    1cec:	59000044 	addi	r4,r11,1
    1cf0:	84000044 	addi	r16,r16,1
    1cf4:	90800115 	stw	r2,4(r18)
    1cf8:	91000015 	stw	r4,0(r18)
    1cfc:	d8c02015 	stw	r3,128(sp)
    1d00:	dc001f15 	stw	r16,124(sp)
    1d04:	008001c4 	movi	r2,7
    1d08:	14014216 	blt	r2,r16,2214 <___vfprintf_internal_r+0x1538>
    1d0c:	94800204 	addi	r18,r18,8
    1d10:	dac03a17 	ldw	r11,232(sp)
    1d14:	dd4022c4 	addi	r21,sp,139
    1d18:	84000044 	addi	r16,r16,1
    1d1c:	1ac7883a 	add	r3,r3,r11
    1d20:	95400015 	stw	r21,0(r18)
    1d24:	92c00115 	stw	r11,4(r18)
    1d28:	d8c02015 	stw	r3,128(sp)
    1d2c:	dc001f15 	stw	r16,124(sp)
    1d30:	008001c4 	movi	r2,7
    1d34:	14000e16 	blt	r2,r16,1d70 <___vfprintf_internal_r+0x1094>
    1d38:	92000204 	addi	r8,r18,8
    1d3c:	003dcd06 	br	1474 <__alt_mem_Flash_flash_data+0xf4001474>
    1d40:	010000b4 	movhi	r4,2
    1d44:	21259f84 	addi	r4,r4,-27010
    1d48:	d9002c15 	stw	r4,176(sp)
    1d4c:	dac02c17 	ldw	r11,176(sp)
    1d50:	1c07883a 	add	r3,r3,r16
    1d54:	44000115 	stw	r16,4(r8)
    1d58:	42c00015 	stw	r11,0(r8)
    1d5c:	10800044 	addi	r2,r2,1
    1d60:	d8c02015 	stw	r3,128(sp)
    1d64:	d8801f15 	stw	r2,124(sp)
    1d68:	010001c4 	movi	r4,7
    1d6c:	20bdc00e 	bge	r4,r2,1470 <__alt_mem_Flash_flash_data+0xf4001470>
    1d70:	b009883a 	mov	r4,r22
    1d74:	b80b883a 	mov	r5,r23
    1d78:	d9801e04 	addi	r6,sp,120
    1d7c:	00074b80 	call	74b8 <__sprint_r>
    1d80:	103cca1e 	bne	r2,zero,10ac <__alt_mem_Flash_flash_data+0xf40010ac>
    1d84:	d8c02017 	ldw	r3,128(sp)
    1d88:	da000404 	addi	r8,sp,16
    1d8c:	003db906 	br	1474 <__alt_mem_Flash_flash_data+0xf4001474>
    1d90:	b009883a 	mov	r4,r22
    1d94:	b80b883a 	mov	r5,r23
    1d98:	d9801e04 	addi	r6,sp,120
    1d9c:	00074b80 	call	74b8 <__sprint_r>
    1da0:	103def26 	beq	r2,zero,1560 <__alt_mem_Flash_flash_data+0xf4001560>
    1da4:	003cc106 	br	10ac <__alt_mem_Flash_flash_data+0xf40010ac>
    1da8:	10803fcc 	andi	r2,r2,255
    1dac:	1000651e 	bne	r2,zero,1f44 <___vfprintf_internal_r+0x1268>
    1db0:	8880004c 	andi	r2,r17,1
    1db4:	10013226 	beq	r2,zero,2280 <___vfprintf_internal_r+0x15a4>
    1db8:	00800c04 	movi	r2,48
    1dbc:	d8c01dc4 	addi	r3,sp,119
    1dc0:	d8801dc5 	stb	r2,119(sp)
    1dc4:	dc803c17 	ldw	r18,240(sp)
    1dc8:	d8c03115 	stw	r3,196(sp)
    1dcc:	003d1106 	br	1214 <__alt_mem_Flash_flash_data+0xf4001214>
    1dd0:	b009883a 	mov	r4,r22
    1dd4:	b80b883a 	mov	r5,r23
    1dd8:	d9801e04 	addi	r6,sp,120
    1ddc:	00074b80 	call	74b8 <__sprint_r>
    1de0:	103cb21e 	bne	r2,zero,10ac <__alt_mem_Flash_flash_data+0xf40010ac>
    1de4:	d8c02017 	ldw	r3,128(sp)
    1de8:	da000404 	addi	r8,sp,16
    1dec:	003d9406 	br	1440 <__alt_mem_Flash_flash_data+0xf4001440>
    1df0:	b009883a 	mov	r4,r22
    1df4:	b80b883a 	mov	r5,r23
    1df8:	d9801e04 	addi	r6,sp,120
    1dfc:	00074b80 	call	74b8 <__sprint_r>
    1e00:	103caa1e 	bne	r2,zero,10ac <__alt_mem_Flash_flash_data+0xf40010ac>
    1e04:	d8c02017 	ldw	r3,128(sp)
    1e08:	da000404 	addi	r8,sp,16
    1e0c:	003d5206 	br	1358 <__alt_mem_Flash_flash_data+0xf4001358>
    1e10:	b009883a 	mov	r4,r22
    1e14:	b80b883a 	mov	r5,r23
    1e18:	d9801e04 	addi	r6,sp,120
    1e1c:	00074b80 	call	74b8 <__sprint_r>
    1e20:	103ca21e 	bne	r2,zero,10ac <__alt_mem_Flash_flash_data+0xf40010ac>
    1e24:	d8c02017 	ldw	r3,128(sp)
    1e28:	da000404 	addi	r8,sp,16
    1e2c:	003d5806 	br	1390 <__alt_mem_Flash_flash_data+0xf4001390>
    1e30:	d9403b17 	ldw	r5,236(sp)
    1e34:	d8c01e04 	addi	r3,sp,120
    1e38:	988003cc 	andi	r2,r19,15
    1e3c:	e008973a 	slli	r4,fp,28
    1e40:	2885883a 	add	r2,r5,r2
    1e44:	9826d13a 	srli	r19,r19,4
    1e48:	10800003 	ldbu	r2,0(r2)
    1e4c:	e038d13a 	srli	fp,fp,4
    1e50:	18ffffc4 	addi	r3,r3,-1
    1e54:	24e6b03a 	or	r19,r4,r19
    1e58:	18800005 	stb	r2,0(r3)
    1e5c:	9f04b03a 	or	r2,r19,fp
    1e60:	103ff51e 	bne	r2,zero,1e38 <__alt_mem_Flash_flash_data+0xf4001e38>
    1e64:	db002817 	ldw	r12,160(sp)
    1e68:	d8c03115 	stw	r3,196(sp)
    1e6c:	60e5c83a 	sub	r18,r12,r3
    1e70:	003ce806 	br	1214 <__alt_mem_Flash_flash_data+0xf4001214>
    1e74:	dc002617 	ldw	r16,152(sp)
    1e78:	0401b10e 	bge	zero,r16,2540 <___vfprintf_internal_r+0x1864>
    1e7c:	db003117 	ldw	r12,196(sp)
    1e80:	dac03317 	ldw	r11,204(sp)
    1e84:	62e1883a 	add	r16,r12,r11
    1e88:	db003417 	ldw	r12,208(sp)
    1e8c:	5825883a 	mov	r18,r11
    1e90:	62c0010e 	bge	r12,r11,1e98 <___vfprintf_internal_r+0x11bc>
    1e94:	6025883a 	mov	r18,r12
    1e98:	04800b0e 	bge	zero,r18,1ec8 <___vfprintf_internal_r+0x11ec>
    1e9c:	d8801f17 	ldw	r2,124(sp)
    1ea0:	dac03117 	ldw	r11,196(sp)
    1ea4:	1c87883a 	add	r3,r3,r18
    1ea8:	10800044 	addi	r2,r2,1
    1eac:	42c00015 	stw	r11,0(r8)
    1eb0:	44800115 	stw	r18,4(r8)
    1eb4:	d8c02015 	stw	r3,128(sp)
    1eb8:	d8801f15 	stw	r2,124(sp)
    1ebc:	010001c4 	movi	r4,7
    1ec0:	20824f16 	blt	r4,r2,2800 <___vfprintf_internal_r+0x1b24>
    1ec4:	42000204 	addi	r8,r8,8
    1ec8:	90024b16 	blt	r18,zero,27f8 <___vfprintf_internal_r+0x1b1c>
    1ecc:	db003417 	ldw	r12,208(sp)
    1ed0:	64a5c83a 	sub	r18,r12,r18
    1ed4:	0480730e 	bge	zero,r18,20a4 <___vfprintf_internal_r+0x13c8>
    1ed8:	05400404 	movi	r21,16
    1edc:	d8801f17 	ldw	r2,124(sp)
    1ee0:	ac817d0e 	bge	r21,r18,24d8 <___vfprintf_internal_r+0x17fc>
    1ee4:	014000b4 	movhi	r5,2
    1ee8:	29659f84 	addi	r5,r5,-27010
    1eec:	d9402c15 	stw	r5,176(sp)
    1ef0:	070001c4 	movi	fp,7
    1ef4:	00000306 	br	1f04 <___vfprintf_internal_r+0x1228>
    1ef8:	42000204 	addi	r8,r8,8
    1efc:	94bffc04 	addi	r18,r18,-16
    1f00:	ac81780e 	bge	r21,r18,24e4 <___vfprintf_internal_r+0x1808>
    1f04:	18c00404 	addi	r3,r3,16
    1f08:	10800044 	addi	r2,r2,1
    1f0c:	45000015 	stw	r20,0(r8)
    1f10:	45400115 	stw	r21,4(r8)
    1f14:	d8c02015 	stw	r3,128(sp)
    1f18:	d8801f15 	stw	r2,124(sp)
    1f1c:	e0bff60e 	bge	fp,r2,1ef8 <__alt_mem_Flash_flash_data+0xf4001ef8>
    1f20:	b009883a 	mov	r4,r22
    1f24:	b80b883a 	mov	r5,r23
    1f28:	d9801e04 	addi	r6,sp,120
    1f2c:	00074b80 	call	74b8 <__sprint_r>
    1f30:	103c5e1e 	bne	r2,zero,10ac <__alt_mem_Flash_flash_data+0xf40010ac>
    1f34:	d8c02017 	ldw	r3,128(sp)
    1f38:	d8801f17 	ldw	r2,124(sp)
    1f3c:	da000404 	addi	r8,sp,16
    1f40:	003fee06 	br	1efc <__alt_mem_Flash_flash_data+0xf4001efc>
    1f44:	dac01e04 	addi	r11,sp,120
    1f48:	0025883a 	mov	r18,zero
    1f4c:	dac03115 	stw	r11,196(sp)
    1f50:	003cb006 	br	1214 <__alt_mem_Flash_flash_data+0xf4001214>
    1f54:	b009883a 	mov	r4,r22
    1f58:	b80b883a 	mov	r5,r23
    1f5c:	d9801e04 	addi	r6,sp,120
    1f60:	00074b80 	call	74b8 <__sprint_r>
    1f64:	103c511e 	bne	r2,zero,10ac <__alt_mem_Flash_flash_data+0xf40010ac>
    1f68:	d8c02017 	ldw	r3,128(sp)
    1f6c:	d8802787 	ldb	r2,158(sp)
    1f70:	da000404 	addi	r8,sp,16
    1f74:	003ceb06 	br	1324 <__alt_mem_Flash_flash_data+0xf4001324>
    1f78:	1cc00017 	ldw	r19,0(r3)
    1f7c:	dac02d17 	ldw	r11,180(sp)
    1f80:	9839d7fa 	srai	fp,r19,31
    1f84:	5ac00104 	addi	r11,r11,4
    1f88:	dac02d15 	stw	r11,180(sp)
    1f8c:	e005883a 	mov	r2,fp
    1f90:	003c8106 	br	1198 <__alt_mem_Flash_flash_data+0xf4001198>
    1f94:	657fffc4 	addi	r21,r12,-1
    1f98:	057f5d0e 	bge	zero,r21,1d10 <__alt_mem_Flash_flash_data+0xf4001d10>
    1f9c:	07000404 	movi	fp,16
    1fa0:	e540900e 	bge	fp,r21,21e4 <___vfprintf_internal_r+0x1508>
    1fa4:	010000b4 	movhi	r4,2
    1fa8:	21259f84 	addi	r4,r4,-27010
    1fac:	d9002c15 	stw	r4,176(sp)
    1fb0:	01c001c4 	movi	r7,7
    1fb4:	00000306 	br	1fc4 <___vfprintf_internal_r+0x12e8>
    1fb8:	94800204 	addi	r18,r18,8
    1fbc:	ad7ffc04 	addi	r21,r21,-16
    1fc0:	e5408b0e 	bge	fp,r21,21f0 <___vfprintf_internal_r+0x1514>
    1fc4:	18c00404 	addi	r3,r3,16
    1fc8:	84000044 	addi	r16,r16,1
    1fcc:	95000015 	stw	r20,0(r18)
    1fd0:	97000115 	stw	fp,4(r18)
    1fd4:	d8c02015 	stw	r3,128(sp)
    1fd8:	dc001f15 	stw	r16,124(sp)
    1fdc:	3c3ff60e 	bge	r7,r16,1fb8 <__alt_mem_Flash_flash_data+0xf4001fb8>
    1fe0:	b009883a 	mov	r4,r22
    1fe4:	b80b883a 	mov	r5,r23
    1fe8:	d9801e04 	addi	r6,sp,120
    1fec:	d9c03d15 	stw	r7,244(sp)
    1ff0:	00074b80 	call	74b8 <__sprint_r>
    1ff4:	d9c03d17 	ldw	r7,244(sp)
    1ff8:	103c2c1e 	bne	r2,zero,10ac <__alt_mem_Flash_flash_data+0xf40010ac>
    1ffc:	d8c02017 	ldw	r3,128(sp)
    2000:	dc001f17 	ldw	r16,124(sp)
    2004:	dc800404 	addi	r18,sp,16
    2008:	003fec06 	br	1fbc <__alt_mem_Flash_flash_data+0xf4001fbc>
    200c:	dac02d17 	ldw	r11,180(sp)
    2010:	0039883a 	mov	fp,zero
    2014:	0005883a 	mov	r2,zero
    2018:	5cc00017 	ldw	r19,0(r11)
    201c:	5ac00104 	addi	r11,r11,4
    2020:	dac02d15 	stw	r11,180(sp)
    2024:	9807883a 	mov	r3,r19
    2028:	003d5b06 	br	1598 <__alt_mem_Flash_flash_data+0xf4001598>
    202c:	db002d17 	ldw	r12,180(sp)
    2030:	0039883a 	mov	fp,zero
    2034:	00800044 	movi	r2,1
    2038:	64c00017 	ldw	r19,0(r12)
    203c:	63000104 	addi	r12,r12,4
    2040:	db002d15 	stw	r12,180(sp)
    2044:	9807883a 	mov	r3,r19
    2048:	003d5306 	br	1598 <__alt_mem_Flash_flash_data+0xf4001598>
    204c:	00800084 	movi	r2,2
    2050:	9f06b03a 	or	r3,r19,fp
    2054:	003d5006 	br	1598 <__alt_mem_Flash_flash_data+0xf4001598>
    2058:	10803fcc 	andi	r2,r2,255
    205c:	1080201c 	xori	r2,r2,128
    2060:	10bfe004 	addi	r2,r2,-128
    2064:	01000c04 	movi	r4,48
    2068:	1101a526 	beq	r2,r4,2700 <___vfprintf_internal_r+0x1a24>
    206c:	dac03117 	ldw	r11,196(sp)
    2070:	db002817 	ldw	r12,160(sp)
    2074:	193fffc5 	stb	r4,-1(r3)
    2078:	5affffc4 	addi	r11,r11,-1
    207c:	dac03115 	stw	r11,196(sp)
    2080:	62e5c83a 	sub	r18,r12,r11
    2084:	003c6306 	br	1214 <__alt_mem_Flash_flash_data+0xf4001214>
    2088:	b009883a 	mov	r4,r22
    208c:	b80b883a 	mov	r5,r23
    2090:	d9801e04 	addi	r6,sp,120
    2094:	00074b80 	call	74b8 <__sprint_r>
    2098:	103c041e 	bne	r2,zero,10ac <__alt_mem_Flash_flash_data+0xf40010ac>
    209c:	d8c02017 	ldw	r3,128(sp)
    20a0:	da000404 	addi	r8,sp,16
    20a4:	db003117 	ldw	r12,196(sp)
    20a8:	dac03417 	ldw	r11,208(sp)
    20ac:	d8802617 	ldw	r2,152(sp)
    20b0:	62e5883a 	add	r18,r12,r11
    20b4:	db003317 	ldw	r12,204(sp)
    20b8:	13000216 	blt	r2,r12,20c4 <___vfprintf_internal_r+0x13e8>
    20bc:	8900004c 	andi	r4,r17,1
    20c0:	20000c26 	beq	r4,zero,20f4 <___vfprintf_internal_r+0x1418>
    20c4:	dac03817 	ldw	r11,224(sp)
    20c8:	d9001f17 	ldw	r4,124(sp)
    20cc:	db003517 	ldw	r12,212(sp)
    20d0:	1ac7883a 	add	r3,r3,r11
    20d4:	21000044 	addi	r4,r4,1
    20d8:	43000015 	stw	r12,0(r8)
    20dc:	42c00115 	stw	r11,4(r8)
    20e0:	d8c02015 	stw	r3,128(sp)
    20e4:	d9001f15 	stw	r4,124(sp)
    20e8:	014001c4 	movi	r5,7
    20ec:	2901cc16 	blt	r5,r4,2820 <___vfprintf_internal_r+0x1b44>
    20f0:	42000204 	addi	r8,r8,8
    20f4:	dac03317 	ldw	r11,204(sp)
    20f8:	8489c83a 	sub	r4,r16,r18
    20fc:	5885c83a 	sub	r2,r11,r2
    2100:	1021883a 	mov	r16,r2
    2104:	2080010e 	bge	r4,r2,210c <___vfprintf_internal_r+0x1430>
    2108:	2021883a 	mov	r16,r4
    210c:	04000a0e 	bge	zero,r16,2138 <___vfprintf_internal_r+0x145c>
    2110:	d9001f17 	ldw	r4,124(sp)
    2114:	1c07883a 	add	r3,r3,r16
    2118:	44800015 	stw	r18,0(r8)
    211c:	21000044 	addi	r4,r4,1
    2120:	44000115 	stw	r16,4(r8)
    2124:	d8c02015 	stw	r3,128(sp)
    2128:	d9001f15 	stw	r4,124(sp)
    212c:	014001c4 	movi	r5,7
    2130:	2901e316 	blt	r5,r4,28c0 <___vfprintf_internal_r+0x1be4>
    2134:	42000204 	addi	r8,r8,8
    2138:	8001df16 	blt	r16,zero,28b8 <___vfprintf_internal_r+0x1bdc>
    213c:	1421c83a 	sub	r16,r2,r16
    2140:	043ccc0e 	bge	zero,r16,1474 <__alt_mem_Flash_flash_data+0xf4001474>
    2144:	04800404 	movi	r18,16
    2148:	d8801f17 	ldw	r2,124(sp)
    214c:	943efc0e 	bge	r18,r16,1d40 <__alt_mem_Flash_flash_data+0xf4001d40>
    2150:	014000b4 	movhi	r5,2
    2154:	29659f84 	addi	r5,r5,-27010
    2158:	d9402c15 	stw	r5,176(sp)
    215c:	054001c4 	movi	r21,7
    2160:	00000306 	br	2170 <___vfprintf_internal_r+0x1494>
    2164:	42000204 	addi	r8,r8,8
    2168:	843ffc04 	addi	r16,r16,-16
    216c:	943ef70e 	bge	r18,r16,1d4c <__alt_mem_Flash_flash_data+0xf4001d4c>
    2170:	18c00404 	addi	r3,r3,16
    2174:	10800044 	addi	r2,r2,1
    2178:	45000015 	stw	r20,0(r8)
    217c:	44800115 	stw	r18,4(r8)
    2180:	d8c02015 	stw	r3,128(sp)
    2184:	d8801f15 	stw	r2,124(sp)
    2188:	a8bff60e 	bge	r21,r2,2164 <__alt_mem_Flash_flash_data+0xf4002164>
    218c:	b009883a 	mov	r4,r22
    2190:	b80b883a 	mov	r5,r23
    2194:	d9801e04 	addi	r6,sp,120
    2198:	00074b80 	call	74b8 <__sprint_r>
    219c:	103bc31e 	bne	r2,zero,10ac <__alt_mem_Flash_flash_data+0xf40010ac>
    21a0:	d8c02017 	ldw	r3,128(sp)
    21a4:	d8801f17 	ldw	r2,124(sp)
    21a8:	da000404 	addi	r8,sp,16
    21ac:	003fee06 	br	2168 <__alt_mem_Flash_flash_data+0xf4002168>
    21b0:	8888703a 	and	r4,r17,r2
    21b4:	203eab1e 	bne	r4,zero,1c64 <__alt_mem_Flash_flash_data+0xf4001c64>
    21b8:	dc001f17 	ldw	r16,124(sp)
    21bc:	db003117 	ldw	r12,196(sp)
    21c0:	40800115 	stw	r2,4(r8)
    21c4:	84000044 	addi	r16,r16,1
    21c8:	43000015 	stw	r12,0(r8)
    21cc:	d8c02015 	stw	r3,128(sp)
    21d0:	dc001f15 	stw	r16,124(sp)
    21d4:	008001c4 	movi	r2,7
    21d8:	14000e16 	blt	r2,r16,2214 <___vfprintf_internal_r+0x1538>
    21dc:	44800204 	addi	r18,r8,8
    21e0:	003ecb06 	br	1d10 <__alt_mem_Flash_flash_data+0xf4001d10>
    21e4:	008000b4 	movhi	r2,2
    21e8:	10a59f84 	addi	r2,r2,-27010
    21ec:	d8802c15 	stw	r2,176(sp)
    21f0:	dac02c17 	ldw	r11,176(sp)
    21f4:	1d47883a 	add	r3,r3,r21
    21f8:	84000044 	addi	r16,r16,1
    21fc:	92c00015 	stw	r11,0(r18)
    2200:	95400115 	stw	r21,4(r18)
    2204:	d8c02015 	stw	r3,128(sp)
    2208:	dc001f15 	stw	r16,124(sp)
    220c:	008001c4 	movi	r2,7
    2210:	143ebe0e 	bge	r2,r16,1d0c <__alt_mem_Flash_flash_data+0xf4001d0c>
    2214:	b009883a 	mov	r4,r22
    2218:	b80b883a 	mov	r5,r23
    221c:	d9801e04 	addi	r6,sp,120
    2220:	00074b80 	call	74b8 <__sprint_r>
    2224:	103ba11e 	bne	r2,zero,10ac <__alt_mem_Flash_flash_data+0xf40010ac>
    2228:	d8c02017 	ldw	r3,128(sp)
    222c:	dc001f17 	ldw	r16,124(sp)
    2230:	dc800404 	addi	r18,sp,16
    2234:	003eb606 	br	1d10 <__alt_mem_Flash_flash_data+0xf4001d10>
    2238:	b009883a 	mov	r4,r22
    223c:	b80b883a 	mov	r5,r23
    2240:	d9801e04 	addi	r6,sp,120
    2244:	00074b80 	call	74b8 <__sprint_r>
    2248:	103b981e 	bne	r2,zero,10ac <__alt_mem_Flash_flash_data+0xf40010ac>
    224c:	d8c02017 	ldw	r3,128(sp)
    2250:	dc001f17 	ldw	r16,124(sp)
    2254:	da000404 	addi	r8,sp,16
    2258:	003e8d06 	br	1c90 <__alt_mem_Flash_flash_data+0xf4001c90>
    225c:	b009883a 	mov	r4,r22
    2260:	b80b883a 	mov	r5,r23
    2264:	d9801e04 	addi	r6,sp,120
    2268:	00074b80 	call	74b8 <__sprint_r>
    226c:	103b8f1e 	bne	r2,zero,10ac <__alt_mem_Flash_flash_data+0xf40010ac>
    2270:	d8c02017 	ldw	r3,128(sp)
    2274:	dc001f17 	ldw	r16,124(sp)
    2278:	dc800404 	addi	r18,sp,16
    227c:	003e8f06 	br	1cbc <__alt_mem_Flash_flash_data+0xf4001cbc>
    2280:	db001e04 	addi	r12,sp,120
    2284:	0025883a 	mov	r18,zero
    2288:	db003115 	stw	r12,196(sp)
    228c:	003be106 	br	1214 <__alt_mem_Flash_flash_data+0xf4001214>
    2290:	b009883a 	mov	r4,r22
    2294:	b80b883a 	mov	r5,r23
    2298:	d9801e04 	addi	r6,sp,120
    229c:	00074b80 	call	74b8 <__sprint_r>
    22a0:	103b821e 	bne	r2,zero,10ac <__alt_mem_Flash_flash_data+0xf40010ac>
    22a4:	d8c02017 	ldw	r3,128(sp)
    22a8:	da000404 	addi	r8,sp,16
    22ac:	003c3b06 	br	139c <__alt_mem_Flash_flash_data+0xf400139c>
    22b0:	04e7c83a 	sub	r19,zero,r19
    22b4:	9804c03a 	cmpne	r2,r19,zero
    22b8:	0739c83a 	sub	fp,zero,fp
    22bc:	e0b9c83a 	sub	fp,fp,r2
    22c0:	05400b44 	movi	r21,45
    22c4:	dd402785 	stb	r21,158(sp)
    22c8:	da403215 	stw	r9,200(sp)
    22cc:	00800044 	movi	r2,1
    22d0:	9f06b03a 	or	r3,r19,fp
    22d4:	003bb506 	br	11ac <__alt_mem_Flash_flash_data+0xf40011ac>
    22d8:	da003f15 	stw	r8,252(sp)
    22dc:	da403e15 	stw	r9,248(sp)
    22e0:	000707c0 	call	707c <__fpclassifyd>
    22e4:	da003f17 	ldw	r8,252(sp)
    22e8:	da403e17 	ldw	r9,248(sp)
    22ec:	1000ce26 	beq	r2,zero,2628 <___vfprintf_internal_r+0x194c>
    22f0:	057ff7c4 	movi	r21,-33
    22f4:	00bfffc4 	movi	r2,-1
    22f8:	856a703a 	and	r21,r16,r21
    22fc:	4881e826 	beq	r9,r2,2aa0 <___vfprintf_internal_r+0x1dc4>
    2300:	008011c4 	movi	r2,71
    2304:	a881e326 	beq	r21,r2,2a94 <___vfprintf_internal_r+0x1db8>
    2308:	db003917 	ldw	r12,228(sp)
    230c:	8ac04014 	ori	r11,r17,256
    2310:	dac02d15 	stw	r11,180(sp)
    2314:	6001ed16 	blt	r12,zero,2acc <___vfprintf_internal_r+0x1df0>
    2318:	dc803917 	ldw	r18,228(sp)
    231c:	d8002b05 	stb	zero,172(sp)
    2320:	00801984 	movi	r2,102
    2324:	80811826 	beq	r16,r2,2788 <___vfprintf_internal_r+0x1aac>
    2328:	00801184 	movi	r2,70
    232c:	80811626 	beq	r16,r2,2788 <___vfprintf_internal_r+0x1aac>
    2330:	00801144 	movi	r2,69
    2334:	a881e926 	beq	r21,r2,2adc <___vfprintf_internal_r+0x1e00>
    2338:	4839883a 	mov	fp,r9
    233c:	d8802604 	addi	r2,sp,152
    2340:	d8800115 	stw	r2,4(sp)
    2344:	d9403717 	ldw	r5,220(sp)
    2348:	d8802504 	addi	r2,sp,148
    234c:	d8800215 	stw	r2,8(sp)
    2350:	d8802104 	addi	r2,sp,132
    2354:	df000015 	stw	fp,0(sp)
    2358:	d8800315 	stw	r2,12(sp)
    235c:	b009883a 	mov	r4,r22
    2360:	900d883a 	mov	r6,r18
    2364:	01c00084 	movi	r7,2
    2368:	da003f15 	stw	r8,252(sp)
    236c:	da403e15 	stw	r9,248(sp)
    2370:	00030600 	call	3060 <_dtoa_r>
    2374:	d8803115 	stw	r2,196(sp)
    2378:	008019c4 	movi	r2,103
    237c:	da003f17 	ldw	r8,252(sp)
    2380:	da403e17 	ldw	r9,248(sp)
    2384:	80800226 	beq	r16,r2,2390 <___vfprintf_internal_r+0x16b4>
    2388:	008011c4 	movi	r2,71
    238c:	8081101e 	bne	r16,r2,27d0 <___vfprintf_internal_r+0x1af4>
    2390:	8880004c 	andi	r2,r17,1
    2394:	1001dd26 	beq	r2,zero,2b0c <___vfprintf_internal_r+0x1e30>
    2398:	db003117 	ldw	r12,196(sp)
    239c:	6715883a 	add	r10,r12,fp
    23a0:	d9003717 	ldw	r4,220(sp)
    23a4:	900b883a 	mov	r5,r18
    23a8:	000d883a 	mov	r6,zero
    23ac:	000f883a 	mov	r7,zero
    23b0:	da003f15 	stw	r8,252(sp)
    23b4:	da403e15 	stw	r9,248(sp)
    23b8:	da803d15 	stw	r10,244(sp)
    23bc:	000bae00 	call	bae0 <__eqdf2>
    23c0:	da003f17 	ldw	r8,252(sp)
    23c4:	da403e17 	ldw	r9,248(sp)
    23c8:	da803d17 	ldw	r10,244(sp)
    23cc:	10016526 	beq	r2,zero,2964 <___vfprintf_internal_r+0x1c88>
    23d0:	d8802117 	ldw	r2,132(sp)
    23d4:	1280062e 	bgeu	r2,r10,23f0 <___vfprintf_internal_r+0x1714>
    23d8:	01000c04 	movi	r4,48
    23dc:	10c00044 	addi	r3,r2,1
    23e0:	d8c02115 	stw	r3,132(sp)
    23e4:	11000005 	stb	r4,0(r2)
    23e8:	d8802117 	ldw	r2,132(sp)
    23ec:	12bffb36 	bltu	r2,r10,23dc <__alt_mem_Flash_flash_data+0xf40023dc>
    23f0:	db003117 	ldw	r12,196(sp)
    23f4:	1305c83a 	sub	r2,r2,r12
    23f8:	d8803315 	stw	r2,204(sp)
    23fc:	008011c4 	movi	r2,71
    2400:	a8814d26 	beq	r21,r2,2938 <___vfprintf_internal_r+0x1c5c>
    2404:	00801944 	movi	r2,101
    2408:	1402060e 	bge	r2,r16,2c24 <___vfprintf_internal_r+0x1f48>
    240c:	00801984 	movi	r2,102
    2410:	8081b426 	beq	r16,r2,2ae4 <___vfprintf_internal_r+0x1e08>
    2414:	db002617 	ldw	r12,152(sp)
    2418:	db003415 	stw	r12,208(sp)
    241c:	db003417 	ldw	r12,208(sp)
    2420:	dac03317 	ldw	r11,204(sp)
    2424:	62c1a016 	blt	r12,r11,2aa8 <___vfprintf_internal_r+0x1dcc>
    2428:	8c40004c 	andi	r17,r17,1
    242c:	8801bf1e 	bne	r17,zero,2b2c <___vfprintf_internal_r+0x1e50>
    2430:	6005883a 	mov	r2,r12
    2434:	6001b316 	blt	r12,zero,2b04 <___vfprintf_internal_r+0x1e28>
    2438:	dc803417 	ldw	r18,208(sp)
    243c:	df002b07 	ldb	fp,172(sp)
    2440:	e0012e1e 	bne	fp,zero,28fc <___vfprintf_internal_r+0x1c20>
    2444:	dc402d17 	ldw	r17,180(sp)
    2448:	dd402783 	ldbu	r21,158(sp)
    244c:	d8802b15 	stw	r2,172(sp)
    2450:	dcc02d15 	stw	r19,180(sp)
    2454:	d8003215 	stw	zero,200(sp)
    2458:	003b7306 	br	1228 <__alt_mem_Flash_flash_data+0xf4001228>
    245c:	00800084 	movi	r2,2
    2460:	003c4d06 	br	1598 <__alt_mem_Flash_flash_data+0xf4001598>
    2464:	8880040c 	andi	r2,r17,16
    2468:	1000091e 	bne	r2,zero,2490 <___vfprintf_internal_r+0x17b4>
    246c:	8c40100c 	andi	r17,r17,64
    2470:	88000726 	beq	r17,zero,2490 <___vfprintf_internal_r+0x17b4>
    2474:	db002d17 	ldw	r12,180(sp)
    2478:	dac02f17 	ldw	r11,188(sp)
    247c:	60800017 	ldw	r2,0(r12)
    2480:	63000104 	addi	r12,r12,4
    2484:	db002d15 	stw	r12,180(sp)
    2488:	12c0000d 	sth	r11,0(r2)
    248c:	003a4e06 	br	dc8 <__alt_mem_Flash_flash_data+0xf4000dc8>
    2490:	db002d17 	ldw	r12,180(sp)
    2494:	dac02f17 	ldw	r11,188(sp)
    2498:	60800017 	ldw	r2,0(r12)
    249c:	63000104 	addi	r12,r12,4
    24a0:	db002d15 	stw	r12,180(sp)
    24a4:	12c00015 	stw	r11,0(r2)
    24a8:	003a4706 	br	dc8 <__alt_mem_Flash_flash_data+0xf4000dc8>
    24ac:	1c000007 	ldb	r16,0(r3)
    24b0:	1805883a 	mov	r2,r3
    24b4:	003a6e06 	br	e70 <__alt_mem_Flash_flash_data+0xf4000e70>
    24b8:	88c0100c 	andi	r3,r17,64
    24bc:	18006b26 	beq	r3,zero,266c <___vfprintf_internal_r+0x1990>
    24c0:	dac02d17 	ldw	r11,180(sp)
    24c4:	14c0000b 	ldhu	r19,0(r2)
    24c8:	0039883a 	mov	fp,zero
    24cc:	5ac00104 	addi	r11,r11,4
    24d0:	dac02d15 	stw	r11,180(sp)
    24d4:	003cb206 	br	17a0 <__alt_mem_Flash_flash_data+0xf40017a0>
    24d8:	010000b4 	movhi	r4,2
    24dc:	21259f84 	addi	r4,r4,-27010
    24e0:	d9002c15 	stw	r4,176(sp)
    24e4:	dac02c17 	ldw	r11,176(sp)
    24e8:	1c87883a 	add	r3,r3,r18
    24ec:	10800044 	addi	r2,r2,1
    24f0:	42c00015 	stw	r11,0(r8)
    24f4:	44800115 	stw	r18,4(r8)
    24f8:	d8c02015 	stw	r3,128(sp)
    24fc:	d8801f15 	stw	r2,124(sp)
    2500:	010001c4 	movi	r4,7
    2504:	20bee016 	blt	r4,r2,2088 <__alt_mem_Flash_flash_data+0xf4002088>
    2508:	42000204 	addi	r8,r8,8
    250c:	003ee506 	br	20a4 <__alt_mem_Flash_flash_data+0xf40020a4>
    2510:	010000b4 	movhi	r4,2
    2514:	21259f84 	addi	r4,r4,-27010
    2518:	d9002c15 	stw	r4,176(sp)
    251c:	003bbe06 	br	1418 <__alt_mem_Flash_flash_data+0xf4001418>
    2520:	b009883a 	mov	r4,r22
    2524:	b80b883a 	mov	r5,r23
    2528:	d9801e04 	addi	r6,sp,120
    252c:	00074b80 	call	74b8 <__sprint_r>
    2530:	103ade1e 	bne	r2,zero,10ac <__alt_mem_Flash_flash_data+0xf40010ac>
    2534:	d8c02017 	ldw	r3,128(sp)
    2538:	da000404 	addi	r8,sp,16
    253c:	003d6b06 	br	1aec <__alt_mem_Flash_flash_data+0xf4001aec>
    2540:	d8801f17 	ldw	r2,124(sp)
    2544:	030000b4 	movhi	r12,2
    2548:	01000044 	movi	r4,1
    254c:	18c00044 	addi	r3,r3,1
    2550:	10800044 	addi	r2,r2,1
    2554:	63259f04 	addi	r12,r12,-27012
    2558:	41000115 	stw	r4,4(r8)
    255c:	43000015 	stw	r12,0(r8)
    2560:	d8c02015 	stw	r3,128(sp)
    2564:	d8801f15 	stw	r2,124(sp)
    2568:	010001c4 	movi	r4,7
    256c:	20804916 	blt	r4,r2,2694 <___vfprintf_internal_r+0x19b8>
    2570:	42000204 	addi	r8,r8,8
    2574:	8000041e 	bne	r16,zero,2588 <___vfprintf_internal_r+0x18ac>
    2578:	dac03317 	ldw	r11,204(sp)
    257c:	5800021e 	bne	r11,zero,2588 <___vfprintf_internal_r+0x18ac>
    2580:	8880004c 	andi	r2,r17,1
    2584:	103bbb26 	beq	r2,zero,1474 <__alt_mem_Flash_flash_data+0xf4001474>
    2588:	db003817 	ldw	r12,224(sp)
    258c:	d8801f17 	ldw	r2,124(sp)
    2590:	dac03517 	ldw	r11,212(sp)
    2594:	1b07883a 	add	r3,r3,r12
    2598:	10800044 	addi	r2,r2,1
    259c:	42c00015 	stw	r11,0(r8)
    25a0:	43000115 	stw	r12,4(r8)
    25a4:	d8c02015 	stw	r3,128(sp)
    25a8:	d8801f15 	stw	r2,124(sp)
    25ac:	010001c4 	movi	r4,7
    25b0:	20812e16 	blt	r4,r2,2a6c <___vfprintf_internal_r+0x1d90>
    25b4:	42000204 	addi	r8,r8,8
    25b8:	0421c83a 	sub	r16,zero,r16
    25bc:	04005c0e 	bge	zero,r16,2730 <___vfprintf_internal_r+0x1a54>
    25c0:	04800404 	movi	r18,16
    25c4:	94009f0e 	bge	r18,r16,2844 <___vfprintf_internal_r+0x1b68>
    25c8:	010000b4 	movhi	r4,2
    25cc:	21259f84 	addi	r4,r4,-27010
    25d0:	d9002c15 	stw	r4,176(sp)
    25d4:	054001c4 	movi	r21,7
    25d8:	00000306 	br	25e8 <___vfprintf_internal_r+0x190c>
    25dc:	42000204 	addi	r8,r8,8
    25e0:	843ffc04 	addi	r16,r16,-16
    25e4:	94009a0e 	bge	r18,r16,2850 <___vfprintf_internal_r+0x1b74>
    25e8:	18c00404 	addi	r3,r3,16
    25ec:	10800044 	addi	r2,r2,1
    25f0:	45000015 	stw	r20,0(r8)
    25f4:	44800115 	stw	r18,4(r8)
    25f8:	d8c02015 	stw	r3,128(sp)
    25fc:	d8801f15 	stw	r2,124(sp)
    2600:	a8bff60e 	bge	r21,r2,25dc <__alt_mem_Flash_flash_data+0xf40025dc>
    2604:	b009883a 	mov	r4,r22
    2608:	b80b883a 	mov	r5,r23
    260c:	d9801e04 	addi	r6,sp,120
    2610:	00074b80 	call	74b8 <__sprint_r>
    2614:	103aa51e 	bne	r2,zero,10ac <__alt_mem_Flash_flash_data+0xf40010ac>
    2618:	d8c02017 	ldw	r3,128(sp)
    261c:	d8801f17 	ldw	r2,124(sp)
    2620:	da000404 	addi	r8,sp,16
    2624:	003fee06 	br	25e0 <__alt_mem_Flash_flash_data+0xf40025e0>
    2628:	008011c4 	movi	r2,71
    262c:	1400be16 	blt	r2,r16,2928 <___vfprintf_internal_r+0x1c4c>
    2630:	030000b4 	movhi	r12,2
    2634:	63259104 	addi	r12,r12,-27068
    2638:	db003115 	stw	r12,196(sp)
    263c:	00c000c4 	movi	r3,3
    2640:	00bfdfc4 	movi	r2,-129
    2644:	d8c02b15 	stw	r3,172(sp)
    2648:	88a2703a 	and	r17,r17,r2
    264c:	dd402783 	ldbu	r21,158(sp)
    2650:	dcc02d15 	stw	r19,180(sp)
    2654:	1825883a 	mov	r18,r3
    2658:	d8003215 	stw	zero,200(sp)
    265c:	d8003415 	stw	zero,208(sp)
    2660:	003af106 	br	1228 <__alt_mem_Flash_flash_data+0xf4001228>
    2664:	4825883a 	mov	r18,r9
    2668:	003c9306 	br	18b8 <__alt_mem_Flash_flash_data+0xf40018b8>
    266c:	db002d17 	ldw	r12,180(sp)
    2670:	14c00017 	ldw	r19,0(r2)
    2674:	0039883a 	mov	fp,zero
    2678:	63000104 	addi	r12,r12,4
    267c:	db002d15 	stw	r12,180(sp)
    2680:	003c4706 	br	17a0 <__alt_mem_Flash_flash_data+0xf40017a0>
    2684:	008000b4 	movhi	r2,2
    2688:	10a58f04 	addi	r2,r2,-27076
    268c:	d8803115 	stw	r2,196(sp)
    2690:	003bf106 	br	1658 <__alt_mem_Flash_flash_data+0xf4001658>
    2694:	b009883a 	mov	r4,r22
    2698:	b80b883a 	mov	r5,r23
    269c:	d9801e04 	addi	r6,sp,120
    26a0:	00074b80 	call	74b8 <__sprint_r>
    26a4:	103a811e 	bne	r2,zero,10ac <__alt_mem_Flash_flash_data+0xf40010ac>
    26a8:	dc002617 	ldw	r16,152(sp)
    26ac:	d8c02017 	ldw	r3,128(sp)
    26b0:	da000404 	addi	r8,sp,16
    26b4:	003faf06 	br	2574 <__alt_mem_Flash_flash_data+0xf4002574>
    26b8:	db002e17 	ldw	r12,184(sp)
    26bc:	1805883a 	mov	r2,r3
    26c0:	dac02d15 	stw	r11,180(sp)
    26c4:	0319c83a 	sub	r12,zero,r12
    26c8:	db002e15 	stw	r12,184(sp)
    26cc:	003a8206 	br	10d8 <__alt_mem_Flash_flash_data+0xf40010d8>
    26d0:	18800044 	addi	r2,r3,1
    26d4:	8c400814 	ori	r17,r17,32
    26d8:	1c000047 	ldb	r16,1(r3)
    26dc:	0039e406 	br	e70 <__alt_mem_Flash_flash_data+0xf4000e70>
    26e0:	b009883a 	mov	r4,r22
    26e4:	b80b883a 	mov	r5,r23
    26e8:	d9801e04 	addi	r6,sp,120
    26ec:	00074b80 	call	74b8 <__sprint_r>
    26f0:	103a6e1e 	bne	r2,zero,10ac <__alt_mem_Flash_flash_data+0xf40010ac>
    26f4:	d8c02017 	ldw	r3,128(sp)
    26f8:	da000404 	addi	r8,sp,16
    26fc:	003d0c06 	br	1b30 <__alt_mem_Flash_flash_data+0xf4001b30>
    2700:	db002817 	ldw	r12,160(sp)
    2704:	d8c03117 	ldw	r3,196(sp)
    2708:	60e5c83a 	sub	r18,r12,r3
    270c:	003ac106 	br	1214 <__alt_mem_Flash_flash_data+0xf4001214>
    2710:	b009883a 	mov	r4,r22
    2714:	b80b883a 	mov	r5,r23
    2718:	d9801e04 	addi	r6,sp,120
    271c:	00074b80 	call	74b8 <__sprint_r>
    2720:	103a621e 	bne	r2,zero,10ac <__alt_mem_Flash_flash_data+0xf40010ac>
    2724:	d8c02017 	ldw	r3,128(sp)
    2728:	d8801f17 	ldw	r2,124(sp)
    272c:	da000404 	addi	r8,sp,16
    2730:	db003317 	ldw	r12,204(sp)
    2734:	dac03117 	ldw	r11,196(sp)
    2738:	10800044 	addi	r2,r2,1
    273c:	1b07883a 	add	r3,r3,r12
    2740:	42c00015 	stw	r11,0(r8)
    2744:	43000115 	stw	r12,4(r8)
    2748:	d8c02015 	stw	r3,128(sp)
    274c:	d8801f15 	stw	r2,124(sp)
    2750:	010001c4 	movi	r4,7
    2754:	20bb460e 	bge	r4,r2,1470 <__alt_mem_Flash_flash_data+0xf4001470>
    2758:	003d8506 	br	1d70 <__alt_mem_Flash_flash_data+0xf4001d70>
    275c:	da003f15 	stw	r8,252(sp)
    2760:	00073240 	call	7324 <strlen>
    2764:	1025883a 	mov	r18,r2
    2768:	da003f17 	ldw	r8,252(sp)
    276c:	903c540e 	bge	r18,zero,18c0 <__alt_mem_Flash_flash_data+0xf40018c0>
    2770:	0005883a 	mov	r2,zero
    2774:	003c5206 	br	18c0 <__alt_mem_Flash_flash_data+0xf40018c0>
    2778:	010000b4 	movhi	r4,2
    277c:	2125a384 	addi	r4,r4,-26994
    2780:	d9003615 	stw	r4,216(sp)
    2784:	003adc06 	br	12f8 <__alt_mem_Flash_flash_data+0xf40012f8>
    2788:	d8802604 	addi	r2,sp,152
    278c:	d8800115 	stw	r2,4(sp)
    2790:	d9403717 	ldw	r5,220(sp)
    2794:	d8802504 	addi	r2,sp,148
    2798:	d8800215 	stw	r2,8(sp)
    279c:	d8802104 	addi	r2,sp,132
    27a0:	da400015 	stw	r9,0(sp)
    27a4:	d8800315 	stw	r2,12(sp)
    27a8:	b009883a 	mov	r4,r22
    27ac:	900d883a 	mov	r6,r18
    27b0:	01c000c4 	movi	r7,3
    27b4:	da003f15 	stw	r8,252(sp)
    27b8:	da403e15 	stw	r9,248(sp)
    27bc:	00030600 	call	3060 <_dtoa_r>
    27c0:	da403e17 	ldw	r9,248(sp)
    27c4:	da003f17 	ldw	r8,252(sp)
    27c8:	d8803115 	stw	r2,196(sp)
    27cc:	4839883a 	mov	fp,r9
    27d0:	dac03117 	ldw	r11,196(sp)
    27d4:	00801184 	movi	r2,70
    27d8:	5f15883a 	add	r10,r11,fp
    27dc:	a8bef01e 	bne	r21,r2,23a0 <__alt_mem_Flash_flash_data+0xf40023a0>
    27e0:	59000007 	ldb	r4,0(r11)
    27e4:	00800c04 	movi	r2,48
    27e8:	2080d526 	beq	r4,r2,2b40 <___vfprintf_internal_r+0x1e64>
    27ec:	d8c02617 	ldw	r3,152(sp)
    27f0:	50d5883a 	add	r10,r10,r3
    27f4:	003eea06 	br	23a0 <__alt_mem_Flash_flash_data+0xf40023a0>
    27f8:	0025883a 	mov	r18,zero
    27fc:	003db306 	br	1ecc <__alt_mem_Flash_flash_data+0xf4001ecc>
    2800:	b009883a 	mov	r4,r22
    2804:	b80b883a 	mov	r5,r23
    2808:	d9801e04 	addi	r6,sp,120
    280c:	00074b80 	call	74b8 <__sprint_r>
    2810:	103a261e 	bne	r2,zero,10ac <__alt_mem_Flash_flash_data+0xf40010ac>
    2814:	d8c02017 	ldw	r3,128(sp)
    2818:	da000404 	addi	r8,sp,16
    281c:	003daa06 	br	1ec8 <__alt_mem_Flash_flash_data+0xf4001ec8>
    2820:	b009883a 	mov	r4,r22
    2824:	b80b883a 	mov	r5,r23
    2828:	d9801e04 	addi	r6,sp,120
    282c:	00074b80 	call	74b8 <__sprint_r>
    2830:	103a1e1e 	bne	r2,zero,10ac <__alt_mem_Flash_flash_data+0xf40010ac>
    2834:	d8802617 	ldw	r2,152(sp)
    2838:	d8c02017 	ldw	r3,128(sp)
    283c:	da000404 	addi	r8,sp,16
    2840:	003e2c06 	br	20f4 <__alt_mem_Flash_flash_data+0xf40020f4>
    2844:	030000b4 	movhi	r12,2
    2848:	63259f84 	addi	r12,r12,-27010
    284c:	db002c15 	stw	r12,176(sp)
    2850:	dac02c17 	ldw	r11,176(sp)
    2854:	1c07883a 	add	r3,r3,r16
    2858:	10800044 	addi	r2,r2,1
    285c:	42c00015 	stw	r11,0(r8)
    2860:	44000115 	stw	r16,4(r8)
    2864:	d8c02015 	stw	r3,128(sp)
    2868:	d8801f15 	stw	r2,124(sp)
    286c:	010001c4 	movi	r4,7
    2870:	20bfa716 	blt	r4,r2,2710 <__alt_mem_Flash_flash_data+0xf4002710>
    2874:	42000204 	addi	r8,r8,8
    2878:	003fad06 	br	2730 <__alt_mem_Flash_flash_data+0xf4002730>
    287c:	00800184 	movi	r2,6
    2880:	1240012e 	bgeu	r2,r9,2888 <___vfprintf_internal_r+0x1bac>
    2884:	1013883a 	mov	r9,r2
    2888:	4825883a 	mov	r18,r9
    288c:	4805883a 	mov	r2,r9
    2890:	4800c216 	blt	r9,zero,2b9c <___vfprintf_internal_r+0x1ec0>
    2894:	d8802b15 	stw	r2,172(sp)
    2898:	008000b4 	movhi	r2,2
    289c:	10a59d04 	addi	r2,r2,-27020
    28a0:	d8803115 	stw	r2,196(sp)
    28a4:	dcc02d15 	stw	r19,180(sp)
    28a8:	d8003215 	stw	zero,200(sp)
    28ac:	d8003415 	stw	zero,208(sp)
    28b0:	0005883a 	mov	r2,zero
    28b4:	003a6306 	br	1244 <__alt_mem_Flash_flash_data+0xf4001244>
    28b8:	0021883a 	mov	r16,zero
    28bc:	003e1f06 	br	213c <__alt_mem_Flash_flash_data+0xf400213c>
    28c0:	b009883a 	mov	r4,r22
    28c4:	b80b883a 	mov	r5,r23
    28c8:	d9801e04 	addi	r6,sp,120
    28cc:	00074b80 	call	74b8 <__sprint_r>
    28d0:	1039f61e 	bne	r2,zero,10ac <__alt_mem_Flash_flash_data+0xf40010ac>
    28d4:	d8802617 	ldw	r2,152(sp)
    28d8:	db003317 	ldw	r12,204(sp)
    28dc:	d8c02017 	ldw	r3,128(sp)
    28e0:	da000404 	addi	r8,sp,16
    28e4:	6085c83a 	sub	r2,r12,r2
    28e8:	003e1306 	br	2138 <__alt_mem_Flash_flash_data+0xf4002138>
    28ec:	030000b4 	movhi	r12,2
    28f0:	6325a384 	addi	r12,r12,-26994
    28f4:	db003615 	stw	r12,216(sp)
    28f8:	003b0206 	br	1504 <__alt_mem_Flash_flash_data+0xf4001504>
    28fc:	00c00b44 	movi	r3,45
    2900:	d8802b15 	stw	r2,172(sp)
    2904:	dc402d17 	ldw	r17,180(sp)
    2908:	d8c02785 	stb	r3,158(sp)
    290c:	dcc02d15 	stw	r19,180(sp)
    2910:	d8003215 	stw	zero,200(sp)
    2914:	00800b44 	movi	r2,45
    2918:	003a4706 	br	1238 <__alt_mem_Flash_flash_data+0xf4001238>
    291c:	05400b44 	movi	r21,45
    2920:	dd402785 	stb	r21,158(sp)
    2924:	003b4706 	br	1644 <__alt_mem_Flash_flash_data+0xf4001644>
    2928:	008000b4 	movhi	r2,2
    292c:	10a59204 	addi	r2,r2,-27064
    2930:	d8803115 	stw	r2,196(sp)
    2934:	003f4106 	br	263c <__alt_mem_Flash_flash_data+0xf400263c>
    2938:	d8c02617 	ldw	r3,152(sp)
    293c:	00bfff44 	movi	r2,-3
    2940:	18801116 	blt	r3,r2,2988 <___vfprintf_internal_r+0x1cac>
    2944:	48c01016 	blt	r9,r3,2988 <___vfprintf_internal_r+0x1cac>
    2948:	d8c03415 	stw	r3,208(sp)
    294c:	040019c4 	movi	r16,103
    2950:	003eb206 	br	241c <__alt_mem_Flash_flash_data+0xf400241c>
    2954:	010000b4 	movhi	r4,2
    2958:	21259f84 	addi	r4,r4,-27010
    295c:	d9002c15 	stw	r4,176(sp)
    2960:	003cb106 	br	1c28 <__alt_mem_Flash_flash_data+0xf4001c28>
    2964:	5005883a 	mov	r2,r10
    2968:	003ea106 	br	23f0 <__alt_mem_Flash_flash_data+0xf40023f0>
    296c:	da402b15 	stw	r9,172(sp)
    2970:	dd402783 	ldbu	r21,158(sp)
    2974:	4825883a 	mov	r18,r9
    2978:	dcc02d15 	stw	r19,180(sp)
    297c:	d8003215 	stw	zero,200(sp)
    2980:	d8003415 	stw	zero,208(sp)
    2984:	003a2806 	br	1228 <__alt_mem_Flash_flash_data+0xf4001228>
    2988:	843fff84 	addi	r16,r16,-2
    298c:	1f3fffc4 	addi	fp,r3,-1
    2990:	df002615 	stw	fp,152(sp)
    2994:	dc0022c5 	stb	r16,139(sp)
    2998:	e0009816 	blt	fp,zero,2bfc <___vfprintf_internal_r+0x1f20>
    299c:	00800ac4 	movi	r2,43
    29a0:	d8802305 	stb	r2,140(sp)
    29a4:	00800244 	movi	r2,9
    29a8:	1700750e 	bge	r2,fp,2b80 <___vfprintf_internal_r+0x1ea4>
    29ac:	dd4022c4 	addi	r21,sp,139
    29b0:	dc002c15 	stw	r16,176(sp)
    29b4:	4025883a 	mov	r18,r8
    29b8:	a821883a 	mov	r16,r21
    29bc:	e009883a 	mov	r4,fp
    29c0:	01400284 	movi	r5,10
    29c4:	000a90c0 	call	a90c <__modsi3>
    29c8:	10800c04 	addi	r2,r2,48
    29cc:	843fffc4 	addi	r16,r16,-1
    29d0:	e009883a 	mov	r4,fp
    29d4:	01400284 	movi	r5,10
    29d8:	80800005 	stb	r2,0(r16)
    29dc:	000a8b80 	call	a8b8 <__divsi3>
    29e0:	1039883a 	mov	fp,r2
    29e4:	00800244 	movi	r2,9
    29e8:	173ff416 	blt	r2,fp,29bc <__alt_mem_Flash_flash_data+0xf40029bc>
    29ec:	9011883a 	mov	r8,r18
    29f0:	e0800c04 	addi	r2,fp,48
    29f4:	8025883a 	mov	r18,r16
    29f8:	913fffc4 	addi	r4,r18,-1
    29fc:	90bfffc5 	stb	r2,-1(r18)
    2a00:	dc002c17 	ldw	r16,176(sp)
    2a04:	2540852e 	bgeu	r4,r21,2c1c <___vfprintf_internal_r+0x1f40>
    2a08:	d9402384 	addi	r5,sp,142
    2a0c:	2c8bc83a 	sub	r5,r5,r18
    2a10:	d8c02344 	addi	r3,sp,141
    2a14:	a94b883a 	add	r5,r21,r5
    2a18:	00000106 	br	2a20 <___vfprintf_internal_r+0x1d44>
    2a1c:	20800003 	ldbu	r2,0(r4)
    2a20:	18800005 	stb	r2,0(r3)
    2a24:	18c00044 	addi	r3,r3,1
    2a28:	21000044 	addi	r4,r4,1
    2a2c:	197ffb1e 	bne	r3,r5,2a1c <__alt_mem_Flash_flash_data+0xf4002a1c>
    2a30:	d8802304 	addi	r2,sp,140
    2a34:	1485c83a 	sub	r2,r2,r18
    2a38:	d8c02344 	addi	r3,sp,141
    2a3c:	1885883a 	add	r2,r3,r2
    2a40:	dac03317 	ldw	r11,204(sp)
    2a44:	156bc83a 	sub	r21,r2,r21
    2a48:	dd403a15 	stw	r21,232(sp)
    2a4c:	00800044 	movi	r2,1
    2a50:	5d65883a 	add	r18,r11,r21
    2a54:	12c0660e 	bge	r2,r11,2bf0 <___vfprintf_internal_r+0x1f14>
    2a58:	94800044 	addi	r18,r18,1
    2a5c:	9005883a 	mov	r2,r18
    2a60:	90006116 	blt	r18,zero,2be8 <___vfprintf_internal_r+0x1f0c>
    2a64:	d8003415 	stw	zero,208(sp)
    2a68:	003e7406 	br	243c <__alt_mem_Flash_flash_data+0xf400243c>
    2a6c:	b009883a 	mov	r4,r22
    2a70:	b80b883a 	mov	r5,r23
    2a74:	d9801e04 	addi	r6,sp,120
    2a78:	00074b80 	call	74b8 <__sprint_r>
    2a7c:	10398b1e 	bne	r2,zero,10ac <__alt_mem_Flash_flash_data+0xf40010ac>
    2a80:	dc002617 	ldw	r16,152(sp)
    2a84:	d8c02017 	ldw	r3,128(sp)
    2a88:	d8801f17 	ldw	r2,124(sp)
    2a8c:	da000404 	addi	r8,sp,16
    2a90:	003ec906 	br	25b8 <__alt_mem_Flash_flash_data+0xf40025b8>
    2a94:	483e1c1e 	bne	r9,zero,2308 <__alt_mem_Flash_flash_data+0xf4002308>
    2a98:	9013883a 	mov	r9,r18
    2a9c:	003e1a06 	br	2308 <__alt_mem_Flash_flash_data+0xf4002308>
    2aa0:	02400184 	movi	r9,6
    2aa4:	003e1806 	br	2308 <__alt_mem_Flash_flash_data+0xf4002308>
    2aa8:	d8c03417 	ldw	r3,208(sp)
    2aac:	00c04b0e 	bge	zero,r3,2bdc <___vfprintf_internal_r+0x1f00>
    2ab0:	04800044 	movi	r18,1
    2ab4:	dac03317 	ldw	r11,204(sp)
    2ab8:	92e5883a 	add	r18,r18,r11
    2abc:	9005883a 	mov	r2,r18
    2ac0:	903e5e0e 	bge	r18,zero,243c <__alt_mem_Flash_flash_data+0xf400243c>
    2ac4:	0005883a 	mov	r2,zero
    2ac8:	003e5c06 	br	243c <__alt_mem_Flash_flash_data+0xf400243c>
    2acc:	00c00b44 	movi	r3,45
    2ad0:	64a0003c 	xorhi	r18,r12,32768
    2ad4:	d8c02b05 	stb	r3,172(sp)
    2ad8:	003e1106 	br	2320 <__alt_mem_Flash_flash_data+0xf4002320>
    2adc:	4f000044 	addi	fp,r9,1
    2ae0:	003e1606 	br	233c <__alt_mem_Flash_flash_data+0xf400233c>
    2ae4:	d8c02617 	ldw	r3,152(sp)
    2ae8:	d8c03415 	stw	r3,208(sp)
    2aec:	00c0350e 	bge	zero,r3,2bc4 <___vfprintf_internal_r+0x1ee8>
    2af0:	4800081e 	bne	r9,zero,2b14 <___vfprintf_internal_r+0x1e38>
    2af4:	8c40004c 	andi	r17,r17,1
    2af8:	8800061e 	bne	r17,zero,2b14 <___vfprintf_internal_r+0x1e38>
    2afc:	1805883a 	mov	r2,r3
    2b00:	183e4d0e 	bge	r3,zero,2438 <__alt_mem_Flash_flash_data+0xf4002438>
    2b04:	0005883a 	mov	r2,zero
    2b08:	003e4b06 	br	2438 <__alt_mem_Flash_flash_data+0xf4002438>
    2b0c:	d8802117 	ldw	r2,132(sp)
    2b10:	003e3706 	br	23f0 <__alt_mem_Flash_flash_data+0xf40023f0>
    2b14:	dac03417 	ldw	r11,208(sp)
    2b18:	4a400044 	addi	r9,r9,1
    2b1c:	5a65883a 	add	r18,r11,r9
    2b20:	9005883a 	mov	r2,r18
    2b24:	903e450e 	bge	r18,zero,243c <__alt_mem_Flash_flash_data+0xf400243c>
    2b28:	003fe606 	br	2ac4 <__alt_mem_Flash_flash_data+0xf4002ac4>
    2b2c:	db003417 	ldw	r12,208(sp)
    2b30:	64800044 	addi	r18,r12,1
    2b34:	9005883a 	mov	r2,r18
    2b38:	903e400e 	bge	r18,zero,243c <__alt_mem_Flash_flash_data+0xf400243c>
    2b3c:	003fe106 	br	2ac4 <__alt_mem_Flash_flash_data+0xf4002ac4>
    2b40:	d9003717 	ldw	r4,220(sp)
    2b44:	900b883a 	mov	r5,r18
    2b48:	000d883a 	mov	r6,zero
    2b4c:	000f883a 	mov	r7,zero
    2b50:	da003f15 	stw	r8,252(sp)
    2b54:	da403e15 	stw	r9,248(sp)
    2b58:	da803d15 	stw	r10,244(sp)
    2b5c:	000bae00 	call	bae0 <__eqdf2>
    2b60:	da003f17 	ldw	r8,252(sp)
    2b64:	da403e17 	ldw	r9,248(sp)
    2b68:	da803d17 	ldw	r10,244(sp)
    2b6c:	103f1f26 	beq	r2,zero,27ec <__alt_mem_Flash_flash_data+0xf40027ec>
    2b70:	00800044 	movi	r2,1
    2b74:	1707c83a 	sub	r3,r2,fp
    2b78:	d8c02615 	stw	r3,152(sp)
    2b7c:	003f1c06 	br	27f0 <__alt_mem_Flash_flash_data+0xf40027f0>
    2b80:	00800c04 	movi	r2,48
    2b84:	e0c00c04 	addi	r3,fp,48
    2b88:	d8802345 	stb	r2,141(sp)
    2b8c:	d8c02385 	stb	r3,142(sp)
    2b90:	d88023c4 	addi	r2,sp,143
    2b94:	dd4022c4 	addi	r21,sp,139
    2b98:	003fa906 	br	2a40 <__alt_mem_Flash_flash_data+0xf4002a40>
    2b9c:	0005883a 	mov	r2,zero
    2ba0:	003f3c06 	br	2894 <__alt_mem_Flash_flash_data+0xf4002894>
    2ba4:	dac02d17 	ldw	r11,180(sp)
    2ba8:	5a400017 	ldw	r9,0(r11)
    2bac:	5ac00104 	addi	r11,r11,4
    2bb0:	dac02d15 	stw	r11,180(sp)
    2bb4:	483ec80e 	bge	r9,zero,26d8 <__alt_mem_Flash_flash_data+0xf40026d8>
    2bb8:	027fffc4 	movi	r9,-1
    2bbc:	1c000047 	ldb	r16,1(r3)
    2bc0:	0038ab06 	br	e70 <__alt_mem_Flash_flash_data+0xf4000e70>
    2bc4:	4800111e 	bne	r9,zero,2c0c <___vfprintf_internal_r+0x1f30>
    2bc8:	8c40004c 	andi	r17,r17,1
    2bcc:	88000f1e 	bne	r17,zero,2c0c <___vfprintf_internal_r+0x1f30>
    2bd0:	00800044 	movi	r2,1
    2bd4:	1025883a 	mov	r18,r2
    2bd8:	003e1806 	br	243c <__alt_mem_Flash_flash_data+0xf400243c>
    2bdc:	04800084 	movi	r18,2
    2be0:	90e5c83a 	sub	r18,r18,r3
    2be4:	003fb306 	br	2ab4 <__alt_mem_Flash_flash_data+0xf4002ab4>
    2be8:	0005883a 	mov	r2,zero
    2bec:	003f9d06 	br	2a64 <__alt_mem_Flash_flash_data+0xf4002a64>
    2bf0:	88a2703a 	and	r17,r17,r2
    2bf4:	883f9926 	beq	r17,zero,2a5c <__alt_mem_Flash_flash_data+0xf4002a5c>
    2bf8:	003f9706 	br	2a58 <__alt_mem_Flash_flash_data+0xf4002a58>
    2bfc:	00800b44 	movi	r2,45
    2c00:	0739c83a 	sub	fp,zero,fp
    2c04:	d8802305 	stb	r2,140(sp)
    2c08:	003f6606 	br	29a4 <__alt_mem_Flash_flash_data+0xf40029a4>
    2c0c:	4c800084 	addi	r18,r9,2
    2c10:	9005883a 	mov	r2,r18
    2c14:	903e090e 	bge	r18,zero,243c <__alt_mem_Flash_flash_data+0xf400243c>
    2c18:	003faa06 	br	2ac4 <__alt_mem_Flash_flash_data+0xf4002ac4>
    2c1c:	d8802344 	addi	r2,sp,141
    2c20:	003f8706 	br	2a40 <__alt_mem_Flash_flash_data+0xf4002a40>
    2c24:	d8c02617 	ldw	r3,152(sp)
    2c28:	003f5806 	br	298c <__alt_mem_Flash_flash_data+0xf400298c>

00002c2c <__vfprintf_internal>:
    2c2c:	2007883a 	mov	r3,r4
    2c30:	010000b4 	movhi	r4,2
    2c34:	212e8e04 	addi	r4,r4,-17864
    2c38:	21000017 	ldw	r4,0(r4)
    2c3c:	2805883a 	mov	r2,r5
    2c40:	300f883a 	mov	r7,r6
    2c44:	180b883a 	mov	r5,r3
    2c48:	100d883a 	mov	r6,r2
    2c4c:	0000cdc1 	jmpi	cdc <___vfprintf_internal_r>

00002c50 <__sbprintf>:
    2c50:	2880030b 	ldhu	r2,12(r5)
    2c54:	2ac01917 	ldw	r11,100(r5)
    2c58:	2a80038b 	ldhu	r10,14(r5)
    2c5c:	2a400717 	ldw	r9,28(r5)
    2c60:	2a000917 	ldw	r8,36(r5)
    2c64:	defee204 	addi	sp,sp,-1144
    2c68:	00c10004 	movi	r3,1024
    2c6c:	dc011a15 	stw	r16,1128(sp)
    2c70:	10bfff4c 	andi	r2,r2,65533
    2c74:	2821883a 	mov	r16,r5
    2c78:	d8cb883a 	add	r5,sp,r3
    2c7c:	dc811c15 	stw	r18,1136(sp)
    2c80:	dc411b15 	stw	r17,1132(sp)
    2c84:	dfc11d15 	stw	ra,1140(sp)
    2c88:	2025883a 	mov	r18,r4
    2c8c:	d881030d 	sth	r2,1036(sp)
    2c90:	dac11915 	stw	r11,1124(sp)
    2c94:	da81038d 	sth	r10,1038(sp)
    2c98:	da410715 	stw	r9,1052(sp)
    2c9c:	da010915 	stw	r8,1060(sp)
    2ca0:	dec10015 	stw	sp,1024(sp)
    2ca4:	dec10415 	stw	sp,1040(sp)
    2ca8:	d8c10215 	stw	r3,1032(sp)
    2cac:	d8c10515 	stw	r3,1044(sp)
    2cb0:	d8010615 	stw	zero,1048(sp)
    2cb4:	0000cdc0 	call	cdc <___vfprintf_internal_r>
    2cb8:	1023883a 	mov	r17,r2
    2cbc:	10000416 	blt	r2,zero,2cd0 <__sbprintf+0x80>
    2cc0:	9009883a 	mov	r4,r18
    2cc4:	d9410004 	addi	r5,sp,1024
    2cc8:	00049900 	call	4990 <_fflush_r>
    2ccc:	10000d1e 	bne	r2,zero,2d04 <__sbprintf+0xb4>
    2cd0:	d8c1030b 	ldhu	r3,1036(sp)
    2cd4:	18c0100c 	andi	r3,r3,64
    2cd8:	18000326 	beq	r3,zero,2ce8 <__sbprintf+0x98>
    2cdc:	8080030b 	ldhu	r2,12(r16)
    2ce0:	10801014 	ori	r2,r2,64
    2ce4:	8080030d 	sth	r2,12(r16)
    2ce8:	8805883a 	mov	r2,r17
    2cec:	dfc11d17 	ldw	ra,1140(sp)
    2cf0:	dc811c17 	ldw	r18,1136(sp)
    2cf4:	dc411b17 	ldw	r17,1132(sp)
    2cf8:	dc011a17 	ldw	r16,1128(sp)
    2cfc:	dec11e04 	addi	sp,sp,1144
    2d00:	f800283a 	ret
    2d04:	047fffc4 	movi	r17,-1
    2d08:	003ff106 	br	2cd0 <__alt_mem_Flash_flash_data+0xf4002cd0>

00002d0c <__swsetup_r>:
    2d0c:	008000b4 	movhi	r2,2
    2d10:	defffd04 	addi	sp,sp,-12
    2d14:	10ae8e04 	addi	r2,r2,-17864
    2d18:	dc400115 	stw	r17,4(sp)
    2d1c:	2023883a 	mov	r17,r4
    2d20:	11000017 	ldw	r4,0(r2)
    2d24:	dc000015 	stw	r16,0(sp)
    2d28:	dfc00215 	stw	ra,8(sp)
    2d2c:	2821883a 	mov	r16,r5
    2d30:	20000226 	beq	r4,zero,2d3c <__swsetup_r+0x30>
    2d34:	20c00e17 	ldw	r3,56(r4)
    2d38:	18003126 	beq	r3,zero,2e00 <__swsetup_r+0xf4>
    2d3c:	8080030b 	ldhu	r2,12(r16)
    2d40:	10c0020c 	andi	r3,r2,8
    2d44:	100d883a 	mov	r6,r2
    2d48:	18000f26 	beq	r3,zero,2d88 <__swsetup_r+0x7c>
    2d4c:	80c00417 	ldw	r3,16(r16)
    2d50:	18001526 	beq	r3,zero,2da8 <__swsetup_r+0x9c>
    2d54:	1100004c 	andi	r4,r2,1
    2d58:	20001c1e 	bne	r4,zero,2dcc <__swsetup_r+0xc0>
    2d5c:	1080008c 	andi	r2,r2,2
    2d60:	1000291e 	bne	r2,zero,2e08 <__swsetup_r+0xfc>
    2d64:	80800517 	ldw	r2,20(r16)
    2d68:	80800215 	stw	r2,8(r16)
    2d6c:	18001c26 	beq	r3,zero,2de0 <__swsetup_r+0xd4>
    2d70:	0005883a 	mov	r2,zero
    2d74:	dfc00217 	ldw	ra,8(sp)
    2d78:	dc400117 	ldw	r17,4(sp)
    2d7c:	dc000017 	ldw	r16,0(sp)
    2d80:	dec00304 	addi	sp,sp,12
    2d84:	f800283a 	ret
    2d88:	3080040c 	andi	r2,r6,16
    2d8c:	10002e26 	beq	r2,zero,2e48 <__swsetup_r+0x13c>
    2d90:	3080010c 	andi	r2,r6,4
    2d94:	10001e1e 	bne	r2,zero,2e10 <__swsetup_r+0x104>
    2d98:	80c00417 	ldw	r3,16(r16)
    2d9c:	30800214 	ori	r2,r6,8
    2da0:	8080030d 	sth	r2,12(r16)
    2da4:	183feb1e 	bne	r3,zero,2d54 <__alt_mem_Flash_flash_data+0xf4002d54>
    2da8:	1140a00c 	andi	r5,r2,640
    2dac:	01008004 	movi	r4,512
    2db0:	293fe826 	beq	r5,r4,2d54 <__alt_mem_Flash_flash_data+0xf4002d54>
    2db4:	8809883a 	mov	r4,r17
    2db8:	800b883a 	mov	r5,r16
    2dbc:	00054380 	call	5438 <__smakebuf_r>
    2dc0:	8080030b 	ldhu	r2,12(r16)
    2dc4:	80c00417 	ldw	r3,16(r16)
    2dc8:	003fe206 	br	2d54 <__alt_mem_Flash_flash_data+0xf4002d54>
    2dcc:	80800517 	ldw	r2,20(r16)
    2dd0:	80000215 	stw	zero,8(r16)
    2dd4:	0085c83a 	sub	r2,zero,r2
    2dd8:	80800615 	stw	r2,24(r16)
    2ddc:	183fe41e 	bne	r3,zero,2d70 <__alt_mem_Flash_flash_data+0xf4002d70>
    2de0:	80c0030b 	ldhu	r3,12(r16)
    2de4:	0005883a 	mov	r2,zero
    2de8:	1900200c 	andi	r4,r3,128
    2dec:	203fe126 	beq	r4,zero,2d74 <__alt_mem_Flash_flash_data+0xf4002d74>
    2df0:	18c01014 	ori	r3,r3,64
    2df4:	80c0030d 	sth	r3,12(r16)
    2df8:	00bfffc4 	movi	r2,-1
    2dfc:	003fdd06 	br	2d74 <__alt_mem_Flash_flash_data+0xf4002d74>
    2e00:	0004d6c0 	call	4d6c <__sinit>
    2e04:	003fcd06 	br	2d3c <__alt_mem_Flash_flash_data+0xf4002d3c>
    2e08:	0005883a 	mov	r2,zero
    2e0c:	003fd606 	br	2d68 <__alt_mem_Flash_flash_data+0xf4002d68>
    2e10:	81400c17 	ldw	r5,48(r16)
    2e14:	28000626 	beq	r5,zero,2e30 <__swsetup_r+0x124>
    2e18:	80801004 	addi	r2,r16,64
    2e1c:	28800326 	beq	r5,r2,2e2c <__swsetup_r+0x120>
    2e20:	8809883a 	mov	r4,r17
    2e24:	0004ee00 	call	4ee0 <_free_r>
    2e28:	8180030b 	ldhu	r6,12(r16)
    2e2c:	80000c15 	stw	zero,48(r16)
    2e30:	80c00417 	ldw	r3,16(r16)
    2e34:	00bff6c4 	movi	r2,-37
    2e38:	118c703a 	and	r6,r2,r6
    2e3c:	80000115 	stw	zero,4(r16)
    2e40:	80c00015 	stw	r3,0(r16)
    2e44:	003fd506 	br	2d9c <__alt_mem_Flash_flash_data+0xf4002d9c>
    2e48:	00800244 	movi	r2,9
    2e4c:	88800015 	stw	r2,0(r17)
    2e50:	30801014 	ori	r2,r6,64
    2e54:	8080030d 	sth	r2,12(r16)
    2e58:	00bfffc4 	movi	r2,-1
    2e5c:	003fc506 	br	2d74 <__alt_mem_Flash_flash_data+0xf4002d74>

00002e60 <quorem>:
    2e60:	defff704 	addi	sp,sp,-36
    2e64:	dc800215 	stw	r18,8(sp)
    2e68:	20800417 	ldw	r2,16(r4)
    2e6c:	2c800417 	ldw	r18,16(r5)
    2e70:	dfc00815 	stw	ra,32(sp)
    2e74:	ddc00715 	stw	r23,28(sp)
    2e78:	dd800615 	stw	r22,24(sp)
    2e7c:	dd400515 	stw	r21,20(sp)
    2e80:	dd000415 	stw	r20,16(sp)
    2e84:	dcc00315 	stw	r19,12(sp)
    2e88:	dc400115 	stw	r17,4(sp)
    2e8c:	dc000015 	stw	r16,0(sp)
    2e90:	14807116 	blt	r2,r18,3058 <quorem+0x1f8>
    2e94:	94bfffc4 	addi	r18,r18,-1
    2e98:	94ad883a 	add	r22,r18,r18
    2e9c:	b5ad883a 	add	r22,r22,r22
    2ea0:	2c400504 	addi	r17,r5,20
    2ea4:	8da9883a 	add	r20,r17,r22
    2ea8:	25400504 	addi	r21,r4,20
    2eac:	282f883a 	mov	r23,r5
    2eb0:	adad883a 	add	r22,r21,r22
    2eb4:	a1400017 	ldw	r5,0(r20)
    2eb8:	2021883a 	mov	r16,r4
    2ebc:	b1000017 	ldw	r4,0(r22)
    2ec0:	29400044 	addi	r5,r5,1
    2ec4:	000a9680 	call	a968 <__udivsi3>
    2ec8:	1027883a 	mov	r19,r2
    2ecc:	10002c26 	beq	r2,zero,2f80 <quorem+0x120>
    2ed0:	a813883a 	mov	r9,r21
    2ed4:	8811883a 	mov	r8,r17
    2ed8:	0009883a 	mov	r4,zero
    2edc:	000d883a 	mov	r6,zero
    2ee0:	41c00017 	ldw	r7,0(r8)
    2ee4:	49400017 	ldw	r5,0(r9)
    2ee8:	42000104 	addi	r8,r8,4
    2eec:	38bfffcc 	andi	r2,r7,65535
    2ef0:	14c5383a 	mul	r2,r2,r19
    2ef4:	380ed43a 	srli	r7,r7,16
    2ef8:	28ffffcc 	andi	r3,r5,65535
    2efc:	2085883a 	add	r2,r4,r2
    2f00:	1008d43a 	srli	r4,r2,16
    2f04:	3ccf383a 	mul	r7,r7,r19
    2f08:	198d883a 	add	r6,r3,r6
    2f0c:	10ffffcc 	andi	r3,r2,65535
    2f10:	30c7c83a 	sub	r3,r6,r3
    2f14:	280ad43a 	srli	r5,r5,16
    2f18:	21c9883a 	add	r4,r4,r7
    2f1c:	180dd43a 	srai	r6,r3,16
    2f20:	20bfffcc 	andi	r2,r4,65535
    2f24:	288bc83a 	sub	r5,r5,r2
    2f28:	298b883a 	add	r5,r5,r6
    2f2c:	280e943a 	slli	r7,r5,16
    2f30:	18ffffcc 	andi	r3,r3,65535
    2f34:	2008d43a 	srli	r4,r4,16
    2f38:	38ceb03a 	or	r7,r7,r3
    2f3c:	49c00015 	stw	r7,0(r9)
    2f40:	280dd43a 	srai	r6,r5,16
    2f44:	4a400104 	addi	r9,r9,4
    2f48:	a23fe52e 	bgeu	r20,r8,2ee0 <__alt_mem_Flash_flash_data+0xf4002ee0>
    2f4c:	b0800017 	ldw	r2,0(r22)
    2f50:	10000b1e 	bne	r2,zero,2f80 <quorem+0x120>
    2f54:	b0bfff04 	addi	r2,r22,-4
    2f58:	a880082e 	bgeu	r21,r2,2f7c <quorem+0x11c>
    2f5c:	b0ffff17 	ldw	r3,-4(r22)
    2f60:	18000326 	beq	r3,zero,2f70 <quorem+0x110>
    2f64:	00000506 	br	2f7c <quorem+0x11c>
    2f68:	10c00017 	ldw	r3,0(r2)
    2f6c:	1800031e 	bne	r3,zero,2f7c <quorem+0x11c>
    2f70:	10bfff04 	addi	r2,r2,-4
    2f74:	94bfffc4 	addi	r18,r18,-1
    2f78:	a8bffb36 	bltu	r21,r2,2f68 <__alt_mem_Flash_flash_data+0xf4002f68>
    2f7c:	84800415 	stw	r18,16(r16)
    2f80:	8009883a 	mov	r4,r16
    2f84:	b80b883a 	mov	r5,r23
    2f88:	00069b00 	call	69b0 <__mcmp>
    2f8c:	10002616 	blt	r2,zero,3028 <quorem+0x1c8>
    2f90:	9cc00044 	addi	r19,r19,1
    2f94:	a80d883a 	mov	r6,r21
    2f98:	000b883a 	mov	r5,zero
    2f9c:	31000017 	ldw	r4,0(r6)
    2fa0:	88800017 	ldw	r2,0(r17)
    2fa4:	31800104 	addi	r6,r6,4
    2fa8:	20ffffcc 	andi	r3,r4,65535
    2fac:	194b883a 	add	r5,r3,r5
    2fb0:	10ffffcc 	andi	r3,r2,65535
    2fb4:	28c7c83a 	sub	r3,r5,r3
    2fb8:	1004d43a 	srli	r2,r2,16
    2fbc:	2008d43a 	srli	r4,r4,16
    2fc0:	180bd43a 	srai	r5,r3,16
    2fc4:	18ffffcc 	andi	r3,r3,65535
    2fc8:	2089c83a 	sub	r4,r4,r2
    2fcc:	2149883a 	add	r4,r4,r5
    2fd0:	2004943a 	slli	r2,r4,16
    2fd4:	8c400104 	addi	r17,r17,4
    2fd8:	200bd43a 	srai	r5,r4,16
    2fdc:	10c6b03a 	or	r3,r2,r3
    2fe0:	30ffff15 	stw	r3,-4(r6)
    2fe4:	a47fed2e 	bgeu	r20,r17,2f9c <__alt_mem_Flash_flash_data+0xf4002f9c>
    2fe8:	9485883a 	add	r2,r18,r18
    2fec:	1085883a 	add	r2,r2,r2
    2ff0:	a887883a 	add	r3,r21,r2
    2ff4:	18800017 	ldw	r2,0(r3)
    2ff8:	10000b1e 	bne	r2,zero,3028 <quorem+0x1c8>
    2ffc:	18bfff04 	addi	r2,r3,-4
    3000:	a880082e 	bgeu	r21,r2,3024 <quorem+0x1c4>
    3004:	18ffff17 	ldw	r3,-4(r3)
    3008:	18000326 	beq	r3,zero,3018 <quorem+0x1b8>
    300c:	00000506 	br	3024 <quorem+0x1c4>
    3010:	10c00017 	ldw	r3,0(r2)
    3014:	1800031e 	bne	r3,zero,3024 <quorem+0x1c4>
    3018:	10bfff04 	addi	r2,r2,-4
    301c:	94bfffc4 	addi	r18,r18,-1
    3020:	a8bffb36 	bltu	r21,r2,3010 <__alt_mem_Flash_flash_data+0xf4003010>
    3024:	84800415 	stw	r18,16(r16)
    3028:	9805883a 	mov	r2,r19
    302c:	dfc00817 	ldw	ra,32(sp)
    3030:	ddc00717 	ldw	r23,28(sp)
    3034:	dd800617 	ldw	r22,24(sp)
    3038:	dd400517 	ldw	r21,20(sp)
    303c:	dd000417 	ldw	r20,16(sp)
    3040:	dcc00317 	ldw	r19,12(sp)
    3044:	dc800217 	ldw	r18,8(sp)
    3048:	dc400117 	ldw	r17,4(sp)
    304c:	dc000017 	ldw	r16,0(sp)
    3050:	dec00904 	addi	sp,sp,36
    3054:	f800283a 	ret
    3058:	0005883a 	mov	r2,zero
    305c:	003ff306 	br	302c <__alt_mem_Flash_flash_data+0xf400302c>

00003060 <_dtoa_r>:
    3060:	20801017 	ldw	r2,64(r4)
    3064:	deffde04 	addi	sp,sp,-136
    3068:	dd401d15 	stw	r21,116(sp)
    306c:	dcc01b15 	stw	r19,108(sp)
    3070:	dc801a15 	stw	r18,104(sp)
    3074:	dc401915 	stw	r17,100(sp)
    3078:	dc001815 	stw	r16,96(sp)
    307c:	dfc02115 	stw	ra,132(sp)
    3080:	df002015 	stw	fp,128(sp)
    3084:	ddc01f15 	stw	r23,124(sp)
    3088:	dd801e15 	stw	r22,120(sp)
    308c:	dd001c15 	stw	r20,112(sp)
    3090:	d9c00315 	stw	r7,12(sp)
    3094:	2021883a 	mov	r16,r4
    3098:	302b883a 	mov	r21,r6
    309c:	2825883a 	mov	r18,r5
    30a0:	dc402417 	ldw	r17,144(sp)
    30a4:	3027883a 	mov	r19,r6
    30a8:	10000826 	beq	r2,zero,30cc <_dtoa_r+0x6c>
    30ac:	21801117 	ldw	r6,68(r4)
    30b0:	00c00044 	movi	r3,1
    30b4:	100b883a 	mov	r5,r2
    30b8:	1986983a 	sll	r3,r3,r6
    30bc:	11800115 	stw	r6,4(r2)
    30c0:	10c00215 	stw	r3,8(r2)
    30c4:	00061840 	call	6184 <_Bfree>
    30c8:	80001015 	stw	zero,64(r16)
    30cc:	a8002d16 	blt	r21,zero,3184 <_dtoa_r+0x124>
    30d0:	88000015 	stw	zero,0(r17)
    30d4:	a8dffc2c 	andhi	r3,r21,32752
    30d8:	009ffc34 	movhi	r2,32752
    30dc:	18801b26 	beq	r3,r2,314c <_dtoa_r+0xec>
    30e0:	9009883a 	mov	r4,r18
    30e4:	980b883a 	mov	r5,r19
    30e8:	000d883a 	mov	r6,zero
    30ec:	000f883a 	mov	r7,zero
    30f0:	000bae00 	call	bae0 <__eqdf2>
    30f4:	10002a1e 	bne	r2,zero,31a0 <_dtoa_r+0x140>
    30f8:	d8c02317 	ldw	r3,140(sp)
    30fc:	d9002517 	ldw	r4,148(sp)
    3100:	00800044 	movi	r2,1
    3104:	18800015 	stw	r2,0(r3)
    3108:	2001a226 	beq	r4,zero,3794 <_dtoa_r+0x734>
    310c:	008000b4 	movhi	r2,2
    3110:	10a59f44 	addi	r2,r2,-27011
    3114:	20800015 	stw	r2,0(r4)
    3118:	10bfffc4 	addi	r2,r2,-1
    311c:	dfc02117 	ldw	ra,132(sp)
    3120:	df002017 	ldw	fp,128(sp)
    3124:	ddc01f17 	ldw	r23,124(sp)
    3128:	dd801e17 	ldw	r22,120(sp)
    312c:	dd401d17 	ldw	r21,116(sp)
    3130:	dd001c17 	ldw	r20,112(sp)
    3134:	dcc01b17 	ldw	r19,108(sp)
    3138:	dc801a17 	ldw	r18,104(sp)
    313c:	dc401917 	ldw	r17,100(sp)
    3140:	dc001817 	ldw	r16,96(sp)
    3144:	dec02204 	addi	sp,sp,136
    3148:	f800283a 	ret
    314c:	d8c02317 	ldw	r3,140(sp)
    3150:	0089c3c4 	movi	r2,9999
    3154:	18800015 	stw	r2,0(r3)
    3158:	90017c26 	beq	r18,zero,374c <_dtoa_r+0x6ec>
    315c:	008000b4 	movhi	r2,2
    3160:	10a5ab04 	addi	r2,r2,-26964
    3164:	d9002517 	ldw	r4,148(sp)
    3168:	203fec26 	beq	r4,zero,311c <__alt_mem_Flash_flash_data+0xf400311c>
    316c:	10c000c7 	ldb	r3,3(r2)
    3170:	18017d1e 	bne	r3,zero,3768 <_dtoa_r+0x708>
    3174:	10c000c4 	addi	r3,r2,3
    3178:	d9802517 	ldw	r6,148(sp)
    317c:	30c00015 	stw	r3,0(r6)
    3180:	003fe606 	br	311c <__alt_mem_Flash_flash_data+0xf400311c>
    3184:	04e00034 	movhi	r19,32768
    3188:	9cffffc4 	addi	r19,r19,-1
    318c:	00800044 	movi	r2,1
    3190:	ace6703a 	and	r19,r21,r19
    3194:	88800015 	stw	r2,0(r17)
    3198:	982b883a 	mov	r21,r19
    319c:	003fcd06 	br	30d4 <__alt_mem_Flash_flash_data+0xf40030d4>
    31a0:	d8800204 	addi	r2,sp,8
    31a4:	a822d53a 	srli	r17,r21,20
    31a8:	d8800015 	stw	r2,0(sp)
    31ac:	8009883a 	mov	r4,r16
    31b0:	900b883a 	mov	r5,r18
    31b4:	980d883a 	mov	r6,r19
    31b8:	d9c00104 	addi	r7,sp,4
    31bc:	0006d240 	call	6d24 <__d2b>
    31c0:	1039883a 	mov	fp,r2
    31c4:	88016a1e 	bne	r17,zero,3770 <_dtoa_r+0x710>
    31c8:	dd000217 	ldw	r20,8(sp)
    31cc:	dc400117 	ldw	r17,4(sp)
    31d0:	00befbc4 	movi	r2,-1041
    31d4:	a463883a 	add	r17,r20,r17
    31d8:	8882ea16 	blt	r17,r2,3d84 <_dtoa_r+0xd24>
    31dc:	00bf0384 	movi	r2,-1010
    31e0:	1445c83a 	sub	r2,r2,r17
    31e4:	89010484 	addi	r4,r17,1042
    31e8:	a8aa983a 	sll	r21,r21,r2
    31ec:	9108d83a 	srl	r4,r18,r4
    31f0:	a908b03a 	or	r4,r21,r4
    31f4:	000ce700 	call	ce70 <__floatunsidf>
    31f8:	017f8434 	movhi	r5,65040
    31fc:	01800044 	movi	r6,1
    3200:	1009883a 	mov	r4,r2
    3204:	194b883a 	add	r5,r3,r5
    3208:	8c7fffc4 	addi	r17,r17,-1
    320c:	d9800f15 	stw	r6,60(sp)
    3210:	000d883a 	mov	r6,zero
    3214:	01cffe34 	movhi	r7,16376
    3218:	000c4480 	call	c448 <__subdf3>
    321c:	0198dbf4 	movhi	r6,25455
    3220:	01cff4f4 	movhi	r7,16339
    3224:	1009883a 	mov	r4,r2
    3228:	180b883a 	mov	r5,r3
    322c:	3190d844 	addi	r6,r6,17249
    3230:	39e1e9c4 	addi	r7,r7,-30809
    3234:	000bd240 	call	bd24 <__muldf3>
    3238:	01a2d874 	movhi	r6,35681
    323c:	01cff1f4 	movhi	r7,16327
    3240:	180b883a 	mov	r5,r3
    3244:	31b22cc4 	addi	r6,r6,-14157
    3248:	39e28a04 	addi	r7,r7,-30168
    324c:	1009883a 	mov	r4,r2
    3250:	000a9780 	call	a978 <__adddf3>
    3254:	8809883a 	mov	r4,r17
    3258:	102d883a 	mov	r22,r2
    325c:	182b883a 	mov	r21,r3
    3260:	000cda00 	call	cda0 <__floatsidf>
    3264:	019427f4 	movhi	r6,20639
    3268:	01cff4f4 	movhi	r7,16339
    326c:	1009883a 	mov	r4,r2
    3270:	180b883a 	mov	r5,r3
    3274:	319e7ec4 	addi	r6,r6,31227
    3278:	39d104c4 	addi	r7,r7,17427
    327c:	000bd240 	call	bd24 <__muldf3>
    3280:	b009883a 	mov	r4,r22
    3284:	a80b883a 	mov	r5,r21
    3288:	100d883a 	mov	r6,r2
    328c:	180f883a 	mov	r7,r3
    3290:	000a9780 	call	a978 <__adddf3>
    3294:	1009883a 	mov	r4,r2
    3298:	180b883a 	mov	r5,r3
    329c:	102d883a 	mov	r22,r2
    32a0:	182b883a 	mov	r21,r3
    32a4:	000cd180 	call	cd18 <__fixdfsi>
    32a8:	b009883a 	mov	r4,r22
    32ac:	a80b883a 	mov	r5,r21
    32b0:	000d883a 	mov	r6,zero
    32b4:	000f883a 	mov	r7,zero
    32b8:	d8800515 	stw	r2,20(sp)
    32bc:	000bc440 	call	bc44 <__ledf2>
    32c0:	10023116 	blt	r2,zero,3b88 <_dtoa_r+0xb28>
    32c4:	d8c00517 	ldw	r3,20(sp)
    32c8:	00800584 	movi	r2,22
    32cc:	10c21f36 	bltu	r2,r3,3b4c <_dtoa_r+0xaec>
    32d0:	180490fa 	slli	r2,r3,3
    32d4:	00c000b4 	movhi	r3,2
    32d8:	18e5c704 	addi	r3,r3,-26852
    32dc:	1885883a 	add	r2,r3,r2
    32e0:	11000017 	ldw	r4,0(r2)
    32e4:	11400117 	ldw	r5,4(r2)
    32e8:	900d883a 	mov	r6,r18
    32ec:	980f883a 	mov	r7,r19
    32f0:	000bb640 	call	bb64 <__gedf2>
    32f4:	0082a70e 	bge	zero,r2,3d94 <_dtoa_r+0xd34>
    32f8:	d9000517 	ldw	r4,20(sp)
    32fc:	d8000d15 	stw	zero,52(sp)
    3300:	213fffc4 	addi	r4,r4,-1
    3304:	d9000515 	stw	r4,20(sp)
    3308:	a463c83a 	sub	r17,r20,r17
    330c:	8dbfffc4 	addi	r22,r17,-1
    3310:	b0021916 	blt	r22,zero,3b78 <_dtoa_r+0xb18>
    3314:	d8000815 	stw	zero,32(sp)
    3318:	d8800517 	ldw	r2,20(sp)
    331c:	10020e16 	blt	r2,zero,3b58 <_dtoa_r+0xaf8>
    3320:	b0ad883a 	add	r22,r22,r2
    3324:	d8800a15 	stw	r2,40(sp)
    3328:	d8000915 	stw	zero,36(sp)
    332c:	d8c00317 	ldw	r3,12(sp)
    3330:	00800244 	movi	r2,9
    3334:	10c11a36 	bltu	r2,r3,37a0 <_dtoa_r+0x740>
    3338:	00800144 	movi	r2,5
    333c:	10c4fc0e 	bge	r2,r3,4730 <_dtoa_r+0x16d0>
    3340:	18ffff04 	addi	r3,r3,-4
    3344:	d8c00315 	stw	r3,12(sp)
    3348:	0029883a 	mov	r20,zero
    334c:	d9800317 	ldw	r6,12(sp)
    3350:	008000c4 	movi	r2,3
    3354:	3083bd26 	beq	r6,r2,424c <_dtoa_r+0x11ec>
    3358:	1183670e 	bge	r2,r6,40f8 <_dtoa_r+0x1098>
    335c:	d8c00317 	ldw	r3,12(sp)
    3360:	00800104 	movi	r2,4
    3364:	1882e726 	beq	r3,r2,3f04 <_dtoa_r+0xea4>
    3368:	00800144 	movi	r2,5
    336c:	1884f21e 	bne	r3,r2,4738 <_dtoa_r+0x16d8>
    3370:	00800044 	movi	r2,1
    3374:	d8800b15 	stw	r2,44(sp)
    3378:	d8c02217 	ldw	r3,136(sp)
    337c:	d9000517 	ldw	r4,20(sp)
    3380:	1907883a 	add	r3,r3,r4
    3384:	19800044 	addi	r6,r3,1
    3388:	d8c00c15 	stw	r3,48(sp)
    338c:	d9800615 	stw	r6,24(sp)
    3390:	0183c30e 	bge	zero,r6,42a0 <_dtoa_r+0x1240>
    3394:	d9800617 	ldw	r6,24(sp)
    3398:	3023883a 	mov	r17,r6
    339c:	80001115 	stw	zero,68(r16)
    33a0:	008005c4 	movi	r2,23
    33a4:	1184f62e 	bgeu	r2,r6,4780 <_dtoa_r+0x1720>
    33a8:	00c00044 	movi	r3,1
    33ac:	00800104 	movi	r2,4
    33b0:	1085883a 	add	r2,r2,r2
    33b4:	11000504 	addi	r4,r2,20
    33b8:	180b883a 	mov	r5,r3
    33bc:	18c00044 	addi	r3,r3,1
    33c0:	313ffb2e 	bgeu	r6,r4,33b0 <__alt_mem_Flash_flash_data+0xf40033b0>
    33c4:	81401115 	stw	r5,68(r16)
    33c8:	8009883a 	mov	r4,r16
    33cc:	00060dc0 	call	60dc <_Balloc>
    33d0:	d8800715 	stw	r2,28(sp)
    33d4:	80801015 	stw	r2,64(r16)
    33d8:	00800384 	movi	r2,14
    33dc:	1440fd36 	bltu	r2,r17,37d4 <_dtoa_r+0x774>
    33e0:	a000fc26 	beq	r20,zero,37d4 <_dtoa_r+0x774>
    33e4:	d8800517 	ldw	r2,20(sp)
    33e8:	0083b90e 	bge	zero,r2,42d0 <_dtoa_r+0x1270>
    33ec:	d8c00517 	ldw	r3,20(sp)
    33f0:	108003cc 	andi	r2,r2,15
    33f4:	100490fa 	slli	r2,r2,3
    33f8:	182fd13a 	srai	r23,r3,4
    33fc:	00c000b4 	movhi	r3,2
    3400:	18e5c704 	addi	r3,r3,-26852
    3404:	1885883a 	add	r2,r3,r2
    3408:	b8c0040c 	andi	r3,r23,16
    340c:	12c00017 	ldw	r11,0(r2)
    3410:	12800117 	ldw	r10,4(r2)
    3414:	18039726 	beq	r3,zero,4274 <_dtoa_r+0x1214>
    3418:	008000b4 	movhi	r2,2
    341c:	10a5bd04 	addi	r2,r2,-26892
    3420:	11800817 	ldw	r6,32(r2)
    3424:	11c00917 	ldw	r7,36(r2)
    3428:	9009883a 	mov	r4,r18
    342c:	980b883a 	mov	r5,r19
    3430:	da801615 	stw	r10,88(sp)
    3434:	dac01515 	stw	r11,84(sp)
    3438:	000b2140 	call	b214 <__divdf3>
    343c:	da801617 	ldw	r10,88(sp)
    3440:	dac01517 	ldw	r11,84(sp)
    3444:	bdc003cc 	andi	r23,r23,15
    3448:	044000c4 	movi	r17,3
    344c:	d8800e15 	stw	r2,56(sp)
    3450:	182b883a 	mov	r21,r3
    3454:	b8001126 	beq	r23,zero,349c <_dtoa_r+0x43c>
    3458:	050000b4 	movhi	r20,2
    345c:	a525bd04 	addi	r20,r20,-26892
    3460:	5805883a 	mov	r2,r11
    3464:	5007883a 	mov	r3,r10
    3468:	b980004c 	andi	r6,r23,1
    346c:	1009883a 	mov	r4,r2
    3470:	b82fd07a 	srai	r23,r23,1
    3474:	180b883a 	mov	r5,r3
    3478:	30000426 	beq	r6,zero,348c <_dtoa_r+0x42c>
    347c:	a1800017 	ldw	r6,0(r20)
    3480:	a1c00117 	ldw	r7,4(r20)
    3484:	8c400044 	addi	r17,r17,1
    3488:	000bd240 	call	bd24 <__muldf3>
    348c:	a5000204 	addi	r20,r20,8
    3490:	b83ff51e 	bne	r23,zero,3468 <__alt_mem_Flash_flash_data+0xf4003468>
    3494:	1017883a 	mov	r11,r2
    3498:	1815883a 	mov	r10,r3
    349c:	d9000e17 	ldw	r4,56(sp)
    34a0:	a80b883a 	mov	r5,r21
    34a4:	580d883a 	mov	r6,r11
    34a8:	500f883a 	mov	r7,r10
    34ac:	000b2140 	call	b214 <__divdf3>
    34b0:	1029883a 	mov	r20,r2
    34b4:	182b883a 	mov	r21,r3
    34b8:	d9800d17 	ldw	r6,52(sp)
    34bc:	30000626 	beq	r6,zero,34d8 <_dtoa_r+0x478>
    34c0:	a009883a 	mov	r4,r20
    34c4:	a80b883a 	mov	r5,r21
    34c8:	000d883a 	mov	r6,zero
    34cc:	01cffc34 	movhi	r7,16368
    34d0:	000bc440 	call	bc44 <__ledf2>
    34d4:	10043216 	blt	r2,zero,45a0 <_dtoa_r+0x1540>
    34d8:	8809883a 	mov	r4,r17
    34dc:	000cda00 	call	cda0 <__floatsidf>
    34e0:	1009883a 	mov	r4,r2
    34e4:	180b883a 	mov	r5,r3
    34e8:	a00d883a 	mov	r6,r20
    34ec:	a80f883a 	mov	r7,r21
    34f0:	000bd240 	call	bd24 <__muldf3>
    34f4:	000d883a 	mov	r6,zero
    34f8:	1009883a 	mov	r4,r2
    34fc:	180b883a 	mov	r5,r3
    3500:	01d00734 	movhi	r7,16412
    3504:	000a9780 	call	a978 <__adddf3>
    3508:	1023883a 	mov	r17,r2
    350c:	d9800617 	ldw	r6,24(sp)
    3510:	00bf3034 	movhi	r2,64704
    3514:	1885883a 	add	r2,r3,r2
    3518:	d8800e15 	stw	r2,56(sp)
    351c:	30032e26 	beq	r6,zero,41d8 <_dtoa_r+0x1178>
    3520:	d8c00517 	ldw	r3,20(sp)
    3524:	da800617 	ldw	r10,24(sp)
    3528:	d8c01215 	stw	r3,72(sp)
    352c:	d9000b17 	ldw	r4,44(sp)
    3530:	2003b026 	beq	r4,zero,43f4 <_dtoa_r+0x1394>
    3534:	50bfffc4 	addi	r2,r10,-1
    3538:	100490fa 	slli	r2,r2,3
    353c:	00c000b4 	movhi	r3,2
    3540:	18e5c704 	addi	r3,r3,-26852
    3544:	1885883a 	add	r2,r3,r2
    3548:	11800017 	ldw	r6,0(r2)
    354c:	11c00117 	ldw	r7,4(r2)
    3550:	d8800717 	ldw	r2,28(sp)
    3554:	0009883a 	mov	r4,zero
    3558:	014ff834 	movhi	r5,16352
    355c:	da801615 	stw	r10,88(sp)
    3560:	15c00044 	addi	r23,r2,1
    3564:	000b2140 	call	b214 <__divdf3>
    3568:	d9c00e17 	ldw	r7,56(sp)
    356c:	880d883a 	mov	r6,r17
    3570:	1009883a 	mov	r4,r2
    3574:	180b883a 	mov	r5,r3
    3578:	000c4480 	call	c448 <__subdf3>
    357c:	a80b883a 	mov	r5,r21
    3580:	a009883a 	mov	r4,r20
    3584:	d8c01015 	stw	r3,64(sp)
    3588:	d8800e15 	stw	r2,56(sp)
    358c:	000cd180 	call	cd18 <__fixdfsi>
    3590:	1009883a 	mov	r4,r2
    3594:	d8801715 	stw	r2,92(sp)
    3598:	000cda00 	call	cda0 <__floatsidf>
    359c:	a009883a 	mov	r4,r20
    35a0:	a80b883a 	mov	r5,r21
    35a4:	100d883a 	mov	r6,r2
    35a8:	180f883a 	mov	r7,r3
    35ac:	000c4480 	call	c448 <__subdf3>
    35b0:	da001717 	ldw	r8,92(sp)
    35b4:	1829883a 	mov	r20,r3
    35b8:	d8c00717 	ldw	r3,28(sp)
    35bc:	d9000e17 	ldw	r4,56(sp)
    35c0:	d9401017 	ldw	r5,64(sp)
    35c4:	42000c04 	addi	r8,r8,48
    35c8:	1023883a 	mov	r17,r2
    35cc:	1a000005 	stb	r8,0(r3)
    35d0:	880d883a 	mov	r6,r17
    35d4:	a00f883a 	mov	r7,r20
    35d8:	402b883a 	mov	r21,r8
    35dc:	000bb640 	call	bb64 <__gedf2>
    35e0:	00844516 	blt	zero,r2,46f8 <_dtoa_r+0x1698>
    35e4:	0009883a 	mov	r4,zero
    35e8:	014ffc34 	movhi	r5,16368
    35ec:	880d883a 	mov	r6,r17
    35f0:	a00f883a 	mov	r7,r20
    35f4:	000c4480 	call	c448 <__subdf3>
    35f8:	d9000e17 	ldw	r4,56(sp)
    35fc:	d9401017 	ldw	r5,64(sp)
    3600:	100d883a 	mov	r6,r2
    3604:	180f883a 	mov	r7,r3
    3608:	000bb640 	call	bb64 <__gedf2>
    360c:	da801617 	ldw	r10,88(sp)
    3610:	00843616 	blt	zero,r2,46ec <_dtoa_r+0x168c>
    3614:	00800044 	movi	r2,1
    3618:	12806e0e 	bge	r2,r10,37d4 <_dtoa_r+0x774>
    361c:	d9000717 	ldw	r4,28(sp)
    3620:	dd801315 	stw	r22,76(sp)
    3624:	dc001115 	stw	r16,68(sp)
    3628:	2295883a 	add	r10,r4,r10
    362c:	dcc01415 	stw	r19,80(sp)
    3630:	502d883a 	mov	r22,r10
    3634:	dcc01017 	ldw	r19,64(sp)
    3638:	b821883a 	mov	r16,r23
    363c:	dc801015 	stw	r18,64(sp)
    3640:	dc800e17 	ldw	r18,56(sp)
    3644:	00000906 	br	366c <_dtoa_r+0x60c>
    3648:	000c4480 	call	c448 <__subdf3>
    364c:	1009883a 	mov	r4,r2
    3650:	180b883a 	mov	r5,r3
    3654:	900d883a 	mov	r6,r18
    3658:	980f883a 	mov	r7,r19
    365c:	000bc440 	call	bc44 <__ledf2>
    3660:	10040e16 	blt	r2,zero,469c <_dtoa_r+0x163c>
    3664:	b821883a 	mov	r16,r23
    3668:	bd841026 	beq	r23,r22,46ac <_dtoa_r+0x164c>
    366c:	9009883a 	mov	r4,r18
    3670:	980b883a 	mov	r5,r19
    3674:	000d883a 	mov	r6,zero
    3678:	01d00934 	movhi	r7,16420
    367c:	000bd240 	call	bd24 <__muldf3>
    3680:	000d883a 	mov	r6,zero
    3684:	01d00934 	movhi	r7,16420
    3688:	8809883a 	mov	r4,r17
    368c:	a00b883a 	mov	r5,r20
    3690:	1025883a 	mov	r18,r2
    3694:	1827883a 	mov	r19,r3
    3698:	000bd240 	call	bd24 <__muldf3>
    369c:	180b883a 	mov	r5,r3
    36a0:	1009883a 	mov	r4,r2
    36a4:	1823883a 	mov	r17,r3
    36a8:	1029883a 	mov	r20,r2
    36ac:	000cd180 	call	cd18 <__fixdfsi>
    36b0:	1009883a 	mov	r4,r2
    36b4:	102b883a 	mov	r21,r2
    36b8:	000cda00 	call	cda0 <__floatsidf>
    36bc:	a009883a 	mov	r4,r20
    36c0:	880b883a 	mov	r5,r17
    36c4:	100d883a 	mov	r6,r2
    36c8:	180f883a 	mov	r7,r3
    36cc:	000c4480 	call	c448 <__subdf3>
    36d0:	ad400c04 	addi	r21,r21,48
    36d4:	1009883a 	mov	r4,r2
    36d8:	180b883a 	mov	r5,r3
    36dc:	900d883a 	mov	r6,r18
    36e0:	980f883a 	mov	r7,r19
    36e4:	85400005 	stb	r21,0(r16)
    36e8:	1023883a 	mov	r17,r2
    36ec:	1829883a 	mov	r20,r3
    36f0:	000bc440 	call	bc44 <__ledf2>
    36f4:	bdc00044 	addi	r23,r23,1
    36f8:	0009883a 	mov	r4,zero
    36fc:	014ffc34 	movhi	r5,16368
    3700:	880d883a 	mov	r6,r17
    3704:	a00f883a 	mov	r7,r20
    3708:	103fcf0e 	bge	r2,zero,3648 <__alt_mem_Flash_flash_data+0xf4003648>
    370c:	d9801217 	ldw	r6,72(sp)
    3710:	dc001117 	ldw	r16,68(sp)
    3714:	d9800515 	stw	r6,20(sp)
    3718:	8009883a 	mov	r4,r16
    371c:	e00b883a 	mov	r5,fp
    3720:	00061840 	call	6184 <_Bfree>
    3724:	d8c00517 	ldw	r3,20(sp)
    3728:	d9002317 	ldw	r4,140(sp)
    372c:	d9802517 	ldw	r6,148(sp)
    3730:	b8000005 	stb	zero,0(r23)
    3734:	18800044 	addi	r2,r3,1
    3738:	20800015 	stw	r2,0(r4)
    373c:	30027226 	beq	r6,zero,4108 <_dtoa_r+0x10a8>
    3740:	35c00015 	stw	r23,0(r6)
    3744:	d8800717 	ldw	r2,28(sp)
    3748:	003e7406 	br	311c <__alt_mem_Flash_flash_data+0xf400311c>
    374c:	00800434 	movhi	r2,16
    3750:	10bfffc4 	addi	r2,r2,-1
    3754:	a8aa703a 	and	r21,r21,r2
    3758:	a83e801e 	bne	r21,zero,315c <__alt_mem_Flash_flash_data+0xf400315c>
    375c:	008000b4 	movhi	r2,2
    3760:	10a5a804 	addi	r2,r2,-26976
    3764:	003e7f06 	br	3164 <__alt_mem_Flash_flash_data+0xf4003164>
    3768:	10c00204 	addi	r3,r2,8
    376c:	003e8206 	br	3178 <__alt_mem_Flash_flash_data+0xf4003178>
    3770:	01400434 	movhi	r5,16
    3774:	297fffc4 	addi	r5,r5,-1
    3778:	994a703a 	and	r5,r19,r5
    377c:	9009883a 	mov	r4,r18
    3780:	8c7f0044 	addi	r17,r17,-1023
    3784:	294ffc34 	orhi	r5,r5,16368
    3788:	dd000217 	ldw	r20,8(sp)
    378c:	d8000f15 	stw	zero,60(sp)
    3790:	003e9f06 	br	3210 <__alt_mem_Flash_flash_data+0xf4003210>
    3794:	008000b4 	movhi	r2,2
    3798:	10a59f04 	addi	r2,r2,-27012
    379c:	003e5f06 	br	311c <__alt_mem_Flash_flash_data+0xf400311c>
    37a0:	80001115 	stw	zero,68(r16)
    37a4:	8009883a 	mov	r4,r16
    37a8:	000b883a 	mov	r5,zero
    37ac:	00060dc0 	call	60dc <_Balloc>
    37b0:	01bfffc4 	movi	r6,-1
    37b4:	d8800715 	stw	r2,28(sp)
    37b8:	80801015 	stw	r2,64(r16)
    37bc:	00800044 	movi	r2,1
    37c0:	d9800c15 	stw	r6,48(sp)
    37c4:	d8800b15 	stw	r2,44(sp)
    37c8:	d9800615 	stw	r6,24(sp)
    37cc:	d8002215 	stw	zero,136(sp)
    37d0:	d8000315 	stw	zero,12(sp)
    37d4:	d8800117 	ldw	r2,4(sp)
    37d8:	10008e16 	blt	r2,zero,3a14 <_dtoa_r+0x9b4>
    37dc:	d9000517 	ldw	r4,20(sp)
    37e0:	00c00384 	movi	r3,14
    37e4:	19008b16 	blt	r3,r4,3a14 <_dtoa_r+0x9b4>
    37e8:	200490fa 	slli	r2,r4,3
    37ec:	00c000b4 	movhi	r3,2
    37f0:	d9802217 	ldw	r6,136(sp)
    37f4:	18e5c704 	addi	r3,r3,-26852
    37f8:	1885883a 	add	r2,r3,r2
    37fc:	14400017 	ldw	r17,0(r2)
    3800:	15000117 	ldw	r20,4(r2)
    3804:	3001c716 	blt	r6,zero,3f24 <_dtoa_r+0xec4>
    3808:	880d883a 	mov	r6,r17
    380c:	a00f883a 	mov	r7,r20
    3810:	9009883a 	mov	r4,r18
    3814:	980b883a 	mov	r5,r19
    3818:	000b2140 	call	b214 <__divdf3>
    381c:	180b883a 	mov	r5,r3
    3820:	1009883a 	mov	r4,r2
    3824:	000cd180 	call	cd18 <__fixdfsi>
    3828:	1009883a 	mov	r4,r2
    382c:	102d883a 	mov	r22,r2
    3830:	000cda00 	call	cda0 <__floatsidf>
    3834:	1009883a 	mov	r4,r2
    3838:	180b883a 	mov	r5,r3
    383c:	880d883a 	mov	r6,r17
    3840:	a00f883a 	mov	r7,r20
    3844:	000bd240 	call	bd24 <__muldf3>
    3848:	9009883a 	mov	r4,r18
    384c:	980b883a 	mov	r5,r19
    3850:	100d883a 	mov	r6,r2
    3854:	180f883a 	mov	r7,r3
    3858:	000c4480 	call	c448 <__subdf3>
    385c:	d9000717 	ldw	r4,28(sp)
    3860:	d9800617 	ldw	r6,24(sp)
    3864:	180b883a 	mov	r5,r3
    3868:	b0c00c04 	addi	r3,r22,48
    386c:	20c00005 	stb	r3,0(r4)
    3870:	25c00044 	addi	r23,r4,1
    3874:	01000044 	movi	r4,1
    3878:	1011883a 	mov	r8,r2
    387c:	2807883a 	mov	r3,r5
    3880:	31003d26 	beq	r6,r4,3978 <_dtoa_r+0x918>
    3884:	000d883a 	mov	r6,zero
    3888:	01d00934 	movhi	r7,16420
    388c:	1009883a 	mov	r4,r2
    3890:	000bd240 	call	bd24 <__muldf3>
    3894:	1009883a 	mov	r4,r2
    3898:	180b883a 	mov	r5,r3
    389c:	000d883a 	mov	r6,zero
    38a0:	000f883a 	mov	r7,zero
    38a4:	1027883a 	mov	r19,r2
    38a8:	182b883a 	mov	r21,r3
    38ac:	000bae00 	call	bae0 <__eqdf2>
    38b0:	103f9926 	beq	r2,zero,3718 <__alt_mem_Flash_flash_data+0xf4003718>
    38b4:	d8c00617 	ldw	r3,24(sp)
    38b8:	d9000717 	ldw	r4,28(sp)
    38bc:	b825883a 	mov	r18,r23
    38c0:	18bfffc4 	addi	r2,r3,-1
    38c4:	20ad883a 	add	r22,r4,r2
    38c8:	dc000315 	stw	r16,12(sp)
    38cc:	00000a06 	br	38f8 <_dtoa_r+0x898>
    38d0:	000bd240 	call	bd24 <__muldf3>
    38d4:	1009883a 	mov	r4,r2
    38d8:	180b883a 	mov	r5,r3
    38dc:	000d883a 	mov	r6,zero
    38e0:	000f883a 	mov	r7,zero
    38e4:	1027883a 	mov	r19,r2
    38e8:	182b883a 	mov	r21,r3
    38ec:	b825883a 	mov	r18,r23
    38f0:	000bae00 	call	bae0 <__eqdf2>
    38f4:	10022626 	beq	r2,zero,4190 <_dtoa_r+0x1130>
    38f8:	880d883a 	mov	r6,r17
    38fc:	a00f883a 	mov	r7,r20
    3900:	9809883a 	mov	r4,r19
    3904:	a80b883a 	mov	r5,r21
    3908:	000b2140 	call	b214 <__divdf3>
    390c:	180b883a 	mov	r5,r3
    3910:	1009883a 	mov	r4,r2
    3914:	000cd180 	call	cd18 <__fixdfsi>
    3918:	1009883a 	mov	r4,r2
    391c:	1021883a 	mov	r16,r2
    3920:	000cda00 	call	cda0 <__floatsidf>
    3924:	1009883a 	mov	r4,r2
    3928:	180b883a 	mov	r5,r3
    392c:	880d883a 	mov	r6,r17
    3930:	a00f883a 	mov	r7,r20
    3934:	000bd240 	call	bd24 <__muldf3>
    3938:	9809883a 	mov	r4,r19
    393c:	a80b883a 	mov	r5,r21
    3940:	100d883a 	mov	r6,r2
    3944:	180f883a 	mov	r7,r3
    3948:	000c4480 	call	c448 <__subdf3>
    394c:	82000c04 	addi	r8,r16,48
    3950:	92000005 	stb	r8,0(r18)
    3954:	1009883a 	mov	r4,r2
    3958:	180b883a 	mov	r5,r3
    395c:	000d883a 	mov	r6,zero
    3960:	01d00934 	movhi	r7,16420
    3964:	1011883a 	mov	r8,r2
    3968:	bdc00044 	addi	r23,r23,1
    396c:	95bfd81e 	bne	r18,r22,38d0 <__alt_mem_Flash_flash_data+0xf40038d0>
    3970:	802d883a 	mov	r22,r16
    3974:	dc000317 	ldw	r16,12(sp)
    3978:	4009883a 	mov	r4,r8
    397c:	180b883a 	mov	r5,r3
    3980:	400d883a 	mov	r6,r8
    3984:	180f883a 	mov	r7,r3
    3988:	000a9780 	call	a978 <__adddf3>
    398c:	8809883a 	mov	r4,r17
    3990:	a00b883a 	mov	r5,r20
    3994:	100d883a 	mov	r6,r2
    3998:	180f883a 	mov	r7,r3
    399c:	1027883a 	mov	r19,r2
    39a0:	1825883a 	mov	r18,r3
    39a4:	000bc440 	call	bc44 <__ledf2>
    39a8:	10000816 	blt	r2,zero,39cc <_dtoa_r+0x96c>
    39ac:	8809883a 	mov	r4,r17
    39b0:	a00b883a 	mov	r5,r20
    39b4:	980d883a 	mov	r6,r19
    39b8:	900f883a 	mov	r7,r18
    39bc:	000bae00 	call	bae0 <__eqdf2>
    39c0:	103f551e 	bne	r2,zero,3718 <__alt_mem_Flash_flash_data+0xf4003718>
    39c4:	b580004c 	andi	r22,r22,1
    39c8:	b03f5326 	beq	r22,zero,3718 <__alt_mem_Flash_flash_data+0xf4003718>
    39cc:	bd7fffc3 	ldbu	r21,-1(r23)
    39d0:	b8bfffc4 	addi	r2,r23,-1
    39d4:	1007883a 	mov	r3,r2
    39d8:	01400e44 	movi	r5,57
    39dc:	d9800717 	ldw	r6,28(sp)
    39e0:	00000506 	br	39f8 <_dtoa_r+0x998>
    39e4:	18ffffc4 	addi	r3,r3,-1
    39e8:	30825e26 	beq	r6,r2,4364 <_dtoa_r+0x1304>
    39ec:	1d400003 	ldbu	r21,0(r3)
    39f0:	102f883a 	mov	r23,r2
    39f4:	10bfffc4 	addi	r2,r2,-1
    39f8:	a9003fcc 	andi	r4,r21,255
    39fc:	2100201c 	xori	r4,r4,128
    3a00:	213fe004 	addi	r4,r4,-128
    3a04:	217ff726 	beq	r4,r5,39e4 <__alt_mem_Flash_flash_data+0xf40039e4>
    3a08:	aa000044 	addi	r8,r21,1
    3a0c:	12000005 	stb	r8,0(r2)
    3a10:	003f4106 	br	3718 <__alt_mem_Flash_flash_data+0xf4003718>
    3a14:	d8c00b17 	ldw	r3,44(sp)
    3a18:	18006726 	beq	r3,zero,3bb8 <_dtoa_r+0xb58>
    3a1c:	d9000317 	ldw	r4,12(sp)
    3a20:	00c00044 	movi	r3,1
    3a24:	19016a0e 	bge	r3,r4,3fd0 <_dtoa_r+0xf70>
    3a28:	d8800617 	ldw	r2,24(sp)
    3a2c:	d8c00917 	ldw	r3,36(sp)
    3a30:	157fffc4 	addi	r21,r2,-1
    3a34:	1d420716 	blt	r3,r21,4254 <_dtoa_r+0x11f4>
    3a38:	1d6bc83a 	sub	r21,r3,r21
    3a3c:	d8800617 	ldw	r2,24(sp)
    3a40:	1002c716 	blt	r2,zero,4560 <_dtoa_r+0x1500>
    3a44:	dd000817 	ldw	r20,32(sp)
    3a48:	d8800617 	ldw	r2,24(sp)
    3a4c:	d9800817 	ldw	r6,32(sp)
    3a50:	8009883a 	mov	r4,r16
    3a54:	01400044 	movi	r5,1
    3a58:	308d883a 	add	r6,r6,r2
    3a5c:	d9800815 	stw	r6,32(sp)
    3a60:	b0ad883a 	add	r22,r22,r2
    3a64:	00064e80 	call	64e8 <__i2b>
    3a68:	1023883a 	mov	r17,r2
    3a6c:	a0000826 	beq	r20,zero,3a90 <_dtoa_r+0xa30>
    3a70:	0580070e 	bge	zero,r22,3a90 <_dtoa_r+0xa30>
    3a74:	b005883a 	mov	r2,r22
    3a78:	a5812016 	blt	r20,r22,3efc <_dtoa_r+0xe9c>
    3a7c:	d8c00817 	ldw	r3,32(sp)
    3a80:	a0a9c83a 	sub	r20,r20,r2
    3a84:	b0adc83a 	sub	r22,r22,r2
    3a88:	1887c83a 	sub	r3,r3,r2
    3a8c:	d8c00815 	stw	r3,32(sp)
    3a90:	d9000917 	ldw	r4,36(sp)
    3a94:	0100140e 	bge	zero,r4,3ae8 <_dtoa_r+0xa88>
    3a98:	d9800b17 	ldw	r6,44(sp)
    3a9c:	3001e526 	beq	r6,zero,4234 <_dtoa_r+0x11d4>
    3aa0:	05400e0e 	bge	zero,r21,3adc <_dtoa_r+0xa7c>
    3aa4:	880b883a 	mov	r5,r17
    3aa8:	8009883a 	mov	r4,r16
    3aac:	a80d883a 	mov	r6,r21
    3ab0:	00067200 	call	6720 <__pow5mult>
    3ab4:	e00d883a 	mov	r6,fp
    3ab8:	8009883a 	mov	r4,r16
    3abc:	100b883a 	mov	r5,r2
    3ac0:	1023883a 	mov	r17,r2
    3ac4:	00065240 	call	6524 <__multiply>
    3ac8:	102f883a 	mov	r23,r2
    3acc:	e00b883a 	mov	r5,fp
    3ad0:	8009883a 	mov	r4,r16
    3ad4:	00061840 	call	6184 <_Bfree>
    3ad8:	b839883a 	mov	fp,r23
    3adc:	d8800917 	ldw	r2,36(sp)
    3ae0:	154dc83a 	sub	r6,r2,r21
    3ae4:	3001281e 	bne	r6,zero,3f88 <_dtoa_r+0xf28>
    3ae8:	05c00044 	movi	r23,1
    3aec:	8009883a 	mov	r4,r16
    3af0:	b80b883a 	mov	r5,r23
    3af4:	00064e80 	call	64e8 <__i2b>
    3af8:	d8c00a17 	ldw	r3,40(sp)
    3afc:	102b883a 	mov	r21,r2
    3b00:	00c0310e 	bge	zero,r3,3bc8 <_dtoa_r+0xb68>
    3b04:	8009883a 	mov	r4,r16
    3b08:	100b883a 	mov	r5,r2
    3b0c:	180d883a 	mov	r6,r3
    3b10:	00067200 	call	6720 <__pow5mult>
    3b14:	d9000317 	ldw	r4,12(sp)
    3b18:	102b883a 	mov	r21,r2
    3b1c:	b9011f0e 	bge	r23,r4,3f9c <_dtoa_r+0xf3c>
    3b20:	0027883a 	mov	r19,zero
    3b24:	a8800417 	ldw	r2,16(r21)
    3b28:	10800104 	addi	r2,r2,4
    3b2c:	1085883a 	add	r2,r2,r2
    3b30:	1085883a 	add	r2,r2,r2
    3b34:	a885883a 	add	r2,r21,r2
    3b38:	11000017 	ldw	r4,0(r2)
    3b3c:	00063d00 	call	63d0 <__hi0bits>
    3b40:	00c00804 	movi	r3,32
    3b44:	1885c83a 	sub	r2,r3,r2
    3b48:	00002506 	br	3be0 <_dtoa_r+0xb80>
    3b4c:	01800044 	movi	r6,1
    3b50:	d9800d15 	stw	r6,52(sp)
    3b54:	003dec06 	br	3308 <__alt_mem_Flash_flash_data+0xf4003308>
    3b58:	d8c00817 	ldw	r3,32(sp)
    3b5c:	d9000517 	ldw	r4,20(sp)
    3b60:	d8000a15 	stw	zero,40(sp)
    3b64:	1907c83a 	sub	r3,r3,r4
    3b68:	010dc83a 	sub	r6,zero,r4
    3b6c:	d8c00815 	stw	r3,32(sp)
    3b70:	d9800915 	stw	r6,36(sp)
    3b74:	003ded06 	br	332c <__alt_mem_Flash_flash_data+0xf400332c>
    3b78:	05adc83a 	sub	r22,zero,r22
    3b7c:	dd800815 	stw	r22,32(sp)
    3b80:	002d883a 	mov	r22,zero
    3b84:	003de406 	br	3318 <__alt_mem_Flash_flash_data+0xf4003318>
    3b88:	d9000517 	ldw	r4,20(sp)
    3b8c:	000cda00 	call	cda0 <__floatsidf>
    3b90:	1009883a 	mov	r4,r2
    3b94:	180b883a 	mov	r5,r3
    3b98:	b00d883a 	mov	r6,r22
    3b9c:	a80f883a 	mov	r7,r21
    3ba0:	000bae00 	call	bae0 <__eqdf2>
    3ba4:	103dc726 	beq	r2,zero,32c4 <__alt_mem_Flash_flash_data+0xf40032c4>
    3ba8:	d8800517 	ldw	r2,20(sp)
    3bac:	10bfffc4 	addi	r2,r2,-1
    3bb0:	d8800515 	stw	r2,20(sp)
    3bb4:	003dc306 	br	32c4 <__alt_mem_Flash_flash_data+0xf40032c4>
    3bb8:	dd400917 	ldw	r21,36(sp)
    3bbc:	dd000817 	ldw	r20,32(sp)
    3bc0:	0023883a 	mov	r17,zero
    3bc4:	003fa906 	br	3a6c <__alt_mem_Flash_flash_data+0xf4003a6c>
    3bc8:	d9800317 	ldw	r6,12(sp)
    3bcc:	b981670e 	bge	r23,r6,416c <_dtoa_r+0x110c>
    3bd0:	0027883a 	mov	r19,zero
    3bd4:	d8c00a17 	ldw	r3,40(sp)
    3bd8:	183fd21e 	bne	r3,zero,3b24 <__alt_mem_Flash_flash_data+0xf4003b24>
    3bdc:	00800044 	movi	r2,1
    3be0:	1585883a 	add	r2,r2,r22
    3be4:	108007cc 	andi	r2,r2,31
    3be8:	10005f26 	beq	r2,zero,3d68 <_dtoa_r+0xd08>
    3bec:	00c00804 	movi	r3,32
    3bf0:	1887c83a 	sub	r3,r3,r2
    3bf4:	01000104 	movi	r4,4
    3bf8:	20c2dd0e 	bge	r4,r3,4770 <_dtoa_r+0x1710>
    3bfc:	d9000817 	ldw	r4,32(sp)
    3c00:	00c00704 	movi	r3,28
    3c04:	1885c83a 	sub	r2,r3,r2
    3c08:	2089883a 	add	r4,r4,r2
    3c0c:	d9000815 	stw	r4,32(sp)
    3c10:	a0a9883a 	add	r20,r20,r2
    3c14:	b0ad883a 	add	r22,r22,r2
    3c18:	d8800817 	ldw	r2,32(sp)
    3c1c:	0080050e 	bge	zero,r2,3c34 <_dtoa_r+0xbd4>
    3c20:	e00b883a 	mov	r5,fp
    3c24:	8009883a 	mov	r4,r16
    3c28:	100d883a 	mov	r6,r2
    3c2c:	00068600 	call	6860 <__lshift>
    3c30:	1039883a 	mov	fp,r2
    3c34:	0580050e 	bge	zero,r22,3c4c <_dtoa_r+0xbec>
    3c38:	a80b883a 	mov	r5,r21
    3c3c:	8009883a 	mov	r4,r16
    3c40:	b00d883a 	mov	r6,r22
    3c44:	00068600 	call	6860 <__lshift>
    3c48:	102b883a 	mov	r21,r2
    3c4c:	d8c00d17 	ldw	r3,52(sp)
    3c50:	1801161e 	bne	r3,zero,40ac <_dtoa_r+0x104c>
    3c54:	d8c00617 	ldw	r3,24(sp)
    3c58:	00c12d0e 	bge	zero,r3,4110 <_dtoa_r+0x10b0>
    3c5c:	d8c00b17 	ldw	r3,44(sp)
    3c60:	1800571e 	bne	r3,zero,3dc0 <_dtoa_r+0xd60>
    3c64:	dc800717 	ldw	r18,28(sp)
    3c68:	dcc00617 	ldw	r19,24(sp)
    3c6c:	9029883a 	mov	r20,r18
    3c70:	00000206 	br	3c7c <_dtoa_r+0xc1c>
    3c74:	00061ac0 	call	61ac <__multadd>
    3c78:	1039883a 	mov	fp,r2
    3c7c:	e009883a 	mov	r4,fp
    3c80:	a80b883a 	mov	r5,r21
    3c84:	0002e600 	call	2e60 <quorem>
    3c88:	10800c04 	addi	r2,r2,48
    3c8c:	90800005 	stb	r2,0(r18)
    3c90:	94800044 	addi	r18,r18,1
    3c94:	9507c83a 	sub	r3,r18,r20
    3c98:	8009883a 	mov	r4,r16
    3c9c:	e00b883a 	mov	r5,fp
    3ca0:	01800284 	movi	r6,10
    3ca4:	000f883a 	mov	r7,zero
    3ca8:	1cfff216 	blt	r3,r19,3c74 <__alt_mem_Flash_flash_data+0xf4003c74>
    3cac:	1011883a 	mov	r8,r2
    3cb0:	d8800617 	ldw	r2,24(sp)
    3cb4:	00822e0e 	bge	zero,r2,4570 <_dtoa_r+0x1510>
    3cb8:	d9000717 	ldw	r4,28(sp)
    3cbc:	0025883a 	mov	r18,zero
    3cc0:	20af883a 	add	r23,r4,r2
    3cc4:	e00b883a 	mov	r5,fp
    3cc8:	01800044 	movi	r6,1
    3ccc:	8009883a 	mov	r4,r16
    3cd0:	da001715 	stw	r8,92(sp)
    3cd4:	00068600 	call	6860 <__lshift>
    3cd8:	1009883a 	mov	r4,r2
    3cdc:	a80b883a 	mov	r5,r21
    3ce0:	1039883a 	mov	fp,r2
    3ce4:	00069b00 	call	69b0 <__mcmp>
    3ce8:	da001717 	ldw	r8,92(sp)
    3cec:	00816e0e 	bge	zero,r2,42a8 <_dtoa_r+0x1248>
    3cf0:	b93fffc3 	ldbu	r4,-1(r23)
    3cf4:	b8bfffc4 	addi	r2,r23,-1
    3cf8:	1007883a 	mov	r3,r2
    3cfc:	01800e44 	movi	r6,57
    3d00:	d9c00717 	ldw	r7,28(sp)
    3d04:	00000506 	br	3d1c <_dtoa_r+0xcbc>
    3d08:	18ffffc4 	addi	r3,r3,-1
    3d0c:	38811926 	beq	r7,r2,4174 <_dtoa_r+0x1114>
    3d10:	19000003 	ldbu	r4,0(r3)
    3d14:	102f883a 	mov	r23,r2
    3d18:	10bfffc4 	addi	r2,r2,-1
    3d1c:	21403fcc 	andi	r5,r4,255
    3d20:	2940201c 	xori	r5,r5,128
    3d24:	297fe004 	addi	r5,r5,-128
    3d28:	29bff726 	beq	r5,r6,3d08 <__alt_mem_Flash_flash_data+0xf4003d08>
    3d2c:	21000044 	addi	r4,r4,1
    3d30:	11000005 	stb	r4,0(r2)
    3d34:	8009883a 	mov	r4,r16
    3d38:	a80b883a 	mov	r5,r21
    3d3c:	00061840 	call	6184 <_Bfree>
    3d40:	883e7526 	beq	r17,zero,3718 <__alt_mem_Flash_flash_data+0xf4003718>
    3d44:	90000426 	beq	r18,zero,3d58 <_dtoa_r+0xcf8>
    3d48:	94400326 	beq	r18,r17,3d58 <_dtoa_r+0xcf8>
    3d4c:	8009883a 	mov	r4,r16
    3d50:	900b883a 	mov	r5,r18
    3d54:	00061840 	call	6184 <_Bfree>
    3d58:	8009883a 	mov	r4,r16
    3d5c:	880b883a 	mov	r5,r17
    3d60:	00061840 	call	6184 <_Bfree>
    3d64:	003e6c06 	br	3718 <__alt_mem_Flash_flash_data+0xf4003718>
    3d68:	00800704 	movi	r2,28
    3d6c:	d9800817 	ldw	r6,32(sp)
    3d70:	a0a9883a 	add	r20,r20,r2
    3d74:	b0ad883a 	add	r22,r22,r2
    3d78:	308d883a 	add	r6,r6,r2
    3d7c:	d9800815 	stw	r6,32(sp)
    3d80:	003fa506 	br	3c18 <__alt_mem_Flash_flash_data+0xf4003c18>
    3d84:	013efb84 	movi	r4,-1042
    3d88:	246bc83a 	sub	r21,r4,r17
    3d8c:	9548983a 	sll	r4,r18,r21
    3d90:	003d1806 	br	31f4 <__alt_mem_Flash_flash_data+0xf40031f4>
    3d94:	d8000d15 	stw	zero,52(sp)
    3d98:	003d5b06 	br	3308 <__alt_mem_Flash_flash_data+0xf4003308>
    3d9c:	880b883a 	mov	r5,r17
    3da0:	8009883a 	mov	r4,r16
    3da4:	01800284 	movi	r6,10
    3da8:	000f883a 	mov	r7,zero
    3dac:	00061ac0 	call	61ac <__multadd>
    3db0:	1023883a 	mov	r17,r2
    3db4:	d8800c17 	ldw	r2,48(sp)
    3db8:	0082550e 	bge	zero,r2,4710 <_dtoa_r+0x16b0>
    3dbc:	d8800615 	stw	r2,24(sp)
    3dc0:	0500050e 	bge	zero,r20,3dd8 <_dtoa_r+0xd78>
    3dc4:	880b883a 	mov	r5,r17
    3dc8:	8009883a 	mov	r4,r16
    3dcc:	a00d883a 	mov	r6,r20
    3dd0:	00068600 	call	6860 <__lshift>
    3dd4:	1023883a 	mov	r17,r2
    3dd8:	98016a1e 	bne	r19,zero,4384 <_dtoa_r+0x1324>
    3ddc:	8829883a 	mov	r20,r17
    3de0:	d9000617 	ldw	r4,24(sp)
    3de4:	dcc00717 	ldw	r19,28(sp)
    3de8:	9480004c 	andi	r18,r18,1
    3dec:	20bfffc4 	addi	r2,r4,-1
    3df0:	9885883a 	add	r2,r19,r2
    3df4:	d8800415 	stw	r2,16(sp)
    3df8:	dc800615 	stw	r18,24(sp)
    3dfc:	e009883a 	mov	r4,fp
    3e00:	a80b883a 	mov	r5,r21
    3e04:	0002e600 	call	2e60 <quorem>
    3e08:	e009883a 	mov	r4,fp
    3e0c:	880b883a 	mov	r5,r17
    3e10:	102f883a 	mov	r23,r2
    3e14:	00069b00 	call	69b0 <__mcmp>
    3e18:	8009883a 	mov	r4,r16
    3e1c:	a80b883a 	mov	r5,r21
    3e20:	a00d883a 	mov	r6,r20
    3e24:	102d883a 	mov	r22,r2
    3e28:	0006a100 	call	6a10 <__mdiff>
    3e2c:	1007883a 	mov	r3,r2
    3e30:	10800317 	ldw	r2,12(r2)
    3e34:	bc800c04 	addi	r18,r23,48
    3e38:	1000971e 	bne	r2,zero,4098 <_dtoa_r+0x1038>
    3e3c:	180b883a 	mov	r5,r3
    3e40:	e009883a 	mov	r4,fp
    3e44:	d8c01515 	stw	r3,84(sp)
    3e48:	00069b00 	call	69b0 <__mcmp>
    3e4c:	d8c01517 	ldw	r3,84(sp)
    3e50:	8009883a 	mov	r4,r16
    3e54:	d8801515 	stw	r2,84(sp)
    3e58:	180b883a 	mov	r5,r3
    3e5c:	00061840 	call	6184 <_Bfree>
    3e60:	d8801517 	ldw	r2,84(sp)
    3e64:	1000041e 	bne	r2,zero,3e78 <_dtoa_r+0xe18>
    3e68:	d9800317 	ldw	r6,12(sp)
    3e6c:	3000021e 	bne	r6,zero,3e78 <_dtoa_r+0xe18>
    3e70:	d8c00617 	ldw	r3,24(sp)
    3e74:	18007626 	beq	r3,zero,4050 <_dtoa_r+0xff0>
    3e78:	b0005b16 	blt	r22,zero,3fe8 <_dtoa_r+0xf88>
    3e7c:	b000041e 	bne	r22,zero,3e90 <_dtoa_r+0xe30>
    3e80:	d9000317 	ldw	r4,12(sp)
    3e84:	2000021e 	bne	r4,zero,3e90 <_dtoa_r+0xe30>
    3e88:	d8c00617 	ldw	r3,24(sp)
    3e8c:	18005626 	beq	r3,zero,3fe8 <_dtoa_r+0xf88>
    3e90:	00814d16 	blt	zero,r2,43c8 <_dtoa_r+0x1368>
    3e94:	d8c00417 	ldw	r3,16(sp)
    3e98:	9d800044 	addi	r22,r19,1
    3e9c:	9c800005 	stb	r18,0(r19)
    3ea0:	b02f883a 	mov	r23,r22
    3ea4:	98c14c26 	beq	r19,r3,43d8 <_dtoa_r+0x1378>
    3ea8:	e00b883a 	mov	r5,fp
    3eac:	8009883a 	mov	r4,r16
    3eb0:	01800284 	movi	r6,10
    3eb4:	000f883a 	mov	r7,zero
    3eb8:	00061ac0 	call	61ac <__multadd>
    3ebc:	1039883a 	mov	fp,r2
    3ec0:	8d006d26 	beq	r17,r20,4078 <_dtoa_r+0x1018>
    3ec4:	880b883a 	mov	r5,r17
    3ec8:	01800284 	movi	r6,10
    3ecc:	000f883a 	mov	r7,zero
    3ed0:	8009883a 	mov	r4,r16
    3ed4:	00061ac0 	call	61ac <__multadd>
    3ed8:	a00b883a 	mov	r5,r20
    3edc:	8009883a 	mov	r4,r16
    3ee0:	01800284 	movi	r6,10
    3ee4:	000f883a 	mov	r7,zero
    3ee8:	1023883a 	mov	r17,r2
    3eec:	00061ac0 	call	61ac <__multadd>
    3ef0:	1029883a 	mov	r20,r2
    3ef4:	b027883a 	mov	r19,r22
    3ef8:	003fc006 	br	3dfc <__alt_mem_Flash_flash_data+0xf4003dfc>
    3efc:	a005883a 	mov	r2,r20
    3f00:	003ede06 	br	3a7c <__alt_mem_Flash_flash_data+0xf4003a7c>
    3f04:	01000044 	movi	r4,1
    3f08:	d9000b15 	stw	r4,44(sp)
    3f0c:	d9802217 	ldw	r6,136(sp)
    3f10:	0180dc0e 	bge	zero,r6,4284 <_dtoa_r+0x1224>
    3f14:	3023883a 	mov	r17,r6
    3f18:	d9800c15 	stw	r6,48(sp)
    3f1c:	d9800615 	stw	r6,24(sp)
    3f20:	003d1e06 	br	339c <__alt_mem_Flash_flash_data+0xf400339c>
    3f24:	d8800617 	ldw	r2,24(sp)
    3f28:	00be3716 	blt	zero,r2,3808 <__alt_mem_Flash_flash_data+0xf4003808>
    3f2c:	1000be1e 	bne	r2,zero,4228 <_dtoa_r+0x11c8>
    3f30:	8809883a 	mov	r4,r17
    3f34:	a00b883a 	mov	r5,r20
    3f38:	000d883a 	mov	r6,zero
    3f3c:	01d00534 	movhi	r7,16404
    3f40:	000bd240 	call	bd24 <__muldf3>
    3f44:	1009883a 	mov	r4,r2
    3f48:	180b883a 	mov	r5,r3
    3f4c:	900d883a 	mov	r6,r18
    3f50:	980f883a 	mov	r7,r19
    3f54:	000bb640 	call	bb64 <__gedf2>
    3f58:	002b883a 	mov	r21,zero
    3f5c:	0023883a 	mov	r17,zero
    3f60:	10007a16 	blt	r2,zero,414c <_dtoa_r+0x10ec>
    3f64:	d9002217 	ldw	r4,136(sp)
    3f68:	ddc00717 	ldw	r23,28(sp)
    3f6c:	0108303a 	nor	r4,zero,r4
    3f70:	d9000515 	stw	r4,20(sp)
    3f74:	8009883a 	mov	r4,r16
    3f78:	a80b883a 	mov	r5,r21
    3f7c:	00061840 	call	6184 <_Bfree>
    3f80:	883f751e 	bne	r17,zero,3d58 <__alt_mem_Flash_flash_data+0xf4003d58>
    3f84:	003de406 	br	3718 <__alt_mem_Flash_flash_data+0xf4003718>
    3f88:	e00b883a 	mov	r5,fp
    3f8c:	8009883a 	mov	r4,r16
    3f90:	00067200 	call	6720 <__pow5mult>
    3f94:	1039883a 	mov	fp,r2
    3f98:	003ed306 	br	3ae8 <__alt_mem_Flash_flash_data+0xf4003ae8>
    3f9c:	903ee01e 	bne	r18,zero,3b20 <__alt_mem_Flash_flash_data+0xf4003b20>
    3fa0:	00800434 	movhi	r2,16
    3fa4:	10bfffc4 	addi	r2,r2,-1
    3fa8:	9884703a 	and	r2,r19,r2
    3fac:	103f081e 	bne	r2,zero,3bd0 <__alt_mem_Flash_flash_data+0xf4003bd0>
    3fb0:	9cdffc2c 	andhi	r19,r19,32752
    3fb4:	983f0626 	beq	r19,zero,3bd0 <__alt_mem_Flash_flash_data+0xf4003bd0>
    3fb8:	d8800817 	ldw	r2,32(sp)
    3fbc:	b5800044 	addi	r22,r22,1
    3fc0:	04c00044 	movi	r19,1
    3fc4:	10800044 	addi	r2,r2,1
    3fc8:	d8800815 	stw	r2,32(sp)
    3fcc:	003f0106 	br	3bd4 <__alt_mem_Flash_flash_data+0xf4003bd4>
    3fd0:	d9800f17 	ldw	r6,60(sp)
    3fd4:	30016826 	beq	r6,zero,4578 <_dtoa_r+0x1518>
    3fd8:	10810cc4 	addi	r2,r2,1075
    3fdc:	dd400917 	ldw	r21,36(sp)
    3fe0:	dd000817 	ldw	r20,32(sp)
    3fe4:	003e9906 	br	3a4c <__alt_mem_Flash_flash_data+0xf4003a4c>
    3fe8:	9011883a 	mov	r8,r18
    3fec:	4007883a 	mov	r3,r8
    3ff0:	e02d883a 	mov	r22,fp
    3ff4:	0080100e 	bge	zero,r2,4038 <_dtoa_r+0xfd8>
    3ff8:	01800044 	movi	r6,1
    3ffc:	8009883a 	mov	r4,r16
    4000:	e00b883a 	mov	r5,fp
    4004:	da001515 	stw	r8,84(sp)
    4008:	da001715 	stw	r8,92(sp)
    400c:	00068600 	call	6860 <__lshift>
    4010:	1009883a 	mov	r4,r2
    4014:	a80b883a 	mov	r5,r21
    4018:	102d883a 	mov	r22,r2
    401c:	00069b00 	call	69b0 <__mcmp>
    4020:	d8c01517 	ldw	r3,84(sp)
    4024:	da001717 	ldw	r8,92(sp)
    4028:	0081a50e 	bge	zero,r2,46c0 <_dtoa_r+0x1660>
    402c:	00800e44 	movi	r2,57
    4030:	40817b26 	beq	r8,r2,4620 <_dtoa_r+0x15c0>
    4034:	40c00044 	addi	r3,r8,1
    4038:	8825883a 	mov	r18,r17
    403c:	9dc00044 	addi	r23,r19,1
    4040:	98c00005 	stb	r3,0(r19)
    4044:	a023883a 	mov	r17,r20
    4048:	b039883a 	mov	fp,r22
    404c:	003f3906 	br	3d34 <__alt_mem_Flash_flash_data+0xf4003d34>
    4050:	00800e44 	movi	r2,57
    4054:	9011883a 	mov	r8,r18
    4058:	90817226 	beq	r18,r2,4624 <_dtoa_r+0x15c4>
    405c:	0580010e 	bge	zero,r22,4064 <_dtoa_r+0x1004>
    4060:	ba000c44 	addi	r8,r23,49
    4064:	8825883a 	mov	r18,r17
    4068:	9dc00044 	addi	r23,r19,1
    406c:	9a000005 	stb	r8,0(r19)
    4070:	a023883a 	mov	r17,r20
    4074:	003f2f06 	br	3d34 <__alt_mem_Flash_flash_data+0xf4003d34>
    4078:	880b883a 	mov	r5,r17
    407c:	8009883a 	mov	r4,r16
    4080:	01800284 	movi	r6,10
    4084:	000f883a 	mov	r7,zero
    4088:	00061ac0 	call	61ac <__multadd>
    408c:	1023883a 	mov	r17,r2
    4090:	1029883a 	mov	r20,r2
    4094:	003f9706 	br	3ef4 <__alt_mem_Flash_flash_data+0xf4003ef4>
    4098:	8009883a 	mov	r4,r16
    409c:	180b883a 	mov	r5,r3
    40a0:	00061840 	call	6184 <_Bfree>
    40a4:	00800044 	movi	r2,1
    40a8:	003f7306 	br	3e78 <__alt_mem_Flash_flash_data+0xf4003e78>
    40ac:	e009883a 	mov	r4,fp
    40b0:	a80b883a 	mov	r5,r21
    40b4:	00069b00 	call	69b0 <__mcmp>
    40b8:	103ee60e 	bge	r2,zero,3c54 <__alt_mem_Flash_flash_data+0xf4003c54>
    40bc:	8009883a 	mov	r4,r16
    40c0:	e00b883a 	mov	r5,fp
    40c4:	01800284 	movi	r6,10
    40c8:	000f883a 	mov	r7,zero
    40cc:	00061ac0 	call	61ac <__multadd>
    40d0:	d9000517 	ldw	r4,20(sp)
    40d4:	d9800b17 	ldw	r6,44(sp)
    40d8:	1039883a 	mov	fp,r2
    40dc:	213fffc4 	addi	r4,r4,-1
    40e0:	d9000515 	stw	r4,20(sp)
    40e4:	303f2d1e 	bne	r6,zero,3d9c <__alt_mem_Flash_flash_data+0xf4003d9c>
    40e8:	d9000c17 	ldw	r4,48(sp)
    40ec:	0101780e 	bge	zero,r4,46d0 <_dtoa_r+0x1670>
    40f0:	d9000615 	stw	r4,24(sp)
    40f4:	003edb06 	br	3c64 <__alt_mem_Flash_flash_data+0xf4003c64>
    40f8:	00800084 	movi	r2,2
    40fc:	30818e1e 	bne	r6,r2,4738 <_dtoa_r+0x16d8>
    4100:	d8000b15 	stw	zero,44(sp)
    4104:	003f8106 	br	3f0c <__alt_mem_Flash_flash_data+0xf4003f0c>
    4108:	d8800717 	ldw	r2,28(sp)
    410c:	003c0306 	br	311c <__alt_mem_Flash_flash_data+0xf400311c>
    4110:	d9000317 	ldw	r4,12(sp)
    4114:	00800084 	movi	r2,2
    4118:	113ed00e 	bge	r2,r4,3c5c <__alt_mem_Flash_flash_data+0xf4003c5c>
    411c:	d8c00617 	ldw	r3,24(sp)
    4120:	183f901e 	bne	r3,zero,3f64 <__alt_mem_Flash_flash_data+0xf4003f64>
    4124:	a80b883a 	mov	r5,r21
    4128:	8009883a 	mov	r4,r16
    412c:	01800144 	movi	r6,5
    4130:	000f883a 	mov	r7,zero
    4134:	00061ac0 	call	61ac <__multadd>
    4138:	e009883a 	mov	r4,fp
    413c:	100b883a 	mov	r5,r2
    4140:	102b883a 	mov	r21,r2
    4144:	00069b00 	call	69b0 <__mcmp>
    4148:	00bf860e 	bge	zero,r2,3f64 <__alt_mem_Flash_flash_data+0xf4003f64>
    414c:	d9800717 	ldw	r6,28(sp)
    4150:	00800c44 	movi	r2,49
    4154:	30800005 	stb	r2,0(r6)
    4158:	d8800517 	ldw	r2,20(sp)
    415c:	35c00044 	addi	r23,r6,1
    4160:	10800044 	addi	r2,r2,1
    4164:	d8800515 	stw	r2,20(sp)
    4168:	003f8206 	br	3f74 <__alt_mem_Flash_flash_data+0xf4003f74>
    416c:	903e981e 	bne	r18,zero,3bd0 <__alt_mem_Flash_flash_data+0xf4003bd0>
    4170:	003f8b06 	br	3fa0 <__alt_mem_Flash_flash_data+0xf4003fa0>
    4174:	d9800517 	ldw	r6,20(sp)
    4178:	d8c00717 	ldw	r3,28(sp)
    417c:	00800c44 	movi	r2,49
    4180:	31800044 	addi	r6,r6,1
    4184:	d9800515 	stw	r6,20(sp)
    4188:	18800005 	stb	r2,0(r3)
    418c:	003ee906 	br	3d34 <__alt_mem_Flash_flash_data+0xf4003d34>
    4190:	dc000317 	ldw	r16,12(sp)
    4194:	003d6006 	br	3718 <__alt_mem_Flash_flash_data+0xf4003718>
    4198:	8809883a 	mov	r4,r17
    419c:	000cda00 	call	cda0 <__floatsidf>
    41a0:	a009883a 	mov	r4,r20
    41a4:	a80b883a 	mov	r5,r21
    41a8:	100d883a 	mov	r6,r2
    41ac:	180f883a 	mov	r7,r3
    41b0:	000bd240 	call	bd24 <__muldf3>
    41b4:	1009883a 	mov	r4,r2
    41b8:	180b883a 	mov	r5,r3
    41bc:	000d883a 	mov	r6,zero
    41c0:	01d00734 	movhi	r7,16412
    41c4:	000a9780 	call	a978 <__adddf3>
    41c8:	1023883a 	mov	r17,r2
    41cc:	00bf3034 	movhi	r2,64704
    41d0:	1885883a 	add	r2,r3,r2
    41d4:	d8800e15 	stw	r2,56(sp)
    41d8:	a009883a 	mov	r4,r20
    41dc:	a80b883a 	mov	r5,r21
    41e0:	000d883a 	mov	r6,zero
    41e4:	01d00534 	movhi	r7,16404
    41e8:	000c4480 	call	c448 <__subdf3>
    41ec:	d9c00e17 	ldw	r7,56(sp)
    41f0:	1009883a 	mov	r4,r2
    41f4:	180b883a 	mov	r5,r3
    41f8:	880d883a 	mov	r6,r17
    41fc:	102b883a 	mov	r21,r2
    4200:	1829883a 	mov	r20,r3
    4204:	000bb640 	call	bb64 <__gedf2>
    4208:	00807716 	blt	zero,r2,43e8 <_dtoa_r+0x1388>
    420c:	d8800e17 	ldw	r2,56(sp)
    4210:	a809883a 	mov	r4,r21
    4214:	a00b883a 	mov	r5,r20
    4218:	11e0003c 	xorhi	r7,r2,32768
    421c:	880d883a 	mov	r6,r17
    4220:	000bc440 	call	bc44 <__ledf2>
    4224:	103d6b0e 	bge	r2,zero,37d4 <__alt_mem_Flash_flash_data+0xf40037d4>
    4228:	002b883a 	mov	r21,zero
    422c:	0023883a 	mov	r17,zero
    4230:	003f4c06 	br	3f64 <__alt_mem_Flash_flash_data+0xf4003f64>
    4234:	d9800917 	ldw	r6,36(sp)
    4238:	e00b883a 	mov	r5,fp
    423c:	8009883a 	mov	r4,r16
    4240:	00067200 	call	6720 <__pow5mult>
    4244:	1039883a 	mov	fp,r2
    4248:	003e2706 	br	3ae8 <__alt_mem_Flash_flash_data+0xf4003ae8>
    424c:	d8000b15 	stw	zero,44(sp)
    4250:	003c4906 	br	3378 <__alt_mem_Flash_flash_data+0xf4003378>
    4254:	d9000917 	ldw	r4,36(sp)
    4258:	d9800a17 	ldw	r6,40(sp)
    425c:	dd400915 	stw	r21,36(sp)
    4260:	a905c83a 	sub	r2,r21,r4
    4264:	308d883a 	add	r6,r6,r2
    4268:	d9800a15 	stw	r6,40(sp)
    426c:	002b883a 	mov	r21,zero
    4270:	003df206 	br	3a3c <__alt_mem_Flash_flash_data+0xf4003a3c>
    4274:	dc800e15 	stw	r18,56(sp)
    4278:	982b883a 	mov	r21,r19
    427c:	04400084 	movi	r17,2
    4280:	003c7406 	br	3454 <__alt_mem_Flash_flash_data+0xf4003454>
    4284:	04400044 	movi	r17,1
    4288:	dc400c15 	stw	r17,48(sp)
    428c:	dc400615 	stw	r17,24(sp)
    4290:	dc402215 	stw	r17,136(sp)
    4294:	80001115 	stw	zero,68(r16)
    4298:	000b883a 	mov	r5,zero
    429c:	003c4a06 	br	33c8 <__alt_mem_Flash_flash_data+0xf40033c8>
    42a0:	3023883a 	mov	r17,r6
    42a4:	003ffb06 	br	4294 <__alt_mem_Flash_flash_data+0xf4004294>
    42a8:	1000021e 	bne	r2,zero,42b4 <_dtoa_r+0x1254>
    42ac:	4200004c 	andi	r8,r8,1
    42b0:	403e8f1e 	bne	r8,zero,3cf0 <__alt_mem_Flash_flash_data+0xf4003cf0>
    42b4:	01000c04 	movi	r4,48
    42b8:	00000106 	br	42c0 <_dtoa_r+0x1260>
    42bc:	102f883a 	mov	r23,r2
    42c0:	b8bfffc4 	addi	r2,r23,-1
    42c4:	10c00007 	ldb	r3,0(r2)
    42c8:	193ffc26 	beq	r3,r4,42bc <__alt_mem_Flash_flash_data+0xf40042bc>
    42cc:	003e9906 	br	3d34 <__alt_mem_Flash_flash_data+0xf4003d34>
    42d0:	d9000517 	ldw	r4,20(sp)
    42d4:	012fc83a 	sub	r23,zero,r4
    42d8:	b800ad26 	beq	r23,zero,4590 <_dtoa_r+0x1530>
    42dc:	b88003cc 	andi	r2,r23,15
    42e0:	100490fa 	slli	r2,r2,3
    42e4:	00c000b4 	movhi	r3,2
    42e8:	18e5c704 	addi	r3,r3,-26852
    42ec:	1885883a 	add	r2,r3,r2
    42f0:	11800017 	ldw	r6,0(r2)
    42f4:	11c00117 	ldw	r7,4(r2)
    42f8:	b82fd13a 	srai	r23,r23,4
    42fc:	9009883a 	mov	r4,r18
    4300:	980b883a 	mov	r5,r19
    4304:	000bd240 	call	bd24 <__muldf3>
    4308:	1029883a 	mov	r20,r2
    430c:	182b883a 	mov	r21,r3
    4310:	b800f426 	beq	r23,zero,46e4 <_dtoa_r+0x1684>
    4314:	020000b4 	movhi	r8,2
    4318:	4225bd04 	addi	r8,r8,-26892
    431c:	8029883a 	mov	r20,r16
    4320:	04400084 	movi	r17,2
    4324:	4021883a 	mov	r16,r8
    4328:	b980004c 	andi	r6,r23,1
    432c:	1009883a 	mov	r4,r2
    4330:	b82fd07a 	srai	r23,r23,1
    4334:	180b883a 	mov	r5,r3
    4338:	30000426 	beq	r6,zero,434c <_dtoa_r+0x12ec>
    433c:	81800017 	ldw	r6,0(r16)
    4340:	81c00117 	ldw	r7,4(r16)
    4344:	8c400044 	addi	r17,r17,1
    4348:	000bd240 	call	bd24 <__muldf3>
    434c:	84000204 	addi	r16,r16,8
    4350:	b83ff51e 	bne	r23,zero,4328 <__alt_mem_Flash_flash_data+0xf4004328>
    4354:	a021883a 	mov	r16,r20
    4358:	182b883a 	mov	r21,r3
    435c:	1029883a 	mov	r20,r2
    4360:	003c5506 	br	34b8 <__alt_mem_Flash_flash_data+0xf40034b8>
    4364:	d9800517 	ldw	r6,20(sp)
    4368:	d9000717 	ldw	r4,28(sp)
    436c:	00c00c04 	movi	r3,48
    4370:	31800044 	addi	r6,r6,1
    4374:	d9800515 	stw	r6,20(sp)
    4378:	20c00005 	stb	r3,0(r4)
    437c:	02000c44 	movi	r8,49
    4380:	003da206 	br	3a0c <__alt_mem_Flash_flash_data+0xf4003a0c>
    4384:	89400117 	ldw	r5,4(r17)
    4388:	8009883a 	mov	r4,r16
    438c:	00060dc0 	call	60dc <_Balloc>
    4390:	89800417 	ldw	r6,16(r17)
    4394:	11000304 	addi	r4,r2,12
    4398:	89400304 	addi	r5,r17,12
    439c:	31800084 	addi	r6,r6,2
    43a0:	318d883a 	add	r6,r6,r6
    43a4:	318d883a 	add	r6,r6,r6
    43a8:	1027883a 	mov	r19,r2
    43ac:	0005e800 	call	5e80 <memcpy>
    43b0:	8009883a 	mov	r4,r16
    43b4:	980b883a 	mov	r5,r19
    43b8:	01800044 	movi	r6,1
    43bc:	00068600 	call	6860 <__lshift>
    43c0:	1029883a 	mov	r20,r2
    43c4:	003e8606 	br	3de0 <__alt_mem_Flash_flash_data+0xf4003de0>
    43c8:	00800e44 	movi	r2,57
    43cc:	90809526 	beq	r18,r2,4624 <_dtoa_r+0x15c4>
    43d0:	92000044 	addi	r8,r18,1
    43d4:	003f2306 	br	4064 <__alt_mem_Flash_flash_data+0xf4004064>
    43d8:	9011883a 	mov	r8,r18
    43dc:	8825883a 	mov	r18,r17
    43e0:	a023883a 	mov	r17,r20
    43e4:	003e3706 	br	3cc4 <__alt_mem_Flash_flash_data+0xf4003cc4>
    43e8:	002b883a 	mov	r21,zero
    43ec:	0023883a 	mov	r17,zero
    43f0:	003f5606 	br	414c <__alt_mem_Flash_flash_data+0xf400414c>
    43f4:	51bfffc4 	addi	r6,r10,-1
    43f8:	300490fa 	slli	r2,r6,3
    43fc:	00c000b4 	movhi	r3,2
    4400:	18e5c704 	addi	r3,r3,-26852
    4404:	1885883a 	add	r2,r3,r2
    4408:	d9c00e17 	ldw	r7,56(sp)
    440c:	11000017 	ldw	r4,0(r2)
    4410:	11400117 	ldw	r5,4(r2)
    4414:	d8800717 	ldw	r2,28(sp)
    4418:	d9801015 	stw	r6,64(sp)
    441c:	880d883a 	mov	r6,r17
    4420:	da801615 	stw	r10,88(sp)
    4424:	15c00044 	addi	r23,r2,1
    4428:	000bd240 	call	bd24 <__muldf3>
    442c:	a80b883a 	mov	r5,r21
    4430:	a009883a 	mov	r4,r20
    4434:	d8c01115 	stw	r3,68(sp)
    4438:	d8800e15 	stw	r2,56(sp)
    443c:	000cd180 	call	cd18 <__fixdfsi>
    4440:	1009883a 	mov	r4,r2
    4444:	1023883a 	mov	r17,r2
    4448:	000cda00 	call	cda0 <__floatsidf>
    444c:	a009883a 	mov	r4,r20
    4450:	a80b883a 	mov	r5,r21
    4454:	100d883a 	mov	r6,r2
    4458:	180f883a 	mov	r7,r3
    445c:	000c4480 	call	c448 <__subdf3>
    4460:	1813883a 	mov	r9,r3
    4464:	d8c00717 	ldw	r3,28(sp)
    4468:	8c400c04 	addi	r17,r17,48
    446c:	1011883a 	mov	r8,r2
    4470:	1c400005 	stb	r17,0(r3)
    4474:	da801617 	ldw	r10,88(sp)
    4478:	00800044 	movi	r2,1
    447c:	50802326 	beq	r10,r2,450c <_dtoa_r+0x14ac>
    4480:	d8800717 	ldw	r2,28(sp)
    4484:	b82b883a 	mov	r21,r23
    4488:	dc001315 	stw	r16,76(sp)
    448c:	12a9883a 	add	r20,r2,r10
    4490:	4807883a 	mov	r3,r9
    4494:	4005883a 	mov	r2,r8
    4498:	dc801415 	stw	r18,80(sp)
    449c:	000d883a 	mov	r6,zero
    44a0:	01d00934 	movhi	r7,16420
    44a4:	1009883a 	mov	r4,r2
    44a8:	180b883a 	mov	r5,r3
    44ac:	000bd240 	call	bd24 <__muldf3>
    44b0:	180b883a 	mov	r5,r3
    44b4:	1009883a 	mov	r4,r2
    44b8:	1821883a 	mov	r16,r3
    44bc:	1025883a 	mov	r18,r2
    44c0:	000cd180 	call	cd18 <__fixdfsi>
    44c4:	1009883a 	mov	r4,r2
    44c8:	1023883a 	mov	r17,r2
    44cc:	000cda00 	call	cda0 <__floatsidf>
    44d0:	9009883a 	mov	r4,r18
    44d4:	800b883a 	mov	r5,r16
    44d8:	100d883a 	mov	r6,r2
    44dc:	180f883a 	mov	r7,r3
    44e0:	8c400c04 	addi	r17,r17,48
    44e4:	000c4480 	call	c448 <__subdf3>
    44e8:	ad400044 	addi	r21,r21,1
    44ec:	ac7fffc5 	stb	r17,-1(r21)
    44f0:	ad3fea1e 	bne	r21,r20,449c <__alt_mem_Flash_flash_data+0xf400449c>
    44f4:	1813883a 	mov	r9,r3
    44f8:	d8c01017 	ldw	r3,64(sp)
    44fc:	dc001317 	ldw	r16,76(sp)
    4500:	dc801417 	ldw	r18,80(sp)
    4504:	1011883a 	mov	r8,r2
    4508:	b8ef883a 	add	r23,r23,r3
    450c:	d9000e17 	ldw	r4,56(sp)
    4510:	d9401117 	ldw	r5,68(sp)
    4514:	000d883a 	mov	r6,zero
    4518:	01cff834 	movhi	r7,16352
    451c:	da001715 	stw	r8,92(sp)
    4520:	da401515 	stw	r9,84(sp)
    4524:	000a9780 	call	a978 <__adddf3>
    4528:	da001717 	ldw	r8,92(sp)
    452c:	da401517 	ldw	r9,84(sp)
    4530:	1009883a 	mov	r4,r2
    4534:	400d883a 	mov	r6,r8
    4538:	480f883a 	mov	r7,r9
    453c:	180b883a 	mov	r5,r3
    4540:	000bc440 	call	bc44 <__ledf2>
    4544:	da001717 	ldw	r8,92(sp)
    4548:	da401517 	ldw	r9,84(sp)
    454c:	10003b0e 	bge	r2,zero,463c <_dtoa_r+0x15dc>
    4550:	d9001217 	ldw	r4,72(sp)
    4554:	bd7fffc3 	ldbu	r21,-1(r23)
    4558:	d9000515 	stw	r4,20(sp)
    455c:	003d1c06 	br	39d0 <__alt_mem_Flash_flash_data+0xf40039d0>
    4560:	d8c00817 	ldw	r3,32(sp)
    4564:	18a9c83a 	sub	r20,r3,r2
    4568:	0005883a 	mov	r2,zero
    456c:	003d3706 	br	3a4c <__alt_mem_Flash_flash_data+0xf4003a4c>
    4570:	00800044 	movi	r2,1
    4574:	003dd006 	br	3cb8 <__alt_mem_Flash_flash_data+0xf4003cb8>
    4578:	d8c00217 	ldw	r3,8(sp)
    457c:	00800d84 	movi	r2,54
    4580:	dd400917 	ldw	r21,36(sp)
    4584:	10c5c83a 	sub	r2,r2,r3
    4588:	dd000817 	ldw	r20,32(sp)
    458c:	003d2f06 	br	3a4c <__alt_mem_Flash_flash_data+0xf4003a4c>
    4590:	9029883a 	mov	r20,r18
    4594:	982b883a 	mov	r21,r19
    4598:	04400084 	movi	r17,2
    459c:	003bc606 	br	34b8 <__alt_mem_Flash_flash_data+0xf40034b8>
    45a0:	d8800617 	ldw	r2,24(sp)
    45a4:	103efc26 	beq	r2,zero,4198 <__alt_mem_Flash_flash_data+0xf4004198>
    45a8:	d8c00c17 	ldw	r3,48(sp)
    45ac:	00fc890e 	bge	zero,r3,37d4 <__alt_mem_Flash_flash_data+0xf40037d4>
    45b0:	a80b883a 	mov	r5,r21
    45b4:	a009883a 	mov	r4,r20
    45b8:	000d883a 	mov	r6,zero
    45bc:	01d00934 	movhi	r7,16420
    45c0:	000bd240 	call	bd24 <__muldf3>
    45c4:	89000044 	addi	r4,r17,1
    45c8:	1029883a 	mov	r20,r2
    45cc:	182b883a 	mov	r21,r3
    45d0:	000cda00 	call	cda0 <__floatsidf>
    45d4:	a009883a 	mov	r4,r20
    45d8:	a80b883a 	mov	r5,r21
    45dc:	100d883a 	mov	r6,r2
    45e0:	180f883a 	mov	r7,r3
    45e4:	000bd240 	call	bd24 <__muldf3>
    45e8:	1009883a 	mov	r4,r2
    45ec:	180b883a 	mov	r5,r3
    45f0:	000d883a 	mov	r6,zero
    45f4:	01d00734 	movhi	r7,16412
    45f8:	000a9780 	call	a978 <__adddf3>
    45fc:	d9000517 	ldw	r4,20(sp)
    4600:	1023883a 	mov	r17,r2
    4604:	00bf3034 	movhi	r2,64704
    4608:	213fffc4 	addi	r4,r4,-1
    460c:	1885883a 	add	r2,r3,r2
    4610:	d9001215 	stw	r4,72(sp)
    4614:	d8800e15 	stw	r2,56(sp)
    4618:	da800c17 	ldw	r10,48(sp)
    461c:	003bc306 	br	352c <__alt_mem_Flash_flash_data+0xf400352c>
    4620:	b039883a 	mov	fp,r22
    4624:	01000e44 	movi	r4,57
    4628:	8825883a 	mov	r18,r17
    462c:	9dc00044 	addi	r23,r19,1
    4630:	99000005 	stb	r4,0(r19)
    4634:	a023883a 	mov	r17,r20
    4638:	003dae06 	br	3cf4 <__alt_mem_Flash_flash_data+0xf4003cf4>
    463c:	d9800e17 	ldw	r6,56(sp)
    4640:	d9c01117 	ldw	r7,68(sp)
    4644:	0009883a 	mov	r4,zero
    4648:	014ff834 	movhi	r5,16352
    464c:	da001715 	stw	r8,92(sp)
    4650:	da401515 	stw	r9,84(sp)
    4654:	000c4480 	call	c448 <__subdf3>
    4658:	da001717 	ldw	r8,92(sp)
    465c:	da401517 	ldw	r9,84(sp)
    4660:	1009883a 	mov	r4,r2
    4664:	180b883a 	mov	r5,r3
    4668:	400d883a 	mov	r6,r8
    466c:	480f883a 	mov	r7,r9
    4670:	000bb640 	call	bb64 <__gedf2>
    4674:	00bc570e 	bge	zero,r2,37d4 <__alt_mem_Flash_flash_data+0xf40037d4>
    4678:	01000c04 	movi	r4,48
    467c:	00000106 	br	4684 <_dtoa_r+0x1624>
    4680:	102f883a 	mov	r23,r2
    4684:	b8bfffc4 	addi	r2,r23,-1
    4688:	10c00007 	ldb	r3,0(r2)
    468c:	193ffc26 	beq	r3,r4,4680 <__alt_mem_Flash_flash_data+0xf4004680>
    4690:	d9801217 	ldw	r6,72(sp)
    4694:	d9800515 	stw	r6,20(sp)
    4698:	003c1f06 	br	3718 <__alt_mem_Flash_flash_data+0xf4003718>
    469c:	d8801217 	ldw	r2,72(sp)
    46a0:	dc001117 	ldw	r16,68(sp)
    46a4:	d8800515 	stw	r2,20(sp)
    46a8:	003cc906 	br	39d0 <__alt_mem_Flash_flash_data+0xf40039d0>
    46ac:	dd801317 	ldw	r22,76(sp)
    46b0:	dc001117 	ldw	r16,68(sp)
    46b4:	dcc01417 	ldw	r19,80(sp)
    46b8:	dc801017 	ldw	r18,64(sp)
    46bc:	003c4506 	br	37d4 <__alt_mem_Flash_flash_data+0xf40037d4>
    46c0:	103e5d1e 	bne	r2,zero,4038 <__alt_mem_Flash_flash_data+0xf4004038>
    46c4:	4080004c 	andi	r2,r8,1
    46c8:	103e5b26 	beq	r2,zero,4038 <__alt_mem_Flash_flash_data+0xf4004038>
    46cc:	003e5706 	br	402c <__alt_mem_Flash_flash_data+0xf400402c>
    46d0:	d8c00317 	ldw	r3,12(sp)
    46d4:	00800084 	movi	r2,2
    46d8:	10c00a16 	blt	r2,r3,4704 <_dtoa_r+0x16a4>
    46dc:	d9000c17 	ldw	r4,48(sp)
    46e0:	003e8306 	br	40f0 <__alt_mem_Flash_flash_data+0xf40040f0>
    46e4:	04400084 	movi	r17,2
    46e8:	003b7306 	br	34b8 <__alt_mem_Flash_flash_data+0xf40034b8>
    46ec:	d9801217 	ldw	r6,72(sp)
    46f0:	d9800515 	stw	r6,20(sp)
    46f4:	003cb606 	br	39d0 <__alt_mem_Flash_flash_data+0xf40039d0>
    46f8:	d9001217 	ldw	r4,72(sp)
    46fc:	d9000515 	stw	r4,20(sp)
    4700:	003c0506 	br	3718 <__alt_mem_Flash_flash_data+0xf4003718>
    4704:	d9800c17 	ldw	r6,48(sp)
    4708:	d9800615 	stw	r6,24(sp)
    470c:	003e8306 	br	411c <__alt_mem_Flash_flash_data+0xf400411c>
    4710:	d9800317 	ldw	r6,12(sp)
    4714:	00800084 	movi	r2,2
    4718:	11800216 	blt	r2,r6,4724 <_dtoa_r+0x16c4>
    471c:	d8800c17 	ldw	r2,48(sp)
    4720:	003da606 	br	3dbc <__alt_mem_Flash_flash_data+0xf4003dbc>
    4724:	d8800c17 	ldw	r2,48(sp)
    4728:	d8800615 	stw	r2,24(sp)
    472c:	003e7b06 	br	411c <__alt_mem_Flash_flash_data+0xf400411c>
    4730:	05000044 	movi	r20,1
    4734:	003b0506 	br	334c <__alt_mem_Flash_flash_data+0xf400334c>
    4738:	8009883a 	mov	r4,r16
    473c:	80001115 	stw	zero,68(r16)
    4740:	000b883a 	mov	r5,zero
    4744:	00060dc0 	call	60dc <_Balloc>
    4748:	d8800715 	stw	r2,28(sp)
    474c:	d8c00717 	ldw	r3,28(sp)
    4750:	00bfffc4 	movi	r2,-1
    4754:	01000044 	movi	r4,1
    4758:	d8800c15 	stw	r2,48(sp)
    475c:	80c01015 	stw	r3,64(r16)
    4760:	d9000b15 	stw	r4,44(sp)
    4764:	d8800615 	stw	r2,24(sp)
    4768:	d8002215 	stw	zero,136(sp)
    476c:	003c1906 	br	37d4 <__alt_mem_Flash_flash_data+0xf40037d4>
    4770:	193d2926 	beq	r3,r4,3c18 <__alt_mem_Flash_flash_data+0xf4003c18>
    4774:	00c00f04 	movi	r3,60
    4778:	1885c83a 	sub	r2,r3,r2
    477c:	003d7b06 	br	3d6c <__alt_mem_Flash_flash_data+0xf4003d6c>
    4780:	000b883a 	mov	r5,zero
    4784:	003b1006 	br	33c8 <__alt_mem_Flash_flash_data+0xf40033c8>

00004788 <__sflush_r>:
    4788:	2880030b 	ldhu	r2,12(r5)
    478c:	defffb04 	addi	sp,sp,-20
    4790:	dcc00315 	stw	r19,12(sp)
    4794:	dc400115 	stw	r17,4(sp)
    4798:	dfc00415 	stw	ra,16(sp)
    479c:	dc800215 	stw	r18,8(sp)
    47a0:	dc000015 	stw	r16,0(sp)
    47a4:	10c0020c 	andi	r3,r2,8
    47a8:	2823883a 	mov	r17,r5
    47ac:	2027883a 	mov	r19,r4
    47b0:	1800311e 	bne	r3,zero,4878 <__sflush_r+0xf0>
    47b4:	28c00117 	ldw	r3,4(r5)
    47b8:	10820014 	ori	r2,r2,2048
    47bc:	2880030d 	sth	r2,12(r5)
    47c0:	00c04b0e 	bge	zero,r3,48f0 <__sflush_r+0x168>
    47c4:	8a000a17 	ldw	r8,40(r17)
    47c8:	40002326 	beq	r8,zero,4858 <__sflush_r+0xd0>
    47cc:	9c000017 	ldw	r16,0(r19)
    47d0:	10c4000c 	andi	r3,r2,4096
    47d4:	98000015 	stw	zero,0(r19)
    47d8:	18004826 	beq	r3,zero,48fc <__sflush_r+0x174>
    47dc:	89801417 	ldw	r6,80(r17)
    47e0:	10c0010c 	andi	r3,r2,4
    47e4:	18000626 	beq	r3,zero,4800 <__sflush_r+0x78>
    47e8:	88c00117 	ldw	r3,4(r17)
    47ec:	88800c17 	ldw	r2,48(r17)
    47f0:	30cdc83a 	sub	r6,r6,r3
    47f4:	10000226 	beq	r2,zero,4800 <__sflush_r+0x78>
    47f8:	88800f17 	ldw	r2,60(r17)
    47fc:	308dc83a 	sub	r6,r6,r2
    4800:	89400717 	ldw	r5,28(r17)
    4804:	9809883a 	mov	r4,r19
    4808:	000f883a 	mov	r7,zero
    480c:	403ee83a 	callr	r8
    4810:	00ffffc4 	movi	r3,-1
    4814:	10c04426 	beq	r2,r3,4928 <__sflush_r+0x1a0>
    4818:	88c0030b 	ldhu	r3,12(r17)
    481c:	89000417 	ldw	r4,16(r17)
    4820:	88000115 	stw	zero,4(r17)
    4824:	197dffcc 	andi	r5,r3,63487
    4828:	8940030d 	sth	r5,12(r17)
    482c:	89000015 	stw	r4,0(r17)
    4830:	18c4000c 	andi	r3,r3,4096
    4834:	18002c1e 	bne	r3,zero,48e8 <__sflush_r+0x160>
    4838:	89400c17 	ldw	r5,48(r17)
    483c:	9c000015 	stw	r16,0(r19)
    4840:	28000526 	beq	r5,zero,4858 <__sflush_r+0xd0>
    4844:	88801004 	addi	r2,r17,64
    4848:	28800226 	beq	r5,r2,4854 <__sflush_r+0xcc>
    484c:	9809883a 	mov	r4,r19
    4850:	0004ee00 	call	4ee0 <_free_r>
    4854:	88000c15 	stw	zero,48(r17)
    4858:	0005883a 	mov	r2,zero
    485c:	dfc00417 	ldw	ra,16(sp)
    4860:	dcc00317 	ldw	r19,12(sp)
    4864:	dc800217 	ldw	r18,8(sp)
    4868:	dc400117 	ldw	r17,4(sp)
    486c:	dc000017 	ldw	r16,0(sp)
    4870:	dec00504 	addi	sp,sp,20
    4874:	f800283a 	ret
    4878:	2c800417 	ldw	r18,16(r5)
    487c:	903ff626 	beq	r18,zero,4858 <__alt_mem_Flash_flash_data+0xf4004858>
    4880:	2c000017 	ldw	r16,0(r5)
    4884:	108000cc 	andi	r2,r2,3
    4888:	2c800015 	stw	r18,0(r5)
    488c:	84a1c83a 	sub	r16,r16,r18
    4890:	1000131e 	bne	r2,zero,48e0 <__sflush_r+0x158>
    4894:	28800517 	ldw	r2,20(r5)
    4898:	88800215 	stw	r2,8(r17)
    489c:	04000316 	blt	zero,r16,48ac <__sflush_r+0x124>
    48a0:	003fed06 	br	4858 <__alt_mem_Flash_flash_data+0xf4004858>
    48a4:	90a5883a 	add	r18,r18,r2
    48a8:	043feb0e 	bge	zero,r16,4858 <__alt_mem_Flash_flash_data+0xf4004858>
    48ac:	88800917 	ldw	r2,36(r17)
    48b0:	89400717 	ldw	r5,28(r17)
    48b4:	800f883a 	mov	r7,r16
    48b8:	900d883a 	mov	r6,r18
    48bc:	9809883a 	mov	r4,r19
    48c0:	103ee83a 	callr	r2
    48c4:	80a1c83a 	sub	r16,r16,r2
    48c8:	00bff616 	blt	zero,r2,48a4 <__alt_mem_Flash_flash_data+0xf40048a4>
    48cc:	88c0030b 	ldhu	r3,12(r17)
    48d0:	00bfffc4 	movi	r2,-1
    48d4:	18c01014 	ori	r3,r3,64
    48d8:	88c0030d 	sth	r3,12(r17)
    48dc:	003fdf06 	br	485c <__alt_mem_Flash_flash_data+0xf400485c>
    48e0:	0005883a 	mov	r2,zero
    48e4:	003fec06 	br	4898 <__alt_mem_Flash_flash_data+0xf4004898>
    48e8:	88801415 	stw	r2,80(r17)
    48ec:	003fd206 	br	4838 <__alt_mem_Flash_flash_data+0xf4004838>
    48f0:	28c00f17 	ldw	r3,60(r5)
    48f4:	00ffb316 	blt	zero,r3,47c4 <__alt_mem_Flash_flash_data+0xf40047c4>
    48f8:	003fd706 	br	4858 <__alt_mem_Flash_flash_data+0xf4004858>
    48fc:	89400717 	ldw	r5,28(r17)
    4900:	000d883a 	mov	r6,zero
    4904:	9809883a 	mov	r4,r19
    4908:	01c00044 	movi	r7,1
    490c:	403ee83a 	callr	r8
    4910:	100d883a 	mov	r6,r2
    4914:	00bfffc4 	movi	r2,-1
    4918:	30801426 	beq	r6,r2,496c <__sflush_r+0x1e4>
    491c:	8880030b 	ldhu	r2,12(r17)
    4920:	8a000a17 	ldw	r8,40(r17)
    4924:	003fae06 	br	47e0 <__alt_mem_Flash_flash_data+0xf40047e0>
    4928:	98c00017 	ldw	r3,0(r19)
    492c:	183fba26 	beq	r3,zero,4818 <__alt_mem_Flash_flash_data+0xf4004818>
    4930:	01000744 	movi	r4,29
    4934:	19000626 	beq	r3,r4,4950 <__sflush_r+0x1c8>
    4938:	01000584 	movi	r4,22
    493c:	19000426 	beq	r3,r4,4950 <__sflush_r+0x1c8>
    4940:	88c0030b 	ldhu	r3,12(r17)
    4944:	18c01014 	ori	r3,r3,64
    4948:	88c0030d 	sth	r3,12(r17)
    494c:	003fc306 	br	485c <__alt_mem_Flash_flash_data+0xf400485c>
    4950:	8880030b 	ldhu	r2,12(r17)
    4954:	88c00417 	ldw	r3,16(r17)
    4958:	88000115 	stw	zero,4(r17)
    495c:	10bdffcc 	andi	r2,r2,63487
    4960:	8880030d 	sth	r2,12(r17)
    4964:	88c00015 	stw	r3,0(r17)
    4968:	003fb306 	br	4838 <__alt_mem_Flash_flash_data+0xf4004838>
    496c:	98800017 	ldw	r2,0(r19)
    4970:	103fea26 	beq	r2,zero,491c <__alt_mem_Flash_flash_data+0xf400491c>
    4974:	00c00744 	movi	r3,29
    4978:	10c00226 	beq	r2,r3,4984 <__sflush_r+0x1fc>
    497c:	00c00584 	movi	r3,22
    4980:	10ffd21e 	bne	r2,r3,48cc <__alt_mem_Flash_flash_data+0xf40048cc>
    4984:	9c000015 	stw	r16,0(r19)
    4988:	0005883a 	mov	r2,zero
    498c:	003fb306 	br	485c <__alt_mem_Flash_flash_data+0xf400485c>

00004990 <_fflush_r>:
    4990:	defffd04 	addi	sp,sp,-12
    4994:	dc000115 	stw	r16,4(sp)
    4998:	dfc00215 	stw	ra,8(sp)
    499c:	2021883a 	mov	r16,r4
    49a0:	20000226 	beq	r4,zero,49ac <_fflush_r+0x1c>
    49a4:	20800e17 	ldw	r2,56(r4)
    49a8:	10000c26 	beq	r2,zero,49dc <_fflush_r+0x4c>
    49ac:	2880030f 	ldh	r2,12(r5)
    49b0:	1000051e 	bne	r2,zero,49c8 <_fflush_r+0x38>
    49b4:	0005883a 	mov	r2,zero
    49b8:	dfc00217 	ldw	ra,8(sp)
    49bc:	dc000117 	ldw	r16,4(sp)
    49c0:	dec00304 	addi	sp,sp,12
    49c4:	f800283a 	ret
    49c8:	8009883a 	mov	r4,r16
    49cc:	dfc00217 	ldw	ra,8(sp)
    49d0:	dc000117 	ldw	r16,4(sp)
    49d4:	dec00304 	addi	sp,sp,12
    49d8:	00047881 	jmpi	4788 <__sflush_r>
    49dc:	d9400015 	stw	r5,0(sp)
    49e0:	0004d6c0 	call	4d6c <__sinit>
    49e4:	d9400017 	ldw	r5,0(sp)
    49e8:	003ff006 	br	49ac <__alt_mem_Flash_flash_data+0xf40049ac>

000049ec <fflush>:
    49ec:	20000526 	beq	r4,zero,4a04 <fflush+0x18>
    49f0:	008000b4 	movhi	r2,2
    49f4:	10ae8e04 	addi	r2,r2,-17864
    49f8:	200b883a 	mov	r5,r4
    49fc:	11000017 	ldw	r4,0(r2)
    4a00:	00049901 	jmpi	4990 <_fflush_r>
    4a04:	008000b4 	movhi	r2,2
    4a08:	10ae8d04 	addi	r2,r2,-17868
    4a0c:	11000017 	ldw	r4,0(r2)
    4a10:	01400034 	movhi	r5,0
    4a14:	29526404 	addi	r5,r5,18832
    4a18:	00052941 	jmpi	5294 <_fwalk_reent>

00004a1c <__fp_lock>:
    4a1c:	0005883a 	mov	r2,zero
    4a20:	f800283a 	ret

00004a24 <__fp_unlock>:
    4a24:	0005883a 	mov	r2,zero
    4a28:	f800283a 	ret

00004a2c <_cleanup_r>:
    4a2c:	01400074 	movhi	r5,1
    4a30:	29627d04 	addi	r5,r5,-30220
    4a34:	00052941 	jmpi	5294 <_fwalk_reent>

00004a38 <__sinit.part.1>:
    4a38:	defff704 	addi	sp,sp,-36
    4a3c:	00c00034 	movhi	r3,0
    4a40:	dfc00815 	stw	ra,32(sp)
    4a44:	ddc00715 	stw	r23,28(sp)
    4a48:	dd800615 	stw	r22,24(sp)
    4a4c:	dd400515 	stw	r21,20(sp)
    4a50:	dd000415 	stw	r20,16(sp)
    4a54:	dcc00315 	stw	r19,12(sp)
    4a58:	dc800215 	stw	r18,8(sp)
    4a5c:	dc400115 	stw	r17,4(sp)
    4a60:	dc000015 	stw	r16,0(sp)
    4a64:	18d28b04 	addi	r3,r3,18988
    4a68:	24000117 	ldw	r16,4(r4)
    4a6c:	20c00f15 	stw	r3,60(r4)
    4a70:	2080bb04 	addi	r2,r4,748
    4a74:	00c000c4 	movi	r3,3
    4a78:	20c0b915 	stw	r3,740(r4)
    4a7c:	2080ba15 	stw	r2,744(r4)
    4a80:	2000b815 	stw	zero,736(r4)
    4a84:	05c00204 	movi	r23,8
    4a88:	00800104 	movi	r2,4
    4a8c:	2025883a 	mov	r18,r4
    4a90:	b80d883a 	mov	r6,r23
    4a94:	81001704 	addi	r4,r16,92
    4a98:	000b883a 	mov	r5,zero
    4a9c:	80000015 	stw	zero,0(r16)
    4aa0:	80000115 	stw	zero,4(r16)
    4aa4:	80000215 	stw	zero,8(r16)
    4aa8:	8080030d 	sth	r2,12(r16)
    4aac:	80001915 	stw	zero,100(r16)
    4ab0:	8000038d 	sth	zero,14(r16)
    4ab4:	80000415 	stw	zero,16(r16)
    4ab8:	80000515 	stw	zero,20(r16)
    4abc:	80000615 	stw	zero,24(r16)
    4ac0:	0005fb80 	call	5fb8 <memset>
    4ac4:	05800034 	movhi	r22,0
    4ac8:	94400217 	ldw	r17,8(r18)
    4acc:	05400034 	movhi	r21,0
    4ad0:	05000034 	movhi	r20,0
    4ad4:	04c00034 	movhi	r19,0
    4ad8:	b59c5104 	addi	r22,r22,28996
    4adc:	ad5c6804 	addi	r21,r21,29088
    4ae0:	a51c8704 	addi	r20,r20,29212
    4ae4:	9cdc9e04 	addi	r19,r19,29304
    4ae8:	85800815 	stw	r22,32(r16)
    4aec:	85400915 	stw	r21,36(r16)
    4af0:	85000a15 	stw	r20,40(r16)
    4af4:	84c00b15 	stw	r19,44(r16)
    4af8:	84000715 	stw	r16,28(r16)
    4afc:	00800284 	movi	r2,10
    4b00:	8880030d 	sth	r2,12(r17)
    4b04:	00800044 	movi	r2,1
    4b08:	89001704 	addi	r4,r17,92
    4b0c:	b80d883a 	mov	r6,r23
    4b10:	000b883a 	mov	r5,zero
    4b14:	88000015 	stw	zero,0(r17)
    4b18:	88000115 	stw	zero,4(r17)
    4b1c:	88000215 	stw	zero,8(r17)
    4b20:	88001915 	stw	zero,100(r17)
    4b24:	8880038d 	sth	r2,14(r17)
    4b28:	88000415 	stw	zero,16(r17)
    4b2c:	88000515 	stw	zero,20(r17)
    4b30:	88000615 	stw	zero,24(r17)
    4b34:	0005fb80 	call	5fb8 <memset>
    4b38:	94000317 	ldw	r16,12(r18)
    4b3c:	00800484 	movi	r2,18
    4b40:	8c400715 	stw	r17,28(r17)
    4b44:	8d800815 	stw	r22,32(r17)
    4b48:	8d400915 	stw	r21,36(r17)
    4b4c:	8d000a15 	stw	r20,40(r17)
    4b50:	8cc00b15 	stw	r19,44(r17)
    4b54:	8080030d 	sth	r2,12(r16)
    4b58:	00800084 	movi	r2,2
    4b5c:	80000015 	stw	zero,0(r16)
    4b60:	80000115 	stw	zero,4(r16)
    4b64:	80000215 	stw	zero,8(r16)
    4b68:	80001915 	stw	zero,100(r16)
    4b6c:	8080038d 	sth	r2,14(r16)
    4b70:	80000415 	stw	zero,16(r16)
    4b74:	80000515 	stw	zero,20(r16)
    4b78:	80000615 	stw	zero,24(r16)
    4b7c:	81001704 	addi	r4,r16,92
    4b80:	000b883a 	mov	r5,zero
    4b84:	b80d883a 	mov	r6,r23
    4b88:	0005fb80 	call	5fb8 <memset>
    4b8c:	00800044 	movi	r2,1
    4b90:	84000715 	stw	r16,28(r16)
    4b94:	85800815 	stw	r22,32(r16)
    4b98:	85400915 	stw	r21,36(r16)
    4b9c:	85000a15 	stw	r20,40(r16)
    4ba0:	84c00b15 	stw	r19,44(r16)
    4ba4:	90800e15 	stw	r2,56(r18)
    4ba8:	dfc00817 	ldw	ra,32(sp)
    4bac:	ddc00717 	ldw	r23,28(sp)
    4bb0:	dd800617 	ldw	r22,24(sp)
    4bb4:	dd400517 	ldw	r21,20(sp)
    4bb8:	dd000417 	ldw	r20,16(sp)
    4bbc:	dcc00317 	ldw	r19,12(sp)
    4bc0:	dc800217 	ldw	r18,8(sp)
    4bc4:	dc400117 	ldw	r17,4(sp)
    4bc8:	dc000017 	ldw	r16,0(sp)
    4bcc:	dec00904 	addi	sp,sp,36
    4bd0:	f800283a 	ret

00004bd4 <__sfmoreglue>:
    4bd4:	defffc04 	addi	sp,sp,-16
    4bd8:	dc400115 	stw	r17,4(sp)
    4bdc:	2c7fffc4 	addi	r17,r5,-1
    4be0:	8c401a24 	muli	r17,r17,104
    4be4:	dc800215 	stw	r18,8(sp)
    4be8:	2825883a 	mov	r18,r5
    4bec:	89401d04 	addi	r5,r17,116
    4bf0:	dc000015 	stw	r16,0(sp)
    4bf4:	dfc00315 	stw	ra,12(sp)
    4bf8:	00055f00 	call	55f0 <_malloc_r>
    4bfc:	1021883a 	mov	r16,r2
    4c00:	10000726 	beq	r2,zero,4c20 <__sfmoreglue+0x4c>
    4c04:	11000304 	addi	r4,r2,12
    4c08:	10000015 	stw	zero,0(r2)
    4c0c:	14800115 	stw	r18,4(r2)
    4c10:	11000215 	stw	r4,8(r2)
    4c14:	000b883a 	mov	r5,zero
    4c18:	89801a04 	addi	r6,r17,104
    4c1c:	0005fb80 	call	5fb8 <memset>
    4c20:	8005883a 	mov	r2,r16
    4c24:	dfc00317 	ldw	ra,12(sp)
    4c28:	dc800217 	ldw	r18,8(sp)
    4c2c:	dc400117 	ldw	r17,4(sp)
    4c30:	dc000017 	ldw	r16,0(sp)
    4c34:	dec00404 	addi	sp,sp,16
    4c38:	f800283a 	ret

00004c3c <__sfp>:
    4c3c:	008000b4 	movhi	r2,2
    4c40:	defffb04 	addi	sp,sp,-20
    4c44:	10ae8d04 	addi	r2,r2,-17868
    4c48:	dc800215 	stw	r18,8(sp)
    4c4c:	14800017 	ldw	r18,0(r2)
    4c50:	dcc00315 	stw	r19,12(sp)
    4c54:	dfc00415 	stw	ra,16(sp)
    4c58:	90800e17 	ldw	r2,56(r18)
    4c5c:	dc400115 	stw	r17,4(sp)
    4c60:	dc000015 	stw	r16,0(sp)
    4c64:	2027883a 	mov	r19,r4
    4c68:	1000021e 	bne	r2,zero,4c74 <__sfp+0x38>
    4c6c:	9009883a 	mov	r4,r18
    4c70:	0004a380 	call	4a38 <__sinit.part.1>
    4c74:	9480b804 	addi	r18,r18,736
    4c78:	047fffc4 	movi	r17,-1
    4c7c:	91400117 	ldw	r5,4(r18)
    4c80:	94000217 	ldw	r16,8(r18)
    4c84:	297fffc4 	addi	r5,r5,-1
    4c88:	28000a16 	blt	r5,zero,4cb4 <__sfp+0x78>
    4c8c:	8080030f 	ldh	r2,12(r16)
    4c90:	10000c26 	beq	r2,zero,4cc4 <__sfp+0x88>
    4c94:	80c01d04 	addi	r3,r16,116
    4c98:	00000206 	br	4ca4 <__sfp+0x68>
    4c9c:	18bfe60f 	ldh	r2,-104(r3)
    4ca0:	10000826 	beq	r2,zero,4cc4 <__sfp+0x88>
    4ca4:	297fffc4 	addi	r5,r5,-1
    4ca8:	1c3ffd04 	addi	r16,r3,-12
    4cac:	18c01a04 	addi	r3,r3,104
    4cb0:	2c7ffa1e 	bne	r5,r17,4c9c <__alt_mem_Flash_flash_data+0xf4004c9c>
    4cb4:	90800017 	ldw	r2,0(r18)
    4cb8:	10001d26 	beq	r2,zero,4d30 <__sfp+0xf4>
    4cbc:	1025883a 	mov	r18,r2
    4cc0:	003fee06 	br	4c7c <__alt_mem_Flash_flash_data+0xf4004c7c>
    4cc4:	00bfffc4 	movi	r2,-1
    4cc8:	8080038d 	sth	r2,14(r16)
    4ccc:	00800044 	movi	r2,1
    4cd0:	8080030d 	sth	r2,12(r16)
    4cd4:	80001915 	stw	zero,100(r16)
    4cd8:	80000015 	stw	zero,0(r16)
    4cdc:	80000215 	stw	zero,8(r16)
    4ce0:	80000115 	stw	zero,4(r16)
    4ce4:	80000415 	stw	zero,16(r16)
    4ce8:	80000515 	stw	zero,20(r16)
    4cec:	80000615 	stw	zero,24(r16)
    4cf0:	81001704 	addi	r4,r16,92
    4cf4:	000b883a 	mov	r5,zero
    4cf8:	01800204 	movi	r6,8
    4cfc:	0005fb80 	call	5fb8 <memset>
    4d00:	8005883a 	mov	r2,r16
    4d04:	80000c15 	stw	zero,48(r16)
    4d08:	80000d15 	stw	zero,52(r16)
    4d0c:	80001115 	stw	zero,68(r16)
    4d10:	80001215 	stw	zero,72(r16)
    4d14:	dfc00417 	ldw	ra,16(sp)
    4d18:	dcc00317 	ldw	r19,12(sp)
    4d1c:	dc800217 	ldw	r18,8(sp)
    4d20:	dc400117 	ldw	r17,4(sp)
    4d24:	dc000017 	ldw	r16,0(sp)
    4d28:	dec00504 	addi	sp,sp,20
    4d2c:	f800283a 	ret
    4d30:	9809883a 	mov	r4,r19
    4d34:	01400104 	movi	r5,4
    4d38:	0004bd40 	call	4bd4 <__sfmoreglue>
    4d3c:	90800015 	stw	r2,0(r18)
    4d40:	103fde1e 	bne	r2,zero,4cbc <__alt_mem_Flash_flash_data+0xf4004cbc>
    4d44:	00800304 	movi	r2,12
    4d48:	98800015 	stw	r2,0(r19)
    4d4c:	0005883a 	mov	r2,zero
    4d50:	003ff006 	br	4d14 <__alt_mem_Flash_flash_data+0xf4004d14>

00004d54 <_cleanup>:
    4d54:	008000b4 	movhi	r2,2
    4d58:	10ae8d04 	addi	r2,r2,-17868
    4d5c:	11000017 	ldw	r4,0(r2)
    4d60:	01400074 	movhi	r5,1
    4d64:	29627d04 	addi	r5,r5,-30220
    4d68:	00052941 	jmpi	5294 <_fwalk_reent>

00004d6c <__sinit>:
    4d6c:	20800e17 	ldw	r2,56(r4)
    4d70:	10000126 	beq	r2,zero,4d78 <__sinit+0xc>
    4d74:	f800283a 	ret
    4d78:	0004a381 	jmpi	4a38 <__sinit.part.1>

00004d7c <__sfp_lock_acquire>:
    4d7c:	f800283a 	ret

00004d80 <__sfp_lock_release>:
    4d80:	f800283a 	ret

00004d84 <__sinit_lock_acquire>:
    4d84:	f800283a 	ret

00004d88 <__sinit_lock_release>:
    4d88:	f800283a 	ret

00004d8c <__fp_lock_all>:
    4d8c:	008000b4 	movhi	r2,2
    4d90:	10ae8e04 	addi	r2,r2,-17864
    4d94:	11000017 	ldw	r4,0(r2)
    4d98:	01400034 	movhi	r5,0
    4d9c:	29528704 	addi	r5,r5,18972
    4da0:	00051d01 	jmpi	51d0 <_fwalk>

00004da4 <__fp_unlock_all>:
    4da4:	008000b4 	movhi	r2,2
    4da8:	10ae8e04 	addi	r2,r2,-17864
    4dac:	11000017 	ldw	r4,0(r2)
    4db0:	01400034 	movhi	r5,0
    4db4:	29528904 	addi	r5,r5,18980
    4db8:	00051d01 	jmpi	51d0 <_fwalk>

00004dbc <_malloc_trim_r>:
    4dbc:	defffb04 	addi	sp,sp,-20
    4dc0:	dcc00315 	stw	r19,12(sp)
    4dc4:	04c000b4 	movhi	r19,2
    4dc8:	dc800215 	stw	r18,8(sp)
    4dcc:	dc400115 	stw	r17,4(sp)
    4dd0:	dc000015 	stw	r16,0(sp)
    4dd4:	dfc00415 	stw	ra,16(sp)
    4dd8:	2821883a 	mov	r16,r5
    4ddc:	9ce82304 	addi	r19,r19,-24436
    4de0:	2025883a 	mov	r18,r4
    4de4:	000da540 	call	da54 <__malloc_lock>
    4de8:	98800217 	ldw	r2,8(r19)
    4dec:	14400117 	ldw	r17,4(r2)
    4df0:	00bfff04 	movi	r2,-4
    4df4:	88a2703a 	and	r17,r17,r2
    4df8:	8c21c83a 	sub	r16,r17,r16
    4dfc:	8403fbc4 	addi	r16,r16,4079
    4e00:	8020d33a 	srli	r16,r16,12
    4e04:	0083ffc4 	movi	r2,4095
    4e08:	843fffc4 	addi	r16,r16,-1
    4e0c:	8020933a 	slli	r16,r16,12
    4e10:	1400060e 	bge	r2,r16,4e2c <_malloc_trim_r+0x70>
    4e14:	9009883a 	mov	r4,r18
    4e18:	000b883a 	mov	r5,zero
    4e1c:	00070f00 	call	70f0 <_sbrk_r>
    4e20:	98c00217 	ldw	r3,8(r19)
    4e24:	1c47883a 	add	r3,r3,r17
    4e28:	10c00a26 	beq	r2,r3,4e54 <_malloc_trim_r+0x98>
    4e2c:	9009883a 	mov	r4,r18
    4e30:	000db740 	call	db74 <__malloc_unlock>
    4e34:	0005883a 	mov	r2,zero
    4e38:	dfc00417 	ldw	ra,16(sp)
    4e3c:	dcc00317 	ldw	r19,12(sp)
    4e40:	dc800217 	ldw	r18,8(sp)
    4e44:	dc400117 	ldw	r17,4(sp)
    4e48:	dc000017 	ldw	r16,0(sp)
    4e4c:	dec00504 	addi	sp,sp,20
    4e50:	f800283a 	ret
    4e54:	9009883a 	mov	r4,r18
    4e58:	040bc83a 	sub	r5,zero,r16
    4e5c:	00070f00 	call	70f0 <_sbrk_r>
    4e60:	00ffffc4 	movi	r3,-1
    4e64:	10c00d26 	beq	r2,r3,4e9c <_malloc_trim_r+0xe0>
    4e68:	00c000b4 	movhi	r3,2
    4e6c:	18f6a404 	addi	r3,r3,-9584
    4e70:	18800017 	ldw	r2,0(r3)
    4e74:	99000217 	ldw	r4,8(r19)
    4e78:	8c23c83a 	sub	r17,r17,r16
    4e7c:	8c400054 	ori	r17,r17,1
    4e80:	1421c83a 	sub	r16,r2,r16
    4e84:	24400115 	stw	r17,4(r4)
    4e88:	9009883a 	mov	r4,r18
    4e8c:	1c000015 	stw	r16,0(r3)
    4e90:	000db740 	call	db74 <__malloc_unlock>
    4e94:	00800044 	movi	r2,1
    4e98:	003fe706 	br	4e38 <__alt_mem_Flash_flash_data+0xf4004e38>
    4e9c:	9009883a 	mov	r4,r18
    4ea0:	000b883a 	mov	r5,zero
    4ea4:	00070f00 	call	70f0 <_sbrk_r>
    4ea8:	99000217 	ldw	r4,8(r19)
    4eac:	014003c4 	movi	r5,15
    4eb0:	1107c83a 	sub	r3,r2,r4
    4eb4:	28ffdd0e 	bge	r5,r3,4e2c <__alt_mem_Flash_flash_data+0xf4004e2c>
    4eb8:	014000b4 	movhi	r5,2
    4ebc:	296e9004 	addi	r5,r5,-17856
    4ec0:	29400017 	ldw	r5,0(r5)
    4ec4:	18c00054 	ori	r3,r3,1
    4ec8:	20c00115 	stw	r3,4(r4)
    4ecc:	00c000b4 	movhi	r3,2
    4ed0:	1145c83a 	sub	r2,r2,r5
    4ed4:	18f6a404 	addi	r3,r3,-9584
    4ed8:	18800015 	stw	r2,0(r3)
    4edc:	003fd306 	br	4e2c <__alt_mem_Flash_flash_data+0xf4004e2c>

00004ee0 <_free_r>:
    4ee0:	28004c26 	beq	r5,zero,5014 <_free_r+0x134>
    4ee4:	defffd04 	addi	sp,sp,-12
    4ee8:	dc400115 	stw	r17,4(sp)
    4eec:	dc000015 	stw	r16,0(sp)
    4ef0:	2023883a 	mov	r17,r4
    4ef4:	2821883a 	mov	r16,r5
    4ef8:	dfc00215 	stw	ra,8(sp)
    4efc:	000da540 	call	da54 <__malloc_lock>
    4f00:	813fff17 	ldw	r4,-4(r16)
    4f04:	00bfff84 	movi	r2,-2
    4f08:	024000b4 	movhi	r9,2
    4f0c:	81bffe04 	addi	r6,r16,-8
    4f10:	2084703a 	and	r2,r4,r2
    4f14:	4a682304 	addi	r9,r9,-24436
    4f18:	308b883a 	add	r5,r6,r2
    4f1c:	2a000117 	ldw	r8,4(r5)
    4f20:	49c00217 	ldw	r7,8(r9)
    4f24:	00ffff04 	movi	r3,-4
    4f28:	40c6703a 	and	r3,r8,r3
    4f2c:	39405326 	beq	r7,r5,507c <_free_r+0x19c>
    4f30:	28c00115 	stw	r3,4(r5)
    4f34:	2100004c 	andi	r4,r4,1
    4f38:	2000091e 	bne	r4,zero,4f60 <_free_r+0x80>
    4f3c:	81fffe17 	ldw	r7,-8(r16)
    4f40:	4a000204 	addi	r8,r9,8
    4f44:	31cdc83a 	sub	r6,r6,r7
    4f48:	31000217 	ldw	r4,8(r6)
    4f4c:	11c5883a 	add	r2,r2,r7
    4f50:	22006126 	beq	r4,r8,50d8 <_free_r+0x1f8>
    4f54:	31c00317 	ldw	r7,12(r6)
    4f58:	21c00315 	stw	r7,12(r4)
    4f5c:	39000215 	stw	r4,8(r7)
    4f60:	28c9883a 	add	r4,r5,r3
    4f64:	21c00117 	ldw	r7,4(r4)
    4f68:	39c0004c 	andi	r7,r7,1
    4f6c:	38000d1e 	bne	r7,zero,4fa4 <_free_r+0xc4>
    4f70:	29000217 	ldw	r4,8(r5)
    4f74:	10c5883a 	add	r2,r2,r3
    4f78:	00c000b4 	movhi	r3,2
    4f7c:	18e82504 	addi	r3,r3,-24428
    4f80:	20c07526 	beq	r4,r3,5158 <_free_r+0x278>
    4f84:	29c00317 	ldw	r7,12(r5)
    4f88:	11400054 	ori	r5,r2,1
    4f8c:	3087883a 	add	r3,r6,r2
    4f90:	21c00315 	stw	r7,12(r4)
    4f94:	39000215 	stw	r4,8(r7)
    4f98:	31400115 	stw	r5,4(r6)
    4f9c:	18800015 	stw	r2,0(r3)
    4fa0:	00000406 	br	4fb4 <_free_r+0xd4>
    4fa4:	10c00054 	ori	r3,r2,1
    4fa8:	30c00115 	stw	r3,4(r6)
    4fac:	3087883a 	add	r3,r6,r2
    4fb0:	18800015 	stw	r2,0(r3)
    4fb4:	00c07fc4 	movi	r3,511
    4fb8:	18801736 	bltu	r3,r2,5018 <_free_r+0x138>
    4fbc:	1004d0fa 	srli	r2,r2,3
    4fc0:	01400044 	movi	r5,1
    4fc4:	49000117 	ldw	r4,4(r9)
    4fc8:	1087883a 	add	r3,r2,r2
    4fcc:	18c7883a 	add	r3,r3,r3
    4fd0:	1005d0ba 	srai	r2,r2,2
    4fd4:	18c7883a 	add	r3,r3,r3
    4fd8:	1a47883a 	add	r3,r3,r9
    4fdc:	19c00217 	ldw	r7,8(r3)
    4fe0:	2884983a 	sll	r2,r5,r2
    4fe4:	30c00315 	stw	r3,12(r6)
    4fe8:	31c00215 	stw	r7,8(r6)
    4fec:	1104b03a 	or	r2,r2,r4
    4ff0:	19800215 	stw	r6,8(r3)
    4ff4:	48800115 	stw	r2,4(r9)
    4ff8:	39800315 	stw	r6,12(r7)
    4ffc:	8809883a 	mov	r4,r17
    5000:	dfc00217 	ldw	ra,8(sp)
    5004:	dc400117 	ldw	r17,4(sp)
    5008:	dc000017 	ldw	r16,0(sp)
    500c:	dec00304 	addi	sp,sp,12
    5010:	000db741 	jmpi	db74 <__malloc_unlock>
    5014:	f800283a 	ret
    5018:	1006d27a 	srli	r3,r2,9
    501c:	01000104 	movi	r4,4
    5020:	20c04036 	bltu	r4,r3,5124 <_free_r+0x244>
    5024:	1006d1ba 	srli	r3,r2,6
    5028:	19400e04 	addi	r5,r3,56
    502c:	2947883a 	add	r3,r5,r5
    5030:	18c7883a 	add	r3,r3,r3
    5034:	18c7883a 	add	r3,r3,r3
    5038:	1a49883a 	add	r4,r3,r9
    503c:	20c00217 	ldw	r3,8(r4)
    5040:	01c000b4 	movhi	r7,2
    5044:	39e82304 	addi	r7,r7,-24436
    5048:	19003b26 	beq	r3,r4,5138 <_free_r+0x258>
    504c:	01ffff04 	movi	r7,-4
    5050:	19400117 	ldw	r5,4(r3)
    5054:	29ca703a 	and	r5,r5,r7
    5058:	1140022e 	bgeu	r2,r5,5064 <_free_r+0x184>
    505c:	18c00217 	ldw	r3,8(r3)
    5060:	20fffb1e 	bne	r4,r3,5050 <__alt_mem_Flash_flash_data+0xf4005050>
    5064:	18800317 	ldw	r2,12(r3)
    5068:	30800315 	stw	r2,12(r6)
    506c:	30c00215 	stw	r3,8(r6)
    5070:	11800215 	stw	r6,8(r2)
    5074:	19800315 	stw	r6,12(r3)
    5078:	003fe006 	br	4ffc <__alt_mem_Flash_flash_data+0xf4004ffc>
    507c:	2100004c 	andi	r4,r4,1
    5080:	1885883a 	add	r2,r3,r2
    5084:	2000071e 	bne	r4,zero,50a4 <_free_r+0x1c4>
    5088:	817ffe17 	ldw	r5,-8(r16)
    508c:	314dc83a 	sub	r6,r6,r5
    5090:	30c00317 	ldw	r3,12(r6)
    5094:	31000217 	ldw	r4,8(r6)
    5098:	1145883a 	add	r2,r2,r5
    509c:	20c00315 	stw	r3,12(r4)
    50a0:	19000215 	stw	r4,8(r3)
    50a4:	10c00054 	ori	r3,r2,1
    50a8:	30c00115 	stw	r3,4(r6)
    50ac:	00c000b4 	movhi	r3,2
    50b0:	18ee9104 	addi	r3,r3,-17852
    50b4:	18c00017 	ldw	r3,0(r3)
    50b8:	49800215 	stw	r6,8(r9)
    50bc:	10ffcf36 	bltu	r2,r3,4ffc <__alt_mem_Flash_flash_data+0xf4004ffc>
    50c0:	008000b4 	movhi	r2,2
    50c4:	10b68204 	addi	r2,r2,-9720
    50c8:	11400017 	ldw	r5,0(r2)
    50cc:	8809883a 	mov	r4,r17
    50d0:	0004dbc0 	call	4dbc <_malloc_trim_r>
    50d4:	003fc906 	br	4ffc <__alt_mem_Flash_flash_data+0xf4004ffc>
    50d8:	28c9883a 	add	r4,r5,r3
    50dc:	21000117 	ldw	r4,4(r4)
    50e0:	2100004c 	andi	r4,r4,1
    50e4:	20000a1e 	bne	r4,zero,5110 <_free_r+0x230>
    50e8:	29000317 	ldw	r4,12(r5)
    50ec:	29400217 	ldw	r5,8(r5)
    50f0:	10c5883a 	add	r2,r2,r3
    50f4:	10c00054 	ori	r3,r2,1
    50f8:	29000315 	stw	r4,12(r5)
    50fc:	21400215 	stw	r5,8(r4)
    5100:	30c00115 	stw	r3,4(r6)
    5104:	308d883a 	add	r6,r6,r2
    5108:	30800015 	stw	r2,0(r6)
    510c:	003fbb06 	br	4ffc <__alt_mem_Flash_flash_data+0xf4004ffc>
    5110:	10c00054 	ori	r3,r2,1
    5114:	30c00115 	stw	r3,4(r6)
    5118:	308d883a 	add	r6,r6,r2
    511c:	30800015 	stw	r2,0(r6)
    5120:	003fb606 	br	4ffc <__alt_mem_Flash_flash_data+0xf4004ffc>
    5124:	01000504 	movi	r4,20
    5128:	20c01436 	bltu	r4,r3,517c <_free_r+0x29c>
    512c:	194016c4 	addi	r5,r3,91
    5130:	2947883a 	add	r3,r5,r5
    5134:	003fbe06 	br	5030 <__alt_mem_Flash_flash_data+0xf4005030>
    5138:	280bd0ba 	srai	r5,r5,2
    513c:	00800044 	movi	r2,1
    5140:	39000117 	ldw	r4,4(r7)
    5144:	114a983a 	sll	r5,r2,r5
    5148:	1805883a 	mov	r2,r3
    514c:	2908b03a 	or	r4,r5,r4
    5150:	39000115 	stw	r4,4(r7)
    5154:	003fc406 	br	5068 <__alt_mem_Flash_flash_data+0xf4005068>
    5158:	49800515 	stw	r6,20(r9)
    515c:	49800415 	stw	r6,16(r9)
    5160:	10c00054 	ori	r3,r2,1
    5164:	31000315 	stw	r4,12(r6)
    5168:	31000215 	stw	r4,8(r6)
    516c:	30c00115 	stw	r3,4(r6)
    5170:	308d883a 	add	r6,r6,r2
    5174:	30800015 	stw	r2,0(r6)
    5178:	003fa006 	br	4ffc <__alt_mem_Flash_flash_data+0xf4004ffc>
    517c:	01001504 	movi	r4,84
    5180:	20c00436 	bltu	r4,r3,5194 <_free_r+0x2b4>
    5184:	1006d33a 	srli	r3,r2,12
    5188:	19401b84 	addi	r5,r3,110
    518c:	2947883a 	add	r3,r5,r5
    5190:	003fa706 	br	5030 <__alt_mem_Flash_flash_data+0xf4005030>
    5194:	01005504 	movi	r4,340
    5198:	20c00436 	bltu	r4,r3,51ac <_free_r+0x2cc>
    519c:	1006d3fa 	srli	r3,r2,15
    51a0:	19401dc4 	addi	r5,r3,119
    51a4:	2947883a 	add	r3,r5,r5
    51a8:	003fa106 	br	5030 <__alt_mem_Flash_flash_data+0xf4005030>
    51ac:	01015504 	movi	r4,1364
    51b0:	20c00436 	bltu	r4,r3,51c4 <_free_r+0x2e4>
    51b4:	1006d4ba 	srli	r3,r2,18
    51b8:	19401f04 	addi	r5,r3,124
    51bc:	2947883a 	add	r3,r5,r5
    51c0:	003f9b06 	br	5030 <__alt_mem_Flash_flash_data+0xf4005030>
    51c4:	00c03f04 	movi	r3,252
    51c8:	01401f84 	movi	r5,126
    51cc:	003f9806 	br	5030 <__alt_mem_Flash_flash_data+0xf4005030>

000051d0 <_fwalk>:
    51d0:	defff704 	addi	sp,sp,-36
    51d4:	dd000415 	stw	r20,16(sp)
    51d8:	dfc00815 	stw	ra,32(sp)
    51dc:	ddc00715 	stw	r23,28(sp)
    51e0:	dd800615 	stw	r22,24(sp)
    51e4:	dd400515 	stw	r21,20(sp)
    51e8:	dcc00315 	stw	r19,12(sp)
    51ec:	dc800215 	stw	r18,8(sp)
    51f0:	dc400115 	stw	r17,4(sp)
    51f4:	dc000015 	stw	r16,0(sp)
    51f8:	2500b804 	addi	r20,r4,736
    51fc:	a0002326 	beq	r20,zero,528c <_fwalk+0xbc>
    5200:	282b883a 	mov	r21,r5
    5204:	002f883a 	mov	r23,zero
    5208:	05800044 	movi	r22,1
    520c:	04ffffc4 	movi	r19,-1
    5210:	a4400117 	ldw	r17,4(r20)
    5214:	a4800217 	ldw	r18,8(r20)
    5218:	8c7fffc4 	addi	r17,r17,-1
    521c:	88000d16 	blt	r17,zero,5254 <_fwalk+0x84>
    5220:	94000304 	addi	r16,r18,12
    5224:	94800384 	addi	r18,r18,14
    5228:	80c0000b 	ldhu	r3,0(r16)
    522c:	8c7fffc4 	addi	r17,r17,-1
    5230:	813ffd04 	addi	r4,r16,-12
    5234:	b0c0042e 	bgeu	r22,r3,5248 <_fwalk+0x78>
    5238:	90c0000f 	ldh	r3,0(r18)
    523c:	1cc00226 	beq	r3,r19,5248 <_fwalk+0x78>
    5240:	a83ee83a 	callr	r21
    5244:	b8aeb03a 	or	r23,r23,r2
    5248:	84001a04 	addi	r16,r16,104
    524c:	94801a04 	addi	r18,r18,104
    5250:	8cfff51e 	bne	r17,r19,5228 <__alt_mem_Flash_flash_data+0xf4005228>
    5254:	a5000017 	ldw	r20,0(r20)
    5258:	a03fed1e 	bne	r20,zero,5210 <__alt_mem_Flash_flash_data+0xf4005210>
    525c:	b805883a 	mov	r2,r23
    5260:	dfc00817 	ldw	ra,32(sp)
    5264:	ddc00717 	ldw	r23,28(sp)
    5268:	dd800617 	ldw	r22,24(sp)
    526c:	dd400517 	ldw	r21,20(sp)
    5270:	dd000417 	ldw	r20,16(sp)
    5274:	dcc00317 	ldw	r19,12(sp)
    5278:	dc800217 	ldw	r18,8(sp)
    527c:	dc400117 	ldw	r17,4(sp)
    5280:	dc000017 	ldw	r16,0(sp)
    5284:	dec00904 	addi	sp,sp,36
    5288:	f800283a 	ret
    528c:	002f883a 	mov	r23,zero
    5290:	003ff206 	br	525c <__alt_mem_Flash_flash_data+0xf400525c>

00005294 <_fwalk_reent>:
    5294:	defff704 	addi	sp,sp,-36
    5298:	dd400515 	stw	r21,20(sp)
    529c:	dfc00815 	stw	ra,32(sp)
    52a0:	ddc00715 	stw	r23,28(sp)
    52a4:	dd800615 	stw	r22,24(sp)
    52a8:	dd000415 	stw	r20,16(sp)
    52ac:	dcc00315 	stw	r19,12(sp)
    52b0:	dc800215 	stw	r18,8(sp)
    52b4:	dc400115 	stw	r17,4(sp)
    52b8:	dc000015 	stw	r16,0(sp)
    52bc:	2540b804 	addi	r21,r4,736
    52c0:	a8002326 	beq	r21,zero,5350 <_fwalk_reent+0xbc>
    52c4:	2829883a 	mov	r20,r5
    52c8:	202d883a 	mov	r22,r4
    52cc:	002f883a 	mov	r23,zero
    52d0:	04c00044 	movi	r19,1
    52d4:	04bfffc4 	movi	r18,-1
    52d8:	ac400117 	ldw	r17,4(r21)
    52dc:	ac000217 	ldw	r16,8(r21)
    52e0:	8c7fffc4 	addi	r17,r17,-1
    52e4:	88000c16 	blt	r17,zero,5318 <_fwalk_reent+0x84>
    52e8:	84000304 	addi	r16,r16,12
    52ec:	80c0000b 	ldhu	r3,0(r16)
    52f0:	8c7fffc4 	addi	r17,r17,-1
    52f4:	817ffd04 	addi	r5,r16,-12
    52f8:	98c0052e 	bgeu	r19,r3,5310 <_fwalk_reent+0x7c>
    52fc:	80c0008f 	ldh	r3,2(r16)
    5300:	b009883a 	mov	r4,r22
    5304:	1c800226 	beq	r3,r18,5310 <_fwalk_reent+0x7c>
    5308:	a03ee83a 	callr	r20
    530c:	b8aeb03a 	or	r23,r23,r2
    5310:	84001a04 	addi	r16,r16,104
    5314:	8cbff51e 	bne	r17,r18,52ec <__alt_mem_Flash_flash_data+0xf40052ec>
    5318:	ad400017 	ldw	r21,0(r21)
    531c:	a83fee1e 	bne	r21,zero,52d8 <__alt_mem_Flash_flash_data+0xf40052d8>
    5320:	b805883a 	mov	r2,r23
    5324:	dfc00817 	ldw	ra,32(sp)
    5328:	ddc00717 	ldw	r23,28(sp)
    532c:	dd800617 	ldw	r22,24(sp)
    5330:	dd400517 	ldw	r21,20(sp)
    5334:	dd000417 	ldw	r20,16(sp)
    5338:	dcc00317 	ldw	r19,12(sp)
    533c:	dc800217 	ldw	r18,8(sp)
    5340:	dc400117 	ldw	r17,4(sp)
    5344:	dc000017 	ldw	r16,0(sp)
    5348:	dec00904 	addi	sp,sp,36
    534c:	f800283a 	ret
    5350:	002f883a 	mov	r23,zero
    5354:	003ff206 	br	5320 <__alt_mem_Flash_flash_data+0xf4005320>

00005358 <_setlocale_r>:
    5358:	30001b26 	beq	r6,zero,53c8 <_setlocale_r+0x70>
    535c:	014000b4 	movhi	r5,2
    5360:	defffe04 	addi	sp,sp,-8
    5364:	2965ad04 	addi	r5,r5,-26956
    5368:	3009883a 	mov	r4,r6
    536c:	dc000015 	stw	r16,0(sp)
    5370:	dfc00115 	stw	ra,4(sp)
    5374:	3021883a 	mov	r16,r6
    5378:	00072800 	call	7280 <strcmp>
    537c:	1000061e 	bne	r2,zero,5398 <_setlocale_r+0x40>
    5380:	008000b4 	movhi	r2,2
    5384:	10a5ac04 	addi	r2,r2,-26960
    5388:	dfc00117 	ldw	ra,4(sp)
    538c:	dc000017 	ldw	r16,0(sp)
    5390:	dec00204 	addi	sp,sp,8
    5394:	f800283a 	ret
    5398:	014000b4 	movhi	r5,2
    539c:	2965ac04 	addi	r5,r5,-26960
    53a0:	8009883a 	mov	r4,r16
    53a4:	00072800 	call	7280 <strcmp>
    53a8:	103ff526 	beq	r2,zero,5380 <__alt_mem_Flash_flash_data+0xf4005380>
    53ac:	014000b4 	movhi	r5,2
    53b0:	29659704 	addi	r5,r5,-27044
    53b4:	8009883a 	mov	r4,r16
    53b8:	00072800 	call	7280 <strcmp>
    53bc:	103ff026 	beq	r2,zero,5380 <__alt_mem_Flash_flash_data+0xf4005380>
    53c0:	0005883a 	mov	r2,zero
    53c4:	003ff006 	br	5388 <__alt_mem_Flash_flash_data+0xf4005388>
    53c8:	008000b4 	movhi	r2,2
    53cc:	10a5ac04 	addi	r2,r2,-26960
    53d0:	f800283a 	ret

000053d4 <__locale_charset>:
    53d4:	008000b4 	movhi	r2,2
    53d8:	10a80d04 	addi	r2,r2,-24524
    53dc:	f800283a 	ret

000053e0 <__locale_mb_cur_max>:
    53e0:	008000b4 	movhi	r2,2
    53e4:	10ae8f04 	addi	r2,r2,-17860
    53e8:	10800017 	ldw	r2,0(r2)
    53ec:	f800283a 	ret

000053f0 <__locale_msgcharset>:
    53f0:	008000b4 	movhi	r2,2
    53f4:	10a80504 	addi	r2,r2,-24556
    53f8:	f800283a 	ret

000053fc <__locale_cjk_lang>:
    53fc:	0005883a 	mov	r2,zero
    5400:	f800283a 	ret

00005404 <_localeconv_r>:
    5404:	008000b4 	movhi	r2,2
    5408:	10a81504 	addi	r2,r2,-24492
    540c:	f800283a 	ret

00005410 <setlocale>:
    5410:	00c000b4 	movhi	r3,2
    5414:	18ee8e04 	addi	r3,r3,-17864
    5418:	2005883a 	mov	r2,r4
    541c:	19000017 	ldw	r4,0(r3)
    5420:	280d883a 	mov	r6,r5
    5424:	100b883a 	mov	r5,r2
    5428:	00053581 	jmpi	5358 <_setlocale_r>

0000542c <localeconv>:
    542c:	008000b4 	movhi	r2,2
    5430:	10a81504 	addi	r2,r2,-24492
    5434:	f800283a 	ret

00005438 <__smakebuf_r>:
    5438:	2880030b 	ldhu	r2,12(r5)
    543c:	10c0008c 	andi	r3,r2,2
    5440:	1800401e 	bne	r3,zero,5544 <__smakebuf_r+0x10c>
    5444:	deffec04 	addi	sp,sp,-80
    5448:	dc000f15 	stw	r16,60(sp)
    544c:	2821883a 	mov	r16,r5
    5450:	2940038f 	ldh	r5,14(r5)
    5454:	dc401015 	stw	r17,64(sp)
    5458:	dfc01315 	stw	ra,76(sp)
    545c:	dcc01215 	stw	r19,72(sp)
    5460:	dc801115 	stw	r18,68(sp)
    5464:	2023883a 	mov	r17,r4
    5468:	28001b16 	blt	r5,zero,54d8 <__smakebuf_r+0xa0>
    546c:	d80d883a 	mov	r6,sp
    5470:	0008cd80 	call	8cd8 <_fstat_r>
    5474:	10001716 	blt	r2,zero,54d4 <__smakebuf_r+0x9c>
    5478:	d8800117 	ldw	r2,4(sp)
    547c:	00e00014 	movui	r3,32768
    5480:	10bc000c 	andi	r2,r2,61440
    5484:	10c03726 	beq	r2,r3,5564 <__smakebuf_r+0x12c>
    5488:	80c0030b 	ldhu	r3,12(r16)
    548c:	18c20014 	ori	r3,r3,2048
    5490:	80c0030d 	sth	r3,12(r16)
    5494:	00c80004 	movi	r3,8192
    5498:	10c03c1e 	bne	r2,r3,558c <__smakebuf_r+0x154>
    549c:	8140038f 	ldh	r5,14(r16)
    54a0:	8809883a 	mov	r4,r17
    54a4:	00091f00 	call	91f0 <_isatty_r>
    54a8:	10004e26 	beq	r2,zero,55e4 <__smakebuf_r+0x1ac>
    54ac:	8080030b 	ldhu	r2,12(r16)
    54b0:	04c00044 	movi	r19,1
    54b4:	80c010c4 	addi	r3,r16,67
    54b8:	14c4b03a 	or	r2,r2,r19
    54bc:	8080030d 	sth	r2,12(r16)
    54c0:	80c00015 	stw	r3,0(r16)
    54c4:	80c00415 	stw	r3,16(r16)
    54c8:	84c00515 	stw	r19,20(r16)
    54cc:	04810004 	movi	r18,1024
    54d0:	00000706 	br	54f0 <__smakebuf_r+0xb8>
    54d4:	8080030b 	ldhu	r2,12(r16)
    54d8:	10c0200c 	andi	r3,r2,128
    54dc:	18001f1e 	bne	r3,zero,555c <__smakebuf_r+0x124>
    54e0:	04810004 	movi	r18,1024
    54e4:	10820014 	ori	r2,r2,2048
    54e8:	8080030d 	sth	r2,12(r16)
    54ec:	0027883a 	mov	r19,zero
    54f0:	8809883a 	mov	r4,r17
    54f4:	900b883a 	mov	r5,r18
    54f8:	00055f00 	call	55f0 <_malloc_r>
    54fc:	10002e26 	beq	r2,zero,55b8 <__smakebuf_r+0x180>
    5500:	80c0030b 	ldhu	r3,12(r16)
    5504:	01000034 	movhi	r4,0
    5508:	21128b04 	addi	r4,r4,18988
    550c:	89000f15 	stw	r4,60(r17)
    5510:	18c02014 	ori	r3,r3,128
    5514:	80c0030d 	sth	r3,12(r16)
    5518:	80800015 	stw	r2,0(r16)
    551c:	80800415 	stw	r2,16(r16)
    5520:	84800515 	stw	r18,20(r16)
    5524:	98001c1e 	bne	r19,zero,5598 <__smakebuf_r+0x160>
    5528:	dfc01317 	ldw	ra,76(sp)
    552c:	dcc01217 	ldw	r19,72(sp)
    5530:	dc801117 	ldw	r18,68(sp)
    5534:	dc401017 	ldw	r17,64(sp)
    5538:	dc000f17 	ldw	r16,60(sp)
    553c:	dec01404 	addi	sp,sp,80
    5540:	f800283a 	ret
    5544:	288010c4 	addi	r2,r5,67
    5548:	28800015 	stw	r2,0(r5)
    554c:	28800415 	stw	r2,16(r5)
    5550:	00800044 	movi	r2,1
    5554:	28800515 	stw	r2,20(r5)
    5558:	f800283a 	ret
    555c:	04801004 	movi	r18,64
    5560:	003fe006 	br	54e4 <__alt_mem_Flash_flash_data+0xf40054e4>
    5564:	81000a17 	ldw	r4,40(r16)
    5568:	00c00034 	movhi	r3,0
    556c:	18dc8704 	addi	r3,r3,29212
    5570:	20ffc51e 	bne	r4,r3,5488 <__alt_mem_Flash_flash_data+0xf4005488>
    5574:	80c0030b 	ldhu	r3,12(r16)
    5578:	01010004 	movi	r4,1024
    557c:	81001315 	stw	r4,76(r16)
    5580:	1906b03a 	or	r3,r3,r4
    5584:	80c0030d 	sth	r3,12(r16)
    5588:	003fc206 	br	5494 <__alt_mem_Flash_flash_data+0xf4005494>
    558c:	0027883a 	mov	r19,zero
    5590:	04810004 	movi	r18,1024
    5594:	003fd606 	br	54f0 <__alt_mem_Flash_flash_data+0xf40054f0>
    5598:	8140038f 	ldh	r5,14(r16)
    559c:	8809883a 	mov	r4,r17
    55a0:	00091f00 	call	91f0 <_isatty_r>
    55a4:	103fe026 	beq	r2,zero,5528 <__alt_mem_Flash_flash_data+0xf4005528>
    55a8:	8080030b 	ldhu	r2,12(r16)
    55ac:	10800054 	ori	r2,r2,1
    55b0:	8080030d 	sth	r2,12(r16)
    55b4:	003fdc06 	br	5528 <__alt_mem_Flash_flash_data+0xf4005528>
    55b8:	8080030b 	ldhu	r2,12(r16)
    55bc:	10c0800c 	andi	r3,r2,512
    55c0:	183fd91e 	bne	r3,zero,5528 <__alt_mem_Flash_flash_data+0xf4005528>
    55c4:	10800094 	ori	r2,r2,2
    55c8:	80c010c4 	addi	r3,r16,67
    55cc:	8080030d 	sth	r2,12(r16)
    55d0:	00800044 	movi	r2,1
    55d4:	80c00015 	stw	r3,0(r16)
    55d8:	80c00415 	stw	r3,16(r16)
    55dc:	80800515 	stw	r2,20(r16)
    55e0:	003fd106 	br	5528 <__alt_mem_Flash_flash_data+0xf4005528>
    55e4:	04c00044 	movi	r19,1
    55e8:	04810004 	movi	r18,1024
    55ec:	003fc006 	br	54f0 <__alt_mem_Flash_flash_data+0xf40054f0>

000055f0 <_malloc_r>:
    55f0:	defff504 	addi	sp,sp,-44
    55f4:	dc800315 	stw	r18,12(sp)
    55f8:	dfc00a15 	stw	ra,40(sp)
    55fc:	df000915 	stw	fp,36(sp)
    5600:	ddc00815 	stw	r23,32(sp)
    5604:	dd800715 	stw	r22,28(sp)
    5608:	dd400615 	stw	r21,24(sp)
    560c:	dd000515 	stw	r20,20(sp)
    5610:	dcc00415 	stw	r19,16(sp)
    5614:	dc400215 	stw	r17,8(sp)
    5618:	dc000115 	stw	r16,4(sp)
    561c:	288002c4 	addi	r2,r5,11
    5620:	00c00584 	movi	r3,22
    5624:	2025883a 	mov	r18,r4
    5628:	18802a2e 	bgeu	r3,r2,56d4 <_malloc_r+0xe4>
    562c:	047ffe04 	movi	r17,-8
    5630:	1462703a 	and	r17,r2,r17
    5634:	88009e16 	blt	r17,zero,58b0 <_malloc_r+0x2c0>
    5638:	89409d36 	bltu	r17,r5,58b0 <_malloc_r+0x2c0>
    563c:	000da540 	call	da54 <__malloc_lock>
    5640:	00807dc4 	movi	r2,503
    5644:	14402736 	bltu	r2,r17,56e4 <_malloc_r+0xf4>
    5648:	8806d0fa 	srli	r3,r17,3
    564c:	04c000b4 	movhi	r19,2
    5650:	9ce82304 	addi	r19,r19,-24436
    5654:	18c5883a 	add	r2,r3,r3
    5658:	1085883a 	add	r2,r2,r2
    565c:	1085883a 	add	r2,r2,r2
    5660:	9885883a 	add	r2,r19,r2
    5664:	14000317 	ldw	r16,12(r2)
    5668:	80814a26 	beq	r16,r2,5b94 <_malloc_r+0x5a4>
    566c:	80c00117 	ldw	r3,4(r16)
    5670:	81000317 	ldw	r4,12(r16)
    5674:	00bfff04 	movi	r2,-4
    5678:	1884703a 	and	r2,r3,r2
    567c:	81400217 	ldw	r5,8(r16)
    5680:	8085883a 	add	r2,r16,r2
    5684:	10c00117 	ldw	r3,4(r2)
    5688:	29000315 	stw	r4,12(r5)
    568c:	21400215 	stw	r5,8(r4)
    5690:	18c00054 	ori	r3,r3,1
    5694:	10c00115 	stw	r3,4(r2)
    5698:	9009883a 	mov	r4,r18
    569c:	000db740 	call	db74 <__malloc_unlock>
    56a0:	80800204 	addi	r2,r16,8
    56a4:	dfc00a17 	ldw	ra,40(sp)
    56a8:	df000917 	ldw	fp,36(sp)
    56ac:	ddc00817 	ldw	r23,32(sp)
    56b0:	dd800717 	ldw	r22,28(sp)
    56b4:	dd400617 	ldw	r21,24(sp)
    56b8:	dd000517 	ldw	r20,20(sp)
    56bc:	dcc00417 	ldw	r19,16(sp)
    56c0:	dc800317 	ldw	r18,12(sp)
    56c4:	dc400217 	ldw	r17,8(sp)
    56c8:	dc000117 	ldw	r16,4(sp)
    56cc:	dec00b04 	addi	sp,sp,44
    56d0:	f800283a 	ret
    56d4:	04400404 	movi	r17,16
    56d8:	89407536 	bltu	r17,r5,58b0 <_malloc_r+0x2c0>
    56dc:	000da540 	call	da54 <__malloc_lock>
    56e0:	003fd906 	br	5648 <__alt_mem_Flash_flash_data+0xf4005648>
    56e4:	8806d27a 	srli	r3,r17,9
    56e8:	18007526 	beq	r3,zero,58c0 <_malloc_r+0x2d0>
    56ec:	00800104 	movi	r2,4
    56f0:	10c0ef36 	bltu	r2,r3,5ab0 <_malloc_r+0x4c0>
    56f4:	8806d1ba 	srli	r3,r17,6
    56f8:	19c00e04 	addi	r7,r3,56
    56fc:	39cb883a 	add	r5,r7,r7
    5700:	04c000b4 	movhi	r19,2
    5704:	294b883a 	add	r5,r5,r5
    5708:	9ce82304 	addi	r19,r19,-24436
    570c:	294b883a 	add	r5,r5,r5
    5710:	994b883a 	add	r5,r19,r5
    5714:	2c000317 	ldw	r16,12(r5)
    5718:	2c000e26 	beq	r5,r16,5754 <_malloc_r+0x164>
    571c:	80800117 	ldw	r2,4(r16)
    5720:	01bfff04 	movi	r6,-4
    5724:	010003c4 	movi	r4,15
    5728:	1184703a 	and	r2,r2,r6
    572c:	1447c83a 	sub	r3,r2,r17
    5730:	20c00716 	blt	r4,r3,5750 <_malloc_r+0x160>
    5734:	1800650e 	bge	r3,zero,58cc <_malloc_r+0x2dc>
    5738:	84000317 	ldw	r16,12(r16)
    573c:	2c000526 	beq	r5,r16,5754 <_malloc_r+0x164>
    5740:	80800117 	ldw	r2,4(r16)
    5744:	1184703a 	and	r2,r2,r6
    5748:	1447c83a 	sub	r3,r2,r17
    574c:	20fff90e 	bge	r4,r3,5734 <__alt_mem_Flash_flash_data+0xf4005734>
    5750:	39ffffc4 	addi	r7,r7,-1
    5754:	38c00044 	addi	r3,r7,1
    5758:	018000b4 	movhi	r6,2
    575c:	9c000417 	ldw	r16,16(r19)
    5760:	31a82304 	addi	r6,r6,-24436
    5764:	32400204 	addi	r9,r6,8
    5768:	82410326 	beq	r16,r9,5b78 <_malloc_r+0x588>
    576c:	81000117 	ldw	r4,4(r16)
    5770:	00bfff04 	movi	r2,-4
    5774:	208e703a 	and	r7,r4,r2
    5778:	3c45c83a 	sub	r2,r7,r17
    577c:	010003c4 	movi	r4,15
    5780:	2080ee16 	blt	r4,r2,5b3c <_malloc_r+0x54c>
    5784:	32400515 	stw	r9,20(r6)
    5788:	32400415 	stw	r9,16(r6)
    578c:	1000510e 	bge	r2,zero,58d4 <_malloc_r+0x2e4>
    5790:	00807fc4 	movi	r2,511
    5794:	11c0ce36 	bltu	r2,r7,5ad0 <_malloc_r+0x4e0>
    5798:	3808d0fa 	srli	r4,r7,3
    579c:	01c00044 	movi	r7,1
    57a0:	30800117 	ldw	r2,4(r6)
    57a4:	210b883a 	add	r5,r4,r4
    57a8:	294b883a 	add	r5,r5,r5
    57ac:	2009d0ba 	srai	r4,r4,2
    57b0:	294b883a 	add	r5,r5,r5
    57b4:	298b883a 	add	r5,r5,r6
    57b8:	2a000217 	ldw	r8,8(r5)
    57bc:	3908983a 	sll	r4,r7,r4
    57c0:	81400315 	stw	r5,12(r16)
    57c4:	82000215 	stw	r8,8(r16)
    57c8:	2088b03a 	or	r4,r4,r2
    57cc:	2c000215 	stw	r16,8(r5)
    57d0:	31000115 	stw	r4,4(r6)
    57d4:	44000315 	stw	r16,12(r8)
    57d8:	1805d0ba 	srai	r2,r3,2
    57dc:	01400044 	movi	r5,1
    57e0:	288a983a 	sll	r5,r5,r2
    57e4:	21404336 	bltu	r4,r5,58f4 <_malloc_r+0x304>
    57e8:	2144703a 	and	r2,r4,r5
    57ec:	10000a1e 	bne	r2,zero,5818 <_malloc_r+0x228>
    57f0:	00bfff04 	movi	r2,-4
    57f4:	294b883a 	add	r5,r5,r5
    57f8:	1886703a 	and	r3,r3,r2
    57fc:	2144703a 	and	r2,r4,r5
    5800:	18c00104 	addi	r3,r3,4
    5804:	1000041e 	bne	r2,zero,5818 <_malloc_r+0x228>
    5808:	294b883a 	add	r5,r5,r5
    580c:	2144703a 	and	r2,r4,r5
    5810:	18c00104 	addi	r3,r3,4
    5814:	103ffc26 	beq	r2,zero,5808 <__alt_mem_Flash_flash_data+0xf4005808>
    5818:	023fff04 	movi	r8,-4
    581c:	01c003c4 	movi	r7,15
    5820:	18c5883a 	add	r2,r3,r3
    5824:	1085883a 	add	r2,r2,r2
    5828:	1085883a 	add	r2,r2,r2
    582c:	9895883a 	add	r10,r19,r2
    5830:	52c00304 	addi	r11,r10,12
    5834:	1819883a 	mov	r12,r3
    5838:	5c000017 	ldw	r16,0(r11)
    583c:	59bffd04 	addi	r6,r11,-12
    5840:	8180041e 	bne	r16,r6,5854 <_malloc_r+0x264>
    5844:	0000ce06 	br	5b80 <_malloc_r+0x590>
    5848:	2000d70e 	bge	r4,zero,5ba8 <_malloc_r+0x5b8>
    584c:	84000317 	ldw	r16,12(r16)
    5850:	8180cb26 	beq	r16,r6,5b80 <_malloc_r+0x590>
    5854:	80800117 	ldw	r2,4(r16)
    5858:	1204703a 	and	r2,r2,r8
    585c:	1449c83a 	sub	r4,r2,r17
    5860:	393ff90e 	bge	r7,r4,5848 <__alt_mem_Flash_flash_data+0xf4005848>
    5864:	80800317 	ldw	r2,12(r16)
    5868:	80c00217 	ldw	r3,8(r16)
    586c:	89400054 	ori	r5,r17,1
    5870:	81400115 	stw	r5,4(r16)
    5874:	18800315 	stw	r2,12(r3)
    5878:	10c00215 	stw	r3,8(r2)
    587c:	8463883a 	add	r17,r16,r17
    5880:	9c400515 	stw	r17,20(r19)
    5884:	9c400415 	stw	r17,16(r19)
    5888:	20800054 	ori	r2,r4,1
    588c:	88800115 	stw	r2,4(r17)
    5890:	8a400315 	stw	r9,12(r17)
    5894:	8a400215 	stw	r9,8(r17)
    5898:	8923883a 	add	r17,r17,r4
    589c:	89000015 	stw	r4,0(r17)
    58a0:	9009883a 	mov	r4,r18
    58a4:	000db740 	call	db74 <__malloc_unlock>
    58a8:	80800204 	addi	r2,r16,8
    58ac:	003f7d06 	br	56a4 <__alt_mem_Flash_flash_data+0xf40056a4>
    58b0:	00800304 	movi	r2,12
    58b4:	90800015 	stw	r2,0(r18)
    58b8:	0005883a 	mov	r2,zero
    58bc:	003f7906 	br	56a4 <__alt_mem_Flash_flash_data+0xf40056a4>
    58c0:	01401f84 	movi	r5,126
    58c4:	01c00fc4 	movi	r7,63
    58c8:	003f8d06 	br	5700 <__alt_mem_Flash_flash_data+0xf4005700>
    58cc:	81000317 	ldw	r4,12(r16)
    58d0:	003f6a06 	br	567c <__alt_mem_Flash_flash_data+0xf400567c>
    58d4:	81c5883a 	add	r2,r16,r7
    58d8:	10c00117 	ldw	r3,4(r2)
    58dc:	9009883a 	mov	r4,r18
    58e0:	18c00054 	ori	r3,r3,1
    58e4:	10c00115 	stw	r3,4(r2)
    58e8:	000db740 	call	db74 <__malloc_unlock>
    58ec:	80800204 	addi	r2,r16,8
    58f0:	003f6c06 	br	56a4 <__alt_mem_Flash_flash_data+0xf40056a4>
    58f4:	9c000217 	ldw	r16,8(r19)
    58f8:	00bfff04 	movi	r2,-4
    58fc:	85800117 	ldw	r22,4(r16)
    5900:	b0ac703a 	and	r22,r22,r2
    5904:	b4400336 	bltu	r22,r17,5914 <_malloc_r+0x324>
    5908:	b445c83a 	sub	r2,r22,r17
    590c:	00c003c4 	movi	r3,15
    5910:	18805d16 	blt	r3,r2,5a88 <_malloc_r+0x498>
    5914:	05c000b4 	movhi	r23,2
    5918:	008000b4 	movhi	r2,2
    591c:	bdee9004 	addi	r23,r23,-17856
    5920:	10b68204 	addi	r2,r2,-9720
    5924:	15400017 	ldw	r21,0(r2)
    5928:	b9000017 	ldw	r4,0(r23)
    592c:	00ffffc4 	movi	r3,-1
    5930:	858d883a 	add	r6,r16,r22
    5934:	8d6b883a 	add	r21,r17,r21
    5938:	20c0e426 	beq	r4,r3,5ccc <_malloc_r+0x6dc>
    593c:	ad4403c4 	addi	r21,r21,4111
    5940:	00fc0004 	movi	r3,-4096
    5944:	a8ea703a 	and	r21,r21,r3
    5948:	9009883a 	mov	r4,r18
    594c:	a80b883a 	mov	r5,r21
    5950:	d9800015 	stw	r6,0(sp)
    5954:	00070f00 	call	70f0 <_sbrk_r>
    5958:	00ffffc4 	movi	r3,-1
    595c:	1029883a 	mov	r20,r2
    5960:	d9800017 	ldw	r6,0(sp)
    5964:	10c0a426 	beq	r2,r3,5bf8 <_malloc_r+0x608>
    5968:	1180a236 	bltu	r2,r6,5bf4 <_malloc_r+0x604>
    596c:	070000b4 	movhi	fp,2
    5970:	e736a404 	addi	fp,fp,-9584
    5974:	e0c00017 	ldw	r3,0(fp)
    5978:	a8c7883a 	add	r3,r21,r3
    597c:	e0c00015 	stw	r3,0(fp)
    5980:	3500da26 	beq	r6,r20,5cec <_malloc_r+0x6fc>
    5984:	b9000017 	ldw	r4,0(r23)
    5988:	00bfffc4 	movi	r2,-1
    598c:	2080e426 	beq	r4,r2,5d20 <_malloc_r+0x730>
    5990:	a185c83a 	sub	r2,r20,r6
    5994:	1885883a 	add	r2,r3,r2
    5998:	e0800015 	stw	r2,0(fp)
    599c:	a0c001cc 	andi	r3,r20,7
    59a0:	1800b526 	beq	r3,zero,5c78 <_malloc_r+0x688>
    59a4:	a0e9c83a 	sub	r20,r20,r3
    59a8:	00840204 	movi	r2,4104
    59ac:	a5000204 	addi	r20,r20,8
    59b0:	10c7c83a 	sub	r3,r2,r3
    59b4:	a545883a 	add	r2,r20,r21
    59b8:	1083ffcc 	andi	r2,r2,4095
    59bc:	18abc83a 	sub	r21,r3,r2
    59c0:	9009883a 	mov	r4,r18
    59c4:	a80b883a 	mov	r5,r21
    59c8:	00070f00 	call	70f0 <_sbrk_r>
    59cc:	00ffffc4 	movi	r3,-1
    59d0:	10c0d026 	beq	r2,r3,5d14 <_malloc_r+0x724>
    59d4:	1507c83a 	sub	r3,r2,r20
    59d8:	a8c7883a 	add	r3,r21,r3
    59dc:	18c00054 	ori	r3,r3,1
    59e0:	e0800017 	ldw	r2,0(fp)
    59e4:	9d000215 	stw	r20,8(r19)
    59e8:	a0c00115 	stw	r3,4(r20)
    59ec:	a887883a 	add	r3,r21,r2
    59f0:	e0c00015 	stw	r3,0(fp)
    59f4:	84c00e26 	beq	r16,r19,5a30 <_malloc_r+0x440>
    59f8:	018003c4 	movi	r6,15
    59fc:	3580a02e 	bgeu	r6,r22,5c80 <_malloc_r+0x690>
    5a00:	81400117 	ldw	r5,4(r16)
    5a04:	013ffe04 	movi	r4,-8
    5a08:	b0bffd04 	addi	r2,r22,-12
    5a0c:	1104703a 	and	r2,r2,r4
    5a10:	2900004c 	andi	r4,r5,1
    5a14:	1108b03a 	or	r4,r2,r4
    5a18:	81000115 	stw	r4,4(r16)
    5a1c:	01400144 	movi	r5,5
    5a20:	8089883a 	add	r4,r16,r2
    5a24:	21400115 	stw	r5,4(r4)
    5a28:	21400215 	stw	r5,8(r4)
    5a2c:	3080c036 	bltu	r6,r2,5d30 <_malloc_r+0x740>
    5a30:	008000b4 	movhi	r2,2
    5a34:	10b68104 	addi	r2,r2,-9724
    5a38:	11000017 	ldw	r4,0(r2)
    5a3c:	20c0012e 	bgeu	r4,r3,5a44 <_malloc_r+0x454>
    5a40:	10c00015 	stw	r3,0(r2)
    5a44:	008000b4 	movhi	r2,2
    5a48:	10b68004 	addi	r2,r2,-9728
    5a4c:	11000017 	ldw	r4,0(r2)
    5a50:	9c000217 	ldw	r16,8(r19)
    5a54:	20c0012e 	bgeu	r4,r3,5a5c <_malloc_r+0x46c>
    5a58:	10c00015 	stw	r3,0(r2)
    5a5c:	80c00117 	ldw	r3,4(r16)
    5a60:	00bfff04 	movi	r2,-4
    5a64:	1886703a 	and	r3,r3,r2
    5a68:	1c45c83a 	sub	r2,r3,r17
    5a6c:	1c400236 	bltu	r3,r17,5a78 <_malloc_r+0x488>
    5a70:	00c003c4 	movi	r3,15
    5a74:	18800416 	blt	r3,r2,5a88 <_malloc_r+0x498>
    5a78:	9009883a 	mov	r4,r18
    5a7c:	000db740 	call	db74 <__malloc_unlock>
    5a80:	0005883a 	mov	r2,zero
    5a84:	003f0706 	br	56a4 <__alt_mem_Flash_flash_data+0xf40056a4>
    5a88:	88c00054 	ori	r3,r17,1
    5a8c:	80c00115 	stw	r3,4(r16)
    5a90:	8463883a 	add	r17,r16,r17
    5a94:	10800054 	ori	r2,r2,1
    5a98:	9c400215 	stw	r17,8(r19)
    5a9c:	88800115 	stw	r2,4(r17)
    5aa0:	9009883a 	mov	r4,r18
    5aa4:	000db740 	call	db74 <__malloc_unlock>
    5aa8:	80800204 	addi	r2,r16,8
    5aac:	003efd06 	br	56a4 <__alt_mem_Flash_flash_data+0xf40056a4>
    5ab0:	00800504 	movi	r2,20
    5ab4:	10c0482e 	bgeu	r2,r3,5bd8 <_malloc_r+0x5e8>
    5ab8:	00801504 	movi	r2,84
    5abc:	10c06836 	bltu	r2,r3,5c60 <_malloc_r+0x670>
    5ac0:	8806d33a 	srli	r3,r17,12
    5ac4:	19c01b84 	addi	r7,r3,110
    5ac8:	39cb883a 	add	r5,r7,r7
    5acc:	003f0c06 	br	5700 <__alt_mem_Flash_flash_data+0xf4005700>
    5ad0:	3804d27a 	srli	r2,r7,9
    5ad4:	01000104 	movi	r4,4
    5ad8:	2080422e 	bgeu	r4,r2,5be4 <_malloc_r+0x5f4>
    5adc:	01000504 	movi	r4,20
    5ae0:	20807c36 	bltu	r4,r2,5cd4 <_malloc_r+0x6e4>
    5ae4:	110016c4 	addi	r4,r2,91
    5ae8:	210b883a 	add	r5,r4,r4
    5aec:	294b883a 	add	r5,r5,r5
    5af0:	294b883a 	add	r5,r5,r5
    5af4:	994b883a 	add	r5,r19,r5
    5af8:	28800217 	ldw	r2,8(r5)
    5afc:	020000b4 	movhi	r8,2
    5b00:	42282304 	addi	r8,r8,-24436
    5b04:	11406326 	beq	r2,r5,5c94 <_malloc_r+0x6a4>
    5b08:	01bfff04 	movi	r6,-4
    5b0c:	11000117 	ldw	r4,4(r2)
    5b10:	2188703a 	and	r4,r4,r6
    5b14:	3900022e 	bgeu	r7,r4,5b20 <_malloc_r+0x530>
    5b18:	10800217 	ldw	r2,8(r2)
    5b1c:	28bffb1e 	bne	r5,r2,5b0c <__alt_mem_Flash_flash_data+0xf4005b0c>
    5b20:	11800317 	ldw	r6,12(r2)
    5b24:	99000117 	ldw	r4,4(r19)
    5b28:	81800315 	stw	r6,12(r16)
    5b2c:	80800215 	stw	r2,8(r16)
    5b30:	34000215 	stw	r16,8(r6)
    5b34:	14000315 	stw	r16,12(r2)
    5b38:	003f2706 	br	57d8 <__alt_mem_Flash_flash_data+0xf40057d8>
    5b3c:	88c00054 	ori	r3,r17,1
    5b40:	80c00115 	stw	r3,4(r16)
    5b44:	8463883a 	add	r17,r16,r17
    5b48:	34400515 	stw	r17,20(r6)
    5b4c:	34400415 	stw	r17,16(r6)
    5b50:	10c00054 	ori	r3,r2,1
    5b54:	8a400315 	stw	r9,12(r17)
    5b58:	8a400215 	stw	r9,8(r17)
    5b5c:	88c00115 	stw	r3,4(r17)
    5b60:	88a3883a 	add	r17,r17,r2
    5b64:	88800015 	stw	r2,0(r17)
    5b68:	9009883a 	mov	r4,r18
    5b6c:	000db740 	call	db74 <__malloc_unlock>
    5b70:	80800204 	addi	r2,r16,8
    5b74:	003ecb06 	br	56a4 <__alt_mem_Flash_flash_data+0xf40056a4>
    5b78:	31000117 	ldw	r4,4(r6)
    5b7c:	003f1606 	br	57d8 <__alt_mem_Flash_flash_data+0xf40057d8>
    5b80:	63000044 	addi	r12,r12,1
    5b84:	608000cc 	andi	r2,r12,3
    5b88:	5ac00204 	addi	r11,r11,8
    5b8c:	103f2a1e 	bne	r2,zero,5838 <__alt_mem_Flash_flash_data+0xf4005838>
    5b90:	00002106 	br	5c18 <_malloc_r+0x628>
    5b94:	80800204 	addi	r2,r16,8
    5b98:	84000517 	ldw	r16,20(r16)
    5b9c:	143eb31e 	bne	r2,r16,566c <__alt_mem_Flash_flash_data+0xf400566c>
    5ba0:	18c00084 	addi	r3,r3,2
    5ba4:	003eec06 	br	5758 <__alt_mem_Flash_flash_data+0xf4005758>
    5ba8:	8085883a 	add	r2,r16,r2
    5bac:	10c00117 	ldw	r3,4(r2)
    5bb0:	81000317 	ldw	r4,12(r16)
    5bb4:	81400217 	ldw	r5,8(r16)
    5bb8:	18c00054 	ori	r3,r3,1
    5bbc:	10c00115 	stw	r3,4(r2)
    5bc0:	29000315 	stw	r4,12(r5)
    5bc4:	21400215 	stw	r5,8(r4)
    5bc8:	9009883a 	mov	r4,r18
    5bcc:	000db740 	call	db74 <__malloc_unlock>
    5bd0:	80800204 	addi	r2,r16,8
    5bd4:	003eb306 	br	56a4 <__alt_mem_Flash_flash_data+0xf40056a4>
    5bd8:	19c016c4 	addi	r7,r3,91
    5bdc:	39cb883a 	add	r5,r7,r7
    5be0:	003ec706 	br	5700 <__alt_mem_Flash_flash_data+0xf4005700>
    5be4:	3804d1ba 	srli	r2,r7,6
    5be8:	11000e04 	addi	r4,r2,56
    5bec:	210b883a 	add	r5,r4,r4
    5bf0:	003fbe06 	br	5aec <__alt_mem_Flash_flash_data+0xf4005aec>
    5bf4:	84ff5d26 	beq	r16,r19,596c <__alt_mem_Flash_flash_data+0xf400596c>
    5bf8:	9c000217 	ldw	r16,8(r19)
    5bfc:	00bfff04 	movi	r2,-4
    5c00:	80c00117 	ldw	r3,4(r16)
    5c04:	1886703a 	and	r3,r3,r2
    5c08:	003f9706 	br	5a68 <__alt_mem_Flash_flash_data+0xf4005a68>
    5c0c:	52800017 	ldw	r10,0(r10)
    5c10:	18ffffc4 	addi	r3,r3,-1
    5c14:	50805c1e 	bne	r10,r2,5d88 <_malloc_r+0x798>
    5c18:	190000cc 	andi	r4,r3,3
    5c1c:	50bffe04 	addi	r2,r10,-8
    5c20:	203ffa1e 	bne	r4,zero,5c0c <__alt_mem_Flash_flash_data+0xf4005c0c>
    5c24:	98800117 	ldw	r2,4(r19)
    5c28:	0146303a 	nor	r3,zero,r5
    5c2c:	1884703a 	and	r2,r3,r2
    5c30:	98800115 	stw	r2,4(r19)
    5c34:	294b883a 	add	r5,r5,r5
    5c38:	117f2e36 	bltu	r2,r5,58f4 <__alt_mem_Flash_flash_data+0xf40058f4>
    5c3c:	283f2d26 	beq	r5,zero,58f4 <__alt_mem_Flash_flash_data+0xf40058f4>
    5c40:	1146703a 	and	r3,r2,r5
    5c44:	1800521e 	bne	r3,zero,5d90 <_malloc_r+0x7a0>
    5c48:	6007883a 	mov	r3,r12
    5c4c:	294b883a 	add	r5,r5,r5
    5c50:	1148703a 	and	r4,r2,r5
    5c54:	18c00104 	addi	r3,r3,4
    5c58:	203ffc26 	beq	r4,zero,5c4c <__alt_mem_Flash_flash_data+0xf4005c4c>
    5c5c:	003ef006 	br	5820 <__alt_mem_Flash_flash_data+0xf4005820>
    5c60:	00805504 	movi	r2,340
    5c64:	10c01336 	bltu	r2,r3,5cb4 <_malloc_r+0x6c4>
    5c68:	8806d3fa 	srli	r3,r17,15
    5c6c:	19c01dc4 	addi	r7,r3,119
    5c70:	39cb883a 	add	r5,r7,r7
    5c74:	003ea206 	br	5700 <__alt_mem_Flash_flash_data+0xf4005700>
    5c78:	00c40004 	movi	r3,4096
    5c7c:	003f4d06 	br	59b4 <__alt_mem_Flash_flash_data+0xf40059b4>
    5c80:	00800044 	movi	r2,1
    5c84:	a0800115 	stw	r2,4(r20)
    5c88:	a021883a 	mov	r16,r20
    5c8c:	0007883a 	mov	r3,zero
    5c90:	003f7506 	br	5a68 <__alt_mem_Flash_flash_data+0xf4005a68>
    5c94:	200bd0ba 	srai	r5,r4,2
    5c98:	01800044 	movi	r6,1
    5c9c:	41000117 	ldw	r4,4(r8)
    5ca0:	314a983a 	sll	r5,r6,r5
    5ca4:	100d883a 	mov	r6,r2
    5ca8:	2908b03a 	or	r4,r5,r4
    5cac:	41000115 	stw	r4,4(r8)
    5cb0:	003f9d06 	br	5b28 <__alt_mem_Flash_flash_data+0xf4005b28>
    5cb4:	00815504 	movi	r2,1364
    5cb8:	10c01336 	bltu	r2,r3,5d08 <_malloc_r+0x718>
    5cbc:	8806d4ba 	srli	r3,r17,18
    5cc0:	19c01f04 	addi	r7,r3,124
    5cc4:	39cb883a 	add	r5,r7,r7
    5cc8:	003e8d06 	br	5700 <__alt_mem_Flash_flash_data+0xf4005700>
    5ccc:	ad400404 	addi	r21,r21,16
    5cd0:	003f1d06 	br	5948 <__alt_mem_Flash_flash_data+0xf4005948>
    5cd4:	01001504 	movi	r4,84
    5cd8:	20801c36 	bltu	r4,r2,5d4c <_malloc_r+0x75c>
    5cdc:	3804d33a 	srli	r2,r7,12
    5ce0:	11001b84 	addi	r4,r2,110
    5ce4:	210b883a 	add	r5,r4,r4
    5ce8:	003f8006 	br	5aec <__alt_mem_Flash_flash_data+0xf4005aec>
    5cec:	3083ffcc 	andi	r2,r6,4095
    5cf0:	103f241e 	bne	r2,zero,5984 <__alt_mem_Flash_flash_data+0xf4005984>
    5cf4:	99000217 	ldw	r4,8(r19)
    5cf8:	ad85883a 	add	r2,r21,r22
    5cfc:	10800054 	ori	r2,r2,1
    5d00:	20800115 	stw	r2,4(r4)
    5d04:	003f4a06 	br	5a30 <__alt_mem_Flash_flash_data+0xf4005a30>
    5d08:	01403f04 	movi	r5,252
    5d0c:	01c01f84 	movi	r7,126
    5d10:	003e7b06 	br	5700 <__alt_mem_Flash_flash_data+0xf4005700>
    5d14:	00c00044 	movi	r3,1
    5d18:	002b883a 	mov	r21,zero
    5d1c:	003f3006 	br	59e0 <__alt_mem_Flash_flash_data+0xf40059e0>
    5d20:	008000b4 	movhi	r2,2
    5d24:	10ae9004 	addi	r2,r2,-17856
    5d28:	15000015 	stw	r20,0(r2)
    5d2c:	003f1b06 	br	599c <__alt_mem_Flash_flash_data+0xf400599c>
    5d30:	9009883a 	mov	r4,r18
    5d34:	81400204 	addi	r5,r16,8
    5d38:	0004ee00 	call	4ee0 <_free_r>
    5d3c:	008000b4 	movhi	r2,2
    5d40:	10b6a404 	addi	r2,r2,-9584
    5d44:	10c00017 	ldw	r3,0(r2)
    5d48:	003f3906 	br	5a30 <__alt_mem_Flash_flash_data+0xf4005a30>
    5d4c:	01005504 	movi	r4,340
    5d50:	20800436 	bltu	r4,r2,5d64 <_malloc_r+0x774>
    5d54:	3804d3fa 	srli	r2,r7,15
    5d58:	11001dc4 	addi	r4,r2,119
    5d5c:	210b883a 	add	r5,r4,r4
    5d60:	003f6206 	br	5aec <__alt_mem_Flash_flash_data+0xf4005aec>
    5d64:	01015504 	movi	r4,1364
    5d68:	20800436 	bltu	r4,r2,5d7c <_malloc_r+0x78c>
    5d6c:	3804d4ba 	srli	r2,r7,18
    5d70:	11001f04 	addi	r4,r2,124
    5d74:	210b883a 	add	r5,r4,r4
    5d78:	003f5c06 	br	5aec <__alt_mem_Flash_flash_data+0xf4005aec>
    5d7c:	01403f04 	movi	r5,252
    5d80:	01001f84 	movi	r4,126
    5d84:	003f5906 	br	5aec <__alt_mem_Flash_flash_data+0xf4005aec>
    5d88:	98800117 	ldw	r2,4(r19)
    5d8c:	003fa906 	br	5c34 <__alt_mem_Flash_flash_data+0xf4005c34>
    5d90:	6007883a 	mov	r3,r12
    5d94:	003ea206 	br	5820 <__alt_mem_Flash_flash_data+0xf4005820>

00005d98 <memchr>:
    5d98:	208000cc 	andi	r2,r4,3
    5d9c:	280f883a 	mov	r7,r5
    5da0:	10003526 	beq	r2,zero,5e78 <memchr+0xe0>
    5da4:	30bfffc4 	addi	r2,r6,-1
    5da8:	30001b26 	beq	r6,zero,5e18 <memchr+0x80>
    5dac:	21800003 	ldbu	r6,0(r4)
    5db0:	28c03fcc 	andi	r3,r5,255
    5db4:	30c01a26 	beq	r6,r3,5e20 <memchr+0x88>
    5db8:	180d883a 	mov	r6,r3
    5dbc:	00000406 	br	5dd0 <memchr+0x38>
    5dc0:	10001526 	beq	r2,zero,5e18 <memchr+0x80>
    5dc4:	20c00003 	ldbu	r3,0(r4)
    5dc8:	10bfffc4 	addi	r2,r2,-1
    5dcc:	19801426 	beq	r3,r6,5e20 <memchr+0x88>
    5dd0:	21000044 	addi	r4,r4,1
    5dd4:	20c000cc 	andi	r3,r4,3
    5dd8:	183ff91e 	bne	r3,zero,5dc0 <__alt_mem_Flash_flash_data+0xf4005dc0>
    5ddc:	024000c4 	movi	r9,3
    5de0:	48801136 	bltu	r9,r2,5e28 <memchr+0x90>
    5de4:	10000c26 	beq	r2,zero,5e18 <memchr+0x80>
    5de8:	20c00003 	ldbu	r3,0(r4)
    5dec:	29403fcc 	andi	r5,r5,255
    5df0:	19400b26 	beq	r3,r5,5e20 <memchr+0x88>
    5df4:	20c00044 	addi	r3,r4,1
    5df8:	2085883a 	add	r2,r4,r2
    5dfc:	39803fcc 	andi	r6,r7,255
    5e00:	00000306 	br	5e10 <memchr+0x78>
    5e04:	18c00044 	addi	r3,r3,1
    5e08:	197fffc3 	ldbu	r5,-1(r3)
    5e0c:	29800426 	beq	r5,r6,5e20 <memchr+0x88>
    5e10:	1809883a 	mov	r4,r3
    5e14:	18bffb1e 	bne	r3,r2,5e04 <__alt_mem_Flash_flash_data+0xf4005e04>
    5e18:	0005883a 	mov	r2,zero
    5e1c:	f800283a 	ret
    5e20:	2005883a 	mov	r2,r4
    5e24:	f800283a 	ret
    5e28:	28c03fcc 	andi	r3,r5,255
    5e2c:	1810923a 	slli	r8,r3,8
    5e30:	02ffbff4 	movhi	r11,65279
    5e34:	02a02074 	movhi	r10,32897
    5e38:	40c6b03a 	or	r3,r8,r3
    5e3c:	1810943a 	slli	r8,r3,16
    5e40:	5affbfc4 	addi	r11,r11,-257
    5e44:	52a02004 	addi	r10,r10,-32640
    5e48:	40d0b03a 	or	r8,r8,r3
    5e4c:	20c00017 	ldw	r3,0(r4)
    5e50:	40c6f03a 	xor	r3,r8,r3
    5e54:	1acd883a 	add	r6,r3,r11
    5e58:	00c6303a 	nor	r3,zero,r3
    5e5c:	30c6703a 	and	r3,r6,r3
    5e60:	1a86703a 	and	r3,r3,r10
    5e64:	183fdf1e 	bne	r3,zero,5de4 <__alt_mem_Flash_flash_data+0xf4005de4>
    5e68:	10bfff04 	addi	r2,r2,-4
    5e6c:	21000104 	addi	r4,r4,4
    5e70:	48bff636 	bltu	r9,r2,5e4c <__alt_mem_Flash_flash_data+0xf4005e4c>
    5e74:	003fdb06 	br	5de4 <__alt_mem_Flash_flash_data+0xf4005de4>
    5e78:	3005883a 	mov	r2,r6
    5e7c:	003fd706 	br	5ddc <__alt_mem_Flash_flash_data+0xf4005ddc>

00005e80 <memcpy>:
    5e80:	deffff04 	addi	sp,sp,-4
    5e84:	dc000015 	stw	r16,0(sp)
    5e88:	00c003c4 	movi	r3,15
    5e8c:	2005883a 	mov	r2,r4
    5e90:	1980432e 	bgeu	r3,r6,5fa0 <memcpy+0x120>
    5e94:	2146b03a 	or	r3,r4,r5
    5e98:	18c000cc 	andi	r3,r3,3
    5e9c:	1800421e 	bne	r3,zero,5fa8 <memcpy+0x128>
    5ea0:	343ffc04 	addi	r16,r6,-16
    5ea4:	8020d13a 	srli	r16,r16,4
    5ea8:	28c00104 	addi	r3,r5,4
    5eac:	23400104 	addi	r13,r4,4
    5eb0:	801e913a 	slli	r15,r16,4
    5eb4:	2b000204 	addi	r12,r5,8
    5eb8:	22c00204 	addi	r11,r4,8
    5ebc:	7bc00504 	addi	r15,r15,20
    5ec0:	2a800304 	addi	r10,r5,12
    5ec4:	22400304 	addi	r9,r4,12
    5ec8:	2bdf883a 	add	r15,r5,r15
    5ecc:	2811883a 	mov	r8,r5
    5ed0:	200f883a 	mov	r7,r4
    5ed4:	41000017 	ldw	r4,0(r8)
    5ed8:	39c00404 	addi	r7,r7,16
    5edc:	18c00404 	addi	r3,r3,16
    5ee0:	393ffc15 	stw	r4,-16(r7)
    5ee4:	1bbffc17 	ldw	r14,-16(r3)
    5ee8:	6b400404 	addi	r13,r13,16
    5eec:	5ac00404 	addi	r11,r11,16
    5ef0:	6bbffc15 	stw	r14,-16(r13)
    5ef4:	63800017 	ldw	r14,0(r12)
    5ef8:	4a400404 	addi	r9,r9,16
    5efc:	42000404 	addi	r8,r8,16
    5f00:	5bbffc15 	stw	r14,-16(r11)
    5f04:	53800017 	ldw	r14,0(r10)
    5f08:	63000404 	addi	r12,r12,16
    5f0c:	52800404 	addi	r10,r10,16
    5f10:	4bbffc15 	stw	r14,-16(r9)
    5f14:	1bffef1e 	bne	r3,r15,5ed4 <__alt_mem_Flash_flash_data+0xf4005ed4>
    5f18:	81c00044 	addi	r7,r16,1
    5f1c:	380e913a 	slli	r7,r7,4
    5f20:	310003cc 	andi	r4,r6,15
    5f24:	02c000c4 	movi	r11,3
    5f28:	11c7883a 	add	r3,r2,r7
    5f2c:	29cb883a 	add	r5,r5,r7
    5f30:	59001f2e 	bgeu	r11,r4,5fb0 <memcpy+0x130>
    5f34:	1813883a 	mov	r9,r3
    5f38:	2811883a 	mov	r8,r5
    5f3c:	200f883a 	mov	r7,r4
    5f40:	42800017 	ldw	r10,0(r8)
    5f44:	4a400104 	addi	r9,r9,4
    5f48:	39ffff04 	addi	r7,r7,-4
    5f4c:	4abfff15 	stw	r10,-4(r9)
    5f50:	42000104 	addi	r8,r8,4
    5f54:	59fffa36 	bltu	r11,r7,5f40 <__alt_mem_Flash_flash_data+0xf4005f40>
    5f58:	213fff04 	addi	r4,r4,-4
    5f5c:	2008d0ba 	srli	r4,r4,2
    5f60:	318000cc 	andi	r6,r6,3
    5f64:	21000044 	addi	r4,r4,1
    5f68:	2109883a 	add	r4,r4,r4
    5f6c:	2109883a 	add	r4,r4,r4
    5f70:	1907883a 	add	r3,r3,r4
    5f74:	290b883a 	add	r5,r5,r4
    5f78:	30000626 	beq	r6,zero,5f94 <memcpy+0x114>
    5f7c:	198d883a 	add	r6,r3,r6
    5f80:	29c00003 	ldbu	r7,0(r5)
    5f84:	18c00044 	addi	r3,r3,1
    5f88:	29400044 	addi	r5,r5,1
    5f8c:	19ffffc5 	stb	r7,-1(r3)
    5f90:	19bffb1e 	bne	r3,r6,5f80 <__alt_mem_Flash_flash_data+0xf4005f80>
    5f94:	dc000017 	ldw	r16,0(sp)
    5f98:	dec00104 	addi	sp,sp,4
    5f9c:	f800283a 	ret
    5fa0:	2007883a 	mov	r3,r4
    5fa4:	003ff406 	br	5f78 <__alt_mem_Flash_flash_data+0xf4005f78>
    5fa8:	2007883a 	mov	r3,r4
    5fac:	003ff306 	br	5f7c <__alt_mem_Flash_flash_data+0xf4005f7c>
    5fb0:	200d883a 	mov	r6,r4
    5fb4:	003ff006 	br	5f78 <__alt_mem_Flash_flash_data+0xf4005f78>

00005fb8 <memset>:
    5fb8:	20c000cc 	andi	r3,r4,3
    5fbc:	2005883a 	mov	r2,r4
    5fc0:	18004326 	beq	r3,zero,60d0 <memset+0x118>
    5fc4:	31ffffc4 	addi	r7,r6,-1
    5fc8:	30004026 	beq	r6,zero,60cc <memset+0x114>
    5fcc:	2813883a 	mov	r9,r5
    5fd0:	200d883a 	mov	r6,r4
    5fd4:	2007883a 	mov	r3,r4
    5fd8:	00000406 	br	5fec <memset+0x34>
    5fdc:	3a3fffc4 	addi	r8,r7,-1
    5fe0:	31800044 	addi	r6,r6,1
    5fe4:	38003926 	beq	r7,zero,60cc <memset+0x114>
    5fe8:	400f883a 	mov	r7,r8
    5fec:	18c00044 	addi	r3,r3,1
    5ff0:	32400005 	stb	r9,0(r6)
    5ff4:	1a0000cc 	andi	r8,r3,3
    5ff8:	403ff81e 	bne	r8,zero,5fdc <__alt_mem_Flash_flash_data+0xf4005fdc>
    5ffc:	010000c4 	movi	r4,3
    6000:	21c02d2e 	bgeu	r4,r7,60b8 <memset+0x100>
    6004:	29803fcc 	andi	r6,r5,255
    6008:	3008923a 	slli	r4,r6,8
    600c:	218cb03a 	or	r6,r4,r6
    6010:	3008943a 	slli	r4,r6,16
    6014:	218cb03a 	or	r6,r4,r6
    6018:	010003c4 	movi	r4,15
    601c:	21c0182e 	bgeu	r4,r7,6080 <memset+0xc8>
    6020:	3b3ffc04 	addi	r12,r7,-16
    6024:	6018d13a 	srli	r12,r12,4
    6028:	1a000104 	addi	r8,r3,4
    602c:	1ac00204 	addi	r11,r3,8
    6030:	6008913a 	slli	r4,r12,4
    6034:	1a800304 	addi	r10,r3,12
    6038:	1813883a 	mov	r9,r3
    603c:	21000504 	addi	r4,r4,20
    6040:	1909883a 	add	r4,r3,r4
    6044:	49800015 	stw	r6,0(r9)
    6048:	41800015 	stw	r6,0(r8)
    604c:	59800015 	stw	r6,0(r11)
    6050:	51800015 	stw	r6,0(r10)
    6054:	42000404 	addi	r8,r8,16
    6058:	4a400404 	addi	r9,r9,16
    605c:	5ac00404 	addi	r11,r11,16
    6060:	52800404 	addi	r10,r10,16
    6064:	413ff71e 	bne	r8,r4,6044 <__alt_mem_Flash_flash_data+0xf4006044>
    6068:	63000044 	addi	r12,r12,1
    606c:	6018913a 	slli	r12,r12,4
    6070:	39c003cc 	andi	r7,r7,15
    6074:	010000c4 	movi	r4,3
    6078:	1b07883a 	add	r3,r3,r12
    607c:	21c00e2e 	bgeu	r4,r7,60b8 <memset+0x100>
    6080:	1813883a 	mov	r9,r3
    6084:	3811883a 	mov	r8,r7
    6088:	010000c4 	movi	r4,3
    608c:	49800015 	stw	r6,0(r9)
    6090:	423fff04 	addi	r8,r8,-4
    6094:	4a400104 	addi	r9,r9,4
    6098:	223ffc36 	bltu	r4,r8,608c <__alt_mem_Flash_flash_data+0xf400608c>
    609c:	393fff04 	addi	r4,r7,-4
    60a0:	2008d0ba 	srli	r4,r4,2
    60a4:	39c000cc 	andi	r7,r7,3
    60a8:	21000044 	addi	r4,r4,1
    60ac:	2109883a 	add	r4,r4,r4
    60b0:	2109883a 	add	r4,r4,r4
    60b4:	1907883a 	add	r3,r3,r4
    60b8:	38000426 	beq	r7,zero,60cc <memset+0x114>
    60bc:	19cf883a 	add	r7,r3,r7
    60c0:	19400005 	stb	r5,0(r3)
    60c4:	18c00044 	addi	r3,r3,1
    60c8:	19fffd1e 	bne	r3,r7,60c0 <__alt_mem_Flash_flash_data+0xf40060c0>
    60cc:	f800283a 	ret
    60d0:	2007883a 	mov	r3,r4
    60d4:	300f883a 	mov	r7,r6
    60d8:	003fc806 	br	5ffc <__alt_mem_Flash_flash_data+0xf4005ffc>

000060dc <_Balloc>:
    60dc:	20801317 	ldw	r2,76(r4)
    60e0:	defffc04 	addi	sp,sp,-16
    60e4:	dc400115 	stw	r17,4(sp)
    60e8:	dc000015 	stw	r16,0(sp)
    60ec:	dfc00315 	stw	ra,12(sp)
    60f0:	dc800215 	stw	r18,8(sp)
    60f4:	2023883a 	mov	r17,r4
    60f8:	2821883a 	mov	r16,r5
    60fc:	10000f26 	beq	r2,zero,613c <_Balloc+0x60>
    6100:	8407883a 	add	r3,r16,r16
    6104:	18c7883a 	add	r3,r3,r3
    6108:	10c7883a 	add	r3,r2,r3
    610c:	18800017 	ldw	r2,0(r3)
    6110:	10001126 	beq	r2,zero,6158 <_Balloc+0x7c>
    6114:	11000017 	ldw	r4,0(r2)
    6118:	19000015 	stw	r4,0(r3)
    611c:	10000415 	stw	zero,16(r2)
    6120:	10000315 	stw	zero,12(r2)
    6124:	dfc00317 	ldw	ra,12(sp)
    6128:	dc800217 	ldw	r18,8(sp)
    612c:	dc400117 	ldw	r17,4(sp)
    6130:	dc000017 	ldw	r16,0(sp)
    6134:	dec00404 	addi	sp,sp,16
    6138:	f800283a 	ret
    613c:	01400104 	movi	r5,4
    6140:	01800844 	movi	r6,33
    6144:	00089300 	call	8930 <_calloc_r>
    6148:	88801315 	stw	r2,76(r17)
    614c:	103fec1e 	bne	r2,zero,6100 <__alt_mem_Flash_flash_data+0xf4006100>
    6150:	0005883a 	mov	r2,zero
    6154:	003ff306 	br	6124 <__alt_mem_Flash_flash_data+0xf4006124>
    6158:	01400044 	movi	r5,1
    615c:	2c24983a 	sll	r18,r5,r16
    6160:	8809883a 	mov	r4,r17
    6164:	91800144 	addi	r6,r18,5
    6168:	318d883a 	add	r6,r6,r6
    616c:	318d883a 	add	r6,r6,r6
    6170:	00089300 	call	8930 <_calloc_r>
    6174:	103ff626 	beq	r2,zero,6150 <__alt_mem_Flash_flash_data+0xf4006150>
    6178:	14000115 	stw	r16,4(r2)
    617c:	14800215 	stw	r18,8(r2)
    6180:	003fe606 	br	611c <__alt_mem_Flash_flash_data+0xf400611c>

00006184 <_Bfree>:
    6184:	28000826 	beq	r5,zero,61a8 <_Bfree+0x24>
    6188:	28c00117 	ldw	r3,4(r5)
    618c:	20801317 	ldw	r2,76(r4)
    6190:	18c7883a 	add	r3,r3,r3
    6194:	18c7883a 	add	r3,r3,r3
    6198:	10c5883a 	add	r2,r2,r3
    619c:	10c00017 	ldw	r3,0(r2)
    61a0:	28c00015 	stw	r3,0(r5)
    61a4:	11400015 	stw	r5,0(r2)
    61a8:	f800283a 	ret

000061ac <__multadd>:
    61ac:	defffa04 	addi	sp,sp,-24
    61b0:	dc000115 	stw	r16,4(sp)
    61b4:	2c000417 	ldw	r16,16(r5)
    61b8:	dc800315 	stw	r18,12(sp)
    61bc:	dc400215 	stw	r17,8(sp)
    61c0:	dfc00515 	stw	ra,20(sp)
    61c4:	dcc00415 	stw	r19,16(sp)
    61c8:	2823883a 	mov	r17,r5
    61cc:	2025883a 	mov	r18,r4
    61d0:	2a400504 	addi	r9,r5,20
    61d4:	0015883a 	mov	r10,zero
    61d8:	4a000017 	ldw	r8,0(r9)
    61dc:	4a400104 	addi	r9,r9,4
    61e0:	52800044 	addi	r10,r10,1
    61e4:	40ffffcc 	andi	r3,r8,65535
    61e8:	1987383a 	mul	r3,r3,r6
    61ec:	4010d43a 	srli	r8,r8,16
    61f0:	19cf883a 	add	r7,r3,r7
    61f4:	4191383a 	mul	r8,r8,r6
    61f8:	3816d43a 	srli	r11,r7,16
    61fc:	38ffffcc 	andi	r3,r7,65535
    6200:	5a0f883a 	add	r7,r11,r8
    6204:	3810943a 	slli	r8,r7,16
    6208:	380ed43a 	srli	r7,r7,16
    620c:	40c7883a 	add	r3,r8,r3
    6210:	48ffff15 	stw	r3,-4(r9)
    6214:	543ff016 	blt	r10,r16,61d8 <__alt_mem_Flash_flash_data+0xf40061d8>
    6218:	38000926 	beq	r7,zero,6240 <__multadd+0x94>
    621c:	88800217 	ldw	r2,8(r17)
    6220:	80800f0e 	bge	r16,r2,6260 <__multadd+0xb4>
    6224:	80800144 	addi	r2,r16,5
    6228:	1085883a 	add	r2,r2,r2
    622c:	1085883a 	add	r2,r2,r2
    6230:	8885883a 	add	r2,r17,r2
    6234:	11c00015 	stw	r7,0(r2)
    6238:	84000044 	addi	r16,r16,1
    623c:	8c000415 	stw	r16,16(r17)
    6240:	8805883a 	mov	r2,r17
    6244:	dfc00517 	ldw	ra,20(sp)
    6248:	dcc00417 	ldw	r19,16(sp)
    624c:	dc800317 	ldw	r18,12(sp)
    6250:	dc400217 	ldw	r17,8(sp)
    6254:	dc000117 	ldw	r16,4(sp)
    6258:	dec00604 	addi	sp,sp,24
    625c:	f800283a 	ret
    6260:	89400117 	ldw	r5,4(r17)
    6264:	9009883a 	mov	r4,r18
    6268:	d9c00015 	stw	r7,0(sp)
    626c:	29400044 	addi	r5,r5,1
    6270:	00060dc0 	call	60dc <_Balloc>
    6274:	89800417 	ldw	r6,16(r17)
    6278:	11000304 	addi	r4,r2,12
    627c:	89400304 	addi	r5,r17,12
    6280:	31800084 	addi	r6,r6,2
    6284:	318d883a 	add	r6,r6,r6
    6288:	318d883a 	add	r6,r6,r6
    628c:	1027883a 	mov	r19,r2
    6290:	0005e800 	call	5e80 <memcpy>
    6294:	d9c00017 	ldw	r7,0(sp)
    6298:	88000a26 	beq	r17,zero,62c4 <__multadd+0x118>
    629c:	89000117 	ldw	r4,4(r17)
    62a0:	90c01317 	ldw	r3,76(r18)
    62a4:	2109883a 	add	r4,r4,r4
    62a8:	2109883a 	add	r4,r4,r4
    62ac:	1907883a 	add	r3,r3,r4
    62b0:	18800017 	ldw	r2,0(r3)
    62b4:	88800015 	stw	r2,0(r17)
    62b8:	1c400015 	stw	r17,0(r3)
    62bc:	9823883a 	mov	r17,r19
    62c0:	003fd806 	br	6224 <__alt_mem_Flash_flash_data+0xf4006224>
    62c4:	9823883a 	mov	r17,r19
    62c8:	003fd606 	br	6224 <__alt_mem_Flash_flash_data+0xf4006224>

000062cc <__s2b>:
    62cc:	defff904 	addi	sp,sp,-28
    62d0:	dc400115 	stw	r17,4(sp)
    62d4:	dc000015 	stw	r16,0(sp)
    62d8:	2023883a 	mov	r17,r4
    62dc:	2821883a 	mov	r16,r5
    62e0:	39000204 	addi	r4,r7,8
    62e4:	01400244 	movi	r5,9
    62e8:	dcc00315 	stw	r19,12(sp)
    62ec:	dc800215 	stw	r18,8(sp)
    62f0:	dfc00615 	stw	ra,24(sp)
    62f4:	dd400515 	stw	r21,20(sp)
    62f8:	dd000415 	stw	r20,16(sp)
    62fc:	3825883a 	mov	r18,r7
    6300:	3027883a 	mov	r19,r6
    6304:	000a8b80 	call	a8b8 <__divsi3>
    6308:	00c00044 	movi	r3,1
    630c:	000b883a 	mov	r5,zero
    6310:	1880030e 	bge	r3,r2,6320 <__s2b+0x54>
    6314:	18c7883a 	add	r3,r3,r3
    6318:	29400044 	addi	r5,r5,1
    631c:	18bffd16 	blt	r3,r2,6314 <__alt_mem_Flash_flash_data+0xf4006314>
    6320:	8809883a 	mov	r4,r17
    6324:	00060dc0 	call	60dc <_Balloc>
    6328:	d8c00717 	ldw	r3,28(sp)
    632c:	10c00515 	stw	r3,20(r2)
    6330:	00c00044 	movi	r3,1
    6334:	10c00415 	stw	r3,16(r2)
    6338:	00c00244 	movi	r3,9
    633c:	1cc0210e 	bge	r3,r19,63c4 <__s2b+0xf8>
    6340:	80eb883a 	add	r21,r16,r3
    6344:	a829883a 	mov	r20,r21
    6348:	84e1883a 	add	r16,r16,r19
    634c:	a1c00007 	ldb	r7,0(r20)
    6350:	8809883a 	mov	r4,r17
    6354:	a5000044 	addi	r20,r20,1
    6358:	100b883a 	mov	r5,r2
    635c:	01800284 	movi	r6,10
    6360:	39fff404 	addi	r7,r7,-48
    6364:	00061ac0 	call	61ac <__multadd>
    6368:	a43ff81e 	bne	r20,r16,634c <__alt_mem_Flash_flash_data+0xf400634c>
    636c:	ace1883a 	add	r16,r21,r19
    6370:	843ffe04 	addi	r16,r16,-8
    6374:	9c800a0e 	bge	r19,r18,63a0 <__s2b+0xd4>
    6378:	94e5c83a 	sub	r18,r18,r19
    637c:	84a5883a 	add	r18,r16,r18
    6380:	81c00007 	ldb	r7,0(r16)
    6384:	8809883a 	mov	r4,r17
    6388:	84000044 	addi	r16,r16,1
    638c:	100b883a 	mov	r5,r2
    6390:	01800284 	movi	r6,10
    6394:	39fff404 	addi	r7,r7,-48
    6398:	00061ac0 	call	61ac <__multadd>
    639c:	84bff81e 	bne	r16,r18,6380 <__alt_mem_Flash_flash_data+0xf4006380>
    63a0:	dfc00617 	ldw	ra,24(sp)
    63a4:	dd400517 	ldw	r21,20(sp)
    63a8:	dd000417 	ldw	r20,16(sp)
    63ac:	dcc00317 	ldw	r19,12(sp)
    63b0:	dc800217 	ldw	r18,8(sp)
    63b4:	dc400117 	ldw	r17,4(sp)
    63b8:	dc000017 	ldw	r16,0(sp)
    63bc:	dec00704 	addi	sp,sp,28
    63c0:	f800283a 	ret
    63c4:	84000284 	addi	r16,r16,10
    63c8:	1827883a 	mov	r19,r3
    63cc:	003fe906 	br	6374 <__alt_mem_Flash_flash_data+0xf4006374>

000063d0 <__hi0bits>:
    63d0:	20bfffec 	andhi	r2,r4,65535
    63d4:	1000141e 	bne	r2,zero,6428 <__hi0bits+0x58>
    63d8:	2008943a 	slli	r4,r4,16
    63dc:	00800404 	movi	r2,16
    63e0:	20ffc02c 	andhi	r3,r4,65280
    63e4:	1800021e 	bne	r3,zero,63f0 <__hi0bits+0x20>
    63e8:	2008923a 	slli	r4,r4,8
    63ec:	10800204 	addi	r2,r2,8
    63f0:	20fc002c 	andhi	r3,r4,61440
    63f4:	1800021e 	bne	r3,zero,6400 <__hi0bits+0x30>
    63f8:	2008913a 	slli	r4,r4,4
    63fc:	10800104 	addi	r2,r2,4
    6400:	20f0002c 	andhi	r3,r4,49152
    6404:	1800031e 	bne	r3,zero,6414 <__hi0bits+0x44>
    6408:	2109883a 	add	r4,r4,r4
    640c:	10800084 	addi	r2,r2,2
    6410:	2109883a 	add	r4,r4,r4
    6414:	20000316 	blt	r4,zero,6424 <__hi0bits+0x54>
    6418:	2110002c 	andhi	r4,r4,16384
    641c:	2000041e 	bne	r4,zero,6430 <__hi0bits+0x60>
    6420:	00800804 	movi	r2,32
    6424:	f800283a 	ret
    6428:	0005883a 	mov	r2,zero
    642c:	003fec06 	br	63e0 <__alt_mem_Flash_flash_data+0xf40063e0>
    6430:	10800044 	addi	r2,r2,1
    6434:	f800283a 	ret

00006438 <__lo0bits>:
    6438:	20c00017 	ldw	r3,0(r4)
    643c:	188001cc 	andi	r2,r3,7
    6440:	10000826 	beq	r2,zero,6464 <__lo0bits+0x2c>
    6444:	1880004c 	andi	r2,r3,1
    6448:	1000211e 	bne	r2,zero,64d0 <__lo0bits+0x98>
    644c:	1880008c 	andi	r2,r3,2
    6450:	1000211e 	bne	r2,zero,64d8 <__lo0bits+0xa0>
    6454:	1806d0ba 	srli	r3,r3,2
    6458:	00800084 	movi	r2,2
    645c:	20c00015 	stw	r3,0(r4)
    6460:	f800283a 	ret
    6464:	18bfffcc 	andi	r2,r3,65535
    6468:	10001326 	beq	r2,zero,64b8 <__lo0bits+0x80>
    646c:	0005883a 	mov	r2,zero
    6470:	19403fcc 	andi	r5,r3,255
    6474:	2800021e 	bne	r5,zero,6480 <__lo0bits+0x48>
    6478:	1806d23a 	srli	r3,r3,8
    647c:	10800204 	addi	r2,r2,8
    6480:	194003cc 	andi	r5,r3,15
    6484:	2800021e 	bne	r5,zero,6490 <__lo0bits+0x58>
    6488:	1806d13a 	srli	r3,r3,4
    648c:	10800104 	addi	r2,r2,4
    6490:	194000cc 	andi	r5,r3,3
    6494:	2800021e 	bne	r5,zero,64a0 <__lo0bits+0x68>
    6498:	1806d0ba 	srli	r3,r3,2
    649c:	10800084 	addi	r2,r2,2
    64a0:	1940004c 	andi	r5,r3,1
    64a4:	2800081e 	bne	r5,zero,64c8 <__lo0bits+0x90>
    64a8:	1806d07a 	srli	r3,r3,1
    64ac:	1800051e 	bne	r3,zero,64c4 <__lo0bits+0x8c>
    64b0:	00800804 	movi	r2,32
    64b4:	f800283a 	ret
    64b8:	1806d43a 	srli	r3,r3,16
    64bc:	00800404 	movi	r2,16
    64c0:	003feb06 	br	6470 <__alt_mem_Flash_flash_data+0xf4006470>
    64c4:	10800044 	addi	r2,r2,1
    64c8:	20c00015 	stw	r3,0(r4)
    64cc:	f800283a 	ret
    64d0:	0005883a 	mov	r2,zero
    64d4:	f800283a 	ret
    64d8:	1806d07a 	srli	r3,r3,1
    64dc:	00800044 	movi	r2,1
    64e0:	20c00015 	stw	r3,0(r4)
    64e4:	f800283a 	ret

000064e8 <__i2b>:
    64e8:	defffd04 	addi	sp,sp,-12
    64ec:	dc000015 	stw	r16,0(sp)
    64f0:	04000044 	movi	r16,1
    64f4:	dc400115 	stw	r17,4(sp)
    64f8:	2823883a 	mov	r17,r5
    64fc:	800b883a 	mov	r5,r16
    6500:	dfc00215 	stw	ra,8(sp)
    6504:	00060dc0 	call	60dc <_Balloc>
    6508:	14400515 	stw	r17,20(r2)
    650c:	14000415 	stw	r16,16(r2)
    6510:	dfc00217 	ldw	ra,8(sp)
    6514:	dc400117 	ldw	r17,4(sp)
    6518:	dc000017 	ldw	r16,0(sp)
    651c:	dec00304 	addi	sp,sp,12
    6520:	f800283a 	ret

00006524 <__multiply>:
    6524:	defffa04 	addi	sp,sp,-24
    6528:	dcc00315 	stw	r19,12(sp)
    652c:	dc800215 	stw	r18,8(sp)
    6530:	2cc00417 	ldw	r19,16(r5)
    6534:	34800417 	ldw	r18,16(r6)
    6538:	dd000415 	stw	r20,16(sp)
    653c:	dc400115 	stw	r17,4(sp)
    6540:	dfc00515 	stw	ra,20(sp)
    6544:	dc000015 	stw	r16,0(sp)
    6548:	2829883a 	mov	r20,r5
    654c:	3023883a 	mov	r17,r6
    6550:	9c807016 	blt	r19,r18,6714 <__multiply+0x1f0>
    6554:	9005883a 	mov	r2,r18
    6558:	9825883a 	mov	r18,r19
    655c:	1027883a 	mov	r19,r2
    6560:	a0800217 	ldw	r2,8(r20)
    6564:	94e1883a 	add	r16,r18,r19
    6568:	a1400117 	ldw	r5,4(r20)
    656c:	1400010e 	bge	r2,r16,6574 <__multiply+0x50>
    6570:	29400044 	addi	r5,r5,1
    6574:	00060dc0 	call	60dc <_Balloc>
    6578:	8417883a 	add	r11,r16,r16
    657c:	13000504 	addi	r12,r2,20
    6580:	5ad7883a 	add	r11,r11,r11
    6584:	62d7883a 	add	r11,r12,r11
    6588:	6007883a 	mov	r3,r12
    658c:	62c0032e 	bgeu	r12,r11,659c <__multiply+0x78>
    6590:	18000015 	stw	zero,0(r3)
    6594:	18c00104 	addi	r3,r3,4
    6598:	1afffd36 	bltu	r3,r11,6590 <__alt_mem_Flash_flash_data+0xf4006590>
    659c:	9ce7883a 	add	r19,r19,r19
    65a0:	94a5883a 	add	r18,r18,r18
    65a4:	89800504 	addi	r6,r17,20
    65a8:	9ce7883a 	add	r19,r19,r19
    65ac:	a3800504 	addi	r14,r20,20
    65b0:	94a5883a 	add	r18,r18,r18
    65b4:	34db883a 	add	r13,r6,r19
    65b8:	7495883a 	add	r10,r14,r18
    65bc:	3340422e 	bgeu	r6,r13,66c8 <__multiply+0x1a4>
    65c0:	34400017 	ldw	r17,0(r6)
    65c4:	8cbfffcc 	andi	r18,r17,65535
    65c8:	90001b26 	beq	r18,zero,6638 <__multiply+0x114>
    65cc:	6013883a 	mov	r9,r12
    65d0:	7023883a 	mov	r17,r14
    65d4:	0011883a 	mov	r8,zero
    65d8:	88c00017 	ldw	r3,0(r17)
    65dc:	4bc00017 	ldw	r15,0(r9)
    65e0:	8c400104 	addi	r17,r17,4
    65e4:	19ffffcc 	andi	r7,r3,65535
    65e8:	3c8f383a 	mul	r7,r7,r18
    65ec:	1808d43a 	srli	r4,r3,16
    65f0:	797fffcc 	andi	r5,r15,65535
    65f4:	29cb883a 	add	r5,r5,r7
    65f8:	2a0b883a 	add	r5,r5,r8
    65fc:	2489383a 	mul	r4,r4,r18
    6600:	7806d43a 	srli	r3,r15,16
    6604:	2810d43a 	srli	r8,r5,16
    6608:	297fffcc 	andi	r5,r5,65535
    660c:	1907883a 	add	r3,r3,r4
    6610:	1a07883a 	add	r3,r3,r8
    6614:	1808943a 	slli	r4,r3,16
    6618:	480f883a 	mov	r7,r9
    661c:	1810d43a 	srli	r8,r3,16
    6620:	214ab03a 	or	r5,r4,r5
    6624:	49400015 	stw	r5,0(r9)
    6628:	4a400104 	addi	r9,r9,4
    662c:	8abfea36 	bltu	r17,r10,65d8 <__alt_mem_Flash_flash_data+0xf40065d8>
    6630:	3a000115 	stw	r8,4(r7)
    6634:	34400017 	ldw	r17,0(r6)
    6638:	8822d43a 	srli	r17,r17,16
    663c:	88001f26 	beq	r17,zero,66bc <__multiply+0x198>
    6640:	60c00017 	ldw	r3,0(r12)
    6644:	7013883a 	mov	r9,r14
    6648:	601f883a 	mov	r15,r12
    664c:	1811883a 	mov	r8,r3
    6650:	6027883a 	mov	r19,r12
    6654:	000f883a 	mov	r7,zero
    6658:	00000106 	br	6660 <__multiply+0x13c>
    665c:	9027883a 	mov	r19,r18
    6660:	4940000b 	ldhu	r5,0(r9)
    6664:	4010d43a 	srli	r8,r8,16
    6668:	193fffcc 	andi	r4,r3,65535
    666c:	2c4b383a 	mul	r5,r5,r17
    6670:	7bc00104 	addi	r15,r15,4
    6674:	4a400104 	addi	r9,r9,4
    6678:	2a0b883a 	add	r5,r5,r8
    667c:	29cb883a 	add	r5,r5,r7
    6680:	2806943a 	slli	r3,r5,16
    6684:	9c800104 	addi	r18,r19,4
    6688:	280ad43a 	srli	r5,r5,16
    668c:	1908b03a 	or	r4,r3,r4
    6690:	793fff15 	stw	r4,-4(r15)
    6694:	48ffff17 	ldw	r3,-4(r9)
    6698:	92000017 	ldw	r8,0(r18)
    669c:	1806d43a 	srli	r3,r3,16
    66a0:	413fffcc 	andi	r4,r8,65535
    66a4:	1c47383a 	mul	r3,r3,r17
    66a8:	1907883a 	add	r3,r3,r4
    66ac:	1947883a 	add	r3,r3,r5
    66b0:	180ed43a 	srli	r7,r3,16
    66b4:	4abfe936 	bltu	r9,r10,665c <__alt_mem_Flash_flash_data+0xf400665c>
    66b8:	98c00115 	stw	r3,4(r19)
    66bc:	31800104 	addi	r6,r6,4
    66c0:	63000104 	addi	r12,r12,4
    66c4:	337fbe36 	bltu	r6,r13,65c0 <__alt_mem_Flash_flash_data+0xf40065c0>
    66c8:	0400090e 	bge	zero,r16,66f0 <__multiply+0x1cc>
    66cc:	58ffff17 	ldw	r3,-4(r11)
    66d0:	5affff04 	addi	r11,r11,-4
    66d4:	18000326 	beq	r3,zero,66e4 <__multiply+0x1c0>
    66d8:	00000506 	br	66f0 <__multiply+0x1cc>
    66dc:	58c00017 	ldw	r3,0(r11)
    66e0:	1800031e 	bne	r3,zero,66f0 <__multiply+0x1cc>
    66e4:	843fffc4 	addi	r16,r16,-1
    66e8:	5affff04 	addi	r11,r11,-4
    66ec:	803ffb1e 	bne	r16,zero,66dc <__alt_mem_Flash_flash_data+0xf40066dc>
    66f0:	14000415 	stw	r16,16(r2)
    66f4:	dfc00517 	ldw	ra,20(sp)
    66f8:	dd000417 	ldw	r20,16(sp)
    66fc:	dcc00317 	ldw	r19,12(sp)
    6700:	dc800217 	ldw	r18,8(sp)
    6704:	dc400117 	ldw	r17,4(sp)
    6708:	dc000017 	ldw	r16,0(sp)
    670c:	dec00604 	addi	sp,sp,24
    6710:	f800283a 	ret
    6714:	3029883a 	mov	r20,r6
    6718:	2823883a 	mov	r17,r5
    671c:	003f9006 	br	6560 <__alt_mem_Flash_flash_data+0xf4006560>

00006720 <__pow5mult>:
    6720:	defffa04 	addi	sp,sp,-24
    6724:	dcc00315 	stw	r19,12(sp)
    6728:	dc800215 	stw	r18,8(sp)
    672c:	dc000015 	stw	r16,0(sp)
    6730:	dfc00515 	stw	ra,20(sp)
    6734:	dd000415 	stw	r20,16(sp)
    6738:	dc400115 	stw	r17,4(sp)
    673c:	308000cc 	andi	r2,r6,3
    6740:	3021883a 	mov	r16,r6
    6744:	2027883a 	mov	r19,r4
    6748:	2825883a 	mov	r18,r5
    674c:	10002e1e 	bne	r2,zero,6808 <__pow5mult+0xe8>
    6750:	8021d0ba 	srai	r16,r16,2
    6754:	80001a26 	beq	r16,zero,67c0 <__pow5mult+0xa0>
    6758:	9c401217 	ldw	r17,72(r19)
    675c:	8800061e 	bne	r17,zero,6778 <__pow5mult+0x58>
    6760:	00003406 	br	6834 <__pow5mult+0x114>
    6764:	8021d07a 	srai	r16,r16,1
    6768:	80001526 	beq	r16,zero,67c0 <__pow5mult+0xa0>
    676c:	88800017 	ldw	r2,0(r17)
    6770:	10001c26 	beq	r2,zero,67e4 <__pow5mult+0xc4>
    6774:	1023883a 	mov	r17,r2
    6778:	80c0004c 	andi	r3,r16,1
    677c:	183ff926 	beq	r3,zero,6764 <__alt_mem_Flash_flash_data+0xf4006764>
    6780:	900b883a 	mov	r5,r18
    6784:	880d883a 	mov	r6,r17
    6788:	9809883a 	mov	r4,r19
    678c:	00065240 	call	6524 <__multiply>
    6790:	90001b26 	beq	r18,zero,6800 <__pow5mult+0xe0>
    6794:	91c00117 	ldw	r7,4(r18)
    6798:	98c01317 	ldw	r3,76(r19)
    679c:	8021d07a 	srai	r16,r16,1
    67a0:	39cf883a 	add	r7,r7,r7
    67a4:	39cf883a 	add	r7,r7,r7
    67a8:	19c7883a 	add	r3,r3,r7
    67ac:	19000017 	ldw	r4,0(r3)
    67b0:	91000015 	stw	r4,0(r18)
    67b4:	1c800015 	stw	r18,0(r3)
    67b8:	1025883a 	mov	r18,r2
    67bc:	803feb1e 	bne	r16,zero,676c <__alt_mem_Flash_flash_data+0xf400676c>
    67c0:	9005883a 	mov	r2,r18
    67c4:	dfc00517 	ldw	ra,20(sp)
    67c8:	dd000417 	ldw	r20,16(sp)
    67cc:	dcc00317 	ldw	r19,12(sp)
    67d0:	dc800217 	ldw	r18,8(sp)
    67d4:	dc400117 	ldw	r17,4(sp)
    67d8:	dc000017 	ldw	r16,0(sp)
    67dc:	dec00604 	addi	sp,sp,24
    67e0:	f800283a 	ret
    67e4:	9809883a 	mov	r4,r19
    67e8:	880b883a 	mov	r5,r17
    67ec:	880d883a 	mov	r6,r17
    67f0:	00065240 	call	6524 <__multiply>
    67f4:	88800015 	stw	r2,0(r17)
    67f8:	10000015 	stw	zero,0(r2)
    67fc:	003fdd06 	br	6774 <__alt_mem_Flash_flash_data+0xf4006774>
    6800:	1025883a 	mov	r18,r2
    6804:	003fd706 	br	6764 <__alt_mem_Flash_flash_data+0xf4006764>
    6808:	10bfffc4 	addi	r2,r2,-1
    680c:	1085883a 	add	r2,r2,r2
    6810:	00c000b4 	movhi	r3,2
    6814:	18e5b004 	addi	r3,r3,-26944
    6818:	1085883a 	add	r2,r2,r2
    681c:	1885883a 	add	r2,r3,r2
    6820:	11800017 	ldw	r6,0(r2)
    6824:	000f883a 	mov	r7,zero
    6828:	00061ac0 	call	61ac <__multadd>
    682c:	1025883a 	mov	r18,r2
    6830:	003fc706 	br	6750 <__alt_mem_Flash_flash_data+0xf4006750>
    6834:	05000044 	movi	r20,1
    6838:	9809883a 	mov	r4,r19
    683c:	a00b883a 	mov	r5,r20
    6840:	00060dc0 	call	60dc <_Balloc>
    6844:	1023883a 	mov	r17,r2
    6848:	00809c44 	movi	r2,625
    684c:	88800515 	stw	r2,20(r17)
    6850:	8d000415 	stw	r20,16(r17)
    6854:	9c401215 	stw	r17,72(r19)
    6858:	88000015 	stw	zero,0(r17)
    685c:	003fc606 	br	6778 <__alt_mem_Flash_flash_data+0xf4006778>

00006860 <__lshift>:
    6860:	defff904 	addi	sp,sp,-28
    6864:	dd000415 	stw	r20,16(sp)
    6868:	dcc00315 	stw	r19,12(sp)
    686c:	3029d17a 	srai	r20,r6,5
    6870:	2cc00417 	ldw	r19,16(r5)
    6874:	28800217 	ldw	r2,8(r5)
    6878:	dd400515 	stw	r21,20(sp)
    687c:	a4e7883a 	add	r19,r20,r19
    6880:	dc800215 	stw	r18,8(sp)
    6884:	dc400115 	stw	r17,4(sp)
    6888:	dc000015 	stw	r16,0(sp)
    688c:	dfc00615 	stw	ra,24(sp)
    6890:	9c000044 	addi	r16,r19,1
    6894:	2823883a 	mov	r17,r5
    6898:	302b883a 	mov	r21,r6
    689c:	2025883a 	mov	r18,r4
    68a0:	29400117 	ldw	r5,4(r5)
    68a4:	1400030e 	bge	r2,r16,68b4 <__lshift+0x54>
    68a8:	1085883a 	add	r2,r2,r2
    68ac:	29400044 	addi	r5,r5,1
    68b0:	143ffd16 	blt	r2,r16,68a8 <__alt_mem_Flash_flash_data+0xf40068a8>
    68b4:	9009883a 	mov	r4,r18
    68b8:	00060dc0 	call	60dc <_Balloc>
    68bc:	11c00504 	addi	r7,r2,20
    68c0:	0500090e 	bge	zero,r20,68e8 <__lshift+0x88>
    68c4:	3811883a 	mov	r8,r7
    68c8:	0007883a 	mov	r3,zero
    68cc:	40000015 	stw	zero,0(r8)
    68d0:	18c00044 	addi	r3,r3,1
    68d4:	42000104 	addi	r8,r8,4
    68d8:	1d3ffc1e 	bne	r3,r20,68cc <__alt_mem_Flash_flash_data+0xf40068cc>
    68dc:	18c7883a 	add	r3,r3,r3
    68e0:	18c7883a 	add	r3,r3,r3
    68e4:	38cf883a 	add	r7,r7,r3
    68e8:	89000417 	ldw	r4,16(r17)
    68ec:	88c00504 	addi	r3,r17,20
    68f0:	a98007cc 	andi	r6,r21,31
    68f4:	2109883a 	add	r4,r4,r4
    68f8:	2109883a 	add	r4,r4,r4
    68fc:	1909883a 	add	r4,r3,r4
    6900:	30002326 	beq	r6,zero,6990 <__lshift+0x130>
    6904:	01400804 	movi	r5,32
    6908:	298bc83a 	sub	r5,r5,r6
    690c:	0013883a 	mov	r9,zero
    6910:	1a000017 	ldw	r8,0(r3)
    6914:	3815883a 	mov	r10,r7
    6918:	39c00104 	addi	r7,r7,4
    691c:	4190983a 	sll	r8,r8,r6
    6920:	18c00104 	addi	r3,r3,4
    6924:	4a10b03a 	or	r8,r9,r8
    6928:	3a3fff15 	stw	r8,-4(r7)
    692c:	1a3fff17 	ldw	r8,-4(r3)
    6930:	4152d83a 	srl	r9,r8,r5
    6934:	193ff636 	bltu	r3,r4,6910 <__alt_mem_Flash_flash_data+0xf4006910>
    6938:	52400115 	stw	r9,4(r10)
    693c:	48001a1e 	bne	r9,zero,69a8 <__lshift+0x148>
    6940:	843fffc4 	addi	r16,r16,-1
    6944:	14000415 	stw	r16,16(r2)
    6948:	88000826 	beq	r17,zero,696c <__lshift+0x10c>
    694c:	89000117 	ldw	r4,4(r17)
    6950:	90c01317 	ldw	r3,76(r18)
    6954:	2109883a 	add	r4,r4,r4
    6958:	2109883a 	add	r4,r4,r4
    695c:	1907883a 	add	r3,r3,r4
    6960:	19000017 	ldw	r4,0(r3)
    6964:	89000015 	stw	r4,0(r17)
    6968:	1c400015 	stw	r17,0(r3)
    696c:	dfc00617 	ldw	ra,24(sp)
    6970:	dd400517 	ldw	r21,20(sp)
    6974:	dd000417 	ldw	r20,16(sp)
    6978:	dcc00317 	ldw	r19,12(sp)
    697c:	dc800217 	ldw	r18,8(sp)
    6980:	dc400117 	ldw	r17,4(sp)
    6984:	dc000017 	ldw	r16,0(sp)
    6988:	dec00704 	addi	sp,sp,28
    698c:	f800283a 	ret
    6990:	19400017 	ldw	r5,0(r3)
    6994:	39c00104 	addi	r7,r7,4
    6998:	18c00104 	addi	r3,r3,4
    699c:	397fff15 	stw	r5,-4(r7)
    69a0:	193ffb36 	bltu	r3,r4,6990 <__alt_mem_Flash_flash_data+0xf4006990>
    69a4:	003fe606 	br	6940 <__alt_mem_Flash_flash_data+0xf4006940>
    69a8:	9c000084 	addi	r16,r19,2
    69ac:	003fe406 	br	6940 <__alt_mem_Flash_flash_data+0xf4006940>

000069b0 <__mcmp>:
    69b0:	20800417 	ldw	r2,16(r4)
    69b4:	28c00417 	ldw	r3,16(r5)
    69b8:	10c5c83a 	sub	r2,r2,r3
    69bc:	1000111e 	bne	r2,zero,6a04 <__mcmp+0x54>
    69c0:	18c7883a 	add	r3,r3,r3
    69c4:	18c7883a 	add	r3,r3,r3
    69c8:	21000504 	addi	r4,r4,20
    69cc:	29400504 	addi	r5,r5,20
    69d0:	20c5883a 	add	r2,r4,r3
    69d4:	28cb883a 	add	r5,r5,r3
    69d8:	00000106 	br	69e0 <__mcmp+0x30>
    69dc:	20800a2e 	bgeu	r4,r2,6a08 <__mcmp+0x58>
    69e0:	10bfff04 	addi	r2,r2,-4
    69e4:	297fff04 	addi	r5,r5,-4
    69e8:	11800017 	ldw	r6,0(r2)
    69ec:	28c00017 	ldw	r3,0(r5)
    69f0:	30fffa26 	beq	r6,r3,69dc <__alt_mem_Flash_flash_data+0xf40069dc>
    69f4:	30c00236 	bltu	r6,r3,6a00 <__mcmp+0x50>
    69f8:	00800044 	movi	r2,1
    69fc:	f800283a 	ret
    6a00:	00bfffc4 	movi	r2,-1
    6a04:	f800283a 	ret
    6a08:	0005883a 	mov	r2,zero
    6a0c:	f800283a 	ret

00006a10 <__mdiff>:
    6a10:	defffb04 	addi	sp,sp,-20
    6a14:	dc000015 	stw	r16,0(sp)
    6a18:	2821883a 	mov	r16,r5
    6a1c:	dcc00315 	stw	r19,12(sp)
    6a20:	300b883a 	mov	r5,r6
    6a24:	2027883a 	mov	r19,r4
    6a28:	8009883a 	mov	r4,r16
    6a2c:	dc800215 	stw	r18,8(sp)
    6a30:	dfc00415 	stw	ra,16(sp)
    6a34:	dc400115 	stw	r17,4(sp)
    6a38:	3025883a 	mov	r18,r6
    6a3c:	00069b00 	call	69b0 <__mcmp>
    6a40:	10005226 	beq	r2,zero,6b8c <__mdiff+0x17c>
    6a44:	10004c16 	blt	r2,zero,6b78 <__mdiff+0x168>
    6a48:	0023883a 	mov	r17,zero
    6a4c:	81400117 	ldw	r5,4(r16)
    6a50:	9809883a 	mov	r4,r19
    6a54:	00060dc0 	call	60dc <_Balloc>
    6a58:	83400417 	ldw	r13,16(r16)
    6a5c:	93800417 	ldw	r14,16(r18)
    6a60:	81000504 	addi	r4,r16,20
    6a64:	6b59883a 	add	r12,r13,r13
    6a68:	739d883a 	add	r14,r14,r14
    6a6c:	6319883a 	add	r12,r12,r12
    6a70:	91800504 	addi	r6,r18,20
    6a74:	739d883a 	add	r14,r14,r14
    6a78:	14400315 	stw	r17,12(r2)
    6a7c:	2319883a 	add	r12,r4,r12
    6a80:	339d883a 	add	r14,r6,r14
    6a84:	12400504 	addi	r9,r2,20
    6a88:	0007883a 	mov	r3,zero
    6a8c:	22000017 	ldw	r8,0(r4)
    6a90:	32800017 	ldw	r10,0(r6)
    6a94:	4ac00104 	addi	r11,r9,4
    6a98:	41ffffcc 	andi	r7,r8,65535
    6a9c:	38c7883a 	add	r3,r7,r3
    6aa0:	51ffffcc 	andi	r7,r10,65535
    6aa4:	19cfc83a 	sub	r7,r3,r7
    6aa8:	4010d43a 	srli	r8,r8,16
    6aac:	5014d43a 	srli	r10,r10,16
    6ab0:	3807d43a 	srai	r3,r7,16
    6ab4:	39ffffcc 	andi	r7,r7,65535
    6ab8:	4291c83a 	sub	r8,r8,r10
    6abc:	40c7883a 	add	r3,r8,r3
    6ac0:	1810943a 	slli	r8,r3,16
    6ac4:	31800104 	addi	r6,r6,4
    6ac8:	21000104 	addi	r4,r4,4
    6acc:	41ceb03a 	or	r7,r8,r7
    6ad0:	49c00015 	stw	r7,0(r9)
    6ad4:	1807d43a 	srai	r3,r3,16
    6ad8:	580b883a 	mov	r5,r11
    6adc:	5813883a 	mov	r9,r11
    6ae0:	33bfea36 	bltu	r6,r14,6a8c <__alt_mem_Flash_flash_data+0xf4006a8c>
    6ae4:	2011883a 	mov	r8,r4
    6ae8:	2300152e 	bgeu	r4,r12,6b40 <__mdiff+0x130>
    6aec:	21400017 	ldw	r5,0(r4)
    6af0:	4a400104 	addi	r9,r9,4
    6af4:	21000104 	addi	r4,r4,4
    6af8:	29ffffcc 	andi	r7,r5,65535
    6afc:	38c7883a 	add	r3,r7,r3
    6b00:	280ad43a 	srli	r5,r5,16
    6b04:	180dd43a 	srai	r6,r3,16
    6b08:	19ffffcc 	andi	r7,r3,65535
    6b0c:	3147883a 	add	r3,r6,r5
    6b10:	180a943a 	slli	r5,r3,16
    6b14:	1807d43a 	srai	r3,r3,16
    6b18:	29ceb03a 	or	r7,r5,r7
    6b1c:	49ffff15 	stw	r7,-4(r9)
    6b20:	233ff236 	bltu	r4,r12,6aec <__alt_mem_Flash_flash_data+0xf4006aec>
    6b24:	0206303a 	nor	r3,zero,r8
    6b28:	1b07883a 	add	r3,r3,r12
    6b2c:	1806d0ba 	srli	r3,r3,2
    6b30:	18c00044 	addi	r3,r3,1
    6b34:	18c7883a 	add	r3,r3,r3
    6b38:	18c7883a 	add	r3,r3,r3
    6b3c:	58cb883a 	add	r5,r11,r3
    6b40:	28ffff04 	addi	r3,r5,-4
    6b44:	3800041e 	bne	r7,zero,6b58 <__mdiff+0x148>
    6b48:	18ffff04 	addi	r3,r3,-4
    6b4c:	19000017 	ldw	r4,0(r3)
    6b50:	6b7fffc4 	addi	r13,r13,-1
    6b54:	203ffc26 	beq	r4,zero,6b48 <__alt_mem_Flash_flash_data+0xf4006b48>
    6b58:	13400415 	stw	r13,16(r2)
    6b5c:	dfc00417 	ldw	ra,16(sp)
    6b60:	dcc00317 	ldw	r19,12(sp)
    6b64:	dc800217 	ldw	r18,8(sp)
    6b68:	dc400117 	ldw	r17,4(sp)
    6b6c:	dc000017 	ldw	r16,0(sp)
    6b70:	dec00504 	addi	sp,sp,20
    6b74:	f800283a 	ret
    6b78:	8005883a 	mov	r2,r16
    6b7c:	04400044 	movi	r17,1
    6b80:	9021883a 	mov	r16,r18
    6b84:	1025883a 	mov	r18,r2
    6b88:	003fb006 	br	6a4c <__alt_mem_Flash_flash_data+0xf4006a4c>
    6b8c:	9809883a 	mov	r4,r19
    6b90:	000b883a 	mov	r5,zero
    6b94:	00060dc0 	call	60dc <_Balloc>
    6b98:	00c00044 	movi	r3,1
    6b9c:	10c00415 	stw	r3,16(r2)
    6ba0:	10000515 	stw	zero,20(r2)
    6ba4:	003fed06 	br	6b5c <__alt_mem_Flash_flash_data+0xf4006b5c>

00006ba8 <__ulp>:
    6ba8:	295ffc2c 	andhi	r5,r5,32752
    6bac:	00bf3034 	movhi	r2,64704
    6bb0:	2887883a 	add	r3,r5,r2
    6bb4:	00c0020e 	bge	zero,r3,6bc0 <__ulp+0x18>
    6bb8:	0005883a 	mov	r2,zero
    6bbc:	f800283a 	ret
    6bc0:	00c7c83a 	sub	r3,zero,r3
    6bc4:	180bd53a 	srai	r5,r3,20
    6bc8:	008004c4 	movi	r2,19
    6bcc:	11400a0e 	bge	r2,r5,6bf8 <__ulp+0x50>
    6bd0:	00800c84 	movi	r2,50
    6bd4:	0007883a 	mov	r3,zero
    6bd8:	11400516 	blt	r2,r5,6bf0 <__ulp+0x48>
    6bdc:	00800cc4 	movi	r2,51
    6be0:	114bc83a 	sub	r5,r2,r5
    6be4:	00800044 	movi	r2,1
    6be8:	1144983a 	sll	r2,r2,r5
    6bec:	f800283a 	ret
    6bf0:	00800044 	movi	r2,1
    6bf4:	f800283a 	ret
    6bf8:	00800234 	movhi	r2,8
    6bfc:	1147d83a 	sra	r3,r2,r5
    6c00:	0005883a 	mov	r2,zero
    6c04:	f800283a 	ret

00006c08 <__b2d>:
    6c08:	defffa04 	addi	sp,sp,-24
    6c0c:	dc000015 	stw	r16,0(sp)
    6c10:	24000417 	ldw	r16,16(r4)
    6c14:	dc400115 	stw	r17,4(sp)
    6c18:	24400504 	addi	r17,r4,20
    6c1c:	8421883a 	add	r16,r16,r16
    6c20:	8421883a 	add	r16,r16,r16
    6c24:	8c21883a 	add	r16,r17,r16
    6c28:	dc800215 	stw	r18,8(sp)
    6c2c:	84bfff17 	ldw	r18,-4(r16)
    6c30:	dd000415 	stw	r20,16(sp)
    6c34:	dcc00315 	stw	r19,12(sp)
    6c38:	9009883a 	mov	r4,r18
    6c3c:	2829883a 	mov	r20,r5
    6c40:	dfc00515 	stw	ra,20(sp)
    6c44:	00063d00 	call	63d0 <__hi0bits>
    6c48:	00c00804 	movi	r3,32
    6c4c:	1887c83a 	sub	r3,r3,r2
    6c50:	a0c00015 	stw	r3,0(r20)
    6c54:	00c00284 	movi	r3,10
    6c58:	84ffff04 	addi	r19,r16,-4
    6c5c:	18801216 	blt	r3,r2,6ca8 <__b2d+0xa0>
    6c60:	014002c4 	movi	r5,11
    6c64:	2889c83a 	sub	r4,r5,r2
    6c68:	9106d83a 	srl	r3,r18,r4
    6c6c:	18cffc34 	orhi	r3,r3,16368
    6c70:	8cc0282e 	bgeu	r17,r19,6d14 <__b2d+0x10c>
    6c74:	817ffe17 	ldw	r5,-8(r16)
    6c78:	290ad83a 	srl	r5,r5,r4
    6c7c:	10800544 	addi	r2,r2,21
    6c80:	9084983a 	sll	r2,r18,r2
    6c84:	2884b03a 	or	r2,r5,r2
    6c88:	dfc00517 	ldw	ra,20(sp)
    6c8c:	dd000417 	ldw	r20,16(sp)
    6c90:	dcc00317 	ldw	r19,12(sp)
    6c94:	dc800217 	ldw	r18,8(sp)
    6c98:	dc400117 	ldw	r17,4(sp)
    6c9c:	dc000017 	ldw	r16,0(sp)
    6ca0:	dec00604 	addi	sp,sp,24
    6ca4:	f800283a 	ret
    6ca8:	113ffd44 	addi	r4,r2,-11
    6cac:	8cc00f2e 	bgeu	r17,r19,6cec <__b2d+0xe4>
    6cb0:	81bffe04 	addi	r6,r16,-8
    6cb4:	817ffe17 	ldw	r5,-8(r16)
    6cb8:	20001326 	beq	r4,zero,6d08 <__b2d+0x100>
    6cbc:	00c00ac4 	movi	r3,43
    6cc0:	1885c83a 	sub	r2,r3,r2
    6cc4:	2886d83a 	srl	r3,r5,r2
    6cc8:	9124983a 	sll	r18,r18,r4
    6ccc:	90e4b03a 	or	r18,r18,r3
    6cd0:	90cffc34 	orhi	r3,r18,16368
    6cd4:	8980112e 	bgeu	r17,r6,6d1c <__b2d+0x114>
    6cd8:	81bffd17 	ldw	r6,-12(r16)
    6cdc:	308cd83a 	srl	r6,r6,r2
    6ce0:	2904983a 	sll	r2,r5,r4
    6ce4:	1184b03a 	or	r2,r2,r6
    6ce8:	003fe706 	br	6c88 <__alt_mem_Flash_flash_data+0xf4006c88>
    6cec:	20000526 	beq	r4,zero,6d04 <__b2d+0xfc>
    6cf0:	9124983a 	sll	r18,r18,r4
    6cf4:	000d883a 	mov	r6,zero
    6cf8:	000b883a 	mov	r5,zero
    6cfc:	90cffc34 	orhi	r3,r18,16368
    6d00:	003ff706 	br	6ce0 <__alt_mem_Flash_flash_data+0xf4006ce0>
    6d04:	000b883a 	mov	r5,zero
    6d08:	90cffc34 	orhi	r3,r18,16368
    6d0c:	2805883a 	mov	r2,r5
    6d10:	003fdd06 	br	6c88 <__alt_mem_Flash_flash_data+0xf4006c88>
    6d14:	000b883a 	mov	r5,zero
    6d18:	003fd806 	br	6c7c <__alt_mem_Flash_flash_data+0xf4006c7c>
    6d1c:	000d883a 	mov	r6,zero
    6d20:	003fef06 	br	6ce0 <__alt_mem_Flash_flash_data+0xf4006ce0>

00006d24 <__d2b>:
    6d24:	defff704 	addi	sp,sp,-36
    6d28:	dc000215 	stw	r16,8(sp)
    6d2c:	3021883a 	mov	r16,r6
    6d30:	dc400315 	stw	r17,12(sp)
    6d34:	8022907a 	slli	r17,r16,1
    6d38:	dd400715 	stw	r21,28(sp)
    6d3c:	282b883a 	mov	r21,r5
    6d40:	01400044 	movi	r5,1
    6d44:	dd000615 	stw	r20,24(sp)
    6d48:	dcc00515 	stw	r19,20(sp)
    6d4c:	dc800415 	stw	r18,16(sp)
    6d50:	dfc00815 	stw	ra,32(sp)
    6d54:	3829883a 	mov	r20,r7
    6d58:	dc800917 	ldw	r18,36(sp)
    6d5c:	8822d57a 	srli	r17,r17,21
    6d60:	00060dc0 	call	60dc <_Balloc>
    6d64:	1027883a 	mov	r19,r2
    6d68:	00800434 	movhi	r2,16
    6d6c:	10bfffc4 	addi	r2,r2,-1
    6d70:	808c703a 	and	r6,r16,r2
    6d74:	88000126 	beq	r17,zero,6d7c <__d2b+0x58>
    6d78:	31800434 	orhi	r6,r6,16
    6d7c:	d9800015 	stw	r6,0(sp)
    6d80:	a8001f26 	beq	r21,zero,6e00 <__d2b+0xdc>
    6d84:	d9000104 	addi	r4,sp,4
    6d88:	dd400115 	stw	r21,4(sp)
    6d8c:	00064380 	call	6438 <__lo0bits>
    6d90:	d8c00017 	ldw	r3,0(sp)
    6d94:	1000291e 	bne	r2,zero,6e3c <__d2b+0x118>
    6d98:	d9000117 	ldw	r4,4(sp)
    6d9c:	99000515 	stw	r4,20(r19)
    6da0:	1820c03a 	cmpne	r16,r3,zero
    6da4:	84000044 	addi	r16,r16,1
    6da8:	98c00615 	stw	r3,24(r19)
    6dac:	9c000415 	stw	r16,16(r19)
    6db0:	88001b1e 	bne	r17,zero,6e20 <__d2b+0xfc>
    6db4:	800690ba 	slli	r3,r16,2
    6db8:	10bef384 	addi	r2,r2,-1074
    6dbc:	a0800015 	stw	r2,0(r20)
    6dc0:	98c5883a 	add	r2,r19,r3
    6dc4:	11000417 	ldw	r4,16(r2)
    6dc8:	8020917a 	slli	r16,r16,5
    6dcc:	00063d00 	call	63d0 <__hi0bits>
    6dd0:	8085c83a 	sub	r2,r16,r2
    6dd4:	90800015 	stw	r2,0(r18)
    6dd8:	9805883a 	mov	r2,r19
    6ddc:	dfc00817 	ldw	ra,32(sp)
    6de0:	dd400717 	ldw	r21,28(sp)
    6de4:	dd000617 	ldw	r20,24(sp)
    6de8:	dcc00517 	ldw	r19,20(sp)
    6dec:	dc800417 	ldw	r18,16(sp)
    6df0:	dc400317 	ldw	r17,12(sp)
    6df4:	dc000217 	ldw	r16,8(sp)
    6df8:	dec00904 	addi	sp,sp,36
    6dfc:	f800283a 	ret
    6e00:	d809883a 	mov	r4,sp
    6e04:	00064380 	call	6438 <__lo0bits>
    6e08:	d8c00017 	ldw	r3,0(sp)
    6e0c:	04000044 	movi	r16,1
    6e10:	9c000415 	stw	r16,16(r19)
    6e14:	98c00515 	stw	r3,20(r19)
    6e18:	10800804 	addi	r2,r2,32
    6e1c:	883fe526 	beq	r17,zero,6db4 <__alt_mem_Flash_flash_data+0xf4006db4>
    6e20:	8c7ef344 	addi	r17,r17,-1075
    6e24:	88a3883a 	add	r17,r17,r2
    6e28:	00c00d44 	movi	r3,53
    6e2c:	a4400015 	stw	r17,0(r20)
    6e30:	1885c83a 	sub	r2,r3,r2
    6e34:	90800015 	stw	r2,0(r18)
    6e38:	003fe706 	br	6dd8 <__alt_mem_Flash_flash_data+0xf4006dd8>
    6e3c:	01000804 	movi	r4,32
    6e40:	2089c83a 	sub	r4,r4,r2
    6e44:	1908983a 	sll	r4,r3,r4
    6e48:	d9400117 	ldw	r5,4(sp)
    6e4c:	1886d83a 	srl	r3,r3,r2
    6e50:	2148b03a 	or	r4,r4,r5
    6e54:	99000515 	stw	r4,20(r19)
    6e58:	d8c00015 	stw	r3,0(sp)
    6e5c:	003fd006 	br	6da0 <__alt_mem_Flash_flash_data+0xf4006da0>

00006e60 <__ratio>:
    6e60:	defff904 	addi	sp,sp,-28
    6e64:	dc400315 	stw	r17,12(sp)
    6e68:	2823883a 	mov	r17,r5
    6e6c:	d9400104 	addi	r5,sp,4
    6e70:	dfc00615 	stw	ra,24(sp)
    6e74:	dcc00515 	stw	r19,20(sp)
    6e78:	dc800415 	stw	r18,16(sp)
    6e7c:	2027883a 	mov	r19,r4
    6e80:	dc000215 	stw	r16,8(sp)
    6e84:	0006c080 	call	6c08 <__b2d>
    6e88:	8809883a 	mov	r4,r17
    6e8c:	d80b883a 	mov	r5,sp
    6e90:	1025883a 	mov	r18,r2
    6e94:	1821883a 	mov	r16,r3
    6e98:	0006c080 	call	6c08 <__b2d>
    6e9c:	8a400417 	ldw	r9,16(r17)
    6ea0:	9a000417 	ldw	r8,16(r19)
    6ea4:	100d883a 	mov	r6,r2
    6ea8:	d8800017 	ldw	r2,0(sp)
    6eac:	4251c83a 	sub	r8,r8,r9
    6eb0:	4012917a 	slli	r9,r8,5
    6eb4:	da000117 	ldw	r8,4(sp)
    6eb8:	4091c83a 	sub	r8,r8,r2
    6ebc:	4251883a 	add	r8,r8,r9
    6ec0:	02000d0e 	bge	zero,r8,6ef8 <__ratio+0x98>
    6ec4:	4010953a 	slli	r8,r8,20
    6ec8:	4421883a 	add	r16,r8,r16
    6ecc:	9009883a 	mov	r4,r18
    6ed0:	800b883a 	mov	r5,r16
    6ed4:	180f883a 	mov	r7,r3
    6ed8:	000b2140 	call	b214 <__divdf3>
    6edc:	dfc00617 	ldw	ra,24(sp)
    6ee0:	dcc00517 	ldw	r19,20(sp)
    6ee4:	dc800417 	ldw	r18,16(sp)
    6ee8:	dc400317 	ldw	r17,12(sp)
    6eec:	dc000217 	ldw	r16,8(sp)
    6ef0:	dec00704 	addi	sp,sp,28
    6ef4:	f800283a 	ret
    6ef8:	4010953a 	slli	r8,r8,20
    6efc:	1a07c83a 	sub	r3,r3,r8
    6f00:	003ff206 	br	6ecc <__alt_mem_Flash_flash_data+0xf4006ecc>

00006f04 <_mprec_log10>:
    6f04:	defffe04 	addi	sp,sp,-8
    6f08:	dc000015 	stw	r16,0(sp)
    6f0c:	dfc00115 	stw	ra,4(sp)
    6f10:	008005c4 	movi	r2,23
    6f14:	2021883a 	mov	r16,r4
    6f18:	11000d0e 	bge	r2,r4,6f50 <_mprec_log10+0x4c>
    6f1c:	0005883a 	mov	r2,zero
    6f20:	00cffc34 	movhi	r3,16368
    6f24:	843fffc4 	addi	r16,r16,-1
    6f28:	1009883a 	mov	r4,r2
    6f2c:	180b883a 	mov	r5,r3
    6f30:	000d883a 	mov	r6,zero
    6f34:	01d00934 	movhi	r7,16420
    6f38:	000bd240 	call	bd24 <__muldf3>
    6f3c:	803ff91e 	bne	r16,zero,6f24 <__alt_mem_Flash_flash_data+0xf4006f24>
    6f40:	dfc00117 	ldw	ra,4(sp)
    6f44:	dc000017 	ldw	r16,0(sp)
    6f48:	dec00204 	addi	sp,sp,8
    6f4c:	f800283a 	ret
    6f50:	202090fa 	slli	r16,r4,3
    6f54:	008000b4 	movhi	r2,2
    6f58:	10a5c704 	addi	r2,r2,-26852
    6f5c:	1421883a 	add	r16,r2,r16
    6f60:	80800017 	ldw	r2,0(r16)
    6f64:	80c00117 	ldw	r3,4(r16)
    6f68:	dfc00117 	ldw	ra,4(sp)
    6f6c:	dc000017 	ldw	r16,0(sp)
    6f70:	dec00204 	addi	sp,sp,8
    6f74:	f800283a 	ret

00006f78 <__copybits>:
    6f78:	297fffc4 	addi	r5,r5,-1
    6f7c:	280fd17a 	srai	r7,r5,5
    6f80:	30c00417 	ldw	r3,16(r6)
    6f84:	30800504 	addi	r2,r6,20
    6f88:	39c00044 	addi	r7,r7,1
    6f8c:	18c7883a 	add	r3,r3,r3
    6f90:	39cf883a 	add	r7,r7,r7
    6f94:	18c7883a 	add	r3,r3,r3
    6f98:	39cf883a 	add	r7,r7,r7
    6f9c:	10c7883a 	add	r3,r2,r3
    6fa0:	21cf883a 	add	r7,r4,r7
    6fa4:	10c00d2e 	bgeu	r2,r3,6fdc <__copybits+0x64>
    6fa8:	200b883a 	mov	r5,r4
    6fac:	12000017 	ldw	r8,0(r2)
    6fb0:	29400104 	addi	r5,r5,4
    6fb4:	10800104 	addi	r2,r2,4
    6fb8:	2a3fff15 	stw	r8,-4(r5)
    6fbc:	10fffb36 	bltu	r2,r3,6fac <__alt_mem_Flash_flash_data+0xf4006fac>
    6fc0:	1985c83a 	sub	r2,r3,r6
    6fc4:	10bffac4 	addi	r2,r2,-21
    6fc8:	1004d0ba 	srli	r2,r2,2
    6fcc:	10800044 	addi	r2,r2,1
    6fd0:	1085883a 	add	r2,r2,r2
    6fd4:	1085883a 	add	r2,r2,r2
    6fd8:	2089883a 	add	r4,r4,r2
    6fdc:	21c0032e 	bgeu	r4,r7,6fec <__copybits+0x74>
    6fe0:	20000015 	stw	zero,0(r4)
    6fe4:	21000104 	addi	r4,r4,4
    6fe8:	21fffd36 	bltu	r4,r7,6fe0 <__alt_mem_Flash_flash_data+0xf4006fe0>
    6fec:	f800283a 	ret

00006ff0 <__any_on>:
    6ff0:	20c00417 	ldw	r3,16(r4)
    6ff4:	2805d17a 	srai	r2,r5,5
    6ff8:	21000504 	addi	r4,r4,20
    6ffc:	18800d0e 	bge	r3,r2,7034 <__any_on+0x44>
    7000:	18c7883a 	add	r3,r3,r3
    7004:	18c7883a 	add	r3,r3,r3
    7008:	20c7883a 	add	r3,r4,r3
    700c:	20c0192e 	bgeu	r4,r3,7074 <__any_on+0x84>
    7010:	18bfff17 	ldw	r2,-4(r3)
    7014:	18ffff04 	addi	r3,r3,-4
    7018:	1000041e 	bne	r2,zero,702c <__any_on+0x3c>
    701c:	20c0142e 	bgeu	r4,r3,7070 <__any_on+0x80>
    7020:	18ffff04 	addi	r3,r3,-4
    7024:	19400017 	ldw	r5,0(r3)
    7028:	283ffc26 	beq	r5,zero,701c <__alt_mem_Flash_flash_data+0xf400701c>
    702c:	00800044 	movi	r2,1
    7030:	f800283a 	ret
    7034:	10c00a0e 	bge	r2,r3,7060 <__any_on+0x70>
    7038:	1085883a 	add	r2,r2,r2
    703c:	1085883a 	add	r2,r2,r2
    7040:	294007cc 	andi	r5,r5,31
    7044:	2087883a 	add	r3,r4,r2
    7048:	283ff026 	beq	r5,zero,700c <__alt_mem_Flash_flash_data+0xf400700c>
    704c:	19800017 	ldw	r6,0(r3)
    7050:	3144d83a 	srl	r2,r6,r5
    7054:	114a983a 	sll	r5,r2,r5
    7058:	29bff41e 	bne	r5,r6,702c <__alt_mem_Flash_flash_data+0xf400702c>
    705c:	003feb06 	br	700c <__alt_mem_Flash_flash_data+0xf400700c>
    7060:	1085883a 	add	r2,r2,r2
    7064:	1085883a 	add	r2,r2,r2
    7068:	2087883a 	add	r3,r4,r2
    706c:	003fe706 	br	700c <__alt_mem_Flash_flash_data+0xf400700c>
    7070:	f800283a 	ret
    7074:	0005883a 	mov	r2,zero
    7078:	f800283a 	ret

0000707c <__fpclassifyd>:
    707c:	00a00034 	movhi	r2,32768
    7080:	10bfffc4 	addi	r2,r2,-1
    7084:	2884703a 	and	r2,r5,r2
    7088:	10000726 	beq	r2,zero,70a8 <__fpclassifyd+0x2c>
    708c:	00fffc34 	movhi	r3,65520
    7090:	019ff834 	movhi	r6,32736
    7094:	28c7883a 	add	r3,r5,r3
    7098:	31bfffc4 	addi	r6,r6,-1
    709c:	30c00536 	bltu	r6,r3,70b4 <__fpclassifyd+0x38>
    70a0:	00800104 	movi	r2,4
    70a4:	f800283a 	ret
    70a8:	2000021e 	bne	r4,zero,70b4 <__fpclassifyd+0x38>
    70ac:	00800084 	movi	r2,2
    70b0:	f800283a 	ret
    70b4:	00dffc34 	movhi	r3,32752
    70b8:	019ff834 	movhi	r6,32736
    70bc:	28cb883a 	add	r5,r5,r3
    70c0:	31bfffc4 	addi	r6,r6,-1
    70c4:	317ff62e 	bgeu	r6,r5,70a0 <__alt_mem_Flash_flash_data+0xf40070a0>
    70c8:	01400434 	movhi	r5,16
    70cc:	297fffc4 	addi	r5,r5,-1
    70d0:	28800236 	bltu	r5,r2,70dc <__fpclassifyd+0x60>
    70d4:	008000c4 	movi	r2,3
    70d8:	f800283a 	ret
    70dc:	10c00226 	beq	r2,r3,70e8 <__fpclassifyd+0x6c>
    70e0:	0005883a 	mov	r2,zero
    70e4:	f800283a 	ret
    70e8:	2005003a 	cmpeq	r2,r4,zero
    70ec:	f800283a 	ret

000070f0 <_sbrk_r>:
    70f0:	defffd04 	addi	sp,sp,-12
    70f4:	dc000015 	stw	r16,0(sp)
    70f8:	040000b4 	movhi	r16,2
    70fc:	dc400115 	stw	r17,4(sp)
    7100:	84368304 	addi	r16,r16,-9716
    7104:	2023883a 	mov	r17,r4
    7108:	2809883a 	mov	r4,r5
    710c:	dfc00215 	stw	ra,8(sp)
    7110:	80000015 	stw	zero,0(r16)
    7114:	000d7400 	call	d740 <sbrk>
    7118:	00ffffc4 	movi	r3,-1
    711c:	10c00526 	beq	r2,r3,7134 <_sbrk_r+0x44>
    7120:	dfc00217 	ldw	ra,8(sp)
    7124:	dc400117 	ldw	r17,4(sp)
    7128:	dc000017 	ldw	r16,0(sp)
    712c:	dec00304 	addi	sp,sp,12
    7130:	f800283a 	ret
    7134:	80c00017 	ldw	r3,0(r16)
    7138:	183ff926 	beq	r3,zero,7120 <__alt_mem_Flash_flash_data+0xf4007120>
    713c:	88c00015 	stw	r3,0(r17)
    7140:	003ff706 	br	7120 <__alt_mem_Flash_flash_data+0xf4007120>

00007144 <__sread>:
    7144:	defffe04 	addi	sp,sp,-8
    7148:	dc000015 	stw	r16,0(sp)
    714c:	2821883a 	mov	r16,r5
    7150:	2940038f 	ldh	r5,14(r5)
    7154:	dfc00115 	stw	ra,4(sp)
    7158:	00093fc0 	call	93fc <_read_r>
    715c:	10000716 	blt	r2,zero,717c <__sread+0x38>
    7160:	80c01417 	ldw	r3,80(r16)
    7164:	1887883a 	add	r3,r3,r2
    7168:	80c01415 	stw	r3,80(r16)
    716c:	dfc00117 	ldw	ra,4(sp)
    7170:	dc000017 	ldw	r16,0(sp)
    7174:	dec00204 	addi	sp,sp,8
    7178:	f800283a 	ret
    717c:	80c0030b 	ldhu	r3,12(r16)
    7180:	18fbffcc 	andi	r3,r3,61439
    7184:	80c0030d 	sth	r3,12(r16)
    7188:	dfc00117 	ldw	ra,4(sp)
    718c:	dc000017 	ldw	r16,0(sp)
    7190:	dec00204 	addi	sp,sp,8
    7194:	f800283a 	ret

00007198 <__seofread>:
    7198:	0005883a 	mov	r2,zero
    719c:	f800283a 	ret

000071a0 <__swrite>:
    71a0:	2880030b 	ldhu	r2,12(r5)
    71a4:	defffb04 	addi	sp,sp,-20
    71a8:	dcc00315 	stw	r19,12(sp)
    71ac:	dc800215 	stw	r18,8(sp)
    71b0:	dc400115 	stw	r17,4(sp)
    71b4:	dc000015 	stw	r16,0(sp)
    71b8:	dfc00415 	stw	ra,16(sp)
    71bc:	10c0400c 	andi	r3,r2,256
    71c0:	2821883a 	mov	r16,r5
    71c4:	2027883a 	mov	r19,r4
    71c8:	3025883a 	mov	r18,r6
    71cc:	3823883a 	mov	r17,r7
    71d0:	18000526 	beq	r3,zero,71e8 <__swrite+0x48>
    71d4:	2940038f 	ldh	r5,14(r5)
    71d8:	000d883a 	mov	r6,zero
    71dc:	01c00084 	movi	r7,2
    71e0:	00092440 	call	9244 <_lseek_r>
    71e4:	8080030b 	ldhu	r2,12(r16)
    71e8:	8140038f 	ldh	r5,14(r16)
    71ec:	10bbffcc 	andi	r2,r2,61439
    71f0:	9809883a 	mov	r4,r19
    71f4:	900d883a 	mov	r6,r18
    71f8:	880f883a 	mov	r7,r17
    71fc:	8080030d 	sth	r2,12(r16)
    7200:	dfc00417 	ldw	ra,16(sp)
    7204:	dcc00317 	ldw	r19,12(sp)
    7208:	dc800217 	ldw	r18,8(sp)
    720c:	dc400117 	ldw	r17,4(sp)
    7210:	dc000017 	ldw	r16,0(sp)
    7214:	dec00504 	addi	sp,sp,20
    7218:	00088801 	jmpi	8880 <_write_r>

0000721c <__sseek>:
    721c:	defffe04 	addi	sp,sp,-8
    7220:	dc000015 	stw	r16,0(sp)
    7224:	2821883a 	mov	r16,r5
    7228:	2940038f 	ldh	r5,14(r5)
    722c:	dfc00115 	stw	ra,4(sp)
    7230:	00092440 	call	9244 <_lseek_r>
    7234:	00ffffc4 	movi	r3,-1
    7238:	10c00826 	beq	r2,r3,725c <__sseek+0x40>
    723c:	80c0030b 	ldhu	r3,12(r16)
    7240:	80801415 	stw	r2,80(r16)
    7244:	18c40014 	ori	r3,r3,4096
    7248:	80c0030d 	sth	r3,12(r16)
    724c:	dfc00117 	ldw	ra,4(sp)
    7250:	dc000017 	ldw	r16,0(sp)
    7254:	dec00204 	addi	sp,sp,8
    7258:	f800283a 	ret
    725c:	80c0030b 	ldhu	r3,12(r16)
    7260:	18fbffcc 	andi	r3,r3,61439
    7264:	80c0030d 	sth	r3,12(r16)
    7268:	dfc00117 	ldw	ra,4(sp)
    726c:	dc000017 	ldw	r16,0(sp)
    7270:	dec00204 	addi	sp,sp,8
    7274:	f800283a 	ret

00007278 <__sclose>:
    7278:	2940038f 	ldh	r5,14(r5)
    727c:	00088dc1 	jmpi	88dc <_close_r>

00007280 <strcmp>:
    7280:	2144b03a 	or	r2,r4,r5
    7284:	108000cc 	andi	r2,r2,3
    7288:	1000171e 	bne	r2,zero,72e8 <strcmp+0x68>
    728c:	20800017 	ldw	r2,0(r4)
    7290:	28c00017 	ldw	r3,0(r5)
    7294:	10c0141e 	bne	r2,r3,72e8 <strcmp+0x68>
    7298:	027fbff4 	movhi	r9,65279
    729c:	4a7fbfc4 	addi	r9,r9,-257
    72a0:	0086303a 	nor	r3,zero,r2
    72a4:	02202074 	movhi	r8,32897
    72a8:	1245883a 	add	r2,r2,r9
    72ac:	42202004 	addi	r8,r8,-32640
    72b0:	10c4703a 	and	r2,r2,r3
    72b4:	1204703a 	and	r2,r2,r8
    72b8:	10000226 	beq	r2,zero,72c4 <strcmp+0x44>
    72bc:	00001706 	br	731c <strcmp+0x9c>
    72c0:	1000161e 	bne	r2,zero,731c <strcmp+0x9c>
    72c4:	21000104 	addi	r4,r4,4
    72c8:	20c00017 	ldw	r3,0(r4)
    72cc:	29400104 	addi	r5,r5,4
    72d0:	29800017 	ldw	r6,0(r5)
    72d4:	1a4f883a 	add	r7,r3,r9
    72d8:	00c4303a 	nor	r2,zero,r3
    72dc:	3884703a 	and	r2,r7,r2
    72e0:	1204703a 	and	r2,r2,r8
    72e4:	19bff626 	beq	r3,r6,72c0 <__alt_mem_Flash_flash_data+0xf40072c0>
    72e8:	20800007 	ldb	r2,0(r4)
    72ec:	1000051e 	bne	r2,zero,7304 <strcmp+0x84>
    72f0:	00000606 	br	730c <strcmp+0x8c>
    72f4:	21000044 	addi	r4,r4,1
    72f8:	20800007 	ldb	r2,0(r4)
    72fc:	29400044 	addi	r5,r5,1
    7300:	10000226 	beq	r2,zero,730c <strcmp+0x8c>
    7304:	28c00007 	ldb	r3,0(r5)
    7308:	10fffa26 	beq	r2,r3,72f4 <__alt_mem_Flash_flash_data+0xf40072f4>
    730c:	20800003 	ldbu	r2,0(r4)
    7310:	28c00003 	ldbu	r3,0(r5)
    7314:	10c5c83a 	sub	r2,r2,r3
    7318:	f800283a 	ret
    731c:	0005883a 	mov	r2,zero
    7320:	f800283a 	ret

00007324 <strlen>:
    7324:	208000cc 	andi	r2,r4,3
    7328:	10002026 	beq	r2,zero,73ac <strlen+0x88>
    732c:	20800007 	ldb	r2,0(r4)
    7330:	10002026 	beq	r2,zero,73b4 <strlen+0x90>
    7334:	2005883a 	mov	r2,r4
    7338:	00000206 	br	7344 <strlen+0x20>
    733c:	10c00007 	ldb	r3,0(r2)
    7340:	18001826 	beq	r3,zero,73a4 <strlen+0x80>
    7344:	10800044 	addi	r2,r2,1
    7348:	10c000cc 	andi	r3,r2,3
    734c:	183ffb1e 	bne	r3,zero,733c <__alt_mem_Flash_flash_data+0xf400733c>
    7350:	10c00017 	ldw	r3,0(r2)
    7354:	01ffbff4 	movhi	r7,65279
    7358:	39ffbfc4 	addi	r7,r7,-257
    735c:	00ca303a 	nor	r5,zero,r3
    7360:	01a02074 	movhi	r6,32897
    7364:	19c7883a 	add	r3,r3,r7
    7368:	31a02004 	addi	r6,r6,-32640
    736c:	1946703a 	and	r3,r3,r5
    7370:	1986703a 	and	r3,r3,r6
    7374:	1800091e 	bne	r3,zero,739c <strlen+0x78>
    7378:	10800104 	addi	r2,r2,4
    737c:	10c00017 	ldw	r3,0(r2)
    7380:	19cb883a 	add	r5,r3,r7
    7384:	00c6303a 	nor	r3,zero,r3
    7388:	28c6703a 	and	r3,r5,r3
    738c:	1986703a 	and	r3,r3,r6
    7390:	183ff926 	beq	r3,zero,7378 <__alt_mem_Flash_flash_data+0xf4007378>
    7394:	00000106 	br	739c <strlen+0x78>
    7398:	10800044 	addi	r2,r2,1
    739c:	10c00007 	ldb	r3,0(r2)
    73a0:	183ffd1e 	bne	r3,zero,7398 <__alt_mem_Flash_flash_data+0xf4007398>
    73a4:	1105c83a 	sub	r2,r2,r4
    73a8:	f800283a 	ret
    73ac:	2005883a 	mov	r2,r4
    73b0:	003fe706 	br	7350 <__alt_mem_Flash_flash_data+0xf4007350>
    73b4:	0005883a 	mov	r2,zero
    73b8:	f800283a 	ret

000073bc <__sprint_r.part.0>:
    73bc:	28801917 	ldw	r2,100(r5)
    73c0:	defff604 	addi	sp,sp,-40
    73c4:	dd400515 	stw	r21,20(sp)
    73c8:	dcc00315 	stw	r19,12(sp)
    73cc:	dfc00915 	stw	ra,36(sp)
    73d0:	df000815 	stw	fp,32(sp)
    73d4:	ddc00715 	stw	r23,28(sp)
    73d8:	dd800615 	stw	r22,24(sp)
    73dc:	dd000415 	stw	r20,16(sp)
    73e0:	dc800215 	stw	r18,8(sp)
    73e4:	dc400115 	stw	r17,4(sp)
    73e8:	dc000015 	stw	r16,0(sp)
    73ec:	1088000c 	andi	r2,r2,8192
    73f0:	2827883a 	mov	r19,r5
    73f4:	302b883a 	mov	r21,r6
    73f8:	10002d26 	beq	r2,zero,74b0 <__sprint_r.part.0+0xf4>
    73fc:	30800217 	ldw	r2,8(r6)
    7400:	35800017 	ldw	r22,0(r6)
    7404:	10002826 	beq	r2,zero,74a8 <__sprint_r.part.0+0xec>
    7408:	2029883a 	mov	r20,r4
    740c:	b5c00104 	addi	r23,r22,4
    7410:	04bfffc4 	movi	r18,-1
    7414:	bc400017 	ldw	r17,0(r23)
    7418:	b4000017 	ldw	r16,0(r22)
    741c:	0039883a 	mov	fp,zero
    7420:	8822d0ba 	srli	r17,r17,2
    7424:	04400316 	blt	zero,r17,7434 <__sprint_r.part.0+0x78>
    7428:	00001806 	br	748c <__sprint_r.part.0+0xd0>
    742c:	84000104 	addi	r16,r16,4
    7430:	8f001526 	beq	r17,fp,7488 <__sprint_r.part.0+0xcc>
    7434:	81400017 	ldw	r5,0(r16)
    7438:	a009883a 	mov	r4,r20
    743c:	980d883a 	mov	r6,r19
    7440:	0008af80 	call	8af8 <_fputwc_r>
    7444:	e7000044 	addi	fp,fp,1
    7448:	14bff81e 	bne	r2,r18,742c <__alt_mem_Flash_flash_data+0xf400742c>
    744c:	9005883a 	mov	r2,r18
    7450:	a8000215 	stw	zero,8(r21)
    7454:	a8000115 	stw	zero,4(r21)
    7458:	dfc00917 	ldw	ra,36(sp)
    745c:	df000817 	ldw	fp,32(sp)
    7460:	ddc00717 	ldw	r23,28(sp)
    7464:	dd800617 	ldw	r22,24(sp)
    7468:	dd400517 	ldw	r21,20(sp)
    746c:	dd000417 	ldw	r20,16(sp)
    7470:	dcc00317 	ldw	r19,12(sp)
    7474:	dc800217 	ldw	r18,8(sp)
    7478:	dc400117 	ldw	r17,4(sp)
    747c:	dc000017 	ldw	r16,0(sp)
    7480:	dec00a04 	addi	sp,sp,40
    7484:	f800283a 	ret
    7488:	a8800217 	ldw	r2,8(r21)
    748c:	8c63883a 	add	r17,r17,r17
    7490:	8c63883a 	add	r17,r17,r17
    7494:	1445c83a 	sub	r2,r2,r17
    7498:	a8800215 	stw	r2,8(r21)
    749c:	b5800204 	addi	r22,r22,8
    74a0:	bdc00204 	addi	r23,r23,8
    74a4:	103fdb1e 	bne	r2,zero,7414 <__alt_mem_Flash_flash_data+0xf4007414>
    74a8:	0005883a 	mov	r2,zero
    74ac:	003fe806 	br	7450 <__alt_mem_Flash_flash_data+0xf4007450>
    74b0:	0008d300 	call	8d30 <__sfvwrite_r>
    74b4:	003fe606 	br	7450 <__alt_mem_Flash_flash_data+0xf4007450>

000074b8 <__sprint_r>:
    74b8:	30c00217 	ldw	r3,8(r6)
    74bc:	18000126 	beq	r3,zero,74c4 <__sprint_r+0xc>
    74c0:	00073bc1 	jmpi	73bc <__sprint_r.part.0>
    74c4:	30000115 	stw	zero,4(r6)
    74c8:	0005883a 	mov	r2,zero
    74cc:	f800283a 	ret

000074d0 <___vfiprintf_internal_r>:
    74d0:	deffca04 	addi	sp,sp,-216
    74d4:	dd803215 	stw	r22,200(sp)
    74d8:	dd403115 	stw	r21,196(sp)
    74dc:	dfc03515 	stw	ra,212(sp)
    74e0:	df003415 	stw	fp,208(sp)
    74e4:	ddc03315 	stw	r23,204(sp)
    74e8:	dd003015 	stw	r20,192(sp)
    74ec:	dcc02f15 	stw	r19,188(sp)
    74f0:	dc802e15 	stw	r18,184(sp)
    74f4:	dc402d15 	stw	r17,180(sp)
    74f8:	dc002c15 	stw	r16,176(sp)
    74fc:	d9002015 	stw	r4,128(sp)
    7500:	d9c02215 	stw	r7,136(sp)
    7504:	282b883a 	mov	r21,r5
    7508:	302d883a 	mov	r22,r6
    750c:	20000226 	beq	r4,zero,7518 <___vfiprintf_internal_r+0x48>
    7510:	20800e17 	ldw	r2,56(r4)
    7514:	1001b126 	beq	r2,zero,7bdc <___vfiprintf_internal_r+0x70c>
    7518:	a880030b 	ldhu	r2,12(r21)
    751c:	10c8000c 	andi	r3,r2,8192
    7520:	1800061e 	bne	r3,zero,753c <___vfiprintf_internal_r+0x6c>
    7524:	a9001917 	ldw	r4,100(r21)
    7528:	00f7ffc4 	movi	r3,-8193
    752c:	10880014 	ori	r2,r2,8192
    7530:	20c6703a 	and	r3,r4,r3
    7534:	a880030d 	sth	r2,12(r21)
    7538:	a8c01915 	stw	r3,100(r21)
    753c:	10c0020c 	andi	r3,r2,8
    7540:	18018926 	beq	r3,zero,7b68 <___vfiprintf_internal_r+0x698>
    7544:	a8c00417 	ldw	r3,16(r21)
    7548:	18018726 	beq	r3,zero,7b68 <___vfiprintf_internal_r+0x698>
    754c:	1080068c 	andi	r2,r2,26
    7550:	00c00284 	movi	r3,10
    7554:	10c18c26 	beq	r2,r3,7b88 <___vfiprintf_internal_r+0x6b8>
    7558:	d8801a04 	addi	r2,sp,104
    755c:	d8c019c4 	addi	r3,sp,103
    7560:	070000b4 	movhi	fp,2
    7564:	05c000b4 	movhi	r23,2
    7568:	10c9c83a 	sub	r4,r2,r3
    756c:	e725fd04 	addi	fp,fp,-26636
    7570:	bde5f904 	addi	r23,r23,-26652
    7574:	d8801e15 	stw	r2,120(sp)
    7578:	d8c01f15 	stw	r3,124(sp)
    757c:	dec01a15 	stw	sp,104(sp)
    7580:	d8001c15 	stw	zero,112(sp)
    7584:	d8001b15 	stw	zero,108(sp)
    7588:	d8002615 	stw	zero,152(sp)
    758c:	d8002315 	stw	zero,140(sp)
    7590:	d9002715 	stw	r4,156(sp)
    7594:	d811883a 	mov	r8,sp
    7598:	dd402115 	stw	r21,132(sp)
    759c:	b021883a 	mov	r16,r22
    75a0:	80800007 	ldb	r2,0(r16)
    75a4:	10037226 	beq	r2,zero,8370 <___vfiprintf_internal_r+0xea0>
    75a8:	01000944 	movi	r4,37
    75ac:	11037026 	beq	r2,r4,8370 <___vfiprintf_internal_r+0xea0>
    75b0:	8005883a 	mov	r2,r16
    75b4:	00000106 	br	75bc <___vfiprintf_internal_r+0xec>
    75b8:	19000326 	beq	r3,r4,75c8 <___vfiprintf_internal_r+0xf8>
    75bc:	10800044 	addi	r2,r2,1
    75c0:	10c00007 	ldb	r3,0(r2)
    75c4:	183ffc1e 	bne	r3,zero,75b8 <__alt_mem_Flash_flash_data+0xf40075b8>
    75c8:	1425c83a 	sub	r18,r2,r16
    75cc:	1023883a 	mov	r17,r2
    75d0:	90001026 	beq	r18,zero,7614 <___vfiprintf_internal_r+0x144>
    75d4:	d8c01c17 	ldw	r3,112(sp)
    75d8:	d8801b17 	ldw	r2,108(sp)
    75dc:	44000015 	stw	r16,0(r8)
    75e0:	90c7883a 	add	r3,r18,r3
    75e4:	10800044 	addi	r2,r2,1
    75e8:	44800115 	stw	r18,4(r8)
    75ec:	d8c01c15 	stw	r3,112(sp)
    75f0:	d8801b15 	stw	r2,108(sp)
    75f4:	010001c4 	movi	r4,7
    75f8:	2080750e 	bge	r4,r2,77d0 <___vfiprintf_internal_r+0x300>
    75fc:	18036f1e 	bne	r3,zero,83bc <___vfiprintf_internal_r+0xeec>
    7600:	d8802317 	ldw	r2,140(sp)
    7604:	d8001b15 	stw	zero,108(sp)
    7608:	d811883a 	mov	r8,sp
    760c:	1485883a 	add	r2,r2,r18
    7610:	d8802315 	stw	r2,140(sp)
    7614:	88800007 	ldb	r2,0(r17)
    7618:	10041026 	beq	r2,zero,865c <___vfiprintf_internal_r+0x118c>
    761c:	88c00047 	ldb	r3,1(r17)
    7620:	88800044 	addi	r2,r17,1
    7624:	d8001d85 	stb	zero,118(sp)
    7628:	000f883a 	mov	r7,zero
    762c:	027fffc4 	movi	r9,-1
    7630:	0025883a 	mov	r18,zero
    7634:	002b883a 	mov	r21,zero
    7638:	01401604 	movi	r5,88
    763c:	01800244 	movi	r6,9
    7640:	03400a84 	movi	r13,42
    7644:	03001b04 	movi	r12,108
    7648:	14000044 	addi	r16,r2,1
    764c:	18bff804 	addi	r2,r3,-32
    7650:	28825536 	bltu	r5,r2,7fa8 <___vfiprintf_internal_r+0xad8>
    7654:	100490ba 	slli	r2,r2,2
    7658:	01000034 	movhi	r4,0
    765c:	211d9b04 	addi	r4,r4,30316
    7660:	1105883a 	add	r2,r2,r4
    7664:	10800017 	ldw	r2,0(r2)
    7668:	1000683a 	jmp	r2
    766c:	00007d6c 	andhi	zero,zero,501
    7670:	00007fa8 	cmpgeui	zero,zero,510
    7674:	00007fa8 	cmpgeui	zero,zero,510
    7678:	00007d8c 	andi	zero,zero,502
    767c:	00007fa8 	cmpgeui	zero,zero,510
    7680:	00007fa8 	cmpgeui	zero,zero,510
    7684:	00007fa8 	cmpgeui	zero,zero,510
    7688:	00007fa8 	cmpgeui	zero,zero,510
    768c:	00007fa8 	cmpgeui	zero,zero,510
    7690:	00007fa8 	cmpgeui	zero,zero,510
    7694:	00007d9c 	xori	zero,zero,502
    7698:	00007dbc 	xorhi	zero,zero,502
    769c:	00007fa8 	cmpgeui	zero,zero,510
    76a0:	00007be4 	muli	zero,zero,495
    76a4:	00007cd0 	cmplti	zero,zero,499
    76a8:	00007fa8 	cmpgeui	zero,zero,510
    76ac:	00007c50 	cmplti	zero,zero,497
    76b0:	00007c60 	cmpeqi	zero,zero,497
    76b4:	00007c60 	cmpeqi	zero,zero,497
    76b8:	00007c60 	cmpeqi	zero,zero,497
    76bc:	00007c60 	cmpeqi	zero,zero,497
    76c0:	00007c60 	cmpeqi	zero,zero,497
    76c4:	00007c60 	cmpeqi	zero,zero,497
    76c8:	00007c60 	cmpeqi	zero,zero,497
    76cc:	00007c60 	cmpeqi	zero,zero,497
    76d0:	00007c60 	cmpeqi	zero,zero,497
    76d4:	00007fa8 	cmpgeui	zero,zero,510
    76d8:	00007fa8 	cmpgeui	zero,zero,510
    76dc:	00007fa8 	cmpgeui	zero,zero,510
    76e0:	00007fa8 	cmpgeui	zero,zero,510
    76e4:	00007fa8 	cmpgeui	zero,zero,510
    76e8:	00007fa8 	cmpgeui	zero,zero,510
    76ec:	00007fa8 	cmpgeui	zero,zero,510
    76f0:	00007fa8 	cmpgeui	zero,zero,510
    76f4:	00007fa8 	cmpgeui	zero,zero,510
    76f8:	00007fa8 	cmpgeui	zero,zero,510
    76fc:	00007c8c 	andi	zero,zero,498
    7700:	00007fa8 	cmpgeui	zero,zero,510
    7704:	00007fa8 	cmpgeui	zero,zero,510
    7708:	00007fa8 	cmpgeui	zero,zero,510
    770c:	00007fa8 	cmpgeui	zero,zero,510
    7710:	00007fa8 	cmpgeui	zero,zero,510
    7714:	00007fa8 	cmpgeui	zero,zero,510
    7718:	00007fa8 	cmpgeui	zero,zero,510
    771c:	00007fa8 	cmpgeui	zero,zero,510
    7720:	00007fa8 	cmpgeui	zero,zero,510
    7724:	00007fa8 	cmpgeui	zero,zero,510
    7728:	00007818 	cmpnei	zero,zero,480
    772c:	00007fa8 	cmpgeui	zero,zero,510
    7730:	00007fa8 	cmpgeui	zero,zero,510
    7734:	00007fa8 	cmpgeui	zero,zero,510
    7738:	00007fa8 	cmpgeui	zero,zero,510
    773c:	00007fa8 	cmpgeui	zero,zero,510
    7740:	000077e4 	muli	zero,zero,479
    7744:	00007fa8 	cmpgeui	zero,zero,510
    7748:	00007fa8 	cmpgeui	zero,zero,510
    774c:	00007e2c 	andhi	zero,zero,504
    7750:	00007fa8 	cmpgeui	zero,zero,510
    7754:	00007fa8 	cmpgeui	zero,zero,510
    7758:	00007fa8 	cmpgeui	zero,zero,510
    775c:	00007fa8 	cmpgeui	zero,zero,510
    7760:	00007fa8 	cmpgeui	zero,zero,510
    7764:	00007fa8 	cmpgeui	zero,zero,510
    7768:	00007fa8 	cmpgeui	zero,zero,510
    776c:	00007fa8 	cmpgeui	zero,zero,510
    7770:	00007fa8 	cmpgeui	zero,zero,510
    7774:	00007fa8 	cmpgeui	zero,zero,510
    7778:	00007dcc 	andi	zero,zero,503
    777c:	00007df8 	rdprs	zero,zero,503
    7780:	00007fa8 	cmpgeui	zero,zero,510
    7784:	00007fa8 	cmpgeui	zero,zero,510
    7788:	00007fa8 	cmpgeui	zero,zero,510
    778c:	00007ed4 	movui	zero,507
    7790:	00007df8 	rdprs	zero,zero,503
    7794:	00007fa8 	cmpgeui	zero,zero,510
    7798:	00007fa8 	cmpgeui	zero,zero,510
    779c:	00007ee4 	muli	zero,zero,507
    77a0:	00007fa8 	cmpgeui	zero,zero,510
    77a4:	00007d10 	cmplti	zero,zero,500
    77a8:	0000781c 	xori	zero,zero,480
    77ac:	00007ef8 	rdprs	zero,zero,507
    77b0:	00007f38 	rdprs	zero,zero,508
    77b4:	00007fa8 	cmpgeui	zero,zero,510
    77b8:	00007e80 	call	7e8 <selecteerMenu+0xa8>
    77bc:	00007fa8 	cmpgeui	zero,zero,510
    77c0:	000077e8 	cmpgeui	zero,zero,479
    77c4:	00007fa8 	cmpgeui	zero,zero,510
    77c8:	00007fa8 	cmpgeui	zero,zero,510
    77cc:	00007f48 	cmpgei	zero,zero,509
    77d0:	42000204 	addi	r8,r8,8
    77d4:	d8802317 	ldw	r2,140(sp)
    77d8:	1485883a 	add	r2,r2,r18
    77dc:	d8802315 	stw	r2,140(sp)
    77e0:	003f8c06 	br	7614 <__alt_mem_Flash_flash_data+0xf4007614>
    77e4:	ad400414 	ori	r21,r21,16
    77e8:	a880080c 	andi	r2,r21,32
    77ec:	1001e61e 	bne	r2,zero,7f88 <___vfiprintf_internal_r+0xab8>
    77f0:	a880040c 	andi	r2,r21,16
    77f4:	10034726 	beq	r2,zero,8514 <___vfiprintf_internal_r+0x1044>
    77f8:	d8802217 	ldw	r2,136(sp)
    77fc:	001b883a 	mov	r13,zero
    7800:	15800017 	ldw	r22,0(r2)
    7804:	10800104 	addi	r2,r2,4
    7808:	d8802215 	stw	r2,136(sp)
    780c:	b009883a 	mov	r4,r22
    7810:	00800044 	movi	r2,1
    7814:	00000c06 	br	7848 <___vfiprintf_internal_r+0x378>
    7818:	ad400414 	ori	r21,r21,16
    781c:	a880080c 	andi	r2,r21,32
    7820:	1001491e 	bne	r2,zero,7d48 <___vfiprintf_internal_r+0x878>
    7824:	a880040c 	andi	r2,r21,16
    7828:	10032d26 	beq	r2,zero,84e0 <___vfiprintf_internal_r+0x1010>
    782c:	d9002217 	ldw	r4,136(sp)
    7830:	001b883a 	mov	r13,zero
    7834:	0005883a 	mov	r2,zero
    7838:	25800017 	ldw	r22,0(r4)
    783c:	21000104 	addi	r4,r4,4
    7840:	d9002215 	stw	r4,136(sp)
    7844:	b009883a 	mov	r4,r22
    7848:	d8001d85 	stb	zero,118(sp)
    784c:	4827883a 	mov	r19,r9
    7850:	001d883a 	mov	r14,zero
    7854:	48000216 	blt	r9,zero,7860 <___vfiprintf_internal_r+0x390>
    7858:	00ffdfc4 	movi	r3,-129
    785c:	a8ea703a 	and	r21,r21,r3
    7860:	2002071e 	bne	r4,zero,8080 <___vfiprintf_internal_r+0xbb0>
    7864:	4802ad26 	beq	r9,zero,831c <___vfiprintf_internal_r+0xe4c>
    7868:	10803fcc 	andi	r2,r2,255
    786c:	00c00044 	movi	r3,1
    7870:	10c22b26 	beq	r2,r3,8120 <___vfiprintf_internal_r+0xc50>
    7874:	00c00084 	movi	r3,2
    7878:	dd001a04 	addi	r20,sp,104
    787c:	10c0dd1e 	bne	r2,r3,7bf4 <___vfiprintf_internal_r+0x724>
    7880:	d9002617 	ldw	r4,152(sp)
    7884:	b08003cc 	andi	r2,r22,15
    7888:	6806973a 	slli	r3,r13,28
    788c:	2085883a 	add	r2,r4,r2
    7890:	b02cd13a 	srli	r22,r22,4
    7894:	10800003 	ldbu	r2,0(r2)
    7898:	681ad13a 	srli	r13,r13,4
    789c:	a53fffc4 	addi	r20,r20,-1
    78a0:	1dacb03a 	or	r22,r3,r22
    78a4:	a0800005 	stb	r2,0(r20)
    78a8:	b344b03a 	or	r2,r22,r13
    78ac:	103ff51e 	bne	r2,zero,7884 <__alt_mem_Flash_flash_data+0xf4007884>
    78b0:	d9001e17 	ldw	r4,120(sp)
    78b4:	2527c83a 	sub	r19,r4,r20
    78b8:	9823883a 	mov	r17,r19
    78bc:	9a40010e 	bge	r19,r9,78c4 <___vfiprintf_internal_r+0x3f4>
    78c0:	4823883a 	mov	r17,r9
    78c4:	73803fcc 	andi	r14,r14,255
    78c8:	7380201c 	xori	r14,r14,128
    78cc:	73bfe004 	addi	r14,r14,-128
    78d0:	70000126 	beq	r14,zero,78d8 <___vfiprintf_internal_r+0x408>
    78d4:	8c400044 	addi	r17,r17,1
    78d8:	ab40008c 	andi	r13,r21,2
    78dc:	68000126 	beq	r13,zero,78e4 <___vfiprintf_internal_r+0x414>
    78e0:	8c400084 	addi	r17,r17,2
    78e4:	ad80210c 	andi	r22,r21,132
    78e8:	b001c51e 	bne	r22,zero,8000 <___vfiprintf_internal_r+0xb30>
    78ec:	9447c83a 	sub	r3,r18,r17
    78f0:	00c1c30e 	bge	zero,r3,8000 <___vfiprintf_internal_r+0xb30>
    78f4:	01c00404 	movi	r7,16
    78f8:	d8801c17 	ldw	r2,112(sp)
    78fc:	38c37b0e 	bge	r7,r3,86ec <___vfiprintf_internal_r+0x121c>
    7900:	010000b4 	movhi	r4,2
    7904:	2125fd04 	addi	r4,r4,-26636
    7908:	dc002915 	stw	r16,164(sp)
    790c:	d9801b17 	ldw	r6,108(sp)
    7910:	d9002415 	stw	r4,144(sp)
    7914:	03c001c4 	movi	r15,7
    7918:	da402515 	stw	r9,148(sp)
    791c:	db402815 	stw	r13,160(sp)
    7920:	1821883a 	mov	r16,r3
    7924:	00000506 	br	793c <___vfiprintf_internal_r+0x46c>
    7928:	31400084 	addi	r5,r6,2
    792c:	42000204 	addi	r8,r8,8
    7930:	200d883a 	mov	r6,r4
    7934:	843ffc04 	addi	r16,r16,-16
    7938:	3c000d0e 	bge	r7,r16,7970 <___vfiprintf_internal_r+0x4a0>
    793c:	10800404 	addi	r2,r2,16
    7940:	31000044 	addi	r4,r6,1
    7944:	47000015 	stw	fp,0(r8)
    7948:	41c00115 	stw	r7,4(r8)
    794c:	d8801c15 	stw	r2,112(sp)
    7950:	d9001b15 	stw	r4,108(sp)
    7954:	793ff40e 	bge	r15,r4,7928 <__alt_mem_Flash_flash_data+0xf4007928>
    7958:	10019b1e 	bne	r2,zero,7fc8 <___vfiprintf_internal_r+0xaf8>
    795c:	843ffc04 	addi	r16,r16,-16
    7960:	000d883a 	mov	r6,zero
    7964:	01400044 	movi	r5,1
    7968:	d811883a 	mov	r8,sp
    796c:	3c3ff316 	blt	r7,r16,793c <__alt_mem_Flash_flash_data+0xf400793c>
    7970:	8007883a 	mov	r3,r16
    7974:	da402517 	ldw	r9,148(sp)
    7978:	db402817 	ldw	r13,160(sp)
    797c:	dc002917 	ldw	r16,164(sp)
    7980:	d9002417 	ldw	r4,144(sp)
    7984:	1885883a 	add	r2,r3,r2
    7988:	40c00115 	stw	r3,4(r8)
    798c:	41000015 	stw	r4,0(r8)
    7990:	d8801c15 	stw	r2,112(sp)
    7994:	d9401b15 	stw	r5,108(sp)
    7998:	00c001c4 	movi	r3,7
    799c:	19426a16 	blt	r3,r5,8348 <___vfiprintf_internal_r+0xe78>
    79a0:	d8c01d87 	ldb	r3,118(sp)
    79a4:	42000204 	addi	r8,r8,8
    79a8:	29000044 	addi	r4,r5,1
    79ac:	1801991e 	bne	r3,zero,8014 <___vfiprintf_internal_r+0xb44>
    79b0:	68000c26 	beq	r13,zero,79e4 <___vfiprintf_internal_r+0x514>
    79b4:	d8c01d04 	addi	r3,sp,116
    79b8:	10800084 	addi	r2,r2,2
    79bc:	40c00015 	stw	r3,0(r8)
    79c0:	00c00084 	movi	r3,2
    79c4:	40c00115 	stw	r3,4(r8)
    79c8:	d8801c15 	stw	r2,112(sp)
    79cc:	d9001b15 	stw	r4,108(sp)
    79d0:	00c001c4 	movi	r3,7
    79d4:	19024c16 	blt	r3,r4,8308 <___vfiprintf_internal_r+0xe38>
    79d8:	200b883a 	mov	r5,r4
    79dc:	42000204 	addi	r8,r8,8
    79e0:	21000044 	addi	r4,r4,1
    79e4:	00c02004 	movi	r3,128
    79e8:	b0c20126 	beq	r22,r3,81f0 <___vfiprintf_internal_r+0xd20>
    79ec:	4cedc83a 	sub	r22,r9,r19
    79f0:	0580230e 	bge	zero,r22,7a80 <___vfiprintf_internal_r+0x5b0>
    79f4:	01c00404 	movi	r7,16
    79f8:	3d83140e 	bge	r7,r22,864c <___vfiprintf_internal_r+0x117c>
    79fc:	010000b4 	movhi	r4,2
    7a00:	2125f904 	addi	r4,r4,-26652
    7a04:	d9002415 	stw	r4,144(sp)
    7a08:	034001c4 	movi	r13,7
    7a0c:	00000506 	br	7a24 <___vfiprintf_internal_r+0x554>
    7a10:	29000084 	addi	r4,r5,2
    7a14:	42000204 	addi	r8,r8,8
    7a18:	180b883a 	mov	r5,r3
    7a1c:	b5bffc04 	addi	r22,r22,-16
    7a20:	3d800d0e 	bge	r7,r22,7a58 <___vfiprintf_internal_r+0x588>
    7a24:	10800404 	addi	r2,r2,16
    7a28:	28c00044 	addi	r3,r5,1
    7a2c:	45c00015 	stw	r23,0(r8)
    7a30:	41c00115 	stw	r7,4(r8)
    7a34:	d8801c15 	stw	r2,112(sp)
    7a38:	d8c01b15 	stw	r3,108(sp)
    7a3c:	68fff40e 	bge	r13,r3,7a10 <__alt_mem_Flash_flash_data+0xf4007a10>
    7a40:	1001811e 	bne	r2,zero,8048 <___vfiprintf_internal_r+0xb78>
    7a44:	b5bffc04 	addi	r22,r22,-16
    7a48:	01000044 	movi	r4,1
    7a4c:	000b883a 	mov	r5,zero
    7a50:	d811883a 	mov	r8,sp
    7a54:	3dbff316 	blt	r7,r22,7a24 <__alt_mem_Flash_flash_data+0xf4007a24>
    7a58:	d8c02417 	ldw	r3,144(sp)
    7a5c:	1585883a 	add	r2,r2,r22
    7a60:	45800115 	stw	r22,4(r8)
    7a64:	40c00015 	stw	r3,0(r8)
    7a68:	d8801c15 	stw	r2,112(sp)
    7a6c:	d9001b15 	stw	r4,108(sp)
    7a70:	00c001c4 	movi	r3,7
    7a74:	1901d016 	blt	r3,r4,81b8 <___vfiprintf_internal_r+0xce8>
    7a78:	42000204 	addi	r8,r8,8
    7a7c:	21000044 	addi	r4,r4,1
    7a80:	14c5883a 	add	r2,r2,r19
    7a84:	45000015 	stw	r20,0(r8)
    7a88:	44c00115 	stw	r19,4(r8)
    7a8c:	d8801c15 	stw	r2,112(sp)
    7a90:	d9001b15 	stw	r4,108(sp)
    7a94:	00c001c4 	movi	r3,7
    7a98:	1901cf0e 	bge	r3,r4,81d8 <___vfiprintf_internal_r+0xd08>
    7a9c:	1002361e 	bne	r2,zero,8378 <___vfiprintf_internal_r+0xea8>
    7aa0:	d8001b15 	stw	zero,108(sp)
    7aa4:	aac0010c 	andi	r11,r21,4
    7aa8:	58002826 	beq	r11,zero,7b4c <___vfiprintf_internal_r+0x67c>
    7aac:	9467c83a 	sub	r19,r18,r17
    7ab0:	d811883a 	mov	r8,sp
    7ab4:	04c3340e 	bge	zero,r19,8788 <___vfiprintf_internal_r+0x12b8>
    7ab8:	01c00404 	movi	r7,16
    7abc:	3cc31b0e 	bge	r7,r19,872c <___vfiprintf_internal_r+0x125c>
    7ac0:	00c000b4 	movhi	r3,2
    7ac4:	18e5fd04 	addi	r3,r3,-26636
    7ac8:	d9001b17 	ldw	r4,108(sp)
    7acc:	d8c02415 	stw	r3,144(sp)
    7ad0:	382b883a 	mov	r21,r7
    7ad4:	050001c4 	movi	r20,7
    7ad8:	dd802017 	ldw	r22,128(sp)
    7adc:	00000506 	br	7af4 <___vfiprintf_internal_r+0x624>
    7ae0:	21400084 	addi	r5,r4,2
    7ae4:	42000204 	addi	r8,r8,8
    7ae8:	1809883a 	mov	r4,r3
    7aec:	9cfffc04 	addi	r19,r19,-16
    7af0:	acc00d0e 	bge	r21,r19,7b28 <___vfiprintf_internal_r+0x658>
    7af4:	10800404 	addi	r2,r2,16
    7af8:	20c00044 	addi	r3,r4,1
    7afc:	47000015 	stw	fp,0(r8)
    7b00:	45400115 	stw	r21,4(r8)
    7b04:	d8801c15 	stw	r2,112(sp)
    7b08:	d8c01b15 	stw	r3,108(sp)
    7b0c:	a0fff40e 	bge	r20,r3,7ae0 <__alt_mem_Flash_flash_data+0xf4007ae0>
    7b10:	10019f1e 	bne	r2,zero,8190 <___vfiprintf_internal_r+0xcc0>
    7b14:	9cfffc04 	addi	r19,r19,-16
    7b18:	01400044 	movi	r5,1
    7b1c:	0009883a 	mov	r4,zero
    7b20:	d811883a 	mov	r8,sp
    7b24:	acfff316 	blt	r21,r19,7af4 <__alt_mem_Flash_flash_data+0xf4007af4>
    7b28:	d8c02417 	ldw	r3,144(sp)
    7b2c:	14c5883a 	add	r2,r2,r19
    7b30:	44c00115 	stw	r19,4(r8)
    7b34:	40c00015 	stw	r3,0(r8)
    7b38:	d8801c15 	stw	r2,112(sp)
    7b3c:	d9401b15 	stw	r5,108(sp)
    7b40:	00c001c4 	movi	r3,7
    7b44:	1941810e 	bge	r3,r5,814c <___vfiprintf_internal_r+0xc7c>
    7b48:	10017a1e 	bne	r2,zero,8134 <___vfiprintf_internal_r+0xc64>
    7b4c:	8c82a416 	blt	r17,r18,85e0 <___vfiprintf_internal_r+0x1110>
    7b50:	d9002317 	ldw	r4,140(sp)
    7b54:	2449883a 	add	r4,r4,r17
    7b58:	d9002315 	stw	r4,140(sp)
    7b5c:	d8001b15 	stw	zero,108(sp)
    7b60:	d811883a 	mov	r8,sp
    7b64:	003e8e06 	br	75a0 <__alt_mem_Flash_flash_data+0xf40075a0>
    7b68:	d9002017 	ldw	r4,128(sp)
    7b6c:	a80b883a 	mov	r5,r21
    7b70:	0002d0c0 	call	2d0c <__swsetup_r>
    7b74:	10000c1e 	bne	r2,zero,7ba8 <___vfiprintf_internal_r+0x6d8>
    7b78:	a880030b 	ldhu	r2,12(r21)
    7b7c:	00c00284 	movi	r3,10
    7b80:	1080068c 	andi	r2,r2,26
    7b84:	10fe741e 	bne	r2,r3,7558 <__alt_mem_Flash_flash_data+0xf4007558>
    7b88:	a880038f 	ldh	r2,14(r21)
    7b8c:	103e7216 	blt	r2,zero,7558 <__alt_mem_Flash_flash_data+0xf4007558>
    7b90:	d9002017 	ldw	r4,128(sp)
    7b94:	d9c02217 	ldw	r7,136(sp)
    7b98:	a80b883a 	mov	r5,r21
    7b9c:	b00d883a 	mov	r6,r22
    7ba0:	00087c40 	call	87c4 <__sbprintf>
    7ba4:	00000106 	br	7bac <___vfiprintf_internal_r+0x6dc>
    7ba8:	00bfffc4 	movi	r2,-1
    7bac:	dfc03517 	ldw	ra,212(sp)
    7bb0:	df003417 	ldw	fp,208(sp)
    7bb4:	ddc03317 	ldw	r23,204(sp)
    7bb8:	dd803217 	ldw	r22,200(sp)
    7bbc:	dd403117 	ldw	r21,196(sp)
    7bc0:	dd003017 	ldw	r20,192(sp)
    7bc4:	dcc02f17 	ldw	r19,188(sp)
    7bc8:	dc802e17 	ldw	r18,184(sp)
    7bcc:	dc402d17 	ldw	r17,180(sp)
    7bd0:	dc002c17 	ldw	r16,176(sp)
    7bd4:	dec03604 	addi	sp,sp,216
    7bd8:	f800283a 	ret
    7bdc:	0004d6c0 	call	4d6c <__sinit>
    7be0:	003e4d06 	br	7518 <__alt_mem_Flash_flash_data+0xf4007518>
    7be4:	8005883a 	mov	r2,r16
    7be8:	ad400114 	ori	r21,r21,4
    7bec:	80c00007 	ldb	r3,0(r16)
    7bf0:	003e9506 	br	7648 <__alt_mem_Flash_flash_data+0xf4007648>
    7bf4:	b006d0fa 	srli	r3,r22,3
    7bf8:	6808977a 	slli	r4,r13,29
    7bfc:	681ad0fa 	srli	r13,r13,3
    7c00:	b58001cc 	andi	r22,r22,7
    7c04:	b0800c04 	addi	r2,r22,48
    7c08:	a53fffc4 	addi	r20,r20,-1
    7c0c:	20ecb03a 	or	r22,r4,r3
    7c10:	a0800005 	stb	r2,0(r20)
    7c14:	b346b03a 	or	r3,r22,r13
    7c18:	183ff61e 	bne	r3,zero,7bf4 <__alt_mem_Flash_flash_data+0xf4007bf4>
    7c1c:	a8c0004c 	andi	r3,r21,1
    7c20:	a009883a 	mov	r4,r20
    7c24:	18013b26 	beq	r3,zero,8114 <___vfiprintf_internal_r+0xc44>
    7c28:	10803fcc 	andi	r2,r2,255
    7c2c:	1080201c 	xori	r2,r2,128
    7c30:	10bfe004 	addi	r2,r2,-128
    7c34:	00c00c04 	movi	r3,48
    7c38:	10ff1d26 	beq	r2,r3,78b0 <__alt_mem_Flash_flash_data+0xf40078b0>
    7c3c:	d8801e17 	ldw	r2,120(sp)
    7c40:	a53fffc4 	addi	r20,r20,-1
    7c44:	20ffffc5 	stb	r3,-1(r4)
    7c48:	1527c83a 	sub	r19,r2,r20
    7c4c:	003f1a06 	br	78b8 <__alt_mem_Flash_flash_data+0xf40078b8>
    7c50:	ad402014 	ori	r21,r21,128
    7c54:	8005883a 	mov	r2,r16
    7c58:	80c00007 	ldb	r3,0(r16)
    7c5c:	003e7a06 	br	7648 <__alt_mem_Flash_flash_data+0xf4007648>
    7c60:	8005883a 	mov	r2,r16
    7c64:	0025883a 	mov	r18,zero
    7c68:	193ff404 	addi	r4,r3,-48
    7c6c:	10c00007 	ldb	r3,0(r2)
    7c70:	948002a4 	muli	r18,r18,10
    7c74:	84000044 	addi	r16,r16,1
    7c78:	8005883a 	mov	r2,r16
    7c7c:	9125883a 	add	r18,r18,r4
    7c80:	193ff404 	addi	r4,r3,-48
    7c84:	313ff92e 	bgeu	r6,r4,7c6c <__alt_mem_Flash_flash_data+0xf4007c6c>
    7c88:	003e7006 	br	764c <__alt_mem_Flash_flash_data+0xf400764c>
    7c8c:	ad400414 	ori	r21,r21,16
    7c90:	d9c01d85 	stb	r7,118(sp)
    7c94:	a880080c 	andi	r2,r21,32
    7c98:	d8c02217 	ldw	r3,136(sp)
    7c9c:	10005a26 	beq	r2,zero,7e08 <___vfiprintf_internal_r+0x938>
    7ca0:	d9002217 	ldw	r4,136(sp)
    7ca4:	18800117 	ldw	r2,4(r3)
    7ca8:	1d800017 	ldw	r22,0(r3)
    7cac:	21000204 	addi	r4,r4,8
    7cb0:	d9002215 	stw	r4,136(sp)
    7cb4:	101b883a 	mov	r13,r2
    7cb8:	1001f416 	blt	r2,zero,848c <___vfiprintf_internal_r+0xfbc>
    7cbc:	db801d83 	ldbu	r14,118(sp)
    7cc0:	4827883a 	mov	r19,r9
    7cc4:	00800044 	movi	r2,1
    7cc8:	b348b03a 	or	r4,r22,r13
    7ccc:	003ee106 	br	7854 <__alt_mem_Flash_flash_data+0xf4007854>
    7cd0:	80c00007 	ldb	r3,0(r16)
    7cd4:	80800044 	addi	r2,r16,1
    7cd8:	1b42a326 	beq	r3,r13,8768 <___vfiprintf_internal_r+0x1298>
    7cdc:	193ff404 	addi	r4,r3,-48
    7ce0:	1021883a 	mov	r16,r2
    7ce4:	0013883a 	mov	r9,zero
    7ce8:	313e5836 	bltu	r6,r4,764c <__alt_mem_Flash_flash_data+0xf400764c>
    7cec:	80c00007 	ldb	r3,0(r16)
    7cf0:	4a4002a4 	muli	r9,r9,10
    7cf4:	84000044 	addi	r16,r16,1
    7cf8:	2253883a 	add	r9,r4,r9
    7cfc:	193ff404 	addi	r4,r3,-48
    7d00:	313ffa2e 	bgeu	r6,r4,7cec <__alt_mem_Flash_flash_data+0xf4007cec>
    7d04:	483e510e 	bge	r9,zero,764c <__alt_mem_Flash_flash_data+0xf400764c>
    7d08:	027fffc4 	movi	r9,-1
    7d0c:	003e4f06 	br	764c <__alt_mem_Flash_flash_data+0xf400764c>
    7d10:	d9c01d85 	stb	r7,118(sp)
    7d14:	a880080c 	andi	r2,r21,32
    7d18:	10020826 	beq	r2,zero,853c <___vfiprintf_internal_r+0x106c>
    7d1c:	d8c02217 	ldw	r3,136(sp)
    7d20:	d9002317 	ldw	r4,140(sp)
    7d24:	18800017 	ldw	r2,0(r3)
    7d28:	2007d7fa 	srai	r3,r4,31
    7d2c:	d9002217 	ldw	r4,136(sp)
    7d30:	10c00115 	stw	r3,4(r2)
    7d34:	21000104 	addi	r4,r4,4
    7d38:	d9002215 	stw	r4,136(sp)
    7d3c:	d9002317 	ldw	r4,140(sp)
    7d40:	11000015 	stw	r4,0(r2)
    7d44:	003e1606 	br	75a0 <__alt_mem_Flash_flash_data+0xf40075a0>
    7d48:	d8802217 	ldw	r2,136(sp)
    7d4c:	d8c02217 	ldw	r3,136(sp)
    7d50:	15800017 	ldw	r22,0(r2)
    7d54:	13400117 	ldw	r13,4(r2)
    7d58:	18c00204 	addi	r3,r3,8
    7d5c:	0005883a 	mov	r2,zero
    7d60:	d8c02215 	stw	r3,136(sp)
    7d64:	b348b03a 	or	r4,r22,r13
    7d68:	003eb706 	br	7848 <__alt_mem_Flash_flash_data+0xf4007848>
    7d6c:	38803fcc 	andi	r2,r7,255
    7d70:	1080201c 	xori	r2,r2,128
    7d74:	10bfe004 	addi	r2,r2,-128
    7d78:	1001e31e 	bne	r2,zero,8508 <___vfiprintf_internal_r+0x1038>
    7d7c:	8005883a 	mov	r2,r16
    7d80:	01c00804 	movi	r7,32
    7d84:	80c00007 	ldb	r3,0(r16)
    7d88:	003e2f06 	br	7648 <__alt_mem_Flash_flash_data+0xf4007648>
    7d8c:	ad400054 	ori	r21,r21,1
    7d90:	8005883a 	mov	r2,r16
    7d94:	80c00007 	ldb	r3,0(r16)
    7d98:	003e2b06 	br	7648 <__alt_mem_Flash_flash_data+0xf4007648>
    7d9c:	d8c02217 	ldw	r3,136(sp)
    7da0:	1c800017 	ldw	r18,0(r3)
    7da4:	18c00104 	addi	r3,r3,4
    7da8:	90023816 	blt	r18,zero,868c <___vfiprintf_internal_r+0x11bc>
    7dac:	d8c02215 	stw	r3,136(sp)
    7db0:	8005883a 	mov	r2,r16
    7db4:	80c00007 	ldb	r3,0(r16)
    7db8:	003e2306 	br	7648 <__alt_mem_Flash_flash_data+0xf4007648>
    7dbc:	8005883a 	mov	r2,r16
    7dc0:	01c00ac4 	movi	r7,43
    7dc4:	80c00007 	ldb	r3,0(r16)
    7dc8:	003e1f06 	br	7648 <__alt_mem_Flash_flash_data+0xf4007648>
    7dcc:	d8c02217 	ldw	r3,136(sp)
    7dd0:	04400044 	movi	r17,1
    7dd4:	d8001d85 	stb	zero,118(sp)
    7dd8:	18800017 	ldw	r2,0(r3)
    7ddc:	18c00104 	addi	r3,r3,4
    7de0:	d8c02215 	stw	r3,136(sp)
    7de4:	d8801005 	stb	r2,64(sp)
    7de8:	8827883a 	mov	r19,r17
    7dec:	dd001004 	addi	r20,sp,64
    7df0:	0013883a 	mov	r9,zero
    7df4:	003eb806 	br	78d8 <__alt_mem_Flash_flash_data+0xf40078d8>
    7df8:	d9c01d85 	stb	r7,118(sp)
    7dfc:	a880080c 	andi	r2,r21,32
    7e00:	d8c02217 	ldw	r3,136(sp)
    7e04:	103fa61e 	bne	r2,zero,7ca0 <__alt_mem_Flash_flash_data+0xf4007ca0>
    7e08:	a880040c 	andi	r2,r21,16
    7e0c:	1001dd26 	beq	r2,zero,8584 <___vfiprintf_internal_r+0x10b4>
    7e10:	1d800017 	ldw	r22,0(r3)
    7e14:	d8802217 	ldw	r2,136(sp)
    7e18:	b01bd7fa 	srai	r13,r22,31
    7e1c:	10800104 	addi	r2,r2,4
    7e20:	d8802215 	stw	r2,136(sp)
    7e24:	6805883a 	mov	r2,r13
    7e28:	003fa306 	br	7cb8 <__alt_mem_Flash_flash_data+0xf4007cb8>
    7e2c:	008000b4 	movhi	r2,2
    7e30:	10a59304 	addi	r2,r2,-27060
    7e34:	d8802615 	stw	r2,152(sp)
    7e38:	d9c01d85 	stb	r7,118(sp)
    7e3c:	a880080c 	andi	r2,r21,32
    7e40:	10004726 	beq	r2,zero,7f60 <___vfiprintf_internal_r+0xa90>
    7e44:	d9002217 	ldw	r4,136(sp)
    7e48:	25800017 	ldw	r22,0(r4)
    7e4c:	23400117 	ldw	r13,4(r4)
    7e50:	21000204 	addi	r4,r4,8
    7e54:	d9002215 	stw	r4,136(sp)
    7e58:	a880004c 	andi	r2,r21,1
    7e5c:	10014e26 	beq	r2,zero,8398 <___vfiprintf_internal_r+0xec8>
    7e60:	b348b03a 	or	r4,r22,r13
    7e64:	20019c26 	beq	r4,zero,84d8 <___vfiprintf_internal_r+0x1008>
    7e68:	00800c04 	movi	r2,48
    7e6c:	d8801d05 	stb	r2,116(sp)
    7e70:	d8c01d45 	stb	r3,117(sp)
    7e74:	ad400094 	ori	r21,r21,2
    7e78:	00800084 	movi	r2,2
    7e7c:	003e7206 	br	7848 <__alt_mem_Flash_flash_data+0xf4007848>
    7e80:	d8c02217 	ldw	r3,136(sp)
    7e84:	d8001d85 	stb	zero,118(sp)
    7e88:	1d000017 	ldw	r20,0(r3)
    7e8c:	1d800104 	addi	r22,r3,4
    7e90:	a0021c26 	beq	r20,zero,8704 <___vfiprintf_internal_r+0x1234>
    7e94:	a009883a 	mov	r4,r20
    7e98:	48020016 	blt	r9,zero,869c <___vfiprintf_internal_r+0x11cc>
    7e9c:	480d883a 	mov	r6,r9
    7ea0:	000b883a 	mov	r5,zero
    7ea4:	da002a15 	stw	r8,168(sp)
    7ea8:	da402b15 	stw	r9,172(sp)
    7eac:	0005d980 	call	5d98 <memchr>
    7eb0:	da002a17 	ldw	r8,168(sp)
    7eb4:	da402b17 	ldw	r9,172(sp)
    7eb8:	10022226 	beq	r2,zero,8744 <___vfiprintf_internal_r+0x1274>
    7ebc:	1527c83a 	sub	r19,r2,r20
    7ec0:	4cc1c916 	blt	r9,r19,85e8 <___vfiprintf_internal_r+0x1118>
    7ec4:	db801d83 	ldbu	r14,118(sp)
    7ec8:	dd802215 	stw	r22,136(sp)
    7ecc:	0013883a 	mov	r9,zero
    7ed0:	003e7906 	br	78b8 <__alt_mem_Flash_flash_data+0xf40078b8>
    7ed4:	ad401014 	ori	r21,r21,64
    7ed8:	8005883a 	mov	r2,r16
    7edc:	80c00007 	ldb	r3,0(r16)
    7ee0:	003dd906 	br	7648 <__alt_mem_Flash_flash_data+0xf4007648>
    7ee4:	80c00007 	ldb	r3,0(r16)
    7ee8:	8005883a 	mov	r2,r16
    7eec:	1b01e326 	beq	r3,r12,867c <___vfiprintf_internal_r+0x11ac>
    7ef0:	ad400414 	ori	r21,r21,16
    7ef4:	003dd406 	br	7648 <__alt_mem_Flash_flash_data+0xf4007648>
    7ef8:	d9002217 	ldw	r4,136(sp)
    7efc:	00800c04 	movi	r2,48
    7f00:	d8801d05 	stb	r2,116(sp)
    7f04:	25800017 	ldw	r22,0(r4)
    7f08:	00801e04 	movi	r2,120
    7f0c:	d8801d45 	stb	r2,117(sp)
    7f10:	008000b4 	movhi	r2,2
    7f14:	21000104 	addi	r4,r4,4
    7f18:	10a59804 	addi	r2,r2,-27040
    7f1c:	d9002215 	stw	r4,136(sp)
    7f20:	d8802615 	stw	r2,152(sp)
    7f24:	001b883a 	mov	r13,zero
    7f28:	ad400094 	ori	r21,r21,2
    7f2c:	00800084 	movi	r2,2
    7f30:	b009883a 	mov	r4,r22
    7f34:	003e4406 	br	7848 <__alt_mem_Flash_flash_data+0xf4007848>
    7f38:	ad400814 	ori	r21,r21,32
    7f3c:	8005883a 	mov	r2,r16
    7f40:	80c00007 	ldb	r3,0(r16)
    7f44:	003dc006 	br	7648 <__alt_mem_Flash_flash_data+0xf4007648>
    7f48:	008000b4 	movhi	r2,2
    7f4c:	10a59804 	addi	r2,r2,-27040
    7f50:	d8802615 	stw	r2,152(sp)
    7f54:	d9c01d85 	stb	r7,118(sp)
    7f58:	a880080c 	andi	r2,r21,32
    7f5c:	103fb91e 	bne	r2,zero,7e44 <__alt_mem_Flash_flash_data+0xf4007e44>
    7f60:	a880040c 	andi	r2,r21,16
    7f64:	10010f1e 	bne	r2,zero,83a4 <___vfiprintf_internal_r+0xed4>
    7f68:	a880100c 	andi	r2,r21,64
    7f6c:	10010d26 	beq	r2,zero,83a4 <___vfiprintf_internal_r+0xed4>
    7f70:	d9002217 	ldw	r4,136(sp)
    7f74:	001b883a 	mov	r13,zero
    7f78:	2580000b 	ldhu	r22,0(r4)
    7f7c:	21000104 	addi	r4,r4,4
    7f80:	d9002215 	stw	r4,136(sp)
    7f84:	003fb406 	br	7e58 <__alt_mem_Flash_flash_data+0xf4007e58>
    7f88:	d9002217 	ldw	r4,136(sp)
    7f8c:	00800044 	movi	r2,1
    7f90:	25800017 	ldw	r22,0(r4)
    7f94:	23400117 	ldw	r13,4(r4)
    7f98:	21000204 	addi	r4,r4,8
    7f9c:	d9002215 	stw	r4,136(sp)
    7fa0:	b348b03a 	or	r4,r22,r13
    7fa4:	003e2806 	br	7848 <__alt_mem_Flash_flash_data+0xf4007848>
    7fa8:	d9c01d85 	stb	r7,118(sp)
    7fac:	1801ab26 	beq	r3,zero,865c <___vfiprintf_internal_r+0x118c>
    7fb0:	04400044 	movi	r17,1
    7fb4:	d8c01005 	stb	r3,64(sp)
    7fb8:	d8001d85 	stb	zero,118(sp)
    7fbc:	8827883a 	mov	r19,r17
    7fc0:	dd001004 	addi	r20,sp,64
    7fc4:	003f8a06 	br	7df0 <__alt_mem_Flash_flash_data+0xf4007df0>
    7fc8:	d9002017 	ldw	r4,128(sp)
    7fcc:	d9402117 	ldw	r5,132(sp)
    7fd0:	d9801a04 	addi	r6,sp,104
    7fd4:	d9c02b15 	stw	r7,172(sp)
    7fd8:	dbc02a15 	stw	r15,168(sp)
    7fdc:	00073bc0 	call	73bc <__sprint_r.part.0>
    7fe0:	d9c02b17 	ldw	r7,172(sp)
    7fe4:	dbc02a17 	ldw	r15,168(sp)
    7fe8:	1000631e 	bne	r2,zero,8178 <___vfiprintf_internal_r+0xca8>
    7fec:	d9801b17 	ldw	r6,108(sp)
    7ff0:	d8801c17 	ldw	r2,112(sp)
    7ff4:	d811883a 	mov	r8,sp
    7ff8:	31400044 	addi	r5,r6,1
    7ffc:	003e4d06 	br	7934 <__alt_mem_Flash_flash_data+0xf4007934>
    8000:	d9401b17 	ldw	r5,108(sp)
    8004:	d8801c17 	ldw	r2,112(sp)
    8008:	29000044 	addi	r4,r5,1
    800c:	d8c01d87 	ldb	r3,118(sp)
    8010:	183e6726 	beq	r3,zero,79b0 <__alt_mem_Flash_flash_data+0xf40079b0>
    8014:	00c00044 	movi	r3,1
    8018:	d9401d84 	addi	r5,sp,118
    801c:	10c5883a 	add	r2,r2,r3
    8020:	41400015 	stw	r5,0(r8)
    8024:	40c00115 	stw	r3,4(r8)
    8028:	d8801c15 	stw	r2,112(sp)
    802c:	d9001b15 	stw	r4,108(sp)
    8030:	014001c4 	movi	r5,7
    8034:	2900ab16 	blt	r5,r4,82e4 <___vfiprintf_internal_r+0xe14>
    8038:	200b883a 	mov	r5,r4
    803c:	42000204 	addi	r8,r8,8
    8040:	21000044 	addi	r4,r4,1
    8044:	003e5a06 	br	79b0 <__alt_mem_Flash_flash_data+0xf40079b0>
    8048:	d9002017 	ldw	r4,128(sp)
    804c:	d9402117 	ldw	r5,132(sp)
    8050:	d9801a04 	addi	r6,sp,104
    8054:	d9c02b15 	stw	r7,172(sp)
    8058:	db402a15 	stw	r13,168(sp)
    805c:	00073bc0 	call	73bc <__sprint_r.part.0>
    8060:	d9c02b17 	ldw	r7,172(sp)
    8064:	db402a17 	ldw	r13,168(sp)
    8068:	1000431e 	bne	r2,zero,8178 <___vfiprintf_internal_r+0xca8>
    806c:	d9401b17 	ldw	r5,108(sp)
    8070:	d8801c17 	ldw	r2,112(sp)
    8074:	d811883a 	mov	r8,sp
    8078:	29000044 	addi	r4,r5,1
    807c:	003e6706 	br	7a1c <__alt_mem_Flash_flash_data+0xf4007a1c>
    8080:	10803fcc 	andi	r2,r2,255
    8084:	00c00044 	movi	r3,1
    8088:	10fdfa1e 	bne	r2,r3,7874 <__alt_mem_Flash_flash_data+0xf4007874>
    808c:	6800021e 	bne	r13,zero,8098 <___vfiprintf_internal_r+0xbc8>
    8090:	00800244 	movi	r2,9
    8094:	1580222e 	bgeu	r2,r22,8120 <___vfiprintf_internal_r+0xc50>
    8098:	dc802415 	stw	r18,144(sp)
    809c:	dc002515 	stw	r16,148(sp)
    80a0:	dc401a04 	addi	r17,sp,104
    80a4:	b021883a 	mov	r16,r22
    80a8:	4827883a 	mov	r19,r9
    80ac:	4029883a 	mov	r20,r8
    80b0:	702d883a 	mov	r22,r14
    80b4:	6825883a 	mov	r18,r13
    80b8:	8009883a 	mov	r4,r16
    80bc:	900b883a 	mov	r5,r18
    80c0:	01800284 	movi	r6,10
    80c4:	000f883a 	mov	r7,zero
    80c8:	000a2bc0 	call	a2bc <__umoddi3>
    80cc:	10800c04 	addi	r2,r2,48
    80d0:	8c7fffc4 	addi	r17,r17,-1
    80d4:	8009883a 	mov	r4,r16
    80d8:	900b883a 	mov	r5,r18
    80dc:	01800284 	movi	r6,10
    80e0:	000f883a 	mov	r7,zero
    80e4:	88800005 	stb	r2,0(r17)
    80e8:	0009cfc0 	call	9cfc <__udivdi3>
    80ec:	1021883a 	mov	r16,r2
    80f0:	10c4b03a 	or	r2,r2,r3
    80f4:	1825883a 	mov	r18,r3
    80f8:	103fef1e 	bne	r2,zero,80b8 <__alt_mem_Flash_flash_data+0xf40080b8>
    80fc:	dc802417 	ldw	r18,144(sp)
    8100:	dc002517 	ldw	r16,148(sp)
    8104:	a011883a 	mov	r8,r20
    8108:	9813883a 	mov	r9,r19
    810c:	b01d883a 	mov	r14,r22
    8110:	8829883a 	mov	r20,r17
    8114:	d8c01e17 	ldw	r3,120(sp)
    8118:	1d27c83a 	sub	r19,r3,r20
    811c:	003de606 	br	78b8 <__alt_mem_Flash_flash_data+0xf40078b8>
    8120:	b5800c04 	addi	r22,r22,48
    8124:	dd8019c5 	stb	r22,103(sp)
    8128:	dcc02717 	ldw	r19,156(sp)
    812c:	dd0019c4 	addi	r20,sp,103
    8130:	003de106 	br	78b8 <__alt_mem_Flash_flash_data+0xf40078b8>
    8134:	d9002017 	ldw	r4,128(sp)
    8138:	d9402117 	ldw	r5,132(sp)
    813c:	d9801a04 	addi	r6,sp,104
    8140:	00073bc0 	call	73bc <__sprint_r.part.0>
    8144:	10000c1e 	bne	r2,zero,8178 <___vfiprintf_internal_r+0xca8>
    8148:	d8801c17 	ldw	r2,112(sp)
    814c:	8c80010e 	bge	r17,r18,8154 <___vfiprintf_internal_r+0xc84>
    8150:	9023883a 	mov	r17,r18
    8154:	d8c02317 	ldw	r3,140(sp)
    8158:	1c47883a 	add	r3,r3,r17
    815c:	d8c02315 	stw	r3,140(sp)
    8160:	103e7e26 	beq	r2,zero,7b5c <__alt_mem_Flash_flash_data+0xf4007b5c>
    8164:	d9002017 	ldw	r4,128(sp)
    8168:	d9402117 	ldw	r5,132(sp)
    816c:	d9801a04 	addi	r6,sp,104
    8170:	00073bc0 	call	73bc <__sprint_r.part.0>
    8174:	103e7926 	beq	r2,zero,7b5c <__alt_mem_Flash_flash_data+0xf4007b5c>
    8178:	dd402117 	ldw	r21,132(sp)
    817c:	a880030b 	ldhu	r2,12(r21)
    8180:	1080100c 	andi	r2,r2,64
    8184:	103e881e 	bne	r2,zero,7ba8 <__alt_mem_Flash_flash_data+0xf4007ba8>
    8188:	d8802317 	ldw	r2,140(sp)
    818c:	003e8706 	br	7bac <__alt_mem_Flash_flash_data+0xf4007bac>
    8190:	d9402117 	ldw	r5,132(sp)
    8194:	b009883a 	mov	r4,r22
    8198:	d9801a04 	addi	r6,sp,104
    819c:	00073bc0 	call	73bc <__sprint_r.part.0>
    81a0:	103ff51e 	bne	r2,zero,8178 <__alt_mem_Flash_flash_data+0xf4008178>
    81a4:	d9001b17 	ldw	r4,108(sp)
    81a8:	d8801c17 	ldw	r2,112(sp)
    81ac:	d811883a 	mov	r8,sp
    81b0:	21400044 	addi	r5,r4,1
    81b4:	003e4d06 	br	7aec <__alt_mem_Flash_flash_data+0xf4007aec>
    81b8:	1000aa1e 	bne	r2,zero,8464 <___vfiprintf_internal_r+0xf94>
    81bc:	00c00044 	movi	r3,1
    81c0:	9805883a 	mov	r2,r19
    81c4:	dd000015 	stw	r20,0(sp)
    81c8:	dcc00115 	stw	r19,4(sp)
    81cc:	dcc01c15 	stw	r19,112(sp)
    81d0:	d8c01b15 	stw	r3,108(sp)
    81d4:	d811883a 	mov	r8,sp
    81d8:	42000204 	addi	r8,r8,8
    81dc:	aac0010c 	andi	r11,r21,4
    81e0:	583fda26 	beq	r11,zero,814c <__alt_mem_Flash_flash_data+0xf400814c>
    81e4:	9467c83a 	sub	r19,r18,r17
    81e8:	04fe3316 	blt	zero,r19,7ab8 <__alt_mem_Flash_flash_data+0xf4007ab8>
    81ec:	003fd706 	br	814c <__alt_mem_Flash_flash_data+0xf400814c>
    81f0:	946dc83a 	sub	r22,r18,r17
    81f4:	05bdfd0e 	bge	zero,r22,79ec <__alt_mem_Flash_flash_data+0xf40079ec>
    81f8:	00c000b4 	movhi	r3,2
    81fc:	18e5f904 	addi	r3,r3,-26652
    8200:	01c00404 	movi	r7,16
    8204:	d8c02415 	stw	r3,144(sp)
    8208:	3d81530e 	bge	r7,r22,8758 <___vfiprintf_internal_r+0x1288>
    820c:	8007883a 	mov	r3,r16
    8210:	034001c4 	movi	r13,7
    8214:	b021883a 	mov	r16,r22
    8218:	da402515 	stw	r9,148(sp)
    821c:	182d883a 	mov	r22,r3
    8220:	00000506 	br	8238 <___vfiprintf_internal_r+0xd68>
    8224:	29800084 	addi	r6,r5,2
    8228:	42000204 	addi	r8,r8,8
    822c:	180b883a 	mov	r5,r3
    8230:	843ffc04 	addi	r16,r16,-16
    8234:	3c000d0e 	bge	r7,r16,826c <___vfiprintf_internal_r+0xd9c>
    8238:	10800404 	addi	r2,r2,16
    823c:	28c00044 	addi	r3,r5,1
    8240:	45c00015 	stw	r23,0(r8)
    8244:	41c00115 	stw	r7,4(r8)
    8248:	d8801c15 	stw	r2,112(sp)
    824c:	d8c01b15 	stw	r3,108(sp)
    8250:	68fff40e 	bge	r13,r3,8224 <__alt_mem_Flash_flash_data+0xf4008224>
    8254:	1000151e 	bne	r2,zero,82ac <___vfiprintf_internal_r+0xddc>
    8258:	843ffc04 	addi	r16,r16,-16
    825c:	01800044 	movi	r6,1
    8260:	000b883a 	mov	r5,zero
    8264:	d811883a 	mov	r8,sp
    8268:	3c3ff316 	blt	r7,r16,8238 <__alt_mem_Flash_flash_data+0xf4008238>
    826c:	da402517 	ldw	r9,148(sp)
    8270:	b007883a 	mov	r3,r22
    8274:	802d883a 	mov	r22,r16
    8278:	1821883a 	mov	r16,r3
    827c:	d8c02417 	ldw	r3,144(sp)
    8280:	1585883a 	add	r2,r2,r22
    8284:	45800115 	stw	r22,4(r8)
    8288:	40c00015 	stw	r3,0(r8)
    828c:	d8801c15 	stw	r2,112(sp)
    8290:	d9801b15 	stw	r6,108(sp)
    8294:	00c001c4 	movi	r3,7
    8298:	19806d16 	blt	r3,r6,8450 <___vfiprintf_internal_r+0xf80>
    829c:	42000204 	addi	r8,r8,8
    82a0:	31000044 	addi	r4,r6,1
    82a4:	300b883a 	mov	r5,r6
    82a8:	003dd006 	br	79ec <__alt_mem_Flash_flash_data+0xf40079ec>
    82ac:	d9002017 	ldw	r4,128(sp)
    82b0:	d9402117 	ldw	r5,132(sp)
    82b4:	d9801a04 	addi	r6,sp,104
    82b8:	d9c02b15 	stw	r7,172(sp)
    82bc:	db402a15 	stw	r13,168(sp)
    82c0:	00073bc0 	call	73bc <__sprint_r.part.0>
    82c4:	d9c02b17 	ldw	r7,172(sp)
    82c8:	db402a17 	ldw	r13,168(sp)
    82cc:	103faa1e 	bne	r2,zero,8178 <__alt_mem_Flash_flash_data+0xf4008178>
    82d0:	d9401b17 	ldw	r5,108(sp)
    82d4:	d8801c17 	ldw	r2,112(sp)
    82d8:	d811883a 	mov	r8,sp
    82dc:	29800044 	addi	r6,r5,1
    82e0:	003fd306 	br	8230 <__alt_mem_Flash_flash_data+0xf4008230>
    82e4:	1000401e 	bne	r2,zero,83e8 <___vfiprintf_internal_r+0xf18>
    82e8:	68003b26 	beq	r13,zero,83d8 <___vfiprintf_internal_r+0xf08>
    82ec:	d9001d04 	addi	r4,sp,116
    82f0:	00800084 	movi	r2,2
    82f4:	d9000015 	stw	r4,0(sp)
    82f8:	d8800115 	stw	r2,4(sp)
    82fc:	1809883a 	mov	r4,r3
    8300:	d811883a 	mov	r8,sp
    8304:	003db406 	br	79d8 <__alt_mem_Flash_flash_data+0xf40079d8>
    8308:	1000451e 	bne	r2,zero,8420 <___vfiprintf_internal_r+0xf50>
    830c:	01000044 	movi	r4,1
    8310:	000b883a 	mov	r5,zero
    8314:	d811883a 	mov	r8,sp
    8318:	003db206 	br	79e4 <__alt_mem_Flash_flash_data+0xf40079e4>
    831c:	10803fcc 	andi	r2,r2,255
    8320:	1000071e 	bne	r2,zero,8340 <___vfiprintf_internal_r+0xe70>
    8324:	a880004c 	andi	r2,r21,1
    8328:	10000526 	beq	r2,zero,8340 <___vfiprintf_internal_r+0xe70>
    832c:	00800c04 	movi	r2,48
    8330:	d88019c5 	stb	r2,103(sp)
    8334:	dcc02717 	ldw	r19,156(sp)
    8338:	dd0019c4 	addi	r20,sp,103
    833c:	003d5e06 	br	78b8 <__alt_mem_Flash_flash_data+0xf40078b8>
    8340:	dd001a04 	addi	r20,sp,104
    8344:	003d5c06 	br	78b8 <__alt_mem_Flash_flash_data+0xf40078b8>
    8348:	1000971e 	bne	r2,zero,85a8 <___vfiprintf_internal_r+0x10d8>
    834c:	d8c01d87 	ldb	r3,118(sp)
    8350:	18005826 	beq	r3,zero,84b4 <___vfiprintf_internal_r+0xfe4>
    8354:	00800044 	movi	r2,1
    8358:	d8c01d84 	addi	r3,sp,118
    835c:	1009883a 	mov	r4,r2
    8360:	d8c00015 	stw	r3,0(sp)
    8364:	d8800115 	stw	r2,4(sp)
    8368:	d811883a 	mov	r8,sp
    836c:	003f3206 	br	8038 <__alt_mem_Flash_flash_data+0xf4008038>
    8370:	8023883a 	mov	r17,r16
    8374:	003ca706 	br	7614 <__alt_mem_Flash_flash_data+0xf4007614>
    8378:	d9002017 	ldw	r4,128(sp)
    837c:	d9402117 	ldw	r5,132(sp)
    8380:	d9801a04 	addi	r6,sp,104
    8384:	00073bc0 	call	73bc <__sprint_r.part.0>
    8388:	103f7b1e 	bne	r2,zero,8178 <__alt_mem_Flash_flash_data+0xf4008178>
    838c:	d8801c17 	ldw	r2,112(sp)
    8390:	d811883a 	mov	r8,sp
    8394:	003f9106 	br	81dc <__alt_mem_Flash_flash_data+0xf40081dc>
    8398:	00800084 	movi	r2,2
    839c:	b348b03a 	or	r4,r22,r13
    83a0:	003d2906 	br	7848 <__alt_mem_Flash_flash_data+0xf4007848>
    83a4:	d8802217 	ldw	r2,136(sp)
    83a8:	001b883a 	mov	r13,zero
    83ac:	15800017 	ldw	r22,0(r2)
    83b0:	10800104 	addi	r2,r2,4
    83b4:	d8802215 	stw	r2,136(sp)
    83b8:	003ea706 	br	7e58 <__alt_mem_Flash_flash_data+0xf4007e58>
    83bc:	d9002017 	ldw	r4,128(sp)
    83c0:	d9402117 	ldw	r5,132(sp)
    83c4:	d9801a04 	addi	r6,sp,104
    83c8:	00073bc0 	call	73bc <__sprint_r.part.0>
    83cc:	103f6a1e 	bne	r2,zero,8178 <__alt_mem_Flash_flash_data+0xf4008178>
    83d0:	d811883a 	mov	r8,sp
    83d4:	003cff06 	br	77d4 <__alt_mem_Flash_flash_data+0xf40077d4>
    83d8:	000b883a 	mov	r5,zero
    83dc:	1809883a 	mov	r4,r3
    83e0:	d811883a 	mov	r8,sp
    83e4:	003d7f06 	br	79e4 <__alt_mem_Flash_flash_data+0xf40079e4>
    83e8:	d9002017 	ldw	r4,128(sp)
    83ec:	d9402117 	ldw	r5,132(sp)
    83f0:	d9801a04 	addi	r6,sp,104
    83f4:	da402b15 	stw	r9,172(sp)
    83f8:	db402a15 	stw	r13,168(sp)
    83fc:	00073bc0 	call	73bc <__sprint_r.part.0>
    8400:	da402b17 	ldw	r9,172(sp)
    8404:	db402a17 	ldw	r13,168(sp)
    8408:	103f5b1e 	bne	r2,zero,8178 <__alt_mem_Flash_flash_data+0xf4008178>
    840c:	d9401b17 	ldw	r5,108(sp)
    8410:	d8801c17 	ldw	r2,112(sp)
    8414:	d811883a 	mov	r8,sp
    8418:	29000044 	addi	r4,r5,1
    841c:	003d6406 	br	79b0 <__alt_mem_Flash_flash_data+0xf40079b0>
    8420:	d9002017 	ldw	r4,128(sp)
    8424:	d9402117 	ldw	r5,132(sp)
    8428:	d9801a04 	addi	r6,sp,104
    842c:	da402b15 	stw	r9,172(sp)
    8430:	00073bc0 	call	73bc <__sprint_r.part.0>
    8434:	da402b17 	ldw	r9,172(sp)
    8438:	103f4f1e 	bne	r2,zero,8178 <__alt_mem_Flash_flash_data+0xf4008178>
    843c:	d9401b17 	ldw	r5,108(sp)
    8440:	d8801c17 	ldw	r2,112(sp)
    8444:	d811883a 	mov	r8,sp
    8448:	29000044 	addi	r4,r5,1
    844c:	003d6506 	br	79e4 <__alt_mem_Flash_flash_data+0xf40079e4>
    8450:	10009a1e 	bne	r2,zero,86bc <___vfiprintf_internal_r+0x11ec>
    8454:	01000044 	movi	r4,1
    8458:	000b883a 	mov	r5,zero
    845c:	d811883a 	mov	r8,sp
    8460:	003d6206 	br	79ec <__alt_mem_Flash_flash_data+0xf40079ec>
    8464:	d9002017 	ldw	r4,128(sp)
    8468:	d9402117 	ldw	r5,132(sp)
    846c:	d9801a04 	addi	r6,sp,104
    8470:	00073bc0 	call	73bc <__sprint_r.part.0>
    8474:	103f401e 	bne	r2,zero,8178 <__alt_mem_Flash_flash_data+0xf4008178>
    8478:	d9001b17 	ldw	r4,108(sp)
    847c:	d8801c17 	ldw	r2,112(sp)
    8480:	d811883a 	mov	r8,sp
    8484:	21000044 	addi	r4,r4,1
    8488:	003d7d06 	br	7a80 <__alt_mem_Flash_flash_data+0xf4007a80>
    848c:	05adc83a 	sub	r22,zero,r22
    8490:	b004c03a 	cmpne	r2,r22,zero
    8494:	035bc83a 	sub	r13,zero,r13
    8498:	689bc83a 	sub	r13,r13,r2
    849c:	03800b44 	movi	r14,45
    84a0:	db801d85 	stb	r14,118(sp)
    84a4:	4827883a 	mov	r19,r9
    84a8:	00800044 	movi	r2,1
    84ac:	b348b03a 	or	r4,r22,r13
    84b0:	003ce806 	br	7854 <__alt_mem_Flash_flash_data+0xf4007854>
    84b4:	000b883a 	mov	r5,zero
    84b8:	01000044 	movi	r4,1
    84bc:	d811883a 	mov	r8,sp
    84c0:	683d4826 	beq	r13,zero,79e4 <__alt_mem_Flash_flash_data+0xf40079e4>
    84c4:	00800084 	movi	r2,2
    84c8:	d8c01d04 	addi	r3,sp,116
    84cc:	d8c00015 	stw	r3,0(sp)
    84d0:	d8800115 	stw	r2,4(sp)
    84d4:	003d4006 	br	79d8 <__alt_mem_Flash_flash_data+0xf40079d8>
    84d8:	00800084 	movi	r2,2
    84dc:	003cda06 	br	7848 <__alt_mem_Flash_flash_data+0xf4007848>
    84e0:	a880100c 	andi	r2,r21,64
    84e4:	10004226 	beq	r2,zero,85f0 <___vfiprintf_internal_r+0x1120>
    84e8:	d8802217 	ldw	r2,136(sp)
    84ec:	001b883a 	mov	r13,zero
    84f0:	1580000b 	ldhu	r22,0(r2)
    84f4:	10800104 	addi	r2,r2,4
    84f8:	d8802215 	stw	r2,136(sp)
    84fc:	b009883a 	mov	r4,r22
    8500:	0005883a 	mov	r2,zero
    8504:	003cd006 	br	7848 <__alt_mem_Flash_flash_data+0xf4007848>
    8508:	80c00007 	ldb	r3,0(r16)
    850c:	8005883a 	mov	r2,r16
    8510:	003c4d06 	br	7648 <__alt_mem_Flash_flash_data+0xf4007648>
    8514:	a880100c 	andi	r2,r21,64
    8518:	10004426 	beq	r2,zero,862c <___vfiprintf_internal_r+0x115c>
    851c:	d8c02217 	ldw	r3,136(sp)
    8520:	001b883a 	mov	r13,zero
    8524:	00800044 	movi	r2,1
    8528:	1d80000b 	ldhu	r22,0(r3)
    852c:	18c00104 	addi	r3,r3,4
    8530:	d8c02215 	stw	r3,136(sp)
    8534:	b009883a 	mov	r4,r22
    8538:	003cc306 	br	7848 <__alt_mem_Flash_flash_data+0xf4007848>
    853c:	a880040c 	andi	r2,r21,16
    8540:	1000091e 	bne	r2,zero,8568 <___vfiprintf_internal_r+0x1098>
    8544:	aac0100c 	andi	r11,r21,64
    8548:	58000726 	beq	r11,zero,8568 <___vfiprintf_internal_r+0x1098>
    854c:	d8c02217 	ldw	r3,136(sp)
    8550:	d9002317 	ldw	r4,140(sp)
    8554:	18800017 	ldw	r2,0(r3)
    8558:	18c00104 	addi	r3,r3,4
    855c:	d8c02215 	stw	r3,136(sp)
    8560:	1100000d 	sth	r4,0(r2)
    8564:	003c0e06 	br	75a0 <__alt_mem_Flash_flash_data+0xf40075a0>
    8568:	d8c02217 	ldw	r3,136(sp)
    856c:	d9002317 	ldw	r4,140(sp)
    8570:	18800017 	ldw	r2,0(r3)
    8574:	18c00104 	addi	r3,r3,4
    8578:	d8c02215 	stw	r3,136(sp)
    857c:	11000015 	stw	r4,0(r2)
    8580:	003c0706 	br	75a0 <__alt_mem_Flash_flash_data+0xf40075a0>
    8584:	a880100c 	andi	r2,r21,64
    8588:	10002126 	beq	r2,zero,8610 <___vfiprintf_internal_r+0x1140>
    858c:	1d80000f 	ldh	r22,0(r3)
    8590:	d8c02217 	ldw	r3,136(sp)
    8594:	b01bd7fa 	srai	r13,r22,31
    8598:	18c00104 	addi	r3,r3,4
    859c:	d8c02215 	stw	r3,136(sp)
    85a0:	6805883a 	mov	r2,r13
    85a4:	003dc406 	br	7cb8 <__alt_mem_Flash_flash_data+0xf4007cb8>
    85a8:	d9002017 	ldw	r4,128(sp)
    85ac:	d9402117 	ldw	r5,132(sp)
    85b0:	d9801a04 	addi	r6,sp,104
    85b4:	da402b15 	stw	r9,172(sp)
    85b8:	db402a15 	stw	r13,168(sp)
    85bc:	00073bc0 	call	73bc <__sprint_r.part.0>
    85c0:	da402b17 	ldw	r9,172(sp)
    85c4:	db402a17 	ldw	r13,168(sp)
    85c8:	103eeb1e 	bne	r2,zero,8178 <__alt_mem_Flash_flash_data+0xf4008178>
    85cc:	d9401b17 	ldw	r5,108(sp)
    85d0:	d8801c17 	ldw	r2,112(sp)
    85d4:	d811883a 	mov	r8,sp
    85d8:	29000044 	addi	r4,r5,1
    85dc:	003e8b06 	br	800c <__alt_mem_Flash_flash_data+0xf400800c>
    85e0:	9023883a 	mov	r17,r18
    85e4:	003d5a06 	br	7b50 <__alt_mem_Flash_flash_data+0xf4007b50>
    85e8:	4827883a 	mov	r19,r9
    85ec:	003e3506 	br	7ec4 <__alt_mem_Flash_flash_data+0xf4007ec4>
    85f0:	d8c02217 	ldw	r3,136(sp)
    85f4:	001b883a 	mov	r13,zero
    85f8:	0005883a 	mov	r2,zero
    85fc:	1d800017 	ldw	r22,0(r3)
    8600:	18c00104 	addi	r3,r3,4
    8604:	d8c02215 	stw	r3,136(sp)
    8608:	b009883a 	mov	r4,r22
    860c:	003c8e06 	br	7848 <__alt_mem_Flash_flash_data+0xf4007848>
    8610:	1d800017 	ldw	r22,0(r3)
    8614:	d9002217 	ldw	r4,136(sp)
    8618:	b01bd7fa 	srai	r13,r22,31
    861c:	21000104 	addi	r4,r4,4
    8620:	d9002215 	stw	r4,136(sp)
    8624:	6805883a 	mov	r2,r13
    8628:	003da306 	br	7cb8 <__alt_mem_Flash_flash_data+0xf4007cb8>
    862c:	d9002217 	ldw	r4,136(sp)
    8630:	001b883a 	mov	r13,zero
    8634:	00800044 	movi	r2,1
    8638:	25800017 	ldw	r22,0(r4)
    863c:	21000104 	addi	r4,r4,4
    8640:	d9002215 	stw	r4,136(sp)
    8644:	b009883a 	mov	r4,r22
    8648:	003c7f06 	br	7848 <__alt_mem_Flash_flash_data+0xf4007848>
    864c:	00c000b4 	movhi	r3,2
    8650:	18e5f904 	addi	r3,r3,-26652
    8654:	d8c02415 	stw	r3,144(sp)
    8658:	003cff06 	br	7a58 <__alt_mem_Flash_flash_data+0xf4007a58>
    865c:	d8801c17 	ldw	r2,112(sp)
    8660:	dd402117 	ldw	r21,132(sp)
    8664:	103ec526 	beq	r2,zero,817c <__alt_mem_Flash_flash_data+0xf400817c>
    8668:	d9002017 	ldw	r4,128(sp)
    866c:	a80b883a 	mov	r5,r21
    8670:	d9801a04 	addi	r6,sp,104
    8674:	00073bc0 	call	73bc <__sprint_r.part.0>
    8678:	003ec006 	br	817c <__alt_mem_Flash_flash_data+0xf400817c>
    867c:	80800044 	addi	r2,r16,1
    8680:	ad400814 	ori	r21,r21,32
    8684:	80c00047 	ldb	r3,1(r16)
    8688:	003bef06 	br	7648 <__alt_mem_Flash_flash_data+0xf4007648>
    868c:	04a5c83a 	sub	r18,zero,r18
    8690:	8005883a 	mov	r2,r16
    8694:	d8c02215 	stw	r3,136(sp)
    8698:	003d5306 	br	7be8 <__alt_mem_Flash_flash_data+0xf4007be8>
    869c:	da002a15 	stw	r8,168(sp)
    86a0:	00073240 	call	7324 <strlen>
    86a4:	1027883a 	mov	r19,r2
    86a8:	db801d83 	ldbu	r14,118(sp)
    86ac:	dd802215 	stw	r22,136(sp)
    86b0:	0013883a 	mov	r9,zero
    86b4:	da002a17 	ldw	r8,168(sp)
    86b8:	003c7f06 	br	78b8 <__alt_mem_Flash_flash_data+0xf40078b8>
    86bc:	d9002017 	ldw	r4,128(sp)
    86c0:	d9402117 	ldw	r5,132(sp)
    86c4:	d9801a04 	addi	r6,sp,104
    86c8:	da402b15 	stw	r9,172(sp)
    86cc:	00073bc0 	call	73bc <__sprint_r.part.0>
    86d0:	da402b17 	ldw	r9,172(sp)
    86d4:	103ea81e 	bne	r2,zero,8178 <__alt_mem_Flash_flash_data+0xf4008178>
    86d8:	d9401b17 	ldw	r5,108(sp)
    86dc:	d8801c17 	ldw	r2,112(sp)
    86e0:	d811883a 	mov	r8,sp
    86e4:	29000044 	addi	r4,r5,1
    86e8:	003cc006 	br	79ec <__alt_mem_Flash_flash_data+0xf40079ec>
    86ec:	d9401b17 	ldw	r5,108(sp)
    86f0:	010000b4 	movhi	r4,2
    86f4:	2125fd04 	addi	r4,r4,-26636
    86f8:	d9002415 	stw	r4,144(sp)
    86fc:	29400044 	addi	r5,r5,1
    8700:	003c9f06 	br	7980 <__alt_mem_Flash_flash_data+0xf4007980>
    8704:	00800184 	movi	r2,6
    8708:	1240012e 	bgeu	r2,r9,8710 <___vfiprintf_internal_r+0x1240>
    870c:	1013883a 	mov	r9,r2
    8710:	4827883a 	mov	r19,r9
    8714:	4823883a 	mov	r17,r9
    8718:	48001116 	blt	r9,zero,8760 <___vfiprintf_internal_r+0x1290>
    871c:	050000b4 	movhi	r20,2
    8720:	dd802215 	stw	r22,136(sp)
    8724:	a5259d04 	addi	r20,r20,-27020
    8728:	003db106 	br	7df0 <__alt_mem_Flash_flash_data+0xf4007df0>
    872c:	d9401b17 	ldw	r5,108(sp)
    8730:	010000b4 	movhi	r4,2
    8734:	2125fd04 	addi	r4,r4,-26636
    8738:	d9002415 	stw	r4,144(sp)
    873c:	29400044 	addi	r5,r5,1
    8740:	003cf906 	br	7b28 <__alt_mem_Flash_flash_data+0xf4007b28>
    8744:	4827883a 	mov	r19,r9
    8748:	db801d83 	ldbu	r14,118(sp)
    874c:	dd802215 	stw	r22,136(sp)
    8750:	0013883a 	mov	r9,zero
    8754:	003c5806 	br	78b8 <__alt_mem_Flash_flash_data+0xf40078b8>
    8758:	200d883a 	mov	r6,r4
    875c:	003ec706 	br	827c <__alt_mem_Flash_flash_data+0xf400827c>
    8760:	0023883a 	mov	r17,zero
    8764:	003fed06 	br	871c <__alt_mem_Flash_flash_data+0xf400871c>
    8768:	d9002217 	ldw	r4,136(sp)
    876c:	22400017 	ldw	r9,0(r4)
    8770:	20c00104 	addi	r3,r4,4
    8774:	d8c02215 	stw	r3,136(sp)
    8778:	483fc20e 	bge	r9,zero,8684 <__alt_mem_Flash_flash_data+0xf4008684>
    877c:	027fffc4 	movi	r9,-1
    8780:	80c00047 	ldb	r3,1(r16)
    8784:	003bb006 	br	7648 <__alt_mem_Flash_flash_data+0xf4007648>
    8788:	8c80010e 	bge	r17,r18,8790 <___vfiprintf_internal_r+0x12c0>
    878c:	9023883a 	mov	r17,r18
    8790:	d8802317 	ldw	r2,140(sp)
    8794:	1445883a 	add	r2,r2,r17
    8798:	d8802315 	stw	r2,140(sp)
    879c:	003cef06 	br	7b5c <__alt_mem_Flash_flash_data+0xf4007b5c>

000087a0 <__vfiprintf_internal>:
    87a0:	2007883a 	mov	r3,r4
    87a4:	010000b4 	movhi	r4,2
    87a8:	212e8e04 	addi	r4,r4,-17864
    87ac:	21000017 	ldw	r4,0(r4)
    87b0:	2805883a 	mov	r2,r5
    87b4:	300f883a 	mov	r7,r6
    87b8:	180b883a 	mov	r5,r3
    87bc:	100d883a 	mov	r6,r2
    87c0:	00074d01 	jmpi	74d0 <___vfiprintf_internal_r>

000087c4 <__sbprintf>:
    87c4:	2880030b 	ldhu	r2,12(r5)
    87c8:	2ac01917 	ldw	r11,100(r5)
    87cc:	2a80038b 	ldhu	r10,14(r5)
    87d0:	2a400717 	ldw	r9,28(r5)
    87d4:	2a000917 	ldw	r8,36(r5)
    87d8:	defee204 	addi	sp,sp,-1144
    87dc:	00c10004 	movi	r3,1024
    87e0:	dc011a15 	stw	r16,1128(sp)
    87e4:	10bfff4c 	andi	r2,r2,65533
    87e8:	2821883a 	mov	r16,r5
    87ec:	d8cb883a 	add	r5,sp,r3
    87f0:	dc811c15 	stw	r18,1136(sp)
    87f4:	dc411b15 	stw	r17,1132(sp)
    87f8:	dfc11d15 	stw	ra,1140(sp)
    87fc:	2025883a 	mov	r18,r4
    8800:	d881030d 	sth	r2,1036(sp)
    8804:	dac11915 	stw	r11,1124(sp)
    8808:	da81038d 	sth	r10,1038(sp)
    880c:	da410715 	stw	r9,1052(sp)
    8810:	da010915 	stw	r8,1060(sp)
    8814:	dec10015 	stw	sp,1024(sp)
    8818:	dec10415 	stw	sp,1040(sp)
    881c:	d8c10215 	stw	r3,1032(sp)
    8820:	d8c10515 	stw	r3,1044(sp)
    8824:	d8010615 	stw	zero,1048(sp)
    8828:	00074d00 	call	74d0 <___vfiprintf_internal_r>
    882c:	1023883a 	mov	r17,r2
    8830:	10000416 	blt	r2,zero,8844 <__sbprintf+0x80>
    8834:	9009883a 	mov	r4,r18
    8838:	d9410004 	addi	r5,sp,1024
    883c:	00049900 	call	4990 <_fflush_r>
    8840:	10000d1e 	bne	r2,zero,8878 <__sbprintf+0xb4>
    8844:	d8c1030b 	ldhu	r3,1036(sp)
    8848:	18c0100c 	andi	r3,r3,64
    884c:	18000326 	beq	r3,zero,885c <__sbprintf+0x98>
    8850:	8080030b 	ldhu	r2,12(r16)
    8854:	10801014 	ori	r2,r2,64
    8858:	8080030d 	sth	r2,12(r16)
    885c:	8805883a 	mov	r2,r17
    8860:	dfc11d17 	ldw	ra,1140(sp)
    8864:	dc811c17 	ldw	r18,1136(sp)
    8868:	dc411b17 	ldw	r17,1132(sp)
    886c:	dc011a17 	ldw	r16,1128(sp)
    8870:	dec11e04 	addi	sp,sp,1144
    8874:	f800283a 	ret
    8878:	047fffc4 	movi	r17,-1
    887c:	003ff106 	br	8844 <__alt_mem_Flash_flash_data+0xf4008844>

00008880 <_write_r>:
    8880:	defffd04 	addi	sp,sp,-12
    8884:	dc000015 	stw	r16,0(sp)
    8888:	040000b4 	movhi	r16,2
    888c:	dc400115 	stw	r17,4(sp)
    8890:	84368304 	addi	r16,r16,-9716
    8894:	2023883a 	mov	r17,r4
    8898:	2809883a 	mov	r4,r5
    889c:	300b883a 	mov	r5,r6
    88a0:	380d883a 	mov	r6,r7
    88a4:	dfc00215 	stw	ra,8(sp)
    88a8:	80000015 	stw	zero,0(r16)
    88ac:	000d8400 	call	d840 <write>
    88b0:	00ffffc4 	movi	r3,-1
    88b4:	10c00526 	beq	r2,r3,88cc <_write_r+0x4c>
    88b8:	dfc00217 	ldw	ra,8(sp)
    88bc:	dc400117 	ldw	r17,4(sp)
    88c0:	dc000017 	ldw	r16,0(sp)
    88c4:	dec00304 	addi	sp,sp,12
    88c8:	f800283a 	ret
    88cc:	80c00017 	ldw	r3,0(r16)
    88d0:	183ff926 	beq	r3,zero,88b8 <__alt_mem_Flash_flash_data+0xf40088b8>
    88d4:	88c00015 	stw	r3,0(r17)
    88d8:	003ff706 	br	88b8 <__alt_mem_Flash_flash_data+0xf40088b8>

000088dc <_close_r>:
    88dc:	defffd04 	addi	sp,sp,-12
    88e0:	dc000015 	stw	r16,0(sp)
    88e4:	040000b4 	movhi	r16,2
    88e8:	dc400115 	stw	r17,4(sp)
    88ec:	84368304 	addi	r16,r16,-9716
    88f0:	2023883a 	mov	r17,r4
    88f4:	2809883a 	mov	r4,r5
    88f8:	dfc00215 	stw	ra,8(sp)
    88fc:	80000015 	stw	zero,0(r16)
    8900:	000cfc80 	call	cfc8 <close>
    8904:	00ffffc4 	movi	r3,-1
    8908:	10c00526 	beq	r2,r3,8920 <_close_r+0x44>
    890c:	dfc00217 	ldw	ra,8(sp)
    8910:	dc400117 	ldw	r17,4(sp)
    8914:	dc000017 	ldw	r16,0(sp)
    8918:	dec00304 	addi	sp,sp,12
    891c:	f800283a 	ret
    8920:	80c00017 	ldw	r3,0(r16)
    8924:	183ff926 	beq	r3,zero,890c <__alt_mem_Flash_flash_data+0xf400890c>
    8928:	88c00015 	stw	r3,0(r17)
    892c:	003ff706 	br	890c <__alt_mem_Flash_flash_data+0xf400890c>

00008930 <_calloc_r>:
    8930:	298b383a 	mul	r5,r5,r6
    8934:	defffe04 	addi	sp,sp,-8
    8938:	dc000015 	stw	r16,0(sp)
    893c:	dfc00115 	stw	ra,4(sp)
    8940:	00055f00 	call	55f0 <_malloc_r>
    8944:	1021883a 	mov	r16,r2
    8948:	10002826 	beq	r2,zero,89ec <_calloc_r+0xbc>
    894c:	11bfff17 	ldw	r6,-4(r2)
    8950:	00bfff04 	movi	r2,-4
    8954:	00c00904 	movi	r3,36
    8958:	308c703a 	and	r6,r6,r2
    895c:	308d883a 	add	r6,r6,r2
    8960:	19801436 	bltu	r3,r6,89b4 <_calloc_r+0x84>
    8964:	008004c4 	movi	r2,19
    8968:	11800936 	bltu	r2,r6,8990 <_calloc_r+0x60>
    896c:	8005883a 	mov	r2,r16
    8970:	10000015 	stw	zero,0(r2)
    8974:	10000115 	stw	zero,4(r2)
    8978:	10000215 	stw	zero,8(r2)
    897c:	8005883a 	mov	r2,r16
    8980:	dfc00117 	ldw	ra,4(sp)
    8984:	dc000017 	ldw	r16,0(sp)
    8988:	dec00204 	addi	sp,sp,8
    898c:	f800283a 	ret
    8990:	80000015 	stw	zero,0(r16)
    8994:	80000115 	stw	zero,4(r16)
    8998:	008006c4 	movi	r2,27
    899c:	11800d2e 	bgeu	r2,r6,89d4 <_calloc_r+0xa4>
    89a0:	80000215 	stw	zero,8(r16)
    89a4:	80000315 	stw	zero,12(r16)
    89a8:	30c00c26 	beq	r6,r3,89dc <_calloc_r+0xac>
    89ac:	80800404 	addi	r2,r16,16
    89b0:	003fef06 	br	8970 <__alt_mem_Flash_flash_data+0xf4008970>
    89b4:	8009883a 	mov	r4,r16
    89b8:	000b883a 	mov	r5,zero
    89bc:	0005fb80 	call	5fb8 <memset>
    89c0:	8005883a 	mov	r2,r16
    89c4:	dfc00117 	ldw	ra,4(sp)
    89c8:	dc000017 	ldw	r16,0(sp)
    89cc:	dec00204 	addi	sp,sp,8
    89d0:	f800283a 	ret
    89d4:	80800204 	addi	r2,r16,8
    89d8:	003fe506 	br	8970 <__alt_mem_Flash_flash_data+0xf4008970>
    89dc:	80000415 	stw	zero,16(r16)
    89e0:	80800604 	addi	r2,r16,24
    89e4:	80000515 	stw	zero,20(r16)
    89e8:	003fe106 	br	8970 <__alt_mem_Flash_flash_data+0xf4008970>
    89ec:	0005883a 	mov	r2,zero
    89f0:	003fe306 	br	8980 <__alt_mem_Flash_flash_data+0xf4008980>

000089f4 <_fclose_r>:
    89f4:	28003926 	beq	r5,zero,8adc <_fclose_r+0xe8>
    89f8:	defffc04 	addi	sp,sp,-16
    89fc:	dc400115 	stw	r17,4(sp)
    8a00:	dc000015 	stw	r16,0(sp)
    8a04:	dfc00315 	stw	ra,12(sp)
    8a08:	dc800215 	stw	r18,8(sp)
    8a0c:	2023883a 	mov	r17,r4
    8a10:	2821883a 	mov	r16,r5
    8a14:	20000226 	beq	r4,zero,8a20 <_fclose_r+0x2c>
    8a18:	20800e17 	ldw	r2,56(r4)
    8a1c:	10002726 	beq	r2,zero,8abc <_fclose_r+0xc8>
    8a20:	8080030f 	ldh	r2,12(r16)
    8a24:	1000071e 	bne	r2,zero,8a44 <_fclose_r+0x50>
    8a28:	0005883a 	mov	r2,zero
    8a2c:	dfc00317 	ldw	ra,12(sp)
    8a30:	dc800217 	ldw	r18,8(sp)
    8a34:	dc400117 	ldw	r17,4(sp)
    8a38:	dc000017 	ldw	r16,0(sp)
    8a3c:	dec00404 	addi	sp,sp,16
    8a40:	f800283a 	ret
    8a44:	8809883a 	mov	r4,r17
    8a48:	800b883a 	mov	r5,r16
    8a4c:	00047880 	call	4788 <__sflush_r>
    8a50:	1025883a 	mov	r18,r2
    8a54:	80800b17 	ldw	r2,44(r16)
    8a58:	10000426 	beq	r2,zero,8a6c <_fclose_r+0x78>
    8a5c:	81400717 	ldw	r5,28(r16)
    8a60:	8809883a 	mov	r4,r17
    8a64:	103ee83a 	callr	r2
    8a68:	10001616 	blt	r2,zero,8ac4 <_fclose_r+0xd0>
    8a6c:	8080030b 	ldhu	r2,12(r16)
    8a70:	1080200c 	andi	r2,r2,128
    8a74:	1000151e 	bne	r2,zero,8acc <_fclose_r+0xd8>
    8a78:	81400c17 	ldw	r5,48(r16)
    8a7c:	28000526 	beq	r5,zero,8a94 <_fclose_r+0xa0>
    8a80:	80801004 	addi	r2,r16,64
    8a84:	28800226 	beq	r5,r2,8a90 <_fclose_r+0x9c>
    8a88:	8809883a 	mov	r4,r17
    8a8c:	0004ee00 	call	4ee0 <_free_r>
    8a90:	80000c15 	stw	zero,48(r16)
    8a94:	81401117 	ldw	r5,68(r16)
    8a98:	28000326 	beq	r5,zero,8aa8 <_fclose_r+0xb4>
    8a9c:	8809883a 	mov	r4,r17
    8aa0:	0004ee00 	call	4ee0 <_free_r>
    8aa4:	80001115 	stw	zero,68(r16)
    8aa8:	0004d7c0 	call	4d7c <__sfp_lock_acquire>
    8aac:	8000030d 	sth	zero,12(r16)
    8ab0:	0004d800 	call	4d80 <__sfp_lock_release>
    8ab4:	9005883a 	mov	r2,r18
    8ab8:	003fdc06 	br	8a2c <__alt_mem_Flash_flash_data+0xf4008a2c>
    8abc:	0004d6c0 	call	4d6c <__sinit>
    8ac0:	003fd706 	br	8a20 <__alt_mem_Flash_flash_data+0xf4008a20>
    8ac4:	04bfffc4 	movi	r18,-1
    8ac8:	003fe806 	br	8a6c <__alt_mem_Flash_flash_data+0xf4008a6c>
    8acc:	81400417 	ldw	r5,16(r16)
    8ad0:	8809883a 	mov	r4,r17
    8ad4:	0004ee00 	call	4ee0 <_free_r>
    8ad8:	003fe706 	br	8a78 <__alt_mem_Flash_flash_data+0xf4008a78>
    8adc:	0005883a 	mov	r2,zero
    8ae0:	f800283a 	ret

00008ae4 <fclose>:
    8ae4:	008000b4 	movhi	r2,2
    8ae8:	10ae8e04 	addi	r2,r2,-17864
    8aec:	200b883a 	mov	r5,r4
    8af0:	11000017 	ldw	r4,0(r2)
    8af4:	00089f41 	jmpi	89f4 <_fclose_r>

00008af8 <_fputwc_r>:
    8af8:	3080030b 	ldhu	r2,12(r6)
    8afc:	defff804 	addi	sp,sp,-32
    8b00:	dcc00415 	stw	r19,16(sp)
    8b04:	dc800315 	stw	r18,12(sp)
    8b08:	dc000115 	stw	r16,4(sp)
    8b0c:	dfc00715 	stw	ra,28(sp)
    8b10:	dd400615 	stw	r21,24(sp)
    8b14:	dd000515 	stw	r20,20(sp)
    8b18:	dc400215 	stw	r17,8(sp)
    8b1c:	10c8000c 	andi	r3,r2,8192
    8b20:	3021883a 	mov	r16,r6
    8b24:	2027883a 	mov	r19,r4
    8b28:	2825883a 	mov	r18,r5
    8b2c:	1800051e 	bne	r3,zero,8b44 <_fputwc_r+0x4c>
    8b30:	30c01917 	ldw	r3,100(r6)
    8b34:	10880014 	ori	r2,r2,8192
    8b38:	3080030d 	sth	r2,12(r6)
    8b3c:	18880014 	ori	r2,r3,8192
    8b40:	30801915 	stw	r2,100(r6)
    8b44:	00053e00 	call	53e0 <__locale_mb_cur_max>
    8b48:	00c00044 	movi	r3,1
    8b4c:	10c03e26 	beq	r2,r3,8c48 <_fputwc_r+0x150>
    8b50:	9809883a 	mov	r4,r19
    8b54:	d80b883a 	mov	r5,sp
    8b58:	900d883a 	mov	r6,r18
    8b5c:	81c01704 	addi	r7,r16,92
    8b60:	0009b140 	call	9b14 <_wcrtomb_r>
    8b64:	1029883a 	mov	r20,r2
    8b68:	00bfffc4 	movi	r2,-1
    8b6c:	a0802026 	beq	r20,r2,8bf0 <_fputwc_r+0xf8>
    8b70:	d9400003 	ldbu	r5,0(sp)
    8b74:	a0001c26 	beq	r20,zero,8be8 <_fputwc_r+0xf0>
    8b78:	0023883a 	mov	r17,zero
    8b7c:	05400284 	movi	r21,10
    8b80:	00000906 	br	8ba8 <_fputwc_r+0xb0>
    8b84:	80800017 	ldw	r2,0(r16)
    8b88:	11400005 	stb	r5,0(r2)
    8b8c:	80c00017 	ldw	r3,0(r16)
    8b90:	18c00044 	addi	r3,r3,1
    8b94:	80c00015 	stw	r3,0(r16)
    8b98:	8c400044 	addi	r17,r17,1
    8b9c:	dc45883a 	add	r2,sp,r17
    8ba0:	8d00112e 	bgeu	r17,r20,8be8 <_fputwc_r+0xf0>
    8ba4:	11400003 	ldbu	r5,0(r2)
    8ba8:	80c00217 	ldw	r3,8(r16)
    8bac:	18ffffc4 	addi	r3,r3,-1
    8bb0:	80c00215 	stw	r3,8(r16)
    8bb4:	183ff30e 	bge	r3,zero,8b84 <__alt_mem_Flash_flash_data+0xf4008b84>
    8bb8:	80800617 	ldw	r2,24(r16)
    8bbc:	18801916 	blt	r3,r2,8c24 <_fputwc_r+0x12c>
    8bc0:	80800017 	ldw	r2,0(r16)
    8bc4:	11400005 	stb	r5,0(r2)
    8bc8:	80800017 	ldw	r2,0(r16)
    8bcc:	10c00003 	ldbu	r3,0(r2)
    8bd0:	10800044 	addi	r2,r2,1
    8bd4:	1d402326 	beq	r3,r21,8c64 <_fputwc_r+0x16c>
    8bd8:	80800015 	stw	r2,0(r16)
    8bdc:	8c400044 	addi	r17,r17,1
    8be0:	dc45883a 	add	r2,sp,r17
    8be4:	8d3fef36 	bltu	r17,r20,8ba4 <__alt_mem_Flash_flash_data+0xf4008ba4>
    8be8:	9005883a 	mov	r2,r18
    8bec:	00000406 	br	8c00 <_fputwc_r+0x108>
    8bf0:	80c0030b 	ldhu	r3,12(r16)
    8bf4:	a005883a 	mov	r2,r20
    8bf8:	18c01014 	ori	r3,r3,64
    8bfc:	80c0030d 	sth	r3,12(r16)
    8c00:	dfc00717 	ldw	ra,28(sp)
    8c04:	dd400617 	ldw	r21,24(sp)
    8c08:	dd000517 	ldw	r20,20(sp)
    8c0c:	dcc00417 	ldw	r19,16(sp)
    8c10:	dc800317 	ldw	r18,12(sp)
    8c14:	dc400217 	ldw	r17,8(sp)
    8c18:	dc000117 	ldw	r16,4(sp)
    8c1c:	dec00804 	addi	sp,sp,32
    8c20:	f800283a 	ret
    8c24:	9809883a 	mov	r4,r19
    8c28:	29403fcc 	andi	r5,r5,255
    8c2c:	800d883a 	mov	r6,r16
    8c30:	00099c00 	call	99c0 <__swbuf_r>
    8c34:	10bfffe0 	cmpeqi	r2,r2,-1
    8c38:	10803fcc 	andi	r2,r2,255
    8c3c:	103fd626 	beq	r2,zero,8b98 <__alt_mem_Flash_flash_data+0xf4008b98>
    8c40:	00bfffc4 	movi	r2,-1
    8c44:	003fee06 	br	8c00 <__alt_mem_Flash_flash_data+0xf4008c00>
    8c48:	90ffffc4 	addi	r3,r18,-1
    8c4c:	01003f84 	movi	r4,254
    8c50:	20ffbf36 	bltu	r4,r3,8b50 <__alt_mem_Flash_flash_data+0xf4008b50>
    8c54:	900b883a 	mov	r5,r18
    8c58:	dc800005 	stb	r18,0(sp)
    8c5c:	1029883a 	mov	r20,r2
    8c60:	003fc506 	br	8b78 <__alt_mem_Flash_flash_data+0xf4008b78>
    8c64:	9809883a 	mov	r4,r19
    8c68:	a80b883a 	mov	r5,r21
    8c6c:	800d883a 	mov	r6,r16
    8c70:	00099c00 	call	99c0 <__swbuf_r>
    8c74:	10bfffe0 	cmpeqi	r2,r2,-1
    8c78:	003fef06 	br	8c38 <__alt_mem_Flash_flash_data+0xf4008c38>

00008c7c <fputwc>:
    8c7c:	008000b4 	movhi	r2,2
    8c80:	defffc04 	addi	sp,sp,-16
    8c84:	10ae8e04 	addi	r2,r2,-17864
    8c88:	dc000115 	stw	r16,4(sp)
    8c8c:	14000017 	ldw	r16,0(r2)
    8c90:	dc400215 	stw	r17,8(sp)
    8c94:	dfc00315 	stw	ra,12(sp)
    8c98:	2023883a 	mov	r17,r4
    8c9c:	280d883a 	mov	r6,r5
    8ca0:	80000626 	beq	r16,zero,8cbc <fputwc+0x40>
    8ca4:	80800e17 	ldw	r2,56(r16)
    8ca8:	1000041e 	bne	r2,zero,8cbc <fputwc+0x40>
    8cac:	8009883a 	mov	r4,r16
    8cb0:	d9400015 	stw	r5,0(sp)
    8cb4:	0004d6c0 	call	4d6c <__sinit>
    8cb8:	d9800017 	ldw	r6,0(sp)
    8cbc:	8009883a 	mov	r4,r16
    8cc0:	880b883a 	mov	r5,r17
    8cc4:	dfc00317 	ldw	ra,12(sp)
    8cc8:	dc400217 	ldw	r17,8(sp)
    8ccc:	dc000117 	ldw	r16,4(sp)
    8cd0:	dec00404 	addi	sp,sp,16
    8cd4:	0008af81 	jmpi	8af8 <_fputwc_r>

00008cd8 <_fstat_r>:
    8cd8:	defffd04 	addi	sp,sp,-12
    8cdc:	dc000015 	stw	r16,0(sp)
    8ce0:	040000b4 	movhi	r16,2
    8ce4:	dc400115 	stw	r17,4(sp)
    8ce8:	84368304 	addi	r16,r16,-9716
    8cec:	2023883a 	mov	r17,r4
    8cf0:	2809883a 	mov	r4,r5
    8cf4:	300b883a 	mov	r5,r6
    8cf8:	dfc00215 	stw	ra,8(sp)
    8cfc:	80000015 	stw	zero,0(r16)
    8d00:	000d1140 	call	d114 <fstat>
    8d04:	00ffffc4 	movi	r3,-1
    8d08:	10c00526 	beq	r2,r3,8d20 <_fstat_r+0x48>
    8d0c:	dfc00217 	ldw	ra,8(sp)
    8d10:	dc400117 	ldw	r17,4(sp)
    8d14:	dc000017 	ldw	r16,0(sp)
    8d18:	dec00304 	addi	sp,sp,12
    8d1c:	f800283a 	ret
    8d20:	80c00017 	ldw	r3,0(r16)
    8d24:	183ff926 	beq	r3,zero,8d0c <__alt_mem_Flash_flash_data+0xf4008d0c>
    8d28:	88c00015 	stw	r3,0(r17)
    8d2c:	003ff706 	br	8d0c <__alt_mem_Flash_flash_data+0xf4008d0c>

00008d30 <__sfvwrite_r>:
    8d30:	30800217 	ldw	r2,8(r6)
    8d34:	10006726 	beq	r2,zero,8ed4 <__sfvwrite_r+0x1a4>
    8d38:	defff404 	addi	sp,sp,-48
    8d3c:	dd000615 	stw	r20,24(sp)
    8d40:	2029883a 	mov	r20,r4
    8d44:	2900030b 	ldhu	r4,12(r5)
    8d48:	ddc00915 	stw	r23,36(sp)
    8d4c:	dc000215 	stw	r16,8(sp)
    8d50:	dfc00b15 	stw	ra,44(sp)
    8d54:	df000a15 	stw	fp,40(sp)
    8d58:	dd800815 	stw	r22,32(sp)
    8d5c:	dd400715 	stw	r21,28(sp)
    8d60:	dcc00515 	stw	r19,20(sp)
    8d64:	dc800415 	stw	r18,16(sp)
    8d68:	dc400315 	stw	r17,12(sp)
    8d6c:	2080020c 	andi	r2,r4,8
    8d70:	2821883a 	mov	r16,r5
    8d74:	302f883a 	mov	r23,r6
    8d78:	10002726 	beq	r2,zero,8e18 <__sfvwrite_r+0xe8>
    8d7c:	28800417 	ldw	r2,16(r5)
    8d80:	10002526 	beq	r2,zero,8e18 <__sfvwrite_r+0xe8>
    8d84:	2080008c 	andi	r2,r4,2
    8d88:	bc400017 	ldw	r17,0(r23)
    8d8c:	10002a26 	beq	r2,zero,8e38 <__sfvwrite_r+0x108>
    8d90:	05600034 	movhi	r21,32768
    8d94:	0027883a 	mov	r19,zero
    8d98:	0025883a 	mov	r18,zero
    8d9c:	ad7f0004 	addi	r21,r21,-1024
    8da0:	980d883a 	mov	r6,r19
    8da4:	a009883a 	mov	r4,r20
    8da8:	90004626 	beq	r18,zero,8ec4 <__sfvwrite_r+0x194>
    8dac:	900f883a 	mov	r7,r18
    8db0:	81400717 	ldw	r5,28(r16)
    8db4:	ac80022e 	bgeu	r21,r18,8dc0 <__sfvwrite_r+0x90>
    8db8:	01e00034 	movhi	r7,32768
    8dbc:	39ff0004 	addi	r7,r7,-1024
    8dc0:	80800917 	ldw	r2,36(r16)
    8dc4:	103ee83a 	callr	r2
    8dc8:	0080520e 	bge	zero,r2,8f14 <__sfvwrite_r+0x1e4>
    8dcc:	b8c00217 	ldw	r3,8(r23)
    8dd0:	98a7883a 	add	r19,r19,r2
    8dd4:	90a5c83a 	sub	r18,r18,r2
    8dd8:	1885c83a 	sub	r2,r3,r2
    8ddc:	b8800215 	stw	r2,8(r23)
    8de0:	103fef1e 	bne	r2,zero,8da0 <__alt_mem_Flash_flash_data+0xf4008da0>
    8de4:	0005883a 	mov	r2,zero
    8de8:	dfc00b17 	ldw	ra,44(sp)
    8dec:	df000a17 	ldw	fp,40(sp)
    8df0:	ddc00917 	ldw	r23,36(sp)
    8df4:	dd800817 	ldw	r22,32(sp)
    8df8:	dd400717 	ldw	r21,28(sp)
    8dfc:	dd000617 	ldw	r20,24(sp)
    8e00:	dcc00517 	ldw	r19,20(sp)
    8e04:	dc800417 	ldw	r18,16(sp)
    8e08:	dc400317 	ldw	r17,12(sp)
    8e0c:	dc000217 	ldw	r16,8(sp)
    8e10:	dec00c04 	addi	sp,sp,48
    8e14:	f800283a 	ret
    8e18:	a009883a 	mov	r4,r20
    8e1c:	800b883a 	mov	r5,r16
    8e20:	0002d0c0 	call	2d0c <__swsetup_r>
    8e24:	1000ec1e 	bne	r2,zero,91d8 <__sfvwrite_r+0x4a8>
    8e28:	8100030b 	ldhu	r4,12(r16)
    8e2c:	bc400017 	ldw	r17,0(r23)
    8e30:	2080008c 	andi	r2,r4,2
    8e34:	103fd61e 	bne	r2,zero,8d90 <__alt_mem_Flash_flash_data+0xf4008d90>
    8e38:	2080004c 	andi	r2,r4,1
    8e3c:	10003a1e 	bne	r2,zero,8f28 <__sfvwrite_r+0x1f8>
    8e40:	0039883a 	mov	fp,zero
    8e44:	0025883a 	mov	r18,zero
    8e48:	90001a26 	beq	r18,zero,8eb4 <__sfvwrite_r+0x184>
    8e4c:	2080800c 	andi	r2,r4,512
    8e50:	85800217 	ldw	r22,8(r16)
    8e54:	10007626 	beq	r2,zero,9030 <__sfvwrite_r+0x300>
    8e58:	b027883a 	mov	r19,r22
    8e5c:	95809436 	bltu	r18,r22,90b0 <__sfvwrite_r+0x380>
    8e60:	2081200c 	andi	r2,r4,1152
    8e64:	10009f1e 	bne	r2,zero,90e4 <__sfvwrite_r+0x3b4>
    8e68:	81000017 	ldw	r4,0(r16)
    8e6c:	e00b883a 	mov	r5,fp
    8e70:	980d883a 	mov	r6,r19
    8e74:	00092a00 	call	92a0 <memmove>
    8e78:	81000217 	ldw	r4,8(r16)
    8e7c:	81400017 	ldw	r5,0(r16)
    8e80:	9005883a 	mov	r2,r18
    8e84:	2587c83a 	sub	r3,r4,r22
    8e88:	2ce7883a 	add	r19,r5,r19
    8e8c:	80c00215 	stw	r3,8(r16)
    8e90:	84c00015 	stw	r19,0(r16)
    8e94:	b8c00217 	ldw	r3,8(r23)
    8e98:	e0b9883a 	add	fp,fp,r2
    8e9c:	90a5c83a 	sub	r18,r18,r2
    8ea0:	1885c83a 	sub	r2,r3,r2
    8ea4:	b8800215 	stw	r2,8(r23)
    8ea8:	103fce26 	beq	r2,zero,8de4 <__alt_mem_Flash_flash_data+0xf4008de4>
    8eac:	8100030b 	ldhu	r4,12(r16)
    8eb0:	903fe61e 	bne	r18,zero,8e4c <__alt_mem_Flash_flash_data+0xf4008e4c>
    8eb4:	8f000017 	ldw	fp,0(r17)
    8eb8:	8c800117 	ldw	r18,4(r17)
    8ebc:	8c400204 	addi	r17,r17,8
    8ec0:	003fe106 	br	8e48 <__alt_mem_Flash_flash_data+0xf4008e48>
    8ec4:	8cc00017 	ldw	r19,0(r17)
    8ec8:	8c800117 	ldw	r18,4(r17)
    8ecc:	8c400204 	addi	r17,r17,8
    8ed0:	003fb306 	br	8da0 <__alt_mem_Flash_flash_data+0xf4008da0>
    8ed4:	0005883a 	mov	r2,zero
    8ed8:	f800283a 	ret
    8edc:	00a00034 	movhi	r2,32768
    8ee0:	10bfffc4 	addi	r2,r2,-1
    8ee4:	9009883a 	mov	r4,r18
    8ee8:	1480012e 	bgeu	r2,r18,8ef0 <__sfvwrite_r+0x1c0>
    8eec:	1009883a 	mov	r4,r2
    8ef0:	980b883a 	mov	r5,r19
    8ef4:	000a8b80 	call	a8b8 <__divsi3>
    8ef8:	81400717 	ldw	r5,28(r16)
    8efc:	80c00917 	ldw	r3,36(r16)
    8f00:	988f383a 	mul	r7,r19,r2
    8f04:	a009883a 	mov	r4,r20
    8f08:	e00d883a 	mov	r6,fp
    8f0c:	183ee83a 	callr	r3
    8f10:	00bfe016 	blt	zero,r2,8e94 <__alt_mem_Flash_flash_data+0xf4008e94>
    8f14:	8080030b 	ldhu	r2,12(r16)
    8f18:	10801014 	ori	r2,r2,64
    8f1c:	8080030d 	sth	r2,12(r16)
    8f20:	00bfffc4 	movi	r2,-1
    8f24:	003fb006 	br	8de8 <__alt_mem_Flash_flash_data+0xf4008de8>
    8f28:	0027883a 	mov	r19,zero
    8f2c:	0011883a 	mov	r8,zero
    8f30:	0039883a 	mov	fp,zero
    8f34:	0025883a 	mov	r18,zero
    8f38:	90001f26 	beq	r18,zero,8fb8 <__sfvwrite_r+0x288>
    8f3c:	40006026 	beq	r8,zero,90c0 <__sfvwrite_r+0x390>
    8f40:	982b883a 	mov	r21,r19
    8f44:	94c0012e 	bgeu	r18,r19,8f4c <__sfvwrite_r+0x21c>
    8f48:	902b883a 	mov	r21,r18
    8f4c:	81000017 	ldw	r4,0(r16)
    8f50:	80800417 	ldw	r2,16(r16)
    8f54:	a82d883a 	mov	r22,r21
    8f58:	81800217 	ldw	r6,8(r16)
    8f5c:	81c00517 	ldw	r7,20(r16)
    8f60:	1100022e 	bgeu	r2,r4,8f6c <__sfvwrite_r+0x23c>
    8f64:	31c7883a 	add	r3,r6,r7
    8f68:	1d401816 	blt	r3,r21,8fcc <__sfvwrite_r+0x29c>
    8f6c:	a9c04416 	blt	r21,r7,9080 <__sfvwrite_r+0x350>
    8f70:	80800917 	ldw	r2,36(r16)
    8f74:	81400717 	ldw	r5,28(r16)
    8f78:	a009883a 	mov	r4,r20
    8f7c:	da000115 	stw	r8,4(sp)
    8f80:	e00d883a 	mov	r6,fp
    8f84:	103ee83a 	callr	r2
    8f88:	102d883a 	mov	r22,r2
    8f8c:	da000117 	ldw	r8,4(sp)
    8f90:	00bfe00e 	bge	zero,r2,8f14 <__alt_mem_Flash_flash_data+0xf4008f14>
    8f94:	9da7c83a 	sub	r19,r19,r22
    8f98:	98001f26 	beq	r19,zero,9018 <__sfvwrite_r+0x2e8>
    8f9c:	b8800217 	ldw	r2,8(r23)
    8fa0:	e5b9883a 	add	fp,fp,r22
    8fa4:	95a5c83a 	sub	r18,r18,r22
    8fa8:	15adc83a 	sub	r22,r2,r22
    8fac:	bd800215 	stw	r22,8(r23)
    8fb0:	b03f8c26 	beq	r22,zero,8de4 <__alt_mem_Flash_flash_data+0xf4008de4>
    8fb4:	903fe11e 	bne	r18,zero,8f3c <__alt_mem_Flash_flash_data+0xf4008f3c>
    8fb8:	8f000017 	ldw	fp,0(r17)
    8fbc:	8c800117 	ldw	r18,4(r17)
    8fc0:	0011883a 	mov	r8,zero
    8fc4:	8c400204 	addi	r17,r17,8
    8fc8:	003fdb06 	br	8f38 <__alt_mem_Flash_flash_data+0xf4008f38>
    8fcc:	180d883a 	mov	r6,r3
    8fd0:	e00b883a 	mov	r5,fp
    8fd4:	da000115 	stw	r8,4(sp)
    8fd8:	d8c00015 	stw	r3,0(sp)
    8fdc:	00092a00 	call	92a0 <memmove>
    8fe0:	d8c00017 	ldw	r3,0(sp)
    8fe4:	80800017 	ldw	r2,0(r16)
    8fe8:	a009883a 	mov	r4,r20
    8fec:	800b883a 	mov	r5,r16
    8ff0:	10c5883a 	add	r2,r2,r3
    8ff4:	80800015 	stw	r2,0(r16)
    8ff8:	d8c00015 	stw	r3,0(sp)
    8ffc:	00049900 	call	4990 <_fflush_r>
    9000:	d8c00017 	ldw	r3,0(sp)
    9004:	da000117 	ldw	r8,4(sp)
    9008:	103fc21e 	bne	r2,zero,8f14 <__alt_mem_Flash_flash_data+0xf4008f14>
    900c:	182d883a 	mov	r22,r3
    9010:	9da7c83a 	sub	r19,r19,r22
    9014:	983fe11e 	bne	r19,zero,8f9c <__alt_mem_Flash_flash_data+0xf4008f9c>
    9018:	a009883a 	mov	r4,r20
    901c:	800b883a 	mov	r5,r16
    9020:	00049900 	call	4990 <_fflush_r>
    9024:	103fbb1e 	bne	r2,zero,8f14 <__alt_mem_Flash_flash_data+0xf4008f14>
    9028:	0011883a 	mov	r8,zero
    902c:	003fdb06 	br	8f9c <__alt_mem_Flash_flash_data+0xf4008f9c>
    9030:	81000017 	ldw	r4,0(r16)
    9034:	80800417 	ldw	r2,16(r16)
    9038:	11000236 	bltu	r2,r4,9044 <__sfvwrite_r+0x314>
    903c:	84c00517 	ldw	r19,20(r16)
    9040:	94ffa62e 	bgeu	r18,r19,8edc <__alt_mem_Flash_flash_data+0xf4008edc>
    9044:	9027883a 	mov	r19,r18
    9048:	b480012e 	bgeu	r22,r18,9050 <__sfvwrite_r+0x320>
    904c:	b027883a 	mov	r19,r22
    9050:	e00b883a 	mov	r5,fp
    9054:	980d883a 	mov	r6,r19
    9058:	00092a00 	call	92a0 <memmove>
    905c:	80800217 	ldw	r2,8(r16)
    9060:	80c00017 	ldw	r3,0(r16)
    9064:	14c5c83a 	sub	r2,r2,r19
    9068:	1cc7883a 	add	r3,r3,r19
    906c:	80800215 	stw	r2,8(r16)
    9070:	80c00015 	stw	r3,0(r16)
    9074:	10004326 	beq	r2,zero,9184 <__sfvwrite_r+0x454>
    9078:	9805883a 	mov	r2,r19
    907c:	003f8506 	br	8e94 <__alt_mem_Flash_flash_data+0xf4008e94>
    9080:	a80d883a 	mov	r6,r21
    9084:	e00b883a 	mov	r5,fp
    9088:	da000115 	stw	r8,4(sp)
    908c:	00092a00 	call	92a0 <memmove>
    9090:	80800217 	ldw	r2,8(r16)
    9094:	80c00017 	ldw	r3,0(r16)
    9098:	da000117 	ldw	r8,4(sp)
    909c:	1545c83a 	sub	r2,r2,r21
    90a0:	1d6b883a 	add	r21,r3,r21
    90a4:	80800215 	stw	r2,8(r16)
    90a8:	85400015 	stw	r21,0(r16)
    90ac:	003fb906 	br	8f94 <__alt_mem_Flash_flash_data+0xf4008f94>
    90b0:	81000017 	ldw	r4,0(r16)
    90b4:	902d883a 	mov	r22,r18
    90b8:	9027883a 	mov	r19,r18
    90bc:	003f6b06 	br	8e6c <__alt_mem_Flash_flash_data+0xf4008e6c>
    90c0:	e009883a 	mov	r4,fp
    90c4:	01400284 	movi	r5,10
    90c8:	900d883a 	mov	r6,r18
    90cc:	0005d980 	call	5d98 <memchr>
    90d0:	10003e26 	beq	r2,zero,91cc <__sfvwrite_r+0x49c>
    90d4:	10800044 	addi	r2,r2,1
    90d8:	1727c83a 	sub	r19,r2,fp
    90dc:	02000044 	movi	r8,1
    90e0:	003f9706 	br	8f40 <__alt_mem_Flash_flash_data+0xf4008f40>
    90e4:	80800517 	ldw	r2,20(r16)
    90e8:	81400417 	ldw	r5,16(r16)
    90ec:	80c00017 	ldw	r3,0(r16)
    90f0:	10a7883a 	add	r19,r2,r2
    90f4:	9885883a 	add	r2,r19,r2
    90f8:	1026d7fa 	srli	r19,r2,31
    90fc:	196bc83a 	sub	r21,r3,r5
    9100:	a9800044 	addi	r6,r21,1
    9104:	9885883a 	add	r2,r19,r2
    9108:	1027d07a 	srai	r19,r2,1
    910c:	3485883a 	add	r2,r6,r18
    9110:	980d883a 	mov	r6,r19
    9114:	9880022e 	bgeu	r19,r2,9120 <__sfvwrite_r+0x3f0>
    9118:	1027883a 	mov	r19,r2
    911c:	100d883a 	mov	r6,r2
    9120:	2101000c 	andi	r4,r4,1024
    9124:	20001c26 	beq	r4,zero,9198 <__sfvwrite_r+0x468>
    9128:	a009883a 	mov	r4,r20
    912c:	300b883a 	mov	r5,r6
    9130:	00055f00 	call	55f0 <_malloc_r>
    9134:	102d883a 	mov	r22,r2
    9138:	10002926 	beq	r2,zero,91e0 <__sfvwrite_r+0x4b0>
    913c:	81400417 	ldw	r5,16(r16)
    9140:	1009883a 	mov	r4,r2
    9144:	a80d883a 	mov	r6,r21
    9148:	0005e800 	call	5e80 <memcpy>
    914c:	8080030b 	ldhu	r2,12(r16)
    9150:	00fedfc4 	movi	r3,-1153
    9154:	10c4703a 	and	r2,r2,r3
    9158:	10802014 	ori	r2,r2,128
    915c:	8080030d 	sth	r2,12(r16)
    9160:	b549883a 	add	r4,r22,r21
    9164:	9d4bc83a 	sub	r5,r19,r21
    9168:	85800415 	stw	r22,16(r16)
    916c:	84c00515 	stw	r19,20(r16)
    9170:	81000015 	stw	r4,0(r16)
    9174:	902d883a 	mov	r22,r18
    9178:	81400215 	stw	r5,8(r16)
    917c:	9027883a 	mov	r19,r18
    9180:	003f3a06 	br	8e6c <__alt_mem_Flash_flash_data+0xf4008e6c>
    9184:	a009883a 	mov	r4,r20
    9188:	800b883a 	mov	r5,r16
    918c:	00049900 	call	4990 <_fflush_r>
    9190:	103fb926 	beq	r2,zero,9078 <__alt_mem_Flash_flash_data+0xf4009078>
    9194:	003f5f06 	br	8f14 <__alt_mem_Flash_flash_data+0xf4008f14>
    9198:	a009883a 	mov	r4,r20
    919c:	00094580 	call	9458 <_realloc_r>
    91a0:	102d883a 	mov	r22,r2
    91a4:	103fee1e 	bne	r2,zero,9160 <__alt_mem_Flash_flash_data+0xf4009160>
    91a8:	81400417 	ldw	r5,16(r16)
    91ac:	a009883a 	mov	r4,r20
    91b0:	0004ee00 	call	4ee0 <_free_r>
    91b4:	8080030b 	ldhu	r2,12(r16)
    91b8:	00ffdfc4 	movi	r3,-129
    91bc:	1884703a 	and	r2,r3,r2
    91c0:	00c00304 	movi	r3,12
    91c4:	a0c00015 	stw	r3,0(r20)
    91c8:	003f5306 	br	8f18 <__alt_mem_Flash_flash_data+0xf4008f18>
    91cc:	94c00044 	addi	r19,r18,1
    91d0:	02000044 	movi	r8,1
    91d4:	003f5a06 	br	8f40 <__alt_mem_Flash_flash_data+0xf4008f40>
    91d8:	00bfffc4 	movi	r2,-1
    91dc:	003f0206 	br	8de8 <__alt_mem_Flash_flash_data+0xf4008de8>
    91e0:	00800304 	movi	r2,12
    91e4:	a0800015 	stw	r2,0(r20)
    91e8:	8080030b 	ldhu	r2,12(r16)
    91ec:	003f4a06 	br	8f18 <__alt_mem_Flash_flash_data+0xf4008f18>

000091f0 <_isatty_r>:
    91f0:	defffd04 	addi	sp,sp,-12
    91f4:	dc000015 	stw	r16,0(sp)
    91f8:	040000b4 	movhi	r16,2
    91fc:	dc400115 	stw	r17,4(sp)
    9200:	84368304 	addi	r16,r16,-9716
    9204:	2023883a 	mov	r17,r4
    9208:	2809883a 	mov	r4,r5
    920c:	dfc00215 	stw	ra,8(sp)
    9210:	80000015 	stw	zero,0(r16)
    9214:	000d2140 	call	d214 <isatty>
    9218:	00ffffc4 	movi	r3,-1
    921c:	10c00526 	beq	r2,r3,9234 <_isatty_r+0x44>
    9220:	dfc00217 	ldw	ra,8(sp)
    9224:	dc400117 	ldw	r17,4(sp)
    9228:	dc000017 	ldw	r16,0(sp)
    922c:	dec00304 	addi	sp,sp,12
    9230:	f800283a 	ret
    9234:	80c00017 	ldw	r3,0(r16)
    9238:	183ff926 	beq	r3,zero,9220 <__alt_mem_Flash_flash_data+0xf4009220>
    923c:	88c00015 	stw	r3,0(r17)
    9240:	003ff706 	br	9220 <__alt_mem_Flash_flash_data+0xf4009220>

00009244 <_lseek_r>:
    9244:	defffd04 	addi	sp,sp,-12
    9248:	dc000015 	stw	r16,0(sp)
    924c:	040000b4 	movhi	r16,2
    9250:	dc400115 	stw	r17,4(sp)
    9254:	84368304 	addi	r16,r16,-9716
    9258:	2023883a 	mov	r17,r4
    925c:	2809883a 	mov	r4,r5
    9260:	300b883a 	mov	r5,r6
    9264:	380d883a 	mov	r6,r7
    9268:	dfc00215 	stw	ra,8(sp)
    926c:	80000015 	stw	zero,0(r16)
    9270:	000d3ec0 	call	d3ec <lseek>
    9274:	00ffffc4 	movi	r3,-1
    9278:	10c00526 	beq	r2,r3,9290 <_lseek_r+0x4c>
    927c:	dfc00217 	ldw	ra,8(sp)
    9280:	dc400117 	ldw	r17,4(sp)
    9284:	dc000017 	ldw	r16,0(sp)
    9288:	dec00304 	addi	sp,sp,12
    928c:	f800283a 	ret
    9290:	80c00017 	ldw	r3,0(r16)
    9294:	183ff926 	beq	r3,zero,927c <__alt_mem_Flash_flash_data+0xf400927c>
    9298:	88c00015 	stw	r3,0(r17)
    929c:	003ff706 	br	927c <__alt_mem_Flash_flash_data+0xf400927c>

000092a0 <memmove>:
    92a0:	2005883a 	mov	r2,r4
    92a4:	29000b2e 	bgeu	r5,r4,92d4 <memmove+0x34>
    92a8:	298f883a 	add	r7,r5,r6
    92ac:	21c0092e 	bgeu	r4,r7,92d4 <memmove+0x34>
    92b0:	2187883a 	add	r3,r4,r6
    92b4:	198bc83a 	sub	r5,r3,r6
    92b8:	30004b26 	beq	r6,zero,93e8 <memmove+0x148>
    92bc:	39ffffc4 	addi	r7,r7,-1
    92c0:	39000003 	ldbu	r4,0(r7)
    92c4:	18ffffc4 	addi	r3,r3,-1
    92c8:	19000005 	stb	r4,0(r3)
    92cc:	197ffb1e 	bne	r3,r5,92bc <__alt_mem_Flash_flash_data+0xf40092bc>
    92d0:	f800283a 	ret
    92d4:	00c003c4 	movi	r3,15
    92d8:	1980412e 	bgeu	r3,r6,93e0 <memmove+0x140>
    92dc:	1146b03a 	or	r3,r2,r5
    92e0:	18c000cc 	andi	r3,r3,3
    92e4:	1800411e 	bne	r3,zero,93ec <memmove+0x14c>
    92e8:	33fffc04 	addi	r15,r6,-16
    92ec:	781ed13a 	srli	r15,r15,4
    92f0:	28c00104 	addi	r3,r5,4
    92f4:	13400104 	addi	r13,r2,4
    92f8:	781c913a 	slli	r14,r15,4
    92fc:	2b000204 	addi	r12,r5,8
    9300:	12c00204 	addi	r11,r2,8
    9304:	73800504 	addi	r14,r14,20
    9308:	2a800304 	addi	r10,r5,12
    930c:	12400304 	addi	r9,r2,12
    9310:	2b9d883a 	add	r14,r5,r14
    9314:	2811883a 	mov	r8,r5
    9318:	100f883a 	mov	r7,r2
    931c:	41000017 	ldw	r4,0(r8)
    9320:	39c00404 	addi	r7,r7,16
    9324:	18c00404 	addi	r3,r3,16
    9328:	393ffc15 	stw	r4,-16(r7)
    932c:	193ffc17 	ldw	r4,-16(r3)
    9330:	6b400404 	addi	r13,r13,16
    9334:	5ac00404 	addi	r11,r11,16
    9338:	693ffc15 	stw	r4,-16(r13)
    933c:	61000017 	ldw	r4,0(r12)
    9340:	4a400404 	addi	r9,r9,16
    9344:	42000404 	addi	r8,r8,16
    9348:	593ffc15 	stw	r4,-16(r11)
    934c:	51000017 	ldw	r4,0(r10)
    9350:	63000404 	addi	r12,r12,16
    9354:	52800404 	addi	r10,r10,16
    9358:	493ffc15 	stw	r4,-16(r9)
    935c:	1bbfef1e 	bne	r3,r14,931c <__alt_mem_Flash_flash_data+0xf400931c>
    9360:	79000044 	addi	r4,r15,1
    9364:	2008913a 	slli	r4,r4,4
    9368:	328003cc 	andi	r10,r6,15
    936c:	02c000c4 	movi	r11,3
    9370:	1107883a 	add	r3,r2,r4
    9374:	290b883a 	add	r5,r5,r4
    9378:	5a801e2e 	bgeu	r11,r10,93f4 <memmove+0x154>
    937c:	1813883a 	mov	r9,r3
    9380:	2811883a 	mov	r8,r5
    9384:	500f883a 	mov	r7,r10
    9388:	41000017 	ldw	r4,0(r8)
    938c:	4a400104 	addi	r9,r9,4
    9390:	39ffff04 	addi	r7,r7,-4
    9394:	493fff15 	stw	r4,-4(r9)
    9398:	42000104 	addi	r8,r8,4
    939c:	59fffa36 	bltu	r11,r7,9388 <__alt_mem_Flash_flash_data+0xf4009388>
    93a0:	513fff04 	addi	r4,r10,-4
    93a4:	2008d0ba 	srli	r4,r4,2
    93a8:	318000cc 	andi	r6,r6,3
    93ac:	21000044 	addi	r4,r4,1
    93b0:	2109883a 	add	r4,r4,r4
    93b4:	2109883a 	add	r4,r4,r4
    93b8:	1907883a 	add	r3,r3,r4
    93bc:	290b883a 	add	r5,r5,r4
    93c0:	30000926 	beq	r6,zero,93e8 <memmove+0x148>
    93c4:	198d883a 	add	r6,r3,r6
    93c8:	29c00003 	ldbu	r7,0(r5)
    93cc:	18c00044 	addi	r3,r3,1
    93d0:	29400044 	addi	r5,r5,1
    93d4:	19ffffc5 	stb	r7,-1(r3)
    93d8:	19bffb1e 	bne	r3,r6,93c8 <__alt_mem_Flash_flash_data+0xf40093c8>
    93dc:	f800283a 	ret
    93e0:	1007883a 	mov	r3,r2
    93e4:	003ff606 	br	93c0 <__alt_mem_Flash_flash_data+0xf40093c0>
    93e8:	f800283a 	ret
    93ec:	1007883a 	mov	r3,r2
    93f0:	003ff406 	br	93c4 <__alt_mem_Flash_flash_data+0xf40093c4>
    93f4:	500d883a 	mov	r6,r10
    93f8:	003ff106 	br	93c0 <__alt_mem_Flash_flash_data+0xf40093c0>

000093fc <_read_r>:
    93fc:	defffd04 	addi	sp,sp,-12
    9400:	dc000015 	stw	r16,0(sp)
    9404:	040000b4 	movhi	r16,2
    9408:	dc400115 	stw	r17,4(sp)
    940c:	84368304 	addi	r16,r16,-9716
    9410:	2023883a 	mov	r17,r4
    9414:	2809883a 	mov	r4,r5
    9418:	300b883a 	mov	r5,r6
    941c:	380d883a 	mov	r6,r7
    9420:	dfc00215 	stw	ra,8(sp)
    9424:	80000015 	stw	zero,0(r16)
    9428:	000d5e40 	call	d5e4 <read>
    942c:	00ffffc4 	movi	r3,-1
    9430:	10c00526 	beq	r2,r3,9448 <_read_r+0x4c>
    9434:	dfc00217 	ldw	ra,8(sp)
    9438:	dc400117 	ldw	r17,4(sp)
    943c:	dc000017 	ldw	r16,0(sp)
    9440:	dec00304 	addi	sp,sp,12
    9444:	f800283a 	ret
    9448:	80c00017 	ldw	r3,0(r16)
    944c:	183ff926 	beq	r3,zero,9434 <__alt_mem_Flash_flash_data+0xf4009434>
    9450:	88c00015 	stw	r3,0(r17)
    9454:	003ff706 	br	9434 <__alt_mem_Flash_flash_data+0xf4009434>

00009458 <_realloc_r>:
    9458:	defff604 	addi	sp,sp,-40
    945c:	dd000415 	stw	r20,16(sp)
    9460:	dc400115 	stw	r17,4(sp)
    9464:	dfc00915 	stw	ra,36(sp)
    9468:	df000815 	stw	fp,32(sp)
    946c:	ddc00715 	stw	r23,28(sp)
    9470:	dd800615 	stw	r22,24(sp)
    9474:	dd400515 	stw	r21,20(sp)
    9478:	dcc00315 	stw	r19,12(sp)
    947c:	dc800215 	stw	r18,8(sp)
    9480:	dc000015 	stw	r16,0(sp)
    9484:	2829883a 	mov	r20,r5
    9488:	3023883a 	mov	r17,r6
    948c:	2800ad26 	beq	r5,zero,9744 <_realloc_r+0x2ec>
    9490:	2025883a 	mov	r18,r4
    9494:	000da540 	call	da54 <__malloc_lock>
    9498:	a0ffff17 	ldw	r3,-4(r20)
    949c:	043fff04 	movi	r16,-4
    94a0:	890002c4 	addi	r4,r17,11
    94a4:	01c00584 	movi	r7,22
    94a8:	a57ffe04 	addi	r21,r20,-8
    94ac:	1c20703a 	and	r16,r3,r16
    94b0:	39001d2e 	bgeu	r7,r4,9528 <_realloc_r+0xd0>
    94b4:	05bffe04 	movi	r22,-8
    94b8:	25ac703a 	and	r22,r4,r22
    94bc:	b00f883a 	mov	r7,r22
    94c0:	b0006516 	blt	r22,zero,9658 <_realloc_r+0x200>
    94c4:	b4406436 	bltu	r22,r17,9658 <_realloc_r+0x200>
    94c8:	81c01a0e 	bge	r16,r7,9534 <_realloc_r+0xdc>
    94cc:	070000b4 	movhi	fp,2
    94d0:	e7282304 	addi	fp,fp,-24436
    94d4:	e1400217 	ldw	r5,8(fp)
    94d8:	ac11883a 	add	r8,r21,r16
    94dc:	2a006226 	beq	r5,r8,9668 <_realloc_r+0x210>
    94e0:	41800117 	ldw	r6,4(r8)
    94e4:	027fff84 	movi	r9,-2
    94e8:	3252703a 	and	r9,r6,r9
    94ec:	4253883a 	add	r9,r8,r9
    94f0:	49000117 	ldw	r4,4(r9)
    94f4:	2100004c 	andi	r4,r4,1
    94f8:	2000281e 	bne	r4,zero,959c <_realloc_r+0x144>
    94fc:	00bfff04 	movi	r2,-4
    9500:	3084703a 	and	r2,r6,r2
    9504:	1409883a 	add	r4,r2,r16
    9508:	21c05e16 	blt	r4,r7,9684 <_realloc_r+0x22c>
    950c:	40800317 	ldw	r2,12(r8)
    9510:	41400217 	ldw	r5,8(r8)
    9514:	a023883a 	mov	r17,r20
    9518:	2021883a 	mov	r16,r4
    951c:	28800315 	stw	r2,12(r5)
    9520:	11400215 	stw	r5,8(r2)
    9524:	00000406 	br	9538 <_realloc_r+0xe0>
    9528:	01c00404 	movi	r7,16
    952c:	382d883a 	mov	r22,r7
    9530:	003fe406 	br	94c4 <__alt_mem_Flash_flash_data+0xf40094c4>
    9534:	a023883a 	mov	r17,r20
    9538:	858fc83a 	sub	r7,r16,r22
    953c:	008003c4 	movi	r2,15
    9540:	18c0004c 	andi	r3,r3,1
    9544:	11c07236 	bltu	r2,r7,9710 <_realloc_r+0x2b8>
    9548:	1c06b03a 	or	r3,r3,r16
    954c:	a8c00115 	stw	r3,4(r21)
    9550:	ac21883a 	add	r16,r21,r16
    9554:	80800117 	ldw	r2,4(r16)
    9558:	10800054 	ori	r2,r2,1
    955c:	80800115 	stw	r2,4(r16)
    9560:	9009883a 	mov	r4,r18
    9564:	000db740 	call	db74 <__malloc_unlock>
    9568:	8805883a 	mov	r2,r17
    956c:	dfc00917 	ldw	ra,36(sp)
    9570:	df000817 	ldw	fp,32(sp)
    9574:	ddc00717 	ldw	r23,28(sp)
    9578:	dd800617 	ldw	r22,24(sp)
    957c:	dd400517 	ldw	r21,20(sp)
    9580:	dd000417 	ldw	r20,16(sp)
    9584:	dcc00317 	ldw	r19,12(sp)
    9588:	dc800217 	ldw	r18,8(sp)
    958c:	dc400117 	ldw	r17,4(sp)
    9590:	dc000017 	ldw	r16,0(sp)
    9594:	dec00a04 	addi	sp,sp,40
    9598:	f800283a 	ret
    959c:	18c0004c 	andi	r3,r3,1
    95a0:	1800081e 	bne	r3,zero,95c4 <_realloc_r+0x16c>
    95a4:	a4fffe17 	ldw	r19,-8(r20)
    95a8:	00bfff04 	movi	r2,-4
    95ac:	ace7c83a 	sub	r19,r21,r19
    95b0:	98c00117 	ldw	r3,4(r19)
    95b4:	1886703a 	and	r3,r3,r2
    95b8:	98000226 	beq	r19,zero,95c4 <_realloc_r+0x16c>
    95bc:	1c2f883a 	add	r23,r3,r16
    95c0:	b9c06d0e 	bge	r23,r7,9778 <_realloc_r+0x320>
    95c4:	880b883a 	mov	r5,r17
    95c8:	9009883a 	mov	r4,r18
    95cc:	00055f00 	call	55f0 <_malloc_r>
    95d0:	1023883a 	mov	r17,r2
    95d4:	1000ef26 	beq	r2,zero,9994 <_realloc_r+0x53c>
    95d8:	a0ffff17 	ldw	r3,-4(r20)
    95dc:	113ffe04 	addi	r4,r2,-8
    95e0:	00bfff84 	movi	r2,-2
    95e4:	1884703a 	and	r2,r3,r2
    95e8:	a885883a 	add	r2,r21,r2
    95ec:	2080bf26 	beq	r4,r2,98ec <_realloc_r+0x494>
    95f0:	81bfff04 	addi	r6,r16,-4
    95f4:	00800904 	movi	r2,36
    95f8:	11808936 	bltu	r2,r6,9820 <_realloc_r+0x3c8>
    95fc:	00c004c4 	movi	r3,19
    9600:	19806c2e 	bgeu	r3,r6,97b4 <_realloc_r+0x35c>
    9604:	a0c00017 	ldw	r3,0(r20)
    9608:	88c00015 	stw	r3,0(r17)
    960c:	a0c00117 	ldw	r3,4(r20)
    9610:	88c00115 	stw	r3,4(r17)
    9614:	00c006c4 	movi	r3,27
    9618:	1980ac36 	bltu	r3,r6,98cc <_realloc_r+0x474>
    961c:	88800204 	addi	r2,r17,8
    9620:	a0c00204 	addi	r3,r20,8
    9624:	19000017 	ldw	r4,0(r3)
    9628:	11000015 	stw	r4,0(r2)
    962c:	19000117 	ldw	r4,4(r3)
    9630:	11000115 	stw	r4,4(r2)
    9634:	18c00217 	ldw	r3,8(r3)
    9638:	10c00215 	stw	r3,8(r2)
    963c:	a00b883a 	mov	r5,r20
    9640:	9009883a 	mov	r4,r18
    9644:	0004ee00 	call	4ee0 <_free_r>
    9648:	9009883a 	mov	r4,r18
    964c:	000db740 	call	db74 <__malloc_unlock>
    9650:	8805883a 	mov	r2,r17
    9654:	003fc506 	br	956c <__alt_mem_Flash_flash_data+0xf400956c>
    9658:	00800304 	movi	r2,12
    965c:	90800015 	stw	r2,0(r18)
    9660:	0005883a 	mov	r2,zero
    9664:	003fc106 	br	956c <__alt_mem_Flash_flash_data+0xf400956c>
    9668:	29800117 	ldw	r6,4(r5)
    966c:	00bfff04 	movi	r2,-4
    9670:	b1000404 	addi	r4,r22,16
    9674:	3084703a 	and	r2,r6,r2
    9678:	140d883a 	add	r6,r2,r16
    967c:	31005b0e 	bge	r6,r4,97ec <_realloc_r+0x394>
    9680:	2811883a 	mov	r8,r5
    9684:	18c0004c 	andi	r3,r3,1
    9688:	183fce1e 	bne	r3,zero,95c4 <__alt_mem_Flash_flash_data+0xf40095c4>
    968c:	a4fffe17 	ldw	r19,-8(r20)
    9690:	00ffff04 	movi	r3,-4
    9694:	ace7c83a 	sub	r19,r21,r19
    9698:	99000117 	ldw	r4,4(r19)
    969c:	20c6703a 	and	r3,r4,r3
    96a0:	403fc526 	beq	r8,zero,95b8 <__alt_mem_Flash_flash_data+0xf40095b8>
    96a4:	1c2f883a 	add	r23,r3,r16
    96a8:	b8af883a 	add	r23,r23,r2
    96ac:	41406026 	beq	r8,r5,9830 <_realloc_r+0x3d8>
    96b0:	b9ffc116 	blt	r23,r7,95b8 <__alt_mem_Flash_flash_data+0xf40095b8>
    96b4:	40c00217 	ldw	r3,8(r8)
    96b8:	40800317 	ldw	r2,12(r8)
    96bc:	81bfff04 	addi	r6,r16,-4
    96c0:	01000904 	movi	r4,36
    96c4:	18800315 	stw	r2,12(r3)
    96c8:	10c00215 	stw	r3,8(r2)
    96cc:	99400217 	ldw	r5,8(r19)
    96d0:	98c00317 	ldw	r3,12(r19)
    96d4:	9c400204 	addi	r17,r19,8
    96d8:	28c00315 	stw	r3,12(r5)
    96dc:	19400215 	stw	r5,8(r3)
    96e0:	21802d36 	bltu	r4,r6,9798 <_realloc_r+0x340>
    96e4:	008004c4 	movi	r2,19
    96e8:	1180352e 	bgeu	r2,r6,97c0 <_realloc_r+0x368>
    96ec:	a0800017 	ldw	r2,0(r20)
    96f0:	98800215 	stw	r2,8(r19)
    96f4:	a0800117 	ldw	r2,4(r20)
    96f8:	98800315 	stw	r2,12(r19)
    96fc:	008006c4 	movi	r2,27
    9700:	11808036 	bltu	r2,r6,9904 <_realloc_r+0x4ac>
    9704:	98c00404 	addi	r3,r19,16
    9708:	a5000204 	addi	r20,r20,8
    970c:	00002d06 	br	97c4 <_realloc_r+0x36c>
    9710:	1d86b03a 	or	r3,r3,r22
    9714:	ad8b883a 	add	r5,r21,r22
    9718:	a8c00115 	stw	r3,4(r21)
    971c:	38800054 	ori	r2,r7,1
    9720:	28800115 	stw	r2,4(r5)
    9724:	29cf883a 	add	r7,r5,r7
    9728:	38800117 	ldw	r2,4(r7)
    972c:	9009883a 	mov	r4,r18
    9730:	29400204 	addi	r5,r5,8
    9734:	10800054 	ori	r2,r2,1
    9738:	38800115 	stw	r2,4(r7)
    973c:	0004ee00 	call	4ee0 <_free_r>
    9740:	003f8706 	br	9560 <__alt_mem_Flash_flash_data+0xf4009560>
    9744:	300b883a 	mov	r5,r6
    9748:	dfc00917 	ldw	ra,36(sp)
    974c:	df000817 	ldw	fp,32(sp)
    9750:	ddc00717 	ldw	r23,28(sp)
    9754:	dd800617 	ldw	r22,24(sp)
    9758:	dd400517 	ldw	r21,20(sp)
    975c:	dd000417 	ldw	r20,16(sp)
    9760:	dcc00317 	ldw	r19,12(sp)
    9764:	dc800217 	ldw	r18,8(sp)
    9768:	dc400117 	ldw	r17,4(sp)
    976c:	dc000017 	ldw	r16,0(sp)
    9770:	dec00a04 	addi	sp,sp,40
    9774:	00055f01 	jmpi	55f0 <_malloc_r>
    9778:	98800317 	ldw	r2,12(r19)
    977c:	98c00217 	ldw	r3,8(r19)
    9780:	81bfff04 	addi	r6,r16,-4
    9784:	01000904 	movi	r4,36
    9788:	18800315 	stw	r2,12(r3)
    978c:	10c00215 	stw	r3,8(r2)
    9790:	9c400204 	addi	r17,r19,8
    9794:	21bfd32e 	bgeu	r4,r6,96e4 <__alt_mem_Flash_flash_data+0xf40096e4>
    9798:	8809883a 	mov	r4,r17
    979c:	a00b883a 	mov	r5,r20
    97a0:	00092a00 	call	92a0 <memmove>
    97a4:	98c00117 	ldw	r3,4(r19)
    97a8:	b821883a 	mov	r16,r23
    97ac:	982b883a 	mov	r21,r19
    97b0:	003f6106 	br	9538 <__alt_mem_Flash_flash_data+0xf4009538>
    97b4:	8805883a 	mov	r2,r17
    97b8:	a007883a 	mov	r3,r20
    97bc:	003f9906 	br	9624 <__alt_mem_Flash_flash_data+0xf4009624>
    97c0:	8807883a 	mov	r3,r17
    97c4:	a0800017 	ldw	r2,0(r20)
    97c8:	b821883a 	mov	r16,r23
    97cc:	982b883a 	mov	r21,r19
    97d0:	18800015 	stw	r2,0(r3)
    97d4:	a0800117 	ldw	r2,4(r20)
    97d8:	18800115 	stw	r2,4(r3)
    97dc:	a0800217 	ldw	r2,8(r20)
    97e0:	18800215 	stw	r2,8(r3)
    97e4:	98c00117 	ldw	r3,4(r19)
    97e8:	003f5306 	br	9538 <__alt_mem_Flash_flash_data+0xf4009538>
    97ec:	adab883a 	add	r21,r21,r22
    97f0:	3585c83a 	sub	r2,r6,r22
    97f4:	e5400215 	stw	r21,8(fp)
    97f8:	10800054 	ori	r2,r2,1
    97fc:	a8800115 	stw	r2,4(r21)
    9800:	a0bfff17 	ldw	r2,-4(r20)
    9804:	9009883a 	mov	r4,r18
    9808:	1080004c 	andi	r2,r2,1
    980c:	b0acb03a 	or	r22,r22,r2
    9810:	a5bfff15 	stw	r22,-4(r20)
    9814:	000db740 	call	db74 <__malloc_unlock>
    9818:	a005883a 	mov	r2,r20
    981c:	003f5306 	br	956c <__alt_mem_Flash_flash_data+0xf400956c>
    9820:	8809883a 	mov	r4,r17
    9824:	a00b883a 	mov	r5,r20
    9828:	00092a00 	call	92a0 <memmove>
    982c:	003f8306 	br	963c <__alt_mem_Flash_flash_data+0xf400963c>
    9830:	b0800404 	addi	r2,r22,16
    9834:	b8bf6016 	blt	r23,r2,95b8 <__alt_mem_Flash_flash_data+0xf40095b8>
    9838:	98800317 	ldw	r2,12(r19)
    983c:	98c00217 	ldw	r3,8(r19)
    9840:	81bfff04 	addi	r6,r16,-4
    9844:	01000904 	movi	r4,36
    9848:	18800315 	stw	r2,12(r3)
    984c:	10c00215 	stw	r3,8(r2)
    9850:	9c400204 	addi	r17,r19,8
    9854:	21804336 	bltu	r4,r6,9964 <_realloc_r+0x50c>
    9858:	008004c4 	movi	r2,19
    985c:	11803f2e 	bgeu	r2,r6,995c <_realloc_r+0x504>
    9860:	a0800017 	ldw	r2,0(r20)
    9864:	98800215 	stw	r2,8(r19)
    9868:	a0800117 	ldw	r2,4(r20)
    986c:	98800315 	stw	r2,12(r19)
    9870:	008006c4 	movi	r2,27
    9874:	11803f36 	bltu	r2,r6,9974 <_realloc_r+0x51c>
    9878:	98800404 	addi	r2,r19,16
    987c:	a5000204 	addi	r20,r20,8
    9880:	a0c00017 	ldw	r3,0(r20)
    9884:	10c00015 	stw	r3,0(r2)
    9888:	a0c00117 	ldw	r3,4(r20)
    988c:	10c00115 	stw	r3,4(r2)
    9890:	a0c00217 	ldw	r3,8(r20)
    9894:	10c00215 	stw	r3,8(r2)
    9898:	9d87883a 	add	r3,r19,r22
    989c:	bd85c83a 	sub	r2,r23,r22
    98a0:	e0c00215 	stw	r3,8(fp)
    98a4:	10800054 	ori	r2,r2,1
    98a8:	18800115 	stw	r2,4(r3)
    98ac:	98800117 	ldw	r2,4(r19)
    98b0:	9009883a 	mov	r4,r18
    98b4:	1080004c 	andi	r2,r2,1
    98b8:	b0acb03a 	or	r22,r22,r2
    98bc:	9d800115 	stw	r22,4(r19)
    98c0:	000db740 	call	db74 <__malloc_unlock>
    98c4:	8805883a 	mov	r2,r17
    98c8:	003f2806 	br	956c <__alt_mem_Flash_flash_data+0xf400956c>
    98cc:	a0c00217 	ldw	r3,8(r20)
    98d0:	88c00215 	stw	r3,8(r17)
    98d4:	a0c00317 	ldw	r3,12(r20)
    98d8:	88c00315 	stw	r3,12(r17)
    98dc:	30801126 	beq	r6,r2,9924 <_realloc_r+0x4cc>
    98e0:	88800404 	addi	r2,r17,16
    98e4:	a0c00404 	addi	r3,r20,16
    98e8:	003f4e06 	br	9624 <__alt_mem_Flash_flash_data+0xf4009624>
    98ec:	893fff17 	ldw	r4,-4(r17)
    98f0:	00bfff04 	movi	r2,-4
    98f4:	a023883a 	mov	r17,r20
    98f8:	2084703a 	and	r2,r4,r2
    98fc:	80a1883a 	add	r16,r16,r2
    9900:	003f0d06 	br	9538 <__alt_mem_Flash_flash_data+0xf4009538>
    9904:	a0800217 	ldw	r2,8(r20)
    9908:	98800415 	stw	r2,16(r19)
    990c:	a0800317 	ldw	r2,12(r20)
    9910:	98800515 	stw	r2,20(r19)
    9914:	31000a26 	beq	r6,r4,9940 <_realloc_r+0x4e8>
    9918:	98c00604 	addi	r3,r19,24
    991c:	a5000404 	addi	r20,r20,16
    9920:	003fa806 	br	97c4 <__alt_mem_Flash_flash_data+0xf40097c4>
    9924:	a1000417 	ldw	r4,16(r20)
    9928:	88800604 	addi	r2,r17,24
    992c:	a0c00604 	addi	r3,r20,24
    9930:	89000415 	stw	r4,16(r17)
    9934:	a1000517 	ldw	r4,20(r20)
    9938:	89000515 	stw	r4,20(r17)
    993c:	003f3906 	br	9624 <__alt_mem_Flash_flash_data+0xf4009624>
    9940:	a0800417 	ldw	r2,16(r20)
    9944:	a5000604 	addi	r20,r20,24
    9948:	98c00804 	addi	r3,r19,32
    994c:	98800615 	stw	r2,24(r19)
    9950:	a0bfff17 	ldw	r2,-4(r20)
    9954:	98800715 	stw	r2,28(r19)
    9958:	003f9a06 	br	97c4 <__alt_mem_Flash_flash_data+0xf40097c4>
    995c:	8805883a 	mov	r2,r17
    9960:	003fc706 	br	9880 <__alt_mem_Flash_flash_data+0xf4009880>
    9964:	8809883a 	mov	r4,r17
    9968:	a00b883a 	mov	r5,r20
    996c:	00092a00 	call	92a0 <memmove>
    9970:	003fc906 	br	9898 <__alt_mem_Flash_flash_data+0xf4009898>
    9974:	a0800217 	ldw	r2,8(r20)
    9978:	98800415 	stw	r2,16(r19)
    997c:	a0800317 	ldw	r2,12(r20)
    9980:	98800515 	stw	r2,20(r19)
    9984:	31000726 	beq	r6,r4,99a4 <_realloc_r+0x54c>
    9988:	98800604 	addi	r2,r19,24
    998c:	a5000404 	addi	r20,r20,16
    9990:	003fbb06 	br	9880 <__alt_mem_Flash_flash_data+0xf4009880>
    9994:	9009883a 	mov	r4,r18
    9998:	000db740 	call	db74 <__malloc_unlock>
    999c:	0005883a 	mov	r2,zero
    99a0:	003ef206 	br	956c <__alt_mem_Flash_flash_data+0xf400956c>
    99a4:	a0c00417 	ldw	r3,16(r20)
    99a8:	a5000604 	addi	r20,r20,24
    99ac:	98800804 	addi	r2,r19,32
    99b0:	98c00615 	stw	r3,24(r19)
    99b4:	a0ffff17 	ldw	r3,-4(r20)
    99b8:	98c00715 	stw	r3,28(r19)
    99bc:	003fb006 	br	9880 <__alt_mem_Flash_flash_data+0xf4009880>

000099c0 <__swbuf_r>:
    99c0:	defffc04 	addi	sp,sp,-16
    99c4:	dc800215 	stw	r18,8(sp)
    99c8:	dc400115 	stw	r17,4(sp)
    99cc:	dc000015 	stw	r16,0(sp)
    99d0:	dfc00315 	stw	ra,12(sp)
    99d4:	2025883a 	mov	r18,r4
    99d8:	2823883a 	mov	r17,r5
    99dc:	3021883a 	mov	r16,r6
    99e0:	20000226 	beq	r4,zero,99ec <__swbuf_r+0x2c>
    99e4:	20800e17 	ldw	r2,56(r4)
    99e8:	10004126 	beq	r2,zero,9af0 <__swbuf_r+0x130>
    99ec:	80c00617 	ldw	r3,24(r16)
    99f0:	8180030b 	ldhu	r6,12(r16)
    99f4:	80c00215 	stw	r3,8(r16)
    99f8:	30c0020c 	andi	r3,r6,8
    99fc:	18003526 	beq	r3,zero,9ad4 <__swbuf_r+0x114>
    9a00:	80c00417 	ldw	r3,16(r16)
    9a04:	18003326 	beq	r3,zero,9ad4 <__swbuf_r+0x114>
    9a08:	3088000c 	andi	r2,r6,8192
    9a0c:	8c403fcc 	andi	r17,r17,255
    9a10:	10001726 	beq	r2,zero,9a70 <__swbuf_r+0xb0>
    9a14:	80800017 	ldw	r2,0(r16)
    9a18:	81000517 	ldw	r4,20(r16)
    9a1c:	10c7c83a 	sub	r3,r2,r3
    9a20:	19001d0e 	bge	r3,r4,9a98 <__swbuf_r+0xd8>
    9a24:	18c00044 	addi	r3,r3,1
    9a28:	81400217 	ldw	r5,8(r16)
    9a2c:	11000044 	addi	r4,r2,1
    9a30:	81000015 	stw	r4,0(r16)
    9a34:	297fffc4 	addi	r5,r5,-1
    9a38:	81400215 	stw	r5,8(r16)
    9a3c:	14400005 	stb	r17,0(r2)
    9a40:	80800517 	ldw	r2,20(r16)
    9a44:	10c01d26 	beq	r2,r3,9abc <__swbuf_r+0xfc>
    9a48:	8080030b 	ldhu	r2,12(r16)
    9a4c:	1080004c 	andi	r2,r2,1
    9a50:	1000181e 	bne	r2,zero,9ab4 <__swbuf_r+0xf4>
    9a54:	8805883a 	mov	r2,r17
    9a58:	dfc00317 	ldw	ra,12(sp)
    9a5c:	dc800217 	ldw	r18,8(sp)
    9a60:	dc400117 	ldw	r17,4(sp)
    9a64:	dc000017 	ldw	r16,0(sp)
    9a68:	dec00404 	addi	sp,sp,16
    9a6c:	f800283a 	ret
    9a70:	81001917 	ldw	r4,100(r16)
    9a74:	00b7ffc4 	movi	r2,-8193
    9a78:	31880014 	ori	r6,r6,8192
    9a7c:	2084703a 	and	r2,r4,r2
    9a80:	80801915 	stw	r2,100(r16)
    9a84:	80800017 	ldw	r2,0(r16)
    9a88:	81000517 	ldw	r4,20(r16)
    9a8c:	8180030d 	sth	r6,12(r16)
    9a90:	10c7c83a 	sub	r3,r2,r3
    9a94:	193fe316 	blt	r3,r4,9a24 <__alt_mem_Flash_flash_data+0xf4009a24>
    9a98:	9009883a 	mov	r4,r18
    9a9c:	800b883a 	mov	r5,r16
    9aa0:	00049900 	call	4990 <_fflush_r>
    9aa4:	1000091e 	bne	r2,zero,9acc <__swbuf_r+0x10c>
    9aa8:	80800017 	ldw	r2,0(r16)
    9aac:	00c00044 	movi	r3,1
    9ab0:	003fdd06 	br	9a28 <__alt_mem_Flash_flash_data+0xf4009a28>
    9ab4:	00800284 	movi	r2,10
    9ab8:	88bfe61e 	bne	r17,r2,9a54 <__alt_mem_Flash_flash_data+0xf4009a54>
    9abc:	9009883a 	mov	r4,r18
    9ac0:	800b883a 	mov	r5,r16
    9ac4:	00049900 	call	4990 <_fflush_r>
    9ac8:	103fe226 	beq	r2,zero,9a54 <__alt_mem_Flash_flash_data+0xf4009a54>
    9acc:	00bfffc4 	movi	r2,-1
    9ad0:	003fe106 	br	9a58 <__alt_mem_Flash_flash_data+0xf4009a58>
    9ad4:	9009883a 	mov	r4,r18
    9ad8:	800b883a 	mov	r5,r16
    9adc:	0002d0c0 	call	2d0c <__swsetup_r>
    9ae0:	103ffa1e 	bne	r2,zero,9acc <__alt_mem_Flash_flash_data+0xf4009acc>
    9ae4:	8180030b 	ldhu	r6,12(r16)
    9ae8:	80c00417 	ldw	r3,16(r16)
    9aec:	003fc606 	br	9a08 <__alt_mem_Flash_flash_data+0xf4009a08>
    9af0:	0004d6c0 	call	4d6c <__sinit>
    9af4:	003fbd06 	br	99ec <__alt_mem_Flash_flash_data+0xf40099ec>

00009af8 <__swbuf>:
    9af8:	00c000b4 	movhi	r3,2
    9afc:	18ee8e04 	addi	r3,r3,-17864
    9b00:	2005883a 	mov	r2,r4
    9b04:	19000017 	ldw	r4,0(r3)
    9b08:	280d883a 	mov	r6,r5
    9b0c:	100b883a 	mov	r5,r2
    9b10:	00099c01 	jmpi	99c0 <__swbuf_r>

00009b14 <_wcrtomb_r>:
    9b14:	defff604 	addi	sp,sp,-40
    9b18:	008000b4 	movhi	r2,2
    9b1c:	dc800815 	stw	r18,32(sp)
    9b20:	dc400715 	stw	r17,28(sp)
    9b24:	dc000615 	stw	r16,24(sp)
    9b28:	10ae9204 	addi	r2,r2,-17848
    9b2c:	dfc00915 	stw	ra,36(sp)
    9b30:	2021883a 	mov	r16,r4
    9b34:	3823883a 	mov	r17,r7
    9b38:	14800017 	ldw	r18,0(r2)
    9b3c:	28001426 	beq	r5,zero,9b90 <_wcrtomb_r+0x7c>
    9b40:	d9400415 	stw	r5,16(sp)
    9b44:	d9800515 	stw	r6,20(sp)
    9b48:	00053d40 	call	53d4 <__locale_charset>
    9b4c:	d9400417 	ldw	r5,16(sp)
    9b50:	d9800517 	ldw	r6,20(sp)
    9b54:	8009883a 	mov	r4,r16
    9b58:	dc400015 	stw	r17,0(sp)
    9b5c:	100f883a 	mov	r7,r2
    9b60:	903ee83a 	callr	r18
    9b64:	00ffffc4 	movi	r3,-1
    9b68:	10c0031e 	bne	r2,r3,9b78 <_wcrtomb_r+0x64>
    9b6c:	88000015 	stw	zero,0(r17)
    9b70:	00c02284 	movi	r3,138
    9b74:	80c00015 	stw	r3,0(r16)
    9b78:	dfc00917 	ldw	ra,36(sp)
    9b7c:	dc800817 	ldw	r18,32(sp)
    9b80:	dc400717 	ldw	r17,28(sp)
    9b84:	dc000617 	ldw	r16,24(sp)
    9b88:	dec00a04 	addi	sp,sp,40
    9b8c:	f800283a 	ret
    9b90:	00053d40 	call	53d4 <__locale_charset>
    9b94:	8009883a 	mov	r4,r16
    9b98:	dc400015 	stw	r17,0(sp)
    9b9c:	d9400104 	addi	r5,sp,4
    9ba0:	000d883a 	mov	r6,zero
    9ba4:	100f883a 	mov	r7,r2
    9ba8:	903ee83a 	callr	r18
    9bac:	003fed06 	br	9b64 <__alt_mem_Flash_flash_data+0xf4009b64>

00009bb0 <wcrtomb>:
    9bb0:	defff604 	addi	sp,sp,-40
    9bb4:	008000b4 	movhi	r2,2
    9bb8:	dc800615 	stw	r18,24(sp)
    9bbc:	dc400515 	stw	r17,20(sp)
    9bc0:	dc000415 	stw	r16,16(sp)
    9bc4:	10ae8e04 	addi	r2,r2,-17864
    9bc8:	dfc00915 	stw	ra,36(sp)
    9bcc:	dd000815 	stw	r20,32(sp)
    9bd0:	dcc00715 	stw	r19,28(sp)
    9bd4:	2021883a 	mov	r16,r4
    9bd8:	3025883a 	mov	r18,r6
    9bdc:	14400017 	ldw	r17,0(r2)
    9be0:	20001826 	beq	r4,zero,9c44 <wcrtomb+0x94>
    9be4:	008000b4 	movhi	r2,2
    9be8:	10ae9204 	addi	r2,r2,-17848
    9bec:	15000017 	ldw	r20,0(r2)
    9bf0:	2827883a 	mov	r19,r5
    9bf4:	00053d40 	call	53d4 <__locale_charset>
    9bf8:	8809883a 	mov	r4,r17
    9bfc:	dc800015 	stw	r18,0(sp)
    9c00:	800b883a 	mov	r5,r16
    9c04:	980d883a 	mov	r6,r19
    9c08:	100f883a 	mov	r7,r2
    9c0c:	a03ee83a 	callr	r20
    9c10:	00ffffc4 	movi	r3,-1
    9c14:	10c0031e 	bne	r2,r3,9c24 <wcrtomb+0x74>
    9c18:	90000015 	stw	zero,0(r18)
    9c1c:	00c02284 	movi	r3,138
    9c20:	88c00015 	stw	r3,0(r17)
    9c24:	dfc00917 	ldw	ra,36(sp)
    9c28:	dd000817 	ldw	r20,32(sp)
    9c2c:	dcc00717 	ldw	r19,28(sp)
    9c30:	dc800617 	ldw	r18,24(sp)
    9c34:	dc400517 	ldw	r17,20(sp)
    9c38:	dc000417 	ldw	r16,16(sp)
    9c3c:	dec00a04 	addi	sp,sp,40
    9c40:	f800283a 	ret
    9c44:	008000b4 	movhi	r2,2
    9c48:	10ae9204 	addi	r2,r2,-17848
    9c4c:	14000017 	ldw	r16,0(r2)
    9c50:	00053d40 	call	53d4 <__locale_charset>
    9c54:	8809883a 	mov	r4,r17
    9c58:	dc800015 	stw	r18,0(sp)
    9c5c:	d9400104 	addi	r5,sp,4
    9c60:	000d883a 	mov	r6,zero
    9c64:	100f883a 	mov	r7,r2
    9c68:	803ee83a 	callr	r16
    9c6c:	003fe806 	br	9c10 <__alt_mem_Flash_flash_data+0xf4009c10>

00009c70 <__ascii_wctomb>:
    9c70:	28000526 	beq	r5,zero,9c88 <__ascii_wctomb+0x18>
    9c74:	00803fc4 	movi	r2,255
    9c78:	11800536 	bltu	r2,r6,9c90 <__ascii_wctomb+0x20>
    9c7c:	29800005 	stb	r6,0(r5)
    9c80:	00800044 	movi	r2,1
    9c84:	f800283a 	ret
    9c88:	0005883a 	mov	r2,zero
    9c8c:	f800283a 	ret
    9c90:	00802284 	movi	r2,138
    9c94:	20800015 	stw	r2,0(r4)
    9c98:	00bfffc4 	movi	r2,-1
    9c9c:	f800283a 	ret

00009ca0 <_wctomb_r>:
    9ca0:	008000b4 	movhi	r2,2
    9ca4:	defff904 	addi	sp,sp,-28
    9ca8:	10ae9204 	addi	r2,r2,-17848
    9cac:	dfc00615 	stw	ra,24(sp)
    9cb0:	dc400515 	stw	r17,20(sp)
    9cb4:	dc000415 	stw	r16,16(sp)
    9cb8:	3823883a 	mov	r17,r7
    9cbc:	14000017 	ldw	r16,0(r2)
    9cc0:	d9000115 	stw	r4,4(sp)
    9cc4:	d9400215 	stw	r5,8(sp)
    9cc8:	d9800315 	stw	r6,12(sp)
    9ccc:	00053d40 	call	53d4 <__locale_charset>
    9cd0:	d9000117 	ldw	r4,4(sp)
    9cd4:	d9400217 	ldw	r5,8(sp)
    9cd8:	d9800317 	ldw	r6,12(sp)
    9cdc:	dc400015 	stw	r17,0(sp)
    9ce0:	100f883a 	mov	r7,r2
    9ce4:	803ee83a 	callr	r16
    9ce8:	dfc00617 	ldw	ra,24(sp)
    9cec:	dc400517 	ldw	r17,20(sp)
    9cf0:	dc000417 	ldw	r16,16(sp)
    9cf4:	dec00704 	addi	sp,sp,28
    9cf8:	f800283a 	ret

00009cfc <__udivdi3>:
    9cfc:	defff504 	addi	sp,sp,-44
    9d00:	dcc00415 	stw	r19,16(sp)
    9d04:	dc000115 	stw	r16,4(sp)
    9d08:	dfc00a15 	stw	ra,40(sp)
    9d0c:	df000915 	stw	fp,36(sp)
    9d10:	ddc00815 	stw	r23,32(sp)
    9d14:	dd800715 	stw	r22,28(sp)
    9d18:	dd400615 	stw	r21,24(sp)
    9d1c:	dd000515 	stw	r20,20(sp)
    9d20:	dc800315 	stw	r18,12(sp)
    9d24:	dc400215 	stw	r17,8(sp)
    9d28:	2027883a 	mov	r19,r4
    9d2c:	2821883a 	mov	r16,r5
    9d30:	3800421e 	bne	r7,zero,9e3c <__udivdi3+0x140>
    9d34:	3025883a 	mov	r18,r6
    9d38:	2023883a 	mov	r17,r4
    9d3c:	2980542e 	bgeu	r5,r6,9e90 <__udivdi3+0x194>
    9d40:	00bfffd4 	movui	r2,65535
    9d44:	282d883a 	mov	r22,r5
    9d48:	1180a836 	bltu	r2,r6,9fec <__udivdi3+0x2f0>
    9d4c:	00803fc4 	movi	r2,255
    9d50:	1181422e 	bgeu	r2,r6,a25c <__udivdi3+0x560>
    9d54:	00800204 	movi	r2,8
    9d58:	1007883a 	mov	r3,r2
    9d5c:	3084d83a 	srl	r2,r6,r2
    9d60:	010000b4 	movhi	r4,2
    9d64:	21260104 	addi	r4,r4,-26620
    9d68:	2085883a 	add	r2,r4,r2
    9d6c:	10800003 	ldbu	r2,0(r2)
    9d70:	10c7883a 	add	r3,r2,r3
    9d74:	00800804 	movi	r2,32
    9d78:	10c5c83a 	sub	r2,r2,r3
    9d7c:	10000526 	beq	r2,zero,9d94 <__udivdi3+0x98>
    9d80:	80a0983a 	sll	r16,r16,r2
    9d84:	98c6d83a 	srl	r3,r19,r3
    9d88:	30a4983a 	sll	r18,r6,r2
    9d8c:	98a2983a 	sll	r17,r19,r2
    9d90:	80ecb03a 	or	r22,r16,r3
    9d94:	902ad43a 	srli	r21,r18,16
    9d98:	b009883a 	mov	r4,r22
    9d9c:	953fffcc 	andi	r20,r18,65535
    9da0:	a80b883a 	mov	r5,r21
    9da4:	000a9700 	call	a970 <__umodsi3>
    9da8:	b009883a 	mov	r4,r22
    9dac:	a80b883a 	mov	r5,r21
    9db0:	1027883a 	mov	r19,r2
    9db4:	000a9680 	call	a968 <__udivsi3>
    9db8:	1021883a 	mov	r16,r2
    9dbc:	8806d43a 	srli	r3,r17,16
    9dc0:	9804943a 	slli	r2,r19,16
    9dc4:	8527383a 	mul	r19,r16,r20
    9dc8:	10c4b03a 	or	r2,r2,r3
    9dcc:	14c0052e 	bgeu	r2,r19,9de4 <__udivdi3+0xe8>
    9dd0:	1485883a 	add	r2,r2,r18
    9dd4:	80ffffc4 	addi	r3,r16,-1
    9dd8:	14800136 	bltu	r2,r18,9de0 <__udivdi3+0xe4>
    9ddc:	14c13436 	bltu	r2,r19,a2b0 <__udivdi3+0x5b4>
    9de0:	1821883a 	mov	r16,r3
    9de4:	14e7c83a 	sub	r19,r2,r19
    9de8:	9809883a 	mov	r4,r19
    9dec:	a80b883a 	mov	r5,r21
    9df0:	000a9700 	call	a970 <__umodsi3>
    9df4:	102d883a 	mov	r22,r2
    9df8:	9809883a 	mov	r4,r19
    9dfc:	a80b883a 	mov	r5,r21
    9e00:	000a9680 	call	a968 <__udivsi3>
    9e04:	b02c943a 	slli	r22,r22,16
    9e08:	1529383a 	mul	r20,r2,r20
    9e0c:	8c7fffcc 	andi	r17,r17,65535
    9e10:	b462b03a 	or	r17,r22,r17
    9e14:	8d00052e 	bgeu	r17,r20,9e2c <__udivdi3+0x130>
    9e18:	8ca3883a 	add	r17,r17,r18
    9e1c:	10ffffc4 	addi	r3,r2,-1
    9e20:	8c80f636 	bltu	r17,r18,a1fc <__udivdi3+0x500>
    9e24:	8d00f52e 	bgeu	r17,r20,a1fc <__udivdi3+0x500>
    9e28:	10bfff84 	addi	r2,r2,-2
    9e2c:	8020943a 	slli	r16,r16,16
    9e30:	0007883a 	mov	r3,zero
    9e34:	1404b03a 	or	r2,r2,r16
    9e38:	00005b06 	br	9fa8 <__udivdi3+0x2ac>
    9e3c:	29c05836 	bltu	r5,r7,9fa0 <__udivdi3+0x2a4>
    9e40:	00bfffd4 	movui	r2,65535
    9e44:	11c0642e 	bgeu	r2,r7,9fd8 <__udivdi3+0x2dc>
    9e48:	00804034 	movhi	r2,256
    9e4c:	10bfffc4 	addi	r2,r2,-1
    9e50:	11c0f32e 	bgeu	r2,r7,a220 <__udivdi3+0x524>
    9e54:	00c00604 	movi	r3,24
    9e58:	180b883a 	mov	r5,r3
    9e5c:	38c6d83a 	srl	r3,r7,r3
    9e60:	008000b4 	movhi	r2,2
    9e64:	10a60104 	addi	r2,r2,-26620
    9e68:	10c7883a 	add	r3,r2,r3
    9e6c:	18c00003 	ldbu	r3,0(r3)
    9e70:	01000804 	movi	r4,32
    9e74:	1947883a 	add	r3,r3,r5
    9e78:	20e5c83a 	sub	r18,r4,r3
    9e7c:	9000661e 	bne	r18,zero,a018 <__udivdi3+0x31c>
    9e80:	3c00f936 	bltu	r7,r16,a268 <__udivdi3+0x56c>
    9e84:	9985403a 	cmpgeu	r2,r19,r6
    9e88:	0007883a 	mov	r3,zero
    9e8c:	00004606 	br	9fa8 <__udivdi3+0x2ac>
    9e90:	3000041e 	bne	r6,zero,9ea4 <__udivdi3+0x1a8>
    9e94:	01000044 	movi	r4,1
    9e98:	000b883a 	mov	r5,zero
    9e9c:	000a9680 	call	a968 <__udivsi3>
    9ea0:	1025883a 	mov	r18,r2
    9ea4:	00bfffd4 	movui	r2,65535
    9ea8:	1480562e 	bgeu	r2,r18,a004 <__udivdi3+0x308>
    9eac:	00804034 	movhi	r2,256
    9eb0:	10bfffc4 	addi	r2,r2,-1
    9eb4:	1480e32e 	bgeu	r2,r18,a244 <__udivdi3+0x548>
    9eb8:	00800604 	movi	r2,24
    9ebc:	1007883a 	mov	r3,r2
    9ec0:	9084d83a 	srl	r2,r18,r2
    9ec4:	010000b4 	movhi	r4,2
    9ec8:	21260104 	addi	r4,r4,-26620
    9ecc:	2085883a 	add	r2,r4,r2
    9ed0:	10800003 	ldbu	r2,0(r2)
    9ed4:	10c5883a 	add	r2,r2,r3
    9ed8:	00c00804 	movi	r3,32
    9edc:	1887c83a 	sub	r3,r3,r2
    9ee0:	1800911e 	bne	r3,zero,a128 <__udivdi3+0x42c>
    9ee4:	9028d43a 	srli	r20,r18,16
    9ee8:	84a1c83a 	sub	r16,r16,r18
    9eec:	957fffcc 	andi	r21,r18,65535
    9ef0:	00c00044 	movi	r3,1
    9ef4:	8009883a 	mov	r4,r16
    9ef8:	a00b883a 	mov	r5,r20
    9efc:	d8c00015 	stw	r3,0(sp)
    9f00:	000a9700 	call	a970 <__umodsi3>
    9f04:	8009883a 	mov	r4,r16
    9f08:	a00b883a 	mov	r5,r20
    9f0c:	1027883a 	mov	r19,r2
    9f10:	000a9680 	call	a968 <__udivsi3>
    9f14:	1021883a 	mov	r16,r2
    9f18:	880cd43a 	srli	r6,r17,16
    9f1c:	9804943a 	slli	r2,r19,16
    9f20:	8567383a 	mul	r19,r16,r21
    9f24:	d8c00017 	ldw	r3,0(sp)
    9f28:	1188b03a 	or	r4,r2,r6
    9f2c:	24c0052e 	bgeu	r4,r19,9f44 <__udivdi3+0x248>
    9f30:	2489883a 	add	r4,r4,r18
    9f34:	80bfffc4 	addi	r2,r16,-1
    9f38:	24800136 	bltu	r4,r18,9f40 <__udivdi3+0x244>
    9f3c:	24c0d936 	bltu	r4,r19,a2a4 <__udivdi3+0x5a8>
    9f40:	1021883a 	mov	r16,r2
    9f44:	24e7c83a 	sub	r19,r4,r19
    9f48:	9809883a 	mov	r4,r19
    9f4c:	a00b883a 	mov	r5,r20
    9f50:	d8c00015 	stw	r3,0(sp)
    9f54:	000a9700 	call	a970 <__umodsi3>
    9f58:	102d883a 	mov	r22,r2
    9f5c:	9809883a 	mov	r4,r19
    9f60:	a00b883a 	mov	r5,r20
    9f64:	000a9680 	call	a968 <__udivsi3>
    9f68:	b02c943a 	slli	r22,r22,16
    9f6c:	156b383a 	mul	r21,r2,r21
    9f70:	8c7fffcc 	andi	r17,r17,65535
    9f74:	b462b03a 	or	r17,r22,r17
    9f78:	d8c00017 	ldw	r3,0(sp)
    9f7c:	8d40052e 	bgeu	r17,r21,9f94 <__udivdi3+0x298>
    9f80:	8ca3883a 	add	r17,r17,r18
    9f84:	113fffc4 	addi	r4,r2,-1
    9f88:	8c809a36 	bltu	r17,r18,a1f4 <__udivdi3+0x4f8>
    9f8c:	8d40992e 	bgeu	r17,r21,a1f4 <__udivdi3+0x4f8>
    9f90:	10bfff84 	addi	r2,r2,-2
    9f94:	8020943a 	slli	r16,r16,16
    9f98:	1404b03a 	or	r2,r2,r16
    9f9c:	00000206 	br	9fa8 <__udivdi3+0x2ac>
    9fa0:	0007883a 	mov	r3,zero
    9fa4:	0005883a 	mov	r2,zero
    9fa8:	dfc00a17 	ldw	ra,40(sp)
    9fac:	df000917 	ldw	fp,36(sp)
    9fb0:	ddc00817 	ldw	r23,32(sp)
    9fb4:	dd800717 	ldw	r22,28(sp)
    9fb8:	dd400617 	ldw	r21,24(sp)
    9fbc:	dd000517 	ldw	r20,20(sp)
    9fc0:	dcc00417 	ldw	r19,16(sp)
    9fc4:	dc800317 	ldw	r18,12(sp)
    9fc8:	dc400217 	ldw	r17,8(sp)
    9fcc:	dc000117 	ldw	r16,4(sp)
    9fd0:	dec00b04 	addi	sp,sp,44
    9fd4:	f800283a 	ret
    9fd8:	00803fc4 	movi	r2,255
    9fdc:	11c0932e 	bgeu	r2,r7,a22c <__udivdi3+0x530>
    9fe0:	00c00204 	movi	r3,8
    9fe4:	180b883a 	mov	r5,r3
    9fe8:	003f9c06 	br	9e5c <__alt_mem_Flash_flash_data+0xf4009e5c>
    9fec:	00804034 	movhi	r2,256
    9ff0:	10bfffc4 	addi	r2,r2,-1
    9ff4:	1180902e 	bgeu	r2,r6,a238 <__udivdi3+0x53c>
    9ff8:	00800604 	movi	r2,24
    9ffc:	1007883a 	mov	r3,r2
    a000:	003f5606 	br	9d5c <__alt_mem_Flash_flash_data+0xf4009d5c>
    a004:	00803fc4 	movi	r2,255
    a008:	1480912e 	bgeu	r2,r18,a250 <__udivdi3+0x554>
    a00c:	00800204 	movi	r2,8
    a010:	1007883a 	mov	r3,r2
    a014:	003faa06 	br	9ec0 <__alt_mem_Flash_flash_data+0xf4009ec0>
    a018:	30eed83a 	srl	r23,r6,r3
    a01c:	3c8e983a 	sll	r7,r7,r18
    a020:	80f8d83a 	srl	fp,r16,r3
    a024:	98c6d83a 	srl	r3,r19,r3
    a028:	3deeb03a 	or	r23,r7,r23
    a02c:	b828d43a 	srli	r20,r23,16
    a030:	84a0983a 	sll	r16,r16,r18
    a034:	e009883a 	mov	r4,fp
    a038:	a00b883a 	mov	r5,r20
    a03c:	80e2b03a 	or	r17,r16,r3
    a040:	34aa983a 	sll	r21,r6,r18
    a044:	000a9700 	call	a970 <__umodsi3>
    a048:	e009883a 	mov	r4,fp
    a04c:	a00b883a 	mov	r5,r20
    a050:	102d883a 	mov	r22,r2
    a054:	000a9680 	call	a968 <__udivsi3>
    a058:	1021883a 	mov	r16,r2
    a05c:	bf3fffcc 	andi	fp,r23,65535
    a060:	b004943a 	slli	r2,r22,16
    a064:	8808d43a 	srli	r4,r17,16
    a068:	872d383a 	mul	r22,r16,fp
    a06c:	1104b03a 	or	r2,r2,r4
    a070:	1580042e 	bgeu	r2,r22,a084 <__udivdi3+0x388>
    a074:	15c5883a 	add	r2,r2,r23
    a078:	80ffffc4 	addi	r3,r16,-1
    a07c:	15c0812e 	bgeu	r2,r23,a284 <__udivdi3+0x588>
    a080:	1821883a 	mov	r16,r3
    a084:	15adc83a 	sub	r22,r2,r22
    a088:	b009883a 	mov	r4,r22
    a08c:	a00b883a 	mov	r5,r20
    a090:	000a9700 	call	a970 <__umodsi3>
    a094:	a00b883a 	mov	r5,r20
    a098:	b009883a 	mov	r4,r22
    a09c:	d8800015 	stw	r2,0(sp)
    a0a0:	000a9680 	call	a968 <__udivsi3>
    a0a4:	d8c00017 	ldw	r3,0(sp)
    a0a8:	170b383a 	mul	r5,r2,fp
    a0ac:	8c7fffcc 	andi	r17,r17,65535
    a0b0:	1806943a 	slli	r3,r3,16
    a0b4:	1c46b03a 	or	r3,r3,r17
    a0b8:	1940042e 	bgeu	r3,r5,a0cc <__udivdi3+0x3d0>
    a0bc:	1dc7883a 	add	r3,r3,r23
    a0c0:	113fffc4 	addi	r4,r2,-1
    a0c4:	1dc06b2e 	bgeu	r3,r23,a274 <__udivdi3+0x578>
    a0c8:	2005883a 	mov	r2,r4
    a0cc:	8020943a 	slli	r16,r16,16
    a0d0:	a9ffffcc 	andi	r7,r21,65535
    a0d4:	a82ad43a 	srli	r21,r21,16
    a0d8:	1404b03a 	or	r2,r2,r16
    a0dc:	113fffcc 	andi	r4,r2,65535
    a0e0:	100cd43a 	srli	r6,r2,16
    a0e4:	21d3383a 	mul	r9,r4,r7
    a0e8:	2549383a 	mul	r4,r4,r21
    a0ec:	31cf383a 	mul	r7,r6,r7
    a0f0:	4810d43a 	srli	r8,r9,16
    a0f4:	1947c83a 	sub	r3,r3,r5
    a0f8:	3909883a 	add	r4,r7,r4
    a0fc:	2209883a 	add	r4,r4,r8
    a100:	354d383a 	mul	r6,r6,r21
    a104:	21c0022e 	bgeu	r4,r7,a110 <__udivdi3+0x414>
    a108:	01400074 	movhi	r5,1
    a10c:	314d883a 	add	r6,r6,r5
    a110:	202ad43a 	srli	r21,r4,16
    a114:	354d883a 	add	r6,r6,r21
    a118:	19803f36 	bltu	r3,r6,a218 <__udivdi3+0x51c>
    a11c:	19803926 	beq	r3,r6,a204 <__udivdi3+0x508>
    a120:	0007883a 	mov	r3,zero
    a124:	003fa006 	br	9fa8 <__alt_mem_Flash_flash_data+0xf4009fa8>
    a128:	90e4983a 	sll	r18,r18,r3
    a12c:	80aad83a 	srl	r21,r16,r2
    a130:	80e0983a 	sll	r16,r16,r3
    a134:	9028d43a 	srli	r20,r18,16
    a138:	9884d83a 	srl	r2,r19,r2
    a13c:	a809883a 	mov	r4,r21
    a140:	a00b883a 	mov	r5,r20
    a144:	80acb03a 	or	r22,r16,r2
    a148:	98e2983a 	sll	r17,r19,r3
    a14c:	000a9700 	call	a970 <__umodsi3>
    a150:	a809883a 	mov	r4,r21
    a154:	a00b883a 	mov	r5,r20
    a158:	1021883a 	mov	r16,r2
    a15c:	000a9680 	call	a968 <__udivsi3>
    a160:	957fffcc 	andi	r21,r18,65535
    a164:	8020943a 	slli	r16,r16,16
    a168:	b00ad43a 	srli	r5,r22,16
    a16c:	1567383a 	mul	r19,r2,r21
    a170:	102f883a 	mov	r23,r2
    a174:	8148b03a 	or	r4,r16,r5
    a178:	24c0062e 	bgeu	r4,r19,a194 <__udivdi3+0x498>
    a17c:	2489883a 	add	r4,r4,r18
    a180:	10bfffc4 	addi	r2,r2,-1
    a184:	24804536 	bltu	r4,r18,a29c <__udivdi3+0x5a0>
    a188:	24c0442e 	bgeu	r4,r19,a29c <__udivdi3+0x5a0>
    a18c:	bdffff84 	addi	r23,r23,-2
    a190:	2489883a 	add	r4,r4,r18
    a194:	24e7c83a 	sub	r19,r4,r19
    a198:	9809883a 	mov	r4,r19
    a19c:	a00b883a 	mov	r5,r20
    a1a0:	000a9700 	call	a970 <__umodsi3>
    a1a4:	1021883a 	mov	r16,r2
    a1a8:	9809883a 	mov	r4,r19
    a1ac:	a00b883a 	mov	r5,r20
    a1b0:	000a9680 	call	a968 <__udivsi3>
    a1b4:	8020943a 	slli	r16,r16,16
    a1b8:	1007883a 	mov	r3,r2
    a1bc:	1545383a 	mul	r2,r2,r21
    a1c0:	b13fffcc 	andi	r4,r22,65535
    a1c4:	8108b03a 	or	r4,r16,r4
    a1c8:	2080062e 	bgeu	r4,r2,a1e4 <__udivdi3+0x4e8>
    a1cc:	2489883a 	add	r4,r4,r18
    a1d0:	197fffc4 	addi	r5,r3,-1
    a1d4:	24802f36 	bltu	r4,r18,a294 <__udivdi3+0x598>
    a1d8:	20802e2e 	bgeu	r4,r2,a294 <__udivdi3+0x598>
    a1dc:	18ffff84 	addi	r3,r3,-2
    a1e0:	2489883a 	add	r4,r4,r18
    a1e4:	b82e943a 	slli	r23,r23,16
    a1e8:	20a1c83a 	sub	r16,r4,r2
    a1ec:	1dc6b03a 	or	r3,r3,r23
    a1f0:	003f4006 	br	9ef4 <__alt_mem_Flash_flash_data+0xf4009ef4>
    a1f4:	2005883a 	mov	r2,r4
    a1f8:	003f6606 	br	9f94 <__alt_mem_Flash_flash_data+0xf4009f94>
    a1fc:	1805883a 	mov	r2,r3
    a200:	003f0a06 	br	9e2c <__alt_mem_Flash_flash_data+0xf4009e2c>
    a204:	2006943a 	slli	r3,r4,16
    a208:	9c88983a 	sll	r4,r19,r18
    a20c:	4a7fffcc 	andi	r9,r9,65535
    a210:	1a47883a 	add	r3,r3,r9
    a214:	20ffc22e 	bgeu	r4,r3,a120 <__alt_mem_Flash_flash_data+0xf400a120>
    a218:	10bfffc4 	addi	r2,r2,-1
    a21c:	003fc006 	br	a120 <__alt_mem_Flash_flash_data+0xf400a120>
    a220:	00c00404 	movi	r3,16
    a224:	180b883a 	mov	r5,r3
    a228:	003f0c06 	br	9e5c <__alt_mem_Flash_flash_data+0xf4009e5c>
    a22c:	0007883a 	mov	r3,zero
    a230:	000b883a 	mov	r5,zero
    a234:	003f0906 	br	9e5c <__alt_mem_Flash_flash_data+0xf4009e5c>
    a238:	00800404 	movi	r2,16
    a23c:	1007883a 	mov	r3,r2
    a240:	003ec606 	br	9d5c <__alt_mem_Flash_flash_data+0xf4009d5c>
    a244:	00800404 	movi	r2,16
    a248:	1007883a 	mov	r3,r2
    a24c:	003f1c06 	br	9ec0 <__alt_mem_Flash_flash_data+0xf4009ec0>
    a250:	0005883a 	mov	r2,zero
    a254:	0007883a 	mov	r3,zero
    a258:	003f1906 	br	9ec0 <__alt_mem_Flash_flash_data+0xf4009ec0>
    a25c:	0005883a 	mov	r2,zero
    a260:	0007883a 	mov	r3,zero
    a264:	003ebd06 	br	9d5c <__alt_mem_Flash_flash_data+0xf4009d5c>
    a268:	0007883a 	mov	r3,zero
    a26c:	00800044 	movi	r2,1
    a270:	003f4d06 	br	9fa8 <__alt_mem_Flash_flash_data+0xf4009fa8>
    a274:	197f942e 	bgeu	r3,r5,a0c8 <__alt_mem_Flash_flash_data+0xf400a0c8>
    a278:	10bfff84 	addi	r2,r2,-2
    a27c:	1dc7883a 	add	r3,r3,r23
    a280:	003f9206 	br	a0cc <__alt_mem_Flash_flash_data+0xf400a0cc>
    a284:	15bf7e2e 	bgeu	r2,r22,a080 <__alt_mem_Flash_flash_data+0xf400a080>
    a288:	843fff84 	addi	r16,r16,-2
    a28c:	15c5883a 	add	r2,r2,r23
    a290:	003f7c06 	br	a084 <__alt_mem_Flash_flash_data+0xf400a084>
    a294:	2807883a 	mov	r3,r5
    a298:	003fd206 	br	a1e4 <__alt_mem_Flash_flash_data+0xf400a1e4>
    a29c:	102f883a 	mov	r23,r2
    a2a0:	003fbc06 	br	a194 <__alt_mem_Flash_flash_data+0xf400a194>
    a2a4:	843fff84 	addi	r16,r16,-2
    a2a8:	2489883a 	add	r4,r4,r18
    a2ac:	003f2506 	br	9f44 <__alt_mem_Flash_flash_data+0xf4009f44>
    a2b0:	843fff84 	addi	r16,r16,-2
    a2b4:	1485883a 	add	r2,r2,r18
    a2b8:	003eca06 	br	9de4 <__alt_mem_Flash_flash_data+0xf4009de4>

0000a2bc <__umoddi3>:
    a2bc:	defff404 	addi	sp,sp,-48
    a2c0:	ddc00915 	stw	r23,36(sp)
    a2c4:	dc400315 	stw	r17,12(sp)
    a2c8:	dc000215 	stw	r16,8(sp)
    a2cc:	dfc00b15 	stw	ra,44(sp)
    a2d0:	df000a15 	stw	fp,40(sp)
    a2d4:	dd800815 	stw	r22,32(sp)
    a2d8:	dd400715 	stw	r21,28(sp)
    a2dc:	dd000615 	stw	r20,24(sp)
    a2e0:	dcc00515 	stw	r19,20(sp)
    a2e4:	dc800415 	stw	r18,16(sp)
    a2e8:	2021883a 	mov	r16,r4
    a2ec:	2823883a 	mov	r17,r5
    a2f0:	282f883a 	mov	r23,r5
    a2f4:	3800381e 	bne	r7,zero,a3d8 <__umoddi3+0x11c>
    a2f8:	3027883a 	mov	r19,r6
    a2fc:	2029883a 	mov	r20,r4
    a300:	29804e2e 	bgeu	r5,r6,a43c <__umoddi3+0x180>
    a304:	00bfffd4 	movui	r2,65535
    a308:	11809c36 	bltu	r2,r6,a57c <__umoddi3+0x2c0>
    a30c:	00803fc4 	movi	r2,255
    a310:	11813b2e 	bgeu	r2,r6,a800 <__umoddi3+0x544>
    a314:	01400204 	movi	r5,8
    a318:	2805883a 	mov	r2,r5
    a31c:	314ad83a 	srl	r5,r6,r5
    a320:	00c000b4 	movhi	r3,2
    a324:	18e60104 	addi	r3,r3,-26620
    a328:	194b883a 	add	r5,r3,r5
    a32c:	29000003 	ldbu	r4,0(r5)
    a330:	2089883a 	add	r4,r4,r2
    a334:	00800804 	movi	r2,32
    a338:	1105c83a 	sub	r2,r2,r4
    a33c:	1000ec26 	beq	r2,zero,a6f0 <__umoddi3+0x434>
    a340:	88a2983a 	sll	r17,r17,r2
    a344:	8108d83a 	srl	r4,r16,r4
    a348:	30a6983a 	sll	r19,r6,r2
    a34c:	80a8983a 	sll	r20,r16,r2
    a350:	1025883a 	mov	r18,r2
    a354:	892eb03a 	or	r23,r17,r4
    a358:	982cd43a 	srli	r22,r19,16
    a35c:	b809883a 	mov	r4,r23
    a360:	9d7fffcc 	andi	r21,r19,65535
    a364:	b00b883a 	mov	r5,r22
    a368:	000a9700 	call	a970 <__umodsi3>
    a36c:	b809883a 	mov	r4,r23
    a370:	b00b883a 	mov	r5,r22
    a374:	1021883a 	mov	r16,r2
    a378:	000a9680 	call	a968 <__udivsi3>
    a37c:	8020943a 	slli	r16,r16,16
    a380:	a00cd43a 	srli	r6,r20,16
    a384:	1545383a 	mul	r2,r2,r21
    a388:	8188b03a 	or	r4,r16,r6
    a38c:	2080042e 	bgeu	r4,r2,a3a0 <__umoddi3+0xe4>
    a390:	24c9883a 	add	r4,r4,r19
    a394:	24c00236 	bltu	r4,r19,a3a0 <__umoddi3+0xe4>
    a398:	2080012e 	bgeu	r4,r2,a3a0 <__umoddi3+0xe4>
    a39c:	24c9883a 	add	r4,r4,r19
    a3a0:	20a3c83a 	sub	r17,r4,r2
    a3a4:	8809883a 	mov	r4,r17
    a3a8:	b00b883a 	mov	r5,r22
    a3ac:	000a9700 	call	a970 <__umodsi3>
    a3b0:	8809883a 	mov	r4,r17
    a3b4:	b00b883a 	mov	r5,r22
    a3b8:	1021883a 	mov	r16,r2
    a3bc:	000a9680 	call	a968 <__udivsi3>
    a3c0:	8006943a 	slli	r3,r16,16
    a3c4:	1545383a 	mul	r2,r2,r21
    a3c8:	a13fffcc 	andi	r4,r20,65535
    a3cc:	1906b03a 	or	r3,r3,r4
    a3d0:	1880532e 	bgeu	r3,r2,a520 <__umoddi3+0x264>
    a3d4:	00004e06 	br	a510 <__umoddi3+0x254>
    a3d8:	29c05536 	bltu	r5,r7,a530 <__umoddi3+0x274>
    a3dc:	00bfffd4 	movui	r2,65535
    a3e0:	11c0612e 	bgeu	r2,r7,a568 <__umoddi3+0x2ac>
    a3e4:	00804034 	movhi	r2,256
    a3e8:	10bfffc4 	addi	r2,r2,-1
    a3ec:	11c0f82e 	bgeu	r2,r7,a7d0 <__umoddi3+0x514>
    a3f0:	01400604 	movi	r5,24
    a3f4:	282b883a 	mov	r21,r5
    a3f8:	394ad83a 	srl	r5,r7,r5
    a3fc:	00c000b4 	movhi	r3,2
    a400:	18e60104 	addi	r3,r3,-26620
    a404:	194b883a 	add	r5,r3,r5
    a408:	28800003 	ldbu	r2,0(r5)
    a40c:	00c00804 	movi	r3,32
    a410:	156b883a 	add	r21,r2,r21
    a414:	1d69c83a 	sub	r20,r3,r21
    a418:	a000631e 	bne	r20,zero,a5a8 <__umoddi3+0x2ec>
    a41c:	3c400136 	bltu	r7,r17,a424 <__umoddi3+0x168>
    a420:	81810436 	bltu	r16,r6,a834 <__umoddi3+0x578>
    a424:	8185c83a 	sub	r2,r16,r6
    a428:	89e3c83a 	sub	r17,r17,r7
    a42c:	8087803a 	cmpltu	r3,r16,r2
    a430:	88efc83a 	sub	r23,r17,r3
    a434:	b807883a 	mov	r3,r23
    a438:	00003f06 	br	a538 <__umoddi3+0x27c>
    a43c:	3000041e 	bne	r6,zero,a450 <__umoddi3+0x194>
    a440:	01000044 	movi	r4,1
    a444:	000b883a 	mov	r5,zero
    a448:	000a9680 	call	a968 <__udivsi3>
    a44c:	1027883a 	mov	r19,r2
    a450:	00bfffd4 	movui	r2,65535
    a454:	14c04f2e 	bgeu	r2,r19,a594 <__umoddi3+0x2d8>
    a458:	00804034 	movhi	r2,256
    a45c:	10bfffc4 	addi	r2,r2,-1
    a460:	14c0e42e 	bgeu	r2,r19,a7f4 <__umoddi3+0x538>
    a464:	00800604 	movi	r2,24
    a468:	1007883a 	mov	r3,r2
    a46c:	9884d83a 	srl	r2,r19,r2
    a470:	010000b4 	movhi	r4,2
    a474:	21260104 	addi	r4,r4,-26620
    a478:	2085883a 	add	r2,r4,r2
    a47c:	11000003 	ldbu	r4,0(r2)
    a480:	00800804 	movi	r2,32
    a484:	20c7883a 	add	r3,r4,r3
    a488:	10c5c83a 	sub	r2,r2,r3
    a48c:	10009a1e 	bne	r2,zero,a6f8 <__umoddi3+0x43c>
    a490:	982cd43a 	srli	r22,r19,16
    a494:	8ce3c83a 	sub	r17,r17,r19
    a498:	9c3fffcc 	andi	r16,r19,65535
    a49c:	0025883a 	mov	r18,zero
    a4a0:	8809883a 	mov	r4,r17
    a4a4:	b00b883a 	mov	r5,r22
    a4a8:	000a9700 	call	a970 <__umodsi3>
    a4ac:	8809883a 	mov	r4,r17
    a4b0:	b00b883a 	mov	r5,r22
    a4b4:	102b883a 	mov	r21,r2
    a4b8:	000a9680 	call	a968 <__udivsi3>
    a4bc:	a806943a 	slli	r3,r21,16
    a4c0:	a008d43a 	srli	r4,r20,16
    a4c4:	1405383a 	mul	r2,r2,r16
    a4c8:	190cb03a 	or	r6,r3,r4
    a4cc:	3080032e 	bgeu	r6,r2,a4dc <__umoddi3+0x220>
    a4d0:	34cd883a 	add	r6,r6,r19
    a4d4:	34c00136 	bltu	r6,r19,a4dc <__umoddi3+0x220>
    a4d8:	3080d436 	bltu	r6,r2,a82c <__umoddi3+0x570>
    a4dc:	30abc83a 	sub	r21,r6,r2
    a4e0:	a809883a 	mov	r4,r21
    a4e4:	b00b883a 	mov	r5,r22
    a4e8:	000a9700 	call	a970 <__umodsi3>
    a4ec:	1023883a 	mov	r17,r2
    a4f0:	a809883a 	mov	r4,r21
    a4f4:	b00b883a 	mov	r5,r22
    a4f8:	000a9680 	call	a968 <__udivsi3>
    a4fc:	8822943a 	slli	r17,r17,16
    a500:	1405383a 	mul	r2,r2,r16
    a504:	a13fffcc 	andi	r4,r20,65535
    a508:	8906b03a 	or	r3,r17,r4
    a50c:	1880042e 	bgeu	r3,r2,a520 <__umoddi3+0x264>
    a510:	1cc7883a 	add	r3,r3,r19
    a514:	1cc00236 	bltu	r3,r19,a520 <__umoddi3+0x264>
    a518:	1880012e 	bgeu	r3,r2,a520 <__umoddi3+0x264>
    a51c:	1cc7883a 	add	r3,r3,r19
    a520:	1887c83a 	sub	r3,r3,r2
    a524:	1c84d83a 	srl	r2,r3,r18
    a528:	0007883a 	mov	r3,zero
    a52c:	00000206 	br	a538 <__umoddi3+0x27c>
    a530:	2005883a 	mov	r2,r4
    a534:	2807883a 	mov	r3,r5
    a538:	dfc00b17 	ldw	ra,44(sp)
    a53c:	df000a17 	ldw	fp,40(sp)
    a540:	ddc00917 	ldw	r23,36(sp)
    a544:	dd800817 	ldw	r22,32(sp)
    a548:	dd400717 	ldw	r21,28(sp)
    a54c:	dd000617 	ldw	r20,24(sp)
    a550:	dcc00517 	ldw	r19,20(sp)
    a554:	dc800417 	ldw	r18,16(sp)
    a558:	dc400317 	ldw	r17,12(sp)
    a55c:	dc000217 	ldw	r16,8(sp)
    a560:	dec00c04 	addi	sp,sp,48
    a564:	f800283a 	ret
    a568:	00803fc4 	movi	r2,255
    a56c:	11c0952e 	bgeu	r2,r7,a7c4 <__umoddi3+0x508>
    a570:	01400204 	movi	r5,8
    a574:	282b883a 	mov	r21,r5
    a578:	003f9f06 	br	a3f8 <__alt_mem_Flash_flash_data+0xf400a3f8>
    a57c:	00804034 	movhi	r2,256
    a580:	10bfffc4 	addi	r2,r2,-1
    a584:	1180952e 	bgeu	r2,r6,a7dc <__umoddi3+0x520>
    a588:	01400604 	movi	r5,24
    a58c:	2805883a 	mov	r2,r5
    a590:	003f6206 	br	a31c <__alt_mem_Flash_flash_data+0xf400a31c>
    a594:	00803fc4 	movi	r2,255
    a598:	14c0932e 	bgeu	r2,r19,a7e8 <__umoddi3+0x52c>
    a59c:	00800204 	movi	r2,8
    a5a0:	1007883a 	mov	r3,r2
    a5a4:	003fb106 	br	a46c <__alt_mem_Flash_flash_data+0xf400a46c>
    a5a8:	3548d83a 	srl	r4,r6,r21
    a5ac:	3d0e983a 	sll	r7,r7,r20
    a5b0:	8d10983a 	sll	r8,r17,r20
    a5b4:	8d6cd83a 	srl	r22,r17,r21
    a5b8:	3922b03a 	or	r17,r7,r4
    a5bc:	882ed43a 	srli	r23,r17,16
    a5c0:	8564d83a 	srl	r18,r16,r21
    a5c4:	b009883a 	mov	r4,r22
    a5c8:	b80b883a 	mov	r5,r23
    a5cc:	44a4b03a 	or	r18,r8,r18
    a5d0:	3526983a 	sll	r19,r6,r20
    a5d4:	000a9700 	call	a970 <__umodsi3>
    a5d8:	b009883a 	mov	r4,r22
    a5dc:	b80b883a 	mov	r5,r23
    a5e0:	1039883a 	mov	fp,r2
    a5e4:	000a9680 	call	a968 <__udivsi3>
    a5e8:	102d883a 	mov	r22,r2
    a5ec:	8a3fffcc 	andi	r8,r17,65535
    a5f0:	e004943a 	slli	r2,fp,16
    a5f4:	900cd43a 	srli	r6,r18,16
    a5f8:	b239383a 	mul	fp,r22,r8
    a5fc:	8520983a 	sll	r16,r16,r20
    a600:	118ab03a 	or	r5,r2,r6
    a604:	2f00042e 	bgeu	r5,fp,a618 <__umoddi3+0x35c>
    a608:	2c4b883a 	add	r5,r5,r17
    a60c:	b0bfffc4 	addi	r2,r22,-1
    a610:	2c40822e 	bgeu	r5,r17,a81c <__umoddi3+0x560>
    a614:	102d883a 	mov	r22,r2
    a618:	2f39c83a 	sub	fp,r5,fp
    a61c:	e009883a 	mov	r4,fp
    a620:	b80b883a 	mov	r5,r23
    a624:	da000115 	stw	r8,4(sp)
    a628:	000a9700 	call	a970 <__umodsi3>
    a62c:	e009883a 	mov	r4,fp
    a630:	b80b883a 	mov	r5,r23
    a634:	d8800015 	stw	r2,0(sp)
    a638:	000a9680 	call	a968 <__udivsi3>
    a63c:	d9800017 	ldw	r6,0(sp)
    a640:	da000117 	ldw	r8,4(sp)
    a644:	94bfffcc 	andi	r18,r18,65535
    a648:	300c943a 	slli	r6,r6,16
    a64c:	1209383a 	mul	r4,r2,r8
    a650:	3490b03a 	or	r8,r6,r18
    a654:	4100042e 	bgeu	r8,r4,a668 <__umoddi3+0x3ac>
    a658:	4451883a 	add	r8,r8,r17
    a65c:	10ffffc4 	addi	r3,r2,-1
    a660:	44406a2e 	bgeu	r8,r17,a80c <__umoddi3+0x550>
    a664:	1805883a 	mov	r2,r3
    a668:	b012943a 	slli	r9,r22,16
    a66c:	9abfffcc 	andi	r10,r19,65535
    a670:	980ed43a 	srli	r7,r19,16
    a674:	124ab03a 	or	r5,r2,r9
    a678:	2a7fffcc 	andi	r9,r5,65535
    a67c:	280ad43a 	srli	r5,r5,16
    a680:	4a8d383a 	mul	r6,r9,r10
    a684:	49d3383a 	mul	r9,r9,r7
    a688:	2a95383a 	mul	r10,r5,r10
    a68c:	3004d43a 	srli	r2,r6,16
    a690:	4111c83a 	sub	r8,r8,r4
    a694:	5253883a 	add	r9,r10,r9
    a698:	4893883a 	add	r9,r9,r2
    a69c:	29cb383a 	mul	r5,r5,r7
    a6a0:	4a80022e 	bgeu	r9,r10,a6ac <__umoddi3+0x3f0>
    a6a4:	00800074 	movhi	r2,1
    a6a8:	288b883a 	add	r5,r5,r2
    a6ac:	4808d43a 	srli	r4,r9,16
    a6b0:	4812943a 	slli	r9,r9,16
    a6b4:	31bfffcc 	andi	r6,r6,65535
    a6b8:	290b883a 	add	r5,r5,r4
    a6bc:	498d883a 	add	r6,r9,r6
    a6c0:	41403a36 	bltu	r8,r5,a7ac <__umoddi3+0x4f0>
    a6c4:	41405d26 	beq	r8,r5,a83c <__umoddi3+0x580>
    a6c8:	4149c83a 	sub	r4,r8,r5
    a6cc:	300f883a 	mov	r7,r6
    a6d0:	81cfc83a 	sub	r7,r16,r7
    a6d4:	81c7803a 	cmpltu	r3,r16,r7
    a6d8:	20c7c83a 	sub	r3,r4,r3
    a6dc:	1d44983a 	sll	r2,r3,r21
    a6e0:	3d0ed83a 	srl	r7,r7,r20
    a6e4:	1d06d83a 	srl	r3,r3,r20
    a6e8:	11c4b03a 	or	r2,r2,r7
    a6ec:	003f9206 	br	a538 <__alt_mem_Flash_flash_data+0xf400a538>
    a6f0:	0025883a 	mov	r18,zero
    a6f4:	003f1806 	br	a358 <__alt_mem_Flash_flash_data+0xf400a358>
    a6f8:	98a6983a 	sll	r19,r19,r2
    a6fc:	88e8d83a 	srl	r20,r17,r3
    a700:	80c6d83a 	srl	r3,r16,r3
    a704:	982cd43a 	srli	r22,r19,16
    a708:	88a2983a 	sll	r17,r17,r2
    a70c:	a009883a 	mov	r4,r20
    a710:	b00b883a 	mov	r5,r22
    a714:	88eab03a 	or	r21,r17,r3
    a718:	1025883a 	mov	r18,r2
    a71c:	000a9700 	call	a970 <__umodsi3>
    a720:	a009883a 	mov	r4,r20
    a724:	b00b883a 	mov	r5,r22
    a728:	1023883a 	mov	r17,r2
    a72c:	000a9680 	call	a968 <__udivsi3>
    a730:	9f3fffcc 	andi	fp,r19,65535
    a734:	8822943a 	slli	r17,r17,16
    a738:	a80ad43a 	srli	r5,r21,16
    a73c:	1705383a 	mul	r2,r2,fp
    a740:	84a8983a 	sll	r20,r16,r18
    a744:	8948b03a 	or	r4,r17,r5
    a748:	2080042e 	bgeu	r4,r2,a75c <__umoddi3+0x4a0>
    a74c:	24c9883a 	add	r4,r4,r19
    a750:	24c00236 	bltu	r4,r19,a75c <__umoddi3+0x4a0>
    a754:	2080012e 	bgeu	r4,r2,a75c <__umoddi3+0x4a0>
    a758:	24c9883a 	add	r4,r4,r19
    a75c:	20afc83a 	sub	r23,r4,r2
    a760:	b809883a 	mov	r4,r23
    a764:	b00b883a 	mov	r5,r22
    a768:	000a9700 	call	a970 <__umodsi3>
    a76c:	1023883a 	mov	r17,r2
    a770:	b809883a 	mov	r4,r23
    a774:	b00b883a 	mov	r5,r22
    a778:	000a9680 	call	a968 <__udivsi3>
    a77c:	8822943a 	slli	r17,r17,16
    a780:	1705383a 	mul	r2,r2,fp
    a784:	a93fffcc 	andi	r4,r21,65535
    a788:	8908b03a 	or	r4,r17,r4
    a78c:	2080042e 	bgeu	r4,r2,a7a0 <__umoddi3+0x4e4>
    a790:	24c9883a 	add	r4,r4,r19
    a794:	24c00236 	bltu	r4,r19,a7a0 <__umoddi3+0x4e4>
    a798:	2080012e 	bgeu	r4,r2,a7a0 <__umoddi3+0x4e4>
    a79c:	24c9883a 	add	r4,r4,r19
    a7a0:	20a3c83a 	sub	r17,r4,r2
    a7a4:	e021883a 	mov	r16,fp
    a7a8:	003f3d06 	br	a4a0 <__alt_mem_Flash_flash_data+0xf400a4a0>
    a7ac:	34cfc83a 	sub	r7,r6,r19
    a7b0:	2c4bc83a 	sub	r5,r5,r17
    a7b4:	31cd803a 	cmpltu	r6,r6,r7
    a7b8:	298dc83a 	sub	r6,r5,r6
    a7bc:	4189c83a 	sub	r4,r8,r6
    a7c0:	003fc306 	br	a6d0 <__alt_mem_Flash_flash_data+0xf400a6d0>
    a7c4:	000b883a 	mov	r5,zero
    a7c8:	002b883a 	mov	r21,zero
    a7cc:	003f0a06 	br	a3f8 <__alt_mem_Flash_flash_data+0xf400a3f8>
    a7d0:	01400404 	movi	r5,16
    a7d4:	282b883a 	mov	r21,r5
    a7d8:	003f0706 	br	a3f8 <__alt_mem_Flash_flash_data+0xf400a3f8>
    a7dc:	01400404 	movi	r5,16
    a7e0:	2805883a 	mov	r2,r5
    a7e4:	003ecd06 	br	a31c <__alt_mem_Flash_flash_data+0xf400a31c>
    a7e8:	0005883a 	mov	r2,zero
    a7ec:	0007883a 	mov	r3,zero
    a7f0:	003f1e06 	br	a46c <__alt_mem_Flash_flash_data+0xf400a46c>
    a7f4:	00800404 	movi	r2,16
    a7f8:	1007883a 	mov	r3,r2
    a7fc:	003f1b06 	br	a46c <__alt_mem_Flash_flash_data+0xf400a46c>
    a800:	000b883a 	mov	r5,zero
    a804:	0005883a 	mov	r2,zero
    a808:	003ec406 	br	a31c <__alt_mem_Flash_flash_data+0xf400a31c>
    a80c:	413f952e 	bgeu	r8,r4,a664 <__alt_mem_Flash_flash_data+0xf400a664>
    a810:	10bfff84 	addi	r2,r2,-2
    a814:	4451883a 	add	r8,r8,r17
    a818:	003f9306 	br	a668 <__alt_mem_Flash_flash_data+0xf400a668>
    a81c:	2f3f7d2e 	bgeu	r5,fp,a614 <__alt_mem_Flash_flash_data+0xf400a614>
    a820:	b5bfff84 	addi	r22,r22,-2
    a824:	2c4b883a 	add	r5,r5,r17
    a828:	003f7b06 	br	a618 <__alt_mem_Flash_flash_data+0xf400a618>
    a82c:	34cd883a 	add	r6,r6,r19
    a830:	003f2a06 	br	a4dc <__alt_mem_Flash_flash_data+0xf400a4dc>
    a834:	8005883a 	mov	r2,r16
    a838:	003efe06 	br	a434 <__alt_mem_Flash_flash_data+0xf400a434>
    a83c:	81bfdb36 	bltu	r16,r6,a7ac <__alt_mem_Flash_flash_data+0xf400a7ac>
    a840:	300f883a 	mov	r7,r6
    a844:	0009883a 	mov	r4,zero
    a848:	003fa106 	br	a6d0 <__alt_mem_Flash_flash_data+0xf400a6d0>

0000a84c <udivmodsi4>:
    a84c:	2900182e 	bgeu	r5,r4,a8b0 <udivmodsi4+0x64>
    a850:	28001716 	blt	r5,zero,a8b0 <udivmodsi4+0x64>
    a854:	00800804 	movi	r2,32
    a858:	00c00044 	movi	r3,1
    a85c:	00000206 	br	a868 <udivmodsi4+0x1c>
    a860:	10001126 	beq	r2,zero,a8a8 <udivmodsi4+0x5c>
    a864:	28000516 	blt	r5,zero,a87c <udivmodsi4+0x30>
    a868:	294b883a 	add	r5,r5,r5
    a86c:	10bfffc4 	addi	r2,r2,-1
    a870:	18c7883a 	add	r3,r3,r3
    a874:	293ffa36 	bltu	r5,r4,a860 <__alt_mem_Flash_flash_data+0xf400a860>
    a878:	18000b26 	beq	r3,zero,a8a8 <udivmodsi4+0x5c>
    a87c:	0005883a 	mov	r2,zero
    a880:	21400236 	bltu	r4,r5,a88c <udivmodsi4+0x40>
    a884:	2149c83a 	sub	r4,r4,r5
    a888:	10c4b03a 	or	r2,r2,r3
    a88c:	1806d07a 	srli	r3,r3,1
    a890:	280ad07a 	srli	r5,r5,1
    a894:	183ffa1e 	bne	r3,zero,a880 <__alt_mem_Flash_flash_data+0xf400a880>
    a898:	3000011e 	bne	r6,zero,a8a0 <udivmodsi4+0x54>
    a89c:	f800283a 	ret
    a8a0:	2005883a 	mov	r2,r4
    a8a4:	f800283a 	ret
    a8a8:	0005883a 	mov	r2,zero
    a8ac:	003ffa06 	br	a898 <__alt_mem_Flash_flash_data+0xf400a898>
    a8b0:	00c00044 	movi	r3,1
    a8b4:	003ff106 	br	a87c <__alt_mem_Flash_flash_data+0xf400a87c>

0000a8b8 <__divsi3>:
    a8b8:	defffe04 	addi	sp,sp,-8
    a8bc:	dfc00115 	stw	ra,4(sp)
    a8c0:	dc000015 	stw	r16,0(sp)
    a8c4:	20000b16 	blt	r4,zero,a8f4 <__divsi3+0x3c>
    a8c8:	0021883a 	mov	r16,zero
    a8cc:	28000c16 	blt	r5,zero,a900 <__divsi3+0x48>
    a8d0:	000d883a 	mov	r6,zero
    a8d4:	000a84c0 	call	a84c <udivmodsi4>
    a8d8:	0407c83a 	sub	r3,zero,r16
    a8dc:	1884f03a 	xor	r2,r3,r2
    a8e0:	1405883a 	add	r2,r2,r16
    a8e4:	dfc00117 	ldw	ra,4(sp)
    a8e8:	dc000017 	ldw	r16,0(sp)
    a8ec:	dec00204 	addi	sp,sp,8
    a8f0:	f800283a 	ret
    a8f4:	0109c83a 	sub	r4,zero,r4
    a8f8:	04000044 	movi	r16,1
    a8fc:	283ff40e 	bge	r5,zero,a8d0 <__alt_mem_Flash_flash_data+0xf400a8d0>
    a900:	014bc83a 	sub	r5,zero,r5
    a904:	8400005c 	xori	r16,r16,1
    a908:	003ff106 	br	a8d0 <__alt_mem_Flash_flash_data+0xf400a8d0>

0000a90c <__modsi3>:
    a90c:	defffd04 	addi	sp,sp,-12
    a910:	dfc00215 	stw	ra,8(sp)
    a914:	dc400115 	stw	r17,4(sp)
    a918:	dc000015 	stw	r16,0(sp)
    a91c:	20000c16 	blt	r4,zero,a950 <__modsi3+0x44>
    a920:	0023883a 	mov	r17,zero
    a924:	0021883a 	mov	r16,zero
    a928:	28000d16 	blt	r5,zero,a960 <__modsi3+0x54>
    a92c:	01800044 	movi	r6,1
    a930:	000a84c0 	call	a84c <udivmodsi4>
    a934:	1404f03a 	xor	r2,r2,r16
    a938:	8885883a 	add	r2,r17,r2
    a93c:	dfc00217 	ldw	ra,8(sp)
    a940:	dc400117 	ldw	r17,4(sp)
    a944:	dc000017 	ldw	r16,0(sp)
    a948:	dec00304 	addi	sp,sp,12
    a94c:	f800283a 	ret
    a950:	0109c83a 	sub	r4,zero,r4
    a954:	04400044 	movi	r17,1
    a958:	043fffc4 	movi	r16,-1
    a95c:	283ff30e 	bge	r5,zero,a92c <__alt_mem_Flash_flash_data+0xf400a92c>
    a960:	014bc83a 	sub	r5,zero,r5
    a964:	003ff106 	br	a92c <__alt_mem_Flash_flash_data+0xf400a92c>

0000a968 <__udivsi3>:
    a968:	000d883a 	mov	r6,zero
    a96c:	000a84c1 	jmpi	a84c <udivmodsi4>

0000a970 <__umodsi3>:
    a970:	01800044 	movi	r6,1
    a974:	000a84c1 	jmpi	a84c <udivmodsi4>

0000a978 <__adddf3>:
    a978:	02000434 	movhi	r8,16
    a97c:	423fffc4 	addi	r8,r8,-1
    a980:	defffb04 	addi	sp,sp,-20
    a984:	2a12703a 	and	r9,r5,r8
    a988:	2806d7fa 	srli	r3,r5,31
    a98c:	3a10703a 	and	r8,r7,r8
    a990:	3804d53a 	srli	r2,r7,20
    a994:	3014d77a 	srli	r10,r6,29
    a998:	dc000015 	stw	r16,0(sp)
    a99c:	481290fa 	slli	r9,r9,3
    a9a0:	2820d53a 	srli	r16,r5,20
    a9a4:	401090fa 	slli	r8,r8,3
    a9a8:	200ad77a 	srli	r5,r4,29
    a9ac:	380ed7fa 	srli	r7,r7,31
    a9b0:	dc800215 	stw	r18,8(sp)
    a9b4:	dc400115 	stw	r17,4(sp)
    a9b8:	dfc00415 	stw	ra,16(sp)
    a9bc:	dcc00315 	stw	r19,12(sp)
    a9c0:	1c803fcc 	andi	r18,r3,255
    a9c4:	8401ffcc 	andi	r16,r16,2047
    a9c8:	494ab03a 	or	r5,r9,r5
    a9cc:	202290fa 	slli	r17,r4,3
    a9d0:	1081ffcc 	andi	r2,r2,2047
    a9d4:	4290b03a 	or	r8,r8,r10
    a9d8:	300c90fa 	slli	r6,r6,3
    a9dc:	91c07026 	beq	r18,r7,aba0 <__adddf3+0x228>
    a9e0:	8087c83a 	sub	r3,r16,r2
    a9e4:	00c0b30e 	bge	zero,r3,acb4 <__adddf3+0x33c>
    a9e8:	10002a1e 	bne	r2,zero,aa94 <__adddf3+0x11c>
    a9ec:	4184b03a 	or	r2,r8,r6
    a9f0:	1000991e 	bne	r2,zero,ac58 <__adddf3+0x2e0>
    a9f4:	888001cc 	andi	r2,r17,7
    a9f8:	10005b26 	beq	r2,zero,ab68 <__adddf3+0x1f0>
    a9fc:	88c003cc 	andi	r3,r17,15
    aa00:	00800104 	movi	r2,4
    aa04:	18805826 	beq	r3,r2,ab68 <__adddf3+0x1f0>
    aa08:	89800104 	addi	r6,r17,4
    aa0c:	3463803a 	cmpltu	r17,r6,r17
    aa10:	2c4b883a 	add	r5,r5,r17
    aa14:	2880202c 	andhi	r2,r5,128
    aa18:	9007883a 	mov	r3,r18
    aa1c:	3023883a 	mov	r17,r6
    aa20:	10005426 	beq	r2,zero,ab74 <__adddf3+0x1fc>
    aa24:	84000044 	addi	r16,r16,1
    aa28:	0081ffc4 	movi	r2,2047
    aa2c:	8080c126 	beq	r16,r2,ad34 <__adddf3+0x3bc>
    aa30:	013fe034 	movhi	r4,65408
    aa34:	213fffc4 	addi	r4,r4,-1
    aa38:	290a703a 	and	r5,r5,r4
    aa3c:	2804977a 	slli	r2,r5,29
    aa40:	280a927a 	slli	r5,r5,9
    aa44:	8822d0fa 	srli	r17,r17,3
    aa48:	8401ffcc 	andi	r16,r16,2047
    aa4c:	2808d33a 	srli	r4,r5,12
    aa50:	1444b03a 	or	r2,r2,r17
    aa54:	8401ffcc 	andi	r16,r16,2047
    aa58:	800a953a 	slli	r5,r16,20
    aa5c:	18c03fcc 	andi	r3,r3,255
    aa60:	04000434 	movhi	r16,16
    aa64:	180697fa 	slli	r3,r3,31
    aa68:	843fffc4 	addi	r16,r16,-1
    aa6c:	2420703a 	and	r16,r4,r16
    aa70:	8160b03a 	or	r16,r16,r5
    aa74:	80c6b03a 	or	r3,r16,r3
    aa78:	dfc00417 	ldw	ra,16(sp)
    aa7c:	dcc00317 	ldw	r19,12(sp)
    aa80:	dc800217 	ldw	r18,8(sp)
    aa84:	dc400117 	ldw	r17,4(sp)
    aa88:	dc000017 	ldw	r16,0(sp)
    aa8c:	dec00504 	addi	sp,sp,20
    aa90:	f800283a 	ret
    aa94:	0081ffc4 	movi	r2,2047
    aa98:	80bfd626 	beq	r16,r2,a9f4 <__alt_mem_Flash_flash_data+0xf400a9f4>
    aa9c:	42002034 	orhi	r8,r8,128
    aaa0:	00800e04 	movi	r2,56
    aaa4:	10c0a616 	blt	r2,r3,ad40 <__adddf3+0x3c8>
    aaa8:	008007c4 	movi	r2,31
    aaac:	10c0c916 	blt	r2,r3,add4 <__adddf3+0x45c>
    aab0:	00800804 	movi	r2,32
    aab4:	10c5c83a 	sub	r2,r2,r3
    aab8:	408e983a 	sll	r7,r8,r2
    aabc:	30c8d83a 	srl	r4,r6,r3
    aac0:	3084983a 	sll	r2,r6,r2
    aac4:	40c6d83a 	srl	r3,r8,r3
    aac8:	390cb03a 	or	r6,r7,r4
    aacc:	1004c03a 	cmpne	r2,r2,zero
    aad0:	308cb03a 	or	r6,r6,r2
    aad4:	898dc83a 	sub	r6,r17,r6
    aad8:	89a3803a 	cmpltu	r17,r17,r6
    aadc:	28cbc83a 	sub	r5,r5,r3
    aae0:	2c4bc83a 	sub	r5,r5,r17
    aae4:	3023883a 	mov	r17,r6
    aae8:	2880202c 	andhi	r2,r5,128
    aaec:	10006d26 	beq	r2,zero,aca4 <__adddf3+0x32c>
    aaf0:	04c02034 	movhi	r19,128
    aaf4:	9cffffc4 	addi	r19,r19,-1
    aaf8:	2ce6703a 	and	r19,r5,r19
    aafc:	98007e26 	beq	r19,zero,acf8 <__adddf3+0x380>
    ab00:	9809883a 	mov	r4,r19
    ab04:	000cf140 	call	cf14 <__clzsi2>
    ab08:	10fffe04 	addi	r3,r2,-8
    ab0c:	010007c4 	movi	r4,31
    ab10:	20c07f16 	blt	r4,r3,ad10 <__adddf3+0x398>
    ab14:	01400a04 	movi	r5,40
    ab18:	2885c83a 	sub	r2,r5,r2
    ab1c:	888ad83a 	srl	r5,r17,r2
    ab20:	98e6983a 	sll	r19,r19,r3
    ab24:	88e2983a 	sll	r17,r17,r3
    ab28:	2ce6b03a 	or	r19,r5,r19
    ab2c:	1c007c16 	blt	r3,r16,ad20 <__adddf3+0x3a8>
    ab30:	1c21c83a 	sub	r16,r3,r16
    ab34:	81400044 	addi	r5,r16,1
    ab38:	00c007c4 	movi	r3,31
    ab3c:	19409816 	blt	r3,r5,ada0 <__adddf3+0x428>
    ab40:	1c21c83a 	sub	r16,r3,r16
    ab44:	8c08983a 	sll	r4,r17,r16
    ab48:	8946d83a 	srl	r3,r17,r5
    ab4c:	9c20983a 	sll	r16,r19,r16
    ab50:	2008c03a 	cmpne	r4,r4,zero
    ab54:	994ad83a 	srl	r5,r19,r5
    ab58:	1c06b03a 	or	r3,r3,r16
    ab5c:	1922b03a 	or	r17,r3,r4
    ab60:	0021883a 	mov	r16,zero
    ab64:	003fa306 	br	a9f4 <__alt_mem_Flash_flash_data+0xf400a9f4>
    ab68:	2880202c 	andhi	r2,r5,128
    ab6c:	9007883a 	mov	r3,r18
    ab70:	103fac1e 	bne	r2,zero,aa24 <__alt_mem_Flash_flash_data+0xf400aa24>
    ab74:	2804977a 	slli	r2,r5,29
    ab78:	8822d0fa 	srli	r17,r17,3
    ab7c:	0101ffc4 	movi	r4,2047
    ab80:	280ad0fa 	srli	r5,r5,3
    ab84:	1444b03a 	or	r2,r2,r17
    ab88:	81002c26 	beq	r16,r4,ac3c <__adddf3+0x2c4>
    ab8c:	8120703a 	and	r16,r16,r4
    ab90:	01000434 	movhi	r4,16
    ab94:	213fffc4 	addi	r4,r4,-1
    ab98:	2908703a 	and	r4,r5,r4
    ab9c:	003fad06 	br	aa54 <__alt_mem_Flash_flash_data+0xf400aa54>
    aba0:	8089c83a 	sub	r4,r16,r2
    aba4:	01006a0e 	bge	zero,r4,ad50 <__adddf3+0x3d8>
    aba8:	10003326 	beq	r2,zero,ac78 <__adddf3+0x300>
    abac:	0081ffc4 	movi	r2,2047
    abb0:	80bf9026 	beq	r16,r2,a9f4 <__alt_mem_Flash_flash_data+0xf400a9f4>
    abb4:	42002034 	orhi	r8,r8,128
    abb8:	00800e04 	movi	r2,56
    abbc:	1100b116 	blt	r2,r4,ae84 <__adddf3+0x50c>
    abc0:	008007c4 	movi	r2,31
    abc4:	1100e216 	blt	r2,r4,af50 <__adddf3+0x5d8>
    abc8:	00800804 	movi	r2,32
    abcc:	1105c83a 	sub	r2,r2,r4
    abd0:	4092983a 	sll	r9,r8,r2
    abd4:	310ed83a 	srl	r7,r6,r4
    abd8:	3084983a 	sll	r2,r6,r2
    abdc:	4110d83a 	srl	r8,r8,r4
    abe0:	49ccb03a 	or	r6,r9,r7
    abe4:	1004c03a 	cmpne	r2,r2,zero
    abe8:	308cb03a 	or	r6,r6,r2
    abec:	344d883a 	add	r6,r6,r17
    abf0:	3463803a 	cmpltu	r17,r6,r17
    abf4:	414b883a 	add	r5,r8,r5
    abf8:	2c4b883a 	add	r5,r5,r17
    abfc:	3023883a 	mov	r17,r6
    ac00:	2880202c 	andhi	r2,r5,128
    ac04:	10002726 	beq	r2,zero,aca4 <__adddf3+0x32c>
    ac08:	84000044 	addi	r16,r16,1
    ac0c:	0081ffc4 	movi	r2,2047
    ac10:	8080ae26 	beq	r16,r2,aecc <__adddf3+0x554>
    ac14:	00bfe034 	movhi	r2,65408
    ac18:	10bfffc4 	addi	r2,r2,-1
    ac1c:	288a703a 	and	r5,r5,r2
    ac20:	880cd07a 	srli	r6,r17,1
    ac24:	280897fa 	slli	r4,r5,31
    ac28:	88c0004c 	andi	r3,r17,1
    ac2c:	30e2b03a 	or	r17,r6,r3
    ac30:	280ad07a 	srli	r5,r5,1
    ac34:	8922b03a 	or	r17,r17,r4
    ac38:	003f6e06 	br	a9f4 <__alt_mem_Flash_flash_data+0xf400a9f4>
    ac3c:	1148b03a 	or	r4,r2,r5
    ac40:	20003c26 	beq	r4,zero,ad34 <__adddf3+0x3bc>
    ac44:	29000234 	orhi	r4,r5,8
    ac48:	01400434 	movhi	r5,16
    ac4c:	297fffc4 	addi	r5,r5,-1
    ac50:	2148703a 	and	r4,r4,r5
    ac54:	003f7f06 	br	aa54 <__alt_mem_Flash_flash_data+0xf400aa54>
    ac58:	18ffffc4 	addi	r3,r3,-1
    ac5c:	18004d1e 	bne	r3,zero,ad94 <__adddf3+0x41c>
    ac60:	898dc83a 	sub	r6,r17,r6
    ac64:	89a3803a 	cmpltu	r17,r17,r6
    ac68:	2a0bc83a 	sub	r5,r5,r8
    ac6c:	2c4bc83a 	sub	r5,r5,r17
    ac70:	3023883a 	mov	r17,r6
    ac74:	003f9c06 	br	aae8 <__alt_mem_Flash_flash_data+0xf400aae8>
    ac78:	4184b03a 	or	r2,r8,r6
    ac7c:	103f5d26 	beq	r2,zero,a9f4 <__alt_mem_Flash_flash_data+0xf400a9f4>
    ac80:	213fffc4 	addi	r4,r4,-1
    ac84:	203fd926 	beq	r4,zero,abec <__alt_mem_Flash_flash_data+0xf400abec>
    ac88:	0081ffc4 	movi	r2,2047
    ac8c:	80bfca1e 	bne	r16,r2,abb8 <__alt_mem_Flash_flash_data+0xf400abb8>
    ac90:	003f5806 	br	a9f4 <__alt_mem_Flash_flash_data+0xf400a9f4>
    ac94:	10c8b03a 	or	r4,r2,r3
    ac98:	20008b26 	beq	r4,zero,aec8 <__adddf3+0x550>
    ac9c:	100b883a 	mov	r5,r2
    aca0:	1823883a 	mov	r17,r3
    aca4:	888001cc 	andi	r2,r17,7
    aca8:	103f541e 	bne	r2,zero,a9fc <__alt_mem_Flash_flash_data+0xf400a9fc>
    acac:	9007883a 	mov	r3,r18
    acb0:	003fb006 	br	ab74 <__alt_mem_Flash_flash_data+0xf400ab74>
    acb4:	1800531e 	bne	r3,zero,ae04 <__adddf3+0x48c>
    acb8:	80800044 	addi	r2,r16,1
    acbc:	1081ffcc 	andi	r2,r2,2047
    acc0:	00c00044 	movi	r3,1
    acc4:	1880990e 	bge	r3,r2,af2c <__adddf3+0x5b4>
    acc8:	8985c83a 	sub	r2,r17,r6
    accc:	8887803a 	cmpltu	r3,r17,r2
    acd0:	2a27c83a 	sub	r19,r5,r8
    acd4:	98e7c83a 	sub	r19,r19,r3
    acd8:	98c0202c 	andhi	r3,r19,128
    acdc:	18006226 	beq	r3,zero,ae68 <__adddf3+0x4f0>
    ace0:	3463c83a 	sub	r17,r6,r17
    ace4:	4151c83a 	sub	r8,r8,r5
    ace8:	344d803a 	cmpltu	r6,r6,r17
    acec:	41a7c83a 	sub	r19,r8,r6
    acf0:	3825883a 	mov	r18,r7
    acf4:	983f821e 	bne	r19,zero,ab00 <__alt_mem_Flash_flash_data+0xf400ab00>
    acf8:	8809883a 	mov	r4,r17
    acfc:	000cf140 	call	cf14 <__clzsi2>
    ad00:	10800804 	addi	r2,r2,32
    ad04:	10fffe04 	addi	r3,r2,-8
    ad08:	010007c4 	movi	r4,31
    ad0c:	20ff810e 	bge	r4,r3,ab14 <__alt_mem_Flash_flash_data+0xf400ab14>
    ad10:	14fff604 	addi	r19,r2,-40
    ad14:	8ce6983a 	sll	r19,r17,r19
    ad18:	0023883a 	mov	r17,zero
    ad1c:	1c3f840e 	bge	r3,r16,ab30 <__alt_mem_Flash_flash_data+0xf400ab30>
    ad20:	017fe034 	movhi	r5,65408
    ad24:	297fffc4 	addi	r5,r5,-1
    ad28:	80e1c83a 	sub	r16,r16,r3
    ad2c:	994a703a 	and	r5,r19,r5
    ad30:	003f3006 	br	a9f4 <__alt_mem_Flash_flash_data+0xf400a9f4>
    ad34:	0009883a 	mov	r4,zero
    ad38:	0005883a 	mov	r2,zero
    ad3c:	003f4506 	br	aa54 <__alt_mem_Flash_flash_data+0xf400aa54>
    ad40:	418cb03a 	or	r6,r8,r6
    ad44:	300cc03a 	cmpne	r6,r6,zero
    ad48:	0007883a 	mov	r3,zero
    ad4c:	003f6106 	br	aad4 <__alt_mem_Flash_flash_data+0xf400aad4>
    ad50:	2000921e 	bne	r4,zero,af9c <__adddf3+0x624>
    ad54:	80800044 	addi	r2,r16,1
    ad58:	11c1ffcc 	andi	r7,r2,2047
    ad5c:	01000044 	movi	r4,1
    ad60:	21c0610e 	bge	r4,r7,aee8 <__adddf3+0x570>
    ad64:	0101ffc4 	movi	r4,2047
    ad68:	1100a326 	beq	r2,r4,aff8 <__adddf3+0x680>
    ad6c:	344d883a 	add	r6,r6,r17
    ad70:	3463803a 	cmpltu	r17,r6,r17
    ad74:	414b883a 	add	r5,r8,r5
    ad78:	2c4b883a 	add	r5,r5,r17
    ad7c:	282297fa 	slli	r17,r5,31
    ad80:	300cd07a 	srli	r6,r6,1
    ad84:	280ad07a 	srli	r5,r5,1
    ad88:	1021883a 	mov	r16,r2
    ad8c:	89a2b03a 	or	r17,r17,r6
    ad90:	003f1806 	br	a9f4 <__alt_mem_Flash_flash_data+0xf400a9f4>
    ad94:	0081ffc4 	movi	r2,2047
    ad98:	80bf411e 	bne	r16,r2,aaa0 <__alt_mem_Flash_flash_data+0xf400aaa0>
    ad9c:	003f1506 	br	a9f4 <__alt_mem_Flash_flash_data+0xf400a9f4>
    ada0:	80bff844 	addi	r2,r16,-31
    ada4:	00c00804 	movi	r3,32
    ada8:	9884d83a 	srl	r2,r19,r2
    adac:	28c04a26 	beq	r5,r3,aed8 <__adddf3+0x560>
    adb0:	00c00fc4 	movi	r3,63
    adb4:	1c21c83a 	sub	r16,r3,r16
    adb8:	9c26983a 	sll	r19,r19,r16
    adbc:	9c62b03a 	or	r17,r19,r17
    adc0:	8822c03a 	cmpne	r17,r17,zero
    adc4:	88a2b03a 	or	r17,r17,r2
    adc8:	000b883a 	mov	r5,zero
    adcc:	0021883a 	mov	r16,zero
    add0:	003fb406 	br	aca4 <__alt_mem_Flash_flash_data+0xf400aca4>
    add4:	18bff804 	addi	r2,r3,-32
    add8:	01000804 	movi	r4,32
    addc:	4084d83a 	srl	r2,r8,r2
    ade0:	19003f26 	beq	r3,r4,aee0 <__adddf3+0x568>
    ade4:	01001004 	movi	r4,64
    ade8:	20c7c83a 	sub	r3,r4,r3
    adec:	40d0983a 	sll	r8,r8,r3
    adf0:	418cb03a 	or	r6,r8,r6
    adf4:	300cc03a 	cmpne	r6,r6,zero
    adf8:	308cb03a 	or	r6,r6,r2
    adfc:	0007883a 	mov	r3,zero
    ae00:	003f3406 	br	aad4 <__alt_mem_Flash_flash_data+0xf400aad4>
    ae04:	80002326 	beq	r16,zero,ae94 <__adddf3+0x51c>
    ae08:	0101ffc4 	movi	r4,2047
    ae0c:	11005e26 	beq	r2,r4,af88 <__adddf3+0x610>
    ae10:	00c7c83a 	sub	r3,zero,r3
    ae14:	29402034 	orhi	r5,r5,128
    ae18:	01000e04 	movi	r4,56
    ae1c:	20c07216 	blt	r4,r3,afe8 <__adddf3+0x670>
    ae20:	010007c4 	movi	r4,31
    ae24:	20c0ce16 	blt	r4,r3,b160 <__adddf3+0x7e8>
    ae28:	01000804 	movi	r4,32
    ae2c:	20c9c83a 	sub	r4,r4,r3
    ae30:	2914983a 	sll	r10,r5,r4
    ae34:	88d2d83a 	srl	r9,r17,r3
    ae38:	8908983a 	sll	r4,r17,r4
    ae3c:	28c6d83a 	srl	r3,r5,r3
    ae40:	5262b03a 	or	r17,r10,r9
    ae44:	2008c03a 	cmpne	r4,r4,zero
    ae48:	8922b03a 	or	r17,r17,r4
    ae4c:	3463c83a 	sub	r17,r6,r17
    ae50:	40c7c83a 	sub	r3,r8,r3
    ae54:	344d803a 	cmpltu	r6,r6,r17
    ae58:	198bc83a 	sub	r5,r3,r6
    ae5c:	1021883a 	mov	r16,r2
    ae60:	3825883a 	mov	r18,r7
    ae64:	003f2006 	br	aae8 <__alt_mem_Flash_flash_data+0xf400aae8>
    ae68:	9886b03a 	or	r3,r19,r2
    ae6c:	1800141e 	bne	r3,zero,aec0 <__adddf3+0x548>
    ae70:	0007883a 	mov	r3,zero
    ae74:	000b883a 	mov	r5,zero
    ae78:	0023883a 	mov	r17,zero
    ae7c:	0021883a 	mov	r16,zero
    ae80:	003f3c06 	br	ab74 <__alt_mem_Flash_flash_data+0xf400ab74>
    ae84:	418cb03a 	or	r6,r8,r6
    ae88:	300cc03a 	cmpne	r6,r6,zero
    ae8c:	0011883a 	mov	r8,zero
    ae90:	003f5606 	br	abec <__alt_mem_Flash_flash_data+0xf400abec>
    ae94:	2c48b03a 	or	r4,r5,r17
    ae98:	20003b26 	beq	r4,zero,af88 <__adddf3+0x610>
    ae9c:	00c6303a 	nor	r3,zero,r3
    aea0:	1800371e 	bne	r3,zero,af80 <__adddf3+0x608>
    aea4:	3463c83a 	sub	r17,r6,r17
    aea8:	414bc83a 	sub	r5,r8,r5
    aeac:	344d803a 	cmpltu	r6,r6,r17
    aeb0:	298bc83a 	sub	r5,r5,r6
    aeb4:	1021883a 	mov	r16,r2
    aeb8:	3825883a 	mov	r18,r7
    aebc:	003f0a06 	br	aae8 <__alt_mem_Flash_flash_data+0xf400aae8>
    aec0:	1023883a 	mov	r17,r2
    aec4:	003f0d06 	br	aafc <__alt_mem_Flash_flash_data+0xf400aafc>
    aec8:	0007883a 	mov	r3,zero
    aecc:	000b883a 	mov	r5,zero
    aed0:	0023883a 	mov	r17,zero
    aed4:	003f2706 	br	ab74 <__alt_mem_Flash_flash_data+0xf400ab74>
    aed8:	0027883a 	mov	r19,zero
    aedc:	003fb706 	br	adbc <__alt_mem_Flash_flash_data+0xf400adbc>
    aee0:	0011883a 	mov	r8,zero
    aee4:	003fc206 	br	adf0 <__alt_mem_Flash_flash_data+0xf400adf0>
    aee8:	2c44b03a 	or	r2,r5,r17
    aeec:	8000871e 	bne	r16,zero,b10c <__adddf3+0x794>
    aef0:	1000b126 	beq	r2,zero,b1b8 <__adddf3+0x840>
    aef4:	4184b03a 	or	r2,r8,r6
    aef8:	103ebe26 	beq	r2,zero,a9f4 <__alt_mem_Flash_flash_data+0xf400a9f4>
    aefc:	3445883a 	add	r2,r6,r17
    af00:	1463803a 	cmpltu	r17,r2,r17
    af04:	414b883a 	add	r5,r8,r5
    af08:	2c4b883a 	add	r5,r5,r17
    af0c:	28c0202c 	andhi	r3,r5,128
    af10:	1023883a 	mov	r17,r2
    af14:	183f6326 	beq	r3,zero,aca4 <__alt_mem_Flash_flash_data+0xf400aca4>
    af18:	00bfe034 	movhi	r2,65408
    af1c:	10bfffc4 	addi	r2,r2,-1
    af20:	2021883a 	mov	r16,r4
    af24:	288a703a 	and	r5,r5,r2
    af28:	003eb206 	br	a9f4 <__alt_mem_Flash_flash_data+0xf400a9f4>
    af2c:	2c44b03a 	or	r2,r5,r17
    af30:	8000251e 	bne	r16,zero,afc8 <__adddf3+0x650>
    af34:	10004b1e 	bne	r2,zero,b064 <__adddf3+0x6ec>
    af38:	4184b03a 	or	r2,r8,r6
    af3c:	103fe226 	beq	r2,zero,aec8 <__alt_mem_Flash_flash_data+0xf400aec8>
    af40:	400b883a 	mov	r5,r8
    af44:	3023883a 	mov	r17,r6
    af48:	3825883a 	mov	r18,r7
    af4c:	003ea906 	br	a9f4 <__alt_mem_Flash_flash_data+0xf400a9f4>
    af50:	20bff804 	addi	r2,r4,-32
    af54:	01c00804 	movi	r7,32
    af58:	4084d83a 	srl	r2,r8,r2
    af5c:	21c07e26 	beq	r4,r7,b158 <__adddf3+0x7e0>
    af60:	01c01004 	movi	r7,64
    af64:	3909c83a 	sub	r4,r7,r4
    af68:	4110983a 	sll	r8,r8,r4
    af6c:	418cb03a 	or	r6,r8,r6
    af70:	300cc03a 	cmpne	r6,r6,zero
    af74:	308cb03a 	or	r6,r6,r2
    af78:	0011883a 	mov	r8,zero
    af7c:	003f1b06 	br	abec <__alt_mem_Flash_flash_data+0xf400abec>
    af80:	0101ffc4 	movi	r4,2047
    af84:	113fa41e 	bne	r2,r4,ae18 <__alt_mem_Flash_flash_data+0xf400ae18>
    af88:	400b883a 	mov	r5,r8
    af8c:	3023883a 	mov	r17,r6
    af90:	1021883a 	mov	r16,r2
    af94:	3825883a 	mov	r18,r7
    af98:	003e9606 	br	a9f4 <__alt_mem_Flash_flash_data+0xf400a9f4>
    af9c:	80001a1e 	bne	r16,zero,b008 <__adddf3+0x690>
    afa0:	2c4eb03a 	or	r7,r5,r17
    afa4:	38005526 	beq	r7,zero,b0fc <__adddf3+0x784>
    afa8:	0108303a 	nor	r4,zero,r4
    afac:	2000511e 	bne	r4,zero,b0f4 <__adddf3+0x77c>
    afb0:	89a3883a 	add	r17,r17,r6
    afb4:	414b883a 	add	r5,r8,r5
    afb8:	898d803a 	cmpltu	r6,r17,r6
    afbc:	298b883a 	add	r5,r5,r6
    afc0:	1021883a 	mov	r16,r2
    afc4:	003f0e06 	br	ac00 <__alt_mem_Flash_flash_data+0xf400ac00>
    afc8:	1000341e 	bne	r2,zero,b09c <__adddf3+0x724>
    afcc:	4184b03a 	or	r2,r8,r6
    afd0:	10006f26 	beq	r2,zero,b190 <__adddf3+0x818>
    afd4:	400b883a 	mov	r5,r8
    afd8:	3023883a 	mov	r17,r6
    afdc:	3825883a 	mov	r18,r7
    afe0:	0401ffc4 	movi	r16,2047
    afe4:	003e8306 	br	a9f4 <__alt_mem_Flash_flash_data+0xf400a9f4>
    afe8:	2c62b03a 	or	r17,r5,r17
    afec:	8822c03a 	cmpne	r17,r17,zero
    aff0:	0007883a 	mov	r3,zero
    aff4:	003f9506 	br	ae4c <__alt_mem_Flash_flash_data+0xf400ae4c>
    aff8:	1021883a 	mov	r16,r2
    affc:	000b883a 	mov	r5,zero
    b000:	0023883a 	mov	r17,zero
    b004:	003edb06 	br	ab74 <__alt_mem_Flash_flash_data+0xf400ab74>
    b008:	01c1ffc4 	movi	r7,2047
    b00c:	11c03b26 	beq	r2,r7,b0fc <__adddf3+0x784>
    b010:	0109c83a 	sub	r4,zero,r4
    b014:	29402034 	orhi	r5,r5,128
    b018:	01c00e04 	movi	r7,56
    b01c:	39006216 	blt	r7,r4,b1a8 <__adddf3+0x830>
    b020:	01c007c4 	movi	r7,31
    b024:	39006b16 	blt	r7,r4,b1d4 <__adddf3+0x85c>
    b028:	01c00804 	movi	r7,32
    b02c:	390fc83a 	sub	r7,r7,r4
    b030:	29d4983a 	sll	r10,r5,r7
    b034:	8912d83a 	srl	r9,r17,r4
    b038:	89ce983a 	sll	r7,r17,r7
    b03c:	2908d83a 	srl	r4,r5,r4
    b040:	5262b03a 	or	r17,r10,r9
    b044:	380ac03a 	cmpne	r5,r7,zero
    b048:	8962b03a 	or	r17,r17,r5
    b04c:	89a3883a 	add	r17,r17,r6
    b050:	2211883a 	add	r8,r4,r8
    b054:	898d803a 	cmpltu	r6,r17,r6
    b058:	418b883a 	add	r5,r8,r6
    b05c:	1021883a 	mov	r16,r2
    b060:	003ee706 	br	ac00 <__alt_mem_Flash_flash_data+0xf400ac00>
    b064:	4184b03a 	or	r2,r8,r6
    b068:	103e6226 	beq	r2,zero,a9f4 <__alt_mem_Flash_flash_data+0xf400a9f4>
    b06c:	8987c83a 	sub	r3,r17,r6
    b070:	88c9803a 	cmpltu	r4,r17,r3
    b074:	2a05c83a 	sub	r2,r5,r8
    b078:	1105c83a 	sub	r2,r2,r4
    b07c:	1100202c 	andhi	r4,r2,128
    b080:	203f0426 	beq	r4,zero,ac94 <__alt_mem_Flash_flash_data+0xf400ac94>
    b084:	3463c83a 	sub	r17,r6,r17
    b088:	414bc83a 	sub	r5,r8,r5
    b08c:	344d803a 	cmpltu	r6,r6,r17
    b090:	298bc83a 	sub	r5,r5,r6
    b094:	3825883a 	mov	r18,r7
    b098:	003e5606 	br	a9f4 <__alt_mem_Flash_flash_data+0xf400a9f4>
    b09c:	4184b03a 	or	r2,r8,r6
    b0a0:	10002b26 	beq	r2,zero,b150 <__adddf3+0x7d8>
    b0a4:	2804d0fa 	srli	r2,r5,3
    b0a8:	8822d0fa 	srli	r17,r17,3
    b0ac:	280a977a 	slli	r5,r5,29
    b0b0:	10c0022c 	andhi	r3,r2,8
    b0b4:	2c62b03a 	or	r17,r5,r17
    b0b8:	18000826 	beq	r3,zero,b0dc <__adddf3+0x764>
    b0bc:	4008d0fa 	srli	r4,r8,3
    b0c0:	20c0022c 	andhi	r3,r4,8
    b0c4:	1800051e 	bne	r3,zero,b0dc <__adddf3+0x764>
    b0c8:	300cd0fa 	srli	r6,r6,3
    b0cc:	4010977a 	slli	r8,r8,29
    b0d0:	2005883a 	mov	r2,r4
    b0d4:	3825883a 	mov	r18,r7
    b0d8:	41a2b03a 	or	r17,r8,r6
    b0dc:	880ad77a 	srli	r5,r17,29
    b0e0:	100490fa 	slli	r2,r2,3
    b0e4:	882290fa 	slli	r17,r17,3
    b0e8:	0401ffc4 	movi	r16,2047
    b0ec:	288ab03a 	or	r5,r5,r2
    b0f0:	003e4006 	br	a9f4 <__alt_mem_Flash_flash_data+0xf400a9f4>
    b0f4:	01c1ffc4 	movi	r7,2047
    b0f8:	11ffc71e 	bne	r2,r7,b018 <__alt_mem_Flash_flash_data+0xf400b018>
    b0fc:	400b883a 	mov	r5,r8
    b100:	3023883a 	mov	r17,r6
    b104:	1021883a 	mov	r16,r2
    b108:	003e3a06 	br	a9f4 <__alt_mem_Flash_flash_data+0xf400a9f4>
    b10c:	10002d26 	beq	r2,zero,b1c4 <__adddf3+0x84c>
    b110:	4184b03a 	or	r2,r8,r6
    b114:	10000e26 	beq	r2,zero,b150 <__adddf3+0x7d8>
    b118:	2804d0fa 	srli	r2,r5,3
    b11c:	8822d0fa 	srli	r17,r17,3
    b120:	280a977a 	slli	r5,r5,29
    b124:	10c0022c 	andhi	r3,r2,8
    b128:	2c62b03a 	or	r17,r5,r17
    b12c:	183feb26 	beq	r3,zero,b0dc <__alt_mem_Flash_flash_data+0xf400b0dc>
    b130:	4008d0fa 	srli	r4,r8,3
    b134:	20c0022c 	andhi	r3,r4,8
    b138:	183fe81e 	bne	r3,zero,b0dc <__alt_mem_Flash_flash_data+0xf400b0dc>
    b13c:	300cd0fa 	srli	r6,r6,3
    b140:	4010977a 	slli	r8,r8,29
    b144:	2005883a 	mov	r2,r4
    b148:	41a2b03a 	or	r17,r8,r6
    b14c:	003fe306 	br	b0dc <__alt_mem_Flash_flash_data+0xf400b0dc>
    b150:	0401ffc4 	movi	r16,2047
    b154:	003e2706 	br	a9f4 <__alt_mem_Flash_flash_data+0xf400a9f4>
    b158:	0011883a 	mov	r8,zero
    b15c:	003f8306 	br	af6c <__alt_mem_Flash_flash_data+0xf400af6c>
    b160:	193ff804 	addi	r4,r3,-32
    b164:	02400804 	movi	r9,32
    b168:	2908d83a 	srl	r4,r5,r4
    b16c:	1a402526 	beq	r3,r9,b204 <__adddf3+0x88c>
    b170:	02401004 	movi	r9,64
    b174:	48c7c83a 	sub	r3,r9,r3
    b178:	28ca983a 	sll	r5,r5,r3
    b17c:	2c62b03a 	or	r17,r5,r17
    b180:	8822c03a 	cmpne	r17,r17,zero
    b184:	8922b03a 	or	r17,r17,r4
    b188:	0007883a 	mov	r3,zero
    b18c:	003f2f06 	br	ae4c <__alt_mem_Flash_flash_data+0xf400ae4c>
    b190:	01402034 	movhi	r5,128
    b194:	0007883a 	mov	r3,zero
    b198:	297fffc4 	addi	r5,r5,-1
    b19c:	047ffe04 	movi	r17,-8
    b1a0:	0401ffc4 	movi	r16,2047
    b1a4:	003e7306 	br	ab74 <__alt_mem_Flash_flash_data+0xf400ab74>
    b1a8:	2c62b03a 	or	r17,r5,r17
    b1ac:	8822c03a 	cmpne	r17,r17,zero
    b1b0:	0009883a 	mov	r4,zero
    b1b4:	003fa506 	br	b04c <__alt_mem_Flash_flash_data+0xf400b04c>
    b1b8:	400b883a 	mov	r5,r8
    b1bc:	3023883a 	mov	r17,r6
    b1c0:	003e0c06 	br	a9f4 <__alt_mem_Flash_flash_data+0xf400a9f4>
    b1c4:	400b883a 	mov	r5,r8
    b1c8:	3023883a 	mov	r17,r6
    b1cc:	0401ffc4 	movi	r16,2047
    b1d0:	003e0806 	br	a9f4 <__alt_mem_Flash_flash_data+0xf400a9f4>
    b1d4:	21fff804 	addi	r7,r4,-32
    b1d8:	02400804 	movi	r9,32
    b1dc:	29ced83a 	srl	r7,r5,r7
    b1e0:	22400a26 	beq	r4,r9,b20c <__adddf3+0x894>
    b1e4:	02401004 	movi	r9,64
    b1e8:	4909c83a 	sub	r4,r9,r4
    b1ec:	290a983a 	sll	r5,r5,r4
    b1f0:	2c62b03a 	or	r17,r5,r17
    b1f4:	8822c03a 	cmpne	r17,r17,zero
    b1f8:	89e2b03a 	or	r17,r17,r7
    b1fc:	0009883a 	mov	r4,zero
    b200:	003f9206 	br	b04c <__alt_mem_Flash_flash_data+0xf400b04c>
    b204:	000b883a 	mov	r5,zero
    b208:	003fdc06 	br	b17c <__alt_mem_Flash_flash_data+0xf400b17c>
    b20c:	000b883a 	mov	r5,zero
    b210:	003ff706 	br	b1f0 <__alt_mem_Flash_flash_data+0xf400b1f0>

0000b214 <__divdf3>:
    b214:	defff204 	addi	sp,sp,-56
    b218:	dd000815 	stw	r20,32(sp)
    b21c:	2828d53a 	srli	r20,r5,20
    b220:	dd800a15 	stw	r22,40(sp)
    b224:	282cd7fa 	srli	r22,r5,31
    b228:	dc000415 	stw	r16,16(sp)
    b22c:	04000434 	movhi	r16,16
    b230:	df000c15 	stw	fp,48(sp)
    b234:	dcc00715 	stw	r19,28(sp)
    b238:	dc800615 	stw	r18,24(sp)
    b23c:	dc400515 	stw	r17,20(sp)
    b240:	843fffc4 	addi	r16,r16,-1
    b244:	dfc00d15 	stw	ra,52(sp)
    b248:	ddc00b15 	stw	r23,44(sp)
    b24c:	dd400915 	stw	r21,36(sp)
    b250:	a501ffcc 	andi	r20,r20,2047
    b254:	2025883a 	mov	r18,r4
    b258:	2027883a 	mov	r19,r4
    b25c:	2c22703a 	and	r17,r5,r16
    b260:	b7003fcc 	andi	fp,r22,255
    b264:	a0005e26 	beq	r20,zero,b3e0 <__divdf3+0x1cc>
    b268:	0081ffc4 	movi	r2,2047
    b26c:	a0803526 	beq	r20,r2,b344 <__divdf3+0x130>
    b270:	8c000434 	orhi	r16,r17,16
    b274:	2004d77a 	srli	r2,r4,29
    b278:	802090fa 	slli	r16,r16,3
    b27c:	202690fa 	slli	r19,r4,3
    b280:	a53f0044 	addi	r20,r20,-1023
    b284:	80a2b03a 	or	r17,r16,r2
    b288:	0025883a 	mov	r18,zero
    b28c:	0011883a 	mov	r8,zero
    b290:	380ad53a 	srli	r5,r7,20
    b294:	382ed7fa 	srli	r23,r7,31
    b298:	04000434 	movhi	r16,16
    b29c:	843fffc4 	addi	r16,r16,-1
    b2a0:	2941ffcc 	andi	r5,r5,2047
    b2a4:	302b883a 	mov	r21,r6
    b2a8:	3c20703a 	and	r16,r7,r16
    b2ac:	ba403fcc 	andi	r9,r23,255
    b2b0:	28006726 	beq	r5,zero,b450 <__divdf3+0x23c>
    b2b4:	0081ffc4 	movi	r2,2047
    b2b8:	28805f26 	beq	r5,r2,b438 <__divdf3+0x224>
    b2bc:	84000434 	orhi	r16,r16,16
    b2c0:	3004d77a 	srli	r2,r6,29
    b2c4:	802090fa 	slli	r16,r16,3
    b2c8:	302a90fa 	slli	r21,r6,3
    b2cc:	297f0044 	addi	r5,r5,-1023
    b2d0:	80a0b03a 	or	r16,r16,r2
    b2d4:	000f883a 	mov	r7,zero
    b2d8:	3c86b03a 	or	r3,r7,r18
    b2dc:	180690ba 	slli	r3,r3,2
    b2e0:	00800074 	movhi	r2,1
    b2e4:	10acc104 	addi	r2,r2,-19708
    b2e8:	1887883a 	add	r3,r3,r2
    b2ec:	18c00017 	ldw	r3,0(r3)
    b2f0:	b5c8f03a 	xor	r4,r22,r23
    b2f4:	200d883a 	mov	r6,r4
    b2f8:	24803fcc 	andi	r18,r4,255
    b2fc:	a169c83a 	sub	r20,r20,r5
    b300:	1800683a 	jmp	r3
    b304:	0000b54c 	andi	zero,zero,725
    b308:	0000b37c 	xorhi	zero,zero,717
    b30c:	0000b510 	cmplti	zero,zero,724
    b310:	0000b360 	cmpeqi	zero,zero,717
    b314:	0000b510 	cmplti	zero,zero,724
    b318:	0000b4e4 	muli	zero,zero,723
    b31c:	0000b510 	cmplti	zero,zero,724
    b320:	0000b360 	cmpeqi	zero,zero,717
    b324:	0000b37c 	xorhi	zero,zero,717
    b328:	0000b37c 	xorhi	zero,zero,717
    b32c:	0000b4e4 	muli	zero,zero,723
    b330:	0000b360 	cmpeqi	zero,zero,717
    b334:	0000b370 	cmpltui	zero,zero,717
    b338:	0000b370 	cmpltui	zero,zero,717
    b33c:	0000b370 	cmpltui	zero,zero,717
    b340:	0000b520 	cmpeqi	zero,zero,724
    b344:	8904b03a 	or	r2,r17,r4
    b348:	1000631e 	bne	r2,zero,b4d8 <__divdf3+0x2c4>
    b34c:	04800204 	movi	r18,8
    b350:	0023883a 	mov	r17,zero
    b354:	0027883a 	mov	r19,zero
    b358:	02000084 	movi	r8,2
    b35c:	003fcc06 	br	b290 <__alt_mem_Flash_flash_data+0xf400b290>
    b360:	8023883a 	mov	r17,r16
    b364:	a827883a 	mov	r19,r21
    b368:	4839883a 	mov	fp,r9
    b36c:	3811883a 	mov	r8,r7
    b370:	00800084 	movi	r2,2
    b374:	40812a1e 	bne	r8,r2,b820 <__divdf3+0x60c>
    b378:	e025883a 	mov	r18,fp
    b37c:	9180004c 	andi	r6,r18,1
    b380:	0101ffc4 	movi	r4,2047
    b384:	000b883a 	mov	r5,zero
    b388:	0027883a 	mov	r19,zero
    b38c:	2008953a 	slli	r4,r4,20
    b390:	30c03fcc 	andi	r3,r6,255
    b394:	04000434 	movhi	r16,16
    b398:	180697fa 	slli	r3,r3,31
    b39c:	843fffc4 	addi	r16,r16,-1
    b3a0:	2c20703a 	and	r16,r5,r16
    b3a4:	8120b03a 	or	r16,r16,r4
    b3a8:	80c6b03a 	or	r3,r16,r3
    b3ac:	9805883a 	mov	r2,r19
    b3b0:	dfc00d17 	ldw	ra,52(sp)
    b3b4:	df000c17 	ldw	fp,48(sp)
    b3b8:	ddc00b17 	ldw	r23,44(sp)
    b3bc:	dd800a17 	ldw	r22,40(sp)
    b3c0:	dd400917 	ldw	r21,36(sp)
    b3c4:	dd000817 	ldw	r20,32(sp)
    b3c8:	dcc00717 	ldw	r19,28(sp)
    b3cc:	dc800617 	ldw	r18,24(sp)
    b3d0:	dc400517 	ldw	r17,20(sp)
    b3d4:	dc000417 	ldw	r16,16(sp)
    b3d8:	dec00e04 	addi	sp,sp,56
    b3dc:	f800283a 	ret
    b3e0:	8904b03a 	or	r2,r17,r4
    b3e4:	10003726 	beq	r2,zero,b4c4 <__divdf3+0x2b0>
    b3e8:	88011c26 	beq	r17,zero,b85c <__divdf3+0x648>
    b3ec:	8809883a 	mov	r4,r17
    b3f0:	d9800315 	stw	r6,12(sp)
    b3f4:	d9c00115 	stw	r7,4(sp)
    b3f8:	000cf140 	call	cf14 <__clzsi2>
    b3fc:	d9800317 	ldw	r6,12(sp)
    b400:	d9c00117 	ldw	r7,4(sp)
    b404:	1007883a 	mov	r3,r2
    b408:	01000a04 	movi	r4,40
    b40c:	1cfffe04 	addi	r19,r3,-8
    b410:	20c9c83a 	sub	r4,r4,r3
    b414:	8cca983a 	sll	r5,r17,r19
    b418:	9108d83a 	srl	r4,r18,r4
    b41c:	94e6983a 	sll	r19,r18,r19
    b420:	2162b03a 	or	r17,r4,r5
    b424:	053f0344 	movi	r20,-1011
    b428:	a0e9c83a 	sub	r20,r20,r3
    b42c:	0025883a 	mov	r18,zero
    b430:	0011883a 	mov	r8,zero
    b434:	003f9606 	br	b290 <__alt_mem_Flash_flash_data+0xf400b290>
    b438:	8184b03a 	or	r2,r16,r6
    b43c:	10001f1e 	bne	r2,zero,b4bc <__divdf3+0x2a8>
    b440:	0021883a 	mov	r16,zero
    b444:	002b883a 	mov	r21,zero
    b448:	01c00084 	movi	r7,2
    b44c:	003fa206 	br	b2d8 <__alt_mem_Flash_flash_data+0xf400b2d8>
    b450:	8184b03a 	or	r2,r16,r6
    b454:	10001526 	beq	r2,zero,b4ac <__divdf3+0x298>
    b458:	80010c26 	beq	r16,zero,b88c <__divdf3+0x678>
    b45c:	8009883a 	mov	r4,r16
    b460:	d9800315 	stw	r6,12(sp)
    b464:	da000215 	stw	r8,8(sp)
    b468:	da400015 	stw	r9,0(sp)
    b46c:	000cf140 	call	cf14 <__clzsi2>
    b470:	d9800317 	ldw	r6,12(sp)
    b474:	da000217 	ldw	r8,8(sp)
    b478:	da400017 	ldw	r9,0(sp)
    b47c:	1007883a 	mov	r3,r2
    b480:	01000a04 	movi	r4,40
    b484:	1d7ffe04 	addi	r21,r3,-8
    b488:	20c9c83a 	sub	r4,r4,r3
    b48c:	8560983a 	sll	r16,r16,r21
    b490:	3108d83a 	srl	r4,r6,r4
    b494:	356a983a 	sll	r21,r6,r21
    b498:	2420b03a 	or	r16,r4,r16
    b49c:	017f0344 	movi	r5,-1011
    b4a0:	28cbc83a 	sub	r5,r5,r3
    b4a4:	000f883a 	mov	r7,zero
    b4a8:	003f8b06 	br	b2d8 <__alt_mem_Flash_flash_data+0xf400b2d8>
    b4ac:	0021883a 	mov	r16,zero
    b4b0:	002b883a 	mov	r21,zero
    b4b4:	01c00044 	movi	r7,1
    b4b8:	003f8706 	br	b2d8 <__alt_mem_Flash_flash_data+0xf400b2d8>
    b4bc:	01c000c4 	movi	r7,3
    b4c0:	003f8506 	br	b2d8 <__alt_mem_Flash_flash_data+0xf400b2d8>
    b4c4:	04800104 	movi	r18,4
    b4c8:	0023883a 	mov	r17,zero
    b4cc:	0027883a 	mov	r19,zero
    b4d0:	02000044 	movi	r8,1
    b4d4:	003f6e06 	br	b290 <__alt_mem_Flash_flash_data+0xf400b290>
    b4d8:	04800304 	movi	r18,12
    b4dc:	020000c4 	movi	r8,3
    b4e0:	003f6b06 	br	b290 <__alt_mem_Flash_flash_data+0xf400b290>
    b4e4:	01400434 	movhi	r5,16
    b4e8:	000d883a 	mov	r6,zero
    b4ec:	297fffc4 	addi	r5,r5,-1
    b4f0:	04ffffc4 	movi	r19,-1
    b4f4:	0101ffc4 	movi	r4,2047
    b4f8:	003fa406 	br	b38c <__alt_mem_Flash_flash_data+0xf400b38c>
    b4fc:	043f0084 	movi	r16,-1022
    b500:	8521c83a 	sub	r16,r16,r20
    b504:	00800e04 	movi	r2,56
    b508:	1401200e 	bge	r2,r16,b98c <__divdf3+0x778>
    b50c:	9180004c 	andi	r6,r18,1
    b510:	0009883a 	mov	r4,zero
    b514:	000b883a 	mov	r5,zero
    b518:	0027883a 	mov	r19,zero
    b51c:	003f9b06 	br	b38c <__alt_mem_Flash_flash_data+0xf400b38c>
    b520:	8880022c 	andhi	r2,r17,8
    b524:	1000c726 	beq	r2,zero,b844 <__divdf3+0x630>
    b528:	8080022c 	andhi	r2,r16,8
    b52c:	1000c51e 	bne	r2,zero,b844 <__divdf3+0x630>
    b530:	00800434 	movhi	r2,16
    b534:	81400234 	orhi	r5,r16,8
    b538:	10bfffc4 	addi	r2,r2,-1
    b53c:	b80d883a 	mov	r6,r23
    b540:	288a703a 	and	r5,r5,r2
    b544:	a827883a 	mov	r19,r21
    b548:	003fea06 	br	b4f4 <__alt_mem_Flash_flash_data+0xf400b4f4>
    b54c:	8440ea36 	bltu	r16,r17,b8f8 <__divdf3+0x6e4>
    b550:	8c00e826 	beq	r17,r16,b8f4 <__divdf3+0x6e0>
    b554:	a53fffc4 	addi	r20,r20,-1
    b558:	882d883a 	mov	r22,r17
    b55c:	000d883a 	mov	r6,zero
    b560:	a804d63a 	srli	r2,r21,24
    b564:	8020923a 	slli	r16,r16,8
    b568:	b009883a 	mov	r4,r22
    b56c:	d9800315 	stw	r6,12(sp)
    b570:	1420b03a 	or	r16,r2,r16
    b574:	802ed43a 	srli	r23,r16,16
    b578:	873fffcc 	andi	fp,r16,65535
    b57c:	a82a923a 	slli	r21,r21,8
    b580:	b80b883a 	mov	r5,r23
    b584:	000a9680 	call	a968 <__udivsi3>
    b588:	b009883a 	mov	r4,r22
    b58c:	b80b883a 	mov	r5,r23
    b590:	1023883a 	mov	r17,r2
    b594:	000a9700 	call	a970 <__umodsi3>
    b598:	1004943a 	slli	r2,r2,16
    b59c:	9808d43a 	srli	r4,r19,16
    b5a0:	8f2d383a 	mul	r22,r17,fp
    b5a4:	d9800317 	ldw	r6,12(sp)
    b5a8:	1106b03a 	or	r3,r2,r4
    b5ac:	1d80062e 	bgeu	r3,r22,b5c8 <__divdf3+0x3b4>
    b5b0:	1c07883a 	add	r3,r3,r16
    b5b4:	88bfffc4 	addi	r2,r17,-1
    b5b8:	1c00dc36 	bltu	r3,r16,b92c <__divdf3+0x718>
    b5bc:	1d80db2e 	bgeu	r3,r22,b92c <__divdf3+0x718>
    b5c0:	8c7fff84 	addi	r17,r17,-2
    b5c4:	1c07883a 	add	r3,r3,r16
    b5c8:	1dadc83a 	sub	r22,r3,r22
    b5cc:	b009883a 	mov	r4,r22
    b5d0:	b80b883a 	mov	r5,r23
    b5d4:	d9800315 	stw	r6,12(sp)
    b5d8:	000a9680 	call	a968 <__udivsi3>
    b5dc:	b009883a 	mov	r4,r22
    b5e0:	b80b883a 	mov	r5,r23
    b5e4:	d8800015 	stw	r2,0(sp)
    b5e8:	000a9700 	call	a970 <__umodsi3>
    b5ec:	da400017 	ldw	r9,0(sp)
    b5f0:	1004943a 	slli	r2,r2,16
    b5f4:	9cffffcc 	andi	r19,r19,65535
    b5f8:	4f07383a 	mul	r3,r9,fp
    b5fc:	14c8b03a 	or	r4,r2,r19
    b600:	d9800317 	ldw	r6,12(sp)
    b604:	20c0062e 	bgeu	r4,r3,b620 <__divdf3+0x40c>
    b608:	2409883a 	add	r4,r4,r16
    b60c:	48bfffc4 	addi	r2,r9,-1
    b610:	2400c436 	bltu	r4,r16,b924 <__divdf3+0x710>
    b614:	20c0c32e 	bgeu	r4,r3,b924 <__divdf3+0x710>
    b618:	4a7fff84 	addi	r9,r9,-2
    b61c:	2409883a 	add	r4,r4,r16
    b620:	8822943a 	slli	r17,r17,16
    b624:	a80ed43a 	srli	r7,r21,16
    b628:	aa3fffcc 	andi	r8,r21,65535
    b62c:	4c62b03a 	or	r17,r9,r17
    b630:	8816d43a 	srli	r11,r17,16
    b634:	897fffcc 	andi	r5,r17,65535
    b638:	2a15383a 	mul	r10,r5,r8
    b63c:	5a19383a 	mul	r12,r11,r8
    b640:	29cb383a 	mul	r5,r5,r7
    b644:	5012d43a 	srli	r9,r10,16
    b648:	20c5c83a 	sub	r2,r4,r3
    b64c:	614b883a 	add	r5,r12,r5
    b650:	2a4b883a 	add	r5,r5,r9
    b654:	59c7383a 	mul	r3,r11,r7
    b658:	2b00022e 	bgeu	r5,r12,b664 <__divdf3+0x450>
    b65c:	01000074 	movhi	r4,1
    b660:	1907883a 	add	r3,r3,r4
    b664:	2808d43a 	srli	r4,r5,16
    b668:	280a943a 	slli	r5,r5,16
    b66c:	54ffffcc 	andi	r19,r10,65535
    b670:	1907883a 	add	r3,r3,r4
    b674:	2ccb883a 	add	r5,r5,r19
    b678:	10c09336 	bltu	r2,r3,b8c8 <__divdf3+0x6b4>
    b67c:	10c0ad26 	beq	r2,r3,b934 <__divdf3+0x720>
    b680:	10c7c83a 	sub	r3,r2,r3
    b684:	3167c83a 	sub	r19,r6,r5
    b688:	34ed803a 	cmpltu	r22,r6,r19
    b68c:	1dadc83a 	sub	r22,r3,r22
    b690:	b400b226 	beq	r22,r16,b95c <__divdf3+0x748>
    b694:	b009883a 	mov	r4,r22
    b698:	b80b883a 	mov	r5,r23
    b69c:	d9c00115 	stw	r7,4(sp)
    b6a0:	da000215 	stw	r8,8(sp)
    b6a4:	000a9680 	call	a968 <__udivsi3>
    b6a8:	b009883a 	mov	r4,r22
    b6ac:	b80b883a 	mov	r5,r23
    b6b0:	d8800315 	stw	r2,12(sp)
    b6b4:	000a9700 	call	a970 <__umodsi3>
    b6b8:	d9800317 	ldw	r6,12(sp)
    b6bc:	1004943a 	slli	r2,r2,16
    b6c0:	9808d43a 	srli	r4,r19,16
    b6c4:	372d383a 	mul	r22,r6,fp
    b6c8:	d9c00117 	ldw	r7,4(sp)
    b6cc:	1106b03a 	or	r3,r2,r4
    b6d0:	da000217 	ldw	r8,8(sp)
    b6d4:	1d80062e 	bgeu	r3,r22,b6f0 <__divdf3+0x4dc>
    b6d8:	1c07883a 	add	r3,r3,r16
    b6dc:	30bfffc4 	addi	r2,r6,-1
    b6e0:	1c00a036 	bltu	r3,r16,b964 <__divdf3+0x750>
    b6e4:	1d809f2e 	bgeu	r3,r22,b964 <__divdf3+0x750>
    b6e8:	31bfff84 	addi	r6,r6,-2
    b6ec:	1c07883a 	add	r3,r3,r16
    b6f0:	1dadc83a 	sub	r22,r3,r22
    b6f4:	b009883a 	mov	r4,r22
    b6f8:	b80b883a 	mov	r5,r23
    b6fc:	d9800315 	stw	r6,12(sp)
    b700:	d9c00115 	stw	r7,4(sp)
    b704:	da000215 	stw	r8,8(sp)
    b708:	000a9680 	call	a968 <__udivsi3>
    b70c:	b009883a 	mov	r4,r22
    b710:	b80b883a 	mov	r5,r23
    b714:	d8800015 	stw	r2,0(sp)
    b718:	000a9700 	call	a970 <__umodsi3>
    b71c:	da400017 	ldw	r9,0(sp)
    b720:	1004943a 	slli	r2,r2,16
    b724:	993fffcc 	andi	r4,r19,65535
    b728:	4f39383a 	mul	fp,r9,fp
    b72c:	1106b03a 	or	r3,r2,r4
    b730:	d9800317 	ldw	r6,12(sp)
    b734:	d9c00117 	ldw	r7,4(sp)
    b738:	da000217 	ldw	r8,8(sp)
    b73c:	1f00062e 	bgeu	r3,fp,b758 <__divdf3+0x544>
    b740:	1c07883a 	add	r3,r3,r16
    b744:	48bfffc4 	addi	r2,r9,-1
    b748:	1c008836 	bltu	r3,r16,b96c <__divdf3+0x758>
    b74c:	1f00872e 	bgeu	r3,fp,b96c <__divdf3+0x758>
    b750:	4a7fff84 	addi	r9,r9,-2
    b754:	1c07883a 	add	r3,r3,r16
    b758:	3008943a 	slli	r4,r6,16
    b75c:	1f07c83a 	sub	r3,r3,fp
    b760:	4926b03a 	or	r19,r9,r4
    b764:	993fffcc 	andi	r4,r19,65535
    b768:	980cd43a 	srli	r6,r19,16
    b76c:	220b383a 	mul	r5,r4,r8
    b770:	21c5383a 	mul	r2,r4,r7
    b774:	3211383a 	mul	r8,r6,r8
    b778:	2808d43a 	srli	r4,r5,16
    b77c:	31cf383a 	mul	r7,r6,r7
    b780:	4085883a 	add	r2,r8,r2
    b784:	1105883a 	add	r2,r2,r4
    b788:	1200022e 	bgeu	r2,r8,b794 <__divdf3+0x580>
    b78c:	01000074 	movhi	r4,1
    b790:	390f883a 	add	r7,r7,r4
    b794:	1008d43a 	srli	r4,r2,16
    b798:	1004943a 	slli	r2,r2,16
    b79c:	297fffcc 	andi	r5,r5,65535
    b7a0:	390f883a 	add	r7,r7,r4
    b7a4:	1145883a 	add	r2,r2,r5
    b7a8:	19c06536 	bltu	r3,r7,b940 <__divdf3+0x72c>
    b7ac:	19c09f26 	beq	r3,r7,ba2c <__divdf3+0x818>
    b7b0:	9cc00054 	ori	r19,r19,1
    b7b4:	a100ffc4 	addi	r4,r20,1023
    b7b8:	013f500e 	bge	zero,r4,b4fc <__alt_mem_Flash_flash_data+0xf400b4fc>
    b7bc:	988001cc 	andi	r2,r19,7
    b7c0:	10000726 	beq	r2,zero,b7e0 <__divdf3+0x5cc>
    b7c4:	98c003cc 	andi	r3,r19,15
    b7c8:	00800104 	movi	r2,4
    b7cc:	18800426 	beq	r3,r2,b7e0 <__divdf3+0x5cc>
    b7d0:	9885883a 	add	r2,r19,r2
    b7d4:	14e1803a 	cmpltu	r16,r2,r19
    b7d8:	8c23883a 	add	r17,r17,r16
    b7dc:	1027883a 	mov	r19,r2
    b7e0:	8880402c 	andhi	r2,r17,256
    b7e4:	10000426 	beq	r2,zero,b7f8 <__divdf3+0x5e4>
    b7e8:	00bfc034 	movhi	r2,65280
    b7ec:	10bfffc4 	addi	r2,r2,-1
    b7f0:	a1010004 	addi	r4,r20,1024
    b7f4:	88a2703a 	and	r17,r17,r2
    b7f8:	0081ff84 	movi	r2,2046
    b7fc:	113edf16 	blt	r2,r4,b37c <__alt_mem_Flash_flash_data+0xf400b37c>
    b800:	9826d0fa 	srli	r19,r19,3
    b804:	8804977a 	slli	r2,r17,29
    b808:	8820927a 	slli	r16,r17,9
    b80c:	2101ffcc 	andi	r4,r4,2047
    b810:	14e6b03a 	or	r19,r2,r19
    b814:	800ad33a 	srli	r5,r16,12
    b818:	9180004c 	andi	r6,r18,1
    b81c:	003edb06 	br	b38c <__alt_mem_Flash_flash_data+0xf400b38c>
    b820:	008000c4 	movi	r2,3
    b824:	4080a826 	beq	r8,r2,bac8 <__divdf3+0x8b4>
    b828:	00800044 	movi	r2,1
    b82c:	4080551e 	bne	r8,r2,b984 <__divdf3+0x770>
    b830:	e00d883a 	mov	r6,fp
    b834:	0009883a 	mov	r4,zero
    b838:	000b883a 	mov	r5,zero
    b83c:	0027883a 	mov	r19,zero
    b840:	003ed206 	br	b38c <__alt_mem_Flash_flash_data+0xf400b38c>
    b844:	00800434 	movhi	r2,16
    b848:	89400234 	orhi	r5,r17,8
    b84c:	10bfffc4 	addi	r2,r2,-1
    b850:	b00d883a 	mov	r6,r22
    b854:	288a703a 	and	r5,r5,r2
    b858:	003f2606 	br	b4f4 <__alt_mem_Flash_flash_data+0xf400b4f4>
    b85c:	d9800315 	stw	r6,12(sp)
    b860:	d9c00115 	stw	r7,4(sp)
    b864:	000cf140 	call	cf14 <__clzsi2>
    b868:	10c00804 	addi	r3,r2,32
    b86c:	010009c4 	movi	r4,39
    b870:	d9800317 	ldw	r6,12(sp)
    b874:	d9c00117 	ldw	r7,4(sp)
    b878:	20fee30e 	bge	r4,r3,b408 <__alt_mem_Flash_flash_data+0xf400b408>
    b87c:	117ffe04 	addi	r5,r2,-8
    b880:	9162983a 	sll	r17,r18,r5
    b884:	0027883a 	mov	r19,zero
    b888:	003ee606 	br	b424 <__alt_mem_Flash_flash_data+0xf400b424>
    b88c:	3009883a 	mov	r4,r6
    b890:	d9800315 	stw	r6,12(sp)
    b894:	da000215 	stw	r8,8(sp)
    b898:	da400015 	stw	r9,0(sp)
    b89c:	000cf140 	call	cf14 <__clzsi2>
    b8a0:	10c00804 	addi	r3,r2,32
    b8a4:	010009c4 	movi	r4,39
    b8a8:	d9800317 	ldw	r6,12(sp)
    b8ac:	da000217 	ldw	r8,8(sp)
    b8b0:	da400017 	ldw	r9,0(sp)
    b8b4:	20fef20e 	bge	r4,r3,b480 <__alt_mem_Flash_flash_data+0xf400b480>
    b8b8:	10bffe04 	addi	r2,r2,-8
    b8bc:	a8a0983a 	sll	r16,r21,r2
    b8c0:	002b883a 	mov	r21,zero
    b8c4:	003ef506 	br	b49c <__alt_mem_Flash_flash_data+0xf400b49c>
    b8c8:	354d883a 	add	r6,r6,r21
    b8cc:	3549803a 	cmpltu	r4,r6,r21
    b8d0:	2409883a 	add	r4,r4,r16
    b8d4:	2089883a 	add	r4,r4,r2
    b8d8:	88bfffc4 	addi	r2,r17,-1
    b8dc:	81000c2e 	bgeu	r16,r4,b910 <__divdf3+0x6fc>
    b8e0:	20c04436 	bltu	r4,r3,b9f4 <__divdf3+0x7e0>
    b8e4:	19006f26 	beq	r3,r4,baa4 <__divdf3+0x890>
    b8e8:	20c7c83a 	sub	r3,r4,r3
    b8ec:	1023883a 	mov	r17,r2
    b8f0:	003f6406 	br	b684 <__alt_mem_Flash_flash_data+0xf400b684>
    b8f4:	9d7f1736 	bltu	r19,r21,b554 <__alt_mem_Flash_flash_data+0xf400b554>
    b8f8:	9806d07a 	srli	r3,r19,1
    b8fc:	880497fa 	slli	r2,r17,31
    b900:	980c97fa 	slli	r6,r19,31
    b904:	882cd07a 	srli	r22,r17,1
    b908:	18a6b03a 	or	r19,r3,r2
    b90c:	003f1406 	br	b560 <__alt_mem_Flash_flash_data+0xf400b560>
    b910:	243ff51e 	bne	r4,r16,b8e8 <__alt_mem_Flash_flash_data+0xf400b8e8>
    b914:	357ff22e 	bgeu	r6,r21,b8e0 <__alt_mem_Flash_flash_data+0xf400b8e0>
    b918:	80c7c83a 	sub	r3,r16,r3
    b91c:	1023883a 	mov	r17,r2
    b920:	003f5806 	br	b684 <__alt_mem_Flash_flash_data+0xf400b684>
    b924:	1013883a 	mov	r9,r2
    b928:	003f3d06 	br	b620 <__alt_mem_Flash_flash_data+0xf400b620>
    b92c:	1023883a 	mov	r17,r2
    b930:	003f2506 	br	b5c8 <__alt_mem_Flash_flash_data+0xf400b5c8>
    b934:	317fe436 	bltu	r6,r5,b8c8 <__alt_mem_Flash_flash_data+0xf400b8c8>
    b938:	0007883a 	mov	r3,zero
    b93c:	003f5106 	br	b684 <__alt_mem_Flash_flash_data+0xf400b684>
    b940:	1c07883a 	add	r3,r3,r16
    b944:	993fffc4 	addi	r4,r19,-1
    b948:	1c000a2e 	bgeu	r3,r16,b974 <__divdf3+0x760>
    b94c:	2027883a 	mov	r19,r4
    b950:	19ff971e 	bne	r3,r7,b7b0 <__alt_mem_Flash_flash_data+0xf400b7b0>
    b954:	a8bf961e 	bne	r21,r2,b7b0 <__alt_mem_Flash_flash_data+0xf400b7b0>
    b958:	003f9606 	br	b7b4 <__alt_mem_Flash_flash_data+0xf400b7b4>
    b95c:	04ffffc4 	movi	r19,-1
    b960:	003f9406 	br	b7b4 <__alt_mem_Flash_flash_data+0xf400b7b4>
    b964:	100d883a 	mov	r6,r2
    b968:	003f6106 	br	b6f0 <__alt_mem_Flash_flash_data+0xf400b6f0>
    b96c:	1013883a 	mov	r9,r2
    b970:	003f7906 	br	b758 <__alt_mem_Flash_flash_data+0xf400b758>
    b974:	19c02636 	bltu	r3,r7,ba10 <__divdf3+0x7fc>
    b978:	38c04d26 	beq	r7,r3,bab0 <__divdf3+0x89c>
    b97c:	2027883a 	mov	r19,r4
    b980:	003f8b06 	br	b7b0 <__alt_mem_Flash_flash_data+0xf400b7b0>
    b984:	e025883a 	mov	r18,fp
    b988:	003f8a06 	br	b7b4 <__alt_mem_Flash_flash_data+0xf400b7b4>
    b98c:	008007c4 	movi	r2,31
    b990:	14002a16 	blt	r2,r16,ba3c <__divdf3+0x828>
    b994:	a5010784 	addi	r20,r20,1054
    b998:	8d04983a 	sll	r2,r17,r20
    b99c:	9c06d83a 	srl	r3,r19,r16
    b9a0:	9d28983a 	sll	r20,r19,r20
    b9a4:	8c20d83a 	srl	r16,r17,r16
    b9a8:	1886b03a 	or	r3,r3,r2
    b9ac:	a004c03a 	cmpne	r2,r20,zero
    b9b0:	1884b03a 	or	r2,r3,r2
    b9b4:	10c001cc 	andi	r3,r2,7
    b9b8:	18000726 	beq	r3,zero,b9d8 <__divdf3+0x7c4>
    b9bc:	110003cc 	andi	r4,r2,15
    b9c0:	00c00104 	movi	r3,4
    b9c4:	20c00426 	beq	r4,r3,b9d8 <__divdf3+0x7c4>
    b9c8:	10c00104 	addi	r3,r2,4
    b9cc:	1885803a 	cmpltu	r2,r3,r2
    b9d0:	80a1883a 	add	r16,r16,r2
    b9d4:	1805883a 	mov	r2,r3
    b9d8:	80c0202c 	andhi	r3,r16,128
    b9dc:	18002d26 	beq	r3,zero,ba94 <__divdf3+0x880>
    b9e0:	9180004c 	andi	r6,r18,1
    b9e4:	01000044 	movi	r4,1
    b9e8:	000b883a 	mov	r5,zero
    b9ec:	0027883a 	mov	r19,zero
    b9f0:	003e6606 	br	b38c <__alt_mem_Flash_flash_data+0xf400b38c>
    b9f4:	354d883a 	add	r6,r6,r21
    b9f8:	356d803a 	cmpltu	r22,r6,r21
    b9fc:	b42d883a 	add	r22,r22,r16
    ba00:	b12d883a 	add	r22,r22,r4
    ba04:	8c7fff84 	addi	r17,r17,-2
    ba08:	b0c7c83a 	sub	r3,r22,r3
    ba0c:	003f1d06 	br	b684 <__alt_mem_Flash_flash_data+0xf400b684>
    ba10:	ad4b883a 	add	r5,r21,r21
    ba14:	2d6b803a 	cmpltu	r21,r5,r21
    ba18:	ac2b883a 	add	r21,r21,r16
    ba1c:	1d47883a 	add	r3,r3,r21
    ba20:	993fff84 	addi	r4,r19,-2
    ba24:	282b883a 	mov	r21,r5
    ba28:	003fc806 	br	b94c <__alt_mem_Flash_flash_data+0xf400b94c>
    ba2c:	103fc41e 	bne	r2,zero,b940 <__alt_mem_Flash_flash_data+0xf400b940>
    ba30:	002b883a 	mov	r21,zero
    ba34:	a8bf5e1e 	bne	r21,r2,b7b0 <__alt_mem_Flash_flash_data+0xf400b7b0>
    ba38:	003f5e06 	br	b7b4 <__alt_mem_Flash_flash_data+0xf400b7b4>
    ba3c:	00bef884 	movi	r2,-1054
    ba40:	1505c83a 	sub	r2,r2,r20
    ba44:	00c00804 	movi	r3,32
    ba48:	8884d83a 	srl	r2,r17,r2
    ba4c:	80c01c26 	beq	r16,r3,bac0 <__divdf3+0x8ac>
    ba50:	a0c10f84 	addi	r3,r20,1086
    ba54:	88c6983a 	sll	r3,r17,r3
    ba58:	1cc6b03a 	or	r3,r3,r19
    ba5c:	1806c03a 	cmpne	r3,r3,zero
    ba60:	1884b03a 	or	r2,r3,r2
    ba64:	140001cc 	andi	r16,r2,7
    ba68:	8000061e 	bne	r16,zero,ba84 <__divdf3+0x870>
    ba6c:	000b883a 	mov	r5,zero
    ba70:	1004d0fa 	srli	r2,r2,3
    ba74:	9180004c 	andi	r6,r18,1
    ba78:	0009883a 	mov	r4,zero
    ba7c:	1426b03a 	or	r19,r2,r16
    ba80:	003e4206 	br	b38c <__alt_mem_Flash_flash_data+0xf400b38c>
    ba84:	110003cc 	andi	r4,r2,15
    ba88:	00c00104 	movi	r3,4
    ba8c:	0021883a 	mov	r16,zero
    ba90:	20ffcd1e 	bne	r4,r3,b9c8 <__alt_mem_Flash_flash_data+0xf400b9c8>
    ba94:	800a927a 	slli	r5,r16,9
    ba98:	8020977a 	slli	r16,r16,29
    ba9c:	280ad33a 	srli	r5,r5,12
    baa0:	003ff306 	br	ba70 <__alt_mem_Flash_flash_data+0xf400ba70>
    baa4:	317fd336 	bltu	r6,r5,b9f4 <__alt_mem_Flash_flash_data+0xf400b9f4>
    baa8:	1023883a 	mov	r17,r2
    baac:	003fa206 	br	b938 <__alt_mem_Flash_flash_data+0xf400b938>
    bab0:	a8bfd736 	bltu	r21,r2,ba10 <__alt_mem_Flash_flash_data+0xf400ba10>
    bab4:	2027883a 	mov	r19,r4
    bab8:	a8bf3d1e 	bne	r21,r2,b7b0 <__alt_mem_Flash_flash_data+0xf400b7b0>
    babc:	003f3d06 	br	b7b4 <__alt_mem_Flash_flash_data+0xf400b7b4>
    bac0:	0007883a 	mov	r3,zero
    bac4:	003fe406 	br	ba58 <__alt_mem_Flash_flash_data+0xf400ba58>
    bac8:	00800434 	movhi	r2,16
    bacc:	89400234 	orhi	r5,r17,8
    bad0:	10bfffc4 	addi	r2,r2,-1
    bad4:	e00d883a 	mov	r6,fp
    bad8:	288a703a 	and	r5,r5,r2
    badc:	003e8506 	br	b4f4 <__alt_mem_Flash_flash_data+0xf400b4f4>

0000bae0 <__eqdf2>:
    bae0:	2804d53a 	srli	r2,r5,20
    bae4:	3806d53a 	srli	r3,r7,20
    bae8:	02000434 	movhi	r8,16
    baec:	423fffc4 	addi	r8,r8,-1
    baf0:	1081ffcc 	andi	r2,r2,2047
    baf4:	0241ffc4 	movi	r9,2047
    baf8:	2a14703a 	and	r10,r5,r8
    bafc:	18c1ffcc 	andi	r3,r3,2047
    bb00:	3a10703a 	and	r8,r7,r8
    bb04:	280ad7fa 	srli	r5,r5,31
    bb08:	380ed7fa 	srli	r7,r7,31
    bb0c:	12400f26 	beq	r2,r9,bb4c <__eqdf2+0x6c>
    bb10:	0241ffc4 	movi	r9,2047
    bb14:	1a400326 	beq	r3,r9,bb24 <__eqdf2+0x44>
    bb18:	10c00526 	beq	r2,r3,bb30 <__eqdf2+0x50>
    bb1c:	00800044 	movi	r2,1
    bb20:	f800283a 	ret
    bb24:	4192b03a 	or	r9,r8,r6
    bb28:	483ffc1e 	bne	r9,zero,bb1c <__alt_mem_Flash_flash_data+0xf400bb1c>
    bb2c:	10fffb1e 	bne	r2,r3,bb1c <__alt_mem_Flash_flash_data+0xf400bb1c>
    bb30:	523ffa1e 	bne	r10,r8,bb1c <__alt_mem_Flash_flash_data+0xf400bb1c>
    bb34:	21bff91e 	bne	r4,r6,bb1c <__alt_mem_Flash_flash_data+0xf400bb1c>
    bb38:	29c00826 	beq	r5,r7,bb5c <__eqdf2+0x7c>
    bb3c:	103ff71e 	bne	r2,zero,bb1c <__alt_mem_Flash_flash_data+0xf400bb1c>
    bb40:	5104b03a 	or	r2,r10,r4
    bb44:	1004c03a 	cmpne	r2,r2,zero
    bb48:	f800283a 	ret
    bb4c:	5112b03a 	or	r9,r10,r4
    bb50:	483fef26 	beq	r9,zero,bb10 <__alt_mem_Flash_flash_data+0xf400bb10>
    bb54:	00800044 	movi	r2,1
    bb58:	f800283a 	ret
    bb5c:	0005883a 	mov	r2,zero
    bb60:	f800283a 	ret

0000bb64 <__gedf2>:
    bb64:	2804d53a 	srli	r2,r5,20
    bb68:	3806d53a 	srli	r3,r7,20
    bb6c:	02000434 	movhi	r8,16
    bb70:	423fffc4 	addi	r8,r8,-1
    bb74:	0241ffc4 	movi	r9,2047
    bb78:	1081ffcc 	andi	r2,r2,2047
    bb7c:	2a14703a 	and	r10,r5,r8
    bb80:	1a46703a 	and	r3,r3,r9
    bb84:	3a10703a 	and	r8,r7,r8
    bb88:	280ad7fa 	srli	r5,r5,31
    bb8c:	380ed7fa 	srli	r7,r7,31
    bb90:	12400b26 	beq	r2,r9,bbc0 <__gedf2+0x5c>
    bb94:	1a401626 	beq	r3,r9,bbf0 <__gedf2+0x8c>
    bb98:	10000c1e 	bne	r2,zero,bbcc <__gedf2+0x68>
    bb9c:	5112b03a 	or	r9,r10,r4
    bba0:	4813003a 	cmpeq	r9,r9,zero
    bba4:	4817883a 	mov	r11,r9
    bba8:	18000c1e 	bne	r3,zero,bbdc <__gedf2+0x78>
    bbac:	4198b03a 	or	r12,r8,r6
    bbb0:	60000a1e 	bne	r12,zero,bbdc <__gedf2+0x78>
    bbb4:	48001326 	beq	r9,zero,bc04 <__gedf2+0xa0>
    bbb8:	0005883a 	mov	r2,zero
    bbbc:	f800283a 	ret
    bbc0:	5112b03a 	or	r9,r10,r4
    bbc4:	4800191e 	bne	r9,zero,bc2c <__gedf2+0xc8>
    bbc8:	18800926 	beq	r3,r2,bbf0 <__gedf2+0x8c>
    bbcc:	18000b1e 	bne	r3,zero,bbfc <__gedf2+0x98>
    bbd0:	4192b03a 	or	r9,r8,r6
    bbd4:	0017883a 	mov	r11,zero
    bbd8:	48000a26 	beq	r9,zero,bc04 <__gedf2+0xa0>
    bbdc:	39c03fcc 	andi	r7,r7,255
    bbe0:	58000726 	beq	r11,zero,bc00 <__gedf2+0x9c>
    bbe4:	3800081e 	bne	r7,zero,bc08 <__gedf2+0xa4>
    bbe8:	00bfffc4 	movi	r2,-1
    bbec:	f800283a 	ret
    bbf0:	4192b03a 	or	r9,r8,r6
    bbf4:	48000d1e 	bne	r9,zero,bc2c <__gedf2+0xc8>
    bbf8:	103fe826 	beq	r2,zero,bb9c <__alt_mem_Flash_flash_data+0xf400bb9c>
    bbfc:	39c03fcc 	andi	r7,r7,255
    bc00:	29c00326 	beq	r5,r7,bc10 <__gedf2+0xac>
    bc04:	283ff81e 	bne	r5,zero,bbe8 <__alt_mem_Flash_flash_data+0xf400bbe8>
    bc08:	00800044 	movi	r2,1
    bc0c:	f800283a 	ret
    bc10:	18bffc16 	blt	r3,r2,bc04 <__alt_mem_Flash_flash_data+0xf400bc04>
    bc14:	10c00316 	blt	r2,r3,bc24 <__gedf2+0xc0>
    bc18:	42bffa36 	bltu	r8,r10,bc04 <__alt_mem_Flash_flash_data+0xf400bc04>
    bc1c:	52000526 	beq	r10,r8,bc34 <__gedf2+0xd0>
    bc20:	523fe52e 	bgeu	r10,r8,bbb8 <__alt_mem_Flash_flash_data+0xf400bbb8>
    bc24:	283ff026 	beq	r5,zero,bbe8 <__alt_mem_Flash_flash_data+0xf400bbe8>
    bc28:	003ff706 	br	bc08 <__alt_mem_Flash_flash_data+0xf400bc08>
    bc2c:	00bfff84 	movi	r2,-2
    bc30:	f800283a 	ret
    bc34:	313ff336 	bltu	r6,r4,bc04 <__alt_mem_Flash_flash_data+0xf400bc04>
    bc38:	21bfdf2e 	bgeu	r4,r6,bbb8 <__alt_mem_Flash_flash_data+0xf400bbb8>
    bc3c:	283fea26 	beq	r5,zero,bbe8 <__alt_mem_Flash_flash_data+0xf400bbe8>
    bc40:	003ff106 	br	bc08 <__alt_mem_Flash_flash_data+0xf400bc08>

0000bc44 <__ledf2>:
    bc44:	2804d53a 	srli	r2,r5,20
    bc48:	3810d53a 	srli	r8,r7,20
    bc4c:	00c00434 	movhi	r3,16
    bc50:	18ffffc4 	addi	r3,r3,-1
    bc54:	0241ffc4 	movi	r9,2047
    bc58:	1081ffcc 	andi	r2,r2,2047
    bc5c:	28d4703a 	and	r10,r5,r3
    bc60:	4250703a 	and	r8,r8,r9
    bc64:	38c6703a 	and	r3,r7,r3
    bc68:	280ad7fa 	srli	r5,r5,31
    bc6c:	380ed7fa 	srli	r7,r7,31
    bc70:	12400b26 	beq	r2,r9,bca0 <__ledf2+0x5c>
    bc74:	42401926 	beq	r8,r9,bcdc <__ledf2+0x98>
    bc78:	10000c1e 	bne	r2,zero,bcac <__ledf2+0x68>
    bc7c:	5112b03a 	or	r9,r10,r4
    bc80:	4813003a 	cmpeq	r9,r9,zero
    bc84:	4817883a 	mov	r11,r9
    bc88:	40000f26 	beq	r8,zero,bcc8 <__ledf2+0x84>
    bc8c:	39c03fcc 	andi	r7,r7,255
    bc90:	58001826 	beq	r11,zero,bcf4 <__ledf2+0xb0>
    bc94:	38000a1e 	bne	r7,zero,bcc0 <__ledf2+0x7c>
    bc98:	00bfffc4 	movi	r2,-1
    bc9c:	f800283a 	ret
    bca0:	5112b03a 	or	r9,r10,r4
    bca4:	48000f1e 	bne	r9,zero,bce4 <__ledf2+0xa0>
    bca8:	40800c26 	beq	r8,r2,bcdc <__ledf2+0x98>
    bcac:	4000101e 	bne	r8,zero,bcf0 <__ledf2+0xac>
    bcb0:	1992b03a 	or	r9,r3,r6
    bcb4:	0017883a 	mov	r11,zero
    bcb8:	483ff41e 	bne	r9,zero,bc8c <__alt_mem_Flash_flash_data+0xf400bc8c>
    bcbc:	283ff61e 	bne	r5,zero,bc98 <__alt_mem_Flash_flash_data+0xf400bc98>
    bcc0:	00800044 	movi	r2,1
    bcc4:	f800283a 	ret
    bcc8:	1998b03a 	or	r12,r3,r6
    bccc:	603fef1e 	bne	r12,zero,bc8c <__alt_mem_Flash_flash_data+0xf400bc8c>
    bcd0:	483ffa26 	beq	r9,zero,bcbc <__alt_mem_Flash_flash_data+0xf400bcbc>
    bcd4:	0005883a 	mov	r2,zero
    bcd8:	f800283a 	ret
    bcdc:	1992b03a 	or	r9,r3,r6
    bce0:	48000226 	beq	r9,zero,bcec <__ledf2+0xa8>
    bce4:	00800084 	movi	r2,2
    bce8:	f800283a 	ret
    bcec:	103fe326 	beq	r2,zero,bc7c <__alt_mem_Flash_flash_data+0xf400bc7c>
    bcf0:	39c03fcc 	andi	r7,r7,255
    bcf4:	29fff11e 	bne	r5,r7,bcbc <__alt_mem_Flash_flash_data+0xf400bcbc>
    bcf8:	40bff016 	blt	r8,r2,bcbc <__alt_mem_Flash_flash_data+0xf400bcbc>
    bcfc:	12000316 	blt	r2,r8,bd0c <__ledf2+0xc8>
    bd00:	1abfee36 	bltu	r3,r10,bcbc <__alt_mem_Flash_flash_data+0xf400bcbc>
    bd04:	50c00326 	beq	r10,r3,bd14 <__ledf2+0xd0>
    bd08:	50fff22e 	bgeu	r10,r3,bcd4 <__alt_mem_Flash_flash_data+0xf400bcd4>
    bd0c:	283fe226 	beq	r5,zero,bc98 <__alt_mem_Flash_flash_data+0xf400bc98>
    bd10:	003feb06 	br	bcc0 <__alt_mem_Flash_flash_data+0xf400bcc0>
    bd14:	313fe936 	bltu	r6,r4,bcbc <__alt_mem_Flash_flash_data+0xf400bcbc>
    bd18:	21bfee2e 	bgeu	r4,r6,bcd4 <__alt_mem_Flash_flash_data+0xf400bcd4>
    bd1c:	283fde26 	beq	r5,zero,bc98 <__alt_mem_Flash_flash_data+0xf400bc98>
    bd20:	003fe706 	br	bcc0 <__alt_mem_Flash_flash_data+0xf400bcc0>

0000bd24 <__muldf3>:
    bd24:	defff204 	addi	sp,sp,-56
    bd28:	2804d53a 	srli	r2,r5,20
    bd2c:	dd800a15 	stw	r22,40(sp)
    bd30:	282cd7fa 	srli	r22,r5,31
    bd34:	dc000415 	stw	r16,16(sp)
    bd38:	04000434 	movhi	r16,16
    bd3c:	df000c15 	stw	fp,48(sp)
    bd40:	dd000815 	stw	r20,32(sp)
    bd44:	dcc00715 	stw	r19,28(sp)
    bd48:	dc800615 	stw	r18,24(sp)
    bd4c:	dc400515 	stw	r17,20(sp)
    bd50:	843fffc4 	addi	r16,r16,-1
    bd54:	dfc00d15 	stw	ra,52(sp)
    bd58:	ddc00b15 	stw	r23,44(sp)
    bd5c:	dd400915 	stw	r21,36(sp)
    bd60:	1501ffcc 	andi	r20,r2,2047
    bd64:	2023883a 	mov	r17,r4
    bd68:	2025883a 	mov	r18,r4
    bd6c:	2c20703a 	and	r16,r5,r16
    bd70:	b027883a 	mov	r19,r22
    bd74:	b7003fcc 	andi	fp,r22,255
    bd78:	a0005926 	beq	r20,zero,bee0 <__muldf3+0x1bc>
    bd7c:	0081ffc4 	movi	r2,2047
    bd80:	a0803426 	beq	r20,r2,be54 <__muldf3+0x130>
    bd84:	84000434 	orhi	r16,r16,16
    bd88:	2004d77a 	srli	r2,r4,29
    bd8c:	802090fa 	slli	r16,r16,3
    bd90:	202490fa 	slli	r18,r4,3
    bd94:	a53f0044 	addi	r20,r20,-1023
    bd98:	80a0b03a 	or	r16,r16,r2
    bd9c:	002b883a 	mov	r21,zero
    bda0:	0015883a 	mov	r10,zero
    bda4:	3812d53a 	srli	r9,r7,20
    bda8:	3806d7fa 	srli	r3,r7,31
    bdac:	02000434 	movhi	r8,16
    bdb0:	423fffc4 	addi	r8,r8,-1
    bdb4:	4941ffcc 	andi	r5,r9,2047
    bdb8:	302f883a 	mov	r23,r6
    bdbc:	3a22703a 	and	r17,r7,r8
    bdc0:	1ac03fcc 	andi	r11,r3,255
    bdc4:	28006226 	beq	r5,zero,bf50 <__muldf3+0x22c>
    bdc8:	0081ffc4 	movi	r2,2047
    bdcc:	28805a26 	beq	r5,r2,bf38 <__muldf3+0x214>
    bdd0:	8a000434 	orhi	r8,r17,16
    bdd4:	3004d77a 	srli	r2,r6,29
    bdd8:	401090fa 	slli	r8,r8,3
    bddc:	302e90fa 	slli	r23,r6,3
    bde0:	297f0044 	addi	r5,r5,-1023
    bde4:	40a2b03a 	or	r17,r8,r2
    bde8:	0013883a 	mov	r9,zero
    bdec:	4d4cb03a 	or	r6,r9,r21
    bdf0:	300c90ba 	slli	r6,r6,2
    bdf4:	02000074 	movhi	r8,1
    bdf8:	422f8504 	addi	r8,r8,-16876
    bdfc:	320d883a 	add	r6,r6,r8
    be00:	31800017 	ldw	r6,0(r6)
    be04:	a14b883a 	add	r5,r20,r5
    be08:	1dacf03a 	xor	r22,r3,r22
    be0c:	2b000044 	addi	r12,r5,1
    be10:	3000683a 	jmp	r6
    be14:	0000c050 	cmplti	zero,zero,769
    be18:	0000c03c 	xorhi	zero,zero,768
    be1c:	0000c03c 	xorhi	zero,zero,768
    be20:	0000c028 	cmpgeui	zero,zero,768
    be24:	0000be70 	cmpltui	zero,zero,761
    be28:	0000be70 	cmpltui	zero,zero,761
    be2c:	0000c010 	cmplti	zero,zero,768
    be30:	0000c028 	cmpgeui	zero,zero,768
    be34:	0000be70 	cmpltui	zero,zero,761
    be38:	0000c010 	cmplti	zero,zero,768
    be3c:	0000be70 	cmpltui	zero,zero,761
    be40:	0000c028 	cmpgeui	zero,zero,768
    be44:	0000be74 	movhi	zero,761
    be48:	0000be74 	movhi	zero,761
    be4c:	0000be74 	movhi	zero,761
    be50:	0000c24c 	andi	zero,zero,777
    be54:	8104b03a 	or	r2,r16,r4
    be58:	10006a1e 	bne	r2,zero,c004 <__muldf3+0x2e0>
    be5c:	05400204 	movi	r21,8
    be60:	0021883a 	mov	r16,zero
    be64:	0025883a 	mov	r18,zero
    be68:	02800084 	movi	r10,2
    be6c:	003fcd06 	br	bda4 <__alt_mem_Flash_flash_data+0xf400bda4>
    be70:	b039883a 	mov	fp,r22
    be74:	00800084 	movi	r2,2
    be78:	50804e1e 	bne	r10,r2,bfb4 <__muldf3+0x290>
    be7c:	e4c0004c 	andi	r19,fp,1
    be80:	0101ffc4 	movi	r4,2047
    be84:	0021883a 	mov	r16,zero
    be88:	0025883a 	mov	r18,zero
    be8c:	2008953a 	slli	r4,r4,20
    be90:	98c03fcc 	andi	r3,r19,255
    be94:	01400434 	movhi	r5,16
    be98:	297fffc4 	addi	r5,r5,-1
    be9c:	180697fa 	slli	r3,r3,31
    bea0:	8160703a 	and	r16,r16,r5
    bea4:	8120b03a 	or	r16,r16,r4
    bea8:	80c6b03a 	or	r3,r16,r3
    beac:	9005883a 	mov	r2,r18
    beb0:	dfc00d17 	ldw	ra,52(sp)
    beb4:	df000c17 	ldw	fp,48(sp)
    beb8:	ddc00b17 	ldw	r23,44(sp)
    bebc:	dd800a17 	ldw	r22,40(sp)
    bec0:	dd400917 	ldw	r21,36(sp)
    bec4:	dd000817 	ldw	r20,32(sp)
    bec8:	dcc00717 	ldw	r19,28(sp)
    becc:	dc800617 	ldw	r18,24(sp)
    bed0:	dc400517 	ldw	r17,20(sp)
    bed4:	dc000417 	ldw	r16,16(sp)
    bed8:	dec00e04 	addi	sp,sp,56
    bedc:	f800283a 	ret
    bee0:	8104b03a 	or	r2,r16,r4
    bee4:	10004226 	beq	r2,zero,bff0 <__muldf3+0x2cc>
    bee8:	8000f926 	beq	r16,zero,c2d0 <__muldf3+0x5ac>
    beec:	8009883a 	mov	r4,r16
    bef0:	d9800315 	stw	r6,12(sp)
    bef4:	d9c00015 	stw	r7,0(sp)
    bef8:	000cf140 	call	cf14 <__clzsi2>
    befc:	d9800317 	ldw	r6,12(sp)
    bf00:	d9c00017 	ldw	r7,0(sp)
    bf04:	1007883a 	mov	r3,r2
    bf08:	01000a04 	movi	r4,40
    bf0c:	18bffe04 	addi	r2,r3,-8
    bf10:	20c9c83a 	sub	r4,r4,r3
    bf14:	80a0983a 	sll	r16,r16,r2
    bf18:	8908d83a 	srl	r4,r17,r4
    bf1c:	88a4983a 	sll	r18,r17,r2
    bf20:	2420b03a 	or	r16,r4,r16
    bf24:	017f0344 	movi	r5,-1011
    bf28:	28e9c83a 	sub	r20,r5,r3
    bf2c:	002b883a 	mov	r21,zero
    bf30:	0015883a 	mov	r10,zero
    bf34:	003f9b06 	br	bda4 <__alt_mem_Flash_flash_data+0xf400bda4>
    bf38:	8984b03a 	or	r2,r17,r6
    bf3c:	10002a1e 	bne	r2,zero,bfe8 <__muldf3+0x2c4>
    bf40:	0023883a 	mov	r17,zero
    bf44:	002f883a 	mov	r23,zero
    bf48:	02400084 	movi	r9,2
    bf4c:	003fa706 	br	bdec <__alt_mem_Flash_flash_data+0xf400bdec>
    bf50:	8984b03a 	or	r2,r17,r6
    bf54:	10002026 	beq	r2,zero,bfd8 <__muldf3+0x2b4>
    bf58:	8800cc26 	beq	r17,zero,c28c <__muldf3+0x568>
    bf5c:	8809883a 	mov	r4,r17
    bf60:	d8c00215 	stw	r3,8(sp)
    bf64:	d9800315 	stw	r6,12(sp)
    bf68:	da800015 	stw	r10,0(sp)
    bf6c:	dac00115 	stw	r11,4(sp)
    bf70:	000cf140 	call	cf14 <__clzsi2>
    bf74:	d8c00217 	ldw	r3,8(sp)
    bf78:	d9800317 	ldw	r6,12(sp)
    bf7c:	da800017 	ldw	r10,0(sp)
    bf80:	dac00117 	ldw	r11,4(sp)
    bf84:	1009883a 	mov	r4,r2
    bf88:	01400a04 	movi	r5,40
    bf8c:	25fffe04 	addi	r23,r4,-8
    bf90:	290bc83a 	sub	r5,r5,r4
    bf94:	8dd0983a 	sll	r8,r17,r23
    bf98:	314ad83a 	srl	r5,r6,r5
    bf9c:	35ee983a 	sll	r23,r6,r23
    bfa0:	2a22b03a 	or	r17,r5,r8
    bfa4:	017f0344 	movi	r5,-1011
    bfa8:	290bc83a 	sub	r5,r5,r4
    bfac:	0013883a 	mov	r9,zero
    bfb0:	003f8e06 	br	bdec <__alt_mem_Flash_flash_data+0xf400bdec>
    bfb4:	008000c4 	movi	r2,3
    bfb8:	50811d26 	beq	r10,r2,c430 <__muldf3+0x70c>
    bfbc:	00800044 	movi	r2,1
    bfc0:	5080e01e 	bne	r10,r2,c344 <__muldf3+0x620>
    bfc4:	e0a6703a 	and	r19,fp,r2
    bfc8:	0009883a 	mov	r4,zero
    bfcc:	0021883a 	mov	r16,zero
    bfd0:	0025883a 	mov	r18,zero
    bfd4:	003fad06 	br	be8c <__alt_mem_Flash_flash_data+0xf400be8c>
    bfd8:	0023883a 	mov	r17,zero
    bfdc:	002f883a 	mov	r23,zero
    bfe0:	02400044 	movi	r9,1
    bfe4:	003f8106 	br	bdec <__alt_mem_Flash_flash_data+0xf400bdec>
    bfe8:	024000c4 	movi	r9,3
    bfec:	003f7f06 	br	bdec <__alt_mem_Flash_flash_data+0xf400bdec>
    bff0:	05400104 	movi	r21,4
    bff4:	0021883a 	mov	r16,zero
    bff8:	0025883a 	mov	r18,zero
    bffc:	02800044 	movi	r10,1
    c000:	003f6806 	br	bda4 <__alt_mem_Flash_flash_data+0xf400bda4>
    c004:	05400304 	movi	r21,12
    c008:	028000c4 	movi	r10,3
    c00c:	003f6506 	br	bda4 <__alt_mem_Flash_flash_data+0xf400bda4>
    c010:	04000434 	movhi	r16,16
    c014:	0027883a 	mov	r19,zero
    c018:	843fffc4 	addi	r16,r16,-1
    c01c:	04bfffc4 	movi	r18,-1
    c020:	0101ffc4 	movi	r4,2047
    c024:	003f9906 	br	be8c <__alt_mem_Flash_flash_data+0xf400be8c>
    c028:	8821883a 	mov	r16,r17
    c02c:	b825883a 	mov	r18,r23
    c030:	5839883a 	mov	fp,r11
    c034:	4815883a 	mov	r10,r9
    c038:	003f8e06 	br	be74 <__alt_mem_Flash_flash_data+0xf400be74>
    c03c:	8821883a 	mov	r16,r17
    c040:	b825883a 	mov	r18,r23
    c044:	b039883a 	mov	fp,r22
    c048:	4815883a 	mov	r10,r9
    c04c:	003f8906 	br	be74 <__alt_mem_Flash_flash_data+0xf400be74>
    c050:	b80cd43a 	srli	r6,r23,16
    c054:	9006d43a 	srli	r3,r18,16
    c058:	90bfffcc 	andi	r2,r18,65535
    c05c:	bdffffcc 	andi	r23,r23,65535
    c060:	b891383a 	mul	r8,r23,r2
    c064:	b8c9383a 	mul	r4,r23,r3
    c068:	309b383a 	mul	r13,r6,r2
    c06c:	400ed43a 	srli	r7,r8,16
    c070:	30df383a 	mul	r15,r6,r3
    c074:	235b883a 	add	r13,r4,r13
    c078:	69db883a 	add	r13,r13,r7
    c07c:	6900022e 	bgeu	r13,r4,c088 <__muldf3+0x364>
    c080:	01000074 	movhi	r4,1
    c084:	791f883a 	add	r15,r15,r4
    c088:	8828d43a 	srli	r20,r17,16
    c08c:	8c7fffcc 	andi	r17,r17,65535
    c090:	888f383a 	mul	r7,r17,r2
    c094:	88d3383a 	mul	r9,r17,r3
    c098:	a0a5383a 	mul	r18,r20,r2
    c09c:	3816d43a 	srli	r11,r7,16
    c0a0:	6814943a 	slli	r10,r13,16
    c0a4:	4ca5883a 	add	r18,r9,r18
    c0a8:	423fffcc 	andi	r8,r8,65535
    c0ac:	92e5883a 	add	r18,r18,r11
    c0b0:	6808d43a 	srli	r4,r13,16
    c0b4:	5215883a 	add	r10,r10,r8
    c0b8:	a0c7383a 	mul	r3,r20,r3
    c0bc:	9240022e 	bgeu	r18,r9,c0c8 <__muldf3+0x3a4>
    c0c0:	00800074 	movhi	r2,1
    c0c4:	1887883a 	add	r3,r3,r2
    c0c8:	802ad43a 	srli	r21,r16,16
    c0cc:	80bfffcc 	andi	r2,r16,65535
    c0d0:	b893383a 	mul	r9,r23,r2
    c0d4:	3091383a 	mul	r8,r6,r2
    c0d8:	bd6f383a 	mul	r23,r23,r21
    c0dc:	9026943a 	slli	r19,r18,16
    c0e0:	481ad43a 	srli	r13,r9,16
    c0e4:	9024d43a 	srli	r18,r18,16
    c0e8:	39ffffcc 	andi	r7,r7,65535
    c0ec:	ba11883a 	add	r8,r23,r8
    c0f0:	99e7883a 	add	r19,r19,r7
    c0f4:	4351883a 	add	r8,r8,r13
    c0f8:	1c97883a 	add	r11,r3,r18
    c0fc:	354d383a 	mul	r6,r6,r21
    c100:	9925883a 	add	r18,r19,r4
    c104:	45c0022e 	bgeu	r8,r23,c110 <__muldf3+0x3ec>
    c108:	00c00074 	movhi	r3,1
    c10c:	30cd883a 	add	r6,r6,r3
    c110:	8889383a 	mul	r4,r17,r2
    c114:	8d63383a 	mul	r17,r17,r21
    c118:	a085383a 	mul	r2,r20,r2
    c11c:	200ed43a 	srli	r7,r4,16
    c120:	401cd43a 	srli	r14,r8,16
    c124:	401a943a 	slli	r13,r8,16
    c128:	8885883a 	add	r2,r17,r2
    c12c:	4a3fffcc 	andi	r8,r9,65535
    c130:	11c5883a 	add	r2,r2,r7
    c134:	339d883a 	add	r14,r6,r14
    c138:	6a11883a 	add	r8,r13,r8
    c13c:	a561383a 	mul	r16,r20,r21
    c140:	1440022e 	bgeu	r2,r17,c14c <__muldf3+0x428>
    c144:	00c00074 	movhi	r3,1
    c148:	80e1883a 	add	r16,r16,r3
    c14c:	1006943a 	slli	r3,r2,16
    c150:	213fffcc 	andi	r4,r4,65535
    c154:	93db883a 	add	r13,r18,r15
    c158:	1909883a 	add	r4,r3,r4
    c15c:	22c7883a 	add	r3,r4,r11
    c160:	6cd3803a 	cmpltu	r9,r13,r19
    c164:	6a09883a 	add	r4,r13,r8
    c168:	1a5b883a 	add	r13,r3,r9
    c16c:	2211803a 	cmpltu	r8,r4,r8
    c170:	734d883a 	add	r6,r14,r13
    c174:	100ed43a 	srli	r7,r2,16
    c178:	6a53803a 	cmpltu	r9,r13,r9
    c17c:	3205883a 	add	r2,r6,r8
    c180:	1ac7803a 	cmpltu	r3,r3,r11
    c184:	1211803a 	cmpltu	r8,r2,r8
    c188:	48c6b03a 	or	r3,r9,r3
    c18c:	338d803a 	cmpltu	r6,r6,r14
    c190:	19c7883a 	add	r3,r3,r7
    c194:	418cb03a 	or	r6,r8,r6
    c198:	1987883a 	add	r3,r3,r6
    c19c:	2024927a 	slli	r18,r4,9
    c1a0:	1c07883a 	add	r3,r3,r16
    c1a4:	1806927a 	slli	r3,r3,9
    c1a8:	1020d5fa 	srli	r16,r2,23
    c1ac:	2008d5fa 	srli	r4,r4,23
    c1b0:	9294b03a 	or	r10,r18,r10
    c1b4:	1004927a 	slli	r2,r2,9
    c1b8:	5024c03a 	cmpne	r18,r10,zero
    c1bc:	1c20b03a 	or	r16,r3,r16
    c1c0:	9108b03a 	or	r4,r18,r4
    c1c4:	80c0402c 	andhi	r3,r16,256
    c1c8:	20a4b03a 	or	r18,r4,r2
    c1cc:	18000726 	beq	r3,zero,c1ec <__muldf3+0x4c8>
    c1d0:	9006d07a 	srli	r3,r18,1
    c1d4:	800897fa 	slli	r4,r16,31
    c1d8:	9080004c 	andi	r2,r18,1
    c1dc:	8020d07a 	srli	r16,r16,1
    c1e0:	10c4b03a 	or	r2,r2,r3
    c1e4:	1124b03a 	or	r18,r2,r4
    c1e8:	600b883a 	mov	r5,r12
    c1ec:	2900ffc4 	addi	r4,r5,1023
    c1f0:	01004b0e 	bge	zero,r4,c320 <__muldf3+0x5fc>
    c1f4:	908001cc 	andi	r2,r18,7
    c1f8:	10000726 	beq	r2,zero,c218 <__muldf3+0x4f4>
    c1fc:	90c003cc 	andi	r3,r18,15
    c200:	00800104 	movi	r2,4
    c204:	18800426 	beq	r3,r2,c218 <__muldf3+0x4f4>
    c208:	9087883a 	add	r3,r18,r2
    c20c:	1c85803a 	cmpltu	r2,r3,r18
    c210:	80a1883a 	add	r16,r16,r2
    c214:	1825883a 	mov	r18,r3
    c218:	8080402c 	andhi	r2,r16,256
    c21c:	10000426 	beq	r2,zero,c230 <__muldf3+0x50c>
    c220:	00bfc034 	movhi	r2,65280
    c224:	10bfffc4 	addi	r2,r2,-1
    c228:	29010004 	addi	r4,r5,1024
    c22c:	80a0703a 	and	r16,r16,r2
    c230:	0081ff84 	movi	r2,2046
    c234:	1100320e 	bge	r2,r4,c300 <__muldf3+0x5dc>
    c238:	b4c0004c 	andi	r19,r22,1
    c23c:	0101ffc4 	movi	r4,2047
    c240:	0021883a 	mov	r16,zero
    c244:	0025883a 	mov	r18,zero
    c248:	003f1006 	br	be8c <__alt_mem_Flash_flash_data+0xf400be8c>
    c24c:	8080022c 	andhi	r2,r16,8
    c250:	10000926 	beq	r2,zero,c278 <__muldf3+0x554>
    c254:	8880022c 	andhi	r2,r17,8
    c258:	1000071e 	bne	r2,zero,c278 <__muldf3+0x554>
    c25c:	00800434 	movhi	r2,16
    c260:	8c000234 	orhi	r16,r17,8
    c264:	10bfffc4 	addi	r2,r2,-1
    c268:	1827883a 	mov	r19,r3
    c26c:	80a0703a 	and	r16,r16,r2
    c270:	b825883a 	mov	r18,r23
    c274:	003f6a06 	br	c020 <__alt_mem_Flash_flash_data+0xf400c020>
    c278:	00800434 	movhi	r2,16
    c27c:	84000234 	orhi	r16,r16,8
    c280:	10bfffc4 	addi	r2,r2,-1
    c284:	80a0703a 	and	r16,r16,r2
    c288:	003f6506 	br	c020 <__alt_mem_Flash_flash_data+0xf400c020>
    c28c:	3009883a 	mov	r4,r6
    c290:	d8c00215 	stw	r3,8(sp)
    c294:	d9800315 	stw	r6,12(sp)
    c298:	da800015 	stw	r10,0(sp)
    c29c:	dac00115 	stw	r11,4(sp)
    c2a0:	000cf140 	call	cf14 <__clzsi2>
    c2a4:	11000804 	addi	r4,r2,32
    c2a8:	014009c4 	movi	r5,39
    c2ac:	d8c00217 	ldw	r3,8(sp)
    c2b0:	d9800317 	ldw	r6,12(sp)
    c2b4:	da800017 	ldw	r10,0(sp)
    c2b8:	dac00117 	ldw	r11,4(sp)
    c2bc:	293f320e 	bge	r5,r4,bf88 <__alt_mem_Flash_flash_data+0xf400bf88>
    c2c0:	10bffe04 	addi	r2,r2,-8
    c2c4:	b8a2983a 	sll	r17,r23,r2
    c2c8:	002f883a 	mov	r23,zero
    c2cc:	003f3506 	br	bfa4 <__alt_mem_Flash_flash_data+0xf400bfa4>
    c2d0:	d9800315 	stw	r6,12(sp)
    c2d4:	d9c00015 	stw	r7,0(sp)
    c2d8:	000cf140 	call	cf14 <__clzsi2>
    c2dc:	10c00804 	addi	r3,r2,32
    c2e0:	010009c4 	movi	r4,39
    c2e4:	d9800317 	ldw	r6,12(sp)
    c2e8:	d9c00017 	ldw	r7,0(sp)
    c2ec:	20ff060e 	bge	r4,r3,bf08 <__alt_mem_Flash_flash_data+0xf400bf08>
    c2f0:	10bffe04 	addi	r2,r2,-8
    c2f4:	88a0983a 	sll	r16,r17,r2
    c2f8:	0025883a 	mov	r18,zero
    c2fc:	003f0906 	br	bf24 <__alt_mem_Flash_flash_data+0xf400bf24>
    c300:	9004d0fa 	srli	r2,r18,3
    c304:	8024977a 	slli	r18,r16,29
    c308:	8020927a 	slli	r16,r16,9
    c30c:	2101ffcc 	andi	r4,r4,2047
    c310:	90a4b03a 	or	r18,r18,r2
    c314:	8020d33a 	srli	r16,r16,12
    c318:	b4c0004c 	andi	r19,r22,1
    c31c:	003edb06 	br	be8c <__alt_mem_Flash_flash_data+0xf400be8c>
    c320:	00ff0084 	movi	r3,-1022
    c324:	1947c83a 	sub	r3,r3,r5
    c328:	00800e04 	movi	r2,56
    c32c:	10c0080e 	bge	r2,r3,c350 <__muldf3+0x62c>
    c330:	b4c0004c 	andi	r19,r22,1
    c334:	0009883a 	mov	r4,zero
    c338:	0021883a 	mov	r16,zero
    c33c:	0025883a 	mov	r18,zero
    c340:	003ed206 	br	be8c <__alt_mem_Flash_flash_data+0xf400be8c>
    c344:	600b883a 	mov	r5,r12
    c348:	e02d883a 	mov	r22,fp
    c34c:	003fa706 	br	c1ec <__alt_mem_Flash_flash_data+0xf400c1ec>
    c350:	008007c4 	movi	r2,31
    c354:	10c01816 	blt	r2,r3,c3b8 <__muldf3+0x694>
    c358:	29410784 	addi	r5,r5,1054
    c35c:	8144983a 	sll	r2,r16,r5
    c360:	90c8d83a 	srl	r4,r18,r3
    c364:	914a983a 	sll	r5,r18,r5
    c368:	80c6d83a 	srl	r3,r16,r3
    c36c:	2088b03a 	or	r4,r4,r2
    c370:	2804c03a 	cmpne	r2,r5,zero
    c374:	2084b03a 	or	r2,r4,r2
    c378:	110001cc 	andi	r4,r2,7
    c37c:	20000726 	beq	r4,zero,c39c <__muldf3+0x678>
    c380:	114003cc 	andi	r5,r2,15
    c384:	01000104 	movi	r4,4
    c388:	29000426 	beq	r5,r4,c39c <__muldf3+0x678>
    c38c:	11000104 	addi	r4,r2,4
    c390:	2085803a 	cmpltu	r2,r4,r2
    c394:	1887883a 	add	r3,r3,r2
    c398:	2005883a 	mov	r2,r4
    c39c:	1900202c 	andhi	r4,r3,128
    c3a0:	20001826 	beq	r4,zero,c404 <__muldf3+0x6e0>
    c3a4:	b4c0004c 	andi	r19,r22,1
    c3a8:	01000044 	movi	r4,1
    c3ac:	0021883a 	mov	r16,zero
    c3b0:	0025883a 	mov	r18,zero
    c3b4:	003eb506 	br	be8c <__alt_mem_Flash_flash_data+0xf400be8c>
    c3b8:	00bef884 	movi	r2,-1054
    c3bc:	1145c83a 	sub	r2,r2,r5
    c3c0:	8088d83a 	srl	r4,r16,r2
    c3c4:	00800804 	movi	r2,32
    c3c8:	18801726 	beq	r3,r2,c428 <__muldf3+0x704>
    c3cc:	28810f84 	addi	r2,r5,1086
    c3d0:	8084983a 	sll	r2,r16,r2
    c3d4:	1484b03a 	or	r2,r2,r18
    c3d8:	1004c03a 	cmpne	r2,r2,zero
    c3dc:	1104b03a 	or	r2,r2,r4
    c3e0:	10c001cc 	andi	r3,r2,7
    c3e4:	18000b1e 	bne	r3,zero,c414 <__muldf3+0x6f0>
    c3e8:	0021883a 	mov	r16,zero
    c3ec:	1004d0fa 	srli	r2,r2,3
    c3f0:	b4c0004c 	andi	r19,r22,1
    c3f4:	0009883a 	mov	r4,zero
    c3f8:	10e4b03a 	or	r18,r2,r3
    c3fc:	003ea306 	br	be8c <__alt_mem_Flash_flash_data+0xf400be8c>
    c400:	0007883a 	mov	r3,zero
    c404:	1820927a 	slli	r16,r3,9
    c408:	1806977a 	slli	r3,r3,29
    c40c:	8020d33a 	srli	r16,r16,12
    c410:	003ff606 	br	c3ec <__alt_mem_Flash_flash_data+0xf400c3ec>
    c414:	110003cc 	andi	r4,r2,15
    c418:	00c00104 	movi	r3,4
    c41c:	20fff826 	beq	r4,r3,c400 <__alt_mem_Flash_flash_data+0xf400c400>
    c420:	0007883a 	mov	r3,zero
    c424:	003fd906 	br	c38c <__alt_mem_Flash_flash_data+0xf400c38c>
    c428:	0005883a 	mov	r2,zero
    c42c:	003fe906 	br	c3d4 <__alt_mem_Flash_flash_data+0xf400c3d4>
    c430:	00800434 	movhi	r2,16
    c434:	84000234 	orhi	r16,r16,8
    c438:	10bfffc4 	addi	r2,r2,-1
    c43c:	e4c0004c 	andi	r19,fp,1
    c440:	80a0703a 	and	r16,r16,r2
    c444:	003ef606 	br	c020 <__alt_mem_Flash_flash_data+0xf400c020>

0000c448 <__subdf3>:
    c448:	00c00434 	movhi	r3,16
    c44c:	18ffffc4 	addi	r3,r3,-1
    c450:	defffb04 	addi	sp,sp,-20
    c454:	28d2703a 	and	r9,r5,r3
    c458:	3814d53a 	srli	r10,r7,20
    c45c:	38c6703a 	and	r3,r7,r3
    c460:	3004d77a 	srli	r2,r6,29
    c464:	dc800215 	stw	r18,8(sp)
    c468:	dc000015 	stw	r16,0(sp)
    c46c:	2824d7fa 	srli	r18,r5,31
    c470:	2820d53a 	srli	r16,r5,20
    c474:	481290fa 	slli	r9,r9,3
    c478:	200ad77a 	srli	r5,r4,29
    c47c:	180690fa 	slli	r3,r3,3
    c480:	dc400115 	stw	r17,4(sp)
    c484:	dfc00415 	stw	ra,16(sp)
    c488:	202290fa 	slli	r17,r4,3
    c48c:	dcc00315 	stw	r19,12(sp)
    c490:	5281ffcc 	andi	r10,r10,2047
    c494:	0101ffc4 	movi	r4,2047
    c498:	9011883a 	mov	r8,r18
    c49c:	8401ffcc 	andi	r16,r16,2047
    c4a0:	94803fcc 	andi	r18,r18,255
    c4a4:	494ab03a 	or	r5,r9,r5
    c4a8:	380ed7fa 	srli	r7,r7,31
    c4ac:	1886b03a 	or	r3,r3,r2
    c4b0:	300c90fa 	slli	r6,r6,3
    c4b4:	51009026 	beq	r10,r4,c6f8 <__subdf3+0x2b0>
    c4b8:	39c0005c 	xori	r7,r7,1
    c4bc:	8285c83a 	sub	r2,r16,r10
    c4c0:	91c06f26 	beq	r18,r7,c680 <__subdf3+0x238>
    c4c4:	0080b10e 	bge	zero,r2,c78c <__subdf3+0x344>
    c4c8:	50002a1e 	bne	r10,zero,c574 <__subdf3+0x12c>
    c4cc:	1988b03a 	or	r4,r3,r6
    c4d0:	2000941e 	bne	r4,zero,c724 <__subdf3+0x2dc>
    c4d4:	888001cc 	andi	r2,r17,7
    c4d8:	10005b26 	beq	r2,zero,c648 <__subdf3+0x200>
    c4dc:	88c003cc 	andi	r3,r17,15
    c4e0:	00800104 	movi	r2,4
    c4e4:	18805826 	beq	r3,r2,c648 <__subdf3+0x200>
    c4e8:	88c00104 	addi	r3,r17,4
    c4ec:	1c63803a 	cmpltu	r17,r3,r17
    c4f0:	2c4b883a 	add	r5,r5,r17
    c4f4:	2880202c 	andhi	r2,r5,128
    c4f8:	9200004c 	andi	r8,r18,1
    c4fc:	1823883a 	mov	r17,r3
    c500:	10005426 	beq	r2,zero,c654 <__subdf3+0x20c>
    c504:	84000044 	addi	r16,r16,1
    c508:	0081ffc4 	movi	r2,2047
    c50c:	8080bf26 	beq	r16,r2,c80c <__subdf3+0x3c4>
    c510:	013fe034 	movhi	r4,65408
    c514:	213fffc4 	addi	r4,r4,-1
    c518:	290a703a 	and	r5,r5,r4
    c51c:	2804977a 	slli	r2,r5,29
    c520:	280a927a 	slli	r5,r5,9
    c524:	8822d0fa 	srli	r17,r17,3
    c528:	8401ffcc 	andi	r16,r16,2047
    c52c:	2808d33a 	srli	r4,r5,12
    c530:	1444b03a 	or	r2,r2,r17
    c534:	8401ffcc 	andi	r16,r16,2047
    c538:	800a953a 	slli	r5,r16,20
    c53c:	40c03fcc 	andi	r3,r8,255
    c540:	04000434 	movhi	r16,16
    c544:	180697fa 	slli	r3,r3,31
    c548:	843fffc4 	addi	r16,r16,-1
    c54c:	2420703a 	and	r16,r4,r16
    c550:	8160b03a 	or	r16,r16,r5
    c554:	80c6b03a 	or	r3,r16,r3
    c558:	dfc00417 	ldw	ra,16(sp)
    c55c:	dcc00317 	ldw	r19,12(sp)
    c560:	dc800217 	ldw	r18,8(sp)
    c564:	dc400117 	ldw	r17,4(sp)
    c568:	dc000017 	ldw	r16,0(sp)
    c56c:	dec00504 	addi	sp,sp,20
    c570:	f800283a 	ret
    c574:	0101ffc4 	movi	r4,2047
    c578:	813fd626 	beq	r16,r4,c4d4 <__alt_mem_Flash_flash_data+0xf400c4d4>
    c57c:	18c02034 	orhi	r3,r3,128
    c580:	01000e04 	movi	r4,56
    c584:	2080a416 	blt	r4,r2,c818 <__subdf3+0x3d0>
    c588:	010007c4 	movi	r4,31
    c58c:	2080c716 	blt	r4,r2,c8ac <__subdf3+0x464>
    c590:	01000804 	movi	r4,32
    c594:	2089c83a 	sub	r4,r4,r2
    c598:	1910983a 	sll	r8,r3,r4
    c59c:	308ed83a 	srl	r7,r6,r2
    c5a0:	3108983a 	sll	r4,r6,r4
    c5a4:	1884d83a 	srl	r2,r3,r2
    c5a8:	41ccb03a 	or	r6,r8,r7
    c5ac:	2008c03a 	cmpne	r4,r4,zero
    c5b0:	310cb03a 	or	r6,r6,r4
    c5b4:	898dc83a 	sub	r6,r17,r6
    c5b8:	89a3803a 	cmpltu	r17,r17,r6
    c5bc:	288bc83a 	sub	r5,r5,r2
    c5c0:	2c4bc83a 	sub	r5,r5,r17
    c5c4:	3023883a 	mov	r17,r6
    c5c8:	2880202c 	andhi	r2,r5,128
    c5cc:	10006b26 	beq	r2,zero,c77c <__subdf3+0x334>
    c5d0:	04c02034 	movhi	r19,128
    c5d4:	9cffffc4 	addi	r19,r19,-1
    c5d8:	2ce6703a 	and	r19,r5,r19
    c5dc:	98007c26 	beq	r19,zero,c7d0 <__subdf3+0x388>
    c5e0:	9809883a 	mov	r4,r19
    c5e4:	000cf140 	call	cf14 <__clzsi2>
    c5e8:	10fffe04 	addi	r3,r2,-8
    c5ec:	010007c4 	movi	r4,31
    c5f0:	20c07d16 	blt	r4,r3,c7e8 <__subdf3+0x3a0>
    c5f4:	01400a04 	movi	r5,40
    c5f8:	2885c83a 	sub	r2,r5,r2
    c5fc:	888ad83a 	srl	r5,r17,r2
    c600:	98e6983a 	sll	r19,r19,r3
    c604:	88e2983a 	sll	r17,r17,r3
    c608:	2ce6b03a 	or	r19,r5,r19
    c60c:	1c007a16 	blt	r3,r16,c7f8 <__subdf3+0x3b0>
    c610:	1c21c83a 	sub	r16,r3,r16
    c614:	81400044 	addi	r5,r16,1
    c618:	00c007c4 	movi	r3,31
    c61c:	19409616 	blt	r3,r5,c878 <__subdf3+0x430>
    c620:	1c21c83a 	sub	r16,r3,r16
    c624:	8c08983a 	sll	r4,r17,r16
    c628:	8946d83a 	srl	r3,r17,r5
    c62c:	9c20983a 	sll	r16,r19,r16
    c630:	2008c03a 	cmpne	r4,r4,zero
    c634:	994ad83a 	srl	r5,r19,r5
    c638:	1c06b03a 	or	r3,r3,r16
    c63c:	1922b03a 	or	r17,r3,r4
    c640:	0021883a 	mov	r16,zero
    c644:	003fa306 	br	c4d4 <__alt_mem_Flash_flash_data+0xf400c4d4>
    c648:	2880202c 	andhi	r2,r5,128
    c64c:	9200004c 	andi	r8,r18,1
    c650:	103fac1e 	bne	r2,zero,c504 <__alt_mem_Flash_flash_data+0xf400c504>
    c654:	2804977a 	slli	r2,r5,29
    c658:	8822d0fa 	srli	r17,r17,3
    c65c:	00c1ffc4 	movi	r3,2047
    c660:	280ad0fa 	srli	r5,r5,3
    c664:	1444b03a 	or	r2,r2,r17
    c668:	80c02726 	beq	r16,r3,c708 <__subdf3+0x2c0>
    c66c:	01000434 	movhi	r4,16
    c670:	213fffc4 	addi	r4,r4,-1
    c674:	80e0703a 	and	r16,r16,r3
    c678:	2908703a 	and	r4,r5,r4
    c67c:	003fad06 	br	c534 <__alt_mem_Flash_flash_data+0xf400c534>
    c680:	0080690e 	bge	zero,r2,c828 <__subdf3+0x3e0>
    c684:	50002f26 	beq	r10,zero,c744 <__subdf3+0x2fc>
    c688:	0101ffc4 	movi	r4,2047
    c68c:	813f9126 	beq	r16,r4,c4d4 <__alt_mem_Flash_flash_data+0xf400c4d4>
    c690:	18c02034 	orhi	r3,r3,128
    c694:	01000e04 	movi	r4,56
    c698:	2080b00e 	bge	r4,r2,c95c <__subdf3+0x514>
    c69c:	198cb03a 	or	r6,r3,r6
    c6a0:	300ec03a 	cmpne	r7,r6,zero
    c6a4:	0005883a 	mov	r2,zero
    c6a8:	3c4f883a 	add	r7,r7,r17
    c6ac:	3c63803a 	cmpltu	r17,r7,r17
    c6b0:	114b883a 	add	r5,r2,r5
    c6b4:	2c4b883a 	add	r5,r5,r17
    c6b8:	3823883a 	mov	r17,r7
    c6bc:	2880202c 	andhi	r2,r5,128
    c6c0:	10002e26 	beq	r2,zero,c77c <__subdf3+0x334>
    c6c4:	84000044 	addi	r16,r16,1
    c6c8:	0081ffc4 	movi	r2,2047
    c6cc:	8080de26 	beq	r16,r2,ca48 <__subdf3+0x600>
    c6d0:	00bfe034 	movhi	r2,65408
    c6d4:	10bfffc4 	addi	r2,r2,-1
    c6d8:	288a703a 	and	r5,r5,r2
    c6dc:	880cd07a 	srli	r6,r17,1
    c6e0:	280897fa 	slli	r4,r5,31
    c6e4:	88c0004c 	andi	r3,r17,1
    c6e8:	30e2b03a 	or	r17,r6,r3
    c6ec:	280ad07a 	srli	r5,r5,1
    c6f0:	8922b03a 	or	r17,r17,r4
    c6f4:	003f7706 	br	c4d4 <__alt_mem_Flash_flash_data+0xf400c4d4>
    c6f8:	1984b03a 	or	r2,r3,r6
    c6fc:	103f6e26 	beq	r2,zero,c4b8 <__alt_mem_Flash_flash_data+0xf400c4b8>
    c700:	39c03fcc 	andi	r7,r7,255
    c704:	003f6d06 	br	c4bc <__alt_mem_Flash_flash_data+0xf400c4bc>
    c708:	1146b03a 	or	r3,r2,r5
    c70c:	18003f26 	beq	r3,zero,c80c <__subdf3+0x3c4>
    c710:	00c00434 	movhi	r3,16
    c714:	29000234 	orhi	r4,r5,8
    c718:	18ffffc4 	addi	r3,r3,-1
    c71c:	20c8703a 	and	r4,r4,r3
    c720:	003f8406 	br	c534 <__alt_mem_Flash_flash_data+0xf400c534>
    c724:	10bfffc4 	addi	r2,r2,-1
    c728:	1000501e 	bne	r2,zero,c86c <__subdf3+0x424>
    c72c:	898fc83a 	sub	r7,r17,r6
    c730:	89e3803a 	cmpltu	r17,r17,r7
    c734:	28cbc83a 	sub	r5,r5,r3
    c738:	2c4bc83a 	sub	r5,r5,r17
    c73c:	3823883a 	mov	r17,r7
    c740:	003fa106 	br	c5c8 <__alt_mem_Flash_flash_data+0xf400c5c8>
    c744:	1988b03a 	or	r4,r3,r6
    c748:	203f6226 	beq	r4,zero,c4d4 <__alt_mem_Flash_flash_data+0xf400c4d4>
    c74c:	10bfffc4 	addi	r2,r2,-1
    c750:	10009b1e 	bne	r2,zero,c9c0 <__subdf3+0x578>
    c754:	344d883a 	add	r6,r6,r17
    c758:	3463803a 	cmpltu	r17,r6,r17
    c75c:	194b883a 	add	r5,r3,r5
    c760:	2c4b883a 	add	r5,r5,r17
    c764:	3023883a 	mov	r17,r6
    c768:	003fd406 	br	c6bc <__alt_mem_Flash_flash_data+0xf400c6bc>
    c76c:	1106b03a 	or	r3,r2,r4
    c770:	1800b426 	beq	r3,zero,ca44 <__subdf3+0x5fc>
    c774:	100b883a 	mov	r5,r2
    c778:	2023883a 	mov	r17,r4
    c77c:	888001cc 	andi	r2,r17,7
    c780:	103f561e 	bne	r2,zero,c4dc <__alt_mem_Flash_flash_data+0xf400c4dc>
    c784:	9200004c 	andi	r8,r18,1
    c788:	003fb206 	br	c654 <__alt_mem_Flash_flash_data+0xf400c654>
    c78c:	1000531e 	bne	r2,zero,c8dc <__subdf3+0x494>
    c790:	80800044 	addi	r2,r16,1
    c794:	1081ffcc 	andi	r2,r2,2047
    c798:	01000044 	movi	r4,1
    c79c:	2080a00e 	bge	r4,r2,ca20 <__subdf3+0x5d8>
    c7a0:	8985c83a 	sub	r2,r17,r6
    c7a4:	8889803a 	cmpltu	r4,r17,r2
    c7a8:	28e7c83a 	sub	r19,r5,r3
    c7ac:	9927c83a 	sub	r19,r19,r4
    c7b0:	9900202c 	andhi	r4,r19,128
    c7b4:	20006226 	beq	r4,zero,c940 <__subdf3+0x4f8>
    c7b8:	3463c83a 	sub	r17,r6,r17
    c7bc:	194bc83a 	sub	r5,r3,r5
    c7c0:	344d803a 	cmpltu	r6,r6,r17
    c7c4:	29a7c83a 	sub	r19,r5,r6
    c7c8:	3825883a 	mov	r18,r7
    c7cc:	983f841e 	bne	r19,zero,c5e0 <__alt_mem_Flash_flash_data+0xf400c5e0>
    c7d0:	8809883a 	mov	r4,r17
    c7d4:	000cf140 	call	cf14 <__clzsi2>
    c7d8:	10800804 	addi	r2,r2,32
    c7dc:	10fffe04 	addi	r3,r2,-8
    c7e0:	010007c4 	movi	r4,31
    c7e4:	20ff830e 	bge	r4,r3,c5f4 <__alt_mem_Flash_flash_data+0xf400c5f4>
    c7e8:	14fff604 	addi	r19,r2,-40
    c7ec:	8ce6983a 	sll	r19,r17,r19
    c7f0:	0023883a 	mov	r17,zero
    c7f4:	1c3f860e 	bge	r3,r16,c610 <__alt_mem_Flash_flash_data+0xf400c610>
    c7f8:	017fe034 	movhi	r5,65408
    c7fc:	297fffc4 	addi	r5,r5,-1
    c800:	80e1c83a 	sub	r16,r16,r3
    c804:	994a703a 	and	r5,r19,r5
    c808:	003f3206 	br	c4d4 <__alt_mem_Flash_flash_data+0xf400c4d4>
    c80c:	0009883a 	mov	r4,zero
    c810:	0005883a 	mov	r2,zero
    c814:	003f4706 	br	c534 <__alt_mem_Flash_flash_data+0xf400c534>
    c818:	198cb03a 	or	r6,r3,r6
    c81c:	300cc03a 	cmpne	r6,r6,zero
    c820:	0005883a 	mov	r2,zero
    c824:	003f6306 	br	c5b4 <__alt_mem_Flash_flash_data+0xf400c5b4>
    c828:	10009d1e 	bne	r2,zero,caa0 <__subdf3+0x658>
    c82c:	81c00044 	addi	r7,r16,1
    c830:	3881ffcc 	andi	r2,r7,2047
    c834:	02400044 	movi	r9,1
    c838:	4880680e 	bge	r9,r2,c9dc <__subdf3+0x594>
    c83c:	0081ffc4 	movi	r2,2047
    c840:	3880ae26 	beq	r7,r2,cafc <__subdf3+0x6b4>
    c844:	344d883a 	add	r6,r6,r17
    c848:	3463803a 	cmpltu	r17,r6,r17
    c84c:	194b883a 	add	r5,r3,r5
    c850:	2c4b883a 	add	r5,r5,r17
    c854:	282297fa 	slli	r17,r5,31
    c858:	300cd07a 	srli	r6,r6,1
    c85c:	280ad07a 	srli	r5,r5,1
    c860:	3821883a 	mov	r16,r7
    c864:	89a2b03a 	or	r17,r17,r6
    c868:	003f1a06 	br	c4d4 <__alt_mem_Flash_flash_data+0xf400c4d4>
    c86c:	0101ffc4 	movi	r4,2047
    c870:	813f431e 	bne	r16,r4,c580 <__alt_mem_Flash_flash_data+0xf400c580>
    c874:	003f1706 	br	c4d4 <__alt_mem_Flash_flash_data+0xf400c4d4>
    c878:	80bff844 	addi	r2,r16,-31
    c87c:	00c00804 	movi	r3,32
    c880:	9884d83a 	srl	r2,r19,r2
    c884:	28c05126 	beq	r5,r3,c9cc <__subdf3+0x584>
    c888:	00c00fc4 	movi	r3,63
    c88c:	1c21c83a 	sub	r16,r3,r16
    c890:	9c26983a 	sll	r19,r19,r16
    c894:	9c62b03a 	or	r17,r19,r17
    c898:	8822c03a 	cmpne	r17,r17,zero
    c89c:	88a2b03a 	or	r17,r17,r2
    c8a0:	000b883a 	mov	r5,zero
    c8a4:	0021883a 	mov	r16,zero
    c8a8:	003fb406 	br	c77c <__alt_mem_Flash_flash_data+0xf400c77c>
    c8ac:	113ff804 	addi	r4,r2,-32
    c8b0:	01c00804 	movi	r7,32
    c8b4:	1908d83a 	srl	r4,r3,r4
    c8b8:	11c04626 	beq	r2,r7,c9d4 <__subdf3+0x58c>
    c8bc:	01c01004 	movi	r7,64
    c8c0:	3885c83a 	sub	r2,r7,r2
    c8c4:	1884983a 	sll	r2,r3,r2
    c8c8:	118cb03a 	or	r6,r2,r6
    c8cc:	300cc03a 	cmpne	r6,r6,zero
    c8d0:	310cb03a 	or	r6,r6,r4
    c8d4:	0005883a 	mov	r2,zero
    c8d8:	003f3606 	br	c5b4 <__alt_mem_Flash_flash_data+0xf400c5b4>
    c8dc:	80002b26 	beq	r16,zero,c98c <__subdf3+0x544>
    c8e0:	0101ffc4 	movi	r4,2047
    c8e4:	51006926 	beq	r10,r4,ca8c <__subdf3+0x644>
    c8e8:	0085c83a 	sub	r2,zero,r2
    c8ec:	29402034 	orhi	r5,r5,128
    c8f0:	01000e04 	movi	r4,56
    c8f4:	20807d16 	blt	r4,r2,caec <__subdf3+0x6a4>
    c8f8:	010007c4 	movi	r4,31
    c8fc:	2080d916 	blt	r4,r2,cc64 <__subdf3+0x81c>
    c900:	01000804 	movi	r4,32
    c904:	2089c83a 	sub	r4,r4,r2
    c908:	2912983a 	sll	r9,r5,r4
    c90c:	8890d83a 	srl	r8,r17,r2
    c910:	8908983a 	sll	r4,r17,r4
    c914:	2884d83a 	srl	r2,r5,r2
    c918:	4a22b03a 	or	r17,r9,r8
    c91c:	2008c03a 	cmpne	r4,r4,zero
    c920:	8922b03a 	or	r17,r17,r4
    c924:	3463c83a 	sub	r17,r6,r17
    c928:	1885c83a 	sub	r2,r3,r2
    c92c:	344d803a 	cmpltu	r6,r6,r17
    c930:	118bc83a 	sub	r5,r2,r6
    c934:	5021883a 	mov	r16,r10
    c938:	3825883a 	mov	r18,r7
    c93c:	003f2206 	br	c5c8 <__alt_mem_Flash_flash_data+0xf400c5c8>
    c940:	9886b03a 	or	r3,r19,r2
    c944:	18001c1e 	bne	r3,zero,c9b8 <__subdf3+0x570>
    c948:	0011883a 	mov	r8,zero
    c94c:	000b883a 	mov	r5,zero
    c950:	0023883a 	mov	r17,zero
    c954:	0021883a 	mov	r16,zero
    c958:	003f3e06 	br	c654 <__alt_mem_Flash_flash_data+0xf400c654>
    c95c:	010007c4 	movi	r4,31
    c960:	20803c16 	blt	r4,r2,ca54 <__subdf3+0x60c>
    c964:	01000804 	movi	r4,32
    c968:	2089c83a 	sub	r4,r4,r2
    c96c:	1912983a 	sll	r9,r3,r4
    c970:	308ed83a 	srl	r7,r6,r2
    c974:	3108983a 	sll	r4,r6,r4
    c978:	1884d83a 	srl	r2,r3,r2
    c97c:	49ceb03a 	or	r7,r9,r7
    c980:	2008c03a 	cmpne	r4,r4,zero
    c984:	390eb03a 	or	r7,r7,r4
    c988:	003f4706 	br	c6a8 <__alt_mem_Flash_flash_data+0xf400c6a8>
    c98c:	2c48b03a 	or	r4,r5,r17
    c990:	20003e26 	beq	r4,zero,ca8c <__subdf3+0x644>
    c994:	0084303a 	nor	r2,zero,r2
    c998:	10003a1e 	bne	r2,zero,ca84 <__subdf3+0x63c>
    c99c:	3463c83a 	sub	r17,r6,r17
    c9a0:	194bc83a 	sub	r5,r3,r5
    c9a4:	344d803a 	cmpltu	r6,r6,r17
    c9a8:	298bc83a 	sub	r5,r5,r6
    c9ac:	5021883a 	mov	r16,r10
    c9b0:	3825883a 	mov	r18,r7
    c9b4:	003f0406 	br	c5c8 <__alt_mem_Flash_flash_data+0xf400c5c8>
    c9b8:	1023883a 	mov	r17,r2
    c9bc:	003f0706 	br	c5dc <__alt_mem_Flash_flash_data+0xf400c5dc>
    c9c0:	0101ffc4 	movi	r4,2047
    c9c4:	813f331e 	bne	r16,r4,c694 <__alt_mem_Flash_flash_data+0xf400c694>
    c9c8:	003ec206 	br	c4d4 <__alt_mem_Flash_flash_data+0xf400c4d4>
    c9cc:	0027883a 	mov	r19,zero
    c9d0:	003fb006 	br	c894 <__alt_mem_Flash_flash_data+0xf400c894>
    c9d4:	0005883a 	mov	r2,zero
    c9d8:	003fbb06 	br	c8c8 <__alt_mem_Flash_flash_data+0xf400c8c8>
    c9dc:	2c44b03a 	or	r2,r5,r17
    c9e0:	80008b1e 	bne	r16,zero,cc10 <__subdf3+0x7c8>
    c9e4:	1000b526 	beq	r2,zero,ccbc <__subdf3+0x874>
    c9e8:	1984b03a 	or	r2,r3,r6
    c9ec:	103eb926 	beq	r2,zero,c4d4 <__alt_mem_Flash_flash_data+0xf400c4d4>
    c9f0:	3449883a 	add	r4,r6,r17
    c9f4:	2463803a 	cmpltu	r17,r4,r17
    c9f8:	194b883a 	add	r5,r3,r5
    c9fc:	2c4b883a 	add	r5,r5,r17
    ca00:	2880202c 	andhi	r2,r5,128
    ca04:	2023883a 	mov	r17,r4
    ca08:	103f5c26 	beq	r2,zero,c77c <__alt_mem_Flash_flash_data+0xf400c77c>
    ca0c:	00bfe034 	movhi	r2,65408
    ca10:	10bfffc4 	addi	r2,r2,-1
    ca14:	4821883a 	mov	r16,r9
    ca18:	288a703a 	and	r5,r5,r2
    ca1c:	003ead06 	br	c4d4 <__alt_mem_Flash_flash_data+0xf400c4d4>
    ca20:	2c44b03a 	or	r2,r5,r17
    ca24:	8000291e 	bne	r16,zero,cacc <__subdf3+0x684>
    ca28:	10004f1e 	bne	r2,zero,cb68 <__subdf3+0x720>
    ca2c:	1984b03a 	or	r2,r3,r6
    ca30:	10000426 	beq	r2,zero,ca44 <__subdf3+0x5fc>
    ca34:	180b883a 	mov	r5,r3
    ca38:	3023883a 	mov	r17,r6
    ca3c:	3825883a 	mov	r18,r7
    ca40:	003ea406 	br	c4d4 <__alt_mem_Flash_flash_data+0xf400c4d4>
    ca44:	0011883a 	mov	r8,zero
    ca48:	000b883a 	mov	r5,zero
    ca4c:	0023883a 	mov	r17,zero
    ca50:	003f0006 	br	c654 <__alt_mem_Flash_flash_data+0xf400c654>
    ca54:	11fff804 	addi	r7,r2,-32
    ca58:	19c8d83a 	srl	r4,r3,r7
    ca5c:	01c00804 	movi	r7,32
    ca60:	11c07e26 	beq	r2,r7,cc5c <__subdf3+0x814>
    ca64:	01c01004 	movi	r7,64
    ca68:	3885c83a 	sub	r2,r7,r2
    ca6c:	1884983a 	sll	r2,r3,r2
    ca70:	118cb03a 	or	r6,r2,r6
    ca74:	300ec03a 	cmpne	r7,r6,zero
    ca78:	390eb03a 	or	r7,r7,r4
    ca7c:	0005883a 	mov	r2,zero
    ca80:	003f0906 	br	c6a8 <__alt_mem_Flash_flash_data+0xf400c6a8>
    ca84:	0101ffc4 	movi	r4,2047
    ca88:	513f991e 	bne	r10,r4,c8f0 <__alt_mem_Flash_flash_data+0xf400c8f0>
    ca8c:	180b883a 	mov	r5,r3
    ca90:	3023883a 	mov	r17,r6
    ca94:	5021883a 	mov	r16,r10
    ca98:	3825883a 	mov	r18,r7
    ca9c:	003e8d06 	br	c4d4 <__alt_mem_Flash_flash_data+0xf400c4d4>
    caa0:	80001a1e 	bne	r16,zero,cb0c <__subdf3+0x6c4>
    caa4:	2c48b03a 	or	r4,r5,r17
    caa8:	20005526 	beq	r4,zero,cc00 <__subdf3+0x7b8>
    caac:	0084303a 	nor	r2,zero,r2
    cab0:	1000511e 	bne	r2,zero,cbf8 <__subdf3+0x7b0>
    cab4:	89a3883a 	add	r17,r17,r6
    cab8:	194b883a 	add	r5,r3,r5
    cabc:	898d803a 	cmpltu	r6,r17,r6
    cac0:	298b883a 	add	r5,r5,r6
    cac4:	5021883a 	mov	r16,r10
    cac8:	003efc06 	br	c6bc <__alt_mem_Flash_flash_data+0xf400c6bc>
    cacc:	1000341e 	bne	r2,zero,cba0 <__subdf3+0x758>
    cad0:	1984b03a 	or	r2,r3,r6
    cad4:	10006f26 	beq	r2,zero,cc94 <__subdf3+0x84c>
    cad8:	180b883a 	mov	r5,r3
    cadc:	3023883a 	mov	r17,r6
    cae0:	3825883a 	mov	r18,r7
    cae4:	0401ffc4 	movi	r16,2047
    cae8:	003e7a06 	br	c4d4 <__alt_mem_Flash_flash_data+0xf400c4d4>
    caec:	2c62b03a 	or	r17,r5,r17
    caf0:	8822c03a 	cmpne	r17,r17,zero
    caf4:	0005883a 	mov	r2,zero
    caf8:	003f8a06 	br	c924 <__alt_mem_Flash_flash_data+0xf400c924>
    cafc:	3821883a 	mov	r16,r7
    cb00:	000b883a 	mov	r5,zero
    cb04:	0023883a 	mov	r17,zero
    cb08:	003ed206 	br	c654 <__alt_mem_Flash_flash_data+0xf400c654>
    cb0c:	0101ffc4 	movi	r4,2047
    cb10:	51003b26 	beq	r10,r4,cc00 <__subdf3+0x7b8>
    cb14:	0085c83a 	sub	r2,zero,r2
    cb18:	29402034 	orhi	r5,r5,128
    cb1c:	01000e04 	movi	r4,56
    cb20:	20806216 	blt	r4,r2,ccac <__subdf3+0x864>
    cb24:	010007c4 	movi	r4,31
    cb28:	20806b16 	blt	r4,r2,ccd8 <__subdf3+0x890>
    cb2c:	01000804 	movi	r4,32
    cb30:	2089c83a 	sub	r4,r4,r2
    cb34:	2912983a 	sll	r9,r5,r4
    cb38:	888ed83a 	srl	r7,r17,r2
    cb3c:	8908983a 	sll	r4,r17,r4
    cb40:	2884d83a 	srl	r2,r5,r2
    cb44:	49e2b03a 	or	r17,r9,r7
    cb48:	2008c03a 	cmpne	r4,r4,zero
    cb4c:	8922b03a 	or	r17,r17,r4
    cb50:	89a3883a 	add	r17,r17,r6
    cb54:	10c5883a 	add	r2,r2,r3
    cb58:	898d803a 	cmpltu	r6,r17,r6
    cb5c:	118b883a 	add	r5,r2,r6
    cb60:	5021883a 	mov	r16,r10
    cb64:	003ed506 	br	c6bc <__alt_mem_Flash_flash_data+0xf400c6bc>
    cb68:	1984b03a 	or	r2,r3,r6
    cb6c:	103e5926 	beq	r2,zero,c4d4 <__alt_mem_Flash_flash_data+0xf400c4d4>
    cb70:	8989c83a 	sub	r4,r17,r6
    cb74:	8911803a 	cmpltu	r8,r17,r4
    cb78:	28c5c83a 	sub	r2,r5,r3
    cb7c:	1205c83a 	sub	r2,r2,r8
    cb80:	1200202c 	andhi	r8,r2,128
    cb84:	403ef926 	beq	r8,zero,c76c <__alt_mem_Flash_flash_data+0xf400c76c>
    cb88:	3463c83a 	sub	r17,r6,r17
    cb8c:	194bc83a 	sub	r5,r3,r5
    cb90:	344d803a 	cmpltu	r6,r6,r17
    cb94:	298bc83a 	sub	r5,r5,r6
    cb98:	3825883a 	mov	r18,r7
    cb9c:	003e4d06 	br	c4d4 <__alt_mem_Flash_flash_data+0xf400c4d4>
    cba0:	1984b03a 	or	r2,r3,r6
    cba4:	10002b26 	beq	r2,zero,cc54 <__subdf3+0x80c>
    cba8:	2808d0fa 	srli	r4,r5,3
    cbac:	8822d0fa 	srli	r17,r17,3
    cbb0:	280a977a 	slli	r5,r5,29
    cbb4:	2080022c 	andhi	r2,r4,8
    cbb8:	2c62b03a 	or	r17,r5,r17
    cbbc:	10000826 	beq	r2,zero,cbe0 <__subdf3+0x798>
    cbc0:	1810d0fa 	srli	r8,r3,3
    cbc4:	4080022c 	andhi	r2,r8,8
    cbc8:	1000051e 	bne	r2,zero,cbe0 <__subdf3+0x798>
    cbcc:	300cd0fa 	srli	r6,r6,3
    cbd0:	1804977a 	slli	r2,r3,29
    cbd4:	4009883a 	mov	r4,r8
    cbd8:	3825883a 	mov	r18,r7
    cbdc:	11a2b03a 	or	r17,r2,r6
    cbe0:	880ad77a 	srli	r5,r17,29
    cbe4:	200890fa 	slli	r4,r4,3
    cbe8:	882290fa 	slli	r17,r17,3
    cbec:	0401ffc4 	movi	r16,2047
    cbf0:	290ab03a 	or	r5,r5,r4
    cbf4:	003e3706 	br	c4d4 <__alt_mem_Flash_flash_data+0xf400c4d4>
    cbf8:	0101ffc4 	movi	r4,2047
    cbfc:	513fc71e 	bne	r10,r4,cb1c <__alt_mem_Flash_flash_data+0xf400cb1c>
    cc00:	180b883a 	mov	r5,r3
    cc04:	3023883a 	mov	r17,r6
    cc08:	5021883a 	mov	r16,r10
    cc0c:	003e3106 	br	c4d4 <__alt_mem_Flash_flash_data+0xf400c4d4>
    cc10:	10002d26 	beq	r2,zero,ccc8 <__subdf3+0x880>
    cc14:	1984b03a 	or	r2,r3,r6
    cc18:	10000e26 	beq	r2,zero,cc54 <__subdf3+0x80c>
    cc1c:	2808d0fa 	srli	r4,r5,3
    cc20:	8822d0fa 	srli	r17,r17,3
    cc24:	280a977a 	slli	r5,r5,29
    cc28:	2080022c 	andhi	r2,r4,8
    cc2c:	2c62b03a 	or	r17,r5,r17
    cc30:	103feb26 	beq	r2,zero,cbe0 <__alt_mem_Flash_flash_data+0xf400cbe0>
    cc34:	180ed0fa 	srli	r7,r3,3
    cc38:	3880022c 	andhi	r2,r7,8
    cc3c:	103fe81e 	bne	r2,zero,cbe0 <__alt_mem_Flash_flash_data+0xf400cbe0>
    cc40:	300cd0fa 	srli	r6,r6,3
    cc44:	1804977a 	slli	r2,r3,29
    cc48:	3809883a 	mov	r4,r7
    cc4c:	11a2b03a 	or	r17,r2,r6
    cc50:	003fe306 	br	cbe0 <__alt_mem_Flash_flash_data+0xf400cbe0>
    cc54:	0401ffc4 	movi	r16,2047
    cc58:	003e1e06 	br	c4d4 <__alt_mem_Flash_flash_data+0xf400c4d4>
    cc5c:	0005883a 	mov	r2,zero
    cc60:	003f8306 	br	ca70 <__alt_mem_Flash_flash_data+0xf400ca70>
    cc64:	113ff804 	addi	r4,r2,-32
    cc68:	02000804 	movi	r8,32
    cc6c:	2908d83a 	srl	r4,r5,r4
    cc70:	12002526 	beq	r2,r8,cd08 <__subdf3+0x8c0>
    cc74:	02001004 	movi	r8,64
    cc78:	4085c83a 	sub	r2,r8,r2
    cc7c:	288a983a 	sll	r5,r5,r2
    cc80:	2c62b03a 	or	r17,r5,r17
    cc84:	8822c03a 	cmpne	r17,r17,zero
    cc88:	8922b03a 	or	r17,r17,r4
    cc8c:	0005883a 	mov	r2,zero
    cc90:	003f2406 	br	c924 <__alt_mem_Flash_flash_data+0xf400c924>
    cc94:	01402034 	movhi	r5,128
    cc98:	0011883a 	mov	r8,zero
    cc9c:	297fffc4 	addi	r5,r5,-1
    cca0:	047ffe04 	movi	r17,-8
    cca4:	0401ffc4 	movi	r16,2047
    cca8:	003e6a06 	br	c654 <__alt_mem_Flash_flash_data+0xf400c654>
    ccac:	2c62b03a 	or	r17,r5,r17
    ccb0:	8822c03a 	cmpne	r17,r17,zero
    ccb4:	0005883a 	mov	r2,zero
    ccb8:	003fa506 	br	cb50 <__alt_mem_Flash_flash_data+0xf400cb50>
    ccbc:	180b883a 	mov	r5,r3
    ccc0:	3023883a 	mov	r17,r6
    ccc4:	003e0306 	br	c4d4 <__alt_mem_Flash_flash_data+0xf400c4d4>
    ccc8:	180b883a 	mov	r5,r3
    cccc:	3023883a 	mov	r17,r6
    ccd0:	0401ffc4 	movi	r16,2047
    ccd4:	003dff06 	br	c4d4 <__alt_mem_Flash_flash_data+0xf400c4d4>
    ccd8:	113ff804 	addi	r4,r2,-32
    ccdc:	01c00804 	movi	r7,32
    cce0:	2908d83a 	srl	r4,r5,r4
    cce4:	11c00a26 	beq	r2,r7,cd10 <__subdf3+0x8c8>
    cce8:	01c01004 	movi	r7,64
    ccec:	3885c83a 	sub	r2,r7,r2
    ccf0:	288a983a 	sll	r5,r5,r2
    ccf4:	2c62b03a 	or	r17,r5,r17
    ccf8:	8822c03a 	cmpne	r17,r17,zero
    ccfc:	8922b03a 	or	r17,r17,r4
    cd00:	0005883a 	mov	r2,zero
    cd04:	003f9206 	br	cb50 <__alt_mem_Flash_flash_data+0xf400cb50>
    cd08:	000b883a 	mov	r5,zero
    cd0c:	003fdc06 	br	cc80 <__alt_mem_Flash_flash_data+0xf400cc80>
    cd10:	000b883a 	mov	r5,zero
    cd14:	003ff706 	br	ccf4 <__alt_mem_Flash_flash_data+0xf400ccf4>

0000cd18 <__fixdfsi>:
    cd18:	2806d53a 	srli	r3,r5,20
    cd1c:	00800434 	movhi	r2,16
    cd20:	10bfffc4 	addi	r2,r2,-1
    cd24:	18c1ffcc 	andi	r3,r3,2047
    cd28:	0180ff84 	movi	r6,1022
    cd2c:	2884703a 	and	r2,r5,r2
    cd30:	280ad7fa 	srli	r5,r5,31
    cd34:	30c0130e 	bge	r6,r3,cd84 <__fixdfsi+0x6c>
    cd38:	01810744 	movi	r6,1053
    cd3c:	30c00d16 	blt	r6,r3,cd74 <__fixdfsi+0x5c>
    cd40:	01810cc4 	movi	r6,1075
    cd44:	30cdc83a 	sub	r6,r6,r3
    cd48:	01c007c4 	movi	r7,31
    cd4c:	10800434 	orhi	r2,r2,16
    cd50:	39800e0e 	bge	r7,r6,cd8c <__fixdfsi+0x74>
    cd54:	010104c4 	movi	r4,1043
    cd58:	20c7c83a 	sub	r3,r4,r3
    cd5c:	10c6d83a 	srl	r3,r2,r3
    cd60:	29403fcc 	andi	r5,r5,255
    cd64:	0145c83a 	sub	r2,zero,r5
    cd68:	1884f03a 	xor	r2,r3,r2
    cd6c:	1145883a 	add	r2,r2,r5
    cd70:	f800283a 	ret
    cd74:	00a00034 	movhi	r2,32768
    cd78:	10bfffc4 	addi	r2,r2,-1
    cd7c:	2885883a 	add	r2,r5,r2
    cd80:	f800283a 	ret
    cd84:	0005883a 	mov	r2,zero
    cd88:	f800283a 	ret
    cd8c:	18fefb44 	addi	r3,r3,-1043
    cd90:	2188d83a 	srl	r4,r4,r6
    cd94:	10c6983a 	sll	r3,r2,r3
    cd98:	20c6b03a 	or	r3,r4,r3
    cd9c:	003ff006 	br	cd60 <__alt_mem_Flash_flash_data+0xf400cd60>

0000cda0 <__floatsidf>:
    cda0:	defffd04 	addi	sp,sp,-12
    cda4:	dc400115 	stw	r17,4(sp)
    cda8:	dfc00215 	stw	ra,8(sp)
    cdac:	dc000015 	stw	r16,0(sp)
    cdb0:	2023883a 	mov	r17,r4
    cdb4:	20001426 	beq	r4,zero,ce08 <__floatsidf+0x68>
    cdb8:	2020d7fa 	srli	r16,r4,31
    cdbc:	80000126 	beq	r16,zero,cdc4 <__floatsidf+0x24>
    cdc0:	0123c83a 	sub	r17,zero,r4
    cdc4:	8809883a 	mov	r4,r17
    cdc8:	000cf140 	call	cf14 <__clzsi2>
    cdcc:	01410784 	movi	r5,1054
    cdd0:	00c00284 	movi	r3,10
    cdd4:	288bc83a 	sub	r5,r5,r2
    cdd8:	18801c16 	blt	r3,r2,ce4c <__floatsidf+0xac>
    cddc:	00c002c4 	movi	r3,11
    cde0:	1887c83a 	sub	r3,r3,r2
    cde4:	88c8d83a 	srl	r4,r17,r3
    cde8:	00c00434 	movhi	r3,16
    cdec:	18ffffc4 	addi	r3,r3,-1
    cdf0:	10800544 	addi	r2,r2,21
    cdf4:	20c8703a 	and	r4,r4,r3
    cdf8:	8884983a 	sll	r2,r17,r2
    cdfc:	28c1ffcc 	andi	r3,r5,2047
    ce00:	800d883a 	mov	r6,r16
    ce04:	00000406 	br	ce18 <__floatsidf+0x78>
    ce08:	000d883a 	mov	r6,zero
    ce0c:	0007883a 	mov	r3,zero
    ce10:	0009883a 	mov	r4,zero
    ce14:	0005883a 	mov	r2,zero
    ce18:	180a953a 	slli	r5,r3,20
    ce1c:	31803fcc 	andi	r6,r6,255
    ce20:	00c00434 	movhi	r3,16
    ce24:	300c97fa 	slli	r6,r6,31
    ce28:	18ffffc4 	addi	r3,r3,-1
    ce2c:	20c6703a 	and	r3,r4,r3
    ce30:	1946b03a 	or	r3,r3,r5
    ce34:	1986b03a 	or	r3,r3,r6
    ce38:	dfc00217 	ldw	ra,8(sp)
    ce3c:	dc400117 	ldw	r17,4(sp)
    ce40:	dc000017 	ldw	r16,0(sp)
    ce44:	dec00304 	addi	sp,sp,12
    ce48:	f800283a 	ret
    ce4c:	10fffd44 	addi	r3,r2,-11
    ce50:	88c8983a 	sll	r4,r17,r3
    ce54:	00800434 	movhi	r2,16
    ce58:	10bfffc4 	addi	r2,r2,-1
    ce5c:	2088703a 	and	r4,r4,r2
    ce60:	28c1ffcc 	andi	r3,r5,2047
    ce64:	800d883a 	mov	r6,r16
    ce68:	0005883a 	mov	r2,zero
    ce6c:	003fea06 	br	ce18 <__alt_mem_Flash_flash_data+0xf400ce18>

0000ce70 <__floatunsidf>:
    ce70:	defffe04 	addi	sp,sp,-8
    ce74:	dc000015 	stw	r16,0(sp)
    ce78:	dfc00115 	stw	ra,4(sp)
    ce7c:	2021883a 	mov	r16,r4
    ce80:	20001026 	beq	r4,zero,cec4 <__floatunsidf+0x54>
    ce84:	000cf140 	call	cf14 <__clzsi2>
    ce88:	01410784 	movi	r5,1054
    ce8c:	100d883a 	mov	r6,r2
    ce90:	288bc83a 	sub	r5,r5,r2
    ce94:	00800284 	movi	r2,10
    ce98:	11801616 	blt	r2,r6,cef4 <__floatunsidf+0x84>
    ce9c:	008002c4 	movi	r2,11
    cea0:	1185c83a 	sub	r2,r2,r6
    cea4:	8084d83a 	srl	r2,r16,r2
    cea8:	00c00434 	movhi	r3,16
    ceac:	31c00544 	addi	r7,r6,21
    ceb0:	18ffffc4 	addi	r3,r3,-1
    ceb4:	81e0983a 	sll	r16,r16,r7
    ceb8:	10cc703a 	and	r6,r2,r3
    cebc:	2941ffcc 	andi	r5,r5,2047
    cec0:	00000206 	br	cecc <__floatunsidf+0x5c>
    cec4:	000b883a 	mov	r5,zero
    cec8:	000d883a 	mov	r6,zero
    cecc:	280a953a 	slli	r5,r5,20
    ced0:	00c00434 	movhi	r3,16
    ced4:	18ffffc4 	addi	r3,r3,-1
    ced8:	30c6703a 	and	r3,r6,r3
    cedc:	8005883a 	mov	r2,r16
    cee0:	1946b03a 	or	r3,r3,r5
    cee4:	dfc00117 	ldw	ra,4(sp)
    cee8:	dc000017 	ldw	r16,0(sp)
    ceec:	dec00204 	addi	sp,sp,8
    cef0:	f800283a 	ret
    cef4:	31bffd44 	addi	r6,r6,-11
    cef8:	818c983a 	sll	r6,r16,r6
    cefc:	00800434 	movhi	r2,16
    cf00:	10bfffc4 	addi	r2,r2,-1
    cf04:	2941ffcc 	andi	r5,r5,2047
    cf08:	0021883a 	mov	r16,zero
    cf0c:	308c703a 	and	r6,r6,r2
    cf10:	003fee06 	br	cecc <__alt_mem_Flash_flash_data+0xf400cecc>

0000cf14 <__clzsi2>:
    cf14:	00bfffd4 	movui	r2,65535
    cf18:	11000b36 	bltu	r2,r4,cf48 <__clzsi2+0x34>
    cf1c:	00803fc4 	movi	r2,255
    cf20:	1100122e 	bgeu	r2,r4,cf6c <__clzsi2+0x58>
    cf24:	00c00204 	movi	r3,8
    cf28:	01400604 	movi	r5,24
    cf2c:	20c8d83a 	srl	r4,r4,r3
    cf30:	008000b4 	movhi	r2,2
    cf34:	10a60104 	addi	r2,r2,-26620
    cf38:	1109883a 	add	r4,r2,r4
    cf3c:	20800003 	ldbu	r2,0(r4)
    cf40:	2885c83a 	sub	r2,r5,r2
    cf44:	f800283a 	ret
    cf48:	00804034 	movhi	r2,256
    cf4c:	10bfffc4 	addi	r2,r2,-1
    cf50:	11000336 	bltu	r2,r4,cf60 <__clzsi2+0x4c>
    cf54:	00c00404 	movi	r3,16
    cf58:	180b883a 	mov	r5,r3
    cf5c:	003ff306 	br	cf2c <__alt_mem_Flash_flash_data+0xf400cf2c>
    cf60:	00c00604 	movi	r3,24
    cf64:	01400204 	movi	r5,8
    cf68:	003ff006 	br	cf2c <__alt_mem_Flash_flash_data+0xf400cf2c>
    cf6c:	0007883a 	mov	r3,zero
    cf70:	01400804 	movi	r5,32
    cf74:	003fed06 	br	cf2c <__alt_mem_Flash_flash_data+0xf400cf2c>

0000cf78 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    cf78:	defffe04 	addi	sp,sp,-8
    cf7c:	dfc00115 	stw	ra,4(sp)
    cf80:	df000015 	stw	fp,0(sp)
    cf84:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    cf88:	008000b4 	movhi	r2,2
    cf8c:	10ae9804 	addi	r2,r2,-17824
    cf90:	10800017 	ldw	r2,0(r2)
    cf94:	10000526 	beq	r2,zero,cfac <alt_get_errno+0x34>
    cf98:	008000b4 	movhi	r2,2
    cf9c:	10ae9804 	addi	r2,r2,-17824
    cfa0:	10800017 	ldw	r2,0(r2)
    cfa4:	103ee83a 	callr	r2
    cfa8:	00000206 	br	cfb4 <alt_get_errno+0x3c>
    cfac:	008000b4 	movhi	r2,2
    cfb0:	10b68304 	addi	r2,r2,-9716
}
    cfb4:	e037883a 	mov	sp,fp
    cfb8:	dfc00117 	ldw	ra,4(sp)
    cfbc:	df000017 	ldw	fp,0(sp)
    cfc0:	dec00204 	addi	sp,sp,8
    cfc4:	f800283a 	ret

0000cfc8 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
    cfc8:	defffb04 	addi	sp,sp,-20
    cfcc:	dfc00415 	stw	ra,16(sp)
    cfd0:	df000315 	stw	fp,12(sp)
    cfd4:	df000304 	addi	fp,sp,12
    cfd8:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
    cfdc:	e0bfff17 	ldw	r2,-4(fp)
    cfe0:	10000616 	blt	r2,zero,cffc <close+0x34>
    cfe4:	e0bfff17 	ldw	r2,-4(fp)
    cfe8:	10c00324 	muli	r3,r2,12
    cfec:	008000b4 	movhi	r2,2
    cff0:	10a92f04 	addi	r2,r2,-23364
    cff4:	1885883a 	add	r2,r3,r2
    cff8:	00000106 	br	d000 <close+0x38>
    cffc:	0005883a 	mov	r2,zero
    d000:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
    d004:	e0bffd17 	ldw	r2,-12(fp)
    d008:	10001926 	beq	r2,zero,d070 <close+0xa8>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
    d00c:	e0bffd17 	ldw	r2,-12(fp)
    d010:	10800017 	ldw	r2,0(r2)
    d014:	10800417 	ldw	r2,16(r2)
    d018:	10000626 	beq	r2,zero,d034 <close+0x6c>
    d01c:	e0bffd17 	ldw	r2,-12(fp)
    d020:	10800017 	ldw	r2,0(r2)
    d024:	10800417 	ldw	r2,16(r2)
    d028:	e13ffd17 	ldw	r4,-12(fp)
    d02c:	103ee83a 	callr	r2
    d030:	00000106 	br	d038 <close+0x70>
    d034:	0005883a 	mov	r2,zero
    d038:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
    d03c:	e13fff17 	ldw	r4,-4(fp)
    d040:	000d6e00 	call	d6e0 <alt_release_fd>
    if (rval < 0)
    d044:	e0bffe17 	ldw	r2,-8(fp)
    d048:	1000070e 	bge	r2,zero,d068 <close+0xa0>
    {
      ALT_ERRNO = -rval;
    d04c:	000cf780 	call	cf78 <alt_get_errno>
    d050:	1007883a 	mov	r3,r2
    d054:	e0bffe17 	ldw	r2,-8(fp)
    d058:	0085c83a 	sub	r2,zero,r2
    d05c:	18800015 	stw	r2,0(r3)
      return -1;
    d060:	00bfffc4 	movi	r2,-1
    d064:	00000706 	br	d084 <close+0xbc>
    }
    return 0;
    d068:	0005883a 	mov	r2,zero
    d06c:	00000506 	br	d084 <close+0xbc>
  }
  else
  {
    ALT_ERRNO = EBADFD;
    d070:	000cf780 	call	cf78 <alt_get_errno>
    d074:	1007883a 	mov	r3,r2
    d078:	00801444 	movi	r2,81
    d07c:	18800015 	stw	r2,0(r3)
    return -1;
    d080:	00bfffc4 	movi	r2,-1
  }
}
    d084:	e037883a 	mov	sp,fp
    d088:	dfc00117 	ldw	ra,4(sp)
    d08c:	df000017 	ldw	fp,0(sp)
    d090:	dec00204 	addi	sp,sp,8
    d094:	f800283a 	ret

0000d098 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
    d098:	defffc04 	addi	sp,sp,-16
    d09c:	df000315 	stw	fp,12(sp)
    d0a0:	df000304 	addi	fp,sp,12
    d0a4:	e13ffd15 	stw	r4,-12(fp)
    d0a8:	e17ffe15 	stw	r5,-8(fp)
    d0ac:	e1bfff15 	stw	r6,-4(fp)
  return len;
    d0b0:	e0bfff17 	ldw	r2,-4(fp)
}
    d0b4:	e037883a 	mov	sp,fp
    d0b8:	df000017 	ldw	fp,0(sp)
    d0bc:	dec00104 	addi	sp,sp,4
    d0c0:	f800283a 	ret

0000d0c4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    d0c4:	defffe04 	addi	sp,sp,-8
    d0c8:	dfc00115 	stw	ra,4(sp)
    d0cc:	df000015 	stw	fp,0(sp)
    d0d0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    d0d4:	008000b4 	movhi	r2,2
    d0d8:	10ae9804 	addi	r2,r2,-17824
    d0dc:	10800017 	ldw	r2,0(r2)
    d0e0:	10000526 	beq	r2,zero,d0f8 <alt_get_errno+0x34>
    d0e4:	008000b4 	movhi	r2,2
    d0e8:	10ae9804 	addi	r2,r2,-17824
    d0ec:	10800017 	ldw	r2,0(r2)
    d0f0:	103ee83a 	callr	r2
    d0f4:	00000206 	br	d100 <alt_get_errno+0x3c>
    d0f8:	008000b4 	movhi	r2,2
    d0fc:	10b68304 	addi	r2,r2,-9716
}
    d100:	e037883a 	mov	sp,fp
    d104:	dfc00117 	ldw	ra,4(sp)
    d108:	df000017 	ldw	fp,0(sp)
    d10c:	dec00204 	addi	sp,sp,8
    d110:	f800283a 	ret

0000d114 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
    d114:	defffb04 	addi	sp,sp,-20
    d118:	dfc00415 	stw	ra,16(sp)
    d11c:	df000315 	stw	fp,12(sp)
    d120:	df000304 	addi	fp,sp,12
    d124:	e13ffe15 	stw	r4,-8(fp)
    d128:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    d12c:	e0bffe17 	ldw	r2,-8(fp)
    d130:	10000616 	blt	r2,zero,d14c <fstat+0x38>
    d134:	e0bffe17 	ldw	r2,-8(fp)
    d138:	10c00324 	muli	r3,r2,12
    d13c:	008000b4 	movhi	r2,2
    d140:	10a92f04 	addi	r2,r2,-23364
    d144:	1885883a 	add	r2,r3,r2
    d148:	00000106 	br	d150 <fstat+0x3c>
    d14c:	0005883a 	mov	r2,zero
    d150:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
    d154:	e0bffd17 	ldw	r2,-12(fp)
    d158:	10001026 	beq	r2,zero,d19c <fstat+0x88>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
    d15c:	e0bffd17 	ldw	r2,-12(fp)
    d160:	10800017 	ldw	r2,0(r2)
    d164:	10800817 	ldw	r2,32(r2)
    d168:	10000726 	beq	r2,zero,d188 <fstat+0x74>
    {
      return fd->dev->fstat(fd, st);
    d16c:	e0bffd17 	ldw	r2,-12(fp)
    d170:	10800017 	ldw	r2,0(r2)
    d174:	10800817 	ldw	r2,32(r2)
    d178:	e13ffd17 	ldw	r4,-12(fp)
    d17c:	e17fff17 	ldw	r5,-4(fp)
    d180:	103ee83a 	callr	r2
    d184:	00000a06 	br	d1b0 <fstat+0x9c>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
    d188:	e0bfff17 	ldw	r2,-4(fp)
    d18c:	00c80004 	movi	r3,8192
    d190:	10c00115 	stw	r3,4(r2)
      return 0;
    d194:	0005883a 	mov	r2,zero
    d198:	00000506 	br	d1b0 <fstat+0x9c>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
    d19c:	000d0c40 	call	d0c4 <alt_get_errno>
    d1a0:	1007883a 	mov	r3,r2
    d1a4:	00801444 	movi	r2,81
    d1a8:	18800015 	stw	r2,0(r3)
    return -1;
    d1ac:	00bfffc4 	movi	r2,-1
  }
}
    d1b0:	e037883a 	mov	sp,fp
    d1b4:	dfc00117 	ldw	ra,4(sp)
    d1b8:	df000017 	ldw	fp,0(sp)
    d1bc:	dec00204 	addi	sp,sp,8
    d1c0:	f800283a 	ret

0000d1c4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    d1c4:	defffe04 	addi	sp,sp,-8
    d1c8:	dfc00115 	stw	ra,4(sp)
    d1cc:	df000015 	stw	fp,0(sp)
    d1d0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    d1d4:	008000b4 	movhi	r2,2
    d1d8:	10ae9804 	addi	r2,r2,-17824
    d1dc:	10800017 	ldw	r2,0(r2)
    d1e0:	10000526 	beq	r2,zero,d1f8 <alt_get_errno+0x34>
    d1e4:	008000b4 	movhi	r2,2
    d1e8:	10ae9804 	addi	r2,r2,-17824
    d1ec:	10800017 	ldw	r2,0(r2)
    d1f0:	103ee83a 	callr	r2
    d1f4:	00000206 	br	d200 <alt_get_errno+0x3c>
    d1f8:	008000b4 	movhi	r2,2
    d1fc:	10b68304 	addi	r2,r2,-9716
}
    d200:	e037883a 	mov	sp,fp
    d204:	dfc00117 	ldw	ra,4(sp)
    d208:	df000017 	ldw	fp,0(sp)
    d20c:	dec00204 	addi	sp,sp,8
    d210:	f800283a 	ret

0000d214 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
    d214:	deffed04 	addi	sp,sp,-76
    d218:	dfc01215 	stw	ra,72(sp)
    d21c:	df001115 	stw	fp,68(sp)
    d220:	df001104 	addi	fp,sp,68
    d224:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    d228:	e0bfff17 	ldw	r2,-4(fp)
    d22c:	10000616 	blt	r2,zero,d248 <isatty+0x34>
    d230:	e0bfff17 	ldw	r2,-4(fp)
    d234:	10c00324 	muli	r3,r2,12
    d238:	008000b4 	movhi	r2,2
    d23c:	10a92f04 	addi	r2,r2,-23364
    d240:	1885883a 	add	r2,r3,r2
    d244:	00000106 	br	d24c <isatty+0x38>
    d248:	0005883a 	mov	r2,zero
    d24c:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
    d250:	e0bfef17 	ldw	r2,-68(fp)
    d254:	10000e26 	beq	r2,zero,d290 <isatty+0x7c>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
    d258:	e0bfef17 	ldw	r2,-68(fp)
    d25c:	10800017 	ldw	r2,0(r2)
    d260:	10800817 	ldw	r2,32(r2)
    d264:	1000021e 	bne	r2,zero,d270 <isatty+0x5c>
    {
      return 1;
    d268:	00800044 	movi	r2,1
    d26c:	00000d06 	br	d2a4 <isatty+0x90>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
    d270:	e0bff004 	addi	r2,fp,-64
    d274:	e13fff17 	ldw	r4,-4(fp)
    d278:	100b883a 	mov	r5,r2
    d27c:	000d1140 	call	d114 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
    d280:	e0bff117 	ldw	r2,-60(fp)
    d284:	10880020 	cmpeqi	r2,r2,8192
    d288:	10803fcc 	andi	r2,r2,255
    d28c:	00000506 	br	d2a4 <isatty+0x90>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
    d290:	000d1c40 	call	d1c4 <alt_get_errno>
    d294:	1007883a 	mov	r3,r2
    d298:	00801444 	movi	r2,81
    d29c:	18800015 	stw	r2,0(r3)
    return 0;
    d2a0:	0005883a 	mov	r2,zero
  }
}
    d2a4:	e037883a 	mov	sp,fp
    d2a8:	dfc00117 	ldw	ra,4(sp)
    d2ac:	df000017 	ldw	fp,0(sp)
    d2b0:	dec00204 	addi	sp,sp,8
    d2b4:	f800283a 	ret

0000d2b8 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
    d2b8:	defffc04 	addi	sp,sp,-16
    d2bc:	df000315 	stw	fp,12(sp)
    d2c0:	df000304 	addi	fp,sp,12
    d2c4:	e13ffd15 	stw	r4,-12(fp)
    d2c8:	e17ffe15 	stw	r5,-8(fp)
    d2cc:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
    d2d0:	e0fffe17 	ldw	r3,-8(fp)
    d2d4:	e0bffd17 	ldw	r2,-12(fp)
    d2d8:	18800c26 	beq	r3,r2,d30c <alt_load_section+0x54>
  {
    while( to != end )
    d2dc:	00000806 	br	d300 <alt_load_section+0x48>
    {
      *to++ = *from++;
    d2e0:	e0bffe17 	ldw	r2,-8(fp)
    d2e4:	10c00104 	addi	r3,r2,4
    d2e8:	e0fffe15 	stw	r3,-8(fp)
    d2ec:	e0fffd17 	ldw	r3,-12(fp)
    d2f0:	19000104 	addi	r4,r3,4
    d2f4:	e13ffd15 	stw	r4,-12(fp)
    d2f8:	18c00017 	ldw	r3,0(r3)
    d2fc:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
    d300:	e0fffe17 	ldw	r3,-8(fp)
    d304:	e0bfff17 	ldw	r2,-4(fp)
    d308:	18bff51e 	bne	r3,r2,d2e0 <__alt_mem_Flash_flash_data+0xf400d2e0>
    {
      *to++ = *from++;
    }
  }
}
    d30c:	e037883a 	mov	sp,fp
    d310:	df000017 	ldw	fp,0(sp)
    d314:	dec00104 	addi	sp,sp,4
    d318:	f800283a 	ret

0000d31c <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
    d31c:	defffe04 	addi	sp,sp,-8
    d320:	dfc00115 	stw	ra,4(sp)
    d324:	df000015 	stw	fp,0(sp)
    d328:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
    d32c:	010000b4 	movhi	r4,2
    d330:	212ebc04 	addi	r4,r4,-17680
    d334:	014000b4 	movhi	r5,2
    d338:	2966fc04 	addi	r5,r5,-25616
    d33c:	018000b4 	movhi	r6,2
    d340:	31aebc04 	addi	r6,r6,-17680
    d344:	000d2b80 	call	d2b8 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
    d348:	01000034 	movhi	r4,0
    d34c:	21000804 	addi	r4,r4,32
    d350:	01400034 	movhi	r5,0
    d354:	29400804 	addi	r5,r5,32
    d358:	01800034 	movhi	r6,0
    d35c:	31809104 	addi	r6,r6,580
    d360:	000d2b80 	call	d2b8 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
    d364:	010000b4 	movhi	r4,2
    d368:	21257d04 	addi	r4,r4,-27148
    d36c:	014000b4 	movhi	r5,2
    d370:	29657d04 	addi	r5,r5,-27148
    d374:	018000b4 	movhi	r6,2
    d378:	31a6fc04 	addi	r6,r6,-25616
    d37c:	000d2b80 	call	d2b8 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
    d380:	001823c0 	call	1823c <alt_dcache_flush_all>
  alt_icache_flush_all();
    d384:	00184940 	call	18494 <alt_icache_flush_all>
}
    d388:	e037883a 	mov	sp,fp
    d38c:	dfc00117 	ldw	ra,4(sp)
    d390:	df000017 	ldw	fp,0(sp)
    d394:	dec00204 	addi	sp,sp,8
    d398:	f800283a 	ret

0000d39c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    d39c:	defffe04 	addi	sp,sp,-8
    d3a0:	dfc00115 	stw	ra,4(sp)
    d3a4:	df000015 	stw	fp,0(sp)
    d3a8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    d3ac:	008000b4 	movhi	r2,2
    d3b0:	10ae9804 	addi	r2,r2,-17824
    d3b4:	10800017 	ldw	r2,0(r2)
    d3b8:	10000526 	beq	r2,zero,d3d0 <alt_get_errno+0x34>
    d3bc:	008000b4 	movhi	r2,2
    d3c0:	10ae9804 	addi	r2,r2,-17824
    d3c4:	10800017 	ldw	r2,0(r2)
    d3c8:	103ee83a 	callr	r2
    d3cc:	00000206 	br	d3d8 <alt_get_errno+0x3c>
    d3d0:	008000b4 	movhi	r2,2
    d3d4:	10b68304 	addi	r2,r2,-9716
}
    d3d8:	e037883a 	mov	sp,fp
    d3dc:	dfc00117 	ldw	ra,4(sp)
    d3e0:	df000017 	ldw	fp,0(sp)
    d3e4:	dec00204 	addi	sp,sp,8
    d3e8:	f800283a 	ret

0000d3ec <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
    d3ec:	defff904 	addi	sp,sp,-28
    d3f0:	dfc00615 	stw	ra,24(sp)
    d3f4:	df000515 	stw	fp,20(sp)
    d3f8:	df000504 	addi	fp,sp,20
    d3fc:	e13ffd15 	stw	r4,-12(fp)
    d400:	e17ffe15 	stw	r5,-8(fp)
    d404:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
    d408:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    d40c:	e0bffd17 	ldw	r2,-12(fp)
    d410:	10000616 	blt	r2,zero,d42c <lseek+0x40>
    d414:	e0bffd17 	ldw	r2,-12(fp)
    d418:	10c00324 	muli	r3,r2,12
    d41c:	008000b4 	movhi	r2,2
    d420:	10a92f04 	addi	r2,r2,-23364
    d424:	1885883a 	add	r2,r3,r2
    d428:	00000106 	br	d430 <lseek+0x44>
    d42c:	0005883a 	mov	r2,zero
    d430:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
    d434:	e0bffc17 	ldw	r2,-16(fp)
    d438:	10001026 	beq	r2,zero,d47c <lseek+0x90>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
    d43c:	e0bffc17 	ldw	r2,-16(fp)
    d440:	10800017 	ldw	r2,0(r2)
    d444:	10800717 	ldw	r2,28(r2)
    d448:	10000926 	beq	r2,zero,d470 <lseek+0x84>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
    d44c:	e0bffc17 	ldw	r2,-16(fp)
    d450:	10800017 	ldw	r2,0(r2)
    d454:	10800717 	ldw	r2,28(r2)
    d458:	e13ffc17 	ldw	r4,-16(fp)
    d45c:	e17ffe17 	ldw	r5,-8(fp)
    d460:	e1bfff17 	ldw	r6,-4(fp)
    d464:	103ee83a 	callr	r2
    d468:	e0bffb15 	stw	r2,-20(fp)
    d46c:	00000506 	br	d484 <lseek+0x98>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
    d470:	00bfde84 	movi	r2,-134
    d474:	e0bffb15 	stw	r2,-20(fp)
    d478:	00000206 	br	d484 <lseek+0x98>
    }
  }
  else  
  {
    rc = -EBADFD;
    d47c:	00bfebc4 	movi	r2,-81
    d480:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
    d484:	e0bffb17 	ldw	r2,-20(fp)
    d488:	1000070e 	bge	r2,zero,d4a8 <lseek+0xbc>
  {
    ALT_ERRNO = -rc;
    d48c:	000d39c0 	call	d39c <alt_get_errno>
    d490:	1007883a 	mov	r3,r2
    d494:	e0bffb17 	ldw	r2,-20(fp)
    d498:	0085c83a 	sub	r2,zero,r2
    d49c:	18800015 	stw	r2,0(r3)
    rc = -1;
    d4a0:	00bfffc4 	movi	r2,-1
    d4a4:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
    d4a8:	e0bffb17 	ldw	r2,-20(fp)
}
    d4ac:	e037883a 	mov	sp,fp
    d4b0:	dfc00117 	ldw	ra,4(sp)
    d4b4:	df000017 	ldw	fp,0(sp)
    d4b8:	dec00204 	addi	sp,sp,8
    d4bc:	f800283a 	ret

0000d4c0 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
    d4c0:	defff904 	addi	sp,sp,-28
    d4c4:	dfc00615 	stw	ra,24(sp)
    d4c8:	df000515 	stw	fp,20(sp)
    d4cc:	df000504 	addi	fp,sp,20
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
    d4d0:	0009883a 	mov	r4,zero
    d4d4:	001590c0 	call	1590c <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
    d4d8:	000e4b00 	call	e4b0 <OSInit>
    d4dc:	01000044 	movi	r4,1
    d4e0:	00130200 	call	13020 <OSSemCreate>
    d4e4:	1007883a 	mov	r3,r2
    d4e8:	008000b4 	movhi	r2,2
    d4ec:	10b68904 	addi	r2,r2,-9692
    d4f0:	10c00015 	stw	r3,0(r2)
    d4f4:	01000044 	movi	r4,1
    d4f8:	00130200 	call	13020 <OSSemCreate>
    d4fc:	1007883a 	mov	r3,r2
    d500:	008000b4 	movhi	r2,2
    d504:	10b68b04 	addi	r2,r2,-9684
    d508:	10c00015 	stw	r3,0(r2)
    d50c:	008000b4 	movhi	r2,2
    d510:	10b68404 	addi	r2,r2,-9712
    d514:	e0bffc15 	stw	r2,-16(fp)
    d518:	00800044 	movi	r2,1
    d51c:	e0bffd0d 	sth	r2,-12(fp)
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sem_create (OS_EVENT** sem, 
              INT16U value)
{
  *sem = OSSemCreate (value);
    d520:	e0bffd0b 	ldhu	r2,-12(fp)
    d524:	1009883a 	mov	r4,r2
    d528:	00130200 	call	13020 <OSSemCreate>
    d52c:	1007883a 	mov	r3,r2
    d530:	e0bffc17 	ldw	r2,-16(fp)
    d534:	10c00015 	stw	r3,0(r2)
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
    d538:	00159400 	call	15940 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
    d53c:	010000b4 	movhi	r4,2
    d540:	21264404 	addi	r4,r4,-26352
    d544:	014000b4 	movhi	r5,2
    d548:	29664404 	addi	r5,r5,-26352
    d54c:	018000b4 	movhi	r6,2
    d550:	31a64404 	addi	r6,r6,-26352
    d554:	00185840 	call	18584 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
    d558:	001834c0 	call	1834c <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
    d55c:	010000b4 	movhi	r4,2
    d560:	2120ea04 	addi	r4,r4,-31832
    d564:	00192480 	call	19248 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
    d568:	d127fa17 	ldw	r4,-24600(gp)
    d56c:	d0e7fb17 	ldw	r3,-24596(gp)
    d570:	d0a7fc17 	ldw	r2,-24592(gp)
    d574:	180b883a 	mov	r5,r3
    d578:	100d883a 	mov	r6,r2
    d57c:	0000a4c0 	call	a4c <main>
    d580:	e0bffb15 	stw	r2,-20(fp)
  close(STDOUT_FILENO);
    d584:	01000044 	movi	r4,1
    d588:	000cfc80 	call	cfc8 <close>
  exit (result);
    d58c:	e13ffb17 	ldw	r4,-20(fp)
    d590:	001925c0 	call	1925c <exit>

0000d594 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    d594:	defffe04 	addi	sp,sp,-8
    d598:	dfc00115 	stw	ra,4(sp)
    d59c:	df000015 	stw	fp,0(sp)
    d5a0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    d5a4:	008000b4 	movhi	r2,2
    d5a8:	10ae9804 	addi	r2,r2,-17824
    d5ac:	10800017 	ldw	r2,0(r2)
    d5b0:	10000526 	beq	r2,zero,d5c8 <alt_get_errno+0x34>
    d5b4:	008000b4 	movhi	r2,2
    d5b8:	10ae9804 	addi	r2,r2,-17824
    d5bc:	10800017 	ldw	r2,0(r2)
    d5c0:	103ee83a 	callr	r2
    d5c4:	00000206 	br	d5d0 <alt_get_errno+0x3c>
    d5c8:	008000b4 	movhi	r2,2
    d5cc:	10b68304 	addi	r2,r2,-9716
}
    d5d0:	e037883a 	mov	sp,fp
    d5d4:	dfc00117 	ldw	ra,4(sp)
    d5d8:	df000017 	ldw	fp,0(sp)
    d5dc:	dec00204 	addi	sp,sp,8
    d5e0:	f800283a 	ret

0000d5e4 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
    d5e4:	defff904 	addi	sp,sp,-28
    d5e8:	dfc00615 	stw	ra,24(sp)
    d5ec:	df000515 	stw	fp,20(sp)
    d5f0:	df000504 	addi	fp,sp,20
    d5f4:	e13ffd15 	stw	r4,-12(fp)
    d5f8:	e17ffe15 	stw	r5,-8(fp)
    d5fc:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    d600:	e0bffd17 	ldw	r2,-12(fp)
    d604:	10000616 	blt	r2,zero,d620 <read+0x3c>
    d608:	e0bffd17 	ldw	r2,-12(fp)
    d60c:	10c00324 	muli	r3,r2,12
    d610:	008000b4 	movhi	r2,2
    d614:	10a92f04 	addi	r2,r2,-23364
    d618:	1885883a 	add	r2,r3,r2
    d61c:	00000106 	br	d624 <read+0x40>
    d620:	0005883a 	mov	r2,zero
    d624:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
    d628:	e0bffb17 	ldw	r2,-20(fp)
    d62c:	10002226 	beq	r2,zero,d6b8 <read+0xd4>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
    d630:	e0bffb17 	ldw	r2,-20(fp)
    d634:	10800217 	ldw	r2,8(r2)
    d638:	108000cc 	andi	r2,r2,3
    d63c:	10800060 	cmpeqi	r2,r2,1
    d640:	1000181e 	bne	r2,zero,d6a4 <read+0xc0>
        (fd->dev->read))
    d644:	e0bffb17 	ldw	r2,-20(fp)
    d648:	10800017 	ldw	r2,0(r2)
    d64c:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
    d650:	10001426 	beq	r2,zero,d6a4 <read+0xc0>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
    d654:	e0bffb17 	ldw	r2,-20(fp)
    d658:	10800017 	ldw	r2,0(r2)
    d65c:	10800517 	ldw	r2,20(r2)
    d660:	e0ffff17 	ldw	r3,-4(fp)
    d664:	e13ffb17 	ldw	r4,-20(fp)
    d668:	e17ffe17 	ldw	r5,-8(fp)
    d66c:	180d883a 	mov	r6,r3
    d670:	103ee83a 	callr	r2
    d674:	e0bffc15 	stw	r2,-16(fp)
    d678:	e0bffc17 	ldw	r2,-16(fp)
    d67c:	1000070e 	bge	r2,zero,d69c <read+0xb8>
        {
          ALT_ERRNO = -rval;
    d680:	000d5940 	call	d594 <alt_get_errno>
    d684:	1007883a 	mov	r3,r2
    d688:	e0bffc17 	ldw	r2,-16(fp)
    d68c:	0085c83a 	sub	r2,zero,r2
    d690:	18800015 	stw	r2,0(r3)
          return -1;
    d694:	00bfffc4 	movi	r2,-1
    d698:	00000c06 	br	d6cc <read+0xe8>
        }
        return rval;
    d69c:	e0bffc17 	ldw	r2,-16(fp)
    d6a0:	00000a06 	br	d6cc <read+0xe8>
      }
      else
      {
        ALT_ERRNO = EACCES;
    d6a4:	000d5940 	call	d594 <alt_get_errno>
    d6a8:	1007883a 	mov	r3,r2
    d6ac:	00800344 	movi	r2,13
    d6b0:	18800015 	stw	r2,0(r3)
    d6b4:	00000406 	br	d6c8 <read+0xe4>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
    d6b8:	000d5940 	call	d594 <alt_get_errno>
    d6bc:	1007883a 	mov	r3,r2
    d6c0:	00801444 	movi	r2,81
    d6c4:	18800015 	stw	r2,0(r3)
  }
  return -1;
    d6c8:	00bfffc4 	movi	r2,-1
}
    d6cc:	e037883a 	mov	sp,fp
    d6d0:	dfc00117 	ldw	ra,4(sp)
    d6d4:	df000017 	ldw	fp,0(sp)
    d6d8:	dec00204 	addi	sp,sp,8
    d6dc:	f800283a 	ret

0000d6e0 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
    d6e0:	defffe04 	addi	sp,sp,-8
    d6e4:	df000115 	stw	fp,4(sp)
    d6e8:	df000104 	addi	fp,sp,4
    d6ec:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
    d6f0:	e0bfff17 	ldw	r2,-4(fp)
    d6f4:	108000d0 	cmplti	r2,r2,3
    d6f8:	10000d1e 	bne	r2,zero,d730 <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
    d6fc:	008000b4 	movhi	r2,2
    d700:	10a92f04 	addi	r2,r2,-23364
    d704:	e0ffff17 	ldw	r3,-4(fp)
    d708:	18c00324 	muli	r3,r3,12
    d70c:	18c00204 	addi	r3,r3,8
    d710:	10c5883a 	add	r2,r2,r3
    d714:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
    d718:	008000b4 	movhi	r2,2
    d71c:	10a92f04 	addi	r2,r2,-23364
    d720:	e0ffff17 	ldw	r3,-4(fp)
    d724:	18c00324 	muli	r3,r3,12
    d728:	10c5883a 	add	r2,r2,r3
    d72c:	10000015 	stw	zero,0(r2)
  }
}
    d730:	e037883a 	mov	sp,fp
    d734:	df000017 	ldw	fp,0(sp)
    d738:	dec00104 	addi	sp,sp,4
    d73c:	f800283a 	ret

0000d740 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
    d740:	defff904 	addi	sp,sp,-28
    d744:	df000615 	stw	fp,24(sp)
    d748:	df000604 	addi	fp,sp,24
    d74c:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    d750:	0005303a 	rdctl	r2,status
    d754:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    d758:	e0fffc17 	ldw	r3,-16(fp)
    d75c:	00bfff84 	movi	r2,-2
    d760:	1884703a 	and	r2,r3,r2
    d764:	1001703a 	wrctl	status,r2
  
  return context;
    d768:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
    d76c:	e0bffa15 	stw	r2,-24(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
    d770:	d0a00e17 	ldw	r2,-32712(gp)
    d774:	10c000c4 	addi	r3,r2,3
    d778:	00bfff04 	movi	r2,-4
    d77c:	1884703a 	and	r2,r3,r2
    d780:	d0a00e15 	stw	r2,-32712(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
    d784:	d0e00e17 	ldw	r3,-32712(gp)
    d788:	e0bfff17 	ldw	r2,-4(fp)
    d78c:	1887883a 	add	r3,r3,r2
    d790:	00810034 	movhi	r2,1024
    d794:	10800004 	addi	r2,r2,0
    d798:	10c0062e 	bgeu	r2,r3,d7b4 <sbrk+0x74>
    d79c:	e0bffa17 	ldw	r2,-24(fp)
    d7a0:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    d7a4:	e0bffd17 	ldw	r2,-12(fp)
    d7a8:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
    d7ac:	00bfffc4 	movi	r2,-1
    d7b0:	00000b06 	br	d7e0 <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
    d7b4:	d0a00e17 	ldw	r2,-32712(gp)
    d7b8:	e0bffb15 	stw	r2,-20(fp)
  heap_end += incr; 
    d7bc:	d0e00e17 	ldw	r3,-32712(gp)
    d7c0:	e0bfff17 	ldw	r2,-4(fp)
    d7c4:	1885883a 	add	r2,r3,r2
    d7c8:	d0a00e15 	stw	r2,-32712(gp)
    d7cc:	e0bffa17 	ldw	r2,-24(fp)
    d7d0:	e0bffe15 	stw	r2,-8(fp)
    d7d4:	e0bffe17 	ldw	r2,-8(fp)
    d7d8:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
    d7dc:	e0bffb17 	ldw	r2,-20(fp)
} 
    d7e0:	e037883a 	mov	sp,fp
    d7e4:	df000017 	ldw	fp,0(sp)
    d7e8:	dec00104 	addi	sp,sp,4
    d7ec:	f800283a 	ret

0000d7f0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    d7f0:	defffe04 	addi	sp,sp,-8
    d7f4:	dfc00115 	stw	ra,4(sp)
    d7f8:	df000015 	stw	fp,0(sp)
    d7fc:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    d800:	008000b4 	movhi	r2,2
    d804:	10ae9804 	addi	r2,r2,-17824
    d808:	10800017 	ldw	r2,0(r2)
    d80c:	10000526 	beq	r2,zero,d824 <alt_get_errno+0x34>
    d810:	008000b4 	movhi	r2,2
    d814:	10ae9804 	addi	r2,r2,-17824
    d818:	10800017 	ldw	r2,0(r2)
    d81c:	103ee83a 	callr	r2
    d820:	00000206 	br	d82c <alt_get_errno+0x3c>
    d824:	008000b4 	movhi	r2,2
    d828:	10b68304 	addi	r2,r2,-9716
}
    d82c:	e037883a 	mov	sp,fp
    d830:	dfc00117 	ldw	ra,4(sp)
    d834:	df000017 	ldw	fp,0(sp)
    d838:	dec00204 	addi	sp,sp,8
    d83c:	f800283a 	ret

0000d840 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
    d840:	defff904 	addi	sp,sp,-28
    d844:	dfc00615 	stw	ra,24(sp)
    d848:	df000515 	stw	fp,20(sp)
    d84c:	df000504 	addi	fp,sp,20
    d850:	e13ffd15 	stw	r4,-12(fp)
    d854:	e17ffe15 	stw	r5,-8(fp)
    d858:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    d85c:	e0bffd17 	ldw	r2,-12(fp)
    d860:	10000616 	blt	r2,zero,d87c <write+0x3c>
    d864:	e0bffd17 	ldw	r2,-12(fp)
    d868:	10c00324 	muli	r3,r2,12
    d86c:	008000b4 	movhi	r2,2
    d870:	10a92f04 	addi	r2,r2,-23364
    d874:	1885883a 	add	r2,r3,r2
    d878:	00000106 	br	d880 <write+0x40>
    d87c:	0005883a 	mov	r2,zero
    d880:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
    d884:	e0bffb17 	ldw	r2,-20(fp)
    d888:	10002126 	beq	r2,zero,d910 <write+0xd0>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
    d88c:	e0bffb17 	ldw	r2,-20(fp)
    d890:	10800217 	ldw	r2,8(r2)
    d894:	108000cc 	andi	r2,r2,3
    d898:	10001826 	beq	r2,zero,d8fc <write+0xbc>
    d89c:	e0bffb17 	ldw	r2,-20(fp)
    d8a0:	10800017 	ldw	r2,0(r2)
    d8a4:	10800617 	ldw	r2,24(r2)
    d8a8:	10001426 	beq	r2,zero,d8fc <write+0xbc>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
    d8ac:	e0bffb17 	ldw	r2,-20(fp)
    d8b0:	10800017 	ldw	r2,0(r2)
    d8b4:	10800617 	ldw	r2,24(r2)
    d8b8:	e0ffff17 	ldw	r3,-4(fp)
    d8bc:	e13ffb17 	ldw	r4,-20(fp)
    d8c0:	e17ffe17 	ldw	r5,-8(fp)
    d8c4:	180d883a 	mov	r6,r3
    d8c8:	103ee83a 	callr	r2
    d8cc:	e0bffc15 	stw	r2,-16(fp)
    d8d0:	e0bffc17 	ldw	r2,-16(fp)
    d8d4:	1000070e 	bge	r2,zero,d8f4 <write+0xb4>
      {
        ALT_ERRNO = -rval;
    d8d8:	000d7f00 	call	d7f0 <alt_get_errno>
    d8dc:	1007883a 	mov	r3,r2
    d8e0:	e0bffc17 	ldw	r2,-16(fp)
    d8e4:	0085c83a 	sub	r2,zero,r2
    d8e8:	18800015 	stw	r2,0(r3)
        return -1;
    d8ec:	00bfffc4 	movi	r2,-1
    d8f0:	00000c06 	br	d924 <write+0xe4>
      }
      return rval;
    d8f4:	e0bffc17 	ldw	r2,-16(fp)
    d8f8:	00000a06 	br	d924 <write+0xe4>
    }
    else
    {
      ALT_ERRNO = EACCES;
    d8fc:	000d7f00 	call	d7f0 <alt_get_errno>
    d900:	1007883a 	mov	r3,r2
    d904:	00800344 	movi	r2,13
    d908:	18800015 	stw	r2,0(r3)
    d90c:	00000406 	br	d920 <write+0xe0>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
    d910:	000d7f00 	call	d7f0 <alt_get_errno>
    d914:	1007883a 	mov	r3,r2
    d918:	00801444 	movi	r2,81
    d91c:	18800015 	stw	r2,0(r3)
  }
  return -1;
    d920:	00bfffc4 	movi	r2,-1
}
    d924:	e037883a 	mov	sp,fp
    d928:	dfc00117 	ldw	ra,4(sp)
    d92c:	df000017 	ldw	fp,0(sp)
    d930:	dec00204 	addi	sp,sp,8
    d934:	f800283a 	ret

0000d938 <__env_lock>:
/*
 *
 */

void __env_lock ( struct _reent *_r )
{
    d938:	deffdf04 	addi	sp,sp,-132
    d93c:	dfc02015 	stw	ra,128(sp)
    d940:	df001f15 	stw	fp,124(sp)
    d944:	df001f04 	addi	fp,sp,124
    d948:	e13fff15 	stw	r4,-4(fp)
  INT8U err;
  int id;

  /* use our priority as a task id */

  err = OSTaskQuery( OS_PRIO_SELF, &tcb );
    d94c:	e0bfe204 	addi	r2,fp,-120
    d950:	01003fc4 	movi	r4,255
    d954:	100b883a 	mov	r5,r2
    d958:	00151d40 	call	151d4 <OSTaskQuery>
    d95c:	e0bffe85 	stb	r2,-6(fp)
  if (err != OS_NO_ERR)
    d960:	e0bffe83 	ldbu	r2,-6(fp)
    d964:	10803fcc 	andi	r2,r2,255
    d968:	10000126 	beq	r2,zero,d970 <__env_lock+0x38>
    return;
    d96c:	00001d06 	br	d9e4 <__env_lock+0xac>

  id = tcb.OSTCBPrio;
    d970:	e0bfee83 	ldbu	r2,-70(fp)
    d974:	10803fcc 	andi	r2,r2,255
    d978:	e0bfe115 	stw	r2,-124(fp)
   
  /* see if we own the environment already */

  OSSemQuery( alt_envsem, &semdata );
    d97c:	d0e7fe17 	ldw	r3,-24584(gp)
    d980:	e0bffd04 	addi	r2,fp,-12
    d984:	1809883a 	mov	r4,r3
    d988:	100b883a 	mov	r5,r2
    d98c:	001386c0 	call	1386c <OSSemQuery>
  if( semdata.OSEventGrp && id == lockid ) 
    d990:	e0bffe43 	ldbu	r2,-7(fp)
    d994:	10803fcc 	andi	r2,r2,255
    d998:	10000726 	beq	r2,zero,d9b8 <__env_lock+0x80>
    d99c:	d0a00f17 	ldw	r2,-32708(gp)
    d9a0:	e0ffe117 	ldw	r3,-124(fp)
    d9a4:	1880041e 	bne	r3,r2,d9b8 <__env_lock+0x80>
  {
    /* we do; just count the recursion */

    locks++;
    d9a8:	d0a7fd17 	ldw	r2,-24588(gp)
    d9ac:	10800044 	addi	r2,r2,1
    d9b0:	d0a7fd15 	stw	r2,-24588(gp)
    d9b4:	00000a06 	br	d9e0 <__env_lock+0xa8>
  }
  else 
  {
    /* wait on the other task to yield, then claim ownership */

    OSSemPend( alt_envsem, 0, &err );
    d9b8:	d0e7fe17 	ldw	r3,-24584(gp)
    d9bc:	e0bffe84 	addi	r2,fp,-6
    d9c0:	1809883a 	mov	r4,r3
    d9c4:	000b883a 	mov	r5,zero
    d9c8:	100d883a 	mov	r6,r2
    d9cc:	00133880 	call	13388 <OSSemPend>
    locks  = 1;
    d9d0:	00800044 	movi	r2,1
    d9d4:	d0a7fd15 	stw	r2,-24588(gp)
    lockid = id;
    d9d8:	e0bfe117 	ldw	r2,-124(fp)
    d9dc:	d0a00f15 	stw	r2,-32708(gp)
  }

#endif /* OS_THREAD_SAFE_NEWLIB */
  return;
    d9e0:	0001883a 	nop
}
    d9e4:	e037883a 	mov	sp,fp
    d9e8:	dfc00117 	ldw	ra,4(sp)
    d9ec:	df000017 	ldw	fp,0(sp)
    d9f0:	dec00204 	addi	sp,sp,8
    d9f4:	f800283a 	ret

0000d9f8 <__env_unlock>:
/*
 *
 */

void __env_unlock ( struct _reent *_r )
{
    d9f8:	defffd04 	addi	sp,sp,-12
    d9fc:	dfc00215 	stw	ra,8(sp)
    da00:	df000115 	stw	fp,4(sp)
    da04:	df000104 	addi	fp,sp,4
    da08:	e13fff15 	stw	r4,-4(fp)
#if OS_THREAD_SAFE_NEWLIB
  if (locks == 0)
    da0c:	d0a7fd17 	ldw	r2,-24588(gp)
    da10:	1000011e 	bne	r2,zero,da18 <__env_unlock+0x20>
    return;
    da14:	00000a06 	br	da40 <__env_unlock+0x48>
   /* 
    * release the environment once the number of locks == the number 
    * of unlocks 
    */

  if( (--locks) == 0 ) 
    da18:	d0a7fd17 	ldw	r2,-24588(gp)
    da1c:	10bfffc4 	addi	r2,r2,-1
    da20:	d0a7fd15 	stw	r2,-24588(gp)
    da24:	d0a7fd17 	ldw	r2,-24588(gp)
    da28:	1000051e 	bne	r2,zero,da40 <__env_unlock+0x48>
  {
    lockid = -1;
    da2c:	00bfffc4 	movi	r2,-1
    da30:	d0a00f15 	stw	r2,-32708(gp)
    OSSemPost( alt_envsem );
    da34:	d0a7fe17 	ldw	r2,-24584(gp)
    da38:	1009883a 	mov	r4,r2
    da3c:	001375c0 	call	1375c <OSSemPost>
  }
#endif /* OS_THREAD_SAFE_NEWLIB */
}
    da40:	e037883a 	mov	sp,fp
    da44:	dfc00117 	ldw	ra,4(sp)
    da48:	df000017 	ldw	fp,0(sp)
    da4c:	dec00204 	addi	sp,sp,8
    da50:	f800283a 	ret

0000da54 <__malloc_lock>:
/*
 *
 */

void __malloc_lock ( struct _reent *_r )
{
    da54:	deffdb04 	addi	sp,sp,-148
    da58:	dfc02415 	stw	ra,144(sp)
    da5c:	df002315 	stw	fp,140(sp)
    da60:	df002304 	addi	fp,sp,140
    da64:	e13fff15 	stw	r4,-4(fp)
  OS_TCB tcb;
  OS_SEM_DATA semdata;
  INT8U err;
  int id;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
    da68:	e03fdd15 	stw	zero,-140(fp)
#endif  
  
  if (OSRunning != OS_TRUE)
    da6c:	008000b4 	movhi	r2,2
    da70:	10b68c44 	addi	r2,r2,-9679
    da74:	10800003 	ldbu	r2,0(r2)
    da78:	10803fcc 	andi	r2,r2,255
    da7c:	10800060 	cmpeqi	r2,r2,1
    da80:	1000011e 	bne	r2,zero,da88 <__malloc_lock+0x34>
      return;
    da84:	00003606 	br	db60 <__malloc_lock+0x10c>

  /* use our priority as a task id */

  err = OSTaskQuery( OS_PRIO_SELF, &tcb );
    da88:	e0bfe204 	addi	r2,fp,-120
    da8c:	01003fc4 	movi	r4,255
    da90:	100b883a 	mov	r5,r2
    da94:	00151d40 	call	151d4 <OSTaskQuery>
    da98:	e0bffe85 	stb	r2,-6(fp)
  if (err != OS_NO_ERR)
    da9c:	e0bffe83 	ldbu	r2,-6(fp)
    daa0:	10803fcc 	andi	r2,r2,255
    daa4:	10000126 	beq	r2,zero,daac <__malloc_lock+0x58>
    return;
    daa8:	00002d06 	br	db60 <__malloc_lock+0x10c>

  id = tcb.OSTCBPrio;
    daac:	e0bfee83 	ldbu	r2,-70(fp)
    dab0:	10803fcc 	andi	r2,r2,255
    dab4:	e0bfde15 	stw	r2,-136(fp)
   
  /* see if we own the heap already */

  OSSemQuery( alt_heapsem, &semdata );
    dab8:	d0e80017 	ldw	r3,-24576(gp)
    dabc:	e0bffd04 	addi	r2,fp,-12
    dac0:	1809883a 	mov	r4,r3
    dac4:	100b883a 	mov	r5,r2
    dac8:	001386c0 	call	1386c <OSSemQuery>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    dacc:	0005303a 	rdctl	r2,status
    dad0:	e0bfdf15 	stw	r2,-132(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    dad4:	e0ffdf17 	ldw	r3,-132(fp)
    dad8:	00bfff84 	movi	r2,-2
    dadc:	1884703a 	and	r2,r3,r2
    dae0:	1001703a 	wrctl	status,r2
  
  return context;
    dae4:	e0bfdf17 	ldw	r2,-132(fp)
  
  OS_ENTER_CRITICAL();
    dae8:	e0bfdd15 	stw	r2,-140(fp)

  if( !semdata.OSCnt && id == lockid ) 
    daec:	e0bffd0b 	ldhu	r2,-12(fp)
    daf0:	10bfffcc 	andi	r2,r2,65535
    daf4:	10000b1e 	bne	r2,zero,db24 <__malloc_lock+0xd0>
    daf8:	d0a01017 	ldw	r2,-32704(gp)
    dafc:	e0ffde17 	ldw	r3,-136(fp)
    db00:	1880081e 	bne	r3,r2,db24 <__malloc_lock+0xd0>
  {
    /* we do; just count the recursion */
    locks++;
    db04:	d0a7ff17 	ldw	r2,-24580(gp)
    db08:	10800044 	addi	r2,r2,1
    db0c:	d0a7ff15 	stw	r2,-24580(gp)
    db10:	e0bfdd17 	ldw	r2,-140(fp)
    db14:	e0bfe015 	stw	r2,-128(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    db18:	e0bfe017 	ldw	r2,-128(fp)
    db1c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    db20:	00000e06 	br	db5c <__malloc_lock+0x108>
    db24:	e0bfdd17 	ldw	r2,-140(fp)
    db28:	e0bfe115 	stw	r2,-124(fp)
    db2c:	e0bfe117 	ldw	r2,-124(fp)
    db30:	1001703a 	wrctl	status,r2
  else 
  {
    /* wait on the other task to yield the heap, then claim ownership of it */
    OS_EXIT_CRITICAL();

    OSSemPend( alt_heapsem, 0, &err );
    db34:	d0e80017 	ldw	r3,-24576(gp)
    db38:	e0bffe84 	addi	r2,fp,-6
    db3c:	1809883a 	mov	r4,r3
    db40:	000b883a 	mov	r5,zero
    db44:	100d883a 	mov	r6,r2
    db48:	00133880 	call	13388 <OSSemPend>
    locks  = 1;
    db4c:	00800044 	movi	r2,1
    db50:	d0a7ff15 	stw	r2,-24580(gp)
    lockid = id;
    db54:	e0bfde17 	ldw	r2,-136(fp)
    db58:	d0a01015 	stw	r2,-32704(gp)
  }

#endif /* OS_THREAD_SAFE_NEWLIB */
  return;
    db5c:	0001883a 	nop
}
    db60:	e037883a 	mov	sp,fp
    db64:	dfc00117 	ldw	ra,4(sp)
    db68:	df000017 	ldw	fp,0(sp)
    db6c:	dec00204 	addi	sp,sp,8
    db70:	f800283a 	ret

0000db74 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
    db74:	defff804 	addi	sp,sp,-32
    db78:	dfc00715 	stw	ra,28(sp)
    db7c:	df000615 	stw	fp,24(sp)
    db80:	df000604 	addi	fp,sp,24
    db84:	e13fff15 	stw	r4,-4(fp)
#if OS_THREAD_SAFE_NEWLIB

#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
    db88:	e03ffa15 	stw	zero,-24(fp)
#endif 

  if (OSRunning != OS_TRUE)
    db8c:	008000b4 	movhi	r2,2
    db90:	10b68c44 	addi	r2,r2,-9679
    db94:	10800003 	ldbu	r2,0(r2)
    db98:	10803fcc 	andi	r2,r2,255
    db9c:	10800060 	cmpeqi	r2,r2,1
    dba0:	1000011e 	bne	r2,zero,dba8 <__malloc_unlock+0x34>
      return;
    dba4:	00002206 	br	dc30 <__malloc_unlock+0xbc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    dba8:	0005303a 	rdctl	r2,status
    dbac:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    dbb0:	e0fffb17 	ldw	r3,-20(fp)
    dbb4:	00bfff84 	movi	r2,-2
    dbb8:	1884703a 	and	r2,r3,r2
    dbbc:	1001703a 	wrctl	status,r2
  
  return context;
    dbc0:	e0bffb17 	ldw	r2,-20(fp)

  OS_ENTER_CRITICAL();
    dbc4:	e0bffa15 	stw	r2,-24(fp)
  if (locks == 0)
    dbc8:	d0a7ff17 	ldw	r2,-24580(gp)
    dbcc:	1000051e 	bne	r2,zero,dbe4 <__malloc_unlock+0x70>
    dbd0:	e0bffa17 	ldw	r2,-24(fp)
    dbd4:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    dbd8:	e0bffc17 	ldw	r2,-16(fp)
    dbdc:	1001703a 	wrctl	status,r2
  {
      OS_EXIT_CRITICAL();
      return;
    dbe0:	00001306 	br	dc30 <__malloc_unlock+0xbc>
  }

  /* release the heap once the number of locks == the number of unlocks */
  if( (--locks) == 0 ) 
    dbe4:	d0a7ff17 	ldw	r2,-24580(gp)
    dbe8:	10bfffc4 	addi	r2,r2,-1
    dbec:	d0a7ff15 	stw	r2,-24580(gp)
    dbf0:	d0a7ff17 	ldw	r2,-24580(gp)
    dbf4:	10000a1e 	bne	r2,zero,dc20 <__malloc_unlock+0xac>
  {
    lockid = -1;
    dbf8:	00bfffc4 	movi	r2,-1
    dbfc:	d0a01015 	stw	r2,-32704(gp)
    dc00:	e0bffa17 	ldw	r2,-24(fp)
    dc04:	e0bffd15 	stw	r2,-12(fp)
    dc08:	e0bffd17 	ldw	r2,-12(fp)
    dc0c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    OSSemPost( alt_heapsem );
    dc10:	d0a80017 	ldw	r2,-24576(gp)
    dc14:	1009883a 	mov	r4,r2
    dc18:	001375c0 	call	1375c <OSSemPost>
    dc1c:	00000406 	br	dc30 <__malloc_unlock+0xbc>
    dc20:	e0bffa17 	ldw	r2,-24(fp)
    dc24:	e0bffe15 	stw	r2,-8(fp)
    dc28:	e0bffe17 	ldw	r2,-8(fp)
    dc2c:	1001703a 	wrctl	status,r2
  {
      OS_EXIT_CRITICAL();
  }
  
#endif /* OS_THREAD_SAFE_NEWLIB */
}
    dc30:	e037883a 	mov	sp,fp
    dc34:	dfc00117 	ldw	ra,4(sp)
    dc38:	df000017 	ldw	fp,0(sp)
    dc3c:	dec00204 	addi	sp,sp,8
    dc40:	f800283a 	ret

0000dc44 <OSEventNameGet>:
*********************************************************************************************************
*/

#if (OS_EVENT_EN) && (OS_EVENT_NAME_SIZE > 1)
INT8U  OSEventNameGet (OS_EVENT *pevent, INT8U *pname, INT8U *perr)
{
    dc44:	defff704 	addi	sp,sp,-36
    dc48:	dfc00815 	stw	ra,32(sp)
    dc4c:	df000715 	stw	fp,28(sp)
    dc50:	df000704 	addi	fp,sp,28
    dc54:	e13ffd15 	stw	r4,-12(fp)
    dc58:	e17ffe15 	stw	r5,-8(fp)
    dc5c:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
    dc60:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
    dc64:	e0bfff17 	ldw	r2,-4(fp)
    dc68:	1000021e 	bne	r2,zero,dc74 <OSEventNameGet+0x30>
        return (0);
    dc6c:	0005883a 	mov	r2,zero
    dc70:	00003706 	br	dd50 <OSEventNameGet+0x10c>
    }
    if (pevent == (OS_EVENT *)0) {               /* Is 'pevent' a NULL pointer?                        */
    dc74:	e0bffd17 	ldw	r2,-12(fp)
    dc78:	1000051e 	bne	r2,zero,dc90 <OSEventNameGet+0x4c>
        *perr = OS_ERR_PEVENT_NULL;
    dc7c:	e0bfff17 	ldw	r2,-4(fp)
    dc80:	00c00104 	movi	r3,4
    dc84:	10c00005 	stb	r3,0(r2)
        return (0);
    dc88:	0005883a 	mov	r2,zero
    dc8c:	00003006 	br	dd50 <OSEventNameGet+0x10c>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
    dc90:	e0bffe17 	ldw	r2,-8(fp)
    dc94:	1000051e 	bne	r2,zero,dcac <OSEventNameGet+0x68>
        *perr = OS_ERR_PNAME_NULL;
    dc98:	e0bfff17 	ldw	r2,-4(fp)
    dc9c:	00c00304 	movi	r3,12
    dca0:	10c00005 	stb	r3,0(r2)
        return (0);
    dca4:	0005883a 	mov	r2,zero
    dca8:	00002906 	br	dd50 <OSEventNameGet+0x10c>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
    dcac:	d0a80f03 	ldbu	r2,-24516(gp)
    dcb0:	10803fcc 	andi	r2,r2,255
    dcb4:	10000526 	beq	r2,zero,dccc <OSEventNameGet+0x88>
        *perr  = OS_ERR_NAME_GET_ISR;
    dcb8:	e0bfff17 	ldw	r2,-4(fp)
    dcbc:	00c00444 	movi	r3,17
    dcc0:	10c00005 	stb	r3,0(r2)
        return (0);
    dcc4:	0005883a 	mov	r2,zero
    dcc8:	00002106 	br	dd50 <OSEventNameGet+0x10c>
    }
    switch (pevent->OSEventType) {
    dccc:	e0bffd17 	ldw	r2,-12(fp)
    dcd0:	10800003 	ldbu	r2,0(r2)
    dcd4:	10803fcc 	andi	r2,r2,255
    dcd8:	10bfffc4 	addi	r2,r2,-1
    dcdc:	10800128 	cmpgeui	r2,r2,4
    dce0:	10000526 	beq	r2,zero,dcf8 <OSEventNameGet+0xb4>
        case OS_EVENT_TYPE_MBOX:
        case OS_EVENT_TYPE_Q:
             break;

        default:
             *perr = OS_ERR_EVENT_TYPE;
    dce4:	e0bfff17 	ldw	r2,-4(fp)
    dce8:	00c00044 	movi	r3,1
    dcec:	10c00005 	stb	r3,0(r2)
             return (0);
    dcf0:	0005883a 	mov	r2,zero
    dcf4:	00001606 	br	dd50 <OSEventNameGet+0x10c>
    switch (pevent->OSEventType) {
        case OS_EVENT_TYPE_SEM:
        case OS_EVENT_TYPE_MUTEX:
        case OS_EVENT_TYPE_MBOX:
        case OS_EVENT_TYPE_Q:
             break;
    dcf8:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    dcfc:	0005303a 	rdctl	r2,status
    dd00:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    dd04:	e0fffb17 	ldw	r3,-20(fp)
    dd08:	00bfff84 	movi	r2,-2
    dd0c:	1884703a 	and	r2,r3,r2
    dd10:	1001703a 	wrctl	status,r2
  
  return context;
    dd14:	e0bffb17 	ldw	r2,-20(fp)

        default:
             *perr = OS_ERR_EVENT_TYPE;
             return (0);
    }
    OS_ENTER_CRITICAL();
    dd18:	e0bff915 	stw	r2,-28(fp)
    len   = OS_StrCopy(pname, pevent->OSEventName);   /* Copy name from OS_EVENT                       */
    dd1c:	e0bffd17 	ldw	r2,-12(fp)
    dd20:	10800384 	addi	r2,r2,14
    dd24:	e13ffe17 	ldw	r4,-8(fp)
    dd28:	100b883a 	mov	r5,r2
    dd2c:	000f6980 	call	f698 <OS_StrCopy>
    dd30:	e0bffa05 	stb	r2,-24(fp)
    dd34:	e0bff917 	ldw	r2,-28(fp)
    dd38:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    dd3c:	e0bffc17 	ldw	r2,-16(fp)
    dd40:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
    dd44:	e0bfff17 	ldw	r2,-4(fp)
    dd48:	10000005 	stb	zero,0(r2)
    return (len);
    dd4c:	e0bffa03 	ldbu	r2,-24(fp)
}
    dd50:	e037883a 	mov	sp,fp
    dd54:	dfc00117 	ldw	ra,4(sp)
    dd58:	df000017 	ldw	fp,0(sp)
    dd5c:	dec00204 	addi	sp,sp,8
    dd60:	f800283a 	ret

0000dd64 <OSEventNameSet>:
*********************************************************************************************************
*/

#if (OS_EVENT_EN) && (OS_EVENT_NAME_SIZE > 1)
void  OSEventNameSet (OS_EVENT *pevent, INT8U *pname, INT8U *perr)
{
    dd64:	defff604 	addi	sp,sp,-40
    dd68:	dfc00915 	stw	ra,36(sp)
    dd6c:	df000815 	stw	fp,32(sp)
    dd70:	df000804 	addi	fp,sp,32
    dd74:	e13ffd15 	stw	r4,-12(fp)
    dd78:	e17ffe15 	stw	r5,-8(fp)
    dd7c:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
    dd80:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
    dd84:	e0bfff17 	ldw	r2,-4(fp)
    dd88:	1000011e 	bne	r2,zero,dd90 <OSEventNameSet+0x2c>
        return;
    dd8c:	00003f06 	br	de8c <OSEventNameSet+0x128>
    }
    if (pevent == (OS_EVENT *)0) {               /* Is 'pevent' a NULL pointer?                        */
    dd90:	e0bffd17 	ldw	r2,-12(fp)
    dd94:	1000041e 	bne	r2,zero,dda8 <OSEventNameSet+0x44>
        *perr = OS_ERR_PEVENT_NULL;
    dd98:	e0bfff17 	ldw	r2,-4(fp)
    dd9c:	00c00104 	movi	r3,4
    dda0:	10c00005 	stb	r3,0(r2)
        return;
    dda4:	00003906 	br	de8c <OSEventNameSet+0x128>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
    dda8:	e0bffe17 	ldw	r2,-8(fp)
    ddac:	1000041e 	bne	r2,zero,ddc0 <OSEventNameSet+0x5c>
        *perr = OS_ERR_PNAME_NULL;
    ddb0:	e0bfff17 	ldw	r2,-4(fp)
    ddb4:	00c00304 	movi	r3,12
    ddb8:	10c00005 	stb	r3,0(r2)
        return;
    ddbc:	00003306 	br	de8c <OSEventNameSet+0x128>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
    ddc0:	d0a80f03 	ldbu	r2,-24516(gp)
    ddc4:	10803fcc 	andi	r2,r2,255
    ddc8:	10000426 	beq	r2,zero,dddc <OSEventNameSet+0x78>
        *perr = OS_ERR_NAME_SET_ISR;
    ddcc:	e0bfff17 	ldw	r2,-4(fp)
    ddd0:	00c00484 	movi	r3,18
    ddd4:	10c00005 	stb	r3,0(r2)
        return;
    ddd8:	00002c06 	br	de8c <OSEventNameSet+0x128>
    }
    switch (pevent->OSEventType) {
    dddc:	e0bffd17 	ldw	r2,-12(fp)
    dde0:	10800003 	ldbu	r2,0(r2)
    dde4:	10803fcc 	andi	r2,r2,255
    dde8:	10bfffc4 	addi	r2,r2,-1
    ddec:	10800128 	cmpgeui	r2,r2,4
    ddf0:	10000426 	beq	r2,zero,de04 <OSEventNameSet+0xa0>
        case OS_EVENT_TYPE_MBOX:
        case OS_EVENT_TYPE_Q:
             break;

        default:
             *perr = OS_ERR_EVENT_TYPE;
    ddf4:	e0bfff17 	ldw	r2,-4(fp)
    ddf8:	00c00044 	movi	r3,1
    ddfc:	10c00005 	stb	r3,0(r2)
             return;
    de00:	00002206 	br	de8c <OSEventNameSet+0x128>
    switch (pevent->OSEventType) {
        case OS_EVENT_TYPE_SEM:
        case OS_EVENT_TYPE_MUTEX:
        case OS_EVENT_TYPE_MBOX:
        case OS_EVENT_TYPE_Q:
             break;
    de04:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    de08:	0005303a 	rdctl	r2,status
    de0c:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    de10:	e0fffa17 	ldw	r3,-24(fp)
    de14:	00bfff84 	movi	r2,-2
    de18:	1884703a 	and	r2,r3,r2
    de1c:	1001703a 	wrctl	status,r2
  
  return context;
    de20:	e0bffa17 	ldw	r2,-24(fp)

        default:
             *perr = OS_ERR_EVENT_TYPE;
             return;
    }
    OS_ENTER_CRITICAL();
    de24:	e0bff815 	stw	r2,-32(fp)
    len = OS_StrLen(pname);                           /* Can we fit the string in the storage area?    */
    de28:	e13ffe17 	ldw	r4,-8(fp)
    de2c:	000f70c0 	call	f70c <OS_StrLen>
    de30:	e0bff905 	stb	r2,-28(fp)
    if (len > (OS_EVENT_NAME_SIZE - 1)) {             /* No                                            */
    de34:	e0bff903 	ldbu	r2,-28(fp)
    de38:	10800830 	cmpltui	r2,r2,32
    de3c:	1000081e 	bne	r2,zero,de60 <OSEventNameSet+0xfc>
    de40:	e0bff817 	ldw	r2,-32(fp)
    de44:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    de48:	e0bffb17 	ldw	r2,-20(fp)
    de4c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_EVENT_NAME_TOO_LONG;
    de50:	e0bfff17 	ldw	r2,-4(fp)
    de54:	00c002c4 	movi	r3,11
    de58:	10c00005 	stb	r3,0(r2)
        return;
    de5c:	00000b06 	br	de8c <OSEventNameSet+0x128>
    }
    (void)OS_StrCopy(pevent->OSEventName, pname);     /* Yes, copy name to the event control block     */
    de60:	e0bffd17 	ldw	r2,-12(fp)
    de64:	10800384 	addi	r2,r2,14
    de68:	1009883a 	mov	r4,r2
    de6c:	e17ffe17 	ldw	r5,-8(fp)
    de70:	000f6980 	call	f698 <OS_StrCopy>
    de74:	e0bff817 	ldw	r2,-32(fp)
    de78:	e0bffc15 	stw	r2,-16(fp)
    de7c:	e0bffc17 	ldw	r2,-16(fp)
    de80:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
    de84:	e0bfff17 	ldw	r2,-4(fp)
    de88:	10000005 	stb	zero,0(r2)
}
    de8c:	e037883a 	mov	sp,fp
    de90:	dfc00117 	ldw	ra,4(sp)
    de94:	df000017 	ldw	fp,0(sp)
    de98:	dec00204 	addi	sp,sp,8
    de9c:	f800283a 	ret

0000dea0 <OSEventPendMulti>:
*********************************************************************************************************
*/
/*$PAGE*/
#if ((OS_EVENT_EN) && (OS_EVENT_MULTI_EN > 0))
INT16U  OSEventPendMulti (OS_EVENT **pevents_pend, OS_EVENT **pevents_rdy, void **pmsgs_rdy, INT16U timeout, INT8U *perr)
{
    dea0:	deffed04 	addi	sp,sp,-76
    dea4:	dfc01215 	stw	ra,72(sp)
    dea8:	df001115 	stw	fp,68(sp)
    deac:	df001104 	addi	fp,sp,68
    deb0:	e13ffc15 	stw	r4,-16(fp)
    deb4:	e17ffd15 	stw	r5,-12(fp)
    deb8:	e1bffe15 	stw	r6,-8(fp)
    debc:	3805883a 	mov	r2,r7
    dec0:	e0bfff0d 	sth	r2,-4(fp)
#endif
    BOOLEAN     events_rdy;
    INT16U      events_rdy_nbr;
    INT8U       events_stat;
#if (OS_CRITICAL_METHOD == 3)                           /* Allocate storage for CPU status register    */
    OS_CPU_SR   cpu_sr = 0;
    dec4:	e03ff315 	stw	zero,-52(fp)
#endif



#if (OS_ARG_CHK_EN > 0)
    if (perr == (INT8U *)0) {                           /* Validate 'perr'                             */
    dec8:	e0800217 	ldw	r2,8(fp)
    decc:	1000021e 	bne	r2,zero,ded8 <OSEventPendMulti+0x38>
        return (0);
    ded0:	0005883a 	mov	r2,zero
    ded4:	00017106 	br	e49c <OSEventPendMulti+0x5fc>
    }
    if (pevents_pend == (OS_EVENT **)0) {               /* Validate 'pevents_pend'                     */
    ded8:	e0bffc17 	ldw	r2,-16(fp)
    dedc:	1000051e 	bne	r2,zero,def4 <OSEventPendMulti+0x54>
       *perr =  OS_ERR_PEVENT_NULL;
    dee0:	e0800217 	ldw	r2,8(fp)
    dee4:	00c00104 	movi	r3,4
    dee8:	10c00005 	stb	r3,0(r2)
        return (0);
    deec:	0005883a 	mov	r2,zero
    def0:	00016a06 	br	e49c <OSEventPendMulti+0x5fc>
    }
    if (pevents_rdy  == (OS_EVENT **)0) {               /* Validate 'pevents_rdy'                      */
    def4:	e0bffd17 	ldw	r2,-12(fp)
    def8:	1000051e 	bne	r2,zero,df10 <OSEventPendMulti+0x70>
       *perr =  OS_ERR_PEVENT_NULL;
    defc:	e0800217 	ldw	r2,8(fp)
    df00:	00c00104 	movi	r3,4
    df04:	10c00005 	stb	r3,0(r2)
        return (0);
    df08:	0005883a 	mov	r2,zero
    df0c:	00016306 	br	e49c <OSEventPendMulti+0x5fc>
    }
    if (pmsgs_rdy == (void **)0) {                      /* Validate 'pmsgs_rdy'                        */
    df10:	e0bffe17 	ldw	r2,-8(fp)
    df14:	1000051e 	bne	r2,zero,df2c <OSEventPendMulti+0x8c>
       *perr =  OS_ERR_PEVENT_NULL;
    df18:	e0800217 	ldw	r2,8(fp)
    df1c:	00c00104 	movi	r3,4
    df20:	10c00005 	stb	r3,0(r2)
        return (0);
    df24:	0005883a 	mov	r2,zero
    df28:	00015c06 	br	e49c <OSEventPendMulti+0x5fc>
    }
#endif

   *pevents_rdy = (OS_EVENT *)0;                        /* Init array to NULL in case of errors        */
    df2c:	e0bffd17 	ldw	r2,-12(fp)
    df30:	10000015 	stw	zero,0(r2)

    pevents     =  pevents_pend;
    df34:	e0bffc17 	ldw	r2,-16(fp)
    df38:	e0bfef15 	stw	r2,-68(fp)
    pevent      = *pevents;
    df3c:	e0bfef17 	ldw	r2,-68(fp)
    df40:	10800017 	ldw	r2,0(r2)
    df44:	e0bff015 	stw	r2,-64(fp)
    while  (pevent != (OS_EVENT *)0) {
    df48:	00001906 	br	dfb0 <OSEventPendMulti+0x110>
        switch (pevent->OSEventType) {                  /* Validate event block types                  */
    df4c:	e0bff017 	ldw	r2,-64(fp)
    df50:	10800003 	ldbu	r2,0(r2)
    df54:	10803fcc 	andi	r2,r2,255
    df58:	10c000a0 	cmpeqi	r3,r2,2
    df5c:	1800091e 	bne	r3,zero,df84 <OSEventPendMulti+0xe4>
    df60:	10c000e0 	cmpeqi	r3,r2,3
    df64:	1800091e 	bne	r3,zero,df8c <OSEventPendMulti+0xec>
    df68:	10800060 	cmpeqi	r2,r2,1
    df6c:	1000091e 	bne	r2,zero,df94 <OSEventPendMulti+0xf4>
#endif

            case OS_EVENT_TYPE_MUTEX:                                            
            case OS_EVENT_TYPE_FLAG:
            default:           
                *perr = OS_ERR_EVENT_TYPE;
    df70:	e0800217 	ldw	r2,8(fp)
    df74:	00c00044 	movi	r3,1
    df78:	10c00005 	stb	r3,0(r2)
                 return (0);
    df7c:	0005883a 	mov	r2,zero
    df80:	00014606 	br	e49c <OSEventPendMulti+0x5fc>
            case OS_EVENT_TYPE_MBOX:
                 break;
#endif
#if ((OS_Q_EN   > 0) && (OS_MAX_QS > 0))
            case OS_EVENT_TYPE_Q:
                 break;
    df84:	0001883a 	nop
    df88:	00000306 	br	df98 <OSEventPendMulti+0xf8>
    pevent      = *pevents;
    while  (pevent != (OS_EVENT *)0) {
        switch (pevent->OSEventType) {                  /* Validate event block types                  */
#if (OS_SEM_EN  > 0)
            case OS_EVENT_TYPE_SEM:
                 break;
    df8c:	0001883a 	nop
    df90:	00000106 	br	df98 <OSEventPendMulti+0xf8>
#endif
#if (OS_MBOX_EN > 0)
            case OS_EVENT_TYPE_MBOX:
                 break;
    df94:	0001883a 	nop
            case OS_EVENT_TYPE_FLAG:
            default:           
                *perr = OS_ERR_EVENT_TYPE;
                 return (0);
        }
        pevents++;
    df98:	e0bfef17 	ldw	r2,-68(fp)
    df9c:	10800104 	addi	r2,r2,4
    dfa0:	e0bfef15 	stw	r2,-68(fp)
        pevent = *pevents;
    dfa4:	e0bfef17 	ldw	r2,-68(fp)
    dfa8:	10800017 	ldw	r2,0(r2)
    dfac:	e0bff015 	stw	r2,-64(fp)

   *pevents_rdy = (OS_EVENT *)0;                        /* Init array to NULL in case of errors        */

    pevents     =  pevents_pend;
    pevent      = *pevents;
    while  (pevent != (OS_EVENT *)0) {
    dfb0:	e0bff017 	ldw	r2,-64(fp)
    dfb4:	103fe51e 	bne	r2,zero,df4c <__alt_mem_Flash_flash_data+0xf400df4c>
        }
        pevents++;
        pevent = *pevents;
    }

    if (OSIntNesting  > 0) {                            /* See if called from ISR ...                  */
    dfb8:	d0a80f03 	ldbu	r2,-24516(gp)
    dfbc:	10803fcc 	andi	r2,r2,255
    dfc0:	10000526 	beq	r2,zero,dfd8 <OSEventPendMulti+0x138>
       *perr =  OS_ERR_PEND_ISR;                        /* ... can't PEND from an ISR                  */
    dfc4:	e0800217 	ldw	r2,8(fp)
    dfc8:	00c00084 	movi	r3,2
    dfcc:	10c00005 	stb	r3,0(r2)
        return (0);
    dfd0:	0005883a 	mov	r2,zero
    dfd4:	00013106 	br	e49c <OSEventPendMulti+0x5fc>
    }
    if (OSLockNesting > 0) {                            /* See if called with scheduler locked ...     */
    dfd8:	d0a80103 	ldbu	r2,-24572(gp)
    dfdc:	10803fcc 	andi	r2,r2,255
    dfe0:	10000526 	beq	r2,zero,dff8 <OSEventPendMulti+0x158>
       *perr =  OS_ERR_PEND_LOCKED;                     /* ... can't PEND when locked                  */
    dfe4:	e0800217 	ldw	r2,8(fp)
    dfe8:	00c00344 	movi	r3,13
    dfec:	10c00005 	stb	r3,0(r2)
        return (0);
    dff0:	0005883a 	mov	r2,zero
    dff4:	00012906 	br	e49c <OSEventPendMulti+0x5fc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    dff8:	0005303a 	rdctl	r2,status
    dffc:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    e000:	e0fff517 	ldw	r3,-44(fp)
    e004:	00bfff84 	movi	r2,-2
    e008:	1884703a 	and	r2,r3,r2
    e00c:	1001703a 	wrctl	status,r2
  
  return context;
    e010:	e0bff517 	ldw	r2,-44(fp)
    }

/*$PAGE*/
    OS_ENTER_CRITICAL();
    e014:	e0bff315 	stw	r2,-52(fp)
    events_rdy     =  OS_FALSE;
    e018:	e03ff105 	stb	zero,-60(fp)
    events_rdy_nbr =  0;
    e01c:	e03ff18d 	sth	zero,-58(fp)
    events_stat    =  OS_STAT_RDY;
    e020:	e03ff205 	stb	zero,-56(fp)
    pevents        =  pevents_pend;
    e024:	e0bffc17 	ldw	r2,-16(fp)
    e028:	e0bfef15 	stw	r2,-68(fp)
    pevent         = *pevents;
    e02c:	e0bfef17 	ldw	r2,-68(fp)
    e030:	10800017 	ldw	r2,0(r2)
    e034:	e0bff015 	stw	r2,-64(fp)
    while (pevent != (OS_EVENT *)0) {                   /* See if any events already available         */
    e038:	00008106 	br	e240 <OSEventPendMulti+0x3a0>
        switch (pevent->OSEventType) {
    e03c:	e0bff017 	ldw	r2,-64(fp)
    e040:	10800003 	ldbu	r2,0(r2)
    e044:	10803fcc 	andi	r2,r2,255
    e048:	10c000a0 	cmpeqi	r3,r2,2
    e04c:	18003c1e 	bne	r3,zero,e140 <OSEventPendMulti+0x2a0>
    e050:	10c000e0 	cmpeqi	r3,r2,3
    e054:	1800031e 	bne	r3,zero,e064 <OSEventPendMulti+0x1c4>
    e058:	10800060 	cmpeqi	r2,r2,1
    e05c:	10001e1e 	bne	r2,zero,e0d8 <OSEventPendMulti+0x238>
    e060:	00006606 	br	e1fc <OSEventPendMulti+0x35c>
#if (OS_SEM_EN > 0)
            case OS_EVENT_TYPE_SEM:
                 if (pevent->OSEventCnt > 0) {          /* If semaphore count > 0, resource available; */
    e064:	e0bff017 	ldw	r2,-64(fp)
    e068:	1080020b 	ldhu	r2,8(r2)
    e06c:	10bfffcc 	andi	r2,r2,65535
    e070:	10001526 	beq	r2,zero,e0c8 <OSEventPendMulti+0x228>
                     pevent->OSEventCnt--;              /* ... decrement semaphore,                ... */
    e074:	e0bff017 	ldw	r2,-64(fp)
    e078:	1080020b 	ldhu	r2,8(r2)
    e07c:	10bfffc4 	addi	r2,r2,-1
    e080:	1007883a 	mov	r3,r2
    e084:	e0bff017 	ldw	r2,-64(fp)
    e088:	10c0020d 	sth	r3,8(r2)
                    *pevents_rdy++ =  pevent;           /* ... and return available semaphore event    */
    e08c:	e0bffd17 	ldw	r2,-12(fp)
    e090:	10c00104 	addi	r3,r2,4
    e094:	e0fffd15 	stw	r3,-12(fp)
    e098:	e0fff017 	ldw	r3,-64(fp)
    e09c:	10c00015 	stw	r3,0(r2)
                      events_rdy   =  OS_TRUE;
    e0a0:	00800044 	movi	r2,1
    e0a4:	e0bff105 	stb	r2,-60(fp)
                    *pmsgs_rdy++   = (void *)0;         /* NO message returned  for semaphores         */
    e0a8:	e0bffe17 	ldw	r2,-8(fp)
    e0ac:	10c00104 	addi	r3,r2,4
    e0b0:	e0fffe15 	stw	r3,-8(fp)
    e0b4:	10000015 	stw	zero,0(r2)
                      events_rdy_nbr++;
    e0b8:	e0bff18b 	ldhu	r2,-58(fp)
    e0bc:	10800044 	addi	r2,r2,1
    e0c0:	e0bff18d 	sth	r2,-58(fp)

                 } else {
                      events_stat |=  OS_STAT_SEM;      /* Configure multi-pend for semaphore events   */
                 }
                 break;
    e0c4:	00005806 	br	e228 <OSEventPendMulti+0x388>
                      events_rdy   =  OS_TRUE;
                    *pmsgs_rdy++   = (void *)0;         /* NO message returned  for semaphores         */
                      events_rdy_nbr++;

                 } else {
                      events_stat |=  OS_STAT_SEM;      /* Configure multi-pend for semaphore events   */
    e0c8:	e0bff203 	ldbu	r2,-56(fp)
    e0cc:	10800054 	ori	r2,r2,1
    e0d0:	e0bff205 	stb	r2,-56(fp)
                 }
                 break;
    e0d4:	00005406 	br	e228 <OSEventPendMulti+0x388>
#endif

#if (OS_MBOX_EN > 0)
            case OS_EVENT_TYPE_MBOX:
                 if (pevent->OSEventPtr != (void *)0) { /* If mailbox NOT empty;                   ... */
    e0d8:	e0bff017 	ldw	r2,-64(fp)
    e0dc:	10800117 	ldw	r2,4(r2)
    e0e0:	10001326 	beq	r2,zero,e130 <OSEventPendMulti+0x290>
                                                        /* ... return available message,           ... */
                    *pmsgs_rdy++         = (void *)pevent->OSEventPtr;
    e0e4:	e0bffe17 	ldw	r2,-8(fp)
    e0e8:	10c00104 	addi	r3,r2,4
    e0ec:	e0fffe15 	stw	r3,-8(fp)
    e0f0:	e0fff017 	ldw	r3,-64(fp)
    e0f4:	18c00117 	ldw	r3,4(r3)
    e0f8:	10c00015 	stw	r3,0(r2)
                     pevent->OSEventPtr  = (void *)0;
    e0fc:	e0bff017 	ldw	r2,-64(fp)
    e100:	10000115 	stw	zero,4(r2)
                    *pevents_rdy++       =  pevent;     /* ... and return available mailbox event      */
    e104:	e0bffd17 	ldw	r2,-12(fp)
    e108:	10c00104 	addi	r3,r2,4
    e10c:	e0fffd15 	stw	r3,-12(fp)
    e110:	e0fff017 	ldw	r3,-64(fp)
    e114:	10c00015 	stw	r3,0(r2)
                      events_rdy         =  OS_TRUE;
    e118:	00800044 	movi	r2,1
    e11c:	e0bff105 	stb	r2,-60(fp)
                      events_rdy_nbr++;
    e120:	e0bff18b 	ldhu	r2,-58(fp)
    e124:	10800044 	addi	r2,r2,1
    e128:	e0bff18d 	sth	r2,-58(fp)

                 } else {
                      events_stat |= OS_STAT_MBOX;      /* Configure multi-pend for mailbox events     */
                 }
                 break;
    e12c:	00003e06 	br	e228 <OSEventPendMulti+0x388>
                    *pevents_rdy++       =  pevent;     /* ... and return available mailbox event      */
                      events_rdy         =  OS_TRUE;
                      events_rdy_nbr++;

                 } else {
                      events_stat |= OS_STAT_MBOX;      /* Configure multi-pend for mailbox events     */
    e130:	e0bff203 	ldbu	r2,-56(fp)
    e134:	10800094 	ori	r2,r2,2
    e138:	e0bff205 	stb	r2,-56(fp)
                 }
                 break;
    e13c:	00003a06 	br	e228 <OSEventPendMulti+0x388>
#endif

#if ((OS_Q_EN > 0) && (OS_MAX_QS > 0))
            case OS_EVENT_TYPE_Q:
                 pq = (OS_Q *)pevent->OSEventPtr;
    e140:	e0bff017 	ldw	r2,-64(fp)
    e144:	10800117 	ldw	r2,4(r2)
    e148:	e0bff415 	stw	r2,-48(fp)
                 if (pq->OSQEntries > 0) {              /* If queue NOT empty;                     ... */
    e14c:	e0bff417 	ldw	r2,-48(fp)
    e150:	1080058b 	ldhu	r2,22(r2)
    e154:	10bfffcc 	andi	r2,r2,65535
    e158:	10002426 	beq	r2,zero,e1ec <OSEventPendMulti+0x34c>
                                                        /* ... return available message,           ... */
                    *pmsgs_rdy++ = (void *)*pq->OSQOut++;
    e15c:	e0bffe17 	ldw	r2,-8(fp)
    e160:	10c00104 	addi	r3,r2,4
    e164:	e0fffe15 	stw	r3,-8(fp)
    e168:	e0fff417 	ldw	r3,-48(fp)
    e16c:	18c00417 	ldw	r3,16(r3)
    e170:	19400104 	addi	r5,r3,4
    e174:	e13ff417 	ldw	r4,-48(fp)
    e178:	21400415 	stw	r5,16(r4)
    e17c:	18c00017 	ldw	r3,0(r3)
    e180:	10c00015 	stw	r3,0(r2)
                     if (pq->OSQOut == pq->OSQEnd) {    /* If OUT ptr at queue end, ...                */
    e184:	e0bff417 	ldw	r2,-48(fp)
    e188:	10c00417 	ldw	r3,16(r2)
    e18c:	e0bff417 	ldw	r2,-48(fp)
    e190:	10800217 	ldw	r2,8(r2)
    e194:	1880041e 	bne	r3,r2,e1a8 <OSEventPendMulti+0x308>
                         pq->OSQOut  = pq->OSQStart;    /* ... wrap   to queue start                   */
    e198:	e0bff417 	ldw	r2,-48(fp)
    e19c:	10c00117 	ldw	r3,4(r2)
    e1a0:	e0bff417 	ldw	r2,-48(fp)
    e1a4:	10c00415 	stw	r3,16(r2)
                     }
                     pq->OSQEntries--;                  /* Update number of queue entries              */
    e1a8:	e0bff417 	ldw	r2,-48(fp)
    e1ac:	1080058b 	ldhu	r2,22(r2)
    e1b0:	10bfffc4 	addi	r2,r2,-1
    e1b4:	1007883a 	mov	r3,r2
    e1b8:	e0bff417 	ldw	r2,-48(fp)
    e1bc:	10c0058d 	sth	r3,22(r2)
                    *pevents_rdy++ = pevent;            /* ... and return available queue event        */
    e1c0:	e0bffd17 	ldw	r2,-12(fp)
    e1c4:	10c00104 	addi	r3,r2,4
    e1c8:	e0fffd15 	stw	r3,-12(fp)
    e1cc:	e0fff017 	ldw	r3,-64(fp)
    e1d0:	10c00015 	stw	r3,0(r2)
                      events_rdy   = OS_TRUE;
    e1d4:	00800044 	movi	r2,1
    e1d8:	e0bff105 	stb	r2,-60(fp)
                      events_rdy_nbr++;
    e1dc:	e0bff18b 	ldhu	r2,-58(fp)
    e1e0:	10800044 	addi	r2,r2,1
    e1e4:	e0bff18d 	sth	r2,-58(fp)

                 } else {
                      events_stat |= OS_STAT_Q;         /* Configure multi-pend for queue events       */
                 }
                 break;
    e1e8:	00000f06 	br	e228 <OSEventPendMulti+0x388>
                    *pevents_rdy++ = pevent;            /* ... and return available queue event        */
                      events_rdy   = OS_TRUE;
                      events_rdy_nbr++;

                 } else {
                      events_stat |= OS_STAT_Q;         /* Configure multi-pend for queue events       */
    e1ec:	e0bff203 	ldbu	r2,-56(fp)
    e1f0:	10800114 	ori	r2,r2,4
    e1f4:	e0bff205 	stb	r2,-56(fp)
                 }
                 break;
    e1f8:	00000b06 	br	e228 <OSEventPendMulti+0x388>
    e1fc:	e0bff317 	ldw	r2,-52(fp)
    e200:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    e204:	e0bff617 	ldw	r2,-40(fp)
    e208:	1001703a 	wrctl	status,r2

            case OS_EVENT_TYPE_MUTEX:                                            
            case OS_EVENT_TYPE_FLAG:
            default:           
                 OS_EXIT_CRITICAL();
                *pevents_rdy = (OS_EVENT *)0;           /* NULL terminate return event array           */
    e20c:	e0bffd17 	ldw	r2,-12(fp)
    e210:	10000015 	stw	zero,0(r2)
                *perr        =  OS_ERR_EVENT_TYPE;
    e214:	e0800217 	ldw	r2,8(fp)
    e218:	00c00044 	movi	r3,1
    e21c:	10c00005 	stb	r3,0(r2)
                 return (events_rdy_nbr);
    e220:	e0bff18b 	ldhu	r2,-58(fp)
    e224:	00009d06 	br	e49c <OSEventPendMulti+0x5fc>
        }
        pevents++;
    e228:	e0bfef17 	ldw	r2,-68(fp)
    e22c:	10800104 	addi	r2,r2,4
    e230:	e0bfef15 	stw	r2,-68(fp)
        pevent = *pevents;
    e234:	e0bfef17 	ldw	r2,-68(fp)
    e238:	10800017 	ldw	r2,0(r2)
    e23c:	e0bff015 	stw	r2,-64(fp)
    events_rdy     =  OS_FALSE;
    events_rdy_nbr =  0;
    events_stat    =  OS_STAT_RDY;
    pevents        =  pevents_pend;
    pevent         = *pevents;
    while (pevent != (OS_EVENT *)0) {                   /* See if any events already available         */
    e240:	e0bff017 	ldw	r2,-64(fp)
    e244:	103f7d1e 	bne	r2,zero,e03c <__alt_mem_Flash_flash_data+0xf400e03c>
        }
        pevents++;
        pevent = *pevents;
    }

    if ( events_rdy == OS_TRUE) {                       /* Return any events already available         */
    e248:	e0bff103 	ldbu	r2,-60(fp)
    e24c:	10800058 	cmpnei	r2,r2,1
    e250:	10000a1e 	bne	r2,zero,e27c <OSEventPendMulti+0x3dc>
       *pevents_rdy = (OS_EVENT *)0;                    /* NULL terminate return event array           */
    e254:	e0bffd17 	ldw	r2,-12(fp)
    e258:	10000015 	stw	zero,0(r2)
    e25c:	e0bff317 	ldw	r2,-52(fp)
    e260:	e0bff715 	stw	r2,-36(fp)
    e264:	e0bff717 	ldw	r2,-36(fp)
    e268:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
       *perr        =  OS_ERR_NONE;
    e26c:	e0800217 	ldw	r2,8(fp)
    e270:	10000005 	stb	zero,0(r2)
        return (events_rdy_nbr);
    e274:	e0bff18b 	ldhu	r2,-58(fp)
    e278:	00008806 	br	e49c <OSEventPendMulti+0x5fc>
    }
/*$PAGE*/
                                                        /* Otherwise, must wait until any event occurs */
    OSTCBCur->OSTCBStat     |= events_stat  |           /* Resource not available, ...                 */
    e27c:	d0a81017 	ldw	r2,-24512(gp)
    e280:	d0e81017 	ldw	r3,-24512(gp)
    e284:	19000c03 	ldbu	r4,48(r3)
    e288:	e0fff203 	ldbu	r3,-56(fp)
    e28c:	20c6b03a 	or	r3,r4,r3
    e290:	1809883a 	mov	r4,r3
    e294:	00ffe004 	movi	r3,-128
    e298:	20c6b03a 	or	r3,r4,r3
    e29c:	10c00c05 	stb	r3,48(r2)
                               OS_STAT_MULTI;           /* ... pend on multiple events                 */
    OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
    e2a0:	d0a81017 	ldw	r2,-24512(gp)
    e2a4:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBDly       = timeout;                 /* Store pend timeout in TCB                   */
    e2a8:	d0a81017 	ldw	r2,-24512(gp)
    e2ac:	e0ffff0b 	ldhu	r3,-4(fp)
    e2b0:	10c00b8d 	sth	r3,46(r2)
    OS_EventTaskWaitMulti(pevents_pend);                /* Suspend task until events or timeout occurs */
    e2b4:	e13ffc17 	ldw	r4,-16(fp)
    e2b8:	000ede80 	call	ede8 <OS_EventTaskWaitMulti>
    e2bc:	e0bff317 	ldw	r2,-52(fp)
    e2c0:	e0bff815 	stw	r2,-32(fp)
    e2c4:	e0bff817 	ldw	r2,-32(fp)
    e2c8:	1001703a 	wrctl	status,r2

    OS_EXIT_CRITICAL();
    OS_Sched();                                         /* Find next highest priority task ready       */
    e2cc:	000f55c0 	call	f55c <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    e2d0:	0005303a 	rdctl	r2,status
    e2d4:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    e2d8:	e0fff917 	ldw	r3,-28(fp)
    e2dc:	00bfff84 	movi	r2,-2
    e2e0:	1884703a 	and	r2,r3,r2
    e2e4:	1001703a 	wrctl	status,r2
  
  return context;
    e2e8:	e0bff917 	ldw	r2,-28(fp)
    OS_ENTER_CRITICAL();
    e2ec:	e0bff315 	stw	r2,-52(fp)

    switch (OSTCBCur->OSTCBStatPend) {                  /* Handle event posted, aborted, or timed-out  */
    e2f0:	d0a81017 	ldw	r2,-24512(gp)
    e2f4:	10800c43 	ldbu	r2,49(r2)
    e2f8:	10803fcc 	andi	r2,r2,255
    e2fc:	10000226 	beq	r2,zero,e308 <OSEventPendMulti+0x468>
    e300:	108000a0 	cmpeqi	r2,r2,2
    e304:	10001826 	beq	r2,zero,e368 <OSEventPendMulti+0x4c8>
        case OS_STAT_PEND_OK:
        case OS_STAT_PEND_ABORT:
             pevent = OSTCBCur->OSTCBEventPtr;
    e308:	d0a81017 	ldw	r2,-24512(gp)
    e30c:	10800717 	ldw	r2,28(r2)
    e310:	e0bff015 	stw	r2,-64(fp)
             if (pevent != (OS_EVENT *)0) {             /* If task event ptr != NULL, ...              */
    e314:	e0bff017 	ldw	r2,-64(fp)
    e318:	10000b26 	beq	r2,zero,e348 <OSEventPendMulti+0x4a8>
                *pevents_rdy++ =  pevent;               /* ... return available event ...              */
    e31c:	e0bffd17 	ldw	r2,-12(fp)
    e320:	10c00104 	addi	r3,r2,4
    e324:	e0fffd15 	stw	r3,-12(fp)
    e328:	e0fff017 	ldw	r3,-64(fp)
    e32c:	10c00015 	stw	r3,0(r2)
                *pevents_rdy   = (OS_EVENT *)0;         /* ... & NULL terminate return event array     */
    e330:	e0bffd17 	ldw	r2,-12(fp)
    e334:	10000015 	stw	zero,0(r2)
                  events_rdy_nbr++;
    e338:	e0bff18b 	ldhu	r2,-58(fp)
    e33c:	10800044 	addi	r2,r2,1
    e340:	e0bff18d 	sth	r2,-58(fp)

             } else {                                   /* Else NO event available, handle as timeout  */
                 OSTCBCur->OSTCBStatPend = OS_STAT_PEND_TO;
                 OS_EventTaskRemoveMulti(OSTCBCur, pevents_pend);
             }
			 break;
    e344:	00000d06 	br	e37c <OSEventPendMulti+0x4dc>
                *pevents_rdy++ =  pevent;               /* ... return available event ...              */
                *pevents_rdy   = (OS_EVENT *)0;         /* ... & NULL terminate return event array     */
                  events_rdy_nbr++;

             } else {                                   /* Else NO event available, handle as timeout  */
                 OSTCBCur->OSTCBStatPend = OS_STAT_PEND_TO;
    e348:	d0a81017 	ldw	r2,-24512(gp)
    e34c:	00c00044 	movi	r3,1
    e350:	10c00c45 	stb	r3,49(r2)
                 OS_EventTaskRemoveMulti(OSTCBCur, pevents_pend);
    e354:	d0a81017 	ldw	r2,-24512(gp)
    e358:	1009883a 	mov	r4,r2
    e35c:	e17ffc17 	ldw	r5,-16(fp)
    e360:	000efe80 	call	efe8 <OS_EventTaskRemoveMulti>
             }
			 break;
    e364:	00000506 	br	e37c <OSEventPendMulti+0x4dc>

        case OS_STAT_PEND_TO:
        default:                                        /* ... remove task from events' wait lists     */
             OS_EventTaskRemoveMulti(OSTCBCur, pevents_pend);
    e368:	d0a81017 	ldw	r2,-24512(gp)
    e36c:	1009883a 	mov	r4,r2
    e370:	e17ffc17 	ldw	r5,-16(fp)
    e374:	000efe80 	call	efe8 <OS_EventTaskRemoveMulti>
             break;
    e378:	0001883a 	nop
    }

    switch (OSTCBCur->OSTCBStatPend) {
    e37c:	d0a81017 	ldw	r2,-24512(gp)
    e380:	10800c43 	ldbu	r2,49(r2)
    e384:	10803fcc 	andi	r2,r2,255
    e388:	10000326 	beq	r2,zero,e398 <OSEventPendMulti+0x4f8>
    e38c:	108000a0 	cmpeqi	r2,r2,2
    e390:	1000231e 	bne	r2,zero,e420 <OSEventPendMulti+0x580>
    e394:	00002a06 	br	e440 <OSEventPendMulti+0x5a0>
        case OS_STAT_PEND_OK:
             switch (pevent->OSEventType) {             /* Return event's message                      */
    e398:	e0bff017 	ldw	r2,-64(fp)
    e39c:	10800003 	ldbu	r2,0(r2)
    e3a0:	10803fcc 	andi	r2,r2,255
    e3a4:	0080100e 	bge	zero,r2,e3e8 <OSEventPendMulti+0x548>
    e3a8:	10c000d0 	cmplti	r3,r2,3
    e3ac:	1800071e 	bne	r3,zero,e3cc <OSEventPendMulti+0x52c>
    e3b0:	108000e0 	cmpeqi	r2,r2,3
    e3b4:	10000c26 	beq	r2,zero,e3e8 <OSEventPendMulti+0x548>
#if (OS_SEM_EN > 0)
                 case OS_EVENT_TYPE_SEM:
                     *pmsgs_rdy++ = (void *)0;          /* NO message returned for semaphores          */
    e3b8:	e0bffe17 	ldw	r2,-8(fp)
    e3bc:	10c00104 	addi	r3,r2,4
    e3c0:	e0fffe15 	stw	r3,-8(fp)
    e3c4:	10000015 	stw	zero,0(r2)
                      break;
    e3c8:	00001206 	br	e414 <OSEventPendMulti+0x574>

#if ((OS_MBOX_EN > 0) ||                 \
    ((OS_Q_EN    > 0) && (OS_MAX_QS > 0)))
                 case OS_EVENT_TYPE_MBOX:
                 case OS_EVENT_TYPE_Q:
                     *pmsgs_rdy++ = (void *)OSTCBCur->OSTCBMsg;     /* Return received message         */
    e3cc:	e0bffe17 	ldw	r2,-8(fp)
    e3d0:	10c00104 	addi	r3,r2,4
    e3d4:	e0fffe15 	stw	r3,-8(fp)
    e3d8:	d0e81017 	ldw	r3,-24512(gp)
    e3dc:	18c00917 	ldw	r3,36(r3)
    e3e0:	10c00015 	stw	r3,0(r2)
                      break;
    e3e4:	00000b06 	br	e414 <OSEventPendMulti+0x574>
    e3e8:	e0bff317 	ldw	r2,-52(fp)
    e3ec:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    e3f0:	e0bffa17 	ldw	r2,-24(fp)
    e3f4:	1001703a 	wrctl	status,r2

                 case OS_EVENT_TYPE_MUTEX:                                       
                 case OS_EVENT_TYPE_FLAG:
                 default:           
                      OS_EXIT_CRITICAL();
                     *pevents_rdy = (OS_EVENT *)0;      /* NULL terminate return event array           */
    e3f8:	e0bffd17 	ldw	r2,-12(fp)
    e3fc:	10000015 	stw	zero,0(r2)
                     *perr        =  OS_ERR_EVENT_TYPE;
    e400:	e0800217 	ldw	r2,8(fp)
    e404:	00c00044 	movi	r3,1
    e408:	10c00005 	stb	r3,0(r2)
                      return (events_rdy_nbr);
    e40c:	e0bff18b 	ldhu	r2,-58(fp)
    e410:	00002206 	br	e49c <OSEventPendMulti+0x5fc>
             }
            *perr = OS_ERR_NONE;
    e414:	e0800217 	ldw	r2,8(fp)
    e418:	10000005 	stb	zero,0(r2)
             break;
    e41c:	00001006 	br	e460 <OSEventPendMulti+0x5c0>

        case OS_STAT_PEND_ABORT:
            *pmsgs_rdy++ = (void *)0;                   /* NO message returned for abort               */
    e420:	e0bffe17 	ldw	r2,-8(fp)
    e424:	10c00104 	addi	r3,r2,4
    e428:	e0fffe15 	stw	r3,-8(fp)
    e42c:	10000015 	stw	zero,0(r2)
            *perr        =  OS_ERR_PEND_ABORT;          /* Indicate that event  aborted                */
    e430:	e0800217 	ldw	r2,8(fp)
    e434:	00c00384 	movi	r3,14
    e438:	10c00005 	stb	r3,0(r2)
             break;
    e43c:	00000806 	br	e460 <OSEventPendMulti+0x5c0>
                                                        
        case OS_STAT_PEND_TO:                                                
        default:        
            *pmsgs_rdy++ = (void *)0;                   /* NO message returned for timeout             */
    e440:	e0bffe17 	ldw	r2,-8(fp)
    e444:	10c00104 	addi	r3,r2,4
    e448:	e0fffe15 	stw	r3,-8(fp)
    e44c:	10000015 	stw	zero,0(r2)
            *perr        =  OS_ERR_TIMEOUT;             /* Indicate that events timed out              */
    e450:	e0800217 	ldw	r2,8(fp)
    e454:	00c00284 	movi	r3,10
    e458:	10c00005 	stb	r3,0(r2)
             break;
    e45c:	0001883a 	nop
    }

    OSTCBCur->OSTCBStat          =  OS_STAT_RDY;        /* Set   task  status to ready                 */
    e460:	d0a81017 	ldw	r2,-24512(gp)
    e464:	10000c05 	stb	zero,48(r2)
    OSTCBCur->OSTCBStatPend      =  OS_STAT_PEND_OK;    /* Clear pend  status                          */
    e468:	d0a81017 	ldw	r2,-24512(gp)
    e46c:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;      /* Clear event pointers                        */
    e470:	d0a81017 	ldw	r2,-24512(gp)
    e474:	10000715 	stw	zero,28(r2)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
    e478:	d0a81017 	ldw	r2,-24512(gp)
    e47c:	10000815 	stw	zero,32(r2)
    OSTCBCur->OSTCBMsg           = (void      *)0;      /* Clear task  message                         */
    e480:	d0a81017 	ldw	r2,-24512(gp)
    e484:	10000915 	stw	zero,36(r2)
    e488:	e0bff317 	ldw	r2,-52(fp)
    e48c:	e0bffb15 	stw	r2,-20(fp)
    e490:	e0bffb17 	ldw	r2,-20(fp)
    e494:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();

    return (events_rdy_nbr);
    e498:	e0bff18b 	ldhu	r2,-58(fp)
}
    e49c:	e037883a 	mov	sp,fp
    e4a0:	dfc00117 	ldw	ra,4(sp)
    e4a4:	df000017 	ldw	fp,0(sp)
    e4a8:	dec00204 	addi	sp,sp,8
    e4ac:	f800283a 	ret

0000e4b0 <OSInit>:
* Returns    : none
*********************************************************************************************************
*/

void  OSInit (void)
{
    e4b0:	defffe04 	addi	sp,sp,-8
    e4b4:	dfc00115 	stw	ra,4(sp)
    e4b8:	df000015 	stw	fp,0(sp)
    e4bc:	d839883a 	mov	fp,sp
    OSInitHookBegin();                                           /* Call port specific initialization code   */
    e4c0:	0018e9c0 	call	18e9c <OSInitHookBegin>

    OS_InitMisc();                                               /* Initialize miscellaneous variables       */
    e4c4:	000f2240 	call	f224 <OS_InitMisc>

    OS_InitRdyList();                                            /* Initialize the Ready List                */
    e4c8:	000f2680 	call	f268 <OS_InitRdyList>

    OS_InitTCBList();                                            /* Initialize the free list of OS_TCBs      */
    e4cc:	000f3c80 	call	f3c8 <OS_InitTCBList>

    OS_InitEventList();                                          /* Initialize the free list of OS_EVENTs    */
    e4d0:	000f1480 	call	f148 <OS_InitEventList>

#if (OS_FLAG_EN > 0) && (OS_MAX_FLAGS > 0)
    OS_FlagInit();                                               /* Initialize the event flag structures     */
    e4d4:	00113480 	call	11348 <OS_FlagInit>
#endif

#if (OS_MEM_EN > 0) && (OS_MAX_MEM_PART > 0)
    OS_MemInit();                                                /* Initialize the memory manager            */
    e4d8:	0011c900 	call	11c90 <OS_MemInit>
#endif

#if (OS_Q_EN > 0) && (OS_MAX_QS > 0)
    OS_QInit();                                                  /* Initialize the message queue structures  */
    e4dc:	0012ec40 	call	12ec4 <OS_QInit>
#endif

    OS_InitTaskIdle();                                           /* Create the Idle Task                     */
    e4e0:	000f2d00 	call	f2d0 <OS_InitTaskIdle>
#if OS_TASK_STAT_EN > 0
    OS_InitTaskStat();                                           /* Create the Statistic Task                */
    e4e4:	000f34c0 	call	f34c <OS_InitTaskStat>

#if OS_TMR_EN > 0
    OSTmr_Init();                                                /* Initialize the Timer Manager             */
#endif

    OSInitHookEnd();                                             /* Call port specific init. code            */
    e4e8:	0018eb80 	call	18eb8 <OSInitHookEnd>

#if OS_DEBUG_EN > 0
    OSDebugInit();
    e4ec:	000fc340 	call	fc34 <OSDebugInit>
#endif
}
    e4f0:	e037883a 	mov	sp,fp
    e4f4:	dfc00117 	ldw	ra,4(sp)
    e4f8:	df000017 	ldw	fp,0(sp)
    e4fc:	dec00204 	addi	sp,sp,8
    e500:	f800283a 	ret

0000e504 <OSIntEnter>:
*              5) You are allowed to nest interrupts up to 255 levels deep.
*********************************************************************************************************
*/

void  OSIntEnter (void)
{
    e504:	defffc04 	addi	sp,sp,-16
    e508:	df000315 	stw	fp,12(sp)
    e50c:	df000304 	addi	fp,sp,12
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
    e510:	e03ffd15 	stw	zero,-12(fp)
#endif

    if (OSRunning == OS_TRUE) {
    e514:	d0a80143 	ldbu	r2,-24571(gp)
    e518:	10803fcc 	andi	r2,r2,255
    e51c:	10800058 	cmpnei	r2,r2,1
    e520:	1000131e 	bne	r2,zero,e570 <OSIntEnter+0x6c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    e524:	0005303a 	rdctl	r2,status
    e528:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    e52c:	e0fffe17 	ldw	r3,-8(fp)
    e530:	00bfff84 	movi	r2,-2
    e534:	1884703a 	and	r2,r3,r2
    e538:	1001703a 	wrctl	status,r2
  
  return context;
    e53c:	e0bffe17 	ldw	r2,-8(fp)
        OS_ENTER_CRITICAL();
    e540:	e0bffd15 	stw	r2,-12(fp)
        if (OSIntNesting < 255u) {
    e544:	d0a80f03 	ldbu	r2,-24516(gp)
    e548:	10803fcc 	andi	r2,r2,255
    e54c:	10803fe0 	cmpeqi	r2,r2,255
    e550:	1000031e 	bne	r2,zero,e560 <OSIntEnter+0x5c>
            OSIntNesting++;                      /* Increment ISR nesting level                        */
    e554:	d0a80f03 	ldbu	r2,-24516(gp)
    e558:	10800044 	addi	r2,r2,1
    e55c:	d0a80f05 	stb	r2,-24516(gp)
    e560:	e0bffd17 	ldw	r2,-12(fp)
    e564:	e0bfff15 	stw	r2,-4(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    e568:	e0bfff17 	ldw	r2,-4(fp)
    e56c:	1001703a 	wrctl	status,r2
        }
        OS_EXIT_CRITICAL();
    }
}
    e570:	e037883a 	mov	sp,fp
    e574:	df000017 	ldw	fp,0(sp)
    e578:	dec00104 	addi	sp,sp,4
    e57c:	f800283a 	ret

0000e580 <OSIntExit>:
*              2) Rescheduling is prevented when the scheduler is locked (see OS_SchedLock())
*********************************************************************************************************
*/

void  OSIntExit (void)
{
    e580:	defffb04 	addi	sp,sp,-20
    e584:	dfc00415 	stw	ra,16(sp)
    e588:	df000315 	stw	fp,12(sp)
    e58c:	df000304 	addi	fp,sp,12
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
    e590:	e03ffd15 	stw	zero,-12(fp)
#endif



    if (OSRunning == OS_TRUE) {
    e594:	d0a80143 	ldbu	r2,-24571(gp)
    e598:	10803fcc 	andi	r2,r2,255
    e59c:	10800058 	cmpnei	r2,r2,1
    e5a0:	10002f1e 	bne	r2,zero,e660 <OSIntExit+0xe0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    e5a4:	0005303a 	rdctl	r2,status
    e5a8:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    e5ac:	e0fffe17 	ldw	r3,-8(fp)
    e5b0:	00bfff84 	movi	r2,-2
    e5b4:	1884703a 	and	r2,r3,r2
    e5b8:	1001703a 	wrctl	status,r2
  
  return context;
    e5bc:	e0bffe17 	ldw	r2,-8(fp)
        OS_ENTER_CRITICAL();
    e5c0:	e0bffd15 	stw	r2,-12(fp)
        if (OSIntNesting > 0) {                            /* Prevent OSIntNesting from wrapping       */
    e5c4:	d0a80f03 	ldbu	r2,-24516(gp)
    e5c8:	10803fcc 	andi	r2,r2,255
    e5cc:	10000326 	beq	r2,zero,e5dc <OSIntExit+0x5c>
            OSIntNesting--;
    e5d0:	d0a80f03 	ldbu	r2,-24516(gp)
    e5d4:	10bfffc4 	addi	r2,r2,-1
    e5d8:	d0a80f05 	stb	r2,-24516(gp)
        }
        if (OSIntNesting == 0) {                           /* Reschedule only if all ISRs complete ... */
    e5dc:	d0a80f03 	ldbu	r2,-24516(gp)
    e5e0:	10803fcc 	andi	r2,r2,255
    e5e4:	10001a1e 	bne	r2,zero,e650 <OSIntExit+0xd0>
            if (OSLockNesting == 0) {                      /* ... and not locked.                      */
    e5e8:	d0a80103 	ldbu	r2,-24572(gp)
    e5ec:	10803fcc 	andi	r2,r2,255
    e5f0:	1000171e 	bne	r2,zero,e650 <OSIntExit+0xd0>
                OS_SchedNew();
    e5f4:	000f6280 	call	f628 <OS_SchedNew>
                if (OSPrioHighRdy != OSPrioCur) {          /* No Ctx Sw if current task is highest rdy */
    e5f8:	d0e80303 	ldbu	r3,-24564(gp)
    e5fc:	d0a80343 	ldbu	r2,-24563(gp)
    e600:	18c03fcc 	andi	r3,r3,255
    e604:	10803fcc 	andi	r2,r2,255
    e608:	18801126 	beq	r3,r2,e650 <OSIntExit+0xd0>
                    OSTCBHighRdy  = OSTCBPrioTbl[OSPrioHighRdy];
    e60c:	d0a80303 	ldbu	r2,-24564(gp)
    e610:	10c03fcc 	andi	r3,r2,255
    e614:	008000b4 	movhi	r2,2
    e618:	109b2204 	addi	r2,r2,27784
    e61c:	18c7883a 	add	r3,r3,r3
    e620:	18c7883a 	add	r3,r3,r3
    e624:	10c5883a 	add	r2,r2,r3
    e628:	10800017 	ldw	r2,0(r2)
    e62c:	d0a80b15 	stw	r2,-24532(gp)
#if OS_TASK_PROFILE_EN > 0
                    OSTCBHighRdy->OSTCBCtxSwCtr++;         /* Inc. # of context switches to this task  */
    e630:	d0a80b17 	ldw	r2,-24532(gp)
    e634:	10c00e17 	ldw	r3,56(r2)
    e638:	18c00044 	addi	r3,r3,1
    e63c:	10c00e15 	stw	r3,56(r2)
#endif
                    OSCtxSwCtr++;                          /* Keep track of the number of ctx switches */
    e640:	d0a80617 	ldw	r2,-24552(gp)
    e644:	10800044 	addi	r2,r2,1
    e648:	d0a80615 	stw	r2,-24552(gp)
                    OSIntCtxSw();                          /* Perform interrupt level ctx switch       */
    e64c:	0018bdc0 	call	18bdc <OSCtxSw>
    e650:	e0bffd17 	ldw	r2,-12(fp)
    e654:	e0bfff15 	stw	r2,-4(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    e658:	e0bfff17 	ldw	r2,-4(fp)
    e65c:	1001703a 	wrctl	status,r2
                }
            }
        }
        OS_EXIT_CRITICAL();
    }
}
    e660:	e037883a 	mov	sp,fp
    e664:	dfc00117 	ldw	ra,4(sp)
    e668:	df000017 	ldw	fp,0(sp)
    e66c:	dec00204 	addi	sp,sp,8
    e670:	f800283a 	ret

0000e674 <OSSchedLock>:
*********************************************************************************************************
*/

#if OS_SCHED_LOCK_EN > 0
void  OSSchedLock (void)
{
    e674:	defffc04 	addi	sp,sp,-16
    e678:	df000315 	stw	fp,12(sp)
    e67c:	df000304 	addi	fp,sp,12
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
    e680:	e03ffd15 	stw	zero,-12(fp)
#endif



    if (OSRunning == OS_TRUE) {                  /* Make sure multitasking is running                  */
    e684:	d0a80143 	ldbu	r2,-24571(gp)
    e688:	10803fcc 	andi	r2,r2,255
    e68c:	10800058 	cmpnei	r2,r2,1
    e690:	1000161e 	bne	r2,zero,e6ec <OSSchedLock+0x78>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    e694:	0005303a 	rdctl	r2,status
    e698:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    e69c:	e0fffe17 	ldw	r3,-8(fp)
    e6a0:	00bfff84 	movi	r2,-2
    e6a4:	1884703a 	and	r2,r3,r2
    e6a8:	1001703a 	wrctl	status,r2
  
  return context;
    e6ac:	e0bffe17 	ldw	r2,-8(fp)
        OS_ENTER_CRITICAL();
    e6b0:	e0bffd15 	stw	r2,-12(fp)
        if (OSIntNesting == 0) {                 /* Can't call from an ISR                             */
    e6b4:	d0a80f03 	ldbu	r2,-24516(gp)
    e6b8:	10803fcc 	andi	r2,r2,255
    e6bc:	1000071e 	bne	r2,zero,e6dc <OSSchedLock+0x68>
            if (OSLockNesting < 255u) {          /* Prevent OSLockNesting from wrapping back to 0      */
    e6c0:	d0a80103 	ldbu	r2,-24572(gp)
    e6c4:	10803fcc 	andi	r2,r2,255
    e6c8:	10803fe0 	cmpeqi	r2,r2,255
    e6cc:	1000031e 	bne	r2,zero,e6dc <OSSchedLock+0x68>
                OSLockNesting++;                 /* Increment lock nesting level                       */
    e6d0:	d0a80103 	ldbu	r2,-24572(gp)
    e6d4:	10800044 	addi	r2,r2,1
    e6d8:	d0a80105 	stb	r2,-24572(gp)
    e6dc:	e0bffd17 	ldw	r2,-12(fp)
    e6e0:	e0bfff15 	stw	r2,-4(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    e6e4:	e0bfff17 	ldw	r2,-4(fp)
    e6e8:	1001703a 	wrctl	status,r2
            }
        }
        OS_EXIT_CRITICAL();
    }
}
    e6ec:	e037883a 	mov	sp,fp
    e6f0:	df000017 	ldw	fp,0(sp)
    e6f4:	dec00104 	addi	sp,sp,4
    e6f8:	f800283a 	ret

0000e6fc <OSSchedUnlock>:
*********************************************************************************************************
*/

#if OS_SCHED_LOCK_EN > 0
void  OSSchedUnlock (void)
{
    e6fc:	defff804 	addi	sp,sp,-32
    e700:	dfc00715 	stw	ra,28(sp)
    e704:	df000615 	stw	fp,24(sp)
    e708:	df000604 	addi	fp,sp,24
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
    e70c:	e03ffa15 	stw	zero,-24(fp)
#endif



    if (OSRunning == OS_TRUE) {                            /* Make sure multitasking is running        */
    e710:	d0a80143 	ldbu	r2,-24571(gp)
    e714:	10803fcc 	andi	r2,r2,255
    e718:	10800058 	cmpnei	r2,r2,1
    e71c:	1000281e 	bne	r2,zero,e7c0 <OSSchedUnlock+0xc4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    e720:	0005303a 	rdctl	r2,status
    e724:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    e728:	e0fffb17 	ldw	r3,-20(fp)
    e72c:	00bfff84 	movi	r2,-2
    e730:	1884703a 	and	r2,r3,r2
    e734:	1001703a 	wrctl	status,r2
  
  return context;
    e738:	e0bffb17 	ldw	r2,-20(fp)
        OS_ENTER_CRITICAL();
    e73c:	e0bffa15 	stw	r2,-24(fp)
        if (OSLockNesting > 0) {                           /* Do not decrement if already 0            */
    e740:	d0a80103 	ldbu	r2,-24572(gp)
    e744:	10803fcc 	andi	r2,r2,255
    e748:	10001926 	beq	r2,zero,e7b0 <OSSchedUnlock+0xb4>
            OSLockNesting--;                               /* Decrement lock nesting level             */
    e74c:	d0a80103 	ldbu	r2,-24572(gp)
    e750:	10bfffc4 	addi	r2,r2,-1
    e754:	d0a80105 	stb	r2,-24572(gp)
            if (OSLockNesting == 0) {                      /* See if scheduler is enabled and ...      */
    e758:	d0a80103 	ldbu	r2,-24572(gp)
    e75c:	10803fcc 	andi	r2,r2,255
    e760:	10000e1e 	bne	r2,zero,e79c <OSSchedUnlock+0xa0>
                if (OSIntNesting == 0) {                   /* ... not in an ISR                        */
    e764:	d0a80f03 	ldbu	r2,-24516(gp)
    e768:	10803fcc 	andi	r2,r2,255
    e76c:	1000061e 	bne	r2,zero,e788 <OSSchedUnlock+0x8c>
    e770:	e0bffa17 	ldw	r2,-24(fp)
    e774:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    e778:	e0bffc17 	ldw	r2,-16(fp)
    e77c:	1001703a 	wrctl	status,r2
                    OS_EXIT_CRITICAL();
                    OS_Sched();                            /* See if a HPT is ready                    */
    e780:	000f55c0 	call	f55c <OS_Sched>
    e784:	00000e06 	br	e7c0 <OSSchedUnlock+0xc4>
    e788:	e0bffa17 	ldw	r2,-24(fp)
    e78c:	e0bffd15 	stw	r2,-12(fp)
    e790:	e0bffd17 	ldw	r2,-12(fp)
    e794:	1001703a 	wrctl	status,r2
    e798:	00000906 	br	e7c0 <OSSchedUnlock+0xc4>
    e79c:	e0bffa17 	ldw	r2,-24(fp)
    e7a0:	e0bffe15 	stw	r2,-8(fp)
    e7a4:	e0bffe17 	ldw	r2,-8(fp)
    e7a8:	1001703a 	wrctl	status,r2
    e7ac:	00000406 	br	e7c0 <OSSchedUnlock+0xc4>
    e7b0:	e0bffa17 	ldw	r2,-24(fp)
    e7b4:	e0bfff15 	stw	r2,-4(fp)
    e7b8:	e0bfff17 	ldw	r2,-4(fp)
    e7bc:	1001703a 	wrctl	status,r2
            }
        } else {
            OS_EXIT_CRITICAL();
        }
    }
}
    e7c0:	e037883a 	mov	sp,fp
    e7c4:	dfc00117 	ldw	ra,4(sp)
    e7c8:	df000017 	ldw	fp,0(sp)
    e7cc:	dec00204 	addi	sp,sp,8
    e7d0:	f800283a 	ret

0000e7d4 <OSStart>:
*                 d_ Execute the task.
*********************************************************************************************************
*/

void  OSStart (void)
{
    e7d4:	defffe04 	addi	sp,sp,-8
    e7d8:	dfc00115 	stw	ra,4(sp)
    e7dc:	df000015 	stw	fp,0(sp)
    e7e0:	d839883a 	mov	fp,sp
    if (OSRunning == OS_FALSE) {
    e7e4:	d0a80143 	ldbu	r2,-24571(gp)
    e7e8:	10803fcc 	andi	r2,r2,255
    e7ec:	10000f1e 	bne	r2,zero,e82c <OSStart+0x58>
        OS_SchedNew();                               /* Find highest priority's task priority number   */
    e7f0:	000f6280 	call	f628 <OS_SchedNew>
        OSPrioCur     = OSPrioHighRdy;
    e7f4:	d0a80303 	ldbu	r2,-24564(gp)
    e7f8:	d0a80345 	stb	r2,-24563(gp)
        OSTCBHighRdy  = OSTCBPrioTbl[OSPrioHighRdy]; /* Point to highest priority task ready to run    */
    e7fc:	d0a80303 	ldbu	r2,-24564(gp)
    e800:	10c03fcc 	andi	r3,r2,255
    e804:	008000b4 	movhi	r2,2
    e808:	109b2204 	addi	r2,r2,27784
    e80c:	18c7883a 	add	r3,r3,r3
    e810:	18c7883a 	add	r3,r3,r3
    e814:	10c5883a 	add	r2,r2,r3
    e818:	10800017 	ldw	r2,0(r2)
    e81c:	d0a80b15 	stw	r2,-24532(gp)
        OSTCBCur      = OSTCBHighRdy;
    e820:	d0a80b17 	ldw	r2,-24532(gp)
    e824:	d0a81015 	stw	r2,-24512(gp)
        OSStartHighRdy();                            /* Execute target specific code to start task     */
    e828:	0018c680 	call	18c68 <OSStartHighRdy>
    }
}
    e82c:	e037883a 	mov	sp,fp
    e830:	dfc00117 	ldw	ra,4(sp)
    e834:	df000017 	ldw	fp,0(sp)
    e838:	dec00204 	addi	sp,sp,8
    e83c:	f800283a 	ret

0000e840 <OSStatInit>:
*********************************************************************************************************
*/

#if OS_TASK_STAT_EN > 0
void  OSStatInit (void)
{
    e840:	defff904 	addi	sp,sp,-28
    e844:	dfc00615 	stw	ra,24(sp)
    e848:	df000515 	stw	fp,20(sp)
    e84c:	df000504 	addi	fp,sp,20
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
    e850:	e03ffb15 	stw	zero,-20(fp)
#endif



    OSTimeDly(2);                                /* Synchronize with clock tick                        */
    e854:	01000084 	movi	r4,2
    e858:	001536c0 	call	1536c <OSTimeDly>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    e85c:	0005303a 	rdctl	r2,status
    e860:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    e864:	e0fffc17 	ldw	r3,-16(fp)
    e868:	00bfff84 	movi	r2,-2
    e86c:	1884703a 	and	r2,r3,r2
    e870:	1001703a 	wrctl	status,r2
  
  return context;
    e874:	e0bffc17 	ldw	r2,-16(fp)
    OS_ENTER_CRITICAL();
    e878:	e0bffb15 	stw	r2,-20(fp)
    OSIdleCtr    = 0L;                           /* Clear idle counter                                 */
    e87c:	d0280215 	stw	zero,-24568(gp)
    e880:	e0bffb17 	ldw	r2,-20(fp)
    e884:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    e888:	e0bffd17 	ldw	r2,-12(fp)
    e88c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    OSTimeDly(OS_TICKS_PER_SEC / 10);            /* Determine MAX. idle counter value for 1/10 second  */
    e890:	0009883a 	mov	r4,zero
    e894:	001536c0 	call	1536c <OSTimeDly>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    e898:	0005303a 	rdctl	r2,status
    e89c:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    e8a0:	e0fffe17 	ldw	r3,-8(fp)
    e8a4:	00bfff84 	movi	r2,-2
    e8a8:	1884703a 	and	r2,r3,r2
    e8ac:	1001703a 	wrctl	status,r2
  
  return context;
    e8b0:	e0bffe17 	ldw	r2,-8(fp)
    OS_ENTER_CRITICAL();
    e8b4:	e0bffb15 	stw	r2,-20(fp)
    OSIdleCtrMax = OSIdleCtr;                    /* Store maximum idle counter count in 1/10 second    */
    e8b8:	d0a80217 	ldw	r2,-24568(gp)
    e8bc:	d0a80715 	stw	r2,-24548(gp)
    OSStatRdy    = OS_TRUE;
    e8c0:	00800044 	movi	r2,1
    e8c4:	d0a81305 	stb	r2,-24500(gp)
    e8c8:	e0bffb17 	ldw	r2,-20(fp)
    e8cc:	e0bfff15 	stw	r2,-4(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    e8d0:	e0bfff17 	ldw	r2,-4(fp)
    e8d4:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
}
    e8d8:	e037883a 	mov	sp,fp
    e8dc:	dfc00117 	ldw	ra,4(sp)
    e8e0:	df000017 	ldw	fp,0(sp)
    e8e4:	dec00204 	addi	sp,sp,8
    e8e8:	f800283a 	ret

0000e8ec <OSTimeTick>:
* Returns    : none
*********************************************************************************************************
*/

void  OSTimeTick (void)
{
    e8ec:	defff704 	addi	sp,sp,-36
    e8f0:	dfc00815 	stw	ra,32(sp)
    e8f4:	df000715 	stw	fp,28(sp)
    e8f8:	df000704 	addi	fp,sp,28
    OS_TCB    *ptcb;
#if OS_TICK_STEP_EN > 0
    BOOLEAN    step;
#endif
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
    e8fc:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_TIME_TICK_HOOK_EN > 0
    OSTimeTickHook();                                      /* Call user definable hook                     */
    e900:	0018e800 	call	18e80 <OSTimeTickHook>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    e904:	0005303a 	rdctl	r2,status
    e908:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    e90c:	e0fffc17 	ldw	r3,-16(fp)
    e910:	00bfff84 	movi	r2,-2
    e914:	1884703a 	and	r2,r3,r2
    e918:	1001703a 	wrctl	status,r2
  
  return context;
    e91c:	e0bffc17 	ldw	r2,-16(fp)
#endif
#if OS_TIME_GET_SET_EN > 0
    OS_ENTER_CRITICAL();                                   /* Update the 32-bit tick counter               */
    e920:	e0bffb15 	stw	r2,-20(fp)
    OSTime++;
    e924:	d0a81117 	ldw	r2,-24508(gp)
    e928:	10800044 	addi	r2,r2,1
    e92c:	d0a81115 	stw	r2,-24508(gp)
    e930:	e0bffb17 	ldw	r2,-20(fp)
    e934:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    e938:	e0bffd17 	ldw	r2,-12(fp)
    e93c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
#endif
    if (OSRunning == OS_TRUE) {
    e940:	d0a80143 	ldbu	r2,-24571(gp)
    e944:	10803fcc 	andi	r2,r2,255
    e948:	10800058 	cmpnei	r2,r2,1
    e94c:	1000691e 	bne	r2,zero,eaf4 <OSTimeTick+0x208>
#if OS_TICK_STEP_EN > 0
        switch (OSTickStepState) {                         /* Determine whether we need to process a tick  */
    e950:	d0a80503 	ldbu	r2,-24556(gp)
    e954:	10803fcc 	andi	r2,r2,255
    e958:	10c00060 	cmpeqi	r3,r2,1
    e95c:	1800061e 	bne	r3,zero,e978 <OSTimeTick+0x8c>
    e960:	10c000a0 	cmpeqi	r3,r2,2
    e964:	1800061e 	bne	r3,zero,e980 <OSTimeTick+0x94>
    e968:	10000a1e 	bne	r2,zero,e994 <OSTimeTick+0xa8>
            case OS_TICK_STEP_DIS:                         /* Yes, stepping is disabled                    */
                 step = OS_TRUE;
    e96c:	00800044 	movi	r2,1
    e970:	e0bffa05 	stb	r2,-24(fp)
                 break;
    e974:	00000b06 	br	e9a4 <OSTimeTick+0xb8>

            case OS_TICK_STEP_WAIT:                        /* No,  waiting for uC/OS-View to set ...       */
                 step = OS_FALSE;                          /*      .. OSTickStepState to OS_TICK_STEP_ONCE */
    e978:	e03ffa05 	stb	zero,-24(fp)
                 break;
    e97c:	00000906 	br	e9a4 <OSTimeTick+0xb8>

            case OS_TICK_STEP_ONCE:                        /* Yes, process tick once and wait for next ... */
                 step            = OS_TRUE;                /*      ... step command from uC/OS-View        */
    e980:	00800044 	movi	r2,1
    e984:	e0bffa05 	stb	r2,-24(fp)
                 OSTickStepState = OS_TICK_STEP_WAIT;
    e988:	00800044 	movi	r2,1
    e98c:	d0a80505 	stb	r2,-24556(gp)
                 break;
    e990:	00000406 	br	e9a4 <OSTimeTick+0xb8>

            default:                                       /* Invalid case, correct situation              */
                 step            = OS_TRUE;
    e994:	00800044 	movi	r2,1
    e998:	e0bffa05 	stb	r2,-24(fp)
                 OSTickStepState = OS_TICK_STEP_DIS;
    e99c:	d0280505 	stb	zero,-24556(gp)
                 break;
    e9a0:	0001883a 	nop
        }
        if (step == OS_FALSE) {                            /* Return if waiting for step command           */
    e9a4:	e0bffa03 	ldbu	r2,-24(fp)
    e9a8:	1000011e 	bne	r2,zero,e9b0 <OSTimeTick+0xc4>
            return;
    e9ac:	00005106 	br	eaf4 <OSTimeTick+0x208>
        }
#endif
        ptcb = OSTCBList;                                  /* Point at first TCB in TCB list               */
    e9b0:	d0a80417 	ldw	r2,-24560(gp)
    e9b4:	e0bff915 	stw	r2,-28(fp)
        while (ptcb->OSTCBPrio != OS_TASK_IDLE_PRIO) {     /* Go through all TCBs in TCB list              */
    e9b8:	00004906 	br	eae0 <OSTimeTick+0x1f4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    e9bc:	0005303a 	rdctl	r2,status
    e9c0:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    e9c4:	e0fffe17 	ldw	r3,-8(fp)
    e9c8:	00bfff84 	movi	r2,-2
    e9cc:	1884703a 	and	r2,r3,r2
    e9d0:	1001703a 	wrctl	status,r2
  
  return context;
    e9d4:	e0bffe17 	ldw	r2,-8(fp)
            OS_ENTER_CRITICAL();
    e9d8:	e0bffb15 	stw	r2,-20(fp)
            if (ptcb->OSTCBDly != 0) {                     /* No, Delayed or waiting for event with TO     */
    e9dc:	e0bff917 	ldw	r2,-28(fp)
    e9e0:	10800b8b 	ldhu	r2,46(r2)
    e9e4:	10bfffcc 	andi	r2,r2,65535
    e9e8:	10003626 	beq	r2,zero,eac4 <OSTimeTick+0x1d8>
                if (--ptcb->OSTCBDly == 0) {               /* Decrement nbr of ticks to end of delay       */
    e9ec:	e0bff917 	ldw	r2,-28(fp)
    e9f0:	10800b8b 	ldhu	r2,46(r2)
    e9f4:	10bfffc4 	addi	r2,r2,-1
    e9f8:	1007883a 	mov	r3,r2
    e9fc:	e0bff917 	ldw	r2,-28(fp)
    ea00:	10c00b8d 	sth	r3,46(r2)
    ea04:	e0bff917 	ldw	r2,-28(fp)
    ea08:	10800b8b 	ldhu	r2,46(r2)
    ea0c:	10bfffcc 	andi	r2,r2,65535
    ea10:	10002c1e 	bne	r2,zero,eac4 <OSTimeTick+0x1d8>
                                                           /* Check for timeout                            */
                    if ((ptcb->OSTCBStat & OS_STAT_PEND_ANY) != OS_STAT_RDY) {
    ea14:	e0bff917 	ldw	r2,-28(fp)
    ea18:	10800c03 	ldbu	r2,48(r2)
    ea1c:	10803fcc 	andi	r2,r2,255
    ea20:	10800dcc 	andi	r2,r2,55
    ea24:	10000b26 	beq	r2,zero,ea54 <OSTimeTick+0x168>
                        ptcb->OSTCBStat  &= ~(INT8U)OS_STAT_PEND_ANY;          /* Yes, Clear status flag   */
    ea28:	e0bff917 	ldw	r2,-28(fp)
    ea2c:	10c00c03 	ldbu	r3,48(r2)
    ea30:	00bff204 	movi	r2,-56
    ea34:	1884703a 	and	r2,r3,r2
    ea38:	1007883a 	mov	r3,r2
    ea3c:	e0bff917 	ldw	r2,-28(fp)
    ea40:	10c00c05 	stb	r3,48(r2)
                        ptcb->OSTCBStatPend = OS_STAT_PEND_TO;                 /* Indicate PEND timeout    */
    ea44:	e0bff917 	ldw	r2,-28(fp)
    ea48:	00c00044 	movi	r3,1
    ea4c:	10c00c45 	stb	r3,49(r2)
    ea50:	00000206 	br	ea5c <OSTimeTick+0x170>
                    } else {
                        ptcb->OSTCBStatPend = OS_STAT_PEND_OK;
    ea54:	e0bff917 	ldw	r2,-28(fp)
    ea58:	10000c45 	stb	zero,49(r2)
                    }

                    if ((ptcb->OSTCBStat & OS_STAT_SUSPEND) == OS_STAT_RDY) {  /* Is task suspended?       */
    ea5c:	e0bff917 	ldw	r2,-28(fp)
    ea60:	10800c03 	ldbu	r2,48(r2)
    ea64:	10803fcc 	andi	r2,r2,255
    ea68:	1080020c 	andi	r2,r2,8
    ea6c:	1000151e 	bne	r2,zero,eac4 <OSTimeTick+0x1d8>
                        OSRdyGrp               |= ptcb->OSTCBBitY;             /* No,  Make ready          */
    ea70:	e0bff917 	ldw	r2,-28(fp)
    ea74:	10c00d83 	ldbu	r3,54(r2)
    ea78:	d0a80d03 	ldbu	r2,-24524(gp)
    ea7c:	1884b03a 	or	r2,r3,r2
    ea80:	d0a80d05 	stb	r2,-24524(gp)
                        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
    ea84:	e0bff917 	ldw	r2,-28(fp)
    ea88:	10800d03 	ldbu	r2,52(r2)
    ea8c:	10c03fcc 	andi	r3,r2,255
    ea90:	e0bff917 	ldw	r2,-28(fp)
    ea94:	10800d03 	ldbu	r2,52(r2)
    ea98:	11003fcc 	andi	r4,r2,255
    ea9c:	d0a80d44 	addi	r2,gp,-24523
    eaa0:	2085883a 	add	r2,r4,r2
    eaa4:	11000003 	ldbu	r4,0(r2)
    eaa8:	e0bff917 	ldw	r2,-28(fp)
    eaac:	10800d43 	ldbu	r2,53(r2)
    eab0:	2084b03a 	or	r2,r4,r2
    eab4:	1009883a 	mov	r4,r2
    eab8:	d0a80d44 	addi	r2,gp,-24523
    eabc:	1885883a 	add	r2,r3,r2
    eac0:	11000005 	stb	r4,0(r2)
                    }
                }
            }
            ptcb = ptcb->OSTCBNext;                        /* Point at next TCB in TCB list                */
    eac4:	e0bff917 	ldw	r2,-28(fp)
    eac8:	10800517 	ldw	r2,20(r2)
    eacc:	e0bff915 	stw	r2,-28(fp)
    ead0:	e0bffb17 	ldw	r2,-20(fp)
    ead4:	e0bfff15 	stw	r2,-4(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    ead8:	e0bfff17 	ldw	r2,-4(fp)
    eadc:	1001703a 	wrctl	status,r2
        if (step == OS_FALSE) {                            /* Return if waiting for step command           */
            return;
        }
#endif
        ptcb = OSTCBList;                                  /* Point at first TCB in TCB list               */
        while (ptcb->OSTCBPrio != OS_TASK_IDLE_PRIO) {     /* Go through all TCBs in TCB list              */
    eae0:	e0bff917 	ldw	r2,-28(fp)
    eae4:	10800c83 	ldbu	r2,50(r2)
    eae8:	10803fcc 	andi	r2,r2,255
    eaec:	10800518 	cmpnei	r2,r2,20
    eaf0:	103fb21e 	bne	r2,zero,e9bc <__alt_mem_Flash_flash_data+0xf400e9bc>
            }
            ptcb = ptcb->OSTCBNext;                        /* Point at next TCB in TCB list                */
            OS_EXIT_CRITICAL();
        }
    }
}
    eaf4:	e037883a 	mov	sp,fp
    eaf8:	dfc00117 	ldw	ra,4(sp)
    eafc:	df000017 	ldw	fp,0(sp)
    eb00:	dec00204 	addi	sp,sp,8
    eb04:	f800283a 	ret

0000eb08 <OSVersion>:
* Returns    : the version number of uC/OS-II multiplied by 100.
*********************************************************************************************************
*/

INT16U  OSVersion (void)
{
    eb08:	deffff04 	addi	sp,sp,-4
    eb0c:	df000015 	stw	fp,0(sp)
    eb10:	d839883a 	mov	fp,sp
    return (OS_VERSION);
    eb14:	00804784 	movi	r2,286
}
    eb18:	e037883a 	mov	sp,fp
    eb1c:	df000017 	ldw	fp,0(sp)
    eb20:	dec00104 	addi	sp,sp,4
    eb24:	f800283a 	ret

0000eb28 <OS_Dummy>:
*********************************************************************************************************
*/

#if OS_TASK_DEL_EN > 0
void  OS_Dummy (void)
{
    eb28:	deffff04 	addi	sp,sp,-4
    eb2c:	df000015 	stw	fp,0(sp)
    eb30:	d839883a 	mov	fp,sp
}
    eb34:	e037883a 	mov	sp,fp
    eb38:	df000017 	ldw	fp,0(sp)
    eb3c:	dec00104 	addi	sp,sp,4
    eb40:	f800283a 	ret

0000eb44 <OS_EventTaskRdy>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
INT8U  OS_EventTaskRdy (OS_EVENT *pevent, void *pmsg, INT8U msk, INT8U pend_stat)
{
    eb44:	defff804 	addi	sp,sp,-32
    eb48:	dfc00715 	stw	ra,28(sp)
    eb4c:	df000615 	stw	fp,24(sp)
    eb50:	df000604 	addi	fp,sp,24
    eb54:	e13ffc15 	stw	r4,-16(fp)
    eb58:	e17ffd15 	stw	r5,-12(fp)
    eb5c:	3007883a 	mov	r3,r6
    eb60:	3805883a 	mov	r2,r7
    eb64:	e0fffe05 	stb	r3,-8(fp)
    eb68:	e0bfff05 	stb	r2,-4(fp)
    INT16U  *ptbl;
#endif


#if OS_LOWEST_PRIO <= 63
    y    = OSUnMapTbl[pevent->OSEventGrp];              /* Find HPT waiting for message                */
    eb6c:	e0bffc17 	ldw	r2,-16(fp)
    eb70:	10800283 	ldbu	r2,10(r2)
    eb74:	10c03fcc 	andi	r3,r2,255
    eb78:	008000b4 	movhi	r2,2
    eb7c:	10a64804 	addi	r2,r2,-26336
    eb80:	10c5883a 	add	r2,r2,r3
    eb84:	10800003 	ldbu	r2,0(r2)
    eb88:	e0bffa05 	stb	r2,-24(fp)
    x    = OSUnMapTbl[pevent->OSEventTbl[y]];
    eb8c:	e0bffa03 	ldbu	r2,-24(fp)
    eb90:	e0fffc17 	ldw	r3,-16(fp)
    eb94:	1885883a 	add	r2,r3,r2
    eb98:	10800204 	addi	r2,r2,8
    eb9c:	108000c3 	ldbu	r2,3(r2)
    eba0:	10c03fcc 	andi	r3,r2,255
    eba4:	008000b4 	movhi	r2,2
    eba8:	10a64804 	addi	r2,r2,-26336
    ebac:	10c5883a 	add	r2,r2,r3
    ebb0:	10800003 	ldbu	r2,0(r2)
    ebb4:	e0bffa45 	stb	r2,-23(fp)
    prio = (INT8U)((y << 3) + x);                       /* Find priority of task getting the msg       */
    ebb8:	e0bffa03 	ldbu	r2,-24(fp)
    ebbc:	100490fa 	slli	r2,r2,3
    ebc0:	1007883a 	mov	r3,r2
    ebc4:	e0bffa43 	ldbu	r2,-23(fp)
    ebc8:	1885883a 	add	r2,r3,r2
    ebcc:	e0bffa85 	stb	r2,-22(fp)
        x = OSUnMapTbl[(*ptbl >> 8) & 0xFF] + 8;
    }
    prio = (INT8U)((y << 4) + x);                       /* Find priority of task getting the msg       */
#endif

    ptcb                  =  OSTCBPrioTbl[prio];        /* Point to this task's OS_TCB                 */
    ebd0:	e0fffa83 	ldbu	r3,-22(fp)
    ebd4:	008000b4 	movhi	r2,2
    ebd8:	109b2204 	addi	r2,r2,27784
    ebdc:	18c7883a 	add	r3,r3,r3
    ebe0:	18c7883a 	add	r3,r3,r3
    ebe4:	10c5883a 	add	r2,r2,r3
    ebe8:	10800017 	ldw	r2,0(r2)
    ebec:	e0bffb15 	stw	r2,-20(fp)
    ptcb->OSTCBDly        =  0;                         /* Prevent OSTimeTick() from readying task     */
    ebf0:	e0bffb17 	ldw	r2,-20(fp)
    ebf4:	10000b8d 	sth	zero,46(r2)
#if ((OS_Q_EN > 0) && (OS_MAX_QS > 0)) || (OS_MBOX_EN > 0)
    ptcb->OSTCBMsg        =  pmsg;                      /* Send message directly to waiting task       */
    ebf8:	e0bffb17 	ldw	r2,-20(fp)
    ebfc:	e0fffd17 	ldw	r3,-12(fp)
    ec00:	10c00915 	stw	r3,36(r2)
#else
    pmsg                  =  pmsg;                      /* Prevent compiler warning if not used        */
#endif
    ptcb->OSTCBStat      &= ~msk;                       /* Clear bit associated with event type        */
    ec04:	e0bffb17 	ldw	r2,-20(fp)
    ec08:	10800c03 	ldbu	r2,48(r2)
    ec0c:	1007883a 	mov	r3,r2
    ec10:	e0bffe03 	ldbu	r2,-8(fp)
    ec14:	0084303a 	nor	r2,zero,r2
    ec18:	1884703a 	and	r2,r3,r2
    ec1c:	1007883a 	mov	r3,r2
    ec20:	e0bffb17 	ldw	r2,-20(fp)
    ec24:	10c00c05 	stb	r3,48(r2)
    ptcb->OSTCBStatPend   =  pend_stat;                 /* Set pend status of post or abort            */
    ec28:	e0bffb17 	ldw	r2,-20(fp)
    ec2c:	e0ffff03 	ldbu	r3,-4(fp)
    ec30:	10c00c45 	stb	r3,49(r2)
                                                        /* See if task is ready (could be susp'd)      */
    if ((ptcb->OSTCBStat &   OS_STAT_SUSPEND) == OS_STAT_RDY) {
    ec34:	e0bffb17 	ldw	r2,-20(fp)
    ec38:	10800c03 	ldbu	r2,48(r2)
    ec3c:	10803fcc 	andi	r2,r2,255
    ec40:	1080020c 	andi	r2,r2,8
    ec44:	1000111e 	bne	r2,zero,ec8c <OS_EventTaskRdy+0x148>
        OSRdyGrp         |=  ptcb->OSTCBBitY;           /* Put task in the ready to run list           */
    ec48:	e0bffb17 	ldw	r2,-20(fp)
    ec4c:	10c00d83 	ldbu	r3,54(r2)
    ec50:	d0a80d03 	ldbu	r2,-24524(gp)
    ec54:	1884b03a 	or	r2,r3,r2
    ec58:	d0a80d05 	stb	r2,-24524(gp)
        OSRdyTbl[y]      |=  ptcb->OSTCBBitX;
    ec5c:	e0fffa03 	ldbu	r3,-24(fp)
    ec60:	e13ffa03 	ldbu	r4,-24(fp)
    ec64:	d0a80d44 	addi	r2,gp,-24523
    ec68:	2085883a 	add	r2,r4,r2
    ec6c:	11000003 	ldbu	r4,0(r2)
    ec70:	e0bffb17 	ldw	r2,-20(fp)
    ec74:	10800d43 	ldbu	r2,53(r2)
    ec78:	2084b03a 	or	r2,r4,r2
    ec7c:	1009883a 	mov	r4,r2
    ec80:	d0a80d44 	addi	r2,gp,-24523
    ec84:	1885883a 	add	r2,r3,r2
    ec88:	11000005 	stb	r4,0(r2)
    }

    OS_EventTaskRemove(ptcb, pevent);                   /* Remove this task from event   wait list     */
    ec8c:	e13ffb17 	ldw	r4,-20(fp)
    ec90:	e17ffc17 	ldw	r5,-16(fp)
    ec94:	000ef340 	call	ef34 <OS_EventTaskRemove>
#if (OS_EVENT_MULTI_EN > 0)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {   /* Remove this task from events' wait lists    */
    ec98:	e0bffb17 	ldw	r2,-20(fp)
    ec9c:	10800817 	ldw	r2,32(r2)
    eca0:	10000826 	beq	r2,zero,ecc4 <OS_EventTaskRdy+0x180>
        OS_EventTaskRemoveMulti(ptcb, ptcb->OSTCBEventMultiPtr);
    eca4:	e0bffb17 	ldw	r2,-20(fp)
    eca8:	10800817 	ldw	r2,32(r2)
    ecac:	e13ffb17 	ldw	r4,-20(fp)
    ecb0:	100b883a 	mov	r5,r2
    ecb4:	000efe80 	call	efe8 <OS_EventTaskRemoveMulti>
        ptcb->OSTCBEventPtr       = (OS_EVENT  *)pevent;/* Return event as first multi-pend event ready*/
    ecb8:	e0bffb17 	ldw	r2,-20(fp)
    ecbc:	e0fffc17 	ldw	r3,-16(fp)
    ecc0:	10c00715 	stw	r3,28(r2)
    }
#endif

    return (prio);
    ecc4:	e0bffa83 	ldbu	r2,-22(fp)
}
    ecc8:	e037883a 	mov	sp,fp
    eccc:	dfc00117 	ldw	ra,4(sp)
    ecd0:	df000017 	ldw	fp,0(sp)
    ecd4:	dec00204 	addi	sp,sp,8
    ecd8:	f800283a 	ret

0000ecdc <OS_EventTaskWait>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
void  OS_EventTaskWait (OS_EVENT *pevent)
{
    ecdc:	defffd04 	addi	sp,sp,-12
    ece0:	df000215 	stw	fp,8(sp)
    ece4:	df000204 	addi	fp,sp,8
    ece8:	e13fff15 	stw	r4,-4(fp)
    INT8U  y;


    OSTCBCur->OSTCBEventPtr               = pevent;                 /* Store ptr to ECB in TCB         */
    ecec:	d0a81017 	ldw	r2,-24512(gp)
    ecf0:	e0ffff17 	ldw	r3,-4(fp)
    ecf4:	10c00715 	stw	r3,28(r2)

    pevent->OSEventTbl[OSTCBCur->OSTCBY] |= OSTCBCur->OSTCBBitX;    /* Put task in waiting list        */
    ecf8:	d0a81017 	ldw	r2,-24512(gp)
    ecfc:	10800d03 	ldbu	r2,52(r2)
    ed00:	10803fcc 	andi	r2,r2,255
    ed04:	d0e81017 	ldw	r3,-24512(gp)
    ed08:	18c00d03 	ldbu	r3,52(r3)
    ed0c:	18c03fcc 	andi	r3,r3,255
    ed10:	e13fff17 	ldw	r4,-4(fp)
    ed14:	20c7883a 	add	r3,r4,r3
    ed18:	18c00204 	addi	r3,r3,8
    ed1c:	190000c3 	ldbu	r4,3(r3)
    ed20:	d0e81017 	ldw	r3,-24512(gp)
    ed24:	18c00d43 	ldbu	r3,53(r3)
    ed28:	20c6b03a 	or	r3,r4,r3
    ed2c:	1809883a 	mov	r4,r3
    ed30:	e0ffff17 	ldw	r3,-4(fp)
    ed34:	1885883a 	add	r2,r3,r2
    ed38:	10800204 	addi	r2,r2,8
    ed3c:	110000c5 	stb	r4,3(r2)
    pevent->OSEventGrp                   |= OSTCBCur->OSTCBBitY;
    ed40:	e0bfff17 	ldw	r2,-4(fp)
    ed44:	10c00283 	ldbu	r3,10(r2)
    ed48:	d0a81017 	ldw	r2,-24512(gp)
    ed4c:	10800d83 	ldbu	r2,54(r2)
    ed50:	1884b03a 	or	r2,r3,r2
    ed54:	1007883a 	mov	r3,r2
    ed58:	e0bfff17 	ldw	r2,-4(fp)
    ed5c:	10c00285 	stb	r3,10(r2)

    y             =  OSTCBCur->OSTCBY;            /* Task no longer ready                              */
    ed60:	d0a81017 	ldw	r2,-24512(gp)
    ed64:	10800d03 	ldbu	r2,52(r2)
    ed68:	e0bffe05 	stb	r2,-8(fp)
    OSRdyTbl[y]  &= ~OSTCBCur->OSTCBBitX;
    ed6c:	e0fffe03 	ldbu	r3,-8(fp)
    ed70:	e13ffe03 	ldbu	r4,-8(fp)
    ed74:	d0a80d44 	addi	r2,gp,-24523
    ed78:	2085883a 	add	r2,r4,r2
    ed7c:	10800003 	ldbu	r2,0(r2)
    ed80:	1009883a 	mov	r4,r2
    ed84:	d0a81017 	ldw	r2,-24512(gp)
    ed88:	10800d43 	ldbu	r2,53(r2)
    ed8c:	0084303a 	nor	r2,zero,r2
    ed90:	2084703a 	and	r2,r4,r2
    ed94:	1009883a 	mov	r4,r2
    ed98:	d0a80d44 	addi	r2,gp,-24523
    ed9c:	1885883a 	add	r2,r3,r2
    eda0:	11000005 	stb	r4,0(r2)
    if (OSRdyTbl[y] == 0) {
    eda4:	e0fffe03 	ldbu	r3,-8(fp)
    eda8:	d0a80d44 	addi	r2,gp,-24523
    edac:	1885883a 	add	r2,r3,r2
    edb0:	10800003 	ldbu	r2,0(r2)
    edb4:	10803fcc 	andi	r2,r2,255
    edb8:	1000071e 	bne	r2,zero,edd8 <OS_EventTaskWait+0xfc>
        OSRdyGrp &= ~OSTCBCur->OSTCBBitY;         /* Clear event grp bit if this was only task pending */
    edbc:	d0a81017 	ldw	r2,-24512(gp)
    edc0:	10800d83 	ldbu	r2,54(r2)
    edc4:	0084303a 	nor	r2,zero,r2
    edc8:	1007883a 	mov	r3,r2
    edcc:	d0a80d03 	ldbu	r2,-24524(gp)
    edd0:	1884703a 	and	r2,r3,r2
    edd4:	d0a80d05 	stb	r2,-24524(gp)
    }
}
    edd8:	e037883a 	mov	sp,fp
    eddc:	df000017 	ldw	fp,0(sp)
    ede0:	dec00104 	addi	sp,sp,4
    ede4:	f800283a 	ret

0000ede8 <OS_EventTaskWaitMulti>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if ((OS_EVENT_EN) && (OS_EVENT_MULTI_EN > 0))
void  OS_EventTaskWaitMulti (OS_EVENT **pevents_wait)
{
    ede8:	defffb04 	addi	sp,sp,-20
    edec:	df000415 	stw	fp,16(sp)
    edf0:	df000404 	addi	fp,sp,16
    edf4:	e13fff15 	stw	r4,-4(fp)
    OS_EVENT **pevents;
    OS_EVENT  *pevent;
    INT8U      y;


    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;
    edf8:	d0a81017 	ldw	r2,-24512(gp)
    edfc:	10000715 	stw	zero,28(r2)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)pevents_wait;       /* Store ptr to ECBs in TCB        */
    ee00:	d0a81017 	ldw	r2,-24512(gp)
    ee04:	e0ffff17 	ldw	r3,-4(fp)
    ee08:	10c00815 	stw	r3,32(r2)

    pevents =  pevents_wait;
    ee0c:	e0bfff17 	ldw	r2,-4(fp)
    ee10:	e0bffc15 	stw	r2,-16(fp)
    pevent  = *pevents;
    ee14:	e0bffc17 	ldw	r2,-16(fp)
    ee18:	10800017 	ldw	r2,0(r2)
    ee1c:	e0bffd15 	stw	r2,-12(fp)
    while (pevent != (OS_EVENT *)0) {                               /* Put task in waiting lists       */
    ee20:	00002006 	br	eea4 <OS_EventTaskWaitMulti+0xbc>
        pevent->OSEventTbl[OSTCBCur->OSTCBY] |= OSTCBCur->OSTCBBitX;
    ee24:	d0a81017 	ldw	r2,-24512(gp)
    ee28:	10800d03 	ldbu	r2,52(r2)
    ee2c:	10803fcc 	andi	r2,r2,255
    ee30:	d0e81017 	ldw	r3,-24512(gp)
    ee34:	18c00d03 	ldbu	r3,52(r3)
    ee38:	18c03fcc 	andi	r3,r3,255
    ee3c:	e13ffd17 	ldw	r4,-12(fp)
    ee40:	20c7883a 	add	r3,r4,r3
    ee44:	18c00204 	addi	r3,r3,8
    ee48:	190000c3 	ldbu	r4,3(r3)
    ee4c:	d0e81017 	ldw	r3,-24512(gp)
    ee50:	18c00d43 	ldbu	r3,53(r3)
    ee54:	20c6b03a 	or	r3,r4,r3
    ee58:	1809883a 	mov	r4,r3
    ee5c:	e0fffd17 	ldw	r3,-12(fp)
    ee60:	1885883a 	add	r2,r3,r2
    ee64:	10800204 	addi	r2,r2,8
    ee68:	110000c5 	stb	r4,3(r2)
        pevent->OSEventGrp                   |= OSTCBCur->OSTCBBitY;
    ee6c:	e0bffd17 	ldw	r2,-12(fp)
    ee70:	10c00283 	ldbu	r3,10(r2)
    ee74:	d0a81017 	ldw	r2,-24512(gp)
    ee78:	10800d83 	ldbu	r2,54(r2)
    ee7c:	1884b03a 	or	r2,r3,r2
    ee80:	1007883a 	mov	r3,r2
    ee84:	e0bffd17 	ldw	r2,-12(fp)
    ee88:	10c00285 	stb	r3,10(r2)
        pevents++;
    ee8c:	e0bffc17 	ldw	r2,-16(fp)
    ee90:	10800104 	addi	r2,r2,4
    ee94:	e0bffc15 	stw	r2,-16(fp)
        pevent = *pevents;
    ee98:	e0bffc17 	ldw	r2,-16(fp)
    ee9c:	10800017 	ldw	r2,0(r2)
    eea0:	e0bffd15 	stw	r2,-12(fp)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)pevents_wait;       /* Store ptr to ECBs in TCB        */

    pevents =  pevents_wait;
    pevent  = *pevents;
    while (pevent != (OS_EVENT *)0) {                               /* Put task in waiting lists       */
    eea4:	e0bffd17 	ldw	r2,-12(fp)
    eea8:	103fde1e 	bne	r2,zero,ee24 <__alt_mem_Flash_flash_data+0xf400ee24>
        pevent->OSEventGrp                   |= OSTCBCur->OSTCBBitY;
        pevents++;
        pevent = *pevents;
    }

    y             =  OSTCBCur->OSTCBY;            /* Task no longer ready                              */
    eeac:	d0a81017 	ldw	r2,-24512(gp)
    eeb0:	10800d03 	ldbu	r2,52(r2)
    eeb4:	e0bffe05 	stb	r2,-8(fp)
    OSRdyTbl[y]  &= ~OSTCBCur->OSTCBBitX;
    eeb8:	e0fffe03 	ldbu	r3,-8(fp)
    eebc:	e13ffe03 	ldbu	r4,-8(fp)
    eec0:	d0a80d44 	addi	r2,gp,-24523
    eec4:	2085883a 	add	r2,r4,r2
    eec8:	10800003 	ldbu	r2,0(r2)
    eecc:	1009883a 	mov	r4,r2
    eed0:	d0a81017 	ldw	r2,-24512(gp)
    eed4:	10800d43 	ldbu	r2,53(r2)
    eed8:	0084303a 	nor	r2,zero,r2
    eedc:	2084703a 	and	r2,r4,r2
    eee0:	1009883a 	mov	r4,r2
    eee4:	d0a80d44 	addi	r2,gp,-24523
    eee8:	1885883a 	add	r2,r3,r2
    eeec:	11000005 	stb	r4,0(r2)
    if (OSRdyTbl[y] == 0) {
    eef0:	e0fffe03 	ldbu	r3,-8(fp)
    eef4:	d0a80d44 	addi	r2,gp,-24523
    eef8:	1885883a 	add	r2,r3,r2
    eefc:	10800003 	ldbu	r2,0(r2)
    ef00:	10803fcc 	andi	r2,r2,255
    ef04:	1000071e 	bne	r2,zero,ef24 <OS_EventTaskWaitMulti+0x13c>
        OSRdyGrp &= ~OSTCBCur->OSTCBBitY;         /* Clear event grp bit if this was only task pending */
    ef08:	d0a81017 	ldw	r2,-24512(gp)
    ef0c:	10800d83 	ldbu	r2,54(r2)
    ef10:	0084303a 	nor	r2,zero,r2
    ef14:	1007883a 	mov	r3,r2
    ef18:	d0a80d03 	ldbu	r2,-24524(gp)
    ef1c:	1884703a 	and	r2,r3,r2
    ef20:	d0a80d05 	stb	r2,-24524(gp)
    }
}
    ef24:	e037883a 	mov	sp,fp
    ef28:	df000017 	ldw	fp,0(sp)
    ef2c:	dec00104 	addi	sp,sp,4
    ef30:	f800283a 	ret

0000ef34 <OS_EventTaskRemove>:
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
void  OS_EventTaskRemove (OS_TCB   *ptcb,
                          OS_EVENT *pevent)
{
    ef34:	defffc04 	addi	sp,sp,-16
    ef38:	df000315 	stw	fp,12(sp)
    ef3c:	df000304 	addi	fp,sp,12
    ef40:	e13ffe15 	stw	r4,-8(fp)
    ef44:	e17fff15 	stw	r5,-4(fp)
    INT8U  y;


    y                       =  ptcb->OSTCBY;
    ef48:	e0bffe17 	ldw	r2,-8(fp)
    ef4c:	10800d03 	ldbu	r2,52(r2)
    ef50:	e0bffd05 	stb	r2,-12(fp)
    pevent->OSEventTbl[y]  &= ~ptcb->OSTCBBitX;         /* Remove task from wait list                  */
    ef54:	e0bffd03 	ldbu	r2,-12(fp)
    ef58:	e0fffd03 	ldbu	r3,-12(fp)
    ef5c:	e13fff17 	ldw	r4,-4(fp)
    ef60:	20c7883a 	add	r3,r4,r3
    ef64:	18c00204 	addi	r3,r3,8
    ef68:	18c000c3 	ldbu	r3,3(r3)
    ef6c:	1809883a 	mov	r4,r3
    ef70:	e0fffe17 	ldw	r3,-8(fp)
    ef74:	18c00d43 	ldbu	r3,53(r3)
    ef78:	00c6303a 	nor	r3,zero,r3
    ef7c:	20c6703a 	and	r3,r4,r3
    ef80:	1809883a 	mov	r4,r3
    ef84:	e0ffff17 	ldw	r3,-4(fp)
    ef88:	1885883a 	add	r2,r3,r2
    ef8c:	10800204 	addi	r2,r2,8
    ef90:	110000c5 	stb	r4,3(r2)
    if (pevent->OSEventTbl[y] == 0) {
    ef94:	e0bffd03 	ldbu	r2,-12(fp)
    ef98:	e0ffff17 	ldw	r3,-4(fp)
    ef9c:	1885883a 	add	r2,r3,r2
    efa0:	10800204 	addi	r2,r2,8
    efa4:	108000c3 	ldbu	r2,3(r2)
    efa8:	10803fcc 	andi	r2,r2,255
    efac:	10000a1e 	bne	r2,zero,efd8 <OS_EventTaskRemove+0xa4>
        pevent->OSEventGrp &= ~ptcb->OSTCBBitY;
    efb0:	e0bfff17 	ldw	r2,-4(fp)
    efb4:	10800283 	ldbu	r2,10(r2)
    efb8:	1007883a 	mov	r3,r2
    efbc:	e0bffe17 	ldw	r2,-8(fp)
    efc0:	10800d83 	ldbu	r2,54(r2)
    efc4:	0084303a 	nor	r2,zero,r2
    efc8:	1884703a 	and	r2,r3,r2
    efcc:	1007883a 	mov	r3,r2
    efd0:	e0bfff17 	ldw	r2,-4(fp)
    efd4:	10c00285 	stb	r3,10(r2)
    }
}
    efd8:	e037883a 	mov	sp,fp
    efdc:	df000017 	ldw	fp,0(sp)
    efe0:	dec00104 	addi	sp,sp,4
    efe4:	f800283a 	ret

0000efe8 <OS_EventTaskRemoveMulti>:
*********************************************************************************************************
*/
#if ((OS_EVENT_EN) && (OS_EVENT_MULTI_EN > 0))
void  OS_EventTaskRemoveMulti (OS_TCB    *ptcb,
                               OS_EVENT **pevents_multi)
{
    efe8:	defffa04 	addi	sp,sp,-24
    efec:	df000515 	stw	fp,20(sp)
    eff0:	df000504 	addi	fp,sp,20
    eff4:	e13ffe15 	stw	r4,-8(fp)
    eff8:	e17fff15 	stw	r5,-4(fp)
    INT16U     bity;
    INT16U     bitx;
#endif


    y       =  ptcb->OSTCBY;
    effc:	e0bffe17 	ldw	r2,-8(fp)
    f000:	10800d03 	ldbu	r2,52(r2)
    f004:	e0bffd05 	stb	r2,-12(fp)
    bity    =  ptcb->OSTCBBitY;
    f008:	e0bffe17 	ldw	r2,-8(fp)
    f00c:	10800d83 	ldbu	r2,54(r2)
    f010:	e0bffd45 	stb	r2,-11(fp)
    bitx    =  ptcb->OSTCBBitX;
    f014:	e0bffe17 	ldw	r2,-8(fp)
    f018:	10800d43 	ldbu	r2,53(r2)
    f01c:	e0bffd85 	stb	r2,-10(fp)
    pevents =  pevents_multi;
    f020:	e0bfff17 	ldw	r2,-4(fp)
    f024:	e0bffb15 	stw	r2,-20(fp)
    pevent  = *pevents;
    f028:	e0bffb17 	ldw	r2,-20(fp)
    f02c:	10800017 	ldw	r2,0(r2)
    f030:	e0bffc15 	stw	r2,-16(fp)
    while (pevent != (OS_EVENT *)0) {                   /* Remove task from all events' wait lists     */
    f034:	00002506 	br	f0cc <OS_EventTaskRemoveMulti+0xe4>
        pevent->OSEventTbl[y]  &= ~bitx;
    f038:	e0bffd03 	ldbu	r2,-12(fp)
    f03c:	e0fffd03 	ldbu	r3,-12(fp)
    f040:	e13ffc17 	ldw	r4,-16(fp)
    f044:	20c7883a 	add	r3,r4,r3
    f048:	18c00204 	addi	r3,r3,8
    f04c:	18c000c3 	ldbu	r3,3(r3)
    f050:	1809883a 	mov	r4,r3
    f054:	e0fffd83 	ldbu	r3,-10(fp)
    f058:	00c6303a 	nor	r3,zero,r3
    f05c:	20c6703a 	and	r3,r4,r3
    f060:	1809883a 	mov	r4,r3
    f064:	e0fffc17 	ldw	r3,-16(fp)
    f068:	1885883a 	add	r2,r3,r2
    f06c:	10800204 	addi	r2,r2,8
    f070:	110000c5 	stb	r4,3(r2)
        if (pevent->OSEventTbl[y] == 0) {
    f074:	e0bffd03 	ldbu	r2,-12(fp)
    f078:	e0fffc17 	ldw	r3,-16(fp)
    f07c:	1885883a 	add	r2,r3,r2
    f080:	10800204 	addi	r2,r2,8
    f084:	108000c3 	ldbu	r2,3(r2)
    f088:	10803fcc 	andi	r2,r2,255
    f08c:	1000091e 	bne	r2,zero,f0b4 <OS_EventTaskRemoveMulti+0xcc>
            pevent->OSEventGrp &= ~bity;
    f090:	e0bffc17 	ldw	r2,-16(fp)
    f094:	10800283 	ldbu	r2,10(r2)
    f098:	1007883a 	mov	r3,r2
    f09c:	e0bffd43 	ldbu	r2,-11(fp)
    f0a0:	0084303a 	nor	r2,zero,r2
    f0a4:	1884703a 	and	r2,r3,r2
    f0a8:	1007883a 	mov	r3,r2
    f0ac:	e0bffc17 	ldw	r2,-16(fp)
    f0b0:	10c00285 	stb	r3,10(r2)
        }
        pevents++;
    f0b4:	e0bffb17 	ldw	r2,-20(fp)
    f0b8:	10800104 	addi	r2,r2,4
    f0bc:	e0bffb15 	stw	r2,-20(fp)
        pevent = *pevents;
    f0c0:	e0bffb17 	ldw	r2,-20(fp)
    f0c4:	10800017 	ldw	r2,0(r2)
    f0c8:	e0bffc15 	stw	r2,-16(fp)
    y       =  ptcb->OSTCBY;
    bity    =  ptcb->OSTCBBitY;
    bitx    =  ptcb->OSTCBBitX;
    pevents =  pevents_multi;
    pevent  = *pevents;
    while (pevent != (OS_EVENT *)0) {                   /* Remove task from all events' wait lists     */
    f0cc:	e0bffc17 	ldw	r2,-16(fp)
    f0d0:	103fd91e 	bne	r2,zero,f038 <__alt_mem_Flash_flash_data+0xf400f038>
            pevent->OSEventGrp &= ~bity;
        }
        pevents++;
        pevent = *pevents;
    }
}
    f0d4:	e037883a 	mov	sp,fp
    f0d8:	df000017 	ldw	fp,0(sp)
    f0dc:	dec00104 	addi	sp,sp,4
    f0e0:	f800283a 	ret

0000f0e4 <OS_EventWaitListInit>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
void  OS_EventWaitListInit (OS_EVENT *pevent)
{
    f0e4:	defffc04 	addi	sp,sp,-16
    f0e8:	df000315 	stw	fp,12(sp)
    f0ec:	df000304 	addi	fp,sp,12
    f0f0:	e13fff15 	stw	r4,-4(fp)
    INT16U *ptbl;
#endif
    INT8U   i;


    pevent->OSEventGrp = 0;                      /* No task waiting on event                           */
    f0f4:	e0bfff17 	ldw	r2,-4(fp)
    f0f8:	10000285 	stb	zero,10(r2)
    ptbl               = &pevent->OSEventTbl[0];
    f0fc:	e0bfff17 	ldw	r2,-4(fp)
    f100:	108002c4 	addi	r2,r2,11
    f104:	e0bffd15 	stw	r2,-12(fp)

    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
    f108:	e03ffe05 	stb	zero,-8(fp)
    f10c:	00000706 	br	f12c <OS_EventWaitListInit+0x48>
        *ptbl++ = 0;
    f110:	e0bffd17 	ldw	r2,-12(fp)
    f114:	10c00044 	addi	r3,r2,1
    f118:	e0fffd15 	stw	r3,-12(fp)
    f11c:	10000005 	stb	zero,0(r2)


    pevent->OSEventGrp = 0;                      /* No task waiting on event                           */
    ptbl               = &pevent->OSEventTbl[0];

    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
    f120:	e0bffe03 	ldbu	r2,-8(fp)
    f124:	10800044 	addi	r2,r2,1
    f128:	e0bffe05 	stb	r2,-8(fp)
    f12c:	e0bffe03 	ldbu	r2,-8(fp)
    f130:	108000f0 	cmpltui	r2,r2,3
    f134:	103ff61e 	bne	r2,zero,f110 <__alt_mem_Flash_flash_data+0xf400f110>
        *ptbl++ = 0;
    }
}
    f138:	e037883a 	mov	sp,fp
    f13c:	df000017 	ldw	fp,0(sp)
    f140:	dec00104 	addi	sp,sp,4
    f144:	f800283a 	ret

0000f148 <OS_InitEventList>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitEventList (void)
{
    f148:	defffb04 	addi	sp,sp,-20
    f14c:	dfc00415 	stw	ra,16(sp)
    f150:	df000315 	stw	fp,12(sp)
    f154:	df000304 	addi	fp,sp,12
    INT16U     i;
    OS_EVENT  *pevent1;
    OS_EVENT  *pevent2;


    OS_MemClr((INT8U *)&OSEventTbl[0], sizeof(OSEventTbl)); /* Clear the event table                   */
    f158:	010000b4 	movhi	r4,2
    f15c:	21170e04 	addi	r4,r4,23608
    f160:	0142d004 	movi	r5,2880
    f164:	000f4a80 	call	f4a8 <OS_MemClr>
    pevent1 = &OSEventTbl[0];
    f168:	008000b4 	movhi	r2,2
    f16c:	10970e04 	addi	r2,r2,23608
    f170:	e0bffe15 	stw	r2,-8(fp)
    pevent2 = &OSEventTbl[1];
    f174:	008000b4 	movhi	r2,2
    f178:	10971a04 	addi	r2,r2,23656
    f17c:	e0bfff15 	stw	r2,-4(fp)
    for (i = 0; i < (OS_MAX_EVENTS - 1); i++) {             /* Init. list of free EVENT control blocks */
    f180:	e03ffd0d 	sth	zero,-12(fp)
    f184:	00001306 	br	f1d4 <OS_InitEventList+0x8c>
        pevent1->OSEventType    = OS_EVENT_TYPE_UNUSED;
    f188:	e0bffe17 	ldw	r2,-8(fp)
    f18c:	10000005 	stb	zero,0(r2)
        pevent1->OSEventPtr     = pevent2;
    f190:	e0bffe17 	ldw	r2,-8(fp)
    f194:	e0ffff17 	ldw	r3,-4(fp)
    f198:	10c00115 	stw	r3,4(r2)
#if OS_EVENT_NAME_SIZE > 1
        pevent1->OSEventName[0] = '?';                      /* Unknown name                            */
    f19c:	e0bffe17 	ldw	r2,-8(fp)
    f1a0:	00c00fc4 	movi	r3,63
    f1a4:	10c00385 	stb	r3,14(r2)
        pevent1->OSEventName[1] = OS_ASCII_NUL;
    f1a8:	e0bffe17 	ldw	r2,-8(fp)
    f1ac:	100003c5 	stb	zero,15(r2)
#endif
        pevent1++;
    f1b0:	e0bffe17 	ldw	r2,-8(fp)
    f1b4:	10800c04 	addi	r2,r2,48
    f1b8:	e0bffe15 	stw	r2,-8(fp)
        pevent2++;
    f1bc:	e0bfff17 	ldw	r2,-4(fp)
    f1c0:	10800c04 	addi	r2,r2,48
    f1c4:	e0bfff15 	stw	r2,-4(fp)


    OS_MemClr((INT8U *)&OSEventTbl[0], sizeof(OSEventTbl)); /* Clear the event table                   */
    pevent1 = &OSEventTbl[0];
    pevent2 = &OSEventTbl[1];
    for (i = 0; i < (OS_MAX_EVENTS - 1); i++) {             /* Init. list of free EVENT control blocks */
    f1c8:	e0bffd0b 	ldhu	r2,-12(fp)
    f1cc:	10800044 	addi	r2,r2,1
    f1d0:	e0bffd0d 	sth	r2,-12(fp)
    f1d4:	e0bffd0b 	ldhu	r2,-12(fp)
    f1d8:	10800ef0 	cmpltui	r2,r2,59
    f1dc:	103fea1e 	bne	r2,zero,f188 <__alt_mem_Flash_flash_data+0xf400f188>
        pevent1->OSEventName[1] = OS_ASCII_NUL;
#endif
        pevent1++;
        pevent2++;
    }
    pevent1->OSEventType            = OS_EVENT_TYPE_UNUSED;
    f1e0:	e0bffe17 	ldw	r2,-8(fp)
    f1e4:	10000005 	stb	zero,0(r2)
    pevent1->OSEventPtr             = (OS_EVENT *)0;
    f1e8:	e0bffe17 	ldw	r2,-8(fp)
    f1ec:	10000115 	stw	zero,4(r2)
#if OS_EVENT_NAME_SIZE > 1
    pevent1->OSEventName[0]         = '?';
    f1f0:	e0bffe17 	ldw	r2,-8(fp)
    f1f4:	00c00fc4 	movi	r3,63
    f1f8:	10c00385 	stb	r3,14(r2)
    pevent1->OSEventName[1]         = OS_ASCII_NUL;
    f1fc:	e0bffe17 	ldw	r2,-8(fp)
    f200:	100003c5 	stb	zero,15(r2)
#endif
    OSEventFreeList                 = &OSEventTbl[0];
    f204:	008000b4 	movhi	r2,2
    f208:	10970e04 	addi	r2,r2,23608
    f20c:	d0a80e15 	stw	r2,-24520(gp)
    OSEventFreeList->OSEventName[0] = '?';                  /* Unknown name                            */
    OSEventFreeList->OSEventName[1] = OS_ASCII_NUL;
#endif
#endif
#endif
}
    f210:	e037883a 	mov	sp,fp
    f214:	dfc00117 	ldw	ra,4(sp)
    f218:	df000017 	ldw	fp,0(sp)
    f21c:	dec00204 	addi	sp,sp,8
    f220:	f800283a 	ret

0000f224 <OS_InitMisc>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitMisc (void)
{
    f224:	deffff04 	addi	sp,sp,-4
    f228:	df000015 	stw	fp,0(sp)
    f22c:	d839883a 	mov	fp,sp
#if OS_TIME_GET_SET_EN > 0
    OSTime        = 0L;                                    /* Clear the 32-bit system clock            */
    f230:	d0281115 	stw	zero,-24508(gp)
#endif

    OSIntNesting  = 0;                                     /* Clear the interrupt nesting counter      */
    f234:	d0280f05 	stb	zero,-24516(gp)
    OSLockNesting = 0;                                     /* Clear the scheduling lock counter        */
    f238:	d0280105 	stb	zero,-24572(gp)

    OSTaskCtr     = 0;                                     /* Clear the number of tasks                */
    f23c:	d0280945 	stb	zero,-24539(gp)

    OSRunning     = OS_FALSE;                              /* Indicate that multitasking not started   */
    f240:	d0280145 	stb	zero,-24571(gp)

    OSCtxSwCtr    = 0;                                     /* Clear the context switch counter         */
    f244:	d0280615 	stw	zero,-24552(gp)
    OSIdleCtr     = 0L;                                    /* Clear the 32-bit idle counter            */
    f248:	d0280215 	stw	zero,-24568(gp)

#if OS_TASK_STAT_EN > 0
    OSIdleCtrRun  = 0L;
    f24c:	d0281415 	stw	zero,-24496(gp)
    OSIdleCtrMax  = 0L;
    f250:	d0280715 	stw	zero,-24548(gp)
    OSStatRdy     = OS_FALSE;                              /* Statistic task is not ready              */
    f254:	d0281305 	stb	zero,-24500(gp)
#endif
}
    f258:	e037883a 	mov	sp,fp
    f25c:	df000017 	ldw	fp,0(sp)
    f260:	dec00104 	addi	sp,sp,4
    f264:	f800283a 	ret

0000f268 <OS_InitRdyList>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitRdyList (void)
{
    f268:	defffd04 	addi	sp,sp,-12
    f26c:	df000215 	stw	fp,8(sp)
    f270:	df000204 	addi	fp,sp,8
#else
    INT16U  *prdytbl;
#endif


    OSRdyGrp      = 0;                                     /* Clear the ready list                     */
    f274:	d0280d05 	stb	zero,-24524(gp)
    prdytbl       = &OSRdyTbl[0];
    f278:	d0a80d44 	addi	r2,gp,-24523
    f27c:	e0bfff15 	stw	r2,-4(fp)
    for (i = 0; i < OS_RDY_TBL_SIZE; i++) {
    f280:	e03ffe05 	stb	zero,-8(fp)
    f284:	00000706 	br	f2a4 <OS_InitRdyList+0x3c>
        *prdytbl++ = 0;
    f288:	e0bfff17 	ldw	r2,-4(fp)
    f28c:	10c00044 	addi	r3,r2,1
    f290:	e0ffff15 	stw	r3,-4(fp)
    f294:	10000005 	stb	zero,0(r2)
#endif


    OSRdyGrp      = 0;                                     /* Clear the ready list                     */
    prdytbl       = &OSRdyTbl[0];
    for (i = 0; i < OS_RDY_TBL_SIZE; i++) {
    f298:	e0bffe03 	ldbu	r2,-8(fp)
    f29c:	10800044 	addi	r2,r2,1
    f2a0:	e0bffe05 	stb	r2,-8(fp)
    f2a4:	e0bffe03 	ldbu	r2,-8(fp)
    f2a8:	108000f0 	cmpltui	r2,r2,3
    f2ac:	103ff61e 	bne	r2,zero,f288 <__alt_mem_Flash_flash_data+0xf400f288>
        *prdytbl++ = 0;
    }

    OSPrioCur     = 0;
    f2b0:	d0280345 	stb	zero,-24563(gp)
    OSPrioHighRdy = 0;
    f2b4:	d0280305 	stb	zero,-24564(gp)

    OSTCBHighRdy  = (OS_TCB *)0;
    f2b8:	d0280b15 	stw	zero,-24532(gp)
    OSTCBCur      = (OS_TCB *)0;
    f2bc:	d0281015 	stw	zero,-24512(gp)
}
    f2c0:	e037883a 	mov	sp,fp
    f2c4:	df000017 	ldw	fp,0(sp)
    f2c8:	dec00104 	addi	sp,sp,4
    f2cc:	f800283a 	ret

0000f2d0 <OS_InitTaskIdle>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitTaskIdle (void)
{
    f2d0:	defff804 	addi	sp,sp,-32
    f2d4:	dfc00715 	stw	ra,28(sp)
    f2d8:	df000615 	stw	fp,24(sp)
    f2dc:	df000604 	addi	fp,sp,24
#endif


#if OS_TASK_CREATE_EXT_EN > 0
    #if OS_STK_GROWTH == 1
    (void)OSTaskCreateExt(OS_TaskIdle,
    f2e0:	00bfffd4 	movui	r2,65535
    f2e4:	d8800015 	stw	r2,0(sp)
    f2e8:	008000b4 	movhi	r2,2
    f2ec:	10950e04 	addi	r2,r2,21560
    f2f0:	d8800115 	stw	r2,4(sp)
    f2f4:	00808004 	movi	r2,512
    f2f8:	d8800215 	stw	r2,8(sp)
    f2fc:	d8000315 	stw	zero,12(sp)
    f300:	008000c4 	movi	r2,3
    f304:	d8800415 	stw	r2,16(sp)
    f308:	01000074 	movhi	r4,1
    f30c:	213dd804 	addi	r4,r4,-2208
    f310:	000b883a 	mov	r5,zero
    f314:	018000b4 	movhi	r6,2
    f318:	31970d04 	addi	r6,r6,23604
    f31c:	01c00504 	movi	r7,20
    f320:	00141740 	call	14174 <OSTaskCreateExt>
                       OS_TASK_IDLE_PRIO);
    #endif
#endif

#if OS_TASK_NAME_SIZE > 14
    OSTaskNameSet(OS_TASK_IDLE_PRIO, (INT8U *)"uC/OS-II Idle", &err);
    f324:	01000504 	movi	r4,20
    f328:	014000b4 	movhi	r5,2
    f32c:	29668804 	addi	r5,r5,-26080
    f330:	e1bfff04 	addi	r6,fp,-4
    f334:	0014a400 	call	14a40 <OSTaskNameSet>
#else
#if OS_TASK_NAME_SIZE > 7
    OSTaskNameSet(OS_TASK_IDLE_PRIO, (INT8U *)"OS-Idle", &err);
#endif
#endif
}
    f338:	e037883a 	mov	sp,fp
    f33c:	dfc00117 	ldw	ra,4(sp)
    f340:	df000017 	ldw	fp,0(sp)
    f344:	dec00204 	addi	sp,sp,8
    f348:	f800283a 	ret

0000f34c <OS_InitTaskStat>:
*********************************************************************************************************
*/

#if OS_TASK_STAT_EN > 0
static  void  OS_InitTaskStat (void)
{
    f34c:	defff804 	addi	sp,sp,-32
    f350:	dfc00715 	stw	ra,28(sp)
    f354:	df000615 	stw	fp,24(sp)
    f358:	df000604 	addi	fp,sp,24
#endif


#if OS_TASK_CREATE_EXT_EN > 0
    #if OS_STK_GROWTH == 1
    (void)OSTaskCreateExt(OS_TaskStat,
    f35c:	00bfff94 	movui	r2,65534
    f360:	d8800015 	stw	r2,0(sp)
    f364:	008000b4 	movhi	r2,2
    f368:	10929604 	addi	r2,r2,19032
    f36c:	d8800115 	stw	r2,4(sp)
    f370:	00808004 	movi	r2,512
    f374:	d8800215 	stw	r2,8(sp)
    f378:	d8000315 	stw	zero,12(sp)
    f37c:	008000c4 	movi	r2,3
    f380:	d8800415 	stw	r2,16(sp)
    f384:	01000074 	movhi	r4,1
    f388:	213def04 	addi	r4,r4,-2116
    f38c:	000b883a 	mov	r5,zero
    f390:	018000b4 	movhi	r6,2
    f394:	31949504 	addi	r6,r6,21076
    f398:	01c004c4 	movi	r7,19
    f39c:	00141740 	call	14174 <OSTaskCreateExt>
                       OS_TASK_STAT_PRIO);                             /* One higher than the idle task  */
    #endif
#endif

#if OS_TASK_NAME_SIZE > 14
    OSTaskNameSet(OS_TASK_STAT_PRIO, (INT8U *)"uC/OS-II Stat", &err);
    f3a0:	010004c4 	movi	r4,19
    f3a4:	014000b4 	movhi	r5,2
    f3a8:	29668c04 	addi	r5,r5,-26064
    f3ac:	e1bfff04 	addi	r6,fp,-4
    f3b0:	0014a400 	call	14a40 <OSTaskNameSet>
#else
#if OS_TASK_NAME_SIZE > 7
    OSTaskNameSet(OS_TASK_STAT_PRIO, (INT8U *)"OS-Stat", &err);
#endif
#endif
}
    f3b4:	e037883a 	mov	sp,fp
    f3b8:	dfc00117 	ldw	ra,4(sp)
    f3bc:	df000017 	ldw	fp,0(sp)
    f3c0:	dec00204 	addi	sp,sp,8
    f3c4:	f800283a 	ret

0000f3c8 <OS_InitTCBList>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitTCBList (void)
{
    f3c8:	defffb04 	addi	sp,sp,-20
    f3cc:	dfc00415 	stw	ra,16(sp)
    f3d0:	df000315 	stw	fp,12(sp)
    f3d4:	df000304 	addi	fp,sp,12
    INT8U    i;
    OS_TCB  *ptcb1;
    OS_TCB  *ptcb2;


    OS_MemClr((INT8U *)&OSTCBTbl[0],     sizeof(OSTCBTbl));      /* Clear all the TCBs                 */
    f3d8:	010000b4 	movhi	r4,2
    f3dc:	2119de04 	addi	r4,r4,26488
    f3e0:	01414404 	movi	r5,1296
    f3e4:	000f4a80 	call	f4a8 <OS_MemClr>
    OS_MemClr((INT8U *)&OSTCBPrioTbl[0], sizeof(OSTCBPrioTbl));  /* Clear the priority table           */
    f3e8:	010000b4 	movhi	r4,2
    f3ec:	211b2204 	addi	r4,r4,27784
    f3f0:	01401504 	movi	r5,84
    f3f4:	000f4a80 	call	f4a8 <OS_MemClr>
    ptcb1 = &OSTCBTbl[0];
    f3f8:	008000b4 	movhi	r2,2
    f3fc:	1099de04 	addi	r2,r2,26488
    f400:	e0bffe15 	stw	r2,-8(fp)
    ptcb2 = &OSTCBTbl[1];
    f404:	008000b4 	movhi	r2,2
    f408:	1099f904 	addi	r2,r2,26596
    f40c:	e0bfff15 	stw	r2,-4(fp)
    for (i = 0; i < (OS_MAX_TASKS + OS_N_SYS_TASKS - 1); i++) {  /* Init. list of free TCBs            */
    f410:	e03ffd05 	stb	zero,-12(fp)
    f414:	00001106 	br	f45c <OS_InitTCBList+0x94>
        ptcb1->OSTCBNext = ptcb2;
    f418:	e0bffe17 	ldw	r2,-8(fp)
    f41c:	e0ffff17 	ldw	r3,-4(fp)
    f420:	10c00515 	stw	r3,20(r2)
#if OS_TASK_NAME_SIZE > 1
        ptcb1->OSTCBTaskName[0] = '?';                           /* Unknown name                       */
    f424:	e0bffe17 	ldw	r2,-8(fp)
    f428:	00c00fc4 	movi	r3,63
    f42c:	10c01305 	stb	r3,76(r2)
        ptcb1->OSTCBTaskName[1] = OS_ASCII_NUL;
    f430:	e0bffe17 	ldw	r2,-8(fp)
    f434:	10001345 	stb	zero,77(r2)
#endif
        ptcb1++;
    f438:	e0bffe17 	ldw	r2,-8(fp)
    f43c:	10801b04 	addi	r2,r2,108
    f440:	e0bffe15 	stw	r2,-8(fp)
        ptcb2++;
    f444:	e0bfff17 	ldw	r2,-4(fp)
    f448:	10801b04 	addi	r2,r2,108
    f44c:	e0bfff15 	stw	r2,-4(fp)

    OS_MemClr((INT8U *)&OSTCBTbl[0],     sizeof(OSTCBTbl));      /* Clear all the TCBs                 */
    OS_MemClr((INT8U *)&OSTCBPrioTbl[0], sizeof(OSTCBPrioTbl));  /* Clear the priority table           */
    ptcb1 = &OSTCBTbl[0];
    ptcb2 = &OSTCBTbl[1];
    for (i = 0; i < (OS_MAX_TASKS + OS_N_SYS_TASKS - 1); i++) {  /* Init. list of free TCBs            */
    f450:	e0bffd03 	ldbu	r2,-12(fp)
    f454:	10800044 	addi	r2,r2,1
    f458:	e0bffd05 	stb	r2,-12(fp)
    f45c:	e0bffd03 	ldbu	r2,-12(fp)
    f460:	108002f0 	cmpltui	r2,r2,11
    f464:	103fec1e 	bne	r2,zero,f418 <__alt_mem_Flash_flash_data+0xf400f418>
        ptcb1->OSTCBTaskName[1] = OS_ASCII_NUL;
#endif
        ptcb1++;
        ptcb2++;
    }
    ptcb1->OSTCBNext = (OS_TCB *)0;                              /* Last OS_TCB                        */
    f468:	e0bffe17 	ldw	r2,-8(fp)
    f46c:	10000515 	stw	zero,20(r2)
#if OS_TASK_NAME_SIZE > 1
    ptcb1->OSTCBTaskName[0] = '?';                               /* Unknown name                       */
    f470:	e0bffe17 	ldw	r2,-8(fp)
    f474:	00c00fc4 	movi	r3,63
    f478:	10c01305 	stb	r3,76(r2)
    ptcb1->OSTCBTaskName[1] = OS_ASCII_NUL;
    f47c:	e0bffe17 	ldw	r2,-8(fp)
    f480:	10001345 	stb	zero,77(r2)
#endif
    OSTCBList               = (OS_TCB *)0;                       /* TCB lists initializations          */
    f484:	d0280415 	stw	zero,-24560(gp)
    OSTCBFreeList           = &OSTCBTbl[0];
    f488:	008000b4 	movhi	r2,2
    f48c:	1099de04 	addi	r2,r2,26488
    f490:	d0a80815 	stw	r2,-24544(gp)
}
    f494:	e037883a 	mov	sp,fp
    f498:	dfc00117 	ldw	ra,4(sp)
    f49c:	df000017 	ldw	fp,0(sp)
    f4a0:	dec00204 	addi	sp,sp,8
    f4a4:	f800283a 	ret

0000f4a8 <OS_MemClr>:
*                 of the alignment of the destination.
*********************************************************************************************************
*/

void  OS_MemClr (INT8U *pdest, INT16U size)
{
    f4a8:	defffd04 	addi	sp,sp,-12
    f4ac:	df000215 	stw	fp,8(sp)
    f4b0:	df000204 	addi	fp,sp,8
    f4b4:	e13ffe15 	stw	r4,-8(fp)
    f4b8:	2805883a 	mov	r2,r5
    f4bc:	e0bfff0d 	sth	r2,-4(fp)
    while (size > 0) {
    f4c0:	00000706 	br	f4e0 <OS_MemClr+0x38>
        *pdest++ = (INT8U)0;
    f4c4:	e0bffe17 	ldw	r2,-8(fp)
    f4c8:	10c00044 	addi	r3,r2,1
    f4cc:	e0fffe15 	stw	r3,-8(fp)
    f4d0:	10000005 	stb	zero,0(r2)
        size--;
    f4d4:	e0bfff0b 	ldhu	r2,-4(fp)
    f4d8:	10bfffc4 	addi	r2,r2,-1
    f4dc:	e0bfff0d 	sth	r2,-4(fp)
*********************************************************************************************************
*/

void  OS_MemClr (INT8U *pdest, INT16U size)
{
    while (size > 0) {
    f4e0:	e0bfff0b 	ldhu	r2,-4(fp)
    f4e4:	103ff71e 	bne	r2,zero,f4c4 <__alt_mem_Flash_flash_data+0xf400f4c4>
        *pdest++ = (INT8U)0;
        size--;
    }
}
    f4e8:	e037883a 	mov	sp,fp
    f4ec:	df000017 	ldw	fp,0(sp)
    f4f0:	dec00104 	addi	sp,sp,4
    f4f4:	f800283a 	ret

0000f4f8 <OS_MemCopy>:
*                 of the alignment of the source and destination.
*********************************************************************************************************
*/

void  OS_MemCopy (INT8U *pdest, INT8U *psrc, INT16U size)
{
    f4f8:	defffc04 	addi	sp,sp,-16
    f4fc:	df000315 	stw	fp,12(sp)
    f500:	df000304 	addi	fp,sp,12
    f504:	e13ffd15 	stw	r4,-12(fp)
    f508:	e17ffe15 	stw	r5,-8(fp)
    f50c:	3005883a 	mov	r2,r6
    f510:	e0bfff0d 	sth	r2,-4(fp)
    while (size > 0) {
    f514:	00000b06 	br	f544 <OS_MemCopy+0x4c>
        *pdest++ = *psrc++;
    f518:	e0bffd17 	ldw	r2,-12(fp)
    f51c:	10c00044 	addi	r3,r2,1
    f520:	e0fffd15 	stw	r3,-12(fp)
    f524:	e0fffe17 	ldw	r3,-8(fp)
    f528:	19000044 	addi	r4,r3,1
    f52c:	e13ffe15 	stw	r4,-8(fp)
    f530:	18c00003 	ldbu	r3,0(r3)
    f534:	10c00005 	stb	r3,0(r2)
        size--;
    f538:	e0bfff0b 	ldhu	r2,-4(fp)
    f53c:	10bfffc4 	addi	r2,r2,-1
    f540:	e0bfff0d 	sth	r2,-4(fp)
*********************************************************************************************************
*/

void  OS_MemCopy (INT8U *pdest, INT8U *psrc, INT16U size)
{
    while (size > 0) {
    f544:	e0bfff0b 	ldhu	r2,-4(fp)
    f548:	103ff31e 	bne	r2,zero,f518 <__alt_mem_Flash_flash_data+0xf400f518>
        *pdest++ = *psrc++;
        size--;
    }
}
    f54c:	e037883a 	mov	sp,fp
    f550:	df000017 	ldw	fp,0(sp)
    f554:	dec00104 	addi	sp,sp,4
    f558:	f800283a 	ret

0000f55c <OS_Sched>:
*              2) Rescheduling is prevented when the scheduler is locked (see OS_SchedLock())
*********************************************************************************************************
*/

void  OS_Sched (void)
{
    f55c:	defffb04 	addi	sp,sp,-20
    f560:	dfc00415 	stw	ra,16(sp)
    f564:	df000315 	stw	fp,12(sp)
    f568:	df000304 	addi	fp,sp,12
#if OS_CRITICAL_METHOD == 3                            /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
    f56c:	e03ffd15 	stw	zero,-12(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    f570:	0005303a 	rdctl	r2,status
    f574:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    f578:	e0fffe17 	ldw	r3,-8(fp)
    f57c:	00bfff84 	movi	r2,-2
    f580:	1884703a 	and	r2,r3,r2
    f584:	1001703a 	wrctl	status,r2
  
  return context;
    f588:	e0bffe17 	ldw	r2,-8(fp)
#endif



    OS_ENTER_CRITICAL();
    f58c:	e0bffd15 	stw	r2,-12(fp)
    if (OSIntNesting == 0) {                           /* Schedule only if all ISRs done and ...       */
    f590:	d0a80f03 	ldbu	r2,-24516(gp)
    f594:	10803fcc 	andi	r2,r2,255
    f598:	10001a1e 	bne	r2,zero,f604 <OS_Sched+0xa8>
        if (OSLockNesting == 0) {                      /* ... scheduler is not locked                  */
    f59c:	d0a80103 	ldbu	r2,-24572(gp)
    f5a0:	10803fcc 	andi	r2,r2,255
    f5a4:	1000171e 	bne	r2,zero,f604 <OS_Sched+0xa8>
            OS_SchedNew();
    f5a8:	000f6280 	call	f628 <OS_SchedNew>
            if (OSPrioHighRdy != OSPrioCur) {          /* No Ctx Sw if current task is highest rdy     */
    f5ac:	d0e80303 	ldbu	r3,-24564(gp)
    f5b0:	d0a80343 	ldbu	r2,-24563(gp)
    f5b4:	18c03fcc 	andi	r3,r3,255
    f5b8:	10803fcc 	andi	r2,r2,255
    f5bc:	18801126 	beq	r3,r2,f604 <OS_Sched+0xa8>
                OSTCBHighRdy = OSTCBPrioTbl[OSPrioHighRdy];
    f5c0:	d0a80303 	ldbu	r2,-24564(gp)
    f5c4:	10c03fcc 	andi	r3,r2,255
    f5c8:	008000b4 	movhi	r2,2
    f5cc:	109b2204 	addi	r2,r2,27784
    f5d0:	18c7883a 	add	r3,r3,r3
    f5d4:	18c7883a 	add	r3,r3,r3
    f5d8:	10c5883a 	add	r2,r2,r3
    f5dc:	10800017 	ldw	r2,0(r2)
    f5e0:	d0a80b15 	stw	r2,-24532(gp)
#if OS_TASK_PROFILE_EN > 0
                OSTCBHighRdy->OSTCBCtxSwCtr++;         /* Inc. # of context switches to this task      */
    f5e4:	d0a80b17 	ldw	r2,-24532(gp)
    f5e8:	10c00e17 	ldw	r3,56(r2)
    f5ec:	18c00044 	addi	r3,r3,1
    f5f0:	10c00e15 	stw	r3,56(r2)
#endif
                OSCtxSwCtr++;                          /* Increment context switch counter             */
    f5f4:	d0a80617 	ldw	r2,-24552(gp)
    f5f8:	10800044 	addi	r2,r2,1
    f5fc:	d0a80615 	stw	r2,-24552(gp)
                OS_TASK_SW();                          /* Perform a context switch                     */
    f600:	0018bdc0 	call	18bdc <OSCtxSw>
    f604:	e0bffd17 	ldw	r2,-12(fp)
    f608:	e0bfff15 	stw	r2,-4(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    f60c:	e0bfff17 	ldw	r2,-4(fp)
    f610:	1001703a 	wrctl	status,r2
            }
        }
    }
    OS_EXIT_CRITICAL();
}
    f614:	e037883a 	mov	sp,fp
    f618:	dfc00117 	ldw	ra,4(sp)
    f61c:	df000017 	ldw	fp,0(sp)
    f620:	dec00204 	addi	sp,sp,8
    f624:	f800283a 	ret

0000f628 <OS_SchedNew>:
*              2) Interrupts are assumed to be disabled when this function is called.
*********************************************************************************************************
*/

static  void  OS_SchedNew (void)
{
    f628:	defffe04 	addi	sp,sp,-8
    f62c:	df000115 	stw	fp,4(sp)
    f630:	df000104 	addi	fp,sp,4
#if OS_LOWEST_PRIO <= 63                         /* See if we support up to 64 tasks                   */
    INT8U   y;


    y             = OSUnMapTbl[OSRdyGrp];
    f634:	d0a80d03 	ldbu	r2,-24524(gp)
    f638:	10c03fcc 	andi	r3,r2,255
    f63c:	008000b4 	movhi	r2,2
    f640:	10a64804 	addi	r2,r2,-26336
    f644:	10c5883a 	add	r2,r2,r3
    f648:	10800003 	ldbu	r2,0(r2)
    f64c:	e0bfff05 	stb	r2,-4(fp)
    OSPrioHighRdy = (INT8U)((y << 3) + OSUnMapTbl[OSRdyTbl[y]]);
    f650:	e0bfff03 	ldbu	r2,-4(fp)
    f654:	100490fa 	slli	r2,r2,3
    f658:	1009883a 	mov	r4,r2
    f65c:	e0ffff03 	ldbu	r3,-4(fp)
    f660:	d0a80d44 	addi	r2,gp,-24523
    f664:	1885883a 	add	r2,r3,r2
    f668:	10800003 	ldbu	r2,0(r2)
    f66c:	10c03fcc 	andi	r3,r2,255
    f670:	008000b4 	movhi	r2,2
    f674:	10a64804 	addi	r2,r2,-26336
    f678:	10c5883a 	add	r2,r2,r3
    f67c:	10800003 	ldbu	r2,0(r2)
    f680:	2085883a 	add	r2,r4,r2
    f684:	d0a80305 	stb	r2,-24564(gp)
        OSPrioHighRdy = (INT8U)((y << 4) + OSUnMapTbl[(*ptbl & 0xFF)]);
    } else {
        OSPrioHighRdy = (INT8U)((y << 4) + OSUnMapTbl[(*ptbl >> 8) & 0xFF] + 8);
    }
#endif
}
    f688:	e037883a 	mov	sp,fp
    f68c:	df000017 	ldw	fp,0(sp)
    f690:	dec00104 	addi	sp,sp,4
    f694:	f800283a 	ret

0000f698 <OS_StrCopy>:
*********************************************************************************************************
*/

#if (OS_EVENT_NAME_SIZE > 1) || (OS_FLAG_NAME_SIZE > 1) || (OS_MEM_NAME_SIZE > 1) || (OS_TASK_NAME_SIZE > 1) || (OS_TMR_CFG_NAME_SIZE > 1)
INT8U  OS_StrCopy (INT8U *pdest, INT8U *psrc)
{
    f698:	defffc04 	addi	sp,sp,-16
    f69c:	df000315 	stw	fp,12(sp)
    f6a0:	df000304 	addi	fp,sp,12
    f6a4:	e13ffe15 	stw	r4,-8(fp)
    f6a8:	e17fff15 	stw	r5,-4(fp)
    INT8U  len;


    len = 0;
    f6ac:	e03ffd05 	stb	zero,-12(fp)
    while (*psrc != OS_ASCII_NUL) {
    f6b0:	00000b06 	br	f6e0 <OS_StrCopy+0x48>
        *pdest++ = *psrc++;
    f6b4:	e0bffe17 	ldw	r2,-8(fp)
    f6b8:	10c00044 	addi	r3,r2,1
    f6bc:	e0fffe15 	stw	r3,-8(fp)
    f6c0:	e0ffff17 	ldw	r3,-4(fp)
    f6c4:	19000044 	addi	r4,r3,1
    f6c8:	e13fff15 	stw	r4,-4(fp)
    f6cc:	18c00003 	ldbu	r3,0(r3)
    f6d0:	10c00005 	stb	r3,0(r2)
        len++;
    f6d4:	e0bffd03 	ldbu	r2,-12(fp)
    f6d8:	10800044 	addi	r2,r2,1
    f6dc:	e0bffd05 	stb	r2,-12(fp)
{
    INT8U  len;


    len = 0;
    while (*psrc != OS_ASCII_NUL) {
    f6e0:	e0bfff17 	ldw	r2,-4(fp)
    f6e4:	10800003 	ldbu	r2,0(r2)
    f6e8:	10803fcc 	andi	r2,r2,255
    f6ec:	103ff11e 	bne	r2,zero,f6b4 <__alt_mem_Flash_flash_data+0xf400f6b4>
        *pdest++ = *psrc++;
        len++;
    }
    *pdest = OS_ASCII_NUL;
    f6f0:	e0bffe17 	ldw	r2,-8(fp)
    f6f4:	10000005 	stb	zero,0(r2)
    return (len);
    f6f8:	e0bffd03 	ldbu	r2,-12(fp)
}
    f6fc:	e037883a 	mov	sp,fp
    f700:	df000017 	ldw	fp,0(sp)
    f704:	dec00104 	addi	sp,sp,4
    f708:	f800283a 	ret

0000f70c <OS_StrLen>:
*********************************************************************************************************
*/

#if (OS_EVENT_NAME_SIZE > 1) || (OS_FLAG_NAME_SIZE > 1) || (OS_MEM_NAME_SIZE > 1) || (OS_TASK_NAME_SIZE > 1) || (OS_TMR_CFG_NAME_SIZE > 1)
INT8U  OS_StrLen (INT8U *psrc)
{
    f70c:	defffd04 	addi	sp,sp,-12
    f710:	df000215 	stw	fp,8(sp)
    f714:	df000204 	addi	fp,sp,8
    f718:	e13fff15 	stw	r4,-4(fp)
    INT8U  len;


    len = 0;
    f71c:	e03ffe05 	stb	zero,-8(fp)
    while (*psrc != OS_ASCII_NUL) {
    f720:	00000606 	br	f73c <OS_StrLen+0x30>
        psrc++;
    f724:	e0bfff17 	ldw	r2,-4(fp)
    f728:	10800044 	addi	r2,r2,1
    f72c:	e0bfff15 	stw	r2,-4(fp)
        len++;
    f730:	e0bffe03 	ldbu	r2,-8(fp)
    f734:	10800044 	addi	r2,r2,1
    f738:	e0bffe05 	stb	r2,-8(fp)
{
    INT8U  len;


    len = 0;
    while (*psrc != OS_ASCII_NUL) {
    f73c:	e0bfff17 	ldw	r2,-4(fp)
    f740:	10800003 	ldbu	r2,0(r2)
    f744:	10803fcc 	andi	r2,r2,255
    f748:	103ff61e 	bne	r2,zero,f724 <__alt_mem_Flash_flash_data+0xf400f724>
        psrc++;
        len++;
    }
    return (len);
    f74c:	e0bffe03 	ldbu	r2,-8(fp)
}
    f750:	e037883a 	mov	sp,fp
    f754:	df000017 	ldw	fp,0(sp)
    f758:	dec00104 	addi	sp,sp,4
    f75c:	f800283a 	ret

0000f760 <OS_TaskIdle>:
*                 power.
*********************************************************************************************************
*/

void  OS_TaskIdle (void *p_arg)
{
    f760:	defffa04 	addi	sp,sp,-24
    f764:	dfc00515 	stw	ra,20(sp)
    f768:	df000415 	stw	fp,16(sp)
    f76c:	df000404 	addi	fp,sp,16
    f770:	e13fff15 	stw	r4,-4(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
    f774:	e03ffc15 	stw	zero,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    f778:	0005303a 	rdctl	r2,status
    f77c:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    f780:	e0fffd17 	ldw	r3,-12(fp)
    f784:	00bfff84 	movi	r2,-2
    f788:	1884703a 	and	r2,r3,r2
    f78c:	1001703a 	wrctl	status,r2
  
  return context;
    f790:	e0bffd17 	ldw	r2,-12(fp)



    (void)p_arg;                                 /* Prevent compiler warning for not using 'p_arg'     */
    for (;;) {
        OS_ENTER_CRITICAL();
    f794:	e0bffc15 	stw	r2,-16(fp)
        OSIdleCtr++;
    f798:	d0a80217 	ldw	r2,-24568(gp)
    f79c:	10800044 	addi	r2,r2,1
    f7a0:	d0a80215 	stw	r2,-24568(gp)
    f7a4:	e0bffc17 	ldw	r2,-16(fp)
    f7a8:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    f7ac:	e0bffe17 	ldw	r2,-8(fp)
    f7b0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OSTaskIdleHook();                        /* Call user definable HOOK                           */
    f7b4:	0018ed40 	call	18ed4 <OSTaskIdleHook>
    }
    f7b8:	003fef06 	br	f778 <__alt_mem_Flash_flash_data+0xf400f778>

0000f7bc <OS_TaskStat>:
*********************************************************************************************************
*/

#if OS_TASK_STAT_EN > 0
void  OS_TaskStat (void *p_arg)
{
    f7bc:	defff804 	addi	sp,sp,-32
    f7c0:	dfc00715 	stw	ra,28(sp)
    f7c4:	df000615 	stw	fp,24(sp)
    f7c8:	dc400515 	stw	r17,20(sp)
    f7cc:	dc000415 	stw	r16,16(sp)
    f7d0:	df000604 	addi	fp,sp,24
    f7d4:	e13ffd15 	stw	r4,-12(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
    f7d8:	e03ffa15 	stw	zero,-24(fp)
#endif



    (void)p_arg;                                 /* Prevent compiler warning for not using 'p_arg'     */
    while (OSStatRdy == OS_FALSE) {
    f7dc:	00000206 	br	f7e8 <OS_TaskStat+0x2c>
        OSTimeDly(2 * OS_TICKS_PER_SEC / 10);    /* Wait until statistic task is ready                 */
    f7e0:	01000044 	movi	r4,1
    f7e4:	001536c0 	call	1536c <OSTimeDly>
#endif



    (void)p_arg;                                 /* Prevent compiler warning for not using 'p_arg'     */
    while (OSStatRdy == OS_FALSE) {
    f7e8:	d0a81303 	ldbu	r2,-24500(gp)
    f7ec:	10803fcc 	andi	r2,r2,255
    f7f0:	103ffb26 	beq	r2,zero,f7e0 <__alt_mem_Flash_flash_data+0xf400f7e0>
        OSTimeDly(2 * OS_TICKS_PER_SEC / 10);    /* Wait until statistic task is ready                 */
    }
    OSIdleCtrMax /= 100L;
    f7f4:	d0e80717 	ldw	r3,-24548(gp)
    f7f8:	00947b34 	movhi	r2,20972
    f7fc:	10a147c4 	addi	r2,r2,-31457
    f800:	1888383a 	mulxuu	r4,r3,r2
    f804:	1885383a 	mul	r2,r3,r2
    f808:	1021883a 	mov	r16,r2
    f80c:	2023883a 	mov	r17,r4
    f810:	8804d17a 	srli	r2,r17,5
    f814:	d0a80715 	stw	r2,-24548(gp)
    if (OSIdleCtrMax == 0L) {
    f818:	d0a80717 	ldw	r2,-24548(gp)
    f81c:	1000031e 	bne	r2,zero,f82c <OS_TaskStat+0x70>
        OSCPUUsage = 0;
    f820:	d0280905 	stb	zero,-24540(gp)
        (void)OSTaskSuspend(OS_PRIO_SELF);
    f824:	01003fc4 	movi	r4,255
    f828:	0014fc00 	call	14fc0 <OSTaskSuspend>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    f82c:	0005303a 	rdctl	r2,status
    f830:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    f834:	e0fffb17 	ldw	r3,-20(fp)
    f838:	00bfff84 	movi	r2,-2
    f83c:	1884703a 	and	r2,r3,r2
    f840:	1001703a 	wrctl	status,r2
  
  return context;
    f844:	e0bffb17 	ldw	r2,-20(fp)
    }
    for (;;) {
        OS_ENTER_CRITICAL();
    f848:	e0bffa15 	stw	r2,-24(fp)
        OSIdleCtrRun = OSIdleCtr;                /* Obtain the of the idle counter for the past second */
    f84c:	d0a80217 	ldw	r2,-24568(gp)
    f850:	d0a81415 	stw	r2,-24496(gp)
        OSIdleCtr    = 0L;                       /* Reset the idle counter for the next second         */
    f854:	d0280215 	stw	zero,-24568(gp)
    f858:	e0bffa17 	ldw	r2,-24(fp)
    f85c:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    f860:	e0bffc17 	ldw	r2,-16(fp)
    f864:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OSCPUUsage   = (INT8U)(100L - OSIdleCtrRun / OSIdleCtrMax);
    f868:	d0e81417 	ldw	r3,-24496(gp)
    f86c:	d0a80717 	ldw	r2,-24548(gp)
    f870:	1885203a 	divu	r2,r3,r2
    f874:	1007883a 	mov	r3,r2
    f878:	00801904 	movi	r2,100
    f87c:	10c5c83a 	sub	r2,r2,r3
    f880:	d0a80905 	stb	r2,-24540(gp)
        OSTaskStatHook();                        /* Invoke user definable hook                         */
    f884:	0018e640 	call	18e64 <OSTaskStatHook>
#if (OS_TASK_STAT_STK_CHK_EN > 0) && (OS_TASK_CREATE_EXT_EN > 0)
        OS_TaskStatStkChk();                     /* Check the stacks for each task                     */
    f888:	000f8980 	call	f898 <OS_TaskStatStkChk>
#endif
        OSTimeDly(OS_TICKS_PER_SEC / 10);        /* Accumulate OSIdleCtr for the next 1/10 second      */
    f88c:	0009883a 	mov	r4,zero
    f890:	001536c0 	call	1536c <OSTimeDly>
    }
    f894:	003fe506 	br	f82c <__alt_mem_Flash_flash_data+0xf400f82c>

0000f898 <OS_TaskStatStkChk>:
*********************************************************************************************************
*/

#if (OS_TASK_STAT_STK_CHK_EN > 0) && (OS_TASK_CREATE_EXT_EN > 0)
void  OS_TaskStatStkChk (void)
{
    f898:	defffa04 	addi	sp,sp,-24
    f89c:	dfc00515 	stw	ra,20(sp)
    f8a0:	df000415 	stw	fp,16(sp)
    f8a4:	df000404 	addi	fp,sp,16
    OS_STK_DATA  stk_data;
    INT8U        err;
    INT8U        prio;


    for (prio = 0; prio <= OS_TASK_IDLE_PRIO; prio++) {
    f8a8:	e03ffc05 	stb	zero,-16(fp)
    f8ac:	00002406 	br	f940 <OS_TaskStatStkChk+0xa8>
        err = OSTaskStkChk(prio, &stk_data);
    f8b0:	e0fffc03 	ldbu	r3,-16(fp)
    f8b4:	e0bffe04 	addi	r2,fp,-8
    f8b8:	1809883a 	mov	r4,r3
    f8bc:	100b883a 	mov	r5,r2
    f8c0:	0014df80 	call	14df8 <OSTaskStkChk>
    f8c4:	e0bffc45 	stb	r2,-15(fp)
        if (err == OS_ERR_NONE) {
    f8c8:	e0bffc43 	ldbu	r2,-15(fp)
    f8cc:	1000191e 	bne	r2,zero,f934 <OS_TaskStatStkChk+0x9c>
            ptcb = OSTCBPrioTbl[prio];
    f8d0:	e0fffc03 	ldbu	r3,-16(fp)
    f8d4:	008000b4 	movhi	r2,2
    f8d8:	109b2204 	addi	r2,r2,27784
    f8dc:	18c7883a 	add	r3,r3,r3
    f8e0:	18c7883a 	add	r3,r3,r3
    f8e4:	10c5883a 	add	r2,r2,r3
    f8e8:	10800017 	ldw	r2,0(r2)
    f8ec:	e0bffd15 	stw	r2,-12(fp)
            if (ptcb != (OS_TCB *)0) {                               /* Make sure task 'ptcb' is ...   */
    f8f0:	e0bffd17 	ldw	r2,-12(fp)
    f8f4:	10000f26 	beq	r2,zero,f934 <OS_TaskStatStkChk+0x9c>
                if (ptcb != OS_TCB_RESERVED) {                       /* ... still valid.               */
    f8f8:	e0bffd17 	ldw	r2,-12(fp)
    f8fc:	10800060 	cmpeqi	r2,r2,1
    f900:	10000c1e 	bne	r2,zero,f934 <OS_TaskStatStkChk+0x9c>
#if OS_TASK_PROFILE_EN > 0
                    #if OS_STK_GROWTH == 1
                    ptcb->OSTCBStkBase = ptcb->OSTCBStkBottom + ptcb->OSTCBStkSize;
    f904:	e0bffd17 	ldw	r2,-12(fp)
    f908:	10c00217 	ldw	r3,8(r2)
    f90c:	e0bffd17 	ldw	r2,-12(fp)
    f910:	10800317 	ldw	r2,12(r2)
    f914:	1085883a 	add	r2,r2,r2
    f918:	1085883a 	add	r2,r2,r2
    f91c:	1887883a 	add	r3,r3,r2
    f920:	e0bffd17 	ldw	r2,-12(fp)
    f924:	10c01115 	stw	r3,68(r2)
                    #else
                    ptcb->OSTCBStkBase = ptcb->OSTCBStkBottom - ptcb->OSTCBStkSize;
                    #endif
                    ptcb->OSTCBStkUsed = stk_data.OSUsed;            /* Store the number of bytes used */
    f928:	e0ffff17 	ldw	r3,-4(fp)
    f92c:	e0bffd17 	ldw	r2,-12(fp)
    f930:	10c01215 	stw	r3,72(r2)
    OS_STK_DATA  stk_data;
    INT8U        err;
    INT8U        prio;


    for (prio = 0; prio <= OS_TASK_IDLE_PRIO; prio++) {
    f934:	e0bffc03 	ldbu	r2,-16(fp)
    f938:	10800044 	addi	r2,r2,1
    f93c:	e0bffc05 	stb	r2,-16(fp)
    f940:	e0bffc03 	ldbu	r2,-16(fp)
    f944:	10800570 	cmpltui	r2,r2,21
    f948:	103fd91e 	bne	r2,zero,f8b0 <__alt_mem_Flash_flash_data+0xf400f8b0>
#endif
                }
            }
        }
    }
}
    f94c:	e037883a 	mov	sp,fp
    f950:	dfc00117 	ldw	ra,4(sp)
    f954:	df000017 	ldw	fp,0(sp)
    f958:	dec00204 	addi	sp,sp,8
    f95c:	f800283a 	ret

0000f960 <OS_TCBInit>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

INT8U  OS_TCBInit (INT8U prio, OS_STK *ptos, OS_STK *pbos, INT16U id, INT32U stk_size, void *pext, INT16U opt)
{
    f960:	defff204 	addi	sp,sp,-56
    f964:	dfc00d15 	stw	ra,52(sp)
    f968:	df000c15 	stw	fp,48(sp)
    f96c:	df000c04 	addi	fp,sp,48
    f970:	e17ffc15 	stw	r5,-16(fp)
    f974:	e1bffd15 	stw	r6,-12(fp)
    f978:	3807883a 	mov	r3,r7
    f97c:	e0800417 	ldw	r2,16(fp)
    f980:	e13ffb05 	stb	r4,-20(fp)
    f984:	e0fffe0d 	sth	r3,-8(fp)
    f988:	e0bfff0d 	sth	r2,-4(fp)
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
    f98c:	e03ff415 	stw	zero,-48(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    f990:	0005303a 	rdctl	r2,status
    f994:	e0bff615 	stw	r2,-40(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    f998:	e0fff617 	ldw	r3,-40(fp)
    f99c:	00bfff84 	movi	r2,-2
    f9a0:	1884703a 	and	r2,r3,r2
    f9a4:	1001703a 	wrctl	status,r2
  
  return context;
    f9a8:	e0bff617 	ldw	r2,-40(fp)
#endif



    OS_ENTER_CRITICAL();
    f9ac:	e0bff415 	stw	r2,-48(fp)
    ptcb = OSTCBFreeList;                                  /* Get a free TCB from the free TCB list    */
    f9b0:	d0a80817 	ldw	r2,-24544(gp)
    f9b4:	e0bff515 	stw	r2,-44(fp)
    if (ptcb != (OS_TCB *)0) {
    f9b8:	e0bff517 	ldw	r2,-44(fp)
    f9bc:	10009326 	beq	r2,zero,fc0c <OS_TCBInit+0x2ac>
        OSTCBFreeList            = ptcb->OSTCBNext;        /* Update pointer to free TCB list          */
    f9c0:	e0bff517 	ldw	r2,-44(fp)
    f9c4:	10800517 	ldw	r2,20(r2)
    f9c8:	d0a80815 	stw	r2,-24544(gp)
    f9cc:	e0bff417 	ldw	r2,-48(fp)
    f9d0:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    f9d4:	e0bff717 	ldw	r2,-36(fp)
    f9d8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        ptcb->OSTCBStkPtr        = ptos;                   /* Load Stack pointer in TCB                */
    f9dc:	e0bff517 	ldw	r2,-44(fp)
    f9e0:	e0fffc17 	ldw	r3,-16(fp)
    f9e4:	10c00015 	stw	r3,0(r2)
        ptcb->OSTCBPrio          = prio;                   /* Load task priority into TCB              */
    f9e8:	e0bff517 	ldw	r2,-44(fp)
    f9ec:	e0fffb03 	ldbu	r3,-20(fp)
    f9f0:	10c00c85 	stb	r3,50(r2)
        ptcb->OSTCBStat          = OS_STAT_RDY;            /* Task is ready to run                     */
    f9f4:	e0bff517 	ldw	r2,-44(fp)
    f9f8:	10000c05 	stb	zero,48(r2)
        ptcb->OSTCBStatPend      = OS_STAT_PEND_OK;        /* Clear pend status                        */
    f9fc:	e0bff517 	ldw	r2,-44(fp)
    fa00:	10000c45 	stb	zero,49(r2)
        ptcb->OSTCBDly           = 0;                      /* Task is not delayed                      */
    fa04:	e0bff517 	ldw	r2,-44(fp)
    fa08:	10000b8d 	sth	zero,46(r2)

#if OS_TASK_CREATE_EXT_EN > 0
        ptcb->OSTCBExtPtr        = pext;                   /* Store pointer to TCB extension           */
    fa0c:	e0bff517 	ldw	r2,-44(fp)
    fa10:	e0c00317 	ldw	r3,12(fp)
    fa14:	10c00115 	stw	r3,4(r2)
        ptcb->OSTCBStkSize       = stk_size;               /* Store stack size                         */
    fa18:	e0bff517 	ldw	r2,-44(fp)
    fa1c:	e0c00217 	ldw	r3,8(fp)
    fa20:	10c00315 	stw	r3,12(r2)
        ptcb->OSTCBStkBottom     = pbos;                   /* Store pointer to bottom of stack         */
    fa24:	e0bff517 	ldw	r2,-44(fp)
    fa28:	e0fffd17 	ldw	r3,-12(fp)
    fa2c:	10c00215 	stw	r3,8(r2)
        ptcb->OSTCBOpt           = opt;                    /* Store task options                       */
    fa30:	e0bff517 	ldw	r2,-44(fp)
    fa34:	e0ffff0b 	ldhu	r3,-4(fp)
    fa38:	10c0040d 	sth	r3,16(r2)
        ptcb->OSTCBId            = id;                     /* Store task ID                            */
    fa3c:	e0bff517 	ldw	r2,-44(fp)
    fa40:	e0fffe0b 	ldhu	r3,-8(fp)
    fa44:	10c0048d 	sth	r3,18(r2)
        opt                      = opt;
        id                       = id;
#endif

#if OS_TASK_DEL_EN > 0
        ptcb->OSTCBDelReq        = OS_ERR_NONE;
    fa48:	e0bff517 	ldw	r2,-44(fp)
    fa4c:	10000dc5 	stb	zero,55(r2)
#endif

#if OS_LOWEST_PRIO <= 63
        ptcb->OSTCBY             = (INT8U)(prio >> 3);          /* Pre-compute X, Y, BitX and BitY     */
    fa50:	e0bffb03 	ldbu	r2,-20(fp)
    fa54:	1004d0fa 	srli	r2,r2,3
    fa58:	1007883a 	mov	r3,r2
    fa5c:	e0bff517 	ldw	r2,-44(fp)
    fa60:	10c00d05 	stb	r3,52(r2)
        ptcb->OSTCBX             = (INT8U)(prio & 0x07);
    fa64:	e0bffb03 	ldbu	r2,-20(fp)
    fa68:	108001cc 	andi	r2,r2,7
    fa6c:	1007883a 	mov	r3,r2
    fa70:	e0bff517 	ldw	r2,-44(fp)
    fa74:	10c00cc5 	stb	r3,51(r2)
        ptcb->OSTCBBitY          = (INT8U)(1 << ptcb->OSTCBY);
    fa78:	e0bff517 	ldw	r2,-44(fp)
    fa7c:	10800d03 	ldbu	r2,52(r2)
    fa80:	10803fcc 	andi	r2,r2,255
    fa84:	00c00044 	movi	r3,1
    fa88:	1884983a 	sll	r2,r3,r2
    fa8c:	1007883a 	mov	r3,r2
    fa90:	e0bff517 	ldw	r2,-44(fp)
    fa94:	10c00d85 	stb	r3,54(r2)
        ptcb->OSTCBBitX          = (INT8U)(1 << ptcb->OSTCBX);
    fa98:	e0bff517 	ldw	r2,-44(fp)
    fa9c:	10800cc3 	ldbu	r2,51(r2)
    faa0:	10803fcc 	andi	r2,r2,255
    faa4:	00c00044 	movi	r3,1
    faa8:	1884983a 	sll	r2,r3,r2
    faac:	1007883a 	mov	r3,r2
    fab0:	e0bff517 	ldw	r2,-44(fp)
    fab4:	10c00d45 	stb	r3,53(r2)
        ptcb->OSTCBBitY          = (INT16U)(1 << ptcb->OSTCBY);
        ptcb->OSTCBBitX          = (INT16U)(1 << ptcb->OSTCBX);
#endif

#if (OS_EVENT_EN)
        ptcb->OSTCBEventPtr      = (OS_EVENT  *)0;         /* Task is not pending on an  event         */
    fab8:	e0bff517 	ldw	r2,-44(fp)
    fabc:	10000715 	stw	zero,28(r2)
#if (OS_EVENT_MULTI_EN > 0)
        ptcb->OSTCBEventMultiPtr = (OS_EVENT **)0;         /* Task is not pending on any events        */
    fac0:	e0bff517 	ldw	r2,-44(fp)
    fac4:	10000815 	stw	zero,32(r2)
#endif
#endif

#if (OS_FLAG_EN > 0) && (OS_MAX_FLAGS > 0) && (OS_TASK_DEL_EN > 0)
        ptcb->OSTCBFlagNode  = (OS_FLAG_NODE *)0;          /* Task is not pending on an event flag     */
    fac8:	e0bff517 	ldw	r2,-44(fp)
    facc:	10000a15 	stw	zero,40(r2)
#endif

#if (OS_MBOX_EN > 0) || ((OS_Q_EN > 0) && (OS_MAX_QS > 0))
        ptcb->OSTCBMsg       = (void *)0;                  /* No message received                      */
    fad0:	e0bff517 	ldw	r2,-44(fp)
    fad4:	10000915 	stw	zero,36(r2)
#endif

#if OS_TASK_PROFILE_EN > 0
        ptcb->OSTCBCtxSwCtr    = 0L;                       /* Initialize profiling variables           */
    fad8:	e0bff517 	ldw	r2,-44(fp)
    fadc:	10000e15 	stw	zero,56(r2)
        ptcb->OSTCBCyclesStart = 0L;
    fae0:	e0bff517 	ldw	r2,-44(fp)
    fae4:	10001015 	stw	zero,64(r2)
        ptcb->OSTCBCyclesTot   = 0L;
    fae8:	e0bff517 	ldw	r2,-44(fp)
    faec:	10000f15 	stw	zero,60(r2)
        ptcb->OSTCBStkBase     = (OS_STK *)0;
    faf0:	e0bff517 	ldw	r2,-44(fp)
    faf4:	10001115 	stw	zero,68(r2)
        ptcb->OSTCBStkUsed     = 0L;
    faf8:	e0bff517 	ldw	r2,-44(fp)
    fafc:	10001215 	stw	zero,72(r2)
#endif

#if OS_TASK_NAME_SIZE > 1
        ptcb->OSTCBTaskName[0] = '?';                      /* Unknown name at task creation            */
    fb00:	e0bff517 	ldw	r2,-44(fp)
    fb04:	00c00fc4 	movi	r3,63
    fb08:	10c01305 	stb	r3,76(r2)
        ptcb->OSTCBTaskName[1] = OS_ASCII_NUL;
    fb0c:	e0bff517 	ldw	r2,-44(fp)
    fb10:	10001345 	stb	zero,77(r2)
#endif

        OSTCBInitHook(ptcb);
    fb14:	e13ff517 	ldw	r4,-44(fp)
    fb18:	0018ef00 	call	18ef0 <OSTCBInitHook>

        OSTaskCreateHook(ptcb);                            /* Call user defined hook                   */
    fb1c:	e13ff517 	ldw	r4,-44(fp)
    fb20:	0018e080 	call	18e08 <OSTaskCreateHook>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    fb24:	0005303a 	rdctl	r2,status
    fb28:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    fb2c:	e0fff817 	ldw	r3,-32(fp)
    fb30:	00bfff84 	movi	r2,-2
    fb34:	1884703a 	and	r2,r3,r2
    fb38:	1001703a 	wrctl	status,r2
  
  return context;
    fb3c:	e0bff817 	ldw	r2,-32(fp)

        OS_ENTER_CRITICAL();
    fb40:	e0bff415 	stw	r2,-48(fp)
        OSTCBPrioTbl[prio] = ptcb;
    fb44:	e0fffb03 	ldbu	r3,-20(fp)
    fb48:	008000b4 	movhi	r2,2
    fb4c:	109b2204 	addi	r2,r2,27784
    fb50:	18c7883a 	add	r3,r3,r3
    fb54:	18c7883a 	add	r3,r3,r3
    fb58:	10c5883a 	add	r2,r2,r3
    fb5c:	e0fff517 	ldw	r3,-44(fp)
    fb60:	10c00015 	stw	r3,0(r2)
        ptcb->OSTCBNext    = OSTCBList;                    /* Link into TCB chain                      */
    fb64:	d0e80417 	ldw	r3,-24560(gp)
    fb68:	e0bff517 	ldw	r2,-44(fp)
    fb6c:	10c00515 	stw	r3,20(r2)
        ptcb->OSTCBPrev    = (OS_TCB *)0;
    fb70:	e0bff517 	ldw	r2,-44(fp)
    fb74:	10000615 	stw	zero,24(r2)
        if (OSTCBList != (OS_TCB *)0) {
    fb78:	d0a80417 	ldw	r2,-24560(gp)
    fb7c:	10000326 	beq	r2,zero,fb8c <OS_TCBInit+0x22c>
            OSTCBList->OSTCBPrev = ptcb;
    fb80:	d0a80417 	ldw	r2,-24560(gp)
    fb84:	e0fff517 	ldw	r3,-44(fp)
    fb88:	10c00615 	stw	r3,24(r2)
        }
        OSTCBList               = ptcb;
    fb8c:	e0bff517 	ldw	r2,-44(fp)
    fb90:	d0a80415 	stw	r2,-24560(gp)
        OSRdyGrp               |= ptcb->OSTCBBitY;         /* Make task ready to run                   */
    fb94:	e0bff517 	ldw	r2,-44(fp)
    fb98:	10c00d83 	ldbu	r3,54(r2)
    fb9c:	d0a80d03 	ldbu	r2,-24524(gp)
    fba0:	1884b03a 	or	r2,r3,r2
    fba4:	d0a80d05 	stb	r2,-24524(gp)
        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
    fba8:	e0bff517 	ldw	r2,-44(fp)
    fbac:	10800d03 	ldbu	r2,52(r2)
    fbb0:	10c03fcc 	andi	r3,r2,255
    fbb4:	e0bff517 	ldw	r2,-44(fp)
    fbb8:	10800d03 	ldbu	r2,52(r2)
    fbbc:	11003fcc 	andi	r4,r2,255
    fbc0:	d0a80d44 	addi	r2,gp,-24523
    fbc4:	2085883a 	add	r2,r4,r2
    fbc8:	11000003 	ldbu	r4,0(r2)
    fbcc:	e0bff517 	ldw	r2,-44(fp)
    fbd0:	10800d43 	ldbu	r2,53(r2)
    fbd4:	2084b03a 	or	r2,r4,r2
    fbd8:	1009883a 	mov	r4,r2
    fbdc:	d0a80d44 	addi	r2,gp,-24523
    fbe0:	1885883a 	add	r2,r3,r2
    fbe4:	11000005 	stb	r4,0(r2)
        OSTaskCtr++;                                       /* Increment the #tasks counter             */
    fbe8:	d0a80943 	ldbu	r2,-24539(gp)
    fbec:	10800044 	addi	r2,r2,1
    fbf0:	d0a80945 	stb	r2,-24539(gp)
    fbf4:	e0bff417 	ldw	r2,-48(fp)
    fbf8:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    fbfc:	e0bff917 	ldw	r2,-28(fp)
    fc00:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_NONE);
    fc04:	0005883a 	mov	r2,zero
    fc08:	00000506 	br	fc20 <OS_TCBInit+0x2c0>
    fc0c:	e0bff417 	ldw	r2,-48(fp)
    fc10:	e0bffa15 	stw	r2,-24(fp)
    fc14:	e0bffa17 	ldw	r2,-24(fp)
    fc18:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_TASK_NO_MORE_TCB);
    fc1c:	00801084 	movi	r2,66
}
    fc20:	e037883a 	mov	sp,fp
    fc24:	dfc00117 	ldw	ra,4(sp)
    fc28:	df000017 	ldw	fp,0(sp)
    fc2c:	dec00204 	addi	sp,sp,8
    fc30:	f800283a 	ret

0000fc34 <OSDebugInit>:
*********************************************************************************************************
*/

#if OS_DEBUG_EN > 0
void  OSDebugInit (void)
{
    fc34:	defffe04 	addi	sp,sp,-8
    fc38:	df000115 	stw	fp,4(sp)
    fc3c:	df000104 	addi	fp,sp,4
    void  *ptemp;

    
    ptemp = (void *)&OSDebugEn;
    fc40:	d0a01104 	addi	r2,gp,-32700
    fc44:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSEndiannessTest;
    fc48:	d0a01204 	addi	r2,gp,-32696
    fc4c:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSEventMax;
    fc50:	d0a01384 	addi	r2,gp,-32690
    fc54:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventNameSize;
    fc58:	d0a01404 	addi	r2,gp,-32688
    fc5c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventEn;
    fc60:	d0a01304 	addi	r2,gp,-32692
    fc64:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventSize;
    fc68:	d0a01484 	addi	r2,gp,-32686
    fc6c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventTblSize;
    fc70:	d0a01504 	addi	r2,gp,-32684
    fc74:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventMultiEn;
    fc78:	d0a01584 	addi	r2,gp,-32682
    fc7c:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSFlagEn;
    fc80:	d0a01604 	addi	r2,gp,-32680
    fc84:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagGrpSize;
    fc88:	d0a01684 	addi	r2,gp,-32678
    fc8c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagNodeSize;
    fc90:	d0a01704 	addi	r2,gp,-32676
    fc94:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagWidth;
    fc98:	d0a01784 	addi	r2,gp,-32674
    fc9c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagMax;
    fca0:	d0a01804 	addi	r2,gp,-32672
    fca4:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagNameSize;
    fca8:	d0a01884 	addi	r2,gp,-32670
    fcac:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSLowestPrio;
    fcb0:	d0a01904 	addi	r2,gp,-32668
    fcb4:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSMboxEn;
    fcb8:	d0a01984 	addi	r2,gp,-32666
    fcbc:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSMemEn;
    fcc0:	d0a01a04 	addi	r2,gp,-32664
    fcc4:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSMemMax;
    fcc8:	d0a01a84 	addi	r2,gp,-32662
    fccc:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSMemNameSize;
    fcd0:	d0a01b04 	addi	r2,gp,-32660
    fcd4:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSMemSize;
    fcd8:	d0a01b84 	addi	r2,gp,-32658
    fcdc:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSMemTblSize;
    fce0:	d0a01c04 	addi	r2,gp,-32656
    fce4:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSMutexEn;
    fce8:	d0a01c84 	addi	r2,gp,-32654
    fcec:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSPtrSize;
    fcf0:	d0a01d04 	addi	r2,gp,-32652
    fcf4:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSQEn;
    fcf8:	d0a01d84 	addi	r2,gp,-32650
    fcfc:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSQMax;
    fd00:	d0a01e04 	addi	r2,gp,-32648
    fd04:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSQSize;
    fd08:	d0a01e84 	addi	r2,gp,-32646
    fd0c:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSRdyTblSize;
    fd10:	d0a01f04 	addi	r2,gp,-32644
    fd14:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSSemEn;
    fd18:	d0a01f84 	addi	r2,gp,-32642
    fd1c:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSStkWidth;
    fd20:	d0a02004 	addi	r2,gp,-32640
    fd24:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSTaskCreateEn;
    fd28:	d0a02084 	addi	r2,gp,-32638
    fd2c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskCreateExtEn;
    fd30:	d0a02104 	addi	r2,gp,-32636
    fd34:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskDelEn;
    fd38:	d0a02184 	addi	r2,gp,-32634
    fd3c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskIdleStkSize;
    fd40:	d0a02204 	addi	r2,gp,-32632
    fd44:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskProfileEn;
    fd48:	d0a02284 	addi	r2,gp,-32630
    fd4c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskMax;
    fd50:	d0a02304 	addi	r2,gp,-32628
    fd54:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskNameSize;
    fd58:	d0a02384 	addi	r2,gp,-32626
    fd5c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskStatEn;
    fd60:	d0a02404 	addi	r2,gp,-32624
    fd64:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskStatStkSize;
    fd68:	d0a02484 	addi	r2,gp,-32622
    fd6c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskStatStkChkEn;
    fd70:	d0a02504 	addi	r2,gp,-32620
    fd74:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskSwHookEn;
    fd78:	d0a02584 	addi	r2,gp,-32618
    fd7c:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSTCBPrioTblMax;
    fd80:	d0a02604 	addi	r2,gp,-32616
    fd84:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTCBSize;
    fd88:	d0a02684 	addi	r2,gp,-32614
    fd8c:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSTicksPerSec;
    fd90:	d0a02704 	addi	r2,gp,-32612
    fd94:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTimeTickHookEn;
    fd98:	d0a02784 	addi	r2,gp,-32610
    fd9c:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSTmrWheelSize;
    ptemp = (void *)&OSTmrWheelTblSize;
#endif

    ptemp = (void *)&OSVersionNbr;
    fda0:	d0a02804 	addi	r2,gp,-32608
    fda4:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSDataSize;
    fda8:	d0a02d04 	addi	r2,gp,-32588
    fdac:	e0bfff15 	stw	r2,-4(fp)

    ptemp = ptemp;                             /* Prevent compiler warning for 'ptemp' not being used! */
}
    fdb0:	e037883a 	mov	sp,fp
    fdb4:	df000017 	ldw	fp,0(sp)
    fdb8:	dec00104 	addi	sp,sp,4
    fdbc:	f800283a 	ret

0000fdc0 <OSFlagAccept>:
*********************************************************************************************************
*/

#if OS_FLAG_ACCEPT_EN > 0
OS_FLAGS  OSFlagAccept (OS_FLAG_GRP *pgrp, OS_FLAGS flags, INT8U wait_type, INT8U *perr)
{
    fdc0:	defff204 	addi	sp,sp,-56
    fdc4:	df000d15 	stw	fp,52(sp)
    fdc8:	df000d04 	addi	fp,sp,52
    fdcc:	e13ffc15 	stw	r4,-16(fp)
    fdd0:	2807883a 	mov	r3,r5
    fdd4:	3005883a 	mov	r2,r6
    fdd8:	e1ffff15 	stw	r7,-4(fp)
    fddc:	e0fffd0d 	sth	r3,-12(fp)
    fde0:	e0bffe05 	stb	r2,-8(fp)
    OS_FLAGS      flags_rdy;
    INT8U         result;
    BOOLEAN       consume;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR     cpu_sr = 0;
    fde4:	e03ff415 	stw	zero,-48(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
    fde8:	e0bfff17 	ldw	r2,-4(fp)
    fdec:	1000021e 	bne	r2,zero,fdf8 <OSFlagAccept+0x38>
        return ((OS_FLAGS)0);
    fdf0:	0005883a 	mov	r2,zero
    fdf4:	0000b006 	br	100b8 <OSFlagAccept+0x2f8>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {                        /* Validate 'pgrp'                          */
    fdf8:	e0bffc17 	ldw	r2,-16(fp)
    fdfc:	1000051e 	bne	r2,zero,fe14 <OSFlagAccept+0x54>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
    fe00:	e0bfff17 	ldw	r2,-4(fp)
    fe04:	00c01b84 	movi	r3,110
    fe08:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
    fe0c:	0005883a 	mov	r2,zero
    fe10:	0000a906 	br	100b8 <OSFlagAccept+0x2f8>
    }
#endif
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {          /* Validate event block type                */
    fe14:	e0bffc17 	ldw	r2,-16(fp)
    fe18:	10800003 	ldbu	r2,0(r2)
    fe1c:	10803fcc 	andi	r2,r2,255
    fe20:	10800160 	cmpeqi	r2,r2,5
    fe24:	1000051e 	bne	r2,zero,fe3c <OSFlagAccept+0x7c>
        *perr = OS_ERR_EVENT_TYPE;
    fe28:	e0bfff17 	ldw	r2,-4(fp)
    fe2c:	00c00044 	movi	r3,1
    fe30:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
    fe34:	0005883a 	mov	r2,zero
    fe38:	00009f06 	br	100b8 <OSFlagAccept+0x2f8>
    }
    result = (INT8U)(wait_type & OS_FLAG_CONSUME);
    fe3c:	e0fffe03 	ldbu	r3,-8(fp)
    fe40:	00bfe004 	movi	r2,-128
    fe44:	1884703a 	and	r2,r3,r2
    fe48:	e0bff505 	stb	r2,-44(fp)
    if (result != (INT8U)0) {                              /* See if we need to consume the flags      */
    fe4c:	e0bff503 	ldbu	r2,-44(fp)
    fe50:	10000626 	beq	r2,zero,fe6c <OSFlagAccept+0xac>
        wait_type &= ~OS_FLAG_CONSUME;
    fe54:	e0bffe03 	ldbu	r2,-8(fp)
    fe58:	10801fcc 	andi	r2,r2,127
    fe5c:	e0bffe05 	stb	r2,-8(fp)
        consume    = OS_TRUE;
    fe60:	00800044 	movi	r2,1
    fe64:	e0bff385 	stb	r2,-50(fp)
    fe68:	00000106 	br	fe70 <OSFlagAccept+0xb0>
    } else {
        consume    = OS_FALSE;
    fe6c:	e03ff385 	stb	zero,-50(fp)
    }
/*$PAGE*/
    *perr = OS_ERR_NONE;                                   /* Assume NO error until proven otherwise.  */
    fe70:	e0bfff17 	ldw	r2,-4(fp)
    fe74:	10000005 	stb	zero,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    fe78:	0005303a 	rdctl	r2,status
    fe7c:	e0bff615 	stw	r2,-40(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    fe80:	e0fff617 	ldw	r3,-40(fp)
    fe84:	00bfff84 	movi	r2,-2
    fe88:	1884703a 	and	r2,r3,r2
    fe8c:	1001703a 	wrctl	status,r2
  
  return context;
    fe90:	e0bff617 	ldw	r2,-40(fp)
    OS_ENTER_CRITICAL();
    fe94:	e0bff415 	stw	r2,-48(fp)
    switch (wait_type) {
    fe98:	e0bffe03 	ldbu	r2,-8(fp)
    fe9c:	10c00060 	cmpeqi	r3,r2,1
    fea0:	18005f1e 	bne	r3,zero,10020 <OSFlagAccept+0x260>
    fea4:	10c00088 	cmpgei	r3,r2,2
    fea8:	1800021e 	bne	r3,zero,feb4 <OSFlagAccept+0xf4>
    feac:	10003f26 	beq	r2,zero,ffac <OSFlagAccept+0x1ec>
    feb0:	00007706 	br	10090 <OSFlagAccept+0x2d0>
    feb4:	10c000a0 	cmpeqi	r3,r2,2
    feb8:	1800031e 	bne	r3,zero,fec8 <OSFlagAccept+0x108>
    febc:	108000e0 	cmpeqi	r2,r2,3
    fec0:	10001e1e 	bne	r2,zero,ff3c <OSFlagAccept+0x17c>
    fec4:	00007206 	br	10090 <OSFlagAccept+0x2d0>
        case OS_FLAG_WAIT_SET_ALL:                         /* See if all required flags are set        */
             flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);     /* Extract only the bits we want   */
    fec8:	e0bffc17 	ldw	r2,-16(fp)
    fecc:	10c0020b 	ldhu	r3,8(r2)
    fed0:	e0bffd0b 	ldhu	r2,-12(fp)
    fed4:	1884703a 	and	r2,r3,r2
    fed8:	e0bff30d 	sth	r2,-52(fp)
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
    fedc:	e0fff30b 	ldhu	r3,-52(fp)
    fee0:	e0bffd0b 	ldhu	r2,-12(fp)
    fee4:	18800d1e 	bne	r3,r2,ff1c <OSFlagAccept+0x15c>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
    fee8:	e0bff383 	ldbu	r2,-50(fp)
    feec:	10800058 	cmpnei	r2,r2,1
    fef0:	10000d1e 	bne	r2,zero,ff28 <OSFlagAccept+0x168>
                     pgrp->OSFlagFlags &= ~flags_rdy;      /* Clear ONLY the flags that we wanted      */
    fef4:	e0bffc17 	ldw	r2,-16(fp)
    fef8:	1080020b 	ldhu	r2,8(r2)
    fefc:	1007883a 	mov	r3,r2
    ff00:	e0bff30b 	ldhu	r2,-52(fp)
    ff04:	0084303a 	nor	r2,zero,r2
    ff08:	1884703a 	and	r2,r3,r2
    ff0c:	1007883a 	mov	r3,r2
    ff10:	e0bffc17 	ldw	r2,-16(fp)
    ff14:	10c0020d 	sth	r3,8(r2)
    ff18:	00000306 	br	ff28 <OSFlagAccept+0x168>
                 }
             } else {
                 *perr = OS_ERR_FLAG_NOT_RDY;
    ff1c:	e0bfff17 	ldw	r2,-4(fp)
    ff20:	00c01c04 	movi	r3,112
    ff24:	10c00005 	stb	r3,0(r2)
    ff28:	e0bff417 	ldw	r2,-48(fp)
    ff2c:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    ff30:	e0bff717 	ldw	r2,-36(fp)
    ff34:	1001703a 	wrctl	status,r2
             }
             OS_EXIT_CRITICAL();
             break;
    ff38:	00005e06 	br	100b4 <OSFlagAccept+0x2f4>

        case OS_FLAG_WAIT_SET_ANY:
             flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);     /* Extract only the bits we want   */
    ff3c:	e0bffc17 	ldw	r2,-16(fp)
    ff40:	10c0020b 	ldhu	r3,8(r2)
    ff44:	e0bffd0b 	ldhu	r2,-12(fp)
    ff48:	1884703a 	and	r2,r3,r2
    ff4c:	e0bff30d 	sth	r2,-52(fp)
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag set                      */
    ff50:	e0bff30b 	ldhu	r2,-52(fp)
    ff54:	10000d26 	beq	r2,zero,ff8c <OSFlagAccept+0x1cc>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
    ff58:	e0bff383 	ldbu	r2,-50(fp)
    ff5c:	10800058 	cmpnei	r2,r2,1
    ff60:	10000d1e 	bne	r2,zero,ff98 <OSFlagAccept+0x1d8>
                     pgrp->OSFlagFlags &= ~flags_rdy;      /* Clear ONLY the flags that we got         */
    ff64:	e0bffc17 	ldw	r2,-16(fp)
    ff68:	1080020b 	ldhu	r2,8(r2)
    ff6c:	1007883a 	mov	r3,r2
    ff70:	e0bff30b 	ldhu	r2,-52(fp)
    ff74:	0084303a 	nor	r2,zero,r2
    ff78:	1884703a 	and	r2,r3,r2
    ff7c:	1007883a 	mov	r3,r2
    ff80:	e0bffc17 	ldw	r2,-16(fp)
    ff84:	10c0020d 	sth	r3,8(r2)
    ff88:	00000306 	br	ff98 <OSFlagAccept+0x1d8>
                 }
             } else {
                 *perr = OS_ERR_FLAG_NOT_RDY;
    ff8c:	e0bfff17 	ldw	r2,-4(fp)
    ff90:	00c01c04 	movi	r3,112
    ff94:	10c00005 	stb	r3,0(r2)
    ff98:	e0bff417 	ldw	r2,-48(fp)
    ff9c:	e0bff815 	stw	r2,-32(fp)
    ffa0:	e0bff817 	ldw	r2,-32(fp)
    ffa4:	1001703a 	wrctl	status,r2
             }
             OS_EXIT_CRITICAL();
             break;
    ffa8:	00004206 	br	100b4 <OSFlagAccept+0x2f4>

#if OS_FLAG_WAIT_CLR_EN > 0
        case OS_FLAG_WAIT_CLR_ALL:                         /* See if all required flags are cleared    */
             flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags);  /* Extract only the bits we want     */
    ffac:	e0bffc17 	ldw	r2,-16(fp)
    ffb0:	1080020b 	ldhu	r2,8(r2)
    ffb4:	0084303a 	nor	r2,zero,r2
    ffb8:	1007883a 	mov	r3,r2
    ffbc:	e0bffd0b 	ldhu	r2,-12(fp)
    ffc0:	1884703a 	and	r2,r3,r2
    ffc4:	e0bff30d 	sth	r2,-52(fp)
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
    ffc8:	e0fff30b 	ldhu	r3,-52(fp)
    ffcc:	e0bffd0b 	ldhu	r2,-12(fp)
    ffd0:	18800b1e 	bne	r3,r2,10000 <OSFlagAccept+0x240>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
    ffd4:	e0bff383 	ldbu	r2,-50(fp)
    ffd8:	10800058 	cmpnei	r2,r2,1
    ffdc:	10000b1e 	bne	r2,zero,1000c <OSFlagAccept+0x24c>
                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we wanted        */
    ffe0:	e0bffc17 	ldw	r2,-16(fp)
    ffe4:	10c0020b 	ldhu	r3,8(r2)
    ffe8:	e0bff30b 	ldhu	r2,-52(fp)
    ffec:	1884b03a 	or	r2,r3,r2
    fff0:	1007883a 	mov	r3,r2
    fff4:	e0bffc17 	ldw	r2,-16(fp)
    fff8:	10c0020d 	sth	r3,8(r2)
    fffc:	00000306 	br	1000c <OSFlagAccept+0x24c>
                 }
             } else {
                 *perr = OS_ERR_FLAG_NOT_RDY;
   10000:	e0bfff17 	ldw	r2,-4(fp)
   10004:	00c01c04 	movi	r3,112
   10008:	10c00005 	stb	r3,0(r2)
   1000c:	e0bff417 	ldw	r2,-48(fp)
   10010:	e0bff915 	stw	r2,-28(fp)
   10014:	e0bff917 	ldw	r2,-28(fp)
   10018:	1001703a 	wrctl	status,r2
             }
             OS_EXIT_CRITICAL();
             break;
   1001c:	00002506 	br	100b4 <OSFlagAccept+0x2f4>

        case OS_FLAG_WAIT_CLR_ANY:
             flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags); /* Extract only the bits we want      */
   10020:	e0bffc17 	ldw	r2,-16(fp)
   10024:	1080020b 	ldhu	r2,8(r2)
   10028:	0084303a 	nor	r2,zero,r2
   1002c:	1007883a 	mov	r3,r2
   10030:	e0bffd0b 	ldhu	r2,-12(fp)
   10034:	1884703a 	and	r2,r3,r2
   10038:	e0bff30d 	sth	r2,-52(fp)
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag cleared                  */
   1003c:	e0bff30b 	ldhu	r2,-52(fp)
   10040:	10000b26 	beq	r2,zero,10070 <OSFlagAccept+0x2b0>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
   10044:	e0bff383 	ldbu	r2,-50(fp)
   10048:	10800058 	cmpnei	r2,r2,1
   1004c:	10000b1e 	bne	r2,zero,1007c <OSFlagAccept+0x2bc>
                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we got           */
   10050:	e0bffc17 	ldw	r2,-16(fp)
   10054:	10c0020b 	ldhu	r3,8(r2)
   10058:	e0bff30b 	ldhu	r2,-52(fp)
   1005c:	1884b03a 	or	r2,r3,r2
   10060:	1007883a 	mov	r3,r2
   10064:	e0bffc17 	ldw	r2,-16(fp)
   10068:	10c0020d 	sth	r3,8(r2)
   1006c:	00000306 	br	1007c <OSFlagAccept+0x2bc>
                 }
             } else {
                 *perr = OS_ERR_FLAG_NOT_RDY;
   10070:	e0bfff17 	ldw	r2,-4(fp)
   10074:	00c01c04 	movi	r3,112
   10078:	10c00005 	stb	r3,0(r2)
   1007c:	e0bff417 	ldw	r2,-48(fp)
   10080:	e0bffa15 	stw	r2,-24(fp)
   10084:	e0bffa17 	ldw	r2,-24(fp)
   10088:	1001703a 	wrctl	status,r2
             }
             OS_EXIT_CRITICAL();
             break;
   1008c:	00000906 	br	100b4 <OSFlagAccept+0x2f4>
   10090:	e0bff417 	ldw	r2,-48(fp)
   10094:	e0bffb15 	stw	r2,-20(fp)
   10098:	e0bffb17 	ldw	r2,-20(fp)
   1009c:	1001703a 	wrctl	status,r2
#endif

        default:
             OS_EXIT_CRITICAL();
             flags_rdy = (OS_FLAGS)0;
   100a0:	e03ff30d 	sth	zero,-52(fp)
             *perr     = OS_ERR_FLAG_WAIT_TYPE;
   100a4:	e0bfff17 	ldw	r2,-4(fp)
   100a8:	00c01bc4 	movi	r3,111
   100ac:	10c00005 	stb	r3,0(r2)
             break;
   100b0:	0001883a 	nop
    }
    return (flags_rdy);
   100b4:	e0bff30b 	ldhu	r2,-52(fp)
}
   100b8:	e037883a 	mov	sp,fp
   100bc:	df000017 	ldw	fp,0(sp)
   100c0:	dec00104 	addi	sp,sp,4
   100c4:	f800283a 	ret

000100c8 <OSFlagCreate>:
* Called from: Task ONLY
*********************************************************************************************************
*/

OS_FLAG_GRP  *OSFlagCreate (OS_FLAGS flags, INT8U *perr)
{
   100c8:	defff804 	addi	sp,sp,-32
   100cc:	df000715 	stw	fp,28(sp)
   100d0:	df000704 	addi	fp,sp,28
   100d4:	2005883a 	mov	r2,r4
   100d8:	e17fff15 	stw	r5,-4(fp)
   100dc:	e0bffe0d 	sth	r2,-8(fp)
    OS_FLAG_GRP *pgrp;
#if OS_CRITICAL_METHOD == 3                         /* Allocate storage for CPU status register        */
    OS_CPU_SR    cpu_sr = 0;
   100e0:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                       /* Validate 'perr'                                 */
   100e4:	e0bfff17 	ldw	r2,-4(fp)
   100e8:	1000021e 	bne	r2,zero,100f4 <OSFlagCreate+0x2c>
        return ((OS_FLAG_GRP *)0);
   100ec:	0005883a 	mov	r2,zero
   100f0:	00003b06 	br	101e0 <OSFlagCreate+0x118>
    }
#endif
    if (OSIntNesting > 0) {                         /* See if called from ISR ...                      */
   100f4:	008000b4 	movhi	r2,2
   100f8:	10b69a04 	addi	r2,r2,-9624
   100fc:	10800003 	ldbu	r2,0(r2)
   10100:	10803fcc 	andi	r2,r2,255
   10104:	10000526 	beq	r2,zero,1011c <OSFlagCreate+0x54>
        *perr = OS_ERR_CREATE_ISR;                  /* ... can't CREATE from an ISR                    */
   10108:	e0bfff17 	ldw	r2,-4(fp)
   1010c:	00c00404 	movi	r3,16
   10110:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAG_GRP *)0);
   10114:	0005883a 	mov	r2,zero
   10118:	00003106 	br	101e0 <OSFlagCreate+0x118>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1011c:	0005303a 	rdctl	r2,status
   10120:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   10124:	e0fffb17 	ldw	r3,-20(fp)
   10128:	00bfff84 	movi	r2,-2
   1012c:	1884703a 	and	r2,r3,r2
   10130:	1001703a 	wrctl	status,r2
  
  return context;
   10134:	e0bffb17 	ldw	r2,-20(fp)
    }
    OS_ENTER_CRITICAL();
   10138:	e0bff915 	stw	r2,-28(fp)
    pgrp = OSFlagFreeList;                          /* Get next free event flag                        */
   1013c:	008000b4 	movhi	r2,2
   10140:	10b69d04 	addi	r2,r2,-9612
   10144:	10800017 	ldw	r2,0(r2)
   10148:	e0bffa15 	stw	r2,-24(fp)
    if (pgrp != (OS_FLAG_GRP *)0) {                 /* See if we have event flag groups available      */
   1014c:	e0bffa17 	ldw	r2,-24(fp)
   10150:	10001b26 	beq	r2,zero,101c0 <OSFlagCreate+0xf8>
                                                    /* Adjust free list                                */
        OSFlagFreeList       = (OS_FLAG_GRP *)OSFlagFreeList->OSFlagWaitList;
   10154:	008000b4 	movhi	r2,2
   10158:	10b69d04 	addi	r2,r2,-9612
   1015c:	10800017 	ldw	r2,0(r2)
   10160:	10c00117 	ldw	r3,4(r2)
   10164:	008000b4 	movhi	r2,2
   10168:	10b69d04 	addi	r2,r2,-9612
   1016c:	10c00015 	stw	r3,0(r2)
        pgrp->OSFlagType     = OS_EVENT_TYPE_FLAG;  /* Set to event flag group type                    */
   10170:	e0bffa17 	ldw	r2,-24(fp)
   10174:	00c00144 	movi	r3,5
   10178:	10c00005 	stb	r3,0(r2)
        pgrp->OSFlagFlags    = flags;               /* Set to desired initial value                    */
   1017c:	e0bffa17 	ldw	r2,-24(fp)
   10180:	e0fffe0b 	ldhu	r3,-8(fp)
   10184:	10c0020d 	sth	r3,8(r2)
        pgrp->OSFlagWaitList = (void *)0;           /* Clear list of tasks waiting on flags            */
   10188:	e0bffa17 	ldw	r2,-24(fp)
   1018c:	10000115 	stw	zero,4(r2)
#if OS_FLAG_NAME_SIZE > 1
        pgrp->OSFlagName[0]  = '?';
   10190:	e0bffa17 	ldw	r2,-24(fp)
   10194:	00c00fc4 	movi	r3,63
   10198:	10c00285 	stb	r3,10(r2)
        pgrp->OSFlagName[1]  = OS_ASCII_NUL;
   1019c:	e0bffa17 	ldw	r2,-24(fp)
   101a0:	100002c5 	stb	zero,11(r2)
   101a4:	e0bff917 	ldw	r2,-28(fp)
   101a8:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   101ac:	e0bffc17 	ldw	r2,-16(fp)
   101b0:	1001703a 	wrctl	status,r2
#endif
        OS_EXIT_CRITICAL();
        *perr                = OS_ERR_NONE;
   101b4:	e0bfff17 	ldw	r2,-4(fp)
   101b8:	10000005 	stb	zero,0(r2)
   101bc:	00000706 	br	101dc <OSFlagCreate+0x114>
   101c0:	e0bff917 	ldw	r2,-28(fp)
   101c4:	e0bffd15 	stw	r2,-12(fp)
   101c8:	e0bffd17 	ldw	r2,-12(fp)
   101cc:	1001703a 	wrctl	status,r2
    } else {
        OS_EXIT_CRITICAL();
        *perr                = OS_ERR_FLAG_GRP_DEPLETED;
   101d0:	e0bfff17 	ldw	r2,-4(fp)
   101d4:	00c01c84 	movi	r3,114
   101d8:	10c00005 	stb	r3,0(r2)
    }
    return (pgrp);                                  /* Return pointer to event flag group              */
   101dc:	e0bffa17 	ldw	r2,-24(fp)
}
   101e0:	e037883a 	mov	sp,fp
   101e4:	df000017 	ldw	fp,0(sp)
   101e8:	dec00104 	addi	sp,sp,4
   101ec:	f800283a 	ret

000101f0 <OSFlagDel>:
*********************************************************************************************************
*/

#if OS_FLAG_DEL_EN > 0
OS_FLAG_GRP  *OSFlagDel (OS_FLAG_GRP *pgrp, INT8U opt, INT8U *perr)
{
   101f0:	defff204 	addi	sp,sp,-56
   101f4:	dfc00d15 	stw	ra,52(sp)
   101f8:	df000c15 	stw	fp,48(sp)
   101fc:	df000c04 	addi	fp,sp,48
   10200:	e13ffd15 	stw	r4,-12(fp)
   10204:	2805883a 	mov	r2,r5
   10208:	e1bfff15 	stw	r6,-4(fp)
   1020c:	e0bffe05 	stb	r2,-8(fp)
    BOOLEAN       tasks_waiting;
    OS_FLAG_NODE *pnode;
    OS_FLAG_GRP  *pgrp_return;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR     cpu_sr = 0;
   10210:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
   10214:	e0bfff17 	ldw	r2,-4(fp)
   10218:	1000021e 	bne	r2,zero,10224 <OSFlagDel+0x34>
        return (pgrp);
   1021c:	e0bffd17 	ldw	r2,-12(fp)
   10220:	00008a06 	br	1044c <OSFlagDel+0x25c>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {                        /* Validate 'pgrp'                          */
   10224:	e0bffd17 	ldw	r2,-12(fp)
   10228:	1000051e 	bne	r2,zero,10240 <OSFlagDel+0x50>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
   1022c:	e0bfff17 	ldw	r2,-4(fp)
   10230:	00c01b84 	movi	r3,110
   10234:	10c00005 	stb	r3,0(r2)
        return (pgrp);
   10238:	e0bffd17 	ldw	r2,-12(fp)
   1023c:	00008306 	br	1044c <OSFlagDel+0x25c>
    }
#endif
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
   10240:	008000b4 	movhi	r2,2
   10244:	10b69a04 	addi	r2,r2,-9624
   10248:	10800003 	ldbu	r2,0(r2)
   1024c:	10803fcc 	andi	r2,r2,255
   10250:	10000526 	beq	r2,zero,10268 <OSFlagDel+0x78>
        *perr = OS_ERR_DEL_ISR;                            /* ... can't DELETE from an ISR             */
   10254:	e0bfff17 	ldw	r2,-4(fp)
   10258:	00c003c4 	movi	r3,15
   1025c:	10c00005 	stb	r3,0(r2)
        return (pgrp);
   10260:	e0bffd17 	ldw	r2,-12(fp)
   10264:	00007906 	br	1044c <OSFlagDel+0x25c>
    }
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {          /* Validate event group type                */
   10268:	e0bffd17 	ldw	r2,-12(fp)
   1026c:	10800003 	ldbu	r2,0(r2)
   10270:	10803fcc 	andi	r2,r2,255
   10274:	10800160 	cmpeqi	r2,r2,5
   10278:	1000051e 	bne	r2,zero,10290 <OSFlagDel+0xa0>
        *perr = OS_ERR_EVENT_TYPE;
   1027c:	e0bfff17 	ldw	r2,-4(fp)
   10280:	00c00044 	movi	r3,1
   10284:	10c00005 	stb	r3,0(r2)
        return (pgrp);
   10288:	e0bffd17 	ldw	r2,-12(fp)
   1028c:	00006f06 	br	1044c <OSFlagDel+0x25c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   10290:	0005303a 	rdctl	r2,status
   10294:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   10298:	e0fff817 	ldw	r3,-32(fp)
   1029c:	00bfff84 	movi	r2,-2
   102a0:	1884703a 	and	r2,r3,r2
   102a4:	1001703a 	wrctl	status,r2
  
  return context;
   102a8:	e0bff817 	ldw	r2,-32(fp)
    }
    OS_ENTER_CRITICAL();
   102ac:	e0bff715 	stw	r2,-36(fp)
    if (pgrp->OSFlagWaitList != (void *)0) {               /* See if any tasks waiting on event flags  */
   102b0:	e0bffd17 	ldw	r2,-12(fp)
   102b4:	10800117 	ldw	r2,4(r2)
   102b8:	10000326 	beq	r2,zero,102c8 <OSFlagDel+0xd8>
        tasks_waiting = OS_TRUE;                           /* Yes                                      */
   102bc:	00800044 	movi	r2,1
   102c0:	e0bff405 	stb	r2,-48(fp)
   102c4:	00000106 	br	102cc <OSFlagDel+0xdc>
    } else {
        tasks_waiting = OS_FALSE;                          /* No                                       */
   102c8:	e03ff405 	stb	zero,-48(fp)
    }
    switch (opt) {
   102cc:	e0bffe03 	ldbu	r2,-8(fp)
   102d0:	10000326 	beq	r2,zero,102e0 <OSFlagDel+0xf0>
   102d4:	10800060 	cmpeqi	r2,r2,1
   102d8:	1000271e 	bne	r2,zero,10378 <OSFlagDel+0x188>
   102dc:	00005006 	br	10420 <OSFlagDel+0x230>
        case OS_DEL_NO_PEND:                               /* Delete group if no task waiting          */
             if (tasks_waiting == OS_FALSE) {
   102e0:	e0bff403 	ldbu	r2,-48(fp)
   102e4:	10001a1e 	bne	r2,zero,10350 <OSFlagDel+0x160>
#if OS_FLAG_NAME_SIZE > 1
                 pgrp->OSFlagName[0]  = '?';               /* Unknown name                             */
   102e8:	e0bffd17 	ldw	r2,-12(fp)
   102ec:	00c00fc4 	movi	r3,63
   102f0:	10c00285 	stb	r3,10(r2)
                 pgrp->OSFlagName[1]  = OS_ASCII_NUL;
   102f4:	e0bffd17 	ldw	r2,-12(fp)
   102f8:	100002c5 	stb	zero,11(r2)
#endif
                 pgrp->OSFlagType     = OS_EVENT_TYPE_UNUSED;
   102fc:	e0bffd17 	ldw	r2,-12(fp)
   10300:	10000005 	stb	zero,0(r2)
                 pgrp->OSFlagWaitList = (void *)OSFlagFreeList; /* Return group to free list           */
   10304:	008000b4 	movhi	r2,2
   10308:	10b69d04 	addi	r2,r2,-9612
   1030c:	10c00017 	ldw	r3,0(r2)
   10310:	e0bffd17 	ldw	r2,-12(fp)
   10314:	10c00115 	stw	r3,4(r2)
                 pgrp->OSFlagFlags    = (OS_FLAGS)0;
   10318:	e0bffd17 	ldw	r2,-12(fp)
   1031c:	1000020d 	sth	zero,8(r2)
                 OSFlagFreeList       = pgrp;
   10320:	008000b4 	movhi	r2,2
   10324:	10b69d04 	addi	r2,r2,-9612
   10328:	e0fffd17 	ldw	r3,-12(fp)
   1032c:	10c00015 	stw	r3,0(r2)
   10330:	e0bff717 	ldw	r2,-36(fp)
   10334:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   10338:	e0bff917 	ldw	r2,-28(fp)
   1033c:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                = OS_ERR_NONE;
   10340:	e0bfff17 	ldw	r2,-4(fp)
   10344:	10000005 	stb	zero,0(r2)
                 pgrp_return          = (OS_FLAG_GRP *)0;  /* Event Flag Group has been deleted        */
   10348:	e03ff615 	stw	zero,-40(fp)
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                = OS_ERR_TASK_WAITING;
                 pgrp_return          = pgrp;
             }
             break;
   1034c:	00003e06 	br	10448 <OSFlagDel+0x258>
   10350:	e0bff717 	ldw	r2,-36(fp)
   10354:	e0bffa15 	stw	r2,-24(fp)
   10358:	e0bffa17 	ldw	r2,-24(fp)
   1035c:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                = OS_ERR_NONE;
                 pgrp_return          = (OS_FLAG_GRP *)0;  /* Event Flag Group has been deleted        */
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                = OS_ERR_TASK_WAITING;
   10360:	e0bfff17 	ldw	r2,-4(fp)
   10364:	00c01244 	movi	r3,73
   10368:	10c00005 	stb	r3,0(r2)
                 pgrp_return          = pgrp;
   1036c:	e0bffd17 	ldw	r2,-12(fp)
   10370:	e0bff615 	stw	r2,-40(fp)
             }
             break;
   10374:	00003406 	br	10448 <OSFlagDel+0x258>

        case OS_DEL_ALWAYS:                                /* Always delete the event flag group       */
             pnode = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
   10378:	e0bffd17 	ldw	r2,-12(fp)
   1037c:	10800117 	ldw	r2,4(r2)
   10380:	e0bff515 	stw	r2,-44(fp)
             while (pnode != (OS_FLAG_NODE *)0) {          /* Ready ALL tasks waiting for flags        */
   10384:	00000606 	br	103a0 <OSFlagDel+0x1b0>
                 (void)OS_FlagTaskRdy(pnode, (OS_FLAGS)0);
   10388:	e13ff517 	ldw	r4,-44(fp)
   1038c:	000b883a 	mov	r5,zero
   10390:	001142c0 	call	1142c <OS_FlagTaskRdy>
                 pnode = (OS_FLAG_NODE *)pnode->OSFlagNodeNext;
   10394:	e0bff517 	ldw	r2,-44(fp)
   10398:	10800017 	ldw	r2,0(r2)
   1039c:	e0bff515 	stw	r2,-44(fp)
             }
             break;

        case OS_DEL_ALWAYS:                                /* Always delete the event flag group       */
             pnode = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
             while (pnode != (OS_FLAG_NODE *)0) {          /* Ready ALL tasks waiting for flags        */
   103a0:	e0bff517 	ldw	r2,-44(fp)
   103a4:	103ff81e 	bne	r2,zero,10388 <__alt_mem_Flash_flash_data+0xf4010388>
                 (void)OS_FlagTaskRdy(pnode, (OS_FLAGS)0);
                 pnode = (OS_FLAG_NODE *)pnode->OSFlagNodeNext;
             }
#if OS_FLAG_NAME_SIZE > 1
             pgrp->OSFlagName[0]  = '?';                   /* Unknown name                             */
   103a8:	e0bffd17 	ldw	r2,-12(fp)
   103ac:	00c00fc4 	movi	r3,63
   103b0:	10c00285 	stb	r3,10(r2)
             pgrp->OSFlagName[1]  = OS_ASCII_NUL;
   103b4:	e0bffd17 	ldw	r2,-12(fp)
   103b8:	100002c5 	stb	zero,11(r2)
#endif
             pgrp->OSFlagType     = OS_EVENT_TYPE_UNUSED;
   103bc:	e0bffd17 	ldw	r2,-12(fp)
   103c0:	10000005 	stb	zero,0(r2)
             pgrp->OSFlagWaitList = (void *)OSFlagFreeList;/* Return group to free list                */
   103c4:	008000b4 	movhi	r2,2
   103c8:	10b69d04 	addi	r2,r2,-9612
   103cc:	10c00017 	ldw	r3,0(r2)
   103d0:	e0bffd17 	ldw	r2,-12(fp)
   103d4:	10c00115 	stw	r3,4(r2)
             pgrp->OSFlagFlags    = (OS_FLAGS)0;
   103d8:	e0bffd17 	ldw	r2,-12(fp)
   103dc:	1000020d 	sth	zero,8(r2)
             OSFlagFreeList       = pgrp;
   103e0:	008000b4 	movhi	r2,2
   103e4:	10b69d04 	addi	r2,r2,-9612
   103e8:	e0fffd17 	ldw	r3,-12(fp)
   103ec:	10c00015 	stw	r3,0(r2)
   103f0:	e0bff717 	ldw	r2,-36(fp)
   103f4:	e0bffb15 	stw	r2,-20(fp)
   103f8:	e0bffb17 	ldw	r2,-20(fp)
   103fc:	1001703a 	wrctl	status,r2
             OS_EXIT_CRITICAL();
             if (tasks_waiting == OS_TRUE) {               /* Reschedule only if task(s) were waiting  */
   10400:	e0bff403 	ldbu	r2,-48(fp)
   10404:	10800058 	cmpnei	r2,r2,1
   10408:	1000011e 	bne	r2,zero,10410 <OSFlagDel+0x220>
                 OS_Sched();                               /* Find highest priority task ready to run  */
   1040c:	000f55c0 	call	f55c <OS_Sched>
             }
             *perr = OS_ERR_NONE;
   10410:	e0bfff17 	ldw	r2,-4(fp)
   10414:	10000005 	stb	zero,0(r2)
             pgrp_return          = (OS_FLAG_GRP *)0;      /* Event Flag Group has been deleted        */
   10418:	e03ff615 	stw	zero,-40(fp)
             break;
   1041c:	00000a06 	br	10448 <OSFlagDel+0x258>
   10420:	e0bff717 	ldw	r2,-36(fp)
   10424:	e0bffc15 	stw	r2,-16(fp)
   10428:	e0bffc17 	ldw	r2,-16(fp)
   1042c:	1001703a 	wrctl	status,r2

        default:
             OS_EXIT_CRITICAL();
             *perr                = OS_ERR_INVALID_OPT;
   10430:	e0bfff17 	ldw	r2,-4(fp)
   10434:	00c001c4 	movi	r3,7
   10438:	10c00005 	stb	r3,0(r2)
             pgrp_return          = pgrp;
   1043c:	e0bffd17 	ldw	r2,-12(fp)
   10440:	e0bff615 	stw	r2,-40(fp)
             break;
   10444:	0001883a 	nop
    }
    return (pgrp_return);
   10448:	e0bff617 	ldw	r2,-40(fp)
}
   1044c:	e037883a 	mov	sp,fp
   10450:	dfc00117 	ldw	ra,4(sp)
   10454:	df000017 	ldw	fp,0(sp)
   10458:	dec00204 	addi	sp,sp,8
   1045c:	f800283a 	ret

00010460 <OSFlagNameGet>:
*********************************************************************************************************
*/

#if OS_FLAG_NAME_SIZE > 1
INT8U  OSFlagNameGet (OS_FLAG_GRP *pgrp, INT8U *pname, INT8U *perr)
{
   10460:	defff604 	addi	sp,sp,-40
   10464:	dfc00915 	stw	ra,36(sp)
   10468:	df000815 	stw	fp,32(sp)
   1046c:	df000804 	addi	fp,sp,32
   10470:	e13ffd15 	stw	r4,-12(fp)
   10474:	e17ffe15 	stw	r5,-8(fp)
   10478:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   1047c:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
   10480:	e0bfff17 	ldw	r2,-4(fp)
   10484:	1000021e 	bne	r2,zero,10490 <OSFlagNameGet+0x30>
        return (0);
   10488:	0005883a 	mov	r2,zero
   1048c:	00003b06 	br	1057c <OSFlagNameGet+0x11c>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {              /* Is 'pgrp' a NULL pointer?                          */
   10490:	e0bffd17 	ldw	r2,-12(fp)
   10494:	1000051e 	bne	r2,zero,104ac <OSFlagNameGet+0x4c>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
   10498:	e0bfff17 	ldw	r2,-4(fp)
   1049c:	00c01b84 	movi	r3,110
   104a0:	10c00005 	stb	r3,0(r2)
        return (0);
   104a4:	0005883a 	mov	r2,zero
   104a8:	00003406 	br	1057c <OSFlagNameGet+0x11c>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
   104ac:	e0bffe17 	ldw	r2,-8(fp)
   104b0:	1000051e 	bne	r2,zero,104c8 <OSFlagNameGet+0x68>
        *perr = OS_ERR_PNAME_NULL;
   104b4:	e0bfff17 	ldw	r2,-4(fp)
   104b8:	00c00304 	movi	r3,12
   104bc:	10c00005 	stb	r3,0(r2)
        return (0);
   104c0:	0005883a 	mov	r2,zero
   104c4:	00002d06 	br	1057c <OSFlagNameGet+0x11c>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
   104c8:	008000b4 	movhi	r2,2
   104cc:	10b69a04 	addi	r2,r2,-9624
   104d0:	10800003 	ldbu	r2,0(r2)
   104d4:	10803fcc 	andi	r2,r2,255
   104d8:	10000526 	beq	r2,zero,104f0 <OSFlagNameGet+0x90>
        *perr = OS_ERR_NAME_GET_ISR;
   104dc:	e0bfff17 	ldw	r2,-4(fp)
   104e0:	00c00444 	movi	r3,17
   104e4:	10c00005 	stb	r3,0(r2)
        return (0);
   104e8:	0005883a 	mov	r2,zero
   104ec:	00002306 	br	1057c <OSFlagNameGet+0x11c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   104f0:	0005303a 	rdctl	r2,status
   104f4:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   104f8:	e0fffa17 	ldw	r3,-24(fp)
   104fc:	00bfff84 	movi	r2,-2
   10500:	1884703a 	and	r2,r3,r2
   10504:	1001703a 	wrctl	status,r2
  
  return context;
   10508:	e0bffa17 	ldw	r2,-24(fp)
    }
    OS_ENTER_CRITICAL();
   1050c:	e0bff815 	stw	r2,-32(fp)
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {
   10510:	e0bffd17 	ldw	r2,-12(fp)
   10514:	10800003 	ldbu	r2,0(r2)
   10518:	10803fcc 	andi	r2,r2,255
   1051c:	10800160 	cmpeqi	r2,r2,5
   10520:	1000091e 	bne	r2,zero,10548 <OSFlagNameGet+0xe8>
   10524:	e0bff817 	ldw	r2,-32(fp)
   10528:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1052c:	e0bffb17 	ldw	r2,-20(fp)
   10530:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_EVENT_TYPE;
   10534:	e0bfff17 	ldw	r2,-4(fp)
   10538:	00c00044 	movi	r3,1
   1053c:	10c00005 	stb	r3,0(r2)
        return (0);
   10540:	0005883a 	mov	r2,zero
   10544:	00000d06 	br	1057c <OSFlagNameGet+0x11c>
    }
    len   = OS_StrCopy(pname, pgrp->OSFlagName); /* Copy name from OS_FLAG_GRP                         */
   10548:	e0bffd17 	ldw	r2,-12(fp)
   1054c:	10800284 	addi	r2,r2,10
   10550:	e13ffe17 	ldw	r4,-8(fp)
   10554:	100b883a 	mov	r5,r2
   10558:	000f6980 	call	f698 <OS_StrCopy>
   1055c:	e0bff905 	stb	r2,-28(fp)
   10560:	e0bff817 	ldw	r2,-32(fp)
   10564:	e0bffc15 	stw	r2,-16(fp)
   10568:	e0bffc17 	ldw	r2,-16(fp)
   1056c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
   10570:	e0bfff17 	ldw	r2,-4(fp)
   10574:	10000005 	stb	zero,0(r2)
    return (len);
   10578:	e0bff903 	ldbu	r2,-28(fp)
}
   1057c:	e037883a 	mov	sp,fp
   10580:	dfc00117 	ldw	ra,4(sp)
   10584:	df000017 	ldw	fp,0(sp)
   10588:	dec00204 	addi	sp,sp,8
   1058c:	f800283a 	ret

00010590 <OSFlagNameSet>:
*********************************************************************************************************
*/

#if OS_FLAG_NAME_SIZE > 1
void  OSFlagNameSet (OS_FLAG_GRP *pgrp, INT8U *pname, INT8U *perr)
{
   10590:	defff504 	addi	sp,sp,-44
   10594:	dfc00a15 	stw	ra,40(sp)
   10598:	df000915 	stw	fp,36(sp)
   1059c:	df000904 	addi	fp,sp,36
   105a0:	e13ffd15 	stw	r4,-12(fp)
   105a4:	e17ffe15 	stw	r5,-8(fp)
   105a8:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   105ac:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
   105b0:	e0bfff17 	ldw	r2,-4(fp)
   105b4:	1000011e 	bne	r2,zero,105bc <OSFlagNameSet+0x2c>
        return;
   105b8:	00004406 	br	106cc <OSFlagNameSet+0x13c>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {              /* Is 'pgrp' a NULL pointer?                          */
   105bc:	e0bffd17 	ldw	r2,-12(fp)
   105c0:	1000041e 	bne	r2,zero,105d4 <OSFlagNameSet+0x44>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
   105c4:	e0bfff17 	ldw	r2,-4(fp)
   105c8:	00c01b84 	movi	r3,110
   105cc:	10c00005 	stb	r3,0(r2)
        return;
   105d0:	00003e06 	br	106cc <OSFlagNameSet+0x13c>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
   105d4:	e0bffe17 	ldw	r2,-8(fp)
   105d8:	1000041e 	bne	r2,zero,105ec <OSFlagNameSet+0x5c>
        *perr = OS_ERR_PNAME_NULL;
   105dc:	e0bfff17 	ldw	r2,-4(fp)
   105e0:	00c00304 	movi	r3,12
   105e4:	10c00005 	stb	r3,0(r2)
        return;
   105e8:	00003806 	br	106cc <OSFlagNameSet+0x13c>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
   105ec:	008000b4 	movhi	r2,2
   105f0:	10b69a04 	addi	r2,r2,-9624
   105f4:	10800003 	ldbu	r2,0(r2)
   105f8:	10803fcc 	andi	r2,r2,255
   105fc:	10000426 	beq	r2,zero,10610 <OSFlagNameSet+0x80>
        *perr = OS_ERR_NAME_SET_ISR;
   10600:	e0bfff17 	ldw	r2,-4(fp)
   10604:	00c00484 	movi	r3,18
   10608:	10c00005 	stb	r3,0(r2)
        return;
   1060c:	00002f06 	br	106cc <OSFlagNameSet+0x13c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   10610:	0005303a 	rdctl	r2,status
   10614:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   10618:	e0fff917 	ldw	r3,-28(fp)
   1061c:	00bfff84 	movi	r2,-2
   10620:	1884703a 	and	r2,r3,r2
   10624:	1001703a 	wrctl	status,r2
  
  return context;
   10628:	e0bff917 	ldw	r2,-28(fp)
    }
    OS_ENTER_CRITICAL();
   1062c:	e0bff715 	stw	r2,-36(fp)
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {
   10630:	e0bffd17 	ldw	r2,-12(fp)
   10634:	10800003 	ldbu	r2,0(r2)
   10638:	10803fcc 	andi	r2,r2,255
   1063c:	10800160 	cmpeqi	r2,r2,5
   10640:	1000081e 	bne	r2,zero,10664 <OSFlagNameSet+0xd4>
   10644:	e0bff717 	ldw	r2,-36(fp)
   10648:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1064c:	e0bffa17 	ldw	r2,-24(fp)
   10650:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_EVENT_TYPE;
   10654:	e0bfff17 	ldw	r2,-4(fp)
   10658:	00c00044 	movi	r3,1
   1065c:	10c00005 	stb	r3,0(r2)
        return;
   10660:	00001a06 	br	106cc <OSFlagNameSet+0x13c>
    }
    len = OS_StrLen(pname);                      /* Can we fit the string in the storage area?         */
   10664:	e13ffe17 	ldw	r4,-8(fp)
   10668:	000f70c0 	call	f70c <OS_StrLen>
   1066c:	e0bff805 	stb	r2,-32(fp)
    if (len > (OS_FLAG_NAME_SIZE - 1)) {         /* No                                                 */
   10670:	e0bff803 	ldbu	r2,-32(fp)
   10674:	10800830 	cmpltui	r2,r2,32
   10678:	1000081e 	bne	r2,zero,1069c <OSFlagNameSet+0x10c>
   1067c:	e0bff717 	ldw	r2,-36(fp)
   10680:	e0bffb15 	stw	r2,-20(fp)
   10684:	e0bffb17 	ldw	r2,-20(fp)
   10688:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_FLAG_NAME_TOO_LONG;
   1068c:	e0bfff17 	ldw	r2,-4(fp)
   10690:	00c01cc4 	movi	r3,115
   10694:	10c00005 	stb	r3,0(r2)
        return;
   10698:	00000c06 	br	106cc <OSFlagNameSet+0x13c>
    }
    (void)OS_StrCopy(pgrp->OSFlagName, pname);   /* Yes, copy name from OS_FLAG_GRP                    */
   1069c:	e0bffd17 	ldw	r2,-12(fp)
   106a0:	10800284 	addi	r2,r2,10
   106a4:	1009883a 	mov	r4,r2
   106a8:	e17ffe17 	ldw	r5,-8(fp)
   106ac:	000f6980 	call	f698 <OS_StrCopy>
   106b0:	e0bff717 	ldw	r2,-36(fp)
   106b4:	e0bffc15 	stw	r2,-16(fp)
   106b8:	e0bffc17 	ldw	r2,-16(fp)
   106bc:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
   106c0:	e0bfff17 	ldw	r2,-4(fp)
   106c4:	10000005 	stb	zero,0(r2)
    return;
   106c8:	0001883a 	nop
}
   106cc:	e037883a 	mov	sp,fp
   106d0:	dfc00117 	ldw	ra,4(sp)
   106d4:	df000017 	ldw	fp,0(sp)
   106d8:	dec00204 	addi	sp,sp,8
   106dc:	f800283a 	ret

000106e0 <OSFlagPend>:
*                 event flags.
*********************************************************************************************************
*/

OS_FLAGS  OSFlagPend (OS_FLAG_GRP *pgrp, OS_FLAGS flags, INT8U wait_type, INT16U timeout, INT8U *perr)
{
   106e0:	deffe204 	addi	sp,sp,-120
   106e4:	dfc01d15 	stw	ra,116(sp)
   106e8:	df001c15 	stw	fp,112(sp)
   106ec:	df001c04 	addi	fp,sp,112
   106f0:	e13ffc15 	stw	r4,-16(fp)
   106f4:	2809883a 	mov	r4,r5
   106f8:	3007883a 	mov	r3,r6
   106fc:	3805883a 	mov	r2,r7
   10700:	e13ffd0d 	sth	r4,-12(fp)
   10704:	e0fffe05 	stb	r3,-8(fp)
   10708:	e0bfff0d 	sth	r2,-4(fp)
    OS_FLAGS      flags_rdy;
    INT8U         result;
    INT8U         pend_stat;
    BOOLEAN       consume;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR     cpu_sr = 0;
   1070c:	e03fe615 	stw	zero,-104(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
   10710:	e0800217 	ldw	r2,8(fp)
   10714:	1000021e 	bne	r2,zero,10720 <OSFlagPend+0x40>
        return ((OS_FLAGS)0);
   10718:	0005883a 	mov	r2,zero
   1071c:	00016706 	br	10cbc <OSFlagPend+0x5dc>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {                        /* Validate 'pgrp'                          */
   10720:	e0bffc17 	ldw	r2,-16(fp)
   10724:	1000051e 	bne	r2,zero,1073c <OSFlagPend+0x5c>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
   10728:	e0800217 	ldw	r2,8(fp)
   1072c:	00c01b84 	movi	r3,110
   10730:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
   10734:	0005883a 	mov	r2,zero
   10738:	00016006 	br	10cbc <OSFlagPend+0x5dc>
    }
#endif
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
   1073c:	008000b4 	movhi	r2,2
   10740:	10b69a04 	addi	r2,r2,-9624
   10744:	10800003 	ldbu	r2,0(r2)
   10748:	10803fcc 	andi	r2,r2,255
   1074c:	10000526 	beq	r2,zero,10764 <OSFlagPend+0x84>
        *perr = OS_ERR_PEND_ISR;                           /* ... can't PEND from an ISR               */
   10750:	e0800217 	ldw	r2,8(fp)
   10754:	00c00084 	movi	r3,2
   10758:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
   1075c:	0005883a 	mov	r2,zero
   10760:	00015606 	br	10cbc <OSFlagPend+0x5dc>
    }
    if (OSLockNesting > 0) {                               /* See if called with scheduler locked ...  */
   10764:	008000b4 	movhi	r2,2
   10768:	10b68c04 	addi	r2,r2,-9680
   1076c:	10800003 	ldbu	r2,0(r2)
   10770:	10803fcc 	andi	r2,r2,255
   10774:	10000526 	beq	r2,zero,1078c <OSFlagPend+0xac>
        *perr = OS_ERR_PEND_LOCKED;                        /* ... can't PEND when locked               */
   10778:	e0800217 	ldw	r2,8(fp)
   1077c:	00c00344 	movi	r3,13
   10780:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
   10784:	0005883a 	mov	r2,zero
   10788:	00014c06 	br	10cbc <OSFlagPend+0x5dc>
    }
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {          /* Validate event block type                */
   1078c:	e0bffc17 	ldw	r2,-16(fp)
   10790:	10800003 	ldbu	r2,0(r2)
   10794:	10803fcc 	andi	r2,r2,255
   10798:	10800160 	cmpeqi	r2,r2,5
   1079c:	1000051e 	bne	r2,zero,107b4 <OSFlagPend+0xd4>
        *perr = OS_ERR_EVENT_TYPE;
   107a0:	e0800217 	ldw	r2,8(fp)
   107a4:	00c00044 	movi	r3,1
   107a8:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
   107ac:	0005883a 	mov	r2,zero
   107b0:	00014206 	br	10cbc <OSFlagPend+0x5dc>
    }
    result = (INT8U)(wait_type & OS_FLAG_CONSUME);
   107b4:	e0fffe03 	ldbu	r3,-8(fp)
   107b8:	00bfe004 	movi	r2,-128
   107bc:	1884703a 	and	r2,r3,r2
   107c0:	e0bfe705 	stb	r2,-100(fp)
    if (result != (INT8U)0) {                             /* See if we need to consume the flags      */
   107c4:	e0bfe703 	ldbu	r2,-100(fp)
   107c8:	10000626 	beq	r2,zero,107e4 <OSFlagPend+0x104>
        wait_type &= ~(INT8U)OS_FLAG_CONSUME;
   107cc:	e0bffe03 	ldbu	r2,-8(fp)
   107d0:	10801fcc 	andi	r2,r2,127
   107d4:	e0bffe05 	stb	r2,-8(fp)
        consume    = OS_TRUE;
   107d8:	00800044 	movi	r2,1
   107dc:	e0bfe505 	stb	r2,-108(fp)
   107e0:	00000106 	br	107e8 <OSFlagPend+0x108>
    } else {
        consume    = OS_FALSE;
   107e4:	e03fe505 	stb	zero,-108(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   107e8:	0005303a 	rdctl	r2,status
   107ec:	e0bfe915 	stw	r2,-92(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   107f0:	e0ffe917 	ldw	r3,-92(fp)
   107f4:	00bfff84 	movi	r2,-2
   107f8:	1884703a 	and	r2,r3,r2
   107fc:	1001703a 	wrctl	status,r2
  
  return context;
   10800:	e0bfe917 	ldw	r2,-92(fp)
    }
/*$PAGE*/
    OS_ENTER_CRITICAL();
   10804:	e0bfe615 	stw	r2,-104(fp)
    switch (wait_type) {
   10808:	e0bffe03 	ldbu	r2,-8(fp)
   1080c:	10c00060 	cmpeqi	r3,r2,1
   10810:	1800921e 	bne	r3,zero,10a5c <OSFlagPend+0x37c>
   10814:	10c00088 	cmpgei	r3,r2,2
   10818:	1800021e 	bne	r3,zero,10824 <OSFlagPend+0x144>
   1081c:	10006126 	beq	r2,zero,109a4 <OSFlagPend+0x2c4>
   10820:	0000bb06 	br	10b10 <OSFlagPend+0x430>
   10824:	10c000a0 	cmpeqi	r3,r2,2
   10828:	1800031e 	bne	r3,zero,10838 <OSFlagPend+0x158>
   1082c:	108000e0 	cmpeqi	r2,r2,3
   10830:	10002f1e 	bne	r2,zero,108f0 <OSFlagPend+0x210>
   10834:	0000b606 	br	10b10 <OSFlagPend+0x430>
        case OS_FLAG_WAIT_SET_ALL:                         /* See if all required flags are set        */
             flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);   /* Extract only the bits we want     */
   10838:	e0bffc17 	ldw	r2,-16(fp)
   1083c:	10c0020b 	ldhu	r3,8(r2)
   10840:	e0bffd0b 	ldhu	r2,-12(fp)
   10844:	1884703a 	and	r2,r3,r2
   10848:	e0bfe78d 	sth	r2,-98(fp)
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
   1084c:	e0ffe78b 	ldhu	r3,-98(fp)
   10850:	e0bffd0b 	ldhu	r2,-12(fp)
   10854:	1880191e 	bne	r3,r2,108bc <OSFlagPend+0x1dc>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
   10858:	e0bfe503 	ldbu	r2,-108(fp)
   1085c:	10800058 	cmpnei	r2,r2,1
   10860:	1000091e 	bne	r2,zero,10888 <OSFlagPend+0x1a8>
                     pgrp->OSFlagFlags &= ~flags_rdy;      /* Clear ONLY the flags that we wanted      */
   10864:	e0bffc17 	ldw	r2,-16(fp)
   10868:	1080020b 	ldhu	r2,8(r2)
   1086c:	1007883a 	mov	r3,r2
   10870:	e0bfe78b 	ldhu	r2,-98(fp)
   10874:	0084303a 	nor	r2,zero,r2
   10878:	1884703a 	and	r2,r3,r2
   1087c:	1007883a 	mov	r3,r2
   10880:	e0bffc17 	ldw	r2,-16(fp)
   10884:	10c0020d 	sth	r3,8(r2)
                 }
                 OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
   10888:	008000b4 	movhi	r2,2
   1088c:	10b69b04 	addi	r2,r2,-9620
   10890:	10800017 	ldw	r2,0(r2)
   10894:	e0ffe78b 	ldhu	r3,-98(fp)
   10898:	10c00b0d 	sth	r3,44(r2)
   1089c:	e0bfe617 	ldw	r2,-104(fp)
   108a0:	e0bfea15 	stw	r2,-88(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   108a4:	e0bfea17 	ldw	r2,-88(fp)
   108a8:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
                 *perr                   = OS_ERR_NONE;
   108ac:	e0800217 	ldw	r2,8(fp)
   108b0:	10000005 	stb	zero,0(r2)
                 return (flags_rdy);
   108b4:	e0bfe78b 	ldhu	r2,-98(fp)
   108b8:	00010006 	br	10cbc <OSFlagPend+0x5dc>
             } else {                                      /* Block task until events occur or timeout */
                 OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
   108bc:	e1bffd0b 	ldhu	r6,-12(fp)
   108c0:	e0fffe03 	ldbu	r3,-8(fp)
   108c4:	e0bfff0b 	ldhu	r2,-4(fp)
   108c8:	e17ff704 	addi	r5,fp,-36
   108cc:	d8800015 	stw	r2,0(sp)
   108d0:	e13ffc17 	ldw	r4,-16(fp)
   108d4:	180f883a 	mov	r7,r3
   108d8:	00111840 	call	11184 <OS_FlagBlock>
   108dc:	e0bfe617 	ldw	r2,-104(fp)
   108e0:	e0bfeb15 	stw	r2,-84(fp)
   108e4:	e0bfeb17 	ldw	r2,-84(fp)
   108e8:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
             }
             break;
   108ec:	00009206 	br	10b38 <OSFlagPend+0x458>

        case OS_FLAG_WAIT_SET_ANY:
             flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);    /* Extract only the bits we want    */
   108f0:	e0bffc17 	ldw	r2,-16(fp)
   108f4:	10c0020b 	ldhu	r3,8(r2)
   108f8:	e0bffd0b 	ldhu	r2,-12(fp)
   108fc:	1884703a 	and	r2,r3,r2
   10900:	e0bfe78d 	sth	r2,-98(fp)
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag set                      */
   10904:	e0bfe78b 	ldhu	r2,-98(fp)
   10908:	10001926 	beq	r2,zero,10970 <OSFlagPend+0x290>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
   1090c:	e0bfe503 	ldbu	r2,-108(fp)
   10910:	10800058 	cmpnei	r2,r2,1
   10914:	1000091e 	bne	r2,zero,1093c <OSFlagPend+0x25c>
                     pgrp->OSFlagFlags &= ~flags_rdy;      /* Clear ONLY the flags that we got         */
   10918:	e0bffc17 	ldw	r2,-16(fp)
   1091c:	1080020b 	ldhu	r2,8(r2)
   10920:	1007883a 	mov	r3,r2
   10924:	e0bfe78b 	ldhu	r2,-98(fp)
   10928:	0084303a 	nor	r2,zero,r2
   1092c:	1884703a 	and	r2,r3,r2
   10930:	1007883a 	mov	r3,r2
   10934:	e0bffc17 	ldw	r2,-16(fp)
   10938:	10c0020d 	sth	r3,8(r2)
                 }
                 OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
   1093c:	008000b4 	movhi	r2,2
   10940:	10b69b04 	addi	r2,r2,-9620
   10944:	10800017 	ldw	r2,0(r2)
   10948:	e0ffe78b 	ldhu	r3,-98(fp)
   1094c:	10c00b0d 	sth	r3,44(r2)
   10950:	e0bfe617 	ldw	r2,-104(fp)
   10954:	e0bfec15 	stw	r2,-80(fp)
   10958:	e0bfec17 	ldw	r2,-80(fp)
   1095c:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
                 *perr                   = OS_ERR_NONE;
   10960:	e0800217 	ldw	r2,8(fp)
   10964:	10000005 	stb	zero,0(r2)
                 return (flags_rdy);
   10968:	e0bfe78b 	ldhu	r2,-98(fp)
   1096c:	0000d306 	br	10cbc <OSFlagPend+0x5dc>
             } else {                                      /* Block task until events occur or timeout */
                 OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
   10970:	e1bffd0b 	ldhu	r6,-12(fp)
   10974:	e0fffe03 	ldbu	r3,-8(fp)
   10978:	e0bfff0b 	ldhu	r2,-4(fp)
   1097c:	e17ff704 	addi	r5,fp,-36
   10980:	d8800015 	stw	r2,0(sp)
   10984:	e13ffc17 	ldw	r4,-16(fp)
   10988:	180f883a 	mov	r7,r3
   1098c:	00111840 	call	11184 <OS_FlagBlock>
   10990:	e0bfe617 	ldw	r2,-104(fp)
   10994:	e0bfed15 	stw	r2,-76(fp)
   10998:	e0bfed17 	ldw	r2,-76(fp)
   1099c:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
             }
             break;
   109a0:	00006506 	br	10b38 <OSFlagPend+0x458>

#if OS_FLAG_WAIT_CLR_EN > 0
        case OS_FLAG_WAIT_CLR_ALL:                         /* See if all required flags are cleared    */
             flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags);  /* Extract only the bits we want     */
   109a4:	e0bffc17 	ldw	r2,-16(fp)
   109a8:	1080020b 	ldhu	r2,8(r2)
   109ac:	0084303a 	nor	r2,zero,r2
   109b0:	1007883a 	mov	r3,r2
   109b4:	e0bffd0b 	ldhu	r2,-12(fp)
   109b8:	1884703a 	and	r2,r3,r2
   109bc:	e0bfe78d 	sth	r2,-98(fp)
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
   109c0:	e0ffe78b 	ldhu	r3,-98(fp)
   109c4:	e0bffd0b 	ldhu	r2,-12(fp)
   109c8:	1880171e 	bne	r3,r2,10a28 <OSFlagPend+0x348>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
   109cc:	e0bfe503 	ldbu	r2,-108(fp)
   109d0:	10800058 	cmpnei	r2,r2,1
   109d4:	1000071e 	bne	r2,zero,109f4 <OSFlagPend+0x314>
                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we wanted        */
   109d8:	e0bffc17 	ldw	r2,-16(fp)
   109dc:	10c0020b 	ldhu	r3,8(r2)
   109e0:	e0bfe78b 	ldhu	r2,-98(fp)
   109e4:	1884b03a 	or	r2,r3,r2
   109e8:	1007883a 	mov	r3,r2
   109ec:	e0bffc17 	ldw	r2,-16(fp)
   109f0:	10c0020d 	sth	r3,8(r2)
                 }
                 OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
   109f4:	008000b4 	movhi	r2,2
   109f8:	10b69b04 	addi	r2,r2,-9620
   109fc:	10800017 	ldw	r2,0(r2)
   10a00:	e0ffe78b 	ldhu	r3,-98(fp)
   10a04:	10c00b0d 	sth	r3,44(r2)
   10a08:	e0bfe617 	ldw	r2,-104(fp)
   10a0c:	e0bfee15 	stw	r2,-72(fp)
   10a10:	e0bfee17 	ldw	r2,-72(fp)
   10a14:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
                 *perr                   = OS_ERR_NONE;
   10a18:	e0800217 	ldw	r2,8(fp)
   10a1c:	10000005 	stb	zero,0(r2)
                 return (flags_rdy);
   10a20:	e0bfe78b 	ldhu	r2,-98(fp)
   10a24:	0000a506 	br	10cbc <OSFlagPend+0x5dc>
             } else {                                      /* Block task until events occur or timeout */
                 OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
   10a28:	e1bffd0b 	ldhu	r6,-12(fp)
   10a2c:	e0fffe03 	ldbu	r3,-8(fp)
   10a30:	e0bfff0b 	ldhu	r2,-4(fp)
   10a34:	e17ff704 	addi	r5,fp,-36
   10a38:	d8800015 	stw	r2,0(sp)
   10a3c:	e13ffc17 	ldw	r4,-16(fp)
   10a40:	180f883a 	mov	r7,r3
   10a44:	00111840 	call	11184 <OS_FlagBlock>
   10a48:	e0bfe617 	ldw	r2,-104(fp)
   10a4c:	e0bfef15 	stw	r2,-68(fp)
   10a50:	e0bfef17 	ldw	r2,-68(fp)
   10a54:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
             }
             break;
   10a58:	00003706 	br	10b38 <OSFlagPend+0x458>

        case OS_FLAG_WAIT_CLR_ANY:
             flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags); /* Extract only the bits we want      */
   10a5c:	e0bffc17 	ldw	r2,-16(fp)
   10a60:	1080020b 	ldhu	r2,8(r2)
   10a64:	0084303a 	nor	r2,zero,r2
   10a68:	1007883a 	mov	r3,r2
   10a6c:	e0bffd0b 	ldhu	r2,-12(fp)
   10a70:	1884703a 	and	r2,r3,r2
   10a74:	e0bfe78d 	sth	r2,-98(fp)
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag cleared                  */
   10a78:	e0bfe78b 	ldhu	r2,-98(fp)
   10a7c:	10001726 	beq	r2,zero,10adc <OSFlagPend+0x3fc>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
   10a80:	e0bfe503 	ldbu	r2,-108(fp)
   10a84:	10800058 	cmpnei	r2,r2,1
   10a88:	1000071e 	bne	r2,zero,10aa8 <OSFlagPend+0x3c8>
                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we got           */
   10a8c:	e0bffc17 	ldw	r2,-16(fp)
   10a90:	10c0020b 	ldhu	r3,8(r2)
   10a94:	e0bfe78b 	ldhu	r2,-98(fp)
   10a98:	1884b03a 	or	r2,r3,r2
   10a9c:	1007883a 	mov	r3,r2
   10aa0:	e0bffc17 	ldw	r2,-16(fp)
   10aa4:	10c0020d 	sth	r3,8(r2)
                 }
                 OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
   10aa8:	008000b4 	movhi	r2,2
   10aac:	10b69b04 	addi	r2,r2,-9620
   10ab0:	10800017 	ldw	r2,0(r2)
   10ab4:	e0ffe78b 	ldhu	r3,-98(fp)
   10ab8:	10c00b0d 	sth	r3,44(r2)
   10abc:	e0bfe617 	ldw	r2,-104(fp)
   10ac0:	e0bff015 	stw	r2,-64(fp)
   10ac4:	e0bff017 	ldw	r2,-64(fp)
   10ac8:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
                 *perr                   = OS_ERR_NONE;
   10acc:	e0800217 	ldw	r2,8(fp)
   10ad0:	10000005 	stb	zero,0(r2)
                 return (flags_rdy);
   10ad4:	e0bfe78b 	ldhu	r2,-98(fp)
   10ad8:	00007806 	br	10cbc <OSFlagPend+0x5dc>
             } else {                                      /* Block task until events occur or timeout */
                 OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
   10adc:	e1bffd0b 	ldhu	r6,-12(fp)
   10ae0:	e0fffe03 	ldbu	r3,-8(fp)
   10ae4:	e0bfff0b 	ldhu	r2,-4(fp)
   10ae8:	e17ff704 	addi	r5,fp,-36
   10aec:	d8800015 	stw	r2,0(sp)
   10af0:	e13ffc17 	ldw	r4,-16(fp)
   10af4:	180f883a 	mov	r7,r3
   10af8:	00111840 	call	11184 <OS_FlagBlock>
   10afc:	e0bfe617 	ldw	r2,-104(fp)
   10b00:	e0bff115 	stw	r2,-60(fp)
   10b04:	e0bff117 	ldw	r2,-60(fp)
   10b08:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
             }
             break;
   10b0c:	00000a06 	br	10b38 <OSFlagPend+0x458>
   10b10:	e0bfe617 	ldw	r2,-104(fp)
   10b14:	e0bff215 	stw	r2,-56(fp)
   10b18:	e0bff217 	ldw	r2,-56(fp)
   10b1c:	1001703a 	wrctl	status,r2
#endif

        default:
             OS_EXIT_CRITICAL();
             flags_rdy = (OS_FLAGS)0;
   10b20:	e03fe78d 	sth	zero,-98(fp)
             *perr      = OS_ERR_FLAG_WAIT_TYPE;
   10b24:	e0800217 	ldw	r2,8(fp)
   10b28:	00c01bc4 	movi	r3,111
   10b2c:	10c00005 	stb	r3,0(r2)
             return (flags_rdy);
   10b30:	e0bfe78b 	ldhu	r2,-98(fp)
   10b34:	00006106 	br	10cbc <OSFlagPend+0x5dc>
    }
/*$PAGE*/
    OS_Sched();                                            /* Find next HPT ready to run               */
   10b38:	000f55c0 	call	f55c <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   10b3c:	0005303a 	rdctl	r2,status
   10b40:	e0bff315 	stw	r2,-52(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   10b44:	e0fff317 	ldw	r3,-52(fp)
   10b48:	00bfff84 	movi	r2,-2
   10b4c:	1884703a 	and	r2,r3,r2
   10b50:	1001703a 	wrctl	status,r2
  
  return context;
   10b54:	e0bff317 	ldw	r2,-52(fp)
    OS_ENTER_CRITICAL();
   10b58:	e0bfe615 	stw	r2,-104(fp)
    if (OSTCBCur->OSTCBStatPend != OS_STAT_PEND_OK) {      /* Have we timed-out or aborted?            */
   10b5c:	008000b4 	movhi	r2,2
   10b60:	10b69b04 	addi	r2,r2,-9620
   10b64:	10800017 	ldw	r2,0(r2)
   10b68:	10800c43 	ldbu	r2,49(r2)
   10b6c:	10803fcc 	andi	r2,r2,255
   10b70:	10002226 	beq	r2,zero,10bfc <OSFlagPend+0x51c>
        pend_stat                = OSTCBCur->OSTCBStatPend;
   10b74:	008000b4 	movhi	r2,2
   10b78:	10b69b04 	addi	r2,r2,-9620
   10b7c:	10800017 	ldw	r2,0(r2)
   10b80:	10800c43 	ldbu	r2,49(r2)
   10b84:	e0bfe805 	stb	r2,-96(fp)
        OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
   10b88:	008000b4 	movhi	r2,2
   10b8c:	10b69b04 	addi	r2,r2,-9620
   10b90:	10800017 	ldw	r2,0(r2)
   10b94:	10000c45 	stb	zero,49(r2)
        OS_FlagUnlink(&node);
   10b98:	e0bff704 	addi	r2,fp,-36
   10b9c:	1009883a 	mov	r4,r2
   10ba0:	001153c0 	call	1153c <OS_FlagUnlink>
        OSTCBCur->OSTCBStat      = OS_STAT_RDY;            /* Yes, make task ready-to-run              */
   10ba4:	008000b4 	movhi	r2,2
   10ba8:	10b69b04 	addi	r2,r2,-9620
   10bac:	10800017 	ldw	r2,0(r2)
   10bb0:	10000c05 	stb	zero,48(r2)
   10bb4:	e0bfe617 	ldw	r2,-104(fp)
   10bb8:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   10bbc:	e0bff417 	ldw	r2,-48(fp)
   10bc0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        flags_rdy                = (OS_FLAGS)0;
   10bc4:	e03fe78d 	sth	zero,-98(fp)
        switch (pend_stat) {
   10bc8:	e0bfe803 	ldbu	r2,-96(fp)
   10bcc:	108000a0 	cmpeqi	r2,r2,2
   10bd0:	10000426 	beq	r2,zero,10be4 <OSFlagPend+0x504>
            case OS_STAT_PEND_ABORT:
                 *perr = OS_ERR_PEND_ABORT;                 /* Indicate that we aborted   waiting       */
   10bd4:	e0800217 	ldw	r2,8(fp)
   10bd8:	00c00384 	movi	r3,14
   10bdc:	10c00005 	stb	r3,0(r2)
                 break;
   10be0:	00000406 	br	10bf4 <OSFlagPend+0x514>

            case OS_STAT_PEND_TO:
            default:
                 *perr = OS_ERR_TIMEOUT;                    /* Indicate that we timed-out waiting       */
   10be4:	e0800217 	ldw	r2,8(fp)
   10be8:	00c00284 	movi	r3,10
   10bec:	10c00005 	stb	r3,0(r2)
                 break;
   10bf0:	0001883a 	nop
        }
        return (flags_rdy);
   10bf4:	e0bfe78b 	ldhu	r2,-98(fp)
   10bf8:	00003006 	br	10cbc <OSFlagPend+0x5dc>
    }
    flags_rdy = OSTCBCur->OSTCBFlagsRdy;
   10bfc:	008000b4 	movhi	r2,2
   10c00:	10b69b04 	addi	r2,r2,-9620
   10c04:	10800017 	ldw	r2,0(r2)
   10c08:	10800b0b 	ldhu	r2,44(r2)
   10c0c:	e0bfe78d 	sth	r2,-98(fp)
    if (consume == OS_TRUE) {                              /* See if we need to consume the flags      */
   10c10:	e0bfe503 	ldbu	r2,-108(fp)
   10c14:	10800058 	cmpnei	r2,r2,1
   10c18:	1000211e 	bne	r2,zero,10ca0 <OSFlagPend+0x5c0>
        switch (wait_type) {
   10c1c:	e0bffe03 	ldbu	r2,-8(fp)
   10c20:	10001616 	blt	r2,zero,10c7c <OSFlagPend+0x59c>
   10c24:	10c00090 	cmplti	r3,r2,2
   10c28:	18000c1e 	bne	r3,zero,10c5c <OSFlagPend+0x57c>
   10c2c:	10800108 	cmpgei	r2,r2,4
   10c30:	1000121e 	bne	r2,zero,10c7c <OSFlagPend+0x59c>
            case OS_FLAG_WAIT_SET_ALL:
            case OS_FLAG_WAIT_SET_ANY:                     /* Clear ONLY the flags we got              */
                 pgrp->OSFlagFlags &= ~flags_rdy;
   10c34:	e0bffc17 	ldw	r2,-16(fp)
   10c38:	1080020b 	ldhu	r2,8(r2)
   10c3c:	1007883a 	mov	r3,r2
   10c40:	e0bfe78b 	ldhu	r2,-98(fp)
   10c44:	0084303a 	nor	r2,zero,r2
   10c48:	1884703a 	and	r2,r3,r2
   10c4c:	1007883a 	mov	r3,r2
   10c50:	e0bffc17 	ldw	r2,-16(fp)
   10c54:	10c0020d 	sth	r3,8(r2)
                 break;
   10c58:	00001106 	br	10ca0 <OSFlagPend+0x5c0>

#if OS_FLAG_WAIT_CLR_EN > 0
            case OS_FLAG_WAIT_CLR_ALL:
            case OS_FLAG_WAIT_CLR_ANY:                     /* Set   ONLY the flags we got              */
                 pgrp->OSFlagFlags |=  flags_rdy;
   10c5c:	e0bffc17 	ldw	r2,-16(fp)
   10c60:	10c0020b 	ldhu	r3,8(r2)
   10c64:	e0bfe78b 	ldhu	r2,-98(fp)
   10c68:	1884b03a 	or	r2,r3,r2
   10c6c:	1007883a 	mov	r3,r2
   10c70:	e0bffc17 	ldw	r2,-16(fp)
   10c74:	10c0020d 	sth	r3,8(r2)
                 break;
   10c78:	00000906 	br	10ca0 <OSFlagPend+0x5c0>
   10c7c:	e0bfe617 	ldw	r2,-104(fp)
   10c80:	e0bff515 	stw	r2,-44(fp)
   10c84:	e0bff517 	ldw	r2,-44(fp)
   10c88:	1001703a 	wrctl	status,r2
#endif
            default:
                 OS_EXIT_CRITICAL();
                 *perr = OS_ERR_FLAG_WAIT_TYPE;
   10c8c:	e0800217 	ldw	r2,8(fp)
   10c90:	00c01bc4 	movi	r3,111
   10c94:	10c00005 	stb	r3,0(r2)
                 return ((OS_FLAGS)0);
   10c98:	0005883a 	mov	r2,zero
   10c9c:	00000706 	br	10cbc <OSFlagPend+0x5dc>
   10ca0:	e0bfe617 	ldw	r2,-104(fp)
   10ca4:	e0bff615 	stw	r2,-40(fp)
   10ca8:	e0bff617 	ldw	r2,-40(fp)
   10cac:	1001703a 	wrctl	status,r2
        }
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;                                   /* Event(s) must have occurred              */
   10cb0:	e0800217 	ldw	r2,8(fp)
   10cb4:	10000005 	stb	zero,0(r2)
    return (flags_rdy);
   10cb8:	e0bfe78b 	ldhu	r2,-98(fp)
}
   10cbc:	e037883a 	mov	sp,fp
   10cc0:	dfc00117 	ldw	ra,4(sp)
   10cc4:	df000017 	ldw	fp,0(sp)
   10cc8:	dec00204 	addi	sp,sp,8
   10ccc:	f800283a 	ret

00010cd0 <OSFlagPendGetFlagsRdy>:
* Called from: Task ONLY
*********************************************************************************************************
*/

OS_FLAGS  OSFlagPendGetFlagsRdy (void)
{
   10cd0:	defffb04 	addi	sp,sp,-20
   10cd4:	df000415 	stw	fp,16(sp)
   10cd8:	df000404 	addi	fp,sp,16
    OS_FLAGS      flags;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR     cpu_sr = 0;
   10cdc:	e03ffc15 	stw	zero,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   10ce0:	0005303a 	rdctl	r2,status
   10ce4:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   10ce8:	e0fffe17 	ldw	r3,-8(fp)
   10cec:	00bfff84 	movi	r2,-2
   10cf0:	1884703a 	and	r2,r3,r2
   10cf4:	1001703a 	wrctl	status,r2
  
  return context;
   10cf8:	e0bffe17 	ldw	r2,-8(fp)
#endif



    OS_ENTER_CRITICAL();
   10cfc:	e0bffc15 	stw	r2,-16(fp)
    flags = OSTCBCur->OSTCBFlagsRdy;
   10d00:	008000b4 	movhi	r2,2
   10d04:	10b69b04 	addi	r2,r2,-9620
   10d08:	10800017 	ldw	r2,0(r2)
   10d0c:	10800b0b 	ldhu	r2,44(r2)
   10d10:	e0bffd0d 	sth	r2,-12(fp)
   10d14:	e0bffc17 	ldw	r2,-16(fp)
   10d18:	e0bfff15 	stw	r2,-4(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   10d1c:	e0bfff17 	ldw	r2,-4(fp)
   10d20:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (flags);
   10d24:	e0bffd0b 	ldhu	r2,-12(fp)
}
   10d28:	e037883a 	mov	sp,fp
   10d2c:	df000017 	ldw	fp,0(sp)
   10d30:	dec00104 	addi	sp,sp,4
   10d34:	f800283a 	ret

00010d38 <OSFlagPost>:
*              2) The amount of time interrupts are DISABLED depends on the number of tasks waiting on
*                 the event flag group.
*********************************************************************************************************
*/
OS_FLAGS  OSFlagPost (OS_FLAG_GRP *pgrp, OS_FLAGS flags, INT8U opt, INT8U *perr)
{
   10d38:	deffef04 	addi	sp,sp,-68
   10d3c:	dfc01015 	stw	ra,64(sp)
   10d40:	df000f15 	stw	fp,60(sp)
   10d44:	df000f04 	addi	fp,sp,60
   10d48:	e13ffc15 	stw	r4,-16(fp)
   10d4c:	2807883a 	mov	r3,r5
   10d50:	3005883a 	mov	r2,r6
   10d54:	e1ffff15 	stw	r7,-4(fp)
   10d58:	e0fffd0d 	sth	r3,-12(fp)
   10d5c:	e0bffe05 	stb	r2,-8(fp)
    BOOLEAN       sched;
    OS_FLAGS      flags_cur;
    OS_FLAGS      flags_rdy;
    BOOLEAN       rdy;
#if OS_CRITICAL_METHOD == 3                          /* Allocate storage for CPU status register       */
    OS_CPU_SR     cpu_sr = 0;
   10d60:	e03ff315 	stw	zero,-52(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                        /* Validate 'perr'                                */
   10d64:	e0bfff17 	ldw	r2,-4(fp)
   10d68:	1000021e 	bne	r2,zero,10d74 <OSFlagPost+0x3c>
        return ((OS_FLAGS)0);
   10d6c:	0005883a 	mov	r2,zero
   10d70:	0000ce06 	br	110ac <OSFlagPost+0x374>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {                  /* Validate 'pgrp'                                */
   10d74:	e0bffc17 	ldw	r2,-16(fp)
   10d78:	1000051e 	bne	r2,zero,10d90 <OSFlagPost+0x58>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
   10d7c:	e0bfff17 	ldw	r2,-4(fp)
   10d80:	00c01b84 	movi	r3,110
   10d84:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
   10d88:	0005883a 	mov	r2,zero
   10d8c:	0000c706 	br	110ac <OSFlagPost+0x374>
    }
#endif
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {    /* Make sure we are pointing to an event flag grp */
   10d90:	e0bffc17 	ldw	r2,-16(fp)
   10d94:	10800003 	ldbu	r2,0(r2)
   10d98:	10803fcc 	andi	r2,r2,255
   10d9c:	10800160 	cmpeqi	r2,r2,5
   10da0:	1000051e 	bne	r2,zero,10db8 <OSFlagPost+0x80>
        *perr = OS_ERR_EVENT_TYPE;
   10da4:	e0bfff17 	ldw	r2,-4(fp)
   10da8:	00c00044 	movi	r3,1
   10dac:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
   10db0:	0005883a 	mov	r2,zero
   10db4:	0000bd06 	br	110ac <OSFlagPost+0x374>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   10db8:	0005303a 	rdctl	r2,status
   10dbc:	e0bff615 	stw	r2,-40(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   10dc0:	e0fff617 	ldw	r3,-40(fp)
   10dc4:	00bfff84 	movi	r2,-2
   10dc8:	1884703a 	and	r2,r3,r2
   10dcc:	1001703a 	wrctl	status,r2
  
  return context;
   10dd0:	e0bff617 	ldw	r2,-40(fp)
    }
/*$PAGE*/
    OS_ENTER_CRITICAL();
   10dd4:	e0bff315 	stw	r2,-52(fp)
    switch (opt) {
   10dd8:	e0bffe03 	ldbu	r2,-8(fp)
   10ddc:	10000326 	beq	r2,zero,10dec <OSFlagPost+0xb4>
   10de0:	10800060 	cmpeqi	r2,r2,1
   10de4:	10000b1e 	bne	r2,zero,10e14 <OSFlagPost+0xdc>
   10de8:	00001206 	br	10e34 <OSFlagPost+0xfc>
        case OS_FLAG_CLR:
             pgrp->OSFlagFlags &= ~flags;            /* Clear the flags specified in the group         */
   10dec:	e0bffc17 	ldw	r2,-16(fp)
   10df0:	1080020b 	ldhu	r2,8(r2)
   10df4:	1007883a 	mov	r3,r2
   10df8:	e0bffd0b 	ldhu	r2,-12(fp)
   10dfc:	0084303a 	nor	r2,zero,r2
   10e00:	1884703a 	and	r2,r3,r2
   10e04:	1007883a 	mov	r3,r2
   10e08:	e0bffc17 	ldw	r2,-16(fp)
   10e0c:	10c0020d 	sth	r3,8(r2)
             break;
   10e10:	00001106 	br	10e58 <OSFlagPost+0x120>

        case OS_FLAG_SET:
             pgrp->OSFlagFlags |=  flags;            /* Set   the flags specified in the group         */
   10e14:	e0bffc17 	ldw	r2,-16(fp)
   10e18:	10c0020b 	ldhu	r3,8(r2)
   10e1c:	e0bffd0b 	ldhu	r2,-12(fp)
   10e20:	1884b03a 	or	r2,r3,r2
   10e24:	1007883a 	mov	r3,r2
   10e28:	e0bffc17 	ldw	r2,-16(fp)
   10e2c:	10c0020d 	sth	r3,8(r2)
             break;
   10e30:	00000906 	br	10e58 <OSFlagPost+0x120>
   10e34:	e0bff317 	ldw	r2,-52(fp)
   10e38:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   10e3c:	e0bff717 	ldw	r2,-36(fp)
   10e40:	1001703a 	wrctl	status,r2

        default:
             OS_EXIT_CRITICAL();                     /* INVALID option                                 */
             *perr = OS_ERR_FLAG_INVALID_OPT;
   10e44:	e0bfff17 	ldw	r2,-4(fp)
   10e48:	00c01c44 	movi	r3,113
   10e4c:	10c00005 	stb	r3,0(r2)
             return ((OS_FLAGS)0);
   10e50:	0005883a 	mov	r2,zero
   10e54:	00009506 	br	110ac <OSFlagPost+0x374>
    }
    sched = OS_FALSE;                                /* Indicate that we don't need rescheduling       */
   10e58:	e03ff205 	stb	zero,-56(fp)
    pnode = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
   10e5c:	e0bffc17 	ldw	r2,-16(fp)
   10e60:	10800117 	ldw	r2,4(r2)
   10e64:	e0bff115 	stw	r2,-60(fp)
    while (pnode != (OS_FLAG_NODE *)0) {             /* Go through all tasks waiting on event flag(s)  */
   10e68:	00007406 	br	1103c <OSFlagPost+0x304>
        switch (pnode->OSFlagNodeWaitType) {
   10e6c:	e0bff117 	ldw	r2,-60(fp)
   10e70:	10800483 	ldbu	r2,18(r2)
   10e74:	10803fcc 	andi	r2,r2,255
   10e78:	10c00060 	cmpeqi	r3,r2,1
   10e7c:	18004d1e 	bne	r3,zero,10fb4 <OSFlagPost+0x27c>
   10e80:	10c00088 	cmpgei	r3,r2,2
   10e84:	1800021e 	bne	r3,zero,10e90 <OSFlagPost+0x158>
   10e88:	10003126 	beq	r2,zero,10f50 <OSFlagPost+0x218>
   10e8c:	00005f06 	br	1100c <OSFlagPost+0x2d4>
   10e90:	10c000a0 	cmpeqi	r3,r2,2
   10e94:	1800031e 	bne	r3,zero,10ea4 <OSFlagPost+0x16c>
   10e98:	108000e0 	cmpeqi	r2,r2,3
   10e9c:	1000181e 	bne	r2,zero,10f00 <OSFlagPost+0x1c8>
   10ea0:	00005a06 	br	1100c <OSFlagPost+0x2d4>
            case OS_FLAG_WAIT_SET_ALL:               /* See if all req. flags are set for current node */
                 flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
   10ea4:	e0bffc17 	ldw	r2,-16(fp)
   10ea8:	10c0020b 	ldhu	r3,8(r2)
   10eac:	e0bff117 	ldw	r2,-60(fp)
   10eb0:	1080040b 	ldhu	r2,16(r2)
   10eb4:	1884703a 	and	r2,r3,r2
   10eb8:	e0bff40d 	sth	r2,-48(fp)
                 if (flags_rdy == pnode->OSFlagNodeFlags) {
   10ebc:	e0bff117 	ldw	r2,-60(fp)
   10ec0:	1080040b 	ldhu	r2,16(r2)
   10ec4:	10ffffcc 	andi	r3,r2,65535
   10ec8:	e0bff40b 	ldhu	r2,-48(fp)
   10ecc:	18800b1e 	bne	r3,r2,10efc <OSFlagPost+0x1c4>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
   10ed0:	e0bff40b 	ldhu	r2,-48(fp)
   10ed4:	e13ff117 	ldw	r4,-60(fp)
   10ed8:	100b883a 	mov	r5,r2
   10edc:	001142c0 	call	1142c <OS_FlagTaskRdy>
   10ee0:	e0bff485 	stb	r2,-46(fp)
                     if (rdy == OS_TRUE) {
   10ee4:	e0bff483 	ldbu	r2,-46(fp)
   10ee8:	10800058 	cmpnei	r2,r2,1
   10eec:	1000031e 	bne	r2,zero,10efc <OSFlagPost+0x1c4>
                         sched = OS_TRUE;                     /* When done we will reschedule          */
   10ef0:	00800044 	movi	r2,1
   10ef4:	e0bff205 	stb	r2,-56(fp)
                     }
                 }
                 break;
   10ef8:	00004d06 	br	11030 <OSFlagPost+0x2f8>
   10efc:	00004c06 	br	11030 <OSFlagPost+0x2f8>

            case OS_FLAG_WAIT_SET_ANY:               /* See if any flag set                            */
                 flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
   10f00:	e0bffc17 	ldw	r2,-16(fp)
   10f04:	10c0020b 	ldhu	r3,8(r2)
   10f08:	e0bff117 	ldw	r2,-60(fp)
   10f0c:	1080040b 	ldhu	r2,16(r2)
   10f10:	1884703a 	and	r2,r3,r2
   10f14:	e0bff40d 	sth	r2,-48(fp)
                 if (flags_rdy != (OS_FLAGS)0) {
   10f18:	e0bff40b 	ldhu	r2,-48(fp)
   10f1c:	10000b26 	beq	r2,zero,10f4c <OSFlagPost+0x214>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
   10f20:	e0bff40b 	ldhu	r2,-48(fp)
   10f24:	e13ff117 	ldw	r4,-60(fp)
   10f28:	100b883a 	mov	r5,r2
   10f2c:	001142c0 	call	1142c <OS_FlagTaskRdy>
   10f30:	e0bff485 	stb	r2,-46(fp)
                     if (rdy == OS_TRUE) {
   10f34:	e0bff483 	ldbu	r2,-46(fp)
   10f38:	10800058 	cmpnei	r2,r2,1
   10f3c:	1000031e 	bne	r2,zero,10f4c <OSFlagPost+0x214>
                         sched = OS_TRUE;                     /* When done we will reschedule          */
   10f40:	00800044 	movi	r2,1
   10f44:	e0bff205 	stb	r2,-56(fp)
                     }
                 }
                 break;
   10f48:	00003906 	br	11030 <OSFlagPost+0x2f8>
   10f4c:	00003806 	br	11030 <OSFlagPost+0x2f8>

#if OS_FLAG_WAIT_CLR_EN > 0
            case OS_FLAG_WAIT_CLR_ALL:               /* See if all req. flags are set for current node */
                 flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
   10f50:	e0bffc17 	ldw	r2,-16(fp)
   10f54:	1080020b 	ldhu	r2,8(r2)
   10f58:	0084303a 	nor	r2,zero,r2
   10f5c:	1007883a 	mov	r3,r2
   10f60:	e0bff117 	ldw	r2,-60(fp)
   10f64:	1080040b 	ldhu	r2,16(r2)
   10f68:	1884703a 	and	r2,r3,r2
   10f6c:	e0bff40d 	sth	r2,-48(fp)
                 if (flags_rdy == pnode->OSFlagNodeFlags) {
   10f70:	e0bff117 	ldw	r2,-60(fp)
   10f74:	1080040b 	ldhu	r2,16(r2)
   10f78:	10ffffcc 	andi	r3,r2,65535
   10f7c:	e0bff40b 	ldhu	r2,-48(fp)
   10f80:	18800b1e 	bne	r3,r2,10fb0 <OSFlagPost+0x278>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
   10f84:	e0bff40b 	ldhu	r2,-48(fp)
   10f88:	e13ff117 	ldw	r4,-60(fp)
   10f8c:	100b883a 	mov	r5,r2
   10f90:	001142c0 	call	1142c <OS_FlagTaskRdy>
   10f94:	e0bff485 	stb	r2,-46(fp)
                     if (rdy == OS_TRUE) {
   10f98:	e0bff483 	ldbu	r2,-46(fp)
   10f9c:	10800058 	cmpnei	r2,r2,1
   10fa0:	1000031e 	bne	r2,zero,10fb0 <OSFlagPost+0x278>
                         sched = OS_TRUE;                     /* When done we will reschedule          */
   10fa4:	00800044 	movi	r2,1
   10fa8:	e0bff205 	stb	r2,-56(fp)
                     }
                 }
                 break;
   10fac:	00002006 	br	11030 <OSFlagPost+0x2f8>
   10fb0:	00001f06 	br	11030 <OSFlagPost+0x2f8>

            case OS_FLAG_WAIT_CLR_ANY:               /* See if any flag set                            */
                 flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
   10fb4:	e0bffc17 	ldw	r2,-16(fp)
   10fb8:	1080020b 	ldhu	r2,8(r2)
   10fbc:	0084303a 	nor	r2,zero,r2
   10fc0:	1007883a 	mov	r3,r2
   10fc4:	e0bff117 	ldw	r2,-60(fp)
   10fc8:	1080040b 	ldhu	r2,16(r2)
   10fcc:	1884703a 	and	r2,r3,r2
   10fd0:	e0bff40d 	sth	r2,-48(fp)
                 if (flags_rdy != (OS_FLAGS)0) {
   10fd4:	e0bff40b 	ldhu	r2,-48(fp)
   10fd8:	10000b26 	beq	r2,zero,11008 <OSFlagPost+0x2d0>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
   10fdc:	e0bff40b 	ldhu	r2,-48(fp)
   10fe0:	e13ff117 	ldw	r4,-60(fp)
   10fe4:	100b883a 	mov	r5,r2
   10fe8:	001142c0 	call	1142c <OS_FlagTaskRdy>
   10fec:	e0bff485 	stb	r2,-46(fp)
                     if (rdy == OS_TRUE) {
   10ff0:	e0bff483 	ldbu	r2,-46(fp)
   10ff4:	10800058 	cmpnei	r2,r2,1
   10ff8:	1000031e 	bne	r2,zero,11008 <OSFlagPost+0x2d0>
                         sched = OS_TRUE;                     /* When done we will reschedule          */
   10ffc:	00800044 	movi	r2,1
   11000:	e0bff205 	stb	r2,-56(fp)
                     }
                 }
                 break;
   11004:	00000a06 	br	11030 <OSFlagPost+0x2f8>
   11008:	00000906 	br	11030 <OSFlagPost+0x2f8>
   1100c:	e0bff317 	ldw	r2,-52(fp)
   11010:	e0bff815 	stw	r2,-32(fp)
   11014:	e0bff817 	ldw	r2,-32(fp)
   11018:	1001703a 	wrctl	status,r2
#endif
            default:
                 OS_EXIT_CRITICAL();
                 *perr = OS_ERR_FLAG_WAIT_TYPE;
   1101c:	e0bfff17 	ldw	r2,-4(fp)
   11020:	00c01bc4 	movi	r3,111
   11024:	10c00005 	stb	r3,0(r2)
                 return ((OS_FLAGS)0);
   11028:	0005883a 	mov	r2,zero
   1102c:	00001f06 	br	110ac <OSFlagPost+0x374>
        }
        pnode = (OS_FLAG_NODE *)pnode->OSFlagNodeNext; /* Point to next task waiting for event flag(s) */
   11030:	e0bff117 	ldw	r2,-60(fp)
   11034:	10800017 	ldw	r2,0(r2)
   11038:	e0bff115 	stw	r2,-60(fp)
             *perr = OS_ERR_FLAG_INVALID_OPT;
             return ((OS_FLAGS)0);
    }
    sched = OS_FALSE;                                /* Indicate that we don't need rescheduling       */
    pnode = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
    while (pnode != (OS_FLAG_NODE *)0) {             /* Go through all tasks waiting on event flag(s)  */
   1103c:	e0bff117 	ldw	r2,-60(fp)
   11040:	103f8a1e 	bne	r2,zero,10e6c <__alt_mem_Flash_flash_data+0xf4010e6c>
   11044:	e0bff317 	ldw	r2,-52(fp)
   11048:	e0bff915 	stw	r2,-28(fp)
   1104c:	e0bff917 	ldw	r2,-28(fp)
   11050:	1001703a 	wrctl	status,r2
                 return ((OS_FLAGS)0);
        }
        pnode = (OS_FLAG_NODE *)pnode->OSFlagNodeNext; /* Point to next task waiting for event flag(s) */
    }
    OS_EXIT_CRITICAL();
    if (sched == OS_TRUE) {
   11054:	e0bff203 	ldbu	r2,-56(fp)
   11058:	10800058 	cmpnei	r2,r2,1
   1105c:	1000011e 	bne	r2,zero,11064 <OSFlagPost+0x32c>
        OS_Sched();
   11060:	000f55c0 	call	f55c <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   11064:	0005303a 	rdctl	r2,status
   11068:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1106c:	e0fffa17 	ldw	r3,-24(fp)
   11070:	00bfff84 	movi	r2,-2
   11074:	1884703a 	and	r2,r3,r2
   11078:	1001703a 	wrctl	status,r2
  
  return context;
   1107c:	e0bffa17 	ldw	r2,-24(fp)
    }
    OS_ENTER_CRITICAL();
   11080:	e0bff315 	stw	r2,-52(fp)
    flags_cur = pgrp->OSFlagFlags;
   11084:	e0bffc17 	ldw	r2,-16(fp)
   11088:	1080020b 	ldhu	r2,8(r2)
   1108c:	e0bff50d 	sth	r2,-44(fp)
   11090:	e0bff317 	ldw	r2,-52(fp)
   11094:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   11098:	e0bffb17 	ldw	r2,-20(fp)
   1109c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr     = OS_ERR_NONE;
   110a0:	e0bfff17 	ldw	r2,-4(fp)
   110a4:	10000005 	stb	zero,0(r2)
    return (flags_cur);
   110a8:	e0bff50b 	ldhu	r2,-44(fp)
}
   110ac:	e037883a 	mov	sp,fp
   110b0:	dfc00117 	ldw	ra,4(sp)
   110b4:	df000017 	ldw	fp,0(sp)
   110b8:	dec00204 	addi	sp,sp,8
   110bc:	f800283a 	ret

000110c0 <OSFlagQuery>:
*********************************************************************************************************
*/

#if OS_FLAG_QUERY_EN > 0
OS_FLAGS  OSFlagQuery (OS_FLAG_GRP *pgrp, INT8U *perr)
{
   110c0:	defff904 	addi	sp,sp,-28
   110c4:	df000615 	stw	fp,24(sp)
   110c8:	df000604 	addi	fp,sp,24
   110cc:	e13ffe15 	stw	r4,-8(fp)
   110d0:	e17fff15 	stw	r5,-4(fp)
    OS_FLAGS   flags;
#if OS_CRITICAL_METHOD == 3                       /* Allocate storage for CPU status register          */
    OS_CPU_SR  cpu_sr = 0;
   110d4:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                     /* Validate 'perr'                                   */
   110d8:	e0bfff17 	ldw	r2,-4(fp)
   110dc:	1000021e 	bne	r2,zero,110e8 <OSFlagQuery+0x28>
        return ((OS_FLAGS)0);
   110e0:	0005883a 	mov	r2,zero
   110e4:	00002306 	br	11174 <OSFlagQuery+0xb4>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {               /* Validate 'pgrp'                                   */
   110e8:	e0bffe17 	ldw	r2,-8(fp)
   110ec:	1000051e 	bne	r2,zero,11104 <OSFlagQuery+0x44>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
   110f0:	e0bfff17 	ldw	r2,-4(fp)
   110f4:	00c01b84 	movi	r3,110
   110f8:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
   110fc:	0005883a 	mov	r2,zero
   11100:	00001c06 	br	11174 <OSFlagQuery+0xb4>
    }
#endif
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) { /* Validate event block type                         */
   11104:	e0bffe17 	ldw	r2,-8(fp)
   11108:	10800003 	ldbu	r2,0(r2)
   1110c:	10803fcc 	andi	r2,r2,255
   11110:	10800160 	cmpeqi	r2,r2,5
   11114:	1000051e 	bne	r2,zero,1112c <OSFlagQuery+0x6c>
        *perr = OS_ERR_EVENT_TYPE;
   11118:	e0bfff17 	ldw	r2,-4(fp)
   1111c:	00c00044 	movi	r3,1
   11120:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
   11124:	0005883a 	mov	r2,zero
   11128:	00001206 	br	11174 <OSFlagQuery+0xb4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1112c:	0005303a 	rdctl	r2,status
   11130:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   11134:	e0fffc17 	ldw	r3,-16(fp)
   11138:	00bfff84 	movi	r2,-2
   1113c:	1884703a 	and	r2,r3,r2
   11140:	1001703a 	wrctl	status,r2
  
  return context;
   11144:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
   11148:	e0bffa15 	stw	r2,-24(fp)
    flags = pgrp->OSFlagFlags;
   1114c:	e0bffe17 	ldw	r2,-8(fp)
   11150:	1080020b 	ldhu	r2,8(r2)
   11154:	e0bffb0d 	sth	r2,-20(fp)
   11158:	e0bffa17 	ldw	r2,-24(fp)
   1115c:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   11160:	e0bffd17 	ldw	r2,-12(fp)
   11164:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
   11168:	e0bfff17 	ldw	r2,-4(fp)
   1116c:	10000005 	stb	zero,0(r2)
    return (flags);                               /* Return the current value of the event flags       */
   11170:	e0bffb0b 	ldhu	r2,-20(fp)
}
   11174:	e037883a 	mov	sp,fp
   11178:	df000017 	ldw	fp,0(sp)
   1117c:	dec00104 	addi	sp,sp,4
   11180:	f800283a 	ret

00011184 <OS_FlagBlock>:
* Note(s)    : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

static  void  OS_FlagBlock (OS_FLAG_GRP *pgrp, OS_FLAG_NODE *pnode, OS_FLAGS flags, INT8U wait_type, INT16U timeout)
{
   11184:	defff804 	addi	sp,sp,-32
   11188:	df000715 	stw	fp,28(sp)
   1118c:	df000704 	addi	fp,sp,28
   11190:	e13ffb15 	stw	r4,-20(fp)
   11194:	e17ffc15 	stw	r5,-16(fp)
   11198:	3009883a 	mov	r4,r6
   1119c:	3807883a 	mov	r3,r7
   111a0:	e0800117 	ldw	r2,4(fp)
   111a4:	e13ffd0d 	sth	r4,-12(fp)
   111a8:	e0fffe05 	stb	r3,-8(fp)
   111ac:	e0bfff0d 	sth	r2,-4(fp)
    OS_FLAG_NODE  *pnode_next;
    INT8U          y;


    OSTCBCur->OSTCBStat      |= OS_STAT_FLAG;
   111b0:	008000b4 	movhi	r2,2
   111b4:	10b69b04 	addi	r2,r2,-9620
   111b8:	10c00017 	ldw	r3,0(r2)
   111bc:	008000b4 	movhi	r2,2
   111c0:	10b69b04 	addi	r2,r2,-9620
   111c4:	10800017 	ldw	r2,0(r2)
   111c8:	10800c03 	ldbu	r2,48(r2)
   111cc:	10800814 	ori	r2,r2,32
   111d0:	18800c05 	stb	r2,48(r3)
    OSTCBCur->OSTCBStatPend   = OS_STAT_PEND_OK;
   111d4:	008000b4 	movhi	r2,2
   111d8:	10b69b04 	addi	r2,r2,-9620
   111dc:	10800017 	ldw	r2,0(r2)
   111e0:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBDly        = timeout;              /* Store timeout in task's TCB                   */
   111e4:	008000b4 	movhi	r2,2
   111e8:	10b69b04 	addi	r2,r2,-9620
   111ec:	10800017 	ldw	r2,0(r2)
   111f0:	e0ffff0b 	ldhu	r3,-4(fp)
   111f4:	10c00b8d 	sth	r3,46(r2)
#if OS_TASK_DEL_EN > 0
    OSTCBCur->OSTCBFlagNode   = pnode;                /* TCB to link to node                           */
   111f8:	008000b4 	movhi	r2,2
   111fc:	10b69b04 	addi	r2,r2,-9620
   11200:	10800017 	ldw	r2,0(r2)
   11204:	e0fffc17 	ldw	r3,-16(fp)
   11208:	10c00a15 	stw	r3,40(r2)
#endif
    pnode->OSFlagNodeFlags    = flags;                /* Save the flags that we need to wait for       */
   1120c:	e0bffc17 	ldw	r2,-16(fp)
   11210:	e0fffd0b 	ldhu	r3,-12(fp)
   11214:	10c0040d 	sth	r3,16(r2)
    pnode->OSFlagNodeWaitType = wait_type;            /* Save the type of wait we are doing            */
   11218:	e0bffc17 	ldw	r2,-16(fp)
   1121c:	e0fffe03 	ldbu	r3,-8(fp)
   11220:	10c00485 	stb	r3,18(r2)
    pnode->OSFlagNodeTCB      = (void *)OSTCBCur;     /* Link to task's TCB                            */
   11224:	008000b4 	movhi	r2,2
   11228:	10b69b04 	addi	r2,r2,-9620
   1122c:	10c00017 	ldw	r3,0(r2)
   11230:	e0bffc17 	ldw	r2,-16(fp)
   11234:	10c00215 	stw	r3,8(r2)
    pnode->OSFlagNodeNext     = pgrp->OSFlagWaitList; /* Add node at beginning of event flag wait list */
   11238:	e0bffb17 	ldw	r2,-20(fp)
   1123c:	10c00117 	ldw	r3,4(r2)
   11240:	e0bffc17 	ldw	r2,-16(fp)
   11244:	10c00015 	stw	r3,0(r2)
    pnode->OSFlagNodePrev     = (void *)0;
   11248:	e0bffc17 	ldw	r2,-16(fp)
   1124c:	10000115 	stw	zero,4(r2)
    pnode->OSFlagNodeFlagGrp  = (void *)pgrp;         /* Link to Event Flag Group                      */
   11250:	e0bffc17 	ldw	r2,-16(fp)
   11254:	e0fffb17 	ldw	r3,-20(fp)
   11258:	10c00315 	stw	r3,12(r2)
    pnode_next                = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
   1125c:	e0bffb17 	ldw	r2,-20(fp)
   11260:	10800117 	ldw	r2,4(r2)
   11264:	e0bff915 	stw	r2,-28(fp)
    if (pnode_next != (void *)0) {                    /* Is this the first NODE to insert?             */
   11268:	e0bff917 	ldw	r2,-28(fp)
   1126c:	10000326 	beq	r2,zero,1127c <OS_FlagBlock+0xf8>
        pnode_next->OSFlagNodePrev = pnode;           /* No, link in doubly linked list                */
   11270:	e0bff917 	ldw	r2,-28(fp)
   11274:	e0fffc17 	ldw	r3,-16(fp)
   11278:	10c00115 	stw	r3,4(r2)
    }
    pgrp->OSFlagWaitList = (void *)pnode;
   1127c:	e0bffb17 	ldw	r2,-20(fp)
   11280:	e0fffc17 	ldw	r3,-16(fp)
   11284:	10c00115 	stw	r3,4(r2)

    y            =  OSTCBCur->OSTCBY;                 /* Suspend current task until flag(s) received   */
   11288:	008000b4 	movhi	r2,2
   1128c:	10b69b04 	addi	r2,r2,-9620
   11290:	10800017 	ldw	r2,0(r2)
   11294:	10800d03 	ldbu	r2,52(r2)
   11298:	e0bffa05 	stb	r2,-24(fp)
    OSRdyTbl[y] &= ~OSTCBCur->OSTCBBitX;
   1129c:	e0fffa03 	ldbu	r3,-24(fp)
   112a0:	e13ffa03 	ldbu	r4,-24(fp)
   112a4:	008000b4 	movhi	r2,2
   112a8:	10b69844 	addi	r2,r2,-9631
   112ac:	1105883a 	add	r2,r2,r4
   112b0:	10800003 	ldbu	r2,0(r2)
   112b4:	1009883a 	mov	r4,r2
   112b8:	008000b4 	movhi	r2,2
   112bc:	10b69b04 	addi	r2,r2,-9620
   112c0:	10800017 	ldw	r2,0(r2)
   112c4:	10800d43 	ldbu	r2,53(r2)
   112c8:	0084303a 	nor	r2,zero,r2
   112cc:	2084703a 	and	r2,r4,r2
   112d0:	1009883a 	mov	r4,r2
   112d4:	008000b4 	movhi	r2,2
   112d8:	10b69844 	addi	r2,r2,-9631
   112dc:	10c5883a 	add	r2,r2,r3
   112e0:	11000005 	stb	r4,0(r2)
    if (OSRdyTbl[y] == 0x00) {
   112e4:	e0fffa03 	ldbu	r3,-24(fp)
   112e8:	008000b4 	movhi	r2,2
   112ec:	10b69844 	addi	r2,r2,-9631
   112f0:	10c5883a 	add	r2,r2,r3
   112f4:	10800003 	ldbu	r2,0(r2)
   112f8:	10803fcc 	andi	r2,r2,255
   112fc:	10000e1e 	bne	r2,zero,11338 <OS_FlagBlock+0x1b4>
        OSRdyGrp &= ~OSTCBCur->OSTCBBitY;
   11300:	008000b4 	movhi	r2,2
   11304:	10b69b04 	addi	r2,r2,-9620
   11308:	10800017 	ldw	r2,0(r2)
   1130c:	10800d83 	ldbu	r2,54(r2)
   11310:	0084303a 	nor	r2,zero,r2
   11314:	1007883a 	mov	r3,r2
   11318:	008000b4 	movhi	r2,2
   1131c:	10b69804 	addi	r2,r2,-9632
   11320:	10800003 	ldbu	r2,0(r2)
   11324:	1884703a 	and	r2,r3,r2
   11328:	1007883a 	mov	r3,r2
   1132c:	008000b4 	movhi	r2,2
   11330:	10b69804 	addi	r2,r2,-9632
   11334:	10c00005 	stb	r3,0(r2)
    }
}
   11338:	e037883a 	mov	sp,fp
   1133c:	df000017 	ldw	fp,0(sp)
   11340:	dec00104 	addi	sp,sp,4
   11344:	f800283a 	ret

00011348 <OS_FlagInit>:
* WARNING    : You MUST NOT call this function from your code.  This is an INTERNAL function to uC/OS-II.
*********************************************************************************************************
*/

void  OS_FlagInit (void)
{
   11348:	defffb04 	addi	sp,sp,-20
   1134c:	dfc00415 	stw	ra,16(sp)
   11350:	df000315 	stw	fp,12(sp)
   11354:	df000304 	addi	fp,sp,12
    INT16U       i;
    OS_FLAG_GRP *pgrp1;
    OS_FLAG_GRP *pgrp2;


    OS_MemClr((INT8U *)&OSFlagTbl[0], sizeof(OSFlagTbl));           /* Clear the flag group table      */
   11358:	010000b4 	movhi	r4,2
   1135c:	210eae04 	addi	r4,r4,15032
   11360:	0140dc04 	movi	r5,880
   11364:	000f4a80 	call	f4a8 <OS_MemClr>
    pgrp1 = &OSFlagTbl[0];
   11368:	008000b4 	movhi	r2,2
   1136c:	108eae04 	addi	r2,r2,15032
   11370:	e0bffe15 	stw	r2,-8(fp)
    pgrp2 = &OSFlagTbl[1];
   11374:	008000b4 	movhi	r2,2
   11378:	108eb904 	addi	r2,r2,15076
   1137c:	e0bfff15 	stw	r2,-4(fp)
    for (i = 0; i < (OS_MAX_FLAGS - 1); i++) {                      /* Init. list of free EVENT FLAGS  */
   11380:	e03ffd0d 	sth	zero,-12(fp)
   11384:	00001306 	br	113d4 <OS_FlagInit+0x8c>
        pgrp1->OSFlagType     = OS_EVENT_TYPE_UNUSED;
   11388:	e0bffe17 	ldw	r2,-8(fp)
   1138c:	10000005 	stb	zero,0(r2)
        pgrp1->OSFlagWaitList = (void *)pgrp2;
   11390:	e0bffe17 	ldw	r2,-8(fp)
   11394:	e0ffff17 	ldw	r3,-4(fp)
   11398:	10c00115 	stw	r3,4(r2)
#if OS_FLAG_NAME_SIZE > 1
        pgrp1->OSFlagName[0]  = '?';                                /* Unknown name                    */
   1139c:	e0bffe17 	ldw	r2,-8(fp)
   113a0:	00c00fc4 	movi	r3,63
   113a4:	10c00285 	stb	r3,10(r2)
        pgrp1->OSFlagName[1]  = OS_ASCII_NUL;
   113a8:	e0bffe17 	ldw	r2,-8(fp)
   113ac:	100002c5 	stb	zero,11(r2)
#endif
        pgrp1++;
   113b0:	e0bffe17 	ldw	r2,-8(fp)
   113b4:	10800b04 	addi	r2,r2,44
   113b8:	e0bffe15 	stw	r2,-8(fp)
        pgrp2++;
   113bc:	e0bfff17 	ldw	r2,-4(fp)
   113c0:	10800b04 	addi	r2,r2,44
   113c4:	e0bfff15 	stw	r2,-4(fp)


    OS_MemClr((INT8U *)&OSFlagTbl[0], sizeof(OSFlagTbl));           /* Clear the flag group table      */
    pgrp1 = &OSFlagTbl[0];
    pgrp2 = &OSFlagTbl[1];
    for (i = 0; i < (OS_MAX_FLAGS - 1); i++) {                      /* Init. list of free EVENT FLAGS  */
   113c8:	e0bffd0b 	ldhu	r2,-12(fp)
   113cc:	10800044 	addi	r2,r2,1
   113d0:	e0bffd0d 	sth	r2,-12(fp)
   113d4:	e0bffd0b 	ldhu	r2,-12(fp)
   113d8:	108004f0 	cmpltui	r2,r2,19
   113dc:	103fea1e 	bne	r2,zero,11388 <__alt_mem_Flash_flash_data+0xf4011388>
        pgrp1->OSFlagName[1]  = OS_ASCII_NUL;
#endif
        pgrp1++;
        pgrp2++;
    }
    pgrp1->OSFlagType     = OS_EVENT_TYPE_UNUSED;
   113e0:	e0bffe17 	ldw	r2,-8(fp)
   113e4:	10000005 	stb	zero,0(r2)
    pgrp1->OSFlagWaitList = (void *)0;
   113e8:	e0bffe17 	ldw	r2,-8(fp)
   113ec:	10000115 	stw	zero,4(r2)
#if OS_FLAG_NAME_SIZE > 1
    pgrp1->OSFlagName[0]  = '?';                                    /* Unknown name                    */
   113f0:	e0bffe17 	ldw	r2,-8(fp)
   113f4:	00c00fc4 	movi	r3,63
   113f8:	10c00285 	stb	r3,10(r2)
    pgrp1->OSFlagName[1]  = OS_ASCII_NUL;
   113fc:	e0bffe17 	ldw	r2,-8(fp)
   11400:	100002c5 	stb	zero,11(r2)
#endif
    OSFlagFreeList        = &OSFlagTbl[0];
   11404:	008000b4 	movhi	r2,2
   11408:	10b69d04 	addi	r2,r2,-9612
   1140c:	00c000b4 	movhi	r3,2
   11410:	18ceae04 	addi	r3,r3,15032
   11414:	10c00015 	stw	r3,0(r2)
#endif
}
   11418:	e037883a 	mov	sp,fp
   1141c:	dfc00117 	ldw	ra,4(sp)
   11420:	df000017 	ldw	fp,0(sp)
   11424:	dec00204 	addi	sp,sp,8
   11428:	f800283a 	ret

0001142c <OS_FlagTaskRdy>:
*              2) This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

static  BOOLEAN  OS_FlagTaskRdy (OS_FLAG_NODE *pnode, OS_FLAGS flags_rdy)
{
   1142c:	defffa04 	addi	sp,sp,-24
   11430:	dfc00515 	stw	ra,20(sp)
   11434:	df000415 	stw	fp,16(sp)
   11438:	df000404 	addi	fp,sp,16
   1143c:	e13ffe15 	stw	r4,-8(fp)
   11440:	2805883a 	mov	r2,r5
   11444:	e0bfff0d 	sth	r2,-4(fp)
    OS_TCB   *ptcb;
    BOOLEAN   sched;


    ptcb                 = (OS_TCB *)pnode->OSFlagNodeTCB; /* Point to TCB of waiting task             */
   11448:	e0bffe17 	ldw	r2,-8(fp)
   1144c:	10800217 	ldw	r2,8(r2)
   11450:	e0bffd15 	stw	r2,-12(fp)
    ptcb->OSTCBDly       = 0;
   11454:	e0bffd17 	ldw	r2,-12(fp)
   11458:	10000b8d 	sth	zero,46(r2)
    ptcb->OSTCBFlagsRdy  = flags_rdy;
   1145c:	e0bffd17 	ldw	r2,-12(fp)
   11460:	e0ffff0b 	ldhu	r3,-4(fp)
   11464:	10c00b0d 	sth	r3,44(r2)
    ptcb->OSTCBStat     &= ~(INT8U)OS_STAT_FLAG;
   11468:	e0bffd17 	ldw	r2,-12(fp)
   1146c:	10c00c03 	ldbu	r3,48(r2)
   11470:	00bff7c4 	movi	r2,-33
   11474:	1884703a 	and	r2,r3,r2
   11478:	1007883a 	mov	r3,r2
   1147c:	e0bffd17 	ldw	r2,-12(fp)
   11480:	10c00c05 	stb	r3,48(r2)
    ptcb->OSTCBStatPend  = OS_STAT_PEND_OK;
   11484:	e0bffd17 	ldw	r2,-12(fp)
   11488:	10000c45 	stb	zero,49(r2)
    if (ptcb->OSTCBStat == OS_STAT_RDY) {                  /* Task now ready?                          */
   1148c:	e0bffd17 	ldw	r2,-12(fp)
   11490:	10800c03 	ldbu	r2,48(r2)
   11494:	10803fcc 	andi	r2,r2,255
   11498:	10001f1e 	bne	r2,zero,11518 <OS_FlagTaskRdy+0xec>
        OSRdyGrp               |= ptcb->OSTCBBitY;         /* Put task into ready list                 */
   1149c:	e0bffd17 	ldw	r2,-12(fp)
   114a0:	10c00d83 	ldbu	r3,54(r2)
   114a4:	008000b4 	movhi	r2,2
   114a8:	10b69804 	addi	r2,r2,-9632
   114ac:	10800003 	ldbu	r2,0(r2)
   114b0:	1884b03a 	or	r2,r3,r2
   114b4:	1007883a 	mov	r3,r2
   114b8:	008000b4 	movhi	r2,2
   114bc:	10b69804 	addi	r2,r2,-9632
   114c0:	10c00005 	stb	r3,0(r2)
        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
   114c4:	e0bffd17 	ldw	r2,-12(fp)
   114c8:	10800d03 	ldbu	r2,52(r2)
   114cc:	10c03fcc 	andi	r3,r2,255
   114d0:	e0bffd17 	ldw	r2,-12(fp)
   114d4:	10800d03 	ldbu	r2,52(r2)
   114d8:	11003fcc 	andi	r4,r2,255
   114dc:	008000b4 	movhi	r2,2
   114e0:	10b69844 	addi	r2,r2,-9631
   114e4:	1105883a 	add	r2,r2,r4
   114e8:	11000003 	ldbu	r4,0(r2)
   114ec:	e0bffd17 	ldw	r2,-12(fp)
   114f0:	10800d43 	ldbu	r2,53(r2)
   114f4:	2084b03a 	or	r2,r4,r2
   114f8:	1009883a 	mov	r4,r2
   114fc:	008000b4 	movhi	r2,2
   11500:	10b69844 	addi	r2,r2,-9631
   11504:	10c5883a 	add	r2,r2,r3
   11508:	11000005 	stb	r4,0(r2)
        sched                   = OS_TRUE;
   1150c:	00800044 	movi	r2,1
   11510:	e0bffc05 	stb	r2,-16(fp)
   11514:	00000106 	br	1151c <OS_FlagTaskRdy+0xf0>
    } else {
        sched                   = OS_FALSE;
   11518:	e03ffc05 	stb	zero,-16(fp)
    }
    OS_FlagUnlink(pnode);
   1151c:	e13ffe17 	ldw	r4,-8(fp)
   11520:	001153c0 	call	1153c <OS_FlagUnlink>
    return (sched);
   11524:	e0bffc03 	ldbu	r2,-16(fp)
}
   11528:	e037883a 	mov	sp,fp
   1152c:	dfc00117 	ldw	ra,4(sp)
   11530:	df000017 	ldw	fp,0(sp)
   11534:	dec00204 	addi	sp,sp,8
   11538:	f800283a 	ret

0001153c <OS_FlagUnlink>:
*              2) This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

void  OS_FlagUnlink (OS_FLAG_NODE *pnode)
{
   1153c:	defffa04 	addi	sp,sp,-24
   11540:	df000515 	stw	fp,20(sp)
   11544:	df000504 	addi	fp,sp,20
   11548:	e13fff15 	stw	r4,-4(fp)
    OS_FLAG_GRP  *pgrp;
    OS_FLAG_NODE *pnode_prev;
    OS_FLAG_NODE *pnode_next;


    pnode_prev = (OS_FLAG_NODE *)pnode->OSFlagNodePrev;
   1154c:	e0bfff17 	ldw	r2,-4(fp)
   11550:	10800117 	ldw	r2,4(r2)
   11554:	e0bffb15 	stw	r2,-20(fp)
    pnode_next = (OS_FLAG_NODE *)pnode->OSFlagNodeNext;
   11558:	e0bfff17 	ldw	r2,-4(fp)
   1155c:	10800017 	ldw	r2,0(r2)
   11560:	e0bffc15 	stw	r2,-16(fp)
    if (pnode_prev == (OS_FLAG_NODE *)0) {                      /* Is it first node in wait list?      */
   11564:	e0bffb17 	ldw	r2,-20(fp)
   11568:	10000b1e 	bne	r2,zero,11598 <OS_FlagUnlink+0x5c>
        pgrp                 = (OS_FLAG_GRP *)pnode->OSFlagNodeFlagGrp;
   1156c:	e0bfff17 	ldw	r2,-4(fp)
   11570:	10800317 	ldw	r2,12(r2)
   11574:	e0bffd15 	stw	r2,-12(fp)
        pgrp->OSFlagWaitList = (void *)pnode_next;              /*      Update list for new 1st node   */
   11578:	e0bffd17 	ldw	r2,-12(fp)
   1157c:	e0fffc17 	ldw	r3,-16(fp)
   11580:	10c00115 	stw	r3,4(r2)
        if (pnode_next != (OS_FLAG_NODE *)0) {
   11584:	e0bffc17 	ldw	r2,-16(fp)
   11588:	10000b26 	beq	r2,zero,115b8 <OS_FlagUnlink+0x7c>
            pnode_next->OSFlagNodePrev = (OS_FLAG_NODE *)0;     /*      Link new 1st node PREV to NULL */
   1158c:	e0bffc17 	ldw	r2,-16(fp)
   11590:	10000115 	stw	zero,4(r2)
   11594:	00000806 	br	115b8 <OS_FlagUnlink+0x7c>
        }
    } else {                                                    /* No,  A node somewhere in the list   */
        pnode_prev->OSFlagNodeNext = pnode_next;                /*      Link around the node to unlink */
   11598:	e0bffb17 	ldw	r2,-20(fp)
   1159c:	e0fffc17 	ldw	r3,-16(fp)
   115a0:	10c00015 	stw	r3,0(r2)
        if (pnode_next != (OS_FLAG_NODE *)0) {                  /*      Was this the LAST node?        */
   115a4:	e0bffc17 	ldw	r2,-16(fp)
   115a8:	10000326 	beq	r2,zero,115b8 <OS_FlagUnlink+0x7c>
            pnode_next->OSFlagNodePrev = pnode_prev;            /*      No, Link around current node   */
   115ac:	e0bffc17 	ldw	r2,-16(fp)
   115b0:	e0fffb17 	ldw	r3,-20(fp)
   115b4:	10c00115 	stw	r3,4(r2)
        }
    }
#if OS_TASK_DEL_EN > 0
    ptcb                = (OS_TCB *)pnode->OSFlagNodeTCB;
   115b8:	e0bfff17 	ldw	r2,-4(fp)
   115bc:	10800217 	ldw	r2,8(r2)
   115c0:	e0bffe15 	stw	r2,-8(fp)
    ptcb->OSTCBFlagNode = (OS_FLAG_NODE *)0;
   115c4:	e0bffe17 	ldw	r2,-8(fp)
   115c8:	10000a15 	stw	zero,40(r2)
#endif
}
   115cc:	e037883a 	mov	sp,fp
   115d0:	df000017 	ldw	fp,0(sp)
   115d4:	dec00104 	addi	sp,sp,4
   115d8:	f800283a 	ret

000115dc <OSMemCreate>:
*                              free partition is available.
*********************************************************************************************************
*/

OS_MEM  *OSMemCreate (void *addr, INT32U nblks, INT32U blksize, INT8U *perr)
{
   115dc:	defff404 	addi	sp,sp,-48
   115e0:	df000b15 	stw	fp,44(sp)
   115e4:	df000b04 	addi	fp,sp,44
   115e8:	e13ffc15 	stw	r4,-16(fp)
   115ec:	e17ffd15 	stw	r5,-12(fp)
   115f0:	e1bffe15 	stw	r6,-8(fp)
   115f4:	e1ffff15 	stw	r7,-4(fp)
    OS_MEM    *pmem;
    INT8U     *pblk;
    void     **plink;
    INT32U     i;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   115f8:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0              
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
   115fc:	e0bfff17 	ldw	r2,-4(fp)
   11600:	1000021e 	bne	r2,zero,1160c <OSMemCreate+0x30>
        return ((OS_MEM *)0);
   11604:	0005883a 	mov	r2,zero
   11608:	00006d06 	br	117c0 <OSMemCreate+0x1e4>
    }
    if (addr == (void *)0) {                          /* Must pass a valid address for the memory part.*/
   1160c:	e0bffc17 	ldw	r2,-16(fp)
   11610:	1000051e 	bne	r2,zero,11628 <OSMemCreate+0x4c>
        *perr = OS_ERR_MEM_INVALID_ADDR;
   11614:	e0bfff17 	ldw	r2,-4(fp)
   11618:	00c01884 	movi	r3,98
   1161c:	10c00005 	stb	r3,0(r2)
        return ((OS_MEM *)0);
   11620:	0005883a 	mov	r2,zero
   11624:	00006606 	br	117c0 <OSMemCreate+0x1e4>
    }
    if (((INT32U)addr & (sizeof(void *) - 1)) != 0){  /* Must be pointer size aligned                  */
   11628:	e0bffc17 	ldw	r2,-16(fp)
   1162c:	108000cc 	andi	r2,r2,3
   11630:	10000526 	beq	r2,zero,11648 <OSMemCreate+0x6c>
        *perr = OS_ERR_MEM_INVALID_ADDR;
   11634:	e0bfff17 	ldw	r2,-4(fp)
   11638:	00c01884 	movi	r3,98
   1163c:	10c00005 	stb	r3,0(r2)
        return ((OS_MEM *)0);
   11640:	0005883a 	mov	r2,zero
   11644:	00005e06 	br	117c0 <OSMemCreate+0x1e4>
    }
    if (nblks < 2) {                                  /* Must have at least 2 blocks per partition     */
   11648:	e0bffd17 	ldw	r2,-12(fp)
   1164c:	108000a8 	cmpgeui	r2,r2,2
   11650:	1000051e 	bne	r2,zero,11668 <OSMemCreate+0x8c>
        *perr = OS_ERR_MEM_INVALID_BLKS;
   11654:	e0bfff17 	ldw	r2,-4(fp)
   11658:	00c016c4 	movi	r3,91
   1165c:	10c00005 	stb	r3,0(r2)
        return ((OS_MEM *)0);
   11660:	0005883a 	mov	r2,zero
   11664:	00005606 	br	117c0 <OSMemCreate+0x1e4>
    }
    if (blksize < sizeof(void *)) {                   /* Must contain space for at least a pointer     */
   11668:	e0bffe17 	ldw	r2,-8(fp)
   1166c:	10800128 	cmpgeui	r2,r2,4
   11670:	1000051e 	bne	r2,zero,11688 <OSMemCreate+0xac>
        *perr = OS_ERR_MEM_INVALID_SIZE;
   11674:	e0bfff17 	ldw	r2,-4(fp)
   11678:	00c01704 	movi	r3,92
   1167c:	10c00005 	stb	r3,0(r2)
        return ((OS_MEM *)0);
   11680:	0005883a 	mov	r2,zero
   11684:	00004e06 	br	117c0 <OSMemCreate+0x1e4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   11688:	0005303a 	rdctl	r2,status
   1168c:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   11690:	e0fffa17 	ldw	r3,-24(fp)
   11694:	00bfff84 	movi	r2,-2
   11698:	1884703a 	and	r2,r3,r2
   1169c:	1001703a 	wrctl	status,r2
  
  return context;
   116a0:	e0bffa17 	ldw	r2,-24(fp)
    }
#endif
    OS_ENTER_CRITICAL();
   116a4:	e0bff815 	stw	r2,-32(fp)
    pmem = OSMemFreeList;                             /* Get next free memory partition                */
   116a8:	008000b4 	movhi	r2,2
   116ac:	10b69504 	addi	r2,r2,-9644
   116b0:	10800017 	ldw	r2,0(r2)
   116b4:	e0bff915 	stw	r2,-28(fp)
    if (OSMemFreeList != (OS_MEM *)0) {               /* See if pool of free partitions was empty      */
   116b8:	008000b4 	movhi	r2,2
   116bc:	10b69504 	addi	r2,r2,-9644
   116c0:	10800017 	ldw	r2,0(r2)
   116c4:	10000726 	beq	r2,zero,116e4 <OSMemCreate+0x108>
        OSMemFreeList = (OS_MEM *)OSMemFreeList->OSMemFreeList;
   116c8:	008000b4 	movhi	r2,2
   116cc:	10b69504 	addi	r2,r2,-9644
   116d0:	10800017 	ldw	r2,0(r2)
   116d4:	10c00117 	ldw	r3,4(r2)
   116d8:	008000b4 	movhi	r2,2
   116dc:	10b69504 	addi	r2,r2,-9644
   116e0:	10c00015 	stw	r3,0(r2)
   116e4:	e0bff817 	ldw	r2,-32(fp)
   116e8:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   116ec:	e0bffb17 	ldw	r2,-20(fp)
   116f0:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    if (pmem == (OS_MEM *)0) {                        /* See if we have a memory partition             */
   116f4:	e0bff917 	ldw	r2,-28(fp)
   116f8:	1000051e 	bne	r2,zero,11710 <OSMemCreate+0x134>
        *perr = OS_ERR_MEM_INVALID_PART;
   116fc:	e0bfff17 	ldw	r2,-4(fp)
   11700:	00c01684 	movi	r3,90
   11704:	10c00005 	stb	r3,0(r2)
        return ((OS_MEM *)0);
   11708:	0005883a 	mov	r2,zero
   1170c:	00002c06 	br	117c0 <OSMemCreate+0x1e4>
    }
    plink = (void **)addr;                            /* Create linked list of free memory blocks      */
   11710:	e0bffc17 	ldw	r2,-16(fp)
   11714:	e0bff615 	stw	r2,-40(fp)
    pblk  = (INT8U *)((INT32U)addr + blksize);
   11718:	e0fffc17 	ldw	r3,-16(fp)
   1171c:	e0bffe17 	ldw	r2,-8(fp)
   11720:	1885883a 	add	r2,r3,r2
   11724:	e0bff515 	stw	r2,-44(fp)
    for (i = 0; i < (nblks - 1); i++) {
   11728:	e03ff715 	stw	zero,-36(fp)
   1172c:	00000c06 	br	11760 <OSMemCreate+0x184>
       *plink = (void *)pblk;                         /* Save pointer to NEXT block in CURRENT block   */
   11730:	e0bff617 	ldw	r2,-40(fp)
   11734:	e0fff517 	ldw	r3,-44(fp)
   11738:	10c00015 	stw	r3,0(r2)
        plink = (void **)pblk;                        /* Position to  NEXT      block                  */
   1173c:	e0bff517 	ldw	r2,-44(fp)
   11740:	e0bff615 	stw	r2,-40(fp)
        pblk  = (INT8U *)((INT32U)pblk + blksize);    /* Point to the FOLLOWING block                  */
   11744:	e0fff517 	ldw	r3,-44(fp)
   11748:	e0bffe17 	ldw	r2,-8(fp)
   1174c:	1885883a 	add	r2,r3,r2
   11750:	e0bff515 	stw	r2,-44(fp)
        *perr = OS_ERR_MEM_INVALID_PART;
        return ((OS_MEM *)0);
    }
    plink = (void **)addr;                            /* Create linked list of free memory blocks      */
    pblk  = (INT8U *)((INT32U)addr + blksize);
    for (i = 0; i < (nblks - 1); i++) {
   11754:	e0bff717 	ldw	r2,-36(fp)
   11758:	10800044 	addi	r2,r2,1
   1175c:	e0bff715 	stw	r2,-36(fp)
   11760:	e0bffd17 	ldw	r2,-12(fp)
   11764:	10bfffc4 	addi	r2,r2,-1
   11768:	e0fff717 	ldw	r3,-36(fp)
   1176c:	18bff036 	bltu	r3,r2,11730 <__alt_mem_Flash_flash_data+0xf4011730>
       *plink = (void *)pblk;                         /* Save pointer to NEXT block in CURRENT block   */
        plink = (void **)pblk;                        /* Position to  NEXT      block                  */
        pblk  = (INT8U *)((INT32U)pblk + blksize);    /* Point to the FOLLOWING block                  */
    }
    *plink              = (void *)0;                  /* Last memory block points to NULL              */
   11770:	e0bff617 	ldw	r2,-40(fp)
   11774:	10000015 	stw	zero,0(r2)
    pmem->OSMemAddr     = addr;                       /* Store start address of memory partition       */
   11778:	e0bff917 	ldw	r2,-28(fp)
   1177c:	e0fffc17 	ldw	r3,-16(fp)
   11780:	10c00015 	stw	r3,0(r2)
    pmem->OSMemFreeList = addr;                       /* Initialize pointer to pool of free blocks     */
   11784:	e0bff917 	ldw	r2,-28(fp)
   11788:	e0fffc17 	ldw	r3,-16(fp)
   1178c:	10c00115 	stw	r3,4(r2)
    pmem->OSMemNFree    = nblks;                      /* Store number of free blocks in MCB            */
   11790:	e0bff917 	ldw	r2,-28(fp)
   11794:	e0fffd17 	ldw	r3,-12(fp)
   11798:	10c00415 	stw	r3,16(r2)
    pmem->OSMemNBlks    = nblks;
   1179c:	e0bff917 	ldw	r2,-28(fp)
   117a0:	e0fffd17 	ldw	r3,-12(fp)
   117a4:	10c00315 	stw	r3,12(r2)
    pmem->OSMemBlkSize  = blksize;                    /* Store block size of each memory blocks        */
   117a8:	e0bff917 	ldw	r2,-28(fp)
   117ac:	e0fffe17 	ldw	r3,-8(fp)
   117b0:	10c00215 	stw	r3,8(r2)
    *perr               = OS_ERR_NONE;
   117b4:	e0bfff17 	ldw	r2,-4(fp)
   117b8:	10000005 	stb	zero,0(r2)
    return (pmem);
   117bc:	e0bff917 	ldw	r2,-28(fp)
}
   117c0:	e037883a 	mov	sp,fp
   117c4:	df000017 	ldw	fp,0(sp)
   117c8:	dec00104 	addi	sp,sp,4
   117cc:	f800283a 	ret

000117d0 <OSMemGet>:
*               A pointer to NULL if an error is detected
*********************************************************************************************************
*/

void  *OSMemGet (OS_MEM *pmem, INT8U *perr)
{
   117d0:	defff804 	addi	sp,sp,-32
   117d4:	df000715 	stw	fp,28(sp)
   117d8:	df000704 	addi	fp,sp,28
   117dc:	e13ffe15 	stw	r4,-8(fp)
   117e0:	e17fff15 	stw	r5,-4(fp)
    void      *pblk;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   117e4:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
   117e8:	e0bfff17 	ldw	r2,-4(fp)
   117ec:	1000021e 	bne	r2,zero,117f8 <OSMemGet+0x28>
        return ((void *)0);
   117f0:	0005883a 	mov	r2,zero
   117f4:	00002e06 	br	118b0 <OSMemGet+0xe0>
    }
    if (pmem == (OS_MEM *)0) {                        /* Must point to a valid memory partition        */
   117f8:	e0bffe17 	ldw	r2,-8(fp)
   117fc:	1000051e 	bne	r2,zero,11814 <OSMemGet+0x44>
        *perr = OS_ERR_MEM_INVALID_PMEM;
   11800:	e0bfff17 	ldw	r2,-4(fp)
   11804:	00c01804 	movi	r3,96
   11808:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
   1180c:	0005883a 	mov	r2,zero
   11810:	00002706 	br	118b0 <OSMemGet+0xe0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   11814:	0005303a 	rdctl	r2,status
   11818:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1181c:	e0fffb17 	ldw	r3,-20(fp)
   11820:	00bfff84 	movi	r2,-2
   11824:	1884703a 	and	r2,r3,r2
   11828:	1001703a 	wrctl	status,r2
  
  return context;
   1182c:	e0bffb17 	ldw	r2,-20(fp)
    }
#endif
    OS_ENTER_CRITICAL();
   11830:	e0bff915 	stw	r2,-28(fp)
    if (pmem->OSMemNFree > 0) {                       /* See if there are any free memory blocks       */
   11834:	e0bffe17 	ldw	r2,-8(fp)
   11838:	10800417 	ldw	r2,16(r2)
   1183c:	10001426 	beq	r2,zero,11890 <OSMemGet+0xc0>
        pblk                = pmem->OSMemFreeList;    /* Yes, point to next free memory block          */
   11840:	e0bffe17 	ldw	r2,-8(fp)
   11844:	10800117 	ldw	r2,4(r2)
   11848:	e0bffa15 	stw	r2,-24(fp)
        pmem->OSMemFreeList = *(void **)pblk;         /*      Adjust pointer to new free list          */
   1184c:	e0bffa17 	ldw	r2,-24(fp)
   11850:	10c00017 	ldw	r3,0(r2)
   11854:	e0bffe17 	ldw	r2,-8(fp)
   11858:	10c00115 	stw	r3,4(r2)
        pmem->OSMemNFree--;                           /*      One less memory block in this partition  */
   1185c:	e0bffe17 	ldw	r2,-8(fp)
   11860:	10800417 	ldw	r2,16(r2)
   11864:	10ffffc4 	addi	r3,r2,-1
   11868:	e0bffe17 	ldw	r2,-8(fp)
   1186c:	10c00415 	stw	r3,16(r2)
   11870:	e0bff917 	ldw	r2,-28(fp)
   11874:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   11878:	e0bffc17 	ldw	r2,-16(fp)
   1187c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_NONE;                          /*      No error                                 */
   11880:	e0bfff17 	ldw	r2,-4(fp)
   11884:	10000005 	stb	zero,0(r2)
        return (pblk);                                /*      Return memory block to caller            */
   11888:	e0bffa17 	ldw	r2,-24(fp)
   1188c:	00000806 	br	118b0 <OSMemGet+0xe0>
   11890:	e0bff917 	ldw	r2,-28(fp)
   11894:	e0bffd15 	stw	r2,-12(fp)
   11898:	e0bffd17 	ldw	r2,-12(fp)
   1189c:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_MEM_NO_FREE_BLKS;                  /* No,  Notify caller of empty memory partition  */
   118a0:	e0bfff17 	ldw	r2,-4(fp)
   118a4:	00c01744 	movi	r3,93
   118a8:	10c00005 	stb	r3,0(r2)
    return ((void *)0);                               /*      Return NULL pointer to caller            */
   118ac:	0005883a 	mov	r2,zero
}
   118b0:	e037883a 	mov	sp,fp
   118b4:	df000017 	ldw	fp,0(sp)
   118b8:	dec00104 	addi	sp,sp,4
   118bc:	f800283a 	ret

000118c0 <OSMemNameGet>:
*********************************************************************************************************
*/

#if OS_MEM_NAME_SIZE > 1
INT8U  OSMemNameGet (OS_MEM *pmem, INT8U *pname, INT8U *perr)
{
   118c0:	defff704 	addi	sp,sp,-36
   118c4:	dfc00815 	stw	ra,32(sp)
   118c8:	df000715 	stw	fp,28(sp)
   118cc:	df000704 	addi	fp,sp,28
   118d0:	e13ffd15 	stw	r4,-12(fp)
   118d4:	e17ffe15 	stw	r5,-8(fp)
   118d8:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   118dc:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
   118e0:	e0bfff17 	ldw	r2,-4(fp)
   118e4:	1000021e 	bne	r2,zero,118f0 <OSMemNameGet+0x30>
        return (0);
   118e8:	0005883a 	mov	r2,zero
   118ec:	00002d06 	br	119a4 <OSMemNameGet+0xe4>
    }
    if (pmem == (OS_MEM *)0) {                   /* Is 'pmem' a NULL pointer?                          */
   118f0:	e0bffd17 	ldw	r2,-12(fp)
   118f4:	1000051e 	bne	r2,zero,1190c <OSMemNameGet+0x4c>
        *perr = OS_ERR_MEM_INVALID_PMEM;
   118f8:	e0bfff17 	ldw	r2,-4(fp)
   118fc:	00c01804 	movi	r3,96
   11900:	10c00005 	stb	r3,0(r2)
        return (0);
   11904:	0005883a 	mov	r2,zero
   11908:	00002606 	br	119a4 <OSMemNameGet+0xe4>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
   1190c:	e0bffe17 	ldw	r2,-8(fp)
   11910:	1000051e 	bne	r2,zero,11928 <OSMemNameGet+0x68>
        *perr = OS_ERR_PNAME_NULL;
   11914:	e0bfff17 	ldw	r2,-4(fp)
   11918:	00c00304 	movi	r3,12
   1191c:	10c00005 	stb	r3,0(r2)
        return (0);
   11920:	0005883a 	mov	r2,zero
   11924:	00001f06 	br	119a4 <OSMemNameGet+0xe4>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
   11928:	008000b4 	movhi	r2,2
   1192c:	10b69a04 	addi	r2,r2,-9624
   11930:	10800003 	ldbu	r2,0(r2)
   11934:	10803fcc 	andi	r2,r2,255
   11938:	10000526 	beq	r2,zero,11950 <OSMemNameGet+0x90>
        *perr = OS_ERR_NAME_GET_ISR;
   1193c:	e0bfff17 	ldw	r2,-4(fp)
   11940:	00c00444 	movi	r3,17
   11944:	10c00005 	stb	r3,0(r2)
        return (0);
   11948:	0005883a 	mov	r2,zero
   1194c:	00001506 	br	119a4 <OSMemNameGet+0xe4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   11950:	0005303a 	rdctl	r2,status
   11954:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   11958:	e0fffb17 	ldw	r3,-20(fp)
   1195c:	00bfff84 	movi	r2,-2
   11960:	1884703a 	and	r2,r3,r2
   11964:	1001703a 	wrctl	status,r2
  
  return context;
   11968:	e0bffb17 	ldw	r2,-20(fp)
    }
    OS_ENTER_CRITICAL();
   1196c:	e0bff915 	stw	r2,-28(fp)
    len   = OS_StrCopy(pname, pmem->OSMemName);  /* Copy name from OS_MEM                              */
   11970:	e0bffd17 	ldw	r2,-12(fp)
   11974:	10800504 	addi	r2,r2,20
   11978:	e13ffe17 	ldw	r4,-8(fp)
   1197c:	100b883a 	mov	r5,r2
   11980:	000f6980 	call	f698 <OS_StrCopy>
   11984:	e0bffa05 	stb	r2,-24(fp)
   11988:	e0bff917 	ldw	r2,-28(fp)
   1198c:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   11990:	e0bffc17 	ldw	r2,-16(fp)
   11994:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
   11998:	e0bfff17 	ldw	r2,-4(fp)
   1199c:	10000005 	stb	zero,0(r2)
    return (len);
   119a0:	e0bffa03 	ldbu	r2,-24(fp)
}
   119a4:	e037883a 	mov	sp,fp
   119a8:	dfc00117 	ldw	ra,4(sp)
   119ac:	df000017 	ldw	fp,0(sp)
   119b0:	dec00204 	addi	sp,sp,8
   119b4:	f800283a 	ret

000119b8 <OSMemNameSet>:
*********************************************************************************************************
*/

#if OS_MEM_NAME_SIZE > 1
void  OSMemNameSet (OS_MEM *pmem, INT8U *pname, INT8U *perr)
{
   119b8:	defff604 	addi	sp,sp,-40
   119bc:	dfc00915 	stw	ra,36(sp)
   119c0:	df000815 	stw	fp,32(sp)
   119c4:	df000804 	addi	fp,sp,32
   119c8:	e13ffd15 	stw	r4,-12(fp)
   119cc:	e17ffe15 	stw	r5,-8(fp)
   119d0:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   119d4:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
   119d8:	e0bfff17 	ldw	r2,-4(fp)
   119dc:	1000011e 	bne	r2,zero,119e4 <OSMemNameSet+0x2c>
        return;
   119e0:	00003606 	br	11abc <OSMemNameSet+0x104>
    }
    if (pmem == (OS_MEM *)0) {                   /* Is 'pmem' a NULL pointer?                          */
   119e4:	e0bffd17 	ldw	r2,-12(fp)
   119e8:	1000041e 	bne	r2,zero,119fc <OSMemNameSet+0x44>
        *perr = OS_ERR_MEM_INVALID_PMEM;
   119ec:	e0bfff17 	ldw	r2,-4(fp)
   119f0:	00c01804 	movi	r3,96
   119f4:	10c00005 	stb	r3,0(r2)
        return;
   119f8:	00003006 	br	11abc <OSMemNameSet+0x104>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
   119fc:	e0bffe17 	ldw	r2,-8(fp)
   11a00:	1000041e 	bne	r2,zero,11a14 <OSMemNameSet+0x5c>
        *perr = OS_ERR_PNAME_NULL;
   11a04:	e0bfff17 	ldw	r2,-4(fp)
   11a08:	00c00304 	movi	r3,12
   11a0c:	10c00005 	stb	r3,0(r2)
        return;
   11a10:	00002a06 	br	11abc <OSMemNameSet+0x104>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
   11a14:	008000b4 	movhi	r2,2
   11a18:	10b69a04 	addi	r2,r2,-9624
   11a1c:	10800003 	ldbu	r2,0(r2)
   11a20:	10803fcc 	andi	r2,r2,255
   11a24:	10000426 	beq	r2,zero,11a38 <OSMemNameSet+0x80>
        *perr = OS_ERR_NAME_SET_ISR;
   11a28:	e0bfff17 	ldw	r2,-4(fp)
   11a2c:	00c00484 	movi	r3,18
   11a30:	10c00005 	stb	r3,0(r2)
        return;
   11a34:	00002106 	br	11abc <OSMemNameSet+0x104>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   11a38:	0005303a 	rdctl	r2,status
   11a3c:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   11a40:	e0fffa17 	ldw	r3,-24(fp)
   11a44:	00bfff84 	movi	r2,-2
   11a48:	1884703a 	and	r2,r3,r2
   11a4c:	1001703a 	wrctl	status,r2
  
  return context;
   11a50:	e0bffa17 	ldw	r2,-24(fp)
    }
    OS_ENTER_CRITICAL();
   11a54:	e0bff815 	stw	r2,-32(fp)
    len = OS_StrLen(pname);                      /* Can we fit the string in the storage area?         */
   11a58:	e13ffe17 	ldw	r4,-8(fp)
   11a5c:	000f70c0 	call	f70c <OS_StrLen>
   11a60:	e0bff905 	stb	r2,-28(fp)
    if (len > (OS_MEM_NAME_SIZE - 1)) {          /* No                                                 */
   11a64:	e0bff903 	ldbu	r2,-28(fp)
   11a68:	10800830 	cmpltui	r2,r2,32
   11a6c:	1000081e 	bne	r2,zero,11a90 <OSMemNameSet+0xd8>
   11a70:	e0bff817 	ldw	r2,-32(fp)
   11a74:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   11a78:	e0bffb17 	ldw	r2,-20(fp)
   11a7c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_MEM_NAME_TOO_LONG;
   11a80:	e0bfff17 	ldw	r2,-4(fp)
   11a84:	00c018c4 	movi	r3,99
   11a88:	10c00005 	stb	r3,0(r2)
        return;
   11a8c:	00000b06 	br	11abc <OSMemNameSet+0x104>
    }
    (void)OS_StrCopy(pmem->OSMemName, pname);    /* Yes, copy name to the memory partition header      */
   11a90:	e0bffd17 	ldw	r2,-12(fp)
   11a94:	10800504 	addi	r2,r2,20
   11a98:	1009883a 	mov	r4,r2
   11a9c:	e17ffe17 	ldw	r5,-8(fp)
   11aa0:	000f6980 	call	f698 <OS_StrCopy>
   11aa4:	e0bff817 	ldw	r2,-32(fp)
   11aa8:	e0bffc15 	stw	r2,-16(fp)
   11aac:	e0bffc17 	ldw	r2,-16(fp)
   11ab0:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
   11ab4:	e0bfff17 	ldw	r2,-4(fp)
   11ab8:	10000005 	stb	zero,0(r2)
}
   11abc:	e037883a 	mov	sp,fp
   11ac0:	dfc00117 	ldw	ra,4(sp)
   11ac4:	df000017 	ldw	fp,0(sp)
   11ac8:	dec00204 	addi	sp,sp,8
   11acc:	f800283a 	ret

00011ad0 <OSMemPut>:
*               OS_ERR_MEM_INVALID_PBLK  if you passed a NULL pointer for the block to release.
*********************************************************************************************************
*/

INT8U  OSMemPut (OS_MEM *pmem, void *pblk)
{
   11ad0:	defff904 	addi	sp,sp,-28
   11ad4:	df000615 	stw	fp,24(sp)
   11ad8:	df000604 	addi	fp,sp,24
   11adc:	e13ffe15 	stw	r4,-8(fp)
   11ae0:	e17fff15 	stw	r5,-4(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   11ae4:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pmem == (OS_MEM *)0) {                   /* Must point to a valid memory partition             */
   11ae8:	e0bffe17 	ldw	r2,-8(fp)
   11aec:	1000021e 	bne	r2,zero,11af8 <OSMemPut+0x28>
        return (OS_ERR_MEM_INVALID_PMEM);
   11af0:	00801804 	movi	r2,96
   11af4:	00002806 	br	11b98 <OSMemPut+0xc8>
    }
    if (pblk == (void *)0) {                     /* Must release a valid block                         */
   11af8:	e0bfff17 	ldw	r2,-4(fp)
   11afc:	1000021e 	bne	r2,zero,11b08 <OSMemPut+0x38>
        return (OS_ERR_MEM_INVALID_PBLK);
   11b00:	008017c4 	movi	r2,95
   11b04:	00002406 	br	11b98 <OSMemPut+0xc8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   11b08:	0005303a 	rdctl	r2,status
   11b0c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   11b10:	e0fffb17 	ldw	r3,-20(fp)
   11b14:	00bfff84 	movi	r2,-2
   11b18:	1884703a 	and	r2,r3,r2
   11b1c:	1001703a 	wrctl	status,r2
  
  return context;
   11b20:	e0bffb17 	ldw	r2,-20(fp)
    }
#endif
    OS_ENTER_CRITICAL();
   11b24:	e0bffa15 	stw	r2,-24(fp)
    if (pmem->OSMemNFree >= pmem->OSMemNBlks) {  /* Make sure all blocks not already returned          */
   11b28:	e0bffe17 	ldw	r2,-8(fp)
   11b2c:	10c00417 	ldw	r3,16(r2)
   11b30:	e0bffe17 	ldw	r2,-8(fp)
   11b34:	10800317 	ldw	r2,12(r2)
   11b38:	18800636 	bltu	r3,r2,11b54 <OSMemPut+0x84>
   11b3c:	e0bffa17 	ldw	r2,-24(fp)
   11b40:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   11b44:	e0bffc17 	ldw	r2,-16(fp)
   11b48:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_MEM_FULL);
   11b4c:	00801784 	movi	r2,94
   11b50:	00001106 	br	11b98 <OSMemPut+0xc8>
    }
    *(void **)pblk      = pmem->OSMemFreeList;   /* Insert released block into free block list         */
   11b54:	e0bffe17 	ldw	r2,-8(fp)
   11b58:	10c00117 	ldw	r3,4(r2)
   11b5c:	e0bfff17 	ldw	r2,-4(fp)
   11b60:	10c00015 	stw	r3,0(r2)
    pmem->OSMemFreeList = pblk;
   11b64:	e0bffe17 	ldw	r2,-8(fp)
   11b68:	e0ffff17 	ldw	r3,-4(fp)
   11b6c:	10c00115 	stw	r3,4(r2)
    pmem->OSMemNFree++;                          /* One more memory block in this partition            */
   11b70:	e0bffe17 	ldw	r2,-8(fp)
   11b74:	10800417 	ldw	r2,16(r2)
   11b78:	10c00044 	addi	r3,r2,1
   11b7c:	e0bffe17 	ldw	r2,-8(fp)
   11b80:	10c00415 	stw	r3,16(r2)
   11b84:	e0bffa17 	ldw	r2,-24(fp)
   11b88:	e0bffd15 	stw	r2,-12(fp)
   11b8c:	e0bffd17 	ldw	r2,-12(fp)
   11b90:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);                        /* Notify caller that memory block was released       */
   11b94:	0005883a 	mov	r2,zero
}
   11b98:	e037883a 	mov	sp,fp
   11b9c:	df000017 	ldw	fp,0(sp)
   11ba0:	dec00104 	addi	sp,sp,4
   11ba4:	f800283a 	ret

00011ba8 <OSMemQuery>:
*********************************************************************************************************
*/

#if OS_MEM_QUERY_EN > 0
INT8U  OSMemQuery (OS_MEM *pmem, OS_MEM_DATA *p_mem_data)
{
   11ba8:	defffa04 	addi	sp,sp,-24
   11bac:	df000515 	stw	fp,20(sp)
   11bb0:	df000504 	addi	fp,sp,20
   11bb4:	e13ffe15 	stw	r4,-8(fp)
   11bb8:	e17fff15 	stw	r5,-4(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   11bbc:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pmem == (OS_MEM *)0) {                   /* Must point to a valid memory partition             */
   11bc0:	e0bffe17 	ldw	r2,-8(fp)
   11bc4:	1000021e 	bne	r2,zero,11bd0 <OSMemQuery+0x28>
        return (OS_ERR_MEM_INVALID_PMEM);
   11bc8:	00801804 	movi	r2,96
   11bcc:	00002c06 	br	11c80 <OSMemQuery+0xd8>
    }
    if (p_mem_data == (OS_MEM_DATA *)0) {        /* Must release a valid storage area for the data     */
   11bd0:	e0bfff17 	ldw	r2,-4(fp)
   11bd4:	1000021e 	bne	r2,zero,11be0 <OSMemQuery+0x38>
        return (OS_ERR_MEM_INVALID_PDATA);
   11bd8:	00801844 	movi	r2,97
   11bdc:	00002806 	br	11c80 <OSMemQuery+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   11be0:	0005303a 	rdctl	r2,status
   11be4:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   11be8:	e0fffc17 	ldw	r3,-16(fp)
   11bec:	00bfff84 	movi	r2,-2
   11bf0:	1884703a 	and	r2,r3,r2
   11bf4:	1001703a 	wrctl	status,r2
  
  return context;
   11bf8:	e0bffc17 	ldw	r2,-16(fp)
    }
#endif
    OS_ENTER_CRITICAL();
   11bfc:	e0bffb15 	stw	r2,-20(fp)
    p_mem_data->OSAddr     = pmem->OSMemAddr;
   11c00:	e0bffe17 	ldw	r2,-8(fp)
   11c04:	10c00017 	ldw	r3,0(r2)
   11c08:	e0bfff17 	ldw	r2,-4(fp)
   11c0c:	10c00015 	stw	r3,0(r2)
    p_mem_data->OSFreeList = pmem->OSMemFreeList;
   11c10:	e0bffe17 	ldw	r2,-8(fp)
   11c14:	10c00117 	ldw	r3,4(r2)
   11c18:	e0bfff17 	ldw	r2,-4(fp)
   11c1c:	10c00115 	stw	r3,4(r2)
    p_mem_data->OSBlkSize  = pmem->OSMemBlkSize;
   11c20:	e0bffe17 	ldw	r2,-8(fp)
   11c24:	10c00217 	ldw	r3,8(r2)
   11c28:	e0bfff17 	ldw	r2,-4(fp)
   11c2c:	10c00215 	stw	r3,8(r2)
    p_mem_data->OSNBlks    = pmem->OSMemNBlks;
   11c30:	e0bffe17 	ldw	r2,-8(fp)
   11c34:	10c00317 	ldw	r3,12(r2)
   11c38:	e0bfff17 	ldw	r2,-4(fp)
   11c3c:	10c00315 	stw	r3,12(r2)
    p_mem_data->OSNFree    = pmem->OSMemNFree;
   11c40:	e0bffe17 	ldw	r2,-8(fp)
   11c44:	10c00417 	ldw	r3,16(r2)
   11c48:	e0bfff17 	ldw	r2,-4(fp)
   11c4c:	10c00415 	stw	r3,16(r2)
   11c50:	e0bffb17 	ldw	r2,-20(fp)
   11c54:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   11c58:	e0bffd17 	ldw	r2,-12(fp)
   11c5c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    p_mem_data->OSNUsed    = p_mem_data->OSNBlks - p_mem_data->OSNFree;
   11c60:	e0bfff17 	ldw	r2,-4(fp)
   11c64:	10c00317 	ldw	r3,12(r2)
   11c68:	e0bfff17 	ldw	r2,-4(fp)
   11c6c:	10800417 	ldw	r2,16(r2)
   11c70:	1887c83a 	sub	r3,r3,r2
   11c74:	e0bfff17 	ldw	r2,-4(fp)
   11c78:	10c00515 	stw	r3,20(r2)
    return (OS_ERR_NONE);
   11c7c:	0005883a 	mov	r2,zero
}
   11c80:	e037883a 	mov	sp,fp
   11c84:	df000017 	ldw	fp,0(sp)
   11c88:	dec00104 	addi	sp,sp,4
   11c8c:	f800283a 	ret

00011c90 <OS_MemInit>:
* Note(s)    : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

void  OS_MemInit (void)
{
   11c90:	defffc04 	addi	sp,sp,-16
   11c94:	dfc00315 	stw	ra,12(sp)
   11c98:	df000215 	stw	fp,8(sp)
   11c9c:	df000204 	addi	fp,sp,8
#if OS_MAX_MEM_PART >= 2
    OS_MEM  *pmem;
    INT16U   i;


    OS_MemClr((INT8U *)&OSMemTbl[0], sizeof(OSMemTbl));   /* Clear the memory partition table          */
   11ca0:	010000b4 	movhi	r4,2
   11ca4:	210f8a04 	addi	r4,r4,15912
   11ca8:	01430c04 	movi	r5,3120
   11cac:	000f4a80 	call	f4a8 <OS_MemClr>
    pmem = &OSMemTbl[0];                                  /* Point to memory control block (MCB)       */
   11cb0:	008000b4 	movhi	r2,2
   11cb4:	108f8a04 	addi	r2,r2,15912
   11cb8:	e0bffe15 	stw	r2,-8(fp)
    for (i = 0; i < (OS_MAX_MEM_PART - 1); i++) {         /* Init. list of free memory partitions      */
   11cbc:	e03fff0d 	sth	zero,-4(fp)
   11cc0:	00001306 	br	11d10 <OS_MemInit+0x80>
        pmem->OSMemFreeList = (void *)&OSMemTbl[i+1];     /* Chain list of free partitions             */
   11cc4:	e0bfff0b 	ldhu	r2,-4(fp)
   11cc8:	10800044 	addi	r2,r2,1
   11ccc:	10c00d24 	muli	r3,r2,52
   11cd0:	008000b4 	movhi	r2,2
   11cd4:	108f8a04 	addi	r2,r2,15912
   11cd8:	1887883a 	add	r3,r3,r2
   11cdc:	e0bffe17 	ldw	r2,-8(fp)
   11ce0:	10c00115 	stw	r3,4(r2)
#if OS_MEM_NAME_SIZE > 1
        pmem->OSMemName[0]  = '?';                        /* Unknown name                              */
   11ce4:	e0bffe17 	ldw	r2,-8(fp)
   11ce8:	00c00fc4 	movi	r3,63
   11cec:	10c00505 	stb	r3,20(r2)
        pmem->OSMemName[1]  = OS_ASCII_NUL;
   11cf0:	e0bffe17 	ldw	r2,-8(fp)
   11cf4:	10000545 	stb	zero,21(r2)
#endif
        pmem++;
   11cf8:	e0bffe17 	ldw	r2,-8(fp)
   11cfc:	10800d04 	addi	r2,r2,52
   11d00:	e0bffe15 	stw	r2,-8(fp)
    INT16U   i;


    OS_MemClr((INT8U *)&OSMemTbl[0], sizeof(OSMemTbl));   /* Clear the memory partition table          */
    pmem = &OSMemTbl[0];                                  /* Point to memory control block (MCB)       */
    for (i = 0; i < (OS_MAX_MEM_PART - 1); i++) {         /* Init. list of free memory partitions      */
   11d04:	e0bfff0b 	ldhu	r2,-4(fp)
   11d08:	10800044 	addi	r2,r2,1
   11d0c:	e0bfff0d 	sth	r2,-4(fp)
   11d10:	e0bfff0b 	ldhu	r2,-4(fp)
   11d14:	10800ef0 	cmpltui	r2,r2,59
   11d18:	103fea1e 	bne	r2,zero,11cc4 <__alt_mem_Flash_flash_data+0xf4011cc4>
        pmem->OSMemName[0]  = '?';                        /* Unknown name                              */
        pmem->OSMemName[1]  = OS_ASCII_NUL;
#endif
        pmem++;
    }
    pmem->OSMemFreeList = (void *)0;                      /* Initialize last node                      */
   11d1c:	e0bffe17 	ldw	r2,-8(fp)
   11d20:	10000115 	stw	zero,4(r2)
#if OS_MEM_NAME_SIZE > 1
    pmem->OSMemName[0]  = '?';                            /* Unknown name                              */
   11d24:	e0bffe17 	ldw	r2,-8(fp)
   11d28:	00c00fc4 	movi	r3,63
   11d2c:	10c00505 	stb	r3,20(r2)
    pmem->OSMemName[1]  = OS_ASCII_NUL;
   11d30:	e0bffe17 	ldw	r2,-8(fp)
   11d34:	10000545 	stb	zero,21(r2)
#endif

    OSMemFreeList       = &OSMemTbl[0];                   /* Point to beginning of free list           */
   11d38:	008000b4 	movhi	r2,2
   11d3c:	10b69504 	addi	r2,r2,-9644
   11d40:	00c000b4 	movhi	r3,2
   11d44:	18cf8a04 	addi	r3,r3,15912
   11d48:	10c00015 	stw	r3,0(r2)
#endif
}
   11d4c:	e037883a 	mov	sp,fp
   11d50:	dfc00117 	ldw	ra,4(sp)
   11d54:	df000017 	ldw	fp,0(sp)
   11d58:	dec00204 	addi	sp,sp,8
   11d5c:	f800283a 	ret

00011d60 <OSQAccept>:
*********************************************************************************************************
*/

#if OS_Q_ACCEPT_EN > 0
void  *OSQAccept (OS_EVENT *pevent, INT8U *perr)
{
   11d60:	defff804 	addi	sp,sp,-32
   11d64:	df000715 	stw	fp,28(sp)
   11d68:	df000704 	addi	fp,sp,28
   11d6c:	e13ffe15 	stw	r4,-8(fp)
   11d70:	e17fff15 	stw	r5,-4(fp)
    void      *pmsg;
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   11d74:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
   11d78:	e0bfff17 	ldw	r2,-4(fp)
   11d7c:	1000021e 	bne	r2,zero,11d88 <OSQAccept+0x28>
        return ((void *)0);
   11d80:	0005883a 	mov	r2,zero
   11d84:	00004206 	br	11e90 <OSQAccept+0x130>
    }
    if (pevent == (OS_EVENT *)0) {               /* Validate 'pevent'                                  */
   11d88:	e0bffe17 	ldw	r2,-8(fp)
   11d8c:	1000051e 	bne	r2,zero,11da4 <OSQAccept+0x44>
        *perr = OS_ERR_PEVENT_NULL;
   11d90:	e0bfff17 	ldw	r2,-4(fp)
   11d94:	00c00104 	movi	r3,4
   11d98:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
   11d9c:	0005883a 	mov	r2,zero
   11da0:	00003b06 	br	11e90 <OSQAccept+0x130>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {/* Validate event block type                          */
   11da4:	e0bffe17 	ldw	r2,-8(fp)
   11da8:	10800003 	ldbu	r2,0(r2)
   11dac:	10803fcc 	andi	r2,r2,255
   11db0:	108000a0 	cmpeqi	r2,r2,2
   11db4:	1000051e 	bne	r2,zero,11dcc <OSQAccept+0x6c>
        *perr = OS_ERR_EVENT_TYPE;
   11db8:	e0bfff17 	ldw	r2,-4(fp)
   11dbc:	00c00044 	movi	r3,1
   11dc0:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
   11dc4:	0005883a 	mov	r2,zero
   11dc8:	00003106 	br	11e90 <OSQAccept+0x130>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   11dcc:	0005303a 	rdctl	r2,status
   11dd0:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   11dd4:	e0fffc17 	ldw	r3,-16(fp)
   11dd8:	00bfff84 	movi	r2,-2
   11ddc:	1884703a 	and	r2,r3,r2
   11de0:	1001703a 	wrctl	status,r2
  
  return context;
   11de4:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
   11de8:	e0bffa15 	stw	r2,-24(fp)
    pq = (OS_Q *)pevent->OSEventPtr;             /* Point at queue control block                       */
   11dec:	e0bffe17 	ldw	r2,-8(fp)
   11df0:	10800117 	ldw	r2,4(r2)
   11df4:	e0bffb15 	stw	r2,-20(fp)
    if (pq->OSQEntries > 0) {                    /* See if any messages in the queue                   */
   11df8:	e0bffb17 	ldw	r2,-20(fp)
   11dfc:	1080058b 	ldhu	r2,22(r2)
   11e00:	10bfffcc 	andi	r2,r2,65535
   11e04:	10001926 	beq	r2,zero,11e6c <OSQAccept+0x10c>
        pmsg = *pq->OSQOut++;                    /* Yes, extract oldest message from the queue         */
   11e08:	e0bffb17 	ldw	r2,-20(fp)
   11e0c:	10800417 	ldw	r2,16(r2)
   11e10:	11000104 	addi	r4,r2,4
   11e14:	e0fffb17 	ldw	r3,-20(fp)
   11e18:	19000415 	stw	r4,16(r3)
   11e1c:	10800017 	ldw	r2,0(r2)
   11e20:	e0bff915 	stw	r2,-28(fp)
        pq->OSQEntries--;                        /* Update the number of entries in the queue          */
   11e24:	e0bffb17 	ldw	r2,-20(fp)
   11e28:	1080058b 	ldhu	r2,22(r2)
   11e2c:	10bfffc4 	addi	r2,r2,-1
   11e30:	1007883a 	mov	r3,r2
   11e34:	e0bffb17 	ldw	r2,-20(fp)
   11e38:	10c0058d 	sth	r3,22(r2)
        if (pq->OSQOut == pq->OSQEnd) {          /* Wrap OUT pointer if we are at the end of the queue */
   11e3c:	e0bffb17 	ldw	r2,-20(fp)
   11e40:	10c00417 	ldw	r3,16(r2)
   11e44:	e0bffb17 	ldw	r2,-20(fp)
   11e48:	10800217 	ldw	r2,8(r2)
   11e4c:	1880041e 	bne	r3,r2,11e60 <OSQAccept+0x100>
            pq->OSQOut = pq->OSQStart;
   11e50:	e0bffb17 	ldw	r2,-20(fp)
   11e54:	10c00117 	ldw	r3,4(r2)
   11e58:	e0bffb17 	ldw	r2,-20(fp)
   11e5c:	10c00415 	stw	r3,16(r2)
        }
        *perr = OS_ERR_NONE;
   11e60:	e0bfff17 	ldw	r2,-4(fp)
   11e64:	10000005 	stb	zero,0(r2)
   11e68:	00000406 	br	11e7c <OSQAccept+0x11c>
    } else {
        *perr = OS_ERR_Q_EMPTY;
   11e6c:	e0bfff17 	ldw	r2,-4(fp)
   11e70:	00c007c4 	movi	r3,31
   11e74:	10c00005 	stb	r3,0(r2)
        pmsg  = (void *)0;                       /* Queue is empty                                     */
   11e78:	e03ff915 	stw	zero,-28(fp)
   11e7c:	e0bffa17 	ldw	r2,-24(fp)
   11e80:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   11e84:	e0bffd17 	ldw	r2,-12(fp)
   11e88:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (pmsg);                               /* Return message received (or NULL)                  */
   11e8c:	e0bff917 	ldw	r2,-28(fp)
}
   11e90:	e037883a 	mov	sp,fp
   11e94:	df000017 	ldw	fp,0(sp)
   11e98:	dec00104 	addi	sp,sp,4
   11e9c:	f800283a 	ret

00011ea0 <OSQCreate>:
*              == (OS_EVENT *)0  if no event control blocks were available or an error was detected
*********************************************************************************************************
*/

OS_EVENT  *OSQCreate (void **start, INT16U size)
{
   11ea0:	defff404 	addi	sp,sp,-48
   11ea4:	dfc00b15 	stw	ra,44(sp)
   11ea8:	df000a15 	stw	fp,40(sp)
   11eac:	df000a04 	addi	fp,sp,40
   11eb0:	e13ffe15 	stw	r4,-8(fp)
   11eb4:	2805883a 	mov	r2,r5
   11eb8:	e0bfff0d 	sth	r2,-4(fp)
    OS_EVENT  *pevent;
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   11ebc:	e03ff715 	stw	zero,-36(fp)
#endif



    if (OSIntNesting > 0) {                      /* See if called from ISR ...                         */
   11ec0:	008000b4 	movhi	r2,2
   11ec4:	10b69a04 	addi	r2,r2,-9624
   11ec8:	10800003 	ldbu	r2,0(r2)
   11ecc:	10803fcc 	andi	r2,r2,255
   11ed0:	10000226 	beq	r2,zero,11edc <OSQCreate+0x3c>
        return ((OS_EVENT *)0);                  /* ... can't CREATE from an ISR                       */
   11ed4:	0005883a 	mov	r2,zero
   11ed8:	00006b06 	br	12088 <OSQCreate+0x1e8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   11edc:	0005303a 	rdctl	r2,status
   11ee0:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   11ee4:	e0fff917 	ldw	r3,-28(fp)
   11ee8:	00bfff84 	movi	r2,-2
   11eec:	1884703a 	and	r2,r3,r2
   11ef0:	1001703a 	wrctl	status,r2
  
  return context;
   11ef4:	e0bff917 	ldw	r2,-28(fp)
    }
    OS_ENTER_CRITICAL();
   11ef8:	e0bff715 	stw	r2,-36(fp)
    pevent = OSEventFreeList;                    /* Get next free event control block                  */
   11efc:	008000b4 	movhi	r2,2
   11f00:	10b69904 	addi	r2,r2,-9628
   11f04:	10800017 	ldw	r2,0(r2)
   11f08:	e0bff615 	stw	r2,-40(fp)
    if (OSEventFreeList != (OS_EVENT *)0) {      /* See if pool of free ECB pool was empty             */
   11f0c:	008000b4 	movhi	r2,2
   11f10:	10b69904 	addi	r2,r2,-9628
   11f14:	10800017 	ldw	r2,0(r2)
   11f18:	10000726 	beq	r2,zero,11f38 <OSQCreate+0x98>
        OSEventFreeList = (OS_EVENT *)OSEventFreeList->OSEventPtr;
   11f1c:	008000b4 	movhi	r2,2
   11f20:	10b69904 	addi	r2,r2,-9628
   11f24:	10800017 	ldw	r2,0(r2)
   11f28:	10c00117 	ldw	r3,4(r2)
   11f2c:	008000b4 	movhi	r2,2
   11f30:	10b69904 	addi	r2,r2,-9628
   11f34:	10c00015 	stw	r3,0(r2)
   11f38:	e0bff717 	ldw	r2,-36(fp)
   11f3c:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   11f40:	e0bffa17 	ldw	r2,-24(fp)
   11f44:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    if (pevent != (OS_EVENT *)0) {               /* See if we have an event control block              */
   11f48:	e0bff617 	ldw	r2,-40(fp)
   11f4c:	10004d26 	beq	r2,zero,12084 <OSQCreate+0x1e4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   11f50:	0005303a 	rdctl	r2,status
   11f54:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   11f58:	e0fffb17 	ldw	r3,-20(fp)
   11f5c:	00bfff84 	movi	r2,-2
   11f60:	1884703a 	and	r2,r3,r2
   11f64:	1001703a 	wrctl	status,r2
  
  return context;
   11f68:	e0bffb17 	ldw	r2,-20(fp)
        OS_ENTER_CRITICAL();
   11f6c:	e0bff715 	stw	r2,-36(fp)
        pq = OSQFreeList;                        /* Get a free queue control block                     */
   11f70:	008000b4 	movhi	r2,2
   11f74:	10b69704 	addi	r2,r2,-9636
   11f78:	10800017 	ldw	r2,0(r2)
   11f7c:	e0bff815 	stw	r2,-32(fp)
        if (pq != (OS_Q *)0) {                   /* Were we able to get a queue control block ?        */
   11f80:	e0bff817 	ldw	r2,-32(fp)
   11f84:	10003126 	beq	r2,zero,1204c <OSQCreate+0x1ac>
            OSQFreeList            = OSQFreeList->OSQPtr; /* Yes, Adjust free list pointer to next free*/
   11f88:	008000b4 	movhi	r2,2
   11f8c:	10b69704 	addi	r2,r2,-9636
   11f90:	10800017 	ldw	r2,0(r2)
   11f94:	10c00017 	ldw	r3,0(r2)
   11f98:	008000b4 	movhi	r2,2
   11f9c:	10b69704 	addi	r2,r2,-9636
   11fa0:	10c00015 	stw	r3,0(r2)
   11fa4:	e0bff717 	ldw	r2,-36(fp)
   11fa8:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   11fac:	e0bffc17 	ldw	r2,-16(fp)
   11fb0:	1001703a 	wrctl	status,r2
            OS_EXIT_CRITICAL();
            pq->OSQStart           = start;               /*      Initialize the queue                 */
   11fb4:	e0bff817 	ldw	r2,-32(fp)
   11fb8:	e0fffe17 	ldw	r3,-8(fp)
   11fbc:	10c00115 	stw	r3,4(r2)
            pq->OSQEnd             = &start[size];
   11fc0:	e0bfff0b 	ldhu	r2,-4(fp)
   11fc4:	1085883a 	add	r2,r2,r2
   11fc8:	1085883a 	add	r2,r2,r2
   11fcc:	1007883a 	mov	r3,r2
   11fd0:	e0bffe17 	ldw	r2,-8(fp)
   11fd4:	10c7883a 	add	r3,r2,r3
   11fd8:	e0bff817 	ldw	r2,-32(fp)
   11fdc:	10c00215 	stw	r3,8(r2)
            pq->OSQIn              = start;
   11fe0:	e0bff817 	ldw	r2,-32(fp)
   11fe4:	e0fffe17 	ldw	r3,-8(fp)
   11fe8:	10c00315 	stw	r3,12(r2)
            pq->OSQOut             = start;
   11fec:	e0bff817 	ldw	r2,-32(fp)
   11ff0:	e0fffe17 	ldw	r3,-8(fp)
   11ff4:	10c00415 	stw	r3,16(r2)
            pq->OSQSize            = size;
   11ff8:	e0bff817 	ldw	r2,-32(fp)
   11ffc:	e0ffff0b 	ldhu	r3,-4(fp)
   12000:	10c0050d 	sth	r3,20(r2)
            pq->OSQEntries         = 0;
   12004:	e0bff817 	ldw	r2,-32(fp)
   12008:	1000058d 	sth	zero,22(r2)
            pevent->OSEventType    = OS_EVENT_TYPE_Q;
   1200c:	e0bff617 	ldw	r2,-40(fp)
   12010:	00c00084 	movi	r3,2
   12014:	10c00005 	stb	r3,0(r2)
            pevent->OSEventCnt     = 0;
   12018:	e0bff617 	ldw	r2,-40(fp)
   1201c:	1000020d 	sth	zero,8(r2)
            pevent->OSEventPtr     = pq;
   12020:	e0bff617 	ldw	r2,-40(fp)
   12024:	e0fff817 	ldw	r3,-32(fp)
   12028:	10c00115 	stw	r3,4(r2)
#if OS_EVENT_NAME_SIZE > 1
            pevent->OSEventName[0] = '?';                  /* Unknown name                             */
   1202c:	e0bff617 	ldw	r2,-40(fp)
   12030:	00c00fc4 	movi	r3,63
   12034:	10c00385 	stb	r3,14(r2)
            pevent->OSEventName[1] = OS_ASCII_NUL;
   12038:	e0bff617 	ldw	r2,-40(fp)
   1203c:	100003c5 	stb	zero,15(r2)
#endif
            OS_EventWaitListInit(pevent);                 /*      Initalize the wait list              */
   12040:	e13ff617 	ldw	r4,-40(fp)
   12044:	000f0e40 	call	f0e4 <OS_EventWaitListInit>
   12048:	00000e06 	br	12084 <OSQCreate+0x1e4>
        } else {
            pevent->OSEventPtr = (void *)OSEventFreeList; /* No,  Return event control block on error  */
   1204c:	008000b4 	movhi	r2,2
   12050:	10b69904 	addi	r2,r2,-9628
   12054:	10c00017 	ldw	r3,0(r2)
   12058:	e0bff617 	ldw	r2,-40(fp)
   1205c:	10c00115 	stw	r3,4(r2)
            OSEventFreeList    = pevent;
   12060:	008000b4 	movhi	r2,2
   12064:	10b69904 	addi	r2,r2,-9628
   12068:	e0fff617 	ldw	r3,-40(fp)
   1206c:	10c00015 	stw	r3,0(r2)
   12070:	e0bff717 	ldw	r2,-36(fp)
   12074:	e0bffd15 	stw	r2,-12(fp)
   12078:	e0bffd17 	ldw	r2,-12(fp)
   1207c:	1001703a 	wrctl	status,r2
            OS_EXIT_CRITICAL();
            pevent = (OS_EVENT *)0;
   12080:	e03ff615 	stw	zero,-40(fp)
        }
    }
    return (pevent);
   12084:	e0bff617 	ldw	r2,-40(fp)
}
   12088:	e037883a 	mov	sp,fp
   1208c:	dfc00117 	ldw	ra,4(sp)
   12090:	df000017 	ldw	fp,0(sp)
   12094:	dec00204 	addi	sp,sp,8
   12098:	f800283a 	ret

0001209c <OSQDel>:
*********************************************************************************************************
*/

#if OS_Q_DEL_EN > 0
OS_EVENT  *OSQDel (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
   1209c:	defff204 	addi	sp,sp,-56
   120a0:	dfc00d15 	stw	ra,52(sp)
   120a4:	df000c15 	stw	fp,48(sp)
   120a8:	df000c04 	addi	fp,sp,48
   120ac:	e13ffd15 	stw	r4,-12(fp)
   120b0:	2805883a 	mov	r2,r5
   120b4:	e1bfff15 	stw	r6,-4(fp)
   120b8:	e0bffe05 	stb	r2,-8(fp)
    BOOLEAN    tasks_waiting;
    OS_EVENT  *pevent_return;
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
   120bc:	e03ff615 	stw	zero,-40(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
   120c0:	e0bfff17 	ldw	r2,-4(fp)
   120c4:	1000021e 	bne	r2,zero,120d0 <OSQDel+0x34>
        return (pevent);
   120c8:	e0bffd17 	ldw	r2,-12(fp)
   120cc:	0000a006 	br	12350 <OSQDel+0x2b4>
    }
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
   120d0:	e0bffd17 	ldw	r2,-12(fp)
   120d4:	1000051e 	bne	r2,zero,120ec <OSQDel+0x50>
        *perr = OS_ERR_PEVENT_NULL;
   120d8:	e0bfff17 	ldw	r2,-4(fp)
   120dc:	00c00104 	movi	r3,4
   120e0:	10c00005 	stb	r3,0(r2)
        return (pevent);
   120e4:	e0bffd17 	ldw	r2,-12(fp)
   120e8:	00009906 	br	12350 <OSQDel+0x2b4>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {          /* Validate event block type                */
   120ec:	e0bffd17 	ldw	r2,-12(fp)
   120f0:	10800003 	ldbu	r2,0(r2)
   120f4:	10803fcc 	andi	r2,r2,255
   120f8:	108000a0 	cmpeqi	r2,r2,2
   120fc:	1000051e 	bne	r2,zero,12114 <OSQDel+0x78>
        *perr = OS_ERR_EVENT_TYPE;
   12100:	e0bfff17 	ldw	r2,-4(fp)
   12104:	00c00044 	movi	r3,1
   12108:	10c00005 	stb	r3,0(r2)
        return (pevent);
   1210c:	e0bffd17 	ldw	r2,-12(fp)
   12110:	00008f06 	br	12350 <OSQDel+0x2b4>
    }
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
   12114:	008000b4 	movhi	r2,2
   12118:	10b69a04 	addi	r2,r2,-9624
   1211c:	10800003 	ldbu	r2,0(r2)
   12120:	10803fcc 	andi	r2,r2,255
   12124:	10000526 	beq	r2,zero,1213c <OSQDel+0xa0>
        *perr = OS_ERR_DEL_ISR;                            /* ... can't DELETE from an ISR             */
   12128:	e0bfff17 	ldw	r2,-4(fp)
   1212c:	00c003c4 	movi	r3,15
   12130:	10c00005 	stb	r3,0(r2)
        return (pevent);
   12134:	e0bffd17 	ldw	r2,-12(fp)
   12138:	00008506 	br	12350 <OSQDel+0x2b4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1213c:	0005303a 	rdctl	r2,status
   12140:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   12144:	e0fff817 	ldw	r3,-32(fp)
   12148:	00bfff84 	movi	r2,-2
   1214c:	1884703a 	and	r2,r3,r2
   12150:	1001703a 	wrctl	status,r2
  
  return context;
   12154:	e0bff817 	ldw	r2,-32(fp)
    }
    OS_ENTER_CRITICAL();
   12158:	e0bff615 	stw	r2,-40(fp)
    if (pevent->OSEventGrp != 0) {                         /* See if any tasks waiting on queue        */
   1215c:	e0bffd17 	ldw	r2,-12(fp)
   12160:	10800283 	ldbu	r2,10(r2)
   12164:	10803fcc 	andi	r2,r2,255
   12168:	10000326 	beq	r2,zero,12178 <OSQDel+0xdc>
        tasks_waiting = OS_TRUE;                           /* Yes                                      */
   1216c:	00800044 	movi	r2,1
   12170:	e0bff405 	stb	r2,-48(fp)
   12174:	00000106 	br	1217c <OSQDel+0xe0>
    } else {
        tasks_waiting = OS_FALSE;                          /* No                                       */
   12178:	e03ff405 	stb	zero,-48(fp)
    }
    switch (opt) {
   1217c:	e0bffe03 	ldbu	r2,-8(fp)
   12180:	10000326 	beq	r2,zero,12190 <OSQDel+0xf4>
   12184:	10800060 	cmpeqi	r2,r2,1
   12188:	1000381e 	bne	r2,zero,1226c <OSQDel+0x1d0>
   1218c:	00006506 	br	12324 <OSQDel+0x288>
        case OS_DEL_NO_PEND:                               /* Delete queue only if no task waiting     */
             if (tasks_waiting == OS_FALSE) {
   12190:	e0bff403 	ldbu	r2,-48(fp)
   12194:	1000261e 	bne	r2,zero,12230 <OSQDel+0x194>
#if OS_EVENT_NAME_SIZE > 1
                 pevent->OSEventName[0] = '?';             /* Unknown name                             */
   12198:	e0bffd17 	ldw	r2,-12(fp)
   1219c:	00c00fc4 	movi	r3,63
   121a0:	10c00385 	stb	r3,14(r2)
                 pevent->OSEventName[1] = OS_ASCII_NUL;
   121a4:	e0bffd17 	ldw	r2,-12(fp)
   121a8:	100003c5 	stb	zero,15(r2)
#endif
                 pq                     = (OS_Q *)pevent->OSEventPtr;  /* Return OS_Q to free list     */
   121ac:	e0bffd17 	ldw	r2,-12(fp)
   121b0:	10800117 	ldw	r2,4(r2)
   121b4:	e0bff715 	stw	r2,-36(fp)
                 pq->OSQPtr             = OSQFreeList;
   121b8:	008000b4 	movhi	r2,2
   121bc:	10b69704 	addi	r2,r2,-9636
   121c0:	10c00017 	ldw	r3,0(r2)
   121c4:	e0bff717 	ldw	r2,-36(fp)
   121c8:	10c00015 	stw	r3,0(r2)
                 OSQFreeList            = pq;
   121cc:	008000b4 	movhi	r2,2
   121d0:	10b69704 	addi	r2,r2,-9636
   121d4:	e0fff717 	ldw	r3,-36(fp)
   121d8:	10c00015 	stw	r3,0(r2)
                 pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
   121dc:	e0bffd17 	ldw	r2,-12(fp)
   121e0:	10000005 	stb	zero,0(r2)
                 pevent->OSEventPtr     = OSEventFreeList; /* Return Event Control Block to free list  */
   121e4:	008000b4 	movhi	r2,2
   121e8:	10b69904 	addi	r2,r2,-9628
   121ec:	10c00017 	ldw	r3,0(r2)
   121f0:	e0bffd17 	ldw	r2,-12(fp)
   121f4:	10c00115 	stw	r3,4(r2)
                 pevent->OSEventCnt     = 0;
   121f8:	e0bffd17 	ldw	r2,-12(fp)
   121fc:	1000020d 	sth	zero,8(r2)
                 OSEventFreeList        = pevent;          /* Get next free event control block        */
   12200:	008000b4 	movhi	r2,2
   12204:	10b69904 	addi	r2,r2,-9628
   12208:	e0fffd17 	ldw	r3,-12(fp)
   1220c:	10c00015 	stw	r3,0(r2)
   12210:	e0bff617 	ldw	r2,-40(fp)
   12214:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   12218:	e0bff917 	ldw	r2,-28(fp)
   1221c:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_NONE;
   12220:	e0bfff17 	ldw	r2,-4(fp)
   12224:	10000005 	stb	zero,0(r2)
                 pevent_return          = (OS_EVENT *)0;   /* Queue has been deleted                   */
   12228:	e03ff515 	stw	zero,-44(fp)
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_TASK_WAITING;
                 pevent_return          = pevent;
             }
             break;
   1222c:	00004706 	br	1234c <OSQDel+0x2b0>
   12230:	e0bff617 	ldw	r2,-40(fp)
   12234:	e0bffa15 	stw	r2,-24(fp)
   12238:	e0bffa17 	ldw	r2,-24(fp)
   1223c:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_NONE;
                 pevent_return          = (OS_EVENT *)0;   /* Queue has been deleted                   */
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_TASK_WAITING;
   12240:	e0bfff17 	ldw	r2,-4(fp)
   12244:	00c01244 	movi	r3,73
   12248:	10c00005 	stb	r3,0(r2)
                 pevent_return          = pevent;
   1224c:	e0bffd17 	ldw	r2,-12(fp)
   12250:	e0bff515 	stw	r2,-44(fp)
             }
             break;
   12254:	00003d06 	br	1234c <OSQDel+0x2b0>

        case OS_DEL_ALWAYS:                                /* Always delete the queue                  */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for queue        */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_OK);
   12258:	e13ffd17 	ldw	r4,-12(fp)
   1225c:	000b883a 	mov	r5,zero
   12260:	01800104 	movi	r6,4
   12264:	000f883a 	mov	r7,zero
   12268:	000eb440 	call	eb44 <OS_EventTaskRdy>
                 pevent_return          = pevent;
             }
             break;

        case OS_DEL_ALWAYS:                                /* Always delete the queue                  */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for queue        */
   1226c:	e0bffd17 	ldw	r2,-12(fp)
   12270:	10800283 	ldbu	r2,10(r2)
   12274:	10803fcc 	andi	r2,r2,255
   12278:	103ff71e 	bne	r2,zero,12258 <__alt_mem_Flash_flash_data+0xf4012258>
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_OK);
             }
#if OS_EVENT_NAME_SIZE > 1
             pevent->OSEventName[0] = '?';                 /* Unknown name                             */
   1227c:	e0bffd17 	ldw	r2,-12(fp)
   12280:	00c00fc4 	movi	r3,63
   12284:	10c00385 	stb	r3,14(r2)
             pevent->OSEventName[1] = OS_ASCII_NUL;
   12288:	e0bffd17 	ldw	r2,-12(fp)
   1228c:	100003c5 	stb	zero,15(r2)
#endif
             pq                     = (OS_Q *)pevent->OSEventPtr;   /* Return OS_Q to free list        */
   12290:	e0bffd17 	ldw	r2,-12(fp)
   12294:	10800117 	ldw	r2,4(r2)
   12298:	e0bff715 	stw	r2,-36(fp)
             pq->OSQPtr             = OSQFreeList;
   1229c:	008000b4 	movhi	r2,2
   122a0:	10b69704 	addi	r2,r2,-9636
   122a4:	10c00017 	ldw	r3,0(r2)
   122a8:	e0bff717 	ldw	r2,-36(fp)
   122ac:	10c00015 	stw	r3,0(r2)
             OSQFreeList            = pq;
   122b0:	008000b4 	movhi	r2,2
   122b4:	10b69704 	addi	r2,r2,-9636
   122b8:	e0fff717 	ldw	r3,-36(fp)
   122bc:	10c00015 	stw	r3,0(r2)
             pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
   122c0:	e0bffd17 	ldw	r2,-12(fp)
   122c4:	10000005 	stb	zero,0(r2)
             pevent->OSEventPtr     = OSEventFreeList;     /* Return Event Control Block to free list  */
   122c8:	008000b4 	movhi	r2,2
   122cc:	10b69904 	addi	r2,r2,-9628
   122d0:	10c00017 	ldw	r3,0(r2)
   122d4:	e0bffd17 	ldw	r2,-12(fp)
   122d8:	10c00115 	stw	r3,4(r2)
             pevent->OSEventCnt     = 0;
   122dc:	e0bffd17 	ldw	r2,-12(fp)
   122e0:	1000020d 	sth	zero,8(r2)
             OSEventFreeList        = pevent;              /* Get next free event control block        */
   122e4:	008000b4 	movhi	r2,2
   122e8:	10b69904 	addi	r2,r2,-9628
   122ec:	e0fffd17 	ldw	r3,-12(fp)
   122f0:	10c00015 	stw	r3,0(r2)
   122f4:	e0bff617 	ldw	r2,-40(fp)
   122f8:	e0bffb15 	stw	r2,-20(fp)
   122fc:	e0bffb17 	ldw	r2,-20(fp)
   12300:	1001703a 	wrctl	status,r2
             OS_EXIT_CRITICAL();
             if (tasks_waiting == OS_TRUE) {               /* Reschedule only if task(s) were waiting  */
   12304:	e0bff403 	ldbu	r2,-48(fp)
   12308:	10800058 	cmpnei	r2,r2,1
   1230c:	1000011e 	bne	r2,zero,12314 <OSQDel+0x278>
                 OS_Sched();                               /* Find highest priority task ready to run  */
   12310:	000f55c0 	call	f55c <OS_Sched>
             }
             *perr                  = OS_ERR_NONE;
   12314:	e0bfff17 	ldw	r2,-4(fp)
   12318:	10000005 	stb	zero,0(r2)
             pevent_return          = (OS_EVENT *)0;       /* Queue has been deleted                   */
   1231c:	e03ff515 	stw	zero,-44(fp)
             break;
   12320:	00000a06 	br	1234c <OSQDel+0x2b0>
   12324:	e0bff617 	ldw	r2,-40(fp)
   12328:	e0bffc15 	stw	r2,-16(fp)
   1232c:	e0bffc17 	ldw	r2,-16(fp)
   12330:	1001703a 	wrctl	status,r2

        default:
             OS_EXIT_CRITICAL();
             *perr                  = OS_ERR_INVALID_OPT;
   12334:	e0bfff17 	ldw	r2,-4(fp)
   12338:	00c001c4 	movi	r3,7
   1233c:	10c00005 	stb	r3,0(r2)
             pevent_return          = pevent;
   12340:	e0bffd17 	ldw	r2,-12(fp)
   12344:	e0bff515 	stw	r2,-44(fp)
             break;
   12348:	0001883a 	nop
    }
    return (pevent_return);
   1234c:	e0bff517 	ldw	r2,-44(fp)
}
   12350:	e037883a 	mov	sp,fp
   12354:	dfc00117 	ldw	ra,4(sp)
   12358:	df000017 	ldw	fp,0(sp)
   1235c:	dec00204 	addi	sp,sp,8
   12360:	f800283a 	ret

00012364 <OSQFlush>:
*********************************************************************************************************
*/

#if OS_Q_FLUSH_EN > 0
INT8U  OSQFlush (OS_EVENT *pevent)
{
   12364:	defffa04 	addi	sp,sp,-24
   12368:	df000515 	stw	fp,20(sp)
   1236c:	df000504 	addi	fp,sp,20
   12370:	e13fff15 	stw	r4,-4(fp)
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   12374:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
   12378:	e0bfff17 	ldw	r2,-4(fp)
   1237c:	1000021e 	bne	r2,zero,12388 <OSQFlush+0x24>
        return (OS_ERR_PEVENT_NULL);
   12380:	00800104 	movi	r2,4
   12384:	00002106 	br	1240c <OSQFlush+0xa8>
    }
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {     /* Validate event block type                     */
   12388:	e0bfff17 	ldw	r2,-4(fp)
   1238c:	10800003 	ldbu	r2,0(r2)
   12390:	10803fcc 	andi	r2,r2,255
   12394:	108000a0 	cmpeqi	r2,r2,2
   12398:	1000021e 	bne	r2,zero,123a4 <OSQFlush+0x40>
        return (OS_ERR_EVENT_TYPE);
   1239c:	00800044 	movi	r2,1
   123a0:	00001a06 	br	1240c <OSQFlush+0xa8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   123a4:	0005303a 	rdctl	r2,status
   123a8:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   123ac:	e0fffd17 	ldw	r3,-12(fp)
   123b0:	00bfff84 	movi	r2,-2
   123b4:	1884703a 	and	r2,r3,r2
   123b8:	1001703a 	wrctl	status,r2
  
  return context;
   123bc:	e0bffd17 	ldw	r2,-12(fp)
    }
#endif
    OS_ENTER_CRITICAL();
   123c0:	e0bffb15 	stw	r2,-20(fp)
    pq             = (OS_Q *)pevent->OSEventPtr;      /* Point to queue storage structure              */
   123c4:	e0bfff17 	ldw	r2,-4(fp)
   123c8:	10800117 	ldw	r2,4(r2)
   123cc:	e0bffc15 	stw	r2,-16(fp)
    pq->OSQIn      = pq->OSQStart;
   123d0:	e0bffc17 	ldw	r2,-16(fp)
   123d4:	10c00117 	ldw	r3,4(r2)
   123d8:	e0bffc17 	ldw	r2,-16(fp)
   123dc:	10c00315 	stw	r3,12(r2)
    pq->OSQOut     = pq->OSQStart;
   123e0:	e0bffc17 	ldw	r2,-16(fp)
   123e4:	10c00117 	ldw	r3,4(r2)
   123e8:	e0bffc17 	ldw	r2,-16(fp)
   123ec:	10c00415 	stw	r3,16(r2)
    pq->OSQEntries = 0;
   123f0:	e0bffc17 	ldw	r2,-16(fp)
   123f4:	1000058d 	sth	zero,22(r2)
   123f8:	e0bffb17 	ldw	r2,-20(fp)
   123fc:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   12400:	e0bffe17 	ldw	r2,-8(fp)
   12404:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
   12408:	0005883a 	mov	r2,zero
}
   1240c:	e037883a 	mov	sp,fp
   12410:	df000017 	ldw	fp,0(sp)
   12414:	dec00104 	addi	sp,sp,4
   12418:	f800283a 	ret

0001241c <OSQPend>:
* Note(s)    : As of V2.60, this function allows you to receive NULL pointer messages.
*********************************************************************************************************
*/

void  *OSQPend (OS_EVENT *pevent, INT16U timeout, INT8U *perr)
{
   1241c:	defff304 	addi	sp,sp,-52
   12420:	dfc00c15 	stw	ra,48(sp)
   12424:	df000b15 	stw	fp,44(sp)
   12428:	df000b04 	addi	fp,sp,44
   1242c:	e13ffd15 	stw	r4,-12(fp)
   12430:	2805883a 	mov	r2,r5
   12434:	e1bfff15 	stw	r6,-4(fp)
   12438:	e0bffe0d 	sth	r2,-8(fp)
    void      *pmsg;
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   1243c:	e03ff615 	stw	zero,-40(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
   12440:	e0bfff17 	ldw	r2,-4(fp)
   12444:	1000021e 	bne	r2,zero,12450 <OSQPend+0x34>
        return ((void *)0);
   12448:	0005883a 	mov	r2,zero
   1244c:	0000ad06 	br	12704 <OSQPend+0x2e8>
    }
    if (pevent == (OS_EVENT *)0) {               /* Validate 'pevent'                                  */
   12450:	e0bffd17 	ldw	r2,-12(fp)
   12454:	1000051e 	bne	r2,zero,1246c <OSQPend+0x50>
        *perr = OS_ERR_PEVENT_NULL;
   12458:	e0bfff17 	ldw	r2,-4(fp)
   1245c:	00c00104 	movi	r3,4
   12460:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
   12464:	0005883a 	mov	r2,zero
   12468:	0000a606 	br	12704 <OSQPend+0x2e8>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {/* Validate event block type                          */
   1246c:	e0bffd17 	ldw	r2,-12(fp)
   12470:	10800003 	ldbu	r2,0(r2)
   12474:	10803fcc 	andi	r2,r2,255
   12478:	108000a0 	cmpeqi	r2,r2,2
   1247c:	1000051e 	bne	r2,zero,12494 <OSQPend+0x78>
        *perr = OS_ERR_EVENT_TYPE;
   12480:	e0bfff17 	ldw	r2,-4(fp)
   12484:	00c00044 	movi	r3,1
   12488:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
   1248c:	0005883a 	mov	r2,zero
   12490:	00009c06 	br	12704 <OSQPend+0x2e8>
    }
    if (OSIntNesting > 0) {                      /* See if called from ISR ...                         */
   12494:	008000b4 	movhi	r2,2
   12498:	10b69a04 	addi	r2,r2,-9624
   1249c:	10800003 	ldbu	r2,0(r2)
   124a0:	10803fcc 	andi	r2,r2,255
   124a4:	10000526 	beq	r2,zero,124bc <OSQPend+0xa0>
        *perr = OS_ERR_PEND_ISR;                 /* ... can't PEND from an ISR                         */
   124a8:	e0bfff17 	ldw	r2,-4(fp)
   124ac:	00c00084 	movi	r3,2
   124b0:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
   124b4:	0005883a 	mov	r2,zero
   124b8:	00009206 	br	12704 <OSQPend+0x2e8>
    }
    if (OSLockNesting > 0) {                     /* See if called with scheduler locked ...            */
   124bc:	008000b4 	movhi	r2,2
   124c0:	10b68c04 	addi	r2,r2,-9680
   124c4:	10800003 	ldbu	r2,0(r2)
   124c8:	10803fcc 	andi	r2,r2,255
   124cc:	10000526 	beq	r2,zero,124e4 <OSQPend+0xc8>
        *perr = OS_ERR_PEND_LOCKED;              /* ... can't PEND when locked                         */
   124d0:	e0bfff17 	ldw	r2,-4(fp)
   124d4:	00c00344 	movi	r3,13
   124d8:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
   124dc:	0005883a 	mov	r2,zero
   124e0:	00008806 	br	12704 <OSQPend+0x2e8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   124e4:	0005303a 	rdctl	r2,status
   124e8:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   124ec:	e0fff817 	ldw	r3,-32(fp)
   124f0:	00bfff84 	movi	r2,-2
   124f4:	1884703a 	and	r2,r3,r2
   124f8:	1001703a 	wrctl	status,r2
  
  return context;
   124fc:	e0bff817 	ldw	r2,-32(fp)
    }
    OS_ENTER_CRITICAL();
   12500:	e0bff615 	stw	r2,-40(fp)
    pq = (OS_Q *)pevent->OSEventPtr;             /* Point at queue control block                       */
   12504:	e0bffd17 	ldw	r2,-12(fp)
   12508:	10800117 	ldw	r2,4(r2)
   1250c:	e0bff715 	stw	r2,-36(fp)
    if (pq->OSQEntries > 0) {                    /* See if any messages in the queue                   */
   12510:	e0bff717 	ldw	r2,-36(fp)
   12514:	1080058b 	ldhu	r2,22(r2)
   12518:	10bfffcc 	andi	r2,r2,65535
   1251c:	10001e26 	beq	r2,zero,12598 <OSQPend+0x17c>
        pmsg = *pq->OSQOut++;                    /* Yes, extract oldest message from the queue         */
   12520:	e0bff717 	ldw	r2,-36(fp)
   12524:	10800417 	ldw	r2,16(r2)
   12528:	11000104 	addi	r4,r2,4
   1252c:	e0fff717 	ldw	r3,-36(fp)
   12530:	19000415 	stw	r4,16(r3)
   12534:	10800017 	ldw	r2,0(r2)
   12538:	e0bff515 	stw	r2,-44(fp)
        pq->OSQEntries--;                        /* Update the number of entries in the queue          */
   1253c:	e0bff717 	ldw	r2,-36(fp)
   12540:	1080058b 	ldhu	r2,22(r2)
   12544:	10bfffc4 	addi	r2,r2,-1
   12548:	1007883a 	mov	r3,r2
   1254c:	e0bff717 	ldw	r2,-36(fp)
   12550:	10c0058d 	sth	r3,22(r2)
        if (pq->OSQOut == pq->OSQEnd) {          /* Wrap OUT pointer if we are at the end of the queue */
   12554:	e0bff717 	ldw	r2,-36(fp)
   12558:	10c00417 	ldw	r3,16(r2)
   1255c:	e0bff717 	ldw	r2,-36(fp)
   12560:	10800217 	ldw	r2,8(r2)
   12564:	1880041e 	bne	r3,r2,12578 <OSQPend+0x15c>
            pq->OSQOut = pq->OSQStart;
   12568:	e0bff717 	ldw	r2,-36(fp)
   1256c:	10c00117 	ldw	r3,4(r2)
   12570:	e0bff717 	ldw	r2,-36(fp)
   12574:	10c00415 	stw	r3,16(r2)
   12578:	e0bff617 	ldw	r2,-40(fp)
   1257c:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   12580:	e0bff917 	ldw	r2,-28(fp)
   12584:	1001703a 	wrctl	status,r2
        }
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_NONE;
   12588:	e0bfff17 	ldw	r2,-4(fp)
   1258c:	10000005 	stb	zero,0(r2)
        return (pmsg);                           /* Return message received                            */
   12590:	e0bff517 	ldw	r2,-44(fp)
   12594:	00005b06 	br	12704 <OSQPend+0x2e8>
    }
    OSTCBCur->OSTCBStat     |= OS_STAT_Q;        /* Task will have to pend for a message to be posted  */
   12598:	008000b4 	movhi	r2,2
   1259c:	10b69b04 	addi	r2,r2,-9620
   125a0:	10c00017 	ldw	r3,0(r2)
   125a4:	008000b4 	movhi	r2,2
   125a8:	10b69b04 	addi	r2,r2,-9620
   125ac:	10800017 	ldw	r2,0(r2)
   125b0:	10800c03 	ldbu	r2,48(r2)
   125b4:	10800114 	ori	r2,r2,4
   125b8:	18800c05 	stb	r2,48(r3)
    OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
   125bc:	008000b4 	movhi	r2,2
   125c0:	10b69b04 	addi	r2,r2,-9620
   125c4:	10800017 	ldw	r2,0(r2)
   125c8:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBDly       = timeout;          /* Load timeout into TCB                              */
   125cc:	008000b4 	movhi	r2,2
   125d0:	10b69b04 	addi	r2,r2,-9620
   125d4:	10800017 	ldw	r2,0(r2)
   125d8:	e0fffe0b 	ldhu	r3,-8(fp)
   125dc:	10c00b8d 	sth	r3,46(r2)
    OS_EventTaskWait(pevent);                    /* Suspend task until event or timeout occurs         */
   125e0:	e13ffd17 	ldw	r4,-12(fp)
   125e4:	000ecdc0 	call	ecdc <OS_EventTaskWait>
   125e8:	e0bff617 	ldw	r2,-40(fp)
   125ec:	e0bffa15 	stw	r2,-24(fp)
   125f0:	e0bffa17 	ldw	r2,-24(fp)
   125f4:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    OS_Sched();                                  /* Find next highest priority task ready to run       */
   125f8:	000f55c0 	call	f55c <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   125fc:	0005303a 	rdctl	r2,status
   12600:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   12604:	e0fffb17 	ldw	r3,-20(fp)
   12608:	00bfff84 	movi	r2,-2
   1260c:	1884703a 	and	r2,r3,r2
   12610:	1001703a 	wrctl	status,r2
  
  return context;
   12614:	e0bffb17 	ldw	r2,-20(fp)
    OS_ENTER_CRITICAL();
   12618:	e0bff615 	stw	r2,-40(fp)
    switch (OSTCBCur->OSTCBStatPend) {                /* See if we timed-out or aborted                */
   1261c:	008000b4 	movhi	r2,2
   12620:	10b69b04 	addi	r2,r2,-9620
   12624:	10800017 	ldw	r2,0(r2)
   12628:	10800c43 	ldbu	r2,49(r2)
   1262c:	10803fcc 	andi	r2,r2,255
   12630:	10000326 	beq	r2,zero,12640 <OSQPend+0x224>
   12634:	108000a0 	cmpeqi	r2,r2,2
   12638:	1000091e 	bne	r2,zero,12660 <OSQPend+0x244>
   1263c:	00000d06 	br	12674 <OSQPend+0x258>
        case OS_STAT_PEND_OK:                         /* Extract message from TCB (Put there by QPost) */
             pmsg =  OSTCBCur->OSTCBMsg;
   12640:	008000b4 	movhi	r2,2
   12644:	10b69b04 	addi	r2,r2,-9620
   12648:	10800017 	ldw	r2,0(r2)
   1264c:	10800917 	ldw	r2,36(r2)
   12650:	e0bff515 	stw	r2,-44(fp)
            *perr =  OS_ERR_NONE;
   12654:	e0bfff17 	ldw	r2,-4(fp)
   12658:	10000005 	stb	zero,0(r2)
             break;
   1265c:	00001006 	br	126a0 <OSQPend+0x284>

        case OS_STAT_PEND_ABORT:
             pmsg = (void *)0;
   12660:	e03ff515 	stw	zero,-44(fp)
            *perr =  OS_ERR_PEND_ABORT;               /* Indicate that we aborted                      */
   12664:	e0bfff17 	ldw	r2,-4(fp)
   12668:	00c00384 	movi	r3,14
   1266c:	10c00005 	stb	r3,0(r2)
             break;
   12670:	00000b06 	br	126a0 <OSQPend+0x284>

        case OS_STAT_PEND_TO:
        default:
             OS_EventTaskRemove(OSTCBCur, pevent);
   12674:	008000b4 	movhi	r2,2
   12678:	10b69b04 	addi	r2,r2,-9620
   1267c:	10800017 	ldw	r2,0(r2)
   12680:	1009883a 	mov	r4,r2
   12684:	e17ffd17 	ldw	r5,-12(fp)
   12688:	000ef340 	call	ef34 <OS_EventTaskRemove>
             pmsg = (void *)0;
   1268c:	e03ff515 	stw	zero,-44(fp)
            *perr =  OS_ERR_TIMEOUT;                  /* Indicate that we didn't get event within TO   */
   12690:	e0bfff17 	ldw	r2,-4(fp)
   12694:	00c00284 	movi	r3,10
   12698:	10c00005 	stb	r3,0(r2)
             break;
   1269c:	0001883a 	nop
    }
    OSTCBCur->OSTCBStat          =  OS_STAT_RDY;      /* Set   task  status to ready                   */
   126a0:	008000b4 	movhi	r2,2
   126a4:	10b69b04 	addi	r2,r2,-9620
   126a8:	10800017 	ldw	r2,0(r2)
   126ac:	10000c05 	stb	zero,48(r2)
    OSTCBCur->OSTCBStatPend      =  OS_STAT_PEND_OK;  /* Clear pend  status                            */
   126b0:	008000b4 	movhi	r2,2
   126b4:	10b69b04 	addi	r2,r2,-9620
   126b8:	10800017 	ldw	r2,0(r2)
   126bc:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;    /* Clear event pointers                          */
   126c0:	008000b4 	movhi	r2,2
   126c4:	10b69b04 	addi	r2,r2,-9620
   126c8:	10800017 	ldw	r2,0(r2)
   126cc:	10000715 	stw	zero,28(r2)
#if (OS_EVENT_MULTI_EN > 0)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
   126d0:	008000b4 	movhi	r2,2
   126d4:	10b69b04 	addi	r2,r2,-9620
   126d8:	10800017 	ldw	r2,0(r2)
   126dc:	10000815 	stw	zero,32(r2)
#endif
    OSTCBCur->OSTCBMsg           = (void      *)0;    /* Clear  received message                       */
   126e0:	008000b4 	movhi	r2,2
   126e4:	10b69b04 	addi	r2,r2,-9620
   126e8:	10800017 	ldw	r2,0(r2)
   126ec:	10000915 	stw	zero,36(r2)
   126f0:	e0bff617 	ldw	r2,-40(fp)
   126f4:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   126f8:	e0bffc17 	ldw	r2,-16(fp)
   126fc:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (pmsg);                                    /* Return received message                       */
   12700:	e0bff517 	ldw	r2,-44(fp)
}
   12704:	e037883a 	mov	sp,fp
   12708:	dfc00117 	ldw	ra,4(sp)
   1270c:	df000017 	ldw	fp,0(sp)
   12710:	dec00204 	addi	sp,sp,8
   12714:	f800283a 	ret

00012718 <OSQPendAbort>:
*********************************************************************************************************
*/

#if OS_Q_PEND_ABORT_EN > 0
INT8U  OSQPendAbort (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
   12718:	defff604 	addi	sp,sp,-40
   1271c:	dfc00915 	stw	ra,36(sp)
   12720:	df000815 	stw	fp,32(sp)
   12724:	df000804 	addi	fp,sp,32
   12728:	e13ffd15 	stw	r4,-12(fp)
   1272c:	2805883a 	mov	r2,r5
   12730:	e1bfff15 	stw	r6,-4(fp)
   12734:	e0bffe05 	stb	r2,-8(fp)
    INT8U      nbr_tasks;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
   12738:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
   1273c:	e0bfff17 	ldw	r2,-4(fp)
   12740:	1000021e 	bne	r2,zero,1274c <OSQPendAbort+0x34>
        return (0);
   12744:	0005883a 	mov	r2,zero
   12748:	00004906 	br	12870 <OSQPendAbort+0x158>
    }
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
   1274c:	e0bffd17 	ldw	r2,-12(fp)
   12750:	1000051e 	bne	r2,zero,12768 <OSQPendAbort+0x50>
        *perr = OS_ERR_PEVENT_NULL;
   12754:	e0bfff17 	ldw	r2,-4(fp)
   12758:	00c00104 	movi	r3,4
   1275c:	10c00005 	stb	r3,0(r2)
        return (0);
   12760:	0005883a 	mov	r2,zero
   12764:	00004206 	br	12870 <OSQPendAbort+0x158>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {          /* Validate event block type                */
   12768:	e0bffd17 	ldw	r2,-12(fp)
   1276c:	10800003 	ldbu	r2,0(r2)
   12770:	10803fcc 	andi	r2,r2,255
   12774:	108000a0 	cmpeqi	r2,r2,2
   12778:	1000051e 	bne	r2,zero,12790 <OSQPendAbort+0x78>
        *perr = OS_ERR_EVENT_TYPE;
   1277c:	e0bfff17 	ldw	r2,-4(fp)
   12780:	00c00044 	movi	r3,1
   12784:	10c00005 	stb	r3,0(r2)
        return (0);
   12788:	0005883a 	mov	r2,zero
   1278c:	00003806 	br	12870 <OSQPendAbort+0x158>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   12790:	0005303a 	rdctl	r2,status
   12794:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   12798:	e0fffa17 	ldw	r3,-24(fp)
   1279c:	00bfff84 	movi	r2,-2
   127a0:	1884703a 	and	r2,r3,r2
   127a4:	1001703a 	wrctl	status,r2
  
  return context;
   127a8:	e0bffa17 	ldw	r2,-24(fp)
    }
    OS_ENTER_CRITICAL();
   127ac:	e0bff915 	stw	r2,-28(fp)
    if (pevent->OSEventGrp != 0) {                         /* See if any task waiting on queue?        */
   127b0:	e0bffd17 	ldw	r2,-12(fp)
   127b4:	10800283 	ldbu	r2,10(r2)
   127b8:	10803fcc 	andi	r2,r2,255
   127bc:	10002526 	beq	r2,zero,12854 <OSQPendAbort+0x13c>
        nbr_tasks = 0;
   127c0:	e03ff805 	stb	zero,-32(fp)
        switch (opt) {
   127c4:	e0bffe03 	ldbu	r2,-8(fp)
   127c8:	10800060 	cmpeqi	r2,r2,1
   127cc:	10000e26 	beq	r2,zero,12808 <OSQPendAbort+0xf0>
            case OS_PEND_OPT_BROADCAST:                    /* Do we need to abort ALL waiting tasks?   */
                 while (pevent->OSEventGrp != 0) {         /* Yes, ready ALL tasks waiting on queue    */
   127d0:	00000806 	br	127f4 <OSQPendAbort+0xdc>
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_ABORT);
   127d4:	e13ffd17 	ldw	r4,-12(fp)
   127d8:	000b883a 	mov	r5,zero
   127dc:	01800104 	movi	r6,4
   127e0:	01c00084 	movi	r7,2
   127e4:	000eb440 	call	eb44 <OS_EventTaskRdy>
                     nbr_tasks++;
   127e8:	e0bff803 	ldbu	r2,-32(fp)
   127ec:	10800044 	addi	r2,r2,1
   127f0:	e0bff805 	stb	r2,-32(fp)
    OS_ENTER_CRITICAL();
    if (pevent->OSEventGrp != 0) {                         /* See if any task waiting on queue?        */
        nbr_tasks = 0;
        switch (opt) {
            case OS_PEND_OPT_BROADCAST:                    /* Do we need to abort ALL waiting tasks?   */
                 while (pevent->OSEventGrp != 0) {         /* Yes, ready ALL tasks waiting on queue    */
   127f4:	e0bffd17 	ldw	r2,-12(fp)
   127f8:	10800283 	ldbu	r2,10(r2)
   127fc:	10803fcc 	andi	r2,r2,255
   12800:	103ff41e 	bne	r2,zero,127d4 <__alt_mem_Flash_flash_data+0xf40127d4>
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_ABORT);
                     nbr_tasks++;
                 }
                 break;
   12804:	00000906 	br	1282c <OSQPendAbort+0x114>
               
            case OS_PEND_OPT_NONE:
            default:                                       /* No,  ready HPT       waiting on queue    */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_ABORT);
   12808:	e13ffd17 	ldw	r4,-12(fp)
   1280c:	000b883a 	mov	r5,zero
   12810:	01800104 	movi	r6,4
   12814:	01c00084 	movi	r7,2
   12818:	000eb440 	call	eb44 <OS_EventTaskRdy>
                 nbr_tasks++;
   1281c:	e0bff803 	ldbu	r2,-32(fp)
   12820:	10800044 	addi	r2,r2,1
   12824:	e0bff805 	stb	r2,-32(fp)
                 break;
   12828:	0001883a 	nop
   1282c:	e0bff917 	ldw	r2,-28(fp)
   12830:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   12834:	e0bffb17 	ldw	r2,-20(fp)
   12838:	1001703a 	wrctl	status,r2
        }
        OS_EXIT_CRITICAL();
        OS_Sched();                                        /* Find HPT ready to run                    */
   1283c:	000f55c0 	call	f55c <OS_Sched>
        *perr = OS_ERR_PEND_ABORT;
   12840:	e0bfff17 	ldw	r2,-4(fp)
   12844:	00c00384 	movi	r3,14
   12848:	10c00005 	stb	r3,0(r2)
        return (nbr_tasks);
   1284c:	e0bff803 	ldbu	r2,-32(fp)
   12850:	00000706 	br	12870 <OSQPendAbort+0x158>
   12854:	e0bff917 	ldw	r2,-28(fp)
   12858:	e0bffc15 	stw	r2,-16(fp)
   1285c:	e0bffc17 	ldw	r2,-16(fp)
   12860:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
   12864:	e0bfff17 	ldw	r2,-4(fp)
   12868:	10000005 	stb	zero,0(r2)
    return (0);                                            /* No tasks waiting on queue                */
   1286c:	0005883a 	mov	r2,zero
}
   12870:	e037883a 	mov	sp,fp
   12874:	dfc00117 	ldw	ra,4(sp)
   12878:	df000017 	ldw	fp,0(sp)
   1287c:	dec00204 	addi	sp,sp,8
   12880:	f800283a 	ret

00012884 <OSQPost>:
*********************************************************************************************************
*/

#if OS_Q_POST_EN > 0
INT8U  OSQPost (OS_EVENT *pevent, void *pmsg)
{
   12884:	defff604 	addi	sp,sp,-40
   12888:	dfc00915 	stw	ra,36(sp)
   1288c:	df000815 	stw	fp,32(sp)
   12890:	df000804 	addi	fp,sp,32
   12894:	e13ffe15 	stw	r4,-8(fp)
   12898:	e17fff15 	stw	r5,-4(fp)
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                            /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
   1289c:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                     /* Validate 'pevent'                            */
   128a0:	e0bffe17 	ldw	r2,-8(fp)
   128a4:	1000021e 	bne	r2,zero,128b0 <OSQPost+0x2c>
        return (OS_ERR_PEVENT_NULL);
   128a8:	00800104 	movi	r2,4
   128ac:	00004a06 	br	129d8 <OSQPost+0x154>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {      /* Validate event block type                    */
   128b0:	e0bffe17 	ldw	r2,-8(fp)
   128b4:	10800003 	ldbu	r2,0(r2)
   128b8:	10803fcc 	andi	r2,r2,255
   128bc:	108000a0 	cmpeqi	r2,r2,2
   128c0:	1000021e 	bne	r2,zero,128cc <OSQPost+0x48>
        return (OS_ERR_EVENT_TYPE);
   128c4:	00800044 	movi	r2,1
   128c8:	00004306 	br	129d8 <OSQPost+0x154>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   128cc:	0005303a 	rdctl	r2,status
   128d0:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   128d4:	e0fffa17 	ldw	r3,-24(fp)
   128d8:	00bfff84 	movi	r2,-2
   128dc:	1884703a 	and	r2,r3,r2
   128e0:	1001703a 	wrctl	status,r2
  
  return context;
   128e4:	e0bffa17 	ldw	r2,-24(fp)
    }
    OS_ENTER_CRITICAL();
   128e8:	e0bff815 	stw	r2,-32(fp)
    if (pevent->OSEventGrp != 0) {                     /* See if any task pending on queue             */
   128ec:	e0bffe17 	ldw	r2,-8(fp)
   128f0:	10800283 	ldbu	r2,10(r2)
   128f4:	10803fcc 	andi	r2,r2,255
   128f8:	10000c26 	beq	r2,zero,1292c <OSQPost+0xa8>
                                                       /* Ready highest priority task waiting on event */
        (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
   128fc:	e13ffe17 	ldw	r4,-8(fp)
   12900:	e17fff17 	ldw	r5,-4(fp)
   12904:	01800104 	movi	r6,4
   12908:	000f883a 	mov	r7,zero
   1290c:	000eb440 	call	eb44 <OS_EventTaskRdy>
   12910:	e0bff817 	ldw	r2,-32(fp)
   12914:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   12918:	e0bffb17 	ldw	r2,-20(fp)
   1291c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                                    /* Find highest priority task ready to run      */
   12920:	000f55c0 	call	f55c <OS_Sched>
        return (OS_ERR_NONE);
   12924:	0005883a 	mov	r2,zero
   12928:	00002b06 	br	129d8 <OSQPost+0x154>
    }
    pq = (OS_Q *)pevent->OSEventPtr;                   /* Point to queue control block                 */
   1292c:	e0bffe17 	ldw	r2,-8(fp)
   12930:	10800117 	ldw	r2,4(r2)
   12934:	e0bff915 	stw	r2,-28(fp)
    if (pq->OSQEntries >= pq->OSQSize) {               /* Make sure queue is not full                  */
   12938:	e0bff917 	ldw	r2,-28(fp)
   1293c:	10c0058b 	ldhu	r3,22(r2)
   12940:	e0bff917 	ldw	r2,-28(fp)
   12944:	1080050b 	ldhu	r2,20(r2)
   12948:	18ffffcc 	andi	r3,r3,65535
   1294c:	10bfffcc 	andi	r2,r2,65535
   12950:	18800636 	bltu	r3,r2,1296c <OSQPost+0xe8>
   12954:	e0bff817 	ldw	r2,-32(fp)
   12958:	e0bffc15 	stw	r2,-16(fp)
   1295c:	e0bffc17 	ldw	r2,-16(fp)
   12960:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_Q_FULL);
   12964:	00800784 	movi	r2,30
   12968:	00001b06 	br	129d8 <OSQPost+0x154>
    }
    *pq->OSQIn++ = pmsg;                               /* Insert message into queue                    */
   1296c:	e0bff917 	ldw	r2,-28(fp)
   12970:	10800317 	ldw	r2,12(r2)
   12974:	11000104 	addi	r4,r2,4
   12978:	e0fff917 	ldw	r3,-28(fp)
   1297c:	19000315 	stw	r4,12(r3)
   12980:	e0ffff17 	ldw	r3,-4(fp)
   12984:	10c00015 	stw	r3,0(r2)
    pq->OSQEntries++;                                  /* Update the nbr of entries in the queue       */
   12988:	e0bff917 	ldw	r2,-28(fp)
   1298c:	1080058b 	ldhu	r2,22(r2)
   12990:	10800044 	addi	r2,r2,1
   12994:	1007883a 	mov	r3,r2
   12998:	e0bff917 	ldw	r2,-28(fp)
   1299c:	10c0058d 	sth	r3,22(r2)
    if (pq->OSQIn == pq->OSQEnd) {                     /* Wrap IN ptr if we are at end of queue        */
   129a0:	e0bff917 	ldw	r2,-28(fp)
   129a4:	10c00317 	ldw	r3,12(r2)
   129a8:	e0bff917 	ldw	r2,-28(fp)
   129ac:	10800217 	ldw	r2,8(r2)
   129b0:	1880041e 	bne	r3,r2,129c4 <OSQPost+0x140>
        pq->OSQIn = pq->OSQStart;
   129b4:	e0bff917 	ldw	r2,-28(fp)
   129b8:	10c00117 	ldw	r3,4(r2)
   129bc:	e0bff917 	ldw	r2,-28(fp)
   129c0:	10c00315 	stw	r3,12(r2)
   129c4:	e0bff817 	ldw	r2,-32(fp)
   129c8:	e0bffd15 	stw	r2,-12(fp)
   129cc:	e0bffd17 	ldw	r2,-12(fp)
   129d0:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
   129d4:	0005883a 	mov	r2,zero
}
   129d8:	e037883a 	mov	sp,fp
   129dc:	dfc00117 	ldw	ra,4(sp)
   129e0:	df000017 	ldw	fp,0(sp)
   129e4:	dec00204 	addi	sp,sp,8
   129e8:	f800283a 	ret

000129ec <OSQPostFront>:
*********************************************************************************************************
*/

#if OS_Q_POST_FRONT_EN > 0
INT8U  OSQPostFront (OS_EVENT *pevent, void *pmsg)
{
   129ec:	defff604 	addi	sp,sp,-40
   129f0:	dfc00915 	stw	ra,36(sp)
   129f4:	df000815 	stw	fp,32(sp)
   129f8:	df000804 	addi	fp,sp,32
   129fc:	e13ffe15 	stw	r4,-8(fp)
   12a00:	e17fff15 	stw	r5,-4(fp)
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   12a04:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
   12a08:	e0bffe17 	ldw	r2,-8(fp)
   12a0c:	1000021e 	bne	r2,zero,12a18 <OSQPostFront+0x2c>
        return (OS_ERR_PEVENT_NULL);
   12a10:	00800104 	movi	r2,4
   12a14:	00004c06 	br	12b48 <OSQPostFront+0x15c>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {     /* Validate event block type                     */
   12a18:	e0bffe17 	ldw	r2,-8(fp)
   12a1c:	10800003 	ldbu	r2,0(r2)
   12a20:	10803fcc 	andi	r2,r2,255
   12a24:	108000a0 	cmpeqi	r2,r2,2
   12a28:	1000021e 	bne	r2,zero,12a34 <OSQPostFront+0x48>
        return (OS_ERR_EVENT_TYPE);
   12a2c:	00800044 	movi	r2,1
   12a30:	00004506 	br	12b48 <OSQPostFront+0x15c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   12a34:	0005303a 	rdctl	r2,status
   12a38:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   12a3c:	e0fffa17 	ldw	r3,-24(fp)
   12a40:	00bfff84 	movi	r2,-2
   12a44:	1884703a 	and	r2,r3,r2
   12a48:	1001703a 	wrctl	status,r2
  
  return context;
   12a4c:	e0bffa17 	ldw	r2,-24(fp)
    }
    OS_ENTER_CRITICAL();
   12a50:	e0bff815 	stw	r2,-32(fp)
    if (pevent->OSEventGrp != 0) {                    /* See if any task pending on queue              */
   12a54:	e0bffe17 	ldw	r2,-8(fp)
   12a58:	10800283 	ldbu	r2,10(r2)
   12a5c:	10803fcc 	andi	r2,r2,255
   12a60:	10000c26 	beq	r2,zero,12a94 <OSQPostFront+0xa8>
                                                      /* Ready highest priority task waiting on event  */
        (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
   12a64:	e13ffe17 	ldw	r4,-8(fp)
   12a68:	e17fff17 	ldw	r5,-4(fp)
   12a6c:	01800104 	movi	r6,4
   12a70:	000f883a 	mov	r7,zero
   12a74:	000eb440 	call	eb44 <OS_EventTaskRdy>
   12a78:	e0bff817 	ldw	r2,-32(fp)
   12a7c:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   12a80:	e0bffb17 	ldw	r2,-20(fp)
   12a84:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                                   /* Find highest priority task ready to run       */
   12a88:	000f55c0 	call	f55c <OS_Sched>
        return (OS_ERR_NONE);
   12a8c:	0005883a 	mov	r2,zero
   12a90:	00002d06 	br	12b48 <OSQPostFront+0x15c>
    }
    pq = (OS_Q *)pevent->OSEventPtr;                  /* Point to queue control block                  */
   12a94:	e0bffe17 	ldw	r2,-8(fp)
   12a98:	10800117 	ldw	r2,4(r2)
   12a9c:	e0bff915 	stw	r2,-28(fp)
    if (pq->OSQEntries >= pq->OSQSize) {              /* Make sure queue is not full                   */
   12aa0:	e0bff917 	ldw	r2,-28(fp)
   12aa4:	10c0058b 	ldhu	r3,22(r2)
   12aa8:	e0bff917 	ldw	r2,-28(fp)
   12aac:	1080050b 	ldhu	r2,20(r2)
   12ab0:	18ffffcc 	andi	r3,r3,65535
   12ab4:	10bfffcc 	andi	r2,r2,65535
   12ab8:	18800636 	bltu	r3,r2,12ad4 <OSQPostFront+0xe8>
   12abc:	e0bff817 	ldw	r2,-32(fp)
   12ac0:	e0bffc15 	stw	r2,-16(fp)
   12ac4:	e0bffc17 	ldw	r2,-16(fp)
   12ac8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_Q_FULL);
   12acc:	00800784 	movi	r2,30
   12ad0:	00001d06 	br	12b48 <OSQPostFront+0x15c>
    }
    if (pq->OSQOut == pq->OSQStart) {                 /* Wrap OUT ptr if we are at the 1st queue entry */
   12ad4:	e0bff917 	ldw	r2,-28(fp)
   12ad8:	10c00417 	ldw	r3,16(r2)
   12adc:	e0bff917 	ldw	r2,-28(fp)
   12ae0:	10800117 	ldw	r2,4(r2)
   12ae4:	1880041e 	bne	r3,r2,12af8 <OSQPostFront+0x10c>
        pq->OSQOut = pq->OSQEnd;
   12ae8:	e0bff917 	ldw	r2,-28(fp)
   12aec:	10c00217 	ldw	r3,8(r2)
   12af0:	e0bff917 	ldw	r2,-28(fp)
   12af4:	10c00415 	stw	r3,16(r2)
    }
    pq->OSQOut--;
   12af8:	e0bff917 	ldw	r2,-28(fp)
   12afc:	10800417 	ldw	r2,16(r2)
   12b00:	10ffff04 	addi	r3,r2,-4
   12b04:	e0bff917 	ldw	r2,-28(fp)
   12b08:	10c00415 	stw	r3,16(r2)
    *pq->OSQOut = pmsg;                               /* Insert message into queue                     */
   12b0c:	e0bff917 	ldw	r2,-28(fp)
   12b10:	10800417 	ldw	r2,16(r2)
   12b14:	e0ffff17 	ldw	r3,-4(fp)
   12b18:	10c00015 	stw	r3,0(r2)
    pq->OSQEntries++;                                 /* Update the nbr of entries in the queue        */
   12b1c:	e0bff917 	ldw	r2,-28(fp)
   12b20:	1080058b 	ldhu	r2,22(r2)
   12b24:	10800044 	addi	r2,r2,1
   12b28:	1007883a 	mov	r3,r2
   12b2c:	e0bff917 	ldw	r2,-28(fp)
   12b30:	10c0058d 	sth	r3,22(r2)
   12b34:	e0bff817 	ldw	r2,-32(fp)
   12b38:	e0bffd15 	stw	r2,-12(fp)
   12b3c:	e0bffd17 	ldw	r2,-12(fp)
   12b40:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
   12b44:	0005883a 	mov	r2,zero
}
   12b48:	e037883a 	mov	sp,fp
   12b4c:	dfc00117 	ldw	ra,4(sp)
   12b50:	df000017 	ldw	fp,0(sp)
   12b54:	dec00204 	addi	sp,sp,8
   12b58:	f800283a 	ret

00012b5c <OSQPostOpt>:
*********************************************************************************************************
*/

#if OS_Q_POST_OPT_EN > 0
INT8U  OSQPostOpt (OS_EVENT *pevent, void *pmsg, INT8U opt)
{
   12b5c:	defff504 	addi	sp,sp,-44
   12b60:	dfc00a15 	stw	ra,40(sp)
   12b64:	df000915 	stw	fp,36(sp)
   12b68:	df000904 	addi	fp,sp,36
   12b6c:	e13ffd15 	stw	r4,-12(fp)
   12b70:	e17ffe15 	stw	r5,-8(fp)
   12b74:	3005883a 	mov	r2,r6
   12b78:	e0bfff05 	stb	r2,-4(fp)
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   12b7c:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
   12b80:	e0bffd17 	ldw	r2,-12(fp)
   12b84:	1000021e 	bne	r2,zero,12b90 <OSQPostOpt+0x34>
        return (OS_ERR_PEVENT_NULL);
   12b88:	00800104 	movi	r2,4
   12b8c:	00007106 	br	12d54 <OSQPostOpt+0x1f8>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {     /* Validate event block type                     */
   12b90:	e0bffd17 	ldw	r2,-12(fp)
   12b94:	10800003 	ldbu	r2,0(r2)
   12b98:	10803fcc 	andi	r2,r2,255
   12b9c:	108000a0 	cmpeqi	r2,r2,2
   12ba0:	1000021e 	bne	r2,zero,12bac <OSQPostOpt+0x50>
        return (OS_ERR_EVENT_TYPE);
   12ba4:	00800044 	movi	r2,1
   12ba8:	00006a06 	br	12d54 <OSQPostOpt+0x1f8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   12bac:	0005303a 	rdctl	r2,status
   12bb0:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   12bb4:	e0fff917 	ldw	r3,-28(fp)
   12bb8:	00bfff84 	movi	r2,-2
   12bbc:	1884703a 	and	r2,r3,r2
   12bc0:	1001703a 	wrctl	status,r2
  
  return context;
   12bc4:	e0bff917 	ldw	r2,-28(fp)
    }
    OS_ENTER_CRITICAL();
   12bc8:	e0bff715 	stw	r2,-36(fp)
    if (pevent->OSEventGrp != 0x00) {                 /* See if any task pending on queue              */
   12bcc:	e0bffd17 	ldw	r2,-12(fp)
   12bd0:	10800283 	ldbu	r2,10(r2)
   12bd4:	10803fcc 	andi	r2,r2,255
   12bd8:	10001d26 	beq	r2,zero,12c50 <OSQPostOpt+0xf4>
        if ((opt & OS_POST_OPT_BROADCAST) != 0x00) {  /* Do we need to post msg to ALL waiting tasks ? */
   12bdc:	e0bfff03 	ldbu	r2,-4(fp)
   12be0:	1080004c 	andi	r2,r2,1
   12be4:	10000b26 	beq	r2,zero,12c14 <OSQPostOpt+0xb8>
            while (pevent->OSEventGrp != 0) {         /* Yes, Post to ALL tasks waiting on queue       */
   12be8:	00000506 	br	12c00 <OSQPostOpt+0xa4>
                (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
   12bec:	e13ffd17 	ldw	r4,-12(fp)
   12bf0:	e17ffe17 	ldw	r5,-8(fp)
   12bf4:	01800104 	movi	r6,4
   12bf8:	000f883a 	mov	r7,zero
   12bfc:	000eb440 	call	eb44 <OS_EventTaskRdy>
        return (OS_ERR_EVENT_TYPE);
    }
    OS_ENTER_CRITICAL();
    if (pevent->OSEventGrp != 0x00) {                 /* See if any task pending on queue              */
        if ((opt & OS_POST_OPT_BROADCAST) != 0x00) {  /* Do we need to post msg to ALL waiting tasks ? */
            while (pevent->OSEventGrp != 0) {         /* Yes, Post to ALL tasks waiting on queue       */
   12c00:	e0bffd17 	ldw	r2,-12(fp)
   12c04:	10800283 	ldbu	r2,10(r2)
   12c08:	10803fcc 	andi	r2,r2,255
   12c0c:	103ff71e 	bne	r2,zero,12bec <__alt_mem_Flash_flash_data+0xf4012bec>
   12c10:	00000506 	br	12c28 <OSQPostOpt+0xcc>
                (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
            }
        } else {                                      /* No,  Post to HPT waiting on queue             */
            (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
   12c14:	e13ffd17 	ldw	r4,-12(fp)
   12c18:	e17ffe17 	ldw	r5,-8(fp)
   12c1c:	01800104 	movi	r6,4
   12c20:	000f883a 	mov	r7,zero
   12c24:	000eb440 	call	eb44 <OS_EventTaskRdy>
   12c28:	e0bff717 	ldw	r2,-36(fp)
   12c2c:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   12c30:	e0bffa17 	ldw	r2,-24(fp)
   12c34:	1001703a 	wrctl	status,r2
        }
        OS_EXIT_CRITICAL();
        if ((opt & OS_POST_OPT_NO_SCHED) == 0) {	  /* See if scheduler needs to be invoked          */
   12c38:	e0bfff03 	ldbu	r2,-4(fp)
   12c3c:	1080010c 	andi	r2,r2,4
   12c40:	1000011e 	bne	r2,zero,12c48 <OSQPostOpt+0xec>
            OS_Sched();                               /* Find highest priority task ready to run       */
   12c44:	000f55c0 	call	f55c <OS_Sched>
        }
        return (OS_ERR_NONE);
   12c48:	0005883a 	mov	r2,zero
   12c4c:	00004106 	br	12d54 <OSQPostOpt+0x1f8>
    }
    pq = (OS_Q *)pevent->OSEventPtr;                  /* Point to queue control block                  */
   12c50:	e0bffd17 	ldw	r2,-12(fp)
   12c54:	10800117 	ldw	r2,4(r2)
   12c58:	e0bff815 	stw	r2,-32(fp)
    if (pq->OSQEntries >= pq->OSQSize) {              /* Make sure queue is not full                   */
   12c5c:	e0bff817 	ldw	r2,-32(fp)
   12c60:	10c0058b 	ldhu	r3,22(r2)
   12c64:	e0bff817 	ldw	r2,-32(fp)
   12c68:	1080050b 	ldhu	r2,20(r2)
   12c6c:	18ffffcc 	andi	r3,r3,65535
   12c70:	10bfffcc 	andi	r2,r2,65535
   12c74:	18800636 	bltu	r3,r2,12c90 <OSQPostOpt+0x134>
   12c78:	e0bff717 	ldw	r2,-36(fp)
   12c7c:	e0bffb15 	stw	r2,-20(fp)
   12c80:	e0bffb17 	ldw	r2,-20(fp)
   12c84:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_Q_FULL);
   12c88:	00800784 	movi	r2,30
   12c8c:	00003106 	br	12d54 <OSQPostOpt+0x1f8>
    }
    if ((opt & OS_POST_OPT_FRONT) != 0x00) {          /* Do we post to the FRONT of the queue?         */
   12c90:	e0bfff03 	ldbu	r2,-4(fp)
   12c94:	1080008c 	andi	r2,r2,2
   12c98:	10001326 	beq	r2,zero,12ce8 <OSQPostOpt+0x18c>
        if (pq->OSQOut == pq->OSQStart) {             /* Yes, Post as LIFO, Wrap OUT pointer if we ... */
   12c9c:	e0bff817 	ldw	r2,-32(fp)
   12ca0:	10c00417 	ldw	r3,16(r2)
   12ca4:	e0bff817 	ldw	r2,-32(fp)
   12ca8:	10800117 	ldw	r2,4(r2)
   12cac:	1880041e 	bne	r3,r2,12cc0 <OSQPostOpt+0x164>
            pq->OSQOut = pq->OSQEnd;                  /*      ... are at the 1st queue entry           */
   12cb0:	e0bff817 	ldw	r2,-32(fp)
   12cb4:	10c00217 	ldw	r3,8(r2)
   12cb8:	e0bff817 	ldw	r2,-32(fp)
   12cbc:	10c00415 	stw	r3,16(r2)
        }
        pq->OSQOut--;
   12cc0:	e0bff817 	ldw	r2,-32(fp)
   12cc4:	10800417 	ldw	r2,16(r2)
   12cc8:	10ffff04 	addi	r3,r2,-4
   12ccc:	e0bff817 	ldw	r2,-32(fp)
   12cd0:	10c00415 	stw	r3,16(r2)
        *pq->OSQOut = pmsg;                           /*      Insert message into queue                */
   12cd4:	e0bff817 	ldw	r2,-32(fp)
   12cd8:	10800417 	ldw	r2,16(r2)
   12cdc:	e0fffe17 	ldw	r3,-8(fp)
   12ce0:	10c00015 	stw	r3,0(r2)
   12ce4:	00001006 	br	12d28 <OSQPostOpt+0x1cc>
    } else {                                          /* No,  Post as FIFO                             */
        *pq->OSQIn++ = pmsg;                          /*      Insert message into queue                */
   12ce8:	e0bff817 	ldw	r2,-32(fp)
   12cec:	10800317 	ldw	r2,12(r2)
   12cf0:	11000104 	addi	r4,r2,4
   12cf4:	e0fff817 	ldw	r3,-32(fp)
   12cf8:	19000315 	stw	r4,12(r3)
   12cfc:	e0fffe17 	ldw	r3,-8(fp)
   12d00:	10c00015 	stw	r3,0(r2)
        if (pq->OSQIn == pq->OSQEnd) {                /*      Wrap IN ptr if we are at end of queue    */
   12d04:	e0bff817 	ldw	r2,-32(fp)
   12d08:	10c00317 	ldw	r3,12(r2)
   12d0c:	e0bff817 	ldw	r2,-32(fp)
   12d10:	10800217 	ldw	r2,8(r2)
   12d14:	1880041e 	bne	r3,r2,12d28 <OSQPostOpt+0x1cc>
            pq->OSQIn = pq->OSQStart;
   12d18:	e0bff817 	ldw	r2,-32(fp)
   12d1c:	10c00117 	ldw	r3,4(r2)
   12d20:	e0bff817 	ldw	r2,-32(fp)
   12d24:	10c00315 	stw	r3,12(r2)
        }
    }
    pq->OSQEntries++;                                 /* Update the nbr of entries in the queue        */
   12d28:	e0bff817 	ldw	r2,-32(fp)
   12d2c:	1080058b 	ldhu	r2,22(r2)
   12d30:	10800044 	addi	r2,r2,1
   12d34:	1007883a 	mov	r3,r2
   12d38:	e0bff817 	ldw	r2,-32(fp)
   12d3c:	10c0058d 	sth	r3,22(r2)
   12d40:	e0bff717 	ldw	r2,-36(fp)
   12d44:	e0bffc15 	stw	r2,-16(fp)
   12d48:	e0bffc17 	ldw	r2,-16(fp)
   12d4c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
   12d50:	0005883a 	mov	r2,zero
}
   12d54:	e037883a 	mov	sp,fp
   12d58:	dfc00117 	ldw	ra,4(sp)
   12d5c:	df000017 	ldw	fp,0(sp)
   12d60:	dec00204 	addi	sp,sp,8
   12d64:	f800283a 	ret

00012d68 <OSQQuery>:
*********************************************************************************************************
*/

#if OS_Q_QUERY_EN > 0
INT8U  OSQQuery (OS_EVENT *pevent, OS_Q_DATA *p_q_data)
{
   12d68:	defff604 	addi	sp,sp,-40
   12d6c:	df000915 	stw	fp,36(sp)
   12d70:	df000904 	addi	fp,sp,36
   12d74:	e13ffe15 	stw	r4,-8(fp)
   12d78:	e17fff15 	stw	r5,-4(fp)
#else
    INT16U    *psrc;
    INT16U    *pdest;
#endif
#if OS_CRITICAL_METHOD == 3                            /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
   12d7c:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                     /* Validate 'pevent'                            */
   12d80:	e0bffe17 	ldw	r2,-8(fp)
   12d84:	1000021e 	bne	r2,zero,12d90 <OSQQuery+0x28>
        return (OS_ERR_PEVENT_NULL);
   12d88:	00800104 	movi	r2,4
   12d8c:	00004906 	br	12eb4 <OSQQuery+0x14c>
    }
    if (p_q_data == (OS_Q_DATA *)0) {                  /* Validate 'p_q_data'                          */
   12d90:	e0bfff17 	ldw	r2,-4(fp)
   12d94:	1000021e 	bne	r2,zero,12da0 <OSQQuery+0x38>
        return (OS_ERR_PDATA_NULL);
   12d98:	00800244 	movi	r2,9
   12d9c:	00004506 	br	12eb4 <OSQQuery+0x14c>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {      /* Validate event block type                    */
   12da0:	e0bffe17 	ldw	r2,-8(fp)
   12da4:	10800003 	ldbu	r2,0(r2)
   12da8:	10803fcc 	andi	r2,r2,255
   12dac:	108000a0 	cmpeqi	r2,r2,2
   12db0:	1000021e 	bne	r2,zero,12dbc <OSQQuery+0x54>
        return (OS_ERR_EVENT_TYPE);
   12db4:	00800044 	movi	r2,1
   12db8:	00003e06 	br	12eb4 <OSQQuery+0x14c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   12dbc:	0005303a 	rdctl	r2,status
   12dc0:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   12dc4:	e0fffc17 	ldw	r3,-16(fp)
   12dc8:	00bfff84 	movi	r2,-2
   12dcc:	1884703a 	and	r2,r3,r2
   12dd0:	1001703a 	wrctl	status,r2
  
  return context;
   12dd4:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
   12dd8:	e0bffa15 	stw	r2,-24(fp)
    p_q_data->OSEventGrp = pevent->OSEventGrp;         /* Copy message queue wait list                 */
   12ddc:	e0bffe17 	ldw	r2,-8(fp)
   12de0:	10c00283 	ldbu	r3,10(r2)
   12de4:	e0bfff17 	ldw	r2,-4(fp)
   12de8:	10c002c5 	stb	r3,11(r2)
    psrc                 = &pevent->OSEventTbl[0];
   12dec:	e0bffe17 	ldw	r2,-8(fp)
   12df0:	108002c4 	addi	r2,r2,11
   12df4:	e0bff815 	stw	r2,-32(fp)
    pdest                = &p_q_data->OSEventTbl[0];
   12df8:	e0bfff17 	ldw	r2,-4(fp)
   12dfc:	10800204 	addi	r2,r2,8
   12e00:	e0bff915 	stw	r2,-28(fp)
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
   12e04:	e03ff705 	stb	zero,-36(fp)
   12e08:	00000b06 	br	12e38 <OSQQuery+0xd0>
        *pdest++ = *psrc++;
   12e0c:	e0bff917 	ldw	r2,-28(fp)
   12e10:	10c00044 	addi	r3,r2,1
   12e14:	e0fff915 	stw	r3,-28(fp)
   12e18:	e0fff817 	ldw	r3,-32(fp)
   12e1c:	19000044 	addi	r4,r3,1
   12e20:	e13ff815 	stw	r4,-32(fp)
   12e24:	18c00003 	ldbu	r3,0(r3)
   12e28:	10c00005 	stb	r3,0(r2)
    }
    OS_ENTER_CRITICAL();
    p_q_data->OSEventGrp = pevent->OSEventGrp;         /* Copy message queue wait list                 */
    psrc                 = &pevent->OSEventTbl[0];
    pdest                = &p_q_data->OSEventTbl[0];
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
   12e2c:	e0bff703 	ldbu	r2,-36(fp)
   12e30:	10800044 	addi	r2,r2,1
   12e34:	e0bff705 	stb	r2,-36(fp)
   12e38:	e0bff703 	ldbu	r2,-36(fp)
   12e3c:	108000f0 	cmpltui	r2,r2,3
   12e40:	103ff21e 	bne	r2,zero,12e0c <__alt_mem_Flash_flash_data+0xf4012e0c>
        *pdest++ = *psrc++;
    }
    pq = (OS_Q *)pevent->OSEventPtr;
   12e44:	e0bffe17 	ldw	r2,-8(fp)
   12e48:	10800117 	ldw	r2,4(r2)
   12e4c:	e0bffb15 	stw	r2,-20(fp)
    if (pq->OSQEntries > 0) {
   12e50:	e0bffb17 	ldw	r2,-20(fp)
   12e54:	1080058b 	ldhu	r2,22(r2)
   12e58:	10bfffcc 	andi	r2,r2,65535
   12e5c:	10000626 	beq	r2,zero,12e78 <OSQQuery+0x110>
        p_q_data->OSMsg = *pq->OSQOut;                 /* Get next message to return if available      */
   12e60:	e0bffb17 	ldw	r2,-20(fp)
   12e64:	10800417 	ldw	r2,16(r2)
   12e68:	10c00017 	ldw	r3,0(r2)
   12e6c:	e0bfff17 	ldw	r2,-4(fp)
   12e70:	10c00015 	stw	r3,0(r2)
   12e74:	00000206 	br	12e80 <OSQQuery+0x118>
    } else {
        p_q_data->OSMsg = (void *)0;
   12e78:	e0bfff17 	ldw	r2,-4(fp)
   12e7c:	10000015 	stw	zero,0(r2)
    }
    p_q_data->OSNMsgs = pq->OSQEntries;
   12e80:	e0bffb17 	ldw	r2,-20(fp)
   12e84:	10c0058b 	ldhu	r3,22(r2)
   12e88:	e0bfff17 	ldw	r2,-4(fp)
   12e8c:	10c0010d 	sth	r3,4(r2)
    p_q_data->OSQSize = pq->OSQSize;
   12e90:	e0bffb17 	ldw	r2,-20(fp)
   12e94:	10c0050b 	ldhu	r3,20(r2)
   12e98:	e0bfff17 	ldw	r2,-4(fp)
   12e9c:	10c0018d 	sth	r3,6(r2)
   12ea0:	e0bffa17 	ldw	r2,-24(fp)
   12ea4:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   12ea8:	e0bffd17 	ldw	r2,-12(fp)
   12eac:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
   12eb0:	0005883a 	mov	r2,zero
}
   12eb4:	e037883a 	mov	sp,fp
   12eb8:	df000017 	ldw	fp,0(sp)
   12ebc:	dec00104 	addi	sp,sp,4
   12ec0:	f800283a 	ret

00012ec4 <OS_QInit>:
* Note(s)    : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

void  OS_QInit (void)
{
   12ec4:	defffb04 	addi	sp,sp,-20
   12ec8:	dfc00415 	stw	ra,16(sp)
   12ecc:	df000315 	stw	fp,12(sp)
   12ed0:	df000304 	addi	fp,sp,12
    OS_Q   *pq1;
    OS_Q   *pq2;



    OS_MemClr((INT8U *)&OSQTbl[0], sizeof(OSQTbl));  /* Clear the queue table                          */
   12ed4:	010000b4 	movhi	r4,2
   12ed8:	21149604 	addi	r4,r4,21080
   12edc:	01407804 	movi	r5,480
   12ee0:	000f4a80 	call	f4a8 <OS_MemClr>
    pq1 = &OSQTbl[0];
   12ee4:	008000b4 	movhi	r2,2
   12ee8:	10949604 	addi	r2,r2,21080
   12eec:	e0bffe15 	stw	r2,-8(fp)
    pq2 = &OSQTbl[1];
   12ef0:	008000b4 	movhi	r2,2
   12ef4:	10949c04 	addi	r2,r2,21104
   12ef8:	e0bfff15 	stw	r2,-4(fp)
    for (i = 0; i < (OS_MAX_QS - 1); i++) {          /* Init. list of free QUEUE control blocks        */
   12efc:	e03ffd0d 	sth	zero,-12(fp)
   12f00:	00000c06 	br	12f34 <OS_QInit+0x70>
        pq1->OSQPtr = pq2;
   12f04:	e0bffe17 	ldw	r2,-8(fp)
   12f08:	e0ffff17 	ldw	r3,-4(fp)
   12f0c:	10c00015 	stw	r3,0(r2)
        pq1++;
   12f10:	e0bffe17 	ldw	r2,-8(fp)
   12f14:	10800604 	addi	r2,r2,24
   12f18:	e0bffe15 	stw	r2,-8(fp)
        pq2++;
   12f1c:	e0bfff17 	ldw	r2,-4(fp)
   12f20:	10800604 	addi	r2,r2,24
   12f24:	e0bfff15 	stw	r2,-4(fp)


    OS_MemClr((INT8U *)&OSQTbl[0], sizeof(OSQTbl));  /* Clear the queue table                          */
    pq1 = &OSQTbl[0];
    pq2 = &OSQTbl[1];
    for (i = 0; i < (OS_MAX_QS - 1); i++) {          /* Init. list of free QUEUE control blocks        */
   12f28:	e0bffd0b 	ldhu	r2,-12(fp)
   12f2c:	10800044 	addi	r2,r2,1
   12f30:	e0bffd0d 	sth	r2,-12(fp)
   12f34:	e0bffd0b 	ldhu	r2,-12(fp)
   12f38:	108004f0 	cmpltui	r2,r2,19
   12f3c:	103ff11e 	bne	r2,zero,12f04 <__alt_mem_Flash_flash_data+0xf4012f04>
        pq1->OSQPtr = pq2;
        pq1++;
        pq2++;
    }
    pq1->OSQPtr = (OS_Q *)0;
   12f40:	e0bffe17 	ldw	r2,-8(fp)
   12f44:	10000015 	stw	zero,0(r2)
    OSQFreeList = &OSQTbl[0];
   12f48:	008000b4 	movhi	r2,2
   12f4c:	10b69704 	addi	r2,r2,-9636
   12f50:	00c000b4 	movhi	r3,2
   12f54:	18d49604 	addi	r3,r3,21080
   12f58:	10c00015 	stw	r3,0(r2)
#endif
}
   12f5c:	e037883a 	mov	sp,fp
   12f60:	dfc00117 	ldw	ra,4(sp)
   12f64:	df000017 	ldw	fp,0(sp)
   12f68:	dec00204 	addi	sp,sp,8
   12f6c:	f800283a 	ret

00012f70 <OSSemAccept>:
*********************************************************************************************************
*/

#if OS_SEM_ACCEPT_EN > 0
INT16U  OSSemAccept (OS_EVENT *pevent)
{
   12f70:	defffa04 	addi	sp,sp,-24
   12f74:	df000515 	stw	fp,20(sp)
   12f78:	df000504 	addi	fp,sp,20
   12f7c:	e13fff15 	stw	r4,-4(fp)
    INT16U     cnt;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   12f80:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
   12f84:	e0bfff17 	ldw	r2,-4(fp)
   12f88:	1000021e 	bne	r2,zero,12f94 <OSSemAccept+0x24>
        return (0);
   12f8c:	0005883a 	mov	r2,zero
   12f90:	00001f06 	br	13010 <OSSemAccept+0xa0>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
   12f94:	e0bfff17 	ldw	r2,-4(fp)
   12f98:	10800003 	ldbu	r2,0(r2)
   12f9c:	10803fcc 	andi	r2,r2,255
   12fa0:	108000e0 	cmpeqi	r2,r2,3
   12fa4:	1000021e 	bne	r2,zero,12fb0 <OSSemAccept+0x40>
        return (0);
   12fa8:	0005883a 	mov	r2,zero
   12fac:	00001806 	br	13010 <OSSemAccept+0xa0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   12fb0:	0005303a 	rdctl	r2,status
   12fb4:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   12fb8:	e0fffd17 	ldw	r3,-12(fp)
   12fbc:	00bfff84 	movi	r2,-2
   12fc0:	1884703a 	and	r2,r3,r2
   12fc4:	1001703a 	wrctl	status,r2
  
  return context;
   12fc8:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
   12fcc:	e0bffb15 	stw	r2,-20(fp)
    cnt = pevent->OSEventCnt;
   12fd0:	e0bfff17 	ldw	r2,-4(fp)
   12fd4:	1080020b 	ldhu	r2,8(r2)
   12fd8:	e0bffc0d 	sth	r2,-16(fp)
    if (cnt > 0) {                                    /* See if resource is available                  */
   12fdc:	e0bffc0b 	ldhu	r2,-16(fp)
   12fe0:	10000626 	beq	r2,zero,12ffc <OSSemAccept+0x8c>
        pevent->OSEventCnt--;                         /* Yes, decrement semaphore and notify caller    */
   12fe4:	e0bfff17 	ldw	r2,-4(fp)
   12fe8:	1080020b 	ldhu	r2,8(r2)
   12fec:	10bfffc4 	addi	r2,r2,-1
   12ff0:	1007883a 	mov	r3,r2
   12ff4:	e0bfff17 	ldw	r2,-4(fp)
   12ff8:	10c0020d 	sth	r3,8(r2)
   12ffc:	e0bffb17 	ldw	r2,-20(fp)
   13000:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   13004:	e0bffe17 	ldw	r2,-8(fp)
   13008:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (cnt);                                     /* Return semaphore count                        */
   1300c:	e0bffc0b 	ldhu	r2,-16(fp)
}
   13010:	e037883a 	mov	sp,fp
   13014:	df000017 	ldw	fp,0(sp)
   13018:	dec00104 	addi	sp,sp,4
   1301c:	f800283a 	ret

00013020 <OSSemCreate>:
*              == (void *)0  if no event control blocks were available
*********************************************************************************************************
*/

OS_EVENT  *OSSemCreate (INT16U cnt)
{
   13020:	defff904 	addi	sp,sp,-28
   13024:	dfc00615 	stw	ra,24(sp)
   13028:	df000515 	stw	fp,20(sp)
   1302c:	df000504 	addi	fp,sp,20
   13030:	2005883a 	mov	r2,r4
   13034:	e0bfff0d 	sth	r2,-4(fp)
    OS_EVENT  *pevent;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
   13038:	e03ffb15 	stw	zero,-20(fp)
#endif



    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
   1303c:	008000b4 	movhi	r2,2
   13040:	10b69a04 	addi	r2,r2,-9624
   13044:	10800003 	ldbu	r2,0(r2)
   13048:	10803fcc 	andi	r2,r2,255
   1304c:	10000226 	beq	r2,zero,13058 <OSSemCreate+0x38>
        return ((OS_EVENT *)0);                            /* ... can't CREATE from an ISR             */
   13050:	0005883a 	mov	r2,zero
   13054:	00002d06 	br	1310c <OSSemCreate+0xec>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   13058:	0005303a 	rdctl	r2,status
   1305c:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   13060:	e0fffd17 	ldw	r3,-12(fp)
   13064:	00bfff84 	movi	r2,-2
   13068:	1884703a 	and	r2,r3,r2
   1306c:	1001703a 	wrctl	status,r2
  
  return context;
   13070:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
   13074:	e0bffb15 	stw	r2,-20(fp)
    pevent = OSEventFreeList;                              /* Get next free event control block        */
   13078:	008000b4 	movhi	r2,2
   1307c:	10b69904 	addi	r2,r2,-9628
   13080:	10800017 	ldw	r2,0(r2)
   13084:	e0bffc15 	stw	r2,-16(fp)
    if (OSEventFreeList != (OS_EVENT *)0) {                /* See if pool of free ECB pool was empty   */
   13088:	008000b4 	movhi	r2,2
   1308c:	10b69904 	addi	r2,r2,-9628
   13090:	10800017 	ldw	r2,0(r2)
   13094:	10000726 	beq	r2,zero,130b4 <OSSemCreate+0x94>
        OSEventFreeList = (OS_EVENT *)OSEventFreeList->OSEventPtr;
   13098:	008000b4 	movhi	r2,2
   1309c:	10b69904 	addi	r2,r2,-9628
   130a0:	10800017 	ldw	r2,0(r2)
   130a4:	10c00117 	ldw	r3,4(r2)
   130a8:	008000b4 	movhi	r2,2
   130ac:	10b69904 	addi	r2,r2,-9628
   130b0:	10c00015 	stw	r3,0(r2)
   130b4:	e0bffb17 	ldw	r2,-20(fp)
   130b8:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   130bc:	e0bffe17 	ldw	r2,-8(fp)
   130c0:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    if (pevent != (OS_EVENT *)0) {                         /* Get an event control block               */
   130c4:	e0bffc17 	ldw	r2,-16(fp)
   130c8:	10000f26 	beq	r2,zero,13108 <OSSemCreate+0xe8>
        pevent->OSEventType    = OS_EVENT_TYPE_SEM;
   130cc:	e0bffc17 	ldw	r2,-16(fp)
   130d0:	00c000c4 	movi	r3,3
   130d4:	10c00005 	stb	r3,0(r2)
        pevent->OSEventCnt     = cnt;                      /* Set semaphore value                      */
   130d8:	e0bffc17 	ldw	r2,-16(fp)
   130dc:	e0ffff0b 	ldhu	r3,-4(fp)
   130e0:	10c0020d 	sth	r3,8(r2)
        pevent->OSEventPtr     = (void *)0;                /* Unlink from ECB free list                */
   130e4:	e0bffc17 	ldw	r2,-16(fp)
   130e8:	10000115 	stw	zero,4(r2)
#if OS_EVENT_NAME_SIZE > 1
        pevent->OSEventName[0] = '?';                      /* Unknown name                             */
   130ec:	e0bffc17 	ldw	r2,-16(fp)
   130f0:	00c00fc4 	movi	r3,63
   130f4:	10c00385 	stb	r3,14(r2)
        pevent->OSEventName[1] = OS_ASCII_NUL;
   130f8:	e0bffc17 	ldw	r2,-16(fp)
   130fc:	100003c5 	stb	zero,15(r2)
#endif
        OS_EventWaitListInit(pevent);                      /* Initialize to 'nobody waiting' on sem.   */
   13100:	e13ffc17 	ldw	r4,-16(fp)
   13104:	000f0e40 	call	f0e4 <OS_EventWaitListInit>
    }
    return (pevent);
   13108:	e0bffc17 	ldw	r2,-16(fp)
}
   1310c:	e037883a 	mov	sp,fp
   13110:	dfc00117 	ldw	ra,4(sp)
   13114:	df000017 	ldw	fp,0(sp)
   13118:	dec00204 	addi	sp,sp,8
   1311c:	f800283a 	ret

00013120 <OSSemDel>:
*********************************************************************************************************
*/

#if OS_SEM_DEL_EN > 0
OS_EVENT  *OSSemDel (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
   13120:	defff304 	addi	sp,sp,-52
   13124:	dfc00c15 	stw	ra,48(sp)
   13128:	df000b15 	stw	fp,44(sp)
   1312c:	df000b04 	addi	fp,sp,44
   13130:	e13ffd15 	stw	r4,-12(fp)
   13134:	2805883a 	mov	r2,r5
   13138:	e1bfff15 	stw	r6,-4(fp)
   1313c:	e0bffe05 	stb	r2,-8(fp)
    BOOLEAN    tasks_waiting;
    OS_EVENT  *pevent_return;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
   13140:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
   13144:	e0bfff17 	ldw	r2,-4(fp)
   13148:	1000021e 	bne	r2,zero,13154 <OSSemDel+0x34>
        return (pevent);
   1314c:	e0bffd17 	ldw	r2,-12(fp)
   13150:	00008806 	br	13374 <OSSemDel+0x254>
    }
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
   13154:	e0bffd17 	ldw	r2,-12(fp)
   13158:	1000051e 	bne	r2,zero,13170 <OSSemDel+0x50>
        *perr = OS_ERR_PEVENT_NULL;
   1315c:	e0bfff17 	ldw	r2,-4(fp)
   13160:	00c00104 	movi	r3,4
   13164:	10c00005 	stb	r3,0(r2)
        return (pevent);
   13168:	e0bffd17 	ldw	r2,-12(fp)
   1316c:	00008106 	br	13374 <OSSemDel+0x254>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {        /* Validate event block type                */
   13170:	e0bffd17 	ldw	r2,-12(fp)
   13174:	10800003 	ldbu	r2,0(r2)
   13178:	10803fcc 	andi	r2,r2,255
   1317c:	108000e0 	cmpeqi	r2,r2,3
   13180:	1000051e 	bne	r2,zero,13198 <OSSemDel+0x78>
        *perr = OS_ERR_EVENT_TYPE;
   13184:	e0bfff17 	ldw	r2,-4(fp)
   13188:	00c00044 	movi	r3,1
   1318c:	10c00005 	stb	r3,0(r2)
        return (pevent);
   13190:	e0bffd17 	ldw	r2,-12(fp)
   13194:	00007706 	br	13374 <OSSemDel+0x254>
    }
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
   13198:	008000b4 	movhi	r2,2
   1319c:	10b69a04 	addi	r2,r2,-9624
   131a0:	10800003 	ldbu	r2,0(r2)
   131a4:	10803fcc 	andi	r2,r2,255
   131a8:	10000526 	beq	r2,zero,131c0 <OSSemDel+0xa0>
        *perr = OS_ERR_DEL_ISR;                             /* ... can't DELETE from an ISR             */
   131ac:	e0bfff17 	ldw	r2,-4(fp)
   131b0:	00c003c4 	movi	r3,15
   131b4:	10c00005 	stb	r3,0(r2)
        return (pevent);
   131b8:	e0bffd17 	ldw	r2,-12(fp)
   131bc:	00006d06 	br	13374 <OSSemDel+0x254>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   131c0:	0005303a 	rdctl	r2,status
   131c4:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   131c8:	e0fff817 	ldw	r3,-32(fp)
   131cc:	00bfff84 	movi	r2,-2
   131d0:	1884703a 	and	r2,r3,r2
   131d4:	1001703a 	wrctl	status,r2
  
  return context;
   131d8:	e0bff817 	ldw	r2,-32(fp)
    }
    OS_ENTER_CRITICAL();
   131dc:	e0bff715 	stw	r2,-36(fp)
    if (pevent->OSEventGrp != 0) {                         /* See if any tasks waiting on semaphore    */
   131e0:	e0bffd17 	ldw	r2,-12(fp)
   131e4:	10800283 	ldbu	r2,10(r2)
   131e8:	10803fcc 	andi	r2,r2,255
   131ec:	10000326 	beq	r2,zero,131fc <OSSemDel+0xdc>
        tasks_waiting = OS_TRUE;                           /* Yes                                      */
   131f0:	00800044 	movi	r2,1
   131f4:	e0bff505 	stb	r2,-44(fp)
   131f8:	00000106 	br	13200 <OSSemDel+0xe0>
    } else {
        tasks_waiting = OS_FALSE;                          /* No                                       */
   131fc:	e03ff505 	stb	zero,-44(fp)
    }
    switch (opt) {
   13200:	e0bffe03 	ldbu	r2,-8(fp)
   13204:	10000326 	beq	r2,zero,13214 <OSSemDel+0xf4>
   13208:	10800060 	cmpeqi	r2,r2,1
   1320c:	10002c1e 	bne	r2,zero,132c0 <OSSemDel+0x1a0>
   13210:	00004d06 	br	13348 <OSSemDel+0x228>
        case OS_DEL_NO_PEND:                               /* Delete semaphore only if no task waiting */
             if (tasks_waiting == OS_FALSE) {
   13214:	e0bff503 	ldbu	r2,-44(fp)
   13218:	10001a1e 	bne	r2,zero,13284 <OSSemDel+0x164>
#if OS_EVENT_NAME_SIZE > 1
                 pevent->OSEventName[0] = '?';             /* Unknown name                             */
   1321c:	e0bffd17 	ldw	r2,-12(fp)
   13220:	00c00fc4 	movi	r3,63
   13224:	10c00385 	stb	r3,14(r2)
                 pevent->OSEventName[1] = OS_ASCII_NUL;
   13228:	e0bffd17 	ldw	r2,-12(fp)
   1322c:	100003c5 	stb	zero,15(r2)
#endif
                 pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
   13230:	e0bffd17 	ldw	r2,-12(fp)
   13234:	10000005 	stb	zero,0(r2)
                 pevent->OSEventPtr     = OSEventFreeList; /* Return Event Control Block to free list  */
   13238:	008000b4 	movhi	r2,2
   1323c:	10b69904 	addi	r2,r2,-9628
   13240:	10c00017 	ldw	r3,0(r2)
   13244:	e0bffd17 	ldw	r2,-12(fp)
   13248:	10c00115 	stw	r3,4(r2)
                 pevent->OSEventCnt     = 0;
   1324c:	e0bffd17 	ldw	r2,-12(fp)
   13250:	1000020d 	sth	zero,8(r2)
                 OSEventFreeList        = pevent;          /* Get next free event control block        */
   13254:	008000b4 	movhi	r2,2
   13258:	10b69904 	addi	r2,r2,-9628
   1325c:	e0fffd17 	ldw	r3,-12(fp)
   13260:	10c00015 	stw	r3,0(r2)
   13264:	e0bff717 	ldw	r2,-36(fp)
   13268:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1326c:	e0bff917 	ldw	r2,-28(fp)
   13270:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_NONE;
   13274:	e0bfff17 	ldw	r2,-4(fp)
   13278:	10000005 	stb	zero,0(r2)
                 pevent_return          = (OS_EVENT *)0;   /* Semaphore has been deleted               */
   1327c:	e03ff615 	stw	zero,-40(fp)
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_TASK_WAITING;
                 pevent_return          = pevent;
             }
             break;
   13280:	00003b06 	br	13370 <OSSemDel+0x250>
   13284:	e0bff717 	ldw	r2,-36(fp)
   13288:	e0bffa15 	stw	r2,-24(fp)
   1328c:	e0bffa17 	ldw	r2,-24(fp)
   13290:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_NONE;
                 pevent_return          = (OS_EVENT *)0;   /* Semaphore has been deleted               */
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_TASK_WAITING;
   13294:	e0bfff17 	ldw	r2,-4(fp)
   13298:	00c01244 	movi	r3,73
   1329c:	10c00005 	stb	r3,0(r2)
                 pevent_return          = pevent;
   132a0:	e0bffd17 	ldw	r2,-12(fp)
   132a4:	e0bff615 	stw	r2,-40(fp)
             }
             break;
   132a8:	00003106 	br	13370 <OSSemDel+0x250>

        case OS_DEL_ALWAYS:                                /* Always delete the semaphore              */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for semaphore    */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_OK);
   132ac:	e13ffd17 	ldw	r4,-12(fp)
   132b0:	000b883a 	mov	r5,zero
   132b4:	01800044 	movi	r6,1
   132b8:	000f883a 	mov	r7,zero
   132bc:	000eb440 	call	eb44 <OS_EventTaskRdy>
                 pevent_return          = pevent;
             }
             break;

        case OS_DEL_ALWAYS:                                /* Always delete the semaphore              */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for semaphore    */
   132c0:	e0bffd17 	ldw	r2,-12(fp)
   132c4:	10800283 	ldbu	r2,10(r2)
   132c8:	10803fcc 	andi	r2,r2,255
   132cc:	103ff71e 	bne	r2,zero,132ac <__alt_mem_Flash_flash_data+0xf40132ac>
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_OK);
             }
#if OS_EVENT_NAME_SIZE > 1
             pevent->OSEventName[0] = '?';                 /* Unknown name                             */
   132d0:	e0bffd17 	ldw	r2,-12(fp)
   132d4:	00c00fc4 	movi	r3,63
   132d8:	10c00385 	stb	r3,14(r2)
             pevent->OSEventName[1] = OS_ASCII_NUL;
   132dc:	e0bffd17 	ldw	r2,-12(fp)
   132e0:	100003c5 	stb	zero,15(r2)
#endif
             pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
   132e4:	e0bffd17 	ldw	r2,-12(fp)
   132e8:	10000005 	stb	zero,0(r2)
             pevent->OSEventPtr     = OSEventFreeList;     /* Return Event Control Block to free list  */
   132ec:	008000b4 	movhi	r2,2
   132f0:	10b69904 	addi	r2,r2,-9628
   132f4:	10c00017 	ldw	r3,0(r2)
   132f8:	e0bffd17 	ldw	r2,-12(fp)
   132fc:	10c00115 	stw	r3,4(r2)
             pevent->OSEventCnt     = 0;
   13300:	e0bffd17 	ldw	r2,-12(fp)
   13304:	1000020d 	sth	zero,8(r2)
             OSEventFreeList        = pevent;              /* Get next free event control block        */
   13308:	008000b4 	movhi	r2,2
   1330c:	10b69904 	addi	r2,r2,-9628
   13310:	e0fffd17 	ldw	r3,-12(fp)
   13314:	10c00015 	stw	r3,0(r2)
   13318:	e0bff717 	ldw	r2,-36(fp)
   1331c:	e0bffb15 	stw	r2,-20(fp)
   13320:	e0bffb17 	ldw	r2,-20(fp)
   13324:	1001703a 	wrctl	status,r2
             OS_EXIT_CRITICAL();
             if (tasks_waiting == OS_TRUE) {               /* Reschedule only if task(s) were waiting  */
   13328:	e0bff503 	ldbu	r2,-44(fp)
   1332c:	10800058 	cmpnei	r2,r2,1
   13330:	1000011e 	bne	r2,zero,13338 <OSSemDel+0x218>
                 OS_Sched();                               /* Find highest priority task ready to run  */
   13334:	000f55c0 	call	f55c <OS_Sched>
             }
             *perr                  = OS_ERR_NONE;
   13338:	e0bfff17 	ldw	r2,-4(fp)
   1333c:	10000005 	stb	zero,0(r2)
             pevent_return          = (OS_EVENT *)0;       /* Semaphore has been deleted               */
   13340:	e03ff615 	stw	zero,-40(fp)
             break;
   13344:	00000a06 	br	13370 <OSSemDel+0x250>
   13348:	e0bff717 	ldw	r2,-36(fp)
   1334c:	e0bffc15 	stw	r2,-16(fp)
   13350:	e0bffc17 	ldw	r2,-16(fp)
   13354:	1001703a 	wrctl	status,r2

        default:
             OS_EXIT_CRITICAL();
             *perr                  = OS_ERR_INVALID_OPT;
   13358:	e0bfff17 	ldw	r2,-4(fp)
   1335c:	00c001c4 	movi	r3,7
   13360:	10c00005 	stb	r3,0(r2)
             pevent_return          = pevent;
   13364:	e0bffd17 	ldw	r2,-12(fp)
   13368:	e0bff615 	stw	r2,-40(fp)
             break;
   1336c:	0001883a 	nop
    }
    return (pevent_return);
   13370:	e0bff617 	ldw	r2,-40(fp)
}
   13374:	e037883a 	mov	sp,fp
   13378:	dfc00117 	ldw	ra,4(sp)
   1337c:	df000017 	ldw	fp,0(sp)
   13380:	dec00204 	addi	sp,sp,8
   13384:	f800283a 	ret

00013388 <OSSemPend>:
* Returns    : none
*********************************************************************************************************
*/
/*$PAGE*/
void  OSSemPend (OS_EVENT *pevent, INT16U timeout, INT8U *perr)
{
   13388:	defff504 	addi	sp,sp,-44
   1338c:	dfc00a15 	stw	ra,40(sp)
   13390:	df000915 	stw	fp,36(sp)
   13394:	df000904 	addi	fp,sp,36
   13398:	e13ffd15 	stw	r4,-12(fp)
   1339c:	2805883a 	mov	r2,r5
   133a0:	e1bfff15 	stw	r6,-4(fp)
   133a4:	e0bffe0d 	sth	r2,-8(fp)
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   133a8:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
   133ac:	e0bfff17 	ldw	r2,-4(fp)
   133b0:	1000011e 	bne	r2,zero,133b8 <OSSemPend+0x30>
        return;
   133b4:	00008906 	br	135dc <OSSemPend+0x254>
    }
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
   133b8:	e0bffd17 	ldw	r2,-12(fp)
   133bc:	1000041e 	bne	r2,zero,133d0 <OSSemPend+0x48>
        *perr = OS_ERR_PEVENT_NULL;
   133c0:	e0bfff17 	ldw	r2,-4(fp)
   133c4:	00c00104 	movi	r3,4
   133c8:	10c00005 	stb	r3,0(r2)
        return;
   133cc:	00008306 	br	135dc <OSSemPend+0x254>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
   133d0:	e0bffd17 	ldw	r2,-12(fp)
   133d4:	10800003 	ldbu	r2,0(r2)
   133d8:	10803fcc 	andi	r2,r2,255
   133dc:	108000e0 	cmpeqi	r2,r2,3
   133e0:	1000041e 	bne	r2,zero,133f4 <OSSemPend+0x6c>
        *perr = OS_ERR_EVENT_TYPE;
   133e4:	e0bfff17 	ldw	r2,-4(fp)
   133e8:	00c00044 	movi	r3,1
   133ec:	10c00005 	stb	r3,0(r2)
        return;
   133f0:	00007a06 	br	135dc <OSSemPend+0x254>
    }
    if (OSIntNesting > 0) {                           /* See if called from ISR ...                    */
   133f4:	008000b4 	movhi	r2,2
   133f8:	10b69a04 	addi	r2,r2,-9624
   133fc:	10800003 	ldbu	r2,0(r2)
   13400:	10803fcc 	andi	r2,r2,255
   13404:	10000426 	beq	r2,zero,13418 <OSSemPend+0x90>
        *perr = OS_ERR_PEND_ISR;                      /* ... can't PEND from an ISR                    */
   13408:	e0bfff17 	ldw	r2,-4(fp)
   1340c:	00c00084 	movi	r3,2
   13410:	10c00005 	stb	r3,0(r2)
        return;
   13414:	00007106 	br	135dc <OSSemPend+0x254>
    }
    if (OSLockNesting > 0) {                          /* See if called with scheduler locked ...       */
   13418:	008000b4 	movhi	r2,2
   1341c:	10b68c04 	addi	r2,r2,-9680
   13420:	10800003 	ldbu	r2,0(r2)
   13424:	10803fcc 	andi	r2,r2,255
   13428:	10000426 	beq	r2,zero,1343c <OSSemPend+0xb4>
        *perr = OS_ERR_PEND_LOCKED;                   /* ... can't PEND when locked                    */
   1342c:	e0bfff17 	ldw	r2,-4(fp)
   13430:	00c00344 	movi	r3,13
   13434:	10c00005 	stb	r3,0(r2)
        return;
   13438:	00006806 	br	135dc <OSSemPend+0x254>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1343c:	0005303a 	rdctl	r2,status
   13440:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   13444:	e0fff817 	ldw	r3,-32(fp)
   13448:	00bfff84 	movi	r2,-2
   1344c:	1884703a 	and	r2,r3,r2
   13450:	1001703a 	wrctl	status,r2
  
  return context;
   13454:	e0bff817 	ldw	r2,-32(fp)
    }
    OS_ENTER_CRITICAL();
   13458:	e0bff715 	stw	r2,-36(fp)
    if (pevent->OSEventCnt > 0) {                     /* If sem. is positive, resource available ...   */
   1345c:	e0bffd17 	ldw	r2,-12(fp)
   13460:	1080020b 	ldhu	r2,8(r2)
   13464:	10bfffcc 	andi	r2,r2,65535
   13468:	10000d26 	beq	r2,zero,134a0 <OSSemPend+0x118>
        pevent->OSEventCnt--;                         /* ... decrement semaphore only if positive.     */
   1346c:	e0bffd17 	ldw	r2,-12(fp)
   13470:	1080020b 	ldhu	r2,8(r2)
   13474:	10bfffc4 	addi	r2,r2,-1
   13478:	1007883a 	mov	r3,r2
   1347c:	e0bffd17 	ldw	r2,-12(fp)
   13480:	10c0020d 	sth	r3,8(r2)
   13484:	e0bff717 	ldw	r2,-36(fp)
   13488:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1348c:	e0bff917 	ldw	r2,-28(fp)
   13490:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_NONE;
   13494:	e0bfff17 	ldw	r2,-4(fp)
   13498:	10000005 	stb	zero,0(r2)
        return;
   1349c:	00004f06 	br	135dc <OSSemPend+0x254>
    }
                                                      /* Otherwise, must wait until event occurs       */
    OSTCBCur->OSTCBStat     |= OS_STAT_SEM;           /* Resource not available, pend on semaphore     */
   134a0:	008000b4 	movhi	r2,2
   134a4:	10b69b04 	addi	r2,r2,-9620
   134a8:	10c00017 	ldw	r3,0(r2)
   134ac:	008000b4 	movhi	r2,2
   134b0:	10b69b04 	addi	r2,r2,-9620
   134b4:	10800017 	ldw	r2,0(r2)
   134b8:	10800c03 	ldbu	r2,48(r2)
   134bc:	10800054 	ori	r2,r2,1
   134c0:	18800c05 	stb	r2,48(r3)
    OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
   134c4:	008000b4 	movhi	r2,2
   134c8:	10b69b04 	addi	r2,r2,-9620
   134cc:	10800017 	ldw	r2,0(r2)
   134d0:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBDly       = timeout;               /* Store pend timeout in TCB                     */
   134d4:	008000b4 	movhi	r2,2
   134d8:	10b69b04 	addi	r2,r2,-9620
   134dc:	10800017 	ldw	r2,0(r2)
   134e0:	e0fffe0b 	ldhu	r3,-8(fp)
   134e4:	10c00b8d 	sth	r3,46(r2)
    OS_EventTaskWait(pevent);                         /* Suspend task until event or timeout occurs    */
   134e8:	e13ffd17 	ldw	r4,-12(fp)
   134ec:	000ecdc0 	call	ecdc <OS_EventTaskWait>
   134f0:	e0bff717 	ldw	r2,-36(fp)
   134f4:	e0bffa15 	stw	r2,-24(fp)
   134f8:	e0bffa17 	ldw	r2,-24(fp)
   134fc:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    OS_Sched();                                       /* Find next highest priority task ready         */
   13500:	000f55c0 	call	f55c <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   13504:	0005303a 	rdctl	r2,status
   13508:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1350c:	e0fffb17 	ldw	r3,-20(fp)
   13510:	00bfff84 	movi	r2,-2
   13514:	1884703a 	and	r2,r3,r2
   13518:	1001703a 	wrctl	status,r2
  
  return context;
   1351c:	e0bffb17 	ldw	r2,-20(fp)
    OS_ENTER_CRITICAL();
   13520:	e0bff715 	stw	r2,-36(fp)
    switch (OSTCBCur->OSTCBStatPend) {                /* See if we timed-out or aborted                */
   13524:	008000b4 	movhi	r2,2
   13528:	10b69b04 	addi	r2,r2,-9620
   1352c:	10800017 	ldw	r2,0(r2)
   13530:	10800c43 	ldbu	r2,49(r2)
   13534:	10803fcc 	andi	r2,r2,255
   13538:	10000326 	beq	r2,zero,13548 <OSSemPend+0x1c0>
   1353c:	108000a0 	cmpeqi	r2,r2,2
   13540:	1000041e 	bne	r2,zero,13554 <OSSemPend+0x1cc>
   13544:	00000706 	br	13564 <OSSemPend+0x1dc>
        case OS_STAT_PEND_OK:
             *perr = OS_ERR_NONE;
   13548:	e0bfff17 	ldw	r2,-4(fp)
   1354c:	10000005 	stb	zero,0(r2)
             break;
   13550:	00000e06 	br	1358c <OSSemPend+0x204>

        case OS_STAT_PEND_ABORT:
             *perr = OS_ERR_PEND_ABORT;               /* Indicate that we aborted                      */
   13554:	e0bfff17 	ldw	r2,-4(fp)
   13558:	00c00384 	movi	r3,14
   1355c:	10c00005 	stb	r3,0(r2)
             break;
   13560:	00000a06 	br	1358c <OSSemPend+0x204>

        case OS_STAT_PEND_TO:
        default:        
             OS_EventTaskRemove(OSTCBCur, pevent);
   13564:	008000b4 	movhi	r2,2
   13568:	10b69b04 	addi	r2,r2,-9620
   1356c:	10800017 	ldw	r2,0(r2)
   13570:	1009883a 	mov	r4,r2
   13574:	e17ffd17 	ldw	r5,-12(fp)
   13578:	000ef340 	call	ef34 <OS_EventTaskRemove>
             *perr = OS_ERR_TIMEOUT;                  /* Indicate that we didn't get event within TO   */
   1357c:	e0bfff17 	ldw	r2,-4(fp)
   13580:	00c00284 	movi	r3,10
   13584:	10c00005 	stb	r3,0(r2)
             break;
   13588:	0001883a 	nop
    }
    OSTCBCur->OSTCBStat          =  OS_STAT_RDY;      /* Set   task  status to ready                   */
   1358c:	008000b4 	movhi	r2,2
   13590:	10b69b04 	addi	r2,r2,-9620
   13594:	10800017 	ldw	r2,0(r2)
   13598:	10000c05 	stb	zero,48(r2)
    OSTCBCur->OSTCBStatPend      =  OS_STAT_PEND_OK;  /* Clear pend  status                            */
   1359c:	008000b4 	movhi	r2,2
   135a0:	10b69b04 	addi	r2,r2,-9620
   135a4:	10800017 	ldw	r2,0(r2)
   135a8:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;    /* Clear event pointers                          */
   135ac:	008000b4 	movhi	r2,2
   135b0:	10b69b04 	addi	r2,r2,-9620
   135b4:	10800017 	ldw	r2,0(r2)
   135b8:	10000715 	stw	zero,28(r2)
#if (OS_EVENT_MULTI_EN > 0)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
   135bc:	008000b4 	movhi	r2,2
   135c0:	10b69b04 	addi	r2,r2,-9620
   135c4:	10800017 	ldw	r2,0(r2)
   135c8:	10000815 	stw	zero,32(r2)
   135cc:	e0bff717 	ldw	r2,-36(fp)
   135d0:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   135d4:	e0bffc17 	ldw	r2,-16(fp)
   135d8:	1001703a 	wrctl	status,r2
#endif
    OS_EXIT_CRITICAL();
}
   135dc:	e037883a 	mov	sp,fp
   135e0:	dfc00117 	ldw	ra,4(sp)
   135e4:	df000017 	ldw	fp,0(sp)
   135e8:	dec00204 	addi	sp,sp,8
   135ec:	f800283a 	ret

000135f0 <OSSemPendAbort>:
*********************************************************************************************************
*/

#if OS_SEM_PEND_ABORT_EN > 0
INT8U  OSSemPendAbort (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
   135f0:	defff604 	addi	sp,sp,-40
   135f4:	dfc00915 	stw	ra,36(sp)
   135f8:	df000815 	stw	fp,32(sp)
   135fc:	df000804 	addi	fp,sp,32
   13600:	e13ffd15 	stw	r4,-12(fp)
   13604:	2805883a 	mov	r2,r5
   13608:	e1bfff15 	stw	r6,-4(fp)
   1360c:	e0bffe05 	stb	r2,-8(fp)
    INT8U      nbr_tasks;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   13610:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
   13614:	e0bfff17 	ldw	r2,-4(fp)
   13618:	1000021e 	bne	r2,zero,13624 <OSSemPendAbort+0x34>
        return (0);
   1361c:	0005883a 	mov	r2,zero
   13620:	00004906 	br	13748 <OSSemPendAbort+0x158>
    }
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
   13624:	e0bffd17 	ldw	r2,-12(fp)
   13628:	1000051e 	bne	r2,zero,13640 <OSSemPendAbort+0x50>
        *perr = OS_ERR_PEVENT_NULL;
   1362c:	e0bfff17 	ldw	r2,-4(fp)
   13630:	00c00104 	movi	r3,4
   13634:	10c00005 	stb	r3,0(r2)
        return (0);
   13638:	0005883a 	mov	r2,zero
   1363c:	00004206 	br	13748 <OSSemPendAbort+0x158>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
   13640:	e0bffd17 	ldw	r2,-12(fp)
   13644:	10800003 	ldbu	r2,0(r2)
   13648:	10803fcc 	andi	r2,r2,255
   1364c:	108000e0 	cmpeqi	r2,r2,3
   13650:	1000051e 	bne	r2,zero,13668 <OSSemPendAbort+0x78>
        *perr = OS_ERR_EVENT_TYPE;
   13654:	e0bfff17 	ldw	r2,-4(fp)
   13658:	00c00044 	movi	r3,1
   1365c:	10c00005 	stb	r3,0(r2)
        return (0);
   13660:	0005883a 	mov	r2,zero
   13664:	00003806 	br	13748 <OSSemPendAbort+0x158>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   13668:	0005303a 	rdctl	r2,status
   1366c:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   13670:	e0fffa17 	ldw	r3,-24(fp)
   13674:	00bfff84 	movi	r2,-2
   13678:	1884703a 	and	r2,r3,r2
   1367c:	1001703a 	wrctl	status,r2
  
  return context;
   13680:	e0bffa17 	ldw	r2,-24(fp)
    }
    OS_ENTER_CRITICAL();
   13684:	e0bff915 	stw	r2,-28(fp)
    if (pevent->OSEventGrp != 0) {                    /* See if any task waiting on semaphore?         */
   13688:	e0bffd17 	ldw	r2,-12(fp)
   1368c:	10800283 	ldbu	r2,10(r2)
   13690:	10803fcc 	andi	r2,r2,255
   13694:	10002526 	beq	r2,zero,1372c <OSSemPendAbort+0x13c>
        nbr_tasks = 0;
   13698:	e03ff805 	stb	zero,-32(fp)
        switch (opt) {
   1369c:	e0bffe03 	ldbu	r2,-8(fp)
   136a0:	10800060 	cmpeqi	r2,r2,1
   136a4:	10000e26 	beq	r2,zero,136e0 <OSSemPendAbort+0xf0>
            case OS_PEND_OPT_BROADCAST:               /* Do we need to abort ALL waiting tasks?        */
                 while (pevent->OSEventGrp != 0) {    /* Yes, ready ALL tasks waiting on semaphore     */
   136a8:	00000806 	br	136cc <OSSemPendAbort+0xdc>
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_ABORT);
   136ac:	e13ffd17 	ldw	r4,-12(fp)
   136b0:	000b883a 	mov	r5,zero
   136b4:	01800044 	movi	r6,1
   136b8:	01c00084 	movi	r7,2
   136bc:	000eb440 	call	eb44 <OS_EventTaskRdy>
                     nbr_tasks++;
   136c0:	e0bff803 	ldbu	r2,-32(fp)
   136c4:	10800044 	addi	r2,r2,1
   136c8:	e0bff805 	stb	r2,-32(fp)
    OS_ENTER_CRITICAL();
    if (pevent->OSEventGrp != 0) {                    /* See if any task waiting on semaphore?         */
        nbr_tasks = 0;
        switch (opt) {
            case OS_PEND_OPT_BROADCAST:               /* Do we need to abort ALL waiting tasks?        */
                 while (pevent->OSEventGrp != 0) {    /* Yes, ready ALL tasks waiting on semaphore     */
   136cc:	e0bffd17 	ldw	r2,-12(fp)
   136d0:	10800283 	ldbu	r2,10(r2)
   136d4:	10803fcc 	andi	r2,r2,255
   136d8:	103ff41e 	bne	r2,zero,136ac <__alt_mem_Flash_flash_data+0xf40136ac>
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_ABORT);
                     nbr_tasks++;
                 }
                 break;
   136dc:	00000906 	br	13704 <OSSemPendAbort+0x114>
                 
            case OS_PEND_OPT_NONE:
            default:                                  /* No,  ready HPT       waiting on semaphore     */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_ABORT);
   136e0:	e13ffd17 	ldw	r4,-12(fp)
   136e4:	000b883a 	mov	r5,zero
   136e8:	01800044 	movi	r6,1
   136ec:	01c00084 	movi	r7,2
   136f0:	000eb440 	call	eb44 <OS_EventTaskRdy>
                 nbr_tasks++;
   136f4:	e0bff803 	ldbu	r2,-32(fp)
   136f8:	10800044 	addi	r2,r2,1
   136fc:	e0bff805 	stb	r2,-32(fp)
                 break;
   13700:	0001883a 	nop
   13704:	e0bff917 	ldw	r2,-28(fp)
   13708:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1370c:	e0bffb17 	ldw	r2,-20(fp)
   13710:	1001703a 	wrctl	status,r2
        }
        OS_EXIT_CRITICAL();
        OS_Sched();                                   /* Find HPT ready to run                         */
   13714:	000f55c0 	call	f55c <OS_Sched>
        *perr = OS_ERR_PEND_ABORT;
   13718:	e0bfff17 	ldw	r2,-4(fp)
   1371c:	00c00384 	movi	r3,14
   13720:	10c00005 	stb	r3,0(r2)
        return (nbr_tasks);
   13724:	e0bff803 	ldbu	r2,-32(fp)
   13728:	00000706 	br	13748 <OSSemPendAbort+0x158>
   1372c:	e0bff917 	ldw	r2,-28(fp)
   13730:	e0bffc15 	stw	r2,-16(fp)
   13734:	e0bffc17 	ldw	r2,-16(fp)
   13738:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
   1373c:	e0bfff17 	ldw	r2,-4(fp)
   13740:	10000005 	stb	zero,0(r2)
    return (0);                                       /* No tasks waiting on semaphore                 */
   13744:	0005883a 	mov	r2,zero
}
   13748:	e037883a 	mov	sp,fp
   1374c:	dfc00117 	ldw	ra,4(sp)
   13750:	df000017 	ldw	fp,0(sp)
   13754:	dec00204 	addi	sp,sp,8
   13758:	f800283a 	ret

0001375c <OSSemPost>:
*              OS_ERR_PEVENT_NULL  If 'pevent' is a NULL pointer.
*********************************************************************************************************
*/

INT8U  OSSemPost (OS_EVENT *pevent)
{
   1375c:	defff804 	addi	sp,sp,-32
   13760:	dfc00715 	stw	ra,28(sp)
   13764:	df000615 	stw	fp,24(sp)
   13768:	df000604 	addi	fp,sp,24
   1376c:	e13fff15 	stw	r4,-4(fp)
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   13770:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
   13774:	e0bfff17 	ldw	r2,-4(fp)
   13778:	1000021e 	bne	r2,zero,13784 <OSSemPost+0x28>
        return (OS_ERR_PEVENT_NULL);
   1377c:	00800104 	movi	r2,4
   13780:	00003506 	br	13858 <OSSemPost+0xfc>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
   13784:	e0bfff17 	ldw	r2,-4(fp)
   13788:	10800003 	ldbu	r2,0(r2)
   1378c:	10803fcc 	andi	r2,r2,255
   13790:	108000e0 	cmpeqi	r2,r2,3
   13794:	1000021e 	bne	r2,zero,137a0 <OSSemPost+0x44>
        return (OS_ERR_EVENT_TYPE);
   13798:	00800044 	movi	r2,1
   1379c:	00002e06 	br	13858 <OSSemPost+0xfc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   137a0:	0005303a 	rdctl	r2,status
   137a4:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   137a8:	e0fffb17 	ldw	r3,-20(fp)
   137ac:	00bfff84 	movi	r2,-2
   137b0:	1884703a 	and	r2,r3,r2
   137b4:	1001703a 	wrctl	status,r2
  
  return context;
   137b8:	e0bffb17 	ldw	r2,-20(fp)
    }
    OS_ENTER_CRITICAL();
   137bc:	e0bffa15 	stw	r2,-24(fp)
    if (pevent->OSEventGrp != 0) {                    /* See if any task waiting for semaphore         */
   137c0:	e0bfff17 	ldw	r2,-4(fp)
   137c4:	10800283 	ldbu	r2,10(r2)
   137c8:	10803fcc 	andi	r2,r2,255
   137cc:	10000c26 	beq	r2,zero,13800 <OSSemPost+0xa4>
                                                      /* Ready HPT waiting on event                    */
        (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_OK);
   137d0:	e13fff17 	ldw	r4,-4(fp)
   137d4:	000b883a 	mov	r5,zero
   137d8:	01800044 	movi	r6,1
   137dc:	000f883a 	mov	r7,zero
   137e0:	000eb440 	call	eb44 <OS_EventTaskRdy>
   137e4:	e0bffa17 	ldw	r2,-24(fp)
   137e8:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   137ec:	e0bffc17 	ldw	r2,-16(fp)
   137f0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                                   /* Find HPT ready to run                         */
   137f4:	000f55c0 	call	f55c <OS_Sched>
        return (OS_ERR_NONE);
   137f8:	0005883a 	mov	r2,zero
   137fc:	00001606 	br	13858 <OSSemPost+0xfc>
    }
    if (pevent->OSEventCnt < 65535u) {                /* Make sure semaphore will not overflow         */
   13800:	e0bfff17 	ldw	r2,-4(fp)
   13804:	1080020b 	ldhu	r2,8(r2)
   13808:	10ffffcc 	andi	r3,r2,65535
   1380c:	00bfffd4 	movui	r2,65535
   13810:	18800c26 	beq	r3,r2,13844 <OSSemPost+0xe8>
        pevent->OSEventCnt++;                         /* Increment semaphore count to register event   */
   13814:	e0bfff17 	ldw	r2,-4(fp)
   13818:	1080020b 	ldhu	r2,8(r2)
   1381c:	10800044 	addi	r2,r2,1
   13820:	1007883a 	mov	r3,r2
   13824:	e0bfff17 	ldw	r2,-4(fp)
   13828:	10c0020d 	sth	r3,8(r2)
   1382c:	e0bffa17 	ldw	r2,-24(fp)
   13830:	e0bffd15 	stw	r2,-12(fp)
   13834:	e0bffd17 	ldw	r2,-12(fp)
   13838:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_NONE);
   1383c:	0005883a 	mov	r2,zero
   13840:	00000506 	br	13858 <OSSemPost+0xfc>
   13844:	e0bffa17 	ldw	r2,-24(fp)
   13848:	e0bffe15 	stw	r2,-8(fp)
   1384c:	e0bffe17 	ldw	r2,-8(fp)
   13850:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();                               /* Semaphore value has reached its maximum       */
    return (OS_ERR_SEM_OVF);
   13854:	00800c84 	movi	r2,50
}
   13858:	e037883a 	mov	sp,fp
   1385c:	dfc00117 	ldw	ra,4(sp)
   13860:	df000017 	ldw	fp,0(sp)
   13864:	dec00204 	addi	sp,sp,8
   13868:	f800283a 	ret

0001386c <OSSemQuery>:
*********************************************************************************************************
*/

#if OS_SEM_QUERY_EN > 0
INT8U  OSSemQuery (OS_EVENT *pevent, OS_SEM_DATA *p_sem_data)
{
   1386c:	defff704 	addi	sp,sp,-36
   13870:	df000815 	stw	fp,32(sp)
   13874:	df000804 	addi	fp,sp,32
   13878:	e13ffe15 	stw	r4,-8(fp)
   1387c:	e17fff15 	stw	r5,-4(fp)
    INT16U    *psrc;
    INT16U    *pdest;
#endif
    INT8U      i;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
   13880:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
   13884:	e0bffe17 	ldw	r2,-8(fp)
   13888:	1000021e 	bne	r2,zero,13894 <OSSemQuery+0x28>
        return (OS_ERR_PEVENT_NULL);
   1388c:	00800104 	movi	r2,4
   13890:	00003606 	br	1396c <OSSemQuery+0x100>
    }
    if (p_sem_data == (OS_SEM_DATA *)0) {                  /* Validate 'p_sem_data'                    */
   13894:	e0bfff17 	ldw	r2,-4(fp)
   13898:	1000021e 	bne	r2,zero,138a4 <OSSemQuery+0x38>
        return (OS_ERR_PDATA_NULL);
   1389c:	00800244 	movi	r2,9
   138a0:	00003206 	br	1396c <OSSemQuery+0x100>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {        /* Validate event block type                */
   138a4:	e0bffe17 	ldw	r2,-8(fp)
   138a8:	10800003 	ldbu	r2,0(r2)
   138ac:	10803fcc 	andi	r2,r2,255
   138b0:	108000e0 	cmpeqi	r2,r2,3
   138b4:	1000021e 	bne	r2,zero,138c0 <OSSemQuery+0x54>
        return (OS_ERR_EVENT_TYPE);
   138b8:	00800044 	movi	r2,1
   138bc:	00002b06 	br	1396c <OSSemQuery+0x100>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   138c0:	0005303a 	rdctl	r2,status
   138c4:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   138c8:	e0fffc17 	ldw	r3,-16(fp)
   138cc:	00bfff84 	movi	r2,-2
   138d0:	1884703a 	and	r2,r3,r2
   138d4:	1001703a 	wrctl	status,r2
  
  return context;
   138d8:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
   138dc:	e0bffb15 	stw	r2,-20(fp)
    p_sem_data->OSEventGrp = pevent->OSEventGrp;           /* Copy message mailbox wait list           */
   138e0:	e0bffe17 	ldw	r2,-8(fp)
   138e4:	10c00283 	ldbu	r3,10(r2)
   138e8:	e0bfff17 	ldw	r2,-4(fp)
   138ec:	10c00145 	stb	r3,5(r2)
    psrc                   = &pevent->OSEventTbl[0];
   138f0:	e0bffe17 	ldw	r2,-8(fp)
   138f4:	108002c4 	addi	r2,r2,11
   138f8:	e0bff815 	stw	r2,-32(fp)
    pdest                  = &p_sem_data->OSEventTbl[0];
   138fc:	e0bfff17 	ldw	r2,-4(fp)
   13900:	10800084 	addi	r2,r2,2
   13904:	e0bff915 	stw	r2,-28(fp)
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
   13908:	e03ffa05 	stb	zero,-24(fp)
   1390c:	00000b06 	br	1393c <OSSemQuery+0xd0>
        *pdest++ = *psrc++;
   13910:	e0bff917 	ldw	r2,-28(fp)
   13914:	10c00044 	addi	r3,r2,1
   13918:	e0fff915 	stw	r3,-28(fp)
   1391c:	e0fff817 	ldw	r3,-32(fp)
   13920:	19000044 	addi	r4,r3,1
   13924:	e13ff815 	stw	r4,-32(fp)
   13928:	18c00003 	ldbu	r3,0(r3)
   1392c:	10c00005 	stb	r3,0(r2)
    }
    OS_ENTER_CRITICAL();
    p_sem_data->OSEventGrp = pevent->OSEventGrp;           /* Copy message mailbox wait list           */
    psrc                   = &pevent->OSEventTbl[0];
    pdest                  = &p_sem_data->OSEventTbl[0];
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
   13930:	e0bffa03 	ldbu	r2,-24(fp)
   13934:	10800044 	addi	r2,r2,1
   13938:	e0bffa05 	stb	r2,-24(fp)
   1393c:	e0bffa03 	ldbu	r2,-24(fp)
   13940:	108000f0 	cmpltui	r2,r2,3
   13944:	103ff21e 	bne	r2,zero,13910 <__alt_mem_Flash_flash_data+0xf4013910>
        *pdest++ = *psrc++;
    }
    p_sem_data->OSCnt = pevent->OSEventCnt;                /* Get semaphore count                      */
   13948:	e0bffe17 	ldw	r2,-8(fp)
   1394c:	10c0020b 	ldhu	r3,8(r2)
   13950:	e0bfff17 	ldw	r2,-4(fp)
   13954:	10c0000d 	sth	r3,0(r2)
   13958:	e0bffb17 	ldw	r2,-20(fp)
   1395c:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   13960:	e0bffd17 	ldw	r2,-12(fp)
   13964:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
   13968:	0005883a 	mov	r2,zero
}
   1396c:	e037883a 	mov	sp,fp
   13970:	df000017 	ldw	fp,0(sp)
   13974:	dec00104 	addi	sp,sp,4
   13978:	f800283a 	ret

0001397c <OSSemSet>:
*********************************************************************************************************
*/

#if OS_SEM_SET_EN > 0
void  OSSemSet (OS_EVENT *pevent, INT16U cnt, INT8U *perr)
{
   1397c:	defff904 	addi	sp,sp,-28
   13980:	df000615 	stw	fp,24(sp)
   13984:	df000604 	addi	fp,sp,24
   13988:	e13ffd15 	stw	r4,-12(fp)
   1398c:	2805883a 	mov	r2,r5
   13990:	e1bfff15 	stw	r6,-4(fp)
   13994:	e0bffe0d 	sth	r2,-8(fp)
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   13998:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
   1399c:	e0bfff17 	ldw	r2,-4(fp)
   139a0:	1000011e 	bne	r2,zero,139a8 <OSSemSet+0x2c>
        return;
   139a4:	00003006 	br	13a68 <OSSemSet+0xec>
    }
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
   139a8:	e0bffd17 	ldw	r2,-12(fp)
   139ac:	1000041e 	bne	r2,zero,139c0 <OSSemSet+0x44>
        *perr = OS_ERR_PEVENT_NULL;
   139b0:	e0bfff17 	ldw	r2,-4(fp)
   139b4:	00c00104 	movi	r3,4
   139b8:	10c00005 	stb	r3,0(r2)
        return;
   139bc:	00002a06 	br	13a68 <OSSemSet+0xec>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
   139c0:	e0bffd17 	ldw	r2,-12(fp)
   139c4:	10800003 	ldbu	r2,0(r2)
   139c8:	10803fcc 	andi	r2,r2,255
   139cc:	108000e0 	cmpeqi	r2,r2,3
   139d0:	1000041e 	bne	r2,zero,139e4 <OSSemSet+0x68>
        *perr = OS_ERR_EVENT_TYPE;
   139d4:	e0bfff17 	ldw	r2,-4(fp)
   139d8:	00c00044 	movi	r3,1
   139dc:	10c00005 	stb	r3,0(r2)
        return;
   139e0:	00002106 	br	13a68 <OSSemSet+0xec>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   139e4:	0005303a 	rdctl	r2,status
   139e8:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   139ec:	e0fffb17 	ldw	r3,-20(fp)
   139f0:	00bfff84 	movi	r2,-2
   139f4:	1884703a 	and	r2,r3,r2
   139f8:	1001703a 	wrctl	status,r2
  
  return context;
   139fc:	e0bffb17 	ldw	r2,-20(fp)
    }
    OS_ENTER_CRITICAL();
   13a00:	e0bffa15 	stw	r2,-24(fp)
    *perr = OS_ERR_NONE;
   13a04:	e0bfff17 	ldw	r2,-4(fp)
   13a08:	10000005 	stb	zero,0(r2)
    if (pevent->OSEventCnt > 0) {                     /* See if semaphore already has a count          */
   13a0c:	e0bffd17 	ldw	r2,-12(fp)
   13a10:	1080020b 	ldhu	r2,8(r2)
   13a14:	10bfffcc 	andi	r2,r2,65535
   13a18:	10000426 	beq	r2,zero,13a2c <OSSemSet+0xb0>
        pevent->OSEventCnt = cnt;                     /* Yes, set it to the new value specified.       */
   13a1c:	e0bffd17 	ldw	r2,-12(fp)
   13a20:	e0fffe0b 	ldhu	r3,-8(fp)
   13a24:	10c0020d 	sth	r3,8(r2)
   13a28:	00000b06 	br	13a58 <OSSemSet+0xdc>
    } else {                                          /* No                                            */
        if (pevent->OSEventGrp == 0) {                /*      See if task(s) waiting?                  */
   13a2c:	e0bffd17 	ldw	r2,-12(fp)
   13a30:	10800283 	ldbu	r2,10(r2)
   13a34:	10803fcc 	andi	r2,r2,255
   13a38:	1000041e 	bne	r2,zero,13a4c <OSSemSet+0xd0>
            pevent->OSEventCnt = cnt;                 /*      No, OK to set the value                  */
   13a3c:	e0bffd17 	ldw	r2,-12(fp)
   13a40:	e0fffe0b 	ldhu	r3,-8(fp)
   13a44:	10c0020d 	sth	r3,8(r2)
   13a48:	00000306 	br	13a58 <OSSemSet+0xdc>
        } else {
            *perr              = OS_ERR_TASK_WAITING;
   13a4c:	e0bfff17 	ldw	r2,-4(fp)
   13a50:	00c01244 	movi	r3,73
   13a54:	10c00005 	stb	r3,0(r2)
   13a58:	e0bffa17 	ldw	r2,-24(fp)
   13a5c:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   13a60:	e0bffc17 	ldw	r2,-16(fp)
   13a64:	1001703a 	wrctl	status,r2
        }
    }
    OS_EXIT_CRITICAL();
}
   13a68:	e037883a 	mov	sp,fp
   13a6c:	df000017 	ldw	fp,0(sp)
   13a70:	dec00104 	addi	sp,sp,4
   13a74:	f800283a 	ret

00013a78 <OSTaskChangePrio>:
*********************************************************************************************************
*/

#if OS_TASK_CHANGE_PRIO_EN > 0
INT8U  OSTaskChangePrio (INT8U oldprio, INT8U newprio)
{
   13a78:	defff104 	addi	sp,sp,-60
   13a7c:	dfc00e15 	stw	ra,56(sp)
   13a80:	df000d15 	stw	fp,52(sp)
   13a84:	df000d04 	addi	fp,sp,52
   13a88:	2007883a 	mov	r3,r4
   13a8c:	2805883a 	mov	r2,r5
   13a90:	e0fffe05 	stb	r3,-8(fp)
   13a94:	e0bfff05 	stb	r2,-4(fp)
    INT16U     bitx_new;
    INT16U     bity_old;
    INT16U     bitx_old;
#endif
#if OS_CRITICAL_METHOD == 3
    OS_CPU_SR  cpu_sr = 0;                                  /* Storage for CPU status register         */
   13a98:	e03ff515 	stw	zero,-44(fp)
#endif


/*$PAGE*/
#if OS_ARG_CHK_EN > 0
    if (oldprio >= OS_LOWEST_PRIO) {
   13a9c:	e0bffe03 	ldbu	r2,-8(fp)
   13aa0:	10800530 	cmpltui	r2,r2,20
   13aa4:	1000051e 	bne	r2,zero,13abc <OSTaskChangePrio+0x44>
        if (oldprio != OS_PRIO_SELF) {
   13aa8:	e0bffe03 	ldbu	r2,-8(fp)
   13aac:	10803fe0 	cmpeqi	r2,r2,255
   13ab0:	1000021e 	bne	r2,zero,13abc <OSTaskChangePrio+0x44>
            return (OS_ERR_PRIO_INVALID);
   13ab4:	00800a84 	movi	r2,42
   13ab8:	00013a06 	br	13fa4 <OSTaskChangePrio+0x52c>
        }
    }
    if (newprio >= OS_LOWEST_PRIO) {
   13abc:	e0bfff03 	ldbu	r2,-4(fp)
   13ac0:	10800530 	cmpltui	r2,r2,20
   13ac4:	1000021e 	bne	r2,zero,13ad0 <OSTaskChangePrio+0x58>
        return (OS_ERR_PRIO_INVALID);
   13ac8:	00800a84 	movi	r2,42
   13acc:	00013506 	br	13fa4 <OSTaskChangePrio+0x52c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   13ad0:	0005303a 	rdctl	r2,status
   13ad4:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   13ad8:	e0fff917 	ldw	r3,-28(fp)
   13adc:	00bfff84 	movi	r2,-2
   13ae0:	1884703a 	and	r2,r3,r2
   13ae4:	1001703a 	wrctl	status,r2
  
  return context;
   13ae8:	e0bff917 	ldw	r2,-28(fp)
    }
#endif
    OS_ENTER_CRITICAL();
   13aec:	e0bff515 	stw	r2,-44(fp)
    if (OSTCBPrioTbl[newprio] != (OS_TCB *)0) {             /* New priority must not already exist     */
   13af0:	e0ffff03 	ldbu	r3,-4(fp)
   13af4:	008000b4 	movhi	r2,2
   13af8:	109b2204 	addi	r2,r2,27784
   13afc:	18c7883a 	add	r3,r3,r3
   13b00:	18c7883a 	add	r3,r3,r3
   13b04:	10c5883a 	add	r2,r2,r3
   13b08:	10800017 	ldw	r2,0(r2)
   13b0c:	10000626 	beq	r2,zero,13b28 <OSTaskChangePrio+0xb0>
   13b10:	e0bff517 	ldw	r2,-44(fp)
   13b14:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   13b18:	e0bffa17 	ldw	r2,-24(fp)
   13b1c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_PRIO_EXIST);
   13b20:	00800a04 	movi	r2,40
   13b24:	00011f06 	br	13fa4 <OSTaskChangePrio+0x52c>
    }
    if (oldprio == OS_PRIO_SELF) {                          /* See if changing self                    */
   13b28:	e0bffe03 	ldbu	r2,-8(fp)
   13b2c:	10803fd8 	cmpnei	r2,r2,255
   13b30:	1000051e 	bne	r2,zero,13b48 <OSTaskChangePrio+0xd0>
        oldprio = OSTCBCur->OSTCBPrio;                      /* Yes, get priority                       */
   13b34:	008000b4 	movhi	r2,2
   13b38:	10b69b04 	addi	r2,r2,-9620
   13b3c:	10800017 	ldw	r2,0(r2)
   13b40:	10800c83 	ldbu	r2,50(r2)
   13b44:	e0bffe05 	stb	r2,-8(fp)
    }
    ptcb = OSTCBPrioTbl[oldprio];
   13b48:	e0fffe03 	ldbu	r3,-8(fp)
   13b4c:	008000b4 	movhi	r2,2
   13b50:	109b2204 	addi	r2,r2,27784
   13b54:	18c7883a 	add	r3,r3,r3
   13b58:	18c7883a 	add	r3,r3,r3
   13b5c:	10c5883a 	add	r2,r2,r3
   13b60:	10800017 	ldw	r2,0(r2)
   13b64:	e0bff615 	stw	r2,-40(fp)
    if (ptcb == (OS_TCB *)0) {                              /* Does task to change exist?              */
   13b68:	e0bff617 	ldw	r2,-40(fp)
   13b6c:	1000061e 	bne	r2,zero,13b88 <OSTaskChangePrio+0x110>
   13b70:	e0bff517 	ldw	r2,-44(fp)
   13b74:	e0bffb15 	stw	r2,-20(fp)
   13b78:	e0bffb17 	ldw	r2,-20(fp)
   13b7c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                                 /* No, can't change its priority!          */
        return (OS_ERR_PRIO);
   13b80:	00800a44 	movi	r2,41
   13b84:	00010706 	br	13fa4 <OSTaskChangePrio+0x52c>
    }
    if (ptcb == OS_TCB_RESERVED) {                          /* Is task assigned to Mutex               */
   13b88:	e0bff617 	ldw	r2,-40(fp)
   13b8c:	10800058 	cmpnei	r2,r2,1
   13b90:	1000061e 	bne	r2,zero,13bac <OSTaskChangePrio+0x134>
   13b94:	e0bff517 	ldw	r2,-44(fp)
   13b98:	e0bffc15 	stw	r2,-16(fp)
   13b9c:	e0bffc17 	ldw	r2,-16(fp)
   13ba0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                                 /* No, can't change its priority!          */
        return (OS_ERR_TASK_NOT_EXIST);
   13ba4:	008010c4 	movi	r2,67
   13ba8:	0000fe06 	br	13fa4 <OSTaskChangePrio+0x52c>
    }
#if OS_LOWEST_PRIO <= 63
    y_new                 = (INT8U)(newprio >> 3);          /* Yes, compute new TCB fields             */
   13bac:	e0bfff03 	ldbu	r2,-4(fp)
   13bb0:	1004d0fa 	srli	r2,r2,3
   13bb4:	e0bff705 	stb	r2,-36(fp)
    x_new                 = (INT8U)(newprio & 0x07);
   13bb8:	e0bfff03 	ldbu	r2,-4(fp)
   13bbc:	108001cc 	andi	r2,r2,7
   13bc0:	e0bff745 	stb	r2,-35(fp)
    bity_new              = (INT8U)(1 << y_new);
   13bc4:	e0bff703 	ldbu	r2,-36(fp)
   13bc8:	00c00044 	movi	r3,1
   13bcc:	1884983a 	sll	r2,r3,r2
   13bd0:	e0bff785 	stb	r2,-34(fp)
    bitx_new              = (INT8U)(1 << x_new);
   13bd4:	e0bff743 	ldbu	r2,-35(fp)
   13bd8:	00c00044 	movi	r3,1
   13bdc:	1884983a 	sll	r2,r3,r2
   13be0:	e0bff7c5 	stb	r2,-33(fp)
    x_new                 = (INT8U)( newprio & 0x0F);
    bity_new              = (INT16U)(1 << y_new);
    bitx_new              = (INT16U)(1 << x_new);
#endif

    OSTCBPrioTbl[oldprio] = (OS_TCB *)0;                    /* Remove TCB from old priority            */
   13be4:	e0fffe03 	ldbu	r3,-8(fp)
   13be8:	008000b4 	movhi	r2,2
   13bec:	109b2204 	addi	r2,r2,27784
   13bf0:	18c7883a 	add	r3,r3,r3
   13bf4:	18c7883a 	add	r3,r3,r3
   13bf8:	10c5883a 	add	r2,r2,r3
   13bfc:	10000015 	stw	zero,0(r2)
    OSTCBPrioTbl[newprio] =  ptcb;                          /* Place pointer to TCB @ new priority     */
   13c00:	e0ffff03 	ldbu	r3,-4(fp)
   13c04:	008000b4 	movhi	r2,2
   13c08:	109b2204 	addi	r2,r2,27784
   13c0c:	18c7883a 	add	r3,r3,r3
   13c10:	18c7883a 	add	r3,r3,r3
   13c14:	10c5883a 	add	r2,r2,r3
   13c18:	e0fff617 	ldw	r3,-40(fp)
   13c1c:	10c00015 	stw	r3,0(r2)
    y_old                 =  ptcb->OSTCBY;
   13c20:	e0bff617 	ldw	r2,-40(fp)
   13c24:	10800d03 	ldbu	r2,52(r2)
   13c28:	e0bff805 	stb	r2,-32(fp)
    bity_old              =  ptcb->OSTCBBitY;
   13c2c:	e0bff617 	ldw	r2,-40(fp)
   13c30:	10800d83 	ldbu	r2,54(r2)
   13c34:	e0bff845 	stb	r2,-31(fp)
    bitx_old              =  ptcb->OSTCBBitX;
   13c38:	e0bff617 	ldw	r2,-40(fp)
   13c3c:	10800d43 	ldbu	r2,53(r2)
   13c40:	e0bff885 	stb	r2,-30(fp)
    if ((OSRdyTbl[y_old] &   bitx_old) != 0) {              /* If task is ready make it not            */
   13c44:	e0fff803 	ldbu	r3,-32(fp)
   13c48:	008000b4 	movhi	r2,2
   13c4c:	10b69844 	addi	r2,r2,-9631
   13c50:	10c5883a 	add	r2,r2,r3
   13c54:	10c00003 	ldbu	r3,0(r2)
   13c58:	e0bff883 	ldbu	r2,-30(fp)
   13c5c:	1884703a 	and	r2,r3,r2
   13c60:	10803fcc 	andi	r2,r2,255
   13c64:	10003726 	beq	r2,zero,13d44 <OSTaskChangePrio+0x2cc>
         OSRdyTbl[y_old] &= ~bitx_old;
   13c68:	e0fff803 	ldbu	r3,-32(fp)
   13c6c:	e13ff803 	ldbu	r4,-32(fp)
   13c70:	008000b4 	movhi	r2,2
   13c74:	10b69844 	addi	r2,r2,-9631
   13c78:	1105883a 	add	r2,r2,r4
   13c7c:	10800003 	ldbu	r2,0(r2)
   13c80:	1009883a 	mov	r4,r2
   13c84:	e0bff883 	ldbu	r2,-30(fp)
   13c88:	0084303a 	nor	r2,zero,r2
   13c8c:	2084703a 	and	r2,r4,r2
   13c90:	1009883a 	mov	r4,r2
   13c94:	008000b4 	movhi	r2,2
   13c98:	10b69844 	addi	r2,r2,-9631
   13c9c:	10c5883a 	add	r2,r2,r3
   13ca0:	11000005 	stb	r4,0(r2)
         if (OSRdyTbl[y_old] == 0) {
   13ca4:	e0fff803 	ldbu	r3,-32(fp)
   13ca8:	008000b4 	movhi	r2,2
   13cac:	10b69844 	addi	r2,r2,-9631
   13cb0:	10c5883a 	add	r2,r2,r3
   13cb4:	10800003 	ldbu	r2,0(r2)
   13cb8:	10803fcc 	andi	r2,r2,255
   13cbc:	10000b1e 	bne	r2,zero,13cec <OSTaskChangePrio+0x274>
             OSRdyGrp &= ~bity_old;
   13cc0:	e0bff843 	ldbu	r2,-31(fp)
   13cc4:	0084303a 	nor	r2,zero,r2
   13cc8:	1007883a 	mov	r3,r2
   13ccc:	008000b4 	movhi	r2,2
   13cd0:	10b69804 	addi	r2,r2,-9632
   13cd4:	10800003 	ldbu	r2,0(r2)
   13cd8:	1884703a 	and	r2,r3,r2
   13cdc:	1007883a 	mov	r3,r2
   13ce0:	008000b4 	movhi	r2,2
   13ce4:	10b69804 	addi	r2,r2,-9632
   13ce8:	10c00005 	stb	r3,0(r2)
         }
         OSRdyGrp        |= bity_new;                       /* Make new priority ready to run          */
   13cec:	008000b4 	movhi	r2,2
   13cf0:	10b69804 	addi	r2,r2,-9632
   13cf4:	10c00003 	ldbu	r3,0(r2)
   13cf8:	e0bff783 	ldbu	r2,-34(fp)
   13cfc:	1884b03a 	or	r2,r3,r2
   13d00:	1007883a 	mov	r3,r2
   13d04:	008000b4 	movhi	r2,2
   13d08:	10b69804 	addi	r2,r2,-9632
   13d0c:	10c00005 	stb	r3,0(r2)
         OSRdyTbl[y_new] |= bitx_new;
   13d10:	e0fff703 	ldbu	r3,-36(fp)
   13d14:	e13ff703 	ldbu	r4,-36(fp)
   13d18:	008000b4 	movhi	r2,2
   13d1c:	10b69844 	addi	r2,r2,-9631
   13d20:	1105883a 	add	r2,r2,r4
   13d24:	11000003 	ldbu	r4,0(r2)
   13d28:	e0bff7c3 	ldbu	r2,-33(fp)
   13d2c:	2084b03a 	or	r2,r4,r2
   13d30:	1009883a 	mov	r4,r2
   13d34:	008000b4 	movhi	r2,2
   13d38:	10b69844 	addi	r2,r2,-9631
   13d3c:	10c5883a 	add	r2,r2,r3
   13d40:	11000005 	stb	r4,0(r2)
    }

#if (OS_EVENT_EN)
    pevent = ptcb->OSTCBEventPtr;
   13d44:	e0bff617 	ldw	r2,-40(fp)
   13d48:	10800717 	ldw	r2,28(r2)
   13d4c:	e0bff315 	stw	r2,-52(fp)
    if (pevent != (OS_EVENT *)0) {
   13d50:	e0bff317 	ldw	r2,-52(fp)
   13d54:	10003326 	beq	r2,zero,13e24 <OSTaskChangePrio+0x3ac>
        pevent->OSEventTbl[y_old] &= ~bitx_old;             /* Remove old task prio from wait list     */
   13d58:	e0bff803 	ldbu	r2,-32(fp)
   13d5c:	e0fff803 	ldbu	r3,-32(fp)
   13d60:	e13ff317 	ldw	r4,-52(fp)
   13d64:	20c7883a 	add	r3,r4,r3
   13d68:	18c00204 	addi	r3,r3,8
   13d6c:	18c000c3 	ldbu	r3,3(r3)
   13d70:	1809883a 	mov	r4,r3
   13d74:	e0fff883 	ldbu	r3,-30(fp)
   13d78:	00c6303a 	nor	r3,zero,r3
   13d7c:	20c6703a 	and	r3,r4,r3
   13d80:	1809883a 	mov	r4,r3
   13d84:	e0fff317 	ldw	r3,-52(fp)
   13d88:	1885883a 	add	r2,r3,r2
   13d8c:	10800204 	addi	r2,r2,8
   13d90:	110000c5 	stb	r4,3(r2)
        if (pevent->OSEventTbl[y_old] == 0) {
   13d94:	e0bff803 	ldbu	r2,-32(fp)
   13d98:	e0fff317 	ldw	r3,-52(fp)
   13d9c:	1885883a 	add	r2,r3,r2
   13da0:	10800204 	addi	r2,r2,8
   13da4:	108000c3 	ldbu	r2,3(r2)
   13da8:	10803fcc 	andi	r2,r2,255
   13dac:	1000091e 	bne	r2,zero,13dd4 <OSTaskChangePrio+0x35c>
            pevent->OSEventGrp    &= ~bity_old;
   13db0:	e0bff317 	ldw	r2,-52(fp)
   13db4:	10800283 	ldbu	r2,10(r2)
   13db8:	1007883a 	mov	r3,r2
   13dbc:	e0bff843 	ldbu	r2,-31(fp)
   13dc0:	0084303a 	nor	r2,zero,r2
   13dc4:	1884703a 	and	r2,r3,r2
   13dc8:	1007883a 	mov	r3,r2
   13dcc:	e0bff317 	ldw	r2,-52(fp)
   13dd0:	10c00285 	stb	r3,10(r2)
        }
        pevent->OSEventGrp        |= bity_new;              /* Add    new task prio to   wait list     */
   13dd4:	e0bff317 	ldw	r2,-52(fp)
   13dd8:	10c00283 	ldbu	r3,10(r2)
   13ddc:	e0bff783 	ldbu	r2,-34(fp)
   13de0:	1884b03a 	or	r2,r3,r2
   13de4:	1007883a 	mov	r3,r2
   13de8:	e0bff317 	ldw	r2,-52(fp)
   13dec:	10c00285 	stb	r3,10(r2)
        pevent->OSEventTbl[y_new] |= bitx_new;
   13df0:	e0bff703 	ldbu	r2,-36(fp)
   13df4:	e0fff703 	ldbu	r3,-36(fp)
   13df8:	e13ff317 	ldw	r4,-52(fp)
   13dfc:	20c7883a 	add	r3,r4,r3
   13e00:	18c00204 	addi	r3,r3,8
   13e04:	190000c3 	ldbu	r4,3(r3)
   13e08:	e0fff7c3 	ldbu	r3,-33(fp)
   13e0c:	20c6b03a 	or	r3,r4,r3
   13e10:	1809883a 	mov	r4,r3
   13e14:	e0fff317 	ldw	r3,-52(fp)
   13e18:	1885883a 	add	r2,r3,r2
   13e1c:	10800204 	addi	r2,r2,8
   13e20:	110000c5 	stb	r4,3(r2)
    }
#if (OS_EVENT_MULTI_EN > 0)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {
   13e24:	e0bff617 	ldw	r2,-40(fp)
   13e28:	10800817 	ldw	r2,32(r2)
   13e2c:	10004226 	beq	r2,zero,13f38 <OSTaskChangePrio+0x4c0>
        pevents =  ptcb->OSTCBEventMultiPtr;
   13e30:	e0bff617 	ldw	r2,-40(fp)
   13e34:	10800817 	ldw	r2,32(r2)
   13e38:	e0bff415 	stw	r2,-48(fp)
        pevent  = *pevents;
   13e3c:	e0bff417 	ldw	r2,-48(fp)
   13e40:	10800017 	ldw	r2,0(r2)
   13e44:	e0bff315 	stw	r2,-52(fp)
        while (pevent != (OS_EVENT *)0) {
   13e48:	00003906 	br	13f30 <OSTaskChangePrio+0x4b8>
            pevent->OSEventTbl[y_old] &= ~bitx_old;         /* Remove old task prio from wait lists    */
   13e4c:	e0bff803 	ldbu	r2,-32(fp)
   13e50:	e0fff803 	ldbu	r3,-32(fp)
   13e54:	e13ff317 	ldw	r4,-52(fp)
   13e58:	20c7883a 	add	r3,r4,r3
   13e5c:	18c00204 	addi	r3,r3,8
   13e60:	18c000c3 	ldbu	r3,3(r3)
   13e64:	1809883a 	mov	r4,r3
   13e68:	e0fff883 	ldbu	r3,-30(fp)
   13e6c:	00c6303a 	nor	r3,zero,r3
   13e70:	20c6703a 	and	r3,r4,r3
   13e74:	1809883a 	mov	r4,r3
   13e78:	e0fff317 	ldw	r3,-52(fp)
   13e7c:	1885883a 	add	r2,r3,r2
   13e80:	10800204 	addi	r2,r2,8
   13e84:	110000c5 	stb	r4,3(r2)
            if (pevent->OSEventTbl[y_old] == 0) {
   13e88:	e0bff803 	ldbu	r2,-32(fp)
   13e8c:	e0fff317 	ldw	r3,-52(fp)
   13e90:	1885883a 	add	r2,r3,r2
   13e94:	10800204 	addi	r2,r2,8
   13e98:	108000c3 	ldbu	r2,3(r2)
   13e9c:	10803fcc 	andi	r2,r2,255
   13ea0:	1000091e 	bne	r2,zero,13ec8 <OSTaskChangePrio+0x450>
                pevent->OSEventGrp    &= ~bity_old;
   13ea4:	e0bff317 	ldw	r2,-52(fp)
   13ea8:	10800283 	ldbu	r2,10(r2)
   13eac:	1007883a 	mov	r3,r2
   13eb0:	e0bff843 	ldbu	r2,-31(fp)
   13eb4:	0084303a 	nor	r2,zero,r2
   13eb8:	1884703a 	and	r2,r3,r2
   13ebc:	1007883a 	mov	r3,r2
   13ec0:	e0bff317 	ldw	r2,-52(fp)
   13ec4:	10c00285 	stb	r3,10(r2)
            }
            pevent->OSEventGrp        |= bity_new;          /* Add    new task prio to   wait lists    */
   13ec8:	e0bff317 	ldw	r2,-52(fp)
   13ecc:	10c00283 	ldbu	r3,10(r2)
   13ed0:	e0bff783 	ldbu	r2,-34(fp)
   13ed4:	1884b03a 	or	r2,r3,r2
   13ed8:	1007883a 	mov	r3,r2
   13edc:	e0bff317 	ldw	r2,-52(fp)
   13ee0:	10c00285 	stb	r3,10(r2)
            pevent->OSEventTbl[y_new] |= bitx_new;
   13ee4:	e0bff703 	ldbu	r2,-36(fp)
   13ee8:	e0fff703 	ldbu	r3,-36(fp)
   13eec:	e13ff317 	ldw	r4,-52(fp)
   13ef0:	20c7883a 	add	r3,r4,r3
   13ef4:	18c00204 	addi	r3,r3,8
   13ef8:	190000c3 	ldbu	r4,3(r3)
   13efc:	e0fff7c3 	ldbu	r3,-33(fp)
   13f00:	20c6b03a 	or	r3,r4,r3
   13f04:	1809883a 	mov	r4,r3
   13f08:	e0fff317 	ldw	r3,-52(fp)
   13f0c:	1885883a 	add	r2,r3,r2
   13f10:	10800204 	addi	r2,r2,8
   13f14:	110000c5 	stb	r4,3(r2)
            pevents++;
   13f18:	e0bff417 	ldw	r2,-48(fp)
   13f1c:	10800104 	addi	r2,r2,4
   13f20:	e0bff415 	stw	r2,-48(fp)
            pevent                     = *pevents;
   13f24:	e0bff417 	ldw	r2,-48(fp)
   13f28:	10800017 	ldw	r2,0(r2)
   13f2c:	e0bff315 	stw	r2,-52(fp)
    }
#if (OS_EVENT_MULTI_EN > 0)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {
        pevents =  ptcb->OSTCBEventMultiPtr;
        pevent  = *pevents;
        while (pevent != (OS_EVENT *)0) {
   13f30:	e0bff317 	ldw	r2,-52(fp)
   13f34:	103fc51e 	bne	r2,zero,13e4c <__alt_mem_Flash_flash_data+0xf4013e4c>
        }
    }
#endif
#endif

    ptcb->OSTCBPrio = newprio;                              /* Set new task priority                   */
   13f38:	e0bff617 	ldw	r2,-40(fp)
   13f3c:	e0ffff03 	ldbu	r3,-4(fp)
   13f40:	10c00c85 	stb	r3,50(r2)
    ptcb->OSTCBY    = y_new;
   13f44:	e0bff617 	ldw	r2,-40(fp)
   13f48:	e0fff703 	ldbu	r3,-36(fp)
   13f4c:	10c00d05 	stb	r3,52(r2)
    ptcb->OSTCBX    = x_new;
   13f50:	e0bff617 	ldw	r2,-40(fp)
   13f54:	e0fff743 	ldbu	r3,-35(fp)
   13f58:	10c00cc5 	stb	r3,51(r2)
    ptcb->OSTCBBitY = bity_new;
   13f5c:	e0bff617 	ldw	r2,-40(fp)
   13f60:	e0fff783 	ldbu	r3,-34(fp)
   13f64:	10c00d85 	stb	r3,54(r2)
    ptcb->OSTCBBitX = bitx_new;
   13f68:	e0bff617 	ldw	r2,-40(fp)
   13f6c:	e0fff7c3 	ldbu	r3,-33(fp)
   13f70:	10c00d45 	stb	r3,53(r2)
   13f74:	e0bff517 	ldw	r2,-44(fp)
   13f78:	e0bffd15 	stw	r2,-12(fp)
   13f7c:	e0bffd17 	ldw	r2,-12(fp)
   13f80:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    if (OSRunning == OS_TRUE) {
   13f84:	008000b4 	movhi	r2,2
   13f88:	10b68c44 	addi	r2,r2,-9679
   13f8c:	10800003 	ldbu	r2,0(r2)
   13f90:	10803fcc 	andi	r2,r2,255
   13f94:	10800058 	cmpnei	r2,r2,1
   13f98:	1000011e 	bne	r2,zero,13fa0 <OSTaskChangePrio+0x528>
        OS_Sched();                                         /* Find new highest priority task          */
   13f9c:	000f55c0 	call	f55c <OS_Sched>
    }
    return (OS_ERR_NONE);
   13fa0:	0005883a 	mov	r2,zero
}
   13fa4:	e037883a 	mov	sp,fp
   13fa8:	dfc00117 	ldw	ra,4(sp)
   13fac:	df000017 	ldw	fp,0(sp)
   13fb0:	dec00204 	addi	sp,sp,8
   13fb4:	f800283a 	ret

00013fb8 <OSTaskCreate>:
*********************************************************************************************************
*/

#if OS_TASK_CREATE_EN > 0
INT8U  OSTaskCreate (void (*task)(void *p_arg), void *p_arg, OS_STK *ptos, INT8U prio)
{
   13fb8:	deffee04 	addi	sp,sp,-72
   13fbc:	dfc01115 	stw	ra,68(sp)
   13fc0:	df001015 	stw	fp,64(sp)
   13fc4:	df001004 	addi	fp,sp,64
   13fc8:	e13ffc15 	stw	r4,-16(fp)
   13fcc:	e17ffd15 	stw	r5,-12(fp)
   13fd0:	e1bffe15 	stw	r6,-8(fp)
   13fd4:	3805883a 	mov	r2,r7
   13fd8:	e0bfff05 	stb	r2,-4(fp)
    OS_STK    *psp;
    INT8U      err;
#if OS_CRITICAL_METHOD == 3                  /* Allocate storage for CPU status register               */
    OS_CPU_SR  cpu_sr = 0;
   13fdc:	e03ff315 	stw	zero,-52(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio > OS_LOWEST_PRIO) {             /* Make sure priority is within allowable range           */
   13fe0:	e0bfff03 	ldbu	r2,-4(fp)
   13fe4:	10800570 	cmpltui	r2,r2,21
   13fe8:	1000021e 	bne	r2,zero,13ff4 <OSTaskCreate+0x3c>
        return (OS_ERR_PRIO_INVALID);
   13fec:	00800a84 	movi	r2,42
   13ff0:	00005b06 	br	14160 <OSTaskCreate+0x1a8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   13ff4:	0005303a 	rdctl	r2,status
   13ff8:	e0bff615 	stw	r2,-40(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   13ffc:	e0fff617 	ldw	r3,-40(fp)
   14000:	00bfff84 	movi	r2,-2
   14004:	1884703a 	and	r2,r3,r2
   14008:	1001703a 	wrctl	status,r2
  
  return context;
   1400c:	e0bff617 	ldw	r2,-40(fp)
    }
#endif
    OS_ENTER_CRITICAL();
   14010:	e0bff315 	stw	r2,-52(fp)
    if (OSIntNesting > 0) {                  /* Make sure we don't create the task from within an ISR  */
   14014:	008000b4 	movhi	r2,2
   14018:	10b69a04 	addi	r2,r2,-9624
   1401c:	10800003 	ldbu	r2,0(r2)
   14020:	10803fcc 	andi	r2,r2,255
   14024:	10000626 	beq	r2,zero,14040 <OSTaskCreate+0x88>
   14028:	e0bff317 	ldw	r2,-52(fp)
   1402c:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   14030:	e0bff717 	ldw	r2,-36(fp)
   14034:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_CREATE_ISR);
   14038:	00800f04 	movi	r2,60
   1403c:	00004806 	br	14160 <OSTaskCreate+0x1a8>
    }
    if (OSTCBPrioTbl[prio] == (OS_TCB *)0) { /* Make sure task doesn't already exist at this priority  */
   14040:	e0ffff03 	ldbu	r3,-4(fp)
   14044:	008000b4 	movhi	r2,2
   14048:	109b2204 	addi	r2,r2,27784
   1404c:	18c7883a 	add	r3,r3,r3
   14050:	18c7883a 	add	r3,r3,r3
   14054:	10c5883a 	add	r2,r2,r3
   14058:	10800017 	ldw	r2,0(r2)
   1405c:	10003b1e 	bne	r2,zero,1414c <OSTaskCreate+0x194>
        OSTCBPrioTbl[prio] = OS_TCB_RESERVED;/* Reserve the priority to prevent others from doing ...  */
   14060:	e0ffff03 	ldbu	r3,-4(fp)
   14064:	008000b4 	movhi	r2,2
   14068:	109b2204 	addi	r2,r2,27784
   1406c:	18c7883a 	add	r3,r3,r3
   14070:	18c7883a 	add	r3,r3,r3
   14074:	10c5883a 	add	r2,r2,r3
   14078:	00c00044 	movi	r3,1
   1407c:	10c00015 	stw	r3,0(r2)
   14080:	e0bff317 	ldw	r2,-52(fp)
   14084:	e0bff815 	stw	r2,-32(fp)
   14088:	e0bff817 	ldw	r2,-32(fp)
   1408c:	1001703a 	wrctl	status,r2
                                             /* ... the same thing until task is created.              */
        OS_EXIT_CRITICAL();
        psp = OSTaskStkInit(task, p_arg, ptos, 0);              /* Initialize the task's stack         */
   14090:	e13ffc17 	ldw	r4,-16(fp)
   14094:	e17ffd17 	ldw	r5,-12(fp)
   14098:	e1bffe17 	ldw	r6,-8(fp)
   1409c:	000f883a 	mov	r7,zero
   140a0:	0018cac0 	call	18cac <OSTaskStkInit>
   140a4:	e0bff415 	stw	r2,-48(fp)
        err = OS_TCBInit(prio, psp, (OS_STK *)0, 0, 0, (void *)0, 0);
   140a8:	e0bfff03 	ldbu	r2,-4(fp)
   140ac:	d8000015 	stw	zero,0(sp)
   140b0:	d8000115 	stw	zero,4(sp)
   140b4:	d8000215 	stw	zero,8(sp)
   140b8:	1009883a 	mov	r4,r2
   140bc:	e17ff417 	ldw	r5,-48(fp)
   140c0:	000d883a 	mov	r6,zero
   140c4:	000f883a 	mov	r7,zero
   140c8:	000f9600 	call	f960 <OS_TCBInit>
   140cc:	e0bff505 	stb	r2,-44(fp)
        if (err == OS_ERR_NONE) {
   140d0:	e0bff503 	ldbu	r2,-44(fp)
   140d4:	1000081e 	bne	r2,zero,140f8 <OSTaskCreate+0x140>
            if (OSRunning == OS_TRUE) {      /* Find highest priority task if multitasking has started */
   140d8:	008000b4 	movhi	r2,2
   140dc:	10b68c44 	addi	r2,r2,-9679
   140e0:	10800003 	ldbu	r2,0(r2)
   140e4:	10803fcc 	andi	r2,r2,255
   140e8:	10800058 	cmpnei	r2,r2,1
   140ec:	1000151e 	bne	r2,zero,14144 <OSTaskCreate+0x18c>
                OS_Sched();
   140f0:	000f55c0 	call	f55c <OS_Sched>
   140f4:	00001306 	br	14144 <OSTaskCreate+0x18c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   140f8:	0005303a 	rdctl	r2,status
   140fc:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   14100:	e0fff917 	ldw	r3,-28(fp)
   14104:	00bfff84 	movi	r2,-2
   14108:	1884703a 	and	r2,r3,r2
   1410c:	1001703a 	wrctl	status,r2
  
  return context;
   14110:	e0bff917 	ldw	r2,-28(fp)
            }
        } else {
            OS_ENTER_CRITICAL();
   14114:	e0bff315 	stw	r2,-52(fp)
            OSTCBPrioTbl[prio] = (OS_TCB *)0;/* Make this priority available to others                 */
   14118:	e0ffff03 	ldbu	r3,-4(fp)
   1411c:	008000b4 	movhi	r2,2
   14120:	109b2204 	addi	r2,r2,27784
   14124:	18c7883a 	add	r3,r3,r3
   14128:	18c7883a 	add	r3,r3,r3
   1412c:	10c5883a 	add	r2,r2,r3
   14130:	10000015 	stw	zero,0(r2)
   14134:	e0bff317 	ldw	r2,-52(fp)
   14138:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1413c:	e0bffa17 	ldw	r2,-24(fp)
   14140:	1001703a 	wrctl	status,r2
            OS_EXIT_CRITICAL();
        }
        return (err);
   14144:	e0bff503 	ldbu	r2,-44(fp)
   14148:	00000506 	br	14160 <OSTaskCreate+0x1a8>
   1414c:	e0bff317 	ldw	r2,-52(fp)
   14150:	e0bffb15 	stw	r2,-20(fp)
   14154:	e0bffb17 	ldw	r2,-20(fp)
   14158:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_PRIO_EXIST);
   1415c:	00800a04 	movi	r2,40
}
   14160:	e037883a 	mov	sp,fp
   14164:	dfc00117 	ldw	ra,4(sp)
   14168:	df000017 	ldw	fp,0(sp)
   1416c:	dec00204 	addi	sp,sp,8
   14170:	f800283a 	ret

00014174 <OSTaskCreateExt>:
                        INT16U   id,
                        OS_STK  *pbos,
                        INT32U   stk_size,
                        void    *pext,
                        INT16U   opt)
{
   14174:	deffec04 	addi	sp,sp,-80
   14178:	dfc01315 	stw	ra,76(sp)
   1417c:	df001215 	stw	fp,72(sp)
   14180:	df001204 	addi	fp,sp,72
   14184:	e13ffa15 	stw	r4,-24(fp)
   14188:	e17ffb15 	stw	r5,-20(fp)
   1418c:	e1bffc15 	stw	r6,-16(fp)
   14190:	3809883a 	mov	r4,r7
   14194:	e0c00217 	ldw	r3,8(fp)
   14198:	e0800617 	ldw	r2,24(fp)
   1419c:	e13ffd05 	stb	r4,-12(fp)
   141a0:	e0fffe0d 	sth	r3,-8(fp)
   141a4:	e0bfff0d 	sth	r2,-4(fp)
    OS_STK    *psp;
    INT8U      err;
#if OS_CRITICAL_METHOD == 3                  /* Allocate storage for CPU status register               */
    OS_CPU_SR  cpu_sr = 0;
   141a8:	e03ff115 	stw	zero,-60(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio > OS_LOWEST_PRIO) {             /* Make sure priority is within allowable range           */
   141ac:	e0bffd03 	ldbu	r2,-12(fp)
   141b0:	10800570 	cmpltui	r2,r2,21
   141b4:	1000021e 	bne	r2,zero,141c0 <OSTaskCreateExt+0x4c>
        return (OS_ERR_PRIO_INVALID);
   141b8:	00800a84 	movi	r2,42
   141bc:	00006306 	br	1434c <OSTaskCreateExt+0x1d8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   141c0:	0005303a 	rdctl	r2,status
   141c4:	e0bff415 	stw	r2,-48(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   141c8:	e0fff417 	ldw	r3,-48(fp)
   141cc:	00bfff84 	movi	r2,-2
   141d0:	1884703a 	and	r2,r3,r2
   141d4:	1001703a 	wrctl	status,r2
  
  return context;
   141d8:	e0bff417 	ldw	r2,-48(fp)
    }
#endif
    OS_ENTER_CRITICAL();
   141dc:	e0bff115 	stw	r2,-60(fp)
    if (OSIntNesting > 0) {                  /* Make sure we don't create the task from within an ISR  */
   141e0:	008000b4 	movhi	r2,2
   141e4:	10b69a04 	addi	r2,r2,-9624
   141e8:	10800003 	ldbu	r2,0(r2)
   141ec:	10803fcc 	andi	r2,r2,255
   141f0:	10000626 	beq	r2,zero,1420c <OSTaskCreateExt+0x98>
   141f4:	e0bff117 	ldw	r2,-60(fp)
   141f8:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   141fc:	e0bff517 	ldw	r2,-44(fp)
   14200:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_CREATE_ISR);
   14204:	00800f04 	movi	r2,60
   14208:	00005006 	br	1434c <OSTaskCreateExt+0x1d8>
    }
    if (OSTCBPrioTbl[prio] == (OS_TCB *)0) { /* Make sure task doesn't already exist at this priority  */
   1420c:	e0fffd03 	ldbu	r3,-12(fp)
   14210:	008000b4 	movhi	r2,2
   14214:	109b2204 	addi	r2,r2,27784
   14218:	18c7883a 	add	r3,r3,r3
   1421c:	18c7883a 	add	r3,r3,r3
   14220:	10c5883a 	add	r2,r2,r3
   14224:	10800017 	ldw	r2,0(r2)
   14228:	1000431e 	bne	r2,zero,14338 <OSTaskCreateExt+0x1c4>
        OSTCBPrioTbl[prio] = OS_TCB_RESERVED;/* Reserve the priority to prevent others from doing ...  */
   1422c:	e0fffd03 	ldbu	r3,-12(fp)
   14230:	008000b4 	movhi	r2,2
   14234:	109b2204 	addi	r2,r2,27784
   14238:	18c7883a 	add	r3,r3,r3
   1423c:	18c7883a 	add	r3,r3,r3
   14240:	10c5883a 	add	r2,r2,r3
   14244:	00c00044 	movi	r3,1
   14248:	10c00015 	stw	r3,0(r2)
   1424c:	e0bff117 	ldw	r2,-60(fp)
   14250:	e0bff615 	stw	r2,-40(fp)
   14254:	e0bff617 	ldw	r2,-40(fp)
   14258:	1001703a 	wrctl	status,r2
                                             /* ... the same thing until task is created.              */
        OS_EXIT_CRITICAL();

#if (OS_TASK_STAT_STK_CHK_EN > 0)
        OS_TaskStkClr(pbos, stk_size, opt);                    /* Clear the task stack (if needed)     */
   1425c:	e0bfff0b 	ldhu	r2,-4(fp)
   14260:	e1000317 	ldw	r4,12(fp)
   14264:	e1400417 	ldw	r5,16(fp)
   14268:	100d883a 	mov	r6,r2
   1426c:	00153000 	call	15300 <OS_TaskStkClr>
#endif

        psp = OSTaskStkInit(task, p_arg, ptos, opt);           /* Initialize the task's stack          */
   14270:	e0bfff0b 	ldhu	r2,-4(fp)
   14274:	e13ffa17 	ldw	r4,-24(fp)
   14278:	e17ffb17 	ldw	r5,-20(fp)
   1427c:	e1bffc17 	ldw	r6,-16(fp)
   14280:	100f883a 	mov	r7,r2
   14284:	0018cac0 	call	18cac <OSTaskStkInit>
   14288:	e0bff215 	stw	r2,-56(fp)
        err = OS_TCBInit(prio, psp, pbos, id, stk_size, pext, opt);
   1428c:	e13ffd03 	ldbu	r4,-12(fp)
   14290:	e1fffe0b 	ldhu	r7,-8(fp)
   14294:	e0bfff0b 	ldhu	r2,-4(fp)
   14298:	e0c00417 	ldw	r3,16(fp)
   1429c:	d8c00015 	stw	r3,0(sp)
   142a0:	e0c00517 	ldw	r3,20(fp)
   142a4:	d8c00115 	stw	r3,4(sp)
   142a8:	d8800215 	stw	r2,8(sp)
   142ac:	e17ff217 	ldw	r5,-56(fp)
   142b0:	e1800317 	ldw	r6,12(fp)
   142b4:	000f9600 	call	f960 <OS_TCBInit>
   142b8:	e0bff305 	stb	r2,-52(fp)
        if (err == OS_ERR_NONE) {
   142bc:	e0bff303 	ldbu	r2,-52(fp)
   142c0:	1000081e 	bne	r2,zero,142e4 <OSTaskCreateExt+0x170>
            if (OSRunning == OS_TRUE) {                        /* Find HPT if multitasking has started */
   142c4:	008000b4 	movhi	r2,2
   142c8:	10b68c44 	addi	r2,r2,-9679
   142cc:	10800003 	ldbu	r2,0(r2)
   142d0:	10803fcc 	andi	r2,r2,255
   142d4:	10800058 	cmpnei	r2,r2,1
   142d8:	1000151e 	bne	r2,zero,14330 <OSTaskCreateExt+0x1bc>
                OS_Sched();
   142dc:	000f55c0 	call	f55c <OS_Sched>
   142e0:	00001306 	br	14330 <OSTaskCreateExt+0x1bc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   142e4:	0005303a 	rdctl	r2,status
   142e8:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   142ec:	e0fff717 	ldw	r3,-36(fp)
   142f0:	00bfff84 	movi	r2,-2
   142f4:	1884703a 	and	r2,r3,r2
   142f8:	1001703a 	wrctl	status,r2
  
  return context;
   142fc:	e0bff717 	ldw	r2,-36(fp)
            }
        } else {
            OS_ENTER_CRITICAL();
   14300:	e0bff115 	stw	r2,-60(fp)
            OSTCBPrioTbl[prio] = (OS_TCB *)0;                  /* Make this priority avail. to others  */
   14304:	e0fffd03 	ldbu	r3,-12(fp)
   14308:	008000b4 	movhi	r2,2
   1430c:	109b2204 	addi	r2,r2,27784
   14310:	18c7883a 	add	r3,r3,r3
   14314:	18c7883a 	add	r3,r3,r3
   14318:	10c5883a 	add	r2,r2,r3
   1431c:	10000015 	stw	zero,0(r2)
   14320:	e0bff117 	ldw	r2,-60(fp)
   14324:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   14328:	e0bff817 	ldw	r2,-32(fp)
   1432c:	1001703a 	wrctl	status,r2
            OS_EXIT_CRITICAL();
        }
        return (err);
   14330:	e0bff303 	ldbu	r2,-52(fp)
   14334:	00000506 	br	1434c <OSTaskCreateExt+0x1d8>
   14338:	e0bff117 	ldw	r2,-60(fp)
   1433c:	e0bff915 	stw	r2,-28(fp)
   14340:	e0bff917 	ldw	r2,-28(fp)
   14344:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_PRIO_EXIST);
   14348:	00800a04 	movi	r2,40
}
   1434c:	e037883a 	mov	sp,fp
   14350:	dfc00117 	ldw	ra,4(sp)
   14354:	df000017 	ldw	fp,0(sp)
   14358:	dec00204 	addi	sp,sp,8
   1435c:	f800283a 	ret

00014360 <OSTaskDel>:
*********************************************************************************************************
*/

#if OS_TASK_DEL_EN > 0
INT8U  OSTaskDel (INT8U prio)
{
   14360:	defff404 	addi	sp,sp,-48
   14364:	dfc00b15 	stw	ra,44(sp)
   14368:	df000a15 	stw	fp,40(sp)
   1436c:	df000a04 	addi	fp,sp,40
   14370:	2005883a 	mov	r2,r4
   14374:	e0bfff05 	stb	r2,-4(fp)
#if (OS_FLAG_EN > 0) && (OS_MAX_FLAGS > 0)
    OS_FLAG_NODE *pnode;
#endif
    OS_TCB       *ptcb;
#if OS_CRITICAL_METHOD == 3                             /* Allocate storage for CPU status register    */
    OS_CPU_SR     cpu_sr = 0;
   14378:	e03ff615 	stw	zero,-40(fp)
#endif



    if (OSIntNesting > 0) {                             /* See if trying to delete from ISR            */
   1437c:	008000b4 	movhi	r2,2
   14380:	10b69a04 	addi	r2,r2,-9624
   14384:	10800003 	ldbu	r2,0(r2)
   14388:	10803fcc 	andi	r2,r2,255
   1438c:	10000226 	beq	r2,zero,14398 <OSTaskDel+0x38>
        return (OS_ERR_TASK_DEL_ISR);
   14390:	00801004 	movi	r2,64
   14394:	0000e506 	br	1472c <OSTaskDel+0x3cc>
    }
    if (prio == OS_TASK_IDLE_PRIO) {                    /* Not allowed to delete idle task             */
   14398:	e0bfff03 	ldbu	r2,-4(fp)
   1439c:	10800518 	cmpnei	r2,r2,20
   143a0:	1000021e 	bne	r2,zero,143ac <OSTaskDel+0x4c>
        return (OS_ERR_TASK_DEL_IDLE);
   143a4:	00800f84 	movi	r2,62
   143a8:	0000e006 	br	1472c <OSTaskDel+0x3cc>
    }
#if OS_ARG_CHK_EN > 0
    if (prio >= OS_LOWEST_PRIO) {                       /* Task priority valid ?                       */
   143ac:	e0bfff03 	ldbu	r2,-4(fp)
   143b0:	10800530 	cmpltui	r2,r2,20
   143b4:	1000051e 	bne	r2,zero,143cc <OSTaskDel+0x6c>
        if (prio != OS_PRIO_SELF) {
   143b8:	e0bfff03 	ldbu	r2,-4(fp)
   143bc:	10803fe0 	cmpeqi	r2,r2,255
   143c0:	1000021e 	bne	r2,zero,143cc <OSTaskDel+0x6c>
            return (OS_ERR_PRIO_INVALID);
   143c4:	00800a84 	movi	r2,42
   143c8:	0000d806 	br	1472c <OSTaskDel+0x3cc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   143cc:	0005303a 	rdctl	r2,status
   143d0:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   143d4:	e0fff917 	ldw	r3,-28(fp)
   143d8:	00bfff84 	movi	r2,-2
   143dc:	1884703a 	and	r2,r3,r2
   143e0:	1001703a 	wrctl	status,r2
  
  return context;
   143e4:	e0bff917 	ldw	r2,-28(fp)
        }
    }
#endif

/*$PAGE*/
    OS_ENTER_CRITICAL();
   143e8:	e0bff615 	stw	r2,-40(fp)
    if (prio == OS_PRIO_SELF) {                         /* See if requesting to delete self            */
   143ec:	e0bfff03 	ldbu	r2,-4(fp)
   143f0:	10803fd8 	cmpnei	r2,r2,255
   143f4:	1000051e 	bne	r2,zero,1440c <OSTaskDel+0xac>
        prio = OSTCBCur->OSTCBPrio;                     /* Set priority to delete to current           */
   143f8:	008000b4 	movhi	r2,2
   143fc:	10b69b04 	addi	r2,r2,-9620
   14400:	10800017 	ldw	r2,0(r2)
   14404:	10800c83 	ldbu	r2,50(r2)
   14408:	e0bfff05 	stb	r2,-4(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
   1440c:	e0ffff03 	ldbu	r3,-4(fp)
   14410:	008000b4 	movhi	r2,2
   14414:	109b2204 	addi	r2,r2,27784
   14418:	18c7883a 	add	r3,r3,r3
   1441c:	18c7883a 	add	r3,r3,r3
   14420:	10c5883a 	add	r2,r2,r3
   14424:	10800017 	ldw	r2,0(r2)
   14428:	e0bff715 	stw	r2,-36(fp)
    if (ptcb == (OS_TCB *)0) {                          /* Task to delete must exist                   */
   1442c:	e0bff717 	ldw	r2,-36(fp)
   14430:	1000061e 	bne	r2,zero,1444c <OSTaskDel+0xec>
   14434:	e0bff617 	ldw	r2,-40(fp)
   14438:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1443c:	e0bffa17 	ldw	r2,-24(fp)
   14440:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
   14444:	008010c4 	movi	r2,67
   14448:	0000b806 	br	1472c <OSTaskDel+0x3cc>
    }
    if (ptcb == OS_TCB_RESERVED) {                      /* Must not be assigned to Mutex               */
   1444c:	e0bff717 	ldw	r2,-36(fp)
   14450:	10800058 	cmpnei	r2,r2,1
   14454:	1000061e 	bne	r2,zero,14470 <OSTaskDel+0x110>
   14458:	e0bff617 	ldw	r2,-40(fp)
   1445c:	e0bffb15 	stw	r2,-20(fp)
   14460:	e0bffb17 	ldw	r2,-20(fp)
   14464:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_DEL);
   14468:	00800f44 	movi	r2,61
   1446c:	0000af06 	br	1472c <OSTaskDel+0x3cc>
    }

    OSRdyTbl[ptcb->OSTCBY] &= ~ptcb->OSTCBBitX;
   14470:	e0bff717 	ldw	r2,-36(fp)
   14474:	10800d03 	ldbu	r2,52(r2)
   14478:	10c03fcc 	andi	r3,r2,255
   1447c:	e0bff717 	ldw	r2,-36(fp)
   14480:	10800d03 	ldbu	r2,52(r2)
   14484:	11003fcc 	andi	r4,r2,255
   14488:	008000b4 	movhi	r2,2
   1448c:	10b69844 	addi	r2,r2,-9631
   14490:	1105883a 	add	r2,r2,r4
   14494:	10800003 	ldbu	r2,0(r2)
   14498:	1009883a 	mov	r4,r2
   1449c:	e0bff717 	ldw	r2,-36(fp)
   144a0:	10800d43 	ldbu	r2,53(r2)
   144a4:	0084303a 	nor	r2,zero,r2
   144a8:	2084703a 	and	r2,r4,r2
   144ac:	1009883a 	mov	r4,r2
   144b0:	008000b4 	movhi	r2,2
   144b4:	10b69844 	addi	r2,r2,-9631
   144b8:	10c5883a 	add	r2,r2,r3
   144bc:	11000005 	stb	r4,0(r2)
    if (OSRdyTbl[ptcb->OSTCBY] == 0) {                  /* Make task not ready                         */
   144c0:	e0bff717 	ldw	r2,-36(fp)
   144c4:	10800d03 	ldbu	r2,52(r2)
   144c8:	10c03fcc 	andi	r3,r2,255
   144cc:	008000b4 	movhi	r2,2
   144d0:	10b69844 	addi	r2,r2,-9631
   144d4:	10c5883a 	add	r2,r2,r3
   144d8:	10800003 	ldbu	r2,0(r2)
   144dc:	10803fcc 	andi	r2,r2,255
   144e0:	10000c1e 	bne	r2,zero,14514 <OSTaskDel+0x1b4>
        OSRdyGrp           &= ~ptcb->OSTCBBitY;
   144e4:	e0bff717 	ldw	r2,-36(fp)
   144e8:	10800d83 	ldbu	r2,54(r2)
   144ec:	0084303a 	nor	r2,zero,r2
   144f0:	1007883a 	mov	r3,r2
   144f4:	008000b4 	movhi	r2,2
   144f8:	10b69804 	addi	r2,r2,-9632
   144fc:	10800003 	ldbu	r2,0(r2)
   14500:	1884703a 	and	r2,r3,r2
   14504:	1007883a 	mov	r3,r2
   14508:	008000b4 	movhi	r2,2
   1450c:	10b69804 	addi	r2,r2,-9632
   14510:	10c00005 	stb	r3,0(r2)
    }
    
#if (OS_EVENT_EN)
    if (ptcb->OSTCBEventPtr != (OS_EVENT *)0) {
   14514:	e0bff717 	ldw	r2,-36(fp)
   14518:	10800717 	ldw	r2,28(r2)
   1451c:	10000526 	beq	r2,zero,14534 <OSTaskDel+0x1d4>
        OS_EventTaskRemove(ptcb, ptcb->OSTCBEventPtr);  /* Remove this task from any event   wait list */
   14520:	e0bff717 	ldw	r2,-36(fp)
   14524:	10800717 	ldw	r2,28(r2)
   14528:	e13ff717 	ldw	r4,-36(fp)
   1452c:	100b883a 	mov	r5,r2
   14530:	000ef340 	call	ef34 <OS_EventTaskRemove>
    }
#if (OS_EVENT_MULTI_EN > 0)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {   /* Remove this task from any events' wait lists*/
   14534:	e0bff717 	ldw	r2,-36(fp)
   14538:	10800817 	ldw	r2,32(r2)
   1453c:	10000526 	beq	r2,zero,14554 <OSTaskDel+0x1f4>
        OS_EventTaskRemoveMulti(ptcb, ptcb->OSTCBEventMultiPtr);
   14540:	e0bff717 	ldw	r2,-36(fp)
   14544:	10800817 	ldw	r2,32(r2)
   14548:	e13ff717 	ldw	r4,-36(fp)
   1454c:	100b883a 	mov	r5,r2
   14550:	000efe80 	call	efe8 <OS_EventTaskRemoveMulti>
    }
#endif
#endif

#if (OS_FLAG_EN > 0) && (OS_MAX_FLAGS > 0)
    pnode = ptcb->OSTCBFlagNode;
   14554:	e0bff717 	ldw	r2,-36(fp)
   14558:	10800a17 	ldw	r2,40(r2)
   1455c:	e0bff815 	stw	r2,-32(fp)
    if (pnode != (OS_FLAG_NODE *)0) {                   /* If task is waiting on event flag            */
   14560:	e0bff817 	ldw	r2,-32(fp)
   14564:	10000226 	beq	r2,zero,14570 <OSTaskDel+0x210>
        OS_FlagUnlink(pnode);                           /* Remove from wait list                       */
   14568:	e13ff817 	ldw	r4,-32(fp)
   1456c:	001153c0 	call	1153c <OS_FlagUnlink>
    }
#endif

    ptcb->OSTCBDly      = 0;                            /* Prevent OSTimeTick() from updating          */
   14570:	e0bff717 	ldw	r2,-36(fp)
   14574:	10000b8d 	sth	zero,46(r2)
    ptcb->OSTCBStat     = OS_STAT_RDY;                  /* Prevent task from being resumed             */
   14578:	e0bff717 	ldw	r2,-36(fp)
   1457c:	10000c05 	stb	zero,48(r2)
    ptcb->OSTCBStatPend = OS_STAT_PEND_OK;
   14580:	e0bff717 	ldw	r2,-36(fp)
   14584:	10000c45 	stb	zero,49(r2)
    if (OSLockNesting < 255u) {                         /* Make sure we don't context switch           */
   14588:	008000b4 	movhi	r2,2
   1458c:	10b68c04 	addi	r2,r2,-9680
   14590:	10800003 	ldbu	r2,0(r2)
   14594:	10803fcc 	andi	r2,r2,255
   14598:	10803fe0 	cmpeqi	r2,r2,255
   1459c:	1000081e 	bne	r2,zero,145c0 <OSTaskDel+0x260>
        OSLockNesting++;
   145a0:	008000b4 	movhi	r2,2
   145a4:	10b68c04 	addi	r2,r2,-9680
   145a8:	10800003 	ldbu	r2,0(r2)
   145ac:	10800044 	addi	r2,r2,1
   145b0:	1007883a 	mov	r3,r2
   145b4:	008000b4 	movhi	r2,2
   145b8:	10b68c04 	addi	r2,r2,-9680
   145bc:	10c00005 	stb	r3,0(r2)
   145c0:	e0bff617 	ldw	r2,-40(fp)
   145c4:	e0bffc15 	stw	r2,-16(fp)
   145c8:	e0bffc17 	ldw	r2,-16(fp)
   145cc:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();                                 /* Enabling INT. ignores next instruc.         */
    OS_Dummy();                                         /* ... Dummy ensures that INTs will be         */
   145d0:	000eb280 	call	eb28 <OS_Dummy>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   145d4:	0005303a 	rdctl	r2,status
   145d8:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   145dc:	e0fffd17 	ldw	r3,-12(fp)
   145e0:	00bfff84 	movi	r2,-2
   145e4:	1884703a 	and	r2,r3,r2
   145e8:	1001703a 	wrctl	status,r2
  
  return context;
   145ec:	e0bffd17 	ldw	r2,-12(fp)
    OS_ENTER_CRITICAL();                                /* ... disabled HERE!                          */
   145f0:	e0bff615 	stw	r2,-40(fp)
    if (OSLockNesting > 0) {                            /* Remove context switch lock                  */
   145f4:	008000b4 	movhi	r2,2
   145f8:	10b68c04 	addi	r2,r2,-9680
   145fc:	10800003 	ldbu	r2,0(r2)
   14600:	10803fcc 	andi	r2,r2,255
   14604:	10000826 	beq	r2,zero,14628 <OSTaskDel+0x2c8>
        OSLockNesting--;
   14608:	008000b4 	movhi	r2,2
   1460c:	10b68c04 	addi	r2,r2,-9680
   14610:	10800003 	ldbu	r2,0(r2)
   14614:	10bfffc4 	addi	r2,r2,-1
   14618:	1007883a 	mov	r3,r2
   1461c:	008000b4 	movhi	r2,2
   14620:	10b68c04 	addi	r2,r2,-9680
   14624:	10c00005 	stb	r3,0(r2)
    }
    OSTaskDelHook(ptcb);                                /* Call user defined hook                      */
   14628:	e13ff717 	ldw	r4,-36(fp)
   1462c:	0018e280 	call	18e28 <OSTaskDelHook>
    OSTaskCtr--;                                        /* One less task being managed                 */
   14630:	008000b4 	movhi	r2,2
   14634:	10b69444 	addi	r2,r2,-9647
   14638:	10800003 	ldbu	r2,0(r2)
   1463c:	10bfffc4 	addi	r2,r2,-1
   14640:	1007883a 	mov	r3,r2
   14644:	008000b4 	movhi	r2,2
   14648:	10b69444 	addi	r2,r2,-9647
   1464c:	10c00005 	stb	r3,0(r2)
    OSTCBPrioTbl[prio] = (OS_TCB *)0;                   /* Clear old priority entry                    */
   14650:	e0ffff03 	ldbu	r3,-4(fp)
   14654:	008000b4 	movhi	r2,2
   14658:	109b2204 	addi	r2,r2,27784
   1465c:	18c7883a 	add	r3,r3,r3
   14660:	18c7883a 	add	r3,r3,r3
   14664:	10c5883a 	add	r2,r2,r3
   14668:	10000015 	stw	zero,0(r2)
    if (ptcb->OSTCBPrev == (OS_TCB *)0) {               /* Remove from TCB chain                       */
   1466c:	e0bff717 	ldw	r2,-36(fp)
   14670:	10800617 	ldw	r2,24(r2)
   14674:	1000091e 	bne	r2,zero,1469c <OSTaskDel+0x33c>
        ptcb->OSTCBNext->OSTCBPrev = (OS_TCB *)0;
   14678:	e0bff717 	ldw	r2,-36(fp)
   1467c:	10800517 	ldw	r2,20(r2)
   14680:	10000615 	stw	zero,24(r2)
        OSTCBList                  = ptcb->OSTCBNext;
   14684:	e0bff717 	ldw	r2,-36(fp)
   14688:	10c00517 	ldw	r3,20(r2)
   1468c:	008000b4 	movhi	r2,2
   14690:	10b68f04 	addi	r2,r2,-9668
   14694:	10c00015 	stw	r3,0(r2)
   14698:	00000a06 	br	146c4 <OSTaskDel+0x364>
    } else {
        ptcb->OSTCBPrev->OSTCBNext = ptcb->OSTCBNext;
   1469c:	e0bff717 	ldw	r2,-36(fp)
   146a0:	10800617 	ldw	r2,24(r2)
   146a4:	e0fff717 	ldw	r3,-36(fp)
   146a8:	18c00517 	ldw	r3,20(r3)
   146ac:	10c00515 	stw	r3,20(r2)
        ptcb->OSTCBNext->OSTCBPrev = ptcb->OSTCBPrev;
   146b0:	e0bff717 	ldw	r2,-36(fp)
   146b4:	10800517 	ldw	r2,20(r2)
   146b8:	e0fff717 	ldw	r3,-36(fp)
   146bc:	18c00617 	ldw	r3,24(r3)
   146c0:	10c00615 	stw	r3,24(r2)
    }
    ptcb->OSTCBNext   = OSTCBFreeList;                  /* Return TCB to free TCB list                 */
   146c4:	008000b4 	movhi	r2,2
   146c8:	10b69304 	addi	r2,r2,-9652
   146cc:	10c00017 	ldw	r3,0(r2)
   146d0:	e0bff717 	ldw	r2,-36(fp)
   146d4:	10c00515 	stw	r3,20(r2)
    OSTCBFreeList     = ptcb;
   146d8:	008000b4 	movhi	r2,2
   146dc:	10b69304 	addi	r2,r2,-9652
   146e0:	e0fff717 	ldw	r3,-36(fp)
   146e4:	10c00015 	stw	r3,0(r2)
#if OS_TASK_NAME_SIZE > 1
    ptcb->OSTCBTaskName[0] = '?';                       /* Unknown name                                */
   146e8:	e0bff717 	ldw	r2,-36(fp)
   146ec:	00c00fc4 	movi	r3,63
   146f0:	10c01305 	stb	r3,76(r2)
    ptcb->OSTCBTaskName[1] = OS_ASCII_NUL;
   146f4:	e0bff717 	ldw	r2,-36(fp)
   146f8:	10001345 	stb	zero,77(r2)
   146fc:	e0bff617 	ldw	r2,-40(fp)
   14700:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   14704:	e0bffe17 	ldw	r2,-8(fp)
   14708:	1001703a 	wrctl	status,r2
#endif
    OS_EXIT_CRITICAL();
    if (OSRunning == OS_TRUE) {
   1470c:	008000b4 	movhi	r2,2
   14710:	10b68c44 	addi	r2,r2,-9679
   14714:	10800003 	ldbu	r2,0(r2)
   14718:	10803fcc 	andi	r2,r2,255
   1471c:	10800058 	cmpnei	r2,r2,1
   14720:	1000011e 	bne	r2,zero,14728 <OSTaskDel+0x3c8>
        OS_Sched();                                     /* Find new highest priority task              */
   14724:	000f55c0 	call	f55c <OS_Sched>
    }
    return (OS_ERR_NONE);
   14728:	0005883a 	mov	r2,zero
}
   1472c:	e037883a 	mov	sp,fp
   14730:	dfc00117 	ldw	ra,4(sp)
   14734:	df000017 	ldw	fp,0(sp)
   14738:	dec00204 	addi	sp,sp,8
   1473c:	f800283a 	ret

00014740 <OSTaskDelReq>:
*********************************************************************************************************
*/
/*$PAGE*/
#if OS_TASK_DEL_EN > 0
INT8U  OSTaskDelReq (INT8U prio)
{
   14740:	defff504 	addi	sp,sp,-44
   14744:	df000a15 	stw	fp,40(sp)
   14748:	df000a04 	addi	fp,sp,40
   1474c:	2005883a 	mov	r2,r4
   14750:	e0bfff05 	stb	r2,-4(fp)
    INT8U      stat;
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   14754:	e03ff615 	stw	zero,-40(fp)
#endif



    if (prio == OS_TASK_IDLE_PRIO) {                            /* Not allowed to delete idle task     */
   14758:	e0bfff03 	ldbu	r2,-4(fp)
   1475c:	10800518 	cmpnei	r2,r2,20
   14760:	1000021e 	bne	r2,zero,1476c <OSTaskDelReq+0x2c>
        return (OS_ERR_TASK_DEL_IDLE);
   14764:	00800f84 	movi	r2,62
   14768:	00004706 	br	14888 <OSTaskDelReq+0x148>
    }
#if OS_ARG_CHK_EN > 0
    if (prio >= OS_LOWEST_PRIO) {                               /* Task priority valid ?               */
   1476c:	e0bfff03 	ldbu	r2,-4(fp)
   14770:	10800530 	cmpltui	r2,r2,20
   14774:	1000051e 	bne	r2,zero,1478c <OSTaskDelReq+0x4c>
        if (prio != OS_PRIO_SELF) {
   14778:	e0bfff03 	ldbu	r2,-4(fp)
   1477c:	10803fe0 	cmpeqi	r2,r2,255
   14780:	1000021e 	bne	r2,zero,1478c <OSTaskDelReq+0x4c>
            return (OS_ERR_PRIO_INVALID);
   14784:	00800a84 	movi	r2,42
   14788:	00003f06 	br	14888 <OSTaskDelReq+0x148>
        }
    }
#endif
    if (prio == OS_PRIO_SELF) {                                 /* See if a task is requesting to ...  */
   1478c:	e0bfff03 	ldbu	r2,-4(fp)
   14790:	10803fd8 	cmpnei	r2,r2,255
   14794:	1000131e 	bne	r2,zero,147e4 <OSTaskDelReq+0xa4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   14798:	0005303a 	rdctl	r2,status
   1479c:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   147a0:	e0fff917 	ldw	r3,-28(fp)
   147a4:	00bfff84 	movi	r2,-2
   147a8:	1884703a 	and	r2,r3,r2
   147ac:	1001703a 	wrctl	status,r2
  
  return context;
   147b0:	e0bff917 	ldw	r2,-28(fp)
        OS_ENTER_CRITICAL();                                    /* ... this task to delete itself      */
   147b4:	e0bff615 	stw	r2,-40(fp)
        stat = OSTCBCur->OSTCBDelReq;                           /* Return request status to caller     */
   147b8:	008000b4 	movhi	r2,2
   147bc:	10b69b04 	addi	r2,r2,-9620
   147c0:	10800017 	ldw	r2,0(r2)
   147c4:	10800dc3 	ldbu	r2,55(r2)
   147c8:	e0bff705 	stb	r2,-36(fp)
   147cc:	e0bff617 	ldw	r2,-40(fp)
   147d0:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   147d4:	e0bffa17 	ldw	r2,-24(fp)
   147d8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (stat);
   147dc:	e0bff703 	ldbu	r2,-36(fp)
   147e0:	00002906 	br	14888 <OSTaskDelReq+0x148>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   147e4:	0005303a 	rdctl	r2,status
   147e8:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   147ec:	e0fffb17 	ldw	r3,-20(fp)
   147f0:	00bfff84 	movi	r2,-2
   147f4:	1884703a 	and	r2,r3,r2
   147f8:	1001703a 	wrctl	status,r2
  
  return context;
   147fc:	e0bffb17 	ldw	r2,-20(fp)
    }
    OS_ENTER_CRITICAL();
   14800:	e0bff615 	stw	r2,-40(fp)
    ptcb = OSTCBPrioTbl[prio];
   14804:	e0ffff03 	ldbu	r3,-4(fp)
   14808:	008000b4 	movhi	r2,2
   1480c:	109b2204 	addi	r2,r2,27784
   14810:	18c7883a 	add	r3,r3,r3
   14814:	18c7883a 	add	r3,r3,r3
   14818:	10c5883a 	add	r2,r2,r3
   1481c:	10800017 	ldw	r2,0(r2)
   14820:	e0bff815 	stw	r2,-32(fp)
    if (ptcb == (OS_TCB *)0) {                                  /* Task to delete must exist           */
   14824:	e0bff817 	ldw	r2,-32(fp)
   14828:	1000061e 	bne	r2,zero,14844 <OSTaskDelReq+0x104>
   1482c:	e0bff617 	ldw	r2,-40(fp)
   14830:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   14834:	e0bffc17 	ldw	r2,-16(fp)
   14838:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);                         /* Task must already be deleted        */
   1483c:	008010c4 	movi	r2,67
   14840:	00001106 	br	14888 <OSTaskDelReq+0x148>
    }
    if (ptcb == OS_TCB_RESERVED) {                              /* Must NOT be assigned to a Mutex     */
   14844:	e0bff817 	ldw	r2,-32(fp)
   14848:	10800058 	cmpnei	r2,r2,1
   1484c:	1000061e 	bne	r2,zero,14868 <OSTaskDelReq+0x128>
   14850:	e0bff617 	ldw	r2,-40(fp)
   14854:	e0bffd15 	stw	r2,-12(fp)
   14858:	e0bffd17 	ldw	r2,-12(fp)
   1485c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_DEL);
   14860:	00800f44 	movi	r2,61
   14864:	00000806 	br	14888 <OSTaskDelReq+0x148>
    }
    ptcb->OSTCBDelReq = OS_ERR_TASK_DEL_REQ;                    /* Set flag indicating task to be DEL. */
   14868:	e0bff817 	ldw	r2,-32(fp)
   1486c:	00c00fc4 	movi	r3,63
   14870:	10c00dc5 	stb	r3,55(r2)
   14874:	e0bff617 	ldw	r2,-40(fp)
   14878:	e0bffe15 	stw	r2,-8(fp)
   1487c:	e0bffe17 	ldw	r2,-8(fp)
   14880:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
   14884:	0005883a 	mov	r2,zero
}
   14888:	e037883a 	mov	sp,fp
   1488c:	df000017 	ldw	fp,0(sp)
   14890:	dec00104 	addi	sp,sp,4
   14894:	f800283a 	ret

00014898 <OSTaskNameGet>:
*********************************************************************************************************
*/

#if OS_TASK_NAME_SIZE > 1
INT8U  OSTaskNameGet (INT8U prio, INT8U *pname, INT8U *perr)
{
   14898:	defff404 	addi	sp,sp,-48
   1489c:	dfc00b15 	stw	ra,44(sp)
   148a0:	df000a15 	stw	fp,40(sp)
   148a4:	df000a04 	addi	fp,sp,40
   148a8:	2005883a 	mov	r2,r4
   148ac:	e17ffe15 	stw	r5,-8(fp)
   148b0:	e1bfff15 	stw	r6,-4(fp)
   148b4:	e0bffd05 	stb	r2,-12(fp)
    OS_TCB    *ptcb;
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                              /* Allocate storage for CPU status register   */
    OS_CPU_SR  cpu_sr = 0;
   148b8:	e03ff615 	stw	zero,-40(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                            /* Validate 'perr'                            */
   148bc:	e0bfff17 	ldw	r2,-4(fp)
   148c0:	1000021e 	bne	r2,zero,148cc <OSTaskNameGet+0x34>
        return (0);
   148c4:	0005883a 	mov	r2,zero
   148c8:	00005806 	br	14a2c <OSTaskNameGet+0x194>
    }
    if (prio > OS_LOWEST_PRIO) {                         /* Task priority valid ?                      */
   148cc:	e0bffd03 	ldbu	r2,-12(fp)
   148d0:	10800570 	cmpltui	r2,r2,21
   148d4:	1000081e 	bne	r2,zero,148f8 <OSTaskNameGet+0x60>
        if (prio != OS_PRIO_SELF) {
   148d8:	e0bffd03 	ldbu	r2,-12(fp)
   148dc:	10803fe0 	cmpeqi	r2,r2,255
   148e0:	1000051e 	bne	r2,zero,148f8 <OSTaskNameGet+0x60>
            *perr = OS_ERR_PRIO_INVALID;                 /* No                                         */
   148e4:	e0bfff17 	ldw	r2,-4(fp)
   148e8:	00c00a84 	movi	r3,42
   148ec:	10c00005 	stb	r3,0(r2)
            return (0);
   148f0:	0005883a 	mov	r2,zero
   148f4:	00004d06 	br	14a2c <OSTaskNameGet+0x194>
        }
    }
    if (pname == (INT8U *)0) {                           /* Is 'pname' a NULL pointer?                 */
   148f8:	e0bffe17 	ldw	r2,-8(fp)
   148fc:	1000051e 	bne	r2,zero,14914 <OSTaskNameGet+0x7c>
        *perr = OS_ERR_PNAME_NULL;                       /* Yes                                        */
   14900:	e0bfff17 	ldw	r2,-4(fp)
   14904:	00c00304 	movi	r3,12
   14908:	10c00005 	stb	r3,0(r2)
        return (0);
   1490c:	0005883a 	mov	r2,zero
   14910:	00004606 	br	14a2c <OSTaskNameGet+0x194>
    }
#endif
    if (OSIntNesting > 0) {                              /* See if trying to call from an ISR          */
   14914:	008000b4 	movhi	r2,2
   14918:	10b69a04 	addi	r2,r2,-9624
   1491c:	10800003 	ldbu	r2,0(r2)
   14920:	10803fcc 	andi	r2,r2,255
   14924:	10000526 	beq	r2,zero,1493c <OSTaskNameGet+0xa4>
        *perr = OS_ERR_NAME_GET_ISR;
   14928:	e0bfff17 	ldw	r2,-4(fp)
   1492c:	00c00444 	movi	r3,17
   14930:	10c00005 	stb	r3,0(r2)
        return (0);
   14934:	0005883a 	mov	r2,zero
   14938:	00003c06 	br	14a2c <OSTaskNameGet+0x194>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1493c:	0005303a 	rdctl	r2,status
   14940:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   14944:	e0fff917 	ldw	r3,-28(fp)
   14948:	00bfff84 	movi	r2,-2
   1494c:	1884703a 	and	r2,r3,r2
   14950:	1001703a 	wrctl	status,r2
  
  return context;
   14954:	e0bff917 	ldw	r2,-28(fp)
    }
    OS_ENTER_CRITICAL();
   14958:	e0bff615 	stw	r2,-40(fp)
    if (prio == OS_PRIO_SELF) {                          /* See if caller desires it's own name        */
   1495c:	e0bffd03 	ldbu	r2,-12(fp)
   14960:	10803fd8 	cmpnei	r2,r2,255
   14964:	1000051e 	bne	r2,zero,1497c <OSTaskNameGet+0xe4>
        prio = OSTCBCur->OSTCBPrio;
   14968:	008000b4 	movhi	r2,2
   1496c:	10b69b04 	addi	r2,r2,-9620
   14970:	10800017 	ldw	r2,0(r2)
   14974:	10800c83 	ldbu	r2,50(r2)
   14978:	e0bffd05 	stb	r2,-12(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
   1497c:	e0fffd03 	ldbu	r3,-12(fp)
   14980:	008000b4 	movhi	r2,2
   14984:	109b2204 	addi	r2,r2,27784
   14988:	18c7883a 	add	r3,r3,r3
   1498c:	18c7883a 	add	r3,r3,r3
   14990:	10c5883a 	add	r2,r2,r3
   14994:	10800017 	ldw	r2,0(r2)
   14998:	e0bff715 	stw	r2,-36(fp)
    if (ptcb == (OS_TCB *)0) {                           /* Does task exist?                           */
   1499c:	e0bff717 	ldw	r2,-36(fp)
   149a0:	1000091e 	bne	r2,zero,149c8 <OSTaskNameGet+0x130>
   149a4:	e0bff617 	ldw	r2,-40(fp)
   149a8:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   149ac:	e0bffa17 	ldw	r2,-24(fp)
   149b0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                              /* No                                         */
        *perr = OS_ERR_TASK_NOT_EXIST;
   149b4:	e0bfff17 	ldw	r2,-4(fp)
   149b8:	00c010c4 	movi	r3,67
   149bc:	10c00005 	stb	r3,0(r2)
        return (0);
   149c0:	0005883a 	mov	r2,zero
   149c4:	00001906 	br	14a2c <OSTaskNameGet+0x194>
    }
    if (ptcb == OS_TCB_RESERVED) {                       /* Task assigned to a Mutex?                  */
   149c8:	e0bff717 	ldw	r2,-36(fp)
   149cc:	10800058 	cmpnei	r2,r2,1
   149d0:	1000091e 	bne	r2,zero,149f8 <OSTaskNameGet+0x160>
   149d4:	e0bff617 	ldw	r2,-40(fp)
   149d8:	e0bffb15 	stw	r2,-20(fp)
   149dc:	e0bffb17 	ldw	r2,-20(fp)
   149e0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                              /* Yes                                        */
        *perr = OS_ERR_TASK_NOT_EXIST;
   149e4:	e0bfff17 	ldw	r2,-4(fp)
   149e8:	00c010c4 	movi	r3,67
   149ec:	10c00005 	stb	r3,0(r2)
        return (0);
   149f0:	0005883a 	mov	r2,zero
   149f4:	00000d06 	br	14a2c <OSTaskNameGet+0x194>
    }
    len   = OS_StrCopy(pname, ptcb->OSTCBTaskName);      /* Yes, copy name from TCB                    */
   149f8:	e0bff717 	ldw	r2,-36(fp)
   149fc:	10801304 	addi	r2,r2,76
   14a00:	e13ffe17 	ldw	r4,-8(fp)
   14a04:	100b883a 	mov	r5,r2
   14a08:	000f6980 	call	f698 <OS_StrCopy>
   14a0c:	e0bff805 	stb	r2,-32(fp)
   14a10:	e0bff617 	ldw	r2,-40(fp)
   14a14:	e0bffc15 	stw	r2,-16(fp)
   14a18:	e0bffc17 	ldw	r2,-16(fp)
   14a1c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
   14a20:	e0bfff17 	ldw	r2,-4(fp)
   14a24:	10000005 	stb	zero,0(r2)
    return (len);
   14a28:	e0bff803 	ldbu	r2,-32(fp)
}
   14a2c:	e037883a 	mov	sp,fp
   14a30:	dfc00117 	ldw	ra,4(sp)
   14a34:	df000017 	ldw	fp,0(sp)
   14a38:	dec00204 	addi	sp,sp,8
   14a3c:	f800283a 	ret

00014a40 <OSTaskNameSet>:
* Returns    : None
*********************************************************************************************************
*/
#if OS_TASK_NAME_SIZE > 1
void  OSTaskNameSet (INT8U prio, INT8U *pname, INT8U *perr)
{
   14a40:	defff304 	addi	sp,sp,-52
   14a44:	dfc00c15 	stw	ra,48(sp)
   14a48:	df000b15 	stw	fp,44(sp)
   14a4c:	df000b04 	addi	fp,sp,44
   14a50:	2005883a 	mov	r2,r4
   14a54:	e17ffe15 	stw	r5,-8(fp)
   14a58:	e1bfff15 	stw	r6,-4(fp)
   14a5c:	e0bffd05 	stb	r2,-12(fp)
    INT8U      len;
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                          /* Allocate storage for CPU status register       */
    OS_CPU_SR  cpu_sr = 0;
   14a60:	e03ff515 	stw	zero,-44(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                        /* Validate 'perr'                                */
   14a64:	e0bfff17 	ldw	r2,-4(fp)
   14a68:	1000011e 	bne	r2,zero,14a70 <OSTaskNameSet+0x30>
        return;
   14a6c:	00005f06 	br	14bec <OSTaskNameSet+0x1ac>
    }
    if (prio > OS_LOWEST_PRIO) {                     /* Task priority valid ?                          */
   14a70:	e0bffd03 	ldbu	r2,-12(fp)
   14a74:	10800570 	cmpltui	r2,r2,21
   14a78:	1000071e 	bne	r2,zero,14a98 <OSTaskNameSet+0x58>
        if (prio != OS_PRIO_SELF) {
   14a7c:	e0bffd03 	ldbu	r2,-12(fp)
   14a80:	10803fe0 	cmpeqi	r2,r2,255
   14a84:	1000041e 	bne	r2,zero,14a98 <OSTaskNameSet+0x58>
            *perr = OS_ERR_PRIO_INVALID;             /* No                                             */
   14a88:	e0bfff17 	ldw	r2,-4(fp)
   14a8c:	00c00a84 	movi	r3,42
   14a90:	10c00005 	stb	r3,0(r2)
            return;
   14a94:	00005506 	br	14bec <OSTaskNameSet+0x1ac>
        }
    }
    if (pname == (INT8U *)0) {                       /* Is 'pname' a NULL pointer?                     */
   14a98:	e0bffe17 	ldw	r2,-8(fp)
   14a9c:	1000041e 	bne	r2,zero,14ab0 <OSTaskNameSet+0x70>
        *perr = OS_ERR_PNAME_NULL;                   /* Yes                                            */
   14aa0:	e0bfff17 	ldw	r2,-4(fp)
   14aa4:	00c00304 	movi	r3,12
   14aa8:	10c00005 	stb	r3,0(r2)
        return;
   14aac:	00004f06 	br	14bec <OSTaskNameSet+0x1ac>
    }
#endif
    if (OSIntNesting > 0) {                          /* See if trying to call from an ISR              */
   14ab0:	008000b4 	movhi	r2,2
   14ab4:	10b69a04 	addi	r2,r2,-9624
   14ab8:	10800003 	ldbu	r2,0(r2)
   14abc:	10803fcc 	andi	r2,r2,255
   14ac0:	10000426 	beq	r2,zero,14ad4 <OSTaskNameSet+0x94>
        *perr = OS_ERR_NAME_SET_ISR;
   14ac4:	e0bfff17 	ldw	r2,-4(fp)
   14ac8:	00c00484 	movi	r3,18
   14acc:	10c00005 	stb	r3,0(r2)
        return;
   14ad0:	00004606 	br	14bec <OSTaskNameSet+0x1ac>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   14ad4:	0005303a 	rdctl	r2,status
   14ad8:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   14adc:	e0fff817 	ldw	r3,-32(fp)
   14ae0:	00bfff84 	movi	r2,-2
   14ae4:	1884703a 	and	r2,r3,r2
   14ae8:	1001703a 	wrctl	status,r2
  
  return context;
   14aec:	e0bff817 	ldw	r2,-32(fp)
    }
    OS_ENTER_CRITICAL();
   14af0:	e0bff515 	stw	r2,-44(fp)
    if (prio == OS_PRIO_SELF) {                      /* See if caller desires to set it's own name     */
   14af4:	e0bffd03 	ldbu	r2,-12(fp)
   14af8:	10803fd8 	cmpnei	r2,r2,255
   14afc:	1000051e 	bne	r2,zero,14b14 <OSTaskNameSet+0xd4>
        prio = OSTCBCur->OSTCBPrio;
   14b00:	008000b4 	movhi	r2,2
   14b04:	10b69b04 	addi	r2,r2,-9620
   14b08:	10800017 	ldw	r2,0(r2)
   14b0c:	10800c83 	ldbu	r2,50(r2)
   14b10:	e0bffd05 	stb	r2,-12(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
   14b14:	e0fffd03 	ldbu	r3,-12(fp)
   14b18:	008000b4 	movhi	r2,2
   14b1c:	109b2204 	addi	r2,r2,27784
   14b20:	18c7883a 	add	r3,r3,r3
   14b24:	18c7883a 	add	r3,r3,r3
   14b28:	10c5883a 	add	r2,r2,r3
   14b2c:	10800017 	ldw	r2,0(r2)
   14b30:	e0bff615 	stw	r2,-40(fp)
    if (ptcb == (OS_TCB *)0) {                       /* Does task exist?                               */
   14b34:	e0bff617 	ldw	r2,-40(fp)
   14b38:	1000081e 	bne	r2,zero,14b5c <OSTaskNameSet+0x11c>
   14b3c:	e0bff517 	ldw	r2,-44(fp)
   14b40:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   14b44:	e0bff917 	ldw	r2,-28(fp)
   14b48:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                          /* No                                             */
        *perr = OS_ERR_TASK_NOT_EXIST;
   14b4c:	e0bfff17 	ldw	r2,-4(fp)
   14b50:	00c010c4 	movi	r3,67
   14b54:	10c00005 	stb	r3,0(r2)
        return;
   14b58:	00002406 	br	14bec <OSTaskNameSet+0x1ac>
    }
    if (ptcb == OS_TCB_RESERVED) {                   /* Task assigned to a Mutex?                      */
   14b5c:	e0bff617 	ldw	r2,-40(fp)
   14b60:	10800058 	cmpnei	r2,r2,1
   14b64:	1000081e 	bne	r2,zero,14b88 <OSTaskNameSet+0x148>
   14b68:	e0bff517 	ldw	r2,-44(fp)
   14b6c:	e0bffa15 	stw	r2,-24(fp)
   14b70:	e0bffa17 	ldw	r2,-24(fp)
   14b74:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                          /* Yes                                            */
        *perr = OS_ERR_TASK_NOT_EXIST;
   14b78:	e0bfff17 	ldw	r2,-4(fp)
   14b7c:	00c010c4 	movi	r3,67
   14b80:	10c00005 	stb	r3,0(r2)
        return;
   14b84:	00001906 	br	14bec <OSTaskNameSet+0x1ac>
    }
    len = OS_StrLen(pname);                          /* Yes, Can we fit the string in the TCB?         */
   14b88:	e13ffe17 	ldw	r4,-8(fp)
   14b8c:	000f70c0 	call	f70c <OS_StrLen>
   14b90:	e0bff705 	stb	r2,-36(fp)
    if (len > (OS_TASK_NAME_SIZE - 1)) {             /*      No                                        */
   14b94:	e0bff703 	ldbu	r2,-36(fp)
   14b98:	10800830 	cmpltui	r2,r2,32
   14b9c:	1000081e 	bne	r2,zero,14bc0 <OSTaskNameSet+0x180>
   14ba0:	e0bff517 	ldw	r2,-44(fp)
   14ba4:	e0bffb15 	stw	r2,-20(fp)
   14ba8:	e0bffb17 	ldw	r2,-20(fp)
   14bac:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_TASK_NAME_TOO_LONG;
   14bb0:	e0bfff17 	ldw	r2,-4(fp)
   14bb4:	00c01044 	movi	r3,65
   14bb8:	10c00005 	stb	r3,0(r2)
        return;
   14bbc:	00000b06 	br	14bec <OSTaskNameSet+0x1ac>
    }
    (void)OS_StrCopy(ptcb->OSTCBTaskName, pname);    /*      Yes, copy to TCB                          */
   14bc0:	e0bff617 	ldw	r2,-40(fp)
   14bc4:	10801304 	addi	r2,r2,76
   14bc8:	1009883a 	mov	r4,r2
   14bcc:	e17ffe17 	ldw	r5,-8(fp)
   14bd0:	000f6980 	call	f698 <OS_StrCopy>
   14bd4:	e0bff517 	ldw	r2,-44(fp)
   14bd8:	e0bffc15 	stw	r2,-16(fp)
   14bdc:	e0bffc17 	ldw	r2,-16(fp)
   14be0:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
   14be4:	e0bfff17 	ldw	r2,-4(fp)
   14be8:	10000005 	stb	zero,0(r2)
}
   14bec:	e037883a 	mov	sp,fp
   14bf0:	dfc00117 	ldw	ra,4(sp)
   14bf4:	df000017 	ldw	fp,0(sp)
   14bf8:	dec00204 	addi	sp,sp,8
   14bfc:	f800283a 	ret

00014c00 <OSTaskResume>:
*********************************************************************************************************
*/

#if OS_TASK_SUSPEND_EN > 0
INT8U  OSTaskResume (INT8U prio)
{
   14c00:	defff404 	addi	sp,sp,-48
   14c04:	dfc00b15 	stw	ra,44(sp)
   14c08:	df000a15 	stw	fp,40(sp)
   14c0c:	df000a04 	addi	fp,sp,40
   14c10:	2005883a 	mov	r2,r4
   14c14:	e0bfff05 	stb	r2,-4(fp)
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                                   /* Storage for CPU status register       */
    OS_CPU_SR  cpu_sr = 0;
   14c18:	e03ff615 	stw	zero,-40(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio >= OS_LOWEST_PRIO) {                             /* Make sure task priority is valid      */
   14c1c:	e0bfff03 	ldbu	r2,-4(fp)
   14c20:	10800530 	cmpltui	r2,r2,20
   14c24:	1000021e 	bne	r2,zero,14c30 <OSTaskResume+0x30>
        return (OS_ERR_PRIO_INVALID);
   14c28:	00800a84 	movi	r2,42
   14c2c:	00006d06 	br	14de4 <OSTaskResume+0x1e4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   14c30:	0005303a 	rdctl	r2,status
   14c34:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   14c38:	e0fff817 	ldw	r3,-32(fp)
   14c3c:	00bfff84 	movi	r2,-2
   14c40:	1884703a 	and	r2,r3,r2
   14c44:	1001703a 	wrctl	status,r2
  
  return context;
   14c48:	e0bff817 	ldw	r2,-32(fp)
    }
#endif
    OS_ENTER_CRITICAL();
   14c4c:	e0bff615 	stw	r2,-40(fp)
    ptcb = OSTCBPrioTbl[prio];
   14c50:	e0ffff03 	ldbu	r3,-4(fp)
   14c54:	008000b4 	movhi	r2,2
   14c58:	109b2204 	addi	r2,r2,27784
   14c5c:	18c7883a 	add	r3,r3,r3
   14c60:	18c7883a 	add	r3,r3,r3
   14c64:	10c5883a 	add	r2,r2,r3
   14c68:	10800017 	ldw	r2,0(r2)
   14c6c:	e0bff715 	stw	r2,-36(fp)
    if (ptcb == (OS_TCB *)0) {                                /* Task to suspend must exist            */
   14c70:	e0bff717 	ldw	r2,-36(fp)
   14c74:	1000061e 	bne	r2,zero,14c90 <OSTaskResume+0x90>
   14c78:	e0bff617 	ldw	r2,-40(fp)
   14c7c:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   14c80:	e0bff917 	ldw	r2,-28(fp)
   14c84:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_RESUME_PRIO);
   14c88:	00801184 	movi	r2,70
   14c8c:	00005506 	br	14de4 <OSTaskResume+0x1e4>
    }
    if (ptcb == OS_TCB_RESERVED) {                            /* See if assigned to Mutex              */
   14c90:	e0bff717 	ldw	r2,-36(fp)
   14c94:	10800058 	cmpnei	r2,r2,1
   14c98:	1000061e 	bne	r2,zero,14cb4 <OSTaskResume+0xb4>
   14c9c:	e0bff617 	ldw	r2,-40(fp)
   14ca0:	e0bffa15 	stw	r2,-24(fp)
   14ca4:	e0bffa17 	ldw	r2,-24(fp)
   14ca8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
   14cac:	008010c4 	movi	r2,67
   14cb0:	00004c06 	br	14de4 <OSTaskResume+0x1e4>
    }
    if ((ptcb->OSTCBStat & OS_STAT_SUSPEND) != OS_STAT_RDY) { /* Task must be suspended                */
   14cb4:	e0bff717 	ldw	r2,-36(fp)
   14cb8:	10800c03 	ldbu	r2,48(r2)
   14cbc:	10803fcc 	andi	r2,r2,255
   14cc0:	1080020c 	andi	r2,r2,8
   14cc4:	10004226 	beq	r2,zero,14dd0 <OSTaskResume+0x1d0>
        ptcb->OSTCBStat &= ~(INT8U)OS_STAT_SUSPEND;           /* Remove suspension                     */
   14cc8:	e0bff717 	ldw	r2,-36(fp)
   14ccc:	10c00c03 	ldbu	r3,48(r2)
   14cd0:	00bffdc4 	movi	r2,-9
   14cd4:	1884703a 	and	r2,r3,r2
   14cd8:	1007883a 	mov	r3,r2
   14cdc:	e0bff717 	ldw	r2,-36(fp)
   14ce0:	10c00c05 	stb	r3,48(r2)
        if (ptcb->OSTCBStat == OS_STAT_RDY) {                 /* See if task is now ready              */
   14ce4:	e0bff717 	ldw	r2,-36(fp)
   14ce8:	10800c03 	ldbu	r2,48(r2)
   14cec:	10803fcc 	andi	r2,r2,255
   14cf0:	1000311e 	bne	r2,zero,14db8 <OSTaskResume+0x1b8>
            if (ptcb->OSTCBDly == 0) {
   14cf4:	e0bff717 	ldw	r2,-36(fp)
   14cf8:	10800b8b 	ldhu	r2,46(r2)
   14cfc:	10bfffcc 	andi	r2,r2,65535
   14d00:	1000281e 	bne	r2,zero,14da4 <OSTaskResume+0x1a4>
                OSRdyGrp               |= ptcb->OSTCBBitY;    /* Yes, Make task ready to run           */
   14d04:	e0bff717 	ldw	r2,-36(fp)
   14d08:	10c00d83 	ldbu	r3,54(r2)
   14d0c:	008000b4 	movhi	r2,2
   14d10:	10b69804 	addi	r2,r2,-9632
   14d14:	10800003 	ldbu	r2,0(r2)
   14d18:	1884b03a 	or	r2,r3,r2
   14d1c:	1007883a 	mov	r3,r2
   14d20:	008000b4 	movhi	r2,2
   14d24:	10b69804 	addi	r2,r2,-9632
   14d28:	10c00005 	stb	r3,0(r2)
                OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
   14d2c:	e0bff717 	ldw	r2,-36(fp)
   14d30:	10800d03 	ldbu	r2,52(r2)
   14d34:	10c03fcc 	andi	r3,r2,255
   14d38:	e0bff717 	ldw	r2,-36(fp)
   14d3c:	10800d03 	ldbu	r2,52(r2)
   14d40:	11003fcc 	andi	r4,r2,255
   14d44:	008000b4 	movhi	r2,2
   14d48:	10b69844 	addi	r2,r2,-9631
   14d4c:	1105883a 	add	r2,r2,r4
   14d50:	11000003 	ldbu	r4,0(r2)
   14d54:	e0bff717 	ldw	r2,-36(fp)
   14d58:	10800d43 	ldbu	r2,53(r2)
   14d5c:	2084b03a 	or	r2,r4,r2
   14d60:	1009883a 	mov	r4,r2
   14d64:	008000b4 	movhi	r2,2
   14d68:	10b69844 	addi	r2,r2,-9631
   14d6c:	10c5883a 	add	r2,r2,r3
   14d70:	11000005 	stb	r4,0(r2)
   14d74:	e0bff617 	ldw	r2,-40(fp)
   14d78:	e0bffb15 	stw	r2,-20(fp)
   14d7c:	e0bffb17 	ldw	r2,-20(fp)
   14d80:	1001703a 	wrctl	status,r2
                OS_EXIT_CRITICAL();
                if (OSRunning == OS_TRUE) {
   14d84:	008000b4 	movhi	r2,2
   14d88:	10b68c44 	addi	r2,r2,-9679
   14d8c:	10800003 	ldbu	r2,0(r2)
   14d90:	10803fcc 	andi	r2,r2,255
   14d94:	10800058 	cmpnei	r2,r2,1
   14d98:	10000b1e 	bne	r2,zero,14dc8 <OSTaskResume+0x1c8>
                    OS_Sched();                               /* Find new highest priority task        */
   14d9c:	000f55c0 	call	f55c <OS_Sched>
   14da0:	00000906 	br	14dc8 <OSTaskResume+0x1c8>
   14da4:	e0bff617 	ldw	r2,-40(fp)
   14da8:	e0bffc15 	stw	r2,-16(fp)
   14dac:	e0bffc17 	ldw	r2,-16(fp)
   14db0:	1001703a 	wrctl	status,r2
   14db4:	00000406 	br	14dc8 <OSTaskResume+0x1c8>
   14db8:	e0bff617 	ldw	r2,-40(fp)
   14dbc:	e0bffd15 	stw	r2,-12(fp)
   14dc0:	e0bffd17 	ldw	r2,-12(fp)
   14dc4:	1001703a 	wrctl	status,r2
                OS_EXIT_CRITICAL();
            }
        } else {                                              /* Must be pending on event              */
            OS_EXIT_CRITICAL();
        }
        return (OS_ERR_NONE);
   14dc8:	0005883a 	mov	r2,zero
   14dcc:	00000506 	br	14de4 <OSTaskResume+0x1e4>
   14dd0:	e0bff617 	ldw	r2,-40(fp)
   14dd4:	e0bffe15 	stw	r2,-8(fp)
   14dd8:	e0bffe17 	ldw	r2,-8(fp)
   14ddc:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_TASK_NOT_SUSPENDED);
   14de0:	00801104 	movi	r2,68
}
   14de4:	e037883a 	mov	sp,fp
   14de8:	dfc00117 	ldw	ra,4(sp)
   14dec:	df000017 	ldw	fp,0(sp)
   14df0:	dec00204 	addi	sp,sp,8
   14df4:	f800283a 	ret

00014df8 <OSTaskStkChk>:
*              OS_ERR_PDATA_NULL      if 'p_stk_data' is a NULL pointer
*********************************************************************************************************
*/
#if (OS_TASK_STAT_STK_CHK_EN > 0) && (OS_TASK_CREATE_EXT_EN > 0)
INT8U  OSTaskStkChk (INT8U prio, OS_STK_DATA *p_stk_data)
{
   14df8:	defff304 	addi	sp,sp,-52
   14dfc:	df000c15 	stw	fp,48(sp)
   14e00:	df000c04 	addi	fp,sp,48
   14e04:	2005883a 	mov	r2,r4
   14e08:	e17fff15 	stw	r5,-4(fp)
   14e0c:	e0bffe05 	stb	r2,-8(fp)
    OS_TCB    *ptcb;
    OS_STK    *pchk;
    INT32U     nfree;
    INT32U     size;
#if OS_CRITICAL_METHOD == 3                            /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
   14e10:	e03ff615 	stw	zero,-40(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio > OS_LOWEST_PRIO) {                       /* Make sure task priority is valid             */
   14e14:	e0bffe03 	ldbu	r2,-8(fp)
   14e18:	10800570 	cmpltui	r2,r2,21
   14e1c:	1000051e 	bne	r2,zero,14e34 <OSTaskStkChk+0x3c>
        if (prio != OS_PRIO_SELF) {
   14e20:	e0bffe03 	ldbu	r2,-8(fp)
   14e24:	10803fe0 	cmpeqi	r2,r2,255
   14e28:	1000021e 	bne	r2,zero,14e34 <OSTaskStkChk+0x3c>
            return (OS_ERR_PRIO_INVALID);
   14e2c:	00800a84 	movi	r2,42
   14e30:	00005f06 	br	14fb0 <OSTaskStkChk+0x1b8>
        }
    }
    if (p_stk_data == (OS_STK_DATA *)0) {              /* Validate 'p_stk_data'                        */
   14e34:	e0bfff17 	ldw	r2,-4(fp)
   14e38:	1000021e 	bne	r2,zero,14e44 <OSTaskStkChk+0x4c>
        return (OS_ERR_PDATA_NULL);
   14e3c:	00800244 	movi	r2,9
   14e40:	00005b06 	br	14fb0 <OSTaskStkChk+0x1b8>
    }
#endif
    p_stk_data->OSFree = 0;                            /* Assume failure, set to 0 size                */
   14e44:	e0bfff17 	ldw	r2,-4(fp)
   14e48:	10000015 	stw	zero,0(r2)
    p_stk_data->OSUsed = 0;
   14e4c:	e0bfff17 	ldw	r2,-4(fp)
   14e50:	10000115 	stw	zero,4(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   14e54:	0005303a 	rdctl	r2,status
   14e58:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   14e5c:	e0fff917 	ldw	r3,-28(fp)
   14e60:	00bfff84 	movi	r2,-2
   14e64:	1884703a 	and	r2,r3,r2
   14e68:	1001703a 	wrctl	status,r2
  
  return context;
   14e6c:	e0bff917 	ldw	r2,-28(fp)
    OS_ENTER_CRITICAL();
   14e70:	e0bff615 	stw	r2,-40(fp)
    if (prio == OS_PRIO_SELF) {                        /* See if check for SELF                        */
   14e74:	e0bffe03 	ldbu	r2,-8(fp)
   14e78:	10803fd8 	cmpnei	r2,r2,255
   14e7c:	1000051e 	bne	r2,zero,14e94 <OSTaskStkChk+0x9c>
        prio = OSTCBCur->OSTCBPrio;
   14e80:	008000b4 	movhi	r2,2
   14e84:	10b69b04 	addi	r2,r2,-9620
   14e88:	10800017 	ldw	r2,0(r2)
   14e8c:	10800c83 	ldbu	r2,50(r2)
   14e90:	e0bffe05 	stb	r2,-8(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
   14e94:	e0fffe03 	ldbu	r3,-8(fp)
   14e98:	008000b4 	movhi	r2,2
   14e9c:	109b2204 	addi	r2,r2,27784
   14ea0:	18c7883a 	add	r3,r3,r3
   14ea4:	18c7883a 	add	r3,r3,r3
   14ea8:	10c5883a 	add	r2,r2,r3
   14eac:	10800017 	ldw	r2,0(r2)
   14eb0:	e0bff715 	stw	r2,-36(fp)
    if (ptcb == (OS_TCB *)0) {                         /* Make sure task exist                         */
   14eb4:	e0bff717 	ldw	r2,-36(fp)
   14eb8:	1000061e 	bne	r2,zero,14ed4 <OSTaskStkChk+0xdc>
   14ebc:	e0bff617 	ldw	r2,-40(fp)
   14ec0:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   14ec4:	e0bffa17 	ldw	r2,-24(fp)
   14ec8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
   14ecc:	008010c4 	movi	r2,67
   14ed0:	00003706 	br	14fb0 <OSTaskStkChk+0x1b8>
    }
    if (ptcb == OS_TCB_RESERVED) {
   14ed4:	e0bff717 	ldw	r2,-36(fp)
   14ed8:	10800058 	cmpnei	r2,r2,1
   14edc:	1000061e 	bne	r2,zero,14ef8 <OSTaskStkChk+0x100>
   14ee0:	e0bff617 	ldw	r2,-40(fp)
   14ee4:	e0bffb15 	stw	r2,-20(fp)
   14ee8:	e0bffb17 	ldw	r2,-20(fp)
   14eec:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
   14ef0:	008010c4 	movi	r2,67
   14ef4:	00002e06 	br	14fb0 <OSTaskStkChk+0x1b8>
    }
    if ((ptcb->OSTCBOpt & OS_TASK_OPT_STK_CHK) == 0) { /* Make sure stack checking option is set       */
   14ef8:	e0bff717 	ldw	r2,-36(fp)
   14efc:	1080040b 	ldhu	r2,16(r2)
   14f00:	10bfffcc 	andi	r2,r2,65535
   14f04:	1080004c 	andi	r2,r2,1
   14f08:	1000061e 	bne	r2,zero,14f24 <OSTaskStkChk+0x12c>
   14f0c:	e0bff617 	ldw	r2,-40(fp)
   14f10:	e0bffc15 	stw	r2,-16(fp)
   14f14:	e0bffc17 	ldw	r2,-16(fp)
   14f18:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_OPT);
   14f1c:	00801144 	movi	r2,69
   14f20:	00002306 	br	14fb0 <OSTaskStkChk+0x1b8>
    }
    nfree = 0;
   14f24:	e03ff515 	stw	zero,-44(fp)
    size  = ptcb->OSTCBStkSize;
   14f28:	e0bff717 	ldw	r2,-36(fp)
   14f2c:	10800317 	ldw	r2,12(r2)
   14f30:	e0bff815 	stw	r2,-32(fp)
    pchk  = ptcb->OSTCBStkBottom;
   14f34:	e0bff717 	ldw	r2,-36(fp)
   14f38:	10800217 	ldw	r2,8(r2)
   14f3c:	e0bff415 	stw	r2,-48(fp)
   14f40:	e0bff617 	ldw	r2,-40(fp)
   14f44:	e0bffd15 	stw	r2,-12(fp)
   14f48:	e0bffd17 	ldw	r2,-12(fp)
   14f4c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
#if OS_STK_GROWTH == 1
    while (*pchk++ == (OS_STK)0) {                    /* Compute the number of zero entries on the stk */
   14f50:	00000306 	br	14f60 <OSTaskStkChk+0x168>
        nfree++;
   14f54:	e0bff517 	ldw	r2,-44(fp)
   14f58:	10800044 	addi	r2,r2,1
   14f5c:	e0bff515 	stw	r2,-44(fp)
    nfree = 0;
    size  = ptcb->OSTCBStkSize;
    pchk  = ptcb->OSTCBStkBottom;
    OS_EXIT_CRITICAL();
#if OS_STK_GROWTH == 1
    while (*pchk++ == (OS_STK)0) {                    /* Compute the number of zero entries on the stk */
   14f60:	e0bff417 	ldw	r2,-48(fp)
   14f64:	10c00104 	addi	r3,r2,4
   14f68:	e0fff415 	stw	r3,-48(fp)
   14f6c:	10800017 	ldw	r2,0(r2)
   14f70:	103ff826 	beq	r2,zero,14f54 <__alt_mem_Flash_flash_data+0xf4014f54>
#else
    while (*pchk-- == (OS_STK)0) {
        nfree++;
    }
#endif
    p_stk_data->OSFree = nfree * sizeof(OS_STK);          /* Compute number of free bytes on the stack */
   14f74:	e0bff517 	ldw	r2,-44(fp)
   14f78:	1085883a 	add	r2,r2,r2
   14f7c:	1085883a 	add	r2,r2,r2
   14f80:	1007883a 	mov	r3,r2
   14f84:	e0bfff17 	ldw	r2,-4(fp)
   14f88:	10c00015 	stw	r3,0(r2)
    p_stk_data->OSUsed = (size - nfree) * sizeof(OS_STK); /* Compute number of bytes used on the stack */
   14f8c:	e0fff817 	ldw	r3,-32(fp)
   14f90:	e0bff517 	ldw	r2,-44(fp)
   14f94:	1885c83a 	sub	r2,r3,r2
   14f98:	1085883a 	add	r2,r2,r2
   14f9c:	1085883a 	add	r2,r2,r2
   14fa0:	1007883a 	mov	r3,r2
   14fa4:	e0bfff17 	ldw	r2,-4(fp)
   14fa8:	10c00115 	stw	r3,4(r2)
    return (OS_ERR_NONE);
   14fac:	0005883a 	mov	r2,zero
}
   14fb0:	e037883a 	mov	sp,fp
   14fb4:	df000017 	ldw	fp,0(sp)
   14fb8:	dec00104 	addi	sp,sp,4
   14fbc:	f800283a 	ret

00014fc0 <OSTaskSuspend>:
*********************************************************************************************************
*/

#if OS_TASK_SUSPEND_EN > 0
INT8U  OSTaskSuspend (INT8U prio)
{
   14fc0:	defff504 	addi	sp,sp,-44
   14fc4:	dfc00a15 	stw	ra,40(sp)
   14fc8:	df000915 	stw	fp,36(sp)
   14fcc:	df000904 	addi	fp,sp,36
   14fd0:	2005883a 	mov	r2,r4
   14fd4:	e0bfff05 	stb	r2,-4(fp)
    BOOLEAN    self;
    OS_TCB    *ptcb;
    INT8U      y;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   14fd8:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio == OS_TASK_IDLE_PRIO) {                            /* Not allowed to suspend idle task    */
   14fdc:	e0bfff03 	ldbu	r2,-4(fp)
   14fe0:	10800518 	cmpnei	r2,r2,20
   14fe4:	1000021e 	bne	r2,zero,14ff0 <OSTaskSuspend+0x30>
        return (OS_ERR_TASK_SUSPEND_IDLE);
   14fe8:	008011c4 	movi	r2,71
   14fec:	00007406 	br	151c0 <OSTaskSuspend+0x200>
    }
    if (prio >= OS_LOWEST_PRIO) {                               /* Task priority valid ?               */
   14ff0:	e0bfff03 	ldbu	r2,-4(fp)
   14ff4:	10800530 	cmpltui	r2,r2,20
   14ff8:	1000051e 	bne	r2,zero,15010 <OSTaskSuspend+0x50>
        if (prio != OS_PRIO_SELF) {
   14ffc:	e0bfff03 	ldbu	r2,-4(fp)
   15000:	10803fe0 	cmpeqi	r2,r2,255
   15004:	1000021e 	bne	r2,zero,15010 <OSTaskSuspend+0x50>
            return (OS_ERR_PRIO_INVALID);
   15008:	00800a84 	movi	r2,42
   1500c:	00006c06 	br	151c0 <OSTaskSuspend+0x200>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   15010:	0005303a 	rdctl	r2,status
   15014:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   15018:	e0fffb17 	ldw	r3,-20(fp)
   1501c:	00bfff84 	movi	r2,-2
   15020:	1884703a 	and	r2,r3,r2
   15024:	1001703a 	wrctl	status,r2
  
  return context;
   15028:	e0bffb17 	ldw	r2,-20(fp)
        }
    }
#endif
    OS_ENTER_CRITICAL();
   1502c:	e0bff815 	stw	r2,-32(fp)
    if (prio == OS_PRIO_SELF) {                                 /* See if suspend SELF                 */
   15030:	e0bfff03 	ldbu	r2,-4(fp)
   15034:	10803fd8 	cmpnei	r2,r2,255
   15038:	1000081e 	bne	r2,zero,1505c <OSTaskSuspend+0x9c>
        prio = OSTCBCur->OSTCBPrio;
   1503c:	008000b4 	movhi	r2,2
   15040:	10b69b04 	addi	r2,r2,-9620
   15044:	10800017 	ldw	r2,0(r2)
   15048:	10800c83 	ldbu	r2,50(r2)
   1504c:	e0bfff05 	stb	r2,-4(fp)
        self = OS_TRUE;
   15050:	00800044 	movi	r2,1
   15054:	e0bff705 	stb	r2,-36(fp)
   15058:	00000b06 	br	15088 <OSTaskSuspend+0xc8>
    } else if (prio == OSTCBCur->OSTCBPrio) {                   /* See if suspending self              */
   1505c:	008000b4 	movhi	r2,2
   15060:	10b69b04 	addi	r2,r2,-9620
   15064:	10800017 	ldw	r2,0(r2)
   15068:	10800c83 	ldbu	r2,50(r2)
   1506c:	10c03fcc 	andi	r3,r2,255
   15070:	e0bfff03 	ldbu	r2,-4(fp)
   15074:	1880031e 	bne	r3,r2,15084 <OSTaskSuspend+0xc4>
        self = OS_TRUE;
   15078:	00800044 	movi	r2,1
   1507c:	e0bff705 	stb	r2,-36(fp)
   15080:	00000106 	br	15088 <OSTaskSuspend+0xc8>
    } else {
        self = OS_FALSE;                                        /* No suspending another task          */
   15084:	e03ff705 	stb	zero,-36(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
   15088:	e0ffff03 	ldbu	r3,-4(fp)
   1508c:	008000b4 	movhi	r2,2
   15090:	109b2204 	addi	r2,r2,27784
   15094:	18c7883a 	add	r3,r3,r3
   15098:	18c7883a 	add	r3,r3,r3
   1509c:	10c5883a 	add	r2,r2,r3
   150a0:	10800017 	ldw	r2,0(r2)
   150a4:	e0bff915 	stw	r2,-28(fp)
    if (ptcb == (OS_TCB *)0) {                                  /* Task to suspend must exist          */
   150a8:	e0bff917 	ldw	r2,-28(fp)
   150ac:	1000061e 	bne	r2,zero,150c8 <OSTaskSuspend+0x108>
   150b0:	e0bff817 	ldw	r2,-32(fp)
   150b4:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   150b8:	e0bffc17 	ldw	r2,-16(fp)
   150bc:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_SUSPEND_PRIO);
   150c0:	00801204 	movi	r2,72
   150c4:	00003e06 	br	151c0 <OSTaskSuspend+0x200>
    }
    if (ptcb == OS_TCB_RESERVED) {                              /* See if assigned to Mutex            */
   150c8:	e0bff917 	ldw	r2,-28(fp)
   150cc:	10800058 	cmpnei	r2,r2,1
   150d0:	1000061e 	bne	r2,zero,150ec <OSTaskSuspend+0x12c>
   150d4:	e0bff817 	ldw	r2,-32(fp)
   150d8:	e0bffd15 	stw	r2,-12(fp)
   150dc:	e0bffd17 	ldw	r2,-12(fp)
   150e0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
   150e4:	008010c4 	movi	r2,67
   150e8:	00003506 	br	151c0 <OSTaskSuspend+0x200>
    }
    y            = ptcb->OSTCBY;
   150ec:	e0bff917 	ldw	r2,-28(fp)
   150f0:	10800d03 	ldbu	r2,52(r2)
   150f4:	e0bffa05 	stb	r2,-24(fp)
    OSRdyTbl[y] &= ~ptcb->OSTCBBitX;                            /* Make task not ready                 */
   150f8:	e0fffa03 	ldbu	r3,-24(fp)
   150fc:	e13ffa03 	ldbu	r4,-24(fp)
   15100:	008000b4 	movhi	r2,2
   15104:	10b69844 	addi	r2,r2,-9631
   15108:	1105883a 	add	r2,r2,r4
   1510c:	10800003 	ldbu	r2,0(r2)
   15110:	1009883a 	mov	r4,r2
   15114:	e0bff917 	ldw	r2,-28(fp)
   15118:	10800d43 	ldbu	r2,53(r2)
   1511c:	0084303a 	nor	r2,zero,r2
   15120:	2084703a 	and	r2,r4,r2
   15124:	1009883a 	mov	r4,r2
   15128:	008000b4 	movhi	r2,2
   1512c:	10b69844 	addi	r2,r2,-9631
   15130:	10c5883a 	add	r2,r2,r3
   15134:	11000005 	stb	r4,0(r2)
    if (OSRdyTbl[y] == 0) {
   15138:	e0fffa03 	ldbu	r3,-24(fp)
   1513c:	008000b4 	movhi	r2,2
   15140:	10b69844 	addi	r2,r2,-9631
   15144:	10c5883a 	add	r2,r2,r3
   15148:	10800003 	ldbu	r2,0(r2)
   1514c:	10803fcc 	andi	r2,r2,255
   15150:	10000c1e 	bne	r2,zero,15184 <OSTaskSuspend+0x1c4>
        OSRdyGrp &= ~ptcb->OSTCBBitY;
   15154:	e0bff917 	ldw	r2,-28(fp)
   15158:	10800d83 	ldbu	r2,54(r2)
   1515c:	0084303a 	nor	r2,zero,r2
   15160:	1007883a 	mov	r3,r2
   15164:	008000b4 	movhi	r2,2
   15168:	10b69804 	addi	r2,r2,-9632
   1516c:	10800003 	ldbu	r2,0(r2)
   15170:	1884703a 	and	r2,r3,r2
   15174:	1007883a 	mov	r3,r2
   15178:	008000b4 	movhi	r2,2
   1517c:	10b69804 	addi	r2,r2,-9632
   15180:	10c00005 	stb	r3,0(r2)
    }
    ptcb->OSTCBStat |= OS_STAT_SUSPEND;                         /* Status of task is 'SUSPENDED'       */
   15184:	e0bff917 	ldw	r2,-28(fp)
   15188:	10800c03 	ldbu	r2,48(r2)
   1518c:	10800214 	ori	r2,r2,8
   15190:	1007883a 	mov	r3,r2
   15194:	e0bff917 	ldw	r2,-28(fp)
   15198:	10c00c05 	stb	r3,48(r2)
   1519c:	e0bff817 	ldw	r2,-32(fp)
   151a0:	e0bffe15 	stw	r2,-8(fp)
   151a4:	e0bffe17 	ldw	r2,-8(fp)
   151a8:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    if (self == OS_TRUE) {                                      /* Context switch only if SELF         */
   151ac:	e0bff703 	ldbu	r2,-36(fp)
   151b0:	10800058 	cmpnei	r2,r2,1
   151b4:	1000011e 	bne	r2,zero,151bc <OSTaskSuspend+0x1fc>
        OS_Sched();                                             /* Find new highest priority task      */
   151b8:	000f55c0 	call	f55c <OS_Sched>
    }
    return (OS_ERR_NONE);
   151bc:	0005883a 	mov	r2,zero
}
   151c0:	e037883a 	mov	sp,fp
   151c4:	dfc00117 	ldw	ra,4(sp)
   151c8:	df000017 	ldw	fp,0(sp)
   151cc:	dec00204 	addi	sp,sp,8
   151d0:	f800283a 	ret

000151d4 <OSTaskQuery>:
*********************************************************************************************************
*/

#if OS_TASK_QUERY_EN > 0
INT8U  OSTaskQuery (INT8U prio, OS_TCB *p_task_data)
{
   151d4:	defff604 	addi	sp,sp,-40
   151d8:	dfc00915 	stw	ra,36(sp)
   151dc:	df000815 	stw	fp,32(sp)
   151e0:	df000804 	addi	fp,sp,32
   151e4:	2005883a 	mov	r2,r4
   151e8:	e17fff15 	stw	r5,-4(fp)
   151ec:	e0bffe05 	stb	r2,-8(fp)
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   151f0:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio > OS_LOWEST_PRIO) {                 /* Task priority valid ?                              */
   151f4:	e0bffe03 	ldbu	r2,-8(fp)
   151f8:	10800570 	cmpltui	r2,r2,21
   151fc:	1000051e 	bne	r2,zero,15214 <OSTaskQuery+0x40>
        if (prio != OS_PRIO_SELF) {
   15200:	e0bffe03 	ldbu	r2,-8(fp)
   15204:	10803fe0 	cmpeqi	r2,r2,255
   15208:	1000021e 	bne	r2,zero,15214 <OSTaskQuery+0x40>
            return (OS_ERR_PRIO_INVALID);
   1520c:	00800a84 	movi	r2,42
   15210:	00003606 	br	152ec <OSTaskQuery+0x118>
        }
    }
    if (p_task_data == (OS_TCB *)0) {            /* Validate 'p_task_data'                             */
   15214:	e0bfff17 	ldw	r2,-4(fp)
   15218:	1000021e 	bne	r2,zero,15224 <OSTaskQuery+0x50>
        return (OS_ERR_PDATA_NULL);
   1521c:	00800244 	movi	r2,9
   15220:	00003206 	br	152ec <OSTaskQuery+0x118>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   15224:	0005303a 	rdctl	r2,status
   15228:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1522c:	e0fffa17 	ldw	r3,-24(fp)
   15230:	00bfff84 	movi	r2,-2
   15234:	1884703a 	and	r2,r3,r2
   15238:	1001703a 	wrctl	status,r2
  
  return context;
   1523c:	e0bffa17 	ldw	r2,-24(fp)
    }
#endif
    OS_ENTER_CRITICAL();
   15240:	e0bff815 	stw	r2,-32(fp)
    if (prio == OS_PRIO_SELF) {                  /* See if suspend SELF                                */
   15244:	e0bffe03 	ldbu	r2,-8(fp)
   15248:	10803fd8 	cmpnei	r2,r2,255
   1524c:	1000051e 	bne	r2,zero,15264 <OSTaskQuery+0x90>
        prio = OSTCBCur->OSTCBPrio;
   15250:	008000b4 	movhi	r2,2
   15254:	10b69b04 	addi	r2,r2,-9620
   15258:	10800017 	ldw	r2,0(r2)
   1525c:	10800c83 	ldbu	r2,50(r2)
   15260:	e0bffe05 	stb	r2,-8(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
   15264:	e0fffe03 	ldbu	r3,-8(fp)
   15268:	008000b4 	movhi	r2,2
   1526c:	109b2204 	addi	r2,r2,27784
   15270:	18c7883a 	add	r3,r3,r3
   15274:	18c7883a 	add	r3,r3,r3
   15278:	10c5883a 	add	r2,r2,r3
   1527c:	10800017 	ldw	r2,0(r2)
   15280:	e0bff915 	stw	r2,-28(fp)
    if (ptcb == (OS_TCB *)0) {                   /* Task to query must exist                           */
   15284:	e0bff917 	ldw	r2,-28(fp)
   15288:	1000061e 	bne	r2,zero,152a4 <OSTaskQuery+0xd0>
   1528c:	e0bff817 	ldw	r2,-32(fp)
   15290:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   15294:	e0bffb17 	ldw	r2,-20(fp)
   15298:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_PRIO);
   1529c:	00800a44 	movi	r2,41
   152a0:	00001206 	br	152ec <OSTaskQuery+0x118>
    }
    if (ptcb == OS_TCB_RESERVED) {               /* Task to query must not be assigned to a Mutex      */
   152a4:	e0bff917 	ldw	r2,-28(fp)
   152a8:	10800058 	cmpnei	r2,r2,1
   152ac:	1000061e 	bne	r2,zero,152c8 <OSTaskQuery+0xf4>
   152b0:	e0bff817 	ldw	r2,-32(fp)
   152b4:	e0bffc15 	stw	r2,-16(fp)
   152b8:	e0bffc17 	ldw	r2,-16(fp)
   152bc:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
   152c0:	008010c4 	movi	r2,67
   152c4:	00000906 	br	152ec <OSTaskQuery+0x118>
    }
                                                 /* Copy TCB into user storage area                    */
    OS_MemCopy((INT8U *)p_task_data, (INT8U *)ptcb, sizeof(OS_TCB));
   152c8:	e13fff17 	ldw	r4,-4(fp)
   152cc:	e17ff917 	ldw	r5,-28(fp)
   152d0:	01801b04 	movi	r6,108
   152d4:	000f4f80 	call	f4f8 <OS_MemCopy>
   152d8:	e0bff817 	ldw	r2,-32(fp)
   152dc:	e0bffd15 	stw	r2,-12(fp)
   152e0:	e0bffd17 	ldw	r2,-12(fp)
   152e4:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
   152e8:	0005883a 	mov	r2,zero
}
   152ec:	e037883a 	mov	sp,fp
   152f0:	dfc00117 	ldw	ra,4(sp)
   152f4:	df000017 	ldw	fp,0(sp)
   152f8:	dec00204 	addi	sp,sp,8
   152fc:	f800283a 	ret

00015300 <OS_TaskStkClr>:
* Returns    : none
*********************************************************************************************************
*/
#if (OS_TASK_STAT_STK_CHK_EN > 0) && (OS_TASK_CREATE_EXT_EN > 0)
void  OS_TaskStkClr (OS_STK *pbos, INT32U size, INT16U opt)
{
   15300:	defffc04 	addi	sp,sp,-16
   15304:	df000315 	stw	fp,12(sp)
   15308:	df000304 	addi	fp,sp,12
   1530c:	e13ffd15 	stw	r4,-12(fp)
   15310:	e17ffe15 	stw	r5,-8(fp)
   15314:	3005883a 	mov	r2,r6
   15318:	e0bfff0d 	sth	r2,-4(fp)
    if ((opt & OS_TASK_OPT_STK_CHK) != 0x0000) {       /* See if stack checking has been enabled       */
   1531c:	e0bfff0b 	ldhu	r2,-4(fp)
   15320:	1080004c 	andi	r2,r2,1
   15324:	10000d26 	beq	r2,zero,1535c <OS_TaskStkClr+0x5c>
        if ((opt & OS_TASK_OPT_STK_CLR) != 0x0000) {   /* See if stack needs to be cleared             */
   15328:	e0bfff0b 	ldhu	r2,-4(fp)
   1532c:	1080008c 	andi	r2,r2,2
   15330:	10000a26 	beq	r2,zero,1535c <OS_TaskStkClr+0x5c>
#if OS_STK_GROWTH == 1
            while (size > 0) {                         /* Stack grows from HIGH to LOW memory          */
   15334:	00000706 	br	15354 <OS_TaskStkClr+0x54>
                size--;
   15338:	e0bffe17 	ldw	r2,-8(fp)
   1533c:	10bfffc4 	addi	r2,r2,-1
   15340:	e0bffe15 	stw	r2,-8(fp)
                *pbos++ = (OS_STK)0;                   /* Clear from bottom of stack and up!           */
   15344:	e0bffd17 	ldw	r2,-12(fp)
   15348:	10c00104 	addi	r3,r2,4
   1534c:	e0fffd15 	stw	r3,-12(fp)
   15350:	10000015 	stw	zero,0(r2)
void  OS_TaskStkClr (OS_STK *pbos, INT32U size, INT16U opt)
{
    if ((opt & OS_TASK_OPT_STK_CHK) != 0x0000) {       /* See if stack checking has been enabled       */
        if ((opt & OS_TASK_OPT_STK_CLR) != 0x0000) {   /* See if stack needs to be cleared             */
#if OS_STK_GROWTH == 1
            while (size > 0) {                         /* Stack grows from HIGH to LOW memory          */
   15354:	e0bffe17 	ldw	r2,-8(fp)
   15358:	103ff71e 	bne	r2,zero,15338 <__alt_mem_Flash_flash_data+0xf4015338>
                *pbos-- = (OS_STK)0;                   /* Clear from bottom of stack and down          */
            }
#endif
        }
    }
}
   1535c:	e037883a 	mov	sp,fp
   15360:	df000017 	ldw	fp,0(sp)
   15364:	dec00104 	addi	sp,sp,4
   15368:	f800283a 	ret

0001536c <OSTimeDly>:
* Returns    : none
*********************************************************************************************************
*/

void  OSTimeDly (INT16U ticks)
{
   1536c:	defff904 	addi	sp,sp,-28
   15370:	dfc00615 	stw	ra,24(sp)
   15374:	df000515 	stw	fp,20(sp)
   15378:	df000504 	addi	fp,sp,20
   1537c:	2005883a 	mov	r2,r4
   15380:	e0bfff0d 	sth	r2,-4(fp)
    INT8U      y;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   15384:	e03ffb15 	stw	zero,-20(fp)
#endif



    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
   15388:	008000b4 	movhi	r2,2
   1538c:	10b69a04 	addi	r2,r2,-9624
   15390:	10800003 	ldbu	r2,0(r2)
   15394:	10803fcc 	andi	r2,r2,255
   15398:	10000126 	beq	r2,zero,153a0 <OSTimeDly+0x34>
        return;
   1539c:	00004006 	br	154a0 <OSTimeDly+0x134>
    }
    if (ticks > 0) {                             /* 0 means no delay!                                  */
   153a0:	e0bfff0b 	ldhu	r2,-4(fp)
   153a4:	10003e26 	beq	r2,zero,154a0 <OSTimeDly+0x134>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   153a8:	0005303a 	rdctl	r2,status
   153ac:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   153b0:	e0fffd17 	ldw	r3,-12(fp)
   153b4:	00bfff84 	movi	r2,-2
   153b8:	1884703a 	and	r2,r3,r2
   153bc:	1001703a 	wrctl	status,r2
  
  return context;
   153c0:	e0bffd17 	ldw	r2,-12(fp)
        OS_ENTER_CRITICAL();
   153c4:	e0bffb15 	stw	r2,-20(fp)
        y            =  OSTCBCur->OSTCBY;        /* Delay current task                                 */
   153c8:	008000b4 	movhi	r2,2
   153cc:	10b69b04 	addi	r2,r2,-9620
   153d0:	10800017 	ldw	r2,0(r2)
   153d4:	10800d03 	ldbu	r2,52(r2)
   153d8:	e0bffc05 	stb	r2,-16(fp)
        OSRdyTbl[y] &= ~OSTCBCur->OSTCBBitX;
   153dc:	e0fffc03 	ldbu	r3,-16(fp)
   153e0:	e13ffc03 	ldbu	r4,-16(fp)
   153e4:	008000b4 	movhi	r2,2
   153e8:	10b69844 	addi	r2,r2,-9631
   153ec:	1105883a 	add	r2,r2,r4
   153f0:	10800003 	ldbu	r2,0(r2)
   153f4:	1009883a 	mov	r4,r2
   153f8:	008000b4 	movhi	r2,2
   153fc:	10b69b04 	addi	r2,r2,-9620
   15400:	10800017 	ldw	r2,0(r2)
   15404:	10800d43 	ldbu	r2,53(r2)
   15408:	0084303a 	nor	r2,zero,r2
   1540c:	2084703a 	and	r2,r4,r2
   15410:	1009883a 	mov	r4,r2
   15414:	008000b4 	movhi	r2,2
   15418:	10b69844 	addi	r2,r2,-9631
   1541c:	10c5883a 	add	r2,r2,r3
   15420:	11000005 	stb	r4,0(r2)
        if (OSRdyTbl[y] == 0) {
   15424:	e0fffc03 	ldbu	r3,-16(fp)
   15428:	008000b4 	movhi	r2,2
   1542c:	10b69844 	addi	r2,r2,-9631
   15430:	10c5883a 	add	r2,r2,r3
   15434:	10800003 	ldbu	r2,0(r2)
   15438:	10803fcc 	andi	r2,r2,255
   1543c:	10000e1e 	bne	r2,zero,15478 <OSTimeDly+0x10c>
            OSRdyGrp &= ~OSTCBCur->OSTCBBitY;
   15440:	008000b4 	movhi	r2,2
   15444:	10b69b04 	addi	r2,r2,-9620
   15448:	10800017 	ldw	r2,0(r2)
   1544c:	10800d83 	ldbu	r2,54(r2)
   15450:	0084303a 	nor	r2,zero,r2
   15454:	1007883a 	mov	r3,r2
   15458:	008000b4 	movhi	r2,2
   1545c:	10b69804 	addi	r2,r2,-9632
   15460:	10800003 	ldbu	r2,0(r2)
   15464:	1884703a 	and	r2,r3,r2
   15468:	1007883a 	mov	r3,r2
   1546c:	008000b4 	movhi	r2,2
   15470:	10b69804 	addi	r2,r2,-9632
   15474:	10c00005 	stb	r3,0(r2)
        }
        OSTCBCur->OSTCBDly = ticks;              /* Load ticks in TCB                                  */
   15478:	008000b4 	movhi	r2,2
   1547c:	10b69b04 	addi	r2,r2,-9620
   15480:	10800017 	ldw	r2,0(r2)
   15484:	e0ffff0b 	ldhu	r3,-4(fp)
   15488:	10c00b8d 	sth	r3,46(r2)
   1548c:	e0bffb17 	ldw	r2,-20(fp)
   15490:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   15494:	e0bffe17 	ldw	r2,-8(fp)
   15498:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                              /* Find next task to run!                             */
   1549c:	000f55c0 	call	f55c <OS_Sched>
    }
}
   154a0:	e037883a 	mov	sp,fp
   154a4:	dfc00117 	ldw	ra,4(sp)
   154a8:	df000017 	ldw	fp,0(sp)
   154ac:	dec00204 	addi	sp,sp,8
   154b0:	f800283a 	ret

000154b4 <OSTimeDlyHMSM>:
*********************************************************************************************************
*/

#if OS_TIME_DLY_HMSM_EN > 0
INT8U  OSTimeDlyHMSM (INT8U hours, INT8U minutes, INT8U seconds, INT16U ms)
{
   154b4:	defff804 	addi	sp,sp,-32
   154b8:	dfc00715 	stw	ra,28(sp)
   154bc:	df000615 	stw	fp,24(sp)
   154c0:	df000604 	addi	fp,sp,24
   154c4:	2015883a 	mov	r10,r4
   154c8:	2809883a 	mov	r4,r5
   154cc:	3007883a 	mov	r3,r6
   154d0:	3805883a 	mov	r2,r7
   154d4:	e2bffc05 	stb	r10,-16(fp)
   154d8:	e13ffd05 	stb	r4,-12(fp)
   154dc:	e0fffe05 	stb	r3,-8(fp)
   154e0:	e0bfff0d 	sth	r2,-4(fp)
    INT32U ticks;
    INT16U loops;


    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
   154e4:	008000b4 	movhi	r2,2
   154e8:	10b69a04 	addi	r2,r2,-9624
   154ec:	10800003 	ldbu	r2,0(r2)
   154f0:	10803fcc 	andi	r2,r2,255
   154f4:	10000226 	beq	r2,zero,15500 <OSTimeDlyHMSM+0x4c>
        return (OS_ERR_TIME_DLY_ISR);
   154f8:	00801544 	movi	r2,85
   154fc:	00004206 	br	15608 <OSTimeDlyHMSM+0x154>
    }
#if OS_ARG_CHK_EN > 0
    if (hours == 0) {
   15500:	e0bffc03 	ldbu	r2,-16(fp)
   15504:	1000081e 	bne	r2,zero,15528 <OSTimeDlyHMSM+0x74>
        if (minutes == 0) {
   15508:	e0bffd03 	ldbu	r2,-12(fp)
   1550c:	1000061e 	bne	r2,zero,15528 <OSTimeDlyHMSM+0x74>
            if (seconds == 0) {
   15510:	e0bffe03 	ldbu	r2,-8(fp)
   15514:	1000041e 	bne	r2,zero,15528 <OSTimeDlyHMSM+0x74>
                if (ms == 0) {
   15518:	e0bfff0b 	ldhu	r2,-4(fp)
   1551c:	1000021e 	bne	r2,zero,15528 <OSTimeDlyHMSM+0x74>
                    return (OS_ERR_TIME_ZERO_DLY);
   15520:	00801504 	movi	r2,84
   15524:	00003806 	br	15608 <OSTimeDlyHMSM+0x154>
                }
            }
        }
    }
    if (minutes > 59) {
   15528:	e0bffd03 	ldbu	r2,-12(fp)
   1552c:	10800f30 	cmpltui	r2,r2,60
   15530:	1000021e 	bne	r2,zero,1553c <OSTimeDlyHMSM+0x88>
        return (OS_ERR_TIME_INVALID_MINUTES);    /* Validate arguments to be within range              */
   15534:	00801444 	movi	r2,81
   15538:	00003306 	br	15608 <OSTimeDlyHMSM+0x154>
    }
    if (seconds > 59) {
   1553c:	e0bffe03 	ldbu	r2,-8(fp)
   15540:	10800f30 	cmpltui	r2,r2,60
   15544:	1000021e 	bne	r2,zero,15550 <OSTimeDlyHMSM+0x9c>
        return (OS_ERR_TIME_INVALID_SECONDS);
   15548:	00801484 	movi	r2,82
   1554c:	00002e06 	br	15608 <OSTimeDlyHMSM+0x154>
    }
    if (ms > 999) {
   15550:	e0bfff0b 	ldhu	r2,-4(fp)
   15554:	1080fa30 	cmpltui	r2,r2,1000
   15558:	1000021e 	bne	r2,zero,15564 <OSTimeDlyHMSM+0xb0>
        return (OS_ERR_TIME_INVALID_MS);
   1555c:	008014c4 	movi	r2,83
   15560:	00002906 	br	15608 <OSTimeDlyHMSM+0x154>
    }
#endif
                                                 /* Compute the total number of clock ticks required.. */
                                                 /* .. (rounded to the nearest tick)                   */
    ticks = ((INT32U)hours * 3600L + (INT32U)minutes * 60L + (INT32U)seconds) * OS_TICKS_PER_SEC
   15564:	e0bffc03 	ldbu	r2,-16(fp)
   15568:	10c38424 	muli	r3,r2,3600
   1556c:	e0bffd03 	ldbu	r2,-12(fp)
   15570:	10800f24 	muli	r2,r2,60
   15574:	1887883a 	add	r3,r3,r2
   15578:	e0bffe03 	ldbu	r2,-8(fp)
   1557c:	1885883a 	add	r2,r3,r2
   15580:	100890fa 	slli	r4,r2,3
          + OS_TICKS_PER_SEC * ((INT32U)ms + 500L / OS_TICKS_PER_SEC) / 1000L;
   15584:	e0bfff0b 	ldhu	r2,-4(fp)
   15588:	10800f84 	addi	r2,r2,62
   1558c:	100690fa 	slli	r3,r2,3
   15590:	008418b4 	movhi	r2,4194
   15594:	109374c4 	addi	r2,r2,19923
   15598:	188a383a 	mulxuu	r5,r3,r2
   1559c:	1885383a 	mul	r2,r3,r2
   155a0:	1011883a 	mov	r8,r2
   155a4:	2813883a 	mov	r9,r5
   155a8:	4804d1ba 	srli	r2,r9,6
        return (OS_ERR_TIME_INVALID_MS);
    }
#endif
                                                 /* Compute the total number of clock ticks required.. */
                                                 /* .. (rounded to the nearest tick)                   */
    ticks = ((INT32U)hours * 3600L + (INT32U)minutes * 60L + (INT32U)seconds) * OS_TICKS_PER_SEC
   155ac:	2085883a 	add	r2,r4,r2
   155b0:	e0bffb15 	stw	r2,-20(fp)
          + OS_TICKS_PER_SEC * ((INT32U)ms + 500L / OS_TICKS_PER_SEC) / 1000L;
    loops = (INT16U)(ticks >> 16);               /* Compute the integral number of 65536 tick delays   */
   155b4:	e0bffb17 	ldw	r2,-20(fp)
   155b8:	1004d43a 	srli	r2,r2,16
   155bc:	e0bffa0d 	sth	r2,-24(fp)
    ticks = ticks & 0xFFFFL;                     /* Obtain  the fractional number of ticks             */
   155c0:	e0bffb17 	ldw	r2,-20(fp)
   155c4:	10bfffcc 	andi	r2,r2,65535
   155c8:	e0bffb15 	stw	r2,-20(fp)
    OSTimeDly((INT16U)ticks);
   155cc:	e0bffb17 	ldw	r2,-20(fp)
   155d0:	10bfffcc 	andi	r2,r2,65535
   155d4:	1009883a 	mov	r4,r2
   155d8:	001536c0 	call	1536c <OSTimeDly>
    while (loops > 0) {
   155dc:	00000706 	br	155fc <OSTimeDlyHMSM+0x148>
        OSTimeDly((INT16U)32768u);
   155e0:	01200014 	movui	r4,32768
   155e4:	001536c0 	call	1536c <OSTimeDly>
        OSTimeDly((INT16U)32768u);
   155e8:	01200014 	movui	r4,32768
   155ec:	001536c0 	call	1536c <OSTimeDly>
        loops--;
   155f0:	e0bffa0b 	ldhu	r2,-24(fp)
   155f4:	10bfffc4 	addi	r2,r2,-1
   155f8:	e0bffa0d 	sth	r2,-24(fp)
    ticks = ((INT32U)hours * 3600L + (INT32U)minutes * 60L + (INT32U)seconds) * OS_TICKS_PER_SEC
          + OS_TICKS_PER_SEC * ((INT32U)ms + 500L / OS_TICKS_PER_SEC) / 1000L;
    loops = (INT16U)(ticks >> 16);               /* Compute the integral number of 65536 tick delays   */
    ticks = ticks & 0xFFFFL;                     /* Obtain  the fractional number of ticks             */
    OSTimeDly((INT16U)ticks);
    while (loops > 0) {
   155fc:	e0bffa0b 	ldhu	r2,-24(fp)
   15600:	103ff71e 	bne	r2,zero,155e0 <__alt_mem_Flash_flash_data+0xf40155e0>
        OSTimeDly((INT16U)32768u);
        OSTimeDly((INT16U)32768u);
        loops--;
    }
    return (OS_ERR_NONE);
   15604:	0005883a 	mov	r2,zero
}
   15608:	e037883a 	mov	sp,fp
   1560c:	dfc00117 	ldw	ra,4(sp)
   15610:	df000017 	ldw	fp,0(sp)
   15614:	dec00204 	addi	sp,sp,8
   15618:	f800283a 	ret

0001561c <OSTimeDlyResume>:
*********************************************************************************************************
*/

#if OS_TIME_DLY_RESUME_EN > 0
INT8U  OSTimeDlyResume (INT8U prio)
{
   1561c:	defff504 	addi	sp,sp,-44
   15620:	dfc00a15 	stw	ra,40(sp)
   15624:	df000915 	stw	fp,36(sp)
   15628:	df000904 	addi	fp,sp,36
   1562c:	2005883a 	mov	r2,r4
   15630:	e0bfff05 	stb	r2,-4(fp)
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                                    /* Storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   15634:	e03ff715 	stw	zero,-36(fp)
#endif



    if (prio >= OS_LOWEST_PRIO) {
   15638:	e0bfff03 	ldbu	r2,-4(fp)
   1563c:	10800530 	cmpltui	r2,r2,20
   15640:	1000021e 	bne	r2,zero,1564c <OSTimeDlyResume+0x30>
        return (OS_ERR_PRIO_INVALID);
   15644:	00800a84 	movi	r2,42
   15648:	00006b06 	br	157f8 <OSTimeDlyResume+0x1dc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1564c:	0005303a 	rdctl	r2,status
   15650:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   15654:	e0fff917 	ldw	r3,-28(fp)
   15658:	00bfff84 	movi	r2,-2
   1565c:	1884703a 	and	r2,r3,r2
   15660:	1001703a 	wrctl	status,r2
  
  return context;
   15664:	e0bff917 	ldw	r2,-28(fp)
    }
    OS_ENTER_CRITICAL();
   15668:	e0bff715 	stw	r2,-36(fp)
    ptcb = OSTCBPrioTbl[prio];                                 /* Make sure that task exist            */
   1566c:	e0ffff03 	ldbu	r3,-4(fp)
   15670:	008000b4 	movhi	r2,2
   15674:	109b2204 	addi	r2,r2,27784
   15678:	18c7883a 	add	r3,r3,r3
   1567c:	18c7883a 	add	r3,r3,r3
   15680:	10c5883a 	add	r2,r2,r3
   15684:	10800017 	ldw	r2,0(r2)
   15688:	e0bff815 	stw	r2,-32(fp)
    if (ptcb == (OS_TCB *)0) {
   1568c:	e0bff817 	ldw	r2,-32(fp)
   15690:	1000061e 	bne	r2,zero,156ac <OSTimeDlyResume+0x90>
   15694:	e0bff717 	ldw	r2,-36(fp)
   15698:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1569c:	e0bffa17 	ldw	r2,-24(fp)
   156a0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);                        /* The task does not exist              */
   156a4:	008010c4 	movi	r2,67
   156a8:	00005306 	br	157f8 <OSTimeDlyResume+0x1dc>
    }
    if (ptcb == OS_TCB_RESERVED) {
   156ac:	e0bff817 	ldw	r2,-32(fp)
   156b0:	10800058 	cmpnei	r2,r2,1
   156b4:	1000061e 	bne	r2,zero,156d0 <OSTimeDlyResume+0xb4>
   156b8:	e0bff717 	ldw	r2,-36(fp)
   156bc:	e0bffb15 	stw	r2,-20(fp)
   156c0:	e0bffb17 	ldw	r2,-20(fp)
   156c4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);                        /* The task does not exist              */
   156c8:	008010c4 	movi	r2,67
   156cc:	00004a06 	br	157f8 <OSTimeDlyResume+0x1dc>
    }
    if (ptcb->OSTCBDly == 0) {                                 /* See if task is delayed               */
   156d0:	e0bff817 	ldw	r2,-32(fp)
   156d4:	10800b8b 	ldhu	r2,46(r2)
   156d8:	10bfffcc 	andi	r2,r2,65535
   156dc:	1000061e 	bne	r2,zero,156f8 <OSTimeDlyResume+0xdc>
   156e0:	e0bff717 	ldw	r2,-36(fp)
   156e4:	e0bffc15 	stw	r2,-16(fp)
   156e8:	e0bffc17 	ldw	r2,-16(fp)
   156ec:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TIME_NOT_DLY);                          /* Indicate that task was not delayed   */
   156f0:	00801404 	movi	r2,80
   156f4:	00004006 	br	157f8 <OSTimeDlyResume+0x1dc>
    }

    ptcb->OSTCBDly = 0;                                        /* Clear the time delay                 */
   156f8:	e0bff817 	ldw	r2,-32(fp)
   156fc:	10000b8d 	sth	zero,46(r2)
    if ((ptcb->OSTCBStat & OS_STAT_PEND_ANY) != OS_STAT_RDY) {
   15700:	e0bff817 	ldw	r2,-32(fp)
   15704:	10800c03 	ldbu	r2,48(r2)
   15708:	10803fcc 	andi	r2,r2,255
   1570c:	10800dcc 	andi	r2,r2,55
   15710:	10000b26 	beq	r2,zero,15740 <OSTimeDlyResume+0x124>
        ptcb->OSTCBStat     &= ~OS_STAT_PEND_ANY;              /* Yes, Clear status flag               */
   15714:	e0bff817 	ldw	r2,-32(fp)
   15718:	10c00c03 	ldbu	r3,48(r2)
   1571c:	00bff204 	movi	r2,-56
   15720:	1884703a 	and	r2,r3,r2
   15724:	1007883a 	mov	r3,r2
   15728:	e0bff817 	ldw	r2,-32(fp)
   1572c:	10c00c05 	stb	r3,48(r2)
        ptcb->OSTCBStatPend  =  OS_STAT_PEND_TO;               /* Indicate PEND timeout                */
   15730:	e0bff817 	ldw	r2,-32(fp)
   15734:	00c00044 	movi	r3,1
   15738:	10c00c45 	stb	r3,49(r2)
   1573c:	00000206 	br	15748 <OSTimeDlyResume+0x12c>
    } else {
        ptcb->OSTCBStatPend  =  OS_STAT_PEND_OK;
   15740:	e0bff817 	ldw	r2,-32(fp)
   15744:	10000c45 	stb	zero,49(r2)
    }
    if ((ptcb->OSTCBStat & OS_STAT_SUSPEND) == OS_STAT_RDY) {  /* Is task suspended?                   */
   15748:	e0bff817 	ldw	r2,-32(fp)
   1574c:	10800c03 	ldbu	r2,48(r2)
   15750:	10803fcc 	andi	r2,r2,255
   15754:	1080020c 	andi	r2,r2,8
   15758:	1000221e 	bne	r2,zero,157e4 <OSTimeDlyResume+0x1c8>
        OSRdyGrp               |= ptcb->OSTCBBitY;             /* No,  Make ready                      */
   1575c:	e0bff817 	ldw	r2,-32(fp)
   15760:	10c00d83 	ldbu	r3,54(r2)
   15764:	008000b4 	movhi	r2,2
   15768:	10b69804 	addi	r2,r2,-9632
   1576c:	10800003 	ldbu	r2,0(r2)
   15770:	1884b03a 	or	r2,r3,r2
   15774:	1007883a 	mov	r3,r2
   15778:	008000b4 	movhi	r2,2
   1577c:	10b69804 	addi	r2,r2,-9632
   15780:	10c00005 	stb	r3,0(r2)
        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
   15784:	e0bff817 	ldw	r2,-32(fp)
   15788:	10800d03 	ldbu	r2,52(r2)
   1578c:	10c03fcc 	andi	r3,r2,255
   15790:	e0bff817 	ldw	r2,-32(fp)
   15794:	10800d03 	ldbu	r2,52(r2)
   15798:	11003fcc 	andi	r4,r2,255
   1579c:	008000b4 	movhi	r2,2
   157a0:	10b69844 	addi	r2,r2,-9631
   157a4:	1105883a 	add	r2,r2,r4
   157a8:	11000003 	ldbu	r4,0(r2)
   157ac:	e0bff817 	ldw	r2,-32(fp)
   157b0:	10800d43 	ldbu	r2,53(r2)
   157b4:	2084b03a 	or	r2,r4,r2
   157b8:	1009883a 	mov	r4,r2
   157bc:	008000b4 	movhi	r2,2
   157c0:	10b69844 	addi	r2,r2,-9631
   157c4:	10c5883a 	add	r2,r2,r3
   157c8:	11000005 	stb	r4,0(r2)
   157cc:	e0bff717 	ldw	r2,-36(fp)
   157d0:	e0bffd15 	stw	r2,-12(fp)
   157d4:	e0bffd17 	ldw	r2,-12(fp)
   157d8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                                            /* See if this is new highest priority  */
   157dc:	000f55c0 	call	f55c <OS_Sched>
   157e0:	00000406 	br	157f4 <OSTimeDlyResume+0x1d8>
   157e4:	e0bff717 	ldw	r2,-36(fp)
   157e8:	e0bffe15 	stw	r2,-8(fp)
   157ec:	e0bffe17 	ldw	r2,-8(fp)
   157f0:	1001703a 	wrctl	status,r2
    } else {
        OS_EXIT_CRITICAL();                                    /* Task may be suspended                */
    }
    return (OS_ERR_NONE);
   157f4:	0005883a 	mov	r2,zero
}
   157f8:	e037883a 	mov	sp,fp
   157fc:	dfc00117 	ldw	ra,4(sp)
   15800:	df000017 	ldw	fp,0(sp)
   15804:	dec00204 	addi	sp,sp,8
   15808:	f800283a 	ret

0001580c <OSTimeGet>:
*********************************************************************************************************
*/

#if OS_TIME_GET_SET_EN > 0
INT32U  OSTimeGet (void)
{
   1580c:	defffb04 	addi	sp,sp,-20
   15810:	df000415 	stw	fp,16(sp)
   15814:	df000404 	addi	fp,sp,16
    INT32U     ticks;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   15818:	e03ffc15 	stw	zero,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1581c:	0005303a 	rdctl	r2,status
   15820:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   15824:	e0fffe17 	ldw	r3,-8(fp)
   15828:	00bfff84 	movi	r2,-2
   1582c:	1884703a 	and	r2,r3,r2
   15830:	1001703a 	wrctl	status,r2
  
  return context;
   15834:	e0bffe17 	ldw	r2,-8(fp)
#endif



    OS_ENTER_CRITICAL();
   15838:	e0bffc15 	stw	r2,-16(fp)
    ticks = OSTime;
   1583c:	008000b4 	movhi	r2,2
   15840:	10b69c04 	addi	r2,r2,-9616
   15844:	10800017 	ldw	r2,0(r2)
   15848:	e0bffd15 	stw	r2,-12(fp)
   1584c:	e0bffc17 	ldw	r2,-16(fp)
   15850:	e0bfff15 	stw	r2,-4(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   15854:	e0bfff17 	ldw	r2,-4(fp)
   15858:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (ticks);
   1585c:	e0bffd17 	ldw	r2,-12(fp)
}
   15860:	e037883a 	mov	sp,fp
   15864:	df000017 	ldw	fp,0(sp)
   15868:	dec00104 	addi	sp,sp,4
   1586c:	f800283a 	ret

00015870 <OSTimeSet>:
*********************************************************************************************************
*/

#if OS_TIME_GET_SET_EN > 0
void  OSTimeSet (INT32U ticks)
{
   15870:	defffb04 	addi	sp,sp,-20
   15874:	df000415 	stw	fp,16(sp)
   15878:	df000404 	addi	fp,sp,16
   1587c:	e13fff15 	stw	r4,-4(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   15880:	e03ffc15 	stw	zero,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   15884:	0005303a 	rdctl	r2,status
   15888:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1588c:	e0fffd17 	ldw	r3,-12(fp)
   15890:	00bfff84 	movi	r2,-2
   15894:	1884703a 	and	r2,r3,r2
   15898:	1001703a 	wrctl	status,r2
  
  return context;
   1589c:	e0bffd17 	ldw	r2,-12(fp)
#endif



    OS_ENTER_CRITICAL();
   158a0:	e0bffc15 	stw	r2,-16(fp)
    OSTime = ticks;
   158a4:	008000b4 	movhi	r2,2
   158a8:	10b69c04 	addi	r2,r2,-9616
   158ac:	e0ffff17 	ldw	r3,-4(fp)
   158b0:	10c00015 	stw	r3,0(r2)
   158b4:	e0bffc17 	ldw	r2,-16(fp)
   158b8:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   158bc:	e0bffe17 	ldw	r2,-8(fp)
   158c0:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
}
   158c4:	e037883a 	mov	sp,fp
   158c8:	df000017 	ldw	fp,0(sp)
   158cc:	dec00104 	addi	sp,sp,4
   158d0:	f800283a 	ret

000158d4 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
   158d4:	defffd04 	addi	sp,sp,-12
   158d8:	dfc00215 	stw	ra,8(sp)
   158dc:	df000115 	stw	fp,4(sp)
   158e0:	df000104 	addi	fp,sp,4
   158e4:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
   158e8:	e13fff17 	ldw	r4,-4(fp)
   158ec:	014000b4 	movhi	r5,2
   158f0:	296e9504 	addi	r5,r5,-17836
   158f4:	00182a80 	call	182a8 <alt_dev_llist_insert>
}
   158f8:	e037883a 	mov	sp,fp
   158fc:	dfc00117 	ldw	ra,4(sp)
   15900:	df000017 	ldw	fp,0(sp)
   15904:	dec00204 	addi	sp,sp,8
   15908:	f800283a 	ret

0001590c <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
   1590c:	defffd04 	addi	sp,sp,-12
   15910:	dfc00215 	stw	ra,8(sp)
   15914:	df000115 	stw	fp,4(sp)
   15918:	df000104 	addi	fp,sp,4
   1591c:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2, Nios2);
   15920:	0018bbc0 	call	18bbc <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
   15924:	00800044 	movi	r2,1
   15928:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
   1592c:	e037883a 	mov	sp,fp
   15930:	dfc00117 	ldw	ra,4(sp)
   15934:	df000017 	ldw	fp,0(sp)
   15938:	dec00204 	addi	sp,sp,8
   1593c:	f800283a 	ret

00015940 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
   15940:	defffd04 	addi	sp,sp,-12
   15944:	dfc00215 	stw	ra,8(sp)
   15948:	df000115 	stw	fp,4(sp)
   1594c:	df000104 	addi	fp,sp,4
    ALTERA_AVALON_TIMER_INIT ( INTERVAL_TIMER, Interval_Timer);
   15950:	01040034 	movhi	r4,4096
   15954:	21080004 	addi	r4,r4,8192
   15958:	000b883a 	mov	r5,zero
   1595c:	000d883a 	mov	r6,zero
   15960:	01c00204 	movi	r7,8
   15964:	0016ab40 	call	16ab4 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, JTAG_UART);
   15968:	010000b4 	movhi	r4,2
   1596c:	21299904 	addi	r4,r4,-22940
   15970:	000b883a 	mov	r5,zero
   15974:	01800204 	movi	r6,8
   15978:	0015e7c0 	call	15e7c <altera_avalon_jtag_uart_init>
   1597c:	010000b4 	movhi	r4,2
   15980:	21298f04 	addi	r4,r4,-22980
   15984:	00158d40 	call	158d4 <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID, SysID);
   15988:	0001883a 	nop
    ALTERA_UP_AVALON_AUDIO_AND_VIDEO_CONFIG_INIT ( AV_CONFIG, AV_Config);
   1598c:	010000b4 	movhi	r4,2
   15990:	212daa04 	addi	r4,r4,-18776
   15994:	00158d40 	call	158d4 <alt_dev_reg>
    ALTERA_UP_AVALON_AUDIO_INIT ( AUDIO_SUBSYSTEM_AUDIO, Audio_Subsystem_Audio);
   15998:	010000b4 	movhi	r4,2
   1599c:	212db604 	addi	r4,r4,-18728
   159a0:	00158d40 	call	158d4 <alt_dev_reg>
    ALTERA_UP_AVALON_CHARACTER_LCD_INIT ( CHAR_LCD_16X2, Char_LCD_16x2);
   159a4:	010000b4 	movhi	r4,2
   159a8:	212dc204 	addi	r4,r4,-18680
   159ac:	0016be40 	call	16be4 <alt_up_character_lcd_init>
   159b0:	010000b4 	movhi	r4,2
   159b4:	212dc204 	addi	r4,r4,-18680
   159b8:	00158d40 	call	158d4 <alt_dev_reg>
    ALTERA_UP_AVALON_IRDA_INIT ( IRDA, IrDA);
   159bc:	010000b4 	movhi	r4,2
   159c0:	212dcd04 	addi	r4,r4,-18636
   159c4:	00158d40 	call	158d4 <alt_dev_reg>
    ALTERA_UP_AVALON_PARALLEL_PORT_INIT ( EXPANSION_JP5, Expansion_JP5);
   159c8:	010000b4 	movhi	r4,2
   159cc:	212dd804 	addi	r4,r4,-18592
   159d0:	00158d40 	call	158d4 <alt_dev_reg>
    ALTERA_UP_AVALON_PARALLEL_PORT_INIT ( GREEN_LEDS, Green_LEDs);
   159d4:	010000b4 	movhi	r4,2
   159d8:	212de304 	addi	r4,r4,-18548
   159dc:	00158d40 	call	158d4 <alt_dev_reg>
    ALTERA_UP_AVALON_PARALLEL_PORT_INIT ( HEX3_HEX0, HEX3_HEX0);
   159e0:	010000b4 	movhi	r4,2
   159e4:	212dee04 	addi	r4,r4,-18504
   159e8:	00158d40 	call	158d4 <alt_dev_reg>
    ALTERA_UP_AVALON_PARALLEL_PORT_INIT ( HEX7_HEX4, HEX7_HEX4);
   159ec:	010000b4 	movhi	r4,2
   159f0:	212df904 	addi	r4,r4,-18460
   159f4:	00158d40 	call	158d4 <alt_dev_reg>
    ALTERA_UP_AVALON_PARALLEL_PORT_INIT ( PUSHBUTTONS, Pushbuttons);
   159f8:	010000b4 	movhi	r4,2
   159fc:	212e0404 	addi	r4,r4,-18416
   15a00:	00158d40 	call	158d4 <alt_dev_reg>
    ALTERA_UP_AVALON_PARALLEL_PORT_INIT ( RED_LEDS, Red_LEDs);
   15a04:	010000b4 	movhi	r4,2
   15a08:	212e0f04 	addi	r4,r4,-18372
   15a0c:	00158d40 	call	158d4 <alt_dev_reg>
    ALTERA_UP_AVALON_PARALLEL_PORT_INIT ( SLIDER_SWITCHES, Slider_Switches);
   15a10:	010000b4 	movhi	r4,2
   15a14:	212e1a04 	addi	r4,r4,-18328
   15a18:	00158d40 	call	158d4 <alt_dev_reg>
    ALTERA_UP_AVALON_PS2_INIT ( PS2_PORT, PS2_Port);
   15a1c:	010000b4 	movhi	r4,2
   15a20:	212e2504 	addi	r4,r4,-18284
   15a24:	00174fc0 	call	174fc <alt_up_ps2_init>
   15a28:	010000b4 	movhi	r4,2
   15a2c:	212e2504 	addi	r4,r4,-18284
   15a30:	00158d40 	call	158d4 <alt_dev_reg>
    ALTERA_UP_AVALON_PS2_INIT ( PS2_PORT_DUAL, PS2_Port_Dual);
   15a34:	010000b4 	movhi	r4,2
   15a38:	212e3304 	addi	r4,r4,-18228
   15a3c:	00174fc0 	call	174fc <alt_up_ps2_init>
   15a40:	010000b4 	movhi	r4,2
   15a44:	212e3304 	addi	r4,r4,-18228
   15a48:	00158d40 	call	158d4 <alt_dev_reg>
    ALTERA_UP_AVALON_RS232_INIT ( SERIAL_PORT, Serial_Port);
   15a4c:	010000b4 	movhi	r4,2
   15a50:	212e4104 	addi	r4,r4,-18172
   15a54:	00158d40 	call	158d4 <alt_dev_reg>
    ALTERA_UP_AVALON_USB_INIT ( USB, USB);
   15a58:	010000b4 	movhi	r4,2
   15a5c:	212e4c04 	addi	r4,r4,-18128
   15a60:	00158d40 	call	158d4 <alt_dev_reg>
    ALTERA_UP_AVALON_VIDEO_CHARACTER_BUFFER_WITH_DMA_INIT ( VGA_SUBSYSTEM_VGA_CHAR_BUFFER, VGA_Subsystem_VGA_Char_Buffer);
   15a64:	008000b4 	movhi	r2,2
   15a68:	10ae5904 	addi	r2,r2,-18076
   15a6c:	10800a17 	ldw	r2,40(r2)
   15a70:	10800104 	addi	r2,r2,4
   15a74:	10800017 	ldw	r2,0(r2)
   15a78:	10ffffcc 	andi	r3,r2,65535
   15a7c:	008000b4 	movhi	r2,2
   15a80:	10ae5904 	addi	r2,r2,-18076
   15a84:	10c00c15 	stw	r3,48(r2)
   15a88:	008000b4 	movhi	r2,2
   15a8c:	10ae5904 	addi	r2,r2,-18076
   15a90:	10800a17 	ldw	r2,40(r2)
   15a94:	10800104 	addi	r2,r2,4
   15a98:	10800017 	ldw	r2,0(r2)
   15a9c:	1006d43a 	srli	r3,r2,16
   15aa0:	008000b4 	movhi	r2,2
   15aa4:	10ae5904 	addi	r2,r2,-18076
   15aa8:	10c00d15 	stw	r3,52(r2)
   15aac:	008000b4 	movhi	r2,2
   15ab0:	10ae5904 	addi	r2,r2,-18076
   15ab4:	10800c17 	ldw	r2,48(r2)
   15ab8:	10801068 	cmpgeui	r2,r2,65
   15abc:	1000081e 	bne	r2,zero,15ae0 <alt_sys_init+0x1a0>
   15ac0:	008000b4 	movhi	r2,2
   15ac4:	10ae5904 	addi	r2,r2,-18076
   15ac8:	00c00fc4 	movi	r3,63
   15acc:	10c00f15 	stw	r3,60(r2)
   15ad0:	008000b4 	movhi	r2,2
   15ad4:	10ae5904 	addi	r2,r2,-18076
   15ad8:	00c00184 	movi	r3,6
   15adc:	10c01015 	stw	r3,64(r2)
   15ae0:	008000b4 	movhi	r2,2
   15ae4:	10ae5904 	addi	r2,r2,-18076
   15ae8:	10800d17 	ldw	r2,52(r2)
   15aec:	10800868 	cmpgeui	r2,r2,33
   15af0:	1000041e 	bne	r2,zero,15b04 <alt_sys_init+0x1c4>
   15af4:	008000b4 	movhi	r2,2
   15af8:	10ae5904 	addi	r2,r2,-18076
   15afc:	00c007c4 	movi	r3,31
   15b00:	10c01115 	stw	r3,68(r2)
   15b04:	010000b4 	movhi	r4,2
   15b08:	212e5904 	addi	r4,r4,-18076
   15b0c:	0017e140 	call	17e14 <alt_up_char_buffer_init>
   15b10:	010000b4 	movhi	r4,2
   15b14:	212e5904 	addi	r4,r4,-18076
   15b18:	00158d40 	call	158d4 <alt_dev_reg>
    ALTERA_UP_AVALON_VIDEO_PIXEL_BUFFER_DMA_INIT ( VGA_SUBSYSTEM_VGA_PIXEL_DMA, VGA_Subsystem_VGA_Pixel_DMA);
   15b1c:	008000b4 	movhi	r2,2
   15b20:	10ae6b04 	addi	r2,r2,-18004
   15b24:	10800a17 	ldw	r2,40(r2)
   15b28:	10800017 	ldw	r2,0(r2)
   15b2c:	1007883a 	mov	r3,r2
   15b30:	008000b4 	movhi	r2,2
   15b34:	10ae6b04 	addi	r2,r2,-18004
   15b38:	10c00b15 	stw	r3,44(r2)
   15b3c:	008000b4 	movhi	r2,2
   15b40:	10ae6b04 	addi	r2,r2,-18004
   15b44:	10800a17 	ldw	r2,40(r2)
   15b48:	10800104 	addi	r2,r2,4
   15b4c:	10800017 	ldw	r2,0(r2)
   15b50:	1007883a 	mov	r3,r2
   15b54:	008000b4 	movhi	r2,2
   15b58:	10ae6b04 	addi	r2,r2,-18004
   15b5c:	10c00c15 	stw	r3,48(r2)
   15b60:	008000b4 	movhi	r2,2
   15b64:	10ae6b04 	addi	r2,r2,-18004
   15b68:	10800a17 	ldw	r2,40(r2)
   15b6c:	10800204 	addi	r2,r2,8
   15b70:	10800017 	ldw	r2,0(r2)
   15b74:	10ffffcc 	andi	r3,r2,65535
   15b78:	008000b4 	movhi	r2,2
   15b7c:	10ae6b04 	addi	r2,r2,-18004
   15b80:	10c00f15 	stw	r3,60(r2)
   15b84:	008000b4 	movhi	r2,2
   15b88:	10ae6b04 	addi	r2,r2,-18004
   15b8c:	10800a17 	ldw	r2,40(r2)
   15b90:	10800204 	addi	r2,r2,8
   15b94:	10800017 	ldw	r2,0(r2)
   15b98:	1006d43a 	srli	r3,r2,16
   15b9c:	008000b4 	movhi	r2,2
   15ba0:	10ae6b04 	addi	r2,r2,-18004
   15ba4:	10c01015 	stw	r3,64(r2)
   15ba8:	008000b4 	movhi	r2,2
   15bac:	10ae6b04 	addi	r2,r2,-18004
   15bb0:	10800a17 	ldw	r2,40(r2)
   15bb4:	10800304 	addi	r2,r2,12
   15bb8:	10800017 	ldw	r2,0(r2)
   15bbc:	1005d07a 	srai	r2,r2,1
   15bc0:	10c0004c 	andi	r3,r2,1
   15bc4:	008000b4 	movhi	r2,2
   15bc8:	10ae6b04 	addi	r2,r2,-18004
   15bcc:	10c00d15 	stw	r3,52(r2)
   15bd0:	008000b4 	movhi	r2,2
   15bd4:	10ae6b04 	addi	r2,r2,-18004
   15bd8:	10800a17 	ldw	r2,40(r2)
   15bdc:	10800304 	addi	r2,r2,12
   15be0:	10800017 	ldw	r2,0(r2)
   15be4:	1005d13a 	srai	r2,r2,4
   15be8:	10c003cc 	andi	r3,r2,15
   15bec:	008000b4 	movhi	r2,2
   15bf0:	10ae6b04 	addi	r2,r2,-18004
   15bf4:	10c00e15 	stw	r3,56(r2)
   15bf8:	008000b4 	movhi	r2,2
   15bfc:	10ae6b04 	addi	r2,r2,-18004
   15c00:	10800a17 	ldw	r2,40(r2)
   15c04:	10800304 	addi	r2,r2,12
   15c08:	10800017 	ldw	r2,0(r2)
   15c0c:	1005d43a 	srai	r2,r2,16
   15c10:	e0bfff05 	stb	r2,-4(fp)
   15c14:	008000b4 	movhi	r2,2
   15c18:	10ae6b04 	addi	r2,r2,-18004
   15c1c:	10800a17 	ldw	r2,40(r2)
   15c20:	10800304 	addi	r2,r2,12
   15c24:	10800017 	ldw	r2,0(r2)
   15c28:	1004d63a 	srli	r2,r2,24
   15c2c:	e0bfff45 	stb	r2,-3(fp)
   15c30:	008000b4 	movhi	r2,2
   15c34:	10ae6b04 	addi	r2,r2,-18004
   15c38:	10800e17 	ldw	r2,56(r2)
   15c3c:	10800058 	cmpnei	r2,r2,1
   15c40:	1000041e 	bne	r2,zero,15c54 <alt_sys_init+0x314>
   15c44:	008000b4 	movhi	r2,2
   15c48:	10ae6b04 	addi	r2,r2,-18004
   15c4c:	10001115 	stw	zero,68(r2)
   15c50:	00000e06 	br	15c8c <alt_sys_init+0x34c>
   15c54:	008000b4 	movhi	r2,2
   15c58:	10ae6b04 	addi	r2,r2,-18004
   15c5c:	10800e17 	ldw	r2,56(r2)
   15c60:	10800098 	cmpnei	r2,r2,2
   15c64:	1000051e 	bne	r2,zero,15c7c <alt_sys_init+0x33c>
   15c68:	008000b4 	movhi	r2,2
   15c6c:	10ae6b04 	addi	r2,r2,-18004
   15c70:	00c00044 	movi	r3,1
   15c74:	10c01115 	stw	r3,68(r2)
   15c78:	00000406 	br	15c8c <alt_sys_init+0x34c>
   15c7c:	008000b4 	movhi	r2,2
   15c80:	10ae6b04 	addi	r2,r2,-18004
   15c84:	00c00084 	movi	r3,2
   15c88:	10c01115 	stw	r3,68(r2)
   15c8c:	e0bfff03 	ldbu	r2,-4(fp)
   15c90:	00c00804 	movi	r3,32
   15c94:	1885c83a 	sub	r2,r3,r2
   15c98:	00ffffc4 	movi	r3,-1
   15c9c:	1886d83a 	srl	r3,r3,r2
   15ca0:	008000b4 	movhi	r2,2
   15ca4:	10ae6b04 	addi	r2,r2,-18004
   15ca8:	10c01215 	stw	r3,72(r2)
   15cac:	e0ffff03 	ldbu	r3,-4(fp)
   15cb0:	008000b4 	movhi	r2,2
   15cb4:	10ae6b04 	addi	r2,r2,-18004
   15cb8:	10801117 	ldw	r2,68(r2)
   15cbc:	1887883a 	add	r3,r3,r2
   15cc0:	008000b4 	movhi	r2,2
   15cc4:	10ae6b04 	addi	r2,r2,-18004
   15cc8:	10c01315 	stw	r3,76(r2)
   15ccc:	e0bfff43 	ldbu	r2,-3(fp)
   15cd0:	00c00804 	movi	r3,32
   15cd4:	1885c83a 	sub	r2,r3,r2
   15cd8:	00ffffc4 	movi	r3,-1
   15cdc:	1886d83a 	srl	r3,r3,r2
   15ce0:	008000b4 	movhi	r2,2
   15ce4:	10ae6b04 	addi	r2,r2,-18004
   15ce8:	10c01415 	stw	r3,80(r2)
   15cec:	010000b4 	movhi	r4,2
   15cf0:	212e6b04 	addi	r4,r4,-18004
   15cf4:	00158d40 	call	158d4 <alt_dev_reg>
    ALTERA_UP_SD_CARD_AVALON_INTERFACE_INIT ( SD_CARD, SD_Card);
   15cf8:	010000b4 	movhi	r4,2
   15cfc:	212e8004 	addi	r4,r4,-17920
   15d00:	00158d40 	call	158d4 <alt_dev_reg>
}
   15d04:	e037883a 	mov	sp,fp
   15d08:	dfc00117 	ldw	ra,4(sp)
   15d0c:	df000017 	ldw	fp,0(sp)
   15d10:	dec00204 	addi	sp,sp,8
   15d14:	f800283a 	ret

00015d18 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
   15d18:	defffa04 	addi	sp,sp,-24
   15d1c:	dfc00515 	stw	ra,20(sp)
   15d20:	df000415 	stw	fp,16(sp)
   15d24:	df000404 	addi	fp,sp,16
   15d28:	e13ffd15 	stw	r4,-12(fp)
   15d2c:	e17ffe15 	stw	r5,-8(fp)
   15d30:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   15d34:	e0bffd17 	ldw	r2,-12(fp)
   15d38:	10800017 	ldw	r2,0(r2)
   15d3c:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
   15d40:	e0bffc17 	ldw	r2,-16(fp)
   15d44:	10c00a04 	addi	r3,r2,40
   15d48:	e0bffd17 	ldw	r2,-12(fp)
   15d4c:	10800217 	ldw	r2,8(r2)
   15d50:	1809883a 	mov	r4,r3
   15d54:	e17ffe17 	ldw	r5,-8(fp)
   15d58:	e1bfff17 	ldw	r6,-4(fp)
   15d5c:	100f883a 	mov	r7,r2
   15d60:	00164c80 	call	164c8 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
   15d64:	e037883a 	mov	sp,fp
   15d68:	dfc00117 	ldw	ra,4(sp)
   15d6c:	df000017 	ldw	fp,0(sp)
   15d70:	dec00204 	addi	sp,sp,8
   15d74:	f800283a 	ret

00015d78 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
   15d78:	defffa04 	addi	sp,sp,-24
   15d7c:	dfc00515 	stw	ra,20(sp)
   15d80:	df000415 	stw	fp,16(sp)
   15d84:	df000404 	addi	fp,sp,16
   15d88:	e13ffd15 	stw	r4,-12(fp)
   15d8c:	e17ffe15 	stw	r5,-8(fp)
   15d90:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   15d94:	e0bffd17 	ldw	r2,-12(fp)
   15d98:	10800017 	ldw	r2,0(r2)
   15d9c:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
   15da0:	e0bffc17 	ldw	r2,-16(fp)
   15da4:	10c00a04 	addi	r3,r2,40
   15da8:	e0bffd17 	ldw	r2,-12(fp)
   15dac:	10800217 	ldw	r2,8(r2)
   15db0:	1809883a 	mov	r4,r3
   15db4:	e17ffe17 	ldw	r5,-8(fp)
   15db8:	e1bfff17 	ldw	r6,-4(fp)
   15dbc:	100f883a 	mov	r7,r2
   15dc0:	001677c0 	call	1677c <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
   15dc4:	e037883a 	mov	sp,fp
   15dc8:	dfc00117 	ldw	ra,4(sp)
   15dcc:	df000017 	ldw	fp,0(sp)
   15dd0:	dec00204 	addi	sp,sp,8
   15dd4:	f800283a 	ret

00015dd8 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
   15dd8:	defffc04 	addi	sp,sp,-16
   15ddc:	dfc00315 	stw	ra,12(sp)
   15de0:	df000215 	stw	fp,8(sp)
   15de4:	df000204 	addi	fp,sp,8
   15de8:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   15dec:	e0bfff17 	ldw	r2,-4(fp)
   15df0:	10800017 	ldw	r2,0(r2)
   15df4:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
   15df8:	e0bffe17 	ldw	r2,-8(fp)
   15dfc:	10c00a04 	addi	r3,r2,40
   15e00:	e0bfff17 	ldw	r2,-4(fp)
   15e04:	10800217 	ldw	r2,8(r2)
   15e08:	1809883a 	mov	r4,r3
   15e0c:	100b883a 	mov	r5,r2
   15e10:	00163740 	call	16374 <altera_avalon_jtag_uart_close>
}
   15e14:	e037883a 	mov	sp,fp
   15e18:	dfc00117 	ldw	ra,4(sp)
   15e1c:	df000017 	ldw	fp,0(sp)
   15e20:	dec00204 	addi	sp,sp,8
   15e24:	f800283a 	ret

00015e28 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
   15e28:	defffa04 	addi	sp,sp,-24
   15e2c:	dfc00515 	stw	ra,20(sp)
   15e30:	df000415 	stw	fp,16(sp)
   15e34:	df000404 	addi	fp,sp,16
   15e38:	e13ffd15 	stw	r4,-12(fp)
   15e3c:	e17ffe15 	stw	r5,-8(fp)
   15e40:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
   15e44:	e0bffd17 	ldw	r2,-12(fp)
   15e48:	10800017 	ldw	r2,0(r2)
   15e4c:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
   15e50:	e0bffc17 	ldw	r2,-16(fp)
   15e54:	10800a04 	addi	r2,r2,40
   15e58:	1009883a 	mov	r4,r2
   15e5c:	e17ffe17 	ldw	r5,-8(fp)
   15e60:	e1bfff17 	ldw	r6,-4(fp)
   15e64:	00163dc0 	call	163dc <altera_avalon_jtag_uart_ioctl>
}
   15e68:	e037883a 	mov	sp,fp
   15e6c:	dfc00117 	ldw	ra,4(sp)
   15e70:	df000017 	ldw	fp,0(sp)
   15e74:	dec00204 	addi	sp,sp,8
   15e78:	f800283a 	ret

00015e7c <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
   15e7c:	defff104 	addi	sp,sp,-60
   15e80:	dfc00e15 	stw	ra,56(sp)
   15e84:	df000d15 	stw	fp,52(sp)
   15e88:	df000d04 	addi	fp,sp,52
   15e8c:	e13ff915 	stw	r4,-28(fp)
   15e90:	e17ffa15 	stw	r5,-24(fp)
   15e94:	e1bffb15 	stw	r6,-20(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
   15e98:	e0bff917 	ldw	r2,-28(fp)
   15e9c:	10800c04 	addi	r2,r2,48
   15ea0:	e0bff315 	stw	r2,-52(fp)
   15ea4:	e03ff40d 	sth	zero,-48(fp)

static ALT_INLINE int ALT_ALWAYS_INLINE alt_flag_create (OS_FLAG_GRP** pgroup, 
               OS_FLAGS flags)
{
  INT8U err;
  *pgroup = OSFlagCreate (flags, &err);
   15ea8:	e0fff40b 	ldhu	r3,-48(fp)
   15eac:	e0bff884 	addi	r2,fp,-30
   15eb0:	1809883a 	mov	r4,r3
   15eb4:	100b883a 	mov	r5,r2
   15eb8:	00100c80 	call	100c8 <OSFlagCreate>
   15ebc:	1007883a 	mov	r3,r2
   15ec0:	e0bff317 	ldw	r2,-52(fp)
   15ec4:	10c00015 	stw	r3,0(r2)
  ALT_SEM_CREATE(&sp->read_lock, 1);
   15ec8:	e0bff917 	ldw	r2,-28(fp)
   15ecc:	10800a04 	addi	r2,r2,40
   15ed0:	e0bff515 	stw	r2,-44(fp)
   15ed4:	00800044 	movi	r2,1
   15ed8:	e0bff60d 	sth	r2,-40(fp)
   15edc:	e0bff60b 	ldhu	r2,-40(fp)
   15ee0:	1009883a 	mov	r4,r2
   15ee4:	00130200 	call	13020 <OSSemCreate>
   15ee8:	1007883a 	mov	r3,r2
   15eec:	e0bff517 	ldw	r2,-44(fp)
   15ef0:	10c00015 	stw	r3,0(r2)
  ALT_SEM_CREATE(&sp->write_lock, 1);
   15ef4:	e0bff917 	ldw	r2,-28(fp)
   15ef8:	10800b04 	addi	r2,r2,44
   15efc:	e0bff715 	stw	r2,-36(fp)
   15f00:	00800044 	movi	r2,1
   15f04:	e0bff80d 	sth	r2,-32(fp)
   15f08:	e0bff80b 	ldhu	r2,-32(fp)
   15f0c:	1009883a 	mov	r4,r2
   15f10:	00130200 	call	13020 <OSSemCreate>
   15f14:	1007883a 	mov	r3,r2
   15f18:	e0bff717 	ldw	r2,-36(fp)
   15f1c:	10c00015 	stw	r3,0(r2)

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   15f20:	e0bff917 	ldw	r2,-28(fp)
   15f24:	00c00044 	movi	r3,1
   15f28:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
   15f2c:	e0bff917 	ldw	r2,-28(fp)
   15f30:	10800017 	ldw	r2,0(r2)
   15f34:	10800104 	addi	r2,r2,4
   15f38:	1007883a 	mov	r3,r2
   15f3c:	e0bff917 	ldw	r2,-28(fp)
   15f40:	10800817 	ldw	r2,32(r2)
   15f44:	18800035 	stwio	r2,0(r3)
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
                      sp, NULL);
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
   15f48:	e0bffb17 	ldw	r2,-20(fp)
   15f4c:	1009883a 	mov	r4,r2
   15f50:	e17ff917 	ldw	r5,-28(fp)
   15f54:	01800074 	movhi	r6,1
   15f58:	3197ef04 	addi	r6,r6,24508
   15f5c:	00185fc0 	call	185fc <alt_irq_register>
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
   15f60:	e0bff917 	ldw	r2,-28(fp)
   15f64:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
   15f68:	e0bff917 	ldw	r2,-28(fp)
   15f6c:	10c00204 	addi	r3,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
   15f70:	008000b4 	movhi	r2,2
   15f74:	10b6a104 	addi	r2,r2,-9596
   15f78:	10800017 	ldw	r2,0(r2)
   15f7c:	1809883a 	mov	r4,r3
   15f80:	100b883a 	mov	r5,r2
   15f84:	01800074 	movhi	r6,1
   15f88:	31989904 	addi	r6,r6,25188
   15f8c:	e1fff917 	ldw	r7,-28(fp)
   15f90:	00180fc0 	call	180fc <alt_alarm_start>
   15f94:	1000040e 	bge	r2,zero,15fa8 <altera_avalon_jtag_uart_init+0x12c>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
   15f98:	e0fff917 	ldw	r3,-28(fp)
   15f9c:	00a00034 	movhi	r2,32768
   15fa0:	10bfffc4 	addi	r2,r2,-1
   15fa4:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
   15fa8:	e037883a 	mov	sp,fp
   15fac:	dfc00117 	ldw	ra,4(sp)
   15fb0:	df000017 	ldw	fp,0(sp)
   15fb4:	dec00204 	addi	sp,sp,8
   15fb8:	f800283a 	ret

00015fbc <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
   15fbc:	defff104 	addi	sp,sp,-60
   15fc0:	dfc00e15 	stw	ra,56(sp)
   15fc4:	df000d15 	stw	fp,52(sp)
   15fc8:	df000d04 	addi	fp,sp,52
   15fcc:	e13ffe15 	stw	r4,-8(fp)
   15fd0:	e17fff15 	stw	r5,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
   15fd4:	e0bffe17 	ldw	r2,-8(fp)
   15fd8:	e0bff515 	stw	r2,-44(fp)
  unsigned int base = sp->base;
   15fdc:	e0bff517 	ldw	r2,-44(fp)
   15fe0:	10800017 	ldw	r2,0(r2)
   15fe4:	e0bff615 	stw	r2,-40(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   15fe8:	e0bff617 	ldw	r2,-40(fp)
   15fec:	10800104 	addi	r2,r2,4
   15ff0:	10800037 	ldwio	r2,0(r2)
   15ff4:	e0bff715 	stw	r2,-36(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
   15ff8:	e0bff717 	ldw	r2,-36(fp)
   15ffc:	1080c00c 	andi	r2,r2,768
   16000:	1000011e 	bne	r2,zero,16008 <altera_avalon_jtag_uart_irq+0x4c>
      break;
   16004:	00009206 	br	16250 <altera_avalon_jtag_uart_irq+0x294>

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
   16008:	e0bff717 	ldw	r2,-36(fp)
   1600c:	1080400c 	andi	r2,r2,256
   16010:	10004726 	beq	r2,zero,16130 <altera_avalon_jtag_uart_irq+0x174>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
   16014:	00800074 	movhi	r2,1
   16018:	e0bff315 	stw	r2,-52(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   1601c:	e0bff517 	ldw	r2,-44(fp)
   16020:	10800d17 	ldw	r2,52(r2)
   16024:	10800044 	addi	r2,r2,1
   16028:	1081ffcc 	andi	r2,r2,2047
   1602c:	e0bff815 	stw	r2,-32(fp)
        if (next == sp->rx_out)
   16030:	e0bff517 	ldw	r2,-44(fp)
   16034:	10c00e17 	ldw	r3,56(r2)
   16038:	e0bff817 	ldw	r2,-32(fp)
   1603c:	1880011e 	bne	r3,r2,16044 <altera_avalon_jtag_uart_irq+0x88>
          break;
   16040:	00002906 	br	160e8 <altera_avalon_jtag_uart_irq+0x12c>

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
   16044:	e0bff617 	ldw	r2,-40(fp)
   16048:	10800037 	ldwio	r2,0(r2)
   1604c:	e0bff315 	stw	r2,-52(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
   16050:	e0bff317 	ldw	r2,-52(fp)
   16054:	10a0000c 	andi	r2,r2,32768
   16058:	1000011e 	bne	r2,zero,16060 <altera_avalon_jtag_uart_irq+0xa4>
          break;
   1605c:	00002206 	br	160e8 <altera_avalon_jtag_uart_irq+0x12c>

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
   16060:	e0bff517 	ldw	r2,-44(fp)
   16064:	10800d17 	ldw	r2,52(r2)
   16068:	e0fff317 	ldw	r3,-52(fp)
   1606c:	1809883a 	mov	r4,r3
   16070:	e0fff517 	ldw	r3,-44(fp)
   16074:	1885883a 	add	r2,r3,r2
   16078:	10801104 	addi	r2,r2,68
   1607c:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   16080:	e0bff517 	ldw	r2,-44(fp)
   16084:	10800d17 	ldw	r2,52(r2)
   16088:	10800044 	addi	r2,r2,1
   1608c:	10c1ffcc 	andi	r3,r2,2047
   16090:	e0bff517 	ldw	r2,-44(fp)
   16094:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
   16098:	e0bff517 	ldw	r2,-44(fp)
   1609c:	10800c17 	ldw	r2,48(r2)
   160a0:	e0bff915 	stw	r2,-28(fp)
   160a4:	00800044 	movi	r2,1
   160a8:	e0bffa0d 	sth	r2,-24(fp)
   160ac:	00800044 	movi	r2,1
   160b0:	e0bffa85 	stb	r2,-22(fp)
                   OS_FLAGS     flags, 
                   INT8U        opt)
{
  INT8U err;

  if (OSRunning)
   160b4:	008000b4 	movhi	r2,2
   160b8:	10b68c44 	addi	r2,r2,-9679
   160bc:	10800003 	ldbu	r2,0(r2)
   160c0:	10803fcc 	andi	r2,r2,255
   160c4:	103fd526 	beq	r2,zero,1601c <__alt_mem_Flash_flash_data+0xf401601c>
  {
    OSFlagPost (group, flags, opt, &err);
   160c8:	e17ffa0b 	ldhu	r5,-24(fp)
   160cc:	e0fffa83 	ldbu	r3,-22(fp)
   160d0:	e0bffcc4 	addi	r2,fp,-13
   160d4:	e13ff917 	ldw	r4,-28(fp)
   160d8:	180d883a 	mov	r6,r3
   160dc:	100f883a 	mov	r7,r2
   160e0:	0010d380 	call	10d38 <OSFlagPost>
      }
   160e4:	003fcd06 	br	1601c <__alt_mem_Flash_flash_data+0xf401601c>

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
   160e8:	e0bff317 	ldw	r2,-52(fp)
   160ec:	10bfffec 	andhi	r2,r2,65535
   160f0:	10000f26 	beq	r2,zero,16130 <altera_avalon_jtag_uart_irq+0x174>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   160f4:	e0bff517 	ldw	r2,-44(fp)
   160f8:	10c00817 	ldw	r3,32(r2)
   160fc:	00bfff84 	movi	r2,-2
   16100:	1886703a 	and	r3,r3,r2
   16104:	e0bff517 	ldw	r2,-44(fp)
   16108:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
   1610c:	e0bff617 	ldw	r2,-40(fp)
   16110:	10800104 	addi	r2,r2,4
   16114:	1007883a 	mov	r3,r2
   16118:	e0bff517 	ldw	r2,-44(fp)
   1611c:	10800817 	ldw	r2,32(r2)
   16120:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   16124:	e0bff617 	ldw	r2,-40(fp)
   16128:	10800104 	addi	r2,r2,4
   1612c:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
   16130:	e0bff717 	ldw	r2,-36(fp)
   16134:	1080800c 	andi	r2,r2,512
   16138:	10004426 	beq	r2,zero,1624c <altera_avalon_jtag_uart_irq+0x290>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
   1613c:	e0bff717 	ldw	r2,-36(fp)
   16140:	1004d43a 	srli	r2,r2,16
   16144:	e0bff415 	stw	r2,-48(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
   16148:	00002706 	br	161e8 <altera_avalon_jtag_uart_irq+0x22c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
   1614c:	e0bff617 	ldw	r2,-40(fp)
   16150:	e0fff517 	ldw	r3,-44(fp)
   16154:	18c01017 	ldw	r3,64(r3)
   16158:	e13ff517 	ldw	r4,-44(fp)
   1615c:	20c7883a 	add	r3,r4,r3
   16160:	18c21104 	addi	r3,r3,2116
   16164:	18c00003 	ldbu	r3,0(r3)
   16168:	18c03fcc 	andi	r3,r3,255
   1616c:	18c0201c 	xori	r3,r3,128
   16170:	18ffe004 	addi	r3,r3,-128
   16174:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   16178:	e0bff517 	ldw	r2,-44(fp)
   1617c:	10801017 	ldw	r2,64(r2)
   16180:	10800044 	addi	r2,r2,1
   16184:	10c1ffcc 	andi	r3,r2,2047
   16188:	e0bff517 	ldw	r2,-44(fp)
   1618c:	10c01015 	stw	r3,64(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);
   16190:	e0bff517 	ldw	r2,-44(fp)
   16194:	10800c17 	ldw	r2,48(r2)
   16198:	e0bffb15 	stw	r2,-20(fp)
   1619c:	00800084 	movi	r2,2
   161a0:	e0bffc0d 	sth	r2,-16(fp)
   161a4:	00800044 	movi	r2,1
   161a8:	e0bffc85 	stb	r2,-14(fp)
                   OS_FLAGS     flags, 
                   INT8U        opt)
{
  INT8U err;

  if (OSRunning)
   161ac:	008000b4 	movhi	r2,2
   161b0:	10b68c44 	addi	r2,r2,-9679
   161b4:	10800003 	ldbu	r2,0(r2)
   161b8:	10803fcc 	andi	r2,r2,255
   161bc:	10000726 	beq	r2,zero,161dc <altera_avalon_jtag_uart_irq+0x220>
  {
    OSFlagPost (group, flags, opt, &err);
   161c0:	e17ffc0b 	ldhu	r5,-16(fp)
   161c4:	e0fffc83 	ldbu	r3,-14(fp)
   161c8:	e0bffd04 	addi	r2,fp,-12
   161cc:	e13ffb17 	ldw	r4,-20(fp)
   161d0:	180d883a 	mov	r6,r3
   161d4:	100f883a 	mov	r7,r2
   161d8:	0010d380 	call	10d38 <OSFlagPost>

        space--;
   161dc:	e0bff417 	ldw	r2,-48(fp)
   161e0:	10bfffc4 	addi	r2,r2,-1
   161e4:	e0bff415 	stw	r2,-48(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
   161e8:	e0bff417 	ldw	r2,-48(fp)
   161ec:	10000526 	beq	r2,zero,16204 <altera_avalon_jtag_uart_irq+0x248>
   161f0:	e0bff517 	ldw	r2,-44(fp)
   161f4:	10c01017 	ldw	r3,64(r2)
   161f8:	e0bff517 	ldw	r2,-44(fp)
   161fc:	10800f17 	ldw	r2,60(r2)
   16200:	18bfd21e 	bne	r3,r2,1614c <__alt_mem_Flash_flash_data+0xf401614c>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
   16204:	e0bff417 	ldw	r2,-48(fp)
   16208:	10001026 	beq	r2,zero,1624c <altera_avalon_jtag_uart_irq+0x290>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   1620c:	e0bff517 	ldw	r2,-44(fp)
   16210:	10c00817 	ldw	r3,32(r2)
   16214:	00bfff44 	movi	r2,-3
   16218:	1886703a 	and	r3,r3,r2
   1621c:	e0bff517 	ldw	r2,-44(fp)
   16220:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   16224:	e0bff517 	ldw	r2,-44(fp)
   16228:	10800017 	ldw	r2,0(r2)
   1622c:	10800104 	addi	r2,r2,4
   16230:	1007883a 	mov	r3,r2
   16234:	e0bff517 	ldw	r2,-44(fp)
   16238:	10800817 	ldw	r2,32(r2)
   1623c:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   16240:	e0bff617 	ldw	r2,-40(fp)
   16244:	10800104 	addi	r2,r2,4
   16248:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
   1624c:	003f6606 	br	15fe8 <__alt_mem_Flash_flash_data+0xf4015fe8>
}
   16250:	e037883a 	mov	sp,fp
   16254:	dfc00117 	ldw	ra,4(sp)
   16258:	df000017 	ldw	fp,0(sp)
   1625c:	dec00204 	addi	sp,sp,8
   16260:	f800283a 	ret

00016264 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
   16264:	defff904 	addi	sp,sp,-28
   16268:	dfc00615 	stw	ra,24(sp)
   1626c:	df000515 	stw	fp,20(sp)
   16270:	df000504 	addi	fp,sp,20
   16274:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
   16278:	e0bfff17 	ldw	r2,-4(fp)
   1627c:	e0bffb15 	stw	r2,-20(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
   16280:	e0bffb17 	ldw	r2,-20(fp)
   16284:	10800017 	ldw	r2,0(r2)
   16288:	10800104 	addi	r2,r2,4
   1628c:	10800037 	ldwio	r2,0(r2)
   16290:	e0bffc15 	stw	r2,-16(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
   16294:	e0bffc17 	ldw	r2,-16(fp)
   16298:	1081000c 	andi	r2,r2,1024
   1629c:	10000b26 	beq	r2,zero,162cc <altera_avalon_jtag_uart_timeout+0x68>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
   162a0:	e0bffb17 	ldw	r2,-20(fp)
   162a4:	10800017 	ldw	r2,0(r2)
   162a8:	10800104 	addi	r2,r2,4
   162ac:	1007883a 	mov	r3,r2
   162b0:	e0bffb17 	ldw	r2,-20(fp)
   162b4:	10800817 	ldw	r2,32(r2)
   162b8:	10810014 	ori	r2,r2,1024
   162bc:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
   162c0:	e0bffb17 	ldw	r2,-20(fp)
   162c4:	10000915 	stw	zero,36(r2)
   162c8:	00002206 	br	16354 <altera_avalon_jtag_uart_timeout+0xf0>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
   162cc:	e0bffb17 	ldw	r2,-20(fp)
   162d0:	10c00917 	ldw	r3,36(r2)
   162d4:	00a00034 	movhi	r2,32768
   162d8:	10bfff04 	addi	r2,r2,-4
   162dc:	10c01d36 	bltu	r2,r3,16354 <altera_avalon_jtag_uart_timeout+0xf0>
    sp->host_inactive++;
   162e0:	e0bffb17 	ldw	r2,-20(fp)
   162e4:	10800917 	ldw	r2,36(r2)
   162e8:	10c00044 	addi	r3,r2,1
   162ec:	e0bffb17 	ldw	r2,-20(fp)
   162f0:	10c00915 	stw	r3,36(r2)
    
    if (sp->host_inactive >= sp->timeout) {
   162f4:	e0bffb17 	ldw	r2,-20(fp)
   162f8:	10c00917 	ldw	r3,36(r2)
   162fc:	e0bffb17 	ldw	r2,-20(fp)
   16300:	10800117 	ldw	r2,4(r2)
   16304:	18801336 	bltu	r3,r2,16354 <altera_avalon_jtag_uart_timeout+0xf0>
      /* Post an event to indicate host is inactive (for jtag_uart_read */
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
   16308:	e0bffb17 	ldw	r2,-20(fp)
   1630c:	10800c17 	ldw	r2,48(r2)
   16310:	e0bffd15 	stw	r2,-12(fp)
   16314:	00800104 	movi	r2,4
   16318:	e0bffe0d 	sth	r2,-8(fp)
   1631c:	00800044 	movi	r2,1
   16320:	e0bffe85 	stb	r2,-6(fp)
                   OS_FLAGS     flags, 
                   INT8U        opt)
{
  INT8U err;

  if (OSRunning)
   16324:	008000b4 	movhi	r2,2
   16328:	10b68c44 	addi	r2,r2,-9679
   1632c:	10800003 	ldbu	r2,0(r2)
   16330:	10803fcc 	andi	r2,r2,255
   16334:	10000726 	beq	r2,zero,16354 <altera_avalon_jtag_uart_timeout+0xf0>
  {
    OSFlagPost (group, flags, opt, &err);
   16338:	e17ffe0b 	ldhu	r5,-8(fp)
   1633c:	e0fffe83 	ldbu	r3,-6(fp)
   16340:	e0bffec4 	addi	r2,fp,-5
   16344:	e13ffd17 	ldw	r4,-12(fp)
   16348:	180d883a 	mov	r6,r3
   1634c:	100f883a 	mov	r7,r2
   16350:	0010d380 	call	10d38 <OSFlagPost>
   16354:	008000b4 	movhi	r2,2
   16358:	10b6a104 	addi	r2,r2,-9596
   1635c:	10800017 	ldw	r2,0(r2)
    }
  }

  return alt_ticks_per_second();
}
   16360:	e037883a 	mov	sp,fp
   16364:	dfc00117 	ldw	ra,4(sp)
   16368:	df000017 	ldw	fp,0(sp)
   1636c:	dec00204 	addi	sp,sp,8
   16370:	f800283a 	ret

00016374 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
   16374:	defffd04 	addi	sp,sp,-12
   16378:	df000215 	stw	fp,8(sp)
   1637c:	df000204 	addi	fp,sp,8
   16380:	e13ffe15 	stw	r4,-8(fp)
   16384:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   16388:	00000506 	br	163a0 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
   1638c:	e0bfff17 	ldw	r2,-4(fp)
   16390:	1090000c 	andi	r2,r2,16384
   16394:	10000226 	beq	r2,zero,163a0 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
   16398:	00bffd44 	movi	r2,-11
   1639c:	00000b06 	br	163cc <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   163a0:	e0bffe17 	ldw	r2,-8(fp)
   163a4:	10c01017 	ldw	r3,64(r2)
   163a8:	e0bffe17 	ldw	r2,-8(fp)
   163ac:	10800f17 	ldw	r2,60(r2)
   163b0:	18800526 	beq	r3,r2,163c8 <altera_avalon_jtag_uart_close+0x54>
   163b4:	e0bffe17 	ldw	r2,-8(fp)
   163b8:	10c00917 	ldw	r3,36(r2)
   163bc:	e0bffe17 	ldw	r2,-8(fp)
   163c0:	10800117 	ldw	r2,4(r2)
   163c4:	18bff136 	bltu	r3,r2,1638c <__alt_mem_Flash_flash_data+0xf401638c>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
   163c8:	0005883a 	mov	r2,zero
}
   163cc:	e037883a 	mov	sp,fp
   163d0:	df000017 	ldw	fp,0(sp)
   163d4:	dec00104 	addi	sp,sp,4
   163d8:	f800283a 	ret

000163dc <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
   163dc:	defffa04 	addi	sp,sp,-24
   163e0:	df000515 	stw	fp,20(sp)
   163e4:	df000504 	addi	fp,sp,20
   163e8:	e13ffd15 	stw	r4,-12(fp)
   163ec:	e17ffe15 	stw	r5,-8(fp)
   163f0:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
   163f4:	00bff9c4 	movi	r2,-25
   163f8:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
   163fc:	e0bffe17 	ldw	r2,-8(fp)
   16400:	10da8060 	cmpeqi	r3,r2,27137
   16404:	1800031e 	bne	r3,zero,16414 <altera_avalon_jtag_uart_ioctl+0x38>
   16408:	109a80a0 	cmpeqi	r2,r2,27138
   1640c:	1000191e 	bne	r2,zero,16474 <altera_avalon_jtag_uart_ioctl+0x98>
      rc = 0;
    }
    break;

  default:
    break;
   16410:	00002806 	br	164b4 <altera_avalon_jtag_uart_ioctl+0xd8>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
   16414:	e0bffd17 	ldw	r2,-12(fp)
   16418:	10c00117 	ldw	r3,4(r2)
   1641c:	00a00034 	movhi	r2,32768
   16420:	10bfffc4 	addi	r2,r2,-1
   16424:	18801226 	beq	r3,r2,16470 <altera_avalon_jtag_uart_ioctl+0x94>
    {
      int timeout = *((int *)arg);
   16428:	e0bfff17 	ldw	r2,-4(fp)
   1642c:	10800017 	ldw	r2,0(r2)
   16430:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
   16434:	e0bffc17 	ldw	r2,-16(fp)
   16438:	10800090 	cmplti	r2,r2,2
   1643c:	1000061e 	bne	r2,zero,16458 <altera_avalon_jtag_uart_ioctl+0x7c>
   16440:	e0fffc17 	ldw	r3,-16(fp)
   16444:	00a00034 	movhi	r2,32768
   16448:	10bfffc4 	addi	r2,r2,-1
   1644c:	18800226 	beq	r3,r2,16458 <altera_avalon_jtag_uart_ioctl+0x7c>
   16450:	e0bffc17 	ldw	r2,-16(fp)
   16454:	00000206 	br	16460 <altera_avalon_jtag_uart_ioctl+0x84>
   16458:	00a00034 	movhi	r2,32768
   1645c:	10bfff84 	addi	r2,r2,-2
   16460:	e0fffd17 	ldw	r3,-12(fp)
   16464:	18800115 	stw	r2,4(r3)
      rc = 0;
   16468:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
   1646c:	00001106 	br	164b4 <altera_avalon_jtag_uart_ioctl+0xd8>
   16470:	00001006 	br	164b4 <altera_avalon_jtag_uart_ioctl+0xd8>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
   16474:	e0bffd17 	ldw	r2,-12(fp)
   16478:	10c00117 	ldw	r3,4(r2)
   1647c:	00a00034 	movhi	r2,32768
   16480:	10bfffc4 	addi	r2,r2,-1
   16484:	18800a26 	beq	r3,r2,164b0 <altera_avalon_jtag_uart_ioctl+0xd4>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
   16488:	e0bffd17 	ldw	r2,-12(fp)
   1648c:	10c00917 	ldw	r3,36(r2)
   16490:	e0bffd17 	ldw	r2,-12(fp)
   16494:	10800117 	ldw	r2,4(r2)
   16498:	1885803a 	cmpltu	r2,r3,r2
   1649c:	10c03fcc 	andi	r3,r2,255
   164a0:	e0bfff17 	ldw	r2,-4(fp)
   164a4:	10c00015 	stw	r3,0(r2)
      rc = 0;
   164a8:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
   164ac:	00000006 	br	164b0 <altera_avalon_jtag_uart_ioctl+0xd4>
   164b0:	0001883a 	nop

  default:
    break;
  }

  return rc;
   164b4:	e0bffb17 	ldw	r2,-20(fp)
}
   164b8:	e037883a 	mov	sp,fp
   164bc:	df000017 	ldw	fp,0(sp)
   164c0:	dec00104 	addi	sp,sp,4
   164c4:	f800283a 	ret

000164c8 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
   164c8:	deffec04 	addi	sp,sp,-80
   164cc:	dfc01315 	stw	ra,76(sp)
   164d0:	df001215 	stw	fp,72(sp)
   164d4:	df001204 	addi	fp,sp,72
   164d8:	e13ffc15 	stw	r4,-16(fp)
   164dc:	e17ffd15 	stw	r5,-12(fp)
   164e0:	e1bffe15 	stw	r6,-8(fp)
   164e4:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
   164e8:	e0bffd17 	ldw	r2,-12(fp)
   164ec:	e0bfef15 	stw	r2,-68(fp)

  /*
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);
   164f0:	e0bffc17 	ldw	r2,-16(fp)
   164f4:	10800a17 	ldw	r2,40(r2)
   164f8:	e0bff415 	stw	r2,-48(fp)
   164fc:	e03ff50d 	sth	zero,-44(fp)

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sem_pend (OS_EVENT* sem, 
                  INT16U timeout)
{
  INT8U err;
  OSSemPend (sem, timeout, &err);
   16500:	e0fff50b 	ldhu	r3,-44(fp)
   16504:	e0bffb04 	addi	r2,fp,-20
   16508:	e13ff417 	ldw	r4,-48(fp)
   1650c:	180b883a 	mov	r5,r3
   16510:	100d883a 	mov	r6,r2
   16514:	00133880 	call	13388 <OSSemPend>

  while (space > 0)
   16518:	00006506 	br	166b0 <altera_avalon_jtag_uart_read+0x1e8>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
   1651c:	e0bffc17 	ldw	r2,-16(fp)
   16520:	10800d17 	ldw	r2,52(r2)
   16524:	e0bff115 	stw	r2,-60(fp)
      out = sp->rx_out;
   16528:	e0bffc17 	ldw	r2,-16(fp)
   1652c:	10800e17 	ldw	r2,56(r2)
   16530:	e0bff215 	stw	r2,-56(fp)

      if (in >= out)
   16534:	e0fff117 	ldw	r3,-60(fp)
   16538:	e0bff217 	ldw	r2,-56(fp)
   1653c:	18800536 	bltu	r3,r2,16554 <altera_avalon_jtag_uart_read+0x8c>
        n = in - out;
   16540:	e0fff117 	ldw	r3,-60(fp)
   16544:	e0bff217 	ldw	r2,-56(fp)
   16548:	1885c83a 	sub	r2,r3,r2
   1654c:	e0bff015 	stw	r2,-64(fp)
   16550:	00000406 	br	16564 <altera_avalon_jtag_uart_read+0x9c>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
   16554:	00c20004 	movi	r3,2048
   16558:	e0bff217 	ldw	r2,-56(fp)
   1655c:	1885c83a 	sub	r2,r3,r2
   16560:	e0bff015 	stw	r2,-64(fp)

      if (n == 0)
   16564:	e0bff017 	ldw	r2,-64(fp)
   16568:	1000011e 	bne	r2,zero,16570 <altera_avalon_jtag_uart_read+0xa8>
        break; /* No more data available */
   1656c:	00001d06 	br	165e4 <altera_avalon_jtag_uart_read+0x11c>

      if (n > space)
   16570:	e0fffe17 	ldw	r3,-8(fp)
   16574:	e0bff017 	ldw	r2,-64(fp)
   16578:	1880022e 	bgeu	r3,r2,16584 <altera_avalon_jtag_uart_read+0xbc>
        n = space;
   1657c:	e0bffe17 	ldw	r2,-8(fp)
   16580:	e0bff015 	stw	r2,-64(fp)

      memcpy(ptr, sp->rx_buf + out, n);
   16584:	e0bff217 	ldw	r2,-56(fp)
   16588:	10801104 	addi	r2,r2,68
   1658c:	e0fffc17 	ldw	r3,-16(fp)
   16590:	1885883a 	add	r2,r3,r2
   16594:	e13fef17 	ldw	r4,-68(fp)
   16598:	100b883a 	mov	r5,r2
   1659c:	e1bff017 	ldw	r6,-64(fp)
   165a0:	0005e800 	call	5e80 <memcpy>
      ptr   += n;
   165a4:	e0ffef17 	ldw	r3,-68(fp)
   165a8:	e0bff017 	ldw	r2,-64(fp)
   165ac:	1885883a 	add	r2,r3,r2
   165b0:	e0bfef15 	stw	r2,-68(fp)
      space -= n;
   165b4:	e0fffe17 	ldw	r3,-8(fp)
   165b8:	e0bff017 	ldw	r2,-64(fp)
   165bc:	1885c83a 	sub	r2,r3,r2
   165c0:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   165c4:	e0fff217 	ldw	r3,-56(fp)
   165c8:	e0bff017 	ldw	r2,-64(fp)
   165cc:	1885883a 	add	r2,r3,r2
   165d0:	10c1ffcc 	andi	r3,r2,2047
   165d4:	e0bffc17 	ldw	r2,-16(fp)
   165d8:	10c00e15 	stw	r3,56(r2)
    }
    while (space > 0);
   165dc:	e0bffe17 	ldw	r2,-8(fp)
   165e0:	00bfce16 	blt	zero,r2,1651c <__alt_mem_Flash_flash_data+0xf401651c>

    /* If we read any data then return it */
    if (ptr != buffer)
   165e4:	e0ffef17 	ldw	r3,-68(fp)
   165e8:	e0bffd17 	ldw	r2,-12(fp)
   165ec:	18800126 	beq	r3,r2,165f4 <altera_avalon_jtag_uart_read+0x12c>
      break;
   165f0:	00003106 	br	166b8 <altera_avalon_jtag_uart_read+0x1f0>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
   165f4:	e0bfff17 	ldw	r2,-4(fp)
   165f8:	1090000c 	andi	r2,r2,16384
   165fc:	10000126 	beq	r2,zero,16604 <altera_avalon_jtag_uart_read+0x13c>
      break;
   16600:	00002d06 	br	166b8 <altera_avalon_jtag_uart_read+0x1f0>

#ifdef __ucosii__
    /* OS Present: Pend on a flag if the OS is running, otherwise spin */
    if(OSRunning == OS_TRUE) {
   16604:	008000b4 	movhi	r2,2
   16608:	10b68c44 	addi	r2,r2,-9679
   1660c:	10800003 	ldbu	r2,0(r2)
   16610:	10803fcc 	andi	r2,r2,255
   16614:	10800058 	cmpnei	r2,r2,1
   16618:	1000161e 	bne	r2,zero,16674 <altera_avalon_jtag_uart_read+0x1ac>
       * When running in a multi-threaded mode, we pend on the read event
       * flag set and timeout event flag set in the isr. This avoids wasting CPU
       * cycles waiting in this thread, when we could be doing something more
       * profitable elsewhere.
       */
      ALT_FLAG_PEND (sp->events,
   1661c:	e0bffc17 	ldw	r2,-16(fp)
   16620:	10800c17 	ldw	r2,48(r2)
   16624:	e0bff615 	stw	r2,-40(fp)
   16628:	00800144 	movi	r2,5
   1662c:	e0bff70d 	sth	r2,-36(fp)
   16630:	00bfe0c4 	movi	r2,-125
   16634:	e0bff785 	stb	r2,-34(fp)
   16638:	e03ff80d 	sth	zero,-32(fp)
                   OS_FLAGS flags, 
                   INT8U wait_type, 
                   INT16U timeout)
{
  INT8U err;
  if (OSRunning)
   1663c:	008000b4 	movhi	r2,2
   16640:	10b68c44 	addi	r2,r2,-9679
   16644:	10800003 	ldbu	r2,0(r2)
   16648:	10803fcc 	andi	r2,r2,255
   1664c:	10001326 	beq	r2,zero,1669c <altera_avalon_jtag_uart_read+0x1d4>
  {
    OSFlagPend (group, flags, wait_type, timeout, &err);
   16650:	e17ff70b 	ldhu	r5,-36(fp)
   16654:	e1bff783 	ldbu	r6,-34(fp)
   16658:	e0fff80b 	ldhu	r3,-32(fp)
   1665c:	e0bffb44 	addi	r2,fp,-19
   16660:	d8800015 	stw	r2,0(sp)
   16664:	e13ff617 	ldw	r4,-40(fp)
   16668:	180f883a 	mov	r7,r3
   1666c:	00106e00 	call	106e0 <OSFlagPend>
   16670:	00000a06 	br	1669c <altera_avalon_jtag_uart_read+0x1d4>
                     OS_FLAG_WAIT_SET_ANY + OS_FLAG_CONSUME,
                     0);
    }
    else {
      /* Spin until more data arrives or until host disconnects */
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
   16674:	0001883a 	nop
   16678:	e0bffc17 	ldw	r2,-16(fp)
   1667c:	10c00d17 	ldw	r3,52(r2)
   16680:	e0bff117 	ldw	r2,-60(fp)
   16684:	1880051e 	bne	r3,r2,1669c <altera_avalon_jtag_uart_read+0x1d4>
   16688:	e0bffc17 	ldw	r2,-16(fp)
   1668c:	10c00917 	ldw	r3,36(r2)
   16690:	e0bffc17 	ldw	r2,-16(fp)
   16694:	10800117 	ldw	r2,4(r2)
   16698:	18bff736 	bltu	r3,r2,16678 <__alt_mem_Flash_flash_data+0xf4016678>
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
   1669c:	e0bffc17 	ldw	r2,-16(fp)
   166a0:	10c00d17 	ldw	r3,52(r2)
   166a4:	e0bff117 	ldw	r2,-60(fp)
   166a8:	1880011e 	bne	r3,r2,166b0 <altera_avalon_jtag_uart_read+0x1e8>
      break;
   166ac:	00000206 	br	166b8 <altera_avalon_jtag_uart_read+0x1f0>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   166b0:	e0bffe17 	ldw	r2,-8(fp)
   166b4:	00bf9916 	blt	zero,r2,1651c <__alt_mem_Flash_flash_data+0xf401651c>
  /*
   * Now that access to the circular buffer is complete, release the read
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);
   166b8:	e0bffc17 	ldw	r2,-16(fp)
   166bc:	10800a17 	ldw	r2,40(r2)
   166c0:	1009883a 	mov	r4,r2
   166c4:	001375c0 	call	1375c <OSSemPost>

  if (ptr != buffer)
   166c8:	e0ffef17 	ldw	r3,-68(fp)
   166cc:	e0bffd17 	ldw	r2,-12(fp)
   166d0:	18801826 	beq	r3,r2,16734 <altera_avalon_jtag_uart_read+0x26c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   166d4:	0005303a 	rdctl	r2,status
   166d8:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   166dc:	e0fff917 	ldw	r3,-28(fp)
   166e0:	00bfff84 	movi	r2,-2
   166e4:	1884703a 	and	r2,r3,r2
   166e8:	1001703a 	wrctl	status,r2
  
  return context;
   166ec:	e0bff917 	ldw	r2,-28(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
   166f0:	e0bff315 	stw	r2,-52(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   166f4:	e0bffc17 	ldw	r2,-16(fp)
   166f8:	10800817 	ldw	r2,32(r2)
   166fc:	10c00054 	ori	r3,r2,1
   16700:	e0bffc17 	ldw	r2,-16(fp)
   16704:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   16708:	e0bffc17 	ldw	r2,-16(fp)
   1670c:	10800017 	ldw	r2,0(r2)
   16710:	10800104 	addi	r2,r2,4
   16714:	1007883a 	mov	r3,r2
   16718:	e0bffc17 	ldw	r2,-16(fp)
   1671c:	10800817 	ldw	r2,32(r2)
   16720:	18800035 	stwio	r2,0(r3)
   16724:	e0bff317 	ldw	r2,-52(fp)
   16728:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1672c:	e0bffa17 	ldw	r2,-24(fp)
   16730:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
   16734:	e0ffef17 	ldw	r3,-68(fp)
   16738:	e0bffd17 	ldw	r2,-12(fp)
   1673c:	18800426 	beq	r3,r2,16750 <altera_avalon_jtag_uart_read+0x288>
    return ptr - buffer;
   16740:	e0ffef17 	ldw	r3,-68(fp)
   16744:	e0bffd17 	ldw	r2,-12(fp)
   16748:	1885c83a 	sub	r2,r3,r2
   1674c:	00000606 	br	16768 <altera_avalon_jtag_uart_read+0x2a0>
  else if (flags & O_NONBLOCK)
   16750:	e0bfff17 	ldw	r2,-4(fp)
   16754:	1090000c 	andi	r2,r2,16384
   16758:	10000226 	beq	r2,zero,16764 <altera_avalon_jtag_uart_read+0x29c>
    return -EWOULDBLOCK;
   1675c:	00bffd44 	movi	r2,-11
   16760:	00000106 	br	16768 <altera_avalon_jtag_uart_read+0x2a0>
  else
    return -EIO;
   16764:	00bffec4 	movi	r2,-5
}
   16768:	e037883a 	mov	sp,fp
   1676c:	dfc00117 	ldw	ra,4(sp)
   16770:	df000017 	ldw	fp,0(sp)
   16774:	dec00204 	addi	sp,sp,8
   16778:	f800283a 	ret

0001677c <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
   1677c:	deffed04 	addi	sp,sp,-76
   16780:	dfc01215 	stw	ra,72(sp)
   16784:	df001115 	stw	fp,68(sp)
   16788:	df001104 	addi	fp,sp,68
   1678c:	e13ffc15 	stw	r4,-16(fp)
   16790:	e17ffd15 	stw	r5,-12(fp)
   16794:	e1bffe15 	stw	r6,-8(fp)
   16798:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
   1679c:	e03ff015 	stw	zero,-64(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
   167a0:	e0bffd17 	ldw	r2,-12(fp)
   167a4:	e0bff215 	stw	r2,-56(fp)

  /*
   * When running in a multi threaded environment, obtain the "write_lock"
   * semaphore. This ensures that writing to the device is thread-safe.
   */
  ALT_SEM_PEND (sp->write_lock, 0);
   167a8:	e0bffc17 	ldw	r2,-16(fp)
   167ac:	10800b17 	ldw	r2,44(r2)
   167b0:	e0bff515 	stw	r2,-44(fp)
   167b4:	e03ff60d 	sth	zero,-40(fp)
   167b8:	e0fff60b 	ldhu	r3,-40(fp)
   167bc:	e0bffbc4 	addi	r2,fp,-17
   167c0:	e13ff517 	ldw	r4,-44(fp)
   167c4:	180b883a 	mov	r5,r3
   167c8:	100d883a 	mov	r6,r2
   167cc:	00133880 	call	13388 <OSSemPend>

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   167d0:	00003806 	br	168b4 <altera_avalon_jtag_uart_write+0x138>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
   167d4:	e0bffc17 	ldw	r2,-16(fp)
   167d8:	10800f17 	ldw	r2,60(r2)
   167dc:	e0bff315 	stw	r2,-52(fp)
      out = sp->tx_out;
   167e0:	e0bffc17 	ldw	r2,-16(fp)
   167e4:	10801017 	ldw	r2,64(r2)
   167e8:	e0bff015 	stw	r2,-64(fp)

      if (in < out)
   167ec:	e0fff317 	ldw	r3,-52(fp)
   167f0:	e0bff017 	ldw	r2,-64(fp)
   167f4:	1880062e 	bgeu	r3,r2,16810 <altera_avalon_jtag_uart_write+0x94>
        n = out - 1 - in;
   167f8:	e0fff017 	ldw	r3,-64(fp)
   167fc:	e0bff317 	ldw	r2,-52(fp)
   16800:	1885c83a 	sub	r2,r3,r2
   16804:	10bfffc4 	addi	r2,r2,-1
   16808:	e0bff115 	stw	r2,-60(fp)
   1680c:	00000b06 	br	1683c <altera_avalon_jtag_uart_write+0xc0>
      else if (out > 0)
   16810:	e0bff017 	ldw	r2,-64(fp)
   16814:	10000526 	beq	r2,zero,1682c <altera_avalon_jtag_uart_write+0xb0>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
   16818:	00c20004 	movi	r3,2048
   1681c:	e0bff317 	ldw	r2,-52(fp)
   16820:	1885c83a 	sub	r2,r3,r2
   16824:	e0bff115 	stw	r2,-60(fp)
   16828:	00000406 	br	1683c <altera_avalon_jtag_uart_write+0xc0>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
   1682c:	00c1ffc4 	movi	r3,2047
   16830:	e0bff317 	ldw	r2,-52(fp)
   16834:	1885c83a 	sub	r2,r3,r2
   16838:	e0bff115 	stw	r2,-60(fp)

      if (n == 0)
   1683c:	e0bff117 	ldw	r2,-60(fp)
   16840:	1000011e 	bne	r2,zero,16848 <altera_avalon_jtag_uart_write+0xcc>
        break;
   16844:	00001d06 	br	168bc <altera_avalon_jtag_uart_write+0x140>

      if (n > count)
   16848:	e0fffe17 	ldw	r3,-8(fp)
   1684c:	e0bff117 	ldw	r2,-60(fp)
   16850:	1880022e 	bgeu	r3,r2,1685c <altera_avalon_jtag_uart_write+0xe0>
        n = count;
   16854:	e0bffe17 	ldw	r2,-8(fp)
   16858:	e0bff115 	stw	r2,-60(fp)

      memcpy(sp->tx_buf + in, ptr, n);
   1685c:	e0bff317 	ldw	r2,-52(fp)
   16860:	10821104 	addi	r2,r2,2116
   16864:	e0fffc17 	ldw	r3,-16(fp)
   16868:	1885883a 	add	r2,r3,r2
   1686c:	1009883a 	mov	r4,r2
   16870:	e17ffd17 	ldw	r5,-12(fp)
   16874:	e1bff117 	ldw	r6,-60(fp)
   16878:	0005e800 	call	5e80 <memcpy>
      ptr   += n;
   1687c:	e0fffd17 	ldw	r3,-12(fp)
   16880:	e0bff117 	ldw	r2,-60(fp)
   16884:	1885883a 	add	r2,r3,r2
   16888:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
   1688c:	e0fffe17 	ldw	r3,-8(fp)
   16890:	e0bff117 	ldw	r2,-60(fp)
   16894:	1885c83a 	sub	r2,r3,r2
   16898:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   1689c:	e0fff317 	ldw	r3,-52(fp)
   168a0:	e0bff117 	ldw	r2,-60(fp)
   168a4:	1885883a 	add	r2,r3,r2
   168a8:	10c1ffcc 	andi	r3,r2,2047
   168ac:	e0bffc17 	ldw	r2,-16(fp)
   168b0:	10c00f15 	stw	r3,60(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   168b4:	e0bffe17 	ldw	r2,-8(fp)
   168b8:	00bfc616 	blt	zero,r2,167d4 <__alt_mem_Flash_flash_data+0xf40167d4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   168bc:	0005303a 	rdctl	r2,status
   168c0:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   168c4:	e0fff717 	ldw	r3,-36(fp)
   168c8:	00bfff84 	movi	r2,-2
   168cc:	1884703a 	and	r2,r3,r2
   168d0:	1001703a 	wrctl	status,r2
  
  return context;
   168d4:	e0bff717 	ldw	r2,-36(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
   168d8:	e0bff415 	stw	r2,-48(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   168dc:	e0bffc17 	ldw	r2,-16(fp)
   168e0:	10800817 	ldw	r2,32(r2)
   168e4:	10c00094 	ori	r3,r2,2
   168e8:	e0bffc17 	ldw	r2,-16(fp)
   168ec:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   168f0:	e0bffc17 	ldw	r2,-16(fp)
   168f4:	10800017 	ldw	r2,0(r2)
   168f8:	10800104 	addi	r2,r2,4
   168fc:	1007883a 	mov	r3,r2
   16900:	e0bffc17 	ldw	r2,-16(fp)
   16904:	10800817 	ldw	r2,32(r2)
   16908:	18800035 	stwio	r2,0(r3)
   1690c:	e0bff417 	ldw	r2,-48(fp)
   16910:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   16914:	e0bff817 	ldw	r2,-32(fp)
   16918:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
   1691c:	e0bffe17 	ldw	r2,-8(fp)
   16920:	00802e0e 	bge	zero,r2,169dc <altera_avalon_jtag_uart_write+0x260>
    {
      if (flags & O_NONBLOCK)
   16924:	e0bfff17 	ldw	r2,-4(fp)
   16928:	1090000c 	andi	r2,r2,16384
   1692c:	10000126 	beq	r2,zero,16934 <altera_avalon_jtag_uart_write+0x1b8>
        break;
   16930:	00002c06 	br	169e4 <altera_avalon_jtag_uart_write+0x268>

#ifdef __ucosii__
      /* OS Present: Pend on a flag if the OS is running, otherwise spin */
      if(OSRunning == OS_TRUE) {
   16934:	008000b4 	movhi	r2,2
   16938:	10b68c44 	addi	r2,r2,-9679
   1693c:	10800003 	ldbu	r2,0(r2)
   16940:	10803fcc 	andi	r2,r2,255
   16944:	10800058 	cmpnei	r2,r2,1
   16948:	1000161e 	bne	r2,zero,169a4 <altera_avalon_jtag_uart_write+0x228>
         * more profitable elsewhere.
         */
#ifdef ALTERA_AVALON_JTAG_UART_IGNORE_FIFO_FULL_ERROR
        if(!sp->host_inactive)
#endif
        ALT_FLAG_PEND (sp->events,
   1694c:	e0bffc17 	ldw	r2,-16(fp)
   16950:	10800c17 	ldw	r2,48(r2)
   16954:	e0bff915 	stw	r2,-28(fp)
   16958:	00800184 	movi	r2,6
   1695c:	e0bffa0d 	sth	r2,-24(fp)
   16960:	00bfe0c4 	movi	r2,-125
   16964:	e0bffa85 	stb	r2,-22(fp)
   16968:	e03ffb0d 	sth	zero,-20(fp)
                   OS_FLAGS flags, 
                   INT8U wait_type, 
                   INT16U timeout)
{
  INT8U err;
  if (OSRunning)
   1696c:	008000b4 	movhi	r2,2
   16970:	10b68c44 	addi	r2,r2,-9679
   16974:	10800003 	ldbu	r2,0(r2)
   16978:	10803fcc 	andi	r2,r2,255
   1697c:	10001326 	beq	r2,zero,169cc <altera_avalon_jtag_uart_write+0x250>
  {
    OSFlagPend (group, flags, wait_type, timeout, &err);
   16980:	e17ffa0b 	ldhu	r5,-24(fp)
   16984:	e1bffa83 	ldbu	r6,-22(fp)
   16988:	e0fffb0b 	ldhu	r3,-20(fp)
   1698c:	e0bffb84 	addi	r2,fp,-18
   16990:	d8800015 	stw	r2,0(sp)
   16994:	e13ff917 	ldw	r4,-28(fp)
   16998:	180f883a 	mov	r7,r3
   1699c:	00106e00 	call	106e0 <OSFlagPend>
   169a0:	00000a06 	br	169cc <altera_avalon_jtag_uart_write+0x250>
        /*
         * OS not running: Wait for data to be removed from buffer.
         * Once the interrupt routine has removed some data then we
         * will be able to insert some more.
         */
        while (out == sp->tx_out && sp->host_inactive < sp->timeout)
   169a4:	0001883a 	nop
   169a8:	e0bffc17 	ldw	r2,-16(fp)
   169ac:	10c01017 	ldw	r3,64(r2)
   169b0:	e0bff017 	ldw	r2,-64(fp)
   169b4:	1880051e 	bne	r3,r2,169cc <altera_avalon_jtag_uart_write+0x250>
   169b8:	e0bffc17 	ldw	r2,-16(fp)
   169bc:	10c00917 	ldw	r3,36(r2)
   169c0:	e0bffc17 	ldw	r2,-16(fp)
   169c4:	10800117 	ldw	r2,4(r2)
   169c8:	18bff736 	bltu	r3,r2,169a8 <__alt_mem_Flash_flash_data+0xf40169a8>
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
   169cc:	e0bffc17 	ldw	r2,-16(fp)
   169d0:	10800917 	ldw	r2,36(r2)
   169d4:	10000126 	beq	r2,zero,169dc <altera_avalon_jtag_uart_write+0x260>
         break;
   169d8:	00000206 	br	169e4 <altera_avalon_jtag_uart_write+0x268>
    }
  }
  while (count > 0);
   169dc:	e0bffe17 	ldw	r2,-8(fp)
   169e0:	00bf7b16 	blt	zero,r2,167d0 <__alt_mem_Flash_flash_data+0xf40167d0>

  /*
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);
   169e4:	e0bffc17 	ldw	r2,-16(fp)
   169e8:	10800b17 	ldw	r2,44(r2)
   169ec:	1009883a 	mov	r4,r2
   169f0:	001375c0 	call	1375c <OSSemPost>

  if (ptr != start)
   169f4:	e0fffd17 	ldw	r3,-12(fp)
   169f8:	e0bff217 	ldw	r2,-56(fp)
   169fc:	18800426 	beq	r3,r2,16a10 <altera_avalon_jtag_uart_write+0x294>
    return ptr - start;
   16a00:	e0fffd17 	ldw	r3,-12(fp)
   16a04:	e0bff217 	ldw	r2,-56(fp)
   16a08:	1885c83a 	sub	r2,r3,r2
   16a0c:	00000606 	br	16a28 <altera_avalon_jtag_uart_write+0x2ac>
  else if (flags & O_NONBLOCK)
   16a10:	e0bfff17 	ldw	r2,-4(fp)
   16a14:	1090000c 	andi	r2,r2,16384
   16a18:	10000226 	beq	r2,zero,16a24 <altera_avalon_jtag_uart_write+0x2a8>
    return -EWOULDBLOCK;
   16a1c:	00bffd44 	movi	r2,-11
   16a20:	00000106 	br	16a28 <altera_avalon_jtag_uart_write+0x2ac>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
   16a24:	00bffec4 	movi	r2,-5
}
   16a28:	e037883a 	mov	sp,fp
   16a2c:	dfc00117 	ldw	ra,4(sp)
   16a30:	df000017 	ldw	fp,0(sp)
   16a34:	dec00204 	addi	sp,sp,8
   16a38:	f800283a 	ret

00016a3c <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
   16a3c:	defff904 	addi	sp,sp,-28
   16a40:	dfc00615 	stw	ra,24(sp)
   16a44:	df000515 	stw	fp,20(sp)
   16a48:	df000504 	addi	fp,sp,20
   16a4c:	e13ffe15 	stw	r4,-8(fp)
   16a50:	e17fff15 	stw	r5,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
   16a54:	0007883a 	mov	r3,zero
   16a58:	e0bffe17 	ldw	r2,-8(fp)
   16a5c:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
   16a60:	e0bffe17 	ldw	r2,-8(fp)
   16a64:	10800104 	addi	r2,r2,4
   16a68:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   16a6c:	0005303a 	rdctl	r2,status
   16a70:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   16a74:	e0fffc17 	ldw	r3,-16(fp)
   16a78:	00bfff84 	movi	r2,-2
   16a7c:	1884703a 	and	r2,r3,r2
   16a80:	1001703a 	wrctl	status,r2
  
  return context;
   16a84:	e0bffc17 	ldw	r2,-16(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
   16a88:	e0bffb15 	stw	r2,-20(fp)
  alt_tick ();
   16a8c:	0018ab80 	call	18ab8 <alt_tick>
   16a90:	e0bffb17 	ldw	r2,-20(fp)
   16a94:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   16a98:	e0bffd17 	ldw	r2,-12(fp)
   16a9c:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
   16aa0:	e037883a 	mov	sp,fp
   16aa4:	dfc00117 	ldw	ra,4(sp)
   16aa8:	df000017 	ldw	fp,0(sp)
   16aac:	dec00204 	addi	sp,sp,8
   16ab0:	f800283a 	ret

00016ab4 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
   16ab4:	defff904 	addi	sp,sp,-28
   16ab8:	dfc00615 	stw	ra,24(sp)
   16abc:	df000515 	stw	fp,20(sp)
   16ac0:	df000504 	addi	fp,sp,20
   16ac4:	e13ffc15 	stw	r4,-16(fp)
   16ac8:	e17ffd15 	stw	r5,-12(fp)
   16acc:	e1bffe15 	stw	r6,-8(fp)
   16ad0:	e1ffff15 	stw	r7,-4(fp)
   16ad4:	e0bfff17 	ldw	r2,-4(fp)
   16ad8:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
   16adc:	008000b4 	movhi	r2,2
   16ae0:	10b6a104 	addi	r2,r2,-9596
   16ae4:	10800017 	ldw	r2,0(r2)
   16ae8:	1000041e 	bne	r2,zero,16afc <alt_avalon_timer_sc_init+0x48>
  {
    _alt_tick_rate = nticks;
   16aec:	008000b4 	movhi	r2,2
   16af0:	10b6a104 	addi	r2,r2,-9596
   16af4:	e0fffb17 	ldw	r3,-20(fp)
   16af8:	10c00015 	stw	r3,0(r2)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
   16afc:	e0bffc17 	ldw	r2,-16(fp)
   16b00:	10800104 	addi	r2,r2,4
   16b04:	00c001c4 	movi	r3,7
   16b08:	10c00035 	stwio	r3,0(r2)
  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
   16b0c:	e13ffe17 	ldw	r4,-8(fp)
   16b10:	e17ffc17 	ldw	r5,-16(fp)
   16b14:	01800074 	movhi	r6,1
   16b18:	319a8f04 	addi	r6,r6,27196
   16b1c:	00185fc0 	call	185fc <alt_irq_register>
#endif  
}
   16b20:	e037883a 	mov	sp,fp
   16b24:	dfc00117 	ldw	ra,4(sp)
   16b28:	df000017 	ldw	fp,0(sp)
   16b2c:	dec00204 	addi	sp,sp,8
   16b30:	f800283a 	ret

00016b34 <get_DDRAM_addr>:
 * @sa the datasheet for the LCD Display Controller on the DE2 Board
 * @note the function requires that the input are in the valid range
 *
 **/
unsigned char get_DDRAM_addr(unsigned x_pos, unsigned y_pos)
{
   16b34:	defffc04 	addi	sp,sp,-16
   16b38:	df000315 	stw	fp,12(sp)
   16b3c:	df000304 	addi	fp,sp,12
   16b40:	e13ffe15 	stw	r4,-8(fp)
   16b44:	e17fff15 	stw	r5,-4(fp)
	//assume valid inputs
	unsigned char addr = 0x00000000;
   16b48:	e03ffd05 	stb	zero,-12(fp)
	if (y_pos == 0)
   16b4c:	e0bfff17 	ldw	r2,-4(fp)
   16b50:	1000061e 	bne	r2,zero,16b6c <get_DDRAM_addr+0x38>
	{
		addr |= x_pos;
   16b54:	e0bffe17 	ldw	r2,-8(fp)
   16b58:	1007883a 	mov	r3,r2
   16b5c:	e0bffd03 	ldbu	r2,-12(fp)
   16b60:	1884b03a 	or	r2,r3,r2
   16b64:	e0bffd05 	stb	r2,-12(fp)
   16b68:	00000806 	br	16b8c <get_DDRAM_addr+0x58>
	}
	else
	{
		addr |= x_pos;
   16b6c:	e0bffe17 	ldw	r2,-8(fp)
   16b70:	1007883a 	mov	r3,r2
   16b74:	e0bffd03 	ldbu	r2,-12(fp)
   16b78:	1884b03a 	or	r2,r3,r2
   16b7c:	e0bffd05 	stb	r2,-12(fp)
		addr |= 0x00000040;
   16b80:	e0bffd03 	ldbu	r2,-12(fp)
   16b84:	10801014 	ori	r2,r2,64
   16b88:	e0bffd05 	stb	r2,-12(fp)
	}
	// b_7 is always 1 for DDRAM address, see datasheet
	return (addr | 0x00000080);
   16b8c:	e0fffd03 	ldbu	r3,-12(fp)
   16b90:	00bfe004 	movi	r2,-128
   16b94:	1884b03a 	or	r2,r3,r2
}
   16b98:	e037883a 	mov	sp,fp
   16b9c:	df000017 	ldw	fp,0(sp)
   16ba0:	dec00104 	addi	sp,sp,4
   16ba4:	f800283a 	ret

00016ba8 <alt_up_character_lcd_send_cmd>:
 * @param cmd -- the command bits 
 *
 * @return nothing
 **/
void alt_up_character_lcd_send_cmd(alt_up_character_lcd_dev *lcd, unsigned char cmd)
{
   16ba8:	defffd04 	addi	sp,sp,-12
   16bac:	df000215 	stw	fp,8(sp)
   16bb0:	df000204 	addi	fp,sp,8
   16bb4:	e13ffe15 	stw	r4,-8(fp)
   16bb8:	2805883a 	mov	r2,r5
   16bbc:	e0bfff05 	stb	r2,-4(fp)
 	// NOTE: We use the term Instruction Register and Control Register interchangeably
	IOWR_ALT_UP_CHARACTER_LCD_COMMAND(lcd->base, cmd);
   16bc0:	e0bffe17 	ldw	r2,-8(fp)
   16bc4:	10800a17 	ldw	r2,40(r2)
   16bc8:	1007883a 	mov	r3,r2
   16bcc:	e0bfff03 	ldbu	r2,-4(fp)
   16bd0:	18800025 	stbio	r2,0(r3)
}
   16bd4:	e037883a 	mov	sp,fp
   16bd8:	df000017 	ldw	fp,0(sp)
   16bdc:	dec00104 	addi	sp,sp,4
   16be0:	f800283a 	ret

00016be4 <alt_up_character_lcd_init>:
 * file for a detailed description of each function
 */
////////////////////////////////////////////////////////////////////////////

void alt_up_character_lcd_init(alt_up_character_lcd_dev *lcd)
{
   16be4:	defffe04 	addi	sp,sp,-8
   16be8:	df000115 	stw	fp,4(sp)
   16bec:	df000104 	addi	fp,sp,4
   16bf0:	e13fff15 	stw	r4,-4(fp)
	IOWR_ALT_UP_CHARACTER_LCD_COMMAND(lcd->base, ALT_UP_CHARACTER_LCD_COMM_CLEAR_DISPLAY);
   16bf4:	e0bfff17 	ldw	r2,-4(fp)
   16bf8:	10800a17 	ldw	r2,40(r2)
   16bfc:	1007883a 	mov	r3,r2
   16c00:	00800044 	movi	r2,1
   16c04:	18800025 	stbio	r2,0(r3)
	// register the device 
	// see "Developing Device Drivers for the HAL" in "Nios II Software Developer's Handbook"
}
   16c08:	e037883a 	mov	sp,fp
   16c0c:	df000017 	ldw	fp,0(sp)
   16c10:	dec00104 	addi	sp,sp,4
   16c14:	f800283a 	ret

00016c18 <alt_up_character_lcd_open_dev>:

alt_up_character_lcd_dev* alt_up_character_lcd_open_dev(const char* name)
{
   16c18:	defffc04 	addi	sp,sp,-16
   16c1c:	dfc00315 	stw	ra,12(sp)
   16c20:	df000215 	stw	fp,8(sp)
   16c24:	df000204 	addi	fp,sp,8
   16c28:	e13fff15 	stw	r4,-4(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_character_lcd_dev *dev = (alt_up_character_lcd_dev*)alt_find_dev(name, &alt_dev_list);
   16c2c:	e13fff17 	ldw	r4,-4(fp)
   16c30:	014000b4 	movhi	r5,2
   16c34:	296e9504 	addi	r5,r5,-17836
   16c38:	00184040 	call	18404 <alt_find_dev>
   16c3c:	e0bffe15 	stw	r2,-8(fp)

  return dev;
   16c40:	e0bffe17 	ldw	r2,-8(fp)
}
   16c44:	e037883a 	mov	sp,fp
   16c48:	dfc00117 	ldw	ra,4(sp)
   16c4c:	df000017 	ldw	fp,0(sp)
   16c50:	dec00204 	addi	sp,sp,8
   16c54:	f800283a 	ret

00016c58 <alt_up_character_lcd_write>:

void alt_up_character_lcd_write(alt_up_character_lcd_dev *dev, const char *ptr, unsigned int len)
{
   16c58:	defffb04 	addi	sp,sp,-20
   16c5c:	df000415 	stw	fp,16(sp)
   16c60:	df000404 	addi	fp,sp,16
   16c64:	e13ffd15 	stw	r4,-12(fp)
   16c68:	e17ffe15 	stw	r5,-8(fp)
   16c6c:	e1bfff15 	stw	r6,-4(fp)
	unsigned int i;
	for (i = 0; i < len; i++)
   16c70:	e03ffc15 	stw	zero,-16(fp)
   16c74:	00000f06 	br	16cb4 <alt_up_character_lcd_write+0x5c>
	{
		IOWR_ALT_UP_CHARACTER_LCD_DATA(dev->base, *(ptr+i));
   16c78:	e0bffd17 	ldw	r2,-12(fp)
   16c7c:	10800a17 	ldw	r2,40(r2)
   16c80:	10800044 	addi	r2,r2,1
   16c84:	1009883a 	mov	r4,r2
   16c88:	e0fffe17 	ldw	r3,-8(fp)
   16c8c:	e0bffc17 	ldw	r2,-16(fp)
   16c90:	1885883a 	add	r2,r3,r2
   16c94:	10800003 	ldbu	r2,0(r2)
   16c98:	10803fcc 	andi	r2,r2,255
   16c9c:	1080201c 	xori	r2,r2,128
   16ca0:	10bfe004 	addi	r2,r2,-128
   16ca4:	20800025 	stbio	r2,0(r4)
}

void alt_up_character_lcd_write(alt_up_character_lcd_dev *dev, const char *ptr, unsigned int len)
{
	unsigned int i;
	for (i = 0; i < len; i++)
   16ca8:	e0bffc17 	ldw	r2,-16(fp)
   16cac:	10800044 	addi	r2,r2,1
   16cb0:	e0bffc15 	stw	r2,-16(fp)
   16cb4:	e0fffc17 	ldw	r3,-16(fp)
   16cb8:	e0bfff17 	ldw	r2,-4(fp)
   16cbc:	18bfee36 	bltu	r3,r2,16c78 <__alt_mem_Flash_flash_data+0xf4016c78>
	{
		IOWR_ALT_UP_CHARACTER_LCD_DATA(dev->base, *(ptr+i));
	}
}
   16cc0:	e037883a 	mov	sp,fp
   16cc4:	df000017 	ldw	fp,0(sp)
   16cc8:	dec00104 	addi	sp,sp,4
   16ccc:	f800283a 	ret

00016cd0 <alt_up_character_lcd_string>:

void alt_up_character_lcd_string(alt_up_character_lcd_dev *dev, const char *ptr)
{
   16cd0:	defffd04 	addi	sp,sp,-12
   16cd4:	df000215 	stw	fp,8(sp)
   16cd8:	df000204 	addi	fp,sp,8
   16cdc:	e13ffe15 	stw	r4,-8(fp)
   16ce0:	e17fff15 	stw	r5,-4(fp)
	while ( *ptr )
   16ce4:	00000d06 	br	16d1c <alt_up_character_lcd_string+0x4c>
	{
		IOWR_ALT_UP_CHARACTER_LCD_DATA(dev->base, *(ptr));
   16ce8:	e0bffe17 	ldw	r2,-8(fp)
   16cec:	10800a17 	ldw	r2,40(r2)
   16cf0:	10800044 	addi	r2,r2,1
   16cf4:	1007883a 	mov	r3,r2
   16cf8:	e0bfff17 	ldw	r2,-4(fp)
   16cfc:	10800003 	ldbu	r2,0(r2)
   16d00:	10803fcc 	andi	r2,r2,255
   16d04:	1080201c 	xori	r2,r2,128
   16d08:	10bfe004 	addi	r2,r2,-128
   16d0c:	18800025 	stbio	r2,0(r3)
		++ptr;
   16d10:	e0bfff17 	ldw	r2,-4(fp)
   16d14:	10800044 	addi	r2,r2,1
   16d18:	e0bfff15 	stw	r2,-4(fp)
	}
}

void alt_up_character_lcd_string(alt_up_character_lcd_dev *dev, const char *ptr)
{
	while ( *ptr )
   16d1c:	e0bfff17 	ldw	r2,-4(fp)
   16d20:	10800003 	ldbu	r2,0(r2)
   16d24:	10803fcc 	andi	r2,r2,255
   16d28:	1080201c 	xori	r2,r2,128
   16d2c:	10bfe004 	addi	r2,r2,-128
   16d30:	103fed1e 	bne	r2,zero,16ce8 <__alt_mem_Flash_flash_data+0xf4016ce8>
	{
		IOWR_ALT_UP_CHARACTER_LCD_DATA(dev->base, *(ptr));
		++ptr;
	}
}
   16d34:	e037883a 	mov	sp,fp
   16d38:	df000017 	ldw	fp,0(sp)
   16d3c:	dec00104 	addi	sp,sp,4
   16d40:	f800283a 	ret

00016d44 <alt_up_character_lcd_write_fd>:

// this function isn't used, and is included for future upgrades
int alt_up_character_lcd_write_fd(alt_fd *fd, const char *ptr, int len)
{
   16d44:	defffb04 	addi	sp,sp,-20
   16d48:	dfc00415 	stw	ra,16(sp)
   16d4c:	df000315 	stw	fp,12(sp)
   16d50:	df000304 	addi	fp,sp,12
   16d54:	e13ffd15 	stw	r4,-12(fp)
   16d58:	e17ffe15 	stw	r5,-8(fp)
   16d5c:	e1bfff15 	stw	r6,-4(fp)
	alt_up_character_lcd_write( (alt_up_character_lcd_dev *) fd->dev, ptr, (unsigned int) len);
   16d60:	e0bffd17 	ldw	r2,-12(fp)
   16d64:	10c00017 	ldw	r3,0(r2)
   16d68:	e0bfff17 	ldw	r2,-4(fp)
   16d6c:	1809883a 	mov	r4,r3
   16d70:	e17ffe17 	ldw	r5,-8(fp)
   16d74:	100d883a 	mov	r6,r2
   16d78:	0016c580 	call	16c58 <alt_up_character_lcd_write>
	return 0;
   16d7c:	0005883a 	mov	r2,zero
}
   16d80:	e037883a 	mov	sp,fp
   16d84:	dfc00117 	ldw	ra,4(sp)
   16d88:	df000017 	ldw	fp,0(sp)
   16d8c:	dec00204 	addi	sp,sp,8
   16d90:	f800283a 	ret

00016d94 <alt_up_character_lcd_set_cursor_pos>:

int alt_up_character_lcd_set_cursor_pos(alt_up_character_lcd_dev *lcd, unsigned x_pos, 
	 unsigned y_pos)
{
   16d94:	defffa04 	addi	sp,sp,-24
   16d98:	dfc00515 	stw	ra,20(sp)
   16d9c:	df000415 	stw	fp,16(sp)
   16da0:	df000404 	addi	fp,sp,16
   16da4:	e13ffd15 	stw	r4,-12(fp)
   16da8:	e17ffe15 	stw	r5,-8(fp)
   16dac:	e1bfff15 	stw	r6,-4(fp)
	//boundary check
	if (x_pos > 39 || y_pos > 1 )
   16db0:	e0bffe17 	ldw	r2,-8(fp)
   16db4:	10800a28 	cmpgeui	r2,r2,40
   16db8:	1000031e 	bne	r2,zero,16dc8 <alt_up_character_lcd_set_cursor_pos+0x34>
   16dbc:	e0bfff17 	ldw	r2,-4(fp)
   16dc0:	108000b0 	cmpltui	r2,r2,2
   16dc4:	1000021e 	bne	r2,zero,16dd0 <alt_up_character_lcd_set_cursor_pos+0x3c>
		// invalid argument
		return -1;
   16dc8:	00bfffc4 	movi	r2,-1
   16dcc:	00000906 	br	16df4 <alt_up_character_lcd_set_cursor_pos+0x60>
	// calculate address
	unsigned char addr = get_DDRAM_addr(x_pos, y_pos);
   16dd0:	e13ffe17 	ldw	r4,-8(fp)
   16dd4:	e17fff17 	ldw	r5,-4(fp)
   16dd8:	0016b340 	call	16b34 <get_DDRAM_addr>
   16ddc:	e0bffc05 	stb	r2,-16(fp)
	// set the cursor
	alt_up_character_lcd_send_cmd(lcd, addr);
   16de0:	e0bffc03 	ldbu	r2,-16(fp)
   16de4:	e13ffd17 	ldw	r4,-12(fp)
   16de8:	100b883a 	mov	r5,r2
   16dec:	0016ba80 	call	16ba8 <alt_up_character_lcd_send_cmd>
	return 0;
   16df0:	0005883a 	mov	r2,zero
}
   16df4:	e037883a 	mov	sp,fp
   16df8:	dfc00117 	ldw	ra,4(sp)
   16dfc:	df000017 	ldw	fp,0(sp)
   16e00:	dec00204 	addi	sp,sp,8
   16e04:	f800283a 	ret

00016e08 <alt_up_character_lcd_shift_cursor>:

void alt_up_character_lcd_shift_cursor(alt_up_character_lcd_dev *lcd, int x_right_shift_offset)
{
   16e08:	defffb04 	addi	sp,sp,-20
   16e0c:	dfc00415 	stw	ra,16(sp)
   16e10:	df000315 	stw	fp,12(sp)
   16e14:	df000304 	addi	fp,sp,12
   16e18:	e13ffe15 	stw	r4,-8(fp)
   16e1c:	e17fff15 	stw	r5,-4(fp)
	if (x_right_shift_offset == 0) 
   16e20:	e0bfff17 	ldw	r2,-4(fp)
   16e24:	1000011e 	bne	r2,zero,16e2c <alt_up_character_lcd_shift_cursor+0x24>
		// don't ask me to do nothing 
		return;
   16e28:	00001406 	br	16e7c <alt_up_character_lcd_shift_cursor+0x74>

	// see shift right or left
	unsigned char shift_cmd = (x_right_shift_offset > 0) ? 
   16e2c:	e0bfff17 	ldw	r2,-4(fp)
   16e30:	0080020e 	bge	zero,r2,16e3c <alt_up_character_lcd_shift_cursor+0x34>
   16e34:	00800504 	movi	r2,20
   16e38:	00000106 	br	16e40 <alt_up_character_lcd_shift_cursor+0x38>
   16e3c:	00800404 	movi	r2,16
   16e40:	e0bffd45 	stb	r2,-11(fp)
		ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_LEFT;
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
   16e44:	e0bfff17 	ldw	r2,-4(fp)
   16e48:	1000010e 	bge	r2,zero,16e50 <alt_up_character_lcd_shift_cursor+0x48>
   16e4c:	0085c83a 	sub	r2,zero,r2
   16e50:	e0bffd05 	stb	r2,-12(fp)
		-x_right_shift_offset;
	// do the shift
	while (num_offset-- > 0)
   16e54:	00000406 	br	16e68 <alt_up_character_lcd_shift_cursor+0x60>
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
   16e58:	e0bffd43 	ldbu	r2,-11(fp)
   16e5c:	e13ffe17 	ldw	r4,-8(fp)
   16e60:	100b883a 	mov	r5,r2
   16e64:	0016ba80 	call	16ba8 <alt_up_character_lcd_send_cmd>
		ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_LEFT;
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
		-x_right_shift_offset;
	// do the shift
	while (num_offset-- > 0)
   16e68:	e0bffd03 	ldbu	r2,-12(fp)
   16e6c:	10ffffc4 	addi	r3,r2,-1
   16e70:	e0fffd05 	stb	r3,-12(fp)
   16e74:	10803fcc 	andi	r2,r2,255
   16e78:	103ff71e 	bne	r2,zero,16e58 <__alt_mem_Flash_flash_data+0xf4016e58>
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
}
   16e7c:	e037883a 	mov	sp,fp
   16e80:	dfc00117 	ldw	ra,4(sp)
   16e84:	df000017 	ldw	fp,0(sp)
   16e88:	dec00204 	addi	sp,sp,8
   16e8c:	f800283a 	ret

00016e90 <alt_up_character_lcd_shift_display>:

void alt_up_character_lcd_shift_display(alt_up_character_lcd_dev *lcd, int x_right_shift_offset)
{
   16e90:	defffb04 	addi	sp,sp,-20
   16e94:	dfc00415 	stw	ra,16(sp)
   16e98:	df000315 	stw	fp,12(sp)
   16e9c:	df000304 	addi	fp,sp,12
   16ea0:	e13ffe15 	stw	r4,-8(fp)
   16ea4:	e17fff15 	stw	r5,-4(fp)
	if (x_right_shift_offset == 0) 
   16ea8:	e0bfff17 	ldw	r2,-4(fp)
   16eac:	1000011e 	bne	r2,zero,16eb4 <alt_up_character_lcd_shift_display+0x24>
		// don't ask me to do nothing 
		return;
   16eb0:	00001406 	br	16f04 <alt_up_character_lcd_shift_display+0x74>

	// see shift right or left
	unsigned char shift_cmd = (x_right_shift_offset > 0) ? 
   16eb4:	e0bfff17 	ldw	r2,-4(fp)
   16eb8:	0080020e 	bge	zero,r2,16ec4 <alt_up_character_lcd_shift_display+0x34>
   16ebc:	00800704 	movi	r2,28
   16ec0:	00000106 	br	16ec8 <alt_up_character_lcd_shift_display+0x38>
   16ec4:	00800604 	movi	r2,24
   16ec8:	e0bffd45 	stb	r2,-11(fp)
		ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_LEFT;
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
   16ecc:	e0bfff17 	ldw	r2,-4(fp)
   16ed0:	1000010e 	bge	r2,zero,16ed8 <alt_up_character_lcd_shift_display+0x48>
   16ed4:	0085c83a 	sub	r2,zero,r2
   16ed8:	e0bffd05 	stb	r2,-12(fp)
		-x_right_shift_offset;
	// do the shift
	while (num_offset-- > 0)
   16edc:	00000406 	br	16ef0 <alt_up_character_lcd_shift_display+0x60>
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
   16ee0:	e0bffd43 	ldbu	r2,-11(fp)
   16ee4:	e13ffe17 	ldw	r4,-8(fp)
   16ee8:	100b883a 	mov	r5,r2
   16eec:	0016ba80 	call	16ba8 <alt_up_character_lcd_send_cmd>
		ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_LEFT;
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
		-x_right_shift_offset;
	// do the shift
	while (num_offset-- > 0)
   16ef0:	e0bffd03 	ldbu	r2,-12(fp)
   16ef4:	10ffffc4 	addi	r3,r2,-1
   16ef8:	e0fffd05 	stb	r3,-12(fp)
   16efc:	10803fcc 	andi	r2,r2,255
   16f00:	103ff71e 	bne	r2,zero,16ee0 <__alt_mem_Flash_flash_data+0xf4016ee0>
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
}
   16f04:	e037883a 	mov	sp,fp
   16f08:	dfc00117 	ldw	ra,4(sp)
   16f0c:	df000017 	ldw	fp,0(sp)
   16f10:	dec00204 	addi	sp,sp,8
   16f14:	f800283a 	ret

00016f18 <alt_up_character_lcd_erase_pos>:

int alt_up_character_lcd_erase_pos(alt_up_character_lcd_dev *lcd, unsigned x_pos, unsigned y_pos)
{
   16f18:	defffa04 	addi	sp,sp,-24
   16f1c:	dfc00515 	stw	ra,20(sp)
   16f20:	df000415 	stw	fp,16(sp)
   16f24:	df000404 	addi	fp,sp,16
   16f28:	e13ffd15 	stw	r4,-12(fp)
   16f2c:	e17ffe15 	stw	r5,-8(fp)
   16f30:	e1bfff15 	stw	r6,-4(fp)
	// boundary check
	if (x_pos > 39 || y_pos > 1 )
   16f34:	e0bffe17 	ldw	r2,-8(fp)
   16f38:	10800a28 	cmpgeui	r2,r2,40
   16f3c:	1000031e 	bne	r2,zero,16f4c <alt_up_character_lcd_erase_pos+0x34>
   16f40:	e0bfff17 	ldw	r2,-4(fp)
   16f44:	108000b0 	cmpltui	r2,r2,2
   16f48:	1000021e 	bne	r2,zero,16f54 <alt_up_character_lcd_erase_pos+0x3c>
		return -1;
   16f4c:	00bfffc4 	movi	r2,-1
   16f50:	00000f06 	br	16f90 <alt_up_character_lcd_erase_pos+0x78>

	// get address
	unsigned char addr = get_DDRAM_addr(x_pos, y_pos);
   16f54:	e13ffe17 	ldw	r4,-8(fp)
   16f58:	e17fff17 	ldw	r5,-4(fp)
   16f5c:	0016b340 	call	16b34 <get_DDRAM_addr>
   16f60:	e0bffc05 	stb	r2,-16(fp)
	// set cursor to dest point
	alt_up_character_lcd_send_cmd(lcd, addr);
   16f64:	e0bffc03 	ldbu	r2,-16(fp)
   16f68:	e13ffd17 	ldw	r4,-12(fp)
   16f6c:	100b883a 	mov	r5,r2
   16f70:	0016ba80 	call	16ba8 <alt_up_character_lcd_send_cmd>
	//send an empty char as erase (refer to the Character Generator ROM part of the Datasheet)
	IOWR_ALT_UP_CHARACTER_LCD_DATA(lcd->base, (0x00000002) );
   16f74:	e0bffd17 	ldw	r2,-12(fp)
   16f78:	10800a17 	ldw	r2,40(r2)
   16f7c:	10800044 	addi	r2,r2,1
   16f80:	1007883a 	mov	r3,r2
   16f84:	00800084 	movi	r2,2
   16f88:	18800025 	stbio	r2,0(r3)
	return 0;
   16f8c:	0005883a 	mov	r2,zero
}
   16f90:	e037883a 	mov	sp,fp
   16f94:	dfc00117 	ldw	ra,4(sp)
   16f98:	df000017 	ldw	fp,0(sp)
   16f9c:	dec00204 	addi	sp,sp,8
   16fa0:	f800283a 	ret

00016fa4 <alt_up_character_lcd_cursor_off>:

void alt_up_character_lcd_cursor_off(alt_up_character_lcd_dev *lcd)
{
   16fa4:	defffd04 	addi	sp,sp,-12
   16fa8:	dfc00215 	stw	ra,8(sp)
   16fac:	df000115 	stw	fp,4(sp)
   16fb0:	df000104 	addi	fp,sp,4
   16fb4:	e13fff15 	stw	r4,-4(fp)
	alt_up_character_lcd_send_cmd(lcd, ALT_UP_CHARACTER_LCD_COMM_CURSOR_OFF);
   16fb8:	e13fff17 	ldw	r4,-4(fp)
   16fbc:	01400304 	movi	r5,12
   16fc0:	0016ba80 	call	16ba8 <alt_up_character_lcd_send_cmd>
}
   16fc4:	e037883a 	mov	sp,fp
   16fc8:	dfc00117 	ldw	ra,4(sp)
   16fcc:	df000017 	ldw	fp,0(sp)
   16fd0:	dec00204 	addi	sp,sp,8
   16fd4:	f800283a 	ret

00016fd8 <alt_up_character_lcd_cursor_blink_on>:

void alt_up_character_lcd_cursor_blink_on(alt_up_character_lcd_dev *lcd)
{
   16fd8:	defffd04 	addi	sp,sp,-12
   16fdc:	dfc00215 	stw	ra,8(sp)
   16fe0:	df000115 	stw	fp,4(sp)
   16fe4:	df000104 	addi	fp,sp,4
   16fe8:	e13fff15 	stw	r4,-4(fp)
	alt_up_character_lcd_send_cmd(lcd, ALT_UP_CHARACTER_LCD_COMM_CURSOR_BLINK_ON);
   16fec:	e13fff17 	ldw	r4,-4(fp)
   16ff0:	014003c4 	movi	r5,15
   16ff4:	0016ba80 	call	16ba8 <alt_up_character_lcd_send_cmd>
}
   16ff8:	e037883a 	mov	sp,fp
   16ffc:	dfc00117 	ldw	ra,4(sp)
   17000:	df000017 	ldw	fp,0(sp)
   17004:	dec00204 	addi	sp,sp,8
   17008:	f800283a 	ret

0001700c <alt_up_irda_enable_read_interrupt>:
#include "altera_up_avalon_irda.h"
#include "altera_up_avalon_irda_regs.h"


void alt_up_irda_enable_read_interrupt(alt_up_irda_dev *irda)
{
   1700c:	defffd04 	addi	sp,sp,-12
   17010:	df000215 	stw	fp,8(sp)
   17014:	df000204 	addi	fp,sp,8
   17018:	e13fff15 	stw	r4,-4(fp)
	alt_u32 ctrl_reg;
	ctrl_reg = IORD_ALT_UP_IRDA_CONTROL(irda->base); 
   1701c:	e0bfff17 	ldw	r2,-4(fp)
   17020:	10800a17 	ldw	r2,40(r2)
   17024:	10800104 	addi	r2,r2,4
   17028:	10800037 	ldwio	r2,0(r2)
   1702c:	e0bffe15 	stw	r2,-8(fp)
	// set RE to 1 while maintaining other bits the same
	ctrl_reg |= ALT_UP_IRDA_CONTROL_RE_MSK;
   17030:	e0bffe17 	ldw	r2,-8(fp)
   17034:	10800054 	ori	r2,r2,1
   17038:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_IRDA_CONTROL(irda->base, ctrl_reg);
   1703c:	e0bfff17 	ldw	r2,-4(fp)
   17040:	10800a17 	ldw	r2,40(r2)
   17044:	10800104 	addi	r2,r2,4
   17048:	1007883a 	mov	r3,r2
   1704c:	e0bffe17 	ldw	r2,-8(fp)
   17050:	18800035 	stwio	r2,0(r3)
}
   17054:	e037883a 	mov	sp,fp
   17058:	df000017 	ldw	fp,0(sp)
   1705c:	dec00104 	addi	sp,sp,4
   17060:	f800283a 	ret

00017064 <alt_up_irda_disable_read_interrupt>:

void alt_up_irda_disable_read_interrupt(alt_up_irda_dev *irda)
{
   17064:	defffd04 	addi	sp,sp,-12
   17068:	df000215 	stw	fp,8(sp)
   1706c:	df000204 	addi	fp,sp,8
   17070:	e13fff15 	stw	r4,-4(fp)
	alt_u32 ctrl_reg;
	ctrl_reg = IORD_ALT_UP_IRDA_CONTROL(irda->base); 
   17074:	e0bfff17 	ldw	r2,-4(fp)
   17078:	10800a17 	ldw	r2,40(r2)
   1707c:	10800104 	addi	r2,r2,4
   17080:	10800037 	ldwio	r2,0(r2)
   17084:	e0bffe15 	stw	r2,-8(fp)
	// set RE to 0 while maintaining other bits the same
	ctrl_reg &= ~ALT_UP_IRDA_CONTROL_RE_MSK;
   17088:	e0fffe17 	ldw	r3,-8(fp)
   1708c:	00bfff84 	movi	r2,-2
   17090:	1884703a 	and	r2,r3,r2
   17094:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_IRDA_CONTROL(irda->base, ctrl_reg);
   17098:	e0bfff17 	ldw	r2,-4(fp)
   1709c:	10800a17 	ldw	r2,40(r2)
   170a0:	10800104 	addi	r2,r2,4
   170a4:	1007883a 	mov	r3,r2
   170a8:	e0bffe17 	ldw	r2,-8(fp)
   170ac:	18800035 	stwio	r2,0(r3)
}
   170b0:	e037883a 	mov	sp,fp
   170b4:	df000017 	ldw	fp,0(sp)
   170b8:	dec00104 	addi	sp,sp,4
   170bc:	f800283a 	ret

000170c0 <alt_up_irda_get_used_space_in_read_FIFO>:

unsigned alt_up_irda_get_used_space_in_read_FIFO(alt_up_irda_dev *irda)
{
   170c0:	defffd04 	addi	sp,sp,-12
   170c4:	df000215 	stw	fp,8(sp)
   170c8:	df000204 	addi	fp,sp,8
   170cc:	e13fff15 	stw	r4,-4(fp)
	alt_u16 ravail = 0;
   170d0:	e03ffe0d 	sth	zero,-8(fp)
	// we can only read the 16 bits for RAVAIL --- a read of DATA will discard the data
//	ravail = IORD_16DIRECT(IOADDR_ALT_UP_IRDA_DATA(irda->base), 2); 
//	return ravail;
	ravail = IORD_ALT_UP_IRDA_RAVAIL(irda->base); 
   170d4:	e0bfff17 	ldw	r2,-4(fp)
   170d8:	10800a17 	ldw	r2,40(r2)
   170dc:	10800084 	addi	r2,r2,2
   170e0:	1080002b 	ldhuio	r2,0(r2)
   170e4:	10bfffcc 	andi	r2,r2,65535
   170e8:	e0bffe0d 	sth	r2,-8(fp)
	return (ravail & ALT_UP_IRDA_RAVAIL_MSK) >> ALT_UP_IRDA_RAVAIL_OFST;
   170ec:	e0bffe0b 	ldhu	r2,-8(fp)
}
   170f0:	e037883a 	mov	sp,fp
   170f4:	df000017 	ldw	fp,0(sp)
   170f8:	dec00104 	addi	sp,sp,4
   170fc:	f800283a 	ret

00017100 <alt_up_irda_get_available_space_in_write_FIFO>:

unsigned alt_up_irda_get_available_space_in_write_FIFO(alt_up_irda_dev *irda)
{
   17100:	defffd04 	addi	sp,sp,-12
   17104:	df000215 	stw	fp,8(sp)
   17108:	df000204 	addi	fp,sp,8
   1710c:	e13fff15 	stw	r4,-4(fp)
	alt_u32 ctrl_reg;
	ctrl_reg = IORD_ALT_UP_IRDA_CONTROL(irda->base); 
   17110:	e0bfff17 	ldw	r2,-4(fp)
   17114:	10800a17 	ldw	r2,40(r2)
   17118:	10800104 	addi	r2,r2,4
   1711c:	10800037 	ldwio	r2,0(r2)
   17120:	e0bffe15 	stw	r2,-8(fp)
	return (ctrl_reg & ALT_UP_IRDA_CONTROL_WSPACE_MSK) >> ALT_UP_IRDA_CONTROL_WSPACE_OFST;
   17124:	e0bffe17 	ldw	r2,-8(fp)
   17128:	1004d43a 	srli	r2,r2,16
}
   1712c:	e037883a 	mov	sp,fp
   17130:	df000017 	ldw	fp,0(sp)
   17134:	dec00104 	addi	sp,sp,4
   17138:	f800283a 	ret

0001713c <alt_up_irda_check_parity>:

int alt_up_irda_check_parity(alt_u32 data_reg)
{
   1713c:	defffd04 	addi	sp,sp,-12
   17140:	df000215 	stw	fp,8(sp)
   17144:	df000204 	addi	fp,sp,8
   17148:	e13fff15 	stw	r4,-4(fp)
	unsigned parity_error = (data_reg & ALT_UP_IRDA_DATA_PE_MSK) >> ALT_UP_IRDA_DATA_PE_OFST;
   1714c:	e0bfff17 	ldw	r2,-4(fp)
   17150:	1080800c 	andi	r2,r2,512
   17154:	1004d27a 	srli	r2,r2,9
   17158:	e0bffe15 	stw	r2,-8(fp)
	return (parity_error ? -1 : 0);
   1715c:	e0bffe17 	ldw	r2,-8(fp)
   17160:	10000226 	beq	r2,zero,1716c <alt_up_irda_check_parity+0x30>
   17164:	00bfffc4 	movi	r2,-1
   17168:	00000106 	br	17170 <alt_up_irda_check_parity+0x34>
   1716c:	0005883a 	mov	r2,zero
}
   17170:	e037883a 	mov	sp,fp
   17174:	df000017 	ldw	fp,0(sp)
   17178:	dec00104 	addi	sp,sp,4
   1717c:	f800283a 	ret

00017180 <alt_up_irda_write_data>:

int alt_up_irda_write_data(alt_up_irda_dev *irda, alt_u8 data)
{
   17180:	defffd04 	addi	sp,sp,-12
   17184:	df000215 	stw	fp,8(sp)
   17188:	df000204 	addi	fp,sp,8
   1718c:	e13ffe15 	stw	r4,-8(fp)
   17190:	2805883a 	mov	r2,r5
   17194:	e0bfff05 	stb	r2,-4(fp)
	data_reg = IORD_ALT_UP_IRDA_DATA(irda->base);
    */

	// we can write directly without thinking about other bit fields for this
	// case ONLY, because only DATA field of the data register is writable
	IOWR_ALT_UP_IRDA_DATA(irda->base, (data>>ALT_UP_IRDA_DATA_DATA_OFST) & ALT_UP_IRDA_DATA_DATA_MSK);
   17198:	e0bffe17 	ldw	r2,-8(fp)
   1719c:	10800a17 	ldw	r2,40(r2)
   171a0:	1007883a 	mov	r3,r2
   171a4:	e0bfff03 	ldbu	r2,-4(fp)
   171a8:	18800035 	stwio	r2,0(r3)
	return 0;
   171ac:	0005883a 	mov	r2,zero
}
   171b0:	e037883a 	mov	sp,fp
   171b4:	df000017 	ldw	fp,0(sp)
   171b8:	dec00104 	addi	sp,sp,4
   171bc:	f800283a 	ret

000171c0 <alt_up_irda_read_data>:

int alt_up_irda_read_data(alt_up_irda_dev *irda, alt_u8 *data, alt_u8 *parity_error)
{
   171c0:	defffa04 	addi	sp,sp,-24
   171c4:	dfc00515 	stw	ra,20(sp)
   171c8:	df000415 	stw	fp,16(sp)
   171cc:	df000404 	addi	fp,sp,16
   171d0:	e13ffd15 	stw	r4,-12(fp)
   171d4:	e17ffe15 	stw	r5,-8(fp)
   171d8:	e1bfff15 	stw	r6,-4(fp)
	alt_u32 data_reg;
	data_reg = IORD_ALT_UP_IRDA_DATA(irda->base);
   171dc:	e0bffd17 	ldw	r2,-12(fp)
   171e0:	10800a17 	ldw	r2,40(r2)
   171e4:	10800037 	ldwio	r2,0(r2)
   171e8:	e0bffc15 	stw	r2,-16(fp)
	*data = (data_reg & ALT_UP_IRDA_DATA_DATA_MSK) >> ALT_UP_IRDA_DATA_DATA_OFST;
   171ec:	e0bffc17 	ldw	r2,-16(fp)
   171f0:	1007883a 	mov	r3,r2
   171f4:	e0bffe17 	ldw	r2,-8(fp)
   171f8:	10c00005 	stb	r3,0(r2)
	*parity_error = alt_up_irda_check_parity(data_reg);
   171fc:	e13ffc17 	ldw	r4,-16(fp)
   17200:	001713c0 	call	1713c <alt_up_irda_check_parity>
   17204:	1007883a 	mov	r3,r2
   17208:	e0bfff17 	ldw	r2,-4(fp)
   1720c:	10c00005 	stb	r3,0(r2)
	return (((data_reg & ALT_UP_IRDA_DATA_RVALID_MSK) >> ALT_UP_IRDA_DATA_RVALID_OFST) - 1);
   17210:	e0bffc17 	ldw	r2,-16(fp)
   17214:	10a0000c 	andi	r2,r2,32768
   17218:	1004d3fa 	srli	r2,r2,15
   1721c:	10bfffc4 	addi	r2,r2,-1
}
   17220:	e037883a 	mov	sp,fp
   17224:	dfc00117 	ldw	ra,4(sp)
   17228:	df000017 	ldw	fp,0(sp)
   1722c:	dec00204 	addi	sp,sp,8
   17230:	f800283a 	ret

00017234 <alt_up_irda_read_fd>:

int alt_up_irda_read_fd (alt_fd* fd, char* ptr, int len)
{
   17234:	defff804 	addi	sp,sp,-32
   17238:	dfc00715 	stw	ra,28(sp)
   1723c:	df000615 	stw	fp,24(sp)
   17240:	df000604 	addi	fp,sp,24
   17244:	e13ffd15 	stw	r4,-12(fp)
   17248:	e17ffe15 	stw	r5,-8(fp)
   1724c:	e1bfff15 	stw	r6,-4(fp)
	alt_up_irda_dev *irda = (alt_up_irda_dev*)fd->dev;
   17250:	e0bffd17 	ldw	r2,-12(fp)
   17254:	10800017 	ldw	r2,0(r2)
   17258:	e0bffb15 	stw	r2,-20(fp)
	int count = 0;
   1725c:	e03ffa15 	stw	zero,-24(fp)
	alt_u8 parity_error;
	while(len--)
   17260:	00000e06 	br	1729c <alt_up_irda_read_fd+0x68>
	{
		if (alt_up_irda_read_data(irda, (alt_u8 *)ptr++, &parity_error)==0)
   17264:	e0bffe17 	ldw	r2,-8(fp)
   17268:	10c00044 	addi	r3,r2,1
   1726c:	e0fffe15 	stw	r3,-8(fp)
   17270:	e0fffc04 	addi	r3,fp,-16
   17274:	e13ffb17 	ldw	r4,-20(fp)
   17278:	100b883a 	mov	r5,r2
   1727c:	180d883a 	mov	r6,r3
   17280:	00171c00 	call	171c0 <alt_up_irda_read_data>
   17284:	1000041e 	bne	r2,zero,17298 <alt_up_irda_read_fd+0x64>
			count++;
   17288:	e0bffa17 	ldw	r2,-24(fp)
   1728c:	10800044 	addi	r2,r2,1
   17290:	e0bffa15 	stw	r2,-24(fp)
   17294:	00000106 	br	1729c <alt_up_irda_read_fd+0x68>
		else
			break;
   17298:	00000406 	br	172ac <alt_up_irda_read_fd+0x78>
int alt_up_irda_read_fd (alt_fd* fd, char* ptr, int len)
{
	alt_up_irda_dev *irda = (alt_up_irda_dev*)fd->dev;
	int count = 0;
	alt_u8 parity_error;
	while(len--)
   1729c:	e0bfff17 	ldw	r2,-4(fp)
   172a0:	10ffffc4 	addi	r3,r2,-1
   172a4:	e0ffff15 	stw	r3,-4(fp)
   172a8:	103fee1e 	bne	r2,zero,17264 <__alt_mem_Flash_flash_data+0xf4017264>
		if (alt_up_irda_read_data(irda, (alt_u8 *)ptr++, &parity_error)==0)
			count++;
		else
			break;
	}
	return count;
   172ac:	e0bffa17 	ldw	r2,-24(fp)
}
   172b0:	e037883a 	mov	sp,fp
   172b4:	dfc00117 	ldw	ra,4(sp)
   172b8:	df000017 	ldw	fp,0(sp)
   172bc:	dec00204 	addi	sp,sp,8
   172c0:	f800283a 	ret

000172c4 <alt_up_irda_write_fd>:

int alt_up_irda_write_fd (alt_fd* fd, const char* ptr, int len)
{
   172c4:	defff904 	addi	sp,sp,-28
   172c8:	dfc00615 	stw	ra,24(sp)
   172cc:	df000515 	stw	fp,20(sp)
   172d0:	df000504 	addi	fp,sp,20
   172d4:	e13ffd15 	stw	r4,-12(fp)
   172d8:	e17ffe15 	stw	r5,-8(fp)
   172dc:	e1bfff15 	stw	r6,-4(fp)
	alt_up_irda_dev *irda = (alt_up_irda_dev*)fd->dev;
   172e0:	e0bffd17 	ldw	r2,-12(fp)
   172e4:	10800017 	ldw	r2,0(r2)
   172e8:	e0bffc15 	stw	r2,-16(fp)
	int count = 0;
   172ec:	e03ffb15 	stw	zero,-20(fp)
	while(len--)
   172f0:	00000e06 	br	1732c <alt_up_irda_write_fd+0x68>
	{
		if (alt_up_irda_write_data(irda, (alt_u8) *ptr++)==0)
   172f4:	e0bffe17 	ldw	r2,-8(fp)
   172f8:	10c00044 	addi	r3,r2,1
   172fc:	e0fffe15 	stw	r3,-8(fp)
   17300:	10800003 	ldbu	r2,0(r2)
   17304:	10803fcc 	andi	r2,r2,255
   17308:	e13ffc17 	ldw	r4,-16(fp)
   1730c:	100b883a 	mov	r5,r2
   17310:	00171800 	call	17180 <alt_up_irda_write_data>
   17314:	1000041e 	bne	r2,zero,17328 <alt_up_irda_write_fd+0x64>
			count++;
   17318:	e0bffb17 	ldw	r2,-20(fp)
   1731c:	10800044 	addi	r2,r2,1
   17320:	e0bffb15 	stw	r2,-20(fp)
   17324:	00000106 	br	1732c <alt_up_irda_write_fd+0x68>
		else
			break;
   17328:	00000406 	br	1733c <alt_up_irda_write_fd+0x78>

int alt_up_irda_write_fd (alt_fd* fd, const char* ptr, int len)
{
	alt_up_irda_dev *irda = (alt_up_irda_dev*)fd->dev;
	int count = 0;
	while(len--)
   1732c:	e0bfff17 	ldw	r2,-4(fp)
   17330:	10ffffc4 	addi	r3,r2,-1
   17334:	e0ffff15 	stw	r3,-4(fp)
   17338:	103fee1e 	bne	r2,zero,172f4 <__alt_mem_Flash_flash_data+0xf40172f4>
		if (alt_up_irda_write_data(irda, (alt_u8) *ptr++)==0)
			count++;
		else
			break;
	}
	return count;
   1733c:	e0bffb17 	ldw	r2,-20(fp)
}
   17340:	e037883a 	mov	sp,fp
   17344:	dfc00117 	ldw	ra,4(sp)
   17348:	df000017 	ldw	fp,0(sp)
   1734c:	dec00204 	addi	sp,sp,8
   17350:	f800283a 	ret

00017354 <alt_up_irda_open_dev>:

alt_up_irda_dev* alt_up_irda_open_dev(const char* name)
{
   17354:	defffc04 	addi	sp,sp,-16
   17358:	dfc00315 	stw	ra,12(sp)
   1735c:	df000215 	stw	fp,8(sp)
   17360:	df000204 	addi	fp,sp,8
   17364:	e13fff15 	stw	r4,-4(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_irda_dev *dev = (alt_up_irda_dev*)alt_find_dev(name, &alt_dev_list);
   17368:	e13fff17 	ldw	r4,-4(fp)
   1736c:	014000b4 	movhi	r5,2
   17370:	296e9504 	addi	r5,r5,-17836
   17374:	00184040 	call	18404 <alt_find_dev>
   17378:	e0bffe15 	stw	r2,-8(fp)

  return dev;
   1737c:	e0bffe17 	ldw	r2,-8(fp)
}
   17380:	e037883a 	mov	sp,fp
   17384:	dfc00117 	ldw	ra,4(sp)
   17388:	df000017 	ldw	fp,0(sp)
   1738c:	dec00204 	addi	sp,sp,8
   17390:	f800283a 	ret

00017394 <alt_up_parallel_port_open_dev>:

#include "altera_up_avalon_parallel_port.h"
#include "altera_up_avalon_parallel_port_regs.h"

alt_up_parallel_port_dev* alt_up_parallel_port_open_dev(const char* name)
{
   17394:	defffc04 	addi	sp,sp,-16
   17398:	dfc00315 	stw	ra,12(sp)
   1739c:	df000215 	stw	fp,8(sp)
   173a0:	df000204 	addi	fp,sp,8
   173a4:	e13fff15 	stw	r4,-4(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_parallel_port_dev *dev = (alt_up_parallel_port_dev*)alt_find_dev(name, &alt_dev_list);
   173a8:	e13fff17 	ldw	r4,-4(fp)
   173ac:	014000b4 	movhi	r5,2
   173b0:	296e9504 	addi	r5,r5,-17836
   173b4:	00184040 	call	18404 <alt_find_dev>
   173b8:	e0bffe15 	stw	r2,-8(fp)

  return dev;
   173bc:	e0bffe17 	ldw	r2,-8(fp)
}
   173c0:	e037883a 	mov	sp,fp
   173c4:	dfc00117 	ldw	ra,4(sp)
   173c8:	df000017 	ldw	fp,0(sp)
   173cc:	dec00204 	addi	sp,sp,8
   173d0:	f800283a 	ret

000173d4 <read_RI_bit>:


//////////////////////////////////////////////////////////////////////////////////////////////
// Internal Functions
alt_u8 read_RI_bit(alt_u32 ctrl_reg)
{
   173d4:	defffd04 	addi	sp,sp,-12
   173d8:	df000215 	stw	fp,8(sp)
   173dc:	df000204 	addi	fp,sp,8
   173e0:	e13fff15 	stw	r4,-4(fp)
	alt_u8 ri = (alt_u8) ((ctrl_reg & ALT_UP_PS2_PORT_CTRL_REG_RI_MSK) >> ALT_UP_PS2_PORT_CTRL_REG_RI_OFST);
   173e4:	e0bfff17 	ldw	r2,-4(fp)
   173e8:	1080400c 	andi	r2,r2,256
   173ec:	1004d23a 	srli	r2,r2,8
   173f0:	e0bffe05 	stb	r2,-8(fp)
	return ri;
   173f4:	e0bffe03 	ldbu	r2,-8(fp)
}
   173f8:	e037883a 	mov	sp,fp
   173fc:	df000017 	ldw	fp,0(sp)
   17400:	dec00104 	addi	sp,sp,4
   17404:	f800283a 	ret

00017408 <read_RE_bit>:

alt_u8 read_RE_bit(alt_u32 ctrl_reg)
{
   17408:	defffd04 	addi	sp,sp,-12
   1740c:	df000215 	stw	fp,8(sp)
   17410:	df000204 	addi	fp,sp,8
   17414:	e13fff15 	stw	r4,-4(fp)
	alt_u8 re = (alt_u8) ((ctrl_reg & ALT_UP_PS2_PORT_CTRL_REG_RE_MSK) >> ALT_UP_PS2_PORT_CTRL_REG_RE_OFST);
   17418:	e0bfff17 	ldw	r2,-4(fp)
   1741c:	1080004c 	andi	r2,r2,1
   17420:	e0bffe05 	stb	r2,-8(fp)
	return re;
   17424:	e0bffe03 	ldbu	r2,-8(fp)
}
   17428:	e037883a 	mov	sp,fp
   1742c:	df000017 	ldw	fp,0(sp)
   17430:	dec00104 	addi	sp,sp,4
   17434:	f800283a 	ret

00017438 <read_CE_bit>:

alt_u8 read_CE_bit(alt_u32 ctrl_reg)
{
   17438:	defffd04 	addi	sp,sp,-12
   1743c:	df000215 	stw	fp,8(sp)
   17440:	df000204 	addi	fp,sp,8
   17444:	e13fff15 	stw	r4,-4(fp)
	alt_u8 re = (alt_u8) ((ctrl_reg & ALT_UP_PS2_PORT_CTRL_REG_CE_MSK) >> ALT_UP_PS2_PORT_CTRL_REG_CE_OFST);
   17448:	e0bfff17 	ldw	r2,-4(fp)
   1744c:	1081000c 	andi	r2,r2,1024
   17450:	1004d2ba 	srli	r2,r2,10
   17454:	e0bffe05 	stb	r2,-8(fp)
	return re;
   17458:	e0bffe03 	ldbu	r2,-8(fp)
}
   1745c:	e037883a 	mov	sp,fp
   17460:	df000017 	ldw	fp,0(sp)
   17464:	dec00104 	addi	sp,sp,4
   17468:	f800283a 	ret

0001746c <read_num_bytes_available>:

alt_u16 read_num_bytes_available(alt_u32 data_reg)
{
   1746c:	defffd04 	addi	sp,sp,-12
   17470:	df000215 	stw	fp,8(sp)
   17474:	df000204 	addi	fp,sp,8
   17478:	e13fff15 	stw	r4,-4(fp)
	alt_u16 ravail = (alt_u16)((data_reg & ALT_UP_PS2_PORT_DATA_REG_RAVAIL_MSK ) >> ALT_UP_PS2_PORT_DATA_REG_RAVAIL_OFST);
   1747c:	e0bfff17 	ldw	r2,-4(fp)
   17480:	1004d43a 	srli	r2,r2,16
   17484:	e0bffe0d 	sth	r2,-8(fp)
	return ravail;
   17488:	e0bffe0b 	ldhu	r2,-8(fp)
}
   1748c:	e037883a 	mov	sp,fp
   17490:	df000017 	ldw	fp,0(sp)
   17494:	dec00104 	addi	sp,sp,4
   17498:	f800283a 	ret

0001749c <read_data_valid>:

alt_u8 read_data_valid(alt_u32 data_reg)
{
   1749c:	defffd04 	addi	sp,sp,-12
   174a0:	df000215 	stw	fp,8(sp)
   174a4:	df000204 	addi	fp,sp,8
   174a8:	e13fff15 	stw	r4,-4(fp)
	alt_u8 rvalid = (alt_u8)((data_reg & ALT_UP_PS2_PORT_DATA_REG_RVALID_MSK ) >> ALT_UP_PS2_PORT_DATA_REG_RVALID_OFST);
   174ac:	e0bfff17 	ldw	r2,-4(fp)
   174b0:	10a0000c 	andi	r2,r2,32768
   174b4:	1004d3fa 	srli	r2,r2,15
   174b8:	e0bffe05 	stb	r2,-8(fp)
	return rvalid;
   174bc:	e0bffe03 	ldbu	r2,-8(fp)
}
   174c0:	e037883a 	mov	sp,fp
   174c4:	df000017 	ldw	fp,0(sp)
   174c8:	dec00104 	addi	sp,sp,4
   174cc:	f800283a 	ret

000174d0 <read_data_byte>:

alt_u8 read_data_byte(alt_u32 data_reg)
{
   174d0:	defffd04 	addi	sp,sp,-12
   174d4:	df000215 	stw	fp,8(sp)
   174d8:	df000204 	addi	fp,sp,8
   174dc:	e13fff15 	stw	r4,-4(fp)
	alt_u8 data = (alt_u8) ( (data_reg & ALT_UP_PS2_PORT_DATA_REG_DATA_MSK) >> ALT_UP_PS2_PORT_DATA_REG_DATA_OFST) ;
   174e0:	e0bfff17 	ldw	r2,-4(fp)
   174e4:	e0bffe05 	stb	r2,-8(fp)
	return data;
   174e8:	e0bffe03 	ldbu	r2,-8(fp)
}
   174ec:	e037883a 	mov	sp,fp
   174f0:	df000017 	ldw	fp,0(sp)
   174f4:	dec00104 	addi	sp,sp,4
   174f8:	f800283a 	ret

000174fc <alt_up_ps2_init>:

//////////////////////////////////////////////////////////////////////////////////////////////
// HAL Functions
void alt_up_ps2_init(alt_up_ps2_dev *ps2)
{
   174fc:	defffb04 	addi	sp,sp,-20
   17500:	dfc00415 	stw	ra,16(sp)
   17504:	df000315 	stw	fp,12(sp)
   17508:	df000304 	addi	fp,sp,12
   1750c:	e13fff15 	stw	r4,-4(fp)
	// initialize the device
	unsigned char byte;
	//send the reset request, wait for ACK
	int status = alt_up_ps2_write_data_byte_with_ack(ps2, 0xff);
   17510:	e13fff17 	ldw	r4,-4(fp)
   17514:	01403fc4 	movi	r5,255
   17518:	00177580 	call	17758 <alt_up_ps2_write_data_byte_with_ack>
   1751c:	e0bffd15 	stw	r2,-12(fp)
	if (status == 0)
   17520:	e0bffd17 	ldw	r2,-12(fp)
   17524:	1000211e 	bne	r2,zero,175ac <alt_up_ps2_init+0xb0>
	{
		// reset succeed, now try to get the BAT result, AA means passed
		status = alt_up_ps2_read_data_byte_timeout(ps2, &byte);
   17528:	e0bffe04 	addi	r2,fp,-8
   1752c:	e13fff17 	ldw	r4,-4(fp)
   17530:	100b883a 	mov	r5,r2
   17534:	00177bc0 	call	177bc <alt_up_ps2_read_data_byte_timeout>
   17538:	e0bffd15 	stw	r2,-12(fp)
		if (status == 0 && byte == 0xAA)
   1753c:	e0bffd17 	ldw	r2,-12(fp)
   17540:	10001a1e 	bne	r2,zero,175ac <alt_up_ps2_init+0xb0>
   17544:	e0bffe03 	ldbu	r2,-8(fp)
   17548:	10803fcc 	andi	r2,r2,255
   1754c:	10802a98 	cmpnei	r2,r2,170
   17550:	1000161e 	bne	r2,zero,175ac <alt_up_ps2_init+0xb0>
		{
			//get the 2nd byte
			status = alt_up_ps2_read_data_byte_timeout(ps2, &byte);
   17554:	e0bffe04 	addi	r2,fp,-8
   17558:	e13fff17 	ldw	r4,-4(fp)
   1755c:	100b883a 	mov	r5,r2
   17560:	00177bc0 	call	177bc <alt_up_ps2_read_data_byte_timeout>
   17564:	e0bffd15 	stw	r2,-12(fp)
			if (status == -ETIMEDOUT)
   17568:	e0bffd17 	ldw	r2,-12(fp)
   1756c:	10bfe318 	cmpnei	r2,r2,-116
   17570:	1000041e 	bne	r2,zero,17584 <alt_up_ps2_init+0x88>
			{
				//for keyboard, only 2 bytes are sent(ACK, PASS/FAIL), so timeout
				ps2->device_type = PS2_KEYBOARD;
   17574:	e0bfff17 	ldw	r2,-4(fp)
   17578:	00c00044 	movi	r3,1
   1757c:	10c00d15 	stw	r3,52(r2)
   17580:	00000a06 	br	175ac <alt_up_ps2_init+0xb0>
			}
			else if (status == 0 && byte == 0x00)
   17584:	e0bffd17 	ldw	r2,-12(fp)
   17588:	1000081e 	bne	r2,zero,175ac <alt_up_ps2_init+0xb0>
   1758c:	e0bffe03 	ldbu	r2,-8(fp)
   17590:	10803fcc 	andi	r2,r2,255
   17594:	1000051e 	bne	r2,zero,175ac <alt_up_ps2_init+0xb0>
			{
				//for mouse, it will sent out 0x00 after sending out ACK and PASS/FAIL.
				ps2->device_type = PS2_MOUSE;
   17598:	e0bfff17 	ldw	r2,-4(fp)
   1759c:	10000d15 	stw	zero,52(r2)
				(void) alt_up_ps2_write_data_byte (ps2, 0xf4); // enable data from mouse
   175a0:	e13fff17 	ldw	r4,-4(fp)
   175a4:	01403d04 	movi	r5,244
   175a8:	00176740 	call	17674 <alt_up_ps2_write_data_byte>
			}
		}
	}
}
   175ac:	e037883a 	mov	sp,fp
   175b0:	dfc00117 	ldw	ra,4(sp)
   175b4:	df000017 	ldw	fp,0(sp)
   175b8:	dec00204 	addi	sp,sp,8
   175bc:	f800283a 	ret

000175c0 <alt_up_ps2_enable_read_interrupt>:

void alt_up_ps2_enable_read_interrupt(alt_up_ps2_dev *ps2)
{
   175c0:	defffd04 	addi	sp,sp,-12
   175c4:	df000215 	stw	fp,8(sp)
   175c8:	df000204 	addi	fp,sp,8
   175cc:	e13fff15 	stw	r4,-4(fp)
	unsigned int ctrl_reg;
	ctrl_reg = IORD_ALT_UP_PS2_PORT_CTRL_REG(ps2->base); 
   175d0:	e0bfff17 	ldw	r2,-4(fp)
   175d4:	10800a17 	ldw	r2,40(r2)
   175d8:	10800104 	addi	r2,r2,4
   175dc:	10800037 	ldwio	r2,0(r2)
   175e0:	e0bffe15 	stw	r2,-8(fp)
	// set RE to 1 while maintaining other bits the same
	ctrl_reg |= ALT_UP_PS2_PORT_CTRL_REG_RE_MSK;
   175e4:	e0bffe17 	ldw	r2,-8(fp)
   175e8:	10800054 	ori	r2,r2,1
   175ec:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_PS2_PORT_CTRL_REG(ps2->base, ctrl_reg);
   175f0:	e0bfff17 	ldw	r2,-4(fp)
   175f4:	10800a17 	ldw	r2,40(r2)
   175f8:	10800104 	addi	r2,r2,4
   175fc:	1007883a 	mov	r3,r2
   17600:	e0bffe17 	ldw	r2,-8(fp)
   17604:	18800035 	stwio	r2,0(r3)
}
   17608:	e037883a 	mov	sp,fp
   1760c:	df000017 	ldw	fp,0(sp)
   17610:	dec00104 	addi	sp,sp,4
   17614:	f800283a 	ret

00017618 <alt_up_ps2_disable_read_interrupt>:

void alt_up_ps2_disable_read_interrupt(alt_up_ps2_dev *ps2)
{
   17618:	defffd04 	addi	sp,sp,-12
   1761c:	df000215 	stw	fp,8(sp)
   17620:	df000204 	addi	fp,sp,8
   17624:	e13fff15 	stw	r4,-4(fp)
	unsigned int ctrl_reg;
	ctrl_reg = IORD_ALT_UP_PS2_PORT_CTRL_REG(ps2->base); 
   17628:	e0bfff17 	ldw	r2,-4(fp)
   1762c:	10800a17 	ldw	r2,40(r2)
   17630:	10800104 	addi	r2,r2,4
   17634:	10800037 	ldwio	r2,0(r2)
   17638:	e0bffe15 	stw	r2,-8(fp)
	// set RE to 0 while maintaining other bits the same
	ctrl_reg &= ~ALT_UP_PS2_PORT_CTRL_REG_RE_MSK;
   1763c:	e0fffe17 	ldw	r3,-8(fp)
   17640:	00bfff84 	movi	r2,-2
   17644:	1884703a 	and	r2,r3,r2
   17648:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_PS2_PORT_CTRL_REG(ps2->base, ctrl_reg);
   1764c:	e0bfff17 	ldw	r2,-4(fp)
   17650:	10800a17 	ldw	r2,40(r2)
   17654:	10800104 	addi	r2,r2,4
   17658:	1007883a 	mov	r3,r2
   1765c:	e0bffe17 	ldw	r2,-8(fp)
   17660:	18800035 	stwio	r2,0(r3)
}
   17664:	e037883a 	mov	sp,fp
   17668:	df000017 	ldw	fp,0(sp)
   1766c:	dec00104 	addi	sp,sp,4
   17670:	f800283a 	ret

00017674 <alt_up_ps2_write_data_byte>:

int alt_up_ps2_write_data_byte(alt_up_ps2_dev *ps2, unsigned char byte)
{
   17674:	defffb04 	addi	sp,sp,-20
   17678:	dfc00415 	stw	ra,16(sp)
   1767c:	df000315 	stw	fp,12(sp)
   17680:	df000304 	addi	fp,sp,12
   17684:	e13ffe15 	stw	r4,-8(fp)
   17688:	2805883a 	mov	r2,r5
   1768c:	e0bfff05 	stb	r2,-4(fp)
	//note: data are only located at the lower 8 bits
	//note: the software send command to the PS2 peripheral through the data
	//		register rather than the control register
	IOWR_ALT_UP_PS2_PORT_DATA(ps2->base, byte);
   17690:	e0bffe17 	ldw	r2,-8(fp)
   17694:	10800a17 	ldw	r2,40(r2)
   17698:	1007883a 	mov	r3,r2
   1769c:	e0bfff03 	ldbu	r2,-4(fp)
   176a0:	18800025 	stbio	r2,0(r3)
	alt_u32 ctrl_reg = IORD_ALT_UP_PS2_PORT_CTRL_REG(ps2->base);
   176a4:	e0bffe17 	ldw	r2,-8(fp)
   176a8:	10800a17 	ldw	r2,40(r2)
   176ac:	10800104 	addi	r2,r2,4
   176b0:	10800037 	ldwio	r2,0(r2)
   176b4:	e0bffd15 	stw	r2,-12(fp)
	if (read_CE_bit(ctrl_reg))
   176b8:	e13ffd17 	ldw	r4,-12(fp)
   176bc:	00174380 	call	17438 <read_CE_bit>
   176c0:	10803fcc 	andi	r2,r2,255
   176c4:	10000226 	beq	r2,zero,176d0 <alt_up_ps2_write_data_byte+0x5c>
	{
		//CE bit is set --> error occurs on sending commands
		return -EIO;
   176c8:	00bffec4 	movi	r2,-5
   176cc:	00000106 	br	176d4 <alt_up_ps2_write_data_byte+0x60>
	}
	return 0;
   176d0:	0005883a 	mov	r2,zero
}
   176d4:	e037883a 	mov	sp,fp
   176d8:	dfc00117 	ldw	ra,4(sp)
   176dc:	df000017 	ldw	fp,0(sp)
   176e0:	dec00204 	addi	sp,sp,8
   176e4:	f800283a 	ret

000176e8 <alt_up_ps2_wait_for_ack>:

int alt_up_ps2_wait_for_ack(alt_up_ps2_dev *ps2)
{
   176e8:	defffc04 	addi	sp,sp,-16
   176ec:	dfc00315 	stw	ra,12(sp)
   176f0:	df000215 	stw	fp,8(sp)
   176f4:	df000204 	addi	fp,sp,8
   176f8:	e13fff15 	stw	r4,-4(fp)
	unsigned char data = 0;
   176fc:	e03ffe45 	stb	zero,-7(fp)
	unsigned char status = 0;
   17700:	e03ffe05 	stb	zero,-8(fp)
	do
	{
		status = alt_up_ps2_read_data_byte_timeout(ps2, &data); 
   17704:	e0bffe44 	addi	r2,fp,-7
   17708:	e13fff17 	ldw	r4,-4(fp)
   1770c:	100b883a 	mov	r5,r2
   17710:	00177bc0 	call	177bc <alt_up_ps2_read_data_byte_timeout>
   17714:	e0bffe05 	stb	r2,-8(fp)
		if ( status == 0)
   17718:	e0bffe03 	ldbu	r2,-8(fp)
   1771c:	1000061e 	bne	r2,zero,17738 <alt_up_ps2_wait_for_ack+0x50>
		{
			if (data == PS2_ACK)
   17720:	e0bffe43 	ldbu	r2,-7(fp)
   17724:	10803fcc 	andi	r2,r2,255
   17728:	10803e98 	cmpnei	r2,r2,250
   1772c:	1000041e 	bne	r2,zero,17740 <alt_up_ps2_wait_for_ack+0x58>
				return 0;
   17730:	0005883a 	mov	r2,zero
   17734:	00000306 	br	17744 <alt_up_ps2_wait_for_ack+0x5c>
		}
		else 
		{
			return status;
   17738:	e0bffe03 	ldbu	r2,-8(fp)
   1773c:	00000106 	br	17744 <alt_up_ps2_wait_for_ack+0x5c>
		}
	} while(1);
   17740:	003ff006 	br	17704 <__alt_mem_Flash_flash_data+0xf4017704>
	return -ETIMEDOUT;
}
   17744:	e037883a 	mov	sp,fp
   17748:	dfc00117 	ldw	ra,4(sp)
   1774c:	df000017 	ldw	fp,0(sp)
   17750:	dec00204 	addi	sp,sp,8
   17754:	f800283a 	ret

00017758 <alt_up_ps2_write_data_byte_with_ack>:

int alt_up_ps2_write_data_byte_with_ack(alt_up_ps2_dev *ps2, unsigned char byte)
{
   17758:	defffa04 	addi	sp,sp,-24
   1775c:	dfc00515 	stw	ra,20(sp)
   17760:	df000415 	stw	fp,16(sp)
   17764:	df000404 	addi	fp,sp,16
   17768:	e13ffe15 	stw	r4,-8(fp)
   1776c:	2805883a 	mov	r2,r5
   17770:	e0bfff05 	stb	r2,-4(fp)
	int send_status = alt_up_ps2_write_data_byte(ps2, byte);
   17774:	e0bfff03 	ldbu	r2,-4(fp)
   17778:	e13ffe17 	ldw	r4,-8(fp)
   1777c:	100b883a 	mov	r5,r2
   17780:	00176740 	call	17674 <alt_up_ps2_write_data_byte>
   17784:	e0bffc15 	stw	r2,-16(fp)
	if ( send_status != 0)
   17788:	e0bffc17 	ldw	r2,-16(fp)
   1778c:	10000226 	beq	r2,zero,17798 <alt_up_ps2_write_data_byte_with_ack+0x40>
		// return on sending error
		return send_status;
   17790:	e0bffc17 	ldw	r2,-16(fp)
   17794:	00000406 	br	177a8 <alt_up_ps2_write_data_byte_with_ack+0x50>

	int ack_status = alt_up_ps2_wait_for_ack(ps2);
   17798:	e13ffe17 	ldw	r4,-8(fp)
   1779c:	00176e80 	call	176e8 <alt_up_ps2_wait_for_ack>
   177a0:	e0bffd15 	stw	r2,-12(fp)
	return ack_status;
   177a4:	e0bffd17 	ldw	r2,-12(fp)
}
   177a8:	e037883a 	mov	sp,fp
   177ac:	dfc00117 	ldw	ra,4(sp)
   177b0:	df000017 	ldw	fp,0(sp)
   177b4:	dec00204 	addi	sp,sp,8
   177b8:	f800283a 	ret

000177bc <alt_up_ps2_read_data_byte_timeout>:

int alt_up_ps2_read_data_byte_timeout(alt_up_ps2_dev *ps2, unsigned char *byte)
{
   177bc:	defffa04 	addi	sp,sp,-24
   177c0:	dfc00515 	stw	ra,20(sp)
   177c4:	df000415 	stw	fp,16(sp)
   177c8:	df000404 	addi	fp,sp,16
   177cc:	e13ffe15 	stw	r4,-8(fp)
   177d0:	e17fff15 	stw	r5,-4(fp)
	unsigned int data_reg = 0; 
   177d4:	e03ffd15 	stw	zero,-12(fp)
	unsigned int count = 0;
   177d8:	e03ffc15 	stw	zero,-16(fp)
	do {
		count++;
   177dc:	e0bffc17 	ldw	r2,-16(fp)
   177e0:	10800044 	addi	r2,r2,1
   177e4:	e0bffc15 	stw	r2,-16(fp)
		data_reg = IORD_ALT_UP_PS2_PORT_DATA_REG(ps2->base);
   177e8:	e0bffe17 	ldw	r2,-8(fp)
   177ec:	10800a17 	ldw	r2,40(r2)
   177f0:	10800037 	ldwio	r2,0(r2)
   177f4:	e0bffd15 	stw	r2,-12(fp)
		if (read_data_valid(data_reg))
   177f8:	e13ffd17 	ldw	r4,-12(fp)
   177fc:	001749c0 	call	1749c <read_data_valid>
   17800:	10803fcc 	andi	r2,r2,255
   17804:	10000726 	beq	r2,zero,17824 <alt_up_ps2_read_data_byte_timeout+0x68>
		{
			*byte = read_data_byte(data_reg);
   17808:	e13ffd17 	ldw	r4,-12(fp)
   1780c:	00174d00 	call	174d0 <read_data_byte>
   17810:	1007883a 	mov	r3,r2
   17814:	e0bfff17 	ldw	r2,-4(fp)
   17818:	10c00005 	stb	r3,0(r2)
			return 0;
   1781c:	0005883a 	mov	r2,zero
   17820:	00000a06 	br	1784c <alt_up_ps2_read_data_byte_timeout+0x90>
		}
		//timeout = 0 means to disable the timeout
		if ( ps2->timeout != 0 && count > ps2->timeout)
   17824:	e0bffe17 	ldw	r2,-8(fp)
   17828:	10800c17 	ldw	r2,48(r2)
   1782c:	10000626 	beq	r2,zero,17848 <alt_up_ps2_read_data_byte_timeout+0x8c>
   17830:	e0bffe17 	ldw	r2,-8(fp)
   17834:	10c00c17 	ldw	r3,48(r2)
   17838:	e0bffc17 	ldw	r2,-16(fp)
   1783c:	1880022e 	bgeu	r3,r2,17848 <alt_up_ps2_read_data_byte_timeout+0x8c>
		{
			return -ETIMEDOUT;
   17840:	00bfe304 	movi	r2,-116
   17844:	00000106 	br	1784c <alt_up_ps2_read_data_byte_timeout+0x90>
		}
	} while (1);
   17848:	003fe406 	br	177dc <__alt_mem_Flash_flash_data+0xf40177dc>
}
   1784c:	e037883a 	mov	sp,fp
   17850:	dfc00117 	ldw	ra,4(sp)
   17854:	df000017 	ldw	fp,0(sp)
   17858:	dec00204 	addi	sp,sp,8
   1785c:	f800283a 	ret

00017860 <alt_up_ps2_read_data_byte>:

int alt_up_ps2_read_data_byte(alt_up_ps2_dev *ps2, unsigned char *byte)
{
   17860:	defffb04 	addi	sp,sp,-20
   17864:	dfc00415 	stw	ra,16(sp)
   17868:	df000315 	stw	fp,12(sp)
   1786c:	df000304 	addi	fp,sp,12
   17870:	e13ffe15 	stw	r4,-8(fp)
   17874:	e17fff15 	stw	r5,-4(fp)
	unsigned int data_reg = 0; 
   17878:	e03ffd15 	stw	zero,-12(fp)
	data_reg = IORD_ALT_UP_PS2_PORT_DATA_REG(ps2->base);
   1787c:	e0bffe17 	ldw	r2,-8(fp)
   17880:	10800a17 	ldw	r2,40(r2)
   17884:	10800037 	ldwio	r2,0(r2)
   17888:	e0bffd15 	stw	r2,-12(fp)
	if (read_data_valid(data_reg))
   1788c:	e13ffd17 	ldw	r4,-12(fp)
   17890:	001749c0 	call	1749c <read_data_valid>
   17894:	10803fcc 	andi	r2,r2,255
   17898:	10000726 	beq	r2,zero,178b8 <alt_up_ps2_read_data_byte+0x58>
	{
		*byte = read_data_byte(data_reg);
   1789c:	e13ffd17 	ldw	r4,-12(fp)
   178a0:	00174d00 	call	174d0 <read_data_byte>
   178a4:	1007883a 	mov	r3,r2
   178a8:	e0bfff17 	ldw	r2,-4(fp)
   178ac:	10c00005 	stb	r3,0(r2)
		return 0;
   178b0:	0005883a 	mov	r2,zero
   178b4:	00000106 	br	178bc <alt_up_ps2_read_data_byte+0x5c>
	}
	return -1;
   178b8:	00bfffc4 	movi	r2,-1
}
   178bc:	e037883a 	mov	sp,fp
   178c0:	dfc00117 	ldw	ra,4(sp)
   178c4:	df000017 	ldw	fp,0(sp)
   178c8:	dec00204 	addi	sp,sp,8
   178cc:	f800283a 	ret

000178d0 <alt_up_ps2_clear_fifo>:

void alt_up_ps2_clear_fifo(alt_up_ps2_dev *ps2)
{
   178d0:	defffb04 	addi	sp,sp,-20
   178d4:	dfc00415 	stw	ra,16(sp)
   178d8:	df000315 	stw	fp,12(sp)
   178dc:	df000304 	addi	fp,sp,12
   178e0:	e13fff15 	stw	r4,-4(fp)
	// The DATA byte of the data register will be automatically cleared after a read
	// So we simply keep reading it until there are no available bytes
	alt_u16 num = 0;
   178e4:	e03ffd0d 	sth	zero,-12(fp)
	unsigned int data_reg = 0;
   178e8:	e03ffe15 	stw	zero,-8(fp)
	do
	{
		// read the data register (the DATA byte is cleared)
		data_reg = IORD_ALT_UP_PS2_PORT_DATA_REG(ps2->base);
   178ec:	e0bfff17 	ldw	r2,-4(fp)
   178f0:	10800a17 	ldw	r2,40(r2)
   178f4:	10800037 	ldwio	r2,0(r2)
   178f8:	e0bffe15 	stw	r2,-8(fp)
		// get the number of available bytes from the RAVAIL part of data register
		num = read_num_bytes_available(data_reg);
   178fc:	e13ffe17 	ldw	r4,-8(fp)
   17900:	001746c0 	call	1746c <read_num_bytes_available>
   17904:	e0bffd0d 	sth	r2,-12(fp)
	} while (num > 0);
   17908:	e0bffd0b 	ldhu	r2,-12(fp)
   1790c:	103ff71e 	bne	r2,zero,178ec <__alt_mem_Flash_flash_data+0xf40178ec>
}
   17910:	e037883a 	mov	sp,fp
   17914:	dfc00117 	ldw	ra,4(sp)
   17918:	df000017 	ldw	fp,0(sp)
   1791c:	dec00204 	addi	sp,sp,8
   17920:	f800283a 	ret

00017924 <alt_up_ps2_read_fd>:

//////////////////////////////////////////////////////////////
// FD Functions
int alt_up_ps2_read_fd (alt_fd* fd, char* ptr, int len)
{
   17924:	defff804 	addi	sp,sp,-32
   17928:	dfc00715 	stw	ra,28(sp)
   1792c:	df000615 	stw	fp,24(sp)
   17930:	df000604 	addi	fp,sp,24
   17934:	e13ffd15 	stw	r4,-12(fp)
   17938:	e17ffe15 	stw	r5,-8(fp)
   1793c:	e1bfff15 	stw	r6,-4(fp)
	alt_up_ps2_dev *ps2 = (alt_up_ps2_dev*) fd->dev;
   17940:	e0bffd17 	ldw	r2,-12(fp)
   17944:	10800017 	ldw	r2,0(r2)
   17948:	e0bffa15 	stw	r2,-24(fp)
	int status = 0;
   1794c:	e03ffb15 	stw	zero,-20(fp)
	int count = 0;
   17950:	e03ffc15 	stw	zero,-16(fp)
	while (count < len);
   17954:	e0fffc17 	ldw	r3,-16(fp)
   17958:	e0bfff17 	ldw	r2,-4(fp)
   1795c:	18bffd16 	blt	r3,r2,17954 <__alt_mem_Flash_flash_data+0xf4017954>
	{
		status = alt_up_ps2_read_data_byte_timeout(ps2, (unsigned char *)ptr++);
   17960:	e0bffe17 	ldw	r2,-8(fp)
   17964:	10c00044 	addi	r3,r2,1
   17968:	e0fffe15 	stw	r3,-8(fp)
   1796c:	e13ffa17 	ldw	r4,-24(fp)
   17970:	100b883a 	mov	r5,r2
   17974:	00177bc0 	call	177bc <alt_up_ps2_read_data_byte_timeout>
   17978:	e0bffb15 	stw	r2,-20(fp)
		if (status!=0)
   1797c:	e0bffb17 	ldw	r2,-20(fp)
   17980:	10000226 	beq	r2,zero,1798c <alt_up_ps2_read_fd+0x68>
			return count;
   17984:	e0bffc17 	ldw	r2,-16(fp)
   17988:	00000406 	br	1799c <alt_up_ps2_read_fd+0x78>
		count++;
   1798c:	e0bffc17 	ldw	r2,-16(fp)
   17990:	10800044 	addi	r2,r2,1
   17994:	e0bffc15 	stw	r2,-16(fp)
	} 
	return count;
   17998:	e0bffc17 	ldw	r2,-16(fp)
}
   1799c:	e037883a 	mov	sp,fp
   179a0:	dfc00117 	ldw	ra,4(sp)
   179a4:	df000017 	ldw	fp,0(sp)
   179a8:	dec00204 	addi	sp,sp,8
   179ac:	f800283a 	ret

000179b0 <alt_up_ps2_write_fd>:

int alt_up_ps2_write_fd (alt_fd* fd, const char* ptr, int len)
{
   179b0:	defff804 	addi	sp,sp,-32
   179b4:	dfc00715 	stw	ra,28(sp)
   179b8:	df000615 	stw	fp,24(sp)
   179bc:	df000604 	addi	fp,sp,24
   179c0:	e13ffd15 	stw	r4,-12(fp)
   179c4:	e17ffe15 	stw	r5,-8(fp)
   179c8:	e1bfff15 	stw	r6,-4(fp)
	alt_up_ps2_dev *ps2 = (alt_up_ps2_dev*) fd->dev;
   179cc:	e0bffd17 	ldw	r2,-12(fp)
   179d0:	10800017 	ldw	r2,0(r2)
   179d4:	e0bffb15 	stw	r2,-20(fp)
	int status = 0;
   179d8:	e03ffc15 	stw	zero,-16(fp)
	int count = 0;
   179dc:	e03ffa15 	stw	zero,-24(fp)
	while (count < len)
   179e0:	00001006 	br	17a24 <alt_up_ps2_write_fd+0x74>
	{
		status = alt_up_ps2_write_data_byte(ps2, *(ptr++) );
   179e4:	e0bffe17 	ldw	r2,-8(fp)
   179e8:	10c00044 	addi	r3,r2,1
   179ec:	e0fffe15 	stw	r3,-8(fp)
   179f0:	10800003 	ldbu	r2,0(r2)
   179f4:	10803fcc 	andi	r2,r2,255
   179f8:	e13ffb17 	ldw	r4,-20(fp)
   179fc:	100b883a 	mov	r5,r2
   17a00:	00176740 	call	17674 <alt_up_ps2_write_data_byte>
   17a04:	e0bffc15 	stw	r2,-16(fp)
		if (status!=0)
   17a08:	e0bffc17 	ldw	r2,-16(fp)
   17a0c:	10000226 	beq	r2,zero,17a18 <alt_up_ps2_write_fd+0x68>
			return count;
   17a10:	e0bffa17 	ldw	r2,-24(fp)
   17a14:	00000706 	br	17a34 <alt_up_ps2_write_fd+0x84>
		count++;
   17a18:	e0bffa17 	ldw	r2,-24(fp)
   17a1c:	10800044 	addi	r2,r2,1
   17a20:	e0bffa15 	stw	r2,-24(fp)
int alt_up_ps2_write_fd (alt_fd* fd, const char* ptr, int len)
{
	alt_up_ps2_dev *ps2 = (alt_up_ps2_dev*) fd->dev;
	int status = 0;
	int count = 0;
	while (count < len)
   17a24:	e0fffa17 	ldw	r3,-24(fp)
   17a28:	e0bfff17 	ldw	r2,-4(fp)
   17a2c:	18bfed16 	blt	r3,r2,179e4 <__alt_mem_Flash_flash_data+0xf40179e4>
		status = alt_up_ps2_write_data_byte(ps2, *(ptr++) );
		if (status!=0)
			return count;
		count++;
	}
	return count;
   17a30:	e0bffa17 	ldw	r2,-24(fp)
}
   17a34:	e037883a 	mov	sp,fp
   17a38:	dfc00117 	ldw	ra,4(sp)
   17a3c:	df000017 	ldw	fp,0(sp)
   17a40:	dec00204 	addi	sp,sp,8
   17a44:	f800283a 	ret

00017a48 <alt_up_ps2_open_dev>:

alt_up_ps2_dev* alt_up_ps2_open_dev(const char* name)
{
   17a48:	defffc04 	addi	sp,sp,-16
   17a4c:	dfc00315 	stw	ra,12(sp)
   17a50:	df000215 	stw	fp,8(sp)
   17a54:	df000204 	addi	fp,sp,8
   17a58:	e13fff15 	stw	r4,-4(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_ps2_dev *dev = (alt_up_ps2_dev*)alt_find_dev(name, &alt_dev_list);
   17a5c:	e13fff17 	ldw	r4,-4(fp)
   17a60:	014000b4 	movhi	r5,2
   17a64:	296e9504 	addi	r5,r5,-17836
   17a68:	00184040 	call	18404 <alt_find_dev>
   17a6c:	e0bffe15 	stw	r2,-8(fp)

  return dev;
   17a70:	e0bffe17 	ldw	r2,-8(fp)
}
   17a74:	e037883a 	mov	sp,fp
   17a78:	dfc00117 	ldw	ra,4(sp)
   17a7c:	df000017 	ldw	fp,0(sp)
   17a80:	dec00204 	addi	sp,sp,8
   17a84:	f800283a 	ret

00017a88 <alt_up_rs232_enable_read_interrupt>:
#include "altera_up_avalon_rs232.h"
#include "altera_up_avalon_rs232_regs.h"


void alt_up_rs232_enable_read_interrupt(alt_up_rs232_dev *rs232)
{
   17a88:	defffd04 	addi	sp,sp,-12
   17a8c:	df000215 	stw	fp,8(sp)
   17a90:	df000204 	addi	fp,sp,8
   17a94:	e13fff15 	stw	r4,-4(fp)
	alt_u32 ctrl_reg;
	ctrl_reg = IORD_ALT_UP_RS232_CONTROL(rs232->base); 
   17a98:	e0bfff17 	ldw	r2,-4(fp)
   17a9c:	10800a17 	ldw	r2,40(r2)
   17aa0:	10800104 	addi	r2,r2,4
   17aa4:	10800037 	ldwio	r2,0(r2)
   17aa8:	e0bffe15 	stw	r2,-8(fp)
	// set RE to 1 while maintaining other bits the same
	ctrl_reg |= ALT_UP_RS232_CONTROL_RE_MSK;
   17aac:	e0bffe17 	ldw	r2,-8(fp)
   17ab0:	10800054 	ori	r2,r2,1
   17ab4:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_RS232_CONTROL(rs232->base, ctrl_reg);
   17ab8:	e0bfff17 	ldw	r2,-4(fp)
   17abc:	10800a17 	ldw	r2,40(r2)
   17ac0:	10800104 	addi	r2,r2,4
   17ac4:	1007883a 	mov	r3,r2
   17ac8:	e0bffe17 	ldw	r2,-8(fp)
   17acc:	18800035 	stwio	r2,0(r3)
}
   17ad0:	e037883a 	mov	sp,fp
   17ad4:	df000017 	ldw	fp,0(sp)
   17ad8:	dec00104 	addi	sp,sp,4
   17adc:	f800283a 	ret

00017ae0 <alt_up_rs232_disable_read_interrupt>:

void alt_up_rs232_disable_read_interrupt(alt_up_rs232_dev *rs232)
{
   17ae0:	defffd04 	addi	sp,sp,-12
   17ae4:	df000215 	stw	fp,8(sp)
   17ae8:	df000204 	addi	fp,sp,8
   17aec:	e13fff15 	stw	r4,-4(fp)
	alt_u32 ctrl_reg;
	ctrl_reg = IORD_ALT_UP_RS232_CONTROL(rs232->base); 
   17af0:	e0bfff17 	ldw	r2,-4(fp)
   17af4:	10800a17 	ldw	r2,40(r2)
   17af8:	10800104 	addi	r2,r2,4
   17afc:	10800037 	ldwio	r2,0(r2)
   17b00:	e0bffe15 	stw	r2,-8(fp)
	// set RE to 0 while maintaining other bits the same
	ctrl_reg &= ~ALT_UP_RS232_CONTROL_RE_MSK;
   17b04:	e0fffe17 	ldw	r3,-8(fp)
   17b08:	00bfff84 	movi	r2,-2
   17b0c:	1884703a 	and	r2,r3,r2
   17b10:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_RS232_CONTROL(rs232->base, ctrl_reg);
   17b14:	e0bfff17 	ldw	r2,-4(fp)
   17b18:	10800a17 	ldw	r2,40(r2)
   17b1c:	10800104 	addi	r2,r2,4
   17b20:	1007883a 	mov	r3,r2
   17b24:	e0bffe17 	ldw	r2,-8(fp)
   17b28:	18800035 	stwio	r2,0(r3)
}
   17b2c:	e037883a 	mov	sp,fp
   17b30:	df000017 	ldw	fp,0(sp)
   17b34:	dec00104 	addi	sp,sp,4
   17b38:	f800283a 	ret

00017b3c <alt_up_rs232_get_used_space_in_read_FIFO>:

unsigned alt_up_rs232_get_used_space_in_read_FIFO(alt_up_rs232_dev *rs232)
{
   17b3c:	defffd04 	addi	sp,sp,-12
   17b40:	df000215 	stw	fp,8(sp)
   17b44:	df000204 	addi	fp,sp,8
   17b48:	e13fff15 	stw	r4,-4(fp)
	alt_u16 ravail = 0;
   17b4c:	e03ffe0d 	sth	zero,-8(fp)
	// we can only read the 16 bits for RAVAIL --- a read of DATA will discard the data
//	ravail = IORD_16DIRECT(IOADDR_ALT_UP_RS232_DATA(rs232->base), 2); 
	ravail = IORD_ALT_UP_RS232_RAVAIL(rs232->base); 
   17b50:	e0bfff17 	ldw	r2,-4(fp)
   17b54:	10800a17 	ldw	r2,40(r2)
   17b58:	10800084 	addi	r2,r2,2
   17b5c:	1080002b 	ldhuio	r2,0(r2)
   17b60:	10bfffcc 	andi	r2,r2,65535
   17b64:	e0bffe0d 	sth	r2,-8(fp)
//	return ravail;
	return (ravail & ALT_UP_RS232_RAVAIL_MSK) >> ALT_UP_RS232_RAVAIL_OFST;
   17b68:	e0bffe0b 	ldhu	r2,-8(fp)
}
   17b6c:	e037883a 	mov	sp,fp
   17b70:	df000017 	ldw	fp,0(sp)
   17b74:	dec00104 	addi	sp,sp,4
   17b78:	f800283a 	ret

00017b7c <alt_up_rs232_get_available_space_in_write_FIFO>:

unsigned alt_up_rs232_get_available_space_in_write_FIFO(alt_up_rs232_dev *rs232)
{
   17b7c:	defffd04 	addi	sp,sp,-12
   17b80:	df000215 	stw	fp,8(sp)
   17b84:	df000204 	addi	fp,sp,8
   17b88:	e13fff15 	stw	r4,-4(fp)
	alt_u32 ctrl_reg;
	ctrl_reg = IORD_ALT_UP_RS232_CONTROL(rs232->base); 
   17b8c:	e0bfff17 	ldw	r2,-4(fp)
   17b90:	10800a17 	ldw	r2,40(r2)
   17b94:	10800104 	addi	r2,r2,4
   17b98:	10800037 	ldwio	r2,0(r2)
   17b9c:	e0bffe15 	stw	r2,-8(fp)
	return (ctrl_reg & ALT_UP_RS232_CONTROL_WSPACE_MSK) >> ALT_UP_RS232_CONTROL_WSPACE_OFST;
   17ba0:	e0bffe17 	ldw	r2,-8(fp)
   17ba4:	1004d43a 	srli	r2,r2,16
}
   17ba8:	e037883a 	mov	sp,fp
   17bac:	df000017 	ldw	fp,0(sp)
   17bb0:	dec00104 	addi	sp,sp,4
   17bb4:	f800283a 	ret

00017bb8 <alt_up_rs232_check_parity>:

int alt_up_rs232_check_parity(alt_u32 data_reg)
{
   17bb8:	defffd04 	addi	sp,sp,-12
   17bbc:	df000215 	stw	fp,8(sp)
   17bc0:	df000204 	addi	fp,sp,8
   17bc4:	e13fff15 	stw	r4,-4(fp)
	unsigned parity_error = (data_reg & ALT_UP_RS232_DATA_PE_MSK) >> ALT_UP_RS232_DATA_PE_OFST;
   17bc8:	e0bfff17 	ldw	r2,-4(fp)
   17bcc:	1080800c 	andi	r2,r2,512
   17bd0:	1004d27a 	srli	r2,r2,9
   17bd4:	e0bffe15 	stw	r2,-8(fp)
	return (parity_error ? -1 : 0);
   17bd8:	e0bffe17 	ldw	r2,-8(fp)
   17bdc:	10000226 	beq	r2,zero,17be8 <alt_up_rs232_check_parity+0x30>
   17be0:	00bfffc4 	movi	r2,-1
   17be4:	00000106 	br	17bec <alt_up_rs232_check_parity+0x34>
   17be8:	0005883a 	mov	r2,zero
}
   17bec:	e037883a 	mov	sp,fp
   17bf0:	df000017 	ldw	fp,0(sp)
   17bf4:	dec00104 	addi	sp,sp,4
   17bf8:	f800283a 	ret

00017bfc <alt_up_rs232_write_data>:

int alt_up_rs232_write_data(alt_up_rs232_dev *rs232, alt_u8 data)
{
   17bfc:	defffd04 	addi	sp,sp,-12
   17c00:	df000215 	stw	fp,8(sp)
   17c04:	df000204 	addi	fp,sp,8
   17c08:	e13ffe15 	stw	r4,-8(fp)
   17c0c:	2805883a 	mov	r2,r5
   17c10:	e0bfff05 	stb	r2,-4(fp)
	/*alt_u32 data_reg;
	data_reg = IORD_ALT_UP_RS232_DATA(rs232->base);*/
    
	// we can write directly without thinking about other bit fields for this
	// case ONLY, because only DATA field of the data register is writable
	IOWR_ALT_UP_RS232_DATA(rs232->base, (data>>ALT_UP_RS232_DATA_DATA_OFST) & ALT_UP_RS232_DATA_DATA_MSK);
   17c14:	e0bffe17 	ldw	r2,-8(fp)
   17c18:	10800a17 	ldw	r2,40(r2)
   17c1c:	1007883a 	mov	r3,r2
   17c20:	e0bfff03 	ldbu	r2,-4(fp)
   17c24:	18800035 	stwio	r2,0(r3)
	return 0;
   17c28:	0005883a 	mov	r2,zero
}
   17c2c:	e037883a 	mov	sp,fp
   17c30:	df000017 	ldw	fp,0(sp)
   17c34:	dec00104 	addi	sp,sp,4
   17c38:	f800283a 	ret

00017c3c <alt_up_rs232_read_data>:

int alt_up_rs232_read_data(alt_up_rs232_dev *rs232, alt_u8 *data, alt_u8 *parity_error)
{
   17c3c:	defffa04 	addi	sp,sp,-24
   17c40:	dfc00515 	stw	ra,20(sp)
   17c44:	df000415 	stw	fp,16(sp)
   17c48:	df000404 	addi	fp,sp,16
   17c4c:	e13ffd15 	stw	r4,-12(fp)
   17c50:	e17ffe15 	stw	r5,-8(fp)
   17c54:	e1bfff15 	stw	r6,-4(fp)
	alt_u32 data_reg;
	data_reg = IORD_ALT_UP_RS232_DATA(rs232->base);
   17c58:	e0bffd17 	ldw	r2,-12(fp)
   17c5c:	10800a17 	ldw	r2,40(r2)
   17c60:	10800037 	ldwio	r2,0(r2)
   17c64:	e0bffc15 	stw	r2,-16(fp)
	*data = (data_reg & ALT_UP_RS232_DATA_DATA_MSK) >> ALT_UP_RS232_DATA_DATA_OFST;
   17c68:	e0bffc17 	ldw	r2,-16(fp)
   17c6c:	1007883a 	mov	r3,r2
   17c70:	e0bffe17 	ldw	r2,-8(fp)
   17c74:	10c00005 	stb	r3,0(r2)
	*parity_error = alt_up_rs232_check_parity(data_reg);
   17c78:	e13ffc17 	ldw	r4,-16(fp)
   17c7c:	0017bb80 	call	17bb8 <alt_up_rs232_check_parity>
   17c80:	1007883a 	mov	r3,r2
   17c84:	e0bfff17 	ldw	r2,-4(fp)
   17c88:	10c00005 	stb	r3,0(r2)
	return (((data_reg & ALT_UP_RS232_DATA_RVALID_MSK) >> ALT_UP_RS232_DATA_RVALID_OFST) - 1);
   17c8c:	e0bffc17 	ldw	r2,-16(fp)
   17c90:	10a0000c 	andi	r2,r2,32768
   17c94:	1004d3fa 	srli	r2,r2,15
   17c98:	10bfffc4 	addi	r2,r2,-1
}
   17c9c:	e037883a 	mov	sp,fp
   17ca0:	dfc00117 	ldw	ra,4(sp)
   17ca4:	df000017 	ldw	fp,0(sp)
   17ca8:	dec00204 	addi	sp,sp,8
   17cac:	f800283a 	ret

00017cb0 <alt_up_rs232_read_fd>:

int alt_up_rs232_read_fd (alt_fd* fd, char* ptr, int len)
{
   17cb0:	defff804 	addi	sp,sp,-32
   17cb4:	dfc00715 	stw	ra,28(sp)
   17cb8:	df000615 	stw	fp,24(sp)
   17cbc:	df000604 	addi	fp,sp,24
   17cc0:	e13ffd15 	stw	r4,-12(fp)
   17cc4:	e17ffe15 	stw	r5,-8(fp)
   17cc8:	e1bfff15 	stw	r6,-4(fp)
	alt_up_rs232_dev *rs232 = (alt_up_rs232_dev*)fd->dev;
   17ccc:	e0bffd17 	ldw	r2,-12(fp)
   17cd0:	10800017 	ldw	r2,0(r2)
   17cd4:	e0bffb15 	stw	r2,-20(fp)
	int count = 0;
   17cd8:	e03ffa15 	stw	zero,-24(fp)
	alt_u8 parity_error;
	while(len--)
   17cdc:	00000e06 	br	17d18 <alt_up_rs232_read_fd+0x68>
	{
		if (alt_up_rs232_read_data(rs232, (alt_u8 *)ptr++, &parity_error)==0)
   17ce0:	e0bffe17 	ldw	r2,-8(fp)
   17ce4:	10c00044 	addi	r3,r2,1
   17ce8:	e0fffe15 	stw	r3,-8(fp)
   17cec:	e0fffc04 	addi	r3,fp,-16
   17cf0:	e13ffb17 	ldw	r4,-20(fp)
   17cf4:	100b883a 	mov	r5,r2
   17cf8:	180d883a 	mov	r6,r3
   17cfc:	0017c3c0 	call	17c3c <alt_up_rs232_read_data>
   17d00:	1000041e 	bne	r2,zero,17d14 <alt_up_rs232_read_fd+0x64>
			count++;
   17d04:	e0bffa17 	ldw	r2,-24(fp)
   17d08:	10800044 	addi	r2,r2,1
   17d0c:	e0bffa15 	stw	r2,-24(fp)
   17d10:	00000106 	br	17d18 <alt_up_rs232_read_fd+0x68>
		else
			break;
   17d14:	00000406 	br	17d28 <alt_up_rs232_read_fd+0x78>
int alt_up_rs232_read_fd (alt_fd* fd, char* ptr, int len)
{
	alt_up_rs232_dev *rs232 = (alt_up_rs232_dev*)fd->dev;
	int count = 0;
	alt_u8 parity_error;
	while(len--)
   17d18:	e0bfff17 	ldw	r2,-4(fp)
   17d1c:	10ffffc4 	addi	r3,r2,-1
   17d20:	e0ffff15 	stw	r3,-4(fp)
   17d24:	103fee1e 	bne	r2,zero,17ce0 <__alt_mem_Flash_flash_data+0xf4017ce0>
		if (alt_up_rs232_read_data(rs232, (alt_u8 *)ptr++, &parity_error)==0)
			count++;
		else
			break;
	}
	return count;
   17d28:	e0bffa17 	ldw	r2,-24(fp)
}
   17d2c:	e037883a 	mov	sp,fp
   17d30:	dfc00117 	ldw	ra,4(sp)
   17d34:	df000017 	ldw	fp,0(sp)
   17d38:	dec00204 	addi	sp,sp,8
   17d3c:	f800283a 	ret

00017d40 <alt_up_rs232_write_fd>:

int alt_up_rs232_write_fd (alt_fd* fd, const char* ptr, int len)
{
   17d40:	defff904 	addi	sp,sp,-28
   17d44:	dfc00615 	stw	ra,24(sp)
   17d48:	df000515 	stw	fp,20(sp)
   17d4c:	df000504 	addi	fp,sp,20
   17d50:	e13ffd15 	stw	r4,-12(fp)
   17d54:	e17ffe15 	stw	r5,-8(fp)
   17d58:	e1bfff15 	stw	r6,-4(fp)
	alt_up_rs232_dev *rs232 = (alt_up_rs232_dev*)fd->dev;
   17d5c:	e0bffd17 	ldw	r2,-12(fp)
   17d60:	10800017 	ldw	r2,0(r2)
   17d64:	e0bffc15 	stw	r2,-16(fp)
	int count = 0;
   17d68:	e03ffb15 	stw	zero,-20(fp)
	while(len--)
   17d6c:	00000f06 	br	17dac <alt_up_rs232_write_fd+0x6c>
	{
		if (alt_up_rs232_write_data(rs232, *ptr)==0)
   17d70:	e0bffe17 	ldw	r2,-8(fp)
   17d74:	10800003 	ldbu	r2,0(r2)
   17d78:	10803fcc 	andi	r2,r2,255
   17d7c:	e13ffc17 	ldw	r4,-16(fp)
   17d80:	100b883a 	mov	r5,r2
   17d84:	0017bfc0 	call	17bfc <alt_up_rs232_write_data>
   17d88:	1000071e 	bne	r2,zero,17da8 <alt_up_rs232_write_fd+0x68>
		{
			count++;
   17d8c:	e0bffb17 	ldw	r2,-20(fp)
   17d90:	10800044 	addi	r2,r2,1
   17d94:	e0bffb15 	stw	r2,-20(fp)
			ptr++;
   17d98:	e0bffe17 	ldw	r2,-8(fp)
   17d9c:	10800044 	addi	r2,r2,1
   17da0:	e0bffe15 	stw	r2,-8(fp)
   17da4:	00000106 	br	17dac <alt_up_rs232_write_fd+0x6c>
		}
		else
			break;
   17da8:	00000406 	br	17dbc <alt_up_rs232_write_fd+0x7c>

int alt_up_rs232_write_fd (alt_fd* fd, const char* ptr, int len)
{
	alt_up_rs232_dev *rs232 = (alt_up_rs232_dev*)fd->dev;
	int count = 0;
	while(len--)
   17dac:	e0bfff17 	ldw	r2,-4(fp)
   17db0:	10ffffc4 	addi	r3,r2,-1
   17db4:	e0ffff15 	stw	r3,-4(fp)
   17db8:	103fed1e 	bne	r2,zero,17d70 <__alt_mem_Flash_flash_data+0xf4017d70>
			ptr++;
		}
		else
			break;
	}
	return count;
   17dbc:	e0bffb17 	ldw	r2,-20(fp)
}
   17dc0:	e037883a 	mov	sp,fp
   17dc4:	dfc00117 	ldw	ra,4(sp)
   17dc8:	df000017 	ldw	fp,0(sp)
   17dcc:	dec00204 	addi	sp,sp,8
   17dd0:	f800283a 	ret

00017dd4 <alt_up_rs232_open_dev>:

alt_up_rs232_dev* alt_up_rs232_open_dev(const char* name)
{
   17dd4:	defffc04 	addi	sp,sp,-16
   17dd8:	dfc00315 	stw	ra,12(sp)
   17ddc:	df000215 	stw	fp,8(sp)
   17de0:	df000204 	addi	fp,sp,8
   17de4:	e13fff15 	stw	r4,-4(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_rs232_dev *dev = (alt_up_rs232_dev*)alt_find_dev(name, &alt_dev_list);
   17de8:	e13fff17 	ldw	r4,-4(fp)
   17dec:	014000b4 	movhi	r5,2
   17df0:	296e9504 	addi	r5,r5,-17836
   17df4:	00184040 	call	18404 <alt_find_dev>
   17df8:	e0bffe15 	stw	r2,-8(fp)

  return dev;
   17dfc:	e0bffe17 	ldw	r2,-8(fp)
}
   17e00:	e037883a 	mov	sp,fp
   17e04:	dfc00117 	ldw	ra,4(sp)
   17e08:	df000017 	ldw	fp,0(sp)
   17e0c:	dec00204 	addi	sp,sp,8
   17e10:	f800283a 	ret

00017e14 <alt_up_char_buffer_init>:
#include <priv/alt_file.h>

#include "altera_up_avalon_video_character_buffer_with_dma.h"
#include "altera_up_avalon_video_character_buffer_with_dma_regs.h"

void alt_up_char_buffer_init(alt_up_char_buffer_dev *char_buffer) {
   17e14:	defffc04 	addi	sp,sp,-16
   17e18:	dfc00315 	stw	ra,12(sp)
   17e1c:	df000215 	stw	fp,8(sp)
   17e20:	df000204 	addi	fp,sp,8
   17e24:	e13fff15 	stw	r4,-4(fp)
	char * name;
	name = (char *) char_buffer->dev.name;
   17e28:	e0bfff17 	ldw	r2,-4(fp)
   17e2c:	10800217 	ldw	r2,8(r2)
   17e30:	e0bffe15 	stw	r2,-8(fp)

	for ( ; (*name) != '\0'; name++) {
   17e34:	00000b06 	br	17e64 <alt_up_char_buffer_init+0x50>
		if (strcmp(name, "_avalon_char_buffer_slave") == 0) {
   17e38:	e13ffe17 	ldw	r4,-8(fp)
   17e3c:	014000b4 	movhi	r5,2
   17e40:	2966f404 	addi	r5,r5,-25648
   17e44:	00072800 	call	7280 <strcmp>
   17e48:	1000031e 	bne	r2,zero,17e58 <alt_up_char_buffer_init+0x44>
			(*name) = '\0';
   17e4c:	e0bffe17 	ldw	r2,-8(fp)
   17e50:	10000005 	stb	zero,0(r2)
			break;
   17e54:	00000906 	br	17e7c <alt_up_char_buffer_init+0x68>

void alt_up_char_buffer_init(alt_up_char_buffer_dev *char_buffer) {
	char * name;
	name = (char *) char_buffer->dev.name;

	for ( ; (*name) != '\0'; name++) {
   17e58:	e0bffe17 	ldw	r2,-8(fp)
   17e5c:	10800044 	addi	r2,r2,1
   17e60:	e0bffe15 	stw	r2,-8(fp)
   17e64:	e0bffe17 	ldw	r2,-8(fp)
   17e68:	10800003 	ldbu	r2,0(r2)
   17e6c:	10803fcc 	andi	r2,r2,255
   17e70:	1080201c 	xori	r2,r2,128
   17e74:	10bfe004 	addi	r2,r2,-128
   17e78:	103fef1e 	bne	r2,zero,17e38 <__alt_mem_Flash_flash_data+0xf4017e38>
			(*name) = '\0';
			break;
		}
	}
	
	return;
   17e7c:	0001883a 	nop
}
   17e80:	e037883a 	mov	sp,fp
   17e84:	dfc00117 	ldw	ra,4(sp)
   17e88:	df000017 	ldw	fp,0(sp)
   17e8c:	dec00204 	addi	sp,sp,8
   17e90:	f800283a 	ret

00017e94 <alt_up_char_buffer_open_dev>:

alt_up_char_buffer_dev* alt_up_char_buffer_open_dev(const char* name) {
   17e94:	defffc04 	addi	sp,sp,-16
   17e98:	dfc00315 	stw	ra,12(sp)
   17e9c:	df000215 	stw	fp,8(sp)
   17ea0:	df000204 	addi	fp,sp,8
   17ea4:	e13fff15 	stw	r4,-4(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_char_buffer_dev *dev = (alt_up_char_buffer_dev *)alt_find_dev(name, &alt_dev_list);
   17ea8:	e13fff17 	ldw	r4,-4(fp)
   17eac:	014000b4 	movhi	r5,2
   17eb0:	296e9504 	addi	r5,r5,-17836
   17eb4:	00184040 	call	18404 <alt_find_dev>
   17eb8:	e0bffe15 	stw	r2,-8(fp)

  return dev;
   17ebc:	e0bffe17 	ldw	r2,-8(fp)
}
   17ec0:	e037883a 	mov	sp,fp
   17ec4:	dfc00117 	ldw	ra,4(sp)
   17ec8:	df000017 	ldw	fp,0(sp)
   17ecc:	dec00204 	addi	sp,sp,8
   17ed0:	f800283a 	ret

00017ed4 <alt_up_char_buffer_draw>:

int alt_up_char_buffer_draw(alt_up_char_buffer_dev *char_buffer, unsigned char ch, 
	unsigned int x, unsigned int y) {
   17ed4:	defffa04 	addi	sp,sp,-24
   17ed8:	df000515 	stw	fp,20(sp)
   17edc:	df000504 	addi	fp,sp,20
   17ee0:	e13ffc15 	stw	r4,-16(fp)
   17ee4:	2805883a 	mov	r2,r5
   17ee8:	e1bffe15 	stw	r6,-8(fp)
   17eec:	e1ffff15 	stw	r7,-4(fp)
   17ef0:	e0bffd05 	stb	r2,-12(fp)
	// boundary check
	if (x >= char_buffer->x_resolution || y >= char_buffer->y_resolution )
   17ef4:	e0bffc17 	ldw	r2,-16(fp)
   17ef8:	10800c17 	ldw	r2,48(r2)
   17efc:	e0fffe17 	ldw	r3,-8(fp)
   17f00:	1880042e 	bgeu	r3,r2,17f14 <alt_up_char_buffer_draw+0x40>
   17f04:	e0bffc17 	ldw	r2,-16(fp)
   17f08:	10800d17 	ldw	r2,52(r2)
   17f0c:	e0ffff17 	ldw	r3,-4(fp)
   17f10:	18800236 	bltu	r3,r2,17f1c <alt_up_char_buffer_draw+0x48>
		return -1;
   17f14:	00bfffc4 	movi	r2,-1
   17f18:	00001d06 	br	17f90 <alt_up_char_buffer_draw+0xbc>
	
	unsigned int addr = 0;
   17f1c:	e03ffb15 	stw	zero,-20(fp)
	addr |= ((x & char_buffer->x_coord_mask) << char_buffer->x_coord_offset);
   17f20:	e0bffc17 	ldw	r2,-16(fp)
   17f24:	10c00f17 	ldw	r3,60(r2)
   17f28:	e0bffe17 	ldw	r2,-8(fp)
   17f2c:	1884703a 	and	r2,r3,r2
   17f30:	e0fffc17 	ldw	r3,-16(fp)
   17f34:	18c00e17 	ldw	r3,56(r3)
   17f38:	10c4983a 	sll	r2,r2,r3
   17f3c:	e0fffb17 	ldw	r3,-20(fp)
   17f40:	1884b03a 	or	r2,r3,r2
   17f44:	e0bffb15 	stw	r2,-20(fp)
	addr |= ((y & char_buffer->y_coord_mask) << char_buffer->y_coord_offset);
   17f48:	e0bffc17 	ldw	r2,-16(fp)
   17f4c:	10c01117 	ldw	r3,68(r2)
   17f50:	e0bfff17 	ldw	r2,-4(fp)
   17f54:	1884703a 	and	r2,r3,r2
   17f58:	e0fffc17 	ldw	r3,-16(fp)
   17f5c:	18c01017 	ldw	r3,64(r3)
   17f60:	10c4983a 	sll	r2,r2,r3
   17f64:	e0fffb17 	ldw	r3,-20(fp)
   17f68:	1884b03a 	or	r2,r3,r2
   17f6c:	e0bffb15 	stw	r2,-20(fp)
	IOWR_8DIRECT(char_buffer->buffer_base, addr, ch);
   17f70:	e0bffc17 	ldw	r2,-16(fp)
   17f74:	10c00b17 	ldw	r3,44(r2)
   17f78:	e0bffb17 	ldw	r2,-20(fp)
   17f7c:	1885883a 	add	r2,r3,r2
   17f80:	1007883a 	mov	r3,r2
   17f84:	e0bffd03 	ldbu	r2,-12(fp)
   17f88:	18800025 	stbio	r2,0(r3)

	return 0;
   17f8c:	0005883a 	mov	r2,zero
}
   17f90:	e037883a 	mov	sp,fp
   17f94:	df000017 	ldw	fp,0(sp)
   17f98:	dec00104 	addi	sp,sp,4
   17f9c:	f800283a 	ret

00017fa0 <alt_up_char_buffer_string>:

int alt_up_char_buffer_string(alt_up_char_buffer_dev *char_buffer, const char *ptr, 
	unsigned int x, unsigned int y) {
   17fa0:	defffa04 	addi	sp,sp,-24
   17fa4:	df000515 	stw	fp,20(sp)
   17fa8:	df000504 	addi	fp,sp,20
   17fac:	e13ffc15 	stw	r4,-16(fp)
   17fb0:	e17ffd15 	stw	r5,-12(fp)
   17fb4:	e1bffe15 	stw	r6,-8(fp)
   17fb8:	e1ffff15 	stw	r7,-4(fp)
	// boundary check
	if (x >= char_buffer->x_resolution || y >= char_buffer->y_resolution )
   17fbc:	e0bffc17 	ldw	r2,-16(fp)
   17fc0:	10800c17 	ldw	r2,48(r2)
   17fc4:	e0fffe17 	ldw	r3,-8(fp)
   17fc8:	1880042e 	bgeu	r3,r2,17fdc <alt_up_char_buffer_string+0x3c>
   17fcc:	e0bffc17 	ldw	r2,-16(fp)
   17fd0:	10800d17 	ldw	r2,52(r2)
   17fd4:	e0ffff17 	ldw	r3,-4(fp)
   17fd8:	18800236 	bltu	r3,r2,17fe4 <alt_up_char_buffer_string+0x44>
		return -1;
   17fdc:	00bfffc4 	movi	r2,-1
   17fe0:	00002b06 	br	18090 <alt_up_char_buffer_string+0xf0>
	
	unsigned int offset = 0;
   17fe4:	e03ffb15 	stw	zero,-20(fp)
	offset = (y << char_buffer->y_coord_offset) + x;
   17fe8:	e0bffc17 	ldw	r2,-16(fp)
   17fec:	10801017 	ldw	r2,64(r2)
   17ff0:	1007883a 	mov	r3,r2
   17ff4:	e0bfff17 	ldw	r2,-4(fp)
   17ff8:	10c6983a 	sll	r3,r2,r3
   17ffc:	e0bffe17 	ldw	r2,-8(fp)
   18000:	1885883a 	add	r2,r3,r2
   18004:	e0bffb15 	stw	r2,-20(fp)

	while ( *ptr )
   18008:	00001a06 	br	18074 <alt_up_char_buffer_string+0xd4>
	{
		IOWR_8DIRECT(char_buffer->buffer_base, offset, *ptr);
   1800c:	e0bffc17 	ldw	r2,-16(fp)
   18010:	10c00b17 	ldw	r3,44(r2)
   18014:	e0bffb17 	ldw	r2,-20(fp)
   18018:	1885883a 	add	r2,r3,r2
   1801c:	1007883a 	mov	r3,r2
   18020:	e0bffd17 	ldw	r2,-12(fp)
   18024:	10800003 	ldbu	r2,0(r2)
   18028:	10803fcc 	andi	r2,r2,255
   1802c:	1080201c 	xori	r2,r2,128
   18030:	10bfe004 	addi	r2,r2,-128
   18034:	18800025 	stbio	r2,0(r3)
		++ptr;
   18038:	e0bffd17 	ldw	r2,-12(fp)
   1803c:	10800044 	addi	r2,r2,1
   18040:	e0bffd15 	stw	r2,-12(fp)
		if (++x >= char_buffer->x_resolution)
   18044:	e0bffe17 	ldw	r2,-8(fp)
   18048:	10800044 	addi	r2,r2,1
   1804c:	e0bffe15 	stw	r2,-8(fp)
   18050:	e0bffc17 	ldw	r2,-16(fp)
   18054:	10800c17 	ldw	r2,48(r2)
   18058:	e0fffe17 	ldw	r3,-8(fp)
   1805c:	18800236 	bltu	r3,r2,18068 <alt_up_char_buffer_string+0xc8>
			return -1;
   18060:	00bfffc4 	movi	r2,-1
   18064:	00000a06 	br	18090 <alt_up_char_buffer_string+0xf0>
		++offset;
   18068:	e0bffb17 	ldw	r2,-20(fp)
   1806c:	10800044 	addi	r2,r2,1
   18070:	e0bffb15 	stw	r2,-20(fp)
		return -1;
	
	unsigned int offset = 0;
	offset = (y << char_buffer->y_coord_offset) + x;

	while ( *ptr )
   18074:	e0bffd17 	ldw	r2,-12(fp)
   18078:	10800003 	ldbu	r2,0(r2)
   1807c:	10803fcc 	andi	r2,r2,255
   18080:	1080201c 	xori	r2,r2,128
   18084:	10bfe004 	addi	r2,r2,-128
   18088:	103fe01e 	bne	r2,zero,1800c <__alt_mem_Flash_flash_data+0xf401800c>
		++ptr;
		if (++x >= char_buffer->x_resolution)
			return -1;
		++offset;
	}
	return 0;
   1808c:	0005883a 	mov	r2,zero
}
   18090:	e037883a 	mov	sp,fp
   18094:	df000017 	ldw	fp,0(sp)
   18098:	dec00104 	addi	sp,sp,4
   1809c:	f800283a 	ret

000180a0 <alt_up_char_buffer_clear>:

int alt_up_char_buffer_clear(alt_up_char_buffer_dev *char_buffer) {
   180a0:	defffe04 	addi	sp,sp,-8
   180a4:	df000115 	stw	fp,4(sp)
   180a8:	df000104 	addi	fp,sp,4
   180ac:	e13fff15 	stw	r4,-4(fp)
	IOWR_ALT_UP_CHAR_BUFFER_CLR_SCRN(char_buffer->ctrl_reg_base, 1);
   180b0:	e0bfff17 	ldw	r2,-4(fp)
   180b4:	10800a17 	ldw	r2,40(r2)
   180b8:	10800084 	addi	r2,r2,2
   180bc:	1007883a 	mov	r3,r2
   180c0:	00800044 	movi	r2,1
   180c4:	18800025 	stbio	r2,0(r3)
	while ((IORD_ALT_UP_CHAR_BUFFER_CLR_SCRN(char_buffer->ctrl_reg_base) & ALT_UP_CHAR_BUFFER_CLR_SCRN_MSK) >> ALT_UP_CHAR_BUFFER_CLR_SCRN_OFST);
   180c8:	0001883a 	nop
   180cc:	e0bfff17 	ldw	r2,-4(fp)
   180d0:	10800a17 	ldw	r2,40(r2)
   180d4:	10800084 	addi	r2,r2,2
   180d8:	10800023 	ldbuio	r2,0(r2)
   180dc:	10803fcc 	andi	r2,r2,255
   180e0:	1080004c 	andi	r2,r2,1
   180e4:	103ff91e 	bne	r2,zero,180cc <__alt_mem_Flash_flash_data+0xf40180cc>
	return 0;
   180e8:	0005883a 	mov	r2,zero
}
   180ec:	e037883a 	mov	sp,fp
   180f0:	df000017 	ldw	fp,0(sp)
   180f4:	dec00104 	addi	sp,sp,4
   180f8:	f800283a 	ret

000180fc <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
   180fc:	defff504 	addi	sp,sp,-44
   18100:	df000a15 	stw	fp,40(sp)
   18104:	df000a04 	addi	fp,sp,40
   18108:	e13ffc15 	stw	r4,-16(fp)
   1810c:	e17ffd15 	stw	r5,-12(fp)
   18110:	e1bffe15 	stw	r6,-8(fp)
   18114:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
   18118:	e03ff615 	stw	zero,-40(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
   1811c:	008000b4 	movhi	r2,2
   18120:	10b6a104 	addi	r2,r2,-9596
   18124:	10800017 	ldw	r2,0(r2)
  
  if (alt_ticks_per_second ())
   18128:	10003f26 	beq	r2,zero,18228 <alt_alarm_start+0x12c>
  {
    if (alarm)
   1812c:	e0bffc17 	ldw	r2,-16(fp)
   18130:	10003b26 	beq	r2,zero,18220 <alt_alarm_start+0x124>
    {
      alarm->callback = callback;
   18134:	e0bffc17 	ldw	r2,-16(fp)
   18138:	e0fffe17 	ldw	r3,-8(fp)
   1813c:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
   18140:	e0bffc17 	ldw	r2,-16(fp)
   18144:	e0ffff17 	ldw	r3,-4(fp)
   18148:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1814c:	0005303a 	rdctl	r2,status
   18150:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   18154:	e0fff817 	ldw	r3,-32(fp)
   18158:	00bfff84 	movi	r2,-2
   1815c:	1884703a 	and	r2,r3,r2
   18160:	1001703a 	wrctl	status,r2
  
  return context;
   18164:	e0bff817 	ldw	r2,-32(fp)
 
      irq_context = alt_irq_disable_all ();
   18168:	e0bff715 	stw	r2,-36(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
   1816c:	008000b4 	movhi	r2,2
   18170:	10b6a204 	addi	r2,r2,-9592
   18174:	10800017 	ldw	r2,0(r2)
      
      current_nticks = alt_nticks();
   18178:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
   1817c:	e0fffd17 	ldw	r3,-12(fp)
   18180:	e0bff617 	ldw	r2,-40(fp)
   18184:	1885883a 	add	r2,r3,r2
   18188:	10c00044 	addi	r3,r2,1
   1818c:	e0bffc17 	ldw	r2,-16(fp)
   18190:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
   18194:	e0bffc17 	ldw	r2,-16(fp)
   18198:	10c00217 	ldw	r3,8(r2)
   1819c:	e0bff617 	ldw	r2,-40(fp)
   181a0:	1880042e 	bgeu	r3,r2,181b4 <alt_alarm_start+0xb8>
      {
        alarm->rollover = 1;
   181a4:	e0bffc17 	ldw	r2,-16(fp)
   181a8:	00c00044 	movi	r3,1
   181ac:	10c00405 	stb	r3,16(r2)
   181b0:	00000206 	br	181bc <alt_alarm_start+0xc0>
      }
      else
      {
        alarm->rollover = 0;
   181b4:	e0bffc17 	ldw	r2,-16(fp)
   181b8:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
   181bc:	e0fffc17 	ldw	r3,-16(fp)
   181c0:	008000b4 	movhi	r2,2
   181c4:	10aeba04 	addi	r2,r2,-17688
   181c8:	e0bff915 	stw	r2,-28(fp)
   181cc:	e0fffa15 	stw	r3,-24(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   181d0:	e0bffa17 	ldw	r2,-24(fp)
   181d4:	e0fff917 	ldw	r3,-28(fp)
   181d8:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   181dc:	e0bff917 	ldw	r2,-28(fp)
   181e0:	10c00017 	ldw	r3,0(r2)
   181e4:	e0bffa17 	ldw	r2,-24(fp)
   181e8:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   181ec:	e0bff917 	ldw	r2,-28(fp)
   181f0:	10800017 	ldw	r2,0(r2)
   181f4:	e0fffa17 	ldw	r3,-24(fp)
   181f8:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   181fc:	e0bff917 	ldw	r2,-28(fp)
   18200:	e0fffa17 	ldw	r3,-24(fp)
   18204:	10c00015 	stw	r3,0(r2)
   18208:	e0bff717 	ldw	r2,-36(fp)
   1820c:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   18210:	e0bffb17 	ldw	r2,-20(fp)
   18214:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
   18218:	0005883a 	mov	r2,zero
   1821c:	00000306 	br	1822c <alt_alarm_start+0x130>
    }
    else
    {
      return -EINVAL;
   18220:	00bffa84 	movi	r2,-22
   18224:	00000106 	br	1822c <alt_alarm_start+0x130>
    }
  }
  else
  {
    return -ENOTSUP;
   18228:	00bfde84 	movi	r2,-134
  }
}
   1822c:	e037883a 	mov	sp,fp
   18230:	df000017 	ldw	fp,0(sp)
   18234:	dec00104 	addi	sp,sp,4
   18238:	f800283a 	ret

0001823c <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
   1823c:	deffff04 	addi	sp,sp,-4
   18240:	df000015 	stw	fp,0(sp)
   18244:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
   18248:	e037883a 	mov	sp,fp
   1824c:	df000017 	ldw	fp,0(sp)
   18250:	dec00104 	addi	sp,sp,4
   18254:	f800283a 	ret

00018258 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   18258:	defffe04 	addi	sp,sp,-8
   1825c:	dfc00115 	stw	ra,4(sp)
   18260:	df000015 	stw	fp,0(sp)
   18264:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   18268:	008000b4 	movhi	r2,2
   1826c:	10ae9804 	addi	r2,r2,-17824
   18270:	10800017 	ldw	r2,0(r2)
   18274:	10000526 	beq	r2,zero,1828c <alt_get_errno+0x34>
   18278:	008000b4 	movhi	r2,2
   1827c:	10ae9804 	addi	r2,r2,-17824
   18280:	10800017 	ldw	r2,0(r2)
   18284:	103ee83a 	callr	r2
   18288:	00000206 	br	18294 <alt_get_errno+0x3c>
   1828c:	008000b4 	movhi	r2,2
   18290:	10b68304 	addi	r2,r2,-9716
}
   18294:	e037883a 	mov	sp,fp
   18298:	dfc00117 	ldw	ra,4(sp)
   1829c:	df000017 	ldw	fp,0(sp)
   182a0:	dec00204 	addi	sp,sp,8
   182a4:	f800283a 	ret

000182a8 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
   182a8:	defffa04 	addi	sp,sp,-24
   182ac:	dfc00515 	stw	ra,20(sp)
   182b0:	df000415 	stw	fp,16(sp)
   182b4:	df000404 	addi	fp,sp,16
   182b8:	e13ffe15 	stw	r4,-8(fp)
   182bc:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
   182c0:	e0bffe17 	ldw	r2,-8(fp)
   182c4:	10000326 	beq	r2,zero,182d4 <alt_dev_llist_insert+0x2c>
   182c8:	e0bffe17 	ldw	r2,-8(fp)
   182cc:	10800217 	ldw	r2,8(r2)
   182d0:	1000061e 	bne	r2,zero,182ec <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
   182d4:	00182580 	call	18258 <alt_get_errno>
   182d8:	1007883a 	mov	r3,r2
   182dc:	00800584 	movi	r2,22
   182e0:	18800015 	stw	r2,0(r3)
    return -EINVAL;
   182e4:	00bffa84 	movi	r2,-22
   182e8:	00001306 	br	18338 <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
   182ec:	e0bffe17 	ldw	r2,-8(fp)
   182f0:	e0ffff17 	ldw	r3,-4(fp)
   182f4:	e0fffc15 	stw	r3,-16(fp)
   182f8:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   182fc:	e0bffd17 	ldw	r2,-12(fp)
   18300:	e0fffc17 	ldw	r3,-16(fp)
   18304:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   18308:	e0bffc17 	ldw	r2,-16(fp)
   1830c:	10c00017 	ldw	r3,0(r2)
   18310:	e0bffd17 	ldw	r2,-12(fp)
   18314:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   18318:	e0bffc17 	ldw	r2,-16(fp)
   1831c:	10800017 	ldw	r2,0(r2)
   18320:	e0fffd17 	ldw	r3,-12(fp)
   18324:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   18328:	e0bffc17 	ldw	r2,-16(fp)
   1832c:	e0fffd17 	ldw	r3,-12(fp)
   18330:	10c00015 	stw	r3,0(r2)

  return 0;  
   18334:	0005883a 	mov	r2,zero
}
   18338:	e037883a 	mov	sp,fp
   1833c:	dfc00117 	ldw	ra,4(sp)
   18340:	df000017 	ldw	fp,0(sp)
   18344:	dec00204 	addi	sp,sp,8
   18348:	f800283a 	ret

0001834c <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
   1834c:	defffd04 	addi	sp,sp,-12
   18350:	dfc00215 	stw	ra,8(sp)
   18354:	df000115 	stw	fp,4(sp)
   18358:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   1835c:	008000b4 	movhi	r2,2
   18360:	10a57c04 	addi	r2,r2,-27152
   18364:	e0bfff15 	stw	r2,-4(fp)
   18368:	00000606 	br	18384 <_do_ctors+0x38>
        (*ctor) (); 
   1836c:	e0bfff17 	ldw	r2,-4(fp)
   18370:	10800017 	ldw	r2,0(r2)
   18374:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   18378:	e0bfff17 	ldw	r2,-4(fp)
   1837c:	10bfff04 	addi	r2,r2,-4
   18380:	e0bfff15 	stw	r2,-4(fp)
   18384:	e0ffff17 	ldw	r3,-4(fp)
   18388:	008000b4 	movhi	r2,2
   1838c:	10a57d04 	addi	r2,r2,-27148
   18390:	18bff62e 	bgeu	r3,r2,1836c <__alt_mem_Flash_flash_data+0xf401836c>
        (*ctor) (); 
}
   18394:	e037883a 	mov	sp,fp
   18398:	dfc00117 	ldw	ra,4(sp)
   1839c:	df000017 	ldw	fp,0(sp)
   183a0:	dec00204 	addi	sp,sp,8
   183a4:	f800283a 	ret

000183a8 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
   183a8:	defffd04 	addi	sp,sp,-12
   183ac:	dfc00215 	stw	ra,8(sp)
   183b0:	df000115 	stw	fp,4(sp)
   183b4:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   183b8:	008000b4 	movhi	r2,2
   183bc:	10a57c04 	addi	r2,r2,-27152
   183c0:	e0bfff15 	stw	r2,-4(fp)
   183c4:	00000606 	br	183e0 <_do_dtors+0x38>
        (*dtor) (); 
   183c8:	e0bfff17 	ldw	r2,-4(fp)
   183cc:	10800017 	ldw	r2,0(r2)
   183d0:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   183d4:	e0bfff17 	ldw	r2,-4(fp)
   183d8:	10bfff04 	addi	r2,r2,-4
   183dc:	e0bfff15 	stw	r2,-4(fp)
   183e0:	e0ffff17 	ldw	r3,-4(fp)
   183e4:	008000b4 	movhi	r2,2
   183e8:	10a57d04 	addi	r2,r2,-27148
   183ec:	18bff62e 	bgeu	r3,r2,183c8 <__alt_mem_Flash_flash_data+0xf40183c8>
        (*dtor) (); 
}
   183f0:	e037883a 	mov	sp,fp
   183f4:	dfc00117 	ldw	ra,4(sp)
   183f8:	df000017 	ldw	fp,0(sp)
   183fc:	dec00204 	addi	sp,sp,8
   18400:	f800283a 	ret

00018404 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
   18404:	defffa04 	addi	sp,sp,-24
   18408:	dfc00515 	stw	ra,20(sp)
   1840c:	df000415 	stw	fp,16(sp)
   18410:	df000404 	addi	fp,sp,16
   18414:	e13ffe15 	stw	r4,-8(fp)
   18418:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
   1841c:	e0bfff17 	ldw	r2,-4(fp)
   18420:	10800017 	ldw	r2,0(r2)
   18424:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
   18428:	e13ffe17 	ldw	r4,-8(fp)
   1842c:	00073240 	call	7324 <strlen>
   18430:	10800044 	addi	r2,r2,1
   18434:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   18438:	00000d06 	br	18470 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
   1843c:	e0bffc17 	ldw	r2,-16(fp)
   18440:	10c00217 	ldw	r3,8(r2)
   18444:	e0bffd17 	ldw	r2,-12(fp)
   18448:	1809883a 	mov	r4,r3
   1844c:	e17ffe17 	ldw	r5,-8(fp)
   18450:	100d883a 	mov	r6,r2
   18454:	00192940 	call	19294 <memcmp>
   18458:	1000021e 	bne	r2,zero,18464 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
   1845c:	e0bffc17 	ldw	r2,-16(fp)
   18460:	00000706 	br	18480 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
   18464:	e0bffc17 	ldw	r2,-16(fp)
   18468:	10800017 	ldw	r2,0(r2)
   1846c:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   18470:	e0fffc17 	ldw	r3,-16(fp)
   18474:	e0bfff17 	ldw	r2,-4(fp)
   18478:	18bff01e 	bne	r3,r2,1843c <__alt_mem_Flash_flash_data+0xf401843c>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
   1847c:	0005883a 	mov	r2,zero
}
   18480:	e037883a 	mov	sp,fp
   18484:	dfc00117 	ldw	ra,4(sp)
   18488:	df000017 	ldw	fp,0(sp)
   1848c:	dec00204 	addi	sp,sp,8
   18490:	f800283a 	ret

00018494 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
   18494:	defffe04 	addi	sp,sp,-8
   18498:	dfc00115 	stw	ra,4(sp)
   1849c:	df000015 	stw	fp,0(sp)
   184a0:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
   184a4:	0009883a 	mov	r4,zero
   184a8:	01440004 	movi	r5,4096
   184ac:	00191200 	call	19120 <alt_icache_flush>
#endif
}
   184b0:	e037883a 	mov	sp,fp
   184b4:	dfc00117 	ldw	ra,4(sp)
   184b8:	df000017 	ldw	fp,0(sp)
   184bc:	dec00204 	addi	sp,sp,8
   184c0:	f800283a 	ret

000184c4 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
   184c4:	defff904 	addi	sp,sp,-28
   184c8:	dfc00615 	stw	ra,24(sp)
   184cc:	df000515 	stw	fp,20(sp)
   184d0:	df000504 	addi	fp,sp,20
   184d4:	e13ffc15 	stw	r4,-16(fp)
   184d8:	e17ffd15 	stw	r5,-12(fp)
   184dc:	e1bffe15 	stw	r6,-8(fp)
   184e0:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
   184e4:	e13ffd17 	ldw	r4,-12(fp)
   184e8:	e17ffe17 	ldw	r5,-8(fp)
   184ec:	e1bfff17 	ldw	r6,-4(fp)
   184f0:	00188c80 	call	188c8 <open>
   184f4:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
   184f8:	e0bffb17 	ldw	r2,-20(fp)
   184fc:	10001c16 	blt	r2,zero,18570 <alt_open_fd+0xac>
  {
    fd->dev      = alt_fd_list[old].dev;
   18500:	008000b4 	movhi	r2,2
   18504:	10a92f04 	addi	r2,r2,-23364
   18508:	e0fffb17 	ldw	r3,-20(fp)
   1850c:	18c00324 	muli	r3,r3,12
   18510:	10c5883a 	add	r2,r2,r3
   18514:	10c00017 	ldw	r3,0(r2)
   18518:	e0bffc17 	ldw	r2,-16(fp)
   1851c:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
   18520:	008000b4 	movhi	r2,2
   18524:	10a92f04 	addi	r2,r2,-23364
   18528:	e0fffb17 	ldw	r3,-20(fp)
   1852c:	18c00324 	muli	r3,r3,12
   18530:	18c00104 	addi	r3,r3,4
   18534:	10c5883a 	add	r2,r2,r3
   18538:	10c00017 	ldw	r3,0(r2)
   1853c:	e0bffc17 	ldw	r2,-16(fp)
   18540:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
   18544:	008000b4 	movhi	r2,2
   18548:	10a92f04 	addi	r2,r2,-23364
   1854c:	e0fffb17 	ldw	r3,-20(fp)
   18550:	18c00324 	muli	r3,r3,12
   18554:	18c00204 	addi	r3,r3,8
   18558:	10c5883a 	add	r2,r2,r3
   1855c:	10c00017 	ldw	r3,0(r2)
   18560:	e0bffc17 	ldw	r2,-16(fp)
   18564:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
   18568:	e13ffb17 	ldw	r4,-20(fp)
   1856c:	000d6e00 	call	d6e0 <alt_release_fd>
  }
} 
   18570:	e037883a 	mov	sp,fp
   18574:	dfc00117 	ldw	ra,4(sp)
   18578:	df000017 	ldw	fp,0(sp)
   1857c:	dec00204 	addi	sp,sp,8
   18580:	f800283a 	ret

00018584 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
   18584:	defffb04 	addi	sp,sp,-20
   18588:	dfc00415 	stw	ra,16(sp)
   1858c:	df000315 	stw	fp,12(sp)
   18590:	df000304 	addi	fp,sp,12
   18594:	e13ffd15 	stw	r4,-12(fp)
   18598:	e17ffe15 	stw	r5,-8(fp)
   1859c:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
   185a0:	010000b4 	movhi	r4,2
   185a4:	21293204 	addi	r4,r4,-23352
   185a8:	e17ffd17 	ldw	r5,-12(fp)
   185ac:	01800044 	movi	r6,1
   185b0:	01c07fc4 	movi	r7,511
   185b4:	00184c40 	call	184c4 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
   185b8:	010000b4 	movhi	r4,2
   185bc:	21292f04 	addi	r4,r4,-23364
   185c0:	e17ffe17 	ldw	r5,-8(fp)
   185c4:	000d883a 	mov	r6,zero
   185c8:	01c07fc4 	movi	r7,511
   185cc:	00184c40 	call	184c4 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
   185d0:	010000b4 	movhi	r4,2
   185d4:	21293504 	addi	r4,r4,-23340
   185d8:	e17fff17 	ldw	r5,-4(fp)
   185dc:	01800044 	movi	r6,1
   185e0:	01c07fc4 	movi	r7,511
   185e4:	00184c40 	call	184c4 <alt_open_fd>
}  
   185e8:	e037883a 	mov	sp,fp
   185ec:	dfc00117 	ldw	ra,4(sp)
   185f0:	df000017 	ldw	fp,0(sp)
   185f4:	dec00204 	addi	sp,sp,8
   185f8:	f800283a 	ret

000185fc <alt_irq_register>:
 */
 
int alt_irq_register (alt_u32 id, 
                      void* context, 
                      alt_isr_func handler)
{
   185fc:	defff004 	addi	sp,sp,-64
   18600:	df000f15 	stw	fp,60(sp)
   18604:	df000f04 	addi	fp,sp,60
   18608:	e13ffd15 	stw	r4,-12(fp)
   1860c:	e17ffe15 	stw	r5,-8(fp)
   18610:	e1bfff15 	stw	r6,-4(fp)
  int rc = -EINVAL;  
   18614:	00bffa84 	movi	r2,-22
   18618:	e0bff115 	stw	r2,-60(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
   1861c:	e0bffd17 	ldw	r2,-12(fp)
   18620:	10800828 	cmpgeui	r2,r2,32
   18624:	10005c1e 	bne	r2,zero,18798 <alt_irq_register+0x19c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   18628:	0005303a 	rdctl	r2,status
   1862c:	e0bff315 	stw	r2,-52(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   18630:	e0fff317 	ldw	r3,-52(fp)
   18634:	00bfff84 	movi	r2,-2
   18638:	1884703a 	and	r2,r3,r2
   1863c:	1001703a 	wrctl	status,r2
  
  return context;
   18640:	e0bff317 	ldw	r2,-52(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all ();
   18644:	e0bff215 	stw	r2,-56(fp)

    alt_irq[id].handler = handler;
   18648:	008000b4 	movhi	r2,2
   1864c:	109b3704 	addi	r2,r2,27868
   18650:	e0fffd17 	ldw	r3,-12(fp)
   18654:	180690fa 	slli	r3,r3,3
   18658:	10c5883a 	add	r2,r2,r3
   1865c:	e0ffff17 	ldw	r3,-4(fp)
   18660:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = context;
   18664:	008000b4 	movhi	r2,2
   18668:	109b3704 	addi	r2,r2,27868
   1866c:	e0fffd17 	ldw	r3,-12(fp)
   18670:	180690fa 	slli	r3,r3,3
   18674:	18c00104 	addi	r3,r3,4
   18678:	10c5883a 	add	r2,r2,r3
   1867c:	e0fffe17 	ldw	r3,-8(fp)
   18680:	10c00015 	stw	r3,0(r2)

    rc = (handler) ? alt_irq_enable (id): alt_irq_disable (id);
   18684:	e0bfff17 	ldw	r2,-4(fp)
   18688:	10001f26 	beq	r2,zero,18708 <alt_irq_register+0x10c>
   1868c:	e0bffd17 	ldw	r2,-12(fp)
   18690:	e0bff415 	stw	r2,-48(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   18694:	0005303a 	rdctl	r2,status
   18698:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1869c:	e0fff517 	ldw	r3,-44(fp)
   186a0:	00bfff84 	movi	r2,-2
   186a4:	1884703a 	and	r2,r3,r2
   186a8:	1001703a 	wrctl	status,r2
  
  return context;
   186ac:	e0bff517 	ldw	r2,-44(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   186b0:	e0bff615 	stw	r2,-40(fp)

  alt_irq_active |= (1 << id);
   186b4:	e0bff417 	ldw	r2,-48(fp)
   186b8:	00c00044 	movi	r3,1
   186bc:	1884983a 	sll	r2,r3,r2
   186c0:	1007883a 	mov	r3,r2
   186c4:	008000b4 	movhi	r2,2
   186c8:	10b6a004 	addi	r2,r2,-9600
   186cc:	10800017 	ldw	r2,0(r2)
   186d0:	1886b03a 	or	r3,r3,r2
   186d4:	008000b4 	movhi	r2,2
   186d8:	10b6a004 	addi	r2,r2,-9600
   186dc:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   186e0:	008000b4 	movhi	r2,2
   186e4:	10b6a004 	addi	r2,r2,-9600
   186e8:	10800017 	ldw	r2,0(r2)
   186ec:	100170fa 	wrctl	ienable,r2
   186f0:	e0bff617 	ldw	r2,-40(fp)
   186f4:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   186f8:	e0bff717 	ldw	r2,-36(fp)
   186fc:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   18700:	0005883a 	mov	r2,zero
   18704:	00001f06 	br	18784 <alt_irq_register+0x188>
   18708:	e0bffd17 	ldw	r2,-12(fp)
   1870c:	e0bff815 	stw	r2,-32(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   18710:	0005303a 	rdctl	r2,status
   18714:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   18718:	e0fff917 	ldw	r3,-28(fp)
   1871c:	00bfff84 	movi	r2,-2
   18720:	1884703a 	and	r2,r3,r2
   18724:	1001703a 	wrctl	status,r2
  
  return context;
   18728:	e0bff917 	ldw	r2,-28(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   1872c:	e0bffa15 	stw	r2,-24(fp)

  alt_irq_active &= ~(1 << id);
   18730:	e0bff817 	ldw	r2,-32(fp)
   18734:	00c00044 	movi	r3,1
   18738:	1884983a 	sll	r2,r3,r2
   1873c:	0084303a 	nor	r2,zero,r2
   18740:	1007883a 	mov	r3,r2
   18744:	008000b4 	movhi	r2,2
   18748:	10b6a004 	addi	r2,r2,-9600
   1874c:	10800017 	ldw	r2,0(r2)
   18750:	1886703a 	and	r3,r3,r2
   18754:	008000b4 	movhi	r2,2
   18758:	10b6a004 	addi	r2,r2,-9600
   1875c:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   18760:	008000b4 	movhi	r2,2
   18764:	10b6a004 	addi	r2,r2,-9600
   18768:	10800017 	ldw	r2,0(r2)
   1876c:	100170fa 	wrctl	ienable,r2
   18770:	e0bffa17 	ldw	r2,-24(fp)
   18774:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   18778:	e0bffb17 	ldw	r2,-20(fp)
   1877c:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   18780:	0005883a 	mov	r2,zero
   18784:	e0bff115 	stw	r2,-60(fp)
   18788:	e0bff217 	ldw	r2,-56(fp)
   1878c:	e0bffc15 	stw	r2,-16(fp)
   18790:	e0bffc17 	ldw	r2,-16(fp)
   18794:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }
  return rc; 
   18798:	e0bff117 	ldw	r2,-60(fp)
}
   1879c:	e037883a 	mov	sp,fp
   187a0:	df000017 	ldw	fp,0(sp)
   187a4:	dec00104 	addi	sp,sp,4
   187a8:	f800283a 	ret

000187ac <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   187ac:	defffe04 	addi	sp,sp,-8
   187b0:	dfc00115 	stw	ra,4(sp)
   187b4:	df000015 	stw	fp,0(sp)
   187b8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   187bc:	008000b4 	movhi	r2,2
   187c0:	10ae9804 	addi	r2,r2,-17824
   187c4:	10800017 	ldw	r2,0(r2)
   187c8:	10000526 	beq	r2,zero,187e0 <alt_get_errno+0x34>
   187cc:	008000b4 	movhi	r2,2
   187d0:	10ae9804 	addi	r2,r2,-17824
   187d4:	10800017 	ldw	r2,0(r2)
   187d8:	103ee83a 	callr	r2
   187dc:	00000206 	br	187e8 <alt_get_errno+0x3c>
   187e0:	008000b4 	movhi	r2,2
   187e4:	10b68304 	addi	r2,r2,-9716
}
   187e8:	e037883a 	mov	sp,fp
   187ec:	dfc00117 	ldw	ra,4(sp)
   187f0:	df000017 	ldw	fp,0(sp)
   187f4:	dec00204 	addi	sp,sp,8
   187f8:	f800283a 	ret

000187fc <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
   187fc:	defffd04 	addi	sp,sp,-12
   18800:	df000215 	stw	fp,8(sp)
   18804:	df000204 	addi	fp,sp,8
   18808:	e13fff15 	stw	r4,-4(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
   1880c:	e0bfff17 	ldw	r2,-4(fp)
   18810:	10800217 	ldw	r2,8(r2)
   18814:	10d00034 	orhi	r3,r2,16384
   18818:	e0bfff17 	ldw	r2,-4(fp)
   1881c:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   18820:	e03ffe15 	stw	zero,-8(fp)
   18824:	00001d06 	br	1889c <alt_file_locked+0xa0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   18828:	008000b4 	movhi	r2,2
   1882c:	10a92f04 	addi	r2,r2,-23364
   18830:	e0fffe17 	ldw	r3,-8(fp)
   18834:	18c00324 	muli	r3,r3,12
   18838:	10c5883a 	add	r2,r2,r3
   1883c:	10c00017 	ldw	r3,0(r2)
   18840:	e0bfff17 	ldw	r2,-4(fp)
   18844:	10800017 	ldw	r2,0(r2)
   18848:	1880111e 	bne	r3,r2,18890 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   1884c:	008000b4 	movhi	r2,2
   18850:	10a92f04 	addi	r2,r2,-23364
   18854:	e0fffe17 	ldw	r3,-8(fp)
   18858:	18c00324 	muli	r3,r3,12
   1885c:	18c00204 	addi	r3,r3,8
   18860:	10c5883a 	add	r2,r2,r3
   18864:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   18868:	1000090e 	bge	r2,zero,18890 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
   1886c:	e0bffe17 	ldw	r2,-8(fp)
   18870:	10c00324 	muli	r3,r2,12
   18874:	008000b4 	movhi	r2,2
   18878:	10a92f04 	addi	r2,r2,-23364
   1887c:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   18880:	e0bfff17 	ldw	r2,-4(fp)
   18884:	18800226 	beq	r3,r2,18890 <alt_file_locked+0x94>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
   18888:	00bffcc4 	movi	r2,-13
   1888c:	00000a06 	br	188b8 <alt_file_locked+0xbc>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   18890:	e0bffe17 	ldw	r2,-8(fp)
   18894:	10800044 	addi	r2,r2,1
   18898:	e0bffe15 	stw	r2,-8(fp)
   1889c:	008000b4 	movhi	r2,2
   188a0:	10ae9704 	addi	r2,r2,-17828
   188a4:	10800017 	ldw	r2,0(r2)
   188a8:	1007883a 	mov	r3,r2
   188ac:	e0bffe17 	ldw	r2,-8(fp)
   188b0:	18bfdd2e 	bgeu	r3,r2,18828 <__alt_mem_Flash_flash_data+0xf4018828>
    }
  }
  
  /* The device is not locked */
 
  return 0;
   188b4:	0005883a 	mov	r2,zero
}
   188b8:	e037883a 	mov	sp,fp
   188bc:	df000017 	ldw	fp,0(sp)
   188c0:	dec00104 	addi	sp,sp,4
   188c4:	f800283a 	ret

000188c8 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
   188c8:	defff604 	addi	sp,sp,-40
   188cc:	dfc00915 	stw	ra,36(sp)
   188d0:	df000815 	stw	fp,32(sp)
   188d4:	df000804 	addi	fp,sp,32
   188d8:	e13ffd15 	stw	r4,-12(fp)
   188dc:	e17ffe15 	stw	r5,-8(fp)
   188e0:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
   188e4:	00bfffc4 	movi	r2,-1
   188e8:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
   188ec:	00bffb44 	movi	r2,-19
   188f0:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
   188f4:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
   188f8:	e13ffd17 	ldw	r4,-12(fp)
   188fc:	014000b4 	movhi	r5,2
   18900:	296e9504 	addi	r5,r5,-17836
   18904:	00184040 	call	18404 <alt_find_dev>
   18908:	e0bff815 	stw	r2,-32(fp)
   1890c:	e0bff817 	ldw	r2,-32(fp)
   18910:	1000051e 	bne	r2,zero,18928 <open+0x60>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
   18914:	e13ffd17 	ldw	r4,-12(fp)
   18918:	0018f100 	call	18f10 <alt_find_file>
   1891c:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
   18920:	00800044 	movi	r2,1
   18924:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
   18928:	e0bff817 	ldw	r2,-32(fp)
   1892c:	10002926 	beq	r2,zero,189d4 <open+0x10c>
  {
    if ((index = alt_get_fd (dev)) < 0)
   18930:	e13ff817 	ldw	r4,-32(fp)
   18934:	00190240 	call	19024 <alt_get_fd>
   18938:	e0bff915 	stw	r2,-28(fp)
   1893c:	e0bff917 	ldw	r2,-28(fp)
   18940:	1000030e 	bge	r2,zero,18950 <open+0x88>
    {
      status = index;
   18944:	e0bff917 	ldw	r2,-28(fp)
   18948:	e0bffa15 	stw	r2,-24(fp)
   1894c:	00002306 	br	189dc <open+0x114>
    }
    else
    {
      fd = &alt_fd_list[index];
   18950:	e0bff917 	ldw	r2,-28(fp)
   18954:	10c00324 	muli	r3,r2,12
   18958:	008000b4 	movhi	r2,2
   1895c:	10a92f04 	addi	r2,r2,-23364
   18960:	1885883a 	add	r2,r3,r2
   18964:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
   18968:	e0fffe17 	ldw	r3,-8(fp)
   1896c:	00900034 	movhi	r2,16384
   18970:	10bfffc4 	addi	r2,r2,-1
   18974:	1886703a 	and	r3,r3,r2
   18978:	e0bffc17 	ldw	r2,-16(fp)
   1897c:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
   18980:	e0bffb17 	ldw	r2,-20(fp)
   18984:	1000051e 	bne	r2,zero,1899c <open+0xd4>
   18988:	e13ffc17 	ldw	r4,-16(fp)
   1898c:	00187fc0 	call	187fc <alt_file_locked>
   18990:	e0bffa15 	stw	r2,-24(fp)
   18994:	e0bffa17 	ldw	r2,-24(fp)
   18998:	10001016 	blt	r2,zero,189dc <open+0x114>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
   1899c:	e0bff817 	ldw	r2,-32(fp)
   189a0:	10800317 	ldw	r2,12(r2)
   189a4:	10000826 	beq	r2,zero,189c8 <open+0x100>
   189a8:	e0bff817 	ldw	r2,-32(fp)
   189ac:	10800317 	ldw	r2,12(r2)
   189b0:	e13ffc17 	ldw	r4,-16(fp)
   189b4:	e17ffd17 	ldw	r5,-12(fp)
   189b8:	e1bffe17 	ldw	r6,-8(fp)
   189bc:	e1ffff17 	ldw	r7,-4(fp)
   189c0:	103ee83a 	callr	r2
   189c4:	00000106 	br	189cc <open+0x104>
   189c8:	0005883a 	mov	r2,zero
   189cc:	e0bffa15 	stw	r2,-24(fp)
   189d0:	00000206 	br	189dc <open+0x114>
      }
    }
  }
  else
  {
    status = -ENODEV;
   189d4:	00bffb44 	movi	r2,-19
   189d8:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
   189dc:	e0bffa17 	ldw	r2,-24(fp)
   189e0:	1000090e 	bge	r2,zero,18a08 <open+0x140>
  {
    alt_release_fd (index);  
   189e4:	e13ff917 	ldw	r4,-28(fp)
   189e8:	000d6e00 	call	d6e0 <alt_release_fd>
    ALT_ERRNO = -status;
   189ec:	00187ac0 	call	187ac <alt_get_errno>
   189f0:	1007883a 	mov	r3,r2
   189f4:	e0bffa17 	ldw	r2,-24(fp)
   189f8:	0085c83a 	sub	r2,zero,r2
   189fc:	18800015 	stw	r2,0(r3)
    return -1;
   18a00:	00bfffc4 	movi	r2,-1
   18a04:	00000106 	br	18a0c <open+0x144>
  }
  
  /* return the reference upon success */

  return index;
   18a08:	e0bff917 	ldw	r2,-28(fp)
}
   18a0c:	e037883a 	mov	sp,fp
   18a10:	dfc00117 	ldw	ra,4(sp)
   18a14:	df000017 	ldw	fp,0(sp)
   18a18:	dec00204 	addi	sp,sp,8
   18a1c:	f800283a 	ret

00018a20 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
   18a20:	defffa04 	addi	sp,sp,-24
   18a24:	df000515 	stw	fp,20(sp)
   18a28:	df000504 	addi	fp,sp,20
   18a2c:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   18a30:	0005303a 	rdctl	r2,status
   18a34:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   18a38:	e0fffc17 	ldw	r3,-16(fp)
   18a3c:	00bfff84 	movi	r2,-2
   18a40:	1884703a 	and	r2,r3,r2
   18a44:	1001703a 	wrctl	status,r2
  
  return context;
   18a48:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
   18a4c:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
   18a50:	e0bfff17 	ldw	r2,-4(fp)
   18a54:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
   18a58:	e0bffd17 	ldw	r2,-12(fp)
   18a5c:	10800017 	ldw	r2,0(r2)
   18a60:	e0fffd17 	ldw	r3,-12(fp)
   18a64:	18c00117 	ldw	r3,4(r3)
   18a68:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
   18a6c:	e0bffd17 	ldw	r2,-12(fp)
   18a70:	10800117 	ldw	r2,4(r2)
   18a74:	e0fffd17 	ldw	r3,-12(fp)
   18a78:	18c00017 	ldw	r3,0(r3)
   18a7c:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
   18a80:	e0bffd17 	ldw	r2,-12(fp)
   18a84:	e0fffd17 	ldw	r3,-12(fp)
   18a88:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
   18a8c:	e0bffd17 	ldw	r2,-12(fp)
   18a90:	e0fffd17 	ldw	r3,-12(fp)
   18a94:	10c00015 	stw	r3,0(r2)
   18a98:	e0bffb17 	ldw	r2,-20(fp)
   18a9c:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   18aa0:	e0bffe17 	ldw	r2,-8(fp)
   18aa4:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
   18aa8:	e037883a 	mov	sp,fp
   18aac:	df000017 	ldw	fp,0(sp)
   18ab0:	dec00104 	addi	sp,sp,4
   18ab4:	f800283a 	ret

00018ab8 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
   18ab8:	defffb04 	addi	sp,sp,-20
   18abc:	dfc00415 	stw	ra,16(sp)
   18ac0:	df000315 	stw	fp,12(sp)
   18ac4:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
   18ac8:	d0a02f17 	ldw	r2,-32580(gp)
   18acc:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
   18ad0:	d0a81717 	ldw	r2,-24484(gp)
   18ad4:	10800044 	addi	r2,r2,1
   18ad8:	d0a81715 	stw	r2,-24484(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   18adc:	00002e06 	br	18b98 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
   18ae0:	e0bffd17 	ldw	r2,-12(fp)
   18ae4:	10800017 	ldw	r2,0(r2)
   18ae8:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
   18aec:	e0bffd17 	ldw	r2,-12(fp)
   18af0:	10800403 	ldbu	r2,16(r2)
   18af4:	10803fcc 	andi	r2,r2,255
   18af8:	10000426 	beq	r2,zero,18b0c <alt_tick+0x54>
   18afc:	d0a81717 	ldw	r2,-24484(gp)
   18b00:	1000021e 	bne	r2,zero,18b0c <alt_tick+0x54>
    {
      alarm->rollover = 0;
   18b04:	e0bffd17 	ldw	r2,-12(fp)
   18b08:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
   18b0c:	e0bffd17 	ldw	r2,-12(fp)
   18b10:	10800217 	ldw	r2,8(r2)
   18b14:	d0e81717 	ldw	r3,-24484(gp)
   18b18:	18801d36 	bltu	r3,r2,18b90 <alt_tick+0xd8>
   18b1c:	e0bffd17 	ldw	r2,-12(fp)
   18b20:	10800403 	ldbu	r2,16(r2)
   18b24:	10803fcc 	andi	r2,r2,255
   18b28:	1000191e 	bne	r2,zero,18b90 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
   18b2c:	e0bffd17 	ldw	r2,-12(fp)
   18b30:	10800317 	ldw	r2,12(r2)
   18b34:	e0fffd17 	ldw	r3,-12(fp)
   18b38:	18c00517 	ldw	r3,20(r3)
   18b3c:	1809883a 	mov	r4,r3
   18b40:	103ee83a 	callr	r2
   18b44:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
   18b48:	e0bfff17 	ldw	r2,-4(fp)
   18b4c:	1000031e 	bne	r2,zero,18b5c <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
   18b50:	e13ffd17 	ldw	r4,-12(fp)
   18b54:	0018a200 	call	18a20 <alt_alarm_stop>
   18b58:	00000d06 	br	18b90 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
   18b5c:	e0bffd17 	ldw	r2,-12(fp)
   18b60:	10c00217 	ldw	r3,8(r2)
   18b64:	e0bfff17 	ldw	r2,-4(fp)
   18b68:	1887883a 	add	r3,r3,r2
   18b6c:	e0bffd17 	ldw	r2,-12(fp)
   18b70:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
   18b74:	e0bffd17 	ldw	r2,-12(fp)
   18b78:	10c00217 	ldw	r3,8(r2)
   18b7c:	d0a81717 	ldw	r2,-24484(gp)
   18b80:	1880032e 	bgeu	r3,r2,18b90 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
   18b84:	e0bffd17 	ldw	r2,-12(fp)
   18b88:	00c00044 	movi	r3,1
   18b8c:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
   18b90:	e0bffe17 	ldw	r2,-8(fp)
   18b94:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   18b98:	e0fffd17 	ldw	r3,-12(fp)
   18b9c:	d0a02f04 	addi	r2,gp,-32580
   18ba0:	18bfcf1e 	bne	r3,r2,18ae0 <__alt_mem_Flash_flash_data+0xf4018ae0>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
   18ba4:	000e8ec0 	call	e8ec <OSTimeTick>
}
   18ba8:	e037883a 	mov	sp,fp
   18bac:	dfc00117 	ldw	ra,4(sp)
   18bb0:	df000017 	ldw	fp,0(sp)
   18bb4:	dec00204 	addi	sp,sp,8
   18bb8:	f800283a 	ret

00018bbc <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
   18bbc:	deffff04 	addi	sp,sp,-4
   18bc0:	df000015 	stw	fp,0(sp)
   18bc4:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
   18bc8:	000170fa 	wrctl	ienable,zero
}
   18bcc:	e037883a 	mov	sp,fp
   18bd0:	df000017 	ldw	fp,0(sp)
   18bd4:	dec00104 	addi	sp,sp,4
   18bd8:	f800283a 	ret

00018bdc <OSCtxSw>:

      /* 
       * Save the remaining registers to the stack. 
       */

      addi sp, sp, -44
   18bdc:	defff504 	addi	sp,sp,-44
      bltu  sp, et, .Lstack_overflow

#endif

#if OS_THREAD_SAFE_NEWLIB
      ldw r3, %gprel(_impure_ptr)(gp)   /* load the pointer */
   18be0:	d0e00317 	ldw	r3,-32756(gp)
#endif /* OS_THREAD_SAFE_NEWLIB */

      ldw r4, %gprel(OSTCBCur)(gp)
   18be4:	d1281017 	ldw	r4,-24512(gp)

      stw ra,  0(sp)
   18be8:	dfc00015 	stw	ra,0(sp)
      stw fp,  4(sp)
   18bec:	df000115 	stw	fp,4(sp)
      stw r23, 8(sp)
   18bf0:	ddc00215 	stw	r23,8(sp)
      stw r22, 12(sp)
   18bf4:	dd800315 	stw	r22,12(sp)
      stw r21, 16(sp)
   18bf8:	dd400415 	stw	r21,16(sp)
      stw r20, 20(sp)
   18bfc:	dd000515 	stw	r20,20(sp)
      stw r19, 24(sp)
   18c00:	dcc00615 	stw	r19,24(sp)
      stw r18, 28(sp)
   18c04:	dc800715 	stw	r18,28(sp)
      stw r17, 32(sp)
   18c08:	dc400815 	stw	r17,32(sp)
      stw r16, 36(sp)
   18c0c:	dc000915 	stw	r16,36(sp)
       * store the current value of _impure_ptr so it can be restored
       * later; _impure_ptr is asigned on a per task basis. It is used
       * by Newlib to achieve reentrancy.	
       */

      stw r3, 40(sp)                  /* save the impure pointer */
   18c10:	d8c00a15 	stw	r3,40(sp)
      /* 
       * Save the current tasks stack pointer into the current tasks OS_TCB.
       * i.e. OSTCBCur->OSTCBStkPtr = sp;
       */

      stw sp, (r4)                  /* save the stack pointer (OSTCBStkPtr */
   18c14:	26c00015 	stw	sp,0(r4)

      /*
       * Call the user definable OSTaskSWHook()
       */

      call OSTaskSwHook
   18c18:	0018e480 	call	18e48 <OSTaskSwHook>
      /*
       * OSTCBCur = OSTCBHighRdy; 
       * OSPrioCur = OSPrioHighRdy; 
       */

      ldw r4, %gprel(OSTCBHighRdy)(gp)
   18c1c:	d1280b17 	ldw	r4,-24532(gp)
      ldb r5, %gprel(OSPrioHighRdy)(gp)
   18c20:	d1680307 	ldb	r5,-24564(gp)

      stw r4, %gprel(OSTCBCur)(gp)     /* set the current task to be the new task */
   18c24:	d1281015 	stw	r4,-24512(gp)
      stb r5, %gprel(OSPrioCur)(gp)    /* store the new task's priority as the current */
   18c28:	d1680345 	stb	r5,-24563(gp)

      /*
       * Set the stack pointer to point to the new task's stack
       */

      ldw sp, (r4) /* the stack pointer is the first entry in the OS_TCB structure */
   18c2c:	26c00017 	ldw	sp,0(r4)
      /*
       * restore the value of _impure_ptr ; _impure_ptr is asigned on a 
       * per task basis. It is used by Newlib to achieve reentrancy.	
       */

      ldw r3, 40(sp)                  /* load the new impure pointer */
   18c30:	d8c00a17 	ldw	r3,40(sp)

      /*
       * Restore the saved registers for the new task.
       */

      ldw ra,  0(sp)
   18c34:	dfc00017 	ldw	ra,0(sp)
      ldw fp,  4(sp)
   18c38:	df000117 	ldw	fp,4(sp)
      ldw r23, 8(sp)
   18c3c:	ddc00217 	ldw	r23,8(sp)
      ldw r22, 12(sp)
   18c40:	dd800317 	ldw	r22,12(sp)
      ldw r21, 16(sp)
   18c44:	dd400417 	ldw	r21,16(sp)
      ldw r20, 20(sp)
   18c48:	dd000517 	ldw	r20,20(sp)
      ldw r19, 24(sp)
   18c4c:	dcc00617 	ldw	r19,24(sp)
      ldw r18, 28(sp)
   18c50:	dc800717 	ldw	r18,28(sp)
      ldw r17, 32(sp)
   18c54:	dc400817 	ldw	r17,32(sp)
      ldw r16, 36(sp)
   18c58:	dc000917 	ldw	r16,36(sp)

#if OS_THREAD_SAFE_NEWLIB

      stw r3, %gprel(_impure_ptr)(gp) /* update _impure_ptr */
   18c5c:	d0e00315 	stw	r3,-32756(gp)

      stw et, %gprel(alt_stack_limit_value)(gp)

#endif

      addi sp, sp, 44
   18c60:	dec00b04 	addi	sp,sp,44

      /*
       * resume execution of the new task.
       */

      ret
   18c64:	f800283a 	ret

00018c68 <OSStartHighRdy>:

      /*
       * disable interrupts so that the scheduler doesn't run while
       * we're initialising this task.
       */  
      rdctl r18, status
   18c68:	0025303a 	rdctl	r18,status
      subi  r17, zero, 2   /* r17 = 0xfffffffe */
   18c6c:	047fff84 	movi	r17,-2
      and   r18, r18, r17
   18c70:	9464703a 	and	r18,r18,r17
      wrctl status, r18
   18c74:	9001703a 	wrctl	status,r18

      /*
       * Call the user definable OSTaskSWHook()
       */

      call OSTaskSwHook
   18c78:	0018e480 	call	18e48 <OSTaskSwHook>

      /* 
       * set OSRunning = TRUE.
       */

      movi r18, 1                    /* set r18 to the value 'TRUE' */
   18c7c:	04800044 	movi	r18,1
      stb r18, %gprel(OSRunning)(gp) /* save this to OSRunning */
   18c80:	d4a80145 	stb	r18,-24571(gp)

      /*
       * start execution of the new task.
       */

      br 9b
   18c84:	003fe506 	br	18c1c <__alt_mem_Flash_flash_data+0xf4018c1c>

00018c88 <OSStartTsk>:

OSStartTsk:
      /* This instruction is never executed.  Its here to make the
       * backtrace work right 
       */
      movi sp, 0
   18c88:	06c00004 	movi	sp,0

      /* Enable interrupts */
      rdctl r2, status
   18c8c:	0005303a 	rdctl	r2,status
      ori   r2, r2, 0x1
   18c90:	10800054 	ori	r2,r2,1
      wrctl status, r2
   18c94:	1001703a 	wrctl	status,r2

      ldw r2, 4(sp)
   18c98:	d8800117 	ldw	r2,4(sp)
      ldw r4, 0(sp)
   18c9c:	d9000017 	ldw	r4,0(sp)

      addi sp, sp, 8
   18ca0:	dec00204 	addi	sp,sp,8

      callr r2
   18ca4:	103ee83a 	callr	r2

      nop
   18ca8:	0001883a 	nop

00018cac <OSTaskStkInit>:
 *              been placed on the stack in the proper order.
 *
 ***********************************************************************************************/

OS_STK *OSTaskStkInit(void (*task)(void *pd), void *pdata, OS_STK *pstk, INT16U opt)
{
   18cac:	defff704 	addi	sp,sp,-36
   18cb0:	dfc00815 	stw	ra,32(sp)
   18cb4:	df000715 	stw	fp,28(sp)
   18cb8:	df000704 	addi	fp,sp,28
   18cbc:	e13ffc15 	stw	r4,-16(fp)
   18cc0:	e17ffd15 	stw	r5,-12(fp)
   18cc4:	e1bffe15 	stw	r6,-8(fp)
   18cc8:	3805883a 	mov	r2,r7
   18ccc:	e0bfff0d 	sth	r2,-4(fp)
    * create and initialise the impure pointer used for Newlib thread local storage.
    * This is only done if the C library is being used in a thread safe mode. Otherwise
    * a single reent structure is used for all threads, which saves memory.
    */

   local_impure_ptr = (struct _reent*)((((INT32U)(pstk)) & ~0x3) - sizeof(struct _reent));
   18cd0:	e0fffe17 	ldw	r3,-8(fp)
   18cd4:	00bfff04 	movi	r2,-4
   18cd8:	1884703a 	and	r2,r3,r2
   18cdc:	10bef704 	addi	r2,r2,-1060
   18ce0:	e0bff915 	stw	r2,-28(fp)

   _REENT_INIT_PTR (local_impure_ptr);
   18ce4:	e13ff917 	ldw	r4,-28(fp)
   18ce8:	000b883a 	mov	r5,zero
   18cec:	01810904 	movi	r6,1060
   18cf0:	0005fb80 	call	5fb8 <memset>
   18cf4:	e0bff917 	ldw	r2,-28(fp)
   18cf8:	10c0bb04 	addi	r3,r2,748
   18cfc:	e0bff917 	ldw	r2,-28(fp)
   18d00:	10c00115 	stw	r3,4(r2)
   18d04:	e0bff917 	ldw	r2,-28(fp)
   18d08:	10c0d504 	addi	r3,r2,852
   18d0c:	e0bff917 	ldw	r2,-28(fp)
   18d10:	10c00215 	stw	r3,8(r2)
   18d14:	e0bff917 	ldw	r2,-28(fp)
   18d18:	10c0ef04 	addi	r3,r2,956
   18d1c:	e0bff917 	ldw	r2,-28(fp)
   18d20:	10c00315 	stw	r3,12(r2)
   18d24:	e0fff917 	ldw	r3,-28(fp)
   18d28:	008000b4 	movhi	r2,2
   18d2c:	10a6fb04 	addi	r2,r2,-25620
   18d30:	18800d15 	stw	r2,52(r3)
   18d34:	e0bff917 	ldw	r2,-28(fp)
   18d38:	00c00044 	movi	r3,1
   18d3c:	10c02915 	stw	r3,164(r2)
   18d40:	10002a15 	stw	zero,168(r2)
   18d44:	e0bff917 	ldw	r2,-28(fp)
   18d48:	00ccc384 	movi	r3,13070
   18d4c:	10c02b0d 	sth	r3,172(r2)
   18d50:	e0bff917 	ldw	r2,-28(fp)
   18d54:	00eaf344 	movi	r3,-21555
   18d58:	10c02b8d 	sth	r3,174(r2)
   18d5c:	e0bff917 	ldw	r2,-28(fp)
   18d60:	00c48d04 	movi	r3,4660
   18d64:	10c02c0d 	sth	r3,176(r2)
   18d68:	e0bff917 	ldw	r2,-28(fp)
   18d6c:	00f99b44 	movi	r3,-6547
   18d70:	10c02c8d 	sth	r3,178(r2)
   18d74:	e0bff917 	ldw	r2,-28(fp)
   18d78:	00f7bb04 	movi	r3,-8468
   18d7c:	10c02d0d 	sth	r3,180(r2)
   18d80:	e0bff917 	ldw	r2,-28(fp)
   18d84:	00c00144 	movi	r3,5
   18d88:	10c02d8d 	sth	r3,182(r2)
   18d8c:	e0bff917 	ldw	r2,-28(fp)
   18d90:	00c002c4 	movi	r3,11
   18d94:	10c02e0d 	sth	r3,184(r2)
   /* 
    * create a stack frame at the top of the stack (leaving space for the 
    * reentrant data structure).
    */

   frame_pointer = (INT32U*) local_impure_ptr;
   18d98:	e0bff917 	ldw	r2,-28(fp)
   18d9c:	e0bffa15 	stw	r2,-24(fp)
#else
   frame_pointer =   (INT32U*) (((INT32U)(pstk)) & ~0x3);
#endif /* OS_THREAD_SAFE_NEWLIB */
   stk = frame_pointer - 13;
   18da0:	e0bffa17 	ldw	r2,-24(fp)
   18da4:	10bff304 	addi	r2,r2,-52
   18da8:	e0bffb15 	stw	r2,-20(fp)

   /* Now fill the stack frame. */

   stk[12] = (INT32U)task;            /* task address (ra) */
   18dac:	e0bffb17 	ldw	r2,-20(fp)
   18db0:	10800c04 	addi	r2,r2,48
   18db4:	e0fffc17 	ldw	r3,-16(fp)
   18db8:	10c00015 	stw	r3,0(r2)
   stk[11] = (INT32U) pdata;          /* first register argument (r4) */
   18dbc:	e0bffb17 	ldw	r2,-20(fp)
   18dc0:	10800b04 	addi	r2,r2,44
   18dc4:	e0fffd17 	ldw	r3,-12(fp)
   18dc8:	10c00015 	stw	r3,0(r2)

#if OS_THREAD_SAFE_NEWLIB
   stk[10] = (INT32U) local_impure_ptr; /* value of _impure_ptr for this thread */
   18dcc:	e0bffb17 	ldw	r2,-20(fp)
   18dd0:	10800a04 	addi	r2,r2,40
   18dd4:	e0fff917 	ldw	r3,-28(fp)
   18dd8:	10c00015 	stw	r3,0(r2)
#endif /* OS_THREAD_SAFE_NEWLIB */
   stk[0]  = ((INT32U)&OSStartTsk) + 4;/* exception return address (ea) */  
   18ddc:	008000b4 	movhi	r2,2
   18de0:	10a32204 	addi	r2,r2,-29560
   18de4:	10c00104 	addi	r3,r2,4
   18de8:	e0bffb17 	ldw	r2,-20(fp)
   18dec:	10c00015 	stw	r3,0(r2)
    */
   __asm__ (".set OSTCBNext_OFFSET,%0" :: "i" (offsetof(OS_TCB, OSTCBNext)));
   __asm__ (".set OSTCBPrio_OFFSET,%0" :: "i" (offsetof(OS_TCB, OSTCBPrio)));
   __asm__ (".set OSTCBStkPtr_OFFSET,%0" :: "i" (offsetof(OS_TCB, OSTCBStkPtr)));
  
   return((OS_STK *)stk);
   18df0:	e0bffb17 	ldw	r2,-20(fp)
}
   18df4:	e037883a 	mov	sp,fp
   18df8:	dfc00117 	ldw	ra,4(sp)
   18dfc:	df000017 	ldw	fp,0(sp)
   18e00:	dec00204 	addi	sp,sp,8
   18e04:	f800283a 	ret

00018e08 <OSTaskCreateHook>:
*
* Note(s)    : 1) Interrupts are disabled during this call.
*********************************************************************************************************
*/
void OSTaskCreateHook (OS_TCB *ptcb)
{
   18e08:	defffe04 	addi	sp,sp,-8
   18e0c:	df000115 	stw	fp,4(sp)
   18e10:	df000104 	addi	fp,sp,4
   18e14:	e13fff15 	stw	r4,-4(fp)
    ptcb = ptcb;                       /* Prevent compiler warning */
}
   18e18:	e037883a 	mov	sp,fp
   18e1c:	df000017 	ldw	fp,0(sp)
   18e20:	dec00104 	addi	sp,sp,4
   18e24:	f800283a 	ret

00018e28 <OSTaskDelHook>:
*
* Note(s)    : 1) Interrupts are disabled during this call.
*********************************************************************************************************
*/
void OSTaskDelHook (OS_TCB *ptcb)
{
   18e28:	defffe04 	addi	sp,sp,-8
   18e2c:	df000115 	stw	fp,4(sp)
   18e30:	df000104 	addi	fp,sp,4
   18e34:	e13fff15 	stw	r4,-4(fp)
    ptcb = ptcb;                       /* Prevent compiler warning                                     */
}
   18e38:	e037883a 	mov	sp,fp
   18e3c:	df000017 	ldw	fp,0(sp)
   18e40:	dec00104 	addi	sp,sp,4
   18e44:	f800283a 	ret

00018e48 <OSTaskSwHook>:
*                 will be 'switched in' (i.e. the highest priority task) and, 'OSTCBCur' points to the
*                 task being switched out (i.e. the preempted task).
*********************************************************************************************************
*/
void OSTaskSwHook (void)
{
   18e48:	deffff04 	addi	sp,sp,-4
   18e4c:	df000015 	stw	fp,0(sp)
   18e50:	d839883a 	mov	fp,sp
}
   18e54:	e037883a 	mov	sp,fp
   18e58:	df000017 	ldw	fp,0(sp)
   18e5c:	dec00104 	addi	sp,sp,4
   18e60:	f800283a 	ret

00018e64 <OSTaskStatHook>:
*
* Arguments  : none
*********************************************************************************************************
*/
void OSTaskStatHook (void)
{
   18e64:	deffff04 	addi	sp,sp,-4
   18e68:	df000015 	stw	fp,0(sp)
   18e6c:	d839883a 	mov	fp,sp
}
   18e70:	e037883a 	mov	sp,fp
   18e74:	df000017 	ldw	fp,0(sp)
   18e78:	dec00104 	addi	sp,sp,4
   18e7c:	f800283a 	ret

00018e80 <OSTimeTickHook>:
#ifdef ALT_INICHE
void cticks_hook(void);
#endif

void OSTimeTickHook (void)
{
   18e80:	deffff04 	addi	sp,sp,-4
   18e84:	df000015 	stw	fp,0(sp)
   18e88:	d839883a 	mov	fp,sp
    
#ifdef ALT_INICHE
    /* Service the Interniche timer */
    cticks_hook();
#endif
}
   18e8c:	e037883a 	mov	sp,fp
   18e90:	df000017 	ldw	fp,0(sp)
   18e94:	dec00104 	addi	sp,sp,4
   18e98:	f800283a 	ret

00018e9c <OSInitHookBegin>:

void OSInitHookBegin(void)
{
   18e9c:	deffff04 	addi	sp,sp,-4
   18ea0:	df000015 	stw	fp,0(sp)
   18ea4:	d839883a 	mov	fp,sp
#if OS_TMR_EN > 0
    OSTmrCtr = 0;
#endif
}
   18ea8:	e037883a 	mov	sp,fp
   18eac:	df000017 	ldw	fp,0(sp)
   18eb0:	dec00104 	addi	sp,sp,4
   18eb4:	f800283a 	ret

00018eb8 <OSInitHookEnd>:

void OSInitHookEnd(void)
{
   18eb8:	deffff04 	addi	sp,sp,-4
   18ebc:	df000015 	stw	fp,0(sp)
   18ec0:	d839883a 	mov	fp,sp
}
   18ec4:	e037883a 	mov	sp,fp
   18ec8:	df000017 	ldw	fp,0(sp)
   18ecc:	dec00104 	addi	sp,sp,4
   18ed0:	f800283a 	ret

00018ed4 <OSTaskIdleHook>:

void OSTaskIdleHook(void)
{
   18ed4:	deffff04 	addi	sp,sp,-4
   18ed8:	df000015 	stw	fp,0(sp)
   18edc:	d839883a 	mov	fp,sp
}
   18ee0:	e037883a 	mov	sp,fp
   18ee4:	df000017 	ldw	fp,0(sp)
   18ee8:	dec00104 	addi	sp,sp,4
   18eec:	f800283a 	ret

00018ef0 <OSTCBInitHook>:

void OSTCBInitHook(OS_TCB *ptcb)
{
   18ef0:	defffe04 	addi	sp,sp,-8
   18ef4:	df000115 	stw	fp,4(sp)
   18ef8:	df000104 	addi	fp,sp,4
   18efc:	e13fff15 	stw	r4,-4(fp)
}
   18f00:	e037883a 	mov	sp,fp
   18f04:	df000017 	ldw	fp,0(sp)
   18f08:	dec00104 	addi	sp,sp,4
   18f0c:	f800283a 	ret

00018f10 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
   18f10:	defffb04 	addi	sp,sp,-20
   18f14:	dfc00415 	stw	ra,16(sp)
   18f18:	df000315 	stw	fp,12(sp)
   18f1c:	df000304 	addi	fp,sp,12
   18f20:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
   18f24:	008000b4 	movhi	r2,2
   18f28:	10ae9304 	addi	r2,r2,-17844
   18f2c:	10800017 	ldw	r2,0(r2)
   18f30:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   18f34:	00003106 	br	18ffc <alt_find_file+0xec>
  {
    len = strlen(next->name);
   18f38:	e0bffd17 	ldw	r2,-12(fp)
   18f3c:	10800217 	ldw	r2,8(r2)
   18f40:	1009883a 	mov	r4,r2
   18f44:	00073240 	call	7324 <strlen>
   18f48:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
   18f4c:	e0bffd17 	ldw	r2,-12(fp)
   18f50:	10c00217 	ldw	r3,8(r2)
   18f54:	e0bffe17 	ldw	r2,-8(fp)
   18f58:	10bfffc4 	addi	r2,r2,-1
   18f5c:	1885883a 	add	r2,r3,r2
   18f60:	10800003 	ldbu	r2,0(r2)
   18f64:	10803fcc 	andi	r2,r2,255
   18f68:	1080201c 	xori	r2,r2,128
   18f6c:	10bfe004 	addi	r2,r2,-128
   18f70:	10800bd8 	cmpnei	r2,r2,47
   18f74:	1000031e 	bne	r2,zero,18f84 <alt_find_file+0x74>
    {
      len -= 1;
   18f78:	e0bffe17 	ldw	r2,-8(fp)
   18f7c:	10bfffc4 	addi	r2,r2,-1
   18f80:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   18f84:	e0bffe17 	ldw	r2,-8(fp)
   18f88:	e0ffff17 	ldw	r3,-4(fp)
   18f8c:	1885883a 	add	r2,r3,r2
   18f90:	10800003 	ldbu	r2,0(r2)
   18f94:	10803fcc 	andi	r2,r2,255
   18f98:	1080201c 	xori	r2,r2,128
   18f9c:	10bfe004 	addi	r2,r2,-128
   18fa0:	10800be0 	cmpeqi	r2,r2,47
   18fa4:	1000081e 	bne	r2,zero,18fc8 <alt_find_file+0xb8>
   18fa8:	e0bffe17 	ldw	r2,-8(fp)
   18fac:	e0ffff17 	ldw	r3,-4(fp)
   18fb0:	1885883a 	add	r2,r3,r2
   18fb4:	10800003 	ldbu	r2,0(r2)
   18fb8:	10803fcc 	andi	r2,r2,255
   18fbc:	1080201c 	xori	r2,r2,128
   18fc0:	10bfe004 	addi	r2,r2,-128
   18fc4:	10000a1e 	bne	r2,zero,18ff0 <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
   18fc8:	e0bffd17 	ldw	r2,-12(fp)
   18fcc:	10c00217 	ldw	r3,8(r2)
   18fd0:	e0bffe17 	ldw	r2,-8(fp)
   18fd4:	1809883a 	mov	r4,r3
   18fd8:	e17fff17 	ldw	r5,-4(fp)
   18fdc:	100d883a 	mov	r6,r2
   18fe0:	00192940 	call	19294 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   18fe4:	1000021e 	bne	r2,zero,18ff0 <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
   18fe8:	e0bffd17 	ldw	r2,-12(fp)
   18fec:	00000806 	br	19010 <alt_find_file+0x100>
    }
    next = (alt_dev*) next->llist.next;
   18ff0:	e0bffd17 	ldw	r2,-12(fp)
   18ff4:	10800017 	ldw	r2,0(r2)
   18ff8:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   18ffc:	e0fffd17 	ldw	r3,-12(fp)
   19000:	008000b4 	movhi	r2,2
   19004:	10ae9304 	addi	r2,r2,-17844
   19008:	18bfcb1e 	bne	r3,r2,18f38 <__alt_mem_Flash_flash_data+0xf4018f38>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
   1900c:	0005883a 	mov	r2,zero
}
   19010:	e037883a 	mov	sp,fp
   19014:	dfc00117 	ldw	ra,4(sp)
   19018:	df000017 	ldw	fp,0(sp)
   1901c:	dec00204 	addi	sp,sp,8
   19020:	f800283a 	ret

00019024 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
   19024:	defff904 	addi	sp,sp,-28
   19028:	dfc00615 	stw	ra,24(sp)
   1902c:	df000515 	stw	fp,20(sp)
   19030:	df000504 	addi	fp,sp,20
   19034:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
   19038:	00bffa04 	movi	r2,-24
   1903c:	e0bffc15 	stw	r2,-16(fp)
  /* 
   * Take the alt_fd_list_lock semaphore in order to avoid races when 
   * accessing the file descriptor pool.
   */
  
  ALT_SEM_PEND(alt_fd_list_lock, 0);
   19040:	008000b4 	movhi	r2,2
   19044:	10b68404 	addi	r2,r2,-9712
   19048:	10800017 	ldw	r2,0(r2)
   1904c:	e0bffd15 	stw	r2,-12(fp)
   19050:	e03ffe0d 	sth	zero,-8(fp)
   19054:	e0fffe0b 	ldhu	r3,-8(fp)
   19058:	e0bffe84 	addi	r2,fp,-6
   1905c:	e13ffd17 	ldw	r4,-12(fp)
   19060:	180b883a 	mov	r5,r3
   19064:	100d883a 	mov	r6,r2
   19068:	00133880 	call	13388 <OSSemPend>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   1906c:	e03ffb15 	stw	zero,-20(fp)
   19070:	00001d06 	br	190e8 <alt_get_fd+0xc4>
  {
    if (!alt_fd_list[i].dev)
   19074:	008000b4 	movhi	r2,2
   19078:	10a92f04 	addi	r2,r2,-23364
   1907c:	e0fffb17 	ldw	r3,-20(fp)
   19080:	18c00324 	muli	r3,r3,12
   19084:	10c5883a 	add	r2,r2,r3
   19088:	10800017 	ldw	r2,0(r2)
   1908c:	1000131e 	bne	r2,zero,190dc <alt_get_fd+0xb8>
    {
      alt_fd_list[i].dev = dev;
   19090:	008000b4 	movhi	r2,2
   19094:	10a92f04 	addi	r2,r2,-23364
   19098:	e0fffb17 	ldw	r3,-20(fp)
   1909c:	18c00324 	muli	r3,r3,12
   190a0:	10c5883a 	add	r2,r2,r3
   190a4:	e0ffff17 	ldw	r3,-4(fp)
   190a8:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
   190ac:	008000b4 	movhi	r2,2
   190b0:	10ae9704 	addi	r2,r2,-17828
   190b4:	10c00017 	ldw	r3,0(r2)
   190b8:	e0bffb17 	ldw	r2,-20(fp)
   190bc:	1880040e 	bge	r3,r2,190d0 <alt_get_fd+0xac>
      {
        alt_max_fd = i;
   190c0:	008000b4 	movhi	r2,2
   190c4:	10ae9704 	addi	r2,r2,-17828
   190c8:	e0fffb17 	ldw	r3,-20(fp)
   190cc:	10c00015 	stw	r3,0(r2)
      }
      rc = i;
   190d0:	e0bffb17 	ldw	r2,-20(fp)
   190d4:	e0bffc15 	stw	r2,-16(fp)
      goto alt_get_fd_exit;
   190d8:	00000606 	br	190f4 <alt_get_fd+0xd0>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   190dc:	e0bffb17 	ldw	r2,-20(fp)
   190e0:	10800044 	addi	r2,r2,1
   190e4:	e0bffb15 	stw	r2,-20(fp)
   190e8:	e0bffb17 	ldw	r2,-20(fp)
   190ec:	10800810 	cmplti	r2,r2,32
   190f0:	103fe01e 	bne	r2,zero,19074 <__alt_mem_Flash_flash_data+0xf4019074>
  /*
   * Release the alt_fd_list_lock semaphore now that we are done with the
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);
   190f4:	008000b4 	movhi	r2,2
   190f8:	10b68404 	addi	r2,r2,-9712
   190fc:	10800017 	ldw	r2,0(r2)
   19100:	1009883a 	mov	r4,r2
   19104:	001375c0 	call	1375c <OSSemPost>

  return rc;
   19108:	e0bffc17 	ldw	r2,-16(fp)
}
   1910c:	e037883a 	mov	sp,fp
   19110:	dfc00117 	ldw	ra,4(sp)
   19114:	df000017 	ldw	fp,0(sp)
   19118:	dec00204 	addi	sp,sp,8
   1911c:	f800283a 	ret

00019120 <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
   19120:	defffb04 	addi	sp,sp,-20
   19124:	df000415 	stw	fp,16(sp)
   19128:	df000404 	addi	fp,sp,16
   1912c:	e13ffe15 	stw	r4,-8(fp)
   19130:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
   19134:	e0bfff17 	ldw	r2,-4(fp)
   19138:	10840070 	cmpltui	r2,r2,4097
   1913c:	1000021e 	bne	r2,zero,19148 <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
   19140:	00840004 	movi	r2,4096
   19144:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
   19148:	e0fffe17 	ldw	r3,-8(fp)
   1914c:	e0bfff17 	ldw	r2,-4(fp)
   19150:	1885883a 	add	r2,r3,r2
   19154:	e0bffd15 	stw	r2,-12(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
   19158:	e0bffe17 	ldw	r2,-8(fp)
   1915c:	e0bffc15 	stw	r2,-16(fp)
   19160:	00000506 	br	19178 <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
   19164:	e0bffc17 	ldw	r2,-16(fp)
   19168:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
   1916c:	e0bffc17 	ldw	r2,-16(fp)
   19170:	10800804 	addi	r2,r2,32
   19174:	e0bffc15 	stw	r2,-16(fp)
   19178:	e0fffc17 	ldw	r3,-16(fp)
   1917c:	e0bffd17 	ldw	r2,-12(fp)
   19180:	18bff836 	bltu	r3,r2,19164 <__alt_mem_Flash_flash_data+0xf4019164>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
   19184:	e0bffe17 	ldw	r2,-8(fp)
   19188:	108007cc 	andi	r2,r2,31
   1918c:	10000226 	beq	r2,zero,19198 <alt_icache_flush+0x78>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
   19190:	e0bffc17 	ldw	r2,-16(fp)
   19194:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
   19198:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
   1919c:	e037883a 	mov	sp,fp
   191a0:	df000017 	ldw	fp,0(sp)
   191a4:	dec00104 	addi	sp,sp,4
   191a8:	f800283a 	ret

000191ac <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
   191ac:	defffe04 	addi	sp,sp,-8
   191b0:	df000115 	stw	fp,4(sp)
   191b4:	df000104 	addi	fp,sp,4
   191b8:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
   191bc:	e0bfff17 	ldw	r2,-4(fp)
   191c0:	10bffe84 	addi	r2,r2,-6
   191c4:	10c00428 	cmpgeui	r3,r2,16
   191c8:	18001a1e 	bne	r3,zero,19234 <alt_exception_cause_generated_bad_addr+0x88>
   191cc:	100690ba 	slli	r3,r2,2
   191d0:	008000b4 	movhi	r2,2
   191d4:	10a47904 	addi	r2,r2,-28188
   191d8:	1885883a 	add	r2,r3,r2
   191dc:	10800017 	ldw	r2,0(r2)
   191e0:	1000683a 	jmp	r2
   191e4:	00019224 	muli	zero,zero,1608
   191e8:	00019224 	muli	zero,zero,1608
   191ec:	00019234 	movhi	zero,1608
   191f0:	00019234 	movhi	zero,1608
   191f4:	00019234 	movhi	zero,1608
   191f8:	00019224 	muli	zero,zero,1608
   191fc:	0001922c 	andhi	zero,zero,1608
   19200:	00019234 	movhi	zero,1608
   19204:	00019224 	muli	zero,zero,1608
   19208:	00019224 	muli	zero,zero,1608
   1920c:	00019234 	movhi	zero,1608
   19210:	00019224 	muli	zero,zero,1608
   19214:	0001922c 	andhi	zero,zero,1608
   19218:	00019234 	movhi	zero,1608
   1921c:	00019234 	movhi	zero,1608
   19220:	00019224 	muli	zero,zero,1608
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
   19224:	00800044 	movi	r2,1
   19228:	00000306 	br	19238 <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
   1922c:	0005883a 	mov	r2,zero
   19230:	00000106 	br	19238 <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
   19234:	0005883a 	mov	r2,zero
  }
}
   19238:	e037883a 	mov	sp,fp
   1923c:	df000017 	ldw	fp,0(sp)
   19240:	dec00104 	addi	sp,sp,4
   19244:	f800283a 	ret

00019248 <atexit>:
   19248:	200b883a 	mov	r5,r4
   1924c:	000d883a 	mov	r6,zero
   19250:	0009883a 	mov	r4,zero
   19254:	000f883a 	mov	r7,zero
   19258:	00193101 	jmpi	19310 <__register_exitproc>

0001925c <exit>:
   1925c:	defffe04 	addi	sp,sp,-8
   19260:	000b883a 	mov	r5,zero
   19264:	dc000015 	stw	r16,0(sp)
   19268:	dfc00115 	stw	ra,4(sp)
   1926c:	2021883a 	mov	r16,r4
   19270:	00194240 	call	19424 <__call_exitprocs>
   19274:	008000b4 	movhi	r2,2
   19278:	10ae8d04 	addi	r2,r2,-17868
   1927c:	11000017 	ldw	r4,0(r2)
   19280:	20800f17 	ldw	r2,60(r4)
   19284:	10000126 	beq	r2,zero,1928c <exit+0x30>
   19288:	103ee83a 	callr	r2
   1928c:	8009883a 	mov	r4,r16
   19290:	00195b80 	call	195b8 <_exit>

00019294 <memcmp>:
   19294:	01c000c4 	movi	r7,3
   19298:	3980192e 	bgeu	r7,r6,19300 <memcmp+0x6c>
   1929c:	2144b03a 	or	r2,r4,r5
   192a0:	11c4703a 	and	r2,r2,r7
   192a4:	10000f26 	beq	r2,zero,192e4 <memcmp+0x50>
   192a8:	20800003 	ldbu	r2,0(r4)
   192ac:	28c00003 	ldbu	r3,0(r5)
   192b0:	10c0151e 	bne	r2,r3,19308 <memcmp+0x74>
   192b4:	31bfff84 	addi	r6,r6,-2
   192b8:	01ffffc4 	movi	r7,-1
   192bc:	00000406 	br	192d0 <memcmp+0x3c>
   192c0:	20800003 	ldbu	r2,0(r4)
   192c4:	28c00003 	ldbu	r3,0(r5)
   192c8:	31bfffc4 	addi	r6,r6,-1
   192cc:	10c00e1e 	bne	r2,r3,19308 <memcmp+0x74>
   192d0:	21000044 	addi	r4,r4,1
   192d4:	29400044 	addi	r5,r5,1
   192d8:	31fff91e 	bne	r6,r7,192c0 <__alt_mem_Flash_flash_data+0xf40192c0>
   192dc:	0005883a 	mov	r2,zero
   192e0:	f800283a 	ret
   192e4:	20c00017 	ldw	r3,0(r4)
   192e8:	28800017 	ldw	r2,0(r5)
   192ec:	1880041e 	bne	r3,r2,19300 <memcmp+0x6c>
   192f0:	31bfff04 	addi	r6,r6,-4
   192f4:	21000104 	addi	r4,r4,4
   192f8:	29400104 	addi	r5,r5,4
   192fc:	39bff936 	bltu	r7,r6,192e4 <__alt_mem_Flash_flash_data+0xf40192e4>
   19300:	303fe91e 	bne	r6,zero,192a8 <__alt_mem_Flash_flash_data+0xf40192a8>
   19304:	003ff506 	br	192dc <__alt_mem_Flash_flash_data+0xf40192dc>
   19308:	10c5c83a 	sub	r2,r2,r3
   1930c:	f800283a 	ret

00019310 <__register_exitproc>:
   19310:	008000b4 	movhi	r2,2
   19314:	defffa04 	addi	sp,sp,-24
   19318:	10ae8d04 	addi	r2,r2,-17868
   1931c:	dc000315 	stw	r16,12(sp)
   19320:	14000017 	ldw	r16,0(r2)
   19324:	dc400415 	stw	r17,16(sp)
   19328:	dfc00515 	stw	ra,20(sp)
   1932c:	80805217 	ldw	r2,328(r16)
   19330:	2023883a 	mov	r17,r4
   19334:	10003626 	beq	r2,zero,19410 <__register_exitproc+0x100>
   19338:	10c00117 	ldw	r3,4(r2)
   1933c:	010007c4 	movi	r4,31
   19340:	20c00e16 	blt	r4,r3,1937c <__register_exitproc+0x6c>
   19344:	1a400044 	addi	r9,r3,1
   19348:	8800211e 	bne	r17,zero,193d0 <__register_exitproc+0xc0>
   1934c:	18c00084 	addi	r3,r3,2
   19350:	18c7883a 	add	r3,r3,r3
   19354:	18c7883a 	add	r3,r3,r3
   19358:	12400115 	stw	r9,4(r2)
   1935c:	10c7883a 	add	r3,r2,r3
   19360:	19400015 	stw	r5,0(r3)
   19364:	0005883a 	mov	r2,zero
   19368:	dfc00517 	ldw	ra,20(sp)
   1936c:	dc400417 	ldw	r17,16(sp)
   19370:	dc000317 	ldw	r16,12(sp)
   19374:	dec00604 	addi	sp,sp,24
   19378:	f800283a 	ret
   1937c:	00800034 	movhi	r2,0
   19380:	10800004 	addi	r2,r2,0
   19384:	10002526 	beq	r2,zero,1941c <__register_exitproc+0x10c>
   19388:	01006404 	movi	r4,400
   1938c:	d9400015 	stw	r5,0(sp)
   19390:	d9800115 	stw	r6,4(sp)
   19394:	d9c00215 	stw	r7,8(sp)
   19398:	00000000 	call	0 <__alt_mem_SDRAM>
   1939c:	d9400017 	ldw	r5,0(sp)
   193a0:	d9800117 	ldw	r6,4(sp)
   193a4:	d9c00217 	ldw	r7,8(sp)
   193a8:	10001c26 	beq	r2,zero,1941c <__register_exitproc+0x10c>
   193ac:	80c05217 	ldw	r3,328(r16)
   193b0:	10000115 	stw	zero,4(r2)
   193b4:	02400044 	movi	r9,1
   193b8:	10c00015 	stw	r3,0(r2)
   193bc:	80805215 	stw	r2,328(r16)
   193c0:	10006215 	stw	zero,392(r2)
   193c4:	10006315 	stw	zero,396(r2)
   193c8:	0007883a 	mov	r3,zero
   193cc:	883fdf26 	beq	r17,zero,1934c <__alt_mem_Flash_flash_data+0xf401934c>
   193d0:	18d1883a 	add	r8,r3,r3
   193d4:	4211883a 	add	r8,r8,r8
   193d8:	1211883a 	add	r8,r2,r8
   193dc:	41802215 	stw	r6,136(r8)
   193e0:	01000044 	movi	r4,1
   193e4:	11806217 	ldw	r6,392(r2)
   193e8:	20c8983a 	sll	r4,r4,r3
   193ec:	310cb03a 	or	r6,r6,r4
   193f0:	11806215 	stw	r6,392(r2)
   193f4:	41c04215 	stw	r7,264(r8)
   193f8:	01800084 	movi	r6,2
   193fc:	89bfd31e 	bne	r17,r6,1934c <__alt_mem_Flash_flash_data+0xf401934c>
   19400:	11806317 	ldw	r6,396(r2)
   19404:	3108b03a 	or	r4,r6,r4
   19408:	11006315 	stw	r4,396(r2)
   1940c:	003fcf06 	br	1934c <__alt_mem_Flash_flash_data+0xf401934c>
   19410:	80805304 	addi	r2,r16,332
   19414:	80805215 	stw	r2,328(r16)
   19418:	003fc706 	br	19338 <__alt_mem_Flash_flash_data+0xf4019338>
   1941c:	00bfffc4 	movi	r2,-1
   19420:	003fd106 	br	19368 <__alt_mem_Flash_flash_data+0xf4019368>

00019424 <__call_exitprocs>:
   19424:	008000b4 	movhi	r2,2
   19428:	10ae8d04 	addi	r2,r2,-17868
   1942c:	10800017 	ldw	r2,0(r2)
   19430:	defff404 	addi	sp,sp,-48
   19434:	dd800815 	stw	r22,32(sp)
   19438:	d8800015 	stw	r2,0(sp)
   1943c:	10805204 	addi	r2,r2,328
   19440:	dd000615 	stw	r20,24(sp)
   19444:	dc800415 	stw	r18,16(sp)
   19448:	dfc00b15 	stw	ra,44(sp)
   1944c:	df000a15 	stw	fp,40(sp)
   19450:	ddc00915 	stw	r23,36(sp)
   19454:	dd400715 	stw	r21,28(sp)
   19458:	dcc00515 	stw	r19,20(sp)
   1945c:	dc400315 	stw	r17,12(sp)
   19460:	dc000215 	stw	r16,8(sp)
   19464:	2025883a 	mov	r18,r4
   19468:	2829883a 	mov	r20,r5
   1946c:	d8800115 	stw	r2,4(sp)
   19470:	05bfffc4 	movi	r22,-1
   19474:	d8800017 	ldw	r2,0(sp)
   19478:	14c05217 	ldw	r19,328(r2)
   1947c:	98001d26 	beq	r19,zero,194f4 <__call_exitprocs+0xd0>
   19480:	dd400117 	ldw	r21,4(sp)
   19484:	98800117 	ldw	r2,4(r19)
   19488:	173fffc4 	addi	fp,r2,-1
   1948c:	e0000d16 	blt	fp,zero,194c4 <__call_exitprocs+0xa0>
   19490:	14000044 	addi	r16,r2,1
   19494:	8421883a 	add	r16,r16,r16
   19498:	8421883a 	add	r16,r16,r16
   1949c:	84402004 	addi	r17,r16,128
   194a0:	9c63883a 	add	r17,r19,r17
   194a4:	9c21883a 	add	r16,r19,r16
   194a8:	a0001e26 	beq	r20,zero,19524 <__call_exitprocs+0x100>
   194ac:	80804017 	ldw	r2,256(r16)
   194b0:	15001c26 	beq	r2,r20,19524 <__call_exitprocs+0x100>
   194b4:	e73fffc4 	addi	fp,fp,-1
   194b8:	843fff04 	addi	r16,r16,-4
   194bc:	8c7fff04 	addi	r17,r17,-4
   194c0:	e5bff91e 	bne	fp,r22,194a8 <__alt_mem_Flash_flash_data+0xf40194a8>
   194c4:	00800034 	movhi	r2,0
   194c8:	10800004 	addi	r2,r2,0
   194cc:	10000926 	beq	r2,zero,194f4 <__call_exitprocs+0xd0>
   194d0:	98800117 	ldw	r2,4(r19)
   194d4:	1000311e 	bne	r2,zero,1959c <__call_exitprocs+0x178>
   194d8:	98800017 	ldw	r2,0(r19)
   194dc:	10003426 	beq	r2,zero,195b0 <__call_exitprocs+0x18c>
   194e0:	9809883a 	mov	r4,r19
   194e4:	a8800015 	stw	r2,0(r21)
   194e8:	00000000 	call	0 <__alt_mem_SDRAM>
   194ec:	acc00017 	ldw	r19,0(r21)
   194f0:	983fe41e 	bne	r19,zero,19484 <__alt_mem_Flash_flash_data+0xf4019484>
   194f4:	dfc00b17 	ldw	ra,44(sp)
   194f8:	df000a17 	ldw	fp,40(sp)
   194fc:	ddc00917 	ldw	r23,36(sp)
   19500:	dd800817 	ldw	r22,32(sp)
   19504:	dd400717 	ldw	r21,28(sp)
   19508:	dd000617 	ldw	r20,24(sp)
   1950c:	dcc00517 	ldw	r19,20(sp)
   19510:	dc800417 	ldw	r18,16(sp)
   19514:	dc400317 	ldw	r17,12(sp)
   19518:	dc000217 	ldw	r16,8(sp)
   1951c:	dec00c04 	addi	sp,sp,48
   19520:	f800283a 	ret
   19524:	98800117 	ldw	r2,4(r19)
   19528:	80c00017 	ldw	r3,0(r16)
   1952c:	10bfffc4 	addi	r2,r2,-1
   19530:	17001526 	beq	r2,fp,19588 <__call_exitprocs+0x164>
   19534:	80000015 	stw	zero,0(r16)
   19538:	183fde26 	beq	r3,zero,194b4 <__alt_mem_Flash_flash_data+0xf40194b4>
   1953c:	00800044 	movi	r2,1
   19540:	1708983a 	sll	r4,r2,fp
   19544:	98806217 	ldw	r2,392(r19)
   19548:	9dc00117 	ldw	r23,4(r19)
   1954c:	2084703a 	and	r2,r4,r2
   19550:	1000061e 	bne	r2,zero,1956c <__call_exitprocs+0x148>
   19554:	183ee83a 	callr	r3
   19558:	98800117 	ldw	r2,4(r19)
   1955c:	15ffc51e 	bne	r2,r23,19474 <__alt_mem_Flash_flash_data+0xf4019474>
   19560:	a8800017 	ldw	r2,0(r21)
   19564:	14ffd326 	beq	r2,r19,194b4 <__alt_mem_Flash_flash_data+0xf40194b4>
   19568:	003fc206 	br	19474 <__alt_mem_Flash_flash_data+0xf4019474>
   1956c:	98806317 	ldw	r2,396(r19)
   19570:	2084703a 	and	r2,r4,r2
   19574:	1000061e 	bne	r2,zero,19590 <__call_exitprocs+0x16c>
   19578:	89400017 	ldw	r5,0(r17)
   1957c:	9009883a 	mov	r4,r18
   19580:	183ee83a 	callr	r3
   19584:	003ff406 	br	19558 <__alt_mem_Flash_flash_data+0xf4019558>
   19588:	9f000115 	stw	fp,4(r19)
   1958c:	003fea06 	br	19538 <__alt_mem_Flash_flash_data+0xf4019538>
   19590:	89000017 	ldw	r4,0(r17)
   19594:	183ee83a 	callr	r3
   19598:	003fef06 	br	19558 <__alt_mem_Flash_flash_data+0xf4019558>
   1959c:	98800017 	ldw	r2,0(r19)
   195a0:	982b883a 	mov	r21,r19
   195a4:	1027883a 	mov	r19,r2
   195a8:	983fb61e 	bne	r19,zero,19484 <__alt_mem_Flash_flash_data+0xf4019484>
   195ac:	003fd106 	br	194f4 <__alt_mem_Flash_flash_data+0xf40194f4>
   195b0:	0005883a 	mov	r2,zero
   195b4:	003ffa06 	br	195a0 <__alt_mem_Flash_flash_data+0xf40195a0>

000195b8 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
   195b8:	defffd04 	addi	sp,sp,-12
   195bc:	df000215 	stw	fp,8(sp)
   195c0:	df000204 	addi	fp,sp,8
   195c4:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
   195c8:	008000b4 	movhi	r2,2
   195cc:	10b68c44 	addi	r2,r2,-9679
   195d0:	10000005 	stb	zero,0(r2)
   195d4:	e0bfff17 	ldw	r2,-4(fp)
   195d8:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
   195dc:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
   195e0:	10000226 	beq	r2,zero,195ec <_exit+0x34>
    ALT_SIM_FAIL();
   195e4:	002af070 	cmpltui	zero,zero,43969
   195e8:	00000106 	br	195f0 <_exit+0x38>
  } else {
    ALT_SIM_PASS();
   195ec:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
   195f0:	003fff06 	br	195f0 <__alt_mem_Flash_flash_data+0xf40195f0>
