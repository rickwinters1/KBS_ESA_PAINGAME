
KBS_ESA_PAINGAME.elf:     file format elf32-littlenios2
KBS_ESA_PAINGAME.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00000244

Program Header:
    LOAD off    0x00001000 vaddr 0x00000000 paddr 0x00000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00000020 paddr 0x00000020 align 2**12
         filesz 0x0001cde8 memsz 0x0001cde8 flags r-x
    LOAD off    0x0001de08 vaddr 0x0001ce08 paddr 0x0001ed5c align 2**12
         filesz 0x00001f54 memsz 0x00001f54 flags rw-
    LOAD off    0x00020cb0 vaddr 0x00020cb0 paddr 0x00020cb0 align 2**12
         filesz 0x00000000 memsz 0x0000fc24 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00000000  00000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000224  00000020  00000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         0001c3d0  00000244  00000244  00001244  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       000007f4  0001c614  0001c614  0001d614  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001f54  0001ce08  0001ed5c  0001de08  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          0000fc24  00020cb0  00020cb0  00020cb0  2**2
                  ALLOC, SMALL_DATA
  6 .SDRAM        00000000  000308d4  000308d4  0001fd5c  2**0
                  CONTENTS
  7 .Flash_flash_data 00000000  0c000000  0c000000  0001fd5c  2**0
                  CONTENTS
  8 .comment      00000023  00000000  00000000  0001fd5c  2**0
                  CONTENTS, READONLY
  9 .debug_aranges 00001150  00000000  00000000  0001fd80  2**3
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_info   00031c90  00000000  00000000  00020ed0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 0000ba2f  00000000  00000000  00052b60  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0000f343  00000000  00000000  0005e58f  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame  00003fbc  00000000  00000000  0006d8d4  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00005674  00000000  00000000  00071890  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    00016ed8  00000000  00000000  00076f04  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_alt_sim_info 00000020  00000000  00000000  0008dddc  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 000017f0  00000000  00000000  0008de00  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .thread_model 00000006  00000000  00000000  00095624  2**0
                  CONTENTS, READONLY
 19 .cpu          00000005  00000000  00000000  0009562a  2**0
                  CONTENTS, READONLY
 20 .qsys         00000001  00000000  00000000  0009562f  2**0
                  CONTENTS, READONLY
 21 .simulation_enabled 00000001  00000000  00000000  00095630  2**0
                  CONTENTS, READONLY
 22 .sysid_hash   00000004  00000000  00000000  00095631  2**0
                  CONTENTS, READONLY
 23 .sysid_base   00000004  00000000  00000000  00095635  2**0
                  CONTENTS, READONLY
 24 .sysid_time   00000004  00000000  00000000  00095639  2**0
                  CONTENTS, READONLY
 25 .stderr_dev   00000009  00000000  00000000  0009563d  2**0
                  CONTENTS, READONLY
 26 .stdin_dev    00000009  00000000  00000000  00095646  2**0
                  CONTENTS, READONLY
 27 .stdout_dev   00000009  00000000  00000000  0009564f  2**0
                  CONTENTS, READONLY
 28 .sopc_system_name 0000000b  00000000  00000000  00095658  2**0
                  CONTENTS, READONLY
 29 .quartus_project_dir 0000005e  00000000  00000000  00095663  2**0
                  CONTENTS, READONLY
 30 .jdi          0000abc5  00000000  00000000  000956c1  2**0
                  CONTENTS, READONLY
 31 .sopcinfo     001878b7  00000000  00000000  000a0286  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00000000 l    d  .entry	00000000 .entry
00000020 l    d  .exceptions	00000000 .exceptions
00000244 l    d  .text	00000000 .text
0001c614 l    d  .rodata	00000000 .rodata
0001ce08 l    d  .rwdata	00000000 .rwdata
00020cb0 l    d  .bss	00000000 .bss
000308d4 l    d  .SDRAM	00000000 .SDRAM
0c000000 l    d  .Flash_flash_data	00000000 .Flash_flash_data
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 C:/Users/rickert/Documents/GitHub/KBS_ESA_PAINGAME/KBS_ESA_PAINGAME_bsp//obj/HAL/src/crt0.o
0000027c l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 Contoller.c
00000000 l    df *ABS*	00000000 Game.c
000014dc l     F .text	00000054 nummer1
00001530 l     F .text	000000f4 nummer2
00001624 l     F .text	000000cc nummer3
000016f0 l     F .text	000000a4 nummer4
00001794 l     F .text	000000f4 nummer5
00001888 l     F .text	000000f4 nummer6
0000197c l     F .text	0000007c nummer7
000019f8 l     F .text	000000f4 nummer8
00001aec l     F .text	000000f4 nummer9
00001be0 l     F .text	000000cc nummer0
00000000 l    df *ABS*	00000000 Menu.c
00000000 l    df *ABS*	00000000 Singleplayer.c
00000000 l    df *ABS*	00000000 Tutorial.c
00000000 l    df *ABS*	00000000 hello_ucosii.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
0001c896 l     O .rodata	00000010 zeroes.4255
00005180 l     F .text	000000bc __sbprintf
0001c8a6 l     O .rodata	00000010 blanks.4254
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 dtoa.c
00005390 l     F .text	00000200 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
00006f4c l     F .text	00000008 __fp_lock
00006f54 l     F .text	00000008 __fp_unlock
00006f68 l     F .text	0000019c __sinit.part.1
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 impure.c
0001ce30 l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 locale.c
0001d274 l     O .rwdata	00000020 lc_ctype_charset
0001d254 l     O .rwdata	00000020 lc_message_charset
0001d294 l     O .rwdata	00000038 lconv
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mprec.c
0001c8d8 l     O .rodata	0000000c p05.2710
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 s_fpclassify.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 vfprintf.c
0000a3d8 l     F .text	000000fc __sprint_r.part.0
0001ca0c l     O .rodata	00000010 blanks.4199
0001c9fc l     O .rodata	00000010 zeroes.4200
0000b7e0 l     F .text	000000bc __sbprintf
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fputwc.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 wcrtomb.c
00000000 l    df *ABS*	00000000 wctomb_r.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
0000cce4 l     F .text	0000006c udivmodsi4
00000000 l    df *ABS*	00000000 adddf3.c
00000000 l    df *ABS*	00000000 divdf3.c
00000000 l    df *ABS*	00000000 eqdf2.c
00000000 l    df *ABS*	00000000 gedf2.c
00000000 l    df *ABS*	00000000 ledf2.c
00000000 l    df *ABS*	00000000 muldf3.c
00000000 l    df *ABS*	00000000 subdf3.c
00000000 l    df *ABS*	00000000 fixdfsi.c
00000000 l    df *ABS*	00000000 floatsidf.c
00000000 l    df *ABS*	00000000 floatunsidf.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 alt_close.c
0000f410 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
0000f530 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
0000f55c l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
0000f65c l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
0000f750 l     F .text	00000064 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
0000f834 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_read.c
0000fa2c l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
0001ecd0 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_write.c
0000fc88 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_env_lock.c
0001ecd4 l     O .rwdata	00000004 lockid
00020d48 l     O .bss	00000004 locks
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
0001ecd8 l     O .rwdata	00000004 lockid
00020d50 l     O .bss	00000004 locks
00000000 l    df *ABS*	00000000 os_core.c
000116bc l     F .text	00000044 OS_InitMisc
00011700 l     F .text	00000068 OS_InitRdyList
00011860 l     F .text	000000e0 OS_InitTCBList
000115e0 l     F .text	000000dc OS_InitEventList
00011768 l     F .text	0000007c OS_InitTaskIdle
000117e4 l     F .text	0000007c OS_InitTaskStat
00011ac0 l     F .text	00000070 OS_SchedNew
00000000 l    df *ABS*	00000000 os_dbg.c
00000000 l    df *ABS*	00000000 os_flag.c
000138c4 l     F .text	00000110 OS_FlagTaskRdy
0001361c l     F .text	000001c4 OS_FlagBlock
00000000 l    df *ABS*	00000000 os_mbox.c
00000000 l    df *ABS*	00000000 os_mem.c
00000000 l    df *ABS*	00000000 os_q.c
00000000 l    df *ABS*	00000000 os_sem.c
00000000 l    df *ABS*	00000000 os_task.c
00000000 l    df *ABS*	00000000 os_time.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
000188f4 l     F .text	00000038 alt_dev_reg
0001d87c l     O .rwdata	0000106c JTAG_UART
0001e8e8 l     O .rwdata	00000030 AV_Config
0001e918 l     O .rwdata	00000030 Audio_Subsystem_Audio
0001e948 l     O .rwdata	0000002c Char_LCD_16x2
0001e974 l     O .rwdata	0000002c IrDA
0001e9a0 l     O .rwdata	0000002c Expansion_JP5
0001e9cc l     O .rwdata	0000002c Green_LEDs
0001e9f8 l     O .rwdata	0000002c HEX3_HEX0
0001ea24 l     O .rwdata	0000002c HEX7_HEX4
0001ea50 l     O .rwdata	0000002c Pushbuttons
0001ea7c l     O .rwdata	0000002c Red_LEDs
0001eaa8 l     O .rwdata	0000002c Slider_Switches
0001ead4 l     O .rwdata	00000038 PS2_Port
0001eb0c l     O .rwdata	00000038 PS2_Port_Dual
0001eb44 l     O .rwdata	0000002c Serial_Port
0001eb70 l     O .rwdata	00000034 USB
0001eba4 l     O .rwdata	00000048 VGA_Subsystem_VGA_Char_Buffer
0001ebec l     O .rwdata	00000054 VGA_Subsystem_VGA_Pixel_DMA
0001ec40 l     O .rwdata	0000002c SD_Card
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
00018fdc l     F .text	000002a8 altera_avalon_jtag_uart_irq
00019284 l     F .text	00000110 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
00019a5c l     F .text	00000078 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 altera_up_avalon_character_lcd.c
00000000 l    df *ABS*	00000000 altera_up_avalon_irda.c
00000000 l    df *ABS*	00000000 altera_up_avalon_parallel_port.c
00000000 l    df *ABS*	00000000 altera_up_avalon_ps2.c
00000000 l    df *ABS*	00000000 altera_up_avalon_rs232.c
00000000 l    df *ABS*	00000000 altera_up_avalon_video_character_buffer_with_dma.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
0001b278 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
0001b4e4 l     F .text	000000c0 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_register.c
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
0001b7cc l     F .text	00000050 alt_get_errno
0001b81c l     F .text	000000cc alt_file_locked
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 os_cpu_a.o
00000040 l       *ABS*	00000000 OSCtxSw_SWITCH_PC
00000000 l    df *ABS*	00000000 os_cpu_c.c
00000014 l       *ABS*	00000000 OSTCBNext_OFFSET
00000032 l       *ABS*	00000000 OSTCBPrio_OFFSET
00000000 l       *ABS*	00000000 OSTCBStkPtr_OFFSET
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
00020db4 g     O .bss	00000004 alt_instruction_exception_handler
00009a50 g     F .text	00000074 _mprec_log10
0001ed26 g     O .rwdata	00000002 OSTaskNameSize
00009b3c g     F .text	0000008c __any_on
0000bd4c g     F .text	00000054 _isatty_r
0001c8e4 g     O .rodata	00000028 __mprec_tinytens
0000f958 g     F .text	000000d4 alt_main
000030b8 g     F .text	000000a8 _puts_r
000307d4 g     O .bss	00000100 alt_irq
0001a638 g     F .text	0000005c alt_up_ps2_disable_read_interrupt
0000bda0 g     F .text	0000005c _lseek_r
00014cb0 g     F .text	000000d0 OS_MemInit
0001ed5c g       *ABS*	00000000 __flash_rwdata_start
00018890 g     F .text	00000064 OSTimeSet
00019bc8 g     F .text	0000003c alt_up_character_lcd_send_cmd
0000df78 g     F .text	00000084 .hidden __eqdf2
00010338 g     F .text	00000610 OSEventPendMulti
000308d4 g       *ABS*	00000000 __alt_heap_start
0001be28 g     F .text	00000020 OSTaskCreateHook
0000307c g     F .text	0000003c printf
0001ecfe g     O .rwdata	00000002 OSMboxEn
00020cd8 g     O .bss	00000004 random
0001099c g     F .text	0000007c OSIntEnter
0000bfac g     F .text	0000009c _wcrtomb_r
0000a2d0 g     F .text	0000005c __sseek
0000729c g     F .text	00000010 __sinit
0001afc0 g     F .text	00000100 alt_up_char_buffer_string
0000be58 g     F .text	00000138 __swbuf_r
0001a458 g     F .text	00000034 read_CE_bit
0001ed0e g     O .rwdata	00000002 OSQEn
00007d48 g     F .text	0000007c _setlocale_r
00007104 g     F .text	00000068 __sfmoreglue
0001000c g     F .text	000000d0 __malloc_unlock
0001be84 g     F .text	0000001c OSTaskStatHook
0001a7dc g     F .text	000000a4 alt_up_ps2_read_data_byte_timeout
0001acd0 g     F .text	00000090 alt_up_rs232_read_fd
00020d58 g     O .bss	00000001 OSLockNesting
00001d20 g     F .text	000000ec menu
0001ed4c g     O .rwdata	00000002 OSDataSize
00020d59 g     O .bss	00000001 OSRunning
0001aef4 g     F .text	000000cc alt_up_char_buffer_draw
00020de0 g     O .bss	00002000 Singleplayer_stk
00020cb0 g     O .bss	00000004 counter3
000089a8 g     F .text	0000015c memmove
0001bebc g     F .text	0000001c OSInitHookBegin
0001ed44 g     O .rwdata	00000002 OSTmrSize
00007284 g     F .text	00000018 _cleanup
00008c28 g     F .text	000000a8 _Balloc
0001ec78 g     O .rwdata	00000004 gameModeMenu
00020d5c g     O .bss	00000004 OSIdleCtr
0000dffc g     F .text	000000e0 .hidden __gtdf2
0001ec80 g     O .rwdata	00000004 xRechts
0001bbdc g     F .text	00000020 altera_nios2_gen2_irq_init
0001bca8 g       .text	00000000 OSStartTsk
00000000  w      *UND*	00000000 __errno
00019b54 g     F .text	00000074 get_DDRAM_addr
00011df8 g     F .text	000002d4 OS_TCBInit
0001ec90 g     O .rwdata	00000004 yMenu
00000000 g     F .entry	0000001c __reset
0001ed4a g     O .rwdata	00000002 OSTmrWheelTblSize
00000020 g       *ABS*	00000000 __flash_exceptions_start
0001ecea g     O .rwdata	00000002 OSEventSize
00020d60 g     O .bss	00000001 OSPrioHighRdy
0000bcf4 g     F .text	00000058 _fstat_r
0001be48 g     F .text	00000020 OSTaskDelHook
00020d34 g     O .bss	00000004 errno
0000a24c g     F .text	00000008 __seofread
0001bc88 g       .text	00000000 OSStartHighRdy
00020cdc g     O .bss	00000004 pixel_buffer_y
00017194 g     F .text	000001ec OSTaskCreateExt
00013168 g     F .text	00000068 OSFlagPendGetFlagsRdy
0001ed2a g     O .rwdata	00000002 OSTaskStatStkSize
00012258 g     F .text	00000308 OSFlagAccept
00015384 g     F .text	000000b8 OSQFlush
00014d80 g     F .text	00000140 OSQAccept
00020d40 g     O .bss	00000004 alt_argv
00020ce0 g     O .bss	00000004 score1
00026c6c g       *ABS*	00000000 _gp
00016fd8 g     F .text	000001bc OSTaskCreate
00016a98 g     F .text	00000540 OSTaskChangePrio
00020d54 g     O .bss	00000004 alt_heapsem
00002894 g     F .text	0000003c del_middenlijn
000120cc g     F .text	0000018c OSDebugInit
00017380 g     F .text	000003e0 OSTaskDel
0001ec84 g     O .rwdata	00000004 xBoven
0001d6fc g     O .rwdata	00000180 alt_fd_list
0001ec98 g     O .rwdata	00000004 onePress
0002d5b0 g     O .bss	00000370 OSFlagTbl
000113cc g     F .text	000000b4 OS_EventTaskRemove
0001b424 g     F .text	00000090 alt_find_dev
00008870 g     F .text	00000138 memcpy
0001ed14 g     O .rwdata	00000002 OSRdyTblSize
00019d64 g     F .text	00000050 alt_up_character_lcd_write_fd
0001b0c0 g     F .text	0000005c alt_up_char_buffer_clear
00006f5c g     F .text	0000000c _cleanup_r
0000f238 g     F .text	000000d0 .hidden __floatsidf
0001b5a4 g     F .text	00000078 alt_io_redirect
0000e0dc g     F .text	000000e0 .hidden __ltdf2
0001c614 g       *ABS*	00000000 __DTOR_END__
0001a2e4 g     F .text	00000090 alt_up_irda_write_fd
0001ac5c g     F .text	00000074 alt_up_rs232_read_data
00003160 g     F .text	00000014 puts
0001c1cc g     F .text	0000009c alt_exception_cause_generated_bad_addr
000100dc g     F .text	00000120 OSEventNameGet
0001ecf8 g     O .rwdata	00000002 OSFlagMax
0000a130 g     F .text	00000074 __fpclassifyd
00020d0c g     O .bss	00000004 last
000099ac g     F .text	000000a4 __ratio
00010a18 g     F .text	000000f4 OSIntExit
0000b7bc g     F .text	00000024 __vfiprintf_internal
0001ed32 g     O .rwdata	00000002 OSTCBSize
00020d61 g     O .bss	00000001 OSPrioCur
0001a0e0 g     F .text	00000040 alt_up_irda_get_used_space_in_read_FIFO
000194e8 g     F .text	000002b4 altera_avalon_jtag_uart_read
00000000  w      *UND*	00000000 malloc
00003050 g     F .text	0000002c _printf_r
0000ce00 g     F .text	00000008 .hidden __udivsi3
0000f6ac g     F .text	000000a4 isatty
0001ed18 g     O .rwdata	00000002 OSStkWidth
0001c934 g     O .rodata	000000c8 __mprec_tens
0001ed0c g     O .rwdata	00000002 OSPtrSize
00007dc4 g     F .text	0000000c __locale_charset
0001ecec g     O .rwdata	00000002 OSEventTblSize
0001a084 g     F .text	0000005c alt_up_irda_disable_read_interrupt
0001ec8c g     O .rwdata	00000004 xMenu
0001bbfc g       .text	00000000 OSCtxSw
0001c140 g     F .text	0000008c alt_icache_flush
00020d30 g     O .bss	00000004 __malloc_top_pad
00000688 g     F .text	00000104 moveDown
00020d64 g     O .bss	00000004 OSTCBList
00020cb4 g     O .bss	00000004 gpio_dev
0001ec74 g     O .rwdata	00000004 leven
00020d38 g     O .bss	00000004 alt_fd_list_lock
0001eca8 g     O .rwdata	00000004 __mb_cur_max
00007df4 g     F .text	0000000c _localeconv_r
00009034 g     F .text	0000003c __i2b
00007700 g     F .text	000004c0 __sfvwrite_r
0002d920 g     O .bss	00000c30 OSMemTbl
00020d68 g     O .bss	00000001 OSTickStepState
0000a1a4 g     F .text	00000054 _sbrk_r
00022de0 g     O .bss	00002000 menu_stk
0001ed10 g     O .rwdata	00000002 OSQMax
0002e550 g     O .bss	00000800 OSTaskStatStk
000148e0 g     F .text	000000f8 OSMemNameGet
0001ecf0 g     O .rwdata	00000002 OSFlagEn
0000bdfc g     F .text	0000005c _read_r
0001ed36 g     O .rwdata	00000002 OSTimeTickHookEn
000158a4 g     F .text	00000168 OSQPost
000139d4 g     F .text	000000a0 OS_FlagUnlink
0001ecc8 g     O .rwdata	00000004 alt_max_fd
0001abd8 g     F .text	00000044 alt_up_rs232_check_parity
00011990 g     F .text	00000064 OS_MemCopy
000119f4 g     F .text	000000cc OS_Sched
0000ba10 g     F .text	000000f0 _fclose_r
000147f0 g     F .text	000000f0 OSMemGet
000144ec g     F .text	00000110 OSMboxQuery
00017a60 g     F .text	000001c0 OSTaskNameSet
0001a48c g     F .text	00000030 read_num_bytes_available
00006f1c g     F .text	00000030 fflush
00020d2c g     O .bss	00000004 __malloc_max_sbrked_mem
00020d6c g     O .bss	00000004 OSCtxSwCtr
0001bea0 g     F .text	0000001c OSTimeTickHook
0001b61c g     F .text	000001b0 alt_irq_register
0001ecfa g     O .rwdata	00000002 OSFlagNameSize
0001a3f4 g     F .text	00000034 read_RI_bit
00011480 g     F .text	000000fc OS_EventTaskRemoveMulti
00020cb8 g     O .bss	00000004 controllerSem
0000ce10 g     F .text	0000089c .hidden __adddf3
00011280 g     F .text	0000014c OS_EventTaskWaitMulti
00009754 g     F .text	0000011c __b2d
0001ed12 g     O .rwdata	00000002 OSQSize
0000c754 g     F .text	00000590 .hidden __umoddi3
0000f884 g     F .text	000000d4 lseek
000163a8 g     F .text	00000268 OSSemPend
0001eca0 g     O .rwdata	00000004 _global_impure_ptr
00009bc8 g     F .text	00000568 _realloc_r
00020d08 g     O .bss	00000004 vorige
0001ecfc g     O .rwdata	00000002 OSLowestPrio
000308d4 g       *ABS*	00000000 __bss_end
0001bf10 g     F .text	00000020 OSTCBInitHook
0001ed42 g     O .rwdata	00000002 OSTmrCfgTicksPerSec
0001bad8 g     F .text	00000104 alt_tick
00014280 g     F .text	00000110 OSMboxPost
00020cbc g     O .bss	00000004 counter1
0000c194 g     F .text	000005c0 .hidden __udivdi3
0000bb14 g     F .text	00000184 _fputwc_r
0001ece4 g     O .rwdata	00000002 OSEventEn
0001c90c g     O .rodata	00000028 __mprec_bigtens
00008e18 g     F .text	00000104 __s2b
0001ed3e g     O .rwdata	00000002 OSTmrCfgNameSize
0000f308 g     F .text	000000a4 .hidden __floatunsidf
000094fc g     F .text	00000060 __mcmp
0c000000 g       *ABS*	00000000 __alt_mem_Flash_flash_data
0001a4f0 g     F .text	0000002c read_data_byte
000072bc g     F .text	00000018 __fp_lock_all
000137e0 g     F .text	000000e4 OS_FlagInit
0001ba40 g     F .text	00000098 alt_alarm_stop
00020cc0 g     O .bss	00000004 Flags_Games
0001a428 g     F .text	00000030 read_RE_bit
0001ed20 g     O .rwdata	00000002 OSTaskIdleStkSize
00020da8 g     O .bss	00000004 alt_irq_active
00015f90 g     F .text	000000b0 OSSemAccept
0000279c g     F .text	00000090 VGA_text
00014af0 g     F .text	000000d8 OSMemPut
00020ce4 g     O .bss	00000004 pixel_buffer_x
000145fc g     F .text	000001f4 OSMemCreate
00020d70 g     O .bss	00000004 OSIdleCtrMax
00024de0 g     O .bss	00002000 controller1_stk
0001a120 g     F .text	0000003c alt_up_irda_get_available_space_in_write_FIFO
000000fc g     F .exceptions	000000d4 alt_irq_handler
0001d6d4 g     O .rwdata	00000028 alt_dev_null
0001ed34 g     O .rwdata	00000002 OSTicksPerSec
00019ff8 g     F .text	00000034 alt_up_character_lcd_cursor_blink_on
0001a3b4 g     F .text	00000040 alt_up_parallel_port_open_dev
0001bbfc g       .text	00000000 OSIntCtxSw
0001a694 g     F .text	00000074 alt_up_ps2_write_data_byte
00000e3c g     F .text	0000017c endGame
0001b25c g     F .text	0000001c alt_dcache_flush_all
00008f1c g     F .text	00000068 __hi0bits
0000f1b0 g     F .text	00000088 .hidden __fixdfsi
00020d74 g     O .bss	00000004 OSTCBFreeList
0001ed5c g       *ABS*	00000000 __ram_rwdata_end
00016610 g     F .text	0000016c OSSemPendAbort
0001ecc0 g     O .rwdata	00000008 alt_dev_list
0000fcd8 g     F .text	000000f8 write
0001ed38 g     O .rwdata	00000002 OSVersionNbr
0001ce08 g       *ABS*	00000000 __ram_rodata_end
0000f5ac g     F .text	000000b0 fstat
0001ad60 g     F .text	00000094 alt_up_rs232_write_fd
00001e0c g     F .text	000003b8 selecteerMenu
00000000 g       *ABS*	00000000 __alt_mem_SDRAM
0000e0dc g     F .text	000000e0 .hidden __ledf2
0001ece0 g     O .rwdata	00000004 OSEndiannessTest
0000926c g     F .text	00000140 __pow5mult
0000a4ec g     F .text	000012d0 ___vfiprintf_internal_r
00020d24 g     O .bss	00000004 __nlocale_changed
0000ce08 g     F .text	00000008 .hidden __umodsi3
0001ecf2 g     O .rwdata	00000002 OSFlagGrpSize
00000280 g     F .text	0000011c controllers
000308d4 g       *ABS*	00000000 end
0001a9d0 g     F .text	00000098 alt_up_ps2_write_fd
0001a15c g     F .text	00000044 alt_up_irda_check_parity
0001ae34 g     F .text	00000080 alt_up_char_buffer_init
0001ce08 g     O .rwdata	00000028 nummer
00002384 g     F .text	00000168 teken_menu
00018e9c g     F .text	00000140 altera_avalon_jtag_uart_init
00011c54 g     F .text	000000dc OS_TaskStat
000001d0 g     F .exceptions	00000074 alt_instruction_exception_entry
0000078c g     F .text	0000048c Game
0001ec70 g     O .rwdata	00000004 check
0001c614 g       *ABS*	00000000 __CTOR_LIST__
04000000 g       *ABS*	00000000 __alt_stack_pointer
00019ad4 g     F .text	00000080 alt_avalon_timer_sc_init
0000f3ac g     F .text	00000064 .hidden __clzsi2
0001979c g     F .text	000002c0 altera_avalon_jtag_uart_write
000072ac g     F .text	00000004 __sfp_lock_acquire
00001cac g     F .text	00000074 exec
00008788 g     F .text	000000e8 memchr
00011940 g     F .text	00000050 OS_MemClr
00019c78 g     F .text	00000078 alt_up_character_lcd_write
0000320c g     F .text	00001f50 ___vfprintf_internal_r
0001bccc g     F .text	0000015c OSTaskStkInit
00007410 g     F .text	000002f0 _free_r
00007dd0 g     F .text	00000010 __locale_mb_cur_max
00010fdc g     F .text	00000198 OS_EventTaskRdy
0001c444 g     F .text	00000194 __call_exitprocs
00020d78 g     O .bss	00000001 OSCPUUsage
00020d20 g     O .bss	00000004 __mlocale_changed
0001ecac g     O .rwdata	00000004 __malloc_sbrk_base
00000244 g     F .text	0000003c _start
00002940 g     F .text	0000003c deleteNummer
00020dac g     O .bss	00000004 _alt_tick_rate
0001543c g     F .text	000002fc OSQPend
0001838c g     F .text	00000148 OSTimeDly
00026de0 g     O .bss	00002000 controller2_stk
000093ac g     F .text	00000150 __lshift
00020db0 g     O .bss	00000004 _alt_nticks
0000fa7c g     F .text	000000fc read
00018960 g     F .text	000003d8 alt_sys_init
00019eb0 g     F .text	00000088 alt_up_character_lcd_shift_display
0001c330 g     F .text	00000114 __register_exitproc
00020d79 g     O .bss	00000001 OSTaskCtr
0001a8f0 g     F .text	00000054 alt_up_ps2_clear_fifo
0001ab9c g     F .text	0000003c alt_up_rs232_get_available_space_in_write_FIFO
00020ce8 g     O .bss	00000004 score2
00020cc4 g     O .bss	00000004 MailBox2
000026e8 g     F .text	000000b4 VGA_box
000184d4 g     F .text	00000168 OSTimeDlyHMSM
000010f0 g     F .text	000003ec Singleplayer
00009070 g     F .text	000001fc __multiply
00019f38 g     F .text	0000008c alt_up_character_lcd_erase_pos
00019394 g     F .text	00000068 altera_avalon_jtag_uart_close
0001ce08 g       *ABS*	00000000 __ram_rwdata_start
0001c614 g       *ABS*	00000000 __ram_rodata_start
00020db8 g     O .bss	00000028 __malloc_current_mallinfo
0001ece6 g     O .rwdata	00000002 OSEventMax
00009870 g     F .text	0000013c __d2b
0001677c g     F .text	00000110 OSSemPost
00010b94 g     F .text	000000d8 OSSchedUnlock
0000282c g     F .text	00000068 draw_middenlijn
00018d38 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
0001c044 g     F .text	000000fc alt_get_fd
00020d7c g     O .bss	00000004 OSMemFreeList
00010cd8 g     F .text	000000ac OSStatInit
00013558 g     F .text	000000c4 OSFlagQuery
0001ed1c g     O .rwdata	00000002 OSTaskCreateExtEn
0000b8f8 g     F .text	00000054 _close_r
0001c2b4 g     F .text	0000007c memcmp
00010fc0 g     F .text	0000001c OS_Dummy
00018df8 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
000308d4 g       *ABS*	00000000 __alt_stack_base
00018e48 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
00020d10 g     O .bss	00000004 changed
0001a02c g     F .text	00000058 alt_up_irda_enable_read_interrupt
0000523c g     F .text	00000154 __swsetup_r
0002ed50 g     O .bss	000001e0 OSQTbl
0000039c g     F .text	000001a0 controller
0000d6ac g     F .text	000008cc .hidden __divdf3
0000716c g     F .text	00000118 __sfp
00009ac4 g     F .text	00000078 __copybits
0001d2cc g     O .rwdata	00000408 __malloc_av_
00020cec g     O .bss	00000004 ALT_y
000072b8 g     F .text	00000004 __sinit_lock_release
00020d80 g     O .bss	00000004 OSTCBHighRdy
0000e1bc g     F .text	00000724 .hidden __muldf3
0000a1f8 g     F .text	00000054 __sread
00020d84 g     O .bss	00000004 OSQFreeList
0001ab00 g     F .text	0000005c alt_up_rs232_disable_read_interrupt
0001bf30 g     F .text	00000114 alt_find_file
0001b2c8 g     F .text	000000a4 alt_dev_llist_insert
0000feec g     F .text	00000120 __malloc_lock
0000fbd8 g     F .text	000000b0 sbrk
00020cf0 g     O .bss	00000004 ALT_inc_y
000101fc g     F .text	0000013c OSEventNameSet
00006ec0 g     F .text	0000005c _fflush_r
0000b94c g     F .text	000000c4 _calloc_r
00020d88 g     O .bss	00000001 OSRdyGrp
00020cb0 g       *ABS*	00000000 __bss_start
00008b04 g     F .text	00000124 memset
000024ec g     F .text	000001fc main
00020d44 g     O .bss	00000004 alt_envp
00020d28 g     O .bss	00000004 __malloc_max_total_mem
0001aeb4 g     F .text	00000040 alt_up_char_buffer_open_dev
00018d98 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
0000bf90 g     F .text	0000001c __swbuf
0001cb38 g     O .rodata	00000100 OSUnMapTbl
0001ed16 g     O .rwdata	00000002 OSSemEn
00019e28 g     F .text	00000088 alt_up_character_lcd_shift_cursor
000131d0 g     F .text	00000388 OSFlagPost
0000a32c g     F .text	00000008 __sclose
04000000 g       *ABS*	00000000 __alt_heap_limit
0000bb00 g     F .text	00000014 fclose
00011174 g     F .text	0000010c OS_EventTaskWait
0001a880 g     F .text	00000070 alt_up_ps2_read_data_byte
00020d18 g     O .bss	00000004 timeout
00011d30 g     F .text	000000c8 OS_TaskStatStkChk
00017760 g     F .text	00000158 OSTaskDelReq
00005590 g     F .text	00001728 _dtoa_r
00007fe0 g     F .text	000007a8 _malloc_r
0000c108 g     F .text	00000030 __ascii_wctomb
0001eccc g     O .rwdata	00000004 alt_errno
00010c6c g     F .text	0000006c OSStart
0000fe90 g     F .text	0000005c __env_unlock
00007bc0 g     F .text	000000c4 _fwalk
00017c20 g     F .text	000001f8 OSTaskResume
00014bc8 g     F .text	000000e8 OSMemQuery
0001ed28 g     O .rwdata	00000002 OSTaskStatEn
00028de0 g     O .bss	00002000 Game_stk
0001a1a0 g     F .text	00000040 alt_up_irda_write_data
0001ed02 g     O .rwdata	00000002 OSMemMax
00015a0c g     F .text	00000170 OSQPostFront
0001aa68 g     F .text	00000040 alt_up_ps2_open_dev
0000cd50 g     F .text	00000054 .hidden __divsi3
00020d89 g     O .bss	00000003 OSRdyTbl
0001ecdc g     O .rwdata	00000002 OSDebugEn
00019c38 g     F .text	00000040 alt_up_character_lcd_open_dev
000072ec g     F .text	00000124 _malloc_trim_r
0001a5e0 g     F .text	00000058 alt_up_ps2_enable_read_interrupt
0001c614 g       *ABS*	00000000 __CTOR_END__
0001ecf4 g     O .rwdata	00000002 OSFlagNodeSize
0001ed3c g     O .rwdata	00000002 OSTmrCfgMax
00019c04 g     F .text	00000034 alt_up_character_lcd_init
0000a334 g     F .text	000000a4 strcmp
00014ec0 g     F .text	000001fc OSQCreate
000178b8 g     F .text	000001a8 OSTaskNameGet
0001c614 g       *ABS*	00000000 __flash_rodata_start
00015b7c g     F .text	0000020c OSQPostOpt
00010d84 g     F .text	0000021c OSTimeTick
0001ed24 g     O .rwdata	00000002 OSTaskMax
0001c614 g       *ABS*	00000000 __DTOR_LIST__
00016040 g     F .text	00000100 OSSemCreate
0001ed48 g     O .rwdata	00000002 OSTmrWheelSize
0001adf4 g     F .text	00000040 alt_up_rs232_open_dev
00020cf4 g     O .bss	00000004 gameSem
0000df78 g     F .text	00000084 .hidden __nedf2
0001ed1e g     O .rwdata	00000002 OSTaskDelEn
0001688c g     F .text	00000110 OSSemQuery
000150bc g     F .text	000002c8 OSQDel
00015738 g     F .text	0000016c OSQPendAbort
0001892c g     F .text	00000034 alt_irq_init
0000fb78 g     F .text	00000060 alt_release_fd
0000053c g     F .text	0000004c checkID
0001a4bc g     F .text	00000034 read_data_valid
00019fc4 g     F .text	00000034 alt_up_character_lcd_cursor_off
0001ca1c g     O .rodata	00000100 .hidden __clz_tab
00020d1c g     O .bss	00000004 _PathLocale
0001a778 g     F .text	00000064 alt_up_ps2_write_data_byte_with_ack
0001c268 g     F .text	00000014 atexit
000028d0 g     F .text	00000070 del_number
0000b89c g     F .text	0000005c _write_r
00010b0c g     F .text	00000088 OSSchedLock
00007e00 g     F .text	0000001c setlocale
00012560 g     F .text	00000128 OSFlagCreate
0001eca4 g     O .rwdata	00000004 _impure_ptr
00020d3c g     O .bss	00000004 alt_argc
00006cb8 g     F .text	00000208 __sflush_r
0001b3c8 g     F .text	0000005c _do_dtors
00007dec g     F .text	00000008 __locale_cjk_lang
0001ecee g     O .rwdata	00000002 OSEventMultiEn
00012688 g     F .text	00000270 OSFlagDel
00020d8c g     O .bss	00000004 OSEventFreeList
00000020 g       .exceptions	00000000 alt_irq_entry
00014114 g     F .text	0000016c OSMboxPendAbort
000096f4 g     F .text	00000060 __ulp
0001ed3a g     O .rwdata	00000002 OSTmrEn
00012b78 g     F .text	000005f0 OSFlagPend
000072d4 g     F .text	00000018 __fp_unlock_all
0001ecb8 g     O .rwdata	00000008 alt_fs_list
00011b30 g     F .text	00000074 OS_StrCopy
0001aaa8 g     F .text	00000058 alt_up_rs232_enable_read_interrupt
0001ac1c g     F .text	00000040 alt_up_rs232_write_data
00000588 g     F .text	00000100 moveUp
0001ed04 g     O .rwdata	00000002 OSMemNameSize
00020cf8 g     O .bss	00000004 ALT_x1
0001bed8 g     F .text	0000001c OSInitHookEnd
0002ade0 g     O .bss	000007d0 Messages
0000297c g     F .text	00000674 draw_number
00000020 g       *ABS*	00000000 __ram_exceptions_start
0001ed30 g     O .rwdata	00000002 OSTCBPrioTblMax
00007e1c g     F .text	0000000c localeconv
0001ed2c g     O .rwdata	00000002 OSTaskStatStkChkEn
00013b0c g     F .text	000000fc OSMboxCreate
0001ed00 g     O .rwdata	00000002 OSMemEn
0001ec6c g     O .rwdata	00000004 first
0001ed0a g     O .rwdata	00000002 OSMutexEn
00020cd4 g     O .bss	00000004 score3
0001ed5c g       *ABS*	00000000 _edata
0001ec9c g     O .rwdata	00000004 interval_timer_ptr
000308d4 g       *ABS*	00000000 _end
00020d90 g     O .bss	00000001 OSIntNesting
00000244 g       *ABS*	00000000 __ram_exceptions_end
000193fc g     F .text	000000ec altera_avalon_jtag_uart_ioctl
0001863c g     F .text	000001f0 OSTimeDlyResume
00012a28 g     F .text	00000150 OSFlagNameSet
00002204 g     F .text	000000a0 clearText
00013e70 g     F .text	000002a4 OSMboxPend
00017e18 g     F .text	000001c8 OSTaskStkChk
0001ed06 g     O .rwdata	00000002 OSMemSize
0000a254 g     F .text	0000007c __swrite
0001ecb0 g     O .rwdata	00000004 __malloc_trim_threshold
00007de0 g     F .text	0000000c __locale_msgcharset
00020d94 g     O .bss	00000004 OSTCBCur
0001c27c g     F .text	00000038 exit
00002ff0 g     F .text	00000060 checkIDScore
0001a1e0 g     F .text	00000074 alt_up_irda_read_data
0001ed08 g     O .rwdata	00000002 OSMemTblSize
00007c84 g     F .text	000000c4 _fwalk_reent
0001a51c g     F .text	000000c4 alt_up_ps2_init
0000955c g     F .text	00000198 __mdiff
0000cda4 g     F .text	0000005c .hidden __modsi3
0002b5b0 g     O .bss	00002000 menu_stk2
00013a74 g     F .text	00000098 OSMboxAccept
04000000 g       *ABS*	00000000 __alt_data_end
00000020 g     F .exceptions	00000000 alt_exception
000072b0 g     F .text	00000004 __sfp_lock_release
00010948 g     F .text	00000054 OSInit
000181f4 g     F .text	0000012c OSTaskQuery
00019cf0 g     F .text	00000074 alt_up_character_lcd_string
00015ee4 g     F .text	000000ac OS_QInit
00011ba4 g     F .text	00000054 OS_StrLen
0001a374 g     F .text	00000040 alt_up_irda_open_dev
000149d8 g     F .text	00000118 OSMemNameSet
00000c18 g     F .text	00000224 gescoord
0001ed22 g     O .rwdata	00000002 OSTaskProfileEn
00020d98 g     O .bss	00000004 OSTime
00020cc8 g     O .bss	00000004 Flags
000022a4 g     F .text	00000058 tekenBox
0002ef30 g     O .bss	00000800 OSTaskIdleStk
0001c5d8 g     F .text	0000003c _exit
00020cfc g     O .bss	00000004 ALT_inc_x
00014390 g     F .text	0000015c OSMboxPostOpt
0001b11c g     F .text	00000140 alt_alarm_start
000128f8 g     F .text	00000130 OSFlagNameGet
0001882c g     F .text	00000064 OSTimeGet
00007e28 g     F .text	000001b8 __smakebuf_r
0001a708 g     F .text	00000070 alt_up_ps2_wait_for_ack
00003174 g     F .text	00000098 strlen
0001be68 g     F .text	0000001c OSTaskSwHook
0001b8e8 g     F .text	00000158 open
0002f730 g     O .bss	00000b40 OSEventTbl
0000dffc g     F .text	000000e0 .hidden __gedf2
00030270 g     O .bss	00000510 OSTCBTbl
0001699c g     F .text	000000fc OSSemSet
0001ec94 g     O .rwdata	00000004 eenkeer
000021c4 g     F .text	00000040 clearScreen
0001ecb4 g     O .rwdata	00000004 __wctomb
0000a4d4 g     F .text	00000018 __sprint_r
00020d00 g     O .bss	00000004 ALT_x2
0001b4b4 g     F .text	00000030 alt_icache_flush_all
00019db4 g     F .text	00000074 alt_up_character_lcd_set_cursor_pos
0001ed50 g     O .rwdata	00000004 alt_priority_mask
00016140 g     F .text	00000268 OSSemDel
00020d9c g     O .bss	00000004 OSFlagFreeList
0001ece8 g     O .rwdata	00000002 OSEventNameSize
00013c08 g     F .text	00000268 OSMboxDel
0000515c g     F .text	00000024 __vfprintf_internal
00020da0 g     O .bss	00000001 OSStatRdy
00020ccc g     O .bss	00000004 MailBox
00030780 g     O .bss	00000054 OSTCBPrioTbl
0000c138 g     F .text	0000005c _wctomb_r
0000fdd0 g     F .text	000000c0 __env_lock
0001a944 g     F .text	0000008c alt_up_ps2_read_fd
0001ed2e g     O .rwdata	00000002 OSTaskSwHookEn
0001ec7c g     O .rwdata	00000004 xLinks
0000e8e0 g     F .text	000008d0 .hidden __subdf3
0001a254 g     F .text	00000090 alt_up_irda_read_fd
00008f84 g     F .text	000000b0 __lo0bits
0001ed54 g     O .rwdata	00000008 alt_alarm_list
0001ecf6 g     O .rwdata	00000002 OSFlagWidth
0001b36c g     F .text	0000005c _do_ctors
0001ab5c g     F .text	00000040 alt_up_rs232_get_used_space_in_read_FIFO
0000c048 g     F .text	000000c0 wcrtomb
0000f460 g     F .text	000000d0 close
00020d4c g     O .bss	00000004 alt_envsem
00020da4 g     O .bss	00000004 OSIdleCtrRun
0001ec88 g     O .rwdata	00000004 xOnder
00010fa0 g     F .text	00000020 OSVersion
0001ed40 g     O .rwdata	00000002 OSTmrCfgWheelSize
0000f7b4 g     F .text	00000080 alt_load
00018320 g     F .text	0000006c OS_TaskStkClr
000022fc g     F .text	00000088 tekenBox2
0001ed1a g     O .rwdata	00000002 OSTaskCreateEn
00020d14 g     O .bss	00000004 menuSem
0001157c g     F .text	00000064 OS_EventWaitListInit
0000bc98 g     F .text	0000005c fputwc
0001bef4 g     F .text	0000001c OSTaskIdleHook
00020d04 g     O .bss	00000004 X
00000000  w      *UND*	00000000 free
000072b4 g     F .text	00000004 __sinit_lock_acquire
00008cf8 g     F .text	00000120 __multadd
00000fb8 g     F .text	00000138 endSingleplayer
00017fe0 g     F .text	00000214 OSTaskSuspend
00008cd0 g     F .text	00000028 _Bfree
00020cd0 g     O .bss	00000004 counter2
00011bf8 g     F .text	0000005c OS_TaskIdle
0001ed46 g     O .rwdata	00000002 OSTmrTblSize
00015d88 g     F .text	0000015c OSQQuery



Disassembly of section .entry:

00000000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && (!defined(ALT_SIM_OPTIMIZE) || defined(NIOS2_ECC_PRESENT))
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
   0:	00840014 	movui	r2,4096
#endif

0:
    initi r2
   4:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
   8:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
   c:	00bffd16 	blt	zero,r2,4 <__alt_mem_Flash_flash_data+0xf4000004>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
  10:	00400034 	movhi	at,0
    ori r1, r1, %lo(_start)
  14:	08409114 	ori	at,at,580
    jmp r1
  18:	0800683a 	jmp	at
  1c:	00000000 	call	0 <__reset>

Disassembly of section .exceptions:

00000020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
  20:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
  24:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
  28:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
  2c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
  30:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
  34:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
  38:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
  3c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
  40:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
  44:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
  48:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
  4c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
  50:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
  54:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
  58:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
  5c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
  60:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
  64:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
  68:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
  6c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  70:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
  74:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
  78:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
  7c:	10000326 	beq	r2,zero,8c <OSCtxSw_SWITCH_PC+0x4c>
        beq   r4, zero, .Lnot_irq
  80:	20000226 	beq	r4,zero,8c <OSCtxSw_SWITCH_PC+0x4c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
  84:	00000fc0 	call	fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
  88:	00000706 	br	a8 <OSCtxSw_SWITCH_PC+0x68>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
  8c:	df401215 	stw	ea,72(sp)
        ldhu.n  r2, 0(r4)
        ldhu.n  r3, 2(r4)
        slli.n  r3, r3, 16
        or.n    r2, r2, r3 /* Instruction that caused exception */
#else
        ldw   r2, -4(ea)   /* Instruction that caused exception */
  90:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
  94:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
  98:	00001d00 	call	1d0 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
  9c:	1000021e 	bne	r2,zero,a8 <OSCtxSw_SWITCH_PC+0x68>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
  a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
  a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
  ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
  b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
  b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
  b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
  bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
  c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
  c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
  c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
  cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
  d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
  d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
  d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
  dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
  e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
  e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
  e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
  ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
  f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
  f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
  f8:	ef80083a 	eret

000000fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
  fc:	defff904 	addi	sp,sp,-28
 100:	dfc00615 	stw	ra,24(sp)
 104:	df000515 	stw	fp,20(sp)
 108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
 10c:	001099c0 	call	1099c <OSIntEnter>
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 110:	0005313a 	rdctl	r2,ipending
 114:	e0bffe15 	stw	r2,-8(fp)

  return active;
 118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 11c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
 120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 124:	00800044 	movi	r2,1
 128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 12c:	e0fffb17 	ldw	r3,-20(fp)
 130:	e0bffc17 	ldw	r2,-16(fp)
 134:	1884703a 	and	r2,r3,r2
 138:	10001526 	beq	r2,zero,190 <alt_irq_handler+0x94>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
 13c:	008000f4 	movhi	r2,3
 140:	1081f504 	addi	r2,r2,2004
 144:	e0fffd17 	ldw	r3,-12(fp)
 148:	180690fa 	slli	r3,r3,3
 14c:	10c5883a 	add	r2,r2,r3
 150:	10c00017 	ldw	r3,0(r2)
 154:	008000f4 	movhi	r2,3
 158:	1081f504 	addi	r2,r2,2004
 15c:	e13ffd17 	ldw	r4,-12(fp)
 160:	200890fa 	slli	r4,r4,3
 164:	21000104 	addi	r4,r4,4
 168:	1105883a 	add	r2,r2,r4
 16c:	10800017 	ldw	r2,0(r2)
 170:	1009883a 	mov	r4,r2
 174:	e17ffd17 	ldw	r5,-12(fp)
 178:	183ee83a 	callr	r3
#endif
        break;
 17c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 180:	0005313a 	rdctl	r2,ipending
 184:	e0bfff15 	stw	r2,-4(fp)

  return active;
 188:	e0bfff17 	ldw	r2,-4(fp)
 18c:	00000706 	br	1ac <alt_irq_handler+0xb0>
      }
      mask <<= 1;
 190:	e0bffc17 	ldw	r2,-16(fp)
 194:	1085883a 	add	r2,r2,r2
 198:	e0bffc15 	stw	r2,-16(fp)
      i++;
 19c:	e0bffd17 	ldw	r2,-12(fp)
 1a0:	10800044 	addi	r2,r2,1
 1a4:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
 1a8:	003fe006 	br	12c <__alt_mem_Flash_flash_data+0xf400012c>

    active = alt_irq_pending ();
 1ac:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
 1b0:	e0bffb17 	ldw	r2,-20(fp)
 1b4:	103fda1e 	bne	r2,zero,120 <__alt_mem_Flash_flash_data+0xf4000120>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
 1b8:	0010a180 	call	10a18 <OSIntExit>
}
 1bc:	e037883a 	mov	sp,fp
 1c0:	dfc00117 	ldw	ra,4(sp)
 1c4:	df000017 	ldw	fp,0(sp)
 1c8:	dec00204 	addi	sp,sp,8
 1cc:	f800283a 	ret

000001d0 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
 1d0:	defffb04 	addi	sp,sp,-20
 1d4:	dfc00415 	stw	ra,16(sp)
 1d8:	df000315 	stw	fp,12(sp)
 1dc:	df000304 	addi	fp,sp,12
 1e0:	e13fff15 	stw	r4,-4(fp)
 * NIOS2_EXCEPTION_CAUSE_NOT_PRESENT. Your handling routine should
 * check the validity of the cause argument before proceeding.
 */
#ifdef NIOS2_HAS_EXTRA_EXCEPTION_INFO
  /* Get exception cause & "badaddr" */
  NIOS2_READ_EXCEPTION(cause);
 1e4:	000531fa 	rdctl	r2,exception
 1e8:	e0bffd15 	stw	r2,-12(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
 1ec:	e0bffd17 	ldw	r2,-12(fp)
 1f0:	10801f0c 	andi	r2,r2,124
 1f4:	1004d0ba 	srli	r2,r2,2
 1f8:	e0bffd15 	stw	r2,-12(fp)
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
 1fc:	0005333a 	rdctl	r2,badaddr
 200:	e0bffe15 	stw	r2,-8(fp)
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
  badaddr = 0;
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
 204:	d0a85217 	ldw	r2,-24248(gp)
 208:	10000726 	beq	r2,zero,228 <alt_instruction_exception_entry+0x58>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
 20c:	d0a85217 	ldw	r2,-24248(gp)
 210:	e0fffd17 	ldw	r3,-12(fp)
 214:	1809883a 	mov	r4,r3
 218:	e17fff17 	ldw	r5,-4(fp)
 21c:	e1bffe17 	ldw	r6,-8(fp)
 220:	103ee83a 	callr	r2
 224:	00000206 	br	230 <alt_instruction_exception_entry+0x60>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
 228:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
 22c:	0005883a 	mov	r2,zero
}
 230:	e037883a 	mov	sp,fp
 234:	dfc00117 	ldw	ra,4(sp)
 238:	df000017 	ldw	fp,0(sp)
 23c:	dec00204 	addi	sp,sp,8
 240:	f800283a 	ret

Disassembly of section .text:

00000244 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
     244:	06c10034 	movhi	sp,1024
    ori sp, sp, %lo(__alt_stack_pointer)
     248:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
     24c:	068000b4 	movhi	gp,2
    ori gp, gp, %lo(_gp)
     250:	d69b1b14 	ori	gp,gp,27756
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
     254:	008000b4 	movhi	r2,2
    ori r2, r2, %lo(__bss_start)
     258:	10832c14 	ori	r2,r2,3248

    movhi r3, %hi(__bss_end)
     25c:	00c000f4 	movhi	r3,3
    ori r3, r3, %lo(__bss_end)
     260:	18c23514 	ori	r3,r3,2260

    beq r2, r3, 1f
     264:	10c00326 	beq	r2,r3,274 <_start+0x30>

0:
    stw zero, (r2)
     268:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
     26c:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
     270:	10fffd36 	bltu	r2,r3,268 <__alt_mem_Flash_flash_data+0xf4000268>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
     274:	000f7b40 	call	f7b4 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
     278:	000f9580 	call	f958 <alt_main>

0000027c <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
     27c:	003fff06 	br	27c <__alt_mem_Flash_flash_data+0xf400027c>

00000280 <controllers>:
}Balk;

alt_up_parallel_port_dev *gpio_dev; //	gpio device


void controllers(void* pdata) {
     280:	defff804 	addi	sp,sp,-32
     284:	dfc00715 	stw	ra,28(sp)
     288:	df000615 	stw	fp,24(sp)
     28c:	df000604 	addi	fp,sp,24
     290:	e13fff15 	stw	r4,-4(fp)
	INT8U err;

	int ID = (int*) pdata;
     294:	e0bfff17 	ldw	r2,-4(fp)
     298:	e0bffc15 	stw	r2,-16(fp)
	int hoogte = 50;
     29c:	00800c84 	movi	r2,50
     2a0:	e0bffb15 	stw	r2,-20(fp)

	Balk balkje;

	while (1) {
		OSFlagPend(Flags, C1_Flag + C2_Flag, OS_FLAG_WAIT_CLR_ANY, 0, &err);
     2a4:	d0e81717 	ldw	r3,-24484(gp)
     2a8:	e0bffd04 	addi	r2,fp,-12
     2ac:	d8800015 	stw	r2,0(sp)
     2b0:	1809883a 	mov	r4,r3
     2b4:	01400304 	movi	r5,12
     2b8:	01800044 	movi	r6,1
     2bc:	000f883a 	mov	r7,zero
     2c0:	0012b780 	call	12b78 <OSFlagPend>
		balkje.Hoogte = hoogte;
     2c4:	e0bffb17 	ldw	r2,-20(fp)
     2c8:	e0bffe15 	stw	r2,-8(fp)

		if (controller(ID) == 1) {
     2cc:	e13ffc17 	ldw	r4,-16(fp)
     2d0:	000039c0 	call	39c <controller>
     2d4:	10800058 	cmpnei	r2,r2,1
     2d8:	1000051e 	bne	r2,zero,2f0 <controllers+0x70>
			hoogte = moveDown(ID, hoogte);
     2dc:	e13ffc17 	ldw	r4,-16(fp)
     2e0:	e17ffb17 	ldw	r5,-20(fp)
     2e4:	00006880 	call	688 <moveDown>
     2e8:	e0bffb15 	stw	r2,-20(fp)
     2ec:	00000706 	br	30c <controllers+0x8c>
		} else if (controller(ID) == 0) {
     2f0:	e13ffc17 	ldw	r4,-16(fp)
     2f4:	000039c0 	call	39c <controller>
     2f8:	1000041e 	bne	r2,zero,30c <controllers+0x8c>
			hoogte = moveUp(ID, hoogte);
     2fc:	e13ffc17 	ldw	r4,-16(fp)
     300:	e17ffb17 	ldw	r5,-20(fp)
     304:	00005880 	call	588 <moveUp>
     308:	e0bffb15 	stw	r2,-20(fp)
		}

		if(ID == 1){
     30c:	e0bffc17 	ldw	r2,-16(fp)
     310:	10800058 	cmpnei	r2,r2,1
     314:	10000e1e 	bne	r2,zero,350 <controllers+0xd0>
			OSFlagPend(Flags, C1_Flag, OS_FLAG_WAIT_CLR_ANY, 0, &err);
     318:	d0e81717 	ldw	r3,-24484(gp)
     31c:	e0bffd04 	addi	r2,fp,-12
     320:	d8800015 	stw	r2,0(sp)
     324:	1809883a 	mov	r4,r3
     328:	01400104 	movi	r5,4
     32c:	01800044 	movi	r6,1
     330:	000f883a 	mov	r7,zero
     334:	0012b780 	call	12b78 <OSFlagPend>
			OSMboxPost(MailBox, (void*)&balkje);
     338:	d0e81817 	ldw	r3,-24480(gp)
     33c:	e0bffe04 	addi	r2,fp,-8
     340:	1809883a 	mov	r4,r3
     344:	100b883a 	mov	r5,r2
     348:	00142800 	call	14280 <OSMboxPost>
     34c:	00001006 	br	390 <controllers+0x110>
		}else if(ID == 2){
     350:	e0bffc17 	ldw	r2,-16(fp)
     354:	10800098 	cmpnei	r2,r2,2
     358:	10000d1e 	bne	r2,zero,390 <controllers+0x110>
			OSFlagPend(Flags, C2_Flag, OS_FLAG_WAIT_CLR_ANY, 0, &err);
     35c:	d0e81717 	ldw	r3,-24484(gp)
     360:	e0bffd04 	addi	r2,fp,-12
     364:	d8800015 	stw	r2,0(sp)
     368:	1809883a 	mov	r4,r3
     36c:	01400204 	movi	r5,8
     370:	01800044 	movi	r6,1
     374:	000f883a 	mov	r7,zero
     378:	0012b780 	call	12b78 <OSFlagPend>
			OSMboxPost(MailBox2, (void*)&balkje);
     37c:	d0e81617 	ldw	r3,-24488(gp)
     380:	e0bffe04 	addi	r2,fp,-8
     384:	1809883a 	mov	r4,r3
     388:	100b883a 	mov	r5,r2
     38c:	00142800 	call	14280 <OSMboxPost>
		}

		OSTimeDly(1);
     390:	01000044 	movi	r4,1
     394:	001838c0 	call	1838c <OSTimeDly>
	}
     398:	003fc206 	br	2a4 <__alt_mem_Flash_flash_data+0xf40002a4>

0000039c <controller>:

}

int controller(int ID) {
     39c:	defff804 	addi	sp,sp,-32
     3a0:	dfc00715 	stw	ra,28(sp)
     3a4:	df000615 	stw	fp,24(sp)
     3a8:	df000604 	addi	fp,sp,24
     3ac:	e13fff15 	stw	r4,-4(fp)
	alt_up_parallel_port_dev * KEY_ptr = alt_up_parallel_port_open_dev(
     3b0:	010000b4 	movhi	r4,2
     3b4:	21318504 	addi	r4,r4,-14828
     3b8:	001a3b40 	call	1a3b4 <alt_up_parallel_port_open_dev>
     3bc:	e0bffa15 	stw	r2,-24(fp)
			"/dev/Pushbuttons");
	alt_up_parallel_port_dev * SW_switch_ptr = alt_up_parallel_port_open_dev(
     3c0:	010000b4 	movhi	r4,2
     3c4:	21318a04 	addi	r4,r4,-14808
     3c8:	001a3b40 	call	1a3b4 <alt_up_parallel_port_open_dev>
     3cc:	e0bffb15 	stw	r2,-20(fp)
			"/dev/Slider_Switches");
	gpio_dev = alt_up_parallel_port_open_dev("/dev/Expansion_JP5");		//	DE2-115 gpio
     3d0:	010000b4 	movhi	r4,2
     3d4:	21319004 	addi	r4,r4,-14784
     3d8:	001a3b40 	call	1a3b4 <alt_up_parallel_port_open_dev>
     3dc:	d0a81215 	stw	r2,-24504(gp)
	alt_up_parallel_port_set_port_direction(gpio_dev, 0x00000001);		// 1-0-1-1	(1 = output; 0 = input)
     3e0:	d0a81217 	ldw	r2,-24504(gp)
     3e4:	10800a17 	ldw	r2,40(r2)
     3e8:	10800104 	addi	r2,r2,4
     3ec:	1007883a 	mov	r3,r2
     3f0:	00800044 	movi	r2,1
     3f4:	18800035 	stwio	r2,0(r3)

	int KEY_value, SW_value, gpio_values;
	INT8U err;

	SW_value = alt_up_parallel_port_read_data(SW_switch_ptr);
     3f8:	e0bffb17 	ldw	r2,-20(fp)
     3fc:	10800a17 	ldw	r2,40(r2)
     400:	10800037 	ldwio	r2,0(r2)
     404:	e0bffc15 	stw	r2,-16(fp)
	KEY_value = alt_up_parallel_port_read_data(KEY_ptr); // read the pushbutton KEY values
     408:	e0bffa17 	ldw	r2,-24(fp)
     40c:	10800a17 	ldw	r2,40(r2)
     410:	10800037 	ldwio	r2,0(r2)
     414:	e0bffd15 	stw	r2,-12(fp)
	gpio_values = alt_up_parallel_port_read_data(gpio_dev);
     418:	d0a81217 	ldw	r2,-24504(gp)
     41c:	10800a17 	ldw	r2,40(r2)
     420:	10800037 	ldwio	r2,0(r2)
     424:	e0bffe15 	stw	r2,-8(fp)

	//printf("gpio_value is: %d\n", gpio_values);

	if (ID == 2) {
     428:	e0bfff17 	ldw	r2,-4(fp)
     42c:	10800098 	cmpnei	r2,r2,2
     430:	1000131e 	bne	r2,zero,480 <controller+0xe4>
		if (KEY_value != 0) {
     434:	e0bffd17 	ldw	r2,-12(fp)
     438:	10000f26 	beq	r2,zero,478 <controller+0xdc>
			if (KEY_value == 8) {
     43c:	e0bffd17 	ldw	r2,-12(fp)
     440:	10800218 	cmpnei	r2,r2,8
     444:	1000021e 	bne	r2,zero,450 <controller+0xb4>
				return 1;
     448:	00800044 	movi	r2,1
     44c:	00003606 	br	528 <controller+0x18c>
			}
			if (KEY_value == 4) {
     450:	e0bffd17 	ldw	r2,-12(fp)
     454:	10800118 	cmpnei	r2,r2,4
     458:	1000021e 	bne	r2,zero,464 <controller+0xc8>
				return 0;
     45c:	0005883a 	mov	r2,zero
     460:	00003106 	br	528 <controller+0x18c>
			}
			if (KEY_value == 2) {
     464:	e0bffd17 	ldw	r2,-12(fp)
     468:	10800098 	cmpnei	r2,r2,2
     46c:	10002b1e 	bne	r2,zero,51c <controller+0x180>
				return 2;
     470:	00800084 	movi	r2,2
     474:	00002c06 	br	528 <controller+0x18c>
			}
		} else {
			return 3;
     478:	008000c4 	movi	r2,3
     47c:	00002a06 	br	528 <controller+0x18c>
		}

	} else if (ID == 1) {
     480:	e0bfff17 	ldw	r2,-4(fp)
     484:	10800058 	cmpnei	r2,r2,1
     488:	10000e1e 	bne	r2,zero,4c4 <controller+0x128>
		if (SW_value != 0) {
     48c:	e0bffc17 	ldw	r2,-16(fp)
     490:	10000a26 	beq	r2,zero,4bc <controller+0x120>
			if (SW_value == 131072) {
     494:	e0fffc17 	ldw	r3,-16(fp)
     498:	008000b4 	movhi	r2,2
     49c:	1880021e 	bne	r3,r2,4a8 <controller+0x10c>
				return 0;
     4a0:	0005883a 	mov	r2,zero
     4a4:	00002006 	br	528 <controller+0x18c>
			}else if(SW_value == 4){
     4a8:	e0bffc17 	ldw	r2,-16(fp)
     4ac:	10800118 	cmpnei	r2,r2,4
     4b0:	10001a1e 	bne	r2,zero,51c <controller+0x180>
				return 4;
     4b4:	00800104 	movi	r2,4
     4b8:	00001b06 	br	528 <controller+0x18c>
			}
		} else {
			return 1;
     4bc:	00800044 	movi	r2,1
     4c0:	00001906 	br	528 <controller+0x18c>
		}
	} else if(ID == 3){
     4c4:	e0bfff17 	ldw	r2,-4(fp)
     4c8:	108000d8 	cmpnei	r2,r2,3
     4cc:	1000131e 	bne	r2,zero,51c <controller+0x180>
		if(gpio_values != 0){
     4d0:	e0bffe17 	ldw	r2,-8(fp)
     4d4:	10000f26 	beq	r2,zero,514 <controller+0x178>
			if(gpio_values == -1){
     4d8:	e0bffe17 	ldw	r2,-8(fp)
     4dc:	10bfffd8 	cmpnei	r2,r2,-1
     4e0:	1000021e 	bne	r2,zero,4ec <controller+0x150>
				return 1;
     4e4:	00800044 	movi	r2,1
     4e8:	00000f06 	br	528 <controller+0x18c>
			} else if(gpio_values == -2){
     4ec:	e0bffe17 	ldw	r2,-8(fp)
     4f0:	10bfff98 	cmpnei	r2,r2,-2
     4f4:	1000021e 	bne	r2,zero,500 <controller+0x164>
				return 2;
     4f8:	00800084 	movi	r2,2
     4fc:	00000a06 	br	528 <controller+0x18c>
			} else if(gpio_values == -3){
     500:	e0bffe17 	ldw	r2,-8(fp)
     504:	10bfff58 	cmpnei	r2,r2,-3
     508:	1000041e 	bne	r2,zero,51c <controller+0x180>
				return 3;
     50c:	008000c4 	movi	r2,3
     510:	00000506 	br	528 <controller+0x18c>
			}
		}else{
			return 0;
     514:	0005883a 	mov	r2,zero
     518:	00000306 	br	528 <controller+0x18c>
		}
	}
	gpio_values &= 0x80000000;		//	negeer alle andere bits, die zijn waarschijnlijk HOOG !
     51c:	e0bffe17 	ldw	r2,-8(fp)
     520:	10a0002c 	andhi	r2,r2,32768
     524:	e0bffe15 	stw	r2,-8(fp)

}
     528:	e037883a 	mov	sp,fp
     52c:	dfc00117 	ldw	ra,4(sp)
     530:	df000017 	ldw	fp,0(sp)
     534:	dec00204 	addi	sp,sp,8
     538:	f800283a 	ret

0000053c <checkID>:

int checkID(int ID) {
     53c:	defffe04 	addi	sp,sp,-8
     540:	df000115 	stw	fp,4(sp)
     544:	df000104 	addi	fp,sp,4
     548:	e13fff15 	stw	r4,-4(fp)
	if (ID == 1) {
     54c:	e0bfff17 	ldw	r2,-4(fp)
     550:	10800058 	cmpnei	r2,r2,1
     554:	1000021e 	bne	r2,zero,560 <checkID+0x24>
		return 15;
     558:	008003c4 	movi	r2,15
     55c:	00000606 	br	578 <checkID+0x3c>
	} else if (ID == 2) {
     560:	e0bfff17 	ldw	r2,-4(fp)
     564:	10800098 	cmpnei	r2,r2,2
     568:	1000021e 	bne	r2,zero,574 <checkID+0x38>
		return 300;
     56c:	00804b04 	movi	r2,300
     570:	00000106 	br	578 <checkID+0x3c>

	}
	return 0;
     574:	0005883a 	mov	r2,zero
}
     578:	e037883a 	mov	sp,fp
     57c:	df000017 	ldw	fp,0(sp)
     580:	dec00104 	addi	sp,sp,4
     584:	f800283a 	ret

00000588 <moveUp>:

int moveUp(int ID, int current) {
     588:	defff904 	addi	sp,sp,-28
     58c:	dfc00615 	stw	ra,24(sp)
     590:	df000515 	stw	fp,20(sp)
     594:	df000504 	addi	fp,sp,20
     598:	e13ffe15 	stw	r4,-8(fp)
     59c:	e17fff15 	stw	r5,-4(fp)
	int boven = current;
     5a0:	e0bfff17 	ldw	r2,-4(fp)
     5a4:	e0bffc15 	stw	r2,-16(fp)

	int X = checkID(ID);
     5a8:	e13ffe17 	ldw	r4,-8(fp)
     5ac:	000053c0 	call	53c <checkID>
     5b0:	e0bffd15 	stw	r2,-12(fp)

	if (boven >= 4 && boven <= 184) {
     5b4:	e0bffc17 	ldw	r2,-16(fp)
     5b8:	10800110 	cmplti	r2,r2,4
     5bc:	10001c1e 	bne	r2,zero,630 <moveUp+0xa8>
     5c0:	e0bffc17 	ldw	r2,-16(fp)
     5c4:	10802e48 	cmpgei	r2,r2,185
     5c8:	1000191e 	bne	r2,zero,630 <moveUp+0xa8>
		VGA_box(X, boven, X + 5, boven + 1, blauw);
     5cc:	e0bffd17 	ldw	r2,-12(fp)
     5d0:	11800144 	addi	r6,r2,5
     5d4:	e0bffc17 	ldw	r2,-16(fp)
     5d8:	10c00044 	addi	r3,r2,1
     5dc:	00803fc4 	movi	r2,255
     5e0:	d8800015 	stw	r2,0(sp)
     5e4:	e13ffd17 	ldw	r4,-12(fp)
     5e8:	e17ffc17 	ldw	r5,-16(fp)
     5ec:	180f883a 	mov	r7,r3
     5f0:	00026e80 	call	26e8 <VGA_box>
		VGA_box(X, boven + 50, X + 5, boven + 51, 0);
     5f4:	e0bffc17 	ldw	r2,-16(fp)
     5f8:	11400c84 	addi	r5,r2,50
     5fc:	e0bffd17 	ldw	r2,-12(fp)
     600:	10c00144 	addi	r3,r2,5
     604:	e0bffc17 	ldw	r2,-16(fp)
     608:	10800cc4 	addi	r2,r2,51
     60c:	d8000015 	stw	zero,0(sp)
     610:	e13ffd17 	ldw	r4,-12(fp)
     614:	180d883a 	mov	r6,r3
     618:	100f883a 	mov	r7,r2
     61c:	00026e80 	call	26e8 <VGA_box>
		boven--;
     620:	e0bffc17 	ldw	r2,-16(fp)
     624:	10bfffc4 	addi	r2,r2,-1
     628:	e0bffc15 	stw	r2,-16(fp)
int moveUp(int ID, int current) {
	int boven = current;

	int X = checkID(ID);

	if (boven >= 4 && boven <= 184) {
     62c:	00001006 	br	670 <moveUp+0xe8>
		VGA_box(X, boven, X + 5, boven + 1, blauw);
		VGA_box(X, boven + 50, X + 5, boven + 51, 0);
		boven--;
	} else if (boven > 184) {
     630:	e0bffc17 	ldw	r2,-16(fp)
     634:	10802e50 	cmplti	r2,r2,185
     638:	10000d1e 	bne	r2,zero,670 <moveUp+0xe8>
		VGA_box(X, boven, X + 5, boven + 1, blauw);
     63c:	e0bffd17 	ldw	r2,-12(fp)
     640:	11800144 	addi	r6,r2,5
     644:	e0bffc17 	ldw	r2,-16(fp)
     648:	10c00044 	addi	r3,r2,1
     64c:	00803fc4 	movi	r2,255
     650:	d8800015 	stw	r2,0(sp)
     654:	e13ffd17 	ldw	r4,-12(fp)
     658:	e17ffc17 	ldw	r5,-16(fp)
     65c:	180f883a 	mov	r7,r3
     660:	00026e80 	call	26e8 <VGA_box>
		boven--;
     664:	e0bffc17 	ldw	r2,-16(fp)
     668:	10bfffc4 	addi	r2,r2,-1
     66c:	e0bffc15 	stw	r2,-16(fp)
	}
	return boven;
     670:	e0bffc17 	ldw	r2,-16(fp)

}
     674:	e037883a 	mov	sp,fp
     678:	dfc00117 	ldw	ra,4(sp)
     67c:	df000017 	ldw	fp,0(sp)
     680:	dec00204 	addi	sp,sp,8
     684:	f800283a 	ret

00000688 <moveDown>:
int moveDown(int ID, int current) {
     688:	defff904 	addi	sp,sp,-28
     68c:	dfc00615 	stw	ra,24(sp)
     690:	df000515 	stw	fp,20(sp)
     694:	df000504 	addi	fp,sp,20
     698:	e13ffe15 	stw	r4,-8(fp)
     69c:	e17fff15 	stw	r5,-4(fp)
	int boven = current;
     6a0:	e0bfff17 	ldw	r2,-4(fp)
     6a4:	e0bffc15 	stw	r2,-16(fp)

	int X = checkID(ID);
     6a8:	e13ffe17 	ldw	r4,-8(fp)
     6ac:	000053c0 	call	53c <checkID>
     6b0:	e0bffd15 	stw	r2,-12(fp)

	if (boven <= 184 && boven >= 4) {
     6b4:	e0bffc17 	ldw	r2,-16(fp)
     6b8:	10802e48 	cmpgei	r2,r2,185
     6bc:	10001c1e 	bne	r2,zero,730 <moveDown+0xa8>
     6c0:	e0bffc17 	ldw	r2,-16(fp)
     6c4:	10800110 	cmplti	r2,r2,4
     6c8:	1000191e 	bne	r2,zero,730 <moveDown+0xa8>
		VGA_box(X, boven + 50, X + 5, boven + 51, blauw);
     6cc:	e0bffc17 	ldw	r2,-16(fp)
     6d0:	11400c84 	addi	r5,r2,50
     6d4:	e0bffd17 	ldw	r2,-12(fp)
     6d8:	11800144 	addi	r6,r2,5
     6dc:	e0bffc17 	ldw	r2,-16(fp)
     6e0:	10c00cc4 	addi	r3,r2,51
     6e4:	00803fc4 	movi	r2,255
     6e8:	d8800015 	stw	r2,0(sp)
     6ec:	e13ffd17 	ldw	r4,-12(fp)
     6f0:	180f883a 	mov	r7,r3
     6f4:	00026e80 	call	26e8 <VGA_box>
		VGA_box(X, boven, X + 5, boven + 1, 0);
     6f8:	e0bffd17 	ldw	r2,-12(fp)
     6fc:	10c00144 	addi	r3,r2,5
     700:	e0bffc17 	ldw	r2,-16(fp)
     704:	10800044 	addi	r2,r2,1
     708:	d8000015 	stw	zero,0(sp)
     70c:	e13ffd17 	ldw	r4,-12(fp)
     710:	e17ffc17 	ldw	r5,-16(fp)
     714:	180d883a 	mov	r6,r3
     718:	100f883a 	mov	r7,r2
     71c:	00026e80 	call	26e8 <VGA_box>
		boven++;
     720:	e0bffc17 	ldw	r2,-16(fp)
     724:	10800044 	addi	r2,r2,1
     728:	e0bffc15 	stw	r2,-16(fp)
int moveDown(int ID, int current) {
	int boven = current;

	int X = checkID(ID);

	if (boven <= 184 && boven >= 4) {
     72c:	00001106 	br	774 <moveDown+0xec>
		VGA_box(X, boven + 50, X + 5, boven + 51, blauw);
		VGA_box(X, boven, X + 5, boven + 1, 0);
		boven++;
	} else if (boven < 4) {
     730:	e0bffc17 	ldw	r2,-16(fp)
     734:	10800108 	cmpgei	r2,r2,4
     738:	10000e1e 	bne	r2,zero,774 <moveDown+0xec>
		VGA_box(X, boven + 50, X + 5, boven + 51, blauw);
     73c:	e0bffc17 	ldw	r2,-16(fp)
     740:	11400c84 	addi	r5,r2,50
     744:	e0bffd17 	ldw	r2,-12(fp)
     748:	11800144 	addi	r6,r2,5
     74c:	e0bffc17 	ldw	r2,-16(fp)
     750:	10c00cc4 	addi	r3,r2,51
     754:	00803fc4 	movi	r2,255
     758:	d8800015 	stw	r2,0(sp)
     75c:	e13ffd17 	ldw	r4,-12(fp)
     760:	180f883a 	mov	r7,r3
     764:	00026e80 	call	26e8 <VGA_box>
		boven++;
     768:	e0bffc17 	ldw	r2,-16(fp)
     76c:	10800044 	addi	r2,r2,1
     770:	e0bffc15 	stw	r2,-16(fp)
	}
	return boven;
     774:	e0bffc17 	ldw	r2,-16(fp)

}
     778:	e037883a 	mov	sp,fp
     77c:	dfc00117 	ldw	ra,4(sp)
     780:	df000017 	ldw	fp,0(sp)
     784:	dec00204 	addi	sp,sp,8
     788:	f800283a 	ret

0000078c <Game>:

typedef struct balk {
	int Hoogte;
} Balk;

void Game(void* pdata) {
     78c:	defff604 	addi	sp,sp,-40
     790:	dfc00915 	stw	ra,36(sp)
     794:	df000815 	stw	fp,32(sp)
     798:	df000804 	addi	fp,sp,32
     79c:	e13ffd15 	stw	r4,-12(fp)


	ALT_x1 = 0;
     7a0:	d0282315 	stw	zero,-24436(gp)
	ALT_x2 = 165;
     7a4:	00802944 	movi	r2,165
     7a8:	d0a82515 	stw	r2,-24428(gp)
	ALT_y = 100;
     7ac:	00801904 	movi	r2,100
     7b0:	d0a82015 	stw	r2,-24448(gp)
	ALT_inc_x = 1;
     7b4:	00800044 	movi	r2,1
     7b8:	d0a82415 	stw	r2,-24432(gp)
	ALT_inc_y = 1;
     7bc:	00800044 	movi	r2,1
     7c0:	d0a82115 	stw	r2,-24444(gp)

	pixel_buffer_x = 319;
     7c4:	00804fc4 	movi	r2,319
     7c8:	d0a81e15 	stw	r2,-24456(gp)
	pixel_buffer_y = 230;
     7cc:	00803984 	movi	r2,230
     7d0:	d0a81c15 	stw	r2,-24464(gp)
	int ID;
	int count;
	Balk * balkje;
	Balk * balkje2;
	
	VGA_box (316, 5, 319, 235, zwart); 					// singleplayer balk weghalen voor de zekerheid
     7d4:	d8000015 	stw	zero,0(sp)
     7d8:	01004f04 	movi	r4,316
     7dc:	01400144 	movi	r5,5
     7e0:	01804fc4 	movi	r6,319
     7e4:	01c03ac4 	movi	r7,235
     7e8:	00026e80 	call	26e8 <VGA_box>
	//char_buffer_x = 79; char_buffer_y = 59;

	//blue_x1 = 28; blue_x2 = 52; blue_y1 = 26; blue_y2 = 34;

	while (1) {
		OSFlagPend(Flags_Games, Game_Flag, OS_FLAG_WAIT_CLR_ANY, 0, &err);
     7ec:	d0e81517 	ldw	r3,-24492(gp)
     7f0:	e0bffc04 	addi	r2,fp,-16
     7f4:	d8800015 	stw	r2,0(sp)
     7f8:	1809883a 	mov	r4,r3
     7fc:	01400084 	movi	r5,2
     800:	01800044 	movi	r6,1
     804:	000f883a 	mov	r7,zero
     808:	0012b780 	call	12b78 <OSFlagPend>

		//printf("Game flag is set\n");

		balkje = (Balk*) OSMboxPend(MailBox, 0, &err);
     80c:	d0e81817 	ldw	r3,-24480(gp)
     810:	e0bffc04 	addi	r2,fp,-16
     814:	1809883a 	mov	r4,r3
     818:	000b883a 	mov	r5,zero
     81c:	100d883a 	mov	r6,r2
     820:	0013e700 	call	13e70 <OSMboxPend>
     824:	e0bffa15 	stw	r2,-24(fp)
		balkje2 = (Balk*) OSMboxPend(MailBox2, 0, &err);
     828:	d0e81617 	ldw	r3,-24488(gp)
     82c:	e0bffc04 	addi	r2,fp,-16
     830:	1809883a 	mov	r4,r3
     834:	000b883a 	mov	r5,zero
     838:	100d883a 	mov	r6,r2
     83c:	0013e700 	call	13e70 <OSMboxPend>
     840:	e0bffb15 	stw	r2,-20(fp)



		for (i = 0; i <= 9; i++) {
     844:	e03ff915 	stw	zero,-28(fp)
     848:	00001706 	br	8a8 <Game+0x11c>

			if (score1 == i) {
     84c:	d0e81d17 	ldw	r3,-24460(gp)
     850:	e0bff917 	ldw	r2,-28(fp)
     854:	1880031e 	bne	r3,r2,864 <Game+0xd8>
				draw_number(i, 1);
     858:	e13ff917 	ldw	r4,-28(fp)
     85c:	01400044 	movi	r5,1
     860:	000297c0 	call	297c <draw_number>
			}
			if (score2 == i) {
     864:	d0e81f17 	ldw	r3,-24452(gp)
     868:	e0bff917 	ldw	r2,-28(fp)
     86c:	1880031e 	bne	r3,r2,87c <Game+0xf0>
				draw_number(i, 3);
     870:	e13ff917 	ldw	r4,-28(fp)
     874:	014000c4 	movi	r5,3
     878:	000297c0 	call	297c <draw_number>
			}
			if(score1 == 9 || score2 == 9){
     87c:	d0a81d17 	ldw	r2,-24460(gp)
     880:	10800260 	cmpeqi	r2,r2,9
     884:	1000031e 	bne	r2,zero,894 <Game+0x108>
     888:	d0a81f17 	ldw	r2,-24452(gp)
     88c:	10800258 	cmpnei	r2,r2,9
     890:	1000021e 	bne	r2,zero,89c <Game+0x110>
				score1 =0;
     894:	d0281d15 	stw	zero,-24460(gp)
				score2 =0;
     898:	d0281f15 	stw	zero,-24452(gp)
		balkje = (Balk*) OSMboxPend(MailBox, 0, &err);
		balkje2 = (Balk*) OSMboxPend(MailBox2, 0, &err);



		for (i = 0; i <= 9; i++) {
     89c:	e0bff917 	ldw	r2,-28(fp)
     8a0:	10800044 	addi	r2,r2,1
     8a4:	e0bff915 	stw	r2,-28(fp)
     8a8:	e0bff917 	ldw	r2,-28(fp)
     8ac:	10800290 	cmplti	r2,r2,10
     8b0:	103fe61e 	bne	r2,zero,84c <__alt_mem_Flash_flash_data+0xf400084c>
				score1 =0;
				score2 =0;

			}
		}
		draw_middenlijn();
     8b4:	000282c0 	call	282c <draw_middenlijn>
		if (check == 1) {
     8b8:	d0a00117 	ldw	r2,-32764(gp)
     8bc:	10800058 	cmpnei	r2,r2,1
     8c0:	1000181e 	bne	r2,zero,924 <Game+0x198>
			del_middenlijn();
     8c4:	00028940 	call	2894 <del_middenlijn>
			VGA_text(20, 20, "Houdt de knop ingedrukt om te spelen");
     8c8:	01000504 	movi	r4,20
     8cc:	01400504 	movi	r5,20
     8d0:	018000b4 	movhi	r6,2
     8d4:	31b19504 	addi	r6,r6,-14764
     8d8:	000279c0 	call	279c <VGA_text>
			OSTimeDlyHMSM(0, 1, 0, 0);
     8dc:	0009883a 	mov	r4,zero
     8e0:	01400044 	movi	r5,1
     8e4:	000d883a 	mov	r6,zero
     8e8:	000f883a 	mov	r7,zero
     8ec:	00184d40 	call	184d4 <OSTimeDlyHMSM>
			VGA_text(20, 20, "                                    ");
     8f0:	01000504 	movi	r4,20
     8f4:	01400504 	movi	r5,20
     8f8:	018000b4 	movhi	r6,2
     8fc:	31b19f04 	addi	r6,r6,-14724
     900:	000279c0 	call	279c <VGA_text>

			del_number(1);
     904:	01000044 	movi	r4,1
     908:	00028d00 	call	28d0 <del_number>
			del_number(2);
     90c:	01000084 	movi	r4,2
     910:	00028d00 	call	28d0 <del_number>

			score1 = 0;
     914:	d0281d15 	stw	zero,-24460(gp)
			score2 = 0;
     918:	d0281f15 	stw	zero,-24452(gp)

			i = 0;
     91c:	e03ff915 	stw	zero,-28(fp)

			check = 0;
     920:	d0200115 	stw	zero,-32764(gp)
		}

		if (controller(3) == 1) {
     924:	010000c4 	movi	r4,3
     928:	000039c0 	call	39c <controller>
     92c:	10800058 	cmpnei	r2,r2,1
     930:	1000a41e 	bne	r2,zero,bc4 <Game+0x438>

			VGA_box(ALT_x1, ALT_y, ALT_x1 + 5, ALT_y + 5, zwart); // erase
     934:	d1282317 	ldw	r4,-24436(gp)
     938:	d1682017 	ldw	r5,-24448(gp)
     93c:	d0a82317 	ldw	r2,-24436(gp)
     940:	10c00144 	addi	r3,r2,5
     944:	d0a82017 	ldw	r2,-24448(gp)
     948:	10800144 	addi	r2,r2,5
     94c:	d8000015 	stw	zero,0(sp)
     950:	180d883a 	mov	r6,r3
     954:	100f883a 	mov	r7,r2
     958:	00026e80 	call	26e8 <VGA_box>
			if (first == 1) {
     95c:	d0a00017 	ldw	r2,-32768(gp)
     960:	10800058 	cmpnei	r2,r2,1
     964:	10000f1e 	bne	r2,zero,9a4 <Game+0x218>
				ALT_x1 = 160 + ALT_x1 + ALT_inc_x;
     968:	d0a82317 	ldw	r2,-24436(gp)
     96c:	10c02804 	addi	r3,r2,160
     970:	d0a82417 	ldw	r2,-24432(gp)
     974:	1885883a 	add	r2,r3,r2
     978:	d0a82315 	stw	r2,-24436(gp)
				ALT_x2 += ALT_inc_x;
     97c:	d0e82517 	ldw	r3,-24428(gp)
     980:	d0a82417 	ldw	r2,-24432(gp)
     984:	1885883a 	add	r2,r3,r2
     988:	d0a82515 	stw	r2,-24428(gp)
				ALT_y += ALT_inc_y;
     98c:	d0e82017 	ldw	r3,-24448(gp)
     990:	d0a82117 	ldw	r2,-24444(gp)
     994:	1885883a 	add	r2,r3,r2
     998:	d0a82015 	stw	r2,-24448(gp)
				first = 0;
     99c:	d0200015 	stw	zero,-32768(gp)
     9a0:	00000c06 	br	9d4 <Game+0x248>
			} else {
				ALT_x1 += ALT_inc_x;
     9a4:	d0e82317 	ldw	r3,-24436(gp)
     9a8:	d0a82417 	ldw	r2,-24432(gp)
     9ac:	1885883a 	add	r2,r3,r2
     9b0:	d0a82315 	stw	r2,-24436(gp)
				ALT_x2 += ALT_inc_x;
     9b4:	d0e82517 	ldw	r3,-24428(gp)
     9b8:	d0a82417 	ldw	r2,-24432(gp)
     9bc:	1885883a 	add	r2,r3,r2
     9c0:	d0a82515 	stw	r2,-24428(gp)
				ALT_y += ALT_inc_y;
     9c4:	d0e82017 	ldw	r3,-24448(gp)
     9c8:	d0a82117 	ldw	r2,-24444(gp)
     9cc:	1885883a 	add	r2,r3,r2
     9d0:	d0a82015 	stw	r2,-24448(gp)
			}
			VGA_box(ALT_x1, ALT_y, ALT_x1 + 5, ALT_y + 5, wit); // ball
     9d4:	d1282317 	ldw	r4,-24436(gp)
     9d8:	d1682017 	ldw	r5,-24448(gp)
     9dc:	d0a82317 	ldw	r2,-24436(gp)
     9e0:	11800144 	addi	r6,r2,5
     9e4:	d0a82017 	ldw	r2,-24448(gp)
     9e8:	10c00144 	addi	r3,r2,5
     9ec:	00804034 	movhi	r2,256
     9f0:	10bfffc4 	addi	r2,r2,-1
     9f4:	d8800015 	stw	r2,0(sp)
     9f8:	180f883a 	mov	r7,r3
     9fc:	00026e80 	call	26e8 <VGA_box>

			//collision rand boven en onder
			if ((ALT_y == pixel_buffer_y) || (ALT_y == 4)) {
     a00:	d0e82017 	ldw	r3,-24448(gp)
     a04:	d0a81c17 	ldw	r2,-24464(gp)
     a08:	18800326 	beq	r3,r2,a18 <Game+0x28c>
     a0c:	d0a82017 	ldw	r2,-24448(gp)
     a10:	10800118 	cmpnei	r2,r2,4
     a14:	1000031e 	bne	r2,zero,a24 <Game+0x298>
				ALT_inc_y = -(ALT_inc_y);
     a18:	d0a82117 	ldw	r2,-24444(gp)
     a1c:	0085c83a 	sub	r2,zero,r2
     a20:	d0a82115 	stw	r2,-24444(gp)
			if ((ALT_x2 == pixel_buffer_x) || (ALT_x1 == 0)) {
				//ALT_inc_x = -(ALT_inc_x);
			}

			//links dood
			if (ALT_x1 == 0) {
     a24:	d0a82317 	ldw	r2,-24436(gp)
     a28:	1000071e 	bne	r2,zero,a48 <Game+0x2bc>
				score2++;
     a2c:	d0a81f17 	ldw	r2,-24452(gp)
     a30:	10800044 	addi	r2,r2,1
     a34:	d0a81f15 	stw	r2,-24452(gp)
				gescoord(2);
     a38:	01000084 	movi	r4,2
     a3c:	0000c180 	call	c18 <gescoord>
				del_number(2);
     a40:	01000084 	movi	r4,2
     a44:	00028d00 	call	28d0 <del_number>
			}

			//rechts dood
			if (ALT_x2 == pixel_buffer_x) {
     a48:	d0e82517 	ldw	r3,-24428(gp)
     a4c:	d0a81e17 	ldw	r2,-24456(gp)
     a50:	1880071e 	bne	r3,r2,a70 <Game+0x2e4>
				score1++;
     a54:	d0a81d17 	ldw	r2,-24460(gp)
     a58:	10800044 	addi	r2,r2,1
     a5c:	d0a81d15 	stw	r2,-24460(gp)
				gescoord(1);
     a60:	01000044 	movi	r4,1
     a64:	0000c180 	call	c18 <gescoord>
				del_number(1);
     a68:	01000044 	movi	r4,1
     a6c:	00028d00 	call	28d0 <del_number>
			}

			//collision linker balkje
			//lange zijde
			if(ALT_x1 == 21 && (ALT_y > balkje->Hoogte - 6 && ALT_y < balkje->Hoogte + 50)){
     a70:	d0a82317 	ldw	r2,-24436(gp)
     a74:	10800558 	cmpnei	r2,r2,21
     a78:	10000d1e 	bne	r2,zero,ab0 <Game+0x324>
     a7c:	e0bffa17 	ldw	r2,-24(fp)
     a80:	10800017 	ldw	r2,0(r2)
     a84:	10fffe84 	addi	r3,r2,-6
     a88:	d0a82017 	ldw	r2,-24448(gp)
     a8c:	1880080e 	bge	r3,r2,ab0 <Game+0x324>
     a90:	e0bffa17 	ldw	r2,-24(fp)
     a94:	10800017 	ldw	r2,0(r2)
     a98:	10800c84 	addi	r2,r2,50
     a9c:	d0e82017 	ldw	r3,-24448(gp)
     aa0:	1880030e 	bge	r3,r2,ab0 <Game+0x324>
				ALT_inc_x = -(ALT_inc_x);
     aa4:	d0a82417 	ldw	r2,-24432(gp)
     aa8:	0085c83a 	sub	r2,zero,r2
     aac:	d0a82415 	stw	r2,-24432(gp)
			}
			//boven
			if(((ALT_x1 <= 20 && ALT_x1 >= 15) && ALT_y == balkje->Hoogte - 6) || ((ALT_x1 <= 20 && ALT_x1 >= 15) && ALT_y == balkje->Hoogte + 50)){
     ab0:	d0a82317 	ldw	r2,-24436(gp)
     ab4:	10800548 	cmpgei	r2,r2,21
     ab8:	1000081e 	bne	r2,zero,adc <Game+0x350>
     abc:	d0a82317 	ldw	r2,-24436(gp)
     ac0:	108003d0 	cmplti	r2,r2,15
     ac4:	1000051e 	bne	r2,zero,adc <Game+0x350>
     ac8:	e0bffa17 	ldw	r2,-24(fp)
     acc:	10800017 	ldw	r2,0(r2)
     ad0:	10fffe84 	addi	r3,r2,-6
     ad4:	d0a82017 	ldw	r2,-24448(gp)
     ad8:	18800b26 	beq	r3,r2,b08 <Game+0x37c>
     adc:	d0a82317 	ldw	r2,-24436(gp)
     ae0:	10800548 	cmpgei	r2,r2,21
     ae4:	10000b1e 	bne	r2,zero,b14 <Game+0x388>
     ae8:	d0a82317 	ldw	r2,-24436(gp)
     aec:	108003d0 	cmplti	r2,r2,15
     af0:	1000081e 	bne	r2,zero,b14 <Game+0x388>
     af4:	e0bffa17 	ldw	r2,-24(fp)
     af8:	10800017 	ldw	r2,0(r2)
     afc:	10c00c84 	addi	r3,r2,50
     b00:	d0a82017 	ldw	r2,-24448(gp)
     b04:	1880031e 	bne	r3,r2,b14 <Game+0x388>
				ALT_inc_y = -(ALT_inc_y);
     b08:	d0a82117 	ldw	r2,-24444(gp)
     b0c:	0085c83a 	sub	r2,zero,r2
     b10:	d0a82115 	stw	r2,-24444(gp)
			}

			//collision rechter balkje
			//lange zijde
			if(ALT_x2 == 299 && (ALT_y > balkje2->Hoogte - 6 && ALT_y < balkje2->Hoogte + 50)){
     b14:	d0a82517 	ldw	r2,-24428(gp)
     b18:	10804ad8 	cmpnei	r2,r2,299
     b1c:	10000d1e 	bne	r2,zero,b54 <Game+0x3c8>
     b20:	e0bffb17 	ldw	r2,-20(fp)
     b24:	10800017 	ldw	r2,0(r2)
     b28:	10fffe84 	addi	r3,r2,-6
     b2c:	d0a82017 	ldw	r2,-24448(gp)
     b30:	1880080e 	bge	r3,r2,b54 <Game+0x3c8>
     b34:	e0bffb17 	ldw	r2,-20(fp)
     b38:	10800017 	ldw	r2,0(r2)
     b3c:	10800c84 	addi	r2,r2,50
     b40:	d0e82017 	ldw	r3,-24448(gp)
     b44:	1880030e 	bge	r3,r2,b54 <Game+0x3c8>
				ALT_inc_x = -(ALT_inc_x);
     b48:	d0a82417 	ldw	r2,-24432(gp)
     b4c:	0085c83a 	sub	r2,zero,r2
     b50:	d0a82415 	stw	r2,-24432(gp)
			}
			//boven
			if(((ALT_x2 <= 305 && ALT_x2 >= 300) && ALT_y == balkje2->Hoogte - 6) || ((ALT_x2 <= 305 && ALT_x2 >= 300) && ALT_y == balkje2->Hoogte + 50)){
     b54:	d0a82517 	ldw	r2,-24428(gp)
     b58:	10804c88 	cmpgei	r2,r2,306
     b5c:	1000081e 	bne	r2,zero,b80 <Game+0x3f4>
     b60:	d0a82517 	ldw	r2,-24428(gp)
     b64:	10804b10 	cmplti	r2,r2,300
     b68:	1000051e 	bne	r2,zero,b80 <Game+0x3f4>
     b6c:	e0bffb17 	ldw	r2,-20(fp)
     b70:	10800017 	ldw	r2,0(r2)
     b74:	10fffe84 	addi	r3,r2,-6
     b78:	d0a82017 	ldw	r2,-24448(gp)
     b7c:	18800b26 	beq	r3,r2,bac <Game+0x420>
     b80:	d0a82517 	ldw	r2,-24428(gp)
     b84:	10804c88 	cmpgei	r2,r2,306
     b88:	10000b1e 	bne	r2,zero,bb8 <Game+0x42c>
     b8c:	d0a82517 	ldw	r2,-24428(gp)
     b90:	10804b10 	cmplti	r2,r2,300
     b94:	1000081e 	bne	r2,zero,bb8 <Game+0x42c>
     b98:	e0bffb17 	ldw	r2,-20(fp)
     b9c:	10800017 	ldw	r2,0(r2)
     ba0:	10c00c84 	addi	r3,r2,50
     ba4:	d0a82017 	ldw	r2,-24448(gp)
     ba8:	1880031e 	bne	r3,r2,bb8 <Game+0x42c>
				ALT_inc_y = -(ALT_inc_y);
     bac:	d0a82117 	ldw	r2,-24444(gp)
     bb0:	0085c83a 	sub	r2,zero,r2
     bb4:	d0a82115 	stw	r2,-24444(gp)
			}



			OSTimeDly(1);
     bb8:	01000044 	movi	r4,1
     bbc:	001838c0 	call	1838c <OSTimeDly>
     bc0:	00001406 	br	c14 <Game+0x488>

		} else if (controller(3) == 2) {
     bc4:	010000c4 	movi	r4,3
     bc8:	000039c0 	call	39c <controller>
     bcc:	10800098 	cmpnei	r2,r2,2
     bd0:	1000031e 	bne	r2,zero,be0 <Game+0x454>
			//links
			endGame(2);
     bd4:	01000084 	movi	r4,2
     bd8:	0000e3c0 	call	e3c <endGame>
     bdc:	00000d06 	br	c14 <Game+0x488>
		}else if(controller(3) == 3){
     be0:	010000c4 	movi	r4,3
     be4:	000039c0 	call	39c <controller>
     be8:	108000d8 	cmpnei	r2,r2,3
     bec:	1000031e 	bne	r2,zero,bfc <Game+0x470>
			//rechts
			endGame(1);
     bf0:	01000044 	movi	r4,1
     bf4:	0000e3c0 	call	e3c <endGame>
     bf8:	00000606 	br	c14 <Game+0x488>
		} else if(controller(2) != 2){
     bfc:	01000084 	movi	r4,2
     c00:	000039c0 	call	39c <controller>
     c04:	108000a0 	cmpeqi	r2,r2,2
     c08:	1000021e 	bne	r2,zero,c14 <Game+0x488>
			endGame(1);
     c0c:	01000044 	movi	r4,1
     c10:	0000e3c0 	call	e3c <endGame>
		}

	}
     c14:	003ef506 	br	7ec <__alt_mem_Flash_flash_data+0xf40007ec>

00000c18 <gescoord>:
}

void gescoord(int ID){
     c18:	defffc04 	addi	sp,sp,-16
     c1c:	dfc00315 	stw	ra,12(sp)
     c20:	df000215 	stw	fp,8(sp)
     c24:	df000204 	addi	fp,sp,8
     c28:	e13fff15 	stw	r4,-4(fp)

	VGA_box(ALT_x1, ALT_y, ALT_x1 + 5, ALT_y + 5, zwart); // erase
     c2c:	d1282317 	ldw	r4,-24436(gp)
     c30:	d1682017 	ldw	r5,-24448(gp)
     c34:	d0a82317 	ldw	r2,-24436(gp)
     c38:	10c00144 	addi	r3,r2,5
     c3c:	d0a82017 	ldw	r2,-24448(gp)
     c40:	10800144 	addi	r2,r2,5
     c44:	d8000015 	stw	zero,0(sp)
     c48:	180d883a 	mov	r6,r3
     c4c:	100f883a 	mov	r7,r2
     c50:	00026e80 	call	26e8 <VGA_box>

	first = 1;
     c54:	00800044 	movi	r2,1
     c58:	d0a00015 	stw	r2,-32768(gp)

	if(ID == 1){
     c5c:	e0bfff17 	ldw	r2,-4(fp)
     c60:	10800058 	cmpnei	r2,r2,1
     c64:	1000221e 	bne	r2,zero,cf0 <gescoord+0xd8>
		VGA_text(30, 25, "Speler 1 heeft gescoord!");
     c68:	01000784 	movi	r4,30
     c6c:	01400644 	movi	r5,25
     c70:	018000b4 	movhi	r6,2
     c74:	31b1a904 	addi	r6,r6,-14684
     c78:	000279c0 	call	279c <VGA_text>
		OSTimeDlyHMSM(0, 0, 35, 0);
     c7c:	0009883a 	mov	r4,zero
     c80:	000b883a 	mov	r5,zero
     c84:	018008c4 	movi	r6,35
     c88:	000f883a 	mov	r7,zero
     c8c:	00184d40 	call	184d4 <OSTimeDlyHMSM>
		VGA_text(30, 25, "                        ");
     c90:	01000784 	movi	r4,30
     c94:	01400644 	movi	r5,25
     c98:	018000b4 	movhi	r6,2
     c9c:	31b1b004 	addi	r6,r6,-14656
     ca0:	000279c0 	call	279c <VGA_text>
		ALT_x1 = 0;
     ca4:	d0282315 	stw	zero,-24436(gp)
		ALT_x2 = 165;
     ca8:	00802944 	movi	r2,165
     cac:	d0a82515 	stw	r2,-24428(gp)
		ALT_y = 100;
     cb0:	00801904 	movi	r2,100
     cb4:	d0a82015 	stw	r2,-24448(gp)
		ALT_inc_x = -1;
     cb8:	00bfffc4 	movi	r2,-1
     cbc:	d0a82415 	stw	r2,-24432(gp)
		if(random == 1){
     cc0:	d0a81b17 	ldw	r2,-24468(gp)
     cc4:	10800058 	cmpnei	r2,r2,1
     cc8:	1000031e 	bne	r2,zero,cd8 <gescoord+0xc0>
			ALT_inc_y = -1;
     ccc:	00bfffc4 	movi	r2,-1
     cd0:	d0a82115 	stw	r2,-24444(gp)
     cd4:	00000506 	br	cec <gescoord+0xd4>
			random == 0;
		}else if(random == 0){
     cd8:	d0a81b17 	ldw	r2,-24468(gp)
     cdc:	1000031e 	bne	r2,zero,cec <gescoord+0xd4>
			ALT_inc_y = 1;
     ce0:	00800044 	movi	r2,1
     ce4:	d0a82115 	stw	r2,-24444(gp)
     ce8:	00004f06 	br	e28 <gescoord+0x210>
     cec:	00004e06 	br	e28 <gescoord+0x210>
			random == 1;
		}
	}else if(ID == 2){
     cf0:	e0bfff17 	ldw	r2,-4(fp)
     cf4:	10800098 	cmpnei	r2,r2,2
     cf8:	1000251e 	bne	r2,zero,d90 <gescoord+0x178>
		VGA_text(30, 25, "Speler 2 heeft gescoord!");
     cfc:	01000784 	movi	r4,30
     d00:	01400644 	movi	r5,25
     d04:	018000b4 	movhi	r6,2
     d08:	31b1b704 	addi	r6,r6,-14628
     d0c:	000279c0 	call	279c <VGA_text>
		OSTimeDlyHMSM(0, 0, 35, 0);
     d10:	0009883a 	mov	r4,zero
     d14:	000b883a 	mov	r5,zero
     d18:	018008c4 	movi	r6,35
     d1c:	000f883a 	mov	r7,zero
     d20:	00184d40 	call	184d4 <OSTimeDlyHMSM>
		VGA_text(30, 25, "                        ");
     d24:	01000784 	movi	r4,30
     d28:	01400644 	movi	r5,25
     d2c:	018000b4 	movhi	r6,2
     d30:	31b1b004 	addi	r6,r6,-14656
     d34:	000279c0 	call	279c <VGA_text>
		ALT_x1 = 0;
     d38:	d0282315 	stw	zero,-24436(gp)
		ALT_x2 = 165;
     d3c:	00802944 	movi	r2,165
     d40:	d0a82515 	stw	r2,-24428(gp)
		ALT_y = 100;
     d44:	00801904 	movi	r2,100
     d48:	d0a82015 	stw	r2,-24448(gp)
		ALT_inc_x = 1;
     d4c:	00800044 	movi	r2,1
     d50:	d0a82415 	stw	r2,-24432(gp)
		if(random == 1){
     d54:	d0a81b17 	ldw	r2,-24468(gp)
     d58:	10800058 	cmpnei	r2,r2,1
     d5c:	1000041e 	bne	r2,zero,d70 <gescoord+0x158>
			ALT_inc_y = 1;
     d60:	00800044 	movi	r2,1
     d64:	d0a82115 	stw	r2,-24444(gp)
			random = 0;
     d68:	d0281b15 	stw	zero,-24468(gp)
     d6c:	00000706 	br	d8c <gescoord+0x174>
		}else if(random == 0){
     d70:	d0a81b17 	ldw	r2,-24468(gp)
     d74:	1000051e 	bne	r2,zero,d8c <gescoord+0x174>
			ALT_inc_y = -1;
     d78:	00bfffc4 	movi	r2,-1
     d7c:	d0a82115 	stw	r2,-24444(gp)
			random = 1;
     d80:	00800044 	movi	r2,1
     d84:	d0a81b15 	stw	r2,-24468(gp)
     d88:	00002706 	br	e28 <gescoord+0x210>
     d8c:	00002606 	br	e28 <gescoord+0x210>
		}
	}else if(ID == 3){
     d90:	e0bfff17 	ldw	r2,-4(fp)
     d94:	108000d8 	cmpnei	r2,r2,3
     d98:	1000231e 	bne	r2,zero,e28 <gescoord+0x210>
		VGA_text(30, 25, "De computer heeft gescoord!");
     d9c:	01000784 	movi	r4,30
     da0:	01400644 	movi	r5,25
     da4:	018000b4 	movhi	r6,2
     da8:	31b1be04 	addi	r6,r6,-14600
     dac:	000279c0 	call	279c <VGA_text>
		OSTimeDlyHMSM(0, 0, 35, 0);
     db0:	0009883a 	mov	r4,zero
     db4:	000b883a 	mov	r5,zero
     db8:	018008c4 	movi	r6,35
     dbc:	000f883a 	mov	r7,zero
     dc0:	00184d40 	call	184d4 <OSTimeDlyHMSM>
		VGA_text(30, 25, "                           ");
     dc4:	01000784 	movi	r4,30
     dc8:	01400644 	movi	r5,25
     dcc:	018000b4 	movhi	r6,2
     dd0:	31b1c504 	addi	r6,r6,-14572
     dd4:	000279c0 	call	279c <VGA_text>
		ALT_x1 = 0;
     dd8:	d0282315 	stw	zero,-24436(gp)
		ALT_x2 = 165;
     ddc:	00802944 	movi	r2,165
     de0:	d0a82515 	stw	r2,-24428(gp)
		ALT_y = 100;
     de4:	00801904 	movi	r2,100
     de8:	d0a82015 	stw	r2,-24448(gp)
		ALT_inc_x = -1;
     dec:	00bfffc4 	movi	r2,-1
     df0:	d0a82415 	stw	r2,-24432(gp)
		if(random == 1){
     df4:	d0a81b17 	ldw	r2,-24468(gp)
     df8:	10800058 	cmpnei	r2,r2,1
     dfc:	1000041e 	bne	r2,zero,e10 <gescoord+0x1f8>
			ALT_inc_y = 1;
     e00:	00800044 	movi	r2,1
     e04:	d0a82115 	stw	r2,-24444(gp)
			random = 0;
     e08:	d0281b15 	stw	zero,-24468(gp)
     e0c:	00000606 	br	e28 <gescoord+0x210>
		}else if(random == 0){
     e10:	d0a81b17 	ldw	r2,-24468(gp)
     e14:	1000041e 	bne	r2,zero,e28 <gescoord+0x210>
			ALT_inc_y = -1;
     e18:	00bfffc4 	movi	r2,-1
     e1c:	d0a82115 	stw	r2,-24444(gp)
			random = 1;
     e20:	00800044 	movi	r2,1
     e24:	d0a81b15 	stw	r2,-24468(gp)
		}
	}

}
     e28:	e037883a 	mov	sp,fp
     e2c:	dfc00117 	ldw	ra,4(sp)
     e30:	df000017 	ldw	fp,0(sp)
     e34:	dec00204 	addi	sp,sp,8
     e38:	f800283a 	ret

00000e3c <endGame>:

void endGame(int ID) {
     e3c:	defffb04 	addi	sp,sp,-20
     e40:	dfc00415 	stw	ra,16(sp)
     e44:	df000315 	stw	fp,12(sp)
     e48:	df000304 	addi	fp,sp,12
     e4c:	e13fff15 	stw	r4,-4(fp)
	INT8U err;

	printf("end game\n");
     e50:	010000b4 	movhi	r4,2
     e54:	2131cc04 	addi	r4,r4,-14544
     e58:	00031600 	call	3160 <puts>

	clearScreen();
     e5c:	00021c40 	call	21c4 <clearScreen>

	OSFlagPost(Flags, C1_Flag + C2_Flag, OS_FLAG_SET, &err);
     e60:	d0a81717 	ldw	r2,-24484(gp)
     e64:	1009883a 	mov	r4,r2
     e68:	01400304 	movi	r5,12
     e6c:	01800044 	movi	r6,1
     e70:	e1fffe04 	addi	r7,fp,-8
     e74:	00131d00 	call	131d0 <OSFlagPost>
	OSFlagPost(Flags_Games, Game_Flag, OS_FLAG_SET, &err);
     e78:	d0a81517 	ldw	r2,-24492(gp)
     e7c:	1009883a 	mov	r4,r2
     e80:	01400084 	movi	r5,2
     e84:	01800044 	movi	r6,1
     e88:	e1fffe04 	addi	r7,fp,-8
     e8c:	00131d00 	call	131d0 <OSFlagPost>


	if(ID == 1){
     e90:	e0bfff17 	ldw	r2,-4(fp)
     e94:	10800058 	cmpnei	r2,r2,1
     e98:	1000101e 	bne	r2,zero,edc <endGame+0xa0>
		VGA_text(35, 25, "Player 1 lost");
     e9c:	010008c4 	movi	r4,35
     ea0:	01400644 	movi	r5,25
     ea4:	018000b4 	movhi	r6,2
     ea8:	31b1cf04 	addi	r6,r6,-14532
     eac:	000279c0 	call	279c <VGA_text>
		OSTimeDlyHMSM(0, 0, 40, 0);
     eb0:	0009883a 	mov	r4,zero
     eb4:	000b883a 	mov	r5,zero
     eb8:	01800a04 	movi	r6,40
     ebc:	000f883a 	mov	r7,zero
     ec0:	00184d40 	call	184d4 <OSTimeDlyHMSM>
		VGA_text(35, 25, "             ");
     ec4:	010008c4 	movi	r4,35
     ec8:	01400644 	movi	r5,25
     ecc:	018000b4 	movhi	r6,2
     ed0:	31b1d304 	addi	r6,r6,-14516
     ed4:	000279c0 	call	279c <VGA_text>
     ed8:	00001206 	br	f24 <endGame+0xe8>
	} else if(ID == 2){
     edc:	e0bfff17 	ldw	r2,-4(fp)
     ee0:	10800098 	cmpnei	r2,r2,2
     ee4:	10000f1e 	bne	r2,zero,f24 <endGame+0xe8>
		VGA_text(35, 25, "Player 2 lost");
     ee8:	010008c4 	movi	r4,35
     eec:	01400644 	movi	r5,25
     ef0:	018000b4 	movhi	r6,2
     ef4:	31b1d704 	addi	r6,r6,-14500
     ef8:	000279c0 	call	279c <VGA_text>
		OSTimeDlyHMSM(0, 0, 40, 0);
     efc:	0009883a 	mov	r4,zero
     f00:	000b883a 	mov	r5,zero
     f04:	01800a04 	movi	r6,40
     f08:	000f883a 	mov	r7,zero
     f0c:	00184d40 	call	184d4 <OSTimeDlyHMSM>
		VGA_text(35, 25, "             ");
     f10:	010008c4 	movi	r4,35
     f14:	01400644 	movi	r5,25
     f18:	018000b4 	movhi	r6,2
     f1c:	31b1d304 	addi	r6,r6,-14516
     f20:	000279c0 	call	279c <VGA_text>
	}


	OSFlagPost(Flags, Menu_Flag + Menu2_Flag, OS_FLAG_CLR, &err);
     f24:	d0a81717 	ldw	r2,-24484(gp)
     f28:	1009883a 	mov	r4,r2
     f2c:	01400444 	movi	r5,17
     f30:	000d883a 	mov	r6,zero
     f34:	e1fffe04 	addi	r7,fp,-8
     f38:	00131d00 	call	131d0 <OSFlagPost>

	teken_menu(2);
     f3c:	01000084 	movi	r4,2
     f40:	00023840 	call	2384 <teken_menu>
	deleteNummer();
     f44:	00029400 	call	2940 <deleteNummer>


	VGA_box(ALT_x1, ALT_y, ALT_x1 + 5, ALT_y + 5, zwart); // erase
     f48:	d1282317 	ldw	r4,-24436(gp)
     f4c:	d1682017 	ldw	r5,-24448(gp)
     f50:	d0a82317 	ldw	r2,-24436(gp)
     f54:	10c00144 	addi	r3,r2,5
     f58:	d0a82017 	ldw	r2,-24448(gp)
     f5c:	10800144 	addi	r2,r2,5
     f60:	d8000015 	stw	zero,0(sp)
     f64:	180d883a 	mov	r6,r3
     f68:	100f883a 	mov	r7,r2
     f6c:	00026e80 	call	26e8 <VGA_box>

	ALT_x1 = 0;
     f70:	d0282315 	stw	zero,-24436(gp)
	ALT_x2 = 165;
     f74:	00802944 	movi	r2,165
     f78:	d0a82515 	stw	r2,-24428(gp)
	ALT_y = 100;
     f7c:	00801904 	movi	r2,100
     f80:	d0a82015 	stw	r2,-24448(gp)
	ALT_inc_x = 1;
     f84:	00800044 	movi	r2,1
     f88:	d0a82415 	stw	r2,-24432(gp)
	ALT_inc_y = 1;
     f8c:	00800044 	movi	r2,1
     f90:	d0a82115 	stw	r2,-24444(gp)

	check = 1;
     f94:	00800044 	movi	r2,1
     f98:	d0a00115 	stw	r2,-32764(gp)
	first = 1;
     f9c:	00800044 	movi	r2,1
     fa0:	d0a00015 	stw	r2,-32768(gp)

}
     fa4:	e037883a 	mov	sp,fp
     fa8:	dfc00117 	ldw	ra,4(sp)
     fac:	df000017 	ldw	fp,0(sp)
     fb0:	dec00204 	addi	sp,sp,8
     fb4:	f800283a 	ret

00000fb8 <endSingleplayer>:

void endSingleplayer(){
     fb8:	defffc04 	addi	sp,sp,-16
     fbc:	dfc00315 	stw	ra,12(sp)
     fc0:	df000215 	stw	fp,8(sp)
     fc4:	df000204 	addi	fp,sp,8
	INT8U err;

	printf("end Singleplayer\n");
     fc8:	010000b4 	movhi	r4,2
     fcc:	2131db04 	addi	r4,r4,-14484
     fd0:	00031600 	call	3160 <puts>

	//clearScreen();

	OSFlagPost(Flags, C1_Flag, OS_FLAG_SET, &err);
     fd4:	d0a81717 	ldw	r2,-24484(gp)
     fd8:	1009883a 	mov	r4,r2
     fdc:	01400104 	movi	r5,4
     fe0:	01800044 	movi	r6,1
     fe4:	e1ffff04 	addi	r7,fp,-4
     fe8:	00131d00 	call	131d0 <OSFlagPost>

	VGA_text(35, 25, "GAME OVER");
     fec:	010008c4 	movi	r4,35
     ff0:	01400644 	movi	r5,25
     ff4:	018000b4 	movhi	r6,2
     ff8:	31b1e004 	addi	r6,r6,-14464
     ffc:	000279c0 	call	279c <VGA_text>
	OSTimeDlyHMSM(0, 0, 40, 0);
    1000:	0009883a 	mov	r4,zero
    1004:	000b883a 	mov	r5,zero
    1008:	01800a04 	movi	r6,40
    100c:	000f883a 	mov	r7,zero
    1010:	00184d40 	call	184d4 <OSTimeDlyHMSM>
	VGA_text(35, 25, "         ");
    1014:	010008c4 	movi	r4,35
    1018:	01400644 	movi	r5,25
    101c:	018000b4 	movhi	r6,2
    1020:	31b1e304 	addi	r6,r6,-14452
    1024:	000279c0 	call	279c <VGA_text>




	teken_menu(1);
    1028:	01000044 	movi	r4,1
    102c:	00023840 	call	2384 <teken_menu>

	VGA_box (316, 4, 319, 235, zwart); 					// singleplayer balk weghalen voor de zekerheid
    1030:	d8000015 	stw	zero,0(sp)
    1034:	01004f04 	movi	r4,316
    1038:	01400104 	movi	r5,4
    103c:	01804fc4 	movi	r6,319
    1040:	01c03ac4 	movi	r7,235
    1044:	00026e80 	call	26e8 <VGA_box>

	VGA_box(ALT_x1, ALT_y, ALT_x1 + 5, ALT_y + 5, zwart); // erase
    1048:	d1282317 	ldw	r4,-24436(gp)
    104c:	d1682017 	ldw	r5,-24448(gp)
    1050:	d0a82317 	ldw	r2,-24436(gp)
    1054:	10c00144 	addi	r3,r2,5
    1058:	d0a82017 	ldw	r2,-24448(gp)
    105c:	10800144 	addi	r2,r2,5
    1060:	d8000015 	stw	zero,0(sp)
    1064:	180d883a 	mov	r6,r3
    1068:	100f883a 	mov	r7,r2
    106c:	00026e80 	call	26e8 <VGA_box>
	deleteNummer();
    1070:	00029400 	call	2940 <deleteNummer>


	ALT_x1 = 0;
    1074:	d0282315 	stw	zero,-24436(gp)
	ALT_x2 = 165;
    1078:	00802944 	movi	r2,165
    107c:	d0a82515 	stw	r2,-24428(gp)
	ALT_y = 100;
    1080:	00801904 	movi	r2,100
    1084:	d0a82015 	stw	r2,-24448(gp)
	ALT_inc_x = -1;
    1088:	00bfffc4 	movi	r2,-1
    108c:	d0a82415 	stw	r2,-24432(gp)
	ALT_inc_y = 1;
    1090:	00800044 	movi	r2,1
    1094:	d0a82115 	stw	r2,-24444(gp)

	leven = beginLevens;
    1098:	008000c4 	movi	r2,3
    109c:	d0a00215 	stw	r2,-32760(gp)
	score3 = 0;
    10a0:	d0281a15 	stw	zero,-24472(gp)
	first = 1;
    10a4:	00800044 	movi	r2,1
    10a8:	d0a00015 	stw	r2,-32768(gp)

	OSFlagPost(Flags, Menu_Flag + Menu2_Flag, OS_FLAG_CLR, &err);
    10ac:	d0a81717 	ldw	r2,-24484(gp)
    10b0:	1009883a 	mov	r4,r2
    10b4:	01400444 	movi	r5,17
    10b8:	000d883a 	mov	r6,zero
    10bc:	e1ffff04 	addi	r7,fp,-4
    10c0:	00131d00 	call	131d0 <OSFlagPost>

	OSFlagPost(Flags_Games, Singleplayer_Flag, OS_FLAG_SET, &err);
    10c4:	d0a81517 	ldw	r2,-24492(gp)
    10c8:	1009883a 	mov	r4,r2
    10cc:	01400804 	movi	r5,32
    10d0:	01800044 	movi	r6,1
    10d4:	e1ffff04 	addi	r7,fp,-4
    10d8:	00131d00 	call	131d0 <OSFlagPost>

}
    10dc:	e037883a 	mov	sp,fp
    10e0:	dfc00117 	ldw	ra,4(sp)
    10e4:	df000017 	ldw	fp,0(sp)
    10e8:	dec00204 	addi	sp,sp,8
    10ec:	f800283a 	ret

000010f0 <Singleplayer>:

void Singleplayer(void* pdata){
    10f0:	defff904 	addi	sp,sp,-28
    10f4:	dfc00615 	stw	ra,24(sp)
    10f8:	df000515 	stw	fp,20(sp)
    10fc:	df000504 	addi	fp,sp,20
    1100:	e13fff15 	stw	r4,-4(fp)
	
	ALT_x1 = 0;
    1104:	d0282315 	stw	zero,-24436(gp)
	ALT_x2 = 165;
    1108:	00802944 	movi	r2,165
    110c:	d0a82515 	stw	r2,-24428(gp)
	ALT_y = 100;
    1110:	00801904 	movi	r2,100
    1114:	d0a82015 	stw	r2,-24448(gp)
	ALT_inc_x = -1;
    1118:	00bfffc4 	movi	r2,-1
    111c:	d0a82415 	stw	r2,-24432(gp)
	ALT_inc_y = 1;
    1120:	00800044 	movi	r2,1
    1124:	d0a82115 	stw	r2,-24444(gp)

	pixel_buffer_x = 315;
    1128:	00804ec4 	movi	r2,315
    112c:	d0a81e15 	stw	r2,-24456(gp)
	pixel_buffer_y = 230;
    1130:	00803984 	movi	r2,230
    1134:	d0a81c15 	stw	r2,-24464(gp)
	int ID;
	int count;
	int q;
	Balk * balkje;
	
	score3 = 0;
    1138:	d0281a15 	stw	zero,-24472(gp)
	

	while (1) {
		OSFlagPend(Flags_Games, Singleplayer_Flag, OS_FLAG_WAIT_CLR_ALL, 0, &err);
    113c:	d0e81517 	ldw	r3,-24492(gp)
    1140:	e0bffe04 	addi	r2,fp,-8
    1144:	d8800015 	stw	r2,0(sp)
    1148:	1809883a 	mov	r4,r3
    114c:	01400804 	movi	r5,32
    1150:	000d883a 	mov	r6,zero
    1154:	000f883a 	mov	r7,zero
    1158:	0012b780 	call	12b78 <OSFlagPend>

		//printf("Single flag is set\n");

		balkje = (Balk*) OSMboxPend(MailBox, 0, &err);
    115c:	d0e81817 	ldw	r3,-24480(gp)
    1160:	e0bffe04 	addi	r2,fp,-8
    1164:	1809883a 	mov	r4,r3
    1168:	000b883a 	mov	r5,zero
    116c:	100d883a 	mov	r6,r2
    1170:	0013e700 	call	13e70 <OSMboxPend>
    1174:	e0bffd15 	stw	r2,-12(fp)

		//printf("ID is: %d\tHoogte is: %d\n", balkje->ID, balkje->Hoogte);

		for (i = 0; i <= 999; i++) {
    1178:	e03ffc15 	stw	zero,-16(fp)
    117c:	00004906 	br	12a4 <Singleplayer+0x1b4>

			if(score3 == i){
    1180:	d0e81a17 	ldw	r3,-24472(gp)
    1184:	e0bffc17 	ldw	r2,-16(fp)
    1188:	18803c1e 	bne	r3,r2,127c <Singleplayer+0x18c>

				if (score3 >= 0 && score3 <= 9){
    118c:	d0a81a17 	ldw	r2,-24472(gp)
    1190:	10000716 	blt	r2,zero,11b0 <Singleplayer+0xc0>
    1194:	d0a81a17 	ldw	r2,-24472(gp)
    1198:	10800288 	cmpgei	r2,r2,10
    119c:	1000041e 	bne	r2,zero,11b0 <Singleplayer+0xc0>
					draw_number(i, 3);
    11a0:	e13ffc17 	ldw	r4,-16(fp)
    11a4:	014000c4 	movi	r5,3
    11a8:	000297c0 	call	297c <draw_number>

		for (i = 0; i <= 999; i++) {

			if(score3 == i){

				if (score3 >= 0 && score3 <= 9){
    11ac:	00003306 	br	127c <Singleplayer+0x18c>
					draw_number(i, 3);
				} else if (score3 >= 10 && score3 <= 99){
    11b0:	d0a81a17 	ldw	r2,-24472(gp)
    11b4:	10800290 	cmplti	r2,r2,10
    11b8:	1000121e 	bne	r2,zero,1204 <Singleplayer+0x114>
    11bc:	d0a81a17 	ldw	r2,-24472(gp)
    11c0:	10801908 	cmpgei	r2,r2,100
    11c4:	10000f1e 	bne	r2,zero,1204 <Singleplayer+0x114>
					draw_number(i /10 , 2);
    11c8:	e0fffc17 	ldw	r3,-16(fp)
    11cc:	00800284 	movi	r2,10
    11d0:	1885283a 	div	r2,r3,r2
    11d4:	1009883a 	mov	r4,r2
    11d8:	01400084 	movi	r5,2
    11dc:	000297c0 	call	297c <draw_number>
					draw_number(i %10, 3);
    11e0:	e0bffc17 	ldw	r2,-16(fp)
    11e4:	00c00284 	movi	r3,10
    11e8:	10c7283a 	div	r3,r2,r3
    11ec:	18c002a4 	muli	r3,r3,10
    11f0:	10c5c83a 	sub	r2,r2,r3
    11f4:	1009883a 	mov	r4,r2
    11f8:	014000c4 	movi	r5,3
    11fc:	000297c0 	call	297c <draw_number>

			if(score3 == i){

				if (score3 >= 0 && score3 <= 9){
					draw_number(i, 3);
				} else if (score3 >= 10 && score3 <= 99){
    1200:	00001e06 	br	127c <Singleplayer+0x18c>
					draw_number(i /10 , 2);
					draw_number(i %10, 3);
				} else if (score3 >= 100 && score3 <= 999){
    1204:	d0a81a17 	ldw	r2,-24472(gp)
    1208:	10801910 	cmplti	r2,r2,100
    120c:	10001b1e 	bne	r2,zero,127c <Singleplayer+0x18c>
    1210:	d0a81a17 	ldw	r2,-24472(gp)
    1214:	1080fa08 	cmpgei	r2,r2,1000
    1218:	1000181e 	bne	r2,zero,127c <Singleplayer+0x18c>
					draw_number(i /100 , 1);
    121c:	e0fffc17 	ldw	r3,-16(fp)
    1220:	00801904 	movi	r2,100
    1224:	1885283a 	div	r2,r3,r2
    1228:	1009883a 	mov	r4,r2
    122c:	01400044 	movi	r5,1
    1230:	000297c0 	call	297c <draw_number>
					draw_number(i /10 %10, 2);
    1234:	e0fffc17 	ldw	r3,-16(fp)
    1238:	00800284 	movi	r2,10
    123c:	1885283a 	div	r2,r3,r2
    1240:	00c00284 	movi	r3,10
    1244:	10c7283a 	div	r3,r2,r3
    1248:	18c002a4 	muli	r3,r3,10
    124c:	10c5c83a 	sub	r2,r2,r3
    1250:	1009883a 	mov	r4,r2
    1254:	01400084 	movi	r5,2
    1258:	000297c0 	call	297c <draw_number>
					draw_number(i %10, 3);
    125c:	e0bffc17 	ldw	r2,-16(fp)
    1260:	00c00284 	movi	r3,10
    1264:	10c7283a 	div	r3,r2,r3
    1268:	18c002a4 	muli	r3,r3,10
    126c:	10c5c83a 	sub	r2,r2,r3
    1270:	1009883a 	mov	r4,r2
    1274:	014000c4 	movi	r5,3
    1278:	000297c0 	call	297c <draw_number>
				}
			}
			if((score3 == 999) || (leven == 0)){ // max score of geen levens meer, spel eindigt.
    127c:	d0a81a17 	ldw	r2,-24472(gp)
    1280:	1080f9e0 	cmpeqi	r2,r2,999
    1284:	1000021e 	bne	r2,zero,1290 <Singleplayer+0x1a0>
    1288:	d0a00217 	ldw	r2,-32760(gp)
    128c:	1000021e 	bne	r2,zero,1298 <Singleplayer+0x1a8>
				score3 =0;
    1290:	d0281a15 	stw	zero,-24472(gp)
				endSingleplayer();
    1294:	0000fb80 	call	fb8 <endSingleplayer>

		balkje = (Balk*) OSMboxPend(MailBox, 0, &err);

		//printf("ID is: %d\tHoogte is: %d\n", balkje->ID, balkje->Hoogte);

		for (i = 0; i <= 999; i++) {
    1298:	e0bffc17 	ldw	r2,-16(fp)
    129c:	10800044 	addi	r2,r2,1
    12a0:	e0bffc15 	stw	r2,-16(fp)
    12a4:	e0bffc17 	ldw	r2,-16(fp)
    12a8:	1080fa10 	cmplti	r2,r2,1000
    12ac:	103fb41e 	bne	r2,zero,1180 <__alt_mem_Flash_flash_data+0xf4001180>
				endSingleplayer();
			}
		}


		VGA_box(ALT_x1, ALT_y, ALT_x1 + 5, ALT_y + 5, zwart); // erase
    12b0:	d1282317 	ldw	r4,-24436(gp)
    12b4:	d1682017 	ldw	r5,-24448(gp)
    12b8:	d0a82317 	ldw	r2,-24436(gp)
    12bc:	10c00144 	addi	r3,r2,5
    12c0:	d0a82017 	ldw	r2,-24448(gp)
    12c4:	10800144 	addi	r2,r2,5
    12c8:	d8000015 	stw	zero,0(sp)
    12cc:	180d883a 	mov	r6,r3
    12d0:	100f883a 	mov	r7,r2
    12d4:	00026e80 	call	26e8 <VGA_box>

		if (first == 1) {
    12d8:	d0a00017 	ldw	r2,-32768(gp)
    12dc:	10800058 	cmpnei	r2,r2,1
    12e0:	1000201e 	bne	r2,zero,1364 <Singleplayer+0x274>
			printf("FIRST");
    12e4:	010000b4 	movhi	r4,2
    12e8:	2131e604 	addi	r4,r4,-14440
    12ec:	000307c0 	call	307c <printf>
			ALT_x1 = 160 + ALT_x1 + ALT_inc_x;
    12f0:	d0a82317 	ldw	r2,-24436(gp)
    12f4:	10c02804 	addi	r3,r2,160
    12f8:	d0a82417 	ldw	r2,-24432(gp)
    12fc:	1885883a 	add	r2,r3,r2
    1300:	d0a82315 	stw	r2,-24436(gp)
			ALT_x2 += ALT_inc_x;
    1304:	d0e82517 	ldw	r3,-24428(gp)
    1308:	d0a82417 	ldw	r2,-24432(gp)
    130c:	1885883a 	add	r2,r3,r2
    1310:	d0a82515 	stw	r2,-24428(gp)
			ALT_y += ALT_inc_y;
    1314:	d0e82017 	ldw	r3,-24448(gp)
    1318:	d0a82117 	ldw	r2,-24444(gp)
    131c:	1885883a 	add	r2,r3,r2
    1320:	d0a82015 	stw	r2,-24448(gp)

			del_middenlijn();
    1324:	00028940 	call	2894 <del_middenlijn>
			VGA_box (316, 0, 319, 239, groen); 					// rechts
    1328:	0081a5c4 	movi	r2,1687
    132c:	d8800015 	stw	r2,0(sp)
    1330:	01004f04 	movi	r4,316
    1334:	000b883a 	mov	r5,zero
    1338:	01804fc4 	movi	r6,319
    133c:	01c03bc4 	movi	r7,239
    1340:	00026e80 	call	26e8 <VGA_box>
			VGA_box(300, 4, 305, 235, zwart);
    1344:	d8000015 	stw	zero,0(sp)
    1348:	01004b04 	movi	r4,300
    134c:	01400104 	movi	r5,4
    1350:	01804c44 	movi	r6,305
    1354:	01c03ac4 	movi	r7,235
    1358:	00026e80 	call	26e8 <VGA_box>

			first = 0;
    135c:	d0200015 	stw	zero,-32768(gp)
    1360:	00000c06 	br	1394 <Singleplayer+0x2a4>
		} else {
			ALT_x1 += ALT_inc_x;
    1364:	d0e82317 	ldw	r3,-24436(gp)
    1368:	d0a82417 	ldw	r2,-24432(gp)
    136c:	1885883a 	add	r2,r3,r2
    1370:	d0a82315 	stw	r2,-24436(gp)
			ALT_x2 += ALT_inc_x;
    1374:	d0e82517 	ldw	r3,-24428(gp)
    1378:	d0a82417 	ldw	r2,-24432(gp)
    137c:	1885883a 	add	r2,r3,r2
    1380:	d0a82515 	stw	r2,-24428(gp)
			ALT_y += ALT_inc_y;
    1384:	d0e82017 	ldw	r3,-24448(gp)
    1388:	d0a82117 	ldw	r2,-24444(gp)
    138c:	1885883a 	add	r2,r3,r2
    1390:	d0a82015 	stw	r2,-24448(gp)
		}


		//collision rand boven en onder
		if ((ALT_y == pixel_buffer_y) || (ALT_y == 4)) {
    1394:	d0e82017 	ldw	r3,-24448(gp)
    1398:	d0a81c17 	ldw	r2,-24464(gp)
    139c:	18800326 	beq	r3,r2,13ac <Singleplayer+0x2bc>
    13a0:	d0a82017 	ldw	r2,-24448(gp)
    13a4:	10800118 	cmpnei	r2,r2,4
    13a8:	1000031e 	bne	r2,zero,13b8 <Singleplayer+0x2c8>
			ALT_inc_y = -(ALT_inc_y);
    13ac:	d0a82117 	ldw	r2,-24444(gp)
    13b0:	0085c83a 	sub	r2,zero,r2
    13b4:	d0a82115 	stw	r2,-24444(gp)
		}
		//collision rand rechts en links
		if ((ALT_x2 == pixel_buffer_x)) {
    13b8:	d0e82517 	ldw	r3,-24428(gp)
    13bc:	d0a81e17 	ldw	r2,-24456(gp)
    13c0:	1880071e 	bne	r3,r2,13e0 <Singleplayer+0x2f0>
			ALT_inc_x = -(ALT_inc_x);
    13c4:	d0a82417 	ldw	r2,-24432(gp)
    13c8:	0085c83a 	sub	r2,zero,r2
    13cc:	d0a82415 	stw	r2,-24432(gp)
			deleteNummer();
    13d0:	00029400 	call	2940 <deleteNummer>
			score3++;
    13d4:	d0a81a17 	ldw	r2,-24472(gp)
    13d8:	10800044 	addi	r2,r2,1
    13dc:	d0a81a15 	stw	r2,-24472(gp)

		}

		VGA_box(ALT_x1, ALT_y, ALT_x1 + 5, ALT_y + 5, wit); // ball
    13e0:	d1282317 	ldw	r4,-24436(gp)
    13e4:	d1682017 	ldw	r5,-24448(gp)
    13e8:	d0a82317 	ldw	r2,-24436(gp)
    13ec:	11800144 	addi	r6,r2,5
    13f0:	d0a82017 	ldw	r2,-24448(gp)
    13f4:	10c00144 	addi	r3,r2,5
    13f8:	00804034 	movhi	r2,256
    13fc:	10bfffc4 	addi	r2,r2,-1
    1400:	d8800015 	stw	r2,0(sp)
    1404:	180f883a 	mov	r7,r3
    1408:	00026e80 	call	26e8 <VGA_box>

		//links dood
		if (ALT_x1 == 0) {
    140c:	d0a82317 	ldw	r2,-24436(gp)
    1410:	1000051e 	bne	r2,zero,1428 <Singleplayer+0x338>
			leven--;
    1414:	d0a00217 	ldw	r2,-32760(gp)
    1418:	10bfffc4 	addi	r2,r2,-1
    141c:	d0a00215 	stw	r2,-32760(gp)
			gescoord(3);
    1420:	010000c4 	movi	r4,3
    1424:	0000c180 	call	c18 <gescoord>
//				score3++;
//			}

		//collision linker balkje
		//lange zijde
		if(ALT_x1 == 21 && (ALT_y > balkje->Hoogte && ALT_y < balkje->Hoogte + 50)){
    1428:	d0a82317 	ldw	r2,-24436(gp)
    142c:	10800558 	cmpnei	r2,r2,21
    1430:	10000c1e 	bne	r2,zero,1464 <Singleplayer+0x374>
    1434:	e0bffd17 	ldw	r2,-12(fp)
    1438:	10c00017 	ldw	r3,0(r2)
    143c:	d0a82017 	ldw	r2,-24448(gp)
    1440:	1880080e 	bge	r3,r2,1464 <Singleplayer+0x374>
    1444:	e0bffd17 	ldw	r2,-12(fp)
    1448:	10800017 	ldw	r2,0(r2)
    144c:	10800c84 	addi	r2,r2,50
    1450:	d0e82017 	ldw	r3,-24448(gp)
    1454:	1880030e 	bge	r3,r2,1464 <Singleplayer+0x374>
			ALT_inc_x = -(ALT_inc_x);
    1458:	d0a82417 	ldw	r2,-24432(gp)
    145c:	0085c83a 	sub	r2,zero,r2
    1460:	d0a82415 	stw	r2,-24432(gp)
		}
		//boven
		if((ALT_x1 < 24 && ALT_x1 > 21) && ALT_y == balkje->Hoogte){
    1464:	d0a82317 	ldw	r2,-24436(gp)
    1468:	10800608 	cmpgei	r2,r2,24
    146c:	10000a1e 	bne	r2,zero,1498 <Singleplayer+0x3a8>
    1470:	d0a82317 	ldw	r2,-24436(gp)
    1474:	10800590 	cmplti	r2,r2,22
    1478:	1000071e 	bne	r2,zero,1498 <Singleplayer+0x3a8>
    147c:	e0bffd17 	ldw	r2,-12(fp)
    1480:	10c00017 	ldw	r3,0(r2)
    1484:	d0a82017 	ldw	r2,-24448(gp)
    1488:	1880031e 	bne	r3,r2,1498 <Singleplayer+0x3a8>
			ALT_inc_y = -(ALT_inc_y);
    148c:	d0a82117 	ldw	r2,-24444(gp)
    1490:	0085c83a 	sub	r2,zero,r2
    1494:	d0a82115 	stw	r2,-24444(gp)
		}
		//onder
		if((ALT_x1 < 24 && ALT_x1 > 21) && ALT_y == balkje->Hoogte + 50){
    1498:	d0a82317 	ldw	r2,-24436(gp)
    149c:	10800608 	cmpgei	r2,r2,24
    14a0:	10000b1e 	bne	r2,zero,14d0 <Singleplayer+0x3e0>
    14a4:	d0a82317 	ldw	r2,-24436(gp)
    14a8:	10800590 	cmplti	r2,r2,22
    14ac:	1000081e 	bne	r2,zero,14d0 <Singleplayer+0x3e0>
    14b0:	e0bffd17 	ldw	r2,-12(fp)
    14b4:	10800017 	ldw	r2,0(r2)
    14b8:	10c00c84 	addi	r3,r2,50
    14bc:	d0a82017 	ldw	r2,-24448(gp)
    14c0:	1880031e 	bne	r3,r2,14d0 <Singleplayer+0x3e0>
			ALT_inc_y = -(ALT_inc_y);
    14c4:	d0a82117 	ldw	r2,-24444(gp)
    14c8:	0085c83a 	sub	r2,zero,r2
    14cc:	d0a82115 	stw	r2,-24444(gp)
		}



		OSTimeDly(1);
    14d0:	01000044 	movi	r4,1
    14d4:	001838c0 	call	1838c <OSTimeDly>


	}
    14d8:	003f1806 	br	113c <__alt_mem_Flash_flash_data+0xf400113c>

000014dc <nummer1>:
	
}

static void nummer1(int q){
    14dc:	defffc04 	addi	sp,sp,-16
    14e0:	dfc00315 	stw	ra,12(sp)
    14e4:	df000215 	stw	fp,8(sp)
    14e8:	df000204 	addi	fp,sp,8
    14ec:	e13fff15 	stw	r4,-4(fp)

	VGA_box(X + 5, 20, X+7, 60, wit);
    14f0:	d0a82617 	ldw	r2,-24424(gp)
    14f4:	11000144 	addi	r4,r2,5
    14f8:	d0a82617 	ldw	r2,-24424(gp)
    14fc:	10c001c4 	addi	r3,r2,7
    1500:	00804034 	movhi	r2,256
    1504:	10bfffc4 	addi	r2,r2,-1
    1508:	d8800015 	stw	r2,0(sp)
    150c:	01400504 	movi	r5,20
    1510:	180d883a 	mov	r6,r3
    1514:	01c00f04 	movi	r7,60
    1518:	00026e80 	call	26e8 <VGA_box>
}
    151c:	e037883a 	mov	sp,fp
    1520:	dfc00117 	ldw	ra,4(sp)
    1524:	df000017 	ldw	fp,0(sp)
    1528:	dec00204 	addi	sp,sp,8
    152c:	f800283a 	ret

00001530 <nummer2>:

static void nummer2(int q){
    1530:	defffc04 	addi	sp,sp,-16
    1534:	dfc00315 	stw	ra,12(sp)
    1538:	df000215 	stw	fp,8(sp)
    153c:	df000204 	addi	fp,sp,8
    1540:	e13fff15 	stw	r4,-4(fp)
	VGA_box(X, 20, X+ 20, 22, wit);					//bovenste lijn
    1544:	d1282617 	ldw	r4,-24424(gp)
    1548:	d0a82617 	ldw	r2,-24424(gp)
    154c:	10c00504 	addi	r3,r2,20
    1550:	00804034 	movhi	r2,256
    1554:	10bfffc4 	addi	r2,r2,-1
    1558:	d8800015 	stw	r2,0(sp)
    155c:	01400504 	movi	r5,20
    1560:	180d883a 	mov	r6,r3
    1564:	01c00584 	movi	r7,22
    1568:	00026e80 	call	26e8 <VGA_box>
	VGA_box(X + 18, 22, X+ 20, 38, wit);			//lijn naar beneden
    156c:	d0a82617 	ldw	r2,-24424(gp)
    1570:	11000484 	addi	r4,r2,18
    1574:	d0a82617 	ldw	r2,-24424(gp)
    1578:	10c00504 	addi	r3,r2,20
    157c:	00804034 	movhi	r2,256
    1580:	10bfffc4 	addi	r2,r2,-1
    1584:	d8800015 	stw	r2,0(sp)
    1588:	01400584 	movi	r5,22
    158c:	180d883a 	mov	r6,r3
    1590:	01c00984 	movi	r7,38
    1594:	00026e80 	call	26e8 <VGA_box>
	VGA_box(X, 38, X+ 20, 40, wit);					//lijn naar links
    1598:	d1282617 	ldw	r4,-24424(gp)
    159c:	d0a82617 	ldw	r2,-24424(gp)
    15a0:	10c00504 	addi	r3,r2,20
    15a4:	00804034 	movhi	r2,256
    15a8:	10bfffc4 	addi	r2,r2,-1
    15ac:	d8800015 	stw	r2,0(sp)
    15b0:	01400984 	movi	r5,38
    15b4:	180d883a 	mov	r6,r3
    15b8:	01c00a04 	movi	r7,40
    15bc:	00026e80 	call	26e8 <VGA_box>
	VGA_box(X, 40, X+ 2, 58, wit);					//lijn naar beneden
    15c0:	d1282617 	ldw	r4,-24424(gp)
    15c4:	d0a82617 	ldw	r2,-24424(gp)
    15c8:	10c00084 	addi	r3,r2,2
    15cc:	00804034 	movhi	r2,256
    15d0:	10bfffc4 	addi	r2,r2,-1
    15d4:	d8800015 	stw	r2,0(sp)
    15d8:	01400a04 	movi	r5,40
    15dc:	180d883a 	mov	r6,r3
    15e0:	01c00e84 	movi	r7,58
    15e4:	00026e80 	call	26e8 <VGA_box>
	VGA_box(X, 58, X+ 20, 60, wit);					//lijn naar rechts
    15e8:	d1282617 	ldw	r4,-24424(gp)
    15ec:	d0a82617 	ldw	r2,-24424(gp)
    15f0:	10c00504 	addi	r3,r2,20
    15f4:	00804034 	movhi	r2,256
    15f8:	10bfffc4 	addi	r2,r2,-1
    15fc:	d8800015 	stw	r2,0(sp)
    1600:	01400e84 	movi	r5,58
    1604:	180d883a 	mov	r6,r3
    1608:	01c00f04 	movi	r7,60
    160c:	00026e80 	call	26e8 <VGA_box>
}
    1610:	e037883a 	mov	sp,fp
    1614:	dfc00117 	ldw	ra,4(sp)
    1618:	df000017 	ldw	fp,0(sp)
    161c:	dec00204 	addi	sp,sp,8
    1620:	f800283a 	ret

00001624 <nummer3>:

static void nummer3(int q){
    1624:	defffc04 	addi	sp,sp,-16
    1628:	dfc00315 	stw	ra,12(sp)
    162c:	df000215 	stw	fp,8(sp)
    1630:	df000204 	addi	fp,sp,8
    1634:	e13fff15 	stw	r4,-4(fp)
	VGA_box(X, 20, X+ 20, 22, wit);					//bovenste lijn
    1638:	d1282617 	ldw	r4,-24424(gp)
    163c:	d0a82617 	ldw	r2,-24424(gp)
    1640:	10c00504 	addi	r3,r2,20
    1644:	00804034 	movhi	r2,256
    1648:	10bfffc4 	addi	r2,r2,-1
    164c:	d8800015 	stw	r2,0(sp)
    1650:	01400504 	movi	r5,20
    1654:	180d883a 	mov	r6,r3
    1658:	01c00584 	movi	r7,22
    165c:	00026e80 	call	26e8 <VGA_box>
	VGA_box(X + 18, 22, X+ 20, 60, wit);			//rechter lijn
    1660:	d0a82617 	ldw	r2,-24424(gp)
    1664:	11000484 	addi	r4,r2,18
    1668:	d0a82617 	ldw	r2,-24424(gp)
    166c:	10c00504 	addi	r3,r2,20
    1670:	00804034 	movhi	r2,256
    1674:	10bfffc4 	addi	r2,r2,-1
    1678:	d8800015 	stw	r2,0(sp)
    167c:	01400584 	movi	r5,22
    1680:	180d883a 	mov	r6,r3
    1684:	01c00f04 	movi	r7,60
    1688:	00026e80 	call	26e8 <VGA_box>
	VGA_box(X, 39, X+ 20, 41, wit);					//midden lijn
    168c:	d1282617 	ldw	r4,-24424(gp)
    1690:	d0a82617 	ldw	r2,-24424(gp)
    1694:	10c00504 	addi	r3,r2,20
    1698:	00804034 	movhi	r2,256
    169c:	10bfffc4 	addi	r2,r2,-1
    16a0:	d8800015 	stw	r2,0(sp)
    16a4:	014009c4 	movi	r5,39
    16a8:	180d883a 	mov	r6,r3
    16ac:	01c00a44 	movi	r7,41
    16b0:	00026e80 	call	26e8 <VGA_box>
	VGA_box(X, 58, X+ 20, 60, wit);					//onderste lijn
    16b4:	d1282617 	ldw	r4,-24424(gp)
    16b8:	d0a82617 	ldw	r2,-24424(gp)
    16bc:	10c00504 	addi	r3,r2,20
    16c0:	00804034 	movhi	r2,256
    16c4:	10bfffc4 	addi	r2,r2,-1
    16c8:	d8800015 	stw	r2,0(sp)
    16cc:	01400e84 	movi	r5,58
    16d0:	180d883a 	mov	r6,r3
    16d4:	01c00f04 	movi	r7,60
    16d8:	00026e80 	call	26e8 <VGA_box>
}
    16dc:	e037883a 	mov	sp,fp
    16e0:	dfc00117 	ldw	ra,4(sp)
    16e4:	df000017 	ldw	fp,0(sp)
    16e8:	dec00204 	addi	sp,sp,8
    16ec:	f800283a 	ret

000016f0 <nummer4>:

static void nummer4(int q){
    16f0:	defffc04 	addi	sp,sp,-16
    16f4:	dfc00315 	stw	ra,12(sp)
    16f8:	df000215 	stw	fp,8(sp)
    16fc:	df000204 	addi	fp,sp,8
    1700:	e13fff15 	stw	r4,-4(fp)
		VGA_box(X, 20, X+2, 40, wit);					//linkse lijn
    1704:	d1282617 	ldw	r4,-24424(gp)
    1708:	d0a82617 	ldw	r2,-24424(gp)
    170c:	10c00084 	addi	r3,r2,2
    1710:	00804034 	movhi	r2,256
    1714:	10bfffc4 	addi	r2,r2,-1
    1718:	d8800015 	stw	r2,0(sp)
    171c:	01400504 	movi	r5,20
    1720:	180d883a 	mov	r6,r3
    1724:	01c00a04 	movi	r7,40
    1728:	00026e80 	call	26e8 <VGA_box>
		VGA_box(X, 39, X + 20, 41, wit);				//middelste lijn
    172c:	d1282617 	ldw	r4,-24424(gp)
    1730:	d0a82617 	ldw	r2,-24424(gp)
    1734:	10c00504 	addi	r3,r2,20
    1738:	00804034 	movhi	r2,256
    173c:	10bfffc4 	addi	r2,r2,-1
    1740:	d8800015 	stw	r2,0(sp)
    1744:	014009c4 	movi	r5,39
    1748:	180d883a 	mov	r6,r3
    174c:	01c00a44 	movi	r7,41
    1750:	00026e80 	call	26e8 <VGA_box>
		VGA_box(X + 18, 20, X + 20, 60, wit);			//rechtse lijn
    1754:	d0a82617 	ldw	r2,-24424(gp)
    1758:	11000484 	addi	r4,r2,18
    175c:	d0a82617 	ldw	r2,-24424(gp)
    1760:	10c00504 	addi	r3,r2,20
    1764:	00804034 	movhi	r2,256
    1768:	10bfffc4 	addi	r2,r2,-1
    176c:	d8800015 	stw	r2,0(sp)
    1770:	01400504 	movi	r5,20
    1774:	180d883a 	mov	r6,r3
    1778:	01c00f04 	movi	r7,60
    177c:	00026e80 	call	26e8 <VGA_box>
}
    1780:	e037883a 	mov	sp,fp
    1784:	dfc00117 	ldw	ra,4(sp)
    1788:	df000017 	ldw	fp,0(sp)
    178c:	dec00204 	addi	sp,sp,8
    1790:	f800283a 	ret

00001794 <nummer5>:

static void nummer5(int q){
    1794:	defffc04 	addi	sp,sp,-16
    1798:	dfc00315 	stw	ra,12(sp)
    179c:	df000215 	stw	fp,8(sp)
    17a0:	df000204 	addi	fp,sp,8
    17a4:	e13fff15 	stw	r4,-4(fp)
		VGA_box(X, 20, X+ 20, 22, wit);					//bovenste lijn
    17a8:	d1282617 	ldw	r4,-24424(gp)
    17ac:	d0a82617 	ldw	r2,-24424(gp)
    17b0:	10c00504 	addi	r3,r2,20
    17b4:	00804034 	movhi	r2,256
    17b8:	10bfffc4 	addi	r2,r2,-1
    17bc:	d8800015 	stw	r2,0(sp)
    17c0:	01400504 	movi	r5,20
    17c4:	180d883a 	mov	r6,r3
    17c8:	01c00584 	movi	r7,22
    17cc:	00026e80 	call	26e8 <VGA_box>
		VGA_box(X, 22, X+ 2, 38, wit);					//lijn naar beneden
    17d0:	d1282617 	ldw	r4,-24424(gp)
    17d4:	d0a82617 	ldw	r2,-24424(gp)
    17d8:	10c00084 	addi	r3,r2,2
    17dc:	00804034 	movhi	r2,256
    17e0:	10bfffc4 	addi	r2,r2,-1
    17e4:	d8800015 	stw	r2,0(sp)
    17e8:	01400584 	movi	r5,22
    17ec:	180d883a 	mov	r6,r3
    17f0:	01c00984 	movi	r7,38
    17f4:	00026e80 	call	26e8 <VGA_box>
		VGA_box(X, 38, X+ 20, 40, wit);					//lijn naar links
    17f8:	d1282617 	ldw	r4,-24424(gp)
    17fc:	d0a82617 	ldw	r2,-24424(gp)
    1800:	10c00504 	addi	r3,r2,20
    1804:	00804034 	movhi	r2,256
    1808:	10bfffc4 	addi	r2,r2,-1
    180c:	d8800015 	stw	r2,0(sp)
    1810:	01400984 	movi	r5,38
    1814:	180d883a 	mov	r6,r3
    1818:	01c00a04 	movi	r7,40
    181c:	00026e80 	call	26e8 <VGA_box>
		VGA_box(X + 18, 40, X+ 20, 58, wit);			//lijn naar beneden
    1820:	d0a82617 	ldw	r2,-24424(gp)
    1824:	11000484 	addi	r4,r2,18
    1828:	d0a82617 	ldw	r2,-24424(gp)
    182c:	10c00504 	addi	r3,r2,20
    1830:	00804034 	movhi	r2,256
    1834:	10bfffc4 	addi	r2,r2,-1
    1838:	d8800015 	stw	r2,0(sp)
    183c:	01400a04 	movi	r5,40
    1840:	180d883a 	mov	r6,r3
    1844:	01c00e84 	movi	r7,58
    1848:	00026e80 	call	26e8 <VGA_box>
		VGA_box(X, 58, X+ 20, 60, wit);					//lijn naar rechts
    184c:	d1282617 	ldw	r4,-24424(gp)
    1850:	d0a82617 	ldw	r2,-24424(gp)
    1854:	10c00504 	addi	r3,r2,20
    1858:	00804034 	movhi	r2,256
    185c:	10bfffc4 	addi	r2,r2,-1
    1860:	d8800015 	stw	r2,0(sp)
    1864:	01400e84 	movi	r5,58
    1868:	180d883a 	mov	r6,r3
    186c:	01c00f04 	movi	r7,60
    1870:	00026e80 	call	26e8 <VGA_box>
}
    1874:	e037883a 	mov	sp,fp
    1878:	dfc00117 	ldw	ra,4(sp)
    187c:	df000017 	ldw	fp,0(sp)
    1880:	dec00204 	addi	sp,sp,8
    1884:	f800283a 	ret

00001888 <nummer6>:

static void nummer6(int q){
    1888:	defffc04 	addi	sp,sp,-16
    188c:	dfc00315 	stw	ra,12(sp)
    1890:	df000215 	stw	fp,8(sp)
    1894:	df000204 	addi	fp,sp,8
    1898:	e13fff15 	stw	r4,-4(fp)
		VGA_box(X, 20, X+2, 60, wit);					//lijn links
    189c:	d1282617 	ldw	r4,-24424(gp)
    18a0:	d0a82617 	ldw	r2,-24424(gp)
    18a4:	10c00084 	addi	r3,r2,2
    18a8:	00804034 	movhi	r2,256
    18ac:	10bfffc4 	addi	r2,r2,-1
    18b0:	d8800015 	stw	r2,0(sp)
    18b4:	01400504 	movi	r5,20
    18b8:	180d883a 	mov	r6,r3
    18bc:	01c00f04 	movi	r7,60
    18c0:	00026e80 	call	26e8 <VGA_box>
		VGA_box(X, 20, X+ 20, 22, wit);					//bovenste lijn
    18c4:	d1282617 	ldw	r4,-24424(gp)
    18c8:	d0a82617 	ldw	r2,-24424(gp)
    18cc:	10c00504 	addi	r3,r2,20
    18d0:	00804034 	movhi	r2,256
    18d4:	10bfffc4 	addi	r2,r2,-1
    18d8:	d8800015 	stw	r2,0(sp)
    18dc:	01400504 	movi	r5,20
    18e0:	180d883a 	mov	r6,r3
    18e4:	01c00584 	movi	r7,22
    18e8:	00026e80 	call	26e8 <VGA_box>
		VGA_box(X, 58, X+ 20, 60, wit);					//onderste lijn
    18ec:	d1282617 	ldw	r4,-24424(gp)
    18f0:	d0a82617 	ldw	r2,-24424(gp)
    18f4:	10c00504 	addi	r3,r2,20
    18f8:	00804034 	movhi	r2,256
    18fc:	10bfffc4 	addi	r2,r2,-1
    1900:	d8800015 	stw	r2,0(sp)
    1904:	01400e84 	movi	r5,58
    1908:	180d883a 	mov	r6,r3
    190c:	01c00f04 	movi	r7,60
    1910:	00026e80 	call	26e8 <VGA_box>
		VGA_box(X + 18, 40, X+ 20, 58, wit);			//lijn rechts
    1914:	d0a82617 	ldw	r2,-24424(gp)
    1918:	11000484 	addi	r4,r2,18
    191c:	d0a82617 	ldw	r2,-24424(gp)
    1920:	10c00504 	addi	r3,r2,20
    1924:	00804034 	movhi	r2,256
    1928:	10bfffc4 	addi	r2,r2,-1
    192c:	d8800015 	stw	r2,0(sp)
    1930:	01400a04 	movi	r5,40
    1934:	180d883a 	mov	r6,r3
    1938:	01c00e84 	movi	r7,58
    193c:	00026e80 	call	26e8 <VGA_box>
		VGA_box(X, 39, X + 20, 41, wit);				//middelste lijn
    1940:	d1282617 	ldw	r4,-24424(gp)
    1944:	d0a82617 	ldw	r2,-24424(gp)
    1948:	10c00504 	addi	r3,r2,20
    194c:	00804034 	movhi	r2,256
    1950:	10bfffc4 	addi	r2,r2,-1
    1954:	d8800015 	stw	r2,0(sp)
    1958:	014009c4 	movi	r5,39
    195c:	180d883a 	mov	r6,r3
    1960:	01c00a44 	movi	r7,41
    1964:	00026e80 	call	26e8 <VGA_box>
}
    1968:	e037883a 	mov	sp,fp
    196c:	dfc00117 	ldw	ra,4(sp)
    1970:	df000017 	ldw	fp,0(sp)
    1974:	dec00204 	addi	sp,sp,8
    1978:	f800283a 	ret

0000197c <nummer7>:

static void nummer7(int q){
    197c:	defffc04 	addi	sp,sp,-16
    1980:	dfc00315 	stw	ra,12(sp)
    1984:	df000215 	stw	fp,8(sp)
    1988:	df000204 	addi	fp,sp,8
    198c:	e13fff15 	stw	r4,-4(fp)
		VGA_box(X + 18, 20, X + 20, 60, wit);			//rechtse lijn
    1990:	d0a82617 	ldw	r2,-24424(gp)
    1994:	11000484 	addi	r4,r2,18
    1998:	d0a82617 	ldw	r2,-24424(gp)
    199c:	10c00504 	addi	r3,r2,20
    19a0:	00804034 	movhi	r2,256
    19a4:	10bfffc4 	addi	r2,r2,-1
    19a8:	d8800015 	stw	r2,0(sp)
    19ac:	01400504 	movi	r5,20
    19b0:	180d883a 	mov	r6,r3
    19b4:	01c00f04 	movi	r7,60
    19b8:	00026e80 	call	26e8 <VGA_box>
		VGA_box(X, 20, X+ 20, 22, wit);					//bovenste lijn
    19bc:	d1282617 	ldw	r4,-24424(gp)
    19c0:	d0a82617 	ldw	r2,-24424(gp)
    19c4:	10c00504 	addi	r3,r2,20
    19c8:	00804034 	movhi	r2,256
    19cc:	10bfffc4 	addi	r2,r2,-1
    19d0:	d8800015 	stw	r2,0(sp)
    19d4:	01400504 	movi	r5,20
    19d8:	180d883a 	mov	r6,r3
    19dc:	01c00584 	movi	r7,22
    19e0:	00026e80 	call	26e8 <VGA_box>
}
    19e4:	e037883a 	mov	sp,fp
    19e8:	dfc00117 	ldw	ra,4(sp)
    19ec:	df000017 	ldw	fp,0(sp)
    19f0:	dec00204 	addi	sp,sp,8
    19f4:	f800283a 	ret

000019f8 <nummer8>:

static void nummer8(int q){
    19f8:	defffc04 	addi	sp,sp,-16
    19fc:	dfc00315 	stw	ra,12(sp)
    1a00:	df000215 	stw	fp,8(sp)
    1a04:	df000204 	addi	fp,sp,8
    1a08:	e13fff15 	stw	r4,-4(fp)
		VGA_box(X + 18, 20, X + 20, 60, wit);			//rechtse lijn
    1a0c:	d0a82617 	ldw	r2,-24424(gp)
    1a10:	11000484 	addi	r4,r2,18
    1a14:	d0a82617 	ldw	r2,-24424(gp)
    1a18:	10c00504 	addi	r3,r2,20
    1a1c:	00804034 	movhi	r2,256
    1a20:	10bfffc4 	addi	r2,r2,-1
    1a24:	d8800015 	stw	r2,0(sp)
    1a28:	01400504 	movi	r5,20
    1a2c:	180d883a 	mov	r6,r3
    1a30:	01c00f04 	movi	r7,60
    1a34:	00026e80 	call	26e8 <VGA_box>
		VGA_box(X, 20, X+2, 60, wit);					//lijn links
    1a38:	d1282617 	ldw	r4,-24424(gp)
    1a3c:	d0a82617 	ldw	r2,-24424(gp)
    1a40:	10c00084 	addi	r3,r2,2
    1a44:	00804034 	movhi	r2,256
    1a48:	10bfffc4 	addi	r2,r2,-1
    1a4c:	d8800015 	stw	r2,0(sp)
    1a50:	01400504 	movi	r5,20
    1a54:	180d883a 	mov	r6,r3
    1a58:	01c00f04 	movi	r7,60
    1a5c:	00026e80 	call	26e8 <VGA_box>
		VGA_box(X, 20, X+ 20, 22, wit);					//bovenste lijn
    1a60:	d1282617 	ldw	r4,-24424(gp)
    1a64:	d0a82617 	ldw	r2,-24424(gp)
    1a68:	10c00504 	addi	r3,r2,20
    1a6c:	00804034 	movhi	r2,256
    1a70:	10bfffc4 	addi	r2,r2,-1
    1a74:	d8800015 	stw	r2,0(sp)
    1a78:	01400504 	movi	r5,20
    1a7c:	180d883a 	mov	r6,r3
    1a80:	01c00584 	movi	r7,22
    1a84:	00026e80 	call	26e8 <VGA_box>
		VGA_box(X, 39, X + 20, 41, wit);				//middelste lijn
    1a88:	d1282617 	ldw	r4,-24424(gp)
    1a8c:	d0a82617 	ldw	r2,-24424(gp)
    1a90:	10c00504 	addi	r3,r2,20
    1a94:	00804034 	movhi	r2,256
    1a98:	10bfffc4 	addi	r2,r2,-1
    1a9c:	d8800015 	stw	r2,0(sp)
    1aa0:	014009c4 	movi	r5,39
    1aa4:	180d883a 	mov	r6,r3
    1aa8:	01c00a44 	movi	r7,41
    1aac:	00026e80 	call	26e8 <VGA_box>
		VGA_box(X, 58, X+ 20, 60, wit);					//onderste lijn
    1ab0:	d1282617 	ldw	r4,-24424(gp)
    1ab4:	d0a82617 	ldw	r2,-24424(gp)
    1ab8:	10c00504 	addi	r3,r2,20
    1abc:	00804034 	movhi	r2,256
    1ac0:	10bfffc4 	addi	r2,r2,-1
    1ac4:	d8800015 	stw	r2,0(sp)
    1ac8:	01400e84 	movi	r5,58
    1acc:	180d883a 	mov	r6,r3
    1ad0:	01c00f04 	movi	r7,60
    1ad4:	00026e80 	call	26e8 <VGA_box>
}
    1ad8:	e037883a 	mov	sp,fp
    1adc:	dfc00117 	ldw	ra,4(sp)
    1ae0:	df000017 	ldw	fp,0(sp)
    1ae4:	dec00204 	addi	sp,sp,8
    1ae8:	f800283a 	ret

00001aec <nummer9>:

static void nummer9(int q){
    1aec:	defffc04 	addi	sp,sp,-16
    1af0:	dfc00315 	stw	ra,12(sp)
    1af4:	df000215 	stw	fp,8(sp)
    1af8:	df000204 	addi	fp,sp,8
    1afc:	e13fff15 	stw	r4,-4(fp)
		VGA_box(X + 18, 20, X + 20, 60, wit);			//rechtse lijn
    1b00:	d0a82617 	ldw	r2,-24424(gp)
    1b04:	11000484 	addi	r4,r2,18
    1b08:	d0a82617 	ldw	r2,-24424(gp)
    1b0c:	10c00504 	addi	r3,r2,20
    1b10:	00804034 	movhi	r2,256
    1b14:	10bfffc4 	addi	r2,r2,-1
    1b18:	d8800015 	stw	r2,0(sp)
    1b1c:	01400504 	movi	r5,20
    1b20:	180d883a 	mov	r6,r3
    1b24:	01c00f04 	movi	r7,60
    1b28:	00026e80 	call	26e8 <VGA_box>
		VGA_box(X, 20, X+2, 40, wit);					//linkse lijn
    1b2c:	d1282617 	ldw	r4,-24424(gp)
    1b30:	d0a82617 	ldw	r2,-24424(gp)
    1b34:	10c00084 	addi	r3,r2,2
    1b38:	00804034 	movhi	r2,256
    1b3c:	10bfffc4 	addi	r2,r2,-1
    1b40:	d8800015 	stw	r2,0(sp)
    1b44:	01400504 	movi	r5,20
    1b48:	180d883a 	mov	r6,r3
    1b4c:	01c00a04 	movi	r7,40
    1b50:	00026e80 	call	26e8 <VGA_box>
		VGA_box(X, 20, X+ 20, 22, wit);					//bovenste lijn
    1b54:	d1282617 	ldw	r4,-24424(gp)
    1b58:	d0a82617 	ldw	r2,-24424(gp)
    1b5c:	10c00504 	addi	r3,r2,20
    1b60:	00804034 	movhi	r2,256
    1b64:	10bfffc4 	addi	r2,r2,-1
    1b68:	d8800015 	stw	r2,0(sp)
    1b6c:	01400504 	movi	r5,20
    1b70:	180d883a 	mov	r6,r3
    1b74:	01c00584 	movi	r7,22
    1b78:	00026e80 	call	26e8 <VGA_box>
		VGA_box(X, 39, X + 20, 41, wit);				//middelste lijn
    1b7c:	d1282617 	ldw	r4,-24424(gp)
    1b80:	d0a82617 	ldw	r2,-24424(gp)
    1b84:	10c00504 	addi	r3,r2,20
    1b88:	00804034 	movhi	r2,256
    1b8c:	10bfffc4 	addi	r2,r2,-1
    1b90:	d8800015 	stw	r2,0(sp)
    1b94:	014009c4 	movi	r5,39
    1b98:	180d883a 	mov	r6,r3
    1b9c:	01c00a44 	movi	r7,41
    1ba0:	00026e80 	call	26e8 <VGA_box>
		VGA_box(X, 58, X+ 20, 60, wit);					//onderste lijn
    1ba4:	d1282617 	ldw	r4,-24424(gp)
    1ba8:	d0a82617 	ldw	r2,-24424(gp)
    1bac:	10c00504 	addi	r3,r2,20
    1bb0:	00804034 	movhi	r2,256
    1bb4:	10bfffc4 	addi	r2,r2,-1
    1bb8:	d8800015 	stw	r2,0(sp)
    1bbc:	01400e84 	movi	r5,58
    1bc0:	180d883a 	mov	r6,r3
    1bc4:	01c00f04 	movi	r7,60
    1bc8:	00026e80 	call	26e8 <VGA_box>
}
    1bcc:	e037883a 	mov	sp,fp
    1bd0:	dfc00117 	ldw	ra,4(sp)
    1bd4:	df000017 	ldw	fp,0(sp)
    1bd8:	dec00204 	addi	sp,sp,8
    1bdc:	f800283a 	ret

00001be0 <nummer0>:

static void nummer0(int q){
    1be0:	defffc04 	addi	sp,sp,-16
    1be4:	dfc00315 	stw	ra,12(sp)
    1be8:	df000215 	stw	fp,8(sp)
    1bec:	df000204 	addi	fp,sp,8
    1bf0:	e13fff15 	stw	r4,-4(fp)
		VGA_box(X + 18, 20, X + 20, 60, wit);			//rechtse lijn
    1bf4:	d0a82617 	ldw	r2,-24424(gp)
    1bf8:	11000484 	addi	r4,r2,18
    1bfc:	d0a82617 	ldw	r2,-24424(gp)
    1c00:	10c00504 	addi	r3,r2,20
    1c04:	00804034 	movhi	r2,256
    1c08:	10bfffc4 	addi	r2,r2,-1
    1c0c:	d8800015 	stw	r2,0(sp)
    1c10:	01400504 	movi	r5,20
    1c14:	180d883a 	mov	r6,r3
    1c18:	01c00f04 	movi	r7,60
    1c1c:	00026e80 	call	26e8 <VGA_box>
		VGA_box(X, 20, X+2, 60, wit);					//lijn links
    1c20:	d1282617 	ldw	r4,-24424(gp)
    1c24:	d0a82617 	ldw	r2,-24424(gp)
    1c28:	10c00084 	addi	r3,r2,2
    1c2c:	00804034 	movhi	r2,256
    1c30:	10bfffc4 	addi	r2,r2,-1
    1c34:	d8800015 	stw	r2,0(sp)
    1c38:	01400504 	movi	r5,20
    1c3c:	180d883a 	mov	r6,r3
    1c40:	01c00f04 	movi	r7,60
    1c44:	00026e80 	call	26e8 <VGA_box>
		VGA_box(X, 20, X+ 20, 22, wit);					//bovenste lijn
    1c48:	d1282617 	ldw	r4,-24424(gp)
    1c4c:	d0a82617 	ldw	r2,-24424(gp)
    1c50:	10c00504 	addi	r3,r2,20
    1c54:	00804034 	movhi	r2,256
    1c58:	10bfffc4 	addi	r2,r2,-1
    1c5c:	d8800015 	stw	r2,0(sp)
    1c60:	01400504 	movi	r5,20
    1c64:	180d883a 	mov	r6,r3
    1c68:	01c00584 	movi	r7,22
    1c6c:	00026e80 	call	26e8 <VGA_box>
		VGA_box(X, 58, X+ 20, 60, wit);					//onderste lijn
    1c70:	d1282617 	ldw	r4,-24424(gp)
    1c74:	d0a82617 	ldw	r2,-24424(gp)
    1c78:	10c00504 	addi	r3,r2,20
    1c7c:	00804034 	movhi	r2,256
    1c80:	10bfffc4 	addi	r2,r2,-1
    1c84:	d8800015 	stw	r2,0(sp)
    1c88:	01400e84 	movi	r5,58
    1c8c:	180d883a 	mov	r6,r3
    1c90:	01c00f04 	movi	r7,60
    1c94:	00026e80 	call	26e8 <VGA_box>
}
    1c98:	e037883a 	mov	sp,fp
    1c9c:	dfc00117 	ldw	ra,4(sp)
    1ca0:	df000017 	ldw	fp,0(sp)
    1ca4:	dec00204 	addi	sp,sp,8
    1ca8:	f800283a 	ret

00001cac <exec>:

void(*nummer[])(void) = { nummer0, nummer1, nummer2, nummer3, nummer4, nummer5, nummer6, nummer7, nummer8, nummer9 };

void exec(int value)
{
    1cac:	defffd04 	addi	sp,sp,-12
    1cb0:	dfc00215 	stw	ra,8(sp)
    1cb4:	df000115 	stw	fp,4(sp)
    1cb8:	df000104 	addi	fp,sp,4
    1cbc:	e13fff15 	stw	r4,-4(fp)
	if (value) {
    1cc0:	e0bfff17 	ldw	r2,-4(fp)
    1cc4:	10001126 	beq	r2,zero,1d0c <exec+0x60>
		exec(value / 10);
    1cc8:	e0ffff17 	ldw	r3,-4(fp)
    1ccc:	00800284 	movi	r2,10
    1cd0:	1885283a 	div	r2,r3,r2
    1cd4:	1009883a 	mov	r4,r2
    1cd8:	0001cac0 	call	1cac <exec>
		nummer[value % 10]();
    1cdc:	e0bfff17 	ldw	r2,-4(fp)
    1ce0:	00c00284 	movi	r3,10
    1ce4:	10c7283a 	div	r3,r2,r3
    1ce8:	18c002a4 	muli	r3,r3,10
    1cec:	10c7c83a 	sub	r3,r2,r3
    1cf0:	008000b4 	movhi	r2,2
    1cf4:	10b38204 	addi	r2,r2,-12792
    1cf8:	18c7883a 	add	r3,r3,r3
    1cfc:	18c7883a 	add	r3,r3,r3
    1d00:	10c5883a 	add	r2,r2,r3
    1d04:	10800017 	ldw	r2,0(r2)
    1d08:	103ee83a 	callr	r2
	}
}
    1d0c:	e037883a 	mov	sp,fp
    1d10:	dfc00117 	ldw	ra,4(sp)
    1d14:	df000017 	ldw	fp,0(sp)
    1d18:	dec00204 	addi	sp,sp,8
    1d1c:	f800283a 	ret

00001d20 <menu>:
int eenkeer = 1;
int onePress = 1;
int last;
int changed;

void menu(void* pdata){
    1d20:	defffa04 	addi	sp,sp,-24
    1d24:	dfc00515 	stw	ra,20(sp)
    1d28:	df000415 	stw	fp,16(sp)
    1d2c:	df000404 	addi	fp,sp,16
    1d30:	e13fff15 	stw	r4,-4(fp)
	int ID = (int*)pdata;
    1d34:	e0bfff17 	ldw	r2,-4(fp)
    1d38:	e0bffd15 	stw	r2,-12(fp)
	INT8U err;

	teken_menu();
    1d3c:	00023840 	call	2384 <teken_menu>

	while(1){
		OSFlagPend(Flags, Menu_Flag, OS_FLAG_WAIT_CLR_ALL, 0, &err);
    1d40:	d0e81717 	ldw	r3,-24484(gp)
    1d44:	e0bffe04 	addi	r2,fp,-8
    1d48:	d8800015 	stw	r2,0(sp)
    1d4c:	1809883a 	mov	r4,r3
    1d50:	01400044 	movi	r5,1
    1d54:	000d883a 	mov	r6,zero
    1d58:	000f883a 	mov	r7,zero
    1d5c:	0012b780 	call	12b78 <OSFlagPend>

		if (controller(ID) == 1){
    1d60:	e13ffd17 	ldw	r4,-12(fp)
    1d64:	000039c0 	call	39c <controller>
    1d68:	10800058 	cmpnei	r2,r2,1
    1d6c:	1000111e 	bne	r2,zero,1db4 <menu+0x94>
			if(changed != 0){
    1d70:	d0a82917 	ldw	r2,-24412(gp)
    1d74:	10000926 	beq	r2,zero,1d9c <menu+0x7c>
				gameModeMenu++;
    1d78:	d0a00317 	ldw	r2,-32756(gp)
    1d7c:	10800044 	addi	r2,r2,1
    1d80:	d0a00315 	stw	r2,-32756(gp)
				eenkeer = 1;
    1d84:	00800044 	movi	r2,1
    1d88:	d0a00a15 	stw	r2,-32728(gp)
				changed=0;
    1d8c:	d0282915 	stw	zero,-24412(gp)
				printf("heeft 1 gereturned \n");
    1d90:	010000b4 	movhi	r4,2
    1d94:	2131e804 	addi	r4,r4,-14432
    1d98:	00031600 	call	3160 <puts>
			}
			if (gameModeMenu >= 5){
    1d9c:	d0a00317 	ldw	r2,-32756(gp)
    1da0:	10800150 	cmplti	r2,r2,5
    1da4:	1000161e 	bne	r2,zero,1e00 <menu+0xe0>
				gameModeMenu = 1;
    1da8:	00800044 	movi	r2,1
    1dac:	d0a00315 	stw	r2,-32756(gp)
    1db0:	00001306 	br	1e00 <menu+0xe0>
			}
		} else if (controller(ID) == 0){
    1db4:	e13ffd17 	ldw	r4,-12(fp)
    1db8:	000039c0 	call	39c <controller>
    1dbc:	1000101e 	bne	r2,zero,1e00 <menu+0xe0>
			if(changed !=0){
    1dc0:	d0a82917 	ldw	r2,-24412(gp)
    1dc4:	10000a26 	beq	r2,zero,1df0 <menu+0xd0>
				gameModeMenu--;
    1dc8:	d0a00317 	ldw	r2,-32756(gp)
    1dcc:	10bfffc4 	addi	r2,r2,-1
    1dd0:	d0a00315 	stw	r2,-32756(gp)
				last=0;
    1dd4:	d0282815 	stw	zero,-24416(gp)
				changed=0;
    1dd8:	d0282915 	stw	zero,-24412(gp)
				eenkeer = 1;
    1ddc:	00800044 	movi	r2,1
    1de0:	d0a00a15 	stw	r2,-32728(gp)
				printf("heeft 0 gereturned \n");
    1de4:	010000b4 	movhi	r4,2
    1de8:	2131ed04 	addi	r4,r4,-14412
    1dec:	00031600 	call	3160 <puts>
			}
			if (gameModeMenu <= 0){
    1df0:	d0a00317 	ldw	r2,-32756(gp)
    1df4:	00800216 	blt	zero,r2,1e00 <menu+0xe0>
				gameModeMenu = 4;
    1df8:	00800104 	movi	r2,4
    1dfc:	d0a00315 	stw	r2,-32756(gp)
			}
		}
		OSTimeDly(20);
    1e00:	01000504 	movi	r4,20
    1e04:	001838c0 	call	1838c <OSTimeDly>
	}
    1e08:	003fcd06 	br	1d40 <__alt_mem_Flash_flash_data+0xf4001d40>

00001e0c <selecteerMenu>:

}

void selecteerMenu(void *pdata){
    1e0c:	defffa04 	addi	sp,sp,-24
    1e10:	dfc00515 	stw	ra,20(sp)
    1e14:	df000415 	stw	fp,16(sp)
    1e18:	df000404 	addi	fp,sp,16
    1e1c:	e13fff15 	stw	r4,-4(fp)
	INT8U err;
	int ID = (int*)pdata;
    1e20:	e0bfff17 	ldw	r2,-4(fp)
    1e24:	e0bffd15 	stw	r2,-12(fp)



	while(1){
	OSFlagPend(Flags, Menu2_Flag, OS_FLAG_WAIT_CLR_ALL, 0, &err);
    1e28:	d0e81717 	ldw	r3,-24484(gp)
    1e2c:	e0bffe04 	addi	r2,fp,-8
    1e30:	d8800015 	stw	r2,0(sp)
    1e34:	1809883a 	mov	r4,r3
    1e38:	01400404 	movi	r5,16
    1e3c:	000d883a 	mov	r6,zero
    1e40:	000f883a 	mov	r7,zero
    1e44:	0012b780 	call	12b78 <OSFlagPend>

		if (gameModeMenu == 1){
    1e48:	d0a00317 	ldw	r2,-32756(gp)
    1e4c:	10800058 	cmpnei	r2,r2,1
    1e50:	1000411e 	bne	r2,zero,1f58 <selecteerMenu+0x14c>
			if(eenkeer == 1){
    1e54:	d0a00a17 	ldw	r2,-32728(gp)
    1e58:	10800058 	cmpnei	r2,r2,1
    1e5c:	10001f1e 	bne	r2,zero,1edc <selecteerMenu+0xd0>
				clearScreen();
    1e60:	00021c40 	call	21c4 <clearScreen>
				VGA_box(xLinks*4, xBoven*4, xRechts*4, xOnder*4, rood);
    1e64:	d0a00417 	ldw	r2,-32752(gp)
    1e68:	1085883a 	add	r2,r2,r2
    1e6c:	1085883a 	add	r2,r2,r2
    1e70:	1009883a 	mov	r4,r2
    1e74:	d0a00617 	ldw	r2,-32744(gp)
    1e78:	1085883a 	add	r2,r2,r2
    1e7c:	1085883a 	add	r2,r2,r2
    1e80:	100b883a 	mov	r5,r2
    1e84:	d0a00517 	ldw	r2,-32748(gp)
    1e88:	1085883a 	add	r2,r2,r2
    1e8c:	1085883a 	add	r2,r2,r2
    1e90:	100d883a 	mov	r6,r2
    1e94:	d0a00717 	ldw	r2,-32740(gp)
    1e98:	1085883a 	add	r2,r2,r2
    1e9c:	1085883a 	add	r2,r2,r2
    1ea0:	1007883a 	mov	r3,r2
    1ea4:	00be0014 	movui	r2,63488
    1ea8:	d8800015 	stw	r2,0(sp)
    1eac:	180f883a 	mov	r7,r3
    1eb0:	00026e80 	call	26e8 <VGA_box>
				VGA_text (xMenu, yMenu, "Singleplayer");
    1eb4:	d0e00817 	ldw	r3,-32736(gp)
    1eb8:	d0a00917 	ldw	r2,-32732(gp)
    1ebc:	1809883a 	mov	r4,r3
    1ec0:	100b883a 	mov	r5,r2
    1ec4:	018000b4 	movhi	r6,2
    1ec8:	31b1f204 	addi	r6,r6,-14392
    1ecc:	000279c0 	call	279c <VGA_text>
				eenkeer = 0;
    1ed0:	d0200a15 	stw	zero,-32728(gp)
				changed = 1;
    1ed4:	00800044 	movi	r2,1
    1ed8:	d0a82915 	stw	r2,-24412(gp)
			}
			if(controller(ID) == 2){
    1edc:	e13ffd17 	ldw	r4,-12(fp)
    1ee0:	000039c0 	call	39c <controller>
    1ee4:	10800098 	cmpnei	r2,r2,2
    1ee8:	1000b31e 	bne	r2,zero,21b8 <selecteerMenu+0x3ac>
				clearScreen();
    1eec:	00021c40 	call	21c4 <clearScreen>
				clearText();
    1ef0:	00022040 	call	2204 <clearText>
				printf("start Singleplayer\n");
    1ef4:	010000b4 	movhi	r4,2
    1ef8:	2131f604 	addi	r4,r4,-14376
    1efc:	00031600 	call	3160 <puts>
				OSFlagPost(Flags,C1_Flag, OS_FLAG_CLR, &err);
    1f00:	d0e81717 	ldw	r3,-24484(gp)
    1f04:	e0bffe04 	addi	r2,fp,-8
    1f08:	1809883a 	mov	r4,r3
    1f0c:	01400104 	movi	r5,4
    1f10:	000d883a 	mov	r6,zero
    1f14:	100f883a 	mov	r7,r2
    1f18:	00131d00 	call	131d0 <OSFlagPost>
				OSFlagPost(Flags_Games, Singleplayer_Flag, OS_FLAG_CLR, &err);
    1f1c:	d0e81517 	ldw	r3,-24492(gp)
    1f20:	e0bffe04 	addi	r2,fp,-8
    1f24:	1809883a 	mov	r4,r3
    1f28:	01400804 	movi	r5,32
    1f2c:	000d883a 	mov	r6,zero
    1f30:	100f883a 	mov	r7,r2
    1f34:	00131d00 	call	131d0 <OSFlagPost>
				OSFlagPost(Flags, Menu_Flag + Menu2_Flag, OS_FLAG_SET, &err);
    1f38:	d0e81717 	ldw	r3,-24484(gp)
    1f3c:	e0bffe04 	addi	r2,fp,-8
    1f40:	1809883a 	mov	r4,r3
    1f44:	01400444 	movi	r5,17
    1f48:	01800044 	movi	r6,1
    1f4c:	100f883a 	mov	r7,r2
    1f50:	00131d00 	call	131d0 <OSFlagPost>
    1f54:	00009806 	br	21b8 <selecteerMenu+0x3ac>
			}
		} else if (gameModeMenu == 2){
    1f58:	d0a00317 	ldw	r2,-32756(gp)
    1f5c:	10800098 	cmpnei	r2,r2,2
    1f60:	1000441e 	bne	r2,zero,2074 <selecteerMenu+0x268>
			if(eenkeer == 1){
    1f64:	d0a00a17 	ldw	r2,-32728(gp)
    1f68:	10800058 	cmpnei	r2,r2,1
    1f6c:	1000221e 	bne	r2,zero,1ff8 <selecteerMenu+0x1ec>
				clearScreen();
    1f70:	00021c40 	call	21c4 <clearScreen>
				VGA_box(xLinks*4, xBoven*4 + 16, xRechts*4, xOnder*4 + 16, rood);
    1f74:	d0a00417 	ldw	r2,-32752(gp)
    1f78:	1085883a 	add	r2,r2,r2
    1f7c:	1085883a 	add	r2,r2,r2
    1f80:	1009883a 	mov	r4,r2
    1f84:	d0a00617 	ldw	r2,-32744(gp)
    1f88:	10800104 	addi	r2,r2,4
    1f8c:	1085883a 	add	r2,r2,r2
    1f90:	1085883a 	add	r2,r2,r2
    1f94:	100b883a 	mov	r5,r2
    1f98:	d0a00517 	ldw	r2,-32748(gp)
    1f9c:	1085883a 	add	r2,r2,r2
    1fa0:	1085883a 	add	r2,r2,r2
    1fa4:	100d883a 	mov	r6,r2
    1fa8:	d0a00717 	ldw	r2,-32740(gp)
    1fac:	10800104 	addi	r2,r2,4
    1fb0:	1085883a 	add	r2,r2,r2
    1fb4:	1085883a 	add	r2,r2,r2
    1fb8:	1007883a 	mov	r3,r2
    1fbc:	00be0014 	movui	r2,63488
    1fc0:	d8800015 	stw	r2,0(sp)
    1fc4:	180f883a 	mov	r7,r3
    1fc8:	00026e80 	call	26e8 <VGA_box>
				VGA_text (xMenu, yMenu + 4, "Multiplayer");
    1fcc:	d0e00817 	ldw	r3,-32736(gp)
    1fd0:	d0a00917 	ldw	r2,-32732(gp)
    1fd4:	10800104 	addi	r2,r2,4
    1fd8:	1809883a 	mov	r4,r3
    1fdc:	100b883a 	mov	r5,r2
    1fe0:	018000b4 	movhi	r6,2
    1fe4:	31b1fb04 	addi	r6,r6,-14356
    1fe8:	000279c0 	call	279c <VGA_text>
				eenkeer = 0;
    1fec:	d0200a15 	stw	zero,-32728(gp)
				changed = 1;
    1ff0:	00800044 	movi	r2,1
    1ff4:	d0a82915 	stw	r2,-24412(gp)
			}
			if(controller(ID) == 2){
    1ff8:	e13ffd17 	ldw	r4,-12(fp)
    1ffc:	000039c0 	call	39c <controller>
    2000:	10800098 	cmpnei	r2,r2,2
    2004:	10006c1e 	bne	r2,zero,21b8 <selecteerMenu+0x3ac>
				clearScreen();
    2008:	00021c40 	call	21c4 <clearScreen>
				clearText();
    200c:	00022040 	call	2204 <clearText>
				printf("start game\n");
    2010:	010000b4 	movhi	r4,2
    2014:	2131fe04 	addi	r4,r4,-14344
    2018:	00031600 	call	3160 <puts>
				OSFlagPost(Flags, C1_Flag + C2_Flag, OS_FLAG_CLR, &err);
    201c:	d0e81717 	ldw	r3,-24484(gp)
    2020:	e0bffe04 	addi	r2,fp,-8
    2024:	1809883a 	mov	r4,r3
    2028:	01400304 	movi	r5,12
    202c:	000d883a 	mov	r6,zero
    2030:	100f883a 	mov	r7,r2
    2034:	00131d00 	call	131d0 <OSFlagPost>
				OSFlagPost(Flags_Games,Game_Flag, OS_FLAG_CLR, &err);
    2038:	d0e81517 	ldw	r3,-24492(gp)
    203c:	e0bffe04 	addi	r2,fp,-8
    2040:	1809883a 	mov	r4,r3
    2044:	01400084 	movi	r5,2
    2048:	000d883a 	mov	r6,zero
    204c:	100f883a 	mov	r7,r2
    2050:	00131d00 	call	131d0 <OSFlagPost>
				OSFlagPost(Flags, Menu_Flag + Menu2_Flag, OS_FLAG_SET, &err);
    2054:	d0e81717 	ldw	r3,-24484(gp)
    2058:	e0bffe04 	addi	r2,fp,-8
    205c:	1809883a 	mov	r4,r3
    2060:	01400444 	movi	r5,17
    2064:	01800044 	movi	r6,1
    2068:	100f883a 	mov	r7,r2
    206c:	00131d00 	call	131d0 <OSFlagPost>
    2070:	00005106 	br	21b8 <selecteerMenu+0x3ac>
			}

		} else if (gameModeMenu == 3){
    2074:	d0a00317 	ldw	r2,-32756(gp)
    2078:	108000d8 	cmpnei	r2,r2,3
    207c:	1000261e 	bne	r2,zero,2118 <selecteerMenu+0x30c>
			if(eenkeer == 1){
    2080:	d0a00a17 	ldw	r2,-32728(gp)
    2084:	10800058 	cmpnei	r2,r2,1
    2088:	10004b1e 	bne	r2,zero,21b8 <selecteerMenu+0x3ac>
				clearScreen();
    208c:	00021c40 	call	21c4 <clearScreen>
				VGA_box(xLinks*4, xBoven*4 + 32, xRechts*4, xOnder*4 + 32, rood);
    2090:	d0a00417 	ldw	r2,-32752(gp)
    2094:	1085883a 	add	r2,r2,r2
    2098:	1085883a 	add	r2,r2,r2
    209c:	1009883a 	mov	r4,r2
    20a0:	d0a00617 	ldw	r2,-32744(gp)
    20a4:	10800204 	addi	r2,r2,8
    20a8:	1085883a 	add	r2,r2,r2
    20ac:	1085883a 	add	r2,r2,r2
    20b0:	100b883a 	mov	r5,r2
    20b4:	d0a00517 	ldw	r2,-32748(gp)
    20b8:	1085883a 	add	r2,r2,r2
    20bc:	1085883a 	add	r2,r2,r2
    20c0:	100d883a 	mov	r6,r2
    20c4:	d0a00717 	ldw	r2,-32740(gp)
    20c8:	10800204 	addi	r2,r2,8
    20cc:	1085883a 	add	r2,r2,r2
    20d0:	1085883a 	add	r2,r2,r2
    20d4:	1007883a 	mov	r3,r2
    20d8:	00be0014 	movui	r2,63488
    20dc:	d8800015 	stw	r2,0(sp)
    20e0:	180f883a 	mov	r7,r3
    20e4:	00026e80 	call	26e8 <VGA_box>
				VGA_text (xMenu, yMenu +  8, "Highscores");
    20e8:	d0e00817 	ldw	r3,-32736(gp)
    20ec:	d0a00917 	ldw	r2,-32732(gp)
    20f0:	10800204 	addi	r2,r2,8
    20f4:	1809883a 	mov	r4,r3
    20f8:	100b883a 	mov	r5,r2
    20fc:	018000b4 	movhi	r6,2
    2100:	31b20104 	addi	r6,r6,-14332
    2104:	000279c0 	call	279c <VGA_text>
				eenkeer = 0;
    2108:	d0200a15 	stw	zero,-32728(gp)
				changed = 1;
    210c:	00800044 	movi	r2,1
    2110:	d0a82915 	stw	r2,-24412(gp)
    2114:	00002806 	br	21b8 <selecteerMenu+0x3ac>

			}
		} else if (gameModeMenu == 4){
    2118:	d0a00317 	ldw	r2,-32756(gp)
    211c:	10800118 	cmpnei	r2,r2,4
    2120:	1000251e 	bne	r2,zero,21b8 <selecteerMenu+0x3ac>
			if(eenkeer == 1){
    2124:	d0a00a17 	ldw	r2,-32728(gp)
    2128:	10800058 	cmpnei	r2,r2,1
    212c:	1000221e 	bne	r2,zero,21b8 <selecteerMenu+0x3ac>
				clearScreen();
    2130:	00021c40 	call	21c4 <clearScreen>
				VGA_box(xLinks*4, xBoven*4 + 48, xRechts*4, xOnder*4 + 48, rood);
    2134:	d0a00417 	ldw	r2,-32752(gp)
    2138:	1085883a 	add	r2,r2,r2
    213c:	1085883a 	add	r2,r2,r2
    2140:	1009883a 	mov	r4,r2
    2144:	d0a00617 	ldw	r2,-32744(gp)
    2148:	10800304 	addi	r2,r2,12
    214c:	1085883a 	add	r2,r2,r2
    2150:	1085883a 	add	r2,r2,r2
    2154:	100b883a 	mov	r5,r2
    2158:	d0a00517 	ldw	r2,-32748(gp)
    215c:	1085883a 	add	r2,r2,r2
    2160:	1085883a 	add	r2,r2,r2
    2164:	100d883a 	mov	r6,r2
    2168:	d0a00717 	ldw	r2,-32740(gp)
    216c:	10800304 	addi	r2,r2,12
    2170:	1085883a 	add	r2,r2,r2
    2174:	1085883a 	add	r2,r2,r2
    2178:	1007883a 	mov	r3,r2
    217c:	00be0014 	movui	r2,63488
    2180:	d8800015 	stw	r2,0(sp)
    2184:	180f883a 	mov	r7,r3
    2188:	00026e80 	call	26e8 <VGA_box>
				VGA_text (xMenu, yMenu + 12, "Tutorial");
    218c:	d0e00817 	ldw	r3,-32736(gp)
    2190:	d0a00917 	ldw	r2,-32732(gp)
    2194:	10800304 	addi	r2,r2,12
    2198:	1809883a 	mov	r4,r3
    219c:	100b883a 	mov	r5,r2
    21a0:	018000b4 	movhi	r6,2
    21a4:	31b20404 	addi	r6,r6,-14320
    21a8:	000279c0 	call	279c <VGA_text>
				eenkeer = 0;
    21ac:	d0200a15 	stw	zero,-32728(gp)
				changed = 1;
    21b0:	00800044 	movi	r2,1
    21b4:	d0a82915 	stw	r2,-24412(gp)

			}
		}

		OSTimeDly(20);
    21b8:	01000504 	movi	r4,20
    21bc:	001838c0 	call	1838c <OSTimeDly>
	}
    21c0:	003f1906 	br	1e28 <__alt_mem_Flash_flash_data+0xf4001e28>

000021c4 <clearScreen>:
}

void clearScreen(){
    21c4:	defffd04 	addi	sp,sp,-12
    21c8:	dfc00215 	stw	ra,8(sp)
    21cc:	df000115 	stw	fp,4(sp)
    21d0:	df000104 	addi	fp,sp,4
	VGA_box(25,70, 200,135, 0);
    21d4:	d8000015 	stw	zero,0(sp)
    21d8:	01000644 	movi	r4,25
    21dc:	01401184 	movi	r5,70
    21e0:	01803204 	movi	r6,200
    21e4:	01c021c4 	movi	r7,135
    21e8:	00026e80 	call	26e8 <VGA_box>
	del_middenlijn();
    21ec:	00028940 	call	2894 <del_middenlijn>
}
    21f0:	e037883a 	mov	sp,fp
    21f4:	dfc00117 	ldw	ra,4(sp)
    21f8:	df000017 	ldw	fp,0(sp)
    21fc:	dec00204 	addi	sp,sp,8
    2200:	f800283a 	ret

00002204 <clearText>:

void clearText(){
    2204:	defffe04 	addi	sp,sp,-8
    2208:	dfc00115 	stw	ra,4(sp)
    220c:	df000015 	stw	fp,0(sp)
    2210:	d839883a 	mov	fp,sp
	VGA_text (xMenu, yMenu, "            ");
    2214:	d0e00817 	ldw	r3,-32736(gp)
    2218:	d0a00917 	ldw	r2,-32732(gp)
    221c:	1809883a 	mov	r4,r3
    2220:	100b883a 	mov	r5,r2
    2224:	018000b4 	movhi	r6,2
    2228:	31b20704 	addi	r6,r6,-14308
    222c:	000279c0 	call	279c <VGA_text>
	VGA_text (xMenu, yMenu + 4, "           ");
    2230:	d0e00817 	ldw	r3,-32736(gp)
    2234:	d0a00917 	ldw	r2,-32732(gp)
    2238:	10800104 	addi	r2,r2,4
    223c:	1809883a 	mov	r4,r3
    2240:	100b883a 	mov	r5,r2
    2244:	018000b4 	movhi	r6,2
    2248:	31b20b04 	addi	r6,r6,-14292
    224c:	000279c0 	call	279c <VGA_text>
	VGA_text (xMenu, yMenu+8, "          ");
    2250:	d0e00817 	ldw	r3,-32736(gp)
    2254:	d0a00917 	ldw	r2,-32732(gp)
    2258:	10800204 	addi	r2,r2,8
    225c:	1809883a 	mov	r4,r3
    2260:	100b883a 	mov	r5,r2
    2264:	018000b4 	movhi	r6,2
    2268:	31b20e04 	addi	r6,r6,-14280
    226c:	000279c0 	call	279c <VGA_text>
	VGA_text (xMenu, yMenu+12, "        ");
    2270:	d0e00817 	ldw	r3,-32736(gp)
    2274:	d0a00917 	ldw	r2,-32732(gp)
    2278:	10800304 	addi	r2,r2,12
    227c:	1809883a 	mov	r4,r3
    2280:	100b883a 	mov	r5,r2
    2284:	018000b4 	movhi	r6,2
    2288:	31b21104 	addi	r6,r6,-14268
    228c:	000279c0 	call	279c <VGA_text>
}
    2290:	e037883a 	mov	sp,fp
    2294:	dfc00117 	ldw	ra,4(sp)
    2298:	df000017 	ldw	fp,0(sp)
    229c:	dec00204 	addi	sp,sp,8
    22a0:	f800283a 	ret

000022a4 <tekenBox>:

void tekenBox(int Links, int Boven, int Rechts, int Onder, short Kleur){
    22a4:	defff804 	addi	sp,sp,-32
    22a8:	dfc00715 	stw	ra,28(sp)
    22ac:	df000615 	stw	fp,24(sp)
    22b0:	df000604 	addi	fp,sp,24
    22b4:	e13ffb15 	stw	r4,-20(fp)
    22b8:	e17ffc15 	stw	r5,-16(fp)
    22bc:	e1bffd15 	stw	r6,-12(fp)
    22c0:	e1fffe15 	stw	r7,-8(fp)
    22c4:	e0800217 	ldw	r2,8(fp)
    22c8:	e0bfff0d 	sth	r2,-4(fp)
	VGA_box(Links, Boven, Rechts, Onder, Kleur);
    22cc:	e0bfff0f 	ldh	r2,-4(fp)
    22d0:	d8800015 	stw	r2,0(sp)
    22d4:	e13ffb17 	ldw	r4,-20(fp)
    22d8:	e17ffc17 	ldw	r5,-16(fp)
    22dc:	e1bffd17 	ldw	r6,-12(fp)
    22e0:	e1fffe17 	ldw	r7,-8(fp)
    22e4:	00026e80 	call	26e8 <VGA_box>
}
    22e8:	e037883a 	mov	sp,fp
    22ec:	dfc00117 	ldw	ra,4(sp)
    22f0:	df000017 	ldw	fp,0(sp)
    22f4:	dec00204 	addi	sp,sp,8
    22f8:	f800283a 	ret

000022fc <tekenBox2>:
// tekenBox en tekenBox2 maken samen het visuele effect van het selecteren van een menu optie.
void tekenBox2(int Links, int Boven, int Rechts, int Onder, short Kleur){
    22fc:	defff804 	addi	sp,sp,-32
    2300:	dfc00715 	stw	ra,28(sp)
    2304:	df000615 	stw	fp,24(sp)
    2308:	df000604 	addi	fp,sp,24
    230c:	e13ffb15 	stw	r4,-20(fp)
    2310:	e17ffc15 	stw	r5,-16(fp)
    2314:	e1bffd15 	stw	r6,-12(fp)
    2318:	e1fffe15 	stw	r7,-8(fp)
    231c:	e0800217 	ldw	r2,8(fp)
    2320:	e0bfff0d 	sth	r2,-4(fp)
	Links = Links + 1;
    2324:	e0bffb17 	ldw	r2,-20(fp)
    2328:	10800044 	addi	r2,r2,1
    232c:	e0bffb15 	stw	r2,-20(fp)
	Boven = Boven + 1;
    2330:	e0bffc17 	ldw	r2,-16(fp)
    2334:	10800044 	addi	r2,r2,1
    2338:	e0bffc15 	stw	r2,-16(fp)
	Rechts = Rechts - 1;
    233c:	e0bffd17 	ldw	r2,-12(fp)
    2340:	10bfffc4 	addi	r2,r2,-1
    2344:	e0bffd15 	stw	r2,-12(fp)
	Onder = Onder -1;
    2348:	e0bffe17 	ldw	r2,-8(fp)
    234c:	10bfffc4 	addi	r2,r2,-1
    2350:	e0bffe15 	stw	r2,-8(fp)

	VGA_box(Links, Boven, Rechts, Onder, Kleur);
    2354:	e0bfff0f 	ldh	r2,-4(fp)
    2358:	d8800015 	stw	r2,0(sp)
    235c:	e13ffb17 	ldw	r4,-20(fp)
    2360:	e17ffc17 	ldw	r5,-16(fp)
    2364:	e1bffd17 	ldw	r6,-12(fp)
    2368:	e1fffe17 	ldw	r7,-8(fp)
    236c:	00026e80 	call	26e8 <VGA_box>
}
    2370:	e037883a 	mov	sp,fp
    2374:	dfc00117 	ldw	ra,4(sp)
    2378:	df000017 	ldw	fp,0(sp)
    237c:	dec00204 	addi	sp,sp,8
    2380:	f800283a 	ret

00002384 <teken_menu>:

void teken_menu(int ID){
    2384:	defffc04 	addi	sp,sp,-16
    2388:	dfc00315 	stw	ra,12(sp)
    238c:	df000215 	stw	fp,8(sp)
    2390:	df000204 	addi	fp,sp,8
    2394:	e13fff15 	stw	r4,-4(fp)
	VGA_text (xMenu, yMenu, "Singleplayer");
    2398:	d0e00817 	ldw	r3,-32736(gp)
    239c:	d0a00917 	ldw	r2,-32732(gp)
    23a0:	1809883a 	mov	r4,r3
    23a4:	100b883a 	mov	r5,r2
    23a8:	018000b4 	movhi	r6,2
    23ac:	31b1f204 	addi	r6,r6,-14392
    23b0:	000279c0 	call	279c <VGA_text>
	VGA_text (xMenu, yMenu + 4, "Multiplayer");
    23b4:	d0e00817 	ldw	r3,-32736(gp)
    23b8:	d0a00917 	ldw	r2,-32732(gp)
    23bc:	10800104 	addi	r2,r2,4
    23c0:	1809883a 	mov	r4,r3
    23c4:	100b883a 	mov	r5,r2
    23c8:	018000b4 	movhi	r6,2
    23cc:	31b1fb04 	addi	r6,r6,-14356
    23d0:	000279c0 	call	279c <VGA_text>
	VGA_text (xMenu, yMenu+8, "Highscores");
    23d4:	d0e00817 	ldw	r3,-32736(gp)
    23d8:	d0a00917 	ldw	r2,-32732(gp)
    23dc:	10800204 	addi	r2,r2,8
    23e0:	1809883a 	mov	r4,r3
    23e4:	100b883a 	mov	r5,r2
    23e8:	018000b4 	movhi	r6,2
    23ec:	31b20104 	addi	r6,r6,-14332
    23f0:	000279c0 	call	279c <VGA_text>
	VGA_text (xMenu, yMenu+12, "Tutorial");
    23f4:	d0e00817 	ldw	r3,-32736(gp)
    23f8:	d0a00917 	ldw	r2,-32732(gp)
    23fc:	10800304 	addi	r2,r2,12
    2400:	1809883a 	mov	r4,r3
    2404:	100b883a 	mov	r5,r2
    2408:	018000b4 	movhi	r6,2
    240c:	31b20404 	addi	r6,r6,-14320
    2410:	000279c0 	call	279c <VGA_text>
	if(ID == 1){
    2414:	e0bfff17 	ldw	r2,-4(fp)
    2418:	10800058 	cmpnei	r2,r2,1
    241c:	1000151e 	bne	r2,zero,2474 <teken_menu+0xf0>
		VGA_box(xLinks*4, xBoven*4, xRechts*4, xOnder*4, rood);
    2420:	d0a00417 	ldw	r2,-32752(gp)
    2424:	1085883a 	add	r2,r2,r2
    2428:	1085883a 	add	r2,r2,r2
    242c:	1009883a 	mov	r4,r2
    2430:	d0a00617 	ldw	r2,-32744(gp)
    2434:	1085883a 	add	r2,r2,r2
    2438:	1085883a 	add	r2,r2,r2
    243c:	100b883a 	mov	r5,r2
    2440:	d0a00517 	ldw	r2,-32748(gp)
    2444:	1085883a 	add	r2,r2,r2
    2448:	1085883a 	add	r2,r2,r2
    244c:	100d883a 	mov	r6,r2
    2450:	d0a00717 	ldw	r2,-32740(gp)
    2454:	1085883a 	add	r2,r2,r2
    2458:	1085883a 	add	r2,r2,r2
    245c:	1007883a 	mov	r3,r2
    2460:	00be0014 	movui	r2,63488
    2464:	d8800015 	stw	r2,0(sp)
    2468:	180f883a 	mov	r7,r3
    246c:	00026e80 	call	26e8 <VGA_box>
    2470:	00001906 	br	24d8 <teken_menu+0x154>
	}else if(ID == 2){
    2474:	e0bfff17 	ldw	r2,-4(fp)
    2478:	10800098 	cmpnei	r2,r2,2
    247c:	1000161e 	bne	r2,zero,24d8 <teken_menu+0x154>
		VGA_box(xLinks*4, xBoven*4 + 16, xRechts*4, xOnder*4 + 16, rood);
    2480:	d0a00417 	ldw	r2,-32752(gp)
    2484:	1085883a 	add	r2,r2,r2
    2488:	1085883a 	add	r2,r2,r2
    248c:	1009883a 	mov	r4,r2
    2490:	d0a00617 	ldw	r2,-32744(gp)
    2494:	10800104 	addi	r2,r2,4
    2498:	1085883a 	add	r2,r2,r2
    249c:	1085883a 	add	r2,r2,r2
    24a0:	100b883a 	mov	r5,r2
    24a4:	d0a00517 	ldw	r2,-32748(gp)
    24a8:	1085883a 	add	r2,r2,r2
    24ac:	1085883a 	add	r2,r2,r2
    24b0:	100d883a 	mov	r6,r2
    24b4:	d0a00717 	ldw	r2,-32740(gp)
    24b8:	10800104 	addi	r2,r2,4
    24bc:	1085883a 	add	r2,r2,r2
    24c0:	1085883a 	add	r2,r2,r2
    24c4:	1007883a 	mov	r3,r2
    24c8:	00be0014 	movui	r2,63488
    24cc:	d8800015 	stw	r2,0(sp)
    24d0:	180f883a 	mov	r7,r3
    24d4:	00026e80 	call	26e8 <VGA_box>
	}

}
    24d8:	e037883a 	mov	sp,fp
    24dc:	dfc00117 	ldw	ra,4(sp)
    24e0:	df000017 	ldw	fp,0(sp)
    24e4:	dec00204 	addi	sp,sp,8
    24e8:	f800283a 	ret

000024ec <main>:
void * Messages[500];


/* The main function creates two task and starts multi-tasking */
int main(void)
{
    24ec:	defffb04 	addi	sp,sp,-20
    24f0:	dfc00415 	stw	ra,16(sp)
    24f4:	df000315 	stw	fp,12(sp)
    24f8:	df000304 	addi	fp,sp,12
	INT8U err;
	OSInit();
    24fc:	00109480 	call	10948 <OSInit>
	int counter = 0x50500;				// 1/(50 MHz) x (0x960000) ~= 200 msec
    2500:	00800174 	movhi	r2,5
    2504:	10814004 	addi	r2,r2,1280
    2508:	e0bffe15 	stw	r2,-8(fp)
	*(interval_timer_ptr + 0x2) = (counter & 0xFFFF);
    250c:	d0a00c17 	ldw	r2,-32720(gp)
    2510:	10800204 	addi	r2,r2,8
    2514:	e0fffe17 	ldw	r3,-8(fp)
    2518:	18ffffcc 	andi	r3,r3,65535
    251c:	10c00015 	stw	r3,0(r2)
	*(interval_timer_ptr + 0x3) = (counter >> 16) & 0xFFFF;
    2520:	d0a00c17 	ldw	r2,-32720(gp)
    2524:	10800304 	addi	r2,r2,12
    2528:	e0fffe17 	ldw	r3,-8(fp)
    252c:	1806d43a 	srli	r3,r3,16
    2530:	10c00015 	stw	r3,0(r2)

	*(interval_timer_ptr + 1) = 0x7;	// STOP = 0, START = 1, CONT = 1, ITO = 1
    2534:	d0a00c17 	ldw	r2,-32720(gp)
    2538:	10800104 	addi	r2,r2,4
    253c:	00c001c4 	movi	r3,7
    2540:	10c00015 	stw	r3,0(r2)

	Flags = OSFlagCreate(C1_Flag + C2_Flag, &err);
    2544:	e0bfff04 	addi	r2,fp,-4
    2548:	01000304 	movi	r4,12
    254c:	100b883a 	mov	r5,r2
    2550:	00125600 	call	12560 <OSFlagCreate>
    2554:	d0a81715 	stw	r2,-24484(gp)
	Flags_Games = OSFlagCreate(Game_Flag + Singleplayer_Flag, &err);
    2558:	e0bfff04 	addi	r2,fp,-4
    255c:	01000884 	movi	r4,34
    2560:	100b883a 	mov	r5,r2
    2564:	00125600 	call	12560 <OSFlagCreate>
    2568:	d0a81515 	stw	r2,-24492(gp)


	gameSem = OSSemCreate(0);
    256c:	0009883a 	mov	r4,zero
    2570:	00160400 	call	16040 <OSSemCreate>
    2574:	d0a82215 	stw	r2,-24440(gp)
	controllerSem = OSSemCreate(0);
    2578:	0009883a 	mov	r4,zero
    257c:	00160400 	call	16040 <OSSemCreate>
    2580:	d0a81315 	stw	r2,-24500(gp)

	MailBox = OSMboxCreate((void *)0);
    2584:	0009883a 	mov	r4,zero
    2588:	0013b0c0 	call	13b0c <OSMboxCreate>
    258c:	d0a81815 	stw	r2,-24480(gp)
	MailBox2 = OSMboxCreate((void *)0);
    2590:	0009883a 	mov	r4,zero
    2594:	0013b0c0 	call	13b0c <OSMboxCreate>
    2598:	d0a81615 	stw	r2,-24488(gp)


	VGA_box (0, 0, 319, 239, 0);						//clear screen
    259c:	d8000015 	stw	zero,0(sp)
    25a0:	0009883a 	mov	r4,zero
    25a4:	000b883a 	mov	r5,zero
    25a8:	01804fc4 	movi	r6,319
    25ac:	01c03bc4 	movi	r7,239
    25b0:	00026e80 	call	26e8 <VGA_box>
	VGA_box (15, 50, 20, 100, 0x0000ff);				// links
    25b4:	00803fc4 	movi	r2,255
    25b8:	d8800015 	stw	r2,0(sp)
    25bc:	010003c4 	movi	r4,15
    25c0:	01400c84 	movi	r5,50
    25c4:	01800504 	movi	r6,20
    25c8:	01c01904 	movi	r7,100
    25cc:	00026e80 	call	26e8 <VGA_box>
	VGA_box (300, 50, 305, 100, 0x0000ff);				// rechts
    25d0:	00803fc4 	movi	r2,255
    25d4:	d8800015 	stw	r2,0(sp)
    25d8:	01004b04 	movi	r4,300
    25dc:	01400c84 	movi	r5,50
    25e0:	01804c44 	movi	r6,305
    25e4:	01c01904 	movi	r7,100
    25e8:	00026e80 	call	26e8 <VGA_box>

	VGA_box (0, 0, 319, 3, groen);					// boven
    25ec:	0081a5c4 	movi	r2,1687
    25f0:	d8800015 	stw	r2,0(sp)
    25f4:	0009883a 	mov	r4,zero
    25f8:	000b883a 	mov	r5,zero
    25fc:	01804fc4 	movi	r6,319
    2600:	01c000c4 	movi	r7,3
    2604:	00026e80 	call	26e8 <VGA_box>
	VGA_box (0, 236, 319, 239, groen);				// onder
    2608:	0081a5c4 	movi	r2,1687
    260c:	d8800015 	stw	r2,0(sp)
    2610:	0009883a 	mov	r4,zero
    2614:	01403b04 	movi	r5,236
    2618:	01804fc4 	movi	r6,319
    261c:	01c03bc4 	movi	r7,239
    2620:	00026e80 	call	26e8 <VGA_box>


	OSTaskCreate(controllers,(void*) 1,&controller1_stk[TASK_STACKSIZE-1],controller1_PRIORITY);
    2624:	01000034 	movhi	r4,0
    2628:	2100a004 	addi	r4,r4,640
    262c:	01400044 	movi	r5,1
    2630:	018000b4 	movhi	r6,2
    2634:	319b7704 	addi	r6,r6,28124
    2638:	01c002c4 	movi	r7,11
    263c:	0016fd80 	call	16fd8 <OSTaskCreate>
	OSTaskCreate(controllers,(void*) 2,&controller2_stk[TASK_STACKSIZE-1],controller2_PRIORITY);
    2640:	01000034 	movhi	r4,0
    2644:	2100a004 	addi	r4,r4,640
    2648:	01400084 	movi	r5,2
    264c:	018000f4 	movhi	r6,3
    2650:	31a37704 	addi	r6,r6,-29220
    2654:	01c00304 	movi	r7,12
    2658:	0016fd80 	call	16fd8 <OSTaskCreate>
	OSTaskCreate(Game,(void*) 0, &Game_stk[TASK_STACKSIZE-1],Game_PRIORITY);
    265c:	01000034 	movhi	r4,0
    2660:	2101e304 	addi	r4,r4,1932
    2664:	000b883a 	mov	r5,zero
    2668:	018000f4 	movhi	r6,3
    266c:	31ab7704 	addi	r6,r6,-21028
    2670:	01c00184 	movi	r7,6
    2674:	0016fd80 	call	16fd8 <OSTaskCreate>
	OSTaskCreate(Singleplayer,(void*) 0, &Singleplayer_stk[TASK_STACKSIZE-1],Singleplayer_PRIORITY);
    2678:	01000034 	movhi	r4,0
    267c:	21043c04 	addi	r4,r4,4336
    2680:	000b883a 	mov	r5,zero
    2684:	018000b4 	movhi	r6,2
    2688:	318b7704 	addi	r6,r6,11740
    268c:	01c001c4 	movi	r7,7
    2690:	0016fd80 	call	16fd8 <OSTaskCreate>


	OSTaskCreate(menu, (void*) 2, &menu_stk[TASK_STACKSIZE-1],menu_PRIORITY);
    2694:	01000034 	movhi	r4,0
    2698:	21074804 	addi	r4,r4,7456
    269c:	01400084 	movi	r5,2
    26a0:	018000b4 	movhi	r6,2
    26a4:	31937704 	addi	r6,r6,19932
    26a8:	01c00244 	movi	r7,9
    26ac:	0016fd80 	call	16fd8 <OSTaskCreate>
	OSTaskCreate(selecteerMenu, (void*) 3, &menu_stk2[TASK_STACKSIZE-1], menu_PRIORITY +1);
    26b0:	01000034 	movhi	r4,0
    26b4:	21078304 	addi	r4,r4,7692
    26b8:	014000c4 	movi	r5,3
    26bc:	018000f4 	movhi	r6,3
    26c0:	31b56b04 	addi	r6,r6,-10836
    26c4:	01c00284 	movi	r7,10
    26c8:	0016fd80 	call	16fd8 <OSTaskCreate>
	OSStart();
    26cc:	0010c6c0 	call	10c6c <OSStart>
	return 0;
    26d0:	0005883a 	mov	r2,zero
}
    26d4:	e037883a 	mov	sp,fp
    26d8:	dfc00117 	ldw	ra,4(sp)
    26dc:	df000017 	ldw	fp,0(sp)
    26e0:	dec00204 	addi	sp,sp,8
    26e4:	f800283a 	ret

000026e8 <VGA_box>:

void VGA_box(int x1, int y1, int x2, int y2, short pixel_color)
{
    26e8:	defff604 	addi	sp,sp,-40
    26ec:	df000915 	stw	fp,36(sp)
    26f0:	df000904 	addi	fp,sp,36
    26f4:	e13ffb15 	stw	r4,-20(fp)
    26f8:	e17ffc15 	stw	r5,-16(fp)
    26fc:	e1bffd15 	stw	r6,-12(fp)
    2700:	e1fffe15 	stw	r7,-8(fp)
    2704:	e0800117 	ldw	r2,4(fp)
    2708:	e0bfff0d 	sth	r2,-4(fp)
	int offset, row, col;
  	volatile short * pixel_buffer = (short *) 0x08000000;	// VGA pixel buffer
    270c:	00820034 	movhi	r2,2048
    2710:	e0bff915 	stw	r2,-28(fp)

	/* assume that the box coordinates are valid */
	for (row = y1; row <= y2; row++)
    2714:	e0bffc17 	ldw	r2,-16(fp)
    2718:	e0bff715 	stw	r2,-36(fp)
    271c:	00001806 	br	2780 <VGA_box+0x98>
	{
		col = x1;
    2720:	e0bffb17 	ldw	r2,-20(fp)
    2724:	e0bff815 	stw	r2,-32(fp)
		while (col <= x2)
    2728:	00000f06 	br	2768 <VGA_box+0x80>
		{
			offset = (row << 9) + col;
    272c:	e0bff717 	ldw	r2,-36(fp)
    2730:	1006927a 	slli	r3,r2,9
    2734:	e0bff817 	ldw	r2,-32(fp)
    2738:	1885883a 	add	r2,r3,r2
    273c:	e0bffa15 	stw	r2,-24(fp)
			*(pixel_buffer + offset) = pixel_color;	// compute halfword address, set pixel
    2740:	e0bffa17 	ldw	r2,-24(fp)
    2744:	1085883a 	add	r2,r2,r2
    2748:	1007883a 	mov	r3,r2
    274c:	e0bff917 	ldw	r2,-28(fp)
    2750:	10c5883a 	add	r2,r2,r3
    2754:	e0ffff0b 	ldhu	r3,-4(fp)
    2758:	10c0000d 	sth	r3,0(r2)
			++col;
    275c:	e0bff817 	ldw	r2,-32(fp)
    2760:	10800044 	addi	r2,r2,1
    2764:	e0bff815 	stw	r2,-32(fp)

	/* assume that the box coordinates are valid */
	for (row = y1; row <= y2; row++)
	{
		col = x1;
		while (col <= x2)
    2768:	e0bff817 	ldw	r2,-32(fp)
    276c:	e0fffd17 	ldw	r3,-12(fp)
    2770:	18bfee0e 	bge	r3,r2,272c <__alt_mem_Flash_flash_data+0xf400272c>
{
	int offset, row, col;
  	volatile short * pixel_buffer = (short *) 0x08000000;	// VGA pixel buffer

	/* assume that the box coordinates are valid */
	for (row = y1; row <= y2; row++)
    2774:	e0bff717 	ldw	r2,-36(fp)
    2778:	10800044 	addi	r2,r2,1
    277c:	e0bff715 	stw	r2,-36(fp)
    2780:	e0bff717 	ldw	r2,-36(fp)
    2784:	e0fffe17 	ldw	r3,-8(fp)
    2788:	18bfe50e 	bge	r3,r2,2720 <__alt_mem_Flash_flash_data+0xf4002720>
			offset = (row << 9) + col;
			*(pixel_buffer + offset) = pixel_color;	// compute halfword address, set pixel
			++col;
		}
	}
}
    278c:	e037883a 	mov	sp,fp
    2790:	df000017 	ldw	fp,0(sp)
    2794:	dec00104 	addi	sp,sp,4
    2798:	f800283a 	ret

0000279c <VGA_text>:

void VGA_text(int x, int y, char * text_ptr)
{
    279c:	defffa04 	addi	sp,sp,-24
    27a0:	df000515 	stw	fp,20(sp)
    27a4:	df000504 	addi	fp,sp,20
    27a8:	e13ffd15 	stw	r4,-12(fp)
    27ac:	e17ffe15 	stw	r5,-8(fp)
    27b0:	e1bfff15 	stw	r6,-4(fp)
	int offset;
  	volatile char * character_buffer = (char *) 0x09000000;	// VGA character buffer
    27b4:	00824034 	movhi	r2,2304
    27b8:	e0bffc15 	stw	r2,-16(fp)

	/* assume that the text string fits on one line */
	offset = (y << 7) + x;
    27bc:	e0bffe17 	ldw	r2,-8(fp)
    27c0:	100691fa 	slli	r3,r2,7
    27c4:	e0bffd17 	ldw	r2,-12(fp)
    27c8:	1885883a 	add	r2,r3,r2
    27cc:	e0bffb15 	stw	r2,-20(fp)
	while ( *(text_ptr) )
    27d0:	00000c06 	br	2804 <VGA_text+0x68>
	{
		*(character_buffer + offset) = *(text_ptr);	// write to the character buffer
    27d4:	e0bffb17 	ldw	r2,-20(fp)
    27d8:	e0fffc17 	ldw	r3,-16(fp)
    27dc:	1885883a 	add	r2,r3,r2
    27e0:	e0ffff17 	ldw	r3,-4(fp)
    27e4:	18c00003 	ldbu	r3,0(r3)
    27e8:	10c00005 	stb	r3,0(r2)
		++text_ptr;
    27ec:	e0bfff17 	ldw	r2,-4(fp)
    27f0:	10800044 	addi	r2,r2,1
    27f4:	e0bfff15 	stw	r2,-4(fp)
		++offset;
    27f8:	e0bffb17 	ldw	r2,-20(fp)
    27fc:	10800044 	addi	r2,r2,1
    2800:	e0bffb15 	stw	r2,-20(fp)
	int offset;
  	volatile char * character_buffer = (char *) 0x09000000;	// VGA character buffer

	/* assume that the text string fits on one line */
	offset = (y << 7) + x;
	while ( *(text_ptr) )
    2804:	e0bfff17 	ldw	r2,-4(fp)
    2808:	10800003 	ldbu	r2,0(r2)
    280c:	10803fcc 	andi	r2,r2,255
    2810:	1080201c 	xori	r2,r2,128
    2814:	10bfe004 	addi	r2,r2,-128
    2818:	103fee1e 	bne	r2,zero,27d4 <__alt_mem_Flash_flash_data+0xf40027d4>
	{
		*(character_buffer + offset) = *(text_ptr);	// write to the character buffer
		++text_ptr;
		++offset;
	}
}
    281c:	e037883a 	mov	sp,fp
    2820:	df000017 	ldw	fp,0(sp)
    2824:	dec00104 	addi	sp,sp,4
    2828:	f800283a 	ret

0000282c <draw_middenlijn>:

void draw_middenlijn(){
    282c:	defffc04 	addi	sp,sp,-16
    2830:	dfc00315 	stw	ra,12(sp)
    2834:	df000215 	stw	fp,8(sp)
    2838:	df000204 	addi	fp,sp,8
	int i = 0;
    283c:	e03fff15 	stw	zero,-4(fp)
	while(i < 240){
    2840:	00000c06 	br	2874 <draw_middenlijn+0x48>
		VGA_box (159, i, 160, i+ 7, groen);				// middenlijntje
    2844:	e0bfff17 	ldw	r2,-4(fp)
    2848:	10c001c4 	addi	r3,r2,7
    284c:	0081a5c4 	movi	r2,1687
    2850:	d8800015 	stw	r2,0(sp)
    2854:	010027c4 	movi	r4,159
    2858:	e17fff17 	ldw	r5,-4(fp)
    285c:	01802804 	movi	r6,160
    2860:	180f883a 	mov	r7,r3
    2864:	00026e80 	call	26e8 <VGA_box>
		i = i + 11;
    2868:	e0bfff17 	ldw	r2,-4(fp)
    286c:	108002c4 	addi	r2,r2,11
    2870:	e0bfff15 	stw	r2,-4(fp)
	}
}

void draw_middenlijn(){
	int i = 0;
	while(i < 240){
    2874:	e0bfff17 	ldw	r2,-4(fp)
    2878:	10803c10 	cmplti	r2,r2,240
    287c:	103ff11e 	bne	r2,zero,2844 <__alt_mem_Flash_flash_data+0xf4002844>
		VGA_box (159, i, 160, i+ 7, groen);				// middenlijntje
		i = i + 11;
	}
}
    2880:	e037883a 	mov	sp,fp
    2884:	dfc00117 	ldw	ra,4(sp)
    2888:	df000017 	ldw	fp,0(sp)
    288c:	dec00204 	addi	sp,sp,8
    2890:	f800283a 	ret

00002894 <del_middenlijn>:

void del_middenlijn(){
    2894:	defffd04 	addi	sp,sp,-12
    2898:	dfc00215 	stw	ra,8(sp)
    289c:	df000115 	stw	fp,4(sp)
    28a0:	df000104 	addi	fp,sp,4
	VGA_box(159, 4, 160, 235, 0);
    28a4:	d8000015 	stw	zero,0(sp)
    28a8:	010027c4 	movi	r4,159
    28ac:	01400104 	movi	r5,4
    28b0:	01802804 	movi	r6,160
    28b4:	01c03ac4 	movi	r7,235
    28b8:	00026e80 	call	26e8 <VGA_box>
}
    28bc:	e037883a 	mov	sp,fp
    28c0:	dfc00117 	ldw	ra,4(sp)
    28c4:	df000017 	ldw	fp,0(sp)
    28c8:	dec00204 	addi	sp,sp,8
    28cc:	f800283a 	ret

000028d0 <del_number>:

void del_number(int side){
    28d0:	defffc04 	addi	sp,sp,-16
    28d4:	dfc00315 	stw	ra,12(sp)
    28d8:	df000215 	stw	fp,8(sp)
    28dc:	df000204 	addi	fp,sp,8
    28e0:	e13fff15 	stw	r4,-4(fp)
	if(side == 1){
    28e4:	e0bfff17 	ldw	r2,-4(fp)
    28e8:	10800058 	cmpnei	r2,r2,1
    28ec:	1000061e 	bne	r2,zero,2908 <del_number+0x38>
		VGA_box(120, 20, 140, 60, 0);
    28f0:	d8000015 	stw	zero,0(sp)
    28f4:	01001e04 	movi	r4,120
    28f8:	01400504 	movi	r5,20
    28fc:	01802304 	movi	r6,140
    2900:	01c00f04 	movi	r7,60
    2904:	00026e80 	call	26e8 <VGA_box>
	}
	if(side == 2){
    2908:	e0bfff17 	ldw	r2,-4(fp)
    290c:	10800098 	cmpnei	r2,r2,2
    2910:	1000061e 	bne	r2,zero,292c <del_number+0x5c>
		VGA_box(180, 20, 200, 60, 0);
    2914:	d8000015 	stw	zero,0(sp)
    2918:	01002d04 	movi	r4,180
    291c:	01400504 	movi	r5,20
    2920:	01803204 	movi	r6,200
    2924:	01c00f04 	movi	r7,60
    2928:	00026e80 	call	26e8 <VGA_box>
	}
}
    292c:	e037883a 	mov	sp,fp
    2930:	dfc00117 	ldw	ra,4(sp)
    2934:	df000017 	ldw	fp,0(sp)
    2938:	dec00204 	addi	sp,sp,8
    293c:	f800283a 	ret

00002940 <deleteNummer>:

void deleteNummer(){
    2940:	defffd04 	addi	sp,sp,-12
    2944:	dfc00215 	stw	ra,8(sp)
    2948:	df000115 	stw	fp,4(sp)
    294c:	df000104 	addi	fp,sp,4
	VGA_box(120, 20, 200, 60, 0);
    2950:	d8000015 	stw	zero,0(sp)
    2954:	01001e04 	movi	r4,120
    2958:	01400504 	movi	r5,20
    295c:	01803204 	movi	r6,200
    2960:	01c00f04 	movi	r7,60
    2964:	00026e80 	call	26e8 <VGA_box>
}
    2968:	e037883a 	mov	sp,fp
    296c:	dfc00117 	ldw	ra,4(sp)
    2970:	df000017 	ldw	fp,0(sp)
    2974:	dec00204 	addi	sp,sp,8
    2978:	f800283a 	ret

0000297c <draw_number>:

void draw_number(int nummer, int ID){
    297c:	defffa04 	addi	sp,sp,-24
    2980:	dfc00515 	stw	ra,20(sp)
    2984:	df000415 	stw	fp,16(sp)
    2988:	df000404 	addi	fp,sp,16
    298c:	e13ffe15 	stw	r4,-8(fp)
    2990:	e17fff15 	stw	r5,-4(fp)

	int X = checkIDScore(ID);
    2994:	e13fff17 	ldw	r4,-4(fp)
    2998:	0002ff00 	call	2ff0 <checkIDScore>
    299c:	e0bffd15 	stw	r2,-12(fp)

	if(nummer == 1){
    29a0:	e0bffe17 	ldw	r2,-8(fp)
    29a4:	10800058 	cmpnei	r2,r2,1
    29a8:	10000b1e 	bne	r2,zero,29d8 <draw_number+0x5c>
		VGA_box(X + 9, 20, X+12, 60, wit);
    29ac:	e0bffd17 	ldw	r2,-12(fp)
    29b0:	11000244 	addi	r4,r2,9
    29b4:	e0bffd17 	ldw	r2,-12(fp)
    29b8:	10c00304 	addi	r3,r2,12
    29bc:	00bfffc4 	movi	r2,-1
    29c0:	d8800015 	stw	r2,0(sp)
    29c4:	01400504 	movi	r5,20
    29c8:	180d883a 	mov	r6,r3
    29cc:	01c00f04 	movi	r7,60
    29d0:	00026e80 	call	26e8 <VGA_box>
    29d4:	00018106 	br	2fdc <draw_number+0x660>
	}else if(nummer == 2){
    29d8:	e0bffe17 	ldw	r2,-8(fp)
    29dc:	10800098 	cmpnei	r2,r2,2
    29e0:	10002f1e 	bne	r2,zero,2aa0 <draw_number+0x124>
		VGA_box(X, 20, X+ 20, 22, wit);					//bovenste lijn
    29e4:	e0bffd17 	ldw	r2,-12(fp)
    29e8:	10c00504 	addi	r3,r2,20
    29ec:	00bfffc4 	movi	r2,-1
    29f0:	d8800015 	stw	r2,0(sp)
    29f4:	e13ffd17 	ldw	r4,-12(fp)
    29f8:	01400504 	movi	r5,20
    29fc:	180d883a 	mov	r6,r3
    2a00:	01c00584 	movi	r7,22
    2a04:	00026e80 	call	26e8 <VGA_box>
		VGA_box(X + 18, 22, X+ 20, 38, wit);			//lijn naar beneden
    2a08:	e0bffd17 	ldw	r2,-12(fp)
    2a0c:	11000484 	addi	r4,r2,18
    2a10:	e0bffd17 	ldw	r2,-12(fp)
    2a14:	10c00504 	addi	r3,r2,20
    2a18:	00bfffc4 	movi	r2,-1
    2a1c:	d8800015 	stw	r2,0(sp)
    2a20:	01400584 	movi	r5,22
    2a24:	180d883a 	mov	r6,r3
    2a28:	01c00984 	movi	r7,38
    2a2c:	00026e80 	call	26e8 <VGA_box>
		VGA_box(X, 38, X+ 20, 40, wit);					//lijn naar links
    2a30:	e0bffd17 	ldw	r2,-12(fp)
    2a34:	10c00504 	addi	r3,r2,20
    2a38:	00bfffc4 	movi	r2,-1
    2a3c:	d8800015 	stw	r2,0(sp)
    2a40:	e13ffd17 	ldw	r4,-12(fp)
    2a44:	01400984 	movi	r5,38
    2a48:	180d883a 	mov	r6,r3
    2a4c:	01c00a04 	movi	r7,40
    2a50:	00026e80 	call	26e8 <VGA_box>
		VGA_box(X, 40, X+ 2, 58, wit);					//lijn naar beneden
    2a54:	e0bffd17 	ldw	r2,-12(fp)
    2a58:	10c00084 	addi	r3,r2,2
    2a5c:	00bfffc4 	movi	r2,-1
    2a60:	d8800015 	stw	r2,0(sp)
    2a64:	e13ffd17 	ldw	r4,-12(fp)
    2a68:	01400a04 	movi	r5,40
    2a6c:	180d883a 	mov	r6,r3
    2a70:	01c00e84 	movi	r7,58
    2a74:	00026e80 	call	26e8 <VGA_box>
		VGA_box(X, 58, X+ 20, 60, wit);					//lijn naar rechts
    2a78:	e0bffd17 	ldw	r2,-12(fp)
    2a7c:	10c00504 	addi	r3,r2,20
    2a80:	00bfffc4 	movi	r2,-1
    2a84:	d8800015 	stw	r2,0(sp)
    2a88:	e13ffd17 	ldw	r4,-12(fp)
    2a8c:	01400e84 	movi	r5,58
    2a90:	180d883a 	mov	r6,r3
    2a94:	01c00f04 	movi	r7,60
    2a98:	00026e80 	call	26e8 <VGA_box>
    2a9c:	00014f06 	br	2fdc <draw_number+0x660>
	}else if(nummer == 3){
    2aa0:	e0bffe17 	ldw	r2,-8(fp)
    2aa4:	108000d8 	cmpnei	r2,r2,3
    2aa8:	1000261e 	bne	r2,zero,2b44 <draw_number+0x1c8>
		VGA_box(X, 20, X+ 20, 22, wit);					//bovenste lijn
    2aac:	e0bffd17 	ldw	r2,-12(fp)
    2ab0:	10c00504 	addi	r3,r2,20
    2ab4:	00bfffc4 	movi	r2,-1
    2ab8:	d8800015 	stw	r2,0(sp)
    2abc:	e13ffd17 	ldw	r4,-12(fp)
    2ac0:	01400504 	movi	r5,20
    2ac4:	180d883a 	mov	r6,r3
    2ac8:	01c00584 	movi	r7,22
    2acc:	00026e80 	call	26e8 <VGA_box>
		VGA_box(X + 18, 22, X+ 20, 60, wit);			//rechter lijn
    2ad0:	e0bffd17 	ldw	r2,-12(fp)
    2ad4:	11000484 	addi	r4,r2,18
    2ad8:	e0bffd17 	ldw	r2,-12(fp)
    2adc:	10c00504 	addi	r3,r2,20
    2ae0:	00bfffc4 	movi	r2,-1
    2ae4:	d8800015 	stw	r2,0(sp)
    2ae8:	01400584 	movi	r5,22
    2aec:	180d883a 	mov	r6,r3
    2af0:	01c00f04 	movi	r7,60
    2af4:	00026e80 	call	26e8 <VGA_box>
		VGA_box(X, 39, X+ 20, 41, wit);					//midden lijn
    2af8:	e0bffd17 	ldw	r2,-12(fp)
    2afc:	10c00504 	addi	r3,r2,20
    2b00:	00bfffc4 	movi	r2,-1
    2b04:	d8800015 	stw	r2,0(sp)
    2b08:	e13ffd17 	ldw	r4,-12(fp)
    2b0c:	014009c4 	movi	r5,39
    2b10:	180d883a 	mov	r6,r3
    2b14:	01c00a44 	movi	r7,41
    2b18:	00026e80 	call	26e8 <VGA_box>
		VGA_box(X, 58, X+ 20, 60, wit);					//onderste lijn
    2b1c:	e0bffd17 	ldw	r2,-12(fp)
    2b20:	10c00504 	addi	r3,r2,20
    2b24:	00bfffc4 	movi	r2,-1
    2b28:	d8800015 	stw	r2,0(sp)
    2b2c:	e13ffd17 	ldw	r4,-12(fp)
    2b30:	01400e84 	movi	r5,58
    2b34:	180d883a 	mov	r6,r3
    2b38:	01c00f04 	movi	r7,60
    2b3c:	00026e80 	call	26e8 <VGA_box>
    2b40:	00012606 	br	2fdc <draw_number+0x660>
	}else if(nummer == 4){
    2b44:	e0bffe17 	ldw	r2,-8(fp)
    2b48:	10800118 	cmpnei	r2,r2,4
    2b4c:	10001d1e 	bne	r2,zero,2bc4 <draw_number+0x248>
		VGA_box(X, 20, X+2, 40, wit);					//linkse lijn
    2b50:	e0bffd17 	ldw	r2,-12(fp)
    2b54:	10c00084 	addi	r3,r2,2
    2b58:	00bfffc4 	movi	r2,-1
    2b5c:	d8800015 	stw	r2,0(sp)
    2b60:	e13ffd17 	ldw	r4,-12(fp)
    2b64:	01400504 	movi	r5,20
    2b68:	180d883a 	mov	r6,r3
    2b6c:	01c00a04 	movi	r7,40
    2b70:	00026e80 	call	26e8 <VGA_box>
		VGA_box(X, 39, X + 20, 41, wit);				//middelste lijn
    2b74:	e0bffd17 	ldw	r2,-12(fp)
    2b78:	10c00504 	addi	r3,r2,20
    2b7c:	00bfffc4 	movi	r2,-1
    2b80:	d8800015 	stw	r2,0(sp)
    2b84:	e13ffd17 	ldw	r4,-12(fp)
    2b88:	014009c4 	movi	r5,39
    2b8c:	180d883a 	mov	r6,r3
    2b90:	01c00a44 	movi	r7,41
    2b94:	00026e80 	call	26e8 <VGA_box>
		VGA_box(X + 18, 20, X + 20, 60, wit);			//rechtse lijn
    2b98:	e0bffd17 	ldw	r2,-12(fp)
    2b9c:	11000484 	addi	r4,r2,18
    2ba0:	e0bffd17 	ldw	r2,-12(fp)
    2ba4:	10c00504 	addi	r3,r2,20
    2ba8:	00bfffc4 	movi	r2,-1
    2bac:	d8800015 	stw	r2,0(sp)
    2bb0:	01400504 	movi	r5,20
    2bb4:	180d883a 	mov	r6,r3
    2bb8:	01c00f04 	movi	r7,60
    2bbc:	00026e80 	call	26e8 <VGA_box>
    2bc0:	00010606 	br	2fdc <draw_number+0x660>
	}else if(nummer == 5){
    2bc4:	e0bffe17 	ldw	r2,-8(fp)
    2bc8:	10800158 	cmpnei	r2,r2,5
    2bcc:	10002f1e 	bne	r2,zero,2c8c <draw_number+0x310>
		VGA_box(X, 20, X+ 20, 22, wit);					//bovenste lijn
    2bd0:	e0bffd17 	ldw	r2,-12(fp)
    2bd4:	10c00504 	addi	r3,r2,20
    2bd8:	00bfffc4 	movi	r2,-1
    2bdc:	d8800015 	stw	r2,0(sp)
    2be0:	e13ffd17 	ldw	r4,-12(fp)
    2be4:	01400504 	movi	r5,20
    2be8:	180d883a 	mov	r6,r3
    2bec:	01c00584 	movi	r7,22
    2bf0:	00026e80 	call	26e8 <VGA_box>
		VGA_box(X, 22, X+ 2, 38, wit);					//lijn naar beneden
    2bf4:	e0bffd17 	ldw	r2,-12(fp)
    2bf8:	10c00084 	addi	r3,r2,2
    2bfc:	00bfffc4 	movi	r2,-1
    2c00:	d8800015 	stw	r2,0(sp)
    2c04:	e13ffd17 	ldw	r4,-12(fp)
    2c08:	01400584 	movi	r5,22
    2c0c:	180d883a 	mov	r6,r3
    2c10:	01c00984 	movi	r7,38
    2c14:	00026e80 	call	26e8 <VGA_box>
		VGA_box(X, 38, X+ 20, 40, wit);					//lijn naar links
    2c18:	e0bffd17 	ldw	r2,-12(fp)
    2c1c:	10c00504 	addi	r3,r2,20
    2c20:	00bfffc4 	movi	r2,-1
    2c24:	d8800015 	stw	r2,0(sp)
    2c28:	e13ffd17 	ldw	r4,-12(fp)
    2c2c:	01400984 	movi	r5,38
    2c30:	180d883a 	mov	r6,r3
    2c34:	01c00a04 	movi	r7,40
    2c38:	00026e80 	call	26e8 <VGA_box>
		VGA_box(X + 18, 40, X+ 20, 58, wit);			//lijn naar beneden
    2c3c:	e0bffd17 	ldw	r2,-12(fp)
    2c40:	11000484 	addi	r4,r2,18
    2c44:	e0bffd17 	ldw	r2,-12(fp)
    2c48:	10c00504 	addi	r3,r2,20
    2c4c:	00bfffc4 	movi	r2,-1
    2c50:	d8800015 	stw	r2,0(sp)
    2c54:	01400a04 	movi	r5,40
    2c58:	180d883a 	mov	r6,r3
    2c5c:	01c00e84 	movi	r7,58
    2c60:	00026e80 	call	26e8 <VGA_box>
		VGA_box(X, 58, X+ 20, 60, wit);					//lijn naar rechts
    2c64:	e0bffd17 	ldw	r2,-12(fp)
    2c68:	10c00504 	addi	r3,r2,20
    2c6c:	00bfffc4 	movi	r2,-1
    2c70:	d8800015 	stw	r2,0(sp)
    2c74:	e13ffd17 	ldw	r4,-12(fp)
    2c78:	01400e84 	movi	r5,58
    2c7c:	180d883a 	mov	r6,r3
    2c80:	01c00f04 	movi	r7,60
    2c84:	00026e80 	call	26e8 <VGA_box>
    2c88:	0000d406 	br	2fdc <draw_number+0x660>
	}else if(nummer == 6){
    2c8c:	e0bffe17 	ldw	r2,-8(fp)
    2c90:	10800198 	cmpnei	r2,r2,6
    2c94:	10002f1e 	bne	r2,zero,2d54 <draw_number+0x3d8>
		VGA_box(X, 20, X+2, 60, wit);					//lijn links
    2c98:	e0bffd17 	ldw	r2,-12(fp)
    2c9c:	10c00084 	addi	r3,r2,2
    2ca0:	00bfffc4 	movi	r2,-1
    2ca4:	d8800015 	stw	r2,0(sp)
    2ca8:	e13ffd17 	ldw	r4,-12(fp)
    2cac:	01400504 	movi	r5,20
    2cb0:	180d883a 	mov	r6,r3
    2cb4:	01c00f04 	movi	r7,60
    2cb8:	00026e80 	call	26e8 <VGA_box>
		VGA_box(X, 20, X+ 20, 22, wit);					//bovenste lijn
    2cbc:	e0bffd17 	ldw	r2,-12(fp)
    2cc0:	10c00504 	addi	r3,r2,20
    2cc4:	00bfffc4 	movi	r2,-1
    2cc8:	d8800015 	stw	r2,0(sp)
    2ccc:	e13ffd17 	ldw	r4,-12(fp)
    2cd0:	01400504 	movi	r5,20
    2cd4:	180d883a 	mov	r6,r3
    2cd8:	01c00584 	movi	r7,22
    2cdc:	00026e80 	call	26e8 <VGA_box>
		VGA_box(X, 58, X+ 20, 60, wit);					//onderste lijn
    2ce0:	e0bffd17 	ldw	r2,-12(fp)
    2ce4:	10c00504 	addi	r3,r2,20
    2ce8:	00bfffc4 	movi	r2,-1
    2cec:	d8800015 	stw	r2,0(sp)
    2cf0:	e13ffd17 	ldw	r4,-12(fp)
    2cf4:	01400e84 	movi	r5,58
    2cf8:	180d883a 	mov	r6,r3
    2cfc:	01c00f04 	movi	r7,60
    2d00:	00026e80 	call	26e8 <VGA_box>
		VGA_box(X + 18, 40, X+ 20, 58, wit);			//lijn rechts
    2d04:	e0bffd17 	ldw	r2,-12(fp)
    2d08:	11000484 	addi	r4,r2,18
    2d0c:	e0bffd17 	ldw	r2,-12(fp)
    2d10:	10c00504 	addi	r3,r2,20
    2d14:	00bfffc4 	movi	r2,-1
    2d18:	d8800015 	stw	r2,0(sp)
    2d1c:	01400a04 	movi	r5,40
    2d20:	180d883a 	mov	r6,r3
    2d24:	01c00e84 	movi	r7,58
    2d28:	00026e80 	call	26e8 <VGA_box>
		VGA_box(X, 39, X + 20, 41, wit);				//middelste lijn
    2d2c:	e0bffd17 	ldw	r2,-12(fp)
    2d30:	10c00504 	addi	r3,r2,20
    2d34:	00bfffc4 	movi	r2,-1
    2d38:	d8800015 	stw	r2,0(sp)
    2d3c:	e13ffd17 	ldw	r4,-12(fp)
    2d40:	014009c4 	movi	r5,39
    2d44:	180d883a 	mov	r6,r3
    2d48:	01c00a44 	movi	r7,41
    2d4c:	00026e80 	call	26e8 <VGA_box>
    2d50:	0000a206 	br	2fdc <draw_number+0x660>
	}else if(nummer == 7){
    2d54:	e0bffe17 	ldw	r2,-8(fp)
    2d58:	108001d8 	cmpnei	r2,r2,7
    2d5c:	1000141e 	bne	r2,zero,2db0 <draw_number+0x434>
		VGA_box(X + 18, 20, X + 20, 60, wit);			//rechtse lijn
    2d60:	e0bffd17 	ldw	r2,-12(fp)
    2d64:	11000484 	addi	r4,r2,18
    2d68:	e0bffd17 	ldw	r2,-12(fp)
    2d6c:	10c00504 	addi	r3,r2,20
    2d70:	00bfffc4 	movi	r2,-1
    2d74:	d8800015 	stw	r2,0(sp)
    2d78:	01400504 	movi	r5,20
    2d7c:	180d883a 	mov	r6,r3
    2d80:	01c00f04 	movi	r7,60
    2d84:	00026e80 	call	26e8 <VGA_box>
		VGA_box(X, 20, X+ 20, 22, wit);					//bovenste lijn
    2d88:	e0bffd17 	ldw	r2,-12(fp)
    2d8c:	10c00504 	addi	r3,r2,20
    2d90:	00bfffc4 	movi	r2,-1
    2d94:	d8800015 	stw	r2,0(sp)
    2d98:	e13ffd17 	ldw	r4,-12(fp)
    2d9c:	01400504 	movi	r5,20
    2da0:	180d883a 	mov	r6,r3
    2da4:	01c00584 	movi	r7,22
    2da8:	00026e80 	call	26e8 <VGA_box>
    2dac:	00008b06 	br	2fdc <draw_number+0x660>
	}else if(nummer == 8){
    2db0:	e0bffe17 	ldw	r2,-8(fp)
    2db4:	10800218 	cmpnei	r2,r2,8
    2db8:	10002f1e 	bne	r2,zero,2e78 <draw_number+0x4fc>
		VGA_box(X + 18, 20, X + 20, 60, wit);			//rechtse lijn
    2dbc:	e0bffd17 	ldw	r2,-12(fp)
    2dc0:	11000484 	addi	r4,r2,18
    2dc4:	e0bffd17 	ldw	r2,-12(fp)
    2dc8:	10c00504 	addi	r3,r2,20
    2dcc:	00bfffc4 	movi	r2,-1
    2dd0:	d8800015 	stw	r2,0(sp)
    2dd4:	01400504 	movi	r5,20
    2dd8:	180d883a 	mov	r6,r3
    2ddc:	01c00f04 	movi	r7,60
    2de0:	00026e80 	call	26e8 <VGA_box>
		VGA_box(X, 20, X+2, 60, wit);					//lijn links
    2de4:	e0bffd17 	ldw	r2,-12(fp)
    2de8:	10c00084 	addi	r3,r2,2
    2dec:	00bfffc4 	movi	r2,-1
    2df0:	d8800015 	stw	r2,0(sp)
    2df4:	e13ffd17 	ldw	r4,-12(fp)
    2df8:	01400504 	movi	r5,20
    2dfc:	180d883a 	mov	r6,r3
    2e00:	01c00f04 	movi	r7,60
    2e04:	00026e80 	call	26e8 <VGA_box>
		VGA_box(X, 20, X+ 20, 22, wit);					//bovenste lijn
    2e08:	e0bffd17 	ldw	r2,-12(fp)
    2e0c:	10c00504 	addi	r3,r2,20
    2e10:	00bfffc4 	movi	r2,-1
    2e14:	d8800015 	stw	r2,0(sp)
    2e18:	e13ffd17 	ldw	r4,-12(fp)
    2e1c:	01400504 	movi	r5,20
    2e20:	180d883a 	mov	r6,r3
    2e24:	01c00584 	movi	r7,22
    2e28:	00026e80 	call	26e8 <VGA_box>
		VGA_box(X, 39, X + 20, 41, wit);				//middelste lijn
    2e2c:	e0bffd17 	ldw	r2,-12(fp)
    2e30:	10c00504 	addi	r3,r2,20
    2e34:	00bfffc4 	movi	r2,-1
    2e38:	d8800015 	stw	r2,0(sp)
    2e3c:	e13ffd17 	ldw	r4,-12(fp)
    2e40:	014009c4 	movi	r5,39
    2e44:	180d883a 	mov	r6,r3
    2e48:	01c00a44 	movi	r7,41
    2e4c:	00026e80 	call	26e8 <VGA_box>
		VGA_box(X, 58, X+ 20, 60, wit);					//onderste lijn
    2e50:	e0bffd17 	ldw	r2,-12(fp)
    2e54:	10c00504 	addi	r3,r2,20
    2e58:	00bfffc4 	movi	r2,-1
    2e5c:	d8800015 	stw	r2,0(sp)
    2e60:	e13ffd17 	ldw	r4,-12(fp)
    2e64:	01400e84 	movi	r5,58
    2e68:	180d883a 	mov	r6,r3
    2e6c:	01c00f04 	movi	r7,60
    2e70:	00026e80 	call	26e8 <VGA_box>
    2e74:	00005906 	br	2fdc <draw_number+0x660>
	}else if(nummer == 9){
    2e78:	e0bffe17 	ldw	r2,-8(fp)
    2e7c:	10800258 	cmpnei	r2,r2,9
    2e80:	10002f1e 	bne	r2,zero,2f40 <draw_number+0x5c4>
		VGA_box(X + 18, 20, X + 20, 60, wit);			//rechtse lijn
    2e84:	e0bffd17 	ldw	r2,-12(fp)
    2e88:	11000484 	addi	r4,r2,18
    2e8c:	e0bffd17 	ldw	r2,-12(fp)
    2e90:	10c00504 	addi	r3,r2,20
    2e94:	00bfffc4 	movi	r2,-1
    2e98:	d8800015 	stw	r2,0(sp)
    2e9c:	01400504 	movi	r5,20
    2ea0:	180d883a 	mov	r6,r3
    2ea4:	01c00f04 	movi	r7,60
    2ea8:	00026e80 	call	26e8 <VGA_box>
		VGA_box(X, 20, X+2, 40, wit);					//linkse lijn
    2eac:	e0bffd17 	ldw	r2,-12(fp)
    2eb0:	10c00084 	addi	r3,r2,2
    2eb4:	00bfffc4 	movi	r2,-1
    2eb8:	d8800015 	stw	r2,0(sp)
    2ebc:	e13ffd17 	ldw	r4,-12(fp)
    2ec0:	01400504 	movi	r5,20
    2ec4:	180d883a 	mov	r6,r3
    2ec8:	01c00a04 	movi	r7,40
    2ecc:	00026e80 	call	26e8 <VGA_box>
		VGA_box(X, 20, X+ 20, 22, wit);					//bovenste lijn
    2ed0:	e0bffd17 	ldw	r2,-12(fp)
    2ed4:	10c00504 	addi	r3,r2,20
    2ed8:	00bfffc4 	movi	r2,-1
    2edc:	d8800015 	stw	r2,0(sp)
    2ee0:	e13ffd17 	ldw	r4,-12(fp)
    2ee4:	01400504 	movi	r5,20
    2ee8:	180d883a 	mov	r6,r3
    2eec:	01c00584 	movi	r7,22
    2ef0:	00026e80 	call	26e8 <VGA_box>
		VGA_box(X, 39, X + 20, 41, wit);				//middelste lijn
    2ef4:	e0bffd17 	ldw	r2,-12(fp)
    2ef8:	10c00504 	addi	r3,r2,20
    2efc:	00bfffc4 	movi	r2,-1
    2f00:	d8800015 	stw	r2,0(sp)
    2f04:	e13ffd17 	ldw	r4,-12(fp)
    2f08:	014009c4 	movi	r5,39
    2f0c:	180d883a 	mov	r6,r3
    2f10:	01c00a44 	movi	r7,41
    2f14:	00026e80 	call	26e8 <VGA_box>
		VGA_box(X, 58, X+ 20, 60, wit);					//onderste lijn
    2f18:	e0bffd17 	ldw	r2,-12(fp)
    2f1c:	10c00504 	addi	r3,r2,20
    2f20:	00bfffc4 	movi	r2,-1
    2f24:	d8800015 	stw	r2,0(sp)
    2f28:	e13ffd17 	ldw	r4,-12(fp)
    2f2c:	01400e84 	movi	r5,58
    2f30:	180d883a 	mov	r6,r3
    2f34:	01c00f04 	movi	r7,60
    2f38:	00026e80 	call	26e8 <VGA_box>
    2f3c:	00002706 	br	2fdc <draw_number+0x660>
	}else if(nummer == 0){
    2f40:	e0bffe17 	ldw	r2,-8(fp)
    2f44:	1000251e 	bne	r2,zero,2fdc <draw_number+0x660>
		VGA_box(X + 18, 20, X + 20, 60, wit);			//rechtse lijn
    2f48:	e0bffd17 	ldw	r2,-12(fp)
    2f4c:	11000484 	addi	r4,r2,18
    2f50:	e0bffd17 	ldw	r2,-12(fp)
    2f54:	10c00504 	addi	r3,r2,20
    2f58:	00bfffc4 	movi	r2,-1
    2f5c:	d8800015 	stw	r2,0(sp)
    2f60:	01400504 	movi	r5,20
    2f64:	180d883a 	mov	r6,r3
    2f68:	01c00f04 	movi	r7,60
    2f6c:	00026e80 	call	26e8 <VGA_box>
		VGA_box(X, 20, X+2, 60, wit);					//lijn links
    2f70:	e0bffd17 	ldw	r2,-12(fp)
    2f74:	10c00084 	addi	r3,r2,2
    2f78:	00bfffc4 	movi	r2,-1
    2f7c:	d8800015 	stw	r2,0(sp)
    2f80:	e13ffd17 	ldw	r4,-12(fp)
    2f84:	01400504 	movi	r5,20
    2f88:	180d883a 	mov	r6,r3
    2f8c:	01c00f04 	movi	r7,60
    2f90:	00026e80 	call	26e8 <VGA_box>
		VGA_box(X, 20, X+ 20, 22, wit);					//bovenste lijn
    2f94:	e0bffd17 	ldw	r2,-12(fp)
    2f98:	10c00504 	addi	r3,r2,20
    2f9c:	00bfffc4 	movi	r2,-1
    2fa0:	d8800015 	stw	r2,0(sp)
    2fa4:	e13ffd17 	ldw	r4,-12(fp)
    2fa8:	01400504 	movi	r5,20
    2fac:	180d883a 	mov	r6,r3
    2fb0:	01c00584 	movi	r7,22
    2fb4:	00026e80 	call	26e8 <VGA_box>
		VGA_box(X, 58, X+ 20, 60, wit);					//onderste lijn
    2fb8:	e0bffd17 	ldw	r2,-12(fp)
    2fbc:	10c00504 	addi	r3,r2,20
    2fc0:	00bfffc4 	movi	r2,-1
    2fc4:	d8800015 	stw	r2,0(sp)
    2fc8:	e13ffd17 	ldw	r4,-12(fp)
    2fcc:	01400e84 	movi	r5,58
    2fd0:	180d883a 	mov	r6,r3
    2fd4:	01c00f04 	movi	r7,60
    2fd8:	00026e80 	call	26e8 <VGA_box>
	}
}
    2fdc:	e037883a 	mov	sp,fp
    2fe0:	dfc00117 	ldw	ra,4(sp)
    2fe4:	df000017 	ldw	fp,0(sp)
    2fe8:	dec00204 	addi	sp,sp,8
    2fec:	f800283a 	ret

00002ff0 <checkIDScore>:

int checkIDScore(int ID){
    2ff0:	defffe04 	addi	sp,sp,-8
    2ff4:	df000115 	stw	fp,4(sp)
    2ff8:	df000104 	addi	fp,sp,4
    2ffc:	e13fff15 	stw	r4,-4(fp)
	if(ID == 1){
    3000:	e0bfff17 	ldw	r2,-4(fp)
    3004:	10800058 	cmpnei	r2,r2,1
    3008:	1000021e 	bne	r2,zero,3014 <checkIDScore+0x24>
		return 120;
    300c:	00801e04 	movi	r2,120
    3010:	00000b06 	br	3040 <checkIDScore+0x50>
	}else if(ID == 2){
    3014:	e0bfff17 	ldw	r2,-4(fp)
    3018:	10800098 	cmpnei	r2,r2,2
    301c:	1000021e 	bne	r2,zero,3028 <checkIDScore+0x38>
		return 150;
    3020:	00802584 	movi	r2,150
    3024:	00000606 	br	3040 <checkIDScore+0x50>
	}else if(ID == 3){
    3028:	e0bfff17 	ldw	r2,-4(fp)
    302c:	108000d8 	cmpnei	r2,r2,3
    3030:	1000021e 	bne	r2,zero,303c <checkIDScore+0x4c>
		return 180;
    3034:	00802d04 	movi	r2,180
    3038:	00000106 	br	3040 <checkIDScore+0x50>
	}
	
	return 0;
    303c:	0005883a 	mov	r2,zero
}
    3040:	e037883a 	mov	sp,fp
    3044:	df000017 	ldw	fp,0(sp)
    3048:	dec00104 	addi	sp,sp,4
    304c:	f800283a 	ret

00003050 <_printf_r>:
    3050:	defffd04 	addi	sp,sp,-12
    3054:	dfc00015 	stw	ra,0(sp)
    3058:	d9800115 	stw	r6,4(sp)
    305c:	d9c00215 	stw	r7,8(sp)
    3060:	280d883a 	mov	r6,r5
    3064:	21400217 	ldw	r5,8(r4)
    3068:	d9c00104 	addi	r7,sp,4
    306c:	000320c0 	call	320c <___vfprintf_internal_r>
    3070:	dfc00017 	ldw	ra,0(sp)
    3074:	dec00304 	addi	sp,sp,12
    3078:	f800283a 	ret

0000307c <printf>:
    307c:	defffc04 	addi	sp,sp,-16
    3080:	dfc00015 	stw	ra,0(sp)
    3084:	d9400115 	stw	r5,4(sp)
    3088:	d9800215 	stw	r6,8(sp)
    308c:	d9c00315 	stw	r7,12(sp)
    3090:	008000b4 	movhi	r2,2
    3094:	10bb2904 	addi	r2,r2,-4956
    3098:	10800017 	ldw	r2,0(r2)
    309c:	200b883a 	mov	r5,r4
    30a0:	d9800104 	addi	r6,sp,4
    30a4:	11000217 	ldw	r4,8(r2)
    30a8:	000515c0 	call	515c <__vfprintf_internal>
    30ac:	dfc00017 	ldw	ra,0(sp)
    30b0:	dec00404 	addi	sp,sp,16
    30b4:	f800283a 	ret

000030b8 <_puts_r>:
    30b8:	defff604 	addi	sp,sp,-40
    30bc:	dc000715 	stw	r16,28(sp)
    30c0:	2021883a 	mov	r16,r4
    30c4:	2809883a 	mov	r4,r5
    30c8:	dc400815 	stw	r17,32(sp)
    30cc:	dfc00915 	stw	ra,36(sp)
    30d0:	2823883a 	mov	r17,r5
    30d4:	00031740 	call	3174 <strlen>
    30d8:	81400217 	ldw	r5,8(r16)
    30dc:	11000044 	addi	r4,r2,1
    30e0:	d8800115 	stw	r2,4(sp)
    30e4:	008000b4 	movhi	r2,2
    30e8:	2980030b 	ldhu	r6,12(r5)
    30ec:	10b21404 	addi	r2,r2,-14256
    30f0:	d8800215 	stw	r2,8(sp)
    30f4:	00800044 	movi	r2,1
    30f8:	d8800315 	stw	r2,12(sp)
    30fc:	00800084 	movi	r2,2
    3100:	d8800515 	stw	r2,20(sp)
    3104:	dc400015 	stw	r17,0(sp)
    3108:	d9000615 	stw	r4,24(sp)
    310c:	dec00415 	stw	sp,16(sp)
    3110:	3088000c 	andi	r2,r6,8192
    3114:	1000061e 	bne	r2,zero,3130 <_puts_r+0x78>
    3118:	29001917 	ldw	r4,100(r5)
    311c:	00b7ffc4 	movi	r2,-8193
    3120:	31880014 	ori	r6,r6,8192
    3124:	2084703a 	and	r2,r4,r2
    3128:	2980030d 	sth	r6,12(r5)
    312c:	28801915 	stw	r2,100(r5)
    3130:	8009883a 	mov	r4,r16
    3134:	d9800404 	addi	r6,sp,16
    3138:	00077000 	call	7700 <__sfvwrite_r>
    313c:	1000061e 	bne	r2,zero,3158 <_puts_r+0xa0>
    3140:	00800284 	movi	r2,10
    3144:	dfc00917 	ldw	ra,36(sp)
    3148:	dc400817 	ldw	r17,32(sp)
    314c:	dc000717 	ldw	r16,28(sp)
    3150:	dec00a04 	addi	sp,sp,40
    3154:	f800283a 	ret
    3158:	00bfffc4 	movi	r2,-1
    315c:	003ff906 	br	3144 <__alt_mem_Flash_flash_data+0xf4003144>

00003160 <puts>:
    3160:	008000b4 	movhi	r2,2
    3164:	10bb2904 	addi	r2,r2,-4956
    3168:	200b883a 	mov	r5,r4
    316c:	11000017 	ldw	r4,0(r2)
    3170:	00030b81 	jmpi	30b8 <_puts_r>

00003174 <strlen>:
    3174:	208000cc 	andi	r2,r4,3
    3178:	10002026 	beq	r2,zero,31fc <strlen+0x88>
    317c:	20800007 	ldb	r2,0(r4)
    3180:	10002026 	beq	r2,zero,3204 <strlen+0x90>
    3184:	2005883a 	mov	r2,r4
    3188:	00000206 	br	3194 <strlen+0x20>
    318c:	10c00007 	ldb	r3,0(r2)
    3190:	18001826 	beq	r3,zero,31f4 <strlen+0x80>
    3194:	10800044 	addi	r2,r2,1
    3198:	10c000cc 	andi	r3,r2,3
    319c:	183ffb1e 	bne	r3,zero,318c <__alt_mem_Flash_flash_data+0xf400318c>
    31a0:	10c00017 	ldw	r3,0(r2)
    31a4:	01ffbff4 	movhi	r7,65279
    31a8:	39ffbfc4 	addi	r7,r7,-257
    31ac:	00ca303a 	nor	r5,zero,r3
    31b0:	01a02074 	movhi	r6,32897
    31b4:	19c7883a 	add	r3,r3,r7
    31b8:	31a02004 	addi	r6,r6,-32640
    31bc:	1946703a 	and	r3,r3,r5
    31c0:	1986703a 	and	r3,r3,r6
    31c4:	1800091e 	bne	r3,zero,31ec <strlen+0x78>
    31c8:	10800104 	addi	r2,r2,4
    31cc:	10c00017 	ldw	r3,0(r2)
    31d0:	19cb883a 	add	r5,r3,r7
    31d4:	00c6303a 	nor	r3,zero,r3
    31d8:	28c6703a 	and	r3,r5,r3
    31dc:	1986703a 	and	r3,r3,r6
    31e0:	183ff926 	beq	r3,zero,31c8 <__alt_mem_Flash_flash_data+0xf40031c8>
    31e4:	00000106 	br	31ec <strlen+0x78>
    31e8:	10800044 	addi	r2,r2,1
    31ec:	10c00007 	ldb	r3,0(r2)
    31f0:	183ffd1e 	bne	r3,zero,31e8 <__alt_mem_Flash_flash_data+0xf40031e8>
    31f4:	1105c83a 	sub	r2,r2,r4
    31f8:	f800283a 	ret
    31fc:	2005883a 	mov	r2,r4
    3200:	003fe706 	br	31a0 <__alt_mem_Flash_flash_data+0xf40031a0>
    3204:	0005883a 	mov	r2,zero
    3208:	f800283a 	ret

0000320c <___vfprintf_internal_r>:
    320c:	deffb604 	addi	sp,sp,-296
    3210:	dfc04915 	stw	ra,292(sp)
    3214:	ddc04715 	stw	r23,284(sp)
    3218:	dd804615 	stw	r22,280(sp)
    321c:	282f883a 	mov	r23,r5
    3220:	202d883a 	mov	r22,r4
    3224:	d9802a15 	stw	r6,168(sp)
    3228:	d9c02d15 	stw	r7,180(sp)
    322c:	df004815 	stw	fp,288(sp)
    3230:	dd404515 	stw	r21,276(sp)
    3234:	dd004415 	stw	r20,272(sp)
    3238:	dcc04315 	stw	r19,268(sp)
    323c:	dc804215 	stw	r18,264(sp)
    3240:	dc404115 	stw	r17,260(sp)
    3244:	dc004015 	stw	r16,256(sp)
    3248:	0007df40 	call	7df4 <_localeconv_r>
    324c:	10800017 	ldw	r2,0(r2)
    3250:	1009883a 	mov	r4,r2
    3254:	d8803515 	stw	r2,212(sp)
    3258:	00031740 	call	3174 <strlen>
    325c:	d8803815 	stw	r2,224(sp)
    3260:	b0000226 	beq	r22,zero,326c <___vfprintf_internal_r+0x60>
    3264:	b0800e17 	ldw	r2,56(r22)
    3268:	1000e126 	beq	r2,zero,35f0 <___vfprintf_internal_r+0x3e4>
    326c:	b880030b 	ldhu	r2,12(r23)
    3270:	10c8000c 	andi	r3,r2,8192
    3274:	1800061e 	bne	r3,zero,3290 <___vfprintf_internal_r+0x84>
    3278:	b9001917 	ldw	r4,100(r23)
    327c:	00f7ffc4 	movi	r3,-8193
    3280:	10880014 	ori	r2,r2,8192
    3284:	20c6703a 	and	r3,r4,r3
    3288:	b880030d 	sth	r2,12(r23)
    328c:	b8c01915 	stw	r3,100(r23)
    3290:	10c0020c 	andi	r3,r2,8
    3294:	1800a726 	beq	r3,zero,3534 <___vfprintf_internal_r+0x328>
    3298:	b8c00417 	ldw	r3,16(r23)
    329c:	1800a526 	beq	r3,zero,3534 <___vfprintf_internal_r+0x328>
    32a0:	1080068c 	andi	r2,r2,26
    32a4:	00c00284 	movi	r3,10
    32a8:	10c0aa26 	beq	r2,r3,3554 <___vfprintf_internal_r+0x348>
    32ac:	dac01e04 	addi	r11,sp,120
    32b0:	db001dc4 	addi	r12,sp,119
    32b4:	d8800404 	addi	r2,sp,16
    32b8:	050000b4 	movhi	r20,2
    32bc:	dac02815 	stw	r11,160(sp)
    32c0:	5b17c83a 	sub	r11,r11,r12
    32c4:	a5322584 	addi	r20,r20,-14186
    32c8:	db002915 	stw	r12,164(sp)
    32cc:	d8801e15 	stw	r2,120(sp)
    32d0:	d8002015 	stw	zero,128(sp)
    32d4:	d8001f15 	stw	zero,124(sp)
    32d8:	d8003315 	stw	zero,204(sp)
    32dc:	d8003715 	stw	zero,220(sp)
    32e0:	d8003915 	stw	zero,228(sp)
    32e4:	1011883a 	mov	r8,r2
    32e8:	d8003b15 	stw	zero,236(sp)
    32ec:	d8003a15 	stw	zero,232(sp)
    32f0:	d8002f15 	stw	zero,188(sp)
    32f4:	dac03c15 	stw	r11,240(sp)
    32f8:	db002a17 	ldw	r12,168(sp)
    32fc:	60800007 	ldb	r2,0(r12)
    3300:	1000be26 	beq	r2,zero,35fc <___vfprintf_internal_r+0x3f0>
    3304:	00c00944 	movi	r3,37
    3308:	10c0bc26 	beq	r2,r3,35fc <___vfprintf_internal_r+0x3f0>
    330c:	6021883a 	mov	r16,r12
    3310:	00000106 	br	3318 <___vfprintf_internal_r+0x10c>
    3314:	10c08426 	beq	r2,r3,3528 <___vfprintf_internal_r+0x31c>
    3318:	84000044 	addi	r16,r16,1
    331c:	80800007 	ldb	r2,0(r16)
    3320:	103ffc1e 	bne	r2,zero,3314 <__alt_mem_Flash_flash_data+0xf4003314>
    3324:	dac02a17 	ldw	r11,168(sp)
    3328:	82e3c83a 	sub	r17,r16,r11
    332c:	88000f26 	beq	r17,zero,336c <___vfprintf_internal_r+0x160>
    3330:	d8c02017 	ldw	r3,128(sp)
    3334:	d8801f17 	ldw	r2,124(sp)
    3338:	dac02a17 	ldw	r11,168(sp)
    333c:	1c47883a 	add	r3,r3,r17
    3340:	10800044 	addi	r2,r2,1
    3344:	d8c02015 	stw	r3,128(sp)
    3348:	42c00015 	stw	r11,0(r8)
    334c:	44400115 	stw	r17,4(r8)
    3350:	d8801f15 	stw	r2,124(sp)
    3354:	00c001c4 	movi	r3,7
    3358:	18809316 	blt	r3,r2,35a8 <___vfprintf_internal_r+0x39c>
    335c:	42000204 	addi	r8,r8,8
    3360:	db002f17 	ldw	r12,188(sp)
    3364:	6459883a 	add	r12,r12,r17
    3368:	db002f15 	stw	r12,188(sp)
    336c:	80800007 	ldb	r2,0(r16)
    3370:	10009426 	beq	r2,zero,35c4 <___vfprintf_internal_r+0x3b8>
    3374:	80800044 	addi	r2,r16,1
    3378:	84000047 	ldb	r16,1(r16)
    337c:	d8002785 	stb	zero,158(sp)
    3380:	000d883a 	mov	r6,zero
    3384:	027fffc4 	movi	r9,-1
    3388:	d8002e15 	stw	zero,184(sp)
    338c:	0023883a 	mov	r17,zero
    3390:	01001604 	movi	r4,88
    3394:	01400244 	movi	r5,9
    3398:	02800a84 	movi	r10,42
    339c:	01c01b04 	movi	r7,108
    33a0:	10c00044 	addi	r3,r2,1
    33a4:	80bff804 	addi	r2,r16,-32
    33a8:	2082cd36 	bltu	r4,r2,3ee0 <___vfprintf_internal_r+0xcd4>
    33ac:	100490ba 	slli	r2,r2,2
    33b0:	02c00034 	movhi	r11,0
    33b4:	5accf104 	addi	r11,r11,13252
    33b8:	12c5883a 	add	r2,r2,r11
    33bc:	10800017 	ldw	r2,0(r2)
    33c0:	1000683a 	jmp	r2
    33c4:	00003cf8 	rdprs	zero,zero,243
    33c8:	00003ee0 	cmpeqi	zero,zero,251
    33cc:	00003ee0 	cmpeqi	zero,zero,251
    33d0:	00003e48 	cmpgei	zero,zero,249
    33d4:	00003ee0 	cmpeqi	zero,zero,251
    33d8:	00003ee0 	cmpeqi	zero,zero,251
    33dc:	00003ee0 	cmpeqi	zero,zero,251
    33e0:	00003ee0 	cmpeqi	zero,zero,251
    33e4:	00003ee0 	cmpeqi	zero,zero,251
    33e8:	00003ee0 	cmpeqi	zero,zero,251
    33ec:	00003d18 	cmpnei	zero,zero,244
    33f0:	00003d44 	movi	zero,245
    33f4:	00003ee0 	cmpeqi	zero,zero,251
    33f8:	00003604 	movi	zero,216
    33fc:	00003614 	movui	zero,216
    3400:	00003ee0 	cmpeqi	zero,zero,251
    3404:	00003654 	movui	zero,217
    3408:	00003664 	muli	zero,zero,217
    340c:	00003664 	muli	zero,zero,217
    3410:	00003664 	muli	zero,zero,217
    3414:	00003664 	muli	zero,zero,217
    3418:	00003664 	muli	zero,zero,217
    341c:	00003664 	muli	zero,zero,217
    3420:	00003664 	muli	zero,zero,217
    3424:	00003664 	muli	zero,zero,217
    3428:	00003664 	muli	zero,zero,217
    342c:	00003ee0 	cmpeqi	zero,zero,251
    3430:	00003ee0 	cmpeqi	zero,zero,251
    3434:	00003ee0 	cmpeqi	zero,zero,251
    3438:	00003ee0 	cmpeqi	zero,zero,251
    343c:	00003ee0 	cmpeqi	zero,zero,251
    3440:	00003ee0 	cmpeqi	zero,zero,251
    3444:	00003ee0 	cmpeqi	zero,zero,251
    3448:	00003ee0 	cmpeqi	zero,zero,251
    344c:	00003ee0 	cmpeqi	zero,zero,251
    3450:	00003ee0 	cmpeqi	zero,zero,251
    3454:	00003698 	cmpnei	zero,zero,218
    3458:	00003b08 	cmpgei	zero,zero,236
    345c:	00003ee0 	cmpeqi	zero,zero,251
    3460:	00003b08 	cmpgei	zero,zero,236
    3464:	00003ee0 	cmpeqi	zero,zero,251
    3468:	00003ee0 	cmpeqi	zero,zero,251
    346c:	00003ee0 	cmpeqi	zero,zero,251
    3470:	00003ee0 	cmpeqi	zero,zero,251
    3474:	00003bf4 	movhi	zero,239
    3478:	00003ee0 	cmpeqi	zero,zero,251
    347c:	00003ee0 	cmpeqi	zero,zero,251
    3480:	00003a9c 	xori	zero,zero,234
    3484:	00003ee0 	cmpeqi	zero,zero,251
    3488:	00003ee0 	cmpeqi	zero,zero,251
    348c:	00003ee0 	cmpeqi	zero,zero,251
    3490:	00003ee0 	cmpeqi	zero,zero,251
    3494:	00003ee0 	cmpeqi	zero,zero,251
    3498:	00003ad8 	cmpnei	zero,zero,235
    349c:	00003ee0 	cmpeqi	zero,zero,251
    34a0:	00003ee0 	cmpeqi	zero,zero,251
    34a4:	00003c9c 	xori	zero,zero,242
    34a8:	00003ee0 	cmpeqi	zero,zero,251
    34ac:	00003ee0 	cmpeqi	zero,zero,251
    34b0:	00003ee0 	cmpeqi	zero,zero,251
    34b4:	00003ee0 	cmpeqi	zero,zero,251
    34b8:	00003ee0 	cmpeqi	zero,zero,251
    34bc:	00003ee0 	cmpeqi	zero,zero,251
    34c0:	00003ee0 	cmpeqi	zero,zero,251
    34c4:	00003ee0 	cmpeqi	zero,zero,251
    34c8:	00003ee0 	cmpeqi	zero,zero,251
    34cc:	00003ee0 	cmpeqi	zero,zero,251
    34d0:	00003d54 	movui	zero,245
    34d4:	00003c04 	movi	zero,240
    34d8:	00003b08 	cmpgei	zero,zero,236
    34dc:	00003b08 	cmpgei	zero,zero,236
    34e0:	00003b08 	cmpgei	zero,zero,236
    34e4:	00003c44 	movi	zero,241
    34e8:	00003c04 	movi	zero,240
    34ec:	00003ee0 	cmpeqi	zero,zero,251
    34f0:	00003ee0 	cmpeqi	zero,zero,251
    34f4:	00003c54 	movui	zero,241
    34f8:	00003ee0 	cmpeqi	zero,zero,251
    34fc:	00003c68 	cmpgeui	zero,zero,241
    3500:	00003ea4 	muli	zero,zero,250
    3504:	00003bac 	andhi	zero,zero,238
    3508:	00003e58 	cmpnei	zero,zero,249
    350c:	00003ee0 	cmpeqi	zero,zero,251
    3510:	00003d94 	movui	zero,246
    3514:	00003ee0 	cmpeqi	zero,zero,251
    3518:	00003e68 	cmpgeui	zero,zero,249
    351c:	00003ee0 	cmpeqi	zero,zero,251
    3520:	00003ee0 	cmpeqi	zero,zero,251
    3524:	00003e08 	cmpgei	zero,zero,248
    3528:	db002a17 	ldw	r12,168(sp)
    352c:	8323c83a 	sub	r17,r16,r12
    3530:	003f7e06 	br	332c <__alt_mem_Flash_flash_data+0xf400332c>
    3534:	b009883a 	mov	r4,r22
    3538:	b80b883a 	mov	r5,r23
    353c:	000523c0 	call	523c <__swsetup_r>
    3540:	10000c1e 	bne	r2,zero,3574 <___vfprintf_internal_r+0x368>
    3544:	b880030b 	ldhu	r2,12(r23)
    3548:	00c00284 	movi	r3,10
    354c:	1080068c 	andi	r2,r2,26
    3550:	10ff561e 	bne	r2,r3,32ac <__alt_mem_Flash_flash_data+0xf40032ac>
    3554:	b880038f 	ldh	r2,14(r23)
    3558:	103f5416 	blt	r2,zero,32ac <__alt_mem_Flash_flash_data+0xf40032ac>
    355c:	d9802a17 	ldw	r6,168(sp)
    3560:	d9c02d17 	ldw	r7,180(sp)
    3564:	b009883a 	mov	r4,r22
    3568:	b80b883a 	mov	r5,r23
    356c:	00051800 	call	5180 <__sbprintf>
    3570:	00000106 	br	3578 <___vfprintf_internal_r+0x36c>
    3574:	00bfffc4 	movi	r2,-1
    3578:	dfc04917 	ldw	ra,292(sp)
    357c:	df004817 	ldw	fp,288(sp)
    3580:	ddc04717 	ldw	r23,284(sp)
    3584:	dd804617 	ldw	r22,280(sp)
    3588:	dd404517 	ldw	r21,276(sp)
    358c:	dd004417 	ldw	r20,272(sp)
    3590:	dcc04317 	ldw	r19,268(sp)
    3594:	dc804217 	ldw	r18,264(sp)
    3598:	dc404117 	ldw	r17,260(sp)
    359c:	dc004017 	ldw	r16,256(sp)
    35a0:	dec04a04 	addi	sp,sp,296
    35a4:	f800283a 	ret
    35a8:	b009883a 	mov	r4,r22
    35ac:	b80b883a 	mov	r5,r23
    35b0:	d9801e04 	addi	r6,sp,120
    35b4:	000a4d40 	call	a4d4 <__sprint_r>
    35b8:	1000081e 	bne	r2,zero,35dc <___vfprintf_internal_r+0x3d0>
    35bc:	da000404 	addi	r8,sp,16
    35c0:	003f6706 	br	3360 <__alt_mem_Flash_flash_data+0xf4003360>
    35c4:	d8802017 	ldw	r2,128(sp)
    35c8:	10000426 	beq	r2,zero,35dc <___vfprintf_internal_r+0x3d0>
    35cc:	b009883a 	mov	r4,r22
    35d0:	b80b883a 	mov	r5,r23
    35d4:	d9801e04 	addi	r6,sp,120
    35d8:	000a4d40 	call	a4d4 <__sprint_r>
    35dc:	b880030b 	ldhu	r2,12(r23)
    35e0:	1080100c 	andi	r2,r2,64
    35e4:	103fe31e 	bne	r2,zero,3574 <__alt_mem_Flash_flash_data+0xf4003574>
    35e8:	d8802f17 	ldw	r2,188(sp)
    35ec:	003fe206 	br	3578 <__alt_mem_Flash_flash_data+0xf4003578>
    35f0:	b009883a 	mov	r4,r22
    35f4:	000729c0 	call	729c <__sinit>
    35f8:	003f1c06 	br	326c <__alt_mem_Flash_flash_data+0xf400326c>
    35fc:	dc002a17 	ldw	r16,168(sp)
    3600:	003f5a06 	br	336c <__alt_mem_Flash_flash_data+0xf400336c>
    3604:	1805883a 	mov	r2,r3
    3608:	8c400114 	ori	r17,r17,4
    360c:	1c000007 	ldb	r16,0(r3)
    3610:	003f6306 	br	33a0 <__alt_mem_Flash_flash_data+0xf40033a0>
    3614:	1c000007 	ldb	r16,0(r3)
    3618:	18800044 	addi	r2,r3,1
    361c:	8286ad26 	beq	r16,r10,50d4 <___vfprintf_internal_r+0x1ec8>
    3620:	82fff404 	addi	r11,r16,-48
    3624:	1007883a 	mov	r3,r2
    3628:	0013883a 	mov	r9,zero
    362c:	2aff5d36 	bltu	r5,r11,33a4 <__alt_mem_Flash_flash_data+0xf40033a4>
    3630:	1c000007 	ldb	r16,0(r3)
    3634:	4a4002a4 	muli	r9,r9,10
    3638:	18c00044 	addi	r3,r3,1
    363c:	5a53883a 	add	r9,r11,r9
    3640:	82fff404 	addi	r11,r16,-48
    3644:	2afffa2e 	bgeu	r5,r11,3630 <__alt_mem_Flash_flash_data+0xf4003630>
    3648:	483f560e 	bge	r9,zero,33a4 <__alt_mem_Flash_flash_data+0xf40033a4>
    364c:	027fffc4 	movi	r9,-1
    3650:	003f5406 	br	33a4 <__alt_mem_Flash_flash_data+0xf40033a4>
    3654:	8c402014 	ori	r17,r17,128
    3658:	1805883a 	mov	r2,r3
    365c:	1c000007 	ldb	r16,0(r3)
    3660:	003f4f06 	br	33a0 <__alt_mem_Flash_flash_data+0xf40033a0>
    3664:	1805883a 	mov	r2,r3
    3668:	d8002e15 	stw	zero,184(sp)
    366c:	82fff404 	addi	r11,r16,-48
    3670:	0019883a 	mov	r12,zero
    3674:	14000007 	ldb	r16,0(r2)
    3678:	630002a4 	muli	r12,r12,10
    367c:	18c00044 	addi	r3,r3,1
    3680:	1805883a 	mov	r2,r3
    3684:	62d9883a 	add	r12,r12,r11
    3688:	82fff404 	addi	r11,r16,-48
    368c:	2afff92e 	bgeu	r5,r11,3674 <__alt_mem_Flash_flash_data+0xf4003674>
    3690:	db002e15 	stw	r12,184(sp)
    3694:	003f4306 	br	33a4 <__alt_mem_Flash_flash_data+0xf40033a4>
    3698:	8c400414 	ori	r17,r17,16
    369c:	d8c02a15 	stw	r3,168(sp)
    36a0:	d9802785 	stb	r6,158(sp)
    36a4:	8880080c 	andi	r2,r17,32
    36a8:	d8c02d17 	ldw	r3,180(sp)
    36ac:	10015a26 	beq	r2,zero,3c18 <___vfprintf_internal_r+0xa0c>
    36b0:	db002d17 	ldw	r12,180(sp)
    36b4:	18800117 	ldw	r2,4(r3)
    36b8:	1cc00017 	ldw	r19,0(r3)
    36bc:	63000204 	addi	r12,r12,8
    36c0:	db002d15 	stw	r12,180(sp)
    36c4:	1039883a 	mov	fp,r2
    36c8:	10044516 	blt	r2,zero,47e0 <___vfprintf_internal_r+0x15d4>
    36cc:	dd402783 	ldbu	r21,158(sp)
    36d0:	da403215 	stw	r9,200(sp)
    36d4:	00800044 	movi	r2,1
    36d8:	9f06b03a 	or	r3,r19,fp
    36dc:	48000216 	blt	r9,zero,36e8 <___vfprintf_internal_r+0x4dc>
    36e0:	013fdfc4 	movi	r4,-129
    36e4:	8922703a 	and	r17,r17,r4
    36e8:	1802071e 	bne	r3,zero,3f08 <___vfprintf_internal_r+0xcfc>
    36ec:	4802fa26 	beq	r9,zero,42d8 <___vfprintf_internal_r+0x10cc>
    36f0:	10803fcc 	andi	r2,r2,255
    36f4:	00c00044 	movi	r3,1
    36f8:	10c22926 	beq	r2,r3,3fa0 <___vfprintf_internal_r+0xd94>
    36fc:	00c00084 	movi	r3,2
    3700:	10c31726 	beq	r2,r3,4360 <___vfprintf_internal_r+0x1154>
    3704:	d8c01e04 	addi	r3,sp,120
    3708:	9808d0fa 	srli	r4,r19,3
    370c:	e00a977a 	slli	r5,fp,29
    3710:	e038d0fa 	srli	fp,fp,3
    3714:	9cc001cc 	andi	r19,r19,7
    3718:	98800c04 	addi	r2,r19,48
    371c:	18ffffc4 	addi	r3,r3,-1
    3720:	2926b03a 	or	r19,r5,r4
    3724:	18800005 	stb	r2,0(r3)
    3728:	9f08b03a 	or	r4,r19,fp
    372c:	203ff61e 	bne	r4,zero,3708 <__alt_mem_Flash_flash_data+0xf4003708>
    3730:	8900004c 	andi	r4,r17,1
    3734:	d8c03115 	stw	r3,196(sp)
    3738:	2003931e 	bne	r4,zero,4588 <___vfprintf_internal_r+0x137c>
    373c:	dac02817 	ldw	r11,160(sp)
    3740:	58e5c83a 	sub	r18,r11,r3
    3744:	9005883a 	mov	r2,r18
    3748:	9240010e 	bge	r18,r9,3750 <___vfprintf_internal_r+0x544>
    374c:	4805883a 	mov	r2,r9
    3750:	d8802b15 	stw	r2,172(sp)
    3754:	d8003415 	stw	zero,208(sp)
    3758:	a8803fcc 	andi	r2,r21,255
    375c:	1080201c 	xori	r2,r2,128
    3760:	10bfe004 	addi	r2,r2,-128
    3764:	10000326 	beq	r2,zero,3774 <___vfprintf_internal_r+0x568>
    3768:	db002b17 	ldw	r12,172(sp)
    376c:	63000044 	addi	r12,r12,1
    3770:	db002b15 	stw	r12,172(sp)
    3774:	88c0008c 	andi	r3,r17,2
    3778:	d8c02c15 	stw	r3,176(sp)
    377c:	18000326 	beq	r3,zero,378c <___vfprintf_internal_r+0x580>
    3780:	dac02b17 	ldw	r11,172(sp)
    3784:	5ac00084 	addi	r11,r11,2
    3788:	dac02b15 	stw	r11,172(sp)
    378c:	8b00210c 	andi	r12,r17,132
    3790:	db003015 	stw	r12,192(sp)
    3794:	6001da1e 	bne	r12,zero,3f00 <___vfprintf_internal_r+0xcf4>
    3798:	dac02e17 	ldw	r11,184(sp)
    379c:	db002b17 	ldw	r12,172(sp)
    37a0:	5b39c83a 	sub	fp,r11,r12
    37a4:	0701d60e 	bge	zero,fp,3f00 <___vfprintf_internal_r+0xcf4>
    37a8:	02400404 	movi	r9,16
    37ac:	d8c02017 	ldw	r3,128(sp)
    37b0:	d8801f17 	ldw	r2,124(sp)
    37b4:	4f053c0e 	bge	r9,fp,4ca8 <___vfprintf_internal_r+0x1a9c>
    37b8:	014000b4 	movhi	r5,2
    37bc:	29722984 	addi	r5,r5,-14170
    37c0:	d9403615 	stw	r5,216(sp)
    37c4:	482b883a 	mov	r21,r9
    37c8:	04c001c4 	movi	r19,7
    37cc:	00000306 	br	37dc <___vfprintf_internal_r+0x5d0>
    37d0:	e73ffc04 	addi	fp,fp,-16
    37d4:	42000204 	addi	r8,r8,8
    37d8:	af00130e 	bge	r21,fp,3828 <___vfprintf_internal_r+0x61c>
    37dc:	02c000b4 	movhi	r11,2
    37e0:	18c00404 	addi	r3,r3,16
    37e4:	10800044 	addi	r2,r2,1
    37e8:	5af22984 	addi	r11,r11,-14170
    37ec:	42c00015 	stw	r11,0(r8)
    37f0:	45400115 	stw	r21,4(r8)
    37f4:	d8c02015 	stw	r3,128(sp)
    37f8:	d8801f15 	stw	r2,124(sp)
    37fc:	98bff40e 	bge	r19,r2,37d0 <__alt_mem_Flash_flash_data+0xf40037d0>
    3800:	b009883a 	mov	r4,r22
    3804:	b80b883a 	mov	r5,r23
    3808:	d9801e04 	addi	r6,sp,120
    380c:	000a4d40 	call	a4d4 <__sprint_r>
    3810:	103f721e 	bne	r2,zero,35dc <__alt_mem_Flash_flash_data+0xf40035dc>
    3814:	e73ffc04 	addi	fp,fp,-16
    3818:	d8c02017 	ldw	r3,128(sp)
    381c:	d8801f17 	ldw	r2,124(sp)
    3820:	da000404 	addi	r8,sp,16
    3824:	af3fed16 	blt	r21,fp,37dc <__alt_mem_Flash_flash_data+0xf40037dc>
    3828:	db003617 	ldw	r12,216(sp)
    382c:	e0c7883a 	add	r3,fp,r3
    3830:	10800044 	addi	r2,r2,1
    3834:	43000015 	stw	r12,0(r8)
    3838:	47000115 	stw	fp,4(r8)
    383c:	d8c02015 	stw	r3,128(sp)
    3840:	d8801f15 	stw	r2,124(sp)
    3844:	010001c4 	movi	r4,7
    3848:	20830e16 	blt	r4,r2,4484 <___vfprintf_internal_r+0x1278>
    384c:	d8802787 	ldb	r2,158(sp)
    3850:	42000204 	addi	r8,r8,8
    3854:	10000c26 	beq	r2,zero,3888 <___vfprintf_internal_r+0x67c>
    3858:	d8801f17 	ldw	r2,124(sp)
    385c:	d9002784 	addi	r4,sp,158
    3860:	18c00044 	addi	r3,r3,1
    3864:	10800044 	addi	r2,r2,1
    3868:	41000015 	stw	r4,0(r8)
    386c:	01000044 	movi	r4,1
    3870:	41000115 	stw	r4,4(r8)
    3874:	d8c02015 	stw	r3,128(sp)
    3878:	d8801f15 	stw	r2,124(sp)
    387c:	010001c4 	movi	r4,7
    3880:	2082a716 	blt	r4,r2,4320 <___vfprintf_internal_r+0x1114>
    3884:	42000204 	addi	r8,r8,8
    3888:	dac02c17 	ldw	r11,176(sp)
    388c:	58000c26 	beq	r11,zero,38c0 <___vfprintf_internal_r+0x6b4>
    3890:	d8801f17 	ldw	r2,124(sp)
    3894:	d9002704 	addi	r4,sp,156
    3898:	18c00084 	addi	r3,r3,2
    389c:	10800044 	addi	r2,r2,1
    38a0:	41000015 	stw	r4,0(r8)
    38a4:	01000084 	movi	r4,2
    38a8:	41000115 	stw	r4,4(r8)
    38ac:	d8c02015 	stw	r3,128(sp)
    38b0:	d8801f15 	stw	r2,124(sp)
    38b4:	010001c4 	movi	r4,7
    38b8:	2082a116 	blt	r4,r2,4340 <___vfprintf_internal_r+0x1134>
    38bc:	42000204 	addi	r8,r8,8
    38c0:	db003017 	ldw	r12,192(sp)
    38c4:	00802004 	movi	r2,128
    38c8:	60820326 	beq	r12,r2,40d8 <___vfprintf_internal_r+0xecc>
    38cc:	db003217 	ldw	r12,200(sp)
    38d0:	64abc83a 	sub	r21,r12,r18
    38d4:	0540260e 	bge	zero,r21,3970 <___vfprintf_internal_r+0x764>
    38d8:	07000404 	movi	fp,16
    38dc:	d8801f17 	ldw	r2,124(sp)
    38e0:	e544570e 	bge	fp,r21,4a40 <___vfprintf_internal_r+0x1834>
    38e4:	014000b4 	movhi	r5,2
    38e8:	29722584 	addi	r5,r5,-14186
    38ec:	d9402c15 	stw	r5,176(sp)
    38f0:	04c001c4 	movi	r19,7
    38f4:	00000306 	br	3904 <___vfprintf_internal_r+0x6f8>
    38f8:	ad7ffc04 	addi	r21,r21,-16
    38fc:	42000204 	addi	r8,r8,8
    3900:	e540110e 	bge	fp,r21,3948 <___vfprintf_internal_r+0x73c>
    3904:	18c00404 	addi	r3,r3,16
    3908:	10800044 	addi	r2,r2,1
    390c:	45000015 	stw	r20,0(r8)
    3910:	47000115 	stw	fp,4(r8)
    3914:	d8c02015 	stw	r3,128(sp)
    3918:	d8801f15 	stw	r2,124(sp)
    391c:	98bff60e 	bge	r19,r2,38f8 <__alt_mem_Flash_flash_data+0xf40038f8>
    3920:	b009883a 	mov	r4,r22
    3924:	b80b883a 	mov	r5,r23
    3928:	d9801e04 	addi	r6,sp,120
    392c:	000a4d40 	call	a4d4 <__sprint_r>
    3930:	103f2a1e 	bne	r2,zero,35dc <__alt_mem_Flash_flash_data+0xf40035dc>
    3934:	ad7ffc04 	addi	r21,r21,-16
    3938:	d8c02017 	ldw	r3,128(sp)
    393c:	d8801f17 	ldw	r2,124(sp)
    3940:	da000404 	addi	r8,sp,16
    3944:	e57fef16 	blt	fp,r21,3904 <__alt_mem_Flash_flash_data+0xf4003904>
    3948:	dac02c17 	ldw	r11,176(sp)
    394c:	1d47883a 	add	r3,r3,r21
    3950:	10800044 	addi	r2,r2,1
    3954:	42c00015 	stw	r11,0(r8)
    3958:	45400115 	stw	r21,4(r8)
    395c:	d8c02015 	stw	r3,128(sp)
    3960:	d8801f15 	stw	r2,124(sp)
    3964:	010001c4 	movi	r4,7
    3968:	20826516 	blt	r4,r2,4300 <___vfprintf_internal_r+0x10f4>
    396c:	42000204 	addi	r8,r8,8
    3970:	8880400c 	andi	r2,r17,256
    3974:	1001901e 	bne	r2,zero,3fb8 <___vfprintf_internal_r+0xdac>
    3978:	d8801f17 	ldw	r2,124(sp)
    397c:	db003117 	ldw	r12,196(sp)
    3980:	1c87883a 	add	r3,r3,r18
    3984:	10800044 	addi	r2,r2,1
    3988:	43000015 	stw	r12,0(r8)
    398c:	44800115 	stw	r18,4(r8)
    3990:	d8c02015 	stw	r3,128(sp)
    3994:	d8801f15 	stw	r2,124(sp)
    3998:	010001c4 	movi	r4,7
    399c:	20824016 	blt	r4,r2,42a0 <___vfprintf_internal_r+0x1094>
    39a0:	42000204 	addi	r8,r8,8
    39a4:	8c40010c 	andi	r17,r17,4
    39a8:	88003126 	beq	r17,zero,3a70 <___vfprintf_internal_r+0x864>
    39ac:	db002e17 	ldw	r12,184(sp)
    39b0:	dac02b17 	ldw	r11,172(sp)
    39b4:	62e1c83a 	sub	r16,r12,r11
    39b8:	04002d0e 	bge	zero,r16,3a70 <___vfprintf_internal_r+0x864>
    39bc:	04400404 	movi	r17,16
    39c0:	d8801f17 	ldw	r2,124(sp)
    39c4:	8c05150e 	bge	r17,r16,4e1c <___vfprintf_internal_r+0x1c10>
    39c8:	010000b4 	movhi	r4,2
    39cc:	21322984 	addi	r4,r4,-14170
    39d0:	d9003615 	stw	r4,216(sp)
    39d4:	048001c4 	movi	r18,7
    39d8:	00000306 	br	39e8 <___vfprintf_internal_r+0x7dc>
    39dc:	843ffc04 	addi	r16,r16,-16
    39e0:	42000204 	addi	r8,r8,8
    39e4:	8c00130e 	bge	r17,r16,3a34 <___vfprintf_internal_r+0x828>
    39e8:	014000b4 	movhi	r5,2
    39ec:	18c00404 	addi	r3,r3,16
    39f0:	10800044 	addi	r2,r2,1
    39f4:	29722984 	addi	r5,r5,-14170
    39f8:	41400015 	stw	r5,0(r8)
    39fc:	44400115 	stw	r17,4(r8)
    3a00:	d8c02015 	stw	r3,128(sp)
    3a04:	d8801f15 	stw	r2,124(sp)
    3a08:	90bff40e 	bge	r18,r2,39dc <__alt_mem_Flash_flash_data+0xf40039dc>
    3a0c:	b009883a 	mov	r4,r22
    3a10:	b80b883a 	mov	r5,r23
    3a14:	d9801e04 	addi	r6,sp,120
    3a18:	000a4d40 	call	a4d4 <__sprint_r>
    3a1c:	103eef1e 	bne	r2,zero,35dc <__alt_mem_Flash_flash_data+0xf40035dc>
    3a20:	843ffc04 	addi	r16,r16,-16
    3a24:	d8c02017 	ldw	r3,128(sp)
    3a28:	d8801f17 	ldw	r2,124(sp)
    3a2c:	da000404 	addi	r8,sp,16
    3a30:	8c3fed16 	blt	r17,r16,39e8 <__alt_mem_Flash_flash_data+0xf40039e8>
    3a34:	dac03617 	ldw	r11,216(sp)
    3a38:	1c07883a 	add	r3,r3,r16
    3a3c:	10800044 	addi	r2,r2,1
    3a40:	42c00015 	stw	r11,0(r8)
    3a44:	44000115 	stw	r16,4(r8)
    3a48:	d8c02015 	stw	r3,128(sp)
    3a4c:	d8801f15 	stw	r2,124(sp)
    3a50:	010001c4 	movi	r4,7
    3a54:	2080060e 	bge	r4,r2,3a70 <___vfprintf_internal_r+0x864>
    3a58:	b009883a 	mov	r4,r22
    3a5c:	b80b883a 	mov	r5,r23
    3a60:	d9801e04 	addi	r6,sp,120
    3a64:	000a4d40 	call	a4d4 <__sprint_r>
    3a68:	103edc1e 	bne	r2,zero,35dc <__alt_mem_Flash_flash_data+0xf40035dc>
    3a6c:	d8c02017 	ldw	r3,128(sp)
    3a70:	d8802b17 	ldw	r2,172(sp)
    3a74:	db002e17 	ldw	r12,184(sp)
    3a78:	1300010e 	bge	r2,r12,3a80 <___vfprintf_internal_r+0x874>
    3a7c:	6005883a 	mov	r2,r12
    3a80:	dac02f17 	ldw	r11,188(sp)
    3a84:	5897883a 	add	r11,r11,r2
    3a88:	dac02f15 	stw	r11,188(sp)
    3a8c:	18020c1e 	bne	r3,zero,42c0 <___vfprintf_internal_r+0x10b4>
    3a90:	d8001f15 	stw	zero,124(sp)
    3a94:	da000404 	addi	r8,sp,16
    3a98:	003e1706 	br	32f8 <__alt_mem_Flash_flash_data+0xf40032f8>
    3a9c:	8c400414 	ori	r17,r17,16
    3aa0:	d8c02a15 	stw	r3,168(sp)
    3aa4:	8880080c 	andi	r2,r17,32
    3aa8:	10010126 	beq	r2,zero,3eb0 <___vfprintf_internal_r+0xca4>
    3aac:	db002d17 	ldw	r12,180(sp)
    3ab0:	0005883a 	mov	r2,zero
    3ab4:	64c00017 	ldw	r19,0(r12)
    3ab8:	67000117 	ldw	fp,4(r12)
    3abc:	63000204 	addi	r12,r12,8
    3ac0:	db002d15 	stw	r12,180(sp)
    3ac4:	9f06b03a 	or	r3,r19,fp
    3ac8:	d8002785 	stb	zero,158(sp)
    3acc:	da403215 	stw	r9,200(sp)
    3ad0:	002b883a 	mov	r21,zero
    3ad4:	003f0106 	br	36dc <__alt_mem_Flash_flash_data+0xf40036dc>
    3ad8:	8c400414 	ori	r17,r17,16
    3adc:	d8c02a15 	stw	r3,168(sp)
    3ae0:	8880080c 	andi	r2,r17,32
    3ae4:	1000e326 	beq	r2,zero,3e74 <___vfprintf_internal_r+0xc68>
    3ae8:	dac02d17 	ldw	r11,180(sp)
    3aec:	00800044 	movi	r2,1
    3af0:	5cc00017 	ldw	r19,0(r11)
    3af4:	5f000117 	ldw	fp,4(r11)
    3af8:	5ac00204 	addi	r11,r11,8
    3afc:	dac02d15 	stw	r11,180(sp)
    3b00:	9f06b03a 	or	r3,r19,fp
    3b04:	003ff006 	br	3ac8 <__alt_mem_Flash_flash_data+0xf4003ac8>
    3b08:	db002d17 	ldw	r12,180(sp)
    3b0c:	dac02d17 	ldw	r11,180(sp)
    3b10:	d8c02a15 	stw	r3,168(sp)
    3b14:	63000017 	ldw	r12,0(r12)
    3b18:	5ac00117 	ldw	r11,4(r11)
    3b1c:	d9802785 	stb	r6,158(sp)
    3b20:	6009883a 	mov	r4,r12
    3b24:	580b883a 	mov	r5,r11
    3b28:	db003715 	stw	r12,220(sp)
    3b2c:	da003f15 	stw	r8,252(sp)
    3b30:	da403e15 	stw	r9,248(sp)
    3b34:	dac03915 	stw	r11,228(sp)
    3b38:	000a1300 	call	a130 <__fpclassifyd>
    3b3c:	db002d17 	ldw	r12,180(sp)
    3b40:	04800044 	movi	r18,1
    3b44:	da003f17 	ldw	r8,252(sp)
    3b48:	64c00204 	addi	r19,r12,8
    3b4c:	da403e17 	ldw	r9,248(sp)
    3b50:	d9003717 	ldw	r4,220(sp)
    3b54:	d9403917 	ldw	r5,228(sp)
    3b58:	14832b1e 	bne	r2,r18,4808 <___vfprintf_internal_r+0x15fc>
    3b5c:	000d883a 	mov	r6,zero
    3b60:	000f883a 	mov	r7,zero
    3b64:	000e0dc0 	call	e0dc <__ledf2>
    3b68:	da003f17 	ldw	r8,252(sp)
    3b6c:	1004b716 	blt	r2,zero,4e4c <___vfprintf_internal_r+0x1c40>
    3b70:	dd402783 	ldbu	r21,158(sp)
    3b74:	008011c4 	movi	r2,71
    3b78:	14040e0e 	bge	r2,r16,4bb4 <___vfprintf_internal_r+0x19a8>
    3b7c:	00c000b4 	movhi	r3,2
    3b80:	18f21604 	addi	r3,r3,-14248
    3b84:	d8c03115 	stw	r3,196(sp)
    3b88:	02c000c4 	movi	r11,3
    3b8c:	00bfdfc4 	movi	r2,-129
    3b90:	dac02b15 	stw	r11,172(sp)
    3b94:	88a2703a 	and	r17,r17,r2
    3b98:	dcc02d15 	stw	r19,180(sp)
    3b9c:	5825883a 	mov	r18,r11
    3ba0:	d8003215 	stw	zero,200(sp)
    3ba4:	d8003415 	stw	zero,208(sp)
    3ba8:	003eeb06 	br	3758 <__alt_mem_Flash_flash_data+0xf4003758>
    3bac:	db002d17 	ldw	r12,180(sp)
    3bb0:	00800c04 	movi	r2,48
    3bb4:	d8802705 	stb	r2,156(sp)
    3bb8:	64c00017 	ldw	r19,0(r12)
    3bbc:	00801e04 	movi	r2,120
    3bc0:	d8802745 	stb	r2,157(sp)
    3bc4:	008000b4 	movhi	r2,2
    3bc8:	10b21e04 	addi	r2,r2,-14216
    3bcc:	63000104 	addi	r12,r12,4
    3bd0:	d8c02a15 	stw	r3,168(sp)
    3bd4:	d8803b15 	stw	r2,236(sp)
    3bd8:	0039883a 	mov	fp,zero
    3bdc:	8c400094 	ori	r17,r17,2
    3be0:	db002d15 	stw	r12,180(sp)
    3be4:	00800084 	movi	r2,2
    3be8:	04001e04 	movi	r16,120
    3bec:	9807883a 	mov	r3,r19
    3bf0:	003fb506 	br	3ac8 <__alt_mem_Flash_flash_data+0xf4003ac8>
    3bf4:	8c400214 	ori	r17,r17,8
    3bf8:	1805883a 	mov	r2,r3
    3bfc:	1c000007 	ldb	r16,0(r3)
    3c00:	003de706 	br	33a0 <__alt_mem_Flash_flash_data+0xf40033a0>
    3c04:	d8c02a15 	stw	r3,168(sp)
    3c08:	d9802785 	stb	r6,158(sp)
    3c0c:	8880080c 	andi	r2,r17,32
    3c10:	d8c02d17 	ldw	r3,180(sp)
    3c14:	103ea61e 	bne	r2,zero,36b0 <__alt_mem_Flash_flash_data+0xf40036b0>
    3c18:	8880040c 	andi	r2,r17,16
    3c1c:	1002221e 	bne	r2,zero,44a8 <___vfprintf_internal_r+0x129c>
    3c20:	8880100c 	andi	r2,r17,64
    3c24:	10022026 	beq	r2,zero,44a8 <___vfprintf_internal_r+0x129c>
    3c28:	1cc0000f 	ldh	r19,0(r3)
    3c2c:	db002d17 	ldw	r12,180(sp)
    3c30:	9839d7fa 	srai	fp,r19,31
    3c34:	63000104 	addi	r12,r12,4
    3c38:	db002d15 	stw	r12,180(sp)
    3c3c:	e005883a 	mov	r2,fp
    3c40:	003ea106 	br	36c8 <__alt_mem_Flash_flash_data+0xf40036c8>
    3c44:	8c401014 	ori	r17,r17,64
    3c48:	1805883a 	mov	r2,r3
    3c4c:	1c000007 	ldb	r16,0(r3)
    3c50:	003dd306 	br	33a0 <__alt_mem_Flash_flash_data+0xf40033a0>
    3c54:	1c000007 	ldb	r16,0(r3)
    3c58:	81c3e926 	beq	r16,r7,4c00 <___vfprintf_internal_r+0x19f4>
    3c5c:	8c400414 	ori	r17,r17,16
    3c60:	1805883a 	mov	r2,r3
    3c64:	003dce06 	br	33a0 <__alt_mem_Flash_flash_data+0xf40033a0>
    3c68:	d8c02a15 	stw	r3,168(sp)
    3c6c:	d9802785 	stb	r6,158(sp)
    3c70:	8880080c 	andi	r2,r17,32
    3c74:	10034726 	beq	r2,zero,4994 <___vfprintf_internal_r+0x1788>
    3c78:	db002d17 	ldw	r12,180(sp)
    3c7c:	dac02f17 	ldw	r11,188(sp)
    3c80:	60800017 	ldw	r2,0(r12)
    3c84:	5807d7fa 	srai	r3,r11,31
    3c88:	63000104 	addi	r12,r12,4
    3c8c:	db002d15 	stw	r12,180(sp)
    3c90:	12c00015 	stw	r11,0(r2)
    3c94:	10c00115 	stw	r3,4(r2)
    3c98:	003d9706 	br	32f8 <__alt_mem_Flash_flash_data+0xf40032f8>
    3c9c:	030000b4 	movhi	r12,2
    3ca0:	63321904 	addi	r12,r12,-14236
    3ca4:	d8c02a15 	stw	r3,168(sp)
    3ca8:	d9802785 	stb	r6,158(sp)
    3cac:	db003b15 	stw	r12,236(sp)
    3cb0:	88c0080c 	andi	r3,r17,32
    3cb4:	d8802d17 	ldw	r2,180(sp)
    3cb8:	18005b26 	beq	r3,zero,3e28 <___vfprintf_internal_r+0xc1c>
    3cbc:	dac02d17 	ldw	r11,180(sp)
    3cc0:	14c00017 	ldw	r19,0(r2)
    3cc4:	17000117 	ldw	fp,4(r2)
    3cc8:	5ac00204 	addi	r11,r11,8
    3ccc:	dac02d15 	stw	r11,180(sp)
    3cd0:	8880004c 	andi	r2,r17,1
    3cd4:	10022926 	beq	r2,zero,457c <___vfprintf_internal_r+0x1370>
    3cd8:	9f06b03a 	or	r3,r19,fp
    3cdc:	18032b26 	beq	r3,zero,498c <___vfprintf_internal_r+0x1780>
    3ce0:	00800c04 	movi	r2,48
    3ce4:	d8802705 	stb	r2,156(sp)
    3ce8:	dc002745 	stb	r16,157(sp)
    3cec:	8c400094 	ori	r17,r17,2
    3cf0:	00800084 	movi	r2,2
    3cf4:	003f7406 	br	3ac8 <__alt_mem_Flash_flash_data+0xf4003ac8>
    3cf8:	30803fcc 	andi	r2,r6,255
    3cfc:	1080201c 	xori	r2,r2,128
    3d00:	10bfe004 	addi	r2,r2,-128
    3d04:	1003351e 	bne	r2,zero,49dc <___vfprintf_internal_r+0x17d0>
    3d08:	1805883a 	mov	r2,r3
    3d0c:	01800804 	movi	r6,32
    3d10:	1c000007 	ldb	r16,0(r3)
    3d14:	003da206 	br	33a0 <__alt_mem_Flash_flash_data+0xf40033a0>
    3d18:	dac02d17 	ldw	r11,180(sp)
    3d1c:	db002d17 	ldw	r12,180(sp)
    3d20:	5ac00017 	ldw	r11,0(r11)
    3d24:	dac02e15 	stw	r11,184(sp)
    3d28:	62c00104 	addi	r11,r12,4
    3d2c:	db002e17 	ldw	r12,184(sp)
    3d30:	6003ad16 	blt	r12,zero,4be8 <___vfprintf_internal_r+0x19dc>
    3d34:	dac02d15 	stw	r11,180(sp)
    3d38:	1805883a 	mov	r2,r3
    3d3c:	1c000007 	ldb	r16,0(r3)
    3d40:	003d9706 	br	33a0 <__alt_mem_Flash_flash_data+0xf40033a0>
    3d44:	1805883a 	mov	r2,r3
    3d48:	01800ac4 	movi	r6,43
    3d4c:	1c000007 	ldb	r16,0(r3)
    3d50:	003d9306 	br	33a0 <__alt_mem_Flash_flash_data+0xf40033a0>
    3d54:	db002d17 	ldw	r12,180(sp)
    3d58:	d8c02a15 	stw	r3,168(sp)
    3d5c:	00c00044 	movi	r3,1
    3d60:	60800017 	ldw	r2,0(r12)
    3d64:	63000104 	addi	r12,r12,4
    3d68:	d8c02b15 	stw	r3,172(sp)
    3d6c:	d8002785 	stb	zero,158(sp)
    3d70:	d8801405 	stb	r2,80(sp)
    3d74:	db002d15 	stw	r12,180(sp)
    3d78:	dac01404 	addi	r11,sp,80
    3d7c:	1825883a 	mov	r18,r3
    3d80:	d8003215 	stw	zero,200(sp)
    3d84:	d8003415 	stw	zero,208(sp)
    3d88:	dac03115 	stw	r11,196(sp)
    3d8c:	0005883a 	mov	r2,zero
    3d90:	003e7806 	br	3774 <__alt_mem_Flash_flash_data+0xf4003774>
    3d94:	dac02d17 	ldw	r11,180(sp)
    3d98:	db002d17 	ldw	r12,180(sp)
    3d9c:	d8c02a15 	stw	r3,168(sp)
    3da0:	5ac00017 	ldw	r11,0(r11)
    3da4:	d8002785 	stb	zero,158(sp)
    3da8:	64c00104 	addi	r19,r12,4
    3dac:	dac03115 	stw	r11,196(sp)
    3db0:	5803fe26 	beq	r11,zero,4dac <___vfprintf_internal_r+0x1ba0>
    3db4:	d9003117 	ldw	r4,196(sp)
    3db8:	4803b416 	blt	r9,zero,4c8c <___vfprintf_internal_r+0x1a80>
    3dbc:	480d883a 	mov	r6,r9
    3dc0:	000b883a 	mov	r5,zero
    3dc4:	da003f15 	stw	r8,252(sp)
    3dc8:	da403e15 	stw	r9,248(sp)
    3dcc:	00087880 	call	8788 <memchr>
    3dd0:	da003f17 	ldw	r8,252(sp)
    3dd4:	da403e17 	ldw	r9,248(sp)
    3dd8:	10043026 	beq	r2,zero,4e9c <___vfprintf_internal_r+0x1c90>
    3ddc:	d8c03117 	ldw	r3,196(sp)
    3de0:	10e5c83a 	sub	r18,r2,r3
    3de4:	4c836b16 	blt	r9,r18,4b94 <___vfprintf_internal_r+0x1988>
    3de8:	9005883a 	mov	r2,r18
    3dec:	9003ac16 	blt	r18,zero,4ca0 <___vfprintf_internal_r+0x1a94>
    3df0:	dd402783 	ldbu	r21,158(sp)
    3df4:	d8802b15 	stw	r2,172(sp)
    3df8:	dcc02d15 	stw	r19,180(sp)
    3dfc:	d8003215 	stw	zero,200(sp)
    3e00:	d8003415 	stw	zero,208(sp)
    3e04:	003e5406 	br	3758 <__alt_mem_Flash_flash_data+0xf4003758>
    3e08:	008000b4 	movhi	r2,2
    3e0c:	10b21e04 	addi	r2,r2,-14216
    3e10:	d8c02a15 	stw	r3,168(sp)
    3e14:	d8803b15 	stw	r2,236(sp)
    3e18:	d9802785 	stb	r6,158(sp)
    3e1c:	88c0080c 	andi	r3,r17,32
    3e20:	d8802d17 	ldw	r2,180(sp)
    3e24:	183fa51e 	bne	r3,zero,3cbc <__alt_mem_Flash_flash_data+0xf4003cbc>
    3e28:	88c0040c 	andi	r3,r17,16
    3e2c:	1802ee26 	beq	r3,zero,49e8 <___vfprintf_internal_r+0x17dc>
    3e30:	db002d17 	ldw	r12,180(sp)
    3e34:	14c00017 	ldw	r19,0(r2)
    3e38:	0039883a 	mov	fp,zero
    3e3c:	63000104 	addi	r12,r12,4
    3e40:	db002d15 	stw	r12,180(sp)
    3e44:	003fa206 	br	3cd0 <__alt_mem_Flash_flash_data+0xf4003cd0>
    3e48:	8c400054 	ori	r17,r17,1
    3e4c:	1805883a 	mov	r2,r3
    3e50:	1c000007 	ldb	r16,0(r3)
    3e54:	003d5206 	br	33a0 <__alt_mem_Flash_flash_data+0xf40033a0>
    3e58:	8c400814 	ori	r17,r17,32
    3e5c:	1805883a 	mov	r2,r3
    3e60:	1c000007 	ldb	r16,0(r3)
    3e64:	003d4e06 	br	33a0 <__alt_mem_Flash_flash_data+0xf40033a0>
    3e68:	d8c02a15 	stw	r3,168(sp)
    3e6c:	8880080c 	andi	r2,r17,32
    3e70:	103f1d1e 	bne	r2,zero,3ae8 <__alt_mem_Flash_flash_data+0xf4003ae8>
    3e74:	8880040c 	andi	r2,r17,16
    3e78:	1001b81e 	bne	r2,zero,455c <___vfprintf_internal_r+0x1350>
    3e7c:	8880100c 	andi	r2,r17,64
    3e80:	1001b626 	beq	r2,zero,455c <___vfprintf_internal_r+0x1350>
    3e84:	dac02d17 	ldw	r11,180(sp)
    3e88:	0039883a 	mov	fp,zero
    3e8c:	00800044 	movi	r2,1
    3e90:	5cc0000b 	ldhu	r19,0(r11)
    3e94:	5ac00104 	addi	r11,r11,4
    3e98:	dac02d15 	stw	r11,180(sp)
    3e9c:	9807883a 	mov	r3,r19
    3ea0:	003f0906 	br	3ac8 <__alt_mem_Flash_flash_data+0xf4003ac8>
    3ea4:	d8c02a15 	stw	r3,168(sp)
    3ea8:	8880080c 	andi	r2,r17,32
    3eac:	103eff1e 	bne	r2,zero,3aac <__alt_mem_Flash_flash_data+0xf4003aac>
    3eb0:	8880040c 	andi	r2,r17,16
    3eb4:	1001a11e 	bne	r2,zero,453c <___vfprintf_internal_r+0x1330>
    3eb8:	8880100c 	andi	r2,r17,64
    3ebc:	10019f26 	beq	r2,zero,453c <___vfprintf_internal_r+0x1330>
    3ec0:	db002d17 	ldw	r12,180(sp)
    3ec4:	0039883a 	mov	fp,zero
    3ec8:	0005883a 	mov	r2,zero
    3ecc:	64c0000b 	ldhu	r19,0(r12)
    3ed0:	63000104 	addi	r12,r12,4
    3ed4:	db002d15 	stw	r12,180(sp)
    3ed8:	9807883a 	mov	r3,r19
    3edc:	003efa06 	br	3ac8 <__alt_mem_Flash_flash_data+0xf4003ac8>
    3ee0:	d8c02a15 	stw	r3,168(sp)
    3ee4:	d9802785 	stb	r6,158(sp)
    3ee8:	803db626 	beq	r16,zero,35c4 <__alt_mem_Flash_flash_data+0xf40035c4>
    3eec:	00c00044 	movi	r3,1
    3ef0:	d8c02b15 	stw	r3,172(sp)
    3ef4:	dc001405 	stb	r16,80(sp)
    3ef8:	d8002785 	stb	zero,158(sp)
    3efc:	003f9e06 	br	3d78 <__alt_mem_Flash_flash_data+0xf4003d78>
    3f00:	d8c02017 	ldw	r3,128(sp)
    3f04:	003e5306 	br	3854 <__alt_mem_Flash_flash_data+0xf4003854>
    3f08:	10803fcc 	andi	r2,r2,255
    3f0c:	00c00044 	movi	r3,1
    3f10:	10fdfa1e 	bne	r2,r3,36fc <__alt_mem_Flash_flash_data+0xf40036fc>
    3f14:	e000021e 	bne	fp,zero,3f20 <___vfprintf_internal_r+0xd14>
    3f18:	00800244 	movi	r2,9
    3f1c:	14c0202e 	bgeu	r2,r19,3fa0 <___vfprintf_internal_r+0xd94>
    3f20:	dc002b15 	stw	r16,172(sp)
    3f24:	dc402c15 	stw	r17,176(sp)
    3f28:	9821883a 	mov	r16,r19
    3f2c:	e023883a 	mov	r17,fp
    3f30:	dc801e04 	addi	r18,sp,120
    3f34:	4827883a 	mov	r19,r9
    3f38:	4039883a 	mov	fp,r8
    3f3c:	8009883a 	mov	r4,r16
    3f40:	880b883a 	mov	r5,r17
    3f44:	01800284 	movi	r6,10
    3f48:	000f883a 	mov	r7,zero
    3f4c:	000c7540 	call	c754 <__umoddi3>
    3f50:	10800c04 	addi	r2,r2,48
    3f54:	94bfffc4 	addi	r18,r18,-1
    3f58:	8009883a 	mov	r4,r16
    3f5c:	880b883a 	mov	r5,r17
    3f60:	01800284 	movi	r6,10
    3f64:	000f883a 	mov	r7,zero
    3f68:	90800005 	stb	r2,0(r18)
    3f6c:	000c1940 	call	c194 <__udivdi3>
    3f70:	1021883a 	mov	r16,r2
    3f74:	10c4b03a 	or	r2,r2,r3
    3f78:	1823883a 	mov	r17,r3
    3f7c:	103fef1e 	bne	r2,zero,3f3c <__alt_mem_Flash_flash_data+0xf4003f3c>
    3f80:	dac02817 	ldw	r11,160(sp)
    3f84:	dc803115 	stw	r18,196(sp)
    3f88:	dc002b17 	ldw	r16,172(sp)
    3f8c:	dc402c17 	ldw	r17,176(sp)
    3f90:	9813883a 	mov	r9,r19
    3f94:	e011883a 	mov	r8,fp
    3f98:	5ca5c83a 	sub	r18,r11,r18
    3f9c:	003de906 	br	3744 <__alt_mem_Flash_flash_data+0xf4003744>
    3fa0:	9cc00c04 	addi	r19,r19,48
    3fa4:	d8c01dc4 	addi	r3,sp,119
    3fa8:	dcc01dc5 	stb	r19,119(sp)
    3fac:	dc803c17 	ldw	r18,240(sp)
    3fb0:	d8c03115 	stw	r3,196(sp)
    3fb4:	003de306 	br	3744 <__alt_mem_Flash_flash_data+0xf4003744>
    3fb8:	00801944 	movi	r2,101
    3fbc:	1400710e 	bge	r2,r16,4184 <___vfprintf_internal_r+0xf78>
    3fc0:	d9003717 	ldw	r4,220(sp)
    3fc4:	d9403917 	ldw	r5,228(sp)
    3fc8:	000d883a 	mov	r6,zero
    3fcc:	000f883a 	mov	r7,zero
    3fd0:	d8c03d15 	stw	r3,244(sp)
    3fd4:	da003f15 	stw	r8,252(sp)
    3fd8:	000df780 	call	df78 <__eqdf2>
    3fdc:	d8c03d17 	ldw	r3,244(sp)
    3fe0:	da003f17 	ldw	r8,252(sp)
    3fe4:	1000ef1e 	bne	r2,zero,43a4 <___vfprintf_internal_r+0x1198>
    3fe8:	d8801f17 	ldw	r2,124(sp)
    3fec:	010000b4 	movhi	r4,2
    3ff0:	21322504 	addi	r4,r4,-14188
    3ff4:	18c00044 	addi	r3,r3,1
    3ff8:	10800044 	addi	r2,r2,1
    3ffc:	41000015 	stw	r4,0(r8)
    4000:	01000044 	movi	r4,1
    4004:	41000115 	stw	r4,4(r8)
    4008:	d8c02015 	stw	r3,128(sp)
    400c:	d8801f15 	stw	r2,124(sp)
    4010:	010001c4 	movi	r4,7
    4014:	20828e16 	blt	r4,r2,4a50 <___vfprintf_internal_r+0x1844>
    4018:	42000204 	addi	r8,r8,8
    401c:	d8802617 	ldw	r2,152(sp)
    4020:	dac03317 	ldw	r11,204(sp)
    4024:	12c00216 	blt	r2,r11,4030 <___vfprintf_internal_r+0xe24>
    4028:	8880004c 	andi	r2,r17,1
    402c:	103e5d26 	beq	r2,zero,39a4 <__alt_mem_Flash_flash_data+0xf40039a4>
    4030:	db003817 	ldw	r12,224(sp)
    4034:	d8801f17 	ldw	r2,124(sp)
    4038:	dac03517 	ldw	r11,212(sp)
    403c:	1b07883a 	add	r3,r3,r12
    4040:	10800044 	addi	r2,r2,1
    4044:	42c00015 	stw	r11,0(r8)
    4048:	43000115 	stw	r12,4(r8)
    404c:	d8c02015 	stw	r3,128(sp)
    4050:	d8801f15 	stw	r2,124(sp)
    4054:	010001c4 	movi	r4,7
    4058:	2082ed16 	blt	r4,r2,4c10 <___vfprintf_internal_r+0x1a04>
    405c:	42000204 	addi	r8,r8,8
    4060:	db003317 	ldw	r12,204(sp)
    4064:	643fffc4 	addi	r16,r12,-1
    4068:	043e4e0e 	bge	zero,r16,39a4 <__alt_mem_Flash_flash_data+0xf40039a4>
    406c:	04800404 	movi	r18,16
    4070:	d8801f17 	ldw	r2,124(sp)
    4074:	94007e0e 	bge	r18,r16,4270 <___vfprintf_internal_r+0x1064>
    4078:	014000b4 	movhi	r5,2
    407c:	29722584 	addi	r5,r5,-14186
    4080:	d9402c15 	stw	r5,176(sp)
    4084:	054001c4 	movi	r21,7
    4088:	00000306 	br	4098 <___vfprintf_internal_r+0xe8c>
    408c:	42000204 	addi	r8,r8,8
    4090:	843ffc04 	addi	r16,r16,-16
    4094:	9400790e 	bge	r18,r16,427c <___vfprintf_internal_r+0x1070>
    4098:	18c00404 	addi	r3,r3,16
    409c:	10800044 	addi	r2,r2,1
    40a0:	45000015 	stw	r20,0(r8)
    40a4:	44800115 	stw	r18,4(r8)
    40a8:	d8c02015 	stw	r3,128(sp)
    40ac:	d8801f15 	stw	r2,124(sp)
    40b0:	a8bff60e 	bge	r21,r2,408c <__alt_mem_Flash_flash_data+0xf400408c>
    40b4:	b009883a 	mov	r4,r22
    40b8:	b80b883a 	mov	r5,r23
    40bc:	d9801e04 	addi	r6,sp,120
    40c0:	000a4d40 	call	a4d4 <__sprint_r>
    40c4:	103d451e 	bne	r2,zero,35dc <__alt_mem_Flash_flash_data+0xf40035dc>
    40c8:	d8c02017 	ldw	r3,128(sp)
    40cc:	d8801f17 	ldw	r2,124(sp)
    40d0:	da000404 	addi	r8,sp,16
    40d4:	003fee06 	br	4090 <__alt_mem_Flash_flash_data+0xf4004090>
    40d8:	dac02e17 	ldw	r11,184(sp)
    40dc:	db002b17 	ldw	r12,172(sp)
    40e0:	5b2bc83a 	sub	r21,r11,r12
    40e4:	057df90e 	bge	zero,r21,38cc <__alt_mem_Flash_flash_data+0xf40038cc>
    40e8:	07000404 	movi	fp,16
    40ec:	d8801f17 	ldw	r2,124(sp)
    40f0:	e543640e 	bge	fp,r21,4e84 <___vfprintf_internal_r+0x1c78>
    40f4:	014000b4 	movhi	r5,2
    40f8:	29722584 	addi	r5,r5,-14186
    40fc:	d9402c15 	stw	r5,176(sp)
    4100:	04c001c4 	movi	r19,7
    4104:	00000306 	br	4114 <___vfprintf_internal_r+0xf08>
    4108:	ad7ffc04 	addi	r21,r21,-16
    410c:	42000204 	addi	r8,r8,8
    4110:	e540110e 	bge	fp,r21,4158 <___vfprintf_internal_r+0xf4c>
    4114:	18c00404 	addi	r3,r3,16
    4118:	10800044 	addi	r2,r2,1
    411c:	45000015 	stw	r20,0(r8)
    4120:	47000115 	stw	fp,4(r8)
    4124:	d8c02015 	stw	r3,128(sp)
    4128:	d8801f15 	stw	r2,124(sp)
    412c:	98bff60e 	bge	r19,r2,4108 <__alt_mem_Flash_flash_data+0xf4004108>
    4130:	b009883a 	mov	r4,r22
    4134:	b80b883a 	mov	r5,r23
    4138:	d9801e04 	addi	r6,sp,120
    413c:	000a4d40 	call	a4d4 <__sprint_r>
    4140:	103d261e 	bne	r2,zero,35dc <__alt_mem_Flash_flash_data+0xf40035dc>
    4144:	ad7ffc04 	addi	r21,r21,-16
    4148:	d8c02017 	ldw	r3,128(sp)
    414c:	d8801f17 	ldw	r2,124(sp)
    4150:	da000404 	addi	r8,sp,16
    4154:	e57fef16 	blt	fp,r21,4114 <__alt_mem_Flash_flash_data+0xf4004114>
    4158:	dac02c17 	ldw	r11,176(sp)
    415c:	1d47883a 	add	r3,r3,r21
    4160:	10800044 	addi	r2,r2,1
    4164:	42c00015 	stw	r11,0(r8)
    4168:	45400115 	stw	r21,4(r8)
    416c:	d8c02015 	stw	r3,128(sp)
    4170:	d8801f15 	stw	r2,124(sp)
    4174:	010001c4 	movi	r4,7
    4178:	20819116 	blt	r4,r2,47c0 <___vfprintf_internal_r+0x15b4>
    417c:	42000204 	addi	r8,r8,8
    4180:	003dd206 	br	38cc <__alt_mem_Flash_flash_data+0xf40038cc>
    4184:	db003317 	ldw	r12,204(sp)
    4188:	00800044 	movi	r2,1
    418c:	18c00044 	addi	r3,r3,1
    4190:	1301530e 	bge	r2,r12,46e0 <___vfprintf_internal_r+0x14d4>
    4194:	dc001f17 	ldw	r16,124(sp)
    4198:	dac03117 	ldw	r11,196(sp)
    419c:	00800044 	movi	r2,1
    41a0:	84000044 	addi	r16,r16,1
    41a4:	40800115 	stw	r2,4(r8)
    41a8:	42c00015 	stw	r11,0(r8)
    41ac:	d8c02015 	stw	r3,128(sp)
    41b0:	dc001f15 	stw	r16,124(sp)
    41b4:	008001c4 	movi	r2,7
    41b8:	14016b16 	blt	r2,r16,4768 <___vfprintf_internal_r+0x155c>
    41bc:	42000204 	addi	r8,r8,8
    41c0:	db003817 	ldw	r12,224(sp)
    41c4:	dac03517 	ldw	r11,212(sp)
    41c8:	84000044 	addi	r16,r16,1
    41cc:	1b07883a 	add	r3,r3,r12
    41d0:	42c00015 	stw	r11,0(r8)
    41d4:	43000115 	stw	r12,4(r8)
    41d8:	d8c02015 	stw	r3,128(sp)
    41dc:	dc001f15 	stw	r16,124(sp)
    41e0:	008001c4 	movi	r2,7
    41e4:	14016916 	blt	r2,r16,478c <___vfprintf_internal_r+0x1580>
    41e8:	44800204 	addi	r18,r8,8
    41ec:	d9003717 	ldw	r4,220(sp)
    41f0:	d9403917 	ldw	r5,228(sp)
    41f4:	000d883a 	mov	r6,zero
    41f8:	000f883a 	mov	r7,zero
    41fc:	d8c03d15 	stw	r3,244(sp)
    4200:	000df780 	call	df78 <__eqdf2>
    4204:	d8c03d17 	ldw	r3,244(sp)
    4208:	db003317 	ldw	r12,204(sp)
    420c:	1000ad26 	beq	r2,zero,44c4 <___vfprintf_internal_r+0x12b8>
    4210:	dac03117 	ldw	r11,196(sp)
    4214:	60bfffc4 	addi	r2,r12,-1
    4218:	1887883a 	add	r3,r3,r2
    421c:	59000044 	addi	r4,r11,1
    4220:	84000044 	addi	r16,r16,1
    4224:	90800115 	stw	r2,4(r18)
    4228:	91000015 	stw	r4,0(r18)
    422c:	d8c02015 	stw	r3,128(sp)
    4230:	dc001f15 	stw	r16,124(sp)
    4234:	008001c4 	movi	r2,7
    4238:	14014216 	blt	r2,r16,4744 <___vfprintf_internal_r+0x1538>
    423c:	94800204 	addi	r18,r18,8
    4240:	dac03a17 	ldw	r11,232(sp)
    4244:	dd4022c4 	addi	r21,sp,139
    4248:	84000044 	addi	r16,r16,1
    424c:	1ac7883a 	add	r3,r3,r11
    4250:	95400015 	stw	r21,0(r18)
    4254:	92c00115 	stw	r11,4(r18)
    4258:	d8c02015 	stw	r3,128(sp)
    425c:	dc001f15 	stw	r16,124(sp)
    4260:	008001c4 	movi	r2,7
    4264:	14000e16 	blt	r2,r16,42a0 <___vfprintf_internal_r+0x1094>
    4268:	92000204 	addi	r8,r18,8
    426c:	003dcd06 	br	39a4 <__alt_mem_Flash_flash_data+0xf40039a4>
    4270:	010000b4 	movhi	r4,2
    4274:	21322584 	addi	r4,r4,-14186
    4278:	d9002c15 	stw	r4,176(sp)
    427c:	dac02c17 	ldw	r11,176(sp)
    4280:	1c07883a 	add	r3,r3,r16
    4284:	44000115 	stw	r16,4(r8)
    4288:	42c00015 	stw	r11,0(r8)
    428c:	10800044 	addi	r2,r2,1
    4290:	d8c02015 	stw	r3,128(sp)
    4294:	d8801f15 	stw	r2,124(sp)
    4298:	010001c4 	movi	r4,7
    429c:	20bdc00e 	bge	r4,r2,39a0 <__alt_mem_Flash_flash_data+0xf40039a0>
    42a0:	b009883a 	mov	r4,r22
    42a4:	b80b883a 	mov	r5,r23
    42a8:	d9801e04 	addi	r6,sp,120
    42ac:	000a4d40 	call	a4d4 <__sprint_r>
    42b0:	103cca1e 	bne	r2,zero,35dc <__alt_mem_Flash_flash_data+0xf40035dc>
    42b4:	d8c02017 	ldw	r3,128(sp)
    42b8:	da000404 	addi	r8,sp,16
    42bc:	003db906 	br	39a4 <__alt_mem_Flash_flash_data+0xf40039a4>
    42c0:	b009883a 	mov	r4,r22
    42c4:	b80b883a 	mov	r5,r23
    42c8:	d9801e04 	addi	r6,sp,120
    42cc:	000a4d40 	call	a4d4 <__sprint_r>
    42d0:	103def26 	beq	r2,zero,3a90 <__alt_mem_Flash_flash_data+0xf4003a90>
    42d4:	003cc106 	br	35dc <__alt_mem_Flash_flash_data+0xf40035dc>
    42d8:	10803fcc 	andi	r2,r2,255
    42dc:	1000651e 	bne	r2,zero,4474 <___vfprintf_internal_r+0x1268>
    42e0:	8880004c 	andi	r2,r17,1
    42e4:	10013226 	beq	r2,zero,47b0 <___vfprintf_internal_r+0x15a4>
    42e8:	00800c04 	movi	r2,48
    42ec:	d8c01dc4 	addi	r3,sp,119
    42f0:	d8801dc5 	stb	r2,119(sp)
    42f4:	dc803c17 	ldw	r18,240(sp)
    42f8:	d8c03115 	stw	r3,196(sp)
    42fc:	003d1106 	br	3744 <__alt_mem_Flash_flash_data+0xf4003744>
    4300:	b009883a 	mov	r4,r22
    4304:	b80b883a 	mov	r5,r23
    4308:	d9801e04 	addi	r6,sp,120
    430c:	000a4d40 	call	a4d4 <__sprint_r>
    4310:	103cb21e 	bne	r2,zero,35dc <__alt_mem_Flash_flash_data+0xf40035dc>
    4314:	d8c02017 	ldw	r3,128(sp)
    4318:	da000404 	addi	r8,sp,16
    431c:	003d9406 	br	3970 <__alt_mem_Flash_flash_data+0xf4003970>
    4320:	b009883a 	mov	r4,r22
    4324:	b80b883a 	mov	r5,r23
    4328:	d9801e04 	addi	r6,sp,120
    432c:	000a4d40 	call	a4d4 <__sprint_r>
    4330:	103caa1e 	bne	r2,zero,35dc <__alt_mem_Flash_flash_data+0xf40035dc>
    4334:	d8c02017 	ldw	r3,128(sp)
    4338:	da000404 	addi	r8,sp,16
    433c:	003d5206 	br	3888 <__alt_mem_Flash_flash_data+0xf4003888>
    4340:	b009883a 	mov	r4,r22
    4344:	b80b883a 	mov	r5,r23
    4348:	d9801e04 	addi	r6,sp,120
    434c:	000a4d40 	call	a4d4 <__sprint_r>
    4350:	103ca21e 	bne	r2,zero,35dc <__alt_mem_Flash_flash_data+0xf40035dc>
    4354:	d8c02017 	ldw	r3,128(sp)
    4358:	da000404 	addi	r8,sp,16
    435c:	003d5806 	br	38c0 <__alt_mem_Flash_flash_data+0xf40038c0>
    4360:	d9403b17 	ldw	r5,236(sp)
    4364:	d8c01e04 	addi	r3,sp,120
    4368:	988003cc 	andi	r2,r19,15
    436c:	e008973a 	slli	r4,fp,28
    4370:	2885883a 	add	r2,r5,r2
    4374:	9826d13a 	srli	r19,r19,4
    4378:	10800003 	ldbu	r2,0(r2)
    437c:	e038d13a 	srli	fp,fp,4
    4380:	18ffffc4 	addi	r3,r3,-1
    4384:	24e6b03a 	or	r19,r4,r19
    4388:	18800005 	stb	r2,0(r3)
    438c:	9f04b03a 	or	r2,r19,fp
    4390:	103ff51e 	bne	r2,zero,4368 <__alt_mem_Flash_flash_data+0xf4004368>
    4394:	db002817 	ldw	r12,160(sp)
    4398:	d8c03115 	stw	r3,196(sp)
    439c:	60e5c83a 	sub	r18,r12,r3
    43a0:	003ce806 	br	3744 <__alt_mem_Flash_flash_data+0xf4003744>
    43a4:	dc002617 	ldw	r16,152(sp)
    43a8:	0401b10e 	bge	zero,r16,4a70 <___vfprintf_internal_r+0x1864>
    43ac:	db003117 	ldw	r12,196(sp)
    43b0:	dac03317 	ldw	r11,204(sp)
    43b4:	62e1883a 	add	r16,r12,r11
    43b8:	db003417 	ldw	r12,208(sp)
    43bc:	5825883a 	mov	r18,r11
    43c0:	62c0010e 	bge	r12,r11,43c8 <___vfprintf_internal_r+0x11bc>
    43c4:	6025883a 	mov	r18,r12
    43c8:	04800b0e 	bge	zero,r18,43f8 <___vfprintf_internal_r+0x11ec>
    43cc:	d8801f17 	ldw	r2,124(sp)
    43d0:	dac03117 	ldw	r11,196(sp)
    43d4:	1c87883a 	add	r3,r3,r18
    43d8:	10800044 	addi	r2,r2,1
    43dc:	42c00015 	stw	r11,0(r8)
    43e0:	44800115 	stw	r18,4(r8)
    43e4:	d8c02015 	stw	r3,128(sp)
    43e8:	d8801f15 	stw	r2,124(sp)
    43ec:	010001c4 	movi	r4,7
    43f0:	20824f16 	blt	r4,r2,4d30 <___vfprintf_internal_r+0x1b24>
    43f4:	42000204 	addi	r8,r8,8
    43f8:	90024b16 	blt	r18,zero,4d28 <___vfprintf_internal_r+0x1b1c>
    43fc:	db003417 	ldw	r12,208(sp)
    4400:	64a5c83a 	sub	r18,r12,r18
    4404:	0480730e 	bge	zero,r18,45d4 <___vfprintf_internal_r+0x13c8>
    4408:	05400404 	movi	r21,16
    440c:	d8801f17 	ldw	r2,124(sp)
    4410:	ac817d0e 	bge	r21,r18,4a08 <___vfprintf_internal_r+0x17fc>
    4414:	014000b4 	movhi	r5,2
    4418:	29722584 	addi	r5,r5,-14186
    441c:	d9402c15 	stw	r5,176(sp)
    4420:	070001c4 	movi	fp,7
    4424:	00000306 	br	4434 <___vfprintf_internal_r+0x1228>
    4428:	42000204 	addi	r8,r8,8
    442c:	94bffc04 	addi	r18,r18,-16
    4430:	ac81780e 	bge	r21,r18,4a14 <___vfprintf_internal_r+0x1808>
    4434:	18c00404 	addi	r3,r3,16
    4438:	10800044 	addi	r2,r2,1
    443c:	45000015 	stw	r20,0(r8)
    4440:	45400115 	stw	r21,4(r8)
    4444:	d8c02015 	stw	r3,128(sp)
    4448:	d8801f15 	stw	r2,124(sp)
    444c:	e0bff60e 	bge	fp,r2,4428 <__alt_mem_Flash_flash_data+0xf4004428>
    4450:	b009883a 	mov	r4,r22
    4454:	b80b883a 	mov	r5,r23
    4458:	d9801e04 	addi	r6,sp,120
    445c:	000a4d40 	call	a4d4 <__sprint_r>
    4460:	103c5e1e 	bne	r2,zero,35dc <__alt_mem_Flash_flash_data+0xf40035dc>
    4464:	d8c02017 	ldw	r3,128(sp)
    4468:	d8801f17 	ldw	r2,124(sp)
    446c:	da000404 	addi	r8,sp,16
    4470:	003fee06 	br	442c <__alt_mem_Flash_flash_data+0xf400442c>
    4474:	dac01e04 	addi	r11,sp,120
    4478:	0025883a 	mov	r18,zero
    447c:	dac03115 	stw	r11,196(sp)
    4480:	003cb006 	br	3744 <__alt_mem_Flash_flash_data+0xf4003744>
    4484:	b009883a 	mov	r4,r22
    4488:	b80b883a 	mov	r5,r23
    448c:	d9801e04 	addi	r6,sp,120
    4490:	000a4d40 	call	a4d4 <__sprint_r>
    4494:	103c511e 	bne	r2,zero,35dc <__alt_mem_Flash_flash_data+0xf40035dc>
    4498:	d8c02017 	ldw	r3,128(sp)
    449c:	d8802787 	ldb	r2,158(sp)
    44a0:	da000404 	addi	r8,sp,16
    44a4:	003ceb06 	br	3854 <__alt_mem_Flash_flash_data+0xf4003854>
    44a8:	1cc00017 	ldw	r19,0(r3)
    44ac:	dac02d17 	ldw	r11,180(sp)
    44b0:	9839d7fa 	srai	fp,r19,31
    44b4:	5ac00104 	addi	r11,r11,4
    44b8:	dac02d15 	stw	r11,180(sp)
    44bc:	e005883a 	mov	r2,fp
    44c0:	003c8106 	br	36c8 <__alt_mem_Flash_flash_data+0xf40036c8>
    44c4:	657fffc4 	addi	r21,r12,-1
    44c8:	057f5d0e 	bge	zero,r21,4240 <__alt_mem_Flash_flash_data+0xf4004240>
    44cc:	07000404 	movi	fp,16
    44d0:	e540900e 	bge	fp,r21,4714 <___vfprintf_internal_r+0x1508>
    44d4:	010000b4 	movhi	r4,2
    44d8:	21322584 	addi	r4,r4,-14186
    44dc:	d9002c15 	stw	r4,176(sp)
    44e0:	01c001c4 	movi	r7,7
    44e4:	00000306 	br	44f4 <___vfprintf_internal_r+0x12e8>
    44e8:	94800204 	addi	r18,r18,8
    44ec:	ad7ffc04 	addi	r21,r21,-16
    44f0:	e5408b0e 	bge	fp,r21,4720 <___vfprintf_internal_r+0x1514>
    44f4:	18c00404 	addi	r3,r3,16
    44f8:	84000044 	addi	r16,r16,1
    44fc:	95000015 	stw	r20,0(r18)
    4500:	97000115 	stw	fp,4(r18)
    4504:	d8c02015 	stw	r3,128(sp)
    4508:	dc001f15 	stw	r16,124(sp)
    450c:	3c3ff60e 	bge	r7,r16,44e8 <__alt_mem_Flash_flash_data+0xf40044e8>
    4510:	b009883a 	mov	r4,r22
    4514:	b80b883a 	mov	r5,r23
    4518:	d9801e04 	addi	r6,sp,120
    451c:	d9c03d15 	stw	r7,244(sp)
    4520:	000a4d40 	call	a4d4 <__sprint_r>
    4524:	d9c03d17 	ldw	r7,244(sp)
    4528:	103c2c1e 	bne	r2,zero,35dc <__alt_mem_Flash_flash_data+0xf40035dc>
    452c:	d8c02017 	ldw	r3,128(sp)
    4530:	dc001f17 	ldw	r16,124(sp)
    4534:	dc800404 	addi	r18,sp,16
    4538:	003fec06 	br	44ec <__alt_mem_Flash_flash_data+0xf40044ec>
    453c:	dac02d17 	ldw	r11,180(sp)
    4540:	0039883a 	mov	fp,zero
    4544:	0005883a 	mov	r2,zero
    4548:	5cc00017 	ldw	r19,0(r11)
    454c:	5ac00104 	addi	r11,r11,4
    4550:	dac02d15 	stw	r11,180(sp)
    4554:	9807883a 	mov	r3,r19
    4558:	003d5b06 	br	3ac8 <__alt_mem_Flash_flash_data+0xf4003ac8>
    455c:	db002d17 	ldw	r12,180(sp)
    4560:	0039883a 	mov	fp,zero
    4564:	00800044 	movi	r2,1
    4568:	64c00017 	ldw	r19,0(r12)
    456c:	63000104 	addi	r12,r12,4
    4570:	db002d15 	stw	r12,180(sp)
    4574:	9807883a 	mov	r3,r19
    4578:	003d5306 	br	3ac8 <__alt_mem_Flash_flash_data+0xf4003ac8>
    457c:	00800084 	movi	r2,2
    4580:	9f06b03a 	or	r3,r19,fp
    4584:	003d5006 	br	3ac8 <__alt_mem_Flash_flash_data+0xf4003ac8>
    4588:	10803fcc 	andi	r2,r2,255
    458c:	1080201c 	xori	r2,r2,128
    4590:	10bfe004 	addi	r2,r2,-128
    4594:	01000c04 	movi	r4,48
    4598:	1101a526 	beq	r2,r4,4c30 <___vfprintf_internal_r+0x1a24>
    459c:	dac03117 	ldw	r11,196(sp)
    45a0:	db002817 	ldw	r12,160(sp)
    45a4:	193fffc5 	stb	r4,-1(r3)
    45a8:	5affffc4 	addi	r11,r11,-1
    45ac:	dac03115 	stw	r11,196(sp)
    45b0:	62e5c83a 	sub	r18,r12,r11
    45b4:	003c6306 	br	3744 <__alt_mem_Flash_flash_data+0xf4003744>
    45b8:	b009883a 	mov	r4,r22
    45bc:	b80b883a 	mov	r5,r23
    45c0:	d9801e04 	addi	r6,sp,120
    45c4:	000a4d40 	call	a4d4 <__sprint_r>
    45c8:	103c041e 	bne	r2,zero,35dc <__alt_mem_Flash_flash_data+0xf40035dc>
    45cc:	d8c02017 	ldw	r3,128(sp)
    45d0:	da000404 	addi	r8,sp,16
    45d4:	db003117 	ldw	r12,196(sp)
    45d8:	dac03417 	ldw	r11,208(sp)
    45dc:	d8802617 	ldw	r2,152(sp)
    45e0:	62e5883a 	add	r18,r12,r11
    45e4:	db003317 	ldw	r12,204(sp)
    45e8:	13000216 	blt	r2,r12,45f4 <___vfprintf_internal_r+0x13e8>
    45ec:	8900004c 	andi	r4,r17,1
    45f0:	20000c26 	beq	r4,zero,4624 <___vfprintf_internal_r+0x1418>
    45f4:	dac03817 	ldw	r11,224(sp)
    45f8:	d9001f17 	ldw	r4,124(sp)
    45fc:	db003517 	ldw	r12,212(sp)
    4600:	1ac7883a 	add	r3,r3,r11
    4604:	21000044 	addi	r4,r4,1
    4608:	43000015 	stw	r12,0(r8)
    460c:	42c00115 	stw	r11,4(r8)
    4610:	d8c02015 	stw	r3,128(sp)
    4614:	d9001f15 	stw	r4,124(sp)
    4618:	014001c4 	movi	r5,7
    461c:	2901cc16 	blt	r5,r4,4d50 <___vfprintf_internal_r+0x1b44>
    4620:	42000204 	addi	r8,r8,8
    4624:	dac03317 	ldw	r11,204(sp)
    4628:	8489c83a 	sub	r4,r16,r18
    462c:	5885c83a 	sub	r2,r11,r2
    4630:	1021883a 	mov	r16,r2
    4634:	2080010e 	bge	r4,r2,463c <___vfprintf_internal_r+0x1430>
    4638:	2021883a 	mov	r16,r4
    463c:	04000a0e 	bge	zero,r16,4668 <___vfprintf_internal_r+0x145c>
    4640:	d9001f17 	ldw	r4,124(sp)
    4644:	1c07883a 	add	r3,r3,r16
    4648:	44800015 	stw	r18,0(r8)
    464c:	21000044 	addi	r4,r4,1
    4650:	44000115 	stw	r16,4(r8)
    4654:	d8c02015 	stw	r3,128(sp)
    4658:	d9001f15 	stw	r4,124(sp)
    465c:	014001c4 	movi	r5,7
    4660:	2901e316 	blt	r5,r4,4df0 <___vfprintf_internal_r+0x1be4>
    4664:	42000204 	addi	r8,r8,8
    4668:	8001df16 	blt	r16,zero,4de8 <___vfprintf_internal_r+0x1bdc>
    466c:	1421c83a 	sub	r16,r2,r16
    4670:	043ccc0e 	bge	zero,r16,39a4 <__alt_mem_Flash_flash_data+0xf40039a4>
    4674:	04800404 	movi	r18,16
    4678:	d8801f17 	ldw	r2,124(sp)
    467c:	943efc0e 	bge	r18,r16,4270 <__alt_mem_Flash_flash_data+0xf4004270>
    4680:	014000b4 	movhi	r5,2
    4684:	29722584 	addi	r5,r5,-14186
    4688:	d9402c15 	stw	r5,176(sp)
    468c:	054001c4 	movi	r21,7
    4690:	00000306 	br	46a0 <___vfprintf_internal_r+0x1494>
    4694:	42000204 	addi	r8,r8,8
    4698:	843ffc04 	addi	r16,r16,-16
    469c:	943ef70e 	bge	r18,r16,427c <__alt_mem_Flash_flash_data+0xf400427c>
    46a0:	18c00404 	addi	r3,r3,16
    46a4:	10800044 	addi	r2,r2,1
    46a8:	45000015 	stw	r20,0(r8)
    46ac:	44800115 	stw	r18,4(r8)
    46b0:	d8c02015 	stw	r3,128(sp)
    46b4:	d8801f15 	stw	r2,124(sp)
    46b8:	a8bff60e 	bge	r21,r2,4694 <__alt_mem_Flash_flash_data+0xf4004694>
    46bc:	b009883a 	mov	r4,r22
    46c0:	b80b883a 	mov	r5,r23
    46c4:	d9801e04 	addi	r6,sp,120
    46c8:	000a4d40 	call	a4d4 <__sprint_r>
    46cc:	103bc31e 	bne	r2,zero,35dc <__alt_mem_Flash_flash_data+0xf40035dc>
    46d0:	d8c02017 	ldw	r3,128(sp)
    46d4:	d8801f17 	ldw	r2,124(sp)
    46d8:	da000404 	addi	r8,sp,16
    46dc:	003fee06 	br	4698 <__alt_mem_Flash_flash_data+0xf4004698>
    46e0:	8888703a 	and	r4,r17,r2
    46e4:	203eab1e 	bne	r4,zero,4194 <__alt_mem_Flash_flash_data+0xf4004194>
    46e8:	dc001f17 	ldw	r16,124(sp)
    46ec:	db003117 	ldw	r12,196(sp)
    46f0:	40800115 	stw	r2,4(r8)
    46f4:	84000044 	addi	r16,r16,1
    46f8:	43000015 	stw	r12,0(r8)
    46fc:	d8c02015 	stw	r3,128(sp)
    4700:	dc001f15 	stw	r16,124(sp)
    4704:	008001c4 	movi	r2,7
    4708:	14000e16 	blt	r2,r16,4744 <___vfprintf_internal_r+0x1538>
    470c:	44800204 	addi	r18,r8,8
    4710:	003ecb06 	br	4240 <__alt_mem_Flash_flash_data+0xf4004240>
    4714:	008000b4 	movhi	r2,2
    4718:	10b22584 	addi	r2,r2,-14186
    471c:	d8802c15 	stw	r2,176(sp)
    4720:	dac02c17 	ldw	r11,176(sp)
    4724:	1d47883a 	add	r3,r3,r21
    4728:	84000044 	addi	r16,r16,1
    472c:	92c00015 	stw	r11,0(r18)
    4730:	95400115 	stw	r21,4(r18)
    4734:	d8c02015 	stw	r3,128(sp)
    4738:	dc001f15 	stw	r16,124(sp)
    473c:	008001c4 	movi	r2,7
    4740:	143ebe0e 	bge	r2,r16,423c <__alt_mem_Flash_flash_data+0xf400423c>
    4744:	b009883a 	mov	r4,r22
    4748:	b80b883a 	mov	r5,r23
    474c:	d9801e04 	addi	r6,sp,120
    4750:	000a4d40 	call	a4d4 <__sprint_r>
    4754:	103ba11e 	bne	r2,zero,35dc <__alt_mem_Flash_flash_data+0xf40035dc>
    4758:	d8c02017 	ldw	r3,128(sp)
    475c:	dc001f17 	ldw	r16,124(sp)
    4760:	dc800404 	addi	r18,sp,16
    4764:	003eb606 	br	4240 <__alt_mem_Flash_flash_data+0xf4004240>
    4768:	b009883a 	mov	r4,r22
    476c:	b80b883a 	mov	r5,r23
    4770:	d9801e04 	addi	r6,sp,120
    4774:	000a4d40 	call	a4d4 <__sprint_r>
    4778:	103b981e 	bne	r2,zero,35dc <__alt_mem_Flash_flash_data+0xf40035dc>
    477c:	d8c02017 	ldw	r3,128(sp)
    4780:	dc001f17 	ldw	r16,124(sp)
    4784:	da000404 	addi	r8,sp,16
    4788:	003e8d06 	br	41c0 <__alt_mem_Flash_flash_data+0xf40041c0>
    478c:	b009883a 	mov	r4,r22
    4790:	b80b883a 	mov	r5,r23
    4794:	d9801e04 	addi	r6,sp,120
    4798:	000a4d40 	call	a4d4 <__sprint_r>
    479c:	103b8f1e 	bne	r2,zero,35dc <__alt_mem_Flash_flash_data+0xf40035dc>
    47a0:	d8c02017 	ldw	r3,128(sp)
    47a4:	dc001f17 	ldw	r16,124(sp)
    47a8:	dc800404 	addi	r18,sp,16
    47ac:	003e8f06 	br	41ec <__alt_mem_Flash_flash_data+0xf40041ec>
    47b0:	db001e04 	addi	r12,sp,120
    47b4:	0025883a 	mov	r18,zero
    47b8:	db003115 	stw	r12,196(sp)
    47bc:	003be106 	br	3744 <__alt_mem_Flash_flash_data+0xf4003744>
    47c0:	b009883a 	mov	r4,r22
    47c4:	b80b883a 	mov	r5,r23
    47c8:	d9801e04 	addi	r6,sp,120
    47cc:	000a4d40 	call	a4d4 <__sprint_r>
    47d0:	103b821e 	bne	r2,zero,35dc <__alt_mem_Flash_flash_data+0xf40035dc>
    47d4:	d8c02017 	ldw	r3,128(sp)
    47d8:	da000404 	addi	r8,sp,16
    47dc:	003c3b06 	br	38cc <__alt_mem_Flash_flash_data+0xf40038cc>
    47e0:	04e7c83a 	sub	r19,zero,r19
    47e4:	9804c03a 	cmpne	r2,r19,zero
    47e8:	0739c83a 	sub	fp,zero,fp
    47ec:	e0b9c83a 	sub	fp,fp,r2
    47f0:	05400b44 	movi	r21,45
    47f4:	dd402785 	stb	r21,158(sp)
    47f8:	da403215 	stw	r9,200(sp)
    47fc:	00800044 	movi	r2,1
    4800:	9f06b03a 	or	r3,r19,fp
    4804:	003bb506 	br	36dc <__alt_mem_Flash_flash_data+0xf40036dc>
    4808:	da003f15 	stw	r8,252(sp)
    480c:	da403e15 	stw	r9,248(sp)
    4810:	000a1300 	call	a130 <__fpclassifyd>
    4814:	da003f17 	ldw	r8,252(sp)
    4818:	da403e17 	ldw	r9,248(sp)
    481c:	1000ce26 	beq	r2,zero,4b58 <___vfprintf_internal_r+0x194c>
    4820:	057ff7c4 	movi	r21,-33
    4824:	00bfffc4 	movi	r2,-1
    4828:	856a703a 	and	r21,r16,r21
    482c:	4881e826 	beq	r9,r2,4fd0 <___vfprintf_internal_r+0x1dc4>
    4830:	008011c4 	movi	r2,71
    4834:	a881e326 	beq	r21,r2,4fc4 <___vfprintf_internal_r+0x1db8>
    4838:	db003917 	ldw	r12,228(sp)
    483c:	8ac04014 	ori	r11,r17,256
    4840:	dac02d15 	stw	r11,180(sp)
    4844:	6001ed16 	blt	r12,zero,4ffc <___vfprintf_internal_r+0x1df0>
    4848:	dc803917 	ldw	r18,228(sp)
    484c:	d8002b05 	stb	zero,172(sp)
    4850:	00801984 	movi	r2,102
    4854:	80811826 	beq	r16,r2,4cb8 <___vfprintf_internal_r+0x1aac>
    4858:	00801184 	movi	r2,70
    485c:	80811626 	beq	r16,r2,4cb8 <___vfprintf_internal_r+0x1aac>
    4860:	00801144 	movi	r2,69
    4864:	a881e926 	beq	r21,r2,500c <___vfprintf_internal_r+0x1e00>
    4868:	4839883a 	mov	fp,r9
    486c:	d8802604 	addi	r2,sp,152
    4870:	d8800115 	stw	r2,4(sp)
    4874:	d9403717 	ldw	r5,220(sp)
    4878:	d8802504 	addi	r2,sp,148
    487c:	d8800215 	stw	r2,8(sp)
    4880:	d8802104 	addi	r2,sp,132
    4884:	df000015 	stw	fp,0(sp)
    4888:	d8800315 	stw	r2,12(sp)
    488c:	b009883a 	mov	r4,r22
    4890:	900d883a 	mov	r6,r18
    4894:	01c00084 	movi	r7,2
    4898:	da003f15 	stw	r8,252(sp)
    489c:	da403e15 	stw	r9,248(sp)
    48a0:	00055900 	call	5590 <_dtoa_r>
    48a4:	d8803115 	stw	r2,196(sp)
    48a8:	008019c4 	movi	r2,103
    48ac:	da003f17 	ldw	r8,252(sp)
    48b0:	da403e17 	ldw	r9,248(sp)
    48b4:	80800226 	beq	r16,r2,48c0 <___vfprintf_internal_r+0x16b4>
    48b8:	008011c4 	movi	r2,71
    48bc:	8081101e 	bne	r16,r2,4d00 <___vfprintf_internal_r+0x1af4>
    48c0:	8880004c 	andi	r2,r17,1
    48c4:	1001dd26 	beq	r2,zero,503c <___vfprintf_internal_r+0x1e30>
    48c8:	db003117 	ldw	r12,196(sp)
    48cc:	6715883a 	add	r10,r12,fp
    48d0:	d9003717 	ldw	r4,220(sp)
    48d4:	900b883a 	mov	r5,r18
    48d8:	000d883a 	mov	r6,zero
    48dc:	000f883a 	mov	r7,zero
    48e0:	da003f15 	stw	r8,252(sp)
    48e4:	da403e15 	stw	r9,248(sp)
    48e8:	da803d15 	stw	r10,244(sp)
    48ec:	000df780 	call	df78 <__eqdf2>
    48f0:	da003f17 	ldw	r8,252(sp)
    48f4:	da403e17 	ldw	r9,248(sp)
    48f8:	da803d17 	ldw	r10,244(sp)
    48fc:	10016526 	beq	r2,zero,4e94 <___vfprintf_internal_r+0x1c88>
    4900:	d8802117 	ldw	r2,132(sp)
    4904:	1280062e 	bgeu	r2,r10,4920 <___vfprintf_internal_r+0x1714>
    4908:	01000c04 	movi	r4,48
    490c:	10c00044 	addi	r3,r2,1
    4910:	d8c02115 	stw	r3,132(sp)
    4914:	11000005 	stb	r4,0(r2)
    4918:	d8802117 	ldw	r2,132(sp)
    491c:	12bffb36 	bltu	r2,r10,490c <__alt_mem_Flash_flash_data+0xf400490c>
    4920:	db003117 	ldw	r12,196(sp)
    4924:	1305c83a 	sub	r2,r2,r12
    4928:	d8803315 	stw	r2,204(sp)
    492c:	008011c4 	movi	r2,71
    4930:	a8814d26 	beq	r21,r2,4e68 <___vfprintf_internal_r+0x1c5c>
    4934:	00801944 	movi	r2,101
    4938:	1402060e 	bge	r2,r16,5154 <___vfprintf_internal_r+0x1f48>
    493c:	00801984 	movi	r2,102
    4940:	8081b426 	beq	r16,r2,5014 <___vfprintf_internal_r+0x1e08>
    4944:	db002617 	ldw	r12,152(sp)
    4948:	db003415 	stw	r12,208(sp)
    494c:	db003417 	ldw	r12,208(sp)
    4950:	dac03317 	ldw	r11,204(sp)
    4954:	62c1a016 	blt	r12,r11,4fd8 <___vfprintf_internal_r+0x1dcc>
    4958:	8c40004c 	andi	r17,r17,1
    495c:	8801bf1e 	bne	r17,zero,505c <___vfprintf_internal_r+0x1e50>
    4960:	6005883a 	mov	r2,r12
    4964:	6001b316 	blt	r12,zero,5034 <___vfprintf_internal_r+0x1e28>
    4968:	dc803417 	ldw	r18,208(sp)
    496c:	df002b07 	ldb	fp,172(sp)
    4970:	e0012e1e 	bne	fp,zero,4e2c <___vfprintf_internal_r+0x1c20>
    4974:	dc402d17 	ldw	r17,180(sp)
    4978:	dd402783 	ldbu	r21,158(sp)
    497c:	d8802b15 	stw	r2,172(sp)
    4980:	dcc02d15 	stw	r19,180(sp)
    4984:	d8003215 	stw	zero,200(sp)
    4988:	003b7306 	br	3758 <__alt_mem_Flash_flash_data+0xf4003758>
    498c:	00800084 	movi	r2,2
    4990:	003c4d06 	br	3ac8 <__alt_mem_Flash_flash_data+0xf4003ac8>
    4994:	8880040c 	andi	r2,r17,16
    4998:	1000091e 	bne	r2,zero,49c0 <___vfprintf_internal_r+0x17b4>
    499c:	8c40100c 	andi	r17,r17,64
    49a0:	88000726 	beq	r17,zero,49c0 <___vfprintf_internal_r+0x17b4>
    49a4:	db002d17 	ldw	r12,180(sp)
    49a8:	dac02f17 	ldw	r11,188(sp)
    49ac:	60800017 	ldw	r2,0(r12)
    49b0:	63000104 	addi	r12,r12,4
    49b4:	db002d15 	stw	r12,180(sp)
    49b8:	12c0000d 	sth	r11,0(r2)
    49bc:	003a4e06 	br	32f8 <__alt_mem_Flash_flash_data+0xf40032f8>
    49c0:	db002d17 	ldw	r12,180(sp)
    49c4:	dac02f17 	ldw	r11,188(sp)
    49c8:	60800017 	ldw	r2,0(r12)
    49cc:	63000104 	addi	r12,r12,4
    49d0:	db002d15 	stw	r12,180(sp)
    49d4:	12c00015 	stw	r11,0(r2)
    49d8:	003a4706 	br	32f8 <__alt_mem_Flash_flash_data+0xf40032f8>
    49dc:	1c000007 	ldb	r16,0(r3)
    49e0:	1805883a 	mov	r2,r3
    49e4:	003a6e06 	br	33a0 <__alt_mem_Flash_flash_data+0xf40033a0>
    49e8:	88c0100c 	andi	r3,r17,64
    49ec:	18006b26 	beq	r3,zero,4b9c <___vfprintf_internal_r+0x1990>
    49f0:	dac02d17 	ldw	r11,180(sp)
    49f4:	14c0000b 	ldhu	r19,0(r2)
    49f8:	0039883a 	mov	fp,zero
    49fc:	5ac00104 	addi	r11,r11,4
    4a00:	dac02d15 	stw	r11,180(sp)
    4a04:	003cb206 	br	3cd0 <__alt_mem_Flash_flash_data+0xf4003cd0>
    4a08:	010000b4 	movhi	r4,2
    4a0c:	21322584 	addi	r4,r4,-14186
    4a10:	d9002c15 	stw	r4,176(sp)
    4a14:	dac02c17 	ldw	r11,176(sp)
    4a18:	1c87883a 	add	r3,r3,r18
    4a1c:	10800044 	addi	r2,r2,1
    4a20:	42c00015 	stw	r11,0(r8)
    4a24:	44800115 	stw	r18,4(r8)
    4a28:	d8c02015 	stw	r3,128(sp)
    4a2c:	d8801f15 	stw	r2,124(sp)
    4a30:	010001c4 	movi	r4,7
    4a34:	20bee016 	blt	r4,r2,45b8 <__alt_mem_Flash_flash_data+0xf40045b8>
    4a38:	42000204 	addi	r8,r8,8
    4a3c:	003ee506 	br	45d4 <__alt_mem_Flash_flash_data+0xf40045d4>
    4a40:	010000b4 	movhi	r4,2
    4a44:	21322584 	addi	r4,r4,-14186
    4a48:	d9002c15 	stw	r4,176(sp)
    4a4c:	003bbe06 	br	3948 <__alt_mem_Flash_flash_data+0xf4003948>
    4a50:	b009883a 	mov	r4,r22
    4a54:	b80b883a 	mov	r5,r23
    4a58:	d9801e04 	addi	r6,sp,120
    4a5c:	000a4d40 	call	a4d4 <__sprint_r>
    4a60:	103ade1e 	bne	r2,zero,35dc <__alt_mem_Flash_flash_data+0xf40035dc>
    4a64:	d8c02017 	ldw	r3,128(sp)
    4a68:	da000404 	addi	r8,sp,16
    4a6c:	003d6b06 	br	401c <__alt_mem_Flash_flash_data+0xf400401c>
    4a70:	d8801f17 	ldw	r2,124(sp)
    4a74:	030000b4 	movhi	r12,2
    4a78:	01000044 	movi	r4,1
    4a7c:	18c00044 	addi	r3,r3,1
    4a80:	10800044 	addi	r2,r2,1
    4a84:	63322504 	addi	r12,r12,-14188
    4a88:	41000115 	stw	r4,4(r8)
    4a8c:	43000015 	stw	r12,0(r8)
    4a90:	d8c02015 	stw	r3,128(sp)
    4a94:	d8801f15 	stw	r2,124(sp)
    4a98:	010001c4 	movi	r4,7
    4a9c:	20804916 	blt	r4,r2,4bc4 <___vfprintf_internal_r+0x19b8>
    4aa0:	42000204 	addi	r8,r8,8
    4aa4:	8000041e 	bne	r16,zero,4ab8 <___vfprintf_internal_r+0x18ac>
    4aa8:	dac03317 	ldw	r11,204(sp)
    4aac:	5800021e 	bne	r11,zero,4ab8 <___vfprintf_internal_r+0x18ac>
    4ab0:	8880004c 	andi	r2,r17,1
    4ab4:	103bbb26 	beq	r2,zero,39a4 <__alt_mem_Flash_flash_data+0xf40039a4>
    4ab8:	db003817 	ldw	r12,224(sp)
    4abc:	d8801f17 	ldw	r2,124(sp)
    4ac0:	dac03517 	ldw	r11,212(sp)
    4ac4:	1b07883a 	add	r3,r3,r12
    4ac8:	10800044 	addi	r2,r2,1
    4acc:	42c00015 	stw	r11,0(r8)
    4ad0:	43000115 	stw	r12,4(r8)
    4ad4:	d8c02015 	stw	r3,128(sp)
    4ad8:	d8801f15 	stw	r2,124(sp)
    4adc:	010001c4 	movi	r4,7
    4ae0:	20812e16 	blt	r4,r2,4f9c <___vfprintf_internal_r+0x1d90>
    4ae4:	42000204 	addi	r8,r8,8
    4ae8:	0421c83a 	sub	r16,zero,r16
    4aec:	04005c0e 	bge	zero,r16,4c60 <___vfprintf_internal_r+0x1a54>
    4af0:	04800404 	movi	r18,16
    4af4:	94009f0e 	bge	r18,r16,4d74 <___vfprintf_internal_r+0x1b68>
    4af8:	010000b4 	movhi	r4,2
    4afc:	21322584 	addi	r4,r4,-14186
    4b00:	d9002c15 	stw	r4,176(sp)
    4b04:	054001c4 	movi	r21,7
    4b08:	00000306 	br	4b18 <___vfprintf_internal_r+0x190c>
    4b0c:	42000204 	addi	r8,r8,8
    4b10:	843ffc04 	addi	r16,r16,-16
    4b14:	94009a0e 	bge	r18,r16,4d80 <___vfprintf_internal_r+0x1b74>
    4b18:	18c00404 	addi	r3,r3,16
    4b1c:	10800044 	addi	r2,r2,1
    4b20:	45000015 	stw	r20,0(r8)
    4b24:	44800115 	stw	r18,4(r8)
    4b28:	d8c02015 	stw	r3,128(sp)
    4b2c:	d8801f15 	stw	r2,124(sp)
    4b30:	a8bff60e 	bge	r21,r2,4b0c <__alt_mem_Flash_flash_data+0xf4004b0c>
    4b34:	b009883a 	mov	r4,r22
    4b38:	b80b883a 	mov	r5,r23
    4b3c:	d9801e04 	addi	r6,sp,120
    4b40:	000a4d40 	call	a4d4 <__sprint_r>
    4b44:	103aa51e 	bne	r2,zero,35dc <__alt_mem_Flash_flash_data+0xf40035dc>
    4b48:	d8c02017 	ldw	r3,128(sp)
    4b4c:	d8801f17 	ldw	r2,124(sp)
    4b50:	da000404 	addi	r8,sp,16
    4b54:	003fee06 	br	4b10 <__alt_mem_Flash_flash_data+0xf4004b10>
    4b58:	008011c4 	movi	r2,71
    4b5c:	1400be16 	blt	r2,r16,4e58 <___vfprintf_internal_r+0x1c4c>
    4b60:	030000b4 	movhi	r12,2
    4b64:	63321704 	addi	r12,r12,-14244
    4b68:	db003115 	stw	r12,196(sp)
    4b6c:	00c000c4 	movi	r3,3
    4b70:	00bfdfc4 	movi	r2,-129
    4b74:	d8c02b15 	stw	r3,172(sp)
    4b78:	88a2703a 	and	r17,r17,r2
    4b7c:	dd402783 	ldbu	r21,158(sp)
    4b80:	dcc02d15 	stw	r19,180(sp)
    4b84:	1825883a 	mov	r18,r3
    4b88:	d8003215 	stw	zero,200(sp)
    4b8c:	d8003415 	stw	zero,208(sp)
    4b90:	003af106 	br	3758 <__alt_mem_Flash_flash_data+0xf4003758>
    4b94:	4825883a 	mov	r18,r9
    4b98:	003c9306 	br	3de8 <__alt_mem_Flash_flash_data+0xf4003de8>
    4b9c:	db002d17 	ldw	r12,180(sp)
    4ba0:	14c00017 	ldw	r19,0(r2)
    4ba4:	0039883a 	mov	fp,zero
    4ba8:	63000104 	addi	r12,r12,4
    4bac:	db002d15 	stw	r12,180(sp)
    4bb0:	003c4706 	br	3cd0 <__alt_mem_Flash_flash_data+0xf4003cd0>
    4bb4:	008000b4 	movhi	r2,2
    4bb8:	10b21504 	addi	r2,r2,-14252
    4bbc:	d8803115 	stw	r2,196(sp)
    4bc0:	003bf106 	br	3b88 <__alt_mem_Flash_flash_data+0xf4003b88>
    4bc4:	b009883a 	mov	r4,r22
    4bc8:	b80b883a 	mov	r5,r23
    4bcc:	d9801e04 	addi	r6,sp,120
    4bd0:	000a4d40 	call	a4d4 <__sprint_r>
    4bd4:	103a811e 	bne	r2,zero,35dc <__alt_mem_Flash_flash_data+0xf40035dc>
    4bd8:	dc002617 	ldw	r16,152(sp)
    4bdc:	d8c02017 	ldw	r3,128(sp)
    4be0:	da000404 	addi	r8,sp,16
    4be4:	003faf06 	br	4aa4 <__alt_mem_Flash_flash_data+0xf4004aa4>
    4be8:	db002e17 	ldw	r12,184(sp)
    4bec:	1805883a 	mov	r2,r3
    4bf0:	dac02d15 	stw	r11,180(sp)
    4bf4:	0319c83a 	sub	r12,zero,r12
    4bf8:	db002e15 	stw	r12,184(sp)
    4bfc:	003a8206 	br	3608 <__alt_mem_Flash_flash_data+0xf4003608>
    4c00:	18800044 	addi	r2,r3,1
    4c04:	8c400814 	ori	r17,r17,32
    4c08:	1c000047 	ldb	r16,1(r3)
    4c0c:	0039e406 	br	33a0 <__alt_mem_Flash_flash_data+0xf40033a0>
    4c10:	b009883a 	mov	r4,r22
    4c14:	b80b883a 	mov	r5,r23
    4c18:	d9801e04 	addi	r6,sp,120
    4c1c:	000a4d40 	call	a4d4 <__sprint_r>
    4c20:	103a6e1e 	bne	r2,zero,35dc <__alt_mem_Flash_flash_data+0xf40035dc>
    4c24:	d8c02017 	ldw	r3,128(sp)
    4c28:	da000404 	addi	r8,sp,16
    4c2c:	003d0c06 	br	4060 <__alt_mem_Flash_flash_data+0xf4004060>
    4c30:	db002817 	ldw	r12,160(sp)
    4c34:	d8c03117 	ldw	r3,196(sp)
    4c38:	60e5c83a 	sub	r18,r12,r3
    4c3c:	003ac106 	br	3744 <__alt_mem_Flash_flash_data+0xf4003744>
    4c40:	b009883a 	mov	r4,r22
    4c44:	b80b883a 	mov	r5,r23
    4c48:	d9801e04 	addi	r6,sp,120
    4c4c:	000a4d40 	call	a4d4 <__sprint_r>
    4c50:	103a621e 	bne	r2,zero,35dc <__alt_mem_Flash_flash_data+0xf40035dc>
    4c54:	d8c02017 	ldw	r3,128(sp)
    4c58:	d8801f17 	ldw	r2,124(sp)
    4c5c:	da000404 	addi	r8,sp,16
    4c60:	db003317 	ldw	r12,204(sp)
    4c64:	dac03117 	ldw	r11,196(sp)
    4c68:	10800044 	addi	r2,r2,1
    4c6c:	1b07883a 	add	r3,r3,r12
    4c70:	42c00015 	stw	r11,0(r8)
    4c74:	43000115 	stw	r12,4(r8)
    4c78:	d8c02015 	stw	r3,128(sp)
    4c7c:	d8801f15 	stw	r2,124(sp)
    4c80:	010001c4 	movi	r4,7
    4c84:	20bb460e 	bge	r4,r2,39a0 <__alt_mem_Flash_flash_data+0xf40039a0>
    4c88:	003d8506 	br	42a0 <__alt_mem_Flash_flash_data+0xf40042a0>
    4c8c:	da003f15 	stw	r8,252(sp)
    4c90:	00031740 	call	3174 <strlen>
    4c94:	1025883a 	mov	r18,r2
    4c98:	da003f17 	ldw	r8,252(sp)
    4c9c:	903c540e 	bge	r18,zero,3df0 <__alt_mem_Flash_flash_data+0xf4003df0>
    4ca0:	0005883a 	mov	r2,zero
    4ca4:	003c5206 	br	3df0 <__alt_mem_Flash_flash_data+0xf4003df0>
    4ca8:	010000b4 	movhi	r4,2
    4cac:	21322984 	addi	r4,r4,-14170
    4cb0:	d9003615 	stw	r4,216(sp)
    4cb4:	003adc06 	br	3828 <__alt_mem_Flash_flash_data+0xf4003828>
    4cb8:	d8802604 	addi	r2,sp,152
    4cbc:	d8800115 	stw	r2,4(sp)
    4cc0:	d9403717 	ldw	r5,220(sp)
    4cc4:	d8802504 	addi	r2,sp,148
    4cc8:	d8800215 	stw	r2,8(sp)
    4ccc:	d8802104 	addi	r2,sp,132
    4cd0:	da400015 	stw	r9,0(sp)
    4cd4:	d8800315 	stw	r2,12(sp)
    4cd8:	b009883a 	mov	r4,r22
    4cdc:	900d883a 	mov	r6,r18
    4ce0:	01c000c4 	movi	r7,3
    4ce4:	da003f15 	stw	r8,252(sp)
    4ce8:	da403e15 	stw	r9,248(sp)
    4cec:	00055900 	call	5590 <_dtoa_r>
    4cf0:	da403e17 	ldw	r9,248(sp)
    4cf4:	da003f17 	ldw	r8,252(sp)
    4cf8:	d8803115 	stw	r2,196(sp)
    4cfc:	4839883a 	mov	fp,r9
    4d00:	dac03117 	ldw	r11,196(sp)
    4d04:	00801184 	movi	r2,70
    4d08:	5f15883a 	add	r10,r11,fp
    4d0c:	a8bef01e 	bne	r21,r2,48d0 <__alt_mem_Flash_flash_data+0xf40048d0>
    4d10:	59000007 	ldb	r4,0(r11)
    4d14:	00800c04 	movi	r2,48
    4d18:	2080d526 	beq	r4,r2,5070 <___vfprintf_internal_r+0x1e64>
    4d1c:	d8c02617 	ldw	r3,152(sp)
    4d20:	50d5883a 	add	r10,r10,r3
    4d24:	003eea06 	br	48d0 <__alt_mem_Flash_flash_data+0xf40048d0>
    4d28:	0025883a 	mov	r18,zero
    4d2c:	003db306 	br	43fc <__alt_mem_Flash_flash_data+0xf40043fc>
    4d30:	b009883a 	mov	r4,r22
    4d34:	b80b883a 	mov	r5,r23
    4d38:	d9801e04 	addi	r6,sp,120
    4d3c:	000a4d40 	call	a4d4 <__sprint_r>
    4d40:	103a261e 	bne	r2,zero,35dc <__alt_mem_Flash_flash_data+0xf40035dc>
    4d44:	d8c02017 	ldw	r3,128(sp)
    4d48:	da000404 	addi	r8,sp,16
    4d4c:	003daa06 	br	43f8 <__alt_mem_Flash_flash_data+0xf40043f8>
    4d50:	b009883a 	mov	r4,r22
    4d54:	b80b883a 	mov	r5,r23
    4d58:	d9801e04 	addi	r6,sp,120
    4d5c:	000a4d40 	call	a4d4 <__sprint_r>
    4d60:	103a1e1e 	bne	r2,zero,35dc <__alt_mem_Flash_flash_data+0xf40035dc>
    4d64:	d8802617 	ldw	r2,152(sp)
    4d68:	d8c02017 	ldw	r3,128(sp)
    4d6c:	da000404 	addi	r8,sp,16
    4d70:	003e2c06 	br	4624 <__alt_mem_Flash_flash_data+0xf4004624>
    4d74:	030000b4 	movhi	r12,2
    4d78:	63322584 	addi	r12,r12,-14186
    4d7c:	db002c15 	stw	r12,176(sp)
    4d80:	dac02c17 	ldw	r11,176(sp)
    4d84:	1c07883a 	add	r3,r3,r16
    4d88:	10800044 	addi	r2,r2,1
    4d8c:	42c00015 	stw	r11,0(r8)
    4d90:	44000115 	stw	r16,4(r8)
    4d94:	d8c02015 	stw	r3,128(sp)
    4d98:	d8801f15 	stw	r2,124(sp)
    4d9c:	010001c4 	movi	r4,7
    4da0:	20bfa716 	blt	r4,r2,4c40 <__alt_mem_Flash_flash_data+0xf4004c40>
    4da4:	42000204 	addi	r8,r8,8
    4da8:	003fad06 	br	4c60 <__alt_mem_Flash_flash_data+0xf4004c60>
    4dac:	00800184 	movi	r2,6
    4db0:	1240012e 	bgeu	r2,r9,4db8 <___vfprintf_internal_r+0x1bac>
    4db4:	1013883a 	mov	r9,r2
    4db8:	4825883a 	mov	r18,r9
    4dbc:	4805883a 	mov	r2,r9
    4dc0:	4800c216 	blt	r9,zero,50cc <___vfprintf_internal_r+0x1ec0>
    4dc4:	d8802b15 	stw	r2,172(sp)
    4dc8:	008000b4 	movhi	r2,2
    4dcc:	10b22304 	addi	r2,r2,-14196
    4dd0:	d8803115 	stw	r2,196(sp)
    4dd4:	dcc02d15 	stw	r19,180(sp)
    4dd8:	d8003215 	stw	zero,200(sp)
    4ddc:	d8003415 	stw	zero,208(sp)
    4de0:	0005883a 	mov	r2,zero
    4de4:	003a6306 	br	3774 <__alt_mem_Flash_flash_data+0xf4003774>
    4de8:	0021883a 	mov	r16,zero
    4dec:	003e1f06 	br	466c <__alt_mem_Flash_flash_data+0xf400466c>
    4df0:	b009883a 	mov	r4,r22
    4df4:	b80b883a 	mov	r5,r23
    4df8:	d9801e04 	addi	r6,sp,120
    4dfc:	000a4d40 	call	a4d4 <__sprint_r>
    4e00:	1039f61e 	bne	r2,zero,35dc <__alt_mem_Flash_flash_data+0xf40035dc>
    4e04:	d8802617 	ldw	r2,152(sp)
    4e08:	db003317 	ldw	r12,204(sp)
    4e0c:	d8c02017 	ldw	r3,128(sp)
    4e10:	da000404 	addi	r8,sp,16
    4e14:	6085c83a 	sub	r2,r12,r2
    4e18:	003e1306 	br	4668 <__alt_mem_Flash_flash_data+0xf4004668>
    4e1c:	030000b4 	movhi	r12,2
    4e20:	63322984 	addi	r12,r12,-14170
    4e24:	db003615 	stw	r12,216(sp)
    4e28:	003b0206 	br	3a34 <__alt_mem_Flash_flash_data+0xf4003a34>
    4e2c:	00c00b44 	movi	r3,45
    4e30:	d8802b15 	stw	r2,172(sp)
    4e34:	dc402d17 	ldw	r17,180(sp)
    4e38:	d8c02785 	stb	r3,158(sp)
    4e3c:	dcc02d15 	stw	r19,180(sp)
    4e40:	d8003215 	stw	zero,200(sp)
    4e44:	00800b44 	movi	r2,45
    4e48:	003a4706 	br	3768 <__alt_mem_Flash_flash_data+0xf4003768>
    4e4c:	05400b44 	movi	r21,45
    4e50:	dd402785 	stb	r21,158(sp)
    4e54:	003b4706 	br	3b74 <__alt_mem_Flash_flash_data+0xf4003b74>
    4e58:	008000b4 	movhi	r2,2
    4e5c:	10b21804 	addi	r2,r2,-14240
    4e60:	d8803115 	stw	r2,196(sp)
    4e64:	003f4106 	br	4b6c <__alt_mem_Flash_flash_data+0xf4004b6c>
    4e68:	d8c02617 	ldw	r3,152(sp)
    4e6c:	00bfff44 	movi	r2,-3
    4e70:	18801116 	blt	r3,r2,4eb8 <___vfprintf_internal_r+0x1cac>
    4e74:	48c01016 	blt	r9,r3,4eb8 <___vfprintf_internal_r+0x1cac>
    4e78:	d8c03415 	stw	r3,208(sp)
    4e7c:	040019c4 	movi	r16,103
    4e80:	003eb206 	br	494c <__alt_mem_Flash_flash_data+0xf400494c>
    4e84:	010000b4 	movhi	r4,2
    4e88:	21322584 	addi	r4,r4,-14186
    4e8c:	d9002c15 	stw	r4,176(sp)
    4e90:	003cb106 	br	4158 <__alt_mem_Flash_flash_data+0xf4004158>
    4e94:	5005883a 	mov	r2,r10
    4e98:	003ea106 	br	4920 <__alt_mem_Flash_flash_data+0xf4004920>
    4e9c:	da402b15 	stw	r9,172(sp)
    4ea0:	dd402783 	ldbu	r21,158(sp)
    4ea4:	4825883a 	mov	r18,r9
    4ea8:	dcc02d15 	stw	r19,180(sp)
    4eac:	d8003215 	stw	zero,200(sp)
    4eb0:	d8003415 	stw	zero,208(sp)
    4eb4:	003a2806 	br	3758 <__alt_mem_Flash_flash_data+0xf4003758>
    4eb8:	843fff84 	addi	r16,r16,-2
    4ebc:	1f3fffc4 	addi	fp,r3,-1
    4ec0:	df002615 	stw	fp,152(sp)
    4ec4:	dc0022c5 	stb	r16,139(sp)
    4ec8:	e0009816 	blt	fp,zero,512c <___vfprintf_internal_r+0x1f20>
    4ecc:	00800ac4 	movi	r2,43
    4ed0:	d8802305 	stb	r2,140(sp)
    4ed4:	00800244 	movi	r2,9
    4ed8:	1700750e 	bge	r2,fp,50b0 <___vfprintf_internal_r+0x1ea4>
    4edc:	dd4022c4 	addi	r21,sp,139
    4ee0:	dc002c15 	stw	r16,176(sp)
    4ee4:	4025883a 	mov	r18,r8
    4ee8:	a821883a 	mov	r16,r21
    4eec:	e009883a 	mov	r4,fp
    4ef0:	01400284 	movi	r5,10
    4ef4:	000cda40 	call	cda4 <__modsi3>
    4ef8:	10800c04 	addi	r2,r2,48
    4efc:	843fffc4 	addi	r16,r16,-1
    4f00:	e009883a 	mov	r4,fp
    4f04:	01400284 	movi	r5,10
    4f08:	80800005 	stb	r2,0(r16)
    4f0c:	000cd500 	call	cd50 <__divsi3>
    4f10:	1039883a 	mov	fp,r2
    4f14:	00800244 	movi	r2,9
    4f18:	173ff416 	blt	r2,fp,4eec <__alt_mem_Flash_flash_data+0xf4004eec>
    4f1c:	9011883a 	mov	r8,r18
    4f20:	e0800c04 	addi	r2,fp,48
    4f24:	8025883a 	mov	r18,r16
    4f28:	913fffc4 	addi	r4,r18,-1
    4f2c:	90bfffc5 	stb	r2,-1(r18)
    4f30:	dc002c17 	ldw	r16,176(sp)
    4f34:	2540852e 	bgeu	r4,r21,514c <___vfprintf_internal_r+0x1f40>
    4f38:	d9402384 	addi	r5,sp,142
    4f3c:	2c8bc83a 	sub	r5,r5,r18
    4f40:	d8c02344 	addi	r3,sp,141
    4f44:	a94b883a 	add	r5,r21,r5
    4f48:	00000106 	br	4f50 <___vfprintf_internal_r+0x1d44>
    4f4c:	20800003 	ldbu	r2,0(r4)
    4f50:	18800005 	stb	r2,0(r3)
    4f54:	18c00044 	addi	r3,r3,1
    4f58:	21000044 	addi	r4,r4,1
    4f5c:	197ffb1e 	bne	r3,r5,4f4c <__alt_mem_Flash_flash_data+0xf4004f4c>
    4f60:	d8802304 	addi	r2,sp,140
    4f64:	1485c83a 	sub	r2,r2,r18
    4f68:	d8c02344 	addi	r3,sp,141
    4f6c:	1885883a 	add	r2,r3,r2
    4f70:	dac03317 	ldw	r11,204(sp)
    4f74:	156bc83a 	sub	r21,r2,r21
    4f78:	dd403a15 	stw	r21,232(sp)
    4f7c:	00800044 	movi	r2,1
    4f80:	5d65883a 	add	r18,r11,r21
    4f84:	12c0660e 	bge	r2,r11,5120 <___vfprintf_internal_r+0x1f14>
    4f88:	94800044 	addi	r18,r18,1
    4f8c:	9005883a 	mov	r2,r18
    4f90:	90006116 	blt	r18,zero,5118 <___vfprintf_internal_r+0x1f0c>
    4f94:	d8003415 	stw	zero,208(sp)
    4f98:	003e7406 	br	496c <__alt_mem_Flash_flash_data+0xf400496c>
    4f9c:	b009883a 	mov	r4,r22
    4fa0:	b80b883a 	mov	r5,r23
    4fa4:	d9801e04 	addi	r6,sp,120
    4fa8:	000a4d40 	call	a4d4 <__sprint_r>
    4fac:	10398b1e 	bne	r2,zero,35dc <__alt_mem_Flash_flash_data+0xf40035dc>
    4fb0:	dc002617 	ldw	r16,152(sp)
    4fb4:	d8c02017 	ldw	r3,128(sp)
    4fb8:	d8801f17 	ldw	r2,124(sp)
    4fbc:	da000404 	addi	r8,sp,16
    4fc0:	003ec906 	br	4ae8 <__alt_mem_Flash_flash_data+0xf4004ae8>
    4fc4:	483e1c1e 	bne	r9,zero,4838 <__alt_mem_Flash_flash_data+0xf4004838>
    4fc8:	9013883a 	mov	r9,r18
    4fcc:	003e1a06 	br	4838 <__alt_mem_Flash_flash_data+0xf4004838>
    4fd0:	02400184 	movi	r9,6
    4fd4:	003e1806 	br	4838 <__alt_mem_Flash_flash_data+0xf4004838>
    4fd8:	d8c03417 	ldw	r3,208(sp)
    4fdc:	00c04b0e 	bge	zero,r3,510c <___vfprintf_internal_r+0x1f00>
    4fe0:	04800044 	movi	r18,1
    4fe4:	dac03317 	ldw	r11,204(sp)
    4fe8:	92e5883a 	add	r18,r18,r11
    4fec:	9005883a 	mov	r2,r18
    4ff0:	903e5e0e 	bge	r18,zero,496c <__alt_mem_Flash_flash_data+0xf400496c>
    4ff4:	0005883a 	mov	r2,zero
    4ff8:	003e5c06 	br	496c <__alt_mem_Flash_flash_data+0xf400496c>
    4ffc:	00c00b44 	movi	r3,45
    5000:	64a0003c 	xorhi	r18,r12,32768
    5004:	d8c02b05 	stb	r3,172(sp)
    5008:	003e1106 	br	4850 <__alt_mem_Flash_flash_data+0xf4004850>
    500c:	4f000044 	addi	fp,r9,1
    5010:	003e1606 	br	486c <__alt_mem_Flash_flash_data+0xf400486c>
    5014:	d8c02617 	ldw	r3,152(sp)
    5018:	d8c03415 	stw	r3,208(sp)
    501c:	00c0350e 	bge	zero,r3,50f4 <___vfprintf_internal_r+0x1ee8>
    5020:	4800081e 	bne	r9,zero,5044 <___vfprintf_internal_r+0x1e38>
    5024:	8c40004c 	andi	r17,r17,1
    5028:	8800061e 	bne	r17,zero,5044 <___vfprintf_internal_r+0x1e38>
    502c:	1805883a 	mov	r2,r3
    5030:	183e4d0e 	bge	r3,zero,4968 <__alt_mem_Flash_flash_data+0xf4004968>
    5034:	0005883a 	mov	r2,zero
    5038:	003e4b06 	br	4968 <__alt_mem_Flash_flash_data+0xf4004968>
    503c:	d8802117 	ldw	r2,132(sp)
    5040:	003e3706 	br	4920 <__alt_mem_Flash_flash_data+0xf4004920>
    5044:	dac03417 	ldw	r11,208(sp)
    5048:	4a400044 	addi	r9,r9,1
    504c:	5a65883a 	add	r18,r11,r9
    5050:	9005883a 	mov	r2,r18
    5054:	903e450e 	bge	r18,zero,496c <__alt_mem_Flash_flash_data+0xf400496c>
    5058:	003fe606 	br	4ff4 <__alt_mem_Flash_flash_data+0xf4004ff4>
    505c:	db003417 	ldw	r12,208(sp)
    5060:	64800044 	addi	r18,r12,1
    5064:	9005883a 	mov	r2,r18
    5068:	903e400e 	bge	r18,zero,496c <__alt_mem_Flash_flash_data+0xf400496c>
    506c:	003fe106 	br	4ff4 <__alt_mem_Flash_flash_data+0xf4004ff4>
    5070:	d9003717 	ldw	r4,220(sp)
    5074:	900b883a 	mov	r5,r18
    5078:	000d883a 	mov	r6,zero
    507c:	000f883a 	mov	r7,zero
    5080:	da003f15 	stw	r8,252(sp)
    5084:	da403e15 	stw	r9,248(sp)
    5088:	da803d15 	stw	r10,244(sp)
    508c:	000df780 	call	df78 <__eqdf2>
    5090:	da003f17 	ldw	r8,252(sp)
    5094:	da403e17 	ldw	r9,248(sp)
    5098:	da803d17 	ldw	r10,244(sp)
    509c:	103f1f26 	beq	r2,zero,4d1c <__alt_mem_Flash_flash_data+0xf4004d1c>
    50a0:	00800044 	movi	r2,1
    50a4:	1707c83a 	sub	r3,r2,fp
    50a8:	d8c02615 	stw	r3,152(sp)
    50ac:	003f1c06 	br	4d20 <__alt_mem_Flash_flash_data+0xf4004d20>
    50b0:	00800c04 	movi	r2,48
    50b4:	e0c00c04 	addi	r3,fp,48
    50b8:	d8802345 	stb	r2,141(sp)
    50bc:	d8c02385 	stb	r3,142(sp)
    50c0:	d88023c4 	addi	r2,sp,143
    50c4:	dd4022c4 	addi	r21,sp,139
    50c8:	003fa906 	br	4f70 <__alt_mem_Flash_flash_data+0xf4004f70>
    50cc:	0005883a 	mov	r2,zero
    50d0:	003f3c06 	br	4dc4 <__alt_mem_Flash_flash_data+0xf4004dc4>
    50d4:	dac02d17 	ldw	r11,180(sp)
    50d8:	5a400017 	ldw	r9,0(r11)
    50dc:	5ac00104 	addi	r11,r11,4
    50e0:	dac02d15 	stw	r11,180(sp)
    50e4:	483ec80e 	bge	r9,zero,4c08 <__alt_mem_Flash_flash_data+0xf4004c08>
    50e8:	027fffc4 	movi	r9,-1
    50ec:	1c000047 	ldb	r16,1(r3)
    50f0:	0038ab06 	br	33a0 <__alt_mem_Flash_flash_data+0xf40033a0>
    50f4:	4800111e 	bne	r9,zero,513c <___vfprintf_internal_r+0x1f30>
    50f8:	8c40004c 	andi	r17,r17,1
    50fc:	88000f1e 	bne	r17,zero,513c <___vfprintf_internal_r+0x1f30>
    5100:	00800044 	movi	r2,1
    5104:	1025883a 	mov	r18,r2
    5108:	003e1806 	br	496c <__alt_mem_Flash_flash_data+0xf400496c>
    510c:	04800084 	movi	r18,2
    5110:	90e5c83a 	sub	r18,r18,r3
    5114:	003fb306 	br	4fe4 <__alt_mem_Flash_flash_data+0xf4004fe4>
    5118:	0005883a 	mov	r2,zero
    511c:	003f9d06 	br	4f94 <__alt_mem_Flash_flash_data+0xf4004f94>
    5120:	88a2703a 	and	r17,r17,r2
    5124:	883f9926 	beq	r17,zero,4f8c <__alt_mem_Flash_flash_data+0xf4004f8c>
    5128:	003f9706 	br	4f88 <__alt_mem_Flash_flash_data+0xf4004f88>
    512c:	00800b44 	movi	r2,45
    5130:	0739c83a 	sub	fp,zero,fp
    5134:	d8802305 	stb	r2,140(sp)
    5138:	003f6606 	br	4ed4 <__alt_mem_Flash_flash_data+0xf4004ed4>
    513c:	4c800084 	addi	r18,r9,2
    5140:	9005883a 	mov	r2,r18
    5144:	903e090e 	bge	r18,zero,496c <__alt_mem_Flash_flash_data+0xf400496c>
    5148:	003faa06 	br	4ff4 <__alt_mem_Flash_flash_data+0xf4004ff4>
    514c:	d8802344 	addi	r2,sp,141
    5150:	003f8706 	br	4f70 <__alt_mem_Flash_flash_data+0xf4004f70>
    5154:	d8c02617 	ldw	r3,152(sp)
    5158:	003f5806 	br	4ebc <__alt_mem_Flash_flash_data+0xf4004ebc>

0000515c <__vfprintf_internal>:
    515c:	2007883a 	mov	r3,r4
    5160:	010000b4 	movhi	r4,2
    5164:	213b2904 	addi	r4,r4,-4956
    5168:	21000017 	ldw	r4,0(r4)
    516c:	2805883a 	mov	r2,r5
    5170:	300f883a 	mov	r7,r6
    5174:	180b883a 	mov	r5,r3
    5178:	100d883a 	mov	r6,r2
    517c:	000320c1 	jmpi	320c <___vfprintf_internal_r>

00005180 <__sbprintf>:
    5180:	2880030b 	ldhu	r2,12(r5)
    5184:	2ac01917 	ldw	r11,100(r5)
    5188:	2a80038b 	ldhu	r10,14(r5)
    518c:	2a400717 	ldw	r9,28(r5)
    5190:	2a000917 	ldw	r8,36(r5)
    5194:	defee204 	addi	sp,sp,-1144
    5198:	00c10004 	movi	r3,1024
    519c:	dc011a15 	stw	r16,1128(sp)
    51a0:	10bfff4c 	andi	r2,r2,65533
    51a4:	2821883a 	mov	r16,r5
    51a8:	d8cb883a 	add	r5,sp,r3
    51ac:	dc811c15 	stw	r18,1136(sp)
    51b0:	dc411b15 	stw	r17,1132(sp)
    51b4:	dfc11d15 	stw	ra,1140(sp)
    51b8:	2025883a 	mov	r18,r4
    51bc:	d881030d 	sth	r2,1036(sp)
    51c0:	dac11915 	stw	r11,1124(sp)
    51c4:	da81038d 	sth	r10,1038(sp)
    51c8:	da410715 	stw	r9,1052(sp)
    51cc:	da010915 	stw	r8,1060(sp)
    51d0:	dec10015 	stw	sp,1024(sp)
    51d4:	dec10415 	stw	sp,1040(sp)
    51d8:	d8c10215 	stw	r3,1032(sp)
    51dc:	d8c10515 	stw	r3,1044(sp)
    51e0:	d8010615 	stw	zero,1048(sp)
    51e4:	000320c0 	call	320c <___vfprintf_internal_r>
    51e8:	1023883a 	mov	r17,r2
    51ec:	10000416 	blt	r2,zero,5200 <__sbprintf+0x80>
    51f0:	9009883a 	mov	r4,r18
    51f4:	d9410004 	addi	r5,sp,1024
    51f8:	0006ec00 	call	6ec0 <_fflush_r>
    51fc:	10000d1e 	bne	r2,zero,5234 <__sbprintf+0xb4>
    5200:	d8c1030b 	ldhu	r3,1036(sp)
    5204:	18c0100c 	andi	r3,r3,64
    5208:	18000326 	beq	r3,zero,5218 <__sbprintf+0x98>
    520c:	8080030b 	ldhu	r2,12(r16)
    5210:	10801014 	ori	r2,r2,64
    5214:	8080030d 	sth	r2,12(r16)
    5218:	8805883a 	mov	r2,r17
    521c:	dfc11d17 	ldw	ra,1140(sp)
    5220:	dc811c17 	ldw	r18,1136(sp)
    5224:	dc411b17 	ldw	r17,1132(sp)
    5228:	dc011a17 	ldw	r16,1128(sp)
    522c:	dec11e04 	addi	sp,sp,1144
    5230:	f800283a 	ret
    5234:	047fffc4 	movi	r17,-1
    5238:	003ff106 	br	5200 <__alt_mem_Flash_flash_data+0xf4005200>

0000523c <__swsetup_r>:
    523c:	008000b4 	movhi	r2,2
    5240:	defffd04 	addi	sp,sp,-12
    5244:	10bb2904 	addi	r2,r2,-4956
    5248:	dc400115 	stw	r17,4(sp)
    524c:	2023883a 	mov	r17,r4
    5250:	11000017 	ldw	r4,0(r2)
    5254:	dc000015 	stw	r16,0(sp)
    5258:	dfc00215 	stw	ra,8(sp)
    525c:	2821883a 	mov	r16,r5
    5260:	20000226 	beq	r4,zero,526c <__swsetup_r+0x30>
    5264:	20c00e17 	ldw	r3,56(r4)
    5268:	18003126 	beq	r3,zero,5330 <__swsetup_r+0xf4>
    526c:	8080030b 	ldhu	r2,12(r16)
    5270:	10c0020c 	andi	r3,r2,8
    5274:	100d883a 	mov	r6,r2
    5278:	18000f26 	beq	r3,zero,52b8 <__swsetup_r+0x7c>
    527c:	80c00417 	ldw	r3,16(r16)
    5280:	18001526 	beq	r3,zero,52d8 <__swsetup_r+0x9c>
    5284:	1100004c 	andi	r4,r2,1
    5288:	20001c1e 	bne	r4,zero,52fc <__swsetup_r+0xc0>
    528c:	1080008c 	andi	r2,r2,2
    5290:	1000291e 	bne	r2,zero,5338 <__swsetup_r+0xfc>
    5294:	80800517 	ldw	r2,20(r16)
    5298:	80800215 	stw	r2,8(r16)
    529c:	18001c26 	beq	r3,zero,5310 <__swsetup_r+0xd4>
    52a0:	0005883a 	mov	r2,zero
    52a4:	dfc00217 	ldw	ra,8(sp)
    52a8:	dc400117 	ldw	r17,4(sp)
    52ac:	dc000017 	ldw	r16,0(sp)
    52b0:	dec00304 	addi	sp,sp,12
    52b4:	f800283a 	ret
    52b8:	3080040c 	andi	r2,r6,16
    52bc:	10002e26 	beq	r2,zero,5378 <__swsetup_r+0x13c>
    52c0:	3080010c 	andi	r2,r6,4
    52c4:	10001e1e 	bne	r2,zero,5340 <__swsetup_r+0x104>
    52c8:	80c00417 	ldw	r3,16(r16)
    52cc:	30800214 	ori	r2,r6,8
    52d0:	8080030d 	sth	r2,12(r16)
    52d4:	183feb1e 	bne	r3,zero,5284 <__alt_mem_Flash_flash_data+0xf4005284>
    52d8:	1140a00c 	andi	r5,r2,640
    52dc:	01008004 	movi	r4,512
    52e0:	293fe826 	beq	r5,r4,5284 <__alt_mem_Flash_flash_data+0xf4005284>
    52e4:	8809883a 	mov	r4,r17
    52e8:	800b883a 	mov	r5,r16
    52ec:	0007e280 	call	7e28 <__smakebuf_r>
    52f0:	8080030b 	ldhu	r2,12(r16)
    52f4:	80c00417 	ldw	r3,16(r16)
    52f8:	003fe206 	br	5284 <__alt_mem_Flash_flash_data+0xf4005284>
    52fc:	80800517 	ldw	r2,20(r16)
    5300:	80000215 	stw	zero,8(r16)
    5304:	0085c83a 	sub	r2,zero,r2
    5308:	80800615 	stw	r2,24(r16)
    530c:	183fe41e 	bne	r3,zero,52a0 <__alt_mem_Flash_flash_data+0xf40052a0>
    5310:	80c0030b 	ldhu	r3,12(r16)
    5314:	0005883a 	mov	r2,zero
    5318:	1900200c 	andi	r4,r3,128
    531c:	203fe126 	beq	r4,zero,52a4 <__alt_mem_Flash_flash_data+0xf40052a4>
    5320:	18c01014 	ori	r3,r3,64
    5324:	80c0030d 	sth	r3,12(r16)
    5328:	00bfffc4 	movi	r2,-1
    532c:	003fdd06 	br	52a4 <__alt_mem_Flash_flash_data+0xf40052a4>
    5330:	000729c0 	call	729c <__sinit>
    5334:	003fcd06 	br	526c <__alt_mem_Flash_flash_data+0xf400526c>
    5338:	0005883a 	mov	r2,zero
    533c:	003fd606 	br	5298 <__alt_mem_Flash_flash_data+0xf4005298>
    5340:	81400c17 	ldw	r5,48(r16)
    5344:	28000626 	beq	r5,zero,5360 <__swsetup_r+0x124>
    5348:	80801004 	addi	r2,r16,64
    534c:	28800326 	beq	r5,r2,535c <__swsetup_r+0x120>
    5350:	8809883a 	mov	r4,r17
    5354:	00074100 	call	7410 <_free_r>
    5358:	8180030b 	ldhu	r6,12(r16)
    535c:	80000c15 	stw	zero,48(r16)
    5360:	80c00417 	ldw	r3,16(r16)
    5364:	00bff6c4 	movi	r2,-37
    5368:	118c703a 	and	r6,r2,r6
    536c:	80000115 	stw	zero,4(r16)
    5370:	80c00015 	stw	r3,0(r16)
    5374:	003fd506 	br	52cc <__alt_mem_Flash_flash_data+0xf40052cc>
    5378:	00800244 	movi	r2,9
    537c:	88800015 	stw	r2,0(r17)
    5380:	30801014 	ori	r2,r6,64
    5384:	8080030d 	sth	r2,12(r16)
    5388:	00bfffc4 	movi	r2,-1
    538c:	003fc506 	br	52a4 <__alt_mem_Flash_flash_data+0xf40052a4>

00005390 <quorem>:
    5390:	defff704 	addi	sp,sp,-36
    5394:	dc800215 	stw	r18,8(sp)
    5398:	20800417 	ldw	r2,16(r4)
    539c:	2c800417 	ldw	r18,16(r5)
    53a0:	dfc00815 	stw	ra,32(sp)
    53a4:	ddc00715 	stw	r23,28(sp)
    53a8:	dd800615 	stw	r22,24(sp)
    53ac:	dd400515 	stw	r21,20(sp)
    53b0:	dd000415 	stw	r20,16(sp)
    53b4:	dcc00315 	stw	r19,12(sp)
    53b8:	dc400115 	stw	r17,4(sp)
    53bc:	dc000015 	stw	r16,0(sp)
    53c0:	14807116 	blt	r2,r18,5588 <quorem+0x1f8>
    53c4:	94bfffc4 	addi	r18,r18,-1
    53c8:	94ad883a 	add	r22,r18,r18
    53cc:	b5ad883a 	add	r22,r22,r22
    53d0:	2c400504 	addi	r17,r5,20
    53d4:	8da9883a 	add	r20,r17,r22
    53d8:	25400504 	addi	r21,r4,20
    53dc:	282f883a 	mov	r23,r5
    53e0:	adad883a 	add	r22,r21,r22
    53e4:	a1400017 	ldw	r5,0(r20)
    53e8:	2021883a 	mov	r16,r4
    53ec:	b1000017 	ldw	r4,0(r22)
    53f0:	29400044 	addi	r5,r5,1
    53f4:	000ce000 	call	ce00 <__udivsi3>
    53f8:	1027883a 	mov	r19,r2
    53fc:	10002c26 	beq	r2,zero,54b0 <quorem+0x120>
    5400:	a813883a 	mov	r9,r21
    5404:	8811883a 	mov	r8,r17
    5408:	0009883a 	mov	r4,zero
    540c:	000d883a 	mov	r6,zero
    5410:	41c00017 	ldw	r7,0(r8)
    5414:	49400017 	ldw	r5,0(r9)
    5418:	42000104 	addi	r8,r8,4
    541c:	38bfffcc 	andi	r2,r7,65535
    5420:	14c5383a 	mul	r2,r2,r19
    5424:	380ed43a 	srli	r7,r7,16
    5428:	28ffffcc 	andi	r3,r5,65535
    542c:	2085883a 	add	r2,r4,r2
    5430:	1008d43a 	srli	r4,r2,16
    5434:	3ccf383a 	mul	r7,r7,r19
    5438:	198d883a 	add	r6,r3,r6
    543c:	10ffffcc 	andi	r3,r2,65535
    5440:	30c7c83a 	sub	r3,r6,r3
    5444:	280ad43a 	srli	r5,r5,16
    5448:	21c9883a 	add	r4,r4,r7
    544c:	180dd43a 	srai	r6,r3,16
    5450:	20bfffcc 	andi	r2,r4,65535
    5454:	288bc83a 	sub	r5,r5,r2
    5458:	298b883a 	add	r5,r5,r6
    545c:	280e943a 	slli	r7,r5,16
    5460:	18ffffcc 	andi	r3,r3,65535
    5464:	2008d43a 	srli	r4,r4,16
    5468:	38ceb03a 	or	r7,r7,r3
    546c:	49c00015 	stw	r7,0(r9)
    5470:	280dd43a 	srai	r6,r5,16
    5474:	4a400104 	addi	r9,r9,4
    5478:	a23fe52e 	bgeu	r20,r8,5410 <__alt_mem_Flash_flash_data+0xf4005410>
    547c:	b0800017 	ldw	r2,0(r22)
    5480:	10000b1e 	bne	r2,zero,54b0 <quorem+0x120>
    5484:	b0bfff04 	addi	r2,r22,-4
    5488:	a880082e 	bgeu	r21,r2,54ac <quorem+0x11c>
    548c:	b0ffff17 	ldw	r3,-4(r22)
    5490:	18000326 	beq	r3,zero,54a0 <quorem+0x110>
    5494:	00000506 	br	54ac <quorem+0x11c>
    5498:	10c00017 	ldw	r3,0(r2)
    549c:	1800031e 	bne	r3,zero,54ac <quorem+0x11c>
    54a0:	10bfff04 	addi	r2,r2,-4
    54a4:	94bfffc4 	addi	r18,r18,-1
    54a8:	a8bffb36 	bltu	r21,r2,5498 <__alt_mem_Flash_flash_data+0xf4005498>
    54ac:	84800415 	stw	r18,16(r16)
    54b0:	8009883a 	mov	r4,r16
    54b4:	b80b883a 	mov	r5,r23
    54b8:	00094fc0 	call	94fc <__mcmp>
    54bc:	10002616 	blt	r2,zero,5558 <quorem+0x1c8>
    54c0:	9cc00044 	addi	r19,r19,1
    54c4:	a80d883a 	mov	r6,r21
    54c8:	000b883a 	mov	r5,zero
    54cc:	31000017 	ldw	r4,0(r6)
    54d0:	88800017 	ldw	r2,0(r17)
    54d4:	31800104 	addi	r6,r6,4
    54d8:	20ffffcc 	andi	r3,r4,65535
    54dc:	194b883a 	add	r5,r3,r5
    54e0:	10ffffcc 	andi	r3,r2,65535
    54e4:	28c7c83a 	sub	r3,r5,r3
    54e8:	1004d43a 	srli	r2,r2,16
    54ec:	2008d43a 	srli	r4,r4,16
    54f0:	180bd43a 	srai	r5,r3,16
    54f4:	18ffffcc 	andi	r3,r3,65535
    54f8:	2089c83a 	sub	r4,r4,r2
    54fc:	2149883a 	add	r4,r4,r5
    5500:	2004943a 	slli	r2,r4,16
    5504:	8c400104 	addi	r17,r17,4
    5508:	200bd43a 	srai	r5,r4,16
    550c:	10c6b03a 	or	r3,r2,r3
    5510:	30ffff15 	stw	r3,-4(r6)
    5514:	a47fed2e 	bgeu	r20,r17,54cc <__alt_mem_Flash_flash_data+0xf40054cc>
    5518:	9485883a 	add	r2,r18,r18
    551c:	1085883a 	add	r2,r2,r2
    5520:	a887883a 	add	r3,r21,r2
    5524:	18800017 	ldw	r2,0(r3)
    5528:	10000b1e 	bne	r2,zero,5558 <quorem+0x1c8>
    552c:	18bfff04 	addi	r2,r3,-4
    5530:	a880082e 	bgeu	r21,r2,5554 <quorem+0x1c4>
    5534:	18ffff17 	ldw	r3,-4(r3)
    5538:	18000326 	beq	r3,zero,5548 <quorem+0x1b8>
    553c:	00000506 	br	5554 <quorem+0x1c4>
    5540:	10c00017 	ldw	r3,0(r2)
    5544:	1800031e 	bne	r3,zero,5554 <quorem+0x1c4>
    5548:	10bfff04 	addi	r2,r2,-4
    554c:	94bfffc4 	addi	r18,r18,-1
    5550:	a8bffb36 	bltu	r21,r2,5540 <__alt_mem_Flash_flash_data+0xf4005540>
    5554:	84800415 	stw	r18,16(r16)
    5558:	9805883a 	mov	r2,r19
    555c:	dfc00817 	ldw	ra,32(sp)
    5560:	ddc00717 	ldw	r23,28(sp)
    5564:	dd800617 	ldw	r22,24(sp)
    5568:	dd400517 	ldw	r21,20(sp)
    556c:	dd000417 	ldw	r20,16(sp)
    5570:	dcc00317 	ldw	r19,12(sp)
    5574:	dc800217 	ldw	r18,8(sp)
    5578:	dc400117 	ldw	r17,4(sp)
    557c:	dc000017 	ldw	r16,0(sp)
    5580:	dec00904 	addi	sp,sp,36
    5584:	f800283a 	ret
    5588:	0005883a 	mov	r2,zero
    558c:	003ff306 	br	555c <__alt_mem_Flash_flash_data+0xf400555c>

00005590 <_dtoa_r>:
    5590:	20801017 	ldw	r2,64(r4)
    5594:	deffde04 	addi	sp,sp,-136
    5598:	dd401d15 	stw	r21,116(sp)
    559c:	dcc01b15 	stw	r19,108(sp)
    55a0:	dc801a15 	stw	r18,104(sp)
    55a4:	dc401915 	stw	r17,100(sp)
    55a8:	dc001815 	stw	r16,96(sp)
    55ac:	dfc02115 	stw	ra,132(sp)
    55b0:	df002015 	stw	fp,128(sp)
    55b4:	ddc01f15 	stw	r23,124(sp)
    55b8:	dd801e15 	stw	r22,120(sp)
    55bc:	dd001c15 	stw	r20,112(sp)
    55c0:	d9c00315 	stw	r7,12(sp)
    55c4:	2021883a 	mov	r16,r4
    55c8:	302b883a 	mov	r21,r6
    55cc:	2825883a 	mov	r18,r5
    55d0:	dc402417 	ldw	r17,144(sp)
    55d4:	3027883a 	mov	r19,r6
    55d8:	10000826 	beq	r2,zero,55fc <_dtoa_r+0x6c>
    55dc:	21801117 	ldw	r6,68(r4)
    55e0:	00c00044 	movi	r3,1
    55e4:	100b883a 	mov	r5,r2
    55e8:	1986983a 	sll	r3,r3,r6
    55ec:	11800115 	stw	r6,4(r2)
    55f0:	10c00215 	stw	r3,8(r2)
    55f4:	0008cd00 	call	8cd0 <_Bfree>
    55f8:	80001015 	stw	zero,64(r16)
    55fc:	a8002d16 	blt	r21,zero,56b4 <_dtoa_r+0x124>
    5600:	88000015 	stw	zero,0(r17)
    5604:	a8dffc2c 	andhi	r3,r21,32752
    5608:	009ffc34 	movhi	r2,32752
    560c:	18801b26 	beq	r3,r2,567c <_dtoa_r+0xec>
    5610:	9009883a 	mov	r4,r18
    5614:	980b883a 	mov	r5,r19
    5618:	000d883a 	mov	r6,zero
    561c:	000f883a 	mov	r7,zero
    5620:	000df780 	call	df78 <__eqdf2>
    5624:	10002a1e 	bne	r2,zero,56d0 <_dtoa_r+0x140>
    5628:	d8c02317 	ldw	r3,140(sp)
    562c:	d9002517 	ldw	r4,148(sp)
    5630:	00800044 	movi	r2,1
    5634:	18800015 	stw	r2,0(r3)
    5638:	2001a226 	beq	r4,zero,5cc4 <_dtoa_r+0x734>
    563c:	008000b4 	movhi	r2,2
    5640:	10b22544 	addi	r2,r2,-14187
    5644:	20800015 	stw	r2,0(r4)
    5648:	10bfffc4 	addi	r2,r2,-1
    564c:	dfc02117 	ldw	ra,132(sp)
    5650:	df002017 	ldw	fp,128(sp)
    5654:	ddc01f17 	ldw	r23,124(sp)
    5658:	dd801e17 	ldw	r22,120(sp)
    565c:	dd401d17 	ldw	r21,116(sp)
    5660:	dd001c17 	ldw	r20,112(sp)
    5664:	dcc01b17 	ldw	r19,108(sp)
    5668:	dc801a17 	ldw	r18,104(sp)
    566c:	dc401917 	ldw	r17,100(sp)
    5670:	dc001817 	ldw	r16,96(sp)
    5674:	dec02204 	addi	sp,sp,136
    5678:	f800283a 	ret
    567c:	d8c02317 	ldw	r3,140(sp)
    5680:	0089c3c4 	movi	r2,9999
    5684:	18800015 	stw	r2,0(r3)
    5688:	90017c26 	beq	r18,zero,5c7c <_dtoa_r+0x6ec>
    568c:	008000b4 	movhi	r2,2
    5690:	10b23104 	addi	r2,r2,-14140
    5694:	d9002517 	ldw	r4,148(sp)
    5698:	203fec26 	beq	r4,zero,564c <__alt_mem_Flash_flash_data+0xf400564c>
    569c:	10c000c7 	ldb	r3,3(r2)
    56a0:	18017d1e 	bne	r3,zero,5c98 <_dtoa_r+0x708>
    56a4:	10c000c4 	addi	r3,r2,3
    56a8:	d9802517 	ldw	r6,148(sp)
    56ac:	30c00015 	stw	r3,0(r6)
    56b0:	003fe606 	br	564c <__alt_mem_Flash_flash_data+0xf400564c>
    56b4:	04e00034 	movhi	r19,32768
    56b8:	9cffffc4 	addi	r19,r19,-1
    56bc:	00800044 	movi	r2,1
    56c0:	ace6703a 	and	r19,r21,r19
    56c4:	88800015 	stw	r2,0(r17)
    56c8:	982b883a 	mov	r21,r19
    56cc:	003fcd06 	br	5604 <__alt_mem_Flash_flash_data+0xf4005604>
    56d0:	d8800204 	addi	r2,sp,8
    56d4:	a822d53a 	srli	r17,r21,20
    56d8:	d8800015 	stw	r2,0(sp)
    56dc:	8009883a 	mov	r4,r16
    56e0:	900b883a 	mov	r5,r18
    56e4:	980d883a 	mov	r6,r19
    56e8:	d9c00104 	addi	r7,sp,4
    56ec:	00098700 	call	9870 <__d2b>
    56f0:	1039883a 	mov	fp,r2
    56f4:	88016a1e 	bne	r17,zero,5ca0 <_dtoa_r+0x710>
    56f8:	dd000217 	ldw	r20,8(sp)
    56fc:	dc400117 	ldw	r17,4(sp)
    5700:	00befbc4 	movi	r2,-1041
    5704:	a463883a 	add	r17,r20,r17
    5708:	8882ea16 	blt	r17,r2,62b4 <_dtoa_r+0xd24>
    570c:	00bf0384 	movi	r2,-1010
    5710:	1445c83a 	sub	r2,r2,r17
    5714:	89010484 	addi	r4,r17,1042
    5718:	a8aa983a 	sll	r21,r21,r2
    571c:	9108d83a 	srl	r4,r18,r4
    5720:	a908b03a 	or	r4,r21,r4
    5724:	000f3080 	call	f308 <__floatunsidf>
    5728:	017f8434 	movhi	r5,65040
    572c:	01800044 	movi	r6,1
    5730:	1009883a 	mov	r4,r2
    5734:	194b883a 	add	r5,r3,r5
    5738:	8c7fffc4 	addi	r17,r17,-1
    573c:	d9800f15 	stw	r6,60(sp)
    5740:	000d883a 	mov	r6,zero
    5744:	01cffe34 	movhi	r7,16376
    5748:	000e8e00 	call	e8e0 <__subdf3>
    574c:	0198dbf4 	movhi	r6,25455
    5750:	01cff4f4 	movhi	r7,16339
    5754:	1009883a 	mov	r4,r2
    5758:	180b883a 	mov	r5,r3
    575c:	3190d844 	addi	r6,r6,17249
    5760:	39e1e9c4 	addi	r7,r7,-30809
    5764:	000e1bc0 	call	e1bc <__muldf3>
    5768:	01a2d874 	movhi	r6,35681
    576c:	01cff1f4 	movhi	r7,16327
    5770:	180b883a 	mov	r5,r3
    5774:	31b22cc4 	addi	r6,r6,-14157
    5778:	39e28a04 	addi	r7,r7,-30168
    577c:	1009883a 	mov	r4,r2
    5780:	000ce100 	call	ce10 <__adddf3>
    5784:	8809883a 	mov	r4,r17
    5788:	102d883a 	mov	r22,r2
    578c:	182b883a 	mov	r21,r3
    5790:	000f2380 	call	f238 <__floatsidf>
    5794:	019427f4 	movhi	r6,20639
    5798:	01cff4f4 	movhi	r7,16339
    579c:	1009883a 	mov	r4,r2
    57a0:	180b883a 	mov	r5,r3
    57a4:	319e7ec4 	addi	r6,r6,31227
    57a8:	39d104c4 	addi	r7,r7,17427
    57ac:	000e1bc0 	call	e1bc <__muldf3>
    57b0:	b009883a 	mov	r4,r22
    57b4:	a80b883a 	mov	r5,r21
    57b8:	100d883a 	mov	r6,r2
    57bc:	180f883a 	mov	r7,r3
    57c0:	000ce100 	call	ce10 <__adddf3>
    57c4:	1009883a 	mov	r4,r2
    57c8:	180b883a 	mov	r5,r3
    57cc:	102d883a 	mov	r22,r2
    57d0:	182b883a 	mov	r21,r3
    57d4:	000f1b00 	call	f1b0 <__fixdfsi>
    57d8:	b009883a 	mov	r4,r22
    57dc:	a80b883a 	mov	r5,r21
    57e0:	000d883a 	mov	r6,zero
    57e4:	000f883a 	mov	r7,zero
    57e8:	d8800515 	stw	r2,20(sp)
    57ec:	000e0dc0 	call	e0dc <__ledf2>
    57f0:	10023116 	blt	r2,zero,60b8 <_dtoa_r+0xb28>
    57f4:	d8c00517 	ldw	r3,20(sp)
    57f8:	00800584 	movi	r2,22
    57fc:	10c21f36 	bltu	r2,r3,607c <_dtoa_r+0xaec>
    5800:	180490fa 	slli	r2,r3,3
    5804:	00c000b4 	movhi	r3,2
    5808:	18f24d04 	addi	r3,r3,-14028
    580c:	1885883a 	add	r2,r3,r2
    5810:	11000017 	ldw	r4,0(r2)
    5814:	11400117 	ldw	r5,4(r2)
    5818:	900d883a 	mov	r6,r18
    581c:	980f883a 	mov	r7,r19
    5820:	000dffc0 	call	dffc <__gedf2>
    5824:	0082a70e 	bge	zero,r2,62c4 <_dtoa_r+0xd34>
    5828:	d9000517 	ldw	r4,20(sp)
    582c:	d8000d15 	stw	zero,52(sp)
    5830:	213fffc4 	addi	r4,r4,-1
    5834:	d9000515 	stw	r4,20(sp)
    5838:	a463c83a 	sub	r17,r20,r17
    583c:	8dbfffc4 	addi	r22,r17,-1
    5840:	b0021916 	blt	r22,zero,60a8 <_dtoa_r+0xb18>
    5844:	d8000815 	stw	zero,32(sp)
    5848:	d8800517 	ldw	r2,20(sp)
    584c:	10020e16 	blt	r2,zero,6088 <_dtoa_r+0xaf8>
    5850:	b0ad883a 	add	r22,r22,r2
    5854:	d8800a15 	stw	r2,40(sp)
    5858:	d8000915 	stw	zero,36(sp)
    585c:	d8c00317 	ldw	r3,12(sp)
    5860:	00800244 	movi	r2,9
    5864:	10c11a36 	bltu	r2,r3,5cd0 <_dtoa_r+0x740>
    5868:	00800144 	movi	r2,5
    586c:	10c4fc0e 	bge	r2,r3,6c60 <_dtoa_r+0x16d0>
    5870:	18ffff04 	addi	r3,r3,-4
    5874:	d8c00315 	stw	r3,12(sp)
    5878:	0029883a 	mov	r20,zero
    587c:	d9800317 	ldw	r6,12(sp)
    5880:	008000c4 	movi	r2,3
    5884:	3083bd26 	beq	r6,r2,677c <_dtoa_r+0x11ec>
    5888:	1183670e 	bge	r2,r6,6628 <_dtoa_r+0x1098>
    588c:	d8c00317 	ldw	r3,12(sp)
    5890:	00800104 	movi	r2,4
    5894:	1882e726 	beq	r3,r2,6434 <_dtoa_r+0xea4>
    5898:	00800144 	movi	r2,5
    589c:	1884f21e 	bne	r3,r2,6c68 <_dtoa_r+0x16d8>
    58a0:	00800044 	movi	r2,1
    58a4:	d8800b15 	stw	r2,44(sp)
    58a8:	d8c02217 	ldw	r3,136(sp)
    58ac:	d9000517 	ldw	r4,20(sp)
    58b0:	1907883a 	add	r3,r3,r4
    58b4:	19800044 	addi	r6,r3,1
    58b8:	d8c00c15 	stw	r3,48(sp)
    58bc:	d9800615 	stw	r6,24(sp)
    58c0:	0183c30e 	bge	zero,r6,67d0 <_dtoa_r+0x1240>
    58c4:	d9800617 	ldw	r6,24(sp)
    58c8:	3023883a 	mov	r17,r6
    58cc:	80001115 	stw	zero,68(r16)
    58d0:	008005c4 	movi	r2,23
    58d4:	1184f62e 	bgeu	r2,r6,6cb0 <_dtoa_r+0x1720>
    58d8:	00c00044 	movi	r3,1
    58dc:	00800104 	movi	r2,4
    58e0:	1085883a 	add	r2,r2,r2
    58e4:	11000504 	addi	r4,r2,20
    58e8:	180b883a 	mov	r5,r3
    58ec:	18c00044 	addi	r3,r3,1
    58f0:	313ffb2e 	bgeu	r6,r4,58e0 <__alt_mem_Flash_flash_data+0xf40058e0>
    58f4:	81401115 	stw	r5,68(r16)
    58f8:	8009883a 	mov	r4,r16
    58fc:	0008c280 	call	8c28 <_Balloc>
    5900:	d8800715 	stw	r2,28(sp)
    5904:	80801015 	stw	r2,64(r16)
    5908:	00800384 	movi	r2,14
    590c:	1440fd36 	bltu	r2,r17,5d04 <_dtoa_r+0x774>
    5910:	a000fc26 	beq	r20,zero,5d04 <_dtoa_r+0x774>
    5914:	d8800517 	ldw	r2,20(sp)
    5918:	0083b90e 	bge	zero,r2,6800 <_dtoa_r+0x1270>
    591c:	d8c00517 	ldw	r3,20(sp)
    5920:	108003cc 	andi	r2,r2,15
    5924:	100490fa 	slli	r2,r2,3
    5928:	182fd13a 	srai	r23,r3,4
    592c:	00c000b4 	movhi	r3,2
    5930:	18f24d04 	addi	r3,r3,-14028
    5934:	1885883a 	add	r2,r3,r2
    5938:	b8c0040c 	andi	r3,r23,16
    593c:	12c00017 	ldw	r11,0(r2)
    5940:	12800117 	ldw	r10,4(r2)
    5944:	18039726 	beq	r3,zero,67a4 <_dtoa_r+0x1214>
    5948:	008000b4 	movhi	r2,2
    594c:	10b24304 	addi	r2,r2,-14068
    5950:	11800817 	ldw	r6,32(r2)
    5954:	11c00917 	ldw	r7,36(r2)
    5958:	9009883a 	mov	r4,r18
    595c:	980b883a 	mov	r5,r19
    5960:	da801615 	stw	r10,88(sp)
    5964:	dac01515 	stw	r11,84(sp)
    5968:	000d6ac0 	call	d6ac <__divdf3>
    596c:	da801617 	ldw	r10,88(sp)
    5970:	dac01517 	ldw	r11,84(sp)
    5974:	bdc003cc 	andi	r23,r23,15
    5978:	044000c4 	movi	r17,3
    597c:	d8800e15 	stw	r2,56(sp)
    5980:	182b883a 	mov	r21,r3
    5984:	b8001126 	beq	r23,zero,59cc <_dtoa_r+0x43c>
    5988:	050000b4 	movhi	r20,2
    598c:	a5324304 	addi	r20,r20,-14068
    5990:	5805883a 	mov	r2,r11
    5994:	5007883a 	mov	r3,r10
    5998:	b980004c 	andi	r6,r23,1
    599c:	1009883a 	mov	r4,r2
    59a0:	b82fd07a 	srai	r23,r23,1
    59a4:	180b883a 	mov	r5,r3
    59a8:	30000426 	beq	r6,zero,59bc <_dtoa_r+0x42c>
    59ac:	a1800017 	ldw	r6,0(r20)
    59b0:	a1c00117 	ldw	r7,4(r20)
    59b4:	8c400044 	addi	r17,r17,1
    59b8:	000e1bc0 	call	e1bc <__muldf3>
    59bc:	a5000204 	addi	r20,r20,8
    59c0:	b83ff51e 	bne	r23,zero,5998 <__alt_mem_Flash_flash_data+0xf4005998>
    59c4:	1017883a 	mov	r11,r2
    59c8:	1815883a 	mov	r10,r3
    59cc:	d9000e17 	ldw	r4,56(sp)
    59d0:	a80b883a 	mov	r5,r21
    59d4:	580d883a 	mov	r6,r11
    59d8:	500f883a 	mov	r7,r10
    59dc:	000d6ac0 	call	d6ac <__divdf3>
    59e0:	1029883a 	mov	r20,r2
    59e4:	182b883a 	mov	r21,r3
    59e8:	d9800d17 	ldw	r6,52(sp)
    59ec:	30000626 	beq	r6,zero,5a08 <_dtoa_r+0x478>
    59f0:	a009883a 	mov	r4,r20
    59f4:	a80b883a 	mov	r5,r21
    59f8:	000d883a 	mov	r6,zero
    59fc:	01cffc34 	movhi	r7,16368
    5a00:	000e0dc0 	call	e0dc <__ledf2>
    5a04:	10043216 	blt	r2,zero,6ad0 <_dtoa_r+0x1540>
    5a08:	8809883a 	mov	r4,r17
    5a0c:	000f2380 	call	f238 <__floatsidf>
    5a10:	1009883a 	mov	r4,r2
    5a14:	180b883a 	mov	r5,r3
    5a18:	a00d883a 	mov	r6,r20
    5a1c:	a80f883a 	mov	r7,r21
    5a20:	000e1bc0 	call	e1bc <__muldf3>
    5a24:	000d883a 	mov	r6,zero
    5a28:	1009883a 	mov	r4,r2
    5a2c:	180b883a 	mov	r5,r3
    5a30:	01d00734 	movhi	r7,16412
    5a34:	000ce100 	call	ce10 <__adddf3>
    5a38:	1023883a 	mov	r17,r2
    5a3c:	d9800617 	ldw	r6,24(sp)
    5a40:	00bf3034 	movhi	r2,64704
    5a44:	1885883a 	add	r2,r3,r2
    5a48:	d8800e15 	stw	r2,56(sp)
    5a4c:	30032e26 	beq	r6,zero,6708 <_dtoa_r+0x1178>
    5a50:	d8c00517 	ldw	r3,20(sp)
    5a54:	da800617 	ldw	r10,24(sp)
    5a58:	d8c01215 	stw	r3,72(sp)
    5a5c:	d9000b17 	ldw	r4,44(sp)
    5a60:	2003b026 	beq	r4,zero,6924 <_dtoa_r+0x1394>
    5a64:	50bfffc4 	addi	r2,r10,-1
    5a68:	100490fa 	slli	r2,r2,3
    5a6c:	00c000b4 	movhi	r3,2
    5a70:	18f24d04 	addi	r3,r3,-14028
    5a74:	1885883a 	add	r2,r3,r2
    5a78:	11800017 	ldw	r6,0(r2)
    5a7c:	11c00117 	ldw	r7,4(r2)
    5a80:	d8800717 	ldw	r2,28(sp)
    5a84:	0009883a 	mov	r4,zero
    5a88:	014ff834 	movhi	r5,16352
    5a8c:	da801615 	stw	r10,88(sp)
    5a90:	15c00044 	addi	r23,r2,1
    5a94:	000d6ac0 	call	d6ac <__divdf3>
    5a98:	d9c00e17 	ldw	r7,56(sp)
    5a9c:	880d883a 	mov	r6,r17
    5aa0:	1009883a 	mov	r4,r2
    5aa4:	180b883a 	mov	r5,r3
    5aa8:	000e8e00 	call	e8e0 <__subdf3>
    5aac:	a80b883a 	mov	r5,r21
    5ab0:	a009883a 	mov	r4,r20
    5ab4:	d8c01015 	stw	r3,64(sp)
    5ab8:	d8800e15 	stw	r2,56(sp)
    5abc:	000f1b00 	call	f1b0 <__fixdfsi>
    5ac0:	1009883a 	mov	r4,r2
    5ac4:	d8801715 	stw	r2,92(sp)
    5ac8:	000f2380 	call	f238 <__floatsidf>
    5acc:	a009883a 	mov	r4,r20
    5ad0:	a80b883a 	mov	r5,r21
    5ad4:	100d883a 	mov	r6,r2
    5ad8:	180f883a 	mov	r7,r3
    5adc:	000e8e00 	call	e8e0 <__subdf3>
    5ae0:	da001717 	ldw	r8,92(sp)
    5ae4:	1829883a 	mov	r20,r3
    5ae8:	d8c00717 	ldw	r3,28(sp)
    5aec:	d9000e17 	ldw	r4,56(sp)
    5af0:	d9401017 	ldw	r5,64(sp)
    5af4:	42000c04 	addi	r8,r8,48
    5af8:	1023883a 	mov	r17,r2
    5afc:	1a000005 	stb	r8,0(r3)
    5b00:	880d883a 	mov	r6,r17
    5b04:	a00f883a 	mov	r7,r20
    5b08:	402b883a 	mov	r21,r8
    5b0c:	000dffc0 	call	dffc <__gedf2>
    5b10:	00844516 	blt	zero,r2,6c28 <_dtoa_r+0x1698>
    5b14:	0009883a 	mov	r4,zero
    5b18:	014ffc34 	movhi	r5,16368
    5b1c:	880d883a 	mov	r6,r17
    5b20:	a00f883a 	mov	r7,r20
    5b24:	000e8e00 	call	e8e0 <__subdf3>
    5b28:	d9000e17 	ldw	r4,56(sp)
    5b2c:	d9401017 	ldw	r5,64(sp)
    5b30:	100d883a 	mov	r6,r2
    5b34:	180f883a 	mov	r7,r3
    5b38:	000dffc0 	call	dffc <__gedf2>
    5b3c:	da801617 	ldw	r10,88(sp)
    5b40:	00843616 	blt	zero,r2,6c1c <_dtoa_r+0x168c>
    5b44:	00800044 	movi	r2,1
    5b48:	12806e0e 	bge	r2,r10,5d04 <_dtoa_r+0x774>
    5b4c:	d9000717 	ldw	r4,28(sp)
    5b50:	dd801315 	stw	r22,76(sp)
    5b54:	dc001115 	stw	r16,68(sp)
    5b58:	2295883a 	add	r10,r4,r10
    5b5c:	dcc01415 	stw	r19,80(sp)
    5b60:	502d883a 	mov	r22,r10
    5b64:	dcc01017 	ldw	r19,64(sp)
    5b68:	b821883a 	mov	r16,r23
    5b6c:	dc801015 	stw	r18,64(sp)
    5b70:	dc800e17 	ldw	r18,56(sp)
    5b74:	00000906 	br	5b9c <_dtoa_r+0x60c>
    5b78:	000e8e00 	call	e8e0 <__subdf3>
    5b7c:	1009883a 	mov	r4,r2
    5b80:	180b883a 	mov	r5,r3
    5b84:	900d883a 	mov	r6,r18
    5b88:	980f883a 	mov	r7,r19
    5b8c:	000e0dc0 	call	e0dc <__ledf2>
    5b90:	10040e16 	blt	r2,zero,6bcc <_dtoa_r+0x163c>
    5b94:	b821883a 	mov	r16,r23
    5b98:	bd841026 	beq	r23,r22,6bdc <_dtoa_r+0x164c>
    5b9c:	9009883a 	mov	r4,r18
    5ba0:	980b883a 	mov	r5,r19
    5ba4:	000d883a 	mov	r6,zero
    5ba8:	01d00934 	movhi	r7,16420
    5bac:	000e1bc0 	call	e1bc <__muldf3>
    5bb0:	000d883a 	mov	r6,zero
    5bb4:	01d00934 	movhi	r7,16420
    5bb8:	8809883a 	mov	r4,r17
    5bbc:	a00b883a 	mov	r5,r20
    5bc0:	1025883a 	mov	r18,r2
    5bc4:	1827883a 	mov	r19,r3
    5bc8:	000e1bc0 	call	e1bc <__muldf3>
    5bcc:	180b883a 	mov	r5,r3
    5bd0:	1009883a 	mov	r4,r2
    5bd4:	1823883a 	mov	r17,r3
    5bd8:	1029883a 	mov	r20,r2
    5bdc:	000f1b00 	call	f1b0 <__fixdfsi>
    5be0:	1009883a 	mov	r4,r2
    5be4:	102b883a 	mov	r21,r2
    5be8:	000f2380 	call	f238 <__floatsidf>
    5bec:	a009883a 	mov	r4,r20
    5bf0:	880b883a 	mov	r5,r17
    5bf4:	100d883a 	mov	r6,r2
    5bf8:	180f883a 	mov	r7,r3
    5bfc:	000e8e00 	call	e8e0 <__subdf3>
    5c00:	ad400c04 	addi	r21,r21,48
    5c04:	1009883a 	mov	r4,r2
    5c08:	180b883a 	mov	r5,r3
    5c0c:	900d883a 	mov	r6,r18
    5c10:	980f883a 	mov	r7,r19
    5c14:	85400005 	stb	r21,0(r16)
    5c18:	1023883a 	mov	r17,r2
    5c1c:	1829883a 	mov	r20,r3
    5c20:	000e0dc0 	call	e0dc <__ledf2>
    5c24:	bdc00044 	addi	r23,r23,1
    5c28:	0009883a 	mov	r4,zero
    5c2c:	014ffc34 	movhi	r5,16368
    5c30:	880d883a 	mov	r6,r17
    5c34:	a00f883a 	mov	r7,r20
    5c38:	103fcf0e 	bge	r2,zero,5b78 <__alt_mem_Flash_flash_data+0xf4005b78>
    5c3c:	d9801217 	ldw	r6,72(sp)
    5c40:	dc001117 	ldw	r16,68(sp)
    5c44:	d9800515 	stw	r6,20(sp)
    5c48:	8009883a 	mov	r4,r16
    5c4c:	e00b883a 	mov	r5,fp
    5c50:	0008cd00 	call	8cd0 <_Bfree>
    5c54:	d8c00517 	ldw	r3,20(sp)
    5c58:	d9002317 	ldw	r4,140(sp)
    5c5c:	d9802517 	ldw	r6,148(sp)
    5c60:	b8000005 	stb	zero,0(r23)
    5c64:	18800044 	addi	r2,r3,1
    5c68:	20800015 	stw	r2,0(r4)
    5c6c:	30027226 	beq	r6,zero,6638 <_dtoa_r+0x10a8>
    5c70:	35c00015 	stw	r23,0(r6)
    5c74:	d8800717 	ldw	r2,28(sp)
    5c78:	003e7406 	br	564c <__alt_mem_Flash_flash_data+0xf400564c>
    5c7c:	00800434 	movhi	r2,16
    5c80:	10bfffc4 	addi	r2,r2,-1
    5c84:	a8aa703a 	and	r21,r21,r2
    5c88:	a83e801e 	bne	r21,zero,568c <__alt_mem_Flash_flash_data+0xf400568c>
    5c8c:	008000b4 	movhi	r2,2
    5c90:	10b22e04 	addi	r2,r2,-14152
    5c94:	003e7f06 	br	5694 <__alt_mem_Flash_flash_data+0xf4005694>
    5c98:	10c00204 	addi	r3,r2,8
    5c9c:	003e8206 	br	56a8 <__alt_mem_Flash_flash_data+0xf40056a8>
    5ca0:	01400434 	movhi	r5,16
    5ca4:	297fffc4 	addi	r5,r5,-1
    5ca8:	994a703a 	and	r5,r19,r5
    5cac:	9009883a 	mov	r4,r18
    5cb0:	8c7f0044 	addi	r17,r17,-1023
    5cb4:	294ffc34 	orhi	r5,r5,16368
    5cb8:	dd000217 	ldw	r20,8(sp)
    5cbc:	d8000f15 	stw	zero,60(sp)
    5cc0:	003e9f06 	br	5740 <__alt_mem_Flash_flash_data+0xf4005740>
    5cc4:	008000b4 	movhi	r2,2
    5cc8:	10b22504 	addi	r2,r2,-14188
    5ccc:	003e5f06 	br	564c <__alt_mem_Flash_flash_data+0xf400564c>
    5cd0:	80001115 	stw	zero,68(r16)
    5cd4:	8009883a 	mov	r4,r16
    5cd8:	000b883a 	mov	r5,zero
    5cdc:	0008c280 	call	8c28 <_Balloc>
    5ce0:	01bfffc4 	movi	r6,-1
    5ce4:	d8800715 	stw	r2,28(sp)
    5ce8:	80801015 	stw	r2,64(r16)
    5cec:	00800044 	movi	r2,1
    5cf0:	d9800c15 	stw	r6,48(sp)
    5cf4:	d8800b15 	stw	r2,44(sp)
    5cf8:	d9800615 	stw	r6,24(sp)
    5cfc:	d8002215 	stw	zero,136(sp)
    5d00:	d8000315 	stw	zero,12(sp)
    5d04:	d8800117 	ldw	r2,4(sp)
    5d08:	10008e16 	blt	r2,zero,5f44 <_dtoa_r+0x9b4>
    5d0c:	d9000517 	ldw	r4,20(sp)
    5d10:	00c00384 	movi	r3,14
    5d14:	19008b16 	blt	r3,r4,5f44 <_dtoa_r+0x9b4>
    5d18:	200490fa 	slli	r2,r4,3
    5d1c:	00c000b4 	movhi	r3,2
    5d20:	d9802217 	ldw	r6,136(sp)
    5d24:	18f24d04 	addi	r3,r3,-14028
    5d28:	1885883a 	add	r2,r3,r2
    5d2c:	14400017 	ldw	r17,0(r2)
    5d30:	15000117 	ldw	r20,4(r2)
    5d34:	3001c716 	blt	r6,zero,6454 <_dtoa_r+0xec4>
    5d38:	880d883a 	mov	r6,r17
    5d3c:	a00f883a 	mov	r7,r20
    5d40:	9009883a 	mov	r4,r18
    5d44:	980b883a 	mov	r5,r19
    5d48:	000d6ac0 	call	d6ac <__divdf3>
    5d4c:	180b883a 	mov	r5,r3
    5d50:	1009883a 	mov	r4,r2
    5d54:	000f1b00 	call	f1b0 <__fixdfsi>
    5d58:	1009883a 	mov	r4,r2
    5d5c:	102d883a 	mov	r22,r2
    5d60:	000f2380 	call	f238 <__floatsidf>
    5d64:	1009883a 	mov	r4,r2
    5d68:	180b883a 	mov	r5,r3
    5d6c:	880d883a 	mov	r6,r17
    5d70:	a00f883a 	mov	r7,r20
    5d74:	000e1bc0 	call	e1bc <__muldf3>
    5d78:	9009883a 	mov	r4,r18
    5d7c:	980b883a 	mov	r5,r19
    5d80:	100d883a 	mov	r6,r2
    5d84:	180f883a 	mov	r7,r3
    5d88:	000e8e00 	call	e8e0 <__subdf3>
    5d8c:	d9000717 	ldw	r4,28(sp)
    5d90:	d9800617 	ldw	r6,24(sp)
    5d94:	180b883a 	mov	r5,r3
    5d98:	b0c00c04 	addi	r3,r22,48
    5d9c:	20c00005 	stb	r3,0(r4)
    5da0:	25c00044 	addi	r23,r4,1
    5da4:	01000044 	movi	r4,1
    5da8:	1011883a 	mov	r8,r2
    5dac:	2807883a 	mov	r3,r5
    5db0:	31003d26 	beq	r6,r4,5ea8 <_dtoa_r+0x918>
    5db4:	000d883a 	mov	r6,zero
    5db8:	01d00934 	movhi	r7,16420
    5dbc:	1009883a 	mov	r4,r2
    5dc0:	000e1bc0 	call	e1bc <__muldf3>
    5dc4:	1009883a 	mov	r4,r2
    5dc8:	180b883a 	mov	r5,r3
    5dcc:	000d883a 	mov	r6,zero
    5dd0:	000f883a 	mov	r7,zero
    5dd4:	1027883a 	mov	r19,r2
    5dd8:	182b883a 	mov	r21,r3
    5ddc:	000df780 	call	df78 <__eqdf2>
    5de0:	103f9926 	beq	r2,zero,5c48 <__alt_mem_Flash_flash_data+0xf4005c48>
    5de4:	d8c00617 	ldw	r3,24(sp)
    5de8:	d9000717 	ldw	r4,28(sp)
    5dec:	b825883a 	mov	r18,r23
    5df0:	18bfffc4 	addi	r2,r3,-1
    5df4:	20ad883a 	add	r22,r4,r2
    5df8:	dc000315 	stw	r16,12(sp)
    5dfc:	00000a06 	br	5e28 <_dtoa_r+0x898>
    5e00:	000e1bc0 	call	e1bc <__muldf3>
    5e04:	1009883a 	mov	r4,r2
    5e08:	180b883a 	mov	r5,r3
    5e0c:	000d883a 	mov	r6,zero
    5e10:	000f883a 	mov	r7,zero
    5e14:	1027883a 	mov	r19,r2
    5e18:	182b883a 	mov	r21,r3
    5e1c:	b825883a 	mov	r18,r23
    5e20:	000df780 	call	df78 <__eqdf2>
    5e24:	10022626 	beq	r2,zero,66c0 <_dtoa_r+0x1130>
    5e28:	880d883a 	mov	r6,r17
    5e2c:	a00f883a 	mov	r7,r20
    5e30:	9809883a 	mov	r4,r19
    5e34:	a80b883a 	mov	r5,r21
    5e38:	000d6ac0 	call	d6ac <__divdf3>
    5e3c:	180b883a 	mov	r5,r3
    5e40:	1009883a 	mov	r4,r2
    5e44:	000f1b00 	call	f1b0 <__fixdfsi>
    5e48:	1009883a 	mov	r4,r2
    5e4c:	1021883a 	mov	r16,r2
    5e50:	000f2380 	call	f238 <__floatsidf>
    5e54:	1009883a 	mov	r4,r2
    5e58:	180b883a 	mov	r5,r3
    5e5c:	880d883a 	mov	r6,r17
    5e60:	a00f883a 	mov	r7,r20
    5e64:	000e1bc0 	call	e1bc <__muldf3>
    5e68:	9809883a 	mov	r4,r19
    5e6c:	a80b883a 	mov	r5,r21
    5e70:	100d883a 	mov	r6,r2
    5e74:	180f883a 	mov	r7,r3
    5e78:	000e8e00 	call	e8e0 <__subdf3>
    5e7c:	82000c04 	addi	r8,r16,48
    5e80:	92000005 	stb	r8,0(r18)
    5e84:	1009883a 	mov	r4,r2
    5e88:	180b883a 	mov	r5,r3
    5e8c:	000d883a 	mov	r6,zero
    5e90:	01d00934 	movhi	r7,16420
    5e94:	1011883a 	mov	r8,r2
    5e98:	bdc00044 	addi	r23,r23,1
    5e9c:	95bfd81e 	bne	r18,r22,5e00 <__alt_mem_Flash_flash_data+0xf4005e00>
    5ea0:	802d883a 	mov	r22,r16
    5ea4:	dc000317 	ldw	r16,12(sp)
    5ea8:	4009883a 	mov	r4,r8
    5eac:	180b883a 	mov	r5,r3
    5eb0:	400d883a 	mov	r6,r8
    5eb4:	180f883a 	mov	r7,r3
    5eb8:	000ce100 	call	ce10 <__adddf3>
    5ebc:	8809883a 	mov	r4,r17
    5ec0:	a00b883a 	mov	r5,r20
    5ec4:	100d883a 	mov	r6,r2
    5ec8:	180f883a 	mov	r7,r3
    5ecc:	1027883a 	mov	r19,r2
    5ed0:	1825883a 	mov	r18,r3
    5ed4:	000e0dc0 	call	e0dc <__ledf2>
    5ed8:	10000816 	blt	r2,zero,5efc <_dtoa_r+0x96c>
    5edc:	8809883a 	mov	r4,r17
    5ee0:	a00b883a 	mov	r5,r20
    5ee4:	980d883a 	mov	r6,r19
    5ee8:	900f883a 	mov	r7,r18
    5eec:	000df780 	call	df78 <__eqdf2>
    5ef0:	103f551e 	bne	r2,zero,5c48 <__alt_mem_Flash_flash_data+0xf4005c48>
    5ef4:	b580004c 	andi	r22,r22,1
    5ef8:	b03f5326 	beq	r22,zero,5c48 <__alt_mem_Flash_flash_data+0xf4005c48>
    5efc:	bd7fffc3 	ldbu	r21,-1(r23)
    5f00:	b8bfffc4 	addi	r2,r23,-1
    5f04:	1007883a 	mov	r3,r2
    5f08:	01400e44 	movi	r5,57
    5f0c:	d9800717 	ldw	r6,28(sp)
    5f10:	00000506 	br	5f28 <_dtoa_r+0x998>
    5f14:	18ffffc4 	addi	r3,r3,-1
    5f18:	30825e26 	beq	r6,r2,6894 <_dtoa_r+0x1304>
    5f1c:	1d400003 	ldbu	r21,0(r3)
    5f20:	102f883a 	mov	r23,r2
    5f24:	10bfffc4 	addi	r2,r2,-1
    5f28:	a9003fcc 	andi	r4,r21,255
    5f2c:	2100201c 	xori	r4,r4,128
    5f30:	213fe004 	addi	r4,r4,-128
    5f34:	217ff726 	beq	r4,r5,5f14 <__alt_mem_Flash_flash_data+0xf4005f14>
    5f38:	aa000044 	addi	r8,r21,1
    5f3c:	12000005 	stb	r8,0(r2)
    5f40:	003f4106 	br	5c48 <__alt_mem_Flash_flash_data+0xf4005c48>
    5f44:	d8c00b17 	ldw	r3,44(sp)
    5f48:	18006726 	beq	r3,zero,60e8 <_dtoa_r+0xb58>
    5f4c:	d9000317 	ldw	r4,12(sp)
    5f50:	00c00044 	movi	r3,1
    5f54:	19016a0e 	bge	r3,r4,6500 <_dtoa_r+0xf70>
    5f58:	d8800617 	ldw	r2,24(sp)
    5f5c:	d8c00917 	ldw	r3,36(sp)
    5f60:	157fffc4 	addi	r21,r2,-1
    5f64:	1d420716 	blt	r3,r21,6784 <_dtoa_r+0x11f4>
    5f68:	1d6bc83a 	sub	r21,r3,r21
    5f6c:	d8800617 	ldw	r2,24(sp)
    5f70:	1002c716 	blt	r2,zero,6a90 <_dtoa_r+0x1500>
    5f74:	dd000817 	ldw	r20,32(sp)
    5f78:	d8800617 	ldw	r2,24(sp)
    5f7c:	d9800817 	ldw	r6,32(sp)
    5f80:	8009883a 	mov	r4,r16
    5f84:	01400044 	movi	r5,1
    5f88:	308d883a 	add	r6,r6,r2
    5f8c:	d9800815 	stw	r6,32(sp)
    5f90:	b0ad883a 	add	r22,r22,r2
    5f94:	00090340 	call	9034 <__i2b>
    5f98:	1023883a 	mov	r17,r2
    5f9c:	a0000826 	beq	r20,zero,5fc0 <_dtoa_r+0xa30>
    5fa0:	0580070e 	bge	zero,r22,5fc0 <_dtoa_r+0xa30>
    5fa4:	b005883a 	mov	r2,r22
    5fa8:	a5812016 	blt	r20,r22,642c <_dtoa_r+0xe9c>
    5fac:	d8c00817 	ldw	r3,32(sp)
    5fb0:	a0a9c83a 	sub	r20,r20,r2
    5fb4:	b0adc83a 	sub	r22,r22,r2
    5fb8:	1887c83a 	sub	r3,r3,r2
    5fbc:	d8c00815 	stw	r3,32(sp)
    5fc0:	d9000917 	ldw	r4,36(sp)
    5fc4:	0100140e 	bge	zero,r4,6018 <_dtoa_r+0xa88>
    5fc8:	d9800b17 	ldw	r6,44(sp)
    5fcc:	3001e526 	beq	r6,zero,6764 <_dtoa_r+0x11d4>
    5fd0:	05400e0e 	bge	zero,r21,600c <_dtoa_r+0xa7c>
    5fd4:	880b883a 	mov	r5,r17
    5fd8:	8009883a 	mov	r4,r16
    5fdc:	a80d883a 	mov	r6,r21
    5fe0:	000926c0 	call	926c <__pow5mult>
    5fe4:	e00d883a 	mov	r6,fp
    5fe8:	8009883a 	mov	r4,r16
    5fec:	100b883a 	mov	r5,r2
    5ff0:	1023883a 	mov	r17,r2
    5ff4:	00090700 	call	9070 <__multiply>
    5ff8:	102f883a 	mov	r23,r2
    5ffc:	e00b883a 	mov	r5,fp
    6000:	8009883a 	mov	r4,r16
    6004:	0008cd00 	call	8cd0 <_Bfree>
    6008:	b839883a 	mov	fp,r23
    600c:	d8800917 	ldw	r2,36(sp)
    6010:	154dc83a 	sub	r6,r2,r21
    6014:	3001281e 	bne	r6,zero,64b8 <_dtoa_r+0xf28>
    6018:	05c00044 	movi	r23,1
    601c:	8009883a 	mov	r4,r16
    6020:	b80b883a 	mov	r5,r23
    6024:	00090340 	call	9034 <__i2b>
    6028:	d8c00a17 	ldw	r3,40(sp)
    602c:	102b883a 	mov	r21,r2
    6030:	00c0310e 	bge	zero,r3,60f8 <_dtoa_r+0xb68>
    6034:	8009883a 	mov	r4,r16
    6038:	100b883a 	mov	r5,r2
    603c:	180d883a 	mov	r6,r3
    6040:	000926c0 	call	926c <__pow5mult>
    6044:	d9000317 	ldw	r4,12(sp)
    6048:	102b883a 	mov	r21,r2
    604c:	b9011f0e 	bge	r23,r4,64cc <_dtoa_r+0xf3c>
    6050:	0027883a 	mov	r19,zero
    6054:	a8800417 	ldw	r2,16(r21)
    6058:	10800104 	addi	r2,r2,4
    605c:	1085883a 	add	r2,r2,r2
    6060:	1085883a 	add	r2,r2,r2
    6064:	a885883a 	add	r2,r21,r2
    6068:	11000017 	ldw	r4,0(r2)
    606c:	0008f1c0 	call	8f1c <__hi0bits>
    6070:	00c00804 	movi	r3,32
    6074:	1885c83a 	sub	r2,r3,r2
    6078:	00002506 	br	6110 <_dtoa_r+0xb80>
    607c:	01800044 	movi	r6,1
    6080:	d9800d15 	stw	r6,52(sp)
    6084:	003dec06 	br	5838 <__alt_mem_Flash_flash_data+0xf4005838>
    6088:	d8c00817 	ldw	r3,32(sp)
    608c:	d9000517 	ldw	r4,20(sp)
    6090:	d8000a15 	stw	zero,40(sp)
    6094:	1907c83a 	sub	r3,r3,r4
    6098:	010dc83a 	sub	r6,zero,r4
    609c:	d8c00815 	stw	r3,32(sp)
    60a0:	d9800915 	stw	r6,36(sp)
    60a4:	003ded06 	br	585c <__alt_mem_Flash_flash_data+0xf400585c>
    60a8:	05adc83a 	sub	r22,zero,r22
    60ac:	dd800815 	stw	r22,32(sp)
    60b0:	002d883a 	mov	r22,zero
    60b4:	003de406 	br	5848 <__alt_mem_Flash_flash_data+0xf4005848>
    60b8:	d9000517 	ldw	r4,20(sp)
    60bc:	000f2380 	call	f238 <__floatsidf>
    60c0:	1009883a 	mov	r4,r2
    60c4:	180b883a 	mov	r5,r3
    60c8:	b00d883a 	mov	r6,r22
    60cc:	a80f883a 	mov	r7,r21
    60d0:	000df780 	call	df78 <__eqdf2>
    60d4:	103dc726 	beq	r2,zero,57f4 <__alt_mem_Flash_flash_data+0xf40057f4>
    60d8:	d8800517 	ldw	r2,20(sp)
    60dc:	10bfffc4 	addi	r2,r2,-1
    60e0:	d8800515 	stw	r2,20(sp)
    60e4:	003dc306 	br	57f4 <__alt_mem_Flash_flash_data+0xf40057f4>
    60e8:	dd400917 	ldw	r21,36(sp)
    60ec:	dd000817 	ldw	r20,32(sp)
    60f0:	0023883a 	mov	r17,zero
    60f4:	003fa906 	br	5f9c <__alt_mem_Flash_flash_data+0xf4005f9c>
    60f8:	d9800317 	ldw	r6,12(sp)
    60fc:	b981670e 	bge	r23,r6,669c <_dtoa_r+0x110c>
    6100:	0027883a 	mov	r19,zero
    6104:	d8c00a17 	ldw	r3,40(sp)
    6108:	183fd21e 	bne	r3,zero,6054 <__alt_mem_Flash_flash_data+0xf4006054>
    610c:	00800044 	movi	r2,1
    6110:	1585883a 	add	r2,r2,r22
    6114:	108007cc 	andi	r2,r2,31
    6118:	10005f26 	beq	r2,zero,6298 <_dtoa_r+0xd08>
    611c:	00c00804 	movi	r3,32
    6120:	1887c83a 	sub	r3,r3,r2
    6124:	01000104 	movi	r4,4
    6128:	20c2dd0e 	bge	r4,r3,6ca0 <_dtoa_r+0x1710>
    612c:	d9000817 	ldw	r4,32(sp)
    6130:	00c00704 	movi	r3,28
    6134:	1885c83a 	sub	r2,r3,r2
    6138:	2089883a 	add	r4,r4,r2
    613c:	d9000815 	stw	r4,32(sp)
    6140:	a0a9883a 	add	r20,r20,r2
    6144:	b0ad883a 	add	r22,r22,r2
    6148:	d8800817 	ldw	r2,32(sp)
    614c:	0080050e 	bge	zero,r2,6164 <_dtoa_r+0xbd4>
    6150:	e00b883a 	mov	r5,fp
    6154:	8009883a 	mov	r4,r16
    6158:	100d883a 	mov	r6,r2
    615c:	00093ac0 	call	93ac <__lshift>
    6160:	1039883a 	mov	fp,r2
    6164:	0580050e 	bge	zero,r22,617c <_dtoa_r+0xbec>
    6168:	a80b883a 	mov	r5,r21
    616c:	8009883a 	mov	r4,r16
    6170:	b00d883a 	mov	r6,r22
    6174:	00093ac0 	call	93ac <__lshift>
    6178:	102b883a 	mov	r21,r2
    617c:	d8c00d17 	ldw	r3,52(sp)
    6180:	1801161e 	bne	r3,zero,65dc <_dtoa_r+0x104c>
    6184:	d8c00617 	ldw	r3,24(sp)
    6188:	00c12d0e 	bge	zero,r3,6640 <_dtoa_r+0x10b0>
    618c:	d8c00b17 	ldw	r3,44(sp)
    6190:	1800571e 	bne	r3,zero,62f0 <_dtoa_r+0xd60>
    6194:	dc800717 	ldw	r18,28(sp)
    6198:	dcc00617 	ldw	r19,24(sp)
    619c:	9029883a 	mov	r20,r18
    61a0:	00000206 	br	61ac <_dtoa_r+0xc1c>
    61a4:	0008cf80 	call	8cf8 <__multadd>
    61a8:	1039883a 	mov	fp,r2
    61ac:	e009883a 	mov	r4,fp
    61b0:	a80b883a 	mov	r5,r21
    61b4:	00053900 	call	5390 <quorem>
    61b8:	10800c04 	addi	r2,r2,48
    61bc:	90800005 	stb	r2,0(r18)
    61c0:	94800044 	addi	r18,r18,1
    61c4:	9507c83a 	sub	r3,r18,r20
    61c8:	8009883a 	mov	r4,r16
    61cc:	e00b883a 	mov	r5,fp
    61d0:	01800284 	movi	r6,10
    61d4:	000f883a 	mov	r7,zero
    61d8:	1cfff216 	blt	r3,r19,61a4 <__alt_mem_Flash_flash_data+0xf40061a4>
    61dc:	1011883a 	mov	r8,r2
    61e0:	d8800617 	ldw	r2,24(sp)
    61e4:	00822e0e 	bge	zero,r2,6aa0 <_dtoa_r+0x1510>
    61e8:	d9000717 	ldw	r4,28(sp)
    61ec:	0025883a 	mov	r18,zero
    61f0:	20af883a 	add	r23,r4,r2
    61f4:	e00b883a 	mov	r5,fp
    61f8:	01800044 	movi	r6,1
    61fc:	8009883a 	mov	r4,r16
    6200:	da001715 	stw	r8,92(sp)
    6204:	00093ac0 	call	93ac <__lshift>
    6208:	1009883a 	mov	r4,r2
    620c:	a80b883a 	mov	r5,r21
    6210:	1039883a 	mov	fp,r2
    6214:	00094fc0 	call	94fc <__mcmp>
    6218:	da001717 	ldw	r8,92(sp)
    621c:	00816e0e 	bge	zero,r2,67d8 <_dtoa_r+0x1248>
    6220:	b93fffc3 	ldbu	r4,-1(r23)
    6224:	b8bfffc4 	addi	r2,r23,-1
    6228:	1007883a 	mov	r3,r2
    622c:	01800e44 	movi	r6,57
    6230:	d9c00717 	ldw	r7,28(sp)
    6234:	00000506 	br	624c <_dtoa_r+0xcbc>
    6238:	18ffffc4 	addi	r3,r3,-1
    623c:	38811926 	beq	r7,r2,66a4 <_dtoa_r+0x1114>
    6240:	19000003 	ldbu	r4,0(r3)
    6244:	102f883a 	mov	r23,r2
    6248:	10bfffc4 	addi	r2,r2,-1
    624c:	21403fcc 	andi	r5,r4,255
    6250:	2940201c 	xori	r5,r5,128
    6254:	297fe004 	addi	r5,r5,-128
    6258:	29bff726 	beq	r5,r6,6238 <__alt_mem_Flash_flash_data+0xf4006238>
    625c:	21000044 	addi	r4,r4,1
    6260:	11000005 	stb	r4,0(r2)
    6264:	8009883a 	mov	r4,r16
    6268:	a80b883a 	mov	r5,r21
    626c:	0008cd00 	call	8cd0 <_Bfree>
    6270:	883e7526 	beq	r17,zero,5c48 <__alt_mem_Flash_flash_data+0xf4005c48>
    6274:	90000426 	beq	r18,zero,6288 <_dtoa_r+0xcf8>
    6278:	94400326 	beq	r18,r17,6288 <_dtoa_r+0xcf8>
    627c:	8009883a 	mov	r4,r16
    6280:	900b883a 	mov	r5,r18
    6284:	0008cd00 	call	8cd0 <_Bfree>
    6288:	8009883a 	mov	r4,r16
    628c:	880b883a 	mov	r5,r17
    6290:	0008cd00 	call	8cd0 <_Bfree>
    6294:	003e6c06 	br	5c48 <__alt_mem_Flash_flash_data+0xf4005c48>
    6298:	00800704 	movi	r2,28
    629c:	d9800817 	ldw	r6,32(sp)
    62a0:	a0a9883a 	add	r20,r20,r2
    62a4:	b0ad883a 	add	r22,r22,r2
    62a8:	308d883a 	add	r6,r6,r2
    62ac:	d9800815 	stw	r6,32(sp)
    62b0:	003fa506 	br	6148 <__alt_mem_Flash_flash_data+0xf4006148>
    62b4:	013efb84 	movi	r4,-1042
    62b8:	246bc83a 	sub	r21,r4,r17
    62bc:	9548983a 	sll	r4,r18,r21
    62c0:	003d1806 	br	5724 <__alt_mem_Flash_flash_data+0xf4005724>
    62c4:	d8000d15 	stw	zero,52(sp)
    62c8:	003d5b06 	br	5838 <__alt_mem_Flash_flash_data+0xf4005838>
    62cc:	880b883a 	mov	r5,r17
    62d0:	8009883a 	mov	r4,r16
    62d4:	01800284 	movi	r6,10
    62d8:	000f883a 	mov	r7,zero
    62dc:	0008cf80 	call	8cf8 <__multadd>
    62e0:	1023883a 	mov	r17,r2
    62e4:	d8800c17 	ldw	r2,48(sp)
    62e8:	0082550e 	bge	zero,r2,6c40 <_dtoa_r+0x16b0>
    62ec:	d8800615 	stw	r2,24(sp)
    62f0:	0500050e 	bge	zero,r20,6308 <_dtoa_r+0xd78>
    62f4:	880b883a 	mov	r5,r17
    62f8:	8009883a 	mov	r4,r16
    62fc:	a00d883a 	mov	r6,r20
    6300:	00093ac0 	call	93ac <__lshift>
    6304:	1023883a 	mov	r17,r2
    6308:	98016a1e 	bne	r19,zero,68b4 <_dtoa_r+0x1324>
    630c:	8829883a 	mov	r20,r17
    6310:	d9000617 	ldw	r4,24(sp)
    6314:	dcc00717 	ldw	r19,28(sp)
    6318:	9480004c 	andi	r18,r18,1
    631c:	20bfffc4 	addi	r2,r4,-1
    6320:	9885883a 	add	r2,r19,r2
    6324:	d8800415 	stw	r2,16(sp)
    6328:	dc800615 	stw	r18,24(sp)
    632c:	e009883a 	mov	r4,fp
    6330:	a80b883a 	mov	r5,r21
    6334:	00053900 	call	5390 <quorem>
    6338:	e009883a 	mov	r4,fp
    633c:	880b883a 	mov	r5,r17
    6340:	102f883a 	mov	r23,r2
    6344:	00094fc0 	call	94fc <__mcmp>
    6348:	8009883a 	mov	r4,r16
    634c:	a80b883a 	mov	r5,r21
    6350:	a00d883a 	mov	r6,r20
    6354:	102d883a 	mov	r22,r2
    6358:	000955c0 	call	955c <__mdiff>
    635c:	1007883a 	mov	r3,r2
    6360:	10800317 	ldw	r2,12(r2)
    6364:	bc800c04 	addi	r18,r23,48
    6368:	1000971e 	bne	r2,zero,65c8 <_dtoa_r+0x1038>
    636c:	180b883a 	mov	r5,r3
    6370:	e009883a 	mov	r4,fp
    6374:	d8c01515 	stw	r3,84(sp)
    6378:	00094fc0 	call	94fc <__mcmp>
    637c:	d8c01517 	ldw	r3,84(sp)
    6380:	8009883a 	mov	r4,r16
    6384:	d8801515 	stw	r2,84(sp)
    6388:	180b883a 	mov	r5,r3
    638c:	0008cd00 	call	8cd0 <_Bfree>
    6390:	d8801517 	ldw	r2,84(sp)
    6394:	1000041e 	bne	r2,zero,63a8 <_dtoa_r+0xe18>
    6398:	d9800317 	ldw	r6,12(sp)
    639c:	3000021e 	bne	r6,zero,63a8 <_dtoa_r+0xe18>
    63a0:	d8c00617 	ldw	r3,24(sp)
    63a4:	18007626 	beq	r3,zero,6580 <_dtoa_r+0xff0>
    63a8:	b0005b16 	blt	r22,zero,6518 <_dtoa_r+0xf88>
    63ac:	b000041e 	bne	r22,zero,63c0 <_dtoa_r+0xe30>
    63b0:	d9000317 	ldw	r4,12(sp)
    63b4:	2000021e 	bne	r4,zero,63c0 <_dtoa_r+0xe30>
    63b8:	d8c00617 	ldw	r3,24(sp)
    63bc:	18005626 	beq	r3,zero,6518 <_dtoa_r+0xf88>
    63c0:	00814d16 	blt	zero,r2,68f8 <_dtoa_r+0x1368>
    63c4:	d8c00417 	ldw	r3,16(sp)
    63c8:	9d800044 	addi	r22,r19,1
    63cc:	9c800005 	stb	r18,0(r19)
    63d0:	b02f883a 	mov	r23,r22
    63d4:	98c14c26 	beq	r19,r3,6908 <_dtoa_r+0x1378>
    63d8:	e00b883a 	mov	r5,fp
    63dc:	8009883a 	mov	r4,r16
    63e0:	01800284 	movi	r6,10
    63e4:	000f883a 	mov	r7,zero
    63e8:	0008cf80 	call	8cf8 <__multadd>
    63ec:	1039883a 	mov	fp,r2
    63f0:	8d006d26 	beq	r17,r20,65a8 <_dtoa_r+0x1018>
    63f4:	880b883a 	mov	r5,r17
    63f8:	01800284 	movi	r6,10
    63fc:	000f883a 	mov	r7,zero
    6400:	8009883a 	mov	r4,r16
    6404:	0008cf80 	call	8cf8 <__multadd>
    6408:	a00b883a 	mov	r5,r20
    640c:	8009883a 	mov	r4,r16
    6410:	01800284 	movi	r6,10
    6414:	000f883a 	mov	r7,zero
    6418:	1023883a 	mov	r17,r2
    641c:	0008cf80 	call	8cf8 <__multadd>
    6420:	1029883a 	mov	r20,r2
    6424:	b027883a 	mov	r19,r22
    6428:	003fc006 	br	632c <__alt_mem_Flash_flash_data+0xf400632c>
    642c:	a005883a 	mov	r2,r20
    6430:	003ede06 	br	5fac <__alt_mem_Flash_flash_data+0xf4005fac>
    6434:	01000044 	movi	r4,1
    6438:	d9000b15 	stw	r4,44(sp)
    643c:	d9802217 	ldw	r6,136(sp)
    6440:	0180dc0e 	bge	zero,r6,67b4 <_dtoa_r+0x1224>
    6444:	3023883a 	mov	r17,r6
    6448:	d9800c15 	stw	r6,48(sp)
    644c:	d9800615 	stw	r6,24(sp)
    6450:	003d1e06 	br	58cc <__alt_mem_Flash_flash_data+0xf40058cc>
    6454:	d8800617 	ldw	r2,24(sp)
    6458:	00be3716 	blt	zero,r2,5d38 <__alt_mem_Flash_flash_data+0xf4005d38>
    645c:	1000be1e 	bne	r2,zero,6758 <_dtoa_r+0x11c8>
    6460:	8809883a 	mov	r4,r17
    6464:	a00b883a 	mov	r5,r20
    6468:	000d883a 	mov	r6,zero
    646c:	01d00534 	movhi	r7,16404
    6470:	000e1bc0 	call	e1bc <__muldf3>
    6474:	1009883a 	mov	r4,r2
    6478:	180b883a 	mov	r5,r3
    647c:	900d883a 	mov	r6,r18
    6480:	980f883a 	mov	r7,r19
    6484:	000dffc0 	call	dffc <__gedf2>
    6488:	002b883a 	mov	r21,zero
    648c:	0023883a 	mov	r17,zero
    6490:	10007a16 	blt	r2,zero,667c <_dtoa_r+0x10ec>
    6494:	d9002217 	ldw	r4,136(sp)
    6498:	ddc00717 	ldw	r23,28(sp)
    649c:	0108303a 	nor	r4,zero,r4
    64a0:	d9000515 	stw	r4,20(sp)
    64a4:	8009883a 	mov	r4,r16
    64a8:	a80b883a 	mov	r5,r21
    64ac:	0008cd00 	call	8cd0 <_Bfree>
    64b0:	883f751e 	bne	r17,zero,6288 <__alt_mem_Flash_flash_data+0xf4006288>
    64b4:	003de406 	br	5c48 <__alt_mem_Flash_flash_data+0xf4005c48>
    64b8:	e00b883a 	mov	r5,fp
    64bc:	8009883a 	mov	r4,r16
    64c0:	000926c0 	call	926c <__pow5mult>
    64c4:	1039883a 	mov	fp,r2
    64c8:	003ed306 	br	6018 <__alt_mem_Flash_flash_data+0xf4006018>
    64cc:	903ee01e 	bne	r18,zero,6050 <__alt_mem_Flash_flash_data+0xf4006050>
    64d0:	00800434 	movhi	r2,16
    64d4:	10bfffc4 	addi	r2,r2,-1
    64d8:	9884703a 	and	r2,r19,r2
    64dc:	103f081e 	bne	r2,zero,6100 <__alt_mem_Flash_flash_data+0xf4006100>
    64e0:	9cdffc2c 	andhi	r19,r19,32752
    64e4:	983f0626 	beq	r19,zero,6100 <__alt_mem_Flash_flash_data+0xf4006100>
    64e8:	d8800817 	ldw	r2,32(sp)
    64ec:	b5800044 	addi	r22,r22,1
    64f0:	04c00044 	movi	r19,1
    64f4:	10800044 	addi	r2,r2,1
    64f8:	d8800815 	stw	r2,32(sp)
    64fc:	003f0106 	br	6104 <__alt_mem_Flash_flash_data+0xf4006104>
    6500:	d9800f17 	ldw	r6,60(sp)
    6504:	30016826 	beq	r6,zero,6aa8 <_dtoa_r+0x1518>
    6508:	10810cc4 	addi	r2,r2,1075
    650c:	dd400917 	ldw	r21,36(sp)
    6510:	dd000817 	ldw	r20,32(sp)
    6514:	003e9906 	br	5f7c <__alt_mem_Flash_flash_data+0xf4005f7c>
    6518:	9011883a 	mov	r8,r18
    651c:	4007883a 	mov	r3,r8
    6520:	e02d883a 	mov	r22,fp
    6524:	0080100e 	bge	zero,r2,6568 <_dtoa_r+0xfd8>
    6528:	01800044 	movi	r6,1
    652c:	8009883a 	mov	r4,r16
    6530:	e00b883a 	mov	r5,fp
    6534:	da001515 	stw	r8,84(sp)
    6538:	da001715 	stw	r8,92(sp)
    653c:	00093ac0 	call	93ac <__lshift>
    6540:	1009883a 	mov	r4,r2
    6544:	a80b883a 	mov	r5,r21
    6548:	102d883a 	mov	r22,r2
    654c:	00094fc0 	call	94fc <__mcmp>
    6550:	d8c01517 	ldw	r3,84(sp)
    6554:	da001717 	ldw	r8,92(sp)
    6558:	0081a50e 	bge	zero,r2,6bf0 <_dtoa_r+0x1660>
    655c:	00800e44 	movi	r2,57
    6560:	40817b26 	beq	r8,r2,6b50 <_dtoa_r+0x15c0>
    6564:	40c00044 	addi	r3,r8,1
    6568:	8825883a 	mov	r18,r17
    656c:	9dc00044 	addi	r23,r19,1
    6570:	98c00005 	stb	r3,0(r19)
    6574:	a023883a 	mov	r17,r20
    6578:	b039883a 	mov	fp,r22
    657c:	003f3906 	br	6264 <__alt_mem_Flash_flash_data+0xf4006264>
    6580:	00800e44 	movi	r2,57
    6584:	9011883a 	mov	r8,r18
    6588:	90817226 	beq	r18,r2,6b54 <_dtoa_r+0x15c4>
    658c:	0580010e 	bge	zero,r22,6594 <_dtoa_r+0x1004>
    6590:	ba000c44 	addi	r8,r23,49
    6594:	8825883a 	mov	r18,r17
    6598:	9dc00044 	addi	r23,r19,1
    659c:	9a000005 	stb	r8,0(r19)
    65a0:	a023883a 	mov	r17,r20
    65a4:	003f2f06 	br	6264 <__alt_mem_Flash_flash_data+0xf4006264>
    65a8:	880b883a 	mov	r5,r17
    65ac:	8009883a 	mov	r4,r16
    65b0:	01800284 	movi	r6,10
    65b4:	000f883a 	mov	r7,zero
    65b8:	0008cf80 	call	8cf8 <__multadd>
    65bc:	1023883a 	mov	r17,r2
    65c0:	1029883a 	mov	r20,r2
    65c4:	003f9706 	br	6424 <__alt_mem_Flash_flash_data+0xf4006424>
    65c8:	8009883a 	mov	r4,r16
    65cc:	180b883a 	mov	r5,r3
    65d0:	0008cd00 	call	8cd0 <_Bfree>
    65d4:	00800044 	movi	r2,1
    65d8:	003f7306 	br	63a8 <__alt_mem_Flash_flash_data+0xf40063a8>
    65dc:	e009883a 	mov	r4,fp
    65e0:	a80b883a 	mov	r5,r21
    65e4:	00094fc0 	call	94fc <__mcmp>
    65e8:	103ee60e 	bge	r2,zero,6184 <__alt_mem_Flash_flash_data+0xf4006184>
    65ec:	8009883a 	mov	r4,r16
    65f0:	e00b883a 	mov	r5,fp
    65f4:	01800284 	movi	r6,10
    65f8:	000f883a 	mov	r7,zero
    65fc:	0008cf80 	call	8cf8 <__multadd>
    6600:	d9000517 	ldw	r4,20(sp)
    6604:	d9800b17 	ldw	r6,44(sp)
    6608:	1039883a 	mov	fp,r2
    660c:	213fffc4 	addi	r4,r4,-1
    6610:	d9000515 	stw	r4,20(sp)
    6614:	303f2d1e 	bne	r6,zero,62cc <__alt_mem_Flash_flash_data+0xf40062cc>
    6618:	d9000c17 	ldw	r4,48(sp)
    661c:	0101780e 	bge	zero,r4,6c00 <_dtoa_r+0x1670>
    6620:	d9000615 	stw	r4,24(sp)
    6624:	003edb06 	br	6194 <__alt_mem_Flash_flash_data+0xf4006194>
    6628:	00800084 	movi	r2,2
    662c:	30818e1e 	bne	r6,r2,6c68 <_dtoa_r+0x16d8>
    6630:	d8000b15 	stw	zero,44(sp)
    6634:	003f8106 	br	643c <__alt_mem_Flash_flash_data+0xf400643c>
    6638:	d8800717 	ldw	r2,28(sp)
    663c:	003c0306 	br	564c <__alt_mem_Flash_flash_data+0xf400564c>
    6640:	d9000317 	ldw	r4,12(sp)
    6644:	00800084 	movi	r2,2
    6648:	113ed00e 	bge	r2,r4,618c <__alt_mem_Flash_flash_data+0xf400618c>
    664c:	d8c00617 	ldw	r3,24(sp)
    6650:	183f901e 	bne	r3,zero,6494 <__alt_mem_Flash_flash_data+0xf4006494>
    6654:	a80b883a 	mov	r5,r21
    6658:	8009883a 	mov	r4,r16
    665c:	01800144 	movi	r6,5
    6660:	000f883a 	mov	r7,zero
    6664:	0008cf80 	call	8cf8 <__multadd>
    6668:	e009883a 	mov	r4,fp
    666c:	100b883a 	mov	r5,r2
    6670:	102b883a 	mov	r21,r2
    6674:	00094fc0 	call	94fc <__mcmp>
    6678:	00bf860e 	bge	zero,r2,6494 <__alt_mem_Flash_flash_data+0xf4006494>
    667c:	d9800717 	ldw	r6,28(sp)
    6680:	00800c44 	movi	r2,49
    6684:	30800005 	stb	r2,0(r6)
    6688:	d8800517 	ldw	r2,20(sp)
    668c:	35c00044 	addi	r23,r6,1
    6690:	10800044 	addi	r2,r2,1
    6694:	d8800515 	stw	r2,20(sp)
    6698:	003f8206 	br	64a4 <__alt_mem_Flash_flash_data+0xf40064a4>
    669c:	903e981e 	bne	r18,zero,6100 <__alt_mem_Flash_flash_data+0xf4006100>
    66a0:	003f8b06 	br	64d0 <__alt_mem_Flash_flash_data+0xf40064d0>
    66a4:	d9800517 	ldw	r6,20(sp)
    66a8:	d8c00717 	ldw	r3,28(sp)
    66ac:	00800c44 	movi	r2,49
    66b0:	31800044 	addi	r6,r6,1
    66b4:	d9800515 	stw	r6,20(sp)
    66b8:	18800005 	stb	r2,0(r3)
    66bc:	003ee906 	br	6264 <__alt_mem_Flash_flash_data+0xf4006264>
    66c0:	dc000317 	ldw	r16,12(sp)
    66c4:	003d6006 	br	5c48 <__alt_mem_Flash_flash_data+0xf4005c48>
    66c8:	8809883a 	mov	r4,r17
    66cc:	000f2380 	call	f238 <__floatsidf>
    66d0:	a009883a 	mov	r4,r20
    66d4:	a80b883a 	mov	r5,r21
    66d8:	100d883a 	mov	r6,r2
    66dc:	180f883a 	mov	r7,r3
    66e0:	000e1bc0 	call	e1bc <__muldf3>
    66e4:	1009883a 	mov	r4,r2
    66e8:	180b883a 	mov	r5,r3
    66ec:	000d883a 	mov	r6,zero
    66f0:	01d00734 	movhi	r7,16412
    66f4:	000ce100 	call	ce10 <__adddf3>
    66f8:	1023883a 	mov	r17,r2
    66fc:	00bf3034 	movhi	r2,64704
    6700:	1885883a 	add	r2,r3,r2
    6704:	d8800e15 	stw	r2,56(sp)
    6708:	a009883a 	mov	r4,r20
    670c:	a80b883a 	mov	r5,r21
    6710:	000d883a 	mov	r6,zero
    6714:	01d00534 	movhi	r7,16404
    6718:	000e8e00 	call	e8e0 <__subdf3>
    671c:	d9c00e17 	ldw	r7,56(sp)
    6720:	1009883a 	mov	r4,r2
    6724:	180b883a 	mov	r5,r3
    6728:	880d883a 	mov	r6,r17
    672c:	102b883a 	mov	r21,r2
    6730:	1829883a 	mov	r20,r3
    6734:	000dffc0 	call	dffc <__gedf2>
    6738:	00807716 	blt	zero,r2,6918 <_dtoa_r+0x1388>
    673c:	d8800e17 	ldw	r2,56(sp)
    6740:	a809883a 	mov	r4,r21
    6744:	a00b883a 	mov	r5,r20
    6748:	11e0003c 	xorhi	r7,r2,32768
    674c:	880d883a 	mov	r6,r17
    6750:	000e0dc0 	call	e0dc <__ledf2>
    6754:	103d6b0e 	bge	r2,zero,5d04 <__alt_mem_Flash_flash_data+0xf4005d04>
    6758:	002b883a 	mov	r21,zero
    675c:	0023883a 	mov	r17,zero
    6760:	003f4c06 	br	6494 <__alt_mem_Flash_flash_data+0xf4006494>
    6764:	d9800917 	ldw	r6,36(sp)
    6768:	e00b883a 	mov	r5,fp
    676c:	8009883a 	mov	r4,r16
    6770:	000926c0 	call	926c <__pow5mult>
    6774:	1039883a 	mov	fp,r2
    6778:	003e2706 	br	6018 <__alt_mem_Flash_flash_data+0xf4006018>
    677c:	d8000b15 	stw	zero,44(sp)
    6780:	003c4906 	br	58a8 <__alt_mem_Flash_flash_data+0xf40058a8>
    6784:	d9000917 	ldw	r4,36(sp)
    6788:	d9800a17 	ldw	r6,40(sp)
    678c:	dd400915 	stw	r21,36(sp)
    6790:	a905c83a 	sub	r2,r21,r4
    6794:	308d883a 	add	r6,r6,r2
    6798:	d9800a15 	stw	r6,40(sp)
    679c:	002b883a 	mov	r21,zero
    67a0:	003df206 	br	5f6c <__alt_mem_Flash_flash_data+0xf4005f6c>
    67a4:	dc800e15 	stw	r18,56(sp)
    67a8:	982b883a 	mov	r21,r19
    67ac:	04400084 	movi	r17,2
    67b0:	003c7406 	br	5984 <__alt_mem_Flash_flash_data+0xf4005984>
    67b4:	04400044 	movi	r17,1
    67b8:	dc400c15 	stw	r17,48(sp)
    67bc:	dc400615 	stw	r17,24(sp)
    67c0:	dc402215 	stw	r17,136(sp)
    67c4:	80001115 	stw	zero,68(r16)
    67c8:	000b883a 	mov	r5,zero
    67cc:	003c4a06 	br	58f8 <__alt_mem_Flash_flash_data+0xf40058f8>
    67d0:	3023883a 	mov	r17,r6
    67d4:	003ffb06 	br	67c4 <__alt_mem_Flash_flash_data+0xf40067c4>
    67d8:	1000021e 	bne	r2,zero,67e4 <_dtoa_r+0x1254>
    67dc:	4200004c 	andi	r8,r8,1
    67e0:	403e8f1e 	bne	r8,zero,6220 <__alt_mem_Flash_flash_data+0xf4006220>
    67e4:	01000c04 	movi	r4,48
    67e8:	00000106 	br	67f0 <_dtoa_r+0x1260>
    67ec:	102f883a 	mov	r23,r2
    67f0:	b8bfffc4 	addi	r2,r23,-1
    67f4:	10c00007 	ldb	r3,0(r2)
    67f8:	193ffc26 	beq	r3,r4,67ec <__alt_mem_Flash_flash_data+0xf40067ec>
    67fc:	003e9906 	br	6264 <__alt_mem_Flash_flash_data+0xf4006264>
    6800:	d9000517 	ldw	r4,20(sp)
    6804:	012fc83a 	sub	r23,zero,r4
    6808:	b800ad26 	beq	r23,zero,6ac0 <_dtoa_r+0x1530>
    680c:	b88003cc 	andi	r2,r23,15
    6810:	100490fa 	slli	r2,r2,3
    6814:	00c000b4 	movhi	r3,2
    6818:	18f24d04 	addi	r3,r3,-14028
    681c:	1885883a 	add	r2,r3,r2
    6820:	11800017 	ldw	r6,0(r2)
    6824:	11c00117 	ldw	r7,4(r2)
    6828:	b82fd13a 	srai	r23,r23,4
    682c:	9009883a 	mov	r4,r18
    6830:	980b883a 	mov	r5,r19
    6834:	000e1bc0 	call	e1bc <__muldf3>
    6838:	1029883a 	mov	r20,r2
    683c:	182b883a 	mov	r21,r3
    6840:	b800f426 	beq	r23,zero,6c14 <_dtoa_r+0x1684>
    6844:	020000b4 	movhi	r8,2
    6848:	42324304 	addi	r8,r8,-14068
    684c:	8029883a 	mov	r20,r16
    6850:	04400084 	movi	r17,2
    6854:	4021883a 	mov	r16,r8
    6858:	b980004c 	andi	r6,r23,1
    685c:	1009883a 	mov	r4,r2
    6860:	b82fd07a 	srai	r23,r23,1
    6864:	180b883a 	mov	r5,r3
    6868:	30000426 	beq	r6,zero,687c <_dtoa_r+0x12ec>
    686c:	81800017 	ldw	r6,0(r16)
    6870:	81c00117 	ldw	r7,4(r16)
    6874:	8c400044 	addi	r17,r17,1
    6878:	000e1bc0 	call	e1bc <__muldf3>
    687c:	84000204 	addi	r16,r16,8
    6880:	b83ff51e 	bne	r23,zero,6858 <__alt_mem_Flash_flash_data+0xf4006858>
    6884:	a021883a 	mov	r16,r20
    6888:	182b883a 	mov	r21,r3
    688c:	1029883a 	mov	r20,r2
    6890:	003c5506 	br	59e8 <__alt_mem_Flash_flash_data+0xf40059e8>
    6894:	d9800517 	ldw	r6,20(sp)
    6898:	d9000717 	ldw	r4,28(sp)
    689c:	00c00c04 	movi	r3,48
    68a0:	31800044 	addi	r6,r6,1
    68a4:	d9800515 	stw	r6,20(sp)
    68a8:	20c00005 	stb	r3,0(r4)
    68ac:	02000c44 	movi	r8,49
    68b0:	003da206 	br	5f3c <__alt_mem_Flash_flash_data+0xf4005f3c>
    68b4:	89400117 	ldw	r5,4(r17)
    68b8:	8009883a 	mov	r4,r16
    68bc:	0008c280 	call	8c28 <_Balloc>
    68c0:	89800417 	ldw	r6,16(r17)
    68c4:	11000304 	addi	r4,r2,12
    68c8:	89400304 	addi	r5,r17,12
    68cc:	31800084 	addi	r6,r6,2
    68d0:	318d883a 	add	r6,r6,r6
    68d4:	318d883a 	add	r6,r6,r6
    68d8:	1027883a 	mov	r19,r2
    68dc:	00088700 	call	8870 <memcpy>
    68e0:	8009883a 	mov	r4,r16
    68e4:	980b883a 	mov	r5,r19
    68e8:	01800044 	movi	r6,1
    68ec:	00093ac0 	call	93ac <__lshift>
    68f0:	1029883a 	mov	r20,r2
    68f4:	003e8606 	br	6310 <__alt_mem_Flash_flash_data+0xf4006310>
    68f8:	00800e44 	movi	r2,57
    68fc:	90809526 	beq	r18,r2,6b54 <_dtoa_r+0x15c4>
    6900:	92000044 	addi	r8,r18,1
    6904:	003f2306 	br	6594 <__alt_mem_Flash_flash_data+0xf4006594>
    6908:	9011883a 	mov	r8,r18
    690c:	8825883a 	mov	r18,r17
    6910:	a023883a 	mov	r17,r20
    6914:	003e3706 	br	61f4 <__alt_mem_Flash_flash_data+0xf40061f4>
    6918:	002b883a 	mov	r21,zero
    691c:	0023883a 	mov	r17,zero
    6920:	003f5606 	br	667c <__alt_mem_Flash_flash_data+0xf400667c>
    6924:	51bfffc4 	addi	r6,r10,-1
    6928:	300490fa 	slli	r2,r6,3
    692c:	00c000b4 	movhi	r3,2
    6930:	18f24d04 	addi	r3,r3,-14028
    6934:	1885883a 	add	r2,r3,r2
    6938:	d9c00e17 	ldw	r7,56(sp)
    693c:	11000017 	ldw	r4,0(r2)
    6940:	11400117 	ldw	r5,4(r2)
    6944:	d8800717 	ldw	r2,28(sp)
    6948:	d9801015 	stw	r6,64(sp)
    694c:	880d883a 	mov	r6,r17
    6950:	da801615 	stw	r10,88(sp)
    6954:	15c00044 	addi	r23,r2,1
    6958:	000e1bc0 	call	e1bc <__muldf3>
    695c:	a80b883a 	mov	r5,r21
    6960:	a009883a 	mov	r4,r20
    6964:	d8c01115 	stw	r3,68(sp)
    6968:	d8800e15 	stw	r2,56(sp)
    696c:	000f1b00 	call	f1b0 <__fixdfsi>
    6970:	1009883a 	mov	r4,r2
    6974:	1023883a 	mov	r17,r2
    6978:	000f2380 	call	f238 <__floatsidf>
    697c:	a009883a 	mov	r4,r20
    6980:	a80b883a 	mov	r5,r21
    6984:	100d883a 	mov	r6,r2
    6988:	180f883a 	mov	r7,r3
    698c:	000e8e00 	call	e8e0 <__subdf3>
    6990:	1813883a 	mov	r9,r3
    6994:	d8c00717 	ldw	r3,28(sp)
    6998:	8c400c04 	addi	r17,r17,48
    699c:	1011883a 	mov	r8,r2
    69a0:	1c400005 	stb	r17,0(r3)
    69a4:	da801617 	ldw	r10,88(sp)
    69a8:	00800044 	movi	r2,1
    69ac:	50802326 	beq	r10,r2,6a3c <_dtoa_r+0x14ac>
    69b0:	d8800717 	ldw	r2,28(sp)
    69b4:	b82b883a 	mov	r21,r23
    69b8:	dc001315 	stw	r16,76(sp)
    69bc:	12a9883a 	add	r20,r2,r10
    69c0:	4807883a 	mov	r3,r9
    69c4:	4005883a 	mov	r2,r8
    69c8:	dc801415 	stw	r18,80(sp)
    69cc:	000d883a 	mov	r6,zero
    69d0:	01d00934 	movhi	r7,16420
    69d4:	1009883a 	mov	r4,r2
    69d8:	180b883a 	mov	r5,r3
    69dc:	000e1bc0 	call	e1bc <__muldf3>
    69e0:	180b883a 	mov	r5,r3
    69e4:	1009883a 	mov	r4,r2
    69e8:	1821883a 	mov	r16,r3
    69ec:	1025883a 	mov	r18,r2
    69f0:	000f1b00 	call	f1b0 <__fixdfsi>
    69f4:	1009883a 	mov	r4,r2
    69f8:	1023883a 	mov	r17,r2
    69fc:	000f2380 	call	f238 <__floatsidf>
    6a00:	9009883a 	mov	r4,r18
    6a04:	800b883a 	mov	r5,r16
    6a08:	100d883a 	mov	r6,r2
    6a0c:	180f883a 	mov	r7,r3
    6a10:	8c400c04 	addi	r17,r17,48
    6a14:	000e8e00 	call	e8e0 <__subdf3>
    6a18:	ad400044 	addi	r21,r21,1
    6a1c:	ac7fffc5 	stb	r17,-1(r21)
    6a20:	ad3fea1e 	bne	r21,r20,69cc <__alt_mem_Flash_flash_data+0xf40069cc>
    6a24:	1813883a 	mov	r9,r3
    6a28:	d8c01017 	ldw	r3,64(sp)
    6a2c:	dc001317 	ldw	r16,76(sp)
    6a30:	dc801417 	ldw	r18,80(sp)
    6a34:	1011883a 	mov	r8,r2
    6a38:	b8ef883a 	add	r23,r23,r3
    6a3c:	d9000e17 	ldw	r4,56(sp)
    6a40:	d9401117 	ldw	r5,68(sp)
    6a44:	000d883a 	mov	r6,zero
    6a48:	01cff834 	movhi	r7,16352
    6a4c:	da001715 	stw	r8,92(sp)
    6a50:	da401515 	stw	r9,84(sp)
    6a54:	000ce100 	call	ce10 <__adddf3>
    6a58:	da001717 	ldw	r8,92(sp)
    6a5c:	da401517 	ldw	r9,84(sp)
    6a60:	1009883a 	mov	r4,r2
    6a64:	400d883a 	mov	r6,r8
    6a68:	480f883a 	mov	r7,r9
    6a6c:	180b883a 	mov	r5,r3
    6a70:	000e0dc0 	call	e0dc <__ledf2>
    6a74:	da001717 	ldw	r8,92(sp)
    6a78:	da401517 	ldw	r9,84(sp)
    6a7c:	10003b0e 	bge	r2,zero,6b6c <_dtoa_r+0x15dc>
    6a80:	d9001217 	ldw	r4,72(sp)
    6a84:	bd7fffc3 	ldbu	r21,-1(r23)
    6a88:	d9000515 	stw	r4,20(sp)
    6a8c:	003d1c06 	br	5f00 <__alt_mem_Flash_flash_data+0xf4005f00>
    6a90:	d8c00817 	ldw	r3,32(sp)
    6a94:	18a9c83a 	sub	r20,r3,r2
    6a98:	0005883a 	mov	r2,zero
    6a9c:	003d3706 	br	5f7c <__alt_mem_Flash_flash_data+0xf4005f7c>
    6aa0:	00800044 	movi	r2,1
    6aa4:	003dd006 	br	61e8 <__alt_mem_Flash_flash_data+0xf40061e8>
    6aa8:	d8c00217 	ldw	r3,8(sp)
    6aac:	00800d84 	movi	r2,54
    6ab0:	dd400917 	ldw	r21,36(sp)
    6ab4:	10c5c83a 	sub	r2,r2,r3
    6ab8:	dd000817 	ldw	r20,32(sp)
    6abc:	003d2f06 	br	5f7c <__alt_mem_Flash_flash_data+0xf4005f7c>
    6ac0:	9029883a 	mov	r20,r18
    6ac4:	982b883a 	mov	r21,r19
    6ac8:	04400084 	movi	r17,2
    6acc:	003bc606 	br	59e8 <__alt_mem_Flash_flash_data+0xf40059e8>
    6ad0:	d8800617 	ldw	r2,24(sp)
    6ad4:	103efc26 	beq	r2,zero,66c8 <__alt_mem_Flash_flash_data+0xf40066c8>
    6ad8:	d8c00c17 	ldw	r3,48(sp)
    6adc:	00fc890e 	bge	zero,r3,5d04 <__alt_mem_Flash_flash_data+0xf4005d04>
    6ae0:	a80b883a 	mov	r5,r21
    6ae4:	a009883a 	mov	r4,r20
    6ae8:	000d883a 	mov	r6,zero
    6aec:	01d00934 	movhi	r7,16420
    6af0:	000e1bc0 	call	e1bc <__muldf3>
    6af4:	89000044 	addi	r4,r17,1
    6af8:	1029883a 	mov	r20,r2
    6afc:	182b883a 	mov	r21,r3
    6b00:	000f2380 	call	f238 <__floatsidf>
    6b04:	a009883a 	mov	r4,r20
    6b08:	a80b883a 	mov	r5,r21
    6b0c:	100d883a 	mov	r6,r2
    6b10:	180f883a 	mov	r7,r3
    6b14:	000e1bc0 	call	e1bc <__muldf3>
    6b18:	1009883a 	mov	r4,r2
    6b1c:	180b883a 	mov	r5,r3
    6b20:	000d883a 	mov	r6,zero
    6b24:	01d00734 	movhi	r7,16412
    6b28:	000ce100 	call	ce10 <__adddf3>
    6b2c:	d9000517 	ldw	r4,20(sp)
    6b30:	1023883a 	mov	r17,r2
    6b34:	00bf3034 	movhi	r2,64704
    6b38:	213fffc4 	addi	r4,r4,-1
    6b3c:	1885883a 	add	r2,r3,r2
    6b40:	d9001215 	stw	r4,72(sp)
    6b44:	d8800e15 	stw	r2,56(sp)
    6b48:	da800c17 	ldw	r10,48(sp)
    6b4c:	003bc306 	br	5a5c <__alt_mem_Flash_flash_data+0xf4005a5c>
    6b50:	b039883a 	mov	fp,r22
    6b54:	01000e44 	movi	r4,57
    6b58:	8825883a 	mov	r18,r17
    6b5c:	9dc00044 	addi	r23,r19,1
    6b60:	99000005 	stb	r4,0(r19)
    6b64:	a023883a 	mov	r17,r20
    6b68:	003dae06 	br	6224 <__alt_mem_Flash_flash_data+0xf4006224>
    6b6c:	d9800e17 	ldw	r6,56(sp)
    6b70:	d9c01117 	ldw	r7,68(sp)
    6b74:	0009883a 	mov	r4,zero
    6b78:	014ff834 	movhi	r5,16352
    6b7c:	da001715 	stw	r8,92(sp)
    6b80:	da401515 	stw	r9,84(sp)
    6b84:	000e8e00 	call	e8e0 <__subdf3>
    6b88:	da001717 	ldw	r8,92(sp)
    6b8c:	da401517 	ldw	r9,84(sp)
    6b90:	1009883a 	mov	r4,r2
    6b94:	180b883a 	mov	r5,r3
    6b98:	400d883a 	mov	r6,r8
    6b9c:	480f883a 	mov	r7,r9
    6ba0:	000dffc0 	call	dffc <__gedf2>
    6ba4:	00bc570e 	bge	zero,r2,5d04 <__alt_mem_Flash_flash_data+0xf4005d04>
    6ba8:	01000c04 	movi	r4,48
    6bac:	00000106 	br	6bb4 <_dtoa_r+0x1624>
    6bb0:	102f883a 	mov	r23,r2
    6bb4:	b8bfffc4 	addi	r2,r23,-1
    6bb8:	10c00007 	ldb	r3,0(r2)
    6bbc:	193ffc26 	beq	r3,r4,6bb0 <__alt_mem_Flash_flash_data+0xf4006bb0>
    6bc0:	d9801217 	ldw	r6,72(sp)
    6bc4:	d9800515 	stw	r6,20(sp)
    6bc8:	003c1f06 	br	5c48 <__alt_mem_Flash_flash_data+0xf4005c48>
    6bcc:	d8801217 	ldw	r2,72(sp)
    6bd0:	dc001117 	ldw	r16,68(sp)
    6bd4:	d8800515 	stw	r2,20(sp)
    6bd8:	003cc906 	br	5f00 <__alt_mem_Flash_flash_data+0xf4005f00>
    6bdc:	dd801317 	ldw	r22,76(sp)
    6be0:	dc001117 	ldw	r16,68(sp)
    6be4:	dcc01417 	ldw	r19,80(sp)
    6be8:	dc801017 	ldw	r18,64(sp)
    6bec:	003c4506 	br	5d04 <__alt_mem_Flash_flash_data+0xf4005d04>
    6bf0:	103e5d1e 	bne	r2,zero,6568 <__alt_mem_Flash_flash_data+0xf4006568>
    6bf4:	4080004c 	andi	r2,r8,1
    6bf8:	103e5b26 	beq	r2,zero,6568 <__alt_mem_Flash_flash_data+0xf4006568>
    6bfc:	003e5706 	br	655c <__alt_mem_Flash_flash_data+0xf400655c>
    6c00:	d8c00317 	ldw	r3,12(sp)
    6c04:	00800084 	movi	r2,2
    6c08:	10c00a16 	blt	r2,r3,6c34 <_dtoa_r+0x16a4>
    6c0c:	d9000c17 	ldw	r4,48(sp)
    6c10:	003e8306 	br	6620 <__alt_mem_Flash_flash_data+0xf4006620>
    6c14:	04400084 	movi	r17,2
    6c18:	003b7306 	br	59e8 <__alt_mem_Flash_flash_data+0xf40059e8>
    6c1c:	d9801217 	ldw	r6,72(sp)
    6c20:	d9800515 	stw	r6,20(sp)
    6c24:	003cb606 	br	5f00 <__alt_mem_Flash_flash_data+0xf4005f00>
    6c28:	d9001217 	ldw	r4,72(sp)
    6c2c:	d9000515 	stw	r4,20(sp)
    6c30:	003c0506 	br	5c48 <__alt_mem_Flash_flash_data+0xf4005c48>
    6c34:	d9800c17 	ldw	r6,48(sp)
    6c38:	d9800615 	stw	r6,24(sp)
    6c3c:	003e8306 	br	664c <__alt_mem_Flash_flash_data+0xf400664c>
    6c40:	d9800317 	ldw	r6,12(sp)
    6c44:	00800084 	movi	r2,2
    6c48:	11800216 	blt	r2,r6,6c54 <_dtoa_r+0x16c4>
    6c4c:	d8800c17 	ldw	r2,48(sp)
    6c50:	003da606 	br	62ec <__alt_mem_Flash_flash_data+0xf40062ec>
    6c54:	d8800c17 	ldw	r2,48(sp)
    6c58:	d8800615 	stw	r2,24(sp)
    6c5c:	003e7b06 	br	664c <__alt_mem_Flash_flash_data+0xf400664c>
    6c60:	05000044 	movi	r20,1
    6c64:	003b0506 	br	587c <__alt_mem_Flash_flash_data+0xf400587c>
    6c68:	8009883a 	mov	r4,r16
    6c6c:	80001115 	stw	zero,68(r16)
    6c70:	000b883a 	mov	r5,zero
    6c74:	0008c280 	call	8c28 <_Balloc>
    6c78:	d8800715 	stw	r2,28(sp)
    6c7c:	d8c00717 	ldw	r3,28(sp)
    6c80:	00bfffc4 	movi	r2,-1
    6c84:	01000044 	movi	r4,1
    6c88:	d8800c15 	stw	r2,48(sp)
    6c8c:	80c01015 	stw	r3,64(r16)
    6c90:	d9000b15 	stw	r4,44(sp)
    6c94:	d8800615 	stw	r2,24(sp)
    6c98:	d8002215 	stw	zero,136(sp)
    6c9c:	003c1906 	br	5d04 <__alt_mem_Flash_flash_data+0xf4005d04>
    6ca0:	193d2926 	beq	r3,r4,6148 <__alt_mem_Flash_flash_data+0xf4006148>
    6ca4:	00c00f04 	movi	r3,60
    6ca8:	1885c83a 	sub	r2,r3,r2
    6cac:	003d7b06 	br	629c <__alt_mem_Flash_flash_data+0xf400629c>
    6cb0:	000b883a 	mov	r5,zero
    6cb4:	003b1006 	br	58f8 <__alt_mem_Flash_flash_data+0xf40058f8>

00006cb8 <__sflush_r>:
    6cb8:	2880030b 	ldhu	r2,12(r5)
    6cbc:	defffb04 	addi	sp,sp,-20
    6cc0:	dcc00315 	stw	r19,12(sp)
    6cc4:	dc400115 	stw	r17,4(sp)
    6cc8:	dfc00415 	stw	ra,16(sp)
    6ccc:	dc800215 	stw	r18,8(sp)
    6cd0:	dc000015 	stw	r16,0(sp)
    6cd4:	10c0020c 	andi	r3,r2,8
    6cd8:	2823883a 	mov	r17,r5
    6cdc:	2027883a 	mov	r19,r4
    6ce0:	1800311e 	bne	r3,zero,6da8 <__sflush_r+0xf0>
    6ce4:	28c00117 	ldw	r3,4(r5)
    6ce8:	10820014 	ori	r2,r2,2048
    6cec:	2880030d 	sth	r2,12(r5)
    6cf0:	00c04b0e 	bge	zero,r3,6e20 <__sflush_r+0x168>
    6cf4:	8a000a17 	ldw	r8,40(r17)
    6cf8:	40002326 	beq	r8,zero,6d88 <__sflush_r+0xd0>
    6cfc:	9c000017 	ldw	r16,0(r19)
    6d00:	10c4000c 	andi	r3,r2,4096
    6d04:	98000015 	stw	zero,0(r19)
    6d08:	18004826 	beq	r3,zero,6e2c <__sflush_r+0x174>
    6d0c:	89801417 	ldw	r6,80(r17)
    6d10:	10c0010c 	andi	r3,r2,4
    6d14:	18000626 	beq	r3,zero,6d30 <__sflush_r+0x78>
    6d18:	88c00117 	ldw	r3,4(r17)
    6d1c:	88800c17 	ldw	r2,48(r17)
    6d20:	30cdc83a 	sub	r6,r6,r3
    6d24:	10000226 	beq	r2,zero,6d30 <__sflush_r+0x78>
    6d28:	88800f17 	ldw	r2,60(r17)
    6d2c:	308dc83a 	sub	r6,r6,r2
    6d30:	89400717 	ldw	r5,28(r17)
    6d34:	9809883a 	mov	r4,r19
    6d38:	000f883a 	mov	r7,zero
    6d3c:	403ee83a 	callr	r8
    6d40:	00ffffc4 	movi	r3,-1
    6d44:	10c04426 	beq	r2,r3,6e58 <__sflush_r+0x1a0>
    6d48:	88c0030b 	ldhu	r3,12(r17)
    6d4c:	89000417 	ldw	r4,16(r17)
    6d50:	88000115 	stw	zero,4(r17)
    6d54:	197dffcc 	andi	r5,r3,63487
    6d58:	8940030d 	sth	r5,12(r17)
    6d5c:	89000015 	stw	r4,0(r17)
    6d60:	18c4000c 	andi	r3,r3,4096
    6d64:	18002c1e 	bne	r3,zero,6e18 <__sflush_r+0x160>
    6d68:	89400c17 	ldw	r5,48(r17)
    6d6c:	9c000015 	stw	r16,0(r19)
    6d70:	28000526 	beq	r5,zero,6d88 <__sflush_r+0xd0>
    6d74:	88801004 	addi	r2,r17,64
    6d78:	28800226 	beq	r5,r2,6d84 <__sflush_r+0xcc>
    6d7c:	9809883a 	mov	r4,r19
    6d80:	00074100 	call	7410 <_free_r>
    6d84:	88000c15 	stw	zero,48(r17)
    6d88:	0005883a 	mov	r2,zero
    6d8c:	dfc00417 	ldw	ra,16(sp)
    6d90:	dcc00317 	ldw	r19,12(sp)
    6d94:	dc800217 	ldw	r18,8(sp)
    6d98:	dc400117 	ldw	r17,4(sp)
    6d9c:	dc000017 	ldw	r16,0(sp)
    6da0:	dec00504 	addi	sp,sp,20
    6da4:	f800283a 	ret
    6da8:	2c800417 	ldw	r18,16(r5)
    6dac:	903ff626 	beq	r18,zero,6d88 <__alt_mem_Flash_flash_data+0xf4006d88>
    6db0:	2c000017 	ldw	r16,0(r5)
    6db4:	108000cc 	andi	r2,r2,3
    6db8:	2c800015 	stw	r18,0(r5)
    6dbc:	84a1c83a 	sub	r16,r16,r18
    6dc0:	1000131e 	bne	r2,zero,6e10 <__sflush_r+0x158>
    6dc4:	28800517 	ldw	r2,20(r5)
    6dc8:	88800215 	stw	r2,8(r17)
    6dcc:	04000316 	blt	zero,r16,6ddc <__sflush_r+0x124>
    6dd0:	003fed06 	br	6d88 <__alt_mem_Flash_flash_data+0xf4006d88>
    6dd4:	90a5883a 	add	r18,r18,r2
    6dd8:	043feb0e 	bge	zero,r16,6d88 <__alt_mem_Flash_flash_data+0xf4006d88>
    6ddc:	88800917 	ldw	r2,36(r17)
    6de0:	89400717 	ldw	r5,28(r17)
    6de4:	800f883a 	mov	r7,r16
    6de8:	900d883a 	mov	r6,r18
    6dec:	9809883a 	mov	r4,r19
    6df0:	103ee83a 	callr	r2
    6df4:	80a1c83a 	sub	r16,r16,r2
    6df8:	00bff616 	blt	zero,r2,6dd4 <__alt_mem_Flash_flash_data+0xf4006dd4>
    6dfc:	88c0030b 	ldhu	r3,12(r17)
    6e00:	00bfffc4 	movi	r2,-1
    6e04:	18c01014 	ori	r3,r3,64
    6e08:	88c0030d 	sth	r3,12(r17)
    6e0c:	003fdf06 	br	6d8c <__alt_mem_Flash_flash_data+0xf4006d8c>
    6e10:	0005883a 	mov	r2,zero
    6e14:	003fec06 	br	6dc8 <__alt_mem_Flash_flash_data+0xf4006dc8>
    6e18:	88801415 	stw	r2,80(r17)
    6e1c:	003fd206 	br	6d68 <__alt_mem_Flash_flash_data+0xf4006d68>
    6e20:	28c00f17 	ldw	r3,60(r5)
    6e24:	00ffb316 	blt	zero,r3,6cf4 <__alt_mem_Flash_flash_data+0xf4006cf4>
    6e28:	003fd706 	br	6d88 <__alt_mem_Flash_flash_data+0xf4006d88>
    6e2c:	89400717 	ldw	r5,28(r17)
    6e30:	000d883a 	mov	r6,zero
    6e34:	9809883a 	mov	r4,r19
    6e38:	01c00044 	movi	r7,1
    6e3c:	403ee83a 	callr	r8
    6e40:	100d883a 	mov	r6,r2
    6e44:	00bfffc4 	movi	r2,-1
    6e48:	30801426 	beq	r6,r2,6e9c <__sflush_r+0x1e4>
    6e4c:	8880030b 	ldhu	r2,12(r17)
    6e50:	8a000a17 	ldw	r8,40(r17)
    6e54:	003fae06 	br	6d10 <__alt_mem_Flash_flash_data+0xf4006d10>
    6e58:	98c00017 	ldw	r3,0(r19)
    6e5c:	183fba26 	beq	r3,zero,6d48 <__alt_mem_Flash_flash_data+0xf4006d48>
    6e60:	01000744 	movi	r4,29
    6e64:	19000626 	beq	r3,r4,6e80 <__sflush_r+0x1c8>
    6e68:	01000584 	movi	r4,22
    6e6c:	19000426 	beq	r3,r4,6e80 <__sflush_r+0x1c8>
    6e70:	88c0030b 	ldhu	r3,12(r17)
    6e74:	18c01014 	ori	r3,r3,64
    6e78:	88c0030d 	sth	r3,12(r17)
    6e7c:	003fc306 	br	6d8c <__alt_mem_Flash_flash_data+0xf4006d8c>
    6e80:	8880030b 	ldhu	r2,12(r17)
    6e84:	88c00417 	ldw	r3,16(r17)
    6e88:	88000115 	stw	zero,4(r17)
    6e8c:	10bdffcc 	andi	r2,r2,63487
    6e90:	8880030d 	sth	r2,12(r17)
    6e94:	88c00015 	stw	r3,0(r17)
    6e98:	003fb306 	br	6d68 <__alt_mem_Flash_flash_data+0xf4006d68>
    6e9c:	98800017 	ldw	r2,0(r19)
    6ea0:	103fea26 	beq	r2,zero,6e4c <__alt_mem_Flash_flash_data+0xf4006e4c>
    6ea4:	00c00744 	movi	r3,29
    6ea8:	10c00226 	beq	r2,r3,6eb4 <__sflush_r+0x1fc>
    6eac:	00c00584 	movi	r3,22
    6eb0:	10ffd21e 	bne	r2,r3,6dfc <__alt_mem_Flash_flash_data+0xf4006dfc>
    6eb4:	9c000015 	stw	r16,0(r19)
    6eb8:	0005883a 	mov	r2,zero
    6ebc:	003fb306 	br	6d8c <__alt_mem_Flash_flash_data+0xf4006d8c>

00006ec0 <_fflush_r>:
    6ec0:	defffd04 	addi	sp,sp,-12
    6ec4:	dc000115 	stw	r16,4(sp)
    6ec8:	dfc00215 	stw	ra,8(sp)
    6ecc:	2021883a 	mov	r16,r4
    6ed0:	20000226 	beq	r4,zero,6edc <_fflush_r+0x1c>
    6ed4:	20800e17 	ldw	r2,56(r4)
    6ed8:	10000c26 	beq	r2,zero,6f0c <_fflush_r+0x4c>
    6edc:	2880030f 	ldh	r2,12(r5)
    6ee0:	1000051e 	bne	r2,zero,6ef8 <_fflush_r+0x38>
    6ee4:	0005883a 	mov	r2,zero
    6ee8:	dfc00217 	ldw	ra,8(sp)
    6eec:	dc000117 	ldw	r16,4(sp)
    6ef0:	dec00304 	addi	sp,sp,12
    6ef4:	f800283a 	ret
    6ef8:	8009883a 	mov	r4,r16
    6efc:	dfc00217 	ldw	ra,8(sp)
    6f00:	dc000117 	ldw	r16,4(sp)
    6f04:	dec00304 	addi	sp,sp,12
    6f08:	0006cb81 	jmpi	6cb8 <__sflush_r>
    6f0c:	d9400015 	stw	r5,0(sp)
    6f10:	000729c0 	call	729c <__sinit>
    6f14:	d9400017 	ldw	r5,0(sp)
    6f18:	003ff006 	br	6edc <__alt_mem_Flash_flash_data+0xf4006edc>

00006f1c <fflush>:
    6f1c:	20000526 	beq	r4,zero,6f34 <fflush+0x18>
    6f20:	008000b4 	movhi	r2,2
    6f24:	10bb2904 	addi	r2,r2,-4956
    6f28:	200b883a 	mov	r5,r4
    6f2c:	11000017 	ldw	r4,0(r2)
    6f30:	0006ec01 	jmpi	6ec0 <_fflush_r>
    6f34:	008000b4 	movhi	r2,2
    6f38:	10bb2804 	addi	r2,r2,-4960
    6f3c:	11000017 	ldw	r4,0(r2)
    6f40:	01400034 	movhi	r5,0
    6f44:	295bb004 	addi	r5,r5,28352
    6f48:	0007c841 	jmpi	7c84 <_fwalk_reent>

00006f4c <__fp_lock>:
    6f4c:	0005883a 	mov	r2,zero
    6f50:	f800283a 	ret

00006f54 <__fp_unlock>:
    6f54:	0005883a 	mov	r2,zero
    6f58:	f800283a 	ret

00006f5c <_cleanup_r>:
    6f5c:	01400074 	movhi	r5,1
    6f60:	296e8404 	addi	r5,r5,-17904
    6f64:	0007c841 	jmpi	7c84 <_fwalk_reent>

00006f68 <__sinit.part.1>:
    6f68:	defff704 	addi	sp,sp,-36
    6f6c:	00c00034 	movhi	r3,0
    6f70:	dfc00815 	stw	ra,32(sp)
    6f74:	ddc00715 	stw	r23,28(sp)
    6f78:	dd800615 	stw	r22,24(sp)
    6f7c:	dd400515 	stw	r21,20(sp)
    6f80:	dd000415 	stw	r20,16(sp)
    6f84:	dcc00315 	stw	r19,12(sp)
    6f88:	dc800215 	stw	r18,8(sp)
    6f8c:	dc400115 	stw	r17,4(sp)
    6f90:	dc000015 	stw	r16,0(sp)
    6f94:	18dbd704 	addi	r3,r3,28508
    6f98:	24000117 	ldw	r16,4(r4)
    6f9c:	20c00f15 	stw	r3,60(r4)
    6fa0:	2080bb04 	addi	r2,r4,748
    6fa4:	00c000c4 	movi	r3,3
    6fa8:	20c0b915 	stw	r3,740(r4)
    6fac:	2080ba15 	stw	r2,744(r4)
    6fb0:	2000b815 	stw	zero,736(r4)
    6fb4:	05c00204 	movi	r23,8
    6fb8:	00800104 	movi	r2,4
    6fbc:	2025883a 	mov	r18,r4
    6fc0:	b80d883a 	mov	r6,r23
    6fc4:	81001704 	addi	r4,r16,92
    6fc8:	000b883a 	mov	r5,zero
    6fcc:	80000015 	stw	zero,0(r16)
    6fd0:	80000115 	stw	zero,4(r16)
    6fd4:	80000215 	stw	zero,8(r16)
    6fd8:	8080030d 	sth	r2,12(r16)
    6fdc:	80001915 	stw	zero,100(r16)
    6fe0:	8000038d 	sth	zero,14(r16)
    6fe4:	80000415 	stw	zero,16(r16)
    6fe8:	80000515 	stw	zero,20(r16)
    6fec:	80000615 	stw	zero,24(r16)
    6ff0:	0008b040 	call	8b04 <memset>
    6ff4:	05800074 	movhi	r22,1
    6ff8:	94400217 	ldw	r17,8(r18)
    6ffc:	05400074 	movhi	r21,1
    7000:	05000074 	movhi	r20,1
    7004:	04c00074 	movhi	r19,1
    7008:	b5a87e04 	addi	r22,r22,-24072
    700c:	ad689504 	addi	r21,r21,-23980
    7010:	a528b404 	addi	r20,r20,-23856
    7014:	9ce8cb04 	addi	r19,r19,-23764
    7018:	85800815 	stw	r22,32(r16)
    701c:	85400915 	stw	r21,36(r16)
    7020:	85000a15 	stw	r20,40(r16)
    7024:	84c00b15 	stw	r19,44(r16)
    7028:	84000715 	stw	r16,28(r16)
    702c:	00800284 	movi	r2,10
    7030:	8880030d 	sth	r2,12(r17)
    7034:	00800044 	movi	r2,1
    7038:	89001704 	addi	r4,r17,92
    703c:	b80d883a 	mov	r6,r23
    7040:	000b883a 	mov	r5,zero
    7044:	88000015 	stw	zero,0(r17)
    7048:	88000115 	stw	zero,4(r17)
    704c:	88000215 	stw	zero,8(r17)
    7050:	88001915 	stw	zero,100(r17)
    7054:	8880038d 	sth	r2,14(r17)
    7058:	88000415 	stw	zero,16(r17)
    705c:	88000515 	stw	zero,20(r17)
    7060:	88000615 	stw	zero,24(r17)
    7064:	0008b040 	call	8b04 <memset>
    7068:	94000317 	ldw	r16,12(r18)
    706c:	00800484 	movi	r2,18
    7070:	8c400715 	stw	r17,28(r17)
    7074:	8d800815 	stw	r22,32(r17)
    7078:	8d400915 	stw	r21,36(r17)
    707c:	8d000a15 	stw	r20,40(r17)
    7080:	8cc00b15 	stw	r19,44(r17)
    7084:	8080030d 	sth	r2,12(r16)
    7088:	00800084 	movi	r2,2
    708c:	80000015 	stw	zero,0(r16)
    7090:	80000115 	stw	zero,4(r16)
    7094:	80000215 	stw	zero,8(r16)
    7098:	80001915 	stw	zero,100(r16)
    709c:	8080038d 	sth	r2,14(r16)
    70a0:	80000415 	stw	zero,16(r16)
    70a4:	80000515 	stw	zero,20(r16)
    70a8:	80000615 	stw	zero,24(r16)
    70ac:	81001704 	addi	r4,r16,92
    70b0:	000b883a 	mov	r5,zero
    70b4:	b80d883a 	mov	r6,r23
    70b8:	0008b040 	call	8b04 <memset>
    70bc:	00800044 	movi	r2,1
    70c0:	84000715 	stw	r16,28(r16)
    70c4:	85800815 	stw	r22,32(r16)
    70c8:	85400915 	stw	r21,36(r16)
    70cc:	85000a15 	stw	r20,40(r16)
    70d0:	84c00b15 	stw	r19,44(r16)
    70d4:	90800e15 	stw	r2,56(r18)
    70d8:	dfc00817 	ldw	ra,32(sp)
    70dc:	ddc00717 	ldw	r23,28(sp)
    70e0:	dd800617 	ldw	r22,24(sp)
    70e4:	dd400517 	ldw	r21,20(sp)
    70e8:	dd000417 	ldw	r20,16(sp)
    70ec:	dcc00317 	ldw	r19,12(sp)
    70f0:	dc800217 	ldw	r18,8(sp)
    70f4:	dc400117 	ldw	r17,4(sp)
    70f8:	dc000017 	ldw	r16,0(sp)
    70fc:	dec00904 	addi	sp,sp,36
    7100:	f800283a 	ret

00007104 <__sfmoreglue>:
    7104:	defffc04 	addi	sp,sp,-16
    7108:	dc400115 	stw	r17,4(sp)
    710c:	2c7fffc4 	addi	r17,r5,-1
    7110:	8c401a24 	muli	r17,r17,104
    7114:	dc800215 	stw	r18,8(sp)
    7118:	2825883a 	mov	r18,r5
    711c:	89401d04 	addi	r5,r17,116
    7120:	dc000015 	stw	r16,0(sp)
    7124:	dfc00315 	stw	ra,12(sp)
    7128:	0007fe00 	call	7fe0 <_malloc_r>
    712c:	1021883a 	mov	r16,r2
    7130:	10000726 	beq	r2,zero,7150 <__sfmoreglue+0x4c>
    7134:	11000304 	addi	r4,r2,12
    7138:	10000015 	stw	zero,0(r2)
    713c:	14800115 	stw	r18,4(r2)
    7140:	11000215 	stw	r4,8(r2)
    7144:	000b883a 	mov	r5,zero
    7148:	89801a04 	addi	r6,r17,104
    714c:	0008b040 	call	8b04 <memset>
    7150:	8005883a 	mov	r2,r16
    7154:	dfc00317 	ldw	ra,12(sp)
    7158:	dc800217 	ldw	r18,8(sp)
    715c:	dc400117 	ldw	r17,4(sp)
    7160:	dc000017 	ldw	r16,0(sp)
    7164:	dec00404 	addi	sp,sp,16
    7168:	f800283a 	ret

0000716c <__sfp>:
    716c:	008000b4 	movhi	r2,2
    7170:	defffb04 	addi	sp,sp,-20
    7174:	10bb2804 	addi	r2,r2,-4960
    7178:	dc800215 	stw	r18,8(sp)
    717c:	14800017 	ldw	r18,0(r2)
    7180:	dcc00315 	stw	r19,12(sp)
    7184:	dfc00415 	stw	ra,16(sp)
    7188:	90800e17 	ldw	r2,56(r18)
    718c:	dc400115 	stw	r17,4(sp)
    7190:	dc000015 	stw	r16,0(sp)
    7194:	2027883a 	mov	r19,r4
    7198:	1000021e 	bne	r2,zero,71a4 <__sfp+0x38>
    719c:	9009883a 	mov	r4,r18
    71a0:	0006f680 	call	6f68 <__sinit.part.1>
    71a4:	9480b804 	addi	r18,r18,736
    71a8:	047fffc4 	movi	r17,-1
    71ac:	91400117 	ldw	r5,4(r18)
    71b0:	94000217 	ldw	r16,8(r18)
    71b4:	297fffc4 	addi	r5,r5,-1
    71b8:	28000a16 	blt	r5,zero,71e4 <__sfp+0x78>
    71bc:	8080030f 	ldh	r2,12(r16)
    71c0:	10000c26 	beq	r2,zero,71f4 <__sfp+0x88>
    71c4:	80c01d04 	addi	r3,r16,116
    71c8:	00000206 	br	71d4 <__sfp+0x68>
    71cc:	18bfe60f 	ldh	r2,-104(r3)
    71d0:	10000826 	beq	r2,zero,71f4 <__sfp+0x88>
    71d4:	297fffc4 	addi	r5,r5,-1
    71d8:	1c3ffd04 	addi	r16,r3,-12
    71dc:	18c01a04 	addi	r3,r3,104
    71e0:	2c7ffa1e 	bne	r5,r17,71cc <__alt_mem_Flash_flash_data+0xf40071cc>
    71e4:	90800017 	ldw	r2,0(r18)
    71e8:	10001d26 	beq	r2,zero,7260 <__sfp+0xf4>
    71ec:	1025883a 	mov	r18,r2
    71f0:	003fee06 	br	71ac <__alt_mem_Flash_flash_data+0xf40071ac>
    71f4:	00bfffc4 	movi	r2,-1
    71f8:	8080038d 	sth	r2,14(r16)
    71fc:	00800044 	movi	r2,1
    7200:	8080030d 	sth	r2,12(r16)
    7204:	80001915 	stw	zero,100(r16)
    7208:	80000015 	stw	zero,0(r16)
    720c:	80000215 	stw	zero,8(r16)
    7210:	80000115 	stw	zero,4(r16)
    7214:	80000415 	stw	zero,16(r16)
    7218:	80000515 	stw	zero,20(r16)
    721c:	80000615 	stw	zero,24(r16)
    7220:	81001704 	addi	r4,r16,92
    7224:	000b883a 	mov	r5,zero
    7228:	01800204 	movi	r6,8
    722c:	0008b040 	call	8b04 <memset>
    7230:	8005883a 	mov	r2,r16
    7234:	80000c15 	stw	zero,48(r16)
    7238:	80000d15 	stw	zero,52(r16)
    723c:	80001115 	stw	zero,68(r16)
    7240:	80001215 	stw	zero,72(r16)
    7244:	dfc00417 	ldw	ra,16(sp)
    7248:	dcc00317 	ldw	r19,12(sp)
    724c:	dc800217 	ldw	r18,8(sp)
    7250:	dc400117 	ldw	r17,4(sp)
    7254:	dc000017 	ldw	r16,0(sp)
    7258:	dec00504 	addi	sp,sp,20
    725c:	f800283a 	ret
    7260:	9809883a 	mov	r4,r19
    7264:	01400104 	movi	r5,4
    7268:	00071040 	call	7104 <__sfmoreglue>
    726c:	90800015 	stw	r2,0(r18)
    7270:	103fde1e 	bne	r2,zero,71ec <__alt_mem_Flash_flash_data+0xf40071ec>
    7274:	00800304 	movi	r2,12
    7278:	98800015 	stw	r2,0(r19)
    727c:	0005883a 	mov	r2,zero
    7280:	003ff006 	br	7244 <__alt_mem_Flash_flash_data+0xf4007244>

00007284 <_cleanup>:
    7284:	008000b4 	movhi	r2,2
    7288:	10bb2804 	addi	r2,r2,-4960
    728c:	11000017 	ldw	r4,0(r2)
    7290:	01400074 	movhi	r5,1
    7294:	296e8404 	addi	r5,r5,-17904
    7298:	0007c841 	jmpi	7c84 <_fwalk_reent>

0000729c <__sinit>:
    729c:	20800e17 	ldw	r2,56(r4)
    72a0:	10000126 	beq	r2,zero,72a8 <__sinit+0xc>
    72a4:	f800283a 	ret
    72a8:	0006f681 	jmpi	6f68 <__sinit.part.1>

000072ac <__sfp_lock_acquire>:
    72ac:	f800283a 	ret

000072b0 <__sfp_lock_release>:
    72b0:	f800283a 	ret

000072b4 <__sinit_lock_acquire>:
    72b4:	f800283a 	ret

000072b8 <__sinit_lock_release>:
    72b8:	f800283a 	ret

000072bc <__fp_lock_all>:
    72bc:	008000b4 	movhi	r2,2
    72c0:	10bb2904 	addi	r2,r2,-4956
    72c4:	11000017 	ldw	r4,0(r2)
    72c8:	01400034 	movhi	r5,0
    72cc:	295bd304 	addi	r5,r5,28492
    72d0:	0007bc01 	jmpi	7bc0 <_fwalk>

000072d4 <__fp_unlock_all>:
    72d4:	008000b4 	movhi	r2,2
    72d8:	10bb2904 	addi	r2,r2,-4956
    72dc:	11000017 	ldw	r4,0(r2)
    72e0:	01400034 	movhi	r5,0
    72e4:	295bd504 	addi	r5,r5,28500
    72e8:	0007bc01 	jmpi	7bc0 <_fwalk>

000072ec <_malloc_trim_r>:
    72ec:	defffb04 	addi	sp,sp,-20
    72f0:	dcc00315 	stw	r19,12(sp)
    72f4:	04c000b4 	movhi	r19,2
    72f8:	dc800215 	stw	r18,8(sp)
    72fc:	dc400115 	stw	r17,4(sp)
    7300:	dc000015 	stw	r16,0(sp)
    7304:	dfc00415 	stw	ra,16(sp)
    7308:	2821883a 	mov	r16,r5
    730c:	9cf4b304 	addi	r19,r19,-11572
    7310:	2025883a 	mov	r18,r4
    7314:	000feec0 	call	feec <__malloc_lock>
    7318:	98800217 	ldw	r2,8(r19)
    731c:	14400117 	ldw	r17,4(r2)
    7320:	00bfff04 	movi	r2,-4
    7324:	88a2703a 	and	r17,r17,r2
    7328:	8c21c83a 	sub	r16,r17,r16
    732c:	8403fbc4 	addi	r16,r16,4079
    7330:	8020d33a 	srli	r16,r16,12
    7334:	0083ffc4 	movi	r2,4095
    7338:	843fffc4 	addi	r16,r16,-1
    733c:	8020933a 	slli	r16,r16,12
    7340:	1400060e 	bge	r2,r16,735c <_malloc_trim_r+0x70>
    7344:	9009883a 	mov	r4,r18
    7348:	000b883a 	mov	r5,zero
    734c:	000a1a40 	call	a1a4 <_sbrk_r>
    7350:	98c00217 	ldw	r3,8(r19)
    7354:	1c47883a 	add	r3,r3,r17
    7358:	10c00a26 	beq	r2,r3,7384 <_malloc_trim_r+0x98>
    735c:	9009883a 	mov	r4,r18
    7360:	001000c0 	call	1000c <__malloc_unlock>
    7364:	0005883a 	mov	r2,zero
    7368:	dfc00417 	ldw	ra,16(sp)
    736c:	dcc00317 	ldw	r19,12(sp)
    7370:	dc800217 	ldw	r18,8(sp)
    7374:	dc400117 	ldw	r17,4(sp)
    7378:	dc000017 	ldw	r16,0(sp)
    737c:	dec00504 	addi	sp,sp,20
    7380:	f800283a 	ret
    7384:	9009883a 	mov	r4,r18
    7388:	040bc83a 	sub	r5,zero,r16
    738c:	000a1a40 	call	a1a4 <_sbrk_r>
    7390:	00ffffc4 	movi	r3,-1
    7394:	10c00d26 	beq	r2,r3,73cc <_malloc_trim_r+0xe0>
    7398:	00c000b4 	movhi	r3,2
    739c:	18c36e04 	addi	r3,r3,3512
    73a0:	18800017 	ldw	r2,0(r3)
    73a4:	99000217 	ldw	r4,8(r19)
    73a8:	8c23c83a 	sub	r17,r17,r16
    73ac:	8c400054 	ori	r17,r17,1
    73b0:	1421c83a 	sub	r16,r2,r16
    73b4:	24400115 	stw	r17,4(r4)
    73b8:	9009883a 	mov	r4,r18
    73bc:	1c000015 	stw	r16,0(r3)
    73c0:	001000c0 	call	1000c <__malloc_unlock>
    73c4:	00800044 	movi	r2,1
    73c8:	003fe706 	br	7368 <__alt_mem_Flash_flash_data+0xf4007368>
    73cc:	9009883a 	mov	r4,r18
    73d0:	000b883a 	mov	r5,zero
    73d4:	000a1a40 	call	a1a4 <_sbrk_r>
    73d8:	99000217 	ldw	r4,8(r19)
    73dc:	014003c4 	movi	r5,15
    73e0:	1107c83a 	sub	r3,r2,r4
    73e4:	28ffdd0e 	bge	r5,r3,735c <__alt_mem_Flash_flash_data+0xf400735c>
    73e8:	014000b4 	movhi	r5,2
    73ec:	297b2b04 	addi	r5,r5,-4948
    73f0:	29400017 	ldw	r5,0(r5)
    73f4:	18c00054 	ori	r3,r3,1
    73f8:	20c00115 	stw	r3,4(r4)
    73fc:	00c000b4 	movhi	r3,2
    7400:	1145c83a 	sub	r2,r2,r5
    7404:	18c36e04 	addi	r3,r3,3512
    7408:	18800015 	stw	r2,0(r3)
    740c:	003fd306 	br	735c <__alt_mem_Flash_flash_data+0xf400735c>

00007410 <_free_r>:
    7410:	28004c26 	beq	r5,zero,7544 <_free_r+0x134>
    7414:	defffd04 	addi	sp,sp,-12
    7418:	dc400115 	stw	r17,4(sp)
    741c:	dc000015 	stw	r16,0(sp)
    7420:	2023883a 	mov	r17,r4
    7424:	2821883a 	mov	r16,r5
    7428:	dfc00215 	stw	ra,8(sp)
    742c:	000feec0 	call	feec <__malloc_lock>
    7430:	813fff17 	ldw	r4,-4(r16)
    7434:	00bfff84 	movi	r2,-2
    7438:	024000b4 	movhi	r9,2
    743c:	81bffe04 	addi	r6,r16,-8
    7440:	2084703a 	and	r2,r4,r2
    7444:	4a74b304 	addi	r9,r9,-11572
    7448:	308b883a 	add	r5,r6,r2
    744c:	2a000117 	ldw	r8,4(r5)
    7450:	49c00217 	ldw	r7,8(r9)
    7454:	00ffff04 	movi	r3,-4
    7458:	40c6703a 	and	r3,r8,r3
    745c:	39405326 	beq	r7,r5,75ac <_free_r+0x19c>
    7460:	28c00115 	stw	r3,4(r5)
    7464:	2100004c 	andi	r4,r4,1
    7468:	2000091e 	bne	r4,zero,7490 <_free_r+0x80>
    746c:	81fffe17 	ldw	r7,-8(r16)
    7470:	4a000204 	addi	r8,r9,8
    7474:	31cdc83a 	sub	r6,r6,r7
    7478:	31000217 	ldw	r4,8(r6)
    747c:	11c5883a 	add	r2,r2,r7
    7480:	22006126 	beq	r4,r8,7608 <_free_r+0x1f8>
    7484:	31c00317 	ldw	r7,12(r6)
    7488:	21c00315 	stw	r7,12(r4)
    748c:	39000215 	stw	r4,8(r7)
    7490:	28c9883a 	add	r4,r5,r3
    7494:	21c00117 	ldw	r7,4(r4)
    7498:	39c0004c 	andi	r7,r7,1
    749c:	38000d1e 	bne	r7,zero,74d4 <_free_r+0xc4>
    74a0:	29000217 	ldw	r4,8(r5)
    74a4:	10c5883a 	add	r2,r2,r3
    74a8:	00c000b4 	movhi	r3,2
    74ac:	18f4b504 	addi	r3,r3,-11564
    74b0:	20c07526 	beq	r4,r3,7688 <_free_r+0x278>
    74b4:	29c00317 	ldw	r7,12(r5)
    74b8:	11400054 	ori	r5,r2,1
    74bc:	3087883a 	add	r3,r6,r2
    74c0:	21c00315 	stw	r7,12(r4)
    74c4:	39000215 	stw	r4,8(r7)
    74c8:	31400115 	stw	r5,4(r6)
    74cc:	18800015 	stw	r2,0(r3)
    74d0:	00000406 	br	74e4 <_free_r+0xd4>
    74d4:	10c00054 	ori	r3,r2,1
    74d8:	30c00115 	stw	r3,4(r6)
    74dc:	3087883a 	add	r3,r6,r2
    74e0:	18800015 	stw	r2,0(r3)
    74e4:	00c07fc4 	movi	r3,511
    74e8:	18801736 	bltu	r3,r2,7548 <_free_r+0x138>
    74ec:	1004d0fa 	srli	r2,r2,3
    74f0:	01400044 	movi	r5,1
    74f4:	49000117 	ldw	r4,4(r9)
    74f8:	1087883a 	add	r3,r2,r2
    74fc:	18c7883a 	add	r3,r3,r3
    7500:	1005d0ba 	srai	r2,r2,2
    7504:	18c7883a 	add	r3,r3,r3
    7508:	1a47883a 	add	r3,r3,r9
    750c:	19c00217 	ldw	r7,8(r3)
    7510:	2884983a 	sll	r2,r5,r2
    7514:	30c00315 	stw	r3,12(r6)
    7518:	31c00215 	stw	r7,8(r6)
    751c:	1104b03a 	or	r2,r2,r4
    7520:	19800215 	stw	r6,8(r3)
    7524:	48800115 	stw	r2,4(r9)
    7528:	39800315 	stw	r6,12(r7)
    752c:	8809883a 	mov	r4,r17
    7530:	dfc00217 	ldw	ra,8(sp)
    7534:	dc400117 	ldw	r17,4(sp)
    7538:	dc000017 	ldw	r16,0(sp)
    753c:	dec00304 	addi	sp,sp,12
    7540:	001000c1 	jmpi	1000c <__malloc_unlock>
    7544:	f800283a 	ret
    7548:	1006d27a 	srli	r3,r2,9
    754c:	01000104 	movi	r4,4
    7550:	20c04036 	bltu	r4,r3,7654 <_free_r+0x244>
    7554:	1006d1ba 	srli	r3,r2,6
    7558:	19400e04 	addi	r5,r3,56
    755c:	2947883a 	add	r3,r5,r5
    7560:	18c7883a 	add	r3,r3,r3
    7564:	18c7883a 	add	r3,r3,r3
    7568:	1a49883a 	add	r4,r3,r9
    756c:	20c00217 	ldw	r3,8(r4)
    7570:	01c000b4 	movhi	r7,2
    7574:	39f4b304 	addi	r7,r7,-11572
    7578:	19003b26 	beq	r3,r4,7668 <_free_r+0x258>
    757c:	01ffff04 	movi	r7,-4
    7580:	19400117 	ldw	r5,4(r3)
    7584:	29ca703a 	and	r5,r5,r7
    7588:	1140022e 	bgeu	r2,r5,7594 <_free_r+0x184>
    758c:	18c00217 	ldw	r3,8(r3)
    7590:	20fffb1e 	bne	r4,r3,7580 <__alt_mem_Flash_flash_data+0xf4007580>
    7594:	18800317 	ldw	r2,12(r3)
    7598:	30800315 	stw	r2,12(r6)
    759c:	30c00215 	stw	r3,8(r6)
    75a0:	11800215 	stw	r6,8(r2)
    75a4:	19800315 	stw	r6,12(r3)
    75a8:	003fe006 	br	752c <__alt_mem_Flash_flash_data+0xf400752c>
    75ac:	2100004c 	andi	r4,r4,1
    75b0:	1885883a 	add	r2,r3,r2
    75b4:	2000071e 	bne	r4,zero,75d4 <_free_r+0x1c4>
    75b8:	817ffe17 	ldw	r5,-8(r16)
    75bc:	314dc83a 	sub	r6,r6,r5
    75c0:	30c00317 	ldw	r3,12(r6)
    75c4:	31000217 	ldw	r4,8(r6)
    75c8:	1145883a 	add	r2,r2,r5
    75cc:	20c00315 	stw	r3,12(r4)
    75d0:	19000215 	stw	r4,8(r3)
    75d4:	10c00054 	ori	r3,r2,1
    75d8:	30c00115 	stw	r3,4(r6)
    75dc:	00c000b4 	movhi	r3,2
    75e0:	18fb2c04 	addi	r3,r3,-4944
    75e4:	18c00017 	ldw	r3,0(r3)
    75e8:	49800215 	stw	r6,8(r9)
    75ec:	10ffcf36 	bltu	r2,r3,752c <__alt_mem_Flash_flash_data+0xf400752c>
    75f0:	008000b4 	movhi	r2,2
    75f4:	10834c04 	addi	r2,r2,3376
    75f8:	11400017 	ldw	r5,0(r2)
    75fc:	8809883a 	mov	r4,r17
    7600:	00072ec0 	call	72ec <_malloc_trim_r>
    7604:	003fc906 	br	752c <__alt_mem_Flash_flash_data+0xf400752c>
    7608:	28c9883a 	add	r4,r5,r3
    760c:	21000117 	ldw	r4,4(r4)
    7610:	2100004c 	andi	r4,r4,1
    7614:	20000a1e 	bne	r4,zero,7640 <_free_r+0x230>
    7618:	29000317 	ldw	r4,12(r5)
    761c:	29400217 	ldw	r5,8(r5)
    7620:	10c5883a 	add	r2,r2,r3
    7624:	10c00054 	ori	r3,r2,1
    7628:	29000315 	stw	r4,12(r5)
    762c:	21400215 	stw	r5,8(r4)
    7630:	30c00115 	stw	r3,4(r6)
    7634:	308d883a 	add	r6,r6,r2
    7638:	30800015 	stw	r2,0(r6)
    763c:	003fbb06 	br	752c <__alt_mem_Flash_flash_data+0xf400752c>
    7640:	10c00054 	ori	r3,r2,1
    7644:	30c00115 	stw	r3,4(r6)
    7648:	308d883a 	add	r6,r6,r2
    764c:	30800015 	stw	r2,0(r6)
    7650:	003fb606 	br	752c <__alt_mem_Flash_flash_data+0xf400752c>
    7654:	01000504 	movi	r4,20
    7658:	20c01436 	bltu	r4,r3,76ac <_free_r+0x29c>
    765c:	194016c4 	addi	r5,r3,91
    7660:	2947883a 	add	r3,r5,r5
    7664:	003fbe06 	br	7560 <__alt_mem_Flash_flash_data+0xf4007560>
    7668:	280bd0ba 	srai	r5,r5,2
    766c:	00800044 	movi	r2,1
    7670:	39000117 	ldw	r4,4(r7)
    7674:	114a983a 	sll	r5,r2,r5
    7678:	1805883a 	mov	r2,r3
    767c:	2908b03a 	or	r4,r5,r4
    7680:	39000115 	stw	r4,4(r7)
    7684:	003fc406 	br	7598 <__alt_mem_Flash_flash_data+0xf4007598>
    7688:	49800515 	stw	r6,20(r9)
    768c:	49800415 	stw	r6,16(r9)
    7690:	10c00054 	ori	r3,r2,1
    7694:	31000315 	stw	r4,12(r6)
    7698:	31000215 	stw	r4,8(r6)
    769c:	30c00115 	stw	r3,4(r6)
    76a0:	308d883a 	add	r6,r6,r2
    76a4:	30800015 	stw	r2,0(r6)
    76a8:	003fa006 	br	752c <__alt_mem_Flash_flash_data+0xf400752c>
    76ac:	01001504 	movi	r4,84
    76b0:	20c00436 	bltu	r4,r3,76c4 <_free_r+0x2b4>
    76b4:	1006d33a 	srli	r3,r2,12
    76b8:	19401b84 	addi	r5,r3,110
    76bc:	2947883a 	add	r3,r5,r5
    76c0:	003fa706 	br	7560 <__alt_mem_Flash_flash_data+0xf4007560>
    76c4:	01005504 	movi	r4,340
    76c8:	20c00436 	bltu	r4,r3,76dc <_free_r+0x2cc>
    76cc:	1006d3fa 	srli	r3,r2,15
    76d0:	19401dc4 	addi	r5,r3,119
    76d4:	2947883a 	add	r3,r5,r5
    76d8:	003fa106 	br	7560 <__alt_mem_Flash_flash_data+0xf4007560>
    76dc:	01015504 	movi	r4,1364
    76e0:	20c00436 	bltu	r4,r3,76f4 <_free_r+0x2e4>
    76e4:	1006d4ba 	srli	r3,r2,18
    76e8:	19401f04 	addi	r5,r3,124
    76ec:	2947883a 	add	r3,r5,r5
    76f0:	003f9b06 	br	7560 <__alt_mem_Flash_flash_data+0xf4007560>
    76f4:	00c03f04 	movi	r3,252
    76f8:	01401f84 	movi	r5,126
    76fc:	003f9806 	br	7560 <__alt_mem_Flash_flash_data+0xf4007560>

00007700 <__sfvwrite_r>:
    7700:	30800217 	ldw	r2,8(r6)
    7704:	10006726 	beq	r2,zero,78a4 <__sfvwrite_r+0x1a4>
    7708:	defff404 	addi	sp,sp,-48
    770c:	dd000615 	stw	r20,24(sp)
    7710:	2029883a 	mov	r20,r4
    7714:	2900030b 	ldhu	r4,12(r5)
    7718:	ddc00915 	stw	r23,36(sp)
    771c:	dc000215 	stw	r16,8(sp)
    7720:	dfc00b15 	stw	ra,44(sp)
    7724:	df000a15 	stw	fp,40(sp)
    7728:	dd800815 	stw	r22,32(sp)
    772c:	dd400715 	stw	r21,28(sp)
    7730:	dcc00515 	stw	r19,20(sp)
    7734:	dc800415 	stw	r18,16(sp)
    7738:	dc400315 	stw	r17,12(sp)
    773c:	2080020c 	andi	r2,r4,8
    7740:	2821883a 	mov	r16,r5
    7744:	302f883a 	mov	r23,r6
    7748:	10002726 	beq	r2,zero,77e8 <__sfvwrite_r+0xe8>
    774c:	28800417 	ldw	r2,16(r5)
    7750:	10002526 	beq	r2,zero,77e8 <__sfvwrite_r+0xe8>
    7754:	2080008c 	andi	r2,r4,2
    7758:	bc400017 	ldw	r17,0(r23)
    775c:	10002a26 	beq	r2,zero,7808 <__sfvwrite_r+0x108>
    7760:	05600034 	movhi	r21,32768
    7764:	0027883a 	mov	r19,zero
    7768:	0025883a 	mov	r18,zero
    776c:	ad7f0004 	addi	r21,r21,-1024
    7770:	980d883a 	mov	r6,r19
    7774:	a009883a 	mov	r4,r20
    7778:	90004626 	beq	r18,zero,7894 <__sfvwrite_r+0x194>
    777c:	900f883a 	mov	r7,r18
    7780:	81400717 	ldw	r5,28(r16)
    7784:	ac80022e 	bgeu	r21,r18,7790 <__sfvwrite_r+0x90>
    7788:	01e00034 	movhi	r7,32768
    778c:	39ff0004 	addi	r7,r7,-1024
    7790:	80800917 	ldw	r2,36(r16)
    7794:	103ee83a 	callr	r2
    7798:	0080520e 	bge	zero,r2,78e4 <__sfvwrite_r+0x1e4>
    779c:	b8c00217 	ldw	r3,8(r23)
    77a0:	98a7883a 	add	r19,r19,r2
    77a4:	90a5c83a 	sub	r18,r18,r2
    77a8:	1885c83a 	sub	r2,r3,r2
    77ac:	b8800215 	stw	r2,8(r23)
    77b0:	103fef1e 	bne	r2,zero,7770 <__alt_mem_Flash_flash_data+0xf4007770>
    77b4:	0005883a 	mov	r2,zero
    77b8:	dfc00b17 	ldw	ra,44(sp)
    77bc:	df000a17 	ldw	fp,40(sp)
    77c0:	ddc00917 	ldw	r23,36(sp)
    77c4:	dd800817 	ldw	r22,32(sp)
    77c8:	dd400717 	ldw	r21,28(sp)
    77cc:	dd000617 	ldw	r20,24(sp)
    77d0:	dcc00517 	ldw	r19,20(sp)
    77d4:	dc800417 	ldw	r18,16(sp)
    77d8:	dc400317 	ldw	r17,12(sp)
    77dc:	dc000217 	ldw	r16,8(sp)
    77e0:	dec00c04 	addi	sp,sp,48
    77e4:	f800283a 	ret
    77e8:	a009883a 	mov	r4,r20
    77ec:	800b883a 	mov	r5,r16
    77f0:	000523c0 	call	523c <__swsetup_r>
    77f4:	1000ec1e 	bne	r2,zero,7ba8 <__sfvwrite_r+0x4a8>
    77f8:	8100030b 	ldhu	r4,12(r16)
    77fc:	bc400017 	ldw	r17,0(r23)
    7800:	2080008c 	andi	r2,r4,2
    7804:	103fd61e 	bne	r2,zero,7760 <__alt_mem_Flash_flash_data+0xf4007760>
    7808:	2080004c 	andi	r2,r4,1
    780c:	10003a1e 	bne	r2,zero,78f8 <__sfvwrite_r+0x1f8>
    7810:	0039883a 	mov	fp,zero
    7814:	0025883a 	mov	r18,zero
    7818:	90001a26 	beq	r18,zero,7884 <__sfvwrite_r+0x184>
    781c:	2080800c 	andi	r2,r4,512
    7820:	85800217 	ldw	r22,8(r16)
    7824:	10007626 	beq	r2,zero,7a00 <__sfvwrite_r+0x300>
    7828:	b027883a 	mov	r19,r22
    782c:	95809436 	bltu	r18,r22,7a80 <__sfvwrite_r+0x380>
    7830:	2081200c 	andi	r2,r4,1152
    7834:	10009f1e 	bne	r2,zero,7ab4 <__sfvwrite_r+0x3b4>
    7838:	81000017 	ldw	r4,0(r16)
    783c:	e00b883a 	mov	r5,fp
    7840:	980d883a 	mov	r6,r19
    7844:	00089a80 	call	89a8 <memmove>
    7848:	81000217 	ldw	r4,8(r16)
    784c:	81400017 	ldw	r5,0(r16)
    7850:	9005883a 	mov	r2,r18
    7854:	2587c83a 	sub	r3,r4,r22
    7858:	2ce7883a 	add	r19,r5,r19
    785c:	80c00215 	stw	r3,8(r16)
    7860:	84c00015 	stw	r19,0(r16)
    7864:	b8c00217 	ldw	r3,8(r23)
    7868:	e0b9883a 	add	fp,fp,r2
    786c:	90a5c83a 	sub	r18,r18,r2
    7870:	1885c83a 	sub	r2,r3,r2
    7874:	b8800215 	stw	r2,8(r23)
    7878:	103fce26 	beq	r2,zero,77b4 <__alt_mem_Flash_flash_data+0xf40077b4>
    787c:	8100030b 	ldhu	r4,12(r16)
    7880:	903fe61e 	bne	r18,zero,781c <__alt_mem_Flash_flash_data+0xf400781c>
    7884:	8f000017 	ldw	fp,0(r17)
    7888:	8c800117 	ldw	r18,4(r17)
    788c:	8c400204 	addi	r17,r17,8
    7890:	003fe106 	br	7818 <__alt_mem_Flash_flash_data+0xf4007818>
    7894:	8cc00017 	ldw	r19,0(r17)
    7898:	8c800117 	ldw	r18,4(r17)
    789c:	8c400204 	addi	r17,r17,8
    78a0:	003fb306 	br	7770 <__alt_mem_Flash_flash_data+0xf4007770>
    78a4:	0005883a 	mov	r2,zero
    78a8:	f800283a 	ret
    78ac:	00a00034 	movhi	r2,32768
    78b0:	10bfffc4 	addi	r2,r2,-1
    78b4:	9009883a 	mov	r4,r18
    78b8:	1480012e 	bgeu	r2,r18,78c0 <__sfvwrite_r+0x1c0>
    78bc:	1009883a 	mov	r4,r2
    78c0:	980b883a 	mov	r5,r19
    78c4:	000cd500 	call	cd50 <__divsi3>
    78c8:	81400717 	ldw	r5,28(r16)
    78cc:	80c00917 	ldw	r3,36(r16)
    78d0:	988f383a 	mul	r7,r19,r2
    78d4:	a009883a 	mov	r4,r20
    78d8:	e00d883a 	mov	r6,fp
    78dc:	183ee83a 	callr	r3
    78e0:	00bfe016 	blt	zero,r2,7864 <__alt_mem_Flash_flash_data+0xf4007864>
    78e4:	8080030b 	ldhu	r2,12(r16)
    78e8:	10801014 	ori	r2,r2,64
    78ec:	8080030d 	sth	r2,12(r16)
    78f0:	00bfffc4 	movi	r2,-1
    78f4:	003fb006 	br	77b8 <__alt_mem_Flash_flash_data+0xf40077b8>
    78f8:	0027883a 	mov	r19,zero
    78fc:	0011883a 	mov	r8,zero
    7900:	0039883a 	mov	fp,zero
    7904:	0025883a 	mov	r18,zero
    7908:	90001f26 	beq	r18,zero,7988 <__sfvwrite_r+0x288>
    790c:	40006026 	beq	r8,zero,7a90 <__sfvwrite_r+0x390>
    7910:	982b883a 	mov	r21,r19
    7914:	94c0012e 	bgeu	r18,r19,791c <__sfvwrite_r+0x21c>
    7918:	902b883a 	mov	r21,r18
    791c:	81000017 	ldw	r4,0(r16)
    7920:	80800417 	ldw	r2,16(r16)
    7924:	a82d883a 	mov	r22,r21
    7928:	81800217 	ldw	r6,8(r16)
    792c:	81c00517 	ldw	r7,20(r16)
    7930:	1100022e 	bgeu	r2,r4,793c <__sfvwrite_r+0x23c>
    7934:	31c7883a 	add	r3,r6,r7
    7938:	1d401816 	blt	r3,r21,799c <__sfvwrite_r+0x29c>
    793c:	a9c04416 	blt	r21,r7,7a50 <__sfvwrite_r+0x350>
    7940:	80800917 	ldw	r2,36(r16)
    7944:	81400717 	ldw	r5,28(r16)
    7948:	a009883a 	mov	r4,r20
    794c:	da000115 	stw	r8,4(sp)
    7950:	e00d883a 	mov	r6,fp
    7954:	103ee83a 	callr	r2
    7958:	102d883a 	mov	r22,r2
    795c:	da000117 	ldw	r8,4(sp)
    7960:	00bfe00e 	bge	zero,r2,78e4 <__alt_mem_Flash_flash_data+0xf40078e4>
    7964:	9da7c83a 	sub	r19,r19,r22
    7968:	98001f26 	beq	r19,zero,79e8 <__sfvwrite_r+0x2e8>
    796c:	b8800217 	ldw	r2,8(r23)
    7970:	e5b9883a 	add	fp,fp,r22
    7974:	95a5c83a 	sub	r18,r18,r22
    7978:	15adc83a 	sub	r22,r2,r22
    797c:	bd800215 	stw	r22,8(r23)
    7980:	b03f8c26 	beq	r22,zero,77b4 <__alt_mem_Flash_flash_data+0xf40077b4>
    7984:	903fe11e 	bne	r18,zero,790c <__alt_mem_Flash_flash_data+0xf400790c>
    7988:	8f000017 	ldw	fp,0(r17)
    798c:	8c800117 	ldw	r18,4(r17)
    7990:	0011883a 	mov	r8,zero
    7994:	8c400204 	addi	r17,r17,8
    7998:	003fdb06 	br	7908 <__alt_mem_Flash_flash_data+0xf4007908>
    799c:	180d883a 	mov	r6,r3
    79a0:	e00b883a 	mov	r5,fp
    79a4:	da000115 	stw	r8,4(sp)
    79a8:	d8c00015 	stw	r3,0(sp)
    79ac:	00089a80 	call	89a8 <memmove>
    79b0:	d8c00017 	ldw	r3,0(sp)
    79b4:	80800017 	ldw	r2,0(r16)
    79b8:	a009883a 	mov	r4,r20
    79bc:	800b883a 	mov	r5,r16
    79c0:	10c5883a 	add	r2,r2,r3
    79c4:	80800015 	stw	r2,0(r16)
    79c8:	d8c00015 	stw	r3,0(sp)
    79cc:	0006ec00 	call	6ec0 <_fflush_r>
    79d0:	d8c00017 	ldw	r3,0(sp)
    79d4:	da000117 	ldw	r8,4(sp)
    79d8:	103fc21e 	bne	r2,zero,78e4 <__alt_mem_Flash_flash_data+0xf40078e4>
    79dc:	182d883a 	mov	r22,r3
    79e0:	9da7c83a 	sub	r19,r19,r22
    79e4:	983fe11e 	bne	r19,zero,796c <__alt_mem_Flash_flash_data+0xf400796c>
    79e8:	a009883a 	mov	r4,r20
    79ec:	800b883a 	mov	r5,r16
    79f0:	0006ec00 	call	6ec0 <_fflush_r>
    79f4:	103fbb1e 	bne	r2,zero,78e4 <__alt_mem_Flash_flash_data+0xf40078e4>
    79f8:	0011883a 	mov	r8,zero
    79fc:	003fdb06 	br	796c <__alt_mem_Flash_flash_data+0xf400796c>
    7a00:	81000017 	ldw	r4,0(r16)
    7a04:	80800417 	ldw	r2,16(r16)
    7a08:	11000236 	bltu	r2,r4,7a14 <__sfvwrite_r+0x314>
    7a0c:	84c00517 	ldw	r19,20(r16)
    7a10:	94ffa62e 	bgeu	r18,r19,78ac <__alt_mem_Flash_flash_data+0xf40078ac>
    7a14:	9027883a 	mov	r19,r18
    7a18:	b480012e 	bgeu	r22,r18,7a20 <__sfvwrite_r+0x320>
    7a1c:	b027883a 	mov	r19,r22
    7a20:	e00b883a 	mov	r5,fp
    7a24:	980d883a 	mov	r6,r19
    7a28:	00089a80 	call	89a8 <memmove>
    7a2c:	80800217 	ldw	r2,8(r16)
    7a30:	80c00017 	ldw	r3,0(r16)
    7a34:	14c5c83a 	sub	r2,r2,r19
    7a38:	1cc7883a 	add	r3,r3,r19
    7a3c:	80800215 	stw	r2,8(r16)
    7a40:	80c00015 	stw	r3,0(r16)
    7a44:	10004326 	beq	r2,zero,7b54 <__sfvwrite_r+0x454>
    7a48:	9805883a 	mov	r2,r19
    7a4c:	003f8506 	br	7864 <__alt_mem_Flash_flash_data+0xf4007864>
    7a50:	a80d883a 	mov	r6,r21
    7a54:	e00b883a 	mov	r5,fp
    7a58:	da000115 	stw	r8,4(sp)
    7a5c:	00089a80 	call	89a8 <memmove>
    7a60:	80800217 	ldw	r2,8(r16)
    7a64:	80c00017 	ldw	r3,0(r16)
    7a68:	da000117 	ldw	r8,4(sp)
    7a6c:	1545c83a 	sub	r2,r2,r21
    7a70:	1d6b883a 	add	r21,r3,r21
    7a74:	80800215 	stw	r2,8(r16)
    7a78:	85400015 	stw	r21,0(r16)
    7a7c:	003fb906 	br	7964 <__alt_mem_Flash_flash_data+0xf4007964>
    7a80:	81000017 	ldw	r4,0(r16)
    7a84:	902d883a 	mov	r22,r18
    7a88:	9027883a 	mov	r19,r18
    7a8c:	003f6b06 	br	783c <__alt_mem_Flash_flash_data+0xf400783c>
    7a90:	e009883a 	mov	r4,fp
    7a94:	01400284 	movi	r5,10
    7a98:	900d883a 	mov	r6,r18
    7a9c:	00087880 	call	8788 <memchr>
    7aa0:	10003e26 	beq	r2,zero,7b9c <__sfvwrite_r+0x49c>
    7aa4:	10800044 	addi	r2,r2,1
    7aa8:	1727c83a 	sub	r19,r2,fp
    7aac:	02000044 	movi	r8,1
    7ab0:	003f9706 	br	7910 <__alt_mem_Flash_flash_data+0xf4007910>
    7ab4:	80800517 	ldw	r2,20(r16)
    7ab8:	81400417 	ldw	r5,16(r16)
    7abc:	80c00017 	ldw	r3,0(r16)
    7ac0:	10a7883a 	add	r19,r2,r2
    7ac4:	9885883a 	add	r2,r19,r2
    7ac8:	1026d7fa 	srli	r19,r2,31
    7acc:	196bc83a 	sub	r21,r3,r5
    7ad0:	a9800044 	addi	r6,r21,1
    7ad4:	9885883a 	add	r2,r19,r2
    7ad8:	1027d07a 	srai	r19,r2,1
    7adc:	3485883a 	add	r2,r6,r18
    7ae0:	980d883a 	mov	r6,r19
    7ae4:	9880022e 	bgeu	r19,r2,7af0 <__sfvwrite_r+0x3f0>
    7ae8:	1027883a 	mov	r19,r2
    7aec:	100d883a 	mov	r6,r2
    7af0:	2101000c 	andi	r4,r4,1024
    7af4:	20001c26 	beq	r4,zero,7b68 <__sfvwrite_r+0x468>
    7af8:	a009883a 	mov	r4,r20
    7afc:	300b883a 	mov	r5,r6
    7b00:	0007fe00 	call	7fe0 <_malloc_r>
    7b04:	102d883a 	mov	r22,r2
    7b08:	10002926 	beq	r2,zero,7bb0 <__sfvwrite_r+0x4b0>
    7b0c:	81400417 	ldw	r5,16(r16)
    7b10:	1009883a 	mov	r4,r2
    7b14:	a80d883a 	mov	r6,r21
    7b18:	00088700 	call	8870 <memcpy>
    7b1c:	8080030b 	ldhu	r2,12(r16)
    7b20:	00fedfc4 	movi	r3,-1153
    7b24:	10c4703a 	and	r2,r2,r3
    7b28:	10802014 	ori	r2,r2,128
    7b2c:	8080030d 	sth	r2,12(r16)
    7b30:	b549883a 	add	r4,r22,r21
    7b34:	9d4bc83a 	sub	r5,r19,r21
    7b38:	85800415 	stw	r22,16(r16)
    7b3c:	84c00515 	stw	r19,20(r16)
    7b40:	81000015 	stw	r4,0(r16)
    7b44:	902d883a 	mov	r22,r18
    7b48:	81400215 	stw	r5,8(r16)
    7b4c:	9027883a 	mov	r19,r18
    7b50:	003f3a06 	br	783c <__alt_mem_Flash_flash_data+0xf400783c>
    7b54:	a009883a 	mov	r4,r20
    7b58:	800b883a 	mov	r5,r16
    7b5c:	0006ec00 	call	6ec0 <_fflush_r>
    7b60:	103fb926 	beq	r2,zero,7a48 <__alt_mem_Flash_flash_data+0xf4007a48>
    7b64:	003f5f06 	br	78e4 <__alt_mem_Flash_flash_data+0xf40078e4>
    7b68:	a009883a 	mov	r4,r20
    7b6c:	0009bc80 	call	9bc8 <_realloc_r>
    7b70:	102d883a 	mov	r22,r2
    7b74:	103fee1e 	bne	r2,zero,7b30 <__alt_mem_Flash_flash_data+0xf4007b30>
    7b78:	81400417 	ldw	r5,16(r16)
    7b7c:	a009883a 	mov	r4,r20
    7b80:	00074100 	call	7410 <_free_r>
    7b84:	8080030b 	ldhu	r2,12(r16)
    7b88:	00ffdfc4 	movi	r3,-129
    7b8c:	1884703a 	and	r2,r3,r2
    7b90:	00c00304 	movi	r3,12
    7b94:	a0c00015 	stw	r3,0(r20)
    7b98:	003f5306 	br	78e8 <__alt_mem_Flash_flash_data+0xf40078e8>
    7b9c:	94c00044 	addi	r19,r18,1
    7ba0:	02000044 	movi	r8,1
    7ba4:	003f5a06 	br	7910 <__alt_mem_Flash_flash_data+0xf4007910>
    7ba8:	00bfffc4 	movi	r2,-1
    7bac:	003f0206 	br	77b8 <__alt_mem_Flash_flash_data+0xf40077b8>
    7bb0:	00800304 	movi	r2,12
    7bb4:	a0800015 	stw	r2,0(r20)
    7bb8:	8080030b 	ldhu	r2,12(r16)
    7bbc:	003f4a06 	br	78e8 <__alt_mem_Flash_flash_data+0xf40078e8>

00007bc0 <_fwalk>:
    7bc0:	defff704 	addi	sp,sp,-36
    7bc4:	dd000415 	stw	r20,16(sp)
    7bc8:	dfc00815 	stw	ra,32(sp)
    7bcc:	ddc00715 	stw	r23,28(sp)
    7bd0:	dd800615 	stw	r22,24(sp)
    7bd4:	dd400515 	stw	r21,20(sp)
    7bd8:	dcc00315 	stw	r19,12(sp)
    7bdc:	dc800215 	stw	r18,8(sp)
    7be0:	dc400115 	stw	r17,4(sp)
    7be4:	dc000015 	stw	r16,0(sp)
    7be8:	2500b804 	addi	r20,r4,736
    7bec:	a0002326 	beq	r20,zero,7c7c <_fwalk+0xbc>
    7bf0:	282b883a 	mov	r21,r5
    7bf4:	002f883a 	mov	r23,zero
    7bf8:	05800044 	movi	r22,1
    7bfc:	04ffffc4 	movi	r19,-1
    7c00:	a4400117 	ldw	r17,4(r20)
    7c04:	a4800217 	ldw	r18,8(r20)
    7c08:	8c7fffc4 	addi	r17,r17,-1
    7c0c:	88000d16 	blt	r17,zero,7c44 <_fwalk+0x84>
    7c10:	94000304 	addi	r16,r18,12
    7c14:	94800384 	addi	r18,r18,14
    7c18:	80c0000b 	ldhu	r3,0(r16)
    7c1c:	8c7fffc4 	addi	r17,r17,-1
    7c20:	813ffd04 	addi	r4,r16,-12
    7c24:	b0c0042e 	bgeu	r22,r3,7c38 <_fwalk+0x78>
    7c28:	90c0000f 	ldh	r3,0(r18)
    7c2c:	1cc00226 	beq	r3,r19,7c38 <_fwalk+0x78>
    7c30:	a83ee83a 	callr	r21
    7c34:	b8aeb03a 	or	r23,r23,r2
    7c38:	84001a04 	addi	r16,r16,104
    7c3c:	94801a04 	addi	r18,r18,104
    7c40:	8cfff51e 	bne	r17,r19,7c18 <__alt_mem_Flash_flash_data+0xf4007c18>
    7c44:	a5000017 	ldw	r20,0(r20)
    7c48:	a03fed1e 	bne	r20,zero,7c00 <__alt_mem_Flash_flash_data+0xf4007c00>
    7c4c:	b805883a 	mov	r2,r23
    7c50:	dfc00817 	ldw	ra,32(sp)
    7c54:	ddc00717 	ldw	r23,28(sp)
    7c58:	dd800617 	ldw	r22,24(sp)
    7c5c:	dd400517 	ldw	r21,20(sp)
    7c60:	dd000417 	ldw	r20,16(sp)
    7c64:	dcc00317 	ldw	r19,12(sp)
    7c68:	dc800217 	ldw	r18,8(sp)
    7c6c:	dc400117 	ldw	r17,4(sp)
    7c70:	dc000017 	ldw	r16,0(sp)
    7c74:	dec00904 	addi	sp,sp,36
    7c78:	f800283a 	ret
    7c7c:	002f883a 	mov	r23,zero
    7c80:	003ff206 	br	7c4c <__alt_mem_Flash_flash_data+0xf4007c4c>

00007c84 <_fwalk_reent>:
    7c84:	defff704 	addi	sp,sp,-36
    7c88:	dd400515 	stw	r21,20(sp)
    7c8c:	dfc00815 	stw	ra,32(sp)
    7c90:	ddc00715 	stw	r23,28(sp)
    7c94:	dd800615 	stw	r22,24(sp)
    7c98:	dd000415 	stw	r20,16(sp)
    7c9c:	dcc00315 	stw	r19,12(sp)
    7ca0:	dc800215 	stw	r18,8(sp)
    7ca4:	dc400115 	stw	r17,4(sp)
    7ca8:	dc000015 	stw	r16,0(sp)
    7cac:	2540b804 	addi	r21,r4,736
    7cb0:	a8002326 	beq	r21,zero,7d40 <_fwalk_reent+0xbc>
    7cb4:	2829883a 	mov	r20,r5
    7cb8:	202d883a 	mov	r22,r4
    7cbc:	002f883a 	mov	r23,zero
    7cc0:	04c00044 	movi	r19,1
    7cc4:	04bfffc4 	movi	r18,-1
    7cc8:	ac400117 	ldw	r17,4(r21)
    7ccc:	ac000217 	ldw	r16,8(r21)
    7cd0:	8c7fffc4 	addi	r17,r17,-1
    7cd4:	88000c16 	blt	r17,zero,7d08 <_fwalk_reent+0x84>
    7cd8:	84000304 	addi	r16,r16,12
    7cdc:	80c0000b 	ldhu	r3,0(r16)
    7ce0:	8c7fffc4 	addi	r17,r17,-1
    7ce4:	817ffd04 	addi	r5,r16,-12
    7ce8:	98c0052e 	bgeu	r19,r3,7d00 <_fwalk_reent+0x7c>
    7cec:	80c0008f 	ldh	r3,2(r16)
    7cf0:	b009883a 	mov	r4,r22
    7cf4:	1c800226 	beq	r3,r18,7d00 <_fwalk_reent+0x7c>
    7cf8:	a03ee83a 	callr	r20
    7cfc:	b8aeb03a 	or	r23,r23,r2
    7d00:	84001a04 	addi	r16,r16,104
    7d04:	8cbff51e 	bne	r17,r18,7cdc <__alt_mem_Flash_flash_data+0xf4007cdc>
    7d08:	ad400017 	ldw	r21,0(r21)
    7d0c:	a83fee1e 	bne	r21,zero,7cc8 <__alt_mem_Flash_flash_data+0xf4007cc8>
    7d10:	b805883a 	mov	r2,r23
    7d14:	dfc00817 	ldw	ra,32(sp)
    7d18:	ddc00717 	ldw	r23,28(sp)
    7d1c:	dd800617 	ldw	r22,24(sp)
    7d20:	dd400517 	ldw	r21,20(sp)
    7d24:	dd000417 	ldw	r20,16(sp)
    7d28:	dcc00317 	ldw	r19,12(sp)
    7d2c:	dc800217 	ldw	r18,8(sp)
    7d30:	dc400117 	ldw	r17,4(sp)
    7d34:	dc000017 	ldw	r16,0(sp)
    7d38:	dec00904 	addi	sp,sp,36
    7d3c:	f800283a 	ret
    7d40:	002f883a 	mov	r23,zero
    7d44:	003ff206 	br	7d10 <__alt_mem_Flash_flash_data+0xf4007d10>

00007d48 <_setlocale_r>:
    7d48:	30001b26 	beq	r6,zero,7db8 <_setlocale_r+0x70>
    7d4c:	014000b4 	movhi	r5,2
    7d50:	defffe04 	addi	sp,sp,-8
    7d54:	29723304 	addi	r5,r5,-14132
    7d58:	3009883a 	mov	r4,r6
    7d5c:	dc000015 	stw	r16,0(sp)
    7d60:	dfc00115 	stw	ra,4(sp)
    7d64:	3021883a 	mov	r16,r6
    7d68:	000a3340 	call	a334 <strcmp>
    7d6c:	1000061e 	bne	r2,zero,7d88 <_setlocale_r+0x40>
    7d70:	008000b4 	movhi	r2,2
    7d74:	10b23204 	addi	r2,r2,-14136
    7d78:	dfc00117 	ldw	ra,4(sp)
    7d7c:	dc000017 	ldw	r16,0(sp)
    7d80:	dec00204 	addi	sp,sp,8
    7d84:	f800283a 	ret
    7d88:	014000b4 	movhi	r5,2
    7d8c:	29723204 	addi	r5,r5,-14136
    7d90:	8009883a 	mov	r4,r16
    7d94:	000a3340 	call	a334 <strcmp>
    7d98:	103ff526 	beq	r2,zero,7d70 <__alt_mem_Flash_flash_data+0xf4007d70>
    7d9c:	014000b4 	movhi	r5,2
    7da0:	29721d04 	addi	r5,r5,-14220
    7da4:	8009883a 	mov	r4,r16
    7da8:	000a3340 	call	a334 <strcmp>
    7dac:	103ff026 	beq	r2,zero,7d70 <__alt_mem_Flash_flash_data+0xf4007d70>
    7db0:	0005883a 	mov	r2,zero
    7db4:	003ff006 	br	7d78 <__alt_mem_Flash_flash_data+0xf4007d78>
    7db8:	008000b4 	movhi	r2,2
    7dbc:	10b23204 	addi	r2,r2,-14136
    7dc0:	f800283a 	ret

00007dc4 <__locale_charset>:
    7dc4:	008000b4 	movhi	r2,2
    7dc8:	10b49d04 	addi	r2,r2,-11660
    7dcc:	f800283a 	ret

00007dd0 <__locale_mb_cur_max>:
    7dd0:	008000b4 	movhi	r2,2
    7dd4:	10bb2a04 	addi	r2,r2,-4952
    7dd8:	10800017 	ldw	r2,0(r2)
    7ddc:	f800283a 	ret

00007de0 <__locale_msgcharset>:
    7de0:	008000b4 	movhi	r2,2
    7de4:	10b49504 	addi	r2,r2,-11692
    7de8:	f800283a 	ret

00007dec <__locale_cjk_lang>:
    7dec:	0005883a 	mov	r2,zero
    7df0:	f800283a 	ret

00007df4 <_localeconv_r>:
    7df4:	008000b4 	movhi	r2,2
    7df8:	10b4a504 	addi	r2,r2,-11628
    7dfc:	f800283a 	ret

00007e00 <setlocale>:
    7e00:	00c000b4 	movhi	r3,2
    7e04:	18fb2904 	addi	r3,r3,-4956
    7e08:	2005883a 	mov	r2,r4
    7e0c:	19000017 	ldw	r4,0(r3)
    7e10:	280d883a 	mov	r6,r5
    7e14:	100b883a 	mov	r5,r2
    7e18:	0007d481 	jmpi	7d48 <_setlocale_r>

00007e1c <localeconv>:
    7e1c:	008000b4 	movhi	r2,2
    7e20:	10b4a504 	addi	r2,r2,-11628
    7e24:	f800283a 	ret

00007e28 <__smakebuf_r>:
    7e28:	2880030b 	ldhu	r2,12(r5)
    7e2c:	10c0008c 	andi	r3,r2,2
    7e30:	1800401e 	bne	r3,zero,7f34 <__smakebuf_r+0x10c>
    7e34:	deffec04 	addi	sp,sp,-80
    7e38:	dc000f15 	stw	r16,60(sp)
    7e3c:	2821883a 	mov	r16,r5
    7e40:	2940038f 	ldh	r5,14(r5)
    7e44:	dc401015 	stw	r17,64(sp)
    7e48:	dfc01315 	stw	ra,76(sp)
    7e4c:	dcc01215 	stw	r19,72(sp)
    7e50:	dc801115 	stw	r18,68(sp)
    7e54:	2023883a 	mov	r17,r4
    7e58:	28001b16 	blt	r5,zero,7ec8 <__smakebuf_r+0xa0>
    7e5c:	d80d883a 	mov	r6,sp
    7e60:	000bcf40 	call	bcf4 <_fstat_r>
    7e64:	10001716 	blt	r2,zero,7ec4 <__smakebuf_r+0x9c>
    7e68:	d8800117 	ldw	r2,4(sp)
    7e6c:	00e00014 	movui	r3,32768
    7e70:	10bc000c 	andi	r2,r2,61440
    7e74:	10c03726 	beq	r2,r3,7f54 <__smakebuf_r+0x12c>
    7e78:	80c0030b 	ldhu	r3,12(r16)
    7e7c:	18c20014 	ori	r3,r3,2048
    7e80:	80c0030d 	sth	r3,12(r16)
    7e84:	00c80004 	movi	r3,8192
    7e88:	10c03c1e 	bne	r2,r3,7f7c <__smakebuf_r+0x154>
    7e8c:	8140038f 	ldh	r5,14(r16)
    7e90:	8809883a 	mov	r4,r17
    7e94:	000bd4c0 	call	bd4c <_isatty_r>
    7e98:	10004e26 	beq	r2,zero,7fd4 <__smakebuf_r+0x1ac>
    7e9c:	8080030b 	ldhu	r2,12(r16)
    7ea0:	04c00044 	movi	r19,1
    7ea4:	80c010c4 	addi	r3,r16,67
    7ea8:	14c4b03a 	or	r2,r2,r19
    7eac:	8080030d 	sth	r2,12(r16)
    7eb0:	80c00015 	stw	r3,0(r16)
    7eb4:	80c00415 	stw	r3,16(r16)
    7eb8:	84c00515 	stw	r19,20(r16)
    7ebc:	04810004 	movi	r18,1024
    7ec0:	00000706 	br	7ee0 <__smakebuf_r+0xb8>
    7ec4:	8080030b 	ldhu	r2,12(r16)
    7ec8:	10c0200c 	andi	r3,r2,128
    7ecc:	18001f1e 	bne	r3,zero,7f4c <__smakebuf_r+0x124>
    7ed0:	04810004 	movi	r18,1024
    7ed4:	10820014 	ori	r2,r2,2048
    7ed8:	8080030d 	sth	r2,12(r16)
    7edc:	0027883a 	mov	r19,zero
    7ee0:	8809883a 	mov	r4,r17
    7ee4:	900b883a 	mov	r5,r18
    7ee8:	0007fe00 	call	7fe0 <_malloc_r>
    7eec:	10002e26 	beq	r2,zero,7fa8 <__smakebuf_r+0x180>
    7ef0:	80c0030b 	ldhu	r3,12(r16)
    7ef4:	01000034 	movhi	r4,0
    7ef8:	211bd704 	addi	r4,r4,28508
    7efc:	89000f15 	stw	r4,60(r17)
    7f00:	18c02014 	ori	r3,r3,128
    7f04:	80c0030d 	sth	r3,12(r16)
    7f08:	80800015 	stw	r2,0(r16)
    7f0c:	80800415 	stw	r2,16(r16)
    7f10:	84800515 	stw	r18,20(r16)
    7f14:	98001c1e 	bne	r19,zero,7f88 <__smakebuf_r+0x160>
    7f18:	dfc01317 	ldw	ra,76(sp)
    7f1c:	dcc01217 	ldw	r19,72(sp)
    7f20:	dc801117 	ldw	r18,68(sp)
    7f24:	dc401017 	ldw	r17,64(sp)
    7f28:	dc000f17 	ldw	r16,60(sp)
    7f2c:	dec01404 	addi	sp,sp,80
    7f30:	f800283a 	ret
    7f34:	288010c4 	addi	r2,r5,67
    7f38:	28800015 	stw	r2,0(r5)
    7f3c:	28800415 	stw	r2,16(r5)
    7f40:	00800044 	movi	r2,1
    7f44:	28800515 	stw	r2,20(r5)
    7f48:	f800283a 	ret
    7f4c:	04801004 	movi	r18,64
    7f50:	003fe006 	br	7ed4 <__alt_mem_Flash_flash_data+0xf4007ed4>
    7f54:	81000a17 	ldw	r4,40(r16)
    7f58:	00c00074 	movhi	r3,1
    7f5c:	18e8b404 	addi	r3,r3,-23856
    7f60:	20ffc51e 	bne	r4,r3,7e78 <__alt_mem_Flash_flash_data+0xf4007e78>
    7f64:	80c0030b 	ldhu	r3,12(r16)
    7f68:	01010004 	movi	r4,1024
    7f6c:	81001315 	stw	r4,76(r16)
    7f70:	1906b03a 	or	r3,r3,r4
    7f74:	80c0030d 	sth	r3,12(r16)
    7f78:	003fc206 	br	7e84 <__alt_mem_Flash_flash_data+0xf4007e84>
    7f7c:	0027883a 	mov	r19,zero
    7f80:	04810004 	movi	r18,1024
    7f84:	003fd606 	br	7ee0 <__alt_mem_Flash_flash_data+0xf4007ee0>
    7f88:	8140038f 	ldh	r5,14(r16)
    7f8c:	8809883a 	mov	r4,r17
    7f90:	000bd4c0 	call	bd4c <_isatty_r>
    7f94:	103fe026 	beq	r2,zero,7f18 <__alt_mem_Flash_flash_data+0xf4007f18>
    7f98:	8080030b 	ldhu	r2,12(r16)
    7f9c:	10800054 	ori	r2,r2,1
    7fa0:	8080030d 	sth	r2,12(r16)
    7fa4:	003fdc06 	br	7f18 <__alt_mem_Flash_flash_data+0xf4007f18>
    7fa8:	8080030b 	ldhu	r2,12(r16)
    7fac:	10c0800c 	andi	r3,r2,512
    7fb0:	183fd91e 	bne	r3,zero,7f18 <__alt_mem_Flash_flash_data+0xf4007f18>
    7fb4:	10800094 	ori	r2,r2,2
    7fb8:	80c010c4 	addi	r3,r16,67
    7fbc:	8080030d 	sth	r2,12(r16)
    7fc0:	00800044 	movi	r2,1
    7fc4:	80c00015 	stw	r3,0(r16)
    7fc8:	80c00415 	stw	r3,16(r16)
    7fcc:	80800515 	stw	r2,20(r16)
    7fd0:	003fd106 	br	7f18 <__alt_mem_Flash_flash_data+0xf4007f18>
    7fd4:	04c00044 	movi	r19,1
    7fd8:	04810004 	movi	r18,1024
    7fdc:	003fc006 	br	7ee0 <__alt_mem_Flash_flash_data+0xf4007ee0>

00007fe0 <_malloc_r>:
    7fe0:	defff504 	addi	sp,sp,-44
    7fe4:	dc800315 	stw	r18,12(sp)
    7fe8:	dfc00a15 	stw	ra,40(sp)
    7fec:	df000915 	stw	fp,36(sp)
    7ff0:	ddc00815 	stw	r23,32(sp)
    7ff4:	dd800715 	stw	r22,28(sp)
    7ff8:	dd400615 	stw	r21,24(sp)
    7ffc:	dd000515 	stw	r20,20(sp)
    8000:	dcc00415 	stw	r19,16(sp)
    8004:	dc400215 	stw	r17,8(sp)
    8008:	dc000115 	stw	r16,4(sp)
    800c:	288002c4 	addi	r2,r5,11
    8010:	00c00584 	movi	r3,22
    8014:	2025883a 	mov	r18,r4
    8018:	18802a2e 	bgeu	r3,r2,80c4 <_malloc_r+0xe4>
    801c:	047ffe04 	movi	r17,-8
    8020:	1462703a 	and	r17,r2,r17
    8024:	88009e16 	blt	r17,zero,82a0 <_malloc_r+0x2c0>
    8028:	89409d36 	bltu	r17,r5,82a0 <_malloc_r+0x2c0>
    802c:	000feec0 	call	feec <__malloc_lock>
    8030:	00807dc4 	movi	r2,503
    8034:	14402736 	bltu	r2,r17,80d4 <_malloc_r+0xf4>
    8038:	8806d0fa 	srli	r3,r17,3
    803c:	04c000b4 	movhi	r19,2
    8040:	9cf4b304 	addi	r19,r19,-11572
    8044:	18c5883a 	add	r2,r3,r3
    8048:	1085883a 	add	r2,r2,r2
    804c:	1085883a 	add	r2,r2,r2
    8050:	9885883a 	add	r2,r19,r2
    8054:	14000317 	ldw	r16,12(r2)
    8058:	80814a26 	beq	r16,r2,8584 <_malloc_r+0x5a4>
    805c:	80c00117 	ldw	r3,4(r16)
    8060:	81000317 	ldw	r4,12(r16)
    8064:	00bfff04 	movi	r2,-4
    8068:	1884703a 	and	r2,r3,r2
    806c:	81400217 	ldw	r5,8(r16)
    8070:	8085883a 	add	r2,r16,r2
    8074:	10c00117 	ldw	r3,4(r2)
    8078:	29000315 	stw	r4,12(r5)
    807c:	21400215 	stw	r5,8(r4)
    8080:	18c00054 	ori	r3,r3,1
    8084:	10c00115 	stw	r3,4(r2)
    8088:	9009883a 	mov	r4,r18
    808c:	001000c0 	call	1000c <__malloc_unlock>
    8090:	80800204 	addi	r2,r16,8
    8094:	dfc00a17 	ldw	ra,40(sp)
    8098:	df000917 	ldw	fp,36(sp)
    809c:	ddc00817 	ldw	r23,32(sp)
    80a0:	dd800717 	ldw	r22,28(sp)
    80a4:	dd400617 	ldw	r21,24(sp)
    80a8:	dd000517 	ldw	r20,20(sp)
    80ac:	dcc00417 	ldw	r19,16(sp)
    80b0:	dc800317 	ldw	r18,12(sp)
    80b4:	dc400217 	ldw	r17,8(sp)
    80b8:	dc000117 	ldw	r16,4(sp)
    80bc:	dec00b04 	addi	sp,sp,44
    80c0:	f800283a 	ret
    80c4:	04400404 	movi	r17,16
    80c8:	89407536 	bltu	r17,r5,82a0 <_malloc_r+0x2c0>
    80cc:	000feec0 	call	feec <__malloc_lock>
    80d0:	003fd906 	br	8038 <__alt_mem_Flash_flash_data+0xf4008038>
    80d4:	8806d27a 	srli	r3,r17,9
    80d8:	18007526 	beq	r3,zero,82b0 <_malloc_r+0x2d0>
    80dc:	00800104 	movi	r2,4
    80e0:	10c0ef36 	bltu	r2,r3,84a0 <_malloc_r+0x4c0>
    80e4:	8806d1ba 	srli	r3,r17,6
    80e8:	19c00e04 	addi	r7,r3,56
    80ec:	39cb883a 	add	r5,r7,r7
    80f0:	04c000b4 	movhi	r19,2
    80f4:	294b883a 	add	r5,r5,r5
    80f8:	9cf4b304 	addi	r19,r19,-11572
    80fc:	294b883a 	add	r5,r5,r5
    8100:	994b883a 	add	r5,r19,r5
    8104:	2c000317 	ldw	r16,12(r5)
    8108:	2c000e26 	beq	r5,r16,8144 <_malloc_r+0x164>
    810c:	80800117 	ldw	r2,4(r16)
    8110:	01bfff04 	movi	r6,-4
    8114:	010003c4 	movi	r4,15
    8118:	1184703a 	and	r2,r2,r6
    811c:	1447c83a 	sub	r3,r2,r17
    8120:	20c00716 	blt	r4,r3,8140 <_malloc_r+0x160>
    8124:	1800650e 	bge	r3,zero,82bc <_malloc_r+0x2dc>
    8128:	84000317 	ldw	r16,12(r16)
    812c:	2c000526 	beq	r5,r16,8144 <_malloc_r+0x164>
    8130:	80800117 	ldw	r2,4(r16)
    8134:	1184703a 	and	r2,r2,r6
    8138:	1447c83a 	sub	r3,r2,r17
    813c:	20fff90e 	bge	r4,r3,8124 <__alt_mem_Flash_flash_data+0xf4008124>
    8140:	39ffffc4 	addi	r7,r7,-1
    8144:	38c00044 	addi	r3,r7,1
    8148:	018000b4 	movhi	r6,2
    814c:	9c000417 	ldw	r16,16(r19)
    8150:	31b4b304 	addi	r6,r6,-11572
    8154:	32400204 	addi	r9,r6,8
    8158:	82410326 	beq	r16,r9,8568 <_malloc_r+0x588>
    815c:	81000117 	ldw	r4,4(r16)
    8160:	00bfff04 	movi	r2,-4
    8164:	208e703a 	and	r7,r4,r2
    8168:	3c45c83a 	sub	r2,r7,r17
    816c:	010003c4 	movi	r4,15
    8170:	2080ee16 	blt	r4,r2,852c <_malloc_r+0x54c>
    8174:	32400515 	stw	r9,20(r6)
    8178:	32400415 	stw	r9,16(r6)
    817c:	1000510e 	bge	r2,zero,82c4 <_malloc_r+0x2e4>
    8180:	00807fc4 	movi	r2,511
    8184:	11c0ce36 	bltu	r2,r7,84c0 <_malloc_r+0x4e0>
    8188:	3808d0fa 	srli	r4,r7,3
    818c:	01c00044 	movi	r7,1
    8190:	30800117 	ldw	r2,4(r6)
    8194:	210b883a 	add	r5,r4,r4
    8198:	294b883a 	add	r5,r5,r5
    819c:	2009d0ba 	srai	r4,r4,2
    81a0:	294b883a 	add	r5,r5,r5
    81a4:	298b883a 	add	r5,r5,r6
    81a8:	2a000217 	ldw	r8,8(r5)
    81ac:	3908983a 	sll	r4,r7,r4
    81b0:	81400315 	stw	r5,12(r16)
    81b4:	82000215 	stw	r8,8(r16)
    81b8:	2088b03a 	or	r4,r4,r2
    81bc:	2c000215 	stw	r16,8(r5)
    81c0:	31000115 	stw	r4,4(r6)
    81c4:	44000315 	stw	r16,12(r8)
    81c8:	1805d0ba 	srai	r2,r3,2
    81cc:	01400044 	movi	r5,1
    81d0:	288a983a 	sll	r5,r5,r2
    81d4:	21404336 	bltu	r4,r5,82e4 <_malloc_r+0x304>
    81d8:	2144703a 	and	r2,r4,r5
    81dc:	10000a1e 	bne	r2,zero,8208 <_malloc_r+0x228>
    81e0:	00bfff04 	movi	r2,-4
    81e4:	294b883a 	add	r5,r5,r5
    81e8:	1886703a 	and	r3,r3,r2
    81ec:	2144703a 	and	r2,r4,r5
    81f0:	18c00104 	addi	r3,r3,4
    81f4:	1000041e 	bne	r2,zero,8208 <_malloc_r+0x228>
    81f8:	294b883a 	add	r5,r5,r5
    81fc:	2144703a 	and	r2,r4,r5
    8200:	18c00104 	addi	r3,r3,4
    8204:	103ffc26 	beq	r2,zero,81f8 <__alt_mem_Flash_flash_data+0xf40081f8>
    8208:	023fff04 	movi	r8,-4
    820c:	01c003c4 	movi	r7,15
    8210:	18c5883a 	add	r2,r3,r3
    8214:	1085883a 	add	r2,r2,r2
    8218:	1085883a 	add	r2,r2,r2
    821c:	9895883a 	add	r10,r19,r2
    8220:	52c00304 	addi	r11,r10,12
    8224:	1819883a 	mov	r12,r3
    8228:	5c000017 	ldw	r16,0(r11)
    822c:	59bffd04 	addi	r6,r11,-12
    8230:	8180041e 	bne	r16,r6,8244 <_malloc_r+0x264>
    8234:	0000ce06 	br	8570 <_malloc_r+0x590>
    8238:	2000d70e 	bge	r4,zero,8598 <_malloc_r+0x5b8>
    823c:	84000317 	ldw	r16,12(r16)
    8240:	8180cb26 	beq	r16,r6,8570 <_malloc_r+0x590>
    8244:	80800117 	ldw	r2,4(r16)
    8248:	1204703a 	and	r2,r2,r8
    824c:	1449c83a 	sub	r4,r2,r17
    8250:	393ff90e 	bge	r7,r4,8238 <__alt_mem_Flash_flash_data+0xf4008238>
    8254:	80800317 	ldw	r2,12(r16)
    8258:	80c00217 	ldw	r3,8(r16)
    825c:	89400054 	ori	r5,r17,1
    8260:	81400115 	stw	r5,4(r16)
    8264:	18800315 	stw	r2,12(r3)
    8268:	10c00215 	stw	r3,8(r2)
    826c:	8463883a 	add	r17,r16,r17
    8270:	9c400515 	stw	r17,20(r19)
    8274:	9c400415 	stw	r17,16(r19)
    8278:	20800054 	ori	r2,r4,1
    827c:	88800115 	stw	r2,4(r17)
    8280:	8a400315 	stw	r9,12(r17)
    8284:	8a400215 	stw	r9,8(r17)
    8288:	8923883a 	add	r17,r17,r4
    828c:	89000015 	stw	r4,0(r17)
    8290:	9009883a 	mov	r4,r18
    8294:	001000c0 	call	1000c <__malloc_unlock>
    8298:	80800204 	addi	r2,r16,8
    829c:	003f7d06 	br	8094 <__alt_mem_Flash_flash_data+0xf4008094>
    82a0:	00800304 	movi	r2,12
    82a4:	90800015 	stw	r2,0(r18)
    82a8:	0005883a 	mov	r2,zero
    82ac:	003f7906 	br	8094 <__alt_mem_Flash_flash_data+0xf4008094>
    82b0:	01401f84 	movi	r5,126
    82b4:	01c00fc4 	movi	r7,63
    82b8:	003f8d06 	br	80f0 <__alt_mem_Flash_flash_data+0xf40080f0>
    82bc:	81000317 	ldw	r4,12(r16)
    82c0:	003f6a06 	br	806c <__alt_mem_Flash_flash_data+0xf400806c>
    82c4:	81c5883a 	add	r2,r16,r7
    82c8:	10c00117 	ldw	r3,4(r2)
    82cc:	9009883a 	mov	r4,r18
    82d0:	18c00054 	ori	r3,r3,1
    82d4:	10c00115 	stw	r3,4(r2)
    82d8:	001000c0 	call	1000c <__malloc_unlock>
    82dc:	80800204 	addi	r2,r16,8
    82e0:	003f6c06 	br	8094 <__alt_mem_Flash_flash_data+0xf4008094>
    82e4:	9c000217 	ldw	r16,8(r19)
    82e8:	00bfff04 	movi	r2,-4
    82ec:	85800117 	ldw	r22,4(r16)
    82f0:	b0ac703a 	and	r22,r22,r2
    82f4:	b4400336 	bltu	r22,r17,8304 <_malloc_r+0x324>
    82f8:	b445c83a 	sub	r2,r22,r17
    82fc:	00c003c4 	movi	r3,15
    8300:	18805d16 	blt	r3,r2,8478 <_malloc_r+0x498>
    8304:	05c000b4 	movhi	r23,2
    8308:	008000b4 	movhi	r2,2
    830c:	bdfb2b04 	addi	r23,r23,-4948
    8310:	10834c04 	addi	r2,r2,3376
    8314:	15400017 	ldw	r21,0(r2)
    8318:	b9000017 	ldw	r4,0(r23)
    831c:	00ffffc4 	movi	r3,-1
    8320:	858d883a 	add	r6,r16,r22
    8324:	8d6b883a 	add	r21,r17,r21
    8328:	20c0e426 	beq	r4,r3,86bc <_malloc_r+0x6dc>
    832c:	ad4403c4 	addi	r21,r21,4111
    8330:	00fc0004 	movi	r3,-4096
    8334:	a8ea703a 	and	r21,r21,r3
    8338:	9009883a 	mov	r4,r18
    833c:	a80b883a 	mov	r5,r21
    8340:	d9800015 	stw	r6,0(sp)
    8344:	000a1a40 	call	a1a4 <_sbrk_r>
    8348:	00ffffc4 	movi	r3,-1
    834c:	1029883a 	mov	r20,r2
    8350:	d9800017 	ldw	r6,0(sp)
    8354:	10c0a426 	beq	r2,r3,85e8 <_malloc_r+0x608>
    8358:	1180a236 	bltu	r2,r6,85e4 <_malloc_r+0x604>
    835c:	070000b4 	movhi	fp,2
    8360:	e7036e04 	addi	fp,fp,3512
    8364:	e0c00017 	ldw	r3,0(fp)
    8368:	a8c7883a 	add	r3,r21,r3
    836c:	e0c00015 	stw	r3,0(fp)
    8370:	3500da26 	beq	r6,r20,86dc <_malloc_r+0x6fc>
    8374:	b9000017 	ldw	r4,0(r23)
    8378:	00bfffc4 	movi	r2,-1
    837c:	2080e426 	beq	r4,r2,8710 <_malloc_r+0x730>
    8380:	a185c83a 	sub	r2,r20,r6
    8384:	1885883a 	add	r2,r3,r2
    8388:	e0800015 	stw	r2,0(fp)
    838c:	a0c001cc 	andi	r3,r20,7
    8390:	1800b526 	beq	r3,zero,8668 <_malloc_r+0x688>
    8394:	a0e9c83a 	sub	r20,r20,r3
    8398:	00840204 	movi	r2,4104
    839c:	a5000204 	addi	r20,r20,8
    83a0:	10c7c83a 	sub	r3,r2,r3
    83a4:	a545883a 	add	r2,r20,r21
    83a8:	1083ffcc 	andi	r2,r2,4095
    83ac:	18abc83a 	sub	r21,r3,r2
    83b0:	9009883a 	mov	r4,r18
    83b4:	a80b883a 	mov	r5,r21
    83b8:	000a1a40 	call	a1a4 <_sbrk_r>
    83bc:	00ffffc4 	movi	r3,-1
    83c0:	10c0d026 	beq	r2,r3,8704 <_malloc_r+0x724>
    83c4:	1507c83a 	sub	r3,r2,r20
    83c8:	a8c7883a 	add	r3,r21,r3
    83cc:	18c00054 	ori	r3,r3,1
    83d0:	e0800017 	ldw	r2,0(fp)
    83d4:	9d000215 	stw	r20,8(r19)
    83d8:	a0c00115 	stw	r3,4(r20)
    83dc:	a887883a 	add	r3,r21,r2
    83e0:	e0c00015 	stw	r3,0(fp)
    83e4:	84c00e26 	beq	r16,r19,8420 <_malloc_r+0x440>
    83e8:	018003c4 	movi	r6,15
    83ec:	3580a02e 	bgeu	r6,r22,8670 <_malloc_r+0x690>
    83f0:	81400117 	ldw	r5,4(r16)
    83f4:	013ffe04 	movi	r4,-8
    83f8:	b0bffd04 	addi	r2,r22,-12
    83fc:	1104703a 	and	r2,r2,r4
    8400:	2900004c 	andi	r4,r5,1
    8404:	1108b03a 	or	r4,r2,r4
    8408:	81000115 	stw	r4,4(r16)
    840c:	01400144 	movi	r5,5
    8410:	8089883a 	add	r4,r16,r2
    8414:	21400115 	stw	r5,4(r4)
    8418:	21400215 	stw	r5,8(r4)
    841c:	3080c036 	bltu	r6,r2,8720 <_malloc_r+0x740>
    8420:	008000b4 	movhi	r2,2
    8424:	10834b04 	addi	r2,r2,3372
    8428:	11000017 	ldw	r4,0(r2)
    842c:	20c0012e 	bgeu	r4,r3,8434 <_malloc_r+0x454>
    8430:	10c00015 	stw	r3,0(r2)
    8434:	008000b4 	movhi	r2,2
    8438:	10834a04 	addi	r2,r2,3368
    843c:	11000017 	ldw	r4,0(r2)
    8440:	9c000217 	ldw	r16,8(r19)
    8444:	20c0012e 	bgeu	r4,r3,844c <_malloc_r+0x46c>
    8448:	10c00015 	stw	r3,0(r2)
    844c:	80c00117 	ldw	r3,4(r16)
    8450:	00bfff04 	movi	r2,-4
    8454:	1886703a 	and	r3,r3,r2
    8458:	1c45c83a 	sub	r2,r3,r17
    845c:	1c400236 	bltu	r3,r17,8468 <_malloc_r+0x488>
    8460:	00c003c4 	movi	r3,15
    8464:	18800416 	blt	r3,r2,8478 <_malloc_r+0x498>
    8468:	9009883a 	mov	r4,r18
    846c:	001000c0 	call	1000c <__malloc_unlock>
    8470:	0005883a 	mov	r2,zero
    8474:	003f0706 	br	8094 <__alt_mem_Flash_flash_data+0xf4008094>
    8478:	88c00054 	ori	r3,r17,1
    847c:	80c00115 	stw	r3,4(r16)
    8480:	8463883a 	add	r17,r16,r17
    8484:	10800054 	ori	r2,r2,1
    8488:	9c400215 	stw	r17,8(r19)
    848c:	88800115 	stw	r2,4(r17)
    8490:	9009883a 	mov	r4,r18
    8494:	001000c0 	call	1000c <__malloc_unlock>
    8498:	80800204 	addi	r2,r16,8
    849c:	003efd06 	br	8094 <__alt_mem_Flash_flash_data+0xf4008094>
    84a0:	00800504 	movi	r2,20
    84a4:	10c0482e 	bgeu	r2,r3,85c8 <_malloc_r+0x5e8>
    84a8:	00801504 	movi	r2,84
    84ac:	10c06836 	bltu	r2,r3,8650 <_malloc_r+0x670>
    84b0:	8806d33a 	srli	r3,r17,12
    84b4:	19c01b84 	addi	r7,r3,110
    84b8:	39cb883a 	add	r5,r7,r7
    84bc:	003f0c06 	br	80f0 <__alt_mem_Flash_flash_data+0xf40080f0>
    84c0:	3804d27a 	srli	r2,r7,9
    84c4:	01000104 	movi	r4,4
    84c8:	2080422e 	bgeu	r4,r2,85d4 <_malloc_r+0x5f4>
    84cc:	01000504 	movi	r4,20
    84d0:	20807c36 	bltu	r4,r2,86c4 <_malloc_r+0x6e4>
    84d4:	110016c4 	addi	r4,r2,91
    84d8:	210b883a 	add	r5,r4,r4
    84dc:	294b883a 	add	r5,r5,r5
    84e0:	294b883a 	add	r5,r5,r5
    84e4:	994b883a 	add	r5,r19,r5
    84e8:	28800217 	ldw	r2,8(r5)
    84ec:	020000b4 	movhi	r8,2
    84f0:	4234b304 	addi	r8,r8,-11572
    84f4:	11406326 	beq	r2,r5,8684 <_malloc_r+0x6a4>
    84f8:	01bfff04 	movi	r6,-4
    84fc:	11000117 	ldw	r4,4(r2)
    8500:	2188703a 	and	r4,r4,r6
    8504:	3900022e 	bgeu	r7,r4,8510 <_malloc_r+0x530>
    8508:	10800217 	ldw	r2,8(r2)
    850c:	28bffb1e 	bne	r5,r2,84fc <__alt_mem_Flash_flash_data+0xf40084fc>
    8510:	11800317 	ldw	r6,12(r2)
    8514:	99000117 	ldw	r4,4(r19)
    8518:	81800315 	stw	r6,12(r16)
    851c:	80800215 	stw	r2,8(r16)
    8520:	34000215 	stw	r16,8(r6)
    8524:	14000315 	stw	r16,12(r2)
    8528:	003f2706 	br	81c8 <__alt_mem_Flash_flash_data+0xf40081c8>
    852c:	88c00054 	ori	r3,r17,1
    8530:	80c00115 	stw	r3,4(r16)
    8534:	8463883a 	add	r17,r16,r17
    8538:	34400515 	stw	r17,20(r6)
    853c:	34400415 	stw	r17,16(r6)
    8540:	10c00054 	ori	r3,r2,1
    8544:	8a400315 	stw	r9,12(r17)
    8548:	8a400215 	stw	r9,8(r17)
    854c:	88c00115 	stw	r3,4(r17)
    8550:	88a3883a 	add	r17,r17,r2
    8554:	88800015 	stw	r2,0(r17)
    8558:	9009883a 	mov	r4,r18
    855c:	001000c0 	call	1000c <__malloc_unlock>
    8560:	80800204 	addi	r2,r16,8
    8564:	003ecb06 	br	8094 <__alt_mem_Flash_flash_data+0xf4008094>
    8568:	31000117 	ldw	r4,4(r6)
    856c:	003f1606 	br	81c8 <__alt_mem_Flash_flash_data+0xf40081c8>
    8570:	63000044 	addi	r12,r12,1
    8574:	608000cc 	andi	r2,r12,3
    8578:	5ac00204 	addi	r11,r11,8
    857c:	103f2a1e 	bne	r2,zero,8228 <__alt_mem_Flash_flash_data+0xf4008228>
    8580:	00002106 	br	8608 <_malloc_r+0x628>
    8584:	80800204 	addi	r2,r16,8
    8588:	84000517 	ldw	r16,20(r16)
    858c:	143eb31e 	bne	r2,r16,805c <__alt_mem_Flash_flash_data+0xf400805c>
    8590:	18c00084 	addi	r3,r3,2
    8594:	003eec06 	br	8148 <__alt_mem_Flash_flash_data+0xf4008148>
    8598:	8085883a 	add	r2,r16,r2
    859c:	10c00117 	ldw	r3,4(r2)
    85a0:	81000317 	ldw	r4,12(r16)
    85a4:	81400217 	ldw	r5,8(r16)
    85a8:	18c00054 	ori	r3,r3,1
    85ac:	10c00115 	stw	r3,4(r2)
    85b0:	29000315 	stw	r4,12(r5)
    85b4:	21400215 	stw	r5,8(r4)
    85b8:	9009883a 	mov	r4,r18
    85bc:	001000c0 	call	1000c <__malloc_unlock>
    85c0:	80800204 	addi	r2,r16,8
    85c4:	003eb306 	br	8094 <__alt_mem_Flash_flash_data+0xf4008094>
    85c8:	19c016c4 	addi	r7,r3,91
    85cc:	39cb883a 	add	r5,r7,r7
    85d0:	003ec706 	br	80f0 <__alt_mem_Flash_flash_data+0xf40080f0>
    85d4:	3804d1ba 	srli	r2,r7,6
    85d8:	11000e04 	addi	r4,r2,56
    85dc:	210b883a 	add	r5,r4,r4
    85e0:	003fbe06 	br	84dc <__alt_mem_Flash_flash_data+0xf40084dc>
    85e4:	84ff5d26 	beq	r16,r19,835c <__alt_mem_Flash_flash_data+0xf400835c>
    85e8:	9c000217 	ldw	r16,8(r19)
    85ec:	00bfff04 	movi	r2,-4
    85f0:	80c00117 	ldw	r3,4(r16)
    85f4:	1886703a 	and	r3,r3,r2
    85f8:	003f9706 	br	8458 <__alt_mem_Flash_flash_data+0xf4008458>
    85fc:	52800017 	ldw	r10,0(r10)
    8600:	18ffffc4 	addi	r3,r3,-1
    8604:	50805c1e 	bne	r10,r2,8778 <_malloc_r+0x798>
    8608:	190000cc 	andi	r4,r3,3
    860c:	50bffe04 	addi	r2,r10,-8
    8610:	203ffa1e 	bne	r4,zero,85fc <__alt_mem_Flash_flash_data+0xf40085fc>
    8614:	98800117 	ldw	r2,4(r19)
    8618:	0146303a 	nor	r3,zero,r5
    861c:	1884703a 	and	r2,r3,r2
    8620:	98800115 	stw	r2,4(r19)
    8624:	294b883a 	add	r5,r5,r5
    8628:	117f2e36 	bltu	r2,r5,82e4 <__alt_mem_Flash_flash_data+0xf40082e4>
    862c:	283f2d26 	beq	r5,zero,82e4 <__alt_mem_Flash_flash_data+0xf40082e4>
    8630:	1146703a 	and	r3,r2,r5
    8634:	1800521e 	bne	r3,zero,8780 <_malloc_r+0x7a0>
    8638:	6007883a 	mov	r3,r12
    863c:	294b883a 	add	r5,r5,r5
    8640:	1148703a 	and	r4,r2,r5
    8644:	18c00104 	addi	r3,r3,4
    8648:	203ffc26 	beq	r4,zero,863c <__alt_mem_Flash_flash_data+0xf400863c>
    864c:	003ef006 	br	8210 <__alt_mem_Flash_flash_data+0xf4008210>
    8650:	00805504 	movi	r2,340
    8654:	10c01336 	bltu	r2,r3,86a4 <_malloc_r+0x6c4>
    8658:	8806d3fa 	srli	r3,r17,15
    865c:	19c01dc4 	addi	r7,r3,119
    8660:	39cb883a 	add	r5,r7,r7
    8664:	003ea206 	br	80f0 <__alt_mem_Flash_flash_data+0xf40080f0>
    8668:	00c40004 	movi	r3,4096
    866c:	003f4d06 	br	83a4 <__alt_mem_Flash_flash_data+0xf40083a4>
    8670:	00800044 	movi	r2,1
    8674:	a0800115 	stw	r2,4(r20)
    8678:	a021883a 	mov	r16,r20
    867c:	0007883a 	mov	r3,zero
    8680:	003f7506 	br	8458 <__alt_mem_Flash_flash_data+0xf4008458>
    8684:	200bd0ba 	srai	r5,r4,2
    8688:	01800044 	movi	r6,1
    868c:	41000117 	ldw	r4,4(r8)
    8690:	314a983a 	sll	r5,r6,r5
    8694:	100d883a 	mov	r6,r2
    8698:	2908b03a 	or	r4,r5,r4
    869c:	41000115 	stw	r4,4(r8)
    86a0:	003f9d06 	br	8518 <__alt_mem_Flash_flash_data+0xf4008518>
    86a4:	00815504 	movi	r2,1364
    86a8:	10c01336 	bltu	r2,r3,86f8 <_malloc_r+0x718>
    86ac:	8806d4ba 	srli	r3,r17,18
    86b0:	19c01f04 	addi	r7,r3,124
    86b4:	39cb883a 	add	r5,r7,r7
    86b8:	003e8d06 	br	80f0 <__alt_mem_Flash_flash_data+0xf40080f0>
    86bc:	ad400404 	addi	r21,r21,16
    86c0:	003f1d06 	br	8338 <__alt_mem_Flash_flash_data+0xf4008338>
    86c4:	01001504 	movi	r4,84
    86c8:	20801c36 	bltu	r4,r2,873c <_malloc_r+0x75c>
    86cc:	3804d33a 	srli	r2,r7,12
    86d0:	11001b84 	addi	r4,r2,110
    86d4:	210b883a 	add	r5,r4,r4
    86d8:	003f8006 	br	84dc <__alt_mem_Flash_flash_data+0xf40084dc>
    86dc:	3083ffcc 	andi	r2,r6,4095
    86e0:	103f241e 	bne	r2,zero,8374 <__alt_mem_Flash_flash_data+0xf4008374>
    86e4:	99000217 	ldw	r4,8(r19)
    86e8:	ad85883a 	add	r2,r21,r22
    86ec:	10800054 	ori	r2,r2,1
    86f0:	20800115 	stw	r2,4(r4)
    86f4:	003f4a06 	br	8420 <__alt_mem_Flash_flash_data+0xf4008420>
    86f8:	01403f04 	movi	r5,252
    86fc:	01c01f84 	movi	r7,126
    8700:	003e7b06 	br	80f0 <__alt_mem_Flash_flash_data+0xf40080f0>
    8704:	00c00044 	movi	r3,1
    8708:	002b883a 	mov	r21,zero
    870c:	003f3006 	br	83d0 <__alt_mem_Flash_flash_data+0xf40083d0>
    8710:	008000b4 	movhi	r2,2
    8714:	10bb2b04 	addi	r2,r2,-4948
    8718:	15000015 	stw	r20,0(r2)
    871c:	003f1b06 	br	838c <__alt_mem_Flash_flash_data+0xf400838c>
    8720:	9009883a 	mov	r4,r18
    8724:	81400204 	addi	r5,r16,8
    8728:	00074100 	call	7410 <_free_r>
    872c:	008000b4 	movhi	r2,2
    8730:	10836e04 	addi	r2,r2,3512
    8734:	10c00017 	ldw	r3,0(r2)
    8738:	003f3906 	br	8420 <__alt_mem_Flash_flash_data+0xf4008420>
    873c:	01005504 	movi	r4,340
    8740:	20800436 	bltu	r4,r2,8754 <_malloc_r+0x774>
    8744:	3804d3fa 	srli	r2,r7,15
    8748:	11001dc4 	addi	r4,r2,119
    874c:	210b883a 	add	r5,r4,r4
    8750:	003f6206 	br	84dc <__alt_mem_Flash_flash_data+0xf40084dc>
    8754:	01015504 	movi	r4,1364
    8758:	20800436 	bltu	r4,r2,876c <_malloc_r+0x78c>
    875c:	3804d4ba 	srli	r2,r7,18
    8760:	11001f04 	addi	r4,r2,124
    8764:	210b883a 	add	r5,r4,r4
    8768:	003f5c06 	br	84dc <__alt_mem_Flash_flash_data+0xf40084dc>
    876c:	01403f04 	movi	r5,252
    8770:	01001f84 	movi	r4,126
    8774:	003f5906 	br	84dc <__alt_mem_Flash_flash_data+0xf40084dc>
    8778:	98800117 	ldw	r2,4(r19)
    877c:	003fa906 	br	8624 <__alt_mem_Flash_flash_data+0xf4008624>
    8780:	6007883a 	mov	r3,r12
    8784:	003ea206 	br	8210 <__alt_mem_Flash_flash_data+0xf4008210>

00008788 <memchr>:
    8788:	208000cc 	andi	r2,r4,3
    878c:	280f883a 	mov	r7,r5
    8790:	10003526 	beq	r2,zero,8868 <memchr+0xe0>
    8794:	30bfffc4 	addi	r2,r6,-1
    8798:	30001b26 	beq	r6,zero,8808 <memchr+0x80>
    879c:	21800003 	ldbu	r6,0(r4)
    87a0:	28c03fcc 	andi	r3,r5,255
    87a4:	30c01a26 	beq	r6,r3,8810 <memchr+0x88>
    87a8:	180d883a 	mov	r6,r3
    87ac:	00000406 	br	87c0 <memchr+0x38>
    87b0:	10001526 	beq	r2,zero,8808 <memchr+0x80>
    87b4:	20c00003 	ldbu	r3,0(r4)
    87b8:	10bfffc4 	addi	r2,r2,-1
    87bc:	19801426 	beq	r3,r6,8810 <memchr+0x88>
    87c0:	21000044 	addi	r4,r4,1
    87c4:	20c000cc 	andi	r3,r4,3
    87c8:	183ff91e 	bne	r3,zero,87b0 <__alt_mem_Flash_flash_data+0xf40087b0>
    87cc:	024000c4 	movi	r9,3
    87d0:	48801136 	bltu	r9,r2,8818 <memchr+0x90>
    87d4:	10000c26 	beq	r2,zero,8808 <memchr+0x80>
    87d8:	20c00003 	ldbu	r3,0(r4)
    87dc:	29403fcc 	andi	r5,r5,255
    87e0:	19400b26 	beq	r3,r5,8810 <memchr+0x88>
    87e4:	20c00044 	addi	r3,r4,1
    87e8:	2085883a 	add	r2,r4,r2
    87ec:	39803fcc 	andi	r6,r7,255
    87f0:	00000306 	br	8800 <memchr+0x78>
    87f4:	18c00044 	addi	r3,r3,1
    87f8:	197fffc3 	ldbu	r5,-1(r3)
    87fc:	29800426 	beq	r5,r6,8810 <memchr+0x88>
    8800:	1809883a 	mov	r4,r3
    8804:	18bffb1e 	bne	r3,r2,87f4 <__alt_mem_Flash_flash_data+0xf40087f4>
    8808:	0005883a 	mov	r2,zero
    880c:	f800283a 	ret
    8810:	2005883a 	mov	r2,r4
    8814:	f800283a 	ret
    8818:	28c03fcc 	andi	r3,r5,255
    881c:	1810923a 	slli	r8,r3,8
    8820:	02ffbff4 	movhi	r11,65279
    8824:	02a02074 	movhi	r10,32897
    8828:	40c6b03a 	or	r3,r8,r3
    882c:	1810943a 	slli	r8,r3,16
    8830:	5affbfc4 	addi	r11,r11,-257
    8834:	52a02004 	addi	r10,r10,-32640
    8838:	40d0b03a 	or	r8,r8,r3
    883c:	20c00017 	ldw	r3,0(r4)
    8840:	40c6f03a 	xor	r3,r8,r3
    8844:	1acd883a 	add	r6,r3,r11
    8848:	00c6303a 	nor	r3,zero,r3
    884c:	30c6703a 	and	r3,r6,r3
    8850:	1a86703a 	and	r3,r3,r10
    8854:	183fdf1e 	bne	r3,zero,87d4 <__alt_mem_Flash_flash_data+0xf40087d4>
    8858:	10bfff04 	addi	r2,r2,-4
    885c:	21000104 	addi	r4,r4,4
    8860:	48bff636 	bltu	r9,r2,883c <__alt_mem_Flash_flash_data+0xf400883c>
    8864:	003fdb06 	br	87d4 <__alt_mem_Flash_flash_data+0xf40087d4>
    8868:	3005883a 	mov	r2,r6
    886c:	003fd706 	br	87cc <__alt_mem_Flash_flash_data+0xf40087cc>

00008870 <memcpy>:
    8870:	deffff04 	addi	sp,sp,-4
    8874:	dc000015 	stw	r16,0(sp)
    8878:	00c003c4 	movi	r3,15
    887c:	2005883a 	mov	r2,r4
    8880:	1980432e 	bgeu	r3,r6,8990 <memcpy+0x120>
    8884:	2146b03a 	or	r3,r4,r5
    8888:	18c000cc 	andi	r3,r3,3
    888c:	1800421e 	bne	r3,zero,8998 <memcpy+0x128>
    8890:	343ffc04 	addi	r16,r6,-16
    8894:	8020d13a 	srli	r16,r16,4
    8898:	28c00104 	addi	r3,r5,4
    889c:	23400104 	addi	r13,r4,4
    88a0:	801e913a 	slli	r15,r16,4
    88a4:	2b000204 	addi	r12,r5,8
    88a8:	22c00204 	addi	r11,r4,8
    88ac:	7bc00504 	addi	r15,r15,20
    88b0:	2a800304 	addi	r10,r5,12
    88b4:	22400304 	addi	r9,r4,12
    88b8:	2bdf883a 	add	r15,r5,r15
    88bc:	2811883a 	mov	r8,r5
    88c0:	200f883a 	mov	r7,r4
    88c4:	41000017 	ldw	r4,0(r8)
    88c8:	39c00404 	addi	r7,r7,16
    88cc:	18c00404 	addi	r3,r3,16
    88d0:	393ffc15 	stw	r4,-16(r7)
    88d4:	1bbffc17 	ldw	r14,-16(r3)
    88d8:	6b400404 	addi	r13,r13,16
    88dc:	5ac00404 	addi	r11,r11,16
    88e0:	6bbffc15 	stw	r14,-16(r13)
    88e4:	63800017 	ldw	r14,0(r12)
    88e8:	4a400404 	addi	r9,r9,16
    88ec:	42000404 	addi	r8,r8,16
    88f0:	5bbffc15 	stw	r14,-16(r11)
    88f4:	53800017 	ldw	r14,0(r10)
    88f8:	63000404 	addi	r12,r12,16
    88fc:	52800404 	addi	r10,r10,16
    8900:	4bbffc15 	stw	r14,-16(r9)
    8904:	1bffef1e 	bne	r3,r15,88c4 <__alt_mem_Flash_flash_data+0xf40088c4>
    8908:	81c00044 	addi	r7,r16,1
    890c:	380e913a 	slli	r7,r7,4
    8910:	310003cc 	andi	r4,r6,15
    8914:	02c000c4 	movi	r11,3
    8918:	11c7883a 	add	r3,r2,r7
    891c:	29cb883a 	add	r5,r5,r7
    8920:	59001f2e 	bgeu	r11,r4,89a0 <memcpy+0x130>
    8924:	1813883a 	mov	r9,r3
    8928:	2811883a 	mov	r8,r5
    892c:	200f883a 	mov	r7,r4
    8930:	42800017 	ldw	r10,0(r8)
    8934:	4a400104 	addi	r9,r9,4
    8938:	39ffff04 	addi	r7,r7,-4
    893c:	4abfff15 	stw	r10,-4(r9)
    8940:	42000104 	addi	r8,r8,4
    8944:	59fffa36 	bltu	r11,r7,8930 <__alt_mem_Flash_flash_data+0xf4008930>
    8948:	213fff04 	addi	r4,r4,-4
    894c:	2008d0ba 	srli	r4,r4,2
    8950:	318000cc 	andi	r6,r6,3
    8954:	21000044 	addi	r4,r4,1
    8958:	2109883a 	add	r4,r4,r4
    895c:	2109883a 	add	r4,r4,r4
    8960:	1907883a 	add	r3,r3,r4
    8964:	290b883a 	add	r5,r5,r4
    8968:	30000626 	beq	r6,zero,8984 <memcpy+0x114>
    896c:	198d883a 	add	r6,r3,r6
    8970:	29c00003 	ldbu	r7,0(r5)
    8974:	18c00044 	addi	r3,r3,1
    8978:	29400044 	addi	r5,r5,1
    897c:	19ffffc5 	stb	r7,-1(r3)
    8980:	19bffb1e 	bne	r3,r6,8970 <__alt_mem_Flash_flash_data+0xf4008970>
    8984:	dc000017 	ldw	r16,0(sp)
    8988:	dec00104 	addi	sp,sp,4
    898c:	f800283a 	ret
    8990:	2007883a 	mov	r3,r4
    8994:	003ff406 	br	8968 <__alt_mem_Flash_flash_data+0xf4008968>
    8998:	2007883a 	mov	r3,r4
    899c:	003ff306 	br	896c <__alt_mem_Flash_flash_data+0xf400896c>
    89a0:	200d883a 	mov	r6,r4
    89a4:	003ff006 	br	8968 <__alt_mem_Flash_flash_data+0xf4008968>

000089a8 <memmove>:
    89a8:	2005883a 	mov	r2,r4
    89ac:	29000b2e 	bgeu	r5,r4,89dc <memmove+0x34>
    89b0:	298f883a 	add	r7,r5,r6
    89b4:	21c0092e 	bgeu	r4,r7,89dc <memmove+0x34>
    89b8:	2187883a 	add	r3,r4,r6
    89bc:	198bc83a 	sub	r5,r3,r6
    89c0:	30004b26 	beq	r6,zero,8af0 <memmove+0x148>
    89c4:	39ffffc4 	addi	r7,r7,-1
    89c8:	39000003 	ldbu	r4,0(r7)
    89cc:	18ffffc4 	addi	r3,r3,-1
    89d0:	19000005 	stb	r4,0(r3)
    89d4:	197ffb1e 	bne	r3,r5,89c4 <__alt_mem_Flash_flash_data+0xf40089c4>
    89d8:	f800283a 	ret
    89dc:	00c003c4 	movi	r3,15
    89e0:	1980412e 	bgeu	r3,r6,8ae8 <memmove+0x140>
    89e4:	1146b03a 	or	r3,r2,r5
    89e8:	18c000cc 	andi	r3,r3,3
    89ec:	1800411e 	bne	r3,zero,8af4 <memmove+0x14c>
    89f0:	33fffc04 	addi	r15,r6,-16
    89f4:	781ed13a 	srli	r15,r15,4
    89f8:	28c00104 	addi	r3,r5,4
    89fc:	13400104 	addi	r13,r2,4
    8a00:	781c913a 	slli	r14,r15,4
    8a04:	2b000204 	addi	r12,r5,8
    8a08:	12c00204 	addi	r11,r2,8
    8a0c:	73800504 	addi	r14,r14,20
    8a10:	2a800304 	addi	r10,r5,12
    8a14:	12400304 	addi	r9,r2,12
    8a18:	2b9d883a 	add	r14,r5,r14
    8a1c:	2811883a 	mov	r8,r5
    8a20:	100f883a 	mov	r7,r2
    8a24:	41000017 	ldw	r4,0(r8)
    8a28:	39c00404 	addi	r7,r7,16
    8a2c:	18c00404 	addi	r3,r3,16
    8a30:	393ffc15 	stw	r4,-16(r7)
    8a34:	193ffc17 	ldw	r4,-16(r3)
    8a38:	6b400404 	addi	r13,r13,16
    8a3c:	5ac00404 	addi	r11,r11,16
    8a40:	693ffc15 	stw	r4,-16(r13)
    8a44:	61000017 	ldw	r4,0(r12)
    8a48:	4a400404 	addi	r9,r9,16
    8a4c:	42000404 	addi	r8,r8,16
    8a50:	593ffc15 	stw	r4,-16(r11)
    8a54:	51000017 	ldw	r4,0(r10)
    8a58:	63000404 	addi	r12,r12,16
    8a5c:	52800404 	addi	r10,r10,16
    8a60:	493ffc15 	stw	r4,-16(r9)
    8a64:	1bbfef1e 	bne	r3,r14,8a24 <__alt_mem_Flash_flash_data+0xf4008a24>
    8a68:	79000044 	addi	r4,r15,1
    8a6c:	2008913a 	slli	r4,r4,4
    8a70:	328003cc 	andi	r10,r6,15
    8a74:	02c000c4 	movi	r11,3
    8a78:	1107883a 	add	r3,r2,r4
    8a7c:	290b883a 	add	r5,r5,r4
    8a80:	5a801e2e 	bgeu	r11,r10,8afc <memmove+0x154>
    8a84:	1813883a 	mov	r9,r3
    8a88:	2811883a 	mov	r8,r5
    8a8c:	500f883a 	mov	r7,r10
    8a90:	41000017 	ldw	r4,0(r8)
    8a94:	4a400104 	addi	r9,r9,4
    8a98:	39ffff04 	addi	r7,r7,-4
    8a9c:	493fff15 	stw	r4,-4(r9)
    8aa0:	42000104 	addi	r8,r8,4
    8aa4:	59fffa36 	bltu	r11,r7,8a90 <__alt_mem_Flash_flash_data+0xf4008a90>
    8aa8:	513fff04 	addi	r4,r10,-4
    8aac:	2008d0ba 	srli	r4,r4,2
    8ab0:	318000cc 	andi	r6,r6,3
    8ab4:	21000044 	addi	r4,r4,1
    8ab8:	2109883a 	add	r4,r4,r4
    8abc:	2109883a 	add	r4,r4,r4
    8ac0:	1907883a 	add	r3,r3,r4
    8ac4:	290b883a 	add	r5,r5,r4
    8ac8:	30000926 	beq	r6,zero,8af0 <memmove+0x148>
    8acc:	198d883a 	add	r6,r3,r6
    8ad0:	29c00003 	ldbu	r7,0(r5)
    8ad4:	18c00044 	addi	r3,r3,1
    8ad8:	29400044 	addi	r5,r5,1
    8adc:	19ffffc5 	stb	r7,-1(r3)
    8ae0:	19bffb1e 	bne	r3,r6,8ad0 <__alt_mem_Flash_flash_data+0xf4008ad0>
    8ae4:	f800283a 	ret
    8ae8:	1007883a 	mov	r3,r2
    8aec:	003ff606 	br	8ac8 <__alt_mem_Flash_flash_data+0xf4008ac8>
    8af0:	f800283a 	ret
    8af4:	1007883a 	mov	r3,r2
    8af8:	003ff406 	br	8acc <__alt_mem_Flash_flash_data+0xf4008acc>
    8afc:	500d883a 	mov	r6,r10
    8b00:	003ff106 	br	8ac8 <__alt_mem_Flash_flash_data+0xf4008ac8>

00008b04 <memset>:
    8b04:	20c000cc 	andi	r3,r4,3
    8b08:	2005883a 	mov	r2,r4
    8b0c:	18004326 	beq	r3,zero,8c1c <memset+0x118>
    8b10:	31ffffc4 	addi	r7,r6,-1
    8b14:	30004026 	beq	r6,zero,8c18 <memset+0x114>
    8b18:	2813883a 	mov	r9,r5
    8b1c:	200d883a 	mov	r6,r4
    8b20:	2007883a 	mov	r3,r4
    8b24:	00000406 	br	8b38 <memset+0x34>
    8b28:	3a3fffc4 	addi	r8,r7,-1
    8b2c:	31800044 	addi	r6,r6,1
    8b30:	38003926 	beq	r7,zero,8c18 <memset+0x114>
    8b34:	400f883a 	mov	r7,r8
    8b38:	18c00044 	addi	r3,r3,1
    8b3c:	32400005 	stb	r9,0(r6)
    8b40:	1a0000cc 	andi	r8,r3,3
    8b44:	403ff81e 	bne	r8,zero,8b28 <__alt_mem_Flash_flash_data+0xf4008b28>
    8b48:	010000c4 	movi	r4,3
    8b4c:	21c02d2e 	bgeu	r4,r7,8c04 <memset+0x100>
    8b50:	29803fcc 	andi	r6,r5,255
    8b54:	3008923a 	slli	r4,r6,8
    8b58:	218cb03a 	or	r6,r4,r6
    8b5c:	3008943a 	slli	r4,r6,16
    8b60:	218cb03a 	or	r6,r4,r6
    8b64:	010003c4 	movi	r4,15
    8b68:	21c0182e 	bgeu	r4,r7,8bcc <memset+0xc8>
    8b6c:	3b3ffc04 	addi	r12,r7,-16
    8b70:	6018d13a 	srli	r12,r12,4
    8b74:	1a000104 	addi	r8,r3,4
    8b78:	1ac00204 	addi	r11,r3,8
    8b7c:	6008913a 	slli	r4,r12,4
    8b80:	1a800304 	addi	r10,r3,12
    8b84:	1813883a 	mov	r9,r3
    8b88:	21000504 	addi	r4,r4,20
    8b8c:	1909883a 	add	r4,r3,r4
    8b90:	49800015 	stw	r6,0(r9)
    8b94:	41800015 	stw	r6,0(r8)
    8b98:	59800015 	stw	r6,0(r11)
    8b9c:	51800015 	stw	r6,0(r10)
    8ba0:	42000404 	addi	r8,r8,16
    8ba4:	4a400404 	addi	r9,r9,16
    8ba8:	5ac00404 	addi	r11,r11,16
    8bac:	52800404 	addi	r10,r10,16
    8bb0:	413ff71e 	bne	r8,r4,8b90 <__alt_mem_Flash_flash_data+0xf4008b90>
    8bb4:	63000044 	addi	r12,r12,1
    8bb8:	6018913a 	slli	r12,r12,4
    8bbc:	39c003cc 	andi	r7,r7,15
    8bc0:	010000c4 	movi	r4,3
    8bc4:	1b07883a 	add	r3,r3,r12
    8bc8:	21c00e2e 	bgeu	r4,r7,8c04 <memset+0x100>
    8bcc:	1813883a 	mov	r9,r3
    8bd0:	3811883a 	mov	r8,r7
    8bd4:	010000c4 	movi	r4,3
    8bd8:	49800015 	stw	r6,0(r9)
    8bdc:	423fff04 	addi	r8,r8,-4
    8be0:	4a400104 	addi	r9,r9,4
    8be4:	223ffc36 	bltu	r4,r8,8bd8 <__alt_mem_Flash_flash_data+0xf4008bd8>
    8be8:	393fff04 	addi	r4,r7,-4
    8bec:	2008d0ba 	srli	r4,r4,2
    8bf0:	39c000cc 	andi	r7,r7,3
    8bf4:	21000044 	addi	r4,r4,1
    8bf8:	2109883a 	add	r4,r4,r4
    8bfc:	2109883a 	add	r4,r4,r4
    8c00:	1907883a 	add	r3,r3,r4
    8c04:	38000426 	beq	r7,zero,8c18 <memset+0x114>
    8c08:	19cf883a 	add	r7,r3,r7
    8c0c:	19400005 	stb	r5,0(r3)
    8c10:	18c00044 	addi	r3,r3,1
    8c14:	19fffd1e 	bne	r3,r7,8c0c <__alt_mem_Flash_flash_data+0xf4008c0c>
    8c18:	f800283a 	ret
    8c1c:	2007883a 	mov	r3,r4
    8c20:	300f883a 	mov	r7,r6
    8c24:	003fc806 	br	8b48 <__alt_mem_Flash_flash_data+0xf4008b48>

00008c28 <_Balloc>:
    8c28:	20801317 	ldw	r2,76(r4)
    8c2c:	defffc04 	addi	sp,sp,-16
    8c30:	dc400115 	stw	r17,4(sp)
    8c34:	dc000015 	stw	r16,0(sp)
    8c38:	dfc00315 	stw	ra,12(sp)
    8c3c:	dc800215 	stw	r18,8(sp)
    8c40:	2023883a 	mov	r17,r4
    8c44:	2821883a 	mov	r16,r5
    8c48:	10000f26 	beq	r2,zero,8c88 <_Balloc+0x60>
    8c4c:	8407883a 	add	r3,r16,r16
    8c50:	18c7883a 	add	r3,r3,r3
    8c54:	10c7883a 	add	r3,r2,r3
    8c58:	18800017 	ldw	r2,0(r3)
    8c5c:	10001126 	beq	r2,zero,8ca4 <_Balloc+0x7c>
    8c60:	11000017 	ldw	r4,0(r2)
    8c64:	19000015 	stw	r4,0(r3)
    8c68:	10000415 	stw	zero,16(r2)
    8c6c:	10000315 	stw	zero,12(r2)
    8c70:	dfc00317 	ldw	ra,12(sp)
    8c74:	dc800217 	ldw	r18,8(sp)
    8c78:	dc400117 	ldw	r17,4(sp)
    8c7c:	dc000017 	ldw	r16,0(sp)
    8c80:	dec00404 	addi	sp,sp,16
    8c84:	f800283a 	ret
    8c88:	01400104 	movi	r5,4
    8c8c:	01800844 	movi	r6,33
    8c90:	000b94c0 	call	b94c <_calloc_r>
    8c94:	88801315 	stw	r2,76(r17)
    8c98:	103fec1e 	bne	r2,zero,8c4c <__alt_mem_Flash_flash_data+0xf4008c4c>
    8c9c:	0005883a 	mov	r2,zero
    8ca0:	003ff306 	br	8c70 <__alt_mem_Flash_flash_data+0xf4008c70>
    8ca4:	01400044 	movi	r5,1
    8ca8:	2c24983a 	sll	r18,r5,r16
    8cac:	8809883a 	mov	r4,r17
    8cb0:	91800144 	addi	r6,r18,5
    8cb4:	318d883a 	add	r6,r6,r6
    8cb8:	318d883a 	add	r6,r6,r6
    8cbc:	000b94c0 	call	b94c <_calloc_r>
    8cc0:	103ff626 	beq	r2,zero,8c9c <__alt_mem_Flash_flash_data+0xf4008c9c>
    8cc4:	14000115 	stw	r16,4(r2)
    8cc8:	14800215 	stw	r18,8(r2)
    8ccc:	003fe606 	br	8c68 <__alt_mem_Flash_flash_data+0xf4008c68>

00008cd0 <_Bfree>:
    8cd0:	28000826 	beq	r5,zero,8cf4 <_Bfree+0x24>
    8cd4:	28c00117 	ldw	r3,4(r5)
    8cd8:	20801317 	ldw	r2,76(r4)
    8cdc:	18c7883a 	add	r3,r3,r3
    8ce0:	18c7883a 	add	r3,r3,r3
    8ce4:	10c5883a 	add	r2,r2,r3
    8ce8:	10c00017 	ldw	r3,0(r2)
    8cec:	28c00015 	stw	r3,0(r5)
    8cf0:	11400015 	stw	r5,0(r2)
    8cf4:	f800283a 	ret

00008cf8 <__multadd>:
    8cf8:	defffa04 	addi	sp,sp,-24
    8cfc:	dc000115 	stw	r16,4(sp)
    8d00:	2c000417 	ldw	r16,16(r5)
    8d04:	dc800315 	stw	r18,12(sp)
    8d08:	dc400215 	stw	r17,8(sp)
    8d0c:	dfc00515 	stw	ra,20(sp)
    8d10:	dcc00415 	stw	r19,16(sp)
    8d14:	2823883a 	mov	r17,r5
    8d18:	2025883a 	mov	r18,r4
    8d1c:	2a400504 	addi	r9,r5,20
    8d20:	0015883a 	mov	r10,zero
    8d24:	4a000017 	ldw	r8,0(r9)
    8d28:	4a400104 	addi	r9,r9,4
    8d2c:	52800044 	addi	r10,r10,1
    8d30:	40ffffcc 	andi	r3,r8,65535
    8d34:	1987383a 	mul	r3,r3,r6
    8d38:	4010d43a 	srli	r8,r8,16
    8d3c:	19cf883a 	add	r7,r3,r7
    8d40:	4191383a 	mul	r8,r8,r6
    8d44:	3816d43a 	srli	r11,r7,16
    8d48:	38ffffcc 	andi	r3,r7,65535
    8d4c:	5a0f883a 	add	r7,r11,r8
    8d50:	3810943a 	slli	r8,r7,16
    8d54:	380ed43a 	srli	r7,r7,16
    8d58:	40c7883a 	add	r3,r8,r3
    8d5c:	48ffff15 	stw	r3,-4(r9)
    8d60:	543ff016 	blt	r10,r16,8d24 <__alt_mem_Flash_flash_data+0xf4008d24>
    8d64:	38000926 	beq	r7,zero,8d8c <__multadd+0x94>
    8d68:	88800217 	ldw	r2,8(r17)
    8d6c:	80800f0e 	bge	r16,r2,8dac <__multadd+0xb4>
    8d70:	80800144 	addi	r2,r16,5
    8d74:	1085883a 	add	r2,r2,r2
    8d78:	1085883a 	add	r2,r2,r2
    8d7c:	8885883a 	add	r2,r17,r2
    8d80:	11c00015 	stw	r7,0(r2)
    8d84:	84000044 	addi	r16,r16,1
    8d88:	8c000415 	stw	r16,16(r17)
    8d8c:	8805883a 	mov	r2,r17
    8d90:	dfc00517 	ldw	ra,20(sp)
    8d94:	dcc00417 	ldw	r19,16(sp)
    8d98:	dc800317 	ldw	r18,12(sp)
    8d9c:	dc400217 	ldw	r17,8(sp)
    8da0:	dc000117 	ldw	r16,4(sp)
    8da4:	dec00604 	addi	sp,sp,24
    8da8:	f800283a 	ret
    8dac:	89400117 	ldw	r5,4(r17)
    8db0:	9009883a 	mov	r4,r18
    8db4:	d9c00015 	stw	r7,0(sp)
    8db8:	29400044 	addi	r5,r5,1
    8dbc:	0008c280 	call	8c28 <_Balloc>
    8dc0:	89800417 	ldw	r6,16(r17)
    8dc4:	11000304 	addi	r4,r2,12
    8dc8:	89400304 	addi	r5,r17,12
    8dcc:	31800084 	addi	r6,r6,2
    8dd0:	318d883a 	add	r6,r6,r6
    8dd4:	318d883a 	add	r6,r6,r6
    8dd8:	1027883a 	mov	r19,r2
    8ddc:	00088700 	call	8870 <memcpy>
    8de0:	d9c00017 	ldw	r7,0(sp)
    8de4:	88000a26 	beq	r17,zero,8e10 <__multadd+0x118>
    8de8:	89000117 	ldw	r4,4(r17)
    8dec:	90c01317 	ldw	r3,76(r18)
    8df0:	2109883a 	add	r4,r4,r4
    8df4:	2109883a 	add	r4,r4,r4
    8df8:	1907883a 	add	r3,r3,r4
    8dfc:	18800017 	ldw	r2,0(r3)
    8e00:	88800015 	stw	r2,0(r17)
    8e04:	1c400015 	stw	r17,0(r3)
    8e08:	9823883a 	mov	r17,r19
    8e0c:	003fd806 	br	8d70 <__alt_mem_Flash_flash_data+0xf4008d70>
    8e10:	9823883a 	mov	r17,r19
    8e14:	003fd606 	br	8d70 <__alt_mem_Flash_flash_data+0xf4008d70>

00008e18 <__s2b>:
    8e18:	defff904 	addi	sp,sp,-28
    8e1c:	dc400115 	stw	r17,4(sp)
    8e20:	dc000015 	stw	r16,0(sp)
    8e24:	2023883a 	mov	r17,r4
    8e28:	2821883a 	mov	r16,r5
    8e2c:	39000204 	addi	r4,r7,8
    8e30:	01400244 	movi	r5,9
    8e34:	dcc00315 	stw	r19,12(sp)
    8e38:	dc800215 	stw	r18,8(sp)
    8e3c:	dfc00615 	stw	ra,24(sp)
    8e40:	dd400515 	stw	r21,20(sp)
    8e44:	dd000415 	stw	r20,16(sp)
    8e48:	3825883a 	mov	r18,r7
    8e4c:	3027883a 	mov	r19,r6
    8e50:	000cd500 	call	cd50 <__divsi3>
    8e54:	00c00044 	movi	r3,1
    8e58:	000b883a 	mov	r5,zero
    8e5c:	1880030e 	bge	r3,r2,8e6c <__s2b+0x54>
    8e60:	18c7883a 	add	r3,r3,r3
    8e64:	29400044 	addi	r5,r5,1
    8e68:	18bffd16 	blt	r3,r2,8e60 <__alt_mem_Flash_flash_data+0xf4008e60>
    8e6c:	8809883a 	mov	r4,r17
    8e70:	0008c280 	call	8c28 <_Balloc>
    8e74:	d8c00717 	ldw	r3,28(sp)
    8e78:	10c00515 	stw	r3,20(r2)
    8e7c:	00c00044 	movi	r3,1
    8e80:	10c00415 	stw	r3,16(r2)
    8e84:	00c00244 	movi	r3,9
    8e88:	1cc0210e 	bge	r3,r19,8f10 <__s2b+0xf8>
    8e8c:	80eb883a 	add	r21,r16,r3
    8e90:	a829883a 	mov	r20,r21
    8e94:	84e1883a 	add	r16,r16,r19
    8e98:	a1c00007 	ldb	r7,0(r20)
    8e9c:	8809883a 	mov	r4,r17
    8ea0:	a5000044 	addi	r20,r20,1
    8ea4:	100b883a 	mov	r5,r2
    8ea8:	01800284 	movi	r6,10
    8eac:	39fff404 	addi	r7,r7,-48
    8eb0:	0008cf80 	call	8cf8 <__multadd>
    8eb4:	a43ff81e 	bne	r20,r16,8e98 <__alt_mem_Flash_flash_data+0xf4008e98>
    8eb8:	ace1883a 	add	r16,r21,r19
    8ebc:	843ffe04 	addi	r16,r16,-8
    8ec0:	9c800a0e 	bge	r19,r18,8eec <__s2b+0xd4>
    8ec4:	94e5c83a 	sub	r18,r18,r19
    8ec8:	84a5883a 	add	r18,r16,r18
    8ecc:	81c00007 	ldb	r7,0(r16)
    8ed0:	8809883a 	mov	r4,r17
    8ed4:	84000044 	addi	r16,r16,1
    8ed8:	100b883a 	mov	r5,r2
    8edc:	01800284 	movi	r6,10
    8ee0:	39fff404 	addi	r7,r7,-48
    8ee4:	0008cf80 	call	8cf8 <__multadd>
    8ee8:	84bff81e 	bne	r16,r18,8ecc <__alt_mem_Flash_flash_data+0xf4008ecc>
    8eec:	dfc00617 	ldw	ra,24(sp)
    8ef0:	dd400517 	ldw	r21,20(sp)
    8ef4:	dd000417 	ldw	r20,16(sp)
    8ef8:	dcc00317 	ldw	r19,12(sp)
    8efc:	dc800217 	ldw	r18,8(sp)
    8f00:	dc400117 	ldw	r17,4(sp)
    8f04:	dc000017 	ldw	r16,0(sp)
    8f08:	dec00704 	addi	sp,sp,28
    8f0c:	f800283a 	ret
    8f10:	84000284 	addi	r16,r16,10
    8f14:	1827883a 	mov	r19,r3
    8f18:	003fe906 	br	8ec0 <__alt_mem_Flash_flash_data+0xf4008ec0>

00008f1c <__hi0bits>:
    8f1c:	20bfffec 	andhi	r2,r4,65535
    8f20:	1000141e 	bne	r2,zero,8f74 <__hi0bits+0x58>
    8f24:	2008943a 	slli	r4,r4,16
    8f28:	00800404 	movi	r2,16
    8f2c:	20ffc02c 	andhi	r3,r4,65280
    8f30:	1800021e 	bne	r3,zero,8f3c <__hi0bits+0x20>
    8f34:	2008923a 	slli	r4,r4,8
    8f38:	10800204 	addi	r2,r2,8
    8f3c:	20fc002c 	andhi	r3,r4,61440
    8f40:	1800021e 	bne	r3,zero,8f4c <__hi0bits+0x30>
    8f44:	2008913a 	slli	r4,r4,4
    8f48:	10800104 	addi	r2,r2,4
    8f4c:	20f0002c 	andhi	r3,r4,49152
    8f50:	1800031e 	bne	r3,zero,8f60 <__hi0bits+0x44>
    8f54:	2109883a 	add	r4,r4,r4
    8f58:	10800084 	addi	r2,r2,2
    8f5c:	2109883a 	add	r4,r4,r4
    8f60:	20000316 	blt	r4,zero,8f70 <__hi0bits+0x54>
    8f64:	2110002c 	andhi	r4,r4,16384
    8f68:	2000041e 	bne	r4,zero,8f7c <__hi0bits+0x60>
    8f6c:	00800804 	movi	r2,32
    8f70:	f800283a 	ret
    8f74:	0005883a 	mov	r2,zero
    8f78:	003fec06 	br	8f2c <__alt_mem_Flash_flash_data+0xf4008f2c>
    8f7c:	10800044 	addi	r2,r2,1
    8f80:	f800283a 	ret

00008f84 <__lo0bits>:
    8f84:	20c00017 	ldw	r3,0(r4)
    8f88:	188001cc 	andi	r2,r3,7
    8f8c:	10000826 	beq	r2,zero,8fb0 <__lo0bits+0x2c>
    8f90:	1880004c 	andi	r2,r3,1
    8f94:	1000211e 	bne	r2,zero,901c <__lo0bits+0x98>
    8f98:	1880008c 	andi	r2,r3,2
    8f9c:	1000211e 	bne	r2,zero,9024 <__lo0bits+0xa0>
    8fa0:	1806d0ba 	srli	r3,r3,2
    8fa4:	00800084 	movi	r2,2
    8fa8:	20c00015 	stw	r3,0(r4)
    8fac:	f800283a 	ret
    8fb0:	18bfffcc 	andi	r2,r3,65535
    8fb4:	10001326 	beq	r2,zero,9004 <__lo0bits+0x80>
    8fb8:	0005883a 	mov	r2,zero
    8fbc:	19403fcc 	andi	r5,r3,255
    8fc0:	2800021e 	bne	r5,zero,8fcc <__lo0bits+0x48>
    8fc4:	1806d23a 	srli	r3,r3,8
    8fc8:	10800204 	addi	r2,r2,8
    8fcc:	194003cc 	andi	r5,r3,15
    8fd0:	2800021e 	bne	r5,zero,8fdc <__lo0bits+0x58>
    8fd4:	1806d13a 	srli	r3,r3,4
    8fd8:	10800104 	addi	r2,r2,4
    8fdc:	194000cc 	andi	r5,r3,3
    8fe0:	2800021e 	bne	r5,zero,8fec <__lo0bits+0x68>
    8fe4:	1806d0ba 	srli	r3,r3,2
    8fe8:	10800084 	addi	r2,r2,2
    8fec:	1940004c 	andi	r5,r3,1
    8ff0:	2800081e 	bne	r5,zero,9014 <__lo0bits+0x90>
    8ff4:	1806d07a 	srli	r3,r3,1
    8ff8:	1800051e 	bne	r3,zero,9010 <__lo0bits+0x8c>
    8ffc:	00800804 	movi	r2,32
    9000:	f800283a 	ret
    9004:	1806d43a 	srli	r3,r3,16
    9008:	00800404 	movi	r2,16
    900c:	003feb06 	br	8fbc <__alt_mem_Flash_flash_data+0xf4008fbc>
    9010:	10800044 	addi	r2,r2,1
    9014:	20c00015 	stw	r3,0(r4)
    9018:	f800283a 	ret
    901c:	0005883a 	mov	r2,zero
    9020:	f800283a 	ret
    9024:	1806d07a 	srli	r3,r3,1
    9028:	00800044 	movi	r2,1
    902c:	20c00015 	stw	r3,0(r4)
    9030:	f800283a 	ret

00009034 <__i2b>:
    9034:	defffd04 	addi	sp,sp,-12
    9038:	dc000015 	stw	r16,0(sp)
    903c:	04000044 	movi	r16,1
    9040:	dc400115 	stw	r17,4(sp)
    9044:	2823883a 	mov	r17,r5
    9048:	800b883a 	mov	r5,r16
    904c:	dfc00215 	stw	ra,8(sp)
    9050:	0008c280 	call	8c28 <_Balloc>
    9054:	14400515 	stw	r17,20(r2)
    9058:	14000415 	stw	r16,16(r2)
    905c:	dfc00217 	ldw	ra,8(sp)
    9060:	dc400117 	ldw	r17,4(sp)
    9064:	dc000017 	ldw	r16,0(sp)
    9068:	dec00304 	addi	sp,sp,12
    906c:	f800283a 	ret

00009070 <__multiply>:
    9070:	defffa04 	addi	sp,sp,-24
    9074:	dcc00315 	stw	r19,12(sp)
    9078:	dc800215 	stw	r18,8(sp)
    907c:	2cc00417 	ldw	r19,16(r5)
    9080:	34800417 	ldw	r18,16(r6)
    9084:	dd000415 	stw	r20,16(sp)
    9088:	dc400115 	stw	r17,4(sp)
    908c:	dfc00515 	stw	ra,20(sp)
    9090:	dc000015 	stw	r16,0(sp)
    9094:	2829883a 	mov	r20,r5
    9098:	3023883a 	mov	r17,r6
    909c:	9c807016 	blt	r19,r18,9260 <__multiply+0x1f0>
    90a0:	9005883a 	mov	r2,r18
    90a4:	9825883a 	mov	r18,r19
    90a8:	1027883a 	mov	r19,r2
    90ac:	a0800217 	ldw	r2,8(r20)
    90b0:	94e1883a 	add	r16,r18,r19
    90b4:	a1400117 	ldw	r5,4(r20)
    90b8:	1400010e 	bge	r2,r16,90c0 <__multiply+0x50>
    90bc:	29400044 	addi	r5,r5,1
    90c0:	0008c280 	call	8c28 <_Balloc>
    90c4:	8417883a 	add	r11,r16,r16
    90c8:	13000504 	addi	r12,r2,20
    90cc:	5ad7883a 	add	r11,r11,r11
    90d0:	62d7883a 	add	r11,r12,r11
    90d4:	6007883a 	mov	r3,r12
    90d8:	62c0032e 	bgeu	r12,r11,90e8 <__multiply+0x78>
    90dc:	18000015 	stw	zero,0(r3)
    90e0:	18c00104 	addi	r3,r3,4
    90e4:	1afffd36 	bltu	r3,r11,90dc <__alt_mem_Flash_flash_data+0xf40090dc>
    90e8:	9ce7883a 	add	r19,r19,r19
    90ec:	94a5883a 	add	r18,r18,r18
    90f0:	89800504 	addi	r6,r17,20
    90f4:	9ce7883a 	add	r19,r19,r19
    90f8:	a3800504 	addi	r14,r20,20
    90fc:	94a5883a 	add	r18,r18,r18
    9100:	34db883a 	add	r13,r6,r19
    9104:	7495883a 	add	r10,r14,r18
    9108:	3340422e 	bgeu	r6,r13,9214 <__multiply+0x1a4>
    910c:	34400017 	ldw	r17,0(r6)
    9110:	8cbfffcc 	andi	r18,r17,65535
    9114:	90001b26 	beq	r18,zero,9184 <__multiply+0x114>
    9118:	6013883a 	mov	r9,r12
    911c:	7023883a 	mov	r17,r14
    9120:	0011883a 	mov	r8,zero
    9124:	88c00017 	ldw	r3,0(r17)
    9128:	4bc00017 	ldw	r15,0(r9)
    912c:	8c400104 	addi	r17,r17,4
    9130:	19ffffcc 	andi	r7,r3,65535
    9134:	3c8f383a 	mul	r7,r7,r18
    9138:	1808d43a 	srli	r4,r3,16
    913c:	797fffcc 	andi	r5,r15,65535
    9140:	29cb883a 	add	r5,r5,r7
    9144:	2a0b883a 	add	r5,r5,r8
    9148:	2489383a 	mul	r4,r4,r18
    914c:	7806d43a 	srli	r3,r15,16
    9150:	2810d43a 	srli	r8,r5,16
    9154:	297fffcc 	andi	r5,r5,65535
    9158:	1907883a 	add	r3,r3,r4
    915c:	1a07883a 	add	r3,r3,r8
    9160:	1808943a 	slli	r4,r3,16
    9164:	480f883a 	mov	r7,r9
    9168:	1810d43a 	srli	r8,r3,16
    916c:	214ab03a 	or	r5,r4,r5
    9170:	49400015 	stw	r5,0(r9)
    9174:	4a400104 	addi	r9,r9,4
    9178:	8abfea36 	bltu	r17,r10,9124 <__alt_mem_Flash_flash_data+0xf4009124>
    917c:	3a000115 	stw	r8,4(r7)
    9180:	34400017 	ldw	r17,0(r6)
    9184:	8822d43a 	srli	r17,r17,16
    9188:	88001f26 	beq	r17,zero,9208 <__multiply+0x198>
    918c:	60c00017 	ldw	r3,0(r12)
    9190:	7013883a 	mov	r9,r14
    9194:	601f883a 	mov	r15,r12
    9198:	1811883a 	mov	r8,r3
    919c:	6027883a 	mov	r19,r12
    91a0:	000f883a 	mov	r7,zero
    91a4:	00000106 	br	91ac <__multiply+0x13c>
    91a8:	9027883a 	mov	r19,r18
    91ac:	4940000b 	ldhu	r5,0(r9)
    91b0:	4010d43a 	srli	r8,r8,16
    91b4:	193fffcc 	andi	r4,r3,65535
    91b8:	2c4b383a 	mul	r5,r5,r17
    91bc:	7bc00104 	addi	r15,r15,4
    91c0:	4a400104 	addi	r9,r9,4
    91c4:	2a0b883a 	add	r5,r5,r8
    91c8:	29cb883a 	add	r5,r5,r7
    91cc:	2806943a 	slli	r3,r5,16
    91d0:	9c800104 	addi	r18,r19,4
    91d4:	280ad43a 	srli	r5,r5,16
    91d8:	1908b03a 	or	r4,r3,r4
    91dc:	793fff15 	stw	r4,-4(r15)
    91e0:	48ffff17 	ldw	r3,-4(r9)
    91e4:	92000017 	ldw	r8,0(r18)
    91e8:	1806d43a 	srli	r3,r3,16
    91ec:	413fffcc 	andi	r4,r8,65535
    91f0:	1c47383a 	mul	r3,r3,r17
    91f4:	1907883a 	add	r3,r3,r4
    91f8:	1947883a 	add	r3,r3,r5
    91fc:	180ed43a 	srli	r7,r3,16
    9200:	4abfe936 	bltu	r9,r10,91a8 <__alt_mem_Flash_flash_data+0xf40091a8>
    9204:	98c00115 	stw	r3,4(r19)
    9208:	31800104 	addi	r6,r6,4
    920c:	63000104 	addi	r12,r12,4
    9210:	337fbe36 	bltu	r6,r13,910c <__alt_mem_Flash_flash_data+0xf400910c>
    9214:	0400090e 	bge	zero,r16,923c <__multiply+0x1cc>
    9218:	58ffff17 	ldw	r3,-4(r11)
    921c:	5affff04 	addi	r11,r11,-4
    9220:	18000326 	beq	r3,zero,9230 <__multiply+0x1c0>
    9224:	00000506 	br	923c <__multiply+0x1cc>
    9228:	58c00017 	ldw	r3,0(r11)
    922c:	1800031e 	bne	r3,zero,923c <__multiply+0x1cc>
    9230:	843fffc4 	addi	r16,r16,-1
    9234:	5affff04 	addi	r11,r11,-4
    9238:	803ffb1e 	bne	r16,zero,9228 <__alt_mem_Flash_flash_data+0xf4009228>
    923c:	14000415 	stw	r16,16(r2)
    9240:	dfc00517 	ldw	ra,20(sp)
    9244:	dd000417 	ldw	r20,16(sp)
    9248:	dcc00317 	ldw	r19,12(sp)
    924c:	dc800217 	ldw	r18,8(sp)
    9250:	dc400117 	ldw	r17,4(sp)
    9254:	dc000017 	ldw	r16,0(sp)
    9258:	dec00604 	addi	sp,sp,24
    925c:	f800283a 	ret
    9260:	3029883a 	mov	r20,r6
    9264:	2823883a 	mov	r17,r5
    9268:	003f9006 	br	90ac <__alt_mem_Flash_flash_data+0xf40090ac>

0000926c <__pow5mult>:
    926c:	defffa04 	addi	sp,sp,-24
    9270:	dcc00315 	stw	r19,12(sp)
    9274:	dc800215 	stw	r18,8(sp)
    9278:	dc000015 	stw	r16,0(sp)
    927c:	dfc00515 	stw	ra,20(sp)
    9280:	dd000415 	stw	r20,16(sp)
    9284:	dc400115 	stw	r17,4(sp)
    9288:	308000cc 	andi	r2,r6,3
    928c:	3021883a 	mov	r16,r6
    9290:	2027883a 	mov	r19,r4
    9294:	2825883a 	mov	r18,r5
    9298:	10002e1e 	bne	r2,zero,9354 <__pow5mult+0xe8>
    929c:	8021d0ba 	srai	r16,r16,2
    92a0:	80001a26 	beq	r16,zero,930c <__pow5mult+0xa0>
    92a4:	9c401217 	ldw	r17,72(r19)
    92a8:	8800061e 	bne	r17,zero,92c4 <__pow5mult+0x58>
    92ac:	00003406 	br	9380 <__pow5mult+0x114>
    92b0:	8021d07a 	srai	r16,r16,1
    92b4:	80001526 	beq	r16,zero,930c <__pow5mult+0xa0>
    92b8:	88800017 	ldw	r2,0(r17)
    92bc:	10001c26 	beq	r2,zero,9330 <__pow5mult+0xc4>
    92c0:	1023883a 	mov	r17,r2
    92c4:	80c0004c 	andi	r3,r16,1
    92c8:	183ff926 	beq	r3,zero,92b0 <__alt_mem_Flash_flash_data+0xf40092b0>
    92cc:	900b883a 	mov	r5,r18
    92d0:	880d883a 	mov	r6,r17
    92d4:	9809883a 	mov	r4,r19
    92d8:	00090700 	call	9070 <__multiply>
    92dc:	90001b26 	beq	r18,zero,934c <__pow5mult+0xe0>
    92e0:	91c00117 	ldw	r7,4(r18)
    92e4:	98c01317 	ldw	r3,76(r19)
    92e8:	8021d07a 	srai	r16,r16,1
    92ec:	39cf883a 	add	r7,r7,r7
    92f0:	39cf883a 	add	r7,r7,r7
    92f4:	19c7883a 	add	r3,r3,r7
    92f8:	19000017 	ldw	r4,0(r3)
    92fc:	91000015 	stw	r4,0(r18)
    9300:	1c800015 	stw	r18,0(r3)
    9304:	1025883a 	mov	r18,r2
    9308:	803feb1e 	bne	r16,zero,92b8 <__alt_mem_Flash_flash_data+0xf40092b8>
    930c:	9005883a 	mov	r2,r18
    9310:	dfc00517 	ldw	ra,20(sp)
    9314:	dd000417 	ldw	r20,16(sp)
    9318:	dcc00317 	ldw	r19,12(sp)
    931c:	dc800217 	ldw	r18,8(sp)
    9320:	dc400117 	ldw	r17,4(sp)
    9324:	dc000017 	ldw	r16,0(sp)
    9328:	dec00604 	addi	sp,sp,24
    932c:	f800283a 	ret
    9330:	9809883a 	mov	r4,r19
    9334:	880b883a 	mov	r5,r17
    9338:	880d883a 	mov	r6,r17
    933c:	00090700 	call	9070 <__multiply>
    9340:	88800015 	stw	r2,0(r17)
    9344:	10000015 	stw	zero,0(r2)
    9348:	003fdd06 	br	92c0 <__alt_mem_Flash_flash_data+0xf40092c0>
    934c:	1025883a 	mov	r18,r2
    9350:	003fd706 	br	92b0 <__alt_mem_Flash_flash_data+0xf40092b0>
    9354:	10bfffc4 	addi	r2,r2,-1
    9358:	1085883a 	add	r2,r2,r2
    935c:	00c000b4 	movhi	r3,2
    9360:	18f23604 	addi	r3,r3,-14120
    9364:	1085883a 	add	r2,r2,r2
    9368:	1885883a 	add	r2,r3,r2
    936c:	11800017 	ldw	r6,0(r2)
    9370:	000f883a 	mov	r7,zero
    9374:	0008cf80 	call	8cf8 <__multadd>
    9378:	1025883a 	mov	r18,r2
    937c:	003fc706 	br	929c <__alt_mem_Flash_flash_data+0xf400929c>
    9380:	05000044 	movi	r20,1
    9384:	9809883a 	mov	r4,r19
    9388:	a00b883a 	mov	r5,r20
    938c:	0008c280 	call	8c28 <_Balloc>
    9390:	1023883a 	mov	r17,r2
    9394:	00809c44 	movi	r2,625
    9398:	88800515 	stw	r2,20(r17)
    939c:	8d000415 	stw	r20,16(r17)
    93a0:	9c401215 	stw	r17,72(r19)
    93a4:	88000015 	stw	zero,0(r17)
    93a8:	003fc606 	br	92c4 <__alt_mem_Flash_flash_data+0xf40092c4>

000093ac <__lshift>:
    93ac:	defff904 	addi	sp,sp,-28
    93b0:	dd000415 	stw	r20,16(sp)
    93b4:	dcc00315 	stw	r19,12(sp)
    93b8:	3029d17a 	srai	r20,r6,5
    93bc:	2cc00417 	ldw	r19,16(r5)
    93c0:	28800217 	ldw	r2,8(r5)
    93c4:	dd400515 	stw	r21,20(sp)
    93c8:	a4e7883a 	add	r19,r20,r19
    93cc:	dc800215 	stw	r18,8(sp)
    93d0:	dc400115 	stw	r17,4(sp)
    93d4:	dc000015 	stw	r16,0(sp)
    93d8:	dfc00615 	stw	ra,24(sp)
    93dc:	9c000044 	addi	r16,r19,1
    93e0:	2823883a 	mov	r17,r5
    93e4:	302b883a 	mov	r21,r6
    93e8:	2025883a 	mov	r18,r4
    93ec:	29400117 	ldw	r5,4(r5)
    93f0:	1400030e 	bge	r2,r16,9400 <__lshift+0x54>
    93f4:	1085883a 	add	r2,r2,r2
    93f8:	29400044 	addi	r5,r5,1
    93fc:	143ffd16 	blt	r2,r16,93f4 <__alt_mem_Flash_flash_data+0xf40093f4>
    9400:	9009883a 	mov	r4,r18
    9404:	0008c280 	call	8c28 <_Balloc>
    9408:	11c00504 	addi	r7,r2,20
    940c:	0500090e 	bge	zero,r20,9434 <__lshift+0x88>
    9410:	3811883a 	mov	r8,r7
    9414:	0007883a 	mov	r3,zero
    9418:	40000015 	stw	zero,0(r8)
    941c:	18c00044 	addi	r3,r3,1
    9420:	42000104 	addi	r8,r8,4
    9424:	1d3ffc1e 	bne	r3,r20,9418 <__alt_mem_Flash_flash_data+0xf4009418>
    9428:	18c7883a 	add	r3,r3,r3
    942c:	18c7883a 	add	r3,r3,r3
    9430:	38cf883a 	add	r7,r7,r3
    9434:	89000417 	ldw	r4,16(r17)
    9438:	88c00504 	addi	r3,r17,20
    943c:	a98007cc 	andi	r6,r21,31
    9440:	2109883a 	add	r4,r4,r4
    9444:	2109883a 	add	r4,r4,r4
    9448:	1909883a 	add	r4,r3,r4
    944c:	30002326 	beq	r6,zero,94dc <__lshift+0x130>
    9450:	01400804 	movi	r5,32
    9454:	298bc83a 	sub	r5,r5,r6
    9458:	0013883a 	mov	r9,zero
    945c:	1a000017 	ldw	r8,0(r3)
    9460:	3815883a 	mov	r10,r7
    9464:	39c00104 	addi	r7,r7,4
    9468:	4190983a 	sll	r8,r8,r6
    946c:	18c00104 	addi	r3,r3,4
    9470:	4a10b03a 	or	r8,r9,r8
    9474:	3a3fff15 	stw	r8,-4(r7)
    9478:	1a3fff17 	ldw	r8,-4(r3)
    947c:	4152d83a 	srl	r9,r8,r5
    9480:	193ff636 	bltu	r3,r4,945c <__alt_mem_Flash_flash_data+0xf400945c>
    9484:	52400115 	stw	r9,4(r10)
    9488:	48001a1e 	bne	r9,zero,94f4 <__lshift+0x148>
    948c:	843fffc4 	addi	r16,r16,-1
    9490:	14000415 	stw	r16,16(r2)
    9494:	88000826 	beq	r17,zero,94b8 <__lshift+0x10c>
    9498:	89000117 	ldw	r4,4(r17)
    949c:	90c01317 	ldw	r3,76(r18)
    94a0:	2109883a 	add	r4,r4,r4
    94a4:	2109883a 	add	r4,r4,r4
    94a8:	1907883a 	add	r3,r3,r4
    94ac:	19000017 	ldw	r4,0(r3)
    94b0:	89000015 	stw	r4,0(r17)
    94b4:	1c400015 	stw	r17,0(r3)
    94b8:	dfc00617 	ldw	ra,24(sp)
    94bc:	dd400517 	ldw	r21,20(sp)
    94c0:	dd000417 	ldw	r20,16(sp)
    94c4:	dcc00317 	ldw	r19,12(sp)
    94c8:	dc800217 	ldw	r18,8(sp)
    94cc:	dc400117 	ldw	r17,4(sp)
    94d0:	dc000017 	ldw	r16,0(sp)
    94d4:	dec00704 	addi	sp,sp,28
    94d8:	f800283a 	ret
    94dc:	19400017 	ldw	r5,0(r3)
    94e0:	39c00104 	addi	r7,r7,4
    94e4:	18c00104 	addi	r3,r3,4
    94e8:	397fff15 	stw	r5,-4(r7)
    94ec:	193ffb36 	bltu	r3,r4,94dc <__alt_mem_Flash_flash_data+0xf40094dc>
    94f0:	003fe606 	br	948c <__alt_mem_Flash_flash_data+0xf400948c>
    94f4:	9c000084 	addi	r16,r19,2
    94f8:	003fe406 	br	948c <__alt_mem_Flash_flash_data+0xf400948c>

000094fc <__mcmp>:
    94fc:	20800417 	ldw	r2,16(r4)
    9500:	28c00417 	ldw	r3,16(r5)
    9504:	10c5c83a 	sub	r2,r2,r3
    9508:	1000111e 	bne	r2,zero,9550 <__mcmp+0x54>
    950c:	18c7883a 	add	r3,r3,r3
    9510:	18c7883a 	add	r3,r3,r3
    9514:	21000504 	addi	r4,r4,20
    9518:	29400504 	addi	r5,r5,20
    951c:	20c5883a 	add	r2,r4,r3
    9520:	28cb883a 	add	r5,r5,r3
    9524:	00000106 	br	952c <__mcmp+0x30>
    9528:	20800a2e 	bgeu	r4,r2,9554 <__mcmp+0x58>
    952c:	10bfff04 	addi	r2,r2,-4
    9530:	297fff04 	addi	r5,r5,-4
    9534:	11800017 	ldw	r6,0(r2)
    9538:	28c00017 	ldw	r3,0(r5)
    953c:	30fffa26 	beq	r6,r3,9528 <__alt_mem_Flash_flash_data+0xf4009528>
    9540:	30c00236 	bltu	r6,r3,954c <__mcmp+0x50>
    9544:	00800044 	movi	r2,1
    9548:	f800283a 	ret
    954c:	00bfffc4 	movi	r2,-1
    9550:	f800283a 	ret
    9554:	0005883a 	mov	r2,zero
    9558:	f800283a 	ret

0000955c <__mdiff>:
    955c:	defffb04 	addi	sp,sp,-20
    9560:	dc000015 	stw	r16,0(sp)
    9564:	2821883a 	mov	r16,r5
    9568:	dcc00315 	stw	r19,12(sp)
    956c:	300b883a 	mov	r5,r6
    9570:	2027883a 	mov	r19,r4
    9574:	8009883a 	mov	r4,r16
    9578:	dc800215 	stw	r18,8(sp)
    957c:	dfc00415 	stw	ra,16(sp)
    9580:	dc400115 	stw	r17,4(sp)
    9584:	3025883a 	mov	r18,r6
    9588:	00094fc0 	call	94fc <__mcmp>
    958c:	10005226 	beq	r2,zero,96d8 <__mdiff+0x17c>
    9590:	10004c16 	blt	r2,zero,96c4 <__mdiff+0x168>
    9594:	0023883a 	mov	r17,zero
    9598:	81400117 	ldw	r5,4(r16)
    959c:	9809883a 	mov	r4,r19
    95a0:	0008c280 	call	8c28 <_Balloc>
    95a4:	83400417 	ldw	r13,16(r16)
    95a8:	93800417 	ldw	r14,16(r18)
    95ac:	81000504 	addi	r4,r16,20
    95b0:	6b59883a 	add	r12,r13,r13
    95b4:	739d883a 	add	r14,r14,r14
    95b8:	6319883a 	add	r12,r12,r12
    95bc:	91800504 	addi	r6,r18,20
    95c0:	739d883a 	add	r14,r14,r14
    95c4:	14400315 	stw	r17,12(r2)
    95c8:	2319883a 	add	r12,r4,r12
    95cc:	339d883a 	add	r14,r6,r14
    95d0:	12400504 	addi	r9,r2,20
    95d4:	0007883a 	mov	r3,zero
    95d8:	22000017 	ldw	r8,0(r4)
    95dc:	32800017 	ldw	r10,0(r6)
    95e0:	4ac00104 	addi	r11,r9,4
    95e4:	41ffffcc 	andi	r7,r8,65535
    95e8:	38c7883a 	add	r3,r7,r3
    95ec:	51ffffcc 	andi	r7,r10,65535
    95f0:	19cfc83a 	sub	r7,r3,r7
    95f4:	4010d43a 	srli	r8,r8,16
    95f8:	5014d43a 	srli	r10,r10,16
    95fc:	3807d43a 	srai	r3,r7,16
    9600:	39ffffcc 	andi	r7,r7,65535
    9604:	4291c83a 	sub	r8,r8,r10
    9608:	40c7883a 	add	r3,r8,r3
    960c:	1810943a 	slli	r8,r3,16
    9610:	31800104 	addi	r6,r6,4
    9614:	21000104 	addi	r4,r4,4
    9618:	41ceb03a 	or	r7,r8,r7
    961c:	49c00015 	stw	r7,0(r9)
    9620:	1807d43a 	srai	r3,r3,16
    9624:	580b883a 	mov	r5,r11
    9628:	5813883a 	mov	r9,r11
    962c:	33bfea36 	bltu	r6,r14,95d8 <__alt_mem_Flash_flash_data+0xf40095d8>
    9630:	2011883a 	mov	r8,r4
    9634:	2300152e 	bgeu	r4,r12,968c <__mdiff+0x130>
    9638:	21400017 	ldw	r5,0(r4)
    963c:	4a400104 	addi	r9,r9,4
    9640:	21000104 	addi	r4,r4,4
    9644:	29ffffcc 	andi	r7,r5,65535
    9648:	38c7883a 	add	r3,r7,r3
    964c:	280ad43a 	srli	r5,r5,16
    9650:	180dd43a 	srai	r6,r3,16
    9654:	19ffffcc 	andi	r7,r3,65535
    9658:	3147883a 	add	r3,r6,r5
    965c:	180a943a 	slli	r5,r3,16
    9660:	1807d43a 	srai	r3,r3,16
    9664:	29ceb03a 	or	r7,r5,r7
    9668:	49ffff15 	stw	r7,-4(r9)
    966c:	233ff236 	bltu	r4,r12,9638 <__alt_mem_Flash_flash_data+0xf4009638>
    9670:	0206303a 	nor	r3,zero,r8
    9674:	1b07883a 	add	r3,r3,r12
    9678:	1806d0ba 	srli	r3,r3,2
    967c:	18c00044 	addi	r3,r3,1
    9680:	18c7883a 	add	r3,r3,r3
    9684:	18c7883a 	add	r3,r3,r3
    9688:	58cb883a 	add	r5,r11,r3
    968c:	28ffff04 	addi	r3,r5,-4
    9690:	3800041e 	bne	r7,zero,96a4 <__mdiff+0x148>
    9694:	18ffff04 	addi	r3,r3,-4
    9698:	19000017 	ldw	r4,0(r3)
    969c:	6b7fffc4 	addi	r13,r13,-1
    96a0:	203ffc26 	beq	r4,zero,9694 <__alt_mem_Flash_flash_data+0xf4009694>
    96a4:	13400415 	stw	r13,16(r2)
    96a8:	dfc00417 	ldw	ra,16(sp)
    96ac:	dcc00317 	ldw	r19,12(sp)
    96b0:	dc800217 	ldw	r18,8(sp)
    96b4:	dc400117 	ldw	r17,4(sp)
    96b8:	dc000017 	ldw	r16,0(sp)
    96bc:	dec00504 	addi	sp,sp,20
    96c0:	f800283a 	ret
    96c4:	8005883a 	mov	r2,r16
    96c8:	04400044 	movi	r17,1
    96cc:	9021883a 	mov	r16,r18
    96d0:	1025883a 	mov	r18,r2
    96d4:	003fb006 	br	9598 <__alt_mem_Flash_flash_data+0xf4009598>
    96d8:	9809883a 	mov	r4,r19
    96dc:	000b883a 	mov	r5,zero
    96e0:	0008c280 	call	8c28 <_Balloc>
    96e4:	00c00044 	movi	r3,1
    96e8:	10c00415 	stw	r3,16(r2)
    96ec:	10000515 	stw	zero,20(r2)
    96f0:	003fed06 	br	96a8 <__alt_mem_Flash_flash_data+0xf40096a8>

000096f4 <__ulp>:
    96f4:	295ffc2c 	andhi	r5,r5,32752
    96f8:	00bf3034 	movhi	r2,64704
    96fc:	2887883a 	add	r3,r5,r2
    9700:	00c0020e 	bge	zero,r3,970c <__ulp+0x18>
    9704:	0005883a 	mov	r2,zero
    9708:	f800283a 	ret
    970c:	00c7c83a 	sub	r3,zero,r3
    9710:	180bd53a 	srai	r5,r3,20
    9714:	008004c4 	movi	r2,19
    9718:	11400a0e 	bge	r2,r5,9744 <__ulp+0x50>
    971c:	00800c84 	movi	r2,50
    9720:	0007883a 	mov	r3,zero
    9724:	11400516 	blt	r2,r5,973c <__ulp+0x48>
    9728:	00800cc4 	movi	r2,51
    972c:	114bc83a 	sub	r5,r2,r5
    9730:	00800044 	movi	r2,1
    9734:	1144983a 	sll	r2,r2,r5
    9738:	f800283a 	ret
    973c:	00800044 	movi	r2,1
    9740:	f800283a 	ret
    9744:	00800234 	movhi	r2,8
    9748:	1147d83a 	sra	r3,r2,r5
    974c:	0005883a 	mov	r2,zero
    9750:	f800283a 	ret

00009754 <__b2d>:
    9754:	defffa04 	addi	sp,sp,-24
    9758:	dc000015 	stw	r16,0(sp)
    975c:	24000417 	ldw	r16,16(r4)
    9760:	dc400115 	stw	r17,4(sp)
    9764:	24400504 	addi	r17,r4,20
    9768:	8421883a 	add	r16,r16,r16
    976c:	8421883a 	add	r16,r16,r16
    9770:	8c21883a 	add	r16,r17,r16
    9774:	dc800215 	stw	r18,8(sp)
    9778:	84bfff17 	ldw	r18,-4(r16)
    977c:	dd000415 	stw	r20,16(sp)
    9780:	dcc00315 	stw	r19,12(sp)
    9784:	9009883a 	mov	r4,r18
    9788:	2829883a 	mov	r20,r5
    978c:	dfc00515 	stw	ra,20(sp)
    9790:	0008f1c0 	call	8f1c <__hi0bits>
    9794:	00c00804 	movi	r3,32
    9798:	1887c83a 	sub	r3,r3,r2
    979c:	a0c00015 	stw	r3,0(r20)
    97a0:	00c00284 	movi	r3,10
    97a4:	84ffff04 	addi	r19,r16,-4
    97a8:	18801216 	blt	r3,r2,97f4 <__b2d+0xa0>
    97ac:	014002c4 	movi	r5,11
    97b0:	2889c83a 	sub	r4,r5,r2
    97b4:	9106d83a 	srl	r3,r18,r4
    97b8:	18cffc34 	orhi	r3,r3,16368
    97bc:	8cc0282e 	bgeu	r17,r19,9860 <__b2d+0x10c>
    97c0:	817ffe17 	ldw	r5,-8(r16)
    97c4:	290ad83a 	srl	r5,r5,r4
    97c8:	10800544 	addi	r2,r2,21
    97cc:	9084983a 	sll	r2,r18,r2
    97d0:	2884b03a 	or	r2,r5,r2
    97d4:	dfc00517 	ldw	ra,20(sp)
    97d8:	dd000417 	ldw	r20,16(sp)
    97dc:	dcc00317 	ldw	r19,12(sp)
    97e0:	dc800217 	ldw	r18,8(sp)
    97e4:	dc400117 	ldw	r17,4(sp)
    97e8:	dc000017 	ldw	r16,0(sp)
    97ec:	dec00604 	addi	sp,sp,24
    97f0:	f800283a 	ret
    97f4:	113ffd44 	addi	r4,r2,-11
    97f8:	8cc00f2e 	bgeu	r17,r19,9838 <__b2d+0xe4>
    97fc:	81bffe04 	addi	r6,r16,-8
    9800:	817ffe17 	ldw	r5,-8(r16)
    9804:	20001326 	beq	r4,zero,9854 <__b2d+0x100>
    9808:	00c00ac4 	movi	r3,43
    980c:	1885c83a 	sub	r2,r3,r2
    9810:	2886d83a 	srl	r3,r5,r2
    9814:	9124983a 	sll	r18,r18,r4
    9818:	90e4b03a 	or	r18,r18,r3
    981c:	90cffc34 	orhi	r3,r18,16368
    9820:	8980112e 	bgeu	r17,r6,9868 <__b2d+0x114>
    9824:	81bffd17 	ldw	r6,-12(r16)
    9828:	308cd83a 	srl	r6,r6,r2
    982c:	2904983a 	sll	r2,r5,r4
    9830:	1184b03a 	or	r2,r2,r6
    9834:	003fe706 	br	97d4 <__alt_mem_Flash_flash_data+0xf40097d4>
    9838:	20000526 	beq	r4,zero,9850 <__b2d+0xfc>
    983c:	9124983a 	sll	r18,r18,r4
    9840:	000d883a 	mov	r6,zero
    9844:	000b883a 	mov	r5,zero
    9848:	90cffc34 	orhi	r3,r18,16368
    984c:	003ff706 	br	982c <__alt_mem_Flash_flash_data+0xf400982c>
    9850:	000b883a 	mov	r5,zero
    9854:	90cffc34 	orhi	r3,r18,16368
    9858:	2805883a 	mov	r2,r5
    985c:	003fdd06 	br	97d4 <__alt_mem_Flash_flash_data+0xf40097d4>
    9860:	000b883a 	mov	r5,zero
    9864:	003fd806 	br	97c8 <__alt_mem_Flash_flash_data+0xf40097c8>
    9868:	000d883a 	mov	r6,zero
    986c:	003fef06 	br	982c <__alt_mem_Flash_flash_data+0xf400982c>

00009870 <__d2b>:
    9870:	defff704 	addi	sp,sp,-36
    9874:	dc000215 	stw	r16,8(sp)
    9878:	3021883a 	mov	r16,r6
    987c:	dc400315 	stw	r17,12(sp)
    9880:	8022907a 	slli	r17,r16,1
    9884:	dd400715 	stw	r21,28(sp)
    9888:	282b883a 	mov	r21,r5
    988c:	01400044 	movi	r5,1
    9890:	dd000615 	stw	r20,24(sp)
    9894:	dcc00515 	stw	r19,20(sp)
    9898:	dc800415 	stw	r18,16(sp)
    989c:	dfc00815 	stw	ra,32(sp)
    98a0:	3829883a 	mov	r20,r7
    98a4:	dc800917 	ldw	r18,36(sp)
    98a8:	8822d57a 	srli	r17,r17,21
    98ac:	0008c280 	call	8c28 <_Balloc>
    98b0:	1027883a 	mov	r19,r2
    98b4:	00800434 	movhi	r2,16
    98b8:	10bfffc4 	addi	r2,r2,-1
    98bc:	808c703a 	and	r6,r16,r2
    98c0:	88000126 	beq	r17,zero,98c8 <__d2b+0x58>
    98c4:	31800434 	orhi	r6,r6,16
    98c8:	d9800015 	stw	r6,0(sp)
    98cc:	a8001f26 	beq	r21,zero,994c <__d2b+0xdc>
    98d0:	d9000104 	addi	r4,sp,4
    98d4:	dd400115 	stw	r21,4(sp)
    98d8:	0008f840 	call	8f84 <__lo0bits>
    98dc:	d8c00017 	ldw	r3,0(sp)
    98e0:	1000291e 	bne	r2,zero,9988 <__d2b+0x118>
    98e4:	d9000117 	ldw	r4,4(sp)
    98e8:	99000515 	stw	r4,20(r19)
    98ec:	1820c03a 	cmpne	r16,r3,zero
    98f0:	84000044 	addi	r16,r16,1
    98f4:	98c00615 	stw	r3,24(r19)
    98f8:	9c000415 	stw	r16,16(r19)
    98fc:	88001b1e 	bne	r17,zero,996c <__d2b+0xfc>
    9900:	800690ba 	slli	r3,r16,2
    9904:	10bef384 	addi	r2,r2,-1074
    9908:	a0800015 	stw	r2,0(r20)
    990c:	98c5883a 	add	r2,r19,r3
    9910:	11000417 	ldw	r4,16(r2)
    9914:	8020917a 	slli	r16,r16,5
    9918:	0008f1c0 	call	8f1c <__hi0bits>
    991c:	8085c83a 	sub	r2,r16,r2
    9920:	90800015 	stw	r2,0(r18)
    9924:	9805883a 	mov	r2,r19
    9928:	dfc00817 	ldw	ra,32(sp)
    992c:	dd400717 	ldw	r21,28(sp)
    9930:	dd000617 	ldw	r20,24(sp)
    9934:	dcc00517 	ldw	r19,20(sp)
    9938:	dc800417 	ldw	r18,16(sp)
    993c:	dc400317 	ldw	r17,12(sp)
    9940:	dc000217 	ldw	r16,8(sp)
    9944:	dec00904 	addi	sp,sp,36
    9948:	f800283a 	ret
    994c:	d809883a 	mov	r4,sp
    9950:	0008f840 	call	8f84 <__lo0bits>
    9954:	d8c00017 	ldw	r3,0(sp)
    9958:	04000044 	movi	r16,1
    995c:	9c000415 	stw	r16,16(r19)
    9960:	98c00515 	stw	r3,20(r19)
    9964:	10800804 	addi	r2,r2,32
    9968:	883fe526 	beq	r17,zero,9900 <__alt_mem_Flash_flash_data+0xf4009900>
    996c:	8c7ef344 	addi	r17,r17,-1075
    9970:	88a3883a 	add	r17,r17,r2
    9974:	00c00d44 	movi	r3,53
    9978:	a4400015 	stw	r17,0(r20)
    997c:	1885c83a 	sub	r2,r3,r2
    9980:	90800015 	stw	r2,0(r18)
    9984:	003fe706 	br	9924 <__alt_mem_Flash_flash_data+0xf4009924>
    9988:	01000804 	movi	r4,32
    998c:	2089c83a 	sub	r4,r4,r2
    9990:	1908983a 	sll	r4,r3,r4
    9994:	d9400117 	ldw	r5,4(sp)
    9998:	1886d83a 	srl	r3,r3,r2
    999c:	2148b03a 	or	r4,r4,r5
    99a0:	99000515 	stw	r4,20(r19)
    99a4:	d8c00015 	stw	r3,0(sp)
    99a8:	003fd006 	br	98ec <__alt_mem_Flash_flash_data+0xf40098ec>

000099ac <__ratio>:
    99ac:	defff904 	addi	sp,sp,-28
    99b0:	dc400315 	stw	r17,12(sp)
    99b4:	2823883a 	mov	r17,r5
    99b8:	d9400104 	addi	r5,sp,4
    99bc:	dfc00615 	stw	ra,24(sp)
    99c0:	dcc00515 	stw	r19,20(sp)
    99c4:	dc800415 	stw	r18,16(sp)
    99c8:	2027883a 	mov	r19,r4
    99cc:	dc000215 	stw	r16,8(sp)
    99d0:	00097540 	call	9754 <__b2d>
    99d4:	8809883a 	mov	r4,r17
    99d8:	d80b883a 	mov	r5,sp
    99dc:	1025883a 	mov	r18,r2
    99e0:	1821883a 	mov	r16,r3
    99e4:	00097540 	call	9754 <__b2d>
    99e8:	8a400417 	ldw	r9,16(r17)
    99ec:	9a000417 	ldw	r8,16(r19)
    99f0:	100d883a 	mov	r6,r2
    99f4:	d8800017 	ldw	r2,0(sp)
    99f8:	4251c83a 	sub	r8,r8,r9
    99fc:	4012917a 	slli	r9,r8,5
    9a00:	da000117 	ldw	r8,4(sp)
    9a04:	4091c83a 	sub	r8,r8,r2
    9a08:	4251883a 	add	r8,r8,r9
    9a0c:	02000d0e 	bge	zero,r8,9a44 <__ratio+0x98>
    9a10:	4010953a 	slli	r8,r8,20
    9a14:	4421883a 	add	r16,r8,r16
    9a18:	9009883a 	mov	r4,r18
    9a1c:	800b883a 	mov	r5,r16
    9a20:	180f883a 	mov	r7,r3
    9a24:	000d6ac0 	call	d6ac <__divdf3>
    9a28:	dfc00617 	ldw	ra,24(sp)
    9a2c:	dcc00517 	ldw	r19,20(sp)
    9a30:	dc800417 	ldw	r18,16(sp)
    9a34:	dc400317 	ldw	r17,12(sp)
    9a38:	dc000217 	ldw	r16,8(sp)
    9a3c:	dec00704 	addi	sp,sp,28
    9a40:	f800283a 	ret
    9a44:	4010953a 	slli	r8,r8,20
    9a48:	1a07c83a 	sub	r3,r3,r8
    9a4c:	003ff206 	br	9a18 <__alt_mem_Flash_flash_data+0xf4009a18>

00009a50 <_mprec_log10>:
    9a50:	defffe04 	addi	sp,sp,-8
    9a54:	dc000015 	stw	r16,0(sp)
    9a58:	dfc00115 	stw	ra,4(sp)
    9a5c:	008005c4 	movi	r2,23
    9a60:	2021883a 	mov	r16,r4
    9a64:	11000d0e 	bge	r2,r4,9a9c <_mprec_log10+0x4c>
    9a68:	0005883a 	mov	r2,zero
    9a6c:	00cffc34 	movhi	r3,16368
    9a70:	843fffc4 	addi	r16,r16,-1
    9a74:	1009883a 	mov	r4,r2
    9a78:	180b883a 	mov	r5,r3
    9a7c:	000d883a 	mov	r6,zero
    9a80:	01d00934 	movhi	r7,16420
    9a84:	000e1bc0 	call	e1bc <__muldf3>
    9a88:	803ff91e 	bne	r16,zero,9a70 <__alt_mem_Flash_flash_data+0xf4009a70>
    9a8c:	dfc00117 	ldw	ra,4(sp)
    9a90:	dc000017 	ldw	r16,0(sp)
    9a94:	dec00204 	addi	sp,sp,8
    9a98:	f800283a 	ret
    9a9c:	202090fa 	slli	r16,r4,3
    9aa0:	008000b4 	movhi	r2,2
    9aa4:	10b24d04 	addi	r2,r2,-14028
    9aa8:	1421883a 	add	r16,r2,r16
    9aac:	80800017 	ldw	r2,0(r16)
    9ab0:	80c00117 	ldw	r3,4(r16)
    9ab4:	dfc00117 	ldw	ra,4(sp)
    9ab8:	dc000017 	ldw	r16,0(sp)
    9abc:	dec00204 	addi	sp,sp,8
    9ac0:	f800283a 	ret

00009ac4 <__copybits>:
    9ac4:	297fffc4 	addi	r5,r5,-1
    9ac8:	280fd17a 	srai	r7,r5,5
    9acc:	30c00417 	ldw	r3,16(r6)
    9ad0:	30800504 	addi	r2,r6,20
    9ad4:	39c00044 	addi	r7,r7,1
    9ad8:	18c7883a 	add	r3,r3,r3
    9adc:	39cf883a 	add	r7,r7,r7
    9ae0:	18c7883a 	add	r3,r3,r3
    9ae4:	39cf883a 	add	r7,r7,r7
    9ae8:	10c7883a 	add	r3,r2,r3
    9aec:	21cf883a 	add	r7,r4,r7
    9af0:	10c00d2e 	bgeu	r2,r3,9b28 <__copybits+0x64>
    9af4:	200b883a 	mov	r5,r4
    9af8:	12000017 	ldw	r8,0(r2)
    9afc:	29400104 	addi	r5,r5,4
    9b00:	10800104 	addi	r2,r2,4
    9b04:	2a3fff15 	stw	r8,-4(r5)
    9b08:	10fffb36 	bltu	r2,r3,9af8 <__alt_mem_Flash_flash_data+0xf4009af8>
    9b0c:	1985c83a 	sub	r2,r3,r6
    9b10:	10bffac4 	addi	r2,r2,-21
    9b14:	1004d0ba 	srli	r2,r2,2
    9b18:	10800044 	addi	r2,r2,1
    9b1c:	1085883a 	add	r2,r2,r2
    9b20:	1085883a 	add	r2,r2,r2
    9b24:	2089883a 	add	r4,r4,r2
    9b28:	21c0032e 	bgeu	r4,r7,9b38 <__copybits+0x74>
    9b2c:	20000015 	stw	zero,0(r4)
    9b30:	21000104 	addi	r4,r4,4
    9b34:	21fffd36 	bltu	r4,r7,9b2c <__alt_mem_Flash_flash_data+0xf4009b2c>
    9b38:	f800283a 	ret

00009b3c <__any_on>:
    9b3c:	20c00417 	ldw	r3,16(r4)
    9b40:	2805d17a 	srai	r2,r5,5
    9b44:	21000504 	addi	r4,r4,20
    9b48:	18800d0e 	bge	r3,r2,9b80 <__any_on+0x44>
    9b4c:	18c7883a 	add	r3,r3,r3
    9b50:	18c7883a 	add	r3,r3,r3
    9b54:	20c7883a 	add	r3,r4,r3
    9b58:	20c0192e 	bgeu	r4,r3,9bc0 <__any_on+0x84>
    9b5c:	18bfff17 	ldw	r2,-4(r3)
    9b60:	18ffff04 	addi	r3,r3,-4
    9b64:	1000041e 	bne	r2,zero,9b78 <__any_on+0x3c>
    9b68:	20c0142e 	bgeu	r4,r3,9bbc <__any_on+0x80>
    9b6c:	18ffff04 	addi	r3,r3,-4
    9b70:	19400017 	ldw	r5,0(r3)
    9b74:	283ffc26 	beq	r5,zero,9b68 <__alt_mem_Flash_flash_data+0xf4009b68>
    9b78:	00800044 	movi	r2,1
    9b7c:	f800283a 	ret
    9b80:	10c00a0e 	bge	r2,r3,9bac <__any_on+0x70>
    9b84:	1085883a 	add	r2,r2,r2
    9b88:	1085883a 	add	r2,r2,r2
    9b8c:	294007cc 	andi	r5,r5,31
    9b90:	2087883a 	add	r3,r4,r2
    9b94:	283ff026 	beq	r5,zero,9b58 <__alt_mem_Flash_flash_data+0xf4009b58>
    9b98:	19800017 	ldw	r6,0(r3)
    9b9c:	3144d83a 	srl	r2,r6,r5
    9ba0:	114a983a 	sll	r5,r2,r5
    9ba4:	29bff41e 	bne	r5,r6,9b78 <__alt_mem_Flash_flash_data+0xf4009b78>
    9ba8:	003feb06 	br	9b58 <__alt_mem_Flash_flash_data+0xf4009b58>
    9bac:	1085883a 	add	r2,r2,r2
    9bb0:	1085883a 	add	r2,r2,r2
    9bb4:	2087883a 	add	r3,r4,r2
    9bb8:	003fe706 	br	9b58 <__alt_mem_Flash_flash_data+0xf4009b58>
    9bbc:	f800283a 	ret
    9bc0:	0005883a 	mov	r2,zero
    9bc4:	f800283a 	ret

00009bc8 <_realloc_r>:
    9bc8:	defff604 	addi	sp,sp,-40
    9bcc:	dd000415 	stw	r20,16(sp)
    9bd0:	dc400115 	stw	r17,4(sp)
    9bd4:	dfc00915 	stw	ra,36(sp)
    9bd8:	df000815 	stw	fp,32(sp)
    9bdc:	ddc00715 	stw	r23,28(sp)
    9be0:	dd800615 	stw	r22,24(sp)
    9be4:	dd400515 	stw	r21,20(sp)
    9be8:	dcc00315 	stw	r19,12(sp)
    9bec:	dc800215 	stw	r18,8(sp)
    9bf0:	dc000015 	stw	r16,0(sp)
    9bf4:	2829883a 	mov	r20,r5
    9bf8:	3023883a 	mov	r17,r6
    9bfc:	2800ad26 	beq	r5,zero,9eb4 <_realloc_r+0x2ec>
    9c00:	2025883a 	mov	r18,r4
    9c04:	000feec0 	call	feec <__malloc_lock>
    9c08:	a0ffff17 	ldw	r3,-4(r20)
    9c0c:	043fff04 	movi	r16,-4
    9c10:	890002c4 	addi	r4,r17,11
    9c14:	01c00584 	movi	r7,22
    9c18:	a57ffe04 	addi	r21,r20,-8
    9c1c:	1c20703a 	and	r16,r3,r16
    9c20:	39001d2e 	bgeu	r7,r4,9c98 <_realloc_r+0xd0>
    9c24:	05bffe04 	movi	r22,-8
    9c28:	25ac703a 	and	r22,r4,r22
    9c2c:	b00f883a 	mov	r7,r22
    9c30:	b0006516 	blt	r22,zero,9dc8 <_realloc_r+0x200>
    9c34:	b4406436 	bltu	r22,r17,9dc8 <_realloc_r+0x200>
    9c38:	81c01a0e 	bge	r16,r7,9ca4 <_realloc_r+0xdc>
    9c3c:	070000b4 	movhi	fp,2
    9c40:	e734b304 	addi	fp,fp,-11572
    9c44:	e1400217 	ldw	r5,8(fp)
    9c48:	ac11883a 	add	r8,r21,r16
    9c4c:	2a006226 	beq	r5,r8,9dd8 <_realloc_r+0x210>
    9c50:	41800117 	ldw	r6,4(r8)
    9c54:	027fff84 	movi	r9,-2
    9c58:	3252703a 	and	r9,r6,r9
    9c5c:	4253883a 	add	r9,r8,r9
    9c60:	49000117 	ldw	r4,4(r9)
    9c64:	2100004c 	andi	r4,r4,1
    9c68:	2000281e 	bne	r4,zero,9d0c <_realloc_r+0x144>
    9c6c:	00bfff04 	movi	r2,-4
    9c70:	3084703a 	and	r2,r6,r2
    9c74:	1409883a 	add	r4,r2,r16
    9c78:	21c05e16 	blt	r4,r7,9df4 <_realloc_r+0x22c>
    9c7c:	40800317 	ldw	r2,12(r8)
    9c80:	41400217 	ldw	r5,8(r8)
    9c84:	a023883a 	mov	r17,r20
    9c88:	2021883a 	mov	r16,r4
    9c8c:	28800315 	stw	r2,12(r5)
    9c90:	11400215 	stw	r5,8(r2)
    9c94:	00000406 	br	9ca8 <_realloc_r+0xe0>
    9c98:	01c00404 	movi	r7,16
    9c9c:	382d883a 	mov	r22,r7
    9ca0:	003fe406 	br	9c34 <__alt_mem_Flash_flash_data+0xf4009c34>
    9ca4:	a023883a 	mov	r17,r20
    9ca8:	858fc83a 	sub	r7,r16,r22
    9cac:	008003c4 	movi	r2,15
    9cb0:	18c0004c 	andi	r3,r3,1
    9cb4:	11c07236 	bltu	r2,r7,9e80 <_realloc_r+0x2b8>
    9cb8:	1c06b03a 	or	r3,r3,r16
    9cbc:	a8c00115 	stw	r3,4(r21)
    9cc0:	ac21883a 	add	r16,r21,r16
    9cc4:	80800117 	ldw	r2,4(r16)
    9cc8:	10800054 	ori	r2,r2,1
    9ccc:	80800115 	stw	r2,4(r16)
    9cd0:	9009883a 	mov	r4,r18
    9cd4:	001000c0 	call	1000c <__malloc_unlock>
    9cd8:	8805883a 	mov	r2,r17
    9cdc:	dfc00917 	ldw	ra,36(sp)
    9ce0:	df000817 	ldw	fp,32(sp)
    9ce4:	ddc00717 	ldw	r23,28(sp)
    9ce8:	dd800617 	ldw	r22,24(sp)
    9cec:	dd400517 	ldw	r21,20(sp)
    9cf0:	dd000417 	ldw	r20,16(sp)
    9cf4:	dcc00317 	ldw	r19,12(sp)
    9cf8:	dc800217 	ldw	r18,8(sp)
    9cfc:	dc400117 	ldw	r17,4(sp)
    9d00:	dc000017 	ldw	r16,0(sp)
    9d04:	dec00a04 	addi	sp,sp,40
    9d08:	f800283a 	ret
    9d0c:	18c0004c 	andi	r3,r3,1
    9d10:	1800081e 	bne	r3,zero,9d34 <_realloc_r+0x16c>
    9d14:	a4fffe17 	ldw	r19,-8(r20)
    9d18:	00bfff04 	movi	r2,-4
    9d1c:	ace7c83a 	sub	r19,r21,r19
    9d20:	98c00117 	ldw	r3,4(r19)
    9d24:	1886703a 	and	r3,r3,r2
    9d28:	98000226 	beq	r19,zero,9d34 <_realloc_r+0x16c>
    9d2c:	1c2f883a 	add	r23,r3,r16
    9d30:	b9c06d0e 	bge	r23,r7,9ee8 <_realloc_r+0x320>
    9d34:	880b883a 	mov	r5,r17
    9d38:	9009883a 	mov	r4,r18
    9d3c:	0007fe00 	call	7fe0 <_malloc_r>
    9d40:	1023883a 	mov	r17,r2
    9d44:	1000ef26 	beq	r2,zero,a104 <_realloc_r+0x53c>
    9d48:	a0ffff17 	ldw	r3,-4(r20)
    9d4c:	113ffe04 	addi	r4,r2,-8
    9d50:	00bfff84 	movi	r2,-2
    9d54:	1884703a 	and	r2,r3,r2
    9d58:	a885883a 	add	r2,r21,r2
    9d5c:	2080bf26 	beq	r4,r2,a05c <_realloc_r+0x494>
    9d60:	81bfff04 	addi	r6,r16,-4
    9d64:	00800904 	movi	r2,36
    9d68:	11808936 	bltu	r2,r6,9f90 <_realloc_r+0x3c8>
    9d6c:	00c004c4 	movi	r3,19
    9d70:	19806c2e 	bgeu	r3,r6,9f24 <_realloc_r+0x35c>
    9d74:	a0c00017 	ldw	r3,0(r20)
    9d78:	88c00015 	stw	r3,0(r17)
    9d7c:	a0c00117 	ldw	r3,4(r20)
    9d80:	88c00115 	stw	r3,4(r17)
    9d84:	00c006c4 	movi	r3,27
    9d88:	1980ac36 	bltu	r3,r6,a03c <_realloc_r+0x474>
    9d8c:	88800204 	addi	r2,r17,8
    9d90:	a0c00204 	addi	r3,r20,8
    9d94:	19000017 	ldw	r4,0(r3)
    9d98:	11000015 	stw	r4,0(r2)
    9d9c:	19000117 	ldw	r4,4(r3)
    9da0:	11000115 	stw	r4,4(r2)
    9da4:	18c00217 	ldw	r3,8(r3)
    9da8:	10c00215 	stw	r3,8(r2)
    9dac:	a00b883a 	mov	r5,r20
    9db0:	9009883a 	mov	r4,r18
    9db4:	00074100 	call	7410 <_free_r>
    9db8:	9009883a 	mov	r4,r18
    9dbc:	001000c0 	call	1000c <__malloc_unlock>
    9dc0:	8805883a 	mov	r2,r17
    9dc4:	003fc506 	br	9cdc <__alt_mem_Flash_flash_data+0xf4009cdc>
    9dc8:	00800304 	movi	r2,12
    9dcc:	90800015 	stw	r2,0(r18)
    9dd0:	0005883a 	mov	r2,zero
    9dd4:	003fc106 	br	9cdc <__alt_mem_Flash_flash_data+0xf4009cdc>
    9dd8:	29800117 	ldw	r6,4(r5)
    9ddc:	00bfff04 	movi	r2,-4
    9de0:	b1000404 	addi	r4,r22,16
    9de4:	3084703a 	and	r2,r6,r2
    9de8:	140d883a 	add	r6,r2,r16
    9dec:	31005b0e 	bge	r6,r4,9f5c <_realloc_r+0x394>
    9df0:	2811883a 	mov	r8,r5
    9df4:	18c0004c 	andi	r3,r3,1
    9df8:	183fce1e 	bne	r3,zero,9d34 <__alt_mem_Flash_flash_data+0xf4009d34>
    9dfc:	a4fffe17 	ldw	r19,-8(r20)
    9e00:	00ffff04 	movi	r3,-4
    9e04:	ace7c83a 	sub	r19,r21,r19
    9e08:	99000117 	ldw	r4,4(r19)
    9e0c:	20c6703a 	and	r3,r4,r3
    9e10:	403fc526 	beq	r8,zero,9d28 <__alt_mem_Flash_flash_data+0xf4009d28>
    9e14:	1c2f883a 	add	r23,r3,r16
    9e18:	b8af883a 	add	r23,r23,r2
    9e1c:	41406026 	beq	r8,r5,9fa0 <_realloc_r+0x3d8>
    9e20:	b9ffc116 	blt	r23,r7,9d28 <__alt_mem_Flash_flash_data+0xf4009d28>
    9e24:	40c00217 	ldw	r3,8(r8)
    9e28:	40800317 	ldw	r2,12(r8)
    9e2c:	81bfff04 	addi	r6,r16,-4
    9e30:	01000904 	movi	r4,36
    9e34:	18800315 	stw	r2,12(r3)
    9e38:	10c00215 	stw	r3,8(r2)
    9e3c:	99400217 	ldw	r5,8(r19)
    9e40:	98c00317 	ldw	r3,12(r19)
    9e44:	9c400204 	addi	r17,r19,8
    9e48:	28c00315 	stw	r3,12(r5)
    9e4c:	19400215 	stw	r5,8(r3)
    9e50:	21802d36 	bltu	r4,r6,9f08 <_realloc_r+0x340>
    9e54:	008004c4 	movi	r2,19
    9e58:	1180352e 	bgeu	r2,r6,9f30 <_realloc_r+0x368>
    9e5c:	a0800017 	ldw	r2,0(r20)
    9e60:	98800215 	stw	r2,8(r19)
    9e64:	a0800117 	ldw	r2,4(r20)
    9e68:	98800315 	stw	r2,12(r19)
    9e6c:	008006c4 	movi	r2,27
    9e70:	11808036 	bltu	r2,r6,a074 <_realloc_r+0x4ac>
    9e74:	98c00404 	addi	r3,r19,16
    9e78:	a5000204 	addi	r20,r20,8
    9e7c:	00002d06 	br	9f34 <_realloc_r+0x36c>
    9e80:	1d86b03a 	or	r3,r3,r22
    9e84:	ad8b883a 	add	r5,r21,r22
    9e88:	a8c00115 	stw	r3,4(r21)
    9e8c:	38800054 	ori	r2,r7,1
    9e90:	28800115 	stw	r2,4(r5)
    9e94:	29cf883a 	add	r7,r5,r7
    9e98:	38800117 	ldw	r2,4(r7)
    9e9c:	9009883a 	mov	r4,r18
    9ea0:	29400204 	addi	r5,r5,8
    9ea4:	10800054 	ori	r2,r2,1
    9ea8:	38800115 	stw	r2,4(r7)
    9eac:	00074100 	call	7410 <_free_r>
    9eb0:	003f8706 	br	9cd0 <__alt_mem_Flash_flash_data+0xf4009cd0>
    9eb4:	300b883a 	mov	r5,r6
    9eb8:	dfc00917 	ldw	ra,36(sp)
    9ebc:	df000817 	ldw	fp,32(sp)
    9ec0:	ddc00717 	ldw	r23,28(sp)
    9ec4:	dd800617 	ldw	r22,24(sp)
    9ec8:	dd400517 	ldw	r21,20(sp)
    9ecc:	dd000417 	ldw	r20,16(sp)
    9ed0:	dcc00317 	ldw	r19,12(sp)
    9ed4:	dc800217 	ldw	r18,8(sp)
    9ed8:	dc400117 	ldw	r17,4(sp)
    9edc:	dc000017 	ldw	r16,0(sp)
    9ee0:	dec00a04 	addi	sp,sp,40
    9ee4:	0007fe01 	jmpi	7fe0 <_malloc_r>
    9ee8:	98800317 	ldw	r2,12(r19)
    9eec:	98c00217 	ldw	r3,8(r19)
    9ef0:	81bfff04 	addi	r6,r16,-4
    9ef4:	01000904 	movi	r4,36
    9ef8:	18800315 	stw	r2,12(r3)
    9efc:	10c00215 	stw	r3,8(r2)
    9f00:	9c400204 	addi	r17,r19,8
    9f04:	21bfd32e 	bgeu	r4,r6,9e54 <__alt_mem_Flash_flash_data+0xf4009e54>
    9f08:	8809883a 	mov	r4,r17
    9f0c:	a00b883a 	mov	r5,r20
    9f10:	00089a80 	call	89a8 <memmove>
    9f14:	98c00117 	ldw	r3,4(r19)
    9f18:	b821883a 	mov	r16,r23
    9f1c:	982b883a 	mov	r21,r19
    9f20:	003f6106 	br	9ca8 <__alt_mem_Flash_flash_data+0xf4009ca8>
    9f24:	8805883a 	mov	r2,r17
    9f28:	a007883a 	mov	r3,r20
    9f2c:	003f9906 	br	9d94 <__alt_mem_Flash_flash_data+0xf4009d94>
    9f30:	8807883a 	mov	r3,r17
    9f34:	a0800017 	ldw	r2,0(r20)
    9f38:	b821883a 	mov	r16,r23
    9f3c:	982b883a 	mov	r21,r19
    9f40:	18800015 	stw	r2,0(r3)
    9f44:	a0800117 	ldw	r2,4(r20)
    9f48:	18800115 	stw	r2,4(r3)
    9f4c:	a0800217 	ldw	r2,8(r20)
    9f50:	18800215 	stw	r2,8(r3)
    9f54:	98c00117 	ldw	r3,4(r19)
    9f58:	003f5306 	br	9ca8 <__alt_mem_Flash_flash_data+0xf4009ca8>
    9f5c:	adab883a 	add	r21,r21,r22
    9f60:	3585c83a 	sub	r2,r6,r22
    9f64:	e5400215 	stw	r21,8(fp)
    9f68:	10800054 	ori	r2,r2,1
    9f6c:	a8800115 	stw	r2,4(r21)
    9f70:	a0bfff17 	ldw	r2,-4(r20)
    9f74:	9009883a 	mov	r4,r18
    9f78:	1080004c 	andi	r2,r2,1
    9f7c:	b0acb03a 	or	r22,r22,r2
    9f80:	a5bfff15 	stw	r22,-4(r20)
    9f84:	001000c0 	call	1000c <__malloc_unlock>
    9f88:	a005883a 	mov	r2,r20
    9f8c:	003f5306 	br	9cdc <__alt_mem_Flash_flash_data+0xf4009cdc>
    9f90:	8809883a 	mov	r4,r17
    9f94:	a00b883a 	mov	r5,r20
    9f98:	00089a80 	call	89a8 <memmove>
    9f9c:	003f8306 	br	9dac <__alt_mem_Flash_flash_data+0xf4009dac>
    9fa0:	b0800404 	addi	r2,r22,16
    9fa4:	b8bf6016 	blt	r23,r2,9d28 <__alt_mem_Flash_flash_data+0xf4009d28>
    9fa8:	98800317 	ldw	r2,12(r19)
    9fac:	98c00217 	ldw	r3,8(r19)
    9fb0:	81bfff04 	addi	r6,r16,-4
    9fb4:	01000904 	movi	r4,36
    9fb8:	18800315 	stw	r2,12(r3)
    9fbc:	10c00215 	stw	r3,8(r2)
    9fc0:	9c400204 	addi	r17,r19,8
    9fc4:	21804336 	bltu	r4,r6,a0d4 <_realloc_r+0x50c>
    9fc8:	008004c4 	movi	r2,19
    9fcc:	11803f2e 	bgeu	r2,r6,a0cc <_realloc_r+0x504>
    9fd0:	a0800017 	ldw	r2,0(r20)
    9fd4:	98800215 	stw	r2,8(r19)
    9fd8:	a0800117 	ldw	r2,4(r20)
    9fdc:	98800315 	stw	r2,12(r19)
    9fe0:	008006c4 	movi	r2,27
    9fe4:	11803f36 	bltu	r2,r6,a0e4 <_realloc_r+0x51c>
    9fe8:	98800404 	addi	r2,r19,16
    9fec:	a5000204 	addi	r20,r20,8
    9ff0:	a0c00017 	ldw	r3,0(r20)
    9ff4:	10c00015 	stw	r3,0(r2)
    9ff8:	a0c00117 	ldw	r3,4(r20)
    9ffc:	10c00115 	stw	r3,4(r2)
    a000:	a0c00217 	ldw	r3,8(r20)
    a004:	10c00215 	stw	r3,8(r2)
    a008:	9d87883a 	add	r3,r19,r22
    a00c:	bd85c83a 	sub	r2,r23,r22
    a010:	e0c00215 	stw	r3,8(fp)
    a014:	10800054 	ori	r2,r2,1
    a018:	18800115 	stw	r2,4(r3)
    a01c:	98800117 	ldw	r2,4(r19)
    a020:	9009883a 	mov	r4,r18
    a024:	1080004c 	andi	r2,r2,1
    a028:	b0acb03a 	or	r22,r22,r2
    a02c:	9d800115 	stw	r22,4(r19)
    a030:	001000c0 	call	1000c <__malloc_unlock>
    a034:	8805883a 	mov	r2,r17
    a038:	003f2806 	br	9cdc <__alt_mem_Flash_flash_data+0xf4009cdc>
    a03c:	a0c00217 	ldw	r3,8(r20)
    a040:	88c00215 	stw	r3,8(r17)
    a044:	a0c00317 	ldw	r3,12(r20)
    a048:	88c00315 	stw	r3,12(r17)
    a04c:	30801126 	beq	r6,r2,a094 <_realloc_r+0x4cc>
    a050:	88800404 	addi	r2,r17,16
    a054:	a0c00404 	addi	r3,r20,16
    a058:	003f4e06 	br	9d94 <__alt_mem_Flash_flash_data+0xf4009d94>
    a05c:	893fff17 	ldw	r4,-4(r17)
    a060:	00bfff04 	movi	r2,-4
    a064:	a023883a 	mov	r17,r20
    a068:	2084703a 	and	r2,r4,r2
    a06c:	80a1883a 	add	r16,r16,r2
    a070:	003f0d06 	br	9ca8 <__alt_mem_Flash_flash_data+0xf4009ca8>
    a074:	a0800217 	ldw	r2,8(r20)
    a078:	98800415 	stw	r2,16(r19)
    a07c:	a0800317 	ldw	r2,12(r20)
    a080:	98800515 	stw	r2,20(r19)
    a084:	31000a26 	beq	r6,r4,a0b0 <_realloc_r+0x4e8>
    a088:	98c00604 	addi	r3,r19,24
    a08c:	a5000404 	addi	r20,r20,16
    a090:	003fa806 	br	9f34 <__alt_mem_Flash_flash_data+0xf4009f34>
    a094:	a1000417 	ldw	r4,16(r20)
    a098:	88800604 	addi	r2,r17,24
    a09c:	a0c00604 	addi	r3,r20,24
    a0a0:	89000415 	stw	r4,16(r17)
    a0a4:	a1000517 	ldw	r4,20(r20)
    a0a8:	89000515 	stw	r4,20(r17)
    a0ac:	003f3906 	br	9d94 <__alt_mem_Flash_flash_data+0xf4009d94>
    a0b0:	a0800417 	ldw	r2,16(r20)
    a0b4:	a5000604 	addi	r20,r20,24
    a0b8:	98c00804 	addi	r3,r19,32
    a0bc:	98800615 	stw	r2,24(r19)
    a0c0:	a0bfff17 	ldw	r2,-4(r20)
    a0c4:	98800715 	stw	r2,28(r19)
    a0c8:	003f9a06 	br	9f34 <__alt_mem_Flash_flash_data+0xf4009f34>
    a0cc:	8805883a 	mov	r2,r17
    a0d0:	003fc706 	br	9ff0 <__alt_mem_Flash_flash_data+0xf4009ff0>
    a0d4:	8809883a 	mov	r4,r17
    a0d8:	a00b883a 	mov	r5,r20
    a0dc:	00089a80 	call	89a8 <memmove>
    a0e0:	003fc906 	br	a008 <__alt_mem_Flash_flash_data+0xf400a008>
    a0e4:	a0800217 	ldw	r2,8(r20)
    a0e8:	98800415 	stw	r2,16(r19)
    a0ec:	a0800317 	ldw	r2,12(r20)
    a0f0:	98800515 	stw	r2,20(r19)
    a0f4:	31000726 	beq	r6,r4,a114 <_realloc_r+0x54c>
    a0f8:	98800604 	addi	r2,r19,24
    a0fc:	a5000404 	addi	r20,r20,16
    a100:	003fbb06 	br	9ff0 <__alt_mem_Flash_flash_data+0xf4009ff0>
    a104:	9009883a 	mov	r4,r18
    a108:	001000c0 	call	1000c <__malloc_unlock>
    a10c:	0005883a 	mov	r2,zero
    a110:	003ef206 	br	9cdc <__alt_mem_Flash_flash_data+0xf4009cdc>
    a114:	a0c00417 	ldw	r3,16(r20)
    a118:	a5000604 	addi	r20,r20,24
    a11c:	98800804 	addi	r2,r19,32
    a120:	98c00615 	stw	r3,24(r19)
    a124:	a0ffff17 	ldw	r3,-4(r20)
    a128:	98c00715 	stw	r3,28(r19)
    a12c:	003fb006 	br	9ff0 <__alt_mem_Flash_flash_data+0xf4009ff0>

0000a130 <__fpclassifyd>:
    a130:	00a00034 	movhi	r2,32768
    a134:	10bfffc4 	addi	r2,r2,-1
    a138:	2884703a 	and	r2,r5,r2
    a13c:	10000726 	beq	r2,zero,a15c <__fpclassifyd+0x2c>
    a140:	00fffc34 	movhi	r3,65520
    a144:	019ff834 	movhi	r6,32736
    a148:	28c7883a 	add	r3,r5,r3
    a14c:	31bfffc4 	addi	r6,r6,-1
    a150:	30c00536 	bltu	r6,r3,a168 <__fpclassifyd+0x38>
    a154:	00800104 	movi	r2,4
    a158:	f800283a 	ret
    a15c:	2000021e 	bne	r4,zero,a168 <__fpclassifyd+0x38>
    a160:	00800084 	movi	r2,2
    a164:	f800283a 	ret
    a168:	00dffc34 	movhi	r3,32752
    a16c:	019ff834 	movhi	r6,32736
    a170:	28cb883a 	add	r5,r5,r3
    a174:	31bfffc4 	addi	r6,r6,-1
    a178:	317ff62e 	bgeu	r6,r5,a154 <__alt_mem_Flash_flash_data+0xf400a154>
    a17c:	01400434 	movhi	r5,16
    a180:	297fffc4 	addi	r5,r5,-1
    a184:	28800236 	bltu	r5,r2,a190 <__fpclassifyd+0x60>
    a188:	008000c4 	movi	r2,3
    a18c:	f800283a 	ret
    a190:	10c00226 	beq	r2,r3,a19c <__fpclassifyd+0x6c>
    a194:	0005883a 	mov	r2,zero
    a198:	f800283a 	ret
    a19c:	2005003a 	cmpeq	r2,r4,zero
    a1a0:	f800283a 	ret

0000a1a4 <_sbrk_r>:
    a1a4:	defffd04 	addi	sp,sp,-12
    a1a8:	dc000015 	stw	r16,0(sp)
    a1ac:	040000b4 	movhi	r16,2
    a1b0:	dc400115 	stw	r17,4(sp)
    a1b4:	84034d04 	addi	r16,r16,3380
    a1b8:	2023883a 	mov	r17,r4
    a1bc:	2809883a 	mov	r4,r5
    a1c0:	dfc00215 	stw	ra,8(sp)
    a1c4:	80000015 	stw	zero,0(r16)
    a1c8:	000fbd80 	call	fbd8 <sbrk>
    a1cc:	00ffffc4 	movi	r3,-1
    a1d0:	10c00526 	beq	r2,r3,a1e8 <_sbrk_r+0x44>
    a1d4:	dfc00217 	ldw	ra,8(sp)
    a1d8:	dc400117 	ldw	r17,4(sp)
    a1dc:	dc000017 	ldw	r16,0(sp)
    a1e0:	dec00304 	addi	sp,sp,12
    a1e4:	f800283a 	ret
    a1e8:	80c00017 	ldw	r3,0(r16)
    a1ec:	183ff926 	beq	r3,zero,a1d4 <__alt_mem_Flash_flash_data+0xf400a1d4>
    a1f0:	88c00015 	stw	r3,0(r17)
    a1f4:	003ff706 	br	a1d4 <__alt_mem_Flash_flash_data+0xf400a1d4>

0000a1f8 <__sread>:
    a1f8:	defffe04 	addi	sp,sp,-8
    a1fc:	dc000015 	stw	r16,0(sp)
    a200:	2821883a 	mov	r16,r5
    a204:	2940038f 	ldh	r5,14(r5)
    a208:	dfc00115 	stw	ra,4(sp)
    a20c:	000bdfc0 	call	bdfc <_read_r>
    a210:	10000716 	blt	r2,zero,a230 <__sread+0x38>
    a214:	80c01417 	ldw	r3,80(r16)
    a218:	1887883a 	add	r3,r3,r2
    a21c:	80c01415 	stw	r3,80(r16)
    a220:	dfc00117 	ldw	ra,4(sp)
    a224:	dc000017 	ldw	r16,0(sp)
    a228:	dec00204 	addi	sp,sp,8
    a22c:	f800283a 	ret
    a230:	80c0030b 	ldhu	r3,12(r16)
    a234:	18fbffcc 	andi	r3,r3,61439
    a238:	80c0030d 	sth	r3,12(r16)
    a23c:	dfc00117 	ldw	ra,4(sp)
    a240:	dc000017 	ldw	r16,0(sp)
    a244:	dec00204 	addi	sp,sp,8
    a248:	f800283a 	ret

0000a24c <__seofread>:
    a24c:	0005883a 	mov	r2,zero
    a250:	f800283a 	ret

0000a254 <__swrite>:
    a254:	2880030b 	ldhu	r2,12(r5)
    a258:	defffb04 	addi	sp,sp,-20
    a25c:	dcc00315 	stw	r19,12(sp)
    a260:	dc800215 	stw	r18,8(sp)
    a264:	dc400115 	stw	r17,4(sp)
    a268:	dc000015 	stw	r16,0(sp)
    a26c:	dfc00415 	stw	ra,16(sp)
    a270:	10c0400c 	andi	r3,r2,256
    a274:	2821883a 	mov	r16,r5
    a278:	2027883a 	mov	r19,r4
    a27c:	3025883a 	mov	r18,r6
    a280:	3823883a 	mov	r17,r7
    a284:	18000526 	beq	r3,zero,a29c <__swrite+0x48>
    a288:	2940038f 	ldh	r5,14(r5)
    a28c:	000d883a 	mov	r6,zero
    a290:	01c00084 	movi	r7,2
    a294:	000bda00 	call	bda0 <_lseek_r>
    a298:	8080030b 	ldhu	r2,12(r16)
    a29c:	8140038f 	ldh	r5,14(r16)
    a2a0:	10bbffcc 	andi	r2,r2,61439
    a2a4:	9809883a 	mov	r4,r19
    a2a8:	900d883a 	mov	r6,r18
    a2ac:	880f883a 	mov	r7,r17
    a2b0:	8080030d 	sth	r2,12(r16)
    a2b4:	dfc00417 	ldw	ra,16(sp)
    a2b8:	dcc00317 	ldw	r19,12(sp)
    a2bc:	dc800217 	ldw	r18,8(sp)
    a2c0:	dc400117 	ldw	r17,4(sp)
    a2c4:	dc000017 	ldw	r16,0(sp)
    a2c8:	dec00504 	addi	sp,sp,20
    a2cc:	000b89c1 	jmpi	b89c <_write_r>

0000a2d0 <__sseek>:
    a2d0:	defffe04 	addi	sp,sp,-8
    a2d4:	dc000015 	stw	r16,0(sp)
    a2d8:	2821883a 	mov	r16,r5
    a2dc:	2940038f 	ldh	r5,14(r5)
    a2e0:	dfc00115 	stw	ra,4(sp)
    a2e4:	000bda00 	call	bda0 <_lseek_r>
    a2e8:	00ffffc4 	movi	r3,-1
    a2ec:	10c00826 	beq	r2,r3,a310 <__sseek+0x40>
    a2f0:	80c0030b 	ldhu	r3,12(r16)
    a2f4:	80801415 	stw	r2,80(r16)
    a2f8:	18c40014 	ori	r3,r3,4096
    a2fc:	80c0030d 	sth	r3,12(r16)
    a300:	dfc00117 	ldw	ra,4(sp)
    a304:	dc000017 	ldw	r16,0(sp)
    a308:	dec00204 	addi	sp,sp,8
    a30c:	f800283a 	ret
    a310:	80c0030b 	ldhu	r3,12(r16)
    a314:	18fbffcc 	andi	r3,r3,61439
    a318:	80c0030d 	sth	r3,12(r16)
    a31c:	dfc00117 	ldw	ra,4(sp)
    a320:	dc000017 	ldw	r16,0(sp)
    a324:	dec00204 	addi	sp,sp,8
    a328:	f800283a 	ret

0000a32c <__sclose>:
    a32c:	2940038f 	ldh	r5,14(r5)
    a330:	000b8f81 	jmpi	b8f8 <_close_r>

0000a334 <strcmp>:
    a334:	2144b03a 	or	r2,r4,r5
    a338:	108000cc 	andi	r2,r2,3
    a33c:	1000171e 	bne	r2,zero,a39c <strcmp+0x68>
    a340:	20800017 	ldw	r2,0(r4)
    a344:	28c00017 	ldw	r3,0(r5)
    a348:	10c0141e 	bne	r2,r3,a39c <strcmp+0x68>
    a34c:	027fbff4 	movhi	r9,65279
    a350:	4a7fbfc4 	addi	r9,r9,-257
    a354:	0086303a 	nor	r3,zero,r2
    a358:	02202074 	movhi	r8,32897
    a35c:	1245883a 	add	r2,r2,r9
    a360:	42202004 	addi	r8,r8,-32640
    a364:	10c4703a 	and	r2,r2,r3
    a368:	1204703a 	and	r2,r2,r8
    a36c:	10000226 	beq	r2,zero,a378 <strcmp+0x44>
    a370:	00001706 	br	a3d0 <strcmp+0x9c>
    a374:	1000161e 	bne	r2,zero,a3d0 <strcmp+0x9c>
    a378:	21000104 	addi	r4,r4,4
    a37c:	20c00017 	ldw	r3,0(r4)
    a380:	29400104 	addi	r5,r5,4
    a384:	29800017 	ldw	r6,0(r5)
    a388:	1a4f883a 	add	r7,r3,r9
    a38c:	00c4303a 	nor	r2,zero,r3
    a390:	3884703a 	and	r2,r7,r2
    a394:	1204703a 	and	r2,r2,r8
    a398:	19bff626 	beq	r3,r6,a374 <__alt_mem_Flash_flash_data+0xf400a374>
    a39c:	20800007 	ldb	r2,0(r4)
    a3a0:	1000051e 	bne	r2,zero,a3b8 <strcmp+0x84>
    a3a4:	00000606 	br	a3c0 <strcmp+0x8c>
    a3a8:	21000044 	addi	r4,r4,1
    a3ac:	20800007 	ldb	r2,0(r4)
    a3b0:	29400044 	addi	r5,r5,1
    a3b4:	10000226 	beq	r2,zero,a3c0 <strcmp+0x8c>
    a3b8:	28c00007 	ldb	r3,0(r5)
    a3bc:	10fffa26 	beq	r2,r3,a3a8 <__alt_mem_Flash_flash_data+0xf400a3a8>
    a3c0:	20800003 	ldbu	r2,0(r4)
    a3c4:	28c00003 	ldbu	r3,0(r5)
    a3c8:	10c5c83a 	sub	r2,r2,r3
    a3cc:	f800283a 	ret
    a3d0:	0005883a 	mov	r2,zero
    a3d4:	f800283a 	ret

0000a3d8 <__sprint_r.part.0>:
    a3d8:	28801917 	ldw	r2,100(r5)
    a3dc:	defff604 	addi	sp,sp,-40
    a3e0:	dd400515 	stw	r21,20(sp)
    a3e4:	dcc00315 	stw	r19,12(sp)
    a3e8:	dfc00915 	stw	ra,36(sp)
    a3ec:	df000815 	stw	fp,32(sp)
    a3f0:	ddc00715 	stw	r23,28(sp)
    a3f4:	dd800615 	stw	r22,24(sp)
    a3f8:	dd000415 	stw	r20,16(sp)
    a3fc:	dc800215 	stw	r18,8(sp)
    a400:	dc400115 	stw	r17,4(sp)
    a404:	dc000015 	stw	r16,0(sp)
    a408:	1088000c 	andi	r2,r2,8192
    a40c:	2827883a 	mov	r19,r5
    a410:	302b883a 	mov	r21,r6
    a414:	10002d26 	beq	r2,zero,a4cc <__sprint_r.part.0+0xf4>
    a418:	30800217 	ldw	r2,8(r6)
    a41c:	35800017 	ldw	r22,0(r6)
    a420:	10002826 	beq	r2,zero,a4c4 <__sprint_r.part.0+0xec>
    a424:	2029883a 	mov	r20,r4
    a428:	b5c00104 	addi	r23,r22,4
    a42c:	04bfffc4 	movi	r18,-1
    a430:	bc400017 	ldw	r17,0(r23)
    a434:	b4000017 	ldw	r16,0(r22)
    a438:	0039883a 	mov	fp,zero
    a43c:	8822d0ba 	srli	r17,r17,2
    a440:	04400316 	blt	zero,r17,a450 <__sprint_r.part.0+0x78>
    a444:	00001806 	br	a4a8 <__sprint_r.part.0+0xd0>
    a448:	84000104 	addi	r16,r16,4
    a44c:	8f001526 	beq	r17,fp,a4a4 <__sprint_r.part.0+0xcc>
    a450:	81400017 	ldw	r5,0(r16)
    a454:	a009883a 	mov	r4,r20
    a458:	980d883a 	mov	r6,r19
    a45c:	000bb140 	call	bb14 <_fputwc_r>
    a460:	e7000044 	addi	fp,fp,1
    a464:	14bff81e 	bne	r2,r18,a448 <__alt_mem_Flash_flash_data+0xf400a448>
    a468:	9005883a 	mov	r2,r18
    a46c:	a8000215 	stw	zero,8(r21)
    a470:	a8000115 	stw	zero,4(r21)
    a474:	dfc00917 	ldw	ra,36(sp)
    a478:	df000817 	ldw	fp,32(sp)
    a47c:	ddc00717 	ldw	r23,28(sp)
    a480:	dd800617 	ldw	r22,24(sp)
    a484:	dd400517 	ldw	r21,20(sp)
    a488:	dd000417 	ldw	r20,16(sp)
    a48c:	dcc00317 	ldw	r19,12(sp)
    a490:	dc800217 	ldw	r18,8(sp)
    a494:	dc400117 	ldw	r17,4(sp)
    a498:	dc000017 	ldw	r16,0(sp)
    a49c:	dec00a04 	addi	sp,sp,40
    a4a0:	f800283a 	ret
    a4a4:	a8800217 	ldw	r2,8(r21)
    a4a8:	8c63883a 	add	r17,r17,r17
    a4ac:	8c63883a 	add	r17,r17,r17
    a4b0:	1445c83a 	sub	r2,r2,r17
    a4b4:	a8800215 	stw	r2,8(r21)
    a4b8:	b5800204 	addi	r22,r22,8
    a4bc:	bdc00204 	addi	r23,r23,8
    a4c0:	103fdb1e 	bne	r2,zero,a430 <__alt_mem_Flash_flash_data+0xf400a430>
    a4c4:	0005883a 	mov	r2,zero
    a4c8:	003fe806 	br	a46c <__alt_mem_Flash_flash_data+0xf400a46c>
    a4cc:	00077000 	call	7700 <__sfvwrite_r>
    a4d0:	003fe606 	br	a46c <__alt_mem_Flash_flash_data+0xf400a46c>

0000a4d4 <__sprint_r>:
    a4d4:	30c00217 	ldw	r3,8(r6)
    a4d8:	18000126 	beq	r3,zero,a4e0 <__sprint_r+0xc>
    a4dc:	000a3d81 	jmpi	a3d8 <__sprint_r.part.0>
    a4e0:	30000115 	stw	zero,4(r6)
    a4e4:	0005883a 	mov	r2,zero
    a4e8:	f800283a 	ret

0000a4ec <___vfiprintf_internal_r>:
    a4ec:	deffca04 	addi	sp,sp,-216
    a4f0:	dd803215 	stw	r22,200(sp)
    a4f4:	dd403115 	stw	r21,196(sp)
    a4f8:	dfc03515 	stw	ra,212(sp)
    a4fc:	df003415 	stw	fp,208(sp)
    a500:	ddc03315 	stw	r23,204(sp)
    a504:	dd003015 	stw	r20,192(sp)
    a508:	dcc02f15 	stw	r19,188(sp)
    a50c:	dc802e15 	stw	r18,184(sp)
    a510:	dc402d15 	stw	r17,180(sp)
    a514:	dc002c15 	stw	r16,176(sp)
    a518:	d9002015 	stw	r4,128(sp)
    a51c:	d9c02215 	stw	r7,136(sp)
    a520:	282b883a 	mov	r21,r5
    a524:	302d883a 	mov	r22,r6
    a528:	20000226 	beq	r4,zero,a534 <___vfiprintf_internal_r+0x48>
    a52c:	20800e17 	ldw	r2,56(r4)
    a530:	1001b126 	beq	r2,zero,abf8 <___vfiprintf_internal_r+0x70c>
    a534:	a880030b 	ldhu	r2,12(r21)
    a538:	10c8000c 	andi	r3,r2,8192
    a53c:	1800061e 	bne	r3,zero,a558 <___vfiprintf_internal_r+0x6c>
    a540:	a9001917 	ldw	r4,100(r21)
    a544:	00f7ffc4 	movi	r3,-8193
    a548:	10880014 	ori	r2,r2,8192
    a54c:	20c6703a 	and	r3,r4,r3
    a550:	a880030d 	sth	r2,12(r21)
    a554:	a8c01915 	stw	r3,100(r21)
    a558:	10c0020c 	andi	r3,r2,8
    a55c:	18018926 	beq	r3,zero,ab84 <___vfiprintf_internal_r+0x698>
    a560:	a8c00417 	ldw	r3,16(r21)
    a564:	18018726 	beq	r3,zero,ab84 <___vfiprintf_internal_r+0x698>
    a568:	1080068c 	andi	r2,r2,26
    a56c:	00c00284 	movi	r3,10
    a570:	10c18c26 	beq	r2,r3,aba4 <___vfiprintf_internal_r+0x6b8>
    a574:	d8801a04 	addi	r2,sp,104
    a578:	d8c019c4 	addi	r3,sp,103
    a57c:	070000b4 	movhi	fp,2
    a580:	05c000b4 	movhi	r23,2
    a584:	10c9c83a 	sub	r4,r2,r3
    a588:	e7328304 	addi	fp,fp,-13812
    a58c:	bdf27f04 	addi	r23,r23,-13828
    a590:	d8801e15 	stw	r2,120(sp)
    a594:	d8c01f15 	stw	r3,124(sp)
    a598:	dec01a15 	stw	sp,104(sp)
    a59c:	d8001c15 	stw	zero,112(sp)
    a5a0:	d8001b15 	stw	zero,108(sp)
    a5a4:	d8002615 	stw	zero,152(sp)
    a5a8:	d8002315 	stw	zero,140(sp)
    a5ac:	d9002715 	stw	r4,156(sp)
    a5b0:	d811883a 	mov	r8,sp
    a5b4:	dd402115 	stw	r21,132(sp)
    a5b8:	b021883a 	mov	r16,r22
    a5bc:	80800007 	ldb	r2,0(r16)
    a5c0:	10037226 	beq	r2,zero,b38c <___vfiprintf_internal_r+0xea0>
    a5c4:	01000944 	movi	r4,37
    a5c8:	11037026 	beq	r2,r4,b38c <___vfiprintf_internal_r+0xea0>
    a5cc:	8005883a 	mov	r2,r16
    a5d0:	00000106 	br	a5d8 <___vfiprintf_internal_r+0xec>
    a5d4:	19000326 	beq	r3,r4,a5e4 <___vfiprintf_internal_r+0xf8>
    a5d8:	10800044 	addi	r2,r2,1
    a5dc:	10c00007 	ldb	r3,0(r2)
    a5e0:	183ffc1e 	bne	r3,zero,a5d4 <__alt_mem_Flash_flash_data+0xf400a5d4>
    a5e4:	1425c83a 	sub	r18,r2,r16
    a5e8:	1023883a 	mov	r17,r2
    a5ec:	90001026 	beq	r18,zero,a630 <___vfiprintf_internal_r+0x144>
    a5f0:	d8c01c17 	ldw	r3,112(sp)
    a5f4:	d8801b17 	ldw	r2,108(sp)
    a5f8:	44000015 	stw	r16,0(r8)
    a5fc:	90c7883a 	add	r3,r18,r3
    a600:	10800044 	addi	r2,r2,1
    a604:	44800115 	stw	r18,4(r8)
    a608:	d8c01c15 	stw	r3,112(sp)
    a60c:	d8801b15 	stw	r2,108(sp)
    a610:	010001c4 	movi	r4,7
    a614:	2080750e 	bge	r4,r2,a7ec <___vfiprintf_internal_r+0x300>
    a618:	18036f1e 	bne	r3,zero,b3d8 <___vfiprintf_internal_r+0xeec>
    a61c:	d8802317 	ldw	r2,140(sp)
    a620:	d8001b15 	stw	zero,108(sp)
    a624:	d811883a 	mov	r8,sp
    a628:	1485883a 	add	r2,r2,r18
    a62c:	d8802315 	stw	r2,140(sp)
    a630:	88800007 	ldb	r2,0(r17)
    a634:	10041026 	beq	r2,zero,b678 <___vfiprintf_internal_r+0x118c>
    a638:	88c00047 	ldb	r3,1(r17)
    a63c:	88800044 	addi	r2,r17,1
    a640:	d8001d85 	stb	zero,118(sp)
    a644:	000f883a 	mov	r7,zero
    a648:	027fffc4 	movi	r9,-1
    a64c:	0025883a 	mov	r18,zero
    a650:	002b883a 	mov	r21,zero
    a654:	01401604 	movi	r5,88
    a658:	01800244 	movi	r6,9
    a65c:	03400a84 	movi	r13,42
    a660:	03001b04 	movi	r12,108
    a664:	14000044 	addi	r16,r2,1
    a668:	18bff804 	addi	r2,r3,-32
    a66c:	28825536 	bltu	r5,r2,afc4 <___vfiprintf_internal_r+0xad8>
    a670:	100490ba 	slli	r2,r2,2
    a674:	01000074 	movhi	r4,1
    a678:	2129a204 	addi	r4,r4,-22904
    a67c:	1105883a 	add	r2,r2,r4
    a680:	10800017 	ldw	r2,0(r2)
    a684:	1000683a 	jmp	r2
    a688:	0000ad88 	cmpgei	zero,zero,694
    a68c:	0000afc4 	movi	zero,703
    a690:	0000afc4 	movi	zero,703
    a694:	0000ada8 	cmpgeui	zero,zero,694
    a698:	0000afc4 	movi	zero,703
    a69c:	0000afc4 	movi	zero,703
    a6a0:	0000afc4 	movi	zero,703
    a6a4:	0000afc4 	movi	zero,703
    a6a8:	0000afc4 	movi	zero,703
    a6ac:	0000afc4 	movi	zero,703
    a6b0:	0000adb8 	rdprs	zero,zero,694
    a6b4:	0000add8 	cmpnei	zero,zero,695
    a6b8:	0000afc4 	movi	zero,703
    a6bc:	0000ac00 	call	ac0 <Game+0x334>
    a6c0:	0000acec 	andhi	zero,zero,691
    a6c4:	0000afc4 	movi	zero,703
    a6c8:	0000ac6c 	andhi	zero,zero,689
    a6cc:	0000ac7c 	xorhi	zero,zero,689
    a6d0:	0000ac7c 	xorhi	zero,zero,689
    a6d4:	0000ac7c 	xorhi	zero,zero,689
    a6d8:	0000ac7c 	xorhi	zero,zero,689
    a6dc:	0000ac7c 	xorhi	zero,zero,689
    a6e0:	0000ac7c 	xorhi	zero,zero,689
    a6e4:	0000ac7c 	xorhi	zero,zero,689
    a6e8:	0000ac7c 	xorhi	zero,zero,689
    a6ec:	0000ac7c 	xorhi	zero,zero,689
    a6f0:	0000afc4 	movi	zero,703
    a6f4:	0000afc4 	movi	zero,703
    a6f8:	0000afc4 	movi	zero,703
    a6fc:	0000afc4 	movi	zero,703
    a700:	0000afc4 	movi	zero,703
    a704:	0000afc4 	movi	zero,703
    a708:	0000afc4 	movi	zero,703
    a70c:	0000afc4 	movi	zero,703
    a710:	0000afc4 	movi	zero,703
    a714:	0000afc4 	movi	zero,703
    a718:	0000aca8 	cmpgeui	zero,zero,690
    a71c:	0000afc4 	movi	zero,703
    a720:	0000afc4 	movi	zero,703
    a724:	0000afc4 	movi	zero,703
    a728:	0000afc4 	movi	zero,703
    a72c:	0000afc4 	movi	zero,703
    a730:	0000afc4 	movi	zero,703
    a734:	0000afc4 	movi	zero,703
    a738:	0000afc4 	movi	zero,703
    a73c:	0000afc4 	movi	zero,703
    a740:	0000afc4 	movi	zero,703
    a744:	0000a834 	movhi	zero,672
    a748:	0000afc4 	movi	zero,703
    a74c:	0000afc4 	movi	zero,703
    a750:	0000afc4 	movi	zero,703
    a754:	0000afc4 	movi	zero,703
    a758:	0000afc4 	movi	zero,703
    a75c:	0000a800 	call	a80 <Game+0x2f4>
    a760:	0000afc4 	movi	zero,703
    a764:	0000afc4 	movi	zero,703
    a768:	0000ae48 	cmpgei	zero,zero,697
    a76c:	0000afc4 	movi	zero,703
    a770:	0000afc4 	movi	zero,703
    a774:	0000afc4 	movi	zero,703
    a778:	0000afc4 	movi	zero,703
    a77c:	0000afc4 	movi	zero,703
    a780:	0000afc4 	movi	zero,703
    a784:	0000afc4 	movi	zero,703
    a788:	0000afc4 	movi	zero,703
    a78c:	0000afc4 	movi	zero,703
    a790:	0000afc4 	movi	zero,703
    a794:	0000ade8 	cmpgeui	zero,zero,695
    a798:	0000ae14 	movui	zero,696
    a79c:	0000afc4 	movi	zero,703
    a7a0:	0000afc4 	movi	zero,703
    a7a4:	0000afc4 	movi	zero,703
    a7a8:	0000aef0 	cmpltui	zero,zero,699
    a7ac:	0000ae14 	movui	zero,696
    a7b0:	0000afc4 	movi	zero,703
    a7b4:	0000afc4 	movi	zero,703
    a7b8:	0000af00 	call	af0 <Game+0x364>
    a7bc:	0000afc4 	movi	zero,703
    a7c0:	0000ad2c 	andhi	zero,zero,692
    a7c4:	0000a838 	rdprs	zero,zero,672
    a7c8:	0000af14 	movui	zero,700
    a7cc:	0000af54 	movui	zero,701
    a7d0:	0000afc4 	movi	zero,703
    a7d4:	0000ae9c 	xori	zero,zero,698
    a7d8:	0000afc4 	movi	zero,703
    a7dc:	0000a804 	movi	zero,672
    a7e0:	0000afc4 	movi	zero,703
    a7e4:	0000afc4 	movi	zero,703
    a7e8:	0000af64 	muli	zero,zero,701
    a7ec:	42000204 	addi	r8,r8,8
    a7f0:	d8802317 	ldw	r2,140(sp)
    a7f4:	1485883a 	add	r2,r2,r18
    a7f8:	d8802315 	stw	r2,140(sp)
    a7fc:	003f8c06 	br	a630 <__alt_mem_Flash_flash_data+0xf400a630>
    a800:	ad400414 	ori	r21,r21,16
    a804:	a880080c 	andi	r2,r21,32
    a808:	1001e61e 	bne	r2,zero,afa4 <___vfiprintf_internal_r+0xab8>
    a80c:	a880040c 	andi	r2,r21,16
    a810:	10034726 	beq	r2,zero,b530 <___vfiprintf_internal_r+0x1044>
    a814:	d8802217 	ldw	r2,136(sp)
    a818:	001b883a 	mov	r13,zero
    a81c:	15800017 	ldw	r22,0(r2)
    a820:	10800104 	addi	r2,r2,4
    a824:	d8802215 	stw	r2,136(sp)
    a828:	b009883a 	mov	r4,r22
    a82c:	00800044 	movi	r2,1
    a830:	00000c06 	br	a864 <___vfiprintf_internal_r+0x378>
    a834:	ad400414 	ori	r21,r21,16
    a838:	a880080c 	andi	r2,r21,32
    a83c:	1001491e 	bne	r2,zero,ad64 <___vfiprintf_internal_r+0x878>
    a840:	a880040c 	andi	r2,r21,16
    a844:	10032d26 	beq	r2,zero,b4fc <___vfiprintf_internal_r+0x1010>
    a848:	d9002217 	ldw	r4,136(sp)
    a84c:	001b883a 	mov	r13,zero
    a850:	0005883a 	mov	r2,zero
    a854:	25800017 	ldw	r22,0(r4)
    a858:	21000104 	addi	r4,r4,4
    a85c:	d9002215 	stw	r4,136(sp)
    a860:	b009883a 	mov	r4,r22
    a864:	d8001d85 	stb	zero,118(sp)
    a868:	4827883a 	mov	r19,r9
    a86c:	001d883a 	mov	r14,zero
    a870:	48000216 	blt	r9,zero,a87c <___vfiprintf_internal_r+0x390>
    a874:	00ffdfc4 	movi	r3,-129
    a878:	a8ea703a 	and	r21,r21,r3
    a87c:	2002071e 	bne	r4,zero,b09c <___vfiprintf_internal_r+0xbb0>
    a880:	4802ad26 	beq	r9,zero,b338 <___vfiprintf_internal_r+0xe4c>
    a884:	10803fcc 	andi	r2,r2,255
    a888:	00c00044 	movi	r3,1
    a88c:	10c22b26 	beq	r2,r3,b13c <___vfiprintf_internal_r+0xc50>
    a890:	00c00084 	movi	r3,2
    a894:	dd001a04 	addi	r20,sp,104
    a898:	10c0dd1e 	bne	r2,r3,ac10 <___vfiprintf_internal_r+0x724>
    a89c:	d9002617 	ldw	r4,152(sp)
    a8a0:	b08003cc 	andi	r2,r22,15
    a8a4:	6806973a 	slli	r3,r13,28
    a8a8:	2085883a 	add	r2,r4,r2
    a8ac:	b02cd13a 	srli	r22,r22,4
    a8b0:	10800003 	ldbu	r2,0(r2)
    a8b4:	681ad13a 	srli	r13,r13,4
    a8b8:	a53fffc4 	addi	r20,r20,-1
    a8bc:	1dacb03a 	or	r22,r3,r22
    a8c0:	a0800005 	stb	r2,0(r20)
    a8c4:	b344b03a 	or	r2,r22,r13
    a8c8:	103ff51e 	bne	r2,zero,a8a0 <__alt_mem_Flash_flash_data+0xf400a8a0>
    a8cc:	d9001e17 	ldw	r4,120(sp)
    a8d0:	2527c83a 	sub	r19,r4,r20
    a8d4:	9823883a 	mov	r17,r19
    a8d8:	9a40010e 	bge	r19,r9,a8e0 <___vfiprintf_internal_r+0x3f4>
    a8dc:	4823883a 	mov	r17,r9
    a8e0:	73803fcc 	andi	r14,r14,255
    a8e4:	7380201c 	xori	r14,r14,128
    a8e8:	73bfe004 	addi	r14,r14,-128
    a8ec:	70000126 	beq	r14,zero,a8f4 <___vfiprintf_internal_r+0x408>
    a8f0:	8c400044 	addi	r17,r17,1
    a8f4:	ab40008c 	andi	r13,r21,2
    a8f8:	68000126 	beq	r13,zero,a900 <___vfiprintf_internal_r+0x414>
    a8fc:	8c400084 	addi	r17,r17,2
    a900:	ad80210c 	andi	r22,r21,132
    a904:	b001c51e 	bne	r22,zero,b01c <___vfiprintf_internal_r+0xb30>
    a908:	9447c83a 	sub	r3,r18,r17
    a90c:	00c1c30e 	bge	zero,r3,b01c <___vfiprintf_internal_r+0xb30>
    a910:	01c00404 	movi	r7,16
    a914:	d8801c17 	ldw	r2,112(sp)
    a918:	38c37b0e 	bge	r7,r3,b708 <___vfiprintf_internal_r+0x121c>
    a91c:	010000b4 	movhi	r4,2
    a920:	21328304 	addi	r4,r4,-13812
    a924:	dc002915 	stw	r16,164(sp)
    a928:	d9801b17 	ldw	r6,108(sp)
    a92c:	d9002415 	stw	r4,144(sp)
    a930:	03c001c4 	movi	r15,7
    a934:	da402515 	stw	r9,148(sp)
    a938:	db402815 	stw	r13,160(sp)
    a93c:	1821883a 	mov	r16,r3
    a940:	00000506 	br	a958 <___vfiprintf_internal_r+0x46c>
    a944:	31400084 	addi	r5,r6,2
    a948:	42000204 	addi	r8,r8,8
    a94c:	200d883a 	mov	r6,r4
    a950:	843ffc04 	addi	r16,r16,-16
    a954:	3c000d0e 	bge	r7,r16,a98c <___vfiprintf_internal_r+0x4a0>
    a958:	10800404 	addi	r2,r2,16
    a95c:	31000044 	addi	r4,r6,1
    a960:	47000015 	stw	fp,0(r8)
    a964:	41c00115 	stw	r7,4(r8)
    a968:	d8801c15 	stw	r2,112(sp)
    a96c:	d9001b15 	stw	r4,108(sp)
    a970:	793ff40e 	bge	r15,r4,a944 <__alt_mem_Flash_flash_data+0xf400a944>
    a974:	10019b1e 	bne	r2,zero,afe4 <___vfiprintf_internal_r+0xaf8>
    a978:	843ffc04 	addi	r16,r16,-16
    a97c:	000d883a 	mov	r6,zero
    a980:	01400044 	movi	r5,1
    a984:	d811883a 	mov	r8,sp
    a988:	3c3ff316 	blt	r7,r16,a958 <__alt_mem_Flash_flash_data+0xf400a958>
    a98c:	8007883a 	mov	r3,r16
    a990:	da402517 	ldw	r9,148(sp)
    a994:	db402817 	ldw	r13,160(sp)
    a998:	dc002917 	ldw	r16,164(sp)
    a99c:	d9002417 	ldw	r4,144(sp)
    a9a0:	1885883a 	add	r2,r3,r2
    a9a4:	40c00115 	stw	r3,4(r8)
    a9a8:	41000015 	stw	r4,0(r8)
    a9ac:	d8801c15 	stw	r2,112(sp)
    a9b0:	d9401b15 	stw	r5,108(sp)
    a9b4:	00c001c4 	movi	r3,7
    a9b8:	19426a16 	blt	r3,r5,b364 <___vfiprintf_internal_r+0xe78>
    a9bc:	d8c01d87 	ldb	r3,118(sp)
    a9c0:	42000204 	addi	r8,r8,8
    a9c4:	29000044 	addi	r4,r5,1
    a9c8:	1801991e 	bne	r3,zero,b030 <___vfiprintf_internal_r+0xb44>
    a9cc:	68000c26 	beq	r13,zero,aa00 <___vfiprintf_internal_r+0x514>
    a9d0:	d8c01d04 	addi	r3,sp,116
    a9d4:	10800084 	addi	r2,r2,2
    a9d8:	40c00015 	stw	r3,0(r8)
    a9dc:	00c00084 	movi	r3,2
    a9e0:	40c00115 	stw	r3,4(r8)
    a9e4:	d8801c15 	stw	r2,112(sp)
    a9e8:	d9001b15 	stw	r4,108(sp)
    a9ec:	00c001c4 	movi	r3,7
    a9f0:	19024c16 	blt	r3,r4,b324 <___vfiprintf_internal_r+0xe38>
    a9f4:	200b883a 	mov	r5,r4
    a9f8:	42000204 	addi	r8,r8,8
    a9fc:	21000044 	addi	r4,r4,1
    aa00:	00c02004 	movi	r3,128
    aa04:	b0c20126 	beq	r22,r3,b20c <___vfiprintf_internal_r+0xd20>
    aa08:	4cedc83a 	sub	r22,r9,r19
    aa0c:	0580230e 	bge	zero,r22,aa9c <___vfiprintf_internal_r+0x5b0>
    aa10:	01c00404 	movi	r7,16
    aa14:	3d83140e 	bge	r7,r22,b668 <___vfiprintf_internal_r+0x117c>
    aa18:	010000b4 	movhi	r4,2
    aa1c:	21327f04 	addi	r4,r4,-13828
    aa20:	d9002415 	stw	r4,144(sp)
    aa24:	034001c4 	movi	r13,7
    aa28:	00000506 	br	aa40 <___vfiprintf_internal_r+0x554>
    aa2c:	29000084 	addi	r4,r5,2
    aa30:	42000204 	addi	r8,r8,8
    aa34:	180b883a 	mov	r5,r3
    aa38:	b5bffc04 	addi	r22,r22,-16
    aa3c:	3d800d0e 	bge	r7,r22,aa74 <___vfiprintf_internal_r+0x588>
    aa40:	10800404 	addi	r2,r2,16
    aa44:	28c00044 	addi	r3,r5,1
    aa48:	45c00015 	stw	r23,0(r8)
    aa4c:	41c00115 	stw	r7,4(r8)
    aa50:	d8801c15 	stw	r2,112(sp)
    aa54:	d8c01b15 	stw	r3,108(sp)
    aa58:	68fff40e 	bge	r13,r3,aa2c <__alt_mem_Flash_flash_data+0xf400aa2c>
    aa5c:	1001811e 	bne	r2,zero,b064 <___vfiprintf_internal_r+0xb78>
    aa60:	b5bffc04 	addi	r22,r22,-16
    aa64:	01000044 	movi	r4,1
    aa68:	000b883a 	mov	r5,zero
    aa6c:	d811883a 	mov	r8,sp
    aa70:	3dbff316 	blt	r7,r22,aa40 <__alt_mem_Flash_flash_data+0xf400aa40>
    aa74:	d8c02417 	ldw	r3,144(sp)
    aa78:	1585883a 	add	r2,r2,r22
    aa7c:	45800115 	stw	r22,4(r8)
    aa80:	40c00015 	stw	r3,0(r8)
    aa84:	d8801c15 	stw	r2,112(sp)
    aa88:	d9001b15 	stw	r4,108(sp)
    aa8c:	00c001c4 	movi	r3,7
    aa90:	1901d016 	blt	r3,r4,b1d4 <___vfiprintf_internal_r+0xce8>
    aa94:	42000204 	addi	r8,r8,8
    aa98:	21000044 	addi	r4,r4,1
    aa9c:	14c5883a 	add	r2,r2,r19
    aaa0:	45000015 	stw	r20,0(r8)
    aaa4:	44c00115 	stw	r19,4(r8)
    aaa8:	d8801c15 	stw	r2,112(sp)
    aaac:	d9001b15 	stw	r4,108(sp)
    aab0:	00c001c4 	movi	r3,7
    aab4:	1901cf0e 	bge	r3,r4,b1f4 <___vfiprintf_internal_r+0xd08>
    aab8:	1002361e 	bne	r2,zero,b394 <___vfiprintf_internal_r+0xea8>
    aabc:	d8001b15 	stw	zero,108(sp)
    aac0:	aac0010c 	andi	r11,r21,4
    aac4:	58002826 	beq	r11,zero,ab68 <___vfiprintf_internal_r+0x67c>
    aac8:	9467c83a 	sub	r19,r18,r17
    aacc:	d811883a 	mov	r8,sp
    aad0:	04c3340e 	bge	zero,r19,b7a4 <___vfiprintf_internal_r+0x12b8>
    aad4:	01c00404 	movi	r7,16
    aad8:	3cc31b0e 	bge	r7,r19,b748 <___vfiprintf_internal_r+0x125c>
    aadc:	00c000b4 	movhi	r3,2
    aae0:	18f28304 	addi	r3,r3,-13812
    aae4:	d9001b17 	ldw	r4,108(sp)
    aae8:	d8c02415 	stw	r3,144(sp)
    aaec:	382b883a 	mov	r21,r7
    aaf0:	050001c4 	movi	r20,7
    aaf4:	dd802017 	ldw	r22,128(sp)
    aaf8:	00000506 	br	ab10 <___vfiprintf_internal_r+0x624>
    aafc:	21400084 	addi	r5,r4,2
    ab00:	42000204 	addi	r8,r8,8
    ab04:	1809883a 	mov	r4,r3
    ab08:	9cfffc04 	addi	r19,r19,-16
    ab0c:	acc00d0e 	bge	r21,r19,ab44 <___vfiprintf_internal_r+0x658>
    ab10:	10800404 	addi	r2,r2,16
    ab14:	20c00044 	addi	r3,r4,1
    ab18:	47000015 	stw	fp,0(r8)
    ab1c:	45400115 	stw	r21,4(r8)
    ab20:	d8801c15 	stw	r2,112(sp)
    ab24:	d8c01b15 	stw	r3,108(sp)
    ab28:	a0fff40e 	bge	r20,r3,aafc <__alt_mem_Flash_flash_data+0xf400aafc>
    ab2c:	10019f1e 	bne	r2,zero,b1ac <___vfiprintf_internal_r+0xcc0>
    ab30:	9cfffc04 	addi	r19,r19,-16
    ab34:	01400044 	movi	r5,1
    ab38:	0009883a 	mov	r4,zero
    ab3c:	d811883a 	mov	r8,sp
    ab40:	acfff316 	blt	r21,r19,ab10 <__alt_mem_Flash_flash_data+0xf400ab10>
    ab44:	d8c02417 	ldw	r3,144(sp)
    ab48:	14c5883a 	add	r2,r2,r19
    ab4c:	44c00115 	stw	r19,4(r8)
    ab50:	40c00015 	stw	r3,0(r8)
    ab54:	d8801c15 	stw	r2,112(sp)
    ab58:	d9401b15 	stw	r5,108(sp)
    ab5c:	00c001c4 	movi	r3,7
    ab60:	1941810e 	bge	r3,r5,b168 <___vfiprintf_internal_r+0xc7c>
    ab64:	10017a1e 	bne	r2,zero,b150 <___vfiprintf_internal_r+0xc64>
    ab68:	8c82a416 	blt	r17,r18,b5fc <___vfiprintf_internal_r+0x1110>
    ab6c:	d9002317 	ldw	r4,140(sp)
    ab70:	2449883a 	add	r4,r4,r17
    ab74:	d9002315 	stw	r4,140(sp)
    ab78:	d8001b15 	stw	zero,108(sp)
    ab7c:	d811883a 	mov	r8,sp
    ab80:	003e8e06 	br	a5bc <__alt_mem_Flash_flash_data+0xf400a5bc>
    ab84:	d9002017 	ldw	r4,128(sp)
    ab88:	a80b883a 	mov	r5,r21
    ab8c:	000523c0 	call	523c <__swsetup_r>
    ab90:	10000c1e 	bne	r2,zero,abc4 <___vfiprintf_internal_r+0x6d8>
    ab94:	a880030b 	ldhu	r2,12(r21)
    ab98:	00c00284 	movi	r3,10
    ab9c:	1080068c 	andi	r2,r2,26
    aba0:	10fe741e 	bne	r2,r3,a574 <__alt_mem_Flash_flash_data+0xf400a574>
    aba4:	a880038f 	ldh	r2,14(r21)
    aba8:	103e7216 	blt	r2,zero,a574 <__alt_mem_Flash_flash_data+0xf400a574>
    abac:	d9002017 	ldw	r4,128(sp)
    abb0:	d9c02217 	ldw	r7,136(sp)
    abb4:	a80b883a 	mov	r5,r21
    abb8:	b00d883a 	mov	r6,r22
    abbc:	000b7e00 	call	b7e0 <__sbprintf>
    abc0:	00000106 	br	abc8 <___vfiprintf_internal_r+0x6dc>
    abc4:	00bfffc4 	movi	r2,-1
    abc8:	dfc03517 	ldw	ra,212(sp)
    abcc:	df003417 	ldw	fp,208(sp)
    abd0:	ddc03317 	ldw	r23,204(sp)
    abd4:	dd803217 	ldw	r22,200(sp)
    abd8:	dd403117 	ldw	r21,196(sp)
    abdc:	dd003017 	ldw	r20,192(sp)
    abe0:	dcc02f17 	ldw	r19,188(sp)
    abe4:	dc802e17 	ldw	r18,184(sp)
    abe8:	dc402d17 	ldw	r17,180(sp)
    abec:	dc002c17 	ldw	r16,176(sp)
    abf0:	dec03604 	addi	sp,sp,216
    abf4:	f800283a 	ret
    abf8:	000729c0 	call	729c <__sinit>
    abfc:	003e4d06 	br	a534 <__alt_mem_Flash_flash_data+0xf400a534>
    ac00:	8005883a 	mov	r2,r16
    ac04:	ad400114 	ori	r21,r21,4
    ac08:	80c00007 	ldb	r3,0(r16)
    ac0c:	003e9506 	br	a664 <__alt_mem_Flash_flash_data+0xf400a664>
    ac10:	b006d0fa 	srli	r3,r22,3
    ac14:	6808977a 	slli	r4,r13,29
    ac18:	681ad0fa 	srli	r13,r13,3
    ac1c:	b58001cc 	andi	r22,r22,7
    ac20:	b0800c04 	addi	r2,r22,48
    ac24:	a53fffc4 	addi	r20,r20,-1
    ac28:	20ecb03a 	or	r22,r4,r3
    ac2c:	a0800005 	stb	r2,0(r20)
    ac30:	b346b03a 	or	r3,r22,r13
    ac34:	183ff61e 	bne	r3,zero,ac10 <__alt_mem_Flash_flash_data+0xf400ac10>
    ac38:	a8c0004c 	andi	r3,r21,1
    ac3c:	a009883a 	mov	r4,r20
    ac40:	18013b26 	beq	r3,zero,b130 <___vfiprintf_internal_r+0xc44>
    ac44:	10803fcc 	andi	r2,r2,255
    ac48:	1080201c 	xori	r2,r2,128
    ac4c:	10bfe004 	addi	r2,r2,-128
    ac50:	00c00c04 	movi	r3,48
    ac54:	10ff1d26 	beq	r2,r3,a8cc <__alt_mem_Flash_flash_data+0xf400a8cc>
    ac58:	d8801e17 	ldw	r2,120(sp)
    ac5c:	a53fffc4 	addi	r20,r20,-1
    ac60:	20ffffc5 	stb	r3,-1(r4)
    ac64:	1527c83a 	sub	r19,r2,r20
    ac68:	003f1a06 	br	a8d4 <__alt_mem_Flash_flash_data+0xf400a8d4>
    ac6c:	ad402014 	ori	r21,r21,128
    ac70:	8005883a 	mov	r2,r16
    ac74:	80c00007 	ldb	r3,0(r16)
    ac78:	003e7a06 	br	a664 <__alt_mem_Flash_flash_data+0xf400a664>
    ac7c:	8005883a 	mov	r2,r16
    ac80:	0025883a 	mov	r18,zero
    ac84:	193ff404 	addi	r4,r3,-48
    ac88:	10c00007 	ldb	r3,0(r2)
    ac8c:	948002a4 	muli	r18,r18,10
    ac90:	84000044 	addi	r16,r16,1
    ac94:	8005883a 	mov	r2,r16
    ac98:	9125883a 	add	r18,r18,r4
    ac9c:	193ff404 	addi	r4,r3,-48
    aca0:	313ff92e 	bgeu	r6,r4,ac88 <__alt_mem_Flash_flash_data+0xf400ac88>
    aca4:	003e7006 	br	a668 <__alt_mem_Flash_flash_data+0xf400a668>
    aca8:	ad400414 	ori	r21,r21,16
    acac:	d9c01d85 	stb	r7,118(sp)
    acb0:	a880080c 	andi	r2,r21,32
    acb4:	d8c02217 	ldw	r3,136(sp)
    acb8:	10005a26 	beq	r2,zero,ae24 <___vfiprintf_internal_r+0x938>
    acbc:	d9002217 	ldw	r4,136(sp)
    acc0:	18800117 	ldw	r2,4(r3)
    acc4:	1d800017 	ldw	r22,0(r3)
    acc8:	21000204 	addi	r4,r4,8
    accc:	d9002215 	stw	r4,136(sp)
    acd0:	101b883a 	mov	r13,r2
    acd4:	1001f416 	blt	r2,zero,b4a8 <___vfiprintf_internal_r+0xfbc>
    acd8:	db801d83 	ldbu	r14,118(sp)
    acdc:	4827883a 	mov	r19,r9
    ace0:	00800044 	movi	r2,1
    ace4:	b348b03a 	or	r4,r22,r13
    ace8:	003ee106 	br	a870 <__alt_mem_Flash_flash_data+0xf400a870>
    acec:	80c00007 	ldb	r3,0(r16)
    acf0:	80800044 	addi	r2,r16,1
    acf4:	1b42a326 	beq	r3,r13,b784 <___vfiprintf_internal_r+0x1298>
    acf8:	193ff404 	addi	r4,r3,-48
    acfc:	1021883a 	mov	r16,r2
    ad00:	0013883a 	mov	r9,zero
    ad04:	313e5836 	bltu	r6,r4,a668 <__alt_mem_Flash_flash_data+0xf400a668>
    ad08:	80c00007 	ldb	r3,0(r16)
    ad0c:	4a4002a4 	muli	r9,r9,10
    ad10:	84000044 	addi	r16,r16,1
    ad14:	2253883a 	add	r9,r4,r9
    ad18:	193ff404 	addi	r4,r3,-48
    ad1c:	313ffa2e 	bgeu	r6,r4,ad08 <__alt_mem_Flash_flash_data+0xf400ad08>
    ad20:	483e510e 	bge	r9,zero,a668 <__alt_mem_Flash_flash_data+0xf400a668>
    ad24:	027fffc4 	movi	r9,-1
    ad28:	003e4f06 	br	a668 <__alt_mem_Flash_flash_data+0xf400a668>
    ad2c:	d9c01d85 	stb	r7,118(sp)
    ad30:	a880080c 	andi	r2,r21,32
    ad34:	10020826 	beq	r2,zero,b558 <___vfiprintf_internal_r+0x106c>
    ad38:	d8c02217 	ldw	r3,136(sp)
    ad3c:	d9002317 	ldw	r4,140(sp)
    ad40:	18800017 	ldw	r2,0(r3)
    ad44:	2007d7fa 	srai	r3,r4,31
    ad48:	d9002217 	ldw	r4,136(sp)
    ad4c:	10c00115 	stw	r3,4(r2)
    ad50:	21000104 	addi	r4,r4,4
    ad54:	d9002215 	stw	r4,136(sp)
    ad58:	d9002317 	ldw	r4,140(sp)
    ad5c:	11000015 	stw	r4,0(r2)
    ad60:	003e1606 	br	a5bc <__alt_mem_Flash_flash_data+0xf400a5bc>
    ad64:	d8802217 	ldw	r2,136(sp)
    ad68:	d8c02217 	ldw	r3,136(sp)
    ad6c:	15800017 	ldw	r22,0(r2)
    ad70:	13400117 	ldw	r13,4(r2)
    ad74:	18c00204 	addi	r3,r3,8
    ad78:	0005883a 	mov	r2,zero
    ad7c:	d8c02215 	stw	r3,136(sp)
    ad80:	b348b03a 	or	r4,r22,r13
    ad84:	003eb706 	br	a864 <__alt_mem_Flash_flash_data+0xf400a864>
    ad88:	38803fcc 	andi	r2,r7,255
    ad8c:	1080201c 	xori	r2,r2,128
    ad90:	10bfe004 	addi	r2,r2,-128
    ad94:	1001e31e 	bne	r2,zero,b524 <___vfiprintf_internal_r+0x1038>
    ad98:	8005883a 	mov	r2,r16
    ad9c:	01c00804 	movi	r7,32
    ada0:	80c00007 	ldb	r3,0(r16)
    ada4:	003e2f06 	br	a664 <__alt_mem_Flash_flash_data+0xf400a664>
    ada8:	ad400054 	ori	r21,r21,1
    adac:	8005883a 	mov	r2,r16
    adb0:	80c00007 	ldb	r3,0(r16)
    adb4:	003e2b06 	br	a664 <__alt_mem_Flash_flash_data+0xf400a664>
    adb8:	d8c02217 	ldw	r3,136(sp)
    adbc:	1c800017 	ldw	r18,0(r3)
    adc0:	18c00104 	addi	r3,r3,4
    adc4:	90023816 	blt	r18,zero,b6a8 <___vfiprintf_internal_r+0x11bc>
    adc8:	d8c02215 	stw	r3,136(sp)
    adcc:	8005883a 	mov	r2,r16
    add0:	80c00007 	ldb	r3,0(r16)
    add4:	003e2306 	br	a664 <__alt_mem_Flash_flash_data+0xf400a664>
    add8:	8005883a 	mov	r2,r16
    addc:	01c00ac4 	movi	r7,43
    ade0:	80c00007 	ldb	r3,0(r16)
    ade4:	003e1f06 	br	a664 <__alt_mem_Flash_flash_data+0xf400a664>
    ade8:	d8c02217 	ldw	r3,136(sp)
    adec:	04400044 	movi	r17,1
    adf0:	d8001d85 	stb	zero,118(sp)
    adf4:	18800017 	ldw	r2,0(r3)
    adf8:	18c00104 	addi	r3,r3,4
    adfc:	d8c02215 	stw	r3,136(sp)
    ae00:	d8801005 	stb	r2,64(sp)
    ae04:	8827883a 	mov	r19,r17
    ae08:	dd001004 	addi	r20,sp,64
    ae0c:	0013883a 	mov	r9,zero
    ae10:	003eb806 	br	a8f4 <__alt_mem_Flash_flash_data+0xf400a8f4>
    ae14:	d9c01d85 	stb	r7,118(sp)
    ae18:	a880080c 	andi	r2,r21,32
    ae1c:	d8c02217 	ldw	r3,136(sp)
    ae20:	103fa61e 	bne	r2,zero,acbc <__alt_mem_Flash_flash_data+0xf400acbc>
    ae24:	a880040c 	andi	r2,r21,16
    ae28:	1001dd26 	beq	r2,zero,b5a0 <___vfiprintf_internal_r+0x10b4>
    ae2c:	1d800017 	ldw	r22,0(r3)
    ae30:	d8802217 	ldw	r2,136(sp)
    ae34:	b01bd7fa 	srai	r13,r22,31
    ae38:	10800104 	addi	r2,r2,4
    ae3c:	d8802215 	stw	r2,136(sp)
    ae40:	6805883a 	mov	r2,r13
    ae44:	003fa306 	br	acd4 <__alt_mem_Flash_flash_data+0xf400acd4>
    ae48:	008000b4 	movhi	r2,2
    ae4c:	10b21904 	addi	r2,r2,-14236
    ae50:	d8802615 	stw	r2,152(sp)
    ae54:	d9c01d85 	stb	r7,118(sp)
    ae58:	a880080c 	andi	r2,r21,32
    ae5c:	10004726 	beq	r2,zero,af7c <___vfiprintf_internal_r+0xa90>
    ae60:	d9002217 	ldw	r4,136(sp)
    ae64:	25800017 	ldw	r22,0(r4)
    ae68:	23400117 	ldw	r13,4(r4)
    ae6c:	21000204 	addi	r4,r4,8
    ae70:	d9002215 	stw	r4,136(sp)
    ae74:	a880004c 	andi	r2,r21,1
    ae78:	10014e26 	beq	r2,zero,b3b4 <___vfiprintf_internal_r+0xec8>
    ae7c:	b348b03a 	or	r4,r22,r13
    ae80:	20019c26 	beq	r4,zero,b4f4 <___vfiprintf_internal_r+0x1008>
    ae84:	00800c04 	movi	r2,48
    ae88:	d8801d05 	stb	r2,116(sp)
    ae8c:	d8c01d45 	stb	r3,117(sp)
    ae90:	ad400094 	ori	r21,r21,2
    ae94:	00800084 	movi	r2,2
    ae98:	003e7206 	br	a864 <__alt_mem_Flash_flash_data+0xf400a864>
    ae9c:	d8c02217 	ldw	r3,136(sp)
    aea0:	d8001d85 	stb	zero,118(sp)
    aea4:	1d000017 	ldw	r20,0(r3)
    aea8:	1d800104 	addi	r22,r3,4
    aeac:	a0021c26 	beq	r20,zero,b720 <___vfiprintf_internal_r+0x1234>
    aeb0:	a009883a 	mov	r4,r20
    aeb4:	48020016 	blt	r9,zero,b6b8 <___vfiprintf_internal_r+0x11cc>
    aeb8:	480d883a 	mov	r6,r9
    aebc:	000b883a 	mov	r5,zero
    aec0:	da002a15 	stw	r8,168(sp)
    aec4:	da402b15 	stw	r9,172(sp)
    aec8:	00087880 	call	8788 <memchr>
    aecc:	da002a17 	ldw	r8,168(sp)
    aed0:	da402b17 	ldw	r9,172(sp)
    aed4:	10022226 	beq	r2,zero,b760 <___vfiprintf_internal_r+0x1274>
    aed8:	1527c83a 	sub	r19,r2,r20
    aedc:	4cc1c916 	blt	r9,r19,b604 <___vfiprintf_internal_r+0x1118>
    aee0:	db801d83 	ldbu	r14,118(sp)
    aee4:	dd802215 	stw	r22,136(sp)
    aee8:	0013883a 	mov	r9,zero
    aeec:	003e7906 	br	a8d4 <__alt_mem_Flash_flash_data+0xf400a8d4>
    aef0:	ad401014 	ori	r21,r21,64
    aef4:	8005883a 	mov	r2,r16
    aef8:	80c00007 	ldb	r3,0(r16)
    aefc:	003dd906 	br	a664 <__alt_mem_Flash_flash_data+0xf400a664>
    af00:	80c00007 	ldb	r3,0(r16)
    af04:	8005883a 	mov	r2,r16
    af08:	1b01e326 	beq	r3,r12,b698 <___vfiprintf_internal_r+0x11ac>
    af0c:	ad400414 	ori	r21,r21,16
    af10:	003dd406 	br	a664 <__alt_mem_Flash_flash_data+0xf400a664>
    af14:	d9002217 	ldw	r4,136(sp)
    af18:	00800c04 	movi	r2,48
    af1c:	d8801d05 	stb	r2,116(sp)
    af20:	25800017 	ldw	r22,0(r4)
    af24:	00801e04 	movi	r2,120
    af28:	d8801d45 	stb	r2,117(sp)
    af2c:	008000b4 	movhi	r2,2
    af30:	21000104 	addi	r4,r4,4
    af34:	10b21e04 	addi	r2,r2,-14216
    af38:	d9002215 	stw	r4,136(sp)
    af3c:	d8802615 	stw	r2,152(sp)
    af40:	001b883a 	mov	r13,zero
    af44:	ad400094 	ori	r21,r21,2
    af48:	00800084 	movi	r2,2
    af4c:	b009883a 	mov	r4,r22
    af50:	003e4406 	br	a864 <__alt_mem_Flash_flash_data+0xf400a864>
    af54:	ad400814 	ori	r21,r21,32
    af58:	8005883a 	mov	r2,r16
    af5c:	80c00007 	ldb	r3,0(r16)
    af60:	003dc006 	br	a664 <__alt_mem_Flash_flash_data+0xf400a664>
    af64:	008000b4 	movhi	r2,2
    af68:	10b21e04 	addi	r2,r2,-14216
    af6c:	d8802615 	stw	r2,152(sp)
    af70:	d9c01d85 	stb	r7,118(sp)
    af74:	a880080c 	andi	r2,r21,32
    af78:	103fb91e 	bne	r2,zero,ae60 <__alt_mem_Flash_flash_data+0xf400ae60>
    af7c:	a880040c 	andi	r2,r21,16
    af80:	10010f1e 	bne	r2,zero,b3c0 <___vfiprintf_internal_r+0xed4>
    af84:	a880100c 	andi	r2,r21,64
    af88:	10010d26 	beq	r2,zero,b3c0 <___vfiprintf_internal_r+0xed4>
    af8c:	d9002217 	ldw	r4,136(sp)
    af90:	001b883a 	mov	r13,zero
    af94:	2580000b 	ldhu	r22,0(r4)
    af98:	21000104 	addi	r4,r4,4
    af9c:	d9002215 	stw	r4,136(sp)
    afa0:	003fb406 	br	ae74 <__alt_mem_Flash_flash_data+0xf400ae74>
    afa4:	d9002217 	ldw	r4,136(sp)
    afa8:	00800044 	movi	r2,1
    afac:	25800017 	ldw	r22,0(r4)
    afb0:	23400117 	ldw	r13,4(r4)
    afb4:	21000204 	addi	r4,r4,8
    afb8:	d9002215 	stw	r4,136(sp)
    afbc:	b348b03a 	or	r4,r22,r13
    afc0:	003e2806 	br	a864 <__alt_mem_Flash_flash_data+0xf400a864>
    afc4:	d9c01d85 	stb	r7,118(sp)
    afc8:	1801ab26 	beq	r3,zero,b678 <___vfiprintf_internal_r+0x118c>
    afcc:	04400044 	movi	r17,1
    afd0:	d8c01005 	stb	r3,64(sp)
    afd4:	d8001d85 	stb	zero,118(sp)
    afd8:	8827883a 	mov	r19,r17
    afdc:	dd001004 	addi	r20,sp,64
    afe0:	003f8a06 	br	ae0c <__alt_mem_Flash_flash_data+0xf400ae0c>
    afe4:	d9002017 	ldw	r4,128(sp)
    afe8:	d9402117 	ldw	r5,132(sp)
    afec:	d9801a04 	addi	r6,sp,104
    aff0:	d9c02b15 	stw	r7,172(sp)
    aff4:	dbc02a15 	stw	r15,168(sp)
    aff8:	000a3d80 	call	a3d8 <__sprint_r.part.0>
    affc:	d9c02b17 	ldw	r7,172(sp)
    b000:	dbc02a17 	ldw	r15,168(sp)
    b004:	1000631e 	bne	r2,zero,b194 <___vfiprintf_internal_r+0xca8>
    b008:	d9801b17 	ldw	r6,108(sp)
    b00c:	d8801c17 	ldw	r2,112(sp)
    b010:	d811883a 	mov	r8,sp
    b014:	31400044 	addi	r5,r6,1
    b018:	003e4d06 	br	a950 <__alt_mem_Flash_flash_data+0xf400a950>
    b01c:	d9401b17 	ldw	r5,108(sp)
    b020:	d8801c17 	ldw	r2,112(sp)
    b024:	29000044 	addi	r4,r5,1
    b028:	d8c01d87 	ldb	r3,118(sp)
    b02c:	183e6726 	beq	r3,zero,a9cc <__alt_mem_Flash_flash_data+0xf400a9cc>
    b030:	00c00044 	movi	r3,1
    b034:	d9401d84 	addi	r5,sp,118
    b038:	10c5883a 	add	r2,r2,r3
    b03c:	41400015 	stw	r5,0(r8)
    b040:	40c00115 	stw	r3,4(r8)
    b044:	d8801c15 	stw	r2,112(sp)
    b048:	d9001b15 	stw	r4,108(sp)
    b04c:	014001c4 	movi	r5,7
    b050:	2900ab16 	blt	r5,r4,b300 <___vfiprintf_internal_r+0xe14>
    b054:	200b883a 	mov	r5,r4
    b058:	42000204 	addi	r8,r8,8
    b05c:	21000044 	addi	r4,r4,1
    b060:	003e5a06 	br	a9cc <__alt_mem_Flash_flash_data+0xf400a9cc>
    b064:	d9002017 	ldw	r4,128(sp)
    b068:	d9402117 	ldw	r5,132(sp)
    b06c:	d9801a04 	addi	r6,sp,104
    b070:	d9c02b15 	stw	r7,172(sp)
    b074:	db402a15 	stw	r13,168(sp)
    b078:	000a3d80 	call	a3d8 <__sprint_r.part.0>
    b07c:	d9c02b17 	ldw	r7,172(sp)
    b080:	db402a17 	ldw	r13,168(sp)
    b084:	1000431e 	bne	r2,zero,b194 <___vfiprintf_internal_r+0xca8>
    b088:	d9401b17 	ldw	r5,108(sp)
    b08c:	d8801c17 	ldw	r2,112(sp)
    b090:	d811883a 	mov	r8,sp
    b094:	29000044 	addi	r4,r5,1
    b098:	003e6706 	br	aa38 <__alt_mem_Flash_flash_data+0xf400aa38>
    b09c:	10803fcc 	andi	r2,r2,255
    b0a0:	00c00044 	movi	r3,1
    b0a4:	10fdfa1e 	bne	r2,r3,a890 <__alt_mem_Flash_flash_data+0xf400a890>
    b0a8:	6800021e 	bne	r13,zero,b0b4 <___vfiprintf_internal_r+0xbc8>
    b0ac:	00800244 	movi	r2,9
    b0b0:	1580222e 	bgeu	r2,r22,b13c <___vfiprintf_internal_r+0xc50>
    b0b4:	dc802415 	stw	r18,144(sp)
    b0b8:	dc002515 	stw	r16,148(sp)
    b0bc:	dc401a04 	addi	r17,sp,104
    b0c0:	b021883a 	mov	r16,r22
    b0c4:	4827883a 	mov	r19,r9
    b0c8:	4029883a 	mov	r20,r8
    b0cc:	702d883a 	mov	r22,r14
    b0d0:	6825883a 	mov	r18,r13
    b0d4:	8009883a 	mov	r4,r16
    b0d8:	900b883a 	mov	r5,r18
    b0dc:	01800284 	movi	r6,10
    b0e0:	000f883a 	mov	r7,zero
    b0e4:	000c7540 	call	c754 <__umoddi3>
    b0e8:	10800c04 	addi	r2,r2,48
    b0ec:	8c7fffc4 	addi	r17,r17,-1
    b0f0:	8009883a 	mov	r4,r16
    b0f4:	900b883a 	mov	r5,r18
    b0f8:	01800284 	movi	r6,10
    b0fc:	000f883a 	mov	r7,zero
    b100:	88800005 	stb	r2,0(r17)
    b104:	000c1940 	call	c194 <__udivdi3>
    b108:	1021883a 	mov	r16,r2
    b10c:	10c4b03a 	or	r2,r2,r3
    b110:	1825883a 	mov	r18,r3
    b114:	103fef1e 	bne	r2,zero,b0d4 <__alt_mem_Flash_flash_data+0xf400b0d4>
    b118:	dc802417 	ldw	r18,144(sp)
    b11c:	dc002517 	ldw	r16,148(sp)
    b120:	a011883a 	mov	r8,r20
    b124:	9813883a 	mov	r9,r19
    b128:	b01d883a 	mov	r14,r22
    b12c:	8829883a 	mov	r20,r17
    b130:	d8c01e17 	ldw	r3,120(sp)
    b134:	1d27c83a 	sub	r19,r3,r20
    b138:	003de606 	br	a8d4 <__alt_mem_Flash_flash_data+0xf400a8d4>
    b13c:	b5800c04 	addi	r22,r22,48
    b140:	dd8019c5 	stb	r22,103(sp)
    b144:	dcc02717 	ldw	r19,156(sp)
    b148:	dd0019c4 	addi	r20,sp,103
    b14c:	003de106 	br	a8d4 <__alt_mem_Flash_flash_data+0xf400a8d4>
    b150:	d9002017 	ldw	r4,128(sp)
    b154:	d9402117 	ldw	r5,132(sp)
    b158:	d9801a04 	addi	r6,sp,104
    b15c:	000a3d80 	call	a3d8 <__sprint_r.part.0>
    b160:	10000c1e 	bne	r2,zero,b194 <___vfiprintf_internal_r+0xca8>
    b164:	d8801c17 	ldw	r2,112(sp)
    b168:	8c80010e 	bge	r17,r18,b170 <___vfiprintf_internal_r+0xc84>
    b16c:	9023883a 	mov	r17,r18
    b170:	d8c02317 	ldw	r3,140(sp)
    b174:	1c47883a 	add	r3,r3,r17
    b178:	d8c02315 	stw	r3,140(sp)
    b17c:	103e7e26 	beq	r2,zero,ab78 <__alt_mem_Flash_flash_data+0xf400ab78>
    b180:	d9002017 	ldw	r4,128(sp)
    b184:	d9402117 	ldw	r5,132(sp)
    b188:	d9801a04 	addi	r6,sp,104
    b18c:	000a3d80 	call	a3d8 <__sprint_r.part.0>
    b190:	103e7926 	beq	r2,zero,ab78 <__alt_mem_Flash_flash_data+0xf400ab78>
    b194:	dd402117 	ldw	r21,132(sp)
    b198:	a880030b 	ldhu	r2,12(r21)
    b19c:	1080100c 	andi	r2,r2,64
    b1a0:	103e881e 	bne	r2,zero,abc4 <__alt_mem_Flash_flash_data+0xf400abc4>
    b1a4:	d8802317 	ldw	r2,140(sp)
    b1a8:	003e8706 	br	abc8 <__alt_mem_Flash_flash_data+0xf400abc8>
    b1ac:	d9402117 	ldw	r5,132(sp)
    b1b0:	b009883a 	mov	r4,r22
    b1b4:	d9801a04 	addi	r6,sp,104
    b1b8:	000a3d80 	call	a3d8 <__sprint_r.part.0>
    b1bc:	103ff51e 	bne	r2,zero,b194 <__alt_mem_Flash_flash_data+0xf400b194>
    b1c0:	d9001b17 	ldw	r4,108(sp)
    b1c4:	d8801c17 	ldw	r2,112(sp)
    b1c8:	d811883a 	mov	r8,sp
    b1cc:	21400044 	addi	r5,r4,1
    b1d0:	003e4d06 	br	ab08 <__alt_mem_Flash_flash_data+0xf400ab08>
    b1d4:	1000aa1e 	bne	r2,zero,b480 <___vfiprintf_internal_r+0xf94>
    b1d8:	00c00044 	movi	r3,1
    b1dc:	9805883a 	mov	r2,r19
    b1e0:	dd000015 	stw	r20,0(sp)
    b1e4:	dcc00115 	stw	r19,4(sp)
    b1e8:	dcc01c15 	stw	r19,112(sp)
    b1ec:	d8c01b15 	stw	r3,108(sp)
    b1f0:	d811883a 	mov	r8,sp
    b1f4:	42000204 	addi	r8,r8,8
    b1f8:	aac0010c 	andi	r11,r21,4
    b1fc:	583fda26 	beq	r11,zero,b168 <__alt_mem_Flash_flash_data+0xf400b168>
    b200:	9467c83a 	sub	r19,r18,r17
    b204:	04fe3316 	blt	zero,r19,aad4 <__alt_mem_Flash_flash_data+0xf400aad4>
    b208:	003fd706 	br	b168 <__alt_mem_Flash_flash_data+0xf400b168>
    b20c:	946dc83a 	sub	r22,r18,r17
    b210:	05bdfd0e 	bge	zero,r22,aa08 <__alt_mem_Flash_flash_data+0xf400aa08>
    b214:	00c000b4 	movhi	r3,2
    b218:	18f27f04 	addi	r3,r3,-13828
    b21c:	01c00404 	movi	r7,16
    b220:	d8c02415 	stw	r3,144(sp)
    b224:	3d81530e 	bge	r7,r22,b774 <___vfiprintf_internal_r+0x1288>
    b228:	8007883a 	mov	r3,r16
    b22c:	034001c4 	movi	r13,7
    b230:	b021883a 	mov	r16,r22
    b234:	da402515 	stw	r9,148(sp)
    b238:	182d883a 	mov	r22,r3
    b23c:	00000506 	br	b254 <___vfiprintf_internal_r+0xd68>
    b240:	29800084 	addi	r6,r5,2
    b244:	42000204 	addi	r8,r8,8
    b248:	180b883a 	mov	r5,r3
    b24c:	843ffc04 	addi	r16,r16,-16
    b250:	3c000d0e 	bge	r7,r16,b288 <___vfiprintf_internal_r+0xd9c>
    b254:	10800404 	addi	r2,r2,16
    b258:	28c00044 	addi	r3,r5,1
    b25c:	45c00015 	stw	r23,0(r8)
    b260:	41c00115 	stw	r7,4(r8)
    b264:	d8801c15 	stw	r2,112(sp)
    b268:	d8c01b15 	stw	r3,108(sp)
    b26c:	68fff40e 	bge	r13,r3,b240 <__alt_mem_Flash_flash_data+0xf400b240>
    b270:	1000151e 	bne	r2,zero,b2c8 <___vfiprintf_internal_r+0xddc>
    b274:	843ffc04 	addi	r16,r16,-16
    b278:	01800044 	movi	r6,1
    b27c:	000b883a 	mov	r5,zero
    b280:	d811883a 	mov	r8,sp
    b284:	3c3ff316 	blt	r7,r16,b254 <__alt_mem_Flash_flash_data+0xf400b254>
    b288:	da402517 	ldw	r9,148(sp)
    b28c:	b007883a 	mov	r3,r22
    b290:	802d883a 	mov	r22,r16
    b294:	1821883a 	mov	r16,r3
    b298:	d8c02417 	ldw	r3,144(sp)
    b29c:	1585883a 	add	r2,r2,r22
    b2a0:	45800115 	stw	r22,4(r8)
    b2a4:	40c00015 	stw	r3,0(r8)
    b2a8:	d8801c15 	stw	r2,112(sp)
    b2ac:	d9801b15 	stw	r6,108(sp)
    b2b0:	00c001c4 	movi	r3,7
    b2b4:	19806d16 	blt	r3,r6,b46c <___vfiprintf_internal_r+0xf80>
    b2b8:	42000204 	addi	r8,r8,8
    b2bc:	31000044 	addi	r4,r6,1
    b2c0:	300b883a 	mov	r5,r6
    b2c4:	003dd006 	br	aa08 <__alt_mem_Flash_flash_data+0xf400aa08>
    b2c8:	d9002017 	ldw	r4,128(sp)
    b2cc:	d9402117 	ldw	r5,132(sp)
    b2d0:	d9801a04 	addi	r6,sp,104
    b2d4:	d9c02b15 	stw	r7,172(sp)
    b2d8:	db402a15 	stw	r13,168(sp)
    b2dc:	000a3d80 	call	a3d8 <__sprint_r.part.0>
    b2e0:	d9c02b17 	ldw	r7,172(sp)
    b2e4:	db402a17 	ldw	r13,168(sp)
    b2e8:	103faa1e 	bne	r2,zero,b194 <__alt_mem_Flash_flash_data+0xf400b194>
    b2ec:	d9401b17 	ldw	r5,108(sp)
    b2f0:	d8801c17 	ldw	r2,112(sp)
    b2f4:	d811883a 	mov	r8,sp
    b2f8:	29800044 	addi	r6,r5,1
    b2fc:	003fd306 	br	b24c <__alt_mem_Flash_flash_data+0xf400b24c>
    b300:	1000401e 	bne	r2,zero,b404 <___vfiprintf_internal_r+0xf18>
    b304:	68003b26 	beq	r13,zero,b3f4 <___vfiprintf_internal_r+0xf08>
    b308:	d9001d04 	addi	r4,sp,116
    b30c:	00800084 	movi	r2,2
    b310:	d9000015 	stw	r4,0(sp)
    b314:	d8800115 	stw	r2,4(sp)
    b318:	1809883a 	mov	r4,r3
    b31c:	d811883a 	mov	r8,sp
    b320:	003db406 	br	a9f4 <__alt_mem_Flash_flash_data+0xf400a9f4>
    b324:	1000451e 	bne	r2,zero,b43c <___vfiprintf_internal_r+0xf50>
    b328:	01000044 	movi	r4,1
    b32c:	000b883a 	mov	r5,zero
    b330:	d811883a 	mov	r8,sp
    b334:	003db206 	br	aa00 <__alt_mem_Flash_flash_data+0xf400aa00>
    b338:	10803fcc 	andi	r2,r2,255
    b33c:	1000071e 	bne	r2,zero,b35c <___vfiprintf_internal_r+0xe70>
    b340:	a880004c 	andi	r2,r21,1
    b344:	10000526 	beq	r2,zero,b35c <___vfiprintf_internal_r+0xe70>
    b348:	00800c04 	movi	r2,48
    b34c:	d88019c5 	stb	r2,103(sp)
    b350:	dcc02717 	ldw	r19,156(sp)
    b354:	dd0019c4 	addi	r20,sp,103
    b358:	003d5e06 	br	a8d4 <__alt_mem_Flash_flash_data+0xf400a8d4>
    b35c:	dd001a04 	addi	r20,sp,104
    b360:	003d5c06 	br	a8d4 <__alt_mem_Flash_flash_data+0xf400a8d4>
    b364:	1000971e 	bne	r2,zero,b5c4 <___vfiprintf_internal_r+0x10d8>
    b368:	d8c01d87 	ldb	r3,118(sp)
    b36c:	18005826 	beq	r3,zero,b4d0 <___vfiprintf_internal_r+0xfe4>
    b370:	00800044 	movi	r2,1
    b374:	d8c01d84 	addi	r3,sp,118
    b378:	1009883a 	mov	r4,r2
    b37c:	d8c00015 	stw	r3,0(sp)
    b380:	d8800115 	stw	r2,4(sp)
    b384:	d811883a 	mov	r8,sp
    b388:	003f3206 	br	b054 <__alt_mem_Flash_flash_data+0xf400b054>
    b38c:	8023883a 	mov	r17,r16
    b390:	003ca706 	br	a630 <__alt_mem_Flash_flash_data+0xf400a630>
    b394:	d9002017 	ldw	r4,128(sp)
    b398:	d9402117 	ldw	r5,132(sp)
    b39c:	d9801a04 	addi	r6,sp,104
    b3a0:	000a3d80 	call	a3d8 <__sprint_r.part.0>
    b3a4:	103f7b1e 	bne	r2,zero,b194 <__alt_mem_Flash_flash_data+0xf400b194>
    b3a8:	d8801c17 	ldw	r2,112(sp)
    b3ac:	d811883a 	mov	r8,sp
    b3b0:	003f9106 	br	b1f8 <__alt_mem_Flash_flash_data+0xf400b1f8>
    b3b4:	00800084 	movi	r2,2
    b3b8:	b348b03a 	or	r4,r22,r13
    b3bc:	003d2906 	br	a864 <__alt_mem_Flash_flash_data+0xf400a864>
    b3c0:	d8802217 	ldw	r2,136(sp)
    b3c4:	001b883a 	mov	r13,zero
    b3c8:	15800017 	ldw	r22,0(r2)
    b3cc:	10800104 	addi	r2,r2,4
    b3d0:	d8802215 	stw	r2,136(sp)
    b3d4:	003ea706 	br	ae74 <__alt_mem_Flash_flash_data+0xf400ae74>
    b3d8:	d9002017 	ldw	r4,128(sp)
    b3dc:	d9402117 	ldw	r5,132(sp)
    b3e0:	d9801a04 	addi	r6,sp,104
    b3e4:	000a3d80 	call	a3d8 <__sprint_r.part.0>
    b3e8:	103f6a1e 	bne	r2,zero,b194 <__alt_mem_Flash_flash_data+0xf400b194>
    b3ec:	d811883a 	mov	r8,sp
    b3f0:	003cff06 	br	a7f0 <__alt_mem_Flash_flash_data+0xf400a7f0>
    b3f4:	000b883a 	mov	r5,zero
    b3f8:	1809883a 	mov	r4,r3
    b3fc:	d811883a 	mov	r8,sp
    b400:	003d7f06 	br	aa00 <__alt_mem_Flash_flash_data+0xf400aa00>
    b404:	d9002017 	ldw	r4,128(sp)
    b408:	d9402117 	ldw	r5,132(sp)
    b40c:	d9801a04 	addi	r6,sp,104
    b410:	da402b15 	stw	r9,172(sp)
    b414:	db402a15 	stw	r13,168(sp)
    b418:	000a3d80 	call	a3d8 <__sprint_r.part.0>
    b41c:	da402b17 	ldw	r9,172(sp)
    b420:	db402a17 	ldw	r13,168(sp)
    b424:	103f5b1e 	bne	r2,zero,b194 <__alt_mem_Flash_flash_data+0xf400b194>
    b428:	d9401b17 	ldw	r5,108(sp)
    b42c:	d8801c17 	ldw	r2,112(sp)
    b430:	d811883a 	mov	r8,sp
    b434:	29000044 	addi	r4,r5,1
    b438:	003d6406 	br	a9cc <__alt_mem_Flash_flash_data+0xf400a9cc>
    b43c:	d9002017 	ldw	r4,128(sp)
    b440:	d9402117 	ldw	r5,132(sp)
    b444:	d9801a04 	addi	r6,sp,104
    b448:	da402b15 	stw	r9,172(sp)
    b44c:	000a3d80 	call	a3d8 <__sprint_r.part.0>
    b450:	da402b17 	ldw	r9,172(sp)
    b454:	103f4f1e 	bne	r2,zero,b194 <__alt_mem_Flash_flash_data+0xf400b194>
    b458:	d9401b17 	ldw	r5,108(sp)
    b45c:	d8801c17 	ldw	r2,112(sp)
    b460:	d811883a 	mov	r8,sp
    b464:	29000044 	addi	r4,r5,1
    b468:	003d6506 	br	aa00 <__alt_mem_Flash_flash_data+0xf400aa00>
    b46c:	10009a1e 	bne	r2,zero,b6d8 <___vfiprintf_internal_r+0x11ec>
    b470:	01000044 	movi	r4,1
    b474:	000b883a 	mov	r5,zero
    b478:	d811883a 	mov	r8,sp
    b47c:	003d6206 	br	aa08 <__alt_mem_Flash_flash_data+0xf400aa08>
    b480:	d9002017 	ldw	r4,128(sp)
    b484:	d9402117 	ldw	r5,132(sp)
    b488:	d9801a04 	addi	r6,sp,104
    b48c:	000a3d80 	call	a3d8 <__sprint_r.part.0>
    b490:	103f401e 	bne	r2,zero,b194 <__alt_mem_Flash_flash_data+0xf400b194>
    b494:	d9001b17 	ldw	r4,108(sp)
    b498:	d8801c17 	ldw	r2,112(sp)
    b49c:	d811883a 	mov	r8,sp
    b4a0:	21000044 	addi	r4,r4,1
    b4a4:	003d7d06 	br	aa9c <__alt_mem_Flash_flash_data+0xf400aa9c>
    b4a8:	05adc83a 	sub	r22,zero,r22
    b4ac:	b004c03a 	cmpne	r2,r22,zero
    b4b0:	035bc83a 	sub	r13,zero,r13
    b4b4:	689bc83a 	sub	r13,r13,r2
    b4b8:	03800b44 	movi	r14,45
    b4bc:	db801d85 	stb	r14,118(sp)
    b4c0:	4827883a 	mov	r19,r9
    b4c4:	00800044 	movi	r2,1
    b4c8:	b348b03a 	or	r4,r22,r13
    b4cc:	003ce806 	br	a870 <__alt_mem_Flash_flash_data+0xf400a870>
    b4d0:	000b883a 	mov	r5,zero
    b4d4:	01000044 	movi	r4,1
    b4d8:	d811883a 	mov	r8,sp
    b4dc:	683d4826 	beq	r13,zero,aa00 <__alt_mem_Flash_flash_data+0xf400aa00>
    b4e0:	00800084 	movi	r2,2
    b4e4:	d8c01d04 	addi	r3,sp,116
    b4e8:	d8c00015 	stw	r3,0(sp)
    b4ec:	d8800115 	stw	r2,4(sp)
    b4f0:	003d4006 	br	a9f4 <__alt_mem_Flash_flash_data+0xf400a9f4>
    b4f4:	00800084 	movi	r2,2
    b4f8:	003cda06 	br	a864 <__alt_mem_Flash_flash_data+0xf400a864>
    b4fc:	a880100c 	andi	r2,r21,64
    b500:	10004226 	beq	r2,zero,b60c <___vfiprintf_internal_r+0x1120>
    b504:	d8802217 	ldw	r2,136(sp)
    b508:	001b883a 	mov	r13,zero
    b50c:	1580000b 	ldhu	r22,0(r2)
    b510:	10800104 	addi	r2,r2,4
    b514:	d8802215 	stw	r2,136(sp)
    b518:	b009883a 	mov	r4,r22
    b51c:	0005883a 	mov	r2,zero
    b520:	003cd006 	br	a864 <__alt_mem_Flash_flash_data+0xf400a864>
    b524:	80c00007 	ldb	r3,0(r16)
    b528:	8005883a 	mov	r2,r16
    b52c:	003c4d06 	br	a664 <__alt_mem_Flash_flash_data+0xf400a664>
    b530:	a880100c 	andi	r2,r21,64
    b534:	10004426 	beq	r2,zero,b648 <___vfiprintf_internal_r+0x115c>
    b538:	d8c02217 	ldw	r3,136(sp)
    b53c:	001b883a 	mov	r13,zero
    b540:	00800044 	movi	r2,1
    b544:	1d80000b 	ldhu	r22,0(r3)
    b548:	18c00104 	addi	r3,r3,4
    b54c:	d8c02215 	stw	r3,136(sp)
    b550:	b009883a 	mov	r4,r22
    b554:	003cc306 	br	a864 <__alt_mem_Flash_flash_data+0xf400a864>
    b558:	a880040c 	andi	r2,r21,16
    b55c:	1000091e 	bne	r2,zero,b584 <___vfiprintf_internal_r+0x1098>
    b560:	aac0100c 	andi	r11,r21,64
    b564:	58000726 	beq	r11,zero,b584 <___vfiprintf_internal_r+0x1098>
    b568:	d8c02217 	ldw	r3,136(sp)
    b56c:	d9002317 	ldw	r4,140(sp)
    b570:	18800017 	ldw	r2,0(r3)
    b574:	18c00104 	addi	r3,r3,4
    b578:	d8c02215 	stw	r3,136(sp)
    b57c:	1100000d 	sth	r4,0(r2)
    b580:	003c0e06 	br	a5bc <__alt_mem_Flash_flash_data+0xf400a5bc>
    b584:	d8c02217 	ldw	r3,136(sp)
    b588:	d9002317 	ldw	r4,140(sp)
    b58c:	18800017 	ldw	r2,0(r3)
    b590:	18c00104 	addi	r3,r3,4
    b594:	d8c02215 	stw	r3,136(sp)
    b598:	11000015 	stw	r4,0(r2)
    b59c:	003c0706 	br	a5bc <__alt_mem_Flash_flash_data+0xf400a5bc>
    b5a0:	a880100c 	andi	r2,r21,64
    b5a4:	10002126 	beq	r2,zero,b62c <___vfiprintf_internal_r+0x1140>
    b5a8:	1d80000f 	ldh	r22,0(r3)
    b5ac:	d8c02217 	ldw	r3,136(sp)
    b5b0:	b01bd7fa 	srai	r13,r22,31
    b5b4:	18c00104 	addi	r3,r3,4
    b5b8:	d8c02215 	stw	r3,136(sp)
    b5bc:	6805883a 	mov	r2,r13
    b5c0:	003dc406 	br	acd4 <__alt_mem_Flash_flash_data+0xf400acd4>
    b5c4:	d9002017 	ldw	r4,128(sp)
    b5c8:	d9402117 	ldw	r5,132(sp)
    b5cc:	d9801a04 	addi	r6,sp,104
    b5d0:	da402b15 	stw	r9,172(sp)
    b5d4:	db402a15 	stw	r13,168(sp)
    b5d8:	000a3d80 	call	a3d8 <__sprint_r.part.0>
    b5dc:	da402b17 	ldw	r9,172(sp)
    b5e0:	db402a17 	ldw	r13,168(sp)
    b5e4:	103eeb1e 	bne	r2,zero,b194 <__alt_mem_Flash_flash_data+0xf400b194>
    b5e8:	d9401b17 	ldw	r5,108(sp)
    b5ec:	d8801c17 	ldw	r2,112(sp)
    b5f0:	d811883a 	mov	r8,sp
    b5f4:	29000044 	addi	r4,r5,1
    b5f8:	003e8b06 	br	b028 <__alt_mem_Flash_flash_data+0xf400b028>
    b5fc:	9023883a 	mov	r17,r18
    b600:	003d5a06 	br	ab6c <__alt_mem_Flash_flash_data+0xf400ab6c>
    b604:	4827883a 	mov	r19,r9
    b608:	003e3506 	br	aee0 <__alt_mem_Flash_flash_data+0xf400aee0>
    b60c:	d8c02217 	ldw	r3,136(sp)
    b610:	001b883a 	mov	r13,zero
    b614:	0005883a 	mov	r2,zero
    b618:	1d800017 	ldw	r22,0(r3)
    b61c:	18c00104 	addi	r3,r3,4
    b620:	d8c02215 	stw	r3,136(sp)
    b624:	b009883a 	mov	r4,r22
    b628:	003c8e06 	br	a864 <__alt_mem_Flash_flash_data+0xf400a864>
    b62c:	1d800017 	ldw	r22,0(r3)
    b630:	d9002217 	ldw	r4,136(sp)
    b634:	b01bd7fa 	srai	r13,r22,31
    b638:	21000104 	addi	r4,r4,4
    b63c:	d9002215 	stw	r4,136(sp)
    b640:	6805883a 	mov	r2,r13
    b644:	003da306 	br	acd4 <__alt_mem_Flash_flash_data+0xf400acd4>
    b648:	d9002217 	ldw	r4,136(sp)
    b64c:	001b883a 	mov	r13,zero
    b650:	00800044 	movi	r2,1
    b654:	25800017 	ldw	r22,0(r4)
    b658:	21000104 	addi	r4,r4,4
    b65c:	d9002215 	stw	r4,136(sp)
    b660:	b009883a 	mov	r4,r22
    b664:	003c7f06 	br	a864 <__alt_mem_Flash_flash_data+0xf400a864>
    b668:	00c000b4 	movhi	r3,2
    b66c:	18f27f04 	addi	r3,r3,-13828
    b670:	d8c02415 	stw	r3,144(sp)
    b674:	003cff06 	br	aa74 <__alt_mem_Flash_flash_data+0xf400aa74>
    b678:	d8801c17 	ldw	r2,112(sp)
    b67c:	dd402117 	ldw	r21,132(sp)
    b680:	103ec526 	beq	r2,zero,b198 <__alt_mem_Flash_flash_data+0xf400b198>
    b684:	d9002017 	ldw	r4,128(sp)
    b688:	a80b883a 	mov	r5,r21
    b68c:	d9801a04 	addi	r6,sp,104
    b690:	000a3d80 	call	a3d8 <__sprint_r.part.0>
    b694:	003ec006 	br	b198 <__alt_mem_Flash_flash_data+0xf400b198>
    b698:	80800044 	addi	r2,r16,1
    b69c:	ad400814 	ori	r21,r21,32
    b6a0:	80c00047 	ldb	r3,1(r16)
    b6a4:	003bef06 	br	a664 <__alt_mem_Flash_flash_data+0xf400a664>
    b6a8:	04a5c83a 	sub	r18,zero,r18
    b6ac:	8005883a 	mov	r2,r16
    b6b0:	d8c02215 	stw	r3,136(sp)
    b6b4:	003d5306 	br	ac04 <__alt_mem_Flash_flash_data+0xf400ac04>
    b6b8:	da002a15 	stw	r8,168(sp)
    b6bc:	00031740 	call	3174 <strlen>
    b6c0:	1027883a 	mov	r19,r2
    b6c4:	db801d83 	ldbu	r14,118(sp)
    b6c8:	dd802215 	stw	r22,136(sp)
    b6cc:	0013883a 	mov	r9,zero
    b6d0:	da002a17 	ldw	r8,168(sp)
    b6d4:	003c7f06 	br	a8d4 <__alt_mem_Flash_flash_data+0xf400a8d4>
    b6d8:	d9002017 	ldw	r4,128(sp)
    b6dc:	d9402117 	ldw	r5,132(sp)
    b6e0:	d9801a04 	addi	r6,sp,104
    b6e4:	da402b15 	stw	r9,172(sp)
    b6e8:	000a3d80 	call	a3d8 <__sprint_r.part.0>
    b6ec:	da402b17 	ldw	r9,172(sp)
    b6f0:	103ea81e 	bne	r2,zero,b194 <__alt_mem_Flash_flash_data+0xf400b194>
    b6f4:	d9401b17 	ldw	r5,108(sp)
    b6f8:	d8801c17 	ldw	r2,112(sp)
    b6fc:	d811883a 	mov	r8,sp
    b700:	29000044 	addi	r4,r5,1
    b704:	003cc006 	br	aa08 <__alt_mem_Flash_flash_data+0xf400aa08>
    b708:	d9401b17 	ldw	r5,108(sp)
    b70c:	010000b4 	movhi	r4,2
    b710:	21328304 	addi	r4,r4,-13812
    b714:	d9002415 	stw	r4,144(sp)
    b718:	29400044 	addi	r5,r5,1
    b71c:	003c9f06 	br	a99c <__alt_mem_Flash_flash_data+0xf400a99c>
    b720:	00800184 	movi	r2,6
    b724:	1240012e 	bgeu	r2,r9,b72c <___vfiprintf_internal_r+0x1240>
    b728:	1013883a 	mov	r9,r2
    b72c:	4827883a 	mov	r19,r9
    b730:	4823883a 	mov	r17,r9
    b734:	48001116 	blt	r9,zero,b77c <___vfiprintf_internal_r+0x1290>
    b738:	050000b4 	movhi	r20,2
    b73c:	dd802215 	stw	r22,136(sp)
    b740:	a5322304 	addi	r20,r20,-14196
    b744:	003db106 	br	ae0c <__alt_mem_Flash_flash_data+0xf400ae0c>
    b748:	d9401b17 	ldw	r5,108(sp)
    b74c:	010000b4 	movhi	r4,2
    b750:	21328304 	addi	r4,r4,-13812
    b754:	d9002415 	stw	r4,144(sp)
    b758:	29400044 	addi	r5,r5,1
    b75c:	003cf906 	br	ab44 <__alt_mem_Flash_flash_data+0xf400ab44>
    b760:	4827883a 	mov	r19,r9
    b764:	db801d83 	ldbu	r14,118(sp)
    b768:	dd802215 	stw	r22,136(sp)
    b76c:	0013883a 	mov	r9,zero
    b770:	003c5806 	br	a8d4 <__alt_mem_Flash_flash_data+0xf400a8d4>
    b774:	200d883a 	mov	r6,r4
    b778:	003ec706 	br	b298 <__alt_mem_Flash_flash_data+0xf400b298>
    b77c:	0023883a 	mov	r17,zero
    b780:	003fed06 	br	b738 <__alt_mem_Flash_flash_data+0xf400b738>
    b784:	d9002217 	ldw	r4,136(sp)
    b788:	22400017 	ldw	r9,0(r4)
    b78c:	20c00104 	addi	r3,r4,4
    b790:	d8c02215 	stw	r3,136(sp)
    b794:	483fc20e 	bge	r9,zero,b6a0 <__alt_mem_Flash_flash_data+0xf400b6a0>
    b798:	027fffc4 	movi	r9,-1
    b79c:	80c00047 	ldb	r3,1(r16)
    b7a0:	003bb006 	br	a664 <__alt_mem_Flash_flash_data+0xf400a664>
    b7a4:	8c80010e 	bge	r17,r18,b7ac <___vfiprintf_internal_r+0x12c0>
    b7a8:	9023883a 	mov	r17,r18
    b7ac:	d8802317 	ldw	r2,140(sp)
    b7b0:	1445883a 	add	r2,r2,r17
    b7b4:	d8802315 	stw	r2,140(sp)
    b7b8:	003cef06 	br	ab78 <__alt_mem_Flash_flash_data+0xf400ab78>

0000b7bc <__vfiprintf_internal>:
    b7bc:	2007883a 	mov	r3,r4
    b7c0:	010000b4 	movhi	r4,2
    b7c4:	213b2904 	addi	r4,r4,-4956
    b7c8:	21000017 	ldw	r4,0(r4)
    b7cc:	2805883a 	mov	r2,r5
    b7d0:	300f883a 	mov	r7,r6
    b7d4:	180b883a 	mov	r5,r3
    b7d8:	100d883a 	mov	r6,r2
    b7dc:	000a4ec1 	jmpi	a4ec <___vfiprintf_internal_r>

0000b7e0 <__sbprintf>:
    b7e0:	2880030b 	ldhu	r2,12(r5)
    b7e4:	2ac01917 	ldw	r11,100(r5)
    b7e8:	2a80038b 	ldhu	r10,14(r5)
    b7ec:	2a400717 	ldw	r9,28(r5)
    b7f0:	2a000917 	ldw	r8,36(r5)
    b7f4:	defee204 	addi	sp,sp,-1144
    b7f8:	00c10004 	movi	r3,1024
    b7fc:	dc011a15 	stw	r16,1128(sp)
    b800:	10bfff4c 	andi	r2,r2,65533
    b804:	2821883a 	mov	r16,r5
    b808:	d8cb883a 	add	r5,sp,r3
    b80c:	dc811c15 	stw	r18,1136(sp)
    b810:	dc411b15 	stw	r17,1132(sp)
    b814:	dfc11d15 	stw	ra,1140(sp)
    b818:	2025883a 	mov	r18,r4
    b81c:	d881030d 	sth	r2,1036(sp)
    b820:	dac11915 	stw	r11,1124(sp)
    b824:	da81038d 	sth	r10,1038(sp)
    b828:	da410715 	stw	r9,1052(sp)
    b82c:	da010915 	stw	r8,1060(sp)
    b830:	dec10015 	stw	sp,1024(sp)
    b834:	dec10415 	stw	sp,1040(sp)
    b838:	d8c10215 	stw	r3,1032(sp)
    b83c:	d8c10515 	stw	r3,1044(sp)
    b840:	d8010615 	stw	zero,1048(sp)
    b844:	000a4ec0 	call	a4ec <___vfiprintf_internal_r>
    b848:	1023883a 	mov	r17,r2
    b84c:	10000416 	blt	r2,zero,b860 <__sbprintf+0x80>
    b850:	9009883a 	mov	r4,r18
    b854:	d9410004 	addi	r5,sp,1024
    b858:	0006ec00 	call	6ec0 <_fflush_r>
    b85c:	10000d1e 	bne	r2,zero,b894 <__sbprintf+0xb4>
    b860:	d8c1030b 	ldhu	r3,1036(sp)
    b864:	18c0100c 	andi	r3,r3,64
    b868:	18000326 	beq	r3,zero,b878 <__sbprintf+0x98>
    b86c:	8080030b 	ldhu	r2,12(r16)
    b870:	10801014 	ori	r2,r2,64
    b874:	8080030d 	sth	r2,12(r16)
    b878:	8805883a 	mov	r2,r17
    b87c:	dfc11d17 	ldw	ra,1140(sp)
    b880:	dc811c17 	ldw	r18,1136(sp)
    b884:	dc411b17 	ldw	r17,1132(sp)
    b888:	dc011a17 	ldw	r16,1128(sp)
    b88c:	dec11e04 	addi	sp,sp,1144
    b890:	f800283a 	ret
    b894:	047fffc4 	movi	r17,-1
    b898:	003ff106 	br	b860 <__alt_mem_Flash_flash_data+0xf400b860>

0000b89c <_write_r>:
    b89c:	defffd04 	addi	sp,sp,-12
    b8a0:	dc000015 	stw	r16,0(sp)
    b8a4:	040000b4 	movhi	r16,2
    b8a8:	dc400115 	stw	r17,4(sp)
    b8ac:	84034d04 	addi	r16,r16,3380
    b8b0:	2023883a 	mov	r17,r4
    b8b4:	2809883a 	mov	r4,r5
    b8b8:	300b883a 	mov	r5,r6
    b8bc:	380d883a 	mov	r6,r7
    b8c0:	dfc00215 	stw	ra,8(sp)
    b8c4:	80000015 	stw	zero,0(r16)
    b8c8:	000fcd80 	call	fcd8 <write>
    b8cc:	00ffffc4 	movi	r3,-1
    b8d0:	10c00526 	beq	r2,r3,b8e8 <_write_r+0x4c>
    b8d4:	dfc00217 	ldw	ra,8(sp)
    b8d8:	dc400117 	ldw	r17,4(sp)
    b8dc:	dc000017 	ldw	r16,0(sp)
    b8e0:	dec00304 	addi	sp,sp,12
    b8e4:	f800283a 	ret
    b8e8:	80c00017 	ldw	r3,0(r16)
    b8ec:	183ff926 	beq	r3,zero,b8d4 <__alt_mem_Flash_flash_data+0xf400b8d4>
    b8f0:	88c00015 	stw	r3,0(r17)
    b8f4:	003ff706 	br	b8d4 <__alt_mem_Flash_flash_data+0xf400b8d4>

0000b8f8 <_close_r>:
    b8f8:	defffd04 	addi	sp,sp,-12
    b8fc:	dc000015 	stw	r16,0(sp)
    b900:	040000b4 	movhi	r16,2
    b904:	dc400115 	stw	r17,4(sp)
    b908:	84034d04 	addi	r16,r16,3380
    b90c:	2023883a 	mov	r17,r4
    b910:	2809883a 	mov	r4,r5
    b914:	dfc00215 	stw	ra,8(sp)
    b918:	80000015 	stw	zero,0(r16)
    b91c:	000f4600 	call	f460 <close>
    b920:	00ffffc4 	movi	r3,-1
    b924:	10c00526 	beq	r2,r3,b93c <_close_r+0x44>
    b928:	dfc00217 	ldw	ra,8(sp)
    b92c:	dc400117 	ldw	r17,4(sp)
    b930:	dc000017 	ldw	r16,0(sp)
    b934:	dec00304 	addi	sp,sp,12
    b938:	f800283a 	ret
    b93c:	80c00017 	ldw	r3,0(r16)
    b940:	183ff926 	beq	r3,zero,b928 <__alt_mem_Flash_flash_data+0xf400b928>
    b944:	88c00015 	stw	r3,0(r17)
    b948:	003ff706 	br	b928 <__alt_mem_Flash_flash_data+0xf400b928>

0000b94c <_calloc_r>:
    b94c:	298b383a 	mul	r5,r5,r6
    b950:	defffe04 	addi	sp,sp,-8
    b954:	dc000015 	stw	r16,0(sp)
    b958:	dfc00115 	stw	ra,4(sp)
    b95c:	0007fe00 	call	7fe0 <_malloc_r>
    b960:	1021883a 	mov	r16,r2
    b964:	10002826 	beq	r2,zero,ba08 <_calloc_r+0xbc>
    b968:	11bfff17 	ldw	r6,-4(r2)
    b96c:	00bfff04 	movi	r2,-4
    b970:	00c00904 	movi	r3,36
    b974:	308c703a 	and	r6,r6,r2
    b978:	308d883a 	add	r6,r6,r2
    b97c:	19801436 	bltu	r3,r6,b9d0 <_calloc_r+0x84>
    b980:	008004c4 	movi	r2,19
    b984:	11800936 	bltu	r2,r6,b9ac <_calloc_r+0x60>
    b988:	8005883a 	mov	r2,r16
    b98c:	10000015 	stw	zero,0(r2)
    b990:	10000115 	stw	zero,4(r2)
    b994:	10000215 	stw	zero,8(r2)
    b998:	8005883a 	mov	r2,r16
    b99c:	dfc00117 	ldw	ra,4(sp)
    b9a0:	dc000017 	ldw	r16,0(sp)
    b9a4:	dec00204 	addi	sp,sp,8
    b9a8:	f800283a 	ret
    b9ac:	80000015 	stw	zero,0(r16)
    b9b0:	80000115 	stw	zero,4(r16)
    b9b4:	008006c4 	movi	r2,27
    b9b8:	11800d2e 	bgeu	r2,r6,b9f0 <_calloc_r+0xa4>
    b9bc:	80000215 	stw	zero,8(r16)
    b9c0:	80000315 	stw	zero,12(r16)
    b9c4:	30c00c26 	beq	r6,r3,b9f8 <_calloc_r+0xac>
    b9c8:	80800404 	addi	r2,r16,16
    b9cc:	003fef06 	br	b98c <__alt_mem_Flash_flash_data+0xf400b98c>
    b9d0:	8009883a 	mov	r4,r16
    b9d4:	000b883a 	mov	r5,zero
    b9d8:	0008b040 	call	8b04 <memset>
    b9dc:	8005883a 	mov	r2,r16
    b9e0:	dfc00117 	ldw	ra,4(sp)
    b9e4:	dc000017 	ldw	r16,0(sp)
    b9e8:	dec00204 	addi	sp,sp,8
    b9ec:	f800283a 	ret
    b9f0:	80800204 	addi	r2,r16,8
    b9f4:	003fe506 	br	b98c <__alt_mem_Flash_flash_data+0xf400b98c>
    b9f8:	80000415 	stw	zero,16(r16)
    b9fc:	80800604 	addi	r2,r16,24
    ba00:	80000515 	stw	zero,20(r16)
    ba04:	003fe106 	br	b98c <__alt_mem_Flash_flash_data+0xf400b98c>
    ba08:	0005883a 	mov	r2,zero
    ba0c:	003fe306 	br	b99c <__alt_mem_Flash_flash_data+0xf400b99c>

0000ba10 <_fclose_r>:
    ba10:	28003926 	beq	r5,zero,baf8 <_fclose_r+0xe8>
    ba14:	defffc04 	addi	sp,sp,-16
    ba18:	dc400115 	stw	r17,4(sp)
    ba1c:	dc000015 	stw	r16,0(sp)
    ba20:	dfc00315 	stw	ra,12(sp)
    ba24:	dc800215 	stw	r18,8(sp)
    ba28:	2023883a 	mov	r17,r4
    ba2c:	2821883a 	mov	r16,r5
    ba30:	20000226 	beq	r4,zero,ba3c <_fclose_r+0x2c>
    ba34:	20800e17 	ldw	r2,56(r4)
    ba38:	10002726 	beq	r2,zero,bad8 <_fclose_r+0xc8>
    ba3c:	8080030f 	ldh	r2,12(r16)
    ba40:	1000071e 	bne	r2,zero,ba60 <_fclose_r+0x50>
    ba44:	0005883a 	mov	r2,zero
    ba48:	dfc00317 	ldw	ra,12(sp)
    ba4c:	dc800217 	ldw	r18,8(sp)
    ba50:	dc400117 	ldw	r17,4(sp)
    ba54:	dc000017 	ldw	r16,0(sp)
    ba58:	dec00404 	addi	sp,sp,16
    ba5c:	f800283a 	ret
    ba60:	8809883a 	mov	r4,r17
    ba64:	800b883a 	mov	r5,r16
    ba68:	0006cb80 	call	6cb8 <__sflush_r>
    ba6c:	1025883a 	mov	r18,r2
    ba70:	80800b17 	ldw	r2,44(r16)
    ba74:	10000426 	beq	r2,zero,ba88 <_fclose_r+0x78>
    ba78:	81400717 	ldw	r5,28(r16)
    ba7c:	8809883a 	mov	r4,r17
    ba80:	103ee83a 	callr	r2
    ba84:	10001616 	blt	r2,zero,bae0 <_fclose_r+0xd0>
    ba88:	8080030b 	ldhu	r2,12(r16)
    ba8c:	1080200c 	andi	r2,r2,128
    ba90:	1000151e 	bne	r2,zero,bae8 <_fclose_r+0xd8>
    ba94:	81400c17 	ldw	r5,48(r16)
    ba98:	28000526 	beq	r5,zero,bab0 <_fclose_r+0xa0>
    ba9c:	80801004 	addi	r2,r16,64
    baa0:	28800226 	beq	r5,r2,baac <_fclose_r+0x9c>
    baa4:	8809883a 	mov	r4,r17
    baa8:	00074100 	call	7410 <_free_r>
    baac:	80000c15 	stw	zero,48(r16)
    bab0:	81401117 	ldw	r5,68(r16)
    bab4:	28000326 	beq	r5,zero,bac4 <_fclose_r+0xb4>
    bab8:	8809883a 	mov	r4,r17
    babc:	00074100 	call	7410 <_free_r>
    bac0:	80001115 	stw	zero,68(r16)
    bac4:	00072ac0 	call	72ac <__sfp_lock_acquire>
    bac8:	8000030d 	sth	zero,12(r16)
    bacc:	00072b00 	call	72b0 <__sfp_lock_release>
    bad0:	9005883a 	mov	r2,r18
    bad4:	003fdc06 	br	ba48 <__alt_mem_Flash_flash_data+0xf400ba48>
    bad8:	000729c0 	call	729c <__sinit>
    badc:	003fd706 	br	ba3c <__alt_mem_Flash_flash_data+0xf400ba3c>
    bae0:	04bfffc4 	movi	r18,-1
    bae4:	003fe806 	br	ba88 <__alt_mem_Flash_flash_data+0xf400ba88>
    bae8:	81400417 	ldw	r5,16(r16)
    baec:	8809883a 	mov	r4,r17
    baf0:	00074100 	call	7410 <_free_r>
    baf4:	003fe706 	br	ba94 <__alt_mem_Flash_flash_data+0xf400ba94>
    baf8:	0005883a 	mov	r2,zero
    bafc:	f800283a 	ret

0000bb00 <fclose>:
    bb00:	008000b4 	movhi	r2,2
    bb04:	10bb2904 	addi	r2,r2,-4956
    bb08:	200b883a 	mov	r5,r4
    bb0c:	11000017 	ldw	r4,0(r2)
    bb10:	000ba101 	jmpi	ba10 <_fclose_r>

0000bb14 <_fputwc_r>:
    bb14:	3080030b 	ldhu	r2,12(r6)
    bb18:	defff804 	addi	sp,sp,-32
    bb1c:	dcc00415 	stw	r19,16(sp)
    bb20:	dc800315 	stw	r18,12(sp)
    bb24:	dc000115 	stw	r16,4(sp)
    bb28:	dfc00715 	stw	ra,28(sp)
    bb2c:	dd400615 	stw	r21,24(sp)
    bb30:	dd000515 	stw	r20,20(sp)
    bb34:	dc400215 	stw	r17,8(sp)
    bb38:	10c8000c 	andi	r3,r2,8192
    bb3c:	3021883a 	mov	r16,r6
    bb40:	2027883a 	mov	r19,r4
    bb44:	2825883a 	mov	r18,r5
    bb48:	1800051e 	bne	r3,zero,bb60 <_fputwc_r+0x4c>
    bb4c:	30c01917 	ldw	r3,100(r6)
    bb50:	10880014 	ori	r2,r2,8192
    bb54:	3080030d 	sth	r2,12(r6)
    bb58:	18880014 	ori	r2,r3,8192
    bb5c:	30801915 	stw	r2,100(r6)
    bb60:	0007dd00 	call	7dd0 <__locale_mb_cur_max>
    bb64:	00c00044 	movi	r3,1
    bb68:	10c03e26 	beq	r2,r3,bc64 <_fputwc_r+0x150>
    bb6c:	9809883a 	mov	r4,r19
    bb70:	d80b883a 	mov	r5,sp
    bb74:	900d883a 	mov	r6,r18
    bb78:	81c01704 	addi	r7,r16,92
    bb7c:	000bfac0 	call	bfac <_wcrtomb_r>
    bb80:	1029883a 	mov	r20,r2
    bb84:	00bfffc4 	movi	r2,-1
    bb88:	a0802026 	beq	r20,r2,bc0c <_fputwc_r+0xf8>
    bb8c:	d9400003 	ldbu	r5,0(sp)
    bb90:	a0001c26 	beq	r20,zero,bc04 <_fputwc_r+0xf0>
    bb94:	0023883a 	mov	r17,zero
    bb98:	05400284 	movi	r21,10
    bb9c:	00000906 	br	bbc4 <_fputwc_r+0xb0>
    bba0:	80800017 	ldw	r2,0(r16)
    bba4:	11400005 	stb	r5,0(r2)
    bba8:	80c00017 	ldw	r3,0(r16)
    bbac:	18c00044 	addi	r3,r3,1
    bbb0:	80c00015 	stw	r3,0(r16)
    bbb4:	8c400044 	addi	r17,r17,1
    bbb8:	dc45883a 	add	r2,sp,r17
    bbbc:	8d00112e 	bgeu	r17,r20,bc04 <_fputwc_r+0xf0>
    bbc0:	11400003 	ldbu	r5,0(r2)
    bbc4:	80c00217 	ldw	r3,8(r16)
    bbc8:	18ffffc4 	addi	r3,r3,-1
    bbcc:	80c00215 	stw	r3,8(r16)
    bbd0:	183ff30e 	bge	r3,zero,bba0 <__alt_mem_Flash_flash_data+0xf400bba0>
    bbd4:	80800617 	ldw	r2,24(r16)
    bbd8:	18801916 	blt	r3,r2,bc40 <_fputwc_r+0x12c>
    bbdc:	80800017 	ldw	r2,0(r16)
    bbe0:	11400005 	stb	r5,0(r2)
    bbe4:	80800017 	ldw	r2,0(r16)
    bbe8:	10c00003 	ldbu	r3,0(r2)
    bbec:	10800044 	addi	r2,r2,1
    bbf0:	1d402326 	beq	r3,r21,bc80 <_fputwc_r+0x16c>
    bbf4:	80800015 	stw	r2,0(r16)
    bbf8:	8c400044 	addi	r17,r17,1
    bbfc:	dc45883a 	add	r2,sp,r17
    bc00:	8d3fef36 	bltu	r17,r20,bbc0 <__alt_mem_Flash_flash_data+0xf400bbc0>
    bc04:	9005883a 	mov	r2,r18
    bc08:	00000406 	br	bc1c <_fputwc_r+0x108>
    bc0c:	80c0030b 	ldhu	r3,12(r16)
    bc10:	a005883a 	mov	r2,r20
    bc14:	18c01014 	ori	r3,r3,64
    bc18:	80c0030d 	sth	r3,12(r16)
    bc1c:	dfc00717 	ldw	ra,28(sp)
    bc20:	dd400617 	ldw	r21,24(sp)
    bc24:	dd000517 	ldw	r20,20(sp)
    bc28:	dcc00417 	ldw	r19,16(sp)
    bc2c:	dc800317 	ldw	r18,12(sp)
    bc30:	dc400217 	ldw	r17,8(sp)
    bc34:	dc000117 	ldw	r16,4(sp)
    bc38:	dec00804 	addi	sp,sp,32
    bc3c:	f800283a 	ret
    bc40:	9809883a 	mov	r4,r19
    bc44:	29403fcc 	andi	r5,r5,255
    bc48:	800d883a 	mov	r6,r16
    bc4c:	000be580 	call	be58 <__swbuf_r>
    bc50:	10bfffe0 	cmpeqi	r2,r2,-1
    bc54:	10803fcc 	andi	r2,r2,255
    bc58:	103fd626 	beq	r2,zero,bbb4 <__alt_mem_Flash_flash_data+0xf400bbb4>
    bc5c:	00bfffc4 	movi	r2,-1
    bc60:	003fee06 	br	bc1c <__alt_mem_Flash_flash_data+0xf400bc1c>
    bc64:	90ffffc4 	addi	r3,r18,-1
    bc68:	01003f84 	movi	r4,254
    bc6c:	20ffbf36 	bltu	r4,r3,bb6c <__alt_mem_Flash_flash_data+0xf400bb6c>
    bc70:	900b883a 	mov	r5,r18
    bc74:	dc800005 	stb	r18,0(sp)
    bc78:	1029883a 	mov	r20,r2
    bc7c:	003fc506 	br	bb94 <__alt_mem_Flash_flash_data+0xf400bb94>
    bc80:	9809883a 	mov	r4,r19
    bc84:	a80b883a 	mov	r5,r21
    bc88:	800d883a 	mov	r6,r16
    bc8c:	000be580 	call	be58 <__swbuf_r>
    bc90:	10bfffe0 	cmpeqi	r2,r2,-1
    bc94:	003fef06 	br	bc54 <__alt_mem_Flash_flash_data+0xf400bc54>

0000bc98 <fputwc>:
    bc98:	008000b4 	movhi	r2,2
    bc9c:	defffc04 	addi	sp,sp,-16
    bca0:	10bb2904 	addi	r2,r2,-4956
    bca4:	dc000115 	stw	r16,4(sp)
    bca8:	14000017 	ldw	r16,0(r2)
    bcac:	dc400215 	stw	r17,8(sp)
    bcb0:	dfc00315 	stw	ra,12(sp)
    bcb4:	2023883a 	mov	r17,r4
    bcb8:	280d883a 	mov	r6,r5
    bcbc:	80000626 	beq	r16,zero,bcd8 <fputwc+0x40>
    bcc0:	80800e17 	ldw	r2,56(r16)
    bcc4:	1000041e 	bne	r2,zero,bcd8 <fputwc+0x40>
    bcc8:	8009883a 	mov	r4,r16
    bccc:	d9400015 	stw	r5,0(sp)
    bcd0:	000729c0 	call	729c <__sinit>
    bcd4:	d9800017 	ldw	r6,0(sp)
    bcd8:	8009883a 	mov	r4,r16
    bcdc:	880b883a 	mov	r5,r17
    bce0:	dfc00317 	ldw	ra,12(sp)
    bce4:	dc400217 	ldw	r17,8(sp)
    bce8:	dc000117 	ldw	r16,4(sp)
    bcec:	dec00404 	addi	sp,sp,16
    bcf0:	000bb141 	jmpi	bb14 <_fputwc_r>

0000bcf4 <_fstat_r>:
    bcf4:	defffd04 	addi	sp,sp,-12
    bcf8:	dc000015 	stw	r16,0(sp)
    bcfc:	040000b4 	movhi	r16,2
    bd00:	dc400115 	stw	r17,4(sp)
    bd04:	84034d04 	addi	r16,r16,3380
    bd08:	2023883a 	mov	r17,r4
    bd0c:	2809883a 	mov	r4,r5
    bd10:	300b883a 	mov	r5,r6
    bd14:	dfc00215 	stw	ra,8(sp)
    bd18:	80000015 	stw	zero,0(r16)
    bd1c:	000f5ac0 	call	f5ac <fstat>
    bd20:	00ffffc4 	movi	r3,-1
    bd24:	10c00526 	beq	r2,r3,bd3c <_fstat_r+0x48>
    bd28:	dfc00217 	ldw	ra,8(sp)
    bd2c:	dc400117 	ldw	r17,4(sp)
    bd30:	dc000017 	ldw	r16,0(sp)
    bd34:	dec00304 	addi	sp,sp,12
    bd38:	f800283a 	ret
    bd3c:	80c00017 	ldw	r3,0(r16)
    bd40:	183ff926 	beq	r3,zero,bd28 <__alt_mem_Flash_flash_data+0xf400bd28>
    bd44:	88c00015 	stw	r3,0(r17)
    bd48:	003ff706 	br	bd28 <__alt_mem_Flash_flash_data+0xf400bd28>

0000bd4c <_isatty_r>:
    bd4c:	defffd04 	addi	sp,sp,-12
    bd50:	dc000015 	stw	r16,0(sp)
    bd54:	040000b4 	movhi	r16,2
    bd58:	dc400115 	stw	r17,4(sp)
    bd5c:	84034d04 	addi	r16,r16,3380
    bd60:	2023883a 	mov	r17,r4
    bd64:	2809883a 	mov	r4,r5
    bd68:	dfc00215 	stw	ra,8(sp)
    bd6c:	80000015 	stw	zero,0(r16)
    bd70:	000f6ac0 	call	f6ac <isatty>
    bd74:	00ffffc4 	movi	r3,-1
    bd78:	10c00526 	beq	r2,r3,bd90 <_isatty_r+0x44>
    bd7c:	dfc00217 	ldw	ra,8(sp)
    bd80:	dc400117 	ldw	r17,4(sp)
    bd84:	dc000017 	ldw	r16,0(sp)
    bd88:	dec00304 	addi	sp,sp,12
    bd8c:	f800283a 	ret
    bd90:	80c00017 	ldw	r3,0(r16)
    bd94:	183ff926 	beq	r3,zero,bd7c <__alt_mem_Flash_flash_data+0xf400bd7c>
    bd98:	88c00015 	stw	r3,0(r17)
    bd9c:	003ff706 	br	bd7c <__alt_mem_Flash_flash_data+0xf400bd7c>

0000bda0 <_lseek_r>:
    bda0:	defffd04 	addi	sp,sp,-12
    bda4:	dc000015 	stw	r16,0(sp)
    bda8:	040000b4 	movhi	r16,2
    bdac:	dc400115 	stw	r17,4(sp)
    bdb0:	84034d04 	addi	r16,r16,3380
    bdb4:	2023883a 	mov	r17,r4
    bdb8:	2809883a 	mov	r4,r5
    bdbc:	300b883a 	mov	r5,r6
    bdc0:	380d883a 	mov	r6,r7
    bdc4:	dfc00215 	stw	ra,8(sp)
    bdc8:	80000015 	stw	zero,0(r16)
    bdcc:	000f8840 	call	f884 <lseek>
    bdd0:	00ffffc4 	movi	r3,-1
    bdd4:	10c00526 	beq	r2,r3,bdec <_lseek_r+0x4c>
    bdd8:	dfc00217 	ldw	ra,8(sp)
    bddc:	dc400117 	ldw	r17,4(sp)
    bde0:	dc000017 	ldw	r16,0(sp)
    bde4:	dec00304 	addi	sp,sp,12
    bde8:	f800283a 	ret
    bdec:	80c00017 	ldw	r3,0(r16)
    bdf0:	183ff926 	beq	r3,zero,bdd8 <__alt_mem_Flash_flash_data+0xf400bdd8>
    bdf4:	88c00015 	stw	r3,0(r17)
    bdf8:	003ff706 	br	bdd8 <__alt_mem_Flash_flash_data+0xf400bdd8>

0000bdfc <_read_r>:
    bdfc:	defffd04 	addi	sp,sp,-12
    be00:	dc000015 	stw	r16,0(sp)
    be04:	040000b4 	movhi	r16,2
    be08:	dc400115 	stw	r17,4(sp)
    be0c:	84034d04 	addi	r16,r16,3380
    be10:	2023883a 	mov	r17,r4
    be14:	2809883a 	mov	r4,r5
    be18:	300b883a 	mov	r5,r6
    be1c:	380d883a 	mov	r6,r7
    be20:	dfc00215 	stw	ra,8(sp)
    be24:	80000015 	stw	zero,0(r16)
    be28:	000fa7c0 	call	fa7c <read>
    be2c:	00ffffc4 	movi	r3,-1
    be30:	10c00526 	beq	r2,r3,be48 <_read_r+0x4c>
    be34:	dfc00217 	ldw	ra,8(sp)
    be38:	dc400117 	ldw	r17,4(sp)
    be3c:	dc000017 	ldw	r16,0(sp)
    be40:	dec00304 	addi	sp,sp,12
    be44:	f800283a 	ret
    be48:	80c00017 	ldw	r3,0(r16)
    be4c:	183ff926 	beq	r3,zero,be34 <__alt_mem_Flash_flash_data+0xf400be34>
    be50:	88c00015 	stw	r3,0(r17)
    be54:	003ff706 	br	be34 <__alt_mem_Flash_flash_data+0xf400be34>

0000be58 <__swbuf_r>:
    be58:	defffc04 	addi	sp,sp,-16
    be5c:	dc800215 	stw	r18,8(sp)
    be60:	dc400115 	stw	r17,4(sp)
    be64:	dc000015 	stw	r16,0(sp)
    be68:	dfc00315 	stw	ra,12(sp)
    be6c:	2025883a 	mov	r18,r4
    be70:	2823883a 	mov	r17,r5
    be74:	3021883a 	mov	r16,r6
    be78:	20000226 	beq	r4,zero,be84 <__swbuf_r+0x2c>
    be7c:	20800e17 	ldw	r2,56(r4)
    be80:	10004126 	beq	r2,zero,bf88 <__swbuf_r+0x130>
    be84:	80c00617 	ldw	r3,24(r16)
    be88:	8180030b 	ldhu	r6,12(r16)
    be8c:	80c00215 	stw	r3,8(r16)
    be90:	30c0020c 	andi	r3,r6,8
    be94:	18003526 	beq	r3,zero,bf6c <__swbuf_r+0x114>
    be98:	80c00417 	ldw	r3,16(r16)
    be9c:	18003326 	beq	r3,zero,bf6c <__swbuf_r+0x114>
    bea0:	3088000c 	andi	r2,r6,8192
    bea4:	8c403fcc 	andi	r17,r17,255
    bea8:	10001726 	beq	r2,zero,bf08 <__swbuf_r+0xb0>
    beac:	80800017 	ldw	r2,0(r16)
    beb0:	81000517 	ldw	r4,20(r16)
    beb4:	10c7c83a 	sub	r3,r2,r3
    beb8:	19001d0e 	bge	r3,r4,bf30 <__swbuf_r+0xd8>
    bebc:	18c00044 	addi	r3,r3,1
    bec0:	81400217 	ldw	r5,8(r16)
    bec4:	11000044 	addi	r4,r2,1
    bec8:	81000015 	stw	r4,0(r16)
    becc:	297fffc4 	addi	r5,r5,-1
    bed0:	81400215 	stw	r5,8(r16)
    bed4:	14400005 	stb	r17,0(r2)
    bed8:	80800517 	ldw	r2,20(r16)
    bedc:	10c01d26 	beq	r2,r3,bf54 <__swbuf_r+0xfc>
    bee0:	8080030b 	ldhu	r2,12(r16)
    bee4:	1080004c 	andi	r2,r2,1
    bee8:	1000181e 	bne	r2,zero,bf4c <__swbuf_r+0xf4>
    beec:	8805883a 	mov	r2,r17
    bef0:	dfc00317 	ldw	ra,12(sp)
    bef4:	dc800217 	ldw	r18,8(sp)
    bef8:	dc400117 	ldw	r17,4(sp)
    befc:	dc000017 	ldw	r16,0(sp)
    bf00:	dec00404 	addi	sp,sp,16
    bf04:	f800283a 	ret
    bf08:	81001917 	ldw	r4,100(r16)
    bf0c:	00b7ffc4 	movi	r2,-8193
    bf10:	31880014 	ori	r6,r6,8192
    bf14:	2084703a 	and	r2,r4,r2
    bf18:	80801915 	stw	r2,100(r16)
    bf1c:	80800017 	ldw	r2,0(r16)
    bf20:	81000517 	ldw	r4,20(r16)
    bf24:	8180030d 	sth	r6,12(r16)
    bf28:	10c7c83a 	sub	r3,r2,r3
    bf2c:	193fe316 	blt	r3,r4,bebc <__alt_mem_Flash_flash_data+0xf400bebc>
    bf30:	9009883a 	mov	r4,r18
    bf34:	800b883a 	mov	r5,r16
    bf38:	0006ec00 	call	6ec0 <_fflush_r>
    bf3c:	1000091e 	bne	r2,zero,bf64 <__swbuf_r+0x10c>
    bf40:	80800017 	ldw	r2,0(r16)
    bf44:	00c00044 	movi	r3,1
    bf48:	003fdd06 	br	bec0 <__alt_mem_Flash_flash_data+0xf400bec0>
    bf4c:	00800284 	movi	r2,10
    bf50:	88bfe61e 	bne	r17,r2,beec <__alt_mem_Flash_flash_data+0xf400beec>
    bf54:	9009883a 	mov	r4,r18
    bf58:	800b883a 	mov	r5,r16
    bf5c:	0006ec00 	call	6ec0 <_fflush_r>
    bf60:	103fe226 	beq	r2,zero,beec <__alt_mem_Flash_flash_data+0xf400beec>
    bf64:	00bfffc4 	movi	r2,-1
    bf68:	003fe106 	br	bef0 <__alt_mem_Flash_flash_data+0xf400bef0>
    bf6c:	9009883a 	mov	r4,r18
    bf70:	800b883a 	mov	r5,r16
    bf74:	000523c0 	call	523c <__swsetup_r>
    bf78:	103ffa1e 	bne	r2,zero,bf64 <__alt_mem_Flash_flash_data+0xf400bf64>
    bf7c:	8180030b 	ldhu	r6,12(r16)
    bf80:	80c00417 	ldw	r3,16(r16)
    bf84:	003fc606 	br	bea0 <__alt_mem_Flash_flash_data+0xf400bea0>
    bf88:	000729c0 	call	729c <__sinit>
    bf8c:	003fbd06 	br	be84 <__alt_mem_Flash_flash_data+0xf400be84>

0000bf90 <__swbuf>:
    bf90:	00c000b4 	movhi	r3,2
    bf94:	18fb2904 	addi	r3,r3,-4956
    bf98:	2005883a 	mov	r2,r4
    bf9c:	19000017 	ldw	r4,0(r3)
    bfa0:	280d883a 	mov	r6,r5
    bfa4:	100b883a 	mov	r5,r2
    bfa8:	000be581 	jmpi	be58 <__swbuf_r>

0000bfac <_wcrtomb_r>:
    bfac:	defff604 	addi	sp,sp,-40
    bfb0:	008000b4 	movhi	r2,2
    bfb4:	dc800815 	stw	r18,32(sp)
    bfb8:	dc400715 	stw	r17,28(sp)
    bfbc:	dc000615 	stw	r16,24(sp)
    bfc0:	10bb2d04 	addi	r2,r2,-4940
    bfc4:	dfc00915 	stw	ra,36(sp)
    bfc8:	2021883a 	mov	r16,r4
    bfcc:	3823883a 	mov	r17,r7
    bfd0:	14800017 	ldw	r18,0(r2)
    bfd4:	28001426 	beq	r5,zero,c028 <_wcrtomb_r+0x7c>
    bfd8:	d9400415 	stw	r5,16(sp)
    bfdc:	d9800515 	stw	r6,20(sp)
    bfe0:	0007dc40 	call	7dc4 <__locale_charset>
    bfe4:	d9400417 	ldw	r5,16(sp)
    bfe8:	d9800517 	ldw	r6,20(sp)
    bfec:	8009883a 	mov	r4,r16
    bff0:	dc400015 	stw	r17,0(sp)
    bff4:	100f883a 	mov	r7,r2
    bff8:	903ee83a 	callr	r18
    bffc:	00ffffc4 	movi	r3,-1
    c000:	10c0031e 	bne	r2,r3,c010 <_wcrtomb_r+0x64>
    c004:	88000015 	stw	zero,0(r17)
    c008:	00c02284 	movi	r3,138
    c00c:	80c00015 	stw	r3,0(r16)
    c010:	dfc00917 	ldw	ra,36(sp)
    c014:	dc800817 	ldw	r18,32(sp)
    c018:	dc400717 	ldw	r17,28(sp)
    c01c:	dc000617 	ldw	r16,24(sp)
    c020:	dec00a04 	addi	sp,sp,40
    c024:	f800283a 	ret
    c028:	0007dc40 	call	7dc4 <__locale_charset>
    c02c:	8009883a 	mov	r4,r16
    c030:	dc400015 	stw	r17,0(sp)
    c034:	d9400104 	addi	r5,sp,4
    c038:	000d883a 	mov	r6,zero
    c03c:	100f883a 	mov	r7,r2
    c040:	903ee83a 	callr	r18
    c044:	003fed06 	br	bffc <__alt_mem_Flash_flash_data+0xf400bffc>

0000c048 <wcrtomb>:
    c048:	defff604 	addi	sp,sp,-40
    c04c:	008000b4 	movhi	r2,2
    c050:	dc800615 	stw	r18,24(sp)
    c054:	dc400515 	stw	r17,20(sp)
    c058:	dc000415 	stw	r16,16(sp)
    c05c:	10bb2904 	addi	r2,r2,-4956
    c060:	dfc00915 	stw	ra,36(sp)
    c064:	dd000815 	stw	r20,32(sp)
    c068:	dcc00715 	stw	r19,28(sp)
    c06c:	2021883a 	mov	r16,r4
    c070:	3025883a 	mov	r18,r6
    c074:	14400017 	ldw	r17,0(r2)
    c078:	20001826 	beq	r4,zero,c0dc <wcrtomb+0x94>
    c07c:	008000b4 	movhi	r2,2
    c080:	10bb2d04 	addi	r2,r2,-4940
    c084:	15000017 	ldw	r20,0(r2)
    c088:	2827883a 	mov	r19,r5
    c08c:	0007dc40 	call	7dc4 <__locale_charset>
    c090:	8809883a 	mov	r4,r17
    c094:	dc800015 	stw	r18,0(sp)
    c098:	800b883a 	mov	r5,r16
    c09c:	980d883a 	mov	r6,r19
    c0a0:	100f883a 	mov	r7,r2
    c0a4:	a03ee83a 	callr	r20
    c0a8:	00ffffc4 	movi	r3,-1
    c0ac:	10c0031e 	bne	r2,r3,c0bc <wcrtomb+0x74>
    c0b0:	90000015 	stw	zero,0(r18)
    c0b4:	00c02284 	movi	r3,138
    c0b8:	88c00015 	stw	r3,0(r17)
    c0bc:	dfc00917 	ldw	ra,36(sp)
    c0c0:	dd000817 	ldw	r20,32(sp)
    c0c4:	dcc00717 	ldw	r19,28(sp)
    c0c8:	dc800617 	ldw	r18,24(sp)
    c0cc:	dc400517 	ldw	r17,20(sp)
    c0d0:	dc000417 	ldw	r16,16(sp)
    c0d4:	dec00a04 	addi	sp,sp,40
    c0d8:	f800283a 	ret
    c0dc:	008000b4 	movhi	r2,2
    c0e0:	10bb2d04 	addi	r2,r2,-4940
    c0e4:	14000017 	ldw	r16,0(r2)
    c0e8:	0007dc40 	call	7dc4 <__locale_charset>
    c0ec:	8809883a 	mov	r4,r17
    c0f0:	dc800015 	stw	r18,0(sp)
    c0f4:	d9400104 	addi	r5,sp,4
    c0f8:	000d883a 	mov	r6,zero
    c0fc:	100f883a 	mov	r7,r2
    c100:	803ee83a 	callr	r16
    c104:	003fe806 	br	c0a8 <__alt_mem_Flash_flash_data+0xf400c0a8>

0000c108 <__ascii_wctomb>:
    c108:	28000526 	beq	r5,zero,c120 <__ascii_wctomb+0x18>
    c10c:	00803fc4 	movi	r2,255
    c110:	11800536 	bltu	r2,r6,c128 <__ascii_wctomb+0x20>
    c114:	29800005 	stb	r6,0(r5)
    c118:	00800044 	movi	r2,1
    c11c:	f800283a 	ret
    c120:	0005883a 	mov	r2,zero
    c124:	f800283a 	ret
    c128:	00802284 	movi	r2,138
    c12c:	20800015 	stw	r2,0(r4)
    c130:	00bfffc4 	movi	r2,-1
    c134:	f800283a 	ret

0000c138 <_wctomb_r>:
    c138:	008000b4 	movhi	r2,2
    c13c:	defff904 	addi	sp,sp,-28
    c140:	10bb2d04 	addi	r2,r2,-4940
    c144:	dfc00615 	stw	ra,24(sp)
    c148:	dc400515 	stw	r17,20(sp)
    c14c:	dc000415 	stw	r16,16(sp)
    c150:	3823883a 	mov	r17,r7
    c154:	14000017 	ldw	r16,0(r2)
    c158:	d9000115 	stw	r4,4(sp)
    c15c:	d9400215 	stw	r5,8(sp)
    c160:	d9800315 	stw	r6,12(sp)
    c164:	0007dc40 	call	7dc4 <__locale_charset>
    c168:	d9000117 	ldw	r4,4(sp)
    c16c:	d9400217 	ldw	r5,8(sp)
    c170:	d9800317 	ldw	r6,12(sp)
    c174:	dc400015 	stw	r17,0(sp)
    c178:	100f883a 	mov	r7,r2
    c17c:	803ee83a 	callr	r16
    c180:	dfc00617 	ldw	ra,24(sp)
    c184:	dc400517 	ldw	r17,20(sp)
    c188:	dc000417 	ldw	r16,16(sp)
    c18c:	dec00704 	addi	sp,sp,28
    c190:	f800283a 	ret

0000c194 <__udivdi3>:
    c194:	defff504 	addi	sp,sp,-44
    c198:	dcc00415 	stw	r19,16(sp)
    c19c:	dc000115 	stw	r16,4(sp)
    c1a0:	dfc00a15 	stw	ra,40(sp)
    c1a4:	df000915 	stw	fp,36(sp)
    c1a8:	ddc00815 	stw	r23,32(sp)
    c1ac:	dd800715 	stw	r22,28(sp)
    c1b0:	dd400615 	stw	r21,24(sp)
    c1b4:	dd000515 	stw	r20,20(sp)
    c1b8:	dc800315 	stw	r18,12(sp)
    c1bc:	dc400215 	stw	r17,8(sp)
    c1c0:	2027883a 	mov	r19,r4
    c1c4:	2821883a 	mov	r16,r5
    c1c8:	3800421e 	bne	r7,zero,c2d4 <__udivdi3+0x140>
    c1cc:	3025883a 	mov	r18,r6
    c1d0:	2023883a 	mov	r17,r4
    c1d4:	2980542e 	bgeu	r5,r6,c328 <__udivdi3+0x194>
    c1d8:	00bfffd4 	movui	r2,65535
    c1dc:	282d883a 	mov	r22,r5
    c1e0:	1180a836 	bltu	r2,r6,c484 <__udivdi3+0x2f0>
    c1e4:	00803fc4 	movi	r2,255
    c1e8:	1181422e 	bgeu	r2,r6,c6f4 <__udivdi3+0x560>
    c1ec:	00800204 	movi	r2,8
    c1f0:	1007883a 	mov	r3,r2
    c1f4:	3084d83a 	srl	r2,r6,r2
    c1f8:	010000b4 	movhi	r4,2
    c1fc:	21328704 	addi	r4,r4,-13796
    c200:	2085883a 	add	r2,r4,r2
    c204:	10800003 	ldbu	r2,0(r2)
    c208:	10c7883a 	add	r3,r2,r3
    c20c:	00800804 	movi	r2,32
    c210:	10c5c83a 	sub	r2,r2,r3
    c214:	10000526 	beq	r2,zero,c22c <__udivdi3+0x98>
    c218:	80a0983a 	sll	r16,r16,r2
    c21c:	98c6d83a 	srl	r3,r19,r3
    c220:	30a4983a 	sll	r18,r6,r2
    c224:	98a2983a 	sll	r17,r19,r2
    c228:	80ecb03a 	or	r22,r16,r3
    c22c:	902ad43a 	srli	r21,r18,16
    c230:	b009883a 	mov	r4,r22
    c234:	953fffcc 	andi	r20,r18,65535
    c238:	a80b883a 	mov	r5,r21
    c23c:	000ce080 	call	ce08 <__umodsi3>
    c240:	b009883a 	mov	r4,r22
    c244:	a80b883a 	mov	r5,r21
    c248:	1027883a 	mov	r19,r2
    c24c:	000ce000 	call	ce00 <__udivsi3>
    c250:	1021883a 	mov	r16,r2
    c254:	8806d43a 	srli	r3,r17,16
    c258:	9804943a 	slli	r2,r19,16
    c25c:	8527383a 	mul	r19,r16,r20
    c260:	10c4b03a 	or	r2,r2,r3
    c264:	14c0052e 	bgeu	r2,r19,c27c <__udivdi3+0xe8>
    c268:	1485883a 	add	r2,r2,r18
    c26c:	80ffffc4 	addi	r3,r16,-1
    c270:	14800136 	bltu	r2,r18,c278 <__udivdi3+0xe4>
    c274:	14c13436 	bltu	r2,r19,c748 <__udivdi3+0x5b4>
    c278:	1821883a 	mov	r16,r3
    c27c:	14e7c83a 	sub	r19,r2,r19
    c280:	9809883a 	mov	r4,r19
    c284:	a80b883a 	mov	r5,r21
    c288:	000ce080 	call	ce08 <__umodsi3>
    c28c:	102d883a 	mov	r22,r2
    c290:	9809883a 	mov	r4,r19
    c294:	a80b883a 	mov	r5,r21
    c298:	000ce000 	call	ce00 <__udivsi3>
    c29c:	b02c943a 	slli	r22,r22,16
    c2a0:	1529383a 	mul	r20,r2,r20
    c2a4:	8c7fffcc 	andi	r17,r17,65535
    c2a8:	b462b03a 	or	r17,r22,r17
    c2ac:	8d00052e 	bgeu	r17,r20,c2c4 <__udivdi3+0x130>
    c2b0:	8ca3883a 	add	r17,r17,r18
    c2b4:	10ffffc4 	addi	r3,r2,-1
    c2b8:	8c80f636 	bltu	r17,r18,c694 <__udivdi3+0x500>
    c2bc:	8d00f52e 	bgeu	r17,r20,c694 <__udivdi3+0x500>
    c2c0:	10bfff84 	addi	r2,r2,-2
    c2c4:	8020943a 	slli	r16,r16,16
    c2c8:	0007883a 	mov	r3,zero
    c2cc:	1404b03a 	or	r2,r2,r16
    c2d0:	00005b06 	br	c440 <__udivdi3+0x2ac>
    c2d4:	29c05836 	bltu	r5,r7,c438 <__udivdi3+0x2a4>
    c2d8:	00bfffd4 	movui	r2,65535
    c2dc:	11c0642e 	bgeu	r2,r7,c470 <__udivdi3+0x2dc>
    c2e0:	00804034 	movhi	r2,256
    c2e4:	10bfffc4 	addi	r2,r2,-1
    c2e8:	11c0f32e 	bgeu	r2,r7,c6b8 <__udivdi3+0x524>
    c2ec:	00c00604 	movi	r3,24
    c2f0:	180b883a 	mov	r5,r3
    c2f4:	38c6d83a 	srl	r3,r7,r3
    c2f8:	008000b4 	movhi	r2,2
    c2fc:	10b28704 	addi	r2,r2,-13796
    c300:	10c7883a 	add	r3,r2,r3
    c304:	18c00003 	ldbu	r3,0(r3)
    c308:	01000804 	movi	r4,32
    c30c:	1947883a 	add	r3,r3,r5
    c310:	20e5c83a 	sub	r18,r4,r3
    c314:	9000661e 	bne	r18,zero,c4b0 <__udivdi3+0x31c>
    c318:	3c00f936 	bltu	r7,r16,c700 <__udivdi3+0x56c>
    c31c:	9985403a 	cmpgeu	r2,r19,r6
    c320:	0007883a 	mov	r3,zero
    c324:	00004606 	br	c440 <__udivdi3+0x2ac>
    c328:	3000041e 	bne	r6,zero,c33c <__udivdi3+0x1a8>
    c32c:	01000044 	movi	r4,1
    c330:	000b883a 	mov	r5,zero
    c334:	000ce000 	call	ce00 <__udivsi3>
    c338:	1025883a 	mov	r18,r2
    c33c:	00bfffd4 	movui	r2,65535
    c340:	1480562e 	bgeu	r2,r18,c49c <__udivdi3+0x308>
    c344:	00804034 	movhi	r2,256
    c348:	10bfffc4 	addi	r2,r2,-1
    c34c:	1480e32e 	bgeu	r2,r18,c6dc <__udivdi3+0x548>
    c350:	00800604 	movi	r2,24
    c354:	1007883a 	mov	r3,r2
    c358:	9084d83a 	srl	r2,r18,r2
    c35c:	010000b4 	movhi	r4,2
    c360:	21328704 	addi	r4,r4,-13796
    c364:	2085883a 	add	r2,r4,r2
    c368:	10800003 	ldbu	r2,0(r2)
    c36c:	10c5883a 	add	r2,r2,r3
    c370:	00c00804 	movi	r3,32
    c374:	1887c83a 	sub	r3,r3,r2
    c378:	1800911e 	bne	r3,zero,c5c0 <__udivdi3+0x42c>
    c37c:	9028d43a 	srli	r20,r18,16
    c380:	84a1c83a 	sub	r16,r16,r18
    c384:	957fffcc 	andi	r21,r18,65535
    c388:	00c00044 	movi	r3,1
    c38c:	8009883a 	mov	r4,r16
    c390:	a00b883a 	mov	r5,r20
    c394:	d8c00015 	stw	r3,0(sp)
    c398:	000ce080 	call	ce08 <__umodsi3>
    c39c:	8009883a 	mov	r4,r16
    c3a0:	a00b883a 	mov	r5,r20
    c3a4:	1027883a 	mov	r19,r2
    c3a8:	000ce000 	call	ce00 <__udivsi3>
    c3ac:	1021883a 	mov	r16,r2
    c3b0:	880cd43a 	srli	r6,r17,16
    c3b4:	9804943a 	slli	r2,r19,16
    c3b8:	8567383a 	mul	r19,r16,r21
    c3bc:	d8c00017 	ldw	r3,0(sp)
    c3c0:	1188b03a 	or	r4,r2,r6
    c3c4:	24c0052e 	bgeu	r4,r19,c3dc <__udivdi3+0x248>
    c3c8:	2489883a 	add	r4,r4,r18
    c3cc:	80bfffc4 	addi	r2,r16,-1
    c3d0:	24800136 	bltu	r4,r18,c3d8 <__udivdi3+0x244>
    c3d4:	24c0d936 	bltu	r4,r19,c73c <__udivdi3+0x5a8>
    c3d8:	1021883a 	mov	r16,r2
    c3dc:	24e7c83a 	sub	r19,r4,r19
    c3e0:	9809883a 	mov	r4,r19
    c3e4:	a00b883a 	mov	r5,r20
    c3e8:	d8c00015 	stw	r3,0(sp)
    c3ec:	000ce080 	call	ce08 <__umodsi3>
    c3f0:	102d883a 	mov	r22,r2
    c3f4:	9809883a 	mov	r4,r19
    c3f8:	a00b883a 	mov	r5,r20
    c3fc:	000ce000 	call	ce00 <__udivsi3>
    c400:	b02c943a 	slli	r22,r22,16
    c404:	156b383a 	mul	r21,r2,r21
    c408:	8c7fffcc 	andi	r17,r17,65535
    c40c:	b462b03a 	or	r17,r22,r17
    c410:	d8c00017 	ldw	r3,0(sp)
    c414:	8d40052e 	bgeu	r17,r21,c42c <__udivdi3+0x298>
    c418:	8ca3883a 	add	r17,r17,r18
    c41c:	113fffc4 	addi	r4,r2,-1
    c420:	8c809a36 	bltu	r17,r18,c68c <__udivdi3+0x4f8>
    c424:	8d40992e 	bgeu	r17,r21,c68c <__udivdi3+0x4f8>
    c428:	10bfff84 	addi	r2,r2,-2
    c42c:	8020943a 	slli	r16,r16,16
    c430:	1404b03a 	or	r2,r2,r16
    c434:	00000206 	br	c440 <__udivdi3+0x2ac>
    c438:	0007883a 	mov	r3,zero
    c43c:	0005883a 	mov	r2,zero
    c440:	dfc00a17 	ldw	ra,40(sp)
    c444:	df000917 	ldw	fp,36(sp)
    c448:	ddc00817 	ldw	r23,32(sp)
    c44c:	dd800717 	ldw	r22,28(sp)
    c450:	dd400617 	ldw	r21,24(sp)
    c454:	dd000517 	ldw	r20,20(sp)
    c458:	dcc00417 	ldw	r19,16(sp)
    c45c:	dc800317 	ldw	r18,12(sp)
    c460:	dc400217 	ldw	r17,8(sp)
    c464:	dc000117 	ldw	r16,4(sp)
    c468:	dec00b04 	addi	sp,sp,44
    c46c:	f800283a 	ret
    c470:	00803fc4 	movi	r2,255
    c474:	11c0932e 	bgeu	r2,r7,c6c4 <__udivdi3+0x530>
    c478:	00c00204 	movi	r3,8
    c47c:	180b883a 	mov	r5,r3
    c480:	003f9c06 	br	c2f4 <__alt_mem_Flash_flash_data+0xf400c2f4>
    c484:	00804034 	movhi	r2,256
    c488:	10bfffc4 	addi	r2,r2,-1
    c48c:	1180902e 	bgeu	r2,r6,c6d0 <__udivdi3+0x53c>
    c490:	00800604 	movi	r2,24
    c494:	1007883a 	mov	r3,r2
    c498:	003f5606 	br	c1f4 <__alt_mem_Flash_flash_data+0xf400c1f4>
    c49c:	00803fc4 	movi	r2,255
    c4a0:	1480912e 	bgeu	r2,r18,c6e8 <__udivdi3+0x554>
    c4a4:	00800204 	movi	r2,8
    c4a8:	1007883a 	mov	r3,r2
    c4ac:	003faa06 	br	c358 <__alt_mem_Flash_flash_data+0xf400c358>
    c4b0:	30eed83a 	srl	r23,r6,r3
    c4b4:	3c8e983a 	sll	r7,r7,r18
    c4b8:	80f8d83a 	srl	fp,r16,r3
    c4bc:	98c6d83a 	srl	r3,r19,r3
    c4c0:	3deeb03a 	or	r23,r7,r23
    c4c4:	b828d43a 	srli	r20,r23,16
    c4c8:	84a0983a 	sll	r16,r16,r18
    c4cc:	e009883a 	mov	r4,fp
    c4d0:	a00b883a 	mov	r5,r20
    c4d4:	80e2b03a 	or	r17,r16,r3
    c4d8:	34aa983a 	sll	r21,r6,r18
    c4dc:	000ce080 	call	ce08 <__umodsi3>
    c4e0:	e009883a 	mov	r4,fp
    c4e4:	a00b883a 	mov	r5,r20
    c4e8:	102d883a 	mov	r22,r2
    c4ec:	000ce000 	call	ce00 <__udivsi3>
    c4f0:	1021883a 	mov	r16,r2
    c4f4:	bf3fffcc 	andi	fp,r23,65535
    c4f8:	b004943a 	slli	r2,r22,16
    c4fc:	8808d43a 	srli	r4,r17,16
    c500:	872d383a 	mul	r22,r16,fp
    c504:	1104b03a 	or	r2,r2,r4
    c508:	1580042e 	bgeu	r2,r22,c51c <__udivdi3+0x388>
    c50c:	15c5883a 	add	r2,r2,r23
    c510:	80ffffc4 	addi	r3,r16,-1
    c514:	15c0812e 	bgeu	r2,r23,c71c <__udivdi3+0x588>
    c518:	1821883a 	mov	r16,r3
    c51c:	15adc83a 	sub	r22,r2,r22
    c520:	b009883a 	mov	r4,r22
    c524:	a00b883a 	mov	r5,r20
    c528:	000ce080 	call	ce08 <__umodsi3>
    c52c:	a00b883a 	mov	r5,r20
    c530:	b009883a 	mov	r4,r22
    c534:	d8800015 	stw	r2,0(sp)
    c538:	000ce000 	call	ce00 <__udivsi3>
    c53c:	d8c00017 	ldw	r3,0(sp)
    c540:	170b383a 	mul	r5,r2,fp
    c544:	8c7fffcc 	andi	r17,r17,65535
    c548:	1806943a 	slli	r3,r3,16
    c54c:	1c46b03a 	or	r3,r3,r17
    c550:	1940042e 	bgeu	r3,r5,c564 <__udivdi3+0x3d0>
    c554:	1dc7883a 	add	r3,r3,r23
    c558:	113fffc4 	addi	r4,r2,-1
    c55c:	1dc06b2e 	bgeu	r3,r23,c70c <__udivdi3+0x578>
    c560:	2005883a 	mov	r2,r4
    c564:	8020943a 	slli	r16,r16,16
    c568:	a9ffffcc 	andi	r7,r21,65535
    c56c:	a82ad43a 	srli	r21,r21,16
    c570:	1404b03a 	or	r2,r2,r16
    c574:	113fffcc 	andi	r4,r2,65535
    c578:	100cd43a 	srli	r6,r2,16
    c57c:	21d3383a 	mul	r9,r4,r7
    c580:	2549383a 	mul	r4,r4,r21
    c584:	31cf383a 	mul	r7,r6,r7
    c588:	4810d43a 	srli	r8,r9,16
    c58c:	1947c83a 	sub	r3,r3,r5
    c590:	3909883a 	add	r4,r7,r4
    c594:	2209883a 	add	r4,r4,r8
    c598:	354d383a 	mul	r6,r6,r21
    c59c:	21c0022e 	bgeu	r4,r7,c5a8 <__udivdi3+0x414>
    c5a0:	01400074 	movhi	r5,1
    c5a4:	314d883a 	add	r6,r6,r5
    c5a8:	202ad43a 	srli	r21,r4,16
    c5ac:	354d883a 	add	r6,r6,r21
    c5b0:	19803f36 	bltu	r3,r6,c6b0 <__udivdi3+0x51c>
    c5b4:	19803926 	beq	r3,r6,c69c <__udivdi3+0x508>
    c5b8:	0007883a 	mov	r3,zero
    c5bc:	003fa006 	br	c440 <__alt_mem_Flash_flash_data+0xf400c440>
    c5c0:	90e4983a 	sll	r18,r18,r3
    c5c4:	80aad83a 	srl	r21,r16,r2
    c5c8:	80e0983a 	sll	r16,r16,r3
    c5cc:	9028d43a 	srli	r20,r18,16
    c5d0:	9884d83a 	srl	r2,r19,r2
    c5d4:	a809883a 	mov	r4,r21
    c5d8:	a00b883a 	mov	r5,r20
    c5dc:	80acb03a 	or	r22,r16,r2
    c5e0:	98e2983a 	sll	r17,r19,r3
    c5e4:	000ce080 	call	ce08 <__umodsi3>
    c5e8:	a809883a 	mov	r4,r21
    c5ec:	a00b883a 	mov	r5,r20
    c5f0:	1021883a 	mov	r16,r2
    c5f4:	000ce000 	call	ce00 <__udivsi3>
    c5f8:	957fffcc 	andi	r21,r18,65535
    c5fc:	8020943a 	slli	r16,r16,16
    c600:	b00ad43a 	srli	r5,r22,16
    c604:	1567383a 	mul	r19,r2,r21
    c608:	102f883a 	mov	r23,r2
    c60c:	8148b03a 	or	r4,r16,r5
    c610:	24c0062e 	bgeu	r4,r19,c62c <__udivdi3+0x498>
    c614:	2489883a 	add	r4,r4,r18
    c618:	10bfffc4 	addi	r2,r2,-1
    c61c:	24804536 	bltu	r4,r18,c734 <__udivdi3+0x5a0>
    c620:	24c0442e 	bgeu	r4,r19,c734 <__udivdi3+0x5a0>
    c624:	bdffff84 	addi	r23,r23,-2
    c628:	2489883a 	add	r4,r4,r18
    c62c:	24e7c83a 	sub	r19,r4,r19
    c630:	9809883a 	mov	r4,r19
    c634:	a00b883a 	mov	r5,r20
    c638:	000ce080 	call	ce08 <__umodsi3>
    c63c:	1021883a 	mov	r16,r2
    c640:	9809883a 	mov	r4,r19
    c644:	a00b883a 	mov	r5,r20
    c648:	000ce000 	call	ce00 <__udivsi3>
    c64c:	8020943a 	slli	r16,r16,16
    c650:	1007883a 	mov	r3,r2
    c654:	1545383a 	mul	r2,r2,r21
    c658:	b13fffcc 	andi	r4,r22,65535
    c65c:	8108b03a 	or	r4,r16,r4
    c660:	2080062e 	bgeu	r4,r2,c67c <__udivdi3+0x4e8>
    c664:	2489883a 	add	r4,r4,r18
    c668:	197fffc4 	addi	r5,r3,-1
    c66c:	24802f36 	bltu	r4,r18,c72c <__udivdi3+0x598>
    c670:	20802e2e 	bgeu	r4,r2,c72c <__udivdi3+0x598>
    c674:	18ffff84 	addi	r3,r3,-2
    c678:	2489883a 	add	r4,r4,r18
    c67c:	b82e943a 	slli	r23,r23,16
    c680:	20a1c83a 	sub	r16,r4,r2
    c684:	1dc6b03a 	or	r3,r3,r23
    c688:	003f4006 	br	c38c <__alt_mem_Flash_flash_data+0xf400c38c>
    c68c:	2005883a 	mov	r2,r4
    c690:	003f6606 	br	c42c <__alt_mem_Flash_flash_data+0xf400c42c>
    c694:	1805883a 	mov	r2,r3
    c698:	003f0a06 	br	c2c4 <__alt_mem_Flash_flash_data+0xf400c2c4>
    c69c:	2006943a 	slli	r3,r4,16
    c6a0:	9c88983a 	sll	r4,r19,r18
    c6a4:	4a7fffcc 	andi	r9,r9,65535
    c6a8:	1a47883a 	add	r3,r3,r9
    c6ac:	20ffc22e 	bgeu	r4,r3,c5b8 <__alt_mem_Flash_flash_data+0xf400c5b8>
    c6b0:	10bfffc4 	addi	r2,r2,-1
    c6b4:	003fc006 	br	c5b8 <__alt_mem_Flash_flash_data+0xf400c5b8>
    c6b8:	00c00404 	movi	r3,16
    c6bc:	180b883a 	mov	r5,r3
    c6c0:	003f0c06 	br	c2f4 <__alt_mem_Flash_flash_data+0xf400c2f4>
    c6c4:	0007883a 	mov	r3,zero
    c6c8:	000b883a 	mov	r5,zero
    c6cc:	003f0906 	br	c2f4 <__alt_mem_Flash_flash_data+0xf400c2f4>
    c6d0:	00800404 	movi	r2,16
    c6d4:	1007883a 	mov	r3,r2
    c6d8:	003ec606 	br	c1f4 <__alt_mem_Flash_flash_data+0xf400c1f4>
    c6dc:	00800404 	movi	r2,16
    c6e0:	1007883a 	mov	r3,r2
    c6e4:	003f1c06 	br	c358 <__alt_mem_Flash_flash_data+0xf400c358>
    c6e8:	0005883a 	mov	r2,zero
    c6ec:	0007883a 	mov	r3,zero
    c6f0:	003f1906 	br	c358 <__alt_mem_Flash_flash_data+0xf400c358>
    c6f4:	0005883a 	mov	r2,zero
    c6f8:	0007883a 	mov	r3,zero
    c6fc:	003ebd06 	br	c1f4 <__alt_mem_Flash_flash_data+0xf400c1f4>
    c700:	0007883a 	mov	r3,zero
    c704:	00800044 	movi	r2,1
    c708:	003f4d06 	br	c440 <__alt_mem_Flash_flash_data+0xf400c440>
    c70c:	197f942e 	bgeu	r3,r5,c560 <__alt_mem_Flash_flash_data+0xf400c560>
    c710:	10bfff84 	addi	r2,r2,-2
    c714:	1dc7883a 	add	r3,r3,r23
    c718:	003f9206 	br	c564 <__alt_mem_Flash_flash_data+0xf400c564>
    c71c:	15bf7e2e 	bgeu	r2,r22,c518 <__alt_mem_Flash_flash_data+0xf400c518>
    c720:	843fff84 	addi	r16,r16,-2
    c724:	15c5883a 	add	r2,r2,r23
    c728:	003f7c06 	br	c51c <__alt_mem_Flash_flash_data+0xf400c51c>
    c72c:	2807883a 	mov	r3,r5
    c730:	003fd206 	br	c67c <__alt_mem_Flash_flash_data+0xf400c67c>
    c734:	102f883a 	mov	r23,r2
    c738:	003fbc06 	br	c62c <__alt_mem_Flash_flash_data+0xf400c62c>
    c73c:	843fff84 	addi	r16,r16,-2
    c740:	2489883a 	add	r4,r4,r18
    c744:	003f2506 	br	c3dc <__alt_mem_Flash_flash_data+0xf400c3dc>
    c748:	843fff84 	addi	r16,r16,-2
    c74c:	1485883a 	add	r2,r2,r18
    c750:	003eca06 	br	c27c <__alt_mem_Flash_flash_data+0xf400c27c>

0000c754 <__umoddi3>:
    c754:	defff404 	addi	sp,sp,-48
    c758:	ddc00915 	stw	r23,36(sp)
    c75c:	dc400315 	stw	r17,12(sp)
    c760:	dc000215 	stw	r16,8(sp)
    c764:	dfc00b15 	stw	ra,44(sp)
    c768:	df000a15 	stw	fp,40(sp)
    c76c:	dd800815 	stw	r22,32(sp)
    c770:	dd400715 	stw	r21,28(sp)
    c774:	dd000615 	stw	r20,24(sp)
    c778:	dcc00515 	stw	r19,20(sp)
    c77c:	dc800415 	stw	r18,16(sp)
    c780:	2021883a 	mov	r16,r4
    c784:	2823883a 	mov	r17,r5
    c788:	282f883a 	mov	r23,r5
    c78c:	3800381e 	bne	r7,zero,c870 <__umoddi3+0x11c>
    c790:	3027883a 	mov	r19,r6
    c794:	2029883a 	mov	r20,r4
    c798:	29804e2e 	bgeu	r5,r6,c8d4 <__umoddi3+0x180>
    c79c:	00bfffd4 	movui	r2,65535
    c7a0:	11809c36 	bltu	r2,r6,ca14 <__umoddi3+0x2c0>
    c7a4:	00803fc4 	movi	r2,255
    c7a8:	11813b2e 	bgeu	r2,r6,cc98 <__umoddi3+0x544>
    c7ac:	01400204 	movi	r5,8
    c7b0:	2805883a 	mov	r2,r5
    c7b4:	314ad83a 	srl	r5,r6,r5
    c7b8:	00c000b4 	movhi	r3,2
    c7bc:	18f28704 	addi	r3,r3,-13796
    c7c0:	194b883a 	add	r5,r3,r5
    c7c4:	29000003 	ldbu	r4,0(r5)
    c7c8:	2089883a 	add	r4,r4,r2
    c7cc:	00800804 	movi	r2,32
    c7d0:	1105c83a 	sub	r2,r2,r4
    c7d4:	1000ec26 	beq	r2,zero,cb88 <__umoddi3+0x434>
    c7d8:	88a2983a 	sll	r17,r17,r2
    c7dc:	8108d83a 	srl	r4,r16,r4
    c7e0:	30a6983a 	sll	r19,r6,r2
    c7e4:	80a8983a 	sll	r20,r16,r2
    c7e8:	1025883a 	mov	r18,r2
    c7ec:	892eb03a 	or	r23,r17,r4
    c7f0:	982cd43a 	srli	r22,r19,16
    c7f4:	b809883a 	mov	r4,r23
    c7f8:	9d7fffcc 	andi	r21,r19,65535
    c7fc:	b00b883a 	mov	r5,r22
    c800:	000ce080 	call	ce08 <__umodsi3>
    c804:	b809883a 	mov	r4,r23
    c808:	b00b883a 	mov	r5,r22
    c80c:	1021883a 	mov	r16,r2
    c810:	000ce000 	call	ce00 <__udivsi3>
    c814:	8020943a 	slli	r16,r16,16
    c818:	a00cd43a 	srli	r6,r20,16
    c81c:	1545383a 	mul	r2,r2,r21
    c820:	8188b03a 	or	r4,r16,r6
    c824:	2080042e 	bgeu	r4,r2,c838 <__umoddi3+0xe4>
    c828:	24c9883a 	add	r4,r4,r19
    c82c:	24c00236 	bltu	r4,r19,c838 <__umoddi3+0xe4>
    c830:	2080012e 	bgeu	r4,r2,c838 <__umoddi3+0xe4>
    c834:	24c9883a 	add	r4,r4,r19
    c838:	20a3c83a 	sub	r17,r4,r2
    c83c:	8809883a 	mov	r4,r17
    c840:	b00b883a 	mov	r5,r22
    c844:	000ce080 	call	ce08 <__umodsi3>
    c848:	8809883a 	mov	r4,r17
    c84c:	b00b883a 	mov	r5,r22
    c850:	1021883a 	mov	r16,r2
    c854:	000ce000 	call	ce00 <__udivsi3>
    c858:	8006943a 	slli	r3,r16,16
    c85c:	1545383a 	mul	r2,r2,r21
    c860:	a13fffcc 	andi	r4,r20,65535
    c864:	1906b03a 	or	r3,r3,r4
    c868:	1880532e 	bgeu	r3,r2,c9b8 <__umoddi3+0x264>
    c86c:	00004e06 	br	c9a8 <__umoddi3+0x254>
    c870:	29c05536 	bltu	r5,r7,c9c8 <__umoddi3+0x274>
    c874:	00bfffd4 	movui	r2,65535
    c878:	11c0612e 	bgeu	r2,r7,ca00 <__umoddi3+0x2ac>
    c87c:	00804034 	movhi	r2,256
    c880:	10bfffc4 	addi	r2,r2,-1
    c884:	11c0f82e 	bgeu	r2,r7,cc68 <__umoddi3+0x514>
    c888:	01400604 	movi	r5,24
    c88c:	282b883a 	mov	r21,r5
    c890:	394ad83a 	srl	r5,r7,r5
    c894:	00c000b4 	movhi	r3,2
    c898:	18f28704 	addi	r3,r3,-13796
    c89c:	194b883a 	add	r5,r3,r5
    c8a0:	28800003 	ldbu	r2,0(r5)
    c8a4:	00c00804 	movi	r3,32
    c8a8:	156b883a 	add	r21,r2,r21
    c8ac:	1d69c83a 	sub	r20,r3,r21
    c8b0:	a000631e 	bne	r20,zero,ca40 <__umoddi3+0x2ec>
    c8b4:	3c400136 	bltu	r7,r17,c8bc <__umoddi3+0x168>
    c8b8:	81810436 	bltu	r16,r6,cccc <__umoddi3+0x578>
    c8bc:	8185c83a 	sub	r2,r16,r6
    c8c0:	89e3c83a 	sub	r17,r17,r7
    c8c4:	8087803a 	cmpltu	r3,r16,r2
    c8c8:	88efc83a 	sub	r23,r17,r3
    c8cc:	b807883a 	mov	r3,r23
    c8d0:	00003f06 	br	c9d0 <__umoddi3+0x27c>
    c8d4:	3000041e 	bne	r6,zero,c8e8 <__umoddi3+0x194>
    c8d8:	01000044 	movi	r4,1
    c8dc:	000b883a 	mov	r5,zero
    c8e0:	000ce000 	call	ce00 <__udivsi3>
    c8e4:	1027883a 	mov	r19,r2
    c8e8:	00bfffd4 	movui	r2,65535
    c8ec:	14c04f2e 	bgeu	r2,r19,ca2c <__umoddi3+0x2d8>
    c8f0:	00804034 	movhi	r2,256
    c8f4:	10bfffc4 	addi	r2,r2,-1
    c8f8:	14c0e42e 	bgeu	r2,r19,cc8c <__umoddi3+0x538>
    c8fc:	00800604 	movi	r2,24
    c900:	1007883a 	mov	r3,r2
    c904:	9884d83a 	srl	r2,r19,r2
    c908:	010000b4 	movhi	r4,2
    c90c:	21328704 	addi	r4,r4,-13796
    c910:	2085883a 	add	r2,r4,r2
    c914:	11000003 	ldbu	r4,0(r2)
    c918:	00800804 	movi	r2,32
    c91c:	20c7883a 	add	r3,r4,r3
    c920:	10c5c83a 	sub	r2,r2,r3
    c924:	10009a1e 	bne	r2,zero,cb90 <__umoddi3+0x43c>
    c928:	982cd43a 	srli	r22,r19,16
    c92c:	8ce3c83a 	sub	r17,r17,r19
    c930:	9c3fffcc 	andi	r16,r19,65535
    c934:	0025883a 	mov	r18,zero
    c938:	8809883a 	mov	r4,r17
    c93c:	b00b883a 	mov	r5,r22
    c940:	000ce080 	call	ce08 <__umodsi3>
    c944:	8809883a 	mov	r4,r17
    c948:	b00b883a 	mov	r5,r22
    c94c:	102b883a 	mov	r21,r2
    c950:	000ce000 	call	ce00 <__udivsi3>
    c954:	a806943a 	slli	r3,r21,16
    c958:	a008d43a 	srli	r4,r20,16
    c95c:	1405383a 	mul	r2,r2,r16
    c960:	190cb03a 	or	r6,r3,r4
    c964:	3080032e 	bgeu	r6,r2,c974 <__umoddi3+0x220>
    c968:	34cd883a 	add	r6,r6,r19
    c96c:	34c00136 	bltu	r6,r19,c974 <__umoddi3+0x220>
    c970:	3080d436 	bltu	r6,r2,ccc4 <__umoddi3+0x570>
    c974:	30abc83a 	sub	r21,r6,r2
    c978:	a809883a 	mov	r4,r21
    c97c:	b00b883a 	mov	r5,r22
    c980:	000ce080 	call	ce08 <__umodsi3>
    c984:	1023883a 	mov	r17,r2
    c988:	a809883a 	mov	r4,r21
    c98c:	b00b883a 	mov	r5,r22
    c990:	000ce000 	call	ce00 <__udivsi3>
    c994:	8822943a 	slli	r17,r17,16
    c998:	1405383a 	mul	r2,r2,r16
    c99c:	a13fffcc 	andi	r4,r20,65535
    c9a0:	8906b03a 	or	r3,r17,r4
    c9a4:	1880042e 	bgeu	r3,r2,c9b8 <__umoddi3+0x264>
    c9a8:	1cc7883a 	add	r3,r3,r19
    c9ac:	1cc00236 	bltu	r3,r19,c9b8 <__umoddi3+0x264>
    c9b0:	1880012e 	bgeu	r3,r2,c9b8 <__umoddi3+0x264>
    c9b4:	1cc7883a 	add	r3,r3,r19
    c9b8:	1887c83a 	sub	r3,r3,r2
    c9bc:	1c84d83a 	srl	r2,r3,r18
    c9c0:	0007883a 	mov	r3,zero
    c9c4:	00000206 	br	c9d0 <__umoddi3+0x27c>
    c9c8:	2005883a 	mov	r2,r4
    c9cc:	2807883a 	mov	r3,r5
    c9d0:	dfc00b17 	ldw	ra,44(sp)
    c9d4:	df000a17 	ldw	fp,40(sp)
    c9d8:	ddc00917 	ldw	r23,36(sp)
    c9dc:	dd800817 	ldw	r22,32(sp)
    c9e0:	dd400717 	ldw	r21,28(sp)
    c9e4:	dd000617 	ldw	r20,24(sp)
    c9e8:	dcc00517 	ldw	r19,20(sp)
    c9ec:	dc800417 	ldw	r18,16(sp)
    c9f0:	dc400317 	ldw	r17,12(sp)
    c9f4:	dc000217 	ldw	r16,8(sp)
    c9f8:	dec00c04 	addi	sp,sp,48
    c9fc:	f800283a 	ret
    ca00:	00803fc4 	movi	r2,255
    ca04:	11c0952e 	bgeu	r2,r7,cc5c <__umoddi3+0x508>
    ca08:	01400204 	movi	r5,8
    ca0c:	282b883a 	mov	r21,r5
    ca10:	003f9f06 	br	c890 <__alt_mem_Flash_flash_data+0xf400c890>
    ca14:	00804034 	movhi	r2,256
    ca18:	10bfffc4 	addi	r2,r2,-1
    ca1c:	1180952e 	bgeu	r2,r6,cc74 <__umoddi3+0x520>
    ca20:	01400604 	movi	r5,24
    ca24:	2805883a 	mov	r2,r5
    ca28:	003f6206 	br	c7b4 <__alt_mem_Flash_flash_data+0xf400c7b4>
    ca2c:	00803fc4 	movi	r2,255
    ca30:	14c0932e 	bgeu	r2,r19,cc80 <__umoddi3+0x52c>
    ca34:	00800204 	movi	r2,8
    ca38:	1007883a 	mov	r3,r2
    ca3c:	003fb106 	br	c904 <__alt_mem_Flash_flash_data+0xf400c904>
    ca40:	3548d83a 	srl	r4,r6,r21
    ca44:	3d0e983a 	sll	r7,r7,r20
    ca48:	8d10983a 	sll	r8,r17,r20
    ca4c:	8d6cd83a 	srl	r22,r17,r21
    ca50:	3922b03a 	or	r17,r7,r4
    ca54:	882ed43a 	srli	r23,r17,16
    ca58:	8564d83a 	srl	r18,r16,r21
    ca5c:	b009883a 	mov	r4,r22
    ca60:	b80b883a 	mov	r5,r23
    ca64:	44a4b03a 	or	r18,r8,r18
    ca68:	3526983a 	sll	r19,r6,r20
    ca6c:	000ce080 	call	ce08 <__umodsi3>
    ca70:	b009883a 	mov	r4,r22
    ca74:	b80b883a 	mov	r5,r23
    ca78:	1039883a 	mov	fp,r2
    ca7c:	000ce000 	call	ce00 <__udivsi3>
    ca80:	102d883a 	mov	r22,r2
    ca84:	8a3fffcc 	andi	r8,r17,65535
    ca88:	e004943a 	slli	r2,fp,16
    ca8c:	900cd43a 	srli	r6,r18,16
    ca90:	b239383a 	mul	fp,r22,r8
    ca94:	8520983a 	sll	r16,r16,r20
    ca98:	118ab03a 	or	r5,r2,r6
    ca9c:	2f00042e 	bgeu	r5,fp,cab0 <__umoddi3+0x35c>
    caa0:	2c4b883a 	add	r5,r5,r17
    caa4:	b0bfffc4 	addi	r2,r22,-1
    caa8:	2c40822e 	bgeu	r5,r17,ccb4 <__umoddi3+0x560>
    caac:	102d883a 	mov	r22,r2
    cab0:	2f39c83a 	sub	fp,r5,fp
    cab4:	e009883a 	mov	r4,fp
    cab8:	b80b883a 	mov	r5,r23
    cabc:	da000115 	stw	r8,4(sp)
    cac0:	000ce080 	call	ce08 <__umodsi3>
    cac4:	e009883a 	mov	r4,fp
    cac8:	b80b883a 	mov	r5,r23
    cacc:	d8800015 	stw	r2,0(sp)
    cad0:	000ce000 	call	ce00 <__udivsi3>
    cad4:	d9800017 	ldw	r6,0(sp)
    cad8:	da000117 	ldw	r8,4(sp)
    cadc:	94bfffcc 	andi	r18,r18,65535
    cae0:	300c943a 	slli	r6,r6,16
    cae4:	1209383a 	mul	r4,r2,r8
    cae8:	3490b03a 	or	r8,r6,r18
    caec:	4100042e 	bgeu	r8,r4,cb00 <__umoddi3+0x3ac>
    caf0:	4451883a 	add	r8,r8,r17
    caf4:	10ffffc4 	addi	r3,r2,-1
    caf8:	44406a2e 	bgeu	r8,r17,cca4 <__umoddi3+0x550>
    cafc:	1805883a 	mov	r2,r3
    cb00:	b012943a 	slli	r9,r22,16
    cb04:	9abfffcc 	andi	r10,r19,65535
    cb08:	980ed43a 	srli	r7,r19,16
    cb0c:	124ab03a 	or	r5,r2,r9
    cb10:	2a7fffcc 	andi	r9,r5,65535
    cb14:	280ad43a 	srli	r5,r5,16
    cb18:	4a8d383a 	mul	r6,r9,r10
    cb1c:	49d3383a 	mul	r9,r9,r7
    cb20:	2a95383a 	mul	r10,r5,r10
    cb24:	3004d43a 	srli	r2,r6,16
    cb28:	4111c83a 	sub	r8,r8,r4
    cb2c:	5253883a 	add	r9,r10,r9
    cb30:	4893883a 	add	r9,r9,r2
    cb34:	29cb383a 	mul	r5,r5,r7
    cb38:	4a80022e 	bgeu	r9,r10,cb44 <__umoddi3+0x3f0>
    cb3c:	00800074 	movhi	r2,1
    cb40:	288b883a 	add	r5,r5,r2
    cb44:	4808d43a 	srli	r4,r9,16
    cb48:	4812943a 	slli	r9,r9,16
    cb4c:	31bfffcc 	andi	r6,r6,65535
    cb50:	290b883a 	add	r5,r5,r4
    cb54:	498d883a 	add	r6,r9,r6
    cb58:	41403a36 	bltu	r8,r5,cc44 <__umoddi3+0x4f0>
    cb5c:	41405d26 	beq	r8,r5,ccd4 <__umoddi3+0x580>
    cb60:	4149c83a 	sub	r4,r8,r5
    cb64:	300f883a 	mov	r7,r6
    cb68:	81cfc83a 	sub	r7,r16,r7
    cb6c:	81c7803a 	cmpltu	r3,r16,r7
    cb70:	20c7c83a 	sub	r3,r4,r3
    cb74:	1d44983a 	sll	r2,r3,r21
    cb78:	3d0ed83a 	srl	r7,r7,r20
    cb7c:	1d06d83a 	srl	r3,r3,r20
    cb80:	11c4b03a 	or	r2,r2,r7
    cb84:	003f9206 	br	c9d0 <__alt_mem_Flash_flash_data+0xf400c9d0>
    cb88:	0025883a 	mov	r18,zero
    cb8c:	003f1806 	br	c7f0 <__alt_mem_Flash_flash_data+0xf400c7f0>
    cb90:	98a6983a 	sll	r19,r19,r2
    cb94:	88e8d83a 	srl	r20,r17,r3
    cb98:	80c6d83a 	srl	r3,r16,r3
    cb9c:	982cd43a 	srli	r22,r19,16
    cba0:	88a2983a 	sll	r17,r17,r2
    cba4:	a009883a 	mov	r4,r20
    cba8:	b00b883a 	mov	r5,r22
    cbac:	88eab03a 	or	r21,r17,r3
    cbb0:	1025883a 	mov	r18,r2
    cbb4:	000ce080 	call	ce08 <__umodsi3>
    cbb8:	a009883a 	mov	r4,r20
    cbbc:	b00b883a 	mov	r5,r22
    cbc0:	1023883a 	mov	r17,r2
    cbc4:	000ce000 	call	ce00 <__udivsi3>
    cbc8:	9f3fffcc 	andi	fp,r19,65535
    cbcc:	8822943a 	slli	r17,r17,16
    cbd0:	a80ad43a 	srli	r5,r21,16
    cbd4:	1705383a 	mul	r2,r2,fp
    cbd8:	84a8983a 	sll	r20,r16,r18
    cbdc:	8948b03a 	or	r4,r17,r5
    cbe0:	2080042e 	bgeu	r4,r2,cbf4 <__umoddi3+0x4a0>
    cbe4:	24c9883a 	add	r4,r4,r19
    cbe8:	24c00236 	bltu	r4,r19,cbf4 <__umoddi3+0x4a0>
    cbec:	2080012e 	bgeu	r4,r2,cbf4 <__umoddi3+0x4a0>
    cbf0:	24c9883a 	add	r4,r4,r19
    cbf4:	20afc83a 	sub	r23,r4,r2
    cbf8:	b809883a 	mov	r4,r23
    cbfc:	b00b883a 	mov	r5,r22
    cc00:	000ce080 	call	ce08 <__umodsi3>
    cc04:	1023883a 	mov	r17,r2
    cc08:	b809883a 	mov	r4,r23
    cc0c:	b00b883a 	mov	r5,r22
    cc10:	000ce000 	call	ce00 <__udivsi3>
    cc14:	8822943a 	slli	r17,r17,16
    cc18:	1705383a 	mul	r2,r2,fp
    cc1c:	a93fffcc 	andi	r4,r21,65535
    cc20:	8908b03a 	or	r4,r17,r4
    cc24:	2080042e 	bgeu	r4,r2,cc38 <__umoddi3+0x4e4>
    cc28:	24c9883a 	add	r4,r4,r19
    cc2c:	24c00236 	bltu	r4,r19,cc38 <__umoddi3+0x4e4>
    cc30:	2080012e 	bgeu	r4,r2,cc38 <__umoddi3+0x4e4>
    cc34:	24c9883a 	add	r4,r4,r19
    cc38:	20a3c83a 	sub	r17,r4,r2
    cc3c:	e021883a 	mov	r16,fp
    cc40:	003f3d06 	br	c938 <__alt_mem_Flash_flash_data+0xf400c938>
    cc44:	34cfc83a 	sub	r7,r6,r19
    cc48:	2c4bc83a 	sub	r5,r5,r17
    cc4c:	31cd803a 	cmpltu	r6,r6,r7
    cc50:	298dc83a 	sub	r6,r5,r6
    cc54:	4189c83a 	sub	r4,r8,r6
    cc58:	003fc306 	br	cb68 <__alt_mem_Flash_flash_data+0xf400cb68>
    cc5c:	000b883a 	mov	r5,zero
    cc60:	002b883a 	mov	r21,zero
    cc64:	003f0a06 	br	c890 <__alt_mem_Flash_flash_data+0xf400c890>
    cc68:	01400404 	movi	r5,16
    cc6c:	282b883a 	mov	r21,r5
    cc70:	003f0706 	br	c890 <__alt_mem_Flash_flash_data+0xf400c890>
    cc74:	01400404 	movi	r5,16
    cc78:	2805883a 	mov	r2,r5
    cc7c:	003ecd06 	br	c7b4 <__alt_mem_Flash_flash_data+0xf400c7b4>
    cc80:	0005883a 	mov	r2,zero
    cc84:	0007883a 	mov	r3,zero
    cc88:	003f1e06 	br	c904 <__alt_mem_Flash_flash_data+0xf400c904>
    cc8c:	00800404 	movi	r2,16
    cc90:	1007883a 	mov	r3,r2
    cc94:	003f1b06 	br	c904 <__alt_mem_Flash_flash_data+0xf400c904>
    cc98:	000b883a 	mov	r5,zero
    cc9c:	0005883a 	mov	r2,zero
    cca0:	003ec406 	br	c7b4 <__alt_mem_Flash_flash_data+0xf400c7b4>
    cca4:	413f952e 	bgeu	r8,r4,cafc <__alt_mem_Flash_flash_data+0xf400cafc>
    cca8:	10bfff84 	addi	r2,r2,-2
    ccac:	4451883a 	add	r8,r8,r17
    ccb0:	003f9306 	br	cb00 <__alt_mem_Flash_flash_data+0xf400cb00>
    ccb4:	2f3f7d2e 	bgeu	r5,fp,caac <__alt_mem_Flash_flash_data+0xf400caac>
    ccb8:	b5bfff84 	addi	r22,r22,-2
    ccbc:	2c4b883a 	add	r5,r5,r17
    ccc0:	003f7b06 	br	cab0 <__alt_mem_Flash_flash_data+0xf400cab0>
    ccc4:	34cd883a 	add	r6,r6,r19
    ccc8:	003f2a06 	br	c974 <__alt_mem_Flash_flash_data+0xf400c974>
    cccc:	8005883a 	mov	r2,r16
    ccd0:	003efe06 	br	c8cc <__alt_mem_Flash_flash_data+0xf400c8cc>
    ccd4:	81bfdb36 	bltu	r16,r6,cc44 <__alt_mem_Flash_flash_data+0xf400cc44>
    ccd8:	300f883a 	mov	r7,r6
    ccdc:	0009883a 	mov	r4,zero
    cce0:	003fa106 	br	cb68 <__alt_mem_Flash_flash_data+0xf400cb68>

0000cce4 <udivmodsi4>:
    cce4:	2900182e 	bgeu	r5,r4,cd48 <udivmodsi4+0x64>
    cce8:	28001716 	blt	r5,zero,cd48 <udivmodsi4+0x64>
    ccec:	00800804 	movi	r2,32
    ccf0:	00c00044 	movi	r3,1
    ccf4:	00000206 	br	cd00 <udivmodsi4+0x1c>
    ccf8:	10001126 	beq	r2,zero,cd40 <udivmodsi4+0x5c>
    ccfc:	28000516 	blt	r5,zero,cd14 <udivmodsi4+0x30>
    cd00:	294b883a 	add	r5,r5,r5
    cd04:	10bfffc4 	addi	r2,r2,-1
    cd08:	18c7883a 	add	r3,r3,r3
    cd0c:	293ffa36 	bltu	r5,r4,ccf8 <__alt_mem_Flash_flash_data+0xf400ccf8>
    cd10:	18000b26 	beq	r3,zero,cd40 <udivmodsi4+0x5c>
    cd14:	0005883a 	mov	r2,zero
    cd18:	21400236 	bltu	r4,r5,cd24 <udivmodsi4+0x40>
    cd1c:	2149c83a 	sub	r4,r4,r5
    cd20:	10c4b03a 	or	r2,r2,r3
    cd24:	1806d07a 	srli	r3,r3,1
    cd28:	280ad07a 	srli	r5,r5,1
    cd2c:	183ffa1e 	bne	r3,zero,cd18 <__alt_mem_Flash_flash_data+0xf400cd18>
    cd30:	3000011e 	bne	r6,zero,cd38 <udivmodsi4+0x54>
    cd34:	f800283a 	ret
    cd38:	2005883a 	mov	r2,r4
    cd3c:	f800283a 	ret
    cd40:	0005883a 	mov	r2,zero
    cd44:	003ffa06 	br	cd30 <__alt_mem_Flash_flash_data+0xf400cd30>
    cd48:	00c00044 	movi	r3,1
    cd4c:	003ff106 	br	cd14 <__alt_mem_Flash_flash_data+0xf400cd14>

0000cd50 <__divsi3>:
    cd50:	defffe04 	addi	sp,sp,-8
    cd54:	dfc00115 	stw	ra,4(sp)
    cd58:	dc000015 	stw	r16,0(sp)
    cd5c:	20000b16 	blt	r4,zero,cd8c <__divsi3+0x3c>
    cd60:	0021883a 	mov	r16,zero
    cd64:	28000c16 	blt	r5,zero,cd98 <__divsi3+0x48>
    cd68:	000d883a 	mov	r6,zero
    cd6c:	000cce40 	call	cce4 <udivmodsi4>
    cd70:	0407c83a 	sub	r3,zero,r16
    cd74:	1884f03a 	xor	r2,r3,r2
    cd78:	1405883a 	add	r2,r2,r16
    cd7c:	dfc00117 	ldw	ra,4(sp)
    cd80:	dc000017 	ldw	r16,0(sp)
    cd84:	dec00204 	addi	sp,sp,8
    cd88:	f800283a 	ret
    cd8c:	0109c83a 	sub	r4,zero,r4
    cd90:	04000044 	movi	r16,1
    cd94:	283ff40e 	bge	r5,zero,cd68 <__alt_mem_Flash_flash_data+0xf400cd68>
    cd98:	014bc83a 	sub	r5,zero,r5
    cd9c:	8400005c 	xori	r16,r16,1
    cda0:	003ff106 	br	cd68 <__alt_mem_Flash_flash_data+0xf400cd68>

0000cda4 <__modsi3>:
    cda4:	defffd04 	addi	sp,sp,-12
    cda8:	dfc00215 	stw	ra,8(sp)
    cdac:	dc400115 	stw	r17,4(sp)
    cdb0:	dc000015 	stw	r16,0(sp)
    cdb4:	20000c16 	blt	r4,zero,cde8 <__modsi3+0x44>
    cdb8:	0023883a 	mov	r17,zero
    cdbc:	0021883a 	mov	r16,zero
    cdc0:	28000d16 	blt	r5,zero,cdf8 <__modsi3+0x54>
    cdc4:	01800044 	movi	r6,1
    cdc8:	000cce40 	call	cce4 <udivmodsi4>
    cdcc:	1404f03a 	xor	r2,r2,r16
    cdd0:	8885883a 	add	r2,r17,r2
    cdd4:	dfc00217 	ldw	ra,8(sp)
    cdd8:	dc400117 	ldw	r17,4(sp)
    cddc:	dc000017 	ldw	r16,0(sp)
    cde0:	dec00304 	addi	sp,sp,12
    cde4:	f800283a 	ret
    cde8:	0109c83a 	sub	r4,zero,r4
    cdec:	04400044 	movi	r17,1
    cdf0:	043fffc4 	movi	r16,-1
    cdf4:	283ff30e 	bge	r5,zero,cdc4 <__alt_mem_Flash_flash_data+0xf400cdc4>
    cdf8:	014bc83a 	sub	r5,zero,r5
    cdfc:	003ff106 	br	cdc4 <__alt_mem_Flash_flash_data+0xf400cdc4>

0000ce00 <__udivsi3>:
    ce00:	000d883a 	mov	r6,zero
    ce04:	000cce41 	jmpi	cce4 <udivmodsi4>

0000ce08 <__umodsi3>:
    ce08:	01800044 	movi	r6,1
    ce0c:	000cce41 	jmpi	cce4 <udivmodsi4>

0000ce10 <__adddf3>:
    ce10:	02000434 	movhi	r8,16
    ce14:	423fffc4 	addi	r8,r8,-1
    ce18:	defffb04 	addi	sp,sp,-20
    ce1c:	2a12703a 	and	r9,r5,r8
    ce20:	2806d7fa 	srli	r3,r5,31
    ce24:	3a10703a 	and	r8,r7,r8
    ce28:	3804d53a 	srli	r2,r7,20
    ce2c:	3014d77a 	srli	r10,r6,29
    ce30:	dc000015 	stw	r16,0(sp)
    ce34:	481290fa 	slli	r9,r9,3
    ce38:	2820d53a 	srli	r16,r5,20
    ce3c:	401090fa 	slli	r8,r8,3
    ce40:	200ad77a 	srli	r5,r4,29
    ce44:	380ed7fa 	srli	r7,r7,31
    ce48:	dc800215 	stw	r18,8(sp)
    ce4c:	dc400115 	stw	r17,4(sp)
    ce50:	dfc00415 	stw	ra,16(sp)
    ce54:	dcc00315 	stw	r19,12(sp)
    ce58:	1c803fcc 	andi	r18,r3,255
    ce5c:	8401ffcc 	andi	r16,r16,2047
    ce60:	494ab03a 	or	r5,r9,r5
    ce64:	202290fa 	slli	r17,r4,3
    ce68:	1081ffcc 	andi	r2,r2,2047
    ce6c:	4290b03a 	or	r8,r8,r10
    ce70:	300c90fa 	slli	r6,r6,3
    ce74:	91c07026 	beq	r18,r7,d038 <__adddf3+0x228>
    ce78:	8087c83a 	sub	r3,r16,r2
    ce7c:	00c0b30e 	bge	zero,r3,d14c <__adddf3+0x33c>
    ce80:	10002a1e 	bne	r2,zero,cf2c <__adddf3+0x11c>
    ce84:	4184b03a 	or	r2,r8,r6
    ce88:	1000991e 	bne	r2,zero,d0f0 <__adddf3+0x2e0>
    ce8c:	888001cc 	andi	r2,r17,7
    ce90:	10005b26 	beq	r2,zero,d000 <__adddf3+0x1f0>
    ce94:	88c003cc 	andi	r3,r17,15
    ce98:	00800104 	movi	r2,4
    ce9c:	18805826 	beq	r3,r2,d000 <__adddf3+0x1f0>
    cea0:	89800104 	addi	r6,r17,4
    cea4:	3463803a 	cmpltu	r17,r6,r17
    cea8:	2c4b883a 	add	r5,r5,r17
    ceac:	2880202c 	andhi	r2,r5,128
    ceb0:	9007883a 	mov	r3,r18
    ceb4:	3023883a 	mov	r17,r6
    ceb8:	10005426 	beq	r2,zero,d00c <__adddf3+0x1fc>
    cebc:	84000044 	addi	r16,r16,1
    cec0:	0081ffc4 	movi	r2,2047
    cec4:	8080c126 	beq	r16,r2,d1cc <__adddf3+0x3bc>
    cec8:	013fe034 	movhi	r4,65408
    cecc:	213fffc4 	addi	r4,r4,-1
    ced0:	290a703a 	and	r5,r5,r4
    ced4:	2804977a 	slli	r2,r5,29
    ced8:	280a927a 	slli	r5,r5,9
    cedc:	8822d0fa 	srli	r17,r17,3
    cee0:	8401ffcc 	andi	r16,r16,2047
    cee4:	2808d33a 	srli	r4,r5,12
    cee8:	1444b03a 	or	r2,r2,r17
    ceec:	8401ffcc 	andi	r16,r16,2047
    cef0:	800a953a 	slli	r5,r16,20
    cef4:	18c03fcc 	andi	r3,r3,255
    cef8:	04000434 	movhi	r16,16
    cefc:	180697fa 	slli	r3,r3,31
    cf00:	843fffc4 	addi	r16,r16,-1
    cf04:	2420703a 	and	r16,r4,r16
    cf08:	8160b03a 	or	r16,r16,r5
    cf0c:	80c6b03a 	or	r3,r16,r3
    cf10:	dfc00417 	ldw	ra,16(sp)
    cf14:	dcc00317 	ldw	r19,12(sp)
    cf18:	dc800217 	ldw	r18,8(sp)
    cf1c:	dc400117 	ldw	r17,4(sp)
    cf20:	dc000017 	ldw	r16,0(sp)
    cf24:	dec00504 	addi	sp,sp,20
    cf28:	f800283a 	ret
    cf2c:	0081ffc4 	movi	r2,2047
    cf30:	80bfd626 	beq	r16,r2,ce8c <__alt_mem_Flash_flash_data+0xf400ce8c>
    cf34:	42002034 	orhi	r8,r8,128
    cf38:	00800e04 	movi	r2,56
    cf3c:	10c0a616 	blt	r2,r3,d1d8 <__adddf3+0x3c8>
    cf40:	008007c4 	movi	r2,31
    cf44:	10c0c916 	blt	r2,r3,d26c <__adddf3+0x45c>
    cf48:	00800804 	movi	r2,32
    cf4c:	10c5c83a 	sub	r2,r2,r3
    cf50:	408e983a 	sll	r7,r8,r2
    cf54:	30c8d83a 	srl	r4,r6,r3
    cf58:	3084983a 	sll	r2,r6,r2
    cf5c:	40c6d83a 	srl	r3,r8,r3
    cf60:	390cb03a 	or	r6,r7,r4
    cf64:	1004c03a 	cmpne	r2,r2,zero
    cf68:	308cb03a 	or	r6,r6,r2
    cf6c:	898dc83a 	sub	r6,r17,r6
    cf70:	89a3803a 	cmpltu	r17,r17,r6
    cf74:	28cbc83a 	sub	r5,r5,r3
    cf78:	2c4bc83a 	sub	r5,r5,r17
    cf7c:	3023883a 	mov	r17,r6
    cf80:	2880202c 	andhi	r2,r5,128
    cf84:	10006d26 	beq	r2,zero,d13c <__adddf3+0x32c>
    cf88:	04c02034 	movhi	r19,128
    cf8c:	9cffffc4 	addi	r19,r19,-1
    cf90:	2ce6703a 	and	r19,r5,r19
    cf94:	98007e26 	beq	r19,zero,d190 <__adddf3+0x380>
    cf98:	9809883a 	mov	r4,r19
    cf9c:	000f3ac0 	call	f3ac <__clzsi2>
    cfa0:	10fffe04 	addi	r3,r2,-8
    cfa4:	010007c4 	movi	r4,31
    cfa8:	20c07f16 	blt	r4,r3,d1a8 <__adddf3+0x398>
    cfac:	01400a04 	movi	r5,40
    cfb0:	2885c83a 	sub	r2,r5,r2
    cfb4:	888ad83a 	srl	r5,r17,r2
    cfb8:	98e6983a 	sll	r19,r19,r3
    cfbc:	88e2983a 	sll	r17,r17,r3
    cfc0:	2ce6b03a 	or	r19,r5,r19
    cfc4:	1c007c16 	blt	r3,r16,d1b8 <__adddf3+0x3a8>
    cfc8:	1c21c83a 	sub	r16,r3,r16
    cfcc:	81400044 	addi	r5,r16,1
    cfd0:	00c007c4 	movi	r3,31
    cfd4:	19409816 	blt	r3,r5,d238 <__adddf3+0x428>
    cfd8:	1c21c83a 	sub	r16,r3,r16
    cfdc:	8c08983a 	sll	r4,r17,r16
    cfe0:	8946d83a 	srl	r3,r17,r5
    cfe4:	9c20983a 	sll	r16,r19,r16
    cfe8:	2008c03a 	cmpne	r4,r4,zero
    cfec:	994ad83a 	srl	r5,r19,r5
    cff0:	1c06b03a 	or	r3,r3,r16
    cff4:	1922b03a 	or	r17,r3,r4
    cff8:	0021883a 	mov	r16,zero
    cffc:	003fa306 	br	ce8c <__alt_mem_Flash_flash_data+0xf400ce8c>
    d000:	2880202c 	andhi	r2,r5,128
    d004:	9007883a 	mov	r3,r18
    d008:	103fac1e 	bne	r2,zero,cebc <__alt_mem_Flash_flash_data+0xf400cebc>
    d00c:	2804977a 	slli	r2,r5,29
    d010:	8822d0fa 	srli	r17,r17,3
    d014:	0101ffc4 	movi	r4,2047
    d018:	280ad0fa 	srli	r5,r5,3
    d01c:	1444b03a 	or	r2,r2,r17
    d020:	81002c26 	beq	r16,r4,d0d4 <__adddf3+0x2c4>
    d024:	8120703a 	and	r16,r16,r4
    d028:	01000434 	movhi	r4,16
    d02c:	213fffc4 	addi	r4,r4,-1
    d030:	2908703a 	and	r4,r5,r4
    d034:	003fad06 	br	ceec <__alt_mem_Flash_flash_data+0xf400ceec>
    d038:	8089c83a 	sub	r4,r16,r2
    d03c:	01006a0e 	bge	zero,r4,d1e8 <__adddf3+0x3d8>
    d040:	10003326 	beq	r2,zero,d110 <__adddf3+0x300>
    d044:	0081ffc4 	movi	r2,2047
    d048:	80bf9026 	beq	r16,r2,ce8c <__alt_mem_Flash_flash_data+0xf400ce8c>
    d04c:	42002034 	orhi	r8,r8,128
    d050:	00800e04 	movi	r2,56
    d054:	1100b116 	blt	r2,r4,d31c <__adddf3+0x50c>
    d058:	008007c4 	movi	r2,31
    d05c:	1100e216 	blt	r2,r4,d3e8 <__adddf3+0x5d8>
    d060:	00800804 	movi	r2,32
    d064:	1105c83a 	sub	r2,r2,r4
    d068:	4092983a 	sll	r9,r8,r2
    d06c:	310ed83a 	srl	r7,r6,r4
    d070:	3084983a 	sll	r2,r6,r2
    d074:	4110d83a 	srl	r8,r8,r4
    d078:	49ccb03a 	or	r6,r9,r7
    d07c:	1004c03a 	cmpne	r2,r2,zero
    d080:	308cb03a 	or	r6,r6,r2
    d084:	344d883a 	add	r6,r6,r17
    d088:	3463803a 	cmpltu	r17,r6,r17
    d08c:	414b883a 	add	r5,r8,r5
    d090:	2c4b883a 	add	r5,r5,r17
    d094:	3023883a 	mov	r17,r6
    d098:	2880202c 	andhi	r2,r5,128
    d09c:	10002726 	beq	r2,zero,d13c <__adddf3+0x32c>
    d0a0:	84000044 	addi	r16,r16,1
    d0a4:	0081ffc4 	movi	r2,2047
    d0a8:	8080ae26 	beq	r16,r2,d364 <__adddf3+0x554>
    d0ac:	00bfe034 	movhi	r2,65408
    d0b0:	10bfffc4 	addi	r2,r2,-1
    d0b4:	288a703a 	and	r5,r5,r2
    d0b8:	880cd07a 	srli	r6,r17,1
    d0bc:	280897fa 	slli	r4,r5,31
    d0c0:	88c0004c 	andi	r3,r17,1
    d0c4:	30e2b03a 	or	r17,r6,r3
    d0c8:	280ad07a 	srli	r5,r5,1
    d0cc:	8922b03a 	or	r17,r17,r4
    d0d0:	003f6e06 	br	ce8c <__alt_mem_Flash_flash_data+0xf400ce8c>
    d0d4:	1148b03a 	or	r4,r2,r5
    d0d8:	20003c26 	beq	r4,zero,d1cc <__adddf3+0x3bc>
    d0dc:	29000234 	orhi	r4,r5,8
    d0e0:	01400434 	movhi	r5,16
    d0e4:	297fffc4 	addi	r5,r5,-1
    d0e8:	2148703a 	and	r4,r4,r5
    d0ec:	003f7f06 	br	ceec <__alt_mem_Flash_flash_data+0xf400ceec>
    d0f0:	18ffffc4 	addi	r3,r3,-1
    d0f4:	18004d1e 	bne	r3,zero,d22c <__adddf3+0x41c>
    d0f8:	898dc83a 	sub	r6,r17,r6
    d0fc:	89a3803a 	cmpltu	r17,r17,r6
    d100:	2a0bc83a 	sub	r5,r5,r8
    d104:	2c4bc83a 	sub	r5,r5,r17
    d108:	3023883a 	mov	r17,r6
    d10c:	003f9c06 	br	cf80 <__alt_mem_Flash_flash_data+0xf400cf80>
    d110:	4184b03a 	or	r2,r8,r6
    d114:	103f5d26 	beq	r2,zero,ce8c <__alt_mem_Flash_flash_data+0xf400ce8c>
    d118:	213fffc4 	addi	r4,r4,-1
    d11c:	203fd926 	beq	r4,zero,d084 <__alt_mem_Flash_flash_data+0xf400d084>
    d120:	0081ffc4 	movi	r2,2047
    d124:	80bfca1e 	bne	r16,r2,d050 <__alt_mem_Flash_flash_data+0xf400d050>
    d128:	003f5806 	br	ce8c <__alt_mem_Flash_flash_data+0xf400ce8c>
    d12c:	10c8b03a 	or	r4,r2,r3
    d130:	20008b26 	beq	r4,zero,d360 <__adddf3+0x550>
    d134:	100b883a 	mov	r5,r2
    d138:	1823883a 	mov	r17,r3
    d13c:	888001cc 	andi	r2,r17,7
    d140:	103f541e 	bne	r2,zero,ce94 <__alt_mem_Flash_flash_data+0xf400ce94>
    d144:	9007883a 	mov	r3,r18
    d148:	003fb006 	br	d00c <__alt_mem_Flash_flash_data+0xf400d00c>
    d14c:	1800531e 	bne	r3,zero,d29c <__adddf3+0x48c>
    d150:	80800044 	addi	r2,r16,1
    d154:	1081ffcc 	andi	r2,r2,2047
    d158:	00c00044 	movi	r3,1
    d15c:	1880990e 	bge	r3,r2,d3c4 <__adddf3+0x5b4>
    d160:	8985c83a 	sub	r2,r17,r6
    d164:	8887803a 	cmpltu	r3,r17,r2
    d168:	2a27c83a 	sub	r19,r5,r8
    d16c:	98e7c83a 	sub	r19,r19,r3
    d170:	98c0202c 	andhi	r3,r19,128
    d174:	18006226 	beq	r3,zero,d300 <__adddf3+0x4f0>
    d178:	3463c83a 	sub	r17,r6,r17
    d17c:	4151c83a 	sub	r8,r8,r5
    d180:	344d803a 	cmpltu	r6,r6,r17
    d184:	41a7c83a 	sub	r19,r8,r6
    d188:	3825883a 	mov	r18,r7
    d18c:	983f821e 	bne	r19,zero,cf98 <__alt_mem_Flash_flash_data+0xf400cf98>
    d190:	8809883a 	mov	r4,r17
    d194:	000f3ac0 	call	f3ac <__clzsi2>
    d198:	10800804 	addi	r2,r2,32
    d19c:	10fffe04 	addi	r3,r2,-8
    d1a0:	010007c4 	movi	r4,31
    d1a4:	20ff810e 	bge	r4,r3,cfac <__alt_mem_Flash_flash_data+0xf400cfac>
    d1a8:	14fff604 	addi	r19,r2,-40
    d1ac:	8ce6983a 	sll	r19,r17,r19
    d1b0:	0023883a 	mov	r17,zero
    d1b4:	1c3f840e 	bge	r3,r16,cfc8 <__alt_mem_Flash_flash_data+0xf400cfc8>
    d1b8:	017fe034 	movhi	r5,65408
    d1bc:	297fffc4 	addi	r5,r5,-1
    d1c0:	80e1c83a 	sub	r16,r16,r3
    d1c4:	994a703a 	and	r5,r19,r5
    d1c8:	003f3006 	br	ce8c <__alt_mem_Flash_flash_data+0xf400ce8c>
    d1cc:	0009883a 	mov	r4,zero
    d1d0:	0005883a 	mov	r2,zero
    d1d4:	003f4506 	br	ceec <__alt_mem_Flash_flash_data+0xf400ceec>
    d1d8:	418cb03a 	or	r6,r8,r6
    d1dc:	300cc03a 	cmpne	r6,r6,zero
    d1e0:	0007883a 	mov	r3,zero
    d1e4:	003f6106 	br	cf6c <__alt_mem_Flash_flash_data+0xf400cf6c>
    d1e8:	2000921e 	bne	r4,zero,d434 <__adddf3+0x624>
    d1ec:	80800044 	addi	r2,r16,1
    d1f0:	11c1ffcc 	andi	r7,r2,2047
    d1f4:	01000044 	movi	r4,1
    d1f8:	21c0610e 	bge	r4,r7,d380 <__adddf3+0x570>
    d1fc:	0101ffc4 	movi	r4,2047
    d200:	1100a326 	beq	r2,r4,d490 <__adddf3+0x680>
    d204:	344d883a 	add	r6,r6,r17
    d208:	3463803a 	cmpltu	r17,r6,r17
    d20c:	414b883a 	add	r5,r8,r5
    d210:	2c4b883a 	add	r5,r5,r17
    d214:	282297fa 	slli	r17,r5,31
    d218:	300cd07a 	srli	r6,r6,1
    d21c:	280ad07a 	srli	r5,r5,1
    d220:	1021883a 	mov	r16,r2
    d224:	89a2b03a 	or	r17,r17,r6
    d228:	003f1806 	br	ce8c <__alt_mem_Flash_flash_data+0xf400ce8c>
    d22c:	0081ffc4 	movi	r2,2047
    d230:	80bf411e 	bne	r16,r2,cf38 <__alt_mem_Flash_flash_data+0xf400cf38>
    d234:	003f1506 	br	ce8c <__alt_mem_Flash_flash_data+0xf400ce8c>
    d238:	80bff844 	addi	r2,r16,-31
    d23c:	00c00804 	movi	r3,32
    d240:	9884d83a 	srl	r2,r19,r2
    d244:	28c04a26 	beq	r5,r3,d370 <__adddf3+0x560>
    d248:	00c00fc4 	movi	r3,63
    d24c:	1c21c83a 	sub	r16,r3,r16
    d250:	9c26983a 	sll	r19,r19,r16
    d254:	9c62b03a 	or	r17,r19,r17
    d258:	8822c03a 	cmpne	r17,r17,zero
    d25c:	88a2b03a 	or	r17,r17,r2
    d260:	000b883a 	mov	r5,zero
    d264:	0021883a 	mov	r16,zero
    d268:	003fb406 	br	d13c <__alt_mem_Flash_flash_data+0xf400d13c>
    d26c:	18bff804 	addi	r2,r3,-32
    d270:	01000804 	movi	r4,32
    d274:	4084d83a 	srl	r2,r8,r2
    d278:	19003f26 	beq	r3,r4,d378 <__adddf3+0x568>
    d27c:	01001004 	movi	r4,64
    d280:	20c7c83a 	sub	r3,r4,r3
    d284:	40d0983a 	sll	r8,r8,r3
    d288:	418cb03a 	or	r6,r8,r6
    d28c:	300cc03a 	cmpne	r6,r6,zero
    d290:	308cb03a 	or	r6,r6,r2
    d294:	0007883a 	mov	r3,zero
    d298:	003f3406 	br	cf6c <__alt_mem_Flash_flash_data+0xf400cf6c>
    d29c:	80002326 	beq	r16,zero,d32c <__adddf3+0x51c>
    d2a0:	0101ffc4 	movi	r4,2047
    d2a4:	11005e26 	beq	r2,r4,d420 <__adddf3+0x610>
    d2a8:	00c7c83a 	sub	r3,zero,r3
    d2ac:	29402034 	orhi	r5,r5,128
    d2b0:	01000e04 	movi	r4,56
    d2b4:	20c07216 	blt	r4,r3,d480 <__adddf3+0x670>
    d2b8:	010007c4 	movi	r4,31
    d2bc:	20c0ce16 	blt	r4,r3,d5f8 <__adddf3+0x7e8>
    d2c0:	01000804 	movi	r4,32
    d2c4:	20c9c83a 	sub	r4,r4,r3
    d2c8:	2914983a 	sll	r10,r5,r4
    d2cc:	88d2d83a 	srl	r9,r17,r3
    d2d0:	8908983a 	sll	r4,r17,r4
    d2d4:	28c6d83a 	srl	r3,r5,r3
    d2d8:	5262b03a 	or	r17,r10,r9
    d2dc:	2008c03a 	cmpne	r4,r4,zero
    d2e0:	8922b03a 	or	r17,r17,r4
    d2e4:	3463c83a 	sub	r17,r6,r17
    d2e8:	40c7c83a 	sub	r3,r8,r3
    d2ec:	344d803a 	cmpltu	r6,r6,r17
    d2f0:	198bc83a 	sub	r5,r3,r6
    d2f4:	1021883a 	mov	r16,r2
    d2f8:	3825883a 	mov	r18,r7
    d2fc:	003f2006 	br	cf80 <__alt_mem_Flash_flash_data+0xf400cf80>
    d300:	9886b03a 	or	r3,r19,r2
    d304:	1800141e 	bne	r3,zero,d358 <__adddf3+0x548>
    d308:	0007883a 	mov	r3,zero
    d30c:	000b883a 	mov	r5,zero
    d310:	0023883a 	mov	r17,zero
    d314:	0021883a 	mov	r16,zero
    d318:	003f3c06 	br	d00c <__alt_mem_Flash_flash_data+0xf400d00c>
    d31c:	418cb03a 	or	r6,r8,r6
    d320:	300cc03a 	cmpne	r6,r6,zero
    d324:	0011883a 	mov	r8,zero
    d328:	003f5606 	br	d084 <__alt_mem_Flash_flash_data+0xf400d084>
    d32c:	2c48b03a 	or	r4,r5,r17
    d330:	20003b26 	beq	r4,zero,d420 <__adddf3+0x610>
    d334:	00c6303a 	nor	r3,zero,r3
    d338:	1800371e 	bne	r3,zero,d418 <__adddf3+0x608>
    d33c:	3463c83a 	sub	r17,r6,r17
    d340:	414bc83a 	sub	r5,r8,r5
    d344:	344d803a 	cmpltu	r6,r6,r17
    d348:	298bc83a 	sub	r5,r5,r6
    d34c:	1021883a 	mov	r16,r2
    d350:	3825883a 	mov	r18,r7
    d354:	003f0a06 	br	cf80 <__alt_mem_Flash_flash_data+0xf400cf80>
    d358:	1023883a 	mov	r17,r2
    d35c:	003f0d06 	br	cf94 <__alt_mem_Flash_flash_data+0xf400cf94>
    d360:	0007883a 	mov	r3,zero
    d364:	000b883a 	mov	r5,zero
    d368:	0023883a 	mov	r17,zero
    d36c:	003f2706 	br	d00c <__alt_mem_Flash_flash_data+0xf400d00c>
    d370:	0027883a 	mov	r19,zero
    d374:	003fb706 	br	d254 <__alt_mem_Flash_flash_data+0xf400d254>
    d378:	0011883a 	mov	r8,zero
    d37c:	003fc206 	br	d288 <__alt_mem_Flash_flash_data+0xf400d288>
    d380:	2c44b03a 	or	r2,r5,r17
    d384:	8000871e 	bne	r16,zero,d5a4 <__adddf3+0x794>
    d388:	1000b126 	beq	r2,zero,d650 <__adddf3+0x840>
    d38c:	4184b03a 	or	r2,r8,r6
    d390:	103ebe26 	beq	r2,zero,ce8c <__alt_mem_Flash_flash_data+0xf400ce8c>
    d394:	3445883a 	add	r2,r6,r17
    d398:	1463803a 	cmpltu	r17,r2,r17
    d39c:	414b883a 	add	r5,r8,r5
    d3a0:	2c4b883a 	add	r5,r5,r17
    d3a4:	28c0202c 	andhi	r3,r5,128
    d3a8:	1023883a 	mov	r17,r2
    d3ac:	183f6326 	beq	r3,zero,d13c <__alt_mem_Flash_flash_data+0xf400d13c>
    d3b0:	00bfe034 	movhi	r2,65408
    d3b4:	10bfffc4 	addi	r2,r2,-1
    d3b8:	2021883a 	mov	r16,r4
    d3bc:	288a703a 	and	r5,r5,r2
    d3c0:	003eb206 	br	ce8c <__alt_mem_Flash_flash_data+0xf400ce8c>
    d3c4:	2c44b03a 	or	r2,r5,r17
    d3c8:	8000251e 	bne	r16,zero,d460 <__adddf3+0x650>
    d3cc:	10004b1e 	bne	r2,zero,d4fc <__adddf3+0x6ec>
    d3d0:	4184b03a 	or	r2,r8,r6
    d3d4:	103fe226 	beq	r2,zero,d360 <__alt_mem_Flash_flash_data+0xf400d360>
    d3d8:	400b883a 	mov	r5,r8
    d3dc:	3023883a 	mov	r17,r6
    d3e0:	3825883a 	mov	r18,r7
    d3e4:	003ea906 	br	ce8c <__alt_mem_Flash_flash_data+0xf400ce8c>
    d3e8:	20bff804 	addi	r2,r4,-32
    d3ec:	01c00804 	movi	r7,32
    d3f0:	4084d83a 	srl	r2,r8,r2
    d3f4:	21c07e26 	beq	r4,r7,d5f0 <__adddf3+0x7e0>
    d3f8:	01c01004 	movi	r7,64
    d3fc:	3909c83a 	sub	r4,r7,r4
    d400:	4110983a 	sll	r8,r8,r4
    d404:	418cb03a 	or	r6,r8,r6
    d408:	300cc03a 	cmpne	r6,r6,zero
    d40c:	308cb03a 	or	r6,r6,r2
    d410:	0011883a 	mov	r8,zero
    d414:	003f1b06 	br	d084 <__alt_mem_Flash_flash_data+0xf400d084>
    d418:	0101ffc4 	movi	r4,2047
    d41c:	113fa41e 	bne	r2,r4,d2b0 <__alt_mem_Flash_flash_data+0xf400d2b0>
    d420:	400b883a 	mov	r5,r8
    d424:	3023883a 	mov	r17,r6
    d428:	1021883a 	mov	r16,r2
    d42c:	3825883a 	mov	r18,r7
    d430:	003e9606 	br	ce8c <__alt_mem_Flash_flash_data+0xf400ce8c>
    d434:	80001a1e 	bne	r16,zero,d4a0 <__adddf3+0x690>
    d438:	2c4eb03a 	or	r7,r5,r17
    d43c:	38005526 	beq	r7,zero,d594 <__adddf3+0x784>
    d440:	0108303a 	nor	r4,zero,r4
    d444:	2000511e 	bne	r4,zero,d58c <__adddf3+0x77c>
    d448:	89a3883a 	add	r17,r17,r6
    d44c:	414b883a 	add	r5,r8,r5
    d450:	898d803a 	cmpltu	r6,r17,r6
    d454:	298b883a 	add	r5,r5,r6
    d458:	1021883a 	mov	r16,r2
    d45c:	003f0e06 	br	d098 <__alt_mem_Flash_flash_data+0xf400d098>
    d460:	1000341e 	bne	r2,zero,d534 <__adddf3+0x724>
    d464:	4184b03a 	or	r2,r8,r6
    d468:	10006f26 	beq	r2,zero,d628 <__adddf3+0x818>
    d46c:	400b883a 	mov	r5,r8
    d470:	3023883a 	mov	r17,r6
    d474:	3825883a 	mov	r18,r7
    d478:	0401ffc4 	movi	r16,2047
    d47c:	003e8306 	br	ce8c <__alt_mem_Flash_flash_data+0xf400ce8c>
    d480:	2c62b03a 	or	r17,r5,r17
    d484:	8822c03a 	cmpne	r17,r17,zero
    d488:	0007883a 	mov	r3,zero
    d48c:	003f9506 	br	d2e4 <__alt_mem_Flash_flash_data+0xf400d2e4>
    d490:	1021883a 	mov	r16,r2
    d494:	000b883a 	mov	r5,zero
    d498:	0023883a 	mov	r17,zero
    d49c:	003edb06 	br	d00c <__alt_mem_Flash_flash_data+0xf400d00c>
    d4a0:	01c1ffc4 	movi	r7,2047
    d4a4:	11c03b26 	beq	r2,r7,d594 <__adddf3+0x784>
    d4a8:	0109c83a 	sub	r4,zero,r4
    d4ac:	29402034 	orhi	r5,r5,128
    d4b0:	01c00e04 	movi	r7,56
    d4b4:	39006216 	blt	r7,r4,d640 <__adddf3+0x830>
    d4b8:	01c007c4 	movi	r7,31
    d4bc:	39006b16 	blt	r7,r4,d66c <__adddf3+0x85c>
    d4c0:	01c00804 	movi	r7,32
    d4c4:	390fc83a 	sub	r7,r7,r4
    d4c8:	29d4983a 	sll	r10,r5,r7
    d4cc:	8912d83a 	srl	r9,r17,r4
    d4d0:	89ce983a 	sll	r7,r17,r7
    d4d4:	2908d83a 	srl	r4,r5,r4
    d4d8:	5262b03a 	or	r17,r10,r9
    d4dc:	380ac03a 	cmpne	r5,r7,zero
    d4e0:	8962b03a 	or	r17,r17,r5
    d4e4:	89a3883a 	add	r17,r17,r6
    d4e8:	2211883a 	add	r8,r4,r8
    d4ec:	898d803a 	cmpltu	r6,r17,r6
    d4f0:	418b883a 	add	r5,r8,r6
    d4f4:	1021883a 	mov	r16,r2
    d4f8:	003ee706 	br	d098 <__alt_mem_Flash_flash_data+0xf400d098>
    d4fc:	4184b03a 	or	r2,r8,r6
    d500:	103e6226 	beq	r2,zero,ce8c <__alt_mem_Flash_flash_data+0xf400ce8c>
    d504:	8987c83a 	sub	r3,r17,r6
    d508:	88c9803a 	cmpltu	r4,r17,r3
    d50c:	2a05c83a 	sub	r2,r5,r8
    d510:	1105c83a 	sub	r2,r2,r4
    d514:	1100202c 	andhi	r4,r2,128
    d518:	203f0426 	beq	r4,zero,d12c <__alt_mem_Flash_flash_data+0xf400d12c>
    d51c:	3463c83a 	sub	r17,r6,r17
    d520:	414bc83a 	sub	r5,r8,r5
    d524:	344d803a 	cmpltu	r6,r6,r17
    d528:	298bc83a 	sub	r5,r5,r6
    d52c:	3825883a 	mov	r18,r7
    d530:	003e5606 	br	ce8c <__alt_mem_Flash_flash_data+0xf400ce8c>
    d534:	4184b03a 	or	r2,r8,r6
    d538:	10002b26 	beq	r2,zero,d5e8 <__adddf3+0x7d8>
    d53c:	2804d0fa 	srli	r2,r5,3
    d540:	8822d0fa 	srli	r17,r17,3
    d544:	280a977a 	slli	r5,r5,29
    d548:	10c0022c 	andhi	r3,r2,8
    d54c:	2c62b03a 	or	r17,r5,r17
    d550:	18000826 	beq	r3,zero,d574 <__adddf3+0x764>
    d554:	4008d0fa 	srli	r4,r8,3
    d558:	20c0022c 	andhi	r3,r4,8
    d55c:	1800051e 	bne	r3,zero,d574 <__adddf3+0x764>
    d560:	300cd0fa 	srli	r6,r6,3
    d564:	4010977a 	slli	r8,r8,29
    d568:	2005883a 	mov	r2,r4
    d56c:	3825883a 	mov	r18,r7
    d570:	41a2b03a 	or	r17,r8,r6
    d574:	880ad77a 	srli	r5,r17,29
    d578:	100490fa 	slli	r2,r2,3
    d57c:	882290fa 	slli	r17,r17,3
    d580:	0401ffc4 	movi	r16,2047
    d584:	288ab03a 	or	r5,r5,r2
    d588:	003e4006 	br	ce8c <__alt_mem_Flash_flash_data+0xf400ce8c>
    d58c:	01c1ffc4 	movi	r7,2047
    d590:	11ffc71e 	bne	r2,r7,d4b0 <__alt_mem_Flash_flash_data+0xf400d4b0>
    d594:	400b883a 	mov	r5,r8
    d598:	3023883a 	mov	r17,r6
    d59c:	1021883a 	mov	r16,r2
    d5a0:	003e3a06 	br	ce8c <__alt_mem_Flash_flash_data+0xf400ce8c>
    d5a4:	10002d26 	beq	r2,zero,d65c <__adddf3+0x84c>
    d5a8:	4184b03a 	or	r2,r8,r6
    d5ac:	10000e26 	beq	r2,zero,d5e8 <__adddf3+0x7d8>
    d5b0:	2804d0fa 	srli	r2,r5,3
    d5b4:	8822d0fa 	srli	r17,r17,3
    d5b8:	280a977a 	slli	r5,r5,29
    d5bc:	10c0022c 	andhi	r3,r2,8
    d5c0:	2c62b03a 	or	r17,r5,r17
    d5c4:	183feb26 	beq	r3,zero,d574 <__alt_mem_Flash_flash_data+0xf400d574>
    d5c8:	4008d0fa 	srli	r4,r8,3
    d5cc:	20c0022c 	andhi	r3,r4,8
    d5d0:	183fe81e 	bne	r3,zero,d574 <__alt_mem_Flash_flash_data+0xf400d574>
    d5d4:	300cd0fa 	srli	r6,r6,3
    d5d8:	4010977a 	slli	r8,r8,29
    d5dc:	2005883a 	mov	r2,r4
    d5e0:	41a2b03a 	or	r17,r8,r6
    d5e4:	003fe306 	br	d574 <__alt_mem_Flash_flash_data+0xf400d574>
    d5e8:	0401ffc4 	movi	r16,2047
    d5ec:	003e2706 	br	ce8c <__alt_mem_Flash_flash_data+0xf400ce8c>
    d5f0:	0011883a 	mov	r8,zero
    d5f4:	003f8306 	br	d404 <__alt_mem_Flash_flash_data+0xf400d404>
    d5f8:	193ff804 	addi	r4,r3,-32
    d5fc:	02400804 	movi	r9,32
    d600:	2908d83a 	srl	r4,r5,r4
    d604:	1a402526 	beq	r3,r9,d69c <__adddf3+0x88c>
    d608:	02401004 	movi	r9,64
    d60c:	48c7c83a 	sub	r3,r9,r3
    d610:	28ca983a 	sll	r5,r5,r3
    d614:	2c62b03a 	or	r17,r5,r17
    d618:	8822c03a 	cmpne	r17,r17,zero
    d61c:	8922b03a 	or	r17,r17,r4
    d620:	0007883a 	mov	r3,zero
    d624:	003f2f06 	br	d2e4 <__alt_mem_Flash_flash_data+0xf400d2e4>
    d628:	01402034 	movhi	r5,128
    d62c:	0007883a 	mov	r3,zero
    d630:	297fffc4 	addi	r5,r5,-1
    d634:	047ffe04 	movi	r17,-8
    d638:	0401ffc4 	movi	r16,2047
    d63c:	003e7306 	br	d00c <__alt_mem_Flash_flash_data+0xf400d00c>
    d640:	2c62b03a 	or	r17,r5,r17
    d644:	8822c03a 	cmpne	r17,r17,zero
    d648:	0009883a 	mov	r4,zero
    d64c:	003fa506 	br	d4e4 <__alt_mem_Flash_flash_data+0xf400d4e4>
    d650:	400b883a 	mov	r5,r8
    d654:	3023883a 	mov	r17,r6
    d658:	003e0c06 	br	ce8c <__alt_mem_Flash_flash_data+0xf400ce8c>
    d65c:	400b883a 	mov	r5,r8
    d660:	3023883a 	mov	r17,r6
    d664:	0401ffc4 	movi	r16,2047
    d668:	003e0806 	br	ce8c <__alt_mem_Flash_flash_data+0xf400ce8c>
    d66c:	21fff804 	addi	r7,r4,-32
    d670:	02400804 	movi	r9,32
    d674:	29ced83a 	srl	r7,r5,r7
    d678:	22400a26 	beq	r4,r9,d6a4 <__adddf3+0x894>
    d67c:	02401004 	movi	r9,64
    d680:	4909c83a 	sub	r4,r9,r4
    d684:	290a983a 	sll	r5,r5,r4
    d688:	2c62b03a 	or	r17,r5,r17
    d68c:	8822c03a 	cmpne	r17,r17,zero
    d690:	89e2b03a 	or	r17,r17,r7
    d694:	0009883a 	mov	r4,zero
    d698:	003f9206 	br	d4e4 <__alt_mem_Flash_flash_data+0xf400d4e4>
    d69c:	000b883a 	mov	r5,zero
    d6a0:	003fdc06 	br	d614 <__alt_mem_Flash_flash_data+0xf400d614>
    d6a4:	000b883a 	mov	r5,zero
    d6a8:	003ff706 	br	d688 <__alt_mem_Flash_flash_data+0xf400d688>

0000d6ac <__divdf3>:
    d6ac:	defff204 	addi	sp,sp,-56
    d6b0:	dd000815 	stw	r20,32(sp)
    d6b4:	2828d53a 	srli	r20,r5,20
    d6b8:	dd800a15 	stw	r22,40(sp)
    d6bc:	282cd7fa 	srli	r22,r5,31
    d6c0:	dc000415 	stw	r16,16(sp)
    d6c4:	04000434 	movhi	r16,16
    d6c8:	df000c15 	stw	fp,48(sp)
    d6cc:	dcc00715 	stw	r19,28(sp)
    d6d0:	dc800615 	stw	r18,24(sp)
    d6d4:	dc400515 	stw	r17,20(sp)
    d6d8:	843fffc4 	addi	r16,r16,-1
    d6dc:	dfc00d15 	stw	ra,52(sp)
    d6e0:	ddc00b15 	stw	r23,44(sp)
    d6e4:	dd400915 	stw	r21,36(sp)
    d6e8:	a501ffcc 	andi	r20,r20,2047
    d6ec:	2025883a 	mov	r18,r4
    d6f0:	2027883a 	mov	r19,r4
    d6f4:	2c22703a 	and	r17,r5,r16
    d6f8:	b7003fcc 	andi	fp,r22,255
    d6fc:	a0005e26 	beq	r20,zero,d878 <__divdf3+0x1cc>
    d700:	0081ffc4 	movi	r2,2047
    d704:	a0803526 	beq	r20,r2,d7dc <__divdf3+0x130>
    d708:	8c000434 	orhi	r16,r17,16
    d70c:	2004d77a 	srli	r2,r4,29
    d710:	802090fa 	slli	r16,r16,3
    d714:	202690fa 	slli	r19,r4,3
    d718:	a53f0044 	addi	r20,r20,-1023
    d71c:	80a2b03a 	or	r17,r16,r2
    d720:	0025883a 	mov	r18,zero
    d724:	0011883a 	mov	r8,zero
    d728:	380ad53a 	srli	r5,r7,20
    d72c:	382ed7fa 	srli	r23,r7,31
    d730:	04000434 	movhi	r16,16
    d734:	843fffc4 	addi	r16,r16,-1
    d738:	2941ffcc 	andi	r5,r5,2047
    d73c:	302b883a 	mov	r21,r6
    d740:	3c20703a 	and	r16,r7,r16
    d744:	ba403fcc 	andi	r9,r23,255
    d748:	28006726 	beq	r5,zero,d8e8 <__divdf3+0x23c>
    d74c:	0081ffc4 	movi	r2,2047
    d750:	28805f26 	beq	r5,r2,d8d0 <__divdf3+0x224>
    d754:	84000434 	orhi	r16,r16,16
    d758:	3004d77a 	srli	r2,r6,29
    d75c:	802090fa 	slli	r16,r16,3
    d760:	302a90fa 	slli	r21,r6,3
    d764:	297f0044 	addi	r5,r5,-1023
    d768:	80a0b03a 	or	r16,r16,r2
    d76c:	000f883a 	mov	r7,zero
    d770:	3c86b03a 	or	r3,r7,r18
    d774:	180690ba 	slli	r3,r3,2
    d778:	00800074 	movhi	r2,1
    d77c:	10b5e704 	addi	r2,r2,-10340
    d780:	1887883a 	add	r3,r3,r2
    d784:	18c00017 	ldw	r3,0(r3)
    d788:	b5c8f03a 	xor	r4,r22,r23
    d78c:	200d883a 	mov	r6,r4
    d790:	24803fcc 	andi	r18,r4,255
    d794:	a169c83a 	sub	r20,r20,r5
    d798:	1800683a 	jmp	r3
    d79c:	0000d9e4 	muli	zero,zero,871
    d7a0:	0000d814 	movui	zero,864
    d7a4:	0000d9a8 	cmpgeui	zero,zero,870
    d7a8:	0000d7f8 	rdprs	zero,zero,863
    d7ac:	0000d9a8 	cmpgeui	zero,zero,870
    d7b0:	0000d97c 	xorhi	zero,zero,869
    d7b4:	0000d9a8 	cmpgeui	zero,zero,870
    d7b8:	0000d7f8 	rdprs	zero,zero,863
    d7bc:	0000d814 	movui	zero,864
    d7c0:	0000d814 	movui	zero,864
    d7c4:	0000d97c 	xorhi	zero,zero,869
    d7c8:	0000d7f8 	rdprs	zero,zero,863
    d7cc:	0000d808 	cmpgei	zero,zero,864
    d7d0:	0000d808 	cmpgei	zero,zero,864
    d7d4:	0000d808 	cmpgei	zero,zero,864
    d7d8:	0000d9b8 	rdprs	zero,zero,870
    d7dc:	8904b03a 	or	r2,r17,r4
    d7e0:	1000631e 	bne	r2,zero,d970 <__divdf3+0x2c4>
    d7e4:	04800204 	movi	r18,8
    d7e8:	0023883a 	mov	r17,zero
    d7ec:	0027883a 	mov	r19,zero
    d7f0:	02000084 	movi	r8,2
    d7f4:	003fcc06 	br	d728 <__alt_mem_Flash_flash_data+0xf400d728>
    d7f8:	8023883a 	mov	r17,r16
    d7fc:	a827883a 	mov	r19,r21
    d800:	4839883a 	mov	fp,r9
    d804:	3811883a 	mov	r8,r7
    d808:	00800084 	movi	r2,2
    d80c:	40812a1e 	bne	r8,r2,dcb8 <__divdf3+0x60c>
    d810:	e025883a 	mov	r18,fp
    d814:	9180004c 	andi	r6,r18,1
    d818:	0101ffc4 	movi	r4,2047
    d81c:	000b883a 	mov	r5,zero
    d820:	0027883a 	mov	r19,zero
    d824:	2008953a 	slli	r4,r4,20
    d828:	30c03fcc 	andi	r3,r6,255
    d82c:	04000434 	movhi	r16,16
    d830:	180697fa 	slli	r3,r3,31
    d834:	843fffc4 	addi	r16,r16,-1
    d838:	2c20703a 	and	r16,r5,r16
    d83c:	8120b03a 	or	r16,r16,r4
    d840:	80c6b03a 	or	r3,r16,r3
    d844:	9805883a 	mov	r2,r19
    d848:	dfc00d17 	ldw	ra,52(sp)
    d84c:	df000c17 	ldw	fp,48(sp)
    d850:	ddc00b17 	ldw	r23,44(sp)
    d854:	dd800a17 	ldw	r22,40(sp)
    d858:	dd400917 	ldw	r21,36(sp)
    d85c:	dd000817 	ldw	r20,32(sp)
    d860:	dcc00717 	ldw	r19,28(sp)
    d864:	dc800617 	ldw	r18,24(sp)
    d868:	dc400517 	ldw	r17,20(sp)
    d86c:	dc000417 	ldw	r16,16(sp)
    d870:	dec00e04 	addi	sp,sp,56
    d874:	f800283a 	ret
    d878:	8904b03a 	or	r2,r17,r4
    d87c:	10003726 	beq	r2,zero,d95c <__divdf3+0x2b0>
    d880:	88011c26 	beq	r17,zero,dcf4 <__divdf3+0x648>
    d884:	8809883a 	mov	r4,r17
    d888:	d9800315 	stw	r6,12(sp)
    d88c:	d9c00115 	stw	r7,4(sp)
    d890:	000f3ac0 	call	f3ac <__clzsi2>
    d894:	d9800317 	ldw	r6,12(sp)
    d898:	d9c00117 	ldw	r7,4(sp)
    d89c:	1007883a 	mov	r3,r2
    d8a0:	01000a04 	movi	r4,40
    d8a4:	1cfffe04 	addi	r19,r3,-8
    d8a8:	20c9c83a 	sub	r4,r4,r3
    d8ac:	8cca983a 	sll	r5,r17,r19
    d8b0:	9108d83a 	srl	r4,r18,r4
    d8b4:	94e6983a 	sll	r19,r18,r19
    d8b8:	2162b03a 	or	r17,r4,r5
    d8bc:	053f0344 	movi	r20,-1011
    d8c0:	a0e9c83a 	sub	r20,r20,r3
    d8c4:	0025883a 	mov	r18,zero
    d8c8:	0011883a 	mov	r8,zero
    d8cc:	003f9606 	br	d728 <__alt_mem_Flash_flash_data+0xf400d728>
    d8d0:	8184b03a 	or	r2,r16,r6
    d8d4:	10001f1e 	bne	r2,zero,d954 <__divdf3+0x2a8>
    d8d8:	0021883a 	mov	r16,zero
    d8dc:	002b883a 	mov	r21,zero
    d8e0:	01c00084 	movi	r7,2
    d8e4:	003fa206 	br	d770 <__alt_mem_Flash_flash_data+0xf400d770>
    d8e8:	8184b03a 	or	r2,r16,r6
    d8ec:	10001526 	beq	r2,zero,d944 <__divdf3+0x298>
    d8f0:	80010c26 	beq	r16,zero,dd24 <__divdf3+0x678>
    d8f4:	8009883a 	mov	r4,r16
    d8f8:	d9800315 	stw	r6,12(sp)
    d8fc:	da000215 	stw	r8,8(sp)
    d900:	da400015 	stw	r9,0(sp)
    d904:	000f3ac0 	call	f3ac <__clzsi2>
    d908:	d9800317 	ldw	r6,12(sp)
    d90c:	da000217 	ldw	r8,8(sp)
    d910:	da400017 	ldw	r9,0(sp)
    d914:	1007883a 	mov	r3,r2
    d918:	01000a04 	movi	r4,40
    d91c:	1d7ffe04 	addi	r21,r3,-8
    d920:	20c9c83a 	sub	r4,r4,r3
    d924:	8560983a 	sll	r16,r16,r21
    d928:	3108d83a 	srl	r4,r6,r4
    d92c:	356a983a 	sll	r21,r6,r21
    d930:	2420b03a 	or	r16,r4,r16
    d934:	017f0344 	movi	r5,-1011
    d938:	28cbc83a 	sub	r5,r5,r3
    d93c:	000f883a 	mov	r7,zero
    d940:	003f8b06 	br	d770 <__alt_mem_Flash_flash_data+0xf400d770>
    d944:	0021883a 	mov	r16,zero
    d948:	002b883a 	mov	r21,zero
    d94c:	01c00044 	movi	r7,1
    d950:	003f8706 	br	d770 <__alt_mem_Flash_flash_data+0xf400d770>
    d954:	01c000c4 	movi	r7,3
    d958:	003f8506 	br	d770 <__alt_mem_Flash_flash_data+0xf400d770>
    d95c:	04800104 	movi	r18,4
    d960:	0023883a 	mov	r17,zero
    d964:	0027883a 	mov	r19,zero
    d968:	02000044 	movi	r8,1
    d96c:	003f6e06 	br	d728 <__alt_mem_Flash_flash_data+0xf400d728>
    d970:	04800304 	movi	r18,12
    d974:	020000c4 	movi	r8,3
    d978:	003f6b06 	br	d728 <__alt_mem_Flash_flash_data+0xf400d728>
    d97c:	01400434 	movhi	r5,16
    d980:	000d883a 	mov	r6,zero
    d984:	297fffc4 	addi	r5,r5,-1
    d988:	04ffffc4 	movi	r19,-1
    d98c:	0101ffc4 	movi	r4,2047
    d990:	003fa406 	br	d824 <__alt_mem_Flash_flash_data+0xf400d824>
    d994:	043f0084 	movi	r16,-1022
    d998:	8521c83a 	sub	r16,r16,r20
    d99c:	00800e04 	movi	r2,56
    d9a0:	1401200e 	bge	r2,r16,de24 <__divdf3+0x778>
    d9a4:	9180004c 	andi	r6,r18,1
    d9a8:	0009883a 	mov	r4,zero
    d9ac:	000b883a 	mov	r5,zero
    d9b0:	0027883a 	mov	r19,zero
    d9b4:	003f9b06 	br	d824 <__alt_mem_Flash_flash_data+0xf400d824>
    d9b8:	8880022c 	andhi	r2,r17,8
    d9bc:	1000c726 	beq	r2,zero,dcdc <__divdf3+0x630>
    d9c0:	8080022c 	andhi	r2,r16,8
    d9c4:	1000c51e 	bne	r2,zero,dcdc <__divdf3+0x630>
    d9c8:	00800434 	movhi	r2,16
    d9cc:	81400234 	orhi	r5,r16,8
    d9d0:	10bfffc4 	addi	r2,r2,-1
    d9d4:	b80d883a 	mov	r6,r23
    d9d8:	288a703a 	and	r5,r5,r2
    d9dc:	a827883a 	mov	r19,r21
    d9e0:	003fea06 	br	d98c <__alt_mem_Flash_flash_data+0xf400d98c>
    d9e4:	8440ea36 	bltu	r16,r17,dd90 <__divdf3+0x6e4>
    d9e8:	8c00e826 	beq	r17,r16,dd8c <__divdf3+0x6e0>
    d9ec:	a53fffc4 	addi	r20,r20,-1
    d9f0:	882d883a 	mov	r22,r17
    d9f4:	000d883a 	mov	r6,zero
    d9f8:	a804d63a 	srli	r2,r21,24
    d9fc:	8020923a 	slli	r16,r16,8
    da00:	b009883a 	mov	r4,r22
    da04:	d9800315 	stw	r6,12(sp)
    da08:	1420b03a 	or	r16,r2,r16
    da0c:	802ed43a 	srli	r23,r16,16
    da10:	873fffcc 	andi	fp,r16,65535
    da14:	a82a923a 	slli	r21,r21,8
    da18:	b80b883a 	mov	r5,r23
    da1c:	000ce000 	call	ce00 <__udivsi3>
    da20:	b009883a 	mov	r4,r22
    da24:	b80b883a 	mov	r5,r23
    da28:	1023883a 	mov	r17,r2
    da2c:	000ce080 	call	ce08 <__umodsi3>
    da30:	1004943a 	slli	r2,r2,16
    da34:	9808d43a 	srli	r4,r19,16
    da38:	8f2d383a 	mul	r22,r17,fp
    da3c:	d9800317 	ldw	r6,12(sp)
    da40:	1106b03a 	or	r3,r2,r4
    da44:	1d80062e 	bgeu	r3,r22,da60 <__divdf3+0x3b4>
    da48:	1c07883a 	add	r3,r3,r16
    da4c:	88bfffc4 	addi	r2,r17,-1
    da50:	1c00dc36 	bltu	r3,r16,ddc4 <__divdf3+0x718>
    da54:	1d80db2e 	bgeu	r3,r22,ddc4 <__divdf3+0x718>
    da58:	8c7fff84 	addi	r17,r17,-2
    da5c:	1c07883a 	add	r3,r3,r16
    da60:	1dadc83a 	sub	r22,r3,r22
    da64:	b009883a 	mov	r4,r22
    da68:	b80b883a 	mov	r5,r23
    da6c:	d9800315 	stw	r6,12(sp)
    da70:	000ce000 	call	ce00 <__udivsi3>
    da74:	b009883a 	mov	r4,r22
    da78:	b80b883a 	mov	r5,r23
    da7c:	d8800015 	stw	r2,0(sp)
    da80:	000ce080 	call	ce08 <__umodsi3>
    da84:	da400017 	ldw	r9,0(sp)
    da88:	1004943a 	slli	r2,r2,16
    da8c:	9cffffcc 	andi	r19,r19,65535
    da90:	4f07383a 	mul	r3,r9,fp
    da94:	14c8b03a 	or	r4,r2,r19
    da98:	d9800317 	ldw	r6,12(sp)
    da9c:	20c0062e 	bgeu	r4,r3,dab8 <__divdf3+0x40c>
    daa0:	2409883a 	add	r4,r4,r16
    daa4:	48bfffc4 	addi	r2,r9,-1
    daa8:	2400c436 	bltu	r4,r16,ddbc <__divdf3+0x710>
    daac:	20c0c32e 	bgeu	r4,r3,ddbc <__divdf3+0x710>
    dab0:	4a7fff84 	addi	r9,r9,-2
    dab4:	2409883a 	add	r4,r4,r16
    dab8:	8822943a 	slli	r17,r17,16
    dabc:	a80ed43a 	srli	r7,r21,16
    dac0:	aa3fffcc 	andi	r8,r21,65535
    dac4:	4c62b03a 	or	r17,r9,r17
    dac8:	8816d43a 	srli	r11,r17,16
    dacc:	897fffcc 	andi	r5,r17,65535
    dad0:	2a15383a 	mul	r10,r5,r8
    dad4:	5a19383a 	mul	r12,r11,r8
    dad8:	29cb383a 	mul	r5,r5,r7
    dadc:	5012d43a 	srli	r9,r10,16
    dae0:	20c5c83a 	sub	r2,r4,r3
    dae4:	614b883a 	add	r5,r12,r5
    dae8:	2a4b883a 	add	r5,r5,r9
    daec:	59c7383a 	mul	r3,r11,r7
    daf0:	2b00022e 	bgeu	r5,r12,dafc <__divdf3+0x450>
    daf4:	01000074 	movhi	r4,1
    daf8:	1907883a 	add	r3,r3,r4
    dafc:	2808d43a 	srli	r4,r5,16
    db00:	280a943a 	slli	r5,r5,16
    db04:	54ffffcc 	andi	r19,r10,65535
    db08:	1907883a 	add	r3,r3,r4
    db0c:	2ccb883a 	add	r5,r5,r19
    db10:	10c09336 	bltu	r2,r3,dd60 <__divdf3+0x6b4>
    db14:	10c0ad26 	beq	r2,r3,ddcc <__divdf3+0x720>
    db18:	10c7c83a 	sub	r3,r2,r3
    db1c:	3167c83a 	sub	r19,r6,r5
    db20:	34ed803a 	cmpltu	r22,r6,r19
    db24:	1dadc83a 	sub	r22,r3,r22
    db28:	b400b226 	beq	r22,r16,ddf4 <__divdf3+0x748>
    db2c:	b009883a 	mov	r4,r22
    db30:	b80b883a 	mov	r5,r23
    db34:	d9c00115 	stw	r7,4(sp)
    db38:	da000215 	stw	r8,8(sp)
    db3c:	000ce000 	call	ce00 <__udivsi3>
    db40:	b009883a 	mov	r4,r22
    db44:	b80b883a 	mov	r5,r23
    db48:	d8800315 	stw	r2,12(sp)
    db4c:	000ce080 	call	ce08 <__umodsi3>
    db50:	d9800317 	ldw	r6,12(sp)
    db54:	1004943a 	slli	r2,r2,16
    db58:	9808d43a 	srli	r4,r19,16
    db5c:	372d383a 	mul	r22,r6,fp
    db60:	d9c00117 	ldw	r7,4(sp)
    db64:	1106b03a 	or	r3,r2,r4
    db68:	da000217 	ldw	r8,8(sp)
    db6c:	1d80062e 	bgeu	r3,r22,db88 <__divdf3+0x4dc>
    db70:	1c07883a 	add	r3,r3,r16
    db74:	30bfffc4 	addi	r2,r6,-1
    db78:	1c00a036 	bltu	r3,r16,ddfc <__divdf3+0x750>
    db7c:	1d809f2e 	bgeu	r3,r22,ddfc <__divdf3+0x750>
    db80:	31bfff84 	addi	r6,r6,-2
    db84:	1c07883a 	add	r3,r3,r16
    db88:	1dadc83a 	sub	r22,r3,r22
    db8c:	b009883a 	mov	r4,r22
    db90:	b80b883a 	mov	r5,r23
    db94:	d9800315 	stw	r6,12(sp)
    db98:	d9c00115 	stw	r7,4(sp)
    db9c:	da000215 	stw	r8,8(sp)
    dba0:	000ce000 	call	ce00 <__udivsi3>
    dba4:	b009883a 	mov	r4,r22
    dba8:	b80b883a 	mov	r5,r23
    dbac:	d8800015 	stw	r2,0(sp)
    dbb0:	000ce080 	call	ce08 <__umodsi3>
    dbb4:	da400017 	ldw	r9,0(sp)
    dbb8:	1004943a 	slli	r2,r2,16
    dbbc:	993fffcc 	andi	r4,r19,65535
    dbc0:	4f39383a 	mul	fp,r9,fp
    dbc4:	1106b03a 	or	r3,r2,r4
    dbc8:	d9800317 	ldw	r6,12(sp)
    dbcc:	d9c00117 	ldw	r7,4(sp)
    dbd0:	da000217 	ldw	r8,8(sp)
    dbd4:	1f00062e 	bgeu	r3,fp,dbf0 <__divdf3+0x544>
    dbd8:	1c07883a 	add	r3,r3,r16
    dbdc:	48bfffc4 	addi	r2,r9,-1
    dbe0:	1c008836 	bltu	r3,r16,de04 <__divdf3+0x758>
    dbe4:	1f00872e 	bgeu	r3,fp,de04 <__divdf3+0x758>
    dbe8:	4a7fff84 	addi	r9,r9,-2
    dbec:	1c07883a 	add	r3,r3,r16
    dbf0:	3008943a 	slli	r4,r6,16
    dbf4:	1f07c83a 	sub	r3,r3,fp
    dbf8:	4926b03a 	or	r19,r9,r4
    dbfc:	993fffcc 	andi	r4,r19,65535
    dc00:	980cd43a 	srli	r6,r19,16
    dc04:	220b383a 	mul	r5,r4,r8
    dc08:	21c5383a 	mul	r2,r4,r7
    dc0c:	3211383a 	mul	r8,r6,r8
    dc10:	2808d43a 	srli	r4,r5,16
    dc14:	31cf383a 	mul	r7,r6,r7
    dc18:	4085883a 	add	r2,r8,r2
    dc1c:	1105883a 	add	r2,r2,r4
    dc20:	1200022e 	bgeu	r2,r8,dc2c <__divdf3+0x580>
    dc24:	01000074 	movhi	r4,1
    dc28:	390f883a 	add	r7,r7,r4
    dc2c:	1008d43a 	srli	r4,r2,16
    dc30:	1004943a 	slli	r2,r2,16
    dc34:	297fffcc 	andi	r5,r5,65535
    dc38:	390f883a 	add	r7,r7,r4
    dc3c:	1145883a 	add	r2,r2,r5
    dc40:	19c06536 	bltu	r3,r7,ddd8 <__divdf3+0x72c>
    dc44:	19c09f26 	beq	r3,r7,dec4 <__divdf3+0x818>
    dc48:	9cc00054 	ori	r19,r19,1
    dc4c:	a100ffc4 	addi	r4,r20,1023
    dc50:	013f500e 	bge	zero,r4,d994 <__alt_mem_Flash_flash_data+0xf400d994>
    dc54:	988001cc 	andi	r2,r19,7
    dc58:	10000726 	beq	r2,zero,dc78 <__divdf3+0x5cc>
    dc5c:	98c003cc 	andi	r3,r19,15
    dc60:	00800104 	movi	r2,4
    dc64:	18800426 	beq	r3,r2,dc78 <__divdf3+0x5cc>
    dc68:	9885883a 	add	r2,r19,r2
    dc6c:	14e1803a 	cmpltu	r16,r2,r19
    dc70:	8c23883a 	add	r17,r17,r16
    dc74:	1027883a 	mov	r19,r2
    dc78:	8880402c 	andhi	r2,r17,256
    dc7c:	10000426 	beq	r2,zero,dc90 <__divdf3+0x5e4>
    dc80:	00bfc034 	movhi	r2,65280
    dc84:	10bfffc4 	addi	r2,r2,-1
    dc88:	a1010004 	addi	r4,r20,1024
    dc8c:	88a2703a 	and	r17,r17,r2
    dc90:	0081ff84 	movi	r2,2046
    dc94:	113edf16 	blt	r2,r4,d814 <__alt_mem_Flash_flash_data+0xf400d814>
    dc98:	9826d0fa 	srli	r19,r19,3
    dc9c:	8804977a 	slli	r2,r17,29
    dca0:	8820927a 	slli	r16,r17,9
    dca4:	2101ffcc 	andi	r4,r4,2047
    dca8:	14e6b03a 	or	r19,r2,r19
    dcac:	800ad33a 	srli	r5,r16,12
    dcb0:	9180004c 	andi	r6,r18,1
    dcb4:	003edb06 	br	d824 <__alt_mem_Flash_flash_data+0xf400d824>
    dcb8:	008000c4 	movi	r2,3
    dcbc:	4080a826 	beq	r8,r2,df60 <__divdf3+0x8b4>
    dcc0:	00800044 	movi	r2,1
    dcc4:	4080551e 	bne	r8,r2,de1c <__divdf3+0x770>
    dcc8:	e00d883a 	mov	r6,fp
    dccc:	0009883a 	mov	r4,zero
    dcd0:	000b883a 	mov	r5,zero
    dcd4:	0027883a 	mov	r19,zero
    dcd8:	003ed206 	br	d824 <__alt_mem_Flash_flash_data+0xf400d824>
    dcdc:	00800434 	movhi	r2,16
    dce0:	89400234 	orhi	r5,r17,8
    dce4:	10bfffc4 	addi	r2,r2,-1
    dce8:	b00d883a 	mov	r6,r22
    dcec:	288a703a 	and	r5,r5,r2
    dcf0:	003f2606 	br	d98c <__alt_mem_Flash_flash_data+0xf400d98c>
    dcf4:	d9800315 	stw	r6,12(sp)
    dcf8:	d9c00115 	stw	r7,4(sp)
    dcfc:	000f3ac0 	call	f3ac <__clzsi2>
    dd00:	10c00804 	addi	r3,r2,32
    dd04:	010009c4 	movi	r4,39
    dd08:	d9800317 	ldw	r6,12(sp)
    dd0c:	d9c00117 	ldw	r7,4(sp)
    dd10:	20fee30e 	bge	r4,r3,d8a0 <__alt_mem_Flash_flash_data+0xf400d8a0>
    dd14:	117ffe04 	addi	r5,r2,-8
    dd18:	9162983a 	sll	r17,r18,r5
    dd1c:	0027883a 	mov	r19,zero
    dd20:	003ee606 	br	d8bc <__alt_mem_Flash_flash_data+0xf400d8bc>
    dd24:	3009883a 	mov	r4,r6
    dd28:	d9800315 	stw	r6,12(sp)
    dd2c:	da000215 	stw	r8,8(sp)
    dd30:	da400015 	stw	r9,0(sp)
    dd34:	000f3ac0 	call	f3ac <__clzsi2>
    dd38:	10c00804 	addi	r3,r2,32
    dd3c:	010009c4 	movi	r4,39
    dd40:	d9800317 	ldw	r6,12(sp)
    dd44:	da000217 	ldw	r8,8(sp)
    dd48:	da400017 	ldw	r9,0(sp)
    dd4c:	20fef20e 	bge	r4,r3,d918 <__alt_mem_Flash_flash_data+0xf400d918>
    dd50:	10bffe04 	addi	r2,r2,-8
    dd54:	a8a0983a 	sll	r16,r21,r2
    dd58:	002b883a 	mov	r21,zero
    dd5c:	003ef506 	br	d934 <__alt_mem_Flash_flash_data+0xf400d934>
    dd60:	354d883a 	add	r6,r6,r21
    dd64:	3549803a 	cmpltu	r4,r6,r21
    dd68:	2409883a 	add	r4,r4,r16
    dd6c:	2089883a 	add	r4,r4,r2
    dd70:	88bfffc4 	addi	r2,r17,-1
    dd74:	81000c2e 	bgeu	r16,r4,dda8 <__divdf3+0x6fc>
    dd78:	20c04436 	bltu	r4,r3,de8c <__divdf3+0x7e0>
    dd7c:	19006f26 	beq	r3,r4,df3c <__divdf3+0x890>
    dd80:	20c7c83a 	sub	r3,r4,r3
    dd84:	1023883a 	mov	r17,r2
    dd88:	003f6406 	br	db1c <__alt_mem_Flash_flash_data+0xf400db1c>
    dd8c:	9d7f1736 	bltu	r19,r21,d9ec <__alt_mem_Flash_flash_data+0xf400d9ec>
    dd90:	9806d07a 	srli	r3,r19,1
    dd94:	880497fa 	slli	r2,r17,31
    dd98:	980c97fa 	slli	r6,r19,31
    dd9c:	882cd07a 	srli	r22,r17,1
    dda0:	18a6b03a 	or	r19,r3,r2
    dda4:	003f1406 	br	d9f8 <__alt_mem_Flash_flash_data+0xf400d9f8>
    dda8:	243ff51e 	bne	r4,r16,dd80 <__alt_mem_Flash_flash_data+0xf400dd80>
    ddac:	357ff22e 	bgeu	r6,r21,dd78 <__alt_mem_Flash_flash_data+0xf400dd78>
    ddb0:	80c7c83a 	sub	r3,r16,r3
    ddb4:	1023883a 	mov	r17,r2
    ddb8:	003f5806 	br	db1c <__alt_mem_Flash_flash_data+0xf400db1c>
    ddbc:	1013883a 	mov	r9,r2
    ddc0:	003f3d06 	br	dab8 <__alt_mem_Flash_flash_data+0xf400dab8>
    ddc4:	1023883a 	mov	r17,r2
    ddc8:	003f2506 	br	da60 <__alt_mem_Flash_flash_data+0xf400da60>
    ddcc:	317fe436 	bltu	r6,r5,dd60 <__alt_mem_Flash_flash_data+0xf400dd60>
    ddd0:	0007883a 	mov	r3,zero
    ddd4:	003f5106 	br	db1c <__alt_mem_Flash_flash_data+0xf400db1c>
    ddd8:	1c07883a 	add	r3,r3,r16
    dddc:	993fffc4 	addi	r4,r19,-1
    dde0:	1c000a2e 	bgeu	r3,r16,de0c <__divdf3+0x760>
    dde4:	2027883a 	mov	r19,r4
    dde8:	19ff971e 	bne	r3,r7,dc48 <__alt_mem_Flash_flash_data+0xf400dc48>
    ddec:	a8bf961e 	bne	r21,r2,dc48 <__alt_mem_Flash_flash_data+0xf400dc48>
    ddf0:	003f9606 	br	dc4c <__alt_mem_Flash_flash_data+0xf400dc4c>
    ddf4:	04ffffc4 	movi	r19,-1
    ddf8:	003f9406 	br	dc4c <__alt_mem_Flash_flash_data+0xf400dc4c>
    ddfc:	100d883a 	mov	r6,r2
    de00:	003f6106 	br	db88 <__alt_mem_Flash_flash_data+0xf400db88>
    de04:	1013883a 	mov	r9,r2
    de08:	003f7906 	br	dbf0 <__alt_mem_Flash_flash_data+0xf400dbf0>
    de0c:	19c02636 	bltu	r3,r7,dea8 <__divdf3+0x7fc>
    de10:	38c04d26 	beq	r7,r3,df48 <__divdf3+0x89c>
    de14:	2027883a 	mov	r19,r4
    de18:	003f8b06 	br	dc48 <__alt_mem_Flash_flash_data+0xf400dc48>
    de1c:	e025883a 	mov	r18,fp
    de20:	003f8a06 	br	dc4c <__alt_mem_Flash_flash_data+0xf400dc4c>
    de24:	008007c4 	movi	r2,31
    de28:	14002a16 	blt	r2,r16,ded4 <__divdf3+0x828>
    de2c:	a5010784 	addi	r20,r20,1054
    de30:	8d04983a 	sll	r2,r17,r20
    de34:	9c06d83a 	srl	r3,r19,r16
    de38:	9d28983a 	sll	r20,r19,r20
    de3c:	8c20d83a 	srl	r16,r17,r16
    de40:	1886b03a 	or	r3,r3,r2
    de44:	a004c03a 	cmpne	r2,r20,zero
    de48:	1884b03a 	or	r2,r3,r2
    de4c:	10c001cc 	andi	r3,r2,7
    de50:	18000726 	beq	r3,zero,de70 <__divdf3+0x7c4>
    de54:	110003cc 	andi	r4,r2,15
    de58:	00c00104 	movi	r3,4
    de5c:	20c00426 	beq	r4,r3,de70 <__divdf3+0x7c4>
    de60:	10c00104 	addi	r3,r2,4
    de64:	1885803a 	cmpltu	r2,r3,r2
    de68:	80a1883a 	add	r16,r16,r2
    de6c:	1805883a 	mov	r2,r3
    de70:	80c0202c 	andhi	r3,r16,128
    de74:	18002d26 	beq	r3,zero,df2c <__divdf3+0x880>
    de78:	9180004c 	andi	r6,r18,1
    de7c:	01000044 	movi	r4,1
    de80:	000b883a 	mov	r5,zero
    de84:	0027883a 	mov	r19,zero
    de88:	003e6606 	br	d824 <__alt_mem_Flash_flash_data+0xf400d824>
    de8c:	354d883a 	add	r6,r6,r21
    de90:	356d803a 	cmpltu	r22,r6,r21
    de94:	b42d883a 	add	r22,r22,r16
    de98:	b12d883a 	add	r22,r22,r4
    de9c:	8c7fff84 	addi	r17,r17,-2
    dea0:	b0c7c83a 	sub	r3,r22,r3
    dea4:	003f1d06 	br	db1c <__alt_mem_Flash_flash_data+0xf400db1c>
    dea8:	ad4b883a 	add	r5,r21,r21
    deac:	2d6b803a 	cmpltu	r21,r5,r21
    deb0:	ac2b883a 	add	r21,r21,r16
    deb4:	1d47883a 	add	r3,r3,r21
    deb8:	993fff84 	addi	r4,r19,-2
    debc:	282b883a 	mov	r21,r5
    dec0:	003fc806 	br	dde4 <__alt_mem_Flash_flash_data+0xf400dde4>
    dec4:	103fc41e 	bne	r2,zero,ddd8 <__alt_mem_Flash_flash_data+0xf400ddd8>
    dec8:	002b883a 	mov	r21,zero
    decc:	a8bf5e1e 	bne	r21,r2,dc48 <__alt_mem_Flash_flash_data+0xf400dc48>
    ded0:	003f5e06 	br	dc4c <__alt_mem_Flash_flash_data+0xf400dc4c>
    ded4:	00bef884 	movi	r2,-1054
    ded8:	1505c83a 	sub	r2,r2,r20
    dedc:	00c00804 	movi	r3,32
    dee0:	8884d83a 	srl	r2,r17,r2
    dee4:	80c01c26 	beq	r16,r3,df58 <__divdf3+0x8ac>
    dee8:	a0c10f84 	addi	r3,r20,1086
    deec:	88c6983a 	sll	r3,r17,r3
    def0:	1cc6b03a 	or	r3,r3,r19
    def4:	1806c03a 	cmpne	r3,r3,zero
    def8:	1884b03a 	or	r2,r3,r2
    defc:	140001cc 	andi	r16,r2,7
    df00:	8000061e 	bne	r16,zero,df1c <__divdf3+0x870>
    df04:	000b883a 	mov	r5,zero
    df08:	1004d0fa 	srli	r2,r2,3
    df0c:	9180004c 	andi	r6,r18,1
    df10:	0009883a 	mov	r4,zero
    df14:	1426b03a 	or	r19,r2,r16
    df18:	003e4206 	br	d824 <__alt_mem_Flash_flash_data+0xf400d824>
    df1c:	110003cc 	andi	r4,r2,15
    df20:	00c00104 	movi	r3,4
    df24:	0021883a 	mov	r16,zero
    df28:	20ffcd1e 	bne	r4,r3,de60 <__alt_mem_Flash_flash_data+0xf400de60>
    df2c:	800a927a 	slli	r5,r16,9
    df30:	8020977a 	slli	r16,r16,29
    df34:	280ad33a 	srli	r5,r5,12
    df38:	003ff306 	br	df08 <__alt_mem_Flash_flash_data+0xf400df08>
    df3c:	317fd336 	bltu	r6,r5,de8c <__alt_mem_Flash_flash_data+0xf400de8c>
    df40:	1023883a 	mov	r17,r2
    df44:	003fa206 	br	ddd0 <__alt_mem_Flash_flash_data+0xf400ddd0>
    df48:	a8bfd736 	bltu	r21,r2,dea8 <__alt_mem_Flash_flash_data+0xf400dea8>
    df4c:	2027883a 	mov	r19,r4
    df50:	a8bf3d1e 	bne	r21,r2,dc48 <__alt_mem_Flash_flash_data+0xf400dc48>
    df54:	003f3d06 	br	dc4c <__alt_mem_Flash_flash_data+0xf400dc4c>
    df58:	0007883a 	mov	r3,zero
    df5c:	003fe406 	br	def0 <__alt_mem_Flash_flash_data+0xf400def0>
    df60:	00800434 	movhi	r2,16
    df64:	89400234 	orhi	r5,r17,8
    df68:	10bfffc4 	addi	r2,r2,-1
    df6c:	e00d883a 	mov	r6,fp
    df70:	288a703a 	and	r5,r5,r2
    df74:	003e8506 	br	d98c <__alt_mem_Flash_flash_data+0xf400d98c>

0000df78 <__eqdf2>:
    df78:	2804d53a 	srli	r2,r5,20
    df7c:	3806d53a 	srli	r3,r7,20
    df80:	02000434 	movhi	r8,16
    df84:	423fffc4 	addi	r8,r8,-1
    df88:	1081ffcc 	andi	r2,r2,2047
    df8c:	0241ffc4 	movi	r9,2047
    df90:	2a14703a 	and	r10,r5,r8
    df94:	18c1ffcc 	andi	r3,r3,2047
    df98:	3a10703a 	and	r8,r7,r8
    df9c:	280ad7fa 	srli	r5,r5,31
    dfa0:	380ed7fa 	srli	r7,r7,31
    dfa4:	12400f26 	beq	r2,r9,dfe4 <__eqdf2+0x6c>
    dfa8:	0241ffc4 	movi	r9,2047
    dfac:	1a400326 	beq	r3,r9,dfbc <__eqdf2+0x44>
    dfb0:	10c00526 	beq	r2,r3,dfc8 <__eqdf2+0x50>
    dfb4:	00800044 	movi	r2,1
    dfb8:	f800283a 	ret
    dfbc:	4192b03a 	or	r9,r8,r6
    dfc0:	483ffc1e 	bne	r9,zero,dfb4 <__alt_mem_Flash_flash_data+0xf400dfb4>
    dfc4:	10fffb1e 	bne	r2,r3,dfb4 <__alt_mem_Flash_flash_data+0xf400dfb4>
    dfc8:	523ffa1e 	bne	r10,r8,dfb4 <__alt_mem_Flash_flash_data+0xf400dfb4>
    dfcc:	21bff91e 	bne	r4,r6,dfb4 <__alt_mem_Flash_flash_data+0xf400dfb4>
    dfd0:	29c00826 	beq	r5,r7,dff4 <__eqdf2+0x7c>
    dfd4:	103ff71e 	bne	r2,zero,dfb4 <__alt_mem_Flash_flash_data+0xf400dfb4>
    dfd8:	5104b03a 	or	r2,r10,r4
    dfdc:	1004c03a 	cmpne	r2,r2,zero
    dfe0:	f800283a 	ret
    dfe4:	5112b03a 	or	r9,r10,r4
    dfe8:	483fef26 	beq	r9,zero,dfa8 <__alt_mem_Flash_flash_data+0xf400dfa8>
    dfec:	00800044 	movi	r2,1
    dff0:	f800283a 	ret
    dff4:	0005883a 	mov	r2,zero
    dff8:	f800283a 	ret

0000dffc <__gedf2>:
    dffc:	2804d53a 	srli	r2,r5,20
    e000:	3806d53a 	srli	r3,r7,20
    e004:	02000434 	movhi	r8,16
    e008:	423fffc4 	addi	r8,r8,-1
    e00c:	0241ffc4 	movi	r9,2047
    e010:	1081ffcc 	andi	r2,r2,2047
    e014:	2a14703a 	and	r10,r5,r8
    e018:	1a46703a 	and	r3,r3,r9
    e01c:	3a10703a 	and	r8,r7,r8
    e020:	280ad7fa 	srli	r5,r5,31
    e024:	380ed7fa 	srli	r7,r7,31
    e028:	12400b26 	beq	r2,r9,e058 <__gedf2+0x5c>
    e02c:	1a401626 	beq	r3,r9,e088 <__gedf2+0x8c>
    e030:	10000c1e 	bne	r2,zero,e064 <__gedf2+0x68>
    e034:	5112b03a 	or	r9,r10,r4
    e038:	4813003a 	cmpeq	r9,r9,zero
    e03c:	4817883a 	mov	r11,r9
    e040:	18000c1e 	bne	r3,zero,e074 <__gedf2+0x78>
    e044:	4198b03a 	or	r12,r8,r6
    e048:	60000a1e 	bne	r12,zero,e074 <__gedf2+0x78>
    e04c:	48001326 	beq	r9,zero,e09c <__gedf2+0xa0>
    e050:	0005883a 	mov	r2,zero
    e054:	f800283a 	ret
    e058:	5112b03a 	or	r9,r10,r4
    e05c:	4800191e 	bne	r9,zero,e0c4 <__gedf2+0xc8>
    e060:	18800926 	beq	r3,r2,e088 <__gedf2+0x8c>
    e064:	18000b1e 	bne	r3,zero,e094 <__gedf2+0x98>
    e068:	4192b03a 	or	r9,r8,r6
    e06c:	0017883a 	mov	r11,zero
    e070:	48000a26 	beq	r9,zero,e09c <__gedf2+0xa0>
    e074:	39c03fcc 	andi	r7,r7,255
    e078:	58000726 	beq	r11,zero,e098 <__gedf2+0x9c>
    e07c:	3800081e 	bne	r7,zero,e0a0 <__gedf2+0xa4>
    e080:	00bfffc4 	movi	r2,-1
    e084:	f800283a 	ret
    e088:	4192b03a 	or	r9,r8,r6
    e08c:	48000d1e 	bne	r9,zero,e0c4 <__gedf2+0xc8>
    e090:	103fe826 	beq	r2,zero,e034 <__alt_mem_Flash_flash_data+0xf400e034>
    e094:	39c03fcc 	andi	r7,r7,255
    e098:	29c00326 	beq	r5,r7,e0a8 <__gedf2+0xac>
    e09c:	283ff81e 	bne	r5,zero,e080 <__alt_mem_Flash_flash_data+0xf400e080>
    e0a0:	00800044 	movi	r2,1
    e0a4:	f800283a 	ret
    e0a8:	18bffc16 	blt	r3,r2,e09c <__alt_mem_Flash_flash_data+0xf400e09c>
    e0ac:	10c00316 	blt	r2,r3,e0bc <__gedf2+0xc0>
    e0b0:	42bffa36 	bltu	r8,r10,e09c <__alt_mem_Flash_flash_data+0xf400e09c>
    e0b4:	52000526 	beq	r10,r8,e0cc <__gedf2+0xd0>
    e0b8:	523fe52e 	bgeu	r10,r8,e050 <__alt_mem_Flash_flash_data+0xf400e050>
    e0bc:	283ff026 	beq	r5,zero,e080 <__alt_mem_Flash_flash_data+0xf400e080>
    e0c0:	003ff706 	br	e0a0 <__alt_mem_Flash_flash_data+0xf400e0a0>
    e0c4:	00bfff84 	movi	r2,-2
    e0c8:	f800283a 	ret
    e0cc:	313ff336 	bltu	r6,r4,e09c <__alt_mem_Flash_flash_data+0xf400e09c>
    e0d0:	21bfdf2e 	bgeu	r4,r6,e050 <__alt_mem_Flash_flash_data+0xf400e050>
    e0d4:	283fea26 	beq	r5,zero,e080 <__alt_mem_Flash_flash_data+0xf400e080>
    e0d8:	003ff106 	br	e0a0 <__alt_mem_Flash_flash_data+0xf400e0a0>

0000e0dc <__ledf2>:
    e0dc:	2804d53a 	srli	r2,r5,20
    e0e0:	3810d53a 	srli	r8,r7,20
    e0e4:	00c00434 	movhi	r3,16
    e0e8:	18ffffc4 	addi	r3,r3,-1
    e0ec:	0241ffc4 	movi	r9,2047
    e0f0:	1081ffcc 	andi	r2,r2,2047
    e0f4:	28d4703a 	and	r10,r5,r3
    e0f8:	4250703a 	and	r8,r8,r9
    e0fc:	38c6703a 	and	r3,r7,r3
    e100:	280ad7fa 	srli	r5,r5,31
    e104:	380ed7fa 	srli	r7,r7,31
    e108:	12400b26 	beq	r2,r9,e138 <__ledf2+0x5c>
    e10c:	42401926 	beq	r8,r9,e174 <__ledf2+0x98>
    e110:	10000c1e 	bne	r2,zero,e144 <__ledf2+0x68>
    e114:	5112b03a 	or	r9,r10,r4
    e118:	4813003a 	cmpeq	r9,r9,zero
    e11c:	4817883a 	mov	r11,r9
    e120:	40000f26 	beq	r8,zero,e160 <__ledf2+0x84>
    e124:	39c03fcc 	andi	r7,r7,255
    e128:	58001826 	beq	r11,zero,e18c <__ledf2+0xb0>
    e12c:	38000a1e 	bne	r7,zero,e158 <__ledf2+0x7c>
    e130:	00bfffc4 	movi	r2,-1
    e134:	f800283a 	ret
    e138:	5112b03a 	or	r9,r10,r4
    e13c:	48000f1e 	bne	r9,zero,e17c <__ledf2+0xa0>
    e140:	40800c26 	beq	r8,r2,e174 <__ledf2+0x98>
    e144:	4000101e 	bne	r8,zero,e188 <__ledf2+0xac>
    e148:	1992b03a 	or	r9,r3,r6
    e14c:	0017883a 	mov	r11,zero
    e150:	483ff41e 	bne	r9,zero,e124 <__alt_mem_Flash_flash_data+0xf400e124>
    e154:	283ff61e 	bne	r5,zero,e130 <__alt_mem_Flash_flash_data+0xf400e130>
    e158:	00800044 	movi	r2,1
    e15c:	f800283a 	ret
    e160:	1998b03a 	or	r12,r3,r6
    e164:	603fef1e 	bne	r12,zero,e124 <__alt_mem_Flash_flash_data+0xf400e124>
    e168:	483ffa26 	beq	r9,zero,e154 <__alt_mem_Flash_flash_data+0xf400e154>
    e16c:	0005883a 	mov	r2,zero
    e170:	f800283a 	ret
    e174:	1992b03a 	or	r9,r3,r6
    e178:	48000226 	beq	r9,zero,e184 <__ledf2+0xa8>
    e17c:	00800084 	movi	r2,2
    e180:	f800283a 	ret
    e184:	103fe326 	beq	r2,zero,e114 <__alt_mem_Flash_flash_data+0xf400e114>
    e188:	39c03fcc 	andi	r7,r7,255
    e18c:	29fff11e 	bne	r5,r7,e154 <__alt_mem_Flash_flash_data+0xf400e154>
    e190:	40bff016 	blt	r8,r2,e154 <__alt_mem_Flash_flash_data+0xf400e154>
    e194:	12000316 	blt	r2,r8,e1a4 <__ledf2+0xc8>
    e198:	1abfee36 	bltu	r3,r10,e154 <__alt_mem_Flash_flash_data+0xf400e154>
    e19c:	50c00326 	beq	r10,r3,e1ac <__ledf2+0xd0>
    e1a0:	50fff22e 	bgeu	r10,r3,e16c <__alt_mem_Flash_flash_data+0xf400e16c>
    e1a4:	283fe226 	beq	r5,zero,e130 <__alt_mem_Flash_flash_data+0xf400e130>
    e1a8:	003feb06 	br	e158 <__alt_mem_Flash_flash_data+0xf400e158>
    e1ac:	313fe936 	bltu	r6,r4,e154 <__alt_mem_Flash_flash_data+0xf400e154>
    e1b0:	21bfee2e 	bgeu	r4,r6,e16c <__alt_mem_Flash_flash_data+0xf400e16c>
    e1b4:	283fde26 	beq	r5,zero,e130 <__alt_mem_Flash_flash_data+0xf400e130>
    e1b8:	003fe706 	br	e158 <__alt_mem_Flash_flash_data+0xf400e158>

0000e1bc <__muldf3>:
    e1bc:	defff204 	addi	sp,sp,-56
    e1c0:	2804d53a 	srli	r2,r5,20
    e1c4:	dd800a15 	stw	r22,40(sp)
    e1c8:	282cd7fa 	srli	r22,r5,31
    e1cc:	dc000415 	stw	r16,16(sp)
    e1d0:	04000434 	movhi	r16,16
    e1d4:	df000c15 	stw	fp,48(sp)
    e1d8:	dd000815 	stw	r20,32(sp)
    e1dc:	dcc00715 	stw	r19,28(sp)
    e1e0:	dc800615 	stw	r18,24(sp)
    e1e4:	dc400515 	stw	r17,20(sp)
    e1e8:	843fffc4 	addi	r16,r16,-1
    e1ec:	dfc00d15 	stw	ra,52(sp)
    e1f0:	ddc00b15 	stw	r23,44(sp)
    e1f4:	dd400915 	stw	r21,36(sp)
    e1f8:	1501ffcc 	andi	r20,r2,2047
    e1fc:	2023883a 	mov	r17,r4
    e200:	2025883a 	mov	r18,r4
    e204:	2c20703a 	and	r16,r5,r16
    e208:	b027883a 	mov	r19,r22
    e20c:	b7003fcc 	andi	fp,r22,255
    e210:	a0005926 	beq	r20,zero,e378 <__muldf3+0x1bc>
    e214:	0081ffc4 	movi	r2,2047
    e218:	a0803426 	beq	r20,r2,e2ec <__muldf3+0x130>
    e21c:	84000434 	orhi	r16,r16,16
    e220:	2004d77a 	srli	r2,r4,29
    e224:	802090fa 	slli	r16,r16,3
    e228:	202490fa 	slli	r18,r4,3
    e22c:	a53f0044 	addi	r20,r20,-1023
    e230:	80a0b03a 	or	r16,r16,r2
    e234:	002b883a 	mov	r21,zero
    e238:	0015883a 	mov	r10,zero
    e23c:	3812d53a 	srli	r9,r7,20
    e240:	3806d7fa 	srli	r3,r7,31
    e244:	02000434 	movhi	r8,16
    e248:	423fffc4 	addi	r8,r8,-1
    e24c:	4941ffcc 	andi	r5,r9,2047
    e250:	302f883a 	mov	r23,r6
    e254:	3a22703a 	and	r17,r7,r8
    e258:	1ac03fcc 	andi	r11,r3,255
    e25c:	28006226 	beq	r5,zero,e3e8 <__muldf3+0x22c>
    e260:	0081ffc4 	movi	r2,2047
    e264:	28805a26 	beq	r5,r2,e3d0 <__muldf3+0x214>
    e268:	8a000434 	orhi	r8,r17,16
    e26c:	3004d77a 	srli	r2,r6,29
    e270:	401090fa 	slli	r8,r8,3
    e274:	302e90fa 	slli	r23,r6,3
    e278:	297f0044 	addi	r5,r5,-1023
    e27c:	40a2b03a 	or	r17,r8,r2
    e280:	0013883a 	mov	r9,zero
    e284:	4d4cb03a 	or	r6,r9,r21
    e288:	300c90ba 	slli	r6,r6,2
    e28c:	02000074 	movhi	r8,1
    e290:	4238ab04 	addi	r8,r8,-7508
    e294:	320d883a 	add	r6,r6,r8
    e298:	31800017 	ldw	r6,0(r6)
    e29c:	a14b883a 	add	r5,r20,r5
    e2a0:	1dacf03a 	xor	r22,r3,r22
    e2a4:	2b000044 	addi	r12,r5,1
    e2a8:	3000683a 	jmp	r6
    e2ac:	0000e4e8 	cmpgeui	zero,zero,915
    e2b0:	0000e4d4 	movui	zero,915
    e2b4:	0000e4d4 	movui	zero,915
    e2b8:	0000e4c0 	call	e4c <endGame+0x10>
    e2bc:	0000e308 	cmpgei	zero,zero,908
    e2c0:	0000e308 	cmpgei	zero,zero,908
    e2c4:	0000e4a8 	cmpgeui	zero,zero,914
    e2c8:	0000e4c0 	call	e4c <endGame+0x10>
    e2cc:	0000e308 	cmpgei	zero,zero,908
    e2d0:	0000e4a8 	cmpgeui	zero,zero,914
    e2d4:	0000e308 	cmpgei	zero,zero,908
    e2d8:	0000e4c0 	call	e4c <endGame+0x10>
    e2dc:	0000e30c 	andi	zero,zero,908
    e2e0:	0000e30c 	andi	zero,zero,908
    e2e4:	0000e30c 	andi	zero,zero,908
    e2e8:	0000e6e4 	muli	zero,zero,923
    e2ec:	8104b03a 	or	r2,r16,r4
    e2f0:	10006a1e 	bne	r2,zero,e49c <__muldf3+0x2e0>
    e2f4:	05400204 	movi	r21,8
    e2f8:	0021883a 	mov	r16,zero
    e2fc:	0025883a 	mov	r18,zero
    e300:	02800084 	movi	r10,2
    e304:	003fcd06 	br	e23c <__alt_mem_Flash_flash_data+0xf400e23c>
    e308:	b039883a 	mov	fp,r22
    e30c:	00800084 	movi	r2,2
    e310:	50804e1e 	bne	r10,r2,e44c <__muldf3+0x290>
    e314:	e4c0004c 	andi	r19,fp,1
    e318:	0101ffc4 	movi	r4,2047
    e31c:	0021883a 	mov	r16,zero
    e320:	0025883a 	mov	r18,zero
    e324:	2008953a 	slli	r4,r4,20
    e328:	98c03fcc 	andi	r3,r19,255
    e32c:	01400434 	movhi	r5,16
    e330:	297fffc4 	addi	r5,r5,-1
    e334:	180697fa 	slli	r3,r3,31
    e338:	8160703a 	and	r16,r16,r5
    e33c:	8120b03a 	or	r16,r16,r4
    e340:	80c6b03a 	or	r3,r16,r3
    e344:	9005883a 	mov	r2,r18
    e348:	dfc00d17 	ldw	ra,52(sp)
    e34c:	df000c17 	ldw	fp,48(sp)
    e350:	ddc00b17 	ldw	r23,44(sp)
    e354:	dd800a17 	ldw	r22,40(sp)
    e358:	dd400917 	ldw	r21,36(sp)
    e35c:	dd000817 	ldw	r20,32(sp)
    e360:	dcc00717 	ldw	r19,28(sp)
    e364:	dc800617 	ldw	r18,24(sp)
    e368:	dc400517 	ldw	r17,20(sp)
    e36c:	dc000417 	ldw	r16,16(sp)
    e370:	dec00e04 	addi	sp,sp,56
    e374:	f800283a 	ret
    e378:	8104b03a 	or	r2,r16,r4
    e37c:	10004226 	beq	r2,zero,e488 <__muldf3+0x2cc>
    e380:	8000f926 	beq	r16,zero,e768 <__muldf3+0x5ac>
    e384:	8009883a 	mov	r4,r16
    e388:	d9800315 	stw	r6,12(sp)
    e38c:	d9c00015 	stw	r7,0(sp)
    e390:	000f3ac0 	call	f3ac <__clzsi2>
    e394:	d9800317 	ldw	r6,12(sp)
    e398:	d9c00017 	ldw	r7,0(sp)
    e39c:	1007883a 	mov	r3,r2
    e3a0:	01000a04 	movi	r4,40
    e3a4:	18bffe04 	addi	r2,r3,-8
    e3a8:	20c9c83a 	sub	r4,r4,r3
    e3ac:	80a0983a 	sll	r16,r16,r2
    e3b0:	8908d83a 	srl	r4,r17,r4
    e3b4:	88a4983a 	sll	r18,r17,r2
    e3b8:	2420b03a 	or	r16,r4,r16
    e3bc:	017f0344 	movi	r5,-1011
    e3c0:	28e9c83a 	sub	r20,r5,r3
    e3c4:	002b883a 	mov	r21,zero
    e3c8:	0015883a 	mov	r10,zero
    e3cc:	003f9b06 	br	e23c <__alt_mem_Flash_flash_data+0xf400e23c>
    e3d0:	8984b03a 	or	r2,r17,r6
    e3d4:	10002a1e 	bne	r2,zero,e480 <__muldf3+0x2c4>
    e3d8:	0023883a 	mov	r17,zero
    e3dc:	002f883a 	mov	r23,zero
    e3e0:	02400084 	movi	r9,2
    e3e4:	003fa706 	br	e284 <__alt_mem_Flash_flash_data+0xf400e284>
    e3e8:	8984b03a 	or	r2,r17,r6
    e3ec:	10002026 	beq	r2,zero,e470 <__muldf3+0x2b4>
    e3f0:	8800cc26 	beq	r17,zero,e724 <__muldf3+0x568>
    e3f4:	8809883a 	mov	r4,r17
    e3f8:	d8c00215 	stw	r3,8(sp)
    e3fc:	d9800315 	stw	r6,12(sp)
    e400:	da800015 	stw	r10,0(sp)
    e404:	dac00115 	stw	r11,4(sp)
    e408:	000f3ac0 	call	f3ac <__clzsi2>
    e40c:	d8c00217 	ldw	r3,8(sp)
    e410:	d9800317 	ldw	r6,12(sp)
    e414:	da800017 	ldw	r10,0(sp)
    e418:	dac00117 	ldw	r11,4(sp)
    e41c:	1009883a 	mov	r4,r2
    e420:	01400a04 	movi	r5,40
    e424:	25fffe04 	addi	r23,r4,-8
    e428:	290bc83a 	sub	r5,r5,r4
    e42c:	8dd0983a 	sll	r8,r17,r23
    e430:	314ad83a 	srl	r5,r6,r5
    e434:	35ee983a 	sll	r23,r6,r23
    e438:	2a22b03a 	or	r17,r5,r8
    e43c:	017f0344 	movi	r5,-1011
    e440:	290bc83a 	sub	r5,r5,r4
    e444:	0013883a 	mov	r9,zero
    e448:	003f8e06 	br	e284 <__alt_mem_Flash_flash_data+0xf400e284>
    e44c:	008000c4 	movi	r2,3
    e450:	50811d26 	beq	r10,r2,e8c8 <__muldf3+0x70c>
    e454:	00800044 	movi	r2,1
    e458:	5080e01e 	bne	r10,r2,e7dc <__muldf3+0x620>
    e45c:	e0a6703a 	and	r19,fp,r2
    e460:	0009883a 	mov	r4,zero
    e464:	0021883a 	mov	r16,zero
    e468:	0025883a 	mov	r18,zero
    e46c:	003fad06 	br	e324 <__alt_mem_Flash_flash_data+0xf400e324>
    e470:	0023883a 	mov	r17,zero
    e474:	002f883a 	mov	r23,zero
    e478:	02400044 	movi	r9,1
    e47c:	003f8106 	br	e284 <__alt_mem_Flash_flash_data+0xf400e284>
    e480:	024000c4 	movi	r9,3
    e484:	003f7f06 	br	e284 <__alt_mem_Flash_flash_data+0xf400e284>
    e488:	05400104 	movi	r21,4
    e48c:	0021883a 	mov	r16,zero
    e490:	0025883a 	mov	r18,zero
    e494:	02800044 	movi	r10,1
    e498:	003f6806 	br	e23c <__alt_mem_Flash_flash_data+0xf400e23c>
    e49c:	05400304 	movi	r21,12
    e4a0:	028000c4 	movi	r10,3
    e4a4:	003f6506 	br	e23c <__alt_mem_Flash_flash_data+0xf400e23c>
    e4a8:	04000434 	movhi	r16,16
    e4ac:	0027883a 	mov	r19,zero
    e4b0:	843fffc4 	addi	r16,r16,-1
    e4b4:	04bfffc4 	movi	r18,-1
    e4b8:	0101ffc4 	movi	r4,2047
    e4bc:	003f9906 	br	e324 <__alt_mem_Flash_flash_data+0xf400e324>
    e4c0:	8821883a 	mov	r16,r17
    e4c4:	b825883a 	mov	r18,r23
    e4c8:	5839883a 	mov	fp,r11
    e4cc:	4815883a 	mov	r10,r9
    e4d0:	003f8e06 	br	e30c <__alt_mem_Flash_flash_data+0xf400e30c>
    e4d4:	8821883a 	mov	r16,r17
    e4d8:	b825883a 	mov	r18,r23
    e4dc:	b039883a 	mov	fp,r22
    e4e0:	4815883a 	mov	r10,r9
    e4e4:	003f8906 	br	e30c <__alt_mem_Flash_flash_data+0xf400e30c>
    e4e8:	b80cd43a 	srli	r6,r23,16
    e4ec:	9006d43a 	srli	r3,r18,16
    e4f0:	90bfffcc 	andi	r2,r18,65535
    e4f4:	bdffffcc 	andi	r23,r23,65535
    e4f8:	b891383a 	mul	r8,r23,r2
    e4fc:	b8c9383a 	mul	r4,r23,r3
    e500:	309b383a 	mul	r13,r6,r2
    e504:	400ed43a 	srli	r7,r8,16
    e508:	30df383a 	mul	r15,r6,r3
    e50c:	235b883a 	add	r13,r4,r13
    e510:	69db883a 	add	r13,r13,r7
    e514:	6900022e 	bgeu	r13,r4,e520 <__muldf3+0x364>
    e518:	01000074 	movhi	r4,1
    e51c:	791f883a 	add	r15,r15,r4
    e520:	8828d43a 	srli	r20,r17,16
    e524:	8c7fffcc 	andi	r17,r17,65535
    e528:	888f383a 	mul	r7,r17,r2
    e52c:	88d3383a 	mul	r9,r17,r3
    e530:	a0a5383a 	mul	r18,r20,r2
    e534:	3816d43a 	srli	r11,r7,16
    e538:	6814943a 	slli	r10,r13,16
    e53c:	4ca5883a 	add	r18,r9,r18
    e540:	423fffcc 	andi	r8,r8,65535
    e544:	92e5883a 	add	r18,r18,r11
    e548:	6808d43a 	srli	r4,r13,16
    e54c:	5215883a 	add	r10,r10,r8
    e550:	a0c7383a 	mul	r3,r20,r3
    e554:	9240022e 	bgeu	r18,r9,e560 <__muldf3+0x3a4>
    e558:	00800074 	movhi	r2,1
    e55c:	1887883a 	add	r3,r3,r2
    e560:	802ad43a 	srli	r21,r16,16
    e564:	80bfffcc 	andi	r2,r16,65535
    e568:	b893383a 	mul	r9,r23,r2
    e56c:	3091383a 	mul	r8,r6,r2
    e570:	bd6f383a 	mul	r23,r23,r21
    e574:	9026943a 	slli	r19,r18,16
    e578:	481ad43a 	srli	r13,r9,16
    e57c:	9024d43a 	srli	r18,r18,16
    e580:	39ffffcc 	andi	r7,r7,65535
    e584:	ba11883a 	add	r8,r23,r8
    e588:	99e7883a 	add	r19,r19,r7
    e58c:	4351883a 	add	r8,r8,r13
    e590:	1c97883a 	add	r11,r3,r18
    e594:	354d383a 	mul	r6,r6,r21
    e598:	9925883a 	add	r18,r19,r4
    e59c:	45c0022e 	bgeu	r8,r23,e5a8 <__muldf3+0x3ec>
    e5a0:	00c00074 	movhi	r3,1
    e5a4:	30cd883a 	add	r6,r6,r3
    e5a8:	8889383a 	mul	r4,r17,r2
    e5ac:	8d63383a 	mul	r17,r17,r21
    e5b0:	a085383a 	mul	r2,r20,r2
    e5b4:	200ed43a 	srli	r7,r4,16
    e5b8:	401cd43a 	srli	r14,r8,16
    e5bc:	401a943a 	slli	r13,r8,16
    e5c0:	8885883a 	add	r2,r17,r2
    e5c4:	4a3fffcc 	andi	r8,r9,65535
    e5c8:	11c5883a 	add	r2,r2,r7
    e5cc:	339d883a 	add	r14,r6,r14
    e5d0:	6a11883a 	add	r8,r13,r8
    e5d4:	a561383a 	mul	r16,r20,r21
    e5d8:	1440022e 	bgeu	r2,r17,e5e4 <__muldf3+0x428>
    e5dc:	00c00074 	movhi	r3,1
    e5e0:	80e1883a 	add	r16,r16,r3
    e5e4:	1006943a 	slli	r3,r2,16
    e5e8:	213fffcc 	andi	r4,r4,65535
    e5ec:	93db883a 	add	r13,r18,r15
    e5f0:	1909883a 	add	r4,r3,r4
    e5f4:	22c7883a 	add	r3,r4,r11
    e5f8:	6cd3803a 	cmpltu	r9,r13,r19
    e5fc:	6a09883a 	add	r4,r13,r8
    e600:	1a5b883a 	add	r13,r3,r9
    e604:	2211803a 	cmpltu	r8,r4,r8
    e608:	734d883a 	add	r6,r14,r13
    e60c:	100ed43a 	srli	r7,r2,16
    e610:	6a53803a 	cmpltu	r9,r13,r9
    e614:	3205883a 	add	r2,r6,r8
    e618:	1ac7803a 	cmpltu	r3,r3,r11
    e61c:	1211803a 	cmpltu	r8,r2,r8
    e620:	48c6b03a 	or	r3,r9,r3
    e624:	338d803a 	cmpltu	r6,r6,r14
    e628:	19c7883a 	add	r3,r3,r7
    e62c:	418cb03a 	or	r6,r8,r6
    e630:	1987883a 	add	r3,r3,r6
    e634:	2024927a 	slli	r18,r4,9
    e638:	1c07883a 	add	r3,r3,r16
    e63c:	1806927a 	slli	r3,r3,9
    e640:	1020d5fa 	srli	r16,r2,23
    e644:	2008d5fa 	srli	r4,r4,23
    e648:	9294b03a 	or	r10,r18,r10
    e64c:	1004927a 	slli	r2,r2,9
    e650:	5024c03a 	cmpne	r18,r10,zero
    e654:	1c20b03a 	or	r16,r3,r16
    e658:	9108b03a 	or	r4,r18,r4
    e65c:	80c0402c 	andhi	r3,r16,256
    e660:	20a4b03a 	or	r18,r4,r2
    e664:	18000726 	beq	r3,zero,e684 <__muldf3+0x4c8>
    e668:	9006d07a 	srli	r3,r18,1
    e66c:	800897fa 	slli	r4,r16,31
    e670:	9080004c 	andi	r2,r18,1
    e674:	8020d07a 	srli	r16,r16,1
    e678:	10c4b03a 	or	r2,r2,r3
    e67c:	1124b03a 	or	r18,r2,r4
    e680:	600b883a 	mov	r5,r12
    e684:	2900ffc4 	addi	r4,r5,1023
    e688:	01004b0e 	bge	zero,r4,e7b8 <__muldf3+0x5fc>
    e68c:	908001cc 	andi	r2,r18,7
    e690:	10000726 	beq	r2,zero,e6b0 <__muldf3+0x4f4>
    e694:	90c003cc 	andi	r3,r18,15
    e698:	00800104 	movi	r2,4
    e69c:	18800426 	beq	r3,r2,e6b0 <__muldf3+0x4f4>
    e6a0:	9087883a 	add	r3,r18,r2
    e6a4:	1c85803a 	cmpltu	r2,r3,r18
    e6a8:	80a1883a 	add	r16,r16,r2
    e6ac:	1825883a 	mov	r18,r3
    e6b0:	8080402c 	andhi	r2,r16,256
    e6b4:	10000426 	beq	r2,zero,e6c8 <__muldf3+0x50c>
    e6b8:	00bfc034 	movhi	r2,65280
    e6bc:	10bfffc4 	addi	r2,r2,-1
    e6c0:	29010004 	addi	r4,r5,1024
    e6c4:	80a0703a 	and	r16,r16,r2
    e6c8:	0081ff84 	movi	r2,2046
    e6cc:	1100320e 	bge	r2,r4,e798 <__muldf3+0x5dc>
    e6d0:	b4c0004c 	andi	r19,r22,1
    e6d4:	0101ffc4 	movi	r4,2047
    e6d8:	0021883a 	mov	r16,zero
    e6dc:	0025883a 	mov	r18,zero
    e6e0:	003f1006 	br	e324 <__alt_mem_Flash_flash_data+0xf400e324>
    e6e4:	8080022c 	andhi	r2,r16,8
    e6e8:	10000926 	beq	r2,zero,e710 <__muldf3+0x554>
    e6ec:	8880022c 	andhi	r2,r17,8
    e6f0:	1000071e 	bne	r2,zero,e710 <__muldf3+0x554>
    e6f4:	00800434 	movhi	r2,16
    e6f8:	8c000234 	orhi	r16,r17,8
    e6fc:	10bfffc4 	addi	r2,r2,-1
    e700:	1827883a 	mov	r19,r3
    e704:	80a0703a 	and	r16,r16,r2
    e708:	b825883a 	mov	r18,r23
    e70c:	003f6a06 	br	e4b8 <__alt_mem_Flash_flash_data+0xf400e4b8>
    e710:	00800434 	movhi	r2,16
    e714:	84000234 	orhi	r16,r16,8
    e718:	10bfffc4 	addi	r2,r2,-1
    e71c:	80a0703a 	and	r16,r16,r2
    e720:	003f6506 	br	e4b8 <__alt_mem_Flash_flash_data+0xf400e4b8>
    e724:	3009883a 	mov	r4,r6
    e728:	d8c00215 	stw	r3,8(sp)
    e72c:	d9800315 	stw	r6,12(sp)
    e730:	da800015 	stw	r10,0(sp)
    e734:	dac00115 	stw	r11,4(sp)
    e738:	000f3ac0 	call	f3ac <__clzsi2>
    e73c:	11000804 	addi	r4,r2,32
    e740:	014009c4 	movi	r5,39
    e744:	d8c00217 	ldw	r3,8(sp)
    e748:	d9800317 	ldw	r6,12(sp)
    e74c:	da800017 	ldw	r10,0(sp)
    e750:	dac00117 	ldw	r11,4(sp)
    e754:	293f320e 	bge	r5,r4,e420 <__alt_mem_Flash_flash_data+0xf400e420>
    e758:	10bffe04 	addi	r2,r2,-8
    e75c:	b8a2983a 	sll	r17,r23,r2
    e760:	002f883a 	mov	r23,zero
    e764:	003f3506 	br	e43c <__alt_mem_Flash_flash_data+0xf400e43c>
    e768:	d9800315 	stw	r6,12(sp)
    e76c:	d9c00015 	stw	r7,0(sp)
    e770:	000f3ac0 	call	f3ac <__clzsi2>
    e774:	10c00804 	addi	r3,r2,32
    e778:	010009c4 	movi	r4,39
    e77c:	d9800317 	ldw	r6,12(sp)
    e780:	d9c00017 	ldw	r7,0(sp)
    e784:	20ff060e 	bge	r4,r3,e3a0 <__alt_mem_Flash_flash_data+0xf400e3a0>
    e788:	10bffe04 	addi	r2,r2,-8
    e78c:	88a0983a 	sll	r16,r17,r2
    e790:	0025883a 	mov	r18,zero
    e794:	003f0906 	br	e3bc <__alt_mem_Flash_flash_data+0xf400e3bc>
    e798:	9004d0fa 	srli	r2,r18,3
    e79c:	8024977a 	slli	r18,r16,29
    e7a0:	8020927a 	slli	r16,r16,9
    e7a4:	2101ffcc 	andi	r4,r4,2047
    e7a8:	90a4b03a 	or	r18,r18,r2
    e7ac:	8020d33a 	srli	r16,r16,12
    e7b0:	b4c0004c 	andi	r19,r22,1
    e7b4:	003edb06 	br	e324 <__alt_mem_Flash_flash_data+0xf400e324>
    e7b8:	00ff0084 	movi	r3,-1022
    e7bc:	1947c83a 	sub	r3,r3,r5
    e7c0:	00800e04 	movi	r2,56
    e7c4:	10c0080e 	bge	r2,r3,e7e8 <__muldf3+0x62c>
    e7c8:	b4c0004c 	andi	r19,r22,1
    e7cc:	0009883a 	mov	r4,zero
    e7d0:	0021883a 	mov	r16,zero
    e7d4:	0025883a 	mov	r18,zero
    e7d8:	003ed206 	br	e324 <__alt_mem_Flash_flash_data+0xf400e324>
    e7dc:	600b883a 	mov	r5,r12
    e7e0:	e02d883a 	mov	r22,fp
    e7e4:	003fa706 	br	e684 <__alt_mem_Flash_flash_data+0xf400e684>
    e7e8:	008007c4 	movi	r2,31
    e7ec:	10c01816 	blt	r2,r3,e850 <__muldf3+0x694>
    e7f0:	29410784 	addi	r5,r5,1054
    e7f4:	8144983a 	sll	r2,r16,r5
    e7f8:	90c8d83a 	srl	r4,r18,r3
    e7fc:	914a983a 	sll	r5,r18,r5
    e800:	80c6d83a 	srl	r3,r16,r3
    e804:	2088b03a 	or	r4,r4,r2
    e808:	2804c03a 	cmpne	r2,r5,zero
    e80c:	2084b03a 	or	r2,r4,r2
    e810:	110001cc 	andi	r4,r2,7
    e814:	20000726 	beq	r4,zero,e834 <__muldf3+0x678>
    e818:	114003cc 	andi	r5,r2,15
    e81c:	01000104 	movi	r4,4
    e820:	29000426 	beq	r5,r4,e834 <__muldf3+0x678>
    e824:	11000104 	addi	r4,r2,4
    e828:	2085803a 	cmpltu	r2,r4,r2
    e82c:	1887883a 	add	r3,r3,r2
    e830:	2005883a 	mov	r2,r4
    e834:	1900202c 	andhi	r4,r3,128
    e838:	20001826 	beq	r4,zero,e89c <__muldf3+0x6e0>
    e83c:	b4c0004c 	andi	r19,r22,1
    e840:	01000044 	movi	r4,1
    e844:	0021883a 	mov	r16,zero
    e848:	0025883a 	mov	r18,zero
    e84c:	003eb506 	br	e324 <__alt_mem_Flash_flash_data+0xf400e324>
    e850:	00bef884 	movi	r2,-1054
    e854:	1145c83a 	sub	r2,r2,r5
    e858:	8088d83a 	srl	r4,r16,r2
    e85c:	00800804 	movi	r2,32
    e860:	18801726 	beq	r3,r2,e8c0 <__muldf3+0x704>
    e864:	28810f84 	addi	r2,r5,1086
    e868:	8084983a 	sll	r2,r16,r2
    e86c:	1484b03a 	or	r2,r2,r18
    e870:	1004c03a 	cmpne	r2,r2,zero
    e874:	1104b03a 	or	r2,r2,r4
    e878:	10c001cc 	andi	r3,r2,7
    e87c:	18000b1e 	bne	r3,zero,e8ac <__muldf3+0x6f0>
    e880:	0021883a 	mov	r16,zero
    e884:	1004d0fa 	srli	r2,r2,3
    e888:	b4c0004c 	andi	r19,r22,1
    e88c:	0009883a 	mov	r4,zero
    e890:	10e4b03a 	or	r18,r2,r3
    e894:	003ea306 	br	e324 <__alt_mem_Flash_flash_data+0xf400e324>
    e898:	0007883a 	mov	r3,zero
    e89c:	1820927a 	slli	r16,r3,9
    e8a0:	1806977a 	slli	r3,r3,29
    e8a4:	8020d33a 	srli	r16,r16,12
    e8a8:	003ff606 	br	e884 <__alt_mem_Flash_flash_data+0xf400e884>
    e8ac:	110003cc 	andi	r4,r2,15
    e8b0:	00c00104 	movi	r3,4
    e8b4:	20fff826 	beq	r4,r3,e898 <__alt_mem_Flash_flash_data+0xf400e898>
    e8b8:	0007883a 	mov	r3,zero
    e8bc:	003fd906 	br	e824 <__alt_mem_Flash_flash_data+0xf400e824>
    e8c0:	0005883a 	mov	r2,zero
    e8c4:	003fe906 	br	e86c <__alt_mem_Flash_flash_data+0xf400e86c>
    e8c8:	00800434 	movhi	r2,16
    e8cc:	84000234 	orhi	r16,r16,8
    e8d0:	10bfffc4 	addi	r2,r2,-1
    e8d4:	e4c0004c 	andi	r19,fp,1
    e8d8:	80a0703a 	and	r16,r16,r2
    e8dc:	003ef606 	br	e4b8 <__alt_mem_Flash_flash_data+0xf400e4b8>

0000e8e0 <__subdf3>:
    e8e0:	00c00434 	movhi	r3,16
    e8e4:	18ffffc4 	addi	r3,r3,-1
    e8e8:	defffb04 	addi	sp,sp,-20
    e8ec:	28d2703a 	and	r9,r5,r3
    e8f0:	3814d53a 	srli	r10,r7,20
    e8f4:	38c6703a 	and	r3,r7,r3
    e8f8:	3004d77a 	srli	r2,r6,29
    e8fc:	dc800215 	stw	r18,8(sp)
    e900:	dc000015 	stw	r16,0(sp)
    e904:	2824d7fa 	srli	r18,r5,31
    e908:	2820d53a 	srli	r16,r5,20
    e90c:	481290fa 	slli	r9,r9,3
    e910:	200ad77a 	srli	r5,r4,29
    e914:	180690fa 	slli	r3,r3,3
    e918:	dc400115 	stw	r17,4(sp)
    e91c:	dfc00415 	stw	ra,16(sp)
    e920:	202290fa 	slli	r17,r4,3
    e924:	dcc00315 	stw	r19,12(sp)
    e928:	5281ffcc 	andi	r10,r10,2047
    e92c:	0101ffc4 	movi	r4,2047
    e930:	9011883a 	mov	r8,r18
    e934:	8401ffcc 	andi	r16,r16,2047
    e938:	94803fcc 	andi	r18,r18,255
    e93c:	494ab03a 	or	r5,r9,r5
    e940:	380ed7fa 	srli	r7,r7,31
    e944:	1886b03a 	or	r3,r3,r2
    e948:	300c90fa 	slli	r6,r6,3
    e94c:	51009026 	beq	r10,r4,eb90 <__subdf3+0x2b0>
    e950:	39c0005c 	xori	r7,r7,1
    e954:	8285c83a 	sub	r2,r16,r10
    e958:	91c06f26 	beq	r18,r7,eb18 <__subdf3+0x238>
    e95c:	0080b10e 	bge	zero,r2,ec24 <__subdf3+0x344>
    e960:	50002a1e 	bne	r10,zero,ea0c <__subdf3+0x12c>
    e964:	1988b03a 	or	r4,r3,r6
    e968:	2000941e 	bne	r4,zero,ebbc <__subdf3+0x2dc>
    e96c:	888001cc 	andi	r2,r17,7
    e970:	10005b26 	beq	r2,zero,eae0 <__subdf3+0x200>
    e974:	88c003cc 	andi	r3,r17,15
    e978:	00800104 	movi	r2,4
    e97c:	18805826 	beq	r3,r2,eae0 <__subdf3+0x200>
    e980:	88c00104 	addi	r3,r17,4
    e984:	1c63803a 	cmpltu	r17,r3,r17
    e988:	2c4b883a 	add	r5,r5,r17
    e98c:	2880202c 	andhi	r2,r5,128
    e990:	9200004c 	andi	r8,r18,1
    e994:	1823883a 	mov	r17,r3
    e998:	10005426 	beq	r2,zero,eaec <__subdf3+0x20c>
    e99c:	84000044 	addi	r16,r16,1
    e9a0:	0081ffc4 	movi	r2,2047
    e9a4:	8080bf26 	beq	r16,r2,eca4 <__subdf3+0x3c4>
    e9a8:	013fe034 	movhi	r4,65408
    e9ac:	213fffc4 	addi	r4,r4,-1
    e9b0:	290a703a 	and	r5,r5,r4
    e9b4:	2804977a 	slli	r2,r5,29
    e9b8:	280a927a 	slli	r5,r5,9
    e9bc:	8822d0fa 	srli	r17,r17,3
    e9c0:	8401ffcc 	andi	r16,r16,2047
    e9c4:	2808d33a 	srli	r4,r5,12
    e9c8:	1444b03a 	or	r2,r2,r17
    e9cc:	8401ffcc 	andi	r16,r16,2047
    e9d0:	800a953a 	slli	r5,r16,20
    e9d4:	40c03fcc 	andi	r3,r8,255
    e9d8:	04000434 	movhi	r16,16
    e9dc:	180697fa 	slli	r3,r3,31
    e9e0:	843fffc4 	addi	r16,r16,-1
    e9e4:	2420703a 	and	r16,r4,r16
    e9e8:	8160b03a 	or	r16,r16,r5
    e9ec:	80c6b03a 	or	r3,r16,r3
    e9f0:	dfc00417 	ldw	ra,16(sp)
    e9f4:	dcc00317 	ldw	r19,12(sp)
    e9f8:	dc800217 	ldw	r18,8(sp)
    e9fc:	dc400117 	ldw	r17,4(sp)
    ea00:	dc000017 	ldw	r16,0(sp)
    ea04:	dec00504 	addi	sp,sp,20
    ea08:	f800283a 	ret
    ea0c:	0101ffc4 	movi	r4,2047
    ea10:	813fd626 	beq	r16,r4,e96c <__alt_mem_Flash_flash_data+0xf400e96c>
    ea14:	18c02034 	orhi	r3,r3,128
    ea18:	01000e04 	movi	r4,56
    ea1c:	2080a416 	blt	r4,r2,ecb0 <__subdf3+0x3d0>
    ea20:	010007c4 	movi	r4,31
    ea24:	2080c716 	blt	r4,r2,ed44 <__subdf3+0x464>
    ea28:	01000804 	movi	r4,32
    ea2c:	2089c83a 	sub	r4,r4,r2
    ea30:	1910983a 	sll	r8,r3,r4
    ea34:	308ed83a 	srl	r7,r6,r2
    ea38:	3108983a 	sll	r4,r6,r4
    ea3c:	1884d83a 	srl	r2,r3,r2
    ea40:	41ccb03a 	or	r6,r8,r7
    ea44:	2008c03a 	cmpne	r4,r4,zero
    ea48:	310cb03a 	or	r6,r6,r4
    ea4c:	898dc83a 	sub	r6,r17,r6
    ea50:	89a3803a 	cmpltu	r17,r17,r6
    ea54:	288bc83a 	sub	r5,r5,r2
    ea58:	2c4bc83a 	sub	r5,r5,r17
    ea5c:	3023883a 	mov	r17,r6
    ea60:	2880202c 	andhi	r2,r5,128
    ea64:	10006b26 	beq	r2,zero,ec14 <__subdf3+0x334>
    ea68:	04c02034 	movhi	r19,128
    ea6c:	9cffffc4 	addi	r19,r19,-1
    ea70:	2ce6703a 	and	r19,r5,r19
    ea74:	98007c26 	beq	r19,zero,ec68 <__subdf3+0x388>
    ea78:	9809883a 	mov	r4,r19
    ea7c:	000f3ac0 	call	f3ac <__clzsi2>
    ea80:	10fffe04 	addi	r3,r2,-8
    ea84:	010007c4 	movi	r4,31
    ea88:	20c07d16 	blt	r4,r3,ec80 <__subdf3+0x3a0>
    ea8c:	01400a04 	movi	r5,40
    ea90:	2885c83a 	sub	r2,r5,r2
    ea94:	888ad83a 	srl	r5,r17,r2
    ea98:	98e6983a 	sll	r19,r19,r3
    ea9c:	88e2983a 	sll	r17,r17,r3
    eaa0:	2ce6b03a 	or	r19,r5,r19
    eaa4:	1c007a16 	blt	r3,r16,ec90 <__subdf3+0x3b0>
    eaa8:	1c21c83a 	sub	r16,r3,r16
    eaac:	81400044 	addi	r5,r16,1
    eab0:	00c007c4 	movi	r3,31
    eab4:	19409616 	blt	r3,r5,ed10 <__subdf3+0x430>
    eab8:	1c21c83a 	sub	r16,r3,r16
    eabc:	8c08983a 	sll	r4,r17,r16
    eac0:	8946d83a 	srl	r3,r17,r5
    eac4:	9c20983a 	sll	r16,r19,r16
    eac8:	2008c03a 	cmpne	r4,r4,zero
    eacc:	994ad83a 	srl	r5,r19,r5
    ead0:	1c06b03a 	or	r3,r3,r16
    ead4:	1922b03a 	or	r17,r3,r4
    ead8:	0021883a 	mov	r16,zero
    eadc:	003fa306 	br	e96c <__alt_mem_Flash_flash_data+0xf400e96c>
    eae0:	2880202c 	andhi	r2,r5,128
    eae4:	9200004c 	andi	r8,r18,1
    eae8:	103fac1e 	bne	r2,zero,e99c <__alt_mem_Flash_flash_data+0xf400e99c>
    eaec:	2804977a 	slli	r2,r5,29
    eaf0:	8822d0fa 	srli	r17,r17,3
    eaf4:	00c1ffc4 	movi	r3,2047
    eaf8:	280ad0fa 	srli	r5,r5,3
    eafc:	1444b03a 	or	r2,r2,r17
    eb00:	80c02726 	beq	r16,r3,eba0 <__subdf3+0x2c0>
    eb04:	01000434 	movhi	r4,16
    eb08:	213fffc4 	addi	r4,r4,-1
    eb0c:	80e0703a 	and	r16,r16,r3
    eb10:	2908703a 	and	r4,r5,r4
    eb14:	003fad06 	br	e9cc <__alt_mem_Flash_flash_data+0xf400e9cc>
    eb18:	0080690e 	bge	zero,r2,ecc0 <__subdf3+0x3e0>
    eb1c:	50002f26 	beq	r10,zero,ebdc <__subdf3+0x2fc>
    eb20:	0101ffc4 	movi	r4,2047
    eb24:	813f9126 	beq	r16,r4,e96c <__alt_mem_Flash_flash_data+0xf400e96c>
    eb28:	18c02034 	orhi	r3,r3,128
    eb2c:	01000e04 	movi	r4,56
    eb30:	2080b00e 	bge	r4,r2,edf4 <__subdf3+0x514>
    eb34:	198cb03a 	or	r6,r3,r6
    eb38:	300ec03a 	cmpne	r7,r6,zero
    eb3c:	0005883a 	mov	r2,zero
    eb40:	3c4f883a 	add	r7,r7,r17
    eb44:	3c63803a 	cmpltu	r17,r7,r17
    eb48:	114b883a 	add	r5,r2,r5
    eb4c:	2c4b883a 	add	r5,r5,r17
    eb50:	3823883a 	mov	r17,r7
    eb54:	2880202c 	andhi	r2,r5,128
    eb58:	10002e26 	beq	r2,zero,ec14 <__subdf3+0x334>
    eb5c:	84000044 	addi	r16,r16,1
    eb60:	0081ffc4 	movi	r2,2047
    eb64:	8080de26 	beq	r16,r2,eee0 <__subdf3+0x600>
    eb68:	00bfe034 	movhi	r2,65408
    eb6c:	10bfffc4 	addi	r2,r2,-1
    eb70:	288a703a 	and	r5,r5,r2
    eb74:	880cd07a 	srli	r6,r17,1
    eb78:	280897fa 	slli	r4,r5,31
    eb7c:	88c0004c 	andi	r3,r17,1
    eb80:	30e2b03a 	or	r17,r6,r3
    eb84:	280ad07a 	srli	r5,r5,1
    eb88:	8922b03a 	or	r17,r17,r4
    eb8c:	003f7706 	br	e96c <__alt_mem_Flash_flash_data+0xf400e96c>
    eb90:	1984b03a 	or	r2,r3,r6
    eb94:	103f6e26 	beq	r2,zero,e950 <__alt_mem_Flash_flash_data+0xf400e950>
    eb98:	39c03fcc 	andi	r7,r7,255
    eb9c:	003f6d06 	br	e954 <__alt_mem_Flash_flash_data+0xf400e954>
    eba0:	1146b03a 	or	r3,r2,r5
    eba4:	18003f26 	beq	r3,zero,eca4 <__subdf3+0x3c4>
    eba8:	00c00434 	movhi	r3,16
    ebac:	29000234 	orhi	r4,r5,8
    ebb0:	18ffffc4 	addi	r3,r3,-1
    ebb4:	20c8703a 	and	r4,r4,r3
    ebb8:	003f8406 	br	e9cc <__alt_mem_Flash_flash_data+0xf400e9cc>
    ebbc:	10bfffc4 	addi	r2,r2,-1
    ebc0:	1000501e 	bne	r2,zero,ed04 <__subdf3+0x424>
    ebc4:	898fc83a 	sub	r7,r17,r6
    ebc8:	89e3803a 	cmpltu	r17,r17,r7
    ebcc:	28cbc83a 	sub	r5,r5,r3
    ebd0:	2c4bc83a 	sub	r5,r5,r17
    ebd4:	3823883a 	mov	r17,r7
    ebd8:	003fa106 	br	ea60 <__alt_mem_Flash_flash_data+0xf400ea60>
    ebdc:	1988b03a 	or	r4,r3,r6
    ebe0:	203f6226 	beq	r4,zero,e96c <__alt_mem_Flash_flash_data+0xf400e96c>
    ebe4:	10bfffc4 	addi	r2,r2,-1
    ebe8:	10009b1e 	bne	r2,zero,ee58 <__subdf3+0x578>
    ebec:	344d883a 	add	r6,r6,r17
    ebf0:	3463803a 	cmpltu	r17,r6,r17
    ebf4:	194b883a 	add	r5,r3,r5
    ebf8:	2c4b883a 	add	r5,r5,r17
    ebfc:	3023883a 	mov	r17,r6
    ec00:	003fd406 	br	eb54 <__alt_mem_Flash_flash_data+0xf400eb54>
    ec04:	1106b03a 	or	r3,r2,r4
    ec08:	1800b426 	beq	r3,zero,eedc <__subdf3+0x5fc>
    ec0c:	100b883a 	mov	r5,r2
    ec10:	2023883a 	mov	r17,r4
    ec14:	888001cc 	andi	r2,r17,7
    ec18:	103f561e 	bne	r2,zero,e974 <__alt_mem_Flash_flash_data+0xf400e974>
    ec1c:	9200004c 	andi	r8,r18,1
    ec20:	003fb206 	br	eaec <__alt_mem_Flash_flash_data+0xf400eaec>
    ec24:	1000531e 	bne	r2,zero,ed74 <__subdf3+0x494>
    ec28:	80800044 	addi	r2,r16,1
    ec2c:	1081ffcc 	andi	r2,r2,2047
    ec30:	01000044 	movi	r4,1
    ec34:	2080a00e 	bge	r4,r2,eeb8 <__subdf3+0x5d8>
    ec38:	8985c83a 	sub	r2,r17,r6
    ec3c:	8889803a 	cmpltu	r4,r17,r2
    ec40:	28e7c83a 	sub	r19,r5,r3
    ec44:	9927c83a 	sub	r19,r19,r4
    ec48:	9900202c 	andhi	r4,r19,128
    ec4c:	20006226 	beq	r4,zero,edd8 <__subdf3+0x4f8>
    ec50:	3463c83a 	sub	r17,r6,r17
    ec54:	194bc83a 	sub	r5,r3,r5
    ec58:	344d803a 	cmpltu	r6,r6,r17
    ec5c:	29a7c83a 	sub	r19,r5,r6
    ec60:	3825883a 	mov	r18,r7
    ec64:	983f841e 	bne	r19,zero,ea78 <__alt_mem_Flash_flash_data+0xf400ea78>
    ec68:	8809883a 	mov	r4,r17
    ec6c:	000f3ac0 	call	f3ac <__clzsi2>
    ec70:	10800804 	addi	r2,r2,32
    ec74:	10fffe04 	addi	r3,r2,-8
    ec78:	010007c4 	movi	r4,31
    ec7c:	20ff830e 	bge	r4,r3,ea8c <__alt_mem_Flash_flash_data+0xf400ea8c>
    ec80:	14fff604 	addi	r19,r2,-40
    ec84:	8ce6983a 	sll	r19,r17,r19
    ec88:	0023883a 	mov	r17,zero
    ec8c:	1c3f860e 	bge	r3,r16,eaa8 <__alt_mem_Flash_flash_data+0xf400eaa8>
    ec90:	017fe034 	movhi	r5,65408
    ec94:	297fffc4 	addi	r5,r5,-1
    ec98:	80e1c83a 	sub	r16,r16,r3
    ec9c:	994a703a 	and	r5,r19,r5
    eca0:	003f3206 	br	e96c <__alt_mem_Flash_flash_data+0xf400e96c>
    eca4:	0009883a 	mov	r4,zero
    eca8:	0005883a 	mov	r2,zero
    ecac:	003f4706 	br	e9cc <__alt_mem_Flash_flash_data+0xf400e9cc>
    ecb0:	198cb03a 	or	r6,r3,r6
    ecb4:	300cc03a 	cmpne	r6,r6,zero
    ecb8:	0005883a 	mov	r2,zero
    ecbc:	003f6306 	br	ea4c <__alt_mem_Flash_flash_data+0xf400ea4c>
    ecc0:	10009d1e 	bne	r2,zero,ef38 <__subdf3+0x658>
    ecc4:	81c00044 	addi	r7,r16,1
    ecc8:	3881ffcc 	andi	r2,r7,2047
    eccc:	02400044 	movi	r9,1
    ecd0:	4880680e 	bge	r9,r2,ee74 <__subdf3+0x594>
    ecd4:	0081ffc4 	movi	r2,2047
    ecd8:	3880ae26 	beq	r7,r2,ef94 <__subdf3+0x6b4>
    ecdc:	344d883a 	add	r6,r6,r17
    ece0:	3463803a 	cmpltu	r17,r6,r17
    ece4:	194b883a 	add	r5,r3,r5
    ece8:	2c4b883a 	add	r5,r5,r17
    ecec:	282297fa 	slli	r17,r5,31
    ecf0:	300cd07a 	srli	r6,r6,1
    ecf4:	280ad07a 	srli	r5,r5,1
    ecf8:	3821883a 	mov	r16,r7
    ecfc:	89a2b03a 	or	r17,r17,r6
    ed00:	003f1a06 	br	e96c <__alt_mem_Flash_flash_data+0xf400e96c>
    ed04:	0101ffc4 	movi	r4,2047
    ed08:	813f431e 	bne	r16,r4,ea18 <__alt_mem_Flash_flash_data+0xf400ea18>
    ed0c:	003f1706 	br	e96c <__alt_mem_Flash_flash_data+0xf400e96c>
    ed10:	80bff844 	addi	r2,r16,-31
    ed14:	00c00804 	movi	r3,32
    ed18:	9884d83a 	srl	r2,r19,r2
    ed1c:	28c05126 	beq	r5,r3,ee64 <__subdf3+0x584>
    ed20:	00c00fc4 	movi	r3,63
    ed24:	1c21c83a 	sub	r16,r3,r16
    ed28:	9c26983a 	sll	r19,r19,r16
    ed2c:	9c62b03a 	or	r17,r19,r17
    ed30:	8822c03a 	cmpne	r17,r17,zero
    ed34:	88a2b03a 	or	r17,r17,r2
    ed38:	000b883a 	mov	r5,zero
    ed3c:	0021883a 	mov	r16,zero
    ed40:	003fb406 	br	ec14 <__alt_mem_Flash_flash_data+0xf400ec14>
    ed44:	113ff804 	addi	r4,r2,-32
    ed48:	01c00804 	movi	r7,32
    ed4c:	1908d83a 	srl	r4,r3,r4
    ed50:	11c04626 	beq	r2,r7,ee6c <__subdf3+0x58c>
    ed54:	01c01004 	movi	r7,64
    ed58:	3885c83a 	sub	r2,r7,r2
    ed5c:	1884983a 	sll	r2,r3,r2
    ed60:	118cb03a 	or	r6,r2,r6
    ed64:	300cc03a 	cmpne	r6,r6,zero
    ed68:	310cb03a 	or	r6,r6,r4
    ed6c:	0005883a 	mov	r2,zero
    ed70:	003f3606 	br	ea4c <__alt_mem_Flash_flash_data+0xf400ea4c>
    ed74:	80002b26 	beq	r16,zero,ee24 <__subdf3+0x544>
    ed78:	0101ffc4 	movi	r4,2047
    ed7c:	51006926 	beq	r10,r4,ef24 <__subdf3+0x644>
    ed80:	0085c83a 	sub	r2,zero,r2
    ed84:	29402034 	orhi	r5,r5,128
    ed88:	01000e04 	movi	r4,56
    ed8c:	20807d16 	blt	r4,r2,ef84 <__subdf3+0x6a4>
    ed90:	010007c4 	movi	r4,31
    ed94:	2080d916 	blt	r4,r2,f0fc <__subdf3+0x81c>
    ed98:	01000804 	movi	r4,32
    ed9c:	2089c83a 	sub	r4,r4,r2
    eda0:	2912983a 	sll	r9,r5,r4
    eda4:	8890d83a 	srl	r8,r17,r2
    eda8:	8908983a 	sll	r4,r17,r4
    edac:	2884d83a 	srl	r2,r5,r2
    edb0:	4a22b03a 	or	r17,r9,r8
    edb4:	2008c03a 	cmpne	r4,r4,zero
    edb8:	8922b03a 	or	r17,r17,r4
    edbc:	3463c83a 	sub	r17,r6,r17
    edc0:	1885c83a 	sub	r2,r3,r2
    edc4:	344d803a 	cmpltu	r6,r6,r17
    edc8:	118bc83a 	sub	r5,r2,r6
    edcc:	5021883a 	mov	r16,r10
    edd0:	3825883a 	mov	r18,r7
    edd4:	003f2206 	br	ea60 <__alt_mem_Flash_flash_data+0xf400ea60>
    edd8:	9886b03a 	or	r3,r19,r2
    eddc:	18001c1e 	bne	r3,zero,ee50 <__subdf3+0x570>
    ede0:	0011883a 	mov	r8,zero
    ede4:	000b883a 	mov	r5,zero
    ede8:	0023883a 	mov	r17,zero
    edec:	0021883a 	mov	r16,zero
    edf0:	003f3e06 	br	eaec <__alt_mem_Flash_flash_data+0xf400eaec>
    edf4:	010007c4 	movi	r4,31
    edf8:	20803c16 	blt	r4,r2,eeec <__subdf3+0x60c>
    edfc:	01000804 	movi	r4,32
    ee00:	2089c83a 	sub	r4,r4,r2
    ee04:	1912983a 	sll	r9,r3,r4
    ee08:	308ed83a 	srl	r7,r6,r2
    ee0c:	3108983a 	sll	r4,r6,r4
    ee10:	1884d83a 	srl	r2,r3,r2
    ee14:	49ceb03a 	or	r7,r9,r7
    ee18:	2008c03a 	cmpne	r4,r4,zero
    ee1c:	390eb03a 	or	r7,r7,r4
    ee20:	003f4706 	br	eb40 <__alt_mem_Flash_flash_data+0xf400eb40>
    ee24:	2c48b03a 	or	r4,r5,r17
    ee28:	20003e26 	beq	r4,zero,ef24 <__subdf3+0x644>
    ee2c:	0084303a 	nor	r2,zero,r2
    ee30:	10003a1e 	bne	r2,zero,ef1c <__subdf3+0x63c>
    ee34:	3463c83a 	sub	r17,r6,r17
    ee38:	194bc83a 	sub	r5,r3,r5
    ee3c:	344d803a 	cmpltu	r6,r6,r17
    ee40:	298bc83a 	sub	r5,r5,r6
    ee44:	5021883a 	mov	r16,r10
    ee48:	3825883a 	mov	r18,r7
    ee4c:	003f0406 	br	ea60 <__alt_mem_Flash_flash_data+0xf400ea60>
    ee50:	1023883a 	mov	r17,r2
    ee54:	003f0706 	br	ea74 <__alt_mem_Flash_flash_data+0xf400ea74>
    ee58:	0101ffc4 	movi	r4,2047
    ee5c:	813f331e 	bne	r16,r4,eb2c <__alt_mem_Flash_flash_data+0xf400eb2c>
    ee60:	003ec206 	br	e96c <__alt_mem_Flash_flash_data+0xf400e96c>
    ee64:	0027883a 	mov	r19,zero
    ee68:	003fb006 	br	ed2c <__alt_mem_Flash_flash_data+0xf400ed2c>
    ee6c:	0005883a 	mov	r2,zero
    ee70:	003fbb06 	br	ed60 <__alt_mem_Flash_flash_data+0xf400ed60>
    ee74:	2c44b03a 	or	r2,r5,r17
    ee78:	80008b1e 	bne	r16,zero,f0a8 <__subdf3+0x7c8>
    ee7c:	1000b526 	beq	r2,zero,f154 <__subdf3+0x874>
    ee80:	1984b03a 	or	r2,r3,r6
    ee84:	103eb926 	beq	r2,zero,e96c <__alt_mem_Flash_flash_data+0xf400e96c>
    ee88:	3449883a 	add	r4,r6,r17
    ee8c:	2463803a 	cmpltu	r17,r4,r17
    ee90:	194b883a 	add	r5,r3,r5
    ee94:	2c4b883a 	add	r5,r5,r17
    ee98:	2880202c 	andhi	r2,r5,128
    ee9c:	2023883a 	mov	r17,r4
    eea0:	103f5c26 	beq	r2,zero,ec14 <__alt_mem_Flash_flash_data+0xf400ec14>
    eea4:	00bfe034 	movhi	r2,65408
    eea8:	10bfffc4 	addi	r2,r2,-1
    eeac:	4821883a 	mov	r16,r9
    eeb0:	288a703a 	and	r5,r5,r2
    eeb4:	003ead06 	br	e96c <__alt_mem_Flash_flash_data+0xf400e96c>
    eeb8:	2c44b03a 	or	r2,r5,r17
    eebc:	8000291e 	bne	r16,zero,ef64 <__subdf3+0x684>
    eec0:	10004f1e 	bne	r2,zero,f000 <__subdf3+0x720>
    eec4:	1984b03a 	or	r2,r3,r6
    eec8:	10000426 	beq	r2,zero,eedc <__subdf3+0x5fc>
    eecc:	180b883a 	mov	r5,r3
    eed0:	3023883a 	mov	r17,r6
    eed4:	3825883a 	mov	r18,r7
    eed8:	003ea406 	br	e96c <__alt_mem_Flash_flash_data+0xf400e96c>
    eedc:	0011883a 	mov	r8,zero
    eee0:	000b883a 	mov	r5,zero
    eee4:	0023883a 	mov	r17,zero
    eee8:	003f0006 	br	eaec <__alt_mem_Flash_flash_data+0xf400eaec>
    eeec:	11fff804 	addi	r7,r2,-32
    eef0:	19c8d83a 	srl	r4,r3,r7
    eef4:	01c00804 	movi	r7,32
    eef8:	11c07e26 	beq	r2,r7,f0f4 <__subdf3+0x814>
    eefc:	01c01004 	movi	r7,64
    ef00:	3885c83a 	sub	r2,r7,r2
    ef04:	1884983a 	sll	r2,r3,r2
    ef08:	118cb03a 	or	r6,r2,r6
    ef0c:	300ec03a 	cmpne	r7,r6,zero
    ef10:	390eb03a 	or	r7,r7,r4
    ef14:	0005883a 	mov	r2,zero
    ef18:	003f0906 	br	eb40 <__alt_mem_Flash_flash_data+0xf400eb40>
    ef1c:	0101ffc4 	movi	r4,2047
    ef20:	513f991e 	bne	r10,r4,ed88 <__alt_mem_Flash_flash_data+0xf400ed88>
    ef24:	180b883a 	mov	r5,r3
    ef28:	3023883a 	mov	r17,r6
    ef2c:	5021883a 	mov	r16,r10
    ef30:	3825883a 	mov	r18,r7
    ef34:	003e8d06 	br	e96c <__alt_mem_Flash_flash_data+0xf400e96c>
    ef38:	80001a1e 	bne	r16,zero,efa4 <__subdf3+0x6c4>
    ef3c:	2c48b03a 	or	r4,r5,r17
    ef40:	20005526 	beq	r4,zero,f098 <__subdf3+0x7b8>
    ef44:	0084303a 	nor	r2,zero,r2
    ef48:	1000511e 	bne	r2,zero,f090 <__subdf3+0x7b0>
    ef4c:	89a3883a 	add	r17,r17,r6
    ef50:	194b883a 	add	r5,r3,r5
    ef54:	898d803a 	cmpltu	r6,r17,r6
    ef58:	298b883a 	add	r5,r5,r6
    ef5c:	5021883a 	mov	r16,r10
    ef60:	003efc06 	br	eb54 <__alt_mem_Flash_flash_data+0xf400eb54>
    ef64:	1000341e 	bne	r2,zero,f038 <__subdf3+0x758>
    ef68:	1984b03a 	or	r2,r3,r6
    ef6c:	10006f26 	beq	r2,zero,f12c <__subdf3+0x84c>
    ef70:	180b883a 	mov	r5,r3
    ef74:	3023883a 	mov	r17,r6
    ef78:	3825883a 	mov	r18,r7
    ef7c:	0401ffc4 	movi	r16,2047
    ef80:	003e7a06 	br	e96c <__alt_mem_Flash_flash_data+0xf400e96c>
    ef84:	2c62b03a 	or	r17,r5,r17
    ef88:	8822c03a 	cmpne	r17,r17,zero
    ef8c:	0005883a 	mov	r2,zero
    ef90:	003f8a06 	br	edbc <__alt_mem_Flash_flash_data+0xf400edbc>
    ef94:	3821883a 	mov	r16,r7
    ef98:	000b883a 	mov	r5,zero
    ef9c:	0023883a 	mov	r17,zero
    efa0:	003ed206 	br	eaec <__alt_mem_Flash_flash_data+0xf400eaec>
    efa4:	0101ffc4 	movi	r4,2047
    efa8:	51003b26 	beq	r10,r4,f098 <__subdf3+0x7b8>
    efac:	0085c83a 	sub	r2,zero,r2
    efb0:	29402034 	orhi	r5,r5,128
    efb4:	01000e04 	movi	r4,56
    efb8:	20806216 	blt	r4,r2,f144 <__subdf3+0x864>
    efbc:	010007c4 	movi	r4,31
    efc0:	20806b16 	blt	r4,r2,f170 <__subdf3+0x890>
    efc4:	01000804 	movi	r4,32
    efc8:	2089c83a 	sub	r4,r4,r2
    efcc:	2912983a 	sll	r9,r5,r4
    efd0:	888ed83a 	srl	r7,r17,r2
    efd4:	8908983a 	sll	r4,r17,r4
    efd8:	2884d83a 	srl	r2,r5,r2
    efdc:	49e2b03a 	or	r17,r9,r7
    efe0:	2008c03a 	cmpne	r4,r4,zero
    efe4:	8922b03a 	or	r17,r17,r4
    efe8:	89a3883a 	add	r17,r17,r6
    efec:	10c5883a 	add	r2,r2,r3
    eff0:	898d803a 	cmpltu	r6,r17,r6
    eff4:	118b883a 	add	r5,r2,r6
    eff8:	5021883a 	mov	r16,r10
    effc:	003ed506 	br	eb54 <__alt_mem_Flash_flash_data+0xf400eb54>
    f000:	1984b03a 	or	r2,r3,r6
    f004:	103e5926 	beq	r2,zero,e96c <__alt_mem_Flash_flash_data+0xf400e96c>
    f008:	8989c83a 	sub	r4,r17,r6
    f00c:	8911803a 	cmpltu	r8,r17,r4
    f010:	28c5c83a 	sub	r2,r5,r3
    f014:	1205c83a 	sub	r2,r2,r8
    f018:	1200202c 	andhi	r8,r2,128
    f01c:	403ef926 	beq	r8,zero,ec04 <__alt_mem_Flash_flash_data+0xf400ec04>
    f020:	3463c83a 	sub	r17,r6,r17
    f024:	194bc83a 	sub	r5,r3,r5
    f028:	344d803a 	cmpltu	r6,r6,r17
    f02c:	298bc83a 	sub	r5,r5,r6
    f030:	3825883a 	mov	r18,r7
    f034:	003e4d06 	br	e96c <__alt_mem_Flash_flash_data+0xf400e96c>
    f038:	1984b03a 	or	r2,r3,r6
    f03c:	10002b26 	beq	r2,zero,f0ec <__subdf3+0x80c>
    f040:	2808d0fa 	srli	r4,r5,3
    f044:	8822d0fa 	srli	r17,r17,3
    f048:	280a977a 	slli	r5,r5,29
    f04c:	2080022c 	andhi	r2,r4,8
    f050:	2c62b03a 	or	r17,r5,r17
    f054:	10000826 	beq	r2,zero,f078 <__subdf3+0x798>
    f058:	1810d0fa 	srli	r8,r3,3
    f05c:	4080022c 	andhi	r2,r8,8
    f060:	1000051e 	bne	r2,zero,f078 <__subdf3+0x798>
    f064:	300cd0fa 	srli	r6,r6,3
    f068:	1804977a 	slli	r2,r3,29
    f06c:	4009883a 	mov	r4,r8
    f070:	3825883a 	mov	r18,r7
    f074:	11a2b03a 	or	r17,r2,r6
    f078:	880ad77a 	srli	r5,r17,29
    f07c:	200890fa 	slli	r4,r4,3
    f080:	882290fa 	slli	r17,r17,3
    f084:	0401ffc4 	movi	r16,2047
    f088:	290ab03a 	or	r5,r5,r4
    f08c:	003e3706 	br	e96c <__alt_mem_Flash_flash_data+0xf400e96c>
    f090:	0101ffc4 	movi	r4,2047
    f094:	513fc71e 	bne	r10,r4,efb4 <__alt_mem_Flash_flash_data+0xf400efb4>
    f098:	180b883a 	mov	r5,r3
    f09c:	3023883a 	mov	r17,r6
    f0a0:	5021883a 	mov	r16,r10
    f0a4:	003e3106 	br	e96c <__alt_mem_Flash_flash_data+0xf400e96c>
    f0a8:	10002d26 	beq	r2,zero,f160 <__subdf3+0x880>
    f0ac:	1984b03a 	or	r2,r3,r6
    f0b0:	10000e26 	beq	r2,zero,f0ec <__subdf3+0x80c>
    f0b4:	2808d0fa 	srli	r4,r5,3
    f0b8:	8822d0fa 	srli	r17,r17,3
    f0bc:	280a977a 	slli	r5,r5,29
    f0c0:	2080022c 	andhi	r2,r4,8
    f0c4:	2c62b03a 	or	r17,r5,r17
    f0c8:	103feb26 	beq	r2,zero,f078 <__alt_mem_Flash_flash_data+0xf400f078>
    f0cc:	180ed0fa 	srli	r7,r3,3
    f0d0:	3880022c 	andhi	r2,r7,8
    f0d4:	103fe81e 	bne	r2,zero,f078 <__alt_mem_Flash_flash_data+0xf400f078>
    f0d8:	300cd0fa 	srli	r6,r6,3
    f0dc:	1804977a 	slli	r2,r3,29
    f0e0:	3809883a 	mov	r4,r7
    f0e4:	11a2b03a 	or	r17,r2,r6
    f0e8:	003fe306 	br	f078 <__alt_mem_Flash_flash_data+0xf400f078>
    f0ec:	0401ffc4 	movi	r16,2047
    f0f0:	003e1e06 	br	e96c <__alt_mem_Flash_flash_data+0xf400e96c>
    f0f4:	0005883a 	mov	r2,zero
    f0f8:	003f8306 	br	ef08 <__alt_mem_Flash_flash_data+0xf400ef08>
    f0fc:	113ff804 	addi	r4,r2,-32
    f100:	02000804 	movi	r8,32
    f104:	2908d83a 	srl	r4,r5,r4
    f108:	12002526 	beq	r2,r8,f1a0 <__subdf3+0x8c0>
    f10c:	02001004 	movi	r8,64
    f110:	4085c83a 	sub	r2,r8,r2
    f114:	288a983a 	sll	r5,r5,r2
    f118:	2c62b03a 	or	r17,r5,r17
    f11c:	8822c03a 	cmpne	r17,r17,zero
    f120:	8922b03a 	or	r17,r17,r4
    f124:	0005883a 	mov	r2,zero
    f128:	003f2406 	br	edbc <__alt_mem_Flash_flash_data+0xf400edbc>
    f12c:	01402034 	movhi	r5,128
    f130:	0011883a 	mov	r8,zero
    f134:	297fffc4 	addi	r5,r5,-1
    f138:	047ffe04 	movi	r17,-8
    f13c:	0401ffc4 	movi	r16,2047
    f140:	003e6a06 	br	eaec <__alt_mem_Flash_flash_data+0xf400eaec>
    f144:	2c62b03a 	or	r17,r5,r17
    f148:	8822c03a 	cmpne	r17,r17,zero
    f14c:	0005883a 	mov	r2,zero
    f150:	003fa506 	br	efe8 <__alt_mem_Flash_flash_data+0xf400efe8>
    f154:	180b883a 	mov	r5,r3
    f158:	3023883a 	mov	r17,r6
    f15c:	003e0306 	br	e96c <__alt_mem_Flash_flash_data+0xf400e96c>
    f160:	180b883a 	mov	r5,r3
    f164:	3023883a 	mov	r17,r6
    f168:	0401ffc4 	movi	r16,2047
    f16c:	003dff06 	br	e96c <__alt_mem_Flash_flash_data+0xf400e96c>
    f170:	113ff804 	addi	r4,r2,-32
    f174:	01c00804 	movi	r7,32
    f178:	2908d83a 	srl	r4,r5,r4
    f17c:	11c00a26 	beq	r2,r7,f1a8 <__subdf3+0x8c8>
    f180:	01c01004 	movi	r7,64
    f184:	3885c83a 	sub	r2,r7,r2
    f188:	288a983a 	sll	r5,r5,r2
    f18c:	2c62b03a 	or	r17,r5,r17
    f190:	8822c03a 	cmpne	r17,r17,zero
    f194:	8922b03a 	or	r17,r17,r4
    f198:	0005883a 	mov	r2,zero
    f19c:	003f9206 	br	efe8 <__alt_mem_Flash_flash_data+0xf400efe8>
    f1a0:	000b883a 	mov	r5,zero
    f1a4:	003fdc06 	br	f118 <__alt_mem_Flash_flash_data+0xf400f118>
    f1a8:	000b883a 	mov	r5,zero
    f1ac:	003ff706 	br	f18c <__alt_mem_Flash_flash_data+0xf400f18c>

0000f1b0 <__fixdfsi>:
    f1b0:	2806d53a 	srli	r3,r5,20
    f1b4:	00800434 	movhi	r2,16
    f1b8:	10bfffc4 	addi	r2,r2,-1
    f1bc:	18c1ffcc 	andi	r3,r3,2047
    f1c0:	0180ff84 	movi	r6,1022
    f1c4:	2884703a 	and	r2,r5,r2
    f1c8:	280ad7fa 	srli	r5,r5,31
    f1cc:	30c0130e 	bge	r6,r3,f21c <__fixdfsi+0x6c>
    f1d0:	01810744 	movi	r6,1053
    f1d4:	30c00d16 	blt	r6,r3,f20c <__fixdfsi+0x5c>
    f1d8:	01810cc4 	movi	r6,1075
    f1dc:	30cdc83a 	sub	r6,r6,r3
    f1e0:	01c007c4 	movi	r7,31
    f1e4:	10800434 	orhi	r2,r2,16
    f1e8:	39800e0e 	bge	r7,r6,f224 <__fixdfsi+0x74>
    f1ec:	010104c4 	movi	r4,1043
    f1f0:	20c7c83a 	sub	r3,r4,r3
    f1f4:	10c6d83a 	srl	r3,r2,r3
    f1f8:	29403fcc 	andi	r5,r5,255
    f1fc:	0145c83a 	sub	r2,zero,r5
    f200:	1884f03a 	xor	r2,r3,r2
    f204:	1145883a 	add	r2,r2,r5
    f208:	f800283a 	ret
    f20c:	00a00034 	movhi	r2,32768
    f210:	10bfffc4 	addi	r2,r2,-1
    f214:	2885883a 	add	r2,r5,r2
    f218:	f800283a 	ret
    f21c:	0005883a 	mov	r2,zero
    f220:	f800283a 	ret
    f224:	18fefb44 	addi	r3,r3,-1043
    f228:	2188d83a 	srl	r4,r4,r6
    f22c:	10c6983a 	sll	r3,r2,r3
    f230:	20c6b03a 	or	r3,r4,r3
    f234:	003ff006 	br	f1f8 <__alt_mem_Flash_flash_data+0xf400f1f8>

0000f238 <__floatsidf>:
    f238:	defffd04 	addi	sp,sp,-12
    f23c:	dc400115 	stw	r17,4(sp)
    f240:	dfc00215 	stw	ra,8(sp)
    f244:	dc000015 	stw	r16,0(sp)
    f248:	2023883a 	mov	r17,r4
    f24c:	20001426 	beq	r4,zero,f2a0 <__floatsidf+0x68>
    f250:	2020d7fa 	srli	r16,r4,31
    f254:	80000126 	beq	r16,zero,f25c <__floatsidf+0x24>
    f258:	0123c83a 	sub	r17,zero,r4
    f25c:	8809883a 	mov	r4,r17
    f260:	000f3ac0 	call	f3ac <__clzsi2>
    f264:	01410784 	movi	r5,1054
    f268:	00c00284 	movi	r3,10
    f26c:	288bc83a 	sub	r5,r5,r2
    f270:	18801c16 	blt	r3,r2,f2e4 <__floatsidf+0xac>
    f274:	00c002c4 	movi	r3,11
    f278:	1887c83a 	sub	r3,r3,r2
    f27c:	88c8d83a 	srl	r4,r17,r3
    f280:	00c00434 	movhi	r3,16
    f284:	18ffffc4 	addi	r3,r3,-1
    f288:	10800544 	addi	r2,r2,21
    f28c:	20c8703a 	and	r4,r4,r3
    f290:	8884983a 	sll	r2,r17,r2
    f294:	28c1ffcc 	andi	r3,r5,2047
    f298:	800d883a 	mov	r6,r16
    f29c:	00000406 	br	f2b0 <__floatsidf+0x78>
    f2a0:	000d883a 	mov	r6,zero
    f2a4:	0007883a 	mov	r3,zero
    f2a8:	0009883a 	mov	r4,zero
    f2ac:	0005883a 	mov	r2,zero
    f2b0:	180a953a 	slli	r5,r3,20
    f2b4:	31803fcc 	andi	r6,r6,255
    f2b8:	00c00434 	movhi	r3,16
    f2bc:	300c97fa 	slli	r6,r6,31
    f2c0:	18ffffc4 	addi	r3,r3,-1
    f2c4:	20c6703a 	and	r3,r4,r3
    f2c8:	1946b03a 	or	r3,r3,r5
    f2cc:	1986b03a 	or	r3,r3,r6
    f2d0:	dfc00217 	ldw	ra,8(sp)
    f2d4:	dc400117 	ldw	r17,4(sp)
    f2d8:	dc000017 	ldw	r16,0(sp)
    f2dc:	dec00304 	addi	sp,sp,12
    f2e0:	f800283a 	ret
    f2e4:	10fffd44 	addi	r3,r2,-11
    f2e8:	88c8983a 	sll	r4,r17,r3
    f2ec:	00800434 	movhi	r2,16
    f2f0:	10bfffc4 	addi	r2,r2,-1
    f2f4:	2088703a 	and	r4,r4,r2
    f2f8:	28c1ffcc 	andi	r3,r5,2047
    f2fc:	800d883a 	mov	r6,r16
    f300:	0005883a 	mov	r2,zero
    f304:	003fea06 	br	f2b0 <__alt_mem_Flash_flash_data+0xf400f2b0>

0000f308 <__floatunsidf>:
    f308:	defffe04 	addi	sp,sp,-8
    f30c:	dc000015 	stw	r16,0(sp)
    f310:	dfc00115 	stw	ra,4(sp)
    f314:	2021883a 	mov	r16,r4
    f318:	20001026 	beq	r4,zero,f35c <__floatunsidf+0x54>
    f31c:	000f3ac0 	call	f3ac <__clzsi2>
    f320:	01410784 	movi	r5,1054
    f324:	100d883a 	mov	r6,r2
    f328:	288bc83a 	sub	r5,r5,r2
    f32c:	00800284 	movi	r2,10
    f330:	11801616 	blt	r2,r6,f38c <__floatunsidf+0x84>
    f334:	008002c4 	movi	r2,11
    f338:	1185c83a 	sub	r2,r2,r6
    f33c:	8084d83a 	srl	r2,r16,r2
    f340:	00c00434 	movhi	r3,16
    f344:	31c00544 	addi	r7,r6,21
    f348:	18ffffc4 	addi	r3,r3,-1
    f34c:	81e0983a 	sll	r16,r16,r7
    f350:	10cc703a 	and	r6,r2,r3
    f354:	2941ffcc 	andi	r5,r5,2047
    f358:	00000206 	br	f364 <__floatunsidf+0x5c>
    f35c:	000b883a 	mov	r5,zero
    f360:	000d883a 	mov	r6,zero
    f364:	280a953a 	slli	r5,r5,20
    f368:	00c00434 	movhi	r3,16
    f36c:	18ffffc4 	addi	r3,r3,-1
    f370:	30c6703a 	and	r3,r6,r3
    f374:	8005883a 	mov	r2,r16
    f378:	1946b03a 	or	r3,r3,r5
    f37c:	dfc00117 	ldw	ra,4(sp)
    f380:	dc000017 	ldw	r16,0(sp)
    f384:	dec00204 	addi	sp,sp,8
    f388:	f800283a 	ret
    f38c:	31bffd44 	addi	r6,r6,-11
    f390:	818c983a 	sll	r6,r16,r6
    f394:	00800434 	movhi	r2,16
    f398:	10bfffc4 	addi	r2,r2,-1
    f39c:	2941ffcc 	andi	r5,r5,2047
    f3a0:	0021883a 	mov	r16,zero
    f3a4:	308c703a 	and	r6,r6,r2
    f3a8:	003fee06 	br	f364 <__alt_mem_Flash_flash_data+0xf400f364>

0000f3ac <__clzsi2>:
    f3ac:	00bfffd4 	movui	r2,65535
    f3b0:	11000b36 	bltu	r2,r4,f3e0 <__clzsi2+0x34>
    f3b4:	00803fc4 	movi	r2,255
    f3b8:	1100122e 	bgeu	r2,r4,f404 <__clzsi2+0x58>
    f3bc:	00c00204 	movi	r3,8
    f3c0:	01400604 	movi	r5,24
    f3c4:	20c8d83a 	srl	r4,r4,r3
    f3c8:	008000b4 	movhi	r2,2
    f3cc:	10b28704 	addi	r2,r2,-13796
    f3d0:	1109883a 	add	r4,r2,r4
    f3d4:	20800003 	ldbu	r2,0(r4)
    f3d8:	2885c83a 	sub	r2,r5,r2
    f3dc:	f800283a 	ret
    f3e0:	00804034 	movhi	r2,256
    f3e4:	10bfffc4 	addi	r2,r2,-1
    f3e8:	11000336 	bltu	r2,r4,f3f8 <__clzsi2+0x4c>
    f3ec:	00c00404 	movi	r3,16
    f3f0:	180b883a 	mov	r5,r3
    f3f4:	003ff306 	br	f3c4 <__alt_mem_Flash_flash_data+0xf400f3c4>
    f3f8:	00c00604 	movi	r3,24
    f3fc:	01400204 	movi	r5,8
    f400:	003ff006 	br	f3c4 <__alt_mem_Flash_flash_data+0xf400f3c4>
    f404:	0007883a 	mov	r3,zero
    f408:	01400804 	movi	r5,32
    f40c:	003fed06 	br	f3c4 <__alt_mem_Flash_flash_data+0xf400f3c4>

0000f410 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    f410:	defffe04 	addi	sp,sp,-8
    f414:	dfc00115 	stw	ra,4(sp)
    f418:	df000015 	stw	fp,0(sp)
    f41c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    f420:	008000b4 	movhi	r2,2
    f424:	10bb3304 	addi	r2,r2,-4916
    f428:	10800017 	ldw	r2,0(r2)
    f42c:	10000526 	beq	r2,zero,f444 <alt_get_errno+0x34>
    f430:	008000b4 	movhi	r2,2
    f434:	10bb3304 	addi	r2,r2,-4916
    f438:	10800017 	ldw	r2,0(r2)
    f43c:	103ee83a 	callr	r2
    f440:	00000206 	br	f44c <alt_get_errno+0x3c>
    f444:	008000b4 	movhi	r2,2
    f448:	10834d04 	addi	r2,r2,3380
}
    f44c:	e037883a 	mov	sp,fp
    f450:	dfc00117 	ldw	ra,4(sp)
    f454:	df000017 	ldw	fp,0(sp)
    f458:	dec00204 	addi	sp,sp,8
    f45c:	f800283a 	ret

0000f460 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
    f460:	defffb04 	addi	sp,sp,-20
    f464:	dfc00415 	stw	ra,16(sp)
    f468:	df000315 	stw	fp,12(sp)
    f46c:	df000304 	addi	fp,sp,12
    f470:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
    f474:	e0bfff17 	ldw	r2,-4(fp)
    f478:	10000616 	blt	r2,zero,f494 <close+0x34>
    f47c:	e0bfff17 	ldw	r2,-4(fp)
    f480:	10c00324 	muli	r3,r2,12
    f484:	008000b4 	movhi	r2,2
    f488:	10b5bf04 	addi	r2,r2,-10500
    f48c:	1885883a 	add	r2,r3,r2
    f490:	00000106 	br	f498 <close+0x38>
    f494:	0005883a 	mov	r2,zero
    f498:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
    f49c:	e0bffd17 	ldw	r2,-12(fp)
    f4a0:	10001926 	beq	r2,zero,f508 <close+0xa8>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
    f4a4:	e0bffd17 	ldw	r2,-12(fp)
    f4a8:	10800017 	ldw	r2,0(r2)
    f4ac:	10800417 	ldw	r2,16(r2)
    f4b0:	10000626 	beq	r2,zero,f4cc <close+0x6c>
    f4b4:	e0bffd17 	ldw	r2,-12(fp)
    f4b8:	10800017 	ldw	r2,0(r2)
    f4bc:	10800417 	ldw	r2,16(r2)
    f4c0:	e13ffd17 	ldw	r4,-12(fp)
    f4c4:	103ee83a 	callr	r2
    f4c8:	00000106 	br	f4d0 <close+0x70>
    f4cc:	0005883a 	mov	r2,zero
    f4d0:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
    f4d4:	e13fff17 	ldw	r4,-4(fp)
    f4d8:	000fb780 	call	fb78 <alt_release_fd>
    if (rval < 0)
    f4dc:	e0bffe17 	ldw	r2,-8(fp)
    f4e0:	1000070e 	bge	r2,zero,f500 <close+0xa0>
    {
      ALT_ERRNO = -rval;
    f4e4:	000f4100 	call	f410 <alt_get_errno>
    f4e8:	1007883a 	mov	r3,r2
    f4ec:	e0bffe17 	ldw	r2,-8(fp)
    f4f0:	0085c83a 	sub	r2,zero,r2
    f4f4:	18800015 	stw	r2,0(r3)
      return -1;
    f4f8:	00bfffc4 	movi	r2,-1
    f4fc:	00000706 	br	f51c <close+0xbc>
    }
    return 0;
    f500:	0005883a 	mov	r2,zero
    f504:	00000506 	br	f51c <close+0xbc>
  }
  else
  {
    ALT_ERRNO = EBADFD;
    f508:	000f4100 	call	f410 <alt_get_errno>
    f50c:	1007883a 	mov	r3,r2
    f510:	00801444 	movi	r2,81
    f514:	18800015 	stw	r2,0(r3)
    return -1;
    f518:	00bfffc4 	movi	r2,-1
  }
}
    f51c:	e037883a 	mov	sp,fp
    f520:	dfc00117 	ldw	ra,4(sp)
    f524:	df000017 	ldw	fp,0(sp)
    f528:	dec00204 	addi	sp,sp,8
    f52c:	f800283a 	ret

0000f530 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
    f530:	defffc04 	addi	sp,sp,-16
    f534:	df000315 	stw	fp,12(sp)
    f538:	df000304 	addi	fp,sp,12
    f53c:	e13ffd15 	stw	r4,-12(fp)
    f540:	e17ffe15 	stw	r5,-8(fp)
    f544:	e1bfff15 	stw	r6,-4(fp)
  return len;
    f548:	e0bfff17 	ldw	r2,-4(fp)
}
    f54c:	e037883a 	mov	sp,fp
    f550:	df000017 	ldw	fp,0(sp)
    f554:	dec00104 	addi	sp,sp,4
    f558:	f800283a 	ret

0000f55c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    f55c:	defffe04 	addi	sp,sp,-8
    f560:	dfc00115 	stw	ra,4(sp)
    f564:	df000015 	stw	fp,0(sp)
    f568:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    f56c:	008000b4 	movhi	r2,2
    f570:	10bb3304 	addi	r2,r2,-4916
    f574:	10800017 	ldw	r2,0(r2)
    f578:	10000526 	beq	r2,zero,f590 <alt_get_errno+0x34>
    f57c:	008000b4 	movhi	r2,2
    f580:	10bb3304 	addi	r2,r2,-4916
    f584:	10800017 	ldw	r2,0(r2)
    f588:	103ee83a 	callr	r2
    f58c:	00000206 	br	f598 <alt_get_errno+0x3c>
    f590:	008000b4 	movhi	r2,2
    f594:	10834d04 	addi	r2,r2,3380
}
    f598:	e037883a 	mov	sp,fp
    f59c:	dfc00117 	ldw	ra,4(sp)
    f5a0:	df000017 	ldw	fp,0(sp)
    f5a4:	dec00204 	addi	sp,sp,8
    f5a8:	f800283a 	ret

0000f5ac <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
    f5ac:	defffb04 	addi	sp,sp,-20
    f5b0:	dfc00415 	stw	ra,16(sp)
    f5b4:	df000315 	stw	fp,12(sp)
    f5b8:	df000304 	addi	fp,sp,12
    f5bc:	e13ffe15 	stw	r4,-8(fp)
    f5c0:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    f5c4:	e0bffe17 	ldw	r2,-8(fp)
    f5c8:	10000616 	blt	r2,zero,f5e4 <fstat+0x38>
    f5cc:	e0bffe17 	ldw	r2,-8(fp)
    f5d0:	10c00324 	muli	r3,r2,12
    f5d4:	008000b4 	movhi	r2,2
    f5d8:	10b5bf04 	addi	r2,r2,-10500
    f5dc:	1885883a 	add	r2,r3,r2
    f5e0:	00000106 	br	f5e8 <fstat+0x3c>
    f5e4:	0005883a 	mov	r2,zero
    f5e8:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
    f5ec:	e0bffd17 	ldw	r2,-12(fp)
    f5f0:	10001026 	beq	r2,zero,f634 <fstat+0x88>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
    f5f4:	e0bffd17 	ldw	r2,-12(fp)
    f5f8:	10800017 	ldw	r2,0(r2)
    f5fc:	10800817 	ldw	r2,32(r2)
    f600:	10000726 	beq	r2,zero,f620 <fstat+0x74>
    {
      return fd->dev->fstat(fd, st);
    f604:	e0bffd17 	ldw	r2,-12(fp)
    f608:	10800017 	ldw	r2,0(r2)
    f60c:	10800817 	ldw	r2,32(r2)
    f610:	e13ffd17 	ldw	r4,-12(fp)
    f614:	e17fff17 	ldw	r5,-4(fp)
    f618:	103ee83a 	callr	r2
    f61c:	00000a06 	br	f648 <fstat+0x9c>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
    f620:	e0bfff17 	ldw	r2,-4(fp)
    f624:	00c80004 	movi	r3,8192
    f628:	10c00115 	stw	r3,4(r2)
      return 0;
    f62c:	0005883a 	mov	r2,zero
    f630:	00000506 	br	f648 <fstat+0x9c>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
    f634:	000f55c0 	call	f55c <alt_get_errno>
    f638:	1007883a 	mov	r3,r2
    f63c:	00801444 	movi	r2,81
    f640:	18800015 	stw	r2,0(r3)
    return -1;
    f644:	00bfffc4 	movi	r2,-1
  }
}
    f648:	e037883a 	mov	sp,fp
    f64c:	dfc00117 	ldw	ra,4(sp)
    f650:	df000017 	ldw	fp,0(sp)
    f654:	dec00204 	addi	sp,sp,8
    f658:	f800283a 	ret

0000f65c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    f65c:	defffe04 	addi	sp,sp,-8
    f660:	dfc00115 	stw	ra,4(sp)
    f664:	df000015 	stw	fp,0(sp)
    f668:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    f66c:	008000b4 	movhi	r2,2
    f670:	10bb3304 	addi	r2,r2,-4916
    f674:	10800017 	ldw	r2,0(r2)
    f678:	10000526 	beq	r2,zero,f690 <alt_get_errno+0x34>
    f67c:	008000b4 	movhi	r2,2
    f680:	10bb3304 	addi	r2,r2,-4916
    f684:	10800017 	ldw	r2,0(r2)
    f688:	103ee83a 	callr	r2
    f68c:	00000206 	br	f698 <alt_get_errno+0x3c>
    f690:	008000b4 	movhi	r2,2
    f694:	10834d04 	addi	r2,r2,3380
}
    f698:	e037883a 	mov	sp,fp
    f69c:	dfc00117 	ldw	ra,4(sp)
    f6a0:	df000017 	ldw	fp,0(sp)
    f6a4:	dec00204 	addi	sp,sp,8
    f6a8:	f800283a 	ret

0000f6ac <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
    f6ac:	deffed04 	addi	sp,sp,-76
    f6b0:	dfc01215 	stw	ra,72(sp)
    f6b4:	df001115 	stw	fp,68(sp)
    f6b8:	df001104 	addi	fp,sp,68
    f6bc:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    f6c0:	e0bfff17 	ldw	r2,-4(fp)
    f6c4:	10000616 	blt	r2,zero,f6e0 <isatty+0x34>
    f6c8:	e0bfff17 	ldw	r2,-4(fp)
    f6cc:	10c00324 	muli	r3,r2,12
    f6d0:	008000b4 	movhi	r2,2
    f6d4:	10b5bf04 	addi	r2,r2,-10500
    f6d8:	1885883a 	add	r2,r3,r2
    f6dc:	00000106 	br	f6e4 <isatty+0x38>
    f6e0:	0005883a 	mov	r2,zero
    f6e4:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
    f6e8:	e0bfef17 	ldw	r2,-68(fp)
    f6ec:	10000e26 	beq	r2,zero,f728 <isatty+0x7c>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
    f6f0:	e0bfef17 	ldw	r2,-68(fp)
    f6f4:	10800017 	ldw	r2,0(r2)
    f6f8:	10800817 	ldw	r2,32(r2)
    f6fc:	1000021e 	bne	r2,zero,f708 <isatty+0x5c>
    {
      return 1;
    f700:	00800044 	movi	r2,1
    f704:	00000d06 	br	f73c <isatty+0x90>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
    f708:	e0bff004 	addi	r2,fp,-64
    f70c:	e13fff17 	ldw	r4,-4(fp)
    f710:	100b883a 	mov	r5,r2
    f714:	000f5ac0 	call	f5ac <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
    f718:	e0bff117 	ldw	r2,-60(fp)
    f71c:	10880020 	cmpeqi	r2,r2,8192
    f720:	10803fcc 	andi	r2,r2,255
    f724:	00000506 	br	f73c <isatty+0x90>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
    f728:	000f65c0 	call	f65c <alt_get_errno>
    f72c:	1007883a 	mov	r3,r2
    f730:	00801444 	movi	r2,81
    f734:	18800015 	stw	r2,0(r3)
    return 0;
    f738:	0005883a 	mov	r2,zero
  }
}
    f73c:	e037883a 	mov	sp,fp
    f740:	dfc00117 	ldw	ra,4(sp)
    f744:	df000017 	ldw	fp,0(sp)
    f748:	dec00204 	addi	sp,sp,8
    f74c:	f800283a 	ret

0000f750 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
    f750:	defffc04 	addi	sp,sp,-16
    f754:	df000315 	stw	fp,12(sp)
    f758:	df000304 	addi	fp,sp,12
    f75c:	e13ffd15 	stw	r4,-12(fp)
    f760:	e17ffe15 	stw	r5,-8(fp)
    f764:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
    f768:	e0fffe17 	ldw	r3,-8(fp)
    f76c:	e0bffd17 	ldw	r2,-12(fp)
    f770:	18800c26 	beq	r3,r2,f7a4 <alt_load_section+0x54>
  {
    while( to != end )
    f774:	00000806 	br	f798 <alt_load_section+0x48>
    {
      *to++ = *from++;
    f778:	e0bffe17 	ldw	r2,-8(fp)
    f77c:	10c00104 	addi	r3,r2,4
    f780:	e0fffe15 	stw	r3,-8(fp)
    f784:	e0fffd17 	ldw	r3,-12(fp)
    f788:	19000104 	addi	r4,r3,4
    f78c:	e13ffd15 	stw	r4,-12(fp)
    f790:	18c00017 	ldw	r3,0(r3)
    f794:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
    f798:	e0fffe17 	ldw	r3,-8(fp)
    f79c:	e0bfff17 	ldw	r2,-4(fp)
    f7a0:	18bff51e 	bne	r3,r2,f778 <__alt_mem_Flash_flash_data+0xf400f778>
    {
      *to++ = *from++;
    }
  }
}
    f7a4:	e037883a 	mov	sp,fp
    f7a8:	df000017 	ldw	fp,0(sp)
    f7ac:	dec00104 	addi	sp,sp,4
    f7b0:	f800283a 	ret

0000f7b4 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
    f7b4:	defffe04 	addi	sp,sp,-8
    f7b8:	dfc00115 	stw	ra,4(sp)
    f7bc:	df000015 	stw	fp,0(sp)
    f7c0:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
    f7c4:	010000b4 	movhi	r4,2
    f7c8:	213b5704 	addi	r4,r4,-4772
    f7cc:	014000b4 	movhi	r5,2
    f7d0:	29738204 	addi	r5,r5,-12792
    f7d4:	018000b4 	movhi	r6,2
    f7d8:	31bb5704 	addi	r6,r6,-4772
    f7dc:	000f7500 	call	f750 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
    f7e0:	01000034 	movhi	r4,0
    f7e4:	21000804 	addi	r4,r4,32
    f7e8:	01400034 	movhi	r5,0
    f7ec:	29400804 	addi	r5,r5,32
    f7f0:	01800034 	movhi	r6,0
    f7f4:	31809104 	addi	r6,r6,580
    f7f8:	000f7500 	call	f750 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
    f7fc:	010000b4 	movhi	r4,2
    f800:	21318504 	addi	r4,r4,-14828
    f804:	014000b4 	movhi	r5,2
    f808:	29718504 	addi	r5,r5,-14828
    f80c:	018000b4 	movhi	r6,2
    f810:	31b38204 	addi	r6,r6,-12792
    f814:	000f7500 	call	f750 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
    f818:	001b25c0 	call	1b25c <alt_dcache_flush_all>
  alt_icache_flush_all();
    f81c:	001b4b40 	call	1b4b4 <alt_icache_flush_all>
}
    f820:	e037883a 	mov	sp,fp
    f824:	dfc00117 	ldw	ra,4(sp)
    f828:	df000017 	ldw	fp,0(sp)
    f82c:	dec00204 	addi	sp,sp,8
    f830:	f800283a 	ret

0000f834 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    f834:	defffe04 	addi	sp,sp,-8
    f838:	dfc00115 	stw	ra,4(sp)
    f83c:	df000015 	stw	fp,0(sp)
    f840:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    f844:	008000b4 	movhi	r2,2
    f848:	10bb3304 	addi	r2,r2,-4916
    f84c:	10800017 	ldw	r2,0(r2)
    f850:	10000526 	beq	r2,zero,f868 <alt_get_errno+0x34>
    f854:	008000b4 	movhi	r2,2
    f858:	10bb3304 	addi	r2,r2,-4916
    f85c:	10800017 	ldw	r2,0(r2)
    f860:	103ee83a 	callr	r2
    f864:	00000206 	br	f870 <alt_get_errno+0x3c>
    f868:	008000b4 	movhi	r2,2
    f86c:	10834d04 	addi	r2,r2,3380
}
    f870:	e037883a 	mov	sp,fp
    f874:	dfc00117 	ldw	ra,4(sp)
    f878:	df000017 	ldw	fp,0(sp)
    f87c:	dec00204 	addi	sp,sp,8
    f880:	f800283a 	ret

0000f884 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
    f884:	defff904 	addi	sp,sp,-28
    f888:	dfc00615 	stw	ra,24(sp)
    f88c:	df000515 	stw	fp,20(sp)
    f890:	df000504 	addi	fp,sp,20
    f894:	e13ffd15 	stw	r4,-12(fp)
    f898:	e17ffe15 	stw	r5,-8(fp)
    f89c:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
    f8a0:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    f8a4:	e0bffd17 	ldw	r2,-12(fp)
    f8a8:	10000616 	blt	r2,zero,f8c4 <lseek+0x40>
    f8ac:	e0bffd17 	ldw	r2,-12(fp)
    f8b0:	10c00324 	muli	r3,r2,12
    f8b4:	008000b4 	movhi	r2,2
    f8b8:	10b5bf04 	addi	r2,r2,-10500
    f8bc:	1885883a 	add	r2,r3,r2
    f8c0:	00000106 	br	f8c8 <lseek+0x44>
    f8c4:	0005883a 	mov	r2,zero
    f8c8:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
    f8cc:	e0bffc17 	ldw	r2,-16(fp)
    f8d0:	10001026 	beq	r2,zero,f914 <lseek+0x90>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
    f8d4:	e0bffc17 	ldw	r2,-16(fp)
    f8d8:	10800017 	ldw	r2,0(r2)
    f8dc:	10800717 	ldw	r2,28(r2)
    f8e0:	10000926 	beq	r2,zero,f908 <lseek+0x84>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
    f8e4:	e0bffc17 	ldw	r2,-16(fp)
    f8e8:	10800017 	ldw	r2,0(r2)
    f8ec:	10800717 	ldw	r2,28(r2)
    f8f0:	e13ffc17 	ldw	r4,-16(fp)
    f8f4:	e17ffe17 	ldw	r5,-8(fp)
    f8f8:	e1bfff17 	ldw	r6,-4(fp)
    f8fc:	103ee83a 	callr	r2
    f900:	e0bffb15 	stw	r2,-20(fp)
    f904:	00000506 	br	f91c <lseek+0x98>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
    f908:	00bfde84 	movi	r2,-134
    f90c:	e0bffb15 	stw	r2,-20(fp)
    f910:	00000206 	br	f91c <lseek+0x98>
    }
  }
  else  
  {
    rc = -EBADFD;
    f914:	00bfebc4 	movi	r2,-81
    f918:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
    f91c:	e0bffb17 	ldw	r2,-20(fp)
    f920:	1000070e 	bge	r2,zero,f940 <lseek+0xbc>
  {
    ALT_ERRNO = -rc;
    f924:	000f8340 	call	f834 <alt_get_errno>
    f928:	1007883a 	mov	r3,r2
    f92c:	e0bffb17 	ldw	r2,-20(fp)
    f930:	0085c83a 	sub	r2,zero,r2
    f934:	18800015 	stw	r2,0(r3)
    rc = -1;
    f938:	00bfffc4 	movi	r2,-1
    f93c:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
    f940:	e0bffb17 	ldw	r2,-20(fp)
}
    f944:	e037883a 	mov	sp,fp
    f948:	dfc00117 	ldw	ra,4(sp)
    f94c:	df000017 	ldw	fp,0(sp)
    f950:	dec00204 	addi	sp,sp,8
    f954:	f800283a 	ret

0000f958 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
    f958:	defff904 	addi	sp,sp,-28
    f95c:	dfc00615 	stw	ra,24(sp)
    f960:	df000515 	stw	fp,20(sp)
    f964:	df000504 	addi	fp,sp,20
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
    f968:	0009883a 	mov	r4,zero
    f96c:	001892c0 	call	1892c <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
    f970:	00109480 	call	10948 <OSInit>
    f974:	01000044 	movi	r4,1
    f978:	00160400 	call	16040 <OSSemCreate>
    f97c:	1007883a 	mov	r3,r2
    f980:	008000b4 	movhi	r2,2
    f984:	10835304 	addi	r2,r2,3404
    f988:	10c00015 	stw	r3,0(r2)
    f98c:	01000044 	movi	r4,1
    f990:	00160400 	call	16040 <OSSemCreate>
    f994:	1007883a 	mov	r3,r2
    f998:	008000b4 	movhi	r2,2
    f99c:	10835504 	addi	r2,r2,3412
    f9a0:	10c00015 	stw	r3,0(r2)
    f9a4:	008000b4 	movhi	r2,2
    f9a8:	10834e04 	addi	r2,r2,3384
    f9ac:	e0bffc15 	stw	r2,-16(fp)
    f9b0:	00800044 	movi	r2,1
    f9b4:	e0bffd0d 	sth	r2,-12(fp)
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sem_create (OS_EVENT** sem, 
              INT16U value)
{
  *sem = OSSemCreate (value);
    f9b8:	e0bffd0b 	ldhu	r2,-12(fp)
    f9bc:	1009883a 	mov	r4,r2
    f9c0:	00160400 	call	16040 <OSSemCreate>
    f9c4:	1007883a 	mov	r3,r2
    f9c8:	e0bffc17 	ldw	r2,-16(fp)
    f9cc:	10c00015 	stw	r3,0(r2)
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
    f9d0:	00189600 	call	18960 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
    f9d4:	010000b4 	movhi	r4,2
    f9d8:	2132ca04 	addi	r4,r4,-13528
    f9dc:	014000b4 	movhi	r5,2
    f9e0:	2972ca04 	addi	r5,r5,-13528
    f9e4:	018000b4 	movhi	r6,2
    f9e8:	31b2ca04 	addi	r6,r6,-13528
    f9ec:	001b5a40 	call	1b5a4 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
    f9f0:	001b36c0 	call	1b36c <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
    f9f4:	010000b4 	movhi	r4,2
    f9f8:	212cf204 	addi	r4,r4,-19512
    f9fc:	001c2680 	call	1c268 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
    fa00:	d1283417 	ldw	r4,-24368(gp)
    fa04:	d0e83517 	ldw	r3,-24364(gp)
    fa08:	d0a83617 	ldw	r2,-24360(gp)
    fa0c:	180b883a 	mov	r5,r3
    fa10:	100d883a 	mov	r6,r2
    fa14:	00024ec0 	call	24ec <main>
    fa18:	e0bffb15 	stw	r2,-20(fp)
  close(STDOUT_FILENO);
    fa1c:	01000044 	movi	r4,1
    fa20:	000f4600 	call	f460 <close>
  exit (result);
    fa24:	e13ffb17 	ldw	r4,-20(fp)
    fa28:	001c27c0 	call	1c27c <exit>

0000fa2c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    fa2c:	defffe04 	addi	sp,sp,-8
    fa30:	dfc00115 	stw	ra,4(sp)
    fa34:	df000015 	stw	fp,0(sp)
    fa38:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    fa3c:	008000b4 	movhi	r2,2
    fa40:	10bb3304 	addi	r2,r2,-4916
    fa44:	10800017 	ldw	r2,0(r2)
    fa48:	10000526 	beq	r2,zero,fa60 <alt_get_errno+0x34>
    fa4c:	008000b4 	movhi	r2,2
    fa50:	10bb3304 	addi	r2,r2,-4916
    fa54:	10800017 	ldw	r2,0(r2)
    fa58:	103ee83a 	callr	r2
    fa5c:	00000206 	br	fa68 <alt_get_errno+0x3c>
    fa60:	008000b4 	movhi	r2,2
    fa64:	10834d04 	addi	r2,r2,3380
}
    fa68:	e037883a 	mov	sp,fp
    fa6c:	dfc00117 	ldw	ra,4(sp)
    fa70:	df000017 	ldw	fp,0(sp)
    fa74:	dec00204 	addi	sp,sp,8
    fa78:	f800283a 	ret

0000fa7c <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
    fa7c:	defff904 	addi	sp,sp,-28
    fa80:	dfc00615 	stw	ra,24(sp)
    fa84:	df000515 	stw	fp,20(sp)
    fa88:	df000504 	addi	fp,sp,20
    fa8c:	e13ffd15 	stw	r4,-12(fp)
    fa90:	e17ffe15 	stw	r5,-8(fp)
    fa94:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    fa98:	e0bffd17 	ldw	r2,-12(fp)
    fa9c:	10000616 	blt	r2,zero,fab8 <read+0x3c>
    faa0:	e0bffd17 	ldw	r2,-12(fp)
    faa4:	10c00324 	muli	r3,r2,12
    faa8:	008000b4 	movhi	r2,2
    faac:	10b5bf04 	addi	r2,r2,-10500
    fab0:	1885883a 	add	r2,r3,r2
    fab4:	00000106 	br	fabc <read+0x40>
    fab8:	0005883a 	mov	r2,zero
    fabc:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
    fac0:	e0bffb17 	ldw	r2,-20(fp)
    fac4:	10002226 	beq	r2,zero,fb50 <read+0xd4>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
    fac8:	e0bffb17 	ldw	r2,-20(fp)
    facc:	10800217 	ldw	r2,8(r2)
    fad0:	108000cc 	andi	r2,r2,3
    fad4:	10800060 	cmpeqi	r2,r2,1
    fad8:	1000181e 	bne	r2,zero,fb3c <read+0xc0>
        (fd->dev->read))
    fadc:	e0bffb17 	ldw	r2,-20(fp)
    fae0:	10800017 	ldw	r2,0(r2)
    fae4:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
    fae8:	10001426 	beq	r2,zero,fb3c <read+0xc0>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
    faec:	e0bffb17 	ldw	r2,-20(fp)
    faf0:	10800017 	ldw	r2,0(r2)
    faf4:	10800517 	ldw	r2,20(r2)
    faf8:	e0ffff17 	ldw	r3,-4(fp)
    fafc:	e13ffb17 	ldw	r4,-20(fp)
    fb00:	e17ffe17 	ldw	r5,-8(fp)
    fb04:	180d883a 	mov	r6,r3
    fb08:	103ee83a 	callr	r2
    fb0c:	e0bffc15 	stw	r2,-16(fp)
    fb10:	e0bffc17 	ldw	r2,-16(fp)
    fb14:	1000070e 	bge	r2,zero,fb34 <read+0xb8>
        {
          ALT_ERRNO = -rval;
    fb18:	000fa2c0 	call	fa2c <alt_get_errno>
    fb1c:	1007883a 	mov	r3,r2
    fb20:	e0bffc17 	ldw	r2,-16(fp)
    fb24:	0085c83a 	sub	r2,zero,r2
    fb28:	18800015 	stw	r2,0(r3)
          return -1;
    fb2c:	00bfffc4 	movi	r2,-1
    fb30:	00000c06 	br	fb64 <read+0xe8>
        }
        return rval;
    fb34:	e0bffc17 	ldw	r2,-16(fp)
    fb38:	00000a06 	br	fb64 <read+0xe8>
      }
      else
      {
        ALT_ERRNO = EACCES;
    fb3c:	000fa2c0 	call	fa2c <alt_get_errno>
    fb40:	1007883a 	mov	r3,r2
    fb44:	00800344 	movi	r2,13
    fb48:	18800015 	stw	r2,0(r3)
    fb4c:	00000406 	br	fb60 <read+0xe4>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
    fb50:	000fa2c0 	call	fa2c <alt_get_errno>
    fb54:	1007883a 	mov	r3,r2
    fb58:	00801444 	movi	r2,81
    fb5c:	18800015 	stw	r2,0(r3)
  }
  return -1;
    fb60:	00bfffc4 	movi	r2,-1
}
    fb64:	e037883a 	mov	sp,fp
    fb68:	dfc00117 	ldw	ra,4(sp)
    fb6c:	df000017 	ldw	fp,0(sp)
    fb70:	dec00204 	addi	sp,sp,8
    fb74:	f800283a 	ret

0000fb78 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
    fb78:	defffe04 	addi	sp,sp,-8
    fb7c:	df000115 	stw	fp,4(sp)
    fb80:	df000104 	addi	fp,sp,4
    fb84:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
    fb88:	e0bfff17 	ldw	r2,-4(fp)
    fb8c:	108000d0 	cmplti	r2,r2,3
    fb90:	10000d1e 	bne	r2,zero,fbc8 <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
    fb94:	008000b4 	movhi	r2,2
    fb98:	10b5bf04 	addi	r2,r2,-10500
    fb9c:	e0ffff17 	ldw	r3,-4(fp)
    fba0:	18c00324 	muli	r3,r3,12
    fba4:	18c00204 	addi	r3,r3,8
    fba8:	10c5883a 	add	r2,r2,r3
    fbac:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
    fbb0:	008000b4 	movhi	r2,2
    fbb4:	10b5bf04 	addi	r2,r2,-10500
    fbb8:	e0ffff17 	ldw	r3,-4(fp)
    fbbc:	18c00324 	muli	r3,r3,12
    fbc0:	10c5883a 	add	r2,r2,r3
    fbc4:	10000015 	stw	zero,0(r2)
  }
}
    fbc8:	e037883a 	mov	sp,fp
    fbcc:	df000017 	ldw	fp,0(sp)
    fbd0:	dec00104 	addi	sp,sp,4
    fbd4:	f800283a 	ret

0000fbd8 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
    fbd8:	defff904 	addi	sp,sp,-28
    fbdc:	df000615 	stw	fp,24(sp)
    fbe0:	df000604 	addi	fp,sp,24
    fbe4:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    fbe8:	0005303a 	rdctl	r2,status
    fbec:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    fbf0:	e0fffc17 	ldw	r3,-16(fp)
    fbf4:	00bfff84 	movi	r2,-2
    fbf8:	1884703a 	and	r2,r3,r2
    fbfc:	1001703a 	wrctl	status,r2
  
  return context;
    fc00:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
    fc04:	e0bffa15 	stw	r2,-24(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
    fc08:	d0a01917 	ldw	r2,-32668(gp)
    fc0c:	10c000c4 	addi	r3,r2,3
    fc10:	00bfff04 	movi	r2,-4
    fc14:	1884703a 	and	r2,r3,r2
    fc18:	d0a01915 	stw	r2,-32668(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
    fc1c:	d0e01917 	ldw	r3,-32668(gp)
    fc20:	e0bfff17 	ldw	r2,-4(fp)
    fc24:	1887883a 	add	r3,r3,r2
    fc28:	00810034 	movhi	r2,1024
    fc2c:	10800004 	addi	r2,r2,0
    fc30:	10c0062e 	bgeu	r2,r3,fc4c <sbrk+0x74>
    fc34:	e0bffa17 	ldw	r2,-24(fp)
    fc38:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    fc3c:	e0bffd17 	ldw	r2,-12(fp)
    fc40:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
    fc44:	00bfffc4 	movi	r2,-1
    fc48:	00000b06 	br	fc78 <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
    fc4c:	d0a01917 	ldw	r2,-32668(gp)
    fc50:	e0bffb15 	stw	r2,-20(fp)
  heap_end += incr; 
    fc54:	d0e01917 	ldw	r3,-32668(gp)
    fc58:	e0bfff17 	ldw	r2,-4(fp)
    fc5c:	1885883a 	add	r2,r3,r2
    fc60:	d0a01915 	stw	r2,-32668(gp)
    fc64:	e0bffa17 	ldw	r2,-24(fp)
    fc68:	e0bffe15 	stw	r2,-8(fp)
    fc6c:	e0bffe17 	ldw	r2,-8(fp)
    fc70:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
    fc74:	e0bffb17 	ldw	r2,-20(fp)
} 
    fc78:	e037883a 	mov	sp,fp
    fc7c:	df000017 	ldw	fp,0(sp)
    fc80:	dec00104 	addi	sp,sp,4
    fc84:	f800283a 	ret

0000fc88 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    fc88:	defffe04 	addi	sp,sp,-8
    fc8c:	dfc00115 	stw	ra,4(sp)
    fc90:	df000015 	stw	fp,0(sp)
    fc94:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    fc98:	008000b4 	movhi	r2,2
    fc9c:	10bb3304 	addi	r2,r2,-4916
    fca0:	10800017 	ldw	r2,0(r2)
    fca4:	10000526 	beq	r2,zero,fcbc <alt_get_errno+0x34>
    fca8:	008000b4 	movhi	r2,2
    fcac:	10bb3304 	addi	r2,r2,-4916
    fcb0:	10800017 	ldw	r2,0(r2)
    fcb4:	103ee83a 	callr	r2
    fcb8:	00000206 	br	fcc4 <alt_get_errno+0x3c>
    fcbc:	008000b4 	movhi	r2,2
    fcc0:	10834d04 	addi	r2,r2,3380
}
    fcc4:	e037883a 	mov	sp,fp
    fcc8:	dfc00117 	ldw	ra,4(sp)
    fccc:	df000017 	ldw	fp,0(sp)
    fcd0:	dec00204 	addi	sp,sp,8
    fcd4:	f800283a 	ret

0000fcd8 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
    fcd8:	defff904 	addi	sp,sp,-28
    fcdc:	dfc00615 	stw	ra,24(sp)
    fce0:	df000515 	stw	fp,20(sp)
    fce4:	df000504 	addi	fp,sp,20
    fce8:	e13ffd15 	stw	r4,-12(fp)
    fcec:	e17ffe15 	stw	r5,-8(fp)
    fcf0:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    fcf4:	e0bffd17 	ldw	r2,-12(fp)
    fcf8:	10000616 	blt	r2,zero,fd14 <write+0x3c>
    fcfc:	e0bffd17 	ldw	r2,-12(fp)
    fd00:	10c00324 	muli	r3,r2,12
    fd04:	008000b4 	movhi	r2,2
    fd08:	10b5bf04 	addi	r2,r2,-10500
    fd0c:	1885883a 	add	r2,r3,r2
    fd10:	00000106 	br	fd18 <write+0x40>
    fd14:	0005883a 	mov	r2,zero
    fd18:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
    fd1c:	e0bffb17 	ldw	r2,-20(fp)
    fd20:	10002126 	beq	r2,zero,fda8 <write+0xd0>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
    fd24:	e0bffb17 	ldw	r2,-20(fp)
    fd28:	10800217 	ldw	r2,8(r2)
    fd2c:	108000cc 	andi	r2,r2,3
    fd30:	10001826 	beq	r2,zero,fd94 <write+0xbc>
    fd34:	e0bffb17 	ldw	r2,-20(fp)
    fd38:	10800017 	ldw	r2,0(r2)
    fd3c:	10800617 	ldw	r2,24(r2)
    fd40:	10001426 	beq	r2,zero,fd94 <write+0xbc>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
    fd44:	e0bffb17 	ldw	r2,-20(fp)
    fd48:	10800017 	ldw	r2,0(r2)
    fd4c:	10800617 	ldw	r2,24(r2)
    fd50:	e0ffff17 	ldw	r3,-4(fp)
    fd54:	e13ffb17 	ldw	r4,-20(fp)
    fd58:	e17ffe17 	ldw	r5,-8(fp)
    fd5c:	180d883a 	mov	r6,r3
    fd60:	103ee83a 	callr	r2
    fd64:	e0bffc15 	stw	r2,-16(fp)
    fd68:	e0bffc17 	ldw	r2,-16(fp)
    fd6c:	1000070e 	bge	r2,zero,fd8c <write+0xb4>
      {
        ALT_ERRNO = -rval;
    fd70:	000fc880 	call	fc88 <alt_get_errno>
    fd74:	1007883a 	mov	r3,r2
    fd78:	e0bffc17 	ldw	r2,-16(fp)
    fd7c:	0085c83a 	sub	r2,zero,r2
    fd80:	18800015 	stw	r2,0(r3)
        return -1;
    fd84:	00bfffc4 	movi	r2,-1
    fd88:	00000c06 	br	fdbc <write+0xe4>
      }
      return rval;
    fd8c:	e0bffc17 	ldw	r2,-16(fp)
    fd90:	00000a06 	br	fdbc <write+0xe4>
    }
    else
    {
      ALT_ERRNO = EACCES;
    fd94:	000fc880 	call	fc88 <alt_get_errno>
    fd98:	1007883a 	mov	r3,r2
    fd9c:	00800344 	movi	r2,13
    fda0:	18800015 	stw	r2,0(r3)
    fda4:	00000406 	br	fdb8 <write+0xe0>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
    fda8:	000fc880 	call	fc88 <alt_get_errno>
    fdac:	1007883a 	mov	r3,r2
    fdb0:	00801444 	movi	r2,81
    fdb4:	18800015 	stw	r2,0(r3)
  }
  return -1;
    fdb8:	00bfffc4 	movi	r2,-1
}
    fdbc:	e037883a 	mov	sp,fp
    fdc0:	dfc00117 	ldw	ra,4(sp)
    fdc4:	df000017 	ldw	fp,0(sp)
    fdc8:	dec00204 	addi	sp,sp,8
    fdcc:	f800283a 	ret

0000fdd0 <__env_lock>:
/*
 *
 */

void __env_lock ( struct _reent *_r )
{
    fdd0:	deffdf04 	addi	sp,sp,-132
    fdd4:	dfc02015 	stw	ra,128(sp)
    fdd8:	df001f15 	stw	fp,124(sp)
    fddc:	df001f04 	addi	fp,sp,124
    fde0:	e13fff15 	stw	r4,-4(fp)
  INT8U err;
  int id;

  /* use our priority as a task id */

  err = OSTaskQuery( OS_PRIO_SELF, &tcb );
    fde4:	e0bfe204 	addi	r2,fp,-120
    fde8:	01003fc4 	movi	r4,255
    fdec:	100b883a 	mov	r5,r2
    fdf0:	00181f40 	call	181f4 <OSTaskQuery>
    fdf4:	e0bffe85 	stb	r2,-6(fp)
  if (err != OS_NO_ERR)
    fdf8:	e0bffe83 	ldbu	r2,-6(fp)
    fdfc:	10803fcc 	andi	r2,r2,255
    fe00:	10000126 	beq	r2,zero,fe08 <__env_lock+0x38>
    return;
    fe04:	00001d06 	br	fe7c <__env_lock+0xac>

  id = tcb.OSTCBPrio;
    fe08:	e0bfee83 	ldbu	r2,-70(fp)
    fe0c:	10803fcc 	andi	r2,r2,255
    fe10:	e0bfe115 	stw	r2,-124(fp)
   
  /* see if we own the environment already */

  OSSemQuery( alt_envsem, &semdata );
    fe14:	d0e83817 	ldw	r3,-24352(gp)
    fe18:	e0bffd04 	addi	r2,fp,-12
    fe1c:	1809883a 	mov	r4,r3
    fe20:	100b883a 	mov	r5,r2
    fe24:	001688c0 	call	1688c <OSSemQuery>
  if( semdata.OSEventGrp && id == lockid ) 
    fe28:	e0bffe43 	ldbu	r2,-7(fp)
    fe2c:	10803fcc 	andi	r2,r2,255
    fe30:	10000726 	beq	r2,zero,fe50 <__env_lock+0x80>
    fe34:	d0a01a17 	ldw	r2,-32664(gp)
    fe38:	e0ffe117 	ldw	r3,-124(fp)
    fe3c:	1880041e 	bne	r3,r2,fe50 <__env_lock+0x80>
  {
    /* we do; just count the recursion */

    locks++;
    fe40:	d0a83717 	ldw	r2,-24356(gp)
    fe44:	10800044 	addi	r2,r2,1
    fe48:	d0a83715 	stw	r2,-24356(gp)
    fe4c:	00000a06 	br	fe78 <__env_lock+0xa8>
  }
  else 
  {
    /* wait on the other task to yield, then claim ownership */

    OSSemPend( alt_envsem, 0, &err );
    fe50:	d0e83817 	ldw	r3,-24352(gp)
    fe54:	e0bffe84 	addi	r2,fp,-6
    fe58:	1809883a 	mov	r4,r3
    fe5c:	000b883a 	mov	r5,zero
    fe60:	100d883a 	mov	r6,r2
    fe64:	00163a80 	call	163a8 <OSSemPend>
    locks  = 1;
    fe68:	00800044 	movi	r2,1
    fe6c:	d0a83715 	stw	r2,-24356(gp)
    lockid = id;
    fe70:	e0bfe117 	ldw	r2,-124(fp)
    fe74:	d0a01a15 	stw	r2,-32664(gp)
  }

#endif /* OS_THREAD_SAFE_NEWLIB */
  return;
    fe78:	0001883a 	nop
}
    fe7c:	e037883a 	mov	sp,fp
    fe80:	dfc00117 	ldw	ra,4(sp)
    fe84:	df000017 	ldw	fp,0(sp)
    fe88:	dec00204 	addi	sp,sp,8
    fe8c:	f800283a 	ret

0000fe90 <__env_unlock>:
/*
 *
 */

void __env_unlock ( struct _reent *_r )
{
    fe90:	defffd04 	addi	sp,sp,-12
    fe94:	dfc00215 	stw	ra,8(sp)
    fe98:	df000115 	stw	fp,4(sp)
    fe9c:	df000104 	addi	fp,sp,4
    fea0:	e13fff15 	stw	r4,-4(fp)
#if OS_THREAD_SAFE_NEWLIB
  if (locks == 0)
    fea4:	d0a83717 	ldw	r2,-24356(gp)
    fea8:	1000011e 	bne	r2,zero,feb0 <__env_unlock+0x20>
    return;
    feac:	00000a06 	br	fed8 <__env_unlock+0x48>
   /* 
    * release the environment once the number of locks == the number 
    * of unlocks 
    */

  if( (--locks) == 0 ) 
    feb0:	d0a83717 	ldw	r2,-24356(gp)
    feb4:	10bfffc4 	addi	r2,r2,-1
    feb8:	d0a83715 	stw	r2,-24356(gp)
    febc:	d0a83717 	ldw	r2,-24356(gp)
    fec0:	1000051e 	bne	r2,zero,fed8 <__env_unlock+0x48>
  {
    lockid = -1;
    fec4:	00bfffc4 	movi	r2,-1
    fec8:	d0a01a15 	stw	r2,-32664(gp)
    OSSemPost( alt_envsem );
    fecc:	d0a83817 	ldw	r2,-24352(gp)
    fed0:	1009883a 	mov	r4,r2
    fed4:	001677c0 	call	1677c <OSSemPost>
  }
#endif /* OS_THREAD_SAFE_NEWLIB */
}
    fed8:	e037883a 	mov	sp,fp
    fedc:	dfc00117 	ldw	ra,4(sp)
    fee0:	df000017 	ldw	fp,0(sp)
    fee4:	dec00204 	addi	sp,sp,8
    fee8:	f800283a 	ret

0000feec <__malloc_lock>:
/*
 *
 */

void __malloc_lock ( struct _reent *_r )
{
    feec:	deffdb04 	addi	sp,sp,-148
    fef0:	dfc02415 	stw	ra,144(sp)
    fef4:	df002315 	stw	fp,140(sp)
    fef8:	df002304 	addi	fp,sp,140
    fefc:	e13fff15 	stw	r4,-4(fp)
  OS_TCB tcb;
  OS_SEM_DATA semdata;
  INT8U err;
  int id;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
    ff00:	e03fdd15 	stw	zero,-140(fp)
#endif  
  
  if (OSRunning != OS_TRUE)
    ff04:	008000b4 	movhi	r2,2
    ff08:	10835644 	addi	r2,r2,3417
    ff0c:	10800003 	ldbu	r2,0(r2)
    ff10:	10803fcc 	andi	r2,r2,255
    ff14:	10800060 	cmpeqi	r2,r2,1
    ff18:	1000011e 	bne	r2,zero,ff20 <__malloc_lock+0x34>
      return;
    ff1c:	00003606 	br	fff8 <__malloc_lock+0x10c>

  /* use our priority as a task id */

  err = OSTaskQuery( OS_PRIO_SELF, &tcb );
    ff20:	e0bfe204 	addi	r2,fp,-120
    ff24:	01003fc4 	movi	r4,255
    ff28:	100b883a 	mov	r5,r2
    ff2c:	00181f40 	call	181f4 <OSTaskQuery>
    ff30:	e0bffe85 	stb	r2,-6(fp)
  if (err != OS_NO_ERR)
    ff34:	e0bffe83 	ldbu	r2,-6(fp)
    ff38:	10803fcc 	andi	r2,r2,255
    ff3c:	10000126 	beq	r2,zero,ff44 <__malloc_lock+0x58>
    return;
    ff40:	00002d06 	br	fff8 <__malloc_lock+0x10c>

  id = tcb.OSTCBPrio;
    ff44:	e0bfee83 	ldbu	r2,-70(fp)
    ff48:	10803fcc 	andi	r2,r2,255
    ff4c:	e0bfde15 	stw	r2,-136(fp)
   
  /* see if we own the heap already */

  OSSemQuery( alt_heapsem, &semdata );
    ff50:	d0e83a17 	ldw	r3,-24344(gp)
    ff54:	e0bffd04 	addi	r2,fp,-12
    ff58:	1809883a 	mov	r4,r3
    ff5c:	100b883a 	mov	r5,r2
    ff60:	001688c0 	call	1688c <OSSemQuery>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    ff64:	0005303a 	rdctl	r2,status
    ff68:	e0bfdf15 	stw	r2,-132(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    ff6c:	e0ffdf17 	ldw	r3,-132(fp)
    ff70:	00bfff84 	movi	r2,-2
    ff74:	1884703a 	and	r2,r3,r2
    ff78:	1001703a 	wrctl	status,r2
  
  return context;
    ff7c:	e0bfdf17 	ldw	r2,-132(fp)
  
  OS_ENTER_CRITICAL();
    ff80:	e0bfdd15 	stw	r2,-140(fp)

  if( !semdata.OSCnt && id == lockid ) 
    ff84:	e0bffd0b 	ldhu	r2,-12(fp)
    ff88:	10bfffcc 	andi	r2,r2,65535
    ff8c:	10000b1e 	bne	r2,zero,ffbc <__malloc_lock+0xd0>
    ff90:	d0a01b17 	ldw	r2,-32660(gp)
    ff94:	e0ffde17 	ldw	r3,-136(fp)
    ff98:	1880081e 	bne	r3,r2,ffbc <__malloc_lock+0xd0>
  {
    /* we do; just count the recursion */
    locks++;
    ff9c:	d0a83917 	ldw	r2,-24348(gp)
    ffa0:	10800044 	addi	r2,r2,1
    ffa4:	d0a83915 	stw	r2,-24348(gp)
    ffa8:	e0bfdd17 	ldw	r2,-140(fp)
    ffac:	e0bfe015 	stw	r2,-128(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    ffb0:	e0bfe017 	ldw	r2,-128(fp)
    ffb4:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    ffb8:	00000e06 	br	fff4 <__malloc_lock+0x108>
    ffbc:	e0bfdd17 	ldw	r2,-140(fp)
    ffc0:	e0bfe115 	stw	r2,-124(fp)
    ffc4:	e0bfe117 	ldw	r2,-124(fp)
    ffc8:	1001703a 	wrctl	status,r2
  else 
  {
    /* wait on the other task to yield the heap, then claim ownership of it */
    OS_EXIT_CRITICAL();

    OSSemPend( alt_heapsem, 0, &err );
    ffcc:	d0e83a17 	ldw	r3,-24344(gp)
    ffd0:	e0bffe84 	addi	r2,fp,-6
    ffd4:	1809883a 	mov	r4,r3
    ffd8:	000b883a 	mov	r5,zero
    ffdc:	100d883a 	mov	r6,r2
    ffe0:	00163a80 	call	163a8 <OSSemPend>
    locks  = 1;
    ffe4:	00800044 	movi	r2,1
    ffe8:	d0a83915 	stw	r2,-24348(gp)
    lockid = id;
    ffec:	e0bfde17 	ldw	r2,-136(fp)
    fff0:	d0a01b15 	stw	r2,-32660(gp)
  }

#endif /* OS_THREAD_SAFE_NEWLIB */
  return;
    fff4:	0001883a 	nop
}
    fff8:	e037883a 	mov	sp,fp
    fffc:	dfc00117 	ldw	ra,4(sp)
   10000:	df000017 	ldw	fp,0(sp)
   10004:	dec00204 	addi	sp,sp,8
   10008:	f800283a 	ret

0001000c <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
   1000c:	defff804 	addi	sp,sp,-32
   10010:	dfc00715 	stw	ra,28(sp)
   10014:	df000615 	stw	fp,24(sp)
   10018:	df000604 	addi	fp,sp,24
   1001c:	e13fff15 	stw	r4,-4(fp)
#if OS_THREAD_SAFE_NEWLIB

#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   10020:	e03ffa15 	stw	zero,-24(fp)
#endif 

  if (OSRunning != OS_TRUE)
   10024:	008000b4 	movhi	r2,2
   10028:	10835644 	addi	r2,r2,3417
   1002c:	10800003 	ldbu	r2,0(r2)
   10030:	10803fcc 	andi	r2,r2,255
   10034:	10800060 	cmpeqi	r2,r2,1
   10038:	1000011e 	bne	r2,zero,10040 <__malloc_unlock+0x34>
      return;
   1003c:	00002206 	br	100c8 <__malloc_unlock+0xbc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   10040:	0005303a 	rdctl	r2,status
   10044:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   10048:	e0fffb17 	ldw	r3,-20(fp)
   1004c:	00bfff84 	movi	r2,-2
   10050:	1884703a 	and	r2,r3,r2
   10054:	1001703a 	wrctl	status,r2
  
  return context;
   10058:	e0bffb17 	ldw	r2,-20(fp)

  OS_ENTER_CRITICAL();
   1005c:	e0bffa15 	stw	r2,-24(fp)
  if (locks == 0)
   10060:	d0a83917 	ldw	r2,-24348(gp)
   10064:	1000051e 	bne	r2,zero,1007c <__malloc_unlock+0x70>
   10068:	e0bffa17 	ldw	r2,-24(fp)
   1006c:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   10070:	e0bffc17 	ldw	r2,-16(fp)
   10074:	1001703a 	wrctl	status,r2
  {
      OS_EXIT_CRITICAL();
      return;
   10078:	00001306 	br	100c8 <__malloc_unlock+0xbc>
  }

  /* release the heap once the number of locks == the number of unlocks */
  if( (--locks) == 0 ) 
   1007c:	d0a83917 	ldw	r2,-24348(gp)
   10080:	10bfffc4 	addi	r2,r2,-1
   10084:	d0a83915 	stw	r2,-24348(gp)
   10088:	d0a83917 	ldw	r2,-24348(gp)
   1008c:	10000a1e 	bne	r2,zero,100b8 <__malloc_unlock+0xac>
  {
    lockid = -1;
   10090:	00bfffc4 	movi	r2,-1
   10094:	d0a01b15 	stw	r2,-32660(gp)
   10098:	e0bffa17 	ldw	r2,-24(fp)
   1009c:	e0bffd15 	stw	r2,-12(fp)
   100a0:	e0bffd17 	ldw	r2,-12(fp)
   100a4:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    OSSemPost( alt_heapsem );
   100a8:	d0a83a17 	ldw	r2,-24344(gp)
   100ac:	1009883a 	mov	r4,r2
   100b0:	001677c0 	call	1677c <OSSemPost>
   100b4:	00000406 	br	100c8 <__malloc_unlock+0xbc>
   100b8:	e0bffa17 	ldw	r2,-24(fp)
   100bc:	e0bffe15 	stw	r2,-8(fp)
   100c0:	e0bffe17 	ldw	r2,-8(fp)
   100c4:	1001703a 	wrctl	status,r2
  {
      OS_EXIT_CRITICAL();
  }
  
#endif /* OS_THREAD_SAFE_NEWLIB */
}
   100c8:	e037883a 	mov	sp,fp
   100cc:	dfc00117 	ldw	ra,4(sp)
   100d0:	df000017 	ldw	fp,0(sp)
   100d4:	dec00204 	addi	sp,sp,8
   100d8:	f800283a 	ret

000100dc <OSEventNameGet>:
*********************************************************************************************************
*/

#if (OS_EVENT_EN) && (OS_EVENT_NAME_SIZE > 1)
INT8U  OSEventNameGet (OS_EVENT *pevent, INT8U *pname, INT8U *perr)
{
   100dc:	defff704 	addi	sp,sp,-36
   100e0:	dfc00815 	stw	ra,32(sp)
   100e4:	df000715 	stw	fp,28(sp)
   100e8:	df000704 	addi	fp,sp,28
   100ec:	e13ffd15 	stw	r4,-12(fp)
   100f0:	e17ffe15 	stw	r5,-8(fp)
   100f4:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   100f8:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
   100fc:	e0bfff17 	ldw	r2,-4(fp)
   10100:	1000021e 	bne	r2,zero,1010c <OSEventNameGet+0x30>
        return (0);
   10104:	0005883a 	mov	r2,zero
   10108:	00003706 	br	101e8 <OSEventNameGet+0x10c>
    }
    if (pevent == (OS_EVENT *)0) {               /* Is 'pevent' a NULL pointer?                        */
   1010c:	e0bffd17 	ldw	r2,-12(fp)
   10110:	1000051e 	bne	r2,zero,10128 <OSEventNameGet+0x4c>
        *perr = OS_ERR_PEVENT_NULL;
   10114:	e0bfff17 	ldw	r2,-4(fp)
   10118:	00c00104 	movi	r3,4
   1011c:	10c00005 	stb	r3,0(r2)
        return (0);
   10120:	0005883a 	mov	r2,zero
   10124:	00003006 	br	101e8 <OSEventNameGet+0x10c>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
   10128:	e0bffe17 	ldw	r2,-8(fp)
   1012c:	1000051e 	bne	r2,zero,10144 <OSEventNameGet+0x68>
        *perr = OS_ERR_PNAME_NULL;
   10130:	e0bfff17 	ldw	r2,-4(fp)
   10134:	00c00304 	movi	r3,12
   10138:	10c00005 	stb	r3,0(r2)
        return (0);
   1013c:	0005883a 	mov	r2,zero
   10140:	00002906 	br	101e8 <OSEventNameGet+0x10c>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
   10144:	d0a84903 	ldbu	r2,-24284(gp)
   10148:	10803fcc 	andi	r2,r2,255
   1014c:	10000526 	beq	r2,zero,10164 <OSEventNameGet+0x88>
        *perr  = OS_ERR_NAME_GET_ISR;
   10150:	e0bfff17 	ldw	r2,-4(fp)
   10154:	00c00444 	movi	r3,17
   10158:	10c00005 	stb	r3,0(r2)
        return (0);
   1015c:	0005883a 	mov	r2,zero
   10160:	00002106 	br	101e8 <OSEventNameGet+0x10c>
    }
    switch (pevent->OSEventType) {
   10164:	e0bffd17 	ldw	r2,-12(fp)
   10168:	10800003 	ldbu	r2,0(r2)
   1016c:	10803fcc 	andi	r2,r2,255
   10170:	10bfffc4 	addi	r2,r2,-1
   10174:	10800128 	cmpgeui	r2,r2,4
   10178:	10000526 	beq	r2,zero,10190 <OSEventNameGet+0xb4>
        case OS_EVENT_TYPE_MBOX:
        case OS_EVENT_TYPE_Q:
             break;

        default:
             *perr = OS_ERR_EVENT_TYPE;
   1017c:	e0bfff17 	ldw	r2,-4(fp)
   10180:	00c00044 	movi	r3,1
   10184:	10c00005 	stb	r3,0(r2)
             return (0);
   10188:	0005883a 	mov	r2,zero
   1018c:	00001606 	br	101e8 <OSEventNameGet+0x10c>
    switch (pevent->OSEventType) {
        case OS_EVENT_TYPE_SEM:
        case OS_EVENT_TYPE_MUTEX:
        case OS_EVENT_TYPE_MBOX:
        case OS_EVENT_TYPE_Q:
             break;
   10190:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   10194:	0005303a 	rdctl	r2,status
   10198:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1019c:	e0fffb17 	ldw	r3,-20(fp)
   101a0:	00bfff84 	movi	r2,-2
   101a4:	1884703a 	and	r2,r3,r2
   101a8:	1001703a 	wrctl	status,r2
  
  return context;
   101ac:	e0bffb17 	ldw	r2,-20(fp)

        default:
             *perr = OS_ERR_EVENT_TYPE;
             return (0);
    }
    OS_ENTER_CRITICAL();
   101b0:	e0bff915 	stw	r2,-28(fp)
    len   = OS_StrCopy(pname, pevent->OSEventName);   /* Copy name from OS_EVENT                       */
   101b4:	e0bffd17 	ldw	r2,-12(fp)
   101b8:	10800384 	addi	r2,r2,14
   101bc:	e13ffe17 	ldw	r4,-8(fp)
   101c0:	100b883a 	mov	r5,r2
   101c4:	0011b300 	call	11b30 <OS_StrCopy>
   101c8:	e0bffa05 	stb	r2,-24(fp)
   101cc:	e0bff917 	ldw	r2,-28(fp)
   101d0:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   101d4:	e0bffc17 	ldw	r2,-16(fp)
   101d8:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
   101dc:	e0bfff17 	ldw	r2,-4(fp)
   101e0:	10000005 	stb	zero,0(r2)
    return (len);
   101e4:	e0bffa03 	ldbu	r2,-24(fp)
}
   101e8:	e037883a 	mov	sp,fp
   101ec:	dfc00117 	ldw	ra,4(sp)
   101f0:	df000017 	ldw	fp,0(sp)
   101f4:	dec00204 	addi	sp,sp,8
   101f8:	f800283a 	ret

000101fc <OSEventNameSet>:
*********************************************************************************************************
*/

#if (OS_EVENT_EN) && (OS_EVENT_NAME_SIZE > 1)
void  OSEventNameSet (OS_EVENT *pevent, INT8U *pname, INT8U *perr)
{
   101fc:	defff604 	addi	sp,sp,-40
   10200:	dfc00915 	stw	ra,36(sp)
   10204:	df000815 	stw	fp,32(sp)
   10208:	df000804 	addi	fp,sp,32
   1020c:	e13ffd15 	stw	r4,-12(fp)
   10210:	e17ffe15 	stw	r5,-8(fp)
   10214:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   10218:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
   1021c:	e0bfff17 	ldw	r2,-4(fp)
   10220:	1000011e 	bne	r2,zero,10228 <OSEventNameSet+0x2c>
        return;
   10224:	00003f06 	br	10324 <OSEventNameSet+0x128>
    }
    if (pevent == (OS_EVENT *)0) {               /* Is 'pevent' a NULL pointer?                        */
   10228:	e0bffd17 	ldw	r2,-12(fp)
   1022c:	1000041e 	bne	r2,zero,10240 <OSEventNameSet+0x44>
        *perr = OS_ERR_PEVENT_NULL;
   10230:	e0bfff17 	ldw	r2,-4(fp)
   10234:	00c00104 	movi	r3,4
   10238:	10c00005 	stb	r3,0(r2)
        return;
   1023c:	00003906 	br	10324 <OSEventNameSet+0x128>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
   10240:	e0bffe17 	ldw	r2,-8(fp)
   10244:	1000041e 	bne	r2,zero,10258 <OSEventNameSet+0x5c>
        *perr = OS_ERR_PNAME_NULL;
   10248:	e0bfff17 	ldw	r2,-4(fp)
   1024c:	00c00304 	movi	r3,12
   10250:	10c00005 	stb	r3,0(r2)
        return;
   10254:	00003306 	br	10324 <OSEventNameSet+0x128>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
   10258:	d0a84903 	ldbu	r2,-24284(gp)
   1025c:	10803fcc 	andi	r2,r2,255
   10260:	10000426 	beq	r2,zero,10274 <OSEventNameSet+0x78>
        *perr = OS_ERR_NAME_SET_ISR;
   10264:	e0bfff17 	ldw	r2,-4(fp)
   10268:	00c00484 	movi	r3,18
   1026c:	10c00005 	stb	r3,0(r2)
        return;
   10270:	00002c06 	br	10324 <OSEventNameSet+0x128>
    }
    switch (pevent->OSEventType) {
   10274:	e0bffd17 	ldw	r2,-12(fp)
   10278:	10800003 	ldbu	r2,0(r2)
   1027c:	10803fcc 	andi	r2,r2,255
   10280:	10bfffc4 	addi	r2,r2,-1
   10284:	10800128 	cmpgeui	r2,r2,4
   10288:	10000426 	beq	r2,zero,1029c <OSEventNameSet+0xa0>
        case OS_EVENT_TYPE_MBOX:
        case OS_EVENT_TYPE_Q:
             break;

        default:
             *perr = OS_ERR_EVENT_TYPE;
   1028c:	e0bfff17 	ldw	r2,-4(fp)
   10290:	00c00044 	movi	r3,1
   10294:	10c00005 	stb	r3,0(r2)
             return;
   10298:	00002206 	br	10324 <OSEventNameSet+0x128>
    switch (pevent->OSEventType) {
        case OS_EVENT_TYPE_SEM:
        case OS_EVENT_TYPE_MUTEX:
        case OS_EVENT_TYPE_MBOX:
        case OS_EVENT_TYPE_Q:
             break;
   1029c:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   102a0:	0005303a 	rdctl	r2,status
   102a4:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   102a8:	e0fffa17 	ldw	r3,-24(fp)
   102ac:	00bfff84 	movi	r2,-2
   102b0:	1884703a 	and	r2,r3,r2
   102b4:	1001703a 	wrctl	status,r2
  
  return context;
   102b8:	e0bffa17 	ldw	r2,-24(fp)

        default:
             *perr = OS_ERR_EVENT_TYPE;
             return;
    }
    OS_ENTER_CRITICAL();
   102bc:	e0bff815 	stw	r2,-32(fp)
    len = OS_StrLen(pname);                           /* Can we fit the string in the storage area?    */
   102c0:	e13ffe17 	ldw	r4,-8(fp)
   102c4:	0011ba40 	call	11ba4 <OS_StrLen>
   102c8:	e0bff905 	stb	r2,-28(fp)
    if (len > (OS_EVENT_NAME_SIZE - 1)) {             /* No                                            */
   102cc:	e0bff903 	ldbu	r2,-28(fp)
   102d0:	10800830 	cmpltui	r2,r2,32
   102d4:	1000081e 	bne	r2,zero,102f8 <OSEventNameSet+0xfc>
   102d8:	e0bff817 	ldw	r2,-32(fp)
   102dc:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   102e0:	e0bffb17 	ldw	r2,-20(fp)
   102e4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_EVENT_NAME_TOO_LONG;
   102e8:	e0bfff17 	ldw	r2,-4(fp)
   102ec:	00c002c4 	movi	r3,11
   102f0:	10c00005 	stb	r3,0(r2)
        return;
   102f4:	00000b06 	br	10324 <OSEventNameSet+0x128>
    }
    (void)OS_StrCopy(pevent->OSEventName, pname);     /* Yes, copy name to the event control block     */
   102f8:	e0bffd17 	ldw	r2,-12(fp)
   102fc:	10800384 	addi	r2,r2,14
   10300:	1009883a 	mov	r4,r2
   10304:	e17ffe17 	ldw	r5,-8(fp)
   10308:	0011b300 	call	11b30 <OS_StrCopy>
   1030c:	e0bff817 	ldw	r2,-32(fp)
   10310:	e0bffc15 	stw	r2,-16(fp)
   10314:	e0bffc17 	ldw	r2,-16(fp)
   10318:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
   1031c:	e0bfff17 	ldw	r2,-4(fp)
   10320:	10000005 	stb	zero,0(r2)
}
   10324:	e037883a 	mov	sp,fp
   10328:	dfc00117 	ldw	ra,4(sp)
   1032c:	df000017 	ldw	fp,0(sp)
   10330:	dec00204 	addi	sp,sp,8
   10334:	f800283a 	ret

00010338 <OSEventPendMulti>:
*********************************************************************************************************
*/
/*$PAGE*/
#if ((OS_EVENT_EN) && (OS_EVENT_MULTI_EN > 0))
INT16U  OSEventPendMulti (OS_EVENT **pevents_pend, OS_EVENT **pevents_rdy, void **pmsgs_rdy, INT16U timeout, INT8U *perr)
{
   10338:	deffed04 	addi	sp,sp,-76
   1033c:	dfc01215 	stw	ra,72(sp)
   10340:	df001115 	stw	fp,68(sp)
   10344:	df001104 	addi	fp,sp,68
   10348:	e13ffc15 	stw	r4,-16(fp)
   1034c:	e17ffd15 	stw	r5,-12(fp)
   10350:	e1bffe15 	stw	r6,-8(fp)
   10354:	3805883a 	mov	r2,r7
   10358:	e0bfff0d 	sth	r2,-4(fp)
#endif
    BOOLEAN     events_rdy;
    INT16U      events_rdy_nbr;
    INT8U       events_stat;
#if (OS_CRITICAL_METHOD == 3)                           /* Allocate storage for CPU status register    */
    OS_CPU_SR   cpu_sr = 0;
   1035c:	e03ff315 	stw	zero,-52(fp)
#endif



#if (OS_ARG_CHK_EN > 0)
    if (perr == (INT8U *)0) {                           /* Validate 'perr'                             */
   10360:	e0800217 	ldw	r2,8(fp)
   10364:	1000021e 	bne	r2,zero,10370 <OSEventPendMulti+0x38>
        return (0);
   10368:	0005883a 	mov	r2,zero
   1036c:	00017106 	br	10934 <OSEventPendMulti+0x5fc>
    }
    if (pevents_pend == (OS_EVENT **)0) {               /* Validate 'pevents_pend'                     */
   10370:	e0bffc17 	ldw	r2,-16(fp)
   10374:	1000051e 	bne	r2,zero,1038c <OSEventPendMulti+0x54>
       *perr =  OS_ERR_PEVENT_NULL;
   10378:	e0800217 	ldw	r2,8(fp)
   1037c:	00c00104 	movi	r3,4
   10380:	10c00005 	stb	r3,0(r2)
        return (0);
   10384:	0005883a 	mov	r2,zero
   10388:	00016a06 	br	10934 <OSEventPendMulti+0x5fc>
    }
    if (pevents_rdy  == (OS_EVENT **)0) {               /* Validate 'pevents_rdy'                      */
   1038c:	e0bffd17 	ldw	r2,-12(fp)
   10390:	1000051e 	bne	r2,zero,103a8 <OSEventPendMulti+0x70>
       *perr =  OS_ERR_PEVENT_NULL;
   10394:	e0800217 	ldw	r2,8(fp)
   10398:	00c00104 	movi	r3,4
   1039c:	10c00005 	stb	r3,0(r2)
        return (0);
   103a0:	0005883a 	mov	r2,zero
   103a4:	00016306 	br	10934 <OSEventPendMulti+0x5fc>
    }
    if (pmsgs_rdy == (void **)0) {                      /* Validate 'pmsgs_rdy'                        */
   103a8:	e0bffe17 	ldw	r2,-8(fp)
   103ac:	1000051e 	bne	r2,zero,103c4 <OSEventPendMulti+0x8c>
       *perr =  OS_ERR_PEVENT_NULL;
   103b0:	e0800217 	ldw	r2,8(fp)
   103b4:	00c00104 	movi	r3,4
   103b8:	10c00005 	stb	r3,0(r2)
        return (0);
   103bc:	0005883a 	mov	r2,zero
   103c0:	00015c06 	br	10934 <OSEventPendMulti+0x5fc>
    }
#endif

   *pevents_rdy = (OS_EVENT *)0;                        /* Init array to NULL in case of errors        */
   103c4:	e0bffd17 	ldw	r2,-12(fp)
   103c8:	10000015 	stw	zero,0(r2)

    pevents     =  pevents_pend;
   103cc:	e0bffc17 	ldw	r2,-16(fp)
   103d0:	e0bfef15 	stw	r2,-68(fp)
    pevent      = *pevents;
   103d4:	e0bfef17 	ldw	r2,-68(fp)
   103d8:	10800017 	ldw	r2,0(r2)
   103dc:	e0bff015 	stw	r2,-64(fp)
    while  (pevent != (OS_EVENT *)0) {
   103e0:	00001906 	br	10448 <OSEventPendMulti+0x110>
        switch (pevent->OSEventType) {                  /* Validate event block types                  */
   103e4:	e0bff017 	ldw	r2,-64(fp)
   103e8:	10800003 	ldbu	r2,0(r2)
   103ec:	10803fcc 	andi	r2,r2,255
   103f0:	10c000a0 	cmpeqi	r3,r2,2
   103f4:	1800091e 	bne	r3,zero,1041c <OSEventPendMulti+0xe4>
   103f8:	10c000e0 	cmpeqi	r3,r2,3
   103fc:	1800091e 	bne	r3,zero,10424 <OSEventPendMulti+0xec>
   10400:	10800060 	cmpeqi	r2,r2,1
   10404:	1000091e 	bne	r2,zero,1042c <OSEventPendMulti+0xf4>
#endif

            case OS_EVENT_TYPE_MUTEX:                                            
            case OS_EVENT_TYPE_FLAG:
            default:           
                *perr = OS_ERR_EVENT_TYPE;
   10408:	e0800217 	ldw	r2,8(fp)
   1040c:	00c00044 	movi	r3,1
   10410:	10c00005 	stb	r3,0(r2)
                 return (0);
   10414:	0005883a 	mov	r2,zero
   10418:	00014606 	br	10934 <OSEventPendMulti+0x5fc>
            case OS_EVENT_TYPE_MBOX:
                 break;
#endif
#if ((OS_Q_EN   > 0) && (OS_MAX_QS > 0))
            case OS_EVENT_TYPE_Q:
                 break;
   1041c:	0001883a 	nop
   10420:	00000306 	br	10430 <OSEventPendMulti+0xf8>
    pevent      = *pevents;
    while  (pevent != (OS_EVENT *)0) {
        switch (pevent->OSEventType) {                  /* Validate event block types                  */
#if (OS_SEM_EN  > 0)
            case OS_EVENT_TYPE_SEM:
                 break;
   10424:	0001883a 	nop
   10428:	00000106 	br	10430 <OSEventPendMulti+0xf8>
#endif
#if (OS_MBOX_EN > 0)
            case OS_EVENT_TYPE_MBOX:
                 break;
   1042c:	0001883a 	nop
            case OS_EVENT_TYPE_FLAG:
            default:           
                *perr = OS_ERR_EVENT_TYPE;
                 return (0);
        }
        pevents++;
   10430:	e0bfef17 	ldw	r2,-68(fp)
   10434:	10800104 	addi	r2,r2,4
   10438:	e0bfef15 	stw	r2,-68(fp)
        pevent = *pevents;
   1043c:	e0bfef17 	ldw	r2,-68(fp)
   10440:	10800017 	ldw	r2,0(r2)
   10444:	e0bff015 	stw	r2,-64(fp)

   *pevents_rdy = (OS_EVENT *)0;                        /* Init array to NULL in case of errors        */

    pevents     =  pevents_pend;
    pevent      = *pevents;
    while  (pevent != (OS_EVENT *)0) {
   10448:	e0bff017 	ldw	r2,-64(fp)
   1044c:	103fe51e 	bne	r2,zero,103e4 <__alt_mem_Flash_flash_data+0xf40103e4>
        }
        pevents++;
        pevent = *pevents;
    }

    if (OSIntNesting  > 0) {                            /* See if called from ISR ...                  */
   10450:	d0a84903 	ldbu	r2,-24284(gp)
   10454:	10803fcc 	andi	r2,r2,255
   10458:	10000526 	beq	r2,zero,10470 <OSEventPendMulti+0x138>
       *perr =  OS_ERR_PEND_ISR;                        /* ... can't PEND from an ISR                  */
   1045c:	e0800217 	ldw	r2,8(fp)
   10460:	00c00084 	movi	r3,2
   10464:	10c00005 	stb	r3,0(r2)
        return (0);
   10468:	0005883a 	mov	r2,zero
   1046c:	00013106 	br	10934 <OSEventPendMulti+0x5fc>
    }
    if (OSLockNesting > 0) {                            /* See if called with scheduler locked ...     */
   10470:	d0a83b03 	ldbu	r2,-24340(gp)
   10474:	10803fcc 	andi	r2,r2,255
   10478:	10000526 	beq	r2,zero,10490 <OSEventPendMulti+0x158>
       *perr =  OS_ERR_PEND_LOCKED;                     /* ... can't PEND when locked                  */
   1047c:	e0800217 	ldw	r2,8(fp)
   10480:	00c00344 	movi	r3,13
   10484:	10c00005 	stb	r3,0(r2)
        return (0);
   10488:	0005883a 	mov	r2,zero
   1048c:	00012906 	br	10934 <OSEventPendMulti+0x5fc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   10490:	0005303a 	rdctl	r2,status
   10494:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   10498:	e0fff517 	ldw	r3,-44(fp)
   1049c:	00bfff84 	movi	r2,-2
   104a0:	1884703a 	and	r2,r3,r2
   104a4:	1001703a 	wrctl	status,r2
  
  return context;
   104a8:	e0bff517 	ldw	r2,-44(fp)
    }

/*$PAGE*/
    OS_ENTER_CRITICAL();
   104ac:	e0bff315 	stw	r2,-52(fp)
    events_rdy     =  OS_FALSE;
   104b0:	e03ff105 	stb	zero,-60(fp)
    events_rdy_nbr =  0;
   104b4:	e03ff18d 	sth	zero,-58(fp)
    events_stat    =  OS_STAT_RDY;
   104b8:	e03ff205 	stb	zero,-56(fp)
    pevents        =  pevents_pend;
   104bc:	e0bffc17 	ldw	r2,-16(fp)
   104c0:	e0bfef15 	stw	r2,-68(fp)
    pevent         = *pevents;
   104c4:	e0bfef17 	ldw	r2,-68(fp)
   104c8:	10800017 	ldw	r2,0(r2)
   104cc:	e0bff015 	stw	r2,-64(fp)
    while (pevent != (OS_EVENT *)0) {                   /* See if any events already available         */
   104d0:	00008106 	br	106d8 <OSEventPendMulti+0x3a0>
        switch (pevent->OSEventType) {
   104d4:	e0bff017 	ldw	r2,-64(fp)
   104d8:	10800003 	ldbu	r2,0(r2)
   104dc:	10803fcc 	andi	r2,r2,255
   104e0:	10c000a0 	cmpeqi	r3,r2,2
   104e4:	18003c1e 	bne	r3,zero,105d8 <OSEventPendMulti+0x2a0>
   104e8:	10c000e0 	cmpeqi	r3,r2,3
   104ec:	1800031e 	bne	r3,zero,104fc <OSEventPendMulti+0x1c4>
   104f0:	10800060 	cmpeqi	r2,r2,1
   104f4:	10001e1e 	bne	r2,zero,10570 <OSEventPendMulti+0x238>
   104f8:	00006606 	br	10694 <OSEventPendMulti+0x35c>
#if (OS_SEM_EN > 0)
            case OS_EVENT_TYPE_SEM:
                 if (pevent->OSEventCnt > 0) {          /* If semaphore count > 0, resource available; */
   104fc:	e0bff017 	ldw	r2,-64(fp)
   10500:	1080020b 	ldhu	r2,8(r2)
   10504:	10bfffcc 	andi	r2,r2,65535
   10508:	10001526 	beq	r2,zero,10560 <OSEventPendMulti+0x228>
                     pevent->OSEventCnt--;              /* ... decrement semaphore,                ... */
   1050c:	e0bff017 	ldw	r2,-64(fp)
   10510:	1080020b 	ldhu	r2,8(r2)
   10514:	10bfffc4 	addi	r2,r2,-1
   10518:	1007883a 	mov	r3,r2
   1051c:	e0bff017 	ldw	r2,-64(fp)
   10520:	10c0020d 	sth	r3,8(r2)
                    *pevents_rdy++ =  pevent;           /* ... and return available semaphore event    */
   10524:	e0bffd17 	ldw	r2,-12(fp)
   10528:	10c00104 	addi	r3,r2,4
   1052c:	e0fffd15 	stw	r3,-12(fp)
   10530:	e0fff017 	ldw	r3,-64(fp)
   10534:	10c00015 	stw	r3,0(r2)
                      events_rdy   =  OS_TRUE;
   10538:	00800044 	movi	r2,1
   1053c:	e0bff105 	stb	r2,-60(fp)
                    *pmsgs_rdy++   = (void *)0;         /* NO message returned  for semaphores         */
   10540:	e0bffe17 	ldw	r2,-8(fp)
   10544:	10c00104 	addi	r3,r2,4
   10548:	e0fffe15 	stw	r3,-8(fp)
   1054c:	10000015 	stw	zero,0(r2)
                      events_rdy_nbr++;
   10550:	e0bff18b 	ldhu	r2,-58(fp)
   10554:	10800044 	addi	r2,r2,1
   10558:	e0bff18d 	sth	r2,-58(fp)

                 } else {
                      events_stat |=  OS_STAT_SEM;      /* Configure multi-pend for semaphore events   */
                 }
                 break;
   1055c:	00005806 	br	106c0 <OSEventPendMulti+0x388>
                      events_rdy   =  OS_TRUE;
                    *pmsgs_rdy++   = (void *)0;         /* NO message returned  for semaphores         */
                      events_rdy_nbr++;

                 } else {
                      events_stat |=  OS_STAT_SEM;      /* Configure multi-pend for semaphore events   */
   10560:	e0bff203 	ldbu	r2,-56(fp)
   10564:	10800054 	ori	r2,r2,1
   10568:	e0bff205 	stb	r2,-56(fp)
                 }
                 break;
   1056c:	00005406 	br	106c0 <OSEventPendMulti+0x388>
#endif

#if (OS_MBOX_EN > 0)
            case OS_EVENT_TYPE_MBOX:
                 if (pevent->OSEventPtr != (void *)0) { /* If mailbox NOT empty;                   ... */
   10570:	e0bff017 	ldw	r2,-64(fp)
   10574:	10800117 	ldw	r2,4(r2)
   10578:	10001326 	beq	r2,zero,105c8 <OSEventPendMulti+0x290>
                                                        /* ... return available message,           ... */
                    *pmsgs_rdy++         = (void *)pevent->OSEventPtr;
   1057c:	e0bffe17 	ldw	r2,-8(fp)
   10580:	10c00104 	addi	r3,r2,4
   10584:	e0fffe15 	stw	r3,-8(fp)
   10588:	e0fff017 	ldw	r3,-64(fp)
   1058c:	18c00117 	ldw	r3,4(r3)
   10590:	10c00015 	stw	r3,0(r2)
                     pevent->OSEventPtr  = (void *)0;
   10594:	e0bff017 	ldw	r2,-64(fp)
   10598:	10000115 	stw	zero,4(r2)
                    *pevents_rdy++       =  pevent;     /* ... and return available mailbox event      */
   1059c:	e0bffd17 	ldw	r2,-12(fp)
   105a0:	10c00104 	addi	r3,r2,4
   105a4:	e0fffd15 	stw	r3,-12(fp)
   105a8:	e0fff017 	ldw	r3,-64(fp)
   105ac:	10c00015 	stw	r3,0(r2)
                      events_rdy         =  OS_TRUE;
   105b0:	00800044 	movi	r2,1
   105b4:	e0bff105 	stb	r2,-60(fp)
                      events_rdy_nbr++;
   105b8:	e0bff18b 	ldhu	r2,-58(fp)
   105bc:	10800044 	addi	r2,r2,1
   105c0:	e0bff18d 	sth	r2,-58(fp)

                 } else {
                      events_stat |= OS_STAT_MBOX;      /* Configure multi-pend for mailbox events     */
                 }
                 break;
   105c4:	00003e06 	br	106c0 <OSEventPendMulti+0x388>
                    *pevents_rdy++       =  pevent;     /* ... and return available mailbox event      */
                      events_rdy         =  OS_TRUE;
                      events_rdy_nbr++;

                 } else {
                      events_stat |= OS_STAT_MBOX;      /* Configure multi-pend for mailbox events     */
   105c8:	e0bff203 	ldbu	r2,-56(fp)
   105cc:	10800094 	ori	r2,r2,2
   105d0:	e0bff205 	stb	r2,-56(fp)
                 }
                 break;
   105d4:	00003a06 	br	106c0 <OSEventPendMulti+0x388>
#endif

#if ((OS_Q_EN > 0) && (OS_MAX_QS > 0))
            case OS_EVENT_TYPE_Q:
                 pq = (OS_Q *)pevent->OSEventPtr;
   105d8:	e0bff017 	ldw	r2,-64(fp)
   105dc:	10800117 	ldw	r2,4(r2)
   105e0:	e0bff415 	stw	r2,-48(fp)
                 if (pq->OSQEntries > 0) {              /* If queue NOT empty;                     ... */
   105e4:	e0bff417 	ldw	r2,-48(fp)
   105e8:	1080058b 	ldhu	r2,22(r2)
   105ec:	10bfffcc 	andi	r2,r2,65535
   105f0:	10002426 	beq	r2,zero,10684 <OSEventPendMulti+0x34c>
                                                        /* ... return available message,           ... */
                    *pmsgs_rdy++ = (void *)*pq->OSQOut++;
   105f4:	e0bffe17 	ldw	r2,-8(fp)
   105f8:	10c00104 	addi	r3,r2,4
   105fc:	e0fffe15 	stw	r3,-8(fp)
   10600:	e0fff417 	ldw	r3,-48(fp)
   10604:	18c00417 	ldw	r3,16(r3)
   10608:	19400104 	addi	r5,r3,4
   1060c:	e13ff417 	ldw	r4,-48(fp)
   10610:	21400415 	stw	r5,16(r4)
   10614:	18c00017 	ldw	r3,0(r3)
   10618:	10c00015 	stw	r3,0(r2)
                     if (pq->OSQOut == pq->OSQEnd) {    /* If OUT ptr at queue end, ...                */
   1061c:	e0bff417 	ldw	r2,-48(fp)
   10620:	10c00417 	ldw	r3,16(r2)
   10624:	e0bff417 	ldw	r2,-48(fp)
   10628:	10800217 	ldw	r2,8(r2)
   1062c:	1880041e 	bne	r3,r2,10640 <OSEventPendMulti+0x308>
                         pq->OSQOut  = pq->OSQStart;    /* ... wrap   to queue start                   */
   10630:	e0bff417 	ldw	r2,-48(fp)
   10634:	10c00117 	ldw	r3,4(r2)
   10638:	e0bff417 	ldw	r2,-48(fp)
   1063c:	10c00415 	stw	r3,16(r2)
                     }
                     pq->OSQEntries--;                  /* Update number of queue entries              */
   10640:	e0bff417 	ldw	r2,-48(fp)
   10644:	1080058b 	ldhu	r2,22(r2)
   10648:	10bfffc4 	addi	r2,r2,-1
   1064c:	1007883a 	mov	r3,r2
   10650:	e0bff417 	ldw	r2,-48(fp)
   10654:	10c0058d 	sth	r3,22(r2)
                    *pevents_rdy++ = pevent;            /* ... and return available queue event        */
   10658:	e0bffd17 	ldw	r2,-12(fp)
   1065c:	10c00104 	addi	r3,r2,4
   10660:	e0fffd15 	stw	r3,-12(fp)
   10664:	e0fff017 	ldw	r3,-64(fp)
   10668:	10c00015 	stw	r3,0(r2)
                      events_rdy   = OS_TRUE;
   1066c:	00800044 	movi	r2,1
   10670:	e0bff105 	stb	r2,-60(fp)
                      events_rdy_nbr++;
   10674:	e0bff18b 	ldhu	r2,-58(fp)
   10678:	10800044 	addi	r2,r2,1
   1067c:	e0bff18d 	sth	r2,-58(fp)

                 } else {
                      events_stat |= OS_STAT_Q;         /* Configure multi-pend for queue events       */
                 }
                 break;
   10680:	00000f06 	br	106c0 <OSEventPendMulti+0x388>
                    *pevents_rdy++ = pevent;            /* ... and return available queue event        */
                      events_rdy   = OS_TRUE;
                      events_rdy_nbr++;

                 } else {
                      events_stat |= OS_STAT_Q;         /* Configure multi-pend for queue events       */
   10684:	e0bff203 	ldbu	r2,-56(fp)
   10688:	10800114 	ori	r2,r2,4
   1068c:	e0bff205 	stb	r2,-56(fp)
                 }
                 break;
   10690:	00000b06 	br	106c0 <OSEventPendMulti+0x388>
   10694:	e0bff317 	ldw	r2,-52(fp)
   10698:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1069c:	e0bff617 	ldw	r2,-40(fp)
   106a0:	1001703a 	wrctl	status,r2

            case OS_EVENT_TYPE_MUTEX:                                            
            case OS_EVENT_TYPE_FLAG:
            default:           
                 OS_EXIT_CRITICAL();
                *pevents_rdy = (OS_EVENT *)0;           /* NULL terminate return event array           */
   106a4:	e0bffd17 	ldw	r2,-12(fp)
   106a8:	10000015 	stw	zero,0(r2)
                *perr        =  OS_ERR_EVENT_TYPE;
   106ac:	e0800217 	ldw	r2,8(fp)
   106b0:	00c00044 	movi	r3,1
   106b4:	10c00005 	stb	r3,0(r2)
                 return (events_rdy_nbr);
   106b8:	e0bff18b 	ldhu	r2,-58(fp)
   106bc:	00009d06 	br	10934 <OSEventPendMulti+0x5fc>
        }
        pevents++;
   106c0:	e0bfef17 	ldw	r2,-68(fp)
   106c4:	10800104 	addi	r2,r2,4
   106c8:	e0bfef15 	stw	r2,-68(fp)
        pevent = *pevents;
   106cc:	e0bfef17 	ldw	r2,-68(fp)
   106d0:	10800017 	ldw	r2,0(r2)
   106d4:	e0bff015 	stw	r2,-64(fp)
    events_rdy     =  OS_FALSE;
    events_rdy_nbr =  0;
    events_stat    =  OS_STAT_RDY;
    pevents        =  pevents_pend;
    pevent         = *pevents;
    while (pevent != (OS_EVENT *)0) {                   /* See if any events already available         */
   106d8:	e0bff017 	ldw	r2,-64(fp)
   106dc:	103f7d1e 	bne	r2,zero,104d4 <__alt_mem_Flash_flash_data+0xf40104d4>
        }
        pevents++;
        pevent = *pevents;
    }

    if ( events_rdy == OS_TRUE) {                       /* Return any events already available         */
   106e0:	e0bff103 	ldbu	r2,-60(fp)
   106e4:	10800058 	cmpnei	r2,r2,1
   106e8:	10000a1e 	bne	r2,zero,10714 <OSEventPendMulti+0x3dc>
       *pevents_rdy = (OS_EVENT *)0;                    /* NULL terminate return event array           */
   106ec:	e0bffd17 	ldw	r2,-12(fp)
   106f0:	10000015 	stw	zero,0(r2)
   106f4:	e0bff317 	ldw	r2,-52(fp)
   106f8:	e0bff715 	stw	r2,-36(fp)
   106fc:	e0bff717 	ldw	r2,-36(fp)
   10700:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
       *perr        =  OS_ERR_NONE;
   10704:	e0800217 	ldw	r2,8(fp)
   10708:	10000005 	stb	zero,0(r2)
        return (events_rdy_nbr);
   1070c:	e0bff18b 	ldhu	r2,-58(fp)
   10710:	00008806 	br	10934 <OSEventPendMulti+0x5fc>
    }
/*$PAGE*/
                                                        /* Otherwise, must wait until any event occurs */
    OSTCBCur->OSTCBStat     |= events_stat  |           /* Resource not available, ...                 */
   10714:	d0a84a17 	ldw	r2,-24280(gp)
   10718:	d0e84a17 	ldw	r3,-24280(gp)
   1071c:	19000c03 	ldbu	r4,48(r3)
   10720:	e0fff203 	ldbu	r3,-56(fp)
   10724:	20c6b03a 	or	r3,r4,r3
   10728:	1809883a 	mov	r4,r3
   1072c:	00ffe004 	movi	r3,-128
   10730:	20c6b03a 	or	r3,r4,r3
   10734:	10c00c05 	stb	r3,48(r2)
                               OS_STAT_MULTI;           /* ... pend on multiple events                 */
    OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
   10738:	d0a84a17 	ldw	r2,-24280(gp)
   1073c:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBDly       = timeout;                 /* Store pend timeout in TCB                   */
   10740:	d0a84a17 	ldw	r2,-24280(gp)
   10744:	e0ffff0b 	ldhu	r3,-4(fp)
   10748:	10c00b8d 	sth	r3,46(r2)
    OS_EventTaskWaitMulti(pevents_pend);                /* Suspend task until events or timeout occurs */
   1074c:	e13ffc17 	ldw	r4,-16(fp)
   10750:	00112800 	call	11280 <OS_EventTaskWaitMulti>
   10754:	e0bff317 	ldw	r2,-52(fp)
   10758:	e0bff815 	stw	r2,-32(fp)
   1075c:	e0bff817 	ldw	r2,-32(fp)
   10760:	1001703a 	wrctl	status,r2

    OS_EXIT_CRITICAL();
    OS_Sched();                                         /* Find next highest priority task ready       */
   10764:	00119f40 	call	119f4 <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   10768:	0005303a 	rdctl	r2,status
   1076c:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   10770:	e0fff917 	ldw	r3,-28(fp)
   10774:	00bfff84 	movi	r2,-2
   10778:	1884703a 	and	r2,r3,r2
   1077c:	1001703a 	wrctl	status,r2
  
  return context;
   10780:	e0bff917 	ldw	r2,-28(fp)
    OS_ENTER_CRITICAL();
   10784:	e0bff315 	stw	r2,-52(fp)

    switch (OSTCBCur->OSTCBStatPend) {                  /* Handle event posted, aborted, or timed-out  */
   10788:	d0a84a17 	ldw	r2,-24280(gp)
   1078c:	10800c43 	ldbu	r2,49(r2)
   10790:	10803fcc 	andi	r2,r2,255
   10794:	10000226 	beq	r2,zero,107a0 <OSEventPendMulti+0x468>
   10798:	108000a0 	cmpeqi	r2,r2,2
   1079c:	10001826 	beq	r2,zero,10800 <OSEventPendMulti+0x4c8>
        case OS_STAT_PEND_OK:
        case OS_STAT_PEND_ABORT:
             pevent = OSTCBCur->OSTCBEventPtr;
   107a0:	d0a84a17 	ldw	r2,-24280(gp)
   107a4:	10800717 	ldw	r2,28(r2)
   107a8:	e0bff015 	stw	r2,-64(fp)
             if (pevent != (OS_EVENT *)0) {             /* If task event ptr != NULL, ...              */
   107ac:	e0bff017 	ldw	r2,-64(fp)
   107b0:	10000b26 	beq	r2,zero,107e0 <OSEventPendMulti+0x4a8>
                *pevents_rdy++ =  pevent;               /* ... return available event ...              */
   107b4:	e0bffd17 	ldw	r2,-12(fp)
   107b8:	10c00104 	addi	r3,r2,4
   107bc:	e0fffd15 	stw	r3,-12(fp)
   107c0:	e0fff017 	ldw	r3,-64(fp)
   107c4:	10c00015 	stw	r3,0(r2)
                *pevents_rdy   = (OS_EVENT *)0;         /* ... & NULL terminate return event array     */
   107c8:	e0bffd17 	ldw	r2,-12(fp)
   107cc:	10000015 	stw	zero,0(r2)
                  events_rdy_nbr++;
   107d0:	e0bff18b 	ldhu	r2,-58(fp)
   107d4:	10800044 	addi	r2,r2,1
   107d8:	e0bff18d 	sth	r2,-58(fp)

             } else {                                   /* Else NO event available, handle as timeout  */
                 OSTCBCur->OSTCBStatPend = OS_STAT_PEND_TO;
                 OS_EventTaskRemoveMulti(OSTCBCur, pevents_pend);
             }
			 break;
   107dc:	00000d06 	br	10814 <OSEventPendMulti+0x4dc>
                *pevents_rdy++ =  pevent;               /* ... return available event ...              */
                *pevents_rdy   = (OS_EVENT *)0;         /* ... & NULL terminate return event array     */
                  events_rdy_nbr++;

             } else {                                   /* Else NO event available, handle as timeout  */
                 OSTCBCur->OSTCBStatPend = OS_STAT_PEND_TO;
   107e0:	d0a84a17 	ldw	r2,-24280(gp)
   107e4:	00c00044 	movi	r3,1
   107e8:	10c00c45 	stb	r3,49(r2)
                 OS_EventTaskRemoveMulti(OSTCBCur, pevents_pend);
   107ec:	d0a84a17 	ldw	r2,-24280(gp)
   107f0:	1009883a 	mov	r4,r2
   107f4:	e17ffc17 	ldw	r5,-16(fp)
   107f8:	00114800 	call	11480 <OS_EventTaskRemoveMulti>
             }
			 break;
   107fc:	00000506 	br	10814 <OSEventPendMulti+0x4dc>

        case OS_STAT_PEND_TO:
        default:                                        /* ... remove task from events' wait lists     */
             OS_EventTaskRemoveMulti(OSTCBCur, pevents_pend);
   10800:	d0a84a17 	ldw	r2,-24280(gp)
   10804:	1009883a 	mov	r4,r2
   10808:	e17ffc17 	ldw	r5,-16(fp)
   1080c:	00114800 	call	11480 <OS_EventTaskRemoveMulti>
             break;
   10810:	0001883a 	nop
    }

    switch (OSTCBCur->OSTCBStatPend) {
   10814:	d0a84a17 	ldw	r2,-24280(gp)
   10818:	10800c43 	ldbu	r2,49(r2)
   1081c:	10803fcc 	andi	r2,r2,255
   10820:	10000326 	beq	r2,zero,10830 <OSEventPendMulti+0x4f8>
   10824:	108000a0 	cmpeqi	r2,r2,2
   10828:	1000231e 	bne	r2,zero,108b8 <OSEventPendMulti+0x580>
   1082c:	00002a06 	br	108d8 <OSEventPendMulti+0x5a0>
        case OS_STAT_PEND_OK:
             switch (pevent->OSEventType) {             /* Return event's message                      */
   10830:	e0bff017 	ldw	r2,-64(fp)
   10834:	10800003 	ldbu	r2,0(r2)
   10838:	10803fcc 	andi	r2,r2,255
   1083c:	0080100e 	bge	zero,r2,10880 <OSEventPendMulti+0x548>
   10840:	10c000d0 	cmplti	r3,r2,3
   10844:	1800071e 	bne	r3,zero,10864 <OSEventPendMulti+0x52c>
   10848:	108000e0 	cmpeqi	r2,r2,3
   1084c:	10000c26 	beq	r2,zero,10880 <OSEventPendMulti+0x548>
#if (OS_SEM_EN > 0)
                 case OS_EVENT_TYPE_SEM:
                     *pmsgs_rdy++ = (void *)0;          /* NO message returned for semaphores          */
   10850:	e0bffe17 	ldw	r2,-8(fp)
   10854:	10c00104 	addi	r3,r2,4
   10858:	e0fffe15 	stw	r3,-8(fp)
   1085c:	10000015 	stw	zero,0(r2)
                      break;
   10860:	00001206 	br	108ac <OSEventPendMulti+0x574>

#if ((OS_MBOX_EN > 0) ||                 \
    ((OS_Q_EN    > 0) && (OS_MAX_QS > 0)))
                 case OS_EVENT_TYPE_MBOX:
                 case OS_EVENT_TYPE_Q:
                     *pmsgs_rdy++ = (void *)OSTCBCur->OSTCBMsg;     /* Return received message         */
   10864:	e0bffe17 	ldw	r2,-8(fp)
   10868:	10c00104 	addi	r3,r2,4
   1086c:	e0fffe15 	stw	r3,-8(fp)
   10870:	d0e84a17 	ldw	r3,-24280(gp)
   10874:	18c00917 	ldw	r3,36(r3)
   10878:	10c00015 	stw	r3,0(r2)
                      break;
   1087c:	00000b06 	br	108ac <OSEventPendMulti+0x574>
   10880:	e0bff317 	ldw	r2,-52(fp)
   10884:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   10888:	e0bffa17 	ldw	r2,-24(fp)
   1088c:	1001703a 	wrctl	status,r2

                 case OS_EVENT_TYPE_MUTEX:                                       
                 case OS_EVENT_TYPE_FLAG:
                 default:           
                      OS_EXIT_CRITICAL();
                     *pevents_rdy = (OS_EVENT *)0;      /* NULL terminate return event array           */
   10890:	e0bffd17 	ldw	r2,-12(fp)
   10894:	10000015 	stw	zero,0(r2)
                     *perr        =  OS_ERR_EVENT_TYPE;
   10898:	e0800217 	ldw	r2,8(fp)
   1089c:	00c00044 	movi	r3,1
   108a0:	10c00005 	stb	r3,0(r2)
                      return (events_rdy_nbr);
   108a4:	e0bff18b 	ldhu	r2,-58(fp)
   108a8:	00002206 	br	10934 <OSEventPendMulti+0x5fc>
             }
            *perr = OS_ERR_NONE;
   108ac:	e0800217 	ldw	r2,8(fp)
   108b0:	10000005 	stb	zero,0(r2)
             break;
   108b4:	00001006 	br	108f8 <OSEventPendMulti+0x5c0>

        case OS_STAT_PEND_ABORT:
            *pmsgs_rdy++ = (void *)0;                   /* NO message returned for abort               */
   108b8:	e0bffe17 	ldw	r2,-8(fp)
   108bc:	10c00104 	addi	r3,r2,4
   108c0:	e0fffe15 	stw	r3,-8(fp)
   108c4:	10000015 	stw	zero,0(r2)
            *perr        =  OS_ERR_PEND_ABORT;          /* Indicate that event  aborted                */
   108c8:	e0800217 	ldw	r2,8(fp)
   108cc:	00c00384 	movi	r3,14
   108d0:	10c00005 	stb	r3,0(r2)
             break;
   108d4:	00000806 	br	108f8 <OSEventPendMulti+0x5c0>
                                                        
        case OS_STAT_PEND_TO:                                                
        default:        
            *pmsgs_rdy++ = (void *)0;                   /* NO message returned for timeout             */
   108d8:	e0bffe17 	ldw	r2,-8(fp)
   108dc:	10c00104 	addi	r3,r2,4
   108e0:	e0fffe15 	stw	r3,-8(fp)
   108e4:	10000015 	stw	zero,0(r2)
            *perr        =  OS_ERR_TIMEOUT;             /* Indicate that events timed out              */
   108e8:	e0800217 	ldw	r2,8(fp)
   108ec:	00c00284 	movi	r3,10
   108f0:	10c00005 	stb	r3,0(r2)
             break;
   108f4:	0001883a 	nop
    }

    OSTCBCur->OSTCBStat          =  OS_STAT_RDY;        /* Set   task  status to ready                 */
   108f8:	d0a84a17 	ldw	r2,-24280(gp)
   108fc:	10000c05 	stb	zero,48(r2)
    OSTCBCur->OSTCBStatPend      =  OS_STAT_PEND_OK;    /* Clear pend  status                          */
   10900:	d0a84a17 	ldw	r2,-24280(gp)
   10904:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;      /* Clear event pointers                        */
   10908:	d0a84a17 	ldw	r2,-24280(gp)
   1090c:	10000715 	stw	zero,28(r2)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
   10910:	d0a84a17 	ldw	r2,-24280(gp)
   10914:	10000815 	stw	zero,32(r2)
    OSTCBCur->OSTCBMsg           = (void      *)0;      /* Clear task  message                         */
   10918:	d0a84a17 	ldw	r2,-24280(gp)
   1091c:	10000915 	stw	zero,36(r2)
   10920:	e0bff317 	ldw	r2,-52(fp)
   10924:	e0bffb15 	stw	r2,-20(fp)
   10928:	e0bffb17 	ldw	r2,-20(fp)
   1092c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();

    return (events_rdy_nbr);
   10930:	e0bff18b 	ldhu	r2,-58(fp)
}
   10934:	e037883a 	mov	sp,fp
   10938:	dfc00117 	ldw	ra,4(sp)
   1093c:	df000017 	ldw	fp,0(sp)
   10940:	dec00204 	addi	sp,sp,8
   10944:	f800283a 	ret

00010948 <OSInit>:
* Returns    : none
*********************************************************************************************************
*/

void  OSInit (void)
{
   10948:	defffe04 	addi	sp,sp,-8
   1094c:	dfc00115 	stw	ra,4(sp)
   10950:	df000015 	stw	fp,0(sp)
   10954:	d839883a 	mov	fp,sp
    OSInitHookBegin();                                           /* Call port specific initialization code   */
   10958:	001bebc0 	call	1bebc <OSInitHookBegin>

    OS_InitMisc();                                               /* Initialize miscellaneous variables       */
   1095c:	00116bc0 	call	116bc <OS_InitMisc>

    OS_InitRdyList();                                            /* Initialize the Ready List                */
   10960:	00117000 	call	11700 <OS_InitRdyList>

    OS_InitTCBList();                                            /* Initialize the free list of OS_TCBs      */
   10964:	00118600 	call	11860 <OS_InitTCBList>

    OS_InitEventList();                                          /* Initialize the free list of OS_EVENTs    */
   10968:	00115e00 	call	115e0 <OS_InitEventList>

#if (OS_FLAG_EN > 0) && (OS_MAX_FLAGS > 0)
    OS_FlagInit();                                               /* Initialize the event flag structures     */
   1096c:	00137e00 	call	137e0 <OS_FlagInit>
#endif

#if (OS_MEM_EN > 0) && (OS_MAX_MEM_PART > 0)
    OS_MemInit();                                                /* Initialize the memory manager            */
   10970:	0014cb00 	call	14cb0 <OS_MemInit>
#endif

#if (OS_Q_EN > 0) && (OS_MAX_QS > 0)
    OS_QInit();                                                  /* Initialize the message queue structures  */
   10974:	0015ee40 	call	15ee4 <OS_QInit>
#endif

    OS_InitTaskIdle();                                           /* Create the Idle Task                     */
   10978:	00117680 	call	11768 <OS_InitTaskIdle>
#if OS_TASK_STAT_EN > 0
    OS_InitTaskStat();                                           /* Create the Statistic Task                */
   1097c:	00117e40 	call	117e4 <OS_InitTaskStat>

#if OS_TMR_EN > 0
    OSTmr_Init();                                                /* Initialize the Timer Manager             */
#endif

    OSInitHookEnd();                                             /* Call port specific init. code            */
   10980:	001bed80 	call	1bed8 <OSInitHookEnd>

#if OS_DEBUG_EN > 0
    OSDebugInit();
   10984:	00120cc0 	call	120cc <OSDebugInit>
#endif
}
   10988:	e037883a 	mov	sp,fp
   1098c:	dfc00117 	ldw	ra,4(sp)
   10990:	df000017 	ldw	fp,0(sp)
   10994:	dec00204 	addi	sp,sp,8
   10998:	f800283a 	ret

0001099c <OSIntEnter>:
*              5) You are allowed to nest interrupts up to 255 levels deep.
*********************************************************************************************************
*/

void  OSIntEnter (void)
{
   1099c:	defffc04 	addi	sp,sp,-16
   109a0:	df000315 	stw	fp,12(sp)
   109a4:	df000304 	addi	fp,sp,12
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
   109a8:	e03ffd15 	stw	zero,-12(fp)
#endif

    if (OSRunning == OS_TRUE) {
   109ac:	d0a83b43 	ldbu	r2,-24339(gp)
   109b0:	10803fcc 	andi	r2,r2,255
   109b4:	10800058 	cmpnei	r2,r2,1
   109b8:	1000131e 	bne	r2,zero,10a08 <OSIntEnter+0x6c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   109bc:	0005303a 	rdctl	r2,status
   109c0:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   109c4:	e0fffe17 	ldw	r3,-8(fp)
   109c8:	00bfff84 	movi	r2,-2
   109cc:	1884703a 	and	r2,r3,r2
   109d0:	1001703a 	wrctl	status,r2
  
  return context;
   109d4:	e0bffe17 	ldw	r2,-8(fp)
        OS_ENTER_CRITICAL();
   109d8:	e0bffd15 	stw	r2,-12(fp)
        if (OSIntNesting < 255u) {
   109dc:	d0a84903 	ldbu	r2,-24284(gp)
   109e0:	10803fcc 	andi	r2,r2,255
   109e4:	10803fe0 	cmpeqi	r2,r2,255
   109e8:	1000031e 	bne	r2,zero,109f8 <OSIntEnter+0x5c>
            OSIntNesting++;                      /* Increment ISR nesting level                        */
   109ec:	d0a84903 	ldbu	r2,-24284(gp)
   109f0:	10800044 	addi	r2,r2,1
   109f4:	d0a84905 	stb	r2,-24284(gp)
   109f8:	e0bffd17 	ldw	r2,-12(fp)
   109fc:	e0bfff15 	stw	r2,-4(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   10a00:	e0bfff17 	ldw	r2,-4(fp)
   10a04:	1001703a 	wrctl	status,r2
        }
        OS_EXIT_CRITICAL();
    }
}
   10a08:	e037883a 	mov	sp,fp
   10a0c:	df000017 	ldw	fp,0(sp)
   10a10:	dec00104 	addi	sp,sp,4
   10a14:	f800283a 	ret

00010a18 <OSIntExit>:
*              2) Rescheduling is prevented when the scheduler is locked (see OS_SchedLock())
*********************************************************************************************************
*/

void  OSIntExit (void)
{
   10a18:	defffb04 	addi	sp,sp,-20
   10a1c:	dfc00415 	stw	ra,16(sp)
   10a20:	df000315 	stw	fp,12(sp)
   10a24:	df000304 	addi	fp,sp,12
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
   10a28:	e03ffd15 	stw	zero,-12(fp)
#endif



    if (OSRunning == OS_TRUE) {
   10a2c:	d0a83b43 	ldbu	r2,-24339(gp)
   10a30:	10803fcc 	andi	r2,r2,255
   10a34:	10800058 	cmpnei	r2,r2,1
   10a38:	10002f1e 	bne	r2,zero,10af8 <OSIntExit+0xe0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   10a3c:	0005303a 	rdctl	r2,status
   10a40:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   10a44:	e0fffe17 	ldw	r3,-8(fp)
   10a48:	00bfff84 	movi	r2,-2
   10a4c:	1884703a 	and	r2,r3,r2
   10a50:	1001703a 	wrctl	status,r2
  
  return context;
   10a54:	e0bffe17 	ldw	r2,-8(fp)
        OS_ENTER_CRITICAL();
   10a58:	e0bffd15 	stw	r2,-12(fp)
        if (OSIntNesting > 0) {                            /* Prevent OSIntNesting from wrapping       */
   10a5c:	d0a84903 	ldbu	r2,-24284(gp)
   10a60:	10803fcc 	andi	r2,r2,255
   10a64:	10000326 	beq	r2,zero,10a74 <OSIntExit+0x5c>
            OSIntNesting--;
   10a68:	d0a84903 	ldbu	r2,-24284(gp)
   10a6c:	10bfffc4 	addi	r2,r2,-1
   10a70:	d0a84905 	stb	r2,-24284(gp)
        }
        if (OSIntNesting == 0) {                           /* Reschedule only if all ISRs complete ... */
   10a74:	d0a84903 	ldbu	r2,-24284(gp)
   10a78:	10803fcc 	andi	r2,r2,255
   10a7c:	10001a1e 	bne	r2,zero,10ae8 <OSIntExit+0xd0>
            if (OSLockNesting == 0) {                      /* ... and not locked.                      */
   10a80:	d0a83b03 	ldbu	r2,-24340(gp)
   10a84:	10803fcc 	andi	r2,r2,255
   10a88:	1000171e 	bne	r2,zero,10ae8 <OSIntExit+0xd0>
                OS_SchedNew();
   10a8c:	0011ac00 	call	11ac0 <OS_SchedNew>
                if (OSPrioHighRdy != OSPrioCur) {          /* No Ctx Sw if current task is highest rdy */
   10a90:	d0e83d03 	ldbu	r3,-24332(gp)
   10a94:	d0a83d43 	ldbu	r2,-24331(gp)
   10a98:	18c03fcc 	andi	r3,r3,255
   10a9c:	10803fcc 	andi	r2,r2,255
   10aa0:	18801126 	beq	r3,r2,10ae8 <OSIntExit+0xd0>
                    OSTCBHighRdy  = OSTCBPrioTbl[OSPrioHighRdy];
   10aa4:	d0a83d03 	ldbu	r2,-24332(gp)
   10aa8:	10c03fcc 	andi	r3,r2,255
   10aac:	008000f4 	movhi	r2,3
   10ab0:	1081e004 	addi	r2,r2,1920
   10ab4:	18c7883a 	add	r3,r3,r3
   10ab8:	18c7883a 	add	r3,r3,r3
   10abc:	10c5883a 	add	r2,r2,r3
   10ac0:	10800017 	ldw	r2,0(r2)
   10ac4:	d0a84515 	stw	r2,-24300(gp)
#if OS_TASK_PROFILE_EN > 0
                    OSTCBHighRdy->OSTCBCtxSwCtr++;         /* Inc. # of context switches to this task  */
   10ac8:	d0a84517 	ldw	r2,-24300(gp)
   10acc:	10c00e17 	ldw	r3,56(r2)
   10ad0:	18c00044 	addi	r3,r3,1
   10ad4:	10c00e15 	stw	r3,56(r2)
#endif
                    OSCtxSwCtr++;                          /* Keep track of the number of ctx switches */
   10ad8:	d0a84017 	ldw	r2,-24320(gp)
   10adc:	10800044 	addi	r2,r2,1
   10ae0:	d0a84015 	stw	r2,-24320(gp)
                    OSIntCtxSw();                          /* Perform interrupt level ctx switch       */
   10ae4:	001bbfc0 	call	1bbfc <OSCtxSw>
   10ae8:	e0bffd17 	ldw	r2,-12(fp)
   10aec:	e0bfff15 	stw	r2,-4(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   10af0:	e0bfff17 	ldw	r2,-4(fp)
   10af4:	1001703a 	wrctl	status,r2
                }
            }
        }
        OS_EXIT_CRITICAL();
    }
}
   10af8:	e037883a 	mov	sp,fp
   10afc:	dfc00117 	ldw	ra,4(sp)
   10b00:	df000017 	ldw	fp,0(sp)
   10b04:	dec00204 	addi	sp,sp,8
   10b08:	f800283a 	ret

00010b0c <OSSchedLock>:
*********************************************************************************************************
*/

#if OS_SCHED_LOCK_EN > 0
void  OSSchedLock (void)
{
   10b0c:	defffc04 	addi	sp,sp,-16
   10b10:	df000315 	stw	fp,12(sp)
   10b14:	df000304 	addi	fp,sp,12
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   10b18:	e03ffd15 	stw	zero,-12(fp)
#endif



    if (OSRunning == OS_TRUE) {                  /* Make sure multitasking is running                  */
   10b1c:	d0a83b43 	ldbu	r2,-24339(gp)
   10b20:	10803fcc 	andi	r2,r2,255
   10b24:	10800058 	cmpnei	r2,r2,1
   10b28:	1000161e 	bne	r2,zero,10b84 <OSSchedLock+0x78>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   10b2c:	0005303a 	rdctl	r2,status
   10b30:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   10b34:	e0fffe17 	ldw	r3,-8(fp)
   10b38:	00bfff84 	movi	r2,-2
   10b3c:	1884703a 	and	r2,r3,r2
   10b40:	1001703a 	wrctl	status,r2
  
  return context;
   10b44:	e0bffe17 	ldw	r2,-8(fp)
        OS_ENTER_CRITICAL();
   10b48:	e0bffd15 	stw	r2,-12(fp)
        if (OSIntNesting == 0) {                 /* Can't call from an ISR                             */
   10b4c:	d0a84903 	ldbu	r2,-24284(gp)
   10b50:	10803fcc 	andi	r2,r2,255
   10b54:	1000071e 	bne	r2,zero,10b74 <OSSchedLock+0x68>
            if (OSLockNesting < 255u) {          /* Prevent OSLockNesting from wrapping back to 0      */
   10b58:	d0a83b03 	ldbu	r2,-24340(gp)
   10b5c:	10803fcc 	andi	r2,r2,255
   10b60:	10803fe0 	cmpeqi	r2,r2,255
   10b64:	1000031e 	bne	r2,zero,10b74 <OSSchedLock+0x68>
                OSLockNesting++;                 /* Increment lock nesting level                       */
   10b68:	d0a83b03 	ldbu	r2,-24340(gp)
   10b6c:	10800044 	addi	r2,r2,1
   10b70:	d0a83b05 	stb	r2,-24340(gp)
   10b74:	e0bffd17 	ldw	r2,-12(fp)
   10b78:	e0bfff15 	stw	r2,-4(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   10b7c:	e0bfff17 	ldw	r2,-4(fp)
   10b80:	1001703a 	wrctl	status,r2
            }
        }
        OS_EXIT_CRITICAL();
    }
}
   10b84:	e037883a 	mov	sp,fp
   10b88:	df000017 	ldw	fp,0(sp)
   10b8c:	dec00104 	addi	sp,sp,4
   10b90:	f800283a 	ret

00010b94 <OSSchedUnlock>:
*********************************************************************************************************
*/

#if OS_SCHED_LOCK_EN > 0
void  OSSchedUnlock (void)
{
   10b94:	defff804 	addi	sp,sp,-32
   10b98:	dfc00715 	stw	ra,28(sp)
   10b9c:	df000615 	stw	fp,24(sp)
   10ba0:	df000604 	addi	fp,sp,24
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
   10ba4:	e03ffa15 	stw	zero,-24(fp)
#endif



    if (OSRunning == OS_TRUE) {                            /* Make sure multitasking is running        */
   10ba8:	d0a83b43 	ldbu	r2,-24339(gp)
   10bac:	10803fcc 	andi	r2,r2,255
   10bb0:	10800058 	cmpnei	r2,r2,1
   10bb4:	1000281e 	bne	r2,zero,10c58 <OSSchedUnlock+0xc4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   10bb8:	0005303a 	rdctl	r2,status
   10bbc:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   10bc0:	e0fffb17 	ldw	r3,-20(fp)
   10bc4:	00bfff84 	movi	r2,-2
   10bc8:	1884703a 	and	r2,r3,r2
   10bcc:	1001703a 	wrctl	status,r2
  
  return context;
   10bd0:	e0bffb17 	ldw	r2,-20(fp)
        OS_ENTER_CRITICAL();
   10bd4:	e0bffa15 	stw	r2,-24(fp)
        if (OSLockNesting > 0) {                           /* Do not decrement if already 0            */
   10bd8:	d0a83b03 	ldbu	r2,-24340(gp)
   10bdc:	10803fcc 	andi	r2,r2,255
   10be0:	10001926 	beq	r2,zero,10c48 <OSSchedUnlock+0xb4>
            OSLockNesting--;                               /* Decrement lock nesting level             */
   10be4:	d0a83b03 	ldbu	r2,-24340(gp)
   10be8:	10bfffc4 	addi	r2,r2,-1
   10bec:	d0a83b05 	stb	r2,-24340(gp)
            if (OSLockNesting == 0) {                      /* See if scheduler is enabled and ...      */
   10bf0:	d0a83b03 	ldbu	r2,-24340(gp)
   10bf4:	10803fcc 	andi	r2,r2,255
   10bf8:	10000e1e 	bne	r2,zero,10c34 <OSSchedUnlock+0xa0>
                if (OSIntNesting == 0) {                   /* ... not in an ISR                        */
   10bfc:	d0a84903 	ldbu	r2,-24284(gp)
   10c00:	10803fcc 	andi	r2,r2,255
   10c04:	1000061e 	bne	r2,zero,10c20 <OSSchedUnlock+0x8c>
   10c08:	e0bffa17 	ldw	r2,-24(fp)
   10c0c:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   10c10:	e0bffc17 	ldw	r2,-16(fp)
   10c14:	1001703a 	wrctl	status,r2
                    OS_EXIT_CRITICAL();
                    OS_Sched();                            /* See if a HPT is ready                    */
   10c18:	00119f40 	call	119f4 <OS_Sched>
   10c1c:	00000e06 	br	10c58 <OSSchedUnlock+0xc4>
   10c20:	e0bffa17 	ldw	r2,-24(fp)
   10c24:	e0bffd15 	stw	r2,-12(fp)
   10c28:	e0bffd17 	ldw	r2,-12(fp)
   10c2c:	1001703a 	wrctl	status,r2
   10c30:	00000906 	br	10c58 <OSSchedUnlock+0xc4>
   10c34:	e0bffa17 	ldw	r2,-24(fp)
   10c38:	e0bffe15 	stw	r2,-8(fp)
   10c3c:	e0bffe17 	ldw	r2,-8(fp)
   10c40:	1001703a 	wrctl	status,r2
   10c44:	00000406 	br	10c58 <OSSchedUnlock+0xc4>
   10c48:	e0bffa17 	ldw	r2,-24(fp)
   10c4c:	e0bfff15 	stw	r2,-4(fp)
   10c50:	e0bfff17 	ldw	r2,-4(fp)
   10c54:	1001703a 	wrctl	status,r2
            }
        } else {
            OS_EXIT_CRITICAL();
        }
    }
}
   10c58:	e037883a 	mov	sp,fp
   10c5c:	dfc00117 	ldw	ra,4(sp)
   10c60:	df000017 	ldw	fp,0(sp)
   10c64:	dec00204 	addi	sp,sp,8
   10c68:	f800283a 	ret

00010c6c <OSStart>:
*                 d_ Execute the task.
*********************************************************************************************************
*/

void  OSStart (void)
{
   10c6c:	defffe04 	addi	sp,sp,-8
   10c70:	dfc00115 	stw	ra,4(sp)
   10c74:	df000015 	stw	fp,0(sp)
   10c78:	d839883a 	mov	fp,sp
    if (OSRunning == OS_FALSE) {
   10c7c:	d0a83b43 	ldbu	r2,-24339(gp)
   10c80:	10803fcc 	andi	r2,r2,255
   10c84:	10000f1e 	bne	r2,zero,10cc4 <OSStart+0x58>
        OS_SchedNew();                               /* Find highest priority's task priority number   */
   10c88:	0011ac00 	call	11ac0 <OS_SchedNew>
        OSPrioCur     = OSPrioHighRdy;
   10c8c:	d0a83d03 	ldbu	r2,-24332(gp)
   10c90:	d0a83d45 	stb	r2,-24331(gp)
        OSTCBHighRdy  = OSTCBPrioTbl[OSPrioHighRdy]; /* Point to highest priority task ready to run    */
   10c94:	d0a83d03 	ldbu	r2,-24332(gp)
   10c98:	10c03fcc 	andi	r3,r2,255
   10c9c:	008000f4 	movhi	r2,3
   10ca0:	1081e004 	addi	r2,r2,1920
   10ca4:	18c7883a 	add	r3,r3,r3
   10ca8:	18c7883a 	add	r3,r3,r3
   10cac:	10c5883a 	add	r2,r2,r3
   10cb0:	10800017 	ldw	r2,0(r2)
   10cb4:	d0a84515 	stw	r2,-24300(gp)
        OSTCBCur      = OSTCBHighRdy;
   10cb8:	d0a84517 	ldw	r2,-24300(gp)
   10cbc:	d0a84a15 	stw	r2,-24280(gp)
        OSStartHighRdy();                            /* Execute target specific code to start task     */
   10cc0:	001bc880 	call	1bc88 <OSStartHighRdy>
    }
}
   10cc4:	e037883a 	mov	sp,fp
   10cc8:	dfc00117 	ldw	ra,4(sp)
   10ccc:	df000017 	ldw	fp,0(sp)
   10cd0:	dec00204 	addi	sp,sp,8
   10cd4:	f800283a 	ret

00010cd8 <OSStatInit>:
*********************************************************************************************************
*/

#if OS_TASK_STAT_EN > 0
void  OSStatInit (void)
{
   10cd8:	defff904 	addi	sp,sp,-28
   10cdc:	dfc00615 	stw	ra,24(sp)
   10ce0:	df000515 	stw	fp,20(sp)
   10ce4:	df000504 	addi	fp,sp,20
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   10ce8:	e03ffb15 	stw	zero,-20(fp)
#endif



    OSTimeDly(2);                                /* Synchronize with clock tick                        */
   10cec:	01000084 	movi	r4,2
   10cf0:	001838c0 	call	1838c <OSTimeDly>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   10cf4:	0005303a 	rdctl	r2,status
   10cf8:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   10cfc:	e0fffc17 	ldw	r3,-16(fp)
   10d00:	00bfff84 	movi	r2,-2
   10d04:	1884703a 	and	r2,r3,r2
   10d08:	1001703a 	wrctl	status,r2
  
  return context;
   10d0c:	e0bffc17 	ldw	r2,-16(fp)
    OS_ENTER_CRITICAL();
   10d10:	e0bffb15 	stw	r2,-20(fp)
    OSIdleCtr    = 0L;                           /* Clear idle counter                                 */
   10d14:	d0283c15 	stw	zero,-24336(gp)
   10d18:	e0bffb17 	ldw	r2,-20(fp)
   10d1c:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   10d20:	e0bffd17 	ldw	r2,-12(fp)
   10d24:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    OSTimeDly(OS_TICKS_PER_SEC / 10);            /* Determine MAX. idle counter value for 1/10 second  */
   10d28:	0009883a 	mov	r4,zero
   10d2c:	001838c0 	call	1838c <OSTimeDly>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   10d30:	0005303a 	rdctl	r2,status
   10d34:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   10d38:	e0fffe17 	ldw	r3,-8(fp)
   10d3c:	00bfff84 	movi	r2,-2
   10d40:	1884703a 	and	r2,r3,r2
   10d44:	1001703a 	wrctl	status,r2
  
  return context;
   10d48:	e0bffe17 	ldw	r2,-8(fp)
    OS_ENTER_CRITICAL();
   10d4c:	e0bffb15 	stw	r2,-20(fp)
    OSIdleCtrMax = OSIdleCtr;                    /* Store maximum idle counter count in 1/10 second    */
   10d50:	d0a83c17 	ldw	r2,-24336(gp)
   10d54:	d0a84115 	stw	r2,-24316(gp)
    OSStatRdy    = OS_TRUE;
   10d58:	00800044 	movi	r2,1
   10d5c:	d0a84d05 	stb	r2,-24268(gp)
   10d60:	e0bffb17 	ldw	r2,-20(fp)
   10d64:	e0bfff15 	stw	r2,-4(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   10d68:	e0bfff17 	ldw	r2,-4(fp)
   10d6c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
}
   10d70:	e037883a 	mov	sp,fp
   10d74:	dfc00117 	ldw	ra,4(sp)
   10d78:	df000017 	ldw	fp,0(sp)
   10d7c:	dec00204 	addi	sp,sp,8
   10d80:	f800283a 	ret

00010d84 <OSTimeTick>:
* Returns    : none
*********************************************************************************************************
*/

void  OSTimeTick (void)
{
   10d84:	defff704 	addi	sp,sp,-36
   10d88:	dfc00815 	stw	ra,32(sp)
   10d8c:	df000715 	stw	fp,28(sp)
   10d90:	df000704 	addi	fp,sp,28
    OS_TCB    *ptcb;
#if OS_TICK_STEP_EN > 0
    BOOLEAN    step;
#endif
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
   10d94:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_TIME_TICK_HOOK_EN > 0
    OSTimeTickHook();                                      /* Call user definable hook                     */
   10d98:	001bea00 	call	1bea0 <OSTimeTickHook>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   10d9c:	0005303a 	rdctl	r2,status
   10da0:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   10da4:	e0fffc17 	ldw	r3,-16(fp)
   10da8:	00bfff84 	movi	r2,-2
   10dac:	1884703a 	and	r2,r3,r2
   10db0:	1001703a 	wrctl	status,r2
  
  return context;
   10db4:	e0bffc17 	ldw	r2,-16(fp)
#endif
#if OS_TIME_GET_SET_EN > 0
    OS_ENTER_CRITICAL();                                   /* Update the 32-bit tick counter               */
   10db8:	e0bffb15 	stw	r2,-20(fp)
    OSTime++;
   10dbc:	d0a84b17 	ldw	r2,-24276(gp)
   10dc0:	10800044 	addi	r2,r2,1
   10dc4:	d0a84b15 	stw	r2,-24276(gp)
   10dc8:	e0bffb17 	ldw	r2,-20(fp)
   10dcc:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   10dd0:	e0bffd17 	ldw	r2,-12(fp)
   10dd4:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
#endif
    if (OSRunning == OS_TRUE) {
   10dd8:	d0a83b43 	ldbu	r2,-24339(gp)
   10ddc:	10803fcc 	andi	r2,r2,255
   10de0:	10800058 	cmpnei	r2,r2,1
   10de4:	1000691e 	bne	r2,zero,10f8c <OSTimeTick+0x208>
#if OS_TICK_STEP_EN > 0
        switch (OSTickStepState) {                         /* Determine whether we need to process a tick  */
   10de8:	d0a83f03 	ldbu	r2,-24324(gp)
   10dec:	10803fcc 	andi	r2,r2,255
   10df0:	10c00060 	cmpeqi	r3,r2,1
   10df4:	1800061e 	bne	r3,zero,10e10 <OSTimeTick+0x8c>
   10df8:	10c000a0 	cmpeqi	r3,r2,2
   10dfc:	1800061e 	bne	r3,zero,10e18 <OSTimeTick+0x94>
   10e00:	10000a1e 	bne	r2,zero,10e2c <OSTimeTick+0xa8>
            case OS_TICK_STEP_DIS:                         /* Yes, stepping is disabled                    */
                 step = OS_TRUE;
   10e04:	00800044 	movi	r2,1
   10e08:	e0bffa05 	stb	r2,-24(fp)
                 break;
   10e0c:	00000b06 	br	10e3c <OSTimeTick+0xb8>

            case OS_TICK_STEP_WAIT:                        /* No,  waiting for uC/OS-View to set ...       */
                 step = OS_FALSE;                          /*      .. OSTickStepState to OS_TICK_STEP_ONCE */
   10e10:	e03ffa05 	stb	zero,-24(fp)
                 break;
   10e14:	00000906 	br	10e3c <OSTimeTick+0xb8>

            case OS_TICK_STEP_ONCE:                        /* Yes, process tick once and wait for next ... */
                 step            = OS_TRUE;                /*      ... step command from uC/OS-View        */
   10e18:	00800044 	movi	r2,1
   10e1c:	e0bffa05 	stb	r2,-24(fp)
                 OSTickStepState = OS_TICK_STEP_WAIT;
   10e20:	00800044 	movi	r2,1
   10e24:	d0a83f05 	stb	r2,-24324(gp)
                 break;
   10e28:	00000406 	br	10e3c <OSTimeTick+0xb8>

            default:                                       /* Invalid case, correct situation              */
                 step            = OS_TRUE;
   10e2c:	00800044 	movi	r2,1
   10e30:	e0bffa05 	stb	r2,-24(fp)
                 OSTickStepState = OS_TICK_STEP_DIS;
   10e34:	d0283f05 	stb	zero,-24324(gp)
                 break;
   10e38:	0001883a 	nop
        }
        if (step == OS_FALSE) {                            /* Return if waiting for step command           */
   10e3c:	e0bffa03 	ldbu	r2,-24(fp)
   10e40:	1000011e 	bne	r2,zero,10e48 <OSTimeTick+0xc4>
            return;
   10e44:	00005106 	br	10f8c <OSTimeTick+0x208>
        }
#endif
        ptcb = OSTCBList;                                  /* Point at first TCB in TCB list               */
   10e48:	d0a83e17 	ldw	r2,-24328(gp)
   10e4c:	e0bff915 	stw	r2,-28(fp)
        while (ptcb->OSTCBPrio != OS_TASK_IDLE_PRIO) {     /* Go through all TCBs in TCB list              */
   10e50:	00004906 	br	10f78 <OSTimeTick+0x1f4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   10e54:	0005303a 	rdctl	r2,status
   10e58:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   10e5c:	e0fffe17 	ldw	r3,-8(fp)
   10e60:	00bfff84 	movi	r2,-2
   10e64:	1884703a 	and	r2,r3,r2
   10e68:	1001703a 	wrctl	status,r2
  
  return context;
   10e6c:	e0bffe17 	ldw	r2,-8(fp)
            OS_ENTER_CRITICAL();
   10e70:	e0bffb15 	stw	r2,-20(fp)
            if (ptcb->OSTCBDly != 0) {                     /* No, Delayed or waiting for event with TO     */
   10e74:	e0bff917 	ldw	r2,-28(fp)
   10e78:	10800b8b 	ldhu	r2,46(r2)
   10e7c:	10bfffcc 	andi	r2,r2,65535
   10e80:	10003626 	beq	r2,zero,10f5c <OSTimeTick+0x1d8>
                if (--ptcb->OSTCBDly == 0) {               /* Decrement nbr of ticks to end of delay       */
   10e84:	e0bff917 	ldw	r2,-28(fp)
   10e88:	10800b8b 	ldhu	r2,46(r2)
   10e8c:	10bfffc4 	addi	r2,r2,-1
   10e90:	1007883a 	mov	r3,r2
   10e94:	e0bff917 	ldw	r2,-28(fp)
   10e98:	10c00b8d 	sth	r3,46(r2)
   10e9c:	e0bff917 	ldw	r2,-28(fp)
   10ea0:	10800b8b 	ldhu	r2,46(r2)
   10ea4:	10bfffcc 	andi	r2,r2,65535
   10ea8:	10002c1e 	bne	r2,zero,10f5c <OSTimeTick+0x1d8>
                                                           /* Check for timeout                            */
                    if ((ptcb->OSTCBStat & OS_STAT_PEND_ANY) != OS_STAT_RDY) {
   10eac:	e0bff917 	ldw	r2,-28(fp)
   10eb0:	10800c03 	ldbu	r2,48(r2)
   10eb4:	10803fcc 	andi	r2,r2,255
   10eb8:	10800dcc 	andi	r2,r2,55
   10ebc:	10000b26 	beq	r2,zero,10eec <OSTimeTick+0x168>
                        ptcb->OSTCBStat  &= ~(INT8U)OS_STAT_PEND_ANY;          /* Yes, Clear status flag   */
   10ec0:	e0bff917 	ldw	r2,-28(fp)
   10ec4:	10c00c03 	ldbu	r3,48(r2)
   10ec8:	00bff204 	movi	r2,-56
   10ecc:	1884703a 	and	r2,r3,r2
   10ed0:	1007883a 	mov	r3,r2
   10ed4:	e0bff917 	ldw	r2,-28(fp)
   10ed8:	10c00c05 	stb	r3,48(r2)
                        ptcb->OSTCBStatPend = OS_STAT_PEND_TO;                 /* Indicate PEND timeout    */
   10edc:	e0bff917 	ldw	r2,-28(fp)
   10ee0:	00c00044 	movi	r3,1
   10ee4:	10c00c45 	stb	r3,49(r2)
   10ee8:	00000206 	br	10ef4 <OSTimeTick+0x170>
                    } else {
                        ptcb->OSTCBStatPend = OS_STAT_PEND_OK;
   10eec:	e0bff917 	ldw	r2,-28(fp)
   10ef0:	10000c45 	stb	zero,49(r2)
                    }

                    if ((ptcb->OSTCBStat & OS_STAT_SUSPEND) == OS_STAT_RDY) {  /* Is task suspended?       */
   10ef4:	e0bff917 	ldw	r2,-28(fp)
   10ef8:	10800c03 	ldbu	r2,48(r2)
   10efc:	10803fcc 	andi	r2,r2,255
   10f00:	1080020c 	andi	r2,r2,8
   10f04:	1000151e 	bne	r2,zero,10f5c <OSTimeTick+0x1d8>
                        OSRdyGrp               |= ptcb->OSTCBBitY;             /* No,  Make ready          */
   10f08:	e0bff917 	ldw	r2,-28(fp)
   10f0c:	10c00d83 	ldbu	r3,54(r2)
   10f10:	d0a84703 	ldbu	r2,-24292(gp)
   10f14:	1884b03a 	or	r2,r3,r2
   10f18:	d0a84705 	stb	r2,-24292(gp)
                        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
   10f1c:	e0bff917 	ldw	r2,-28(fp)
   10f20:	10800d03 	ldbu	r2,52(r2)
   10f24:	10c03fcc 	andi	r3,r2,255
   10f28:	e0bff917 	ldw	r2,-28(fp)
   10f2c:	10800d03 	ldbu	r2,52(r2)
   10f30:	11003fcc 	andi	r4,r2,255
   10f34:	d0a84744 	addi	r2,gp,-24291
   10f38:	2085883a 	add	r2,r4,r2
   10f3c:	11000003 	ldbu	r4,0(r2)
   10f40:	e0bff917 	ldw	r2,-28(fp)
   10f44:	10800d43 	ldbu	r2,53(r2)
   10f48:	2084b03a 	or	r2,r4,r2
   10f4c:	1009883a 	mov	r4,r2
   10f50:	d0a84744 	addi	r2,gp,-24291
   10f54:	1885883a 	add	r2,r3,r2
   10f58:	11000005 	stb	r4,0(r2)
                    }
                }
            }
            ptcb = ptcb->OSTCBNext;                        /* Point at next TCB in TCB list                */
   10f5c:	e0bff917 	ldw	r2,-28(fp)
   10f60:	10800517 	ldw	r2,20(r2)
   10f64:	e0bff915 	stw	r2,-28(fp)
   10f68:	e0bffb17 	ldw	r2,-20(fp)
   10f6c:	e0bfff15 	stw	r2,-4(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   10f70:	e0bfff17 	ldw	r2,-4(fp)
   10f74:	1001703a 	wrctl	status,r2
        if (step == OS_FALSE) {                            /* Return if waiting for step command           */
            return;
        }
#endif
        ptcb = OSTCBList;                                  /* Point at first TCB in TCB list               */
        while (ptcb->OSTCBPrio != OS_TASK_IDLE_PRIO) {     /* Go through all TCBs in TCB list              */
   10f78:	e0bff917 	ldw	r2,-28(fp)
   10f7c:	10800c83 	ldbu	r2,50(r2)
   10f80:	10803fcc 	andi	r2,r2,255
   10f84:	10800518 	cmpnei	r2,r2,20
   10f88:	103fb21e 	bne	r2,zero,10e54 <__alt_mem_Flash_flash_data+0xf4010e54>
            }
            ptcb = ptcb->OSTCBNext;                        /* Point at next TCB in TCB list                */
            OS_EXIT_CRITICAL();
        }
    }
}
   10f8c:	e037883a 	mov	sp,fp
   10f90:	dfc00117 	ldw	ra,4(sp)
   10f94:	df000017 	ldw	fp,0(sp)
   10f98:	dec00204 	addi	sp,sp,8
   10f9c:	f800283a 	ret

00010fa0 <OSVersion>:
* Returns    : the version number of uC/OS-II multiplied by 100.
*********************************************************************************************************
*/

INT16U  OSVersion (void)
{
   10fa0:	deffff04 	addi	sp,sp,-4
   10fa4:	df000015 	stw	fp,0(sp)
   10fa8:	d839883a 	mov	fp,sp
    return (OS_VERSION);
   10fac:	00804784 	movi	r2,286
}
   10fb0:	e037883a 	mov	sp,fp
   10fb4:	df000017 	ldw	fp,0(sp)
   10fb8:	dec00104 	addi	sp,sp,4
   10fbc:	f800283a 	ret

00010fc0 <OS_Dummy>:
*********************************************************************************************************
*/

#if OS_TASK_DEL_EN > 0
void  OS_Dummy (void)
{
   10fc0:	deffff04 	addi	sp,sp,-4
   10fc4:	df000015 	stw	fp,0(sp)
   10fc8:	d839883a 	mov	fp,sp
}
   10fcc:	e037883a 	mov	sp,fp
   10fd0:	df000017 	ldw	fp,0(sp)
   10fd4:	dec00104 	addi	sp,sp,4
   10fd8:	f800283a 	ret

00010fdc <OS_EventTaskRdy>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
INT8U  OS_EventTaskRdy (OS_EVENT *pevent, void *pmsg, INT8U msk, INT8U pend_stat)
{
   10fdc:	defff804 	addi	sp,sp,-32
   10fe0:	dfc00715 	stw	ra,28(sp)
   10fe4:	df000615 	stw	fp,24(sp)
   10fe8:	df000604 	addi	fp,sp,24
   10fec:	e13ffc15 	stw	r4,-16(fp)
   10ff0:	e17ffd15 	stw	r5,-12(fp)
   10ff4:	3007883a 	mov	r3,r6
   10ff8:	3805883a 	mov	r2,r7
   10ffc:	e0fffe05 	stb	r3,-8(fp)
   11000:	e0bfff05 	stb	r2,-4(fp)
    INT16U  *ptbl;
#endif


#if OS_LOWEST_PRIO <= 63
    y    = OSUnMapTbl[pevent->OSEventGrp];              /* Find HPT waiting for message                */
   11004:	e0bffc17 	ldw	r2,-16(fp)
   11008:	10800283 	ldbu	r2,10(r2)
   1100c:	10c03fcc 	andi	r3,r2,255
   11010:	008000b4 	movhi	r2,2
   11014:	10b2ce04 	addi	r2,r2,-13512
   11018:	10c5883a 	add	r2,r2,r3
   1101c:	10800003 	ldbu	r2,0(r2)
   11020:	e0bffa05 	stb	r2,-24(fp)
    x    = OSUnMapTbl[pevent->OSEventTbl[y]];
   11024:	e0bffa03 	ldbu	r2,-24(fp)
   11028:	e0fffc17 	ldw	r3,-16(fp)
   1102c:	1885883a 	add	r2,r3,r2
   11030:	10800204 	addi	r2,r2,8
   11034:	108000c3 	ldbu	r2,3(r2)
   11038:	10c03fcc 	andi	r3,r2,255
   1103c:	008000b4 	movhi	r2,2
   11040:	10b2ce04 	addi	r2,r2,-13512
   11044:	10c5883a 	add	r2,r2,r3
   11048:	10800003 	ldbu	r2,0(r2)
   1104c:	e0bffa45 	stb	r2,-23(fp)
    prio = (INT8U)((y << 3) + x);                       /* Find priority of task getting the msg       */
   11050:	e0bffa03 	ldbu	r2,-24(fp)
   11054:	100490fa 	slli	r2,r2,3
   11058:	1007883a 	mov	r3,r2
   1105c:	e0bffa43 	ldbu	r2,-23(fp)
   11060:	1885883a 	add	r2,r3,r2
   11064:	e0bffa85 	stb	r2,-22(fp)
        x = OSUnMapTbl[(*ptbl >> 8) & 0xFF] + 8;
    }
    prio = (INT8U)((y << 4) + x);                       /* Find priority of task getting the msg       */
#endif

    ptcb                  =  OSTCBPrioTbl[prio];        /* Point to this task's OS_TCB                 */
   11068:	e0fffa83 	ldbu	r3,-22(fp)
   1106c:	008000f4 	movhi	r2,3
   11070:	1081e004 	addi	r2,r2,1920
   11074:	18c7883a 	add	r3,r3,r3
   11078:	18c7883a 	add	r3,r3,r3
   1107c:	10c5883a 	add	r2,r2,r3
   11080:	10800017 	ldw	r2,0(r2)
   11084:	e0bffb15 	stw	r2,-20(fp)
    ptcb->OSTCBDly        =  0;                         /* Prevent OSTimeTick() from readying task     */
   11088:	e0bffb17 	ldw	r2,-20(fp)
   1108c:	10000b8d 	sth	zero,46(r2)
#if ((OS_Q_EN > 0) && (OS_MAX_QS > 0)) || (OS_MBOX_EN > 0)
    ptcb->OSTCBMsg        =  pmsg;                      /* Send message directly to waiting task       */
   11090:	e0bffb17 	ldw	r2,-20(fp)
   11094:	e0fffd17 	ldw	r3,-12(fp)
   11098:	10c00915 	stw	r3,36(r2)
#else
    pmsg                  =  pmsg;                      /* Prevent compiler warning if not used        */
#endif
    ptcb->OSTCBStat      &= ~msk;                       /* Clear bit associated with event type        */
   1109c:	e0bffb17 	ldw	r2,-20(fp)
   110a0:	10800c03 	ldbu	r2,48(r2)
   110a4:	1007883a 	mov	r3,r2
   110a8:	e0bffe03 	ldbu	r2,-8(fp)
   110ac:	0084303a 	nor	r2,zero,r2
   110b0:	1884703a 	and	r2,r3,r2
   110b4:	1007883a 	mov	r3,r2
   110b8:	e0bffb17 	ldw	r2,-20(fp)
   110bc:	10c00c05 	stb	r3,48(r2)
    ptcb->OSTCBStatPend   =  pend_stat;                 /* Set pend status of post or abort            */
   110c0:	e0bffb17 	ldw	r2,-20(fp)
   110c4:	e0ffff03 	ldbu	r3,-4(fp)
   110c8:	10c00c45 	stb	r3,49(r2)
                                                        /* See if task is ready (could be susp'd)      */
    if ((ptcb->OSTCBStat &   OS_STAT_SUSPEND) == OS_STAT_RDY) {
   110cc:	e0bffb17 	ldw	r2,-20(fp)
   110d0:	10800c03 	ldbu	r2,48(r2)
   110d4:	10803fcc 	andi	r2,r2,255
   110d8:	1080020c 	andi	r2,r2,8
   110dc:	1000111e 	bne	r2,zero,11124 <OS_EventTaskRdy+0x148>
        OSRdyGrp         |=  ptcb->OSTCBBitY;           /* Put task in the ready to run list           */
   110e0:	e0bffb17 	ldw	r2,-20(fp)
   110e4:	10c00d83 	ldbu	r3,54(r2)
   110e8:	d0a84703 	ldbu	r2,-24292(gp)
   110ec:	1884b03a 	or	r2,r3,r2
   110f0:	d0a84705 	stb	r2,-24292(gp)
        OSRdyTbl[y]      |=  ptcb->OSTCBBitX;
   110f4:	e0fffa03 	ldbu	r3,-24(fp)
   110f8:	e13ffa03 	ldbu	r4,-24(fp)
   110fc:	d0a84744 	addi	r2,gp,-24291
   11100:	2085883a 	add	r2,r4,r2
   11104:	11000003 	ldbu	r4,0(r2)
   11108:	e0bffb17 	ldw	r2,-20(fp)
   1110c:	10800d43 	ldbu	r2,53(r2)
   11110:	2084b03a 	or	r2,r4,r2
   11114:	1009883a 	mov	r4,r2
   11118:	d0a84744 	addi	r2,gp,-24291
   1111c:	1885883a 	add	r2,r3,r2
   11120:	11000005 	stb	r4,0(r2)
    }

    OS_EventTaskRemove(ptcb, pevent);                   /* Remove this task from event   wait list     */
   11124:	e13ffb17 	ldw	r4,-20(fp)
   11128:	e17ffc17 	ldw	r5,-16(fp)
   1112c:	00113cc0 	call	113cc <OS_EventTaskRemove>
#if (OS_EVENT_MULTI_EN > 0)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {   /* Remove this task from events' wait lists    */
   11130:	e0bffb17 	ldw	r2,-20(fp)
   11134:	10800817 	ldw	r2,32(r2)
   11138:	10000826 	beq	r2,zero,1115c <OS_EventTaskRdy+0x180>
        OS_EventTaskRemoveMulti(ptcb, ptcb->OSTCBEventMultiPtr);
   1113c:	e0bffb17 	ldw	r2,-20(fp)
   11140:	10800817 	ldw	r2,32(r2)
   11144:	e13ffb17 	ldw	r4,-20(fp)
   11148:	100b883a 	mov	r5,r2
   1114c:	00114800 	call	11480 <OS_EventTaskRemoveMulti>
        ptcb->OSTCBEventPtr       = (OS_EVENT  *)pevent;/* Return event as first multi-pend event ready*/
   11150:	e0bffb17 	ldw	r2,-20(fp)
   11154:	e0fffc17 	ldw	r3,-16(fp)
   11158:	10c00715 	stw	r3,28(r2)
    }
#endif

    return (prio);
   1115c:	e0bffa83 	ldbu	r2,-22(fp)
}
   11160:	e037883a 	mov	sp,fp
   11164:	dfc00117 	ldw	ra,4(sp)
   11168:	df000017 	ldw	fp,0(sp)
   1116c:	dec00204 	addi	sp,sp,8
   11170:	f800283a 	ret

00011174 <OS_EventTaskWait>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
void  OS_EventTaskWait (OS_EVENT *pevent)
{
   11174:	defffd04 	addi	sp,sp,-12
   11178:	df000215 	stw	fp,8(sp)
   1117c:	df000204 	addi	fp,sp,8
   11180:	e13fff15 	stw	r4,-4(fp)
    INT8U  y;


    OSTCBCur->OSTCBEventPtr               = pevent;                 /* Store ptr to ECB in TCB         */
   11184:	d0a84a17 	ldw	r2,-24280(gp)
   11188:	e0ffff17 	ldw	r3,-4(fp)
   1118c:	10c00715 	stw	r3,28(r2)

    pevent->OSEventTbl[OSTCBCur->OSTCBY] |= OSTCBCur->OSTCBBitX;    /* Put task in waiting list        */
   11190:	d0a84a17 	ldw	r2,-24280(gp)
   11194:	10800d03 	ldbu	r2,52(r2)
   11198:	10803fcc 	andi	r2,r2,255
   1119c:	d0e84a17 	ldw	r3,-24280(gp)
   111a0:	18c00d03 	ldbu	r3,52(r3)
   111a4:	18c03fcc 	andi	r3,r3,255
   111a8:	e13fff17 	ldw	r4,-4(fp)
   111ac:	20c7883a 	add	r3,r4,r3
   111b0:	18c00204 	addi	r3,r3,8
   111b4:	190000c3 	ldbu	r4,3(r3)
   111b8:	d0e84a17 	ldw	r3,-24280(gp)
   111bc:	18c00d43 	ldbu	r3,53(r3)
   111c0:	20c6b03a 	or	r3,r4,r3
   111c4:	1809883a 	mov	r4,r3
   111c8:	e0ffff17 	ldw	r3,-4(fp)
   111cc:	1885883a 	add	r2,r3,r2
   111d0:	10800204 	addi	r2,r2,8
   111d4:	110000c5 	stb	r4,3(r2)
    pevent->OSEventGrp                   |= OSTCBCur->OSTCBBitY;
   111d8:	e0bfff17 	ldw	r2,-4(fp)
   111dc:	10c00283 	ldbu	r3,10(r2)
   111e0:	d0a84a17 	ldw	r2,-24280(gp)
   111e4:	10800d83 	ldbu	r2,54(r2)
   111e8:	1884b03a 	or	r2,r3,r2
   111ec:	1007883a 	mov	r3,r2
   111f0:	e0bfff17 	ldw	r2,-4(fp)
   111f4:	10c00285 	stb	r3,10(r2)

    y             =  OSTCBCur->OSTCBY;            /* Task no longer ready                              */
   111f8:	d0a84a17 	ldw	r2,-24280(gp)
   111fc:	10800d03 	ldbu	r2,52(r2)
   11200:	e0bffe05 	stb	r2,-8(fp)
    OSRdyTbl[y]  &= ~OSTCBCur->OSTCBBitX;
   11204:	e0fffe03 	ldbu	r3,-8(fp)
   11208:	e13ffe03 	ldbu	r4,-8(fp)
   1120c:	d0a84744 	addi	r2,gp,-24291
   11210:	2085883a 	add	r2,r4,r2
   11214:	10800003 	ldbu	r2,0(r2)
   11218:	1009883a 	mov	r4,r2
   1121c:	d0a84a17 	ldw	r2,-24280(gp)
   11220:	10800d43 	ldbu	r2,53(r2)
   11224:	0084303a 	nor	r2,zero,r2
   11228:	2084703a 	and	r2,r4,r2
   1122c:	1009883a 	mov	r4,r2
   11230:	d0a84744 	addi	r2,gp,-24291
   11234:	1885883a 	add	r2,r3,r2
   11238:	11000005 	stb	r4,0(r2)
    if (OSRdyTbl[y] == 0) {
   1123c:	e0fffe03 	ldbu	r3,-8(fp)
   11240:	d0a84744 	addi	r2,gp,-24291
   11244:	1885883a 	add	r2,r3,r2
   11248:	10800003 	ldbu	r2,0(r2)
   1124c:	10803fcc 	andi	r2,r2,255
   11250:	1000071e 	bne	r2,zero,11270 <OS_EventTaskWait+0xfc>
        OSRdyGrp &= ~OSTCBCur->OSTCBBitY;         /* Clear event grp bit if this was only task pending */
   11254:	d0a84a17 	ldw	r2,-24280(gp)
   11258:	10800d83 	ldbu	r2,54(r2)
   1125c:	0084303a 	nor	r2,zero,r2
   11260:	1007883a 	mov	r3,r2
   11264:	d0a84703 	ldbu	r2,-24292(gp)
   11268:	1884703a 	and	r2,r3,r2
   1126c:	d0a84705 	stb	r2,-24292(gp)
    }
}
   11270:	e037883a 	mov	sp,fp
   11274:	df000017 	ldw	fp,0(sp)
   11278:	dec00104 	addi	sp,sp,4
   1127c:	f800283a 	ret

00011280 <OS_EventTaskWaitMulti>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if ((OS_EVENT_EN) && (OS_EVENT_MULTI_EN > 0))
void  OS_EventTaskWaitMulti (OS_EVENT **pevents_wait)
{
   11280:	defffb04 	addi	sp,sp,-20
   11284:	df000415 	stw	fp,16(sp)
   11288:	df000404 	addi	fp,sp,16
   1128c:	e13fff15 	stw	r4,-4(fp)
    OS_EVENT **pevents;
    OS_EVENT  *pevent;
    INT8U      y;


    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;
   11290:	d0a84a17 	ldw	r2,-24280(gp)
   11294:	10000715 	stw	zero,28(r2)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)pevents_wait;       /* Store ptr to ECBs in TCB        */
   11298:	d0a84a17 	ldw	r2,-24280(gp)
   1129c:	e0ffff17 	ldw	r3,-4(fp)
   112a0:	10c00815 	stw	r3,32(r2)

    pevents =  pevents_wait;
   112a4:	e0bfff17 	ldw	r2,-4(fp)
   112a8:	e0bffc15 	stw	r2,-16(fp)
    pevent  = *pevents;
   112ac:	e0bffc17 	ldw	r2,-16(fp)
   112b0:	10800017 	ldw	r2,0(r2)
   112b4:	e0bffd15 	stw	r2,-12(fp)
    while (pevent != (OS_EVENT *)0) {                               /* Put task in waiting lists       */
   112b8:	00002006 	br	1133c <OS_EventTaskWaitMulti+0xbc>
        pevent->OSEventTbl[OSTCBCur->OSTCBY] |= OSTCBCur->OSTCBBitX;
   112bc:	d0a84a17 	ldw	r2,-24280(gp)
   112c0:	10800d03 	ldbu	r2,52(r2)
   112c4:	10803fcc 	andi	r2,r2,255
   112c8:	d0e84a17 	ldw	r3,-24280(gp)
   112cc:	18c00d03 	ldbu	r3,52(r3)
   112d0:	18c03fcc 	andi	r3,r3,255
   112d4:	e13ffd17 	ldw	r4,-12(fp)
   112d8:	20c7883a 	add	r3,r4,r3
   112dc:	18c00204 	addi	r3,r3,8
   112e0:	190000c3 	ldbu	r4,3(r3)
   112e4:	d0e84a17 	ldw	r3,-24280(gp)
   112e8:	18c00d43 	ldbu	r3,53(r3)
   112ec:	20c6b03a 	or	r3,r4,r3
   112f0:	1809883a 	mov	r4,r3
   112f4:	e0fffd17 	ldw	r3,-12(fp)
   112f8:	1885883a 	add	r2,r3,r2
   112fc:	10800204 	addi	r2,r2,8
   11300:	110000c5 	stb	r4,3(r2)
        pevent->OSEventGrp                   |= OSTCBCur->OSTCBBitY;
   11304:	e0bffd17 	ldw	r2,-12(fp)
   11308:	10c00283 	ldbu	r3,10(r2)
   1130c:	d0a84a17 	ldw	r2,-24280(gp)
   11310:	10800d83 	ldbu	r2,54(r2)
   11314:	1884b03a 	or	r2,r3,r2
   11318:	1007883a 	mov	r3,r2
   1131c:	e0bffd17 	ldw	r2,-12(fp)
   11320:	10c00285 	stb	r3,10(r2)
        pevents++;
   11324:	e0bffc17 	ldw	r2,-16(fp)
   11328:	10800104 	addi	r2,r2,4
   1132c:	e0bffc15 	stw	r2,-16(fp)
        pevent = *pevents;
   11330:	e0bffc17 	ldw	r2,-16(fp)
   11334:	10800017 	ldw	r2,0(r2)
   11338:	e0bffd15 	stw	r2,-12(fp)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)pevents_wait;       /* Store ptr to ECBs in TCB        */

    pevents =  pevents_wait;
    pevent  = *pevents;
    while (pevent != (OS_EVENT *)0) {                               /* Put task in waiting lists       */
   1133c:	e0bffd17 	ldw	r2,-12(fp)
   11340:	103fde1e 	bne	r2,zero,112bc <__alt_mem_Flash_flash_data+0xf40112bc>
        pevent->OSEventGrp                   |= OSTCBCur->OSTCBBitY;
        pevents++;
        pevent = *pevents;
    }

    y             =  OSTCBCur->OSTCBY;            /* Task no longer ready                              */
   11344:	d0a84a17 	ldw	r2,-24280(gp)
   11348:	10800d03 	ldbu	r2,52(r2)
   1134c:	e0bffe05 	stb	r2,-8(fp)
    OSRdyTbl[y]  &= ~OSTCBCur->OSTCBBitX;
   11350:	e0fffe03 	ldbu	r3,-8(fp)
   11354:	e13ffe03 	ldbu	r4,-8(fp)
   11358:	d0a84744 	addi	r2,gp,-24291
   1135c:	2085883a 	add	r2,r4,r2
   11360:	10800003 	ldbu	r2,0(r2)
   11364:	1009883a 	mov	r4,r2
   11368:	d0a84a17 	ldw	r2,-24280(gp)
   1136c:	10800d43 	ldbu	r2,53(r2)
   11370:	0084303a 	nor	r2,zero,r2
   11374:	2084703a 	and	r2,r4,r2
   11378:	1009883a 	mov	r4,r2
   1137c:	d0a84744 	addi	r2,gp,-24291
   11380:	1885883a 	add	r2,r3,r2
   11384:	11000005 	stb	r4,0(r2)
    if (OSRdyTbl[y] == 0) {
   11388:	e0fffe03 	ldbu	r3,-8(fp)
   1138c:	d0a84744 	addi	r2,gp,-24291
   11390:	1885883a 	add	r2,r3,r2
   11394:	10800003 	ldbu	r2,0(r2)
   11398:	10803fcc 	andi	r2,r2,255
   1139c:	1000071e 	bne	r2,zero,113bc <OS_EventTaskWaitMulti+0x13c>
        OSRdyGrp &= ~OSTCBCur->OSTCBBitY;         /* Clear event grp bit if this was only task pending */
   113a0:	d0a84a17 	ldw	r2,-24280(gp)
   113a4:	10800d83 	ldbu	r2,54(r2)
   113a8:	0084303a 	nor	r2,zero,r2
   113ac:	1007883a 	mov	r3,r2
   113b0:	d0a84703 	ldbu	r2,-24292(gp)
   113b4:	1884703a 	and	r2,r3,r2
   113b8:	d0a84705 	stb	r2,-24292(gp)
    }
}
   113bc:	e037883a 	mov	sp,fp
   113c0:	df000017 	ldw	fp,0(sp)
   113c4:	dec00104 	addi	sp,sp,4
   113c8:	f800283a 	ret

000113cc <OS_EventTaskRemove>:
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
void  OS_EventTaskRemove (OS_TCB   *ptcb,
                          OS_EVENT *pevent)
{
   113cc:	defffc04 	addi	sp,sp,-16
   113d0:	df000315 	stw	fp,12(sp)
   113d4:	df000304 	addi	fp,sp,12
   113d8:	e13ffe15 	stw	r4,-8(fp)
   113dc:	e17fff15 	stw	r5,-4(fp)
    INT8U  y;


    y                       =  ptcb->OSTCBY;
   113e0:	e0bffe17 	ldw	r2,-8(fp)
   113e4:	10800d03 	ldbu	r2,52(r2)
   113e8:	e0bffd05 	stb	r2,-12(fp)
    pevent->OSEventTbl[y]  &= ~ptcb->OSTCBBitX;         /* Remove task from wait list                  */
   113ec:	e0bffd03 	ldbu	r2,-12(fp)
   113f0:	e0fffd03 	ldbu	r3,-12(fp)
   113f4:	e13fff17 	ldw	r4,-4(fp)
   113f8:	20c7883a 	add	r3,r4,r3
   113fc:	18c00204 	addi	r3,r3,8
   11400:	18c000c3 	ldbu	r3,3(r3)
   11404:	1809883a 	mov	r4,r3
   11408:	e0fffe17 	ldw	r3,-8(fp)
   1140c:	18c00d43 	ldbu	r3,53(r3)
   11410:	00c6303a 	nor	r3,zero,r3
   11414:	20c6703a 	and	r3,r4,r3
   11418:	1809883a 	mov	r4,r3
   1141c:	e0ffff17 	ldw	r3,-4(fp)
   11420:	1885883a 	add	r2,r3,r2
   11424:	10800204 	addi	r2,r2,8
   11428:	110000c5 	stb	r4,3(r2)
    if (pevent->OSEventTbl[y] == 0) {
   1142c:	e0bffd03 	ldbu	r2,-12(fp)
   11430:	e0ffff17 	ldw	r3,-4(fp)
   11434:	1885883a 	add	r2,r3,r2
   11438:	10800204 	addi	r2,r2,8
   1143c:	108000c3 	ldbu	r2,3(r2)
   11440:	10803fcc 	andi	r2,r2,255
   11444:	10000a1e 	bne	r2,zero,11470 <OS_EventTaskRemove+0xa4>
        pevent->OSEventGrp &= ~ptcb->OSTCBBitY;
   11448:	e0bfff17 	ldw	r2,-4(fp)
   1144c:	10800283 	ldbu	r2,10(r2)
   11450:	1007883a 	mov	r3,r2
   11454:	e0bffe17 	ldw	r2,-8(fp)
   11458:	10800d83 	ldbu	r2,54(r2)
   1145c:	0084303a 	nor	r2,zero,r2
   11460:	1884703a 	and	r2,r3,r2
   11464:	1007883a 	mov	r3,r2
   11468:	e0bfff17 	ldw	r2,-4(fp)
   1146c:	10c00285 	stb	r3,10(r2)
    }
}
   11470:	e037883a 	mov	sp,fp
   11474:	df000017 	ldw	fp,0(sp)
   11478:	dec00104 	addi	sp,sp,4
   1147c:	f800283a 	ret

00011480 <OS_EventTaskRemoveMulti>:
*********************************************************************************************************
*/
#if ((OS_EVENT_EN) && (OS_EVENT_MULTI_EN > 0))
void  OS_EventTaskRemoveMulti (OS_TCB    *ptcb,
                               OS_EVENT **pevents_multi)
{
   11480:	defffa04 	addi	sp,sp,-24
   11484:	df000515 	stw	fp,20(sp)
   11488:	df000504 	addi	fp,sp,20
   1148c:	e13ffe15 	stw	r4,-8(fp)
   11490:	e17fff15 	stw	r5,-4(fp)
    INT16U     bity;
    INT16U     bitx;
#endif


    y       =  ptcb->OSTCBY;
   11494:	e0bffe17 	ldw	r2,-8(fp)
   11498:	10800d03 	ldbu	r2,52(r2)
   1149c:	e0bffd05 	stb	r2,-12(fp)
    bity    =  ptcb->OSTCBBitY;
   114a0:	e0bffe17 	ldw	r2,-8(fp)
   114a4:	10800d83 	ldbu	r2,54(r2)
   114a8:	e0bffd45 	stb	r2,-11(fp)
    bitx    =  ptcb->OSTCBBitX;
   114ac:	e0bffe17 	ldw	r2,-8(fp)
   114b0:	10800d43 	ldbu	r2,53(r2)
   114b4:	e0bffd85 	stb	r2,-10(fp)
    pevents =  pevents_multi;
   114b8:	e0bfff17 	ldw	r2,-4(fp)
   114bc:	e0bffb15 	stw	r2,-20(fp)
    pevent  = *pevents;
   114c0:	e0bffb17 	ldw	r2,-20(fp)
   114c4:	10800017 	ldw	r2,0(r2)
   114c8:	e0bffc15 	stw	r2,-16(fp)
    while (pevent != (OS_EVENT *)0) {                   /* Remove task from all events' wait lists     */
   114cc:	00002506 	br	11564 <OS_EventTaskRemoveMulti+0xe4>
        pevent->OSEventTbl[y]  &= ~bitx;
   114d0:	e0bffd03 	ldbu	r2,-12(fp)
   114d4:	e0fffd03 	ldbu	r3,-12(fp)
   114d8:	e13ffc17 	ldw	r4,-16(fp)
   114dc:	20c7883a 	add	r3,r4,r3
   114e0:	18c00204 	addi	r3,r3,8
   114e4:	18c000c3 	ldbu	r3,3(r3)
   114e8:	1809883a 	mov	r4,r3
   114ec:	e0fffd83 	ldbu	r3,-10(fp)
   114f0:	00c6303a 	nor	r3,zero,r3
   114f4:	20c6703a 	and	r3,r4,r3
   114f8:	1809883a 	mov	r4,r3
   114fc:	e0fffc17 	ldw	r3,-16(fp)
   11500:	1885883a 	add	r2,r3,r2
   11504:	10800204 	addi	r2,r2,8
   11508:	110000c5 	stb	r4,3(r2)
        if (pevent->OSEventTbl[y] == 0) {
   1150c:	e0bffd03 	ldbu	r2,-12(fp)
   11510:	e0fffc17 	ldw	r3,-16(fp)
   11514:	1885883a 	add	r2,r3,r2
   11518:	10800204 	addi	r2,r2,8
   1151c:	108000c3 	ldbu	r2,3(r2)
   11520:	10803fcc 	andi	r2,r2,255
   11524:	1000091e 	bne	r2,zero,1154c <OS_EventTaskRemoveMulti+0xcc>
            pevent->OSEventGrp &= ~bity;
   11528:	e0bffc17 	ldw	r2,-16(fp)
   1152c:	10800283 	ldbu	r2,10(r2)
   11530:	1007883a 	mov	r3,r2
   11534:	e0bffd43 	ldbu	r2,-11(fp)
   11538:	0084303a 	nor	r2,zero,r2
   1153c:	1884703a 	and	r2,r3,r2
   11540:	1007883a 	mov	r3,r2
   11544:	e0bffc17 	ldw	r2,-16(fp)
   11548:	10c00285 	stb	r3,10(r2)
        }
        pevents++;
   1154c:	e0bffb17 	ldw	r2,-20(fp)
   11550:	10800104 	addi	r2,r2,4
   11554:	e0bffb15 	stw	r2,-20(fp)
        pevent = *pevents;
   11558:	e0bffb17 	ldw	r2,-20(fp)
   1155c:	10800017 	ldw	r2,0(r2)
   11560:	e0bffc15 	stw	r2,-16(fp)
    y       =  ptcb->OSTCBY;
    bity    =  ptcb->OSTCBBitY;
    bitx    =  ptcb->OSTCBBitX;
    pevents =  pevents_multi;
    pevent  = *pevents;
    while (pevent != (OS_EVENT *)0) {                   /* Remove task from all events' wait lists     */
   11564:	e0bffc17 	ldw	r2,-16(fp)
   11568:	103fd91e 	bne	r2,zero,114d0 <__alt_mem_Flash_flash_data+0xf40114d0>
            pevent->OSEventGrp &= ~bity;
        }
        pevents++;
        pevent = *pevents;
    }
}
   1156c:	e037883a 	mov	sp,fp
   11570:	df000017 	ldw	fp,0(sp)
   11574:	dec00104 	addi	sp,sp,4
   11578:	f800283a 	ret

0001157c <OS_EventWaitListInit>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
void  OS_EventWaitListInit (OS_EVENT *pevent)
{
   1157c:	defffc04 	addi	sp,sp,-16
   11580:	df000315 	stw	fp,12(sp)
   11584:	df000304 	addi	fp,sp,12
   11588:	e13fff15 	stw	r4,-4(fp)
    INT16U *ptbl;
#endif
    INT8U   i;


    pevent->OSEventGrp = 0;                      /* No task waiting on event                           */
   1158c:	e0bfff17 	ldw	r2,-4(fp)
   11590:	10000285 	stb	zero,10(r2)
    ptbl               = &pevent->OSEventTbl[0];
   11594:	e0bfff17 	ldw	r2,-4(fp)
   11598:	108002c4 	addi	r2,r2,11
   1159c:	e0bffd15 	stw	r2,-12(fp)

    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
   115a0:	e03ffe05 	stb	zero,-8(fp)
   115a4:	00000706 	br	115c4 <OS_EventWaitListInit+0x48>
        *ptbl++ = 0;
   115a8:	e0bffd17 	ldw	r2,-12(fp)
   115ac:	10c00044 	addi	r3,r2,1
   115b0:	e0fffd15 	stw	r3,-12(fp)
   115b4:	10000005 	stb	zero,0(r2)


    pevent->OSEventGrp = 0;                      /* No task waiting on event                           */
    ptbl               = &pevent->OSEventTbl[0];

    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
   115b8:	e0bffe03 	ldbu	r2,-8(fp)
   115bc:	10800044 	addi	r2,r2,1
   115c0:	e0bffe05 	stb	r2,-8(fp)
   115c4:	e0bffe03 	ldbu	r2,-8(fp)
   115c8:	108000f0 	cmpltui	r2,r2,3
   115cc:	103ff61e 	bne	r2,zero,115a8 <__alt_mem_Flash_flash_data+0xf40115a8>
        *ptbl++ = 0;
    }
}
   115d0:	e037883a 	mov	sp,fp
   115d4:	df000017 	ldw	fp,0(sp)
   115d8:	dec00104 	addi	sp,sp,4
   115dc:	f800283a 	ret

000115e0 <OS_InitEventList>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitEventList (void)
{
   115e0:	defffb04 	addi	sp,sp,-20
   115e4:	dfc00415 	stw	ra,16(sp)
   115e8:	df000315 	stw	fp,12(sp)
   115ec:	df000304 	addi	fp,sp,12
    INT16U     i;
    OS_EVENT  *pevent1;
    OS_EVENT  *pevent2;


    OS_MemClr((INT8U *)&OSEventTbl[0], sizeof(OSEventTbl)); /* Clear the event table                   */
   115f0:	010000f4 	movhi	r4,3
   115f4:	213dcc04 	addi	r4,r4,-2256
   115f8:	0142d004 	movi	r5,2880
   115fc:	00119400 	call	11940 <OS_MemClr>
    pevent1 = &OSEventTbl[0];
   11600:	008000f4 	movhi	r2,3
   11604:	10bdcc04 	addi	r2,r2,-2256
   11608:	e0bffe15 	stw	r2,-8(fp)
    pevent2 = &OSEventTbl[1];
   1160c:	008000f4 	movhi	r2,3
   11610:	10bdd804 	addi	r2,r2,-2208
   11614:	e0bfff15 	stw	r2,-4(fp)
    for (i = 0; i < (OS_MAX_EVENTS - 1); i++) {             /* Init. list of free EVENT control blocks */
   11618:	e03ffd0d 	sth	zero,-12(fp)
   1161c:	00001306 	br	1166c <OS_InitEventList+0x8c>
        pevent1->OSEventType    = OS_EVENT_TYPE_UNUSED;
   11620:	e0bffe17 	ldw	r2,-8(fp)
   11624:	10000005 	stb	zero,0(r2)
        pevent1->OSEventPtr     = pevent2;
   11628:	e0bffe17 	ldw	r2,-8(fp)
   1162c:	e0ffff17 	ldw	r3,-4(fp)
   11630:	10c00115 	stw	r3,4(r2)
#if OS_EVENT_NAME_SIZE > 1
        pevent1->OSEventName[0] = '?';                      /* Unknown name                            */
   11634:	e0bffe17 	ldw	r2,-8(fp)
   11638:	00c00fc4 	movi	r3,63
   1163c:	10c00385 	stb	r3,14(r2)
        pevent1->OSEventName[1] = OS_ASCII_NUL;
   11640:	e0bffe17 	ldw	r2,-8(fp)
   11644:	100003c5 	stb	zero,15(r2)
#endif
        pevent1++;
   11648:	e0bffe17 	ldw	r2,-8(fp)
   1164c:	10800c04 	addi	r2,r2,48
   11650:	e0bffe15 	stw	r2,-8(fp)
        pevent2++;
   11654:	e0bfff17 	ldw	r2,-4(fp)
   11658:	10800c04 	addi	r2,r2,48
   1165c:	e0bfff15 	stw	r2,-4(fp)


    OS_MemClr((INT8U *)&OSEventTbl[0], sizeof(OSEventTbl)); /* Clear the event table                   */
    pevent1 = &OSEventTbl[0];
    pevent2 = &OSEventTbl[1];
    for (i = 0; i < (OS_MAX_EVENTS - 1); i++) {             /* Init. list of free EVENT control blocks */
   11660:	e0bffd0b 	ldhu	r2,-12(fp)
   11664:	10800044 	addi	r2,r2,1
   11668:	e0bffd0d 	sth	r2,-12(fp)
   1166c:	e0bffd0b 	ldhu	r2,-12(fp)
   11670:	10800ef0 	cmpltui	r2,r2,59
   11674:	103fea1e 	bne	r2,zero,11620 <__alt_mem_Flash_flash_data+0xf4011620>
        pevent1->OSEventName[1] = OS_ASCII_NUL;
#endif
        pevent1++;
        pevent2++;
    }
    pevent1->OSEventType            = OS_EVENT_TYPE_UNUSED;
   11678:	e0bffe17 	ldw	r2,-8(fp)
   1167c:	10000005 	stb	zero,0(r2)
    pevent1->OSEventPtr             = (OS_EVENT *)0;
   11680:	e0bffe17 	ldw	r2,-8(fp)
   11684:	10000115 	stw	zero,4(r2)
#if OS_EVENT_NAME_SIZE > 1
    pevent1->OSEventName[0]         = '?';
   11688:	e0bffe17 	ldw	r2,-8(fp)
   1168c:	00c00fc4 	movi	r3,63
   11690:	10c00385 	stb	r3,14(r2)
    pevent1->OSEventName[1]         = OS_ASCII_NUL;
   11694:	e0bffe17 	ldw	r2,-8(fp)
   11698:	100003c5 	stb	zero,15(r2)
#endif
    OSEventFreeList                 = &OSEventTbl[0];
   1169c:	008000f4 	movhi	r2,3
   116a0:	10bdcc04 	addi	r2,r2,-2256
   116a4:	d0a84815 	stw	r2,-24288(gp)
    OSEventFreeList->OSEventName[0] = '?';                  /* Unknown name                            */
    OSEventFreeList->OSEventName[1] = OS_ASCII_NUL;
#endif
#endif
#endif
}
   116a8:	e037883a 	mov	sp,fp
   116ac:	dfc00117 	ldw	ra,4(sp)
   116b0:	df000017 	ldw	fp,0(sp)
   116b4:	dec00204 	addi	sp,sp,8
   116b8:	f800283a 	ret

000116bc <OS_InitMisc>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitMisc (void)
{
   116bc:	deffff04 	addi	sp,sp,-4
   116c0:	df000015 	stw	fp,0(sp)
   116c4:	d839883a 	mov	fp,sp
#if OS_TIME_GET_SET_EN > 0
    OSTime        = 0L;                                    /* Clear the 32-bit system clock            */
   116c8:	d0284b15 	stw	zero,-24276(gp)
#endif

    OSIntNesting  = 0;                                     /* Clear the interrupt nesting counter      */
   116cc:	d0284905 	stb	zero,-24284(gp)
    OSLockNesting = 0;                                     /* Clear the scheduling lock counter        */
   116d0:	d0283b05 	stb	zero,-24340(gp)

    OSTaskCtr     = 0;                                     /* Clear the number of tasks                */
   116d4:	d0284345 	stb	zero,-24307(gp)

    OSRunning     = OS_FALSE;                              /* Indicate that multitasking not started   */
   116d8:	d0283b45 	stb	zero,-24339(gp)

    OSCtxSwCtr    = 0;                                     /* Clear the context switch counter         */
   116dc:	d0284015 	stw	zero,-24320(gp)
    OSIdleCtr     = 0L;                                    /* Clear the 32-bit idle counter            */
   116e0:	d0283c15 	stw	zero,-24336(gp)

#if OS_TASK_STAT_EN > 0
    OSIdleCtrRun  = 0L;
   116e4:	d0284e15 	stw	zero,-24264(gp)
    OSIdleCtrMax  = 0L;
   116e8:	d0284115 	stw	zero,-24316(gp)
    OSStatRdy     = OS_FALSE;                              /* Statistic task is not ready              */
   116ec:	d0284d05 	stb	zero,-24268(gp)
#endif
}
   116f0:	e037883a 	mov	sp,fp
   116f4:	df000017 	ldw	fp,0(sp)
   116f8:	dec00104 	addi	sp,sp,4
   116fc:	f800283a 	ret

00011700 <OS_InitRdyList>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitRdyList (void)
{
   11700:	defffd04 	addi	sp,sp,-12
   11704:	df000215 	stw	fp,8(sp)
   11708:	df000204 	addi	fp,sp,8
#else
    INT16U  *prdytbl;
#endif


    OSRdyGrp      = 0;                                     /* Clear the ready list                     */
   1170c:	d0284705 	stb	zero,-24292(gp)
    prdytbl       = &OSRdyTbl[0];
   11710:	d0a84744 	addi	r2,gp,-24291
   11714:	e0bfff15 	stw	r2,-4(fp)
    for (i = 0; i < OS_RDY_TBL_SIZE; i++) {
   11718:	e03ffe05 	stb	zero,-8(fp)
   1171c:	00000706 	br	1173c <OS_InitRdyList+0x3c>
        *prdytbl++ = 0;
   11720:	e0bfff17 	ldw	r2,-4(fp)
   11724:	10c00044 	addi	r3,r2,1
   11728:	e0ffff15 	stw	r3,-4(fp)
   1172c:	10000005 	stb	zero,0(r2)
#endif


    OSRdyGrp      = 0;                                     /* Clear the ready list                     */
    prdytbl       = &OSRdyTbl[0];
    for (i = 0; i < OS_RDY_TBL_SIZE; i++) {
   11730:	e0bffe03 	ldbu	r2,-8(fp)
   11734:	10800044 	addi	r2,r2,1
   11738:	e0bffe05 	stb	r2,-8(fp)
   1173c:	e0bffe03 	ldbu	r2,-8(fp)
   11740:	108000f0 	cmpltui	r2,r2,3
   11744:	103ff61e 	bne	r2,zero,11720 <__alt_mem_Flash_flash_data+0xf4011720>
        *prdytbl++ = 0;
    }

    OSPrioCur     = 0;
   11748:	d0283d45 	stb	zero,-24331(gp)
    OSPrioHighRdy = 0;
   1174c:	d0283d05 	stb	zero,-24332(gp)

    OSTCBHighRdy  = (OS_TCB *)0;
   11750:	d0284515 	stw	zero,-24300(gp)
    OSTCBCur      = (OS_TCB *)0;
   11754:	d0284a15 	stw	zero,-24280(gp)
}
   11758:	e037883a 	mov	sp,fp
   1175c:	df000017 	ldw	fp,0(sp)
   11760:	dec00104 	addi	sp,sp,4
   11764:	f800283a 	ret

00011768 <OS_InitTaskIdle>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitTaskIdle (void)
{
   11768:	defff804 	addi	sp,sp,-32
   1176c:	dfc00715 	stw	ra,28(sp)
   11770:	df000615 	stw	fp,24(sp)
   11774:	df000604 	addi	fp,sp,24
#endif


#if OS_TASK_CREATE_EXT_EN > 0
    #if OS_STK_GROWTH == 1
    (void)OSTaskCreateExt(OS_TaskIdle,
   11778:	00bfffd4 	movui	r2,65535
   1177c:	d8800015 	stw	r2,0(sp)
   11780:	008000f4 	movhi	r2,3
   11784:	10bbcc04 	addi	r2,r2,-4304
   11788:	d8800115 	stw	r2,4(sp)
   1178c:	00808004 	movi	r2,512
   11790:	d8800215 	stw	r2,8(sp)
   11794:	d8000315 	stw	zero,12(sp)
   11798:	008000c4 	movi	r2,3
   1179c:	d8800415 	stw	r2,16(sp)
   117a0:	01000074 	movhi	r4,1
   117a4:	2106fe04 	addi	r4,r4,7160
   117a8:	000b883a 	mov	r5,zero
   117ac:	018000f4 	movhi	r6,3
   117b0:	31bdcb04 	addi	r6,r6,-2260
   117b4:	01c00504 	movi	r7,20
   117b8:	00171940 	call	17194 <OSTaskCreateExt>
                       OS_TASK_IDLE_PRIO);
    #endif
#endif

#if OS_TASK_NAME_SIZE > 14
    OSTaskNameSet(OS_TASK_IDLE_PRIO, (INT8U *)"uC/OS-II Idle", &err);
   117bc:	01000504 	movi	r4,20
   117c0:	014000b4 	movhi	r5,2
   117c4:	29730e04 	addi	r5,r5,-13256
   117c8:	e1bfff04 	addi	r6,fp,-4
   117cc:	0017a600 	call	17a60 <OSTaskNameSet>
#else
#if OS_TASK_NAME_SIZE > 7
    OSTaskNameSet(OS_TASK_IDLE_PRIO, (INT8U *)"OS-Idle", &err);
#endif
#endif
}
   117d0:	e037883a 	mov	sp,fp
   117d4:	dfc00117 	ldw	ra,4(sp)
   117d8:	df000017 	ldw	fp,0(sp)
   117dc:	dec00204 	addi	sp,sp,8
   117e0:	f800283a 	ret

000117e4 <OS_InitTaskStat>:
*********************************************************************************************************
*/

#if OS_TASK_STAT_EN > 0
static  void  OS_InitTaskStat (void)
{
   117e4:	defff804 	addi	sp,sp,-32
   117e8:	dfc00715 	stw	ra,28(sp)
   117ec:	df000615 	stw	fp,24(sp)
   117f0:	df000604 	addi	fp,sp,24
#endif


#if OS_TASK_CREATE_EXT_EN > 0
    #if OS_STK_GROWTH == 1
    (void)OSTaskCreateExt(OS_TaskStat,
   117f4:	00bfff94 	movui	r2,65534
   117f8:	d8800015 	stw	r2,0(sp)
   117fc:	008000f4 	movhi	r2,3
   11800:	10b95404 	addi	r2,r2,-6832
   11804:	d8800115 	stw	r2,4(sp)
   11808:	00808004 	movi	r2,512
   1180c:	d8800215 	stw	r2,8(sp)
   11810:	d8000315 	stw	zero,12(sp)
   11814:	008000c4 	movi	r2,3
   11818:	d8800415 	stw	r2,16(sp)
   1181c:	01000074 	movhi	r4,1
   11820:	21071504 	addi	r4,r4,7252
   11824:	000b883a 	mov	r5,zero
   11828:	018000f4 	movhi	r6,3
   1182c:	31bb5304 	addi	r6,r6,-4788
   11830:	01c004c4 	movi	r7,19
   11834:	00171940 	call	17194 <OSTaskCreateExt>
                       OS_TASK_STAT_PRIO);                             /* One higher than the idle task  */
    #endif
#endif

#if OS_TASK_NAME_SIZE > 14
    OSTaskNameSet(OS_TASK_STAT_PRIO, (INT8U *)"uC/OS-II Stat", &err);
   11838:	010004c4 	movi	r4,19
   1183c:	014000b4 	movhi	r5,2
   11840:	29731204 	addi	r5,r5,-13240
   11844:	e1bfff04 	addi	r6,fp,-4
   11848:	0017a600 	call	17a60 <OSTaskNameSet>
#else
#if OS_TASK_NAME_SIZE > 7
    OSTaskNameSet(OS_TASK_STAT_PRIO, (INT8U *)"OS-Stat", &err);
#endif
#endif
}
   1184c:	e037883a 	mov	sp,fp
   11850:	dfc00117 	ldw	ra,4(sp)
   11854:	df000017 	ldw	fp,0(sp)
   11858:	dec00204 	addi	sp,sp,8
   1185c:	f800283a 	ret

00011860 <OS_InitTCBList>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitTCBList (void)
{
   11860:	defffb04 	addi	sp,sp,-20
   11864:	dfc00415 	stw	ra,16(sp)
   11868:	df000315 	stw	fp,12(sp)
   1186c:	df000304 	addi	fp,sp,12
    INT8U    i;
    OS_TCB  *ptcb1;
    OS_TCB  *ptcb2;


    OS_MemClr((INT8U *)&OSTCBTbl[0],     sizeof(OSTCBTbl));      /* Clear all the TCBs                 */
   11870:	010000f4 	movhi	r4,3
   11874:	21009c04 	addi	r4,r4,624
   11878:	01414404 	movi	r5,1296
   1187c:	00119400 	call	11940 <OS_MemClr>
    OS_MemClr((INT8U *)&OSTCBPrioTbl[0], sizeof(OSTCBPrioTbl));  /* Clear the priority table           */
   11880:	010000f4 	movhi	r4,3
   11884:	2101e004 	addi	r4,r4,1920
   11888:	01401504 	movi	r5,84
   1188c:	00119400 	call	11940 <OS_MemClr>
    ptcb1 = &OSTCBTbl[0];
   11890:	008000f4 	movhi	r2,3
   11894:	10809c04 	addi	r2,r2,624
   11898:	e0bffe15 	stw	r2,-8(fp)
    ptcb2 = &OSTCBTbl[1];
   1189c:	008000f4 	movhi	r2,3
   118a0:	1080b704 	addi	r2,r2,732
   118a4:	e0bfff15 	stw	r2,-4(fp)
    for (i = 0; i < (OS_MAX_TASKS + OS_N_SYS_TASKS - 1); i++) {  /* Init. list of free TCBs            */
   118a8:	e03ffd05 	stb	zero,-12(fp)
   118ac:	00001106 	br	118f4 <OS_InitTCBList+0x94>
        ptcb1->OSTCBNext = ptcb2;
   118b0:	e0bffe17 	ldw	r2,-8(fp)
   118b4:	e0ffff17 	ldw	r3,-4(fp)
   118b8:	10c00515 	stw	r3,20(r2)
#if OS_TASK_NAME_SIZE > 1
        ptcb1->OSTCBTaskName[0] = '?';                           /* Unknown name                       */
   118bc:	e0bffe17 	ldw	r2,-8(fp)
   118c0:	00c00fc4 	movi	r3,63
   118c4:	10c01305 	stb	r3,76(r2)
        ptcb1->OSTCBTaskName[1] = OS_ASCII_NUL;
   118c8:	e0bffe17 	ldw	r2,-8(fp)
   118cc:	10001345 	stb	zero,77(r2)
#endif
        ptcb1++;
   118d0:	e0bffe17 	ldw	r2,-8(fp)
   118d4:	10801b04 	addi	r2,r2,108
   118d8:	e0bffe15 	stw	r2,-8(fp)
        ptcb2++;
   118dc:	e0bfff17 	ldw	r2,-4(fp)
   118e0:	10801b04 	addi	r2,r2,108
   118e4:	e0bfff15 	stw	r2,-4(fp)

    OS_MemClr((INT8U *)&OSTCBTbl[0],     sizeof(OSTCBTbl));      /* Clear all the TCBs                 */
    OS_MemClr((INT8U *)&OSTCBPrioTbl[0], sizeof(OSTCBPrioTbl));  /* Clear the priority table           */
    ptcb1 = &OSTCBTbl[0];
    ptcb2 = &OSTCBTbl[1];
    for (i = 0; i < (OS_MAX_TASKS + OS_N_SYS_TASKS - 1); i++) {  /* Init. list of free TCBs            */
   118e8:	e0bffd03 	ldbu	r2,-12(fp)
   118ec:	10800044 	addi	r2,r2,1
   118f0:	e0bffd05 	stb	r2,-12(fp)
   118f4:	e0bffd03 	ldbu	r2,-12(fp)
   118f8:	108002f0 	cmpltui	r2,r2,11
   118fc:	103fec1e 	bne	r2,zero,118b0 <__alt_mem_Flash_flash_data+0xf40118b0>
        ptcb1->OSTCBTaskName[1] = OS_ASCII_NUL;
#endif
        ptcb1++;
        ptcb2++;
    }
    ptcb1->OSTCBNext = (OS_TCB *)0;                              /* Last OS_TCB                        */
   11900:	e0bffe17 	ldw	r2,-8(fp)
   11904:	10000515 	stw	zero,20(r2)
#if OS_TASK_NAME_SIZE > 1
    ptcb1->OSTCBTaskName[0] = '?';                               /* Unknown name                       */
   11908:	e0bffe17 	ldw	r2,-8(fp)
   1190c:	00c00fc4 	movi	r3,63
   11910:	10c01305 	stb	r3,76(r2)
    ptcb1->OSTCBTaskName[1] = OS_ASCII_NUL;
   11914:	e0bffe17 	ldw	r2,-8(fp)
   11918:	10001345 	stb	zero,77(r2)
#endif
    OSTCBList               = (OS_TCB *)0;                       /* TCB lists initializations          */
   1191c:	d0283e15 	stw	zero,-24328(gp)
    OSTCBFreeList           = &OSTCBTbl[0];
   11920:	008000f4 	movhi	r2,3
   11924:	10809c04 	addi	r2,r2,624
   11928:	d0a84215 	stw	r2,-24312(gp)
}
   1192c:	e037883a 	mov	sp,fp
   11930:	dfc00117 	ldw	ra,4(sp)
   11934:	df000017 	ldw	fp,0(sp)
   11938:	dec00204 	addi	sp,sp,8
   1193c:	f800283a 	ret

00011940 <OS_MemClr>:
*                 of the alignment of the destination.
*********************************************************************************************************
*/

void  OS_MemClr (INT8U *pdest, INT16U size)
{
   11940:	defffd04 	addi	sp,sp,-12
   11944:	df000215 	stw	fp,8(sp)
   11948:	df000204 	addi	fp,sp,8
   1194c:	e13ffe15 	stw	r4,-8(fp)
   11950:	2805883a 	mov	r2,r5
   11954:	e0bfff0d 	sth	r2,-4(fp)
    while (size > 0) {
   11958:	00000706 	br	11978 <OS_MemClr+0x38>
        *pdest++ = (INT8U)0;
   1195c:	e0bffe17 	ldw	r2,-8(fp)
   11960:	10c00044 	addi	r3,r2,1
   11964:	e0fffe15 	stw	r3,-8(fp)
   11968:	10000005 	stb	zero,0(r2)
        size--;
   1196c:	e0bfff0b 	ldhu	r2,-4(fp)
   11970:	10bfffc4 	addi	r2,r2,-1
   11974:	e0bfff0d 	sth	r2,-4(fp)
*********************************************************************************************************
*/

void  OS_MemClr (INT8U *pdest, INT16U size)
{
    while (size > 0) {
   11978:	e0bfff0b 	ldhu	r2,-4(fp)
   1197c:	103ff71e 	bne	r2,zero,1195c <__alt_mem_Flash_flash_data+0xf401195c>
        *pdest++ = (INT8U)0;
        size--;
    }
}
   11980:	e037883a 	mov	sp,fp
   11984:	df000017 	ldw	fp,0(sp)
   11988:	dec00104 	addi	sp,sp,4
   1198c:	f800283a 	ret

00011990 <OS_MemCopy>:
*                 of the alignment of the source and destination.
*********************************************************************************************************
*/

void  OS_MemCopy (INT8U *pdest, INT8U *psrc, INT16U size)
{
   11990:	defffc04 	addi	sp,sp,-16
   11994:	df000315 	stw	fp,12(sp)
   11998:	df000304 	addi	fp,sp,12
   1199c:	e13ffd15 	stw	r4,-12(fp)
   119a0:	e17ffe15 	stw	r5,-8(fp)
   119a4:	3005883a 	mov	r2,r6
   119a8:	e0bfff0d 	sth	r2,-4(fp)
    while (size > 0) {
   119ac:	00000b06 	br	119dc <OS_MemCopy+0x4c>
        *pdest++ = *psrc++;
   119b0:	e0bffd17 	ldw	r2,-12(fp)
   119b4:	10c00044 	addi	r3,r2,1
   119b8:	e0fffd15 	stw	r3,-12(fp)
   119bc:	e0fffe17 	ldw	r3,-8(fp)
   119c0:	19000044 	addi	r4,r3,1
   119c4:	e13ffe15 	stw	r4,-8(fp)
   119c8:	18c00003 	ldbu	r3,0(r3)
   119cc:	10c00005 	stb	r3,0(r2)
        size--;
   119d0:	e0bfff0b 	ldhu	r2,-4(fp)
   119d4:	10bfffc4 	addi	r2,r2,-1
   119d8:	e0bfff0d 	sth	r2,-4(fp)
*********************************************************************************************************
*/

void  OS_MemCopy (INT8U *pdest, INT8U *psrc, INT16U size)
{
    while (size > 0) {
   119dc:	e0bfff0b 	ldhu	r2,-4(fp)
   119e0:	103ff31e 	bne	r2,zero,119b0 <__alt_mem_Flash_flash_data+0xf40119b0>
        *pdest++ = *psrc++;
        size--;
    }
}
   119e4:	e037883a 	mov	sp,fp
   119e8:	df000017 	ldw	fp,0(sp)
   119ec:	dec00104 	addi	sp,sp,4
   119f0:	f800283a 	ret

000119f4 <OS_Sched>:
*              2) Rescheduling is prevented when the scheduler is locked (see OS_SchedLock())
*********************************************************************************************************
*/

void  OS_Sched (void)
{
   119f4:	defffb04 	addi	sp,sp,-20
   119f8:	dfc00415 	stw	ra,16(sp)
   119fc:	df000315 	stw	fp,12(sp)
   11a00:	df000304 	addi	fp,sp,12
#if OS_CRITICAL_METHOD == 3                            /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
   11a04:	e03ffd15 	stw	zero,-12(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   11a08:	0005303a 	rdctl	r2,status
   11a0c:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   11a10:	e0fffe17 	ldw	r3,-8(fp)
   11a14:	00bfff84 	movi	r2,-2
   11a18:	1884703a 	and	r2,r3,r2
   11a1c:	1001703a 	wrctl	status,r2
  
  return context;
   11a20:	e0bffe17 	ldw	r2,-8(fp)
#endif



    OS_ENTER_CRITICAL();
   11a24:	e0bffd15 	stw	r2,-12(fp)
    if (OSIntNesting == 0) {                           /* Schedule only if all ISRs done and ...       */
   11a28:	d0a84903 	ldbu	r2,-24284(gp)
   11a2c:	10803fcc 	andi	r2,r2,255
   11a30:	10001a1e 	bne	r2,zero,11a9c <OS_Sched+0xa8>
        if (OSLockNesting == 0) {                      /* ... scheduler is not locked                  */
   11a34:	d0a83b03 	ldbu	r2,-24340(gp)
   11a38:	10803fcc 	andi	r2,r2,255
   11a3c:	1000171e 	bne	r2,zero,11a9c <OS_Sched+0xa8>
            OS_SchedNew();
   11a40:	0011ac00 	call	11ac0 <OS_SchedNew>
            if (OSPrioHighRdy != OSPrioCur) {          /* No Ctx Sw if current task is highest rdy     */
   11a44:	d0e83d03 	ldbu	r3,-24332(gp)
   11a48:	d0a83d43 	ldbu	r2,-24331(gp)
   11a4c:	18c03fcc 	andi	r3,r3,255
   11a50:	10803fcc 	andi	r2,r2,255
   11a54:	18801126 	beq	r3,r2,11a9c <OS_Sched+0xa8>
                OSTCBHighRdy = OSTCBPrioTbl[OSPrioHighRdy];
   11a58:	d0a83d03 	ldbu	r2,-24332(gp)
   11a5c:	10c03fcc 	andi	r3,r2,255
   11a60:	008000f4 	movhi	r2,3
   11a64:	1081e004 	addi	r2,r2,1920
   11a68:	18c7883a 	add	r3,r3,r3
   11a6c:	18c7883a 	add	r3,r3,r3
   11a70:	10c5883a 	add	r2,r2,r3
   11a74:	10800017 	ldw	r2,0(r2)
   11a78:	d0a84515 	stw	r2,-24300(gp)
#if OS_TASK_PROFILE_EN > 0
                OSTCBHighRdy->OSTCBCtxSwCtr++;         /* Inc. # of context switches to this task      */
   11a7c:	d0a84517 	ldw	r2,-24300(gp)
   11a80:	10c00e17 	ldw	r3,56(r2)
   11a84:	18c00044 	addi	r3,r3,1
   11a88:	10c00e15 	stw	r3,56(r2)
#endif
                OSCtxSwCtr++;                          /* Increment context switch counter             */
   11a8c:	d0a84017 	ldw	r2,-24320(gp)
   11a90:	10800044 	addi	r2,r2,1
   11a94:	d0a84015 	stw	r2,-24320(gp)
                OS_TASK_SW();                          /* Perform a context switch                     */
   11a98:	001bbfc0 	call	1bbfc <OSCtxSw>
   11a9c:	e0bffd17 	ldw	r2,-12(fp)
   11aa0:	e0bfff15 	stw	r2,-4(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   11aa4:	e0bfff17 	ldw	r2,-4(fp)
   11aa8:	1001703a 	wrctl	status,r2
            }
        }
    }
    OS_EXIT_CRITICAL();
}
   11aac:	e037883a 	mov	sp,fp
   11ab0:	dfc00117 	ldw	ra,4(sp)
   11ab4:	df000017 	ldw	fp,0(sp)
   11ab8:	dec00204 	addi	sp,sp,8
   11abc:	f800283a 	ret

00011ac0 <OS_SchedNew>:
*              2) Interrupts are assumed to be disabled when this function is called.
*********************************************************************************************************
*/

static  void  OS_SchedNew (void)
{
   11ac0:	defffe04 	addi	sp,sp,-8
   11ac4:	df000115 	stw	fp,4(sp)
   11ac8:	df000104 	addi	fp,sp,4
#if OS_LOWEST_PRIO <= 63                         /* See if we support up to 64 tasks                   */
    INT8U   y;


    y             = OSUnMapTbl[OSRdyGrp];
   11acc:	d0a84703 	ldbu	r2,-24292(gp)
   11ad0:	10c03fcc 	andi	r3,r2,255
   11ad4:	008000b4 	movhi	r2,2
   11ad8:	10b2ce04 	addi	r2,r2,-13512
   11adc:	10c5883a 	add	r2,r2,r3
   11ae0:	10800003 	ldbu	r2,0(r2)
   11ae4:	e0bfff05 	stb	r2,-4(fp)
    OSPrioHighRdy = (INT8U)((y << 3) + OSUnMapTbl[OSRdyTbl[y]]);
   11ae8:	e0bfff03 	ldbu	r2,-4(fp)
   11aec:	100490fa 	slli	r2,r2,3
   11af0:	1009883a 	mov	r4,r2
   11af4:	e0ffff03 	ldbu	r3,-4(fp)
   11af8:	d0a84744 	addi	r2,gp,-24291
   11afc:	1885883a 	add	r2,r3,r2
   11b00:	10800003 	ldbu	r2,0(r2)
   11b04:	10c03fcc 	andi	r3,r2,255
   11b08:	008000b4 	movhi	r2,2
   11b0c:	10b2ce04 	addi	r2,r2,-13512
   11b10:	10c5883a 	add	r2,r2,r3
   11b14:	10800003 	ldbu	r2,0(r2)
   11b18:	2085883a 	add	r2,r4,r2
   11b1c:	d0a83d05 	stb	r2,-24332(gp)
        OSPrioHighRdy = (INT8U)((y << 4) + OSUnMapTbl[(*ptbl & 0xFF)]);
    } else {
        OSPrioHighRdy = (INT8U)((y << 4) + OSUnMapTbl[(*ptbl >> 8) & 0xFF] + 8);
    }
#endif
}
   11b20:	e037883a 	mov	sp,fp
   11b24:	df000017 	ldw	fp,0(sp)
   11b28:	dec00104 	addi	sp,sp,4
   11b2c:	f800283a 	ret

00011b30 <OS_StrCopy>:
*********************************************************************************************************
*/

#if (OS_EVENT_NAME_SIZE > 1) || (OS_FLAG_NAME_SIZE > 1) || (OS_MEM_NAME_SIZE > 1) || (OS_TASK_NAME_SIZE > 1) || (OS_TMR_CFG_NAME_SIZE > 1)
INT8U  OS_StrCopy (INT8U *pdest, INT8U *psrc)
{
   11b30:	defffc04 	addi	sp,sp,-16
   11b34:	df000315 	stw	fp,12(sp)
   11b38:	df000304 	addi	fp,sp,12
   11b3c:	e13ffe15 	stw	r4,-8(fp)
   11b40:	e17fff15 	stw	r5,-4(fp)
    INT8U  len;


    len = 0;
   11b44:	e03ffd05 	stb	zero,-12(fp)
    while (*psrc != OS_ASCII_NUL) {
   11b48:	00000b06 	br	11b78 <OS_StrCopy+0x48>
        *pdest++ = *psrc++;
   11b4c:	e0bffe17 	ldw	r2,-8(fp)
   11b50:	10c00044 	addi	r3,r2,1
   11b54:	e0fffe15 	stw	r3,-8(fp)
   11b58:	e0ffff17 	ldw	r3,-4(fp)
   11b5c:	19000044 	addi	r4,r3,1
   11b60:	e13fff15 	stw	r4,-4(fp)
   11b64:	18c00003 	ldbu	r3,0(r3)
   11b68:	10c00005 	stb	r3,0(r2)
        len++;
   11b6c:	e0bffd03 	ldbu	r2,-12(fp)
   11b70:	10800044 	addi	r2,r2,1
   11b74:	e0bffd05 	stb	r2,-12(fp)
{
    INT8U  len;


    len = 0;
    while (*psrc != OS_ASCII_NUL) {
   11b78:	e0bfff17 	ldw	r2,-4(fp)
   11b7c:	10800003 	ldbu	r2,0(r2)
   11b80:	10803fcc 	andi	r2,r2,255
   11b84:	103ff11e 	bne	r2,zero,11b4c <__alt_mem_Flash_flash_data+0xf4011b4c>
        *pdest++ = *psrc++;
        len++;
    }
    *pdest = OS_ASCII_NUL;
   11b88:	e0bffe17 	ldw	r2,-8(fp)
   11b8c:	10000005 	stb	zero,0(r2)
    return (len);
   11b90:	e0bffd03 	ldbu	r2,-12(fp)
}
   11b94:	e037883a 	mov	sp,fp
   11b98:	df000017 	ldw	fp,0(sp)
   11b9c:	dec00104 	addi	sp,sp,4
   11ba0:	f800283a 	ret

00011ba4 <OS_StrLen>:
*********************************************************************************************************
*/

#if (OS_EVENT_NAME_SIZE > 1) || (OS_FLAG_NAME_SIZE > 1) || (OS_MEM_NAME_SIZE > 1) || (OS_TASK_NAME_SIZE > 1) || (OS_TMR_CFG_NAME_SIZE > 1)
INT8U  OS_StrLen (INT8U *psrc)
{
   11ba4:	defffd04 	addi	sp,sp,-12
   11ba8:	df000215 	stw	fp,8(sp)
   11bac:	df000204 	addi	fp,sp,8
   11bb0:	e13fff15 	stw	r4,-4(fp)
    INT8U  len;


    len = 0;
   11bb4:	e03ffe05 	stb	zero,-8(fp)
    while (*psrc != OS_ASCII_NUL) {
   11bb8:	00000606 	br	11bd4 <OS_StrLen+0x30>
        psrc++;
   11bbc:	e0bfff17 	ldw	r2,-4(fp)
   11bc0:	10800044 	addi	r2,r2,1
   11bc4:	e0bfff15 	stw	r2,-4(fp)
        len++;
   11bc8:	e0bffe03 	ldbu	r2,-8(fp)
   11bcc:	10800044 	addi	r2,r2,1
   11bd0:	e0bffe05 	stb	r2,-8(fp)
{
    INT8U  len;


    len = 0;
    while (*psrc != OS_ASCII_NUL) {
   11bd4:	e0bfff17 	ldw	r2,-4(fp)
   11bd8:	10800003 	ldbu	r2,0(r2)
   11bdc:	10803fcc 	andi	r2,r2,255
   11be0:	103ff61e 	bne	r2,zero,11bbc <__alt_mem_Flash_flash_data+0xf4011bbc>
        psrc++;
        len++;
    }
    return (len);
   11be4:	e0bffe03 	ldbu	r2,-8(fp)
}
   11be8:	e037883a 	mov	sp,fp
   11bec:	df000017 	ldw	fp,0(sp)
   11bf0:	dec00104 	addi	sp,sp,4
   11bf4:	f800283a 	ret

00011bf8 <OS_TaskIdle>:
*                 power.
*********************************************************************************************************
*/

void  OS_TaskIdle (void *p_arg)
{
   11bf8:	defffa04 	addi	sp,sp,-24
   11bfc:	dfc00515 	stw	ra,20(sp)
   11c00:	df000415 	stw	fp,16(sp)
   11c04:	df000404 	addi	fp,sp,16
   11c08:	e13fff15 	stw	r4,-4(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   11c0c:	e03ffc15 	stw	zero,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   11c10:	0005303a 	rdctl	r2,status
   11c14:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   11c18:	e0fffd17 	ldw	r3,-12(fp)
   11c1c:	00bfff84 	movi	r2,-2
   11c20:	1884703a 	and	r2,r3,r2
   11c24:	1001703a 	wrctl	status,r2
  
  return context;
   11c28:	e0bffd17 	ldw	r2,-12(fp)



    (void)p_arg;                                 /* Prevent compiler warning for not using 'p_arg'     */
    for (;;) {
        OS_ENTER_CRITICAL();
   11c2c:	e0bffc15 	stw	r2,-16(fp)
        OSIdleCtr++;
   11c30:	d0a83c17 	ldw	r2,-24336(gp)
   11c34:	10800044 	addi	r2,r2,1
   11c38:	d0a83c15 	stw	r2,-24336(gp)
   11c3c:	e0bffc17 	ldw	r2,-16(fp)
   11c40:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   11c44:	e0bffe17 	ldw	r2,-8(fp)
   11c48:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OSTaskIdleHook();                        /* Call user definable HOOK                           */
   11c4c:	001bef40 	call	1bef4 <OSTaskIdleHook>
    }
   11c50:	003fef06 	br	11c10 <__alt_mem_Flash_flash_data+0xf4011c10>

00011c54 <OS_TaskStat>:
*********************************************************************************************************
*/

#if OS_TASK_STAT_EN > 0
void  OS_TaskStat (void *p_arg)
{
   11c54:	defff804 	addi	sp,sp,-32
   11c58:	dfc00715 	stw	ra,28(sp)
   11c5c:	df000615 	stw	fp,24(sp)
   11c60:	dc400515 	stw	r17,20(sp)
   11c64:	dc000415 	stw	r16,16(sp)
   11c68:	df000604 	addi	fp,sp,24
   11c6c:	e13ffd15 	stw	r4,-12(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   11c70:	e03ffa15 	stw	zero,-24(fp)
#endif



    (void)p_arg;                                 /* Prevent compiler warning for not using 'p_arg'     */
    while (OSStatRdy == OS_FALSE) {
   11c74:	00000206 	br	11c80 <OS_TaskStat+0x2c>
        OSTimeDly(2 * OS_TICKS_PER_SEC / 10);    /* Wait until statistic task is ready                 */
   11c78:	01000044 	movi	r4,1
   11c7c:	001838c0 	call	1838c <OSTimeDly>
#endif



    (void)p_arg;                                 /* Prevent compiler warning for not using 'p_arg'     */
    while (OSStatRdy == OS_FALSE) {
   11c80:	d0a84d03 	ldbu	r2,-24268(gp)
   11c84:	10803fcc 	andi	r2,r2,255
   11c88:	103ffb26 	beq	r2,zero,11c78 <__alt_mem_Flash_flash_data+0xf4011c78>
        OSTimeDly(2 * OS_TICKS_PER_SEC / 10);    /* Wait until statistic task is ready                 */
    }
    OSIdleCtrMax /= 100L;
   11c8c:	d0e84117 	ldw	r3,-24316(gp)
   11c90:	00947b34 	movhi	r2,20972
   11c94:	10a147c4 	addi	r2,r2,-31457
   11c98:	1888383a 	mulxuu	r4,r3,r2
   11c9c:	1885383a 	mul	r2,r3,r2
   11ca0:	1021883a 	mov	r16,r2
   11ca4:	2023883a 	mov	r17,r4
   11ca8:	8804d17a 	srli	r2,r17,5
   11cac:	d0a84115 	stw	r2,-24316(gp)
    if (OSIdleCtrMax == 0L) {
   11cb0:	d0a84117 	ldw	r2,-24316(gp)
   11cb4:	1000031e 	bne	r2,zero,11cc4 <OS_TaskStat+0x70>
        OSCPUUsage = 0;
   11cb8:	d0284305 	stb	zero,-24308(gp)
        (void)OSTaskSuspend(OS_PRIO_SELF);
   11cbc:	01003fc4 	movi	r4,255
   11cc0:	0017fe00 	call	17fe0 <OSTaskSuspend>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   11cc4:	0005303a 	rdctl	r2,status
   11cc8:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   11ccc:	e0fffb17 	ldw	r3,-20(fp)
   11cd0:	00bfff84 	movi	r2,-2
   11cd4:	1884703a 	and	r2,r3,r2
   11cd8:	1001703a 	wrctl	status,r2
  
  return context;
   11cdc:	e0bffb17 	ldw	r2,-20(fp)
    }
    for (;;) {
        OS_ENTER_CRITICAL();
   11ce0:	e0bffa15 	stw	r2,-24(fp)
        OSIdleCtrRun = OSIdleCtr;                /* Obtain the of the idle counter for the past second */
   11ce4:	d0a83c17 	ldw	r2,-24336(gp)
   11ce8:	d0a84e15 	stw	r2,-24264(gp)
        OSIdleCtr    = 0L;                       /* Reset the idle counter for the next second         */
   11cec:	d0283c15 	stw	zero,-24336(gp)
   11cf0:	e0bffa17 	ldw	r2,-24(fp)
   11cf4:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   11cf8:	e0bffc17 	ldw	r2,-16(fp)
   11cfc:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OSCPUUsage   = (INT8U)(100L - OSIdleCtrRun / OSIdleCtrMax);
   11d00:	d0e84e17 	ldw	r3,-24264(gp)
   11d04:	d0a84117 	ldw	r2,-24316(gp)
   11d08:	1885203a 	divu	r2,r3,r2
   11d0c:	1007883a 	mov	r3,r2
   11d10:	00801904 	movi	r2,100
   11d14:	10c5c83a 	sub	r2,r2,r3
   11d18:	d0a84305 	stb	r2,-24308(gp)
        OSTaskStatHook();                        /* Invoke user definable hook                         */
   11d1c:	001be840 	call	1be84 <OSTaskStatHook>
#if (OS_TASK_STAT_STK_CHK_EN > 0) && (OS_TASK_CREATE_EXT_EN > 0)
        OS_TaskStatStkChk();                     /* Check the stacks for each task                     */
   11d20:	0011d300 	call	11d30 <OS_TaskStatStkChk>
#endif
        OSTimeDly(OS_TICKS_PER_SEC / 10);        /* Accumulate OSIdleCtr for the next 1/10 second      */
   11d24:	0009883a 	mov	r4,zero
   11d28:	001838c0 	call	1838c <OSTimeDly>
    }
   11d2c:	003fe506 	br	11cc4 <__alt_mem_Flash_flash_data+0xf4011cc4>

00011d30 <OS_TaskStatStkChk>:
*********************************************************************************************************
*/

#if (OS_TASK_STAT_STK_CHK_EN > 0) && (OS_TASK_CREATE_EXT_EN > 0)
void  OS_TaskStatStkChk (void)
{
   11d30:	defffa04 	addi	sp,sp,-24
   11d34:	dfc00515 	stw	ra,20(sp)
   11d38:	df000415 	stw	fp,16(sp)
   11d3c:	df000404 	addi	fp,sp,16
    OS_STK_DATA  stk_data;
    INT8U        err;
    INT8U        prio;


    for (prio = 0; prio <= OS_TASK_IDLE_PRIO; prio++) {
   11d40:	e03ffc05 	stb	zero,-16(fp)
   11d44:	00002406 	br	11dd8 <OS_TaskStatStkChk+0xa8>
        err = OSTaskStkChk(prio, &stk_data);
   11d48:	e0fffc03 	ldbu	r3,-16(fp)
   11d4c:	e0bffe04 	addi	r2,fp,-8
   11d50:	1809883a 	mov	r4,r3
   11d54:	100b883a 	mov	r5,r2
   11d58:	0017e180 	call	17e18 <OSTaskStkChk>
   11d5c:	e0bffc45 	stb	r2,-15(fp)
        if (err == OS_ERR_NONE) {
   11d60:	e0bffc43 	ldbu	r2,-15(fp)
   11d64:	1000191e 	bne	r2,zero,11dcc <OS_TaskStatStkChk+0x9c>
            ptcb = OSTCBPrioTbl[prio];
   11d68:	e0fffc03 	ldbu	r3,-16(fp)
   11d6c:	008000f4 	movhi	r2,3
   11d70:	1081e004 	addi	r2,r2,1920
   11d74:	18c7883a 	add	r3,r3,r3
   11d78:	18c7883a 	add	r3,r3,r3
   11d7c:	10c5883a 	add	r2,r2,r3
   11d80:	10800017 	ldw	r2,0(r2)
   11d84:	e0bffd15 	stw	r2,-12(fp)
            if (ptcb != (OS_TCB *)0) {                               /* Make sure task 'ptcb' is ...   */
   11d88:	e0bffd17 	ldw	r2,-12(fp)
   11d8c:	10000f26 	beq	r2,zero,11dcc <OS_TaskStatStkChk+0x9c>
                if (ptcb != OS_TCB_RESERVED) {                       /* ... still valid.               */
   11d90:	e0bffd17 	ldw	r2,-12(fp)
   11d94:	10800060 	cmpeqi	r2,r2,1
   11d98:	10000c1e 	bne	r2,zero,11dcc <OS_TaskStatStkChk+0x9c>
#if OS_TASK_PROFILE_EN > 0
                    #if OS_STK_GROWTH == 1
                    ptcb->OSTCBStkBase = ptcb->OSTCBStkBottom + ptcb->OSTCBStkSize;
   11d9c:	e0bffd17 	ldw	r2,-12(fp)
   11da0:	10c00217 	ldw	r3,8(r2)
   11da4:	e0bffd17 	ldw	r2,-12(fp)
   11da8:	10800317 	ldw	r2,12(r2)
   11dac:	1085883a 	add	r2,r2,r2
   11db0:	1085883a 	add	r2,r2,r2
   11db4:	1887883a 	add	r3,r3,r2
   11db8:	e0bffd17 	ldw	r2,-12(fp)
   11dbc:	10c01115 	stw	r3,68(r2)
                    #else
                    ptcb->OSTCBStkBase = ptcb->OSTCBStkBottom - ptcb->OSTCBStkSize;
                    #endif
                    ptcb->OSTCBStkUsed = stk_data.OSUsed;            /* Store the number of bytes used */
   11dc0:	e0ffff17 	ldw	r3,-4(fp)
   11dc4:	e0bffd17 	ldw	r2,-12(fp)
   11dc8:	10c01215 	stw	r3,72(r2)
    OS_STK_DATA  stk_data;
    INT8U        err;
    INT8U        prio;


    for (prio = 0; prio <= OS_TASK_IDLE_PRIO; prio++) {
   11dcc:	e0bffc03 	ldbu	r2,-16(fp)
   11dd0:	10800044 	addi	r2,r2,1
   11dd4:	e0bffc05 	stb	r2,-16(fp)
   11dd8:	e0bffc03 	ldbu	r2,-16(fp)
   11ddc:	10800570 	cmpltui	r2,r2,21
   11de0:	103fd91e 	bne	r2,zero,11d48 <__alt_mem_Flash_flash_data+0xf4011d48>
#endif
                }
            }
        }
    }
}
   11de4:	e037883a 	mov	sp,fp
   11de8:	dfc00117 	ldw	ra,4(sp)
   11dec:	df000017 	ldw	fp,0(sp)
   11df0:	dec00204 	addi	sp,sp,8
   11df4:	f800283a 	ret

00011df8 <OS_TCBInit>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

INT8U  OS_TCBInit (INT8U prio, OS_STK *ptos, OS_STK *pbos, INT16U id, INT32U stk_size, void *pext, INT16U opt)
{
   11df8:	defff204 	addi	sp,sp,-56
   11dfc:	dfc00d15 	stw	ra,52(sp)
   11e00:	df000c15 	stw	fp,48(sp)
   11e04:	df000c04 	addi	fp,sp,48
   11e08:	e17ffc15 	stw	r5,-16(fp)
   11e0c:	e1bffd15 	stw	r6,-12(fp)
   11e10:	3807883a 	mov	r3,r7
   11e14:	e0800417 	ldw	r2,16(fp)
   11e18:	e13ffb05 	stb	r4,-20(fp)
   11e1c:	e0fffe0d 	sth	r3,-8(fp)
   11e20:	e0bfff0d 	sth	r2,-4(fp)
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
   11e24:	e03ff415 	stw	zero,-48(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   11e28:	0005303a 	rdctl	r2,status
   11e2c:	e0bff615 	stw	r2,-40(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   11e30:	e0fff617 	ldw	r3,-40(fp)
   11e34:	00bfff84 	movi	r2,-2
   11e38:	1884703a 	and	r2,r3,r2
   11e3c:	1001703a 	wrctl	status,r2
  
  return context;
   11e40:	e0bff617 	ldw	r2,-40(fp)
#endif



    OS_ENTER_CRITICAL();
   11e44:	e0bff415 	stw	r2,-48(fp)
    ptcb = OSTCBFreeList;                                  /* Get a free TCB from the free TCB list    */
   11e48:	d0a84217 	ldw	r2,-24312(gp)
   11e4c:	e0bff515 	stw	r2,-44(fp)
    if (ptcb != (OS_TCB *)0) {
   11e50:	e0bff517 	ldw	r2,-44(fp)
   11e54:	10009326 	beq	r2,zero,120a4 <OS_TCBInit+0x2ac>
        OSTCBFreeList            = ptcb->OSTCBNext;        /* Update pointer to free TCB list          */
   11e58:	e0bff517 	ldw	r2,-44(fp)
   11e5c:	10800517 	ldw	r2,20(r2)
   11e60:	d0a84215 	stw	r2,-24312(gp)
   11e64:	e0bff417 	ldw	r2,-48(fp)
   11e68:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   11e6c:	e0bff717 	ldw	r2,-36(fp)
   11e70:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        ptcb->OSTCBStkPtr        = ptos;                   /* Load Stack pointer in TCB                */
   11e74:	e0bff517 	ldw	r2,-44(fp)
   11e78:	e0fffc17 	ldw	r3,-16(fp)
   11e7c:	10c00015 	stw	r3,0(r2)
        ptcb->OSTCBPrio          = prio;                   /* Load task priority into TCB              */
   11e80:	e0bff517 	ldw	r2,-44(fp)
   11e84:	e0fffb03 	ldbu	r3,-20(fp)
   11e88:	10c00c85 	stb	r3,50(r2)
        ptcb->OSTCBStat          = OS_STAT_RDY;            /* Task is ready to run                     */
   11e8c:	e0bff517 	ldw	r2,-44(fp)
   11e90:	10000c05 	stb	zero,48(r2)
        ptcb->OSTCBStatPend      = OS_STAT_PEND_OK;        /* Clear pend status                        */
   11e94:	e0bff517 	ldw	r2,-44(fp)
   11e98:	10000c45 	stb	zero,49(r2)
        ptcb->OSTCBDly           = 0;                      /* Task is not delayed                      */
   11e9c:	e0bff517 	ldw	r2,-44(fp)
   11ea0:	10000b8d 	sth	zero,46(r2)

#if OS_TASK_CREATE_EXT_EN > 0
        ptcb->OSTCBExtPtr        = pext;                   /* Store pointer to TCB extension           */
   11ea4:	e0bff517 	ldw	r2,-44(fp)
   11ea8:	e0c00317 	ldw	r3,12(fp)
   11eac:	10c00115 	stw	r3,4(r2)
        ptcb->OSTCBStkSize       = stk_size;               /* Store stack size                         */
   11eb0:	e0bff517 	ldw	r2,-44(fp)
   11eb4:	e0c00217 	ldw	r3,8(fp)
   11eb8:	10c00315 	stw	r3,12(r2)
        ptcb->OSTCBStkBottom     = pbos;                   /* Store pointer to bottom of stack         */
   11ebc:	e0bff517 	ldw	r2,-44(fp)
   11ec0:	e0fffd17 	ldw	r3,-12(fp)
   11ec4:	10c00215 	stw	r3,8(r2)
        ptcb->OSTCBOpt           = opt;                    /* Store task options                       */
   11ec8:	e0bff517 	ldw	r2,-44(fp)
   11ecc:	e0ffff0b 	ldhu	r3,-4(fp)
   11ed0:	10c0040d 	sth	r3,16(r2)
        ptcb->OSTCBId            = id;                     /* Store task ID                            */
   11ed4:	e0bff517 	ldw	r2,-44(fp)
   11ed8:	e0fffe0b 	ldhu	r3,-8(fp)
   11edc:	10c0048d 	sth	r3,18(r2)
        opt                      = opt;
        id                       = id;
#endif

#if OS_TASK_DEL_EN > 0
        ptcb->OSTCBDelReq        = OS_ERR_NONE;
   11ee0:	e0bff517 	ldw	r2,-44(fp)
   11ee4:	10000dc5 	stb	zero,55(r2)
#endif

#if OS_LOWEST_PRIO <= 63
        ptcb->OSTCBY             = (INT8U)(prio >> 3);          /* Pre-compute X, Y, BitX and BitY     */
   11ee8:	e0bffb03 	ldbu	r2,-20(fp)
   11eec:	1004d0fa 	srli	r2,r2,3
   11ef0:	1007883a 	mov	r3,r2
   11ef4:	e0bff517 	ldw	r2,-44(fp)
   11ef8:	10c00d05 	stb	r3,52(r2)
        ptcb->OSTCBX             = (INT8U)(prio & 0x07);
   11efc:	e0bffb03 	ldbu	r2,-20(fp)
   11f00:	108001cc 	andi	r2,r2,7
   11f04:	1007883a 	mov	r3,r2
   11f08:	e0bff517 	ldw	r2,-44(fp)
   11f0c:	10c00cc5 	stb	r3,51(r2)
        ptcb->OSTCBBitY          = (INT8U)(1 << ptcb->OSTCBY);
   11f10:	e0bff517 	ldw	r2,-44(fp)
   11f14:	10800d03 	ldbu	r2,52(r2)
   11f18:	10803fcc 	andi	r2,r2,255
   11f1c:	00c00044 	movi	r3,1
   11f20:	1884983a 	sll	r2,r3,r2
   11f24:	1007883a 	mov	r3,r2
   11f28:	e0bff517 	ldw	r2,-44(fp)
   11f2c:	10c00d85 	stb	r3,54(r2)
        ptcb->OSTCBBitX          = (INT8U)(1 << ptcb->OSTCBX);
   11f30:	e0bff517 	ldw	r2,-44(fp)
   11f34:	10800cc3 	ldbu	r2,51(r2)
   11f38:	10803fcc 	andi	r2,r2,255
   11f3c:	00c00044 	movi	r3,1
   11f40:	1884983a 	sll	r2,r3,r2
   11f44:	1007883a 	mov	r3,r2
   11f48:	e0bff517 	ldw	r2,-44(fp)
   11f4c:	10c00d45 	stb	r3,53(r2)
        ptcb->OSTCBBitY          = (INT16U)(1 << ptcb->OSTCBY);
        ptcb->OSTCBBitX          = (INT16U)(1 << ptcb->OSTCBX);
#endif

#if (OS_EVENT_EN)
        ptcb->OSTCBEventPtr      = (OS_EVENT  *)0;         /* Task is not pending on an  event         */
   11f50:	e0bff517 	ldw	r2,-44(fp)
   11f54:	10000715 	stw	zero,28(r2)
#if (OS_EVENT_MULTI_EN > 0)
        ptcb->OSTCBEventMultiPtr = (OS_EVENT **)0;         /* Task is not pending on any events        */
   11f58:	e0bff517 	ldw	r2,-44(fp)
   11f5c:	10000815 	stw	zero,32(r2)
#endif
#endif

#if (OS_FLAG_EN > 0) && (OS_MAX_FLAGS > 0) && (OS_TASK_DEL_EN > 0)
        ptcb->OSTCBFlagNode  = (OS_FLAG_NODE *)0;          /* Task is not pending on an event flag     */
   11f60:	e0bff517 	ldw	r2,-44(fp)
   11f64:	10000a15 	stw	zero,40(r2)
#endif

#if (OS_MBOX_EN > 0) || ((OS_Q_EN > 0) && (OS_MAX_QS > 0))
        ptcb->OSTCBMsg       = (void *)0;                  /* No message received                      */
   11f68:	e0bff517 	ldw	r2,-44(fp)
   11f6c:	10000915 	stw	zero,36(r2)
#endif

#if OS_TASK_PROFILE_EN > 0
        ptcb->OSTCBCtxSwCtr    = 0L;                       /* Initialize profiling variables           */
   11f70:	e0bff517 	ldw	r2,-44(fp)
   11f74:	10000e15 	stw	zero,56(r2)
        ptcb->OSTCBCyclesStart = 0L;
   11f78:	e0bff517 	ldw	r2,-44(fp)
   11f7c:	10001015 	stw	zero,64(r2)
        ptcb->OSTCBCyclesTot   = 0L;
   11f80:	e0bff517 	ldw	r2,-44(fp)
   11f84:	10000f15 	stw	zero,60(r2)
        ptcb->OSTCBStkBase     = (OS_STK *)0;
   11f88:	e0bff517 	ldw	r2,-44(fp)
   11f8c:	10001115 	stw	zero,68(r2)
        ptcb->OSTCBStkUsed     = 0L;
   11f90:	e0bff517 	ldw	r2,-44(fp)
   11f94:	10001215 	stw	zero,72(r2)
#endif

#if OS_TASK_NAME_SIZE > 1
        ptcb->OSTCBTaskName[0] = '?';                      /* Unknown name at task creation            */
   11f98:	e0bff517 	ldw	r2,-44(fp)
   11f9c:	00c00fc4 	movi	r3,63
   11fa0:	10c01305 	stb	r3,76(r2)
        ptcb->OSTCBTaskName[1] = OS_ASCII_NUL;
   11fa4:	e0bff517 	ldw	r2,-44(fp)
   11fa8:	10001345 	stb	zero,77(r2)
#endif

        OSTCBInitHook(ptcb);
   11fac:	e13ff517 	ldw	r4,-44(fp)
   11fb0:	001bf100 	call	1bf10 <OSTCBInitHook>

        OSTaskCreateHook(ptcb);                            /* Call user defined hook                   */
   11fb4:	e13ff517 	ldw	r4,-44(fp)
   11fb8:	001be280 	call	1be28 <OSTaskCreateHook>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   11fbc:	0005303a 	rdctl	r2,status
   11fc0:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   11fc4:	e0fff817 	ldw	r3,-32(fp)
   11fc8:	00bfff84 	movi	r2,-2
   11fcc:	1884703a 	and	r2,r3,r2
   11fd0:	1001703a 	wrctl	status,r2
  
  return context;
   11fd4:	e0bff817 	ldw	r2,-32(fp)

        OS_ENTER_CRITICAL();
   11fd8:	e0bff415 	stw	r2,-48(fp)
        OSTCBPrioTbl[prio] = ptcb;
   11fdc:	e0fffb03 	ldbu	r3,-20(fp)
   11fe0:	008000f4 	movhi	r2,3
   11fe4:	1081e004 	addi	r2,r2,1920
   11fe8:	18c7883a 	add	r3,r3,r3
   11fec:	18c7883a 	add	r3,r3,r3
   11ff0:	10c5883a 	add	r2,r2,r3
   11ff4:	e0fff517 	ldw	r3,-44(fp)
   11ff8:	10c00015 	stw	r3,0(r2)
        ptcb->OSTCBNext    = OSTCBList;                    /* Link into TCB chain                      */
   11ffc:	d0e83e17 	ldw	r3,-24328(gp)
   12000:	e0bff517 	ldw	r2,-44(fp)
   12004:	10c00515 	stw	r3,20(r2)
        ptcb->OSTCBPrev    = (OS_TCB *)0;
   12008:	e0bff517 	ldw	r2,-44(fp)
   1200c:	10000615 	stw	zero,24(r2)
        if (OSTCBList != (OS_TCB *)0) {
   12010:	d0a83e17 	ldw	r2,-24328(gp)
   12014:	10000326 	beq	r2,zero,12024 <OS_TCBInit+0x22c>
            OSTCBList->OSTCBPrev = ptcb;
   12018:	d0a83e17 	ldw	r2,-24328(gp)
   1201c:	e0fff517 	ldw	r3,-44(fp)
   12020:	10c00615 	stw	r3,24(r2)
        }
        OSTCBList               = ptcb;
   12024:	e0bff517 	ldw	r2,-44(fp)
   12028:	d0a83e15 	stw	r2,-24328(gp)
        OSRdyGrp               |= ptcb->OSTCBBitY;         /* Make task ready to run                   */
   1202c:	e0bff517 	ldw	r2,-44(fp)
   12030:	10c00d83 	ldbu	r3,54(r2)
   12034:	d0a84703 	ldbu	r2,-24292(gp)
   12038:	1884b03a 	or	r2,r3,r2
   1203c:	d0a84705 	stb	r2,-24292(gp)
        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
   12040:	e0bff517 	ldw	r2,-44(fp)
   12044:	10800d03 	ldbu	r2,52(r2)
   12048:	10c03fcc 	andi	r3,r2,255
   1204c:	e0bff517 	ldw	r2,-44(fp)
   12050:	10800d03 	ldbu	r2,52(r2)
   12054:	11003fcc 	andi	r4,r2,255
   12058:	d0a84744 	addi	r2,gp,-24291
   1205c:	2085883a 	add	r2,r4,r2
   12060:	11000003 	ldbu	r4,0(r2)
   12064:	e0bff517 	ldw	r2,-44(fp)
   12068:	10800d43 	ldbu	r2,53(r2)
   1206c:	2084b03a 	or	r2,r4,r2
   12070:	1009883a 	mov	r4,r2
   12074:	d0a84744 	addi	r2,gp,-24291
   12078:	1885883a 	add	r2,r3,r2
   1207c:	11000005 	stb	r4,0(r2)
        OSTaskCtr++;                                       /* Increment the #tasks counter             */
   12080:	d0a84343 	ldbu	r2,-24307(gp)
   12084:	10800044 	addi	r2,r2,1
   12088:	d0a84345 	stb	r2,-24307(gp)
   1208c:	e0bff417 	ldw	r2,-48(fp)
   12090:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   12094:	e0bff917 	ldw	r2,-28(fp)
   12098:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_NONE);
   1209c:	0005883a 	mov	r2,zero
   120a0:	00000506 	br	120b8 <OS_TCBInit+0x2c0>
   120a4:	e0bff417 	ldw	r2,-48(fp)
   120a8:	e0bffa15 	stw	r2,-24(fp)
   120ac:	e0bffa17 	ldw	r2,-24(fp)
   120b0:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_TASK_NO_MORE_TCB);
   120b4:	00801084 	movi	r2,66
}
   120b8:	e037883a 	mov	sp,fp
   120bc:	dfc00117 	ldw	ra,4(sp)
   120c0:	df000017 	ldw	fp,0(sp)
   120c4:	dec00204 	addi	sp,sp,8
   120c8:	f800283a 	ret

000120cc <OSDebugInit>:
*********************************************************************************************************
*/

#if OS_DEBUG_EN > 0
void  OSDebugInit (void)
{
   120cc:	defffe04 	addi	sp,sp,-8
   120d0:	df000115 	stw	fp,4(sp)
   120d4:	df000104 	addi	fp,sp,4
    void  *ptemp;

    
    ptemp = (void *)&OSDebugEn;
   120d8:	d0a01c04 	addi	r2,gp,-32656
   120dc:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSEndiannessTest;
   120e0:	d0a01d04 	addi	r2,gp,-32652
   120e4:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSEventMax;
   120e8:	d0a01e84 	addi	r2,gp,-32646
   120ec:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventNameSize;
   120f0:	d0a01f04 	addi	r2,gp,-32644
   120f4:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventEn;
   120f8:	d0a01e04 	addi	r2,gp,-32648
   120fc:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventSize;
   12100:	d0a01f84 	addi	r2,gp,-32642
   12104:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventTblSize;
   12108:	d0a02004 	addi	r2,gp,-32640
   1210c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventMultiEn;
   12110:	d0a02084 	addi	r2,gp,-32638
   12114:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSFlagEn;
   12118:	d0a02104 	addi	r2,gp,-32636
   1211c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagGrpSize;
   12120:	d0a02184 	addi	r2,gp,-32634
   12124:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagNodeSize;
   12128:	d0a02204 	addi	r2,gp,-32632
   1212c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagWidth;
   12130:	d0a02284 	addi	r2,gp,-32630
   12134:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagMax;
   12138:	d0a02304 	addi	r2,gp,-32628
   1213c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagNameSize;
   12140:	d0a02384 	addi	r2,gp,-32626
   12144:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSLowestPrio;
   12148:	d0a02404 	addi	r2,gp,-32624
   1214c:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSMboxEn;
   12150:	d0a02484 	addi	r2,gp,-32622
   12154:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSMemEn;
   12158:	d0a02504 	addi	r2,gp,-32620
   1215c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSMemMax;
   12160:	d0a02584 	addi	r2,gp,-32618
   12164:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSMemNameSize;
   12168:	d0a02604 	addi	r2,gp,-32616
   1216c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSMemSize;
   12170:	d0a02684 	addi	r2,gp,-32614
   12174:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSMemTblSize;
   12178:	d0a02704 	addi	r2,gp,-32612
   1217c:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSMutexEn;
   12180:	d0a02784 	addi	r2,gp,-32610
   12184:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSPtrSize;
   12188:	d0a02804 	addi	r2,gp,-32608
   1218c:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSQEn;
   12190:	d0a02884 	addi	r2,gp,-32606
   12194:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSQMax;
   12198:	d0a02904 	addi	r2,gp,-32604
   1219c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSQSize;
   121a0:	d0a02984 	addi	r2,gp,-32602
   121a4:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSRdyTblSize;
   121a8:	d0a02a04 	addi	r2,gp,-32600
   121ac:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSSemEn;
   121b0:	d0a02a84 	addi	r2,gp,-32598
   121b4:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSStkWidth;
   121b8:	d0a02b04 	addi	r2,gp,-32596
   121bc:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSTaskCreateEn;
   121c0:	d0a02b84 	addi	r2,gp,-32594
   121c4:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskCreateExtEn;
   121c8:	d0a02c04 	addi	r2,gp,-32592
   121cc:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskDelEn;
   121d0:	d0a02c84 	addi	r2,gp,-32590
   121d4:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskIdleStkSize;
   121d8:	d0a02d04 	addi	r2,gp,-32588
   121dc:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskProfileEn;
   121e0:	d0a02d84 	addi	r2,gp,-32586
   121e4:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskMax;
   121e8:	d0a02e04 	addi	r2,gp,-32584
   121ec:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskNameSize;
   121f0:	d0a02e84 	addi	r2,gp,-32582
   121f4:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskStatEn;
   121f8:	d0a02f04 	addi	r2,gp,-32580
   121fc:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskStatStkSize;
   12200:	d0a02f84 	addi	r2,gp,-32578
   12204:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskStatStkChkEn;
   12208:	d0a03004 	addi	r2,gp,-32576
   1220c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskSwHookEn;
   12210:	d0a03084 	addi	r2,gp,-32574
   12214:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSTCBPrioTblMax;
   12218:	d0a03104 	addi	r2,gp,-32572
   1221c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTCBSize;
   12220:	d0a03184 	addi	r2,gp,-32570
   12224:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSTicksPerSec;
   12228:	d0a03204 	addi	r2,gp,-32568
   1222c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTimeTickHookEn;
   12230:	d0a03284 	addi	r2,gp,-32566
   12234:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSTmrWheelSize;
    ptemp = (void *)&OSTmrWheelTblSize;
#endif

    ptemp = (void *)&OSVersionNbr;
   12238:	d0a03304 	addi	r2,gp,-32564
   1223c:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSDataSize;
   12240:	d0a03804 	addi	r2,gp,-32544
   12244:	e0bfff15 	stw	r2,-4(fp)

    ptemp = ptemp;                             /* Prevent compiler warning for 'ptemp' not being used! */
}
   12248:	e037883a 	mov	sp,fp
   1224c:	df000017 	ldw	fp,0(sp)
   12250:	dec00104 	addi	sp,sp,4
   12254:	f800283a 	ret

00012258 <OSFlagAccept>:
*********************************************************************************************************
*/

#if OS_FLAG_ACCEPT_EN > 0
OS_FLAGS  OSFlagAccept (OS_FLAG_GRP *pgrp, OS_FLAGS flags, INT8U wait_type, INT8U *perr)
{
   12258:	defff204 	addi	sp,sp,-56
   1225c:	df000d15 	stw	fp,52(sp)
   12260:	df000d04 	addi	fp,sp,52
   12264:	e13ffc15 	stw	r4,-16(fp)
   12268:	2807883a 	mov	r3,r5
   1226c:	3005883a 	mov	r2,r6
   12270:	e1ffff15 	stw	r7,-4(fp)
   12274:	e0fffd0d 	sth	r3,-12(fp)
   12278:	e0bffe05 	stb	r2,-8(fp)
    OS_FLAGS      flags_rdy;
    INT8U         result;
    BOOLEAN       consume;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR     cpu_sr = 0;
   1227c:	e03ff415 	stw	zero,-48(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
   12280:	e0bfff17 	ldw	r2,-4(fp)
   12284:	1000021e 	bne	r2,zero,12290 <OSFlagAccept+0x38>
        return ((OS_FLAGS)0);
   12288:	0005883a 	mov	r2,zero
   1228c:	0000b006 	br	12550 <OSFlagAccept+0x2f8>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {                        /* Validate 'pgrp'                          */
   12290:	e0bffc17 	ldw	r2,-16(fp)
   12294:	1000051e 	bne	r2,zero,122ac <OSFlagAccept+0x54>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
   12298:	e0bfff17 	ldw	r2,-4(fp)
   1229c:	00c01b84 	movi	r3,110
   122a0:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
   122a4:	0005883a 	mov	r2,zero
   122a8:	0000a906 	br	12550 <OSFlagAccept+0x2f8>
    }
#endif
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {          /* Validate event block type                */
   122ac:	e0bffc17 	ldw	r2,-16(fp)
   122b0:	10800003 	ldbu	r2,0(r2)
   122b4:	10803fcc 	andi	r2,r2,255
   122b8:	10800160 	cmpeqi	r2,r2,5
   122bc:	1000051e 	bne	r2,zero,122d4 <OSFlagAccept+0x7c>
        *perr = OS_ERR_EVENT_TYPE;
   122c0:	e0bfff17 	ldw	r2,-4(fp)
   122c4:	00c00044 	movi	r3,1
   122c8:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
   122cc:	0005883a 	mov	r2,zero
   122d0:	00009f06 	br	12550 <OSFlagAccept+0x2f8>
    }
    result = (INT8U)(wait_type & OS_FLAG_CONSUME);
   122d4:	e0fffe03 	ldbu	r3,-8(fp)
   122d8:	00bfe004 	movi	r2,-128
   122dc:	1884703a 	and	r2,r3,r2
   122e0:	e0bff505 	stb	r2,-44(fp)
    if (result != (INT8U)0) {                              /* See if we need to consume the flags      */
   122e4:	e0bff503 	ldbu	r2,-44(fp)
   122e8:	10000626 	beq	r2,zero,12304 <OSFlagAccept+0xac>
        wait_type &= ~OS_FLAG_CONSUME;
   122ec:	e0bffe03 	ldbu	r2,-8(fp)
   122f0:	10801fcc 	andi	r2,r2,127
   122f4:	e0bffe05 	stb	r2,-8(fp)
        consume    = OS_TRUE;
   122f8:	00800044 	movi	r2,1
   122fc:	e0bff385 	stb	r2,-50(fp)
   12300:	00000106 	br	12308 <OSFlagAccept+0xb0>
    } else {
        consume    = OS_FALSE;
   12304:	e03ff385 	stb	zero,-50(fp)
    }
/*$PAGE*/
    *perr = OS_ERR_NONE;                                   /* Assume NO error until proven otherwise.  */
   12308:	e0bfff17 	ldw	r2,-4(fp)
   1230c:	10000005 	stb	zero,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   12310:	0005303a 	rdctl	r2,status
   12314:	e0bff615 	stw	r2,-40(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   12318:	e0fff617 	ldw	r3,-40(fp)
   1231c:	00bfff84 	movi	r2,-2
   12320:	1884703a 	and	r2,r3,r2
   12324:	1001703a 	wrctl	status,r2
  
  return context;
   12328:	e0bff617 	ldw	r2,-40(fp)
    OS_ENTER_CRITICAL();
   1232c:	e0bff415 	stw	r2,-48(fp)
    switch (wait_type) {
   12330:	e0bffe03 	ldbu	r2,-8(fp)
   12334:	10c00060 	cmpeqi	r3,r2,1
   12338:	18005f1e 	bne	r3,zero,124b8 <OSFlagAccept+0x260>
   1233c:	10c00088 	cmpgei	r3,r2,2
   12340:	1800021e 	bne	r3,zero,1234c <OSFlagAccept+0xf4>
   12344:	10003f26 	beq	r2,zero,12444 <OSFlagAccept+0x1ec>
   12348:	00007706 	br	12528 <OSFlagAccept+0x2d0>
   1234c:	10c000a0 	cmpeqi	r3,r2,2
   12350:	1800031e 	bne	r3,zero,12360 <OSFlagAccept+0x108>
   12354:	108000e0 	cmpeqi	r2,r2,3
   12358:	10001e1e 	bne	r2,zero,123d4 <OSFlagAccept+0x17c>
   1235c:	00007206 	br	12528 <OSFlagAccept+0x2d0>
        case OS_FLAG_WAIT_SET_ALL:                         /* See if all required flags are set        */
             flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);     /* Extract only the bits we want   */
   12360:	e0bffc17 	ldw	r2,-16(fp)
   12364:	10c0020b 	ldhu	r3,8(r2)
   12368:	e0bffd0b 	ldhu	r2,-12(fp)
   1236c:	1884703a 	and	r2,r3,r2
   12370:	e0bff30d 	sth	r2,-52(fp)
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
   12374:	e0fff30b 	ldhu	r3,-52(fp)
   12378:	e0bffd0b 	ldhu	r2,-12(fp)
   1237c:	18800d1e 	bne	r3,r2,123b4 <OSFlagAccept+0x15c>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
   12380:	e0bff383 	ldbu	r2,-50(fp)
   12384:	10800058 	cmpnei	r2,r2,1
   12388:	10000d1e 	bne	r2,zero,123c0 <OSFlagAccept+0x168>
                     pgrp->OSFlagFlags &= ~flags_rdy;      /* Clear ONLY the flags that we wanted      */
   1238c:	e0bffc17 	ldw	r2,-16(fp)
   12390:	1080020b 	ldhu	r2,8(r2)
   12394:	1007883a 	mov	r3,r2
   12398:	e0bff30b 	ldhu	r2,-52(fp)
   1239c:	0084303a 	nor	r2,zero,r2
   123a0:	1884703a 	and	r2,r3,r2
   123a4:	1007883a 	mov	r3,r2
   123a8:	e0bffc17 	ldw	r2,-16(fp)
   123ac:	10c0020d 	sth	r3,8(r2)
   123b0:	00000306 	br	123c0 <OSFlagAccept+0x168>
                 }
             } else {
                 *perr = OS_ERR_FLAG_NOT_RDY;
   123b4:	e0bfff17 	ldw	r2,-4(fp)
   123b8:	00c01c04 	movi	r3,112
   123bc:	10c00005 	stb	r3,0(r2)
   123c0:	e0bff417 	ldw	r2,-48(fp)
   123c4:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   123c8:	e0bff717 	ldw	r2,-36(fp)
   123cc:	1001703a 	wrctl	status,r2
             }
             OS_EXIT_CRITICAL();
             break;
   123d0:	00005e06 	br	1254c <OSFlagAccept+0x2f4>

        case OS_FLAG_WAIT_SET_ANY:
             flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);     /* Extract only the bits we want   */
   123d4:	e0bffc17 	ldw	r2,-16(fp)
   123d8:	10c0020b 	ldhu	r3,8(r2)
   123dc:	e0bffd0b 	ldhu	r2,-12(fp)
   123e0:	1884703a 	and	r2,r3,r2
   123e4:	e0bff30d 	sth	r2,-52(fp)
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag set                      */
   123e8:	e0bff30b 	ldhu	r2,-52(fp)
   123ec:	10000d26 	beq	r2,zero,12424 <OSFlagAccept+0x1cc>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
   123f0:	e0bff383 	ldbu	r2,-50(fp)
   123f4:	10800058 	cmpnei	r2,r2,1
   123f8:	10000d1e 	bne	r2,zero,12430 <OSFlagAccept+0x1d8>
                     pgrp->OSFlagFlags &= ~flags_rdy;      /* Clear ONLY the flags that we got         */
   123fc:	e0bffc17 	ldw	r2,-16(fp)
   12400:	1080020b 	ldhu	r2,8(r2)
   12404:	1007883a 	mov	r3,r2
   12408:	e0bff30b 	ldhu	r2,-52(fp)
   1240c:	0084303a 	nor	r2,zero,r2
   12410:	1884703a 	and	r2,r3,r2
   12414:	1007883a 	mov	r3,r2
   12418:	e0bffc17 	ldw	r2,-16(fp)
   1241c:	10c0020d 	sth	r3,8(r2)
   12420:	00000306 	br	12430 <OSFlagAccept+0x1d8>
                 }
             } else {
                 *perr = OS_ERR_FLAG_NOT_RDY;
   12424:	e0bfff17 	ldw	r2,-4(fp)
   12428:	00c01c04 	movi	r3,112
   1242c:	10c00005 	stb	r3,0(r2)
   12430:	e0bff417 	ldw	r2,-48(fp)
   12434:	e0bff815 	stw	r2,-32(fp)
   12438:	e0bff817 	ldw	r2,-32(fp)
   1243c:	1001703a 	wrctl	status,r2
             }
             OS_EXIT_CRITICAL();
             break;
   12440:	00004206 	br	1254c <OSFlagAccept+0x2f4>

#if OS_FLAG_WAIT_CLR_EN > 0
        case OS_FLAG_WAIT_CLR_ALL:                         /* See if all required flags are cleared    */
             flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags);  /* Extract only the bits we want     */
   12444:	e0bffc17 	ldw	r2,-16(fp)
   12448:	1080020b 	ldhu	r2,8(r2)
   1244c:	0084303a 	nor	r2,zero,r2
   12450:	1007883a 	mov	r3,r2
   12454:	e0bffd0b 	ldhu	r2,-12(fp)
   12458:	1884703a 	and	r2,r3,r2
   1245c:	e0bff30d 	sth	r2,-52(fp)
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
   12460:	e0fff30b 	ldhu	r3,-52(fp)
   12464:	e0bffd0b 	ldhu	r2,-12(fp)
   12468:	18800b1e 	bne	r3,r2,12498 <OSFlagAccept+0x240>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
   1246c:	e0bff383 	ldbu	r2,-50(fp)
   12470:	10800058 	cmpnei	r2,r2,1
   12474:	10000b1e 	bne	r2,zero,124a4 <OSFlagAccept+0x24c>
                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we wanted        */
   12478:	e0bffc17 	ldw	r2,-16(fp)
   1247c:	10c0020b 	ldhu	r3,8(r2)
   12480:	e0bff30b 	ldhu	r2,-52(fp)
   12484:	1884b03a 	or	r2,r3,r2
   12488:	1007883a 	mov	r3,r2
   1248c:	e0bffc17 	ldw	r2,-16(fp)
   12490:	10c0020d 	sth	r3,8(r2)
   12494:	00000306 	br	124a4 <OSFlagAccept+0x24c>
                 }
             } else {
                 *perr = OS_ERR_FLAG_NOT_RDY;
   12498:	e0bfff17 	ldw	r2,-4(fp)
   1249c:	00c01c04 	movi	r3,112
   124a0:	10c00005 	stb	r3,0(r2)
   124a4:	e0bff417 	ldw	r2,-48(fp)
   124a8:	e0bff915 	stw	r2,-28(fp)
   124ac:	e0bff917 	ldw	r2,-28(fp)
   124b0:	1001703a 	wrctl	status,r2
             }
             OS_EXIT_CRITICAL();
             break;
   124b4:	00002506 	br	1254c <OSFlagAccept+0x2f4>

        case OS_FLAG_WAIT_CLR_ANY:
             flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags); /* Extract only the bits we want      */
   124b8:	e0bffc17 	ldw	r2,-16(fp)
   124bc:	1080020b 	ldhu	r2,8(r2)
   124c0:	0084303a 	nor	r2,zero,r2
   124c4:	1007883a 	mov	r3,r2
   124c8:	e0bffd0b 	ldhu	r2,-12(fp)
   124cc:	1884703a 	and	r2,r3,r2
   124d0:	e0bff30d 	sth	r2,-52(fp)
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag cleared                  */
   124d4:	e0bff30b 	ldhu	r2,-52(fp)
   124d8:	10000b26 	beq	r2,zero,12508 <OSFlagAccept+0x2b0>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
   124dc:	e0bff383 	ldbu	r2,-50(fp)
   124e0:	10800058 	cmpnei	r2,r2,1
   124e4:	10000b1e 	bne	r2,zero,12514 <OSFlagAccept+0x2bc>
                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we got           */
   124e8:	e0bffc17 	ldw	r2,-16(fp)
   124ec:	10c0020b 	ldhu	r3,8(r2)
   124f0:	e0bff30b 	ldhu	r2,-52(fp)
   124f4:	1884b03a 	or	r2,r3,r2
   124f8:	1007883a 	mov	r3,r2
   124fc:	e0bffc17 	ldw	r2,-16(fp)
   12500:	10c0020d 	sth	r3,8(r2)
   12504:	00000306 	br	12514 <OSFlagAccept+0x2bc>
                 }
             } else {
                 *perr = OS_ERR_FLAG_NOT_RDY;
   12508:	e0bfff17 	ldw	r2,-4(fp)
   1250c:	00c01c04 	movi	r3,112
   12510:	10c00005 	stb	r3,0(r2)
   12514:	e0bff417 	ldw	r2,-48(fp)
   12518:	e0bffa15 	stw	r2,-24(fp)
   1251c:	e0bffa17 	ldw	r2,-24(fp)
   12520:	1001703a 	wrctl	status,r2
             }
             OS_EXIT_CRITICAL();
             break;
   12524:	00000906 	br	1254c <OSFlagAccept+0x2f4>
   12528:	e0bff417 	ldw	r2,-48(fp)
   1252c:	e0bffb15 	stw	r2,-20(fp)
   12530:	e0bffb17 	ldw	r2,-20(fp)
   12534:	1001703a 	wrctl	status,r2
#endif

        default:
             OS_EXIT_CRITICAL();
             flags_rdy = (OS_FLAGS)0;
   12538:	e03ff30d 	sth	zero,-52(fp)
             *perr     = OS_ERR_FLAG_WAIT_TYPE;
   1253c:	e0bfff17 	ldw	r2,-4(fp)
   12540:	00c01bc4 	movi	r3,111
   12544:	10c00005 	stb	r3,0(r2)
             break;
   12548:	0001883a 	nop
    }
    return (flags_rdy);
   1254c:	e0bff30b 	ldhu	r2,-52(fp)
}
   12550:	e037883a 	mov	sp,fp
   12554:	df000017 	ldw	fp,0(sp)
   12558:	dec00104 	addi	sp,sp,4
   1255c:	f800283a 	ret

00012560 <OSFlagCreate>:
* Called from: Task ONLY
*********************************************************************************************************
*/

OS_FLAG_GRP  *OSFlagCreate (OS_FLAGS flags, INT8U *perr)
{
   12560:	defff804 	addi	sp,sp,-32
   12564:	df000715 	stw	fp,28(sp)
   12568:	df000704 	addi	fp,sp,28
   1256c:	2005883a 	mov	r2,r4
   12570:	e17fff15 	stw	r5,-4(fp)
   12574:	e0bffe0d 	sth	r2,-8(fp)
    OS_FLAG_GRP *pgrp;
#if OS_CRITICAL_METHOD == 3                         /* Allocate storage for CPU status register        */
    OS_CPU_SR    cpu_sr = 0;
   12578:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                       /* Validate 'perr'                                 */
   1257c:	e0bfff17 	ldw	r2,-4(fp)
   12580:	1000021e 	bne	r2,zero,1258c <OSFlagCreate+0x2c>
        return ((OS_FLAG_GRP *)0);
   12584:	0005883a 	mov	r2,zero
   12588:	00003b06 	br	12678 <OSFlagCreate+0x118>
    }
#endif
    if (OSIntNesting > 0) {                         /* See if called from ISR ...                      */
   1258c:	008000b4 	movhi	r2,2
   12590:	10836404 	addi	r2,r2,3472
   12594:	10800003 	ldbu	r2,0(r2)
   12598:	10803fcc 	andi	r2,r2,255
   1259c:	10000526 	beq	r2,zero,125b4 <OSFlagCreate+0x54>
        *perr = OS_ERR_CREATE_ISR;                  /* ... can't CREATE from an ISR                    */
   125a0:	e0bfff17 	ldw	r2,-4(fp)
   125a4:	00c00404 	movi	r3,16
   125a8:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAG_GRP *)0);
   125ac:	0005883a 	mov	r2,zero
   125b0:	00003106 	br	12678 <OSFlagCreate+0x118>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   125b4:	0005303a 	rdctl	r2,status
   125b8:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   125bc:	e0fffb17 	ldw	r3,-20(fp)
   125c0:	00bfff84 	movi	r2,-2
   125c4:	1884703a 	and	r2,r3,r2
   125c8:	1001703a 	wrctl	status,r2
  
  return context;
   125cc:	e0bffb17 	ldw	r2,-20(fp)
    }
    OS_ENTER_CRITICAL();
   125d0:	e0bff915 	stw	r2,-28(fp)
    pgrp = OSFlagFreeList;                          /* Get next free event flag                        */
   125d4:	008000b4 	movhi	r2,2
   125d8:	10836704 	addi	r2,r2,3484
   125dc:	10800017 	ldw	r2,0(r2)
   125e0:	e0bffa15 	stw	r2,-24(fp)
    if (pgrp != (OS_FLAG_GRP *)0) {                 /* See if we have event flag groups available      */
   125e4:	e0bffa17 	ldw	r2,-24(fp)
   125e8:	10001b26 	beq	r2,zero,12658 <OSFlagCreate+0xf8>
                                                    /* Adjust free list                                */
        OSFlagFreeList       = (OS_FLAG_GRP *)OSFlagFreeList->OSFlagWaitList;
   125ec:	008000b4 	movhi	r2,2
   125f0:	10836704 	addi	r2,r2,3484
   125f4:	10800017 	ldw	r2,0(r2)
   125f8:	10c00117 	ldw	r3,4(r2)
   125fc:	008000b4 	movhi	r2,2
   12600:	10836704 	addi	r2,r2,3484
   12604:	10c00015 	stw	r3,0(r2)
        pgrp->OSFlagType     = OS_EVENT_TYPE_FLAG;  /* Set to event flag group type                    */
   12608:	e0bffa17 	ldw	r2,-24(fp)
   1260c:	00c00144 	movi	r3,5
   12610:	10c00005 	stb	r3,0(r2)
        pgrp->OSFlagFlags    = flags;               /* Set to desired initial value                    */
   12614:	e0bffa17 	ldw	r2,-24(fp)
   12618:	e0fffe0b 	ldhu	r3,-8(fp)
   1261c:	10c0020d 	sth	r3,8(r2)
        pgrp->OSFlagWaitList = (void *)0;           /* Clear list of tasks waiting on flags            */
   12620:	e0bffa17 	ldw	r2,-24(fp)
   12624:	10000115 	stw	zero,4(r2)
#if OS_FLAG_NAME_SIZE > 1
        pgrp->OSFlagName[0]  = '?';
   12628:	e0bffa17 	ldw	r2,-24(fp)
   1262c:	00c00fc4 	movi	r3,63
   12630:	10c00285 	stb	r3,10(r2)
        pgrp->OSFlagName[1]  = OS_ASCII_NUL;
   12634:	e0bffa17 	ldw	r2,-24(fp)
   12638:	100002c5 	stb	zero,11(r2)
   1263c:	e0bff917 	ldw	r2,-28(fp)
   12640:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   12644:	e0bffc17 	ldw	r2,-16(fp)
   12648:	1001703a 	wrctl	status,r2
#endif
        OS_EXIT_CRITICAL();
        *perr                = OS_ERR_NONE;
   1264c:	e0bfff17 	ldw	r2,-4(fp)
   12650:	10000005 	stb	zero,0(r2)
   12654:	00000706 	br	12674 <OSFlagCreate+0x114>
   12658:	e0bff917 	ldw	r2,-28(fp)
   1265c:	e0bffd15 	stw	r2,-12(fp)
   12660:	e0bffd17 	ldw	r2,-12(fp)
   12664:	1001703a 	wrctl	status,r2
    } else {
        OS_EXIT_CRITICAL();
        *perr                = OS_ERR_FLAG_GRP_DEPLETED;
   12668:	e0bfff17 	ldw	r2,-4(fp)
   1266c:	00c01c84 	movi	r3,114
   12670:	10c00005 	stb	r3,0(r2)
    }
    return (pgrp);                                  /* Return pointer to event flag group              */
   12674:	e0bffa17 	ldw	r2,-24(fp)
}
   12678:	e037883a 	mov	sp,fp
   1267c:	df000017 	ldw	fp,0(sp)
   12680:	dec00104 	addi	sp,sp,4
   12684:	f800283a 	ret

00012688 <OSFlagDel>:
*********************************************************************************************************
*/

#if OS_FLAG_DEL_EN > 0
OS_FLAG_GRP  *OSFlagDel (OS_FLAG_GRP *pgrp, INT8U opt, INT8U *perr)
{
   12688:	defff204 	addi	sp,sp,-56
   1268c:	dfc00d15 	stw	ra,52(sp)
   12690:	df000c15 	stw	fp,48(sp)
   12694:	df000c04 	addi	fp,sp,48
   12698:	e13ffd15 	stw	r4,-12(fp)
   1269c:	2805883a 	mov	r2,r5
   126a0:	e1bfff15 	stw	r6,-4(fp)
   126a4:	e0bffe05 	stb	r2,-8(fp)
    BOOLEAN       tasks_waiting;
    OS_FLAG_NODE *pnode;
    OS_FLAG_GRP  *pgrp_return;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR     cpu_sr = 0;
   126a8:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
   126ac:	e0bfff17 	ldw	r2,-4(fp)
   126b0:	1000021e 	bne	r2,zero,126bc <OSFlagDel+0x34>
        return (pgrp);
   126b4:	e0bffd17 	ldw	r2,-12(fp)
   126b8:	00008a06 	br	128e4 <OSFlagDel+0x25c>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {                        /* Validate 'pgrp'                          */
   126bc:	e0bffd17 	ldw	r2,-12(fp)
   126c0:	1000051e 	bne	r2,zero,126d8 <OSFlagDel+0x50>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
   126c4:	e0bfff17 	ldw	r2,-4(fp)
   126c8:	00c01b84 	movi	r3,110
   126cc:	10c00005 	stb	r3,0(r2)
        return (pgrp);
   126d0:	e0bffd17 	ldw	r2,-12(fp)
   126d4:	00008306 	br	128e4 <OSFlagDel+0x25c>
    }
#endif
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
   126d8:	008000b4 	movhi	r2,2
   126dc:	10836404 	addi	r2,r2,3472
   126e0:	10800003 	ldbu	r2,0(r2)
   126e4:	10803fcc 	andi	r2,r2,255
   126e8:	10000526 	beq	r2,zero,12700 <OSFlagDel+0x78>
        *perr = OS_ERR_DEL_ISR;                            /* ... can't DELETE from an ISR             */
   126ec:	e0bfff17 	ldw	r2,-4(fp)
   126f0:	00c003c4 	movi	r3,15
   126f4:	10c00005 	stb	r3,0(r2)
        return (pgrp);
   126f8:	e0bffd17 	ldw	r2,-12(fp)
   126fc:	00007906 	br	128e4 <OSFlagDel+0x25c>
    }
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {          /* Validate event group type                */
   12700:	e0bffd17 	ldw	r2,-12(fp)
   12704:	10800003 	ldbu	r2,0(r2)
   12708:	10803fcc 	andi	r2,r2,255
   1270c:	10800160 	cmpeqi	r2,r2,5
   12710:	1000051e 	bne	r2,zero,12728 <OSFlagDel+0xa0>
        *perr = OS_ERR_EVENT_TYPE;
   12714:	e0bfff17 	ldw	r2,-4(fp)
   12718:	00c00044 	movi	r3,1
   1271c:	10c00005 	stb	r3,0(r2)
        return (pgrp);
   12720:	e0bffd17 	ldw	r2,-12(fp)
   12724:	00006f06 	br	128e4 <OSFlagDel+0x25c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   12728:	0005303a 	rdctl	r2,status
   1272c:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   12730:	e0fff817 	ldw	r3,-32(fp)
   12734:	00bfff84 	movi	r2,-2
   12738:	1884703a 	and	r2,r3,r2
   1273c:	1001703a 	wrctl	status,r2
  
  return context;
   12740:	e0bff817 	ldw	r2,-32(fp)
    }
    OS_ENTER_CRITICAL();
   12744:	e0bff715 	stw	r2,-36(fp)
    if (pgrp->OSFlagWaitList != (void *)0) {               /* See if any tasks waiting on event flags  */
   12748:	e0bffd17 	ldw	r2,-12(fp)
   1274c:	10800117 	ldw	r2,4(r2)
   12750:	10000326 	beq	r2,zero,12760 <OSFlagDel+0xd8>
        tasks_waiting = OS_TRUE;                           /* Yes                                      */
   12754:	00800044 	movi	r2,1
   12758:	e0bff405 	stb	r2,-48(fp)
   1275c:	00000106 	br	12764 <OSFlagDel+0xdc>
    } else {
        tasks_waiting = OS_FALSE;                          /* No                                       */
   12760:	e03ff405 	stb	zero,-48(fp)
    }
    switch (opt) {
   12764:	e0bffe03 	ldbu	r2,-8(fp)
   12768:	10000326 	beq	r2,zero,12778 <OSFlagDel+0xf0>
   1276c:	10800060 	cmpeqi	r2,r2,1
   12770:	1000271e 	bne	r2,zero,12810 <OSFlagDel+0x188>
   12774:	00005006 	br	128b8 <OSFlagDel+0x230>
        case OS_DEL_NO_PEND:                               /* Delete group if no task waiting          */
             if (tasks_waiting == OS_FALSE) {
   12778:	e0bff403 	ldbu	r2,-48(fp)
   1277c:	10001a1e 	bne	r2,zero,127e8 <OSFlagDel+0x160>
#if OS_FLAG_NAME_SIZE > 1
                 pgrp->OSFlagName[0]  = '?';               /* Unknown name                             */
   12780:	e0bffd17 	ldw	r2,-12(fp)
   12784:	00c00fc4 	movi	r3,63
   12788:	10c00285 	stb	r3,10(r2)
                 pgrp->OSFlagName[1]  = OS_ASCII_NUL;
   1278c:	e0bffd17 	ldw	r2,-12(fp)
   12790:	100002c5 	stb	zero,11(r2)
#endif
                 pgrp->OSFlagType     = OS_EVENT_TYPE_UNUSED;
   12794:	e0bffd17 	ldw	r2,-12(fp)
   12798:	10000005 	stb	zero,0(r2)
                 pgrp->OSFlagWaitList = (void *)OSFlagFreeList; /* Return group to free list           */
   1279c:	008000b4 	movhi	r2,2
   127a0:	10836704 	addi	r2,r2,3484
   127a4:	10c00017 	ldw	r3,0(r2)
   127a8:	e0bffd17 	ldw	r2,-12(fp)
   127ac:	10c00115 	stw	r3,4(r2)
                 pgrp->OSFlagFlags    = (OS_FLAGS)0;
   127b0:	e0bffd17 	ldw	r2,-12(fp)
   127b4:	1000020d 	sth	zero,8(r2)
                 OSFlagFreeList       = pgrp;
   127b8:	008000b4 	movhi	r2,2
   127bc:	10836704 	addi	r2,r2,3484
   127c0:	e0fffd17 	ldw	r3,-12(fp)
   127c4:	10c00015 	stw	r3,0(r2)
   127c8:	e0bff717 	ldw	r2,-36(fp)
   127cc:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   127d0:	e0bff917 	ldw	r2,-28(fp)
   127d4:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                = OS_ERR_NONE;
   127d8:	e0bfff17 	ldw	r2,-4(fp)
   127dc:	10000005 	stb	zero,0(r2)
                 pgrp_return          = (OS_FLAG_GRP *)0;  /* Event Flag Group has been deleted        */
   127e0:	e03ff615 	stw	zero,-40(fp)
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                = OS_ERR_TASK_WAITING;
                 pgrp_return          = pgrp;
             }
             break;
   127e4:	00003e06 	br	128e0 <OSFlagDel+0x258>
   127e8:	e0bff717 	ldw	r2,-36(fp)
   127ec:	e0bffa15 	stw	r2,-24(fp)
   127f0:	e0bffa17 	ldw	r2,-24(fp)
   127f4:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                = OS_ERR_NONE;
                 pgrp_return          = (OS_FLAG_GRP *)0;  /* Event Flag Group has been deleted        */
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                = OS_ERR_TASK_WAITING;
   127f8:	e0bfff17 	ldw	r2,-4(fp)
   127fc:	00c01244 	movi	r3,73
   12800:	10c00005 	stb	r3,0(r2)
                 pgrp_return          = pgrp;
   12804:	e0bffd17 	ldw	r2,-12(fp)
   12808:	e0bff615 	stw	r2,-40(fp)
             }
             break;
   1280c:	00003406 	br	128e0 <OSFlagDel+0x258>

        case OS_DEL_ALWAYS:                                /* Always delete the event flag group       */
             pnode = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
   12810:	e0bffd17 	ldw	r2,-12(fp)
   12814:	10800117 	ldw	r2,4(r2)
   12818:	e0bff515 	stw	r2,-44(fp)
             while (pnode != (OS_FLAG_NODE *)0) {          /* Ready ALL tasks waiting for flags        */
   1281c:	00000606 	br	12838 <OSFlagDel+0x1b0>
                 (void)OS_FlagTaskRdy(pnode, (OS_FLAGS)0);
   12820:	e13ff517 	ldw	r4,-44(fp)
   12824:	000b883a 	mov	r5,zero
   12828:	00138c40 	call	138c4 <OS_FlagTaskRdy>
                 pnode = (OS_FLAG_NODE *)pnode->OSFlagNodeNext;
   1282c:	e0bff517 	ldw	r2,-44(fp)
   12830:	10800017 	ldw	r2,0(r2)
   12834:	e0bff515 	stw	r2,-44(fp)
             }
             break;

        case OS_DEL_ALWAYS:                                /* Always delete the event flag group       */
             pnode = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
             while (pnode != (OS_FLAG_NODE *)0) {          /* Ready ALL tasks waiting for flags        */
   12838:	e0bff517 	ldw	r2,-44(fp)
   1283c:	103ff81e 	bne	r2,zero,12820 <__alt_mem_Flash_flash_data+0xf4012820>
                 (void)OS_FlagTaskRdy(pnode, (OS_FLAGS)0);
                 pnode = (OS_FLAG_NODE *)pnode->OSFlagNodeNext;
             }
#if OS_FLAG_NAME_SIZE > 1
             pgrp->OSFlagName[0]  = '?';                   /* Unknown name                             */
   12840:	e0bffd17 	ldw	r2,-12(fp)
   12844:	00c00fc4 	movi	r3,63
   12848:	10c00285 	stb	r3,10(r2)
             pgrp->OSFlagName[1]  = OS_ASCII_NUL;
   1284c:	e0bffd17 	ldw	r2,-12(fp)
   12850:	100002c5 	stb	zero,11(r2)
#endif
             pgrp->OSFlagType     = OS_EVENT_TYPE_UNUSED;
   12854:	e0bffd17 	ldw	r2,-12(fp)
   12858:	10000005 	stb	zero,0(r2)
             pgrp->OSFlagWaitList = (void *)OSFlagFreeList;/* Return group to free list                */
   1285c:	008000b4 	movhi	r2,2
   12860:	10836704 	addi	r2,r2,3484
   12864:	10c00017 	ldw	r3,0(r2)
   12868:	e0bffd17 	ldw	r2,-12(fp)
   1286c:	10c00115 	stw	r3,4(r2)
             pgrp->OSFlagFlags    = (OS_FLAGS)0;
   12870:	e0bffd17 	ldw	r2,-12(fp)
   12874:	1000020d 	sth	zero,8(r2)
             OSFlagFreeList       = pgrp;
   12878:	008000b4 	movhi	r2,2
   1287c:	10836704 	addi	r2,r2,3484
   12880:	e0fffd17 	ldw	r3,-12(fp)
   12884:	10c00015 	stw	r3,0(r2)
   12888:	e0bff717 	ldw	r2,-36(fp)
   1288c:	e0bffb15 	stw	r2,-20(fp)
   12890:	e0bffb17 	ldw	r2,-20(fp)
   12894:	1001703a 	wrctl	status,r2
             OS_EXIT_CRITICAL();
             if (tasks_waiting == OS_TRUE) {               /* Reschedule only if task(s) were waiting  */
   12898:	e0bff403 	ldbu	r2,-48(fp)
   1289c:	10800058 	cmpnei	r2,r2,1
   128a0:	1000011e 	bne	r2,zero,128a8 <OSFlagDel+0x220>
                 OS_Sched();                               /* Find highest priority task ready to run  */
   128a4:	00119f40 	call	119f4 <OS_Sched>
             }
             *perr = OS_ERR_NONE;
   128a8:	e0bfff17 	ldw	r2,-4(fp)
   128ac:	10000005 	stb	zero,0(r2)
             pgrp_return          = (OS_FLAG_GRP *)0;      /* Event Flag Group has been deleted        */
   128b0:	e03ff615 	stw	zero,-40(fp)
             break;
   128b4:	00000a06 	br	128e0 <OSFlagDel+0x258>
   128b8:	e0bff717 	ldw	r2,-36(fp)
   128bc:	e0bffc15 	stw	r2,-16(fp)
   128c0:	e0bffc17 	ldw	r2,-16(fp)
   128c4:	1001703a 	wrctl	status,r2

        default:
             OS_EXIT_CRITICAL();
             *perr                = OS_ERR_INVALID_OPT;
   128c8:	e0bfff17 	ldw	r2,-4(fp)
   128cc:	00c001c4 	movi	r3,7
   128d0:	10c00005 	stb	r3,0(r2)
             pgrp_return          = pgrp;
   128d4:	e0bffd17 	ldw	r2,-12(fp)
   128d8:	e0bff615 	stw	r2,-40(fp)
             break;
   128dc:	0001883a 	nop
    }
    return (pgrp_return);
   128e0:	e0bff617 	ldw	r2,-40(fp)
}
   128e4:	e037883a 	mov	sp,fp
   128e8:	dfc00117 	ldw	ra,4(sp)
   128ec:	df000017 	ldw	fp,0(sp)
   128f0:	dec00204 	addi	sp,sp,8
   128f4:	f800283a 	ret

000128f8 <OSFlagNameGet>:
*********************************************************************************************************
*/

#if OS_FLAG_NAME_SIZE > 1
INT8U  OSFlagNameGet (OS_FLAG_GRP *pgrp, INT8U *pname, INT8U *perr)
{
   128f8:	defff604 	addi	sp,sp,-40
   128fc:	dfc00915 	stw	ra,36(sp)
   12900:	df000815 	stw	fp,32(sp)
   12904:	df000804 	addi	fp,sp,32
   12908:	e13ffd15 	stw	r4,-12(fp)
   1290c:	e17ffe15 	stw	r5,-8(fp)
   12910:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   12914:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
   12918:	e0bfff17 	ldw	r2,-4(fp)
   1291c:	1000021e 	bne	r2,zero,12928 <OSFlagNameGet+0x30>
        return (0);
   12920:	0005883a 	mov	r2,zero
   12924:	00003b06 	br	12a14 <OSFlagNameGet+0x11c>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {              /* Is 'pgrp' a NULL pointer?                          */
   12928:	e0bffd17 	ldw	r2,-12(fp)
   1292c:	1000051e 	bne	r2,zero,12944 <OSFlagNameGet+0x4c>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
   12930:	e0bfff17 	ldw	r2,-4(fp)
   12934:	00c01b84 	movi	r3,110
   12938:	10c00005 	stb	r3,0(r2)
        return (0);
   1293c:	0005883a 	mov	r2,zero
   12940:	00003406 	br	12a14 <OSFlagNameGet+0x11c>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
   12944:	e0bffe17 	ldw	r2,-8(fp)
   12948:	1000051e 	bne	r2,zero,12960 <OSFlagNameGet+0x68>
        *perr = OS_ERR_PNAME_NULL;
   1294c:	e0bfff17 	ldw	r2,-4(fp)
   12950:	00c00304 	movi	r3,12
   12954:	10c00005 	stb	r3,0(r2)
        return (0);
   12958:	0005883a 	mov	r2,zero
   1295c:	00002d06 	br	12a14 <OSFlagNameGet+0x11c>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
   12960:	008000b4 	movhi	r2,2
   12964:	10836404 	addi	r2,r2,3472
   12968:	10800003 	ldbu	r2,0(r2)
   1296c:	10803fcc 	andi	r2,r2,255
   12970:	10000526 	beq	r2,zero,12988 <OSFlagNameGet+0x90>
        *perr = OS_ERR_NAME_GET_ISR;
   12974:	e0bfff17 	ldw	r2,-4(fp)
   12978:	00c00444 	movi	r3,17
   1297c:	10c00005 	stb	r3,0(r2)
        return (0);
   12980:	0005883a 	mov	r2,zero
   12984:	00002306 	br	12a14 <OSFlagNameGet+0x11c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   12988:	0005303a 	rdctl	r2,status
   1298c:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   12990:	e0fffa17 	ldw	r3,-24(fp)
   12994:	00bfff84 	movi	r2,-2
   12998:	1884703a 	and	r2,r3,r2
   1299c:	1001703a 	wrctl	status,r2
  
  return context;
   129a0:	e0bffa17 	ldw	r2,-24(fp)
    }
    OS_ENTER_CRITICAL();
   129a4:	e0bff815 	stw	r2,-32(fp)
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {
   129a8:	e0bffd17 	ldw	r2,-12(fp)
   129ac:	10800003 	ldbu	r2,0(r2)
   129b0:	10803fcc 	andi	r2,r2,255
   129b4:	10800160 	cmpeqi	r2,r2,5
   129b8:	1000091e 	bne	r2,zero,129e0 <OSFlagNameGet+0xe8>
   129bc:	e0bff817 	ldw	r2,-32(fp)
   129c0:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   129c4:	e0bffb17 	ldw	r2,-20(fp)
   129c8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_EVENT_TYPE;
   129cc:	e0bfff17 	ldw	r2,-4(fp)
   129d0:	00c00044 	movi	r3,1
   129d4:	10c00005 	stb	r3,0(r2)
        return (0);
   129d8:	0005883a 	mov	r2,zero
   129dc:	00000d06 	br	12a14 <OSFlagNameGet+0x11c>
    }
    len   = OS_StrCopy(pname, pgrp->OSFlagName); /* Copy name from OS_FLAG_GRP                         */
   129e0:	e0bffd17 	ldw	r2,-12(fp)
   129e4:	10800284 	addi	r2,r2,10
   129e8:	e13ffe17 	ldw	r4,-8(fp)
   129ec:	100b883a 	mov	r5,r2
   129f0:	0011b300 	call	11b30 <OS_StrCopy>
   129f4:	e0bff905 	stb	r2,-28(fp)
   129f8:	e0bff817 	ldw	r2,-32(fp)
   129fc:	e0bffc15 	stw	r2,-16(fp)
   12a00:	e0bffc17 	ldw	r2,-16(fp)
   12a04:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
   12a08:	e0bfff17 	ldw	r2,-4(fp)
   12a0c:	10000005 	stb	zero,0(r2)
    return (len);
   12a10:	e0bff903 	ldbu	r2,-28(fp)
}
   12a14:	e037883a 	mov	sp,fp
   12a18:	dfc00117 	ldw	ra,4(sp)
   12a1c:	df000017 	ldw	fp,0(sp)
   12a20:	dec00204 	addi	sp,sp,8
   12a24:	f800283a 	ret

00012a28 <OSFlagNameSet>:
*********************************************************************************************************
*/

#if OS_FLAG_NAME_SIZE > 1
void  OSFlagNameSet (OS_FLAG_GRP *pgrp, INT8U *pname, INT8U *perr)
{
   12a28:	defff504 	addi	sp,sp,-44
   12a2c:	dfc00a15 	stw	ra,40(sp)
   12a30:	df000915 	stw	fp,36(sp)
   12a34:	df000904 	addi	fp,sp,36
   12a38:	e13ffd15 	stw	r4,-12(fp)
   12a3c:	e17ffe15 	stw	r5,-8(fp)
   12a40:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   12a44:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
   12a48:	e0bfff17 	ldw	r2,-4(fp)
   12a4c:	1000011e 	bne	r2,zero,12a54 <OSFlagNameSet+0x2c>
        return;
   12a50:	00004406 	br	12b64 <OSFlagNameSet+0x13c>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {              /* Is 'pgrp' a NULL pointer?                          */
   12a54:	e0bffd17 	ldw	r2,-12(fp)
   12a58:	1000041e 	bne	r2,zero,12a6c <OSFlagNameSet+0x44>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
   12a5c:	e0bfff17 	ldw	r2,-4(fp)
   12a60:	00c01b84 	movi	r3,110
   12a64:	10c00005 	stb	r3,0(r2)
        return;
   12a68:	00003e06 	br	12b64 <OSFlagNameSet+0x13c>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
   12a6c:	e0bffe17 	ldw	r2,-8(fp)
   12a70:	1000041e 	bne	r2,zero,12a84 <OSFlagNameSet+0x5c>
        *perr = OS_ERR_PNAME_NULL;
   12a74:	e0bfff17 	ldw	r2,-4(fp)
   12a78:	00c00304 	movi	r3,12
   12a7c:	10c00005 	stb	r3,0(r2)
        return;
   12a80:	00003806 	br	12b64 <OSFlagNameSet+0x13c>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
   12a84:	008000b4 	movhi	r2,2
   12a88:	10836404 	addi	r2,r2,3472
   12a8c:	10800003 	ldbu	r2,0(r2)
   12a90:	10803fcc 	andi	r2,r2,255
   12a94:	10000426 	beq	r2,zero,12aa8 <OSFlagNameSet+0x80>
        *perr = OS_ERR_NAME_SET_ISR;
   12a98:	e0bfff17 	ldw	r2,-4(fp)
   12a9c:	00c00484 	movi	r3,18
   12aa0:	10c00005 	stb	r3,0(r2)
        return;
   12aa4:	00002f06 	br	12b64 <OSFlagNameSet+0x13c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   12aa8:	0005303a 	rdctl	r2,status
   12aac:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   12ab0:	e0fff917 	ldw	r3,-28(fp)
   12ab4:	00bfff84 	movi	r2,-2
   12ab8:	1884703a 	and	r2,r3,r2
   12abc:	1001703a 	wrctl	status,r2
  
  return context;
   12ac0:	e0bff917 	ldw	r2,-28(fp)
    }
    OS_ENTER_CRITICAL();
   12ac4:	e0bff715 	stw	r2,-36(fp)
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {
   12ac8:	e0bffd17 	ldw	r2,-12(fp)
   12acc:	10800003 	ldbu	r2,0(r2)
   12ad0:	10803fcc 	andi	r2,r2,255
   12ad4:	10800160 	cmpeqi	r2,r2,5
   12ad8:	1000081e 	bne	r2,zero,12afc <OSFlagNameSet+0xd4>
   12adc:	e0bff717 	ldw	r2,-36(fp)
   12ae0:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   12ae4:	e0bffa17 	ldw	r2,-24(fp)
   12ae8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_EVENT_TYPE;
   12aec:	e0bfff17 	ldw	r2,-4(fp)
   12af0:	00c00044 	movi	r3,1
   12af4:	10c00005 	stb	r3,0(r2)
        return;
   12af8:	00001a06 	br	12b64 <OSFlagNameSet+0x13c>
    }
    len = OS_StrLen(pname);                      /* Can we fit the string in the storage area?         */
   12afc:	e13ffe17 	ldw	r4,-8(fp)
   12b00:	0011ba40 	call	11ba4 <OS_StrLen>
   12b04:	e0bff805 	stb	r2,-32(fp)
    if (len > (OS_FLAG_NAME_SIZE - 1)) {         /* No                                                 */
   12b08:	e0bff803 	ldbu	r2,-32(fp)
   12b0c:	10800830 	cmpltui	r2,r2,32
   12b10:	1000081e 	bne	r2,zero,12b34 <OSFlagNameSet+0x10c>
   12b14:	e0bff717 	ldw	r2,-36(fp)
   12b18:	e0bffb15 	stw	r2,-20(fp)
   12b1c:	e0bffb17 	ldw	r2,-20(fp)
   12b20:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_FLAG_NAME_TOO_LONG;
   12b24:	e0bfff17 	ldw	r2,-4(fp)
   12b28:	00c01cc4 	movi	r3,115
   12b2c:	10c00005 	stb	r3,0(r2)
        return;
   12b30:	00000c06 	br	12b64 <OSFlagNameSet+0x13c>
    }
    (void)OS_StrCopy(pgrp->OSFlagName, pname);   /* Yes, copy name from OS_FLAG_GRP                    */
   12b34:	e0bffd17 	ldw	r2,-12(fp)
   12b38:	10800284 	addi	r2,r2,10
   12b3c:	1009883a 	mov	r4,r2
   12b40:	e17ffe17 	ldw	r5,-8(fp)
   12b44:	0011b300 	call	11b30 <OS_StrCopy>
   12b48:	e0bff717 	ldw	r2,-36(fp)
   12b4c:	e0bffc15 	stw	r2,-16(fp)
   12b50:	e0bffc17 	ldw	r2,-16(fp)
   12b54:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
   12b58:	e0bfff17 	ldw	r2,-4(fp)
   12b5c:	10000005 	stb	zero,0(r2)
    return;
   12b60:	0001883a 	nop
}
   12b64:	e037883a 	mov	sp,fp
   12b68:	dfc00117 	ldw	ra,4(sp)
   12b6c:	df000017 	ldw	fp,0(sp)
   12b70:	dec00204 	addi	sp,sp,8
   12b74:	f800283a 	ret

00012b78 <OSFlagPend>:
*                 event flags.
*********************************************************************************************************
*/

OS_FLAGS  OSFlagPend (OS_FLAG_GRP *pgrp, OS_FLAGS flags, INT8U wait_type, INT16U timeout, INT8U *perr)
{
   12b78:	deffe204 	addi	sp,sp,-120
   12b7c:	dfc01d15 	stw	ra,116(sp)
   12b80:	df001c15 	stw	fp,112(sp)
   12b84:	df001c04 	addi	fp,sp,112
   12b88:	e13ffc15 	stw	r4,-16(fp)
   12b8c:	2809883a 	mov	r4,r5
   12b90:	3007883a 	mov	r3,r6
   12b94:	3805883a 	mov	r2,r7
   12b98:	e13ffd0d 	sth	r4,-12(fp)
   12b9c:	e0fffe05 	stb	r3,-8(fp)
   12ba0:	e0bfff0d 	sth	r2,-4(fp)
    OS_FLAGS      flags_rdy;
    INT8U         result;
    INT8U         pend_stat;
    BOOLEAN       consume;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR     cpu_sr = 0;
   12ba4:	e03fe615 	stw	zero,-104(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
   12ba8:	e0800217 	ldw	r2,8(fp)
   12bac:	1000021e 	bne	r2,zero,12bb8 <OSFlagPend+0x40>
        return ((OS_FLAGS)0);
   12bb0:	0005883a 	mov	r2,zero
   12bb4:	00016706 	br	13154 <OSFlagPend+0x5dc>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {                        /* Validate 'pgrp'                          */
   12bb8:	e0bffc17 	ldw	r2,-16(fp)
   12bbc:	1000051e 	bne	r2,zero,12bd4 <OSFlagPend+0x5c>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
   12bc0:	e0800217 	ldw	r2,8(fp)
   12bc4:	00c01b84 	movi	r3,110
   12bc8:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
   12bcc:	0005883a 	mov	r2,zero
   12bd0:	00016006 	br	13154 <OSFlagPend+0x5dc>
    }
#endif
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
   12bd4:	008000b4 	movhi	r2,2
   12bd8:	10836404 	addi	r2,r2,3472
   12bdc:	10800003 	ldbu	r2,0(r2)
   12be0:	10803fcc 	andi	r2,r2,255
   12be4:	10000526 	beq	r2,zero,12bfc <OSFlagPend+0x84>
        *perr = OS_ERR_PEND_ISR;                           /* ... can't PEND from an ISR               */
   12be8:	e0800217 	ldw	r2,8(fp)
   12bec:	00c00084 	movi	r3,2
   12bf0:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
   12bf4:	0005883a 	mov	r2,zero
   12bf8:	00015606 	br	13154 <OSFlagPend+0x5dc>
    }
    if (OSLockNesting > 0) {                               /* See if called with scheduler locked ...  */
   12bfc:	008000b4 	movhi	r2,2
   12c00:	10835604 	addi	r2,r2,3416
   12c04:	10800003 	ldbu	r2,0(r2)
   12c08:	10803fcc 	andi	r2,r2,255
   12c0c:	10000526 	beq	r2,zero,12c24 <OSFlagPend+0xac>
        *perr = OS_ERR_PEND_LOCKED;                        /* ... can't PEND when locked               */
   12c10:	e0800217 	ldw	r2,8(fp)
   12c14:	00c00344 	movi	r3,13
   12c18:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
   12c1c:	0005883a 	mov	r2,zero
   12c20:	00014c06 	br	13154 <OSFlagPend+0x5dc>
    }
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {          /* Validate event block type                */
   12c24:	e0bffc17 	ldw	r2,-16(fp)
   12c28:	10800003 	ldbu	r2,0(r2)
   12c2c:	10803fcc 	andi	r2,r2,255
   12c30:	10800160 	cmpeqi	r2,r2,5
   12c34:	1000051e 	bne	r2,zero,12c4c <OSFlagPend+0xd4>
        *perr = OS_ERR_EVENT_TYPE;
   12c38:	e0800217 	ldw	r2,8(fp)
   12c3c:	00c00044 	movi	r3,1
   12c40:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
   12c44:	0005883a 	mov	r2,zero
   12c48:	00014206 	br	13154 <OSFlagPend+0x5dc>
    }
    result = (INT8U)(wait_type & OS_FLAG_CONSUME);
   12c4c:	e0fffe03 	ldbu	r3,-8(fp)
   12c50:	00bfe004 	movi	r2,-128
   12c54:	1884703a 	and	r2,r3,r2
   12c58:	e0bfe705 	stb	r2,-100(fp)
    if (result != (INT8U)0) {                             /* See if we need to consume the flags      */
   12c5c:	e0bfe703 	ldbu	r2,-100(fp)
   12c60:	10000626 	beq	r2,zero,12c7c <OSFlagPend+0x104>
        wait_type &= ~(INT8U)OS_FLAG_CONSUME;
   12c64:	e0bffe03 	ldbu	r2,-8(fp)
   12c68:	10801fcc 	andi	r2,r2,127
   12c6c:	e0bffe05 	stb	r2,-8(fp)
        consume    = OS_TRUE;
   12c70:	00800044 	movi	r2,1
   12c74:	e0bfe505 	stb	r2,-108(fp)
   12c78:	00000106 	br	12c80 <OSFlagPend+0x108>
    } else {
        consume    = OS_FALSE;
   12c7c:	e03fe505 	stb	zero,-108(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   12c80:	0005303a 	rdctl	r2,status
   12c84:	e0bfe915 	stw	r2,-92(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   12c88:	e0ffe917 	ldw	r3,-92(fp)
   12c8c:	00bfff84 	movi	r2,-2
   12c90:	1884703a 	and	r2,r3,r2
   12c94:	1001703a 	wrctl	status,r2
  
  return context;
   12c98:	e0bfe917 	ldw	r2,-92(fp)
    }
/*$PAGE*/
    OS_ENTER_CRITICAL();
   12c9c:	e0bfe615 	stw	r2,-104(fp)
    switch (wait_type) {
   12ca0:	e0bffe03 	ldbu	r2,-8(fp)
   12ca4:	10c00060 	cmpeqi	r3,r2,1
   12ca8:	1800921e 	bne	r3,zero,12ef4 <OSFlagPend+0x37c>
   12cac:	10c00088 	cmpgei	r3,r2,2
   12cb0:	1800021e 	bne	r3,zero,12cbc <OSFlagPend+0x144>
   12cb4:	10006126 	beq	r2,zero,12e3c <OSFlagPend+0x2c4>
   12cb8:	0000bb06 	br	12fa8 <OSFlagPend+0x430>
   12cbc:	10c000a0 	cmpeqi	r3,r2,2
   12cc0:	1800031e 	bne	r3,zero,12cd0 <OSFlagPend+0x158>
   12cc4:	108000e0 	cmpeqi	r2,r2,3
   12cc8:	10002f1e 	bne	r2,zero,12d88 <OSFlagPend+0x210>
   12ccc:	0000b606 	br	12fa8 <OSFlagPend+0x430>
        case OS_FLAG_WAIT_SET_ALL:                         /* See if all required flags are set        */
             flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);   /* Extract only the bits we want     */
   12cd0:	e0bffc17 	ldw	r2,-16(fp)
   12cd4:	10c0020b 	ldhu	r3,8(r2)
   12cd8:	e0bffd0b 	ldhu	r2,-12(fp)
   12cdc:	1884703a 	and	r2,r3,r2
   12ce0:	e0bfe78d 	sth	r2,-98(fp)
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
   12ce4:	e0ffe78b 	ldhu	r3,-98(fp)
   12ce8:	e0bffd0b 	ldhu	r2,-12(fp)
   12cec:	1880191e 	bne	r3,r2,12d54 <OSFlagPend+0x1dc>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
   12cf0:	e0bfe503 	ldbu	r2,-108(fp)
   12cf4:	10800058 	cmpnei	r2,r2,1
   12cf8:	1000091e 	bne	r2,zero,12d20 <OSFlagPend+0x1a8>
                     pgrp->OSFlagFlags &= ~flags_rdy;      /* Clear ONLY the flags that we wanted      */
   12cfc:	e0bffc17 	ldw	r2,-16(fp)
   12d00:	1080020b 	ldhu	r2,8(r2)
   12d04:	1007883a 	mov	r3,r2
   12d08:	e0bfe78b 	ldhu	r2,-98(fp)
   12d0c:	0084303a 	nor	r2,zero,r2
   12d10:	1884703a 	and	r2,r3,r2
   12d14:	1007883a 	mov	r3,r2
   12d18:	e0bffc17 	ldw	r2,-16(fp)
   12d1c:	10c0020d 	sth	r3,8(r2)
                 }
                 OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
   12d20:	008000b4 	movhi	r2,2
   12d24:	10836504 	addi	r2,r2,3476
   12d28:	10800017 	ldw	r2,0(r2)
   12d2c:	e0ffe78b 	ldhu	r3,-98(fp)
   12d30:	10c00b0d 	sth	r3,44(r2)
   12d34:	e0bfe617 	ldw	r2,-104(fp)
   12d38:	e0bfea15 	stw	r2,-88(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   12d3c:	e0bfea17 	ldw	r2,-88(fp)
   12d40:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
                 *perr                   = OS_ERR_NONE;
   12d44:	e0800217 	ldw	r2,8(fp)
   12d48:	10000005 	stb	zero,0(r2)
                 return (flags_rdy);
   12d4c:	e0bfe78b 	ldhu	r2,-98(fp)
   12d50:	00010006 	br	13154 <OSFlagPend+0x5dc>
             } else {                                      /* Block task until events occur or timeout */
                 OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
   12d54:	e1bffd0b 	ldhu	r6,-12(fp)
   12d58:	e0fffe03 	ldbu	r3,-8(fp)
   12d5c:	e0bfff0b 	ldhu	r2,-4(fp)
   12d60:	e17ff704 	addi	r5,fp,-36
   12d64:	d8800015 	stw	r2,0(sp)
   12d68:	e13ffc17 	ldw	r4,-16(fp)
   12d6c:	180f883a 	mov	r7,r3
   12d70:	001361c0 	call	1361c <OS_FlagBlock>
   12d74:	e0bfe617 	ldw	r2,-104(fp)
   12d78:	e0bfeb15 	stw	r2,-84(fp)
   12d7c:	e0bfeb17 	ldw	r2,-84(fp)
   12d80:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
             }
             break;
   12d84:	00009206 	br	12fd0 <OSFlagPend+0x458>

        case OS_FLAG_WAIT_SET_ANY:
             flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);    /* Extract only the bits we want    */
   12d88:	e0bffc17 	ldw	r2,-16(fp)
   12d8c:	10c0020b 	ldhu	r3,8(r2)
   12d90:	e0bffd0b 	ldhu	r2,-12(fp)
   12d94:	1884703a 	and	r2,r3,r2
   12d98:	e0bfe78d 	sth	r2,-98(fp)
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag set                      */
   12d9c:	e0bfe78b 	ldhu	r2,-98(fp)
   12da0:	10001926 	beq	r2,zero,12e08 <OSFlagPend+0x290>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
   12da4:	e0bfe503 	ldbu	r2,-108(fp)
   12da8:	10800058 	cmpnei	r2,r2,1
   12dac:	1000091e 	bne	r2,zero,12dd4 <OSFlagPend+0x25c>
                     pgrp->OSFlagFlags &= ~flags_rdy;      /* Clear ONLY the flags that we got         */
   12db0:	e0bffc17 	ldw	r2,-16(fp)
   12db4:	1080020b 	ldhu	r2,8(r2)
   12db8:	1007883a 	mov	r3,r2
   12dbc:	e0bfe78b 	ldhu	r2,-98(fp)
   12dc0:	0084303a 	nor	r2,zero,r2
   12dc4:	1884703a 	and	r2,r3,r2
   12dc8:	1007883a 	mov	r3,r2
   12dcc:	e0bffc17 	ldw	r2,-16(fp)
   12dd0:	10c0020d 	sth	r3,8(r2)
                 }
                 OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
   12dd4:	008000b4 	movhi	r2,2
   12dd8:	10836504 	addi	r2,r2,3476
   12ddc:	10800017 	ldw	r2,0(r2)
   12de0:	e0ffe78b 	ldhu	r3,-98(fp)
   12de4:	10c00b0d 	sth	r3,44(r2)
   12de8:	e0bfe617 	ldw	r2,-104(fp)
   12dec:	e0bfec15 	stw	r2,-80(fp)
   12df0:	e0bfec17 	ldw	r2,-80(fp)
   12df4:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
                 *perr                   = OS_ERR_NONE;
   12df8:	e0800217 	ldw	r2,8(fp)
   12dfc:	10000005 	stb	zero,0(r2)
                 return (flags_rdy);
   12e00:	e0bfe78b 	ldhu	r2,-98(fp)
   12e04:	0000d306 	br	13154 <OSFlagPend+0x5dc>
             } else {                                      /* Block task until events occur or timeout */
                 OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
   12e08:	e1bffd0b 	ldhu	r6,-12(fp)
   12e0c:	e0fffe03 	ldbu	r3,-8(fp)
   12e10:	e0bfff0b 	ldhu	r2,-4(fp)
   12e14:	e17ff704 	addi	r5,fp,-36
   12e18:	d8800015 	stw	r2,0(sp)
   12e1c:	e13ffc17 	ldw	r4,-16(fp)
   12e20:	180f883a 	mov	r7,r3
   12e24:	001361c0 	call	1361c <OS_FlagBlock>
   12e28:	e0bfe617 	ldw	r2,-104(fp)
   12e2c:	e0bfed15 	stw	r2,-76(fp)
   12e30:	e0bfed17 	ldw	r2,-76(fp)
   12e34:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
             }
             break;
   12e38:	00006506 	br	12fd0 <OSFlagPend+0x458>

#if OS_FLAG_WAIT_CLR_EN > 0
        case OS_FLAG_WAIT_CLR_ALL:                         /* See if all required flags are cleared    */
             flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags);  /* Extract only the bits we want     */
   12e3c:	e0bffc17 	ldw	r2,-16(fp)
   12e40:	1080020b 	ldhu	r2,8(r2)
   12e44:	0084303a 	nor	r2,zero,r2
   12e48:	1007883a 	mov	r3,r2
   12e4c:	e0bffd0b 	ldhu	r2,-12(fp)
   12e50:	1884703a 	and	r2,r3,r2
   12e54:	e0bfe78d 	sth	r2,-98(fp)
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
   12e58:	e0ffe78b 	ldhu	r3,-98(fp)
   12e5c:	e0bffd0b 	ldhu	r2,-12(fp)
   12e60:	1880171e 	bne	r3,r2,12ec0 <OSFlagPend+0x348>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
   12e64:	e0bfe503 	ldbu	r2,-108(fp)
   12e68:	10800058 	cmpnei	r2,r2,1
   12e6c:	1000071e 	bne	r2,zero,12e8c <OSFlagPend+0x314>
                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we wanted        */
   12e70:	e0bffc17 	ldw	r2,-16(fp)
   12e74:	10c0020b 	ldhu	r3,8(r2)
   12e78:	e0bfe78b 	ldhu	r2,-98(fp)
   12e7c:	1884b03a 	or	r2,r3,r2
   12e80:	1007883a 	mov	r3,r2
   12e84:	e0bffc17 	ldw	r2,-16(fp)
   12e88:	10c0020d 	sth	r3,8(r2)
                 }
                 OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
   12e8c:	008000b4 	movhi	r2,2
   12e90:	10836504 	addi	r2,r2,3476
   12e94:	10800017 	ldw	r2,0(r2)
   12e98:	e0ffe78b 	ldhu	r3,-98(fp)
   12e9c:	10c00b0d 	sth	r3,44(r2)
   12ea0:	e0bfe617 	ldw	r2,-104(fp)
   12ea4:	e0bfee15 	stw	r2,-72(fp)
   12ea8:	e0bfee17 	ldw	r2,-72(fp)
   12eac:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
                 *perr                   = OS_ERR_NONE;
   12eb0:	e0800217 	ldw	r2,8(fp)
   12eb4:	10000005 	stb	zero,0(r2)
                 return (flags_rdy);
   12eb8:	e0bfe78b 	ldhu	r2,-98(fp)
   12ebc:	0000a506 	br	13154 <OSFlagPend+0x5dc>
             } else {                                      /* Block task until events occur or timeout */
                 OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
   12ec0:	e1bffd0b 	ldhu	r6,-12(fp)
   12ec4:	e0fffe03 	ldbu	r3,-8(fp)
   12ec8:	e0bfff0b 	ldhu	r2,-4(fp)
   12ecc:	e17ff704 	addi	r5,fp,-36
   12ed0:	d8800015 	stw	r2,0(sp)
   12ed4:	e13ffc17 	ldw	r4,-16(fp)
   12ed8:	180f883a 	mov	r7,r3
   12edc:	001361c0 	call	1361c <OS_FlagBlock>
   12ee0:	e0bfe617 	ldw	r2,-104(fp)
   12ee4:	e0bfef15 	stw	r2,-68(fp)
   12ee8:	e0bfef17 	ldw	r2,-68(fp)
   12eec:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
             }
             break;
   12ef0:	00003706 	br	12fd0 <OSFlagPend+0x458>

        case OS_FLAG_WAIT_CLR_ANY:
             flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags); /* Extract only the bits we want      */
   12ef4:	e0bffc17 	ldw	r2,-16(fp)
   12ef8:	1080020b 	ldhu	r2,8(r2)
   12efc:	0084303a 	nor	r2,zero,r2
   12f00:	1007883a 	mov	r3,r2
   12f04:	e0bffd0b 	ldhu	r2,-12(fp)
   12f08:	1884703a 	and	r2,r3,r2
   12f0c:	e0bfe78d 	sth	r2,-98(fp)
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag cleared                  */
   12f10:	e0bfe78b 	ldhu	r2,-98(fp)
   12f14:	10001726 	beq	r2,zero,12f74 <OSFlagPend+0x3fc>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
   12f18:	e0bfe503 	ldbu	r2,-108(fp)
   12f1c:	10800058 	cmpnei	r2,r2,1
   12f20:	1000071e 	bne	r2,zero,12f40 <OSFlagPend+0x3c8>
                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we got           */
   12f24:	e0bffc17 	ldw	r2,-16(fp)
   12f28:	10c0020b 	ldhu	r3,8(r2)
   12f2c:	e0bfe78b 	ldhu	r2,-98(fp)
   12f30:	1884b03a 	or	r2,r3,r2
   12f34:	1007883a 	mov	r3,r2
   12f38:	e0bffc17 	ldw	r2,-16(fp)
   12f3c:	10c0020d 	sth	r3,8(r2)
                 }
                 OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
   12f40:	008000b4 	movhi	r2,2
   12f44:	10836504 	addi	r2,r2,3476
   12f48:	10800017 	ldw	r2,0(r2)
   12f4c:	e0ffe78b 	ldhu	r3,-98(fp)
   12f50:	10c00b0d 	sth	r3,44(r2)
   12f54:	e0bfe617 	ldw	r2,-104(fp)
   12f58:	e0bff015 	stw	r2,-64(fp)
   12f5c:	e0bff017 	ldw	r2,-64(fp)
   12f60:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
                 *perr                   = OS_ERR_NONE;
   12f64:	e0800217 	ldw	r2,8(fp)
   12f68:	10000005 	stb	zero,0(r2)
                 return (flags_rdy);
   12f6c:	e0bfe78b 	ldhu	r2,-98(fp)
   12f70:	00007806 	br	13154 <OSFlagPend+0x5dc>
             } else {                                      /* Block task until events occur or timeout */
                 OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
   12f74:	e1bffd0b 	ldhu	r6,-12(fp)
   12f78:	e0fffe03 	ldbu	r3,-8(fp)
   12f7c:	e0bfff0b 	ldhu	r2,-4(fp)
   12f80:	e17ff704 	addi	r5,fp,-36
   12f84:	d8800015 	stw	r2,0(sp)
   12f88:	e13ffc17 	ldw	r4,-16(fp)
   12f8c:	180f883a 	mov	r7,r3
   12f90:	001361c0 	call	1361c <OS_FlagBlock>
   12f94:	e0bfe617 	ldw	r2,-104(fp)
   12f98:	e0bff115 	stw	r2,-60(fp)
   12f9c:	e0bff117 	ldw	r2,-60(fp)
   12fa0:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
             }
             break;
   12fa4:	00000a06 	br	12fd0 <OSFlagPend+0x458>
   12fa8:	e0bfe617 	ldw	r2,-104(fp)
   12fac:	e0bff215 	stw	r2,-56(fp)
   12fb0:	e0bff217 	ldw	r2,-56(fp)
   12fb4:	1001703a 	wrctl	status,r2
#endif

        default:
             OS_EXIT_CRITICAL();
             flags_rdy = (OS_FLAGS)0;
   12fb8:	e03fe78d 	sth	zero,-98(fp)
             *perr      = OS_ERR_FLAG_WAIT_TYPE;
   12fbc:	e0800217 	ldw	r2,8(fp)
   12fc0:	00c01bc4 	movi	r3,111
   12fc4:	10c00005 	stb	r3,0(r2)
             return (flags_rdy);
   12fc8:	e0bfe78b 	ldhu	r2,-98(fp)
   12fcc:	00006106 	br	13154 <OSFlagPend+0x5dc>
    }
/*$PAGE*/
    OS_Sched();                                            /* Find next HPT ready to run               */
   12fd0:	00119f40 	call	119f4 <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   12fd4:	0005303a 	rdctl	r2,status
   12fd8:	e0bff315 	stw	r2,-52(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   12fdc:	e0fff317 	ldw	r3,-52(fp)
   12fe0:	00bfff84 	movi	r2,-2
   12fe4:	1884703a 	and	r2,r3,r2
   12fe8:	1001703a 	wrctl	status,r2
  
  return context;
   12fec:	e0bff317 	ldw	r2,-52(fp)
    OS_ENTER_CRITICAL();
   12ff0:	e0bfe615 	stw	r2,-104(fp)
    if (OSTCBCur->OSTCBStatPend != OS_STAT_PEND_OK) {      /* Have we timed-out or aborted?            */
   12ff4:	008000b4 	movhi	r2,2
   12ff8:	10836504 	addi	r2,r2,3476
   12ffc:	10800017 	ldw	r2,0(r2)
   13000:	10800c43 	ldbu	r2,49(r2)
   13004:	10803fcc 	andi	r2,r2,255
   13008:	10002226 	beq	r2,zero,13094 <OSFlagPend+0x51c>
        pend_stat                = OSTCBCur->OSTCBStatPend;
   1300c:	008000b4 	movhi	r2,2
   13010:	10836504 	addi	r2,r2,3476
   13014:	10800017 	ldw	r2,0(r2)
   13018:	10800c43 	ldbu	r2,49(r2)
   1301c:	e0bfe805 	stb	r2,-96(fp)
        OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
   13020:	008000b4 	movhi	r2,2
   13024:	10836504 	addi	r2,r2,3476
   13028:	10800017 	ldw	r2,0(r2)
   1302c:	10000c45 	stb	zero,49(r2)
        OS_FlagUnlink(&node);
   13030:	e0bff704 	addi	r2,fp,-36
   13034:	1009883a 	mov	r4,r2
   13038:	00139d40 	call	139d4 <OS_FlagUnlink>
        OSTCBCur->OSTCBStat      = OS_STAT_RDY;            /* Yes, make task ready-to-run              */
   1303c:	008000b4 	movhi	r2,2
   13040:	10836504 	addi	r2,r2,3476
   13044:	10800017 	ldw	r2,0(r2)
   13048:	10000c05 	stb	zero,48(r2)
   1304c:	e0bfe617 	ldw	r2,-104(fp)
   13050:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   13054:	e0bff417 	ldw	r2,-48(fp)
   13058:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        flags_rdy                = (OS_FLAGS)0;
   1305c:	e03fe78d 	sth	zero,-98(fp)
        switch (pend_stat) {
   13060:	e0bfe803 	ldbu	r2,-96(fp)
   13064:	108000a0 	cmpeqi	r2,r2,2
   13068:	10000426 	beq	r2,zero,1307c <OSFlagPend+0x504>
            case OS_STAT_PEND_ABORT:
                 *perr = OS_ERR_PEND_ABORT;                 /* Indicate that we aborted   waiting       */
   1306c:	e0800217 	ldw	r2,8(fp)
   13070:	00c00384 	movi	r3,14
   13074:	10c00005 	stb	r3,0(r2)
                 break;
   13078:	00000406 	br	1308c <OSFlagPend+0x514>

            case OS_STAT_PEND_TO:
            default:
                 *perr = OS_ERR_TIMEOUT;                    /* Indicate that we timed-out waiting       */
   1307c:	e0800217 	ldw	r2,8(fp)
   13080:	00c00284 	movi	r3,10
   13084:	10c00005 	stb	r3,0(r2)
                 break;
   13088:	0001883a 	nop
        }
        return (flags_rdy);
   1308c:	e0bfe78b 	ldhu	r2,-98(fp)
   13090:	00003006 	br	13154 <OSFlagPend+0x5dc>
    }
    flags_rdy = OSTCBCur->OSTCBFlagsRdy;
   13094:	008000b4 	movhi	r2,2
   13098:	10836504 	addi	r2,r2,3476
   1309c:	10800017 	ldw	r2,0(r2)
   130a0:	10800b0b 	ldhu	r2,44(r2)
   130a4:	e0bfe78d 	sth	r2,-98(fp)
    if (consume == OS_TRUE) {                              /* See if we need to consume the flags      */
   130a8:	e0bfe503 	ldbu	r2,-108(fp)
   130ac:	10800058 	cmpnei	r2,r2,1
   130b0:	1000211e 	bne	r2,zero,13138 <OSFlagPend+0x5c0>
        switch (wait_type) {
   130b4:	e0bffe03 	ldbu	r2,-8(fp)
   130b8:	10001616 	blt	r2,zero,13114 <OSFlagPend+0x59c>
   130bc:	10c00090 	cmplti	r3,r2,2
   130c0:	18000c1e 	bne	r3,zero,130f4 <OSFlagPend+0x57c>
   130c4:	10800108 	cmpgei	r2,r2,4
   130c8:	1000121e 	bne	r2,zero,13114 <OSFlagPend+0x59c>
            case OS_FLAG_WAIT_SET_ALL:
            case OS_FLAG_WAIT_SET_ANY:                     /* Clear ONLY the flags we got              */
                 pgrp->OSFlagFlags &= ~flags_rdy;
   130cc:	e0bffc17 	ldw	r2,-16(fp)
   130d0:	1080020b 	ldhu	r2,8(r2)
   130d4:	1007883a 	mov	r3,r2
   130d8:	e0bfe78b 	ldhu	r2,-98(fp)
   130dc:	0084303a 	nor	r2,zero,r2
   130e0:	1884703a 	and	r2,r3,r2
   130e4:	1007883a 	mov	r3,r2
   130e8:	e0bffc17 	ldw	r2,-16(fp)
   130ec:	10c0020d 	sth	r3,8(r2)
                 break;
   130f0:	00001106 	br	13138 <OSFlagPend+0x5c0>

#if OS_FLAG_WAIT_CLR_EN > 0
            case OS_FLAG_WAIT_CLR_ALL:
            case OS_FLAG_WAIT_CLR_ANY:                     /* Set   ONLY the flags we got              */
                 pgrp->OSFlagFlags |=  flags_rdy;
   130f4:	e0bffc17 	ldw	r2,-16(fp)
   130f8:	10c0020b 	ldhu	r3,8(r2)
   130fc:	e0bfe78b 	ldhu	r2,-98(fp)
   13100:	1884b03a 	or	r2,r3,r2
   13104:	1007883a 	mov	r3,r2
   13108:	e0bffc17 	ldw	r2,-16(fp)
   1310c:	10c0020d 	sth	r3,8(r2)
                 break;
   13110:	00000906 	br	13138 <OSFlagPend+0x5c0>
   13114:	e0bfe617 	ldw	r2,-104(fp)
   13118:	e0bff515 	stw	r2,-44(fp)
   1311c:	e0bff517 	ldw	r2,-44(fp)
   13120:	1001703a 	wrctl	status,r2
#endif
            default:
                 OS_EXIT_CRITICAL();
                 *perr = OS_ERR_FLAG_WAIT_TYPE;
   13124:	e0800217 	ldw	r2,8(fp)
   13128:	00c01bc4 	movi	r3,111
   1312c:	10c00005 	stb	r3,0(r2)
                 return ((OS_FLAGS)0);
   13130:	0005883a 	mov	r2,zero
   13134:	00000706 	br	13154 <OSFlagPend+0x5dc>
   13138:	e0bfe617 	ldw	r2,-104(fp)
   1313c:	e0bff615 	stw	r2,-40(fp)
   13140:	e0bff617 	ldw	r2,-40(fp)
   13144:	1001703a 	wrctl	status,r2
        }
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;                                   /* Event(s) must have occurred              */
   13148:	e0800217 	ldw	r2,8(fp)
   1314c:	10000005 	stb	zero,0(r2)
    return (flags_rdy);
   13150:	e0bfe78b 	ldhu	r2,-98(fp)
}
   13154:	e037883a 	mov	sp,fp
   13158:	dfc00117 	ldw	ra,4(sp)
   1315c:	df000017 	ldw	fp,0(sp)
   13160:	dec00204 	addi	sp,sp,8
   13164:	f800283a 	ret

00013168 <OSFlagPendGetFlagsRdy>:
* Called from: Task ONLY
*********************************************************************************************************
*/

OS_FLAGS  OSFlagPendGetFlagsRdy (void)
{
   13168:	defffb04 	addi	sp,sp,-20
   1316c:	df000415 	stw	fp,16(sp)
   13170:	df000404 	addi	fp,sp,16
    OS_FLAGS      flags;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR     cpu_sr = 0;
   13174:	e03ffc15 	stw	zero,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   13178:	0005303a 	rdctl	r2,status
   1317c:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   13180:	e0fffe17 	ldw	r3,-8(fp)
   13184:	00bfff84 	movi	r2,-2
   13188:	1884703a 	and	r2,r3,r2
   1318c:	1001703a 	wrctl	status,r2
  
  return context;
   13190:	e0bffe17 	ldw	r2,-8(fp)
#endif



    OS_ENTER_CRITICAL();
   13194:	e0bffc15 	stw	r2,-16(fp)
    flags = OSTCBCur->OSTCBFlagsRdy;
   13198:	008000b4 	movhi	r2,2
   1319c:	10836504 	addi	r2,r2,3476
   131a0:	10800017 	ldw	r2,0(r2)
   131a4:	10800b0b 	ldhu	r2,44(r2)
   131a8:	e0bffd0d 	sth	r2,-12(fp)
   131ac:	e0bffc17 	ldw	r2,-16(fp)
   131b0:	e0bfff15 	stw	r2,-4(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   131b4:	e0bfff17 	ldw	r2,-4(fp)
   131b8:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (flags);
   131bc:	e0bffd0b 	ldhu	r2,-12(fp)
}
   131c0:	e037883a 	mov	sp,fp
   131c4:	df000017 	ldw	fp,0(sp)
   131c8:	dec00104 	addi	sp,sp,4
   131cc:	f800283a 	ret

000131d0 <OSFlagPost>:
*              2) The amount of time interrupts are DISABLED depends on the number of tasks waiting on
*                 the event flag group.
*********************************************************************************************************
*/
OS_FLAGS  OSFlagPost (OS_FLAG_GRP *pgrp, OS_FLAGS flags, INT8U opt, INT8U *perr)
{
   131d0:	deffef04 	addi	sp,sp,-68
   131d4:	dfc01015 	stw	ra,64(sp)
   131d8:	df000f15 	stw	fp,60(sp)
   131dc:	df000f04 	addi	fp,sp,60
   131e0:	e13ffc15 	stw	r4,-16(fp)
   131e4:	2807883a 	mov	r3,r5
   131e8:	3005883a 	mov	r2,r6
   131ec:	e1ffff15 	stw	r7,-4(fp)
   131f0:	e0fffd0d 	sth	r3,-12(fp)
   131f4:	e0bffe05 	stb	r2,-8(fp)
    BOOLEAN       sched;
    OS_FLAGS      flags_cur;
    OS_FLAGS      flags_rdy;
    BOOLEAN       rdy;
#if OS_CRITICAL_METHOD == 3                          /* Allocate storage for CPU status register       */
    OS_CPU_SR     cpu_sr = 0;
   131f8:	e03ff315 	stw	zero,-52(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                        /* Validate 'perr'                                */
   131fc:	e0bfff17 	ldw	r2,-4(fp)
   13200:	1000021e 	bne	r2,zero,1320c <OSFlagPost+0x3c>
        return ((OS_FLAGS)0);
   13204:	0005883a 	mov	r2,zero
   13208:	0000ce06 	br	13544 <OSFlagPost+0x374>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {                  /* Validate 'pgrp'                                */
   1320c:	e0bffc17 	ldw	r2,-16(fp)
   13210:	1000051e 	bne	r2,zero,13228 <OSFlagPost+0x58>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
   13214:	e0bfff17 	ldw	r2,-4(fp)
   13218:	00c01b84 	movi	r3,110
   1321c:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
   13220:	0005883a 	mov	r2,zero
   13224:	0000c706 	br	13544 <OSFlagPost+0x374>
    }
#endif
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {    /* Make sure we are pointing to an event flag grp */
   13228:	e0bffc17 	ldw	r2,-16(fp)
   1322c:	10800003 	ldbu	r2,0(r2)
   13230:	10803fcc 	andi	r2,r2,255
   13234:	10800160 	cmpeqi	r2,r2,5
   13238:	1000051e 	bne	r2,zero,13250 <OSFlagPost+0x80>
        *perr = OS_ERR_EVENT_TYPE;
   1323c:	e0bfff17 	ldw	r2,-4(fp)
   13240:	00c00044 	movi	r3,1
   13244:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
   13248:	0005883a 	mov	r2,zero
   1324c:	0000bd06 	br	13544 <OSFlagPost+0x374>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   13250:	0005303a 	rdctl	r2,status
   13254:	e0bff615 	stw	r2,-40(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   13258:	e0fff617 	ldw	r3,-40(fp)
   1325c:	00bfff84 	movi	r2,-2
   13260:	1884703a 	and	r2,r3,r2
   13264:	1001703a 	wrctl	status,r2
  
  return context;
   13268:	e0bff617 	ldw	r2,-40(fp)
    }
/*$PAGE*/
    OS_ENTER_CRITICAL();
   1326c:	e0bff315 	stw	r2,-52(fp)
    switch (opt) {
   13270:	e0bffe03 	ldbu	r2,-8(fp)
   13274:	10000326 	beq	r2,zero,13284 <OSFlagPost+0xb4>
   13278:	10800060 	cmpeqi	r2,r2,1
   1327c:	10000b1e 	bne	r2,zero,132ac <OSFlagPost+0xdc>
   13280:	00001206 	br	132cc <OSFlagPost+0xfc>
        case OS_FLAG_CLR:
             pgrp->OSFlagFlags &= ~flags;            /* Clear the flags specified in the group         */
   13284:	e0bffc17 	ldw	r2,-16(fp)
   13288:	1080020b 	ldhu	r2,8(r2)
   1328c:	1007883a 	mov	r3,r2
   13290:	e0bffd0b 	ldhu	r2,-12(fp)
   13294:	0084303a 	nor	r2,zero,r2
   13298:	1884703a 	and	r2,r3,r2
   1329c:	1007883a 	mov	r3,r2
   132a0:	e0bffc17 	ldw	r2,-16(fp)
   132a4:	10c0020d 	sth	r3,8(r2)
             break;
   132a8:	00001106 	br	132f0 <OSFlagPost+0x120>

        case OS_FLAG_SET:
             pgrp->OSFlagFlags |=  flags;            /* Set   the flags specified in the group         */
   132ac:	e0bffc17 	ldw	r2,-16(fp)
   132b0:	10c0020b 	ldhu	r3,8(r2)
   132b4:	e0bffd0b 	ldhu	r2,-12(fp)
   132b8:	1884b03a 	or	r2,r3,r2
   132bc:	1007883a 	mov	r3,r2
   132c0:	e0bffc17 	ldw	r2,-16(fp)
   132c4:	10c0020d 	sth	r3,8(r2)
             break;
   132c8:	00000906 	br	132f0 <OSFlagPost+0x120>
   132cc:	e0bff317 	ldw	r2,-52(fp)
   132d0:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   132d4:	e0bff717 	ldw	r2,-36(fp)
   132d8:	1001703a 	wrctl	status,r2

        default:
             OS_EXIT_CRITICAL();                     /* INVALID option                                 */
             *perr = OS_ERR_FLAG_INVALID_OPT;
   132dc:	e0bfff17 	ldw	r2,-4(fp)
   132e0:	00c01c44 	movi	r3,113
   132e4:	10c00005 	stb	r3,0(r2)
             return ((OS_FLAGS)0);
   132e8:	0005883a 	mov	r2,zero
   132ec:	00009506 	br	13544 <OSFlagPost+0x374>
    }
    sched = OS_FALSE;                                /* Indicate that we don't need rescheduling       */
   132f0:	e03ff205 	stb	zero,-56(fp)
    pnode = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
   132f4:	e0bffc17 	ldw	r2,-16(fp)
   132f8:	10800117 	ldw	r2,4(r2)
   132fc:	e0bff115 	stw	r2,-60(fp)
    while (pnode != (OS_FLAG_NODE *)0) {             /* Go through all tasks waiting on event flag(s)  */
   13300:	00007406 	br	134d4 <OSFlagPost+0x304>
        switch (pnode->OSFlagNodeWaitType) {
   13304:	e0bff117 	ldw	r2,-60(fp)
   13308:	10800483 	ldbu	r2,18(r2)
   1330c:	10803fcc 	andi	r2,r2,255
   13310:	10c00060 	cmpeqi	r3,r2,1
   13314:	18004d1e 	bne	r3,zero,1344c <OSFlagPost+0x27c>
   13318:	10c00088 	cmpgei	r3,r2,2
   1331c:	1800021e 	bne	r3,zero,13328 <OSFlagPost+0x158>
   13320:	10003126 	beq	r2,zero,133e8 <OSFlagPost+0x218>
   13324:	00005f06 	br	134a4 <OSFlagPost+0x2d4>
   13328:	10c000a0 	cmpeqi	r3,r2,2
   1332c:	1800031e 	bne	r3,zero,1333c <OSFlagPost+0x16c>
   13330:	108000e0 	cmpeqi	r2,r2,3
   13334:	1000181e 	bne	r2,zero,13398 <OSFlagPost+0x1c8>
   13338:	00005a06 	br	134a4 <OSFlagPost+0x2d4>
            case OS_FLAG_WAIT_SET_ALL:               /* See if all req. flags are set for current node */
                 flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
   1333c:	e0bffc17 	ldw	r2,-16(fp)
   13340:	10c0020b 	ldhu	r3,8(r2)
   13344:	e0bff117 	ldw	r2,-60(fp)
   13348:	1080040b 	ldhu	r2,16(r2)
   1334c:	1884703a 	and	r2,r3,r2
   13350:	e0bff40d 	sth	r2,-48(fp)
                 if (flags_rdy == pnode->OSFlagNodeFlags) {
   13354:	e0bff117 	ldw	r2,-60(fp)
   13358:	1080040b 	ldhu	r2,16(r2)
   1335c:	10ffffcc 	andi	r3,r2,65535
   13360:	e0bff40b 	ldhu	r2,-48(fp)
   13364:	18800b1e 	bne	r3,r2,13394 <OSFlagPost+0x1c4>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
   13368:	e0bff40b 	ldhu	r2,-48(fp)
   1336c:	e13ff117 	ldw	r4,-60(fp)
   13370:	100b883a 	mov	r5,r2
   13374:	00138c40 	call	138c4 <OS_FlagTaskRdy>
   13378:	e0bff485 	stb	r2,-46(fp)
                     if (rdy == OS_TRUE) {
   1337c:	e0bff483 	ldbu	r2,-46(fp)
   13380:	10800058 	cmpnei	r2,r2,1
   13384:	1000031e 	bne	r2,zero,13394 <OSFlagPost+0x1c4>
                         sched = OS_TRUE;                     /* When done we will reschedule          */
   13388:	00800044 	movi	r2,1
   1338c:	e0bff205 	stb	r2,-56(fp)
                     }
                 }
                 break;
   13390:	00004d06 	br	134c8 <OSFlagPost+0x2f8>
   13394:	00004c06 	br	134c8 <OSFlagPost+0x2f8>

            case OS_FLAG_WAIT_SET_ANY:               /* See if any flag set                            */
                 flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
   13398:	e0bffc17 	ldw	r2,-16(fp)
   1339c:	10c0020b 	ldhu	r3,8(r2)
   133a0:	e0bff117 	ldw	r2,-60(fp)
   133a4:	1080040b 	ldhu	r2,16(r2)
   133a8:	1884703a 	and	r2,r3,r2
   133ac:	e0bff40d 	sth	r2,-48(fp)
                 if (flags_rdy != (OS_FLAGS)0) {
   133b0:	e0bff40b 	ldhu	r2,-48(fp)
   133b4:	10000b26 	beq	r2,zero,133e4 <OSFlagPost+0x214>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
   133b8:	e0bff40b 	ldhu	r2,-48(fp)
   133bc:	e13ff117 	ldw	r4,-60(fp)
   133c0:	100b883a 	mov	r5,r2
   133c4:	00138c40 	call	138c4 <OS_FlagTaskRdy>
   133c8:	e0bff485 	stb	r2,-46(fp)
                     if (rdy == OS_TRUE) {
   133cc:	e0bff483 	ldbu	r2,-46(fp)
   133d0:	10800058 	cmpnei	r2,r2,1
   133d4:	1000031e 	bne	r2,zero,133e4 <OSFlagPost+0x214>
                         sched = OS_TRUE;                     /* When done we will reschedule          */
   133d8:	00800044 	movi	r2,1
   133dc:	e0bff205 	stb	r2,-56(fp)
                     }
                 }
                 break;
   133e0:	00003906 	br	134c8 <OSFlagPost+0x2f8>
   133e4:	00003806 	br	134c8 <OSFlagPost+0x2f8>

#if OS_FLAG_WAIT_CLR_EN > 0
            case OS_FLAG_WAIT_CLR_ALL:               /* See if all req. flags are set for current node */
                 flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
   133e8:	e0bffc17 	ldw	r2,-16(fp)
   133ec:	1080020b 	ldhu	r2,8(r2)
   133f0:	0084303a 	nor	r2,zero,r2
   133f4:	1007883a 	mov	r3,r2
   133f8:	e0bff117 	ldw	r2,-60(fp)
   133fc:	1080040b 	ldhu	r2,16(r2)
   13400:	1884703a 	and	r2,r3,r2
   13404:	e0bff40d 	sth	r2,-48(fp)
                 if (flags_rdy == pnode->OSFlagNodeFlags) {
   13408:	e0bff117 	ldw	r2,-60(fp)
   1340c:	1080040b 	ldhu	r2,16(r2)
   13410:	10ffffcc 	andi	r3,r2,65535
   13414:	e0bff40b 	ldhu	r2,-48(fp)
   13418:	18800b1e 	bne	r3,r2,13448 <OSFlagPost+0x278>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
   1341c:	e0bff40b 	ldhu	r2,-48(fp)
   13420:	e13ff117 	ldw	r4,-60(fp)
   13424:	100b883a 	mov	r5,r2
   13428:	00138c40 	call	138c4 <OS_FlagTaskRdy>
   1342c:	e0bff485 	stb	r2,-46(fp)
                     if (rdy == OS_TRUE) {
   13430:	e0bff483 	ldbu	r2,-46(fp)
   13434:	10800058 	cmpnei	r2,r2,1
   13438:	1000031e 	bne	r2,zero,13448 <OSFlagPost+0x278>
                         sched = OS_TRUE;                     /* When done we will reschedule          */
   1343c:	00800044 	movi	r2,1
   13440:	e0bff205 	stb	r2,-56(fp)
                     }
                 }
                 break;
   13444:	00002006 	br	134c8 <OSFlagPost+0x2f8>
   13448:	00001f06 	br	134c8 <OSFlagPost+0x2f8>

            case OS_FLAG_WAIT_CLR_ANY:               /* See if any flag set                            */
                 flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
   1344c:	e0bffc17 	ldw	r2,-16(fp)
   13450:	1080020b 	ldhu	r2,8(r2)
   13454:	0084303a 	nor	r2,zero,r2
   13458:	1007883a 	mov	r3,r2
   1345c:	e0bff117 	ldw	r2,-60(fp)
   13460:	1080040b 	ldhu	r2,16(r2)
   13464:	1884703a 	and	r2,r3,r2
   13468:	e0bff40d 	sth	r2,-48(fp)
                 if (flags_rdy != (OS_FLAGS)0) {
   1346c:	e0bff40b 	ldhu	r2,-48(fp)
   13470:	10000b26 	beq	r2,zero,134a0 <OSFlagPost+0x2d0>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
   13474:	e0bff40b 	ldhu	r2,-48(fp)
   13478:	e13ff117 	ldw	r4,-60(fp)
   1347c:	100b883a 	mov	r5,r2
   13480:	00138c40 	call	138c4 <OS_FlagTaskRdy>
   13484:	e0bff485 	stb	r2,-46(fp)
                     if (rdy == OS_TRUE) {
   13488:	e0bff483 	ldbu	r2,-46(fp)
   1348c:	10800058 	cmpnei	r2,r2,1
   13490:	1000031e 	bne	r2,zero,134a0 <OSFlagPost+0x2d0>
                         sched = OS_TRUE;                     /* When done we will reschedule          */
   13494:	00800044 	movi	r2,1
   13498:	e0bff205 	stb	r2,-56(fp)
                     }
                 }
                 break;
   1349c:	00000a06 	br	134c8 <OSFlagPost+0x2f8>
   134a0:	00000906 	br	134c8 <OSFlagPost+0x2f8>
   134a4:	e0bff317 	ldw	r2,-52(fp)
   134a8:	e0bff815 	stw	r2,-32(fp)
   134ac:	e0bff817 	ldw	r2,-32(fp)
   134b0:	1001703a 	wrctl	status,r2
#endif
            default:
                 OS_EXIT_CRITICAL();
                 *perr = OS_ERR_FLAG_WAIT_TYPE;
   134b4:	e0bfff17 	ldw	r2,-4(fp)
   134b8:	00c01bc4 	movi	r3,111
   134bc:	10c00005 	stb	r3,0(r2)
                 return ((OS_FLAGS)0);
   134c0:	0005883a 	mov	r2,zero
   134c4:	00001f06 	br	13544 <OSFlagPost+0x374>
        }
        pnode = (OS_FLAG_NODE *)pnode->OSFlagNodeNext; /* Point to next task waiting for event flag(s) */
   134c8:	e0bff117 	ldw	r2,-60(fp)
   134cc:	10800017 	ldw	r2,0(r2)
   134d0:	e0bff115 	stw	r2,-60(fp)
             *perr = OS_ERR_FLAG_INVALID_OPT;
             return ((OS_FLAGS)0);
    }
    sched = OS_FALSE;                                /* Indicate that we don't need rescheduling       */
    pnode = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
    while (pnode != (OS_FLAG_NODE *)0) {             /* Go through all tasks waiting on event flag(s)  */
   134d4:	e0bff117 	ldw	r2,-60(fp)
   134d8:	103f8a1e 	bne	r2,zero,13304 <__alt_mem_Flash_flash_data+0xf4013304>
   134dc:	e0bff317 	ldw	r2,-52(fp)
   134e0:	e0bff915 	stw	r2,-28(fp)
   134e4:	e0bff917 	ldw	r2,-28(fp)
   134e8:	1001703a 	wrctl	status,r2
                 return ((OS_FLAGS)0);
        }
        pnode = (OS_FLAG_NODE *)pnode->OSFlagNodeNext; /* Point to next task waiting for event flag(s) */
    }
    OS_EXIT_CRITICAL();
    if (sched == OS_TRUE) {
   134ec:	e0bff203 	ldbu	r2,-56(fp)
   134f0:	10800058 	cmpnei	r2,r2,1
   134f4:	1000011e 	bne	r2,zero,134fc <OSFlagPost+0x32c>
        OS_Sched();
   134f8:	00119f40 	call	119f4 <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   134fc:	0005303a 	rdctl	r2,status
   13500:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   13504:	e0fffa17 	ldw	r3,-24(fp)
   13508:	00bfff84 	movi	r2,-2
   1350c:	1884703a 	and	r2,r3,r2
   13510:	1001703a 	wrctl	status,r2
  
  return context;
   13514:	e0bffa17 	ldw	r2,-24(fp)
    }
    OS_ENTER_CRITICAL();
   13518:	e0bff315 	stw	r2,-52(fp)
    flags_cur = pgrp->OSFlagFlags;
   1351c:	e0bffc17 	ldw	r2,-16(fp)
   13520:	1080020b 	ldhu	r2,8(r2)
   13524:	e0bff50d 	sth	r2,-44(fp)
   13528:	e0bff317 	ldw	r2,-52(fp)
   1352c:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   13530:	e0bffb17 	ldw	r2,-20(fp)
   13534:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr     = OS_ERR_NONE;
   13538:	e0bfff17 	ldw	r2,-4(fp)
   1353c:	10000005 	stb	zero,0(r2)
    return (flags_cur);
   13540:	e0bff50b 	ldhu	r2,-44(fp)
}
   13544:	e037883a 	mov	sp,fp
   13548:	dfc00117 	ldw	ra,4(sp)
   1354c:	df000017 	ldw	fp,0(sp)
   13550:	dec00204 	addi	sp,sp,8
   13554:	f800283a 	ret

00013558 <OSFlagQuery>:
*********************************************************************************************************
*/

#if OS_FLAG_QUERY_EN > 0
OS_FLAGS  OSFlagQuery (OS_FLAG_GRP *pgrp, INT8U *perr)
{
   13558:	defff904 	addi	sp,sp,-28
   1355c:	df000615 	stw	fp,24(sp)
   13560:	df000604 	addi	fp,sp,24
   13564:	e13ffe15 	stw	r4,-8(fp)
   13568:	e17fff15 	stw	r5,-4(fp)
    OS_FLAGS   flags;
#if OS_CRITICAL_METHOD == 3                       /* Allocate storage for CPU status register          */
    OS_CPU_SR  cpu_sr = 0;
   1356c:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                     /* Validate 'perr'                                   */
   13570:	e0bfff17 	ldw	r2,-4(fp)
   13574:	1000021e 	bne	r2,zero,13580 <OSFlagQuery+0x28>
        return ((OS_FLAGS)0);
   13578:	0005883a 	mov	r2,zero
   1357c:	00002306 	br	1360c <OSFlagQuery+0xb4>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {               /* Validate 'pgrp'                                   */
   13580:	e0bffe17 	ldw	r2,-8(fp)
   13584:	1000051e 	bne	r2,zero,1359c <OSFlagQuery+0x44>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
   13588:	e0bfff17 	ldw	r2,-4(fp)
   1358c:	00c01b84 	movi	r3,110
   13590:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
   13594:	0005883a 	mov	r2,zero
   13598:	00001c06 	br	1360c <OSFlagQuery+0xb4>
    }
#endif
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) { /* Validate event block type                         */
   1359c:	e0bffe17 	ldw	r2,-8(fp)
   135a0:	10800003 	ldbu	r2,0(r2)
   135a4:	10803fcc 	andi	r2,r2,255
   135a8:	10800160 	cmpeqi	r2,r2,5
   135ac:	1000051e 	bne	r2,zero,135c4 <OSFlagQuery+0x6c>
        *perr = OS_ERR_EVENT_TYPE;
   135b0:	e0bfff17 	ldw	r2,-4(fp)
   135b4:	00c00044 	movi	r3,1
   135b8:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
   135bc:	0005883a 	mov	r2,zero
   135c0:	00001206 	br	1360c <OSFlagQuery+0xb4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   135c4:	0005303a 	rdctl	r2,status
   135c8:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   135cc:	e0fffc17 	ldw	r3,-16(fp)
   135d0:	00bfff84 	movi	r2,-2
   135d4:	1884703a 	and	r2,r3,r2
   135d8:	1001703a 	wrctl	status,r2
  
  return context;
   135dc:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
   135e0:	e0bffa15 	stw	r2,-24(fp)
    flags = pgrp->OSFlagFlags;
   135e4:	e0bffe17 	ldw	r2,-8(fp)
   135e8:	1080020b 	ldhu	r2,8(r2)
   135ec:	e0bffb0d 	sth	r2,-20(fp)
   135f0:	e0bffa17 	ldw	r2,-24(fp)
   135f4:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   135f8:	e0bffd17 	ldw	r2,-12(fp)
   135fc:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
   13600:	e0bfff17 	ldw	r2,-4(fp)
   13604:	10000005 	stb	zero,0(r2)
    return (flags);                               /* Return the current value of the event flags       */
   13608:	e0bffb0b 	ldhu	r2,-20(fp)
}
   1360c:	e037883a 	mov	sp,fp
   13610:	df000017 	ldw	fp,0(sp)
   13614:	dec00104 	addi	sp,sp,4
   13618:	f800283a 	ret

0001361c <OS_FlagBlock>:
* Note(s)    : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

static  void  OS_FlagBlock (OS_FLAG_GRP *pgrp, OS_FLAG_NODE *pnode, OS_FLAGS flags, INT8U wait_type, INT16U timeout)
{
   1361c:	defff804 	addi	sp,sp,-32
   13620:	df000715 	stw	fp,28(sp)
   13624:	df000704 	addi	fp,sp,28
   13628:	e13ffb15 	stw	r4,-20(fp)
   1362c:	e17ffc15 	stw	r5,-16(fp)
   13630:	3009883a 	mov	r4,r6
   13634:	3807883a 	mov	r3,r7
   13638:	e0800117 	ldw	r2,4(fp)
   1363c:	e13ffd0d 	sth	r4,-12(fp)
   13640:	e0fffe05 	stb	r3,-8(fp)
   13644:	e0bfff0d 	sth	r2,-4(fp)
    OS_FLAG_NODE  *pnode_next;
    INT8U          y;


    OSTCBCur->OSTCBStat      |= OS_STAT_FLAG;
   13648:	008000b4 	movhi	r2,2
   1364c:	10836504 	addi	r2,r2,3476
   13650:	10c00017 	ldw	r3,0(r2)
   13654:	008000b4 	movhi	r2,2
   13658:	10836504 	addi	r2,r2,3476
   1365c:	10800017 	ldw	r2,0(r2)
   13660:	10800c03 	ldbu	r2,48(r2)
   13664:	10800814 	ori	r2,r2,32
   13668:	18800c05 	stb	r2,48(r3)
    OSTCBCur->OSTCBStatPend   = OS_STAT_PEND_OK;
   1366c:	008000b4 	movhi	r2,2
   13670:	10836504 	addi	r2,r2,3476
   13674:	10800017 	ldw	r2,0(r2)
   13678:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBDly        = timeout;              /* Store timeout in task's TCB                   */
   1367c:	008000b4 	movhi	r2,2
   13680:	10836504 	addi	r2,r2,3476
   13684:	10800017 	ldw	r2,0(r2)
   13688:	e0ffff0b 	ldhu	r3,-4(fp)
   1368c:	10c00b8d 	sth	r3,46(r2)
#if OS_TASK_DEL_EN > 0
    OSTCBCur->OSTCBFlagNode   = pnode;                /* TCB to link to node                           */
   13690:	008000b4 	movhi	r2,2
   13694:	10836504 	addi	r2,r2,3476
   13698:	10800017 	ldw	r2,0(r2)
   1369c:	e0fffc17 	ldw	r3,-16(fp)
   136a0:	10c00a15 	stw	r3,40(r2)
#endif
    pnode->OSFlagNodeFlags    = flags;                /* Save the flags that we need to wait for       */
   136a4:	e0bffc17 	ldw	r2,-16(fp)
   136a8:	e0fffd0b 	ldhu	r3,-12(fp)
   136ac:	10c0040d 	sth	r3,16(r2)
    pnode->OSFlagNodeWaitType = wait_type;            /* Save the type of wait we are doing            */
   136b0:	e0bffc17 	ldw	r2,-16(fp)
   136b4:	e0fffe03 	ldbu	r3,-8(fp)
   136b8:	10c00485 	stb	r3,18(r2)
    pnode->OSFlagNodeTCB      = (void *)OSTCBCur;     /* Link to task's TCB                            */
   136bc:	008000b4 	movhi	r2,2
   136c0:	10836504 	addi	r2,r2,3476
   136c4:	10c00017 	ldw	r3,0(r2)
   136c8:	e0bffc17 	ldw	r2,-16(fp)
   136cc:	10c00215 	stw	r3,8(r2)
    pnode->OSFlagNodeNext     = pgrp->OSFlagWaitList; /* Add node at beginning of event flag wait list */
   136d0:	e0bffb17 	ldw	r2,-20(fp)
   136d4:	10c00117 	ldw	r3,4(r2)
   136d8:	e0bffc17 	ldw	r2,-16(fp)
   136dc:	10c00015 	stw	r3,0(r2)
    pnode->OSFlagNodePrev     = (void *)0;
   136e0:	e0bffc17 	ldw	r2,-16(fp)
   136e4:	10000115 	stw	zero,4(r2)
    pnode->OSFlagNodeFlagGrp  = (void *)pgrp;         /* Link to Event Flag Group                      */
   136e8:	e0bffc17 	ldw	r2,-16(fp)
   136ec:	e0fffb17 	ldw	r3,-20(fp)
   136f0:	10c00315 	stw	r3,12(r2)
    pnode_next                = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
   136f4:	e0bffb17 	ldw	r2,-20(fp)
   136f8:	10800117 	ldw	r2,4(r2)
   136fc:	e0bff915 	stw	r2,-28(fp)
    if (pnode_next != (void *)0) {                    /* Is this the first NODE to insert?             */
   13700:	e0bff917 	ldw	r2,-28(fp)
   13704:	10000326 	beq	r2,zero,13714 <OS_FlagBlock+0xf8>
        pnode_next->OSFlagNodePrev = pnode;           /* No, link in doubly linked list                */
   13708:	e0bff917 	ldw	r2,-28(fp)
   1370c:	e0fffc17 	ldw	r3,-16(fp)
   13710:	10c00115 	stw	r3,4(r2)
    }
    pgrp->OSFlagWaitList = (void *)pnode;
   13714:	e0bffb17 	ldw	r2,-20(fp)
   13718:	e0fffc17 	ldw	r3,-16(fp)
   1371c:	10c00115 	stw	r3,4(r2)

    y            =  OSTCBCur->OSTCBY;                 /* Suspend current task until flag(s) received   */
   13720:	008000b4 	movhi	r2,2
   13724:	10836504 	addi	r2,r2,3476
   13728:	10800017 	ldw	r2,0(r2)
   1372c:	10800d03 	ldbu	r2,52(r2)
   13730:	e0bffa05 	stb	r2,-24(fp)
    OSRdyTbl[y] &= ~OSTCBCur->OSTCBBitX;
   13734:	e0fffa03 	ldbu	r3,-24(fp)
   13738:	e13ffa03 	ldbu	r4,-24(fp)
   1373c:	008000b4 	movhi	r2,2
   13740:	10836244 	addi	r2,r2,3465
   13744:	1105883a 	add	r2,r2,r4
   13748:	10800003 	ldbu	r2,0(r2)
   1374c:	1009883a 	mov	r4,r2
   13750:	008000b4 	movhi	r2,2
   13754:	10836504 	addi	r2,r2,3476
   13758:	10800017 	ldw	r2,0(r2)
   1375c:	10800d43 	ldbu	r2,53(r2)
   13760:	0084303a 	nor	r2,zero,r2
   13764:	2084703a 	and	r2,r4,r2
   13768:	1009883a 	mov	r4,r2
   1376c:	008000b4 	movhi	r2,2
   13770:	10836244 	addi	r2,r2,3465
   13774:	10c5883a 	add	r2,r2,r3
   13778:	11000005 	stb	r4,0(r2)
    if (OSRdyTbl[y] == 0x00) {
   1377c:	e0fffa03 	ldbu	r3,-24(fp)
   13780:	008000b4 	movhi	r2,2
   13784:	10836244 	addi	r2,r2,3465
   13788:	10c5883a 	add	r2,r2,r3
   1378c:	10800003 	ldbu	r2,0(r2)
   13790:	10803fcc 	andi	r2,r2,255
   13794:	10000e1e 	bne	r2,zero,137d0 <OS_FlagBlock+0x1b4>
        OSRdyGrp &= ~OSTCBCur->OSTCBBitY;
   13798:	008000b4 	movhi	r2,2
   1379c:	10836504 	addi	r2,r2,3476
   137a0:	10800017 	ldw	r2,0(r2)
   137a4:	10800d83 	ldbu	r2,54(r2)
   137a8:	0084303a 	nor	r2,zero,r2
   137ac:	1007883a 	mov	r3,r2
   137b0:	008000b4 	movhi	r2,2
   137b4:	10836204 	addi	r2,r2,3464
   137b8:	10800003 	ldbu	r2,0(r2)
   137bc:	1884703a 	and	r2,r3,r2
   137c0:	1007883a 	mov	r3,r2
   137c4:	008000b4 	movhi	r2,2
   137c8:	10836204 	addi	r2,r2,3464
   137cc:	10c00005 	stb	r3,0(r2)
    }
}
   137d0:	e037883a 	mov	sp,fp
   137d4:	df000017 	ldw	fp,0(sp)
   137d8:	dec00104 	addi	sp,sp,4
   137dc:	f800283a 	ret

000137e0 <OS_FlagInit>:
* WARNING    : You MUST NOT call this function from your code.  This is an INTERNAL function to uC/OS-II.
*********************************************************************************************************
*/

void  OS_FlagInit (void)
{
   137e0:	defffb04 	addi	sp,sp,-20
   137e4:	dfc00415 	stw	ra,16(sp)
   137e8:	df000315 	stw	fp,12(sp)
   137ec:	df000304 	addi	fp,sp,12
    INT16U       i;
    OS_FLAG_GRP *pgrp1;
    OS_FLAG_GRP *pgrp2;


    OS_MemClr((INT8U *)&OSFlagTbl[0], sizeof(OSFlagTbl));           /* Clear the flag group table      */
   137f0:	010000f4 	movhi	r4,3
   137f4:	21356c04 	addi	r4,r4,-10832
   137f8:	0140dc04 	movi	r5,880
   137fc:	00119400 	call	11940 <OS_MemClr>
    pgrp1 = &OSFlagTbl[0];
   13800:	008000f4 	movhi	r2,3
   13804:	10b56c04 	addi	r2,r2,-10832
   13808:	e0bffe15 	stw	r2,-8(fp)
    pgrp2 = &OSFlagTbl[1];
   1380c:	008000f4 	movhi	r2,3
   13810:	10b57704 	addi	r2,r2,-10788
   13814:	e0bfff15 	stw	r2,-4(fp)
    for (i = 0; i < (OS_MAX_FLAGS - 1); i++) {                      /* Init. list of free EVENT FLAGS  */
   13818:	e03ffd0d 	sth	zero,-12(fp)
   1381c:	00001306 	br	1386c <OS_FlagInit+0x8c>
        pgrp1->OSFlagType     = OS_EVENT_TYPE_UNUSED;
   13820:	e0bffe17 	ldw	r2,-8(fp)
   13824:	10000005 	stb	zero,0(r2)
        pgrp1->OSFlagWaitList = (void *)pgrp2;
   13828:	e0bffe17 	ldw	r2,-8(fp)
   1382c:	e0ffff17 	ldw	r3,-4(fp)
   13830:	10c00115 	stw	r3,4(r2)
#if OS_FLAG_NAME_SIZE > 1
        pgrp1->OSFlagName[0]  = '?';                                /* Unknown name                    */
   13834:	e0bffe17 	ldw	r2,-8(fp)
   13838:	00c00fc4 	movi	r3,63
   1383c:	10c00285 	stb	r3,10(r2)
        pgrp1->OSFlagName[1]  = OS_ASCII_NUL;
   13840:	e0bffe17 	ldw	r2,-8(fp)
   13844:	100002c5 	stb	zero,11(r2)
#endif
        pgrp1++;
   13848:	e0bffe17 	ldw	r2,-8(fp)
   1384c:	10800b04 	addi	r2,r2,44
   13850:	e0bffe15 	stw	r2,-8(fp)
        pgrp2++;
   13854:	e0bfff17 	ldw	r2,-4(fp)
   13858:	10800b04 	addi	r2,r2,44
   1385c:	e0bfff15 	stw	r2,-4(fp)


    OS_MemClr((INT8U *)&OSFlagTbl[0], sizeof(OSFlagTbl));           /* Clear the flag group table      */
    pgrp1 = &OSFlagTbl[0];
    pgrp2 = &OSFlagTbl[1];
    for (i = 0; i < (OS_MAX_FLAGS - 1); i++) {                      /* Init. list of free EVENT FLAGS  */
   13860:	e0bffd0b 	ldhu	r2,-12(fp)
   13864:	10800044 	addi	r2,r2,1
   13868:	e0bffd0d 	sth	r2,-12(fp)
   1386c:	e0bffd0b 	ldhu	r2,-12(fp)
   13870:	108004f0 	cmpltui	r2,r2,19
   13874:	103fea1e 	bne	r2,zero,13820 <__alt_mem_Flash_flash_data+0xf4013820>
        pgrp1->OSFlagName[1]  = OS_ASCII_NUL;
#endif
        pgrp1++;
        pgrp2++;
    }
    pgrp1->OSFlagType     = OS_EVENT_TYPE_UNUSED;
   13878:	e0bffe17 	ldw	r2,-8(fp)
   1387c:	10000005 	stb	zero,0(r2)
    pgrp1->OSFlagWaitList = (void *)0;
   13880:	e0bffe17 	ldw	r2,-8(fp)
   13884:	10000115 	stw	zero,4(r2)
#if OS_FLAG_NAME_SIZE > 1
    pgrp1->OSFlagName[0]  = '?';                                    /* Unknown name                    */
   13888:	e0bffe17 	ldw	r2,-8(fp)
   1388c:	00c00fc4 	movi	r3,63
   13890:	10c00285 	stb	r3,10(r2)
    pgrp1->OSFlagName[1]  = OS_ASCII_NUL;
   13894:	e0bffe17 	ldw	r2,-8(fp)
   13898:	100002c5 	stb	zero,11(r2)
#endif
    OSFlagFreeList        = &OSFlagTbl[0];
   1389c:	008000b4 	movhi	r2,2
   138a0:	10836704 	addi	r2,r2,3484
   138a4:	00c000f4 	movhi	r3,3
   138a8:	18f56c04 	addi	r3,r3,-10832
   138ac:	10c00015 	stw	r3,0(r2)
#endif
}
   138b0:	e037883a 	mov	sp,fp
   138b4:	dfc00117 	ldw	ra,4(sp)
   138b8:	df000017 	ldw	fp,0(sp)
   138bc:	dec00204 	addi	sp,sp,8
   138c0:	f800283a 	ret

000138c4 <OS_FlagTaskRdy>:
*              2) This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

static  BOOLEAN  OS_FlagTaskRdy (OS_FLAG_NODE *pnode, OS_FLAGS flags_rdy)
{
   138c4:	defffa04 	addi	sp,sp,-24
   138c8:	dfc00515 	stw	ra,20(sp)
   138cc:	df000415 	stw	fp,16(sp)
   138d0:	df000404 	addi	fp,sp,16
   138d4:	e13ffe15 	stw	r4,-8(fp)
   138d8:	2805883a 	mov	r2,r5
   138dc:	e0bfff0d 	sth	r2,-4(fp)
    OS_TCB   *ptcb;
    BOOLEAN   sched;


    ptcb                 = (OS_TCB *)pnode->OSFlagNodeTCB; /* Point to TCB of waiting task             */
   138e0:	e0bffe17 	ldw	r2,-8(fp)
   138e4:	10800217 	ldw	r2,8(r2)
   138e8:	e0bffd15 	stw	r2,-12(fp)
    ptcb->OSTCBDly       = 0;
   138ec:	e0bffd17 	ldw	r2,-12(fp)
   138f0:	10000b8d 	sth	zero,46(r2)
    ptcb->OSTCBFlagsRdy  = flags_rdy;
   138f4:	e0bffd17 	ldw	r2,-12(fp)
   138f8:	e0ffff0b 	ldhu	r3,-4(fp)
   138fc:	10c00b0d 	sth	r3,44(r2)
    ptcb->OSTCBStat     &= ~(INT8U)OS_STAT_FLAG;
   13900:	e0bffd17 	ldw	r2,-12(fp)
   13904:	10c00c03 	ldbu	r3,48(r2)
   13908:	00bff7c4 	movi	r2,-33
   1390c:	1884703a 	and	r2,r3,r2
   13910:	1007883a 	mov	r3,r2
   13914:	e0bffd17 	ldw	r2,-12(fp)
   13918:	10c00c05 	stb	r3,48(r2)
    ptcb->OSTCBStatPend  = OS_STAT_PEND_OK;
   1391c:	e0bffd17 	ldw	r2,-12(fp)
   13920:	10000c45 	stb	zero,49(r2)
    if (ptcb->OSTCBStat == OS_STAT_RDY) {                  /* Task now ready?                          */
   13924:	e0bffd17 	ldw	r2,-12(fp)
   13928:	10800c03 	ldbu	r2,48(r2)
   1392c:	10803fcc 	andi	r2,r2,255
   13930:	10001f1e 	bne	r2,zero,139b0 <OS_FlagTaskRdy+0xec>
        OSRdyGrp               |= ptcb->OSTCBBitY;         /* Put task into ready list                 */
   13934:	e0bffd17 	ldw	r2,-12(fp)
   13938:	10c00d83 	ldbu	r3,54(r2)
   1393c:	008000b4 	movhi	r2,2
   13940:	10836204 	addi	r2,r2,3464
   13944:	10800003 	ldbu	r2,0(r2)
   13948:	1884b03a 	or	r2,r3,r2
   1394c:	1007883a 	mov	r3,r2
   13950:	008000b4 	movhi	r2,2
   13954:	10836204 	addi	r2,r2,3464
   13958:	10c00005 	stb	r3,0(r2)
        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
   1395c:	e0bffd17 	ldw	r2,-12(fp)
   13960:	10800d03 	ldbu	r2,52(r2)
   13964:	10c03fcc 	andi	r3,r2,255
   13968:	e0bffd17 	ldw	r2,-12(fp)
   1396c:	10800d03 	ldbu	r2,52(r2)
   13970:	11003fcc 	andi	r4,r2,255
   13974:	008000b4 	movhi	r2,2
   13978:	10836244 	addi	r2,r2,3465
   1397c:	1105883a 	add	r2,r2,r4
   13980:	11000003 	ldbu	r4,0(r2)
   13984:	e0bffd17 	ldw	r2,-12(fp)
   13988:	10800d43 	ldbu	r2,53(r2)
   1398c:	2084b03a 	or	r2,r4,r2
   13990:	1009883a 	mov	r4,r2
   13994:	008000b4 	movhi	r2,2
   13998:	10836244 	addi	r2,r2,3465
   1399c:	10c5883a 	add	r2,r2,r3
   139a0:	11000005 	stb	r4,0(r2)
        sched                   = OS_TRUE;
   139a4:	00800044 	movi	r2,1
   139a8:	e0bffc05 	stb	r2,-16(fp)
   139ac:	00000106 	br	139b4 <OS_FlagTaskRdy+0xf0>
    } else {
        sched                   = OS_FALSE;
   139b0:	e03ffc05 	stb	zero,-16(fp)
    }
    OS_FlagUnlink(pnode);
   139b4:	e13ffe17 	ldw	r4,-8(fp)
   139b8:	00139d40 	call	139d4 <OS_FlagUnlink>
    return (sched);
   139bc:	e0bffc03 	ldbu	r2,-16(fp)
}
   139c0:	e037883a 	mov	sp,fp
   139c4:	dfc00117 	ldw	ra,4(sp)
   139c8:	df000017 	ldw	fp,0(sp)
   139cc:	dec00204 	addi	sp,sp,8
   139d0:	f800283a 	ret

000139d4 <OS_FlagUnlink>:
*              2) This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

void  OS_FlagUnlink (OS_FLAG_NODE *pnode)
{
   139d4:	defffa04 	addi	sp,sp,-24
   139d8:	df000515 	stw	fp,20(sp)
   139dc:	df000504 	addi	fp,sp,20
   139e0:	e13fff15 	stw	r4,-4(fp)
    OS_FLAG_GRP  *pgrp;
    OS_FLAG_NODE *pnode_prev;
    OS_FLAG_NODE *pnode_next;


    pnode_prev = (OS_FLAG_NODE *)pnode->OSFlagNodePrev;
   139e4:	e0bfff17 	ldw	r2,-4(fp)
   139e8:	10800117 	ldw	r2,4(r2)
   139ec:	e0bffb15 	stw	r2,-20(fp)
    pnode_next = (OS_FLAG_NODE *)pnode->OSFlagNodeNext;
   139f0:	e0bfff17 	ldw	r2,-4(fp)
   139f4:	10800017 	ldw	r2,0(r2)
   139f8:	e0bffc15 	stw	r2,-16(fp)
    if (pnode_prev == (OS_FLAG_NODE *)0) {                      /* Is it first node in wait list?      */
   139fc:	e0bffb17 	ldw	r2,-20(fp)
   13a00:	10000b1e 	bne	r2,zero,13a30 <OS_FlagUnlink+0x5c>
        pgrp                 = (OS_FLAG_GRP *)pnode->OSFlagNodeFlagGrp;
   13a04:	e0bfff17 	ldw	r2,-4(fp)
   13a08:	10800317 	ldw	r2,12(r2)
   13a0c:	e0bffd15 	stw	r2,-12(fp)
        pgrp->OSFlagWaitList = (void *)pnode_next;              /*      Update list for new 1st node   */
   13a10:	e0bffd17 	ldw	r2,-12(fp)
   13a14:	e0fffc17 	ldw	r3,-16(fp)
   13a18:	10c00115 	stw	r3,4(r2)
        if (pnode_next != (OS_FLAG_NODE *)0) {
   13a1c:	e0bffc17 	ldw	r2,-16(fp)
   13a20:	10000b26 	beq	r2,zero,13a50 <OS_FlagUnlink+0x7c>
            pnode_next->OSFlagNodePrev = (OS_FLAG_NODE *)0;     /*      Link new 1st node PREV to NULL */
   13a24:	e0bffc17 	ldw	r2,-16(fp)
   13a28:	10000115 	stw	zero,4(r2)
   13a2c:	00000806 	br	13a50 <OS_FlagUnlink+0x7c>
        }
    } else {                                                    /* No,  A node somewhere in the list   */
        pnode_prev->OSFlagNodeNext = pnode_next;                /*      Link around the node to unlink */
   13a30:	e0bffb17 	ldw	r2,-20(fp)
   13a34:	e0fffc17 	ldw	r3,-16(fp)
   13a38:	10c00015 	stw	r3,0(r2)
        if (pnode_next != (OS_FLAG_NODE *)0) {                  /*      Was this the LAST node?        */
   13a3c:	e0bffc17 	ldw	r2,-16(fp)
   13a40:	10000326 	beq	r2,zero,13a50 <OS_FlagUnlink+0x7c>
            pnode_next->OSFlagNodePrev = pnode_prev;            /*      No, Link around current node   */
   13a44:	e0bffc17 	ldw	r2,-16(fp)
   13a48:	e0fffb17 	ldw	r3,-20(fp)
   13a4c:	10c00115 	stw	r3,4(r2)
        }
    }
#if OS_TASK_DEL_EN > 0
    ptcb                = (OS_TCB *)pnode->OSFlagNodeTCB;
   13a50:	e0bfff17 	ldw	r2,-4(fp)
   13a54:	10800217 	ldw	r2,8(r2)
   13a58:	e0bffe15 	stw	r2,-8(fp)
    ptcb->OSTCBFlagNode = (OS_FLAG_NODE *)0;
   13a5c:	e0bffe17 	ldw	r2,-8(fp)
   13a60:	10000a15 	stw	zero,40(r2)
#endif
}
   13a64:	e037883a 	mov	sp,fp
   13a68:	df000017 	ldw	fp,0(sp)
   13a6c:	dec00104 	addi	sp,sp,4
   13a70:	f800283a 	ret

00013a74 <OSMboxAccept>:
*********************************************************************************************************
*/

#if OS_MBOX_ACCEPT_EN > 0
void  *OSMboxAccept (OS_EVENT *pevent)
{
   13a74:	defffa04 	addi	sp,sp,-24
   13a78:	df000515 	stw	fp,20(sp)
   13a7c:	df000504 	addi	fp,sp,20
   13a80:	e13fff15 	stw	r4,-4(fp)
    void      *pmsg;
#if OS_CRITICAL_METHOD == 3                               /* Allocate storage for CPU status register  */
    OS_CPU_SR  cpu_sr = 0;
   13a84:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                        /* Validate 'pevent'                         */
   13a88:	e0bfff17 	ldw	r2,-4(fp)
   13a8c:	1000021e 	bne	r2,zero,13a98 <OSMboxAccept+0x24>
        return ((void *)0);
   13a90:	0005883a 	mov	r2,zero
   13a94:	00001906 	br	13afc <OSMboxAccept+0x88>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_MBOX) {      /* Validate event block type                 */
   13a98:	e0bfff17 	ldw	r2,-4(fp)
   13a9c:	10800003 	ldbu	r2,0(r2)
   13aa0:	10803fcc 	andi	r2,r2,255
   13aa4:	10800060 	cmpeqi	r2,r2,1
   13aa8:	1000021e 	bne	r2,zero,13ab4 <OSMboxAccept+0x40>
        return ((void *)0);
   13aac:	0005883a 	mov	r2,zero
   13ab0:	00001206 	br	13afc <OSMboxAccept+0x88>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   13ab4:	0005303a 	rdctl	r2,status
   13ab8:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   13abc:	e0fffd17 	ldw	r3,-12(fp)
   13ac0:	00bfff84 	movi	r2,-2
   13ac4:	1884703a 	and	r2,r3,r2
   13ac8:	1001703a 	wrctl	status,r2
  
  return context;
   13acc:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
   13ad0:	e0bffb15 	stw	r2,-20(fp)
    pmsg               = pevent->OSEventPtr;
   13ad4:	e0bfff17 	ldw	r2,-4(fp)
   13ad8:	10800117 	ldw	r2,4(r2)
   13adc:	e0bffc15 	stw	r2,-16(fp)
    pevent->OSEventPtr = (void *)0;                       /* Clear the mailbox                         */
   13ae0:	e0bfff17 	ldw	r2,-4(fp)
   13ae4:	10000115 	stw	zero,4(r2)
   13ae8:	e0bffb17 	ldw	r2,-20(fp)
   13aec:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   13af0:	e0bffe17 	ldw	r2,-8(fp)
   13af4:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (pmsg);                                        /* Return the message received (or NULL)     */
   13af8:	e0bffc17 	ldw	r2,-16(fp)
}
   13afc:	e037883a 	mov	sp,fp
   13b00:	df000017 	ldw	fp,0(sp)
   13b04:	dec00104 	addi	sp,sp,4
   13b08:	f800283a 	ret

00013b0c <OSMboxCreate>:
*              == (OS_EVENT *)0  if no event control blocks were available
*********************************************************************************************************
*/

OS_EVENT  *OSMboxCreate (void *pmsg)
{
   13b0c:	defff904 	addi	sp,sp,-28
   13b10:	dfc00615 	stw	ra,24(sp)
   13b14:	df000515 	stw	fp,20(sp)
   13b18:	df000504 	addi	fp,sp,20
   13b1c:	e13fff15 	stw	r4,-4(fp)
    OS_EVENT  *pevent;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   13b20:	e03ffb15 	stw	zero,-20(fp)
#endif



    if (OSIntNesting > 0) {                      /* See if called from ISR ...                         */
   13b24:	008000b4 	movhi	r2,2
   13b28:	10836404 	addi	r2,r2,3472
   13b2c:	10800003 	ldbu	r2,0(r2)
   13b30:	10803fcc 	andi	r2,r2,255
   13b34:	10000226 	beq	r2,zero,13b40 <OSMboxCreate+0x34>
        return ((OS_EVENT *)0);                  /* ... can't CREATE from an ISR                       */
   13b38:	0005883a 	mov	r2,zero
   13b3c:	00002d06 	br	13bf4 <OSMboxCreate+0xe8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   13b40:	0005303a 	rdctl	r2,status
   13b44:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   13b48:	e0fffd17 	ldw	r3,-12(fp)
   13b4c:	00bfff84 	movi	r2,-2
   13b50:	1884703a 	and	r2,r3,r2
   13b54:	1001703a 	wrctl	status,r2
  
  return context;
   13b58:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
   13b5c:	e0bffb15 	stw	r2,-20(fp)
    pevent = OSEventFreeList;                    /* Get next free event control block                  */
   13b60:	008000b4 	movhi	r2,2
   13b64:	10836304 	addi	r2,r2,3468
   13b68:	10800017 	ldw	r2,0(r2)
   13b6c:	e0bffc15 	stw	r2,-16(fp)
    if (OSEventFreeList != (OS_EVENT *)0) {      /* See if pool of free ECB pool was empty             */
   13b70:	008000b4 	movhi	r2,2
   13b74:	10836304 	addi	r2,r2,3468
   13b78:	10800017 	ldw	r2,0(r2)
   13b7c:	10000726 	beq	r2,zero,13b9c <OSMboxCreate+0x90>
        OSEventFreeList = (OS_EVENT *)OSEventFreeList->OSEventPtr;
   13b80:	008000b4 	movhi	r2,2
   13b84:	10836304 	addi	r2,r2,3468
   13b88:	10800017 	ldw	r2,0(r2)
   13b8c:	10c00117 	ldw	r3,4(r2)
   13b90:	008000b4 	movhi	r2,2
   13b94:	10836304 	addi	r2,r2,3468
   13b98:	10c00015 	stw	r3,0(r2)
   13b9c:	e0bffb17 	ldw	r2,-20(fp)
   13ba0:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   13ba4:	e0bffe17 	ldw	r2,-8(fp)
   13ba8:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    if (pevent != (OS_EVENT *)0) {
   13bac:	e0bffc17 	ldw	r2,-16(fp)
   13bb0:	10000f26 	beq	r2,zero,13bf0 <OSMboxCreate+0xe4>
        pevent->OSEventType    = OS_EVENT_TYPE_MBOX;
   13bb4:	e0bffc17 	ldw	r2,-16(fp)
   13bb8:	00c00044 	movi	r3,1
   13bbc:	10c00005 	stb	r3,0(r2)
        pevent->OSEventCnt     = 0;
   13bc0:	e0bffc17 	ldw	r2,-16(fp)
   13bc4:	1000020d 	sth	zero,8(r2)
        pevent->OSEventPtr     = pmsg;           /* Deposit message in event control block             */
   13bc8:	e0bffc17 	ldw	r2,-16(fp)
   13bcc:	e0ffff17 	ldw	r3,-4(fp)
   13bd0:	10c00115 	stw	r3,4(r2)
#if OS_EVENT_NAME_SIZE > 1
        pevent->OSEventName[0] = '?';
   13bd4:	e0bffc17 	ldw	r2,-16(fp)
   13bd8:	00c00fc4 	movi	r3,63
   13bdc:	10c00385 	stb	r3,14(r2)
        pevent->OSEventName[1] = OS_ASCII_NUL;
   13be0:	e0bffc17 	ldw	r2,-16(fp)
   13be4:	100003c5 	stb	zero,15(r2)
#endif
        OS_EventWaitListInit(pevent);
   13be8:	e13ffc17 	ldw	r4,-16(fp)
   13bec:	001157c0 	call	1157c <OS_EventWaitListInit>
    }
    return (pevent);                             /* Return pointer to event control block              */
   13bf0:	e0bffc17 	ldw	r2,-16(fp)
}
   13bf4:	e037883a 	mov	sp,fp
   13bf8:	dfc00117 	ldw	ra,4(sp)
   13bfc:	df000017 	ldw	fp,0(sp)
   13c00:	dec00204 	addi	sp,sp,8
   13c04:	f800283a 	ret

00013c08 <OSMboxDel>:
*********************************************************************************************************
*/

#if OS_MBOX_DEL_EN > 0
OS_EVENT  *OSMboxDel (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
   13c08:	defff304 	addi	sp,sp,-52
   13c0c:	dfc00c15 	stw	ra,48(sp)
   13c10:	df000b15 	stw	fp,44(sp)
   13c14:	df000b04 	addi	fp,sp,44
   13c18:	e13ffd15 	stw	r4,-12(fp)
   13c1c:	2805883a 	mov	r2,r5
   13c20:	e1bfff15 	stw	r6,-4(fp)
   13c24:	e0bffe05 	stb	r2,-8(fp)
    BOOLEAN    tasks_waiting;
    OS_EVENT  *pevent_return;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
   13c28:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
   13c2c:	e0bfff17 	ldw	r2,-4(fp)
   13c30:	1000021e 	bne	r2,zero,13c3c <OSMboxDel+0x34>
        return (pevent);
   13c34:	e0bffd17 	ldw	r2,-12(fp)
   13c38:	00008806 	br	13e5c <OSMboxDel+0x254>
    }
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
   13c3c:	e0bffd17 	ldw	r2,-12(fp)
   13c40:	1000051e 	bne	r2,zero,13c58 <OSMboxDel+0x50>
        *perr = OS_ERR_PEVENT_NULL;
   13c44:	e0bfff17 	ldw	r2,-4(fp)
   13c48:	00c00104 	movi	r3,4
   13c4c:	10c00005 	stb	r3,0(r2)
        return (pevent);
   13c50:	e0bffd17 	ldw	r2,-12(fp)
   13c54:	00008106 	br	13e5c <OSMboxDel+0x254>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_MBOX) {       /* Validate event block type                */
   13c58:	e0bffd17 	ldw	r2,-12(fp)
   13c5c:	10800003 	ldbu	r2,0(r2)
   13c60:	10803fcc 	andi	r2,r2,255
   13c64:	10800060 	cmpeqi	r2,r2,1
   13c68:	1000051e 	bne	r2,zero,13c80 <OSMboxDel+0x78>
        *perr = OS_ERR_EVENT_TYPE;
   13c6c:	e0bfff17 	ldw	r2,-4(fp)
   13c70:	00c00044 	movi	r3,1
   13c74:	10c00005 	stb	r3,0(r2)
        return (pevent);
   13c78:	e0bffd17 	ldw	r2,-12(fp)
   13c7c:	00007706 	br	13e5c <OSMboxDel+0x254>
    }
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
   13c80:	008000b4 	movhi	r2,2
   13c84:	10836404 	addi	r2,r2,3472
   13c88:	10800003 	ldbu	r2,0(r2)
   13c8c:	10803fcc 	andi	r2,r2,255
   13c90:	10000526 	beq	r2,zero,13ca8 <OSMboxDel+0xa0>
        *perr = OS_ERR_DEL_ISR;                            /* ... can't DELETE from an ISR             */
   13c94:	e0bfff17 	ldw	r2,-4(fp)
   13c98:	00c003c4 	movi	r3,15
   13c9c:	10c00005 	stb	r3,0(r2)
        return (pevent);
   13ca0:	e0bffd17 	ldw	r2,-12(fp)
   13ca4:	00006d06 	br	13e5c <OSMboxDel+0x254>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   13ca8:	0005303a 	rdctl	r2,status
   13cac:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   13cb0:	e0fff817 	ldw	r3,-32(fp)
   13cb4:	00bfff84 	movi	r2,-2
   13cb8:	1884703a 	and	r2,r3,r2
   13cbc:	1001703a 	wrctl	status,r2
  
  return context;
   13cc0:	e0bff817 	ldw	r2,-32(fp)
    }
    OS_ENTER_CRITICAL();
   13cc4:	e0bff715 	stw	r2,-36(fp)
    if (pevent->OSEventGrp != 0) {                         /* See if any tasks waiting on mailbox      */
   13cc8:	e0bffd17 	ldw	r2,-12(fp)
   13ccc:	10800283 	ldbu	r2,10(r2)
   13cd0:	10803fcc 	andi	r2,r2,255
   13cd4:	10000326 	beq	r2,zero,13ce4 <OSMboxDel+0xdc>
        tasks_waiting = OS_TRUE;                           /* Yes                                      */
   13cd8:	00800044 	movi	r2,1
   13cdc:	e0bff505 	stb	r2,-44(fp)
   13ce0:	00000106 	br	13ce8 <OSMboxDel+0xe0>
    } else {
        tasks_waiting = OS_FALSE;                          /* No                                       */
   13ce4:	e03ff505 	stb	zero,-44(fp)
    }
    switch (opt) {
   13ce8:	e0bffe03 	ldbu	r2,-8(fp)
   13cec:	10000326 	beq	r2,zero,13cfc <OSMboxDel+0xf4>
   13cf0:	10800060 	cmpeqi	r2,r2,1
   13cf4:	10002c1e 	bne	r2,zero,13da8 <OSMboxDel+0x1a0>
   13cf8:	00004d06 	br	13e30 <OSMboxDel+0x228>
        case OS_DEL_NO_PEND:                               /* Delete mailbox only if no task waiting   */
             if (tasks_waiting == OS_FALSE) {
   13cfc:	e0bff503 	ldbu	r2,-44(fp)
   13d00:	10001a1e 	bne	r2,zero,13d6c <OSMboxDel+0x164>
#if OS_EVENT_NAME_SIZE > 1
                 pevent->OSEventName[0] = '?';             /* Unknown name                             */
   13d04:	e0bffd17 	ldw	r2,-12(fp)
   13d08:	00c00fc4 	movi	r3,63
   13d0c:	10c00385 	stb	r3,14(r2)
                 pevent->OSEventName[1] = OS_ASCII_NUL;
   13d10:	e0bffd17 	ldw	r2,-12(fp)
   13d14:	100003c5 	stb	zero,15(r2)
#endif
                 pevent->OSEventType = OS_EVENT_TYPE_UNUSED;
   13d18:	e0bffd17 	ldw	r2,-12(fp)
   13d1c:	10000005 	stb	zero,0(r2)
                 pevent->OSEventPtr  = OSEventFreeList;    /* Return Event Control Block to free list  */
   13d20:	008000b4 	movhi	r2,2
   13d24:	10836304 	addi	r2,r2,3468
   13d28:	10c00017 	ldw	r3,0(r2)
   13d2c:	e0bffd17 	ldw	r2,-12(fp)
   13d30:	10c00115 	stw	r3,4(r2)
                 pevent->OSEventCnt  = 0;
   13d34:	e0bffd17 	ldw	r2,-12(fp)
   13d38:	1000020d 	sth	zero,8(r2)
                 OSEventFreeList     = pevent;             /* Get next free event control block        */
   13d3c:	008000b4 	movhi	r2,2
   13d40:	10836304 	addi	r2,r2,3468
   13d44:	e0fffd17 	ldw	r3,-12(fp)
   13d48:	10c00015 	stw	r3,0(r2)
   13d4c:	e0bff717 	ldw	r2,-36(fp)
   13d50:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   13d54:	e0bff917 	ldw	r2,-28(fp)
   13d58:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr               = OS_ERR_NONE;
   13d5c:	e0bfff17 	ldw	r2,-4(fp)
   13d60:	10000005 	stb	zero,0(r2)
                 pevent_return       = (OS_EVENT *)0;      /* Mailbox has been deleted                 */
   13d64:	e03ff615 	stw	zero,-40(fp)
             } else {
                 OS_EXIT_CRITICAL();
                 *perr               = OS_ERR_TASK_WAITING;
                 pevent_return       = pevent;
             }
             break;
   13d68:	00003b06 	br	13e58 <OSMboxDel+0x250>
   13d6c:	e0bff717 	ldw	r2,-36(fp)
   13d70:	e0bffa15 	stw	r2,-24(fp)
   13d74:	e0bffa17 	ldw	r2,-24(fp)
   13d78:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr               = OS_ERR_NONE;
                 pevent_return       = (OS_EVENT *)0;      /* Mailbox has been deleted                 */
             } else {
                 OS_EXIT_CRITICAL();
                 *perr               = OS_ERR_TASK_WAITING;
   13d7c:	e0bfff17 	ldw	r2,-4(fp)
   13d80:	00c01244 	movi	r3,73
   13d84:	10c00005 	stb	r3,0(r2)
                 pevent_return       = pevent;
   13d88:	e0bffd17 	ldw	r2,-12(fp)
   13d8c:	e0bff615 	stw	r2,-40(fp)
             }
             break;
   13d90:	00003106 	br	13e58 <OSMboxDel+0x250>

        case OS_DEL_ALWAYS:                                /* Always delete the mailbox                */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for mailbox      */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_MBOX, OS_STAT_PEND_OK);
   13d94:	e13ffd17 	ldw	r4,-12(fp)
   13d98:	000b883a 	mov	r5,zero
   13d9c:	01800084 	movi	r6,2
   13da0:	000f883a 	mov	r7,zero
   13da4:	0010fdc0 	call	10fdc <OS_EventTaskRdy>
                 pevent_return       = pevent;
             }
             break;

        case OS_DEL_ALWAYS:                                /* Always delete the mailbox                */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for mailbox      */
   13da8:	e0bffd17 	ldw	r2,-12(fp)
   13dac:	10800283 	ldbu	r2,10(r2)
   13db0:	10803fcc 	andi	r2,r2,255
   13db4:	103ff71e 	bne	r2,zero,13d94 <__alt_mem_Flash_flash_data+0xf4013d94>
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_MBOX, OS_STAT_PEND_OK);
             }
#if OS_EVENT_NAME_SIZE > 1
             pevent->OSEventName[0] = '?';                 /* Unknown name                             */
   13db8:	e0bffd17 	ldw	r2,-12(fp)
   13dbc:	00c00fc4 	movi	r3,63
   13dc0:	10c00385 	stb	r3,14(r2)
             pevent->OSEventName[1] = OS_ASCII_NUL;
   13dc4:	e0bffd17 	ldw	r2,-12(fp)
   13dc8:	100003c5 	stb	zero,15(r2)
#endif
             pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
   13dcc:	e0bffd17 	ldw	r2,-12(fp)
   13dd0:	10000005 	stb	zero,0(r2)
             pevent->OSEventPtr     = OSEventFreeList;     /* Return Event Control Block to free list  */
   13dd4:	008000b4 	movhi	r2,2
   13dd8:	10836304 	addi	r2,r2,3468
   13ddc:	10c00017 	ldw	r3,0(r2)
   13de0:	e0bffd17 	ldw	r2,-12(fp)
   13de4:	10c00115 	stw	r3,4(r2)
             pevent->OSEventCnt     = 0;
   13de8:	e0bffd17 	ldw	r2,-12(fp)
   13dec:	1000020d 	sth	zero,8(r2)
             OSEventFreeList        = pevent;              /* Get next free event control block        */
   13df0:	008000b4 	movhi	r2,2
   13df4:	10836304 	addi	r2,r2,3468
   13df8:	e0fffd17 	ldw	r3,-12(fp)
   13dfc:	10c00015 	stw	r3,0(r2)
   13e00:	e0bff717 	ldw	r2,-36(fp)
   13e04:	e0bffb15 	stw	r2,-20(fp)
   13e08:	e0bffb17 	ldw	r2,-20(fp)
   13e0c:	1001703a 	wrctl	status,r2
             OS_EXIT_CRITICAL();
             if (tasks_waiting == OS_TRUE) {               /* Reschedule only if task(s) were waiting  */
   13e10:	e0bff503 	ldbu	r2,-44(fp)
   13e14:	10800058 	cmpnei	r2,r2,1
   13e18:	1000011e 	bne	r2,zero,13e20 <OSMboxDel+0x218>
                 OS_Sched();                               /* Find highest priority task ready to run  */
   13e1c:	00119f40 	call	119f4 <OS_Sched>
             }
             *perr         = OS_ERR_NONE;
   13e20:	e0bfff17 	ldw	r2,-4(fp)
   13e24:	10000005 	stb	zero,0(r2)
             pevent_return = (OS_EVENT *)0;                /* Mailbox has been deleted                 */
   13e28:	e03ff615 	stw	zero,-40(fp)
             break;
   13e2c:	00000a06 	br	13e58 <OSMboxDel+0x250>
   13e30:	e0bff717 	ldw	r2,-36(fp)
   13e34:	e0bffc15 	stw	r2,-16(fp)
   13e38:	e0bffc17 	ldw	r2,-16(fp)
   13e3c:	1001703a 	wrctl	status,r2

        default:
             OS_EXIT_CRITICAL();
             *perr         = OS_ERR_INVALID_OPT;
   13e40:	e0bfff17 	ldw	r2,-4(fp)
   13e44:	00c001c4 	movi	r3,7
   13e48:	10c00005 	stb	r3,0(r2)
             pevent_return = pevent;
   13e4c:	e0bffd17 	ldw	r2,-12(fp)
   13e50:	e0bff615 	stw	r2,-40(fp)
             break;
   13e54:	0001883a 	nop
    }
    return (pevent_return);
   13e58:	e0bff617 	ldw	r2,-40(fp)
}
   13e5c:	e037883a 	mov	sp,fp
   13e60:	dfc00117 	ldw	ra,4(sp)
   13e64:	df000017 	ldw	fp,0(sp)
   13e68:	dec00204 	addi	sp,sp,8
   13e6c:	f800283a 	ret

00013e70 <OSMboxPend>:
*                            if you didn't pass the proper pointer to the event control block.
*********************************************************************************************************
*/
/*$PAGE*/
void  *OSMboxPend (OS_EVENT *pevent, INT16U timeout, INT8U *perr)
{
   13e70:	defff404 	addi	sp,sp,-48
   13e74:	dfc00b15 	stw	ra,44(sp)
   13e78:	df000a15 	stw	fp,40(sp)
   13e7c:	df000a04 	addi	fp,sp,40
   13e80:	e13ffd15 	stw	r4,-12(fp)
   13e84:	2805883a 	mov	r2,r5
   13e88:	e1bfff15 	stw	r6,-4(fp)
   13e8c:	e0bffe0d 	sth	r2,-8(fp)
    void      *pmsg;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   13e90:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
   13e94:	e0bfff17 	ldw	r2,-4(fp)
   13e98:	1000021e 	bne	r2,zero,13ea4 <OSMboxPend+0x34>
        return ((void *)0);
   13e9c:	0005883a 	mov	r2,zero
   13ea0:	00009706 	br	14100 <OSMboxPend+0x290>
    }
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
   13ea4:	e0bffd17 	ldw	r2,-12(fp)
   13ea8:	1000051e 	bne	r2,zero,13ec0 <OSMboxPend+0x50>
        *perr = OS_ERR_PEVENT_NULL;
   13eac:	e0bfff17 	ldw	r2,-4(fp)
   13eb0:	00c00104 	movi	r3,4
   13eb4:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
   13eb8:	0005883a 	mov	r2,zero
   13ebc:	00009006 	br	14100 <OSMboxPend+0x290>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_MBOX) {  /* Validate event block type                     */
   13ec0:	e0bffd17 	ldw	r2,-12(fp)
   13ec4:	10800003 	ldbu	r2,0(r2)
   13ec8:	10803fcc 	andi	r2,r2,255
   13ecc:	10800060 	cmpeqi	r2,r2,1
   13ed0:	1000051e 	bne	r2,zero,13ee8 <OSMboxPend+0x78>
        *perr = OS_ERR_EVENT_TYPE;
   13ed4:	e0bfff17 	ldw	r2,-4(fp)
   13ed8:	00c00044 	movi	r3,1
   13edc:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
   13ee0:	0005883a 	mov	r2,zero
   13ee4:	00008606 	br	14100 <OSMboxPend+0x290>
    }
    if (OSIntNesting > 0) {                           /* See if called from ISR ...                    */
   13ee8:	008000b4 	movhi	r2,2
   13eec:	10836404 	addi	r2,r2,3472
   13ef0:	10800003 	ldbu	r2,0(r2)
   13ef4:	10803fcc 	andi	r2,r2,255
   13ef8:	10000526 	beq	r2,zero,13f10 <OSMboxPend+0xa0>
        *perr = OS_ERR_PEND_ISR;                      /* ... can't PEND from an ISR                    */
   13efc:	e0bfff17 	ldw	r2,-4(fp)
   13f00:	00c00084 	movi	r3,2
   13f04:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
   13f08:	0005883a 	mov	r2,zero
   13f0c:	00007c06 	br	14100 <OSMboxPend+0x290>
    }
    if (OSLockNesting > 0) {                          /* See if called with scheduler locked ...       */
   13f10:	008000b4 	movhi	r2,2
   13f14:	10835604 	addi	r2,r2,3416
   13f18:	10800003 	ldbu	r2,0(r2)
   13f1c:	10803fcc 	andi	r2,r2,255
   13f20:	10000526 	beq	r2,zero,13f38 <OSMboxPend+0xc8>
        *perr = OS_ERR_PEND_LOCKED;                   /* ... can't PEND when locked                    */
   13f24:	e0bfff17 	ldw	r2,-4(fp)
   13f28:	00c00344 	movi	r3,13
   13f2c:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
   13f30:	0005883a 	mov	r2,zero
   13f34:	00007206 	br	14100 <OSMboxPend+0x290>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   13f38:	0005303a 	rdctl	r2,status
   13f3c:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   13f40:	e0fff817 	ldw	r3,-32(fp)
   13f44:	00bfff84 	movi	r2,-2
   13f48:	1884703a 	and	r2,r3,r2
   13f4c:	1001703a 	wrctl	status,r2
  
  return context;
   13f50:	e0bff817 	ldw	r2,-32(fp)
    }
    OS_ENTER_CRITICAL();
   13f54:	e0bff715 	stw	r2,-36(fp)
    pmsg = pevent->OSEventPtr;
   13f58:	e0bffd17 	ldw	r2,-12(fp)
   13f5c:	10800117 	ldw	r2,4(r2)
   13f60:	e0bff615 	stw	r2,-40(fp)
    if (pmsg != (void *)0) {                          /* See if there is already a message             */
   13f64:	e0bff617 	ldw	r2,-40(fp)
   13f68:	10000a26 	beq	r2,zero,13f94 <OSMboxPend+0x124>
        pevent->OSEventPtr = (void *)0;               /* Clear the mailbox                             */
   13f6c:	e0bffd17 	ldw	r2,-12(fp)
   13f70:	10000115 	stw	zero,4(r2)
   13f74:	e0bff717 	ldw	r2,-36(fp)
   13f78:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   13f7c:	e0bff917 	ldw	r2,-28(fp)
   13f80:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_NONE;
   13f84:	e0bfff17 	ldw	r2,-4(fp)
   13f88:	10000005 	stb	zero,0(r2)
        return (pmsg);                                /* Return the message received (or NULL)         */
   13f8c:	e0bff617 	ldw	r2,-40(fp)
   13f90:	00005b06 	br	14100 <OSMboxPend+0x290>
    }
    OSTCBCur->OSTCBStat     |= OS_STAT_MBOX;          /* Message not available, task will pend         */
   13f94:	008000b4 	movhi	r2,2
   13f98:	10836504 	addi	r2,r2,3476
   13f9c:	10c00017 	ldw	r3,0(r2)
   13fa0:	008000b4 	movhi	r2,2
   13fa4:	10836504 	addi	r2,r2,3476
   13fa8:	10800017 	ldw	r2,0(r2)
   13fac:	10800c03 	ldbu	r2,48(r2)
   13fb0:	10800094 	ori	r2,r2,2
   13fb4:	18800c05 	stb	r2,48(r3)
    OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
   13fb8:	008000b4 	movhi	r2,2
   13fbc:	10836504 	addi	r2,r2,3476
   13fc0:	10800017 	ldw	r2,0(r2)
   13fc4:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBDly       = timeout;               /* Load timeout in TCB                           */
   13fc8:	008000b4 	movhi	r2,2
   13fcc:	10836504 	addi	r2,r2,3476
   13fd0:	10800017 	ldw	r2,0(r2)
   13fd4:	e0fffe0b 	ldhu	r3,-8(fp)
   13fd8:	10c00b8d 	sth	r3,46(r2)
    OS_EventTaskWait(pevent);                         /* Suspend task until event or timeout occurs    */
   13fdc:	e13ffd17 	ldw	r4,-12(fp)
   13fe0:	00111740 	call	11174 <OS_EventTaskWait>
   13fe4:	e0bff717 	ldw	r2,-36(fp)
   13fe8:	e0bffa15 	stw	r2,-24(fp)
   13fec:	e0bffa17 	ldw	r2,-24(fp)
   13ff0:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    OS_Sched();                                       /* Find next highest priority task ready to run  */
   13ff4:	00119f40 	call	119f4 <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   13ff8:	0005303a 	rdctl	r2,status
   13ffc:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   14000:	e0fffb17 	ldw	r3,-20(fp)
   14004:	00bfff84 	movi	r2,-2
   14008:	1884703a 	and	r2,r3,r2
   1400c:	1001703a 	wrctl	status,r2
  
  return context;
   14010:	e0bffb17 	ldw	r2,-20(fp)
    OS_ENTER_CRITICAL();
   14014:	e0bff715 	stw	r2,-36(fp)
    switch (OSTCBCur->OSTCBStatPend) {                /* See if we timed-out or aborted                */
   14018:	008000b4 	movhi	r2,2
   1401c:	10836504 	addi	r2,r2,3476
   14020:	10800017 	ldw	r2,0(r2)
   14024:	10800c43 	ldbu	r2,49(r2)
   14028:	10803fcc 	andi	r2,r2,255
   1402c:	10000326 	beq	r2,zero,1403c <OSMboxPend+0x1cc>
   14030:	108000a0 	cmpeqi	r2,r2,2
   14034:	1000091e 	bne	r2,zero,1405c <OSMboxPend+0x1ec>
   14038:	00000d06 	br	14070 <OSMboxPend+0x200>
        case OS_STAT_PEND_OK:
             pmsg =  OSTCBCur->OSTCBMsg;
   1403c:	008000b4 	movhi	r2,2
   14040:	10836504 	addi	r2,r2,3476
   14044:	10800017 	ldw	r2,0(r2)
   14048:	10800917 	ldw	r2,36(r2)
   1404c:	e0bff615 	stw	r2,-40(fp)
            *perr =  OS_ERR_NONE;
   14050:	e0bfff17 	ldw	r2,-4(fp)
   14054:	10000005 	stb	zero,0(r2)
             break;
   14058:	00001006 	br	1409c <OSMboxPend+0x22c>

        case OS_STAT_PEND_ABORT:
             pmsg = (void *)0;
   1405c:	e03ff615 	stw	zero,-40(fp)
            *perr =  OS_ERR_PEND_ABORT;               /* Indicate that we aborted                      */
   14060:	e0bfff17 	ldw	r2,-4(fp)
   14064:	00c00384 	movi	r3,14
   14068:	10c00005 	stb	r3,0(r2)
             break;
   1406c:	00000b06 	br	1409c <OSMboxPend+0x22c>

        case OS_STAT_PEND_TO:
        default:
             OS_EventTaskRemove(OSTCBCur, pevent);
   14070:	008000b4 	movhi	r2,2
   14074:	10836504 	addi	r2,r2,3476
   14078:	10800017 	ldw	r2,0(r2)
   1407c:	1009883a 	mov	r4,r2
   14080:	e17ffd17 	ldw	r5,-12(fp)
   14084:	00113cc0 	call	113cc <OS_EventTaskRemove>
             pmsg = (void *)0;
   14088:	e03ff615 	stw	zero,-40(fp)
            *perr =  OS_ERR_TIMEOUT;                  /* Indicate that we didn't get event within TO   */
   1408c:	e0bfff17 	ldw	r2,-4(fp)
   14090:	00c00284 	movi	r3,10
   14094:	10c00005 	stb	r3,0(r2)
             break;
   14098:	0001883a 	nop
    }
    OSTCBCur->OSTCBStat          =  OS_STAT_RDY;      /* Set   task  status to ready                   */
   1409c:	008000b4 	movhi	r2,2
   140a0:	10836504 	addi	r2,r2,3476
   140a4:	10800017 	ldw	r2,0(r2)
   140a8:	10000c05 	stb	zero,48(r2)
    OSTCBCur->OSTCBStatPend      =  OS_STAT_PEND_OK;  /* Clear pend  status                            */
   140ac:	008000b4 	movhi	r2,2
   140b0:	10836504 	addi	r2,r2,3476
   140b4:	10800017 	ldw	r2,0(r2)
   140b8:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;    /* Clear event pointers                          */
   140bc:	008000b4 	movhi	r2,2
   140c0:	10836504 	addi	r2,r2,3476
   140c4:	10800017 	ldw	r2,0(r2)
   140c8:	10000715 	stw	zero,28(r2)
#if (OS_EVENT_MULTI_EN > 0)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
   140cc:	008000b4 	movhi	r2,2
   140d0:	10836504 	addi	r2,r2,3476
   140d4:	10800017 	ldw	r2,0(r2)
   140d8:	10000815 	stw	zero,32(r2)
#endif
    OSTCBCur->OSTCBMsg           = (void      *)0;    /* Clear  received message                       */
   140dc:	008000b4 	movhi	r2,2
   140e0:	10836504 	addi	r2,r2,3476
   140e4:	10800017 	ldw	r2,0(r2)
   140e8:	10000915 	stw	zero,36(r2)
   140ec:	e0bff717 	ldw	r2,-36(fp)
   140f0:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   140f4:	e0bffc17 	ldw	r2,-16(fp)
   140f8:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (pmsg);                                    /* Return received message                       */
   140fc:	e0bff617 	ldw	r2,-40(fp)
}
   14100:	e037883a 	mov	sp,fp
   14104:	dfc00117 	ldw	ra,4(sp)
   14108:	df000017 	ldw	fp,0(sp)
   1410c:	dec00204 	addi	sp,sp,8
   14110:	f800283a 	ret

00014114 <OSMboxPendAbort>:
*********************************************************************************************************
*/

#if OS_MBOX_PEND_ABORT_EN > 0
INT8U  OSMboxPendAbort (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
   14114:	defff604 	addi	sp,sp,-40
   14118:	dfc00915 	stw	ra,36(sp)
   1411c:	df000815 	stw	fp,32(sp)
   14120:	df000804 	addi	fp,sp,32
   14124:	e13ffd15 	stw	r4,-12(fp)
   14128:	2805883a 	mov	r2,r5
   1412c:	e1bfff15 	stw	r6,-4(fp)
   14130:	e0bffe05 	stb	r2,-8(fp)
    INT8U      nbr_tasks;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
   14134:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
   14138:	e0bfff17 	ldw	r2,-4(fp)
   1413c:	1000021e 	bne	r2,zero,14148 <OSMboxPendAbort+0x34>
        return (0);
   14140:	0005883a 	mov	r2,zero
   14144:	00004906 	br	1426c <OSMboxPendAbort+0x158>
    }
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
   14148:	e0bffd17 	ldw	r2,-12(fp)
   1414c:	1000051e 	bne	r2,zero,14164 <OSMboxPendAbort+0x50>
        *perr = OS_ERR_PEVENT_NULL;
   14150:	e0bfff17 	ldw	r2,-4(fp)
   14154:	00c00104 	movi	r3,4
   14158:	10c00005 	stb	r3,0(r2)
        return (0);
   1415c:	0005883a 	mov	r2,zero
   14160:	00004206 	br	1426c <OSMboxPendAbort+0x158>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_MBOX) {       /* Validate event block type                */
   14164:	e0bffd17 	ldw	r2,-12(fp)
   14168:	10800003 	ldbu	r2,0(r2)
   1416c:	10803fcc 	andi	r2,r2,255
   14170:	10800060 	cmpeqi	r2,r2,1
   14174:	1000051e 	bne	r2,zero,1418c <OSMboxPendAbort+0x78>
        *perr = OS_ERR_EVENT_TYPE;
   14178:	e0bfff17 	ldw	r2,-4(fp)
   1417c:	00c00044 	movi	r3,1
   14180:	10c00005 	stb	r3,0(r2)
        return (0);
   14184:	0005883a 	mov	r2,zero
   14188:	00003806 	br	1426c <OSMboxPendAbort+0x158>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1418c:	0005303a 	rdctl	r2,status
   14190:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   14194:	e0fffa17 	ldw	r3,-24(fp)
   14198:	00bfff84 	movi	r2,-2
   1419c:	1884703a 	and	r2,r3,r2
   141a0:	1001703a 	wrctl	status,r2
  
  return context;
   141a4:	e0bffa17 	ldw	r2,-24(fp)
    }
    OS_ENTER_CRITICAL();
   141a8:	e0bff915 	stw	r2,-28(fp)
    if (pevent->OSEventGrp != 0) {                         /* See if any task waiting on mailbox?      */
   141ac:	e0bffd17 	ldw	r2,-12(fp)
   141b0:	10800283 	ldbu	r2,10(r2)
   141b4:	10803fcc 	andi	r2,r2,255
   141b8:	10002526 	beq	r2,zero,14250 <OSMboxPendAbort+0x13c>
        nbr_tasks = 0;
   141bc:	e03ff805 	stb	zero,-32(fp)
        switch (opt) {
   141c0:	e0bffe03 	ldbu	r2,-8(fp)
   141c4:	10800060 	cmpeqi	r2,r2,1
   141c8:	10000e26 	beq	r2,zero,14204 <OSMboxPendAbort+0xf0>
            case OS_PEND_OPT_BROADCAST:                    /* Do we need to abort ALL waiting tasks?   */
                 while (pevent->OSEventGrp != 0) {         /* Yes, ready ALL tasks waiting on mailbox  */
   141cc:	00000806 	br	141f0 <OSMboxPendAbort+0xdc>
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_MBOX, OS_STAT_PEND_ABORT);
   141d0:	e13ffd17 	ldw	r4,-12(fp)
   141d4:	000b883a 	mov	r5,zero
   141d8:	01800084 	movi	r6,2
   141dc:	01c00084 	movi	r7,2
   141e0:	0010fdc0 	call	10fdc <OS_EventTaskRdy>
                     nbr_tasks++;
   141e4:	e0bff803 	ldbu	r2,-32(fp)
   141e8:	10800044 	addi	r2,r2,1
   141ec:	e0bff805 	stb	r2,-32(fp)
    OS_ENTER_CRITICAL();
    if (pevent->OSEventGrp != 0) {                         /* See if any task waiting on mailbox?      */
        nbr_tasks = 0;
        switch (opt) {
            case OS_PEND_OPT_BROADCAST:                    /* Do we need to abort ALL waiting tasks?   */
                 while (pevent->OSEventGrp != 0) {         /* Yes, ready ALL tasks waiting on mailbox  */
   141f0:	e0bffd17 	ldw	r2,-12(fp)
   141f4:	10800283 	ldbu	r2,10(r2)
   141f8:	10803fcc 	andi	r2,r2,255
   141fc:	103ff41e 	bne	r2,zero,141d0 <__alt_mem_Flash_flash_data+0xf40141d0>
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_MBOX, OS_STAT_PEND_ABORT);
                     nbr_tasks++;
                 }
                 break;
   14200:	00000906 	br	14228 <OSMboxPendAbort+0x114>
             
            case OS_PEND_OPT_NONE:
            default:                                       /* No,  ready HPT       waiting on mailbox  */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_MBOX, OS_STAT_PEND_ABORT);
   14204:	e13ffd17 	ldw	r4,-12(fp)
   14208:	000b883a 	mov	r5,zero
   1420c:	01800084 	movi	r6,2
   14210:	01c00084 	movi	r7,2
   14214:	0010fdc0 	call	10fdc <OS_EventTaskRdy>
                 nbr_tasks++;
   14218:	e0bff803 	ldbu	r2,-32(fp)
   1421c:	10800044 	addi	r2,r2,1
   14220:	e0bff805 	stb	r2,-32(fp)
                 break;
   14224:	0001883a 	nop
   14228:	e0bff917 	ldw	r2,-28(fp)
   1422c:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   14230:	e0bffb17 	ldw	r2,-20(fp)
   14234:	1001703a 	wrctl	status,r2
        }
        OS_EXIT_CRITICAL();
        OS_Sched();                                        /* Find HPT ready to run                    */
   14238:	00119f40 	call	119f4 <OS_Sched>
        *perr = OS_ERR_PEND_ABORT;
   1423c:	e0bfff17 	ldw	r2,-4(fp)
   14240:	00c00384 	movi	r3,14
   14244:	10c00005 	stb	r3,0(r2)
        return (nbr_tasks);
   14248:	e0bff803 	ldbu	r2,-32(fp)
   1424c:	00000706 	br	1426c <OSMboxPendAbort+0x158>
   14250:	e0bff917 	ldw	r2,-28(fp)
   14254:	e0bffc15 	stw	r2,-16(fp)
   14258:	e0bffc17 	ldw	r2,-16(fp)
   1425c:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
   14260:	e0bfff17 	ldw	r2,-4(fp)
   14264:	10000005 	stb	zero,0(r2)
    return (0);                                            /* No tasks waiting on mailbox              */
   14268:	0005883a 	mov	r2,zero
}
   1426c:	e037883a 	mov	sp,fp
   14270:	dfc00117 	ldw	ra,4(sp)
   14274:	df000017 	ldw	fp,0(sp)
   14278:	dec00204 	addi	sp,sp,8
   1427c:	f800283a 	ret

00014280 <OSMboxPost>:
*********************************************************************************************************
*/

#if OS_MBOX_POST_EN > 0
INT8U  OSMboxPost (OS_EVENT *pevent, void *pmsg)
{
   14280:	defff704 	addi	sp,sp,-36
   14284:	dfc00815 	stw	ra,32(sp)
   14288:	df000715 	stw	fp,28(sp)
   1428c:	df000704 	addi	fp,sp,28
   14290:	e13ffe15 	stw	r4,-8(fp)
   14294:	e17fff15 	stw	r5,-4(fp)
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   14298:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
   1429c:	e0bffe17 	ldw	r2,-8(fp)
   142a0:	1000021e 	bne	r2,zero,142ac <OSMboxPost+0x2c>
        return (OS_ERR_PEVENT_NULL);
   142a4:	00800104 	movi	r2,4
   142a8:	00003406 	br	1437c <OSMboxPost+0xfc>
    }
    if (pmsg == (void *)0) {                          /* Make sure we are not posting a NULL pointer   */
   142ac:	e0bfff17 	ldw	r2,-4(fp)
   142b0:	1000021e 	bne	r2,zero,142bc <OSMboxPost+0x3c>
        return (OS_ERR_POST_NULL_PTR);
   142b4:	008000c4 	movi	r2,3
   142b8:	00003006 	br	1437c <OSMboxPost+0xfc>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_MBOX) {  /* Validate event block type                     */
   142bc:	e0bffe17 	ldw	r2,-8(fp)
   142c0:	10800003 	ldbu	r2,0(r2)
   142c4:	10803fcc 	andi	r2,r2,255
   142c8:	10800060 	cmpeqi	r2,r2,1
   142cc:	1000021e 	bne	r2,zero,142d8 <OSMboxPost+0x58>
        return (OS_ERR_EVENT_TYPE);
   142d0:	00800044 	movi	r2,1
   142d4:	00002906 	br	1437c <OSMboxPost+0xfc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   142d8:	0005303a 	rdctl	r2,status
   142dc:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   142e0:	e0fffa17 	ldw	r3,-24(fp)
   142e4:	00bfff84 	movi	r2,-2
   142e8:	1884703a 	and	r2,r3,r2
   142ec:	1001703a 	wrctl	status,r2
  
  return context;
   142f0:	e0bffa17 	ldw	r2,-24(fp)
    }
    OS_ENTER_CRITICAL();
   142f4:	e0bff915 	stw	r2,-28(fp)
    if (pevent->OSEventGrp != 0) {                    /* See if any task pending on mailbox            */
   142f8:	e0bffe17 	ldw	r2,-8(fp)
   142fc:	10800283 	ldbu	r2,10(r2)
   14300:	10803fcc 	andi	r2,r2,255
   14304:	10000c26 	beq	r2,zero,14338 <OSMboxPost+0xb8>
                                                      /* Ready HPT waiting on event                    */
        (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_MBOX, OS_STAT_PEND_OK);
   14308:	e13ffe17 	ldw	r4,-8(fp)
   1430c:	e17fff17 	ldw	r5,-4(fp)
   14310:	01800084 	movi	r6,2
   14314:	000f883a 	mov	r7,zero
   14318:	0010fdc0 	call	10fdc <OS_EventTaskRdy>
   1431c:	e0bff917 	ldw	r2,-28(fp)
   14320:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   14324:	e0bffb17 	ldw	r2,-20(fp)
   14328:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                                   /* Find highest priority task ready to run       */
   1432c:	00119f40 	call	119f4 <OS_Sched>
        return (OS_ERR_NONE);
   14330:	0005883a 	mov	r2,zero
   14334:	00001106 	br	1437c <OSMboxPost+0xfc>
    }
    if (pevent->OSEventPtr != (void *)0) {            /* Make sure mailbox doesn't already have a msg  */
   14338:	e0bffe17 	ldw	r2,-8(fp)
   1433c:	10800117 	ldw	r2,4(r2)
   14340:	10000626 	beq	r2,zero,1435c <OSMboxPost+0xdc>
   14344:	e0bff917 	ldw	r2,-28(fp)
   14348:	e0bffc15 	stw	r2,-16(fp)
   1434c:	e0bffc17 	ldw	r2,-16(fp)
   14350:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_MBOX_FULL);
   14354:	00800504 	movi	r2,20
   14358:	00000806 	br	1437c <OSMboxPost+0xfc>
    }
    pevent->OSEventPtr = pmsg;                        /* Place message in mailbox                      */
   1435c:	e0bffe17 	ldw	r2,-8(fp)
   14360:	e0ffff17 	ldw	r3,-4(fp)
   14364:	10c00115 	stw	r3,4(r2)
   14368:	e0bff917 	ldw	r2,-28(fp)
   1436c:	e0bffd15 	stw	r2,-12(fp)
   14370:	e0bffd17 	ldw	r2,-12(fp)
   14374:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
   14378:	0005883a 	mov	r2,zero
}
   1437c:	e037883a 	mov	sp,fp
   14380:	dfc00117 	ldw	ra,4(sp)
   14384:	df000017 	ldw	fp,0(sp)
   14388:	dec00204 	addi	sp,sp,8
   1438c:	f800283a 	ret

00014390 <OSMboxPostOpt>:
*********************************************************************************************************
*/

#if OS_MBOX_POST_OPT_EN > 0
INT8U  OSMboxPostOpt (OS_EVENT *pevent, void *pmsg, INT8U opt)
{
   14390:	defff604 	addi	sp,sp,-40
   14394:	dfc00915 	stw	ra,36(sp)
   14398:	df000815 	stw	fp,32(sp)
   1439c:	df000804 	addi	fp,sp,32
   143a0:	e13ffd15 	stw	r4,-12(fp)
   143a4:	e17ffe15 	stw	r5,-8(fp)
   143a8:	3005883a 	mov	r2,r6
   143ac:	e0bfff05 	stb	r2,-4(fp)
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   143b0:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
   143b4:	e0bffd17 	ldw	r2,-12(fp)
   143b8:	1000021e 	bne	r2,zero,143c4 <OSMboxPostOpt+0x34>
        return (OS_ERR_PEVENT_NULL);
   143bc:	00800104 	movi	r2,4
   143c0:	00004506 	br	144d8 <OSMboxPostOpt+0x148>
    }
    if (pmsg == (void *)0) {                          /* Make sure we are not posting a NULL pointer   */
   143c4:	e0bffe17 	ldw	r2,-8(fp)
   143c8:	1000021e 	bne	r2,zero,143d4 <OSMboxPostOpt+0x44>
        return (OS_ERR_POST_NULL_PTR);
   143cc:	008000c4 	movi	r2,3
   143d0:	00004106 	br	144d8 <OSMboxPostOpt+0x148>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_MBOX) {  /* Validate event block type                     */
   143d4:	e0bffd17 	ldw	r2,-12(fp)
   143d8:	10800003 	ldbu	r2,0(r2)
   143dc:	10803fcc 	andi	r2,r2,255
   143e0:	10800060 	cmpeqi	r2,r2,1
   143e4:	1000021e 	bne	r2,zero,143f0 <OSMboxPostOpt+0x60>
        return (OS_ERR_EVENT_TYPE);
   143e8:	00800044 	movi	r2,1
   143ec:	00003a06 	br	144d8 <OSMboxPostOpt+0x148>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   143f0:	0005303a 	rdctl	r2,status
   143f4:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   143f8:	e0fff917 	ldw	r3,-28(fp)
   143fc:	00bfff84 	movi	r2,-2
   14400:	1884703a 	and	r2,r3,r2
   14404:	1001703a 	wrctl	status,r2
  
  return context;
   14408:	e0bff917 	ldw	r2,-28(fp)
    }
    OS_ENTER_CRITICAL();
   1440c:	e0bff815 	stw	r2,-32(fp)
    if (pevent->OSEventGrp != 0) {                    /* See if any task pending on mailbox            */
   14410:	e0bffd17 	ldw	r2,-12(fp)
   14414:	10800283 	ldbu	r2,10(r2)
   14418:	10803fcc 	andi	r2,r2,255
   1441c:	10001d26 	beq	r2,zero,14494 <OSMboxPostOpt+0x104>
        if ((opt & OS_POST_OPT_BROADCAST) != 0x00) {  /* Do we need to post msg to ALL waiting tasks ? */
   14420:	e0bfff03 	ldbu	r2,-4(fp)
   14424:	1080004c 	andi	r2,r2,1
   14428:	10000b26 	beq	r2,zero,14458 <OSMboxPostOpt+0xc8>
            while (pevent->OSEventGrp != 0) {         /* Yes, Post to ALL tasks waiting on mailbox     */
   1442c:	00000506 	br	14444 <OSMboxPostOpt+0xb4>
                (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_MBOX, OS_STAT_PEND_OK);
   14430:	e13ffd17 	ldw	r4,-12(fp)
   14434:	e17ffe17 	ldw	r5,-8(fp)
   14438:	01800084 	movi	r6,2
   1443c:	000f883a 	mov	r7,zero
   14440:	0010fdc0 	call	10fdc <OS_EventTaskRdy>
        return (OS_ERR_EVENT_TYPE);
    }
    OS_ENTER_CRITICAL();
    if (pevent->OSEventGrp != 0) {                    /* See if any task pending on mailbox            */
        if ((opt & OS_POST_OPT_BROADCAST) != 0x00) {  /* Do we need to post msg to ALL waiting tasks ? */
            while (pevent->OSEventGrp != 0) {         /* Yes, Post to ALL tasks waiting on mailbox     */
   14444:	e0bffd17 	ldw	r2,-12(fp)
   14448:	10800283 	ldbu	r2,10(r2)
   1444c:	10803fcc 	andi	r2,r2,255
   14450:	103ff71e 	bne	r2,zero,14430 <__alt_mem_Flash_flash_data+0xf4014430>
   14454:	00000506 	br	1446c <OSMboxPostOpt+0xdc>
                (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_MBOX, OS_STAT_PEND_OK);
            }
        } else {                                      /* No,  Post to HPT waiting on mbox              */
            (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_MBOX, OS_STAT_PEND_OK);
   14458:	e13ffd17 	ldw	r4,-12(fp)
   1445c:	e17ffe17 	ldw	r5,-8(fp)
   14460:	01800084 	movi	r6,2
   14464:	000f883a 	mov	r7,zero
   14468:	0010fdc0 	call	10fdc <OS_EventTaskRdy>
   1446c:	e0bff817 	ldw	r2,-32(fp)
   14470:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   14474:	e0bffa17 	ldw	r2,-24(fp)
   14478:	1001703a 	wrctl	status,r2
        }
        OS_EXIT_CRITICAL();
        if ((opt & OS_POST_OPT_NO_SCHED) == 0) {	  /* See if scheduler needs to be invoked          */
   1447c:	e0bfff03 	ldbu	r2,-4(fp)
   14480:	1080010c 	andi	r2,r2,4
   14484:	1000011e 	bne	r2,zero,1448c <OSMboxPostOpt+0xfc>
            OS_Sched();                               /* Find HPT ready to run                         */
   14488:	00119f40 	call	119f4 <OS_Sched>
        }
        return (OS_ERR_NONE);
   1448c:	0005883a 	mov	r2,zero
   14490:	00001106 	br	144d8 <OSMboxPostOpt+0x148>
    }
    if (pevent->OSEventPtr != (void *)0) {            /* Make sure mailbox doesn't already have a msg  */
   14494:	e0bffd17 	ldw	r2,-12(fp)
   14498:	10800117 	ldw	r2,4(r2)
   1449c:	10000626 	beq	r2,zero,144b8 <OSMboxPostOpt+0x128>
   144a0:	e0bff817 	ldw	r2,-32(fp)
   144a4:	e0bffb15 	stw	r2,-20(fp)
   144a8:	e0bffb17 	ldw	r2,-20(fp)
   144ac:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_MBOX_FULL);
   144b0:	00800504 	movi	r2,20
   144b4:	00000806 	br	144d8 <OSMboxPostOpt+0x148>
    }
    pevent->OSEventPtr = pmsg;                        /* Place message in mailbox                      */
   144b8:	e0bffd17 	ldw	r2,-12(fp)
   144bc:	e0fffe17 	ldw	r3,-8(fp)
   144c0:	10c00115 	stw	r3,4(r2)
   144c4:	e0bff817 	ldw	r2,-32(fp)
   144c8:	e0bffc15 	stw	r2,-16(fp)
   144cc:	e0bffc17 	ldw	r2,-16(fp)
   144d0:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
   144d4:	0005883a 	mov	r2,zero
}
   144d8:	e037883a 	mov	sp,fp
   144dc:	dfc00117 	ldw	ra,4(sp)
   144e0:	df000017 	ldw	fp,0(sp)
   144e4:	dec00204 	addi	sp,sp,8
   144e8:	f800283a 	ret

000144ec <OSMboxQuery>:
*********************************************************************************************************
*/

#if OS_MBOX_QUERY_EN > 0
INT8U  OSMboxQuery (OS_EVENT *pevent, OS_MBOX_DATA *p_mbox_data)
{
   144ec:	defff704 	addi	sp,sp,-36
   144f0:	df000815 	stw	fp,32(sp)
   144f4:	df000804 	addi	fp,sp,32
   144f8:	e13ffe15 	stw	r4,-8(fp)
   144fc:	e17fff15 	stw	r5,-4(fp)
#else
    INT16U    *psrc;
    INT16U    *pdest;
#endif
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
   14500:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
   14504:	e0bffe17 	ldw	r2,-8(fp)
   14508:	1000021e 	bne	r2,zero,14514 <OSMboxQuery+0x28>
        return (OS_ERR_PEVENT_NULL);
   1450c:	00800104 	movi	r2,4
   14510:	00003606 	br	145ec <OSMboxQuery+0x100>
    }
    if (p_mbox_data == (OS_MBOX_DATA *)0) {                /* Validate 'p_mbox_data'                   */
   14514:	e0bfff17 	ldw	r2,-4(fp)
   14518:	1000021e 	bne	r2,zero,14524 <OSMboxQuery+0x38>
        return (OS_ERR_PDATA_NULL);
   1451c:	00800244 	movi	r2,9
   14520:	00003206 	br	145ec <OSMboxQuery+0x100>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_MBOX) {       /* Validate event block type                */
   14524:	e0bffe17 	ldw	r2,-8(fp)
   14528:	10800003 	ldbu	r2,0(r2)
   1452c:	10803fcc 	andi	r2,r2,255
   14530:	10800060 	cmpeqi	r2,r2,1
   14534:	1000021e 	bne	r2,zero,14540 <OSMboxQuery+0x54>
        return (OS_ERR_EVENT_TYPE);
   14538:	00800044 	movi	r2,1
   1453c:	00002b06 	br	145ec <OSMboxQuery+0x100>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   14540:	0005303a 	rdctl	r2,status
   14544:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   14548:	e0fffc17 	ldw	r3,-16(fp)
   1454c:	00bfff84 	movi	r2,-2
   14550:	1884703a 	and	r2,r3,r2
   14554:	1001703a 	wrctl	status,r2
  
  return context;
   14558:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
   1455c:	e0bffb15 	stw	r2,-20(fp)
    p_mbox_data->OSEventGrp = pevent->OSEventGrp;          /* Copy message mailbox wait list           */
   14560:	e0bffe17 	ldw	r2,-8(fp)
   14564:	10c00283 	ldbu	r3,10(r2)
   14568:	e0bfff17 	ldw	r2,-4(fp)
   1456c:	10c001c5 	stb	r3,7(r2)
    psrc                    = &pevent->OSEventTbl[0];
   14570:	e0bffe17 	ldw	r2,-8(fp)
   14574:	108002c4 	addi	r2,r2,11
   14578:	e0bff915 	stw	r2,-28(fp)
    pdest                   = &p_mbox_data->OSEventTbl[0];
   1457c:	e0bfff17 	ldw	r2,-4(fp)
   14580:	10800104 	addi	r2,r2,4
   14584:	e0bffa15 	stw	r2,-24(fp)
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
   14588:	e03ff805 	stb	zero,-32(fp)
   1458c:	00000b06 	br	145bc <OSMboxQuery+0xd0>
        *pdest++ = *psrc++;
   14590:	e0bffa17 	ldw	r2,-24(fp)
   14594:	10c00044 	addi	r3,r2,1
   14598:	e0fffa15 	stw	r3,-24(fp)
   1459c:	e0fff917 	ldw	r3,-28(fp)
   145a0:	19000044 	addi	r4,r3,1
   145a4:	e13ff915 	stw	r4,-28(fp)
   145a8:	18c00003 	ldbu	r3,0(r3)
   145ac:	10c00005 	stb	r3,0(r2)
    }
    OS_ENTER_CRITICAL();
    p_mbox_data->OSEventGrp = pevent->OSEventGrp;          /* Copy message mailbox wait list           */
    psrc                    = &pevent->OSEventTbl[0];
    pdest                   = &p_mbox_data->OSEventTbl[0];
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
   145b0:	e0bff803 	ldbu	r2,-32(fp)
   145b4:	10800044 	addi	r2,r2,1
   145b8:	e0bff805 	stb	r2,-32(fp)
   145bc:	e0bff803 	ldbu	r2,-32(fp)
   145c0:	108000f0 	cmpltui	r2,r2,3
   145c4:	103ff21e 	bne	r2,zero,14590 <__alt_mem_Flash_flash_data+0xf4014590>
        *pdest++ = *psrc++;
    }
    p_mbox_data->OSMsg = pevent->OSEventPtr;               /* Get message from mailbox                 */
   145c8:	e0bffe17 	ldw	r2,-8(fp)
   145cc:	10c00117 	ldw	r3,4(r2)
   145d0:	e0bfff17 	ldw	r2,-4(fp)
   145d4:	10c00015 	stw	r3,0(r2)
   145d8:	e0bffb17 	ldw	r2,-20(fp)
   145dc:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   145e0:	e0bffd17 	ldw	r2,-12(fp)
   145e4:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
   145e8:	0005883a 	mov	r2,zero
}
   145ec:	e037883a 	mov	sp,fp
   145f0:	df000017 	ldw	fp,0(sp)
   145f4:	dec00104 	addi	sp,sp,4
   145f8:	f800283a 	ret

000145fc <OSMemCreate>:
*                              free partition is available.
*********************************************************************************************************
*/

OS_MEM  *OSMemCreate (void *addr, INT32U nblks, INT32U blksize, INT8U *perr)
{
   145fc:	defff404 	addi	sp,sp,-48
   14600:	df000b15 	stw	fp,44(sp)
   14604:	df000b04 	addi	fp,sp,44
   14608:	e13ffc15 	stw	r4,-16(fp)
   1460c:	e17ffd15 	stw	r5,-12(fp)
   14610:	e1bffe15 	stw	r6,-8(fp)
   14614:	e1ffff15 	stw	r7,-4(fp)
    OS_MEM    *pmem;
    INT8U     *pblk;
    void     **plink;
    INT32U     i;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   14618:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0              
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
   1461c:	e0bfff17 	ldw	r2,-4(fp)
   14620:	1000021e 	bne	r2,zero,1462c <OSMemCreate+0x30>
        return ((OS_MEM *)0);
   14624:	0005883a 	mov	r2,zero
   14628:	00006d06 	br	147e0 <OSMemCreate+0x1e4>
    }
    if (addr == (void *)0) {                          /* Must pass a valid address for the memory part.*/
   1462c:	e0bffc17 	ldw	r2,-16(fp)
   14630:	1000051e 	bne	r2,zero,14648 <OSMemCreate+0x4c>
        *perr = OS_ERR_MEM_INVALID_ADDR;
   14634:	e0bfff17 	ldw	r2,-4(fp)
   14638:	00c01884 	movi	r3,98
   1463c:	10c00005 	stb	r3,0(r2)
        return ((OS_MEM *)0);
   14640:	0005883a 	mov	r2,zero
   14644:	00006606 	br	147e0 <OSMemCreate+0x1e4>
    }
    if (((INT32U)addr & (sizeof(void *) - 1)) != 0){  /* Must be pointer size aligned                  */
   14648:	e0bffc17 	ldw	r2,-16(fp)
   1464c:	108000cc 	andi	r2,r2,3
   14650:	10000526 	beq	r2,zero,14668 <OSMemCreate+0x6c>
        *perr = OS_ERR_MEM_INVALID_ADDR;
   14654:	e0bfff17 	ldw	r2,-4(fp)
   14658:	00c01884 	movi	r3,98
   1465c:	10c00005 	stb	r3,0(r2)
        return ((OS_MEM *)0);
   14660:	0005883a 	mov	r2,zero
   14664:	00005e06 	br	147e0 <OSMemCreate+0x1e4>
    }
    if (nblks < 2) {                                  /* Must have at least 2 blocks per partition     */
   14668:	e0bffd17 	ldw	r2,-12(fp)
   1466c:	108000a8 	cmpgeui	r2,r2,2
   14670:	1000051e 	bne	r2,zero,14688 <OSMemCreate+0x8c>
        *perr = OS_ERR_MEM_INVALID_BLKS;
   14674:	e0bfff17 	ldw	r2,-4(fp)
   14678:	00c016c4 	movi	r3,91
   1467c:	10c00005 	stb	r3,0(r2)
        return ((OS_MEM *)0);
   14680:	0005883a 	mov	r2,zero
   14684:	00005606 	br	147e0 <OSMemCreate+0x1e4>
    }
    if (blksize < sizeof(void *)) {                   /* Must contain space for at least a pointer     */
   14688:	e0bffe17 	ldw	r2,-8(fp)
   1468c:	10800128 	cmpgeui	r2,r2,4
   14690:	1000051e 	bne	r2,zero,146a8 <OSMemCreate+0xac>
        *perr = OS_ERR_MEM_INVALID_SIZE;
   14694:	e0bfff17 	ldw	r2,-4(fp)
   14698:	00c01704 	movi	r3,92
   1469c:	10c00005 	stb	r3,0(r2)
        return ((OS_MEM *)0);
   146a0:	0005883a 	mov	r2,zero
   146a4:	00004e06 	br	147e0 <OSMemCreate+0x1e4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   146a8:	0005303a 	rdctl	r2,status
   146ac:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   146b0:	e0fffa17 	ldw	r3,-24(fp)
   146b4:	00bfff84 	movi	r2,-2
   146b8:	1884703a 	and	r2,r3,r2
   146bc:	1001703a 	wrctl	status,r2
  
  return context;
   146c0:	e0bffa17 	ldw	r2,-24(fp)
    }
#endif
    OS_ENTER_CRITICAL();
   146c4:	e0bff815 	stw	r2,-32(fp)
    pmem = OSMemFreeList;                             /* Get next free memory partition                */
   146c8:	008000b4 	movhi	r2,2
   146cc:	10835f04 	addi	r2,r2,3452
   146d0:	10800017 	ldw	r2,0(r2)
   146d4:	e0bff915 	stw	r2,-28(fp)
    if (OSMemFreeList != (OS_MEM *)0) {               /* See if pool of free partitions was empty      */
   146d8:	008000b4 	movhi	r2,2
   146dc:	10835f04 	addi	r2,r2,3452
   146e0:	10800017 	ldw	r2,0(r2)
   146e4:	10000726 	beq	r2,zero,14704 <OSMemCreate+0x108>
        OSMemFreeList = (OS_MEM *)OSMemFreeList->OSMemFreeList;
   146e8:	008000b4 	movhi	r2,2
   146ec:	10835f04 	addi	r2,r2,3452
   146f0:	10800017 	ldw	r2,0(r2)
   146f4:	10c00117 	ldw	r3,4(r2)
   146f8:	008000b4 	movhi	r2,2
   146fc:	10835f04 	addi	r2,r2,3452
   14700:	10c00015 	stw	r3,0(r2)
   14704:	e0bff817 	ldw	r2,-32(fp)
   14708:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1470c:	e0bffb17 	ldw	r2,-20(fp)
   14710:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    if (pmem == (OS_MEM *)0) {                        /* See if we have a memory partition             */
   14714:	e0bff917 	ldw	r2,-28(fp)
   14718:	1000051e 	bne	r2,zero,14730 <OSMemCreate+0x134>
        *perr = OS_ERR_MEM_INVALID_PART;
   1471c:	e0bfff17 	ldw	r2,-4(fp)
   14720:	00c01684 	movi	r3,90
   14724:	10c00005 	stb	r3,0(r2)
        return ((OS_MEM *)0);
   14728:	0005883a 	mov	r2,zero
   1472c:	00002c06 	br	147e0 <OSMemCreate+0x1e4>
    }
    plink = (void **)addr;                            /* Create linked list of free memory blocks      */
   14730:	e0bffc17 	ldw	r2,-16(fp)
   14734:	e0bff615 	stw	r2,-40(fp)
    pblk  = (INT8U *)((INT32U)addr + blksize);
   14738:	e0fffc17 	ldw	r3,-16(fp)
   1473c:	e0bffe17 	ldw	r2,-8(fp)
   14740:	1885883a 	add	r2,r3,r2
   14744:	e0bff515 	stw	r2,-44(fp)
    for (i = 0; i < (nblks - 1); i++) {
   14748:	e03ff715 	stw	zero,-36(fp)
   1474c:	00000c06 	br	14780 <OSMemCreate+0x184>
       *plink = (void *)pblk;                         /* Save pointer to NEXT block in CURRENT block   */
   14750:	e0bff617 	ldw	r2,-40(fp)
   14754:	e0fff517 	ldw	r3,-44(fp)
   14758:	10c00015 	stw	r3,0(r2)
        plink = (void **)pblk;                        /* Position to  NEXT      block                  */
   1475c:	e0bff517 	ldw	r2,-44(fp)
   14760:	e0bff615 	stw	r2,-40(fp)
        pblk  = (INT8U *)((INT32U)pblk + blksize);    /* Point to the FOLLOWING block                  */
   14764:	e0fff517 	ldw	r3,-44(fp)
   14768:	e0bffe17 	ldw	r2,-8(fp)
   1476c:	1885883a 	add	r2,r3,r2
   14770:	e0bff515 	stw	r2,-44(fp)
        *perr = OS_ERR_MEM_INVALID_PART;
        return ((OS_MEM *)0);
    }
    plink = (void **)addr;                            /* Create linked list of free memory blocks      */
    pblk  = (INT8U *)((INT32U)addr + blksize);
    for (i = 0; i < (nblks - 1); i++) {
   14774:	e0bff717 	ldw	r2,-36(fp)
   14778:	10800044 	addi	r2,r2,1
   1477c:	e0bff715 	stw	r2,-36(fp)
   14780:	e0bffd17 	ldw	r2,-12(fp)
   14784:	10bfffc4 	addi	r2,r2,-1
   14788:	e0fff717 	ldw	r3,-36(fp)
   1478c:	18bff036 	bltu	r3,r2,14750 <__alt_mem_Flash_flash_data+0xf4014750>
       *plink = (void *)pblk;                         /* Save pointer to NEXT block in CURRENT block   */
        plink = (void **)pblk;                        /* Position to  NEXT      block                  */
        pblk  = (INT8U *)((INT32U)pblk + blksize);    /* Point to the FOLLOWING block                  */
    }
    *plink              = (void *)0;                  /* Last memory block points to NULL              */
   14790:	e0bff617 	ldw	r2,-40(fp)
   14794:	10000015 	stw	zero,0(r2)
    pmem->OSMemAddr     = addr;                       /* Store start address of memory partition       */
   14798:	e0bff917 	ldw	r2,-28(fp)
   1479c:	e0fffc17 	ldw	r3,-16(fp)
   147a0:	10c00015 	stw	r3,0(r2)
    pmem->OSMemFreeList = addr;                       /* Initialize pointer to pool of free blocks     */
   147a4:	e0bff917 	ldw	r2,-28(fp)
   147a8:	e0fffc17 	ldw	r3,-16(fp)
   147ac:	10c00115 	stw	r3,4(r2)
    pmem->OSMemNFree    = nblks;                      /* Store number of free blocks in MCB            */
   147b0:	e0bff917 	ldw	r2,-28(fp)
   147b4:	e0fffd17 	ldw	r3,-12(fp)
   147b8:	10c00415 	stw	r3,16(r2)
    pmem->OSMemNBlks    = nblks;
   147bc:	e0bff917 	ldw	r2,-28(fp)
   147c0:	e0fffd17 	ldw	r3,-12(fp)
   147c4:	10c00315 	stw	r3,12(r2)
    pmem->OSMemBlkSize  = blksize;                    /* Store block size of each memory blocks        */
   147c8:	e0bff917 	ldw	r2,-28(fp)
   147cc:	e0fffe17 	ldw	r3,-8(fp)
   147d0:	10c00215 	stw	r3,8(r2)
    *perr               = OS_ERR_NONE;
   147d4:	e0bfff17 	ldw	r2,-4(fp)
   147d8:	10000005 	stb	zero,0(r2)
    return (pmem);
   147dc:	e0bff917 	ldw	r2,-28(fp)
}
   147e0:	e037883a 	mov	sp,fp
   147e4:	df000017 	ldw	fp,0(sp)
   147e8:	dec00104 	addi	sp,sp,4
   147ec:	f800283a 	ret

000147f0 <OSMemGet>:
*               A pointer to NULL if an error is detected
*********************************************************************************************************
*/

void  *OSMemGet (OS_MEM *pmem, INT8U *perr)
{
   147f0:	defff804 	addi	sp,sp,-32
   147f4:	df000715 	stw	fp,28(sp)
   147f8:	df000704 	addi	fp,sp,28
   147fc:	e13ffe15 	stw	r4,-8(fp)
   14800:	e17fff15 	stw	r5,-4(fp)
    void      *pblk;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   14804:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
   14808:	e0bfff17 	ldw	r2,-4(fp)
   1480c:	1000021e 	bne	r2,zero,14818 <OSMemGet+0x28>
        return ((void *)0);
   14810:	0005883a 	mov	r2,zero
   14814:	00002e06 	br	148d0 <OSMemGet+0xe0>
    }
    if (pmem == (OS_MEM *)0) {                        /* Must point to a valid memory partition        */
   14818:	e0bffe17 	ldw	r2,-8(fp)
   1481c:	1000051e 	bne	r2,zero,14834 <OSMemGet+0x44>
        *perr = OS_ERR_MEM_INVALID_PMEM;
   14820:	e0bfff17 	ldw	r2,-4(fp)
   14824:	00c01804 	movi	r3,96
   14828:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
   1482c:	0005883a 	mov	r2,zero
   14830:	00002706 	br	148d0 <OSMemGet+0xe0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   14834:	0005303a 	rdctl	r2,status
   14838:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1483c:	e0fffb17 	ldw	r3,-20(fp)
   14840:	00bfff84 	movi	r2,-2
   14844:	1884703a 	and	r2,r3,r2
   14848:	1001703a 	wrctl	status,r2
  
  return context;
   1484c:	e0bffb17 	ldw	r2,-20(fp)
    }
#endif
    OS_ENTER_CRITICAL();
   14850:	e0bff915 	stw	r2,-28(fp)
    if (pmem->OSMemNFree > 0) {                       /* See if there are any free memory blocks       */
   14854:	e0bffe17 	ldw	r2,-8(fp)
   14858:	10800417 	ldw	r2,16(r2)
   1485c:	10001426 	beq	r2,zero,148b0 <OSMemGet+0xc0>
        pblk                = pmem->OSMemFreeList;    /* Yes, point to next free memory block          */
   14860:	e0bffe17 	ldw	r2,-8(fp)
   14864:	10800117 	ldw	r2,4(r2)
   14868:	e0bffa15 	stw	r2,-24(fp)
        pmem->OSMemFreeList = *(void **)pblk;         /*      Adjust pointer to new free list          */
   1486c:	e0bffa17 	ldw	r2,-24(fp)
   14870:	10c00017 	ldw	r3,0(r2)
   14874:	e0bffe17 	ldw	r2,-8(fp)
   14878:	10c00115 	stw	r3,4(r2)
        pmem->OSMemNFree--;                           /*      One less memory block in this partition  */
   1487c:	e0bffe17 	ldw	r2,-8(fp)
   14880:	10800417 	ldw	r2,16(r2)
   14884:	10ffffc4 	addi	r3,r2,-1
   14888:	e0bffe17 	ldw	r2,-8(fp)
   1488c:	10c00415 	stw	r3,16(r2)
   14890:	e0bff917 	ldw	r2,-28(fp)
   14894:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   14898:	e0bffc17 	ldw	r2,-16(fp)
   1489c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_NONE;                          /*      No error                                 */
   148a0:	e0bfff17 	ldw	r2,-4(fp)
   148a4:	10000005 	stb	zero,0(r2)
        return (pblk);                                /*      Return memory block to caller            */
   148a8:	e0bffa17 	ldw	r2,-24(fp)
   148ac:	00000806 	br	148d0 <OSMemGet+0xe0>
   148b0:	e0bff917 	ldw	r2,-28(fp)
   148b4:	e0bffd15 	stw	r2,-12(fp)
   148b8:	e0bffd17 	ldw	r2,-12(fp)
   148bc:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_MEM_NO_FREE_BLKS;                  /* No,  Notify caller of empty memory partition  */
   148c0:	e0bfff17 	ldw	r2,-4(fp)
   148c4:	00c01744 	movi	r3,93
   148c8:	10c00005 	stb	r3,0(r2)
    return ((void *)0);                               /*      Return NULL pointer to caller            */
   148cc:	0005883a 	mov	r2,zero
}
   148d0:	e037883a 	mov	sp,fp
   148d4:	df000017 	ldw	fp,0(sp)
   148d8:	dec00104 	addi	sp,sp,4
   148dc:	f800283a 	ret

000148e0 <OSMemNameGet>:
*********************************************************************************************************
*/

#if OS_MEM_NAME_SIZE > 1
INT8U  OSMemNameGet (OS_MEM *pmem, INT8U *pname, INT8U *perr)
{
   148e0:	defff704 	addi	sp,sp,-36
   148e4:	dfc00815 	stw	ra,32(sp)
   148e8:	df000715 	stw	fp,28(sp)
   148ec:	df000704 	addi	fp,sp,28
   148f0:	e13ffd15 	stw	r4,-12(fp)
   148f4:	e17ffe15 	stw	r5,-8(fp)
   148f8:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   148fc:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
   14900:	e0bfff17 	ldw	r2,-4(fp)
   14904:	1000021e 	bne	r2,zero,14910 <OSMemNameGet+0x30>
        return (0);
   14908:	0005883a 	mov	r2,zero
   1490c:	00002d06 	br	149c4 <OSMemNameGet+0xe4>
    }
    if (pmem == (OS_MEM *)0) {                   /* Is 'pmem' a NULL pointer?                          */
   14910:	e0bffd17 	ldw	r2,-12(fp)
   14914:	1000051e 	bne	r2,zero,1492c <OSMemNameGet+0x4c>
        *perr = OS_ERR_MEM_INVALID_PMEM;
   14918:	e0bfff17 	ldw	r2,-4(fp)
   1491c:	00c01804 	movi	r3,96
   14920:	10c00005 	stb	r3,0(r2)
        return (0);
   14924:	0005883a 	mov	r2,zero
   14928:	00002606 	br	149c4 <OSMemNameGet+0xe4>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
   1492c:	e0bffe17 	ldw	r2,-8(fp)
   14930:	1000051e 	bne	r2,zero,14948 <OSMemNameGet+0x68>
        *perr = OS_ERR_PNAME_NULL;
   14934:	e0bfff17 	ldw	r2,-4(fp)
   14938:	00c00304 	movi	r3,12
   1493c:	10c00005 	stb	r3,0(r2)
        return (0);
   14940:	0005883a 	mov	r2,zero
   14944:	00001f06 	br	149c4 <OSMemNameGet+0xe4>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
   14948:	008000b4 	movhi	r2,2
   1494c:	10836404 	addi	r2,r2,3472
   14950:	10800003 	ldbu	r2,0(r2)
   14954:	10803fcc 	andi	r2,r2,255
   14958:	10000526 	beq	r2,zero,14970 <OSMemNameGet+0x90>
        *perr = OS_ERR_NAME_GET_ISR;
   1495c:	e0bfff17 	ldw	r2,-4(fp)
   14960:	00c00444 	movi	r3,17
   14964:	10c00005 	stb	r3,0(r2)
        return (0);
   14968:	0005883a 	mov	r2,zero
   1496c:	00001506 	br	149c4 <OSMemNameGet+0xe4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   14970:	0005303a 	rdctl	r2,status
   14974:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   14978:	e0fffb17 	ldw	r3,-20(fp)
   1497c:	00bfff84 	movi	r2,-2
   14980:	1884703a 	and	r2,r3,r2
   14984:	1001703a 	wrctl	status,r2
  
  return context;
   14988:	e0bffb17 	ldw	r2,-20(fp)
    }
    OS_ENTER_CRITICAL();
   1498c:	e0bff915 	stw	r2,-28(fp)
    len   = OS_StrCopy(pname, pmem->OSMemName);  /* Copy name from OS_MEM                              */
   14990:	e0bffd17 	ldw	r2,-12(fp)
   14994:	10800504 	addi	r2,r2,20
   14998:	e13ffe17 	ldw	r4,-8(fp)
   1499c:	100b883a 	mov	r5,r2
   149a0:	0011b300 	call	11b30 <OS_StrCopy>
   149a4:	e0bffa05 	stb	r2,-24(fp)
   149a8:	e0bff917 	ldw	r2,-28(fp)
   149ac:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   149b0:	e0bffc17 	ldw	r2,-16(fp)
   149b4:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
   149b8:	e0bfff17 	ldw	r2,-4(fp)
   149bc:	10000005 	stb	zero,0(r2)
    return (len);
   149c0:	e0bffa03 	ldbu	r2,-24(fp)
}
   149c4:	e037883a 	mov	sp,fp
   149c8:	dfc00117 	ldw	ra,4(sp)
   149cc:	df000017 	ldw	fp,0(sp)
   149d0:	dec00204 	addi	sp,sp,8
   149d4:	f800283a 	ret

000149d8 <OSMemNameSet>:
*********************************************************************************************************
*/

#if OS_MEM_NAME_SIZE > 1
void  OSMemNameSet (OS_MEM *pmem, INT8U *pname, INT8U *perr)
{
   149d8:	defff604 	addi	sp,sp,-40
   149dc:	dfc00915 	stw	ra,36(sp)
   149e0:	df000815 	stw	fp,32(sp)
   149e4:	df000804 	addi	fp,sp,32
   149e8:	e13ffd15 	stw	r4,-12(fp)
   149ec:	e17ffe15 	stw	r5,-8(fp)
   149f0:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   149f4:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
   149f8:	e0bfff17 	ldw	r2,-4(fp)
   149fc:	1000011e 	bne	r2,zero,14a04 <OSMemNameSet+0x2c>
        return;
   14a00:	00003606 	br	14adc <OSMemNameSet+0x104>
    }
    if (pmem == (OS_MEM *)0) {                   /* Is 'pmem' a NULL pointer?                          */
   14a04:	e0bffd17 	ldw	r2,-12(fp)
   14a08:	1000041e 	bne	r2,zero,14a1c <OSMemNameSet+0x44>
        *perr = OS_ERR_MEM_INVALID_PMEM;
   14a0c:	e0bfff17 	ldw	r2,-4(fp)
   14a10:	00c01804 	movi	r3,96
   14a14:	10c00005 	stb	r3,0(r2)
        return;
   14a18:	00003006 	br	14adc <OSMemNameSet+0x104>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
   14a1c:	e0bffe17 	ldw	r2,-8(fp)
   14a20:	1000041e 	bne	r2,zero,14a34 <OSMemNameSet+0x5c>
        *perr = OS_ERR_PNAME_NULL;
   14a24:	e0bfff17 	ldw	r2,-4(fp)
   14a28:	00c00304 	movi	r3,12
   14a2c:	10c00005 	stb	r3,0(r2)
        return;
   14a30:	00002a06 	br	14adc <OSMemNameSet+0x104>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
   14a34:	008000b4 	movhi	r2,2
   14a38:	10836404 	addi	r2,r2,3472
   14a3c:	10800003 	ldbu	r2,0(r2)
   14a40:	10803fcc 	andi	r2,r2,255
   14a44:	10000426 	beq	r2,zero,14a58 <OSMemNameSet+0x80>
        *perr = OS_ERR_NAME_SET_ISR;
   14a48:	e0bfff17 	ldw	r2,-4(fp)
   14a4c:	00c00484 	movi	r3,18
   14a50:	10c00005 	stb	r3,0(r2)
        return;
   14a54:	00002106 	br	14adc <OSMemNameSet+0x104>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   14a58:	0005303a 	rdctl	r2,status
   14a5c:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   14a60:	e0fffa17 	ldw	r3,-24(fp)
   14a64:	00bfff84 	movi	r2,-2
   14a68:	1884703a 	and	r2,r3,r2
   14a6c:	1001703a 	wrctl	status,r2
  
  return context;
   14a70:	e0bffa17 	ldw	r2,-24(fp)
    }
    OS_ENTER_CRITICAL();
   14a74:	e0bff815 	stw	r2,-32(fp)
    len = OS_StrLen(pname);                      /* Can we fit the string in the storage area?         */
   14a78:	e13ffe17 	ldw	r4,-8(fp)
   14a7c:	0011ba40 	call	11ba4 <OS_StrLen>
   14a80:	e0bff905 	stb	r2,-28(fp)
    if (len > (OS_MEM_NAME_SIZE - 1)) {          /* No                                                 */
   14a84:	e0bff903 	ldbu	r2,-28(fp)
   14a88:	10800830 	cmpltui	r2,r2,32
   14a8c:	1000081e 	bne	r2,zero,14ab0 <OSMemNameSet+0xd8>
   14a90:	e0bff817 	ldw	r2,-32(fp)
   14a94:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   14a98:	e0bffb17 	ldw	r2,-20(fp)
   14a9c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_MEM_NAME_TOO_LONG;
   14aa0:	e0bfff17 	ldw	r2,-4(fp)
   14aa4:	00c018c4 	movi	r3,99
   14aa8:	10c00005 	stb	r3,0(r2)
        return;
   14aac:	00000b06 	br	14adc <OSMemNameSet+0x104>
    }
    (void)OS_StrCopy(pmem->OSMemName, pname);    /* Yes, copy name to the memory partition header      */
   14ab0:	e0bffd17 	ldw	r2,-12(fp)
   14ab4:	10800504 	addi	r2,r2,20
   14ab8:	1009883a 	mov	r4,r2
   14abc:	e17ffe17 	ldw	r5,-8(fp)
   14ac0:	0011b300 	call	11b30 <OS_StrCopy>
   14ac4:	e0bff817 	ldw	r2,-32(fp)
   14ac8:	e0bffc15 	stw	r2,-16(fp)
   14acc:	e0bffc17 	ldw	r2,-16(fp)
   14ad0:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
   14ad4:	e0bfff17 	ldw	r2,-4(fp)
   14ad8:	10000005 	stb	zero,0(r2)
}
   14adc:	e037883a 	mov	sp,fp
   14ae0:	dfc00117 	ldw	ra,4(sp)
   14ae4:	df000017 	ldw	fp,0(sp)
   14ae8:	dec00204 	addi	sp,sp,8
   14aec:	f800283a 	ret

00014af0 <OSMemPut>:
*               OS_ERR_MEM_INVALID_PBLK  if you passed a NULL pointer for the block to release.
*********************************************************************************************************
*/

INT8U  OSMemPut (OS_MEM *pmem, void *pblk)
{
   14af0:	defff904 	addi	sp,sp,-28
   14af4:	df000615 	stw	fp,24(sp)
   14af8:	df000604 	addi	fp,sp,24
   14afc:	e13ffe15 	stw	r4,-8(fp)
   14b00:	e17fff15 	stw	r5,-4(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   14b04:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pmem == (OS_MEM *)0) {                   /* Must point to a valid memory partition             */
   14b08:	e0bffe17 	ldw	r2,-8(fp)
   14b0c:	1000021e 	bne	r2,zero,14b18 <OSMemPut+0x28>
        return (OS_ERR_MEM_INVALID_PMEM);
   14b10:	00801804 	movi	r2,96
   14b14:	00002806 	br	14bb8 <OSMemPut+0xc8>
    }
    if (pblk == (void *)0) {                     /* Must release a valid block                         */
   14b18:	e0bfff17 	ldw	r2,-4(fp)
   14b1c:	1000021e 	bne	r2,zero,14b28 <OSMemPut+0x38>
        return (OS_ERR_MEM_INVALID_PBLK);
   14b20:	008017c4 	movi	r2,95
   14b24:	00002406 	br	14bb8 <OSMemPut+0xc8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   14b28:	0005303a 	rdctl	r2,status
   14b2c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   14b30:	e0fffb17 	ldw	r3,-20(fp)
   14b34:	00bfff84 	movi	r2,-2
   14b38:	1884703a 	and	r2,r3,r2
   14b3c:	1001703a 	wrctl	status,r2
  
  return context;
   14b40:	e0bffb17 	ldw	r2,-20(fp)
    }
#endif
    OS_ENTER_CRITICAL();
   14b44:	e0bffa15 	stw	r2,-24(fp)
    if (pmem->OSMemNFree >= pmem->OSMemNBlks) {  /* Make sure all blocks not already returned          */
   14b48:	e0bffe17 	ldw	r2,-8(fp)
   14b4c:	10c00417 	ldw	r3,16(r2)
   14b50:	e0bffe17 	ldw	r2,-8(fp)
   14b54:	10800317 	ldw	r2,12(r2)
   14b58:	18800636 	bltu	r3,r2,14b74 <OSMemPut+0x84>
   14b5c:	e0bffa17 	ldw	r2,-24(fp)
   14b60:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   14b64:	e0bffc17 	ldw	r2,-16(fp)
   14b68:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_MEM_FULL);
   14b6c:	00801784 	movi	r2,94
   14b70:	00001106 	br	14bb8 <OSMemPut+0xc8>
    }
    *(void **)pblk      = pmem->OSMemFreeList;   /* Insert released block into free block list         */
   14b74:	e0bffe17 	ldw	r2,-8(fp)
   14b78:	10c00117 	ldw	r3,4(r2)
   14b7c:	e0bfff17 	ldw	r2,-4(fp)
   14b80:	10c00015 	stw	r3,0(r2)
    pmem->OSMemFreeList = pblk;
   14b84:	e0bffe17 	ldw	r2,-8(fp)
   14b88:	e0ffff17 	ldw	r3,-4(fp)
   14b8c:	10c00115 	stw	r3,4(r2)
    pmem->OSMemNFree++;                          /* One more memory block in this partition            */
   14b90:	e0bffe17 	ldw	r2,-8(fp)
   14b94:	10800417 	ldw	r2,16(r2)
   14b98:	10c00044 	addi	r3,r2,1
   14b9c:	e0bffe17 	ldw	r2,-8(fp)
   14ba0:	10c00415 	stw	r3,16(r2)
   14ba4:	e0bffa17 	ldw	r2,-24(fp)
   14ba8:	e0bffd15 	stw	r2,-12(fp)
   14bac:	e0bffd17 	ldw	r2,-12(fp)
   14bb0:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);                        /* Notify caller that memory block was released       */
   14bb4:	0005883a 	mov	r2,zero
}
   14bb8:	e037883a 	mov	sp,fp
   14bbc:	df000017 	ldw	fp,0(sp)
   14bc0:	dec00104 	addi	sp,sp,4
   14bc4:	f800283a 	ret

00014bc8 <OSMemQuery>:
*********************************************************************************************************
*/

#if OS_MEM_QUERY_EN > 0
INT8U  OSMemQuery (OS_MEM *pmem, OS_MEM_DATA *p_mem_data)
{
   14bc8:	defffa04 	addi	sp,sp,-24
   14bcc:	df000515 	stw	fp,20(sp)
   14bd0:	df000504 	addi	fp,sp,20
   14bd4:	e13ffe15 	stw	r4,-8(fp)
   14bd8:	e17fff15 	stw	r5,-4(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   14bdc:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pmem == (OS_MEM *)0) {                   /* Must point to a valid memory partition             */
   14be0:	e0bffe17 	ldw	r2,-8(fp)
   14be4:	1000021e 	bne	r2,zero,14bf0 <OSMemQuery+0x28>
        return (OS_ERR_MEM_INVALID_PMEM);
   14be8:	00801804 	movi	r2,96
   14bec:	00002c06 	br	14ca0 <OSMemQuery+0xd8>
    }
    if (p_mem_data == (OS_MEM_DATA *)0) {        /* Must release a valid storage area for the data     */
   14bf0:	e0bfff17 	ldw	r2,-4(fp)
   14bf4:	1000021e 	bne	r2,zero,14c00 <OSMemQuery+0x38>
        return (OS_ERR_MEM_INVALID_PDATA);
   14bf8:	00801844 	movi	r2,97
   14bfc:	00002806 	br	14ca0 <OSMemQuery+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   14c00:	0005303a 	rdctl	r2,status
   14c04:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   14c08:	e0fffc17 	ldw	r3,-16(fp)
   14c0c:	00bfff84 	movi	r2,-2
   14c10:	1884703a 	and	r2,r3,r2
   14c14:	1001703a 	wrctl	status,r2
  
  return context;
   14c18:	e0bffc17 	ldw	r2,-16(fp)
    }
#endif
    OS_ENTER_CRITICAL();
   14c1c:	e0bffb15 	stw	r2,-20(fp)
    p_mem_data->OSAddr     = pmem->OSMemAddr;
   14c20:	e0bffe17 	ldw	r2,-8(fp)
   14c24:	10c00017 	ldw	r3,0(r2)
   14c28:	e0bfff17 	ldw	r2,-4(fp)
   14c2c:	10c00015 	stw	r3,0(r2)
    p_mem_data->OSFreeList = pmem->OSMemFreeList;
   14c30:	e0bffe17 	ldw	r2,-8(fp)
   14c34:	10c00117 	ldw	r3,4(r2)
   14c38:	e0bfff17 	ldw	r2,-4(fp)
   14c3c:	10c00115 	stw	r3,4(r2)
    p_mem_data->OSBlkSize  = pmem->OSMemBlkSize;
   14c40:	e0bffe17 	ldw	r2,-8(fp)
   14c44:	10c00217 	ldw	r3,8(r2)
   14c48:	e0bfff17 	ldw	r2,-4(fp)
   14c4c:	10c00215 	stw	r3,8(r2)
    p_mem_data->OSNBlks    = pmem->OSMemNBlks;
   14c50:	e0bffe17 	ldw	r2,-8(fp)
   14c54:	10c00317 	ldw	r3,12(r2)
   14c58:	e0bfff17 	ldw	r2,-4(fp)
   14c5c:	10c00315 	stw	r3,12(r2)
    p_mem_data->OSNFree    = pmem->OSMemNFree;
   14c60:	e0bffe17 	ldw	r2,-8(fp)
   14c64:	10c00417 	ldw	r3,16(r2)
   14c68:	e0bfff17 	ldw	r2,-4(fp)
   14c6c:	10c00415 	stw	r3,16(r2)
   14c70:	e0bffb17 	ldw	r2,-20(fp)
   14c74:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   14c78:	e0bffd17 	ldw	r2,-12(fp)
   14c7c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    p_mem_data->OSNUsed    = p_mem_data->OSNBlks - p_mem_data->OSNFree;
   14c80:	e0bfff17 	ldw	r2,-4(fp)
   14c84:	10c00317 	ldw	r3,12(r2)
   14c88:	e0bfff17 	ldw	r2,-4(fp)
   14c8c:	10800417 	ldw	r2,16(r2)
   14c90:	1887c83a 	sub	r3,r3,r2
   14c94:	e0bfff17 	ldw	r2,-4(fp)
   14c98:	10c00515 	stw	r3,20(r2)
    return (OS_ERR_NONE);
   14c9c:	0005883a 	mov	r2,zero
}
   14ca0:	e037883a 	mov	sp,fp
   14ca4:	df000017 	ldw	fp,0(sp)
   14ca8:	dec00104 	addi	sp,sp,4
   14cac:	f800283a 	ret

00014cb0 <OS_MemInit>:
* Note(s)    : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

void  OS_MemInit (void)
{
   14cb0:	defffc04 	addi	sp,sp,-16
   14cb4:	dfc00315 	stw	ra,12(sp)
   14cb8:	df000215 	stw	fp,8(sp)
   14cbc:	df000204 	addi	fp,sp,8
#if OS_MAX_MEM_PART >= 2
    OS_MEM  *pmem;
    INT16U   i;


    OS_MemClr((INT8U *)&OSMemTbl[0], sizeof(OSMemTbl));   /* Clear the memory partition table          */
   14cc0:	010000f4 	movhi	r4,3
   14cc4:	21364804 	addi	r4,r4,-9952
   14cc8:	01430c04 	movi	r5,3120
   14ccc:	00119400 	call	11940 <OS_MemClr>
    pmem = &OSMemTbl[0];                                  /* Point to memory control block (MCB)       */
   14cd0:	008000f4 	movhi	r2,3
   14cd4:	10b64804 	addi	r2,r2,-9952
   14cd8:	e0bffe15 	stw	r2,-8(fp)
    for (i = 0; i < (OS_MAX_MEM_PART - 1); i++) {         /* Init. list of free memory partitions      */
   14cdc:	e03fff0d 	sth	zero,-4(fp)
   14ce0:	00001306 	br	14d30 <OS_MemInit+0x80>
        pmem->OSMemFreeList = (void *)&OSMemTbl[i+1];     /* Chain list of free partitions             */
   14ce4:	e0bfff0b 	ldhu	r2,-4(fp)
   14ce8:	10800044 	addi	r2,r2,1
   14cec:	10c00d24 	muli	r3,r2,52
   14cf0:	008000f4 	movhi	r2,3
   14cf4:	10b64804 	addi	r2,r2,-9952
   14cf8:	1887883a 	add	r3,r3,r2
   14cfc:	e0bffe17 	ldw	r2,-8(fp)
   14d00:	10c00115 	stw	r3,4(r2)
#if OS_MEM_NAME_SIZE > 1
        pmem->OSMemName[0]  = '?';                        /* Unknown name                              */
   14d04:	e0bffe17 	ldw	r2,-8(fp)
   14d08:	00c00fc4 	movi	r3,63
   14d0c:	10c00505 	stb	r3,20(r2)
        pmem->OSMemName[1]  = OS_ASCII_NUL;
   14d10:	e0bffe17 	ldw	r2,-8(fp)
   14d14:	10000545 	stb	zero,21(r2)
#endif
        pmem++;
   14d18:	e0bffe17 	ldw	r2,-8(fp)
   14d1c:	10800d04 	addi	r2,r2,52
   14d20:	e0bffe15 	stw	r2,-8(fp)
    INT16U   i;


    OS_MemClr((INT8U *)&OSMemTbl[0], sizeof(OSMemTbl));   /* Clear the memory partition table          */
    pmem = &OSMemTbl[0];                                  /* Point to memory control block (MCB)       */
    for (i = 0; i < (OS_MAX_MEM_PART - 1); i++) {         /* Init. list of free memory partitions      */
   14d24:	e0bfff0b 	ldhu	r2,-4(fp)
   14d28:	10800044 	addi	r2,r2,1
   14d2c:	e0bfff0d 	sth	r2,-4(fp)
   14d30:	e0bfff0b 	ldhu	r2,-4(fp)
   14d34:	10800ef0 	cmpltui	r2,r2,59
   14d38:	103fea1e 	bne	r2,zero,14ce4 <__alt_mem_Flash_flash_data+0xf4014ce4>
        pmem->OSMemName[0]  = '?';                        /* Unknown name                              */
        pmem->OSMemName[1]  = OS_ASCII_NUL;
#endif
        pmem++;
    }
    pmem->OSMemFreeList = (void *)0;                      /* Initialize last node                      */
   14d3c:	e0bffe17 	ldw	r2,-8(fp)
   14d40:	10000115 	stw	zero,4(r2)
#if OS_MEM_NAME_SIZE > 1
    pmem->OSMemName[0]  = '?';                            /* Unknown name                              */
   14d44:	e0bffe17 	ldw	r2,-8(fp)
   14d48:	00c00fc4 	movi	r3,63
   14d4c:	10c00505 	stb	r3,20(r2)
    pmem->OSMemName[1]  = OS_ASCII_NUL;
   14d50:	e0bffe17 	ldw	r2,-8(fp)
   14d54:	10000545 	stb	zero,21(r2)
#endif

    OSMemFreeList       = &OSMemTbl[0];                   /* Point to beginning of free list           */
   14d58:	008000b4 	movhi	r2,2
   14d5c:	10835f04 	addi	r2,r2,3452
   14d60:	00c000f4 	movhi	r3,3
   14d64:	18f64804 	addi	r3,r3,-9952
   14d68:	10c00015 	stw	r3,0(r2)
#endif
}
   14d6c:	e037883a 	mov	sp,fp
   14d70:	dfc00117 	ldw	ra,4(sp)
   14d74:	df000017 	ldw	fp,0(sp)
   14d78:	dec00204 	addi	sp,sp,8
   14d7c:	f800283a 	ret

00014d80 <OSQAccept>:
*********************************************************************************************************
*/

#if OS_Q_ACCEPT_EN > 0
void  *OSQAccept (OS_EVENT *pevent, INT8U *perr)
{
   14d80:	defff804 	addi	sp,sp,-32
   14d84:	df000715 	stw	fp,28(sp)
   14d88:	df000704 	addi	fp,sp,28
   14d8c:	e13ffe15 	stw	r4,-8(fp)
   14d90:	e17fff15 	stw	r5,-4(fp)
    void      *pmsg;
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   14d94:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
   14d98:	e0bfff17 	ldw	r2,-4(fp)
   14d9c:	1000021e 	bne	r2,zero,14da8 <OSQAccept+0x28>
        return ((void *)0);
   14da0:	0005883a 	mov	r2,zero
   14da4:	00004206 	br	14eb0 <OSQAccept+0x130>
    }
    if (pevent == (OS_EVENT *)0) {               /* Validate 'pevent'                                  */
   14da8:	e0bffe17 	ldw	r2,-8(fp)
   14dac:	1000051e 	bne	r2,zero,14dc4 <OSQAccept+0x44>
        *perr = OS_ERR_PEVENT_NULL;
   14db0:	e0bfff17 	ldw	r2,-4(fp)
   14db4:	00c00104 	movi	r3,4
   14db8:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
   14dbc:	0005883a 	mov	r2,zero
   14dc0:	00003b06 	br	14eb0 <OSQAccept+0x130>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {/* Validate event block type                          */
   14dc4:	e0bffe17 	ldw	r2,-8(fp)
   14dc8:	10800003 	ldbu	r2,0(r2)
   14dcc:	10803fcc 	andi	r2,r2,255
   14dd0:	108000a0 	cmpeqi	r2,r2,2
   14dd4:	1000051e 	bne	r2,zero,14dec <OSQAccept+0x6c>
        *perr = OS_ERR_EVENT_TYPE;
   14dd8:	e0bfff17 	ldw	r2,-4(fp)
   14ddc:	00c00044 	movi	r3,1
   14de0:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
   14de4:	0005883a 	mov	r2,zero
   14de8:	00003106 	br	14eb0 <OSQAccept+0x130>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   14dec:	0005303a 	rdctl	r2,status
   14df0:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   14df4:	e0fffc17 	ldw	r3,-16(fp)
   14df8:	00bfff84 	movi	r2,-2
   14dfc:	1884703a 	and	r2,r3,r2
   14e00:	1001703a 	wrctl	status,r2
  
  return context;
   14e04:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
   14e08:	e0bffa15 	stw	r2,-24(fp)
    pq = (OS_Q *)pevent->OSEventPtr;             /* Point at queue control block                       */
   14e0c:	e0bffe17 	ldw	r2,-8(fp)
   14e10:	10800117 	ldw	r2,4(r2)
   14e14:	e0bffb15 	stw	r2,-20(fp)
    if (pq->OSQEntries > 0) {                    /* See if any messages in the queue                   */
   14e18:	e0bffb17 	ldw	r2,-20(fp)
   14e1c:	1080058b 	ldhu	r2,22(r2)
   14e20:	10bfffcc 	andi	r2,r2,65535
   14e24:	10001926 	beq	r2,zero,14e8c <OSQAccept+0x10c>
        pmsg = *pq->OSQOut++;                    /* Yes, extract oldest message from the queue         */
   14e28:	e0bffb17 	ldw	r2,-20(fp)
   14e2c:	10800417 	ldw	r2,16(r2)
   14e30:	11000104 	addi	r4,r2,4
   14e34:	e0fffb17 	ldw	r3,-20(fp)
   14e38:	19000415 	stw	r4,16(r3)
   14e3c:	10800017 	ldw	r2,0(r2)
   14e40:	e0bff915 	stw	r2,-28(fp)
        pq->OSQEntries--;                        /* Update the number of entries in the queue          */
   14e44:	e0bffb17 	ldw	r2,-20(fp)
   14e48:	1080058b 	ldhu	r2,22(r2)
   14e4c:	10bfffc4 	addi	r2,r2,-1
   14e50:	1007883a 	mov	r3,r2
   14e54:	e0bffb17 	ldw	r2,-20(fp)
   14e58:	10c0058d 	sth	r3,22(r2)
        if (pq->OSQOut == pq->OSQEnd) {          /* Wrap OUT pointer if we are at the end of the queue */
   14e5c:	e0bffb17 	ldw	r2,-20(fp)
   14e60:	10c00417 	ldw	r3,16(r2)
   14e64:	e0bffb17 	ldw	r2,-20(fp)
   14e68:	10800217 	ldw	r2,8(r2)
   14e6c:	1880041e 	bne	r3,r2,14e80 <OSQAccept+0x100>
            pq->OSQOut = pq->OSQStart;
   14e70:	e0bffb17 	ldw	r2,-20(fp)
   14e74:	10c00117 	ldw	r3,4(r2)
   14e78:	e0bffb17 	ldw	r2,-20(fp)
   14e7c:	10c00415 	stw	r3,16(r2)
        }
        *perr = OS_ERR_NONE;
   14e80:	e0bfff17 	ldw	r2,-4(fp)
   14e84:	10000005 	stb	zero,0(r2)
   14e88:	00000406 	br	14e9c <OSQAccept+0x11c>
    } else {
        *perr = OS_ERR_Q_EMPTY;
   14e8c:	e0bfff17 	ldw	r2,-4(fp)
   14e90:	00c007c4 	movi	r3,31
   14e94:	10c00005 	stb	r3,0(r2)
        pmsg  = (void *)0;                       /* Queue is empty                                     */
   14e98:	e03ff915 	stw	zero,-28(fp)
   14e9c:	e0bffa17 	ldw	r2,-24(fp)
   14ea0:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   14ea4:	e0bffd17 	ldw	r2,-12(fp)
   14ea8:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (pmsg);                               /* Return message received (or NULL)                  */
   14eac:	e0bff917 	ldw	r2,-28(fp)
}
   14eb0:	e037883a 	mov	sp,fp
   14eb4:	df000017 	ldw	fp,0(sp)
   14eb8:	dec00104 	addi	sp,sp,4
   14ebc:	f800283a 	ret

00014ec0 <OSQCreate>:
*              == (OS_EVENT *)0  if no event control blocks were available or an error was detected
*********************************************************************************************************
*/

OS_EVENT  *OSQCreate (void **start, INT16U size)
{
   14ec0:	defff404 	addi	sp,sp,-48
   14ec4:	dfc00b15 	stw	ra,44(sp)
   14ec8:	df000a15 	stw	fp,40(sp)
   14ecc:	df000a04 	addi	fp,sp,40
   14ed0:	e13ffe15 	stw	r4,-8(fp)
   14ed4:	2805883a 	mov	r2,r5
   14ed8:	e0bfff0d 	sth	r2,-4(fp)
    OS_EVENT  *pevent;
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   14edc:	e03ff715 	stw	zero,-36(fp)
#endif



    if (OSIntNesting > 0) {                      /* See if called from ISR ...                         */
   14ee0:	008000b4 	movhi	r2,2
   14ee4:	10836404 	addi	r2,r2,3472
   14ee8:	10800003 	ldbu	r2,0(r2)
   14eec:	10803fcc 	andi	r2,r2,255
   14ef0:	10000226 	beq	r2,zero,14efc <OSQCreate+0x3c>
        return ((OS_EVENT *)0);                  /* ... can't CREATE from an ISR                       */
   14ef4:	0005883a 	mov	r2,zero
   14ef8:	00006b06 	br	150a8 <OSQCreate+0x1e8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   14efc:	0005303a 	rdctl	r2,status
   14f00:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   14f04:	e0fff917 	ldw	r3,-28(fp)
   14f08:	00bfff84 	movi	r2,-2
   14f0c:	1884703a 	and	r2,r3,r2
   14f10:	1001703a 	wrctl	status,r2
  
  return context;
   14f14:	e0bff917 	ldw	r2,-28(fp)
    }
    OS_ENTER_CRITICAL();
   14f18:	e0bff715 	stw	r2,-36(fp)
    pevent = OSEventFreeList;                    /* Get next free event control block                  */
   14f1c:	008000b4 	movhi	r2,2
   14f20:	10836304 	addi	r2,r2,3468
   14f24:	10800017 	ldw	r2,0(r2)
   14f28:	e0bff615 	stw	r2,-40(fp)
    if (OSEventFreeList != (OS_EVENT *)0) {      /* See if pool of free ECB pool was empty             */
   14f2c:	008000b4 	movhi	r2,2
   14f30:	10836304 	addi	r2,r2,3468
   14f34:	10800017 	ldw	r2,0(r2)
   14f38:	10000726 	beq	r2,zero,14f58 <OSQCreate+0x98>
        OSEventFreeList = (OS_EVENT *)OSEventFreeList->OSEventPtr;
   14f3c:	008000b4 	movhi	r2,2
   14f40:	10836304 	addi	r2,r2,3468
   14f44:	10800017 	ldw	r2,0(r2)
   14f48:	10c00117 	ldw	r3,4(r2)
   14f4c:	008000b4 	movhi	r2,2
   14f50:	10836304 	addi	r2,r2,3468
   14f54:	10c00015 	stw	r3,0(r2)
   14f58:	e0bff717 	ldw	r2,-36(fp)
   14f5c:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   14f60:	e0bffa17 	ldw	r2,-24(fp)
   14f64:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    if (pevent != (OS_EVENT *)0) {               /* See if we have an event control block              */
   14f68:	e0bff617 	ldw	r2,-40(fp)
   14f6c:	10004d26 	beq	r2,zero,150a4 <OSQCreate+0x1e4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   14f70:	0005303a 	rdctl	r2,status
   14f74:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   14f78:	e0fffb17 	ldw	r3,-20(fp)
   14f7c:	00bfff84 	movi	r2,-2
   14f80:	1884703a 	and	r2,r3,r2
   14f84:	1001703a 	wrctl	status,r2
  
  return context;
   14f88:	e0bffb17 	ldw	r2,-20(fp)
        OS_ENTER_CRITICAL();
   14f8c:	e0bff715 	stw	r2,-36(fp)
        pq = OSQFreeList;                        /* Get a free queue control block                     */
   14f90:	008000b4 	movhi	r2,2
   14f94:	10836104 	addi	r2,r2,3460
   14f98:	10800017 	ldw	r2,0(r2)
   14f9c:	e0bff815 	stw	r2,-32(fp)
        if (pq != (OS_Q *)0) {                   /* Were we able to get a queue control block ?        */
   14fa0:	e0bff817 	ldw	r2,-32(fp)
   14fa4:	10003126 	beq	r2,zero,1506c <OSQCreate+0x1ac>
            OSQFreeList            = OSQFreeList->OSQPtr; /* Yes, Adjust free list pointer to next free*/
   14fa8:	008000b4 	movhi	r2,2
   14fac:	10836104 	addi	r2,r2,3460
   14fb0:	10800017 	ldw	r2,0(r2)
   14fb4:	10c00017 	ldw	r3,0(r2)
   14fb8:	008000b4 	movhi	r2,2
   14fbc:	10836104 	addi	r2,r2,3460
   14fc0:	10c00015 	stw	r3,0(r2)
   14fc4:	e0bff717 	ldw	r2,-36(fp)
   14fc8:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   14fcc:	e0bffc17 	ldw	r2,-16(fp)
   14fd0:	1001703a 	wrctl	status,r2
            OS_EXIT_CRITICAL();
            pq->OSQStart           = start;               /*      Initialize the queue                 */
   14fd4:	e0bff817 	ldw	r2,-32(fp)
   14fd8:	e0fffe17 	ldw	r3,-8(fp)
   14fdc:	10c00115 	stw	r3,4(r2)
            pq->OSQEnd             = &start[size];
   14fe0:	e0bfff0b 	ldhu	r2,-4(fp)
   14fe4:	1085883a 	add	r2,r2,r2
   14fe8:	1085883a 	add	r2,r2,r2
   14fec:	1007883a 	mov	r3,r2
   14ff0:	e0bffe17 	ldw	r2,-8(fp)
   14ff4:	10c7883a 	add	r3,r2,r3
   14ff8:	e0bff817 	ldw	r2,-32(fp)
   14ffc:	10c00215 	stw	r3,8(r2)
            pq->OSQIn              = start;
   15000:	e0bff817 	ldw	r2,-32(fp)
   15004:	e0fffe17 	ldw	r3,-8(fp)
   15008:	10c00315 	stw	r3,12(r2)
            pq->OSQOut             = start;
   1500c:	e0bff817 	ldw	r2,-32(fp)
   15010:	e0fffe17 	ldw	r3,-8(fp)
   15014:	10c00415 	stw	r3,16(r2)
            pq->OSQSize            = size;
   15018:	e0bff817 	ldw	r2,-32(fp)
   1501c:	e0ffff0b 	ldhu	r3,-4(fp)
   15020:	10c0050d 	sth	r3,20(r2)
            pq->OSQEntries         = 0;
   15024:	e0bff817 	ldw	r2,-32(fp)
   15028:	1000058d 	sth	zero,22(r2)
            pevent->OSEventType    = OS_EVENT_TYPE_Q;
   1502c:	e0bff617 	ldw	r2,-40(fp)
   15030:	00c00084 	movi	r3,2
   15034:	10c00005 	stb	r3,0(r2)
            pevent->OSEventCnt     = 0;
   15038:	e0bff617 	ldw	r2,-40(fp)
   1503c:	1000020d 	sth	zero,8(r2)
            pevent->OSEventPtr     = pq;
   15040:	e0bff617 	ldw	r2,-40(fp)
   15044:	e0fff817 	ldw	r3,-32(fp)
   15048:	10c00115 	stw	r3,4(r2)
#if OS_EVENT_NAME_SIZE > 1
            pevent->OSEventName[0] = '?';                  /* Unknown name                             */
   1504c:	e0bff617 	ldw	r2,-40(fp)
   15050:	00c00fc4 	movi	r3,63
   15054:	10c00385 	stb	r3,14(r2)
            pevent->OSEventName[1] = OS_ASCII_NUL;
   15058:	e0bff617 	ldw	r2,-40(fp)
   1505c:	100003c5 	stb	zero,15(r2)
#endif
            OS_EventWaitListInit(pevent);                 /*      Initalize the wait list              */
   15060:	e13ff617 	ldw	r4,-40(fp)
   15064:	001157c0 	call	1157c <OS_EventWaitListInit>
   15068:	00000e06 	br	150a4 <OSQCreate+0x1e4>
        } else {
            pevent->OSEventPtr = (void *)OSEventFreeList; /* No,  Return event control block on error  */
   1506c:	008000b4 	movhi	r2,2
   15070:	10836304 	addi	r2,r2,3468
   15074:	10c00017 	ldw	r3,0(r2)
   15078:	e0bff617 	ldw	r2,-40(fp)
   1507c:	10c00115 	stw	r3,4(r2)
            OSEventFreeList    = pevent;
   15080:	008000b4 	movhi	r2,2
   15084:	10836304 	addi	r2,r2,3468
   15088:	e0fff617 	ldw	r3,-40(fp)
   1508c:	10c00015 	stw	r3,0(r2)
   15090:	e0bff717 	ldw	r2,-36(fp)
   15094:	e0bffd15 	stw	r2,-12(fp)
   15098:	e0bffd17 	ldw	r2,-12(fp)
   1509c:	1001703a 	wrctl	status,r2
            OS_EXIT_CRITICAL();
            pevent = (OS_EVENT *)0;
   150a0:	e03ff615 	stw	zero,-40(fp)
        }
    }
    return (pevent);
   150a4:	e0bff617 	ldw	r2,-40(fp)
}
   150a8:	e037883a 	mov	sp,fp
   150ac:	dfc00117 	ldw	ra,4(sp)
   150b0:	df000017 	ldw	fp,0(sp)
   150b4:	dec00204 	addi	sp,sp,8
   150b8:	f800283a 	ret

000150bc <OSQDel>:
*********************************************************************************************************
*/

#if OS_Q_DEL_EN > 0
OS_EVENT  *OSQDel (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
   150bc:	defff204 	addi	sp,sp,-56
   150c0:	dfc00d15 	stw	ra,52(sp)
   150c4:	df000c15 	stw	fp,48(sp)
   150c8:	df000c04 	addi	fp,sp,48
   150cc:	e13ffd15 	stw	r4,-12(fp)
   150d0:	2805883a 	mov	r2,r5
   150d4:	e1bfff15 	stw	r6,-4(fp)
   150d8:	e0bffe05 	stb	r2,-8(fp)
    BOOLEAN    tasks_waiting;
    OS_EVENT  *pevent_return;
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
   150dc:	e03ff615 	stw	zero,-40(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
   150e0:	e0bfff17 	ldw	r2,-4(fp)
   150e4:	1000021e 	bne	r2,zero,150f0 <OSQDel+0x34>
        return (pevent);
   150e8:	e0bffd17 	ldw	r2,-12(fp)
   150ec:	0000a006 	br	15370 <OSQDel+0x2b4>
    }
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
   150f0:	e0bffd17 	ldw	r2,-12(fp)
   150f4:	1000051e 	bne	r2,zero,1510c <OSQDel+0x50>
        *perr = OS_ERR_PEVENT_NULL;
   150f8:	e0bfff17 	ldw	r2,-4(fp)
   150fc:	00c00104 	movi	r3,4
   15100:	10c00005 	stb	r3,0(r2)
        return (pevent);
   15104:	e0bffd17 	ldw	r2,-12(fp)
   15108:	00009906 	br	15370 <OSQDel+0x2b4>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {          /* Validate event block type                */
   1510c:	e0bffd17 	ldw	r2,-12(fp)
   15110:	10800003 	ldbu	r2,0(r2)
   15114:	10803fcc 	andi	r2,r2,255
   15118:	108000a0 	cmpeqi	r2,r2,2
   1511c:	1000051e 	bne	r2,zero,15134 <OSQDel+0x78>
        *perr = OS_ERR_EVENT_TYPE;
   15120:	e0bfff17 	ldw	r2,-4(fp)
   15124:	00c00044 	movi	r3,1
   15128:	10c00005 	stb	r3,0(r2)
        return (pevent);
   1512c:	e0bffd17 	ldw	r2,-12(fp)
   15130:	00008f06 	br	15370 <OSQDel+0x2b4>
    }
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
   15134:	008000b4 	movhi	r2,2
   15138:	10836404 	addi	r2,r2,3472
   1513c:	10800003 	ldbu	r2,0(r2)
   15140:	10803fcc 	andi	r2,r2,255
   15144:	10000526 	beq	r2,zero,1515c <OSQDel+0xa0>
        *perr = OS_ERR_DEL_ISR;                            /* ... can't DELETE from an ISR             */
   15148:	e0bfff17 	ldw	r2,-4(fp)
   1514c:	00c003c4 	movi	r3,15
   15150:	10c00005 	stb	r3,0(r2)
        return (pevent);
   15154:	e0bffd17 	ldw	r2,-12(fp)
   15158:	00008506 	br	15370 <OSQDel+0x2b4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1515c:	0005303a 	rdctl	r2,status
   15160:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   15164:	e0fff817 	ldw	r3,-32(fp)
   15168:	00bfff84 	movi	r2,-2
   1516c:	1884703a 	and	r2,r3,r2
   15170:	1001703a 	wrctl	status,r2
  
  return context;
   15174:	e0bff817 	ldw	r2,-32(fp)
    }
    OS_ENTER_CRITICAL();
   15178:	e0bff615 	stw	r2,-40(fp)
    if (pevent->OSEventGrp != 0) {                         /* See if any tasks waiting on queue        */
   1517c:	e0bffd17 	ldw	r2,-12(fp)
   15180:	10800283 	ldbu	r2,10(r2)
   15184:	10803fcc 	andi	r2,r2,255
   15188:	10000326 	beq	r2,zero,15198 <OSQDel+0xdc>
        tasks_waiting = OS_TRUE;                           /* Yes                                      */
   1518c:	00800044 	movi	r2,1
   15190:	e0bff405 	stb	r2,-48(fp)
   15194:	00000106 	br	1519c <OSQDel+0xe0>
    } else {
        tasks_waiting = OS_FALSE;                          /* No                                       */
   15198:	e03ff405 	stb	zero,-48(fp)
    }
    switch (opt) {
   1519c:	e0bffe03 	ldbu	r2,-8(fp)
   151a0:	10000326 	beq	r2,zero,151b0 <OSQDel+0xf4>
   151a4:	10800060 	cmpeqi	r2,r2,1
   151a8:	1000381e 	bne	r2,zero,1528c <OSQDel+0x1d0>
   151ac:	00006506 	br	15344 <OSQDel+0x288>
        case OS_DEL_NO_PEND:                               /* Delete queue only if no task waiting     */
             if (tasks_waiting == OS_FALSE) {
   151b0:	e0bff403 	ldbu	r2,-48(fp)
   151b4:	1000261e 	bne	r2,zero,15250 <OSQDel+0x194>
#if OS_EVENT_NAME_SIZE > 1
                 pevent->OSEventName[0] = '?';             /* Unknown name                             */
   151b8:	e0bffd17 	ldw	r2,-12(fp)
   151bc:	00c00fc4 	movi	r3,63
   151c0:	10c00385 	stb	r3,14(r2)
                 pevent->OSEventName[1] = OS_ASCII_NUL;
   151c4:	e0bffd17 	ldw	r2,-12(fp)
   151c8:	100003c5 	stb	zero,15(r2)
#endif
                 pq                     = (OS_Q *)pevent->OSEventPtr;  /* Return OS_Q to free list     */
   151cc:	e0bffd17 	ldw	r2,-12(fp)
   151d0:	10800117 	ldw	r2,4(r2)
   151d4:	e0bff715 	stw	r2,-36(fp)
                 pq->OSQPtr             = OSQFreeList;
   151d8:	008000b4 	movhi	r2,2
   151dc:	10836104 	addi	r2,r2,3460
   151e0:	10c00017 	ldw	r3,0(r2)
   151e4:	e0bff717 	ldw	r2,-36(fp)
   151e8:	10c00015 	stw	r3,0(r2)
                 OSQFreeList            = pq;
   151ec:	008000b4 	movhi	r2,2
   151f0:	10836104 	addi	r2,r2,3460
   151f4:	e0fff717 	ldw	r3,-36(fp)
   151f8:	10c00015 	stw	r3,0(r2)
                 pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
   151fc:	e0bffd17 	ldw	r2,-12(fp)
   15200:	10000005 	stb	zero,0(r2)
                 pevent->OSEventPtr     = OSEventFreeList; /* Return Event Control Block to free list  */
   15204:	008000b4 	movhi	r2,2
   15208:	10836304 	addi	r2,r2,3468
   1520c:	10c00017 	ldw	r3,0(r2)
   15210:	e0bffd17 	ldw	r2,-12(fp)
   15214:	10c00115 	stw	r3,4(r2)
                 pevent->OSEventCnt     = 0;
   15218:	e0bffd17 	ldw	r2,-12(fp)
   1521c:	1000020d 	sth	zero,8(r2)
                 OSEventFreeList        = pevent;          /* Get next free event control block        */
   15220:	008000b4 	movhi	r2,2
   15224:	10836304 	addi	r2,r2,3468
   15228:	e0fffd17 	ldw	r3,-12(fp)
   1522c:	10c00015 	stw	r3,0(r2)
   15230:	e0bff617 	ldw	r2,-40(fp)
   15234:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   15238:	e0bff917 	ldw	r2,-28(fp)
   1523c:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_NONE;
   15240:	e0bfff17 	ldw	r2,-4(fp)
   15244:	10000005 	stb	zero,0(r2)
                 pevent_return          = (OS_EVENT *)0;   /* Queue has been deleted                   */
   15248:	e03ff515 	stw	zero,-44(fp)
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_TASK_WAITING;
                 pevent_return          = pevent;
             }
             break;
   1524c:	00004706 	br	1536c <OSQDel+0x2b0>
   15250:	e0bff617 	ldw	r2,-40(fp)
   15254:	e0bffa15 	stw	r2,-24(fp)
   15258:	e0bffa17 	ldw	r2,-24(fp)
   1525c:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_NONE;
                 pevent_return          = (OS_EVENT *)0;   /* Queue has been deleted                   */
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_TASK_WAITING;
   15260:	e0bfff17 	ldw	r2,-4(fp)
   15264:	00c01244 	movi	r3,73
   15268:	10c00005 	stb	r3,0(r2)
                 pevent_return          = pevent;
   1526c:	e0bffd17 	ldw	r2,-12(fp)
   15270:	e0bff515 	stw	r2,-44(fp)
             }
             break;
   15274:	00003d06 	br	1536c <OSQDel+0x2b0>

        case OS_DEL_ALWAYS:                                /* Always delete the queue                  */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for queue        */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_OK);
   15278:	e13ffd17 	ldw	r4,-12(fp)
   1527c:	000b883a 	mov	r5,zero
   15280:	01800104 	movi	r6,4
   15284:	000f883a 	mov	r7,zero
   15288:	0010fdc0 	call	10fdc <OS_EventTaskRdy>
                 pevent_return          = pevent;
             }
             break;

        case OS_DEL_ALWAYS:                                /* Always delete the queue                  */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for queue        */
   1528c:	e0bffd17 	ldw	r2,-12(fp)
   15290:	10800283 	ldbu	r2,10(r2)
   15294:	10803fcc 	andi	r2,r2,255
   15298:	103ff71e 	bne	r2,zero,15278 <__alt_mem_Flash_flash_data+0xf4015278>
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_OK);
             }
#if OS_EVENT_NAME_SIZE > 1
             pevent->OSEventName[0] = '?';                 /* Unknown name                             */
   1529c:	e0bffd17 	ldw	r2,-12(fp)
   152a0:	00c00fc4 	movi	r3,63
   152a4:	10c00385 	stb	r3,14(r2)
             pevent->OSEventName[1] = OS_ASCII_NUL;
   152a8:	e0bffd17 	ldw	r2,-12(fp)
   152ac:	100003c5 	stb	zero,15(r2)
#endif
             pq                     = (OS_Q *)pevent->OSEventPtr;   /* Return OS_Q to free list        */
   152b0:	e0bffd17 	ldw	r2,-12(fp)
   152b4:	10800117 	ldw	r2,4(r2)
   152b8:	e0bff715 	stw	r2,-36(fp)
             pq->OSQPtr             = OSQFreeList;
   152bc:	008000b4 	movhi	r2,2
   152c0:	10836104 	addi	r2,r2,3460
   152c4:	10c00017 	ldw	r3,0(r2)
   152c8:	e0bff717 	ldw	r2,-36(fp)
   152cc:	10c00015 	stw	r3,0(r2)
             OSQFreeList            = pq;
   152d0:	008000b4 	movhi	r2,2
   152d4:	10836104 	addi	r2,r2,3460
   152d8:	e0fff717 	ldw	r3,-36(fp)
   152dc:	10c00015 	stw	r3,0(r2)
             pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
   152e0:	e0bffd17 	ldw	r2,-12(fp)
   152e4:	10000005 	stb	zero,0(r2)
             pevent->OSEventPtr     = OSEventFreeList;     /* Return Event Control Block to free list  */
   152e8:	008000b4 	movhi	r2,2
   152ec:	10836304 	addi	r2,r2,3468
   152f0:	10c00017 	ldw	r3,0(r2)
   152f4:	e0bffd17 	ldw	r2,-12(fp)
   152f8:	10c00115 	stw	r3,4(r2)
             pevent->OSEventCnt     = 0;
   152fc:	e0bffd17 	ldw	r2,-12(fp)
   15300:	1000020d 	sth	zero,8(r2)
             OSEventFreeList        = pevent;              /* Get next free event control block        */
   15304:	008000b4 	movhi	r2,2
   15308:	10836304 	addi	r2,r2,3468
   1530c:	e0fffd17 	ldw	r3,-12(fp)
   15310:	10c00015 	stw	r3,0(r2)
   15314:	e0bff617 	ldw	r2,-40(fp)
   15318:	e0bffb15 	stw	r2,-20(fp)
   1531c:	e0bffb17 	ldw	r2,-20(fp)
   15320:	1001703a 	wrctl	status,r2
             OS_EXIT_CRITICAL();
             if (tasks_waiting == OS_TRUE) {               /* Reschedule only if task(s) were waiting  */
   15324:	e0bff403 	ldbu	r2,-48(fp)
   15328:	10800058 	cmpnei	r2,r2,1
   1532c:	1000011e 	bne	r2,zero,15334 <OSQDel+0x278>
                 OS_Sched();                               /* Find highest priority task ready to run  */
   15330:	00119f40 	call	119f4 <OS_Sched>
             }
             *perr                  = OS_ERR_NONE;
   15334:	e0bfff17 	ldw	r2,-4(fp)
   15338:	10000005 	stb	zero,0(r2)
             pevent_return          = (OS_EVENT *)0;       /* Queue has been deleted                   */
   1533c:	e03ff515 	stw	zero,-44(fp)
             break;
   15340:	00000a06 	br	1536c <OSQDel+0x2b0>
   15344:	e0bff617 	ldw	r2,-40(fp)
   15348:	e0bffc15 	stw	r2,-16(fp)
   1534c:	e0bffc17 	ldw	r2,-16(fp)
   15350:	1001703a 	wrctl	status,r2

        default:
             OS_EXIT_CRITICAL();
             *perr                  = OS_ERR_INVALID_OPT;
   15354:	e0bfff17 	ldw	r2,-4(fp)
   15358:	00c001c4 	movi	r3,7
   1535c:	10c00005 	stb	r3,0(r2)
             pevent_return          = pevent;
   15360:	e0bffd17 	ldw	r2,-12(fp)
   15364:	e0bff515 	stw	r2,-44(fp)
             break;
   15368:	0001883a 	nop
    }
    return (pevent_return);
   1536c:	e0bff517 	ldw	r2,-44(fp)
}
   15370:	e037883a 	mov	sp,fp
   15374:	dfc00117 	ldw	ra,4(sp)
   15378:	df000017 	ldw	fp,0(sp)
   1537c:	dec00204 	addi	sp,sp,8
   15380:	f800283a 	ret

00015384 <OSQFlush>:
*********************************************************************************************************
*/

#if OS_Q_FLUSH_EN > 0
INT8U  OSQFlush (OS_EVENT *pevent)
{
   15384:	defffa04 	addi	sp,sp,-24
   15388:	df000515 	stw	fp,20(sp)
   1538c:	df000504 	addi	fp,sp,20
   15390:	e13fff15 	stw	r4,-4(fp)
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   15394:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
   15398:	e0bfff17 	ldw	r2,-4(fp)
   1539c:	1000021e 	bne	r2,zero,153a8 <OSQFlush+0x24>
        return (OS_ERR_PEVENT_NULL);
   153a0:	00800104 	movi	r2,4
   153a4:	00002106 	br	1542c <OSQFlush+0xa8>
    }
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {     /* Validate event block type                     */
   153a8:	e0bfff17 	ldw	r2,-4(fp)
   153ac:	10800003 	ldbu	r2,0(r2)
   153b0:	10803fcc 	andi	r2,r2,255
   153b4:	108000a0 	cmpeqi	r2,r2,2
   153b8:	1000021e 	bne	r2,zero,153c4 <OSQFlush+0x40>
        return (OS_ERR_EVENT_TYPE);
   153bc:	00800044 	movi	r2,1
   153c0:	00001a06 	br	1542c <OSQFlush+0xa8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   153c4:	0005303a 	rdctl	r2,status
   153c8:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   153cc:	e0fffd17 	ldw	r3,-12(fp)
   153d0:	00bfff84 	movi	r2,-2
   153d4:	1884703a 	and	r2,r3,r2
   153d8:	1001703a 	wrctl	status,r2
  
  return context;
   153dc:	e0bffd17 	ldw	r2,-12(fp)
    }
#endif
    OS_ENTER_CRITICAL();
   153e0:	e0bffb15 	stw	r2,-20(fp)
    pq             = (OS_Q *)pevent->OSEventPtr;      /* Point to queue storage structure              */
   153e4:	e0bfff17 	ldw	r2,-4(fp)
   153e8:	10800117 	ldw	r2,4(r2)
   153ec:	e0bffc15 	stw	r2,-16(fp)
    pq->OSQIn      = pq->OSQStart;
   153f0:	e0bffc17 	ldw	r2,-16(fp)
   153f4:	10c00117 	ldw	r3,4(r2)
   153f8:	e0bffc17 	ldw	r2,-16(fp)
   153fc:	10c00315 	stw	r3,12(r2)
    pq->OSQOut     = pq->OSQStart;
   15400:	e0bffc17 	ldw	r2,-16(fp)
   15404:	10c00117 	ldw	r3,4(r2)
   15408:	e0bffc17 	ldw	r2,-16(fp)
   1540c:	10c00415 	stw	r3,16(r2)
    pq->OSQEntries = 0;
   15410:	e0bffc17 	ldw	r2,-16(fp)
   15414:	1000058d 	sth	zero,22(r2)
   15418:	e0bffb17 	ldw	r2,-20(fp)
   1541c:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   15420:	e0bffe17 	ldw	r2,-8(fp)
   15424:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
   15428:	0005883a 	mov	r2,zero
}
   1542c:	e037883a 	mov	sp,fp
   15430:	df000017 	ldw	fp,0(sp)
   15434:	dec00104 	addi	sp,sp,4
   15438:	f800283a 	ret

0001543c <OSQPend>:
* Note(s)    : As of V2.60, this function allows you to receive NULL pointer messages.
*********************************************************************************************************
*/

void  *OSQPend (OS_EVENT *pevent, INT16U timeout, INT8U *perr)
{
   1543c:	defff304 	addi	sp,sp,-52
   15440:	dfc00c15 	stw	ra,48(sp)
   15444:	df000b15 	stw	fp,44(sp)
   15448:	df000b04 	addi	fp,sp,44
   1544c:	e13ffd15 	stw	r4,-12(fp)
   15450:	2805883a 	mov	r2,r5
   15454:	e1bfff15 	stw	r6,-4(fp)
   15458:	e0bffe0d 	sth	r2,-8(fp)
    void      *pmsg;
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   1545c:	e03ff615 	stw	zero,-40(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
   15460:	e0bfff17 	ldw	r2,-4(fp)
   15464:	1000021e 	bne	r2,zero,15470 <OSQPend+0x34>
        return ((void *)0);
   15468:	0005883a 	mov	r2,zero
   1546c:	0000ad06 	br	15724 <OSQPend+0x2e8>
    }
    if (pevent == (OS_EVENT *)0) {               /* Validate 'pevent'                                  */
   15470:	e0bffd17 	ldw	r2,-12(fp)
   15474:	1000051e 	bne	r2,zero,1548c <OSQPend+0x50>
        *perr = OS_ERR_PEVENT_NULL;
   15478:	e0bfff17 	ldw	r2,-4(fp)
   1547c:	00c00104 	movi	r3,4
   15480:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
   15484:	0005883a 	mov	r2,zero
   15488:	0000a606 	br	15724 <OSQPend+0x2e8>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {/* Validate event block type                          */
   1548c:	e0bffd17 	ldw	r2,-12(fp)
   15490:	10800003 	ldbu	r2,0(r2)
   15494:	10803fcc 	andi	r2,r2,255
   15498:	108000a0 	cmpeqi	r2,r2,2
   1549c:	1000051e 	bne	r2,zero,154b4 <OSQPend+0x78>
        *perr = OS_ERR_EVENT_TYPE;
   154a0:	e0bfff17 	ldw	r2,-4(fp)
   154a4:	00c00044 	movi	r3,1
   154a8:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
   154ac:	0005883a 	mov	r2,zero
   154b0:	00009c06 	br	15724 <OSQPend+0x2e8>
    }
    if (OSIntNesting > 0) {                      /* See if called from ISR ...                         */
   154b4:	008000b4 	movhi	r2,2
   154b8:	10836404 	addi	r2,r2,3472
   154bc:	10800003 	ldbu	r2,0(r2)
   154c0:	10803fcc 	andi	r2,r2,255
   154c4:	10000526 	beq	r2,zero,154dc <OSQPend+0xa0>
        *perr = OS_ERR_PEND_ISR;                 /* ... can't PEND from an ISR                         */
   154c8:	e0bfff17 	ldw	r2,-4(fp)
   154cc:	00c00084 	movi	r3,2
   154d0:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
   154d4:	0005883a 	mov	r2,zero
   154d8:	00009206 	br	15724 <OSQPend+0x2e8>
    }
    if (OSLockNesting > 0) {                     /* See if called with scheduler locked ...            */
   154dc:	008000b4 	movhi	r2,2
   154e0:	10835604 	addi	r2,r2,3416
   154e4:	10800003 	ldbu	r2,0(r2)
   154e8:	10803fcc 	andi	r2,r2,255
   154ec:	10000526 	beq	r2,zero,15504 <OSQPend+0xc8>
        *perr = OS_ERR_PEND_LOCKED;              /* ... can't PEND when locked                         */
   154f0:	e0bfff17 	ldw	r2,-4(fp)
   154f4:	00c00344 	movi	r3,13
   154f8:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
   154fc:	0005883a 	mov	r2,zero
   15500:	00008806 	br	15724 <OSQPend+0x2e8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   15504:	0005303a 	rdctl	r2,status
   15508:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1550c:	e0fff817 	ldw	r3,-32(fp)
   15510:	00bfff84 	movi	r2,-2
   15514:	1884703a 	and	r2,r3,r2
   15518:	1001703a 	wrctl	status,r2
  
  return context;
   1551c:	e0bff817 	ldw	r2,-32(fp)
    }
    OS_ENTER_CRITICAL();
   15520:	e0bff615 	stw	r2,-40(fp)
    pq = (OS_Q *)pevent->OSEventPtr;             /* Point at queue control block                       */
   15524:	e0bffd17 	ldw	r2,-12(fp)
   15528:	10800117 	ldw	r2,4(r2)
   1552c:	e0bff715 	stw	r2,-36(fp)
    if (pq->OSQEntries > 0) {                    /* See if any messages in the queue                   */
   15530:	e0bff717 	ldw	r2,-36(fp)
   15534:	1080058b 	ldhu	r2,22(r2)
   15538:	10bfffcc 	andi	r2,r2,65535
   1553c:	10001e26 	beq	r2,zero,155b8 <OSQPend+0x17c>
        pmsg = *pq->OSQOut++;                    /* Yes, extract oldest message from the queue         */
   15540:	e0bff717 	ldw	r2,-36(fp)
   15544:	10800417 	ldw	r2,16(r2)
   15548:	11000104 	addi	r4,r2,4
   1554c:	e0fff717 	ldw	r3,-36(fp)
   15550:	19000415 	stw	r4,16(r3)
   15554:	10800017 	ldw	r2,0(r2)
   15558:	e0bff515 	stw	r2,-44(fp)
        pq->OSQEntries--;                        /* Update the number of entries in the queue          */
   1555c:	e0bff717 	ldw	r2,-36(fp)
   15560:	1080058b 	ldhu	r2,22(r2)
   15564:	10bfffc4 	addi	r2,r2,-1
   15568:	1007883a 	mov	r3,r2
   1556c:	e0bff717 	ldw	r2,-36(fp)
   15570:	10c0058d 	sth	r3,22(r2)
        if (pq->OSQOut == pq->OSQEnd) {          /* Wrap OUT pointer if we are at the end of the queue */
   15574:	e0bff717 	ldw	r2,-36(fp)
   15578:	10c00417 	ldw	r3,16(r2)
   1557c:	e0bff717 	ldw	r2,-36(fp)
   15580:	10800217 	ldw	r2,8(r2)
   15584:	1880041e 	bne	r3,r2,15598 <OSQPend+0x15c>
            pq->OSQOut = pq->OSQStart;
   15588:	e0bff717 	ldw	r2,-36(fp)
   1558c:	10c00117 	ldw	r3,4(r2)
   15590:	e0bff717 	ldw	r2,-36(fp)
   15594:	10c00415 	stw	r3,16(r2)
   15598:	e0bff617 	ldw	r2,-40(fp)
   1559c:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   155a0:	e0bff917 	ldw	r2,-28(fp)
   155a4:	1001703a 	wrctl	status,r2
        }
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_NONE;
   155a8:	e0bfff17 	ldw	r2,-4(fp)
   155ac:	10000005 	stb	zero,0(r2)
        return (pmsg);                           /* Return message received                            */
   155b0:	e0bff517 	ldw	r2,-44(fp)
   155b4:	00005b06 	br	15724 <OSQPend+0x2e8>
    }
    OSTCBCur->OSTCBStat     |= OS_STAT_Q;        /* Task will have to pend for a message to be posted  */
   155b8:	008000b4 	movhi	r2,2
   155bc:	10836504 	addi	r2,r2,3476
   155c0:	10c00017 	ldw	r3,0(r2)
   155c4:	008000b4 	movhi	r2,2
   155c8:	10836504 	addi	r2,r2,3476
   155cc:	10800017 	ldw	r2,0(r2)
   155d0:	10800c03 	ldbu	r2,48(r2)
   155d4:	10800114 	ori	r2,r2,4
   155d8:	18800c05 	stb	r2,48(r3)
    OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
   155dc:	008000b4 	movhi	r2,2
   155e0:	10836504 	addi	r2,r2,3476
   155e4:	10800017 	ldw	r2,0(r2)
   155e8:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBDly       = timeout;          /* Load timeout into TCB                              */
   155ec:	008000b4 	movhi	r2,2
   155f0:	10836504 	addi	r2,r2,3476
   155f4:	10800017 	ldw	r2,0(r2)
   155f8:	e0fffe0b 	ldhu	r3,-8(fp)
   155fc:	10c00b8d 	sth	r3,46(r2)
    OS_EventTaskWait(pevent);                    /* Suspend task until event or timeout occurs         */
   15600:	e13ffd17 	ldw	r4,-12(fp)
   15604:	00111740 	call	11174 <OS_EventTaskWait>
   15608:	e0bff617 	ldw	r2,-40(fp)
   1560c:	e0bffa15 	stw	r2,-24(fp)
   15610:	e0bffa17 	ldw	r2,-24(fp)
   15614:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    OS_Sched();                                  /* Find next highest priority task ready to run       */
   15618:	00119f40 	call	119f4 <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1561c:	0005303a 	rdctl	r2,status
   15620:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   15624:	e0fffb17 	ldw	r3,-20(fp)
   15628:	00bfff84 	movi	r2,-2
   1562c:	1884703a 	and	r2,r3,r2
   15630:	1001703a 	wrctl	status,r2
  
  return context;
   15634:	e0bffb17 	ldw	r2,-20(fp)
    OS_ENTER_CRITICAL();
   15638:	e0bff615 	stw	r2,-40(fp)
    switch (OSTCBCur->OSTCBStatPend) {                /* See if we timed-out or aborted                */
   1563c:	008000b4 	movhi	r2,2
   15640:	10836504 	addi	r2,r2,3476
   15644:	10800017 	ldw	r2,0(r2)
   15648:	10800c43 	ldbu	r2,49(r2)
   1564c:	10803fcc 	andi	r2,r2,255
   15650:	10000326 	beq	r2,zero,15660 <OSQPend+0x224>
   15654:	108000a0 	cmpeqi	r2,r2,2
   15658:	1000091e 	bne	r2,zero,15680 <OSQPend+0x244>
   1565c:	00000d06 	br	15694 <OSQPend+0x258>
        case OS_STAT_PEND_OK:                         /* Extract message from TCB (Put there by QPost) */
             pmsg =  OSTCBCur->OSTCBMsg;
   15660:	008000b4 	movhi	r2,2
   15664:	10836504 	addi	r2,r2,3476
   15668:	10800017 	ldw	r2,0(r2)
   1566c:	10800917 	ldw	r2,36(r2)
   15670:	e0bff515 	stw	r2,-44(fp)
            *perr =  OS_ERR_NONE;
   15674:	e0bfff17 	ldw	r2,-4(fp)
   15678:	10000005 	stb	zero,0(r2)
             break;
   1567c:	00001006 	br	156c0 <OSQPend+0x284>

        case OS_STAT_PEND_ABORT:
             pmsg = (void *)0;
   15680:	e03ff515 	stw	zero,-44(fp)
            *perr =  OS_ERR_PEND_ABORT;               /* Indicate that we aborted                      */
   15684:	e0bfff17 	ldw	r2,-4(fp)
   15688:	00c00384 	movi	r3,14
   1568c:	10c00005 	stb	r3,0(r2)
             break;
   15690:	00000b06 	br	156c0 <OSQPend+0x284>

        case OS_STAT_PEND_TO:
        default:
             OS_EventTaskRemove(OSTCBCur, pevent);
   15694:	008000b4 	movhi	r2,2
   15698:	10836504 	addi	r2,r2,3476
   1569c:	10800017 	ldw	r2,0(r2)
   156a0:	1009883a 	mov	r4,r2
   156a4:	e17ffd17 	ldw	r5,-12(fp)
   156a8:	00113cc0 	call	113cc <OS_EventTaskRemove>
             pmsg = (void *)0;
   156ac:	e03ff515 	stw	zero,-44(fp)
            *perr =  OS_ERR_TIMEOUT;                  /* Indicate that we didn't get event within TO   */
   156b0:	e0bfff17 	ldw	r2,-4(fp)
   156b4:	00c00284 	movi	r3,10
   156b8:	10c00005 	stb	r3,0(r2)
             break;
   156bc:	0001883a 	nop
    }
    OSTCBCur->OSTCBStat          =  OS_STAT_RDY;      /* Set   task  status to ready                   */
   156c0:	008000b4 	movhi	r2,2
   156c4:	10836504 	addi	r2,r2,3476
   156c8:	10800017 	ldw	r2,0(r2)
   156cc:	10000c05 	stb	zero,48(r2)
    OSTCBCur->OSTCBStatPend      =  OS_STAT_PEND_OK;  /* Clear pend  status                            */
   156d0:	008000b4 	movhi	r2,2
   156d4:	10836504 	addi	r2,r2,3476
   156d8:	10800017 	ldw	r2,0(r2)
   156dc:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;    /* Clear event pointers                          */
   156e0:	008000b4 	movhi	r2,2
   156e4:	10836504 	addi	r2,r2,3476
   156e8:	10800017 	ldw	r2,0(r2)
   156ec:	10000715 	stw	zero,28(r2)
#if (OS_EVENT_MULTI_EN > 0)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
   156f0:	008000b4 	movhi	r2,2
   156f4:	10836504 	addi	r2,r2,3476
   156f8:	10800017 	ldw	r2,0(r2)
   156fc:	10000815 	stw	zero,32(r2)
#endif
    OSTCBCur->OSTCBMsg           = (void      *)0;    /* Clear  received message                       */
   15700:	008000b4 	movhi	r2,2
   15704:	10836504 	addi	r2,r2,3476
   15708:	10800017 	ldw	r2,0(r2)
   1570c:	10000915 	stw	zero,36(r2)
   15710:	e0bff617 	ldw	r2,-40(fp)
   15714:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   15718:	e0bffc17 	ldw	r2,-16(fp)
   1571c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (pmsg);                                    /* Return received message                       */
   15720:	e0bff517 	ldw	r2,-44(fp)
}
   15724:	e037883a 	mov	sp,fp
   15728:	dfc00117 	ldw	ra,4(sp)
   1572c:	df000017 	ldw	fp,0(sp)
   15730:	dec00204 	addi	sp,sp,8
   15734:	f800283a 	ret

00015738 <OSQPendAbort>:
*********************************************************************************************************
*/

#if OS_Q_PEND_ABORT_EN > 0
INT8U  OSQPendAbort (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
   15738:	defff604 	addi	sp,sp,-40
   1573c:	dfc00915 	stw	ra,36(sp)
   15740:	df000815 	stw	fp,32(sp)
   15744:	df000804 	addi	fp,sp,32
   15748:	e13ffd15 	stw	r4,-12(fp)
   1574c:	2805883a 	mov	r2,r5
   15750:	e1bfff15 	stw	r6,-4(fp)
   15754:	e0bffe05 	stb	r2,-8(fp)
    INT8U      nbr_tasks;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
   15758:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
   1575c:	e0bfff17 	ldw	r2,-4(fp)
   15760:	1000021e 	bne	r2,zero,1576c <OSQPendAbort+0x34>
        return (0);
   15764:	0005883a 	mov	r2,zero
   15768:	00004906 	br	15890 <OSQPendAbort+0x158>
    }
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
   1576c:	e0bffd17 	ldw	r2,-12(fp)
   15770:	1000051e 	bne	r2,zero,15788 <OSQPendAbort+0x50>
        *perr = OS_ERR_PEVENT_NULL;
   15774:	e0bfff17 	ldw	r2,-4(fp)
   15778:	00c00104 	movi	r3,4
   1577c:	10c00005 	stb	r3,0(r2)
        return (0);
   15780:	0005883a 	mov	r2,zero
   15784:	00004206 	br	15890 <OSQPendAbort+0x158>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {          /* Validate event block type                */
   15788:	e0bffd17 	ldw	r2,-12(fp)
   1578c:	10800003 	ldbu	r2,0(r2)
   15790:	10803fcc 	andi	r2,r2,255
   15794:	108000a0 	cmpeqi	r2,r2,2
   15798:	1000051e 	bne	r2,zero,157b0 <OSQPendAbort+0x78>
        *perr = OS_ERR_EVENT_TYPE;
   1579c:	e0bfff17 	ldw	r2,-4(fp)
   157a0:	00c00044 	movi	r3,1
   157a4:	10c00005 	stb	r3,0(r2)
        return (0);
   157a8:	0005883a 	mov	r2,zero
   157ac:	00003806 	br	15890 <OSQPendAbort+0x158>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   157b0:	0005303a 	rdctl	r2,status
   157b4:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   157b8:	e0fffa17 	ldw	r3,-24(fp)
   157bc:	00bfff84 	movi	r2,-2
   157c0:	1884703a 	and	r2,r3,r2
   157c4:	1001703a 	wrctl	status,r2
  
  return context;
   157c8:	e0bffa17 	ldw	r2,-24(fp)
    }
    OS_ENTER_CRITICAL();
   157cc:	e0bff915 	stw	r2,-28(fp)
    if (pevent->OSEventGrp != 0) {                         /* See if any task waiting on queue?        */
   157d0:	e0bffd17 	ldw	r2,-12(fp)
   157d4:	10800283 	ldbu	r2,10(r2)
   157d8:	10803fcc 	andi	r2,r2,255
   157dc:	10002526 	beq	r2,zero,15874 <OSQPendAbort+0x13c>
        nbr_tasks = 0;
   157e0:	e03ff805 	stb	zero,-32(fp)
        switch (opt) {
   157e4:	e0bffe03 	ldbu	r2,-8(fp)
   157e8:	10800060 	cmpeqi	r2,r2,1
   157ec:	10000e26 	beq	r2,zero,15828 <OSQPendAbort+0xf0>
            case OS_PEND_OPT_BROADCAST:                    /* Do we need to abort ALL waiting tasks?   */
                 while (pevent->OSEventGrp != 0) {         /* Yes, ready ALL tasks waiting on queue    */
   157f0:	00000806 	br	15814 <OSQPendAbort+0xdc>
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_ABORT);
   157f4:	e13ffd17 	ldw	r4,-12(fp)
   157f8:	000b883a 	mov	r5,zero
   157fc:	01800104 	movi	r6,4
   15800:	01c00084 	movi	r7,2
   15804:	0010fdc0 	call	10fdc <OS_EventTaskRdy>
                     nbr_tasks++;
   15808:	e0bff803 	ldbu	r2,-32(fp)
   1580c:	10800044 	addi	r2,r2,1
   15810:	e0bff805 	stb	r2,-32(fp)
    OS_ENTER_CRITICAL();
    if (pevent->OSEventGrp != 0) {                         /* See if any task waiting on queue?        */
        nbr_tasks = 0;
        switch (opt) {
            case OS_PEND_OPT_BROADCAST:                    /* Do we need to abort ALL waiting tasks?   */
                 while (pevent->OSEventGrp != 0) {         /* Yes, ready ALL tasks waiting on queue    */
   15814:	e0bffd17 	ldw	r2,-12(fp)
   15818:	10800283 	ldbu	r2,10(r2)
   1581c:	10803fcc 	andi	r2,r2,255
   15820:	103ff41e 	bne	r2,zero,157f4 <__alt_mem_Flash_flash_data+0xf40157f4>
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_ABORT);
                     nbr_tasks++;
                 }
                 break;
   15824:	00000906 	br	1584c <OSQPendAbort+0x114>
               
            case OS_PEND_OPT_NONE:
            default:                                       /* No,  ready HPT       waiting on queue    */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_ABORT);
   15828:	e13ffd17 	ldw	r4,-12(fp)
   1582c:	000b883a 	mov	r5,zero
   15830:	01800104 	movi	r6,4
   15834:	01c00084 	movi	r7,2
   15838:	0010fdc0 	call	10fdc <OS_EventTaskRdy>
                 nbr_tasks++;
   1583c:	e0bff803 	ldbu	r2,-32(fp)
   15840:	10800044 	addi	r2,r2,1
   15844:	e0bff805 	stb	r2,-32(fp)
                 break;
   15848:	0001883a 	nop
   1584c:	e0bff917 	ldw	r2,-28(fp)
   15850:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   15854:	e0bffb17 	ldw	r2,-20(fp)
   15858:	1001703a 	wrctl	status,r2
        }
        OS_EXIT_CRITICAL();
        OS_Sched();                                        /* Find HPT ready to run                    */
   1585c:	00119f40 	call	119f4 <OS_Sched>
        *perr = OS_ERR_PEND_ABORT;
   15860:	e0bfff17 	ldw	r2,-4(fp)
   15864:	00c00384 	movi	r3,14
   15868:	10c00005 	stb	r3,0(r2)
        return (nbr_tasks);
   1586c:	e0bff803 	ldbu	r2,-32(fp)
   15870:	00000706 	br	15890 <OSQPendAbort+0x158>
   15874:	e0bff917 	ldw	r2,-28(fp)
   15878:	e0bffc15 	stw	r2,-16(fp)
   1587c:	e0bffc17 	ldw	r2,-16(fp)
   15880:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
   15884:	e0bfff17 	ldw	r2,-4(fp)
   15888:	10000005 	stb	zero,0(r2)
    return (0);                                            /* No tasks waiting on queue                */
   1588c:	0005883a 	mov	r2,zero
}
   15890:	e037883a 	mov	sp,fp
   15894:	dfc00117 	ldw	ra,4(sp)
   15898:	df000017 	ldw	fp,0(sp)
   1589c:	dec00204 	addi	sp,sp,8
   158a0:	f800283a 	ret

000158a4 <OSQPost>:
*********************************************************************************************************
*/

#if OS_Q_POST_EN > 0
INT8U  OSQPost (OS_EVENT *pevent, void *pmsg)
{
   158a4:	defff604 	addi	sp,sp,-40
   158a8:	dfc00915 	stw	ra,36(sp)
   158ac:	df000815 	stw	fp,32(sp)
   158b0:	df000804 	addi	fp,sp,32
   158b4:	e13ffe15 	stw	r4,-8(fp)
   158b8:	e17fff15 	stw	r5,-4(fp)
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                            /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
   158bc:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                     /* Validate 'pevent'                            */
   158c0:	e0bffe17 	ldw	r2,-8(fp)
   158c4:	1000021e 	bne	r2,zero,158d0 <OSQPost+0x2c>
        return (OS_ERR_PEVENT_NULL);
   158c8:	00800104 	movi	r2,4
   158cc:	00004a06 	br	159f8 <OSQPost+0x154>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {      /* Validate event block type                    */
   158d0:	e0bffe17 	ldw	r2,-8(fp)
   158d4:	10800003 	ldbu	r2,0(r2)
   158d8:	10803fcc 	andi	r2,r2,255
   158dc:	108000a0 	cmpeqi	r2,r2,2
   158e0:	1000021e 	bne	r2,zero,158ec <OSQPost+0x48>
        return (OS_ERR_EVENT_TYPE);
   158e4:	00800044 	movi	r2,1
   158e8:	00004306 	br	159f8 <OSQPost+0x154>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   158ec:	0005303a 	rdctl	r2,status
   158f0:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   158f4:	e0fffa17 	ldw	r3,-24(fp)
   158f8:	00bfff84 	movi	r2,-2
   158fc:	1884703a 	and	r2,r3,r2
   15900:	1001703a 	wrctl	status,r2
  
  return context;
   15904:	e0bffa17 	ldw	r2,-24(fp)
    }
    OS_ENTER_CRITICAL();
   15908:	e0bff815 	stw	r2,-32(fp)
    if (pevent->OSEventGrp != 0) {                     /* See if any task pending on queue             */
   1590c:	e0bffe17 	ldw	r2,-8(fp)
   15910:	10800283 	ldbu	r2,10(r2)
   15914:	10803fcc 	andi	r2,r2,255
   15918:	10000c26 	beq	r2,zero,1594c <OSQPost+0xa8>
                                                       /* Ready highest priority task waiting on event */
        (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
   1591c:	e13ffe17 	ldw	r4,-8(fp)
   15920:	e17fff17 	ldw	r5,-4(fp)
   15924:	01800104 	movi	r6,4
   15928:	000f883a 	mov	r7,zero
   1592c:	0010fdc0 	call	10fdc <OS_EventTaskRdy>
   15930:	e0bff817 	ldw	r2,-32(fp)
   15934:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   15938:	e0bffb17 	ldw	r2,-20(fp)
   1593c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                                    /* Find highest priority task ready to run      */
   15940:	00119f40 	call	119f4 <OS_Sched>
        return (OS_ERR_NONE);
   15944:	0005883a 	mov	r2,zero
   15948:	00002b06 	br	159f8 <OSQPost+0x154>
    }
    pq = (OS_Q *)pevent->OSEventPtr;                   /* Point to queue control block                 */
   1594c:	e0bffe17 	ldw	r2,-8(fp)
   15950:	10800117 	ldw	r2,4(r2)
   15954:	e0bff915 	stw	r2,-28(fp)
    if (pq->OSQEntries >= pq->OSQSize) {               /* Make sure queue is not full                  */
   15958:	e0bff917 	ldw	r2,-28(fp)
   1595c:	10c0058b 	ldhu	r3,22(r2)
   15960:	e0bff917 	ldw	r2,-28(fp)
   15964:	1080050b 	ldhu	r2,20(r2)
   15968:	18ffffcc 	andi	r3,r3,65535
   1596c:	10bfffcc 	andi	r2,r2,65535
   15970:	18800636 	bltu	r3,r2,1598c <OSQPost+0xe8>
   15974:	e0bff817 	ldw	r2,-32(fp)
   15978:	e0bffc15 	stw	r2,-16(fp)
   1597c:	e0bffc17 	ldw	r2,-16(fp)
   15980:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_Q_FULL);
   15984:	00800784 	movi	r2,30
   15988:	00001b06 	br	159f8 <OSQPost+0x154>
    }
    *pq->OSQIn++ = pmsg;                               /* Insert message into queue                    */
   1598c:	e0bff917 	ldw	r2,-28(fp)
   15990:	10800317 	ldw	r2,12(r2)
   15994:	11000104 	addi	r4,r2,4
   15998:	e0fff917 	ldw	r3,-28(fp)
   1599c:	19000315 	stw	r4,12(r3)
   159a0:	e0ffff17 	ldw	r3,-4(fp)
   159a4:	10c00015 	stw	r3,0(r2)
    pq->OSQEntries++;                                  /* Update the nbr of entries in the queue       */
   159a8:	e0bff917 	ldw	r2,-28(fp)
   159ac:	1080058b 	ldhu	r2,22(r2)
   159b0:	10800044 	addi	r2,r2,1
   159b4:	1007883a 	mov	r3,r2
   159b8:	e0bff917 	ldw	r2,-28(fp)
   159bc:	10c0058d 	sth	r3,22(r2)
    if (pq->OSQIn == pq->OSQEnd) {                     /* Wrap IN ptr if we are at end of queue        */
   159c0:	e0bff917 	ldw	r2,-28(fp)
   159c4:	10c00317 	ldw	r3,12(r2)
   159c8:	e0bff917 	ldw	r2,-28(fp)
   159cc:	10800217 	ldw	r2,8(r2)
   159d0:	1880041e 	bne	r3,r2,159e4 <OSQPost+0x140>
        pq->OSQIn = pq->OSQStart;
   159d4:	e0bff917 	ldw	r2,-28(fp)
   159d8:	10c00117 	ldw	r3,4(r2)
   159dc:	e0bff917 	ldw	r2,-28(fp)
   159e0:	10c00315 	stw	r3,12(r2)
   159e4:	e0bff817 	ldw	r2,-32(fp)
   159e8:	e0bffd15 	stw	r2,-12(fp)
   159ec:	e0bffd17 	ldw	r2,-12(fp)
   159f0:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
   159f4:	0005883a 	mov	r2,zero
}
   159f8:	e037883a 	mov	sp,fp
   159fc:	dfc00117 	ldw	ra,4(sp)
   15a00:	df000017 	ldw	fp,0(sp)
   15a04:	dec00204 	addi	sp,sp,8
   15a08:	f800283a 	ret

00015a0c <OSQPostFront>:
*********************************************************************************************************
*/

#if OS_Q_POST_FRONT_EN > 0
INT8U  OSQPostFront (OS_EVENT *pevent, void *pmsg)
{
   15a0c:	defff604 	addi	sp,sp,-40
   15a10:	dfc00915 	stw	ra,36(sp)
   15a14:	df000815 	stw	fp,32(sp)
   15a18:	df000804 	addi	fp,sp,32
   15a1c:	e13ffe15 	stw	r4,-8(fp)
   15a20:	e17fff15 	stw	r5,-4(fp)
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   15a24:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
   15a28:	e0bffe17 	ldw	r2,-8(fp)
   15a2c:	1000021e 	bne	r2,zero,15a38 <OSQPostFront+0x2c>
        return (OS_ERR_PEVENT_NULL);
   15a30:	00800104 	movi	r2,4
   15a34:	00004c06 	br	15b68 <OSQPostFront+0x15c>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {     /* Validate event block type                     */
   15a38:	e0bffe17 	ldw	r2,-8(fp)
   15a3c:	10800003 	ldbu	r2,0(r2)
   15a40:	10803fcc 	andi	r2,r2,255
   15a44:	108000a0 	cmpeqi	r2,r2,2
   15a48:	1000021e 	bne	r2,zero,15a54 <OSQPostFront+0x48>
        return (OS_ERR_EVENT_TYPE);
   15a4c:	00800044 	movi	r2,1
   15a50:	00004506 	br	15b68 <OSQPostFront+0x15c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   15a54:	0005303a 	rdctl	r2,status
   15a58:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   15a5c:	e0fffa17 	ldw	r3,-24(fp)
   15a60:	00bfff84 	movi	r2,-2
   15a64:	1884703a 	and	r2,r3,r2
   15a68:	1001703a 	wrctl	status,r2
  
  return context;
   15a6c:	e0bffa17 	ldw	r2,-24(fp)
    }
    OS_ENTER_CRITICAL();
   15a70:	e0bff815 	stw	r2,-32(fp)
    if (pevent->OSEventGrp != 0) {                    /* See if any task pending on queue              */
   15a74:	e0bffe17 	ldw	r2,-8(fp)
   15a78:	10800283 	ldbu	r2,10(r2)
   15a7c:	10803fcc 	andi	r2,r2,255
   15a80:	10000c26 	beq	r2,zero,15ab4 <OSQPostFront+0xa8>
                                                      /* Ready highest priority task waiting on event  */
        (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
   15a84:	e13ffe17 	ldw	r4,-8(fp)
   15a88:	e17fff17 	ldw	r5,-4(fp)
   15a8c:	01800104 	movi	r6,4
   15a90:	000f883a 	mov	r7,zero
   15a94:	0010fdc0 	call	10fdc <OS_EventTaskRdy>
   15a98:	e0bff817 	ldw	r2,-32(fp)
   15a9c:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   15aa0:	e0bffb17 	ldw	r2,-20(fp)
   15aa4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                                   /* Find highest priority task ready to run       */
   15aa8:	00119f40 	call	119f4 <OS_Sched>
        return (OS_ERR_NONE);
   15aac:	0005883a 	mov	r2,zero
   15ab0:	00002d06 	br	15b68 <OSQPostFront+0x15c>
    }
    pq = (OS_Q *)pevent->OSEventPtr;                  /* Point to queue control block                  */
   15ab4:	e0bffe17 	ldw	r2,-8(fp)
   15ab8:	10800117 	ldw	r2,4(r2)
   15abc:	e0bff915 	stw	r2,-28(fp)
    if (pq->OSQEntries >= pq->OSQSize) {              /* Make sure queue is not full                   */
   15ac0:	e0bff917 	ldw	r2,-28(fp)
   15ac4:	10c0058b 	ldhu	r3,22(r2)
   15ac8:	e0bff917 	ldw	r2,-28(fp)
   15acc:	1080050b 	ldhu	r2,20(r2)
   15ad0:	18ffffcc 	andi	r3,r3,65535
   15ad4:	10bfffcc 	andi	r2,r2,65535
   15ad8:	18800636 	bltu	r3,r2,15af4 <OSQPostFront+0xe8>
   15adc:	e0bff817 	ldw	r2,-32(fp)
   15ae0:	e0bffc15 	stw	r2,-16(fp)
   15ae4:	e0bffc17 	ldw	r2,-16(fp)
   15ae8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_Q_FULL);
   15aec:	00800784 	movi	r2,30
   15af0:	00001d06 	br	15b68 <OSQPostFront+0x15c>
    }
    if (pq->OSQOut == pq->OSQStart) {                 /* Wrap OUT ptr if we are at the 1st queue entry */
   15af4:	e0bff917 	ldw	r2,-28(fp)
   15af8:	10c00417 	ldw	r3,16(r2)
   15afc:	e0bff917 	ldw	r2,-28(fp)
   15b00:	10800117 	ldw	r2,4(r2)
   15b04:	1880041e 	bne	r3,r2,15b18 <OSQPostFront+0x10c>
        pq->OSQOut = pq->OSQEnd;
   15b08:	e0bff917 	ldw	r2,-28(fp)
   15b0c:	10c00217 	ldw	r3,8(r2)
   15b10:	e0bff917 	ldw	r2,-28(fp)
   15b14:	10c00415 	stw	r3,16(r2)
    }
    pq->OSQOut--;
   15b18:	e0bff917 	ldw	r2,-28(fp)
   15b1c:	10800417 	ldw	r2,16(r2)
   15b20:	10ffff04 	addi	r3,r2,-4
   15b24:	e0bff917 	ldw	r2,-28(fp)
   15b28:	10c00415 	stw	r3,16(r2)
    *pq->OSQOut = pmsg;                               /* Insert message into queue                     */
   15b2c:	e0bff917 	ldw	r2,-28(fp)
   15b30:	10800417 	ldw	r2,16(r2)
   15b34:	e0ffff17 	ldw	r3,-4(fp)
   15b38:	10c00015 	stw	r3,0(r2)
    pq->OSQEntries++;                                 /* Update the nbr of entries in the queue        */
   15b3c:	e0bff917 	ldw	r2,-28(fp)
   15b40:	1080058b 	ldhu	r2,22(r2)
   15b44:	10800044 	addi	r2,r2,1
   15b48:	1007883a 	mov	r3,r2
   15b4c:	e0bff917 	ldw	r2,-28(fp)
   15b50:	10c0058d 	sth	r3,22(r2)
   15b54:	e0bff817 	ldw	r2,-32(fp)
   15b58:	e0bffd15 	stw	r2,-12(fp)
   15b5c:	e0bffd17 	ldw	r2,-12(fp)
   15b60:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
   15b64:	0005883a 	mov	r2,zero
}
   15b68:	e037883a 	mov	sp,fp
   15b6c:	dfc00117 	ldw	ra,4(sp)
   15b70:	df000017 	ldw	fp,0(sp)
   15b74:	dec00204 	addi	sp,sp,8
   15b78:	f800283a 	ret

00015b7c <OSQPostOpt>:
*********************************************************************************************************
*/

#if OS_Q_POST_OPT_EN > 0
INT8U  OSQPostOpt (OS_EVENT *pevent, void *pmsg, INT8U opt)
{
   15b7c:	defff504 	addi	sp,sp,-44
   15b80:	dfc00a15 	stw	ra,40(sp)
   15b84:	df000915 	stw	fp,36(sp)
   15b88:	df000904 	addi	fp,sp,36
   15b8c:	e13ffd15 	stw	r4,-12(fp)
   15b90:	e17ffe15 	stw	r5,-8(fp)
   15b94:	3005883a 	mov	r2,r6
   15b98:	e0bfff05 	stb	r2,-4(fp)
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   15b9c:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
   15ba0:	e0bffd17 	ldw	r2,-12(fp)
   15ba4:	1000021e 	bne	r2,zero,15bb0 <OSQPostOpt+0x34>
        return (OS_ERR_PEVENT_NULL);
   15ba8:	00800104 	movi	r2,4
   15bac:	00007106 	br	15d74 <OSQPostOpt+0x1f8>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {     /* Validate event block type                     */
   15bb0:	e0bffd17 	ldw	r2,-12(fp)
   15bb4:	10800003 	ldbu	r2,0(r2)
   15bb8:	10803fcc 	andi	r2,r2,255
   15bbc:	108000a0 	cmpeqi	r2,r2,2
   15bc0:	1000021e 	bne	r2,zero,15bcc <OSQPostOpt+0x50>
        return (OS_ERR_EVENT_TYPE);
   15bc4:	00800044 	movi	r2,1
   15bc8:	00006a06 	br	15d74 <OSQPostOpt+0x1f8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   15bcc:	0005303a 	rdctl	r2,status
   15bd0:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   15bd4:	e0fff917 	ldw	r3,-28(fp)
   15bd8:	00bfff84 	movi	r2,-2
   15bdc:	1884703a 	and	r2,r3,r2
   15be0:	1001703a 	wrctl	status,r2
  
  return context;
   15be4:	e0bff917 	ldw	r2,-28(fp)
    }
    OS_ENTER_CRITICAL();
   15be8:	e0bff715 	stw	r2,-36(fp)
    if (pevent->OSEventGrp != 0x00) {                 /* See if any task pending on queue              */
   15bec:	e0bffd17 	ldw	r2,-12(fp)
   15bf0:	10800283 	ldbu	r2,10(r2)
   15bf4:	10803fcc 	andi	r2,r2,255
   15bf8:	10001d26 	beq	r2,zero,15c70 <OSQPostOpt+0xf4>
        if ((opt & OS_POST_OPT_BROADCAST) != 0x00) {  /* Do we need to post msg to ALL waiting tasks ? */
   15bfc:	e0bfff03 	ldbu	r2,-4(fp)
   15c00:	1080004c 	andi	r2,r2,1
   15c04:	10000b26 	beq	r2,zero,15c34 <OSQPostOpt+0xb8>
            while (pevent->OSEventGrp != 0) {         /* Yes, Post to ALL tasks waiting on queue       */
   15c08:	00000506 	br	15c20 <OSQPostOpt+0xa4>
                (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
   15c0c:	e13ffd17 	ldw	r4,-12(fp)
   15c10:	e17ffe17 	ldw	r5,-8(fp)
   15c14:	01800104 	movi	r6,4
   15c18:	000f883a 	mov	r7,zero
   15c1c:	0010fdc0 	call	10fdc <OS_EventTaskRdy>
        return (OS_ERR_EVENT_TYPE);
    }
    OS_ENTER_CRITICAL();
    if (pevent->OSEventGrp != 0x00) {                 /* See if any task pending on queue              */
        if ((opt & OS_POST_OPT_BROADCAST) != 0x00) {  /* Do we need to post msg to ALL waiting tasks ? */
            while (pevent->OSEventGrp != 0) {         /* Yes, Post to ALL tasks waiting on queue       */
   15c20:	e0bffd17 	ldw	r2,-12(fp)
   15c24:	10800283 	ldbu	r2,10(r2)
   15c28:	10803fcc 	andi	r2,r2,255
   15c2c:	103ff71e 	bne	r2,zero,15c0c <__alt_mem_Flash_flash_data+0xf4015c0c>
   15c30:	00000506 	br	15c48 <OSQPostOpt+0xcc>
                (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
            }
        } else {                                      /* No,  Post to HPT waiting on queue             */
            (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
   15c34:	e13ffd17 	ldw	r4,-12(fp)
   15c38:	e17ffe17 	ldw	r5,-8(fp)
   15c3c:	01800104 	movi	r6,4
   15c40:	000f883a 	mov	r7,zero
   15c44:	0010fdc0 	call	10fdc <OS_EventTaskRdy>
   15c48:	e0bff717 	ldw	r2,-36(fp)
   15c4c:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   15c50:	e0bffa17 	ldw	r2,-24(fp)
   15c54:	1001703a 	wrctl	status,r2
        }
        OS_EXIT_CRITICAL();
        if ((opt & OS_POST_OPT_NO_SCHED) == 0) {	  /* See if scheduler needs to be invoked          */
   15c58:	e0bfff03 	ldbu	r2,-4(fp)
   15c5c:	1080010c 	andi	r2,r2,4
   15c60:	1000011e 	bne	r2,zero,15c68 <OSQPostOpt+0xec>
            OS_Sched();                               /* Find highest priority task ready to run       */
   15c64:	00119f40 	call	119f4 <OS_Sched>
        }
        return (OS_ERR_NONE);
   15c68:	0005883a 	mov	r2,zero
   15c6c:	00004106 	br	15d74 <OSQPostOpt+0x1f8>
    }
    pq = (OS_Q *)pevent->OSEventPtr;                  /* Point to queue control block                  */
   15c70:	e0bffd17 	ldw	r2,-12(fp)
   15c74:	10800117 	ldw	r2,4(r2)
   15c78:	e0bff815 	stw	r2,-32(fp)
    if (pq->OSQEntries >= pq->OSQSize) {              /* Make sure queue is not full                   */
   15c7c:	e0bff817 	ldw	r2,-32(fp)
   15c80:	10c0058b 	ldhu	r3,22(r2)
   15c84:	e0bff817 	ldw	r2,-32(fp)
   15c88:	1080050b 	ldhu	r2,20(r2)
   15c8c:	18ffffcc 	andi	r3,r3,65535
   15c90:	10bfffcc 	andi	r2,r2,65535
   15c94:	18800636 	bltu	r3,r2,15cb0 <OSQPostOpt+0x134>
   15c98:	e0bff717 	ldw	r2,-36(fp)
   15c9c:	e0bffb15 	stw	r2,-20(fp)
   15ca0:	e0bffb17 	ldw	r2,-20(fp)
   15ca4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_Q_FULL);
   15ca8:	00800784 	movi	r2,30
   15cac:	00003106 	br	15d74 <OSQPostOpt+0x1f8>
    }
    if ((opt & OS_POST_OPT_FRONT) != 0x00) {          /* Do we post to the FRONT of the queue?         */
   15cb0:	e0bfff03 	ldbu	r2,-4(fp)
   15cb4:	1080008c 	andi	r2,r2,2
   15cb8:	10001326 	beq	r2,zero,15d08 <OSQPostOpt+0x18c>
        if (pq->OSQOut == pq->OSQStart) {             /* Yes, Post as LIFO, Wrap OUT pointer if we ... */
   15cbc:	e0bff817 	ldw	r2,-32(fp)
   15cc0:	10c00417 	ldw	r3,16(r2)
   15cc4:	e0bff817 	ldw	r2,-32(fp)
   15cc8:	10800117 	ldw	r2,4(r2)
   15ccc:	1880041e 	bne	r3,r2,15ce0 <OSQPostOpt+0x164>
            pq->OSQOut = pq->OSQEnd;                  /*      ... are at the 1st queue entry           */
   15cd0:	e0bff817 	ldw	r2,-32(fp)
   15cd4:	10c00217 	ldw	r3,8(r2)
   15cd8:	e0bff817 	ldw	r2,-32(fp)
   15cdc:	10c00415 	stw	r3,16(r2)
        }
        pq->OSQOut--;
   15ce0:	e0bff817 	ldw	r2,-32(fp)
   15ce4:	10800417 	ldw	r2,16(r2)
   15ce8:	10ffff04 	addi	r3,r2,-4
   15cec:	e0bff817 	ldw	r2,-32(fp)
   15cf0:	10c00415 	stw	r3,16(r2)
        *pq->OSQOut = pmsg;                           /*      Insert message into queue                */
   15cf4:	e0bff817 	ldw	r2,-32(fp)
   15cf8:	10800417 	ldw	r2,16(r2)
   15cfc:	e0fffe17 	ldw	r3,-8(fp)
   15d00:	10c00015 	stw	r3,0(r2)
   15d04:	00001006 	br	15d48 <OSQPostOpt+0x1cc>
    } else {                                          /* No,  Post as FIFO                             */
        *pq->OSQIn++ = pmsg;                          /*      Insert message into queue                */
   15d08:	e0bff817 	ldw	r2,-32(fp)
   15d0c:	10800317 	ldw	r2,12(r2)
   15d10:	11000104 	addi	r4,r2,4
   15d14:	e0fff817 	ldw	r3,-32(fp)
   15d18:	19000315 	stw	r4,12(r3)
   15d1c:	e0fffe17 	ldw	r3,-8(fp)
   15d20:	10c00015 	stw	r3,0(r2)
        if (pq->OSQIn == pq->OSQEnd) {                /*      Wrap IN ptr if we are at end of queue    */
   15d24:	e0bff817 	ldw	r2,-32(fp)
   15d28:	10c00317 	ldw	r3,12(r2)
   15d2c:	e0bff817 	ldw	r2,-32(fp)
   15d30:	10800217 	ldw	r2,8(r2)
   15d34:	1880041e 	bne	r3,r2,15d48 <OSQPostOpt+0x1cc>
            pq->OSQIn = pq->OSQStart;
   15d38:	e0bff817 	ldw	r2,-32(fp)
   15d3c:	10c00117 	ldw	r3,4(r2)
   15d40:	e0bff817 	ldw	r2,-32(fp)
   15d44:	10c00315 	stw	r3,12(r2)
        }
    }
    pq->OSQEntries++;                                 /* Update the nbr of entries in the queue        */
   15d48:	e0bff817 	ldw	r2,-32(fp)
   15d4c:	1080058b 	ldhu	r2,22(r2)
   15d50:	10800044 	addi	r2,r2,1
   15d54:	1007883a 	mov	r3,r2
   15d58:	e0bff817 	ldw	r2,-32(fp)
   15d5c:	10c0058d 	sth	r3,22(r2)
   15d60:	e0bff717 	ldw	r2,-36(fp)
   15d64:	e0bffc15 	stw	r2,-16(fp)
   15d68:	e0bffc17 	ldw	r2,-16(fp)
   15d6c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
   15d70:	0005883a 	mov	r2,zero
}
   15d74:	e037883a 	mov	sp,fp
   15d78:	dfc00117 	ldw	ra,4(sp)
   15d7c:	df000017 	ldw	fp,0(sp)
   15d80:	dec00204 	addi	sp,sp,8
   15d84:	f800283a 	ret

00015d88 <OSQQuery>:
*********************************************************************************************************
*/

#if OS_Q_QUERY_EN > 0
INT8U  OSQQuery (OS_EVENT *pevent, OS_Q_DATA *p_q_data)
{
   15d88:	defff604 	addi	sp,sp,-40
   15d8c:	df000915 	stw	fp,36(sp)
   15d90:	df000904 	addi	fp,sp,36
   15d94:	e13ffe15 	stw	r4,-8(fp)
   15d98:	e17fff15 	stw	r5,-4(fp)
#else
    INT16U    *psrc;
    INT16U    *pdest;
#endif
#if OS_CRITICAL_METHOD == 3                            /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
   15d9c:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                     /* Validate 'pevent'                            */
   15da0:	e0bffe17 	ldw	r2,-8(fp)
   15da4:	1000021e 	bne	r2,zero,15db0 <OSQQuery+0x28>
        return (OS_ERR_PEVENT_NULL);
   15da8:	00800104 	movi	r2,4
   15dac:	00004906 	br	15ed4 <OSQQuery+0x14c>
    }
    if (p_q_data == (OS_Q_DATA *)0) {                  /* Validate 'p_q_data'                          */
   15db0:	e0bfff17 	ldw	r2,-4(fp)
   15db4:	1000021e 	bne	r2,zero,15dc0 <OSQQuery+0x38>
        return (OS_ERR_PDATA_NULL);
   15db8:	00800244 	movi	r2,9
   15dbc:	00004506 	br	15ed4 <OSQQuery+0x14c>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {      /* Validate event block type                    */
   15dc0:	e0bffe17 	ldw	r2,-8(fp)
   15dc4:	10800003 	ldbu	r2,0(r2)
   15dc8:	10803fcc 	andi	r2,r2,255
   15dcc:	108000a0 	cmpeqi	r2,r2,2
   15dd0:	1000021e 	bne	r2,zero,15ddc <OSQQuery+0x54>
        return (OS_ERR_EVENT_TYPE);
   15dd4:	00800044 	movi	r2,1
   15dd8:	00003e06 	br	15ed4 <OSQQuery+0x14c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   15ddc:	0005303a 	rdctl	r2,status
   15de0:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   15de4:	e0fffc17 	ldw	r3,-16(fp)
   15de8:	00bfff84 	movi	r2,-2
   15dec:	1884703a 	and	r2,r3,r2
   15df0:	1001703a 	wrctl	status,r2
  
  return context;
   15df4:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
   15df8:	e0bffa15 	stw	r2,-24(fp)
    p_q_data->OSEventGrp = pevent->OSEventGrp;         /* Copy message queue wait list                 */
   15dfc:	e0bffe17 	ldw	r2,-8(fp)
   15e00:	10c00283 	ldbu	r3,10(r2)
   15e04:	e0bfff17 	ldw	r2,-4(fp)
   15e08:	10c002c5 	stb	r3,11(r2)
    psrc                 = &pevent->OSEventTbl[0];
   15e0c:	e0bffe17 	ldw	r2,-8(fp)
   15e10:	108002c4 	addi	r2,r2,11
   15e14:	e0bff815 	stw	r2,-32(fp)
    pdest                = &p_q_data->OSEventTbl[0];
   15e18:	e0bfff17 	ldw	r2,-4(fp)
   15e1c:	10800204 	addi	r2,r2,8
   15e20:	e0bff915 	stw	r2,-28(fp)
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
   15e24:	e03ff705 	stb	zero,-36(fp)
   15e28:	00000b06 	br	15e58 <OSQQuery+0xd0>
        *pdest++ = *psrc++;
   15e2c:	e0bff917 	ldw	r2,-28(fp)
   15e30:	10c00044 	addi	r3,r2,1
   15e34:	e0fff915 	stw	r3,-28(fp)
   15e38:	e0fff817 	ldw	r3,-32(fp)
   15e3c:	19000044 	addi	r4,r3,1
   15e40:	e13ff815 	stw	r4,-32(fp)
   15e44:	18c00003 	ldbu	r3,0(r3)
   15e48:	10c00005 	stb	r3,0(r2)
    }
    OS_ENTER_CRITICAL();
    p_q_data->OSEventGrp = pevent->OSEventGrp;         /* Copy message queue wait list                 */
    psrc                 = &pevent->OSEventTbl[0];
    pdest                = &p_q_data->OSEventTbl[0];
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
   15e4c:	e0bff703 	ldbu	r2,-36(fp)
   15e50:	10800044 	addi	r2,r2,1
   15e54:	e0bff705 	stb	r2,-36(fp)
   15e58:	e0bff703 	ldbu	r2,-36(fp)
   15e5c:	108000f0 	cmpltui	r2,r2,3
   15e60:	103ff21e 	bne	r2,zero,15e2c <__alt_mem_Flash_flash_data+0xf4015e2c>
        *pdest++ = *psrc++;
    }
    pq = (OS_Q *)pevent->OSEventPtr;
   15e64:	e0bffe17 	ldw	r2,-8(fp)
   15e68:	10800117 	ldw	r2,4(r2)
   15e6c:	e0bffb15 	stw	r2,-20(fp)
    if (pq->OSQEntries > 0) {
   15e70:	e0bffb17 	ldw	r2,-20(fp)
   15e74:	1080058b 	ldhu	r2,22(r2)
   15e78:	10bfffcc 	andi	r2,r2,65535
   15e7c:	10000626 	beq	r2,zero,15e98 <OSQQuery+0x110>
        p_q_data->OSMsg = *pq->OSQOut;                 /* Get next message to return if available      */
   15e80:	e0bffb17 	ldw	r2,-20(fp)
   15e84:	10800417 	ldw	r2,16(r2)
   15e88:	10c00017 	ldw	r3,0(r2)
   15e8c:	e0bfff17 	ldw	r2,-4(fp)
   15e90:	10c00015 	stw	r3,0(r2)
   15e94:	00000206 	br	15ea0 <OSQQuery+0x118>
    } else {
        p_q_data->OSMsg = (void *)0;
   15e98:	e0bfff17 	ldw	r2,-4(fp)
   15e9c:	10000015 	stw	zero,0(r2)
    }
    p_q_data->OSNMsgs = pq->OSQEntries;
   15ea0:	e0bffb17 	ldw	r2,-20(fp)
   15ea4:	10c0058b 	ldhu	r3,22(r2)
   15ea8:	e0bfff17 	ldw	r2,-4(fp)
   15eac:	10c0010d 	sth	r3,4(r2)
    p_q_data->OSQSize = pq->OSQSize;
   15eb0:	e0bffb17 	ldw	r2,-20(fp)
   15eb4:	10c0050b 	ldhu	r3,20(r2)
   15eb8:	e0bfff17 	ldw	r2,-4(fp)
   15ebc:	10c0018d 	sth	r3,6(r2)
   15ec0:	e0bffa17 	ldw	r2,-24(fp)
   15ec4:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   15ec8:	e0bffd17 	ldw	r2,-12(fp)
   15ecc:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
   15ed0:	0005883a 	mov	r2,zero
}
   15ed4:	e037883a 	mov	sp,fp
   15ed8:	df000017 	ldw	fp,0(sp)
   15edc:	dec00104 	addi	sp,sp,4
   15ee0:	f800283a 	ret

00015ee4 <OS_QInit>:
* Note(s)    : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

void  OS_QInit (void)
{
   15ee4:	defffb04 	addi	sp,sp,-20
   15ee8:	dfc00415 	stw	ra,16(sp)
   15eec:	df000315 	stw	fp,12(sp)
   15ef0:	df000304 	addi	fp,sp,12
    OS_Q   *pq1;
    OS_Q   *pq2;



    OS_MemClr((INT8U *)&OSQTbl[0], sizeof(OSQTbl));  /* Clear the queue table                          */
   15ef4:	010000f4 	movhi	r4,3
   15ef8:	213b5404 	addi	r4,r4,-4784
   15efc:	01407804 	movi	r5,480
   15f00:	00119400 	call	11940 <OS_MemClr>
    pq1 = &OSQTbl[0];
   15f04:	008000f4 	movhi	r2,3
   15f08:	10bb5404 	addi	r2,r2,-4784
   15f0c:	e0bffe15 	stw	r2,-8(fp)
    pq2 = &OSQTbl[1];
   15f10:	008000f4 	movhi	r2,3
   15f14:	10bb5a04 	addi	r2,r2,-4760
   15f18:	e0bfff15 	stw	r2,-4(fp)
    for (i = 0; i < (OS_MAX_QS - 1); i++) {          /* Init. list of free QUEUE control blocks        */
   15f1c:	e03ffd0d 	sth	zero,-12(fp)
   15f20:	00000c06 	br	15f54 <OS_QInit+0x70>
        pq1->OSQPtr = pq2;
   15f24:	e0bffe17 	ldw	r2,-8(fp)
   15f28:	e0ffff17 	ldw	r3,-4(fp)
   15f2c:	10c00015 	stw	r3,0(r2)
        pq1++;
   15f30:	e0bffe17 	ldw	r2,-8(fp)
   15f34:	10800604 	addi	r2,r2,24
   15f38:	e0bffe15 	stw	r2,-8(fp)
        pq2++;
   15f3c:	e0bfff17 	ldw	r2,-4(fp)
   15f40:	10800604 	addi	r2,r2,24
   15f44:	e0bfff15 	stw	r2,-4(fp)


    OS_MemClr((INT8U *)&OSQTbl[0], sizeof(OSQTbl));  /* Clear the queue table                          */
    pq1 = &OSQTbl[0];
    pq2 = &OSQTbl[1];
    for (i = 0; i < (OS_MAX_QS - 1); i++) {          /* Init. list of free QUEUE control blocks        */
   15f48:	e0bffd0b 	ldhu	r2,-12(fp)
   15f4c:	10800044 	addi	r2,r2,1
   15f50:	e0bffd0d 	sth	r2,-12(fp)
   15f54:	e0bffd0b 	ldhu	r2,-12(fp)
   15f58:	108004f0 	cmpltui	r2,r2,19
   15f5c:	103ff11e 	bne	r2,zero,15f24 <__alt_mem_Flash_flash_data+0xf4015f24>
        pq1->OSQPtr = pq2;
        pq1++;
        pq2++;
    }
    pq1->OSQPtr = (OS_Q *)0;
   15f60:	e0bffe17 	ldw	r2,-8(fp)
   15f64:	10000015 	stw	zero,0(r2)
    OSQFreeList = &OSQTbl[0];
   15f68:	008000b4 	movhi	r2,2
   15f6c:	10836104 	addi	r2,r2,3460
   15f70:	00c000f4 	movhi	r3,3
   15f74:	18fb5404 	addi	r3,r3,-4784
   15f78:	10c00015 	stw	r3,0(r2)
#endif
}
   15f7c:	e037883a 	mov	sp,fp
   15f80:	dfc00117 	ldw	ra,4(sp)
   15f84:	df000017 	ldw	fp,0(sp)
   15f88:	dec00204 	addi	sp,sp,8
   15f8c:	f800283a 	ret

00015f90 <OSSemAccept>:
*********************************************************************************************************
*/

#if OS_SEM_ACCEPT_EN > 0
INT16U  OSSemAccept (OS_EVENT *pevent)
{
   15f90:	defffa04 	addi	sp,sp,-24
   15f94:	df000515 	stw	fp,20(sp)
   15f98:	df000504 	addi	fp,sp,20
   15f9c:	e13fff15 	stw	r4,-4(fp)
    INT16U     cnt;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   15fa0:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
   15fa4:	e0bfff17 	ldw	r2,-4(fp)
   15fa8:	1000021e 	bne	r2,zero,15fb4 <OSSemAccept+0x24>
        return (0);
   15fac:	0005883a 	mov	r2,zero
   15fb0:	00001f06 	br	16030 <OSSemAccept+0xa0>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
   15fb4:	e0bfff17 	ldw	r2,-4(fp)
   15fb8:	10800003 	ldbu	r2,0(r2)
   15fbc:	10803fcc 	andi	r2,r2,255
   15fc0:	108000e0 	cmpeqi	r2,r2,3
   15fc4:	1000021e 	bne	r2,zero,15fd0 <OSSemAccept+0x40>
        return (0);
   15fc8:	0005883a 	mov	r2,zero
   15fcc:	00001806 	br	16030 <OSSemAccept+0xa0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   15fd0:	0005303a 	rdctl	r2,status
   15fd4:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   15fd8:	e0fffd17 	ldw	r3,-12(fp)
   15fdc:	00bfff84 	movi	r2,-2
   15fe0:	1884703a 	and	r2,r3,r2
   15fe4:	1001703a 	wrctl	status,r2
  
  return context;
   15fe8:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
   15fec:	e0bffb15 	stw	r2,-20(fp)
    cnt = pevent->OSEventCnt;
   15ff0:	e0bfff17 	ldw	r2,-4(fp)
   15ff4:	1080020b 	ldhu	r2,8(r2)
   15ff8:	e0bffc0d 	sth	r2,-16(fp)
    if (cnt > 0) {                                    /* See if resource is available                  */
   15ffc:	e0bffc0b 	ldhu	r2,-16(fp)
   16000:	10000626 	beq	r2,zero,1601c <OSSemAccept+0x8c>
        pevent->OSEventCnt--;                         /* Yes, decrement semaphore and notify caller    */
   16004:	e0bfff17 	ldw	r2,-4(fp)
   16008:	1080020b 	ldhu	r2,8(r2)
   1600c:	10bfffc4 	addi	r2,r2,-1
   16010:	1007883a 	mov	r3,r2
   16014:	e0bfff17 	ldw	r2,-4(fp)
   16018:	10c0020d 	sth	r3,8(r2)
   1601c:	e0bffb17 	ldw	r2,-20(fp)
   16020:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   16024:	e0bffe17 	ldw	r2,-8(fp)
   16028:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (cnt);                                     /* Return semaphore count                        */
   1602c:	e0bffc0b 	ldhu	r2,-16(fp)
}
   16030:	e037883a 	mov	sp,fp
   16034:	df000017 	ldw	fp,0(sp)
   16038:	dec00104 	addi	sp,sp,4
   1603c:	f800283a 	ret

00016040 <OSSemCreate>:
*              == (void *)0  if no event control blocks were available
*********************************************************************************************************
*/

OS_EVENT  *OSSemCreate (INT16U cnt)
{
   16040:	defff904 	addi	sp,sp,-28
   16044:	dfc00615 	stw	ra,24(sp)
   16048:	df000515 	stw	fp,20(sp)
   1604c:	df000504 	addi	fp,sp,20
   16050:	2005883a 	mov	r2,r4
   16054:	e0bfff0d 	sth	r2,-4(fp)
    OS_EVENT  *pevent;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
   16058:	e03ffb15 	stw	zero,-20(fp)
#endif



    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
   1605c:	008000b4 	movhi	r2,2
   16060:	10836404 	addi	r2,r2,3472
   16064:	10800003 	ldbu	r2,0(r2)
   16068:	10803fcc 	andi	r2,r2,255
   1606c:	10000226 	beq	r2,zero,16078 <OSSemCreate+0x38>
        return ((OS_EVENT *)0);                            /* ... can't CREATE from an ISR             */
   16070:	0005883a 	mov	r2,zero
   16074:	00002d06 	br	1612c <OSSemCreate+0xec>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   16078:	0005303a 	rdctl	r2,status
   1607c:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   16080:	e0fffd17 	ldw	r3,-12(fp)
   16084:	00bfff84 	movi	r2,-2
   16088:	1884703a 	and	r2,r3,r2
   1608c:	1001703a 	wrctl	status,r2
  
  return context;
   16090:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
   16094:	e0bffb15 	stw	r2,-20(fp)
    pevent = OSEventFreeList;                              /* Get next free event control block        */
   16098:	008000b4 	movhi	r2,2
   1609c:	10836304 	addi	r2,r2,3468
   160a0:	10800017 	ldw	r2,0(r2)
   160a4:	e0bffc15 	stw	r2,-16(fp)
    if (OSEventFreeList != (OS_EVENT *)0) {                /* See if pool of free ECB pool was empty   */
   160a8:	008000b4 	movhi	r2,2
   160ac:	10836304 	addi	r2,r2,3468
   160b0:	10800017 	ldw	r2,0(r2)
   160b4:	10000726 	beq	r2,zero,160d4 <OSSemCreate+0x94>
        OSEventFreeList = (OS_EVENT *)OSEventFreeList->OSEventPtr;
   160b8:	008000b4 	movhi	r2,2
   160bc:	10836304 	addi	r2,r2,3468
   160c0:	10800017 	ldw	r2,0(r2)
   160c4:	10c00117 	ldw	r3,4(r2)
   160c8:	008000b4 	movhi	r2,2
   160cc:	10836304 	addi	r2,r2,3468
   160d0:	10c00015 	stw	r3,0(r2)
   160d4:	e0bffb17 	ldw	r2,-20(fp)
   160d8:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   160dc:	e0bffe17 	ldw	r2,-8(fp)
   160e0:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    if (pevent != (OS_EVENT *)0) {                         /* Get an event control block               */
   160e4:	e0bffc17 	ldw	r2,-16(fp)
   160e8:	10000f26 	beq	r2,zero,16128 <OSSemCreate+0xe8>
        pevent->OSEventType    = OS_EVENT_TYPE_SEM;
   160ec:	e0bffc17 	ldw	r2,-16(fp)
   160f0:	00c000c4 	movi	r3,3
   160f4:	10c00005 	stb	r3,0(r2)
        pevent->OSEventCnt     = cnt;                      /* Set semaphore value                      */
   160f8:	e0bffc17 	ldw	r2,-16(fp)
   160fc:	e0ffff0b 	ldhu	r3,-4(fp)
   16100:	10c0020d 	sth	r3,8(r2)
        pevent->OSEventPtr     = (void *)0;                /* Unlink from ECB free list                */
   16104:	e0bffc17 	ldw	r2,-16(fp)
   16108:	10000115 	stw	zero,4(r2)
#if OS_EVENT_NAME_SIZE > 1
        pevent->OSEventName[0] = '?';                      /* Unknown name                             */
   1610c:	e0bffc17 	ldw	r2,-16(fp)
   16110:	00c00fc4 	movi	r3,63
   16114:	10c00385 	stb	r3,14(r2)
        pevent->OSEventName[1] = OS_ASCII_NUL;
   16118:	e0bffc17 	ldw	r2,-16(fp)
   1611c:	100003c5 	stb	zero,15(r2)
#endif
        OS_EventWaitListInit(pevent);                      /* Initialize to 'nobody waiting' on sem.   */
   16120:	e13ffc17 	ldw	r4,-16(fp)
   16124:	001157c0 	call	1157c <OS_EventWaitListInit>
    }
    return (pevent);
   16128:	e0bffc17 	ldw	r2,-16(fp)
}
   1612c:	e037883a 	mov	sp,fp
   16130:	dfc00117 	ldw	ra,4(sp)
   16134:	df000017 	ldw	fp,0(sp)
   16138:	dec00204 	addi	sp,sp,8
   1613c:	f800283a 	ret

00016140 <OSSemDel>:
*********************************************************************************************************
*/

#if OS_SEM_DEL_EN > 0
OS_EVENT  *OSSemDel (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
   16140:	defff304 	addi	sp,sp,-52
   16144:	dfc00c15 	stw	ra,48(sp)
   16148:	df000b15 	stw	fp,44(sp)
   1614c:	df000b04 	addi	fp,sp,44
   16150:	e13ffd15 	stw	r4,-12(fp)
   16154:	2805883a 	mov	r2,r5
   16158:	e1bfff15 	stw	r6,-4(fp)
   1615c:	e0bffe05 	stb	r2,-8(fp)
    BOOLEAN    tasks_waiting;
    OS_EVENT  *pevent_return;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
   16160:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
   16164:	e0bfff17 	ldw	r2,-4(fp)
   16168:	1000021e 	bne	r2,zero,16174 <OSSemDel+0x34>
        return (pevent);
   1616c:	e0bffd17 	ldw	r2,-12(fp)
   16170:	00008806 	br	16394 <OSSemDel+0x254>
    }
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
   16174:	e0bffd17 	ldw	r2,-12(fp)
   16178:	1000051e 	bne	r2,zero,16190 <OSSemDel+0x50>
        *perr = OS_ERR_PEVENT_NULL;
   1617c:	e0bfff17 	ldw	r2,-4(fp)
   16180:	00c00104 	movi	r3,4
   16184:	10c00005 	stb	r3,0(r2)
        return (pevent);
   16188:	e0bffd17 	ldw	r2,-12(fp)
   1618c:	00008106 	br	16394 <OSSemDel+0x254>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {        /* Validate event block type                */
   16190:	e0bffd17 	ldw	r2,-12(fp)
   16194:	10800003 	ldbu	r2,0(r2)
   16198:	10803fcc 	andi	r2,r2,255
   1619c:	108000e0 	cmpeqi	r2,r2,3
   161a0:	1000051e 	bne	r2,zero,161b8 <OSSemDel+0x78>
        *perr = OS_ERR_EVENT_TYPE;
   161a4:	e0bfff17 	ldw	r2,-4(fp)
   161a8:	00c00044 	movi	r3,1
   161ac:	10c00005 	stb	r3,0(r2)
        return (pevent);
   161b0:	e0bffd17 	ldw	r2,-12(fp)
   161b4:	00007706 	br	16394 <OSSemDel+0x254>
    }
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
   161b8:	008000b4 	movhi	r2,2
   161bc:	10836404 	addi	r2,r2,3472
   161c0:	10800003 	ldbu	r2,0(r2)
   161c4:	10803fcc 	andi	r2,r2,255
   161c8:	10000526 	beq	r2,zero,161e0 <OSSemDel+0xa0>
        *perr = OS_ERR_DEL_ISR;                             /* ... can't DELETE from an ISR             */
   161cc:	e0bfff17 	ldw	r2,-4(fp)
   161d0:	00c003c4 	movi	r3,15
   161d4:	10c00005 	stb	r3,0(r2)
        return (pevent);
   161d8:	e0bffd17 	ldw	r2,-12(fp)
   161dc:	00006d06 	br	16394 <OSSemDel+0x254>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   161e0:	0005303a 	rdctl	r2,status
   161e4:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   161e8:	e0fff817 	ldw	r3,-32(fp)
   161ec:	00bfff84 	movi	r2,-2
   161f0:	1884703a 	and	r2,r3,r2
   161f4:	1001703a 	wrctl	status,r2
  
  return context;
   161f8:	e0bff817 	ldw	r2,-32(fp)
    }
    OS_ENTER_CRITICAL();
   161fc:	e0bff715 	stw	r2,-36(fp)
    if (pevent->OSEventGrp != 0) {                         /* See if any tasks waiting on semaphore    */
   16200:	e0bffd17 	ldw	r2,-12(fp)
   16204:	10800283 	ldbu	r2,10(r2)
   16208:	10803fcc 	andi	r2,r2,255
   1620c:	10000326 	beq	r2,zero,1621c <OSSemDel+0xdc>
        tasks_waiting = OS_TRUE;                           /* Yes                                      */
   16210:	00800044 	movi	r2,1
   16214:	e0bff505 	stb	r2,-44(fp)
   16218:	00000106 	br	16220 <OSSemDel+0xe0>
    } else {
        tasks_waiting = OS_FALSE;                          /* No                                       */
   1621c:	e03ff505 	stb	zero,-44(fp)
    }
    switch (opt) {
   16220:	e0bffe03 	ldbu	r2,-8(fp)
   16224:	10000326 	beq	r2,zero,16234 <OSSemDel+0xf4>
   16228:	10800060 	cmpeqi	r2,r2,1
   1622c:	10002c1e 	bne	r2,zero,162e0 <OSSemDel+0x1a0>
   16230:	00004d06 	br	16368 <OSSemDel+0x228>
        case OS_DEL_NO_PEND:                               /* Delete semaphore only if no task waiting */
             if (tasks_waiting == OS_FALSE) {
   16234:	e0bff503 	ldbu	r2,-44(fp)
   16238:	10001a1e 	bne	r2,zero,162a4 <OSSemDel+0x164>
#if OS_EVENT_NAME_SIZE > 1
                 pevent->OSEventName[0] = '?';             /* Unknown name                             */
   1623c:	e0bffd17 	ldw	r2,-12(fp)
   16240:	00c00fc4 	movi	r3,63
   16244:	10c00385 	stb	r3,14(r2)
                 pevent->OSEventName[1] = OS_ASCII_NUL;
   16248:	e0bffd17 	ldw	r2,-12(fp)
   1624c:	100003c5 	stb	zero,15(r2)
#endif
                 pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
   16250:	e0bffd17 	ldw	r2,-12(fp)
   16254:	10000005 	stb	zero,0(r2)
                 pevent->OSEventPtr     = OSEventFreeList; /* Return Event Control Block to free list  */
   16258:	008000b4 	movhi	r2,2
   1625c:	10836304 	addi	r2,r2,3468
   16260:	10c00017 	ldw	r3,0(r2)
   16264:	e0bffd17 	ldw	r2,-12(fp)
   16268:	10c00115 	stw	r3,4(r2)
                 pevent->OSEventCnt     = 0;
   1626c:	e0bffd17 	ldw	r2,-12(fp)
   16270:	1000020d 	sth	zero,8(r2)
                 OSEventFreeList        = pevent;          /* Get next free event control block        */
   16274:	008000b4 	movhi	r2,2
   16278:	10836304 	addi	r2,r2,3468
   1627c:	e0fffd17 	ldw	r3,-12(fp)
   16280:	10c00015 	stw	r3,0(r2)
   16284:	e0bff717 	ldw	r2,-36(fp)
   16288:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1628c:	e0bff917 	ldw	r2,-28(fp)
   16290:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_NONE;
   16294:	e0bfff17 	ldw	r2,-4(fp)
   16298:	10000005 	stb	zero,0(r2)
                 pevent_return          = (OS_EVENT *)0;   /* Semaphore has been deleted               */
   1629c:	e03ff615 	stw	zero,-40(fp)
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_TASK_WAITING;
                 pevent_return          = pevent;
             }
             break;
   162a0:	00003b06 	br	16390 <OSSemDel+0x250>
   162a4:	e0bff717 	ldw	r2,-36(fp)
   162a8:	e0bffa15 	stw	r2,-24(fp)
   162ac:	e0bffa17 	ldw	r2,-24(fp)
   162b0:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_NONE;
                 pevent_return          = (OS_EVENT *)0;   /* Semaphore has been deleted               */
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_TASK_WAITING;
   162b4:	e0bfff17 	ldw	r2,-4(fp)
   162b8:	00c01244 	movi	r3,73
   162bc:	10c00005 	stb	r3,0(r2)
                 pevent_return          = pevent;
   162c0:	e0bffd17 	ldw	r2,-12(fp)
   162c4:	e0bff615 	stw	r2,-40(fp)
             }
             break;
   162c8:	00003106 	br	16390 <OSSemDel+0x250>

        case OS_DEL_ALWAYS:                                /* Always delete the semaphore              */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for semaphore    */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_OK);
   162cc:	e13ffd17 	ldw	r4,-12(fp)
   162d0:	000b883a 	mov	r5,zero
   162d4:	01800044 	movi	r6,1
   162d8:	000f883a 	mov	r7,zero
   162dc:	0010fdc0 	call	10fdc <OS_EventTaskRdy>
                 pevent_return          = pevent;
             }
             break;

        case OS_DEL_ALWAYS:                                /* Always delete the semaphore              */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for semaphore    */
   162e0:	e0bffd17 	ldw	r2,-12(fp)
   162e4:	10800283 	ldbu	r2,10(r2)
   162e8:	10803fcc 	andi	r2,r2,255
   162ec:	103ff71e 	bne	r2,zero,162cc <__alt_mem_Flash_flash_data+0xf40162cc>
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_OK);
             }
#if OS_EVENT_NAME_SIZE > 1
             pevent->OSEventName[0] = '?';                 /* Unknown name                             */
   162f0:	e0bffd17 	ldw	r2,-12(fp)
   162f4:	00c00fc4 	movi	r3,63
   162f8:	10c00385 	stb	r3,14(r2)
             pevent->OSEventName[1] = OS_ASCII_NUL;
   162fc:	e0bffd17 	ldw	r2,-12(fp)
   16300:	100003c5 	stb	zero,15(r2)
#endif
             pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
   16304:	e0bffd17 	ldw	r2,-12(fp)
   16308:	10000005 	stb	zero,0(r2)
             pevent->OSEventPtr     = OSEventFreeList;     /* Return Event Control Block to free list  */
   1630c:	008000b4 	movhi	r2,2
   16310:	10836304 	addi	r2,r2,3468
   16314:	10c00017 	ldw	r3,0(r2)
   16318:	e0bffd17 	ldw	r2,-12(fp)
   1631c:	10c00115 	stw	r3,4(r2)
             pevent->OSEventCnt     = 0;
   16320:	e0bffd17 	ldw	r2,-12(fp)
   16324:	1000020d 	sth	zero,8(r2)
             OSEventFreeList        = pevent;              /* Get next free event control block        */
   16328:	008000b4 	movhi	r2,2
   1632c:	10836304 	addi	r2,r2,3468
   16330:	e0fffd17 	ldw	r3,-12(fp)
   16334:	10c00015 	stw	r3,0(r2)
   16338:	e0bff717 	ldw	r2,-36(fp)
   1633c:	e0bffb15 	stw	r2,-20(fp)
   16340:	e0bffb17 	ldw	r2,-20(fp)
   16344:	1001703a 	wrctl	status,r2
             OS_EXIT_CRITICAL();
             if (tasks_waiting == OS_TRUE) {               /* Reschedule only if task(s) were waiting  */
   16348:	e0bff503 	ldbu	r2,-44(fp)
   1634c:	10800058 	cmpnei	r2,r2,1
   16350:	1000011e 	bne	r2,zero,16358 <OSSemDel+0x218>
                 OS_Sched();                               /* Find highest priority task ready to run  */
   16354:	00119f40 	call	119f4 <OS_Sched>
             }
             *perr                  = OS_ERR_NONE;
   16358:	e0bfff17 	ldw	r2,-4(fp)
   1635c:	10000005 	stb	zero,0(r2)
             pevent_return          = (OS_EVENT *)0;       /* Semaphore has been deleted               */
   16360:	e03ff615 	stw	zero,-40(fp)
             break;
   16364:	00000a06 	br	16390 <OSSemDel+0x250>
   16368:	e0bff717 	ldw	r2,-36(fp)
   1636c:	e0bffc15 	stw	r2,-16(fp)
   16370:	e0bffc17 	ldw	r2,-16(fp)
   16374:	1001703a 	wrctl	status,r2

        default:
             OS_EXIT_CRITICAL();
             *perr                  = OS_ERR_INVALID_OPT;
   16378:	e0bfff17 	ldw	r2,-4(fp)
   1637c:	00c001c4 	movi	r3,7
   16380:	10c00005 	stb	r3,0(r2)
             pevent_return          = pevent;
   16384:	e0bffd17 	ldw	r2,-12(fp)
   16388:	e0bff615 	stw	r2,-40(fp)
             break;
   1638c:	0001883a 	nop
    }
    return (pevent_return);
   16390:	e0bff617 	ldw	r2,-40(fp)
}
   16394:	e037883a 	mov	sp,fp
   16398:	dfc00117 	ldw	ra,4(sp)
   1639c:	df000017 	ldw	fp,0(sp)
   163a0:	dec00204 	addi	sp,sp,8
   163a4:	f800283a 	ret

000163a8 <OSSemPend>:
* Returns    : none
*********************************************************************************************************
*/
/*$PAGE*/
void  OSSemPend (OS_EVENT *pevent, INT16U timeout, INT8U *perr)
{
   163a8:	defff504 	addi	sp,sp,-44
   163ac:	dfc00a15 	stw	ra,40(sp)
   163b0:	df000915 	stw	fp,36(sp)
   163b4:	df000904 	addi	fp,sp,36
   163b8:	e13ffd15 	stw	r4,-12(fp)
   163bc:	2805883a 	mov	r2,r5
   163c0:	e1bfff15 	stw	r6,-4(fp)
   163c4:	e0bffe0d 	sth	r2,-8(fp)
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   163c8:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
   163cc:	e0bfff17 	ldw	r2,-4(fp)
   163d0:	1000011e 	bne	r2,zero,163d8 <OSSemPend+0x30>
        return;
   163d4:	00008906 	br	165fc <OSSemPend+0x254>
    }
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
   163d8:	e0bffd17 	ldw	r2,-12(fp)
   163dc:	1000041e 	bne	r2,zero,163f0 <OSSemPend+0x48>
        *perr = OS_ERR_PEVENT_NULL;
   163e0:	e0bfff17 	ldw	r2,-4(fp)
   163e4:	00c00104 	movi	r3,4
   163e8:	10c00005 	stb	r3,0(r2)
        return;
   163ec:	00008306 	br	165fc <OSSemPend+0x254>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
   163f0:	e0bffd17 	ldw	r2,-12(fp)
   163f4:	10800003 	ldbu	r2,0(r2)
   163f8:	10803fcc 	andi	r2,r2,255
   163fc:	108000e0 	cmpeqi	r2,r2,3
   16400:	1000041e 	bne	r2,zero,16414 <OSSemPend+0x6c>
        *perr = OS_ERR_EVENT_TYPE;
   16404:	e0bfff17 	ldw	r2,-4(fp)
   16408:	00c00044 	movi	r3,1
   1640c:	10c00005 	stb	r3,0(r2)
        return;
   16410:	00007a06 	br	165fc <OSSemPend+0x254>
    }
    if (OSIntNesting > 0) {                           /* See if called from ISR ...                    */
   16414:	008000b4 	movhi	r2,2
   16418:	10836404 	addi	r2,r2,3472
   1641c:	10800003 	ldbu	r2,0(r2)
   16420:	10803fcc 	andi	r2,r2,255
   16424:	10000426 	beq	r2,zero,16438 <OSSemPend+0x90>
        *perr = OS_ERR_PEND_ISR;                      /* ... can't PEND from an ISR                    */
   16428:	e0bfff17 	ldw	r2,-4(fp)
   1642c:	00c00084 	movi	r3,2
   16430:	10c00005 	stb	r3,0(r2)
        return;
   16434:	00007106 	br	165fc <OSSemPend+0x254>
    }
    if (OSLockNesting > 0) {                          /* See if called with scheduler locked ...       */
   16438:	008000b4 	movhi	r2,2
   1643c:	10835604 	addi	r2,r2,3416
   16440:	10800003 	ldbu	r2,0(r2)
   16444:	10803fcc 	andi	r2,r2,255
   16448:	10000426 	beq	r2,zero,1645c <OSSemPend+0xb4>
        *perr = OS_ERR_PEND_LOCKED;                   /* ... can't PEND when locked                    */
   1644c:	e0bfff17 	ldw	r2,-4(fp)
   16450:	00c00344 	movi	r3,13
   16454:	10c00005 	stb	r3,0(r2)
        return;
   16458:	00006806 	br	165fc <OSSemPend+0x254>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1645c:	0005303a 	rdctl	r2,status
   16460:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   16464:	e0fff817 	ldw	r3,-32(fp)
   16468:	00bfff84 	movi	r2,-2
   1646c:	1884703a 	and	r2,r3,r2
   16470:	1001703a 	wrctl	status,r2
  
  return context;
   16474:	e0bff817 	ldw	r2,-32(fp)
    }
    OS_ENTER_CRITICAL();
   16478:	e0bff715 	stw	r2,-36(fp)
    if (pevent->OSEventCnt > 0) {                     /* If sem. is positive, resource available ...   */
   1647c:	e0bffd17 	ldw	r2,-12(fp)
   16480:	1080020b 	ldhu	r2,8(r2)
   16484:	10bfffcc 	andi	r2,r2,65535
   16488:	10000d26 	beq	r2,zero,164c0 <OSSemPend+0x118>
        pevent->OSEventCnt--;                         /* ... decrement semaphore only if positive.     */
   1648c:	e0bffd17 	ldw	r2,-12(fp)
   16490:	1080020b 	ldhu	r2,8(r2)
   16494:	10bfffc4 	addi	r2,r2,-1
   16498:	1007883a 	mov	r3,r2
   1649c:	e0bffd17 	ldw	r2,-12(fp)
   164a0:	10c0020d 	sth	r3,8(r2)
   164a4:	e0bff717 	ldw	r2,-36(fp)
   164a8:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   164ac:	e0bff917 	ldw	r2,-28(fp)
   164b0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_NONE;
   164b4:	e0bfff17 	ldw	r2,-4(fp)
   164b8:	10000005 	stb	zero,0(r2)
        return;
   164bc:	00004f06 	br	165fc <OSSemPend+0x254>
    }
                                                      /* Otherwise, must wait until event occurs       */
    OSTCBCur->OSTCBStat     |= OS_STAT_SEM;           /* Resource not available, pend on semaphore     */
   164c0:	008000b4 	movhi	r2,2
   164c4:	10836504 	addi	r2,r2,3476
   164c8:	10c00017 	ldw	r3,0(r2)
   164cc:	008000b4 	movhi	r2,2
   164d0:	10836504 	addi	r2,r2,3476
   164d4:	10800017 	ldw	r2,0(r2)
   164d8:	10800c03 	ldbu	r2,48(r2)
   164dc:	10800054 	ori	r2,r2,1
   164e0:	18800c05 	stb	r2,48(r3)
    OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
   164e4:	008000b4 	movhi	r2,2
   164e8:	10836504 	addi	r2,r2,3476
   164ec:	10800017 	ldw	r2,0(r2)
   164f0:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBDly       = timeout;               /* Store pend timeout in TCB                     */
   164f4:	008000b4 	movhi	r2,2
   164f8:	10836504 	addi	r2,r2,3476
   164fc:	10800017 	ldw	r2,0(r2)
   16500:	e0fffe0b 	ldhu	r3,-8(fp)
   16504:	10c00b8d 	sth	r3,46(r2)
    OS_EventTaskWait(pevent);                         /* Suspend task until event or timeout occurs    */
   16508:	e13ffd17 	ldw	r4,-12(fp)
   1650c:	00111740 	call	11174 <OS_EventTaskWait>
   16510:	e0bff717 	ldw	r2,-36(fp)
   16514:	e0bffa15 	stw	r2,-24(fp)
   16518:	e0bffa17 	ldw	r2,-24(fp)
   1651c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    OS_Sched();                                       /* Find next highest priority task ready         */
   16520:	00119f40 	call	119f4 <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   16524:	0005303a 	rdctl	r2,status
   16528:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1652c:	e0fffb17 	ldw	r3,-20(fp)
   16530:	00bfff84 	movi	r2,-2
   16534:	1884703a 	and	r2,r3,r2
   16538:	1001703a 	wrctl	status,r2
  
  return context;
   1653c:	e0bffb17 	ldw	r2,-20(fp)
    OS_ENTER_CRITICAL();
   16540:	e0bff715 	stw	r2,-36(fp)
    switch (OSTCBCur->OSTCBStatPend) {                /* See if we timed-out or aborted                */
   16544:	008000b4 	movhi	r2,2
   16548:	10836504 	addi	r2,r2,3476
   1654c:	10800017 	ldw	r2,0(r2)
   16550:	10800c43 	ldbu	r2,49(r2)
   16554:	10803fcc 	andi	r2,r2,255
   16558:	10000326 	beq	r2,zero,16568 <OSSemPend+0x1c0>
   1655c:	108000a0 	cmpeqi	r2,r2,2
   16560:	1000041e 	bne	r2,zero,16574 <OSSemPend+0x1cc>
   16564:	00000706 	br	16584 <OSSemPend+0x1dc>
        case OS_STAT_PEND_OK:
             *perr = OS_ERR_NONE;
   16568:	e0bfff17 	ldw	r2,-4(fp)
   1656c:	10000005 	stb	zero,0(r2)
             break;
   16570:	00000e06 	br	165ac <OSSemPend+0x204>

        case OS_STAT_PEND_ABORT:
             *perr = OS_ERR_PEND_ABORT;               /* Indicate that we aborted                      */
   16574:	e0bfff17 	ldw	r2,-4(fp)
   16578:	00c00384 	movi	r3,14
   1657c:	10c00005 	stb	r3,0(r2)
             break;
   16580:	00000a06 	br	165ac <OSSemPend+0x204>

        case OS_STAT_PEND_TO:
        default:        
             OS_EventTaskRemove(OSTCBCur, pevent);
   16584:	008000b4 	movhi	r2,2
   16588:	10836504 	addi	r2,r2,3476
   1658c:	10800017 	ldw	r2,0(r2)
   16590:	1009883a 	mov	r4,r2
   16594:	e17ffd17 	ldw	r5,-12(fp)
   16598:	00113cc0 	call	113cc <OS_EventTaskRemove>
             *perr = OS_ERR_TIMEOUT;                  /* Indicate that we didn't get event within TO   */
   1659c:	e0bfff17 	ldw	r2,-4(fp)
   165a0:	00c00284 	movi	r3,10
   165a4:	10c00005 	stb	r3,0(r2)
             break;
   165a8:	0001883a 	nop
    }
    OSTCBCur->OSTCBStat          =  OS_STAT_RDY;      /* Set   task  status to ready                   */
   165ac:	008000b4 	movhi	r2,2
   165b0:	10836504 	addi	r2,r2,3476
   165b4:	10800017 	ldw	r2,0(r2)
   165b8:	10000c05 	stb	zero,48(r2)
    OSTCBCur->OSTCBStatPend      =  OS_STAT_PEND_OK;  /* Clear pend  status                            */
   165bc:	008000b4 	movhi	r2,2
   165c0:	10836504 	addi	r2,r2,3476
   165c4:	10800017 	ldw	r2,0(r2)
   165c8:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;    /* Clear event pointers                          */
   165cc:	008000b4 	movhi	r2,2
   165d0:	10836504 	addi	r2,r2,3476
   165d4:	10800017 	ldw	r2,0(r2)
   165d8:	10000715 	stw	zero,28(r2)
#if (OS_EVENT_MULTI_EN > 0)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
   165dc:	008000b4 	movhi	r2,2
   165e0:	10836504 	addi	r2,r2,3476
   165e4:	10800017 	ldw	r2,0(r2)
   165e8:	10000815 	stw	zero,32(r2)
   165ec:	e0bff717 	ldw	r2,-36(fp)
   165f0:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   165f4:	e0bffc17 	ldw	r2,-16(fp)
   165f8:	1001703a 	wrctl	status,r2
#endif
    OS_EXIT_CRITICAL();
}
   165fc:	e037883a 	mov	sp,fp
   16600:	dfc00117 	ldw	ra,4(sp)
   16604:	df000017 	ldw	fp,0(sp)
   16608:	dec00204 	addi	sp,sp,8
   1660c:	f800283a 	ret

00016610 <OSSemPendAbort>:
*********************************************************************************************************
*/

#if OS_SEM_PEND_ABORT_EN > 0
INT8U  OSSemPendAbort (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
   16610:	defff604 	addi	sp,sp,-40
   16614:	dfc00915 	stw	ra,36(sp)
   16618:	df000815 	stw	fp,32(sp)
   1661c:	df000804 	addi	fp,sp,32
   16620:	e13ffd15 	stw	r4,-12(fp)
   16624:	2805883a 	mov	r2,r5
   16628:	e1bfff15 	stw	r6,-4(fp)
   1662c:	e0bffe05 	stb	r2,-8(fp)
    INT8U      nbr_tasks;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   16630:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
   16634:	e0bfff17 	ldw	r2,-4(fp)
   16638:	1000021e 	bne	r2,zero,16644 <OSSemPendAbort+0x34>
        return (0);
   1663c:	0005883a 	mov	r2,zero
   16640:	00004906 	br	16768 <OSSemPendAbort+0x158>
    }
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
   16644:	e0bffd17 	ldw	r2,-12(fp)
   16648:	1000051e 	bne	r2,zero,16660 <OSSemPendAbort+0x50>
        *perr = OS_ERR_PEVENT_NULL;
   1664c:	e0bfff17 	ldw	r2,-4(fp)
   16650:	00c00104 	movi	r3,4
   16654:	10c00005 	stb	r3,0(r2)
        return (0);
   16658:	0005883a 	mov	r2,zero
   1665c:	00004206 	br	16768 <OSSemPendAbort+0x158>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
   16660:	e0bffd17 	ldw	r2,-12(fp)
   16664:	10800003 	ldbu	r2,0(r2)
   16668:	10803fcc 	andi	r2,r2,255
   1666c:	108000e0 	cmpeqi	r2,r2,3
   16670:	1000051e 	bne	r2,zero,16688 <OSSemPendAbort+0x78>
        *perr = OS_ERR_EVENT_TYPE;
   16674:	e0bfff17 	ldw	r2,-4(fp)
   16678:	00c00044 	movi	r3,1
   1667c:	10c00005 	stb	r3,0(r2)
        return (0);
   16680:	0005883a 	mov	r2,zero
   16684:	00003806 	br	16768 <OSSemPendAbort+0x158>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   16688:	0005303a 	rdctl	r2,status
   1668c:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   16690:	e0fffa17 	ldw	r3,-24(fp)
   16694:	00bfff84 	movi	r2,-2
   16698:	1884703a 	and	r2,r3,r2
   1669c:	1001703a 	wrctl	status,r2
  
  return context;
   166a0:	e0bffa17 	ldw	r2,-24(fp)
    }
    OS_ENTER_CRITICAL();
   166a4:	e0bff915 	stw	r2,-28(fp)
    if (pevent->OSEventGrp != 0) {                    /* See if any task waiting on semaphore?         */
   166a8:	e0bffd17 	ldw	r2,-12(fp)
   166ac:	10800283 	ldbu	r2,10(r2)
   166b0:	10803fcc 	andi	r2,r2,255
   166b4:	10002526 	beq	r2,zero,1674c <OSSemPendAbort+0x13c>
        nbr_tasks = 0;
   166b8:	e03ff805 	stb	zero,-32(fp)
        switch (opt) {
   166bc:	e0bffe03 	ldbu	r2,-8(fp)
   166c0:	10800060 	cmpeqi	r2,r2,1
   166c4:	10000e26 	beq	r2,zero,16700 <OSSemPendAbort+0xf0>
            case OS_PEND_OPT_BROADCAST:               /* Do we need to abort ALL waiting tasks?        */
                 while (pevent->OSEventGrp != 0) {    /* Yes, ready ALL tasks waiting on semaphore     */
   166c8:	00000806 	br	166ec <OSSemPendAbort+0xdc>
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_ABORT);
   166cc:	e13ffd17 	ldw	r4,-12(fp)
   166d0:	000b883a 	mov	r5,zero
   166d4:	01800044 	movi	r6,1
   166d8:	01c00084 	movi	r7,2
   166dc:	0010fdc0 	call	10fdc <OS_EventTaskRdy>
                     nbr_tasks++;
   166e0:	e0bff803 	ldbu	r2,-32(fp)
   166e4:	10800044 	addi	r2,r2,1
   166e8:	e0bff805 	stb	r2,-32(fp)
    OS_ENTER_CRITICAL();
    if (pevent->OSEventGrp != 0) {                    /* See if any task waiting on semaphore?         */
        nbr_tasks = 0;
        switch (opt) {
            case OS_PEND_OPT_BROADCAST:               /* Do we need to abort ALL waiting tasks?        */
                 while (pevent->OSEventGrp != 0) {    /* Yes, ready ALL tasks waiting on semaphore     */
   166ec:	e0bffd17 	ldw	r2,-12(fp)
   166f0:	10800283 	ldbu	r2,10(r2)
   166f4:	10803fcc 	andi	r2,r2,255
   166f8:	103ff41e 	bne	r2,zero,166cc <__alt_mem_Flash_flash_data+0xf40166cc>
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_ABORT);
                     nbr_tasks++;
                 }
                 break;
   166fc:	00000906 	br	16724 <OSSemPendAbort+0x114>
                 
            case OS_PEND_OPT_NONE:
            default:                                  /* No,  ready HPT       waiting on semaphore     */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_ABORT);
   16700:	e13ffd17 	ldw	r4,-12(fp)
   16704:	000b883a 	mov	r5,zero
   16708:	01800044 	movi	r6,1
   1670c:	01c00084 	movi	r7,2
   16710:	0010fdc0 	call	10fdc <OS_EventTaskRdy>
                 nbr_tasks++;
   16714:	e0bff803 	ldbu	r2,-32(fp)
   16718:	10800044 	addi	r2,r2,1
   1671c:	e0bff805 	stb	r2,-32(fp)
                 break;
   16720:	0001883a 	nop
   16724:	e0bff917 	ldw	r2,-28(fp)
   16728:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1672c:	e0bffb17 	ldw	r2,-20(fp)
   16730:	1001703a 	wrctl	status,r2
        }
        OS_EXIT_CRITICAL();
        OS_Sched();                                   /* Find HPT ready to run                         */
   16734:	00119f40 	call	119f4 <OS_Sched>
        *perr = OS_ERR_PEND_ABORT;
   16738:	e0bfff17 	ldw	r2,-4(fp)
   1673c:	00c00384 	movi	r3,14
   16740:	10c00005 	stb	r3,0(r2)
        return (nbr_tasks);
   16744:	e0bff803 	ldbu	r2,-32(fp)
   16748:	00000706 	br	16768 <OSSemPendAbort+0x158>
   1674c:	e0bff917 	ldw	r2,-28(fp)
   16750:	e0bffc15 	stw	r2,-16(fp)
   16754:	e0bffc17 	ldw	r2,-16(fp)
   16758:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
   1675c:	e0bfff17 	ldw	r2,-4(fp)
   16760:	10000005 	stb	zero,0(r2)
    return (0);                                       /* No tasks waiting on semaphore                 */
   16764:	0005883a 	mov	r2,zero
}
   16768:	e037883a 	mov	sp,fp
   1676c:	dfc00117 	ldw	ra,4(sp)
   16770:	df000017 	ldw	fp,0(sp)
   16774:	dec00204 	addi	sp,sp,8
   16778:	f800283a 	ret

0001677c <OSSemPost>:
*              OS_ERR_PEVENT_NULL  If 'pevent' is a NULL pointer.
*********************************************************************************************************
*/

INT8U  OSSemPost (OS_EVENT *pevent)
{
   1677c:	defff804 	addi	sp,sp,-32
   16780:	dfc00715 	stw	ra,28(sp)
   16784:	df000615 	stw	fp,24(sp)
   16788:	df000604 	addi	fp,sp,24
   1678c:	e13fff15 	stw	r4,-4(fp)
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   16790:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
   16794:	e0bfff17 	ldw	r2,-4(fp)
   16798:	1000021e 	bne	r2,zero,167a4 <OSSemPost+0x28>
        return (OS_ERR_PEVENT_NULL);
   1679c:	00800104 	movi	r2,4
   167a0:	00003506 	br	16878 <OSSemPost+0xfc>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
   167a4:	e0bfff17 	ldw	r2,-4(fp)
   167a8:	10800003 	ldbu	r2,0(r2)
   167ac:	10803fcc 	andi	r2,r2,255
   167b0:	108000e0 	cmpeqi	r2,r2,3
   167b4:	1000021e 	bne	r2,zero,167c0 <OSSemPost+0x44>
        return (OS_ERR_EVENT_TYPE);
   167b8:	00800044 	movi	r2,1
   167bc:	00002e06 	br	16878 <OSSemPost+0xfc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   167c0:	0005303a 	rdctl	r2,status
   167c4:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   167c8:	e0fffb17 	ldw	r3,-20(fp)
   167cc:	00bfff84 	movi	r2,-2
   167d0:	1884703a 	and	r2,r3,r2
   167d4:	1001703a 	wrctl	status,r2
  
  return context;
   167d8:	e0bffb17 	ldw	r2,-20(fp)
    }
    OS_ENTER_CRITICAL();
   167dc:	e0bffa15 	stw	r2,-24(fp)
    if (pevent->OSEventGrp != 0) {                    /* See if any task waiting for semaphore         */
   167e0:	e0bfff17 	ldw	r2,-4(fp)
   167e4:	10800283 	ldbu	r2,10(r2)
   167e8:	10803fcc 	andi	r2,r2,255
   167ec:	10000c26 	beq	r2,zero,16820 <OSSemPost+0xa4>
                                                      /* Ready HPT waiting on event                    */
        (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_OK);
   167f0:	e13fff17 	ldw	r4,-4(fp)
   167f4:	000b883a 	mov	r5,zero
   167f8:	01800044 	movi	r6,1
   167fc:	000f883a 	mov	r7,zero
   16800:	0010fdc0 	call	10fdc <OS_EventTaskRdy>
   16804:	e0bffa17 	ldw	r2,-24(fp)
   16808:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1680c:	e0bffc17 	ldw	r2,-16(fp)
   16810:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                                   /* Find HPT ready to run                         */
   16814:	00119f40 	call	119f4 <OS_Sched>
        return (OS_ERR_NONE);
   16818:	0005883a 	mov	r2,zero
   1681c:	00001606 	br	16878 <OSSemPost+0xfc>
    }
    if (pevent->OSEventCnt < 65535u) {                /* Make sure semaphore will not overflow         */
   16820:	e0bfff17 	ldw	r2,-4(fp)
   16824:	1080020b 	ldhu	r2,8(r2)
   16828:	10ffffcc 	andi	r3,r2,65535
   1682c:	00bfffd4 	movui	r2,65535
   16830:	18800c26 	beq	r3,r2,16864 <OSSemPost+0xe8>
        pevent->OSEventCnt++;                         /* Increment semaphore count to register event   */
   16834:	e0bfff17 	ldw	r2,-4(fp)
   16838:	1080020b 	ldhu	r2,8(r2)
   1683c:	10800044 	addi	r2,r2,1
   16840:	1007883a 	mov	r3,r2
   16844:	e0bfff17 	ldw	r2,-4(fp)
   16848:	10c0020d 	sth	r3,8(r2)
   1684c:	e0bffa17 	ldw	r2,-24(fp)
   16850:	e0bffd15 	stw	r2,-12(fp)
   16854:	e0bffd17 	ldw	r2,-12(fp)
   16858:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_NONE);
   1685c:	0005883a 	mov	r2,zero
   16860:	00000506 	br	16878 <OSSemPost+0xfc>
   16864:	e0bffa17 	ldw	r2,-24(fp)
   16868:	e0bffe15 	stw	r2,-8(fp)
   1686c:	e0bffe17 	ldw	r2,-8(fp)
   16870:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();                               /* Semaphore value has reached its maximum       */
    return (OS_ERR_SEM_OVF);
   16874:	00800c84 	movi	r2,50
}
   16878:	e037883a 	mov	sp,fp
   1687c:	dfc00117 	ldw	ra,4(sp)
   16880:	df000017 	ldw	fp,0(sp)
   16884:	dec00204 	addi	sp,sp,8
   16888:	f800283a 	ret

0001688c <OSSemQuery>:
*********************************************************************************************************
*/

#if OS_SEM_QUERY_EN > 0
INT8U  OSSemQuery (OS_EVENT *pevent, OS_SEM_DATA *p_sem_data)
{
   1688c:	defff704 	addi	sp,sp,-36
   16890:	df000815 	stw	fp,32(sp)
   16894:	df000804 	addi	fp,sp,32
   16898:	e13ffe15 	stw	r4,-8(fp)
   1689c:	e17fff15 	stw	r5,-4(fp)
    INT16U    *psrc;
    INT16U    *pdest;
#endif
    INT8U      i;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
   168a0:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
   168a4:	e0bffe17 	ldw	r2,-8(fp)
   168a8:	1000021e 	bne	r2,zero,168b4 <OSSemQuery+0x28>
        return (OS_ERR_PEVENT_NULL);
   168ac:	00800104 	movi	r2,4
   168b0:	00003606 	br	1698c <OSSemQuery+0x100>
    }
    if (p_sem_data == (OS_SEM_DATA *)0) {                  /* Validate 'p_sem_data'                    */
   168b4:	e0bfff17 	ldw	r2,-4(fp)
   168b8:	1000021e 	bne	r2,zero,168c4 <OSSemQuery+0x38>
        return (OS_ERR_PDATA_NULL);
   168bc:	00800244 	movi	r2,9
   168c0:	00003206 	br	1698c <OSSemQuery+0x100>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {        /* Validate event block type                */
   168c4:	e0bffe17 	ldw	r2,-8(fp)
   168c8:	10800003 	ldbu	r2,0(r2)
   168cc:	10803fcc 	andi	r2,r2,255
   168d0:	108000e0 	cmpeqi	r2,r2,3
   168d4:	1000021e 	bne	r2,zero,168e0 <OSSemQuery+0x54>
        return (OS_ERR_EVENT_TYPE);
   168d8:	00800044 	movi	r2,1
   168dc:	00002b06 	br	1698c <OSSemQuery+0x100>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   168e0:	0005303a 	rdctl	r2,status
   168e4:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   168e8:	e0fffc17 	ldw	r3,-16(fp)
   168ec:	00bfff84 	movi	r2,-2
   168f0:	1884703a 	and	r2,r3,r2
   168f4:	1001703a 	wrctl	status,r2
  
  return context;
   168f8:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
   168fc:	e0bffb15 	stw	r2,-20(fp)
    p_sem_data->OSEventGrp = pevent->OSEventGrp;           /* Copy message mailbox wait list           */
   16900:	e0bffe17 	ldw	r2,-8(fp)
   16904:	10c00283 	ldbu	r3,10(r2)
   16908:	e0bfff17 	ldw	r2,-4(fp)
   1690c:	10c00145 	stb	r3,5(r2)
    psrc                   = &pevent->OSEventTbl[0];
   16910:	e0bffe17 	ldw	r2,-8(fp)
   16914:	108002c4 	addi	r2,r2,11
   16918:	e0bff815 	stw	r2,-32(fp)
    pdest                  = &p_sem_data->OSEventTbl[0];
   1691c:	e0bfff17 	ldw	r2,-4(fp)
   16920:	10800084 	addi	r2,r2,2
   16924:	e0bff915 	stw	r2,-28(fp)
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
   16928:	e03ffa05 	stb	zero,-24(fp)
   1692c:	00000b06 	br	1695c <OSSemQuery+0xd0>
        *pdest++ = *psrc++;
   16930:	e0bff917 	ldw	r2,-28(fp)
   16934:	10c00044 	addi	r3,r2,1
   16938:	e0fff915 	stw	r3,-28(fp)
   1693c:	e0fff817 	ldw	r3,-32(fp)
   16940:	19000044 	addi	r4,r3,1
   16944:	e13ff815 	stw	r4,-32(fp)
   16948:	18c00003 	ldbu	r3,0(r3)
   1694c:	10c00005 	stb	r3,0(r2)
    }
    OS_ENTER_CRITICAL();
    p_sem_data->OSEventGrp = pevent->OSEventGrp;           /* Copy message mailbox wait list           */
    psrc                   = &pevent->OSEventTbl[0];
    pdest                  = &p_sem_data->OSEventTbl[0];
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
   16950:	e0bffa03 	ldbu	r2,-24(fp)
   16954:	10800044 	addi	r2,r2,1
   16958:	e0bffa05 	stb	r2,-24(fp)
   1695c:	e0bffa03 	ldbu	r2,-24(fp)
   16960:	108000f0 	cmpltui	r2,r2,3
   16964:	103ff21e 	bne	r2,zero,16930 <__alt_mem_Flash_flash_data+0xf4016930>
        *pdest++ = *psrc++;
    }
    p_sem_data->OSCnt = pevent->OSEventCnt;                /* Get semaphore count                      */
   16968:	e0bffe17 	ldw	r2,-8(fp)
   1696c:	10c0020b 	ldhu	r3,8(r2)
   16970:	e0bfff17 	ldw	r2,-4(fp)
   16974:	10c0000d 	sth	r3,0(r2)
   16978:	e0bffb17 	ldw	r2,-20(fp)
   1697c:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   16980:	e0bffd17 	ldw	r2,-12(fp)
   16984:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
   16988:	0005883a 	mov	r2,zero
}
   1698c:	e037883a 	mov	sp,fp
   16990:	df000017 	ldw	fp,0(sp)
   16994:	dec00104 	addi	sp,sp,4
   16998:	f800283a 	ret

0001699c <OSSemSet>:
*********************************************************************************************************
*/

#if OS_SEM_SET_EN > 0
void  OSSemSet (OS_EVENT *pevent, INT16U cnt, INT8U *perr)
{
   1699c:	defff904 	addi	sp,sp,-28
   169a0:	df000615 	stw	fp,24(sp)
   169a4:	df000604 	addi	fp,sp,24
   169a8:	e13ffd15 	stw	r4,-12(fp)
   169ac:	2805883a 	mov	r2,r5
   169b0:	e1bfff15 	stw	r6,-4(fp)
   169b4:	e0bffe0d 	sth	r2,-8(fp)
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   169b8:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
   169bc:	e0bfff17 	ldw	r2,-4(fp)
   169c0:	1000011e 	bne	r2,zero,169c8 <OSSemSet+0x2c>
        return;
   169c4:	00003006 	br	16a88 <OSSemSet+0xec>
    }
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
   169c8:	e0bffd17 	ldw	r2,-12(fp)
   169cc:	1000041e 	bne	r2,zero,169e0 <OSSemSet+0x44>
        *perr = OS_ERR_PEVENT_NULL;
   169d0:	e0bfff17 	ldw	r2,-4(fp)
   169d4:	00c00104 	movi	r3,4
   169d8:	10c00005 	stb	r3,0(r2)
        return;
   169dc:	00002a06 	br	16a88 <OSSemSet+0xec>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
   169e0:	e0bffd17 	ldw	r2,-12(fp)
   169e4:	10800003 	ldbu	r2,0(r2)
   169e8:	10803fcc 	andi	r2,r2,255
   169ec:	108000e0 	cmpeqi	r2,r2,3
   169f0:	1000041e 	bne	r2,zero,16a04 <OSSemSet+0x68>
        *perr = OS_ERR_EVENT_TYPE;
   169f4:	e0bfff17 	ldw	r2,-4(fp)
   169f8:	00c00044 	movi	r3,1
   169fc:	10c00005 	stb	r3,0(r2)
        return;
   16a00:	00002106 	br	16a88 <OSSemSet+0xec>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   16a04:	0005303a 	rdctl	r2,status
   16a08:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   16a0c:	e0fffb17 	ldw	r3,-20(fp)
   16a10:	00bfff84 	movi	r2,-2
   16a14:	1884703a 	and	r2,r3,r2
   16a18:	1001703a 	wrctl	status,r2
  
  return context;
   16a1c:	e0bffb17 	ldw	r2,-20(fp)
    }
    OS_ENTER_CRITICAL();
   16a20:	e0bffa15 	stw	r2,-24(fp)
    *perr = OS_ERR_NONE;
   16a24:	e0bfff17 	ldw	r2,-4(fp)
   16a28:	10000005 	stb	zero,0(r2)
    if (pevent->OSEventCnt > 0) {                     /* See if semaphore already has a count          */
   16a2c:	e0bffd17 	ldw	r2,-12(fp)
   16a30:	1080020b 	ldhu	r2,8(r2)
   16a34:	10bfffcc 	andi	r2,r2,65535
   16a38:	10000426 	beq	r2,zero,16a4c <OSSemSet+0xb0>
        pevent->OSEventCnt = cnt;                     /* Yes, set it to the new value specified.       */
   16a3c:	e0bffd17 	ldw	r2,-12(fp)
   16a40:	e0fffe0b 	ldhu	r3,-8(fp)
   16a44:	10c0020d 	sth	r3,8(r2)
   16a48:	00000b06 	br	16a78 <OSSemSet+0xdc>
    } else {                                          /* No                                            */
        if (pevent->OSEventGrp == 0) {                /*      See if task(s) waiting?                  */
   16a4c:	e0bffd17 	ldw	r2,-12(fp)
   16a50:	10800283 	ldbu	r2,10(r2)
   16a54:	10803fcc 	andi	r2,r2,255
   16a58:	1000041e 	bne	r2,zero,16a6c <OSSemSet+0xd0>
            pevent->OSEventCnt = cnt;                 /*      No, OK to set the value                  */
   16a5c:	e0bffd17 	ldw	r2,-12(fp)
   16a60:	e0fffe0b 	ldhu	r3,-8(fp)
   16a64:	10c0020d 	sth	r3,8(r2)
   16a68:	00000306 	br	16a78 <OSSemSet+0xdc>
        } else {
            *perr              = OS_ERR_TASK_WAITING;
   16a6c:	e0bfff17 	ldw	r2,-4(fp)
   16a70:	00c01244 	movi	r3,73
   16a74:	10c00005 	stb	r3,0(r2)
   16a78:	e0bffa17 	ldw	r2,-24(fp)
   16a7c:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   16a80:	e0bffc17 	ldw	r2,-16(fp)
   16a84:	1001703a 	wrctl	status,r2
        }
    }
    OS_EXIT_CRITICAL();
}
   16a88:	e037883a 	mov	sp,fp
   16a8c:	df000017 	ldw	fp,0(sp)
   16a90:	dec00104 	addi	sp,sp,4
   16a94:	f800283a 	ret

00016a98 <OSTaskChangePrio>:
*********************************************************************************************************
*/

#if OS_TASK_CHANGE_PRIO_EN > 0
INT8U  OSTaskChangePrio (INT8U oldprio, INT8U newprio)
{
   16a98:	defff104 	addi	sp,sp,-60
   16a9c:	dfc00e15 	stw	ra,56(sp)
   16aa0:	df000d15 	stw	fp,52(sp)
   16aa4:	df000d04 	addi	fp,sp,52
   16aa8:	2007883a 	mov	r3,r4
   16aac:	2805883a 	mov	r2,r5
   16ab0:	e0fffe05 	stb	r3,-8(fp)
   16ab4:	e0bfff05 	stb	r2,-4(fp)
    INT16U     bitx_new;
    INT16U     bity_old;
    INT16U     bitx_old;
#endif
#if OS_CRITICAL_METHOD == 3
    OS_CPU_SR  cpu_sr = 0;                                  /* Storage for CPU status register         */
   16ab8:	e03ff515 	stw	zero,-44(fp)
#endif


/*$PAGE*/
#if OS_ARG_CHK_EN > 0
    if (oldprio >= OS_LOWEST_PRIO) {
   16abc:	e0bffe03 	ldbu	r2,-8(fp)
   16ac0:	10800530 	cmpltui	r2,r2,20
   16ac4:	1000051e 	bne	r2,zero,16adc <OSTaskChangePrio+0x44>
        if (oldprio != OS_PRIO_SELF) {
   16ac8:	e0bffe03 	ldbu	r2,-8(fp)
   16acc:	10803fe0 	cmpeqi	r2,r2,255
   16ad0:	1000021e 	bne	r2,zero,16adc <OSTaskChangePrio+0x44>
            return (OS_ERR_PRIO_INVALID);
   16ad4:	00800a84 	movi	r2,42
   16ad8:	00013a06 	br	16fc4 <OSTaskChangePrio+0x52c>
        }
    }
    if (newprio >= OS_LOWEST_PRIO) {
   16adc:	e0bfff03 	ldbu	r2,-4(fp)
   16ae0:	10800530 	cmpltui	r2,r2,20
   16ae4:	1000021e 	bne	r2,zero,16af0 <OSTaskChangePrio+0x58>
        return (OS_ERR_PRIO_INVALID);
   16ae8:	00800a84 	movi	r2,42
   16aec:	00013506 	br	16fc4 <OSTaskChangePrio+0x52c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   16af0:	0005303a 	rdctl	r2,status
   16af4:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   16af8:	e0fff917 	ldw	r3,-28(fp)
   16afc:	00bfff84 	movi	r2,-2
   16b00:	1884703a 	and	r2,r3,r2
   16b04:	1001703a 	wrctl	status,r2
  
  return context;
   16b08:	e0bff917 	ldw	r2,-28(fp)
    }
#endif
    OS_ENTER_CRITICAL();
   16b0c:	e0bff515 	stw	r2,-44(fp)
    if (OSTCBPrioTbl[newprio] != (OS_TCB *)0) {             /* New priority must not already exist     */
   16b10:	e0ffff03 	ldbu	r3,-4(fp)
   16b14:	008000f4 	movhi	r2,3
   16b18:	1081e004 	addi	r2,r2,1920
   16b1c:	18c7883a 	add	r3,r3,r3
   16b20:	18c7883a 	add	r3,r3,r3
   16b24:	10c5883a 	add	r2,r2,r3
   16b28:	10800017 	ldw	r2,0(r2)
   16b2c:	10000626 	beq	r2,zero,16b48 <OSTaskChangePrio+0xb0>
   16b30:	e0bff517 	ldw	r2,-44(fp)
   16b34:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   16b38:	e0bffa17 	ldw	r2,-24(fp)
   16b3c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_PRIO_EXIST);
   16b40:	00800a04 	movi	r2,40
   16b44:	00011f06 	br	16fc4 <OSTaskChangePrio+0x52c>
    }
    if (oldprio == OS_PRIO_SELF) {                          /* See if changing self                    */
   16b48:	e0bffe03 	ldbu	r2,-8(fp)
   16b4c:	10803fd8 	cmpnei	r2,r2,255
   16b50:	1000051e 	bne	r2,zero,16b68 <OSTaskChangePrio+0xd0>
        oldprio = OSTCBCur->OSTCBPrio;                      /* Yes, get priority                       */
   16b54:	008000b4 	movhi	r2,2
   16b58:	10836504 	addi	r2,r2,3476
   16b5c:	10800017 	ldw	r2,0(r2)
   16b60:	10800c83 	ldbu	r2,50(r2)
   16b64:	e0bffe05 	stb	r2,-8(fp)
    }
    ptcb = OSTCBPrioTbl[oldprio];
   16b68:	e0fffe03 	ldbu	r3,-8(fp)
   16b6c:	008000f4 	movhi	r2,3
   16b70:	1081e004 	addi	r2,r2,1920
   16b74:	18c7883a 	add	r3,r3,r3
   16b78:	18c7883a 	add	r3,r3,r3
   16b7c:	10c5883a 	add	r2,r2,r3
   16b80:	10800017 	ldw	r2,0(r2)
   16b84:	e0bff615 	stw	r2,-40(fp)
    if (ptcb == (OS_TCB *)0) {                              /* Does task to change exist?              */
   16b88:	e0bff617 	ldw	r2,-40(fp)
   16b8c:	1000061e 	bne	r2,zero,16ba8 <OSTaskChangePrio+0x110>
   16b90:	e0bff517 	ldw	r2,-44(fp)
   16b94:	e0bffb15 	stw	r2,-20(fp)
   16b98:	e0bffb17 	ldw	r2,-20(fp)
   16b9c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                                 /* No, can't change its priority!          */
        return (OS_ERR_PRIO);
   16ba0:	00800a44 	movi	r2,41
   16ba4:	00010706 	br	16fc4 <OSTaskChangePrio+0x52c>
    }
    if (ptcb == OS_TCB_RESERVED) {                          /* Is task assigned to Mutex               */
   16ba8:	e0bff617 	ldw	r2,-40(fp)
   16bac:	10800058 	cmpnei	r2,r2,1
   16bb0:	1000061e 	bne	r2,zero,16bcc <OSTaskChangePrio+0x134>
   16bb4:	e0bff517 	ldw	r2,-44(fp)
   16bb8:	e0bffc15 	stw	r2,-16(fp)
   16bbc:	e0bffc17 	ldw	r2,-16(fp)
   16bc0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                                 /* No, can't change its priority!          */
        return (OS_ERR_TASK_NOT_EXIST);
   16bc4:	008010c4 	movi	r2,67
   16bc8:	0000fe06 	br	16fc4 <OSTaskChangePrio+0x52c>
    }
#if OS_LOWEST_PRIO <= 63
    y_new                 = (INT8U)(newprio >> 3);          /* Yes, compute new TCB fields             */
   16bcc:	e0bfff03 	ldbu	r2,-4(fp)
   16bd0:	1004d0fa 	srli	r2,r2,3
   16bd4:	e0bff705 	stb	r2,-36(fp)
    x_new                 = (INT8U)(newprio & 0x07);
   16bd8:	e0bfff03 	ldbu	r2,-4(fp)
   16bdc:	108001cc 	andi	r2,r2,7
   16be0:	e0bff745 	stb	r2,-35(fp)
    bity_new              = (INT8U)(1 << y_new);
   16be4:	e0bff703 	ldbu	r2,-36(fp)
   16be8:	00c00044 	movi	r3,1
   16bec:	1884983a 	sll	r2,r3,r2
   16bf0:	e0bff785 	stb	r2,-34(fp)
    bitx_new              = (INT8U)(1 << x_new);
   16bf4:	e0bff743 	ldbu	r2,-35(fp)
   16bf8:	00c00044 	movi	r3,1
   16bfc:	1884983a 	sll	r2,r3,r2
   16c00:	e0bff7c5 	stb	r2,-33(fp)
    x_new                 = (INT8U)( newprio & 0x0F);
    bity_new              = (INT16U)(1 << y_new);
    bitx_new              = (INT16U)(1 << x_new);
#endif

    OSTCBPrioTbl[oldprio] = (OS_TCB *)0;                    /* Remove TCB from old priority            */
   16c04:	e0fffe03 	ldbu	r3,-8(fp)
   16c08:	008000f4 	movhi	r2,3
   16c0c:	1081e004 	addi	r2,r2,1920
   16c10:	18c7883a 	add	r3,r3,r3
   16c14:	18c7883a 	add	r3,r3,r3
   16c18:	10c5883a 	add	r2,r2,r3
   16c1c:	10000015 	stw	zero,0(r2)
    OSTCBPrioTbl[newprio] =  ptcb;                          /* Place pointer to TCB @ new priority     */
   16c20:	e0ffff03 	ldbu	r3,-4(fp)
   16c24:	008000f4 	movhi	r2,3
   16c28:	1081e004 	addi	r2,r2,1920
   16c2c:	18c7883a 	add	r3,r3,r3
   16c30:	18c7883a 	add	r3,r3,r3
   16c34:	10c5883a 	add	r2,r2,r3
   16c38:	e0fff617 	ldw	r3,-40(fp)
   16c3c:	10c00015 	stw	r3,0(r2)
    y_old                 =  ptcb->OSTCBY;
   16c40:	e0bff617 	ldw	r2,-40(fp)
   16c44:	10800d03 	ldbu	r2,52(r2)
   16c48:	e0bff805 	stb	r2,-32(fp)
    bity_old              =  ptcb->OSTCBBitY;
   16c4c:	e0bff617 	ldw	r2,-40(fp)
   16c50:	10800d83 	ldbu	r2,54(r2)
   16c54:	e0bff845 	stb	r2,-31(fp)
    bitx_old              =  ptcb->OSTCBBitX;
   16c58:	e0bff617 	ldw	r2,-40(fp)
   16c5c:	10800d43 	ldbu	r2,53(r2)
   16c60:	e0bff885 	stb	r2,-30(fp)
    if ((OSRdyTbl[y_old] &   bitx_old) != 0) {              /* If task is ready make it not            */
   16c64:	e0fff803 	ldbu	r3,-32(fp)
   16c68:	008000b4 	movhi	r2,2
   16c6c:	10836244 	addi	r2,r2,3465
   16c70:	10c5883a 	add	r2,r2,r3
   16c74:	10c00003 	ldbu	r3,0(r2)
   16c78:	e0bff883 	ldbu	r2,-30(fp)
   16c7c:	1884703a 	and	r2,r3,r2
   16c80:	10803fcc 	andi	r2,r2,255
   16c84:	10003726 	beq	r2,zero,16d64 <OSTaskChangePrio+0x2cc>
         OSRdyTbl[y_old] &= ~bitx_old;
   16c88:	e0fff803 	ldbu	r3,-32(fp)
   16c8c:	e13ff803 	ldbu	r4,-32(fp)
   16c90:	008000b4 	movhi	r2,2
   16c94:	10836244 	addi	r2,r2,3465
   16c98:	1105883a 	add	r2,r2,r4
   16c9c:	10800003 	ldbu	r2,0(r2)
   16ca0:	1009883a 	mov	r4,r2
   16ca4:	e0bff883 	ldbu	r2,-30(fp)
   16ca8:	0084303a 	nor	r2,zero,r2
   16cac:	2084703a 	and	r2,r4,r2
   16cb0:	1009883a 	mov	r4,r2
   16cb4:	008000b4 	movhi	r2,2
   16cb8:	10836244 	addi	r2,r2,3465
   16cbc:	10c5883a 	add	r2,r2,r3
   16cc0:	11000005 	stb	r4,0(r2)
         if (OSRdyTbl[y_old] == 0) {
   16cc4:	e0fff803 	ldbu	r3,-32(fp)
   16cc8:	008000b4 	movhi	r2,2
   16ccc:	10836244 	addi	r2,r2,3465
   16cd0:	10c5883a 	add	r2,r2,r3
   16cd4:	10800003 	ldbu	r2,0(r2)
   16cd8:	10803fcc 	andi	r2,r2,255
   16cdc:	10000b1e 	bne	r2,zero,16d0c <OSTaskChangePrio+0x274>
             OSRdyGrp &= ~bity_old;
   16ce0:	e0bff843 	ldbu	r2,-31(fp)
   16ce4:	0084303a 	nor	r2,zero,r2
   16ce8:	1007883a 	mov	r3,r2
   16cec:	008000b4 	movhi	r2,2
   16cf0:	10836204 	addi	r2,r2,3464
   16cf4:	10800003 	ldbu	r2,0(r2)
   16cf8:	1884703a 	and	r2,r3,r2
   16cfc:	1007883a 	mov	r3,r2
   16d00:	008000b4 	movhi	r2,2
   16d04:	10836204 	addi	r2,r2,3464
   16d08:	10c00005 	stb	r3,0(r2)
         }
         OSRdyGrp        |= bity_new;                       /* Make new priority ready to run          */
   16d0c:	008000b4 	movhi	r2,2
   16d10:	10836204 	addi	r2,r2,3464
   16d14:	10c00003 	ldbu	r3,0(r2)
   16d18:	e0bff783 	ldbu	r2,-34(fp)
   16d1c:	1884b03a 	or	r2,r3,r2
   16d20:	1007883a 	mov	r3,r2
   16d24:	008000b4 	movhi	r2,2
   16d28:	10836204 	addi	r2,r2,3464
   16d2c:	10c00005 	stb	r3,0(r2)
         OSRdyTbl[y_new] |= bitx_new;
   16d30:	e0fff703 	ldbu	r3,-36(fp)
   16d34:	e13ff703 	ldbu	r4,-36(fp)
   16d38:	008000b4 	movhi	r2,2
   16d3c:	10836244 	addi	r2,r2,3465
   16d40:	1105883a 	add	r2,r2,r4
   16d44:	11000003 	ldbu	r4,0(r2)
   16d48:	e0bff7c3 	ldbu	r2,-33(fp)
   16d4c:	2084b03a 	or	r2,r4,r2
   16d50:	1009883a 	mov	r4,r2
   16d54:	008000b4 	movhi	r2,2
   16d58:	10836244 	addi	r2,r2,3465
   16d5c:	10c5883a 	add	r2,r2,r3
   16d60:	11000005 	stb	r4,0(r2)
    }

#if (OS_EVENT_EN)
    pevent = ptcb->OSTCBEventPtr;
   16d64:	e0bff617 	ldw	r2,-40(fp)
   16d68:	10800717 	ldw	r2,28(r2)
   16d6c:	e0bff315 	stw	r2,-52(fp)
    if (pevent != (OS_EVENT *)0) {
   16d70:	e0bff317 	ldw	r2,-52(fp)
   16d74:	10003326 	beq	r2,zero,16e44 <OSTaskChangePrio+0x3ac>
        pevent->OSEventTbl[y_old] &= ~bitx_old;             /* Remove old task prio from wait list     */
   16d78:	e0bff803 	ldbu	r2,-32(fp)
   16d7c:	e0fff803 	ldbu	r3,-32(fp)
   16d80:	e13ff317 	ldw	r4,-52(fp)
   16d84:	20c7883a 	add	r3,r4,r3
   16d88:	18c00204 	addi	r3,r3,8
   16d8c:	18c000c3 	ldbu	r3,3(r3)
   16d90:	1809883a 	mov	r4,r3
   16d94:	e0fff883 	ldbu	r3,-30(fp)
   16d98:	00c6303a 	nor	r3,zero,r3
   16d9c:	20c6703a 	and	r3,r4,r3
   16da0:	1809883a 	mov	r4,r3
   16da4:	e0fff317 	ldw	r3,-52(fp)
   16da8:	1885883a 	add	r2,r3,r2
   16dac:	10800204 	addi	r2,r2,8
   16db0:	110000c5 	stb	r4,3(r2)
        if (pevent->OSEventTbl[y_old] == 0) {
   16db4:	e0bff803 	ldbu	r2,-32(fp)
   16db8:	e0fff317 	ldw	r3,-52(fp)
   16dbc:	1885883a 	add	r2,r3,r2
   16dc0:	10800204 	addi	r2,r2,8
   16dc4:	108000c3 	ldbu	r2,3(r2)
   16dc8:	10803fcc 	andi	r2,r2,255
   16dcc:	1000091e 	bne	r2,zero,16df4 <OSTaskChangePrio+0x35c>
            pevent->OSEventGrp    &= ~bity_old;
   16dd0:	e0bff317 	ldw	r2,-52(fp)
   16dd4:	10800283 	ldbu	r2,10(r2)
   16dd8:	1007883a 	mov	r3,r2
   16ddc:	e0bff843 	ldbu	r2,-31(fp)
   16de0:	0084303a 	nor	r2,zero,r2
   16de4:	1884703a 	and	r2,r3,r2
   16de8:	1007883a 	mov	r3,r2
   16dec:	e0bff317 	ldw	r2,-52(fp)
   16df0:	10c00285 	stb	r3,10(r2)
        }
        pevent->OSEventGrp        |= bity_new;              /* Add    new task prio to   wait list     */
   16df4:	e0bff317 	ldw	r2,-52(fp)
   16df8:	10c00283 	ldbu	r3,10(r2)
   16dfc:	e0bff783 	ldbu	r2,-34(fp)
   16e00:	1884b03a 	or	r2,r3,r2
   16e04:	1007883a 	mov	r3,r2
   16e08:	e0bff317 	ldw	r2,-52(fp)
   16e0c:	10c00285 	stb	r3,10(r2)
        pevent->OSEventTbl[y_new] |= bitx_new;
   16e10:	e0bff703 	ldbu	r2,-36(fp)
   16e14:	e0fff703 	ldbu	r3,-36(fp)
   16e18:	e13ff317 	ldw	r4,-52(fp)
   16e1c:	20c7883a 	add	r3,r4,r3
   16e20:	18c00204 	addi	r3,r3,8
   16e24:	190000c3 	ldbu	r4,3(r3)
   16e28:	e0fff7c3 	ldbu	r3,-33(fp)
   16e2c:	20c6b03a 	or	r3,r4,r3
   16e30:	1809883a 	mov	r4,r3
   16e34:	e0fff317 	ldw	r3,-52(fp)
   16e38:	1885883a 	add	r2,r3,r2
   16e3c:	10800204 	addi	r2,r2,8
   16e40:	110000c5 	stb	r4,3(r2)
    }
#if (OS_EVENT_MULTI_EN > 0)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {
   16e44:	e0bff617 	ldw	r2,-40(fp)
   16e48:	10800817 	ldw	r2,32(r2)
   16e4c:	10004226 	beq	r2,zero,16f58 <OSTaskChangePrio+0x4c0>
        pevents =  ptcb->OSTCBEventMultiPtr;
   16e50:	e0bff617 	ldw	r2,-40(fp)
   16e54:	10800817 	ldw	r2,32(r2)
   16e58:	e0bff415 	stw	r2,-48(fp)
        pevent  = *pevents;
   16e5c:	e0bff417 	ldw	r2,-48(fp)
   16e60:	10800017 	ldw	r2,0(r2)
   16e64:	e0bff315 	stw	r2,-52(fp)
        while (pevent != (OS_EVENT *)0) {
   16e68:	00003906 	br	16f50 <OSTaskChangePrio+0x4b8>
            pevent->OSEventTbl[y_old] &= ~bitx_old;         /* Remove old task prio from wait lists    */
   16e6c:	e0bff803 	ldbu	r2,-32(fp)
   16e70:	e0fff803 	ldbu	r3,-32(fp)
   16e74:	e13ff317 	ldw	r4,-52(fp)
   16e78:	20c7883a 	add	r3,r4,r3
   16e7c:	18c00204 	addi	r3,r3,8
   16e80:	18c000c3 	ldbu	r3,3(r3)
   16e84:	1809883a 	mov	r4,r3
   16e88:	e0fff883 	ldbu	r3,-30(fp)
   16e8c:	00c6303a 	nor	r3,zero,r3
   16e90:	20c6703a 	and	r3,r4,r3
   16e94:	1809883a 	mov	r4,r3
   16e98:	e0fff317 	ldw	r3,-52(fp)
   16e9c:	1885883a 	add	r2,r3,r2
   16ea0:	10800204 	addi	r2,r2,8
   16ea4:	110000c5 	stb	r4,3(r2)
            if (pevent->OSEventTbl[y_old] == 0) {
   16ea8:	e0bff803 	ldbu	r2,-32(fp)
   16eac:	e0fff317 	ldw	r3,-52(fp)
   16eb0:	1885883a 	add	r2,r3,r2
   16eb4:	10800204 	addi	r2,r2,8
   16eb8:	108000c3 	ldbu	r2,3(r2)
   16ebc:	10803fcc 	andi	r2,r2,255
   16ec0:	1000091e 	bne	r2,zero,16ee8 <OSTaskChangePrio+0x450>
                pevent->OSEventGrp    &= ~bity_old;
   16ec4:	e0bff317 	ldw	r2,-52(fp)
   16ec8:	10800283 	ldbu	r2,10(r2)
   16ecc:	1007883a 	mov	r3,r2
   16ed0:	e0bff843 	ldbu	r2,-31(fp)
   16ed4:	0084303a 	nor	r2,zero,r2
   16ed8:	1884703a 	and	r2,r3,r2
   16edc:	1007883a 	mov	r3,r2
   16ee0:	e0bff317 	ldw	r2,-52(fp)
   16ee4:	10c00285 	stb	r3,10(r2)
            }
            pevent->OSEventGrp        |= bity_new;          /* Add    new task prio to   wait lists    */
   16ee8:	e0bff317 	ldw	r2,-52(fp)
   16eec:	10c00283 	ldbu	r3,10(r2)
   16ef0:	e0bff783 	ldbu	r2,-34(fp)
   16ef4:	1884b03a 	or	r2,r3,r2
   16ef8:	1007883a 	mov	r3,r2
   16efc:	e0bff317 	ldw	r2,-52(fp)
   16f00:	10c00285 	stb	r3,10(r2)
            pevent->OSEventTbl[y_new] |= bitx_new;
   16f04:	e0bff703 	ldbu	r2,-36(fp)
   16f08:	e0fff703 	ldbu	r3,-36(fp)
   16f0c:	e13ff317 	ldw	r4,-52(fp)
   16f10:	20c7883a 	add	r3,r4,r3
   16f14:	18c00204 	addi	r3,r3,8
   16f18:	190000c3 	ldbu	r4,3(r3)
   16f1c:	e0fff7c3 	ldbu	r3,-33(fp)
   16f20:	20c6b03a 	or	r3,r4,r3
   16f24:	1809883a 	mov	r4,r3
   16f28:	e0fff317 	ldw	r3,-52(fp)
   16f2c:	1885883a 	add	r2,r3,r2
   16f30:	10800204 	addi	r2,r2,8
   16f34:	110000c5 	stb	r4,3(r2)
            pevents++;
   16f38:	e0bff417 	ldw	r2,-48(fp)
   16f3c:	10800104 	addi	r2,r2,4
   16f40:	e0bff415 	stw	r2,-48(fp)
            pevent                     = *pevents;
   16f44:	e0bff417 	ldw	r2,-48(fp)
   16f48:	10800017 	ldw	r2,0(r2)
   16f4c:	e0bff315 	stw	r2,-52(fp)
    }
#if (OS_EVENT_MULTI_EN > 0)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {
        pevents =  ptcb->OSTCBEventMultiPtr;
        pevent  = *pevents;
        while (pevent != (OS_EVENT *)0) {
   16f50:	e0bff317 	ldw	r2,-52(fp)
   16f54:	103fc51e 	bne	r2,zero,16e6c <__alt_mem_Flash_flash_data+0xf4016e6c>
        }
    }
#endif
#endif

    ptcb->OSTCBPrio = newprio;                              /* Set new task priority                   */
   16f58:	e0bff617 	ldw	r2,-40(fp)
   16f5c:	e0ffff03 	ldbu	r3,-4(fp)
   16f60:	10c00c85 	stb	r3,50(r2)
    ptcb->OSTCBY    = y_new;
   16f64:	e0bff617 	ldw	r2,-40(fp)
   16f68:	e0fff703 	ldbu	r3,-36(fp)
   16f6c:	10c00d05 	stb	r3,52(r2)
    ptcb->OSTCBX    = x_new;
   16f70:	e0bff617 	ldw	r2,-40(fp)
   16f74:	e0fff743 	ldbu	r3,-35(fp)
   16f78:	10c00cc5 	stb	r3,51(r2)
    ptcb->OSTCBBitY = bity_new;
   16f7c:	e0bff617 	ldw	r2,-40(fp)
   16f80:	e0fff783 	ldbu	r3,-34(fp)
   16f84:	10c00d85 	stb	r3,54(r2)
    ptcb->OSTCBBitX = bitx_new;
   16f88:	e0bff617 	ldw	r2,-40(fp)
   16f8c:	e0fff7c3 	ldbu	r3,-33(fp)
   16f90:	10c00d45 	stb	r3,53(r2)
   16f94:	e0bff517 	ldw	r2,-44(fp)
   16f98:	e0bffd15 	stw	r2,-12(fp)
   16f9c:	e0bffd17 	ldw	r2,-12(fp)
   16fa0:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    if (OSRunning == OS_TRUE) {
   16fa4:	008000b4 	movhi	r2,2
   16fa8:	10835644 	addi	r2,r2,3417
   16fac:	10800003 	ldbu	r2,0(r2)
   16fb0:	10803fcc 	andi	r2,r2,255
   16fb4:	10800058 	cmpnei	r2,r2,1
   16fb8:	1000011e 	bne	r2,zero,16fc0 <OSTaskChangePrio+0x528>
        OS_Sched();                                         /* Find new highest priority task          */
   16fbc:	00119f40 	call	119f4 <OS_Sched>
    }
    return (OS_ERR_NONE);
   16fc0:	0005883a 	mov	r2,zero
}
   16fc4:	e037883a 	mov	sp,fp
   16fc8:	dfc00117 	ldw	ra,4(sp)
   16fcc:	df000017 	ldw	fp,0(sp)
   16fd0:	dec00204 	addi	sp,sp,8
   16fd4:	f800283a 	ret

00016fd8 <OSTaskCreate>:
*********************************************************************************************************
*/

#if OS_TASK_CREATE_EN > 0
INT8U  OSTaskCreate (void (*task)(void *p_arg), void *p_arg, OS_STK *ptos, INT8U prio)
{
   16fd8:	deffee04 	addi	sp,sp,-72
   16fdc:	dfc01115 	stw	ra,68(sp)
   16fe0:	df001015 	stw	fp,64(sp)
   16fe4:	df001004 	addi	fp,sp,64
   16fe8:	e13ffc15 	stw	r4,-16(fp)
   16fec:	e17ffd15 	stw	r5,-12(fp)
   16ff0:	e1bffe15 	stw	r6,-8(fp)
   16ff4:	3805883a 	mov	r2,r7
   16ff8:	e0bfff05 	stb	r2,-4(fp)
    OS_STK    *psp;
    INT8U      err;
#if OS_CRITICAL_METHOD == 3                  /* Allocate storage for CPU status register               */
    OS_CPU_SR  cpu_sr = 0;
   16ffc:	e03ff315 	stw	zero,-52(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio > OS_LOWEST_PRIO) {             /* Make sure priority is within allowable range           */
   17000:	e0bfff03 	ldbu	r2,-4(fp)
   17004:	10800570 	cmpltui	r2,r2,21
   17008:	1000021e 	bne	r2,zero,17014 <OSTaskCreate+0x3c>
        return (OS_ERR_PRIO_INVALID);
   1700c:	00800a84 	movi	r2,42
   17010:	00005b06 	br	17180 <OSTaskCreate+0x1a8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   17014:	0005303a 	rdctl	r2,status
   17018:	e0bff615 	stw	r2,-40(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1701c:	e0fff617 	ldw	r3,-40(fp)
   17020:	00bfff84 	movi	r2,-2
   17024:	1884703a 	and	r2,r3,r2
   17028:	1001703a 	wrctl	status,r2
  
  return context;
   1702c:	e0bff617 	ldw	r2,-40(fp)
    }
#endif
    OS_ENTER_CRITICAL();
   17030:	e0bff315 	stw	r2,-52(fp)
    if (OSIntNesting > 0) {                  /* Make sure we don't create the task from within an ISR  */
   17034:	008000b4 	movhi	r2,2
   17038:	10836404 	addi	r2,r2,3472
   1703c:	10800003 	ldbu	r2,0(r2)
   17040:	10803fcc 	andi	r2,r2,255
   17044:	10000626 	beq	r2,zero,17060 <OSTaskCreate+0x88>
   17048:	e0bff317 	ldw	r2,-52(fp)
   1704c:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   17050:	e0bff717 	ldw	r2,-36(fp)
   17054:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_CREATE_ISR);
   17058:	00800f04 	movi	r2,60
   1705c:	00004806 	br	17180 <OSTaskCreate+0x1a8>
    }
    if (OSTCBPrioTbl[prio] == (OS_TCB *)0) { /* Make sure task doesn't already exist at this priority  */
   17060:	e0ffff03 	ldbu	r3,-4(fp)
   17064:	008000f4 	movhi	r2,3
   17068:	1081e004 	addi	r2,r2,1920
   1706c:	18c7883a 	add	r3,r3,r3
   17070:	18c7883a 	add	r3,r3,r3
   17074:	10c5883a 	add	r2,r2,r3
   17078:	10800017 	ldw	r2,0(r2)
   1707c:	10003b1e 	bne	r2,zero,1716c <OSTaskCreate+0x194>
        OSTCBPrioTbl[prio] = OS_TCB_RESERVED;/* Reserve the priority to prevent others from doing ...  */
   17080:	e0ffff03 	ldbu	r3,-4(fp)
   17084:	008000f4 	movhi	r2,3
   17088:	1081e004 	addi	r2,r2,1920
   1708c:	18c7883a 	add	r3,r3,r3
   17090:	18c7883a 	add	r3,r3,r3
   17094:	10c5883a 	add	r2,r2,r3
   17098:	00c00044 	movi	r3,1
   1709c:	10c00015 	stw	r3,0(r2)
   170a0:	e0bff317 	ldw	r2,-52(fp)
   170a4:	e0bff815 	stw	r2,-32(fp)
   170a8:	e0bff817 	ldw	r2,-32(fp)
   170ac:	1001703a 	wrctl	status,r2
                                             /* ... the same thing until task is created.              */
        OS_EXIT_CRITICAL();
        psp = OSTaskStkInit(task, p_arg, ptos, 0);              /* Initialize the task's stack         */
   170b0:	e13ffc17 	ldw	r4,-16(fp)
   170b4:	e17ffd17 	ldw	r5,-12(fp)
   170b8:	e1bffe17 	ldw	r6,-8(fp)
   170bc:	000f883a 	mov	r7,zero
   170c0:	001bccc0 	call	1bccc <OSTaskStkInit>
   170c4:	e0bff415 	stw	r2,-48(fp)
        err = OS_TCBInit(prio, psp, (OS_STK *)0, 0, 0, (void *)0, 0);
   170c8:	e0bfff03 	ldbu	r2,-4(fp)
   170cc:	d8000015 	stw	zero,0(sp)
   170d0:	d8000115 	stw	zero,4(sp)
   170d4:	d8000215 	stw	zero,8(sp)
   170d8:	1009883a 	mov	r4,r2
   170dc:	e17ff417 	ldw	r5,-48(fp)
   170e0:	000d883a 	mov	r6,zero
   170e4:	000f883a 	mov	r7,zero
   170e8:	0011df80 	call	11df8 <OS_TCBInit>
   170ec:	e0bff505 	stb	r2,-44(fp)
        if (err == OS_ERR_NONE) {
   170f0:	e0bff503 	ldbu	r2,-44(fp)
   170f4:	1000081e 	bne	r2,zero,17118 <OSTaskCreate+0x140>
            if (OSRunning == OS_TRUE) {      /* Find highest priority task if multitasking has started */
   170f8:	008000b4 	movhi	r2,2
   170fc:	10835644 	addi	r2,r2,3417
   17100:	10800003 	ldbu	r2,0(r2)
   17104:	10803fcc 	andi	r2,r2,255
   17108:	10800058 	cmpnei	r2,r2,1
   1710c:	1000151e 	bne	r2,zero,17164 <OSTaskCreate+0x18c>
                OS_Sched();
   17110:	00119f40 	call	119f4 <OS_Sched>
   17114:	00001306 	br	17164 <OSTaskCreate+0x18c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   17118:	0005303a 	rdctl	r2,status
   1711c:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   17120:	e0fff917 	ldw	r3,-28(fp)
   17124:	00bfff84 	movi	r2,-2
   17128:	1884703a 	and	r2,r3,r2
   1712c:	1001703a 	wrctl	status,r2
  
  return context;
   17130:	e0bff917 	ldw	r2,-28(fp)
            }
        } else {
            OS_ENTER_CRITICAL();
   17134:	e0bff315 	stw	r2,-52(fp)
            OSTCBPrioTbl[prio] = (OS_TCB *)0;/* Make this priority available to others                 */
   17138:	e0ffff03 	ldbu	r3,-4(fp)
   1713c:	008000f4 	movhi	r2,3
   17140:	1081e004 	addi	r2,r2,1920
   17144:	18c7883a 	add	r3,r3,r3
   17148:	18c7883a 	add	r3,r3,r3
   1714c:	10c5883a 	add	r2,r2,r3
   17150:	10000015 	stw	zero,0(r2)
   17154:	e0bff317 	ldw	r2,-52(fp)
   17158:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1715c:	e0bffa17 	ldw	r2,-24(fp)
   17160:	1001703a 	wrctl	status,r2
            OS_EXIT_CRITICAL();
        }
        return (err);
   17164:	e0bff503 	ldbu	r2,-44(fp)
   17168:	00000506 	br	17180 <OSTaskCreate+0x1a8>
   1716c:	e0bff317 	ldw	r2,-52(fp)
   17170:	e0bffb15 	stw	r2,-20(fp)
   17174:	e0bffb17 	ldw	r2,-20(fp)
   17178:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_PRIO_EXIST);
   1717c:	00800a04 	movi	r2,40
}
   17180:	e037883a 	mov	sp,fp
   17184:	dfc00117 	ldw	ra,4(sp)
   17188:	df000017 	ldw	fp,0(sp)
   1718c:	dec00204 	addi	sp,sp,8
   17190:	f800283a 	ret

00017194 <OSTaskCreateExt>:
                        INT16U   id,
                        OS_STK  *pbos,
                        INT32U   stk_size,
                        void    *pext,
                        INT16U   opt)
{
   17194:	deffec04 	addi	sp,sp,-80
   17198:	dfc01315 	stw	ra,76(sp)
   1719c:	df001215 	stw	fp,72(sp)
   171a0:	df001204 	addi	fp,sp,72
   171a4:	e13ffa15 	stw	r4,-24(fp)
   171a8:	e17ffb15 	stw	r5,-20(fp)
   171ac:	e1bffc15 	stw	r6,-16(fp)
   171b0:	3809883a 	mov	r4,r7
   171b4:	e0c00217 	ldw	r3,8(fp)
   171b8:	e0800617 	ldw	r2,24(fp)
   171bc:	e13ffd05 	stb	r4,-12(fp)
   171c0:	e0fffe0d 	sth	r3,-8(fp)
   171c4:	e0bfff0d 	sth	r2,-4(fp)
    OS_STK    *psp;
    INT8U      err;
#if OS_CRITICAL_METHOD == 3                  /* Allocate storage for CPU status register               */
    OS_CPU_SR  cpu_sr = 0;
   171c8:	e03ff115 	stw	zero,-60(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio > OS_LOWEST_PRIO) {             /* Make sure priority is within allowable range           */
   171cc:	e0bffd03 	ldbu	r2,-12(fp)
   171d0:	10800570 	cmpltui	r2,r2,21
   171d4:	1000021e 	bne	r2,zero,171e0 <OSTaskCreateExt+0x4c>
        return (OS_ERR_PRIO_INVALID);
   171d8:	00800a84 	movi	r2,42
   171dc:	00006306 	br	1736c <OSTaskCreateExt+0x1d8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   171e0:	0005303a 	rdctl	r2,status
   171e4:	e0bff415 	stw	r2,-48(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   171e8:	e0fff417 	ldw	r3,-48(fp)
   171ec:	00bfff84 	movi	r2,-2
   171f0:	1884703a 	and	r2,r3,r2
   171f4:	1001703a 	wrctl	status,r2
  
  return context;
   171f8:	e0bff417 	ldw	r2,-48(fp)
    }
#endif
    OS_ENTER_CRITICAL();
   171fc:	e0bff115 	stw	r2,-60(fp)
    if (OSIntNesting > 0) {                  /* Make sure we don't create the task from within an ISR  */
   17200:	008000b4 	movhi	r2,2
   17204:	10836404 	addi	r2,r2,3472
   17208:	10800003 	ldbu	r2,0(r2)
   1720c:	10803fcc 	andi	r2,r2,255
   17210:	10000626 	beq	r2,zero,1722c <OSTaskCreateExt+0x98>
   17214:	e0bff117 	ldw	r2,-60(fp)
   17218:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1721c:	e0bff517 	ldw	r2,-44(fp)
   17220:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_CREATE_ISR);
   17224:	00800f04 	movi	r2,60
   17228:	00005006 	br	1736c <OSTaskCreateExt+0x1d8>
    }
    if (OSTCBPrioTbl[prio] == (OS_TCB *)0) { /* Make sure task doesn't already exist at this priority  */
   1722c:	e0fffd03 	ldbu	r3,-12(fp)
   17230:	008000f4 	movhi	r2,3
   17234:	1081e004 	addi	r2,r2,1920
   17238:	18c7883a 	add	r3,r3,r3
   1723c:	18c7883a 	add	r3,r3,r3
   17240:	10c5883a 	add	r2,r2,r3
   17244:	10800017 	ldw	r2,0(r2)
   17248:	1000431e 	bne	r2,zero,17358 <OSTaskCreateExt+0x1c4>
        OSTCBPrioTbl[prio] = OS_TCB_RESERVED;/* Reserve the priority to prevent others from doing ...  */
   1724c:	e0fffd03 	ldbu	r3,-12(fp)
   17250:	008000f4 	movhi	r2,3
   17254:	1081e004 	addi	r2,r2,1920
   17258:	18c7883a 	add	r3,r3,r3
   1725c:	18c7883a 	add	r3,r3,r3
   17260:	10c5883a 	add	r2,r2,r3
   17264:	00c00044 	movi	r3,1
   17268:	10c00015 	stw	r3,0(r2)
   1726c:	e0bff117 	ldw	r2,-60(fp)
   17270:	e0bff615 	stw	r2,-40(fp)
   17274:	e0bff617 	ldw	r2,-40(fp)
   17278:	1001703a 	wrctl	status,r2
                                             /* ... the same thing until task is created.              */
        OS_EXIT_CRITICAL();

#if (OS_TASK_STAT_STK_CHK_EN > 0)
        OS_TaskStkClr(pbos, stk_size, opt);                    /* Clear the task stack (if needed)     */
   1727c:	e0bfff0b 	ldhu	r2,-4(fp)
   17280:	e1000317 	ldw	r4,12(fp)
   17284:	e1400417 	ldw	r5,16(fp)
   17288:	100d883a 	mov	r6,r2
   1728c:	00183200 	call	18320 <OS_TaskStkClr>
#endif

        psp = OSTaskStkInit(task, p_arg, ptos, opt);           /* Initialize the task's stack          */
   17290:	e0bfff0b 	ldhu	r2,-4(fp)
   17294:	e13ffa17 	ldw	r4,-24(fp)
   17298:	e17ffb17 	ldw	r5,-20(fp)
   1729c:	e1bffc17 	ldw	r6,-16(fp)
   172a0:	100f883a 	mov	r7,r2
   172a4:	001bccc0 	call	1bccc <OSTaskStkInit>
   172a8:	e0bff215 	stw	r2,-56(fp)
        err = OS_TCBInit(prio, psp, pbos, id, stk_size, pext, opt);
   172ac:	e13ffd03 	ldbu	r4,-12(fp)
   172b0:	e1fffe0b 	ldhu	r7,-8(fp)
   172b4:	e0bfff0b 	ldhu	r2,-4(fp)
   172b8:	e0c00417 	ldw	r3,16(fp)
   172bc:	d8c00015 	stw	r3,0(sp)
   172c0:	e0c00517 	ldw	r3,20(fp)
   172c4:	d8c00115 	stw	r3,4(sp)
   172c8:	d8800215 	stw	r2,8(sp)
   172cc:	e17ff217 	ldw	r5,-56(fp)
   172d0:	e1800317 	ldw	r6,12(fp)
   172d4:	0011df80 	call	11df8 <OS_TCBInit>
   172d8:	e0bff305 	stb	r2,-52(fp)
        if (err == OS_ERR_NONE) {
   172dc:	e0bff303 	ldbu	r2,-52(fp)
   172e0:	1000081e 	bne	r2,zero,17304 <OSTaskCreateExt+0x170>
            if (OSRunning == OS_TRUE) {                        /* Find HPT if multitasking has started */
   172e4:	008000b4 	movhi	r2,2
   172e8:	10835644 	addi	r2,r2,3417
   172ec:	10800003 	ldbu	r2,0(r2)
   172f0:	10803fcc 	andi	r2,r2,255
   172f4:	10800058 	cmpnei	r2,r2,1
   172f8:	1000151e 	bne	r2,zero,17350 <OSTaskCreateExt+0x1bc>
                OS_Sched();
   172fc:	00119f40 	call	119f4 <OS_Sched>
   17300:	00001306 	br	17350 <OSTaskCreateExt+0x1bc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   17304:	0005303a 	rdctl	r2,status
   17308:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1730c:	e0fff717 	ldw	r3,-36(fp)
   17310:	00bfff84 	movi	r2,-2
   17314:	1884703a 	and	r2,r3,r2
   17318:	1001703a 	wrctl	status,r2
  
  return context;
   1731c:	e0bff717 	ldw	r2,-36(fp)
            }
        } else {
            OS_ENTER_CRITICAL();
   17320:	e0bff115 	stw	r2,-60(fp)
            OSTCBPrioTbl[prio] = (OS_TCB *)0;                  /* Make this priority avail. to others  */
   17324:	e0fffd03 	ldbu	r3,-12(fp)
   17328:	008000f4 	movhi	r2,3
   1732c:	1081e004 	addi	r2,r2,1920
   17330:	18c7883a 	add	r3,r3,r3
   17334:	18c7883a 	add	r3,r3,r3
   17338:	10c5883a 	add	r2,r2,r3
   1733c:	10000015 	stw	zero,0(r2)
   17340:	e0bff117 	ldw	r2,-60(fp)
   17344:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   17348:	e0bff817 	ldw	r2,-32(fp)
   1734c:	1001703a 	wrctl	status,r2
            OS_EXIT_CRITICAL();
        }
        return (err);
   17350:	e0bff303 	ldbu	r2,-52(fp)
   17354:	00000506 	br	1736c <OSTaskCreateExt+0x1d8>
   17358:	e0bff117 	ldw	r2,-60(fp)
   1735c:	e0bff915 	stw	r2,-28(fp)
   17360:	e0bff917 	ldw	r2,-28(fp)
   17364:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_PRIO_EXIST);
   17368:	00800a04 	movi	r2,40
}
   1736c:	e037883a 	mov	sp,fp
   17370:	dfc00117 	ldw	ra,4(sp)
   17374:	df000017 	ldw	fp,0(sp)
   17378:	dec00204 	addi	sp,sp,8
   1737c:	f800283a 	ret

00017380 <OSTaskDel>:
*********************************************************************************************************
*/

#if OS_TASK_DEL_EN > 0
INT8U  OSTaskDel (INT8U prio)
{
   17380:	defff404 	addi	sp,sp,-48
   17384:	dfc00b15 	stw	ra,44(sp)
   17388:	df000a15 	stw	fp,40(sp)
   1738c:	df000a04 	addi	fp,sp,40
   17390:	2005883a 	mov	r2,r4
   17394:	e0bfff05 	stb	r2,-4(fp)
#if (OS_FLAG_EN > 0) && (OS_MAX_FLAGS > 0)
    OS_FLAG_NODE *pnode;
#endif
    OS_TCB       *ptcb;
#if OS_CRITICAL_METHOD == 3                             /* Allocate storage for CPU status register    */
    OS_CPU_SR     cpu_sr = 0;
   17398:	e03ff615 	stw	zero,-40(fp)
#endif



    if (OSIntNesting > 0) {                             /* See if trying to delete from ISR            */
   1739c:	008000b4 	movhi	r2,2
   173a0:	10836404 	addi	r2,r2,3472
   173a4:	10800003 	ldbu	r2,0(r2)
   173a8:	10803fcc 	andi	r2,r2,255
   173ac:	10000226 	beq	r2,zero,173b8 <OSTaskDel+0x38>
        return (OS_ERR_TASK_DEL_ISR);
   173b0:	00801004 	movi	r2,64
   173b4:	0000e506 	br	1774c <OSTaskDel+0x3cc>
    }
    if (prio == OS_TASK_IDLE_PRIO) {                    /* Not allowed to delete idle task             */
   173b8:	e0bfff03 	ldbu	r2,-4(fp)
   173bc:	10800518 	cmpnei	r2,r2,20
   173c0:	1000021e 	bne	r2,zero,173cc <OSTaskDel+0x4c>
        return (OS_ERR_TASK_DEL_IDLE);
   173c4:	00800f84 	movi	r2,62
   173c8:	0000e006 	br	1774c <OSTaskDel+0x3cc>
    }
#if OS_ARG_CHK_EN > 0
    if (prio >= OS_LOWEST_PRIO) {                       /* Task priority valid ?                       */
   173cc:	e0bfff03 	ldbu	r2,-4(fp)
   173d0:	10800530 	cmpltui	r2,r2,20
   173d4:	1000051e 	bne	r2,zero,173ec <OSTaskDel+0x6c>
        if (prio != OS_PRIO_SELF) {
   173d8:	e0bfff03 	ldbu	r2,-4(fp)
   173dc:	10803fe0 	cmpeqi	r2,r2,255
   173e0:	1000021e 	bne	r2,zero,173ec <OSTaskDel+0x6c>
            return (OS_ERR_PRIO_INVALID);
   173e4:	00800a84 	movi	r2,42
   173e8:	0000d806 	br	1774c <OSTaskDel+0x3cc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   173ec:	0005303a 	rdctl	r2,status
   173f0:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   173f4:	e0fff917 	ldw	r3,-28(fp)
   173f8:	00bfff84 	movi	r2,-2
   173fc:	1884703a 	and	r2,r3,r2
   17400:	1001703a 	wrctl	status,r2
  
  return context;
   17404:	e0bff917 	ldw	r2,-28(fp)
        }
    }
#endif

/*$PAGE*/
    OS_ENTER_CRITICAL();
   17408:	e0bff615 	stw	r2,-40(fp)
    if (prio == OS_PRIO_SELF) {                         /* See if requesting to delete self            */
   1740c:	e0bfff03 	ldbu	r2,-4(fp)
   17410:	10803fd8 	cmpnei	r2,r2,255
   17414:	1000051e 	bne	r2,zero,1742c <OSTaskDel+0xac>
        prio = OSTCBCur->OSTCBPrio;                     /* Set priority to delete to current           */
   17418:	008000b4 	movhi	r2,2
   1741c:	10836504 	addi	r2,r2,3476
   17420:	10800017 	ldw	r2,0(r2)
   17424:	10800c83 	ldbu	r2,50(r2)
   17428:	e0bfff05 	stb	r2,-4(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
   1742c:	e0ffff03 	ldbu	r3,-4(fp)
   17430:	008000f4 	movhi	r2,3
   17434:	1081e004 	addi	r2,r2,1920
   17438:	18c7883a 	add	r3,r3,r3
   1743c:	18c7883a 	add	r3,r3,r3
   17440:	10c5883a 	add	r2,r2,r3
   17444:	10800017 	ldw	r2,0(r2)
   17448:	e0bff715 	stw	r2,-36(fp)
    if (ptcb == (OS_TCB *)0) {                          /* Task to delete must exist                   */
   1744c:	e0bff717 	ldw	r2,-36(fp)
   17450:	1000061e 	bne	r2,zero,1746c <OSTaskDel+0xec>
   17454:	e0bff617 	ldw	r2,-40(fp)
   17458:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1745c:	e0bffa17 	ldw	r2,-24(fp)
   17460:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
   17464:	008010c4 	movi	r2,67
   17468:	0000b806 	br	1774c <OSTaskDel+0x3cc>
    }
    if (ptcb == OS_TCB_RESERVED) {                      /* Must not be assigned to Mutex               */
   1746c:	e0bff717 	ldw	r2,-36(fp)
   17470:	10800058 	cmpnei	r2,r2,1
   17474:	1000061e 	bne	r2,zero,17490 <OSTaskDel+0x110>
   17478:	e0bff617 	ldw	r2,-40(fp)
   1747c:	e0bffb15 	stw	r2,-20(fp)
   17480:	e0bffb17 	ldw	r2,-20(fp)
   17484:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_DEL);
   17488:	00800f44 	movi	r2,61
   1748c:	0000af06 	br	1774c <OSTaskDel+0x3cc>
    }

    OSRdyTbl[ptcb->OSTCBY] &= ~ptcb->OSTCBBitX;
   17490:	e0bff717 	ldw	r2,-36(fp)
   17494:	10800d03 	ldbu	r2,52(r2)
   17498:	10c03fcc 	andi	r3,r2,255
   1749c:	e0bff717 	ldw	r2,-36(fp)
   174a0:	10800d03 	ldbu	r2,52(r2)
   174a4:	11003fcc 	andi	r4,r2,255
   174a8:	008000b4 	movhi	r2,2
   174ac:	10836244 	addi	r2,r2,3465
   174b0:	1105883a 	add	r2,r2,r4
   174b4:	10800003 	ldbu	r2,0(r2)
   174b8:	1009883a 	mov	r4,r2
   174bc:	e0bff717 	ldw	r2,-36(fp)
   174c0:	10800d43 	ldbu	r2,53(r2)
   174c4:	0084303a 	nor	r2,zero,r2
   174c8:	2084703a 	and	r2,r4,r2
   174cc:	1009883a 	mov	r4,r2
   174d0:	008000b4 	movhi	r2,2
   174d4:	10836244 	addi	r2,r2,3465
   174d8:	10c5883a 	add	r2,r2,r3
   174dc:	11000005 	stb	r4,0(r2)
    if (OSRdyTbl[ptcb->OSTCBY] == 0) {                  /* Make task not ready                         */
   174e0:	e0bff717 	ldw	r2,-36(fp)
   174e4:	10800d03 	ldbu	r2,52(r2)
   174e8:	10c03fcc 	andi	r3,r2,255
   174ec:	008000b4 	movhi	r2,2
   174f0:	10836244 	addi	r2,r2,3465
   174f4:	10c5883a 	add	r2,r2,r3
   174f8:	10800003 	ldbu	r2,0(r2)
   174fc:	10803fcc 	andi	r2,r2,255
   17500:	10000c1e 	bne	r2,zero,17534 <OSTaskDel+0x1b4>
        OSRdyGrp           &= ~ptcb->OSTCBBitY;
   17504:	e0bff717 	ldw	r2,-36(fp)
   17508:	10800d83 	ldbu	r2,54(r2)
   1750c:	0084303a 	nor	r2,zero,r2
   17510:	1007883a 	mov	r3,r2
   17514:	008000b4 	movhi	r2,2
   17518:	10836204 	addi	r2,r2,3464
   1751c:	10800003 	ldbu	r2,0(r2)
   17520:	1884703a 	and	r2,r3,r2
   17524:	1007883a 	mov	r3,r2
   17528:	008000b4 	movhi	r2,2
   1752c:	10836204 	addi	r2,r2,3464
   17530:	10c00005 	stb	r3,0(r2)
    }
    
#if (OS_EVENT_EN)
    if (ptcb->OSTCBEventPtr != (OS_EVENT *)0) {
   17534:	e0bff717 	ldw	r2,-36(fp)
   17538:	10800717 	ldw	r2,28(r2)
   1753c:	10000526 	beq	r2,zero,17554 <OSTaskDel+0x1d4>
        OS_EventTaskRemove(ptcb, ptcb->OSTCBEventPtr);  /* Remove this task from any event   wait list */
   17540:	e0bff717 	ldw	r2,-36(fp)
   17544:	10800717 	ldw	r2,28(r2)
   17548:	e13ff717 	ldw	r4,-36(fp)
   1754c:	100b883a 	mov	r5,r2
   17550:	00113cc0 	call	113cc <OS_EventTaskRemove>
    }
#if (OS_EVENT_MULTI_EN > 0)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {   /* Remove this task from any events' wait lists*/
   17554:	e0bff717 	ldw	r2,-36(fp)
   17558:	10800817 	ldw	r2,32(r2)
   1755c:	10000526 	beq	r2,zero,17574 <OSTaskDel+0x1f4>
        OS_EventTaskRemoveMulti(ptcb, ptcb->OSTCBEventMultiPtr);
   17560:	e0bff717 	ldw	r2,-36(fp)
   17564:	10800817 	ldw	r2,32(r2)
   17568:	e13ff717 	ldw	r4,-36(fp)
   1756c:	100b883a 	mov	r5,r2
   17570:	00114800 	call	11480 <OS_EventTaskRemoveMulti>
    }
#endif
#endif

#if (OS_FLAG_EN > 0) && (OS_MAX_FLAGS > 0)
    pnode = ptcb->OSTCBFlagNode;
   17574:	e0bff717 	ldw	r2,-36(fp)
   17578:	10800a17 	ldw	r2,40(r2)
   1757c:	e0bff815 	stw	r2,-32(fp)
    if (pnode != (OS_FLAG_NODE *)0) {                   /* If task is waiting on event flag            */
   17580:	e0bff817 	ldw	r2,-32(fp)
   17584:	10000226 	beq	r2,zero,17590 <OSTaskDel+0x210>
        OS_FlagUnlink(pnode);                           /* Remove from wait list                       */
   17588:	e13ff817 	ldw	r4,-32(fp)
   1758c:	00139d40 	call	139d4 <OS_FlagUnlink>
    }
#endif

    ptcb->OSTCBDly      = 0;                            /* Prevent OSTimeTick() from updating          */
   17590:	e0bff717 	ldw	r2,-36(fp)
   17594:	10000b8d 	sth	zero,46(r2)
    ptcb->OSTCBStat     = OS_STAT_RDY;                  /* Prevent task from being resumed             */
   17598:	e0bff717 	ldw	r2,-36(fp)
   1759c:	10000c05 	stb	zero,48(r2)
    ptcb->OSTCBStatPend = OS_STAT_PEND_OK;
   175a0:	e0bff717 	ldw	r2,-36(fp)
   175a4:	10000c45 	stb	zero,49(r2)
    if (OSLockNesting < 255u) {                         /* Make sure we don't context switch           */
   175a8:	008000b4 	movhi	r2,2
   175ac:	10835604 	addi	r2,r2,3416
   175b0:	10800003 	ldbu	r2,0(r2)
   175b4:	10803fcc 	andi	r2,r2,255
   175b8:	10803fe0 	cmpeqi	r2,r2,255
   175bc:	1000081e 	bne	r2,zero,175e0 <OSTaskDel+0x260>
        OSLockNesting++;
   175c0:	008000b4 	movhi	r2,2
   175c4:	10835604 	addi	r2,r2,3416
   175c8:	10800003 	ldbu	r2,0(r2)
   175cc:	10800044 	addi	r2,r2,1
   175d0:	1007883a 	mov	r3,r2
   175d4:	008000b4 	movhi	r2,2
   175d8:	10835604 	addi	r2,r2,3416
   175dc:	10c00005 	stb	r3,0(r2)
   175e0:	e0bff617 	ldw	r2,-40(fp)
   175e4:	e0bffc15 	stw	r2,-16(fp)
   175e8:	e0bffc17 	ldw	r2,-16(fp)
   175ec:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();                                 /* Enabling INT. ignores next instruc.         */
    OS_Dummy();                                         /* ... Dummy ensures that INTs will be         */
   175f0:	0010fc00 	call	10fc0 <OS_Dummy>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   175f4:	0005303a 	rdctl	r2,status
   175f8:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   175fc:	e0fffd17 	ldw	r3,-12(fp)
   17600:	00bfff84 	movi	r2,-2
   17604:	1884703a 	and	r2,r3,r2
   17608:	1001703a 	wrctl	status,r2
  
  return context;
   1760c:	e0bffd17 	ldw	r2,-12(fp)
    OS_ENTER_CRITICAL();                                /* ... disabled HERE!                          */
   17610:	e0bff615 	stw	r2,-40(fp)
    if (OSLockNesting > 0) {                            /* Remove context switch lock                  */
   17614:	008000b4 	movhi	r2,2
   17618:	10835604 	addi	r2,r2,3416
   1761c:	10800003 	ldbu	r2,0(r2)
   17620:	10803fcc 	andi	r2,r2,255
   17624:	10000826 	beq	r2,zero,17648 <OSTaskDel+0x2c8>
        OSLockNesting--;
   17628:	008000b4 	movhi	r2,2
   1762c:	10835604 	addi	r2,r2,3416
   17630:	10800003 	ldbu	r2,0(r2)
   17634:	10bfffc4 	addi	r2,r2,-1
   17638:	1007883a 	mov	r3,r2
   1763c:	008000b4 	movhi	r2,2
   17640:	10835604 	addi	r2,r2,3416
   17644:	10c00005 	stb	r3,0(r2)
    }
    OSTaskDelHook(ptcb);                                /* Call user defined hook                      */
   17648:	e13ff717 	ldw	r4,-36(fp)
   1764c:	001be480 	call	1be48 <OSTaskDelHook>
    OSTaskCtr--;                                        /* One less task being managed                 */
   17650:	008000b4 	movhi	r2,2
   17654:	10835e44 	addi	r2,r2,3449
   17658:	10800003 	ldbu	r2,0(r2)
   1765c:	10bfffc4 	addi	r2,r2,-1
   17660:	1007883a 	mov	r3,r2
   17664:	008000b4 	movhi	r2,2
   17668:	10835e44 	addi	r2,r2,3449
   1766c:	10c00005 	stb	r3,0(r2)
    OSTCBPrioTbl[prio] = (OS_TCB *)0;                   /* Clear old priority entry                    */
   17670:	e0ffff03 	ldbu	r3,-4(fp)
   17674:	008000f4 	movhi	r2,3
   17678:	1081e004 	addi	r2,r2,1920
   1767c:	18c7883a 	add	r3,r3,r3
   17680:	18c7883a 	add	r3,r3,r3
   17684:	10c5883a 	add	r2,r2,r3
   17688:	10000015 	stw	zero,0(r2)
    if (ptcb->OSTCBPrev == (OS_TCB *)0) {               /* Remove from TCB chain                       */
   1768c:	e0bff717 	ldw	r2,-36(fp)
   17690:	10800617 	ldw	r2,24(r2)
   17694:	1000091e 	bne	r2,zero,176bc <OSTaskDel+0x33c>
        ptcb->OSTCBNext->OSTCBPrev = (OS_TCB *)0;
   17698:	e0bff717 	ldw	r2,-36(fp)
   1769c:	10800517 	ldw	r2,20(r2)
   176a0:	10000615 	stw	zero,24(r2)
        OSTCBList                  = ptcb->OSTCBNext;
   176a4:	e0bff717 	ldw	r2,-36(fp)
   176a8:	10c00517 	ldw	r3,20(r2)
   176ac:	008000b4 	movhi	r2,2
   176b0:	10835904 	addi	r2,r2,3428
   176b4:	10c00015 	stw	r3,0(r2)
   176b8:	00000a06 	br	176e4 <OSTaskDel+0x364>
    } else {
        ptcb->OSTCBPrev->OSTCBNext = ptcb->OSTCBNext;
   176bc:	e0bff717 	ldw	r2,-36(fp)
   176c0:	10800617 	ldw	r2,24(r2)
   176c4:	e0fff717 	ldw	r3,-36(fp)
   176c8:	18c00517 	ldw	r3,20(r3)
   176cc:	10c00515 	stw	r3,20(r2)
        ptcb->OSTCBNext->OSTCBPrev = ptcb->OSTCBPrev;
   176d0:	e0bff717 	ldw	r2,-36(fp)
   176d4:	10800517 	ldw	r2,20(r2)
   176d8:	e0fff717 	ldw	r3,-36(fp)
   176dc:	18c00617 	ldw	r3,24(r3)
   176e0:	10c00615 	stw	r3,24(r2)
    }
    ptcb->OSTCBNext   = OSTCBFreeList;                  /* Return TCB to free TCB list                 */
   176e4:	008000b4 	movhi	r2,2
   176e8:	10835d04 	addi	r2,r2,3444
   176ec:	10c00017 	ldw	r3,0(r2)
   176f0:	e0bff717 	ldw	r2,-36(fp)
   176f4:	10c00515 	stw	r3,20(r2)
    OSTCBFreeList     = ptcb;
   176f8:	008000b4 	movhi	r2,2
   176fc:	10835d04 	addi	r2,r2,3444
   17700:	e0fff717 	ldw	r3,-36(fp)
   17704:	10c00015 	stw	r3,0(r2)
#if OS_TASK_NAME_SIZE > 1
    ptcb->OSTCBTaskName[0] = '?';                       /* Unknown name                                */
   17708:	e0bff717 	ldw	r2,-36(fp)
   1770c:	00c00fc4 	movi	r3,63
   17710:	10c01305 	stb	r3,76(r2)
    ptcb->OSTCBTaskName[1] = OS_ASCII_NUL;
   17714:	e0bff717 	ldw	r2,-36(fp)
   17718:	10001345 	stb	zero,77(r2)
   1771c:	e0bff617 	ldw	r2,-40(fp)
   17720:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   17724:	e0bffe17 	ldw	r2,-8(fp)
   17728:	1001703a 	wrctl	status,r2
#endif
    OS_EXIT_CRITICAL();
    if (OSRunning == OS_TRUE) {
   1772c:	008000b4 	movhi	r2,2
   17730:	10835644 	addi	r2,r2,3417
   17734:	10800003 	ldbu	r2,0(r2)
   17738:	10803fcc 	andi	r2,r2,255
   1773c:	10800058 	cmpnei	r2,r2,1
   17740:	1000011e 	bne	r2,zero,17748 <OSTaskDel+0x3c8>
        OS_Sched();                                     /* Find new highest priority task              */
   17744:	00119f40 	call	119f4 <OS_Sched>
    }
    return (OS_ERR_NONE);
   17748:	0005883a 	mov	r2,zero
}
   1774c:	e037883a 	mov	sp,fp
   17750:	dfc00117 	ldw	ra,4(sp)
   17754:	df000017 	ldw	fp,0(sp)
   17758:	dec00204 	addi	sp,sp,8
   1775c:	f800283a 	ret

00017760 <OSTaskDelReq>:
*********************************************************************************************************
*/
/*$PAGE*/
#if OS_TASK_DEL_EN > 0
INT8U  OSTaskDelReq (INT8U prio)
{
   17760:	defff504 	addi	sp,sp,-44
   17764:	df000a15 	stw	fp,40(sp)
   17768:	df000a04 	addi	fp,sp,40
   1776c:	2005883a 	mov	r2,r4
   17770:	e0bfff05 	stb	r2,-4(fp)
    INT8U      stat;
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   17774:	e03ff615 	stw	zero,-40(fp)
#endif



    if (prio == OS_TASK_IDLE_PRIO) {                            /* Not allowed to delete idle task     */
   17778:	e0bfff03 	ldbu	r2,-4(fp)
   1777c:	10800518 	cmpnei	r2,r2,20
   17780:	1000021e 	bne	r2,zero,1778c <OSTaskDelReq+0x2c>
        return (OS_ERR_TASK_DEL_IDLE);
   17784:	00800f84 	movi	r2,62
   17788:	00004706 	br	178a8 <OSTaskDelReq+0x148>
    }
#if OS_ARG_CHK_EN > 0
    if (prio >= OS_LOWEST_PRIO) {                               /* Task priority valid ?               */
   1778c:	e0bfff03 	ldbu	r2,-4(fp)
   17790:	10800530 	cmpltui	r2,r2,20
   17794:	1000051e 	bne	r2,zero,177ac <OSTaskDelReq+0x4c>
        if (prio != OS_PRIO_SELF) {
   17798:	e0bfff03 	ldbu	r2,-4(fp)
   1779c:	10803fe0 	cmpeqi	r2,r2,255
   177a0:	1000021e 	bne	r2,zero,177ac <OSTaskDelReq+0x4c>
            return (OS_ERR_PRIO_INVALID);
   177a4:	00800a84 	movi	r2,42
   177a8:	00003f06 	br	178a8 <OSTaskDelReq+0x148>
        }
    }
#endif
    if (prio == OS_PRIO_SELF) {                                 /* See if a task is requesting to ...  */
   177ac:	e0bfff03 	ldbu	r2,-4(fp)
   177b0:	10803fd8 	cmpnei	r2,r2,255
   177b4:	1000131e 	bne	r2,zero,17804 <OSTaskDelReq+0xa4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   177b8:	0005303a 	rdctl	r2,status
   177bc:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   177c0:	e0fff917 	ldw	r3,-28(fp)
   177c4:	00bfff84 	movi	r2,-2
   177c8:	1884703a 	and	r2,r3,r2
   177cc:	1001703a 	wrctl	status,r2
  
  return context;
   177d0:	e0bff917 	ldw	r2,-28(fp)
        OS_ENTER_CRITICAL();                                    /* ... this task to delete itself      */
   177d4:	e0bff615 	stw	r2,-40(fp)
        stat = OSTCBCur->OSTCBDelReq;                           /* Return request status to caller     */
   177d8:	008000b4 	movhi	r2,2
   177dc:	10836504 	addi	r2,r2,3476
   177e0:	10800017 	ldw	r2,0(r2)
   177e4:	10800dc3 	ldbu	r2,55(r2)
   177e8:	e0bff705 	stb	r2,-36(fp)
   177ec:	e0bff617 	ldw	r2,-40(fp)
   177f0:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   177f4:	e0bffa17 	ldw	r2,-24(fp)
   177f8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (stat);
   177fc:	e0bff703 	ldbu	r2,-36(fp)
   17800:	00002906 	br	178a8 <OSTaskDelReq+0x148>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   17804:	0005303a 	rdctl	r2,status
   17808:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1780c:	e0fffb17 	ldw	r3,-20(fp)
   17810:	00bfff84 	movi	r2,-2
   17814:	1884703a 	and	r2,r3,r2
   17818:	1001703a 	wrctl	status,r2
  
  return context;
   1781c:	e0bffb17 	ldw	r2,-20(fp)
    }
    OS_ENTER_CRITICAL();
   17820:	e0bff615 	stw	r2,-40(fp)
    ptcb = OSTCBPrioTbl[prio];
   17824:	e0ffff03 	ldbu	r3,-4(fp)
   17828:	008000f4 	movhi	r2,3
   1782c:	1081e004 	addi	r2,r2,1920
   17830:	18c7883a 	add	r3,r3,r3
   17834:	18c7883a 	add	r3,r3,r3
   17838:	10c5883a 	add	r2,r2,r3
   1783c:	10800017 	ldw	r2,0(r2)
   17840:	e0bff815 	stw	r2,-32(fp)
    if (ptcb == (OS_TCB *)0) {                                  /* Task to delete must exist           */
   17844:	e0bff817 	ldw	r2,-32(fp)
   17848:	1000061e 	bne	r2,zero,17864 <OSTaskDelReq+0x104>
   1784c:	e0bff617 	ldw	r2,-40(fp)
   17850:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   17854:	e0bffc17 	ldw	r2,-16(fp)
   17858:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);                         /* Task must already be deleted        */
   1785c:	008010c4 	movi	r2,67
   17860:	00001106 	br	178a8 <OSTaskDelReq+0x148>
    }
    if (ptcb == OS_TCB_RESERVED) {                              /* Must NOT be assigned to a Mutex     */
   17864:	e0bff817 	ldw	r2,-32(fp)
   17868:	10800058 	cmpnei	r2,r2,1
   1786c:	1000061e 	bne	r2,zero,17888 <OSTaskDelReq+0x128>
   17870:	e0bff617 	ldw	r2,-40(fp)
   17874:	e0bffd15 	stw	r2,-12(fp)
   17878:	e0bffd17 	ldw	r2,-12(fp)
   1787c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_DEL);
   17880:	00800f44 	movi	r2,61
   17884:	00000806 	br	178a8 <OSTaskDelReq+0x148>
    }
    ptcb->OSTCBDelReq = OS_ERR_TASK_DEL_REQ;                    /* Set flag indicating task to be DEL. */
   17888:	e0bff817 	ldw	r2,-32(fp)
   1788c:	00c00fc4 	movi	r3,63
   17890:	10c00dc5 	stb	r3,55(r2)
   17894:	e0bff617 	ldw	r2,-40(fp)
   17898:	e0bffe15 	stw	r2,-8(fp)
   1789c:	e0bffe17 	ldw	r2,-8(fp)
   178a0:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
   178a4:	0005883a 	mov	r2,zero
}
   178a8:	e037883a 	mov	sp,fp
   178ac:	df000017 	ldw	fp,0(sp)
   178b0:	dec00104 	addi	sp,sp,4
   178b4:	f800283a 	ret

000178b8 <OSTaskNameGet>:
*********************************************************************************************************
*/

#if OS_TASK_NAME_SIZE > 1
INT8U  OSTaskNameGet (INT8U prio, INT8U *pname, INT8U *perr)
{
   178b8:	defff404 	addi	sp,sp,-48
   178bc:	dfc00b15 	stw	ra,44(sp)
   178c0:	df000a15 	stw	fp,40(sp)
   178c4:	df000a04 	addi	fp,sp,40
   178c8:	2005883a 	mov	r2,r4
   178cc:	e17ffe15 	stw	r5,-8(fp)
   178d0:	e1bfff15 	stw	r6,-4(fp)
   178d4:	e0bffd05 	stb	r2,-12(fp)
    OS_TCB    *ptcb;
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                              /* Allocate storage for CPU status register   */
    OS_CPU_SR  cpu_sr = 0;
   178d8:	e03ff615 	stw	zero,-40(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                            /* Validate 'perr'                            */
   178dc:	e0bfff17 	ldw	r2,-4(fp)
   178e0:	1000021e 	bne	r2,zero,178ec <OSTaskNameGet+0x34>
        return (0);
   178e4:	0005883a 	mov	r2,zero
   178e8:	00005806 	br	17a4c <OSTaskNameGet+0x194>
    }
    if (prio > OS_LOWEST_PRIO) {                         /* Task priority valid ?                      */
   178ec:	e0bffd03 	ldbu	r2,-12(fp)
   178f0:	10800570 	cmpltui	r2,r2,21
   178f4:	1000081e 	bne	r2,zero,17918 <OSTaskNameGet+0x60>
        if (prio != OS_PRIO_SELF) {
   178f8:	e0bffd03 	ldbu	r2,-12(fp)
   178fc:	10803fe0 	cmpeqi	r2,r2,255
   17900:	1000051e 	bne	r2,zero,17918 <OSTaskNameGet+0x60>
            *perr = OS_ERR_PRIO_INVALID;                 /* No                                         */
   17904:	e0bfff17 	ldw	r2,-4(fp)
   17908:	00c00a84 	movi	r3,42
   1790c:	10c00005 	stb	r3,0(r2)
            return (0);
   17910:	0005883a 	mov	r2,zero
   17914:	00004d06 	br	17a4c <OSTaskNameGet+0x194>
        }
    }
    if (pname == (INT8U *)0) {                           /* Is 'pname' a NULL pointer?                 */
   17918:	e0bffe17 	ldw	r2,-8(fp)
   1791c:	1000051e 	bne	r2,zero,17934 <OSTaskNameGet+0x7c>
        *perr = OS_ERR_PNAME_NULL;                       /* Yes                                        */
   17920:	e0bfff17 	ldw	r2,-4(fp)
   17924:	00c00304 	movi	r3,12
   17928:	10c00005 	stb	r3,0(r2)
        return (0);
   1792c:	0005883a 	mov	r2,zero
   17930:	00004606 	br	17a4c <OSTaskNameGet+0x194>
    }
#endif
    if (OSIntNesting > 0) {                              /* See if trying to call from an ISR          */
   17934:	008000b4 	movhi	r2,2
   17938:	10836404 	addi	r2,r2,3472
   1793c:	10800003 	ldbu	r2,0(r2)
   17940:	10803fcc 	andi	r2,r2,255
   17944:	10000526 	beq	r2,zero,1795c <OSTaskNameGet+0xa4>
        *perr = OS_ERR_NAME_GET_ISR;
   17948:	e0bfff17 	ldw	r2,-4(fp)
   1794c:	00c00444 	movi	r3,17
   17950:	10c00005 	stb	r3,0(r2)
        return (0);
   17954:	0005883a 	mov	r2,zero
   17958:	00003c06 	br	17a4c <OSTaskNameGet+0x194>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1795c:	0005303a 	rdctl	r2,status
   17960:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   17964:	e0fff917 	ldw	r3,-28(fp)
   17968:	00bfff84 	movi	r2,-2
   1796c:	1884703a 	and	r2,r3,r2
   17970:	1001703a 	wrctl	status,r2
  
  return context;
   17974:	e0bff917 	ldw	r2,-28(fp)
    }
    OS_ENTER_CRITICAL();
   17978:	e0bff615 	stw	r2,-40(fp)
    if (prio == OS_PRIO_SELF) {                          /* See if caller desires it's own name        */
   1797c:	e0bffd03 	ldbu	r2,-12(fp)
   17980:	10803fd8 	cmpnei	r2,r2,255
   17984:	1000051e 	bne	r2,zero,1799c <OSTaskNameGet+0xe4>
        prio = OSTCBCur->OSTCBPrio;
   17988:	008000b4 	movhi	r2,2
   1798c:	10836504 	addi	r2,r2,3476
   17990:	10800017 	ldw	r2,0(r2)
   17994:	10800c83 	ldbu	r2,50(r2)
   17998:	e0bffd05 	stb	r2,-12(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
   1799c:	e0fffd03 	ldbu	r3,-12(fp)
   179a0:	008000f4 	movhi	r2,3
   179a4:	1081e004 	addi	r2,r2,1920
   179a8:	18c7883a 	add	r3,r3,r3
   179ac:	18c7883a 	add	r3,r3,r3
   179b0:	10c5883a 	add	r2,r2,r3
   179b4:	10800017 	ldw	r2,0(r2)
   179b8:	e0bff715 	stw	r2,-36(fp)
    if (ptcb == (OS_TCB *)0) {                           /* Does task exist?                           */
   179bc:	e0bff717 	ldw	r2,-36(fp)
   179c0:	1000091e 	bne	r2,zero,179e8 <OSTaskNameGet+0x130>
   179c4:	e0bff617 	ldw	r2,-40(fp)
   179c8:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   179cc:	e0bffa17 	ldw	r2,-24(fp)
   179d0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                              /* No                                         */
        *perr = OS_ERR_TASK_NOT_EXIST;
   179d4:	e0bfff17 	ldw	r2,-4(fp)
   179d8:	00c010c4 	movi	r3,67
   179dc:	10c00005 	stb	r3,0(r2)
        return (0);
   179e0:	0005883a 	mov	r2,zero
   179e4:	00001906 	br	17a4c <OSTaskNameGet+0x194>
    }
    if (ptcb == OS_TCB_RESERVED) {                       /* Task assigned to a Mutex?                  */
   179e8:	e0bff717 	ldw	r2,-36(fp)
   179ec:	10800058 	cmpnei	r2,r2,1
   179f0:	1000091e 	bne	r2,zero,17a18 <OSTaskNameGet+0x160>
   179f4:	e0bff617 	ldw	r2,-40(fp)
   179f8:	e0bffb15 	stw	r2,-20(fp)
   179fc:	e0bffb17 	ldw	r2,-20(fp)
   17a00:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                              /* Yes                                        */
        *perr = OS_ERR_TASK_NOT_EXIST;
   17a04:	e0bfff17 	ldw	r2,-4(fp)
   17a08:	00c010c4 	movi	r3,67
   17a0c:	10c00005 	stb	r3,0(r2)
        return (0);
   17a10:	0005883a 	mov	r2,zero
   17a14:	00000d06 	br	17a4c <OSTaskNameGet+0x194>
    }
    len   = OS_StrCopy(pname, ptcb->OSTCBTaskName);      /* Yes, copy name from TCB                    */
   17a18:	e0bff717 	ldw	r2,-36(fp)
   17a1c:	10801304 	addi	r2,r2,76
   17a20:	e13ffe17 	ldw	r4,-8(fp)
   17a24:	100b883a 	mov	r5,r2
   17a28:	0011b300 	call	11b30 <OS_StrCopy>
   17a2c:	e0bff805 	stb	r2,-32(fp)
   17a30:	e0bff617 	ldw	r2,-40(fp)
   17a34:	e0bffc15 	stw	r2,-16(fp)
   17a38:	e0bffc17 	ldw	r2,-16(fp)
   17a3c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
   17a40:	e0bfff17 	ldw	r2,-4(fp)
   17a44:	10000005 	stb	zero,0(r2)
    return (len);
   17a48:	e0bff803 	ldbu	r2,-32(fp)
}
   17a4c:	e037883a 	mov	sp,fp
   17a50:	dfc00117 	ldw	ra,4(sp)
   17a54:	df000017 	ldw	fp,0(sp)
   17a58:	dec00204 	addi	sp,sp,8
   17a5c:	f800283a 	ret

00017a60 <OSTaskNameSet>:
* Returns    : None
*********************************************************************************************************
*/
#if OS_TASK_NAME_SIZE > 1
void  OSTaskNameSet (INT8U prio, INT8U *pname, INT8U *perr)
{
   17a60:	defff304 	addi	sp,sp,-52
   17a64:	dfc00c15 	stw	ra,48(sp)
   17a68:	df000b15 	stw	fp,44(sp)
   17a6c:	df000b04 	addi	fp,sp,44
   17a70:	2005883a 	mov	r2,r4
   17a74:	e17ffe15 	stw	r5,-8(fp)
   17a78:	e1bfff15 	stw	r6,-4(fp)
   17a7c:	e0bffd05 	stb	r2,-12(fp)
    INT8U      len;
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                          /* Allocate storage for CPU status register       */
    OS_CPU_SR  cpu_sr = 0;
   17a80:	e03ff515 	stw	zero,-44(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                        /* Validate 'perr'                                */
   17a84:	e0bfff17 	ldw	r2,-4(fp)
   17a88:	1000011e 	bne	r2,zero,17a90 <OSTaskNameSet+0x30>
        return;
   17a8c:	00005f06 	br	17c0c <OSTaskNameSet+0x1ac>
    }
    if (prio > OS_LOWEST_PRIO) {                     /* Task priority valid ?                          */
   17a90:	e0bffd03 	ldbu	r2,-12(fp)
   17a94:	10800570 	cmpltui	r2,r2,21
   17a98:	1000071e 	bne	r2,zero,17ab8 <OSTaskNameSet+0x58>
        if (prio != OS_PRIO_SELF) {
   17a9c:	e0bffd03 	ldbu	r2,-12(fp)
   17aa0:	10803fe0 	cmpeqi	r2,r2,255
   17aa4:	1000041e 	bne	r2,zero,17ab8 <OSTaskNameSet+0x58>
            *perr = OS_ERR_PRIO_INVALID;             /* No                                             */
   17aa8:	e0bfff17 	ldw	r2,-4(fp)
   17aac:	00c00a84 	movi	r3,42
   17ab0:	10c00005 	stb	r3,0(r2)
            return;
   17ab4:	00005506 	br	17c0c <OSTaskNameSet+0x1ac>
        }
    }
    if (pname == (INT8U *)0) {                       /* Is 'pname' a NULL pointer?                     */
   17ab8:	e0bffe17 	ldw	r2,-8(fp)
   17abc:	1000041e 	bne	r2,zero,17ad0 <OSTaskNameSet+0x70>
        *perr = OS_ERR_PNAME_NULL;                   /* Yes                                            */
   17ac0:	e0bfff17 	ldw	r2,-4(fp)
   17ac4:	00c00304 	movi	r3,12
   17ac8:	10c00005 	stb	r3,0(r2)
        return;
   17acc:	00004f06 	br	17c0c <OSTaskNameSet+0x1ac>
    }
#endif
    if (OSIntNesting > 0) {                          /* See if trying to call from an ISR              */
   17ad0:	008000b4 	movhi	r2,2
   17ad4:	10836404 	addi	r2,r2,3472
   17ad8:	10800003 	ldbu	r2,0(r2)
   17adc:	10803fcc 	andi	r2,r2,255
   17ae0:	10000426 	beq	r2,zero,17af4 <OSTaskNameSet+0x94>
        *perr = OS_ERR_NAME_SET_ISR;
   17ae4:	e0bfff17 	ldw	r2,-4(fp)
   17ae8:	00c00484 	movi	r3,18
   17aec:	10c00005 	stb	r3,0(r2)
        return;
   17af0:	00004606 	br	17c0c <OSTaskNameSet+0x1ac>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   17af4:	0005303a 	rdctl	r2,status
   17af8:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   17afc:	e0fff817 	ldw	r3,-32(fp)
   17b00:	00bfff84 	movi	r2,-2
   17b04:	1884703a 	and	r2,r3,r2
   17b08:	1001703a 	wrctl	status,r2
  
  return context;
   17b0c:	e0bff817 	ldw	r2,-32(fp)
    }
    OS_ENTER_CRITICAL();
   17b10:	e0bff515 	stw	r2,-44(fp)
    if (prio == OS_PRIO_SELF) {                      /* See if caller desires to set it's own name     */
   17b14:	e0bffd03 	ldbu	r2,-12(fp)
   17b18:	10803fd8 	cmpnei	r2,r2,255
   17b1c:	1000051e 	bne	r2,zero,17b34 <OSTaskNameSet+0xd4>
        prio = OSTCBCur->OSTCBPrio;
   17b20:	008000b4 	movhi	r2,2
   17b24:	10836504 	addi	r2,r2,3476
   17b28:	10800017 	ldw	r2,0(r2)
   17b2c:	10800c83 	ldbu	r2,50(r2)
   17b30:	e0bffd05 	stb	r2,-12(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
   17b34:	e0fffd03 	ldbu	r3,-12(fp)
   17b38:	008000f4 	movhi	r2,3
   17b3c:	1081e004 	addi	r2,r2,1920
   17b40:	18c7883a 	add	r3,r3,r3
   17b44:	18c7883a 	add	r3,r3,r3
   17b48:	10c5883a 	add	r2,r2,r3
   17b4c:	10800017 	ldw	r2,0(r2)
   17b50:	e0bff615 	stw	r2,-40(fp)
    if (ptcb == (OS_TCB *)0) {                       /* Does task exist?                               */
   17b54:	e0bff617 	ldw	r2,-40(fp)
   17b58:	1000081e 	bne	r2,zero,17b7c <OSTaskNameSet+0x11c>
   17b5c:	e0bff517 	ldw	r2,-44(fp)
   17b60:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   17b64:	e0bff917 	ldw	r2,-28(fp)
   17b68:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                          /* No                                             */
        *perr = OS_ERR_TASK_NOT_EXIST;
   17b6c:	e0bfff17 	ldw	r2,-4(fp)
   17b70:	00c010c4 	movi	r3,67
   17b74:	10c00005 	stb	r3,0(r2)
        return;
   17b78:	00002406 	br	17c0c <OSTaskNameSet+0x1ac>
    }
    if (ptcb == OS_TCB_RESERVED) {                   /* Task assigned to a Mutex?                      */
   17b7c:	e0bff617 	ldw	r2,-40(fp)
   17b80:	10800058 	cmpnei	r2,r2,1
   17b84:	1000081e 	bne	r2,zero,17ba8 <OSTaskNameSet+0x148>
   17b88:	e0bff517 	ldw	r2,-44(fp)
   17b8c:	e0bffa15 	stw	r2,-24(fp)
   17b90:	e0bffa17 	ldw	r2,-24(fp)
   17b94:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                          /* Yes                                            */
        *perr = OS_ERR_TASK_NOT_EXIST;
   17b98:	e0bfff17 	ldw	r2,-4(fp)
   17b9c:	00c010c4 	movi	r3,67
   17ba0:	10c00005 	stb	r3,0(r2)
        return;
   17ba4:	00001906 	br	17c0c <OSTaskNameSet+0x1ac>
    }
    len = OS_StrLen(pname);                          /* Yes, Can we fit the string in the TCB?         */
   17ba8:	e13ffe17 	ldw	r4,-8(fp)
   17bac:	0011ba40 	call	11ba4 <OS_StrLen>
   17bb0:	e0bff705 	stb	r2,-36(fp)
    if (len > (OS_TASK_NAME_SIZE - 1)) {             /*      No                                        */
   17bb4:	e0bff703 	ldbu	r2,-36(fp)
   17bb8:	10800830 	cmpltui	r2,r2,32
   17bbc:	1000081e 	bne	r2,zero,17be0 <OSTaskNameSet+0x180>
   17bc0:	e0bff517 	ldw	r2,-44(fp)
   17bc4:	e0bffb15 	stw	r2,-20(fp)
   17bc8:	e0bffb17 	ldw	r2,-20(fp)
   17bcc:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_TASK_NAME_TOO_LONG;
   17bd0:	e0bfff17 	ldw	r2,-4(fp)
   17bd4:	00c01044 	movi	r3,65
   17bd8:	10c00005 	stb	r3,0(r2)
        return;
   17bdc:	00000b06 	br	17c0c <OSTaskNameSet+0x1ac>
    }
    (void)OS_StrCopy(ptcb->OSTCBTaskName, pname);    /*      Yes, copy to TCB                          */
   17be0:	e0bff617 	ldw	r2,-40(fp)
   17be4:	10801304 	addi	r2,r2,76
   17be8:	1009883a 	mov	r4,r2
   17bec:	e17ffe17 	ldw	r5,-8(fp)
   17bf0:	0011b300 	call	11b30 <OS_StrCopy>
   17bf4:	e0bff517 	ldw	r2,-44(fp)
   17bf8:	e0bffc15 	stw	r2,-16(fp)
   17bfc:	e0bffc17 	ldw	r2,-16(fp)
   17c00:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
   17c04:	e0bfff17 	ldw	r2,-4(fp)
   17c08:	10000005 	stb	zero,0(r2)
}
   17c0c:	e037883a 	mov	sp,fp
   17c10:	dfc00117 	ldw	ra,4(sp)
   17c14:	df000017 	ldw	fp,0(sp)
   17c18:	dec00204 	addi	sp,sp,8
   17c1c:	f800283a 	ret

00017c20 <OSTaskResume>:
*********************************************************************************************************
*/

#if OS_TASK_SUSPEND_EN > 0
INT8U  OSTaskResume (INT8U prio)
{
   17c20:	defff404 	addi	sp,sp,-48
   17c24:	dfc00b15 	stw	ra,44(sp)
   17c28:	df000a15 	stw	fp,40(sp)
   17c2c:	df000a04 	addi	fp,sp,40
   17c30:	2005883a 	mov	r2,r4
   17c34:	e0bfff05 	stb	r2,-4(fp)
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                                   /* Storage for CPU status register       */
    OS_CPU_SR  cpu_sr = 0;
   17c38:	e03ff615 	stw	zero,-40(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio >= OS_LOWEST_PRIO) {                             /* Make sure task priority is valid      */
   17c3c:	e0bfff03 	ldbu	r2,-4(fp)
   17c40:	10800530 	cmpltui	r2,r2,20
   17c44:	1000021e 	bne	r2,zero,17c50 <OSTaskResume+0x30>
        return (OS_ERR_PRIO_INVALID);
   17c48:	00800a84 	movi	r2,42
   17c4c:	00006d06 	br	17e04 <OSTaskResume+0x1e4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   17c50:	0005303a 	rdctl	r2,status
   17c54:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   17c58:	e0fff817 	ldw	r3,-32(fp)
   17c5c:	00bfff84 	movi	r2,-2
   17c60:	1884703a 	and	r2,r3,r2
   17c64:	1001703a 	wrctl	status,r2
  
  return context;
   17c68:	e0bff817 	ldw	r2,-32(fp)
    }
#endif
    OS_ENTER_CRITICAL();
   17c6c:	e0bff615 	stw	r2,-40(fp)
    ptcb = OSTCBPrioTbl[prio];
   17c70:	e0ffff03 	ldbu	r3,-4(fp)
   17c74:	008000f4 	movhi	r2,3
   17c78:	1081e004 	addi	r2,r2,1920
   17c7c:	18c7883a 	add	r3,r3,r3
   17c80:	18c7883a 	add	r3,r3,r3
   17c84:	10c5883a 	add	r2,r2,r3
   17c88:	10800017 	ldw	r2,0(r2)
   17c8c:	e0bff715 	stw	r2,-36(fp)
    if (ptcb == (OS_TCB *)0) {                                /* Task to suspend must exist            */
   17c90:	e0bff717 	ldw	r2,-36(fp)
   17c94:	1000061e 	bne	r2,zero,17cb0 <OSTaskResume+0x90>
   17c98:	e0bff617 	ldw	r2,-40(fp)
   17c9c:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   17ca0:	e0bff917 	ldw	r2,-28(fp)
   17ca4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_RESUME_PRIO);
   17ca8:	00801184 	movi	r2,70
   17cac:	00005506 	br	17e04 <OSTaskResume+0x1e4>
    }
    if (ptcb == OS_TCB_RESERVED) {                            /* See if assigned to Mutex              */
   17cb0:	e0bff717 	ldw	r2,-36(fp)
   17cb4:	10800058 	cmpnei	r2,r2,1
   17cb8:	1000061e 	bne	r2,zero,17cd4 <OSTaskResume+0xb4>
   17cbc:	e0bff617 	ldw	r2,-40(fp)
   17cc0:	e0bffa15 	stw	r2,-24(fp)
   17cc4:	e0bffa17 	ldw	r2,-24(fp)
   17cc8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
   17ccc:	008010c4 	movi	r2,67
   17cd0:	00004c06 	br	17e04 <OSTaskResume+0x1e4>
    }
    if ((ptcb->OSTCBStat & OS_STAT_SUSPEND) != OS_STAT_RDY) { /* Task must be suspended                */
   17cd4:	e0bff717 	ldw	r2,-36(fp)
   17cd8:	10800c03 	ldbu	r2,48(r2)
   17cdc:	10803fcc 	andi	r2,r2,255
   17ce0:	1080020c 	andi	r2,r2,8
   17ce4:	10004226 	beq	r2,zero,17df0 <OSTaskResume+0x1d0>
        ptcb->OSTCBStat &= ~(INT8U)OS_STAT_SUSPEND;           /* Remove suspension                     */
   17ce8:	e0bff717 	ldw	r2,-36(fp)
   17cec:	10c00c03 	ldbu	r3,48(r2)
   17cf0:	00bffdc4 	movi	r2,-9
   17cf4:	1884703a 	and	r2,r3,r2
   17cf8:	1007883a 	mov	r3,r2
   17cfc:	e0bff717 	ldw	r2,-36(fp)
   17d00:	10c00c05 	stb	r3,48(r2)
        if (ptcb->OSTCBStat == OS_STAT_RDY) {                 /* See if task is now ready              */
   17d04:	e0bff717 	ldw	r2,-36(fp)
   17d08:	10800c03 	ldbu	r2,48(r2)
   17d0c:	10803fcc 	andi	r2,r2,255
   17d10:	1000311e 	bne	r2,zero,17dd8 <OSTaskResume+0x1b8>
            if (ptcb->OSTCBDly == 0) {
   17d14:	e0bff717 	ldw	r2,-36(fp)
   17d18:	10800b8b 	ldhu	r2,46(r2)
   17d1c:	10bfffcc 	andi	r2,r2,65535
   17d20:	1000281e 	bne	r2,zero,17dc4 <OSTaskResume+0x1a4>
                OSRdyGrp               |= ptcb->OSTCBBitY;    /* Yes, Make task ready to run           */
   17d24:	e0bff717 	ldw	r2,-36(fp)
   17d28:	10c00d83 	ldbu	r3,54(r2)
   17d2c:	008000b4 	movhi	r2,2
   17d30:	10836204 	addi	r2,r2,3464
   17d34:	10800003 	ldbu	r2,0(r2)
   17d38:	1884b03a 	or	r2,r3,r2
   17d3c:	1007883a 	mov	r3,r2
   17d40:	008000b4 	movhi	r2,2
   17d44:	10836204 	addi	r2,r2,3464
   17d48:	10c00005 	stb	r3,0(r2)
                OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
   17d4c:	e0bff717 	ldw	r2,-36(fp)
   17d50:	10800d03 	ldbu	r2,52(r2)
   17d54:	10c03fcc 	andi	r3,r2,255
   17d58:	e0bff717 	ldw	r2,-36(fp)
   17d5c:	10800d03 	ldbu	r2,52(r2)
   17d60:	11003fcc 	andi	r4,r2,255
   17d64:	008000b4 	movhi	r2,2
   17d68:	10836244 	addi	r2,r2,3465
   17d6c:	1105883a 	add	r2,r2,r4
   17d70:	11000003 	ldbu	r4,0(r2)
   17d74:	e0bff717 	ldw	r2,-36(fp)
   17d78:	10800d43 	ldbu	r2,53(r2)
   17d7c:	2084b03a 	or	r2,r4,r2
   17d80:	1009883a 	mov	r4,r2
   17d84:	008000b4 	movhi	r2,2
   17d88:	10836244 	addi	r2,r2,3465
   17d8c:	10c5883a 	add	r2,r2,r3
   17d90:	11000005 	stb	r4,0(r2)
   17d94:	e0bff617 	ldw	r2,-40(fp)
   17d98:	e0bffb15 	stw	r2,-20(fp)
   17d9c:	e0bffb17 	ldw	r2,-20(fp)
   17da0:	1001703a 	wrctl	status,r2
                OS_EXIT_CRITICAL();
                if (OSRunning == OS_TRUE) {
   17da4:	008000b4 	movhi	r2,2
   17da8:	10835644 	addi	r2,r2,3417
   17dac:	10800003 	ldbu	r2,0(r2)
   17db0:	10803fcc 	andi	r2,r2,255
   17db4:	10800058 	cmpnei	r2,r2,1
   17db8:	10000b1e 	bne	r2,zero,17de8 <OSTaskResume+0x1c8>
                    OS_Sched();                               /* Find new highest priority task        */
   17dbc:	00119f40 	call	119f4 <OS_Sched>
   17dc0:	00000906 	br	17de8 <OSTaskResume+0x1c8>
   17dc4:	e0bff617 	ldw	r2,-40(fp)
   17dc8:	e0bffc15 	stw	r2,-16(fp)
   17dcc:	e0bffc17 	ldw	r2,-16(fp)
   17dd0:	1001703a 	wrctl	status,r2
   17dd4:	00000406 	br	17de8 <OSTaskResume+0x1c8>
   17dd8:	e0bff617 	ldw	r2,-40(fp)
   17ddc:	e0bffd15 	stw	r2,-12(fp)
   17de0:	e0bffd17 	ldw	r2,-12(fp)
   17de4:	1001703a 	wrctl	status,r2
                OS_EXIT_CRITICAL();
            }
        } else {                                              /* Must be pending on event              */
            OS_EXIT_CRITICAL();
        }
        return (OS_ERR_NONE);
   17de8:	0005883a 	mov	r2,zero
   17dec:	00000506 	br	17e04 <OSTaskResume+0x1e4>
   17df0:	e0bff617 	ldw	r2,-40(fp)
   17df4:	e0bffe15 	stw	r2,-8(fp)
   17df8:	e0bffe17 	ldw	r2,-8(fp)
   17dfc:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_TASK_NOT_SUSPENDED);
   17e00:	00801104 	movi	r2,68
}
   17e04:	e037883a 	mov	sp,fp
   17e08:	dfc00117 	ldw	ra,4(sp)
   17e0c:	df000017 	ldw	fp,0(sp)
   17e10:	dec00204 	addi	sp,sp,8
   17e14:	f800283a 	ret

00017e18 <OSTaskStkChk>:
*              OS_ERR_PDATA_NULL      if 'p_stk_data' is a NULL pointer
*********************************************************************************************************
*/
#if (OS_TASK_STAT_STK_CHK_EN > 0) && (OS_TASK_CREATE_EXT_EN > 0)
INT8U  OSTaskStkChk (INT8U prio, OS_STK_DATA *p_stk_data)
{
   17e18:	defff304 	addi	sp,sp,-52
   17e1c:	df000c15 	stw	fp,48(sp)
   17e20:	df000c04 	addi	fp,sp,48
   17e24:	2005883a 	mov	r2,r4
   17e28:	e17fff15 	stw	r5,-4(fp)
   17e2c:	e0bffe05 	stb	r2,-8(fp)
    OS_TCB    *ptcb;
    OS_STK    *pchk;
    INT32U     nfree;
    INT32U     size;
#if OS_CRITICAL_METHOD == 3                            /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
   17e30:	e03ff615 	stw	zero,-40(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio > OS_LOWEST_PRIO) {                       /* Make sure task priority is valid             */
   17e34:	e0bffe03 	ldbu	r2,-8(fp)
   17e38:	10800570 	cmpltui	r2,r2,21
   17e3c:	1000051e 	bne	r2,zero,17e54 <OSTaskStkChk+0x3c>
        if (prio != OS_PRIO_SELF) {
   17e40:	e0bffe03 	ldbu	r2,-8(fp)
   17e44:	10803fe0 	cmpeqi	r2,r2,255
   17e48:	1000021e 	bne	r2,zero,17e54 <OSTaskStkChk+0x3c>
            return (OS_ERR_PRIO_INVALID);
   17e4c:	00800a84 	movi	r2,42
   17e50:	00005f06 	br	17fd0 <OSTaskStkChk+0x1b8>
        }
    }
    if (p_stk_data == (OS_STK_DATA *)0) {              /* Validate 'p_stk_data'                        */
   17e54:	e0bfff17 	ldw	r2,-4(fp)
   17e58:	1000021e 	bne	r2,zero,17e64 <OSTaskStkChk+0x4c>
        return (OS_ERR_PDATA_NULL);
   17e5c:	00800244 	movi	r2,9
   17e60:	00005b06 	br	17fd0 <OSTaskStkChk+0x1b8>
    }
#endif
    p_stk_data->OSFree = 0;                            /* Assume failure, set to 0 size                */
   17e64:	e0bfff17 	ldw	r2,-4(fp)
   17e68:	10000015 	stw	zero,0(r2)
    p_stk_data->OSUsed = 0;
   17e6c:	e0bfff17 	ldw	r2,-4(fp)
   17e70:	10000115 	stw	zero,4(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   17e74:	0005303a 	rdctl	r2,status
   17e78:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   17e7c:	e0fff917 	ldw	r3,-28(fp)
   17e80:	00bfff84 	movi	r2,-2
   17e84:	1884703a 	and	r2,r3,r2
   17e88:	1001703a 	wrctl	status,r2
  
  return context;
   17e8c:	e0bff917 	ldw	r2,-28(fp)
    OS_ENTER_CRITICAL();
   17e90:	e0bff615 	stw	r2,-40(fp)
    if (prio == OS_PRIO_SELF) {                        /* See if check for SELF                        */
   17e94:	e0bffe03 	ldbu	r2,-8(fp)
   17e98:	10803fd8 	cmpnei	r2,r2,255
   17e9c:	1000051e 	bne	r2,zero,17eb4 <OSTaskStkChk+0x9c>
        prio = OSTCBCur->OSTCBPrio;
   17ea0:	008000b4 	movhi	r2,2
   17ea4:	10836504 	addi	r2,r2,3476
   17ea8:	10800017 	ldw	r2,0(r2)
   17eac:	10800c83 	ldbu	r2,50(r2)
   17eb0:	e0bffe05 	stb	r2,-8(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
   17eb4:	e0fffe03 	ldbu	r3,-8(fp)
   17eb8:	008000f4 	movhi	r2,3
   17ebc:	1081e004 	addi	r2,r2,1920
   17ec0:	18c7883a 	add	r3,r3,r3
   17ec4:	18c7883a 	add	r3,r3,r3
   17ec8:	10c5883a 	add	r2,r2,r3
   17ecc:	10800017 	ldw	r2,0(r2)
   17ed0:	e0bff715 	stw	r2,-36(fp)
    if (ptcb == (OS_TCB *)0) {                         /* Make sure task exist                         */
   17ed4:	e0bff717 	ldw	r2,-36(fp)
   17ed8:	1000061e 	bne	r2,zero,17ef4 <OSTaskStkChk+0xdc>
   17edc:	e0bff617 	ldw	r2,-40(fp)
   17ee0:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   17ee4:	e0bffa17 	ldw	r2,-24(fp)
   17ee8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
   17eec:	008010c4 	movi	r2,67
   17ef0:	00003706 	br	17fd0 <OSTaskStkChk+0x1b8>
    }
    if (ptcb == OS_TCB_RESERVED) {
   17ef4:	e0bff717 	ldw	r2,-36(fp)
   17ef8:	10800058 	cmpnei	r2,r2,1
   17efc:	1000061e 	bne	r2,zero,17f18 <OSTaskStkChk+0x100>
   17f00:	e0bff617 	ldw	r2,-40(fp)
   17f04:	e0bffb15 	stw	r2,-20(fp)
   17f08:	e0bffb17 	ldw	r2,-20(fp)
   17f0c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
   17f10:	008010c4 	movi	r2,67
   17f14:	00002e06 	br	17fd0 <OSTaskStkChk+0x1b8>
    }
    if ((ptcb->OSTCBOpt & OS_TASK_OPT_STK_CHK) == 0) { /* Make sure stack checking option is set       */
   17f18:	e0bff717 	ldw	r2,-36(fp)
   17f1c:	1080040b 	ldhu	r2,16(r2)
   17f20:	10bfffcc 	andi	r2,r2,65535
   17f24:	1080004c 	andi	r2,r2,1
   17f28:	1000061e 	bne	r2,zero,17f44 <OSTaskStkChk+0x12c>
   17f2c:	e0bff617 	ldw	r2,-40(fp)
   17f30:	e0bffc15 	stw	r2,-16(fp)
   17f34:	e0bffc17 	ldw	r2,-16(fp)
   17f38:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_OPT);
   17f3c:	00801144 	movi	r2,69
   17f40:	00002306 	br	17fd0 <OSTaskStkChk+0x1b8>
    }
    nfree = 0;
   17f44:	e03ff515 	stw	zero,-44(fp)
    size  = ptcb->OSTCBStkSize;
   17f48:	e0bff717 	ldw	r2,-36(fp)
   17f4c:	10800317 	ldw	r2,12(r2)
   17f50:	e0bff815 	stw	r2,-32(fp)
    pchk  = ptcb->OSTCBStkBottom;
   17f54:	e0bff717 	ldw	r2,-36(fp)
   17f58:	10800217 	ldw	r2,8(r2)
   17f5c:	e0bff415 	stw	r2,-48(fp)
   17f60:	e0bff617 	ldw	r2,-40(fp)
   17f64:	e0bffd15 	stw	r2,-12(fp)
   17f68:	e0bffd17 	ldw	r2,-12(fp)
   17f6c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
#if OS_STK_GROWTH == 1
    while (*pchk++ == (OS_STK)0) {                    /* Compute the number of zero entries on the stk */
   17f70:	00000306 	br	17f80 <OSTaskStkChk+0x168>
        nfree++;
   17f74:	e0bff517 	ldw	r2,-44(fp)
   17f78:	10800044 	addi	r2,r2,1
   17f7c:	e0bff515 	stw	r2,-44(fp)
    nfree = 0;
    size  = ptcb->OSTCBStkSize;
    pchk  = ptcb->OSTCBStkBottom;
    OS_EXIT_CRITICAL();
#if OS_STK_GROWTH == 1
    while (*pchk++ == (OS_STK)0) {                    /* Compute the number of zero entries on the stk */
   17f80:	e0bff417 	ldw	r2,-48(fp)
   17f84:	10c00104 	addi	r3,r2,4
   17f88:	e0fff415 	stw	r3,-48(fp)
   17f8c:	10800017 	ldw	r2,0(r2)
   17f90:	103ff826 	beq	r2,zero,17f74 <__alt_mem_Flash_flash_data+0xf4017f74>
#else
    while (*pchk-- == (OS_STK)0) {
        nfree++;
    }
#endif
    p_stk_data->OSFree = nfree * sizeof(OS_STK);          /* Compute number of free bytes on the stack */
   17f94:	e0bff517 	ldw	r2,-44(fp)
   17f98:	1085883a 	add	r2,r2,r2
   17f9c:	1085883a 	add	r2,r2,r2
   17fa0:	1007883a 	mov	r3,r2
   17fa4:	e0bfff17 	ldw	r2,-4(fp)
   17fa8:	10c00015 	stw	r3,0(r2)
    p_stk_data->OSUsed = (size - nfree) * sizeof(OS_STK); /* Compute number of bytes used on the stack */
   17fac:	e0fff817 	ldw	r3,-32(fp)
   17fb0:	e0bff517 	ldw	r2,-44(fp)
   17fb4:	1885c83a 	sub	r2,r3,r2
   17fb8:	1085883a 	add	r2,r2,r2
   17fbc:	1085883a 	add	r2,r2,r2
   17fc0:	1007883a 	mov	r3,r2
   17fc4:	e0bfff17 	ldw	r2,-4(fp)
   17fc8:	10c00115 	stw	r3,4(r2)
    return (OS_ERR_NONE);
   17fcc:	0005883a 	mov	r2,zero
}
   17fd0:	e037883a 	mov	sp,fp
   17fd4:	df000017 	ldw	fp,0(sp)
   17fd8:	dec00104 	addi	sp,sp,4
   17fdc:	f800283a 	ret

00017fe0 <OSTaskSuspend>:
*********************************************************************************************************
*/

#if OS_TASK_SUSPEND_EN > 0
INT8U  OSTaskSuspend (INT8U prio)
{
   17fe0:	defff504 	addi	sp,sp,-44
   17fe4:	dfc00a15 	stw	ra,40(sp)
   17fe8:	df000915 	stw	fp,36(sp)
   17fec:	df000904 	addi	fp,sp,36
   17ff0:	2005883a 	mov	r2,r4
   17ff4:	e0bfff05 	stb	r2,-4(fp)
    BOOLEAN    self;
    OS_TCB    *ptcb;
    INT8U      y;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   17ff8:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio == OS_TASK_IDLE_PRIO) {                            /* Not allowed to suspend idle task    */
   17ffc:	e0bfff03 	ldbu	r2,-4(fp)
   18000:	10800518 	cmpnei	r2,r2,20
   18004:	1000021e 	bne	r2,zero,18010 <OSTaskSuspend+0x30>
        return (OS_ERR_TASK_SUSPEND_IDLE);
   18008:	008011c4 	movi	r2,71
   1800c:	00007406 	br	181e0 <OSTaskSuspend+0x200>
    }
    if (prio >= OS_LOWEST_PRIO) {                               /* Task priority valid ?               */
   18010:	e0bfff03 	ldbu	r2,-4(fp)
   18014:	10800530 	cmpltui	r2,r2,20
   18018:	1000051e 	bne	r2,zero,18030 <OSTaskSuspend+0x50>
        if (prio != OS_PRIO_SELF) {
   1801c:	e0bfff03 	ldbu	r2,-4(fp)
   18020:	10803fe0 	cmpeqi	r2,r2,255
   18024:	1000021e 	bne	r2,zero,18030 <OSTaskSuspend+0x50>
            return (OS_ERR_PRIO_INVALID);
   18028:	00800a84 	movi	r2,42
   1802c:	00006c06 	br	181e0 <OSTaskSuspend+0x200>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   18030:	0005303a 	rdctl	r2,status
   18034:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   18038:	e0fffb17 	ldw	r3,-20(fp)
   1803c:	00bfff84 	movi	r2,-2
   18040:	1884703a 	and	r2,r3,r2
   18044:	1001703a 	wrctl	status,r2
  
  return context;
   18048:	e0bffb17 	ldw	r2,-20(fp)
        }
    }
#endif
    OS_ENTER_CRITICAL();
   1804c:	e0bff815 	stw	r2,-32(fp)
    if (prio == OS_PRIO_SELF) {                                 /* See if suspend SELF                 */
   18050:	e0bfff03 	ldbu	r2,-4(fp)
   18054:	10803fd8 	cmpnei	r2,r2,255
   18058:	1000081e 	bne	r2,zero,1807c <OSTaskSuspend+0x9c>
        prio = OSTCBCur->OSTCBPrio;
   1805c:	008000b4 	movhi	r2,2
   18060:	10836504 	addi	r2,r2,3476
   18064:	10800017 	ldw	r2,0(r2)
   18068:	10800c83 	ldbu	r2,50(r2)
   1806c:	e0bfff05 	stb	r2,-4(fp)
        self = OS_TRUE;
   18070:	00800044 	movi	r2,1
   18074:	e0bff705 	stb	r2,-36(fp)
   18078:	00000b06 	br	180a8 <OSTaskSuspend+0xc8>
    } else if (prio == OSTCBCur->OSTCBPrio) {                   /* See if suspending self              */
   1807c:	008000b4 	movhi	r2,2
   18080:	10836504 	addi	r2,r2,3476
   18084:	10800017 	ldw	r2,0(r2)
   18088:	10800c83 	ldbu	r2,50(r2)
   1808c:	10c03fcc 	andi	r3,r2,255
   18090:	e0bfff03 	ldbu	r2,-4(fp)
   18094:	1880031e 	bne	r3,r2,180a4 <OSTaskSuspend+0xc4>
        self = OS_TRUE;
   18098:	00800044 	movi	r2,1
   1809c:	e0bff705 	stb	r2,-36(fp)
   180a0:	00000106 	br	180a8 <OSTaskSuspend+0xc8>
    } else {
        self = OS_FALSE;                                        /* No suspending another task          */
   180a4:	e03ff705 	stb	zero,-36(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
   180a8:	e0ffff03 	ldbu	r3,-4(fp)
   180ac:	008000f4 	movhi	r2,3
   180b0:	1081e004 	addi	r2,r2,1920
   180b4:	18c7883a 	add	r3,r3,r3
   180b8:	18c7883a 	add	r3,r3,r3
   180bc:	10c5883a 	add	r2,r2,r3
   180c0:	10800017 	ldw	r2,0(r2)
   180c4:	e0bff915 	stw	r2,-28(fp)
    if (ptcb == (OS_TCB *)0) {                                  /* Task to suspend must exist          */
   180c8:	e0bff917 	ldw	r2,-28(fp)
   180cc:	1000061e 	bne	r2,zero,180e8 <OSTaskSuspend+0x108>
   180d0:	e0bff817 	ldw	r2,-32(fp)
   180d4:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   180d8:	e0bffc17 	ldw	r2,-16(fp)
   180dc:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_SUSPEND_PRIO);
   180e0:	00801204 	movi	r2,72
   180e4:	00003e06 	br	181e0 <OSTaskSuspend+0x200>
    }
    if (ptcb == OS_TCB_RESERVED) {                              /* See if assigned to Mutex            */
   180e8:	e0bff917 	ldw	r2,-28(fp)
   180ec:	10800058 	cmpnei	r2,r2,1
   180f0:	1000061e 	bne	r2,zero,1810c <OSTaskSuspend+0x12c>
   180f4:	e0bff817 	ldw	r2,-32(fp)
   180f8:	e0bffd15 	stw	r2,-12(fp)
   180fc:	e0bffd17 	ldw	r2,-12(fp)
   18100:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
   18104:	008010c4 	movi	r2,67
   18108:	00003506 	br	181e0 <OSTaskSuspend+0x200>
    }
    y            = ptcb->OSTCBY;
   1810c:	e0bff917 	ldw	r2,-28(fp)
   18110:	10800d03 	ldbu	r2,52(r2)
   18114:	e0bffa05 	stb	r2,-24(fp)
    OSRdyTbl[y] &= ~ptcb->OSTCBBitX;                            /* Make task not ready                 */
   18118:	e0fffa03 	ldbu	r3,-24(fp)
   1811c:	e13ffa03 	ldbu	r4,-24(fp)
   18120:	008000b4 	movhi	r2,2
   18124:	10836244 	addi	r2,r2,3465
   18128:	1105883a 	add	r2,r2,r4
   1812c:	10800003 	ldbu	r2,0(r2)
   18130:	1009883a 	mov	r4,r2
   18134:	e0bff917 	ldw	r2,-28(fp)
   18138:	10800d43 	ldbu	r2,53(r2)
   1813c:	0084303a 	nor	r2,zero,r2
   18140:	2084703a 	and	r2,r4,r2
   18144:	1009883a 	mov	r4,r2
   18148:	008000b4 	movhi	r2,2
   1814c:	10836244 	addi	r2,r2,3465
   18150:	10c5883a 	add	r2,r2,r3
   18154:	11000005 	stb	r4,0(r2)
    if (OSRdyTbl[y] == 0) {
   18158:	e0fffa03 	ldbu	r3,-24(fp)
   1815c:	008000b4 	movhi	r2,2
   18160:	10836244 	addi	r2,r2,3465
   18164:	10c5883a 	add	r2,r2,r3
   18168:	10800003 	ldbu	r2,0(r2)
   1816c:	10803fcc 	andi	r2,r2,255
   18170:	10000c1e 	bne	r2,zero,181a4 <OSTaskSuspend+0x1c4>
        OSRdyGrp &= ~ptcb->OSTCBBitY;
   18174:	e0bff917 	ldw	r2,-28(fp)
   18178:	10800d83 	ldbu	r2,54(r2)
   1817c:	0084303a 	nor	r2,zero,r2
   18180:	1007883a 	mov	r3,r2
   18184:	008000b4 	movhi	r2,2
   18188:	10836204 	addi	r2,r2,3464
   1818c:	10800003 	ldbu	r2,0(r2)
   18190:	1884703a 	and	r2,r3,r2
   18194:	1007883a 	mov	r3,r2
   18198:	008000b4 	movhi	r2,2
   1819c:	10836204 	addi	r2,r2,3464
   181a0:	10c00005 	stb	r3,0(r2)
    }
    ptcb->OSTCBStat |= OS_STAT_SUSPEND;                         /* Status of task is 'SUSPENDED'       */
   181a4:	e0bff917 	ldw	r2,-28(fp)
   181a8:	10800c03 	ldbu	r2,48(r2)
   181ac:	10800214 	ori	r2,r2,8
   181b0:	1007883a 	mov	r3,r2
   181b4:	e0bff917 	ldw	r2,-28(fp)
   181b8:	10c00c05 	stb	r3,48(r2)
   181bc:	e0bff817 	ldw	r2,-32(fp)
   181c0:	e0bffe15 	stw	r2,-8(fp)
   181c4:	e0bffe17 	ldw	r2,-8(fp)
   181c8:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    if (self == OS_TRUE) {                                      /* Context switch only if SELF         */
   181cc:	e0bff703 	ldbu	r2,-36(fp)
   181d0:	10800058 	cmpnei	r2,r2,1
   181d4:	1000011e 	bne	r2,zero,181dc <OSTaskSuspend+0x1fc>
        OS_Sched();                                             /* Find new highest priority task      */
   181d8:	00119f40 	call	119f4 <OS_Sched>
    }
    return (OS_ERR_NONE);
   181dc:	0005883a 	mov	r2,zero
}
   181e0:	e037883a 	mov	sp,fp
   181e4:	dfc00117 	ldw	ra,4(sp)
   181e8:	df000017 	ldw	fp,0(sp)
   181ec:	dec00204 	addi	sp,sp,8
   181f0:	f800283a 	ret

000181f4 <OSTaskQuery>:
*********************************************************************************************************
*/

#if OS_TASK_QUERY_EN > 0
INT8U  OSTaskQuery (INT8U prio, OS_TCB *p_task_data)
{
   181f4:	defff604 	addi	sp,sp,-40
   181f8:	dfc00915 	stw	ra,36(sp)
   181fc:	df000815 	stw	fp,32(sp)
   18200:	df000804 	addi	fp,sp,32
   18204:	2005883a 	mov	r2,r4
   18208:	e17fff15 	stw	r5,-4(fp)
   1820c:	e0bffe05 	stb	r2,-8(fp)
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   18210:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio > OS_LOWEST_PRIO) {                 /* Task priority valid ?                              */
   18214:	e0bffe03 	ldbu	r2,-8(fp)
   18218:	10800570 	cmpltui	r2,r2,21
   1821c:	1000051e 	bne	r2,zero,18234 <OSTaskQuery+0x40>
        if (prio != OS_PRIO_SELF) {
   18220:	e0bffe03 	ldbu	r2,-8(fp)
   18224:	10803fe0 	cmpeqi	r2,r2,255
   18228:	1000021e 	bne	r2,zero,18234 <OSTaskQuery+0x40>
            return (OS_ERR_PRIO_INVALID);
   1822c:	00800a84 	movi	r2,42
   18230:	00003606 	br	1830c <OSTaskQuery+0x118>
        }
    }
    if (p_task_data == (OS_TCB *)0) {            /* Validate 'p_task_data'                             */
   18234:	e0bfff17 	ldw	r2,-4(fp)
   18238:	1000021e 	bne	r2,zero,18244 <OSTaskQuery+0x50>
        return (OS_ERR_PDATA_NULL);
   1823c:	00800244 	movi	r2,9
   18240:	00003206 	br	1830c <OSTaskQuery+0x118>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   18244:	0005303a 	rdctl	r2,status
   18248:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1824c:	e0fffa17 	ldw	r3,-24(fp)
   18250:	00bfff84 	movi	r2,-2
   18254:	1884703a 	and	r2,r3,r2
   18258:	1001703a 	wrctl	status,r2
  
  return context;
   1825c:	e0bffa17 	ldw	r2,-24(fp)
    }
#endif
    OS_ENTER_CRITICAL();
   18260:	e0bff815 	stw	r2,-32(fp)
    if (prio == OS_PRIO_SELF) {                  /* See if suspend SELF                                */
   18264:	e0bffe03 	ldbu	r2,-8(fp)
   18268:	10803fd8 	cmpnei	r2,r2,255
   1826c:	1000051e 	bne	r2,zero,18284 <OSTaskQuery+0x90>
        prio = OSTCBCur->OSTCBPrio;
   18270:	008000b4 	movhi	r2,2
   18274:	10836504 	addi	r2,r2,3476
   18278:	10800017 	ldw	r2,0(r2)
   1827c:	10800c83 	ldbu	r2,50(r2)
   18280:	e0bffe05 	stb	r2,-8(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
   18284:	e0fffe03 	ldbu	r3,-8(fp)
   18288:	008000f4 	movhi	r2,3
   1828c:	1081e004 	addi	r2,r2,1920
   18290:	18c7883a 	add	r3,r3,r3
   18294:	18c7883a 	add	r3,r3,r3
   18298:	10c5883a 	add	r2,r2,r3
   1829c:	10800017 	ldw	r2,0(r2)
   182a0:	e0bff915 	stw	r2,-28(fp)
    if (ptcb == (OS_TCB *)0) {                   /* Task to query must exist                           */
   182a4:	e0bff917 	ldw	r2,-28(fp)
   182a8:	1000061e 	bne	r2,zero,182c4 <OSTaskQuery+0xd0>
   182ac:	e0bff817 	ldw	r2,-32(fp)
   182b0:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   182b4:	e0bffb17 	ldw	r2,-20(fp)
   182b8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_PRIO);
   182bc:	00800a44 	movi	r2,41
   182c0:	00001206 	br	1830c <OSTaskQuery+0x118>
    }
    if (ptcb == OS_TCB_RESERVED) {               /* Task to query must not be assigned to a Mutex      */
   182c4:	e0bff917 	ldw	r2,-28(fp)
   182c8:	10800058 	cmpnei	r2,r2,1
   182cc:	1000061e 	bne	r2,zero,182e8 <OSTaskQuery+0xf4>
   182d0:	e0bff817 	ldw	r2,-32(fp)
   182d4:	e0bffc15 	stw	r2,-16(fp)
   182d8:	e0bffc17 	ldw	r2,-16(fp)
   182dc:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
   182e0:	008010c4 	movi	r2,67
   182e4:	00000906 	br	1830c <OSTaskQuery+0x118>
    }
                                                 /* Copy TCB into user storage area                    */
    OS_MemCopy((INT8U *)p_task_data, (INT8U *)ptcb, sizeof(OS_TCB));
   182e8:	e13fff17 	ldw	r4,-4(fp)
   182ec:	e17ff917 	ldw	r5,-28(fp)
   182f0:	01801b04 	movi	r6,108
   182f4:	00119900 	call	11990 <OS_MemCopy>
   182f8:	e0bff817 	ldw	r2,-32(fp)
   182fc:	e0bffd15 	stw	r2,-12(fp)
   18300:	e0bffd17 	ldw	r2,-12(fp)
   18304:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
   18308:	0005883a 	mov	r2,zero
}
   1830c:	e037883a 	mov	sp,fp
   18310:	dfc00117 	ldw	ra,4(sp)
   18314:	df000017 	ldw	fp,0(sp)
   18318:	dec00204 	addi	sp,sp,8
   1831c:	f800283a 	ret

00018320 <OS_TaskStkClr>:
* Returns    : none
*********************************************************************************************************
*/
#if (OS_TASK_STAT_STK_CHK_EN > 0) && (OS_TASK_CREATE_EXT_EN > 0)
void  OS_TaskStkClr (OS_STK *pbos, INT32U size, INT16U opt)
{
   18320:	defffc04 	addi	sp,sp,-16
   18324:	df000315 	stw	fp,12(sp)
   18328:	df000304 	addi	fp,sp,12
   1832c:	e13ffd15 	stw	r4,-12(fp)
   18330:	e17ffe15 	stw	r5,-8(fp)
   18334:	3005883a 	mov	r2,r6
   18338:	e0bfff0d 	sth	r2,-4(fp)
    if ((opt & OS_TASK_OPT_STK_CHK) != 0x0000) {       /* See if stack checking has been enabled       */
   1833c:	e0bfff0b 	ldhu	r2,-4(fp)
   18340:	1080004c 	andi	r2,r2,1
   18344:	10000d26 	beq	r2,zero,1837c <OS_TaskStkClr+0x5c>
        if ((opt & OS_TASK_OPT_STK_CLR) != 0x0000) {   /* See if stack needs to be cleared             */
   18348:	e0bfff0b 	ldhu	r2,-4(fp)
   1834c:	1080008c 	andi	r2,r2,2
   18350:	10000a26 	beq	r2,zero,1837c <OS_TaskStkClr+0x5c>
#if OS_STK_GROWTH == 1
            while (size > 0) {                         /* Stack grows from HIGH to LOW memory          */
   18354:	00000706 	br	18374 <OS_TaskStkClr+0x54>
                size--;
   18358:	e0bffe17 	ldw	r2,-8(fp)
   1835c:	10bfffc4 	addi	r2,r2,-1
   18360:	e0bffe15 	stw	r2,-8(fp)
                *pbos++ = (OS_STK)0;                   /* Clear from bottom of stack and up!           */
   18364:	e0bffd17 	ldw	r2,-12(fp)
   18368:	10c00104 	addi	r3,r2,4
   1836c:	e0fffd15 	stw	r3,-12(fp)
   18370:	10000015 	stw	zero,0(r2)
void  OS_TaskStkClr (OS_STK *pbos, INT32U size, INT16U opt)
{
    if ((opt & OS_TASK_OPT_STK_CHK) != 0x0000) {       /* See if stack checking has been enabled       */
        if ((opt & OS_TASK_OPT_STK_CLR) != 0x0000) {   /* See if stack needs to be cleared             */
#if OS_STK_GROWTH == 1
            while (size > 0) {                         /* Stack grows from HIGH to LOW memory          */
   18374:	e0bffe17 	ldw	r2,-8(fp)
   18378:	103ff71e 	bne	r2,zero,18358 <__alt_mem_Flash_flash_data+0xf4018358>
                *pbos-- = (OS_STK)0;                   /* Clear from bottom of stack and down          */
            }
#endif
        }
    }
}
   1837c:	e037883a 	mov	sp,fp
   18380:	df000017 	ldw	fp,0(sp)
   18384:	dec00104 	addi	sp,sp,4
   18388:	f800283a 	ret

0001838c <OSTimeDly>:
* Returns    : none
*********************************************************************************************************
*/

void  OSTimeDly (INT16U ticks)
{
   1838c:	defff904 	addi	sp,sp,-28
   18390:	dfc00615 	stw	ra,24(sp)
   18394:	df000515 	stw	fp,20(sp)
   18398:	df000504 	addi	fp,sp,20
   1839c:	2005883a 	mov	r2,r4
   183a0:	e0bfff0d 	sth	r2,-4(fp)
    INT8U      y;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   183a4:	e03ffb15 	stw	zero,-20(fp)
#endif



    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
   183a8:	008000b4 	movhi	r2,2
   183ac:	10836404 	addi	r2,r2,3472
   183b0:	10800003 	ldbu	r2,0(r2)
   183b4:	10803fcc 	andi	r2,r2,255
   183b8:	10000126 	beq	r2,zero,183c0 <OSTimeDly+0x34>
        return;
   183bc:	00004006 	br	184c0 <OSTimeDly+0x134>
    }
    if (ticks > 0) {                             /* 0 means no delay!                                  */
   183c0:	e0bfff0b 	ldhu	r2,-4(fp)
   183c4:	10003e26 	beq	r2,zero,184c0 <OSTimeDly+0x134>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   183c8:	0005303a 	rdctl	r2,status
   183cc:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   183d0:	e0fffd17 	ldw	r3,-12(fp)
   183d4:	00bfff84 	movi	r2,-2
   183d8:	1884703a 	and	r2,r3,r2
   183dc:	1001703a 	wrctl	status,r2
  
  return context;
   183e0:	e0bffd17 	ldw	r2,-12(fp)
        OS_ENTER_CRITICAL();
   183e4:	e0bffb15 	stw	r2,-20(fp)
        y            =  OSTCBCur->OSTCBY;        /* Delay current task                                 */
   183e8:	008000b4 	movhi	r2,2
   183ec:	10836504 	addi	r2,r2,3476
   183f0:	10800017 	ldw	r2,0(r2)
   183f4:	10800d03 	ldbu	r2,52(r2)
   183f8:	e0bffc05 	stb	r2,-16(fp)
        OSRdyTbl[y] &= ~OSTCBCur->OSTCBBitX;
   183fc:	e0fffc03 	ldbu	r3,-16(fp)
   18400:	e13ffc03 	ldbu	r4,-16(fp)
   18404:	008000b4 	movhi	r2,2
   18408:	10836244 	addi	r2,r2,3465
   1840c:	1105883a 	add	r2,r2,r4
   18410:	10800003 	ldbu	r2,0(r2)
   18414:	1009883a 	mov	r4,r2
   18418:	008000b4 	movhi	r2,2
   1841c:	10836504 	addi	r2,r2,3476
   18420:	10800017 	ldw	r2,0(r2)
   18424:	10800d43 	ldbu	r2,53(r2)
   18428:	0084303a 	nor	r2,zero,r2
   1842c:	2084703a 	and	r2,r4,r2
   18430:	1009883a 	mov	r4,r2
   18434:	008000b4 	movhi	r2,2
   18438:	10836244 	addi	r2,r2,3465
   1843c:	10c5883a 	add	r2,r2,r3
   18440:	11000005 	stb	r4,0(r2)
        if (OSRdyTbl[y] == 0) {
   18444:	e0fffc03 	ldbu	r3,-16(fp)
   18448:	008000b4 	movhi	r2,2
   1844c:	10836244 	addi	r2,r2,3465
   18450:	10c5883a 	add	r2,r2,r3
   18454:	10800003 	ldbu	r2,0(r2)
   18458:	10803fcc 	andi	r2,r2,255
   1845c:	10000e1e 	bne	r2,zero,18498 <OSTimeDly+0x10c>
            OSRdyGrp &= ~OSTCBCur->OSTCBBitY;
   18460:	008000b4 	movhi	r2,2
   18464:	10836504 	addi	r2,r2,3476
   18468:	10800017 	ldw	r2,0(r2)
   1846c:	10800d83 	ldbu	r2,54(r2)
   18470:	0084303a 	nor	r2,zero,r2
   18474:	1007883a 	mov	r3,r2
   18478:	008000b4 	movhi	r2,2
   1847c:	10836204 	addi	r2,r2,3464
   18480:	10800003 	ldbu	r2,0(r2)
   18484:	1884703a 	and	r2,r3,r2
   18488:	1007883a 	mov	r3,r2
   1848c:	008000b4 	movhi	r2,2
   18490:	10836204 	addi	r2,r2,3464
   18494:	10c00005 	stb	r3,0(r2)
        }
        OSTCBCur->OSTCBDly = ticks;              /* Load ticks in TCB                                  */
   18498:	008000b4 	movhi	r2,2
   1849c:	10836504 	addi	r2,r2,3476
   184a0:	10800017 	ldw	r2,0(r2)
   184a4:	e0ffff0b 	ldhu	r3,-4(fp)
   184a8:	10c00b8d 	sth	r3,46(r2)
   184ac:	e0bffb17 	ldw	r2,-20(fp)
   184b0:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   184b4:	e0bffe17 	ldw	r2,-8(fp)
   184b8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                              /* Find next task to run!                             */
   184bc:	00119f40 	call	119f4 <OS_Sched>
    }
}
   184c0:	e037883a 	mov	sp,fp
   184c4:	dfc00117 	ldw	ra,4(sp)
   184c8:	df000017 	ldw	fp,0(sp)
   184cc:	dec00204 	addi	sp,sp,8
   184d0:	f800283a 	ret

000184d4 <OSTimeDlyHMSM>:
*********************************************************************************************************
*/

#if OS_TIME_DLY_HMSM_EN > 0
INT8U  OSTimeDlyHMSM (INT8U hours, INT8U minutes, INT8U seconds, INT16U ms)
{
   184d4:	defff804 	addi	sp,sp,-32
   184d8:	dfc00715 	stw	ra,28(sp)
   184dc:	df000615 	stw	fp,24(sp)
   184e0:	df000604 	addi	fp,sp,24
   184e4:	2015883a 	mov	r10,r4
   184e8:	2809883a 	mov	r4,r5
   184ec:	3007883a 	mov	r3,r6
   184f0:	3805883a 	mov	r2,r7
   184f4:	e2bffc05 	stb	r10,-16(fp)
   184f8:	e13ffd05 	stb	r4,-12(fp)
   184fc:	e0fffe05 	stb	r3,-8(fp)
   18500:	e0bfff0d 	sth	r2,-4(fp)
    INT32U ticks;
    INT16U loops;


    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
   18504:	008000b4 	movhi	r2,2
   18508:	10836404 	addi	r2,r2,3472
   1850c:	10800003 	ldbu	r2,0(r2)
   18510:	10803fcc 	andi	r2,r2,255
   18514:	10000226 	beq	r2,zero,18520 <OSTimeDlyHMSM+0x4c>
        return (OS_ERR_TIME_DLY_ISR);
   18518:	00801544 	movi	r2,85
   1851c:	00004206 	br	18628 <OSTimeDlyHMSM+0x154>
    }
#if OS_ARG_CHK_EN > 0
    if (hours == 0) {
   18520:	e0bffc03 	ldbu	r2,-16(fp)
   18524:	1000081e 	bne	r2,zero,18548 <OSTimeDlyHMSM+0x74>
        if (minutes == 0) {
   18528:	e0bffd03 	ldbu	r2,-12(fp)
   1852c:	1000061e 	bne	r2,zero,18548 <OSTimeDlyHMSM+0x74>
            if (seconds == 0) {
   18530:	e0bffe03 	ldbu	r2,-8(fp)
   18534:	1000041e 	bne	r2,zero,18548 <OSTimeDlyHMSM+0x74>
                if (ms == 0) {
   18538:	e0bfff0b 	ldhu	r2,-4(fp)
   1853c:	1000021e 	bne	r2,zero,18548 <OSTimeDlyHMSM+0x74>
                    return (OS_ERR_TIME_ZERO_DLY);
   18540:	00801504 	movi	r2,84
   18544:	00003806 	br	18628 <OSTimeDlyHMSM+0x154>
                }
            }
        }
    }
    if (minutes > 59) {
   18548:	e0bffd03 	ldbu	r2,-12(fp)
   1854c:	10800f30 	cmpltui	r2,r2,60
   18550:	1000021e 	bne	r2,zero,1855c <OSTimeDlyHMSM+0x88>
        return (OS_ERR_TIME_INVALID_MINUTES);    /* Validate arguments to be within range              */
   18554:	00801444 	movi	r2,81
   18558:	00003306 	br	18628 <OSTimeDlyHMSM+0x154>
    }
    if (seconds > 59) {
   1855c:	e0bffe03 	ldbu	r2,-8(fp)
   18560:	10800f30 	cmpltui	r2,r2,60
   18564:	1000021e 	bne	r2,zero,18570 <OSTimeDlyHMSM+0x9c>
        return (OS_ERR_TIME_INVALID_SECONDS);
   18568:	00801484 	movi	r2,82
   1856c:	00002e06 	br	18628 <OSTimeDlyHMSM+0x154>
    }
    if (ms > 999) {
   18570:	e0bfff0b 	ldhu	r2,-4(fp)
   18574:	1080fa30 	cmpltui	r2,r2,1000
   18578:	1000021e 	bne	r2,zero,18584 <OSTimeDlyHMSM+0xb0>
        return (OS_ERR_TIME_INVALID_MS);
   1857c:	008014c4 	movi	r2,83
   18580:	00002906 	br	18628 <OSTimeDlyHMSM+0x154>
    }
#endif
                                                 /* Compute the total number of clock ticks required.. */
                                                 /* .. (rounded to the nearest tick)                   */
    ticks = ((INT32U)hours * 3600L + (INT32U)minutes * 60L + (INT32U)seconds) * OS_TICKS_PER_SEC
   18584:	e0bffc03 	ldbu	r2,-16(fp)
   18588:	10c38424 	muli	r3,r2,3600
   1858c:	e0bffd03 	ldbu	r2,-12(fp)
   18590:	10800f24 	muli	r2,r2,60
   18594:	1887883a 	add	r3,r3,r2
   18598:	e0bffe03 	ldbu	r2,-8(fp)
   1859c:	1885883a 	add	r2,r3,r2
   185a0:	100890fa 	slli	r4,r2,3
          + OS_TICKS_PER_SEC * ((INT32U)ms + 500L / OS_TICKS_PER_SEC) / 1000L;
   185a4:	e0bfff0b 	ldhu	r2,-4(fp)
   185a8:	10800f84 	addi	r2,r2,62
   185ac:	100690fa 	slli	r3,r2,3
   185b0:	008418b4 	movhi	r2,4194
   185b4:	109374c4 	addi	r2,r2,19923
   185b8:	188a383a 	mulxuu	r5,r3,r2
   185bc:	1885383a 	mul	r2,r3,r2
   185c0:	1011883a 	mov	r8,r2
   185c4:	2813883a 	mov	r9,r5
   185c8:	4804d1ba 	srli	r2,r9,6
        return (OS_ERR_TIME_INVALID_MS);
    }
#endif
                                                 /* Compute the total number of clock ticks required.. */
                                                 /* .. (rounded to the nearest tick)                   */
    ticks = ((INT32U)hours * 3600L + (INT32U)minutes * 60L + (INT32U)seconds) * OS_TICKS_PER_SEC
   185cc:	2085883a 	add	r2,r4,r2
   185d0:	e0bffb15 	stw	r2,-20(fp)
          + OS_TICKS_PER_SEC * ((INT32U)ms + 500L / OS_TICKS_PER_SEC) / 1000L;
    loops = (INT16U)(ticks >> 16);               /* Compute the integral number of 65536 tick delays   */
   185d4:	e0bffb17 	ldw	r2,-20(fp)
   185d8:	1004d43a 	srli	r2,r2,16
   185dc:	e0bffa0d 	sth	r2,-24(fp)
    ticks = ticks & 0xFFFFL;                     /* Obtain  the fractional number of ticks             */
   185e0:	e0bffb17 	ldw	r2,-20(fp)
   185e4:	10bfffcc 	andi	r2,r2,65535
   185e8:	e0bffb15 	stw	r2,-20(fp)
    OSTimeDly((INT16U)ticks);
   185ec:	e0bffb17 	ldw	r2,-20(fp)
   185f0:	10bfffcc 	andi	r2,r2,65535
   185f4:	1009883a 	mov	r4,r2
   185f8:	001838c0 	call	1838c <OSTimeDly>
    while (loops > 0) {
   185fc:	00000706 	br	1861c <OSTimeDlyHMSM+0x148>
        OSTimeDly((INT16U)32768u);
   18600:	01200014 	movui	r4,32768
   18604:	001838c0 	call	1838c <OSTimeDly>
        OSTimeDly((INT16U)32768u);
   18608:	01200014 	movui	r4,32768
   1860c:	001838c0 	call	1838c <OSTimeDly>
        loops--;
   18610:	e0bffa0b 	ldhu	r2,-24(fp)
   18614:	10bfffc4 	addi	r2,r2,-1
   18618:	e0bffa0d 	sth	r2,-24(fp)
    ticks = ((INT32U)hours * 3600L + (INT32U)minutes * 60L + (INT32U)seconds) * OS_TICKS_PER_SEC
          + OS_TICKS_PER_SEC * ((INT32U)ms + 500L / OS_TICKS_PER_SEC) / 1000L;
    loops = (INT16U)(ticks >> 16);               /* Compute the integral number of 65536 tick delays   */
    ticks = ticks & 0xFFFFL;                     /* Obtain  the fractional number of ticks             */
    OSTimeDly((INT16U)ticks);
    while (loops > 0) {
   1861c:	e0bffa0b 	ldhu	r2,-24(fp)
   18620:	103ff71e 	bne	r2,zero,18600 <__alt_mem_Flash_flash_data+0xf4018600>
        OSTimeDly((INT16U)32768u);
        OSTimeDly((INT16U)32768u);
        loops--;
    }
    return (OS_ERR_NONE);
   18624:	0005883a 	mov	r2,zero
}
   18628:	e037883a 	mov	sp,fp
   1862c:	dfc00117 	ldw	ra,4(sp)
   18630:	df000017 	ldw	fp,0(sp)
   18634:	dec00204 	addi	sp,sp,8
   18638:	f800283a 	ret

0001863c <OSTimeDlyResume>:
*********************************************************************************************************
*/

#if OS_TIME_DLY_RESUME_EN > 0
INT8U  OSTimeDlyResume (INT8U prio)
{
   1863c:	defff504 	addi	sp,sp,-44
   18640:	dfc00a15 	stw	ra,40(sp)
   18644:	df000915 	stw	fp,36(sp)
   18648:	df000904 	addi	fp,sp,36
   1864c:	2005883a 	mov	r2,r4
   18650:	e0bfff05 	stb	r2,-4(fp)
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                                    /* Storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   18654:	e03ff715 	stw	zero,-36(fp)
#endif



    if (prio >= OS_LOWEST_PRIO) {
   18658:	e0bfff03 	ldbu	r2,-4(fp)
   1865c:	10800530 	cmpltui	r2,r2,20
   18660:	1000021e 	bne	r2,zero,1866c <OSTimeDlyResume+0x30>
        return (OS_ERR_PRIO_INVALID);
   18664:	00800a84 	movi	r2,42
   18668:	00006b06 	br	18818 <OSTimeDlyResume+0x1dc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1866c:	0005303a 	rdctl	r2,status
   18670:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   18674:	e0fff917 	ldw	r3,-28(fp)
   18678:	00bfff84 	movi	r2,-2
   1867c:	1884703a 	and	r2,r3,r2
   18680:	1001703a 	wrctl	status,r2
  
  return context;
   18684:	e0bff917 	ldw	r2,-28(fp)
    }
    OS_ENTER_CRITICAL();
   18688:	e0bff715 	stw	r2,-36(fp)
    ptcb = OSTCBPrioTbl[prio];                                 /* Make sure that task exist            */
   1868c:	e0ffff03 	ldbu	r3,-4(fp)
   18690:	008000f4 	movhi	r2,3
   18694:	1081e004 	addi	r2,r2,1920
   18698:	18c7883a 	add	r3,r3,r3
   1869c:	18c7883a 	add	r3,r3,r3
   186a0:	10c5883a 	add	r2,r2,r3
   186a4:	10800017 	ldw	r2,0(r2)
   186a8:	e0bff815 	stw	r2,-32(fp)
    if (ptcb == (OS_TCB *)0) {
   186ac:	e0bff817 	ldw	r2,-32(fp)
   186b0:	1000061e 	bne	r2,zero,186cc <OSTimeDlyResume+0x90>
   186b4:	e0bff717 	ldw	r2,-36(fp)
   186b8:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   186bc:	e0bffa17 	ldw	r2,-24(fp)
   186c0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);                        /* The task does not exist              */
   186c4:	008010c4 	movi	r2,67
   186c8:	00005306 	br	18818 <OSTimeDlyResume+0x1dc>
    }
    if (ptcb == OS_TCB_RESERVED) {
   186cc:	e0bff817 	ldw	r2,-32(fp)
   186d0:	10800058 	cmpnei	r2,r2,1
   186d4:	1000061e 	bne	r2,zero,186f0 <OSTimeDlyResume+0xb4>
   186d8:	e0bff717 	ldw	r2,-36(fp)
   186dc:	e0bffb15 	stw	r2,-20(fp)
   186e0:	e0bffb17 	ldw	r2,-20(fp)
   186e4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);                        /* The task does not exist              */
   186e8:	008010c4 	movi	r2,67
   186ec:	00004a06 	br	18818 <OSTimeDlyResume+0x1dc>
    }
    if (ptcb->OSTCBDly == 0) {                                 /* See if task is delayed               */
   186f0:	e0bff817 	ldw	r2,-32(fp)
   186f4:	10800b8b 	ldhu	r2,46(r2)
   186f8:	10bfffcc 	andi	r2,r2,65535
   186fc:	1000061e 	bne	r2,zero,18718 <OSTimeDlyResume+0xdc>
   18700:	e0bff717 	ldw	r2,-36(fp)
   18704:	e0bffc15 	stw	r2,-16(fp)
   18708:	e0bffc17 	ldw	r2,-16(fp)
   1870c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TIME_NOT_DLY);                          /* Indicate that task was not delayed   */
   18710:	00801404 	movi	r2,80
   18714:	00004006 	br	18818 <OSTimeDlyResume+0x1dc>
    }

    ptcb->OSTCBDly = 0;                                        /* Clear the time delay                 */
   18718:	e0bff817 	ldw	r2,-32(fp)
   1871c:	10000b8d 	sth	zero,46(r2)
    if ((ptcb->OSTCBStat & OS_STAT_PEND_ANY) != OS_STAT_RDY) {
   18720:	e0bff817 	ldw	r2,-32(fp)
   18724:	10800c03 	ldbu	r2,48(r2)
   18728:	10803fcc 	andi	r2,r2,255
   1872c:	10800dcc 	andi	r2,r2,55
   18730:	10000b26 	beq	r2,zero,18760 <OSTimeDlyResume+0x124>
        ptcb->OSTCBStat     &= ~OS_STAT_PEND_ANY;              /* Yes, Clear status flag               */
   18734:	e0bff817 	ldw	r2,-32(fp)
   18738:	10c00c03 	ldbu	r3,48(r2)
   1873c:	00bff204 	movi	r2,-56
   18740:	1884703a 	and	r2,r3,r2
   18744:	1007883a 	mov	r3,r2
   18748:	e0bff817 	ldw	r2,-32(fp)
   1874c:	10c00c05 	stb	r3,48(r2)
        ptcb->OSTCBStatPend  =  OS_STAT_PEND_TO;               /* Indicate PEND timeout                */
   18750:	e0bff817 	ldw	r2,-32(fp)
   18754:	00c00044 	movi	r3,1
   18758:	10c00c45 	stb	r3,49(r2)
   1875c:	00000206 	br	18768 <OSTimeDlyResume+0x12c>
    } else {
        ptcb->OSTCBStatPend  =  OS_STAT_PEND_OK;
   18760:	e0bff817 	ldw	r2,-32(fp)
   18764:	10000c45 	stb	zero,49(r2)
    }
    if ((ptcb->OSTCBStat & OS_STAT_SUSPEND) == OS_STAT_RDY) {  /* Is task suspended?                   */
   18768:	e0bff817 	ldw	r2,-32(fp)
   1876c:	10800c03 	ldbu	r2,48(r2)
   18770:	10803fcc 	andi	r2,r2,255
   18774:	1080020c 	andi	r2,r2,8
   18778:	1000221e 	bne	r2,zero,18804 <OSTimeDlyResume+0x1c8>
        OSRdyGrp               |= ptcb->OSTCBBitY;             /* No,  Make ready                      */
   1877c:	e0bff817 	ldw	r2,-32(fp)
   18780:	10c00d83 	ldbu	r3,54(r2)
   18784:	008000b4 	movhi	r2,2
   18788:	10836204 	addi	r2,r2,3464
   1878c:	10800003 	ldbu	r2,0(r2)
   18790:	1884b03a 	or	r2,r3,r2
   18794:	1007883a 	mov	r3,r2
   18798:	008000b4 	movhi	r2,2
   1879c:	10836204 	addi	r2,r2,3464
   187a0:	10c00005 	stb	r3,0(r2)
        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
   187a4:	e0bff817 	ldw	r2,-32(fp)
   187a8:	10800d03 	ldbu	r2,52(r2)
   187ac:	10c03fcc 	andi	r3,r2,255
   187b0:	e0bff817 	ldw	r2,-32(fp)
   187b4:	10800d03 	ldbu	r2,52(r2)
   187b8:	11003fcc 	andi	r4,r2,255
   187bc:	008000b4 	movhi	r2,2
   187c0:	10836244 	addi	r2,r2,3465
   187c4:	1105883a 	add	r2,r2,r4
   187c8:	11000003 	ldbu	r4,0(r2)
   187cc:	e0bff817 	ldw	r2,-32(fp)
   187d0:	10800d43 	ldbu	r2,53(r2)
   187d4:	2084b03a 	or	r2,r4,r2
   187d8:	1009883a 	mov	r4,r2
   187dc:	008000b4 	movhi	r2,2
   187e0:	10836244 	addi	r2,r2,3465
   187e4:	10c5883a 	add	r2,r2,r3
   187e8:	11000005 	stb	r4,0(r2)
   187ec:	e0bff717 	ldw	r2,-36(fp)
   187f0:	e0bffd15 	stw	r2,-12(fp)
   187f4:	e0bffd17 	ldw	r2,-12(fp)
   187f8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                                            /* See if this is new highest priority  */
   187fc:	00119f40 	call	119f4 <OS_Sched>
   18800:	00000406 	br	18814 <OSTimeDlyResume+0x1d8>
   18804:	e0bff717 	ldw	r2,-36(fp)
   18808:	e0bffe15 	stw	r2,-8(fp)
   1880c:	e0bffe17 	ldw	r2,-8(fp)
   18810:	1001703a 	wrctl	status,r2
    } else {
        OS_EXIT_CRITICAL();                                    /* Task may be suspended                */
    }
    return (OS_ERR_NONE);
   18814:	0005883a 	mov	r2,zero
}
   18818:	e037883a 	mov	sp,fp
   1881c:	dfc00117 	ldw	ra,4(sp)
   18820:	df000017 	ldw	fp,0(sp)
   18824:	dec00204 	addi	sp,sp,8
   18828:	f800283a 	ret

0001882c <OSTimeGet>:
*********************************************************************************************************
*/

#if OS_TIME_GET_SET_EN > 0
INT32U  OSTimeGet (void)
{
   1882c:	defffb04 	addi	sp,sp,-20
   18830:	df000415 	stw	fp,16(sp)
   18834:	df000404 	addi	fp,sp,16
    INT32U     ticks;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   18838:	e03ffc15 	stw	zero,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1883c:	0005303a 	rdctl	r2,status
   18840:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   18844:	e0fffe17 	ldw	r3,-8(fp)
   18848:	00bfff84 	movi	r2,-2
   1884c:	1884703a 	and	r2,r3,r2
   18850:	1001703a 	wrctl	status,r2
  
  return context;
   18854:	e0bffe17 	ldw	r2,-8(fp)
#endif



    OS_ENTER_CRITICAL();
   18858:	e0bffc15 	stw	r2,-16(fp)
    ticks = OSTime;
   1885c:	008000b4 	movhi	r2,2
   18860:	10836604 	addi	r2,r2,3480
   18864:	10800017 	ldw	r2,0(r2)
   18868:	e0bffd15 	stw	r2,-12(fp)
   1886c:	e0bffc17 	ldw	r2,-16(fp)
   18870:	e0bfff15 	stw	r2,-4(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   18874:	e0bfff17 	ldw	r2,-4(fp)
   18878:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (ticks);
   1887c:	e0bffd17 	ldw	r2,-12(fp)
}
   18880:	e037883a 	mov	sp,fp
   18884:	df000017 	ldw	fp,0(sp)
   18888:	dec00104 	addi	sp,sp,4
   1888c:	f800283a 	ret

00018890 <OSTimeSet>:
*********************************************************************************************************
*/

#if OS_TIME_GET_SET_EN > 0
void  OSTimeSet (INT32U ticks)
{
   18890:	defffb04 	addi	sp,sp,-20
   18894:	df000415 	stw	fp,16(sp)
   18898:	df000404 	addi	fp,sp,16
   1889c:	e13fff15 	stw	r4,-4(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   188a0:	e03ffc15 	stw	zero,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   188a4:	0005303a 	rdctl	r2,status
   188a8:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   188ac:	e0fffd17 	ldw	r3,-12(fp)
   188b0:	00bfff84 	movi	r2,-2
   188b4:	1884703a 	and	r2,r3,r2
   188b8:	1001703a 	wrctl	status,r2
  
  return context;
   188bc:	e0bffd17 	ldw	r2,-12(fp)
#endif



    OS_ENTER_CRITICAL();
   188c0:	e0bffc15 	stw	r2,-16(fp)
    OSTime = ticks;
   188c4:	008000b4 	movhi	r2,2
   188c8:	10836604 	addi	r2,r2,3480
   188cc:	e0ffff17 	ldw	r3,-4(fp)
   188d0:	10c00015 	stw	r3,0(r2)
   188d4:	e0bffc17 	ldw	r2,-16(fp)
   188d8:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   188dc:	e0bffe17 	ldw	r2,-8(fp)
   188e0:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
}
   188e4:	e037883a 	mov	sp,fp
   188e8:	df000017 	ldw	fp,0(sp)
   188ec:	dec00104 	addi	sp,sp,4
   188f0:	f800283a 	ret

000188f4 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
   188f4:	defffd04 	addi	sp,sp,-12
   188f8:	dfc00215 	stw	ra,8(sp)
   188fc:	df000115 	stw	fp,4(sp)
   18900:	df000104 	addi	fp,sp,4
   18904:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
   18908:	e13fff17 	ldw	r4,-4(fp)
   1890c:	014000b4 	movhi	r5,2
   18910:	297b3004 	addi	r5,r5,-4928
   18914:	001b2c80 	call	1b2c8 <alt_dev_llist_insert>
}
   18918:	e037883a 	mov	sp,fp
   1891c:	dfc00117 	ldw	ra,4(sp)
   18920:	df000017 	ldw	fp,0(sp)
   18924:	dec00204 	addi	sp,sp,8
   18928:	f800283a 	ret

0001892c <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
   1892c:	defffd04 	addi	sp,sp,-12
   18930:	dfc00215 	stw	ra,8(sp)
   18934:	df000115 	stw	fp,4(sp)
   18938:	df000104 	addi	fp,sp,4
   1893c:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2, Nios2);
   18940:	001bbdc0 	call	1bbdc <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
   18944:	00800044 	movi	r2,1
   18948:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
   1894c:	e037883a 	mov	sp,fp
   18950:	dfc00117 	ldw	ra,4(sp)
   18954:	df000017 	ldw	fp,0(sp)
   18958:	dec00204 	addi	sp,sp,8
   1895c:	f800283a 	ret

00018960 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
   18960:	defffd04 	addi	sp,sp,-12
   18964:	dfc00215 	stw	ra,8(sp)
   18968:	df000115 	stw	fp,4(sp)
   1896c:	df000104 	addi	fp,sp,4
    ALTERA_AVALON_TIMER_INIT ( INTERVAL_TIMER, Interval_Timer);
   18970:	01040034 	movhi	r4,4096
   18974:	21080004 	addi	r4,r4,8192
   18978:	000b883a 	mov	r5,zero
   1897c:	000d883a 	mov	r6,zero
   18980:	01c00204 	movi	r7,8
   18984:	0019ad40 	call	19ad4 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, JTAG_UART);
   18988:	010000b4 	movhi	r4,2
   1898c:	21362904 	addi	r4,r4,-10076
   18990:	000b883a 	mov	r5,zero
   18994:	01800204 	movi	r6,8
   18998:	0018e9c0 	call	18e9c <altera_avalon_jtag_uart_init>
   1899c:	010000b4 	movhi	r4,2
   189a0:	21361f04 	addi	r4,r4,-10116
   189a4:	00188f40 	call	188f4 <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID, SysID);
   189a8:	0001883a 	nop
    ALTERA_UP_AVALON_AUDIO_AND_VIDEO_CONFIG_INIT ( AV_CONFIG, AV_Config);
   189ac:	010000b4 	movhi	r4,2
   189b0:	213a3a04 	addi	r4,r4,-5912
   189b4:	00188f40 	call	188f4 <alt_dev_reg>
    ALTERA_UP_AVALON_AUDIO_INIT ( AUDIO_SUBSYSTEM_AUDIO, Audio_Subsystem_Audio);
   189b8:	010000b4 	movhi	r4,2
   189bc:	213a4604 	addi	r4,r4,-5864
   189c0:	00188f40 	call	188f4 <alt_dev_reg>
    ALTERA_UP_AVALON_CHARACTER_LCD_INIT ( CHAR_LCD_16X2, Char_LCD_16x2);
   189c4:	010000b4 	movhi	r4,2
   189c8:	213a5204 	addi	r4,r4,-5816
   189cc:	0019c040 	call	19c04 <alt_up_character_lcd_init>
   189d0:	010000b4 	movhi	r4,2
   189d4:	213a5204 	addi	r4,r4,-5816
   189d8:	00188f40 	call	188f4 <alt_dev_reg>
    ALTERA_UP_AVALON_IRDA_INIT ( IRDA, IrDA);
   189dc:	010000b4 	movhi	r4,2
   189e0:	213a5d04 	addi	r4,r4,-5772
   189e4:	00188f40 	call	188f4 <alt_dev_reg>
    ALTERA_UP_AVALON_PARALLEL_PORT_INIT ( EXPANSION_JP5, Expansion_JP5);
   189e8:	010000b4 	movhi	r4,2
   189ec:	213a6804 	addi	r4,r4,-5728
   189f0:	00188f40 	call	188f4 <alt_dev_reg>
    ALTERA_UP_AVALON_PARALLEL_PORT_INIT ( GREEN_LEDS, Green_LEDs);
   189f4:	010000b4 	movhi	r4,2
   189f8:	213a7304 	addi	r4,r4,-5684
   189fc:	00188f40 	call	188f4 <alt_dev_reg>
    ALTERA_UP_AVALON_PARALLEL_PORT_INIT ( HEX3_HEX0, HEX3_HEX0);
   18a00:	010000b4 	movhi	r4,2
   18a04:	213a7e04 	addi	r4,r4,-5640
   18a08:	00188f40 	call	188f4 <alt_dev_reg>
    ALTERA_UP_AVALON_PARALLEL_PORT_INIT ( HEX7_HEX4, HEX7_HEX4);
   18a0c:	010000b4 	movhi	r4,2
   18a10:	213a8904 	addi	r4,r4,-5596
   18a14:	00188f40 	call	188f4 <alt_dev_reg>
    ALTERA_UP_AVALON_PARALLEL_PORT_INIT ( PUSHBUTTONS, Pushbuttons);
   18a18:	010000b4 	movhi	r4,2
   18a1c:	213a9404 	addi	r4,r4,-5552
   18a20:	00188f40 	call	188f4 <alt_dev_reg>
    ALTERA_UP_AVALON_PARALLEL_PORT_INIT ( RED_LEDS, Red_LEDs);
   18a24:	010000b4 	movhi	r4,2
   18a28:	213a9f04 	addi	r4,r4,-5508
   18a2c:	00188f40 	call	188f4 <alt_dev_reg>
    ALTERA_UP_AVALON_PARALLEL_PORT_INIT ( SLIDER_SWITCHES, Slider_Switches);
   18a30:	010000b4 	movhi	r4,2
   18a34:	213aaa04 	addi	r4,r4,-5464
   18a38:	00188f40 	call	188f4 <alt_dev_reg>
    ALTERA_UP_AVALON_PS2_INIT ( PS2_PORT, PS2_Port);
   18a3c:	010000b4 	movhi	r4,2
   18a40:	213ab504 	addi	r4,r4,-5420
   18a44:	001a51c0 	call	1a51c <alt_up_ps2_init>
   18a48:	010000b4 	movhi	r4,2
   18a4c:	213ab504 	addi	r4,r4,-5420
   18a50:	00188f40 	call	188f4 <alt_dev_reg>
    ALTERA_UP_AVALON_PS2_INIT ( PS2_PORT_DUAL, PS2_Port_Dual);
   18a54:	010000b4 	movhi	r4,2
   18a58:	213ac304 	addi	r4,r4,-5364
   18a5c:	001a51c0 	call	1a51c <alt_up_ps2_init>
   18a60:	010000b4 	movhi	r4,2
   18a64:	213ac304 	addi	r4,r4,-5364
   18a68:	00188f40 	call	188f4 <alt_dev_reg>
    ALTERA_UP_AVALON_RS232_INIT ( SERIAL_PORT, Serial_Port);
   18a6c:	010000b4 	movhi	r4,2
   18a70:	213ad104 	addi	r4,r4,-5308
   18a74:	00188f40 	call	188f4 <alt_dev_reg>
    ALTERA_UP_AVALON_USB_INIT ( USB, USB);
   18a78:	010000b4 	movhi	r4,2
   18a7c:	213adc04 	addi	r4,r4,-5264
   18a80:	00188f40 	call	188f4 <alt_dev_reg>
    ALTERA_UP_AVALON_VIDEO_CHARACTER_BUFFER_WITH_DMA_INIT ( VGA_SUBSYSTEM_VGA_CHAR_BUFFER, VGA_Subsystem_VGA_Char_Buffer);
   18a84:	008000b4 	movhi	r2,2
   18a88:	10bae904 	addi	r2,r2,-5212
   18a8c:	10800a17 	ldw	r2,40(r2)
   18a90:	10800104 	addi	r2,r2,4
   18a94:	10800017 	ldw	r2,0(r2)
   18a98:	10ffffcc 	andi	r3,r2,65535
   18a9c:	008000b4 	movhi	r2,2
   18aa0:	10bae904 	addi	r2,r2,-5212
   18aa4:	10c00c15 	stw	r3,48(r2)
   18aa8:	008000b4 	movhi	r2,2
   18aac:	10bae904 	addi	r2,r2,-5212
   18ab0:	10800a17 	ldw	r2,40(r2)
   18ab4:	10800104 	addi	r2,r2,4
   18ab8:	10800017 	ldw	r2,0(r2)
   18abc:	1006d43a 	srli	r3,r2,16
   18ac0:	008000b4 	movhi	r2,2
   18ac4:	10bae904 	addi	r2,r2,-5212
   18ac8:	10c00d15 	stw	r3,52(r2)
   18acc:	008000b4 	movhi	r2,2
   18ad0:	10bae904 	addi	r2,r2,-5212
   18ad4:	10800c17 	ldw	r2,48(r2)
   18ad8:	10801068 	cmpgeui	r2,r2,65
   18adc:	1000081e 	bne	r2,zero,18b00 <alt_sys_init+0x1a0>
   18ae0:	008000b4 	movhi	r2,2
   18ae4:	10bae904 	addi	r2,r2,-5212
   18ae8:	00c00fc4 	movi	r3,63
   18aec:	10c00f15 	stw	r3,60(r2)
   18af0:	008000b4 	movhi	r2,2
   18af4:	10bae904 	addi	r2,r2,-5212
   18af8:	00c00184 	movi	r3,6
   18afc:	10c01015 	stw	r3,64(r2)
   18b00:	008000b4 	movhi	r2,2
   18b04:	10bae904 	addi	r2,r2,-5212
   18b08:	10800d17 	ldw	r2,52(r2)
   18b0c:	10800868 	cmpgeui	r2,r2,33
   18b10:	1000041e 	bne	r2,zero,18b24 <alt_sys_init+0x1c4>
   18b14:	008000b4 	movhi	r2,2
   18b18:	10bae904 	addi	r2,r2,-5212
   18b1c:	00c007c4 	movi	r3,31
   18b20:	10c01115 	stw	r3,68(r2)
   18b24:	010000b4 	movhi	r4,2
   18b28:	213ae904 	addi	r4,r4,-5212
   18b2c:	001ae340 	call	1ae34 <alt_up_char_buffer_init>
   18b30:	010000b4 	movhi	r4,2
   18b34:	213ae904 	addi	r4,r4,-5212
   18b38:	00188f40 	call	188f4 <alt_dev_reg>
    ALTERA_UP_AVALON_VIDEO_PIXEL_BUFFER_DMA_INIT ( VGA_SUBSYSTEM_VGA_PIXEL_DMA, VGA_Subsystem_VGA_Pixel_DMA);
   18b3c:	008000b4 	movhi	r2,2
   18b40:	10bafb04 	addi	r2,r2,-5140
   18b44:	10800a17 	ldw	r2,40(r2)
   18b48:	10800017 	ldw	r2,0(r2)
   18b4c:	1007883a 	mov	r3,r2
   18b50:	008000b4 	movhi	r2,2
   18b54:	10bafb04 	addi	r2,r2,-5140
   18b58:	10c00b15 	stw	r3,44(r2)
   18b5c:	008000b4 	movhi	r2,2
   18b60:	10bafb04 	addi	r2,r2,-5140
   18b64:	10800a17 	ldw	r2,40(r2)
   18b68:	10800104 	addi	r2,r2,4
   18b6c:	10800017 	ldw	r2,0(r2)
   18b70:	1007883a 	mov	r3,r2
   18b74:	008000b4 	movhi	r2,2
   18b78:	10bafb04 	addi	r2,r2,-5140
   18b7c:	10c00c15 	stw	r3,48(r2)
   18b80:	008000b4 	movhi	r2,2
   18b84:	10bafb04 	addi	r2,r2,-5140
   18b88:	10800a17 	ldw	r2,40(r2)
   18b8c:	10800204 	addi	r2,r2,8
   18b90:	10800017 	ldw	r2,0(r2)
   18b94:	10ffffcc 	andi	r3,r2,65535
   18b98:	008000b4 	movhi	r2,2
   18b9c:	10bafb04 	addi	r2,r2,-5140
   18ba0:	10c00f15 	stw	r3,60(r2)
   18ba4:	008000b4 	movhi	r2,2
   18ba8:	10bafb04 	addi	r2,r2,-5140
   18bac:	10800a17 	ldw	r2,40(r2)
   18bb0:	10800204 	addi	r2,r2,8
   18bb4:	10800017 	ldw	r2,0(r2)
   18bb8:	1006d43a 	srli	r3,r2,16
   18bbc:	008000b4 	movhi	r2,2
   18bc0:	10bafb04 	addi	r2,r2,-5140
   18bc4:	10c01015 	stw	r3,64(r2)
   18bc8:	008000b4 	movhi	r2,2
   18bcc:	10bafb04 	addi	r2,r2,-5140
   18bd0:	10800a17 	ldw	r2,40(r2)
   18bd4:	10800304 	addi	r2,r2,12
   18bd8:	10800017 	ldw	r2,0(r2)
   18bdc:	1005d07a 	srai	r2,r2,1
   18be0:	10c0004c 	andi	r3,r2,1
   18be4:	008000b4 	movhi	r2,2
   18be8:	10bafb04 	addi	r2,r2,-5140
   18bec:	10c00d15 	stw	r3,52(r2)
   18bf0:	008000b4 	movhi	r2,2
   18bf4:	10bafb04 	addi	r2,r2,-5140
   18bf8:	10800a17 	ldw	r2,40(r2)
   18bfc:	10800304 	addi	r2,r2,12
   18c00:	10800017 	ldw	r2,0(r2)
   18c04:	1005d13a 	srai	r2,r2,4
   18c08:	10c003cc 	andi	r3,r2,15
   18c0c:	008000b4 	movhi	r2,2
   18c10:	10bafb04 	addi	r2,r2,-5140
   18c14:	10c00e15 	stw	r3,56(r2)
   18c18:	008000b4 	movhi	r2,2
   18c1c:	10bafb04 	addi	r2,r2,-5140
   18c20:	10800a17 	ldw	r2,40(r2)
   18c24:	10800304 	addi	r2,r2,12
   18c28:	10800017 	ldw	r2,0(r2)
   18c2c:	1005d43a 	srai	r2,r2,16
   18c30:	e0bfff05 	stb	r2,-4(fp)
   18c34:	008000b4 	movhi	r2,2
   18c38:	10bafb04 	addi	r2,r2,-5140
   18c3c:	10800a17 	ldw	r2,40(r2)
   18c40:	10800304 	addi	r2,r2,12
   18c44:	10800017 	ldw	r2,0(r2)
   18c48:	1004d63a 	srli	r2,r2,24
   18c4c:	e0bfff45 	stb	r2,-3(fp)
   18c50:	008000b4 	movhi	r2,2
   18c54:	10bafb04 	addi	r2,r2,-5140
   18c58:	10800e17 	ldw	r2,56(r2)
   18c5c:	10800058 	cmpnei	r2,r2,1
   18c60:	1000041e 	bne	r2,zero,18c74 <alt_sys_init+0x314>
   18c64:	008000b4 	movhi	r2,2
   18c68:	10bafb04 	addi	r2,r2,-5140
   18c6c:	10001115 	stw	zero,68(r2)
   18c70:	00000e06 	br	18cac <alt_sys_init+0x34c>
   18c74:	008000b4 	movhi	r2,2
   18c78:	10bafb04 	addi	r2,r2,-5140
   18c7c:	10800e17 	ldw	r2,56(r2)
   18c80:	10800098 	cmpnei	r2,r2,2
   18c84:	1000051e 	bne	r2,zero,18c9c <alt_sys_init+0x33c>
   18c88:	008000b4 	movhi	r2,2
   18c8c:	10bafb04 	addi	r2,r2,-5140
   18c90:	00c00044 	movi	r3,1
   18c94:	10c01115 	stw	r3,68(r2)
   18c98:	00000406 	br	18cac <alt_sys_init+0x34c>
   18c9c:	008000b4 	movhi	r2,2
   18ca0:	10bafb04 	addi	r2,r2,-5140
   18ca4:	00c00084 	movi	r3,2
   18ca8:	10c01115 	stw	r3,68(r2)
   18cac:	e0bfff03 	ldbu	r2,-4(fp)
   18cb0:	00c00804 	movi	r3,32
   18cb4:	1885c83a 	sub	r2,r3,r2
   18cb8:	00ffffc4 	movi	r3,-1
   18cbc:	1886d83a 	srl	r3,r3,r2
   18cc0:	008000b4 	movhi	r2,2
   18cc4:	10bafb04 	addi	r2,r2,-5140
   18cc8:	10c01215 	stw	r3,72(r2)
   18ccc:	e0ffff03 	ldbu	r3,-4(fp)
   18cd0:	008000b4 	movhi	r2,2
   18cd4:	10bafb04 	addi	r2,r2,-5140
   18cd8:	10801117 	ldw	r2,68(r2)
   18cdc:	1887883a 	add	r3,r3,r2
   18ce0:	008000b4 	movhi	r2,2
   18ce4:	10bafb04 	addi	r2,r2,-5140
   18ce8:	10c01315 	stw	r3,76(r2)
   18cec:	e0bfff43 	ldbu	r2,-3(fp)
   18cf0:	00c00804 	movi	r3,32
   18cf4:	1885c83a 	sub	r2,r3,r2
   18cf8:	00ffffc4 	movi	r3,-1
   18cfc:	1886d83a 	srl	r3,r3,r2
   18d00:	008000b4 	movhi	r2,2
   18d04:	10bafb04 	addi	r2,r2,-5140
   18d08:	10c01415 	stw	r3,80(r2)
   18d0c:	010000b4 	movhi	r4,2
   18d10:	213afb04 	addi	r4,r4,-5140
   18d14:	00188f40 	call	188f4 <alt_dev_reg>
    ALTERA_UP_SD_CARD_AVALON_INTERFACE_INIT ( SD_CARD, SD_Card);
   18d18:	010000b4 	movhi	r4,2
   18d1c:	213b1004 	addi	r4,r4,-5056
   18d20:	00188f40 	call	188f4 <alt_dev_reg>
}
   18d24:	e037883a 	mov	sp,fp
   18d28:	dfc00117 	ldw	ra,4(sp)
   18d2c:	df000017 	ldw	fp,0(sp)
   18d30:	dec00204 	addi	sp,sp,8
   18d34:	f800283a 	ret

00018d38 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
   18d38:	defffa04 	addi	sp,sp,-24
   18d3c:	dfc00515 	stw	ra,20(sp)
   18d40:	df000415 	stw	fp,16(sp)
   18d44:	df000404 	addi	fp,sp,16
   18d48:	e13ffd15 	stw	r4,-12(fp)
   18d4c:	e17ffe15 	stw	r5,-8(fp)
   18d50:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   18d54:	e0bffd17 	ldw	r2,-12(fp)
   18d58:	10800017 	ldw	r2,0(r2)
   18d5c:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
   18d60:	e0bffc17 	ldw	r2,-16(fp)
   18d64:	10c00a04 	addi	r3,r2,40
   18d68:	e0bffd17 	ldw	r2,-12(fp)
   18d6c:	10800217 	ldw	r2,8(r2)
   18d70:	1809883a 	mov	r4,r3
   18d74:	e17ffe17 	ldw	r5,-8(fp)
   18d78:	e1bfff17 	ldw	r6,-4(fp)
   18d7c:	100f883a 	mov	r7,r2
   18d80:	00194e80 	call	194e8 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
   18d84:	e037883a 	mov	sp,fp
   18d88:	dfc00117 	ldw	ra,4(sp)
   18d8c:	df000017 	ldw	fp,0(sp)
   18d90:	dec00204 	addi	sp,sp,8
   18d94:	f800283a 	ret

00018d98 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
   18d98:	defffa04 	addi	sp,sp,-24
   18d9c:	dfc00515 	stw	ra,20(sp)
   18da0:	df000415 	stw	fp,16(sp)
   18da4:	df000404 	addi	fp,sp,16
   18da8:	e13ffd15 	stw	r4,-12(fp)
   18dac:	e17ffe15 	stw	r5,-8(fp)
   18db0:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   18db4:	e0bffd17 	ldw	r2,-12(fp)
   18db8:	10800017 	ldw	r2,0(r2)
   18dbc:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
   18dc0:	e0bffc17 	ldw	r2,-16(fp)
   18dc4:	10c00a04 	addi	r3,r2,40
   18dc8:	e0bffd17 	ldw	r2,-12(fp)
   18dcc:	10800217 	ldw	r2,8(r2)
   18dd0:	1809883a 	mov	r4,r3
   18dd4:	e17ffe17 	ldw	r5,-8(fp)
   18dd8:	e1bfff17 	ldw	r6,-4(fp)
   18ddc:	100f883a 	mov	r7,r2
   18de0:	001979c0 	call	1979c <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
   18de4:	e037883a 	mov	sp,fp
   18de8:	dfc00117 	ldw	ra,4(sp)
   18dec:	df000017 	ldw	fp,0(sp)
   18df0:	dec00204 	addi	sp,sp,8
   18df4:	f800283a 	ret

00018df8 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
   18df8:	defffc04 	addi	sp,sp,-16
   18dfc:	dfc00315 	stw	ra,12(sp)
   18e00:	df000215 	stw	fp,8(sp)
   18e04:	df000204 	addi	fp,sp,8
   18e08:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   18e0c:	e0bfff17 	ldw	r2,-4(fp)
   18e10:	10800017 	ldw	r2,0(r2)
   18e14:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
   18e18:	e0bffe17 	ldw	r2,-8(fp)
   18e1c:	10c00a04 	addi	r3,r2,40
   18e20:	e0bfff17 	ldw	r2,-4(fp)
   18e24:	10800217 	ldw	r2,8(r2)
   18e28:	1809883a 	mov	r4,r3
   18e2c:	100b883a 	mov	r5,r2
   18e30:	00193940 	call	19394 <altera_avalon_jtag_uart_close>
}
   18e34:	e037883a 	mov	sp,fp
   18e38:	dfc00117 	ldw	ra,4(sp)
   18e3c:	df000017 	ldw	fp,0(sp)
   18e40:	dec00204 	addi	sp,sp,8
   18e44:	f800283a 	ret

00018e48 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
   18e48:	defffa04 	addi	sp,sp,-24
   18e4c:	dfc00515 	stw	ra,20(sp)
   18e50:	df000415 	stw	fp,16(sp)
   18e54:	df000404 	addi	fp,sp,16
   18e58:	e13ffd15 	stw	r4,-12(fp)
   18e5c:	e17ffe15 	stw	r5,-8(fp)
   18e60:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
   18e64:	e0bffd17 	ldw	r2,-12(fp)
   18e68:	10800017 	ldw	r2,0(r2)
   18e6c:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
   18e70:	e0bffc17 	ldw	r2,-16(fp)
   18e74:	10800a04 	addi	r2,r2,40
   18e78:	1009883a 	mov	r4,r2
   18e7c:	e17ffe17 	ldw	r5,-8(fp)
   18e80:	e1bfff17 	ldw	r6,-4(fp)
   18e84:	00193fc0 	call	193fc <altera_avalon_jtag_uart_ioctl>
}
   18e88:	e037883a 	mov	sp,fp
   18e8c:	dfc00117 	ldw	ra,4(sp)
   18e90:	df000017 	ldw	fp,0(sp)
   18e94:	dec00204 	addi	sp,sp,8
   18e98:	f800283a 	ret

00018e9c <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
   18e9c:	defff104 	addi	sp,sp,-60
   18ea0:	dfc00e15 	stw	ra,56(sp)
   18ea4:	df000d15 	stw	fp,52(sp)
   18ea8:	df000d04 	addi	fp,sp,52
   18eac:	e13ff915 	stw	r4,-28(fp)
   18eb0:	e17ffa15 	stw	r5,-24(fp)
   18eb4:	e1bffb15 	stw	r6,-20(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
   18eb8:	e0bff917 	ldw	r2,-28(fp)
   18ebc:	10800c04 	addi	r2,r2,48
   18ec0:	e0bff315 	stw	r2,-52(fp)
   18ec4:	e03ff40d 	sth	zero,-48(fp)

static ALT_INLINE int ALT_ALWAYS_INLINE alt_flag_create (OS_FLAG_GRP** pgroup, 
               OS_FLAGS flags)
{
  INT8U err;
  *pgroup = OSFlagCreate (flags, &err);
   18ec8:	e0fff40b 	ldhu	r3,-48(fp)
   18ecc:	e0bff884 	addi	r2,fp,-30
   18ed0:	1809883a 	mov	r4,r3
   18ed4:	100b883a 	mov	r5,r2
   18ed8:	00125600 	call	12560 <OSFlagCreate>
   18edc:	1007883a 	mov	r3,r2
   18ee0:	e0bff317 	ldw	r2,-52(fp)
   18ee4:	10c00015 	stw	r3,0(r2)
  ALT_SEM_CREATE(&sp->read_lock, 1);
   18ee8:	e0bff917 	ldw	r2,-28(fp)
   18eec:	10800a04 	addi	r2,r2,40
   18ef0:	e0bff515 	stw	r2,-44(fp)
   18ef4:	00800044 	movi	r2,1
   18ef8:	e0bff60d 	sth	r2,-40(fp)
   18efc:	e0bff60b 	ldhu	r2,-40(fp)
   18f00:	1009883a 	mov	r4,r2
   18f04:	00160400 	call	16040 <OSSemCreate>
   18f08:	1007883a 	mov	r3,r2
   18f0c:	e0bff517 	ldw	r2,-44(fp)
   18f10:	10c00015 	stw	r3,0(r2)
  ALT_SEM_CREATE(&sp->write_lock, 1);
   18f14:	e0bff917 	ldw	r2,-28(fp)
   18f18:	10800b04 	addi	r2,r2,44
   18f1c:	e0bff715 	stw	r2,-36(fp)
   18f20:	00800044 	movi	r2,1
   18f24:	e0bff80d 	sth	r2,-32(fp)
   18f28:	e0bff80b 	ldhu	r2,-32(fp)
   18f2c:	1009883a 	mov	r4,r2
   18f30:	00160400 	call	16040 <OSSemCreate>
   18f34:	1007883a 	mov	r3,r2
   18f38:	e0bff717 	ldw	r2,-36(fp)
   18f3c:	10c00015 	stw	r3,0(r2)

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   18f40:	e0bff917 	ldw	r2,-28(fp)
   18f44:	00c00044 	movi	r3,1
   18f48:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
   18f4c:	e0bff917 	ldw	r2,-28(fp)
   18f50:	10800017 	ldw	r2,0(r2)
   18f54:	10800104 	addi	r2,r2,4
   18f58:	1007883a 	mov	r3,r2
   18f5c:	e0bff917 	ldw	r2,-28(fp)
   18f60:	10800817 	ldw	r2,32(r2)
   18f64:	18800035 	stwio	r2,0(r3)
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
                      sp, NULL);
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
   18f68:	e0bffb17 	ldw	r2,-20(fp)
   18f6c:	1009883a 	mov	r4,r2
   18f70:	e17ff917 	ldw	r5,-28(fp)
   18f74:	018000b4 	movhi	r6,2
   18f78:	31a3f704 	addi	r6,r6,-28708
   18f7c:	001b61c0 	call	1b61c <alt_irq_register>
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
   18f80:	e0bff917 	ldw	r2,-28(fp)
   18f84:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
   18f88:	e0bff917 	ldw	r2,-28(fp)
   18f8c:	10c00204 	addi	r3,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
   18f90:	008000b4 	movhi	r2,2
   18f94:	10836b04 	addi	r2,r2,3500
   18f98:	10800017 	ldw	r2,0(r2)
   18f9c:	1809883a 	mov	r4,r3
   18fa0:	100b883a 	mov	r5,r2
   18fa4:	018000b4 	movhi	r6,2
   18fa8:	31a4a104 	addi	r6,r6,-28028
   18fac:	e1fff917 	ldw	r7,-28(fp)
   18fb0:	001b11c0 	call	1b11c <alt_alarm_start>
   18fb4:	1000040e 	bge	r2,zero,18fc8 <altera_avalon_jtag_uart_init+0x12c>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
   18fb8:	e0fff917 	ldw	r3,-28(fp)
   18fbc:	00a00034 	movhi	r2,32768
   18fc0:	10bfffc4 	addi	r2,r2,-1
   18fc4:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
   18fc8:	e037883a 	mov	sp,fp
   18fcc:	dfc00117 	ldw	ra,4(sp)
   18fd0:	df000017 	ldw	fp,0(sp)
   18fd4:	dec00204 	addi	sp,sp,8
   18fd8:	f800283a 	ret

00018fdc <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
   18fdc:	defff104 	addi	sp,sp,-60
   18fe0:	dfc00e15 	stw	ra,56(sp)
   18fe4:	df000d15 	stw	fp,52(sp)
   18fe8:	df000d04 	addi	fp,sp,52
   18fec:	e13ffe15 	stw	r4,-8(fp)
   18ff0:	e17fff15 	stw	r5,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
   18ff4:	e0bffe17 	ldw	r2,-8(fp)
   18ff8:	e0bff515 	stw	r2,-44(fp)
  unsigned int base = sp->base;
   18ffc:	e0bff517 	ldw	r2,-44(fp)
   19000:	10800017 	ldw	r2,0(r2)
   19004:	e0bff615 	stw	r2,-40(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   19008:	e0bff617 	ldw	r2,-40(fp)
   1900c:	10800104 	addi	r2,r2,4
   19010:	10800037 	ldwio	r2,0(r2)
   19014:	e0bff715 	stw	r2,-36(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
   19018:	e0bff717 	ldw	r2,-36(fp)
   1901c:	1080c00c 	andi	r2,r2,768
   19020:	1000011e 	bne	r2,zero,19028 <altera_avalon_jtag_uart_irq+0x4c>
      break;
   19024:	00009206 	br	19270 <altera_avalon_jtag_uart_irq+0x294>

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
   19028:	e0bff717 	ldw	r2,-36(fp)
   1902c:	1080400c 	andi	r2,r2,256
   19030:	10004726 	beq	r2,zero,19150 <altera_avalon_jtag_uart_irq+0x174>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
   19034:	00800074 	movhi	r2,1
   19038:	e0bff315 	stw	r2,-52(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   1903c:	e0bff517 	ldw	r2,-44(fp)
   19040:	10800d17 	ldw	r2,52(r2)
   19044:	10800044 	addi	r2,r2,1
   19048:	1081ffcc 	andi	r2,r2,2047
   1904c:	e0bff815 	stw	r2,-32(fp)
        if (next == sp->rx_out)
   19050:	e0bff517 	ldw	r2,-44(fp)
   19054:	10c00e17 	ldw	r3,56(r2)
   19058:	e0bff817 	ldw	r2,-32(fp)
   1905c:	1880011e 	bne	r3,r2,19064 <altera_avalon_jtag_uart_irq+0x88>
          break;
   19060:	00002906 	br	19108 <altera_avalon_jtag_uart_irq+0x12c>

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
   19064:	e0bff617 	ldw	r2,-40(fp)
   19068:	10800037 	ldwio	r2,0(r2)
   1906c:	e0bff315 	stw	r2,-52(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
   19070:	e0bff317 	ldw	r2,-52(fp)
   19074:	10a0000c 	andi	r2,r2,32768
   19078:	1000011e 	bne	r2,zero,19080 <altera_avalon_jtag_uart_irq+0xa4>
          break;
   1907c:	00002206 	br	19108 <altera_avalon_jtag_uart_irq+0x12c>

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
   19080:	e0bff517 	ldw	r2,-44(fp)
   19084:	10800d17 	ldw	r2,52(r2)
   19088:	e0fff317 	ldw	r3,-52(fp)
   1908c:	1809883a 	mov	r4,r3
   19090:	e0fff517 	ldw	r3,-44(fp)
   19094:	1885883a 	add	r2,r3,r2
   19098:	10801104 	addi	r2,r2,68
   1909c:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   190a0:	e0bff517 	ldw	r2,-44(fp)
   190a4:	10800d17 	ldw	r2,52(r2)
   190a8:	10800044 	addi	r2,r2,1
   190ac:	10c1ffcc 	andi	r3,r2,2047
   190b0:	e0bff517 	ldw	r2,-44(fp)
   190b4:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
   190b8:	e0bff517 	ldw	r2,-44(fp)
   190bc:	10800c17 	ldw	r2,48(r2)
   190c0:	e0bff915 	stw	r2,-28(fp)
   190c4:	00800044 	movi	r2,1
   190c8:	e0bffa0d 	sth	r2,-24(fp)
   190cc:	00800044 	movi	r2,1
   190d0:	e0bffa85 	stb	r2,-22(fp)
                   OS_FLAGS     flags, 
                   INT8U        opt)
{
  INT8U err;

  if (OSRunning)
   190d4:	008000b4 	movhi	r2,2
   190d8:	10835644 	addi	r2,r2,3417
   190dc:	10800003 	ldbu	r2,0(r2)
   190e0:	10803fcc 	andi	r2,r2,255
   190e4:	103fd526 	beq	r2,zero,1903c <__alt_mem_Flash_flash_data+0xf401903c>
  {
    OSFlagPost (group, flags, opt, &err);
   190e8:	e17ffa0b 	ldhu	r5,-24(fp)
   190ec:	e0fffa83 	ldbu	r3,-22(fp)
   190f0:	e0bffcc4 	addi	r2,fp,-13
   190f4:	e13ff917 	ldw	r4,-28(fp)
   190f8:	180d883a 	mov	r6,r3
   190fc:	100f883a 	mov	r7,r2
   19100:	00131d00 	call	131d0 <OSFlagPost>
      }
   19104:	003fcd06 	br	1903c <__alt_mem_Flash_flash_data+0xf401903c>

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
   19108:	e0bff317 	ldw	r2,-52(fp)
   1910c:	10bfffec 	andhi	r2,r2,65535
   19110:	10000f26 	beq	r2,zero,19150 <altera_avalon_jtag_uart_irq+0x174>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   19114:	e0bff517 	ldw	r2,-44(fp)
   19118:	10c00817 	ldw	r3,32(r2)
   1911c:	00bfff84 	movi	r2,-2
   19120:	1886703a 	and	r3,r3,r2
   19124:	e0bff517 	ldw	r2,-44(fp)
   19128:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
   1912c:	e0bff617 	ldw	r2,-40(fp)
   19130:	10800104 	addi	r2,r2,4
   19134:	1007883a 	mov	r3,r2
   19138:	e0bff517 	ldw	r2,-44(fp)
   1913c:	10800817 	ldw	r2,32(r2)
   19140:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   19144:	e0bff617 	ldw	r2,-40(fp)
   19148:	10800104 	addi	r2,r2,4
   1914c:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
   19150:	e0bff717 	ldw	r2,-36(fp)
   19154:	1080800c 	andi	r2,r2,512
   19158:	10004426 	beq	r2,zero,1926c <altera_avalon_jtag_uart_irq+0x290>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
   1915c:	e0bff717 	ldw	r2,-36(fp)
   19160:	1004d43a 	srli	r2,r2,16
   19164:	e0bff415 	stw	r2,-48(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
   19168:	00002706 	br	19208 <altera_avalon_jtag_uart_irq+0x22c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
   1916c:	e0bff617 	ldw	r2,-40(fp)
   19170:	e0fff517 	ldw	r3,-44(fp)
   19174:	18c01017 	ldw	r3,64(r3)
   19178:	e13ff517 	ldw	r4,-44(fp)
   1917c:	20c7883a 	add	r3,r4,r3
   19180:	18c21104 	addi	r3,r3,2116
   19184:	18c00003 	ldbu	r3,0(r3)
   19188:	18c03fcc 	andi	r3,r3,255
   1918c:	18c0201c 	xori	r3,r3,128
   19190:	18ffe004 	addi	r3,r3,-128
   19194:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   19198:	e0bff517 	ldw	r2,-44(fp)
   1919c:	10801017 	ldw	r2,64(r2)
   191a0:	10800044 	addi	r2,r2,1
   191a4:	10c1ffcc 	andi	r3,r2,2047
   191a8:	e0bff517 	ldw	r2,-44(fp)
   191ac:	10c01015 	stw	r3,64(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);
   191b0:	e0bff517 	ldw	r2,-44(fp)
   191b4:	10800c17 	ldw	r2,48(r2)
   191b8:	e0bffb15 	stw	r2,-20(fp)
   191bc:	00800084 	movi	r2,2
   191c0:	e0bffc0d 	sth	r2,-16(fp)
   191c4:	00800044 	movi	r2,1
   191c8:	e0bffc85 	stb	r2,-14(fp)
                   OS_FLAGS     flags, 
                   INT8U        opt)
{
  INT8U err;

  if (OSRunning)
   191cc:	008000b4 	movhi	r2,2
   191d0:	10835644 	addi	r2,r2,3417
   191d4:	10800003 	ldbu	r2,0(r2)
   191d8:	10803fcc 	andi	r2,r2,255
   191dc:	10000726 	beq	r2,zero,191fc <altera_avalon_jtag_uart_irq+0x220>
  {
    OSFlagPost (group, flags, opt, &err);
   191e0:	e17ffc0b 	ldhu	r5,-16(fp)
   191e4:	e0fffc83 	ldbu	r3,-14(fp)
   191e8:	e0bffd04 	addi	r2,fp,-12
   191ec:	e13ffb17 	ldw	r4,-20(fp)
   191f0:	180d883a 	mov	r6,r3
   191f4:	100f883a 	mov	r7,r2
   191f8:	00131d00 	call	131d0 <OSFlagPost>

        space--;
   191fc:	e0bff417 	ldw	r2,-48(fp)
   19200:	10bfffc4 	addi	r2,r2,-1
   19204:	e0bff415 	stw	r2,-48(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
   19208:	e0bff417 	ldw	r2,-48(fp)
   1920c:	10000526 	beq	r2,zero,19224 <altera_avalon_jtag_uart_irq+0x248>
   19210:	e0bff517 	ldw	r2,-44(fp)
   19214:	10c01017 	ldw	r3,64(r2)
   19218:	e0bff517 	ldw	r2,-44(fp)
   1921c:	10800f17 	ldw	r2,60(r2)
   19220:	18bfd21e 	bne	r3,r2,1916c <__alt_mem_Flash_flash_data+0xf401916c>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
   19224:	e0bff417 	ldw	r2,-48(fp)
   19228:	10001026 	beq	r2,zero,1926c <altera_avalon_jtag_uart_irq+0x290>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   1922c:	e0bff517 	ldw	r2,-44(fp)
   19230:	10c00817 	ldw	r3,32(r2)
   19234:	00bfff44 	movi	r2,-3
   19238:	1886703a 	and	r3,r3,r2
   1923c:	e0bff517 	ldw	r2,-44(fp)
   19240:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   19244:	e0bff517 	ldw	r2,-44(fp)
   19248:	10800017 	ldw	r2,0(r2)
   1924c:	10800104 	addi	r2,r2,4
   19250:	1007883a 	mov	r3,r2
   19254:	e0bff517 	ldw	r2,-44(fp)
   19258:	10800817 	ldw	r2,32(r2)
   1925c:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   19260:	e0bff617 	ldw	r2,-40(fp)
   19264:	10800104 	addi	r2,r2,4
   19268:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
   1926c:	003f6606 	br	19008 <__alt_mem_Flash_flash_data+0xf4019008>
}
   19270:	e037883a 	mov	sp,fp
   19274:	dfc00117 	ldw	ra,4(sp)
   19278:	df000017 	ldw	fp,0(sp)
   1927c:	dec00204 	addi	sp,sp,8
   19280:	f800283a 	ret

00019284 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
   19284:	defff904 	addi	sp,sp,-28
   19288:	dfc00615 	stw	ra,24(sp)
   1928c:	df000515 	stw	fp,20(sp)
   19290:	df000504 	addi	fp,sp,20
   19294:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
   19298:	e0bfff17 	ldw	r2,-4(fp)
   1929c:	e0bffb15 	stw	r2,-20(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
   192a0:	e0bffb17 	ldw	r2,-20(fp)
   192a4:	10800017 	ldw	r2,0(r2)
   192a8:	10800104 	addi	r2,r2,4
   192ac:	10800037 	ldwio	r2,0(r2)
   192b0:	e0bffc15 	stw	r2,-16(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
   192b4:	e0bffc17 	ldw	r2,-16(fp)
   192b8:	1081000c 	andi	r2,r2,1024
   192bc:	10000b26 	beq	r2,zero,192ec <altera_avalon_jtag_uart_timeout+0x68>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
   192c0:	e0bffb17 	ldw	r2,-20(fp)
   192c4:	10800017 	ldw	r2,0(r2)
   192c8:	10800104 	addi	r2,r2,4
   192cc:	1007883a 	mov	r3,r2
   192d0:	e0bffb17 	ldw	r2,-20(fp)
   192d4:	10800817 	ldw	r2,32(r2)
   192d8:	10810014 	ori	r2,r2,1024
   192dc:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
   192e0:	e0bffb17 	ldw	r2,-20(fp)
   192e4:	10000915 	stw	zero,36(r2)
   192e8:	00002206 	br	19374 <altera_avalon_jtag_uart_timeout+0xf0>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
   192ec:	e0bffb17 	ldw	r2,-20(fp)
   192f0:	10c00917 	ldw	r3,36(r2)
   192f4:	00a00034 	movhi	r2,32768
   192f8:	10bfff04 	addi	r2,r2,-4
   192fc:	10c01d36 	bltu	r2,r3,19374 <altera_avalon_jtag_uart_timeout+0xf0>
    sp->host_inactive++;
   19300:	e0bffb17 	ldw	r2,-20(fp)
   19304:	10800917 	ldw	r2,36(r2)
   19308:	10c00044 	addi	r3,r2,1
   1930c:	e0bffb17 	ldw	r2,-20(fp)
   19310:	10c00915 	stw	r3,36(r2)
    
    if (sp->host_inactive >= sp->timeout) {
   19314:	e0bffb17 	ldw	r2,-20(fp)
   19318:	10c00917 	ldw	r3,36(r2)
   1931c:	e0bffb17 	ldw	r2,-20(fp)
   19320:	10800117 	ldw	r2,4(r2)
   19324:	18801336 	bltu	r3,r2,19374 <altera_avalon_jtag_uart_timeout+0xf0>
      /* Post an event to indicate host is inactive (for jtag_uart_read */
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
   19328:	e0bffb17 	ldw	r2,-20(fp)
   1932c:	10800c17 	ldw	r2,48(r2)
   19330:	e0bffd15 	stw	r2,-12(fp)
   19334:	00800104 	movi	r2,4
   19338:	e0bffe0d 	sth	r2,-8(fp)
   1933c:	00800044 	movi	r2,1
   19340:	e0bffe85 	stb	r2,-6(fp)
                   OS_FLAGS     flags, 
                   INT8U        opt)
{
  INT8U err;

  if (OSRunning)
   19344:	008000b4 	movhi	r2,2
   19348:	10835644 	addi	r2,r2,3417
   1934c:	10800003 	ldbu	r2,0(r2)
   19350:	10803fcc 	andi	r2,r2,255
   19354:	10000726 	beq	r2,zero,19374 <altera_avalon_jtag_uart_timeout+0xf0>
  {
    OSFlagPost (group, flags, opt, &err);
   19358:	e17ffe0b 	ldhu	r5,-8(fp)
   1935c:	e0fffe83 	ldbu	r3,-6(fp)
   19360:	e0bffec4 	addi	r2,fp,-5
   19364:	e13ffd17 	ldw	r4,-12(fp)
   19368:	180d883a 	mov	r6,r3
   1936c:	100f883a 	mov	r7,r2
   19370:	00131d00 	call	131d0 <OSFlagPost>
   19374:	008000b4 	movhi	r2,2
   19378:	10836b04 	addi	r2,r2,3500
   1937c:	10800017 	ldw	r2,0(r2)
    }
  }

  return alt_ticks_per_second();
}
   19380:	e037883a 	mov	sp,fp
   19384:	dfc00117 	ldw	ra,4(sp)
   19388:	df000017 	ldw	fp,0(sp)
   1938c:	dec00204 	addi	sp,sp,8
   19390:	f800283a 	ret

00019394 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
   19394:	defffd04 	addi	sp,sp,-12
   19398:	df000215 	stw	fp,8(sp)
   1939c:	df000204 	addi	fp,sp,8
   193a0:	e13ffe15 	stw	r4,-8(fp)
   193a4:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   193a8:	00000506 	br	193c0 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
   193ac:	e0bfff17 	ldw	r2,-4(fp)
   193b0:	1090000c 	andi	r2,r2,16384
   193b4:	10000226 	beq	r2,zero,193c0 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
   193b8:	00bffd44 	movi	r2,-11
   193bc:	00000b06 	br	193ec <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   193c0:	e0bffe17 	ldw	r2,-8(fp)
   193c4:	10c01017 	ldw	r3,64(r2)
   193c8:	e0bffe17 	ldw	r2,-8(fp)
   193cc:	10800f17 	ldw	r2,60(r2)
   193d0:	18800526 	beq	r3,r2,193e8 <altera_avalon_jtag_uart_close+0x54>
   193d4:	e0bffe17 	ldw	r2,-8(fp)
   193d8:	10c00917 	ldw	r3,36(r2)
   193dc:	e0bffe17 	ldw	r2,-8(fp)
   193e0:	10800117 	ldw	r2,4(r2)
   193e4:	18bff136 	bltu	r3,r2,193ac <__alt_mem_Flash_flash_data+0xf40193ac>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
   193e8:	0005883a 	mov	r2,zero
}
   193ec:	e037883a 	mov	sp,fp
   193f0:	df000017 	ldw	fp,0(sp)
   193f4:	dec00104 	addi	sp,sp,4
   193f8:	f800283a 	ret

000193fc <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
   193fc:	defffa04 	addi	sp,sp,-24
   19400:	df000515 	stw	fp,20(sp)
   19404:	df000504 	addi	fp,sp,20
   19408:	e13ffd15 	stw	r4,-12(fp)
   1940c:	e17ffe15 	stw	r5,-8(fp)
   19410:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
   19414:	00bff9c4 	movi	r2,-25
   19418:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
   1941c:	e0bffe17 	ldw	r2,-8(fp)
   19420:	10da8060 	cmpeqi	r3,r2,27137
   19424:	1800031e 	bne	r3,zero,19434 <altera_avalon_jtag_uart_ioctl+0x38>
   19428:	109a80a0 	cmpeqi	r2,r2,27138
   1942c:	1000191e 	bne	r2,zero,19494 <altera_avalon_jtag_uart_ioctl+0x98>
      rc = 0;
    }
    break;

  default:
    break;
   19430:	00002806 	br	194d4 <altera_avalon_jtag_uart_ioctl+0xd8>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
   19434:	e0bffd17 	ldw	r2,-12(fp)
   19438:	10c00117 	ldw	r3,4(r2)
   1943c:	00a00034 	movhi	r2,32768
   19440:	10bfffc4 	addi	r2,r2,-1
   19444:	18801226 	beq	r3,r2,19490 <altera_avalon_jtag_uart_ioctl+0x94>
    {
      int timeout = *((int *)arg);
   19448:	e0bfff17 	ldw	r2,-4(fp)
   1944c:	10800017 	ldw	r2,0(r2)
   19450:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
   19454:	e0bffc17 	ldw	r2,-16(fp)
   19458:	10800090 	cmplti	r2,r2,2
   1945c:	1000061e 	bne	r2,zero,19478 <altera_avalon_jtag_uart_ioctl+0x7c>
   19460:	e0fffc17 	ldw	r3,-16(fp)
   19464:	00a00034 	movhi	r2,32768
   19468:	10bfffc4 	addi	r2,r2,-1
   1946c:	18800226 	beq	r3,r2,19478 <altera_avalon_jtag_uart_ioctl+0x7c>
   19470:	e0bffc17 	ldw	r2,-16(fp)
   19474:	00000206 	br	19480 <altera_avalon_jtag_uart_ioctl+0x84>
   19478:	00a00034 	movhi	r2,32768
   1947c:	10bfff84 	addi	r2,r2,-2
   19480:	e0fffd17 	ldw	r3,-12(fp)
   19484:	18800115 	stw	r2,4(r3)
      rc = 0;
   19488:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
   1948c:	00001106 	br	194d4 <altera_avalon_jtag_uart_ioctl+0xd8>
   19490:	00001006 	br	194d4 <altera_avalon_jtag_uart_ioctl+0xd8>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
   19494:	e0bffd17 	ldw	r2,-12(fp)
   19498:	10c00117 	ldw	r3,4(r2)
   1949c:	00a00034 	movhi	r2,32768
   194a0:	10bfffc4 	addi	r2,r2,-1
   194a4:	18800a26 	beq	r3,r2,194d0 <altera_avalon_jtag_uart_ioctl+0xd4>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
   194a8:	e0bffd17 	ldw	r2,-12(fp)
   194ac:	10c00917 	ldw	r3,36(r2)
   194b0:	e0bffd17 	ldw	r2,-12(fp)
   194b4:	10800117 	ldw	r2,4(r2)
   194b8:	1885803a 	cmpltu	r2,r3,r2
   194bc:	10c03fcc 	andi	r3,r2,255
   194c0:	e0bfff17 	ldw	r2,-4(fp)
   194c4:	10c00015 	stw	r3,0(r2)
      rc = 0;
   194c8:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
   194cc:	00000006 	br	194d0 <altera_avalon_jtag_uart_ioctl+0xd4>
   194d0:	0001883a 	nop

  default:
    break;
  }

  return rc;
   194d4:	e0bffb17 	ldw	r2,-20(fp)
}
   194d8:	e037883a 	mov	sp,fp
   194dc:	df000017 	ldw	fp,0(sp)
   194e0:	dec00104 	addi	sp,sp,4
   194e4:	f800283a 	ret

000194e8 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
   194e8:	deffec04 	addi	sp,sp,-80
   194ec:	dfc01315 	stw	ra,76(sp)
   194f0:	df001215 	stw	fp,72(sp)
   194f4:	df001204 	addi	fp,sp,72
   194f8:	e13ffc15 	stw	r4,-16(fp)
   194fc:	e17ffd15 	stw	r5,-12(fp)
   19500:	e1bffe15 	stw	r6,-8(fp)
   19504:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
   19508:	e0bffd17 	ldw	r2,-12(fp)
   1950c:	e0bfef15 	stw	r2,-68(fp)

  /*
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);
   19510:	e0bffc17 	ldw	r2,-16(fp)
   19514:	10800a17 	ldw	r2,40(r2)
   19518:	e0bff415 	stw	r2,-48(fp)
   1951c:	e03ff50d 	sth	zero,-44(fp)

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sem_pend (OS_EVENT* sem, 
                  INT16U timeout)
{
  INT8U err;
  OSSemPend (sem, timeout, &err);
   19520:	e0fff50b 	ldhu	r3,-44(fp)
   19524:	e0bffb04 	addi	r2,fp,-20
   19528:	e13ff417 	ldw	r4,-48(fp)
   1952c:	180b883a 	mov	r5,r3
   19530:	100d883a 	mov	r6,r2
   19534:	00163a80 	call	163a8 <OSSemPend>

  while (space > 0)
   19538:	00006506 	br	196d0 <altera_avalon_jtag_uart_read+0x1e8>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
   1953c:	e0bffc17 	ldw	r2,-16(fp)
   19540:	10800d17 	ldw	r2,52(r2)
   19544:	e0bff115 	stw	r2,-60(fp)
      out = sp->rx_out;
   19548:	e0bffc17 	ldw	r2,-16(fp)
   1954c:	10800e17 	ldw	r2,56(r2)
   19550:	e0bff215 	stw	r2,-56(fp)

      if (in >= out)
   19554:	e0fff117 	ldw	r3,-60(fp)
   19558:	e0bff217 	ldw	r2,-56(fp)
   1955c:	18800536 	bltu	r3,r2,19574 <altera_avalon_jtag_uart_read+0x8c>
        n = in - out;
   19560:	e0fff117 	ldw	r3,-60(fp)
   19564:	e0bff217 	ldw	r2,-56(fp)
   19568:	1885c83a 	sub	r2,r3,r2
   1956c:	e0bff015 	stw	r2,-64(fp)
   19570:	00000406 	br	19584 <altera_avalon_jtag_uart_read+0x9c>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
   19574:	00c20004 	movi	r3,2048
   19578:	e0bff217 	ldw	r2,-56(fp)
   1957c:	1885c83a 	sub	r2,r3,r2
   19580:	e0bff015 	stw	r2,-64(fp)

      if (n == 0)
   19584:	e0bff017 	ldw	r2,-64(fp)
   19588:	1000011e 	bne	r2,zero,19590 <altera_avalon_jtag_uart_read+0xa8>
        break; /* No more data available */
   1958c:	00001d06 	br	19604 <altera_avalon_jtag_uart_read+0x11c>

      if (n > space)
   19590:	e0fffe17 	ldw	r3,-8(fp)
   19594:	e0bff017 	ldw	r2,-64(fp)
   19598:	1880022e 	bgeu	r3,r2,195a4 <altera_avalon_jtag_uart_read+0xbc>
        n = space;
   1959c:	e0bffe17 	ldw	r2,-8(fp)
   195a0:	e0bff015 	stw	r2,-64(fp)

      memcpy(ptr, sp->rx_buf + out, n);
   195a4:	e0bff217 	ldw	r2,-56(fp)
   195a8:	10801104 	addi	r2,r2,68
   195ac:	e0fffc17 	ldw	r3,-16(fp)
   195b0:	1885883a 	add	r2,r3,r2
   195b4:	e13fef17 	ldw	r4,-68(fp)
   195b8:	100b883a 	mov	r5,r2
   195bc:	e1bff017 	ldw	r6,-64(fp)
   195c0:	00088700 	call	8870 <memcpy>
      ptr   += n;
   195c4:	e0ffef17 	ldw	r3,-68(fp)
   195c8:	e0bff017 	ldw	r2,-64(fp)
   195cc:	1885883a 	add	r2,r3,r2
   195d0:	e0bfef15 	stw	r2,-68(fp)
      space -= n;
   195d4:	e0fffe17 	ldw	r3,-8(fp)
   195d8:	e0bff017 	ldw	r2,-64(fp)
   195dc:	1885c83a 	sub	r2,r3,r2
   195e0:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   195e4:	e0fff217 	ldw	r3,-56(fp)
   195e8:	e0bff017 	ldw	r2,-64(fp)
   195ec:	1885883a 	add	r2,r3,r2
   195f0:	10c1ffcc 	andi	r3,r2,2047
   195f4:	e0bffc17 	ldw	r2,-16(fp)
   195f8:	10c00e15 	stw	r3,56(r2)
    }
    while (space > 0);
   195fc:	e0bffe17 	ldw	r2,-8(fp)
   19600:	00bfce16 	blt	zero,r2,1953c <__alt_mem_Flash_flash_data+0xf401953c>

    /* If we read any data then return it */
    if (ptr != buffer)
   19604:	e0ffef17 	ldw	r3,-68(fp)
   19608:	e0bffd17 	ldw	r2,-12(fp)
   1960c:	18800126 	beq	r3,r2,19614 <altera_avalon_jtag_uart_read+0x12c>
      break;
   19610:	00003106 	br	196d8 <altera_avalon_jtag_uart_read+0x1f0>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
   19614:	e0bfff17 	ldw	r2,-4(fp)
   19618:	1090000c 	andi	r2,r2,16384
   1961c:	10000126 	beq	r2,zero,19624 <altera_avalon_jtag_uart_read+0x13c>
      break;
   19620:	00002d06 	br	196d8 <altera_avalon_jtag_uart_read+0x1f0>

#ifdef __ucosii__
    /* OS Present: Pend on a flag if the OS is running, otherwise spin */
    if(OSRunning == OS_TRUE) {
   19624:	008000b4 	movhi	r2,2
   19628:	10835644 	addi	r2,r2,3417
   1962c:	10800003 	ldbu	r2,0(r2)
   19630:	10803fcc 	andi	r2,r2,255
   19634:	10800058 	cmpnei	r2,r2,1
   19638:	1000161e 	bne	r2,zero,19694 <altera_avalon_jtag_uart_read+0x1ac>
       * When running in a multi-threaded mode, we pend on the read event
       * flag set and timeout event flag set in the isr. This avoids wasting CPU
       * cycles waiting in this thread, when we could be doing something more
       * profitable elsewhere.
       */
      ALT_FLAG_PEND (sp->events,
   1963c:	e0bffc17 	ldw	r2,-16(fp)
   19640:	10800c17 	ldw	r2,48(r2)
   19644:	e0bff615 	stw	r2,-40(fp)
   19648:	00800144 	movi	r2,5
   1964c:	e0bff70d 	sth	r2,-36(fp)
   19650:	00bfe0c4 	movi	r2,-125
   19654:	e0bff785 	stb	r2,-34(fp)
   19658:	e03ff80d 	sth	zero,-32(fp)
                   OS_FLAGS flags, 
                   INT8U wait_type, 
                   INT16U timeout)
{
  INT8U err;
  if (OSRunning)
   1965c:	008000b4 	movhi	r2,2
   19660:	10835644 	addi	r2,r2,3417
   19664:	10800003 	ldbu	r2,0(r2)
   19668:	10803fcc 	andi	r2,r2,255
   1966c:	10001326 	beq	r2,zero,196bc <altera_avalon_jtag_uart_read+0x1d4>
  {
    OSFlagPend (group, flags, wait_type, timeout, &err);
   19670:	e17ff70b 	ldhu	r5,-36(fp)
   19674:	e1bff783 	ldbu	r6,-34(fp)
   19678:	e0fff80b 	ldhu	r3,-32(fp)
   1967c:	e0bffb44 	addi	r2,fp,-19
   19680:	d8800015 	stw	r2,0(sp)
   19684:	e13ff617 	ldw	r4,-40(fp)
   19688:	180f883a 	mov	r7,r3
   1968c:	0012b780 	call	12b78 <OSFlagPend>
   19690:	00000a06 	br	196bc <altera_avalon_jtag_uart_read+0x1d4>
                     OS_FLAG_WAIT_SET_ANY + OS_FLAG_CONSUME,
                     0);
    }
    else {
      /* Spin until more data arrives or until host disconnects */
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
   19694:	0001883a 	nop
   19698:	e0bffc17 	ldw	r2,-16(fp)
   1969c:	10c00d17 	ldw	r3,52(r2)
   196a0:	e0bff117 	ldw	r2,-60(fp)
   196a4:	1880051e 	bne	r3,r2,196bc <altera_avalon_jtag_uart_read+0x1d4>
   196a8:	e0bffc17 	ldw	r2,-16(fp)
   196ac:	10c00917 	ldw	r3,36(r2)
   196b0:	e0bffc17 	ldw	r2,-16(fp)
   196b4:	10800117 	ldw	r2,4(r2)
   196b8:	18bff736 	bltu	r3,r2,19698 <__alt_mem_Flash_flash_data+0xf4019698>
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
   196bc:	e0bffc17 	ldw	r2,-16(fp)
   196c0:	10c00d17 	ldw	r3,52(r2)
   196c4:	e0bff117 	ldw	r2,-60(fp)
   196c8:	1880011e 	bne	r3,r2,196d0 <altera_avalon_jtag_uart_read+0x1e8>
      break;
   196cc:	00000206 	br	196d8 <altera_avalon_jtag_uart_read+0x1f0>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   196d0:	e0bffe17 	ldw	r2,-8(fp)
   196d4:	00bf9916 	blt	zero,r2,1953c <__alt_mem_Flash_flash_data+0xf401953c>
  /*
   * Now that access to the circular buffer is complete, release the read
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);
   196d8:	e0bffc17 	ldw	r2,-16(fp)
   196dc:	10800a17 	ldw	r2,40(r2)
   196e0:	1009883a 	mov	r4,r2
   196e4:	001677c0 	call	1677c <OSSemPost>

  if (ptr != buffer)
   196e8:	e0ffef17 	ldw	r3,-68(fp)
   196ec:	e0bffd17 	ldw	r2,-12(fp)
   196f0:	18801826 	beq	r3,r2,19754 <altera_avalon_jtag_uart_read+0x26c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   196f4:	0005303a 	rdctl	r2,status
   196f8:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   196fc:	e0fff917 	ldw	r3,-28(fp)
   19700:	00bfff84 	movi	r2,-2
   19704:	1884703a 	and	r2,r3,r2
   19708:	1001703a 	wrctl	status,r2
  
  return context;
   1970c:	e0bff917 	ldw	r2,-28(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
   19710:	e0bff315 	stw	r2,-52(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   19714:	e0bffc17 	ldw	r2,-16(fp)
   19718:	10800817 	ldw	r2,32(r2)
   1971c:	10c00054 	ori	r3,r2,1
   19720:	e0bffc17 	ldw	r2,-16(fp)
   19724:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   19728:	e0bffc17 	ldw	r2,-16(fp)
   1972c:	10800017 	ldw	r2,0(r2)
   19730:	10800104 	addi	r2,r2,4
   19734:	1007883a 	mov	r3,r2
   19738:	e0bffc17 	ldw	r2,-16(fp)
   1973c:	10800817 	ldw	r2,32(r2)
   19740:	18800035 	stwio	r2,0(r3)
   19744:	e0bff317 	ldw	r2,-52(fp)
   19748:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1974c:	e0bffa17 	ldw	r2,-24(fp)
   19750:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
   19754:	e0ffef17 	ldw	r3,-68(fp)
   19758:	e0bffd17 	ldw	r2,-12(fp)
   1975c:	18800426 	beq	r3,r2,19770 <altera_avalon_jtag_uart_read+0x288>
    return ptr - buffer;
   19760:	e0ffef17 	ldw	r3,-68(fp)
   19764:	e0bffd17 	ldw	r2,-12(fp)
   19768:	1885c83a 	sub	r2,r3,r2
   1976c:	00000606 	br	19788 <altera_avalon_jtag_uart_read+0x2a0>
  else if (flags & O_NONBLOCK)
   19770:	e0bfff17 	ldw	r2,-4(fp)
   19774:	1090000c 	andi	r2,r2,16384
   19778:	10000226 	beq	r2,zero,19784 <altera_avalon_jtag_uart_read+0x29c>
    return -EWOULDBLOCK;
   1977c:	00bffd44 	movi	r2,-11
   19780:	00000106 	br	19788 <altera_avalon_jtag_uart_read+0x2a0>
  else
    return -EIO;
   19784:	00bffec4 	movi	r2,-5
}
   19788:	e037883a 	mov	sp,fp
   1978c:	dfc00117 	ldw	ra,4(sp)
   19790:	df000017 	ldw	fp,0(sp)
   19794:	dec00204 	addi	sp,sp,8
   19798:	f800283a 	ret

0001979c <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
   1979c:	deffed04 	addi	sp,sp,-76
   197a0:	dfc01215 	stw	ra,72(sp)
   197a4:	df001115 	stw	fp,68(sp)
   197a8:	df001104 	addi	fp,sp,68
   197ac:	e13ffc15 	stw	r4,-16(fp)
   197b0:	e17ffd15 	stw	r5,-12(fp)
   197b4:	e1bffe15 	stw	r6,-8(fp)
   197b8:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
   197bc:	e03ff015 	stw	zero,-64(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
   197c0:	e0bffd17 	ldw	r2,-12(fp)
   197c4:	e0bff215 	stw	r2,-56(fp)

  /*
   * When running in a multi threaded environment, obtain the "write_lock"
   * semaphore. This ensures that writing to the device is thread-safe.
   */
  ALT_SEM_PEND (sp->write_lock, 0);
   197c8:	e0bffc17 	ldw	r2,-16(fp)
   197cc:	10800b17 	ldw	r2,44(r2)
   197d0:	e0bff515 	stw	r2,-44(fp)
   197d4:	e03ff60d 	sth	zero,-40(fp)
   197d8:	e0fff60b 	ldhu	r3,-40(fp)
   197dc:	e0bffbc4 	addi	r2,fp,-17
   197e0:	e13ff517 	ldw	r4,-44(fp)
   197e4:	180b883a 	mov	r5,r3
   197e8:	100d883a 	mov	r6,r2
   197ec:	00163a80 	call	163a8 <OSSemPend>

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   197f0:	00003806 	br	198d4 <altera_avalon_jtag_uart_write+0x138>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
   197f4:	e0bffc17 	ldw	r2,-16(fp)
   197f8:	10800f17 	ldw	r2,60(r2)
   197fc:	e0bff315 	stw	r2,-52(fp)
      out = sp->tx_out;
   19800:	e0bffc17 	ldw	r2,-16(fp)
   19804:	10801017 	ldw	r2,64(r2)
   19808:	e0bff015 	stw	r2,-64(fp)

      if (in < out)
   1980c:	e0fff317 	ldw	r3,-52(fp)
   19810:	e0bff017 	ldw	r2,-64(fp)
   19814:	1880062e 	bgeu	r3,r2,19830 <altera_avalon_jtag_uart_write+0x94>
        n = out - 1 - in;
   19818:	e0fff017 	ldw	r3,-64(fp)
   1981c:	e0bff317 	ldw	r2,-52(fp)
   19820:	1885c83a 	sub	r2,r3,r2
   19824:	10bfffc4 	addi	r2,r2,-1
   19828:	e0bff115 	stw	r2,-60(fp)
   1982c:	00000b06 	br	1985c <altera_avalon_jtag_uart_write+0xc0>
      else if (out > 0)
   19830:	e0bff017 	ldw	r2,-64(fp)
   19834:	10000526 	beq	r2,zero,1984c <altera_avalon_jtag_uart_write+0xb0>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
   19838:	00c20004 	movi	r3,2048
   1983c:	e0bff317 	ldw	r2,-52(fp)
   19840:	1885c83a 	sub	r2,r3,r2
   19844:	e0bff115 	stw	r2,-60(fp)
   19848:	00000406 	br	1985c <altera_avalon_jtag_uart_write+0xc0>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
   1984c:	00c1ffc4 	movi	r3,2047
   19850:	e0bff317 	ldw	r2,-52(fp)
   19854:	1885c83a 	sub	r2,r3,r2
   19858:	e0bff115 	stw	r2,-60(fp)

      if (n == 0)
   1985c:	e0bff117 	ldw	r2,-60(fp)
   19860:	1000011e 	bne	r2,zero,19868 <altera_avalon_jtag_uart_write+0xcc>
        break;
   19864:	00001d06 	br	198dc <altera_avalon_jtag_uart_write+0x140>

      if (n > count)
   19868:	e0fffe17 	ldw	r3,-8(fp)
   1986c:	e0bff117 	ldw	r2,-60(fp)
   19870:	1880022e 	bgeu	r3,r2,1987c <altera_avalon_jtag_uart_write+0xe0>
        n = count;
   19874:	e0bffe17 	ldw	r2,-8(fp)
   19878:	e0bff115 	stw	r2,-60(fp)

      memcpy(sp->tx_buf + in, ptr, n);
   1987c:	e0bff317 	ldw	r2,-52(fp)
   19880:	10821104 	addi	r2,r2,2116
   19884:	e0fffc17 	ldw	r3,-16(fp)
   19888:	1885883a 	add	r2,r3,r2
   1988c:	1009883a 	mov	r4,r2
   19890:	e17ffd17 	ldw	r5,-12(fp)
   19894:	e1bff117 	ldw	r6,-60(fp)
   19898:	00088700 	call	8870 <memcpy>
      ptr   += n;
   1989c:	e0fffd17 	ldw	r3,-12(fp)
   198a0:	e0bff117 	ldw	r2,-60(fp)
   198a4:	1885883a 	add	r2,r3,r2
   198a8:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
   198ac:	e0fffe17 	ldw	r3,-8(fp)
   198b0:	e0bff117 	ldw	r2,-60(fp)
   198b4:	1885c83a 	sub	r2,r3,r2
   198b8:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   198bc:	e0fff317 	ldw	r3,-52(fp)
   198c0:	e0bff117 	ldw	r2,-60(fp)
   198c4:	1885883a 	add	r2,r3,r2
   198c8:	10c1ffcc 	andi	r3,r2,2047
   198cc:	e0bffc17 	ldw	r2,-16(fp)
   198d0:	10c00f15 	stw	r3,60(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   198d4:	e0bffe17 	ldw	r2,-8(fp)
   198d8:	00bfc616 	blt	zero,r2,197f4 <__alt_mem_Flash_flash_data+0xf40197f4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   198dc:	0005303a 	rdctl	r2,status
   198e0:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   198e4:	e0fff717 	ldw	r3,-36(fp)
   198e8:	00bfff84 	movi	r2,-2
   198ec:	1884703a 	and	r2,r3,r2
   198f0:	1001703a 	wrctl	status,r2
  
  return context;
   198f4:	e0bff717 	ldw	r2,-36(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
   198f8:	e0bff415 	stw	r2,-48(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   198fc:	e0bffc17 	ldw	r2,-16(fp)
   19900:	10800817 	ldw	r2,32(r2)
   19904:	10c00094 	ori	r3,r2,2
   19908:	e0bffc17 	ldw	r2,-16(fp)
   1990c:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   19910:	e0bffc17 	ldw	r2,-16(fp)
   19914:	10800017 	ldw	r2,0(r2)
   19918:	10800104 	addi	r2,r2,4
   1991c:	1007883a 	mov	r3,r2
   19920:	e0bffc17 	ldw	r2,-16(fp)
   19924:	10800817 	ldw	r2,32(r2)
   19928:	18800035 	stwio	r2,0(r3)
   1992c:	e0bff417 	ldw	r2,-48(fp)
   19930:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   19934:	e0bff817 	ldw	r2,-32(fp)
   19938:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
   1993c:	e0bffe17 	ldw	r2,-8(fp)
   19940:	00802e0e 	bge	zero,r2,199fc <altera_avalon_jtag_uart_write+0x260>
    {
      if (flags & O_NONBLOCK)
   19944:	e0bfff17 	ldw	r2,-4(fp)
   19948:	1090000c 	andi	r2,r2,16384
   1994c:	10000126 	beq	r2,zero,19954 <altera_avalon_jtag_uart_write+0x1b8>
        break;
   19950:	00002c06 	br	19a04 <altera_avalon_jtag_uart_write+0x268>

#ifdef __ucosii__
      /* OS Present: Pend on a flag if the OS is running, otherwise spin */
      if(OSRunning == OS_TRUE) {
   19954:	008000b4 	movhi	r2,2
   19958:	10835644 	addi	r2,r2,3417
   1995c:	10800003 	ldbu	r2,0(r2)
   19960:	10803fcc 	andi	r2,r2,255
   19964:	10800058 	cmpnei	r2,r2,1
   19968:	1000161e 	bne	r2,zero,199c4 <altera_avalon_jtag_uart_write+0x228>
         * more profitable elsewhere.
         */
#ifdef ALTERA_AVALON_JTAG_UART_IGNORE_FIFO_FULL_ERROR
        if(!sp->host_inactive)
#endif
        ALT_FLAG_PEND (sp->events,
   1996c:	e0bffc17 	ldw	r2,-16(fp)
   19970:	10800c17 	ldw	r2,48(r2)
   19974:	e0bff915 	stw	r2,-28(fp)
   19978:	00800184 	movi	r2,6
   1997c:	e0bffa0d 	sth	r2,-24(fp)
   19980:	00bfe0c4 	movi	r2,-125
   19984:	e0bffa85 	stb	r2,-22(fp)
   19988:	e03ffb0d 	sth	zero,-20(fp)
                   OS_FLAGS flags, 
                   INT8U wait_type, 
                   INT16U timeout)
{
  INT8U err;
  if (OSRunning)
   1998c:	008000b4 	movhi	r2,2
   19990:	10835644 	addi	r2,r2,3417
   19994:	10800003 	ldbu	r2,0(r2)
   19998:	10803fcc 	andi	r2,r2,255
   1999c:	10001326 	beq	r2,zero,199ec <altera_avalon_jtag_uart_write+0x250>
  {
    OSFlagPend (group, flags, wait_type, timeout, &err);
   199a0:	e17ffa0b 	ldhu	r5,-24(fp)
   199a4:	e1bffa83 	ldbu	r6,-22(fp)
   199a8:	e0fffb0b 	ldhu	r3,-20(fp)
   199ac:	e0bffb84 	addi	r2,fp,-18
   199b0:	d8800015 	stw	r2,0(sp)
   199b4:	e13ff917 	ldw	r4,-28(fp)
   199b8:	180f883a 	mov	r7,r3
   199bc:	0012b780 	call	12b78 <OSFlagPend>
   199c0:	00000a06 	br	199ec <altera_avalon_jtag_uart_write+0x250>
        /*
         * OS not running: Wait for data to be removed from buffer.
         * Once the interrupt routine has removed some data then we
         * will be able to insert some more.
         */
        while (out == sp->tx_out && sp->host_inactive < sp->timeout)
   199c4:	0001883a 	nop
   199c8:	e0bffc17 	ldw	r2,-16(fp)
   199cc:	10c01017 	ldw	r3,64(r2)
   199d0:	e0bff017 	ldw	r2,-64(fp)
   199d4:	1880051e 	bne	r3,r2,199ec <altera_avalon_jtag_uart_write+0x250>
   199d8:	e0bffc17 	ldw	r2,-16(fp)
   199dc:	10c00917 	ldw	r3,36(r2)
   199e0:	e0bffc17 	ldw	r2,-16(fp)
   199e4:	10800117 	ldw	r2,4(r2)
   199e8:	18bff736 	bltu	r3,r2,199c8 <__alt_mem_Flash_flash_data+0xf40199c8>
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
   199ec:	e0bffc17 	ldw	r2,-16(fp)
   199f0:	10800917 	ldw	r2,36(r2)
   199f4:	10000126 	beq	r2,zero,199fc <altera_avalon_jtag_uart_write+0x260>
         break;
   199f8:	00000206 	br	19a04 <altera_avalon_jtag_uart_write+0x268>
    }
  }
  while (count > 0);
   199fc:	e0bffe17 	ldw	r2,-8(fp)
   19a00:	00bf7b16 	blt	zero,r2,197f0 <__alt_mem_Flash_flash_data+0xf40197f0>

  /*
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);
   19a04:	e0bffc17 	ldw	r2,-16(fp)
   19a08:	10800b17 	ldw	r2,44(r2)
   19a0c:	1009883a 	mov	r4,r2
   19a10:	001677c0 	call	1677c <OSSemPost>

  if (ptr != start)
   19a14:	e0fffd17 	ldw	r3,-12(fp)
   19a18:	e0bff217 	ldw	r2,-56(fp)
   19a1c:	18800426 	beq	r3,r2,19a30 <altera_avalon_jtag_uart_write+0x294>
    return ptr - start;
   19a20:	e0fffd17 	ldw	r3,-12(fp)
   19a24:	e0bff217 	ldw	r2,-56(fp)
   19a28:	1885c83a 	sub	r2,r3,r2
   19a2c:	00000606 	br	19a48 <altera_avalon_jtag_uart_write+0x2ac>
  else if (flags & O_NONBLOCK)
   19a30:	e0bfff17 	ldw	r2,-4(fp)
   19a34:	1090000c 	andi	r2,r2,16384
   19a38:	10000226 	beq	r2,zero,19a44 <altera_avalon_jtag_uart_write+0x2a8>
    return -EWOULDBLOCK;
   19a3c:	00bffd44 	movi	r2,-11
   19a40:	00000106 	br	19a48 <altera_avalon_jtag_uart_write+0x2ac>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
   19a44:	00bffec4 	movi	r2,-5
}
   19a48:	e037883a 	mov	sp,fp
   19a4c:	dfc00117 	ldw	ra,4(sp)
   19a50:	df000017 	ldw	fp,0(sp)
   19a54:	dec00204 	addi	sp,sp,8
   19a58:	f800283a 	ret

00019a5c <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
   19a5c:	defff904 	addi	sp,sp,-28
   19a60:	dfc00615 	stw	ra,24(sp)
   19a64:	df000515 	stw	fp,20(sp)
   19a68:	df000504 	addi	fp,sp,20
   19a6c:	e13ffe15 	stw	r4,-8(fp)
   19a70:	e17fff15 	stw	r5,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
   19a74:	0007883a 	mov	r3,zero
   19a78:	e0bffe17 	ldw	r2,-8(fp)
   19a7c:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
   19a80:	e0bffe17 	ldw	r2,-8(fp)
   19a84:	10800104 	addi	r2,r2,4
   19a88:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   19a8c:	0005303a 	rdctl	r2,status
   19a90:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   19a94:	e0fffc17 	ldw	r3,-16(fp)
   19a98:	00bfff84 	movi	r2,-2
   19a9c:	1884703a 	and	r2,r3,r2
   19aa0:	1001703a 	wrctl	status,r2
  
  return context;
   19aa4:	e0bffc17 	ldw	r2,-16(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
   19aa8:	e0bffb15 	stw	r2,-20(fp)
  alt_tick ();
   19aac:	001bad80 	call	1bad8 <alt_tick>
   19ab0:	e0bffb17 	ldw	r2,-20(fp)
   19ab4:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   19ab8:	e0bffd17 	ldw	r2,-12(fp)
   19abc:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
   19ac0:	e037883a 	mov	sp,fp
   19ac4:	dfc00117 	ldw	ra,4(sp)
   19ac8:	df000017 	ldw	fp,0(sp)
   19acc:	dec00204 	addi	sp,sp,8
   19ad0:	f800283a 	ret

00019ad4 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
   19ad4:	defff904 	addi	sp,sp,-28
   19ad8:	dfc00615 	stw	ra,24(sp)
   19adc:	df000515 	stw	fp,20(sp)
   19ae0:	df000504 	addi	fp,sp,20
   19ae4:	e13ffc15 	stw	r4,-16(fp)
   19ae8:	e17ffd15 	stw	r5,-12(fp)
   19aec:	e1bffe15 	stw	r6,-8(fp)
   19af0:	e1ffff15 	stw	r7,-4(fp)
   19af4:	e0bfff17 	ldw	r2,-4(fp)
   19af8:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
   19afc:	008000b4 	movhi	r2,2
   19b00:	10836b04 	addi	r2,r2,3500
   19b04:	10800017 	ldw	r2,0(r2)
   19b08:	1000041e 	bne	r2,zero,19b1c <alt_avalon_timer_sc_init+0x48>
  {
    _alt_tick_rate = nticks;
   19b0c:	008000b4 	movhi	r2,2
   19b10:	10836b04 	addi	r2,r2,3500
   19b14:	e0fffb17 	ldw	r3,-20(fp)
   19b18:	10c00015 	stw	r3,0(r2)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
   19b1c:	e0bffc17 	ldw	r2,-16(fp)
   19b20:	10800104 	addi	r2,r2,4
   19b24:	00c001c4 	movi	r3,7
   19b28:	10c00035 	stwio	r3,0(r2)
  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
   19b2c:	e13ffe17 	ldw	r4,-8(fp)
   19b30:	e17ffc17 	ldw	r5,-16(fp)
   19b34:	018000b4 	movhi	r6,2
   19b38:	31a69704 	addi	r6,r6,-26020
   19b3c:	001b61c0 	call	1b61c <alt_irq_register>
#endif  
}
   19b40:	e037883a 	mov	sp,fp
   19b44:	dfc00117 	ldw	ra,4(sp)
   19b48:	df000017 	ldw	fp,0(sp)
   19b4c:	dec00204 	addi	sp,sp,8
   19b50:	f800283a 	ret

00019b54 <get_DDRAM_addr>:
 * @sa the datasheet for the LCD Display Controller on the DE2 Board
 * @note the function requires that the input are in the valid range
 *
 **/
unsigned char get_DDRAM_addr(unsigned x_pos, unsigned y_pos)
{
   19b54:	defffc04 	addi	sp,sp,-16
   19b58:	df000315 	stw	fp,12(sp)
   19b5c:	df000304 	addi	fp,sp,12
   19b60:	e13ffe15 	stw	r4,-8(fp)
   19b64:	e17fff15 	stw	r5,-4(fp)
	//assume valid inputs
	unsigned char addr = 0x00000000;
   19b68:	e03ffd05 	stb	zero,-12(fp)
	if (y_pos == 0)
   19b6c:	e0bfff17 	ldw	r2,-4(fp)
   19b70:	1000061e 	bne	r2,zero,19b8c <get_DDRAM_addr+0x38>
	{
		addr |= x_pos;
   19b74:	e0bffe17 	ldw	r2,-8(fp)
   19b78:	1007883a 	mov	r3,r2
   19b7c:	e0bffd03 	ldbu	r2,-12(fp)
   19b80:	1884b03a 	or	r2,r3,r2
   19b84:	e0bffd05 	stb	r2,-12(fp)
   19b88:	00000806 	br	19bac <get_DDRAM_addr+0x58>
	}
	else
	{
		addr |= x_pos;
   19b8c:	e0bffe17 	ldw	r2,-8(fp)
   19b90:	1007883a 	mov	r3,r2
   19b94:	e0bffd03 	ldbu	r2,-12(fp)
   19b98:	1884b03a 	or	r2,r3,r2
   19b9c:	e0bffd05 	stb	r2,-12(fp)
		addr |= 0x00000040;
   19ba0:	e0bffd03 	ldbu	r2,-12(fp)
   19ba4:	10801014 	ori	r2,r2,64
   19ba8:	e0bffd05 	stb	r2,-12(fp)
	}
	// b_7 is always 1 for DDRAM address, see datasheet
	return (addr | 0x00000080);
   19bac:	e0fffd03 	ldbu	r3,-12(fp)
   19bb0:	00bfe004 	movi	r2,-128
   19bb4:	1884b03a 	or	r2,r3,r2
}
   19bb8:	e037883a 	mov	sp,fp
   19bbc:	df000017 	ldw	fp,0(sp)
   19bc0:	dec00104 	addi	sp,sp,4
   19bc4:	f800283a 	ret

00019bc8 <alt_up_character_lcd_send_cmd>:
 * @param cmd -- the command bits 
 *
 * @return nothing
 **/
void alt_up_character_lcd_send_cmd(alt_up_character_lcd_dev *lcd, unsigned char cmd)
{
   19bc8:	defffd04 	addi	sp,sp,-12
   19bcc:	df000215 	stw	fp,8(sp)
   19bd0:	df000204 	addi	fp,sp,8
   19bd4:	e13ffe15 	stw	r4,-8(fp)
   19bd8:	2805883a 	mov	r2,r5
   19bdc:	e0bfff05 	stb	r2,-4(fp)
 	// NOTE: We use the term Instruction Register and Control Register interchangeably
	IOWR_ALT_UP_CHARACTER_LCD_COMMAND(lcd->base, cmd);
   19be0:	e0bffe17 	ldw	r2,-8(fp)
   19be4:	10800a17 	ldw	r2,40(r2)
   19be8:	1007883a 	mov	r3,r2
   19bec:	e0bfff03 	ldbu	r2,-4(fp)
   19bf0:	18800025 	stbio	r2,0(r3)
}
   19bf4:	e037883a 	mov	sp,fp
   19bf8:	df000017 	ldw	fp,0(sp)
   19bfc:	dec00104 	addi	sp,sp,4
   19c00:	f800283a 	ret

00019c04 <alt_up_character_lcd_init>:
 * file for a detailed description of each function
 */
////////////////////////////////////////////////////////////////////////////

void alt_up_character_lcd_init(alt_up_character_lcd_dev *lcd)
{
   19c04:	defffe04 	addi	sp,sp,-8
   19c08:	df000115 	stw	fp,4(sp)
   19c0c:	df000104 	addi	fp,sp,4
   19c10:	e13fff15 	stw	r4,-4(fp)
	IOWR_ALT_UP_CHARACTER_LCD_COMMAND(lcd->base, ALT_UP_CHARACTER_LCD_COMM_CLEAR_DISPLAY);
   19c14:	e0bfff17 	ldw	r2,-4(fp)
   19c18:	10800a17 	ldw	r2,40(r2)
   19c1c:	1007883a 	mov	r3,r2
   19c20:	00800044 	movi	r2,1
   19c24:	18800025 	stbio	r2,0(r3)
	// register the device 
	// see "Developing Device Drivers for the HAL" in "Nios II Software Developer's Handbook"
}
   19c28:	e037883a 	mov	sp,fp
   19c2c:	df000017 	ldw	fp,0(sp)
   19c30:	dec00104 	addi	sp,sp,4
   19c34:	f800283a 	ret

00019c38 <alt_up_character_lcd_open_dev>:

alt_up_character_lcd_dev* alt_up_character_lcd_open_dev(const char* name)
{
   19c38:	defffc04 	addi	sp,sp,-16
   19c3c:	dfc00315 	stw	ra,12(sp)
   19c40:	df000215 	stw	fp,8(sp)
   19c44:	df000204 	addi	fp,sp,8
   19c48:	e13fff15 	stw	r4,-4(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_character_lcd_dev *dev = (alt_up_character_lcd_dev*)alt_find_dev(name, &alt_dev_list);
   19c4c:	e13fff17 	ldw	r4,-4(fp)
   19c50:	014000b4 	movhi	r5,2
   19c54:	297b3004 	addi	r5,r5,-4928
   19c58:	001b4240 	call	1b424 <alt_find_dev>
   19c5c:	e0bffe15 	stw	r2,-8(fp)

  return dev;
   19c60:	e0bffe17 	ldw	r2,-8(fp)
}
   19c64:	e037883a 	mov	sp,fp
   19c68:	dfc00117 	ldw	ra,4(sp)
   19c6c:	df000017 	ldw	fp,0(sp)
   19c70:	dec00204 	addi	sp,sp,8
   19c74:	f800283a 	ret

00019c78 <alt_up_character_lcd_write>:

void alt_up_character_lcd_write(alt_up_character_lcd_dev *dev, const char *ptr, unsigned int len)
{
   19c78:	defffb04 	addi	sp,sp,-20
   19c7c:	df000415 	stw	fp,16(sp)
   19c80:	df000404 	addi	fp,sp,16
   19c84:	e13ffd15 	stw	r4,-12(fp)
   19c88:	e17ffe15 	stw	r5,-8(fp)
   19c8c:	e1bfff15 	stw	r6,-4(fp)
	unsigned int i;
	for (i = 0; i < len; i++)
   19c90:	e03ffc15 	stw	zero,-16(fp)
   19c94:	00000f06 	br	19cd4 <alt_up_character_lcd_write+0x5c>
	{
		IOWR_ALT_UP_CHARACTER_LCD_DATA(dev->base, *(ptr+i));
   19c98:	e0bffd17 	ldw	r2,-12(fp)
   19c9c:	10800a17 	ldw	r2,40(r2)
   19ca0:	10800044 	addi	r2,r2,1
   19ca4:	1009883a 	mov	r4,r2
   19ca8:	e0fffe17 	ldw	r3,-8(fp)
   19cac:	e0bffc17 	ldw	r2,-16(fp)
   19cb0:	1885883a 	add	r2,r3,r2
   19cb4:	10800003 	ldbu	r2,0(r2)
   19cb8:	10803fcc 	andi	r2,r2,255
   19cbc:	1080201c 	xori	r2,r2,128
   19cc0:	10bfe004 	addi	r2,r2,-128
   19cc4:	20800025 	stbio	r2,0(r4)
}

void alt_up_character_lcd_write(alt_up_character_lcd_dev *dev, const char *ptr, unsigned int len)
{
	unsigned int i;
	for (i = 0; i < len; i++)
   19cc8:	e0bffc17 	ldw	r2,-16(fp)
   19ccc:	10800044 	addi	r2,r2,1
   19cd0:	e0bffc15 	stw	r2,-16(fp)
   19cd4:	e0fffc17 	ldw	r3,-16(fp)
   19cd8:	e0bfff17 	ldw	r2,-4(fp)
   19cdc:	18bfee36 	bltu	r3,r2,19c98 <__alt_mem_Flash_flash_data+0xf4019c98>
	{
		IOWR_ALT_UP_CHARACTER_LCD_DATA(dev->base, *(ptr+i));
	}
}
   19ce0:	e037883a 	mov	sp,fp
   19ce4:	df000017 	ldw	fp,0(sp)
   19ce8:	dec00104 	addi	sp,sp,4
   19cec:	f800283a 	ret

00019cf0 <alt_up_character_lcd_string>:

void alt_up_character_lcd_string(alt_up_character_lcd_dev *dev, const char *ptr)
{
   19cf0:	defffd04 	addi	sp,sp,-12
   19cf4:	df000215 	stw	fp,8(sp)
   19cf8:	df000204 	addi	fp,sp,8
   19cfc:	e13ffe15 	stw	r4,-8(fp)
   19d00:	e17fff15 	stw	r5,-4(fp)
	while ( *ptr )
   19d04:	00000d06 	br	19d3c <alt_up_character_lcd_string+0x4c>
	{
		IOWR_ALT_UP_CHARACTER_LCD_DATA(dev->base, *(ptr));
   19d08:	e0bffe17 	ldw	r2,-8(fp)
   19d0c:	10800a17 	ldw	r2,40(r2)
   19d10:	10800044 	addi	r2,r2,1
   19d14:	1007883a 	mov	r3,r2
   19d18:	e0bfff17 	ldw	r2,-4(fp)
   19d1c:	10800003 	ldbu	r2,0(r2)
   19d20:	10803fcc 	andi	r2,r2,255
   19d24:	1080201c 	xori	r2,r2,128
   19d28:	10bfe004 	addi	r2,r2,-128
   19d2c:	18800025 	stbio	r2,0(r3)
		++ptr;
   19d30:	e0bfff17 	ldw	r2,-4(fp)
   19d34:	10800044 	addi	r2,r2,1
   19d38:	e0bfff15 	stw	r2,-4(fp)
	}
}

void alt_up_character_lcd_string(alt_up_character_lcd_dev *dev, const char *ptr)
{
	while ( *ptr )
   19d3c:	e0bfff17 	ldw	r2,-4(fp)
   19d40:	10800003 	ldbu	r2,0(r2)
   19d44:	10803fcc 	andi	r2,r2,255
   19d48:	1080201c 	xori	r2,r2,128
   19d4c:	10bfe004 	addi	r2,r2,-128
   19d50:	103fed1e 	bne	r2,zero,19d08 <__alt_mem_Flash_flash_data+0xf4019d08>
	{
		IOWR_ALT_UP_CHARACTER_LCD_DATA(dev->base, *(ptr));
		++ptr;
	}
}
   19d54:	e037883a 	mov	sp,fp
   19d58:	df000017 	ldw	fp,0(sp)
   19d5c:	dec00104 	addi	sp,sp,4
   19d60:	f800283a 	ret

00019d64 <alt_up_character_lcd_write_fd>:

// this function isn't used, and is included for future upgrades
int alt_up_character_lcd_write_fd(alt_fd *fd, const char *ptr, int len)
{
   19d64:	defffb04 	addi	sp,sp,-20
   19d68:	dfc00415 	stw	ra,16(sp)
   19d6c:	df000315 	stw	fp,12(sp)
   19d70:	df000304 	addi	fp,sp,12
   19d74:	e13ffd15 	stw	r4,-12(fp)
   19d78:	e17ffe15 	stw	r5,-8(fp)
   19d7c:	e1bfff15 	stw	r6,-4(fp)
	alt_up_character_lcd_write( (alt_up_character_lcd_dev *) fd->dev, ptr, (unsigned int) len);
   19d80:	e0bffd17 	ldw	r2,-12(fp)
   19d84:	10c00017 	ldw	r3,0(r2)
   19d88:	e0bfff17 	ldw	r2,-4(fp)
   19d8c:	1809883a 	mov	r4,r3
   19d90:	e17ffe17 	ldw	r5,-8(fp)
   19d94:	100d883a 	mov	r6,r2
   19d98:	0019c780 	call	19c78 <alt_up_character_lcd_write>
	return 0;
   19d9c:	0005883a 	mov	r2,zero
}
   19da0:	e037883a 	mov	sp,fp
   19da4:	dfc00117 	ldw	ra,4(sp)
   19da8:	df000017 	ldw	fp,0(sp)
   19dac:	dec00204 	addi	sp,sp,8
   19db0:	f800283a 	ret

00019db4 <alt_up_character_lcd_set_cursor_pos>:

int alt_up_character_lcd_set_cursor_pos(alt_up_character_lcd_dev *lcd, unsigned x_pos, 
	 unsigned y_pos)
{
   19db4:	defffa04 	addi	sp,sp,-24
   19db8:	dfc00515 	stw	ra,20(sp)
   19dbc:	df000415 	stw	fp,16(sp)
   19dc0:	df000404 	addi	fp,sp,16
   19dc4:	e13ffd15 	stw	r4,-12(fp)
   19dc8:	e17ffe15 	stw	r5,-8(fp)
   19dcc:	e1bfff15 	stw	r6,-4(fp)
	//boundary check
	if (x_pos > 39 || y_pos > 1 )
   19dd0:	e0bffe17 	ldw	r2,-8(fp)
   19dd4:	10800a28 	cmpgeui	r2,r2,40
   19dd8:	1000031e 	bne	r2,zero,19de8 <alt_up_character_lcd_set_cursor_pos+0x34>
   19ddc:	e0bfff17 	ldw	r2,-4(fp)
   19de0:	108000b0 	cmpltui	r2,r2,2
   19de4:	1000021e 	bne	r2,zero,19df0 <alt_up_character_lcd_set_cursor_pos+0x3c>
		// invalid argument
		return -1;
   19de8:	00bfffc4 	movi	r2,-1
   19dec:	00000906 	br	19e14 <alt_up_character_lcd_set_cursor_pos+0x60>
	// calculate address
	unsigned char addr = get_DDRAM_addr(x_pos, y_pos);
   19df0:	e13ffe17 	ldw	r4,-8(fp)
   19df4:	e17fff17 	ldw	r5,-4(fp)
   19df8:	0019b540 	call	19b54 <get_DDRAM_addr>
   19dfc:	e0bffc05 	stb	r2,-16(fp)
	// set the cursor
	alt_up_character_lcd_send_cmd(lcd, addr);
   19e00:	e0bffc03 	ldbu	r2,-16(fp)
   19e04:	e13ffd17 	ldw	r4,-12(fp)
   19e08:	100b883a 	mov	r5,r2
   19e0c:	0019bc80 	call	19bc8 <alt_up_character_lcd_send_cmd>
	return 0;
   19e10:	0005883a 	mov	r2,zero
}
   19e14:	e037883a 	mov	sp,fp
   19e18:	dfc00117 	ldw	ra,4(sp)
   19e1c:	df000017 	ldw	fp,0(sp)
   19e20:	dec00204 	addi	sp,sp,8
   19e24:	f800283a 	ret

00019e28 <alt_up_character_lcd_shift_cursor>:

void alt_up_character_lcd_shift_cursor(alt_up_character_lcd_dev *lcd, int x_right_shift_offset)
{
   19e28:	defffb04 	addi	sp,sp,-20
   19e2c:	dfc00415 	stw	ra,16(sp)
   19e30:	df000315 	stw	fp,12(sp)
   19e34:	df000304 	addi	fp,sp,12
   19e38:	e13ffe15 	stw	r4,-8(fp)
   19e3c:	e17fff15 	stw	r5,-4(fp)
	if (x_right_shift_offset == 0) 
   19e40:	e0bfff17 	ldw	r2,-4(fp)
   19e44:	1000011e 	bne	r2,zero,19e4c <alt_up_character_lcd_shift_cursor+0x24>
		// don't ask me to do nothing 
		return;
   19e48:	00001406 	br	19e9c <alt_up_character_lcd_shift_cursor+0x74>

	// see shift right or left
	unsigned char shift_cmd = (x_right_shift_offset > 0) ? 
   19e4c:	e0bfff17 	ldw	r2,-4(fp)
   19e50:	0080020e 	bge	zero,r2,19e5c <alt_up_character_lcd_shift_cursor+0x34>
   19e54:	00800504 	movi	r2,20
   19e58:	00000106 	br	19e60 <alt_up_character_lcd_shift_cursor+0x38>
   19e5c:	00800404 	movi	r2,16
   19e60:	e0bffd45 	stb	r2,-11(fp)
		ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_LEFT;
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
   19e64:	e0bfff17 	ldw	r2,-4(fp)
   19e68:	1000010e 	bge	r2,zero,19e70 <alt_up_character_lcd_shift_cursor+0x48>
   19e6c:	0085c83a 	sub	r2,zero,r2
   19e70:	e0bffd05 	stb	r2,-12(fp)
		-x_right_shift_offset;
	// do the shift
	while (num_offset-- > 0)
   19e74:	00000406 	br	19e88 <alt_up_character_lcd_shift_cursor+0x60>
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
   19e78:	e0bffd43 	ldbu	r2,-11(fp)
   19e7c:	e13ffe17 	ldw	r4,-8(fp)
   19e80:	100b883a 	mov	r5,r2
   19e84:	0019bc80 	call	19bc8 <alt_up_character_lcd_send_cmd>
		ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_LEFT;
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
		-x_right_shift_offset;
	// do the shift
	while (num_offset-- > 0)
   19e88:	e0bffd03 	ldbu	r2,-12(fp)
   19e8c:	10ffffc4 	addi	r3,r2,-1
   19e90:	e0fffd05 	stb	r3,-12(fp)
   19e94:	10803fcc 	andi	r2,r2,255
   19e98:	103ff71e 	bne	r2,zero,19e78 <__alt_mem_Flash_flash_data+0xf4019e78>
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
}
   19e9c:	e037883a 	mov	sp,fp
   19ea0:	dfc00117 	ldw	ra,4(sp)
   19ea4:	df000017 	ldw	fp,0(sp)
   19ea8:	dec00204 	addi	sp,sp,8
   19eac:	f800283a 	ret

00019eb0 <alt_up_character_lcd_shift_display>:

void alt_up_character_lcd_shift_display(alt_up_character_lcd_dev *lcd, int x_right_shift_offset)
{
   19eb0:	defffb04 	addi	sp,sp,-20
   19eb4:	dfc00415 	stw	ra,16(sp)
   19eb8:	df000315 	stw	fp,12(sp)
   19ebc:	df000304 	addi	fp,sp,12
   19ec0:	e13ffe15 	stw	r4,-8(fp)
   19ec4:	e17fff15 	stw	r5,-4(fp)
	if (x_right_shift_offset == 0) 
   19ec8:	e0bfff17 	ldw	r2,-4(fp)
   19ecc:	1000011e 	bne	r2,zero,19ed4 <alt_up_character_lcd_shift_display+0x24>
		// don't ask me to do nothing 
		return;
   19ed0:	00001406 	br	19f24 <alt_up_character_lcd_shift_display+0x74>

	// see shift right or left
	unsigned char shift_cmd = (x_right_shift_offset > 0) ? 
   19ed4:	e0bfff17 	ldw	r2,-4(fp)
   19ed8:	0080020e 	bge	zero,r2,19ee4 <alt_up_character_lcd_shift_display+0x34>
   19edc:	00800704 	movi	r2,28
   19ee0:	00000106 	br	19ee8 <alt_up_character_lcd_shift_display+0x38>
   19ee4:	00800604 	movi	r2,24
   19ee8:	e0bffd45 	stb	r2,-11(fp)
		ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_LEFT;
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
   19eec:	e0bfff17 	ldw	r2,-4(fp)
   19ef0:	1000010e 	bge	r2,zero,19ef8 <alt_up_character_lcd_shift_display+0x48>
   19ef4:	0085c83a 	sub	r2,zero,r2
   19ef8:	e0bffd05 	stb	r2,-12(fp)
		-x_right_shift_offset;
	// do the shift
	while (num_offset-- > 0)
   19efc:	00000406 	br	19f10 <alt_up_character_lcd_shift_display+0x60>
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
   19f00:	e0bffd43 	ldbu	r2,-11(fp)
   19f04:	e13ffe17 	ldw	r4,-8(fp)
   19f08:	100b883a 	mov	r5,r2
   19f0c:	0019bc80 	call	19bc8 <alt_up_character_lcd_send_cmd>
		ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_LEFT;
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
		-x_right_shift_offset;
	// do the shift
	while (num_offset-- > 0)
   19f10:	e0bffd03 	ldbu	r2,-12(fp)
   19f14:	10ffffc4 	addi	r3,r2,-1
   19f18:	e0fffd05 	stb	r3,-12(fp)
   19f1c:	10803fcc 	andi	r2,r2,255
   19f20:	103ff71e 	bne	r2,zero,19f00 <__alt_mem_Flash_flash_data+0xf4019f00>
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
}
   19f24:	e037883a 	mov	sp,fp
   19f28:	dfc00117 	ldw	ra,4(sp)
   19f2c:	df000017 	ldw	fp,0(sp)
   19f30:	dec00204 	addi	sp,sp,8
   19f34:	f800283a 	ret

00019f38 <alt_up_character_lcd_erase_pos>:

int alt_up_character_lcd_erase_pos(alt_up_character_lcd_dev *lcd, unsigned x_pos, unsigned y_pos)
{
   19f38:	defffa04 	addi	sp,sp,-24
   19f3c:	dfc00515 	stw	ra,20(sp)
   19f40:	df000415 	stw	fp,16(sp)
   19f44:	df000404 	addi	fp,sp,16
   19f48:	e13ffd15 	stw	r4,-12(fp)
   19f4c:	e17ffe15 	stw	r5,-8(fp)
   19f50:	e1bfff15 	stw	r6,-4(fp)
	// boundary check
	if (x_pos > 39 || y_pos > 1 )
   19f54:	e0bffe17 	ldw	r2,-8(fp)
   19f58:	10800a28 	cmpgeui	r2,r2,40
   19f5c:	1000031e 	bne	r2,zero,19f6c <alt_up_character_lcd_erase_pos+0x34>
   19f60:	e0bfff17 	ldw	r2,-4(fp)
   19f64:	108000b0 	cmpltui	r2,r2,2
   19f68:	1000021e 	bne	r2,zero,19f74 <alt_up_character_lcd_erase_pos+0x3c>
		return -1;
   19f6c:	00bfffc4 	movi	r2,-1
   19f70:	00000f06 	br	19fb0 <alt_up_character_lcd_erase_pos+0x78>

	// get address
	unsigned char addr = get_DDRAM_addr(x_pos, y_pos);
   19f74:	e13ffe17 	ldw	r4,-8(fp)
   19f78:	e17fff17 	ldw	r5,-4(fp)
   19f7c:	0019b540 	call	19b54 <get_DDRAM_addr>
   19f80:	e0bffc05 	stb	r2,-16(fp)
	// set cursor to dest point
	alt_up_character_lcd_send_cmd(lcd, addr);
   19f84:	e0bffc03 	ldbu	r2,-16(fp)
   19f88:	e13ffd17 	ldw	r4,-12(fp)
   19f8c:	100b883a 	mov	r5,r2
   19f90:	0019bc80 	call	19bc8 <alt_up_character_lcd_send_cmd>
	//send an empty char as erase (refer to the Character Generator ROM part of the Datasheet)
	IOWR_ALT_UP_CHARACTER_LCD_DATA(lcd->base, (0x00000002) );
   19f94:	e0bffd17 	ldw	r2,-12(fp)
   19f98:	10800a17 	ldw	r2,40(r2)
   19f9c:	10800044 	addi	r2,r2,1
   19fa0:	1007883a 	mov	r3,r2
   19fa4:	00800084 	movi	r2,2
   19fa8:	18800025 	stbio	r2,0(r3)
	return 0;
   19fac:	0005883a 	mov	r2,zero
}
   19fb0:	e037883a 	mov	sp,fp
   19fb4:	dfc00117 	ldw	ra,4(sp)
   19fb8:	df000017 	ldw	fp,0(sp)
   19fbc:	dec00204 	addi	sp,sp,8
   19fc0:	f800283a 	ret

00019fc4 <alt_up_character_lcd_cursor_off>:

void alt_up_character_lcd_cursor_off(alt_up_character_lcd_dev *lcd)
{
   19fc4:	defffd04 	addi	sp,sp,-12
   19fc8:	dfc00215 	stw	ra,8(sp)
   19fcc:	df000115 	stw	fp,4(sp)
   19fd0:	df000104 	addi	fp,sp,4
   19fd4:	e13fff15 	stw	r4,-4(fp)
	alt_up_character_lcd_send_cmd(lcd, ALT_UP_CHARACTER_LCD_COMM_CURSOR_OFF);
   19fd8:	e13fff17 	ldw	r4,-4(fp)
   19fdc:	01400304 	movi	r5,12
   19fe0:	0019bc80 	call	19bc8 <alt_up_character_lcd_send_cmd>
}
   19fe4:	e037883a 	mov	sp,fp
   19fe8:	dfc00117 	ldw	ra,4(sp)
   19fec:	df000017 	ldw	fp,0(sp)
   19ff0:	dec00204 	addi	sp,sp,8
   19ff4:	f800283a 	ret

00019ff8 <alt_up_character_lcd_cursor_blink_on>:

void alt_up_character_lcd_cursor_blink_on(alt_up_character_lcd_dev *lcd)
{
   19ff8:	defffd04 	addi	sp,sp,-12
   19ffc:	dfc00215 	stw	ra,8(sp)
   1a000:	df000115 	stw	fp,4(sp)
   1a004:	df000104 	addi	fp,sp,4
   1a008:	e13fff15 	stw	r4,-4(fp)
	alt_up_character_lcd_send_cmd(lcd, ALT_UP_CHARACTER_LCD_COMM_CURSOR_BLINK_ON);
   1a00c:	e13fff17 	ldw	r4,-4(fp)
   1a010:	014003c4 	movi	r5,15
   1a014:	0019bc80 	call	19bc8 <alt_up_character_lcd_send_cmd>
}
   1a018:	e037883a 	mov	sp,fp
   1a01c:	dfc00117 	ldw	ra,4(sp)
   1a020:	df000017 	ldw	fp,0(sp)
   1a024:	dec00204 	addi	sp,sp,8
   1a028:	f800283a 	ret

0001a02c <alt_up_irda_enable_read_interrupt>:
#include "altera_up_avalon_irda.h"
#include "altera_up_avalon_irda_regs.h"


void alt_up_irda_enable_read_interrupt(alt_up_irda_dev *irda)
{
   1a02c:	defffd04 	addi	sp,sp,-12
   1a030:	df000215 	stw	fp,8(sp)
   1a034:	df000204 	addi	fp,sp,8
   1a038:	e13fff15 	stw	r4,-4(fp)
	alt_u32 ctrl_reg;
	ctrl_reg = IORD_ALT_UP_IRDA_CONTROL(irda->base); 
   1a03c:	e0bfff17 	ldw	r2,-4(fp)
   1a040:	10800a17 	ldw	r2,40(r2)
   1a044:	10800104 	addi	r2,r2,4
   1a048:	10800037 	ldwio	r2,0(r2)
   1a04c:	e0bffe15 	stw	r2,-8(fp)
	// set RE to 1 while maintaining other bits the same
	ctrl_reg |= ALT_UP_IRDA_CONTROL_RE_MSK;
   1a050:	e0bffe17 	ldw	r2,-8(fp)
   1a054:	10800054 	ori	r2,r2,1
   1a058:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_IRDA_CONTROL(irda->base, ctrl_reg);
   1a05c:	e0bfff17 	ldw	r2,-4(fp)
   1a060:	10800a17 	ldw	r2,40(r2)
   1a064:	10800104 	addi	r2,r2,4
   1a068:	1007883a 	mov	r3,r2
   1a06c:	e0bffe17 	ldw	r2,-8(fp)
   1a070:	18800035 	stwio	r2,0(r3)
}
   1a074:	e037883a 	mov	sp,fp
   1a078:	df000017 	ldw	fp,0(sp)
   1a07c:	dec00104 	addi	sp,sp,4
   1a080:	f800283a 	ret

0001a084 <alt_up_irda_disable_read_interrupt>:

void alt_up_irda_disable_read_interrupt(alt_up_irda_dev *irda)
{
   1a084:	defffd04 	addi	sp,sp,-12
   1a088:	df000215 	stw	fp,8(sp)
   1a08c:	df000204 	addi	fp,sp,8
   1a090:	e13fff15 	stw	r4,-4(fp)
	alt_u32 ctrl_reg;
	ctrl_reg = IORD_ALT_UP_IRDA_CONTROL(irda->base); 
   1a094:	e0bfff17 	ldw	r2,-4(fp)
   1a098:	10800a17 	ldw	r2,40(r2)
   1a09c:	10800104 	addi	r2,r2,4
   1a0a0:	10800037 	ldwio	r2,0(r2)
   1a0a4:	e0bffe15 	stw	r2,-8(fp)
	// set RE to 0 while maintaining other bits the same
	ctrl_reg &= ~ALT_UP_IRDA_CONTROL_RE_MSK;
   1a0a8:	e0fffe17 	ldw	r3,-8(fp)
   1a0ac:	00bfff84 	movi	r2,-2
   1a0b0:	1884703a 	and	r2,r3,r2
   1a0b4:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_IRDA_CONTROL(irda->base, ctrl_reg);
   1a0b8:	e0bfff17 	ldw	r2,-4(fp)
   1a0bc:	10800a17 	ldw	r2,40(r2)
   1a0c0:	10800104 	addi	r2,r2,4
   1a0c4:	1007883a 	mov	r3,r2
   1a0c8:	e0bffe17 	ldw	r2,-8(fp)
   1a0cc:	18800035 	stwio	r2,0(r3)
}
   1a0d0:	e037883a 	mov	sp,fp
   1a0d4:	df000017 	ldw	fp,0(sp)
   1a0d8:	dec00104 	addi	sp,sp,4
   1a0dc:	f800283a 	ret

0001a0e0 <alt_up_irda_get_used_space_in_read_FIFO>:

unsigned alt_up_irda_get_used_space_in_read_FIFO(alt_up_irda_dev *irda)
{
   1a0e0:	defffd04 	addi	sp,sp,-12
   1a0e4:	df000215 	stw	fp,8(sp)
   1a0e8:	df000204 	addi	fp,sp,8
   1a0ec:	e13fff15 	stw	r4,-4(fp)
	alt_u16 ravail = 0;
   1a0f0:	e03ffe0d 	sth	zero,-8(fp)
	// we can only read the 16 bits for RAVAIL --- a read of DATA will discard the data
//	ravail = IORD_16DIRECT(IOADDR_ALT_UP_IRDA_DATA(irda->base), 2); 
//	return ravail;
	ravail = IORD_ALT_UP_IRDA_RAVAIL(irda->base); 
   1a0f4:	e0bfff17 	ldw	r2,-4(fp)
   1a0f8:	10800a17 	ldw	r2,40(r2)
   1a0fc:	10800084 	addi	r2,r2,2
   1a100:	1080002b 	ldhuio	r2,0(r2)
   1a104:	10bfffcc 	andi	r2,r2,65535
   1a108:	e0bffe0d 	sth	r2,-8(fp)
	return (ravail & ALT_UP_IRDA_RAVAIL_MSK) >> ALT_UP_IRDA_RAVAIL_OFST;
   1a10c:	e0bffe0b 	ldhu	r2,-8(fp)
}
   1a110:	e037883a 	mov	sp,fp
   1a114:	df000017 	ldw	fp,0(sp)
   1a118:	dec00104 	addi	sp,sp,4
   1a11c:	f800283a 	ret

0001a120 <alt_up_irda_get_available_space_in_write_FIFO>:

unsigned alt_up_irda_get_available_space_in_write_FIFO(alt_up_irda_dev *irda)
{
   1a120:	defffd04 	addi	sp,sp,-12
   1a124:	df000215 	stw	fp,8(sp)
   1a128:	df000204 	addi	fp,sp,8
   1a12c:	e13fff15 	stw	r4,-4(fp)
	alt_u32 ctrl_reg;
	ctrl_reg = IORD_ALT_UP_IRDA_CONTROL(irda->base); 
   1a130:	e0bfff17 	ldw	r2,-4(fp)
   1a134:	10800a17 	ldw	r2,40(r2)
   1a138:	10800104 	addi	r2,r2,4
   1a13c:	10800037 	ldwio	r2,0(r2)
   1a140:	e0bffe15 	stw	r2,-8(fp)
	return (ctrl_reg & ALT_UP_IRDA_CONTROL_WSPACE_MSK) >> ALT_UP_IRDA_CONTROL_WSPACE_OFST;
   1a144:	e0bffe17 	ldw	r2,-8(fp)
   1a148:	1004d43a 	srli	r2,r2,16
}
   1a14c:	e037883a 	mov	sp,fp
   1a150:	df000017 	ldw	fp,0(sp)
   1a154:	dec00104 	addi	sp,sp,4
   1a158:	f800283a 	ret

0001a15c <alt_up_irda_check_parity>:

int alt_up_irda_check_parity(alt_u32 data_reg)
{
   1a15c:	defffd04 	addi	sp,sp,-12
   1a160:	df000215 	stw	fp,8(sp)
   1a164:	df000204 	addi	fp,sp,8
   1a168:	e13fff15 	stw	r4,-4(fp)
	unsigned parity_error = (data_reg & ALT_UP_IRDA_DATA_PE_MSK) >> ALT_UP_IRDA_DATA_PE_OFST;
   1a16c:	e0bfff17 	ldw	r2,-4(fp)
   1a170:	1080800c 	andi	r2,r2,512
   1a174:	1004d27a 	srli	r2,r2,9
   1a178:	e0bffe15 	stw	r2,-8(fp)
	return (parity_error ? -1 : 0);
   1a17c:	e0bffe17 	ldw	r2,-8(fp)
   1a180:	10000226 	beq	r2,zero,1a18c <alt_up_irda_check_parity+0x30>
   1a184:	00bfffc4 	movi	r2,-1
   1a188:	00000106 	br	1a190 <alt_up_irda_check_parity+0x34>
   1a18c:	0005883a 	mov	r2,zero
}
   1a190:	e037883a 	mov	sp,fp
   1a194:	df000017 	ldw	fp,0(sp)
   1a198:	dec00104 	addi	sp,sp,4
   1a19c:	f800283a 	ret

0001a1a0 <alt_up_irda_write_data>:

int alt_up_irda_write_data(alt_up_irda_dev *irda, alt_u8 data)
{
   1a1a0:	defffd04 	addi	sp,sp,-12
   1a1a4:	df000215 	stw	fp,8(sp)
   1a1a8:	df000204 	addi	fp,sp,8
   1a1ac:	e13ffe15 	stw	r4,-8(fp)
   1a1b0:	2805883a 	mov	r2,r5
   1a1b4:	e0bfff05 	stb	r2,-4(fp)
	data_reg = IORD_ALT_UP_IRDA_DATA(irda->base);
    */

	// we can write directly without thinking about other bit fields for this
	// case ONLY, because only DATA field of the data register is writable
	IOWR_ALT_UP_IRDA_DATA(irda->base, (data>>ALT_UP_IRDA_DATA_DATA_OFST) & ALT_UP_IRDA_DATA_DATA_MSK);
   1a1b8:	e0bffe17 	ldw	r2,-8(fp)
   1a1bc:	10800a17 	ldw	r2,40(r2)
   1a1c0:	1007883a 	mov	r3,r2
   1a1c4:	e0bfff03 	ldbu	r2,-4(fp)
   1a1c8:	18800035 	stwio	r2,0(r3)
	return 0;
   1a1cc:	0005883a 	mov	r2,zero
}
   1a1d0:	e037883a 	mov	sp,fp
   1a1d4:	df000017 	ldw	fp,0(sp)
   1a1d8:	dec00104 	addi	sp,sp,4
   1a1dc:	f800283a 	ret

0001a1e0 <alt_up_irda_read_data>:

int alt_up_irda_read_data(alt_up_irda_dev *irda, alt_u8 *data, alt_u8 *parity_error)
{
   1a1e0:	defffa04 	addi	sp,sp,-24
   1a1e4:	dfc00515 	stw	ra,20(sp)
   1a1e8:	df000415 	stw	fp,16(sp)
   1a1ec:	df000404 	addi	fp,sp,16
   1a1f0:	e13ffd15 	stw	r4,-12(fp)
   1a1f4:	e17ffe15 	stw	r5,-8(fp)
   1a1f8:	e1bfff15 	stw	r6,-4(fp)
	alt_u32 data_reg;
	data_reg = IORD_ALT_UP_IRDA_DATA(irda->base);
   1a1fc:	e0bffd17 	ldw	r2,-12(fp)
   1a200:	10800a17 	ldw	r2,40(r2)
   1a204:	10800037 	ldwio	r2,0(r2)
   1a208:	e0bffc15 	stw	r2,-16(fp)
	*data = (data_reg & ALT_UP_IRDA_DATA_DATA_MSK) >> ALT_UP_IRDA_DATA_DATA_OFST;
   1a20c:	e0bffc17 	ldw	r2,-16(fp)
   1a210:	1007883a 	mov	r3,r2
   1a214:	e0bffe17 	ldw	r2,-8(fp)
   1a218:	10c00005 	stb	r3,0(r2)
	*parity_error = alt_up_irda_check_parity(data_reg);
   1a21c:	e13ffc17 	ldw	r4,-16(fp)
   1a220:	001a15c0 	call	1a15c <alt_up_irda_check_parity>
   1a224:	1007883a 	mov	r3,r2
   1a228:	e0bfff17 	ldw	r2,-4(fp)
   1a22c:	10c00005 	stb	r3,0(r2)
	return (((data_reg & ALT_UP_IRDA_DATA_RVALID_MSK) >> ALT_UP_IRDA_DATA_RVALID_OFST) - 1);
   1a230:	e0bffc17 	ldw	r2,-16(fp)
   1a234:	10a0000c 	andi	r2,r2,32768
   1a238:	1004d3fa 	srli	r2,r2,15
   1a23c:	10bfffc4 	addi	r2,r2,-1
}
   1a240:	e037883a 	mov	sp,fp
   1a244:	dfc00117 	ldw	ra,4(sp)
   1a248:	df000017 	ldw	fp,0(sp)
   1a24c:	dec00204 	addi	sp,sp,8
   1a250:	f800283a 	ret

0001a254 <alt_up_irda_read_fd>:

int alt_up_irda_read_fd (alt_fd* fd, char* ptr, int len)
{
   1a254:	defff804 	addi	sp,sp,-32
   1a258:	dfc00715 	stw	ra,28(sp)
   1a25c:	df000615 	stw	fp,24(sp)
   1a260:	df000604 	addi	fp,sp,24
   1a264:	e13ffd15 	stw	r4,-12(fp)
   1a268:	e17ffe15 	stw	r5,-8(fp)
   1a26c:	e1bfff15 	stw	r6,-4(fp)
	alt_up_irda_dev *irda = (alt_up_irda_dev*)fd->dev;
   1a270:	e0bffd17 	ldw	r2,-12(fp)
   1a274:	10800017 	ldw	r2,0(r2)
   1a278:	e0bffb15 	stw	r2,-20(fp)
	int count = 0;
   1a27c:	e03ffa15 	stw	zero,-24(fp)
	alt_u8 parity_error;
	while(len--)
   1a280:	00000e06 	br	1a2bc <alt_up_irda_read_fd+0x68>
	{
		if (alt_up_irda_read_data(irda, (alt_u8 *)ptr++, &parity_error)==0)
   1a284:	e0bffe17 	ldw	r2,-8(fp)
   1a288:	10c00044 	addi	r3,r2,1
   1a28c:	e0fffe15 	stw	r3,-8(fp)
   1a290:	e0fffc04 	addi	r3,fp,-16
   1a294:	e13ffb17 	ldw	r4,-20(fp)
   1a298:	100b883a 	mov	r5,r2
   1a29c:	180d883a 	mov	r6,r3
   1a2a0:	001a1e00 	call	1a1e0 <alt_up_irda_read_data>
   1a2a4:	1000041e 	bne	r2,zero,1a2b8 <alt_up_irda_read_fd+0x64>
			count++;
   1a2a8:	e0bffa17 	ldw	r2,-24(fp)
   1a2ac:	10800044 	addi	r2,r2,1
   1a2b0:	e0bffa15 	stw	r2,-24(fp)
   1a2b4:	00000106 	br	1a2bc <alt_up_irda_read_fd+0x68>
		else
			break;
   1a2b8:	00000406 	br	1a2cc <alt_up_irda_read_fd+0x78>
int alt_up_irda_read_fd (alt_fd* fd, char* ptr, int len)
{
	alt_up_irda_dev *irda = (alt_up_irda_dev*)fd->dev;
	int count = 0;
	alt_u8 parity_error;
	while(len--)
   1a2bc:	e0bfff17 	ldw	r2,-4(fp)
   1a2c0:	10ffffc4 	addi	r3,r2,-1
   1a2c4:	e0ffff15 	stw	r3,-4(fp)
   1a2c8:	103fee1e 	bne	r2,zero,1a284 <__alt_mem_Flash_flash_data+0xf401a284>
		if (alt_up_irda_read_data(irda, (alt_u8 *)ptr++, &parity_error)==0)
			count++;
		else
			break;
	}
	return count;
   1a2cc:	e0bffa17 	ldw	r2,-24(fp)
}
   1a2d0:	e037883a 	mov	sp,fp
   1a2d4:	dfc00117 	ldw	ra,4(sp)
   1a2d8:	df000017 	ldw	fp,0(sp)
   1a2dc:	dec00204 	addi	sp,sp,8
   1a2e0:	f800283a 	ret

0001a2e4 <alt_up_irda_write_fd>:

int alt_up_irda_write_fd (alt_fd* fd, const char* ptr, int len)
{
   1a2e4:	defff904 	addi	sp,sp,-28
   1a2e8:	dfc00615 	stw	ra,24(sp)
   1a2ec:	df000515 	stw	fp,20(sp)
   1a2f0:	df000504 	addi	fp,sp,20
   1a2f4:	e13ffd15 	stw	r4,-12(fp)
   1a2f8:	e17ffe15 	stw	r5,-8(fp)
   1a2fc:	e1bfff15 	stw	r6,-4(fp)
	alt_up_irda_dev *irda = (alt_up_irda_dev*)fd->dev;
   1a300:	e0bffd17 	ldw	r2,-12(fp)
   1a304:	10800017 	ldw	r2,0(r2)
   1a308:	e0bffc15 	stw	r2,-16(fp)
	int count = 0;
   1a30c:	e03ffb15 	stw	zero,-20(fp)
	while(len--)
   1a310:	00000e06 	br	1a34c <alt_up_irda_write_fd+0x68>
	{
		if (alt_up_irda_write_data(irda, (alt_u8) *ptr++)==0)
   1a314:	e0bffe17 	ldw	r2,-8(fp)
   1a318:	10c00044 	addi	r3,r2,1
   1a31c:	e0fffe15 	stw	r3,-8(fp)
   1a320:	10800003 	ldbu	r2,0(r2)
   1a324:	10803fcc 	andi	r2,r2,255
   1a328:	e13ffc17 	ldw	r4,-16(fp)
   1a32c:	100b883a 	mov	r5,r2
   1a330:	001a1a00 	call	1a1a0 <alt_up_irda_write_data>
   1a334:	1000041e 	bne	r2,zero,1a348 <alt_up_irda_write_fd+0x64>
			count++;
   1a338:	e0bffb17 	ldw	r2,-20(fp)
   1a33c:	10800044 	addi	r2,r2,1
   1a340:	e0bffb15 	stw	r2,-20(fp)
   1a344:	00000106 	br	1a34c <alt_up_irda_write_fd+0x68>
		else
			break;
   1a348:	00000406 	br	1a35c <alt_up_irda_write_fd+0x78>

int alt_up_irda_write_fd (alt_fd* fd, const char* ptr, int len)
{
	alt_up_irda_dev *irda = (alt_up_irda_dev*)fd->dev;
	int count = 0;
	while(len--)
   1a34c:	e0bfff17 	ldw	r2,-4(fp)
   1a350:	10ffffc4 	addi	r3,r2,-1
   1a354:	e0ffff15 	stw	r3,-4(fp)
   1a358:	103fee1e 	bne	r2,zero,1a314 <__alt_mem_Flash_flash_data+0xf401a314>
		if (alt_up_irda_write_data(irda, (alt_u8) *ptr++)==0)
			count++;
		else
			break;
	}
	return count;
   1a35c:	e0bffb17 	ldw	r2,-20(fp)
}
   1a360:	e037883a 	mov	sp,fp
   1a364:	dfc00117 	ldw	ra,4(sp)
   1a368:	df000017 	ldw	fp,0(sp)
   1a36c:	dec00204 	addi	sp,sp,8
   1a370:	f800283a 	ret

0001a374 <alt_up_irda_open_dev>:

alt_up_irda_dev* alt_up_irda_open_dev(const char* name)
{
   1a374:	defffc04 	addi	sp,sp,-16
   1a378:	dfc00315 	stw	ra,12(sp)
   1a37c:	df000215 	stw	fp,8(sp)
   1a380:	df000204 	addi	fp,sp,8
   1a384:	e13fff15 	stw	r4,-4(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_irda_dev *dev = (alt_up_irda_dev*)alt_find_dev(name, &alt_dev_list);
   1a388:	e13fff17 	ldw	r4,-4(fp)
   1a38c:	014000b4 	movhi	r5,2
   1a390:	297b3004 	addi	r5,r5,-4928
   1a394:	001b4240 	call	1b424 <alt_find_dev>
   1a398:	e0bffe15 	stw	r2,-8(fp)

  return dev;
   1a39c:	e0bffe17 	ldw	r2,-8(fp)
}
   1a3a0:	e037883a 	mov	sp,fp
   1a3a4:	dfc00117 	ldw	ra,4(sp)
   1a3a8:	df000017 	ldw	fp,0(sp)
   1a3ac:	dec00204 	addi	sp,sp,8
   1a3b0:	f800283a 	ret

0001a3b4 <alt_up_parallel_port_open_dev>:

#include "altera_up_avalon_parallel_port.h"
#include "altera_up_avalon_parallel_port_regs.h"

alt_up_parallel_port_dev* alt_up_parallel_port_open_dev(const char* name)
{
   1a3b4:	defffc04 	addi	sp,sp,-16
   1a3b8:	dfc00315 	stw	ra,12(sp)
   1a3bc:	df000215 	stw	fp,8(sp)
   1a3c0:	df000204 	addi	fp,sp,8
   1a3c4:	e13fff15 	stw	r4,-4(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_parallel_port_dev *dev = (alt_up_parallel_port_dev*)alt_find_dev(name, &alt_dev_list);
   1a3c8:	e13fff17 	ldw	r4,-4(fp)
   1a3cc:	014000b4 	movhi	r5,2
   1a3d0:	297b3004 	addi	r5,r5,-4928
   1a3d4:	001b4240 	call	1b424 <alt_find_dev>
   1a3d8:	e0bffe15 	stw	r2,-8(fp)

  return dev;
   1a3dc:	e0bffe17 	ldw	r2,-8(fp)
}
   1a3e0:	e037883a 	mov	sp,fp
   1a3e4:	dfc00117 	ldw	ra,4(sp)
   1a3e8:	df000017 	ldw	fp,0(sp)
   1a3ec:	dec00204 	addi	sp,sp,8
   1a3f0:	f800283a 	ret

0001a3f4 <read_RI_bit>:


//////////////////////////////////////////////////////////////////////////////////////////////
// Internal Functions
alt_u8 read_RI_bit(alt_u32 ctrl_reg)
{
   1a3f4:	defffd04 	addi	sp,sp,-12
   1a3f8:	df000215 	stw	fp,8(sp)
   1a3fc:	df000204 	addi	fp,sp,8
   1a400:	e13fff15 	stw	r4,-4(fp)
	alt_u8 ri = (alt_u8) ((ctrl_reg & ALT_UP_PS2_PORT_CTRL_REG_RI_MSK) >> ALT_UP_PS2_PORT_CTRL_REG_RI_OFST);
   1a404:	e0bfff17 	ldw	r2,-4(fp)
   1a408:	1080400c 	andi	r2,r2,256
   1a40c:	1004d23a 	srli	r2,r2,8
   1a410:	e0bffe05 	stb	r2,-8(fp)
	return ri;
   1a414:	e0bffe03 	ldbu	r2,-8(fp)
}
   1a418:	e037883a 	mov	sp,fp
   1a41c:	df000017 	ldw	fp,0(sp)
   1a420:	dec00104 	addi	sp,sp,4
   1a424:	f800283a 	ret

0001a428 <read_RE_bit>:

alt_u8 read_RE_bit(alt_u32 ctrl_reg)
{
   1a428:	defffd04 	addi	sp,sp,-12
   1a42c:	df000215 	stw	fp,8(sp)
   1a430:	df000204 	addi	fp,sp,8
   1a434:	e13fff15 	stw	r4,-4(fp)
	alt_u8 re = (alt_u8) ((ctrl_reg & ALT_UP_PS2_PORT_CTRL_REG_RE_MSK) >> ALT_UP_PS2_PORT_CTRL_REG_RE_OFST);
   1a438:	e0bfff17 	ldw	r2,-4(fp)
   1a43c:	1080004c 	andi	r2,r2,1
   1a440:	e0bffe05 	stb	r2,-8(fp)
	return re;
   1a444:	e0bffe03 	ldbu	r2,-8(fp)
}
   1a448:	e037883a 	mov	sp,fp
   1a44c:	df000017 	ldw	fp,0(sp)
   1a450:	dec00104 	addi	sp,sp,4
   1a454:	f800283a 	ret

0001a458 <read_CE_bit>:

alt_u8 read_CE_bit(alt_u32 ctrl_reg)
{
   1a458:	defffd04 	addi	sp,sp,-12
   1a45c:	df000215 	stw	fp,8(sp)
   1a460:	df000204 	addi	fp,sp,8
   1a464:	e13fff15 	stw	r4,-4(fp)
	alt_u8 re = (alt_u8) ((ctrl_reg & ALT_UP_PS2_PORT_CTRL_REG_CE_MSK) >> ALT_UP_PS2_PORT_CTRL_REG_CE_OFST);
   1a468:	e0bfff17 	ldw	r2,-4(fp)
   1a46c:	1081000c 	andi	r2,r2,1024
   1a470:	1004d2ba 	srli	r2,r2,10
   1a474:	e0bffe05 	stb	r2,-8(fp)
	return re;
   1a478:	e0bffe03 	ldbu	r2,-8(fp)
}
   1a47c:	e037883a 	mov	sp,fp
   1a480:	df000017 	ldw	fp,0(sp)
   1a484:	dec00104 	addi	sp,sp,4
   1a488:	f800283a 	ret

0001a48c <read_num_bytes_available>:

alt_u16 read_num_bytes_available(alt_u32 data_reg)
{
   1a48c:	defffd04 	addi	sp,sp,-12
   1a490:	df000215 	stw	fp,8(sp)
   1a494:	df000204 	addi	fp,sp,8
   1a498:	e13fff15 	stw	r4,-4(fp)
	alt_u16 ravail = (alt_u16)((data_reg & ALT_UP_PS2_PORT_DATA_REG_RAVAIL_MSK ) >> ALT_UP_PS2_PORT_DATA_REG_RAVAIL_OFST);
   1a49c:	e0bfff17 	ldw	r2,-4(fp)
   1a4a0:	1004d43a 	srli	r2,r2,16
   1a4a4:	e0bffe0d 	sth	r2,-8(fp)
	return ravail;
   1a4a8:	e0bffe0b 	ldhu	r2,-8(fp)
}
   1a4ac:	e037883a 	mov	sp,fp
   1a4b0:	df000017 	ldw	fp,0(sp)
   1a4b4:	dec00104 	addi	sp,sp,4
   1a4b8:	f800283a 	ret

0001a4bc <read_data_valid>:

alt_u8 read_data_valid(alt_u32 data_reg)
{
   1a4bc:	defffd04 	addi	sp,sp,-12
   1a4c0:	df000215 	stw	fp,8(sp)
   1a4c4:	df000204 	addi	fp,sp,8
   1a4c8:	e13fff15 	stw	r4,-4(fp)
	alt_u8 rvalid = (alt_u8)((data_reg & ALT_UP_PS2_PORT_DATA_REG_RVALID_MSK ) >> ALT_UP_PS2_PORT_DATA_REG_RVALID_OFST);
   1a4cc:	e0bfff17 	ldw	r2,-4(fp)
   1a4d0:	10a0000c 	andi	r2,r2,32768
   1a4d4:	1004d3fa 	srli	r2,r2,15
   1a4d8:	e0bffe05 	stb	r2,-8(fp)
	return rvalid;
   1a4dc:	e0bffe03 	ldbu	r2,-8(fp)
}
   1a4e0:	e037883a 	mov	sp,fp
   1a4e4:	df000017 	ldw	fp,0(sp)
   1a4e8:	dec00104 	addi	sp,sp,4
   1a4ec:	f800283a 	ret

0001a4f0 <read_data_byte>:

alt_u8 read_data_byte(alt_u32 data_reg)
{
   1a4f0:	defffd04 	addi	sp,sp,-12
   1a4f4:	df000215 	stw	fp,8(sp)
   1a4f8:	df000204 	addi	fp,sp,8
   1a4fc:	e13fff15 	stw	r4,-4(fp)
	alt_u8 data = (alt_u8) ( (data_reg & ALT_UP_PS2_PORT_DATA_REG_DATA_MSK) >> ALT_UP_PS2_PORT_DATA_REG_DATA_OFST) ;
   1a500:	e0bfff17 	ldw	r2,-4(fp)
   1a504:	e0bffe05 	stb	r2,-8(fp)
	return data;
   1a508:	e0bffe03 	ldbu	r2,-8(fp)
}
   1a50c:	e037883a 	mov	sp,fp
   1a510:	df000017 	ldw	fp,0(sp)
   1a514:	dec00104 	addi	sp,sp,4
   1a518:	f800283a 	ret

0001a51c <alt_up_ps2_init>:

//////////////////////////////////////////////////////////////////////////////////////////////
// HAL Functions
void alt_up_ps2_init(alt_up_ps2_dev *ps2)
{
   1a51c:	defffb04 	addi	sp,sp,-20
   1a520:	dfc00415 	stw	ra,16(sp)
   1a524:	df000315 	stw	fp,12(sp)
   1a528:	df000304 	addi	fp,sp,12
   1a52c:	e13fff15 	stw	r4,-4(fp)
	// initialize the device
	unsigned char byte;
	//send the reset request, wait for ACK
	int status = alt_up_ps2_write_data_byte_with_ack(ps2, 0xff);
   1a530:	e13fff17 	ldw	r4,-4(fp)
   1a534:	01403fc4 	movi	r5,255
   1a538:	001a7780 	call	1a778 <alt_up_ps2_write_data_byte_with_ack>
   1a53c:	e0bffd15 	stw	r2,-12(fp)
	if (status == 0)
   1a540:	e0bffd17 	ldw	r2,-12(fp)
   1a544:	1000211e 	bne	r2,zero,1a5cc <alt_up_ps2_init+0xb0>
	{
		// reset succeed, now try to get the BAT result, AA means passed
		status = alt_up_ps2_read_data_byte_timeout(ps2, &byte);
   1a548:	e0bffe04 	addi	r2,fp,-8
   1a54c:	e13fff17 	ldw	r4,-4(fp)
   1a550:	100b883a 	mov	r5,r2
   1a554:	001a7dc0 	call	1a7dc <alt_up_ps2_read_data_byte_timeout>
   1a558:	e0bffd15 	stw	r2,-12(fp)
		if (status == 0 && byte == 0xAA)
   1a55c:	e0bffd17 	ldw	r2,-12(fp)
   1a560:	10001a1e 	bne	r2,zero,1a5cc <alt_up_ps2_init+0xb0>
   1a564:	e0bffe03 	ldbu	r2,-8(fp)
   1a568:	10803fcc 	andi	r2,r2,255
   1a56c:	10802a98 	cmpnei	r2,r2,170
   1a570:	1000161e 	bne	r2,zero,1a5cc <alt_up_ps2_init+0xb0>
		{
			//get the 2nd byte
			status = alt_up_ps2_read_data_byte_timeout(ps2, &byte);
   1a574:	e0bffe04 	addi	r2,fp,-8
   1a578:	e13fff17 	ldw	r4,-4(fp)
   1a57c:	100b883a 	mov	r5,r2
   1a580:	001a7dc0 	call	1a7dc <alt_up_ps2_read_data_byte_timeout>
   1a584:	e0bffd15 	stw	r2,-12(fp)
			if (status == -ETIMEDOUT)
   1a588:	e0bffd17 	ldw	r2,-12(fp)
   1a58c:	10bfe318 	cmpnei	r2,r2,-116
   1a590:	1000041e 	bne	r2,zero,1a5a4 <alt_up_ps2_init+0x88>
			{
				//for keyboard, only 2 bytes are sent(ACK, PASS/FAIL), so timeout
				ps2->device_type = PS2_KEYBOARD;
   1a594:	e0bfff17 	ldw	r2,-4(fp)
   1a598:	00c00044 	movi	r3,1
   1a59c:	10c00d15 	stw	r3,52(r2)
   1a5a0:	00000a06 	br	1a5cc <alt_up_ps2_init+0xb0>
			}
			else if (status == 0 && byte == 0x00)
   1a5a4:	e0bffd17 	ldw	r2,-12(fp)
   1a5a8:	1000081e 	bne	r2,zero,1a5cc <alt_up_ps2_init+0xb0>
   1a5ac:	e0bffe03 	ldbu	r2,-8(fp)
   1a5b0:	10803fcc 	andi	r2,r2,255
   1a5b4:	1000051e 	bne	r2,zero,1a5cc <alt_up_ps2_init+0xb0>
			{
				//for mouse, it will sent out 0x00 after sending out ACK and PASS/FAIL.
				ps2->device_type = PS2_MOUSE;
   1a5b8:	e0bfff17 	ldw	r2,-4(fp)
   1a5bc:	10000d15 	stw	zero,52(r2)
				(void) alt_up_ps2_write_data_byte (ps2, 0xf4); // enable data from mouse
   1a5c0:	e13fff17 	ldw	r4,-4(fp)
   1a5c4:	01403d04 	movi	r5,244
   1a5c8:	001a6940 	call	1a694 <alt_up_ps2_write_data_byte>
			}
		}
	}
}
   1a5cc:	e037883a 	mov	sp,fp
   1a5d0:	dfc00117 	ldw	ra,4(sp)
   1a5d4:	df000017 	ldw	fp,0(sp)
   1a5d8:	dec00204 	addi	sp,sp,8
   1a5dc:	f800283a 	ret

0001a5e0 <alt_up_ps2_enable_read_interrupt>:

void alt_up_ps2_enable_read_interrupt(alt_up_ps2_dev *ps2)
{
   1a5e0:	defffd04 	addi	sp,sp,-12
   1a5e4:	df000215 	stw	fp,8(sp)
   1a5e8:	df000204 	addi	fp,sp,8
   1a5ec:	e13fff15 	stw	r4,-4(fp)
	unsigned int ctrl_reg;
	ctrl_reg = IORD_ALT_UP_PS2_PORT_CTRL_REG(ps2->base); 
   1a5f0:	e0bfff17 	ldw	r2,-4(fp)
   1a5f4:	10800a17 	ldw	r2,40(r2)
   1a5f8:	10800104 	addi	r2,r2,4
   1a5fc:	10800037 	ldwio	r2,0(r2)
   1a600:	e0bffe15 	stw	r2,-8(fp)
	// set RE to 1 while maintaining other bits the same
	ctrl_reg |= ALT_UP_PS2_PORT_CTRL_REG_RE_MSK;
   1a604:	e0bffe17 	ldw	r2,-8(fp)
   1a608:	10800054 	ori	r2,r2,1
   1a60c:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_PS2_PORT_CTRL_REG(ps2->base, ctrl_reg);
   1a610:	e0bfff17 	ldw	r2,-4(fp)
   1a614:	10800a17 	ldw	r2,40(r2)
   1a618:	10800104 	addi	r2,r2,4
   1a61c:	1007883a 	mov	r3,r2
   1a620:	e0bffe17 	ldw	r2,-8(fp)
   1a624:	18800035 	stwio	r2,0(r3)
}
   1a628:	e037883a 	mov	sp,fp
   1a62c:	df000017 	ldw	fp,0(sp)
   1a630:	dec00104 	addi	sp,sp,4
   1a634:	f800283a 	ret

0001a638 <alt_up_ps2_disable_read_interrupt>:

void alt_up_ps2_disable_read_interrupt(alt_up_ps2_dev *ps2)
{
   1a638:	defffd04 	addi	sp,sp,-12
   1a63c:	df000215 	stw	fp,8(sp)
   1a640:	df000204 	addi	fp,sp,8
   1a644:	e13fff15 	stw	r4,-4(fp)
	unsigned int ctrl_reg;
	ctrl_reg = IORD_ALT_UP_PS2_PORT_CTRL_REG(ps2->base); 
   1a648:	e0bfff17 	ldw	r2,-4(fp)
   1a64c:	10800a17 	ldw	r2,40(r2)
   1a650:	10800104 	addi	r2,r2,4
   1a654:	10800037 	ldwio	r2,0(r2)
   1a658:	e0bffe15 	stw	r2,-8(fp)
	// set RE to 0 while maintaining other bits the same
	ctrl_reg &= ~ALT_UP_PS2_PORT_CTRL_REG_RE_MSK;
   1a65c:	e0fffe17 	ldw	r3,-8(fp)
   1a660:	00bfff84 	movi	r2,-2
   1a664:	1884703a 	and	r2,r3,r2
   1a668:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_PS2_PORT_CTRL_REG(ps2->base, ctrl_reg);
   1a66c:	e0bfff17 	ldw	r2,-4(fp)
   1a670:	10800a17 	ldw	r2,40(r2)
   1a674:	10800104 	addi	r2,r2,4
   1a678:	1007883a 	mov	r3,r2
   1a67c:	e0bffe17 	ldw	r2,-8(fp)
   1a680:	18800035 	stwio	r2,0(r3)
}
   1a684:	e037883a 	mov	sp,fp
   1a688:	df000017 	ldw	fp,0(sp)
   1a68c:	dec00104 	addi	sp,sp,4
   1a690:	f800283a 	ret

0001a694 <alt_up_ps2_write_data_byte>:

int alt_up_ps2_write_data_byte(alt_up_ps2_dev *ps2, unsigned char byte)
{
   1a694:	defffb04 	addi	sp,sp,-20
   1a698:	dfc00415 	stw	ra,16(sp)
   1a69c:	df000315 	stw	fp,12(sp)
   1a6a0:	df000304 	addi	fp,sp,12
   1a6a4:	e13ffe15 	stw	r4,-8(fp)
   1a6a8:	2805883a 	mov	r2,r5
   1a6ac:	e0bfff05 	stb	r2,-4(fp)
	//note: data are only located at the lower 8 bits
	//note: the software send command to the PS2 peripheral through the data
	//		register rather than the control register
	IOWR_ALT_UP_PS2_PORT_DATA(ps2->base, byte);
   1a6b0:	e0bffe17 	ldw	r2,-8(fp)
   1a6b4:	10800a17 	ldw	r2,40(r2)
   1a6b8:	1007883a 	mov	r3,r2
   1a6bc:	e0bfff03 	ldbu	r2,-4(fp)
   1a6c0:	18800025 	stbio	r2,0(r3)
	alt_u32 ctrl_reg = IORD_ALT_UP_PS2_PORT_CTRL_REG(ps2->base);
   1a6c4:	e0bffe17 	ldw	r2,-8(fp)
   1a6c8:	10800a17 	ldw	r2,40(r2)
   1a6cc:	10800104 	addi	r2,r2,4
   1a6d0:	10800037 	ldwio	r2,0(r2)
   1a6d4:	e0bffd15 	stw	r2,-12(fp)
	if (read_CE_bit(ctrl_reg))
   1a6d8:	e13ffd17 	ldw	r4,-12(fp)
   1a6dc:	001a4580 	call	1a458 <read_CE_bit>
   1a6e0:	10803fcc 	andi	r2,r2,255
   1a6e4:	10000226 	beq	r2,zero,1a6f0 <alt_up_ps2_write_data_byte+0x5c>
	{
		//CE bit is set --> error occurs on sending commands
		return -EIO;
   1a6e8:	00bffec4 	movi	r2,-5
   1a6ec:	00000106 	br	1a6f4 <alt_up_ps2_write_data_byte+0x60>
	}
	return 0;
   1a6f0:	0005883a 	mov	r2,zero
}
   1a6f4:	e037883a 	mov	sp,fp
   1a6f8:	dfc00117 	ldw	ra,4(sp)
   1a6fc:	df000017 	ldw	fp,0(sp)
   1a700:	dec00204 	addi	sp,sp,8
   1a704:	f800283a 	ret

0001a708 <alt_up_ps2_wait_for_ack>:

int alt_up_ps2_wait_for_ack(alt_up_ps2_dev *ps2)
{
   1a708:	defffc04 	addi	sp,sp,-16
   1a70c:	dfc00315 	stw	ra,12(sp)
   1a710:	df000215 	stw	fp,8(sp)
   1a714:	df000204 	addi	fp,sp,8
   1a718:	e13fff15 	stw	r4,-4(fp)
	unsigned char data = 0;
   1a71c:	e03ffe45 	stb	zero,-7(fp)
	unsigned char status = 0;
   1a720:	e03ffe05 	stb	zero,-8(fp)
	do
	{
		status = alt_up_ps2_read_data_byte_timeout(ps2, &data); 
   1a724:	e0bffe44 	addi	r2,fp,-7
   1a728:	e13fff17 	ldw	r4,-4(fp)
   1a72c:	100b883a 	mov	r5,r2
   1a730:	001a7dc0 	call	1a7dc <alt_up_ps2_read_data_byte_timeout>
   1a734:	e0bffe05 	stb	r2,-8(fp)
		if ( status == 0)
   1a738:	e0bffe03 	ldbu	r2,-8(fp)
   1a73c:	1000061e 	bne	r2,zero,1a758 <alt_up_ps2_wait_for_ack+0x50>
		{
			if (data == PS2_ACK)
   1a740:	e0bffe43 	ldbu	r2,-7(fp)
   1a744:	10803fcc 	andi	r2,r2,255
   1a748:	10803e98 	cmpnei	r2,r2,250
   1a74c:	1000041e 	bne	r2,zero,1a760 <alt_up_ps2_wait_for_ack+0x58>
				return 0;
   1a750:	0005883a 	mov	r2,zero
   1a754:	00000306 	br	1a764 <alt_up_ps2_wait_for_ack+0x5c>
		}
		else 
		{
			return status;
   1a758:	e0bffe03 	ldbu	r2,-8(fp)
   1a75c:	00000106 	br	1a764 <alt_up_ps2_wait_for_ack+0x5c>
		}
	} while(1);
   1a760:	003ff006 	br	1a724 <__alt_mem_Flash_flash_data+0xf401a724>
	return -ETIMEDOUT;
}
   1a764:	e037883a 	mov	sp,fp
   1a768:	dfc00117 	ldw	ra,4(sp)
   1a76c:	df000017 	ldw	fp,0(sp)
   1a770:	dec00204 	addi	sp,sp,8
   1a774:	f800283a 	ret

0001a778 <alt_up_ps2_write_data_byte_with_ack>:

int alt_up_ps2_write_data_byte_with_ack(alt_up_ps2_dev *ps2, unsigned char byte)
{
   1a778:	defffa04 	addi	sp,sp,-24
   1a77c:	dfc00515 	stw	ra,20(sp)
   1a780:	df000415 	stw	fp,16(sp)
   1a784:	df000404 	addi	fp,sp,16
   1a788:	e13ffe15 	stw	r4,-8(fp)
   1a78c:	2805883a 	mov	r2,r5
   1a790:	e0bfff05 	stb	r2,-4(fp)
	int send_status = alt_up_ps2_write_data_byte(ps2, byte);
   1a794:	e0bfff03 	ldbu	r2,-4(fp)
   1a798:	e13ffe17 	ldw	r4,-8(fp)
   1a79c:	100b883a 	mov	r5,r2
   1a7a0:	001a6940 	call	1a694 <alt_up_ps2_write_data_byte>
   1a7a4:	e0bffc15 	stw	r2,-16(fp)
	if ( send_status != 0)
   1a7a8:	e0bffc17 	ldw	r2,-16(fp)
   1a7ac:	10000226 	beq	r2,zero,1a7b8 <alt_up_ps2_write_data_byte_with_ack+0x40>
		// return on sending error
		return send_status;
   1a7b0:	e0bffc17 	ldw	r2,-16(fp)
   1a7b4:	00000406 	br	1a7c8 <alt_up_ps2_write_data_byte_with_ack+0x50>

	int ack_status = alt_up_ps2_wait_for_ack(ps2);
   1a7b8:	e13ffe17 	ldw	r4,-8(fp)
   1a7bc:	001a7080 	call	1a708 <alt_up_ps2_wait_for_ack>
   1a7c0:	e0bffd15 	stw	r2,-12(fp)
	return ack_status;
   1a7c4:	e0bffd17 	ldw	r2,-12(fp)
}
   1a7c8:	e037883a 	mov	sp,fp
   1a7cc:	dfc00117 	ldw	ra,4(sp)
   1a7d0:	df000017 	ldw	fp,0(sp)
   1a7d4:	dec00204 	addi	sp,sp,8
   1a7d8:	f800283a 	ret

0001a7dc <alt_up_ps2_read_data_byte_timeout>:

int alt_up_ps2_read_data_byte_timeout(alt_up_ps2_dev *ps2, unsigned char *byte)
{
   1a7dc:	defffa04 	addi	sp,sp,-24
   1a7e0:	dfc00515 	stw	ra,20(sp)
   1a7e4:	df000415 	stw	fp,16(sp)
   1a7e8:	df000404 	addi	fp,sp,16
   1a7ec:	e13ffe15 	stw	r4,-8(fp)
   1a7f0:	e17fff15 	stw	r5,-4(fp)
	unsigned int data_reg = 0; 
   1a7f4:	e03ffd15 	stw	zero,-12(fp)
	unsigned int count = 0;
   1a7f8:	e03ffc15 	stw	zero,-16(fp)
	do {
		count++;
   1a7fc:	e0bffc17 	ldw	r2,-16(fp)
   1a800:	10800044 	addi	r2,r2,1
   1a804:	e0bffc15 	stw	r2,-16(fp)
		data_reg = IORD_ALT_UP_PS2_PORT_DATA_REG(ps2->base);
   1a808:	e0bffe17 	ldw	r2,-8(fp)
   1a80c:	10800a17 	ldw	r2,40(r2)
   1a810:	10800037 	ldwio	r2,0(r2)
   1a814:	e0bffd15 	stw	r2,-12(fp)
		if (read_data_valid(data_reg))
   1a818:	e13ffd17 	ldw	r4,-12(fp)
   1a81c:	001a4bc0 	call	1a4bc <read_data_valid>
   1a820:	10803fcc 	andi	r2,r2,255
   1a824:	10000726 	beq	r2,zero,1a844 <alt_up_ps2_read_data_byte_timeout+0x68>
		{
			*byte = read_data_byte(data_reg);
   1a828:	e13ffd17 	ldw	r4,-12(fp)
   1a82c:	001a4f00 	call	1a4f0 <read_data_byte>
   1a830:	1007883a 	mov	r3,r2
   1a834:	e0bfff17 	ldw	r2,-4(fp)
   1a838:	10c00005 	stb	r3,0(r2)
			return 0;
   1a83c:	0005883a 	mov	r2,zero
   1a840:	00000a06 	br	1a86c <alt_up_ps2_read_data_byte_timeout+0x90>
		}
		//timeout = 0 means to disable the timeout
		if ( ps2->timeout != 0 && count > ps2->timeout)
   1a844:	e0bffe17 	ldw	r2,-8(fp)
   1a848:	10800c17 	ldw	r2,48(r2)
   1a84c:	10000626 	beq	r2,zero,1a868 <alt_up_ps2_read_data_byte_timeout+0x8c>
   1a850:	e0bffe17 	ldw	r2,-8(fp)
   1a854:	10c00c17 	ldw	r3,48(r2)
   1a858:	e0bffc17 	ldw	r2,-16(fp)
   1a85c:	1880022e 	bgeu	r3,r2,1a868 <alt_up_ps2_read_data_byte_timeout+0x8c>
		{
			return -ETIMEDOUT;
   1a860:	00bfe304 	movi	r2,-116
   1a864:	00000106 	br	1a86c <alt_up_ps2_read_data_byte_timeout+0x90>
		}
	} while (1);
   1a868:	003fe406 	br	1a7fc <__alt_mem_Flash_flash_data+0xf401a7fc>
}
   1a86c:	e037883a 	mov	sp,fp
   1a870:	dfc00117 	ldw	ra,4(sp)
   1a874:	df000017 	ldw	fp,0(sp)
   1a878:	dec00204 	addi	sp,sp,8
   1a87c:	f800283a 	ret

0001a880 <alt_up_ps2_read_data_byte>:

int alt_up_ps2_read_data_byte(alt_up_ps2_dev *ps2, unsigned char *byte)
{
   1a880:	defffb04 	addi	sp,sp,-20
   1a884:	dfc00415 	stw	ra,16(sp)
   1a888:	df000315 	stw	fp,12(sp)
   1a88c:	df000304 	addi	fp,sp,12
   1a890:	e13ffe15 	stw	r4,-8(fp)
   1a894:	e17fff15 	stw	r5,-4(fp)
	unsigned int data_reg = 0; 
   1a898:	e03ffd15 	stw	zero,-12(fp)
	data_reg = IORD_ALT_UP_PS2_PORT_DATA_REG(ps2->base);
   1a89c:	e0bffe17 	ldw	r2,-8(fp)
   1a8a0:	10800a17 	ldw	r2,40(r2)
   1a8a4:	10800037 	ldwio	r2,0(r2)
   1a8a8:	e0bffd15 	stw	r2,-12(fp)
	if (read_data_valid(data_reg))
   1a8ac:	e13ffd17 	ldw	r4,-12(fp)
   1a8b0:	001a4bc0 	call	1a4bc <read_data_valid>
   1a8b4:	10803fcc 	andi	r2,r2,255
   1a8b8:	10000726 	beq	r2,zero,1a8d8 <alt_up_ps2_read_data_byte+0x58>
	{
		*byte = read_data_byte(data_reg);
   1a8bc:	e13ffd17 	ldw	r4,-12(fp)
   1a8c0:	001a4f00 	call	1a4f0 <read_data_byte>
   1a8c4:	1007883a 	mov	r3,r2
   1a8c8:	e0bfff17 	ldw	r2,-4(fp)
   1a8cc:	10c00005 	stb	r3,0(r2)
		return 0;
   1a8d0:	0005883a 	mov	r2,zero
   1a8d4:	00000106 	br	1a8dc <alt_up_ps2_read_data_byte+0x5c>
	}
	return -1;
   1a8d8:	00bfffc4 	movi	r2,-1
}
   1a8dc:	e037883a 	mov	sp,fp
   1a8e0:	dfc00117 	ldw	ra,4(sp)
   1a8e4:	df000017 	ldw	fp,0(sp)
   1a8e8:	dec00204 	addi	sp,sp,8
   1a8ec:	f800283a 	ret

0001a8f0 <alt_up_ps2_clear_fifo>:

void alt_up_ps2_clear_fifo(alt_up_ps2_dev *ps2)
{
   1a8f0:	defffb04 	addi	sp,sp,-20
   1a8f4:	dfc00415 	stw	ra,16(sp)
   1a8f8:	df000315 	stw	fp,12(sp)
   1a8fc:	df000304 	addi	fp,sp,12
   1a900:	e13fff15 	stw	r4,-4(fp)
	// The DATA byte of the data register will be automatically cleared after a read
	// So we simply keep reading it until there are no available bytes
	alt_u16 num = 0;
   1a904:	e03ffd0d 	sth	zero,-12(fp)
	unsigned int data_reg = 0;
   1a908:	e03ffe15 	stw	zero,-8(fp)
	do
	{
		// read the data register (the DATA byte is cleared)
		data_reg = IORD_ALT_UP_PS2_PORT_DATA_REG(ps2->base);
   1a90c:	e0bfff17 	ldw	r2,-4(fp)
   1a910:	10800a17 	ldw	r2,40(r2)
   1a914:	10800037 	ldwio	r2,0(r2)
   1a918:	e0bffe15 	stw	r2,-8(fp)
		// get the number of available bytes from the RAVAIL part of data register
		num = read_num_bytes_available(data_reg);
   1a91c:	e13ffe17 	ldw	r4,-8(fp)
   1a920:	001a48c0 	call	1a48c <read_num_bytes_available>
   1a924:	e0bffd0d 	sth	r2,-12(fp)
	} while (num > 0);
   1a928:	e0bffd0b 	ldhu	r2,-12(fp)
   1a92c:	103ff71e 	bne	r2,zero,1a90c <__alt_mem_Flash_flash_data+0xf401a90c>
}
   1a930:	e037883a 	mov	sp,fp
   1a934:	dfc00117 	ldw	ra,4(sp)
   1a938:	df000017 	ldw	fp,0(sp)
   1a93c:	dec00204 	addi	sp,sp,8
   1a940:	f800283a 	ret

0001a944 <alt_up_ps2_read_fd>:

//////////////////////////////////////////////////////////////
// FD Functions
int alt_up_ps2_read_fd (alt_fd* fd, char* ptr, int len)
{
   1a944:	defff804 	addi	sp,sp,-32
   1a948:	dfc00715 	stw	ra,28(sp)
   1a94c:	df000615 	stw	fp,24(sp)
   1a950:	df000604 	addi	fp,sp,24
   1a954:	e13ffd15 	stw	r4,-12(fp)
   1a958:	e17ffe15 	stw	r5,-8(fp)
   1a95c:	e1bfff15 	stw	r6,-4(fp)
	alt_up_ps2_dev *ps2 = (alt_up_ps2_dev*) fd->dev;
   1a960:	e0bffd17 	ldw	r2,-12(fp)
   1a964:	10800017 	ldw	r2,0(r2)
   1a968:	e0bffa15 	stw	r2,-24(fp)
	int status = 0;
   1a96c:	e03ffb15 	stw	zero,-20(fp)
	int count = 0;
   1a970:	e03ffc15 	stw	zero,-16(fp)
	while (count < len);
   1a974:	e0fffc17 	ldw	r3,-16(fp)
   1a978:	e0bfff17 	ldw	r2,-4(fp)
   1a97c:	18bffd16 	blt	r3,r2,1a974 <__alt_mem_Flash_flash_data+0xf401a974>
	{
		status = alt_up_ps2_read_data_byte_timeout(ps2, (unsigned char *)ptr++);
   1a980:	e0bffe17 	ldw	r2,-8(fp)
   1a984:	10c00044 	addi	r3,r2,1
   1a988:	e0fffe15 	stw	r3,-8(fp)
   1a98c:	e13ffa17 	ldw	r4,-24(fp)
   1a990:	100b883a 	mov	r5,r2
   1a994:	001a7dc0 	call	1a7dc <alt_up_ps2_read_data_byte_timeout>
   1a998:	e0bffb15 	stw	r2,-20(fp)
		if (status!=0)
   1a99c:	e0bffb17 	ldw	r2,-20(fp)
   1a9a0:	10000226 	beq	r2,zero,1a9ac <alt_up_ps2_read_fd+0x68>
			return count;
   1a9a4:	e0bffc17 	ldw	r2,-16(fp)
   1a9a8:	00000406 	br	1a9bc <alt_up_ps2_read_fd+0x78>
		count++;
   1a9ac:	e0bffc17 	ldw	r2,-16(fp)
   1a9b0:	10800044 	addi	r2,r2,1
   1a9b4:	e0bffc15 	stw	r2,-16(fp)
	} 
	return count;
   1a9b8:	e0bffc17 	ldw	r2,-16(fp)
}
   1a9bc:	e037883a 	mov	sp,fp
   1a9c0:	dfc00117 	ldw	ra,4(sp)
   1a9c4:	df000017 	ldw	fp,0(sp)
   1a9c8:	dec00204 	addi	sp,sp,8
   1a9cc:	f800283a 	ret

0001a9d0 <alt_up_ps2_write_fd>:

int alt_up_ps2_write_fd (alt_fd* fd, const char* ptr, int len)
{
   1a9d0:	defff804 	addi	sp,sp,-32
   1a9d4:	dfc00715 	stw	ra,28(sp)
   1a9d8:	df000615 	stw	fp,24(sp)
   1a9dc:	df000604 	addi	fp,sp,24
   1a9e0:	e13ffd15 	stw	r4,-12(fp)
   1a9e4:	e17ffe15 	stw	r5,-8(fp)
   1a9e8:	e1bfff15 	stw	r6,-4(fp)
	alt_up_ps2_dev *ps2 = (alt_up_ps2_dev*) fd->dev;
   1a9ec:	e0bffd17 	ldw	r2,-12(fp)
   1a9f0:	10800017 	ldw	r2,0(r2)
   1a9f4:	e0bffb15 	stw	r2,-20(fp)
	int status = 0;
   1a9f8:	e03ffc15 	stw	zero,-16(fp)
	int count = 0;
   1a9fc:	e03ffa15 	stw	zero,-24(fp)
	while (count < len)
   1aa00:	00001006 	br	1aa44 <alt_up_ps2_write_fd+0x74>
	{
		status = alt_up_ps2_write_data_byte(ps2, *(ptr++) );
   1aa04:	e0bffe17 	ldw	r2,-8(fp)
   1aa08:	10c00044 	addi	r3,r2,1
   1aa0c:	e0fffe15 	stw	r3,-8(fp)
   1aa10:	10800003 	ldbu	r2,0(r2)
   1aa14:	10803fcc 	andi	r2,r2,255
   1aa18:	e13ffb17 	ldw	r4,-20(fp)
   1aa1c:	100b883a 	mov	r5,r2
   1aa20:	001a6940 	call	1a694 <alt_up_ps2_write_data_byte>
   1aa24:	e0bffc15 	stw	r2,-16(fp)
		if (status!=0)
   1aa28:	e0bffc17 	ldw	r2,-16(fp)
   1aa2c:	10000226 	beq	r2,zero,1aa38 <alt_up_ps2_write_fd+0x68>
			return count;
   1aa30:	e0bffa17 	ldw	r2,-24(fp)
   1aa34:	00000706 	br	1aa54 <alt_up_ps2_write_fd+0x84>
		count++;
   1aa38:	e0bffa17 	ldw	r2,-24(fp)
   1aa3c:	10800044 	addi	r2,r2,1
   1aa40:	e0bffa15 	stw	r2,-24(fp)
int alt_up_ps2_write_fd (alt_fd* fd, const char* ptr, int len)
{
	alt_up_ps2_dev *ps2 = (alt_up_ps2_dev*) fd->dev;
	int status = 0;
	int count = 0;
	while (count < len)
   1aa44:	e0fffa17 	ldw	r3,-24(fp)
   1aa48:	e0bfff17 	ldw	r2,-4(fp)
   1aa4c:	18bfed16 	blt	r3,r2,1aa04 <__alt_mem_Flash_flash_data+0xf401aa04>
		status = alt_up_ps2_write_data_byte(ps2, *(ptr++) );
		if (status!=0)
			return count;
		count++;
	}
	return count;
   1aa50:	e0bffa17 	ldw	r2,-24(fp)
}
   1aa54:	e037883a 	mov	sp,fp
   1aa58:	dfc00117 	ldw	ra,4(sp)
   1aa5c:	df000017 	ldw	fp,0(sp)
   1aa60:	dec00204 	addi	sp,sp,8
   1aa64:	f800283a 	ret

0001aa68 <alt_up_ps2_open_dev>:

alt_up_ps2_dev* alt_up_ps2_open_dev(const char* name)
{
   1aa68:	defffc04 	addi	sp,sp,-16
   1aa6c:	dfc00315 	stw	ra,12(sp)
   1aa70:	df000215 	stw	fp,8(sp)
   1aa74:	df000204 	addi	fp,sp,8
   1aa78:	e13fff15 	stw	r4,-4(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_ps2_dev *dev = (alt_up_ps2_dev*)alt_find_dev(name, &alt_dev_list);
   1aa7c:	e13fff17 	ldw	r4,-4(fp)
   1aa80:	014000b4 	movhi	r5,2
   1aa84:	297b3004 	addi	r5,r5,-4928
   1aa88:	001b4240 	call	1b424 <alt_find_dev>
   1aa8c:	e0bffe15 	stw	r2,-8(fp)

  return dev;
   1aa90:	e0bffe17 	ldw	r2,-8(fp)
}
   1aa94:	e037883a 	mov	sp,fp
   1aa98:	dfc00117 	ldw	ra,4(sp)
   1aa9c:	df000017 	ldw	fp,0(sp)
   1aaa0:	dec00204 	addi	sp,sp,8
   1aaa4:	f800283a 	ret

0001aaa8 <alt_up_rs232_enable_read_interrupt>:
#include "altera_up_avalon_rs232.h"
#include "altera_up_avalon_rs232_regs.h"


void alt_up_rs232_enable_read_interrupt(alt_up_rs232_dev *rs232)
{
   1aaa8:	defffd04 	addi	sp,sp,-12
   1aaac:	df000215 	stw	fp,8(sp)
   1aab0:	df000204 	addi	fp,sp,8
   1aab4:	e13fff15 	stw	r4,-4(fp)
	alt_u32 ctrl_reg;
	ctrl_reg = IORD_ALT_UP_RS232_CONTROL(rs232->base); 
   1aab8:	e0bfff17 	ldw	r2,-4(fp)
   1aabc:	10800a17 	ldw	r2,40(r2)
   1aac0:	10800104 	addi	r2,r2,4
   1aac4:	10800037 	ldwio	r2,0(r2)
   1aac8:	e0bffe15 	stw	r2,-8(fp)
	// set RE to 1 while maintaining other bits the same
	ctrl_reg |= ALT_UP_RS232_CONTROL_RE_MSK;
   1aacc:	e0bffe17 	ldw	r2,-8(fp)
   1aad0:	10800054 	ori	r2,r2,1
   1aad4:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_RS232_CONTROL(rs232->base, ctrl_reg);
   1aad8:	e0bfff17 	ldw	r2,-4(fp)
   1aadc:	10800a17 	ldw	r2,40(r2)
   1aae0:	10800104 	addi	r2,r2,4
   1aae4:	1007883a 	mov	r3,r2
   1aae8:	e0bffe17 	ldw	r2,-8(fp)
   1aaec:	18800035 	stwio	r2,0(r3)
}
   1aaf0:	e037883a 	mov	sp,fp
   1aaf4:	df000017 	ldw	fp,0(sp)
   1aaf8:	dec00104 	addi	sp,sp,4
   1aafc:	f800283a 	ret

0001ab00 <alt_up_rs232_disable_read_interrupt>:

void alt_up_rs232_disable_read_interrupt(alt_up_rs232_dev *rs232)
{
   1ab00:	defffd04 	addi	sp,sp,-12
   1ab04:	df000215 	stw	fp,8(sp)
   1ab08:	df000204 	addi	fp,sp,8
   1ab0c:	e13fff15 	stw	r4,-4(fp)
	alt_u32 ctrl_reg;
	ctrl_reg = IORD_ALT_UP_RS232_CONTROL(rs232->base); 
   1ab10:	e0bfff17 	ldw	r2,-4(fp)
   1ab14:	10800a17 	ldw	r2,40(r2)
   1ab18:	10800104 	addi	r2,r2,4
   1ab1c:	10800037 	ldwio	r2,0(r2)
   1ab20:	e0bffe15 	stw	r2,-8(fp)
	// set RE to 0 while maintaining other bits the same
	ctrl_reg &= ~ALT_UP_RS232_CONTROL_RE_MSK;
   1ab24:	e0fffe17 	ldw	r3,-8(fp)
   1ab28:	00bfff84 	movi	r2,-2
   1ab2c:	1884703a 	and	r2,r3,r2
   1ab30:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_RS232_CONTROL(rs232->base, ctrl_reg);
   1ab34:	e0bfff17 	ldw	r2,-4(fp)
   1ab38:	10800a17 	ldw	r2,40(r2)
   1ab3c:	10800104 	addi	r2,r2,4
   1ab40:	1007883a 	mov	r3,r2
   1ab44:	e0bffe17 	ldw	r2,-8(fp)
   1ab48:	18800035 	stwio	r2,0(r3)
}
   1ab4c:	e037883a 	mov	sp,fp
   1ab50:	df000017 	ldw	fp,0(sp)
   1ab54:	dec00104 	addi	sp,sp,4
   1ab58:	f800283a 	ret

0001ab5c <alt_up_rs232_get_used_space_in_read_FIFO>:

unsigned alt_up_rs232_get_used_space_in_read_FIFO(alt_up_rs232_dev *rs232)
{
   1ab5c:	defffd04 	addi	sp,sp,-12
   1ab60:	df000215 	stw	fp,8(sp)
   1ab64:	df000204 	addi	fp,sp,8
   1ab68:	e13fff15 	stw	r4,-4(fp)
	alt_u16 ravail = 0;
   1ab6c:	e03ffe0d 	sth	zero,-8(fp)
	// we can only read the 16 bits for RAVAIL --- a read of DATA will discard the data
//	ravail = IORD_16DIRECT(IOADDR_ALT_UP_RS232_DATA(rs232->base), 2); 
	ravail = IORD_ALT_UP_RS232_RAVAIL(rs232->base); 
   1ab70:	e0bfff17 	ldw	r2,-4(fp)
   1ab74:	10800a17 	ldw	r2,40(r2)
   1ab78:	10800084 	addi	r2,r2,2
   1ab7c:	1080002b 	ldhuio	r2,0(r2)
   1ab80:	10bfffcc 	andi	r2,r2,65535
   1ab84:	e0bffe0d 	sth	r2,-8(fp)
//	return ravail;
	return (ravail & ALT_UP_RS232_RAVAIL_MSK) >> ALT_UP_RS232_RAVAIL_OFST;
   1ab88:	e0bffe0b 	ldhu	r2,-8(fp)
}
   1ab8c:	e037883a 	mov	sp,fp
   1ab90:	df000017 	ldw	fp,0(sp)
   1ab94:	dec00104 	addi	sp,sp,4
   1ab98:	f800283a 	ret

0001ab9c <alt_up_rs232_get_available_space_in_write_FIFO>:

unsigned alt_up_rs232_get_available_space_in_write_FIFO(alt_up_rs232_dev *rs232)
{
   1ab9c:	defffd04 	addi	sp,sp,-12
   1aba0:	df000215 	stw	fp,8(sp)
   1aba4:	df000204 	addi	fp,sp,8
   1aba8:	e13fff15 	stw	r4,-4(fp)
	alt_u32 ctrl_reg;
	ctrl_reg = IORD_ALT_UP_RS232_CONTROL(rs232->base); 
   1abac:	e0bfff17 	ldw	r2,-4(fp)
   1abb0:	10800a17 	ldw	r2,40(r2)
   1abb4:	10800104 	addi	r2,r2,4
   1abb8:	10800037 	ldwio	r2,0(r2)
   1abbc:	e0bffe15 	stw	r2,-8(fp)
	return (ctrl_reg & ALT_UP_RS232_CONTROL_WSPACE_MSK) >> ALT_UP_RS232_CONTROL_WSPACE_OFST;
   1abc0:	e0bffe17 	ldw	r2,-8(fp)
   1abc4:	1004d43a 	srli	r2,r2,16
}
   1abc8:	e037883a 	mov	sp,fp
   1abcc:	df000017 	ldw	fp,0(sp)
   1abd0:	dec00104 	addi	sp,sp,4
   1abd4:	f800283a 	ret

0001abd8 <alt_up_rs232_check_parity>:

int alt_up_rs232_check_parity(alt_u32 data_reg)
{
   1abd8:	defffd04 	addi	sp,sp,-12
   1abdc:	df000215 	stw	fp,8(sp)
   1abe0:	df000204 	addi	fp,sp,8
   1abe4:	e13fff15 	stw	r4,-4(fp)
	unsigned parity_error = (data_reg & ALT_UP_RS232_DATA_PE_MSK) >> ALT_UP_RS232_DATA_PE_OFST;
   1abe8:	e0bfff17 	ldw	r2,-4(fp)
   1abec:	1080800c 	andi	r2,r2,512
   1abf0:	1004d27a 	srli	r2,r2,9
   1abf4:	e0bffe15 	stw	r2,-8(fp)
	return (parity_error ? -1 : 0);
   1abf8:	e0bffe17 	ldw	r2,-8(fp)
   1abfc:	10000226 	beq	r2,zero,1ac08 <alt_up_rs232_check_parity+0x30>
   1ac00:	00bfffc4 	movi	r2,-1
   1ac04:	00000106 	br	1ac0c <alt_up_rs232_check_parity+0x34>
   1ac08:	0005883a 	mov	r2,zero
}
   1ac0c:	e037883a 	mov	sp,fp
   1ac10:	df000017 	ldw	fp,0(sp)
   1ac14:	dec00104 	addi	sp,sp,4
   1ac18:	f800283a 	ret

0001ac1c <alt_up_rs232_write_data>:

int alt_up_rs232_write_data(alt_up_rs232_dev *rs232, alt_u8 data)
{
   1ac1c:	defffd04 	addi	sp,sp,-12
   1ac20:	df000215 	stw	fp,8(sp)
   1ac24:	df000204 	addi	fp,sp,8
   1ac28:	e13ffe15 	stw	r4,-8(fp)
   1ac2c:	2805883a 	mov	r2,r5
   1ac30:	e0bfff05 	stb	r2,-4(fp)
	/*alt_u32 data_reg;
	data_reg = IORD_ALT_UP_RS232_DATA(rs232->base);*/
    
	// we can write directly without thinking about other bit fields for this
	// case ONLY, because only DATA field of the data register is writable
	IOWR_ALT_UP_RS232_DATA(rs232->base, (data>>ALT_UP_RS232_DATA_DATA_OFST) & ALT_UP_RS232_DATA_DATA_MSK);
   1ac34:	e0bffe17 	ldw	r2,-8(fp)
   1ac38:	10800a17 	ldw	r2,40(r2)
   1ac3c:	1007883a 	mov	r3,r2
   1ac40:	e0bfff03 	ldbu	r2,-4(fp)
   1ac44:	18800035 	stwio	r2,0(r3)
	return 0;
   1ac48:	0005883a 	mov	r2,zero
}
   1ac4c:	e037883a 	mov	sp,fp
   1ac50:	df000017 	ldw	fp,0(sp)
   1ac54:	dec00104 	addi	sp,sp,4
   1ac58:	f800283a 	ret

0001ac5c <alt_up_rs232_read_data>:

int alt_up_rs232_read_data(alt_up_rs232_dev *rs232, alt_u8 *data, alt_u8 *parity_error)
{
   1ac5c:	defffa04 	addi	sp,sp,-24
   1ac60:	dfc00515 	stw	ra,20(sp)
   1ac64:	df000415 	stw	fp,16(sp)
   1ac68:	df000404 	addi	fp,sp,16
   1ac6c:	e13ffd15 	stw	r4,-12(fp)
   1ac70:	e17ffe15 	stw	r5,-8(fp)
   1ac74:	e1bfff15 	stw	r6,-4(fp)
	alt_u32 data_reg;
	data_reg = IORD_ALT_UP_RS232_DATA(rs232->base);
   1ac78:	e0bffd17 	ldw	r2,-12(fp)
   1ac7c:	10800a17 	ldw	r2,40(r2)
   1ac80:	10800037 	ldwio	r2,0(r2)
   1ac84:	e0bffc15 	stw	r2,-16(fp)
	*data = (data_reg & ALT_UP_RS232_DATA_DATA_MSK) >> ALT_UP_RS232_DATA_DATA_OFST;
   1ac88:	e0bffc17 	ldw	r2,-16(fp)
   1ac8c:	1007883a 	mov	r3,r2
   1ac90:	e0bffe17 	ldw	r2,-8(fp)
   1ac94:	10c00005 	stb	r3,0(r2)
	*parity_error = alt_up_rs232_check_parity(data_reg);
   1ac98:	e13ffc17 	ldw	r4,-16(fp)
   1ac9c:	001abd80 	call	1abd8 <alt_up_rs232_check_parity>
   1aca0:	1007883a 	mov	r3,r2
   1aca4:	e0bfff17 	ldw	r2,-4(fp)
   1aca8:	10c00005 	stb	r3,0(r2)
	return (((data_reg & ALT_UP_RS232_DATA_RVALID_MSK) >> ALT_UP_RS232_DATA_RVALID_OFST) - 1);
   1acac:	e0bffc17 	ldw	r2,-16(fp)
   1acb0:	10a0000c 	andi	r2,r2,32768
   1acb4:	1004d3fa 	srli	r2,r2,15
   1acb8:	10bfffc4 	addi	r2,r2,-1
}
   1acbc:	e037883a 	mov	sp,fp
   1acc0:	dfc00117 	ldw	ra,4(sp)
   1acc4:	df000017 	ldw	fp,0(sp)
   1acc8:	dec00204 	addi	sp,sp,8
   1accc:	f800283a 	ret

0001acd0 <alt_up_rs232_read_fd>:

int alt_up_rs232_read_fd (alt_fd* fd, char* ptr, int len)
{
   1acd0:	defff804 	addi	sp,sp,-32
   1acd4:	dfc00715 	stw	ra,28(sp)
   1acd8:	df000615 	stw	fp,24(sp)
   1acdc:	df000604 	addi	fp,sp,24
   1ace0:	e13ffd15 	stw	r4,-12(fp)
   1ace4:	e17ffe15 	stw	r5,-8(fp)
   1ace8:	e1bfff15 	stw	r6,-4(fp)
	alt_up_rs232_dev *rs232 = (alt_up_rs232_dev*)fd->dev;
   1acec:	e0bffd17 	ldw	r2,-12(fp)
   1acf0:	10800017 	ldw	r2,0(r2)
   1acf4:	e0bffb15 	stw	r2,-20(fp)
	int count = 0;
   1acf8:	e03ffa15 	stw	zero,-24(fp)
	alt_u8 parity_error;
	while(len--)
   1acfc:	00000e06 	br	1ad38 <alt_up_rs232_read_fd+0x68>
	{
		if (alt_up_rs232_read_data(rs232, (alt_u8 *)ptr++, &parity_error)==0)
   1ad00:	e0bffe17 	ldw	r2,-8(fp)
   1ad04:	10c00044 	addi	r3,r2,1
   1ad08:	e0fffe15 	stw	r3,-8(fp)
   1ad0c:	e0fffc04 	addi	r3,fp,-16
   1ad10:	e13ffb17 	ldw	r4,-20(fp)
   1ad14:	100b883a 	mov	r5,r2
   1ad18:	180d883a 	mov	r6,r3
   1ad1c:	001ac5c0 	call	1ac5c <alt_up_rs232_read_data>
   1ad20:	1000041e 	bne	r2,zero,1ad34 <alt_up_rs232_read_fd+0x64>
			count++;
   1ad24:	e0bffa17 	ldw	r2,-24(fp)
   1ad28:	10800044 	addi	r2,r2,1
   1ad2c:	e0bffa15 	stw	r2,-24(fp)
   1ad30:	00000106 	br	1ad38 <alt_up_rs232_read_fd+0x68>
		else
			break;
   1ad34:	00000406 	br	1ad48 <alt_up_rs232_read_fd+0x78>
int alt_up_rs232_read_fd (alt_fd* fd, char* ptr, int len)
{
	alt_up_rs232_dev *rs232 = (alt_up_rs232_dev*)fd->dev;
	int count = 0;
	alt_u8 parity_error;
	while(len--)
   1ad38:	e0bfff17 	ldw	r2,-4(fp)
   1ad3c:	10ffffc4 	addi	r3,r2,-1
   1ad40:	e0ffff15 	stw	r3,-4(fp)
   1ad44:	103fee1e 	bne	r2,zero,1ad00 <__alt_mem_Flash_flash_data+0xf401ad00>
		if (alt_up_rs232_read_data(rs232, (alt_u8 *)ptr++, &parity_error)==0)
			count++;
		else
			break;
	}
	return count;
   1ad48:	e0bffa17 	ldw	r2,-24(fp)
}
   1ad4c:	e037883a 	mov	sp,fp
   1ad50:	dfc00117 	ldw	ra,4(sp)
   1ad54:	df000017 	ldw	fp,0(sp)
   1ad58:	dec00204 	addi	sp,sp,8
   1ad5c:	f800283a 	ret

0001ad60 <alt_up_rs232_write_fd>:

int alt_up_rs232_write_fd (alt_fd* fd, const char* ptr, int len)
{
   1ad60:	defff904 	addi	sp,sp,-28
   1ad64:	dfc00615 	stw	ra,24(sp)
   1ad68:	df000515 	stw	fp,20(sp)
   1ad6c:	df000504 	addi	fp,sp,20
   1ad70:	e13ffd15 	stw	r4,-12(fp)
   1ad74:	e17ffe15 	stw	r5,-8(fp)
   1ad78:	e1bfff15 	stw	r6,-4(fp)
	alt_up_rs232_dev *rs232 = (alt_up_rs232_dev*)fd->dev;
   1ad7c:	e0bffd17 	ldw	r2,-12(fp)
   1ad80:	10800017 	ldw	r2,0(r2)
   1ad84:	e0bffc15 	stw	r2,-16(fp)
	int count = 0;
   1ad88:	e03ffb15 	stw	zero,-20(fp)
	while(len--)
   1ad8c:	00000f06 	br	1adcc <alt_up_rs232_write_fd+0x6c>
	{
		if (alt_up_rs232_write_data(rs232, *ptr)==0)
   1ad90:	e0bffe17 	ldw	r2,-8(fp)
   1ad94:	10800003 	ldbu	r2,0(r2)
   1ad98:	10803fcc 	andi	r2,r2,255
   1ad9c:	e13ffc17 	ldw	r4,-16(fp)
   1ada0:	100b883a 	mov	r5,r2
   1ada4:	001ac1c0 	call	1ac1c <alt_up_rs232_write_data>
   1ada8:	1000071e 	bne	r2,zero,1adc8 <alt_up_rs232_write_fd+0x68>
		{
			count++;
   1adac:	e0bffb17 	ldw	r2,-20(fp)
   1adb0:	10800044 	addi	r2,r2,1
   1adb4:	e0bffb15 	stw	r2,-20(fp)
			ptr++;
   1adb8:	e0bffe17 	ldw	r2,-8(fp)
   1adbc:	10800044 	addi	r2,r2,1
   1adc0:	e0bffe15 	stw	r2,-8(fp)
   1adc4:	00000106 	br	1adcc <alt_up_rs232_write_fd+0x6c>
		}
		else
			break;
   1adc8:	00000406 	br	1addc <alt_up_rs232_write_fd+0x7c>

int alt_up_rs232_write_fd (alt_fd* fd, const char* ptr, int len)
{
	alt_up_rs232_dev *rs232 = (alt_up_rs232_dev*)fd->dev;
	int count = 0;
	while(len--)
   1adcc:	e0bfff17 	ldw	r2,-4(fp)
   1add0:	10ffffc4 	addi	r3,r2,-1
   1add4:	e0ffff15 	stw	r3,-4(fp)
   1add8:	103fed1e 	bne	r2,zero,1ad90 <__alt_mem_Flash_flash_data+0xf401ad90>
			ptr++;
		}
		else
			break;
	}
	return count;
   1addc:	e0bffb17 	ldw	r2,-20(fp)
}
   1ade0:	e037883a 	mov	sp,fp
   1ade4:	dfc00117 	ldw	ra,4(sp)
   1ade8:	df000017 	ldw	fp,0(sp)
   1adec:	dec00204 	addi	sp,sp,8
   1adf0:	f800283a 	ret

0001adf4 <alt_up_rs232_open_dev>:

alt_up_rs232_dev* alt_up_rs232_open_dev(const char* name)
{
   1adf4:	defffc04 	addi	sp,sp,-16
   1adf8:	dfc00315 	stw	ra,12(sp)
   1adfc:	df000215 	stw	fp,8(sp)
   1ae00:	df000204 	addi	fp,sp,8
   1ae04:	e13fff15 	stw	r4,-4(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_rs232_dev *dev = (alt_up_rs232_dev*)alt_find_dev(name, &alt_dev_list);
   1ae08:	e13fff17 	ldw	r4,-4(fp)
   1ae0c:	014000b4 	movhi	r5,2
   1ae10:	297b3004 	addi	r5,r5,-4928
   1ae14:	001b4240 	call	1b424 <alt_find_dev>
   1ae18:	e0bffe15 	stw	r2,-8(fp)

  return dev;
   1ae1c:	e0bffe17 	ldw	r2,-8(fp)
}
   1ae20:	e037883a 	mov	sp,fp
   1ae24:	dfc00117 	ldw	ra,4(sp)
   1ae28:	df000017 	ldw	fp,0(sp)
   1ae2c:	dec00204 	addi	sp,sp,8
   1ae30:	f800283a 	ret

0001ae34 <alt_up_char_buffer_init>:
#include <priv/alt_file.h>

#include "altera_up_avalon_video_character_buffer_with_dma.h"
#include "altera_up_avalon_video_character_buffer_with_dma_regs.h"

void alt_up_char_buffer_init(alt_up_char_buffer_dev *char_buffer) {
   1ae34:	defffc04 	addi	sp,sp,-16
   1ae38:	dfc00315 	stw	ra,12(sp)
   1ae3c:	df000215 	stw	fp,8(sp)
   1ae40:	df000204 	addi	fp,sp,8
   1ae44:	e13fff15 	stw	r4,-4(fp)
	char * name;
	name = (char *) char_buffer->dev.name;
   1ae48:	e0bfff17 	ldw	r2,-4(fp)
   1ae4c:	10800217 	ldw	r2,8(r2)
   1ae50:	e0bffe15 	stw	r2,-8(fp)

	for ( ; (*name) != '\0'; name++) {
   1ae54:	00000b06 	br	1ae84 <alt_up_char_buffer_init+0x50>
		if (strcmp(name, "_avalon_char_buffer_slave") == 0) {
   1ae58:	e13ffe17 	ldw	r4,-8(fp)
   1ae5c:	014000b4 	movhi	r5,2
   1ae60:	29737a04 	addi	r5,r5,-12824
   1ae64:	000a3340 	call	a334 <strcmp>
   1ae68:	1000031e 	bne	r2,zero,1ae78 <alt_up_char_buffer_init+0x44>
			(*name) = '\0';
   1ae6c:	e0bffe17 	ldw	r2,-8(fp)
   1ae70:	10000005 	stb	zero,0(r2)
			break;
   1ae74:	00000906 	br	1ae9c <alt_up_char_buffer_init+0x68>

void alt_up_char_buffer_init(alt_up_char_buffer_dev *char_buffer) {
	char * name;
	name = (char *) char_buffer->dev.name;

	for ( ; (*name) != '\0'; name++) {
   1ae78:	e0bffe17 	ldw	r2,-8(fp)
   1ae7c:	10800044 	addi	r2,r2,1
   1ae80:	e0bffe15 	stw	r2,-8(fp)
   1ae84:	e0bffe17 	ldw	r2,-8(fp)
   1ae88:	10800003 	ldbu	r2,0(r2)
   1ae8c:	10803fcc 	andi	r2,r2,255
   1ae90:	1080201c 	xori	r2,r2,128
   1ae94:	10bfe004 	addi	r2,r2,-128
   1ae98:	103fef1e 	bne	r2,zero,1ae58 <__alt_mem_Flash_flash_data+0xf401ae58>
			(*name) = '\0';
			break;
		}
	}
	
	return;
   1ae9c:	0001883a 	nop
}
   1aea0:	e037883a 	mov	sp,fp
   1aea4:	dfc00117 	ldw	ra,4(sp)
   1aea8:	df000017 	ldw	fp,0(sp)
   1aeac:	dec00204 	addi	sp,sp,8
   1aeb0:	f800283a 	ret

0001aeb4 <alt_up_char_buffer_open_dev>:

alt_up_char_buffer_dev* alt_up_char_buffer_open_dev(const char* name) {
   1aeb4:	defffc04 	addi	sp,sp,-16
   1aeb8:	dfc00315 	stw	ra,12(sp)
   1aebc:	df000215 	stw	fp,8(sp)
   1aec0:	df000204 	addi	fp,sp,8
   1aec4:	e13fff15 	stw	r4,-4(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_char_buffer_dev *dev = (alt_up_char_buffer_dev *)alt_find_dev(name, &alt_dev_list);
   1aec8:	e13fff17 	ldw	r4,-4(fp)
   1aecc:	014000b4 	movhi	r5,2
   1aed0:	297b3004 	addi	r5,r5,-4928
   1aed4:	001b4240 	call	1b424 <alt_find_dev>
   1aed8:	e0bffe15 	stw	r2,-8(fp)

  return dev;
   1aedc:	e0bffe17 	ldw	r2,-8(fp)
}
   1aee0:	e037883a 	mov	sp,fp
   1aee4:	dfc00117 	ldw	ra,4(sp)
   1aee8:	df000017 	ldw	fp,0(sp)
   1aeec:	dec00204 	addi	sp,sp,8
   1aef0:	f800283a 	ret

0001aef4 <alt_up_char_buffer_draw>:

int alt_up_char_buffer_draw(alt_up_char_buffer_dev *char_buffer, unsigned char ch, 
	unsigned int x, unsigned int y) {
   1aef4:	defffa04 	addi	sp,sp,-24
   1aef8:	df000515 	stw	fp,20(sp)
   1aefc:	df000504 	addi	fp,sp,20
   1af00:	e13ffc15 	stw	r4,-16(fp)
   1af04:	2805883a 	mov	r2,r5
   1af08:	e1bffe15 	stw	r6,-8(fp)
   1af0c:	e1ffff15 	stw	r7,-4(fp)
   1af10:	e0bffd05 	stb	r2,-12(fp)
	// boundary check
	if (x >= char_buffer->x_resolution || y >= char_buffer->y_resolution )
   1af14:	e0bffc17 	ldw	r2,-16(fp)
   1af18:	10800c17 	ldw	r2,48(r2)
   1af1c:	e0fffe17 	ldw	r3,-8(fp)
   1af20:	1880042e 	bgeu	r3,r2,1af34 <alt_up_char_buffer_draw+0x40>
   1af24:	e0bffc17 	ldw	r2,-16(fp)
   1af28:	10800d17 	ldw	r2,52(r2)
   1af2c:	e0ffff17 	ldw	r3,-4(fp)
   1af30:	18800236 	bltu	r3,r2,1af3c <alt_up_char_buffer_draw+0x48>
		return -1;
   1af34:	00bfffc4 	movi	r2,-1
   1af38:	00001d06 	br	1afb0 <alt_up_char_buffer_draw+0xbc>
	
	unsigned int addr = 0;
   1af3c:	e03ffb15 	stw	zero,-20(fp)
	addr |= ((x & char_buffer->x_coord_mask) << char_buffer->x_coord_offset);
   1af40:	e0bffc17 	ldw	r2,-16(fp)
   1af44:	10c00f17 	ldw	r3,60(r2)
   1af48:	e0bffe17 	ldw	r2,-8(fp)
   1af4c:	1884703a 	and	r2,r3,r2
   1af50:	e0fffc17 	ldw	r3,-16(fp)
   1af54:	18c00e17 	ldw	r3,56(r3)
   1af58:	10c4983a 	sll	r2,r2,r3
   1af5c:	e0fffb17 	ldw	r3,-20(fp)
   1af60:	1884b03a 	or	r2,r3,r2
   1af64:	e0bffb15 	stw	r2,-20(fp)
	addr |= ((y & char_buffer->y_coord_mask) << char_buffer->y_coord_offset);
   1af68:	e0bffc17 	ldw	r2,-16(fp)
   1af6c:	10c01117 	ldw	r3,68(r2)
   1af70:	e0bfff17 	ldw	r2,-4(fp)
   1af74:	1884703a 	and	r2,r3,r2
   1af78:	e0fffc17 	ldw	r3,-16(fp)
   1af7c:	18c01017 	ldw	r3,64(r3)
   1af80:	10c4983a 	sll	r2,r2,r3
   1af84:	e0fffb17 	ldw	r3,-20(fp)
   1af88:	1884b03a 	or	r2,r3,r2
   1af8c:	e0bffb15 	stw	r2,-20(fp)
	IOWR_8DIRECT(char_buffer->buffer_base, addr, ch);
   1af90:	e0bffc17 	ldw	r2,-16(fp)
   1af94:	10c00b17 	ldw	r3,44(r2)
   1af98:	e0bffb17 	ldw	r2,-20(fp)
   1af9c:	1885883a 	add	r2,r3,r2
   1afa0:	1007883a 	mov	r3,r2
   1afa4:	e0bffd03 	ldbu	r2,-12(fp)
   1afa8:	18800025 	stbio	r2,0(r3)

	return 0;
   1afac:	0005883a 	mov	r2,zero
}
   1afb0:	e037883a 	mov	sp,fp
   1afb4:	df000017 	ldw	fp,0(sp)
   1afb8:	dec00104 	addi	sp,sp,4
   1afbc:	f800283a 	ret

0001afc0 <alt_up_char_buffer_string>:

int alt_up_char_buffer_string(alt_up_char_buffer_dev *char_buffer, const char *ptr, 
	unsigned int x, unsigned int y) {
   1afc0:	defffa04 	addi	sp,sp,-24
   1afc4:	df000515 	stw	fp,20(sp)
   1afc8:	df000504 	addi	fp,sp,20
   1afcc:	e13ffc15 	stw	r4,-16(fp)
   1afd0:	e17ffd15 	stw	r5,-12(fp)
   1afd4:	e1bffe15 	stw	r6,-8(fp)
   1afd8:	e1ffff15 	stw	r7,-4(fp)
	// boundary check
	if (x >= char_buffer->x_resolution || y >= char_buffer->y_resolution )
   1afdc:	e0bffc17 	ldw	r2,-16(fp)
   1afe0:	10800c17 	ldw	r2,48(r2)
   1afe4:	e0fffe17 	ldw	r3,-8(fp)
   1afe8:	1880042e 	bgeu	r3,r2,1affc <alt_up_char_buffer_string+0x3c>
   1afec:	e0bffc17 	ldw	r2,-16(fp)
   1aff0:	10800d17 	ldw	r2,52(r2)
   1aff4:	e0ffff17 	ldw	r3,-4(fp)
   1aff8:	18800236 	bltu	r3,r2,1b004 <alt_up_char_buffer_string+0x44>
		return -1;
   1affc:	00bfffc4 	movi	r2,-1
   1b000:	00002b06 	br	1b0b0 <alt_up_char_buffer_string+0xf0>
	
	unsigned int offset = 0;
   1b004:	e03ffb15 	stw	zero,-20(fp)
	offset = (y << char_buffer->y_coord_offset) + x;
   1b008:	e0bffc17 	ldw	r2,-16(fp)
   1b00c:	10801017 	ldw	r2,64(r2)
   1b010:	1007883a 	mov	r3,r2
   1b014:	e0bfff17 	ldw	r2,-4(fp)
   1b018:	10c6983a 	sll	r3,r2,r3
   1b01c:	e0bffe17 	ldw	r2,-8(fp)
   1b020:	1885883a 	add	r2,r3,r2
   1b024:	e0bffb15 	stw	r2,-20(fp)

	while ( *ptr )
   1b028:	00001a06 	br	1b094 <alt_up_char_buffer_string+0xd4>
	{
		IOWR_8DIRECT(char_buffer->buffer_base, offset, *ptr);
   1b02c:	e0bffc17 	ldw	r2,-16(fp)
   1b030:	10c00b17 	ldw	r3,44(r2)
   1b034:	e0bffb17 	ldw	r2,-20(fp)
   1b038:	1885883a 	add	r2,r3,r2
   1b03c:	1007883a 	mov	r3,r2
   1b040:	e0bffd17 	ldw	r2,-12(fp)
   1b044:	10800003 	ldbu	r2,0(r2)
   1b048:	10803fcc 	andi	r2,r2,255
   1b04c:	1080201c 	xori	r2,r2,128
   1b050:	10bfe004 	addi	r2,r2,-128
   1b054:	18800025 	stbio	r2,0(r3)
		++ptr;
   1b058:	e0bffd17 	ldw	r2,-12(fp)
   1b05c:	10800044 	addi	r2,r2,1
   1b060:	e0bffd15 	stw	r2,-12(fp)
		if (++x >= char_buffer->x_resolution)
   1b064:	e0bffe17 	ldw	r2,-8(fp)
   1b068:	10800044 	addi	r2,r2,1
   1b06c:	e0bffe15 	stw	r2,-8(fp)
   1b070:	e0bffc17 	ldw	r2,-16(fp)
   1b074:	10800c17 	ldw	r2,48(r2)
   1b078:	e0fffe17 	ldw	r3,-8(fp)
   1b07c:	18800236 	bltu	r3,r2,1b088 <alt_up_char_buffer_string+0xc8>
			return -1;
   1b080:	00bfffc4 	movi	r2,-1
   1b084:	00000a06 	br	1b0b0 <alt_up_char_buffer_string+0xf0>
		++offset;
   1b088:	e0bffb17 	ldw	r2,-20(fp)
   1b08c:	10800044 	addi	r2,r2,1
   1b090:	e0bffb15 	stw	r2,-20(fp)
		return -1;
	
	unsigned int offset = 0;
	offset = (y << char_buffer->y_coord_offset) + x;

	while ( *ptr )
   1b094:	e0bffd17 	ldw	r2,-12(fp)
   1b098:	10800003 	ldbu	r2,0(r2)
   1b09c:	10803fcc 	andi	r2,r2,255
   1b0a0:	1080201c 	xori	r2,r2,128
   1b0a4:	10bfe004 	addi	r2,r2,-128
   1b0a8:	103fe01e 	bne	r2,zero,1b02c <__alt_mem_Flash_flash_data+0xf401b02c>
		++ptr;
		if (++x >= char_buffer->x_resolution)
			return -1;
		++offset;
	}
	return 0;
   1b0ac:	0005883a 	mov	r2,zero
}
   1b0b0:	e037883a 	mov	sp,fp
   1b0b4:	df000017 	ldw	fp,0(sp)
   1b0b8:	dec00104 	addi	sp,sp,4
   1b0bc:	f800283a 	ret

0001b0c0 <alt_up_char_buffer_clear>:

int alt_up_char_buffer_clear(alt_up_char_buffer_dev *char_buffer) {
   1b0c0:	defffe04 	addi	sp,sp,-8
   1b0c4:	df000115 	stw	fp,4(sp)
   1b0c8:	df000104 	addi	fp,sp,4
   1b0cc:	e13fff15 	stw	r4,-4(fp)
	IOWR_ALT_UP_CHAR_BUFFER_CLR_SCRN(char_buffer->ctrl_reg_base, 1);
   1b0d0:	e0bfff17 	ldw	r2,-4(fp)
   1b0d4:	10800a17 	ldw	r2,40(r2)
   1b0d8:	10800084 	addi	r2,r2,2
   1b0dc:	1007883a 	mov	r3,r2
   1b0e0:	00800044 	movi	r2,1
   1b0e4:	18800025 	stbio	r2,0(r3)
	while ((IORD_ALT_UP_CHAR_BUFFER_CLR_SCRN(char_buffer->ctrl_reg_base) & ALT_UP_CHAR_BUFFER_CLR_SCRN_MSK) >> ALT_UP_CHAR_BUFFER_CLR_SCRN_OFST);
   1b0e8:	0001883a 	nop
   1b0ec:	e0bfff17 	ldw	r2,-4(fp)
   1b0f0:	10800a17 	ldw	r2,40(r2)
   1b0f4:	10800084 	addi	r2,r2,2
   1b0f8:	10800023 	ldbuio	r2,0(r2)
   1b0fc:	10803fcc 	andi	r2,r2,255
   1b100:	1080004c 	andi	r2,r2,1
   1b104:	103ff91e 	bne	r2,zero,1b0ec <__alt_mem_Flash_flash_data+0xf401b0ec>
	return 0;
   1b108:	0005883a 	mov	r2,zero
}
   1b10c:	e037883a 	mov	sp,fp
   1b110:	df000017 	ldw	fp,0(sp)
   1b114:	dec00104 	addi	sp,sp,4
   1b118:	f800283a 	ret

0001b11c <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
   1b11c:	defff504 	addi	sp,sp,-44
   1b120:	df000a15 	stw	fp,40(sp)
   1b124:	df000a04 	addi	fp,sp,40
   1b128:	e13ffc15 	stw	r4,-16(fp)
   1b12c:	e17ffd15 	stw	r5,-12(fp)
   1b130:	e1bffe15 	stw	r6,-8(fp)
   1b134:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
   1b138:	e03ff615 	stw	zero,-40(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
   1b13c:	008000b4 	movhi	r2,2
   1b140:	10836b04 	addi	r2,r2,3500
   1b144:	10800017 	ldw	r2,0(r2)
  
  if (alt_ticks_per_second ())
   1b148:	10003f26 	beq	r2,zero,1b248 <alt_alarm_start+0x12c>
  {
    if (alarm)
   1b14c:	e0bffc17 	ldw	r2,-16(fp)
   1b150:	10003b26 	beq	r2,zero,1b240 <alt_alarm_start+0x124>
    {
      alarm->callback = callback;
   1b154:	e0bffc17 	ldw	r2,-16(fp)
   1b158:	e0fffe17 	ldw	r3,-8(fp)
   1b15c:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
   1b160:	e0bffc17 	ldw	r2,-16(fp)
   1b164:	e0ffff17 	ldw	r3,-4(fp)
   1b168:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1b16c:	0005303a 	rdctl	r2,status
   1b170:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1b174:	e0fff817 	ldw	r3,-32(fp)
   1b178:	00bfff84 	movi	r2,-2
   1b17c:	1884703a 	and	r2,r3,r2
   1b180:	1001703a 	wrctl	status,r2
  
  return context;
   1b184:	e0bff817 	ldw	r2,-32(fp)
 
      irq_context = alt_irq_disable_all ();
   1b188:	e0bff715 	stw	r2,-36(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
   1b18c:	008000b4 	movhi	r2,2
   1b190:	10836c04 	addi	r2,r2,3504
   1b194:	10800017 	ldw	r2,0(r2)
      
      current_nticks = alt_nticks();
   1b198:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
   1b19c:	e0fffd17 	ldw	r3,-12(fp)
   1b1a0:	e0bff617 	ldw	r2,-40(fp)
   1b1a4:	1885883a 	add	r2,r3,r2
   1b1a8:	10c00044 	addi	r3,r2,1
   1b1ac:	e0bffc17 	ldw	r2,-16(fp)
   1b1b0:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
   1b1b4:	e0bffc17 	ldw	r2,-16(fp)
   1b1b8:	10c00217 	ldw	r3,8(r2)
   1b1bc:	e0bff617 	ldw	r2,-40(fp)
   1b1c0:	1880042e 	bgeu	r3,r2,1b1d4 <alt_alarm_start+0xb8>
      {
        alarm->rollover = 1;
   1b1c4:	e0bffc17 	ldw	r2,-16(fp)
   1b1c8:	00c00044 	movi	r3,1
   1b1cc:	10c00405 	stb	r3,16(r2)
   1b1d0:	00000206 	br	1b1dc <alt_alarm_start+0xc0>
      }
      else
      {
        alarm->rollover = 0;
   1b1d4:	e0bffc17 	ldw	r2,-16(fp)
   1b1d8:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
   1b1dc:	e0fffc17 	ldw	r3,-16(fp)
   1b1e0:	008000b4 	movhi	r2,2
   1b1e4:	10bb5504 	addi	r2,r2,-4780
   1b1e8:	e0bff915 	stw	r2,-28(fp)
   1b1ec:	e0fffa15 	stw	r3,-24(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   1b1f0:	e0bffa17 	ldw	r2,-24(fp)
   1b1f4:	e0fff917 	ldw	r3,-28(fp)
   1b1f8:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   1b1fc:	e0bff917 	ldw	r2,-28(fp)
   1b200:	10c00017 	ldw	r3,0(r2)
   1b204:	e0bffa17 	ldw	r2,-24(fp)
   1b208:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   1b20c:	e0bff917 	ldw	r2,-28(fp)
   1b210:	10800017 	ldw	r2,0(r2)
   1b214:	e0fffa17 	ldw	r3,-24(fp)
   1b218:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   1b21c:	e0bff917 	ldw	r2,-28(fp)
   1b220:	e0fffa17 	ldw	r3,-24(fp)
   1b224:	10c00015 	stw	r3,0(r2)
   1b228:	e0bff717 	ldw	r2,-36(fp)
   1b22c:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1b230:	e0bffb17 	ldw	r2,-20(fp)
   1b234:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
   1b238:	0005883a 	mov	r2,zero
   1b23c:	00000306 	br	1b24c <alt_alarm_start+0x130>
    }
    else
    {
      return -EINVAL;
   1b240:	00bffa84 	movi	r2,-22
   1b244:	00000106 	br	1b24c <alt_alarm_start+0x130>
    }
  }
  else
  {
    return -ENOTSUP;
   1b248:	00bfde84 	movi	r2,-134
  }
}
   1b24c:	e037883a 	mov	sp,fp
   1b250:	df000017 	ldw	fp,0(sp)
   1b254:	dec00104 	addi	sp,sp,4
   1b258:	f800283a 	ret

0001b25c <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
   1b25c:	deffff04 	addi	sp,sp,-4
   1b260:	df000015 	stw	fp,0(sp)
   1b264:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
   1b268:	e037883a 	mov	sp,fp
   1b26c:	df000017 	ldw	fp,0(sp)
   1b270:	dec00104 	addi	sp,sp,4
   1b274:	f800283a 	ret

0001b278 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   1b278:	defffe04 	addi	sp,sp,-8
   1b27c:	dfc00115 	stw	ra,4(sp)
   1b280:	df000015 	stw	fp,0(sp)
   1b284:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   1b288:	008000b4 	movhi	r2,2
   1b28c:	10bb3304 	addi	r2,r2,-4916
   1b290:	10800017 	ldw	r2,0(r2)
   1b294:	10000526 	beq	r2,zero,1b2ac <alt_get_errno+0x34>
   1b298:	008000b4 	movhi	r2,2
   1b29c:	10bb3304 	addi	r2,r2,-4916
   1b2a0:	10800017 	ldw	r2,0(r2)
   1b2a4:	103ee83a 	callr	r2
   1b2a8:	00000206 	br	1b2b4 <alt_get_errno+0x3c>
   1b2ac:	008000b4 	movhi	r2,2
   1b2b0:	10834d04 	addi	r2,r2,3380
}
   1b2b4:	e037883a 	mov	sp,fp
   1b2b8:	dfc00117 	ldw	ra,4(sp)
   1b2bc:	df000017 	ldw	fp,0(sp)
   1b2c0:	dec00204 	addi	sp,sp,8
   1b2c4:	f800283a 	ret

0001b2c8 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
   1b2c8:	defffa04 	addi	sp,sp,-24
   1b2cc:	dfc00515 	stw	ra,20(sp)
   1b2d0:	df000415 	stw	fp,16(sp)
   1b2d4:	df000404 	addi	fp,sp,16
   1b2d8:	e13ffe15 	stw	r4,-8(fp)
   1b2dc:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
   1b2e0:	e0bffe17 	ldw	r2,-8(fp)
   1b2e4:	10000326 	beq	r2,zero,1b2f4 <alt_dev_llist_insert+0x2c>
   1b2e8:	e0bffe17 	ldw	r2,-8(fp)
   1b2ec:	10800217 	ldw	r2,8(r2)
   1b2f0:	1000061e 	bne	r2,zero,1b30c <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
   1b2f4:	001b2780 	call	1b278 <alt_get_errno>
   1b2f8:	1007883a 	mov	r3,r2
   1b2fc:	00800584 	movi	r2,22
   1b300:	18800015 	stw	r2,0(r3)
    return -EINVAL;
   1b304:	00bffa84 	movi	r2,-22
   1b308:	00001306 	br	1b358 <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
   1b30c:	e0bffe17 	ldw	r2,-8(fp)
   1b310:	e0ffff17 	ldw	r3,-4(fp)
   1b314:	e0fffc15 	stw	r3,-16(fp)
   1b318:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   1b31c:	e0bffd17 	ldw	r2,-12(fp)
   1b320:	e0fffc17 	ldw	r3,-16(fp)
   1b324:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   1b328:	e0bffc17 	ldw	r2,-16(fp)
   1b32c:	10c00017 	ldw	r3,0(r2)
   1b330:	e0bffd17 	ldw	r2,-12(fp)
   1b334:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   1b338:	e0bffc17 	ldw	r2,-16(fp)
   1b33c:	10800017 	ldw	r2,0(r2)
   1b340:	e0fffd17 	ldw	r3,-12(fp)
   1b344:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   1b348:	e0bffc17 	ldw	r2,-16(fp)
   1b34c:	e0fffd17 	ldw	r3,-12(fp)
   1b350:	10c00015 	stw	r3,0(r2)

  return 0;  
   1b354:	0005883a 	mov	r2,zero
}
   1b358:	e037883a 	mov	sp,fp
   1b35c:	dfc00117 	ldw	ra,4(sp)
   1b360:	df000017 	ldw	fp,0(sp)
   1b364:	dec00204 	addi	sp,sp,8
   1b368:	f800283a 	ret

0001b36c <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
   1b36c:	defffd04 	addi	sp,sp,-12
   1b370:	dfc00215 	stw	ra,8(sp)
   1b374:	df000115 	stw	fp,4(sp)
   1b378:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   1b37c:	008000b4 	movhi	r2,2
   1b380:	10b18404 	addi	r2,r2,-14832
   1b384:	e0bfff15 	stw	r2,-4(fp)
   1b388:	00000606 	br	1b3a4 <_do_ctors+0x38>
        (*ctor) (); 
   1b38c:	e0bfff17 	ldw	r2,-4(fp)
   1b390:	10800017 	ldw	r2,0(r2)
   1b394:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   1b398:	e0bfff17 	ldw	r2,-4(fp)
   1b39c:	10bfff04 	addi	r2,r2,-4
   1b3a0:	e0bfff15 	stw	r2,-4(fp)
   1b3a4:	e0ffff17 	ldw	r3,-4(fp)
   1b3a8:	008000b4 	movhi	r2,2
   1b3ac:	10b18504 	addi	r2,r2,-14828
   1b3b0:	18bff62e 	bgeu	r3,r2,1b38c <__alt_mem_Flash_flash_data+0xf401b38c>
        (*ctor) (); 
}
   1b3b4:	e037883a 	mov	sp,fp
   1b3b8:	dfc00117 	ldw	ra,4(sp)
   1b3bc:	df000017 	ldw	fp,0(sp)
   1b3c0:	dec00204 	addi	sp,sp,8
   1b3c4:	f800283a 	ret

0001b3c8 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
   1b3c8:	defffd04 	addi	sp,sp,-12
   1b3cc:	dfc00215 	stw	ra,8(sp)
   1b3d0:	df000115 	stw	fp,4(sp)
   1b3d4:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   1b3d8:	008000b4 	movhi	r2,2
   1b3dc:	10b18404 	addi	r2,r2,-14832
   1b3e0:	e0bfff15 	stw	r2,-4(fp)
   1b3e4:	00000606 	br	1b400 <_do_dtors+0x38>
        (*dtor) (); 
   1b3e8:	e0bfff17 	ldw	r2,-4(fp)
   1b3ec:	10800017 	ldw	r2,0(r2)
   1b3f0:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   1b3f4:	e0bfff17 	ldw	r2,-4(fp)
   1b3f8:	10bfff04 	addi	r2,r2,-4
   1b3fc:	e0bfff15 	stw	r2,-4(fp)
   1b400:	e0ffff17 	ldw	r3,-4(fp)
   1b404:	008000b4 	movhi	r2,2
   1b408:	10b18504 	addi	r2,r2,-14828
   1b40c:	18bff62e 	bgeu	r3,r2,1b3e8 <__alt_mem_Flash_flash_data+0xf401b3e8>
        (*dtor) (); 
}
   1b410:	e037883a 	mov	sp,fp
   1b414:	dfc00117 	ldw	ra,4(sp)
   1b418:	df000017 	ldw	fp,0(sp)
   1b41c:	dec00204 	addi	sp,sp,8
   1b420:	f800283a 	ret

0001b424 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
   1b424:	defffa04 	addi	sp,sp,-24
   1b428:	dfc00515 	stw	ra,20(sp)
   1b42c:	df000415 	stw	fp,16(sp)
   1b430:	df000404 	addi	fp,sp,16
   1b434:	e13ffe15 	stw	r4,-8(fp)
   1b438:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
   1b43c:	e0bfff17 	ldw	r2,-4(fp)
   1b440:	10800017 	ldw	r2,0(r2)
   1b444:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
   1b448:	e13ffe17 	ldw	r4,-8(fp)
   1b44c:	00031740 	call	3174 <strlen>
   1b450:	10800044 	addi	r2,r2,1
   1b454:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   1b458:	00000d06 	br	1b490 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
   1b45c:	e0bffc17 	ldw	r2,-16(fp)
   1b460:	10c00217 	ldw	r3,8(r2)
   1b464:	e0bffd17 	ldw	r2,-12(fp)
   1b468:	1809883a 	mov	r4,r3
   1b46c:	e17ffe17 	ldw	r5,-8(fp)
   1b470:	100d883a 	mov	r6,r2
   1b474:	001c2b40 	call	1c2b4 <memcmp>
   1b478:	1000021e 	bne	r2,zero,1b484 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
   1b47c:	e0bffc17 	ldw	r2,-16(fp)
   1b480:	00000706 	br	1b4a0 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
   1b484:	e0bffc17 	ldw	r2,-16(fp)
   1b488:	10800017 	ldw	r2,0(r2)
   1b48c:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   1b490:	e0fffc17 	ldw	r3,-16(fp)
   1b494:	e0bfff17 	ldw	r2,-4(fp)
   1b498:	18bff01e 	bne	r3,r2,1b45c <__alt_mem_Flash_flash_data+0xf401b45c>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
   1b49c:	0005883a 	mov	r2,zero
}
   1b4a0:	e037883a 	mov	sp,fp
   1b4a4:	dfc00117 	ldw	ra,4(sp)
   1b4a8:	df000017 	ldw	fp,0(sp)
   1b4ac:	dec00204 	addi	sp,sp,8
   1b4b0:	f800283a 	ret

0001b4b4 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
   1b4b4:	defffe04 	addi	sp,sp,-8
   1b4b8:	dfc00115 	stw	ra,4(sp)
   1b4bc:	df000015 	stw	fp,0(sp)
   1b4c0:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
   1b4c4:	0009883a 	mov	r4,zero
   1b4c8:	01440004 	movi	r5,4096
   1b4cc:	001c1400 	call	1c140 <alt_icache_flush>
#endif
}
   1b4d0:	e037883a 	mov	sp,fp
   1b4d4:	dfc00117 	ldw	ra,4(sp)
   1b4d8:	df000017 	ldw	fp,0(sp)
   1b4dc:	dec00204 	addi	sp,sp,8
   1b4e0:	f800283a 	ret

0001b4e4 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
   1b4e4:	defff904 	addi	sp,sp,-28
   1b4e8:	dfc00615 	stw	ra,24(sp)
   1b4ec:	df000515 	stw	fp,20(sp)
   1b4f0:	df000504 	addi	fp,sp,20
   1b4f4:	e13ffc15 	stw	r4,-16(fp)
   1b4f8:	e17ffd15 	stw	r5,-12(fp)
   1b4fc:	e1bffe15 	stw	r6,-8(fp)
   1b500:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
   1b504:	e13ffd17 	ldw	r4,-12(fp)
   1b508:	e17ffe17 	ldw	r5,-8(fp)
   1b50c:	e1bfff17 	ldw	r6,-4(fp)
   1b510:	001b8e80 	call	1b8e8 <open>
   1b514:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
   1b518:	e0bffb17 	ldw	r2,-20(fp)
   1b51c:	10001c16 	blt	r2,zero,1b590 <alt_open_fd+0xac>
  {
    fd->dev      = alt_fd_list[old].dev;
   1b520:	008000b4 	movhi	r2,2
   1b524:	10b5bf04 	addi	r2,r2,-10500
   1b528:	e0fffb17 	ldw	r3,-20(fp)
   1b52c:	18c00324 	muli	r3,r3,12
   1b530:	10c5883a 	add	r2,r2,r3
   1b534:	10c00017 	ldw	r3,0(r2)
   1b538:	e0bffc17 	ldw	r2,-16(fp)
   1b53c:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
   1b540:	008000b4 	movhi	r2,2
   1b544:	10b5bf04 	addi	r2,r2,-10500
   1b548:	e0fffb17 	ldw	r3,-20(fp)
   1b54c:	18c00324 	muli	r3,r3,12
   1b550:	18c00104 	addi	r3,r3,4
   1b554:	10c5883a 	add	r2,r2,r3
   1b558:	10c00017 	ldw	r3,0(r2)
   1b55c:	e0bffc17 	ldw	r2,-16(fp)
   1b560:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
   1b564:	008000b4 	movhi	r2,2
   1b568:	10b5bf04 	addi	r2,r2,-10500
   1b56c:	e0fffb17 	ldw	r3,-20(fp)
   1b570:	18c00324 	muli	r3,r3,12
   1b574:	18c00204 	addi	r3,r3,8
   1b578:	10c5883a 	add	r2,r2,r3
   1b57c:	10c00017 	ldw	r3,0(r2)
   1b580:	e0bffc17 	ldw	r2,-16(fp)
   1b584:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
   1b588:	e13ffb17 	ldw	r4,-20(fp)
   1b58c:	000fb780 	call	fb78 <alt_release_fd>
  }
} 
   1b590:	e037883a 	mov	sp,fp
   1b594:	dfc00117 	ldw	ra,4(sp)
   1b598:	df000017 	ldw	fp,0(sp)
   1b59c:	dec00204 	addi	sp,sp,8
   1b5a0:	f800283a 	ret

0001b5a4 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
   1b5a4:	defffb04 	addi	sp,sp,-20
   1b5a8:	dfc00415 	stw	ra,16(sp)
   1b5ac:	df000315 	stw	fp,12(sp)
   1b5b0:	df000304 	addi	fp,sp,12
   1b5b4:	e13ffd15 	stw	r4,-12(fp)
   1b5b8:	e17ffe15 	stw	r5,-8(fp)
   1b5bc:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
   1b5c0:	010000b4 	movhi	r4,2
   1b5c4:	2135c204 	addi	r4,r4,-10488
   1b5c8:	e17ffd17 	ldw	r5,-12(fp)
   1b5cc:	01800044 	movi	r6,1
   1b5d0:	01c07fc4 	movi	r7,511
   1b5d4:	001b4e40 	call	1b4e4 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
   1b5d8:	010000b4 	movhi	r4,2
   1b5dc:	2135bf04 	addi	r4,r4,-10500
   1b5e0:	e17ffe17 	ldw	r5,-8(fp)
   1b5e4:	000d883a 	mov	r6,zero
   1b5e8:	01c07fc4 	movi	r7,511
   1b5ec:	001b4e40 	call	1b4e4 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
   1b5f0:	010000b4 	movhi	r4,2
   1b5f4:	2135c504 	addi	r4,r4,-10476
   1b5f8:	e17fff17 	ldw	r5,-4(fp)
   1b5fc:	01800044 	movi	r6,1
   1b600:	01c07fc4 	movi	r7,511
   1b604:	001b4e40 	call	1b4e4 <alt_open_fd>
}  
   1b608:	e037883a 	mov	sp,fp
   1b60c:	dfc00117 	ldw	ra,4(sp)
   1b610:	df000017 	ldw	fp,0(sp)
   1b614:	dec00204 	addi	sp,sp,8
   1b618:	f800283a 	ret

0001b61c <alt_irq_register>:
 */
 
int alt_irq_register (alt_u32 id, 
                      void* context, 
                      alt_isr_func handler)
{
   1b61c:	defff004 	addi	sp,sp,-64
   1b620:	df000f15 	stw	fp,60(sp)
   1b624:	df000f04 	addi	fp,sp,60
   1b628:	e13ffd15 	stw	r4,-12(fp)
   1b62c:	e17ffe15 	stw	r5,-8(fp)
   1b630:	e1bfff15 	stw	r6,-4(fp)
  int rc = -EINVAL;  
   1b634:	00bffa84 	movi	r2,-22
   1b638:	e0bff115 	stw	r2,-60(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
   1b63c:	e0bffd17 	ldw	r2,-12(fp)
   1b640:	10800828 	cmpgeui	r2,r2,32
   1b644:	10005c1e 	bne	r2,zero,1b7b8 <alt_irq_register+0x19c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1b648:	0005303a 	rdctl	r2,status
   1b64c:	e0bff315 	stw	r2,-52(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1b650:	e0fff317 	ldw	r3,-52(fp)
   1b654:	00bfff84 	movi	r2,-2
   1b658:	1884703a 	and	r2,r3,r2
   1b65c:	1001703a 	wrctl	status,r2
  
  return context;
   1b660:	e0bff317 	ldw	r2,-52(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all ();
   1b664:	e0bff215 	stw	r2,-56(fp)

    alt_irq[id].handler = handler;
   1b668:	008000f4 	movhi	r2,3
   1b66c:	1081f504 	addi	r2,r2,2004
   1b670:	e0fffd17 	ldw	r3,-12(fp)
   1b674:	180690fa 	slli	r3,r3,3
   1b678:	10c5883a 	add	r2,r2,r3
   1b67c:	e0ffff17 	ldw	r3,-4(fp)
   1b680:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = context;
   1b684:	008000f4 	movhi	r2,3
   1b688:	1081f504 	addi	r2,r2,2004
   1b68c:	e0fffd17 	ldw	r3,-12(fp)
   1b690:	180690fa 	slli	r3,r3,3
   1b694:	18c00104 	addi	r3,r3,4
   1b698:	10c5883a 	add	r2,r2,r3
   1b69c:	e0fffe17 	ldw	r3,-8(fp)
   1b6a0:	10c00015 	stw	r3,0(r2)

    rc = (handler) ? alt_irq_enable (id): alt_irq_disable (id);
   1b6a4:	e0bfff17 	ldw	r2,-4(fp)
   1b6a8:	10001f26 	beq	r2,zero,1b728 <alt_irq_register+0x10c>
   1b6ac:	e0bffd17 	ldw	r2,-12(fp)
   1b6b0:	e0bff415 	stw	r2,-48(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1b6b4:	0005303a 	rdctl	r2,status
   1b6b8:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1b6bc:	e0fff517 	ldw	r3,-44(fp)
   1b6c0:	00bfff84 	movi	r2,-2
   1b6c4:	1884703a 	and	r2,r3,r2
   1b6c8:	1001703a 	wrctl	status,r2
  
  return context;
   1b6cc:	e0bff517 	ldw	r2,-44(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   1b6d0:	e0bff615 	stw	r2,-40(fp)

  alt_irq_active |= (1 << id);
   1b6d4:	e0bff417 	ldw	r2,-48(fp)
   1b6d8:	00c00044 	movi	r3,1
   1b6dc:	1884983a 	sll	r2,r3,r2
   1b6e0:	1007883a 	mov	r3,r2
   1b6e4:	008000b4 	movhi	r2,2
   1b6e8:	10836a04 	addi	r2,r2,3496
   1b6ec:	10800017 	ldw	r2,0(r2)
   1b6f0:	1886b03a 	or	r3,r3,r2
   1b6f4:	008000b4 	movhi	r2,2
   1b6f8:	10836a04 	addi	r2,r2,3496
   1b6fc:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   1b700:	008000b4 	movhi	r2,2
   1b704:	10836a04 	addi	r2,r2,3496
   1b708:	10800017 	ldw	r2,0(r2)
   1b70c:	100170fa 	wrctl	ienable,r2
   1b710:	e0bff617 	ldw	r2,-40(fp)
   1b714:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1b718:	e0bff717 	ldw	r2,-36(fp)
   1b71c:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   1b720:	0005883a 	mov	r2,zero
   1b724:	00001f06 	br	1b7a4 <alt_irq_register+0x188>
   1b728:	e0bffd17 	ldw	r2,-12(fp)
   1b72c:	e0bff815 	stw	r2,-32(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1b730:	0005303a 	rdctl	r2,status
   1b734:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1b738:	e0fff917 	ldw	r3,-28(fp)
   1b73c:	00bfff84 	movi	r2,-2
   1b740:	1884703a 	and	r2,r3,r2
   1b744:	1001703a 	wrctl	status,r2
  
  return context;
   1b748:	e0bff917 	ldw	r2,-28(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   1b74c:	e0bffa15 	stw	r2,-24(fp)

  alt_irq_active &= ~(1 << id);
   1b750:	e0bff817 	ldw	r2,-32(fp)
   1b754:	00c00044 	movi	r3,1
   1b758:	1884983a 	sll	r2,r3,r2
   1b75c:	0084303a 	nor	r2,zero,r2
   1b760:	1007883a 	mov	r3,r2
   1b764:	008000b4 	movhi	r2,2
   1b768:	10836a04 	addi	r2,r2,3496
   1b76c:	10800017 	ldw	r2,0(r2)
   1b770:	1886703a 	and	r3,r3,r2
   1b774:	008000b4 	movhi	r2,2
   1b778:	10836a04 	addi	r2,r2,3496
   1b77c:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   1b780:	008000b4 	movhi	r2,2
   1b784:	10836a04 	addi	r2,r2,3496
   1b788:	10800017 	ldw	r2,0(r2)
   1b78c:	100170fa 	wrctl	ienable,r2
   1b790:	e0bffa17 	ldw	r2,-24(fp)
   1b794:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1b798:	e0bffb17 	ldw	r2,-20(fp)
   1b79c:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   1b7a0:	0005883a 	mov	r2,zero
   1b7a4:	e0bff115 	stw	r2,-60(fp)
   1b7a8:	e0bff217 	ldw	r2,-56(fp)
   1b7ac:	e0bffc15 	stw	r2,-16(fp)
   1b7b0:	e0bffc17 	ldw	r2,-16(fp)
   1b7b4:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }
  return rc; 
   1b7b8:	e0bff117 	ldw	r2,-60(fp)
}
   1b7bc:	e037883a 	mov	sp,fp
   1b7c0:	df000017 	ldw	fp,0(sp)
   1b7c4:	dec00104 	addi	sp,sp,4
   1b7c8:	f800283a 	ret

0001b7cc <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   1b7cc:	defffe04 	addi	sp,sp,-8
   1b7d0:	dfc00115 	stw	ra,4(sp)
   1b7d4:	df000015 	stw	fp,0(sp)
   1b7d8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   1b7dc:	008000b4 	movhi	r2,2
   1b7e0:	10bb3304 	addi	r2,r2,-4916
   1b7e4:	10800017 	ldw	r2,0(r2)
   1b7e8:	10000526 	beq	r2,zero,1b800 <alt_get_errno+0x34>
   1b7ec:	008000b4 	movhi	r2,2
   1b7f0:	10bb3304 	addi	r2,r2,-4916
   1b7f4:	10800017 	ldw	r2,0(r2)
   1b7f8:	103ee83a 	callr	r2
   1b7fc:	00000206 	br	1b808 <alt_get_errno+0x3c>
   1b800:	008000b4 	movhi	r2,2
   1b804:	10834d04 	addi	r2,r2,3380
}
   1b808:	e037883a 	mov	sp,fp
   1b80c:	dfc00117 	ldw	ra,4(sp)
   1b810:	df000017 	ldw	fp,0(sp)
   1b814:	dec00204 	addi	sp,sp,8
   1b818:	f800283a 	ret

0001b81c <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
   1b81c:	defffd04 	addi	sp,sp,-12
   1b820:	df000215 	stw	fp,8(sp)
   1b824:	df000204 	addi	fp,sp,8
   1b828:	e13fff15 	stw	r4,-4(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
   1b82c:	e0bfff17 	ldw	r2,-4(fp)
   1b830:	10800217 	ldw	r2,8(r2)
   1b834:	10d00034 	orhi	r3,r2,16384
   1b838:	e0bfff17 	ldw	r2,-4(fp)
   1b83c:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   1b840:	e03ffe15 	stw	zero,-8(fp)
   1b844:	00001d06 	br	1b8bc <alt_file_locked+0xa0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   1b848:	008000b4 	movhi	r2,2
   1b84c:	10b5bf04 	addi	r2,r2,-10500
   1b850:	e0fffe17 	ldw	r3,-8(fp)
   1b854:	18c00324 	muli	r3,r3,12
   1b858:	10c5883a 	add	r2,r2,r3
   1b85c:	10c00017 	ldw	r3,0(r2)
   1b860:	e0bfff17 	ldw	r2,-4(fp)
   1b864:	10800017 	ldw	r2,0(r2)
   1b868:	1880111e 	bne	r3,r2,1b8b0 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   1b86c:	008000b4 	movhi	r2,2
   1b870:	10b5bf04 	addi	r2,r2,-10500
   1b874:	e0fffe17 	ldw	r3,-8(fp)
   1b878:	18c00324 	muli	r3,r3,12
   1b87c:	18c00204 	addi	r3,r3,8
   1b880:	10c5883a 	add	r2,r2,r3
   1b884:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   1b888:	1000090e 	bge	r2,zero,1b8b0 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
   1b88c:	e0bffe17 	ldw	r2,-8(fp)
   1b890:	10c00324 	muli	r3,r2,12
   1b894:	008000b4 	movhi	r2,2
   1b898:	10b5bf04 	addi	r2,r2,-10500
   1b89c:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   1b8a0:	e0bfff17 	ldw	r2,-4(fp)
   1b8a4:	18800226 	beq	r3,r2,1b8b0 <alt_file_locked+0x94>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
   1b8a8:	00bffcc4 	movi	r2,-13
   1b8ac:	00000a06 	br	1b8d8 <alt_file_locked+0xbc>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   1b8b0:	e0bffe17 	ldw	r2,-8(fp)
   1b8b4:	10800044 	addi	r2,r2,1
   1b8b8:	e0bffe15 	stw	r2,-8(fp)
   1b8bc:	008000b4 	movhi	r2,2
   1b8c0:	10bb3204 	addi	r2,r2,-4920
   1b8c4:	10800017 	ldw	r2,0(r2)
   1b8c8:	1007883a 	mov	r3,r2
   1b8cc:	e0bffe17 	ldw	r2,-8(fp)
   1b8d0:	18bfdd2e 	bgeu	r3,r2,1b848 <__alt_mem_Flash_flash_data+0xf401b848>
    }
  }
  
  /* The device is not locked */
 
  return 0;
   1b8d4:	0005883a 	mov	r2,zero
}
   1b8d8:	e037883a 	mov	sp,fp
   1b8dc:	df000017 	ldw	fp,0(sp)
   1b8e0:	dec00104 	addi	sp,sp,4
   1b8e4:	f800283a 	ret

0001b8e8 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
   1b8e8:	defff604 	addi	sp,sp,-40
   1b8ec:	dfc00915 	stw	ra,36(sp)
   1b8f0:	df000815 	stw	fp,32(sp)
   1b8f4:	df000804 	addi	fp,sp,32
   1b8f8:	e13ffd15 	stw	r4,-12(fp)
   1b8fc:	e17ffe15 	stw	r5,-8(fp)
   1b900:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
   1b904:	00bfffc4 	movi	r2,-1
   1b908:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
   1b90c:	00bffb44 	movi	r2,-19
   1b910:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
   1b914:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
   1b918:	e13ffd17 	ldw	r4,-12(fp)
   1b91c:	014000b4 	movhi	r5,2
   1b920:	297b3004 	addi	r5,r5,-4928
   1b924:	001b4240 	call	1b424 <alt_find_dev>
   1b928:	e0bff815 	stw	r2,-32(fp)
   1b92c:	e0bff817 	ldw	r2,-32(fp)
   1b930:	1000051e 	bne	r2,zero,1b948 <open+0x60>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
   1b934:	e13ffd17 	ldw	r4,-12(fp)
   1b938:	001bf300 	call	1bf30 <alt_find_file>
   1b93c:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
   1b940:	00800044 	movi	r2,1
   1b944:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
   1b948:	e0bff817 	ldw	r2,-32(fp)
   1b94c:	10002926 	beq	r2,zero,1b9f4 <open+0x10c>
  {
    if ((index = alt_get_fd (dev)) < 0)
   1b950:	e13ff817 	ldw	r4,-32(fp)
   1b954:	001c0440 	call	1c044 <alt_get_fd>
   1b958:	e0bff915 	stw	r2,-28(fp)
   1b95c:	e0bff917 	ldw	r2,-28(fp)
   1b960:	1000030e 	bge	r2,zero,1b970 <open+0x88>
    {
      status = index;
   1b964:	e0bff917 	ldw	r2,-28(fp)
   1b968:	e0bffa15 	stw	r2,-24(fp)
   1b96c:	00002306 	br	1b9fc <open+0x114>
    }
    else
    {
      fd = &alt_fd_list[index];
   1b970:	e0bff917 	ldw	r2,-28(fp)
   1b974:	10c00324 	muli	r3,r2,12
   1b978:	008000b4 	movhi	r2,2
   1b97c:	10b5bf04 	addi	r2,r2,-10500
   1b980:	1885883a 	add	r2,r3,r2
   1b984:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
   1b988:	e0fffe17 	ldw	r3,-8(fp)
   1b98c:	00900034 	movhi	r2,16384
   1b990:	10bfffc4 	addi	r2,r2,-1
   1b994:	1886703a 	and	r3,r3,r2
   1b998:	e0bffc17 	ldw	r2,-16(fp)
   1b99c:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
   1b9a0:	e0bffb17 	ldw	r2,-20(fp)
   1b9a4:	1000051e 	bne	r2,zero,1b9bc <open+0xd4>
   1b9a8:	e13ffc17 	ldw	r4,-16(fp)
   1b9ac:	001b81c0 	call	1b81c <alt_file_locked>
   1b9b0:	e0bffa15 	stw	r2,-24(fp)
   1b9b4:	e0bffa17 	ldw	r2,-24(fp)
   1b9b8:	10001016 	blt	r2,zero,1b9fc <open+0x114>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
   1b9bc:	e0bff817 	ldw	r2,-32(fp)
   1b9c0:	10800317 	ldw	r2,12(r2)
   1b9c4:	10000826 	beq	r2,zero,1b9e8 <open+0x100>
   1b9c8:	e0bff817 	ldw	r2,-32(fp)
   1b9cc:	10800317 	ldw	r2,12(r2)
   1b9d0:	e13ffc17 	ldw	r4,-16(fp)
   1b9d4:	e17ffd17 	ldw	r5,-12(fp)
   1b9d8:	e1bffe17 	ldw	r6,-8(fp)
   1b9dc:	e1ffff17 	ldw	r7,-4(fp)
   1b9e0:	103ee83a 	callr	r2
   1b9e4:	00000106 	br	1b9ec <open+0x104>
   1b9e8:	0005883a 	mov	r2,zero
   1b9ec:	e0bffa15 	stw	r2,-24(fp)
   1b9f0:	00000206 	br	1b9fc <open+0x114>
      }
    }
  }
  else
  {
    status = -ENODEV;
   1b9f4:	00bffb44 	movi	r2,-19
   1b9f8:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
   1b9fc:	e0bffa17 	ldw	r2,-24(fp)
   1ba00:	1000090e 	bge	r2,zero,1ba28 <open+0x140>
  {
    alt_release_fd (index);  
   1ba04:	e13ff917 	ldw	r4,-28(fp)
   1ba08:	000fb780 	call	fb78 <alt_release_fd>
    ALT_ERRNO = -status;
   1ba0c:	001b7cc0 	call	1b7cc <alt_get_errno>
   1ba10:	1007883a 	mov	r3,r2
   1ba14:	e0bffa17 	ldw	r2,-24(fp)
   1ba18:	0085c83a 	sub	r2,zero,r2
   1ba1c:	18800015 	stw	r2,0(r3)
    return -1;
   1ba20:	00bfffc4 	movi	r2,-1
   1ba24:	00000106 	br	1ba2c <open+0x144>
  }
  
  /* return the reference upon success */

  return index;
   1ba28:	e0bff917 	ldw	r2,-28(fp)
}
   1ba2c:	e037883a 	mov	sp,fp
   1ba30:	dfc00117 	ldw	ra,4(sp)
   1ba34:	df000017 	ldw	fp,0(sp)
   1ba38:	dec00204 	addi	sp,sp,8
   1ba3c:	f800283a 	ret

0001ba40 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
   1ba40:	defffa04 	addi	sp,sp,-24
   1ba44:	df000515 	stw	fp,20(sp)
   1ba48:	df000504 	addi	fp,sp,20
   1ba4c:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1ba50:	0005303a 	rdctl	r2,status
   1ba54:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1ba58:	e0fffc17 	ldw	r3,-16(fp)
   1ba5c:	00bfff84 	movi	r2,-2
   1ba60:	1884703a 	and	r2,r3,r2
   1ba64:	1001703a 	wrctl	status,r2
  
  return context;
   1ba68:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
   1ba6c:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
   1ba70:	e0bfff17 	ldw	r2,-4(fp)
   1ba74:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
   1ba78:	e0bffd17 	ldw	r2,-12(fp)
   1ba7c:	10800017 	ldw	r2,0(r2)
   1ba80:	e0fffd17 	ldw	r3,-12(fp)
   1ba84:	18c00117 	ldw	r3,4(r3)
   1ba88:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
   1ba8c:	e0bffd17 	ldw	r2,-12(fp)
   1ba90:	10800117 	ldw	r2,4(r2)
   1ba94:	e0fffd17 	ldw	r3,-12(fp)
   1ba98:	18c00017 	ldw	r3,0(r3)
   1ba9c:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
   1baa0:	e0bffd17 	ldw	r2,-12(fp)
   1baa4:	e0fffd17 	ldw	r3,-12(fp)
   1baa8:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
   1baac:	e0bffd17 	ldw	r2,-12(fp)
   1bab0:	e0fffd17 	ldw	r3,-12(fp)
   1bab4:	10c00015 	stw	r3,0(r2)
   1bab8:	e0bffb17 	ldw	r2,-20(fp)
   1babc:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1bac0:	e0bffe17 	ldw	r2,-8(fp)
   1bac4:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
   1bac8:	e037883a 	mov	sp,fp
   1bacc:	df000017 	ldw	fp,0(sp)
   1bad0:	dec00104 	addi	sp,sp,4
   1bad4:	f800283a 	ret

0001bad8 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
   1bad8:	defffb04 	addi	sp,sp,-20
   1badc:	dfc00415 	stw	ra,16(sp)
   1bae0:	df000315 	stw	fp,12(sp)
   1bae4:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
   1bae8:	d0a03a17 	ldw	r2,-32536(gp)
   1baec:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
   1baf0:	d0a85117 	ldw	r2,-24252(gp)
   1baf4:	10800044 	addi	r2,r2,1
   1baf8:	d0a85115 	stw	r2,-24252(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   1bafc:	00002e06 	br	1bbb8 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
   1bb00:	e0bffd17 	ldw	r2,-12(fp)
   1bb04:	10800017 	ldw	r2,0(r2)
   1bb08:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
   1bb0c:	e0bffd17 	ldw	r2,-12(fp)
   1bb10:	10800403 	ldbu	r2,16(r2)
   1bb14:	10803fcc 	andi	r2,r2,255
   1bb18:	10000426 	beq	r2,zero,1bb2c <alt_tick+0x54>
   1bb1c:	d0a85117 	ldw	r2,-24252(gp)
   1bb20:	1000021e 	bne	r2,zero,1bb2c <alt_tick+0x54>
    {
      alarm->rollover = 0;
   1bb24:	e0bffd17 	ldw	r2,-12(fp)
   1bb28:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
   1bb2c:	e0bffd17 	ldw	r2,-12(fp)
   1bb30:	10800217 	ldw	r2,8(r2)
   1bb34:	d0e85117 	ldw	r3,-24252(gp)
   1bb38:	18801d36 	bltu	r3,r2,1bbb0 <alt_tick+0xd8>
   1bb3c:	e0bffd17 	ldw	r2,-12(fp)
   1bb40:	10800403 	ldbu	r2,16(r2)
   1bb44:	10803fcc 	andi	r2,r2,255
   1bb48:	1000191e 	bne	r2,zero,1bbb0 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
   1bb4c:	e0bffd17 	ldw	r2,-12(fp)
   1bb50:	10800317 	ldw	r2,12(r2)
   1bb54:	e0fffd17 	ldw	r3,-12(fp)
   1bb58:	18c00517 	ldw	r3,20(r3)
   1bb5c:	1809883a 	mov	r4,r3
   1bb60:	103ee83a 	callr	r2
   1bb64:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
   1bb68:	e0bfff17 	ldw	r2,-4(fp)
   1bb6c:	1000031e 	bne	r2,zero,1bb7c <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
   1bb70:	e13ffd17 	ldw	r4,-12(fp)
   1bb74:	001ba400 	call	1ba40 <alt_alarm_stop>
   1bb78:	00000d06 	br	1bbb0 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
   1bb7c:	e0bffd17 	ldw	r2,-12(fp)
   1bb80:	10c00217 	ldw	r3,8(r2)
   1bb84:	e0bfff17 	ldw	r2,-4(fp)
   1bb88:	1887883a 	add	r3,r3,r2
   1bb8c:	e0bffd17 	ldw	r2,-12(fp)
   1bb90:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
   1bb94:	e0bffd17 	ldw	r2,-12(fp)
   1bb98:	10c00217 	ldw	r3,8(r2)
   1bb9c:	d0a85117 	ldw	r2,-24252(gp)
   1bba0:	1880032e 	bgeu	r3,r2,1bbb0 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
   1bba4:	e0bffd17 	ldw	r2,-12(fp)
   1bba8:	00c00044 	movi	r3,1
   1bbac:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
   1bbb0:	e0bffe17 	ldw	r2,-8(fp)
   1bbb4:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   1bbb8:	e0fffd17 	ldw	r3,-12(fp)
   1bbbc:	d0a03a04 	addi	r2,gp,-32536
   1bbc0:	18bfcf1e 	bne	r3,r2,1bb00 <__alt_mem_Flash_flash_data+0xf401bb00>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
   1bbc4:	0010d840 	call	10d84 <OSTimeTick>
}
   1bbc8:	e037883a 	mov	sp,fp
   1bbcc:	dfc00117 	ldw	ra,4(sp)
   1bbd0:	df000017 	ldw	fp,0(sp)
   1bbd4:	dec00204 	addi	sp,sp,8
   1bbd8:	f800283a 	ret

0001bbdc <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
   1bbdc:	deffff04 	addi	sp,sp,-4
   1bbe0:	df000015 	stw	fp,0(sp)
   1bbe4:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
   1bbe8:	000170fa 	wrctl	ienable,zero
}
   1bbec:	e037883a 	mov	sp,fp
   1bbf0:	df000017 	ldw	fp,0(sp)
   1bbf4:	dec00104 	addi	sp,sp,4
   1bbf8:	f800283a 	ret

0001bbfc <OSCtxSw>:

      /* 
       * Save the remaining registers to the stack. 
       */

      addi sp, sp, -44
   1bbfc:	defff504 	addi	sp,sp,-44
      bltu  sp, et, .Lstack_overflow

#endif

#if OS_THREAD_SAFE_NEWLIB
      ldw r3, %gprel(_impure_ptr)(gp)   /* load the pointer */
   1bc00:	d0e00e17 	ldw	r3,-32712(gp)
#endif /* OS_THREAD_SAFE_NEWLIB */

      ldw r4, %gprel(OSTCBCur)(gp)
   1bc04:	d1284a17 	ldw	r4,-24280(gp)

      stw ra,  0(sp)
   1bc08:	dfc00015 	stw	ra,0(sp)
      stw fp,  4(sp)
   1bc0c:	df000115 	stw	fp,4(sp)
      stw r23, 8(sp)
   1bc10:	ddc00215 	stw	r23,8(sp)
      stw r22, 12(sp)
   1bc14:	dd800315 	stw	r22,12(sp)
      stw r21, 16(sp)
   1bc18:	dd400415 	stw	r21,16(sp)
      stw r20, 20(sp)
   1bc1c:	dd000515 	stw	r20,20(sp)
      stw r19, 24(sp)
   1bc20:	dcc00615 	stw	r19,24(sp)
      stw r18, 28(sp)
   1bc24:	dc800715 	stw	r18,28(sp)
      stw r17, 32(sp)
   1bc28:	dc400815 	stw	r17,32(sp)
      stw r16, 36(sp)
   1bc2c:	dc000915 	stw	r16,36(sp)
       * store the current value of _impure_ptr so it can be restored
       * later; _impure_ptr is asigned on a per task basis. It is used
       * by Newlib to achieve reentrancy.	
       */

      stw r3, 40(sp)                  /* save the impure pointer */
   1bc30:	d8c00a15 	stw	r3,40(sp)
      /* 
       * Save the current tasks stack pointer into the current tasks OS_TCB.
       * i.e. OSTCBCur->OSTCBStkPtr = sp;
       */

      stw sp, (r4)                  /* save the stack pointer (OSTCBStkPtr */
   1bc34:	26c00015 	stw	sp,0(r4)

      /*
       * Call the user definable OSTaskSWHook()
       */

      call OSTaskSwHook
   1bc38:	001be680 	call	1be68 <OSTaskSwHook>
      /*
       * OSTCBCur = OSTCBHighRdy; 
       * OSPrioCur = OSPrioHighRdy; 
       */

      ldw r4, %gprel(OSTCBHighRdy)(gp)
   1bc3c:	d1284517 	ldw	r4,-24300(gp)
      ldb r5, %gprel(OSPrioHighRdy)(gp)
   1bc40:	d1683d07 	ldb	r5,-24332(gp)

      stw r4, %gprel(OSTCBCur)(gp)     /* set the current task to be the new task */
   1bc44:	d1284a15 	stw	r4,-24280(gp)
      stb r5, %gprel(OSPrioCur)(gp)    /* store the new task's priority as the current */
   1bc48:	d1683d45 	stb	r5,-24331(gp)

      /*
       * Set the stack pointer to point to the new task's stack
       */

      ldw sp, (r4) /* the stack pointer is the first entry in the OS_TCB structure */
   1bc4c:	26c00017 	ldw	sp,0(r4)
      /*
       * restore the value of _impure_ptr ; _impure_ptr is asigned on a 
       * per task basis. It is used by Newlib to achieve reentrancy.	
       */

      ldw r3, 40(sp)                  /* load the new impure pointer */
   1bc50:	d8c00a17 	ldw	r3,40(sp)

      /*
       * Restore the saved registers for the new task.
       */

      ldw ra,  0(sp)
   1bc54:	dfc00017 	ldw	ra,0(sp)
      ldw fp,  4(sp)
   1bc58:	df000117 	ldw	fp,4(sp)
      ldw r23, 8(sp)
   1bc5c:	ddc00217 	ldw	r23,8(sp)
      ldw r22, 12(sp)
   1bc60:	dd800317 	ldw	r22,12(sp)
      ldw r21, 16(sp)
   1bc64:	dd400417 	ldw	r21,16(sp)
      ldw r20, 20(sp)
   1bc68:	dd000517 	ldw	r20,20(sp)
      ldw r19, 24(sp)
   1bc6c:	dcc00617 	ldw	r19,24(sp)
      ldw r18, 28(sp)
   1bc70:	dc800717 	ldw	r18,28(sp)
      ldw r17, 32(sp)
   1bc74:	dc400817 	ldw	r17,32(sp)
      ldw r16, 36(sp)
   1bc78:	dc000917 	ldw	r16,36(sp)

#if OS_THREAD_SAFE_NEWLIB

      stw r3, %gprel(_impure_ptr)(gp) /* update _impure_ptr */
   1bc7c:	d0e00e15 	stw	r3,-32712(gp)

      stw et, %gprel(alt_stack_limit_value)(gp)

#endif

      addi sp, sp, 44
   1bc80:	dec00b04 	addi	sp,sp,44

      /*
       * resume execution of the new task.
       */

      ret
   1bc84:	f800283a 	ret

0001bc88 <OSStartHighRdy>:

      /*
       * disable interrupts so that the scheduler doesn't run while
       * we're initialising this task.
       */  
      rdctl r18, status
   1bc88:	0025303a 	rdctl	r18,status
      subi  r17, zero, 2   /* r17 = 0xfffffffe */
   1bc8c:	047fff84 	movi	r17,-2
      and   r18, r18, r17
   1bc90:	9464703a 	and	r18,r18,r17
      wrctl status, r18
   1bc94:	9001703a 	wrctl	status,r18

      /*
       * Call the user definable OSTaskSWHook()
       */

      call OSTaskSwHook
   1bc98:	001be680 	call	1be68 <OSTaskSwHook>

      /* 
       * set OSRunning = TRUE.
       */

      movi r18, 1                    /* set r18 to the value 'TRUE' */
   1bc9c:	04800044 	movi	r18,1
      stb r18, %gprel(OSRunning)(gp) /* save this to OSRunning */
   1bca0:	d4a83b45 	stb	r18,-24339(gp)

      /*
       * start execution of the new task.
       */

      br 9b
   1bca4:	003fe506 	br	1bc3c <__alt_mem_Flash_flash_data+0xf401bc3c>

0001bca8 <OSStartTsk>:

OSStartTsk:
      /* This instruction is never executed.  Its here to make the
       * backtrace work right 
       */
      movi sp, 0
   1bca8:	06c00004 	movi	sp,0

      /* Enable interrupts */
      rdctl r2, status
   1bcac:	0005303a 	rdctl	r2,status
      ori   r2, r2, 0x1
   1bcb0:	10800054 	ori	r2,r2,1
      wrctl status, r2
   1bcb4:	1001703a 	wrctl	status,r2

      ldw r2, 4(sp)
   1bcb8:	d8800117 	ldw	r2,4(sp)
      ldw r4, 0(sp)
   1bcbc:	d9000017 	ldw	r4,0(sp)

      addi sp, sp, 8
   1bcc0:	dec00204 	addi	sp,sp,8

      callr r2
   1bcc4:	103ee83a 	callr	r2

      nop
   1bcc8:	0001883a 	nop

0001bccc <OSTaskStkInit>:
 *              been placed on the stack in the proper order.
 *
 ***********************************************************************************************/

OS_STK *OSTaskStkInit(void (*task)(void *pd), void *pdata, OS_STK *pstk, INT16U opt)
{
   1bccc:	defff704 	addi	sp,sp,-36
   1bcd0:	dfc00815 	stw	ra,32(sp)
   1bcd4:	df000715 	stw	fp,28(sp)
   1bcd8:	df000704 	addi	fp,sp,28
   1bcdc:	e13ffc15 	stw	r4,-16(fp)
   1bce0:	e17ffd15 	stw	r5,-12(fp)
   1bce4:	e1bffe15 	stw	r6,-8(fp)
   1bce8:	3805883a 	mov	r2,r7
   1bcec:	e0bfff0d 	sth	r2,-4(fp)
    * create and initialise the impure pointer used for Newlib thread local storage.
    * This is only done if the C library is being used in a thread safe mode. Otherwise
    * a single reent structure is used for all threads, which saves memory.
    */

   local_impure_ptr = (struct _reent*)((((INT32U)(pstk)) & ~0x3) - sizeof(struct _reent));
   1bcf0:	e0fffe17 	ldw	r3,-8(fp)
   1bcf4:	00bfff04 	movi	r2,-4
   1bcf8:	1884703a 	and	r2,r3,r2
   1bcfc:	10bef704 	addi	r2,r2,-1060
   1bd00:	e0bff915 	stw	r2,-28(fp)

   _REENT_INIT_PTR (local_impure_ptr);
   1bd04:	e13ff917 	ldw	r4,-28(fp)
   1bd08:	000b883a 	mov	r5,zero
   1bd0c:	01810904 	movi	r6,1060
   1bd10:	0008b040 	call	8b04 <memset>
   1bd14:	e0bff917 	ldw	r2,-28(fp)
   1bd18:	10c0bb04 	addi	r3,r2,748
   1bd1c:	e0bff917 	ldw	r2,-28(fp)
   1bd20:	10c00115 	stw	r3,4(r2)
   1bd24:	e0bff917 	ldw	r2,-28(fp)
   1bd28:	10c0d504 	addi	r3,r2,852
   1bd2c:	e0bff917 	ldw	r2,-28(fp)
   1bd30:	10c00215 	stw	r3,8(r2)
   1bd34:	e0bff917 	ldw	r2,-28(fp)
   1bd38:	10c0ef04 	addi	r3,r2,956
   1bd3c:	e0bff917 	ldw	r2,-28(fp)
   1bd40:	10c00315 	stw	r3,12(r2)
   1bd44:	e0fff917 	ldw	r3,-28(fp)
   1bd48:	008000b4 	movhi	r2,2
   1bd4c:	10b38104 	addi	r2,r2,-12796
   1bd50:	18800d15 	stw	r2,52(r3)
   1bd54:	e0bff917 	ldw	r2,-28(fp)
   1bd58:	00c00044 	movi	r3,1
   1bd5c:	10c02915 	stw	r3,164(r2)
   1bd60:	10002a15 	stw	zero,168(r2)
   1bd64:	e0bff917 	ldw	r2,-28(fp)
   1bd68:	00ccc384 	movi	r3,13070
   1bd6c:	10c02b0d 	sth	r3,172(r2)
   1bd70:	e0bff917 	ldw	r2,-28(fp)
   1bd74:	00eaf344 	movi	r3,-21555
   1bd78:	10c02b8d 	sth	r3,174(r2)
   1bd7c:	e0bff917 	ldw	r2,-28(fp)
   1bd80:	00c48d04 	movi	r3,4660
   1bd84:	10c02c0d 	sth	r3,176(r2)
   1bd88:	e0bff917 	ldw	r2,-28(fp)
   1bd8c:	00f99b44 	movi	r3,-6547
   1bd90:	10c02c8d 	sth	r3,178(r2)
   1bd94:	e0bff917 	ldw	r2,-28(fp)
   1bd98:	00f7bb04 	movi	r3,-8468
   1bd9c:	10c02d0d 	sth	r3,180(r2)
   1bda0:	e0bff917 	ldw	r2,-28(fp)
   1bda4:	00c00144 	movi	r3,5
   1bda8:	10c02d8d 	sth	r3,182(r2)
   1bdac:	e0bff917 	ldw	r2,-28(fp)
   1bdb0:	00c002c4 	movi	r3,11
   1bdb4:	10c02e0d 	sth	r3,184(r2)
   /* 
    * create a stack frame at the top of the stack (leaving space for the 
    * reentrant data structure).
    */

   frame_pointer = (INT32U*) local_impure_ptr;
   1bdb8:	e0bff917 	ldw	r2,-28(fp)
   1bdbc:	e0bffa15 	stw	r2,-24(fp)
#else
   frame_pointer =   (INT32U*) (((INT32U)(pstk)) & ~0x3);
#endif /* OS_THREAD_SAFE_NEWLIB */
   stk = frame_pointer - 13;
   1bdc0:	e0bffa17 	ldw	r2,-24(fp)
   1bdc4:	10bff304 	addi	r2,r2,-52
   1bdc8:	e0bffb15 	stw	r2,-20(fp)

   /* Now fill the stack frame. */

   stk[12] = (INT32U)task;            /* task address (ra) */
   1bdcc:	e0bffb17 	ldw	r2,-20(fp)
   1bdd0:	10800c04 	addi	r2,r2,48
   1bdd4:	e0fffc17 	ldw	r3,-16(fp)
   1bdd8:	10c00015 	stw	r3,0(r2)
   stk[11] = (INT32U) pdata;          /* first register argument (r4) */
   1bddc:	e0bffb17 	ldw	r2,-20(fp)
   1bde0:	10800b04 	addi	r2,r2,44
   1bde4:	e0fffd17 	ldw	r3,-12(fp)
   1bde8:	10c00015 	stw	r3,0(r2)

#if OS_THREAD_SAFE_NEWLIB
   stk[10] = (INT32U) local_impure_ptr; /* value of _impure_ptr for this thread */
   1bdec:	e0bffb17 	ldw	r2,-20(fp)
   1bdf0:	10800a04 	addi	r2,r2,40
   1bdf4:	e0fff917 	ldw	r3,-28(fp)
   1bdf8:	10c00015 	stw	r3,0(r2)
#endif /* OS_THREAD_SAFE_NEWLIB */
   stk[0]  = ((INT32U)&OSStartTsk) + 4;/* exception return address (ea) */  
   1bdfc:	008000b4 	movhi	r2,2
   1be00:	10af2a04 	addi	r2,r2,-17240
   1be04:	10c00104 	addi	r3,r2,4
   1be08:	e0bffb17 	ldw	r2,-20(fp)
   1be0c:	10c00015 	stw	r3,0(r2)
    */
   __asm__ (".set OSTCBNext_OFFSET,%0" :: "i" (offsetof(OS_TCB, OSTCBNext)));
   __asm__ (".set OSTCBPrio_OFFSET,%0" :: "i" (offsetof(OS_TCB, OSTCBPrio)));
   __asm__ (".set OSTCBStkPtr_OFFSET,%0" :: "i" (offsetof(OS_TCB, OSTCBStkPtr)));
  
   return((OS_STK *)stk);
   1be10:	e0bffb17 	ldw	r2,-20(fp)
}
   1be14:	e037883a 	mov	sp,fp
   1be18:	dfc00117 	ldw	ra,4(sp)
   1be1c:	df000017 	ldw	fp,0(sp)
   1be20:	dec00204 	addi	sp,sp,8
   1be24:	f800283a 	ret

0001be28 <OSTaskCreateHook>:
*
* Note(s)    : 1) Interrupts are disabled during this call.
*********************************************************************************************************
*/
void OSTaskCreateHook (OS_TCB *ptcb)
{
   1be28:	defffe04 	addi	sp,sp,-8
   1be2c:	df000115 	stw	fp,4(sp)
   1be30:	df000104 	addi	fp,sp,4
   1be34:	e13fff15 	stw	r4,-4(fp)
    ptcb = ptcb;                       /* Prevent compiler warning */
}
   1be38:	e037883a 	mov	sp,fp
   1be3c:	df000017 	ldw	fp,0(sp)
   1be40:	dec00104 	addi	sp,sp,4
   1be44:	f800283a 	ret

0001be48 <OSTaskDelHook>:
*
* Note(s)    : 1) Interrupts are disabled during this call.
*********************************************************************************************************
*/
void OSTaskDelHook (OS_TCB *ptcb)
{
   1be48:	defffe04 	addi	sp,sp,-8
   1be4c:	df000115 	stw	fp,4(sp)
   1be50:	df000104 	addi	fp,sp,4
   1be54:	e13fff15 	stw	r4,-4(fp)
    ptcb = ptcb;                       /* Prevent compiler warning                                     */
}
   1be58:	e037883a 	mov	sp,fp
   1be5c:	df000017 	ldw	fp,0(sp)
   1be60:	dec00104 	addi	sp,sp,4
   1be64:	f800283a 	ret

0001be68 <OSTaskSwHook>:
*                 will be 'switched in' (i.e. the highest priority task) and, 'OSTCBCur' points to the
*                 task being switched out (i.e. the preempted task).
*********************************************************************************************************
*/
void OSTaskSwHook (void)
{
   1be68:	deffff04 	addi	sp,sp,-4
   1be6c:	df000015 	stw	fp,0(sp)
   1be70:	d839883a 	mov	fp,sp
}
   1be74:	e037883a 	mov	sp,fp
   1be78:	df000017 	ldw	fp,0(sp)
   1be7c:	dec00104 	addi	sp,sp,4
   1be80:	f800283a 	ret

0001be84 <OSTaskStatHook>:
*
* Arguments  : none
*********************************************************************************************************
*/
void OSTaskStatHook (void)
{
   1be84:	deffff04 	addi	sp,sp,-4
   1be88:	df000015 	stw	fp,0(sp)
   1be8c:	d839883a 	mov	fp,sp
}
   1be90:	e037883a 	mov	sp,fp
   1be94:	df000017 	ldw	fp,0(sp)
   1be98:	dec00104 	addi	sp,sp,4
   1be9c:	f800283a 	ret

0001bea0 <OSTimeTickHook>:
#ifdef ALT_INICHE
void cticks_hook(void);
#endif

void OSTimeTickHook (void)
{
   1bea0:	deffff04 	addi	sp,sp,-4
   1bea4:	df000015 	stw	fp,0(sp)
   1bea8:	d839883a 	mov	fp,sp
    
#ifdef ALT_INICHE
    /* Service the Interniche timer */
    cticks_hook();
#endif
}
   1beac:	e037883a 	mov	sp,fp
   1beb0:	df000017 	ldw	fp,0(sp)
   1beb4:	dec00104 	addi	sp,sp,4
   1beb8:	f800283a 	ret

0001bebc <OSInitHookBegin>:

void OSInitHookBegin(void)
{
   1bebc:	deffff04 	addi	sp,sp,-4
   1bec0:	df000015 	stw	fp,0(sp)
   1bec4:	d839883a 	mov	fp,sp
#if OS_TMR_EN > 0
    OSTmrCtr = 0;
#endif
}
   1bec8:	e037883a 	mov	sp,fp
   1becc:	df000017 	ldw	fp,0(sp)
   1bed0:	dec00104 	addi	sp,sp,4
   1bed4:	f800283a 	ret

0001bed8 <OSInitHookEnd>:

void OSInitHookEnd(void)
{
   1bed8:	deffff04 	addi	sp,sp,-4
   1bedc:	df000015 	stw	fp,0(sp)
   1bee0:	d839883a 	mov	fp,sp
}
   1bee4:	e037883a 	mov	sp,fp
   1bee8:	df000017 	ldw	fp,0(sp)
   1beec:	dec00104 	addi	sp,sp,4
   1bef0:	f800283a 	ret

0001bef4 <OSTaskIdleHook>:

void OSTaskIdleHook(void)
{
   1bef4:	deffff04 	addi	sp,sp,-4
   1bef8:	df000015 	stw	fp,0(sp)
   1befc:	d839883a 	mov	fp,sp
}
   1bf00:	e037883a 	mov	sp,fp
   1bf04:	df000017 	ldw	fp,0(sp)
   1bf08:	dec00104 	addi	sp,sp,4
   1bf0c:	f800283a 	ret

0001bf10 <OSTCBInitHook>:

void OSTCBInitHook(OS_TCB *ptcb)
{
   1bf10:	defffe04 	addi	sp,sp,-8
   1bf14:	df000115 	stw	fp,4(sp)
   1bf18:	df000104 	addi	fp,sp,4
   1bf1c:	e13fff15 	stw	r4,-4(fp)
}
   1bf20:	e037883a 	mov	sp,fp
   1bf24:	df000017 	ldw	fp,0(sp)
   1bf28:	dec00104 	addi	sp,sp,4
   1bf2c:	f800283a 	ret

0001bf30 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
   1bf30:	defffb04 	addi	sp,sp,-20
   1bf34:	dfc00415 	stw	ra,16(sp)
   1bf38:	df000315 	stw	fp,12(sp)
   1bf3c:	df000304 	addi	fp,sp,12
   1bf40:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
   1bf44:	008000b4 	movhi	r2,2
   1bf48:	10bb2e04 	addi	r2,r2,-4936
   1bf4c:	10800017 	ldw	r2,0(r2)
   1bf50:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   1bf54:	00003106 	br	1c01c <alt_find_file+0xec>
  {
    len = strlen(next->name);
   1bf58:	e0bffd17 	ldw	r2,-12(fp)
   1bf5c:	10800217 	ldw	r2,8(r2)
   1bf60:	1009883a 	mov	r4,r2
   1bf64:	00031740 	call	3174 <strlen>
   1bf68:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
   1bf6c:	e0bffd17 	ldw	r2,-12(fp)
   1bf70:	10c00217 	ldw	r3,8(r2)
   1bf74:	e0bffe17 	ldw	r2,-8(fp)
   1bf78:	10bfffc4 	addi	r2,r2,-1
   1bf7c:	1885883a 	add	r2,r3,r2
   1bf80:	10800003 	ldbu	r2,0(r2)
   1bf84:	10803fcc 	andi	r2,r2,255
   1bf88:	1080201c 	xori	r2,r2,128
   1bf8c:	10bfe004 	addi	r2,r2,-128
   1bf90:	10800bd8 	cmpnei	r2,r2,47
   1bf94:	1000031e 	bne	r2,zero,1bfa4 <alt_find_file+0x74>
    {
      len -= 1;
   1bf98:	e0bffe17 	ldw	r2,-8(fp)
   1bf9c:	10bfffc4 	addi	r2,r2,-1
   1bfa0:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   1bfa4:	e0bffe17 	ldw	r2,-8(fp)
   1bfa8:	e0ffff17 	ldw	r3,-4(fp)
   1bfac:	1885883a 	add	r2,r3,r2
   1bfb0:	10800003 	ldbu	r2,0(r2)
   1bfb4:	10803fcc 	andi	r2,r2,255
   1bfb8:	1080201c 	xori	r2,r2,128
   1bfbc:	10bfe004 	addi	r2,r2,-128
   1bfc0:	10800be0 	cmpeqi	r2,r2,47
   1bfc4:	1000081e 	bne	r2,zero,1bfe8 <alt_find_file+0xb8>
   1bfc8:	e0bffe17 	ldw	r2,-8(fp)
   1bfcc:	e0ffff17 	ldw	r3,-4(fp)
   1bfd0:	1885883a 	add	r2,r3,r2
   1bfd4:	10800003 	ldbu	r2,0(r2)
   1bfd8:	10803fcc 	andi	r2,r2,255
   1bfdc:	1080201c 	xori	r2,r2,128
   1bfe0:	10bfe004 	addi	r2,r2,-128
   1bfe4:	10000a1e 	bne	r2,zero,1c010 <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
   1bfe8:	e0bffd17 	ldw	r2,-12(fp)
   1bfec:	10c00217 	ldw	r3,8(r2)
   1bff0:	e0bffe17 	ldw	r2,-8(fp)
   1bff4:	1809883a 	mov	r4,r3
   1bff8:	e17fff17 	ldw	r5,-4(fp)
   1bffc:	100d883a 	mov	r6,r2
   1c000:	001c2b40 	call	1c2b4 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   1c004:	1000021e 	bne	r2,zero,1c010 <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
   1c008:	e0bffd17 	ldw	r2,-12(fp)
   1c00c:	00000806 	br	1c030 <alt_find_file+0x100>
    }
    next = (alt_dev*) next->llist.next;
   1c010:	e0bffd17 	ldw	r2,-12(fp)
   1c014:	10800017 	ldw	r2,0(r2)
   1c018:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   1c01c:	e0fffd17 	ldw	r3,-12(fp)
   1c020:	008000b4 	movhi	r2,2
   1c024:	10bb2e04 	addi	r2,r2,-4936
   1c028:	18bfcb1e 	bne	r3,r2,1bf58 <__alt_mem_Flash_flash_data+0xf401bf58>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
   1c02c:	0005883a 	mov	r2,zero
}
   1c030:	e037883a 	mov	sp,fp
   1c034:	dfc00117 	ldw	ra,4(sp)
   1c038:	df000017 	ldw	fp,0(sp)
   1c03c:	dec00204 	addi	sp,sp,8
   1c040:	f800283a 	ret

0001c044 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
   1c044:	defff904 	addi	sp,sp,-28
   1c048:	dfc00615 	stw	ra,24(sp)
   1c04c:	df000515 	stw	fp,20(sp)
   1c050:	df000504 	addi	fp,sp,20
   1c054:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
   1c058:	00bffa04 	movi	r2,-24
   1c05c:	e0bffc15 	stw	r2,-16(fp)
  /* 
   * Take the alt_fd_list_lock semaphore in order to avoid races when 
   * accessing the file descriptor pool.
   */
  
  ALT_SEM_PEND(alt_fd_list_lock, 0);
   1c060:	008000b4 	movhi	r2,2
   1c064:	10834e04 	addi	r2,r2,3384
   1c068:	10800017 	ldw	r2,0(r2)
   1c06c:	e0bffd15 	stw	r2,-12(fp)
   1c070:	e03ffe0d 	sth	zero,-8(fp)
   1c074:	e0fffe0b 	ldhu	r3,-8(fp)
   1c078:	e0bffe84 	addi	r2,fp,-6
   1c07c:	e13ffd17 	ldw	r4,-12(fp)
   1c080:	180b883a 	mov	r5,r3
   1c084:	100d883a 	mov	r6,r2
   1c088:	00163a80 	call	163a8 <OSSemPend>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   1c08c:	e03ffb15 	stw	zero,-20(fp)
   1c090:	00001d06 	br	1c108 <alt_get_fd+0xc4>
  {
    if (!alt_fd_list[i].dev)
   1c094:	008000b4 	movhi	r2,2
   1c098:	10b5bf04 	addi	r2,r2,-10500
   1c09c:	e0fffb17 	ldw	r3,-20(fp)
   1c0a0:	18c00324 	muli	r3,r3,12
   1c0a4:	10c5883a 	add	r2,r2,r3
   1c0a8:	10800017 	ldw	r2,0(r2)
   1c0ac:	1000131e 	bne	r2,zero,1c0fc <alt_get_fd+0xb8>
    {
      alt_fd_list[i].dev = dev;
   1c0b0:	008000b4 	movhi	r2,2
   1c0b4:	10b5bf04 	addi	r2,r2,-10500
   1c0b8:	e0fffb17 	ldw	r3,-20(fp)
   1c0bc:	18c00324 	muli	r3,r3,12
   1c0c0:	10c5883a 	add	r2,r2,r3
   1c0c4:	e0ffff17 	ldw	r3,-4(fp)
   1c0c8:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
   1c0cc:	008000b4 	movhi	r2,2
   1c0d0:	10bb3204 	addi	r2,r2,-4920
   1c0d4:	10c00017 	ldw	r3,0(r2)
   1c0d8:	e0bffb17 	ldw	r2,-20(fp)
   1c0dc:	1880040e 	bge	r3,r2,1c0f0 <alt_get_fd+0xac>
      {
        alt_max_fd = i;
   1c0e0:	008000b4 	movhi	r2,2
   1c0e4:	10bb3204 	addi	r2,r2,-4920
   1c0e8:	e0fffb17 	ldw	r3,-20(fp)
   1c0ec:	10c00015 	stw	r3,0(r2)
      }
      rc = i;
   1c0f0:	e0bffb17 	ldw	r2,-20(fp)
   1c0f4:	e0bffc15 	stw	r2,-16(fp)
      goto alt_get_fd_exit;
   1c0f8:	00000606 	br	1c114 <alt_get_fd+0xd0>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   1c0fc:	e0bffb17 	ldw	r2,-20(fp)
   1c100:	10800044 	addi	r2,r2,1
   1c104:	e0bffb15 	stw	r2,-20(fp)
   1c108:	e0bffb17 	ldw	r2,-20(fp)
   1c10c:	10800810 	cmplti	r2,r2,32
   1c110:	103fe01e 	bne	r2,zero,1c094 <__alt_mem_Flash_flash_data+0xf401c094>
  /*
   * Release the alt_fd_list_lock semaphore now that we are done with the
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);
   1c114:	008000b4 	movhi	r2,2
   1c118:	10834e04 	addi	r2,r2,3384
   1c11c:	10800017 	ldw	r2,0(r2)
   1c120:	1009883a 	mov	r4,r2
   1c124:	001677c0 	call	1677c <OSSemPost>

  return rc;
   1c128:	e0bffc17 	ldw	r2,-16(fp)
}
   1c12c:	e037883a 	mov	sp,fp
   1c130:	dfc00117 	ldw	ra,4(sp)
   1c134:	df000017 	ldw	fp,0(sp)
   1c138:	dec00204 	addi	sp,sp,8
   1c13c:	f800283a 	ret

0001c140 <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
   1c140:	defffb04 	addi	sp,sp,-20
   1c144:	df000415 	stw	fp,16(sp)
   1c148:	df000404 	addi	fp,sp,16
   1c14c:	e13ffe15 	stw	r4,-8(fp)
   1c150:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
   1c154:	e0bfff17 	ldw	r2,-4(fp)
   1c158:	10840070 	cmpltui	r2,r2,4097
   1c15c:	1000021e 	bne	r2,zero,1c168 <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
   1c160:	00840004 	movi	r2,4096
   1c164:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
   1c168:	e0fffe17 	ldw	r3,-8(fp)
   1c16c:	e0bfff17 	ldw	r2,-4(fp)
   1c170:	1885883a 	add	r2,r3,r2
   1c174:	e0bffd15 	stw	r2,-12(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
   1c178:	e0bffe17 	ldw	r2,-8(fp)
   1c17c:	e0bffc15 	stw	r2,-16(fp)
   1c180:	00000506 	br	1c198 <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
   1c184:	e0bffc17 	ldw	r2,-16(fp)
   1c188:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
   1c18c:	e0bffc17 	ldw	r2,-16(fp)
   1c190:	10800804 	addi	r2,r2,32
   1c194:	e0bffc15 	stw	r2,-16(fp)
   1c198:	e0fffc17 	ldw	r3,-16(fp)
   1c19c:	e0bffd17 	ldw	r2,-12(fp)
   1c1a0:	18bff836 	bltu	r3,r2,1c184 <__alt_mem_Flash_flash_data+0xf401c184>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
   1c1a4:	e0bffe17 	ldw	r2,-8(fp)
   1c1a8:	108007cc 	andi	r2,r2,31
   1c1ac:	10000226 	beq	r2,zero,1c1b8 <alt_icache_flush+0x78>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
   1c1b0:	e0bffc17 	ldw	r2,-16(fp)
   1c1b4:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
   1c1b8:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
   1c1bc:	e037883a 	mov	sp,fp
   1c1c0:	df000017 	ldw	fp,0(sp)
   1c1c4:	dec00104 	addi	sp,sp,4
   1c1c8:	f800283a 	ret

0001c1cc <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
   1c1cc:	defffe04 	addi	sp,sp,-8
   1c1d0:	df000115 	stw	fp,4(sp)
   1c1d4:	df000104 	addi	fp,sp,4
   1c1d8:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
   1c1dc:	e0bfff17 	ldw	r2,-4(fp)
   1c1e0:	10bffe84 	addi	r2,r2,-6
   1c1e4:	10c00428 	cmpgeui	r3,r2,16
   1c1e8:	18001a1e 	bne	r3,zero,1c254 <alt_exception_cause_generated_bad_addr+0x88>
   1c1ec:	100690ba 	slli	r3,r2,2
   1c1f0:	008000b4 	movhi	r2,2
   1c1f4:	10b08104 	addi	r2,r2,-15868
   1c1f8:	1885883a 	add	r2,r3,r2
   1c1fc:	10800017 	ldw	r2,0(r2)
   1c200:	1000683a 	jmp	r2
   1c204:	0001c244 	movi	zero,1801
   1c208:	0001c244 	movi	zero,1801
   1c20c:	0001c254 	movui	zero,1801
   1c210:	0001c254 	movui	zero,1801
   1c214:	0001c254 	movui	zero,1801
   1c218:	0001c244 	movi	zero,1801
   1c21c:	0001c24c 	andi	zero,zero,1801
   1c220:	0001c254 	movui	zero,1801
   1c224:	0001c244 	movi	zero,1801
   1c228:	0001c244 	movi	zero,1801
   1c22c:	0001c254 	movui	zero,1801
   1c230:	0001c244 	movi	zero,1801
   1c234:	0001c24c 	andi	zero,zero,1801
   1c238:	0001c254 	movui	zero,1801
   1c23c:	0001c254 	movui	zero,1801
   1c240:	0001c244 	movi	zero,1801
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
   1c244:	00800044 	movi	r2,1
   1c248:	00000306 	br	1c258 <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
   1c24c:	0005883a 	mov	r2,zero
   1c250:	00000106 	br	1c258 <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
   1c254:	0005883a 	mov	r2,zero
  }
}
   1c258:	e037883a 	mov	sp,fp
   1c25c:	df000017 	ldw	fp,0(sp)
   1c260:	dec00104 	addi	sp,sp,4
   1c264:	f800283a 	ret

0001c268 <atexit>:
   1c268:	200b883a 	mov	r5,r4
   1c26c:	000d883a 	mov	r6,zero
   1c270:	0009883a 	mov	r4,zero
   1c274:	000f883a 	mov	r7,zero
   1c278:	001c3301 	jmpi	1c330 <__register_exitproc>

0001c27c <exit>:
   1c27c:	defffe04 	addi	sp,sp,-8
   1c280:	000b883a 	mov	r5,zero
   1c284:	dc000015 	stw	r16,0(sp)
   1c288:	dfc00115 	stw	ra,4(sp)
   1c28c:	2021883a 	mov	r16,r4
   1c290:	001c4440 	call	1c444 <__call_exitprocs>
   1c294:	008000b4 	movhi	r2,2
   1c298:	10bb2804 	addi	r2,r2,-4960
   1c29c:	11000017 	ldw	r4,0(r2)
   1c2a0:	20800f17 	ldw	r2,60(r4)
   1c2a4:	10000126 	beq	r2,zero,1c2ac <exit+0x30>
   1c2a8:	103ee83a 	callr	r2
   1c2ac:	8009883a 	mov	r4,r16
   1c2b0:	001c5d80 	call	1c5d8 <_exit>

0001c2b4 <memcmp>:
   1c2b4:	01c000c4 	movi	r7,3
   1c2b8:	3980192e 	bgeu	r7,r6,1c320 <memcmp+0x6c>
   1c2bc:	2144b03a 	or	r2,r4,r5
   1c2c0:	11c4703a 	and	r2,r2,r7
   1c2c4:	10000f26 	beq	r2,zero,1c304 <memcmp+0x50>
   1c2c8:	20800003 	ldbu	r2,0(r4)
   1c2cc:	28c00003 	ldbu	r3,0(r5)
   1c2d0:	10c0151e 	bne	r2,r3,1c328 <memcmp+0x74>
   1c2d4:	31bfff84 	addi	r6,r6,-2
   1c2d8:	01ffffc4 	movi	r7,-1
   1c2dc:	00000406 	br	1c2f0 <memcmp+0x3c>
   1c2e0:	20800003 	ldbu	r2,0(r4)
   1c2e4:	28c00003 	ldbu	r3,0(r5)
   1c2e8:	31bfffc4 	addi	r6,r6,-1
   1c2ec:	10c00e1e 	bne	r2,r3,1c328 <memcmp+0x74>
   1c2f0:	21000044 	addi	r4,r4,1
   1c2f4:	29400044 	addi	r5,r5,1
   1c2f8:	31fff91e 	bne	r6,r7,1c2e0 <__alt_mem_Flash_flash_data+0xf401c2e0>
   1c2fc:	0005883a 	mov	r2,zero
   1c300:	f800283a 	ret
   1c304:	20c00017 	ldw	r3,0(r4)
   1c308:	28800017 	ldw	r2,0(r5)
   1c30c:	1880041e 	bne	r3,r2,1c320 <memcmp+0x6c>
   1c310:	31bfff04 	addi	r6,r6,-4
   1c314:	21000104 	addi	r4,r4,4
   1c318:	29400104 	addi	r5,r5,4
   1c31c:	39bff936 	bltu	r7,r6,1c304 <__alt_mem_Flash_flash_data+0xf401c304>
   1c320:	303fe91e 	bne	r6,zero,1c2c8 <__alt_mem_Flash_flash_data+0xf401c2c8>
   1c324:	003ff506 	br	1c2fc <__alt_mem_Flash_flash_data+0xf401c2fc>
   1c328:	10c5c83a 	sub	r2,r2,r3
   1c32c:	f800283a 	ret

0001c330 <__register_exitproc>:
   1c330:	008000b4 	movhi	r2,2
   1c334:	defffa04 	addi	sp,sp,-24
   1c338:	10bb2804 	addi	r2,r2,-4960
   1c33c:	dc000315 	stw	r16,12(sp)
   1c340:	14000017 	ldw	r16,0(r2)
   1c344:	dc400415 	stw	r17,16(sp)
   1c348:	dfc00515 	stw	ra,20(sp)
   1c34c:	80805217 	ldw	r2,328(r16)
   1c350:	2023883a 	mov	r17,r4
   1c354:	10003626 	beq	r2,zero,1c430 <__register_exitproc+0x100>
   1c358:	10c00117 	ldw	r3,4(r2)
   1c35c:	010007c4 	movi	r4,31
   1c360:	20c00e16 	blt	r4,r3,1c39c <__register_exitproc+0x6c>
   1c364:	1a400044 	addi	r9,r3,1
   1c368:	8800211e 	bne	r17,zero,1c3f0 <__register_exitproc+0xc0>
   1c36c:	18c00084 	addi	r3,r3,2
   1c370:	18c7883a 	add	r3,r3,r3
   1c374:	18c7883a 	add	r3,r3,r3
   1c378:	12400115 	stw	r9,4(r2)
   1c37c:	10c7883a 	add	r3,r2,r3
   1c380:	19400015 	stw	r5,0(r3)
   1c384:	0005883a 	mov	r2,zero
   1c388:	dfc00517 	ldw	ra,20(sp)
   1c38c:	dc400417 	ldw	r17,16(sp)
   1c390:	dc000317 	ldw	r16,12(sp)
   1c394:	dec00604 	addi	sp,sp,24
   1c398:	f800283a 	ret
   1c39c:	00800034 	movhi	r2,0
   1c3a0:	10800004 	addi	r2,r2,0
   1c3a4:	10002526 	beq	r2,zero,1c43c <__register_exitproc+0x10c>
   1c3a8:	01006404 	movi	r4,400
   1c3ac:	d9400015 	stw	r5,0(sp)
   1c3b0:	d9800115 	stw	r6,4(sp)
   1c3b4:	d9c00215 	stw	r7,8(sp)
   1c3b8:	00000000 	call	0 <__alt_mem_SDRAM>
   1c3bc:	d9400017 	ldw	r5,0(sp)
   1c3c0:	d9800117 	ldw	r6,4(sp)
   1c3c4:	d9c00217 	ldw	r7,8(sp)
   1c3c8:	10001c26 	beq	r2,zero,1c43c <__register_exitproc+0x10c>
   1c3cc:	80c05217 	ldw	r3,328(r16)
   1c3d0:	10000115 	stw	zero,4(r2)
   1c3d4:	02400044 	movi	r9,1
   1c3d8:	10c00015 	stw	r3,0(r2)
   1c3dc:	80805215 	stw	r2,328(r16)
   1c3e0:	10006215 	stw	zero,392(r2)
   1c3e4:	10006315 	stw	zero,396(r2)
   1c3e8:	0007883a 	mov	r3,zero
   1c3ec:	883fdf26 	beq	r17,zero,1c36c <__alt_mem_Flash_flash_data+0xf401c36c>
   1c3f0:	18d1883a 	add	r8,r3,r3
   1c3f4:	4211883a 	add	r8,r8,r8
   1c3f8:	1211883a 	add	r8,r2,r8
   1c3fc:	41802215 	stw	r6,136(r8)
   1c400:	01000044 	movi	r4,1
   1c404:	11806217 	ldw	r6,392(r2)
   1c408:	20c8983a 	sll	r4,r4,r3
   1c40c:	310cb03a 	or	r6,r6,r4
   1c410:	11806215 	stw	r6,392(r2)
   1c414:	41c04215 	stw	r7,264(r8)
   1c418:	01800084 	movi	r6,2
   1c41c:	89bfd31e 	bne	r17,r6,1c36c <__alt_mem_Flash_flash_data+0xf401c36c>
   1c420:	11806317 	ldw	r6,396(r2)
   1c424:	3108b03a 	or	r4,r6,r4
   1c428:	11006315 	stw	r4,396(r2)
   1c42c:	003fcf06 	br	1c36c <__alt_mem_Flash_flash_data+0xf401c36c>
   1c430:	80805304 	addi	r2,r16,332
   1c434:	80805215 	stw	r2,328(r16)
   1c438:	003fc706 	br	1c358 <__alt_mem_Flash_flash_data+0xf401c358>
   1c43c:	00bfffc4 	movi	r2,-1
   1c440:	003fd106 	br	1c388 <__alt_mem_Flash_flash_data+0xf401c388>

0001c444 <__call_exitprocs>:
   1c444:	008000b4 	movhi	r2,2
   1c448:	10bb2804 	addi	r2,r2,-4960
   1c44c:	10800017 	ldw	r2,0(r2)
   1c450:	defff404 	addi	sp,sp,-48
   1c454:	dd800815 	stw	r22,32(sp)
   1c458:	d8800015 	stw	r2,0(sp)
   1c45c:	10805204 	addi	r2,r2,328
   1c460:	dd000615 	stw	r20,24(sp)
   1c464:	dc800415 	stw	r18,16(sp)
   1c468:	dfc00b15 	stw	ra,44(sp)
   1c46c:	df000a15 	stw	fp,40(sp)
   1c470:	ddc00915 	stw	r23,36(sp)
   1c474:	dd400715 	stw	r21,28(sp)
   1c478:	dcc00515 	stw	r19,20(sp)
   1c47c:	dc400315 	stw	r17,12(sp)
   1c480:	dc000215 	stw	r16,8(sp)
   1c484:	2025883a 	mov	r18,r4
   1c488:	2829883a 	mov	r20,r5
   1c48c:	d8800115 	stw	r2,4(sp)
   1c490:	05bfffc4 	movi	r22,-1
   1c494:	d8800017 	ldw	r2,0(sp)
   1c498:	14c05217 	ldw	r19,328(r2)
   1c49c:	98001d26 	beq	r19,zero,1c514 <__call_exitprocs+0xd0>
   1c4a0:	dd400117 	ldw	r21,4(sp)
   1c4a4:	98800117 	ldw	r2,4(r19)
   1c4a8:	173fffc4 	addi	fp,r2,-1
   1c4ac:	e0000d16 	blt	fp,zero,1c4e4 <__call_exitprocs+0xa0>
   1c4b0:	14000044 	addi	r16,r2,1
   1c4b4:	8421883a 	add	r16,r16,r16
   1c4b8:	8421883a 	add	r16,r16,r16
   1c4bc:	84402004 	addi	r17,r16,128
   1c4c0:	9c63883a 	add	r17,r19,r17
   1c4c4:	9c21883a 	add	r16,r19,r16
   1c4c8:	a0001e26 	beq	r20,zero,1c544 <__call_exitprocs+0x100>
   1c4cc:	80804017 	ldw	r2,256(r16)
   1c4d0:	15001c26 	beq	r2,r20,1c544 <__call_exitprocs+0x100>
   1c4d4:	e73fffc4 	addi	fp,fp,-1
   1c4d8:	843fff04 	addi	r16,r16,-4
   1c4dc:	8c7fff04 	addi	r17,r17,-4
   1c4e0:	e5bff91e 	bne	fp,r22,1c4c8 <__alt_mem_Flash_flash_data+0xf401c4c8>
   1c4e4:	00800034 	movhi	r2,0
   1c4e8:	10800004 	addi	r2,r2,0
   1c4ec:	10000926 	beq	r2,zero,1c514 <__call_exitprocs+0xd0>
   1c4f0:	98800117 	ldw	r2,4(r19)
   1c4f4:	1000311e 	bne	r2,zero,1c5bc <__call_exitprocs+0x178>
   1c4f8:	98800017 	ldw	r2,0(r19)
   1c4fc:	10003426 	beq	r2,zero,1c5d0 <__call_exitprocs+0x18c>
   1c500:	9809883a 	mov	r4,r19
   1c504:	a8800015 	stw	r2,0(r21)
   1c508:	00000000 	call	0 <__alt_mem_SDRAM>
   1c50c:	acc00017 	ldw	r19,0(r21)
   1c510:	983fe41e 	bne	r19,zero,1c4a4 <__alt_mem_Flash_flash_data+0xf401c4a4>
   1c514:	dfc00b17 	ldw	ra,44(sp)
   1c518:	df000a17 	ldw	fp,40(sp)
   1c51c:	ddc00917 	ldw	r23,36(sp)
   1c520:	dd800817 	ldw	r22,32(sp)
   1c524:	dd400717 	ldw	r21,28(sp)
   1c528:	dd000617 	ldw	r20,24(sp)
   1c52c:	dcc00517 	ldw	r19,20(sp)
   1c530:	dc800417 	ldw	r18,16(sp)
   1c534:	dc400317 	ldw	r17,12(sp)
   1c538:	dc000217 	ldw	r16,8(sp)
   1c53c:	dec00c04 	addi	sp,sp,48
   1c540:	f800283a 	ret
   1c544:	98800117 	ldw	r2,4(r19)
   1c548:	80c00017 	ldw	r3,0(r16)
   1c54c:	10bfffc4 	addi	r2,r2,-1
   1c550:	17001526 	beq	r2,fp,1c5a8 <__call_exitprocs+0x164>
   1c554:	80000015 	stw	zero,0(r16)
   1c558:	183fde26 	beq	r3,zero,1c4d4 <__alt_mem_Flash_flash_data+0xf401c4d4>
   1c55c:	00800044 	movi	r2,1
   1c560:	1708983a 	sll	r4,r2,fp
   1c564:	98806217 	ldw	r2,392(r19)
   1c568:	9dc00117 	ldw	r23,4(r19)
   1c56c:	2084703a 	and	r2,r4,r2
   1c570:	1000061e 	bne	r2,zero,1c58c <__call_exitprocs+0x148>
   1c574:	183ee83a 	callr	r3
   1c578:	98800117 	ldw	r2,4(r19)
   1c57c:	15ffc51e 	bne	r2,r23,1c494 <__alt_mem_Flash_flash_data+0xf401c494>
   1c580:	a8800017 	ldw	r2,0(r21)
   1c584:	14ffd326 	beq	r2,r19,1c4d4 <__alt_mem_Flash_flash_data+0xf401c4d4>
   1c588:	003fc206 	br	1c494 <__alt_mem_Flash_flash_data+0xf401c494>
   1c58c:	98806317 	ldw	r2,396(r19)
   1c590:	2084703a 	and	r2,r4,r2
   1c594:	1000061e 	bne	r2,zero,1c5b0 <__call_exitprocs+0x16c>
   1c598:	89400017 	ldw	r5,0(r17)
   1c59c:	9009883a 	mov	r4,r18
   1c5a0:	183ee83a 	callr	r3
   1c5a4:	003ff406 	br	1c578 <__alt_mem_Flash_flash_data+0xf401c578>
   1c5a8:	9f000115 	stw	fp,4(r19)
   1c5ac:	003fea06 	br	1c558 <__alt_mem_Flash_flash_data+0xf401c558>
   1c5b0:	89000017 	ldw	r4,0(r17)
   1c5b4:	183ee83a 	callr	r3
   1c5b8:	003fef06 	br	1c578 <__alt_mem_Flash_flash_data+0xf401c578>
   1c5bc:	98800017 	ldw	r2,0(r19)
   1c5c0:	982b883a 	mov	r21,r19
   1c5c4:	1027883a 	mov	r19,r2
   1c5c8:	983fb61e 	bne	r19,zero,1c4a4 <__alt_mem_Flash_flash_data+0xf401c4a4>
   1c5cc:	003fd106 	br	1c514 <__alt_mem_Flash_flash_data+0xf401c514>
   1c5d0:	0005883a 	mov	r2,zero
   1c5d4:	003ffa06 	br	1c5c0 <__alt_mem_Flash_flash_data+0xf401c5c0>

0001c5d8 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
   1c5d8:	defffd04 	addi	sp,sp,-12
   1c5dc:	df000215 	stw	fp,8(sp)
   1c5e0:	df000204 	addi	fp,sp,8
   1c5e4:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
   1c5e8:	008000b4 	movhi	r2,2
   1c5ec:	10835644 	addi	r2,r2,3417
   1c5f0:	10000005 	stb	zero,0(r2)
   1c5f4:	e0bfff17 	ldw	r2,-4(fp)
   1c5f8:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
   1c5fc:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
   1c600:	10000226 	beq	r2,zero,1c60c <_exit+0x34>
    ALT_SIM_FAIL();
   1c604:	002af070 	cmpltui	zero,zero,43969
   1c608:	00000106 	br	1c610 <_exit+0x38>
  } else {
    ALT_SIM_PASS();
   1c60c:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
   1c610:	003fff06 	br	1c610 <__alt_mem_Flash_flash_data+0xf401c610>
